{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/configure.ac": "#  Copyright 1999-2016 ImageMagick Studio LLC, a non-profit organization\n#  dedicated to making software imaging solutions freely available.\n#\n#  You may not use this file except in compliance with the License.  You may\n#  obtain a copy of the License at\n#\n#    http://www.imagemagick.org/script/license.php\n#\n#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,\n#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#  See the License for the specific language governing permissions and\n#  limitations under the License.\n#\n#  Copyright (C) 2003 - 2008 GraphicsMagick Group\n#\n#  Copying and distribution of this file, with or without modification,\n#  are permitted in any medium without royalty provided the copyright\n#  notice and this notice are preserved.\n\n# Process this file with autoconf to create configure script.\nAC_PREREQ(2.69)\n\n# ==============================================================================\n# ImageMagick release.\n# ==============================================================================\nm4_define([magick_major_version], [7])\nm4_define([magick_minor_version], [0])\nm4_define([magick_micro_version], [2])\nm4_define([magick_patchlevel_version], [7])\nm4_define([magick_version],\n          [magick_major_version.magick_minor_version.magick_micro_version-magick_patchlevel_version])\nm4_define([magick_git_revision], esyscmd([sh -c \"(gitversion .) | tr -d '\\n'\"]))\nm4_define([magick_tar_name],[ImageMagick])\n\n# ==============================================================================\n# Initalize Automake\n# ==============================================================================\nAC_INIT([ImageMagick],\n        [magick_version],\n        [https://github.com/ImageMagick/ImageMagick/issues],\n        [magick_tar_name],\n        [http://www.imagemagick.org])\nAC_CONFIG_SRCDIR([MagickCore/MagickCore.h])\nAC_CONFIG_AUX_DIR([config])\nAC_REQUIRE_AUX_FILE([tap-driver.sh])\nAC_CONFIG_MACRO_DIR([m4])\nAC_CONFIG_HEADERS([config/config.h])\nAX_PREFIX_CONFIG_H([MagickCore/magick-baseconfig.h],[MagickCore])\nAC_CANONICAL_SYSTEM\nAC_CANONICAL_TARGET\nAM_INIT_AUTOMAKE([foreign color-tests -Wall -Wno-portability subdir-objects dist-bzip2 dist-lzip dist-xz dist-zip tar-ustar])\nAM_SILENT_RULES([yes])\n\n#\n# Save initial user-tunable values\n#\nUSER_LIBS=$LIBS\nfor var in CC CFLAGS CPPFLAGS CXX CXXCPP LDFLAGS LIBS ; do\n  eval isset=\\${$var+set}\n    if test \"$isset\" = 'set'; then\n        eval val=$`echo $var`\n        DISTCHECK_CONFIG_FLAGS=\"${DISTCHECK_CONFIG_FLAGS}'${var}=${val}' \"\n    fi\ndone\nAC_SUBST(DISTCHECK_CONFIG_FLAGS)\n\nCONFIGURE_ARGS=\"$0 ${ac_configure_args}\"\nAC_SUBST(CONFIGURE_ARGS)\n\nAC_ARG_ENABLE([reproducible-build],\n    [AC_HELP_STRING([--enable-reproducible-build],\n                    [enable reproducible build])],\n    [enable_reproducible_build=$enableval],\n    [enable_reproducible_build='no'])\n\n# Source file containing package/library versioning information.\n. ${srcdir}/version.sh\n\necho \"configuring ${PACKAGE_NAME} ${PACKAGE_VERSION}${PACKAGE_VERSION_ADDENDUM}\"\n\nMAGICK_TARGET_CPU=$host_cpu\nAC_SUBST(MAGICK_TARGET_CPU)\nAC_DEFINE_UNQUOTED(MAGICK_TARGET_CPU,$MAGICK_TARGET_CPU,[Target Host CPU])\n\nMAGICK_TARGET_VENDOR=$host_vendor\nAC_SUBST(MAGICK_TARGET_VENDOR)\nAC_DEFINE_UNQUOTED(MAGICK_TARGET_VENDOR,$MAGICK_TARGET_VENDOR,[Target Host Vendor])\n\nMAGICK_TARGET_OS=$host_os\nAC_SUBST(MAGICK_TARGET_OS)\nAC_DEFINE_UNQUOTED(MAGICK_TARGET_OS,$MAGICK_TARGET_OS,[Target Host OS])\n\n\n# Substitute versioning\nAC_SUBST([MAGICK_MAJOR_VERSION],[magick_major_version])\nAC_SUBST([MAGICK_MINOR_VERSION],[magick_minor_version])\nAC_SUBST([MAGICK_MICRO_VERSION],[magick_micro_version])\nAC_SUBST([MAGICK_PATCHLEVEL_VERSION],[magick_patchlevel_version])\nAC_SUBST([MAGICK_VERSION],[magick_version])\nAC_SUBST([MAGICK_GIT_REVISION],[magick_git_revision])\n\n# Substitute library versioning\nAC_SUBST(MAGICK_LIBRARY_CURRENT)dnl\nAC_SUBST(MAGICK_LIBRARY_REVISION)dnl\nAC_SUBST(MAGICK_LIBRARY_AGE)dnl\nAC_SUBST([MAGICK_LIBRARY_CURRENT_MIN],\n         [`expr $MAGICK_LIBRARY_CURRENT - $MAGICK_LIBRARY_AGE`])\nAC_SUBST([MAGICK_LIBRARY_VERSION_INFO],\n         [$MAGICK_LIBRARY_CURRENT:$MAGICK_LIBRARY_REVISION:$MAGICK_LIBRARY_AGE])\n\nAC_SUBST(MAGICKPP_LIBRARY_CURRENT)dnl\nAC_SUBST(MAGICKPP_LIBRARY_REVISION)dnl\nAC_SUBST(MAGICKPP_LIBRARY_AGE)dnl\nAC_SUBST([MAGICKPP_LIBRARY_CURRENT_MIN],\n         [`expr $MAGICKPP_LIBRARY_CURRENT - $MAGICKPP_LIBRARY_AGE`])\nAC_SUBST([MAGICKPP_LIBRARY_VERSION_INFO],\n         [$MAGICKPP_LIBRARY_CURRENT:$MAGICKPP_LIBRARY_REVISION:$MAGICKPP_LIBRARY_AGE])\n\nAC_SUBST(PACKAGE_NAME)dnl\nAC_SUBST(PACKAGE_VERSION)dnl\nAC_SUBST(PACKAGE_PERL_VERSION)dnl\nAC_SUBST(PACKAGE_RELEASE)dnl\nAC_SUBST(PACKAGE_CHANGE_DATE)dnl\nAC_SUBST(PACKAGE_LIB_VERSION)dnl\nAC_SUBST(PACKAGE_LIB_VERSION_NUMBER)dnl\nAS_IF([test X$enable_reproducible_build = Xyes],\n [PACKAGE_RELEASE_DATE=$PACKAGE_RELEASE_DATE_REPRODUCIBLE],\n [PACKAGE_RELEASE_DATE=$PACKAGE_RELEASE_DATE_RAW],\n)\nAC_SUBST(PACKAGE_RELEASE_DATE)dnl\n\nAC_SUBST(PACKAGE_VERSION_ADDENDUM)dnl\n\n# Ensure that make can run correctly\nAM_SANITY_CHECK\n\n# versioning of library\nMAGICK_LIB_VERSION=\"0x\"\nif test ${MAGICK_LIBRARY_CURRENT} -lt 10 ; then\n  MAGICK_LIB_VERSION=${MAGICK_LIB_VERSION}0\nfi\nMAGICK_LIB_VERSION=${MAGICK_LIB_VERSION}${MAGICK_LIBRARY_CURRENT}\nif test ${MAGICK_LIBRARY_AGE} -lt 10 ; then\n  MAGICK_LIB_VERSION=${MAGICK_LIB_VERSION}0\nfi\nMAGICK_LIB_VERSION=${MAGICK_LIB_VERSION}${MAGICK_LIBRARY_AGE}\nif test ${MAGICK_LIBRARY_REVISION} -lt 10 ; then\n  MAGICK_LIB_VERSION=${MAGICK_LIB_VERSION}0\nfi\nMAGICK_LIB_VERSION=${MAGICK_LIB_VERSION}${MAGICK_LIBRARY_REVISION}\nAC_SUBST(MAGICK_LIB_VERSION)\n\n# Definition used to define MagickLibVersionText in version.h\nMAGICK_LIB_VERSION_TEXT=\"${PACKAGE_VERSION}\"\nAC_SUBST(MAGICK_LIB_VERSION_TEXT)\n\n# Definition used to define MagickLibVersionNumber in version.h\nMAGICK_LIB_VERSION_NUMBER=\"${MAGICK_LIBRARY_CURRENT},${MAGICK_LIBRARY_AGE},${MAGICK_LIBRARY_REVISION}\"\nAC_SUBST(MAGICK_LIB_VERSION_NUMBER)\n\nMAGICKPP_LIB_VERSION=\"0x\"\nif test ${MAGICKPP_LIBRARY_CURRENT} -lt 10 ; then\n  MAGICKPP_LIB_VERSION=${MAGICKPP_LIB_VERSION}0\nfi\nMAGICKPP_LIB_VERSION=${MAGICKPP_LIB_VERSION}${MAGICKPP_LIBRARY_CURRENT}\nif test ${MAGICKPP_LIBRARY_AGE} -lt 10 ; then\n  MAGICKPP_LIB_VERSION=${MAGICKPP_LIB_VERSION}0\nfi\nMAGICKPP_LIB_VERSION=${MAGICKPP_LIB_VERSION}${MAGICKPP_LIBRARY_AGE}\nif test ${MAGICKPP_LIBRARY_REVISION} -lt 10 ; then\n  MAGICKPP_LIB_VERSION=${MAGICKPP_LIB_VERSION}0\nfi\nMAGICKPP_LIB_VERSION=${MAGICKPP_LIB_VERSION}${MAGICKPP_LIBRARY_REVISION}\nAC_SUBST(MAGICKPP_LIB_VERSION)\n\n# Definition used to define MagickLibVersionText in version.h\nMAGICKPP_LIB_VERSION_TEXT=\"${PACKAGE_VERSION}\"\nAC_SUBST(MAGICKPP_LIB_VERSION_TEXT)\n\n# Definition used to define MagickLibVersionNumber in version.h\nMAGICK_LIB_VERSION_NUMBER=\"${MAGICK_LIBRARY_CURRENT},${MAGICK_LIBRARY_AGE},${MAGICK_LIBRARY_REVISION}\"\nAC_SUBST(MAGICK_LIB_VERSION_NUMBER)\n\n\n\n# Regenerate config.status if ChangeLog or version.sh is updated.\nAC_SUBST([CONFIG_STATUS_DEPENDENCIES],['$(top_srcdir)/version.sh'])\n\nPERLMAINCC=$CC\n\nMAGICK_CFLAGS=''\nMAGICK_CPPFLAGS=$CPPFLAGS_USER\nMAGICK_PCFLAGS=$CPPFLAGS_USER\nMAGICK_LDFLAGS=''\nMAGICK_LIBS=''\nMAGICK_FEATURES=''\n\n#\n# Evaluate shell variable equivalents to Makefile directory variables\n#\nif test \"x$prefix\" = xNONE; then\n    prefix=$ac_default_prefix\nfi\n# Let make expand exec_prefix.\nif test \"x$exec_prefix\" = xNONE; then\n    exec_prefix='${prefix}'\nfi\n\n#\neval \"eval PREFIX_DIR=${prefix}\"\nAC_SUBST(PREFIX_DIR)\neval \"eval EXEC_PREFIX_DIR=${exec_prefix}\"\nAC_SUBST(EXEC_PREFIX_DIR)\neval \"eval BIN_DIR=$bindir\"\nAC_SUBST(BIN_DIR)\neval \"eval SBIN_DIR=$sbindir\"\nAC_SUBST(SBIN_DIR)\neval \"eval LIBEXEC_DIR=$libexecdir\"\nAC_SUBST(LIBEXEC_DIR)\neval \"eval DATA_DIR=$datadir\"\nAC_SUBST(DATA_DIR)\neval \"eval DOC_DIR=$datadir/doc\"\nAC_SUBST(DOC_DIR)\neval \"eval SYSCONF_DIR=$sysconfdir\"\nAC_SUBST(SYSCONF_DIR)\neval \"eval SHAREDSTATE_DIR=$sharedstatedir\"\nAC_SUBST(SHAREDSTATE_DIR)\neval \"eval LOCALSTATE_DIR=$localstatedir\"\nAC_SUBST(LOCALSTATE_DIR)\neval \"eval LIB_DIR=$libdir\"\nAC_SUBST(LIB_DIR)\neval \"eval INCLUDE_DIR=$includedir\"\nAC_SUBST(INCLUDE_DIR)\neval \"eval PERSISTINCLUDE_DIR=$oldincludedir\"\nAC_SUBST(PERSISTINCLUDE_DIR)\neval \"eval INFO_DIR=$infodir\"\nAC_SUBST(INFO_DIR)\neval \"eval MAN_DIR=$mandir\"\nAC_SUBST(MAN_DIR)\n\n# Get full paths to source and build directories\nsrcdirfull=\"`cd $srcdir && pwd`\"\nbuilddir=\"`pwd`\"\n\n#\n# Compute variables useful for running uninstalled software.\n#\nMAGICK_CODER_MODULE_PATH=\"${builddir}/coders\"\nMAGICK_CONFIGURE_SRC_PATH=\"${srcdirfull}/config\"\nMAGICK_CONFIGURE_BUILD_PATH=\"${builddir}/config\"\nMAGICK_FILTER_MODULE_PATH=\"${builddir}/filters\"\nDIRSEP=':'\ncase \"${build_os}\" in\n    mingw* )\n        MAGICK_CODER_MODULE_PATH=`$WinPathScript \"${MAGICK_CODER_MODULE_PATH}\" 0`\n        MAGICK_CONFIGURE_SRC_PATH=`$WinPathScript \"${MAGICK_CONFIGURE_SRC_PATH}\" 0`\n        MAGICK_CONFIGURE_BUILD_PATH=`$WinPathScript \"${MAGICK_CONFIGURE_BUILD_PATH}\" 0`\n        MAGICK_FILTER_MODULE_PATH=`$WinPathScript \"${MAGICK_FILTER_MODULE_PATH}\" 0`\n        DIRSEP=';'\n    ;;\nesac\ncase \"${host_os}\" in\n  mingw* )\n    DIRSEP=';'\n    ;;\nesac\nAC_SUBST(MAGICK_CODER_MODULE_PATH)\nAC_SUBST(MAGICK_CONFIGURE_SRC_PATH)\nAC_SUBST(MAGICK_CONFIGURE_BUILD_PATH)\nAC_SUBST(MAGICK_FILTER_MODULE_PATH)\nAC_SUBST(DIRSEP)\n\n\n#\n# Enable OS features.\n#\nAC_USE_SYSTEM_EXTENSIONS\n\n# ==============================================================================\n# Find required base packages\n# ==============================================================================\nm4_ifdef([AM_PROG_AR], [AM_PROG_AR])\nAC_PROG_CC\nAC_PROG_CXX\nAC_PROG_CC_STDC\nAC_PROG_CPP\nAC_PROG_LD\nAC_SUBST(LD)\nAC_PROG_CC_C99\nAM_PROG_CC_C_O\nAX_CFLAGS_WARN_ALL\nAC_PROG_INSTALL\nAC_PROG_MAKE_SET\nAC_PROG_LN_S\nAC_PROG_SED\nAC_PROG_AWK\nAM_WITH_DMALLOC\nAX_C___ATTRIBUTE__\nAX_GCC_ARCHFLAG([yes])\nPKG_PROG_PKG_CONFIG([0.20])\nAC_CANONICAL_BUILD\nAC_CANONICAL_HOST\n\n# Test for 64-bit build.\nAC_CHECK_SIZEOF([size_t])\n\nAX_COMPILER_VENDOR\nAX_COMPILER_FLAGS\n# The AX_CFLAGS_WARN_ALL macro doesn't currently work for sunpro\n# compiler.\nif test \"$ax_cv_c_compiler_vendor\" != \"sun\"; then\n  AX_CFLAGS_WARN_ALL\nfi\n\nif test \"x$GCC\" = \"xyes\"; then\n  CFLAGS=\"$CFLAGS -fexceptions\"\n  touch local.exp\nelse\n  cat > local.exp <<EOF\nset CC_FOR_TARGET \"$CC\"\nEOF\nfi\n\n# Check for linker script support\ngl_LD_VERSION_SCRIPT\n\n#\n# Enable run-time checking.\n#\nAC_ARG_ENABLE([bounds-checking],\n    [AC_HELP_STRING([--enable-bounds-checking],\n                    [enable run-time bounds-checking])],\n    [enable_bounds_checking=$enableval],\n    [enable_bounds_checking='no'])\n\nif test \"$enable_bounds_checking\" = yes; then\n  AC_DEFINE([_FORTIFY_SOURCE], [2],\n    [enable run-time bounds-checking])\nfi\n\n#\n# Tests for Windows\n#\nAC_EXEEXT\nAC_OBJEXT\n\nGDI32_LIBS=''\nnative_win32_build='no'\ncygwin_build='no'\ncase \"${host_os}\" in\n    cygwin* )\n        cygwin_build='yes'\n        GDI32_LIBS='-lgdi32'\n    ;;\n    mingw* )\n        native_win32_build='yes'\n        GDI32_LIBS='-lgdi32'\n    ;;\nesac\nif test \"${GDI32_LIBS}x\" != 'x'; then\n    AC_DEFINE(WINGDI32_DELEGATE,1,Define to use the Windows GDI32 library)\nfi\nAC_SUBST(GDI32_LIBS)\nAM_CONDITIONAL(WINGDI32_DELEGATE, test \"${GDI32_LIBS}x\" != 'x' )\nAM_CONDITIONAL(WIN32_NATIVE_BUILD, test \"${native_win32_build}\" = 'yes' )\nAM_CONDITIONAL(CYGWIN_BUILD, test \"${cygwin_build}\" = 'yes' )\nAM_CONDITIONAL(USING_CL, test \"x${CC}\" = 'xcl.exe' )\n\nWinPathScript=\"${srcdirfull}/winpath.sh\"\nAC_SUBST(WinPathScript)\n\n#\n# Compiler flags tweaks\n#\nif test \"${GCC}\" != \"yes\"; then\n    case \"${host}\" in\n        *-*-hpux* )\n            # aCC: HP ANSI C++ B3910B A.03.34\n            CFLAGS=\"${CFLAGS} -Wp,-H30000\"\n            if test -n \"${CXXFLAGS}\"; then\n                CXXFLAGS='-AA'\n            else\n                CXXFLAGS=\"${CXXFLAGS} -AA\"\n            fi\n        ;;\n        *-dec-osf5.* )\n            # Compaq alphaev68-dec-osf5.1 compiler\n            if test -n \"${CXXFLAGS}\"; then\n                CXXFLAGS='-std strict_ansi -noimplicit_include'\n            else\n                CXXFLAGS=\"${CXXFLAGS} -std strict_ansi -noimplicit_include\"\n            fi\n  esac\nfi\n\n# Check for lazy-loading.\nAC_CACHE_CHECK([for linker lazyload option],[im_cv_ld_lazyload],\n[\nim_cv_ld_lazyload='none'\ncase \"${host}\" in\n  *-*-solaris2.8 | *-*-solaris2.9 | *-*-solaris2.1? )\n    if test \"$lt_cv_prog_gnu_ld\" != 'yes' ; then\n       im_cv_ld_lazyload='-Wl,-zlazyload'\n    fi\n    ;;\nesac\n])\nif test \"${im_cv_ld_lazyload}\" != 'none' ; then\n  if test -z \"${LDFLAGS}\" ; then\n    LDFLAGS=\"${im_cv_ld_lazyload}\"\n  else\n    LDFLAGS=\"${im_cv_ld_lazyload} ${LDFLAGS}\"\n  fi\nfi\n\ndnl Platform-specific stuff\ncase \"$host\" in\n  *darwin* | *-macos10*)\n    dnl Disable FORTIFY_SOURCE to fix a bug in LVVM / OpenMP support\n    CFLAGS=\"${CFLAGS} -D_FORTIFY_SOURCE=0\"\n    dnl OS X universal binary support, requires --disable-dependency-tracking\n    AC_ARG_ENABLE([osx-universal-binary],\n        AC_HELP_STRING([--enable-osx-universal-binary],\n           [build universal binary on OS X [[default=no]]]),\n        [build_osxuniversal=\"${enableval}\"], [build_osxuniversal=no])\n\n    if test \"${build_osxuniversal}\" != no ; then\n      if test \"$enable_dependency_tracking\" != no ; then\n        AC_MSG_ERROR([--enable-osx-universal-binary requires --disable-dependency-tracking.\nPlease re-run configure with these options:\n  --disable-dependency-tracking --enable-osx-universal-binary\n        ])\n      fi\n      CFLAGS=\"$CFLAGS -isysroot /Developer/SDKs/MacOSX10.5.sdk -arch ppc -arch i386\"\n      CXXFLAGS=\"$CXXFLAGS -isysroot /Developer/SDKs/MacOSX10.5.sdk -arch ppc -arch i386\"\n      LDFLAGS=\"$LDFLAGS -Wl,-syslibroot,/Developer/SDKs/MacOSX10.5.sdk -arch ppc -arch i386\"\n  fi\n  ;;\nesac\n\n#\n# ARCH specific include directory\n#\nAC_ARG_WITH([includearch-dir],\n    [AC_HELP_STRING([--includearch-dir=DIR],\n                    [ARCH specific include directory])],\n                    [includearch_dir=$withval],\n                    [includearch_dir=$INCLUDE_DIR])\n\neval \"eval INCLUDEARCH_DIR=$includearch_dir\"\nAC_SUBST(INCLUDEARCH_DIR)\n\n#\n# ARCH specific configuration directory\n#\nAC_ARG_WITH([sharearch-dir],\n    [AC_HELP_STRING([--sharearch-dir=DIR],\n                    [ARCH specific config directory])],\n                    [sharearch_dir=$withval],\n                    [sharearch_dir=\"${LIB_DIR}\"])\n\neval \"eval SHAREARCH_DIR=$sharearch_dir\"\nAC_SUBST(SHAREARCH_DIR)\n\n# Path to the pkgconfig folder\nAC_ARG_WITH([pkgconfigdir], AS_HELP_STRING([--with-pkgconfigdir=DIR],\n            [Path to the pkgconfig directory @<:@LIBDIR/pkgconfig@:>@]),\n            [pkgconfigdir=\"$withval\"], [pkgconfigdir='${libdir}/pkgconfig'])\nAC_SUBST([pkgconfigdir])\n\n#\n# Enable support for threads\n#\n# Find Posix threads library\n#\nAC_ARG_WITH([threads],\n    [AC_HELP_STRING([--without-threads], [disable threads support])],\n    [with_threads=$withval],\n    [with_threads='yes'])\n\nTHREAD_LIBS=''\nhave_threads=no\nif test \"$with_threads\" != 'no'; then\n    AX_PTHREAD()\n    if test \"$ax_pthread_ok\" = yes; then\n        have_threads=yes\n        DEF_THREAD=\"$PTHREAD_CFLAGS\"\n        CFLAGS=\"$CFLAGS $DEF_THREAD\"\n        CXXFLAGS=\"$CXXFLAGS $DEF_THREAD\"\n\tTHREAD_LIBS=\"$PTHREAD_LIBS\"\n        if test \"$CC\" != \"$PTHREAD_CC\"; then\n            AC_MSG_WARN([Replacing compiler $CC with compiler $PTHREAD_CC to support pthreads.])\n            CC=\"$PTHREAD_CC\"\n        fi\n        AC_DEFINE(THREAD_SUPPORT,1,[Define if you have POSIX threads libraries and header files.])\n    fi\nfi\nLIBS=\"$LIBS $THREAD_LIBS\"\nAC_SUBST(THREAD_LIBS)\n\n# Enable support for OpenMP\nif test \"$have_threads\" != 'yes'; then\n  ac_cv_prog_c_openmp=unsupported\nfi\nAC_OPENMP([C])\nCFLAGS=\"$OPENMP_CFLAGS $CFLAGS\"\nMAGICK_PCFLAGS=\"$MAGICK_PCFLAGS $OPENMP_CFLAGS\"\nAC_SUBST(OPENMP_CFLAGS)\nif test \"$enable_openmp\" != no; then\n  if test \"$ac_cv_prog_c_openmp\" != 'unsupported'; then\n    MAGICK_FEATURES=\"OpenMP $MAGICK_FEATURES\"\n  fi\nfi\n\n# Enable support for OpenCL\nAX_OPENCL([C])\nCFLAGS=\"$CL_CFLAGS $CFLAGS\"\nCPPFLAGS=\"$CL_CFLAGS $CPPFLAGS\"\nLIBS=\"$CL_LIBS $LIBS\"\nAC_SUBST(CL_CFLAGS)\nif test \"$enable_opencl\" != no; then\n  if test \"X$ax_cv_check_cl_libcl\" != Xno; then :\n    MAGICK_FEATURES=\"OpenCL $MAGICK_FEATURES\"\n  fi\nfi\n\n########\n#\n# Check for large file support\n#\n########\nAC_SYS_LARGEFILE\nAC_FUNC_FSEEKO\nLFS_CPPFLAGS=''\nif test \"$enable_largefile\" != no; then\n    case $ac_cv_sys_file_offset_bits in\n    no)\n        # nothing to do here as the host supports LFS fine\n        ;;\n    unknown)\n        AC_MSG_CHECKING([for native large file support])\n        AC_RUN_IFELSE([AC_LANG_PROGRAM([#include <unistd.h>\n          main () {\n          exit(!(sizeof(off_t) == 8));\n        }])],\n        [ac_cv_sys_file_offset_bits=64; AC_DEFINE(_FILE_OFFSET_BITS,64)\n         AC_MSG_RESULT([yes])],\n        [AC_MSG_RESULT([no])])\n        ;;\n    *)\n        LFS_CPPFLAGS=\"$LFS_CPPFLAGS -D_FILE_OFFSET_BITS=$ac_cv_sys_file_offset_bits\"\n        ;;\n    esac\n    if test \"$ac_cv_sys_large_files\" != 'no'; then\n        LFS_CPPFLAGS=\"$LFS_CPPFLAGS -D_LARGE_FILES=1\"\n    fi\n    if test \"$ac_cv_sys_largefile_source\" != 'no'; then\n        LFS_CPPFLAGS=\"$LFS_CPPFLAGS -D_LARGEFILE_SOURCE=1\"\n    fi\nfi\nAC_SUBST(LFS_CPPFLAGS)\n\n# Configure libtool\nAC_LIBTOOL_DLOPEN\nLT_INIT([win32-dll])\nLT_LANG([C++])\nAC_SUBST(LIBTOOL_DEPS)\n\n# Check to see if building shared libraries\nlibtool_build_shared_libs='no'\nif test \"$enable_shared\" = 'yes'; then\n    libtool_build_shared_libs='yes'\nfi\n\n# Check to see if building static libraries\nlibtool_build_static_libs='no'\nif test \"$enable_static\" = 'yes'; then\n    libtool_build_static_libs='yes'\nfi\n\nAM_CONDITIONAL(WITH_SHARED_LIBS, test \"${libtool_build_shared_libs}\" = 'yes')\n#\n# Enable support for building loadable modules\n#\nbuild_modules='no'\nAC_ARG_WITH([modules],\n    [AC_HELP_STRING([--with-modules],\n                    [enable building dynamically loadable modules])],\n    [with_modules=$withval],\n    [with_modules='no'])\n\n# Only allow building loadable modules if we are building shared libraries\nif test \"$with_modules\" != 'no' ; then\n    if test \"$libtool_build_shared_libs\" = 'no'; then\n        AC_MSG_WARN([Modules may only be built if building shared libraries is enabled.])\n    build_modules='no'\n  else\n    build_modules='yes'\n  fi\nfi\nif test \"$build_modules\" != 'no' ; then\n    AC_DEFINE(BUILD_MODULES,1,Define if coders and filters are to be built as modules.)\n    MAGICK_FEATURES=\"$MAGICK_FEATURES Modules\"\nfi\nAM_CONDITIONAL(WITH_MODULES, test \"$build_modules\" != 'no')\n\n# Enable build using delegate libraries built in subdirectories rather than installed\n# delegate libraries (bzlib fftw fpx gslib jp2 jbig jpeg lcms lzma png tiff ttf wmf xml zlib)\nAC_ARG_ENABLE([delegate-build],\n    [AC_HELP_STRING([--enable-delegate-build],\n                    [look for delegate libraries in build directory])],\n    [enable_delegate_build=$enableval],\n    [enable_delegate_build='no'])\n\nAC_ARG_ENABLE([deprecated],\n    [AC_HELP_STRING([--disable-deprecated],\n                    [exclude deprecated methods in MagickCore and MagickWand APIs])],\n    [enable_deprecated=$enableval],\n    [enable_deprecated='no'])\n\nif test \"$enable_deprecated\" = 'yes'; then\n  AC_DEFINE(EXCLUDE_DEPRECATED,1,[exclude deprecated methods in MagickCore API])\nelse\n  DISTCHECK_CONFIG_FLAGS=\"${DISTCHECK_CONFIG_FLAGS} --disable-deprecated \"\nfi\n\n# Build a version of ImageMagick which operates uninstalled.\n# Used to build distributions located via MAGICK_HOME / executable path\nAC_ARG_ENABLE([installed],\n    [AC_HELP_STRING([--disable-installed],\n                    [Formally install ImageMagick under PREFIX])],\n    [enable_installed=$enableval],\n    [enable_installed='yes'])\n\nif test \"$enable_installed\" = 'yes'; then\n    AC_DEFINE(INSTALLED_SUPPORT,1,[ImageMagick is formally installed under prefix])\nelse\n    DISTCHECK_CONFIG_FLAGS=\"${DISTCHECK_CONFIG_FLAGS} --disable-installed \"\nfi\n\n# Permit enciphering and deciphering image pixels.\nAC_ARG_ENABLE([cipher],\n    [AC_HELP_STRING([--disable-cipher],\n                    [disable enciphering and deciphering image pixels])],\n    [enable_cipher=$enableval],\n    [enable_cipher='yes'])\n\nif test \"$enable_cipher\" = 'yes'; then\n    AC_DEFINE(CIPHER_SUPPORT,1,[permit enciphering and deciphering image pixels])\n    MAGICK_FEATURES=\"Cipher $MAGICK_FEATURES\"\nfi\n\n# Build a zero-configuration version of ImageMagick.\nAC_ARG_ENABLE([zero-configuration],\n    [AC_HELP_STRING([--enable-zero-configuration],\n                    [enable self-contained, embeddable, zero-configuration ImageMagick])],\n    [enable_zero_configuration=$enableval],\n    [enable_zero_configuration='no'])\n\nif test \"$enable_zero_configuration\" = 'yes'; then\n    AC_DEFINE(ZERO_CONFIGURATION_SUPPORT,1,[Build self-contained, embeddable, zero-configuration ImageMagick])\n    MAGICK_FEATURES=\"Zero-configuration $MAGICK_FEATURES\"\nfi\n\n# Build a high dynamic range version of ImageMagick.\nAC_ARG_ENABLE([hdri],\n    [AC_HELP_STRING([--enable-hdri],\n                    [accurately represent the wide range of intensity levels found in real scenes])],\n    [enable_hdri=$enableval],\n    [enable_hdri='yes'])\n\nMAGICK_HDRI=\"\"\nif test \"$enable_hdri\" = 'yes'; then\n    MAGICK_HDRI=\"HDRI\"\n    magick_hdri_enable='1';\n    MAGICK_FEATURES=\"HDRI $MAGICK_FEATURES\"\nelse\n    magick_hdri_enable='0'\nfi\nAC_DEFINE_UNQUOTED(HDRI_ENABLE_OBSOLETE_IN_H,$magick_hdri_enable,[Whether hdri is enabled or not])\nAC_SUBST(MAGICK_HDRI)dnl\nMAGICK_PCFLAGS=\"$MAGICK_PCFLAGS -DMAGICKCORE_HDRI_ENABLE=$magick_hdri_enable\"\nCFLAGS=\"$CFLAGS -DMAGICKCORE_HDRI_ENABLE=$magick_hdri_enable\"\nCPPFLAGS=\"$CPPFLAGS -DMAGICKCORE_HDRI_ENABLE=$magick_hdri_enable\"\n\n# Enable pipes (|) in filenames.\nAC_ARG_ENABLE([pipes],\n    [AC_HELP_STRING([--enable-pipes],\n                    [enable pipes (|) in filenames])],\n    [enable_pipes=$enableval],\n    [enable_pipes='no'])\n\nif test \"$enable_pipes\" = 'yes'; then\n    AC_DEFINE(PIPES_SUPPORT,1,[enable pipes (|) in filenames])\n    MAGICK_FEATURES=\"Pipes $MAGICK_FEATURES\"\nfi\n\n# Build a version of ImageMagick with assert statements.\nAC_ARG_ENABLE([assert],\n    [AC_HELP_STRING([--disable-assert],\n                    [disable assert() statements in build])],\n    [enable_assert=$enableval],\n    [enable_assert='yes'])\n\nif test \"$enable_assert\" = 'no'; then\n    AC_DEFINE(NDEBUG,1,[Turn off assert statements])\nfi\n\n# Don't emit \"rebuild rules\" for configure, Makefile.ins, etc.\nAM_MAINTAINER_MODE\n\n# Enable hugepages support\nAC_ARG_ENABLE([hugepages],\n    [AC_HELP_STRING([--enable-hugepages],\n                    [enable 'huge pages' support])],\n    [enable_hugepages=$enableval],\n    [enable_hugepages='no'])\n\n# Enable ccmalloc memory debugging support\nAC_ARG_ENABLE([ccmalloc],\n    [AC_HELP_STRING([--enable-ccmalloc],\n                    [enable 'ccmalloc' memory debug support])],\n    [enable_ccmalloc=$enableval],\n    [enable_ccmalloc='no'])\n\n# Enable Electric Fence memory debugging support\nAC_ARG_ENABLE([efence],\n    [AC_HELP_STRING([--enable-efence],\n                    [enable 'efence' memory debug support])],\n    [enable_efence=$enableval],\n    [enable_efence='no'])\n\n# Enable prof-based profiling support\nAC_ARG_ENABLE([prof],\n    [AC_HELP_STRING([--enable-prof],\n                    [enable 'prof' profiling support])],\n    [enable_prof=$enableval],\n    [enable_prof='no'])\n\n# Enable gprof-based profiling support\nAC_ARG_ENABLE([gprof],\n    [AC_HELP_STRING([--enable-gprof],\n                    [enable 'gprof' profiling support])],\n    [enable_gprof=$enableval],\n    [enable_gprof='no'])\n\n# Enable gcov-based profiling support\nAC_ARG_ENABLE([gcov],\n    [AC_HELP_STRING([--enable-gcov],\n                    [enable 'gcov' profiling support])],\n    [enable_gcov=$enableval],\n    [enable_gcov='no'])\n\nenable_profiling='no'\nif test \"$enable_prof\" = 'yes' || test \"$enable_gprof\" = 'yes' || test \"$enable_gcov\" = 'yes'; then\n    enable_profiling='yes'\n    if test \"$libtool_build_shared_libs\" = 'yes'; then\n        echo \"Warning: Can not profile code using shared libraries\"\n    fi\nfi\n\n# Magick API method prefix\nAC_ARG_WITH([method-prefix],\n    [AC_HELP_STRING([--with-method-prefix=PREFIX],\n                    [prefix MagickCore API methods])],\n    [with_method_prefix=$withval],\n    [with_method_prefix='no'])\n\nif test \"$with_method_prefix\" != 'no'; then\n    AC_DEFINE_UNQUOTED(NAMESPACE_PREFIX,$with_method_prefix,[Magick API method prefix])\n    DISTCHECK_CONFIG_FLAGS=\"${DISTCHECK_CONFIG_FLAGS} --with-method-prefix \"\nfi\n\n# Enable legacy support (default no)\nAC_ARG_ENABLE(legacy-support,\n              [  --enable-legacy-support  install legacy command-line utilities (default disabled)],\n              [with_legacy_support=$enableval],\n              [with_legacy_support='no'])\nAM_CONDITIONAL(LEGACY_SUPPORT, test \"$with_legacy_support\" != 'no')\n\n# Number of bits in a Quantum\nAC_ARG_WITH([quantum-depth],\n    [AC_HELP_STRING([--with-quantum-depth=DEPTH],\n                    [number of bits in a pixel quantum (default 16)])],\n    [with_quantum_depth=$withval],\n    [with_quantum_depth=16])\n\nif test \"$with_quantum_depth\" != '8'; then\n    DISTCHECK_CONFIG_FLAGS=\"${DISTCHECK_CONFIG_FLAGS} --with-quantum-depth=$with_quantum_depth \"\nfi\n\ncase \"${with_quantum_depth}\" in\n    8 ) ;;\n    16 ) ;;\n    32 ) ;;\n    64 ) ;;\n    * ) AC_MSG_ERROR(\"Pixel quantum depth must have value of 8, 16, 32, or 64\") ;;\nesac\nQUANTUM_DEPTH=\"$with_quantum_depth\"\nAC_DEFINE_UNQUOTED(QUANTUM_DEPTH_OBSOLETE_IN_H,$QUANTUM_DEPTH,[Number of bits in a pixel Quantum (8/16/32/64)])\nAC_SUBST(QUANTUM_DEPTH)dnl\nMAGICK_PCFLAGS=\"$MAGICK_PCFLAGS -DMAGICKCORE_QUANTUM_DEPTH=$QUANTUM_DEPTH\"\nCFLAGS=\"$CFLAGS -DMAGICKCORE_QUANTUM_DEPTH=$QUANTUM_DEPTH\"\nCPPFLAGS=\"$CPPFLAGS -DMAGICKCORE_QUANTUM_DEPTH=$QUANTUM_DEPTH\"\n\n# define a lib suffix for abi purpose\nMAGICK_ABI_SUFFIX=\"Q${QUANTUM_DEPTH}\"\nif test \"$enable_hdri\" = 'yes'; then\n  MAGICK_ABI_SUFFIX=\"Q${QUANTUM_DEPTH}${MAGICK_HDRI}\"\nfi\nAC_SUBST(MAGICK_ABI_SUFFIX)\n\n# Set pixel cache threshold\nAC_ARG_WITH([cache],\n    [AC_HELP_STRING([--with-cache=THRESHOLD],\n                    [set pixel cache threshhold in MB (default available memory)])],\n    [with_cache=$withval],\n    [with_cache=''])\n\nif test \"$with_cache\" != ''; then\n    AC_DEFINE_UNQUOTED(PixelCacheThreshold,$with_cache,[Pixel cache threshold in MB (defaults to available memory)])\n    DISTCHECK_CONFIG_FLAGS=\"${DISTCHECK_CONFIG_FLAGS} --with-cache=$with_cache \"\nfi\n\n# Disable/Enable support for full delegate paths\nAC_ARG_WITH([frozenpaths],\n    [AC_HELP_STRING([--with-frozenpaths],\n                    [freeze delegate paths])],\n    [with_frozenpaths=$withval],\n    [with_frozenpaths='no'])\n\n# Enable build/install of Magick++\nAC_ARG_WITH([magick-plus-plus],\n    [AC_HELP_STRING([--without-magick-plus-plus],\n                    [disable build/install of Magick++])],\n    [with_magick_plus_plus=$withval],\n    [with_magick_plus_plus='yes'])\n\n# Encode the this name into the shared library.\nAC_ARG_WITH([package-release-name],\n    [AC_HELP_STRING([--with-package-release-name=NAME],\n                    [encode this name into the shared library])],\n[MAGICK_LT_RELEASE_OPTS=\"-release $withval\"])\nAC_SUBST(MAGICK_LT_RELEASE_OPTS)\n\n# Disable build/install of PerlMagick.\nAC_ARG_WITH([perl],\n    [AC_HELP_STRING([--with-perl],\n                    [enable build/install of PerlMagick])],\n    [with_perl=$withval],\n    [with_perl='no'])\n\n# Options to pass when configuring PerlMagick\nAC_ARG_WITH([perl-options],\n    [AC_HELP_STRING([--with-perl-options=OPTIONS],\n                    [options to pass on command-line when generating PerlMagick build file])],\nPERL_MAKE_OPTIONS=$withval)\nAC_SUBST(PERL_MAKE_OPTIONS)\n\n# Enable jemalloc, object-caching memory allocation library.\nAC_ARG_WITH(jemalloc,\n        [  --with-jemalloc         enable jemalloc memory allocation library support],\n        [with_jemalloc=$withval],\n        [with_jemalloc='no'])\nif test \"$with_jemalloc\" != 'yes' ; then\n    DISTCHECK_CONFIG_FLAGS=\"${DISTCHECK_CONFIG_FLAGS} --with-jemalloc=$with_jemalloc \"\nfi\n\n# Enable umem, object-caching memory allocation library.\nAC_ARG_WITH(umem,\n        [  --with-umem             enable umem memory allocation library support],\n        [with_umem=$withval],\n        [with_umem='no'])\nif test \"$with_umem\" != 'yes' ; then\n    DISTCHECK_CONFIG_FLAGS=\"${DISTCHECK_CONFIG_FLAGS} --with-umem=$with_umem \"\nfi\n\n#\n# Specify path to shared libstdc++ if not in normal location\n#\nAC_ARG_WITH([libstdc],\n    [AC_HELP_STRING([--with-libstdc=DIR],\n                    [ use libstdc++ in DIR (for GNU C++)])],\n    [with_libstdc=$withval],\n    [with_libstdc=''])\n\nif test \"$with_libstdc\" != ''; then\n    if test -d \"$with_libstdc\"; then\n        LIBSTDCLDFLAGS=\"-L$with_libstdc\"\n    fi\nfi\nAC_SUBST(LIBSTDCLDFLAGS)\n\n# Does gcc required -traditional?\nAC_PROG_GCC_TRADITIONAL\n\n########\n#\n# Set defines required to build DLLs and modules using MinGW\n#\n########\n# These options are set for multi-thread DLL module build\n#  libMagickCore:           _DLL _MAGICKMOD_ _MAGICKLIB_\n#  module:              _DLL\n#  executable/Magick++: _DLL _MAGICKMOD_\nMODULE_EXTRA_CPPFLAGS=''\nLIBRARY_EXTRA_CPPFLAGS=''\nif test \"${native_win32_build}\" = 'yes'; then\n    if test \"${libtool_build_shared_libs}\" = 'yes'; then\n        CPPFLAGS=\"$CPPFLAGS -D_DLL\"\n        MAGICK_CPPFLAGS=\"$MAGICK_CPPFLAGS -D_DLL\"\n        MAGICK_PCFLAGS=\"$MAGICK_PCFLAGS -D_DLL\"\n        LIBRARY_EXTRA_CPPFLAGS=\"$LIBRARY_EXTRA_CPPFLAGS -D_MAGICKLIB_\"\n        if test \"$build_modules\" = 'yes'; then\n            LIBRARY_EXTRA_CPPFLAGS=\"$LIBRARY_EXTRA_CPPFLAGS -D_MAGICKMOD_\"\n        else\n            MODULE_EXTRA_CPPFLAGS=\"$MODULE_EXTRA_CPPFLAGS -D_MAGICKLIB_\"\n        fi\n    else\n        CPPFLAGS=\"$CPPFLAGS -D_LIB\"\n        MAGICK_CPPFLAGS=\"$MAGICK_CPPFLAGS -D_LIB\"\n        MAGICK_PCFLAGS=\"$MAGICK_PCFLAGS -D_LIB\"\n    fi\n    if test \"$with_threads\" = 'yes'; then\n         CPPFLAGS=\"$CPPFLAGS -D_MT\"\n         MAGICK_CPPFLAGS=\"$MAGICK_CPPFLAGS -D_MT\"\n         MAGICK_PCFLAGS=\"$MAGICK_PCFLAGS -D_MT\"\n    fi\nfi\nAC_SUBST(MODULE_EXTRA_CPPFLAGS)\nAC_SUBST(LIBRARY_EXTRA_CPPFLAGS)\n\n# Check standard headers\nAC_HEADER_STDC\nif ! test x\"$ac_cv_header_stdc\" = x\"yes\"; then\n    AC_MSG_WARN([configure has detected that you do not have the ANSI standard C\n    header files.  Compilation cannot proceed.  Please install the ANSI C\n    headers and rerun this script.]);\nfi\nAC_HEADER_ASSERT\nAC_HEADER_DIRENT\n\n# Check additional headers\nAC_CHECK_HEADERS(arm/limits.h arpa/inet.h complex.h errno.h fcntl.h limits.h linux/unistd.h locale.h machine/param.h mach-o/dyld.h netinet/in.h OS.h process.h sun_prefetch.h stdarg.h sys/ipc.h sys/mman.h sys/resource.h sys/sendfile.h sys/socket.h sys/syslimits.h sys/time.h sys/timeb.h sys/times.h sys/wait.h utime.h wchar.h xlocale.h)\n\n########\n#\n# Checks for typedefs, structures, and compiler characteristics.\n#\n########\n\nAC_HEADER_STDBOOL\nAC_C_VOLATILE\nAC_C_STRINGIZE\nAC_HEADER_STAT\nAC_HEADER_TIME\nAC_STRUCT_TM\nAC_STRUCT_TIMEZONE\nAC_SYS_INTERPRETER\n\n#\n# Checks for language qualifiers and semantics.\n#\nAC_C_CHAR_UNSIGNED\nAC_C_CONST\nAC_C_INLINE\nAC_C_RESTRICT\nAC_C_VOLATILE\n\n# If words are stored with the most significant byte first (like\n# Motorola and SPARC CPUs), define `WORDS_BIGENDIAN'.\nAC_C_BIGENDIAN\n\n# Define to a suitable type, if standard headers do not define it.\nAC_TYPE_INT8_T\nAC_TYPE_INT16_T\nAC_TYPE_INT32_T\nAC_TYPE_INT64_T\nAC_TYPE_INTMAX_T\nAC_TYPE_INTPTR_T\nAC_TYPE_LONG_DOUBLE\nAC_TYPE_LONG_DOUBLE_WIDER\nAC_TYPE_LONG_LONG_INT\nAC_TYPE_MBSTATE_T\nAC_TYPE_MODE_T\nAC_TYPE_OFF_T\nAC_TYPE_PID_T\nAC_TYPE_SIZE_T\nAC_TYPE_SSIZE_T\nAC_TYPE_UID_T\nAC_TYPE_UINT8_T\nAC_TYPE_UINT16_T\nAC_TYPE_UINT32_T\nAC_TYPE_UINT64_T\nAC_TYPE_UINTMAX_T\nAC_TYPE_UINTPTR_T\nAC_TYPE_UNSIGNED_LONG_LONG_INT\n\nAC_CHECK_TYPES([locale_t], [], [], [[#include <xlocale.h>]])\n\n# Float_t and double_t are intended to be the the most efficient type.\nAC_CHECK_TYPES([float_t], [], [], [[#include <math.h>]])\nAC_CHECK_TYPES([double_t], [], [], [[#include <math.h>]])\nAC_CHECK_SIZEOF([float_t], [], [[#include <math.h>]])\nAC_CHECK_SIZEOF([double_t], [], [[#include <math.h>]])\n\n# Get size of float, double and long double for comparaison.\nAC_CHECK_SIZEOF([float])\nAC_CHECK_SIZEOF([double])\nAC_CHECK_SIZEOF([long double])\n\n# Obtain size of an 'signed short' and define as SIZEOF_SIGNED_SHORT\nAC_CHECK_SIZEOF(signed short)\n\n# Obtain size of an 'unsigned short' and define as SIZEOF_UNSIGNED_SHORT\nAC_CHECK_SIZEOF(unsigned short)\n\n# Obtain size of an 'signed int' and define as SIZEOF_SIGNED_INT\nAC_CHECK_SIZEOF(signed int)\n\n# Obtain size of an 'unsigned int' and define as SIZEOF_UNSIGNED_INT\nAC_CHECK_SIZEOF(unsigned int)\n\n# Obtain size of a 'signed long' and define as SIZEOF_SIGNED_LONG\nAC_CHECK_SIZEOF(signed long)\n\n# Obtain size of a 'unsigned long' and define as SIZEOF_UNSIGNED_LONG\nAC_CHECK_SIZEOF(unsigned long)\n\n# Obtain size of a 'long long' and define as SIZEOF_SIGNED_LONG_LONG.  If\n# 'signed long long' is not supported then the value defined is zero.\nAC_CHECK_SIZEOF(signed long long)\n\n# Obtain size of a 'unsigned long long' and define as\n# SIZEOF_UNSIGNED_LONG_LONG.  If 'unsigned long long' is not\n# supported then the value defined is zero.\nAC_CHECK_SIZEOF(unsigned long long)\n\n# Obtain size of off_t and define as SIZEOF_OFF_T\nAC_CHECK_SIZEOF(off_t)\n\n# Obtain size of size_t and define as SIZEOF_SIZE_T\nAC_CHECK_SIZEOF(size_t)\n\n# Obtain size of ssize_t and define as SIZEOF_SSIZE_T\nAC_CHECK_SIZEOF(ssize_t)\n\n# Obtain size of an unsigned int pointer and define as SIZEOF_UNSIGNED_INTP\nAC_CHECK_SIZEOF(unsigned int*)\n\n#\n# Compute sized types for current CPU and compiler options.\n#\n\nAC_MSG_CHECKING(for signed 8-bit type)\nINT8_T='signed char'\nAC_MSG_RESULT($INT8_T)\nAC_SUBST(INT8_T)\n\nAC_MSG_CHECKING(for unsigned 8-bit type)\nUINT8_T='unsigned char'\nAC_MSG_RESULT($UINT8_T)\nAC_SUBST(UINT8_T)\n\nAC_MSG_CHECKING(for signed 16-bit type)\nINT16_T='signed short'\nAC_MSG_RESULT($INT16_T)\nAC_SUBST(INT16_T)\n\nAC_MSG_CHECKING(for unsigned 16-bit type)\nUINT16_T='unsigned short'\nAC_MSG_RESULT($UINT16_T)\nAC_SUBST(UINT16_T)\n\nAC_MSG_CHECKING(for signed 32-bit type)\nINT32_T='none'\nINT32_F='none'\nif test $ac_cv_sizeof_signed_int -eq 4; then\n  INT32_T='signed int'\n  INT32_F='\"\"'\nelif test $ac_cv_sizeof_signed_long -eq 4; then\n  INT32_T='signed long'\n  INT32_F='\"l\"'\nfi\nAC_MSG_RESULT($INT32_T)\nAC_SUBST(INT32_T)\nAC_SUBST(INT32_F)\n\nAC_MSG_CHECKING(for unsigned 32-bit type)\nUINT32_T='none'\nUINT32_F='none'\nif test $ac_cv_sizeof_unsigned_int -eq 4; then\n  UINT32_T='unsigned int'\n  UINT32_F='\"\"'\nelif test $ac_cv_sizeof_unsigned_long -eq 4; then\n  UINT32_T='unsigned long'\n  UINT32_F='\"l\"'\nfi\nAC_MSG_RESULT($UINT32_T)\nAC_SUBST(UINT32_T)\nAC_SUBST(UINT32_F)\n\nAC_MSG_CHECKING(for signed 64-bit type)\nINT64_T='none'\nINT64_F='none'\nif test $ac_cv_sizeof_signed_long -eq 8; then\n  INT64_T='signed long'\n  INT64_F='\"l\"'\nelif test $ac_cv_sizeof_signed_long_long -eq 8; then\n  INT64_T='signed long long'\n  INT64_F='\"ll\"'\nfi\ncase \"${host_os}\" in\n  mingw* )\n    INT64_F='\"I64\"'\n    ;;\nesac\nAC_MSG_RESULT($INT64_T)\nAC_SUBST(INT64_T)\nAC_SUBST(INT64_F)\n\nAC_MSG_CHECKING(for unsigned 64-bit type)\nUINT64_T='none'\nUINT64_F='none'\nif test $ac_cv_sizeof_unsigned_long -eq 8; then\n  UINT64_T='unsigned long'\n  UINT64_F='\"l\"'\nelif test $ac_cv_sizeof_unsigned_long_long -eq 8; then\n  UINT64_T='unsigned long long'\n  UINT64_F='\"ll\"'\nfi\ncase \"${host_os}\" in\n  mingw* )\n    UINT64_F='\"I64\"'\n    ;;\nesac\nAC_MSG_RESULT($UINT64_T)\nAC_SUBST(UINT64_T)\nAC_SUBST(UINT64_F)\n\nAC_MSG_CHECKING(for unsigned maximum type)\nUINTMAX_T='none'\nUINTMAX_F='none'\nif test \"$UINT64_T\" != 'none'; then\n  UINTMAX_T=$UINT64_T\n  UINTMAX_F=$UINT64_F\nelif test \"$UINT32_T\" != 'none'; then\n  UINTMAX_T=$UINT32_T\n  UINTMAX_F=$UINT32_F\nfi\nAC_MSG_RESULT($UINTMAX_T)\nAC_SUBST(UINTMAX_T)\nAC_SUBST(UINTMAX_F)\n\nAC_MSG_CHECKING(for pointer difference type)\nUINTPTR_T='none'\nUINTPTR_F='none'\nif test $ac_cv_sizeof_unsigned_long -eq $ac_cv_sizeof_unsigned_intp; then\n  UINTPTR_T='unsigned long'\n  UINTPTR_F='\"l\"'\nelif test $ac_cv_sizeof_unsigned_long_long -eq $ac_cv_sizeof_unsigned_intp; then\n  UINTPTR_T='unsigned long long'\n  UINTPTR_F='\"ll\"'\nfi\nAC_MSG_RESULT($UINTPTR_T)\nAC_SUBST(UINTPTR_T)\nAC_SUBST(UINTPTR_F)\n\nAC_MSG_CHECKING([whether our compiler supports __func__])\nAC_TRY_COMPILE([],\n [{ const char *func = __func__; return(func != 0 ? 0 : 1); }],\n AC_MSG_RESULT([yes]),\n AC_MSG_RESULT([no])\n AC_MSG_CHECKING([whether our compiler supports __FUNCTION__])\n AC_TRY_COMPILE([],\n   [{ const char *func = __FUNCTION__; return(func != 0 ? 0 : 1); }],\n   AC_MSG_RESULT([yes])\n   AC_DEFINE(__func__, __FUNCTION__,\n     [Define to appropriate substitue if compiler does not have __func__]),\n   AC_MSG_RESULT([no])\n   AC_DEFINE(__func__, __FILE__,\n     [Define to appropriate substitue if compiler does not have __func__])))\n\n########\n#\n# Check for functions\n#\n########\nAC_FUNC_CLOSEDIR_VOID\nAC_FUNC_MMAP\nAC_FUNC_FORK\nAC_FUNC_MEMCMP\nAC_FUNC_SELECT_ARGTYPES\nAC_FUNC_SETVBUF_REVERSED\nAC_TYPE_SIGNAL\nAC_FUNC_STRTOD\nAC_FUNC_STRERROR_R\nAC_FUNC_VPRINTF\n\n#\n# Find math library\n#\nMATH_LIBS=''\nAC_CHECK_LIB(m,sqrt,MATH_LIBS=\"-lm\",,)\nLIBS=\"$MATH_LIBS $LIBS\"\nAC_SUBST(MATH_LIBS)\n\n#\n# Find socket library\n#\nAC_SEARCH_LIBS(gethostbyname, resolv nsl)\nAC_SEARCH_LIBS(socket, socket,\n[\n  AC_DEFINE([HAVE_SOCKET],[1],[Define to 1 if you have socket support.])\n  MAGICK_FEATURES=\"DPC $MAGICK_FEATURES\"\n])\n\nAC_CHECK_FUNCS([acosh _aligned_malloc asinh atanh atoll atexit cabs carg cimag creal clock ctime_r directio erf _exit execvp fchmod floor fork ftime ftruncate getc_unlocked getcwd getpid getexecname getdtablesize getpagesize getrlimit getrusage gettimeofday gmtime_r isnan j0 j1 lltostr localtime_r lstat memmove memset mkstemp munmap nanosleep newlocale _NSGetExecutablePath pclose _pclose poll popen _popen posix_fadvise posix_fallocate posix_madvise posix_memalign posix_spawnp pow pread pwrite qsort_r raise rand_r readlink readdir_r realpath select seekdir sendfile setlocale socket sqrt setvbuf stat strchr strrchr strcspn strdup strpbrk strspn strstr strtod strtod_l strtol strtoul symlink sysconf sigemptyset sigaction spawnvp strerror strlcat strlcpy strcasecmp strncasecmp telldir tempnam times ulltostr uselocale usleep utime vfprintf vfprintf_l vsprintf vsnprintf vsnprintf_l waitpid _wfopen _wstat])\n\n#\n# Check for clock_gettime().\n#\nAC_SEARCH_LIBS(clock_gettime, rt,\n[\n  AC_DEFINE([HAVE_CLOCK_GETTIME],[1],[Define to 1 if you have clock_gettime.])\n  AC_MSG_CHECKING([whether clock_gettime supports CLOCK_REALTIME])\n  AC_COMPILE_IFELSE([\n    AC_LANG_PROGRAM(\n      [[#include <time.h>]],\n       [[clockid_t clockType = CLOCK_REALTIME;]])],\n      [\n        AC_MSG_RESULT(yes)\n        AC_DEFINE([HAVE_CLOCK_REALTIME],[1],\n          [Define to 1 if clock_gettime supports CLOCK_REALTIME.])\n      ],\n      AC_MSG_RESULT(no)\n    )\n  ],\n  [\n    AC_CHECK_FUNCS([gettimeofday ftime], [break])\n  ]\n)\n\n########\n#\n# Check for function prototypes\n#\n########\n\nAC_CHECK_DECLS([pread, pwrite],[],[],[\n#include <unistd.h>])\n\nAC_CHECK_DECLS([strlcpy],[],[],[\n#include <strings.h>])\n\nAC_CHECK_DECLS([vsnprintf],[],[],[\n#include <stdio.h>\n#include <stdarg.h>])\n\n########\n#\n# C++ Support Tests (For Magick++)\n#\n########\nhave_magick_plus_plus='no'\nif test \"$with_magick_plus_plus\" = 'yes'; then\n    OLIBS=\"$LIBS\"\n    LIBS=''\n    AC_LANG_PUSH(C++)\n\n    # Full set of headers used...\n    # algorithm cctype cerrno cmath cstdio cstdlib cstring ctime exception\n    # functional iomanip iosfwd iostream iterator list string strstream utility\n    AC_LANG([C++])\n    AC_PROG_CXX\n    AX_CXX_BOOL\n    AX_CXX_NAMESPACES\n    AX_CXX_NAMESPACE_STD\n    AC_CXX_HAVE_STD_LIBS\n    AC_OPENMP([C++])\n    AC_LANG_POP\n\n    AC_MSG_CHECKING([whether C++ compiler is sufficient for Magick++])\n    if \\\n        test $ax_cv_cxx_bool = 'yes' && \\\n        test $ax_cv_cxx_namespaces = 'yes' && \\\n        test $ac_cv_cxx_have_std_libs = 'yes' && \\\n        test $ax_cv_cxx_have_std_namespace = 'yes'; then\n        have_magick_plus_plus='yes'\n    else\n        have_magick_plus_plus='no (failed tests)'\n    fi\n    AC_MSG_RESULT([$have_magick_plus_plus])\n    LIBS=\"$OLIBS\"\nfi\nAM_CONDITIONAL(WITH_MAGICK_PLUS_PLUS, test \"$have_magick_plus_plus\" = 'yes')\n\n# Only check for delegate libraries in subdirectories if requested.\nif test \"$enable_delegate_build\" != 'no'; then\n    # Check for delegate sub-directories and add -I & -L options as required.\n    # This presumes that delegates are installed as detailed in the ImageMagick\n    # README. If delegates are installed in a standard location where the\n    # compiler will automatically find them then these options should not be\n    # required.\n\n    #\n    # Most delegates have includes in the same directory as the library, but not all...\n    #\n    # Includes\n    for dir in bzlib fftw fpx gslib/src jp2 jbig/libjbig jpeg lcms/include lzma magick openjp2/include png tiff/libtiff ttf/include wand webp/src wmf/include xml/include zlib; do\n        if test -d \"$builddir/$dir\"; then\n            CPPFLAGS=\"$CPPFLAGS -I$builddir/$dir\"\n        else\n            if test -d \"$srcdirfull/$dir\"; then\n                CPPFLAGS=\"$CPPFLAGS -I$srcdirfull/$dir\"\n            fi\n        fi\n    done\n\n    # Libraries\n    for dir in bzlib fftw fpx gslib/src jbig/libjbig jpeg lcms/src lzma magick openjp2 png tiff/libtiff ttf/objs wand webp wmf/src xml zlib; do\n    if test -d \"$builddir/$dir/.libs\"; then\n        LDFLAGS=\"$LDFLAGS -L$builddir/$dir/.libs\"\n    else\n        if test -d \"$srcdirfull/$dir/.libs\"; then\n            LDFLAGS=\"$LDFLAGS -L$srcdirfull/$dir/.libs\"\n        fi\n    fi\n    if test -d \"$builddir/$dir\"; then\n        LDFLAGS=\"$LDFLAGS -L$builddir/$dir\"\n    else\n        if test -d \"$srcdirfull/$dir\"; then\n            LDFLAGS=\"$LDFLAGS -L$srcdirfull/$dir\"\n        fi\n    fi\n  done\nfi\n\n# Assume that delegate headers reside under same directory as ImageMagick\n# installation prefix.\nMAGICK_CPPFLAGS=\"-I$INCLUDE_DIR/${PACKAGE_NAME}-$MAGICK_MAJOR_VERSION $MAGICK_CPPFLAGS\"\n\n#\n# Find the X11 RGB database\n#\nAC_CACHE_CHECK(for X11 configure files,im_cv_x_configure,\n[# Look for the header file in a standard set of common directories.\n# Check X11 before X11Rn because it is often a symlink to the current release.\n    for ac_dir in          \\\n    /lib/usr/lib/X11       \\\n    /usr/X11/lib           \\\n    /usr/X11R4/lib         \\\n    /usr/X11R5/lib         \\\n    /usr/X11R6/lib         \\\n    /usr/X11R7/lib         \\\n    /usr/X386/lib          \\\n    /usr/XFree86/lib/X11   \\\n    /usr/athena/lib        \\\n    /usr/lib               \\\n    /usr/lib/X11           \\\n    /usr/lib/X11R4         \\\n    /usr/lib/X11R5         \\\n    /usr/lib/X11R6         \\\n    /usr/lib/X11R7         \\\n    /usr/local/X11/lib     \\\n    /usr/local/X11R4/lib   \\\n    /usr/local/X11R5/lib   \\\n    /usr/local/X11R6/lib   \\\n    /usr/local/lib         \\\n    /usr/local/lib/X11     \\\n    /usr/local/lib/X11R4   \\\n    /usr/local/lib/X11R5   \\\n    /usr/local/lib/X11R6   \\\n    /usr/local/lib/X11R7   \\\n    /usr/local/x11r5/lib   \\\n    /usr/lpp/Xamples/lib   \\\n    /usr/openwin/lib       \\\n    /usr/openwin/share/lib \\\n    /usr/unsupported/lib   \\\n    /usr/x386/lib          \\\n    ; do\n    if test -f \"$ac_dir/X11/rgb.txt\"; then\n      im_cv_x_configure=\"$ac_dir/X11/\"\n      break\n    elif test -f \"$ac_dir/rgb.txt\"; then\n      im_cv_x_configure=\"$ac_dir/\"\n      break\n    fi\n\n  done])\nX11_CONFIGURE_PATH=\"$im_cv_x_configure\"\ncase \"${build_os}\" in\n  mingw* )\n    X11ConfigurePath=`$WinPathScript \"$X11ConfigurePath=\" 1`\n  ;;\nesac\nAC_DEFINE_UNQUOTED(X11_CONFIGURE_PATH,\"$X11ConfigurePath\",[Location of X11 configure files])\n\n#\n# Find OpenMP library\n#\nGOMP_LIBS=''\nif test \"$enable_openmp\" != 'no'; then\n  if test \"${GCC}\" = \"yes\"; then\n    # Open64 (passes for GCC but uses different OpenMP implementation)\n    if test \"x$GOMP_LIBS\" = x ; then\n      if $CC --version 2>&1 | grep Open64 > /dev/null ; then\n        AC_CHECK_LIB(openmp,omp_get_num_procs,GOMP_LIBS=\"-lopenmp\",,)\n      fi\n    fi\n    # GCC\n    if test \"x$GOMP_LIBS\" = x ; then\n      AC_CHECK_LIB(gomp,GOMP_parallel_start,GOMP_LIBS=\"-lgomp\",,)\n    fi\n  else\n    # Sun CC\n    if test \"x$GOMP_LIBS\" = x ; then\n      AC_CHECK_LIB(mtsk,sunw_mp_register_warn,GOMP_LIBS=\"-lmtsk\",,)\n    fi\n    # AIX xlc\n    if test \"x$GOMP_LIBS\" = x ; then\n    AC_CHECK_LIB(xlsmp,_xlsmpFlush,GOMP_LIBS=\"-lxlsmp\",,)\n    fi\n    # SGI IRIX 6.5 MIPSpro C/C++\n    if test \"x$GOMP_LIBS\" = x ; then\n    AC_CHECK_LIB(mp,mp_destroy,GOMP_LIBS=\"-lmp\",,)\n    fi\n  fi\n  LIBS=\"$GOMP_LIBS $LIBS\"\nfi\nAC_SUBST(GOMP_LIBS)\n\n#\n# Check for jemalloc.\n#\nhave_jemalloc='no'\nJEMALLOC_LIBS=''\nif test \"$with_jemalloc\" != 'no'; then\n  AC_MSG_CHECKING(for JEMALLOC support )\n  AC_MSG_RESULT()\n  failed=0\n  passed=0\n  AC_CHECK_HEADER([jemalloc/jemalloc.h],[passed=`expr $passed + 1`],[failed=`expr $failed + 1`])\n  AC_CHECK_LIB(jemalloc,[malloc_stats_print],[passed=`expr $passed + 1`],[failed=`expr $failed + 1`],)\n  AC_MSG_CHECKING(if jemalloc memory allocation library is complete)\n  if test $passed -gt 0; then\n    if test $failed -gt 0; then\n      AC_MSG_RESULT(no -- some components failed test)\n      have_jemalloc='no (failed tests)'\n    else\n      JEMALLOC_LIBS='-ljemalloc'\n      LIBS=\"$JEMALLOC_LIBS $LIBS\"\n      AC_DEFINE(HasJEMALLOC,1,Define if you have jemalloc memory allocation library)\n      AC_MSG_RESULT(yes)\n      have_jemalloc='yes'\n    fi\n  else\n    AC_MSG_RESULT(no)\n  fi\nfi\nAM_CONDITIONAL(HasJEMALLOC, test \"$have_jemalloc\" = 'yes')\nAC_SUBST(JEMALLOC_LIBS)\n\n#\n# Check for umem.\n#\nhave_umem='no'\nUMEM_LIBS=''\nif test \"$with_umem\" != 'no'; then\n  AC_MSG_CHECKING(for UMEM support )\n  AC_MSG_RESULT()\n  failed=0\n  passed=0\n  AC_CHECK_HEADER(umem.h,passed=`expr $passed + 1`,failed=`expr $failed + 1`)\n  AC_CHECK_LIB(umem,umem_alloc,passed=`expr $passed + 1`,failed=`expr $failed + 1`,)\n  AC_CHECK_LIB(umem,umem_free,passed=`expr $passed + 1`,failed=`expr $failed + 1`,)\n  AC_MSG_CHECKING(if umem memory allocation library is complete)\n  if test $passed -gt 0; then\n    if test $failed -gt 0; then\n      AC_MSG_RESULT(no -- some components failed test)\n      have_umem='no (failed tests)'\n    else\n      UMEM_LIBS='-lumem'\n      LIBS=\"$UMEM_LIBS $LIBS\"\n      AC_DEFINE(HasUMEM,1,Define if you have umem memory allocation library)\n      AC_MSG_RESULT(yes)\n      have_umem='yes'\n    fi\n  else\n    AC_MSG_RESULT(no)\n  fi\nfi\nAM_CONDITIONAL(HasUMEM, test \"$have_umem\" = 'yes')\nAC_SUBST(UMEM_LIBS)\n\n#\n# Add support for ccmalloc memory debugging library if requested\n#\nhave_ccmalloc='no'\nCCMALLOC_LIBS=''\nif test \"$enable_ccmalloc\" = 'yes'; then\n    AC_PATH_PROG(CCMALLOCDelegate,ccmalloc,)\n    if test -n \"$CCMALLOCDelegate\"; then\n        eval `grep PREFIX= $CCMALLOCDelegate | sed -e 's/PREFIX/CCMALLOC_PREFIX/'`\n        OLIBS=\"$LIBS\"\n        # Assume that gcc is used with ccmalloc.\n        LIBS=\"$LIBS $CCMALLOC_PREFIX/lib/ccmalloc-gcc.o\"\n       AC_CHECK_LIB(ccmalloc,ccmalloc_malloc,CCMALLOC_LIBS=\"$CCMALLOC_PREFIX/lib/ccmalloc-gcc.o -lccmalloc -ldl\",,-ldl)\n        if test -n \"$CCMALLOC_LIBS\"; then\n            LIBS=\"$OLIBS\"\n            LIBS=\"$LIBS $CCMALLOC_LIBS\"\n            have_ccmalloc='yes'\n        else\n            LIBS=\"$OLIBS\"\n        fi\n    fi\nfi\n\n#\n# Add support for 'huge pages' if requested\n#\nAS_IF([test \"x$enable_hugepages\" != \"xno\"],[\n  AC_DEFINE(HAVE_HUGEPAGES, 1, [Compile with hugepage support])\n])\n\n#\n# Add support for efence memory debugging library if requested\n#\nif test \"$enable_efence\" = 'yes'; then\n    EFENCE_LIBS='-lefence'\n    LIBS=\"$EFENCE_LIBS $LIBS\"\nfi\n\ndnl ===========================================================================\n\n#\n# Check for BZLIB\n#\n\nAC_ARG_WITH([bzlib],\n    [AC_HELP_STRING([--without-bzlib],\n                    [disable BZLIB support])],\n    [with_bzlib=$withval],\n    [with_bzlib='yes'])\n\nif test \"$with_bzlib\" != 'yes'; then\n    DISTCHECK_CONFIG_FLAGS=\"${DISTCHECK_CONFIG_FLAGS} --with-bzlib=$with_bzlib \"\nfi\n\nhave_bzlib='no'\nif test \"$with_bzlib\" != 'no'; then\n    BZLIB_LIBS=''\n    AC_MSG_RESULT([-------------------------------------------------------------])\n    AC_MSG_CHECKING([for BZLIB])\n    AC_MSG_RESULT([])\n    failed=0\n    passed=0\n    found_libbz=0\n    AC_CHECK_HEADER(bzlib.h,passed=`expr $passed + 1`,failed=`expr $failed + 1`)\n    AC_CHECK_LIB(bz2,BZ2_bzDecompress,found_libbz=`expr $found_libbz + 1`,,)\n    if test \"$native_win32_build\" = 'yes'; then\n      AC_CHECK_LIB(bz2,_imp__BZ2_decompress,found_libbz=`expr $found_libbz + 1`,,)\n    fi\n    if test $found_libbz -gt 0; then\n      passed=`expr $passed + 1`\n    else\n      failed=`expr $failed + 1`\n    fi\n    AC_MSG_CHECKING(if BZLIB package is complete)\n    if test $passed -gt 0; then\n      if test $failed -gt 0; then\n        AC_MSG_RESULT(no -- some components failed test)\n        have_bzlib='no (failed tests)'\n      else\n        BZLIB_LIBS='-lbz2'\n        LIBS=\"$BZLIB_LIBS $LIBS\"\n        AC_DEFINE(BZLIB_DELEGATE,1,Define if you have the bzip2 library)\n        AC_MSG_RESULT(yes)\n        have_bzlib='yes'\n      fi\n    else\n      AC_MSG_RESULT(no)\n    fi\nfi\nAM_CONDITIONAL(BZLIB_DELEGATE, test \"$have_bzlib\" = 'yes')\nAC_SUBST(BZLIB_LIBS)\n\n#\n# Find the X11 include and library directories.\n#\nIPC_LIBS=''\nX11_LIBS=''\nXEXT_LIBS=''\nXT_LIBS=''\nAC_PATH_XTRA\nif test \"$no_x\" != 'yes'; then\n    AC_MSG_RESULT([-------------------------------------------------------------])\n    AC_MSG_CHECKING([for X11])\n    AC_MSG_RESULT([])\n    LDFLAGS=\"$LDFLAGS $X_LIBS\"\n    X11_LIBS=\"$X_PRE_LIBS -lX11 $X_EXTRA_LIBS\"\n    LIBS=\"$X11_LIBS $LIBS\"\n    CPPFLAGS=\"$CPPFLAGS $X_CFLAGS\"\n\n    AC_DEFINE(X11_DELEGATE,1,Define if you have X11 library)dnl\n\n    #\n    # Check for X11 shared memory extension\n    #\n    # shmctl is required to support the shared memory extension\n    AC_CHECK_FUNC([shmctl],[have_shmctl='yes'],[])\n    if test \"$have_shmctl\" != 'yes'; then\n        PERSIST_LIBS=$LIBS\n        LIBS=\"$LIBS -lcygipc\"\n        AC_TRY_LINK_FUNC([shmctl],[have_shmctl='yes'; IPC_LIBS='-lcygipc'],[])\n        LIBS=$PERSIST_LIBS\n    fi\n\n    if test \"$have_shmctl\" = 'yes'; then\n        AC_CHECK_LIB([Xext],[XShmAttach],[XEXT_LIBS='-lXext' ; AC_DEFINE(HAVE_SHARED_MEMORY,1,X11 server supports shared memory extension)],[],[])\n    fi\n\n    #\n    # Check for X11 shape extension\n    #\n    AC_CHECK_LIB([Xext],[XShapeCombineMask],[XEXT_LIBS='-lXext' ; AC_DEFINE(HAVE_SHAPE,1,X11 server supports shape extension)],[],[])\n    AC_CHECK_LIB(Xt,XtSetEventDispatcher,XT_LIBS='-lXt',,)\n    LIBS=\"$XEXT_LIBS $XT_LIBS $LIBS\"\nfi\nif test \"$no_x\" != 'yes'; then\n  have_x='yes'\nelse\n  have_x='no'\nfi\nAM_CONDITIONAL(X11_DELEGATE, test \"$have_x\" = 'yes')\nAC_SUBST(X11_LIBS)\nAC_SUBST(XEXT_LIBS)\n\ndnl ===========================================================================\n\n#\n# Check for ZLIB\n#\nAC_ARG_WITH([zlib],\n    [AC_HELP_STRING([--without-zlib],\n                    [disable ZLIB support])],\n    [with_zlib=$withval],\n    [with_zlib='yes'])\n\nif test \"$with_zlib\" != 'yes'; then\n    DISTCHECK_CONFIG_FLAGS=\"${DISTCHECK_CONFIG_FLAGS} --with-zlib=$with_zlib \"\nfi\n\nhave_zlib='no'\nZLIB_CFLAGS=\"\"\nZLIB_LIBS=\"\"\nZLIB_PKG=\"\"\nif test \"x$with_zlib\" = \"xyes\"; then\n  AC_MSG_RESULT([-------------------------------------------------------------])\n  PKG_CHECK_MODULES(ZLIB,[zlib >= 1.0.0], have_zlib=yes, have_zlib=no)\n  AC_MSG_RESULT([])\nfi\n\nif test \"$have_zlib\" = 'yes'; then\n  AC_DEFINE(ZLIB_DELEGATE,1,Define if you have ZLIB library)\n  CFLAGS=\"$ZLIB_CFLAGS $CFLAGS\"\nfi\n\nAM_CONDITIONAL(ZLIB_DELEGATE, test \"$have_zlib\" = 'yes')\nAC_SUBST(ZLIB_CFLAGS)\nAC_SUBST(ZLIB_LIBS)\n\ndnl ===========================================================================\n\n# whether modules are built or not.\nwith_ltdl='yes'\nhave_ltdl='no'\nLTDL_LIBS=''\nif test \"$build_modules\" != 'no' ; then\n  AC_MSG_RESULT([-------------------------------------------------------------])\n  AC_MSG_CHECKING([for libltdl])\n  AC_MSG_RESULT([])\n  failed=0\n  passed=0\n  AC_CHECK_HEADER([ltdl.h],[passed=`expr $passed + 1`],[failed=`expr $failed + 1`])\n  AC_CHECK_LIB([ltdl],[lt_dlinit],[passed=`expr $passed + 1`],[failed=`expr $failed + 1`],)\n  AC_MSG_CHECKING([if libltdl package is complete])\n  if test $passed -gt 0 ; then\n    if test $failed -gt 0 ; then\n      AC_MSG_RESULT([no -- some components failed test])\n      have_ltdl='no (failed tests)'\n    else\n      LTDL_LIBS='-lltdl'\n      LIBS=\"$LTDL_LIBS $LIBS\"\n      AC_DEFINE(LTDL_DELEGATE,1,[Define if using libltdl to support dynamically loadable modules])\n      AC_MSG_RESULT([yes])\n      have_ltdl='yes'\n    fi\n  else\n    AC_MSG_RESULT([no])\n  fi\n  if test \"$have_ltdl\" != 'yes' ; then\n    AC_MSG_FAILURE([libltdl is required for modules build],[1])\n  fi\nfi\nAM_CONDITIONAL(WITH_LTDL, test \"$have_ltdl\" != 'no')\n\n#\n# If profiling, then check for -ldl and dlopen (required for Solaris & gcc)\n#\nLIB_DL=''\nif test \"$enable_profiling\" = 'yes'; then\n    AC_CHECK_LIB(dl,dlopen,LIB_DL='-ldl',,)\n    LIBS=\"$LIB_DL $LIBS\"\nfi\nAC_SUBST(LIB_DL)\n\ndnl ===========================================================================\n\n#\n# Set Apple font directory.\n#\nAC_ARG_WITH([apple-font-dir],\n    [AC_HELP_STRING([--with-apple-font-dir=DIR],\n                    [Apple font directory])],\n    [with_apple_font_dir=$withval],\n    [with_apple_font_dir='default'])\n\nif test \"$with_apple_font_dir\" != 'default'; then\n    DISTCHECK_CONFIG_FLAGS=\"${DISTCHECK_CONFIG_FLAGS} --with-apple-font-dir=$with_apple_font_dir \"\nfi\n\ndnl ===========================================================================\n\n#\n# Check for Autotrace delegate library.\n#\nAC_ARG_WITH([autotrace],\n    [AC_HELP_STRING([--with-autotrace],\n                    [enable autotrace support])],\n        [with_autotrace=$withval],\n        [with_autotrace='no'])\n\nif test \"$with_autotrace\" != 'yes'; then\n    DISTCHECK_CONFIG_FLAGS=\"${DISTCHECK_CONFIG_FLAGS} --with-autotrace=$with_autotrace \"\nfi\n\nhave_autotrace='no'\nAUTOTRACE_CFLAGS=\"\"\nAUTOTRACE_LIBS=\"\"\nAUTOTRACE_PKG=\"\"\nif test \"x$with_autotrace\" = \"xyes\"; then\n  AC_MSG_RESULT([-------------------------------------------------------------])\n  PKG_CHECK_MODULES(AUTOTRACE,[autotrace >= 0.31.1], have_autotrace=yes, have_autotrace=no)\n  AC_MSG_RESULT([])\nfi\n\nif test \"$have_autotrace\" = 'yes'; then\n  AC_DEFINE(AUTOTRACE_DELEGATE,1,Define if you have AUTOTRACE library)\n  CFLAGS=\"$AUTOTRACE_CFLAGS $CFLAGS\"\nfi\n\nAM_CONDITIONAL(AUTOTRACE_DELEGATE,test \"$have_autotrace\" = 'yes')\nAC_SUBST(AUTOTRACE_CFLAGS)\nAC_SUBST(AUTOTRACE_LIBS)\n\ndnl ===========================================================================\n\n#\n# Check for Display Postscript delegate library.\n#\nAC_ARG_WITH([dps],\n    [AC_HELP_STRING([--without-dps],\n                    [disable Display Postscript support])],\n    [with_dps=$withval],\n    [with_dps='yes'])\n\nif test \"$with_dps\" != 'yes'; then\n    DISTCHECK_CONFIG_FLAGS=\"${DISTCHECK_CONFIG_FLAGS} --with-dps=$with_dps \"\nfi\n\nhave_dps='no'\nDPS_LIBS=''\nif test \"$with_dps\" != 'no' && test \"$with_x\" != 'no'; then\n    AC_MSG_RESULT([-------------------------------------------------------------])\n    AC_MSG_CHECKING([for DPS])\n    AC_MSG_RESULT([])\n    failed=0\n    passed=0\n    PERSIST_CPPFLAGS=\"$CPPFLAGS\"\n    CPPFLAGS=\"$CPPFLAGS -I${ac_x_includes}/X11\"\n    AC_CHECK_HEADER(DPS/dpsXclient.h,passed=`expr $passed + 1`,failed=`expr $failed + 1`)\n    # DPS issues:\n    # XFree86-4.x needs -lXt to provide XtMalloc for -ldps.\n    # Cygwin doesn't deliver -lXt as a DLL, which prevents a DLL build.\n    # Adobe DPS (as delivered on Solaris) doesn't require -lXt.\n    # ImageMagick itself doesn't use -lXt.\n    have_libdps='no'\n    LIBDPS_XT=''\n    AC_CHECK_LIB(dps,DPSInitialize,have_libdps='yes',have_libdps='no',)\n    if test \"$have_libdps\" != 'yes'; then\n        # Unset cache variable so we can try again.\n        unset ac_cv_lib_dps_DPSInitialize\n        AC_CHECK_LIB(dps,DPSInitialize,have_libdps='yes',have_libdps='no',-lXt)\n        if test \"$have_libdps\" = 'yes'; then\n            LIBDPS_XT='-lXt'\n        fi\n    fi\n    if test \"$have_libdps\" = 'yes'; then\n        passed=`expr $passed + 1`\n    else\n        failed=`expr $failed + 1`\n    fi\n    AC_CHECK_LIB(dpstk,XDPSPixelsPerPoint,passed=`expr $passed + 1`,failed=`expr $failed + 1`,-ldps $LIBDPS_XT)\n    AC_MSG_CHECKING([if DPS package is complete])\n    if test $passed -gt 0; then\n        if test $failed -gt 0; then\n            AC_MSG_RESULT([no -- some components failed test])\n            have_dps='no (failed tests)'\n            CPPFLAGS=\"$PERSIST_CPPFLAGS\"\n        else\n            DPS_LIBS=\"-ldpstk -ldps ${LIBDPS_XT}\"\n            LIBS=\"$DPS_LIBS $LIBS\"\n            AC_DEFINE(DPS_DELEGATE,1,Define if you have Display Postscript)\n            AC_MSG_RESULT([yes])\n            have_dps='yes'\n        fi\n    else\n        AC_MSG_RESULT([no])\n        CPPFLAGS=$PERSIST_CPPFLAGS\n    fi\nfi\nAM_CONDITIONAL(DPS_DELEGATE, test \"$have_dps\" = 'yes')\nAC_SUBST(DPS_LIBS)\n\ndnl ===========================================================================\n\n#\n# Set DejaVu font directory.\n#\nAC_ARG_WITH([dejavu-font-dir],\n    [AC_HELP_STRING([--with-dejavu-font-dir=DIR],\n                    [DejaVu font directory])],\n    [with_dejavu_font_dir=$withval],\n    [with_dejavu_font_dir='default'])\n\nif test \"$with_dejavu_font_dir\" != 'default'; then\n    DISTCHECK_CONFIG_FLAGS=\"${DISTCHECK_CONFIG_FLAGS} --with-dejavu-font-dir=$with_dejavu_font_dir \"\nfi\n\ndnl ===========================================================================\n\n#\n# Check for FFTW delegate library.\n#\nAC_ARG_WITH([fftw],\n    [AC_HELP_STRING([--without-fftw],\n                    [disable FFTW support])],\n    [with_fftw=$withval],\n    [with_fftw='yes'])\n\nif test \"$with_fftw\" != 'yes'; then\n    DISTCHECK_CONFIG_FLAGS=\"${DISTCHECK_CONFIG_FLAGS} --with-fftw=$with_fftw \"\nfi\n\nhave_fftw='no'\nFFTW_CFLAGS=\"\"\nFFTW_LIBS=\"\"\nFFTW_PKG=\"\"\nif test \"x$with_fftw\" = \"xyes\"; then\n  AC_MSG_RESULT([-------------------------------------------------------------])\n  PKG_CHECK_MODULES(fftw3,[fftw3 >= 3.0.0], have_fftw=yes, have_fftw=no)\n  AC_MSG_RESULT([])\nfi\n\nif test \"$have_fftw\" = 'yes'; then\n  AC_DEFINE(FFTW_DELEGATE,1,Define if you have FFTW library)\n  FFTW_CFLAGS=\"$fftw3_CFLAGS\"\n  FFTW_LIBS=\"$fftw3_LIBS\"\n  CFLAGS=\"$fftw3_CFLAGS $CFLAGS\"\nfi\n\nAM_CONDITIONAL(FFTW_DELEGATE, test \"$have_fftw\" = 'yes')\nAC_SUBST(FFTW_CFLAGS)\nAC_SUBST(FFTW_LIBS)\n\ndnl ===========================================================================\n\n#\n# Check for FLIF delegate library.\n#\nAC_ARG_WITH(flif,\n    [AC_HELP_STRING([--without-flif],\n                    [disable FLIF support])],\n    [with_flif=$withval],\n    [with_flif='yes'])\n\nif test \"$with_flif\" != 'yes'; then\n    DISTCHECK_CONFIG_FLAGS=\"${DISTCHECK_CONFIG_FLAGS} --with-flif=$with_flif \"\nfi\n\nhave_flif='no'\nFLIF_LIBS=''\nif test \"$with_flif\" != 'no'; then\n    AC_MSG_RESULT([-------------------------------------------------------------])\n    AC_MSG_CHECKING([for FLIF])\n    AC_MSG_RESULT([])\n    failed=0\n    passed=0\n    AC_CHECK_HEADER(flif.h,passed=`expr $passed + 1`,failed=`expr $failed + 1`,)\n    AC_CHECK_LIB(flif,flif_create_decoder,passed=`expr $passed + 1`,failed=`expr $failed + 1`,)\n    AC_MSG_CHECKING([if FLIF package is complete])\n    if test $passed -gt 0; then\n        if test $failed -gt 0; then\n            AC_MSG_RESULT([no -- some components failed test])\n            have_flif='no (failed tests)'\n        else\n            FLIF_LIBS='-lflif'\n            LIBS=\"$FLIF_LIBS $LIBS\"\n            AC_DEFINE(FLIF_DELEGATE,1,Define if you have FLIF library)\n            AC_MSG_RESULT([yes])\n            have_flif='yes'\n        fi\n    else\n        AC_MSG_RESULT([no])\n    fi\nfi\nAM_CONDITIONAL(FLIF_DELEGATE,test \"$have_flif\" = 'yes')\nAC_SUBST(FLIF_LIBS)\n\ndnl ===========================================================================\n\n#\n# Check for FlashPIX delegate library.\n#\nAC_ARG_WITH([fpx],\n    [AC_HELP_STRING([--without-fpx],\n                    [disable FlashPIX support])],\n    [with_fpx=$withval],\n    [with_fpx='yes'])\n\nif test \"$with_fpx\" != 'yes'; then\n    DISTCHECK_CONFIG_FLAGS=\"${DISTCHECK_CONFIG_FLAGS} --with-fpx=$with_fpx \"\nfi\n\nhave_fpx='no'\nFPX_LIBS=''\nif test \"$with_fpx\" != 'no'; then\n    AC_MSG_RESULT([-------------------------------------------------------------])\n    AC_MSG_CHECKING([for FlashPIX])\n    AC_MSG_RESULT([])\n    failed=0\n    passed=0\n    AC_LANG_PUSH(C++)\n    AC_CHECK_HEADER(fpxlib.h,passed=`expr $passed + 1`,failed=`expr $failed + 1`)\n    AC_CHECK_LIB(fpx,FPX_OpenImageByFilename,passed=`expr $passed + 1`,failed=`expr $failed + 1`,)\n    AC_LANG_POP\n    AC_MSG_CHECKING([if FlashPIX package is complete])\n    if test $passed -gt 0; then\n        if test $failed -gt 0; then\n            AC_MSG_RESULT([no -- some components failed test])\n            have_fpx='no (failed tests)'\n        else\n            FPX_LIBS='-lfpx'\n            AC_DEFINE(FPX_DELEGATE,1,Define if you have FlashPIX library)\n            AC_MSG_RESULT([yes])\n            have_fpx='yes'\n            PERLMAINCC=\"$CXX\"\n        fi\n    else\n        AC_MSG_RESULT([no])\n    fi\nfi\nAM_CONDITIONAL(FPX_DELEGATE, test \"$have_fpx\" = 'yes')\nAC_SUBST(FPX_LIBS)\n\ndnl ===========================================================================\n\n#\n# Check for DJVU delegate library.\n#\nAC_ARG_WITH([djvu],\n    [AC_HELP_STRING([--without-djvu],\n                    [disable DjVu support])],\n    [with_djvu=$withval],\n    [with_djvu='yes'])\n\nif test \"$with_djvu\" != 'yes'; then\n    DISTCHECK_CONFIG_FLAGS=\"${DISTCHECK_CONFIG_FLAGS} --with-djvu=$with_djvu \"\nfi\n\nhave_djvu='no'\nDJVU_CFLAGS=\"\"\nDJVU_LIBS=\"\"\nDJVU_PKG=\"\"\nif test \"x$with_djvu\" = \"xyes\"; then\n  AC_MSG_RESULT([-------------------------------------------------------------])\n  PKG_CHECK_MODULES(ddjvuapi,[ddjvuapi >= 3.5.0], have_djvu=yes, have_djvu=no)\n  AC_MSG_RESULT([])\nfi\n\nif test \"$have_djvu\" = 'yes'; then\n  AC_DEFINE(DJVU_DELEGATE,1,Define if you have DJVU library)\n  DJVU_CFLAGS=\"$ddjvuapi_CFLAGS\"\n  DJVU_LIBS=\"$ddjvuapi_LIBS\"\n  CFLAGS=\"$ddjvuapi_CFLAGS $CFLAGS\"\nfi\n\nAM_CONDITIONAL(DJVU_DELEGATE, test \"$have_djvu\" = 'yes')\nAC_SUBST(DJVU_CFLAGS)\nAC_SUBST(DJVU_LIBS)\n\ndnl ===========================================================================\n\n#\n# Check for fontconfig delegate library.\n#\nAC_ARG_WITH([fontconfig],\n    [AC_HELP_STRING([--without-fontconfig],\n                    [disable fontconfig support])],\n        [with_fontconfig=$withval],\n        [with_fontconfig='yes'])\n\nif test \"$with_fontconfig\" != 'yes'; then\n    DISTCHECK_CONFIG_FLAGS=\"${DISTCHECK_CONFIG_FLAGS} --with-fontconfig=$with_fontconfig \"\nfi\n\nhave_fontconfig='no'\nFONTCONFIG_CFLAGS=\"\"\nFONTCONFIG_LIBS=\"\"\nFONTCONFIG_PKG=\"\"\nif test \"x$with_fontconfig\" = \"xyes\"; then\n  AC_MSG_RESULT([-------------------------------------------------------------])\n  PKG_CHECK_MODULES(FONTCONFIG,[fontconfig >= 2.1.0], have_fontconfig=yes, have_fontconfig=no)\n  AC_MSG_RESULT([])\nfi\n\nif test \"$have_fontconfig\" = 'yes'; then\n  AC_DEFINE(FONTCONFIG_DELEGATE,1,Define if you have FONTCONFIG library)\n  CFLAGS=\"$FONTCONFIG_CFLAGS $CFLAGS\"\nfi\n\nAM_CONDITIONAL(FONTCONFIG_DELEGATE,test \"$have_fontconfig\" = 'yes')\nAC_SUBST(FONTCONFIG_CFLAGS)\nAC_SUBST(FONTCONFIG_LIBS)\n\ndnl ===========================================================================\n\n#\n# Check for the Freetype delegate library.\n#\nAC_ARG_WITH([freetype],\n    [AC_HELP_STRING([--without-freetype],\n                    [disable Freetype support])],\n    [with_freetype=$withval],\n    [with_freetype='yes'])\n\nif test \"$with_freetype\" != 'yes'; then\n    DISTCHECK_CONFIG_FLAGS=\"${DISTCHECK_CONFIG_FLAGS} --with-freetype=$with_freetype \"\nfi\n\nhave_freetype='no'\nFREETYPE_CFLAGS=\"\"\nFREETYPE_LIBS=\"\"\nFREETYPE_PKG=\"\"\nif test \"x$with_freetype\" = \"xyes\"; then\n  AC_MSG_RESULT([-------------------------------------------------------------])\n  PKG_CHECK_MODULES(FREETYPE,[freetype2], have_freetype=yes, have_freetype=no)\n  AC_MSG_RESULT([])\nfi\n\nif test \"$have_freetype\" = 'yes'; then\n  AC_DEFINE(FREETYPE_DELEGATE,1,Define if you have FREETYPE library)\n  CFLAGS=\"$FREETYPE_CFLAGS $CFLAGS\"\nfi\n\nAM_CONDITIONAL(FREETYPE_DELEGATE, test \"$have_freetype\" = 'yes')\nAC_SUBST(FREETYPE_CFLAGS)\nAC_SUBST(FREETYPE_LIBS)\n\ndnl ===========================================================================\n\n#\n# Check for the raqm delegate library.\n#\nAC_ARG_WITH([raqm],\n    [AC_HELP_STRING([--without-raqm],\n                    [disable Raqm support])],\n    [with_raqm=$withval],\n    [with_raqm='yes'])\n\nif test \"$with_raqm\" != 'yes'; then\n    DISTCHECK_CONFIG_FLAGS=\"${DISTCHECK_CONFIG_FLAGS} --with-raqm=$with_raqm \"\nfi\n\nhave_raqm='no'\nRAQM_CFLAGS=\"\"\nRAQM_LIBS=\"\"\nRAQM_PKG=\"\"\nif test \"x$with_raqm\" = \"xyes\"; then\n  AC_MSG_RESULT([-------------------------------------------------------------])\n  PKG_CHECK_MODULES(RAQM,[raqm], have_raqm=yes, have_raqm=no)\n  AC_MSG_RESULT([])\nfi\n\nif test \"$have_raqm\" = 'yes'; then\n  AC_DEFINE(RAQM_DELEGATE,1,Define if you have RAQM library)\n  CFLAGS=\"$RAQM_CFLAGS $CFLAGS\"\nfi\n\nAM_CONDITIONAL(RAQM_DELEGATE, test \"$have_raqm\" = 'yes')\nAC_SUBST(RAQM_CFLAGS)\nAC_SUBST(RAQM_LIBS)\n\ndnl ===========================================================================\n\n#\n# Check for Ghostscript library or framework.\n#\n# Test for iapi.h & test for gsapi_new_instance in -lgs\n# or -framework Ghostscript\n\nAC_ARG_WITH([gslib],\n    [AC_HELP_STRING([--with-gslib],\n                    [enable Ghostscript library support])],\n    [with_gslib=$withval],\n    [with_gslib='no'])\n\ngslib_framework='no'\nif test \"$with_gslib\" != 'yes'; then\n    DISTCHECK_CONFIG_FLAGS=\"${DISTCHECK_CONFIG_FLAGS} --with-gslib=$with_gslib \"\nfi\n\nhave_gslib='no'\nGS_LIBS=''\nif test \"$with_gslib\" != 'no'; then\n    AC_MSG_RESULT([-------------------------------------------------------------])\n    AC_MSG_CHECKING([for Ghostscript])\n    AC_MSG_RESULT([])\n    framework=0\n    failed=0\n    passed=0\n    AC_CHECK_HEADER(ghostscript/iapi.h,passed=`expr $passed + 1`,\n        failed=`expr $failed + 1`,)\n    AC_CHECK_HEADER(ghostscript/ierrors.h,passed=`expr $passed + 1`,\n        failed=`expr $failed + 1`,)\n    AC_CHECK_FRAMEWORK(Ghostscript,gsapi_new_instance,framework=`expr $framework + 1`,\n    AC_CHECK_LIB(gs,gsapi_new_instance,passed=`expr $passed + 1`,failed=`expr $failed + 1`,),)\n    AC_MSG_CHECKING([if Ghostscript package is complete])\n    if test $passed -gt 0; then\n        if test $failed -gt 0; then\n            AC_MSG_RESULT([no -- some components failed test])\n            have_gslib='no (failed tests)'\n        else\n            if test $framework -gt 0; then\n                GS_LIBS='-framework Ghostscript'\n                gslib_framework='yes'\n                AC_MSG_RESULT([yes, using framework.])\n            else\n                AC_MSG_RESULT([yes, using library.])\n                GS_LIBS='-lgs'\n            fi\n            LIBS=\"$GS_LIBS $LIBS\"\n            AC_DEFINE(GS_DELEGATE,1,Define if you have Ghostscript library or framework)\n            have_gslib='yes'\n        fi\n    else\n        AC_MSG_RESULT([no])\n    fi\nfi\nAM_CONDITIONAL(GS_DELEGATE, test \"$have_gslib\" = 'yes')\nAC_SUBST(GS_LIBS)\n\n# Set default font search path\nAC_ARG_WITH([fontpath],\n    [AC_HELP_STRING([--with-fontpath=DIR],\n                    [prepend to default font search path])],\n    [with_fontpath=$withval],\n    [with_fontpath=''])\n\nif test \"$with_fontpath\" != \"yes\" && test -z \"$with_fontpath\"; then\n    with_fontpath=''\nelse\n    AC_DEFINE_UNQUOTED(MAGICK_FONT_PATH,\"$with_fontpath\",[Define to prepend to default font search path.])\nfi\nif test \"$with_fontpath=\" != ''; then\n    DISTCHECK_CONFIG_FLAGS=\"${DISTCHECK_CONFIG_FLAGS} --with-fontpath=$with_fontpath \"\nfi\n\n# Set Ghostscript font directory\nAC_ARG_WITH([gs-font-dir],\n    [AC_HELP_STRING([--with-gs-font-dir=DIR],\n                    [Ghostscript font directory])],\n    [with_gs_font_dir=$withval],\n    [with_gs_font_dir='default'])\n\nif test \"$with_gs_font_dir\" != 'default'; then\n    DISTCHECK_CONFIG_FLAGS=\"${DISTCHECK_CONFIG_FLAGS} --with-gs-font-dir=$with_gs_font_dir \"\nfi\n\ndnl ===========================================================================\n\n#\n# Check for GVC delegate library.\n#\nAC_ARG_WITH(gvc,\n    [AC_HELP_STRING([--with-gvc],\n                    [enable GVC support])],\n    [with_gvc=$withval],\n    [with_gvc='yes'])\n\nif test \"$with_gvc\" != 'yes'; then\n    DISTCHECK_CONFIG_FLAGS=\"${DISTCHECK_CONFIG_FLAGS} --with-gvc=$with_gvc \"\nfi\n\nGVC_PKG=\"\"\nif test \"x$with_gvc\" = \"xyes\"; then\n  AC_MSG_RESULT([-------------------------------------------------------------])\n  PKG_CHECK_MODULES(GVC,[libgvc >= 2.9.0], have_gvc=yes, have_gvc=no)\n  AC_MSG_RESULT([])\nfi\n\nif test \"$have_gvc\" = 'yes'; then\n  AC_DEFINE(GVC_DELEGATE,1,Define if you have GVC library)\n  CFLAGS=\"$GVC_CFLAGS $CFLAGS\"\nfi\n\nAM_CONDITIONAL(GVC_DELEGATE, test \"$have_gvc\" = 'yes')\nAC_SUBST(GVC_CFLAGS)\nAC_SUBST(GVC_LIBS)\n\ndnl ===========================================================================\n\n#\n# Check for JBIG delegate library.\n#\n\nAC_ARG_WITH([jbig],\n    [AC_HELP_STRING([--without-jbig],\n                    [disable JBIG support])],\n    [with_jbig=$withval],\n    [with_jbig='yes'])\n\nhave_jbig='no'\nJBIG_LIBS=''\nif test \"$with_jbig\" != 'no'; then\n    AC_MSG_RESULT([-------------------------------------------------------------])\n    AC_MSG_CHECKING([for JBIG])\n    AC_MSG_RESULT([])\n    failed=0\n    passed=0\n    AC_CHECK_HEADER(jbig.h,passed=`expr $passed + 1`,failed=`expr $failed + 1`)\n    AC_CHECK_LIB(jbig,jbg_dec_init,passed=`expr $passed + 1`,failed=`expr $failed + 1`,)\n    AC_MSG_CHECKING([if JBIG package is complete])\n    if test $passed -gt 0; then\n        if test $failed -gt 0; then\n            AC_MSG_RESULT([no -- some components failed test])\n            have_jbig='no (failed tests)'\n        else\n            JBIG_LIBS='-ljbig'\n            LIBS=\"$JBIG_LIBS $LIBS\"\n            AC_DEFINE(JBIG_DELEGATE,1,Define if you have JBIG library)\n            AC_MSG_RESULT([yes])\n            have_jbig='yes'\n        fi\n    else\n        AC_MSG_RESULT([no])\n    fi\nfi\nAM_CONDITIONAL(JBIG_DELEGATE, test \"$have_jbig\" = 'yes')\nAC_SUBST(JBIG_LIBS)\n\ndnl ===========================================================================\n\n#\n# Check for JPEG delegate library.\n#\nAC_ARG_WITH([jpeg],\n    [AC_HELP_STRING([--without-jpeg],\n                    [disable JPEG support])],\n    [with_jpeg=$withval],\n    [with_jpeg='yes'])\n\nif test \"$with_jpeg\" != 'yes'; then\n    DISTCHECK_CONFIG_FLAGS=\"${DISTCHECK_CONFIG_FLAGS} --with-jpeg=$with_jpeg \"\nfi\n\nhave_jpeg='no'\nJPEG_LIBS=''\nif test \"$with_jpeg\" != 'no'; then\n    AC_MSG_RESULT([-------------------------------------------------------------])\n    AC_MSG_CHECKING([for JPEG])\n    AC_MSG_RESULT([])\n    failed=0\n    passed=0\n    AC_CHECK_HEADER(jconfig.h,passed=`expr $passed + 1`,failed=`expr $failed + 1`)\n    AC_CHECK_HEADER(jerror.h,passed=`expr $passed + 1`,failed=`expr $failed + 1`)\n    AC_CHECK_HEADER(jmorecfg.h,passed=`expr $passed + 1`,failed=`expr $failed + 1`)\n    AC_CHECK_HEADER(jpeglib.h,passed=`expr $passed + 1`,failed=`expr $failed + 1`)\n    AC_CHECK_LIB(jpeg,jpeg_read_header,passed=`expr $passed + 1`,failed=`expr $failed + 1`,)\n\n# Test for compatible JPEG library\nif test \"$ac_cv_jpeg_version_ok\" != 'yes'; then\nAC_CACHE_CHECK(for JPEG library is version 6b or later, ac_cv_jpeg_version_ok,\n[AC_TRY_COMPILE(\n#include <stdio.h>\n#include <stdlib.h>\n#include <jpeglib.h>\n,\nchangequote(<<, >>)dnl\n<<\n#if JPEG_LIB_VERSION < 62\n#error IJG JPEG library must be version 6b or newer!\n#endif\nreturn 0;\n>>,\nchangequote([, ])dnl\nac_cv_jpeg_version_ok='yes'; passed=`expr $passed + 1`,\nac_cv_jpeg_version_ok='no'; failed=`expr $failed + 1`)])\nfi\n    AC_MSG_CHECKING([if JPEG package is complete])\n    if test $passed -gt 0; then\n        if test $failed -gt 0; then\n            AC_MSG_RESULT([no -- some components failed test])\n            have_jpeg='no (failed tests)'\n        else\n            JPEG_LIBS='-ljpeg'\n            LIBS=\"$JPEG_LIBS $LIBS\"\n            AC_DEFINE(JPEG_DELEGATE,1,Define if you have JPEG library)\n            AC_MSG_RESULT([yes])\n            have_jpeg='yes'\n        fi\n    else\n        AC_MSG_RESULT([no])\n    fi\nfi\nAM_CONDITIONAL(JPEG_DELEGATE, test \"$have_jpeg\" = 'yes')\nAC_SUBST(JPEG_LIBS)\n\ndnl ===========================================================================\n\n#\n# Check for LCMS delegate library.\n#\nAC_ARG_WITH(lcms,\n        [  --without-lcms          disable lcms (v1.1X) support],\n        [with_lcms=$withval],\n        [with_lcms='yes'])\nif test \"$with_lcms\" != 'yes' ; then\n    DISTCHECK_CONFIG_FLAGS=\"${DISTCHECK_CONFIG_FLAGS} --with-lcms=$with_lcms \"\nfi\n\nhave_lcms='no'\nLCMS_CFLAGS=\"\"\nLCMS_LIBS=\"\"\nLCMS_PKG=\"\"\nif test \"x$with_lcms\" = \"xyes\"; then\n  AC_MSG_RESULT([-------------------------------------------------------------])\n  PKG_CHECK_MODULES(LCMS2,[lcms2 >= 2.0.0], have_lcms=yes, have_lcms=no)\n  AC_MSG_RESULT([])\nfi\n\nif test \"$have_lcms\" = 'yes'; then\n  AC_DEFINE(LCMS_DELEGATE,1,Define if you have LCMS library)\n  LCMS_CFLAGS=\"$LCMS2_CFLAGS\"\n  LCMS_LIBS=\"$LCMS2_LIBS\"\n  CFLAGS=\"$LCMS2_CFLAGS $CFLAGS\"\n  AC_CHECK_HEADER(lcms2/lcms2.h,have_lcms_header='yes',,)\n  if test \"$have_lcms_header\" = 'yes'; then\n    AC_DEFINE(HAVE_LCMS2_LCMS2_H,1,Define if you have the <lcms2/lcms2.h> header file.)\n  else\n    AC_DEFINE(HAVE_LCMS2_H,1,Define if you have the <lcms2.h> header file.)\n  fi\nfi\n\nAM_CONDITIONAL(LCMS_DELEGATE, test \"$have_lcms\" = 'yes')\nAC_SUBST(LCMS_CFLAGS)\nAC_SUBST(LCMS_LIBS)\n\ndnl ===========================================================================\n\n#\n# Check for the OpenJP2 delegate library.\n#\nAC_ARG_WITH([openjp2],\n    [AC_HELP_STRING([--without-openjp2],\n                    [disable OpenJP2 support])],\n    [with_openjp2=$withval],\n    [with_openjp2='yes'])\n\nif test \"$with_openjp2\" != 'yes'; then\n    DISTCHECK_CONFIG_FLAGS=\"${DISTCHECK_CONFIG_FLAGS} --with-openjp2=$with_openjp2 \"\nfi\n\nhave_openjp2='no'\nLIBOPENJP2_CFLAGS=\"\"\nLIBOPENJP2_LIBS=\"\"\nLIBOPENJP2_PKG=\"\"\nif test \"x$with_openjp2\" = \"xyes\"; then\n  AC_MSG_RESULT([-------------------------------------------------------------])\n  PKG_CHECK_MODULES(LIBOPENJP2,[libopenjp2 >= 2.1.0], have_openjp2=yes, have_openjp2=no)\n  AC_MSG_RESULT([])\nfi\n\nif test \"$have_openjp2\" = 'yes'; then\n  AC_DEFINE(LIBOPENJP2_DELEGATE,1,Define if you have OPENJP2 library)\n  CFLAGS=\"$LIBOPENJP2_CFLAGS $CFLAGS\"\nfi\n\nAM_CONDITIONAL(LIBOPENJP2_DELEGATE, test \"$have_openjp2\" = 'yes')\nAC_SUBST(LIBOPENJP2_CFLAGS)\nAC_SUBST(LIBOPENJP2_LIBS)\n\n\ndnl ===========================================================================\n\n#\n# Check for the LQR (Liquid Rescale) delegate library.\n#\nAC_ARG_WITH([lqr],\n    [AC_HELP_STRING([--without-lqr],\n                    [disable Liquid Rescale support])],\n    [with_lqr=$withval],\n    [with_lqr='yes'])\n\nif test \"$with_lqr\" != 'yes'; then\n    DISTCHECK_CONFIG_FLAGS=\"${DISTCHECK_CONFIG_FLAGS} --with-lqr=$with_lqr \"\nfi\n\nhave_lqr='no'\nLQR_CFLAGS=\"\"\nLQR_LIBS=\"\"\nLQR_PKG=\"\"\nif test \"x$with_lqr\" = \"xyes\"; then\n  AC_MSG_RESULT([-------------------------------------------------------------])\n  PKG_CHECK_MODULES(LQR,[lqr-1 >= 0.1.0], have_lqr=yes, have_lqr=no)\n  AC_MSG_RESULT([])\nfi\n\nif test \"$have_lqr\" = 'yes'; then\n  AC_DEFINE(LQR_DELEGATE,1,Define if you have LQR library)\n  CFLAGS=\"$LQR_CFLAGS $CFLAGS\"\nfi\n\nAM_CONDITIONAL(LQR_DELEGATE, test \"$have_lqr\" = 'yes')\nAC_SUBST(LQR_CFLAGS)\nAC_SUBST(LQR_LIBS)\n\ndnl ===========================================================================\n\n# Disable LZMA (lzma library)\nAC_ARG_WITH(lzma,\n            [  --without-lzma          disable LZMA support],\n            [with_lzma=$withval],\n            [with_lzma='yes'])\nif test \"$with_lzma\" != 'yes' ; then\n    DISTCHECK_CONFIG_FLAGS=\"${DISTCHECK_CONFIG_FLAGS} --with-lzma=$with_lzma \"\nfi\n\nLZMA_PKG=\"\"\nif test \"x$with_lzma\" = \"xyes\"; then\n  AC_MSG_RESULT([-------------------------------------------------------------])\n  PKG_CHECK_MODULES(LZMA,[liblzma >= 2.9.0], have_lzma=yes, have_lzma=no)\n  AC_MSG_RESULT([])\nfi\n\nif test \"$have_lzma\" = 'yes'; then\n  AC_DEFINE(LZMA_DELEGATE,1,Define if you have LZMA library)\n  CFLAGS=\"$LZMA_CFLAGS $CFLAGS\"\nfi\n\nAM_CONDITIONAL(LZMA_DELEGATE, test \"$have_lzma\" = 'yes')\nAC_SUBST(LZMA_CFLAGS)\nAC_SUBST(LZMA_LIBS)\n\ndnl ===========================================================================\n\n#\n# Check for the OpenEXR delegate library.\n#\nAC_ARG_WITH([openexr],\n    [AC_HELP_STRING([--without-openexr],\n                    [disable OpenEXR support])],\n    [with_openexr=$withval],\n    [with_openexr='yes'])\n\nif test \"$with_openexr\" != 'yes'; then\n    DISTCHECK_CONFIG_FLAGS=\"${DISTCHECK_CONFIG_FLAGS} --with-openexr=$with_openexr \"\nfi\n\nhave_openexr='no'\nOPENEXR_CFLAGS=\"\"\nOPENEXR_LIBS=\"\"\nOPENEXR_PKG=\"\"\nif test \"x$with_openexr\" = \"xyes\"; then\n  AC_MSG_RESULT([-------------------------------------------------------------])\n  PKG_CHECK_MODULES(OPENEXR,[OpenEXR >= 1.0.6], have_openexr=yes, have_openexr=no)\n  AC_MSG_RESULT([])\nfi\n\nif test \"$have_openexr\" = 'yes'; then\n  AC_DEFINE(OPENEXR_DELEGATE,1,Define if you have OPENEXR library)\n  CFLAGS=\"$OPENEXR_CFLAGS $CFLAGS\"\nfi\n\nAM_CONDITIONAL(OPENEXR_DELEGATE, test \"$have_openexr\" = 'yes')\nAC_SUBST(OPENEXR_CFLAGS)\nAC_SUBST(OPENEXR_LIBS)\n\ndnl ===========================================================================\n\n#\n# Check for PANGO delegate library.\n#\nAC_ARG_WITH([pango],\n    [AC_HELP_STRING([--without-pango],\n                    [disable PANGO support])],\n    [with_pango=$withval],\n    [with_pango='yes'])\n\nif test \"$with_pango\" != 'yes'; then\n    DISTCHECK_CONFIG_FLAGS=\"${DISTCHECK_CONFIG_FLAGS} --with-pango=$with_pango \"\nfi\n\nhave_pango='no'\nhave_pangocairo='no'\nPANGO_CFLAGS=\"\"\nPANGO_LIBS=\"\"\nPANGO_PKG=\"\"\nif test \"x$with_pango\" = \"xyes\"; then\n  AC_MSG_RESULT([-------------------------------------------------------------])\n  PKG_CHECK_MODULES(PANGO, [pangocairo >= 1.28.1], have_pangocairo=yes, have_pangocairo=no)\n  AC_MSG_RESULT([])\n  PKG_CHECK_MODULES(PANGO, [pango >= 1.28.1], have_pango=yes, have_pango=no)\n  AC_MSG_RESULT([])\nfi\n\nif test \"$have_pango\" = 'yes'; then\n  AC_DEFINE(PANGO_DELEGATE,1,Define if you have PANGO library)\n  CFLAGS=\"$PANGO_CFLAGS $CFLAGS\"\nfi\n\nif test \"$have_pangocairo\" = 'yes'; then\n  AC_DEFINE(PANGOCAIRO_DELEGATE,1,Define if you have PANGOCAIRO library)\n  CFLAGS=\"$PANGOCAIRO_CFLAGS $CFLAGS\"\nfi\n\nAM_CONDITIONAL(PANGO_DELEGATE, test \"$have_pango\" = 'yes')\nAM_CONDITIONAL(PANGOCAIRO_DELEGATE, test \"$have_pangocairo\" = 'yes')\nAC_SUBST(PANGO_CFLAGS)\nAC_SUBST(PANGO_LIBS)\n\ndnl ===========================================================================\n\n#\n# Check for PNG delegate library.\n#\nAC_ARG_WITH(png,\n    [AC_HELP_STRING([--without-png],\n                    [disable PNG support])],\n    [with_png=$withval],\n    [with_png='yes'])\n\nif test \"$with_png\" != 'yes'; then\n    DISTCHECK_CONFIG_FLAGS=\"${DISTCHECK_CONFIG_FLAGS} --with-png=$with_png \"\nfi\n\nhave_png='no'\nPNG_CFLAGS=\"\"\nPNG_LIBS=\"\"\nPNG_PKG=\"\"\nif test \"x$with_png\" = \"xyes\"; then\n  AC_MSG_RESULT([-------------------------------------------------------------])\n  PKG_CHECK_MODULES(PNG,[libpng >= 1.0.0], have_png=yes, have_png=no)\n  AC_MSG_RESULT([])\nfi\n\nif test \"$have_png\" = 'yes'; then\n  AC_DEFINE(PNG_DELEGATE,1,Define if you have PNG library)\n  CFLAGS=\"$PNG_CFLAGS $CFLAGS\"\nfi\n\nAM_CONDITIONAL(PNG_DELEGATE, test \"$have_png\" = 'yes')\nAC_SUBST(PNG_CFLAGS)\nAC_SUBST(PNG_LIBS)\n\ndnl ===========================================================================\n\n#\n# Check for RSVG delegate library.\n#\nAC_ARG_WITH([rsvg],\n    [AC_HELP_STRING([--with-rsvg],\n                    [enable RSVG support])],\n    [with_rsvg=$withval],\n    [with_rsvg='no'])\n\nif test \"$with_rsvg\" != 'yes'; then\n    DISTCHECK_CONFIG_FLAGS=\"${DISTCHECK_CONFIG_FLAGS} --with-rsvg=$with_rsvg \"\nfi\n\nhave_rsvg='no'\nhave_cairo='no'\nRSVG_CFLAGS=\"\"\nRSVG_LIBS=\"\"\nRSVG_PKG=\"\"\nif test \"x$with_rsvg\" = \"xyes\"; then\n  AC_MSG_RESULT([-------------------------------------------------------------])\n  PKG_CHECK_MODULES(RSVG,[librsvg-2.0 >= 2.9.0], have_rsvg=yes, have_rsvg=no)\n  AC_MSG_RESULT([])\n  PKG_CHECK_MODULES(CAIRO_SVG, cairo-svg, have_cairo=yes, have_cairo=no)\n  AC_MSG_RESULT([])\nfi\n\nif test \"$have_rsvg\" = 'yes'; then\n  AC_DEFINE(RSVG_DELEGATE,1,Define if you have RSVG library)\n  CFLAGS=\"$RSVG_CFLAGS $CFLAGS\"\nfi\n\nif test \"$have_cairo\" = 'yes'; then\n  AC_DEFINE(CAIRO_DELEGATE,1,Define if you have CAIRO library)\n  CFLAGS=\"$CAIRO_SVG_CFLAGS $CFLAGS\"\nfi\n\nAM_CONDITIONAL(RSVG_DELEGATE, test \"$have_rsvg\" = 'yes')\nAM_CONDITIONAL(CAIRO_DELEGATE, test \"$have_cairo\" = 'yes')\nAC_SUBST(RSVG_CFLAGS)\nAC_SUBST(RSVG_LIBS)\n\ndnl ===========================================================================\n\n#\n# Check for TIFF delegate library.\n#\nAC_ARG_WITH([tiff],\n    [AC_HELP_STRING([--without-tiff],\n                    [disable TIFF support])],\n    [with_tiff=$withval],\n    [with_tiff='yes'])\n\nif test \"$with_tiff\" != 'yes'; then\n    DISTCHECK_CONFIG_FLAGS=\"${DISTCHECK_CONFIG_FLAGS} --with-tiff=$with_tiff \"\nfi\n\nhave_tiff='no'\nTIFF_LIBS=''\nif test \"$with_tiff\" != 'no'; then\n    AC_MSG_RESULT([-------------------------------------------------------------])\n    AC_MSG_CHECKING([for TIFF])\n    AC_MSG_RESULT([])\n    failed=0\n    passed=0\n    AC_CHECK_HEADER(tiff.h,passed=`expr $passed + 1`,failed=`expr $failed + 1`)\n    AC_CHECK_HEADER(tiffio.h,passed=`expr $passed + 1`,failed=`expr $failed + 1`)\n    AC_CHECK_LIB(tiff,TIFFOpen,passed=`expr $passed + 1`,failed=`expr $failed + 1`,)\n    AC_CHECK_LIB(tiff,TIFFClientOpen,passed=`expr $passed + 1`,failed=`expr $failed + 1`,)\n    AC_CHECK_LIB(tiff,TIFFIsByteSwapped,passed=`expr $passed + 1`,failed=`expr $failed + 1`,)\n    AC_CHECK_LIB(tiff,TIFFReadRGBATile,passed=`expr $passed + 1`,failed=`expr $failed + 1`,)\n    AC_CHECK_LIB(tiff,TIFFReadRGBAStrip,passed=`expr $passed + 1`,failed=`expr $failed + 1`,)\n    AC_MSG_CHECKING([if TIFF package is complete])\n    if test $passed -gt 0; then\n        if test $failed -gt 0; then\n            AC_MSG_RESULT([no -- some components failed test])\n            have_tiff='no (failed tests)'\n        else\n            TIFF_LIBS='-ltiff'\n            LIBS=\"$TIFF_LIBS $LIBS\"\n            AC_DEFINE(TIFF_DELEGATE,1,Define if you have TIFF library)\n            AC_MSG_RESULT([yes])\n            have_tiff='yes'\n            AC_CHECK_HEADERS(tiffconf.h)\n            AC_CHECK_FUNCS([TIFFIsCODECConfigured TIFFMergeFieldInfo \\\n              TIFFIsBigEndian TIFFReadEXIFDirectory TIFFSetErrorHandlerExt \\\n              TIFFSetTagExtender TIFFSetWarningHandlerExt \\\n              TIFFSwabArrayOfTriples])\n        fi\n    else\n        AC_MSG_RESULT([no])\n    fi\nfi\nAM_CONDITIONAL(TIFF_DELEGATE, test \"$have_tiff\" = 'yes')\nAC_SUBST(TIFF_LIBS)\n\ndnl ===========================================================================\n\n#\n# Check for WEBP delegate library.\n#\nAC_ARG_WITH(webp,\n    [AC_HELP_STRING([--without-webp],\n                    [disable WEBP support])],\n    [with_webp=$withval],\n    [with_webp='yes'])\n\nif test \"$with_webp\" != 'yes'; then\n    DISTCHECK_CONFIG_FLAGS=\"${DISTCHECK_CONFIG_FLAGS} --with-webp=$with_webp \"\nfi\n\nhave_webp='no'\nWEBP_LIBS=''\nif test \"$with_webp\" != 'no'; then\n    AC_MSG_RESULT([-------------------------------------------------------------])\n    AC_MSG_CHECKING([for WEBP])\n    AC_MSG_RESULT([])\n    failed=0\n    passed=0\n    AC_CHECK_HEADER(webp/decode.h,passed=`expr $passed + 1`,failed=`expr $failed + 1`,)\n    AC_CHECK_LIB(webp,WebPPictureInitInternal,passed=`expr $passed + 1`,failed=`expr $failed + 1`,)\n    AC_MSG_CHECKING([if WEBP package is complete])\n    if test $passed -gt 0; then\n        if test $failed -gt 0; then\n            AC_MSG_RESULT([no -- some components failed test])\n            have_webp='no (failed tests)'\n        else\n            WEBP_LIBS='-lwebp'\n            LIBS=\"$WEBP_LIBS $LIBS\"\n            AC_DEFINE(WEBP_DELEGATE,1,Define if you have WEBP library)\n            AC_MSG_RESULT([yes])\n            have_webp='yes'\n        fi\n    else\n        AC_MSG_RESULT([no])\n    fi\nfi\nAM_CONDITIONAL(WEBP_DELEGATE,test \"$have_webp\" = 'yes')\nAC_SUBST(WEBP_LIBS)\n\ndnl ===========================================================================\n\n#\n# Set Windows font directory.\n#\nAC_ARG_WITH([windows-font-dir],\n    [AC_HELP_STRING([--with-windows-font-dir=DIR],\n                    [Windows font directory])],\n    [with_windows_font_dir=$withval],\n    [with_windows_font_dir='default'])\n\nif test \"$with_windows_font_dir\" != 'default'; then\n    DISTCHECK_CONFIG_FLAGS=\"${DISTCHECK_CONFIG_FLAGS} --with-windows-font-dir=$with_windows_font_dir \"\nfi\n\ndnl ===========================================================================\n\n#\n# Check for WMF delegate library.\n#\nAC_ARG_WITH([wmf],\n    [AC_HELP_STRING([--with-wmf],\n                    [enable WMF support])],\n    [with_wmf=$withval],\n    [with_wmf='yes'])\n\nif test \"$with_wmf\" != 'yes'; then\n    DISTCHECK_CONFIG_FLAGS=\"${DISTCHECK_CONFIG_FLAGS} --with-wmf=$with_wmf \"\nfi\n\nhave_wmf='no'\nWMF_LIBS=''\nWMF_CFLAGS=''\nOLIBS=\"$LIBS\"\nif test \"$with_wmf\" != 'no'; then\n  AC_MSG_CHECKING([for WMF support ])\n  AC_MSG_RESULT([])\n\n  have_libwmflite='no'\n  have_libwmf_ipa_h='no'\n\n  AC_CHECK_HEADER([libwmf/ipa.h],[have_libwmf_ipa_h='yes'],[],[$FT2BUILD_H])\n  if test \"$have_libwmf_ipa_h\" = 'yes'; then\n    AC_CHECK_LIB([wmflite],[wmf_lite_create],[have_libwmflite='yes'],[],[])\n    if test \"$have_libwmflite\" = 'yes'; then\n      AC_DEFINE(WMF_DELEGATE,1,Define if you have WMF library)\n      WMF_LIBS='-lwmflite'\n      LIBS=\"$WMF_LIBS $LIBS\"\n      have_wmf='yes'\n    else\n      AC_MSG_RESULT([no -- some components failed test])\n      have_wmf='no (failed tests)'\n      have_wmflite='no (failed tests)'\n      LIBS=\"$OLIBS\"\n      WMF_LIBS=''\n    fi\n  fi\nfi\nAC_MSG_CHECKING([if WMF package is complete ])\nif test \"$have_wmf\" = 'yes'; then\n  AC_MSG_RESULT([yes])\nelse\n  AC_MSG_RESULT([no])\nfi\nAM_CONDITIONAL([WMF_DELEGATE], [test \"$have_wmf\" = 'yes'])\nAC_SUBST([WMF_CFLAGS])\nAC_SUBST([WMF_LIBS])\n\ndnl ===========================================================================\n\n#\n# Check for XML delegate library.\n#\nAC_ARG_WITH([xml],\n    [AC_HELP_STRING([--without-xml],\n                    [disable XML support])],\n    [with_xml=$withval],\n    [with_xml='yes'])\n\nif test \"$with_xml\" != 'yes' ; then\n    DISTCHECK_CONFIG_FLAGS=\"${DISTCHECK_CONFIG_FLAGS} --with-xml=$with_xml \"\nfi\n\nhave_xml='no'\nXML_CFLAGS=\"\"\nXML_LIBS=\"\"\nXML_PKG=\"\"\nif test \"x$with_xml\" = \"xyes\"; then\n  AC_MSG_RESULT([-------------------------------------------------------------])\n  PKG_CHECK_MODULES(XML,[libxml-2.0 >= 2.0.0], have_xml=yes, have_xml=no)\n  AC_MSG_RESULT([])\nfi\n\nif test \"$have_xml\" = 'yes'; then\n  AC_DEFINE(XML_DELEGATE,1,Define if you have XML library)\n  CFLAGS=\"$XML_CFLAGS $CFLAGS\"\nfi\n\nAM_CONDITIONAL(XML_DELEGATE, test \"$have_xml\" = 'yes')\nAC_SUBST(XML_CFLAGS)\nAC_SUBST(XML_LIBS)\n\ndnl ===========================================================================\n\n# Substitute compiler name to build/link PerlMagick\n#\nAC_SUBST([PERLMAINCC])\n\n#\n# Configure install Paths\n#\n\n# Path to ImageMagick header files\nINCLUDE_RELATIVE_PATH=\"${PACKAGE_NAME}-${MAGICK_MAJOR_VERSION}\"\nINCLUDE_PATH=\"${INCLUDE_DIR}/${INCLUDE_RELATIVE_PATH}\"\nDEFINE_INCLUDE_PATH=\"${INCLUDE_DIR}/${INCLUDE_RELATIVE_PATH}/\"\ncase \"${build_os}\" in\n  mingw* )\n    DEFINE_INCLUDE_PATH=`$WinPathScript \"$DEFINE_INCLUDE_PATH\" 1`\n    ;;\nesac\nAC_DEFINE_UNQUOTED(INCLUDE_PATH,\"$DEFINE_INCLUDE_PATH\",[Directory where ImageMagick headers live.])\nAC_SUBST(INCLUDE_PATH)\n\n# Path to ImageMagick header files (arch part)\nINCLUDEARCH_PATH=\"${INCLUDEARCH_DIR}/${INCLUDE_RELATIVE_PATH}\"\nDEFINE_INCLUDEARCH_PATH=\"${INCLUDEARCH_DIR}/${INCLUDE_RELATIVE_PATH}/\"\ncase \"${build_os}\" in\n  mingw* )\n    DEFINE_INCLUDEARCH_PATH=`$WinPathScript \"$DEFINE_INCLUDEARCH_PATH\" 1`\n    ;;\nesac\nAC_DEFINE_UNQUOTED(INCLUDEARCH_PATH,\"$DEFINE_INCLUDE_PATH\",[Directory where ImageMagick architecture headers live.])\nAC_SUBST(INCLUDEARCH_PATH)\n\n# Subdirectory under lib to place ImageMagick lib files\nLIBRARY_RELATIVE_PATH=\"${PACKAGE_NAME}-${PACKAGE_VERSION}\"\nAC_DEFINE_UNQUOTED(LIBRARY_RELATIVE_PATH,\"$LIBRARY_RELATIVE_PATH\",[Subdirectory of lib where ImageMagick architecture dependent files are installed.])\n\n# Path to ImageMagick bin directory\nEXECUTABLE_PATH=\"${BIN_DIR}\"\nDEFINE_EXECUTABLE_PATH=\"${BIN_DIR}/\"\ncase \"${build_os}\" in\n  mingw* )\n    DEFINE_EXECUTABLE_PATH=`$WinPathScript \"$DEFINE_EXECUTABLE_PATH\" 1`\n    ;;\nesac\nAC_DEFINE_UNQUOTED(EXECUTABLE_PATH,\"$DEFINE_EXECUTABLE_PATH\",[Directory where executables are installed.])\nAC_SUBST(EXECUTABLE_PATH)\n\n# Path to ImageMagick lib\nLIBRARY_PATH=\"${LIB_DIR}/${LIBRARY_RELATIVE_PATH}\"\nDEFINE_LIBRARY_PATH=\"${LIB_DIR}/${LIBRARY_RELATIVE_PATH}/\"\ncase \"${build_os}\" in\n  mingw* )\n    DEFINE_LIBRARY_PATH=`$WinPathScript \"$DEFINE_LIBRARY_PATH\" 1`\n    ;;\nesac\nAC_DEFINE_UNQUOTED(LIBRARY_PATH,\"$DEFINE_LIBRARY_PATH\",[Directory where architecture-dependent files live.])\nAC_SUBST(LIBRARY_PATH)\n\n#\n# path to local binaries\nif test \"x$LIB_BIN_BASEDIRNAME\" = \"x\"; then\n   LIB_BIN_BASEDIRNAME=\"bin\"\nfi\nAC_DEFINE_UNQUOTED(LIB_BIN_BASEDIRNAME,\"$LIB_BIN_BASEDIRNAME\",[Binaries in libraries path base name (will be during install linked to bin)])\nAC_SUBST(LIB_BIN_BASEDIRNAME)\n\nif test \"x$LIB_BIN_DIR\" = \"x\"; then\n   LIB_BIN_DIR=${LIB_BIN_BASEDIRNAME}-${MAGICK_ABI_SUFFIX}\nfi\nAC_SUBST(LIB_BIN_DIR)\n\nLIB_BIN_DIR_RELATIVE_PATH=$LIB_BIN_DIR\nAC_SUBST(LIB_BIN_DIR_RELATIVE_PATH)\nLIB_BIN_DIR_PATH=\"${LIBRARY_PATH}/${LIB_BIN_DIR_RELATIVE_PATH}\"\nAC_SUBST(LIB_BIN_DIR_PATH)\n\n#\n# path to modules lib\nif test \"x$MODULES_BASEDIRNAME\" = \"x\"; then\n   MODULES_BASEDIRNAME=\"modules\"\nfi\nAC_DEFINE_UNQUOTED(MODULES_BASEDIRNAME,\"$MODULES_BASEDIRNAME\",[Module directory name without ABI part.])\nAC_SUBST(MODULES_BASEDIRNAME)\n\nif test \"x$MODULES_DIRNAME\" = \"x\"; then\n  MODULES_DIRNAME=${MODULES_BASEDIRNAME}-${MAGICK_ABI_SUFFIX}\nelse\n  AC_DEFINE_UNQUOTED(MODULES_DIRNAME,\"$MODULES_DIRNAME\",[Module directory dirname])\nfi\nAC_SUBST(MODULES_DIRNAME)\n\nMODULES_RELATIVE_PATH=\"${MODULES_DIRNAME}\"\nAC_SUBST(MODULES_RELATIVE_PATH)\nMODULES_PATH=\"${LIBRARY_PATH}/${MODULES_RELATIVE_PATH}\"\nAC_SUBST(MODULES_PATH)\n\n#\n# path to coders lib\nif test \"x$CODER_DIRNAME\" = \"x\"; then\n   CODER_DIRNAME=\"coders\"\nfi\nAC_DEFINE_UNQUOTED(CODER_DIRNAME,\"$CODER_DIRNAME\",[coders subdirectory.])\nAC_SUBST(CODER_DIRNAME)\n\nCODER_RELATIVE_PATH=\"${CODER_DIRNAME}\"\nCODER_PATH=\"${MODULES_PATH}/${CODER_DIRNAME}\"\nAC_SUBST(CODER_PATH)\n\n#\n# Subdirectory under lib to place ImageMagick filter module files\n#\n# path to coders lib\nif test \"x$FILTER_DIRNAME\" = \"x\"; then\n   FILTER_DIRNAME=\"filters\"\nfi\nAC_DEFINE_UNQUOTED(FILTER_DIRNAME,\"$FILTER_DIRNAME\",[filter subdirectory.])\nAC_SUBST(FILTER_DIRNAME)\n\nFILTER_RELATIVE_PATH=\"${FILTER_DIRNAME}\"\nFILTER_PATH=\"${MODULES_PATH}/${FILTER_DIRNAME}\"\nAC_SUBST(FILTER_PATH)\n\n#\n# Path to ImageMagick documentation files\nDOCUMENTATION_RELATIVE_PATH=\"${PACKAGE_NAME}-${MAGICK_MAJOR_VERSION}\"\nDOCUMENTATION_PATH=\"${DOC_DIR}/${DOCUMENTATION_RELATIVE_PATH}\"\nDEFINE_DOCUMENTATION_PATH=\"${DOC_DIR}/${DOCUMENTATION_RELATIVE_PATH}/\"\ncase \"${build_os}\" in\n  mingw* )\n    DEFINE_DOCUMENTATION_PATH=`$WinPathScript \"$DEFINE_DOCUMENTATION_PATH\" 1`\n    ;;\nesac\nAC_DEFINE_UNQUOTED(DOCUMENTATION_PATH,\"$DEFINE_DOCUMENTATION_PATH\",[Directory where ImageMagick documents live.])\nAC_SUBST(DOCUMENTATION_PATH)\n\n#\n# Enable/Disable documentation\nAC_ARG_ENABLE([docs],\n  [AS_HELP_STRING([--disable-docs],\n    [disable building of documentation])],\n  wantdocs=$enableval, wantdocs=yes)\nAM_CONDITIONAL([INSTALL_DOC], [test \"$wantdocs\" = \"yes\"])\n\n# Subdirectory to place architecture-dependent configuration files\nCONFIGURE_RELATIVE_PATH=\"${PACKAGE_NAME}-${MAGICK_MAJOR_VERSION}\"\nAC_DEFINE_UNQUOTED(CONFIGURE_RELATIVE_PATH,\"$CONFIGURE_RELATIVE_PATH\",[Subdirectory of lib where architecture-dependent configuration files live.])\nCONFIGURE_PATH=\"${SYSCONF_DIR}/${CONFIGURE_RELATIVE_PATH}/\"\nDEFINE_CONFIGURE_PATH=\"${SYSCONF_DIR}/${CONFIGURE_RELATIVE_PATH}/\"\ncase \"${build_os}\" in\n  mingw* )\n    DEFINE_CONFIGURE_PATH=`$WinPathScript \"$DEFINE_CONFIGURE_PATH\" 1`\n    ;;\nesac\nAC_DEFINE_UNQUOTED(CONFIGURE_PATH,\"$DEFINE_CONFIGURE_PATH\",[Directory where architecture-dependent configuration files live.])\nAC_SUBST(CONFIGURE_PATH)\n\n# Subdirectory to place architecture-independent configuration files\nSHARE_RELATIVE_PATH=\"${PACKAGE_NAME}-${MAGICK_MAJOR_VERSION}\"\nAC_DEFINE_UNQUOTED(SHARE_RELATIVE_PATH,\"$SHARE_RELATIVE_PATH\",[Subdirectory of lib where architecture-independent configuration files live.])\nSHARE_PATH=\"${DATA_DIR}/${SHARE_RELATIVE_PATH}\"\nDEFINE_SHARE_PATH=\"${DATA_DIR}/${SHARE_RELATIVE_PATH}/\"\ncase \"${build_os}\" in\n  mingw* )\n    DEFINE_SHARE_PATH=`$WinPathScript \"$DEFINE_SHARE_PATH\" 1`\n    ;;\nesac\nAC_DEFINE_UNQUOTED(SHARE_PATH,\"$DEFINE_SHARE_PATH\",[Directory where architecture-independent configuration files live.])\nAC_SUBST(SHARE_PATH)\n\n#\n# Subdirectory to place architecture-dependent configuration files.\nif test \"x$SHAREARCH_BASEDIRNAME\" = \"x\"; then\n   SHAREARCH_BASEDIRNAME=\"config\"\nfi\nAC_DEFINE_UNQUOTED(SHAREARCH_BASEDIRNAME,\"$SHAREARCH_BASEDIRNAME\",[Sharearch directory name without ABI part.])\nAC_SUBST(SHAREARCH_BASEDIRNAME)\n\nif test \"x$SHAREARCH_DIRNAME\" = \"x\"; then\n  SHAREARCH_DIRNAME=${SHAREARCH_BASEDIRNAME}-${MAGICK_ABI_SUFFIX}\nelse\n  AC_DEFINE_UNQUOTED(SHAREARCH_DIRNAME,\"$SHAREARCH_DIRNAME\",[Sharearch directory dirname])\nfi\nAC_SUBST(SHAREARCH_DIRNAME)\n\nSHAREARCH_RELATIVE_PATH=\"${SHAREARCH_DIRNAME}\"\nAC_SUBST(SHAREARCH_RELATIVE_PATH)\nSHAREARCH_PATH=\"${LIBRARY_PATH}/${SHAREARCH_RELATIVE_PATH}\"\nAC_SUBST(SHAREARCH_PATH)\n\n#\n# program_transform_name is formed for use in a Makefile, so create a\n# modified version for use in a shell script.\nconfigure_transform_name=`echo ${program_transform_name} | sed 's,\\\\$\\\\$,$,'`\n\n# Default delegate definitions\nAC_MSG_RESULT([-------------------------------------------------------------])\nAC_MSG_CHECKING([for ImageMagick delegate programs])\nAC_MSG_RESULT([])\nBPGDecodeDelegateDefault='bpgdec'\nBPGEncodeDelegateDefault='bpgenc'\nBlenderDecodeDelegateDefault='blender'\nBrowseDelegateDefault='xdg-open'\nDNGDecodeDelegateDefault='ufraw-batch'\nDOCDecodeDelegateDefault='soffice'\nGVCDecodeDelegateDefault='dot'\nDVIDecodeDelegateDefault='dvips'\nEditorDelegateDefault='xterm'\nConvertDelegateDefault=`echo magick | sed ${configure_transform_name}`\nDisplayDelegateDefault=`echo magick | sed ${configure_transform_name}`\nMogrifyDelegateDefault=`echo magick | sed ${configure_transform_name}`\nHPGLDecodeDelegateDefault='hp2xx'\nHTMLDecodeDelegateDefault='html2ps'\nILBMDecodeDelegateDefault='ilbmtoppm'\nILBMEncodeDelegateDefault='ppmtoilbm'\nJXRDecodeDelegateDefault='JxrDecApp'\nJXREncodeDelegateDefault='JxrEncApp'\nLPDelegateDefault='lp'\nLPRDelegateDefault='lpr'\nLaunchDelegateDefault='gimp'\nMPEGDecodeDelegateDefault='avconv'\nMPEGEncodeDelegateDefault='avconv'\nMrSIDDecodeDelegateDefault='mrsidgeodecode'\nMVDelegateDefault='mv'\nPCLDelegateDefault='pcl6'\nif test \"$native_win32_build\" = 'yes'; then\n    PSDelegateDefault='gswin32c'\nelif test \"$gslib_framework\" = 'yes'; then\n    PSDelegateDefault='gsc'\nelse\n    PSDelegateDefault='gs'\nfi\nRMDelegateDefault='rm'\nRSVGDecodeDelegateDefault='rsvg-convert'\nSVGDecodeDelegateDefault='inkscape'\nUniconvertorDelegateDefault='uniconvertor'\nWebPDecodeDelegateDefault='dwebp'\nWebPEncodeDelegateDefault='cwebp'\nWWWDecodeDelegateDefault='curl'\nXPSDelegateDefault='gxps'\n\n# Search for delegates\nAC_PATH_PROG(BPGDecodeDelegate, \"$BPGDecodeDelegateDefault\", \"$BPGDecodeDelegateDefault\")\nAC_PATH_PROG(BPGEncodeDelegate, \"$BPGEncodeDelegateDefault\", \"$BPGEncodeDelegateDefault\")\nAC_PATH_PROG(BlenderDecodeDelegate, \"$BlenderDecodeDelegateDefault\", \"$BlenderDecodeDelegateDefault\")\nAC_PATH_PROGS(BrowseDelegate, \"$BrowseDelegateDefault\" google-chrome firefox konqueror mozilla lynx, \"$BrowseDelegateDefault\")\nAC_PATH_PROG(DNGDecodeDelegate, \"$DNGDecodeDelegateDefault\", \"$DNGDecodeDelegateDefault\")\nAC_PATH_PROG(DOCDecodeDelegate, \"$DOCDecodeDelegateDefault\", \"$DOCDecodeDelegateDefault\")\nAC_PATH_PROG(DVIDecodeDelegate, \"$DVIDecodeDelegateDefault\", \"$DVIDecodeDelegateDefault\")\nAC_PATH_PROG(ConvertDelegate, \"$ConvertDelegateDefault\", \"$ConvertDelegateDefault\")\nAC_PATH_PROG(DisplayDelegate, \"$DisplayDelegateDefault\", \"$DisplayDelegateDefault\")\nAC_PATH_PROG(EditorDelegate, \"$EditorDelegateDefault\", \"$EditorDelegateDefault\")\nAC_PATH_PROG(GVCDecodeDelegate, \"$GVCDecodeDelegateDefault\", \"$GVCDecodeDelegateDefault\")\nAC_PATH_PROG(HPGLDecodeDelegate, \"$HPGLDecodeDelegateDefault\", \"$HPGLDecodeDelegateDefault\")\nAC_PATH_PROG(HTMLDecodeDelegate, \"$HTMLDecodeDelegateDefault\", \"$HTMLDecodeDelegateDefault\")\nAC_PATH_PROG(ILBMDecodeDelegate, \"$ILBMDecodeDelegateDefault\", \"$ILBMDecodeDelegateDefault\")\nAC_PATH_PROG(ILBMEncodeDelegate, \"$ILBMEncodeDelegateDefault\", \"$ILBMEncodeDelegateDefault\")\nAC_PATH_PROG(JXRDecodeDelegate, \"$JXRDecodeDelegateDefault\", \"$JXRDecodeDelegateDefault\")\nAC_PATH_PROG(JXREncodeDelegate, \"$JXREncodeDelegateDefault\", \"$JXREncodeDelegateDefault\")\nAC_PATH_PROG(LPDelegate, \"$LPDelegateDefault\", no)\nAC_PATH_PROG(LPRDelegate, \"$LPRDelegateDefault\", \"$LPRDelegateDefault\")\nAC_PATH_PROG(LaunchDelegate, \"$LaunchDelegateDefault\", \"$LaunchDelegateDefault\")\nAC_PATH_PROG(MogrifyDelegate, \"$MogrifyDelegateDefault\", \"$MogrifyDelegateDefault\")\nAC_PATH_PROG(MPEGDecodeDelegate, \"$MPEGDecodeDelegateDefault\", \"$MPEGDecodeDelegateDefault\")\nif test \"$MPEGDecodeDelegate\" = \"$MPEGDecodeDelegateDefault\" ; then\n  MPEGDecodeDelegateDefault='ffmpeg'\n  AC_PATH_PROG(MPEGDecodeDelegate, \"$MPEGDecodeDelegateDefault\", \"$MPEGDecodeDelegateDefault\")\nfi;\nAC_PATH_PROG(MPEGEncodeDelegate, \"$MPEGEncodeDelegateDefault\", \"$MPEGEncodeDelegateDefault\")\nif test \"$MPEGEncodeDelegate\" = \"$MPEGEncodeDelegateDefault\" ; then\n  MPEGEncodeDelegateDefault='ffmpeg'\n  AC_PATH_PROG(MPEGEncodeDelegate, \"$MPEGEncodeDelegateDefault\", \"$MPEGEncodeDelegateDefault\")\nfi;\nAC_PATH_PROG(MrSIDDecodeDelegate, \"$MrSIDDecodeDelegateDefault\", \"$MrSIDDecodeDelegateDefault\")\nAC_PATH_PROG(MVDelegate, \"$MVDelegateDefault\", \"$MVDelegateDefault\")\nAC_PATH_PROG(PCLDelegate, \"$PCLDelegateDefault\", \"$PCLDelegateDefault\")\nAC_PATH_PROGS(PSDelegate, gsx gsc \"$PSDelegateDefault\", \"$PSDelegateDefault\")\nAC_PATH_PROG(RMDelegate, \"$RMDelegateDefault\", \"$RMDelegateDefault\")\nAC_PATH_PROG(RSVGDecodeDelegate, \"$RSVGDecodeDelegateDefault\", \"$RSVGDecodeDelegateDefault\")\nAC_PATH_PROG(SVGDecodeDelegate, \"$SVGDecodeDelegateDefault\", \"$SVGDecodeDelegateDefault\")\nAC_PATH_PROG(UniconvertorDelegate, \"$UniconvertorDelegateDefault\", \"$UniconvertorDelegateDefault\")\nAC_PATH_PROG(WebPDecodeDelegate, \"$WebPDecodeDelegateDefault\", \"$WebPDecodeDelegateDefault\")\nAC_PATH_PROG(WebPEncodeDelegate, \"$WebPEncodeDelegateDefault\", \"$WebPEncodeDelegateDefault\")\nAC_PATH_PROG(WWWDecodeDelegate, \"$WWWDecodeDelegateDefault\", \"$WWWDecodeDelegateDelegateDefault\")\nAC_PATH_PROG(XPSDelegate, \"$XPSDelegateDefault\", \"$XPSDelegateDefault\")\n\n# Prefer lpr to lp; lp needs options tacked on.\nif test \"$LPRDelegate\" != no; then\n    PrintDelegate=\"$LPRDelegate\"\nelse\n    PrintDelegate=\"$LPDelegate -c -s\"\nfi\nAC_SUBST(PrintDelegate)\n\n# Installed ImageMagick utiltity paths\nConvertDelegate=\"${BIN_DIR}/${ConvertDelegateDefault}\"\nDisplayDelegate=\"${BIN_DIR}/${DisplayDelegateDefault}\"\nMogrifyDelegate=\"${BIN_DIR}/${MogrifyDelegateDefault}\"\n\n# Set delegate booleans\nhave_avconv='no'; if test \"$MPEGDecodeDelegate\" != \"$MPEGDecodeDelegateDefault\" ; then have_avconv='yes'; fi\nhave_gs='no'         ; if test \"$PSDelegate\" != \"$PSDelegateDefault\"; then have_gs='yes'; fi\nhave_hp2xx='no'      ; if test \"$HPGLDecodeDelegate\" !=  \"$HPGLDecodeDelegateDefault\" ; then have_hp2xx='yes'; fi\nhave_ilbmtoppm='no'  ; if test \"$ILBMDecodeDelegate\" != \"$ILBMDecodeDelegateDefault\" ; then have_ilbmtoppm='yes'; fi\nhave_mrsid='no'; if test \"$MrSIDDecodeDelegate\" != \"$MrSIDDecodeDelegateDefault\" ; then have_mrsid='yes'; fi\nhave_pcl='no'        ; if test \"$PCLDelegate\" != \"$PCLDelegateDefault\"; then have_pcl='yes'; fi\nhave_ppmtoilbm='no'  ; if test \"$ILBMEncodeDelegate\" != \"$ILBMEncodeDelegateDefault\" ; then have_ppmtoilbm='yes'; fi\nhave_xps='no'        ; if test \"$XPSDelegate\" != \"$XPSDelegateDefault\"; then have_xps='yes'; fi\n\n#\n# Test for font directories\n#\ntype_include_files=''\n\n# Apple fonts.\nAC_MSG_CHECKING(for Apple fonts directory)\napple_font_dir=''\nif test \"${with_apple_font_dir}\" != 'default'; then\n  apple_font_dir=\"${with_apple_font_dir}/\"\nelse\n  for font_dir in '/Library/Fonts/'; do\n    if test -f \"${font_dir}Arial.ttf\"; then\n      apple_font_dir=\"${font_dir}\"\n      break 1\n    fi\n  done\nfi\nif test \"${apple_font_dir}x\" != 'x'; then\n  type_include_files=\"${type_include_files} \"'<include file=\"type-apple.xml\" />'\n  AC_MSG_RESULT([$apple_font_dir])\nelse\n  AC_MSG_RESULT([not found!]);\nfi\nAC_SUBST(apple_font_dir)\n\n# Dejavu fonts.\nAC_MSG_CHECKING(for Dejavu fonts directory)\ndejavu_font_dir=''\nif test \"${with_dejavu_font_dir}\" != 'default'; then\n  dejavu_font_dir=\"${with_dejavu_font_dir}/\"\nelse\n  for font_dir in \"${prefix}/share/dejavu/fonts/\" '/usr/share/fonts/dejavu/'; do\n    if test -f \"${font_dir}DejaVuSerif.ttf\"; then\n      dejavu_font_dir=\"${font_dir}\"\n      break 1\n    fi\n  done\nfi\nif test \"${dejavu_font_dir}x\" != 'x'; then\n  type_include_files=\"${type_include_files} \"'<include file=\"type-dejavu.xml\" />'\n  AC_MSG_RESULT([$dejavu_font_dir])\nelse\n  AC_MSG_RESULT([not found!]);\nfi\nAC_SUBST(dejavu_font_dir)\n\n# Ghostscript\nAC_MSG_CHECKING(for Ghostscript fonts directory)\nghostscript_font_dir=''\nif test \"${with_gs_font_dir}\" != 'default'; then\n  ghostscript_font_dir=\"${with_gs_font_dir}/\"\nelse\n  if test \"${native_win32_build}\" = 'yes'; then\n    # Native Windows Build\n    for font_dir in \"c:\\\\Program Files\\\\gs\\\\fonts\\\\\" \"c:\\\\Program Files \\(x86\\)\\\\gs\\\\fonts\\\\\" \"c:\\\\gs\\\\fonts\\\\\"; do\n      if test -f \"${font_dir}a010013l.pfb\"; then\n        ghostscript_font_dir=\"$font_dir\"\n        break 1\n      fi\n    done\n    if test \"${PSDelegate}\" != 'gswin32c'; then\n      ghostscript_font_dir=`echo \"${PSDelegate}\" | sed -e 's:/gs/.*:/gs:;s:^/::;s/./&:/;s:/:\\\\\\\\:g'`\"\\\\fonts\\\\\"\n    fi\n  else\n    # Linux / Mac OS X / Unix Build\n    for font_dir in \"${prefix}/share/ghostscript/fonts/\" '/usr/share/fonts/default/Type1/' '/usr/share/ghostscript/fonts/' '/usr/share/fonts/ghostscript/' '/usr/share/fonts/type1/gsfonts/' '/opt/local/share/ghostscript/fonts/' '/sw/share/ghostscript/fonts/' '/System/Library/Frameworks/Ghostscript.framework/Resources/fonts/'; do\n      if test -f \"${font_dir}a010013l.pfb\"; then\n        ghostscript_font_dir=\"${font_dir}\"\n        break 1\n      fi\n    done\n    if test \"${ghostscript_font_dir}x\" = 'x'; then\n      if test \"$PSDelegate\" != 'gs'; then\n        ghostscript_font_dir=`echo \"$PSDelegate\" | sed -e 's:/bin/gs:/share/ghostscript/fonts:'`\"/\"\n      fi\n    fi\n  fi\nfi\nif test \"${ghostscript_font_dir}x\" != 'x'; then\n  type_include_files=\"${type_include_files} \"'<include file=\"type-ghostscript.xml\" />'\n  AC_MSG_RESULT([$ghostscript_font_dir])\nelse\n  AC_MSG_RESULT([not found!]);\nfi\nAC_SUBST(ghostscript_font_dir)\ncase \"${build_os}\" in\n  mingw* )\n    PSDelegate=`$WinPathScript \"$PSDelegate\" 1`\n    ;;\nesac\n\n# Windows fonts.\nAC_MSG_CHECKING(for Windows fonts directory)\nwindows_font_dir=''\nif test \"${with_windows_font_dir}\" != 'default'; then\n  windows_font_dir=\"${with_windows_font_dir}/\"\nelse\n  for font_dir in '/usr/X11R6/lib/X11/fonts/truetype/' '/usr/X11R7/lib/X11/fonts/truetype/' '/usr/share/fonts/msttcore/'; do\n    if test -f \"${font_dir}arial.ttf\"; then\n      windows_font_dir=\"${font_dir}\"\n      break 1\n    fi\n  done\nfi\nif test \"${windows_font_dir}x\" != 'x'; then\n  type_include_files=\"${type_include_files} \"'<include file=\"type-windows.xml\" />'\n  AC_MSG_RESULT([$windows_font_dir])\nelse\n  AC_MSG_RESULT([not found!]);\nfi\nAC_SUBST(windows_font_dir)\n\nAC_SUBST(type_include_files)\n\n#\n# Handle case where user doesn't want frozen paths\n#\nif test \"$with_frozenpaths\" != 'yes'; then\n  # Re-set delegate definitions to default (no paths)\n  BPGDecodeDelegate=\"$BPGDecodeDelegateDefault\"\n  BPGEncodeDelegate=\"$BPGEncodeDelegateDefault\"\n  BlenderDecodeDelegate=\"$BlenderDecodeDelegateDefault\"\n  BrowseDelegate=\"$BrowseDelegateDefault\"\n  ConvertDelegate=\"$ConvertDelegateDefault\"\n  DisplayDelegate=\"$DisplayDelegateDefault\"\n  DNGDecodeDelegate=\"$DNGDecodeDelegateDefault\"\n  DOCDecodeDelegate=\"$DOCDecodeDelegateDefault\"\n  DVIDecodeDelegate=\"$DVIDecodeDelegateDefault\"\n  EditorDelegate=\"$EditorDelegateDefault\"\n  GVCDecodeDelegate=\"$GVCDecodeDelegateDefault\"\n  HPGLDecodeDelegate=\"$HPGLDecodeDelegateDefault\"\n  HTMLDecodeDelegate=\"$HTMLDecodeDelegateDefault\"\n  ILBMDecodeDelegate=\"$ILBMDecodeDelegateDefault\"\n  ILBMEncodeDelegate=\"$ILBMEncodeDelegateDefault\"\n  JXRDecodeDelegate=\"$JXRDecodeDelegateDefault\"\n  JXREncodeDelegate=\"$JXREncodeDelegateDefault\"\n  LPDelegate=\"$LPDelegateDefault\"\n  LaunchDelegate=\"$LaunchDelegateDefault\"\n  MPEGDecodeDelegate=\"$MPEGDecodeDelegateDefault\"\n  MPEGEncodeDelegate=\"$MPEGEncodeDelegateDefault\"\n  MogrifyDelegate=\"$MogrifyDelegateDefault\"\n  MrSIDDecodeDelegate=\"$MrSIDDecodeDelegateDefault\"\n  PCLDelegate=\"$PCLDelegateDefault\"\n  PSDelegate=\"$PSDelegateDefault\"\n  RSVGDecodeDelegate=\"$RSVGDecodeDelegateDefault\"\n  SVGDecodeDelegate=\"$SVGDecodeDelegateDefault\"\n  ShowImageDelegate=\"$ShowImageDelegateDefault\"\n  UniconvertorDelegate=\"$UniconvertorDelegateDefault\"\n  WebPDecodeDelegate=\"$WebPDecodeDelegateDefault\"\n  WebPEncodeDelegate=\"$WebPEncodeDelegateDefault\"\n  WWWDecodeDelegate=\"$WWWDecodeDelegateDefault\"\n  XPSDelegate=\"$XPSDelegateDefault\"\nfi\n\n# Delegate substitutions\nAC_SUBST(BPGDecodeDelegate)\nAC_SUBST(BPGEncodeDelegate)\nAC_SUBST(BlenderDecodeDelegate)\nAC_SUBST(BrowseDelegate)\nAC_SUBST(ConvertDelegate)\nAC_SUBST(GVCDecodeDelegate)\nAC_SUBST(DVIDecodeDelegate)\nAC_SUBST(EditorDelegate)\nAC_SUBST(HPGLDecodeDelegate)\nAC_SUBST(HTMLDecodeDelegate)\nAC_SUBST(ILBMDecodeDelegate)\nAC_SUBST(ILBMEncodeDelegate)\nAC_SUBST(JXRDecodeDelegate)\nAC_SUBST(JXREncodeDelegate)\nAC_SUBST(LPDelegate)\nAC_SUBST(LaunchDelegate)\nAC_SUBST(MPEGDecodeDelegate)\nAC_SUBST(MPEGEncodeDelegate)\nAC_SUBST(MogrifyDelegate)\nAC_SUBST(MrSIDDecodeDelegate)\nAC_SUBST(PCLDelegate)\nAC_SUBST(PSDelegate)\nAC_SUBST(ShowImageDelegate)\nAC_SUBST(UniconvertorDelegate)\nAC_SUBST(WebPDecodeDelegate)\nAC_SUBST(WebPEncodeDelegate)\nAC_SUBST(WWWDecodeDelegate)\nAC_SUBST(XPSDelegate)\n\n#\n# RPM support.\n#\nRPM=''\nAC_CHECK_PROGS(TAR,gnutar gtar tar)\nAC_CHECK_PROGS(PERL,perl)\nAC_CHECK_PROGS(RPM,rpmbuild rpm)\nAM_MISSING_PROG(ACLOCAL, aclocal, $missing_dir)\nAM_MISSING_PROG(AUTOCONF, autoconf, $missing_dir)\nAM_MISSING_PROG(AUTOMAKE, automake, $missing_dir)\nAM_MISSING_PROG(AUTOHEADER, autoheader, $missing_dir)\nAC_SUBST(RPM)\nAM_CONDITIONAL(RPM_DELEGATE, test \"x$RPM\" != \"x\" )\n\n#\n# 7ZIP support (http://p7zip.sourceforge.net/)\n#\nP7ZIP=''\nAC_CHECK_PROGS(P7ZIP,[7za])\nAC_SUBST(P7ZIP)\nAM_CONDITIONAL(P7ZIP_DELEGATE, test \"x$P7ZIP\" != \"x\" )\n\n#\n# ZIP support (http://www.info-zip.org/Zip.html)\n#\nZIP=''\nAC_CHECK_PROGS(ZIP,[zip])\nAC_SUBST(ZIP)\nAM_CONDITIONAL(ZIP_DELEGATE, test \"x$ZIP\" != \"x\" )\n\n#\n# GhostPCL related configuration.\n#\nPCLColorDevice=ppmraw\nPCLCMYKDevice=pamcmyk32\nPCLMonoDevice=pbmraw\nif test -z \"$PCLVersion\"; then\n    PCLVersion='unknown'\nfi\nif test $have_pcl = 'yes'; then\n    AC_MSG_RESULT([-------------------------------------------------------------])\n    AC_MSG_CHECKING([for PCL])\n    AC_MSG_RESULT([])\n    # PCLColorDevice\n    AC_MSG_CHECKING([for pcl color device])\n    if $PCLDelegate -dBATCH -sDEVICE=$PCLColorDevice -sOutputFile=/dev/null < /dev/null 1>&AS_MESSAGE_LOG_FD 2>&AS_MESSAGE_LOG_FD; then\n        :\n    else\n        PCLColorDevice=ppmraw\n    fi\n    AC_MSG_RESULT([$PCLColorDevice])\n\n    # PCLCMYKDevice\n    AC_MSG_CHECKING([for pcl CMYK device])\n    if $PCLDelegate -dBATCH -sDEVICE=$PCLColorDevice -sOutputFile=/dev/null < /dev/null 1>&AS_MESSAGE_LOG_FD 2>&AS_MESSAGE_LOG_FD; then\n        :\n    else\n        PCLCMYKDevice=$PCLColorDevice\n    fi\n    AC_MSG_RESULT([$PCLCMYKDevice])\n\n    # PCLMonoDevice\n    AC_MSG_CHECKING([for pcl mono device])\n    if $PCLDelegate -dBATCH -sDEVICE=$PCLMonoDevice -sOutputFile=/dev/null < /dev/null 1>&AS_MESSAGE_LOG_FD 2>&AS_MESSAGE_LOG_FD; then\n        :\n    else\n        PCLMonoDevice=$PCLColorDevice\n    fi\n    AC_MSG_RESULT([$PCLMonoDevice])\nfi\n\nAC_SUBST(PCLMonoDevice)\nAC_SUBST(PCLColorDevice)\nAC_SUBST(PCLCMYKDevice)\nAC_SUBST(PCLVersion)\n\n#\n# GhostXPS related configuration.\n#\nXPSColorDevice=ppmraw\nXPSCMYKDevice=bmpsep8\nXPSMonoDevice=pbmraw\nif test -z \"$XPSVersion\"; then\n    XPSVersion='unknown'\nfi\nif test $have_xps = 'yes'; then\n    AC_MSG_RESULT([-------------------------------------------------------------])\n    AC_MSG_CHECKING([for XPS])\n    AC_MSG_RESULT([])\n    # XPSColorDevice\n    AC_MSG_CHECKING([for xps color device])\n    if $XPSDelegate -dBATCH -sDEVICE=$XPSColorDevice -sOutputFile=/dev/null < /dev/null 1>&AS_MESSAGE_LOG_FD 2>&AS_MESSAGE_LOG_FD; then\n        :\n    else\n        XPSColorDevice=ppmraw\n    fi\n    AC_MSG_RESULT([$XPSColorDevice])\n\n    # XPSCMYKDevice\n    AC_MSG_CHECKING([for xps CMYK device])\n    if $XPSDelegate -dBATCH -sDEVICE=$XPSColorDevice -sOutputFile=/dev/null < /dev/null 1>&AS_MESSAGE_LOG_FD 2>&AS_MESSAGE_LOG_FD; then\n        :\n    else\n        XPSCMYKDevice=$XPSColorDevice\n    fi\n    AC_MSG_RESULT([$XPSCMYKDevice])\n\n    # XPSMonoDevice\n    AC_MSG_CHECKING([for xps mono device])\n    if $XPSDelegate -dBATCH -sDEVICE=$XPSMonoDevice -sOutputFile=/dev/null < /dev/null 1>&AS_MESSAGE_LOG_FD 2>&AS_MESSAGE_LOG_FD; then\n        :\n    else\n        XPSMonoDevice=$XPSColorDevice\n    fi\n    AC_MSG_RESULT([$XPSMonoDevice])\nfi\n\nAC_SUBST(XPSMonoDevice)\nAC_SUBST(XPSColorDevice)\nAC_SUBST(XPSCMYKDevice)\nAC_SUBST(XPSVersion)\n\n#\n# Ghostscript related configuration.\n#\nGSAlphaDevice=pngalpha\nGSColorDevice=pnmraw\nGSCMYKDevice=pamcmyk32\nGSMonoDevice=pbmraw\nGSPDFDevice=pdfwrite\nGSPSDevice=ps2write\nGSEPSDevice=eps2write\nGSVersion='unknown'\nif test $have_gs = 'yes'; then\n    AC_MSG_RESULT([-------------------------------------------------------------])\n    AC_MSG_CHECKING([for Ghostscript])\n    AC_MSG_RESULT([])\n    AC_MSG_CHECKING([for Ghostscript version])\n    if GSVersion=`$PSDelegate --version`; then\n        :\n    else\n        GSVersion=`$PSDelegate --help | sed -e '1q' | awk '{ print $3 }'`\n    fi\n    AC_MSG_RESULT([$GSVersion])\n\n    # GSColorDevice\n    AC_MSG_CHECKING([for gs color device])\n    if $PSDelegate -q -dBATCH -sDEVICE=$GSColorDevice -sOutputFile=/dev/null < /dev/null 1>&AS_MESSAGE_LOG_FD 2>&AS_MESSAGE_LOG_FD; then\n        :\n    else\n        GSColorDevice=ppmraw\n    fi\n    AC_MSG_RESULT([$GSColorDevice])\n\n    # GSAlphaDevice\n    AC_MSG_CHECKING([for gs alpha device])\n    if $PSDelegate -q -dBATCH -sDEVICE=$GSAlphaDevice -sOutputFile=/dev/null < /dev/null 1>&AS_MESSAGE_LOG_FD 2>&AS_MESSAGE_LOG_FD; then\n        :\n    else\n        GSAlphaDevice=$GSColorDevice\n    fi\n    AC_MSG_RESULT([$GSAlphaDevice])\n\n    # GSCMYKDevice\n    AC_MSG_CHECKING([for gs CMYK device])\n    if $PSDelegate -q -dBATCH -sDEVICE=$GSCMYKDevice -sOutputFile=/dev/null < /dev/null 1>&AS_MESSAGE_LOG_FD 2>&AS_MESSAGE_LOG_FD; then\n        :\n    else\n        GSCMYKDevice=pam\n    fi\n    AC_MSG_RESULT([$GSCMYKDevice])\n\n    # GSMonoDevice\n    AC_MSG_CHECKING([for gs mono device])\n    if $PSDelegate -q -dBATCH -sDEVICE=$GSMonoDevice -sOutputFile=/dev/null < /dev/null 1>&AS_MESSAGE_LOG_FD 2>&AS_MESSAGE_LOG_FD; then\n        :\n    else\n        GSMonoDevice=$GSColorDevice\n    fi\n    AC_MSG_RESULT([$GSMonoDevice])\n\n    # GSPDFDevice\n    AC_MSG_CHECKING([for gs PDF writing device])\n    if $PSDelegate -q -dBATCH -sDEVICE=$GSPDFDevice -sOutputFile=/dev/null < /dev/null 1>&AS_MESSAGE_LOG_FD 2>&AS_MESSAGE_LOG_FD; then\n        :\n    else\n        GSPDFDevice=nodevice\n    fi\n    AC_MSG_RESULT([$GSPDFDevice])\n\n    # GSPSDevice\n    AC_MSG_CHECKING([for gs PS writing device])\n    if $PSDelegate -q -dBATCH -sDEVICE=$GSPSDevice -sOutputFile=/dev/null < /dev/null 1>&AS_MESSAGE_LOG_FD 2>&AS_MESSAGE_LOG_FD; then\n        :\n    else\n        GSPSDevice=pswrite\n    fi\n    AC_MSG_RESULT([$GSPSDevice])\n\n    # GSEPSDevice\n    AC_MSG_CHECKING([for gs EPS writing device])\n    if $PSDelegate -q -dBATCH -sDEVICE=$GSEPSDevice -sOutputFile=/dev/null < /dev/null 1>&AS_MESSAGE_LOG_FD 2>&AS_MESSAGE_LOG_FD; then\n        :\n    else\n        GSEPSDevice=epswrite\n    fi\n    AC_MSG_RESULT([$GSEPSDevice])\nfi\n\nAC_SUBST(GSAlphaDevice)\nAC_SUBST(GSCMYKDevice)\nAC_SUBST(GSColorDevice)\nAC_SUBST(GSEPSDevice)\nAC_SUBST(GSMonoDevice)\nAC_SUBST(GSPDFDevice)\nAC_SUBST(GSPSDevice)\nAC_SUBST(GSVersion)\n\n#\n# PerlMagick-related configuration\n#\n\n# Look for PERL if PerlMagick requested\n# If name/path of desired PERL interpreter is specified, look for that one first\nhave_perl='no'\nif test \"$with_perl\" != 'no'; then\n    AC_MSG_RESULT([-------------------------------------------------------------])\n    AC_MSG_CHECKING([for Perl])\n    AC_MSG_RESULT([])\n    if test \"$with_perl\" != 'yes'; then\n        AC_CACHE_CHECK(for perl,ac_cv_path_PERL,ac_cv_path_PERL=\"$with_perl\");\n        PERL=$ac_cv_path_PERL\n        AC_SUBST(PERL)dnl\n        have_perl=\"$ac_cv_path_PERL\"\n    else\n        AC_PATH_PROGS(PERL,perl perl5,)dnl\n        if test \"$ac_cv_path_PERL\"; then\n            have_perl=\"$ac_cv_path_PERL\"\n        fi\n    fi\nfi\n\nif test \"$with_perl\" != 'yes' ; then\n    DISTCHECK_CONFIG_FLAGS=\"${DISTCHECK_CONFIG_FLAGS} --with-perl=$with_perl \"\nfi\n\nPERL_SUPPORTS_DESTDIR='no'\n\nwith_perl_static='no'\nwith_perl_dynamic='no'\nif test \"$have_perl\" != 'no'; then\n    if test \"$with_perl\" != 'no' && test \"$libtool_build_shared_libs\" = 'no'; then\n        with_perl_static='yes'\n    fi\n    if test \"$with_perl\" != 'no' && test \"$libtool_build_shared_libs\" = 'yes'; then\n        with_perl_dynamic='yes'\n    fi\n    # Is PERL's MakeMaker new enough to support DESTDIR?\n    AX_PROG_PERL_VERSION(5.8.1,[PERL_SUPPORTS_DESTDIR='yes'],[PERL_SUPPORTS_DESTDIR='no'])\nfi\nAM_CONDITIONAL(WITH_PERL, test \"$have_perl\" != 'no')\nAM_CONDITIONAL(WITH_PERL_STATIC, test $with_perl_static = 'yes')\nAM_CONDITIONAL(WITH_PERL_DYNAMIC, test $with_perl_dynamic = 'yes')\nAC_SUBST(PERL_SUPPORTS_DESTDIR)\n\n# Determine path to pick up MagickCore library from for use with building PerlMagick\nMAGICKCORE_PATH=\"${LIB_DIR}\"\nif test $with_perl_static = 'yes'; then\n    # Find out where libtool hides its uninstalled libraries (as libtool_objdir)\n    libtool_objdir=$objdir\n\n    # Linker search path to library, followed by -lMagickCore\n    MAGICKCORE_PATH=\"${builddir}/MagickCore/${libtool_objdir}\"\nfi\nAC_SUBST(MAGICKCORE_PATH)\n\n# Create a simple string containing format names for all delegate libraries.\nMAGICK_DELEGATES=''\nif test \"$have_autotrace\"  = 'yes' ; then\n   MAGICK_DELEGATES=\"$MAGICK_DELEGATES autotrace\"\nfi\nif test \"$have_bzlib\"  = 'yes' ; then\n   MAGICK_DELEGATES=\"$MAGICK_DELEGATES bzlib\"\nfi\nif test \"$have_dps\"    = 'yes' ; then\n   MAGICK_DELEGATES=\"$MAGICK_DELEGATES dps\"\nfi\nif test \"$have_djvu\"    = 'yes' ; then\n   MAGICK_DELEGATES=\"$MAGICK_DELEGATES djvu\"\nfi\nif test \"$have_avconv\"   = 'yes' ; then\n   MAGICK_DELEGATES=\"$MAGICK_DELEGATES mpeg\"\nfi\nif test \"$have_fftw\"    = 'yes' ; then\n   MAGICK_DELEGATES=\"$MAGICK_DELEGATES fftw\"\nfi\nif test \"$have_flif\"    = 'yes' ; then\n   MAGICK_DELEGATES=\"$MAGICK_DELEGATES flif\"\nfi\nif test \"$have_fpx\"    = 'yes' ; then\n   MAGICK_DELEGATES=\"$MAGICK_DELEGATES fpx\"\nfi\nif test \"$have_fontconfig\"    = 'yes' ; then\n   MAGICK_DELEGATES=\"$MAGICK_DELEGATES fontconfig\"\nfi\nif test \"$have_freetype\"    = 'yes' ; then\n   MAGICK_DELEGATES=\"$MAGICK_DELEGATES freetype\"\nfi\nif test \"$have_gslib\"    = 'yes' ; then\n   MAGICK_DELEGATES=\"$MAGICK_DELEGATES gslib\"\nfi\nif test \"$have_jbig\"    = 'yes' ; then\n   MAGICK_DELEGATES=\"$MAGICK_DELEGATES jbig\"\nfi\nif test \"$have_png$have_jpeg\" = 'yesyes' ; then\n   MAGICK_DELEGATES=\"$MAGICK_DELEGATES jng\"\nfi\nif test \"$have_jpeg\"   = 'yes' ; then\n   MAGICK_DELEGATES=\"$MAGICK_DELEGATES jpeg\"\nfi\nif test \"$have_lcms\" = 'yes' || test \"$have_lcms2\" = 'yes' ; then\n   MAGICK_DELEGATES=\"$MAGICK_DELEGATES lcms\"\nfi\nif test \"$have_lqr\"    = 'yes' ; then\n   MAGICK_DELEGATES=\"$MAGICK_DELEGATES lqr\"\nfi\nif test \"$have_lzma\"    = 'yes' ; then\n   MAGICK_DELEGATES=\"$MAGICK_DELEGATES lzma\"\nfi\nif test \"$have_openexr\"    = 'yes' ; then\n   MAGICK_DELEGATES=\"$MAGICK_DELEGATES openexr\"\nfi\nif test \"$have_openjp2\"    = 'yes' ; then\n   MAGICK_DELEGATES=\"$MAGICK_DELEGATES openjp2\"\nfi\nif test \"$have_pango\"    = 'yes' ; then\n   MAGICK_DELEGATES=\"$MAGICK_DELEGATES pango\"\nfi\nif test \"$have_png\"    = 'yes' ; then\n   MAGICK_DELEGATES=\"$MAGICK_DELEGATES png\"\nfi\nhave_ps='no'\nif test \"$have_dps\"    = 'yes' || \\\n   test \"$have_gs\" = 'yes' || \\\n   test \"${native_win32_build}\" = 'yes' ; then\n   have_ps='yes'\nfi\nif test \"$have_ps\"     = 'yes' ; then\n   MAGICK_DELEGATES=\"$MAGICK_DELEGATES ps\"\nfi\nif test \"$have_raqm\"    = 'yes' ; then\n   MAGICK_DELEGATES=\"$MAGICK_DELEGATES raqm\"\nfi\nif test \"$have_ra_ppm\" = 'yes' ; then\n   MAGICK_DELEGATES=\"$MAGICK_DELEGATES rad\"\nfi\nif test \"$have_rsvg\"   = 'yes' ; then\n   MAGICK_DELEGATES=\"$MAGICK_DELEGATES rsvg\"\nfi\nif test \"$have_tiff\"   = 'yes' ; then\n   MAGICK_DELEGATES=\"$MAGICK_DELEGATES tiff\"\nfi\nif test \"$have_ttf\"    = 'yes' ; then\n   MAGICK_DELEGATES=\"$MAGICK_DELEGATES ttf\"\nfi\nif test \"$have_webp\"    = 'yes' ; then\n   MAGICK_DELEGATES=\"$MAGICK_DELEGATES webp\"\nfi\nif test \"$have_wmf\"    = 'yes' ; then\n   MAGICK_DELEGATES=\"$MAGICK_DELEGATES wmf\"\nfi\nif test \"$have_x\"      = 'yes' ; then\n   MAGICK_DELEGATES=\"$MAGICK_DELEGATES x\"\nfi\nif test \"$have_xml\"      = 'yes' ; then\n   MAGICK_DELEGATES=\"$MAGICK_DELEGATES xml\"\nfi\nif test \"$have_zlib\"   = 'yes' ; then\n   MAGICK_DELEGATES=\"$MAGICK_DELEGATES zlib\"\nfi\n\n# Remove extraneous spaces from output variables (asthetic)\nMAGICK_DELEGATES=`echo $MAGICK_DELEGATES | sed -e 's/  */ /g'`\nMAGICK_FEATURES=`echo $MAGICK_FEATURES | sed -e 's/  */ /g'`\nAC_SUBST(MAGICK_DELEGATES)\nAC_SUBST(MAGICK_FEATURES)\n\n#\n# Handle special compiler flags\n#\n\n# Add '-p' if prof source profiling support enabled\nif test \"$enable_prof\" = 'yes'; then\n    CFLAGS=\"-p $CFLAGS\"\n    CXXFLAGS=\"-p $CXXFLAGS\"\n    LDFLAGS=\"-p $LDFLAGS\"\nfi\n\n# Add '-pg' if gprof source profiling support enabled\nif test \"$enable_gprof\" = 'yes'; then\n    CFLAGS=\"-pg $CFLAGS\"\n    CXXFLAGS=\"-pg $CXXFLAGS\"\n    LDFLAGS=\"-pg $LDFLAGS\"\nfi\n\n# Add '-ftest-coverage -fprofile-arcs' if gcov source profiling support enabled\n# This is a gcc-specific feature\nif test \"$enable_gcov\" = 'yes'; then\n    AC_CHECK_LIB(gcov,_gcov_init)\n    AC_CHECK_LIB(gcov,__gcov_init)\n    case \"$target_os\" in\n        darwin*)\n            OSX_GCOV_LDFLAG=\"-Wl,-single_module\"\n        ;;\n        *)\n            OSX_GCOV_LDFLAG=\"\"\n        ;;\n    esac\n    AC_SUBST(OSX_GCOV_LDFLAG)\n    CFLAGS=\"-ftest-coverage -fprofile-arcs  $CFLAGS\"\n    CXXFLAGS=\"-ftest-coverage -fprofile-arcs  $CXXFLAGS\"\n    LDFLAGS=\"-ftest-coverage -fprofile-arcs $LDFLAGS\"\nfi\n\n#\n# Build library dependency list for libMagickCore\n#\n\nif test \"$build_modules\" != 'no'; then\n    MAGICK_DEP_LIBS=\"$USER_LIBS $LCMS_LIBS $FREETYPE_LIBS $RAQM_LIBS $LQR_LIBS $FFTW_LIBS $FLIF_LIBS $FONTCONFIG_LIBS $XEXT_LIBS $IPC_LIBS $X11_LIBS $XT_LIBS $LZMA_LIBS $BZLIB_LIBS $ZLIB_LIBS $LTDL_LIBS $GDI32_LIBS $MATH_LIBS $GOMP_LIBS $CL_LIBS $UMEM_LIBS $JEMALLOC_LIBS $THREAD_LIBS\"\nelse\n    MAGICK_DEP_LIBS=\"$USER_LIBS $JBIG_LIBS $LCMS_LIBS $TIFF_LIBS $FREETYPE_LIBS $RAQM_LIBS $JPEG_LIBS $GS_LIBS $LQR_LIBS $PNG_LIBS $AUTOTRACE_LIBS $DJVU_LIBS $FFTW_LIBS $FLIF_LIBS $FPX_LIBS $FONTCONFIG_LIBS $WEBP_LIBS $WMF_LIBS $DPS_LIBS $XEXT_LIBS $XT_LIBS $IPC_LIBS $X11_LIBS $LZMA_LIBS $BZLIB_LIBS $OPENEXR_LIBS $LIBOPENJP2_LIBS $PANGO_LIBS $RSVG_LIBS $XML_LIBS $GVC_LIBS $ZLIB_LIBS $GDI32_LIBS $MATH_LIBS $GOMP_LIBS $CL_LIBS $UMEM_LIBS $JEMALLOC_LIBS $THREAD_LIBS\"\nfi\nAC_SUBST(MAGICK_DEP_LIBS)\n\n# Pass only user-provided LIBS as \"global\" libraries\nLIBS=$USER_LIBS\n\n#AC_SUBST(CPPFLAGS)\nAC_SUBST(X_CFLAGS)\n#AC_SUBST(LDFLAGS)\n#AC_SUBST(X_PRE_LIBS)\n#AC_SUBST(X_LIBS)\n#AC_SUBST(X_EXTRA_LIBS)\n\nMAGICK_CFLAGS=$CFLAGS\nMAGICK_CXXFLAGS=\"$CXXFLAGS\"\nMAGICK_CPPFLAGS=`echo $MAGICK_CPPFLAGS | sed -e 's/  */ /g'`\nMAGICK_PCFLAGS=`echo $MAGICK_PCFLAGS | sed -e 's/  */ /g'`\nMAGICK_LDFLAGS=\"-L$LIB_DIR $LDFLAGS\"\nMAGICK_LIBS=\"$MAGICK_DEP_LIBS\"\n\nAC_SUBST(MAGICK_CFLAGS)\nAC_SUBST(MAGICK_CXXFLAGS)\nAC_SUBST(MAGICK_CPPFLAGS)\nAC_SUBST(MAGICK_PCFLAGS)\nAC_SUBST(MAGICK_LDFLAGS)\nAC_SUBST(MAGICK_LIBS)\n\n# Set configured scripts to executable.\nAC_CONFIG_COMMANDS([default],[],[])\nAC_CONFIG_COMMANDS([magick.sh.in],[chmod +x magick.sh])\nAC_CONFIG_COMMANDS([MagickCore-config.in],[chmod +x MagickCore/MagickCore-config])\nAC_CONFIG_COMMANDS([MagickWand-config.in],[chmod +x MagickWand/MagickWand-config])\nAC_CONFIG_COMMANDS([Magick++-config.in],[chmod +x Magick++/bin/Magick++-config])\nAC_CONFIG_COMMANDS([PerlMagick/check.sh.in],[chmod +x PerlMagick/check.sh])\n\nAC_MSG_RESULT([-------------------------------------------------------------])\nAC_MSG_RESULT([Update ImageMagick configuration])\n\nrm -f magick-version\n\nresult_dejavu_font_dir='none'\nif test \"${dejavu_font_dir}x\" != 'x'; then\n    result_dejavu_font_dir=$dejavu_font_dir\nfi\n\nresult_ghostscript_font_dir='none'\nif test \"${ghostscript_font_dir}x\" != 'x'; then\n    result_ghostscript_font_dir=$ghostscript_font_dir\nfi\n\nresult_windows_font_dir='none'\nif test \"${windows_font_dir}x\" != 'x'; then\n    result_windows_font_dir=${windows_font_dir}\nfi\n\n# ==============================================================================\n# Generate build environment\n# ==============================================================================\nAC_CONFIG_FILES([\\\n    common.shi \\\n    config/configure.xml \\\n    config/delegates.xml \\\n    config/ImageMagick.rdf \\\n    config/MagickCore.dox \\\n    config/MagickWand.dox \\\n    config/Magick++.dox \\\n    config/type-apple.xml \\\n    config/type-dejavu.xml \\\n    config/type-ghostscript.xml \\\n    config/type-windows.xml \\\n    config/type.xml \\\n    ImageMagick.spec \\\n    Magick++/bin/Magick++-config \\\n    MagickCore/ImageMagick.pc \\\n    Magick++/lib/Magick++.pc \\\n    MagickCore/MagickCore-config \\\n    MagickCore/MagickCore.pc \\\n    MagickCore/version.h \\\n    Makefile \\\n    magick.sh \\\n    PerlMagick/check.sh \\\n    PerlMagick/default/Magick.pm \\\n    PerlMagick/Makefile.PL \\\n    PerlMagick/default/Makefile.PL \\\n    PerlMagick/quantum/Makefile.PL \\\n    PerlMagick/quantum/quantum.pm \\\n    PerlMagick/quantum/quantum.xs \\\n    PerlMagick/quantum/typemap \\\n    utilities/animate.1 \\\n    utilities/compare.1 \\\n    utilities/composite.1 \\\n    utilities/conjure.1 \\\n    utilities/convert.1 \\\n    utilities/display.1 \\\n    utilities/identify.1 \\\n    utilities/ImageMagick.1 \\\n    utilities/import.1 \\\n    utilities/magick.1 \\\n    utilities/magick-script.1 \\\n    utilities/mogrify.1 \\\n    utilities/montage.1 \\\n    utilities/stream.1 \\\n    MagickWand/MagickWand-config \\\n    MagickWand/MagickWand.pc ])\nAC_OUTPUT\n\n# ==============================================================================\n# ImageMagick Configuration\n# ==============================================================================\nAC_MSG_NOTICE([\n==============================================================================\nImageMagick is configured as follows. Please verify that this configuration\nmatches your expectations.\n\n  Host system type: $host\n  Build system type: $build\n\n                 Option                        Value\n  ------------------------------------------------------------------------------\n  Shared libraries  --enable-shared=$enable_shared\t\t$libtool_build_shared_libs\n  Static libraries  --enable-static=$enable_static\t\t$libtool_build_static_libs\n  Module support    --with-modules=$build_modules\t\t$build_modules\n  GNU ld            --with-gnu-ld=$with_gnu_ld\t\t$lt_cv_prog_gnu_ld\n  Quantum depth     --with-quantum-depth=$with_quantum_depth\t$with_quantum_depth\n  High Dynamic Range Imagery\n                    --enable-hdri=$enable_hdri\t\t$enable_hdri\n\n  Install documentation:\t\t\t$wantdocs\n\n  Delegate Library Configuration:\n  BZLIB             --with-bzlib=$with_bzlib\t\t$have_bzlib\n  Autotrace         --with-autotrace=$with_autotrace\t\t$have_autotrace\n  DJVU              --with-djvu=$with_djvu\t\t$have_djvu\n  DPS               --with-dps=$with_dps\t\t$have_dps\n  FFTW              --with-fftw=$with_fftw\t\t$have_fftw\n  FLIF              --with-flif=$with_flif\t\t$have_flif\n  FlashPIX          --with-fpx=$with_fpx\t\t$have_fpx\n  FontConfig        --with-fontconfig=$with_fontconfig\t$have_fontconfig\n  FreeType          --with-freetype=$with_freetype\t\t$have_freetype\n  Ghostscript lib   --with-gslib=$with_gslib\t\t$have_gslib\n  Graphviz          --with-gvc=$with_gvc\t\t$have_gvc\n  JBIG              --with-jbig=$with_jbig\t\t$have_jbig\n  JPEG v1           --with-jpeg=$with_jpeg\t\t$have_jpeg\n  LCMS              --with-lcms=$with_lcms\t\t$have_lcms\n  LQR               --with-lqr=$with_lqr\t\t$have_lqr\n  LTDL              --with-ltdl=$with_ltdl\t\t$have_ltdl\n  LZMA              --with-lzma=$with_lzma\t\t$have_lzma\n  Magick++          --with-magick-plus-plus=$with_magick_plus_plus\t$have_magick_plus_plus\n  OpenEXR           --with-openexr=$with_openexr\t\t$have_openexr\n  OpenJP2           --with-openjp2=$with_openjp2\t\t$have_openjp2\n  PANGO             --with-pango=$with_pango\t\t$have_pango\n  PERL              --with-perl=$with_perl\t\t$have_perl\n  PNG               --with-png=$with_png\t\t$have_png\n  RAQM              --with-raqm=$with_raqm\t\t$have_raqm\n  RSVG              --with-rsvg=$with_rsvg\t\t$have_rsvg\n  TIFF              --with-tiff=$with_tiff\t\t$have_tiff\n  WEBP              --with-webp=$with_webp\t\t$have_webp\n  WMF               --with-wmf=$with_wmf\t\t$have_wmf\n  X11               --with-x=$with_x\t\t\t$have_x\n  XML               --with-xml=$with_xml\t\t$have_xml\n  ZLIB              --with-zlib=$with_zlib\t\t$have_zlib\n\n  Delegate Program Configuration:\n  GhostPCL          None\t\t\t\t$PCLDelegate ($PCLVersion)\n  GhostXPS          None\t\t\t\t$XPSDelegate ($XPSVersion)\n  Ghostscript       None\t\t\t\t$PSDelegate ($GSVersion)\n\n  Font Configuration:\n  Apple fonts       --with-apple-font-dir=$with_apple_font_dir\t$result_apple_font_dir\n  Dejavu fonts      --with-dejavu-font-dir=$with_dejavu_font_dir\t$result_dejavu_font_dir\n  Ghostscript fonts --with-gs-font-dir=$with_gs_font_dir\t$result_ghostscript_font_dir\n  Windows fonts     --with-windows-font-dir=$with_windows_font_dir\t$result_windows_font_dir\n\n  X11 Configuration:\n        X_CFLAGS        = $X_CFLAGS\n        X_PRE_LIBS      = $X_PRE_LIBS\n        X_LIBS          = $X_LIBS\n        X_EXTRA_LIBS    = $X_EXTRA_LIBS\n\n  Options used to compile and link:\n    PREFIX          = $PREFIX_DIR\n    EXEC-PREFIX     = $EXEC_PREFIX_DIR\n    VERSION         = $PACKAGE_VERSION\n    CC              = $CC\n    CFLAGS          = $CFLAGS\n    CPPFLAGS        = $CPPFLAGS\n    PCFLAGS         = $PCFLAGS\n    DEFS            = $DEFS\n    LDFLAGS         = $LDFLAGS\n    LIBS            = $LIBS\n    CXX             = $CXX\n    CXXFLAGS        = $CXXFLAGS\n    FEATURES        = $MAGICK_FEATURES\n    DELEGATES       = $MAGICK_DELEGATES\n==============================================================================\n])\n",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/config/ltmain.sh": "#! /bin/sh\n## DO NOT EDIT - This file generated from ./build-aux/ltmain.in\n##               by inline-source v2014-01-03.01\n\n# libtool (GNU libtool) 2.4.6\n# Provide generalized library-building support services.\n# Written by Gordon Matzigkeit <gord@gnu.ai.mit.edu>, 1996\n\n# Copyright (C) 1996-2015 Free Software Foundation, Inc.\n# This is free software; see the source for copying conditions.  There is NO\n# warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# GNU Libtool is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2 of the License, or\n# (at your option) any later version.\n#\n# As a special exception to the GNU General Public License,\n# if you distribute this file as part of a program or library that\n# is built using GNU Libtool, you may include this file under the\n# same distribution terms that you use for the rest of that program.\n#\n# GNU Libtool is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n# General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n\nPROGRAM=libtool\nPACKAGE=libtool\nVERSION=2.4.6\npackage_revision=2.4.6\n\n\n## ------ ##\n## Usage. ##\n## ------ ##\n\n# Run './libtool --help' for help with using this script from the\n# command line.\n\n\n## ------------------------------- ##\n## User overridable command paths. ##\n## ------------------------------- ##\n\n# After configure completes, it has a better idea of some of the\n# shell tools we need than the defaults used by the functions shared\n# with bootstrap, so set those here where they can still be over-\n# ridden by the user, but otherwise take precedence.\n\n: ${AUTOCONF=\"autoconf\"}\n: ${AUTOMAKE=\"automake\"}\n\n\n## -------------------------- ##\n## Source external libraries. ##\n## -------------------------- ##\n\n# Much of our low-level functionality needs to be sourced from external\n# libraries, which are installed to $pkgauxdir.\n\n# Set a version string for this script.\nscriptversion=2015-01-20.17; # UTC\n\n# General shell script boiler plate, and helper functions.\n# Written by Gary V. Vaughan, 2004\n\n# Copyright (C) 2004-2015 Free Software Foundation, Inc.\n# This is free software; see the source for copying conditions.  There is NO\n# warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# This program is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 3 of the License, or\n# (at your option) any later version.\n\n# As a special exception to the GNU General Public License, if you distribute\n# this file as part of a program or library that is built using GNU Libtool,\n# you may include this file under the same distribution terms that you use\n# for the rest of that program.\n\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNES FOR A PARTICULAR PURPOSE. See the GNU\n# General Public License for more details.\n\n# You should have received a copy of the GNU General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n\n# Please report bugs or propose patches to gary@gnu.org.\n\n\n## ------ ##\n## Usage. ##\n## ------ ##\n\n# Evaluate this file near the top of your script to gain access to\n# the functions and variables defined here:\n#\n#   . `echo \"$0\" | ${SED-sed} 's|[^/]*$||'`/build-aux/funclib.sh\n#\n# If you need to override any of the default environment variable\n# settings, do that before evaluating this file.\n\n\n## -------------------- ##\n## Shell normalisation. ##\n## -------------------- ##\n\n# Some shells need a little help to be as Bourne compatible as possible.\n# Before doing anything else, make sure all that help has been provided!\n\nDUALCASE=1; export DUALCASE # for MKS sh\nif test -n \"${ZSH_VERSION+set}\" && (emulate sh) >/dev/null 2>&1; then :\n  emulate sh\n  NULLCMD=:\n  # Pre-4.2 versions of Zsh do word splitting on ${1+\"$@\"}, which\n  # is contrary to our usage.  Disable this feature.\n  alias -g '${1+\"$@\"}'='\"$@\"'\n  setopt NO_GLOB_SUBST\nelse\n  case `(set -o) 2>/dev/null` in *posix*) set -o posix ;; esac\nfi\n\n# NLS nuisances: We save the old values in case they are required later.\n_G_user_locale=\n_G_safe_locale=\nfor _G_var in LANG LANGUAGE LC_ALL LC_CTYPE LC_COLLATE LC_MESSAGES\ndo\n  eval \"if test set = \\\"\\${$_G_var+set}\\\"; then\n          save_$_G_var=\\$$_G_var\n          $_G_var=C\n\t  export $_G_var\n\t  _G_user_locale=\\\"$_G_var=\\\\\\$save_\\$_G_var; \\$_G_user_locale\\\"\n\t  _G_safe_locale=\\\"$_G_var=C; \\$_G_safe_locale\\\"\n\tfi\"\ndone\n\n# CDPATH.\n(unset CDPATH) >/dev/null 2>&1 && unset CDPATH\n\n# Make sure IFS has a sensible default\nsp=' '\nnl='\n'\nIFS=\"$sp\t$nl\"\n\n# There are apparently some retarded systems that use ';' as a PATH separator!\nif test \"${PATH_SEPARATOR+set}\" != set; then\n  PATH_SEPARATOR=:\n  (PATH='/bin;/bin'; FPATH=$PATH; sh -c :) >/dev/null 2>&1 && {\n    (PATH='/bin:/bin'; FPATH=$PATH; sh -c :) >/dev/null 2>&1 ||\n      PATH_SEPARATOR=';'\n  }\nfi\n\n\n\n## ------------------------- ##\n## Locate command utilities. ##\n## ------------------------- ##\n\n\n# func_executable_p FILE\n# ----------------------\n# Check that FILE is an executable regular file.\nfunc_executable_p ()\n{\n    test -f \"$1\" && test -x \"$1\"\n}\n\n\n# func_path_progs PROGS_LIST CHECK_FUNC [PATH]\n# --------------------------------------------\n# Search for either a program that responds to --version with output\n# containing \"GNU\", or else returned by CHECK_FUNC otherwise, by\n# trying all the directories in PATH with each of the elements of\n# PROGS_LIST.\n#\n# CHECK_FUNC should accept the path to a candidate program, and\n# set $func_check_prog_result if it truncates its output less than\n# $_G_path_prog_max characters.\nfunc_path_progs ()\n{\n    _G_progs_list=$1\n    _G_check_func=$2\n    _G_PATH=${3-\"$PATH\"}\n\n    _G_path_prog_max=0\n    _G_path_prog_found=false\n    _G_save_IFS=$IFS; IFS=${PATH_SEPARATOR-:}\n    for _G_dir in $_G_PATH; do\n      IFS=$_G_save_IFS\n      test -z \"$_G_dir\" && _G_dir=.\n      for _G_prog_name in $_G_progs_list; do\n        for _exeext in '' .EXE; do\n          _G_path_prog=$_G_dir/$_G_prog_name$_exeext\n          func_executable_p \"$_G_path_prog\" || continue\n          case `\"$_G_path_prog\" --version 2>&1` in\n            *GNU*) func_path_progs_result=$_G_path_prog _G_path_prog_found=: ;;\n            *)     $_G_check_func $_G_path_prog\n\t\t   func_path_progs_result=$func_check_prog_result\n\t\t   ;;\n          esac\n          $_G_path_prog_found && break 3\n        done\n      done\n    done\n    IFS=$_G_save_IFS\n    test -z \"$func_path_progs_result\" && {\n      echo \"no acceptable sed could be found in \\$PATH\" >&2\n      exit 1\n    }\n}\n\n\n# We want to be able to use the functions in this file before configure\n# has figured out where the best binaries are kept, which means we have\n# to search for them ourselves - except when the results are already set\n# where we skip the searches.\n\n# Unless the user overrides by setting SED, search the path for either GNU\n# sed, or the sed that truncates its output the least.\ntest -z \"$SED\" && {\n  _G_sed_script=s/aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb/\n  for _G_i in 1 2 3 4 5 6 7; do\n    _G_sed_script=$_G_sed_script$nl$_G_sed_script\n  done\n  echo \"$_G_sed_script\" 2>/dev/null | sed 99q >conftest.sed\n  _G_sed_script=\n\n  func_check_prog_sed ()\n  {\n    _G_path_prog=$1\n\n    _G_count=0\n    printf 0123456789 >conftest.in\n    while :\n    do\n      cat conftest.in conftest.in >conftest.tmp\n      mv conftest.tmp conftest.in\n      cp conftest.in conftest.nl\n      echo '' >> conftest.nl\n      \"$_G_path_prog\" -f conftest.sed <conftest.nl >conftest.out 2>/dev/null || break\n      diff conftest.out conftest.nl >/dev/null 2>&1 || break\n      _G_count=`expr $_G_count + 1`\n      if test \"$_G_count\" -gt \"$_G_path_prog_max\"; then\n        # Best one so far, save it but keep looking for a better one\n        func_check_prog_result=$_G_path_prog\n        _G_path_prog_max=$_G_count\n      fi\n      # 10*(2^10) chars as input seems more than enough\n      test 10 -lt \"$_G_count\" && break\n    done\n    rm -f conftest.in conftest.tmp conftest.nl conftest.out\n  }\n\n  func_path_progs \"sed gsed\" func_check_prog_sed $PATH:/usr/xpg4/bin\n  rm -f conftest.sed\n  SED=$func_path_progs_result\n}\n\n\n# Unless the user overrides by setting GREP, search the path for either GNU\n# grep, or the grep that truncates its output the least.\ntest -z \"$GREP\" && {\n  func_check_prog_grep ()\n  {\n    _G_path_prog=$1\n\n    _G_count=0\n    _G_path_prog_max=0\n    printf 0123456789 >conftest.in\n    while :\n    do\n      cat conftest.in conftest.in >conftest.tmp\n      mv conftest.tmp conftest.in\n      cp conftest.in conftest.nl\n      echo 'GREP' >> conftest.nl\n      \"$_G_path_prog\" -e 'GREP$' -e '-(cannot match)-' <conftest.nl >conftest.out 2>/dev/null || break\n      diff conftest.out conftest.nl >/dev/null 2>&1 || break\n      _G_count=`expr $_G_count + 1`\n      if test \"$_G_count\" -gt \"$_G_path_prog_max\"; then\n        # Best one so far, save it but keep looking for a better one\n        func_check_prog_result=$_G_path_prog\n        _G_path_prog_max=$_G_count\n      fi\n      # 10*(2^10) chars as input seems more than enough\n      test 10 -lt \"$_G_count\" && break\n    done\n    rm -f conftest.in conftest.tmp conftest.nl conftest.out\n  }\n\n  func_path_progs \"grep ggrep\" func_check_prog_grep $PATH:/usr/xpg4/bin\n  GREP=$func_path_progs_result\n}\n\n\n## ------------------------------- ##\n## User overridable command paths. ##\n## ------------------------------- ##\n\n# All uppercase variable names are used for environment variables.  These\n# variables can be overridden by the user before calling a script that\n# uses them if a suitable command of that name is not already available\n# in the command search PATH.\n\n: ${CP=\"cp -f\"}\n: ${ECHO=\"printf %s\\n\"}\n: ${EGREP=\"$GREP -E\"}\n: ${FGREP=\"$GREP -F\"}\n: ${LN_S=\"ln -s\"}\n: ${MAKE=\"make\"}\n: ${MKDIR=\"mkdir\"}\n: ${MV=\"mv -f\"}\n: ${RM=\"rm -f\"}\n: ${SHELL=\"${CONFIG_SHELL-/bin/sh}\"}\n\n\n## -------------------- ##\n## Useful sed snippets. ##\n## -------------------- ##\n\nsed_dirname='s|/[^/]*$||'\nsed_basename='s|^.*/||'\n\n# Sed substitution that helps us do robust quoting.  It backslashifies\n# metacharacters that are still active within double-quoted strings.\nsed_quote_subst='s|\\([`\"$\\\\]\\)|\\\\\\1|g'\n\n# Same as above, but do not quote variable references.\nsed_double_quote_subst='s/\\([\"`\\\\]\\)/\\\\\\1/g'\n\n# Sed substitution that turns a string into a regex matching for the\n# string literally.\nsed_make_literal_regex='s|[].[^$\\\\*\\/]|\\\\&|g'\n\n# Sed substitution that converts a w32 file name or path\n# that contains forward slashes, into one that contains\n# (escaped) backslashes.  A very naive implementation.\nsed_naive_backslashify='s|\\\\\\\\*|\\\\|g;s|/|\\\\|g;s|\\\\|\\\\\\\\|g'\n\n# Re-'\\' parameter expansions in output of sed_double_quote_subst that\n# were '\\'-ed in input to the same.  If an odd number of '\\' preceded a\n# '$' in input to sed_double_quote_subst, that '$' was protected from\n# expansion.  Since each input '\\' is now two '\\'s, look for any number\n# of runs of four '\\'s followed by two '\\'s and then a '$'.  '\\' that '$'.\n_G_bs='\\\\'\n_G_bs2='\\\\\\\\'\n_G_bs4='\\\\\\\\\\\\\\\\'\n_G_dollar='\\$'\nsed_double_backslash=\"\\\n  s/$_G_bs4/&\\\\\n/g\n  s/^$_G_bs2$_G_dollar/$_G_bs&/\n  s/\\\\([^$_G_bs]\\\\)$_G_bs2$_G_dollar/\\\\1$_G_bs2$_G_bs$_G_dollar/g\n  s/\\n//g\"\n\n\n## ----------------- ##\n## Global variables. ##\n## ----------------- ##\n\n# Except for the global variables explicitly listed below, the following\n# functions in the '^func_' namespace, and the '^require_' namespace\n# variables initialised in the 'Resource management' section, sourcing\n# this file will not pollute your global namespace with anything\n# else. There's no portable way to scope variables in Bourne shell\n# though, so actually running these functions will sometimes place\n# results into a variable named after the function, and often use\n# temporary variables in the '^_G_' namespace. If you are careful to\n# avoid using those namespaces casually in your sourcing script, things\n# should continue to work as you expect. And, of course, you can freely\n# overwrite any of the functions or variables defined here before\n# calling anything to customize them.\n\nEXIT_SUCCESS=0\nEXIT_FAILURE=1\nEXIT_MISMATCH=63  # $? = 63 is used to indicate version mismatch to missing.\nEXIT_SKIP=77\t  # $? = 77 is used to indicate a skipped test to automake.\n\n# Allow overriding, eg assuming that you follow the convention of\n# putting '$debug_cmd' at the start of all your functions, you can get\n# bash to show function call trace with:\n#\n#    debug_cmd='eval echo \"${FUNCNAME[0]} $*\" >&2' bash your-script-name\ndebug_cmd=${debug_cmd-\":\"}\nexit_cmd=:\n\n# By convention, finish your script with:\n#\n#    exit $exit_status\n#\n# so that you can set exit_status to non-zero if you want to indicate\n# something went wrong during execution without actually bailing out at\n# the point of failure.\nexit_status=$EXIT_SUCCESS\n\n# Work around backward compatibility issue on IRIX 6.5. On IRIX 6.4+, sh\n# is ksh but when the shell is invoked as \"sh\" and the current value of\n# the _XPG environment variable is not equal to 1 (one), the special\n# positional parameter $0, within a function call, is the name of the\n# function.\nprogpath=$0\n\n# The name of this program.\nprogname=`$ECHO \"$progpath\" |$SED \"$sed_basename\"`\n\n# Make sure we have an absolute progpath for reexecution:\ncase $progpath in\n  [\\\\/]*|[A-Za-z]:\\\\*) ;;\n  *[\\\\/]*)\n     progdir=`$ECHO \"$progpath\" |$SED \"$sed_dirname\"`\n     progdir=`cd \"$progdir\" && pwd`\n     progpath=$progdir/$progname\n     ;;\n  *)\n     _G_IFS=$IFS\n     IFS=${PATH_SEPARATOR-:}\n     for progdir in $PATH; do\n       IFS=$_G_IFS\n       test -x \"$progdir/$progname\" && break\n     done\n     IFS=$_G_IFS\n     test -n \"$progdir\" || progdir=`pwd`\n     progpath=$progdir/$progname\n     ;;\nesac\n\n\n## ----------------- ##\n## Standard options. ##\n## ----------------- ##\n\n# The following options affect the operation of the functions defined\n# below, and should be set appropriately depending on run-time para-\n# meters passed on the command line.\n\nopt_dry_run=false\nopt_quiet=false\nopt_verbose=false\n\n# Categories 'all' and 'none' are always available.  Append any others\n# you will pass as the first argument to func_warning from your own\n# code.\nwarning_categories=\n\n# By default, display warnings according to 'opt_warning_types'.  Set\n# 'warning_func'  to ':' to elide all warnings, or func_fatal_error to\n# treat the next displayed warning as a fatal error.\nwarning_func=func_warn_and_continue\n\n# Set to 'all' to display all warnings, 'none' to suppress all\n# warnings, or a space delimited list of some subset of\n# 'warning_categories' to display only the listed warnings.\nopt_warning_types=all\n\n\n## -------------------- ##\n## Resource management. ##\n## -------------------- ##\n\n# This section contains definitions for functions that each ensure a\n# particular resource (a file, or a non-empty configuration variable for\n# example) is available, and if appropriate to extract default values\n# from pertinent package files. Call them using their associated\n# 'require_*' variable to ensure that they are executed, at most, once.\n#\n# It's entirely deliberate that calling these functions can set\n# variables that don't obey the namespace limitations obeyed by the rest\n# of this file, in order that that they be as useful as possible to\n# callers.\n\n\n# require_term_colors\n# -------------------\n# Allow display of bold text on terminals that support it.\nrequire_term_colors=func_require_term_colors\nfunc_require_term_colors ()\n{\n    $debug_cmd\n\n    test -t 1 && {\n      # COLORTERM and USE_ANSI_COLORS environment variables take\n      # precedence, because most terminfo databases neglect to describe\n      # whether color sequences are supported.\n      test -n \"${COLORTERM+set}\" && : ${USE_ANSI_COLORS=\"1\"}\n\n      if test 1 = \"$USE_ANSI_COLORS\"; then\n        # Standard ANSI escape sequences\n        tc_reset='\u001b[0m'\n        tc_bold='\u001b[1m';   tc_standout='\u001b[7m'\n        tc_red='\u001b[31m';   tc_green='\u001b[32m'\n        tc_blue='\u001b[34m';  tc_cyan='\u001b[36m'\n      else\n        # Otherwise trust the terminfo database after all.\n        test -n \"`tput sgr0 2>/dev/null`\" && {\n          tc_reset=`tput sgr0`\n          test -n \"`tput bold 2>/dev/null`\" && tc_bold=`tput bold`\n          tc_standout=$tc_bold\n          test -n \"`tput smso 2>/dev/null`\" && tc_standout=`tput smso`\n          test -n \"`tput setaf 1 2>/dev/null`\" && tc_red=`tput setaf 1`\n          test -n \"`tput setaf 2 2>/dev/null`\" && tc_green=`tput setaf 2`\n          test -n \"`tput setaf 4 2>/dev/null`\" && tc_blue=`tput setaf 4`\n          test -n \"`tput setaf 5 2>/dev/null`\" && tc_cyan=`tput setaf 5`\n        }\n      fi\n    }\n\n    require_term_colors=:\n}\n\n\n## ----------------- ##\n## Function library. ##\n## ----------------- ##\n\n# This section contains a variety of useful functions to call in your\n# scripts. Take note of the portable wrappers for features provided by\n# some modern shells, which will fall back to slower equivalents on\n# less featureful shells.\n\n\n# func_append VAR VALUE\n# ---------------------\n# Append VALUE onto the existing contents of VAR.\n\n  # We should try to minimise forks, especially on Windows where they are\n  # unreasonably slow, so skip the feature probes when bash or zsh are\n  # being used:\n  if test set = \"${BASH_VERSION+set}${ZSH_VERSION+set}\"; then\n    : ${_G_HAVE_ARITH_OP=\"yes\"}\n    : ${_G_HAVE_XSI_OPS=\"yes\"}\n    # The += operator was introduced in bash 3.1\n    case $BASH_VERSION in\n      [12].* | 3.0 | 3.0*) ;;\n      *)\n        : ${_G_HAVE_PLUSEQ_OP=\"yes\"}\n        ;;\n    esac\n  fi\n\n  # _G_HAVE_PLUSEQ_OP\n  # Can be empty, in which case the shell is probed, \"yes\" if += is\n  # useable or anything else if it does not work.\n  test -z \"$_G_HAVE_PLUSEQ_OP\" \\\n    && (eval 'x=a; x+=\" b\"; test \"a b\" = \"$x\"') 2>/dev/null \\\n    && _G_HAVE_PLUSEQ_OP=yes\n\nif test yes = \"$_G_HAVE_PLUSEQ_OP\"\nthen\n  # This is an XSI compatible shell, allowing a faster implementation...\n  eval 'func_append ()\n  {\n    $debug_cmd\n\n    eval \"$1+=\\$2\"\n  }'\nelse\n  # ...otherwise fall back to using expr, which is often a shell builtin.\n  func_append ()\n  {\n    $debug_cmd\n\n    eval \"$1=\\$$1\\$2\"\n  }\nfi\n\n\n# func_append_quoted VAR VALUE\n# ----------------------------\n# Quote VALUE and append to the end of shell variable VAR, separated\n# by a space.\nif test yes = \"$_G_HAVE_PLUSEQ_OP\"; then\n  eval 'func_append_quoted ()\n  {\n    $debug_cmd\n\n    func_quote_for_eval \"$2\"\n    eval \"$1+=\\\\ \\$func_quote_for_eval_result\"\n  }'\nelse\n  func_append_quoted ()\n  {\n    $debug_cmd\n\n    func_quote_for_eval \"$2\"\n    eval \"$1=\\$$1\\\\ \\$func_quote_for_eval_result\"\n  }\nfi\n\n\n# func_append_uniq VAR VALUE\n# --------------------------\n# Append unique VALUE onto the existing contents of VAR, assuming\n# entries are delimited by the first character of VALUE.  For example:\n#\n#   func_append_uniq options \" --another-option option-argument\"\n#\n# will only append to $options if \" --another-option option-argument \"\n# is not already present somewhere in $options already (note spaces at\n# each end implied by leading space in second argument).\nfunc_append_uniq ()\n{\n    $debug_cmd\n\n    eval _G_current_value='`$ECHO $'$1'`'\n    _G_delim=`expr \"$2\" : '\\(.\\)'`\n\n    case $_G_delim$_G_current_value$_G_delim in\n      *\"$2$_G_delim\"*) ;;\n      *) func_append \"$@\" ;;\n    esac\n}\n\n\n# func_arith TERM...\n# ------------------\n# Set func_arith_result to the result of evaluating TERMs.\n  test -z \"$_G_HAVE_ARITH_OP\" \\\n    && (eval 'test 2 = $(( 1 + 1 ))') 2>/dev/null \\\n    && _G_HAVE_ARITH_OP=yes\n\nif test yes = \"$_G_HAVE_ARITH_OP\"; then\n  eval 'func_arith ()\n  {\n    $debug_cmd\n\n    func_arith_result=$(( $* ))\n  }'\nelse\n  func_arith ()\n  {\n    $debug_cmd\n\n    func_arith_result=`expr \"$@\"`\n  }\nfi\n\n\n# func_basename FILE\n# ------------------\n# Set func_basename_result to FILE with everything up to and including\n# the last / stripped.\nif test yes = \"$_G_HAVE_XSI_OPS\"; then\n  # If this shell supports suffix pattern removal, then use it to avoid\n  # forking. Hide the definitions single quotes in case the shell chokes\n  # on unsupported syntax...\n  _b='func_basename_result=${1##*/}'\n  _d='case $1 in\n        */*) func_dirname_result=${1%/*}$2 ;;\n        *  ) func_dirname_result=$3        ;;\n      esac'\n\nelse\n  # ...otherwise fall back to using sed.\n  _b='func_basename_result=`$ECHO \"$1\" |$SED \"$sed_basename\"`'\n  _d='func_dirname_result=`$ECHO \"$1\"  |$SED \"$sed_dirname\"`\n      if test \"X$func_dirname_result\" = \"X$1\"; then\n        func_dirname_result=$3\n      else\n        func_append func_dirname_result \"$2\"\n      fi'\nfi\n\neval 'func_basename ()\n{\n    $debug_cmd\n\n    '\"$_b\"'\n}'\n\n\n# func_dirname FILE APPEND NONDIR_REPLACEMENT\n# -------------------------------------------\n# Compute the dirname of FILE.  If nonempty, add APPEND to the result,\n# otherwise set result to NONDIR_REPLACEMENT.\neval 'func_dirname ()\n{\n    $debug_cmd\n\n    '\"$_d\"'\n}'\n\n\n# func_dirname_and_basename FILE APPEND NONDIR_REPLACEMENT\n# --------------------------------------------------------\n# Perform func_basename and func_dirname in a single function\n# call:\n#   dirname:  Compute the dirname of FILE.  If nonempty,\n#             add APPEND to the result, otherwise set result\n#             to NONDIR_REPLACEMENT.\n#             value returned in \"$func_dirname_result\"\n#   basename: Compute filename of FILE.\n#             value retuned in \"$func_basename_result\"\n# For efficiency, we do not delegate to the functions above but instead\n# duplicate the functionality here.\neval 'func_dirname_and_basename ()\n{\n    $debug_cmd\n\n    '\"$_b\"'\n    '\"$_d\"'\n}'\n\n\n# func_echo ARG...\n# ----------------\n# Echo program name prefixed message.\nfunc_echo ()\n{\n    $debug_cmd\n\n    _G_message=$*\n\n    func_echo_IFS=$IFS\n    IFS=$nl\n    for _G_line in $_G_message; do\n      IFS=$func_echo_IFS\n      $ECHO \"$progname: $_G_line\"\n    done\n    IFS=$func_echo_IFS\n}\n\n\n# func_echo_all ARG...\n# --------------------\n# Invoke $ECHO with all args, space-separated.\nfunc_echo_all ()\n{\n    $ECHO \"$*\"\n}\n\n\n# func_echo_infix_1 INFIX ARG...\n# ------------------------------\n# Echo program name, followed by INFIX on the first line, with any\n# additional lines not showing INFIX.\nfunc_echo_infix_1 ()\n{\n    $debug_cmd\n\n    $require_term_colors\n\n    _G_infix=$1; shift\n    _G_indent=$_G_infix\n    _G_prefix=\"$progname: $_G_infix: \"\n    _G_message=$*\n\n    # Strip color escape sequences before counting printable length\n    for _G_tc in \"$tc_reset\" \"$tc_bold\" \"$tc_standout\" \"$tc_red\" \"$tc_green\" \"$tc_blue\" \"$tc_cyan\"\n    do\n      test -n \"$_G_tc\" && {\n        _G_esc_tc=`$ECHO \"$_G_tc\" | $SED \"$sed_make_literal_regex\"`\n        _G_indent=`$ECHO \"$_G_indent\" | $SED \"s|$_G_esc_tc||g\"`\n      }\n    done\n    _G_indent=\"$progname: \"`echo \"$_G_indent\" | $SED 's|.| |g'`\"  \" ## exclude from sc_prohibit_nested_quotes\n\n    func_echo_infix_1_IFS=$IFS\n    IFS=$nl\n    for _G_line in $_G_message; do\n      IFS=$func_echo_infix_1_IFS\n      $ECHO \"$_G_prefix$tc_bold$_G_line$tc_reset\" >&2\n      _G_prefix=$_G_indent\n    done\n    IFS=$func_echo_infix_1_IFS\n}\n\n\n# func_error ARG...\n# -----------------\n# Echo program name prefixed message to standard error.\nfunc_error ()\n{\n    $debug_cmd\n\n    $require_term_colors\n\n    func_echo_infix_1 \"  $tc_standout${tc_red}error$tc_reset\" \"$*\" >&2\n}\n\n\n# func_fatal_error ARG...\n# -----------------------\n# Echo program name prefixed message to standard error, and exit.\nfunc_fatal_error ()\n{\n    $debug_cmd\n\n    func_error \"$*\"\n    exit $EXIT_FAILURE\n}\n\n\n# func_grep EXPRESSION FILENAME\n# -----------------------------\n# Check whether EXPRESSION matches any line of FILENAME, without output.\nfunc_grep ()\n{\n    $debug_cmd\n\n    $GREP \"$1\" \"$2\" >/dev/null 2>&1\n}\n\n\n# func_len STRING\n# ---------------\n# Set func_len_result to the length of STRING. STRING may not\n# start with a hyphen.\n  test -z \"$_G_HAVE_XSI_OPS\" \\\n    && (eval 'x=a/b/c;\n      test 5aa/bb/cc = \"${#x}${x%%/*}${x%/*}${x#*/}${x##*/}\"') 2>/dev/null \\\n    && _G_HAVE_XSI_OPS=yes\n\nif test yes = \"$_G_HAVE_XSI_OPS\"; then\n  eval 'func_len ()\n  {\n    $debug_cmd\n\n    func_len_result=${#1}\n  }'\nelse\n  func_len ()\n  {\n    $debug_cmd\n\n    func_len_result=`expr \"$1\" : \".*\" 2>/dev/null || echo $max_cmd_len`\n  }\nfi\n\n\n# func_mkdir_p DIRECTORY-PATH\n# ---------------------------\n# Make sure the entire path to DIRECTORY-PATH is available.\nfunc_mkdir_p ()\n{\n    $debug_cmd\n\n    _G_directory_path=$1\n    _G_dir_list=\n\n    if test -n \"$_G_directory_path\" && test : != \"$opt_dry_run\"; then\n\n      # Protect directory names starting with '-'\n      case $_G_directory_path in\n        -*) _G_directory_path=./$_G_directory_path ;;\n      esac\n\n      # While some portion of DIR does not yet exist...\n      while test ! -d \"$_G_directory_path\"; do\n        # ...make a list in topmost first order.  Use a colon delimited\n\t# list incase some portion of path contains whitespace.\n        _G_dir_list=$_G_directory_path:$_G_dir_list\n\n        # If the last portion added has no slash in it, the list is done\n        case $_G_directory_path in */*) ;; *) break ;; esac\n\n        # ...otherwise throw away the child directory and loop\n        _G_directory_path=`$ECHO \"$_G_directory_path\" | $SED -e \"$sed_dirname\"`\n      done\n      _G_dir_list=`$ECHO \"$_G_dir_list\" | $SED 's|:*$||'`\n\n      func_mkdir_p_IFS=$IFS; IFS=:\n      for _G_dir in $_G_dir_list; do\n\tIFS=$func_mkdir_p_IFS\n        # mkdir can fail with a 'File exist' error if two processes\n        # try to create one of the directories concurrently.  Don't\n        # stop in that case!\n        $MKDIR \"$_G_dir\" 2>/dev/null || :\n      done\n      IFS=$func_mkdir_p_IFS\n\n      # Bail out if we (or some other process) failed to create a directory.\n      test -d \"$_G_directory_path\" || \\\n        func_fatal_error \"Failed to create '$1'\"\n    fi\n}\n\n\n# func_mktempdir [BASENAME]\n# -------------------------\n# Make a temporary directory that won't clash with other running\n# libtool processes, and avoids race conditions if possible.  If\n# given, BASENAME is the basename for that directory.\nfunc_mktempdir ()\n{\n    $debug_cmd\n\n    _G_template=${TMPDIR-/tmp}/${1-$progname}\n\n    if test : = \"$opt_dry_run\"; then\n      # Return a directory name, but don't create it in dry-run mode\n      _G_tmpdir=$_G_template-$$\n    else\n\n      # If mktemp works, use that first and foremost\n      _G_tmpdir=`mktemp -d \"$_G_template-XXXXXXXX\" 2>/dev/null`\n\n      if test ! -d \"$_G_tmpdir\"; then\n        # Failing that, at least try and use $RANDOM to avoid a race\n        _G_tmpdir=$_G_template-${RANDOM-0}$$\n\n        func_mktempdir_umask=`umask`\n        umask 0077\n        $MKDIR \"$_G_tmpdir\"\n        umask $func_mktempdir_umask\n      fi\n\n      # If we're not in dry-run mode, bomb out on failure\n      test -d \"$_G_tmpdir\" || \\\n        func_fatal_error \"cannot create temporary directory '$_G_tmpdir'\"\n    fi\n\n    $ECHO \"$_G_tmpdir\"\n}\n\n\n# func_normal_abspath PATH\n# ------------------------\n# Remove doubled-up and trailing slashes, \".\" path components,\n# and cancel out any \"..\" path components in PATH after making\n# it an absolute path.\nfunc_normal_abspath ()\n{\n    $debug_cmd\n\n    # These SED scripts presuppose an absolute path with a trailing slash.\n    _G_pathcar='s|^/\\([^/]*\\).*$|\\1|'\n    _G_pathcdr='s|^/[^/]*||'\n    _G_removedotparts=':dotsl\n\t\ts|/\\./|/|g\n\t\tt dotsl\n\t\ts|/\\.$|/|'\n    _G_collapseslashes='s|/\\{1,\\}|/|g'\n    _G_finalslash='s|/*$|/|'\n\n    # Start from root dir and reassemble the path.\n    func_normal_abspath_result=\n    func_normal_abspath_tpath=$1\n    func_normal_abspath_altnamespace=\n    case $func_normal_abspath_tpath in\n      \"\")\n        # Empty path, that just means $cwd.\n        func_stripname '' '/' \"`pwd`\"\n        func_normal_abspath_result=$func_stripname_result\n        return\n        ;;\n      # The next three entries are used to spot a run of precisely\n      # two leading slashes without using negated character classes;\n      # we take advantage of case's first-match behaviour.\n      ///*)\n        # Unusual form of absolute path, do nothing.\n        ;;\n      //*)\n        # Not necessarily an ordinary path; POSIX reserves leading '//'\n        # and for example Cygwin uses it to access remote file shares\n        # over CIFS/SMB, so we conserve a leading double slash if found.\n        func_normal_abspath_altnamespace=/\n        ;;\n      /*)\n        # Absolute path, do nothing.\n        ;;\n      *)\n        # Relative path, prepend $cwd.\n        func_normal_abspath_tpath=`pwd`/$func_normal_abspath_tpath\n        ;;\n    esac\n\n    # Cancel out all the simple stuff to save iterations.  We also want\n    # the path to end with a slash for ease of parsing, so make sure\n    # there is one (and only one) here.\n    func_normal_abspath_tpath=`$ECHO \"$func_normal_abspath_tpath\" | $SED \\\n          -e \"$_G_removedotparts\" -e \"$_G_collapseslashes\" -e \"$_G_finalslash\"`\n    while :; do\n      # Processed it all yet?\n      if test / = \"$func_normal_abspath_tpath\"; then\n        # If we ascended to the root using \"..\" the result may be empty now.\n        if test -z \"$func_normal_abspath_result\"; then\n          func_normal_abspath_result=/\n        fi\n        break\n      fi\n      func_normal_abspath_tcomponent=`$ECHO \"$func_normal_abspath_tpath\" | $SED \\\n          -e \"$_G_pathcar\"`\n      func_normal_abspath_tpath=`$ECHO \"$func_normal_abspath_tpath\" | $SED \\\n          -e \"$_G_pathcdr\"`\n      # Figure out what to do with it\n      case $func_normal_abspath_tcomponent in\n        \"\")\n          # Trailing empty path component, ignore it.\n          ;;\n        ..)\n          # Parent dir; strip last assembled component from result.\n          func_dirname \"$func_normal_abspath_result\"\n          func_normal_abspath_result=$func_dirname_result\n          ;;\n        *)\n          # Actual path component, append it.\n          func_append func_normal_abspath_result \"/$func_normal_abspath_tcomponent\"\n          ;;\n      esac\n    done\n    # Restore leading double-slash if one was found on entry.\n    func_normal_abspath_result=$func_normal_abspath_altnamespace$func_normal_abspath_result\n}\n\n\n# func_notquiet ARG...\n# --------------------\n# Echo program name prefixed message only when not in quiet mode.\nfunc_notquiet ()\n{\n    $debug_cmd\n\n    $opt_quiet || func_echo ${1+\"$@\"}\n\n    # A bug in bash halts the script if the last line of a function\n    # fails when set -e is in force, so we need another command to\n    # work around that:\n    :\n}\n\n\n# func_relative_path SRCDIR DSTDIR\n# --------------------------------\n# Set func_relative_path_result to the relative path from SRCDIR to DSTDIR.\nfunc_relative_path ()\n{\n    $debug_cmd\n\n    func_relative_path_result=\n    func_normal_abspath \"$1\"\n    func_relative_path_tlibdir=$func_normal_abspath_result\n    func_normal_abspath \"$2\"\n    func_relative_path_tbindir=$func_normal_abspath_result\n\n    # Ascend the tree starting from libdir\n    while :; do\n      # check if we have found a prefix of bindir\n      case $func_relative_path_tbindir in\n        $func_relative_path_tlibdir)\n          # found an exact match\n          func_relative_path_tcancelled=\n          break\n          ;;\n        $func_relative_path_tlibdir*)\n          # found a matching prefix\n          func_stripname \"$func_relative_path_tlibdir\" '' \"$func_relative_path_tbindir\"\n          func_relative_path_tcancelled=$func_stripname_result\n          if test -z \"$func_relative_path_result\"; then\n            func_relative_path_result=.\n          fi\n          break\n          ;;\n        *)\n          func_dirname $func_relative_path_tlibdir\n          func_relative_path_tlibdir=$func_dirname_result\n          if test -z \"$func_relative_path_tlibdir\"; then\n            # Have to descend all the way to the root!\n            func_relative_path_result=../$func_relative_path_result\n            func_relative_path_tcancelled=$func_relative_path_tbindir\n            break\n          fi\n          func_relative_path_result=../$func_relative_path_result\n          ;;\n      esac\n    done\n\n    # Now calculate path; take care to avoid doubling-up slashes.\n    func_stripname '' '/' \"$func_relative_path_result\"\n    func_relative_path_result=$func_stripname_result\n    func_stripname '/' '/' \"$func_relative_path_tcancelled\"\n    if test -n \"$func_stripname_result\"; then\n      func_append func_relative_path_result \"/$func_stripname_result\"\n    fi\n\n    # Normalisation. If bindir is libdir, return '.' else relative path.\n    if test -n \"$func_relative_path_result\"; then\n      func_stripname './' '' \"$func_relative_path_result\"\n      func_relative_path_result=$func_stripname_result\n    fi\n\n    test -n \"$func_relative_path_result\" || func_relative_path_result=.\n\n    :\n}\n\n\n# func_quote_for_eval ARG...\n# --------------------------\n# Aesthetically quote ARGs to be evaled later.\n# This function returns two values:\n#   i) func_quote_for_eval_result\n#      double-quoted, suitable for a subsequent eval\n#  ii) func_quote_for_eval_unquoted_result\n#      has all characters that are still active within double\n#      quotes backslashified.\nfunc_quote_for_eval ()\n{\n    $debug_cmd\n\n    func_quote_for_eval_unquoted_result=\n    func_quote_for_eval_result=\n    while test 0 -lt $#; do\n      case $1 in\n        *[\\\\\\`\\\"\\$]*)\n\t  _G_unquoted_arg=`printf '%s\\n' \"$1\" |$SED \"$sed_quote_subst\"` ;;\n        *)\n          _G_unquoted_arg=$1 ;;\n      esac\n      if test -n \"$func_quote_for_eval_unquoted_result\"; then\n\tfunc_append func_quote_for_eval_unquoted_result \" $_G_unquoted_arg\"\n      else\n        func_append func_quote_for_eval_unquoted_result \"$_G_unquoted_arg\"\n      fi\n\n      case $_G_unquoted_arg in\n        # Double-quote args containing shell metacharacters to delay\n        # word splitting, command substitution and variable expansion\n        # for a subsequent eval.\n        # Many Bourne shells cannot handle close brackets correctly\n        # in scan sets, so we specify it separately.\n        *[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t]*|*]*|\"\")\n          _G_quoted_arg=\\\"$_G_unquoted_arg\\\"\n          ;;\n        *)\n          _G_quoted_arg=$_G_unquoted_arg\n\t  ;;\n      esac\n\n      if test -n \"$func_quote_for_eval_result\"; then\n\tfunc_append func_quote_for_eval_result \" $_G_quoted_arg\"\n      else\n        func_append func_quote_for_eval_result \"$_G_quoted_arg\"\n      fi\n      shift\n    done\n}\n\n\n# func_quote_for_expand ARG\n# -------------------------\n# Aesthetically quote ARG to be evaled later; same as above,\n# but do not quote variable references.\nfunc_quote_for_expand ()\n{\n    $debug_cmd\n\n    case $1 in\n      *[\\\\\\`\\\"]*)\n\t_G_arg=`$ECHO \"$1\" | $SED \\\n\t    -e \"$sed_double_quote_subst\" -e \"$sed_double_backslash\"` ;;\n      *)\n        _G_arg=$1 ;;\n    esac\n\n    case $_G_arg in\n      # Double-quote args containing shell metacharacters to delay\n      # word splitting and command substitution for a subsequent eval.\n      # Many Bourne shells cannot handle close brackets correctly\n      # in scan sets, so we specify it separately.\n      *[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t]*|*]*|\"\")\n        _G_arg=\\\"$_G_arg\\\"\n        ;;\n    esac\n\n    func_quote_for_expand_result=$_G_arg\n}\n\n\n# func_stripname PREFIX SUFFIX NAME\n# ---------------------------------\n# strip PREFIX and SUFFIX from NAME, and store in func_stripname_result.\n# PREFIX and SUFFIX must not contain globbing or regex special\n# characters, hashes, percent signs, but SUFFIX may contain a leading\n# dot (in which case that matches only a dot).\nif test yes = \"$_G_HAVE_XSI_OPS\"; then\n  eval 'func_stripname ()\n  {\n    $debug_cmd\n\n    # pdksh 5.2.14 does not do ${X%$Y} correctly if both X and Y are\n    # positional parameters, so assign one to ordinary variable first.\n    func_stripname_result=$3\n    func_stripname_result=${func_stripname_result#\"$1\"}\n    func_stripname_result=${func_stripname_result%\"$2\"}\n  }'\nelse\n  func_stripname ()\n  {\n    $debug_cmd\n\n    case $2 in\n      .*) func_stripname_result=`$ECHO \"$3\" | $SED -e \"s%^$1%%\" -e \"s%\\\\\\\\$2\\$%%\"`;;\n      *)  func_stripname_result=`$ECHO \"$3\" | $SED -e \"s%^$1%%\" -e \"s%$2\\$%%\"`;;\n    esac\n  }\nfi\n\n\n# func_show_eval CMD [FAIL_EXP]\n# -----------------------------\n# Unless opt_quiet is true, then output CMD.  Then, if opt_dryrun is\n# not true, evaluate CMD.  If the evaluation of CMD fails, and FAIL_EXP\n# is given, then evaluate it.\nfunc_show_eval ()\n{\n    $debug_cmd\n\n    _G_cmd=$1\n    _G_fail_exp=${2-':'}\n\n    func_quote_for_expand \"$_G_cmd\"\n    eval \"func_notquiet $func_quote_for_expand_result\"\n\n    $opt_dry_run || {\n      eval \"$_G_cmd\"\n      _G_status=$?\n      if test 0 -ne \"$_G_status\"; then\n\teval \"(exit $_G_status); $_G_fail_exp\"\n      fi\n    }\n}\n\n\n# func_show_eval_locale CMD [FAIL_EXP]\n# ------------------------------------\n# Unless opt_quiet is true, then output CMD.  Then, if opt_dryrun is\n# not true, evaluate CMD.  If the evaluation of CMD fails, and FAIL_EXP\n# is given, then evaluate it.  Use the saved locale for evaluation.\nfunc_show_eval_locale ()\n{\n    $debug_cmd\n\n    _G_cmd=$1\n    _G_fail_exp=${2-':'}\n\n    $opt_quiet || {\n      func_quote_for_expand \"$_G_cmd\"\n      eval \"func_echo $func_quote_for_expand_result\"\n    }\n\n    $opt_dry_run || {\n      eval \"$_G_user_locale\n\t    $_G_cmd\"\n      _G_status=$?\n      eval \"$_G_safe_locale\"\n      if test 0 -ne \"$_G_status\"; then\n\teval \"(exit $_G_status); $_G_fail_exp\"\n      fi\n    }\n}\n\n\n# func_tr_sh\n# ----------\n# Turn $1 into a string suitable for a shell variable name.\n# Result is stored in $func_tr_sh_result.  All characters\n# not in the set a-zA-Z0-9_ are replaced with '_'. Further,\n# if $1 begins with a digit, a '_' is prepended as well.\nfunc_tr_sh ()\n{\n    $debug_cmd\n\n    case $1 in\n    [0-9]* | *[!a-zA-Z0-9_]*)\n      func_tr_sh_result=`$ECHO \"$1\" | $SED -e 's/^\\([0-9]\\)/_\\1/' -e 's/[^a-zA-Z0-9_]/_/g'`\n      ;;\n    * )\n      func_tr_sh_result=$1\n      ;;\n    esac\n}\n\n\n# func_verbose ARG...\n# -------------------\n# Echo program name prefixed message in verbose mode only.\nfunc_verbose ()\n{\n    $debug_cmd\n\n    $opt_verbose && func_echo \"$*\"\n\n    :\n}\n\n\n# func_warn_and_continue ARG...\n# -----------------------------\n# Echo program name prefixed warning message to standard error.\nfunc_warn_and_continue ()\n{\n    $debug_cmd\n\n    $require_term_colors\n\n    func_echo_infix_1 \"${tc_red}warning$tc_reset\" \"$*\" >&2\n}\n\n\n# func_warning CATEGORY ARG...\n# ----------------------------\n# Echo program name prefixed warning message to standard error. Warning\n# messages can be filtered according to CATEGORY, where this function\n# elides messages where CATEGORY is not listed in the global variable\n# 'opt_warning_types'.\nfunc_warning ()\n{\n    $debug_cmd\n\n    # CATEGORY must be in the warning_categories list!\n    case \" $warning_categories \" in\n      *\" $1 \"*) ;;\n      *) func_internal_error \"invalid warning category '$1'\" ;;\n    esac\n\n    _G_category=$1\n    shift\n\n    case \" $opt_warning_types \" in\n      *\" $_G_category \"*) $warning_func ${1+\"$@\"} ;;\n    esac\n}\n\n\n# func_sort_ver VER1 VER2\n# -----------------------\n# 'sort -V' is not generally available.\n# Note this deviates from the version comparison in automake\n# in that it treats 1.5 < 1.5.0, and treats 1.4.4a < 1.4-p3a\n# but this should suffice as we won't be specifying old\n# version formats or redundant trailing .0 in bootstrap.conf.\n# If we did want full compatibility then we should probably\n# use m4_version_compare from autoconf.\nfunc_sort_ver ()\n{\n    $debug_cmd\n\n    printf '%s\\n%s\\n' \"$1\" \"$2\" \\\n      | sort -t. -k 1,1n -k 2,2n -k 3,3n -k 4,4n -k 5,5n -k 6,6n -k 7,7n -k 8,8n -k 9,9n\n}\n\n# func_lt_ver PREV CURR\n# ---------------------\n# Return true if PREV and CURR are in the correct order according to\n# func_sort_ver, otherwise false.  Use it like this:\n#\n#  func_lt_ver \"$prev_ver\" \"$proposed_ver\" || func_fatal_error \"...\"\nfunc_lt_ver ()\n{\n    $debug_cmd\n\n    test \"x$1\" = x`func_sort_ver \"$1\" \"$2\" | $SED 1q`\n}\n\n\n# Local variables:\n# mode: shell-script\n# sh-indentation: 2\n# eval: (add-hook 'before-save-hook 'time-stamp)\n# time-stamp-pattern: \"10/scriptversion=%:y-%02m-%02d.%02H; # UTC\"\n# time-stamp-time-zone: \"UTC\"\n# End:\n#! /bin/sh\n\n# Set a version string for this script.\nscriptversion=2014-01-07.03; # UTC\n\n# A portable, pluggable option parser for Bourne shell.\n# Written by Gary V. Vaughan, 2010\n\n# Copyright (C) 2010-2015 Free Software Foundation, Inc.\n# This is free software; see the source for copying conditions.  There is NO\n# warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n# Please report bugs or propose patches to gary@gnu.org.\n\n\n## ------ ##\n## Usage. ##\n## ------ ##\n\n# This file is a library for parsing options in your shell scripts along\n# with assorted other useful supporting features that you can make use\n# of too.\n#\n# For the simplest scripts you might need only:\n#\n#   #!/bin/sh\n#   . relative/path/to/funclib.sh\n#   . relative/path/to/options-parser\n#   scriptversion=1.0\n#   func_options ${1+\"$@\"}\n#   eval set dummy \"$func_options_result\"; shift\n#   ...rest of your script...\n#\n# In order for the '--version' option to work, you will need to have a\n# suitably formatted comment like the one at the top of this file\n# starting with '# Written by ' and ending with '# warranty; '.\n#\n# For '-h' and '--help' to work, you will also need a one line\n# description of your script's purpose in a comment directly above the\n# '# Written by ' line, like the one at the top of this file.\n#\n# The default options also support '--debug', which will turn on shell\n# execution tracing (see the comment above debug_cmd below for another\n# use), and '--verbose' and the func_verbose function to allow your script\n# to display verbose messages only when your user has specified\n# '--verbose'.\n#\n# After sourcing this file, you can plug processing for additional\n# options by amending the variables from the 'Configuration' section\n# below, and following the instructions in the 'Option parsing'\n# section further down.\n\n## -------------- ##\n## Configuration. ##\n## -------------- ##\n\n# You should override these variables in your script after sourcing this\n# file so that they reflect the customisations you have added to the\n# option parser.\n\n# The usage line for option parsing errors and the start of '-h' and\n# '--help' output messages. You can embed shell variables for delayed\n# expansion at the time the message is displayed, but you will need to\n# quote other shell meta-characters carefully to prevent them being\n# expanded when the contents are evaled.\nusage='$progpath [OPTION]...'\n\n# Short help message in response to '-h' and '--help'.  Add to this or\n# override it after sourcing this library to reflect the full set of\n# options your script accepts.\nusage_message=\"\\\n       --debug        enable verbose shell tracing\n   -W, --warnings=CATEGORY\n                      report the warnings falling in CATEGORY [all]\n   -v, --verbose      verbosely report processing\n       --version      print version information and exit\n   -h, --help         print short or long help message and exit\n\"\n\n# Additional text appended to 'usage_message' in response to '--help'.\nlong_help_message=\"\nWarning categories include:\n       'all'          show all warnings\n       'none'         turn off all the warnings\n       'error'        warnings are treated as fatal errors\"\n\n# Help message printed before fatal option parsing errors.\nfatal_help=\"Try '\\$progname --help' for more information.\"\n\n\n\n## ------------------------- ##\n## Hook function management. ##\n## ------------------------- ##\n\n# This section contains functions for adding, removing, and running hooks\n# to the main code.  A hook is just a named list of of function, that can\n# be run in order later on.\n\n# func_hookable FUNC_NAME\n# -----------------------\n# Declare that FUNC_NAME will run hooks added with\n# 'func_add_hook FUNC_NAME ...'.\nfunc_hookable ()\n{\n    $debug_cmd\n\n    func_append hookable_fns \" $1\"\n}\n\n\n# func_add_hook FUNC_NAME HOOK_FUNC\n# ---------------------------------\n# Request that FUNC_NAME call HOOK_FUNC before it returns.  FUNC_NAME must\n# first have been declared \"hookable\" by a call to 'func_hookable'.\nfunc_add_hook ()\n{\n    $debug_cmd\n\n    case \" $hookable_fns \" in\n      *\" $1 \"*) ;;\n      *) func_fatal_error \"'$1' does not accept hook functions.\" ;;\n    esac\n\n    eval func_append ${1}_hooks '\" $2\"'\n}\n\n\n# func_remove_hook FUNC_NAME HOOK_FUNC\n# ------------------------------------\n# Remove HOOK_FUNC from the list of functions called by FUNC_NAME.\nfunc_remove_hook ()\n{\n    $debug_cmd\n\n    eval ${1}_hooks='`$ECHO \"\\$'$1'_hooks\" |$SED \"s| '$2'||\"`'\n}\n\n\n# func_run_hooks FUNC_NAME [ARG]...\n# ---------------------------------\n# Run all hook functions registered to FUNC_NAME.\n# It is assumed that the list of hook functions contains nothing more\n# than a whitespace-delimited list of legal shell function names, and\n# no effort is wasted trying to catch shell meta-characters or preserve\n# whitespace.\nfunc_run_hooks ()\n{\n    $debug_cmd\n\n    case \" $hookable_fns \" in\n      *\" $1 \"*) ;;\n      *) func_fatal_error \"'$1' does not support hook funcions.n\" ;;\n    esac\n\n    eval _G_hook_fns=\\$$1_hooks; shift\n\n    for _G_hook in $_G_hook_fns; do\n      eval $_G_hook '\"$@\"'\n\n      # store returned options list back into positional\n      # parameters for next 'cmd' execution.\n      eval _G_hook_result=\\$${_G_hook}_result\n      eval set dummy \"$_G_hook_result\"; shift\n    done\n\n    func_quote_for_eval ${1+\"$@\"}\n    func_run_hooks_result=$func_quote_for_eval_result\n}\n\n\n\n## --------------- ##\n## Option parsing. ##\n## --------------- ##\n\n# In order to add your own option parsing hooks, you must accept the\n# full positional parameter list in your hook function, remove any\n# options that you action, and then pass back the remaining unprocessed\n# options in '<hooked_function_name>_result', escaped suitably for\n# 'eval'.  Like this:\n#\n#    my_options_prep ()\n#    {\n#        $debug_cmd\n#\n#        # Extend the existing usage message.\n#        usage_message=$usage_message'\n#      -s, --silent       don'\\''t print informational messages\n#    '\n#\n#        func_quote_for_eval ${1+\"$@\"}\n#        my_options_prep_result=$func_quote_for_eval_result\n#    }\n#    func_add_hook func_options_prep my_options_prep\n#\n#\n#    my_silent_option ()\n#    {\n#        $debug_cmd\n#\n#        # Note that for efficiency, we parse as many options as we can\n#        # recognise in a loop before passing the remainder back to the\n#        # caller on the first unrecognised argument we encounter.\n#        while test $# -gt 0; do\n#          opt=$1; shift\n#          case $opt in\n#            --silent|-s) opt_silent=: ;;\n#            # Separate non-argument short options:\n#            -s*)         func_split_short_opt \"$_G_opt\"\n#                         set dummy \"$func_split_short_opt_name\" \\\n#                             \"-$func_split_short_opt_arg\" ${1+\"$@\"}\n#                         shift\n#                         ;;\n#            *)            set dummy \"$_G_opt\" \"$*\"; shift; break ;;\n#          esac\n#        done\n#\n#        func_quote_for_eval ${1+\"$@\"}\n#        my_silent_option_result=$func_quote_for_eval_result\n#    }\n#    func_add_hook func_parse_options my_silent_option\n#\n#\n#    my_option_validation ()\n#    {\n#        $debug_cmd\n#\n#        $opt_silent && $opt_verbose && func_fatal_help \"\\\n#    '--silent' and '--verbose' options are mutually exclusive.\"\n#\n#        func_quote_for_eval ${1+\"$@\"}\n#        my_option_validation_result=$func_quote_for_eval_result\n#    }\n#    func_add_hook func_validate_options my_option_validation\n#\n# You'll alse need to manually amend $usage_message to reflect the extra\n# options you parse.  It's preferable to append if you can, so that\n# multiple option parsing hooks can be added safely.\n\n\n# func_options [ARG]...\n# ---------------------\n# All the functions called inside func_options are hookable. See the\n# individual implementations for details.\nfunc_hookable func_options\nfunc_options ()\n{\n    $debug_cmd\n\n    func_options_prep ${1+\"$@\"}\n    eval func_parse_options \\\n        ${func_options_prep_result+\"$func_options_prep_result\"}\n    eval func_validate_options \\\n        ${func_parse_options_result+\"$func_parse_options_result\"}\n\n    eval func_run_hooks func_options \\\n        ${func_validate_options_result+\"$func_validate_options_result\"}\n\n    # save modified positional parameters for caller\n    func_options_result=$func_run_hooks_result\n}\n\n\n# func_options_prep [ARG]...\n# --------------------------\n# All initialisations required before starting the option parse loop.\n# Note that when calling hook functions, we pass through the list of\n# positional parameters.  If a hook function modifies that list, and\n# needs to propogate that back to rest of this script, then the complete\n# modified list must be put in 'func_run_hooks_result' before\n# returning.\nfunc_hookable func_options_prep\nfunc_options_prep ()\n{\n    $debug_cmd\n\n    # Option defaults:\n    opt_verbose=false\n    opt_warning_types=\n\n    func_run_hooks func_options_prep ${1+\"$@\"}\n\n    # save modified positional parameters for caller\n    func_options_prep_result=$func_run_hooks_result\n}\n\n\n# func_parse_options [ARG]...\n# ---------------------------\n# The main option parsing loop.\nfunc_hookable func_parse_options\nfunc_parse_options ()\n{\n    $debug_cmd\n\n    func_parse_options_result=\n\n    # this just eases exit handling\n    while test $# -gt 0; do\n      # Defer to hook functions for initial option parsing, so they\n      # get priority in the event of reusing an option name.\n      func_run_hooks func_parse_options ${1+\"$@\"}\n\n      # Adjust func_parse_options positional parameters to match\n      eval set dummy \"$func_run_hooks_result\"; shift\n\n      # Break out of the loop if we already parsed every option.\n      test $# -gt 0 || break\n\n      _G_opt=$1\n      shift\n      case $_G_opt in\n        --debug|-x)   debug_cmd='set -x'\n                      func_echo \"enabling shell trace mode\"\n                      $debug_cmd\n                      ;;\n\n        --no-warnings|--no-warning|--no-warn)\n                      set dummy --warnings none ${1+\"$@\"}\n                      shift\n\t\t      ;;\n\n        --warnings|--warning|-W)\n                      test $# = 0 && func_missing_arg $_G_opt && break\n                      case \" $warning_categories $1\" in\n                        *\" $1 \"*)\n                          # trailing space prevents matching last $1 above\n                          func_append_uniq opt_warning_types \" $1\"\n                          ;;\n                        *all)\n                          opt_warning_types=$warning_categories\n                          ;;\n                        *none)\n                          opt_warning_types=none\n                          warning_func=:\n                          ;;\n                        *error)\n                          opt_warning_types=$warning_categories\n                          warning_func=func_fatal_error\n                          ;;\n                        *)\n                          func_fatal_error \\\n                             \"unsupported warning category: '$1'\"\n                          ;;\n                      esac\n                      shift\n                      ;;\n\n        --verbose|-v) opt_verbose=: ;;\n        --version)    func_version ;;\n        -\\?|-h)       func_usage ;;\n        --help)       func_help ;;\n\n\t# Separate optargs to long options (plugins may need this):\n\t--*=*)        func_split_equals \"$_G_opt\"\n\t              set dummy \"$func_split_equals_lhs\" \\\n                          \"$func_split_equals_rhs\" ${1+\"$@\"}\n                      shift\n                      ;;\n\n       # Separate optargs to short options:\n        -W*)\n                      func_split_short_opt \"$_G_opt\"\n                      set dummy \"$func_split_short_opt_name\" \\\n                          \"$func_split_short_opt_arg\" ${1+\"$@\"}\n                      shift\n                      ;;\n\n        # Separate non-argument short options:\n        -\\?*|-h*|-v*|-x*)\n                      func_split_short_opt \"$_G_opt\"\n                      set dummy \"$func_split_short_opt_name\" \\\n                          \"-$func_split_short_opt_arg\" ${1+\"$@\"}\n                      shift\n                      ;;\n\n        --)           break ;;\n        -*)           func_fatal_help \"unrecognised option: '$_G_opt'\" ;;\n        *)            set dummy \"$_G_opt\" ${1+\"$@\"}; shift; break ;;\n      esac\n    done\n\n    # save modified positional parameters for caller\n    func_quote_for_eval ${1+\"$@\"}\n    func_parse_options_result=$func_quote_for_eval_result\n}\n\n\n# func_validate_options [ARG]...\n# ------------------------------\n# Perform any sanity checks on option settings and/or unconsumed\n# arguments.\nfunc_hookable func_validate_options\nfunc_validate_options ()\n{\n    $debug_cmd\n\n    # Display all warnings if -W was not given.\n    test -n \"$opt_warning_types\" || opt_warning_types=\" $warning_categories\"\n\n    func_run_hooks func_validate_options ${1+\"$@\"}\n\n    # Bail if the options were screwed!\n    $exit_cmd $EXIT_FAILURE\n\n    # save modified positional parameters for caller\n    func_validate_options_result=$func_run_hooks_result\n}\n\n\n\n## ----------------- ##\n## Helper functions. ##\n## ----------------- ##\n\n# This section contains the helper functions used by the rest of the\n# hookable option parser framework in ascii-betical order.\n\n\n# func_fatal_help ARG...\n# ----------------------\n# Echo program name prefixed message to standard error, followed by\n# a help hint, and exit.\nfunc_fatal_help ()\n{\n    $debug_cmd\n\n    eval \\$ECHO \\\"\"Usage: $usage\"\\\"\n    eval \\$ECHO \\\"\"$fatal_help\"\\\"\n    func_error ${1+\"$@\"}\n    exit $EXIT_FAILURE\n}\n\n\n# func_help\n# ---------\n# Echo long help message to standard output and exit.\nfunc_help ()\n{\n    $debug_cmd\n\n    func_usage_message\n    $ECHO \"$long_help_message\"\n    exit 0\n}\n\n\n# func_missing_arg ARGNAME\n# ------------------------\n# Echo program name prefixed message to standard error and set global\n# exit_cmd.\nfunc_missing_arg ()\n{\n    $debug_cmd\n\n    func_error \"Missing argument for '$1'.\"\n    exit_cmd=exit\n}\n\n\n# func_split_equals STRING\n# ------------------------\n# Set func_split_equals_lhs and func_split_equals_rhs shell variables after\n# splitting STRING at the '=' sign.\ntest -z \"$_G_HAVE_XSI_OPS\" \\\n    && (eval 'x=a/b/c;\n      test 5aa/bb/cc = \"${#x}${x%%/*}${x%/*}${x#*/}${x##*/}\"') 2>/dev/null \\\n    && _G_HAVE_XSI_OPS=yes\n\nif test yes = \"$_G_HAVE_XSI_OPS\"\nthen\n  # This is an XSI compatible shell, allowing a faster implementation...\n  eval 'func_split_equals ()\n  {\n      $debug_cmd\n\n      func_split_equals_lhs=${1%%=*}\n      func_split_equals_rhs=${1#*=}\n      test \"x$func_split_equals_lhs\" = \"x$1\" \\\n        && func_split_equals_rhs=\n  }'\nelse\n  # ...otherwise fall back to using expr, which is often a shell builtin.\n  func_split_equals ()\n  {\n      $debug_cmd\n\n      func_split_equals_lhs=`expr \"x$1\" : 'x\\([^=]*\\)'`\n      func_split_equals_rhs=\n      test \"x$func_split_equals_lhs\" = \"x$1\" \\\n        || func_split_equals_rhs=`expr \"x$1\" : 'x[^=]*=\\(.*\\)$'`\n  }\nfi #func_split_equals\n\n\n# func_split_short_opt SHORTOPT\n# -----------------------------\n# Set func_split_short_opt_name and func_split_short_opt_arg shell\n# variables after splitting SHORTOPT after the 2nd character.\nif test yes = \"$_G_HAVE_XSI_OPS\"\nthen\n  # This is an XSI compatible shell, allowing a faster implementation...\n  eval 'func_split_short_opt ()\n  {\n      $debug_cmd\n\n      func_split_short_opt_arg=${1#??}\n      func_split_short_opt_name=${1%\"$func_split_short_opt_arg\"}\n  }'\nelse\n  # ...otherwise fall back to using expr, which is often a shell builtin.\n  func_split_short_opt ()\n  {\n      $debug_cmd\n\n      func_split_short_opt_name=`expr \"x$1\" : 'x-\\(.\\)'`\n      func_split_short_opt_arg=`expr \"x$1\" : 'x-.\\(.*\\)$'`\n  }\nfi #func_split_short_opt\n\n\n# func_usage\n# ----------\n# Echo short help message to standard output and exit.\nfunc_usage ()\n{\n    $debug_cmd\n\n    func_usage_message\n    $ECHO \"Run '$progname --help |${PAGER-more}' for full usage\"\n    exit 0\n}\n\n\n# func_usage_message\n# ------------------\n# Echo short help message to standard output.\nfunc_usage_message ()\n{\n    $debug_cmd\n\n    eval \\$ECHO \\\"\"Usage: $usage\"\\\"\n    echo\n    $SED -n 's|^# ||\n        /^Written by/{\n          x;p;x\n        }\n\th\n\t/^Written by/q' < \"$progpath\"\n    echo\n    eval \\$ECHO \\\"\"$usage_message\"\\\"\n}\n\n\n# func_version\n# ------------\n# Echo version message to standard output and exit.\nfunc_version ()\n{\n    $debug_cmd\n\n    printf '%s\\n' \"$progname $scriptversion\"\n    $SED -n '\n        /(C)/!b go\n        :more\n        /\\./!{\n          N\n          s|\\n# | |\n          b more\n        }\n        :go\n        /^# Written by /,/# warranty; / {\n          s|^# ||\n          s|^# *$||\n          s|\\((C)\\)[ 0-9,-]*[ ,-]\\([1-9][0-9]* \\)|\\1 \\2|\n          p\n        }\n        /^# Written by / {\n          s|^# ||\n          p\n        }\n        /^warranty; /q' < \"$progpath\"\n\n    exit $?\n}\n\n\n# Local variables:\n# mode: shell-script\n# sh-indentation: 2\n# eval: (add-hook 'before-save-hook 'time-stamp)\n# time-stamp-pattern: \"10/scriptversion=%:y-%02m-%02d.%02H; # UTC\"\n# time-stamp-time-zone: \"UTC\"\n# End:\n\n# Set a version string.\nscriptversion='(GNU libtool) 2.4.6'\n\n\n# func_echo ARG...\n# ----------------\n# Libtool also displays the current mode in messages, so override\n# funclib.sh func_echo with this custom definition.\nfunc_echo ()\n{\n    $debug_cmd\n\n    _G_message=$*\n\n    func_echo_IFS=$IFS\n    IFS=$nl\n    for _G_line in $_G_message; do\n      IFS=$func_echo_IFS\n      $ECHO \"$progname${opt_mode+: $opt_mode}: $_G_line\"\n    done\n    IFS=$func_echo_IFS\n}\n\n\n# func_warning ARG...\n# -------------------\n# Libtool warnings are not categorized, so override funclib.sh\n# func_warning with this simpler definition.\nfunc_warning ()\n{\n    $debug_cmd\n\n    $warning_func ${1+\"$@\"}\n}\n\n\n## ---------------- ##\n## Options parsing. ##\n## ---------------- ##\n\n# Hook in the functions to make sure our own options are parsed during\n# the option parsing loop.\n\nusage='$progpath [OPTION]... [MODE-ARG]...'\n\n# Short help message in response to '-h'.\nusage_message=\"Options:\n       --config             show all configuration variables\n       --debug              enable verbose shell tracing\n   -n, --dry-run            display commands without modifying any files\n       --features           display basic configuration information and exit\n       --mode=MODE          use operation mode MODE\n       --no-warnings        equivalent to '-Wnone'\n       --preserve-dup-deps  don't remove duplicate dependency libraries\n       --quiet, --silent    don't print informational messages\n       --tag=TAG            use configuration variables from tag TAG\n   -v, --verbose            print more informational messages than default\n       --version            print version information\n   -W, --warnings=CATEGORY  report the warnings falling in CATEGORY [all]\n   -h, --help, --help-all   print short, long, or detailed help message\n\"\n\n# Additional text appended to 'usage_message' in response to '--help'.\nfunc_help ()\n{\n    $debug_cmd\n\n    func_usage_message\n    $ECHO \"$long_help_message\n\nMODE must be one of the following:\n\n       clean           remove files from the build directory\n       compile         compile a source file into a libtool object\n       execute         automatically set library path, then run a program\n       finish          complete the installation of libtool libraries\n       install         install libraries or executables\n       link            create a library or an executable\n       uninstall       remove libraries from an installed directory\n\nMODE-ARGS vary depending on the MODE.  When passed as first option,\n'--mode=MODE' may be abbreviated as 'MODE' or a unique abbreviation of that.\nTry '$progname --help --mode=MODE' for a more detailed description of MODE.\n\nWhen reporting a bug, please describe a test case to reproduce it and\ninclude the following information:\n\n       host-triplet:   $host\n       shell:          $SHELL\n       compiler:       $LTCC\n       compiler flags: $LTCFLAGS\n       linker:         $LD (gnu? $with_gnu_ld)\n       version:        $progname (GNU libtool) 2.4.6\n       automake:       `($AUTOMAKE --version) 2>/dev/null |$SED 1q`\n       autoconf:       `($AUTOCONF --version) 2>/dev/null |$SED 1q`\n\nReport bugs to <bug-libtool@gnu.org>.\nGNU libtool home page: <http://www.gnu.org/software/libtool/>.\nGeneral help using GNU software: <http://www.gnu.org/gethelp/>.\"\n    exit 0\n}\n\n\n# func_lo2o OBJECT-NAME\n# ---------------------\n# Transform OBJECT-NAME from a '.lo' suffix to the platform specific\n# object suffix.\n\nlo2o=s/\\\\.lo\\$/.$objext/\no2lo=s/\\\\.$objext\\$/.lo/\n\nif test yes = \"$_G_HAVE_XSI_OPS\"; then\n  eval 'func_lo2o ()\n  {\n    case $1 in\n      *.lo) func_lo2o_result=${1%.lo}.$objext ;;\n      *   ) func_lo2o_result=$1               ;;\n    esac\n  }'\n\n  # func_xform LIBOBJ-OR-SOURCE\n  # ---------------------------\n  # Transform LIBOBJ-OR-SOURCE from a '.o' or '.c' (or otherwise)\n  # suffix to a '.lo' libtool-object suffix.\n  eval 'func_xform ()\n  {\n    func_xform_result=${1%.*}.lo\n  }'\nelse\n  # ...otherwise fall back to using sed.\n  func_lo2o ()\n  {\n    func_lo2o_result=`$ECHO \"$1\" | $SED \"$lo2o\"`\n  }\n\n  func_xform ()\n  {\n    func_xform_result=`$ECHO \"$1\" | $SED 's|\\.[^.]*$|.lo|'`\n  }\nfi\n\n\n# func_fatal_configuration ARG...\n# -------------------------------\n# Echo program name prefixed message to standard error, followed by\n# a configuration failure hint, and exit.\nfunc_fatal_configuration ()\n{\n    func__fatal_error ${1+\"$@\"} \\\n      \"See the $PACKAGE documentation for more information.\" \\\n      \"Fatal configuration error.\"\n}\n\n\n# func_config\n# -----------\n# Display the configuration for all the tags in this script.\nfunc_config ()\n{\n    re_begincf='^# ### BEGIN LIBTOOL'\n    re_endcf='^# ### END LIBTOOL'\n\n    # Default configuration.\n    $SED \"1,/$re_begincf CONFIG/d;/$re_endcf CONFIG/,\\$d\" < \"$progpath\"\n\n    # Now print the configurations for the tags.\n    for tagname in $taglist; do\n      $SED -n \"/$re_begincf TAG CONFIG: $tagname\\$/,/$re_endcf TAG CONFIG: $tagname\\$/p\" < \"$progpath\"\n    done\n\n    exit $?\n}\n\n\n# func_features\n# -------------\n# Display the features supported by this script.\nfunc_features ()\n{\n    echo \"host: $host\"\n    if test yes = \"$build_libtool_libs\"; then\n      echo \"enable shared libraries\"\n    else\n      echo \"disable shared libraries\"\n    fi\n    if test yes = \"$build_old_libs\"; then\n      echo \"enable static libraries\"\n    else\n      echo \"disable static libraries\"\n    fi\n\n    exit $?\n}\n\n\n# func_enable_tag TAGNAME\n# -----------------------\n# Verify that TAGNAME is valid, and either flag an error and exit, or\n# enable the TAGNAME tag.  We also add TAGNAME to the global $taglist\n# variable here.\nfunc_enable_tag ()\n{\n    # Global variable:\n    tagname=$1\n\n    re_begincf=\"^# ### BEGIN LIBTOOL TAG CONFIG: $tagname\\$\"\n    re_endcf=\"^# ### END LIBTOOL TAG CONFIG: $tagname\\$\"\n    sed_extractcf=/$re_begincf/,/$re_endcf/p\n\n    # Validate tagname.\n    case $tagname in\n      *[!-_A-Za-z0-9,/]*)\n        func_fatal_error \"invalid tag name: $tagname\"\n        ;;\n    esac\n\n    # Don't test for the \"default\" C tag, as we know it's\n    # there but not specially marked.\n    case $tagname in\n        CC) ;;\n    *)\n        if $GREP \"$re_begincf\" \"$progpath\" >/dev/null 2>&1; then\n\t  taglist=\"$taglist $tagname\"\n\n\t  # Evaluate the configuration.  Be careful to quote the path\n\t  # and the sed script, to avoid splitting on whitespace, but\n\t  # also don't use non-portable quotes within backquotes within\n\t  # quotes we have to do it in 2 steps:\n\t  extractedcf=`$SED -n -e \"$sed_extractcf\" < \"$progpath\"`\n\t  eval \"$extractedcf\"\n        else\n\t  func_error \"ignoring unknown tag $tagname\"\n        fi\n        ;;\n    esac\n}\n\n\n# func_check_version_match\n# ------------------------\n# Ensure that we are using m4 macros, and libtool script from the same\n# release of libtool.\nfunc_check_version_match ()\n{\n    if test \"$package_revision\" != \"$macro_revision\"; then\n      if test \"$VERSION\" != \"$macro_version\"; then\n        if test -z \"$macro_version\"; then\n          cat >&2 <<_LT_EOF\n$progname: Version mismatch error.  This is $PACKAGE $VERSION, but the\n$progname: definition of this LT_INIT comes from an older release.\n$progname: You should recreate aclocal.m4 with macros from $PACKAGE $VERSION\n$progname: and run autoconf again.\n_LT_EOF\n        else\n          cat >&2 <<_LT_EOF\n$progname: Version mismatch error.  This is $PACKAGE $VERSION, but the\n$progname: definition of this LT_INIT comes from $PACKAGE $macro_version.\n$progname: You should recreate aclocal.m4 with macros from $PACKAGE $VERSION\n$progname: and run autoconf again.\n_LT_EOF\n        fi\n      else\n        cat >&2 <<_LT_EOF\n$progname: Version mismatch error.  This is $PACKAGE $VERSION, revision $package_revision,\n$progname: but the definition of this LT_INIT comes from revision $macro_revision.\n$progname: You should recreate aclocal.m4 with macros from revision $package_revision\n$progname: of $PACKAGE $VERSION and run autoconf again.\n_LT_EOF\n      fi\n\n      exit $EXIT_MISMATCH\n    fi\n}\n\n\n# libtool_options_prep [ARG]...\n# -----------------------------\n# Preparation for options parsed by libtool.\nlibtool_options_prep ()\n{\n    $debug_mode\n\n    # Option defaults:\n    opt_config=false\n    opt_dlopen=\n    opt_dry_run=false\n    opt_help=false\n    opt_mode=\n    opt_preserve_dup_deps=false\n    opt_quiet=false\n\n    nonopt=\n    preserve_args=\n\n    # Shorthand for --mode=foo, only valid as the first argument\n    case $1 in\n    clean|clea|cle|cl)\n      shift; set dummy --mode clean ${1+\"$@\"}; shift\n      ;;\n    compile|compil|compi|comp|com|co|c)\n      shift; set dummy --mode compile ${1+\"$@\"}; shift\n      ;;\n    execute|execut|execu|exec|exe|ex|e)\n      shift; set dummy --mode execute ${1+\"$@\"}; shift\n      ;;\n    finish|finis|fini|fin|fi|f)\n      shift; set dummy --mode finish ${1+\"$@\"}; shift\n      ;;\n    install|instal|insta|inst|ins|in|i)\n      shift; set dummy --mode install ${1+\"$@\"}; shift\n      ;;\n    link|lin|li|l)\n      shift; set dummy --mode link ${1+\"$@\"}; shift\n      ;;\n    uninstall|uninstal|uninsta|uninst|unins|unin|uni|un|u)\n      shift; set dummy --mode uninstall ${1+\"$@\"}; shift\n      ;;\n    esac\n\n    # Pass back the list of options.\n    func_quote_for_eval ${1+\"$@\"}\n    libtool_options_prep_result=$func_quote_for_eval_result\n}\nfunc_add_hook func_options_prep libtool_options_prep\n\n\n# libtool_parse_options [ARG]...\n# ---------------------------------\n# Provide handling for libtool specific options.\nlibtool_parse_options ()\n{\n    $debug_cmd\n\n    # Perform our own loop to consume as many options as possible in\n    # each iteration.\n    while test $# -gt 0; do\n      _G_opt=$1\n      shift\n      case $_G_opt in\n        --dry-run|--dryrun|-n)\n                        opt_dry_run=:\n                        ;;\n\n        --config)       func_config ;;\n\n        --dlopen|-dlopen)\n                        opt_dlopen=\"${opt_dlopen+$opt_dlopen\n}$1\"\n                        shift\n                        ;;\n\n        --preserve-dup-deps)\n                        opt_preserve_dup_deps=: ;;\n\n        --features)     func_features ;;\n\n        --finish)       set dummy --mode finish ${1+\"$@\"}; shift ;;\n\n        --help)         opt_help=: ;;\n\n        --help-all)     opt_help=': help-all' ;;\n\n        --mode)         test $# = 0 && func_missing_arg $_G_opt && break\n                        opt_mode=$1\n                        case $1 in\n                          # Valid mode arguments:\n                          clean|compile|execute|finish|install|link|relink|uninstall) ;;\n\n                          # Catch anything else as an error\n                          *) func_error \"invalid argument for $_G_opt\"\n                             exit_cmd=exit\n                             break\n                             ;;\n                        esac\n                        shift\n                        ;;\n\n        --no-silent|--no-quiet)\n                        opt_quiet=false\n                        func_append preserve_args \" $_G_opt\"\n                        ;;\n\n        --no-warnings|--no-warning|--no-warn)\n                        opt_warning=false\n                        func_append preserve_args \" $_G_opt\"\n                        ;;\n\n        --no-verbose)\n                        opt_verbose=false\n                        func_append preserve_args \" $_G_opt\"\n                        ;;\n\n        --silent|--quiet)\n                        opt_quiet=:\n                        opt_verbose=false\n                        func_append preserve_args \" $_G_opt\"\n                        ;;\n\n        --tag)          test $# = 0 && func_missing_arg $_G_opt && break\n                        opt_tag=$1\n                        func_append preserve_args \" $_G_opt $1\"\n                        func_enable_tag \"$1\"\n                        shift\n                        ;;\n\n        --verbose|-v)   opt_quiet=false\n                        opt_verbose=:\n                        func_append preserve_args \" $_G_opt\"\n                        ;;\n\n\t# An option not handled by this hook function:\n        *)\t\tset dummy \"$_G_opt\" ${1+\"$@\"};\tshift; break  ;;\n      esac\n    done\n\n\n    # save modified positional parameters for caller\n    func_quote_for_eval ${1+\"$@\"}\n    libtool_parse_options_result=$func_quote_for_eval_result\n}\nfunc_add_hook func_parse_options libtool_parse_options\n\n\n\n# libtool_validate_options [ARG]...\n# ---------------------------------\n# Perform any sanity checks on option settings and/or unconsumed\n# arguments.\nlibtool_validate_options ()\n{\n    # save first non-option argument\n    if test 0 -lt $#; then\n      nonopt=$1\n      shift\n    fi\n\n    # preserve --debug\n    test : = \"$debug_cmd\" || func_append preserve_args \" --debug\"\n\n    case $host in\n      # Solaris2 added to fix http://debbugs.gnu.org/cgi/bugreport.cgi?bug=16452\n      # see also: http://gcc.gnu.org/bugzilla/show_bug.cgi?id=59788\n      *cygwin* | *mingw* | *pw32* | *cegcc* | *solaris2* | *os2*)\n        # don't eliminate duplications in $postdeps and $predeps\n        opt_duplicate_compiler_generated_deps=:\n        ;;\n      *)\n        opt_duplicate_compiler_generated_deps=$opt_preserve_dup_deps\n        ;;\n    esac\n\n    $opt_help || {\n      # Sanity checks first:\n      func_check_version_match\n\n      test yes != \"$build_libtool_libs\" \\\n        && test yes != \"$build_old_libs\" \\\n        && func_fatal_configuration \"not configured to build any kind of library\"\n\n      # Darwin sucks\n      eval std_shrext=\\\"$shrext_cmds\\\"\n\n      # Only execute mode is allowed to have -dlopen flags.\n      if test -n \"$opt_dlopen\" && test execute != \"$opt_mode\"; then\n        func_error \"unrecognized option '-dlopen'\"\n        $ECHO \"$help\" 1>&2\n        exit $EXIT_FAILURE\n      fi\n\n      # Change the help message to a mode-specific one.\n      generic_help=$help\n      help=\"Try '$progname --help --mode=$opt_mode' for more information.\"\n    }\n\n    # Pass back the unparsed argument list\n    func_quote_for_eval ${1+\"$@\"}\n    libtool_validate_options_result=$func_quote_for_eval_result\n}\nfunc_add_hook func_validate_options libtool_validate_options\n\n\n# Process options as early as possible so that --help and --version\n# can return quickly.\nfunc_options ${1+\"$@\"}\neval set dummy \"$func_options_result\"; shift\n\n\n\n## ----------- ##\n##    Main.    ##\n## ----------- ##\n\nmagic='%%%MAGIC variable%%%'\nmagic_exe='%%%MAGIC EXE variable%%%'\n\n# Global variables.\nextracted_archives=\nextracted_serial=0\n\n# If this variable is set in any of the actions, the command in it\n# will be execed at the end.  This prevents here-documents from being\n# left over by shells.\nexec_cmd=\n\n\n# A function that is used when there is no print builtin or printf.\nfunc_fallback_echo ()\n{\n  eval 'cat <<_LTECHO_EOF\n$1\n_LTECHO_EOF'\n}\n\n# func_generated_by_libtool\n# True iff stdin has been generated by Libtool. This function is only\n# a basic sanity check; it will hardly flush out determined imposters.\nfunc_generated_by_libtool_p ()\n{\n  $GREP \"^# Generated by .*$PACKAGE\" > /dev/null 2>&1\n}\n\n# func_lalib_p file\n# True iff FILE is a libtool '.la' library or '.lo' object file.\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_lalib_p ()\n{\n    test -f \"$1\" &&\n      $SED -e 4q \"$1\" 2>/dev/null | func_generated_by_libtool_p\n}\n\n# func_lalib_unsafe_p file\n# True iff FILE is a libtool '.la' library or '.lo' object file.\n# This function implements the same check as func_lalib_p without\n# resorting to external programs.  To this end, it redirects stdin and\n# closes it afterwards, without saving the original file descriptor.\n# As a safety measure, use it only where a negative result would be\n# fatal anyway.  Works if 'file' does not exist.\nfunc_lalib_unsafe_p ()\n{\n    lalib_p=no\n    if test -f \"$1\" && test -r \"$1\" && exec 5<&0 <\"$1\"; then\n\tfor lalib_p_l in 1 2 3 4\n\tdo\n\t    read lalib_p_line\n\t    case $lalib_p_line in\n\t\t\\#\\ Generated\\ by\\ *$PACKAGE* ) lalib_p=yes; break;;\n\t    esac\n\tdone\n\texec 0<&5 5<&-\n    fi\n    test yes = \"$lalib_p\"\n}\n\n# func_ltwrapper_script_p file\n# True iff FILE is a libtool wrapper script\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_ltwrapper_script_p ()\n{\n    test -f \"$1\" &&\n      $lt_truncate_bin < \"$1\" 2>/dev/null | func_generated_by_libtool_p\n}\n\n# func_ltwrapper_executable_p file\n# True iff FILE is a libtool wrapper executable\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_ltwrapper_executable_p ()\n{\n    func_ltwrapper_exec_suffix=\n    case $1 in\n    *.exe) ;;\n    *) func_ltwrapper_exec_suffix=.exe ;;\n    esac\n    $GREP \"$magic_exe\" \"$1$func_ltwrapper_exec_suffix\" >/dev/null 2>&1\n}\n\n# func_ltwrapper_scriptname file\n# Assumes file is an ltwrapper_executable\n# uses $file to determine the appropriate filename for a\n# temporary ltwrapper_script.\nfunc_ltwrapper_scriptname ()\n{\n    func_dirname_and_basename \"$1\" \"\" \".\"\n    func_stripname '' '.exe' \"$func_basename_result\"\n    func_ltwrapper_scriptname_result=$func_dirname_result/$objdir/${func_stripname_result}_ltshwrapper\n}\n\n# func_ltwrapper_p file\n# True iff FILE is a libtool wrapper script or wrapper executable\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_ltwrapper_p ()\n{\n    func_ltwrapper_script_p \"$1\" || func_ltwrapper_executable_p \"$1\"\n}\n\n\n# func_execute_cmds commands fail_cmd\n# Execute tilde-delimited COMMANDS.\n# If FAIL_CMD is given, eval that upon failure.\n# FAIL_CMD may read-access the current command in variable CMD!\nfunc_execute_cmds ()\n{\n    $debug_cmd\n\n    save_ifs=$IFS; IFS='~'\n    for cmd in $1; do\n      IFS=$sp$nl\n      eval cmd=\\\"$cmd\\\"\n      IFS=$save_ifs\n      func_show_eval \"$cmd\" \"${2-:}\"\n    done\n    IFS=$save_ifs\n}\n\n\n# func_source file\n# Source FILE, adding directory component if necessary.\n# Note that it is not necessary on cygwin/mingw to append a dot to\n# FILE even if both FILE and FILE.exe exist: automatic-append-.exe\n# behavior happens only for exec(3), not for open(2)!  Also, sourcing\n# 'FILE.' does not work on cygwin managed mounts.\nfunc_source ()\n{\n    $debug_cmd\n\n    case $1 in\n    */* | *\\\\*)\t. \"$1\" ;;\n    *)\t\t. \"./$1\" ;;\n    esac\n}\n\n\n# func_resolve_sysroot PATH\n# Replace a leading = in PATH with a sysroot.  Store the result into\n# func_resolve_sysroot_result\nfunc_resolve_sysroot ()\n{\n  func_resolve_sysroot_result=$1\n  case $func_resolve_sysroot_result in\n  =*)\n    func_stripname '=' '' \"$func_resolve_sysroot_result\"\n    func_resolve_sysroot_result=$lt_sysroot$func_stripname_result\n    ;;\n  esac\n}\n\n# func_replace_sysroot PATH\n# If PATH begins with the sysroot, replace it with = and\n# store the result into func_replace_sysroot_result.\nfunc_replace_sysroot ()\n{\n  case $lt_sysroot:$1 in\n  ?*:\"$lt_sysroot\"*)\n    func_stripname \"$lt_sysroot\" '' \"$1\"\n    func_replace_sysroot_result='='$func_stripname_result\n    ;;\n  *)\n    # Including no sysroot.\n    func_replace_sysroot_result=$1\n    ;;\n  esac\n}\n\n# func_infer_tag arg\n# Infer tagged configuration to use if any are available and\n# if one wasn't chosen via the \"--tag\" command line option.\n# Only attempt this if the compiler in the base compile\n# command doesn't match the default compiler.\n# arg is usually of the form 'gcc ...'\nfunc_infer_tag ()\n{\n    $debug_cmd\n\n    if test -n \"$available_tags\" && test -z \"$tagname\"; then\n      CC_quoted=\n      for arg in $CC; do\n\tfunc_append_quoted CC_quoted \"$arg\"\n      done\n      CC_expanded=`func_echo_all $CC`\n      CC_quoted_expanded=`func_echo_all $CC_quoted`\n      case $@ in\n      # Blanks in the command may have been stripped by the calling shell,\n      # but not from the CC environment variable when configure was run.\n      \" $CC \"* | \"$CC \"* | \" $CC_expanded \"* | \"$CC_expanded \"* | \\\n      \" $CC_quoted\"* | \"$CC_quoted \"* | \" $CC_quoted_expanded \"* | \"$CC_quoted_expanded \"*) ;;\n      # Blanks at the start of $base_compile will cause this to fail\n      # if we don't check for them as well.\n      *)\n\tfor z in $available_tags; do\n\t  if $GREP \"^# ### BEGIN LIBTOOL TAG CONFIG: $z$\" < \"$progpath\" > /dev/null; then\n\t    # Evaluate the configuration.\n\t    eval \"`$SED -n -e '/^# ### BEGIN LIBTOOL TAG CONFIG: '$z'$/,/^# ### END LIBTOOL TAG CONFIG: '$z'$/p' < $progpath`\"\n\t    CC_quoted=\n\t    for arg in $CC; do\n\t      # Double-quote args containing other shell metacharacters.\n\t      func_append_quoted CC_quoted \"$arg\"\n\t    done\n\t    CC_expanded=`func_echo_all $CC`\n\t    CC_quoted_expanded=`func_echo_all $CC_quoted`\n\t    case \"$@ \" in\n\t    \" $CC \"* | \"$CC \"* | \" $CC_expanded \"* | \"$CC_expanded \"* | \\\n\t    \" $CC_quoted\"* | \"$CC_quoted \"* | \" $CC_quoted_expanded \"* | \"$CC_quoted_expanded \"*)\n\t      # The compiler in the base compile command matches\n\t      # the one in the tagged configuration.\n\t      # Assume this is the tagged configuration we want.\n\t      tagname=$z\n\t      break\n\t      ;;\n\t    esac\n\t  fi\n\tdone\n\t# If $tagname still isn't set, then no tagged configuration\n\t# was found and let the user know that the \"--tag\" command\n\t# line option must be used.\n\tif test -z \"$tagname\"; then\n\t  func_echo \"unable to infer tagged configuration\"\n\t  func_fatal_error \"specify a tag with '--tag'\"\n#\telse\n#\t  func_verbose \"using $tagname tagged configuration\"\n\tfi\n\t;;\n      esac\n    fi\n}\n\n\n\n# func_write_libtool_object output_name pic_name nonpic_name\n# Create a libtool object file (analogous to a \".la\" file),\n# but don't create it if we're doing a dry run.\nfunc_write_libtool_object ()\n{\n    write_libobj=$1\n    if test yes = \"$build_libtool_libs\"; then\n      write_lobj=\\'$2\\'\n    else\n      write_lobj=none\n    fi\n\n    if test yes = \"$build_old_libs\"; then\n      write_oldobj=\\'$3\\'\n    else\n      write_oldobj=none\n    fi\n\n    $opt_dry_run || {\n      cat >${write_libobj}T <<EOF\n# $write_libobj - a libtool object file\n# Generated by $PROGRAM (GNU $PACKAGE) $VERSION\n#\n# Please DO NOT delete this file!\n# It is necessary for linking the library.\n\n# Name of the PIC object.\npic_object=$write_lobj\n\n# Name of the non-PIC object\nnon_pic_object=$write_oldobj\n\nEOF\n      $MV \"${write_libobj}T\" \"$write_libobj\"\n    }\n}\n\n\n##################################################\n# FILE NAME AND PATH CONVERSION HELPER FUNCTIONS #\n##################################################\n\n# func_convert_core_file_wine_to_w32 ARG\n# Helper function used by file name conversion functions when $build is *nix,\n# and $host is mingw, cygwin, or some other w32 environment. Relies on a\n# correctly configured wine environment available, with the winepath program\n# in $build's $PATH.\n#\n# ARG is the $build file name to be converted to w32 format.\n# Result is available in $func_convert_core_file_wine_to_w32_result, and will\n# be empty on error (or when ARG is empty)\nfunc_convert_core_file_wine_to_w32 ()\n{\n  $debug_cmd\n\n  func_convert_core_file_wine_to_w32_result=$1\n  if test -n \"$1\"; then\n    # Unfortunately, winepath does not exit with a non-zero error code, so we\n    # are forced to check the contents of stdout. On the other hand, if the\n    # command is not found, the shell will set an exit code of 127 and print\n    # *an error message* to stdout. So we must check for both error code of\n    # zero AND non-empty stdout, which explains the odd construction:\n    func_convert_core_file_wine_to_w32_tmp=`winepath -w \"$1\" 2>/dev/null`\n    if test \"$?\" -eq 0 && test -n \"$func_convert_core_file_wine_to_w32_tmp\"; then\n      func_convert_core_file_wine_to_w32_result=`$ECHO \"$func_convert_core_file_wine_to_w32_tmp\" |\n        $SED -e \"$sed_naive_backslashify\"`\n    else\n      func_convert_core_file_wine_to_w32_result=\n    fi\n  fi\n}\n# end: func_convert_core_file_wine_to_w32\n\n\n# func_convert_core_path_wine_to_w32 ARG\n# Helper function used by path conversion functions when $build is *nix, and\n# $host is mingw, cygwin, or some other w32 environment. Relies on a correctly\n# configured wine environment available, with the winepath program in $build's\n# $PATH. Assumes ARG has no leading or trailing path separator characters.\n#\n# ARG is path to be converted from $build format to win32.\n# Result is available in $func_convert_core_path_wine_to_w32_result.\n# Unconvertible file (directory) names in ARG are skipped; if no directory names\n# are convertible, then the result may be empty.\nfunc_convert_core_path_wine_to_w32 ()\n{\n  $debug_cmd\n\n  # unfortunately, winepath doesn't convert paths, only file names\n  func_convert_core_path_wine_to_w32_result=\n  if test -n \"$1\"; then\n    oldIFS=$IFS\n    IFS=:\n    for func_convert_core_path_wine_to_w32_f in $1; do\n      IFS=$oldIFS\n      func_convert_core_file_wine_to_w32 \"$func_convert_core_path_wine_to_w32_f\"\n      if test -n \"$func_convert_core_file_wine_to_w32_result\"; then\n        if test -z \"$func_convert_core_path_wine_to_w32_result\"; then\n          func_convert_core_path_wine_to_w32_result=$func_convert_core_file_wine_to_w32_result\n        else\n          func_append func_convert_core_path_wine_to_w32_result \";$func_convert_core_file_wine_to_w32_result\"\n        fi\n      fi\n    done\n    IFS=$oldIFS\n  fi\n}\n# end: func_convert_core_path_wine_to_w32\n\n\n# func_cygpath ARGS...\n# Wrapper around calling the cygpath program via LT_CYGPATH. This is used when\n# when (1) $build is *nix and Cygwin is hosted via a wine environment; or (2)\n# $build is MSYS and $host is Cygwin, or (3) $build is Cygwin. In case (1) or\n# (2), returns the Cygwin file name or path in func_cygpath_result (input\n# file name or path is assumed to be in w32 format, as previously converted\n# from $build's *nix or MSYS format). In case (3), returns the w32 file name\n# or path in func_cygpath_result (input file name or path is assumed to be in\n# Cygwin format). Returns an empty string on error.\n#\n# ARGS are passed to cygpath, with the last one being the file name or path to\n# be converted.\n#\n# Specify the absolute *nix (or w32) name to cygpath in the LT_CYGPATH\n# environment variable; do not put it in $PATH.\nfunc_cygpath ()\n{\n  $debug_cmd\n\n  if test -n \"$LT_CYGPATH\" && test -f \"$LT_CYGPATH\"; then\n    func_cygpath_result=`$LT_CYGPATH \"$@\" 2>/dev/null`\n    if test \"$?\" -ne 0; then\n      # on failure, ensure result is empty\n      func_cygpath_result=\n    fi\n  else\n    func_cygpath_result=\n    func_error \"LT_CYGPATH is empty or specifies non-existent file: '$LT_CYGPATH'\"\n  fi\n}\n#end: func_cygpath\n\n\n# func_convert_core_msys_to_w32 ARG\n# Convert file name or path ARG from MSYS format to w32 format.  Return\n# result in func_convert_core_msys_to_w32_result.\nfunc_convert_core_msys_to_w32 ()\n{\n  $debug_cmd\n\n  # awkward: cmd appends spaces to result\n  func_convert_core_msys_to_w32_result=`( cmd //c echo \"$1\" ) 2>/dev/null |\n    $SED -e 's/[ ]*$//' -e \"$sed_naive_backslashify\"`\n}\n#end: func_convert_core_msys_to_w32\n\n\n# func_convert_file_check ARG1 ARG2\n# Verify that ARG1 (a file name in $build format) was converted to $host\n# format in ARG2. Otherwise, emit an error message, but continue (resetting\n# func_to_host_file_result to ARG1).\nfunc_convert_file_check ()\n{\n  $debug_cmd\n\n  if test -z \"$2\" && test -n \"$1\"; then\n    func_error \"Could not determine host file name corresponding to\"\n    func_error \"  '$1'\"\n    func_error \"Continuing, but uninstalled executables may not work.\"\n    # Fallback:\n    func_to_host_file_result=$1\n  fi\n}\n# end func_convert_file_check\n\n\n# func_convert_path_check FROM_PATHSEP TO_PATHSEP FROM_PATH TO_PATH\n# Verify that FROM_PATH (a path in $build format) was converted to $host\n# format in TO_PATH. Otherwise, emit an error message, but continue, resetting\n# func_to_host_file_result to a simplistic fallback value (see below).\nfunc_convert_path_check ()\n{\n  $debug_cmd\n\n  if test -z \"$4\" && test -n \"$3\"; then\n    func_error \"Could not determine the host path corresponding to\"\n    func_error \"  '$3'\"\n    func_error \"Continuing, but uninstalled executables may not work.\"\n    # Fallback.  This is a deliberately simplistic \"conversion\" and\n    # should not be \"improved\".  See libtool.info.\n    if test \"x$1\" != \"x$2\"; then\n      lt_replace_pathsep_chars=\"s|$1|$2|g\"\n      func_to_host_path_result=`echo \"$3\" |\n        $SED -e \"$lt_replace_pathsep_chars\"`\n    else\n      func_to_host_path_result=$3\n    fi\n  fi\n}\n# end func_convert_path_check\n\n\n# func_convert_path_front_back_pathsep FRONTPAT BACKPAT REPL ORIG\n# Modifies func_to_host_path_result by prepending REPL if ORIG matches FRONTPAT\n# and appending REPL if ORIG matches BACKPAT.\nfunc_convert_path_front_back_pathsep ()\n{\n  $debug_cmd\n\n  case $4 in\n  $1 ) func_to_host_path_result=$3$func_to_host_path_result\n    ;;\n  esac\n  case $4 in\n  $2 ) func_append func_to_host_path_result \"$3\"\n    ;;\n  esac\n}\n# end func_convert_path_front_back_pathsep\n\n\n##################################################\n# $build to $host FILE NAME CONVERSION FUNCTIONS #\n##################################################\n# invoked via '$to_host_file_cmd ARG'\n#\n# In each case, ARG is the path to be converted from $build to $host format.\n# Result will be available in $func_to_host_file_result.\n\n\n# func_to_host_file ARG\n# Converts the file name ARG from $build format to $host format. Return result\n# in func_to_host_file_result.\nfunc_to_host_file ()\n{\n  $debug_cmd\n\n  $to_host_file_cmd \"$1\"\n}\n# end func_to_host_file\n\n\n# func_to_tool_file ARG LAZY\n# converts the file name ARG from $build format to toolchain format. Return\n# result in func_to_tool_file_result.  If the conversion in use is listed\n# in (the comma separated) LAZY, no conversion takes place.\nfunc_to_tool_file ()\n{\n  $debug_cmd\n\n  case ,$2, in\n    *,\"$to_tool_file_cmd\",*)\n      func_to_tool_file_result=$1\n      ;;\n    *)\n      $to_tool_file_cmd \"$1\"\n      func_to_tool_file_result=$func_to_host_file_result\n      ;;\n  esac\n}\n# end func_to_tool_file\n\n\n# func_convert_file_noop ARG\n# Copy ARG to func_to_host_file_result.\nfunc_convert_file_noop ()\n{\n  func_to_host_file_result=$1\n}\n# end func_convert_file_noop\n\n\n# func_convert_file_msys_to_w32 ARG\n# Convert file name ARG from (mingw) MSYS to (mingw) w32 format; automatic\n# conversion to w32 is not available inside the cwrapper.  Returns result in\n# func_to_host_file_result.\nfunc_convert_file_msys_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_file_result=$1\n  if test -n \"$1\"; then\n    func_convert_core_msys_to_w32 \"$1\"\n    func_to_host_file_result=$func_convert_core_msys_to_w32_result\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_msys_to_w32\n\n\n# func_convert_file_cygwin_to_w32 ARG\n# Convert file name ARG from Cygwin to w32 format.  Returns result in\n# func_to_host_file_result.\nfunc_convert_file_cygwin_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_file_result=$1\n  if test -n \"$1\"; then\n    # because $build is cygwin, we call \"the\" cygpath in $PATH; no need to use\n    # LT_CYGPATH in this case.\n    func_to_host_file_result=`cygpath -m \"$1\"`\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_cygwin_to_w32\n\n\n# func_convert_file_nix_to_w32 ARG\n# Convert file name ARG from *nix to w32 format.  Requires a wine environment\n# and a working winepath. Returns result in func_to_host_file_result.\nfunc_convert_file_nix_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_file_result=$1\n  if test -n \"$1\"; then\n    func_convert_core_file_wine_to_w32 \"$1\"\n    func_to_host_file_result=$func_convert_core_file_wine_to_w32_result\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_nix_to_w32\n\n\n# func_convert_file_msys_to_cygwin ARG\n# Convert file name ARG from MSYS to Cygwin format.  Requires LT_CYGPATH set.\n# Returns result in func_to_host_file_result.\nfunc_convert_file_msys_to_cygwin ()\n{\n  $debug_cmd\n\n  func_to_host_file_result=$1\n  if test -n \"$1\"; then\n    func_convert_core_msys_to_w32 \"$1\"\n    func_cygpath -u \"$func_convert_core_msys_to_w32_result\"\n    func_to_host_file_result=$func_cygpath_result\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_msys_to_cygwin\n\n\n# func_convert_file_nix_to_cygwin ARG\n# Convert file name ARG from *nix to Cygwin format.  Requires Cygwin installed\n# in a wine environment, working winepath, and LT_CYGPATH set.  Returns result\n# in func_to_host_file_result.\nfunc_convert_file_nix_to_cygwin ()\n{\n  $debug_cmd\n\n  func_to_host_file_result=$1\n  if test -n \"$1\"; then\n    # convert from *nix to w32, then use cygpath to convert from w32 to cygwin.\n    func_convert_core_file_wine_to_w32 \"$1\"\n    func_cygpath -u \"$func_convert_core_file_wine_to_w32_result\"\n    func_to_host_file_result=$func_cygpath_result\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_nix_to_cygwin\n\n\n#############################################\n# $build to $host PATH CONVERSION FUNCTIONS #\n#############################################\n# invoked via '$to_host_path_cmd ARG'\n#\n# In each case, ARG is the path to be converted from $build to $host format.\n# The result will be available in $func_to_host_path_result.\n#\n# Path separators are also converted from $build format to $host format.  If\n# ARG begins or ends with a path separator character, it is preserved (but\n# converted to $host format) on output.\n#\n# All path conversion functions are named using the following convention:\n#   file name conversion function    : func_convert_file_X_to_Y ()\n#   path conversion function         : func_convert_path_X_to_Y ()\n# where, for any given $build/$host combination the 'X_to_Y' value is the\n# same.  If conversion functions are added for new $build/$host combinations,\n# the two new functions must follow this pattern, or func_init_to_host_path_cmd\n# will break.\n\n\n# func_init_to_host_path_cmd\n# Ensures that function \"pointer\" variable $to_host_path_cmd is set to the\n# appropriate value, based on the value of $to_host_file_cmd.\nto_host_path_cmd=\nfunc_init_to_host_path_cmd ()\n{\n  $debug_cmd\n\n  if test -z \"$to_host_path_cmd\"; then\n    func_stripname 'func_convert_file_' '' \"$to_host_file_cmd\"\n    to_host_path_cmd=func_convert_path_$func_stripname_result\n  fi\n}\n\n\n# func_to_host_path ARG\n# Converts the path ARG from $build format to $host format. Return result\n# in func_to_host_path_result.\nfunc_to_host_path ()\n{\n  $debug_cmd\n\n  func_init_to_host_path_cmd\n  $to_host_path_cmd \"$1\"\n}\n# end func_to_host_path\n\n\n# func_convert_path_noop ARG\n# Copy ARG to func_to_host_path_result.\nfunc_convert_path_noop ()\n{\n  func_to_host_path_result=$1\n}\n# end func_convert_path_noop\n\n\n# func_convert_path_msys_to_w32 ARG\n# Convert path ARG from (mingw) MSYS to (mingw) w32 format; automatic\n# conversion to w32 is not available inside the cwrapper.  Returns result in\n# func_to_host_path_result.\nfunc_convert_path_msys_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_path_result=$1\n  if test -n \"$1\"; then\n    # Remove leading and trailing path separator characters from ARG.  MSYS\n    # behavior is inconsistent here; cygpath turns them into '.;' and ';.';\n    # and winepath ignores them completely.\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_msys_to_w32 \"$func_to_host_path_tmp1\"\n    func_to_host_path_result=$func_convert_core_msys_to_w32_result\n    func_convert_path_check : \";\" \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" \";\" \"$1\"\n  fi\n}\n# end func_convert_path_msys_to_w32\n\n\n# func_convert_path_cygwin_to_w32 ARG\n# Convert path ARG from Cygwin to w32 format.  Returns result in\n# func_to_host_file_result.\nfunc_convert_path_cygwin_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_path_result=$1\n  if test -n \"$1\"; then\n    # See func_convert_path_msys_to_w32:\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_to_host_path_result=`cygpath -m -p \"$func_to_host_path_tmp1\"`\n    func_convert_path_check : \";\" \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" \";\" \"$1\"\n  fi\n}\n# end func_convert_path_cygwin_to_w32\n\n\n# func_convert_path_nix_to_w32 ARG\n# Convert path ARG from *nix to w32 format.  Requires a wine environment and\n# a working winepath.  Returns result in func_to_host_file_result.\nfunc_convert_path_nix_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_path_result=$1\n  if test -n \"$1\"; then\n    # See func_convert_path_msys_to_w32:\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_path_wine_to_w32 \"$func_to_host_path_tmp1\"\n    func_to_host_path_result=$func_convert_core_path_wine_to_w32_result\n    func_convert_path_check : \";\" \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" \";\" \"$1\"\n  fi\n}\n# end func_convert_path_nix_to_w32\n\n\n# func_convert_path_msys_to_cygwin ARG\n# Convert path ARG from MSYS to Cygwin format.  Requires LT_CYGPATH set.\n# Returns result in func_to_host_file_result.\nfunc_convert_path_msys_to_cygwin ()\n{\n  $debug_cmd\n\n  func_to_host_path_result=$1\n  if test -n \"$1\"; then\n    # See func_convert_path_msys_to_w32:\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_msys_to_w32 \"$func_to_host_path_tmp1\"\n    func_cygpath -u -p \"$func_convert_core_msys_to_w32_result\"\n    func_to_host_path_result=$func_cygpath_result\n    func_convert_path_check : : \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" : \"$1\"\n  fi\n}\n# end func_convert_path_msys_to_cygwin\n\n\n# func_convert_path_nix_to_cygwin ARG\n# Convert path ARG from *nix to Cygwin format.  Requires Cygwin installed in a\n# a wine environment, working winepath, and LT_CYGPATH set.  Returns result in\n# func_to_host_file_result.\nfunc_convert_path_nix_to_cygwin ()\n{\n  $debug_cmd\n\n  func_to_host_path_result=$1\n  if test -n \"$1\"; then\n    # Remove leading and trailing path separator characters from\n    # ARG. msys behavior is inconsistent here, cygpath turns them\n    # into '.;' and ';.', and winepath ignores them completely.\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_path_wine_to_w32 \"$func_to_host_path_tmp1\"\n    func_cygpath -u -p \"$func_convert_core_path_wine_to_w32_result\"\n    func_to_host_path_result=$func_cygpath_result\n    func_convert_path_check : : \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" : \"$1\"\n  fi\n}\n# end func_convert_path_nix_to_cygwin\n\n\n# func_dll_def_p FILE\n# True iff FILE is a Windows DLL '.def' file.\n# Keep in sync with _LT_DLL_DEF_P in libtool.m4\nfunc_dll_def_p ()\n{\n  $debug_cmd\n\n  func_dll_def_p_tmp=`$SED -n \\\n    -e 's/^[\t ]*//' \\\n    -e '/^\\(;.*\\)*$/d' \\\n    -e 's/^\\(EXPORTS\\|LIBRARY\\)\\([\t ].*\\)*$/DEF/p' \\\n    -e q \\\n    \"$1\"`\n  test DEF = \"$func_dll_def_p_tmp\"\n}\n\n\n# func_mode_compile arg...\nfunc_mode_compile ()\n{\n    $debug_cmd\n\n    # Get the compilation command and the source file.\n    base_compile=\n    srcfile=$nonopt  #  always keep a non-empty value in \"srcfile\"\n    suppress_opt=yes\n    suppress_output=\n    arg_mode=normal\n    libobj=\n    later=\n    pie_flag=\n\n    for arg\n    do\n      case $arg_mode in\n      arg  )\n\t# do not \"continue\".  Instead, add this to base_compile\n\tlastarg=$arg\n\targ_mode=normal\n\t;;\n\n      target )\n\tlibobj=$arg\n\targ_mode=normal\n\tcontinue\n\t;;\n\n      normal )\n\t# Accept any command-line options.\n\tcase $arg in\n\t-o)\n\t  test -n \"$libobj\" && \\\n\t    func_fatal_error \"you cannot specify '-o' more than once\"\n\t  arg_mode=target\n\t  continue\n\t  ;;\n\n\t-pie | -fpie | -fPIE)\n          func_append pie_flag \" $arg\"\n\t  continue\n\t  ;;\n\n\t-shared | -static | -prefer-pic | -prefer-non-pic)\n\t  func_append later \" $arg\"\n\t  continue\n\t  ;;\n\n\t-no-suppress)\n\t  suppress_opt=no\n\t  continue\n\t  ;;\n\n\t-Xcompiler)\n\t  arg_mode=arg  #  the next one goes into the \"base_compile\" arg list\n\t  continue      #  The current \"srcfile\" will either be retained or\n\t  ;;            #  replaced later.  I would guess that would be a bug.\n\n\t-Wc,*)\n\t  func_stripname '-Wc,' '' \"$arg\"\n\t  args=$func_stripname_result\n\t  lastarg=\n\t  save_ifs=$IFS; IFS=,\n\t  for arg in $args; do\n\t    IFS=$save_ifs\n\t    func_append_quoted lastarg \"$arg\"\n\t  done\n\t  IFS=$save_ifs\n\t  func_stripname ' ' '' \"$lastarg\"\n\t  lastarg=$func_stripname_result\n\n\t  # Add the arguments to base_compile.\n\t  func_append base_compile \" $lastarg\"\n\t  continue\n\t  ;;\n\n\t*)\n\t  # Accept the current argument as the source file.\n\t  # The previous \"srcfile\" becomes the current argument.\n\t  #\n\t  lastarg=$srcfile\n\t  srcfile=$arg\n\t  ;;\n\tesac  #  case $arg\n\t;;\n      esac    #  case $arg_mode\n\n      # Aesthetically quote the previous argument.\n      func_append_quoted base_compile \"$lastarg\"\n    done # for arg\n\n    case $arg_mode in\n    arg)\n      func_fatal_error \"you must specify an argument for -Xcompile\"\n      ;;\n    target)\n      func_fatal_error \"you must specify a target with '-o'\"\n      ;;\n    *)\n      # Get the name of the library object.\n      test -z \"$libobj\" && {\n\tfunc_basename \"$srcfile\"\n\tlibobj=$func_basename_result\n      }\n      ;;\n    esac\n\n    # Recognize several different file suffixes.\n    # If the user specifies -o file.o, it is replaced with file.lo\n    case $libobj in\n    *.[cCFSifmso] | \\\n    *.ada | *.adb | *.ads | *.asm | \\\n    *.c++ | *.cc | *.ii | *.class | *.cpp | *.cxx | \\\n    *.[fF][09]? | *.for | *.java | *.go | *.obj | *.sx | *.cu | *.cup)\n      func_xform \"$libobj\"\n      libobj=$func_xform_result\n      ;;\n    esac\n\n    case $libobj in\n    *.lo) func_lo2o \"$libobj\"; obj=$func_lo2o_result ;;\n    *)\n      func_fatal_error \"cannot determine name of library object from '$libobj'\"\n      ;;\n    esac\n\n    func_infer_tag $base_compile\n\n    for arg in $later; do\n      case $arg in\n      -shared)\n\ttest yes = \"$build_libtool_libs\" \\\n\t  || func_fatal_configuration \"cannot build a shared library\"\n\tbuild_old_libs=no\n\tcontinue\n\t;;\n\n      -static)\n\tbuild_libtool_libs=no\n\tbuild_old_libs=yes\n\tcontinue\n\t;;\n\n      -prefer-pic)\n\tpic_mode=yes\n\tcontinue\n\t;;\n\n      -prefer-non-pic)\n\tpic_mode=no\n\tcontinue\n\t;;\n      esac\n    done\n\n    func_quote_for_eval \"$libobj\"\n    test \"X$libobj\" != \"X$func_quote_for_eval_result\" \\\n      && $ECHO \"X$libobj\" | $GREP '[]~#^*{};<>?\"'\"'\"'\t &()|`$[]' \\\n      && func_warning \"libobj name '$libobj' may not contain shell special characters.\"\n    func_dirname_and_basename \"$obj\" \"/\" \"\"\n    objname=$func_basename_result\n    xdir=$func_dirname_result\n    lobj=$xdir$objdir/$objname\n\n    test -z \"$base_compile\" && \\\n      func_fatal_help \"you must specify a compilation command\"\n\n    # Delete any leftover library objects.\n    if test yes = \"$build_old_libs\"; then\n      removelist=\"$obj $lobj $libobj ${libobj}T\"\n    else\n      removelist=\"$lobj $libobj ${libobj}T\"\n    fi\n\n    # On Cygwin there's no \"real\" PIC flag so we must build both object types\n    case $host_os in\n    cygwin* | mingw* | pw32* | os2* | cegcc*)\n      pic_mode=default\n      ;;\n    esac\n    if test no = \"$pic_mode\" && test pass_all != \"$deplibs_check_method\"; then\n      # non-PIC code in shared libraries is not supported\n      pic_mode=default\n    fi\n\n    # Calculate the filename of the output object if compiler does\n    # not support -o with -c\n    if test no = \"$compiler_c_o\"; then\n      output_obj=`$ECHO \"$srcfile\" | $SED 's%^.*/%%; s%\\.[^.]*$%%'`.$objext\n      lockfile=$output_obj.lock\n    else\n      output_obj=\n      need_locks=no\n      lockfile=\n    fi\n\n    # Lock this critical section if it is needed\n    # We use this script file to make the link, it avoids creating a new file\n    if test yes = \"$need_locks\"; then\n      until $opt_dry_run || ln \"$progpath\" \"$lockfile\" 2>/dev/null; do\n\tfunc_echo \"Waiting for $lockfile to be removed\"\n\tsleep 2\n      done\n    elif test warn = \"$need_locks\"; then\n      if test -f \"$lockfile\"; then\n\t$ECHO \"\\\n*** ERROR, $lockfile exists and contains:\n`cat $lockfile 2>/dev/null`\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support '-c' and '-o' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler.\"\n\n\t$opt_dry_run || $RM $removelist\n\texit $EXIT_FAILURE\n      fi\n      func_append removelist \" $output_obj\"\n      $ECHO \"$srcfile\" > \"$lockfile\"\n    fi\n\n    $opt_dry_run || $RM $removelist\n    func_append removelist \" $lockfile\"\n    trap '$opt_dry_run || $RM $removelist; exit $EXIT_FAILURE' 1 2 15\n\n    func_to_tool_file \"$srcfile\" func_convert_file_msys_to_w32\n    srcfile=$func_to_tool_file_result\n    func_quote_for_eval \"$srcfile\"\n    qsrcfile=$func_quote_for_eval_result\n\n    # Only build a PIC object if we are building libtool libraries.\n    if test yes = \"$build_libtool_libs\"; then\n      # Without this assignment, base_compile gets emptied.\n      fbsd_hideous_sh_bug=$base_compile\n\n      if test no != \"$pic_mode\"; then\n\tcommand=\"$base_compile $qsrcfile $pic_flag\"\n      else\n\t# Don't build PIC code\n\tcommand=\"$base_compile $qsrcfile\"\n      fi\n\n      func_mkdir_p \"$xdir$objdir\"\n\n      if test -z \"$output_obj\"; then\n\t# Place PIC objects in $objdir\n\tfunc_append command \" -o $lobj\"\n      fi\n\n      func_show_eval_locale \"$command\"\t\\\n          'test -n \"$output_obj\" && $RM $removelist; exit $EXIT_FAILURE'\n\n      if test warn = \"$need_locks\" &&\n\t test \"X`cat $lockfile 2>/dev/null`\" != \"X$srcfile\"; then\n\t$ECHO \"\\\n*** ERROR, $lockfile contains:\n`cat $lockfile 2>/dev/null`\n\nbut it should contain:\n$srcfile\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support '-c' and '-o' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler.\"\n\n\t$opt_dry_run || $RM $removelist\n\texit $EXIT_FAILURE\n      fi\n\n      # Just move the object if needed, then go on to compile the next one\n      if test -n \"$output_obj\" && test \"X$output_obj\" != \"X$lobj\"; then\n\tfunc_show_eval '$MV \"$output_obj\" \"$lobj\"' \\\n\t  'error=$?; $opt_dry_run || $RM $removelist; exit $error'\n      fi\n\n      # Allow error messages only from the first compilation.\n      if test yes = \"$suppress_opt\"; then\n\tsuppress_output=' >/dev/null 2>&1'\n      fi\n    fi\n\n    # Only build a position-dependent object if we build old libraries.\n    if test yes = \"$build_old_libs\"; then\n      if test yes != \"$pic_mode\"; then\n\t# Don't build PIC code\n\tcommand=\"$base_compile $qsrcfile$pie_flag\"\n      else\n\tcommand=\"$base_compile $qsrcfile $pic_flag\"\n      fi\n      if test yes = \"$compiler_c_o\"; then\n\tfunc_append command \" -o $obj\"\n      fi\n\n      # Suppress compiler output if we already did a PIC compilation.\n      func_append command \"$suppress_output\"\n      func_show_eval_locale \"$command\" \\\n        '$opt_dry_run || $RM $removelist; exit $EXIT_FAILURE'\n\n      if test warn = \"$need_locks\" &&\n\t test \"X`cat $lockfile 2>/dev/null`\" != \"X$srcfile\"; then\n\t$ECHO \"\\\n*** ERROR, $lockfile contains:\n`cat $lockfile 2>/dev/null`\n\nbut it should contain:\n$srcfile\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support '-c' and '-o' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler.\"\n\n\t$opt_dry_run || $RM $removelist\n\texit $EXIT_FAILURE\n      fi\n\n      # Just move the object if needed\n      if test -n \"$output_obj\" && test \"X$output_obj\" != \"X$obj\"; then\n\tfunc_show_eval '$MV \"$output_obj\" \"$obj\"' \\\n\t  'error=$?; $opt_dry_run || $RM $removelist; exit $error'\n      fi\n    fi\n\n    $opt_dry_run || {\n      func_write_libtool_object \"$libobj\" \"$objdir/$objname\" \"$objname\"\n\n      # Unlock the critical section if it was locked\n      if test no != \"$need_locks\"; then\n\tremovelist=$lockfile\n        $RM \"$lockfile\"\n      fi\n    }\n\n    exit $EXIT_SUCCESS\n}\n\n$opt_help || {\n  test compile = \"$opt_mode\" && func_mode_compile ${1+\"$@\"}\n}\n\nfunc_mode_help ()\n{\n    # We need to display help for each of the modes.\n    case $opt_mode in\n      \"\")\n        # Generic help is extracted from the usage comments\n        # at the start of this file.\n        func_help\n        ;;\n\n      clean)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=clean RM [RM-OPTION]... FILE...\n\nRemove files from the build directory.\n\nRM is the name of the program to use to delete files associated with each FILE\n(typically '/bin/rm').  RM-OPTIONS are options (such as '-f') to be passed\nto RM.\n\nIf FILE is a libtool library, object or program, all the files associated\nwith it are deleted. Otherwise, only FILE itself is deleted using RM.\"\n        ;;\n\n      compile)\n      $ECHO \\\n\"Usage: $progname [OPTION]... --mode=compile COMPILE-COMMAND... SOURCEFILE\n\nCompile a source file into a libtool library object.\n\nThis mode accepts the following additional options:\n\n  -o OUTPUT-FILE    set the output file name to OUTPUT-FILE\n  -no-suppress      do not suppress compiler output for multiple passes\n  -prefer-pic       try to build PIC objects only\n  -prefer-non-pic   try to build non-PIC objects only\n  -shared           do not build a '.o' file suitable for static linking\n  -static           only build a '.o' file suitable for static linking\n  -Wc,FLAG          pass FLAG directly to the compiler\n\nCOMPILE-COMMAND is a command to be used in creating a 'standard' object file\nfrom the given SOURCEFILE.\n\nThe output file name is determined by removing the directory component from\nSOURCEFILE, then substituting the C source code suffix '.c' with the\nlibrary object suffix, '.lo'.\"\n        ;;\n\n      execute)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=execute COMMAND [ARGS]...\n\nAutomatically set library path, then run a program.\n\nThis mode accepts the following additional options:\n\n  -dlopen FILE      add the directory containing FILE to the library path\n\nThis mode sets the library path environment variable according to '-dlopen'\nflags.\n\nIf any of the ARGS are libtool executable wrappers, then they are translated\ninto their corresponding uninstalled binary, and any of their required library\ndirectories are added to the library path.\n\nThen, COMMAND is executed, with ARGS as arguments.\"\n        ;;\n\n      finish)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=finish [LIBDIR]...\n\nComplete the installation of libtool libraries.\n\nEach LIBDIR is a directory that contains libtool libraries.\n\nThe commands that this mode executes may require superuser privileges.  Use\nthe '--dry-run' option if you just want to see what would be executed.\"\n        ;;\n\n      install)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=install INSTALL-COMMAND...\n\nInstall executables or libraries.\n\nINSTALL-COMMAND is the installation command.  The first component should be\neither the 'install' or 'cp' program.\n\nThe following components of INSTALL-COMMAND are treated specially:\n\n  -inst-prefix-dir PREFIX-DIR  Use PREFIX-DIR as a staging area for installation\n\nThe rest of the components are interpreted as arguments to that command (only\nBSD-compatible install options are recognized).\"\n        ;;\n\n      link)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=link LINK-COMMAND...\n\nLink object files or libraries together to form another library, or to\ncreate an executable program.\n\nLINK-COMMAND is a command using the C compiler that you would use to create\na program from several object files.\n\nThe following components of LINK-COMMAND are treated specially:\n\n  -all-static       do not do any dynamic linking at all\n  -avoid-version    do not add a version suffix if possible\n  -bindir BINDIR    specify path to binaries directory (for systems where\n                    libraries must be found in the PATH setting at runtime)\n  -dlopen FILE      '-dlpreopen' FILE if it cannot be dlopened at runtime\n  -dlpreopen FILE   link in FILE and add its symbols to lt_preloaded_symbols\n  -export-dynamic   allow symbols from OUTPUT-FILE to be resolved with dlsym(3)\n  -export-symbols SYMFILE\n                    try to export only the symbols listed in SYMFILE\n  -export-symbols-regex REGEX\n                    try to export only the symbols matching REGEX\n  -LLIBDIR          search LIBDIR for required installed libraries\n  -lNAME            OUTPUT-FILE requires the installed library libNAME\n  -module           build a library that can dlopened\n  -no-fast-install  disable the fast-install mode\n  -no-install       link a not-installable executable\n  -no-undefined     declare that a library does not refer to external symbols\n  -o OUTPUT-FILE    create OUTPUT-FILE from the specified objects\n  -objectlist FILE  use a list of object files found in FILE to specify objects\n  -os2dllname NAME  force a short DLL name on OS/2 (no effect on other OSes)\n  -precious-files-regex REGEX\n                    don't remove output files matching REGEX\n  -release RELEASE  specify package release information\n  -rpath LIBDIR     the created library will eventually be installed in LIBDIR\n  -R[ ]LIBDIR       add LIBDIR to the runtime path of programs and libraries\n  -shared           only do dynamic linking of libtool libraries\n  -shrext SUFFIX    override the standard shared library file extension\n  -static           do not do any dynamic linking of uninstalled libtool libraries\n  -static-libtool-libs\n                    do not do any dynamic linking of libtool libraries\n  -version-info CURRENT[:REVISION[:AGE]]\n                    specify library version info [each variable defaults to 0]\n  -weak LIBNAME     declare that the target provides the LIBNAME interface\n  -Wc,FLAG\n  -Xcompiler FLAG   pass linker-specific FLAG directly to the compiler\n  -Wl,FLAG\n  -Xlinker FLAG     pass linker-specific FLAG directly to the linker\n  -XCClinker FLAG   pass link-specific FLAG to the compiler driver (CC)\n\nAll other options (arguments beginning with '-') are ignored.\n\nEvery other argument is treated as a filename.  Files ending in '.la' are\ntreated as uninstalled libtool libraries, other files are standard or library\nobject files.\n\nIf the OUTPUT-FILE ends in '.la', then a libtool library is created,\nonly library objects ('.lo' files) may be specified, and '-rpath' is\nrequired, except when creating a convenience library.\n\nIf OUTPUT-FILE ends in '.a' or '.lib', then a standard library is created\nusing 'ar' and 'ranlib', or on Windows using 'lib'.\n\nIf OUTPUT-FILE ends in '.lo' or '.$objext', then a reloadable object file\nis created, otherwise an executable program is created.\"\n        ;;\n\n      uninstall)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=uninstall RM [RM-OPTION]... FILE...\n\nRemove libraries from an installation directory.\n\nRM is the name of the program to use to delete files associated with each FILE\n(typically '/bin/rm').  RM-OPTIONS are options (such as '-f') to be passed\nto RM.\n\nIf FILE is a libtool library, all the files associated with it are deleted.\nOtherwise, only FILE itself is deleted using RM.\"\n        ;;\n\n      *)\n        func_fatal_help \"invalid operation mode '$opt_mode'\"\n        ;;\n    esac\n\n    echo\n    $ECHO \"Try '$progname --help' for more information about other modes.\"\n}\n\n# Now that we've collected a possible --mode arg, show help if necessary\nif $opt_help; then\n  if test : = \"$opt_help\"; then\n    func_mode_help\n  else\n    {\n      func_help noexit\n      for opt_mode in compile link execute install finish uninstall clean; do\n\tfunc_mode_help\n      done\n    } | $SED -n '1p; 2,$s/^Usage:/  or: /p'\n    {\n      func_help noexit\n      for opt_mode in compile link execute install finish uninstall clean; do\n\techo\n\tfunc_mode_help\n      done\n    } |\n    $SED '1d\n      /^When reporting/,/^Report/{\n\tH\n\td\n      }\n      $x\n      /information about other modes/d\n      /more detailed .*MODE/d\n      s/^Usage:.*--mode=\\([^ ]*\\) .*/Description of \\1 mode:/'\n  fi\n  exit $?\nfi\n\n\n# func_mode_execute arg...\nfunc_mode_execute ()\n{\n    $debug_cmd\n\n    # The first argument is the command name.\n    cmd=$nonopt\n    test -z \"$cmd\" && \\\n      func_fatal_help \"you must specify a COMMAND\"\n\n    # Handle -dlopen flags immediately.\n    for file in $opt_dlopen; do\n      test -f \"$file\" \\\n\t|| func_fatal_help \"'$file' is not a file\"\n\n      dir=\n      case $file in\n      *.la)\n\tfunc_resolve_sysroot \"$file\"\n\tfile=$func_resolve_sysroot_result\n\n\t# Check to see that this really is a libtool archive.\n\tfunc_lalib_unsafe_p \"$file\" \\\n\t  || func_fatal_help \"'$lib' is not a valid libtool archive\"\n\n\t# Read the libtool library.\n\tdlname=\n\tlibrary_names=\n\tfunc_source \"$file\"\n\n\t# Skip this library if it cannot be dlopened.\n\tif test -z \"$dlname\"; then\n\t  # Warn if it was a shared library.\n\t  test -n \"$library_names\" && \\\n\t    func_warning \"'$file' was not linked with '-export-dynamic'\"\n\t  continue\n\tfi\n\n\tfunc_dirname \"$file\" \"\" \".\"\n\tdir=$func_dirname_result\n\n\tif test -f \"$dir/$objdir/$dlname\"; then\n\t  func_append dir \"/$objdir\"\n\telse\n\t  if test ! -f \"$dir/$dlname\"; then\n\t    func_fatal_error \"cannot find '$dlname' in '$dir' or '$dir/$objdir'\"\n\t  fi\n\tfi\n\t;;\n\n      *.lo)\n\t# Just add the directory containing the .lo file.\n\tfunc_dirname \"$file\" \"\" \".\"\n\tdir=$func_dirname_result\n\t;;\n\n      *)\n\tfunc_warning \"'-dlopen' is ignored for non-libtool libraries and objects\"\n\tcontinue\n\t;;\n      esac\n\n      # Get the absolute pathname.\n      absdir=`cd \"$dir\" && pwd`\n      test -n \"$absdir\" && dir=$absdir\n\n      # Now add the directory to shlibpath_var.\n      if eval \"test -z \\\"\\$$shlibpath_var\\\"\"; then\n\teval \"$shlibpath_var=\\\"\\$dir\\\"\"\n      else\n\teval \"$shlibpath_var=\\\"\\$dir:\\$$shlibpath_var\\\"\"\n      fi\n    done\n\n    # This variable tells wrapper scripts just to set shlibpath_var\n    # rather than running their programs.\n    libtool_execute_magic=$magic\n\n    # Check if any of the arguments is a wrapper script.\n    args=\n    for file\n    do\n      case $file in\n      -* | *.la | *.lo ) ;;\n      *)\n\t# Do a test to see if this is really a libtool program.\n\tif func_ltwrapper_script_p \"$file\"; then\n\t  func_source \"$file\"\n\t  # Transform arg to wrapped name.\n\t  file=$progdir/$program\n\telif func_ltwrapper_executable_p \"$file\"; then\n\t  func_ltwrapper_scriptname \"$file\"\n\t  func_source \"$func_ltwrapper_scriptname_result\"\n\t  # Transform arg to wrapped name.\n\t  file=$progdir/$program\n\tfi\n\t;;\n      esac\n      # Quote arguments (to preserve shell metacharacters).\n      func_append_quoted args \"$file\"\n    done\n\n    if $opt_dry_run; then\n      # Display what would be done.\n      if test -n \"$shlibpath_var\"; then\n\teval \"\\$ECHO \\\"\\$shlibpath_var=\\$$shlibpath_var\\\"\"\n\techo \"export $shlibpath_var\"\n      fi\n      $ECHO \"$cmd$args\"\n      exit $EXIT_SUCCESS\n    else\n      if test -n \"$shlibpath_var\"; then\n\t# Export the shlibpath_var.\n\teval \"export $shlibpath_var\"\n      fi\n\n      # Restore saved environment variables\n      for lt_var in LANG LANGUAGE LC_ALL LC_CTYPE LC_COLLATE LC_MESSAGES\n      do\n\teval \"if test \\\"\\${save_$lt_var+set}\\\" = set; then\n                $lt_var=\\$save_$lt_var; export $lt_var\n\t      else\n\t\t$lt_unset $lt_var\n\t      fi\"\n      done\n\n      # Now prepare to actually exec the command.\n      exec_cmd=\\$cmd$args\n    fi\n}\n\ntest execute = \"$opt_mode\" && func_mode_execute ${1+\"$@\"}\n\n\n# func_mode_finish arg...\nfunc_mode_finish ()\n{\n    $debug_cmd\n\n    libs=\n    libdirs=\n    admincmds=\n\n    for opt in \"$nonopt\" ${1+\"$@\"}\n    do\n      if test -d \"$opt\"; then\n\tfunc_append libdirs \" $opt\"\n\n      elif test -f \"$opt\"; then\n\tif func_lalib_unsafe_p \"$opt\"; then\n\t  func_append libs \" $opt\"\n\telse\n\t  func_warning \"'$opt' is not a valid libtool archive\"\n\tfi\n\n      else\n\tfunc_fatal_error \"invalid argument '$opt'\"\n      fi\n    done\n\n    if test -n \"$libs\"; then\n      if test -n \"$lt_sysroot\"; then\n        sysroot_regex=`$ECHO \"$lt_sysroot\" | $SED \"$sed_make_literal_regex\"`\n        sysroot_cmd=\"s/\\([ ']\\)$sysroot_regex/\\1/g;\"\n      else\n        sysroot_cmd=\n      fi\n\n      # Remove sysroot references\n      if $opt_dry_run; then\n        for lib in $libs; do\n          echo \"removing references to $lt_sysroot and '=' prefixes from $lib\"\n        done\n      else\n        tmpdir=`func_mktempdir`\n        for lib in $libs; do\n\t  $SED -e \"$sysroot_cmd s/\\([ ']-[LR]\\)=/\\1/g; s/\\([ ']\\)=/\\1/g\" $lib \\\n\t    > $tmpdir/tmp-la\n\t  mv -f $tmpdir/tmp-la $lib\n\tdone\n        ${RM}r \"$tmpdir\"\n      fi\n    fi\n\n    if test -n \"$finish_cmds$finish_eval\" && test -n \"$libdirs\"; then\n      for libdir in $libdirs; do\n\tif test -n \"$finish_cmds\"; then\n\t  # Do each command in the finish commands.\n\t  func_execute_cmds \"$finish_cmds\" 'admincmds=\"$admincmds\n'\"$cmd\"'\"'\n\tfi\n\tif test -n \"$finish_eval\"; then\n\t  # Do the single finish_eval.\n\t  eval cmds=\\\"$finish_eval\\\"\n\t  $opt_dry_run || eval \"$cmds\" || func_append admincmds \"\n       $cmds\"\n\tfi\n      done\n    fi\n\n    # Exit here if they wanted silent mode.\n    $opt_quiet && exit $EXIT_SUCCESS\n\n    if test -n \"$finish_cmds$finish_eval\" && test -n \"$libdirs\"; then\n      echo \"----------------------------------------------------------------------\"\n      echo \"Libraries have been installed in:\"\n      for libdir in $libdirs; do\n\t$ECHO \"   $libdir\"\n      done\n      echo\n      echo \"If you ever happen to want to link against installed libraries\"\n      echo \"in a given directory, LIBDIR, you must either use libtool, and\"\n      echo \"specify the full pathname of the library, or use the '-LLIBDIR'\"\n      echo \"flag during linking and do at least one of the following:\"\n      if test -n \"$shlibpath_var\"; then\n\techo \"   - add LIBDIR to the '$shlibpath_var' environment variable\"\n\techo \"     during execution\"\n      fi\n      if test -n \"$runpath_var\"; then\n\techo \"   - add LIBDIR to the '$runpath_var' environment variable\"\n\techo \"     during linking\"\n      fi\n      if test -n \"$hardcode_libdir_flag_spec\"; then\n\tlibdir=LIBDIR\n\teval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\n\t$ECHO \"   - use the '$flag' linker flag\"\n      fi\n      if test -n \"$admincmds\"; then\n\t$ECHO \"   - have your system administrator run these commands:$admincmds\"\n      fi\n      if test -f /etc/ld.so.conf; then\n\techo \"   - have your system administrator add LIBDIR to '/etc/ld.so.conf'\"\n      fi\n      echo\n\n      echo \"See any operating system documentation about shared libraries for\"\n      case $host in\n\tsolaris2.[6789]|solaris2.1[0-9])\n\t  echo \"more information, such as the ld(1), crle(1) and ld.so(8) manual\"\n\t  echo \"pages.\"\n\t  ;;\n\t*)\n\t  echo \"more information, such as the ld(1) and ld.so(8) manual pages.\"\n\t  ;;\n      esac\n      echo \"----------------------------------------------------------------------\"\n    fi\n    exit $EXIT_SUCCESS\n}\n\ntest finish = \"$opt_mode\" && func_mode_finish ${1+\"$@\"}\n\n\n# func_mode_install arg...\nfunc_mode_install ()\n{\n    $debug_cmd\n\n    # There may be an optional sh(1) argument at the beginning of\n    # install_prog (especially on Windows NT).\n    if test \"$SHELL\" = \"$nonopt\" || test /bin/sh = \"$nonopt\" ||\n       # Allow the use of GNU shtool's install command.\n       case $nonopt in *shtool*) :;; *) false;; esac\n    then\n      # Aesthetically quote it.\n      func_quote_for_eval \"$nonopt\"\n      install_prog=\"$func_quote_for_eval_result \"\n      arg=$1\n      shift\n    else\n      install_prog=\n      arg=$nonopt\n    fi\n\n    # The real first argument should be the name of the installation program.\n    # Aesthetically quote it.\n    func_quote_for_eval \"$arg\"\n    func_append install_prog \"$func_quote_for_eval_result\"\n    install_shared_prog=$install_prog\n    case \" $install_prog \" in\n      *[\\\\\\ /]cp\\ *) install_cp=: ;;\n      *) install_cp=false ;;\n    esac\n\n    # We need to accept at least all the BSD install flags.\n    dest=\n    files=\n    opts=\n    prev=\n    install_type=\n    isdir=false\n    stripme=\n    no_mode=:\n    for arg\n    do\n      arg2=\n      if test -n \"$dest\"; then\n\tfunc_append files \" $dest\"\n\tdest=$arg\n\tcontinue\n      fi\n\n      case $arg in\n      -d) isdir=: ;;\n      -f)\n\tif $install_cp; then :; else\n\t  prev=$arg\n\tfi\n\t;;\n      -g | -m | -o)\n\tprev=$arg\n\t;;\n      -s)\n\tstripme=\" -s\"\n\tcontinue\n\t;;\n      -*)\n\t;;\n      *)\n\t# If the previous option needed an argument, then skip it.\n\tif test -n \"$prev\"; then\n\t  if test X-m = \"X$prev\" && test -n \"$install_override_mode\"; then\n\t    arg2=$install_override_mode\n\t    no_mode=false\n\t  fi\n\t  prev=\n\telse\n\t  dest=$arg\n\t  continue\n\tfi\n\t;;\n      esac\n\n      # Aesthetically quote the argument.\n      func_quote_for_eval \"$arg\"\n      func_append install_prog \" $func_quote_for_eval_result\"\n      if test -n \"$arg2\"; then\n\tfunc_quote_for_eval \"$arg2\"\n      fi\n      func_append install_shared_prog \" $func_quote_for_eval_result\"\n    done\n\n    test -z \"$install_prog\" && \\\n      func_fatal_help \"you must specify an install program\"\n\n    test -n \"$prev\" && \\\n      func_fatal_help \"the '$prev' option requires an argument\"\n\n    if test -n \"$install_override_mode\" && $no_mode; then\n      if $install_cp; then :; else\n\tfunc_quote_for_eval \"$install_override_mode\"\n\tfunc_append install_shared_prog \" -m $func_quote_for_eval_result\"\n      fi\n    fi\n\n    if test -z \"$files\"; then\n      if test -z \"$dest\"; then\n\tfunc_fatal_help \"no file or destination specified\"\n      else\n\tfunc_fatal_help \"you must specify a destination\"\n      fi\n    fi\n\n    # Strip any trailing slash from the destination.\n    func_stripname '' '/' \"$dest\"\n    dest=$func_stripname_result\n\n    # Check to see that the destination is a directory.\n    test -d \"$dest\" && isdir=:\n    if $isdir; then\n      destdir=$dest\n      destname=\n    else\n      func_dirname_and_basename \"$dest\" \"\" \".\"\n      destdir=$func_dirname_result\n      destname=$func_basename_result\n\n      # Not a directory, so check to see that there is only one file specified.\n      set dummy $files; shift\n      test \"$#\" -gt 1 && \\\n\tfunc_fatal_help \"'$dest' is not a directory\"\n    fi\n    case $destdir in\n    [\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n    *)\n      for file in $files; do\n\tcase $file in\n\t*.lo) ;;\n\t*)\n\t  func_fatal_help \"'$destdir' must be an absolute directory name\"\n\t  ;;\n\tesac\n      done\n      ;;\n    esac\n\n    # This variable tells wrapper scripts just to set variables rather\n    # than running their programs.\n    libtool_install_magic=$magic\n\n    staticlibs=\n    future_libdirs=\n    current_libdirs=\n    for file in $files; do\n\n      # Do each installation.\n      case $file in\n      *.$libext)\n\t# Do the static libraries later.\n\tfunc_append staticlibs \" $file\"\n\t;;\n\n      *.la)\n\tfunc_resolve_sysroot \"$file\"\n\tfile=$func_resolve_sysroot_result\n\n\t# Check to see that this really is a libtool archive.\n\tfunc_lalib_unsafe_p \"$file\" \\\n\t  || func_fatal_help \"'$file' is not a valid libtool archive\"\n\n\tlibrary_names=\n\told_library=\n\trelink_command=\n\tfunc_source \"$file\"\n\n\t# Add the libdir to current_libdirs if it is the destination.\n\tif test \"X$destdir\" = \"X$libdir\"; then\n\t  case \"$current_libdirs \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append current_libdirs \" $libdir\" ;;\n\t  esac\n\telse\n\t  # Note the libdir as a future libdir.\n\t  case \"$future_libdirs \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append future_libdirs \" $libdir\" ;;\n\t  esac\n\tfi\n\n\tfunc_dirname \"$file\" \"/\" \"\"\n\tdir=$func_dirname_result\n\tfunc_append dir \"$objdir\"\n\n\tif test -n \"$relink_command\"; then\n\t  # Determine the prefix the user has applied to our future dir.\n\t  inst_prefix_dir=`$ECHO \"$destdir\" | $SED -e \"s%$libdir\\$%%\"`\n\n\t  # Don't allow the user to place us outside of our expected\n\t  # location b/c this prevents finding dependent libraries that\n\t  # are installed to the same prefix.\n\t  # At present, this check doesn't affect windows .dll's that\n\t  # are installed into $libdir/../bin (currently, that works fine)\n\t  # but it's something to keep an eye on.\n\t  test \"$inst_prefix_dir\" = \"$destdir\" && \\\n\t    func_fatal_error \"error: cannot install '$file' to a directory not ending in $libdir\"\n\n\t  if test -n \"$inst_prefix_dir\"; then\n\t    # Stick the inst_prefix_dir data into the link command.\n\t    relink_command=`$ECHO \"$relink_command\" | $SED \"s%@inst_prefix_dir@%-inst-prefix-dir $inst_prefix_dir%\"`\n\t  else\n\t    relink_command=`$ECHO \"$relink_command\" | $SED \"s%@inst_prefix_dir@%%\"`\n\t  fi\n\n\t  func_warning \"relinking '$file'\"\n\t  func_show_eval \"$relink_command\" \\\n\t    'func_fatal_error \"error: relink '\\''$file'\\'' with the above command before installing it\"'\n\tfi\n\n\t# See the names of the shared library.\n\tset dummy $library_names; shift\n\tif test -n \"$1\"; then\n\t  realname=$1\n\t  shift\n\n\t  srcname=$realname\n\t  test -n \"$relink_command\" && srcname=${realname}T\n\n\t  # Install the shared library and build the symlinks.\n\t  func_show_eval \"$install_shared_prog $dir/$srcname $destdir/$realname\" \\\n\t      'exit $?'\n\t  tstripme=$stripme\n\t  case $host_os in\n\t  cygwin* | mingw* | pw32* | cegcc*)\n\t    case $realname in\n\t    *.dll.a)\n\t      tstripme=\n\t      ;;\n\t    esac\n\t    ;;\n\t  os2*)\n\t    case $realname in\n\t    *_dll.a)\n\t      tstripme=\n\t      ;;\n\t    esac\n\t    ;;\n\t  esac\n\t  if test -n \"$tstripme\" && test -n \"$striplib\"; then\n\t    func_show_eval \"$striplib $destdir/$realname\" 'exit $?'\n\t  fi\n\n\t  if test \"$#\" -gt 0; then\n\t    # Delete the old symlinks, and create new ones.\n\t    # Try 'ln -sf' first, because the 'ln' binary might depend on\n\t    # the symlink we replace!  Solaris /bin/ln does not understand -f,\n\t    # so we also need to try rm && ln -s.\n\t    for linkname\n\t    do\n\t      test \"$linkname\" != \"$realname\" \\\n\t\t&& func_show_eval \"(cd $destdir && { $LN_S -f $realname $linkname || { $RM $linkname && $LN_S $realname $linkname; }; })\"\n\t    done\n\t  fi\n\n\t  # Do each command in the postinstall commands.\n\t  lib=$destdir/$realname\n\t  func_execute_cmds \"$postinstall_cmds\" 'exit $?'\n\tfi\n\n\t# Install the pseudo-library for information purposes.\n\tfunc_basename \"$file\"\n\tname=$func_basename_result\n\tinstname=$dir/${name}i\n\tfunc_show_eval \"$install_prog $instname $destdir/$name\" 'exit $?'\n\n\t# Maybe install the static library, too.\n\ttest -n \"$old_library\" && func_append staticlibs \" $dir/$old_library\"\n\t;;\n\n      *.lo)\n\t# Install (i.e. copy) a libtool object.\n\n\t# Figure out destination file name, if it wasn't already specified.\n\tif test -n \"$destname\"; then\n\t  destfile=$destdir/$destname\n\telse\n\t  func_basename \"$file\"\n\t  destfile=$func_basename_result\n\t  destfile=$destdir/$destfile\n\tfi\n\n\t# Deduce the name of the destination old-style object file.\n\tcase $destfile in\n\t*.lo)\n\t  func_lo2o \"$destfile\"\n\t  staticdest=$func_lo2o_result\n\t  ;;\n\t*.$objext)\n\t  staticdest=$destfile\n\t  destfile=\n\t  ;;\n\t*)\n\t  func_fatal_help \"cannot copy a libtool object to '$destfile'\"\n\t  ;;\n\tesac\n\n\t# Install the libtool object if requested.\n\ttest -n \"$destfile\" && \\\n\t  func_show_eval \"$install_prog $file $destfile\" 'exit $?'\n\n\t# Install the old object if enabled.\n\tif test yes = \"$build_old_libs\"; then\n\t  # Deduce the name of the old-style object file.\n\t  func_lo2o \"$file\"\n\t  staticobj=$func_lo2o_result\n\t  func_show_eval \"$install_prog \\$staticobj \\$staticdest\" 'exit $?'\n\tfi\n\texit $EXIT_SUCCESS\n\t;;\n\n      *)\n\t# Figure out destination file name, if it wasn't already specified.\n\tif test -n \"$destname\"; then\n\t  destfile=$destdir/$destname\n\telse\n\t  func_basename \"$file\"\n\t  destfile=$func_basename_result\n\t  destfile=$destdir/$destfile\n\tfi\n\n\t# If the file is missing, and there is a .exe on the end, strip it\n\t# because it is most likely a libtool script we actually want to\n\t# install\n\tstripped_ext=\n\tcase $file in\n\t  *.exe)\n\t    if test ! -f \"$file\"; then\n\t      func_stripname '' '.exe' \"$file\"\n\t      file=$func_stripname_result\n\t      stripped_ext=.exe\n\t    fi\n\t    ;;\n\tesac\n\n\t# Do a test to see if this is really a libtool program.\n\tcase $host in\n\t*cygwin* | *mingw*)\n\t    if func_ltwrapper_executable_p \"$file\"; then\n\t      func_ltwrapper_scriptname \"$file\"\n\t      wrapper=$func_ltwrapper_scriptname_result\n\t    else\n\t      func_stripname '' '.exe' \"$file\"\n\t      wrapper=$func_stripname_result\n\t    fi\n\t    ;;\n\t*)\n\t    wrapper=$file\n\t    ;;\n\tesac\n\tif func_ltwrapper_script_p \"$wrapper\"; then\n\t  notinst_deplibs=\n\t  relink_command=\n\n\t  func_source \"$wrapper\"\n\n\t  # Check the variables that should have been set.\n\t  test -z \"$generated_by_libtool_version\" && \\\n\t    func_fatal_error \"invalid libtool wrapper script '$wrapper'\"\n\n\t  finalize=:\n\t  for lib in $notinst_deplibs; do\n\t    # Check to see that each library is installed.\n\t    libdir=\n\t    if test -f \"$lib\"; then\n\t      func_source \"$lib\"\n\t    fi\n\t    libfile=$libdir/`$ECHO \"$lib\" | $SED 's%^.*/%%g'`\n\t    if test -n \"$libdir\" && test ! -f \"$libfile\"; then\n\t      func_warning \"'$lib' has not been installed in '$libdir'\"\n\t      finalize=false\n\t    fi\n\t  done\n\n\t  relink_command=\n\t  func_source \"$wrapper\"\n\n\t  outputname=\n\t  if test no = \"$fast_install\" && test -n \"$relink_command\"; then\n\t    $opt_dry_run || {\n\t      if $finalize; then\n\t        tmpdir=`func_mktempdir`\n\t\tfunc_basename \"$file$stripped_ext\"\n\t\tfile=$func_basename_result\n\t        outputname=$tmpdir/$file\n\t        # Replace the output file specification.\n\t        relink_command=`$ECHO \"$relink_command\" | $SED 's%@OUTPUT@%'\"$outputname\"'%g'`\n\n\t        $opt_quiet || {\n\t          func_quote_for_expand \"$relink_command\"\n\t\t  eval \"func_echo $func_quote_for_expand_result\"\n\t        }\n\t        if eval \"$relink_command\"; then :\n\t          else\n\t\t  func_error \"error: relink '$file' with the above command before installing it\"\n\t\t  $opt_dry_run || ${RM}r \"$tmpdir\"\n\t\t  continue\n\t        fi\n\t        file=$outputname\n\t      else\n\t        func_warning \"cannot relink '$file'\"\n\t      fi\n\t    }\n\t  else\n\t    # Install the binary that we compiled earlier.\n\t    file=`$ECHO \"$file$stripped_ext\" | $SED \"s%\\([^/]*\\)$%$objdir/\\1%\"`\n\t  fi\n\tfi\n\n\t# remove .exe since cygwin /usr/bin/install will append another\n\t# one anyway\n\tcase $install_prog,$host in\n\t*/usr/bin/install*,*cygwin*)\n\t  case $file:$destfile in\n\t  *.exe:*.exe)\n\t    # this is ok\n\t    ;;\n\t  *.exe:*)\n\t    destfile=$destfile.exe\n\t    ;;\n\t  *:*.exe)\n\t    func_stripname '' '.exe' \"$destfile\"\n\t    destfile=$func_stripname_result\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n\tfunc_show_eval \"$install_prog\\$stripme \\$file \\$destfile\" 'exit $?'\n\t$opt_dry_run || if test -n \"$outputname\"; then\n\t  ${RM}r \"$tmpdir\"\n\tfi\n\t;;\n      esac\n    done\n\n    for file in $staticlibs; do\n      func_basename \"$file\"\n      name=$func_basename_result\n\n      # Set up the ranlib parameters.\n      oldlib=$destdir/$name\n      func_to_tool_file \"$oldlib\" func_convert_file_msys_to_w32\n      tool_oldlib=$func_to_tool_file_result\n\n      func_show_eval \"$install_prog \\$file \\$oldlib\" 'exit $?'\n\n      if test -n \"$stripme\" && test -n \"$old_striplib\"; then\n\tfunc_show_eval \"$old_striplib $tool_oldlib\" 'exit $?'\n      fi\n\n      # Do each command in the postinstall commands.\n      func_execute_cmds \"$old_postinstall_cmds\" 'exit $?'\n    done\n\n    test -n \"$future_libdirs\" && \\\n      func_warning \"remember to run '$progname --finish$future_libdirs'\"\n\n    if test -n \"$current_libdirs\"; then\n      # Maybe just do a dry run.\n      $opt_dry_run && current_libdirs=\" -n$current_libdirs\"\n      exec_cmd='$SHELL \"$progpath\" $preserve_args --finish$current_libdirs'\n    else\n      exit $EXIT_SUCCESS\n    fi\n}\n\ntest install = \"$opt_mode\" && func_mode_install ${1+\"$@\"}\n\n\n# func_generate_dlsyms outputname originator pic_p\n# Extract symbols from dlprefiles and create ${outputname}S.o with\n# a dlpreopen symbol table.\nfunc_generate_dlsyms ()\n{\n    $debug_cmd\n\n    my_outputname=$1\n    my_originator=$2\n    my_pic_p=${3-false}\n    my_prefix=`$ECHO \"$my_originator\" | $SED 's%[^a-zA-Z0-9]%_%g'`\n    my_dlsyms=\n\n    if test -n \"$dlfiles$dlprefiles\" || test no != \"$dlself\"; then\n      if test -n \"$NM\" && test -n \"$global_symbol_pipe\"; then\n\tmy_dlsyms=${my_outputname}S.c\n      else\n\tfunc_error \"not configured to extract global symbols from dlpreopened files\"\n      fi\n    fi\n\n    if test -n \"$my_dlsyms\"; then\n      case $my_dlsyms in\n      \"\") ;;\n      *.c)\n\t# Discover the nlist of each of the dlfiles.\n\tnlist=$output_objdir/$my_outputname.nm\n\n\tfunc_show_eval \"$RM $nlist ${nlist}S ${nlist}T\"\n\n\t# Parse the name list into a source file.\n\tfunc_verbose \"creating $output_objdir/$my_dlsyms\"\n\n\t$opt_dry_run || $ECHO > \"$output_objdir/$my_dlsyms\" \"\\\n/* $my_dlsyms - symbol resolution table for '$my_outputname' dlsym emulation. */\n/* Generated by $PROGRAM (GNU $PACKAGE) $VERSION */\n\n#ifdef __cplusplus\nextern \\\"C\\\" {\n#endif\n\n#if defined __GNUC__ && (((__GNUC__ == 4) && (__GNUC_MINOR__ >= 4)) || (__GNUC__ > 4))\n#pragma GCC diagnostic ignored \\\"-Wstrict-prototypes\\\"\n#endif\n\n/* Keep this code in sync between libtool.m4, ltmain, lt_system.h, and tests.  */\n#if defined _WIN32 || defined __CYGWIN__ || defined _WIN32_WCE\n/* DATA imports from DLLs on WIN32 can't be const, because runtime\n   relocations are performed -- see ld's documentation on pseudo-relocs.  */\n# define LT_DLSYM_CONST\n#elif defined __osf__\n/* This system does not cope well with relocations in const data.  */\n# define LT_DLSYM_CONST\n#else\n# define LT_DLSYM_CONST const\n#endif\n\n#define STREQ(s1, s2) (strcmp ((s1), (s2)) == 0)\n\n/* External symbol declarations for the compiler. */\\\n\"\n\n\tif test yes = \"$dlself\"; then\n\t  func_verbose \"generating symbol list for '$output'\"\n\n\t  $opt_dry_run || echo ': @PROGRAM@ ' > \"$nlist\"\n\n\t  # Add our own program objects to the symbol list.\n\t  progfiles=`$ECHO \"$objs$old_deplibs\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n\t  for progfile in $progfiles; do\n\t    func_to_tool_file \"$progfile\" func_convert_file_msys_to_w32\n\t    func_verbose \"extracting global C symbols from '$func_to_tool_file_result'\"\n\t    $opt_dry_run || eval \"$NM $func_to_tool_file_result | $global_symbol_pipe >> '$nlist'\"\n\t  done\n\n\t  if test -n \"$exclude_expsyms\"; then\n\t    $opt_dry_run || {\n\t      eval '$EGREP -v \" ($exclude_expsyms)$\" \"$nlist\" > \"$nlist\"T'\n\t      eval '$MV \"$nlist\"T \"$nlist\"'\n\t    }\n\t  fi\n\n\t  if test -n \"$export_symbols_regex\"; then\n\t    $opt_dry_run || {\n\t      eval '$EGREP -e \"$export_symbols_regex\" \"$nlist\" > \"$nlist\"T'\n\t      eval '$MV \"$nlist\"T \"$nlist\"'\n\t    }\n\t  fi\n\n\t  # Prepare the list of exported symbols\n\t  if test -z \"$export_symbols\"; then\n\t    export_symbols=$output_objdir/$outputname.exp\n\t    $opt_dry_run || {\n\t      $RM $export_symbols\n\t      eval \"$SED -n -e '/^: @PROGRAM@ $/d' -e 's/^.* \\(.*\\)$/\\1/p' \"'< \"$nlist\" > \"$export_symbols\"'\n\t      case $host in\n\t      *cygwin* | *mingw* | *cegcc* )\n                eval \"echo EXPORTS \"'> \"$output_objdir/$outputname.def\"'\n                eval 'cat \"$export_symbols\" >> \"$output_objdir/$outputname.def\"'\n\t        ;;\n\t      esac\n\t    }\n\t  else\n\t    $opt_dry_run || {\n\t      eval \"$SED -e 's/\\([].[*^$]\\)/\\\\\\\\\\1/g' -e 's/^/ /' -e 's/$/$/'\"' < \"$export_symbols\" > \"$output_objdir/$outputname.exp\"'\n\t      eval '$GREP -f \"$output_objdir/$outputname.exp\" < \"$nlist\" > \"$nlist\"T'\n\t      eval '$MV \"$nlist\"T \"$nlist\"'\n\t      case $host in\n\t        *cygwin* | *mingw* | *cegcc* )\n\t          eval \"echo EXPORTS \"'> \"$output_objdir/$outputname.def\"'\n\t          eval 'cat \"$nlist\" >> \"$output_objdir/$outputname.def\"'\n\t          ;;\n\t      esac\n\t    }\n\t  fi\n\tfi\n\n\tfor dlprefile in $dlprefiles; do\n\t  func_verbose \"extracting global C symbols from '$dlprefile'\"\n\t  func_basename \"$dlprefile\"\n\t  name=$func_basename_result\n          case $host in\n\t    *cygwin* | *mingw* | *cegcc* )\n\t      # if an import library, we need to obtain dlname\n\t      if func_win32_import_lib_p \"$dlprefile\"; then\n\t        func_tr_sh \"$dlprefile\"\n\t        eval \"curr_lafile=\\$libfile_$func_tr_sh_result\"\n\t        dlprefile_dlbasename=\n\t        if test -n \"$curr_lafile\" && func_lalib_p \"$curr_lafile\"; then\n\t          # Use subshell, to avoid clobbering current variable values\n\t          dlprefile_dlname=`source \"$curr_lafile\" && echo \"$dlname\"`\n\t          if test -n \"$dlprefile_dlname\"; then\n\t            func_basename \"$dlprefile_dlname\"\n\t            dlprefile_dlbasename=$func_basename_result\n\t          else\n\t            # no lafile. user explicitly requested -dlpreopen <import library>.\n\t            $sharedlib_from_linklib_cmd \"$dlprefile\"\n\t            dlprefile_dlbasename=$sharedlib_from_linklib_result\n\t          fi\n\t        fi\n\t        $opt_dry_run || {\n\t          if test -n \"$dlprefile_dlbasename\"; then\n\t            eval '$ECHO \": $dlprefile_dlbasename\" >> \"$nlist\"'\n\t          else\n\t            func_warning \"Could not compute DLL name from $name\"\n\t            eval '$ECHO \": $name \" >> \"$nlist\"'\n\t          fi\n\t          func_to_tool_file \"$dlprefile\" func_convert_file_msys_to_w32\n\t          eval \"$NM \\\"$func_to_tool_file_result\\\" 2>/dev/null | $global_symbol_pipe |\n\t            $SED -e '/I __imp/d' -e 's/I __nm_/D /;s/_nm__//' >> '$nlist'\"\n\t        }\n\t      else # not an import lib\n\t        $opt_dry_run || {\n\t          eval '$ECHO \": $name \" >> \"$nlist\"'\n\t          func_to_tool_file \"$dlprefile\" func_convert_file_msys_to_w32\n\t          eval \"$NM \\\"$func_to_tool_file_result\\\" 2>/dev/null | $global_symbol_pipe >> '$nlist'\"\n\t        }\n\t      fi\n\t    ;;\n\t    *)\n\t      $opt_dry_run || {\n\t        eval '$ECHO \": $name \" >> \"$nlist\"'\n\t        func_to_tool_file \"$dlprefile\" func_convert_file_msys_to_w32\n\t        eval \"$NM \\\"$func_to_tool_file_result\\\" 2>/dev/null | $global_symbol_pipe >> '$nlist'\"\n\t      }\n\t    ;;\n          esac\n\tdone\n\n\t$opt_dry_run || {\n\t  # Make sure we have at least an empty file.\n\t  test -f \"$nlist\" || : > \"$nlist\"\n\n\t  if test -n \"$exclude_expsyms\"; then\n\t    $EGREP -v \" ($exclude_expsyms)$\" \"$nlist\" > \"$nlist\"T\n\t    $MV \"$nlist\"T \"$nlist\"\n\t  fi\n\n\t  # Try sorting and uniquifying the output.\n\t  if $GREP -v \"^: \" < \"$nlist\" |\n\t      if sort -k 3 </dev/null >/dev/null 2>&1; then\n\t\tsort -k 3\n\t      else\n\t\tsort +2\n\t      fi |\n\t      uniq > \"$nlist\"S; then\n\t    :\n\t  else\n\t    $GREP -v \"^: \" < \"$nlist\" > \"$nlist\"S\n\t  fi\n\n\t  if test -f \"$nlist\"S; then\n\t    eval \"$global_symbol_to_cdecl\"' < \"$nlist\"S >> \"$output_objdir/$my_dlsyms\"'\n\t  else\n\t    echo '/* NONE */' >> \"$output_objdir/$my_dlsyms\"\n\t  fi\n\n\t  func_show_eval '$RM \"${nlist}I\"'\n\t  if test -n \"$global_symbol_to_import\"; then\n\t    eval \"$global_symbol_to_import\"' < \"$nlist\"S > \"$nlist\"I'\n\t  fi\n\n\t  echo >> \"$output_objdir/$my_dlsyms\" \"\\\n\n/* The mapping between symbol names and symbols.  */\ntypedef struct {\n  const char *name;\n  void *address;\n} lt_dlsymlist;\nextern LT_DLSYM_CONST lt_dlsymlist\nlt_${my_prefix}_LTX_preloaded_symbols[];\\\n\"\n\n\t  if test -s \"$nlist\"I; then\n\t    echo >> \"$output_objdir/$my_dlsyms\" \"\\\nstatic void lt_syminit(void)\n{\n  LT_DLSYM_CONST lt_dlsymlist *symbol = lt_${my_prefix}_LTX_preloaded_symbols;\n  for (; symbol->name; ++symbol)\n    {\"\n\t    $SED 's/.*/      if (STREQ (symbol->name, \\\"&\\\")) symbol->address = (void *) \\&&;/' < \"$nlist\"I >> \"$output_objdir/$my_dlsyms\"\n\t    echo >> \"$output_objdir/$my_dlsyms\" \"\\\n    }\n}\"\n\t  fi\n\t  echo >> \"$output_objdir/$my_dlsyms\" \"\\\nLT_DLSYM_CONST lt_dlsymlist\nlt_${my_prefix}_LTX_preloaded_symbols[] =\n{ {\\\"$my_originator\\\", (void *) 0},\"\n\n\t  if test -s \"$nlist\"I; then\n\t    echo >> \"$output_objdir/$my_dlsyms\" \"\\\n  {\\\"@INIT@\\\", (void *) &lt_syminit},\"\n\t  fi\n\n\t  case $need_lib_prefix in\n\t  no)\n\t    eval \"$global_symbol_to_c_name_address\" < \"$nlist\" >> \"$output_objdir/$my_dlsyms\"\n\t    ;;\n\t  *)\n\t    eval \"$global_symbol_to_c_name_address_lib_prefix\" < \"$nlist\" >> \"$output_objdir/$my_dlsyms\"\n\t    ;;\n\t  esac\n\t  echo >> \"$output_objdir/$my_dlsyms\" \"\\\n  {0, (void *) 0}\n};\n\n/* This works around a problem in FreeBSD linker */\n#ifdef FREEBSD_WORKAROUND\nstatic const void *lt_preloaded_setup() {\n  return lt_${my_prefix}_LTX_preloaded_symbols;\n}\n#endif\n\n#ifdef __cplusplus\n}\n#endif\\\n\"\n\t} # !$opt_dry_run\n\n\tpic_flag_for_symtable=\n\tcase \"$compile_command \" in\n\t*\" -static \"*) ;;\n\t*)\n\t  case $host in\n\t  # compiling the symbol table file with pic_flag works around\n\t  # a FreeBSD bug that causes programs to crash when -lm is\n\t  # linked before any other PIC object.  But we must not use\n\t  # pic_flag when linking with -static.  The problem exists in\n\t  # FreeBSD 2.2.6 and is fixed in FreeBSD 3.1.\n\t  *-*-freebsd2.*|*-*-freebsd3.0*|*-*-freebsdelf3.0*)\n\t    pic_flag_for_symtable=\" $pic_flag -DFREEBSD_WORKAROUND\" ;;\n\t  *-*-hpux*)\n\t    pic_flag_for_symtable=\" $pic_flag\"  ;;\n\t  *)\n\t    $my_pic_p && pic_flag_for_symtable=\" $pic_flag\"\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n\tsymtab_cflags=\n\tfor arg in $LTCFLAGS; do\n\t  case $arg in\n\t  -pie | -fpie | -fPIE) ;;\n\t  *) func_append symtab_cflags \" $arg\" ;;\n\t  esac\n\tdone\n\n\t# Now compile the dynamic symbol file.\n\tfunc_show_eval '(cd $output_objdir && $LTCC$symtab_cflags -c$no_builtin_flag$pic_flag_for_symtable \"$my_dlsyms\")' 'exit $?'\n\n\t# Clean up the generated files.\n\tfunc_show_eval '$RM \"$output_objdir/$my_dlsyms\" \"$nlist\" \"${nlist}S\" \"${nlist}T\" \"${nlist}I\"'\n\n\t# Transform the symbol file into the correct name.\n\tsymfileobj=$output_objdir/${my_outputname}S.$objext\n\tcase $host in\n\t*cygwin* | *mingw* | *cegcc* )\n\t  if test -f \"$output_objdir/$my_outputname.def\"; then\n\t    compile_command=`$ECHO \"$compile_command\" | $SED \"s%@SYMFILE@%$output_objdir/$my_outputname.def $symfileobj%\"`\n\t    finalize_command=`$ECHO \"$finalize_command\" | $SED \"s%@SYMFILE@%$output_objdir/$my_outputname.def $symfileobj%\"`\n\t  else\n\t    compile_command=`$ECHO \"$compile_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t    finalize_command=`$ECHO \"$finalize_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t  fi\n\t  ;;\n\t*)\n\t  compile_command=`$ECHO \"$compile_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t  finalize_command=`$ECHO \"$finalize_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t  ;;\n\tesac\n\t;;\n      *)\n\tfunc_fatal_error \"unknown suffix for '$my_dlsyms'\"\n\t;;\n      esac\n    else\n      # We keep going just in case the user didn't refer to\n      # lt_preloaded_symbols.  The linker will fail if global_symbol_pipe\n      # really was required.\n\n      # Nullify the symbol file.\n      compile_command=`$ECHO \"$compile_command\" | $SED \"s% @SYMFILE@%%\"`\n      finalize_command=`$ECHO \"$finalize_command\" | $SED \"s% @SYMFILE@%%\"`\n    fi\n}\n\n# func_cygming_gnu_implib_p ARG\n# This predicate returns with zero status (TRUE) if\n# ARG is a GNU/binutils-style import library. Returns\n# with nonzero status (FALSE) otherwise.\nfunc_cygming_gnu_implib_p ()\n{\n  $debug_cmd\n\n  func_to_tool_file \"$1\" func_convert_file_msys_to_w32\n  func_cygming_gnu_implib_tmp=`$NM \"$func_to_tool_file_result\" | eval \"$global_symbol_pipe\" | $EGREP ' (_head_[A-Za-z0-9_]+_[ad]l*|[A-Za-z0-9_]+_[ad]l*_iname)$'`\n  test -n \"$func_cygming_gnu_implib_tmp\"\n}\n\n# func_cygming_ms_implib_p ARG\n# This predicate returns with zero status (TRUE) if\n# ARG is an MS-style import library. Returns\n# with nonzero status (FALSE) otherwise.\nfunc_cygming_ms_implib_p ()\n{\n  $debug_cmd\n\n  func_to_tool_file \"$1\" func_convert_file_msys_to_w32\n  func_cygming_ms_implib_tmp=`$NM \"$func_to_tool_file_result\" | eval \"$global_symbol_pipe\" | $GREP '_NULL_IMPORT_DESCRIPTOR'`\n  test -n \"$func_cygming_ms_implib_tmp\"\n}\n\n# func_win32_libid arg\n# return the library type of file 'arg'\n#\n# Need a lot of goo to handle *both* DLLs and import libs\n# Has to be a shell function in order to 'eat' the argument\n# that is supplied when $file_magic_command is called.\n# Despite the name, also deal with 64 bit binaries.\nfunc_win32_libid ()\n{\n  $debug_cmd\n\n  win32_libid_type=unknown\n  win32_fileres=`file -L $1 2>/dev/null`\n  case $win32_fileres in\n  *ar\\ archive\\ import\\ library*) # definitely import\n    win32_libid_type=\"x86 archive import\"\n    ;;\n  *ar\\ archive*) # could be an import, or static\n    # Keep the egrep pattern in sync with the one in _LT_CHECK_MAGIC_METHOD.\n    if eval $OBJDUMP -f $1 | $SED -e '10q' 2>/dev/null |\n       $EGREP 'file format (pei*-i386(.*architecture: i386)?|pe-arm-wince|pe-x86-64)' >/dev/null; then\n      case $nm_interface in\n      \"MS dumpbin\")\n\tif func_cygming_ms_implib_p \"$1\" ||\n\t   func_cygming_gnu_implib_p \"$1\"\n\tthen\n\t  win32_nmres=import\n\telse\n\t  win32_nmres=\n\tfi\n\t;;\n      *)\n\tfunc_to_tool_file \"$1\" func_convert_file_msys_to_w32\n\twin32_nmres=`eval $NM -f posix -A \\\"$func_to_tool_file_result\\\" |\n\t  $SED -n -e '\n\t    1,100{\n\t\t/ I /{\n\t\t    s|.*|import|\n\t\t    p\n\t\t    q\n\t\t}\n\t    }'`\n\t;;\n      esac\n      case $win32_nmres in\n      import*)  win32_libid_type=\"x86 archive import\";;\n      *)        win32_libid_type=\"x86 archive static\";;\n      esac\n    fi\n    ;;\n  *DLL*)\n    win32_libid_type=\"x86 DLL\"\n    ;;\n  *executable*) # but shell scripts are \"executable\" too...\n    case $win32_fileres in\n    *MS\\ Windows\\ PE\\ Intel*)\n      win32_libid_type=\"x86 DLL\"\n      ;;\n    esac\n    ;;\n  esac\n  $ECHO \"$win32_libid_type\"\n}\n\n# func_cygming_dll_for_implib ARG\n#\n# Platform-specific function to extract the\n# name of the DLL associated with the specified\n# import library ARG.\n# Invoked by eval'ing the libtool variable\n#    $sharedlib_from_linklib_cmd\n# Result is available in the variable\n#    $sharedlib_from_linklib_result\nfunc_cygming_dll_for_implib ()\n{\n  $debug_cmd\n\n  sharedlib_from_linklib_result=`$DLLTOOL --identify-strict --identify \"$1\"`\n}\n\n# func_cygming_dll_for_implib_fallback_core SECTION_NAME LIBNAMEs\n#\n# The is the core of a fallback implementation of a\n# platform-specific function to extract the name of the\n# DLL associated with the specified import library LIBNAME.\n#\n# SECTION_NAME is either .idata$6 or .idata$7, depending\n# on the platform and compiler that created the implib.\n#\n# Echos the name of the DLL associated with the\n# specified import library.\nfunc_cygming_dll_for_implib_fallback_core ()\n{\n  $debug_cmd\n\n  match_literal=`$ECHO \"$1\" | $SED \"$sed_make_literal_regex\"`\n  $OBJDUMP -s --section \"$1\" \"$2\" 2>/dev/null |\n    $SED '/^Contents of section '\"$match_literal\"':/{\n      # Place marker at beginning of archive member dllname section\n      s/.*/====MARK====/\n      p\n      d\n    }\n    # These lines can sometimes be longer than 43 characters, but\n    # are always uninteresting\n    /:[\t ]*file format pe[i]\\{,1\\}-/d\n    /^In archive [^:]*:/d\n    # Ensure marker is printed\n    /^====MARK====/p\n    # Remove all lines with less than 43 characters\n    /^.\\{43\\}/!d\n    # From remaining lines, remove first 43 characters\n    s/^.\\{43\\}//' |\n    $SED -n '\n      # Join marker and all lines until next marker into a single line\n      /^====MARK====/ b para\n      H\n      $ b para\n      b\n      :para\n      x\n      s/\\n//g\n      # Remove the marker\n      s/^====MARK====//\n      # Remove trailing dots and whitespace\n      s/[\\. \\t]*$//\n      # Print\n      /./p' |\n    # we now have a list, one entry per line, of the stringified\n    # contents of the appropriate section of all members of the\n    # archive that possess that section. Heuristic: eliminate\n    # all those that have a first or second character that is\n    # a '.' (that is, objdump's representation of an unprintable\n    # character.) This should work for all archives with less than\n    # 0x302f exports -- but will fail for DLLs whose name actually\n    # begins with a literal '.' or a single character followed by\n    # a '.'.\n    #\n    # Of those that remain, print the first one.\n    $SED -e '/^\\./d;/^.\\./d;q'\n}\n\n# func_cygming_dll_for_implib_fallback ARG\n# Platform-specific function to extract the\n# name of the DLL associated with the specified\n# import library ARG.\n#\n# This fallback implementation is for use when $DLLTOOL\n# does not support the --identify-strict option.\n# Invoked by eval'ing the libtool variable\n#    $sharedlib_from_linklib_cmd\n# Result is available in the variable\n#    $sharedlib_from_linklib_result\nfunc_cygming_dll_for_implib_fallback ()\n{\n  $debug_cmd\n\n  if func_cygming_gnu_implib_p \"$1\"; then\n    # binutils import library\n    sharedlib_from_linklib_result=`func_cygming_dll_for_implib_fallback_core '.idata$7' \"$1\"`\n  elif func_cygming_ms_implib_p \"$1\"; then\n    # ms-generated import library\n    sharedlib_from_linklib_result=`func_cygming_dll_for_implib_fallback_core '.idata$6' \"$1\"`\n  else\n    # unknown\n    sharedlib_from_linklib_result=\n  fi\n}\n\n\n# func_extract_an_archive dir oldlib\nfunc_extract_an_archive ()\n{\n    $debug_cmd\n\n    f_ex_an_ar_dir=$1; shift\n    f_ex_an_ar_oldlib=$1\n    if test yes = \"$lock_old_archive_extraction\"; then\n      lockfile=$f_ex_an_ar_oldlib.lock\n      until $opt_dry_run || ln \"$progpath\" \"$lockfile\" 2>/dev/null; do\n\tfunc_echo \"Waiting for $lockfile to be removed\"\n\tsleep 2\n      done\n    fi\n    func_show_eval \"(cd \\$f_ex_an_ar_dir && $AR x \\\"\\$f_ex_an_ar_oldlib\\\")\" \\\n\t\t   'stat=$?; rm -f \"$lockfile\"; exit $stat'\n    if test yes = \"$lock_old_archive_extraction\"; then\n      $opt_dry_run || rm -f \"$lockfile\"\n    fi\n    if ($AR t \"$f_ex_an_ar_oldlib\" | sort | sort -uc >/dev/null 2>&1); then\n     :\n    else\n      func_fatal_error \"object name conflicts in archive: $f_ex_an_ar_dir/$f_ex_an_ar_oldlib\"\n    fi\n}\n\n\n# func_extract_archives gentop oldlib ...\nfunc_extract_archives ()\n{\n    $debug_cmd\n\n    my_gentop=$1; shift\n    my_oldlibs=${1+\"$@\"}\n    my_oldobjs=\n    my_xlib=\n    my_xabs=\n    my_xdir=\n\n    for my_xlib in $my_oldlibs; do\n      # Extract the objects.\n      case $my_xlib in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) my_xabs=$my_xlib ;;\n\t*) my_xabs=`pwd`\"/$my_xlib\" ;;\n      esac\n      func_basename \"$my_xlib\"\n      my_xlib=$func_basename_result\n      my_xlib_u=$my_xlib\n      while :; do\n        case \" $extracted_archives \" in\n\t*\" $my_xlib_u \"*)\n\t  func_arith $extracted_serial + 1\n\t  extracted_serial=$func_arith_result\n\t  my_xlib_u=lt$extracted_serial-$my_xlib ;;\n\t*) break ;;\n\tesac\n      done\n      extracted_archives=\"$extracted_archives $my_xlib_u\"\n      my_xdir=$my_gentop/$my_xlib_u\n\n      func_mkdir_p \"$my_xdir\"\n\n      case $host in\n      *-darwin*)\n\tfunc_verbose \"Extracting $my_xabs\"\n\t# Do not bother doing anything if just a dry run\n\t$opt_dry_run || {\n\t  darwin_orig_dir=`pwd`\n\t  cd $my_xdir || exit $?\n\t  darwin_archive=$my_xabs\n\t  darwin_curdir=`pwd`\n\t  func_basename \"$darwin_archive\"\n\t  darwin_base_archive=$func_basename_result\n\t  darwin_arches=`$LIPO -info \"$darwin_archive\" 2>/dev/null | $GREP Architectures 2>/dev/null || true`\n\t  if test -n \"$darwin_arches\"; then\n\t    darwin_arches=`$ECHO \"$darwin_arches\" | $SED -e 's/.*are://'`\n\t    darwin_arch=\n\t    func_verbose \"$darwin_base_archive has multiple architectures $darwin_arches\"\n\t    for darwin_arch in  $darwin_arches; do\n\t      func_mkdir_p \"unfat-$$/$darwin_base_archive-$darwin_arch\"\n\t      $LIPO -thin $darwin_arch -output \"unfat-$$/$darwin_base_archive-$darwin_arch/$darwin_base_archive\" \"$darwin_archive\"\n\t      cd \"unfat-$$/$darwin_base_archive-$darwin_arch\"\n\t      func_extract_an_archive \"`pwd`\" \"$darwin_base_archive\"\n\t      cd \"$darwin_curdir\"\n\t      $RM \"unfat-$$/$darwin_base_archive-$darwin_arch/$darwin_base_archive\"\n\t    done # $darwin_arches\n            ## Okay now we've a bunch of thin objects, gotta fatten them up :)\n\t    darwin_filelist=`find unfat-$$ -type f -name \\*.o -print -o -name \\*.lo -print | $SED -e \"$sed_basename\" | sort -u`\n\t    darwin_file=\n\t    darwin_files=\n\t    for darwin_file in $darwin_filelist; do\n\t      darwin_files=`find unfat-$$ -name $darwin_file -print | sort | $NL2SP`\n\t      $LIPO -create -output \"$darwin_file\" $darwin_files\n\t    done # $darwin_filelist\n\t    $RM -rf unfat-$$\n\t    cd \"$darwin_orig_dir\"\n\t  else\n\t    cd $darwin_orig_dir\n\t    func_extract_an_archive \"$my_xdir\" \"$my_xabs\"\n\t  fi # $darwin_arches\n\t} # !$opt_dry_run\n\t;;\n      *)\n        func_extract_an_archive \"$my_xdir\" \"$my_xabs\"\n\t;;\n      esac\n      my_oldobjs=\"$my_oldobjs \"`find $my_xdir -name \\*.$objext -print -o -name \\*.lo -print | sort | $NL2SP`\n    done\n\n    func_extract_archives_result=$my_oldobjs\n}\n\n\n# func_emit_wrapper [arg=no]\n#\n# Emit a libtool wrapper script on stdout.\n# Don't directly open a file because we may want to\n# incorporate the script contents within a cygwin/mingw\n# wrapper executable.  Must ONLY be called from within\n# func_mode_link because it depends on a number of variables\n# set therein.\n#\n# ARG is the value that the WRAPPER_SCRIPT_BELONGS_IN_OBJDIR\n# variable will take.  If 'yes', then the emitted script\n# will assume that the directory where it is stored is\n# the $objdir directory.  This is a cygwin/mingw-specific\n# behavior.\nfunc_emit_wrapper ()\n{\n\tfunc_emit_wrapper_arg1=${1-no}\n\n\t$ECHO \"\\\n#! $SHELL\n\n# $output - temporary wrapper script for $objdir/$outputname\n# Generated by $PROGRAM (GNU $PACKAGE) $VERSION\n#\n# The $output program cannot be directly executed until all the libtool\n# libraries that it depends on are installed.\n#\n# This wrapper script should never be moved out of the build directory.\n# If it is, it will not operate correctly.\n\n# Sed substitution that helps us do robust quoting.  It backslashifies\n# metacharacters that are still active within double-quoted strings.\nsed_quote_subst='$sed_quote_subst'\n\n# Be Bourne compatible\nif test -n \\\"\\${ZSH_VERSION+set}\\\" && (emulate sh) >/dev/null 2>&1; then\n  emulate sh\n  NULLCMD=:\n  # Zsh 3.x and 4.x performs word splitting on \\${1+\\\"\\$@\\\"}, which\n  # is contrary to our usage.  Disable this feature.\n  alias -g '\\${1+\\\"\\$@\\\"}'='\\\"\\$@\\\"'\n  setopt NO_GLOB_SUBST\nelse\n  case \\`(set -o) 2>/dev/null\\` in *posix*) set -o posix;; esac\nfi\nBIN_SH=xpg4; export BIN_SH # for Tru64\nDUALCASE=1; export DUALCASE # for MKS sh\n\n# The HP-UX ksh and POSIX shell print the target directory to stdout\n# if CDPATH is set.\n(unset CDPATH) >/dev/null 2>&1 && unset CDPATH\n\nrelink_command=\\\"$relink_command\\\"\n\n# This environment variable determines our operation mode.\nif test \\\"\\$libtool_install_magic\\\" = \\\"$magic\\\"; then\n  # install mode needs the following variables:\n  generated_by_libtool_version='$macro_version'\n  notinst_deplibs='$notinst_deplibs'\nelse\n  # When we are sourced in execute mode, \\$file and \\$ECHO are already set.\n  if test \\\"\\$libtool_execute_magic\\\" != \\\"$magic\\\"; then\n    file=\\\"\\$0\\\"\"\n\n    qECHO=`$ECHO \"$ECHO\" | $SED \"$sed_quote_subst\"`\n    $ECHO \"\\\n\n# A function that is used when there is no print builtin or printf.\nfunc_fallback_echo ()\n{\n  eval 'cat <<_LTECHO_EOF\n\\$1\n_LTECHO_EOF'\n}\n    ECHO=\\\"$qECHO\\\"\n  fi\n\n# Very basic option parsing. These options are (a) specific to\n# the libtool wrapper, (b) are identical between the wrapper\n# /script/ and the wrapper /executable/ that is used only on\n# windows platforms, and (c) all begin with the string \"--lt-\"\n# (application programs are unlikely to have options that match\n# this pattern).\n#\n# There are only two supported options: --lt-debug and\n# --lt-dump-script. There is, deliberately, no --lt-help.\n#\n# The first argument to this parsing function should be the\n# script's $0 value, followed by \"$@\".\nlt_option_debug=\nfunc_parse_lt_options ()\n{\n  lt_script_arg0=\\$0\n  shift\n  for lt_opt\n  do\n    case \\\"\\$lt_opt\\\" in\n    --lt-debug) lt_option_debug=1 ;;\n    --lt-dump-script)\n        lt_dump_D=\\`\\$ECHO \\\"X\\$lt_script_arg0\\\" | $SED -e 's/^X//' -e 's%/[^/]*$%%'\\`\n        test \\\"X\\$lt_dump_D\\\" = \\\"X\\$lt_script_arg0\\\" && lt_dump_D=.\n        lt_dump_F=\\`\\$ECHO \\\"X\\$lt_script_arg0\\\" | $SED -e 's/^X//' -e 's%^.*/%%'\\`\n        cat \\\"\\$lt_dump_D/\\$lt_dump_F\\\"\n        exit 0\n      ;;\n    --lt-*)\n        \\$ECHO \\\"Unrecognized --lt- option: '\\$lt_opt'\\\" 1>&2\n        exit 1\n      ;;\n    esac\n  done\n\n  # Print the debug banner immediately:\n  if test -n \\\"\\$lt_option_debug\\\"; then\n    echo \\\"$outputname:$output:\\$LINENO: libtool wrapper (GNU $PACKAGE) $VERSION\\\" 1>&2\n  fi\n}\n\n# Used when --lt-debug. Prints its arguments to stdout\n# (redirection is the responsibility of the caller)\nfunc_lt_dump_args ()\n{\n  lt_dump_args_N=1;\n  for lt_arg\n  do\n    \\$ECHO \\\"$outputname:$output:\\$LINENO: newargv[\\$lt_dump_args_N]: \\$lt_arg\\\"\n    lt_dump_args_N=\\`expr \\$lt_dump_args_N + 1\\`\n  done\n}\n\n# Core function for launching the target application\nfunc_exec_program_core ()\n{\n\"\n  case $host in\n  # Backslashes separate directories on plain windows\n  *-*-mingw | *-*-os2* | *-cegcc*)\n    $ECHO \"\\\n      if test -n \\\"\\$lt_option_debug\\\"; then\n        \\$ECHO \\\"$outputname:$output:\\$LINENO: newargv[0]: \\$progdir\\\\\\\\\\$program\\\" 1>&2\n        func_lt_dump_args \\${1+\\\"\\$@\\\"} 1>&2\n      fi\n      exec \\\"\\$progdir\\\\\\\\\\$program\\\" \\${1+\\\"\\$@\\\"}\n\"\n    ;;\n\n  *)\n    $ECHO \"\\\n      if test -n \\\"\\$lt_option_debug\\\"; then\n        \\$ECHO \\\"$outputname:$output:\\$LINENO: newargv[0]: \\$progdir/\\$program\\\" 1>&2\n        func_lt_dump_args \\${1+\\\"\\$@\\\"} 1>&2\n      fi\n      exec \\\"\\$progdir/\\$program\\\" \\${1+\\\"\\$@\\\"}\n\"\n    ;;\n  esac\n  $ECHO \"\\\n      \\$ECHO \\\"\\$0: cannot exec \\$program \\$*\\\" 1>&2\n      exit 1\n}\n\n# A function to encapsulate launching the target application\n# Strips options in the --lt-* namespace from \\$@ and\n# launches target application with the remaining arguments.\nfunc_exec_program ()\n{\n  case \\\" \\$* \\\" in\n  *\\\\ --lt-*)\n    for lt_wr_arg\n    do\n      case \\$lt_wr_arg in\n      --lt-*) ;;\n      *) set x \\\"\\$@\\\" \\\"\\$lt_wr_arg\\\"; shift;;\n      esac\n      shift\n    done ;;\n  esac\n  func_exec_program_core \\${1+\\\"\\$@\\\"}\n}\n\n  # Parse options\n  func_parse_lt_options \\\"\\$0\\\" \\${1+\\\"\\$@\\\"}\n\n  # Find the directory that this script lives in.\n  thisdir=\\`\\$ECHO \\\"\\$file\\\" | $SED 's%/[^/]*$%%'\\`\n  test \\\"x\\$thisdir\\\" = \\\"x\\$file\\\" && thisdir=.\n\n  # Follow symbolic links until we get to the real thisdir.\n  file=\\`ls -ld \\\"\\$file\\\" | $SED -n 's/.*-> //p'\\`\n  while test -n \\\"\\$file\\\"; do\n    destdir=\\`\\$ECHO \\\"\\$file\\\" | $SED 's%/[^/]*\\$%%'\\`\n\n    # If there was a directory component, then change thisdir.\n    if test \\\"x\\$destdir\\\" != \\\"x\\$file\\\"; then\n      case \\\"\\$destdir\\\" in\n      [\\\\\\\\/]* | [A-Za-z]:[\\\\\\\\/]*) thisdir=\\\"\\$destdir\\\" ;;\n      *) thisdir=\\\"\\$thisdir/\\$destdir\\\" ;;\n      esac\n    fi\n\n    file=\\`\\$ECHO \\\"\\$file\\\" | $SED 's%^.*/%%'\\`\n    file=\\`ls -ld \\\"\\$thisdir/\\$file\\\" | $SED -n 's/.*-> //p'\\`\n  done\n\n  # Usually 'no', except on cygwin/mingw when embedded into\n  # the cwrapper.\n  WRAPPER_SCRIPT_BELONGS_IN_OBJDIR=$func_emit_wrapper_arg1\n  if test \\\"\\$WRAPPER_SCRIPT_BELONGS_IN_OBJDIR\\\" = \\\"yes\\\"; then\n    # special case for '.'\n    if test \\\"\\$thisdir\\\" = \\\".\\\"; then\n      thisdir=\\`pwd\\`\n    fi\n    # remove .libs from thisdir\n    case \\\"\\$thisdir\\\" in\n    *[\\\\\\\\/]$objdir ) thisdir=\\`\\$ECHO \\\"\\$thisdir\\\" | $SED 's%[\\\\\\\\/][^\\\\\\\\/]*$%%'\\` ;;\n    $objdir )   thisdir=. ;;\n    esac\n  fi\n\n  # Try to get the absolute directory name.\n  absdir=\\`cd \\\"\\$thisdir\\\" && pwd\\`\n  test -n \\\"\\$absdir\\\" && thisdir=\\\"\\$absdir\\\"\n\"\n\n\tif test yes = \"$fast_install\"; then\n\t  $ECHO \"\\\n  program=lt-'$outputname'$exeext\n  progdir=\\\"\\$thisdir/$objdir\\\"\n\n  if test ! -f \\\"\\$progdir/\\$program\\\" ||\n     { file=\\`ls -1dt \\\"\\$progdir/\\$program\\\" \\\"\\$progdir/../\\$program\\\" 2>/dev/null | $SED 1q\\`; \\\\\n       test \\\"X\\$file\\\" != \\\"X\\$progdir/\\$program\\\"; }; then\n\n    file=\\\"\\$\\$-\\$program\\\"\n\n    if test ! -d \\\"\\$progdir\\\"; then\n      $MKDIR \\\"\\$progdir\\\"\n    else\n      $RM \\\"\\$progdir/\\$file\\\"\n    fi\"\n\n\t  $ECHO \"\\\n\n    # relink executable if necessary\n    if test -n \\\"\\$relink_command\\\"; then\n      if relink_command_output=\\`eval \\$relink_command 2>&1\\`; then :\n      else\n\t\\$ECHO \\\"\\$relink_command_output\\\" >&2\n\t$RM \\\"\\$progdir/\\$file\\\"\n\texit 1\n      fi\n    fi\n\n    $MV \\\"\\$progdir/\\$file\\\" \\\"\\$progdir/\\$program\\\" 2>/dev/null ||\n    { $RM \\\"\\$progdir/\\$program\\\";\n      $MV \\\"\\$progdir/\\$file\\\" \\\"\\$progdir/\\$program\\\"; }\n    $RM \\\"\\$progdir/\\$file\\\"\n  fi\"\n\telse\n\t  $ECHO \"\\\n  program='$outputname'\n  progdir=\\\"\\$thisdir/$objdir\\\"\n\"\n\tfi\n\n\t$ECHO \"\\\n\n  if test -f \\\"\\$progdir/\\$program\\\"; then\"\n\n\t# fixup the dll searchpath if we need to.\n\t#\n\t# Fix the DLL searchpath if we need to.  Do this before prepending\n\t# to shlibpath, because on Windows, both are PATH and uninstalled\n\t# libraries must come first.\n\tif test -n \"$dllsearchpath\"; then\n\t  $ECHO \"\\\n    # Add the dll search path components to the executable PATH\n    PATH=$dllsearchpath:\\$PATH\n\"\n\tfi\n\n\t# Export our shlibpath_var if we have one.\n\tif test yes = \"$shlibpath_overrides_runpath\" && test -n \"$shlibpath_var\" && test -n \"$temp_rpath\"; then\n\t  $ECHO \"\\\n    # Add our own library path to $shlibpath_var\n    $shlibpath_var=\\\"$temp_rpath\\$$shlibpath_var\\\"\n\n    # Some systems cannot cope with colon-terminated $shlibpath_var\n    # The second colon is a workaround for a bug in BeOS R4 sed\n    $shlibpath_var=\\`\\$ECHO \\\"\\$$shlibpath_var\\\" | $SED 's/::*\\$//'\\`\n\n    export $shlibpath_var\n\"\n\tfi\n\n\t$ECHO \"\\\n    if test \\\"\\$libtool_execute_magic\\\" != \\\"$magic\\\"; then\n      # Run the actual program with our arguments.\n      func_exec_program \\${1+\\\"\\$@\\\"}\n    fi\n  else\n    # The program doesn't exist.\n    \\$ECHO \\\"\\$0: error: '\\$progdir/\\$program' does not exist\\\" 1>&2\n    \\$ECHO \\\"This script is just a wrapper for \\$program.\\\" 1>&2\n    \\$ECHO \\\"See the $PACKAGE documentation for more information.\\\" 1>&2\n    exit 1\n  fi\nfi\\\n\"\n}\n\n\n# func_emit_cwrapperexe_src\n# emit the source code for a wrapper executable on stdout\n# Must ONLY be called from within func_mode_link because\n# it depends on a number of variable set therein.\nfunc_emit_cwrapperexe_src ()\n{\n\tcat <<EOF\n\n/* $cwrappersource - temporary wrapper executable for $objdir/$outputname\n   Generated by $PROGRAM (GNU $PACKAGE) $VERSION\n\n   The $output program cannot be directly executed until all the libtool\n   libraries that it depends on are installed.\n\n   This wrapper executable should never be moved out of the build directory.\n   If it is, it will not operate correctly.\n*/\nEOF\n\t    cat <<\"EOF\"\n#ifdef _MSC_VER\n# define _CRT_SECURE_NO_DEPRECATE 1\n#endif\n#include <stdio.h>\n#include <stdlib.h>\n#ifdef _MSC_VER\n# include <direct.h>\n# include <process.h>\n# include <io.h>\n#else\n# include <unistd.h>\n# include <stdint.h>\n# ifdef __CYGWIN__\n#  include <io.h>\n# endif\n#endif\n#include <malloc.h>\n#include <stdarg.h>\n#include <assert.h>\n#include <string.h>\n#include <ctype.h>\n#include <errno.h>\n#include <fcntl.h>\n#include <sys/stat.h>\n\n#define STREQ(s1, s2) (strcmp ((s1), (s2)) == 0)\n\n/* declarations of non-ANSI functions */\n#if defined __MINGW32__\n# ifdef __STRICT_ANSI__\nint _putenv (const char *);\n# endif\n#elif defined __CYGWIN__\n# ifdef __STRICT_ANSI__\nchar *realpath (const char *, char *);\nint putenv (char *);\nint setenv (const char *, const char *, int);\n# endif\n/* #elif defined other_platform || defined ... */\n#endif\n\n/* portability defines, excluding path handling macros */\n#if defined _MSC_VER\n# define setmode _setmode\n# define stat    _stat\n# define chmod   _chmod\n# define getcwd  _getcwd\n# define putenv  _putenv\n# define S_IXUSR _S_IEXEC\n#elif defined __MINGW32__\n# define setmode _setmode\n# define stat    _stat\n# define chmod   _chmod\n# define getcwd  _getcwd\n# define putenv  _putenv\n#elif defined __CYGWIN__\n# define HAVE_SETENV\n# define FOPEN_WB \"wb\"\n/* #elif defined other platforms ... */\n#endif\n\n#if defined PATH_MAX\n# define LT_PATHMAX PATH_MAX\n#elif defined MAXPATHLEN\n# define LT_PATHMAX MAXPATHLEN\n#else\n# define LT_PATHMAX 1024\n#endif\n\n#ifndef S_IXOTH\n# define S_IXOTH 0\n#endif\n#ifndef S_IXGRP\n# define S_IXGRP 0\n#endif\n\n/* path handling portability macros */\n#ifndef DIR_SEPARATOR\n# define DIR_SEPARATOR '/'\n# define PATH_SEPARATOR ':'\n#endif\n\n#if defined _WIN32 || defined __MSDOS__ || defined __DJGPP__ || \\\n  defined __OS2__\n# define HAVE_DOS_BASED_FILE_SYSTEM\n# define FOPEN_WB \"wb\"\n# ifndef DIR_SEPARATOR_2\n#  define DIR_SEPARATOR_2 '\\\\'\n# endif\n# ifndef PATH_SEPARATOR_2\n#  define PATH_SEPARATOR_2 ';'\n# endif\n#endif\n\n#ifndef DIR_SEPARATOR_2\n# define IS_DIR_SEPARATOR(ch) ((ch) == DIR_SEPARATOR)\n#else /* DIR_SEPARATOR_2 */\n# define IS_DIR_SEPARATOR(ch) \\\n\t(((ch) == DIR_SEPARATOR) || ((ch) == DIR_SEPARATOR_2))\n#endif /* DIR_SEPARATOR_2 */\n\n#ifndef PATH_SEPARATOR_2\n# define IS_PATH_SEPARATOR(ch) ((ch) == PATH_SEPARATOR)\n#else /* PATH_SEPARATOR_2 */\n# define IS_PATH_SEPARATOR(ch) ((ch) == PATH_SEPARATOR_2)\n#endif /* PATH_SEPARATOR_2 */\n\n#ifndef FOPEN_WB\n# define FOPEN_WB \"w\"\n#endif\n#ifndef _O_BINARY\n# define _O_BINARY 0\n#endif\n\n#define XMALLOC(type, num)      ((type *) xmalloc ((num) * sizeof(type)))\n#define XFREE(stale) do { \\\n  if (stale) { free (stale); stale = 0; } \\\n} while (0)\n\n#if defined LT_DEBUGWRAPPER\nstatic int lt_debug = 1;\n#else\nstatic int lt_debug = 0;\n#endif\n\nconst char *program_name = \"libtool-wrapper\"; /* in case xstrdup fails */\n\nvoid *xmalloc (size_t num);\nchar *xstrdup (const char *string);\nconst char *base_name (const char *name);\nchar *find_executable (const char *wrapper);\nchar *chase_symlinks (const char *pathspec);\nint make_executable (const char *path);\nint check_executable (const char *path);\nchar *strendzap (char *str, const char *pat);\nvoid lt_debugprintf (const char *file, int line, const char *fmt, ...);\nvoid lt_fatal (const char *file, int line, const char *message, ...);\nstatic const char *nonnull (const char *s);\nstatic const char *nonempty (const char *s);\nvoid lt_setenv (const char *name, const char *value);\nchar *lt_extend_str (const char *orig_value, const char *add, int to_end);\nvoid lt_update_exe_path (const char *name, const char *value);\nvoid lt_update_lib_path (const char *name, const char *value);\nchar **prepare_spawn (char **argv);\nvoid lt_dump_script (FILE *f);\nEOF\n\n\t    cat <<EOF\n#if __GNUC__ < 4 || (__GNUC__ == 4 && __GNUC_MINOR__ < 5)\n# define externally_visible volatile\n#else\n# define externally_visible __attribute__((externally_visible)) volatile\n#endif\nexternally_visible const char * MAGIC_EXE = \"$magic_exe\";\nconst char * LIB_PATH_VARNAME = \"$shlibpath_var\";\nEOF\n\n\t    if test yes = \"$shlibpath_overrides_runpath\" && test -n \"$shlibpath_var\" && test -n \"$temp_rpath\"; then\n              func_to_host_path \"$temp_rpath\"\n\t      cat <<EOF\nconst char * LIB_PATH_VALUE   = \"$func_to_host_path_result\";\nEOF\n\t    else\n\t      cat <<\"EOF\"\nconst char * LIB_PATH_VALUE   = \"\";\nEOF\n\t    fi\n\n\t    if test -n \"$dllsearchpath\"; then\n              func_to_host_path \"$dllsearchpath:\"\n\t      cat <<EOF\nconst char * EXE_PATH_VARNAME = \"PATH\";\nconst char * EXE_PATH_VALUE   = \"$func_to_host_path_result\";\nEOF\n\t    else\n\t      cat <<\"EOF\"\nconst char * EXE_PATH_VARNAME = \"\";\nconst char * EXE_PATH_VALUE   = \"\";\nEOF\n\t    fi\n\n\t    if test yes = \"$fast_install\"; then\n\t      cat <<EOF\nconst char * TARGET_PROGRAM_NAME = \"lt-$outputname\"; /* hopefully, no .exe */\nEOF\n\t    else\n\t      cat <<EOF\nconst char * TARGET_PROGRAM_NAME = \"$outputname\"; /* hopefully, no .exe */\nEOF\n\t    fi\n\n\n\t    cat <<\"EOF\"\n\n#define LTWRAPPER_OPTION_PREFIX         \"--lt-\"\n\nstatic const char *ltwrapper_option_prefix = LTWRAPPER_OPTION_PREFIX;\nstatic const char *dumpscript_opt       = LTWRAPPER_OPTION_PREFIX \"dump-script\";\nstatic const char *debug_opt            = LTWRAPPER_OPTION_PREFIX \"debug\";\n\nint\nmain (int argc, char *argv[])\n{\n  char **newargz;\n  int  newargc;\n  char *tmp_pathspec;\n  char *actual_cwrapper_path;\n  char *actual_cwrapper_name;\n  char *target_name;\n  char *lt_argv_zero;\n  int rval = 127;\n\n  int i;\n\n  program_name = (char *) xstrdup (base_name (argv[0]));\n  newargz = XMALLOC (char *, (size_t) argc + 1);\n\n  /* very simple arg parsing; don't want to rely on getopt\n   * also, copy all non cwrapper options to newargz, except\n   * argz[0], which is handled differently\n   */\n  newargc=0;\n  for (i = 1; i < argc; i++)\n    {\n      if (STREQ (argv[i], dumpscript_opt))\n\t{\nEOF\n\t    case $host in\n\t      *mingw* | *cygwin* )\n\t\t# make stdout use \"unix\" line endings\n\t\techo \"          setmode(1,_O_BINARY);\"\n\t\t;;\n\t      esac\n\n\t    cat <<\"EOF\"\n\t  lt_dump_script (stdout);\n\t  return 0;\n\t}\n      if (STREQ (argv[i], debug_opt))\n\t{\n          lt_debug = 1;\n          continue;\n\t}\n      if (STREQ (argv[i], ltwrapper_option_prefix))\n        {\n          /* however, if there is an option in the LTWRAPPER_OPTION_PREFIX\n             namespace, but it is not one of the ones we know about and\n             have already dealt with, above (inluding dump-script), then\n             report an error. Otherwise, targets might begin to believe\n             they are allowed to use options in the LTWRAPPER_OPTION_PREFIX\n             namespace. The first time any user complains about this, we'll\n             need to make LTWRAPPER_OPTION_PREFIX a configure-time option\n             or a configure.ac-settable value.\n           */\n          lt_fatal (__FILE__, __LINE__,\n\t\t    \"unrecognized %s option: '%s'\",\n                    ltwrapper_option_prefix, argv[i]);\n        }\n      /* otherwise ... */\n      newargz[++newargc] = xstrdup (argv[i]);\n    }\n  newargz[++newargc] = NULL;\n\nEOF\n\t    cat <<EOF\n  /* The GNU banner must be the first non-error debug message */\n  lt_debugprintf (__FILE__, __LINE__, \"libtool wrapper (GNU $PACKAGE) $VERSION\\n\");\nEOF\n\t    cat <<\"EOF\"\n  lt_debugprintf (__FILE__, __LINE__, \"(main) argv[0]: %s\\n\", argv[0]);\n  lt_debugprintf (__FILE__, __LINE__, \"(main) program_name: %s\\n\", program_name);\n\n  tmp_pathspec = find_executable (argv[0]);\n  if (tmp_pathspec == NULL)\n    lt_fatal (__FILE__, __LINE__, \"couldn't find %s\", argv[0]);\n  lt_debugprintf (__FILE__, __LINE__,\n                  \"(main) found exe (before symlink chase) at: %s\\n\",\n\t\t  tmp_pathspec);\n\n  actual_cwrapper_path = chase_symlinks (tmp_pathspec);\n  lt_debugprintf (__FILE__, __LINE__,\n                  \"(main) found exe (after symlink chase) at: %s\\n\",\n\t\t  actual_cwrapper_path);\n  XFREE (tmp_pathspec);\n\n  actual_cwrapper_name = xstrdup (base_name (actual_cwrapper_path));\n  strendzap (actual_cwrapper_path, actual_cwrapper_name);\n\n  /* wrapper name transforms */\n  strendzap (actual_cwrapper_name, \".exe\");\n  tmp_pathspec = lt_extend_str (actual_cwrapper_name, \".exe\", 1);\n  XFREE (actual_cwrapper_name);\n  actual_cwrapper_name = tmp_pathspec;\n  tmp_pathspec = 0;\n\n  /* target_name transforms -- use actual target program name; might have lt- prefix */\n  target_name = xstrdup (base_name (TARGET_PROGRAM_NAME));\n  strendzap (target_name, \".exe\");\n  tmp_pathspec = lt_extend_str (target_name, \".exe\", 1);\n  XFREE (target_name);\n  target_name = tmp_pathspec;\n  tmp_pathspec = 0;\n\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(main) libtool target name: %s\\n\",\n\t\t  target_name);\nEOF\n\n\t    cat <<EOF\n  newargz[0] =\n    XMALLOC (char, (strlen (actual_cwrapper_path) +\n\t\t    strlen (\"$objdir\") + 1 + strlen (actual_cwrapper_name) + 1));\n  strcpy (newargz[0], actual_cwrapper_path);\n  strcat (newargz[0], \"$objdir\");\n  strcat (newargz[0], \"/\");\nEOF\n\n\t    cat <<\"EOF\"\n  /* stop here, and copy so we don't have to do this twice */\n  tmp_pathspec = xstrdup (newargz[0]);\n\n  /* do NOT want the lt- prefix here, so use actual_cwrapper_name */\n  strcat (newargz[0], actual_cwrapper_name);\n\n  /* DO want the lt- prefix here if it exists, so use target_name */\n  lt_argv_zero = lt_extend_str (tmp_pathspec, target_name, 1);\n  XFREE (tmp_pathspec);\n  tmp_pathspec = NULL;\nEOF\n\n\t    case $host_os in\n\t      mingw*)\n\t    cat <<\"EOF\"\n  {\n    char* p;\n    while ((p = strchr (newargz[0], '\\\\')) != NULL)\n      {\n\t*p = '/';\n      }\n    while ((p = strchr (lt_argv_zero, '\\\\')) != NULL)\n      {\n\t*p = '/';\n      }\n  }\nEOF\n\t    ;;\n\t    esac\n\n\t    cat <<\"EOF\"\n  XFREE (target_name);\n  XFREE (actual_cwrapper_path);\n  XFREE (actual_cwrapper_name);\n\n  lt_setenv (\"BIN_SH\", \"xpg4\"); /* for Tru64 */\n  lt_setenv (\"DUALCASE\", \"1\");  /* for MSK sh */\n  /* Update the DLL searchpath.  EXE_PATH_VALUE ($dllsearchpath) must\n     be prepended before (that is, appear after) LIB_PATH_VALUE ($temp_rpath)\n     because on Windows, both *_VARNAMEs are PATH but uninstalled\n     libraries must come first. */\n  lt_update_exe_path (EXE_PATH_VARNAME, EXE_PATH_VALUE);\n  lt_update_lib_path (LIB_PATH_VARNAME, LIB_PATH_VALUE);\n\n  lt_debugprintf (__FILE__, __LINE__, \"(main) lt_argv_zero: %s\\n\",\n\t\t  nonnull (lt_argv_zero));\n  for (i = 0; i < newargc; i++)\n    {\n      lt_debugprintf (__FILE__, __LINE__, \"(main) newargz[%d]: %s\\n\",\n\t\t      i, nonnull (newargz[i]));\n    }\n\nEOF\n\n\t    case $host_os in\n\t      mingw*)\n\t\tcat <<\"EOF\"\n  /* execv doesn't actually work on mingw as expected on unix */\n  newargz = prepare_spawn (newargz);\n  rval = (int) _spawnv (_P_WAIT, lt_argv_zero, (const char * const *) newargz);\n  if (rval == -1)\n    {\n      /* failed to start process */\n      lt_debugprintf (__FILE__, __LINE__,\n\t\t      \"(main) failed to launch target \\\"%s\\\": %s\\n\",\n\t\t      lt_argv_zero, nonnull (strerror (errno)));\n      return 127;\n    }\n  return rval;\nEOF\n\t\t;;\n\t      *)\n\t\tcat <<\"EOF\"\n  execv (lt_argv_zero, newargz);\n  return rval; /* =127, but avoids unused variable warning */\nEOF\n\t\t;;\n\t    esac\n\n\t    cat <<\"EOF\"\n}\n\nvoid *\nxmalloc (size_t num)\n{\n  void *p = (void *) malloc (num);\n  if (!p)\n    lt_fatal (__FILE__, __LINE__, \"memory exhausted\");\n\n  return p;\n}\n\nchar *\nxstrdup (const char *string)\n{\n  return string ? strcpy ((char *) xmalloc (strlen (string) + 1),\n\t\t\t  string) : NULL;\n}\n\nconst char *\nbase_name (const char *name)\n{\n  const char *base;\n\n#if defined HAVE_DOS_BASED_FILE_SYSTEM\n  /* Skip over the disk name in MSDOS pathnames. */\n  if (isalpha ((unsigned char) name[0]) && name[1] == ':')\n    name += 2;\n#endif\n\n  for (base = name; *name; name++)\n    if (IS_DIR_SEPARATOR (*name))\n      base = name + 1;\n  return base;\n}\n\nint\ncheck_executable (const char *path)\n{\n  struct stat st;\n\n  lt_debugprintf (__FILE__, __LINE__, \"(check_executable): %s\\n\",\n                  nonempty (path));\n  if ((!path) || (!*path))\n    return 0;\n\n  if ((stat (path, &st) >= 0)\n      && (st.st_mode & (S_IXUSR | S_IXGRP | S_IXOTH)))\n    return 1;\n  else\n    return 0;\n}\n\nint\nmake_executable (const char *path)\n{\n  int rval = 0;\n  struct stat st;\n\n  lt_debugprintf (__FILE__, __LINE__, \"(make_executable): %s\\n\",\n                  nonempty (path));\n  if ((!path) || (!*path))\n    return 0;\n\n  if (stat (path, &st) >= 0)\n    {\n      rval = chmod (path, st.st_mode | S_IXOTH | S_IXGRP | S_IXUSR);\n    }\n  return rval;\n}\n\n/* Searches for the full path of the wrapper.  Returns\n   newly allocated full path name if found, NULL otherwise\n   Does not chase symlinks, even on platforms that support them.\n*/\nchar *\nfind_executable (const char *wrapper)\n{\n  int has_slash = 0;\n  const char *p;\n  const char *p_next;\n  /* static buffer for getcwd */\n  char tmp[LT_PATHMAX + 1];\n  size_t tmp_len;\n  char *concat_name;\n\n  lt_debugprintf (__FILE__, __LINE__, \"(find_executable): %s\\n\",\n                  nonempty (wrapper));\n\n  if ((wrapper == NULL) || (*wrapper == '\\0'))\n    return NULL;\n\n  /* Absolute path? */\n#if defined HAVE_DOS_BASED_FILE_SYSTEM\n  if (isalpha ((unsigned char) wrapper[0]) && wrapper[1] == ':')\n    {\n      concat_name = xstrdup (wrapper);\n      if (check_executable (concat_name))\n\treturn concat_name;\n      XFREE (concat_name);\n    }\n  else\n    {\n#endif\n      if (IS_DIR_SEPARATOR (wrapper[0]))\n\t{\n\t  concat_name = xstrdup (wrapper);\n\t  if (check_executable (concat_name))\n\t    return concat_name;\n\t  XFREE (concat_name);\n\t}\n#if defined HAVE_DOS_BASED_FILE_SYSTEM\n    }\n#endif\n\n  for (p = wrapper; *p; p++)\n    if (*p == '/')\n      {\n\thas_slash = 1;\n\tbreak;\n      }\n  if (!has_slash)\n    {\n      /* no slashes; search PATH */\n      const char *path = getenv (\"PATH\");\n      if (path != NULL)\n\t{\n\t  for (p = path; *p; p = p_next)\n\t    {\n\t      const char *q;\n\t      size_t p_len;\n\t      for (q = p; *q; q++)\n\t\tif (IS_PATH_SEPARATOR (*q))\n\t\t  break;\n\t      p_len = (size_t) (q - p);\n\t      p_next = (*q == '\\0' ? q : q + 1);\n\t      if (p_len == 0)\n\t\t{\n\t\t  /* empty path: current directory */\n\t\t  if (getcwd (tmp, LT_PATHMAX) == NULL)\n\t\t    lt_fatal (__FILE__, __LINE__, \"getcwd failed: %s\",\n                              nonnull (strerror (errno)));\n\t\t  tmp_len = strlen (tmp);\n\t\t  concat_name =\n\t\t    XMALLOC (char, tmp_len + 1 + strlen (wrapper) + 1);\n\t\t  memcpy (concat_name, tmp, tmp_len);\n\t\t  concat_name[tmp_len] = '/';\n\t\t  strcpy (concat_name + tmp_len + 1, wrapper);\n\t\t}\n\t      else\n\t\t{\n\t\t  concat_name =\n\t\t    XMALLOC (char, p_len + 1 + strlen (wrapper) + 1);\n\t\t  memcpy (concat_name, p, p_len);\n\t\t  concat_name[p_len] = '/';\n\t\t  strcpy (concat_name + p_len + 1, wrapper);\n\t\t}\n\t      if (check_executable (concat_name))\n\t\treturn concat_name;\n\t      XFREE (concat_name);\n\t    }\n\t}\n      /* not found in PATH; assume curdir */\n    }\n  /* Relative path | not found in path: prepend cwd */\n  if (getcwd (tmp, LT_PATHMAX) == NULL)\n    lt_fatal (__FILE__, __LINE__, \"getcwd failed: %s\",\n              nonnull (strerror (errno)));\n  tmp_len = strlen (tmp);\n  concat_name = XMALLOC (char, tmp_len + 1 + strlen (wrapper) + 1);\n  memcpy (concat_name, tmp, tmp_len);\n  concat_name[tmp_len] = '/';\n  strcpy (concat_name + tmp_len + 1, wrapper);\n\n  if (check_executable (concat_name))\n    return concat_name;\n  XFREE (concat_name);\n  return NULL;\n}\n\nchar *\nchase_symlinks (const char *pathspec)\n{\n#ifndef S_ISLNK\n  return xstrdup (pathspec);\n#else\n  char buf[LT_PATHMAX];\n  struct stat s;\n  char *tmp_pathspec = xstrdup (pathspec);\n  char *p;\n  int has_symlinks = 0;\n  while (strlen (tmp_pathspec) && !has_symlinks)\n    {\n      lt_debugprintf (__FILE__, __LINE__,\n\t\t      \"checking path component for symlinks: %s\\n\",\n\t\t      tmp_pathspec);\n      if (lstat (tmp_pathspec, &s) == 0)\n\t{\n\t  if (S_ISLNK (s.st_mode) != 0)\n\t    {\n\t      has_symlinks = 1;\n\t      break;\n\t    }\n\n\t  /* search backwards for last DIR_SEPARATOR */\n\t  p = tmp_pathspec + strlen (tmp_pathspec) - 1;\n\t  while ((p > tmp_pathspec) && (!IS_DIR_SEPARATOR (*p)))\n\t    p--;\n\t  if ((p == tmp_pathspec) && (!IS_DIR_SEPARATOR (*p)))\n\t    {\n\t      /* no more DIR_SEPARATORS left */\n\t      break;\n\t    }\n\t  *p = '\\0';\n\t}\n      else\n\t{\n\t  lt_fatal (__FILE__, __LINE__,\n\t\t    \"error accessing file \\\"%s\\\": %s\",\n\t\t    tmp_pathspec, nonnull (strerror (errno)));\n\t}\n    }\n  XFREE (tmp_pathspec);\n\n  if (!has_symlinks)\n    {\n      return xstrdup (pathspec);\n    }\n\n  tmp_pathspec = realpath (pathspec, buf);\n  if (tmp_pathspec == 0)\n    {\n      lt_fatal (__FILE__, __LINE__,\n\t\t\"could not follow symlinks for %s\", pathspec);\n    }\n  return xstrdup (tmp_pathspec);\n#endif\n}\n\nchar *\nstrendzap (char *str, const char *pat)\n{\n  size_t len, patlen;\n\n  assert (str != NULL);\n  assert (pat != NULL);\n\n  len = strlen (str);\n  patlen = strlen (pat);\n\n  if (patlen <= len)\n    {\n      str += len - patlen;\n      if (STREQ (str, pat))\n\t*str = '\\0';\n    }\n  return str;\n}\n\nvoid\nlt_debugprintf (const char *file, int line, const char *fmt, ...)\n{\n  va_list args;\n  if (lt_debug)\n    {\n      (void) fprintf (stderr, \"%s:%s:%d: \", program_name, file, line);\n      va_start (args, fmt);\n      (void) vfprintf (stderr, fmt, args);\n      va_end (args);\n    }\n}\n\nstatic void\nlt_error_core (int exit_status, const char *file,\n\t       int line, const char *mode,\n\t       const char *message, va_list ap)\n{\n  fprintf (stderr, \"%s:%s:%d: %s: \", program_name, file, line, mode);\n  vfprintf (stderr, message, ap);\n  fprintf (stderr, \".\\n\");\n\n  if (exit_status >= 0)\n    exit (exit_status);\n}\n\nvoid\nlt_fatal (const char *file, int line, const char *message, ...)\n{\n  va_list ap;\n  va_start (ap, message);\n  lt_error_core (EXIT_FAILURE, file, line, \"FATAL\", message, ap);\n  va_end (ap);\n}\n\nstatic const char *\nnonnull (const char *s)\n{\n  return s ? s : \"(null)\";\n}\n\nstatic const char *\nnonempty (const char *s)\n{\n  return (s && !*s) ? \"(empty)\" : nonnull (s);\n}\n\nvoid\nlt_setenv (const char *name, const char *value)\n{\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(lt_setenv) setting '%s' to '%s'\\n\",\n                  nonnull (name), nonnull (value));\n  {\n#ifdef HAVE_SETENV\n    /* always make a copy, for consistency with !HAVE_SETENV */\n    char *str = xstrdup (value);\n    setenv (name, str, 1);\n#else\n    size_t len = strlen (name) + 1 + strlen (value) + 1;\n    char *str = XMALLOC (char, len);\n    sprintf (str, \"%s=%s\", name, value);\n    if (putenv (str) != EXIT_SUCCESS)\n      {\n        XFREE (str);\n      }\n#endif\n  }\n}\n\nchar *\nlt_extend_str (const char *orig_value, const char *add, int to_end)\n{\n  char *new_value;\n  if (orig_value && *orig_value)\n    {\n      size_t orig_value_len = strlen (orig_value);\n      size_t add_len = strlen (add);\n      new_value = XMALLOC (char, add_len + orig_value_len + 1);\n      if (to_end)\n        {\n          strcpy (new_value, orig_value);\n          strcpy (new_value + orig_value_len, add);\n        }\n      else\n        {\n          strcpy (new_value, add);\n          strcpy (new_value + add_len, orig_value);\n        }\n    }\n  else\n    {\n      new_value = xstrdup (add);\n    }\n  return new_value;\n}\n\nvoid\nlt_update_exe_path (const char *name, const char *value)\n{\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(lt_update_exe_path) modifying '%s' by prepending '%s'\\n\",\n                  nonnull (name), nonnull (value));\n\n  if (name && *name && value && *value)\n    {\n      char *new_value = lt_extend_str (getenv (name), value, 0);\n      /* some systems can't cope with a ':'-terminated path #' */\n      size_t len = strlen (new_value);\n      while ((len > 0) && IS_PATH_SEPARATOR (new_value[len-1]))\n        {\n          new_value[--len] = '\\0';\n        }\n      lt_setenv (name, new_value);\n      XFREE (new_value);\n    }\n}\n\nvoid\nlt_update_lib_path (const char *name, const char *value)\n{\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(lt_update_lib_path) modifying '%s' by prepending '%s'\\n\",\n                  nonnull (name), nonnull (value));\n\n  if (name && *name && value && *value)\n    {\n      char *new_value = lt_extend_str (getenv (name), value, 0);\n      lt_setenv (name, new_value);\n      XFREE (new_value);\n    }\n}\n\nEOF\n\t    case $host_os in\n\t      mingw*)\n\t\tcat <<\"EOF\"\n\n/* Prepares an argument vector before calling spawn().\n   Note that spawn() does not by itself call the command interpreter\n     (getenv (\"COMSPEC\") != NULL ? getenv (\"COMSPEC\") :\n      ({ OSVERSIONINFO v; v.dwOSVersionInfoSize = sizeof(OSVERSIONINFO);\n         GetVersionEx(&v);\n         v.dwPlatformId == VER_PLATFORM_WIN32_NT;\n      }) ? \"cmd.exe\" : \"command.com\").\n   Instead it simply concatenates the arguments, separated by ' ', and calls\n   CreateProcess().  We must quote the arguments since Win32 CreateProcess()\n   interprets characters like ' ', '\\t', '\\\\', '\"' (but not '<' and '>') in a\n   special way:\n   - Space and tab are interpreted as delimiters. They are not treated as\n     delimiters if they are surrounded by double quotes: \"...\".\n   - Unescaped double quotes are removed from the input. Their only effect is\n     that within double quotes, space and tab are treated like normal\n     characters.\n   - Backslashes not followed by double quotes are not special.\n   - But 2*n+1 backslashes followed by a double quote become\n     n backslashes followed by a double quote (n >= 0):\n       \\\" -> \"\n       \\\\\\\" -> \\\"\n       \\\\\\\\\\\" -> \\\\\"\n */\n#define SHELL_SPECIAL_CHARS \"\\\"\\\\ \\001\\002\\003\\004\\005\\006\\007\\010\\011\\012\\013\\014\\015\\016\\017\\020\\021\\022\\023\\024\\025\\026\\027\\030\\031\\032\\033\\034\\035\\036\\037\"\n#define SHELL_SPACE_CHARS \" \\001\\002\\003\\004\\005\\006\\007\\010\\011\\012\\013\\014\\015\\016\\017\\020\\021\\022\\023\\024\\025\\026\\027\\030\\031\\032\\033\\034\\035\\036\\037\"\nchar **\nprepare_spawn (char **argv)\n{\n  size_t argc;\n  char **new_argv;\n  size_t i;\n\n  /* Count number of arguments.  */\n  for (argc = 0; argv[argc] != NULL; argc++)\n    ;\n\n  /* Allocate new argument vector.  */\n  new_argv = XMALLOC (char *, argc + 1);\n\n  /* Put quoted arguments into the new argument vector.  */\n  for (i = 0; i < argc; i++)\n    {\n      const char *string = argv[i];\n\n      if (string[0] == '\\0')\n\tnew_argv[i] = xstrdup (\"\\\"\\\"\");\n      else if (strpbrk (string, SHELL_SPECIAL_CHARS) != NULL)\n\t{\n\t  int quote_around = (strpbrk (string, SHELL_SPACE_CHARS) != NULL);\n\t  size_t length;\n\t  unsigned int backslashes;\n\t  const char *s;\n\t  char *quoted_string;\n\t  char *p;\n\n\t  length = 0;\n\t  backslashes = 0;\n\t  if (quote_around)\n\t    length++;\n\t  for (s = string; *s != '\\0'; s++)\n\t    {\n\t      char c = *s;\n\t      if (c == '\"')\n\t\tlength += backslashes + 1;\n\t      length++;\n\t      if (c == '\\\\')\n\t\tbackslashes++;\n\t      else\n\t\tbackslashes = 0;\n\t    }\n\t  if (quote_around)\n\t    length += backslashes + 1;\n\n\t  quoted_string = XMALLOC (char, length + 1);\n\n\t  p = quoted_string;\n\t  backslashes = 0;\n\t  if (quote_around)\n\t    *p++ = '\"';\n\t  for (s = string; *s != '\\0'; s++)\n\t    {\n\t      char c = *s;\n\t      if (c == '\"')\n\t\t{\n\t\t  unsigned int j;\n\t\t  for (j = backslashes + 1; j > 0; j--)\n\t\t    *p++ = '\\\\';\n\t\t}\n\t      *p++ = c;\n\t      if (c == '\\\\')\n\t\tbackslashes++;\n\t      else\n\t\tbackslashes = 0;\n\t    }\n\t  if (quote_around)\n\t    {\n\t      unsigned int j;\n\t      for (j = backslashes; j > 0; j--)\n\t\t*p++ = '\\\\';\n\t      *p++ = '\"';\n\t    }\n\t  *p = '\\0';\n\n\t  new_argv[i] = quoted_string;\n\t}\n      else\n\tnew_argv[i] = (char *) string;\n    }\n  new_argv[argc] = NULL;\n\n  return new_argv;\n}\nEOF\n\t\t;;\n\t    esac\n\n            cat <<\"EOF\"\nvoid lt_dump_script (FILE* f)\n{\nEOF\n\t    func_emit_wrapper yes |\n\t      $SED -n -e '\ns/^\\(.\\{79\\}\\)\\(..*\\)/\\1\\\n\\2/\nh\ns/\\([\\\\\"]\\)/\\\\\\1/g\ns/$/\\\\n/\ns/\\([^\\n]*\\).*/  fputs (\"\\1\", f);/p\ng\nD'\n            cat <<\"EOF\"\n}\nEOF\n}\n# end: func_emit_cwrapperexe_src\n\n# func_win32_import_lib_p ARG\n# True if ARG is an import lib, as indicated by $file_magic_cmd\nfunc_win32_import_lib_p ()\n{\n    $debug_cmd\n\n    case `eval $file_magic_cmd \\\"\\$1\\\" 2>/dev/null | $SED -e 10q` in\n    *import*) : ;;\n    *) false ;;\n    esac\n}\n\n# func_suncc_cstd_abi\n# !!ONLY CALL THIS FOR SUN CC AFTER $compile_command IS FULLY EXPANDED!!\n# Several compiler flags select an ABI that is incompatible with the\n# Cstd library. Avoid specifying it if any are in CXXFLAGS.\nfunc_suncc_cstd_abi ()\n{\n    $debug_cmd\n\n    case \" $compile_command \" in\n    *\" -compat=g \"*|*\\ -std=c++[0-9][0-9]\\ *|*\" -library=stdcxx4 \"*|*\" -library=stlport4 \"*)\n      suncc_use_cstd_abi=no\n      ;;\n    *)\n      suncc_use_cstd_abi=yes\n      ;;\n    esac\n}\n\n# func_mode_link arg...\nfunc_mode_link ()\n{\n    $debug_cmd\n\n    case $host in\n    *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-cegcc*)\n      # It is impossible to link a dll without this setting, and\n      # we shouldn't force the makefile maintainer to figure out\n      # what system we are compiling for in order to pass an extra\n      # flag for every libtool invocation.\n      # allow_undefined=no\n\n      # FIXME: Unfortunately, there are problems with the above when trying\n      # to make a dll that has undefined symbols, in which case not\n      # even a static library is built.  For now, we need to specify\n      # -no-undefined on the libtool link line when we can be certain\n      # that all symbols are satisfied, otherwise we get a static library.\n      allow_undefined=yes\n      ;;\n    *)\n      allow_undefined=yes\n      ;;\n    esac\n    libtool_args=$nonopt\n    base_compile=\"$nonopt $@\"\n    compile_command=$nonopt\n    finalize_command=$nonopt\n\n    compile_rpath=\n    finalize_rpath=\n    compile_shlibpath=\n    finalize_shlibpath=\n    convenience=\n    old_convenience=\n    deplibs=\n    old_deplibs=\n    compiler_flags=\n    linker_flags=\n    dllsearchpath=\n    lib_search_path=`pwd`\n    inst_prefix_dir=\n    new_inherited_linker_flags=\n\n    avoid_version=no\n    bindir=\n    dlfiles=\n    dlprefiles=\n    dlself=no\n    export_dynamic=no\n    export_symbols=\n    export_symbols_regex=\n    generated=\n    libobjs=\n    ltlibs=\n    module=no\n    no_install=no\n    objs=\n    os2dllname=\n    non_pic_objects=\n    precious_files_regex=\n    prefer_static_libs=no\n    preload=false\n    prev=\n    prevarg=\n    release=\n    rpath=\n    xrpath=\n    perm_rpath=\n    temp_rpath=\n    thread_safe=no\n    vinfo=\n    vinfo_number=no\n    weak_libs=\n    single_module=$wl-single_module\n    func_infer_tag $base_compile\n\n    # We need to know -static, to get the right output filenames.\n    for arg\n    do\n      case $arg in\n      -shared)\n\ttest yes != \"$build_libtool_libs\" \\\n\t  && func_fatal_configuration \"cannot build a shared library\"\n\tbuild_old_libs=no\n\tbreak\n\t;;\n      -all-static | -static | -static-libtool-libs)\n\tcase $arg in\n\t-all-static)\n\t  if test yes = \"$build_libtool_libs\" && test -z \"$link_static_flag\"; then\n\t    func_warning \"complete static linking is impossible in this configuration\"\n\t  fi\n\t  if test -n \"$link_static_flag\"; then\n\t    dlopen_self=$dlopen_self_static\n\t  fi\n\t  prefer_static_libs=yes\n\t  ;;\n\t-static)\n\t  if test -z \"$pic_flag\" && test -n \"$link_static_flag\"; then\n\t    dlopen_self=$dlopen_self_static\n\t  fi\n\t  prefer_static_libs=built\n\t  ;;\n\t-static-libtool-libs)\n\t  if test -z \"$pic_flag\" && test -n \"$link_static_flag\"; then\n\t    dlopen_self=$dlopen_self_static\n\t  fi\n\t  prefer_static_libs=yes\n\t  ;;\n\tesac\n\tbuild_libtool_libs=no\n\tbuild_old_libs=yes\n\tbreak\n\t;;\n      esac\n    done\n\n    # See if our shared archives depend on static archives.\n    test -n \"$old_archive_from_new_cmds\" && build_old_libs=yes\n\n    # Go through the arguments, transforming them on the way.\n    while test \"$#\" -gt 0; do\n      arg=$1\n      shift\n      func_quote_for_eval \"$arg\"\n      qarg=$func_quote_for_eval_unquoted_result\n      func_append libtool_args \" $func_quote_for_eval_result\"\n\n      # If the previous option needs an argument, assign it.\n      if test -n \"$prev\"; then\n\tcase $prev in\n\toutput)\n\t  func_append compile_command \" @OUTPUT@\"\n\t  func_append finalize_command \" @OUTPUT@\"\n\t  ;;\n\tesac\n\n\tcase $prev in\n\tbindir)\n\t  bindir=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\tdlfiles|dlprefiles)\n\t  $preload || {\n\t    # Add the symbol object into the linking commands.\n\t    func_append compile_command \" @SYMFILE@\"\n\t    func_append finalize_command \" @SYMFILE@\"\n\t    preload=:\n\t  }\n\t  case $arg in\n\t  *.la | *.lo) ;;  # We handle these cases below.\n\t  force)\n\t    if test no = \"$dlself\"; then\n\t      dlself=needless\n\t      export_dynamic=yes\n\t    fi\n\t    prev=\n\t    continue\n\t    ;;\n\t  self)\n\t    if test dlprefiles = \"$prev\"; then\n\t      dlself=yes\n\t    elif test dlfiles = \"$prev\" && test yes != \"$dlopen_self\"; then\n\t      dlself=yes\n\t    else\n\t      dlself=needless\n\t      export_dynamic=yes\n\t    fi\n\t    prev=\n\t    continue\n\t    ;;\n\t  *)\n\t    if test dlfiles = \"$prev\"; then\n\t      func_append dlfiles \" $arg\"\n\t    else\n\t      func_append dlprefiles \" $arg\"\n\t    fi\n\t    prev=\n\t    continue\n\t    ;;\n\t  esac\n\t  ;;\n\texpsyms)\n\t  export_symbols=$arg\n\t  test -f \"$arg\" \\\n\t    || func_fatal_error \"symbol file '$arg' does not exist\"\n\t  prev=\n\t  continue\n\t  ;;\n\texpsyms_regex)\n\t  export_symbols_regex=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\tframework)\n\t  case $host in\n\t    *-*-darwin*)\n\t      case \"$deplibs \" in\n\t\t*\" $qarg.ltframework \"*) ;;\n\t\t*) func_append deplibs \" $qarg.ltframework\" # this is fixed later\n\t\t   ;;\n\t      esac\n\t      ;;\n\t  esac\n\t  prev=\n\t  continue\n\t  ;;\n\tinst_prefix)\n\t  inst_prefix_dir=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\tmllvm)\n\t  # Clang does not use LLVM to link, so we can simply discard any\n\t  # '-mllvm $arg' options when doing the link step.\n\t  prev=\n\t  continue\n\t  ;;\n\tobjectlist)\n\t  if test -f \"$arg\"; then\n\t    save_arg=$arg\n\t    moreargs=\n\t    for fil in `cat \"$save_arg\"`\n\t    do\n#\t      func_append moreargs \" $fil\"\n\t      arg=$fil\n\t      # A libtool-controlled object.\n\n\t      # Check to see that this really is a libtool object.\n\t      if func_lalib_unsafe_p \"$arg\"; then\n\t\tpic_object=\n\t\tnon_pic_object=\n\n\t\t# Read the .lo file\n\t\tfunc_source \"$arg\"\n\n\t\tif test -z \"$pic_object\" ||\n\t\t   test -z \"$non_pic_object\" ||\n\t\t   test none = \"$pic_object\" &&\n\t\t   test none = \"$non_pic_object\"; then\n\t\t  func_fatal_error \"cannot find name of object for '$arg'\"\n\t\tfi\n\n\t\t# Extract subdirectory from the argument.\n\t\tfunc_dirname \"$arg\" \"/\" \"\"\n\t\txdir=$func_dirname_result\n\n\t\tif test none != \"$pic_object\"; then\n\t\t  # Prepend the subdirectory the object is found in.\n\t\t  pic_object=$xdir$pic_object\n\n\t\t  if test dlfiles = \"$prev\"; then\n\t\t    if test yes = \"$build_libtool_libs\" && test yes = \"$dlopen_support\"; then\n\t\t      func_append dlfiles \" $pic_object\"\n\t\t      prev=\n\t\t      continue\n\t\t    else\n\t\t      # If libtool objects are unsupported, then we need to preload.\n\t\t      prev=dlprefiles\n\t\t    fi\n\t\t  fi\n\n\t\t  # CHECK ME:  I think I busted this.  -Ossama\n\t\t  if test dlprefiles = \"$prev\"; then\n\t\t    # Preload the old-style object.\n\t\t    func_append dlprefiles \" $pic_object\"\n\t\t    prev=\n\t\t  fi\n\n\t\t  # A PIC object.\n\t\t  func_append libobjs \" $pic_object\"\n\t\t  arg=$pic_object\n\t\tfi\n\n\t\t# Non-PIC object.\n\t\tif test none != \"$non_pic_object\"; then\n\t\t  # Prepend the subdirectory the object is found in.\n\t\t  non_pic_object=$xdir$non_pic_object\n\n\t\t  # A standard non-PIC object\n\t\t  func_append non_pic_objects \" $non_pic_object\"\n\t\t  if test -z \"$pic_object\" || test none = \"$pic_object\"; then\n\t\t    arg=$non_pic_object\n\t\t  fi\n\t\telse\n\t\t  # If the PIC object exists, use it instead.\n\t\t  # $xdir was prepended to $pic_object above.\n\t\t  non_pic_object=$pic_object\n\t\t  func_append non_pic_objects \" $non_pic_object\"\n\t\tfi\n\t      else\n\t\t# Only an error if not doing a dry-run.\n\t\tif $opt_dry_run; then\n\t\t  # Extract subdirectory from the argument.\n\t\t  func_dirname \"$arg\" \"/\" \"\"\n\t\t  xdir=$func_dirname_result\n\n\t\t  func_lo2o \"$arg\"\n\t\t  pic_object=$xdir$objdir/$func_lo2o_result\n\t\t  non_pic_object=$xdir$func_lo2o_result\n\t\t  func_append libobjs \" $pic_object\"\n\t\t  func_append non_pic_objects \" $non_pic_object\"\n\t        else\n\t\t  func_fatal_error \"'$arg' is not a valid libtool object\"\n\t\tfi\n\t      fi\n\t    done\n\t  else\n\t    func_fatal_error \"link input file '$arg' does not exist\"\n\t  fi\n\t  arg=$save_arg\n\t  prev=\n\t  continue\n\t  ;;\n\tos2dllname)\n\t  os2dllname=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\tprecious_regex)\n\t  precious_files_regex=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\trelease)\n\t  release=-$arg\n\t  prev=\n\t  continue\n\t  ;;\n\trpath | xrpath)\n\t  # We need an absolute path.\n\t  case $arg in\n\t  [\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n\t  *)\n\t    func_fatal_error \"only absolute run-paths are allowed\"\n\t    ;;\n\t  esac\n\t  if test rpath = \"$prev\"; then\n\t    case \"$rpath \" in\n\t    *\" $arg \"*) ;;\n\t    *) func_append rpath \" $arg\" ;;\n\t    esac\n\t  else\n\t    case \"$xrpath \" in\n\t    *\" $arg \"*) ;;\n\t    *) func_append xrpath \" $arg\" ;;\n\t    esac\n\t  fi\n\t  prev=\n\t  continue\n\t  ;;\n\tshrext)\n\t  shrext_cmds=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\tweak)\n\t  func_append weak_libs \" $arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\txcclinker)\n\t  func_append linker_flags \" $qarg\"\n\t  func_append compiler_flags \" $qarg\"\n\t  prev=\n\t  func_append compile_command \" $qarg\"\n\t  func_append finalize_command \" $qarg\"\n\t  continue\n\t  ;;\n\txcompiler)\n\t  func_append compiler_flags \" $qarg\"\n\t  prev=\n\t  func_append compile_command \" $qarg\"\n\t  func_append finalize_command \" $qarg\"\n\t  continue\n\t  ;;\n\txlinker)\n\t  func_append linker_flags \" $qarg\"\n\t  func_append compiler_flags \" $wl$qarg\"\n\t  prev=\n\t  func_append compile_command \" $wl$qarg\"\n\t  func_append finalize_command \" $wl$qarg\"\n\t  continue\n\t  ;;\n\t*)\n\t  eval \"$prev=\\\"\\$arg\\\"\"\n\t  prev=\n\t  continue\n\t  ;;\n\tesac\n      fi # test -n \"$prev\"\n\n      prevarg=$arg\n\n      case $arg in\n      -all-static)\n\tif test -n \"$link_static_flag\"; then\n\t  # See comment for -static flag below, for more details.\n\t  func_append compile_command \" $link_static_flag\"\n\t  func_append finalize_command \" $link_static_flag\"\n\tfi\n\tcontinue\n\t;;\n\n      -allow-undefined)\n\t# FIXME: remove this flag sometime in the future.\n\tfunc_fatal_error \"'-allow-undefined' must not be used because it is the default\"\n\t;;\n\n      -avoid-version)\n\tavoid_version=yes\n\tcontinue\n\t;;\n\n      -bindir)\n\tprev=bindir\n\tcontinue\n\t;;\n\n      -dlopen)\n\tprev=dlfiles\n\tcontinue\n\t;;\n\n      -dlpreopen)\n\tprev=dlprefiles\n\tcontinue\n\t;;\n\n      -export-dynamic)\n\texport_dynamic=yes\n\tcontinue\n\t;;\n\n      -export-symbols | -export-symbols-regex)\n\tif test -n \"$export_symbols\" || test -n \"$export_symbols_regex\"; then\n\t  func_fatal_error \"more than one -exported-symbols argument is not allowed\"\n\tfi\n\tif test X-export-symbols = \"X$arg\"; then\n\t  prev=expsyms\n\telse\n\t  prev=expsyms_regex\n\tfi\n\tcontinue\n\t;;\n\n      -framework)\n\tprev=framework\n\tcontinue\n\t;;\n\n      -inst-prefix-dir)\n\tprev=inst_prefix\n\tcontinue\n\t;;\n\n      # The native IRIX linker understands -LANG:*, -LIST:* and -LNO:*\n      # so, if we see these flags be careful not to treat them like -L\n      -L[A-Z][A-Z]*:*)\n\tcase $with_gcc/$host in\n\tno/*-*-irix* | /*-*-irix*)\n\t  func_append compile_command \" $arg\"\n\t  func_append finalize_command \" $arg\"\n\t  ;;\n\tesac\n\tcontinue\n\t;;\n\n      -L*)\n\tfunc_stripname \"-L\" '' \"$arg\"\n\tif test -z \"$func_stripname_result\"; then\n\t  if test \"$#\" -gt 0; then\n\t    func_fatal_error \"require no space between '-L' and '$1'\"\n\t  else\n\t    func_fatal_error \"need path for '-L' option\"\n\t  fi\n\tfi\n\tfunc_resolve_sysroot \"$func_stripname_result\"\n\tdir=$func_resolve_sysroot_result\n\t# We need an absolute path.\n\tcase $dir in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n\t*)\n\t  absdir=`cd \"$dir\" && pwd`\n\t  test -z \"$absdir\" && \\\n\t    func_fatal_error \"cannot determine absolute directory name of '$dir'\"\n\t  dir=$absdir\n\t  ;;\n\tesac\n\tcase \"$deplibs \" in\n\t*\" -L$dir \"* | *\" $arg \"*)\n\t  # Will only happen for absolute or sysroot arguments\n\t  ;;\n\t*)\n\t  # Preserve sysroot, but never include relative directories\n\t  case $dir in\n\t    [\\\\/]* | [A-Za-z]:[\\\\/]* | =*) func_append deplibs \" $arg\" ;;\n\t    *) func_append deplibs \" -L$dir\" ;;\n\t  esac\n\t  func_append lib_search_path \" $dir\"\n\t  ;;\n\tesac\n\tcase $host in\n\t*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-cegcc*)\n\t  testbindir=`$ECHO \"$dir\" | $SED 's*/lib$*/bin*'`\n\t  case :$dllsearchpath: in\n\t  *\":$dir:\"*) ;;\n\t  ::) dllsearchpath=$dir;;\n\t  *) func_append dllsearchpath \":$dir\";;\n\t  esac\n\t  case :$dllsearchpath: in\n\t  *\":$testbindir:\"*) ;;\n\t  ::) dllsearchpath=$testbindir;;\n\t  *) func_append dllsearchpath \":$testbindir\";;\n\t  esac\n\t  ;;\n\tesac\n\tcontinue\n\t;;\n\n      -l*)\n\tif test X-lc = \"X$arg\" || test X-lm = \"X$arg\"; then\n\t  case $host in\n\t  *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-beos* | *-cegcc* | *-*-haiku*)\n\t    # These systems don't actually have a C or math library (as such)\n\t    continue\n\t    ;;\n\t  *-*-os2*)\n\t    # These systems don't actually have a C library (as such)\n\t    test X-lc = \"X$arg\" && continue\n\t    ;;\n\t  *-*-openbsd* | *-*-freebsd* | *-*-dragonfly* | *-*-bitrig*)\n\t    # Do not include libc due to us having libc/libc_r.\n\t    test X-lc = \"X$arg\" && continue\n\t    ;;\n\t  *-*-rhapsody* | *-*-darwin1.[012])\n\t    # Rhapsody C and math libraries are in the System framework\n\t    func_append deplibs \" System.ltframework\"\n\t    continue\n\t    ;;\n\t  *-*-sco3.2v5* | *-*-sco5v6*)\n\t    # Causes problems with __ctype\n\t    test X-lc = \"X$arg\" && continue\n\t    ;;\n\t  *-*-sysv4.2uw2* | *-*-sysv5* | *-*-unixware* | *-*-OpenUNIX*)\n\t    # Compiler inserts libc in the correct place for threads to work\n\t    test X-lc = \"X$arg\" && continue\n\t    ;;\n\t  esac\n\telif test X-lc_r = \"X$arg\"; then\n\t case $host in\n\t *-*-openbsd* | *-*-freebsd* | *-*-dragonfly* | *-*-bitrig*)\n\t   # Do not include libc_r directly, use -pthread flag.\n\t   continue\n\t   ;;\n\t esac\n\tfi\n\tfunc_append deplibs \" $arg\"\n\tcontinue\n\t;;\n\n      -mllvm)\n\tprev=mllvm\n\tcontinue\n\t;;\n\n      -module)\n\tmodule=yes\n\tcontinue\n\t;;\n\n      # Tru64 UNIX uses -model [arg] to determine the layout of C++\n      # classes, name mangling, and exception handling.\n      # Darwin uses the -arch flag to determine output architecture.\n      -model|-arch|-isysroot|--sysroot)\n\tfunc_append compiler_flags \" $arg\"\n\tfunc_append compile_command \" $arg\"\n\tfunc_append finalize_command \" $arg\"\n\tprev=xcompiler\n\tcontinue\n\t;;\n\n      -mt|-mthreads|-kthread|-Kthread|-pthread|-pthreads|--thread-safe \\\n      |-threads|-fopenmp|-openmp|-mp|-xopenmp|-omp|-qsmp=*)\n\tfunc_append compiler_flags \" $arg\"\n\tfunc_append compile_command \" $arg\"\n\tfunc_append finalize_command \" $arg\"\n\tcase \"$new_inherited_linker_flags \" in\n\t    *\" $arg \"*) ;;\n\t    * ) func_append new_inherited_linker_flags \" $arg\" ;;\n\tesac\n\tcontinue\n\t;;\n\n      -multi_module)\n\tsingle_module=$wl-multi_module\n\tcontinue\n\t;;\n\n      -no-fast-install)\n\tfast_install=no\n\tcontinue\n\t;;\n\n      -no-install)\n\tcase $host in\n\t*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-*-darwin* | *-cegcc*)\n\t  # The PATH hackery in wrapper scripts is required on Windows\n\t  # and Darwin in order for the loader to find any dlls it needs.\n\t  func_warning \"'-no-install' is ignored for $host\"\n\t  func_warning \"assuming '-no-fast-install' instead\"\n\t  fast_install=no\n\t  ;;\n\t*) no_install=yes ;;\n\tesac\n\tcontinue\n\t;;\n\n      -no-undefined)\n\tallow_undefined=no\n\tcontinue\n\t;;\n\n      -objectlist)\n\tprev=objectlist\n\tcontinue\n\t;;\n\n      -os2dllname)\n\tprev=os2dllname\n\tcontinue\n\t;;\n\n      -o) prev=output ;;\n\n      -precious-files-regex)\n\tprev=precious_regex\n\tcontinue\n\t;;\n\n      -release)\n\tprev=release\n\tcontinue\n\t;;\n\n      -rpath)\n\tprev=rpath\n\tcontinue\n\t;;\n\n      -R)\n\tprev=xrpath\n\tcontinue\n\t;;\n\n      -R*)\n\tfunc_stripname '-R' '' \"$arg\"\n\tdir=$func_stripname_result\n\t# We need an absolute path.\n\tcase $dir in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n\t=*)\n\t  func_stripname '=' '' \"$dir\"\n\t  dir=$lt_sysroot$func_stripname_result\n\t  ;;\n\t*)\n\t  func_fatal_error \"only absolute run-paths are allowed\"\n\t  ;;\n\tesac\n\tcase \"$xrpath \" in\n\t*\" $dir \"*) ;;\n\t*) func_append xrpath \" $dir\" ;;\n\tesac\n\tcontinue\n\t;;\n\n      -shared)\n\t# The effects of -shared are defined in a previous loop.\n\tcontinue\n\t;;\n\n      -shrext)\n\tprev=shrext\n\tcontinue\n\t;;\n\n      -static | -static-libtool-libs)\n\t# The effects of -static are defined in a previous loop.\n\t# We used to do the same as -all-static on platforms that\n\t# didn't have a PIC flag, but the assumption that the effects\n\t# would be equivalent was wrong.  It would break on at least\n\t# Digital Unix and AIX.\n\tcontinue\n\t;;\n\n      -thread-safe)\n\tthread_safe=yes\n\tcontinue\n\t;;\n\n      -version-info)\n\tprev=vinfo\n\tcontinue\n\t;;\n\n      -version-number)\n\tprev=vinfo\n\tvinfo_number=yes\n\tcontinue\n\t;;\n\n      -weak)\n        prev=weak\n\tcontinue\n\t;;\n\n      -Wc,*)\n\tfunc_stripname '-Wc,' '' \"$arg\"\n\targs=$func_stripname_result\n\targ=\n\tsave_ifs=$IFS; IFS=,\n\tfor flag in $args; do\n\t  IFS=$save_ifs\n          func_quote_for_eval \"$flag\"\n\t  func_append arg \" $func_quote_for_eval_result\"\n\t  func_append compiler_flags \" $func_quote_for_eval_result\"\n\tdone\n\tIFS=$save_ifs\n\tfunc_stripname ' ' '' \"$arg\"\n\targ=$func_stripname_result\n\t;;\n\n      -Wl,*)\n\tfunc_stripname '-Wl,' '' \"$arg\"\n\targs=$func_stripname_result\n\targ=\n\tsave_ifs=$IFS; IFS=,\n\tfor flag in $args; do\n\t  IFS=$save_ifs\n          func_quote_for_eval \"$flag\"\n\t  func_append arg \" $wl$func_quote_for_eval_result\"\n\t  func_append compiler_flags \" $wl$func_quote_for_eval_result\"\n\t  func_append linker_flags \" $func_quote_for_eval_result\"\n\tdone\n\tIFS=$save_ifs\n\tfunc_stripname ' ' '' \"$arg\"\n\targ=$func_stripname_result\n\t;;\n\n      -Xcompiler)\n\tprev=xcompiler\n\tcontinue\n\t;;\n\n      -Xlinker)\n\tprev=xlinker\n\tcontinue\n\t;;\n\n      -XCClinker)\n\tprev=xcclinker\n\tcontinue\n\t;;\n\n      # -msg_* for osf cc\n      -msg_*)\n\tfunc_quote_for_eval \"$arg\"\n\targ=$func_quote_for_eval_result\n\t;;\n\n      # Flags to be passed through unchanged, with rationale:\n      # -64, -mips[0-9]      enable 64-bit mode for the SGI compiler\n      # -r[0-9][0-9]*        specify processor for the SGI compiler\n      # -xarch=*, -xtarget=* enable 64-bit mode for the Sun compiler\n      # +DA*, +DD*           enable 64-bit mode for the HP compiler\n      # -q*                  compiler args for the IBM compiler\n      # -m*, -t[45]*, -txscale* architecture-specific flags for GCC\n      # -F/path              path to uninstalled frameworks, gcc on darwin\n      # -p, -pg, --coverage, -fprofile-*  profiling flags for GCC\n      # -fstack-protector*   stack protector flags for GCC\n      # @file                GCC response files\n      # -tp=*                Portland pgcc target processor selection\n      # --sysroot=*          for sysroot support\n      # -O*, -g*, -flto*, -fwhopr*, -fuse-linker-plugin GCC link-time optimization\n      # -stdlib=*            select c++ std lib with clang\n      -64|-mips[0-9]|-r[0-9][0-9]*|-xarch=*|-xtarget=*|+DA*|+DD*|-q*|-m*| \\\n      -t[45]*|-txscale*|-p|-pg|--coverage|-fprofile-*|-F*|@*|-tp=*|--sysroot=*| \\\n      -O*|-g*|-flto*|-fwhopr*|-fuse-linker-plugin|-fstack-protector*|-stdlib=*)\n        func_quote_for_eval \"$arg\"\n\targ=$func_quote_for_eval_result\n        func_append compile_command \" $arg\"\n        func_append finalize_command \" $arg\"\n        func_append compiler_flags \" $arg\"\n        continue\n        ;;\n\n      -Z*)\n        if test os2 = \"`expr $host : '.*\\(os2\\)'`\"; then\n          # OS/2 uses -Zxxx to specify OS/2-specific options\n\t  compiler_flags=\"$compiler_flags $arg\"\n\t  func_append compile_command \" $arg\"\n\t  func_append finalize_command \" $arg\"\n\t  case $arg in\n\t  -Zlinker | -Zstack)\n\t    prev=xcompiler\n\t    ;;\n\t  esac\n\t  continue\n        else\n\t  # Otherwise treat like 'Some other compiler flag' below\n\t  func_quote_for_eval \"$arg\"\n\t  arg=$func_quote_for_eval_result\n        fi\n\t;;\n\n      # Some other compiler flag.\n      -* | +*)\n        func_quote_for_eval \"$arg\"\n\targ=$func_quote_for_eval_result\n\t;;\n\n      *.$objext)\n\t# A standard object.\n\tfunc_append objs \" $arg\"\n\t;;\n\n      *.lo)\n\t# A libtool-controlled object.\n\n\t# Check to see that this really is a libtool object.\n\tif func_lalib_unsafe_p \"$arg\"; then\n\t  pic_object=\n\t  non_pic_object=\n\n\t  # Read the .lo file\n\t  func_source \"$arg\"\n\n\t  if test -z \"$pic_object\" ||\n\t     test -z \"$non_pic_object\" ||\n\t     test none = \"$pic_object\" &&\n\t     test none = \"$non_pic_object\"; then\n\t    func_fatal_error \"cannot find name of object for '$arg'\"\n\t  fi\n\n\t  # Extract subdirectory from the argument.\n\t  func_dirname \"$arg\" \"/\" \"\"\n\t  xdir=$func_dirname_result\n\n\t  test none = \"$pic_object\" || {\n\t    # Prepend the subdirectory the object is found in.\n\t    pic_object=$xdir$pic_object\n\n\t    if test dlfiles = \"$prev\"; then\n\t      if test yes = \"$build_libtool_libs\" && test yes = \"$dlopen_support\"; then\n\t\tfunc_append dlfiles \" $pic_object\"\n\t\tprev=\n\t\tcontinue\n\t      else\n\t\t# If libtool objects are unsupported, then we need to preload.\n\t\tprev=dlprefiles\n\t      fi\n\t    fi\n\n\t    # CHECK ME:  I think I busted this.  -Ossama\n\t    if test dlprefiles = \"$prev\"; then\n\t      # Preload the old-style object.\n\t      func_append dlprefiles \" $pic_object\"\n\t      prev=\n\t    fi\n\n\t    # A PIC object.\n\t    func_append libobjs \" $pic_object\"\n\t    arg=$pic_object\n\t  }\n\n\t  # Non-PIC object.\n\t  if test none != \"$non_pic_object\"; then\n\t    # Prepend the subdirectory the object is found in.\n\t    non_pic_object=$xdir$non_pic_object\n\n\t    # A standard non-PIC object\n\t    func_append non_pic_objects \" $non_pic_object\"\n\t    if test -z \"$pic_object\" || test none = \"$pic_object\"; then\n\t      arg=$non_pic_object\n\t    fi\n\t  else\n\t    # If the PIC object exists, use it instead.\n\t    # $xdir was prepended to $pic_object above.\n\t    non_pic_object=$pic_object\n\t    func_append non_pic_objects \" $non_pic_object\"\n\t  fi\n\telse\n\t  # Only an error if not doing a dry-run.\n\t  if $opt_dry_run; then\n\t    # Extract subdirectory from the argument.\n\t    func_dirname \"$arg\" \"/\" \"\"\n\t    xdir=$func_dirname_result\n\n\t    func_lo2o \"$arg\"\n\t    pic_object=$xdir$objdir/$func_lo2o_result\n\t    non_pic_object=$xdir$func_lo2o_result\n\t    func_append libobjs \" $pic_object\"\n\t    func_append non_pic_objects \" $non_pic_object\"\n\t  else\n\t    func_fatal_error \"'$arg' is not a valid libtool object\"\n\t  fi\n\tfi\n\t;;\n\n      *.$libext)\n\t# An archive.\n\tfunc_append deplibs \" $arg\"\n\tfunc_append old_deplibs \" $arg\"\n\tcontinue\n\t;;\n\n      *.la)\n\t# A libtool-controlled library.\n\n\tfunc_resolve_sysroot \"$arg\"\n\tif test dlfiles = \"$prev\"; then\n\t  # This library was specified with -dlopen.\n\t  func_append dlfiles \" $func_resolve_sysroot_result\"\n\t  prev=\n\telif test dlprefiles = \"$prev\"; then\n\t  # The library was specified with -dlpreopen.\n\t  func_append dlprefiles \" $func_resolve_sysroot_result\"\n\t  prev=\n\telse\n\t  func_append deplibs \" $func_resolve_sysroot_result\"\n\tfi\n\tcontinue\n\t;;\n\n      # Some other compiler argument.\n      *)\n\t# Unknown arguments in both finalize_command and compile_command need\n\t# to be aesthetically quoted because they are evaled later.\n\tfunc_quote_for_eval \"$arg\"\n\targ=$func_quote_for_eval_result\n\t;;\n      esac # arg\n\n      # Now actually substitute the argument into the commands.\n      if test -n \"$arg\"; then\n\tfunc_append compile_command \" $arg\"\n\tfunc_append finalize_command \" $arg\"\n      fi\n    done # argument parsing loop\n\n    test -n \"$prev\" && \\\n      func_fatal_help \"the '$prevarg' option requires an argument\"\n\n    if test yes = \"$export_dynamic\" && test -n \"$export_dynamic_flag_spec\"; then\n      eval arg=\\\"$export_dynamic_flag_spec\\\"\n      func_append compile_command \" $arg\"\n      func_append finalize_command \" $arg\"\n    fi\n\n    oldlibs=\n    # calculate the name of the file, without its directory\n    func_basename \"$output\"\n    outputname=$func_basename_result\n    libobjs_save=$libobjs\n\n    if test -n \"$shlibpath_var\"; then\n      # get the directories listed in $shlibpath_var\n      eval shlib_search_path=\\`\\$ECHO \\\"\\$$shlibpath_var\\\" \\| \\$SED \\'s/:/ /g\\'\\`\n    else\n      shlib_search_path=\n    fi\n    eval sys_lib_search_path=\\\"$sys_lib_search_path_spec\\\"\n    eval sys_lib_dlsearch_path=\\\"$sys_lib_dlsearch_path_spec\\\"\n\n    # Definition is injected by LT_CONFIG during libtool generation.\n    func_munge_path_list sys_lib_dlsearch_path \"$LT_SYS_LIBRARY_PATH\"\n\n    func_dirname \"$output\" \"/\" \"\"\n    output_objdir=$func_dirname_result$objdir\n    func_to_tool_file \"$output_objdir/\"\n    tool_output_objdir=$func_to_tool_file_result\n    # Create the object directory.\n    func_mkdir_p \"$output_objdir\"\n\n    # Determine the type of output\n    case $output in\n    \"\")\n      func_fatal_help \"you must specify an output file\"\n      ;;\n    *.$libext) linkmode=oldlib ;;\n    *.lo | *.$objext) linkmode=obj ;;\n    *.la) linkmode=lib ;;\n    *) linkmode=prog ;; # Anything else should be a program.\n    esac\n\n    specialdeplibs=\n\n    libs=\n    # Find all interdependent deplibs by searching for libraries\n    # that are linked more than once (e.g. -la -lb -la)\n    for deplib in $deplibs; do\n      if $opt_preserve_dup_deps; then\n\tcase \"$libs \" in\n\t*\" $deplib \"*) func_append specialdeplibs \" $deplib\" ;;\n\tesac\n      fi\n      func_append libs \" $deplib\"\n    done\n\n    if test lib = \"$linkmode\"; then\n      libs=\"$predeps $libs $compiler_lib_search_path $postdeps\"\n\n      # Compute libraries that are listed more than once in $predeps\n      # $postdeps and mark them as special (i.e., whose duplicates are\n      # not to be eliminated).\n      pre_post_deps=\n      if $opt_duplicate_compiler_generated_deps; then\n\tfor pre_post_dep in $predeps $postdeps; do\n\t  case \"$pre_post_deps \" in\n\t  *\" $pre_post_dep \"*) func_append specialdeplibs \" $pre_post_deps\" ;;\n\t  esac\n\t  func_append pre_post_deps \" $pre_post_dep\"\n\tdone\n      fi\n      pre_post_deps=\n    fi\n\n    deplibs=\n    newdependency_libs=\n    newlib_search_path=\n    need_relink=no # whether we're linking any uninstalled libtool libraries\n    notinst_deplibs= # not-installed libtool libraries\n    notinst_path= # paths that contain not-installed libtool libraries\n\n    case $linkmode in\n    lib)\n\tpasses=\"conv dlpreopen link\"\n\tfor file in $dlfiles $dlprefiles; do\n\t  case $file in\n\t  *.la) ;;\n\t  *)\n\t    func_fatal_help \"libraries can '-dlopen' only libtool libraries: $file\"\n\t    ;;\n\t  esac\n\tdone\n\t;;\n    prog)\n\tcompile_deplibs=\n\tfinalize_deplibs=\n\talldeplibs=false\n\tnewdlfiles=\n\tnewdlprefiles=\n\tpasses=\"conv scan dlopen dlpreopen link\"\n\t;;\n    *)  passes=\"conv\"\n\t;;\n    esac\n\n    for pass in $passes; do\n      # The preopen pass in lib mode reverses $deplibs; put it back here\n      # so that -L comes before libs that need it for instance...\n      if test lib,link = \"$linkmode,$pass\"; then\n\t## FIXME: Find the place where the list is rebuilt in the wrong\n\t##        order, and fix it there properly\n        tmp_deplibs=\n\tfor deplib in $deplibs; do\n\t  tmp_deplibs=\"$deplib $tmp_deplibs\"\n\tdone\n\tdeplibs=$tmp_deplibs\n      fi\n\n      if test lib,link = \"$linkmode,$pass\" ||\n\t test prog,scan = \"$linkmode,$pass\"; then\n\tlibs=$deplibs\n\tdeplibs=\n      fi\n      if test prog = \"$linkmode\"; then\n\tcase $pass in\n\tdlopen) libs=$dlfiles ;;\n\tdlpreopen) libs=$dlprefiles ;;\n\tlink) libs=\"$deplibs %DEPLIBS% $dependency_libs\" ;;\n\tesac\n      fi\n      if test lib,dlpreopen = \"$linkmode,$pass\"; then\n\t# Collect and forward deplibs of preopened libtool libs\n\tfor lib in $dlprefiles; do\n\t  # Ignore non-libtool-libs\n\t  dependency_libs=\n\t  func_resolve_sysroot \"$lib\"\n\t  case $lib in\n\t  *.la)\tfunc_source \"$func_resolve_sysroot_result\" ;;\n\t  esac\n\n\t  # Collect preopened libtool deplibs, except any this library\n\t  # has declared as weak libs\n\t  for deplib in $dependency_libs; do\n\t    func_basename \"$deplib\"\n            deplib_base=$func_basename_result\n\t    case \" $weak_libs \" in\n\t    *\" $deplib_base \"*) ;;\n\t    *) func_append deplibs \" $deplib\" ;;\n\t    esac\n\t  done\n\tdone\n\tlibs=$dlprefiles\n      fi\n      if test dlopen = \"$pass\"; then\n\t# Collect dlpreopened libraries\n\tsave_deplibs=$deplibs\n\tdeplibs=\n      fi\n\n      for deplib in $libs; do\n\tlib=\n\tfound=false\n\tcase $deplib in\n\t-mt|-mthreads|-kthread|-Kthread|-pthread|-pthreads|--thread-safe \\\n        |-threads|-fopenmp|-openmp|-mp|-xopenmp|-omp|-qsmp=*)\n\t  if test prog,link = \"$linkmode,$pass\"; then\n\t    compile_deplibs=\"$deplib $compile_deplibs\"\n\t    finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t  else\n\t    func_append compiler_flags \" $deplib\"\n\t    if test lib = \"$linkmode\"; then\n\t\tcase \"$new_inherited_linker_flags \" in\n\t\t    *\" $deplib \"*) ;;\n\t\t    * ) func_append new_inherited_linker_flags \" $deplib\" ;;\n\t\tesac\n\t    fi\n\t  fi\n\t  continue\n\t  ;;\n\t-l*)\n\t  if test lib != \"$linkmode\" && test prog != \"$linkmode\"; then\n\t    func_warning \"'-l' is ignored for archives/objects\"\n\t    continue\n\t  fi\n\t  func_stripname '-l' '' \"$deplib\"\n\t  name=$func_stripname_result\n\t  if test lib = \"$linkmode\"; then\n\t    searchdirs=\"$newlib_search_path $lib_search_path $compiler_lib_search_dirs $sys_lib_search_path $shlib_search_path\"\n\t  else\n\t    searchdirs=\"$newlib_search_path $lib_search_path $sys_lib_search_path $shlib_search_path\"\n\t  fi\n\t  for searchdir in $searchdirs; do\n\t    for search_ext in .la $std_shrext .so .a; do\n\t      # Search the libtool library\n\t      lib=$searchdir/lib$name$search_ext\n\t      if test -f \"$lib\"; then\n\t\tif test .la = \"$search_ext\"; then\n\t\t  found=:\n\t\telse\n\t\t  found=false\n\t\tfi\n\t\tbreak 2\n\t      fi\n\t    done\n\t  done\n\t  if $found; then\n\t    # deplib is a libtool library\n\t    # If $allow_libtool_libs_with_static_runtimes && $deplib is a stdlib,\n\t    # We need to do some special things here, and not later.\n\t    if test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t      case \" $predeps $postdeps \" in\n\t      *\" $deplib \"*)\n\t\tif func_lalib_p \"$lib\"; then\n\t\t  library_names=\n\t\t  old_library=\n\t\t  func_source \"$lib\"\n\t\t  for l in $old_library $library_names; do\n\t\t    ll=$l\n\t\t  done\n\t\t  if test \"X$ll\" = \"X$old_library\"; then # only static version available\n\t\t    found=false\n\t\t    func_dirname \"$lib\" \"\" \".\"\n\t\t    ladir=$func_dirname_result\n\t\t    lib=$ladir/$old_library\n\t\t    if test prog,link = \"$linkmode,$pass\"; then\n\t\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t\t    else\n\t\t      deplibs=\"$deplib $deplibs\"\n\t\t      test lib = \"$linkmode\" && newdependency_libs=\"$deplib $newdependency_libs\"\n\t\t    fi\n\t\t    continue\n\t\t  fi\n\t\tfi\n\t\t;;\n\t      *) ;;\n\t      esac\n\t    fi\n\t  else\n\t    # deplib doesn't seem to be a libtool library\n\t    if test prog,link = \"$linkmode,$pass\"; then\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    else\n\t      deplibs=\"$deplib $deplibs\"\n\t      test lib = \"$linkmode\" && newdependency_libs=\"$deplib $newdependency_libs\"\n\t    fi\n\t    continue\n\t  fi\n\t  ;; # -l\n\t*.ltframework)\n\t  if test prog,link = \"$linkmode,$pass\"; then\n\t    compile_deplibs=\"$deplib $compile_deplibs\"\n\t    finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t  else\n\t    deplibs=\"$deplib $deplibs\"\n\t    if test lib = \"$linkmode\"; then\n\t\tcase \"$new_inherited_linker_flags \" in\n\t\t    *\" $deplib \"*) ;;\n\t\t    * ) func_append new_inherited_linker_flags \" $deplib\" ;;\n\t\tesac\n\t    fi\n\t  fi\n\t  continue\n\t  ;;\n\t-L*)\n\t  case $linkmode in\n\t  lib)\n\t    deplibs=\"$deplib $deplibs\"\n\t    test conv = \"$pass\" && continue\n\t    newdependency_libs=\"$deplib $newdependency_libs\"\n\t    func_stripname '-L' '' \"$deplib\"\n\t    func_resolve_sysroot \"$func_stripname_result\"\n\t    func_append newlib_search_path \" $func_resolve_sysroot_result\"\n\t    ;;\n\t  prog)\n\t    if test conv = \"$pass\"; then\n\t      deplibs=\"$deplib $deplibs\"\n\t      continue\n\t    fi\n\t    if test scan = \"$pass\"; then\n\t      deplibs=\"$deplib $deplibs\"\n\t    else\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    fi\n\t    func_stripname '-L' '' \"$deplib\"\n\t    func_resolve_sysroot \"$func_stripname_result\"\n\t    func_append newlib_search_path \" $func_resolve_sysroot_result\"\n\t    ;;\n\t  *)\n\t    func_warning \"'-L' is ignored for archives/objects\"\n\t    ;;\n\t  esac # linkmode\n\t  continue\n\t  ;; # -L\n\t-R*)\n\t  if test link = \"$pass\"; then\n\t    func_stripname '-R' '' \"$deplib\"\n\t    func_resolve_sysroot \"$func_stripname_result\"\n\t    dir=$func_resolve_sysroot_result\n\t    # Make sure the xrpath contains only unique directories.\n\t    case \"$xrpath \" in\n\t    *\" $dir \"*) ;;\n\t    *) func_append xrpath \" $dir\" ;;\n\t    esac\n\t  fi\n\t  deplibs=\"$deplib $deplibs\"\n\t  continue\n\t  ;;\n\t*.la)\n\t  func_resolve_sysroot \"$deplib\"\n\t  lib=$func_resolve_sysroot_result\n\t  ;;\n\t*.$libext)\n\t  if test conv = \"$pass\"; then\n\t    deplibs=\"$deplib $deplibs\"\n\t    continue\n\t  fi\n\t  case $linkmode in\n\t  lib)\n\t    # Linking convenience modules into shared libraries is allowed,\n\t    # but linking other static libraries is non-portable.\n\t    case \" $dlpreconveniencelibs \" in\n\t    *\" $deplib \"*) ;;\n\t    *)\n\t      valid_a_lib=false\n\t      case $deplibs_check_method in\n\t\tmatch_pattern*)\n\t\t  set dummy $deplibs_check_method; shift\n\t\t  match_pattern_regex=`expr \"$deplibs_check_method\" : \"$1 \\(.*\\)\"`\n\t\t  if eval \"\\$ECHO \\\"$deplib\\\"\" 2>/dev/null | $SED 10q \\\n\t\t    | $EGREP \"$match_pattern_regex\" > /dev/null; then\n\t\t    valid_a_lib=:\n\t\t  fi\n\t\t;;\n\t\tpass_all)\n\t\t  valid_a_lib=:\n\t\t;;\n\t      esac\n\t      if $valid_a_lib; then\n\t\techo\n\t\t$ECHO \"*** Warning: Linking the shared library $output against the\"\n\t\t$ECHO \"*** static library $deplib is not portable!\"\n\t\tdeplibs=\"$deplib $deplibs\"\n\t      else\n\t\techo\n\t\t$ECHO \"*** Warning: Trying to link with static lib archive $deplib.\"\n\t\techo \"*** I have the capability to make that library automatically link in when\"\n\t\techo \"*** you link to this library.  But I can only do this if you have a\"\n\t\techo \"*** shared version of the library, which you do not appear to have\"\n\t\techo \"*** because the file extensions .$libext of this argument makes me believe\"\n\t\techo \"*** that it is just a static archive that I should not use here.\"\n\t      fi\n\t      ;;\n\t    esac\n\t    continue\n\t    ;;\n\t  prog)\n\t    if test link != \"$pass\"; then\n\t      deplibs=\"$deplib $deplibs\"\n\t    else\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    fi\n\t    continue\n\t    ;;\n\t  esac # linkmode\n\t  ;; # *.$libext\n\t*.lo | *.$objext)\n\t  if test conv = \"$pass\"; then\n\t    deplibs=\"$deplib $deplibs\"\n\t  elif test prog = \"$linkmode\"; then\n\t    if test dlpreopen = \"$pass\" || test yes != \"$dlopen_support\" || test no = \"$build_libtool_libs\"; then\n\t      # If there is no dlopen support or we're linking statically,\n\t      # we need to preload.\n\t      func_append newdlprefiles \" $deplib\"\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    else\n\t      func_append newdlfiles \" $deplib\"\n\t    fi\n\t  fi\n\t  continue\n\t  ;;\n\t%DEPLIBS%)\n\t  alldeplibs=:\n\t  continue\n\t  ;;\n\tesac # case $deplib\n\n\t$found || test -f \"$lib\" \\\n\t  || func_fatal_error \"cannot find the library '$lib' or unhandled argument '$deplib'\"\n\n\t# Check to see that this really is a libtool archive.\n\tfunc_lalib_unsafe_p \"$lib\" \\\n\t  || func_fatal_error \"'$lib' is not a valid libtool archive\"\n\n\tfunc_dirname \"$lib\" \"\" \".\"\n\tladir=$func_dirname_result\n\n\tdlname=\n\tdlopen=\n\tdlpreopen=\n\tlibdir=\n\tlibrary_names=\n\told_library=\n\tinherited_linker_flags=\n\t# If the library was installed with an old release of libtool,\n\t# it will not redefine variables installed, or shouldnotlink\n\tinstalled=yes\n\tshouldnotlink=no\n\tavoidtemprpath=\n\n\n\t# Read the .la file\n\tfunc_source \"$lib\"\n\n\t# Convert \"-framework foo\" to \"foo.ltframework\"\n\tif test -n \"$inherited_linker_flags\"; then\n\t  tmp_inherited_linker_flags=`$ECHO \"$inherited_linker_flags\" | $SED 's/-framework \\([^ $]*\\)/\\1.ltframework/g'`\n\t  for tmp_inherited_linker_flag in $tmp_inherited_linker_flags; do\n\t    case \" $new_inherited_linker_flags \" in\n\t      *\" $tmp_inherited_linker_flag \"*) ;;\n\t      *) func_append new_inherited_linker_flags \" $tmp_inherited_linker_flag\";;\n\t    esac\n\t  done\n\tfi\n\tdependency_libs=`$ECHO \" $dependency_libs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\tif test lib,link = \"$linkmode,$pass\" ||\n\t   test prog,scan = \"$linkmode,$pass\" ||\n\t   { test prog != \"$linkmode\" && test lib != \"$linkmode\"; }; then\n\t  test -n \"$dlopen\" && func_append dlfiles \" $dlopen\"\n\t  test -n \"$dlpreopen\" && func_append dlprefiles \" $dlpreopen\"\n\tfi\n\n\tif test conv = \"$pass\"; then\n\t  # Only check for convenience libraries\n\t  deplibs=\"$lib $deplibs\"\n\t  if test -z \"$libdir\"; then\n\t    if test -z \"$old_library\"; then\n\t      func_fatal_error \"cannot find name of link library for '$lib'\"\n\t    fi\n\t    # It is a libtool convenience library, so add in its objects.\n\t    func_append convenience \" $ladir/$objdir/$old_library\"\n\t    func_append old_convenience \" $ladir/$objdir/$old_library\"\n\t  elif test prog != \"$linkmode\" && test lib != \"$linkmode\"; then\n\t    func_fatal_error \"'$lib' is not a convenience library\"\n\t  fi\n\t  tmp_libs=\n\t  for deplib in $dependency_libs; do\n\t    deplibs=\"$deplib $deplibs\"\n\t    if $opt_preserve_dup_deps; then\n\t      case \"$tmp_libs \" in\n\t      *\" $deplib \"*) func_append specialdeplibs \" $deplib\" ;;\n\t      esac\n\t    fi\n\t    func_append tmp_libs \" $deplib\"\n\t  done\n\t  continue\n\tfi # $pass = conv\n\n\n\t# Get the name of the library we link against.\n\tlinklib=\n\tif test -n \"$old_library\" &&\n\t   { test yes = \"$prefer_static_libs\" ||\n\t     test built,no = \"$prefer_static_libs,$installed\"; }; then\n\t  linklib=$old_library\n\telse\n\t  for l in $old_library $library_names; do\n\t    linklib=$l\n\t  done\n\tfi\n\tif test -z \"$linklib\"; then\n\t  func_fatal_error \"cannot find name of link library for '$lib'\"\n\tfi\n\n\t# This library was specified with -dlopen.\n\tif test dlopen = \"$pass\"; then\n\t  test -z \"$libdir\" \\\n\t    && func_fatal_error \"cannot -dlopen a convenience library: '$lib'\"\n\t  if test -z \"$dlname\" ||\n\t     test yes != \"$dlopen_support\" ||\n\t     test no = \"$build_libtool_libs\"\n\t  then\n\t    # If there is no dlname, no dlopen support or we're linking\n\t    # statically, we need to preload.  We also need to preload any\n\t    # dependent libraries so libltdl's deplib preloader doesn't\n\t    # bomb out in the load deplibs phase.\n\t    func_append dlprefiles \" $lib $dependency_libs\"\n\t  else\n\t    func_append newdlfiles \" $lib\"\n\t  fi\n\t  continue\n\tfi # $pass = dlopen\n\n\t# We need an absolute path.\n\tcase $ladir in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) abs_ladir=$ladir ;;\n\t*)\n\t  abs_ladir=`cd \"$ladir\" && pwd`\n\t  if test -z \"$abs_ladir\"; then\n\t    func_warning \"cannot determine absolute directory name of '$ladir'\"\n\t    func_warning \"passing it literally to the linker, although it might fail\"\n\t    abs_ladir=$ladir\n\t  fi\n\t  ;;\n\tesac\n\tfunc_basename \"$lib\"\n\tlaname=$func_basename_result\n\n\t# Find the relevant object directory and library name.\n\tif test yes = \"$installed\"; then\n\t  if test ! -f \"$lt_sysroot$libdir/$linklib\" && test -f \"$abs_ladir/$linklib\"; then\n\t    func_warning \"library '$lib' was moved.\"\n\t    dir=$ladir\n\t    absdir=$abs_ladir\n\t    libdir=$abs_ladir\n\t  else\n\t    dir=$lt_sysroot$libdir\n\t    absdir=$lt_sysroot$libdir\n\t  fi\n\t  test yes = \"$hardcode_automatic\" && avoidtemprpath=yes\n\telse\n\t  if test ! -f \"$ladir/$objdir/$linklib\" && test -f \"$abs_ladir/$linklib\"; then\n\t    dir=$ladir\n\t    absdir=$abs_ladir\n\t    # Remove this search path later\n\t    func_append notinst_path \" $abs_ladir\"\n\t  else\n\t    dir=$ladir/$objdir\n\t    absdir=$abs_ladir/$objdir\n\t    # Remove this search path later\n\t    func_append notinst_path \" $abs_ladir\"\n\t  fi\n\tfi # $installed = yes\n\tfunc_stripname 'lib' '.la' \"$laname\"\n\tname=$func_stripname_result\n\n\t# This library was specified with -dlpreopen.\n\tif test dlpreopen = \"$pass\"; then\n\t  if test -z \"$libdir\" && test prog = \"$linkmode\"; then\n\t    func_fatal_error \"only libraries may -dlpreopen a convenience library: '$lib'\"\n\t  fi\n\t  case $host in\n\t    # special handling for platforms with PE-DLLs.\n\t    *cygwin* | *mingw* | *cegcc* )\n\t      # Linker will automatically link against shared library if both\n\t      # static and shared are present.  Therefore, ensure we extract\n\t      # symbols from the import library if a shared library is present\n\t      # (otherwise, the dlopen module name will be incorrect).  We do\n\t      # this by putting the import library name into $newdlprefiles.\n\t      # We recover the dlopen module name by 'saving' the la file\n\t      # name in a special purpose variable, and (later) extracting the\n\t      # dlname from the la file.\n\t      if test -n \"$dlname\"; then\n\t        func_tr_sh \"$dir/$linklib\"\n\t        eval \"libfile_$func_tr_sh_result=\\$abs_ladir/\\$laname\"\n\t        func_append newdlprefiles \" $dir/$linklib\"\n\t      else\n\t        func_append newdlprefiles \" $dir/$old_library\"\n\t        # Keep a list of preopened convenience libraries to check\n\t        # that they are being used correctly in the link pass.\n\t        test -z \"$libdir\" && \\\n\t          func_append dlpreconveniencelibs \" $dir/$old_library\"\n\t      fi\n\t    ;;\n\t    * )\n\t      # Prefer using a static library (so that no silly _DYNAMIC symbols\n\t      # are required to link).\n\t      if test -n \"$old_library\"; then\n\t        func_append newdlprefiles \" $dir/$old_library\"\n\t        # Keep a list of preopened convenience libraries to check\n\t        # that they are being used correctly in the link pass.\n\t        test -z \"$libdir\" && \\\n\t          func_append dlpreconveniencelibs \" $dir/$old_library\"\n\t      # Otherwise, use the dlname, so that lt_dlopen finds it.\n\t      elif test -n \"$dlname\"; then\n\t        func_append newdlprefiles \" $dir/$dlname\"\n\t      else\n\t        func_append newdlprefiles \" $dir/$linklib\"\n\t      fi\n\t    ;;\n\t  esac\n\tfi # $pass = dlpreopen\n\n\tif test -z \"$libdir\"; then\n\t  # Link the convenience library\n\t  if test lib = \"$linkmode\"; then\n\t    deplibs=\"$dir/$old_library $deplibs\"\n\t  elif test prog,link = \"$linkmode,$pass\"; then\n\t    compile_deplibs=\"$dir/$old_library $compile_deplibs\"\n\t    finalize_deplibs=\"$dir/$old_library $finalize_deplibs\"\n\t  else\n\t    deplibs=\"$lib $deplibs\" # used for prog,scan pass\n\t  fi\n\t  continue\n\tfi\n\n\n\tif test prog = \"$linkmode\" && test link != \"$pass\"; then\n\t  func_append newlib_search_path \" $ladir\"\n\t  deplibs=\"$lib $deplibs\"\n\n\t  linkalldeplibs=false\n\t  if test no != \"$link_all_deplibs\" || test -z \"$library_names\" ||\n\t     test no = \"$build_libtool_libs\"; then\n\t    linkalldeplibs=:\n\t  fi\n\n\t  tmp_libs=\n\t  for deplib in $dependency_libs; do\n\t    case $deplib in\n\t    -L*) func_stripname '-L' '' \"$deplib\"\n\t         func_resolve_sysroot \"$func_stripname_result\"\n\t         func_append newlib_search_path \" $func_resolve_sysroot_result\"\n\t\t ;;\n\t    esac\n\t    # Need to link against all dependency_libs?\n\t    if $linkalldeplibs; then\n\t      deplibs=\"$deplib $deplibs\"\n\t    else\n\t      # Need to hardcode shared library paths\n\t      # or/and link against static libraries\n\t      newdependency_libs=\"$deplib $newdependency_libs\"\n\t    fi\n\t    if $opt_preserve_dup_deps; then\n\t      case \"$tmp_libs \" in\n\t      *\" $deplib \"*) func_append specialdeplibs \" $deplib\" ;;\n\t      esac\n\t    fi\n\t    func_append tmp_libs \" $deplib\"\n\t  done # for deplib\n\t  continue\n\tfi # $linkmode = prog...\n\n\tif test prog,link = \"$linkmode,$pass\"; then\n\t  if test -n \"$library_names\" &&\n\t     { { test no = \"$prefer_static_libs\" ||\n\t         test built,yes = \"$prefer_static_libs,$installed\"; } ||\n\t       test -z \"$old_library\"; }; then\n\t    # We need to hardcode the library path\n\t    if test -n \"$shlibpath_var\" && test -z \"$avoidtemprpath\"; then\n\t      # Make sure the rpath contains only unique directories.\n\t      case $temp_rpath: in\n\t      *\"$absdir:\"*) ;;\n\t      *) func_append temp_rpath \"$absdir:\" ;;\n\t      esac\n\t    fi\n\n\t    # Hardcode the library path.\n\t    # Skip directories that are in the system default run-time\n\t    # search path.\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $absdir \"*) ;;\n\t    *)\n\t      case \"$compile_rpath \" in\n\t      *\" $absdir \"*) ;;\n\t      *) func_append compile_rpath \" $absdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $libdir \"*) ;;\n\t    *)\n\t      case \"$finalize_rpath \" in\n\t      *\" $libdir \"*) ;;\n\t      *) func_append finalize_rpath \" $libdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t  fi # $linkmode,$pass = prog,link...\n\n\t  if $alldeplibs &&\n\t     { test pass_all = \"$deplibs_check_method\" ||\n\t       { test yes = \"$build_libtool_libs\" &&\n\t\t test -n \"$library_names\"; }; }; then\n\t    # We only need to search for static libraries\n\t    continue\n\t  fi\n\tfi\n\n\tlink_static=no # Whether the deplib will be linked statically\n\tuse_static_libs=$prefer_static_libs\n\tif test built = \"$use_static_libs\" && test yes = \"$installed\"; then\n\t  use_static_libs=no\n\tfi\n\tif test -n \"$library_names\" &&\n\t   { test no = \"$use_static_libs\" || test -z \"$old_library\"; }; then\n\t  case $host in\n\t  *cygwin* | *mingw* | *cegcc* | *os2*)\n\t      # No point in relinking DLLs because paths are not encoded\n\t      func_append notinst_deplibs \" $lib\"\n\t      need_relink=no\n\t    ;;\n\t  *)\n\t    if test no = \"$installed\"; then\n\t      func_append notinst_deplibs \" $lib\"\n\t      need_relink=yes\n\t    fi\n\t    ;;\n\t  esac\n\t  # This is a shared library\n\n\t  # Warn about portability, can't link against -module's on some\n\t  # systems (darwin).  Don't bleat about dlopened modules though!\n\t  dlopenmodule=\n\t  for dlpremoduletest in $dlprefiles; do\n\t    if test \"X$dlpremoduletest\" = \"X$lib\"; then\n\t      dlopenmodule=$dlpremoduletest\n\t      break\n\t    fi\n\t  done\n\t  if test -z \"$dlopenmodule\" && test yes = \"$shouldnotlink\" && test link = \"$pass\"; then\n\t    echo\n\t    if test prog = \"$linkmode\"; then\n\t      $ECHO \"*** Warning: Linking the executable $output against the loadable module\"\n\t    else\n\t      $ECHO \"*** Warning: Linking the shared library $output against the loadable module\"\n\t    fi\n\t    $ECHO \"*** $linklib is not portable!\"\n\t  fi\n\t  if test lib = \"$linkmode\" &&\n\t     test yes = \"$hardcode_into_libs\"; then\n\t    # Hardcode the library path.\n\t    # Skip directories that are in the system default run-time\n\t    # search path.\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $absdir \"*) ;;\n\t    *)\n\t      case \"$compile_rpath \" in\n\t      *\" $absdir \"*) ;;\n\t      *) func_append compile_rpath \" $absdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $libdir \"*) ;;\n\t    *)\n\t      case \"$finalize_rpath \" in\n\t      *\" $libdir \"*) ;;\n\t      *) func_append finalize_rpath \" $libdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t  fi\n\n\t  if test -n \"$old_archive_from_expsyms_cmds\"; then\n\t    # figure out the soname\n\t    set dummy $library_names\n\t    shift\n\t    realname=$1\n\t    shift\n\t    libname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t    # use dlname if we got it. it's perfectly good, no?\n\t    if test -n \"$dlname\"; then\n\t      soname=$dlname\n\t    elif test -n \"$soname_spec\"; then\n\t      # bleh windows\n\t      case $host in\n\t      *cygwin* | mingw* | *cegcc* | *os2*)\n\t        func_arith $current - $age\n\t\tmajor=$func_arith_result\n\t\tversuffix=-$major\n\t\t;;\n\t      esac\n\t      eval soname=\\\"$soname_spec\\\"\n\t    else\n\t      soname=$realname\n\t    fi\n\n\t    # Make a new name for the extract_expsyms_cmds to use\n\t    soroot=$soname\n\t    func_basename \"$soroot\"\n\t    soname=$func_basename_result\n\t    func_stripname 'lib' '.dll' \"$soname\"\n\t    newlib=libimp-$func_stripname_result.a\n\n\t    # If the library has no export list, then create one now\n\t    if test -f \"$output_objdir/$soname-def\"; then :\n\t    else\n\t      func_verbose \"extracting exported symbol list from '$soname'\"\n\t      func_execute_cmds \"$extract_expsyms_cmds\" 'exit $?'\n\t    fi\n\n\t    # Create $newlib\n\t    if test -f \"$output_objdir/$newlib\"; then :; else\n\t      func_verbose \"generating import library for '$soname'\"\n\t      func_execute_cmds \"$old_archive_from_expsyms_cmds\" 'exit $?'\n\t    fi\n\t    # make sure the library variables are pointing to the new library\n\t    dir=$output_objdir\n\t    linklib=$newlib\n\t  fi # test -n \"$old_archive_from_expsyms_cmds\"\n\n\t  if test prog = \"$linkmode\" || test relink != \"$opt_mode\"; then\n\t    add_shlibpath=\n\t    add_dir=\n\t    add=\n\t    lib_linked=yes\n\t    case $hardcode_action in\n\t    immediate | unsupported)\n\t      if test no = \"$hardcode_direct\"; then\n\t\tadd=$dir/$linklib\n\t\tcase $host in\n\t\t  *-*-sco3.2v5.0.[024]*) add_dir=-L$dir ;;\n\t\t  *-*-sysv4*uw2*) add_dir=-L$dir ;;\n\t\t  *-*-sysv5OpenUNIX* | *-*-sysv5UnixWare7.[01].[10]* | \\\n\t\t    *-*-unixware7*) add_dir=-L$dir ;;\n\t\t  *-*-darwin* )\n\t\t    # if the lib is a (non-dlopened) module then we cannot\n\t\t    # link against it, someone is ignoring the earlier warnings\n\t\t    if /usr/bin/file -L $add 2> /dev/null |\n\t\t\t $GREP \": [^:]* bundle\" >/dev/null; then\n\t\t      if test \"X$dlopenmodule\" != \"X$lib\"; then\n\t\t\t$ECHO \"*** Warning: lib $linklib is a module, not a shared library\"\n\t\t\tif test -z \"$old_library\"; then\n\t\t\t  echo\n\t\t\t  echo \"*** And there doesn't seem to be a static archive available\"\n\t\t\t  echo \"*** The link will probably fail, sorry\"\n\t\t\telse\n\t\t\t  add=$dir/$old_library\n\t\t\tfi\n\t\t      elif test -n \"$old_library\"; then\n\t\t\tadd=$dir/$old_library\n\t\t      fi\n\t\t    fi\n\t\tesac\n\t      elif test no = \"$hardcode_minus_L\"; then\n\t\tcase $host in\n\t\t*-*-sunos*) add_shlibpath=$dir ;;\n\t\tesac\n\t\tadd_dir=-L$dir\n\t\tadd=-l$name\n\t      elif test no = \"$hardcode_shlibpath_var\"; then\n\t\tadd_shlibpath=$dir\n\t\tadd=-l$name\n\t      else\n\t\tlib_linked=no\n\t      fi\n\t      ;;\n\t    relink)\n\t      if test yes = \"$hardcode_direct\" &&\n\t         test no = \"$hardcode_direct_absolute\"; then\n\t\tadd=$dir/$linklib\n\t      elif test yes = \"$hardcode_minus_L\"; then\n\t\tadd_dir=-L$absdir\n\t\t# Try looking first in the location we're being installed to.\n\t\tif test -n \"$inst_prefix_dir\"; then\n\t\t  case $libdir in\n\t\t    [\\\\/]*)\n\t\t      func_append add_dir \" -L$inst_prefix_dir$libdir\"\n\t\t      ;;\n\t\t  esac\n\t\tfi\n\t\tadd=-l$name\n\t      elif test yes = \"$hardcode_shlibpath_var\"; then\n\t\tadd_shlibpath=$dir\n\t\tadd=-l$name\n\t      else\n\t\tlib_linked=no\n\t      fi\n\t      ;;\n\t    *) lib_linked=no ;;\n\t    esac\n\n\t    if test yes != \"$lib_linked\"; then\n\t      func_fatal_configuration \"unsupported hardcode properties\"\n\t    fi\n\n\t    if test -n \"$add_shlibpath\"; then\n\t      case :$compile_shlibpath: in\n\t      *\":$add_shlibpath:\"*) ;;\n\t      *) func_append compile_shlibpath \"$add_shlibpath:\" ;;\n\t      esac\n\t    fi\n\t    if test prog = \"$linkmode\"; then\n\t      test -n \"$add_dir\" && compile_deplibs=\"$add_dir $compile_deplibs\"\n\t      test -n \"$add\" && compile_deplibs=\"$add $compile_deplibs\"\n\t    else\n\t      test -n \"$add_dir\" && deplibs=\"$add_dir $deplibs\"\n\t      test -n \"$add\" && deplibs=\"$add $deplibs\"\n\t      if test yes != \"$hardcode_direct\" &&\n\t\t test yes != \"$hardcode_minus_L\" &&\n\t\t test yes = \"$hardcode_shlibpath_var\"; then\n\t\tcase :$finalize_shlibpath: in\n\t\t*\":$libdir:\"*) ;;\n\t\t*) func_append finalize_shlibpath \"$libdir:\" ;;\n\t\tesac\n\t      fi\n\t    fi\n\t  fi\n\n\t  if test prog = \"$linkmode\" || test relink = \"$opt_mode\"; then\n\t    add_shlibpath=\n\t    add_dir=\n\t    add=\n\t    # Finalize command for both is simple: just hardcode it.\n\t    if test yes = \"$hardcode_direct\" &&\n\t       test no = \"$hardcode_direct_absolute\"; then\n\t      add=$libdir/$linklib\n\t    elif test yes = \"$hardcode_minus_L\"; then\n\t      add_dir=-L$libdir\n\t      add=-l$name\n\t    elif test yes = \"$hardcode_shlibpath_var\"; then\n\t      case :$finalize_shlibpath: in\n\t      *\":$libdir:\"*) ;;\n\t      *) func_append finalize_shlibpath \"$libdir:\" ;;\n\t      esac\n\t      add=-l$name\n\t    elif test yes = \"$hardcode_automatic\"; then\n\t      if test -n \"$inst_prefix_dir\" &&\n\t\t test -f \"$inst_prefix_dir$libdir/$linklib\"; then\n\t\tadd=$inst_prefix_dir$libdir/$linklib\n\t      else\n\t\tadd=$libdir/$linklib\n\t      fi\n\t    else\n\t      # We cannot seem to hardcode it, guess we'll fake it.\n\t      add_dir=-L$libdir\n\t      # Try looking first in the location we're being installed to.\n\t      if test -n \"$inst_prefix_dir\"; then\n\t\tcase $libdir in\n\t\t  [\\\\/]*)\n\t\t    func_append add_dir \" -L$inst_prefix_dir$libdir\"\n\t\t    ;;\n\t\tesac\n\t      fi\n\t      add=-l$name\n\t    fi\n\n\t    if test prog = \"$linkmode\"; then\n\t      test -n \"$add_dir\" && finalize_deplibs=\"$add_dir $finalize_deplibs\"\n\t      test -n \"$add\" && finalize_deplibs=\"$add $finalize_deplibs\"\n\t    else\n\t      test -n \"$add_dir\" && deplibs=\"$add_dir $deplibs\"\n\t      test -n \"$add\" && deplibs=\"$add $deplibs\"\n\t    fi\n\t  fi\n\telif test prog = \"$linkmode\"; then\n\t  # Here we assume that one of hardcode_direct or hardcode_minus_L\n\t  # is not unsupported.  This is valid on all known static and\n\t  # shared platforms.\n\t  if test unsupported != \"$hardcode_direct\"; then\n\t    test -n \"$old_library\" && linklib=$old_library\n\t    compile_deplibs=\"$dir/$linklib $compile_deplibs\"\n\t    finalize_deplibs=\"$dir/$linklib $finalize_deplibs\"\n\t  else\n\t    compile_deplibs=\"-l$name -L$dir $compile_deplibs\"\n\t    finalize_deplibs=\"-l$name -L$dir $finalize_deplibs\"\n\t  fi\n\telif test yes = \"$build_libtool_libs\"; then\n\t  # Not a shared library\n\t  if test pass_all != \"$deplibs_check_method\"; then\n\t    # We're trying link a shared library against a static one\n\t    # but the system doesn't support it.\n\n\t    # Just print a warning and add the library to dependency_libs so\n\t    # that the program can be linked against the static library.\n\t    echo\n\t    $ECHO \"*** Warning: This system cannot link to static lib archive $lib.\"\n\t    echo \"*** I have the capability to make that library automatically link in when\"\n\t    echo \"*** you link to this library.  But I can only do this if you have a\"\n\t    echo \"*** shared version of the library, which you do not appear to have.\"\n\t    if test yes = \"$module\"; then\n\t      echo \"*** But as you try to build a module library, libtool will still create \"\n\t      echo \"*** a static module, that should work as long as the dlopening application\"\n\t      echo \"*** is linked with the -dlopen flag to resolve symbols at runtime.\"\n\t      if test -z \"$global_symbol_pipe\"; then\n\t\techo\n\t\techo \"*** However, this would only work if libtool was able to extract symbol\"\n\t\techo \"*** lists from a program, using 'nm' or equivalent, but libtool could\"\n\t\techo \"*** not find such a program.  So, this module is probably useless.\"\n\t\techo \"*** 'nm' from GNU binutils and a full rebuild may help.\"\n\t      fi\n\t      if test no = \"$build_old_libs\"; then\n\t\tbuild_libtool_libs=module\n\t\tbuild_old_libs=yes\n\t      else\n\t\tbuild_libtool_libs=no\n\t      fi\n\t    fi\n\t  else\n\t    deplibs=\"$dir/$old_library $deplibs\"\n\t    link_static=yes\n\t  fi\n\tfi # link shared/static library?\n\n\tif test lib = \"$linkmode\"; then\n\t  if test -n \"$dependency_libs\" &&\n\t     { test yes != \"$hardcode_into_libs\" ||\n\t       test yes = \"$build_old_libs\" ||\n\t       test yes = \"$link_static\"; }; then\n\t    # Extract -R from dependency_libs\n\t    temp_deplibs=\n\t    for libdir in $dependency_libs; do\n\t      case $libdir in\n\t      -R*) func_stripname '-R' '' \"$libdir\"\n\t           temp_xrpath=$func_stripname_result\n\t\t   case \" $xrpath \" in\n\t\t   *\" $temp_xrpath \"*) ;;\n\t\t   *) func_append xrpath \" $temp_xrpath\";;\n\t\t   esac;;\n\t      *) func_append temp_deplibs \" $libdir\";;\n\t      esac\n\t    done\n\t    dependency_libs=$temp_deplibs\n\t  fi\n\n\t  func_append newlib_search_path \" $absdir\"\n\t  # Link against this library\n\t  test no = \"$link_static\" && newdependency_libs=\"$abs_ladir/$laname $newdependency_libs\"\n\t  # ... and its dependency_libs\n\t  tmp_libs=\n\t  for deplib in $dependency_libs; do\n\t    newdependency_libs=\"$deplib $newdependency_libs\"\n\t    case $deplib in\n              -L*) func_stripname '-L' '' \"$deplib\"\n                   func_resolve_sysroot \"$func_stripname_result\";;\n              *) func_resolve_sysroot \"$deplib\" ;;\n            esac\n\t    if $opt_preserve_dup_deps; then\n\t      case \"$tmp_libs \" in\n\t      *\" $func_resolve_sysroot_result \"*)\n                func_append specialdeplibs \" $func_resolve_sysroot_result\" ;;\n\t      esac\n\t    fi\n\t    func_append tmp_libs \" $func_resolve_sysroot_result\"\n\t  done\n\n\t  if test no != \"$link_all_deplibs\"; then\n\t    # Add the search paths of all dependency libraries\n\t    for deplib in $dependency_libs; do\n\t      path=\n\t      case $deplib in\n\t      -L*) path=$deplib ;;\n\t      *.la)\n\t        func_resolve_sysroot \"$deplib\"\n\t        deplib=$func_resolve_sysroot_result\n\t        func_dirname \"$deplib\" \"\" \".\"\n\t\tdir=$func_dirname_result\n\t\t# We need an absolute path.\n\t\tcase $dir in\n\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) absdir=$dir ;;\n\t\t*)\n\t\t  absdir=`cd \"$dir\" && pwd`\n\t\t  if test -z \"$absdir\"; then\n\t\t    func_warning \"cannot determine absolute directory name of '$dir'\"\n\t\t    absdir=$dir\n\t\t  fi\n\t\t  ;;\n\t\tesac\n\t\tif $GREP \"^installed=no\" $deplib > /dev/null; then\n\t\tcase $host in\n\t\t*-*-darwin*)\n\t\t  depdepl=\n\t\t  eval deplibrary_names=`$SED -n -e 's/^library_names=\\(.*\\)$/\\1/p' $deplib`\n\t\t  if test -n \"$deplibrary_names\"; then\n\t\t    for tmp in $deplibrary_names; do\n\t\t      depdepl=$tmp\n\t\t    done\n\t\t    if test -f \"$absdir/$objdir/$depdepl\"; then\n\t\t      depdepl=$absdir/$objdir/$depdepl\n\t\t      darwin_install_name=`$OTOOL -L $depdepl | awk '{if (NR == 2) {print $1;exit}}'`\n                      if test -z \"$darwin_install_name\"; then\n                          darwin_install_name=`$OTOOL64 -L $depdepl  | awk '{if (NR == 2) {print $1;exit}}'`\n                      fi\n\t\t      func_append compiler_flags \" $wl-dylib_file $wl$darwin_install_name:$depdepl\"\n\t\t      func_append linker_flags \" -dylib_file $darwin_install_name:$depdepl\"\n\t\t      path=\n\t\t    fi\n\t\t  fi\n\t\t  ;;\n\t\t*)\n\t\t  path=-L$absdir/$objdir\n\t\t  ;;\n\t\tesac\n\t\telse\n\t\t  eval libdir=`$SED -n -e 's/^libdir=\\(.*\\)$/\\1/p' $deplib`\n\t\t  test -z \"$libdir\" && \\\n\t\t    func_fatal_error \"'$deplib' is not a valid libtool archive\"\n\t\t  test \"$absdir\" != \"$libdir\" && \\\n\t\t    func_warning \"'$deplib' seems to be moved\"\n\n\t\t  path=-L$absdir\n\t\tfi\n\t\t;;\n\t      esac\n\t      case \" $deplibs \" in\n\t      *\" $path \"*) ;;\n\t      *) deplibs=\"$path $deplibs\" ;;\n\t      esac\n\t    done\n\t  fi # link_all_deplibs != no\n\tfi # linkmode = lib\n      done # for deplib in $libs\n      if test link = \"$pass\"; then\n\tif test prog = \"$linkmode\"; then\n\t  compile_deplibs=\"$new_inherited_linker_flags $compile_deplibs\"\n\t  finalize_deplibs=\"$new_inherited_linker_flags $finalize_deplibs\"\n\telse\n\t  compiler_flags=\"$compiler_flags \"`$ECHO \" $new_inherited_linker_flags\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\tfi\n      fi\n      dependency_libs=$newdependency_libs\n      if test dlpreopen = \"$pass\"; then\n\t# Link the dlpreopened libraries before other libraries\n\tfor deplib in $save_deplibs; do\n\t  deplibs=\"$deplib $deplibs\"\n\tdone\n      fi\n      if test dlopen != \"$pass\"; then\n\ttest conv = \"$pass\" || {\n\t  # Make sure lib_search_path contains only unique directories.\n\t  lib_search_path=\n\t  for dir in $newlib_search_path; do\n\t    case \"$lib_search_path \" in\n\t    *\" $dir \"*) ;;\n\t    *) func_append lib_search_path \" $dir\" ;;\n\t    esac\n\t  done\n\t  newlib_search_path=\n\t}\n\n\tif test prog,link = \"$linkmode,$pass\"; then\n\t  vars=\"compile_deplibs finalize_deplibs\"\n\telse\n\t  vars=deplibs\n\tfi\n\tfor var in $vars dependency_libs; do\n\t  # Add libraries to $var in reverse order\n\t  eval tmp_libs=\\\"\\$$var\\\"\n\t  new_libs=\n\t  for deplib in $tmp_libs; do\n\t    # FIXME: Pedantically, this is the right thing to do, so\n\t    #        that some nasty dependency loop isn't accidentally\n\t    #        broken:\n\t    #new_libs=\"$deplib $new_libs\"\n\t    # Pragmatically, this seems to cause very few problems in\n\t    # practice:\n\t    case $deplib in\n\t    -L*) new_libs=\"$deplib $new_libs\" ;;\n\t    -R*) ;;\n\t    *)\n\t      # And here is the reason: when a library appears more\n\t      # than once as an explicit dependence of a library, or\n\t      # is implicitly linked in more than once by the\n\t      # compiler, it is considered special, and multiple\n\t      # occurrences thereof are not removed.  Compare this\n\t      # with having the same library being listed as a\n\t      # dependency of multiple other libraries: in this case,\n\t      # we know (pedantically, we assume) the library does not\n\t      # need to be listed more than once, so we keep only the\n\t      # last copy.  This is not always right, but it is rare\n\t      # enough that we require users that really mean to play\n\t      # such unportable linking tricks to link the library\n\t      # using -Wl,-lname, so that libtool does not consider it\n\t      # for duplicate removal.\n\t      case \" $specialdeplibs \" in\n\t      *\" $deplib \"*) new_libs=\"$deplib $new_libs\" ;;\n\t      *)\n\t\tcase \" $new_libs \" in\n\t\t*\" $deplib \"*) ;;\n\t\t*) new_libs=\"$deplib $new_libs\" ;;\n\t\tesac\n\t\t;;\n\t      esac\n\t      ;;\n\t    esac\n\t  done\n\t  tmp_libs=\n\t  for deplib in $new_libs; do\n\t    case $deplib in\n\t    -L*)\n\t      case \" $tmp_libs \" in\n\t      *\" $deplib \"*) ;;\n\t      *) func_append tmp_libs \" $deplib\" ;;\n\t      esac\n\t      ;;\n\t    *) func_append tmp_libs \" $deplib\" ;;\n\t    esac\n\t  done\n\t  eval $var=\\\"$tmp_libs\\\"\n\tdone # for var\n      fi\n\n      # Add Sun CC postdeps if required:\n      test CXX = \"$tagname\" && {\n        case $host_os in\n        linux*)\n          case `$CC -V 2>&1 | sed 5q` in\n          *Sun\\ C*) # Sun C++ 5.9\n            func_suncc_cstd_abi\n\n            if test no != \"$suncc_use_cstd_abi\"; then\n              func_append postdeps ' -library=Cstd -library=Crun'\n            fi\n            ;;\n          esac\n          ;;\n\n        solaris*)\n          func_cc_basename \"$CC\"\n          case $func_cc_basename_result in\n          CC* | sunCC*)\n            func_suncc_cstd_abi\n\n            if test no != \"$suncc_use_cstd_abi\"; then\n              func_append postdeps ' -library=Cstd -library=Crun'\n            fi\n            ;;\n          esac\n          ;;\n        esac\n      }\n\n      # Last step: remove runtime libs from dependency_libs\n      # (they stay in deplibs)\n      tmp_libs=\n      for i in $dependency_libs; do\n\tcase \" $predeps $postdeps $compiler_lib_search_path \" in\n\t*\" $i \"*)\n\t  i=\n\t  ;;\n\tesac\n\tif test -n \"$i\"; then\n\t  func_append tmp_libs \" $i\"\n\tfi\n      done\n      dependency_libs=$tmp_libs\n    done # for pass\n    if test prog = \"$linkmode\"; then\n      dlfiles=$newdlfiles\n    fi\n    if test prog = \"$linkmode\" || test lib = \"$linkmode\"; then\n      dlprefiles=$newdlprefiles\n    fi\n\n    case $linkmode in\n    oldlib)\n      if test -n \"$dlfiles$dlprefiles\" || test no != \"$dlself\"; then\n\tfunc_warning \"'-dlopen' is ignored for archives\"\n      fi\n\n      case \" $deplibs\" in\n      *\\ -l* | *\\ -L*)\n\tfunc_warning \"'-l' and '-L' are ignored for archives\" ;;\n      esac\n\n      test -n \"$rpath\" && \\\n\tfunc_warning \"'-rpath' is ignored for archives\"\n\n      test -n \"$xrpath\" && \\\n\tfunc_warning \"'-R' is ignored for archives\"\n\n      test -n \"$vinfo\" && \\\n\tfunc_warning \"'-version-info/-version-number' is ignored for archives\"\n\n      test -n \"$release\" && \\\n\tfunc_warning \"'-release' is ignored for archives\"\n\n      test -n \"$export_symbols$export_symbols_regex\" && \\\n\tfunc_warning \"'-export-symbols' is ignored for archives\"\n\n      # Now set the variables for building old libraries.\n      build_libtool_libs=no\n      oldlibs=$output\n      func_append objs \"$old_deplibs\"\n      ;;\n\n    lib)\n      # Make sure we only generate libraries of the form 'libNAME.la'.\n      case $outputname in\n      lib*)\n\tfunc_stripname 'lib' '.la' \"$outputname\"\n\tname=$func_stripname_result\n\teval shared_ext=\\\"$shrext_cmds\\\"\n\teval libname=\\\"$libname_spec\\\"\n\t;;\n      *)\n\ttest no = \"$module\" \\\n\t  && func_fatal_help \"libtool library '$output' must begin with 'lib'\"\n\n\tif test no != \"$need_lib_prefix\"; then\n\t  # Add the \"lib\" prefix for modules if required\n\t  func_stripname '' '.la' \"$outputname\"\n\t  name=$func_stripname_result\n\t  eval shared_ext=\\\"$shrext_cmds\\\"\n\t  eval libname=\\\"$libname_spec\\\"\n\telse\n\t  func_stripname '' '.la' \"$outputname\"\n\t  libname=$func_stripname_result\n\tfi\n\t;;\n      esac\n\n      if test -n \"$objs\"; then\n\tif test pass_all != \"$deplibs_check_method\"; then\n\t  func_fatal_error \"cannot build libtool library '$output' from non-libtool objects on this host:$objs\"\n\telse\n\t  echo\n\t  $ECHO \"*** Warning: Linking the shared library $output against the non-libtool\"\n\t  $ECHO \"*** objects $objs is not portable!\"\n\t  func_append libobjs \" $objs\"\n\tfi\n      fi\n\n      test no = \"$dlself\" \\\n\t|| func_warning \"'-dlopen self' is ignored for libtool libraries\"\n\n      set dummy $rpath\n      shift\n      test 1 -lt \"$#\" \\\n\t&& func_warning \"ignoring multiple '-rpath's for a libtool library\"\n\n      install_libdir=$1\n\n      oldlibs=\n      if test -z \"$rpath\"; then\n\tif test yes = \"$build_libtool_libs\"; then\n\t  # Building a libtool convenience library.\n\t  # Some compilers have problems with a '.al' extension so\n\t  # convenience libraries should have the same extension an\n\t  # archive normally would.\n\t  oldlibs=\"$output_objdir/$libname.$libext $oldlibs\"\n\t  build_libtool_libs=convenience\n\t  build_old_libs=yes\n\tfi\n\n\ttest -n \"$vinfo\" && \\\n\t  func_warning \"'-version-info/-version-number' is ignored for convenience libraries\"\n\n\ttest -n \"$release\" && \\\n\t  func_warning \"'-release' is ignored for convenience libraries\"\n      else\n\n\t# Parse the version information argument.\n\tsave_ifs=$IFS; IFS=:\n\tset dummy $vinfo 0 0 0\n\tshift\n\tIFS=$save_ifs\n\n\ttest -n \"$7\" && \\\n\t  func_fatal_help \"too many parameters to '-version-info'\"\n\n\t# convert absolute version numbers to libtool ages\n\t# this retains compatibility with .la files and attempts\n\t# to make the code below a bit more comprehensible\n\n\tcase $vinfo_number in\n\tyes)\n\t  number_major=$1\n\t  number_minor=$2\n\t  number_revision=$3\n\t  #\n\t  # There are really only two kinds -- those that\n\t  # use the current revision as the major version\n\t  # and those that subtract age and use age as\n\t  # a minor version.  But, then there is irix\n\t  # that has an extra 1 added just for fun\n\t  #\n\t  case $version_type in\n\t  # correct linux to gnu/linux during the next big refactor\n\t  darwin|freebsd-elf|linux|osf|windows|none)\n\t    func_arith $number_major + $number_minor\n\t    current=$func_arith_result\n\t    age=$number_minor\n\t    revision=$number_revision\n\t    ;;\n\t  freebsd-aout|qnx|sunos)\n\t    current=$number_major\n\t    revision=$number_minor\n\t    age=0\n\t    ;;\n\t  irix|nonstopux)\n\t    func_arith $number_major + $number_minor\n\t    current=$func_arith_result\n\t    age=$number_minor\n\t    revision=$number_minor\n\t    lt_irix_increment=no\n\t    ;;\n\t  esac\n\t  ;;\n\tno)\n\t  current=$1\n\t  revision=$2\n\t  age=$3\n\t  ;;\n\tesac\n\n\t# Check that each of the things are valid numbers.\n\tcase $current in\n\t0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]) ;;\n\t*)\n\t  func_error \"CURRENT '$current' must be a nonnegative integer\"\n\t  func_fatal_error \"'$vinfo' is not valid version information\"\n\t  ;;\n\tesac\n\n\tcase $revision in\n\t0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]) ;;\n\t*)\n\t  func_error \"REVISION '$revision' must be a nonnegative integer\"\n\t  func_fatal_error \"'$vinfo' is not valid version information\"\n\t  ;;\n\tesac\n\n\tcase $age in\n\t0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]) ;;\n\t*)\n\t  func_error \"AGE '$age' must be a nonnegative integer\"\n\t  func_fatal_error \"'$vinfo' is not valid version information\"\n\t  ;;\n\tesac\n\n\tif test \"$age\" -gt \"$current\"; then\n\t  func_error \"AGE '$age' is greater than the current interface number '$current'\"\n\t  func_fatal_error \"'$vinfo' is not valid version information\"\n\tfi\n\n\t# Calculate the version variables.\n\tmajor=\n\tversuffix=\n\tverstring=\n\tcase $version_type in\n\tnone) ;;\n\n\tdarwin)\n\t  # Like Linux, but with the current version available in\n\t  # verstring for coding it into the library header\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=$major.$age.$revision\n\t  # Darwin ld doesn't like 0 for these options...\n\t  func_arith $current + 1\n\t  minor_current=$func_arith_result\n\t  xlcverstring=\"$wl-compatibility_version $wl$minor_current $wl-current_version $wl$minor_current.$revision\"\n\t  verstring=\"-compatibility_version $minor_current -current_version $minor_current.$revision\"\n          # On Darwin other compilers\n          case $CC in\n              nagfor*)\n                  verstring=\"$wl-compatibility_version $wl$minor_current $wl-current_version $wl$minor_current.$revision\"\n                  ;;\n              *)\n                  verstring=\"-compatibility_version $minor_current -current_version $minor_current.$revision\"\n                  ;;\n          esac\n\t  ;;\n\n\tfreebsd-aout)\n\t  major=.$current\n\t  versuffix=.$current.$revision\n\t  ;;\n\n\tfreebsd-elf)\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=$major.$age.$revision\n\t  ;;\n\n\tirix | nonstopux)\n\t  if test no = \"$lt_irix_increment\"; then\n\t    func_arith $current - $age\n\t  else\n\t    func_arith $current - $age + 1\n\t  fi\n\t  major=$func_arith_result\n\n\t  case $version_type in\n\t    nonstopux) verstring_prefix=nonstopux ;;\n\t    *)         verstring_prefix=sgi ;;\n\t  esac\n\t  verstring=$verstring_prefix$major.$revision\n\n\t  # Add in all the interfaces that we are compatible with.\n\t  loop=$revision\n\t  while test 0 -ne \"$loop\"; do\n\t    func_arith $revision - $loop\n\t    iface=$func_arith_result\n\t    func_arith $loop - 1\n\t    loop=$func_arith_result\n\t    verstring=$verstring_prefix$major.$iface:$verstring\n\t  done\n\n\t  # Before this point, $major must not contain '.'.\n\t  major=.$major\n\t  versuffix=$major.$revision\n\t  ;;\n\n\tlinux) # correct to gnu/linux during the next big refactor\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=$major.$age.$revision\n\t  ;;\n\n\tosf)\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=.$current.$age.$revision\n\t  verstring=$current.$age.$revision\n\n\t  # Add in all the interfaces that we are compatible with.\n\t  loop=$age\n\t  while test 0 -ne \"$loop\"; do\n\t    func_arith $current - $loop\n\t    iface=$func_arith_result\n\t    func_arith $loop - 1\n\t    loop=$func_arith_result\n\t    verstring=$verstring:$iface.0\n\t  done\n\n\t  # Make executables depend on our current version.\n\t  func_append verstring \":$current.0\"\n\t  ;;\n\n\tqnx)\n\t  major=.$current\n\t  versuffix=.$current\n\t  ;;\n\n\tsco)\n\t  major=.$current\n\t  versuffix=.$current\n\t  ;;\n\n\tsunos)\n\t  major=.$current\n\t  versuffix=.$current.$revision\n\t  ;;\n\n\twindows)\n\t  # Use '-' rather than '.', since we only want one\n\t  # extension on DOS 8.3 file systems.\n\t  func_arith $current - $age\n\t  major=$func_arith_result\n\t  versuffix=-$major\n\t  ;;\n\n\t*)\n\t  func_fatal_configuration \"unknown library version type '$version_type'\"\n\t  ;;\n\tesac\n\n\t# Clear the version info if we defaulted, and they specified a release.\n\tif test -z \"$vinfo\" && test -n \"$release\"; then\n\t  major=\n\t  case $version_type in\n\t  darwin)\n\t    # we can't check for \"0.0\" in archive_cmds due to quoting\n\t    # problems, so we reset it completely\n\t    verstring=\n\t    ;;\n\t  *)\n\t    verstring=0.0\n\t    ;;\n\t  esac\n\t  if test no = \"$need_version\"; then\n\t    versuffix=\n\t  else\n\t    versuffix=.0.0\n\t  fi\n\tfi\n\n\t# Remove version info from name if versioning should be avoided\n\tif test yes,no = \"$avoid_version,$need_version\"; then\n\t  major=\n\t  versuffix=\n\t  verstring=\n\tfi\n\n\t# Check to see if the archive will have undefined symbols.\n\tif test yes = \"$allow_undefined\"; then\n\t  if test unsupported = \"$allow_undefined_flag\"; then\n\t    if test yes = \"$build_old_libs\"; then\n\t      func_warning \"undefined symbols not allowed in $host shared libraries; building static only\"\n\t      build_libtool_libs=no\n\t    else\n\t      func_fatal_error \"can't build $host shared library unless -no-undefined is specified\"\n\t    fi\n\t  fi\n\telse\n\t  # Don't allow undefined symbols.\n\t  allow_undefined_flag=$no_undefined_flag\n\tfi\n\n      fi\n\n      func_generate_dlsyms \"$libname\" \"$libname\" :\n      func_append libobjs \" $symfileobj\"\n      test \" \" = \"$libobjs\" && libobjs=\n\n      if test relink != \"$opt_mode\"; then\n\t# Remove our outputs, but don't remove object files since they\n\t# may have been created when compiling PIC objects.\n\tremovelist=\n\ttempremovelist=`$ECHO \"$output_objdir/*\"`\n\tfor p in $tempremovelist; do\n\t  case $p in\n\t    *.$objext | *.gcno)\n\t       ;;\n\t    $output_objdir/$outputname | $output_objdir/$libname.* | $output_objdir/$libname$release.*)\n\t       if test -n \"$precious_files_regex\"; then\n\t\t if $ECHO \"$p\" | $EGREP -e \"$precious_files_regex\" >/dev/null 2>&1\n\t\t then\n\t\t   continue\n\t\t fi\n\t       fi\n\t       func_append removelist \" $p\"\n\t       ;;\n\t    *) ;;\n\t  esac\n\tdone\n\ttest -n \"$removelist\" && \\\n\t  func_show_eval \"${RM}r \\$removelist\"\n      fi\n\n      # Now set the variables for building old libraries.\n      if test yes = \"$build_old_libs\" && test convenience != \"$build_libtool_libs\"; then\n\tfunc_append oldlibs \" $output_objdir/$libname.$libext\"\n\n\t# Transform .lo files to .o files.\n\toldobjs=\"$objs \"`$ECHO \"$libobjs\" | $SP2NL | $SED \"/\\.$libext$/d; $lo2o\" | $NL2SP`\n      fi\n\n      # Eliminate all temporary directories.\n      #for path in $notinst_path; do\n      #\tlib_search_path=`$ECHO \"$lib_search_path \" | $SED \"s% $path % %g\"`\n      #\tdeplibs=`$ECHO \"$deplibs \" | $SED \"s% -L$path % %g\"`\n      #\tdependency_libs=`$ECHO \"$dependency_libs \" | $SED \"s% -L$path % %g\"`\n      #done\n\n      if test -n \"$xrpath\"; then\n\t# If the user specified any rpath flags, then add them.\n\ttemp_xrpath=\n\tfor libdir in $xrpath; do\n\t  func_replace_sysroot \"$libdir\"\n\t  func_append temp_xrpath \" -R$func_replace_sysroot_result\"\n\t  case \"$finalize_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append finalize_rpath \" $libdir\" ;;\n\t  esac\n\tdone\n\tif test yes != \"$hardcode_into_libs\" || test yes = \"$build_old_libs\"; then\n\t  dependency_libs=\"$temp_xrpath $dependency_libs\"\n\tfi\n      fi\n\n      # Make sure dlfiles contains only unique files that won't be dlpreopened\n      old_dlfiles=$dlfiles\n      dlfiles=\n      for lib in $old_dlfiles; do\n\tcase \" $dlprefiles $dlfiles \" in\n\t*\" $lib \"*) ;;\n\t*) func_append dlfiles \" $lib\" ;;\n\tesac\n      done\n\n      # Make sure dlprefiles contains only unique files\n      old_dlprefiles=$dlprefiles\n      dlprefiles=\n      for lib in $old_dlprefiles; do\n\tcase \"$dlprefiles \" in\n\t*\" $lib \"*) ;;\n\t*) func_append dlprefiles \" $lib\" ;;\n\tesac\n      done\n\n      if test yes = \"$build_libtool_libs\"; then\n\tif test -n \"$rpath\"; then\n\t  case $host in\n\t  *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-*-beos* | *-cegcc* | *-*-haiku*)\n\t    # these systems don't actually have a c library (as such)!\n\t    ;;\n\t  *-*-rhapsody* | *-*-darwin1.[012])\n\t    # Rhapsody C library is in the System framework\n\t    func_append deplibs \" System.ltframework\"\n\t    ;;\n\t  *-*-netbsd*)\n\t    # Don't link with libc until the a.out ld.so is fixed.\n\t    ;;\n\t  *-*-openbsd* | *-*-freebsd* | *-*-dragonfly*)\n\t    # Do not include libc due to us having libc/libc_r.\n\t    ;;\n\t  *-*-sco3.2v5* | *-*-sco5v6*)\n\t    # Causes problems with __ctype\n\t    ;;\n\t  *-*-sysv4.2uw2* | *-*-sysv5* | *-*-unixware* | *-*-OpenUNIX*)\n\t    # Compiler inserts libc in the correct place for threads to work\n\t    ;;\n\t  *)\n\t    # Add libc to deplibs on all other systems if necessary.\n\t    if test yes = \"$build_libtool_need_lc\"; then\n\t      func_append deplibs \" -lc\"\n\t    fi\n\t    ;;\n\t  esac\n\tfi\n\n\t# Transform deplibs into only deplibs that can be linked in shared.\n\tname_save=$name\n\tlibname_save=$libname\n\trelease_save=$release\n\tversuffix_save=$versuffix\n\tmajor_save=$major\n\t# I'm not sure if I'm treating the release correctly.  I think\n\t# release should show up in the -l (ie -lgmp5) so we don't want to\n\t# add it in twice.  Is that correct?\n\trelease=\n\tversuffix=\n\tmajor=\n\tnewdeplibs=\n\tdroppeddeps=no\n\tcase $deplibs_check_method in\n\tpass_all)\n\t  # Don't check for shared/static.  Everything works.\n\t  # This might be a little naive.  We might want to check\n\t  # whether the library exists or not.  But this is on\n\t  # osf3 & osf4 and I'm not really sure... Just\n\t  # implementing what was already the behavior.\n\t  newdeplibs=$deplibs\n\t  ;;\n\ttest_compile)\n\t  # This code stresses the \"libraries are programs\" paradigm to its\n\t  # limits. Maybe even breaks it.  We compile a program, linking it\n\t  # against the deplibs as a proxy for the library.  Then we can check\n\t  # whether they linked in statically or dynamically with ldd.\n\t  $opt_dry_run || $RM conftest.c\n\t  cat > conftest.c <<EOF\n\t  int main() { return 0; }\nEOF\n\t  $opt_dry_run || $RM conftest\n\t  if $LTCC $LTCFLAGS -o conftest conftest.c $deplibs; then\n\t    ldd_output=`ldd conftest`\n\t    for i in $deplibs; do\n\t      case $i in\n\t      -l*)\n\t\tfunc_stripname -l '' \"$i\"\n\t\tname=$func_stripname_result\n\t\tif test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t\t  case \" $predeps $postdeps \" in\n\t\t  *\" $i \"*)\n\t\t    func_append newdeplibs \" $i\"\n\t\t    i=\n\t\t    ;;\n\t\t  esac\n\t\tfi\n\t\tif test -n \"$i\"; then\n\t\t  libname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\t  deplib_matches=`eval \"\\\\$ECHO \\\"$library_names_spec\\\"\"`\n\t\t  set dummy $deplib_matches; shift\n\t\t  deplib_match=$1\n\t\t  if test `expr \"$ldd_output\" : \".*$deplib_match\"` -ne 0; then\n\t\t    func_append newdeplibs \" $i\"\n\t\t  else\n\t\t    droppeddeps=yes\n\t\t    echo\n\t\t    $ECHO \"*** Warning: dynamic linker does not accept needed library $i.\"\n\t\t    echo \"*** I have the capability to make that library automatically link in when\"\n\t\t    echo \"*** you link to this library.  But I can only do this if you have a\"\n\t\t    echo \"*** shared version of the library, which I believe you do not have\"\n\t\t    echo \"*** because a test_compile did reveal that the linker did not use it for\"\n\t\t    echo \"*** its dynamic dependency list that programs get resolved with at runtime.\"\n\t\t  fi\n\t\tfi\n\t\t;;\n\t      *)\n\t\tfunc_append newdeplibs \" $i\"\n\t\t;;\n\t      esac\n\t    done\n\t  else\n\t    # Error occurred in the first compile.  Let's try to salvage\n\t    # the situation: Compile a separate program for each library.\n\t    for i in $deplibs; do\n\t      case $i in\n\t      -l*)\n\t\tfunc_stripname -l '' \"$i\"\n\t\tname=$func_stripname_result\n\t\t$opt_dry_run || $RM conftest\n\t\tif $LTCC $LTCFLAGS -o conftest conftest.c $i; then\n\t\t  ldd_output=`ldd conftest`\n\t\t  if test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t\t    case \" $predeps $postdeps \" in\n\t\t    *\" $i \"*)\n\t\t      func_append newdeplibs \" $i\"\n\t\t      i=\n\t\t      ;;\n\t\t    esac\n\t\t  fi\n\t\t  if test -n \"$i\"; then\n\t\t    libname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\t    deplib_matches=`eval \"\\\\$ECHO \\\"$library_names_spec\\\"\"`\n\t\t    set dummy $deplib_matches; shift\n\t\t    deplib_match=$1\n\t\t    if test `expr \"$ldd_output\" : \".*$deplib_match\"` -ne 0; then\n\t\t      func_append newdeplibs \" $i\"\n\t\t    else\n\t\t      droppeddeps=yes\n\t\t      echo\n\t\t      $ECHO \"*** Warning: dynamic linker does not accept needed library $i.\"\n\t\t      echo \"*** I have the capability to make that library automatically link in when\"\n\t\t      echo \"*** you link to this library.  But I can only do this if you have a\"\n\t\t      echo \"*** shared version of the library, which you do not appear to have\"\n\t\t      echo \"*** because a test_compile did reveal that the linker did not use this one\"\n\t\t      echo \"*** as a dynamic dependency that programs can get resolved with at runtime.\"\n\t\t    fi\n\t\t  fi\n\t\telse\n\t\t  droppeddeps=yes\n\t\t  echo\n\t\t  $ECHO \"*** Warning!  Library $i is needed by this library but I was not able to\"\n\t\t  echo \"*** make it link in!  You will probably need to install it or some\"\n\t\t  echo \"*** library that it depends on before this library will be fully\"\n\t\t  echo \"*** functional.  Installing it before continuing would be even better.\"\n\t\tfi\n\t\t;;\n\t      *)\n\t\tfunc_append newdeplibs \" $i\"\n\t\t;;\n\t      esac\n\t    done\n\t  fi\n\t  ;;\n\tfile_magic*)\n\t  set dummy $deplibs_check_method; shift\n\t  file_magic_regex=`expr \"$deplibs_check_method\" : \"$1 \\(.*\\)\"`\n\t  for a_deplib in $deplibs; do\n\t    case $a_deplib in\n\t    -l*)\n\t      func_stripname -l '' \"$a_deplib\"\n\t      name=$func_stripname_result\n\t      if test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t\tcase \" $predeps $postdeps \" in\n\t\t*\" $a_deplib \"*)\n\t\t  func_append newdeplibs \" $a_deplib\"\n\t\t  a_deplib=\n\t\t  ;;\n\t\tesac\n\t      fi\n\t      if test -n \"$a_deplib\"; then\n\t\tlibname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\tif test -n \"$file_magic_glob\"; then\n\t\t  libnameglob=`func_echo_all \"$libname\" | $SED -e $file_magic_glob`\n\t\telse\n\t\t  libnameglob=$libname\n\t\tfi\n\t\ttest yes = \"$want_nocaseglob\" && nocaseglob=`shopt -p nocaseglob`\n\t\tfor i in $lib_search_path $sys_lib_search_path $shlib_search_path; do\n\t\t  if test yes = \"$want_nocaseglob\"; then\n\t\t    shopt -s nocaseglob\n\t\t    potential_libs=`ls $i/$libnameglob[.-]* 2>/dev/null`\n\t\t    $nocaseglob\n\t\t  else\n\t\t    potential_libs=`ls $i/$libnameglob[.-]* 2>/dev/null`\n\t\t  fi\n\t\t  for potent_lib in $potential_libs; do\n\t\t      # Follow soft links.\n\t\t      if ls -lLd \"$potent_lib\" 2>/dev/null |\n\t\t\t $GREP \" -> \" >/dev/null; then\n\t\t\tcontinue\n\t\t      fi\n\t\t      # The statement above tries to avoid entering an\n\t\t      # endless loop below, in case of cyclic links.\n\t\t      # We might still enter an endless loop, since a link\n\t\t      # loop can be closed while we follow links,\n\t\t      # but so what?\n\t\t      potlib=$potent_lib\n\t\t      while test -h \"$potlib\" 2>/dev/null; do\n\t\t\tpotliblink=`ls -ld $potlib | $SED 's/.* -> //'`\n\t\t\tcase $potliblink in\n\t\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) potlib=$potliblink;;\n\t\t\t*) potlib=`$ECHO \"$potlib\" | $SED 's|[^/]*$||'`\"$potliblink\";;\n\t\t\tesac\n\t\t      done\n\t\t      if eval $file_magic_cmd \\\"\\$potlib\\\" 2>/dev/null |\n\t\t\t $SED -e 10q |\n\t\t\t $EGREP \"$file_magic_regex\" > /dev/null; then\n\t\t\tfunc_append newdeplibs \" $a_deplib\"\n\t\t\ta_deplib=\n\t\t\tbreak 2\n\t\t      fi\n\t\t  done\n\t\tdone\n\t      fi\n\t      if test -n \"$a_deplib\"; then\n\t\tdroppeddeps=yes\n\t\techo\n\t\t$ECHO \"*** Warning: linker path does not have real file for library $a_deplib.\"\n\t\techo \"*** I have the capability to make that library automatically link in when\"\n\t\techo \"*** you link to this library.  But I can only do this if you have a\"\n\t\techo \"*** shared version of the library, which you do not appear to have\"\n\t\techo \"*** because I did check the linker path looking for a file starting\"\n\t\tif test -z \"$potlib\"; then\n\t\t  $ECHO \"*** with $libname but no candidates were found. (...for file magic test)\"\n\t\telse\n\t\t  $ECHO \"*** with $libname and none of the candidates passed a file format test\"\n\t\t  $ECHO \"*** using a file magic. Last file checked: $potlib\"\n\t\tfi\n\t      fi\n\t      ;;\n\t    *)\n\t      # Add a -L argument.\n\t      func_append newdeplibs \" $a_deplib\"\n\t      ;;\n\t    esac\n\t  done # Gone through all deplibs.\n\t  ;;\n\tmatch_pattern*)\n\t  set dummy $deplibs_check_method; shift\n\t  match_pattern_regex=`expr \"$deplibs_check_method\" : \"$1 \\(.*\\)\"`\n\t  for a_deplib in $deplibs; do\n\t    case $a_deplib in\n\t    -l*)\n\t      func_stripname -l '' \"$a_deplib\"\n\t      name=$func_stripname_result\n\t      if test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t\tcase \" $predeps $postdeps \" in\n\t\t*\" $a_deplib \"*)\n\t\t  func_append newdeplibs \" $a_deplib\"\n\t\t  a_deplib=\n\t\t  ;;\n\t\tesac\n\t      fi\n\t      if test -n \"$a_deplib\"; then\n\t\tlibname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\tfor i in $lib_search_path $sys_lib_search_path $shlib_search_path; do\n\t\t  potential_libs=`ls $i/$libname[.-]* 2>/dev/null`\n\t\t  for potent_lib in $potential_libs; do\n\t\t    potlib=$potent_lib # see symlink-check above in file_magic test\n\t\t    if eval \"\\$ECHO \\\"$potent_lib\\\"\" 2>/dev/null | $SED 10q | \\\n\t\t       $EGREP \"$match_pattern_regex\" > /dev/null; then\n\t\t      func_append newdeplibs \" $a_deplib\"\n\t\t      a_deplib=\n\t\t      break 2\n\t\t    fi\n\t\t  done\n\t\tdone\n\t      fi\n\t      if test -n \"$a_deplib\"; then\n\t\tdroppeddeps=yes\n\t\techo\n\t\t$ECHO \"*** Warning: linker path does not have real file for library $a_deplib.\"\n\t\techo \"*** I have the capability to make that library automatically link in when\"\n\t\techo \"*** you link to this library.  But I can only do this if you have a\"\n\t\techo \"*** shared version of the library, which you do not appear to have\"\n\t\techo \"*** because I did check the linker path looking for a file starting\"\n\t\tif test -z \"$potlib\"; then\n\t\t  $ECHO \"*** with $libname but no candidates were found. (...for regex pattern test)\"\n\t\telse\n\t\t  $ECHO \"*** with $libname and none of the candidates passed a file format test\"\n\t\t  $ECHO \"*** using a regex pattern. Last file checked: $potlib\"\n\t\tfi\n\t      fi\n\t      ;;\n\t    *)\n\t      # Add a -L argument.\n\t      func_append newdeplibs \" $a_deplib\"\n\t      ;;\n\t    esac\n\t  done # Gone through all deplibs.\n\t  ;;\n\tnone | unknown | *)\n\t  newdeplibs=\n\t  tmp_deplibs=`$ECHO \" $deplibs\" | $SED 's/ -lc$//; s/ -[LR][^ ]*//g'`\n\t  if test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t    for i in $predeps $postdeps; do\n\t      # can't use Xsed below, because $i might contain '/'\n\t      tmp_deplibs=`$ECHO \" $tmp_deplibs\" | $SED \"s|$i||\"`\n\t    done\n\t  fi\n\t  case $tmp_deplibs in\n\t  *[!\\\t\\ ]*)\n\t    echo\n\t    if test none = \"$deplibs_check_method\"; then\n\t      echo \"*** Warning: inter-library dependencies are not supported in this platform.\"\n\t    else\n\t      echo \"*** Warning: inter-library dependencies are not known to be supported.\"\n\t    fi\n\t    echo \"*** All declared inter-library dependencies are being dropped.\"\n\t    droppeddeps=yes\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n\tversuffix=$versuffix_save\n\tmajor=$major_save\n\trelease=$release_save\n\tlibname=$libname_save\n\tname=$name_save\n\n\tcase $host in\n\t*-*-rhapsody* | *-*-darwin1.[012])\n\t  # On Rhapsody replace the C library with the System framework\n\t  newdeplibs=`$ECHO \" $newdeplibs\" | $SED 's/ -lc / System.ltframework /'`\n\t  ;;\n\tesac\n\n\tif test yes = \"$droppeddeps\"; then\n\t  if test yes = \"$module\"; then\n\t    echo\n\t    echo \"*** Warning: libtool could not satisfy all declared inter-library\"\n\t    $ECHO \"*** dependencies of module $libname.  Therefore, libtool will create\"\n\t    echo \"*** a static module, that should work as long as the dlopening\"\n\t    echo \"*** application is linked with the -dlopen flag.\"\n\t    if test -z \"$global_symbol_pipe\"; then\n\t      echo\n\t      echo \"*** However, this would only work if libtool was able to extract symbol\"\n\t      echo \"*** lists from a program, using 'nm' or equivalent, but libtool could\"\n\t      echo \"*** not find such a program.  So, this module is probably useless.\"\n\t      echo \"*** 'nm' from GNU binutils and a full rebuild may help.\"\n\t    fi\n\t    if test no = \"$build_old_libs\"; then\n\t      oldlibs=$output_objdir/$libname.$libext\n\t      build_libtool_libs=module\n\t      build_old_libs=yes\n\t    else\n\t      build_libtool_libs=no\n\t    fi\n\t  else\n\t    echo \"*** The inter-library dependencies that have been dropped here will be\"\n\t    echo \"*** automatically added whenever a program is linked with this library\"\n\t    echo \"*** or is declared to -dlopen it.\"\n\n\t    if test no = \"$allow_undefined\"; then\n\t      echo\n\t      echo \"*** Since this library must not contain undefined symbols,\"\n\t      echo \"*** because either the platform does not support them or\"\n\t      echo \"*** it was explicitly requested with -no-undefined,\"\n\t      echo \"*** libtool will only create a static version of it.\"\n\t      if test no = \"$build_old_libs\"; then\n\t\toldlibs=$output_objdir/$libname.$libext\n\t\tbuild_libtool_libs=module\n\t\tbuild_old_libs=yes\n\t      else\n\t\tbuild_libtool_libs=no\n\t      fi\n\t    fi\n\t  fi\n\tfi\n\t# Done checking deplibs!\n\tdeplibs=$newdeplibs\n      fi\n      # Time to change all our \"foo.ltframework\" stuff back to \"-framework foo\"\n      case $host in\n\t*-*-darwin*)\n\t  newdeplibs=`$ECHO \" $newdeplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t  new_inherited_linker_flags=`$ECHO \" $new_inherited_linker_flags\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t  deplibs=`$ECHO \" $deplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t  ;;\n      esac\n\n      # move library search paths that coincide with paths to not yet\n      # installed libraries to the beginning of the library search list\n      new_libs=\n      for path in $notinst_path; do\n\tcase \" $new_libs \" in\n\t*\" -L$path/$objdir \"*) ;;\n\t*)\n\t  case \" $deplibs \" in\n\t  *\" -L$path/$objdir \"*)\n\t    func_append new_libs \" -L$path/$objdir\" ;;\n\t  esac\n\t  ;;\n\tesac\n      done\n      for deplib in $deplibs; do\n\tcase $deplib in\n\t-L*)\n\t  case \" $new_libs \" in\n\t  *\" $deplib \"*) ;;\n\t  *) func_append new_libs \" $deplib\" ;;\n\t  esac\n\t  ;;\n\t*) func_append new_libs \" $deplib\" ;;\n\tesac\n      done\n      deplibs=$new_libs\n\n      # All the library-specific variables (install_libdir is set above).\n      library_names=\n      old_library=\n      dlname=\n\n      # Test again, we may have decided not to build it any more\n      if test yes = \"$build_libtool_libs\"; then\n\t# Remove $wl instances when linking with ld.\n\t# FIXME: should test the right _cmds variable.\n\tcase $archive_cmds in\n\t  *\\$LD\\ *) wl= ;;\n        esac\n\tif test yes = \"$hardcode_into_libs\"; then\n\t  # Hardcode the library paths\n\t  hardcode_libdirs=\n\t  dep_rpath=\n\t  rpath=$finalize_rpath\n\t  test relink = \"$opt_mode\" || rpath=$compile_rpath$rpath\n\t  for libdir in $rpath; do\n\t    if test -n \"$hardcode_libdir_flag_spec\"; then\n\t      if test -n \"$hardcode_libdir_separator\"; then\n\t\tfunc_replace_sysroot \"$libdir\"\n\t\tlibdir=$func_replace_sysroot_result\n\t\tif test -z \"$hardcode_libdirs\"; then\n\t\t  hardcode_libdirs=$libdir\n\t\telse\n\t\t  # Just accumulate the unique libdirs.\n\t\t  case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in\n\t\t  *\"$hardcode_libdir_separator$libdir$hardcode_libdir_separator\"*)\n\t\t    ;;\n\t\t  *)\n\t\t    func_append hardcode_libdirs \"$hardcode_libdir_separator$libdir\"\n\t\t    ;;\n\t\t  esac\n\t\tfi\n\t      else\n\t\teval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\t\tfunc_append dep_rpath \" $flag\"\n\t      fi\n\t    elif test -n \"$runpath_var\"; then\n\t      case \"$perm_rpath \" in\n\t      *\" $libdir \"*) ;;\n\t      *) func_append perm_rpath \" $libdir\" ;;\n\t      esac\n\t    fi\n\t  done\n\t  # Substitute the hardcoded libdirs into the rpath.\n\t  if test -n \"$hardcode_libdir_separator\" &&\n\t     test -n \"$hardcode_libdirs\"; then\n\t    libdir=$hardcode_libdirs\n\t    eval \"dep_rpath=\\\"$hardcode_libdir_flag_spec\\\"\"\n\t  fi\n\t  if test -n \"$runpath_var\" && test -n \"$perm_rpath\"; then\n\t    # We should set the runpath_var.\n\t    rpath=\n\t    for dir in $perm_rpath; do\n\t      func_append rpath \"$dir:\"\n\t    done\n\t    eval \"$runpath_var='$rpath\\$$runpath_var'; export $runpath_var\"\n\t  fi\n\t  test -n \"$dep_rpath\" && deplibs=\"$dep_rpath $deplibs\"\n\tfi\n\n\tshlibpath=$finalize_shlibpath\n\ttest relink = \"$opt_mode\" || shlibpath=$compile_shlibpath$shlibpath\n\tif test -n \"$shlibpath\"; then\n\t  eval \"$shlibpath_var='$shlibpath\\$$shlibpath_var'; export $shlibpath_var\"\n\tfi\n\n\t# Get the real and link names of the library.\n\teval shared_ext=\\\"$shrext_cmds\\\"\n\teval library_names=\\\"$library_names_spec\\\"\n\tset dummy $library_names\n\tshift\n\trealname=$1\n\tshift\n\n\tif test -n \"$soname_spec\"; then\n\t  eval soname=\\\"$soname_spec\\\"\n\telse\n\t  soname=$realname\n\tfi\n\tif test -z \"$dlname\"; then\n\t  dlname=$soname\n\tfi\n\n\tlib=$output_objdir/$realname\n\tlinknames=\n\tfor link\n\tdo\n\t  func_append linknames \" $link\"\n\tdone\n\n\t# Use standard objects if they are pic\n\ttest -z \"$pic_flag\" && libobjs=`$ECHO \"$libobjs\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n\ttest \"X$libobjs\" = \"X \" && libobjs=\n\n\tdelfiles=\n\tif test -n \"$export_symbols\" && test -n \"$include_expsyms\"; then\n\t  $opt_dry_run || cp \"$export_symbols\" \"$output_objdir/$libname.uexp\"\n\t  export_symbols=$output_objdir/$libname.uexp\n\t  func_append delfiles \" $export_symbols\"\n\tfi\n\n\torig_export_symbols=\n\tcase $host_os in\n\tcygwin* | mingw* | cegcc*)\n\t  if test -n \"$export_symbols\" && test -z \"$export_symbols_regex\"; then\n\t    # exporting using user supplied symfile\n\t    func_dll_def_p \"$export_symbols\" || {\n\t      # and it's NOT already a .def file. Must figure out\n\t      # which of the given symbols are data symbols and tag\n\t      # them as such. So, trigger use of export_symbols_cmds.\n\t      # export_symbols gets reassigned inside the \"prepare\n\t      # the list of exported symbols\" if statement, so the\n\t      # include_expsyms logic still works.\n\t      orig_export_symbols=$export_symbols\n\t      export_symbols=\n\t      always_export_symbols=yes\n\t    }\n\t  fi\n\t  ;;\n\tesac\n\n\t# Prepare the list of exported symbols\n\tif test -z \"$export_symbols\"; then\n\t  if test yes = \"$always_export_symbols\" || test -n \"$export_symbols_regex\"; then\n\t    func_verbose \"generating symbol list for '$libname.la'\"\n\t    export_symbols=$output_objdir/$libname.exp\n\t    $opt_dry_run || $RM $export_symbols\n\t    cmds=$export_symbols_cmds\n\t    save_ifs=$IFS; IFS='~'\n\t    for cmd1 in $cmds; do\n\t      IFS=$save_ifs\n\t      # Take the normal branch if the nm_file_list_spec branch\n\t      # doesn't work or if tool conversion is not needed.\n\t      case $nm_file_list_spec~$to_tool_file_cmd in\n\t\t*~func_convert_file_noop | *~func_convert_file_msys_to_w32 | ~*)\n\t\t  try_normal_branch=yes\n\t\t  eval cmd=\\\"$cmd1\\\"\n\t\t  func_len \" $cmd\"\n\t\t  len=$func_len_result\n\t\t  ;;\n\t\t*)\n\t\t  try_normal_branch=no\n\t\t  ;;\n\t      esac\n\t      if test yes = \"$try_normal_branch\" \\\n\t\t && { test \"$len\" -lt \"$max_cmd_len\" \\\n\t\t      || test \"$max_cmd_len\" -le -1; }\n\t      then\n\t\tfunc_show_eval \"$cmd\" 'exit $?'\n\t\tskipped_export=false\n\t      elif test -n \"$nm_file_list_spec\"; then\n\t\tfunc_basename \"$output\"\n\t\toutput_la=$func_basename_result\n\t\tsave_libobjs=$libobjs\n\t\tsave_output=$output\n\t\toutput=$output_objdir/$output_la.nm\n\t\tfunc_to_tool_file \"$output\"\n\t\tlibobjs=$nm_file_list_spec$func_to_tool_file_result\n\t\tfunc_append delfiles \" $output\"\n\t\tfunc_verbose \"creating $NM input file list: $output\"\n\t\tfor obj in $save_libobjs; do\n\t\t  func_to_tool_file \"$obj\"\n\t\t  $ECHO \"$func_to_tool_file_result\"\n\t\tdone > \"$output\"\n\t\teval cmd=\\\"$cmd1\\\"\n\t\tfunc_show_eval \"$cmd\" 'exit $?'\n\t\toutput=$save_output\n\t\tlibobjs=$save_libobjs\n\t\tskipped_export=false\n\t      else\n\t\t# The command line is too long to execute in one step.\n\t\tfunc_verbose \"using reloadable object file for export list...\"\n\t\tskipped_export=:\n\t\t# Break out early, otherwise skipped_export may be\n\t\t# set to false by a later but shorter cmd.\n\t\tbreak\n\t      fi\n\t    done\n\t    IFS=$save_ifs\n\t    if test -n \"$export_symbols_regex\" && test : != \"$skipped_export\"; then\n\t      func_show_eval '$EGREP -e \"$export_symbols_regex\" \"$export_symbols\" > \"${export_symbols}T\"'\n\t      func_show_eval '$MV \"${export_symbols}T\" \"$export_symbols\"'\n\t    fi\n\t  fi\n\tfi\n\n\tif test -n \"$export_symbols\" && test -n \"$include_expsyms\"; then\n\t  tmp_export_symbols=$export_symbols\n\t  test -n \"$orig_export_symbols\" && tmp_export_symbols=$orig_export_symbols\n\t  $opt_dry_run || eval '$ECHO \"$include_expsyms\" | $SP2NL >> \"$tmp_export_symbols\"'\n\tfi\n\n\tif test : != \"$skipped_export\" && test -n \"$orig_export_symbols\"; then\n\t  # The given exports_symbols file has to be filtered, so filter it.\n\t  func_verbose \"filter symbol list for '$libname.la' to tag DATA exports\"\n\t  # FIXME: $output_objdir/$libname.filter potentially contains lots of\n\t  # 's' commands, which not all seds can handle. GNU sed should be fine\n\t  # though. Also, the filter scales superlinearly with the number of\n\t  # global variables. join(1) would be nice here, but unfortunately\n\t  # isn't a blessed tool.\n\t  $opt_dry_run || $SED -e '/[ ,]DATA/!d;s,\\(.*\\)\\([ \\,].*\\),s|^\\1$|\\1\\2|,' < $export_symbols > $output_objdir/$libname.filter\n\t  func_append delfiles \" $export_symbols $output_objdir/$libname.filter\"\n\t  export_symbols=$output_objdir/$libname.def\n\t  $opt_dry_run || $SED -f $output_objdir/$libname.filter < $orig_export_symbols > $export_symbols\n\tfi\n\n\ttmp_deplibs=\n\tfor test_deplib in $deplibs; do\n\t  case \" $convenience \" in\n\t  *\" $test_deplib \"*) ;;\n\t  *)\n\t    func_append tmp_deplibs \" $test_deplib\"\n\t    ;;\n\t  esac\n\tdone\n\tdeplibs=$tmp_deplibs\n\n\tif test -n \"$convenience\"; then\n\t  if test -n \"$whole_archive_flag_spec\" &&\n\t    test yes = \"$compiler_needs_object\" &&\n\t    test -z \"$libobjs\"; then\n\t    # extract the archives, so we have objects to list.\n\t    # TODO: could optimize this to just extract one archive.\n\t    whole_archive_flag_spec=\n\t  fi\n\t  if test -n \"$whole_archive_flag_spec\"; then\n\t    save_libobjs=$libobjs\n\t    eval libobjs=\\\"\\$libobjs $whole_archive_flag_spec\\\"\n\t    test \"X$libobjs\" = \"X \" && libobjs=\n\t  else\n\t    gentop=$output_objdir/${outputname}x\n\t    func_append generated \" $gentop\"\n\n\t    func_extract_archives $gentop $convenience\n\t    func_append libobjs \" $func_extract_archives_result\"\n\t    test \"X$libobjs\" = \"X \" && libobjs=\n\t  fi\n\tfi\n\n\tif test yes = \"$thread_safe\" && test -n \"$thread_safe_flag_spec\"; then\n\t  eval flag=\\\"$thread_safe_flag_spec\\\"\n\t  func_append linker_flags \" $flag\"\n\tfi\n\n\t# Make a backup of the uninstalled library when relinking\n\tif test relink = \"$opt_mode\"; then\n\t  $opt_dry_run || eval '(cd $output_objdir && $RM ${realname}U && $MV $realname ${realname}U)' || exit $?\n\tfi\n\n\t# Do each of the archive commands.\n\tif test yes = \"$module\" && test -n \"$module_cmds\"; then\n\t  if test -n \"$export_symbols\" && test -n \"$module_expsym_cmds\"; then\n\t    eval test_cmds=\\\"$module_expsym_cmds\\\"\n\t    cmds=$module_expsym_cmds\n\t  else\n\t    eval test_cmds=\\\"$module_cmds\\\"\n\t    cmds=$module_cmds\n\t  fi\n\telse\n\t  if test -n \"$export_symbols\" && test -n \"$archive_expsym_cmds\"; then\n\t    eval test_cmds=\\\"$archive_expsym_cmds\\\"\n\t    cmds=$archive_expsym_cmds\n\t  else\n\t    eval test_cmds=\\\"$archive_cmds\\\"\n\t    cmds=$archive_cmds\n\t  fi\n\tfi\n\n\tif test : != \"$skipped_export\" &&\n\t   func_len \" $test_cmds\" &&\n\t   len=$func_len_result &&\n\t   test \"$len\" -lt \"$max_cmd_len\" || test \"$max_cmd_len\" -le -1; then\n\t  :\n\telse\n\t  # The command line is too long to link in one step, link piecewise\n\t  # or, if using GNU ld and skipped_export is not :, use a linker\n\t  # script.\n\n\t  # Save the value of $output and $libobjs because we want to\n\t  # use them later.  If we have whole_archive_flag_spec, we\n\t  # want to use save_libobjs as it was before\n\t  # whole_archive_flag_spec was expanded, because we can't\n\t  # assume the linker understands whole_archive_flag_spec.\n\t  # This may have to be revisited, in case too many\n\t  # convenience libraries get linked in and end up exceeding\n\t  # the spec.\n\t  if test -z \"$convenience\" || test -z \"$whole_archive_flag_spec\"; then\n\t    save_libobjs=$libobjs\n\t  fi\n\t  save_output=$output\n\t  func_basename \"$output\"\n\t  output_la=$func_basename_result\n\n\t  # Clear the reloadable object creation command queue and\n\t  # initialize k to one.\n\t  test_cmds=\n\t  concat_cmds=\n\t  objlist=\n\t  last_robj=\n\t  k=1\n\n\t  if test -n \"$save_libobjs\" && test : != \"$skipped_export\" && test yes = \"$with_gnu_ld\"; then\n\t    output=$output_objdir/$output_la.lnkscript\n\t    func_verbose \"creating GNU ld script: $output\"\n\t    echo 'INPUT (' > $output\n\t    for obj in $save_libobjs\n\t    do\n\t      func_to_tool_file \"$obj\"\n\t      $ECHO \"$func_to_tool_file_result\" >> $output\n\t    done\n\t    echo ')' >> $output\n\t    func_append delfiles \" $output\"\n\t    func_to_tool_file \"$output\"\n\t    output=$func_to_tool_file_result\n\t  elif test -n \"$save_libobjs\" && test : != \"$skipped_export\" && test -n \"$file_list_spec\"; then\n\t    output=$output_objdir/$output_la.lnk\n\t    func_verbose \"creating linker input file list: $output\"\n\t    : > $output\n\t    set x $save_libobjs\n\t    shift\n\t    firstobj=\n\t    if test yes = \"$compiler_needs_object\"; then\n\t      firstobj=\"$1 \"\n\t      shift\n\t    fi\n\t    for obj\n\t    do\n\t      func_to_tool_file \"$obj\"\n\t      $ECHO \"$func_to_tool_file_result\" >> $output\n\t    done\n\t    func_append delfiles \" $output\"\n\t    func_to_tool_file \"$output\"\n\t    output=$firstobj\\\"$file_list_spec$func_to_tool_file_result\\\"\n\t  else\n\t    if test -n \"$save_libobjs\"; then\n\t      func_verbose \"creating reloadable object files...\"\n\t      output=$output_objdir/$output_la-$k.$objext\n\t      eval test_cmds=\\\"$reload_cmds\\\"\n\t      func_len \" $test_cmds\"\n\t      len0=$func_len_result\n\t      len=$len0\n\n\t      # Loop over the list of objects to be linked.\n\t      for obj in $save_libobjs\n\t      do\n\t\tfunc_len \" $obj\"\n\t\tfunc_arith $len + $func_len_result\n\t\tlen=$func_arith_result\n\t\tif test -z \"$objlist\" ||\n\t\t   test \"$len\" -lt \"$max_cmd_len\"; then\n\t\t  func_append objlist \" $obj\"\n\t\telse\n\t\t  # The command $test_cmds is almost too long, add a\n\t\t  # command to the queue.\n\t\t  if test 1 -eq \"$k\"; then\n\t\t    # The first file doesn't have a previous command to add.\n\t\t    reload_objs=$objlist\n\t\t    eval concat_cmds=\\\"$reload_cmds\\\"\n\t\t  else\n\t\t    # All subsequent reloadable object files will link in\n\t\t    # the last one created.\n\t\t    reload_objs=\"$objlist $last_robj\"\n\t\t    eval concat_cmds=\\\"\\$concat_cmds~$reload_cmds~\\$RM $last_robj\\\"\n\t\t  fi\n\t\t  last_robj=$output_objdir/$output_la-$k.$objext\n\t\t  func_arith $k + 1\n\t\t  k=$func_arith_result\n\t\t  output=$output_objdir/$output_la-$k.$objext\n\t\t  objlist=\" $obj\"\n\t\t  func_len \" $last_robj\"\n\t\t  func_arith $len0 + $func_len_result\n\t\t  len=$func_arith_result\n\t\tfi\n\t      done\n\t      # Handle the remaining objects by creating one last\n\t      # reloadable object file.  All subsequent reloadable object\n\t      # files will link in the last one created.\n\t      test -z \"$concat_cmds\" || concat_cmds=$concat_cmds~\n\t      reload_objs=\"$objlist $last_robj\"\n\t      eval concat_cmds=\\\"\\$concat_cmds$reload_cmds\\\"\n\t      if test -n \"$last_robj\"; then\n\t        eval concat_cmds=\\\"\\$concat_cmds~\\$RM $last_robj\\\"\n\t      fi\n\t      func_append delfiles \" $output\"\n\n\t    else\n\t      output=\n\t    fi\n\n\t    ${skipped_export-false} && {\n\t      func_verbose \"generating symbol list for '$libname.la'\"\n\t      export_symbols=$output_objdir/$libname.exp\n\t      $opt_dry_run || $RM $export_symbols\n\t      libobjs=$output\n\t      # Append the command to create the export file.\n\t      test -z \"$concat_cmds\" || concat_cmds=$concat_cmds~\n\t      eval concat_cmds=\\\"\\$concat_cmds$export_symbols_cmds\\\"\n\t      if test -n \"$last_robj\"; then\n\t\teval concat_cmds=\\\"\\$concat_cmds~\\$RM $last_robj\\\"\n\t      fi\n\t    }\n\n\t    test -n \"$save_libobjs\" &&\n\t      func_verbose \"creating a temporary reloadable object file: $output\"\n\n\t    # Loop through the commands generated above and execute them.\n\t    save_ifs=$IFS; IFS='~'\n\t    for cmd in $concat_cmds; do\n\t      IFS=$save_ifs\n\t      $opt_quiet || {\n\t\t  func_quote_for_expand \"$cmd\"\n\t\t  eval \"func_echo $func_quote_for_expand_result\"\n\t      }\n\t      $opt_dry_run || eval \"$cmd\" || {\n\t\tlt_exit=$?\n\n\t\t# Restore the uninstalled library and exit\n\t\tif test relink = \"$opt_mode\"; then\n\t\t  ( cd \"$output_objdir\" && \\\n\t\t    $RM \"${realname}T\" && \\\n\t\t    $MV \"${realname}U\" \"$realname\" )\n\t\tfi\n\n\t\texit $lt_exit\n\t      }\n\t    done\n\t    IFS=$save_ifs\n\n\t    if test -n \"$export_symbols_regex\" && ${skipped_export-false}; then\n\t      func_show_eval '$EGREP -e \"$export_symbols_regex\" \"$export_symbols\" > \"${export_symbols}T\"'\n\t      func_show_eval '$MV \"${export_symbols}T\" \"$export_symbols\"'\n\t    fi\n\t  fi\n\n          ${skipped_export-false} && {\n\t    if test -n \"$export_symbols\" && test -n \"$include_expsyms\"; then\n\t      tmp_export_symbols=$export_symbols\n\t      test -n \"$orig_export_symbols\" && tmp_export_symbols=$orig_export_symbols\n\t      $opt_dry_run || eval '$ECHO \"$include_expsyms\" | $SP2NL >> \"$tmp_export_symbols\"'\n\t    fi\n\n\t    if test -n \"$orig_export_symbols\"; then\n\t      # The given exports_symbols file has to be filtered, so filter it.\n\t      func_verbose \"filter symbol list for '$libname.la' to tag DATA exports\"\n\t      # FIXME: $output_objdir/$libname.filter potentially contains lots of\n\t      # 's' commands, which not all seds can handle. GNU sed should be fine\n\t      # though. Also, the filter scales superlinearly with the number of\n\t      # global variables. join(1) would be nice here, but unfortunately\n\t      # isn't a blessed tool.\n\t      $opt_dry_run || $SED -e '/[ ,]DATA/!d;s,\\(.*\\)\\([ \\,].*\\),s|^\\1$|\\1\\2|,' < $export_symbols > $output_objdir/$libname.filter\n\t      func_append delfiles \" $export_symbols $output_objdir/$libname.filter\"\n\t      export_symbols=$output_objdir/$libname.def\n\t      $opt_dry_run || $SED -f $output_objdir/$libname.filter < $orig_export_symbols > $export_symbols\n\t    fi\n\t  }\n\n\t  libobjs=$output\n\t  # Restore the value of output.\n\t  output=$save_output\n\n\t  if test -n \"$convenience\" && test -n \"$whole_archive_flag_spec\"; then\n\t    eval libobjs=\\\"\\$libobjs $whole_archive_flag_spec\\\"\n\t    test \"X$libobjs\" = \"X \" && libobjs=\n\t  fi\n\t  # Expand the library linking commands again to reset the\n\t  # value of $libobjs for piecewise linking.\n\n\t  # Do each of the archive commands.\n\t  if test yes = \"$module\" && test -n \"$module_cmds\"; then\n\t    if test -n \"$export_symbols\" && test -n \"$module_expsym_cmds\"; then\n\t      cmds=$module_expsym_cmds\n\t    else\n\t      cmds=$module_cmds\n\t    fi\n\t  else\n\t    if test -n \"$export_symbols\" && test -n \"$archive_expsym_cmds\"; then\n\t      cmds=$archive_expsym_cmds\n\t    else\n\t      cmds=$archive_cmds\n\t    fi\n\t  fi\n\tfi\n\n\tif test -n \"$delfiles\"; then\n\t  # Append the command to remove temporary files to $cmds.\n\t  eval cmds=\\\"\\$cmds~\\$RM $delfiles\\\"\n\tfi\n\n\t# Add any objects from preloaded convenience libraries\n\tif test -n \"$dlprefiles\"; then\n\t  gentop=$output_objdir/${outputname}x\n\t  func_append generated \" $gentop\"\n\n\t  func_extract_archives $gentop $dlprefiles\n\t  func_append libobjs \" $func_extract_archives_result\"\n\t  test \"X$libobjs\" = \"X \" && libobjs=\n\tfi\n\n\tsave_ifs=$IFS; IFS='~'\n\tfor cmd in $cmds; do\n\t  IFS=$sp$nl\n\t  eval cmd=\\\"$cmd\\\"\n\t  IFS=$save_ifs\n\t  $opt_quiet || {\n\t    func_quote_for_expand \"$cmd\"\n\t    eval \"func_echo $func_quote_for_expand_result\"\n\t  }\n\t  $opt_dry_run || eval \"$cmd\" || {\n\t    lt_exit=$?\n\n\t    # Restore the uninstalled library and exit\n\t    if test relink = \"$opt_mode\"; then\n\t      ( cd \"$output_objdir\" && \\\n\t        $RM \"${realname}T\" && \\\n\t\t$MV \"${realname}U\" \"$realname\" )\n\t    fi\n\n\t    exit $lt_exit\n\t  }\n\tdone\n\tIFS=$save_ifs\n\n\t# Restore the uninstalled library and exit\n\tif test relink = \"$opt_mode\"; then\n\t  $opt_dry_run || eval '(cd $output_objdir && $RM ${realname}T && $MV $realname ${realname}T && $MV ${realname}U $realname)' || exit $?\n\n\t  if test -n \"$convenience\"; then\n\t    if test -z \"$whole_archive_flag_spec\"; then\n\t      func_show_eval '${RM}r \"$gentop\"'\n\t    fi\n\t  fi\n\n\t  exit $EXIT_SUCCESS\n\tfi\n\n\t# Create links to the real library.\n\tfor linkname in $linknames; do\n\t  if test \"$realname\" != \"$linkname\"; then\n\t    func_show_eval '(cd \"$output_objdir\" && $RM \"$linkname\" && $LN_S \"$realname\" \"$linkname\")' 'exit $?'\n\t  fi\n\tdone\n\n\t# If -module or -export-dynamic was specified, set the dlname.\n\tif test yes = \"$module\" || test yes = \"$export_dynamic\"; then\n\t  # On all known operating systems, these are identical.\n\t  dlname=$soname\n\tfi\n      fi\n      ;;\n\n    obj)\n      if test -n \"$dlfiles$dlprefiles\" || test no != \"$dlself\"; then\n\tfunc_warning \"'-dlopen' is ignored for objects\"\n      fi\n\n      case \" $deplibs\" in\n      *\\ -l* | *\\ -L*)\n\tfunc_warning \"'-l' and '-L' are ignored for objects\" ;;\n      esac\n\n      test -n \"$rpath\" && \\\n\tfunc_warning \"'-rpath' is ignored for objects\"\n\n      test -n \"$xrpath\" && \\\n\tfunc_warning \"'-R' is ignored for objects\"\n\n      test -n \"$vinfo\" && \\\n\tfunc_warning \"'-version-info' is ignored for objects\"\n\n      test -n \"$release\" && \\\n\tfunc_warning \"'-release' is ignored for objects\"\n\n      case $output in\n      *.lo)\n\ttest -n \"$objs$old_deplibs\" && \\\n\t  func_fatal_error \"cannot build library object '$output' from non-libtool objects\"\n\n\tlibobj=$output\n\tfunc_lo2o \"$libobj\"\n\tobj=$func_lo2o_result\n\t;;\n      *)\n\tlibobj=\n\tobj=$output\n\t;;\n      esac\n\n      # Delete the old objects.\n      $opt_dry_run || $RM $obj $libobj\n\n      # Objects from convenience libraries.  This assumes\n      # single-version convenience libraries.  Whenever we create\n      # different ones for PIC/non-PIC, this we'll have to duplicate\n      # the extraction.\n      reload_conv_objs=\n      gentop=\n      # if reload_cmds runs $LD directly, get rid of -Wl from\n      # whole_archive_flag_spec and hope we can get by with turning comma\n      # into space.\n      case $reload_cmds in\n        *\\$LD[\\ \\$]*) wl= ;;\n      esac\n      if test -n \"$convenience\"; then\n\tif test -n \"$whole_archive_flag_spec\"; then\n\t  eval tmp_whole_archive_flags=\\\"$whole_archive_flag_spec\\\"\n\t  test -n \"$wl\" || tmp_whole_archive_flags=`$ECHO \"$tmp_whole_archive_flags\" | $SED 's|,| |g'`\n\t  reload_conv_objs=$reload_objs\\ $tmp_whole_archive_flags\n\telse\n\t  gentop=$output_objdir/${obj}x\n\t  func_append generated \" $gentop\"\n\n\t  func_extract_archives $gentop $convenience\n\t  reload_conv_objs=\"$reload_objs $func_extract_archives_result\"\n\tfi\n      fi\n\n      # If we're not building shared, we need to use non_pic_objs\n      test yes = \"$build_libtool_libs\" || libobjs=$non_pic_objects\n\n      # Create the old-style object.\n      reload_objs=$objs$old_deplibs' '`$ECHO \"$libobjs\" | $SP2NL | $SED \"/\\.$libext$/d; /\\.lib$/d; $lo2o\" | $NL2SP`' '$reload_conv_objs\n\n      output=$obj\n      func_execute_cmds \"$reload_cmds\" 'exit $?'\n\n      # Exit if we aren't doing a library object file.\n      if test -z \"$libobj\"; then\n\tif test -n \"$gentop\"; then\n\t  func_show_eval '${RM}r \"$gentop\"'\n\tfi\n\n\texit $EXIT_SUCCESS\n      fi\n\n      test yes = \"$build_libtool_libs\" || {\n\tif test -n \"$gentop\"; then\n\t  func_show_eval '${RM}r \"$gentop\"'\n\tfi\n\n\t# Create an invalid libtool object if no PIC, so that we don't\n\t# accidentally link it into a program.\n\t# $show \"echo timestamp > $libobj\"\n\t# $opt_dry_run || eval \"echo timestamp > $libobj\" || exit $?\n\texit $EXIT_SUCCESS\n      }\n\n      if test -n \"$pic_flag\" || test default != \"$pic_mode\"; then\n\t# Only do commands if we really have different PIC objects.\n\treload_objs=\"$libobjs $reload_conv_objs\"\n\toutput=$libobj\n\tfunc_execute_cmds \"$reload_cmds\" 'exit $?'\n      fi\n\n      if test -n \"$gentop\"; then\n\tfunc_show_eval '${RM}r \"$gentop\"'\n      fi\n\n      exit $EXIT_SUCCESS\n      ;;\n\n    prog)\n      case $host in\n\t*cygwin*) func_stripname '' '.exe' \"$output\"\n\t          output=$func_stripname_result.exe;;\n      esac\n      test -n \"$vinfo\" && \\\n\tfunc_warning \"'-version-info' is ignored for programs\"\n\n      test -n \"$release\" && \\\n\tfunc_warning \"'-release' is ignored for programs\"\n\n      $preload \\\n\t&& test unknown,unknown,unknown = \"$dlopen_support,$dlopen_self,$dlopen_self_static\" \\\n\t&& func_warning \"'LT_INIT([dlopen])' not used. Assuming no dlopen support.\"\n\n      case $host in\n      *-*-rhapsody* | *-*-darwin1.[012])\n\t# On Rhapsody replace the C library is the System framework\n\tcompile_deplibs=`$ECHO \" $compile_deplibs\" | $SED 's/ -lc / System.ltframework /'`\n\tfinalize_deplibs=`$ECHO \" $finalize_deplibs\" | $SED 's/ -lc / System.ltframework /'`\n\t;;\n      esac\n\n      case $host in\n      *-*-darwin*)\n\t# Don't allow lazy linking, it breaks C++ global constructors\n\t# But is supposedly fixed on 10.4 or later (yay!).\n\tif test CXX = \"$tagname\"; then\n\t  case ${MACOSX_DEPLOYMENT_TARGET-10.0} in\n\t    10.[0123])\n\t      func_append compile_command \" $wl-bind_at_load\"\n\t      func_append finalize_command \" $wl-bind_at_load\"\n\t    ;;\n\t  esac\n\tfi\n\t# Time to change all our \"foo.ltframework\" stuff back to \"-framework foo\"\n\tcompile_deplibs=`$ECHO \" $compile_deplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\tfinalize_deplibs=`$ECHO \" $finalize_deplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t;;\n      esac\n\n\n      # move library search paths that coincide with paths to not yet\n      # installed libraries to the beginning of the library search list\n      new_libs=\n      for path in $notinst_path; do\n\tcase \" $new_libs \" in\n\t*\" -L$path/$objdir \"*) ;;\n\t*)\n\t  case \" $compile_deplibs \" in\n\t  *\" -L$path/$objdir \"*)\n\t    func_append new_libs \" -L$path/$objdir\" ;;\n\t  esac\n\t  ;;\n\tesac\n      done\n      for deplib in $compile_deplibs; do\n\tcase $deplib in\n\t-L*)\n\t  case \" $new_libs \" in\n\t  *\" $deplib \"*) ;;\n\t  *) func_append new_libs \" $deplib\" ;;\n\t  esac\n\t  ;;\n\t*) func_append new_libs \" $deplib\" ;;\n\tesac\n      done\n      compile_deplibs=$new_libs\n\n\n      func_append compile_command \" $compile_deplibs\"\n      func_append finalize_command \" $finalize_deplibs\"\n\n      if test -n \"$rpath$xrpath\"; then\n\t# If the user specified any rpath flags, then add them.\n\tfor libdir in $rpath $xrpath; do\n\t  # This is the magic to use -rpath.\n\t  case \"$finalize_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append finalize_rpath \" $libdir\" ;;\n\t  esac\n\tdone\n      fi\n\n      # Now hardcode the library paths\n      rpath=\n      hardcode_libdirs=\n      for libdir in $compile_rpath $finalize_rpath; do\n\tif test -n \"$hardcode_libdir_flag_spec\"; then\n\t  if test -n \"$hardcode_libdir_separator\"; then\n\t    if test -z \"$hardcode_libdirs\"; then\n\t      hardcode_libdirs=$libdir\n\t    else\n\t      # Just accumulate the unique libdirs.\n\t      case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in\n\t      *\"$hardcode_libdir_separator$libdir$hardcode_libdir_separator\"*)\n\t\t;;\n\t      *)\n\t\tfunc_append hardcode_libdirs \"$hardcode_libdir_separator$libdir\"\n\t\t;;\n\t      esac\n\t    fi\n\t  else\n\t    eval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\t    func_append rpath \" $flag\"\n\t  fi\n\telif test -n \"$runpath_var\"; then\n\t  case \"$perm_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append perm_rpath \" $libdir\" ;;\n\t  esac\n\tfi\n\tcase $host in\n\t*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-cegcc*)\n\t  testbindir=`$ECHO \"$libdir\" | $SED -e 's*/lib$*/bin*'`\n\t  case :$dllsearchpath: in\n\t  *\":$libdir:\"*) ;;\n\t  ::) dllsearchpath=$libdir;;\n\t  *) func_append dllsearchpath \":$libdir\";;\n\t  esac\n\t  case :$dllsearchpath: in\n\t  *\":$testbindir:\"*) ;;\n\t  ::) dllsearchpath=$testbindir;;\n\t  *) func_append dllsearchpath \":$testbindir\";;\n\t  esac\n\t  ;;\n\tesac\n      done\n      # Substitute the hardcoded libdirs into the rpath.\n      if test -n \"$hardcode_libdir_separator\" &&\n\t test -n \"$hardcode_libdirs\"; then\n\tlibdir=$hardcode_libdirs\n\teval rpath=\\\" $hardcode_libdir_flag_spec\\\"\n      fi\n      compile_rpath=$rpath\n\n      rpath=\n      hardcode_libdirs=\n      for libdir in $finalize_rpath; do\n\tif test -n \"$hardcode_libdir_flag_spec\"; then\n\t  if test -n \"$hardcode_libdir_separator\"; then\n\t    if test -z \"$hardcode_libdirs\"; then\n\t      hardcode_libdirs=$libdir\n\t    else\n\t      # Just accumulate the unique libdirs.\n\t      case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in\n\t      *\"$hardcode_libdir_separator$libdir$hardcode_libdir_separator\"*)\n\t\t;;\n\t      *)\n\t\tfunc_append hardcode_libdirs \"$hardcode_libdir_separator$libdir\"\n\t\t;;\n\t      esac\n\t    fi\n\t  else\n\t    eval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\t    func_append rpath \" $flag\"\n\t  fi\n\telif test -n \"$runpath_var\"; then\n\t  case \"$finalize_perm_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append finalize_perm_rpath \" $libdir\" ;;\n\t  esac\n\tfi\n      done\n      # Substitute the hardcoded libdirs into the rpath.\n      if test -n \"$hardcode_libdir_separator\" &&\n\t test -n \"$hardcode_libdirs\"; then\n\tlibdir=$hardcode_libdirs\n\teval rpath=\\\" $hardcode_libdir_flag_spec\\\"\n      fi\n      finalize_rpath=$rpath\n\n      if test -n \"$libobjs\" && test yes = \"$build_old_libs\"; then\n\t# Transform all the library objects into standard objects.\n\tcompile_command=`$ECHO \"$compile_command\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n\tfinalize_command=`$ECHO \"$finalize_command\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n      fi\n\n      func_generate_dlsyms \"$outputname\" \"@PROGRAM@\" false\n\n      # template prelinking step\n      if test -n \"$prelink_cmds\"; then\n\tfunc_execute_cmds \"$prelink_cmds\" 'exit $?'\n      fi\n\n      wrappers_required=:\n      case $host in\n      *cegcc* | *mingw32ce*)\n        # Disable wrappers for cegcc and mingw32ce hosts, we are cross compiling anyway.\n        wrappers_required=false\n        ;;\n      *cygwin* | *mingw* )\n        test yes = \"$build_libtool_libs\" || wrappers_required=false\n        ;;\n      *)\n        if test no = \"$need_relink\" || test yes != \"$build_libtool_libs\"; then\n          wrappers_required=false\n        fi\n        ;;\n      esac\n      $wrappers_required || {\n\t# Replace the output file specification.\n\tcompile_command=`$ECHO \"$compile_command\" | $SED 's%@OUTPUT@%'\"$output\"'%g'`\n\tlink_command=$compile_command$compile_rpath\n\n\t# We have no uninstalled library dependencies, so finalize right now.\n\texit_status=0\n\tfunc_show_eval \"$link_command\" 'exit_status=$?'\n\n\tif test -n \"$postlink_cmds\"; then\n\t  func_to_tool_file \"$output\"\n\t  postlink_cmds=`func_echo_all \"$postlink_cmds\" | $SED -e 's%@OUTPUT@%'\"$output\"'%g' -e 's%@TOOL_OUTPUT@%'\"$func_to_tool_file_result\"'%g'`\n\t  func_execute_cmds \"$postlink_cmds\" 'exit $?'\n\tfi\n\n\t# Delete the generated files.\n\tif test -f \"$output_objdir/${outputname}S.$objext\"; then\n\t  func_show_eval '$RM \"$output_objdir/${outputname}S.$objext\"'\n\tfi\n\n\texit $exit_status\n      }\n\n      if test -n \"$compile_shlibpath$finalize_shlibpath\"; then\n\tcompile_command=\"$shlibpath_var=\\\"$compile_shlibpath$finalize_shlibpath\\$$shlibpath_var\\\" $compile_command\"\n      fi\n      if test -n \"$finalize_shlibpath\"; then\n\tfinalize_command=\"$shlibpath_var=\\\"$finalize_shlibpath\\$$shlibpath_var\\\" $finalize_command\"\n      fi\n\n      compile_var=\n      finalize_var=\n      if test -n \"$runpath_var\"; then\n\tif test -n \"$perm_rpath\"; then\n\t  # We should set the runpath_var.\n\t  rpath=\n\t  for dir in $perm_rpath; do\n\t    func_append rpath \"$dir:\"\n\t  done\n\t  compile_var=\"$runpath_var=\\\"$rpath\\$$runpath_var\\\" \"\n\tfi\n\tif test -n \"$finalize_perm_rpath\"; then\n\t  # We should set the runpath_var.\n\t  rpath=\n\t  for dir in $finalize_perm_rpath; do\n\t    func_append rpath \"$dir:\"\n\t  done\n\t  finalize_var=\"$runpath_var=\\\"$rpath\\$$runpath_var\\\" \"\n\tfi\n      fi\n\n      if test yes = \"$no_install\"; then\n\t# We don't need to create a wrapper script.\n\tlink_command=$compile_var$compile_command$compile_rpath\n\t# Replace the output file specification.\n\tlink_command=`$ECHO \"$link_command\" | $SED 's%@OUTPUT@%'\"$output\"'%g'`\n\t# Delete the old output file.\n\t$opt_dry_run || $RM $output\n\t# Link the executable and exit\n\tfunc_show_eval \"$link_command\" 'exit $?'\n\n\tif test -n \"$postlink_cmds\"; then\n\t  func_to_tool_file \"$output\"\n\t  postlink_cmds=`func_echo_all \"$postlink_cmds\" | $SED -e 's%@OUTPUT@%'\"$output\"'%g' -e 's%@TOOL_OUTPUT@%'\"$func_to_tool_file_result\"'%g'`\n\t  func_execute_cmds \"$postlink_cmds\" 'exit $?'\n\tfi\n\n\texit $EXIT_SUCCESS\n      fi\n\n      case $hardcode_action,$fast_install in\n        relink,*)\n\t  # Fast installation is not supported\n\t  link_command=$compile_var$compile_command$compile_rpath\n\t  relink_command=$finalize_var$finalize_command$finalize_rpath\n\n\t  func_warning \"this platform does not like uninstalled shared libraries\"\n\t  func_warning \"'$output' will be relinked during installation\"\n\t  ;;\n        *,yes)\n\t  link_command=$finalize_var$compile_command$finalize_rpath\n\t  relink_command=`$ECHO \"$compile_var$compile_command$compile_rpath\" | $SED 's%@OUTPUT@%\\$progdir/\\$file%g'`\n          ;;\n\t*,no)\n\t  link_command=$compile_var$compile_command$compile_rpath\n\t  relink_command=$finalize_var$finalize_command$finalize_rpath\n          ;;\n\t*,needless)\n\t  link_command=$finalize_var$compile_command$finalize_rpath\n\t  relink_command=\n          ;;\n      esac\n\n      # Replace the output file specification.\n      link_command=`$ECHO \"$link_command\" | $SED 's%@OUTPUT@%'\"$output_objdir/$outputname\"'%g'`\n\n      # Delete the old output files.\n      $opt_dry_run || $RM $output $output_objdir/$outputname $output_objdir/lt-$outputname\n\n      func_show_eval \"$link_command\" 'exit $?'\n\n      if test -n \"$postlink_cmds\"; then\n\tfunc_to_tool_file \"$output_objdir/$outputname\"\n\tpostlink_cmds=`func_echo_all \"$postlink_cmds\" | $SED -e 's%@OUTPUT@%'\"$output_objdir/$outputname\"'%g' -e 's%@TOOL_OUTPUT@%'\"$func_to_tool_file_result\"'%g'`\n\tfunc_execute_cmds \"$postlink_cmds\" 'exit $?'\n      fi\n\n      # Now create the wrapper script.\n      func_verbose \"creating $output\"\n\n      # Quote the relink command for shipping.\n      if test -n \"$relink_command\"; then\n\t# Preserve any variables that may affect compiler behavior\n\tfor var in $variables_saved_for_relink; do\n\t  if eval test -z \\\"\\${$var+set}\\\"; then\n\t    relink_command=\"{ test -z \\\"\\${$var+set}\\\" || $lt_unset $var || { $var=; export $var; }; }; $relink_command\"\n\t  elif eval var_value=\\$$var; test -z \"$var_value\"; then\n\t    relink_command=\"$var=; export $var; $relink_command\"\n\t  else\n\t    func_quote_for_eval \"$var_value\"\n\t    relink_command=\"$var=$func_quote_for_eval_result; export $var; $relink_command\"\n\t  fi\n\tdone\n\trelink_command=\"(cd `pwd`; $relink_command)\"\n\trelink_command=`$ECHO \"$relink_command\" | $SED \"$sed_quote_subst\"`\n      fi\n\n      # Only actually do things if not in dry run mode.\n      $opt_dry_run || {\n\t# win32 will think the script is a binary if it has\n\t# a .exe suffix, so we strip it off here.\n\tcase $output in\n\t  *.exe) func_stripname '' '.exe' \"$output\"\n\t         output=$func_stripname_result ;;\n\tesac\n\t# test for cygwin because mv fails w/o .exe extensions\n\tcase $host in\n\t  *cygwin*)\n\t    exeext=.exe\n\t    func_stripname '' '.exe' \"$outputname\"\n\t    outputname=$func_stripname_result ;;\n\t  *) exeext= ;;\n\tesac\n\tcase $host in\n\t  *cygwin* | *mingw* )\n\t    func_dirname_and_basename \"$output\" \"\" \".\"\n\t    output_name=$func_basename_result\n\t    output_path=$func_dirname_result\n\t    cwrappersource=$output_path/$objdir/lt-$output_name.c\n\t    cwrapper=$output_path/$output_name.exe\n\t    $RM $cwrappersource $cwrapper\n\t    trap \"$RM $cwrappersource $cwrapper; exit $EXIT_FAILURE\" 1 2 15\n\n\t    func_emit_cwrapperexe_src > $cwrappersource\n\n\t    # The wrapper executable is built using the $host compiler,\n\t    # because it contains $host paths and files. If cross-\n\t    # compiling, it, like the target executable, must be\n\t    # executed on the $host or under an emulation environment.\n\t    $opt_dry_run || {\n\t      $LTCC $LTCFLAGS -o $cwrapper $cwrappersource\n\t      $STRIP $cwrapper\n\t    }\n\n\t    # Now, create the wrapper script for func_source use:\n\t    func_ltwrapper_scriptname $cwrapper\n\t    $RM $func_ltwrapper_scriptname_result\n\t    trap \"$RM $func_ltwrapper_scriptname_result; exit $EXIT_FAILURE\" 1 2 15\n\t    $opt_dry_run || {\n\t      # note: this script will not be executed, so do not chmod.\n\t      if test \"x$build\" = \"x$host\"; then\n\t\t$cwrapper --lt-dump-script > $func_ltwrapper_scriptname_result\n\t      else\n\t\tfunc_emit_wrapper no > $func_ltwrapper_scriptname_result\n\t      fi\n\t    }\n\t  ;;\n\t  * )\n\t    $RM $output\n\t    trap \"$RM $output; exit $EXIT_FAILURE\" 1 2 15\n\n\t    func_emit_wrapper no > $output\n\t    chmod +x $output\n\t  ;;\n\tesac\n      }\n      exit $EXIT_SUCCESS\n      ;;\n    esac\n\n    # See if we need to build an old-fashioned archive.\n    for oldlib in $oldlibs; do\n\n      case $build_libtool_libs in\n        convenience)\n\t  oldobjs=\"$libobjs_save $symfileobj\"\n\t  addlibs=$convenience\n\t  build_libtool_libs=no\n\t  ;;\n\tmodule)\n\t  oldobjs=$libobjs_save\n\t  addlibs=$old_convenience\n\t  build_libtool_libs=no\n          ;;\n\t*)\n\t  oldobjs=\"$old_deplibs $non_pic_objects\"\n\t  $preload && test -f \"$symfileobj\" \\\n\t    && func_append oldobjs \" $symfileobj\"\n\t  addlibs=$old_convenience\n\t  ;;\n      esac\n\n      if test -n \"$addlibs\"; then\n\tgentop=$output_objdir/${outputname}x\n\tfunc_append generated \" $gentop\"\n\n\tfunc_extract_archives $gentop $addlibs\n\tfunc_append oldobjs \" $func_extract_archives_result\"\n      fi\n\n      # Do each command in the archive commands.\n      if test -n \"$old_archive_from_new_cmds\" && test yes = \"$build_libtool_libs\"; then\n\tcmds=$old_archive_from_new_cmds\n      else\n\n\t# Add any objects from preloaded convenience libraries\n\tif test -n \"$dlprefiles\"; then\n\t  gentop=$output_objdir/${outputname}x\n\t  func_append generated \" $gentop\"\n\n\t  func_extract_archives $gentop $dlprefiles\n\t  func_append oldobjs \" $func_extract_archives_result\"\n\tfi\n\n\t# POSIX demands no paths to be encoded in archives.  We have\n\t# to avoid creating archives with duplicate basenames if we\n\t# might have to extract them afterwards, e.g., when creating a\n\t# static archive out of a convenience library, or when linking\n\t# the entirety of a libtool archive into another (currently\n\t# not supported by libtool).\n\tif (for obj in $oldobjs\n\t    do\n\t      func_basename \"$obj\"\n\t      $ECHO \"$func_basename_result\"\n\t    done | sort | sort -uc >/dev/null 2>&1); then\n\t  :\n\telse\n\t  echo \"copying selected object files to avoid basename conflicts...\"\n\t  gentop=$output_objdir/${outputname}x\n\t  func_append generated \" $gentop\"\n\t  func_mkdir_p \"$gentop\"\n\t  save_oldobjs=$oldobjs\n\t  oldobjs=\n\t  counter=1\n\t  for obj in $save_oldobjs\n\t  do\n\t    func_basename \"$obj\"\n\t    objbase=$func_basename_result\n\t    case \" $oldobjs \" in\n\t    \" \") oldobjs=$obj ;;\n\t    *[\\ /]\"$objbase \"*)\n\t      while :; do\n\t\t# Make sure we don't pick an alternate name that also\n\t\t# overlaps.\n\t\tnewobj=lt$counter-$objbase\n\t\tfunc_arith $counter + 1\n\t\tcounter=$func_arith_result\n\t\tcase \" $oldobjs \" in\n\t\t*[\\ /]\"$newobj \"*) ;;\n\t\t*) if test ! -f \"$gentop/$newobj\"; then break; fi ;;\n\t\tesac\n\t      done\n\t      func_show_eval \"ln $obj $gentop/$newobj || cp $obj $gentop/$newobj\"\n\t      func_append oldobjs \" $gentop/$newobj\"\n\t      ;;\n\t    *) func_append oldobjs \" $obj\" ;;\n\t    esac\n\t  done\n\tfi\n\tfunc_to_tool_file \"$oldlib\" func_convert_file_msys_to_w32\n\ttool_oldlib=$func_to_tool_file_result\n\teval cmds=\\\"$old_archive_cmds\\\"\n\n\tfunc_len \" $cmds\"\n\tlen=$func_len_result\n\tif test \"$len\" -lt \"$max_cmd_len\" || test \"$max_cmd_len\" -le -1; then\n\t  cmds=$old_archive_cmds\n\telif test -n \"$archiver_list_spec\"; then\n\t  func_verbose \"using command file archive linking...\"\n\t  for obj in $oldobjs\n\t  do\n\t    func_to_tool_file \"$obj\"\n\t    $ECHO \"$func_to_tool_file_result\"\n\t  done > $output_objdir/$libname.libcmd\n\t  func_to_tool_file \"$output_objdir/$libname.libcmd\"\n\t  oldobjs=\" $archiver_list_spec$func_to_tool_file_result\"\n\t  cmds=$old_archive_cmds\n\telse\n\t  # the command line is too long to link in one step, link in parts\n\t  func_verbose \"using piecewise archive linking...\"\n\t  save_RANLIB=$RANLIB\n\t  RANLIB=:\n\t  objlist=\n\t  concat_cmds=\n\t  save_oldobjs=$oldobjs\n\t  oldobjs=\n\t  # Is there a better way of finding the last object in the list?\n\t  for obj in $save_oldobjs\n\t  do\n\t    last_oldobj=$obj\n\t  done\n\t  eval test_cmds=\\\"$old_archive_cmds\\\"\n\t  func_len \" $test_cmds\"\n\t  len0=$func_len_result\n\t  len=$len0\n\t  for obj in $save_oldobjs\n\t  do\n\t    func_len \" $obj\"\n\t    func_arith $len + $func_len_result\n\t    len=$func_arith_result\n\t    func_append objlist \" $obj\"\n\t    if test \"$len\" -lt \"$max_cmd_len\"; then\n\t      :\n\t    else\n\t      # the above command should be used before it gets too long\n\t      oldobjs=$objlist\n\t      if test \"$obj\" = \"$last_oldobj\"; then\n\t\tRANLIB=$save_RANLIB\n\t      fi\n\t      test -z \"$concat_cmds\" || concat_cmds=$concat_cmds~\n\t      eval concat_cmds=\\\"\\$concat_cmds$old_archive_cmds\\\"\n\t      objlist=\n\t      len=$len0\n\t    fi\n\t  done\n\t  RANLIB=$save_RANLIB\n\t  oldobjs=$objlist\n\t  if test -z \"$oldobjs\"; then\n\t    eval cmds=\\\"\\$concat_cmds\\\"\n\t  else\n\t    eval cmds=\\\"\\$concat_cmds~\\$old_archive_cmds\\\"\n\t  fi\n\tfi\n      fi\n      func_execute_cmds \"$cmds\" 'exit $?'\n    done\n\n    test -n \"$generated\" && \\\n      func_show_eval \"${RM}r$generated\"\n\n    # Now create the libtool archive.\n    case $output in\n    *.la)\n      old_library=\n      test yes = \"$build_old_libs\" && old_library=$libname.$libext\n      func_verbose \"creating $output\"\n\n      # Preserve any variables that may affect compiler behavior\n      for var in $variables_saved_for_relink; do\n\tif eval test -z \\\"\\${$var+set}\\\"; then\n\t  relink_command=\"{ test -z \\\"\\${$var+set}\\\" || $lt_unset $var || { $var=; export $var; }; }; $relink_command\"\n\telif eval var_value=\\$$var; test -z \"$var_value\"; then\n\t  relink_command=\"$var=; export $var; $relink_command\"\n\telse\n\t  func_quote_for_eval \"$var_value\"\n\t  relink_command=\"$var=$func_quote_for_eval_result; export $var; $relink_command\"\n\tfi\n      done\n      # Quote the link command for shipping.\n      relink_command=\"(cd `pwd`; $SHELL \\\"$progpath\\\" $preserve_args --mode=relink $libtool_args @inst_prefix_dir@)\"\n      relink_command=`$ECHO \"$relink_command\" | $SED \"$sed_quote_subst\"`\n      if test yes = \"$hardcode_automatic\"; then\n\trelink_command=\n      fi\n\n      # Only create the output if not a dry run.\n      $opt_dry_run || {\n\tfor installed in no yes; do\n\t  if test yes = \"$installed\"; then\n\t    if test -z \"$install_libdir\"; then\n\t      break\n\t    fi\n\t    output=$output_objdir/${outputname}i\n\t    # Replace all uninstalled libtool libraries with the installed ones\n\t    newdependency_libs=\n\t    for deplib in $dependency_libs; do\n\t      case $deplib in\n\t      *.la)\n\t\tfunc_basename \"$deplib\"\n\t\tname=$func_basename_result\n\t\tfunc_resolve_sysroot \"$deplib\"\n\t\teval libdir=`$SED -n -e 's/^libdir=\\(.*\\)$/\\1/p' $func_resolve_sysroot_result`\n\t\ttest -z \"$libdir\" && \\\n\t\t  func_fatal_error \"'$deplib' is not a valid libtool archive\"\n\t\tfunc_append newdependency_libs \" ${lt_sysroot:+=}$libdir/$name\"\n\t\t;;\n\t      -L*)\n\t\tfunc_stripname -L '' \"$deplib\"\n\t\tfunc_replace_sysroot \"$func_stripname_result\"\n\t\tfunc_append newdependency_libs \" -L$func_replace_sysroot_result\"\n\t\t;;\n\t      -R*)\n\t\tfunc_stripname -R '' \"$deplib\"\n\t\tfunc_replace_sysroot \"$func_stripname_result\"\n\t\tfunc_append newdependency_libs \" -R$func_replace_sysroot_result\"\n\t\t;;\n\t      *) func_append newdependency_libs \" $deplib\" ;;\n\t      esac\n\t    done\n\t    dependency_libs=$newdependency_libs\n\t    newdlfiles=\n\n\t    for lib in $dlfiles; do\n\t      case $lib in\n\t      *.la)\n\t        func_basename \"$lib\"\n\t\tname=$func_basename_result\n\t\teval libdir=`$SED -n -e 's/^libdir=\\(.*\\)$/\\1/p' $lib`\n\t\ttest -z \"$libdir\" && \\\n\t\t  func_fatal_error \"'$lib' is not a valid libtool archive\"\n\t\tfunc_append newdlfiles \" ${lt_sysroot:+=}$libdir/$name\"\n\t\t;;\n\t      *) func_append newdlfiles \" $lib\" ;;\n\t      esac\n\t    done\n\t    dlfiles=$newdlfiles\n\t    newdlprefiles=\n\t    for lib in $dlprefiles; do\n\t      case $lib in\n\t      *.la)\n\t\t# Only pass preopened files to the pseudo-archive (for\n\t\t# eventual linking with the app. that links it) if we\n\t\t# didn't already link the preopened objects directly into\n\t\t# the library:\n\t\tfunc_basename \"$lib\"\n\t\tname=$func_basename_result\n\t\teval libdir=`$SED -n -e 's/^libdir=\\(.*\\)$/\\1/p' $lib`\n\t\ttest -z \"$libdir\" && \\\n\t\t  func_fatal_error \"'$lib' is not a valid libtool archive\"\n\t\tfunc_append newdlprefiles \" ${lt_sysroot:+=}$libdir/$name\"\n\t\t;;\n\t      esac\n\t    done\n\t    dlprefiles=$newdlprefiles\n\t  else\n\t    newdlfiles=\n\t    for lib in $dlfiles; do\n\t      case $lib in\n\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) abs=$lib ;;\n\t\t*) abs=`pwd`\"/$lib\" ;;\n\t      esac\n\t      func_append newdlfiles \" $abs\"\n\t    done\n\t    dlfiles=$newdlfiles\n\t    newdlprefiles=\n\t    for lib in $dlprefiles; do\n\t      case $lib in\n\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) abs=$lib ;;\n\t\t*) abs=`pwd`\"/$lib\" ;;\n\t      esac\n\t      func_append newdlprefiles \" $abs\"\n\t    done\n\t    dlprefiles=$newdlprefiles\n\t  fi\n\t  $RM $output\n\t  # place dlname in correct position for cygwin\n\t  # In fact, it would be nice if we could use this code for all target\n\t  # systems that can't hard-code library paths into their executables\n\t  # and that have no shared library path variable independent of PATH,\n\t  # but it turns out we can't easily determine that from inspecting\n\t  # libtool variables, so we have to hard-code the OSs to which it\n\t  # applies here; at the moment, that means platforms that use the PE\n\t  # object format with DLL files.  See the long comment at the top of\n\t  # tests/bindir.at for full details.\n\t  tdlname=$dlname\n\t  case $host,$output,$installed,$module,$dlname in\n\t    *cygwin*,*lai,yes,no,*.dll | *mingw*,*lai,yes,no,*.dll | *cegcc*,*lai,yes,no,*.dll)\n\t      # If a -bindir argument was supplied, place the dll there.\n\t      if test -n \"$bindir\"; then\n\t\tfunc_relative_path \"$install_libdir\" \"$bindir\"\n\t\ttdlname=$func_relative_path_result/$dlname\n\t      else\n\t\t# Otherwise fall back on heuristic.\n\t\ttdlname=../bin/$dlname\n\t      fi\n\t      ;;\n\t  esac\n\t  $ECHO > $output \"\\\n# $outputname - a libtool library file\n# Generated by $PROGRAM (GNU $PACKAGE) $VERSION\n#\n# Please DO NOT delete this file!\n# It is necessary for linking the library.\n\n# The name that we can dlopen(3).\ndlname='$tdlname'\n\n# Names of this library.\nlibrary_names='$library_names'\n\n# The name of the static archive.\nold_library='$old_library'\n\n# Linker flags that cannot go in dependency_libs.\ninherited_linker_flags='$new_inherited_linker_flags'\n\n# Libraries that this one depends upon.\ndependency_libs='$dependency_libs'\n\n# Names of additional weak libraries provided by this library\nweak_library_names='$weak_libs'\n\n# Version information for $libname.\ncurrent=$current\nage=$age\nrevision=$revision\n\n# Is this an already installed library?\ninstalled=$installed\n\n# Should we warn about portability when linking against -modules?\nshouldnotlink=$module\n\n# Files to dlopen/dlpreopen\ndlopen='$dlfiles'\ndlpreopen='$dlprefiles'\n\n# Directory that this library needs to be installed in:\nlibdir='$install_libdir'\"\n\t  if test no,yes = \"$installed,$need_relink\"; then\n\t    $ECHO >> $output \"\\\nrelink_command=\\\"$relink_command\\\"\"\n\t  fi\n\tdone\n      }\n\n      # Do a symbolic link so that the libtool archive can be found in\n      # LD_LIBRARY_PATH before the program is installed.\n      func_show_eval '( cd \"$output_objdir\" && $RM \"$outputname\" && $LN_S \"../$outputname\" \"$outputname\" )' 'exit $?'\n      ;;\n    esac\n    exit $EXIT_SUCCESS\n}\n\nif test link = \"$opt_mode\" || test relink = \"$opt_mode\"; then\n  func_mode_link ${1+\"$@\"}\nfi\n\n\n# func_mode_uninstall arg...\nfunc_mode_uninstall ()\n{\n    $debug_cmd\n\n    RM=$nonopt\n    files=\n    rmforce=false\n    exit_status=0\n\n    # This variable tells wrapper scripts just to set variables rather\n    # than running their programs.\n    libtool_install_magic=$magic\n\n    for arg\n    do\n      case $arg in\n      -f) func_append RM \" $arg\"; rmforce=: ;;\n      -*) func_append RM \" $arg\" ;;\n      *) func_append files \" $arg\" ;;\n      esac\n    done\n\n    test -z \"$RM\" && \\\n      func_fatal_help \"you must specify an RM program\"\n\n    rmdirs=\n\n    for file in $files; do\n      func_dirname \"$file\" \"\" \".\"\n      dir=$func_dirname_result\n      if test . = \"$dir\"; then\n\todir=$objdir\n      else\n\todir=$dir/$objdir\n      fi\n      func_basename \"$file\"\n      name=$func_basename_result\n      test uninstall = \"$opt_mode\" && odir=$dir\n\n      # Remember odir for removal later, being careful to avoid duplicates\n      if test clean = \"$opt_mode\"; then\n\tcase \" $rmdirs \" in\n\t  *\" $odir \"*) ;;\n\t  *) func_append rmdirs \" $odir\" ;;\n\tesac\n      fi\n\n      # Don't error if the file doesn't exist and rm -f was used.\n      if { test -L \"$file\"; } >/dev/null 2>&1 ||\n\t { test -h \"$file\"; } >/dev/null 2>&1 ||\n\t test -f \"$file\"; then\n\t:\n      elif test -d \"$file\"; then\n\texit_status=1\n\tcontinue\n      elif $rmforce; then\n\tcontinue\n      fi\n\n      rmfiles=$file\n\n      case $name in\n      *.la)\n\t# Possibly a libtool archive, so verify it.\n\tif func_lalib_p \"$file\"; then\n\t  func_source $dir/$name\n\n\t  # Delete the libtool libraries and symlinks.\n\t  for n in $library_names; do\n\t    func_append rmfiles \" $odir/$n\"\n\t  done\n\t  test -n \"$old_library\" && func_append rmfiles \" $odir/$old_library\"\n\n\t  case $opt_mode in\n\t  clean)\n\t    case \" $library_names \" in\n\t    *\" $dlname \"*) ;;\n\t    *) test -n \"$dlname\" && func_append rmfiles \" $odir/$dlname\" ;;\n\t    esac\n\t    test -n \"$libdir\" && func_append rmfiles \" $odir/$name $odir/${name}i\"\n\t    ;;\n\t  uninstall)\n\t    if test -n \"$library_names\"; then\n\t      # Do each command in the postuninstall commands.\n\t      func_execute_cmds \"$postuninstall_cmds\" '$rmforce || exit_status=1'\n\t    fi\n\n\t    if test -n \"$old_library\"; then\n\t      # Do each command in the old_postuninstall commands.\n\t      func_execute_cmds \"$old_postuninstall_cmds\" '$rmforce || exit_status=1'\n\t    fi\n\t    # FIXME: should reinstall the best remaining shared library.\n\t    ;;\n\t  esac\n\tfi\n\t;;\n\n      *.lo)\n\t# Possibly a libtool object, so verify it.\n\tif func_lalib_p \"$file\"; then\n\n\t  # Read the .lo file\n\t  func_source $dir/$name\n\n\t  # Add PIC object to the list of files to remove.\n\t  if test -n \"$pic_object\" && test none != \"$pic_object\"; then\n\t    func_append rmfiles \" $dir/$pic_object\"\n\t  fi\n\n\t  # Add non-PIC object to the list of files to remove.\n\t  if test -n \"$non_pic_object\" && test none != \"$non_pic_object\"; then\n\t    func_append rmfiles \" $dir/$non_pic_object\"\n\t  fi\n\tfi\n\t;;\n\n      *)\n\tif test clean = \"$opt_mode\"; then\n\t  noexename=$name\n\t  case $file in\n\t  *.exe)\n\t    func_stripname '' '.exe' \"$file\"\n\t    file=$func_stripname_result\n\t    func_stripname '' '.exe' \"$name\"\n\t    noexename=$func_stripname_result\n\t    # $file with .exe has already been added to rmfiles,\n\t    # add $file without .exe\n\t    func_append rmfiles \" $file\"\n\t    ;;\n\t  esac\n\t  # Do a test to see if this is a libtool program.\n\t  if func_ltwrapper_p \"$file\"; then\n\t    if func_ltwrapper_executable_p \"$file\"; then\n\t      func_ltwrapper_scriptname \"$file\"\n\t      relink_command=\n\t      func_source $func_ltwrapper_scriptname_result\n\t      func_append rmfiles \" $func_ltwrapper_scriptname_result\"\n\t    else\n\t      relink_command=\n\t      func_source $dir/$noexename\n\t    fi\n\n\t    # note $name still contains .exe if it was in $file originally\n\t    # as does the version of $file that was added into $rmfiles\n\t    func_append rmfiles \" $odir/$name $odir/${name}S.$objext\"\n\t    if test yes = \"$fast_install\" && test -n \"$relink_command\"; then\n\t      func_append rmfiles \" $odir/lt-$name\"\n\t    fi\n\t    if test \"X$noexename\" != \"X$name\"; then\n\t      func_append rmfiles \" $odir/lt-$noexename.c\"\n\t    fi\n\t  fi\n\tfi\n\t;;\n      esac\n      func_show_eval \"$RM $rmfiles\" 'exit_status=1'\n    done\n\n    # Try to remove the $objdir's in the directories where we deleted files\n    for dir in $rmdirs; do\n      if test -d \"$dir\"; then\n\tfunc_show_eval \"rmdir $dir >/dev/null 2>&1\"\n      fi\n    done\n\n    exit $exit_status\n}\n\nif test uninstall = \"$opt_mode\" || test clean = \"$opt_mode\"; then\n  func_mode_uninstall ${1+\"$@\"}\nfi\n\ntest -z \"$opt_mode\" && {\n  help=$generic_help\n  func_fatal_help \"you must specify a MODE\"\n}\n\ntest -z \"$exec_cmd\" && \\\n  func_fatal_help \"invalid operation mode '$opt_mode'\"\n\nif test -n \"$exec_cmd\"; then\n  eval exec \"$exec_cmd\"\n  exit $EXIT_FAILURE\nfi\n\nexit $exit_status\n\n\n# The TAGs below are defined such that we never get into a situation\n# where we disable both kinds of libraries.  Given conflicting\n# choices, we go for a static library, that is the most portable,\n# since we can't tell whether shared libraries were disabled because\n# the user asked for that or because the platform doesn't support\n# them.  This is particularly important on AIX, because we don't\n# support having both static and shared libraries enabled at the same\n# time on that platform, so we default to a shared-only configuration.\n# If a disable-shared tag is given, we'll fallback to a static-only\n# configuration.  But we'll never go from static-only to shared-only.\n\n# ### BEGIN LIBTOOL TAG CONFIG: disable-shared\nbuild_libtool_libs=no\nbuild_old_libs=yes\n# ### END LIBTOOL TAG CONFIG: disable-shared\n\n# ### BEGIN LIBTOOL TAG CONFIG: disable-static\nbuild_old_libs=`case $build_libtool_libs in yes) echo no;; *) echo yes;; esac`\n# ### END LIBTOOL TAG CONFIG: disable-static\n\n# Local Variables:\n# mode:shell-script\n# sh-indentation:2\n# End:\n",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/MagickCore/opencl.c": "/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%                   OOO   PPPP   EEEEE  N   N   CCCC  L                       %\n%                  O   O  P   P  E      NN  N  C      L                       %\n%                  O   O  PPPP   EEE    N N N  C      L                       %\n%                  O   O  P      E      N  NN  C      L                       %\n%                   OOO   P      EEEEE  N   N   CCCC  LLLLL                   %\n%                                                                             %\n%                                                                             %\n%                         MagickCore OpenCL Methods                           %\n%                                                                             %\n%                              Software Design                                %\n%                                   Cristy                                    %\n%                                 March 2000                                  %\n%                                                                             %\n%                                                                             %\n%  Copyright 1999-2016 ImageMagick Studio LLC, a non-profit organization      %\n%  dedicated to making software imaging solutions freely available.           %\n%                                                                             %\n%  You may not use this file except in compliance with the License.  You may  %\n%  obtain a copy of the License at                                            %\n%                                                                             %\n%    http://www.imagemagick.org/script/license.php                            %\n%                                                                             %\n%  Unless required by applicable law or agreed to in writing, software        %\n%  distributed under the License is distributed on an \"AS IS\" BASIS,          %\n%  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   %\n%  See the License for the specific language governing permissions and        %\n%  limitations under the License.                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%\n%\n*/\n\f\n/*\n  Include declarations.\n*/\n#include \"MagickCore/studio.h\"\n#include \"MagickCore/artifact.h\"\n#include \"MagickCore/cache.h\"\n#include \"MagickCore/cache-private.h\"\n#include \"MagickCore/color.h\"\n#include \"MagickCore/compare.h\"\n#include \"MagickCore/constitute.h\"\n#include \"MagickCore/configure.h\"\n#include \"MagickCore/distort.h\"\n#include \"MagickCore/draw.h\"\n#include \"MagickCore/effect.h\"\n#include \"MagickCore/exception.h\"\n#include \"MagickCore/exception-private.h\"\n#include \"MagickCore/fx.h\"\n#include \"MagickCore/gem.h\"\n#include \"MagickCore/geometry.h\"\n#include \"MagickCore/image.h\"\n#include \"MagickCore/image-private.h\"\n#include \"MagickCore/layer.h\"\n#include \"MagickCore/mime-private.h\"\n#include \"MagickCore/memory_.h\"\n#include \"MagickCore/monitor.h\"\n#include \"MagickCore/montage.h\"\n#include \"MagickCore/morphology.h\"\n#include \"MagickCore/nt-base.h\"\n#include \"MagickCore/nt-base-private.h\"\n#include \"MagickCore/opencl.h\"\n#include \"MagickCore/opencl-private.h\"\n#include \"MagickCore/option.h\"\n#include \"MagickCore/policy.h\"\n#include \"MagickCore/property.h\"\n#include \"MagickCore/quantize.h\"\n#include \"MagickCore/quantum.h\"\n#include \"MagickCore/random_.h\"\n#include \"MagickCore/random-private.h\"\n#include \"MagickCore/resample.h\"\n#include \"MagickCore/resource_.h\"\n#include \"MagickCore/splay-tree.h\"\n#include \"MagickCore/semaphore.h\"\n#include \"MagickCore/statistic.h\"\n#include \"MagickCore/string_.h\"\n#include \"MagickCore/string-private.h\"\n#include \"MagickCore/token.h\"\n#include \"MagickCore/utility.h\"\n#include \"MagickCore/utility-private.h\"\n\n#if defined(MAGICKCORE_OPENCL_SUPPORT)\n\n#ifndef MAGICKCORE_WINDOWS_SUPPORT\n#include <dlfcn.h>\n#endif\n\n#ifdef MAGICKCORE_HAVE_OPENCL_CL_H\n#define MAGICKCORE_OPENCL_MACOSX  1\n#endif\n\n/*\n  Define declarations.\n*/\n#define IMAGEMAGICK_PROFILE_FILE \"ImagemagickOpenCLDeviceProfile.xml\"\n\n/*\n  Typedef declarations.\n*/\ntypedef struct\n{\n  long long freq;\n  long long clocks;\n  long long start;\n} AccelerateTimer;\n\ntypedef struct\n{\n  char\n    *name,\n    *platform_name,\n    *version;\n\n  cl_uint\n    max_clock_frequency,\n    max_compute_units;\n\n  double\n    score;\n} MagickCLDeviceBenchmark;\n\n/*\n  Forward declarations.\n*/\n\nstatic MagickBooleanType\n  HasOpenCLDevices(MagickCLEnv,ExceptionInfo *),\n  LoadOpenCLLibrary(void);\n\nstatic MagickCLDevice\n  RelinquishMagickCLDevice(MagickCLDevice);\n\nstatic MagickCLEnv\n  RelinquishMagickCLEnv(MagickCLEnv);\n\nstatic void\n  BenchmarkOpenCLDevices(MagickCLEnv);\n\nextern const char\n  *accelerateKernels, *accelerateKernels2;\n\n/* OpenCL library */\nMagickLibrary\n  *openCL_library;\n\n/* Default OpenCL environment */\nMagickCLEnv\n  default_CLEnv;\nMagickThreadType\n  test_thread_id=0;\nSemaphoreInfo\n  *openCL_lock;\n\n/* Cached location of the OpenCL cache files */\nchar\n  *cache_directory;\nSemaphoreInfo\n  *cache_directory_lock;\n\nstatic inline MagickBooleanType IsSameOpenCLDevice(MagickCLDevice a,\n  MagickCLDevice b)\n{\n  if ((LocaleCompare(a->platform_name,b->platform_name) == 0) &&\n      (LocaleCompare(a->name,b->name) == 0) &&\n      (LocaleCompare(a->version,b->version) == 0) &&\n      (a->max_clock_frequency == b->max_clock_frequency) &&\n      (a->max_compute_units == b->max_compute_units))\n    return(MagickTrue);\n\n  return(MagickFalse);\n}\n\nstatic inline MagickBooleanType IsBenchmarkedOpenCLDevice(MagickCLDevice a,\n  MagickCLDeviceBenchmark *b)\n{\n  if ((LocaleCompare(a->platform_name,b->platform_name) == 0) &&\n      (LocaleCompare(a->name,b->name) == 0) &&\n      (LocaleCompare(a->version,b->version) == 0) &&\n      (a->max_clock_frequency == b->max_clock_frequency) &&\n      (a->max_compute_units == b->max_compute_units))\n    return(MagickTrue);\n\n  return(MagickFalse);\n}\n\nstatic inline void RelinquishMagickCLDevices(MagickCLEnv clEnv)\n{\n  size_t\n    i;\n\n  if (clEnv->devices != (MagickCLDevice *) NULL)\n    {\n      for (i = 0; i < clEnv->number_devices; i++)\n        clEnv->devices[i]=RelinquishMagickCLDevice(clEnv->devices[i]);\n      clEnv->devices=(MagickCLDevice *) RelinquishMagickMemory(clEnv->devices);\n    }\n  clEnv->number_devices=0;\n}\n\nstatic inline MagickBooleanType MagickCreateDirectory(const char *path)\n{\n  int\n    status;\n\n#ifdef MAGICKCORE_WINDOWS_SUPPORT\n  status=mkdir(path);\n#else\n  status=mkdir(path, 0777);\n#endif\n  return(status == 0 ? MagickTrue : MagickFalse);\n}\n\nstatic inline void InitAccelerateTimer(AccelerateTimer *timer)\n{\n#ifdef _WIN32\n  QueryPerformanceFrequency((LARGE_INTEGER*)&timer->freq);\n#else\n  timer->freq=(long long)1.0E3;\n#endif\n  timer->clocks=0;\n  timer->start=0;\n}\n\nstatic inline double ReadAccelerateTimer(AccelerateTimer *timer)\n{\n  return (double)timer->clocks/(double)timer->freq;\n}\n\nstatic inline void StartAccelerateTimer(AccelerateTimer* timer)\n{\n#ifdef _WIN32\n  QueryPerformanceCounter((LARGE_INTEGER*)&timer->start);\n#else\n  struct timeval\n    s;\n  gettimeofday(&s,0);\n  timer->start=(long long)s.tv_sec*(long long)1.0E3+(long long)s.tv_usec/\n    (long long)1.0E3;\n#endif\n}\n\nstatic inline void StopAccelerateTimer(AccelerateTimer *timer)\n{\n  long long\n    n;\n\n  n=0;\n#ifdef _WIN32\n  QueryPerformanceCounter((LARGE_INTEGER*)&(n));\n#else\n  struct timeval\n    s;\n  gettimeofday(&s,0);\n  n=(long long)s.tv_sec*(long long)1.0E3+(long long)s.tv_usec/\n    (long long)1.0E3;\n#endif\n  n-=timer->start;\n  timer->start=0;\n  timer->clocks+=n;\n}\n\nstatic const char *GetOpenCLCacheDirectory()\n{\n  if (cache_directory == (char *) NULL)\n    {\n      if (cache_directory_lock == (SemaphoreInfo *) NULL)\n        ActivateSemaphoreInfo(&cache_directory_lock);\n      LockSemaphoreInfo(cache_directory_lock);\n      if (cache_directory == (char *) NULL)\n        {\n          char\n            *home,\n            path[MagickPathExtent],\n            *temp;\n\n          MagickBooleanType\n            status;\n\n          struct stat\n            attributes;\n\n          temp=(char *) NULL;\n          home=GetEnvironmentValue(\"MAGICK_OPENCL_CACHE_DIR\");\n          if (home == (char *) NULL)\n            {\n              home=GetEnvironmentValue(\"XDG_CACHE_HOME\");\n              if (home == (char *) NULL)\n                home=GetEnvironmentValue(\"LOCALAPPDATA\");\n              if (home == (char *) NULL)\n                home=GetEnvironmentValue(\"APPDATA\");\n              if (home == (char *) NULL)\n                home=GetEnvironmentValue(\"USERPROFILE\");\n            }\n\n          if (home != (char *) NULL)\n            {\n              /* first check if $HOME exists */\n              (void) FormatLocaleString(path,MagickPathExtent,\"%s\",home);\n              status=GetPathAttributes(path,&attributes);\n              if (status == MagickFalse)\n                status=MagickCreateDirectory(path);\n\n              /* first check if $HOME/ImageMagick exists */\n              if (status != MagickFalse)\n                {\n                  (void) FormatLocaleString(path,MagickPathExtent,\n                    \"%s%sImageMagick\",home,DirectorySeparator);\n\n                  status=GetPathAttributes(path,&attributes);\n                  if (status == MagickFalse)\n                    status=MagickCreateDirectory(path);\n                }\n\n              if (status != MagickFalse)\n                {\n                  temp=(char*) AcquireMagickMemory(strlen(path)+1);\n                  CopyMagickString(temp,path,strlen(path)+1);\n                }\n              home=DestroyString(home);\n            }\n          else\n            {\n              home=GetEnvironmentValue(\"HOME\");\n              if (home != (char *) NULL)\n                {\n                  /* first check if $HOME/.cache exists */\n                  (void) FormatLocaleString(path,MagickPathExtent,\"%s%s.cache\",\n                    home,DirectorySeparator);\n                  status=GetPathAttributes(path,&attributes);\n                  if (status == MagickFalse)\n                    status=MagickCreateDirectory(path);\n\n                  /* first check if $HOME/.cache/ImageMagick exists */\n                  if (status != MagickFalse)\n                    {\n                      (void) FormatLocaleString(path,MagickPathExtent,\n                        \"%s%s.cache%sImageMagick\",home,DirectorySeparator,\n                        DirectorySeparator);\n                      status=GetPathAttributes(path,&attributes);\n                      if (status == MagickFalse)\n                        status=MagickCreateDirectory(path);\n                    }\n\n                  if (status != MagickFalse)\n                    {\n                      temp=(char*) AcquireMagickMemory(strlen(path)+1);\n                      CopyMagickString(temp,path,strlen(path)+1);\n                    }\n                  home=DestroyString(home);\n                }\n            }\n          if (temp == (char *) NULL)\n            temp=AcquireString(\"?\");\n          cache_directory=temp;\n        }\n      UnlockSemaphoreInfo(cache_directory_lock);\n    }\n  if (*cache_directory == '?')\n    return((const char *) NULL);\n  return(cache_directory);\n}\n\nstatic void SelectOpenCLDevice(MagickCLEnv clEnv,cl_device_type type)\n{\n  MagickCLDevice\n    device;\n\n  size_t\n    i,\n    j;\n\n  for (i = 0; i < clEnv->number_devices; i++)\n    clEnv->devices[i]->enabled=MagickFalse;\n\n  for (i = 0; i < clEnv->number_devices; i++)\n  {\n    device=clEnv->devices[i];\n    if (device->type != type)\n      continue;\n\n    device->enabled=MagickTrue;\n    for (j = i+1; j < clEnv->number_devices; j++)\n    {\n      MagickCLDevice\n        other_device;\n\n      other_device=clEnv->devices[j];\n      if (IsSameOpenCLDevice(device,other_device))\n        other_device->enabled=MagickTrue;\n    }\n  }\n}\n\nstatic size_t StringSignature(const char* string)\n{\n  size_t\n    n,\n    i,\n    j,\n    signature,\n    stringLength;\n\n  union\n  {\n    const char* s;\n    const size_t* u;\n  } p;\n\n  stringLength=(size_t) strlen(string);\n  signature=stringLength;\n  n=stringLength/sizeof(size_t);\n  p.s=string;\n  for (i = 0; i < n; i++)\n    signature^=p.u[i];\n  if (n * sizeof(size_t) != stringLength)\n    {\n      char\n        padded[4];\n\n      j=n*sizeof(size_t);\n      for (i = 0; i < 4; i++, j++)\n      {\n        if (j < stringLength)\n          padded[i]=p.s[j];\n        else\n          padded[i]=0;\n      }\n      p.s=padded;\n      signature^=p.u[0];\n    }\n  return(signature);\n}\n\n/*\n  Provide call to OpenCL library methods\n*/\n\nMagickPrivate cl_mem CreateOpenCLBuffer(MagickCLDevice device,\n  cl_mem_flags flags,size_t size,void *host_ptr)\n{\n  return(openCL_library->clCreateBuffer(device->context,flags,size,host_ptr,\n    (cl_int *) NULL));\n}\n\nMagickPrivate void ReleaseOpenCLKernel(cl_kernel kernel)\n{\n  (void) openCL_library->clReleaseKernel(kernel);\n}\n\nMagickPrivate void ReleaseOpenCLMemObject(cl_mem memobj)\n{\n  (void) openCL_library->clReleaseMemObject(memobj);\n}\n\nMagickPrivate cl_int SetOpenCLKernelArg(cl_kernel kernel,cl_uint arg_index,\n  size_t arg_size,const void *arg_value)\n{\n  return(openCL_library->clSetKernelArg(kernel,arg_index,arg_size,arg_value));\n}\n\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n+   A c q u i r e M a g i c k C L C a c h e I n f o                           %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  AcquireMagickCLCacheInfo() acquires an OpenCL cache info structure.\n%\n%  The format of the AcquireMagickCLCacheInfo method is:\n%\n%      MagickCLCacheInfo AcquireMagickCLCacheInfo(MagickCLDevice device,\n%        Quantum *pixels,const MagickSizeType length)\n%\n%  A description of each parameter follows:\n%\n%    o device: the OpenCL device.\n%\n%    o pixels: the pixel buffer of the image.\n%\n%    o length: the length of the pixel buffer.\n%\n*/\n\nMagickPrivate MagickCLCacheInfo AcquireMagickCLCacheInfo(MagickCLDevice device,\n  Quantum *pixels,const MagickSizeType length)\n{\n  cl_int\n    status;\n\n  MagickCLCacheInfo\n    info;\n\n  info=(MagickCLCacheInfo) AcquireMagickMemory(sizeof(*info));\n  if (info == (MagickCLCacheInfo) NULL)\n    ThrowFatalException(ResourceLimitFatalError,\"MemoryAllocationFailed\");\n  (void) ResetMagickMemory(info,0,sizeof(*info));\n  LockSemaphoreInfo(openCL_lock);\n  device->requested++;\n  UnlockSemaphoreInfo(openCL_lock);\n  info->device=device;\n  info->length=length;\n  info->pixels=pixels;\n  info->buffer=openCL_library->clCreateBuffer(device->context,\n    CL_MEM_READ_WRITE | CL_MEM_USE_HOST_PTR,(size_t) length,(void *) pixels,\n    &status);\n  if (status == CL_SUCCESS)\n    return(info);\n  LockSemaphoreInfo(openCL_lock);\n  device->requested--;\n  UnlockSemaphoreInfo(openCL_lock);\n  return((MagickCLCacheInfo) RelinquishMagickMemory(info));\n}\n\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   A c q u i r e M a g i c k C L D e v i c e                                 %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  AcquireMagickCLDevice() acquires an OpenCL device\n%\n%  The format of the AcquireMagickCLDevice method is:\n%\n%      MagickCLDevice AcquireMagickCLDevice()\n%\n*/\n\nstatic MagickCLDevice AcquireMagickCLDevice()\n{\n  MagickCLDevice\n    device;\n\n  device=(MagickCLDevice) AcquireMagickMemory(sizeof(*device));\n  if (device != NULL)\n  {\n    (void) ResetMagickMemory(device,0,sizeof(*device));\n    ActivateSemaphoreInfo(&device->lock);\n    device->score=MAGICKCORE_OPENCL_UNDEFINED_SCORE;\n    device->command_queues_index=-1;\n    device->enabled=MagickTrue;\n  }\n  return(device);\n}\n\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   A c q u i r e M a g i c k C L E n v                                       %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n% AcquireMagickCLEnv() allocates the MagickCLEnv structure\n%\n*/\n\nstatic MagickCLEnv AcquireMagickCLEnv(void)\n{\n  const char\n    *option;\n\n  MagickCLEnv\n    clEnv;\n\n  clEnv=(MagickCLEnv) AcquireMagickMemory(sizeof(*clEnv));\n  if (clEnv != (MagickCLEnv) NULL)\n  {\n    (void) ResetMagickMemory(clEnv,0,sizeof(*clEnv));\n    ActivateSemaphoreInfo(&clEnv->lock);\n    clEnv->cpu_score=MAGICKCORE_OPENCL_UNDEFINED_SCORE;\n    clEnv->enabled=MagickTrue;\n    option=getenv(\"MAGICK_OCL_DEVICE\");\n    if ((option != (const char *) NULL) && (strcmp(option,\"OFF\") == 0))\n      clEnv->enabled=MagickFalse;\n  }\n  return clEnv;\n}\n\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n+   A c q u i r e O p e n C L C o m m a n d Q u e u e                         %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  AcquireOpenCLCommandQueue() acquires an OpenCL command queue\n%\n%  The format of the AcquireOpenCLCommandQueue method is:\n%\n%      cl_command_queue AcquireOpenCLCommandQueue(MagickCLDevice device)\n%\n%  A description of each parameter follows:\n%\n%    o device: the OpenCL device.\n%\n*/\n\nMagickPrivate cl_command_queue AcquireOpenCLCommandQueue(MagickCLDevice device)\n{\n  cl_command_queue\n    queue;\n\n  cl_command_queue_properties\n    properties;\n\n  assert(device != (MagickCLDevice) NULL);\n  LockSemaphoreInfo(device->lock);\n  if ((device->profile_kernels == MagickFalse) &&\n      (device->command_queues_index >= 0))\n  {\n    queue=device->command_queues[device->command_queues_index--];\n    UnlockSemaphoreInfo(device->lock);\n  }\n  else\n  {\n    UnlockSemaphoreInfo(device->lock);\n    properties=(cl_command_queue_properties) NULL;\n    if (device->profile_kernels != MagickFalse)\n      properties=CL_QUEUE_PROFILING_ENABLE;\n    queue=openCL_library->clCreateCommandQueue(device->context,\n      device->deviceID,properties,(cl_int *) NULL);\n  }\n  return(queue);\n}\n\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n+   A c q u i r e O p e n C L K e r n e l                                     %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  AcquireOpenCLKernel() acquires an OpenCL kernel\n%\n%  The format of the AcquireOpenCLKernel method is:\n%\n%      cl_kernel AcquireOpenCLKernel(MagickCLEnv clEnv,\n%        MagickOpenCLProgram program, const char* kernelName)\n%\n%  A description of each parameter follows:\n%\n%    o clEnv: the OpenCL environment.\n%\n%    o program: the OpenCL program module that the kernel belongs to.\n%\n%    o kernelName:  the name of the kernel\n%\n*/\n\nMagickPrivate cl_kernel AcquireOpenCLKernel(MagickCLDevice device,\n  const char *kernel_name)\n{\n  cl_kernel\n    kernel;\n\n  assert(device != (MagickCLDevice) NULL);\n  kernel=openCL_library->clCreateKernel(device->program,kernel_name,\n    (cl_int *) NULL);\n  return(kernel);\n}\n\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   A u t o S e l e c t O p e n C L D e v i c e s                             %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  AutoSelectOpenCLDevices() determines the best device based on the \n%  information from the micro-benchmark.\n%\n%  The format of the AutoSelectOpenCLDevices method is:\n%\n%      void AcquireOpenCLKernel(MagickCLEnv clEnv,ExceptionInfo *exception)\n%\n%  A description of each parameter follows:\n%\n%    o clEnv: the OpenCL environment.\n%\n%    o exception: return any errors or warnings in this structure.\n%\n*/\n\nstatic void LoadOpenCLDeviceBenchmark(MagickCLEnv clEnv,const char *xml)\n{\n  char\n    keyword[MagickPathExtent],\n    *token;\n\n  const char\n    *q;\n\n  MagickCLDeviceBenchmark\n    *device_benchmark;\n\n  MagickStatusType\n    status;\n\n  size_t\n    i,\n    extent;\n\n  if (xml == (char *) NULL)\n    return;\n  status=MagickTrue;\n  device_benchmark=(MagickCLDeviceBenchmark *) NULL;\n  token=AcquireString(xml);\n  extent=strlen(token)+MagickPathExtent;\n  for (q=(char *) xml; *q != '\\0'; )\n  {\n    /*\n      Interpret XML.\n    */\n    GetNextToken(q,&q,extent,token);\n    if (*token == '\\0')\n      break;\n    (void) CopyMagickString(keyword,token,MagickPathExtent);\n    if (LocaleNCompare(keyword,\"<!DOCTYPE\",9) == 0)\n      {\n        /*\n          Doctype element.\n        */\n        while ((LocaleNCompare(q,\"]>\",2) != 0) && (*q != '\\0'))\n          GetNextToken(q,&q,extent,token);\n        continue;\n      }\n    if (LocaleNCompare(keyword,\"<!--\",4) == 0)\n      {\n        /*\n          Comment element.\n        */\n        while ((LocaleNCompare(q,\"->\",2) != 0) && (*q != '\\0'))\n          GetNextToken(q,&q,extent,token);\n        continue;\n      }\n    if (LocaleCompare(keyword,\"<device\") == 0)\n      {\n        /*\n          Device element.\n        */\n        device_benchmark=(MagickCLDeviceBenchmark *) AcquireMagickMemory(\n          sizeof(*device_benchmark));\n        if (device_benchmark == (MagickCLDeviceBenchmark *) NULL)\n          break;\n        (void) ResetMagickMemory(device_benchmark,0,sizeof(*device_benchmark));\n        device_benchmark->score=MAGICKCORE_OPENCL_UNDEFINED_SCORE;\n        continue;\n      }\n    if (device_benchmark == (MagickCLDeviceBenchmark *) NULL)\n      continue;\n    if (LocaleCompare(keyword,\"/>\") == 0)\n      {\n        if (device_benchmark->score != MAGICKCORE_OPENCL_UNDEFINED_SCORE)\n          {\n            if (LocaleCompare(device_benchmark->name, \"CPU\") == 0)\n              clEnv->cpu_score=device_benchmark->score;\n            else\n              {\n                MagickCLDevice\n                  device;\n\n                /*\n                  Set the score for all devices that match this device.\n                */\n                for (i = 0; i < clEnv->number_devices; i++)\n                {\n                  device=clEnv->devices[i];\n                  if (IsBenchmarkedOpenCLDevice(device,device_benchmark))\n                    device->score=device_benchmark->score;\n                }\n              }\n          }\n\n        device_benchmark->platform_name=RelinquishMagickMemory(\n          device_benchmark->platform_name);\n        device_benchmark->name=RelinquishMagickMemory(device_benchmark->name);\n        device_benchmark->version=RelinquishMagickMemory(\n          device_benchmark->version);\n        device_benchmark=(MagickCLDeviceBenchmark *) RelinquishMagickMemory(\n          device_benchmark);\n        continue;\n      }\n    GetNextToken(q,(const char **) NULL,extent,token);\n    if (*token != '=')\n      continue;\n    GetNextToken(q,&q,extent,token);\n    GetNextToken(q,&q,extent,token);\n    switch (*keyword)\n    {\n      case 'M':\n      case 'm':\n      {\n        if (LocaleCompare((char *) keyword,\"maxClockFrequency\") == 0)\n          {\n            device_benchmark->max_clock_frequency=StringToInteger(token);\n            break;\n          }\n        if (LocaleCompare((char *) keyword,\"maxComputeUnits\") == 0)\n          {\n            device_benchmark->max_compute_units=StringToInteger(token);\n            break;\n          }\n        break;\n      }\n      case 'N':\n      case 'n':\n      {\n        if (LocaleCompare((char *) keyword,\"name\") == 0)\n          device_benchmark->name=ConstantString(token);\n        break;\n      }\n      case 'P':\n      case 'p':\n      {\n        if (LocaleCompare((char *) keyword,\"platform\") == 0)\n          device_benchmark->platform_name=ConstantString(token);\n        break;\n      }\n      case 'S':\n      case 's':\n      {\n        if (LocaleCompare((char *) keyword,\"score\") == 0)\n          device_benchmark->score=StringToDouble(token,(char **) NULL);\n        break;\n      }\n      case 'V':\n      case 'v':\n      {\n        if (LocaleCompare((char *) keyword,\"version\") == 0)\n          device_benchmark->version=ConstantString(token);\n        break;\n      }\n      default:\n        break;\n    }\n  }\n  token=(char *) RelinquishMagickMemory(token);\n  device_benchmark=(MagickCLDeviceBenchmark *) RelinquishMagickMemory(\n    device_benchmark);\n}\n\nstatic MagickBooleanType CanWriteProfileToFile(const char *filename)\n{\n  FILE\n    *profileFile;\n\n  profileFile=fopen(filename,\"ab\");\n\n  if (profileFile == (FILE *)NULL)\n    return(MagickFalse);\n\n  fclose(profileFile);\n  return(MagickTrue);\n}\n\nstatic MagickBooleanType LoadOpenCLBenchmarks(MagickCLEnv clEnv,\n  ExceptionInfo *exception)\n{\n  char\n    filename[MagickPathExtent];\n\n  const StringInfo\n    *option;\n\n  LinkedListInfo\n    *options;\n\n  size_t\n    i;\n\n  (void) FormatLocaleString(filename,MagickPathExtent,\"%s%s%s\",\n    GetOpenCLCacheDirectory(),DirectorySeparator,\n    IMAGEMAGICK_PROFILE_FILE);\n\n  /*\n    We don't run the benchmark when we can not write out a device profile. The\n    first GPU device will be used.\n  */\n#if !defined(MAGICKCORE_ZERO_CONFIGURATION_SUPPORT)\n  if (CanWriteProfileToFile(filename) == MagickFalse)\n#endif\n    {\n      for (i = 0; i < clEnv->number_devices; i++)\n        clEnv->devices[i]->score=1.0;\n\n      SelectOpenCLDevice(clEnv,CL_DEVICE_TYPE_GPU);\n      return(MagickFalse);\n    }\n\n  options=GetConfigureOptions(filename,exception);\n  option=(const StringInfo *) GetNextValueInLinkedList(options);\n  while (option != (const StringInfo *) NULL)\n  {\n    LoadOpenCLDeviceBenchmark(clEnv,(const char *) GetStringInfoDatum(\n      option));\n    option=(const StringInfo *) GetNextValueInLinkedList(options);\n  }\n  options=DestroyConfigureOptions(options);\n  return(MagickTrue);\n}\n\nstatic void AutoSelectOpenCLDevices(MagickCLEnv clEnv,ExceptionInfo *exception)\n{\n  const char\n    *option;\n\n  double\n    best_score;\n\n  MagickBooleanType\n    benchmark;\n\n  size_t\n    i;\n\n  option=getenv(\"MAGICK_OCL_DEVICE\");\n  if (option != (const char *) NULL)\n    {\n      if (strcmp(option,\"GPU\") == 0)\n        SelectOpenCLDevice(clEnv,CL_DEVICE_TYPE_GPU);\n      else if (strcmp(option,\"CPU\") == 0)\n        SelectOpenCLDevice(clEnv,CL_DEVICE_TYPE_CPU);\n      else if (strcmp(option,\"OFF\") == 0)\n        {\n          for (i = 0; i < clEnv->number_devices; i++)\n            clEnv->devices[i]->enabled=MagickFalse;\n          clEnv->enabled=MagickFalse;\n        }\n    }\n\n  if (LoadOpenCLBenchmarks(clEnv,exception) == MagickFalse)\n    return;\n\n  benchmark=MagickFalse;\n  if (clEnv->cpu_score == MAGICKCORE_OPENCL_UNDEFINED_SCORE)\n    benchmark=MagickTrue;\n  else\n    {\n      for (i = 0; i < clEnv->number_devices; i++)\n      {\n        if (clEnv->devices[i]->score == MAGICKCORE_OPENCL_UNDEFINED_SCORE)\n        {\n          benchmark=MagickTrue;\n          break;\n        }\n      }\n    }\n\n  if (benchmark != MagickFalse)\n    BenchmarkOpenCLDevices(clEnv);\n\n  best_score=clEnv->cpu_score;\n  for (i = 0; i < clEnv->number_devices; i++)\n    best_score=MagickMin(clEnv->devices[i]->score,best_score);\n\n  for (i = 0; i < clEnv->number_devices; i++)\n  {\n    if (clEnv->devices[i]->score != best_score)\n      clEnv->devices[i]->enabled=MagickFalse;\n  }\n}\n\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   B e n c h m a r k O p e n C L D e v i c e s                               %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  BenchmarkOpenCLDevices() benchmarks the OpenCL devices and the CPU to help\n%  the automatic selection of the best device.\n%\n%  The format of the BenchmarkOpenCLDevices method is:\n%\n%    void BenchmarkOpenCLDevices(MagickCLEnv clEnv,ExceptionInfo *exception)\n%\n%  A description of each parameter follows:\n%\n%    o clEnv: the OpenCL environment.\n%\n%    o exception: return any errors or warnings\n*/\n\nstatic double RunOpenCLBenchmark(MagickBooleanType is_cpu)\n{\n  AccelerateTimer\n    timer;\n\n  ExceptionInfo\n    *exception;\n\n  Image\n    *inputImage;\n\n  ImageInfo\n    *imageInfo;\n\n  size_t\n    i;\n\n  exception=AcquireExceptionInfo();\n  imageInfo=AcquireImageInfo();\n  CloneString(&imageInfo->size,\"2048x1536\");\n  CopyMagickString(imageInfo->filename,\"xc:none\",MagickPathExtent);\n  inputImage=ReadImage(imageInfo,exception);\n\n  InitAccelerateTimer(&timer);\n\n  for (i=0; i<=2; i++)\n  {\n    Image\n      *bluredImage,\n      *resizedImage,\n      *unsharpedImage;\n\n    if (i > 0)\n      StartAccelerateTimer(&timer);\n\n    bluredImage=BlurImage(inputImage,10.0f,3.5f,exception);\n    unsharpedImage=UnsharpMaskImage(bluredImage,2.0f,2.0f,50.0f,10.0f,\n      exception);\n    resizedImage=ResizeImage(unsharpedImage,640,480,LanczosFilter,\n      exception);\n\n    /* \n      We need this to get a proper performance benchmark, the operations\n      are executed asynchronous.\n    */\n    if (is_cpu == MagickFalse)\n      {\n        CacheInfo\n          *cache_info;\n\n        cache_info=(CacheInfo *) resizedImage->cache;\n        if (cache_info->opencl != (MagickCLCacheInfo) NULL)\n          openCL_library->clWaitForEvents(cache_info->opencl->event_count,\n            cache_info->opencl->events);\n      }\n\n    if (i > 0)\n      StopAccelerateTimer(&timer);\n\n    if (bluredImage != (Image *) NULL)\n      DestroyImage(bluredImage);\n    if (unsharpedImage != (Image *) NULL)\n      DestroyImage(unsharpedImage);\n    if (resizedImage != (Image *) NULL)\n      DestroyImage(resizedImage);\n  }\n  DestroyImage(inputImage);\n  return(ReadAccelerateTimer(&timer));\n}\n\nstatic void RunDeviceBenckmark(MagickCLEnv clEnv,MagickCLEnv testEnv,\n  MagickCLDevice device)\n{\n  testEnv->devices[0]=device;\n  default_CLEnv=testEnv;\n  device->score=RunOpenCLBenchmark(MagickFalse);\n  default_CLEnv=clEnv;\n  testEnv->devices[0]=(MagickCLDevice) NULL;\n}\n\nstatic void CacheOpenCLBenchmarks(MagickCLEnv clEnv)\n{\n  char\n    filename[MagickPathExtent];\n\n  FILE\n    *cache_file;\n\n  MagickCLDevice\n    device;\n\n  size_t\n    i,\n    j;\n\n  (void) FormatLocaleString(filename,MagickPathExtent,\"%s%s%s\",\n    GetOpenCLCacheDirectory(),DirectorySeparator,\n    IMAGEMAGICK_PROFILE_FILE);\n\n  cache_file=fopen_utf8(filename,\"wb\");\n  if (cache_file == (FILE *) NULL)\n    return;\n  fwrite(\"<devices>\\n\",sizeof(char),10,cache_file);\n  fprintf(cache_file,\"  <device name=\\\"CPU\\\" score=\\\"%.4g\\\"/>\\n\",\n    clEnv->cpu_score);\n  for (i = 0; i < clEnv->number_devices; i++)\n  {\n    MagickBooleanType\n      duplicate;\n\n    device=clEnv->devices[i];\n    duplicate=MagickFalse;\n    for (j = 0; j < i; j++)\n    {\n      if (IsSameOpenCLDevice(clEnv->devices[j],device))\n      {\n        duplicate=MagickTrue;\n        break;\n      }\n    }\n\n    if (duplicate)\n      continue;\n\n    if (device->score != MAGICKCORE_OPENCL_UNDEFINED_SCORE)\n      fprintf(cache_file,\"  <device platform=\\\"%s\\\" name=\\\"%s\\\" version=\\\"%s\\\"\\\n maxClockFrequency=\\\"%d\\\" maxComputeUnits=\\\"%d\\\" score=\\\"%.4g\\\"/>\\n\",\n        device->platform_name,device->name,device->version,\n        (int)device->max_clock_frequency,(int)device->max_compute_units,\n        device->score);\n  }\n  fwrite(\"</devices>\",sizeof(char),10,cache_file);\n\n  fclose(cache_file);\n}\n\nstatic void BenchmarkOpenCLDevices(MagickCLEnv clEnv)\n{\n  MagickCLDevice\n    device;\n\n  MagickCLEnv\n    testEnv;\n\n  size_t\n    i,\n    j;\n\n  testEnv=AcquireMagickCLEnv();\n  testEnv->library=openCL_library;\n  testEnv->devices=(MagickCLDevice *) AcquireMagickMemory(\n    sizeof(MagickCLDevice));\n  testEnv->number_devices=1;\n  testEnv->benchmark_thread_id=GetMagickThreadId();\n  testEnv->initialized=MagickTrue;\n\n  for (i = 0; i < clEnv->number_devices; i++)\n    clEnv->devices[i]->score=MAGICKCORE_OPENCL_UNDEFINED_SCORE;\n\n  for (i = 0; i < clEnv->number_devices; i++)\n  {\n    device=clEnv->devices[i];\n    if (device->score == MAGICKCORE_OPENCL_UNDEFINED_SCORE)\n      RunDeviceBenckmark(clEnv,testEnv,device);\n\n    /* Set the score on all the other devices that are the same */\n    for (j = i+1; j < clEnv->number_devices; j++)\n    {\n      MagickCLDevice\n        other_device;\n\n      other_device=clEnv->devices[j];\n      if (IsSameOpenCLDevice(device,other_device))\n        other_device->score=device->score;\n    }\n  }\n\n  testEnv->enabled=MagickFalse;\n  default_CLEnv=testEnv;\n  clEnv->cpu_score=RunOpenCLBenchmark(MagickTrue);\n  default_CLEnv=clEnv;\n\n  testEnv=RelinquishMagickCLEnv(testEnv);\n  CacheOpenCLBenchmarks(clEnv);\n}\n\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   C o m p i l e O p e n C L K e r n e l                                     %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  CompileOpenCLKernel() compiles the kernel for the specified device. The\n%  kernel will be cached on disk to reduce the compilation time.\n%\n%  The format of the CompileOpenCLKernel method is:\n%\n%      MagickBooleanType AcquireOpenCLKernel(MagickCLDevice clEnv,\n%        unsigned int signature,const char *kernel,const char *options,\n%        ExceptionInfo *exception)\n%\n%  A description of each parameter follows:\n%\n%    o device: the OpenCL device.\n%\n%    o kernel: the source code of the kernel.\n%\n%    o options: options for the compiler.\n%\n%    o signature: a number to uniquely identify the kernel\n%\n%    o exception: return any errors or warnings in this structure.\n%\n*/\n\nstatic void CacheOpenCLKernel(MagickCLDevice device,char *filename,\n  ExceptionInfo *exception)\n{\n  cl_uint\n    status;\n\n  size_t\n    binaryProgramSize;\n\n  unsigned char\n    *binaryProgram;\n\n  status=openCL_library->clGetProgramInfo(device->program,\n    CL_PROGRAM_BINARY_SIZES,sizeof(size_t),&binaryProgramSize,NULL);\n  if (status != CL_SUCCESS)\n    return;\n\n  binaryProgram=(unsigned char*) AcquireMagickMemory(binaryProgramSize);\n  status=openCL_library->clGetProgramInfo(device->program,\n    CL_PROGRAM_BINARIES,sizeof(unsigned char*),&binaryProgram,NULL);\n  if (status == CL_SUCCESS)\n    (void) BlobToFile(filename,binaryProgram,binaryProgramSize,exception);\n  binaryProgram=(unsigned char *) RelinquishMagickMemory(binaryProgram);\n}\n\nstatic MagickBooleanType LoadCachedOpenCLKernel(MagickCLDevice device,\n  const char *filename)\n{\n  cl_int\n    binaryStatus,\n    status;\n\n  ExceptionInfo\n    *exception;\n\n  size_t\n    length;\n\n  unsigned char\n    *binaryProgram;\n\n  exception=AcquireExceptionInfo();\n  binaryProgram=(unsigned char *) FileToBlob(filename,~0UL,&length,exception);\n  exception=DestroyExceptionInfo(exception);\n  if (binaryProgram == (unsigned char *) NULL)\n    return(MagickFalse);\n  device->program=openCL_library->clCreateProgramWithBinary(device->context,1,\n    &device->deviceID,&length,(const unsigned char**)&binaryProgram,\n    &binaryStatus,&status);\n  binaryProgram=(unsigned char *) RelinquishMagickMemory(binaryProgram);\n  return((status != CL_SUCCESS) || (binaryStatus != CL_SUCCESS) ? MagickFalse :\n    MagickTrue);\n}\n\nstatic void LogOpenCLBuildFailure(MagickCLDevice device,const char *kernel,\n  ExceptionInfo *exception)\n{\n  char\n    filename[MagickPathExtent],\n    *log;\n\n  size_t\n    logSize;\n\n  (void) FormatLocaleString(filename,MagickPathExtent,\"%s%s%s\",\n    GetOpenCLCacheDirectory(),DirectorySeparator,\"magick_badcl.cl\");\n\n  (void) remove_utf8(filename);\n  (void) BlobToFile(filename,kernel,strlen(kernel),exception);\n\n  openCL_library->clGetProgramBuildInfo(device->program,device->deviceID,\n    CL_PROGRAM_BUILD_LOG,0,NULL,&logSize);\n  log=(char*)AcquireMagickMemory(logSize);\n  openCL_library->clGetProgramBuildInfo(device->program,device->deviceID,\n    CL_PROGRAM_BUILD_LOG,logSize,log,&logSize);\n\n  (void) FormatLocaleString(filename,MagickPathExtent,\"%s%s%s\",\n    GetOpenCLCacheDirectory(),DirectorySeparator,\"magick_badcl.log\");\n\n  (void) remove_utf8(filename);\n  (void) BlobToFile(filename,log,logSize,exception);\n}\n\nstatic MagickBooleanType CompileOpenCLKernel(MagickCLDevice device,\n  const char *kernel,const char *options,size_t signature,\n  ExceptionInfo *exception)\n{\n  char\n    deviceName[MagickPathExtent],\n    filename[MagickPathExtent],\n    *ptr;\n\n  cl_int\n    status;\n\n  MagickBooleanType\n    loaded;\n\n  size_t\n    length;\n\n  (void) CopyMagickString(deviceName,device->name,MagickPathExtent);\n  ptr=deviceName;\n  /* Strip out illegal characters for file names */\n  while (*ptr != '\\0')\n  {\n    if ((*ptr == ' ') || (*ptr == '\\\\') || (*ptr == '/') || (*ptr == ':') ||\n        (*ptr == '*') || (*ptr == '?') || (*ptr == '\"') || (*ptr == '<') ||\n        (*ptr == '>' || *ptr == '|'))\n      *ptr = '_';\n    ptr++;\n  }\n  (void) FormatLocaleString(filename,MagickPathExtent,\n    \"%s%s%s_%s_%08x_%.20g.bin\",GetOpenCLCacheDirectory(),\n    DirectorySeparator,\"magick_opencl\",deviceName,signature,\n    (double) sizeof(char*)*8);\n  loaded=LoadCachedOpenCLKernel(device,filename);\n  if (loaded == MagickFalse)\n    {\n      /* Binary CL program unavailable, compile the program from source */\n      length=strlen(kernel);\n      device->program=openCL_library->clCreateProgramWithSource(\n        device->context,1,&kernel,&length,&status);\n      if (status != CL_SUCCESS)\n        return(MagickFalse);\n    }\n\n  status=openCL_library->clBuildProgram(device->program,1,&device->deviceID,\n    options,NULL,NULL);\n  if (status != CL_SUCCESS)\n  {\n    (void) ThrowMagickException(exception,GetMagickModule(),DelegateWarning,\n      \"clBuildProgram failed.\",\"(%d)\",(int)status);\n    LogOpenCLBuildFailure(device,kernel,exception);\n    return(MagickFalse);\n  }\n\n  /* Save the binary to a file to avoid re-compilation of the kernels */\n  if (loaded == MagickFalse)\n    CacheOpenCLKernel(device,filename,exception);\n\n  return(MagickTrue);\n}\n\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n+   C o p y M a g i c k C L C a c h e I n f o                                 %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  CopyMagickCLCacheInfo() copies the memory from the device into host memory.\n%\n%  The format of the CopyMagickCLCacheInfo method is:\n%\n%      void CopyMagickCLCacheInfo(MagickCLCacheInfo info)\n%\n%  A description of each parameter follows:\n%\n%    o info: the OpenCL cache info.\n%\n*/\nMagickPrivate MagickCLCacheInfo CopyMagickCLCacheInfo(MagickCLCacheInfo info)\n{\n  cl_command_queue\n    queue;\n\n  Quantum\n    *pixels;\n\n  if (info == (MagickCLCacheInfo) NULL)\n    return((MagickCLCacheInfo) NULL);\n  if (info->event_count > 0)\n    {\n      queue=AcquireOpenCLCommandQueue(info->device);\n      pixels=openCL_library->clEnqueueMapBuffer(queue,info->buffer,CL_TRUE,\n        CL_MAP_READ | CL_MAP_WRITE,0,info->length,info->event_count,\n        info->events,(cl_event *) NULL,(cl_int *) NULL);\n      assert(pixels == info->pixels);\n      ReleaseOpenCLCommandQueue(info->device,queue);\n    }\n  return(RelinquishMagickCLCacheInfo(info,MagickFalse));\n}\n\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n+   D u m p O p e n C L P r o f i l e D a t a                                 %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  DumpOpenCLProfileData() dumps the kernel profile data.\n%\n%  The format of the DumpProfileData method is:\n%\n%      void DumpProfileData()\n%\n*/\n\nMagickPrivate void DumpOpenCLProfileData()\n{\n#define OpenCLLog(message) \\\n   fwrite(message,sizeof(char),strlen(message),log); \\\n   fwrite(\"\\n\",sizeof(char),1,log);\n\n  char\n    buf[4096],\n    filename[MagickPathExtent],\n    indent[160];\n\n  FILE\n    *log;\n\n  MagickCLEnv\n    clEnv;\n\n  size_t\n    i,\n    j;\n\n  clEnv=GetCurrentOpenCLEnv();\n  if (clEnv == (MagickCLEnv) NULL)\n    return;\n\n  for (i = 0; i < clEnv->number_devices; i++)\n    if (clEnv->devices[i]->profile_kernels != MagickFalse)\n      break;\n  if (i == clEnv->number_devices)\n    return;\n\n  (void) FormatLocaleString(filename,MagickPathExtent,\"%s%s%s\",\n    GetOpenCLCacheDirectory(),DirectorySeparator,\"ImageMagickOpenCL.log\");\n\n  log=fopen_utf8(filename,\"wb\");\n\n  for (i = 0; i < clEnv->number_devices; i++)\n  {\n    MagickCLDevice\n      device;\n\n    device=clEnv->devices[i];\n    if ((device->profile_kernels == MagickFalse) ||\n        (device->profile_records == (KernelProfileRecord *) NULL))\n      continue;\n\n    OpenCLLog(\"====================================================\");\n    fprintf(log,\"Device:  %s\\n\",device->name);\n    fprintf(log,\"Version: %s\\n\",device->version);\n    OpenCLLog(\"====================================================\");\n    OpenCLLog(\"                     average   calls     min     max\");\n    OpenCLLog(\"                     -------   -----     ---     ---\");\n    j=0;\n    while (device->profile_records[j] != (KernelProfileRecord) NULL)\n    {\n      KernelProfileRecord\n        profile;\n\n      profile=device->profile_records[j];\n      strcpy(indent,\"                    \");\n      strncpy(indent,profile->kernel_name,MagickMin(strlen(\n        profile->kernel_name),strlen(indent)-1));\n      sprintf(buf,\"%s %7d %7d %7d %7d\",indent,(int) (profile->total/\n        profile->count),(int) profile->count,(int) profile->min,\n        (int) profile->max);\n      OpenCLLog(buf);\n      j++;\n    }\n    OpenCLLog(\"====================================================\");\n    fwrite(\"\\n\\n\",sizeof(char),2,log);\n  }\n  fclose(log);\n}\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n+   E n q u e u e O p e n C L K e r n e l                                     %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  EnqueueOpenCLKernel() enques the specified kernel and registers the OpenCL\n%  events with the images.\n%\n%  The format of the EnqueueOpenCLKernel method is:\n%\n%      MagickBooleanType EnqueueOpenCLKernel(cl_kernel kernel,cl_uint work_dim,\n%        const size_t *global_work_offset,const size_t *global_work_size,\n%        const size_t *local_work_size,const Image *input_image,\n%        const Image *output_image,ExceptionInfo *exception)\n%\n%  A description of each parameter follows:\n%\n%    o kernel: the OpenCL kernel.\n%\n%    o work_dim: the number of dimensions used to specify the global work-items\n%                and work-items in the work-group.\n%\n%    o offset: can be used to specify an array of work_dim unsigned values\n%              that describe the offset used to calculate the global ID of a\n%              work-item.\n%\n%    o gsize: points to an array of work_dim unsigned values that describe the\n%             number of global work-items in work_dim dimensions that will\n%             execute the kernel function.\n%\n%    o lsize: points to an array of work_dim unsigned values that describe the\n%             number of work-items that make up a work-group that will execute\n%             the kernel specified by kernel.\n%\n%    o input_image: the input image of the operation.\n%\n%    o output_image: the output or secondairy image of the operation.\n%\n%    o exception: return any errors or warnings in this structure.\n%\n*/\n\nstatic void RegisterCacheEvent(MagickCLCacheInfo info,cl_event event)\n{\n  assert(info != (MagickCLCacheInfo) NULL);\n  assert(event != (cl_event) NULL);\n  if (info->events == (cl_event *) NULL)\n    {\n      info->events=AcquireMagickMemory(sizeof(*info->events));\n      info->event_count=1;\n    }\n  else\n    info->events=ResizeQuantumMemory(info->events,++info->event_count,\n      sizeof(*info->events));\n  if (info->events == (cl_event *) NULL)\n    ThrowFatalException(ResourceLimitFatalError,\"MemoryAllocationFailed\");\n  info->events[info->event_count-1]=event;\n  openCL_library->clRetainEvent(event);\n}\n\nMagickPrivate MagickBooleanType EnqueueOpenCLKernel(cl_command_queue queue,\n  cl_kernel kernel,cl_uint work_dim,const size_t *offset,const size_t *gsize,\n  const size_t *lsize,const Image *input_image,const Image *output_image,\n  ExceptionInfo *exception)\n{\n  CacheInfo\n    *output_info,\n    *input_info;\n\n  cl_event\n    event,\n    *events;\n\n  cl_int\n    status;\n\n  cl_uint\n    event_count;\n\n  assert(input_image != (const Image *) NULL);\n  input_info=(CacheInfo *) input_image->cache;\n  assert(input_info != (CacheInfo *) NULL);\n  assert(input_info->opencl != (MagickCLCacheInfo) NULL);\n  event_count=input_info->opencl->event_count;\n  events=input_info->opencl->events;\n  output_info=(CacheInfo *) NULL;\n  if (output_image != (const Image *) NULL)\n    {\n      output_info=(CacheInfo *) output_image->cache;\n      assert(output_info != (CacheInfo *) NULL);\n      assert(output_info->opencl != (MagickCLCacheInfo) NULL);\n      if (output_info->opencl->event_count > 0)\n        {\n          ssize_t\n            i;\n\n          event_count+=output_info->opencl->event_count;\n          events=AcquireQuantumMemory(event_count,sizeof(*events));\n          if (events == (cl_event *) NULL)\n            return(MagickFalse);\n          for (i=0; i < (ssize_t) event_count; i++)\n          {\n            if (i < (ssize_t) input_info->opencl->event_count)\n              events[i]=input_info->opencl->events[i];\n            else\n              events[i]=output_info->opencl->events[i-\n                input_info->opencl->event_count];\n          }\n        }\n    }\n  status=openCL_library->clEnqueueNDRangeKernel(queue,kernel,work_dim,offset,\n    gsize,lsize,event_count,events,&event);\n  if ((output_info != (CacheInfo *) NULL) &&\n      (output_info->opencl->event_count > 0))\n    events=(cl_event *) RelinquishMagickMemory(events);\n  if (status != CL_SUCCESS)\n    {\n      (void) OpenCLThrowMagickException(input_info->opencl->device,exception,\n        GetMagickModule(),ResourceLimitWarning,\n        \"clEnqueueNDRangeKernel failed.\",\"'%s'\",\".\");\n      return(MagickFalse);\n    }\n  if (RecordProfileData(input_info->opencl->device,kernel,event) == MagickFalse)\n    {\n      RegisterCacheEvent(input_info->opencl,event);\n      if (output_info != (CacheInfo *) NULL)\n        RegisterCacheEvent(output_info->opencl,event);\n    }\n  openCL_library->clReleaseEvent(event);\n  return(MagickTrue);\n}\n\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n+   G e t C u r r u n t O p e n C L E n v                                     %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  GetCurrentOpenCLEnv() returns the current OpenCL env\n%\n%  The format of the GetCurrentOpenCLEnv method is:\n%\n%      MagickCLEnv GetCurrentOpenCLEnv()\n%\n*/\n\nMagickPrivate MagickCLEnv GetCurrentOpenCLEnv(void)\n{\n  if (default_CLEnv != (MagickCLEnv) NULL)\n  {\n    if ((default_CLEnv->benchmark_thread_id != (MagickThreadType) 0) &&\n        (default_CLEnv->benchmark_thread_id != GetMagickThreadId()))\n      return((MagickCLEnv) NULL);\n    else\n      return(default_CLEnv);\n  }\n\n  if (GetOpenCLCacheDirectory() == (char *) NULL)\n    return((MagickCLEnv) NULL);\n\n  if (openCL_lock == (SemaphoreInfo *) NULL)\n    ActivateSemaphoreInfo(&openCL_lock);\n\n  LockSemaphoreInfo(openCL_lock);\n  if (default_CLEnv == (MagickCLEnv) NULL)\n    default_CLEnv=AcquireMagickCLEnv();\n  UnlockSemaphoreInfo(openCL_lock);\n\n  return(default_CLEnv);\n}\n\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   G e t O p e n C L D e v i c e B e n c h m a r k D u r a t i o n           %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  GetOpenCLDeviceBenchmarkScore() returns the score of the benchmark for the\n%  device. The score is determined by the duration of the micro benchmark so\n%  that means a lower score is better than a higher score.\n%\n%  The format of the GetOpenCLDeviceBenchmarkScore method is:\n%\n%      double GetOpenCLDeviceBenchmarkScore(const MagickCLDevice device)\n%\n%  A description of each parameter follows:\n%\n%    o device: the OpenCL device.\n*/\n\nMagickExport double GetOpenCLDeviceBenchmarkScore(\n  const MagickCLDevice device)\n{\n  if (device == (MagickCLDevice) NULL)\n    return(MAGICKCORE_OPENCL_UNDEFINED_SCORE);\n  return(device->score);\n}\n\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   G e t O p e n C L D e v i c e E n a b l e d                               %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  GetOpenCLDeviceEnabled() returns true if the device is enabled.\n%\n%  The format of the GetOpenCLDeviceEnabled method is:\n%\n%      MagickBooleanType GetOpenCLDeviceEnabled(const MagickCLDevice device)\n%\n%  A description of each parameter follows:\n%\n%    o device: the OpenCL device.\n*/\n\nMagickExport MagickBooleanType GetOpenCLDeviceEnabled(\n  const MagickCLDevice device)\n{\n  if (device == (MagickCLDevice) NULL)\n    return(MagickFalse);\n  return(device->enabled);\n}\n\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   G e t O p e n C L D e v i c e N a m e                                     %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  GetOpenCLDeviceName() returns the name of the device.\n%\n%  The format of the GetOpenCLDeviceName method is:\n%\n%      const char *GetOpenCLDeviceName(const MagickCLDevice device)\n%\n%  A description of each parameter follows:\n%\n%    o device: the OpenCL device.\n*/\n\nMagickExport const char *GetOpenCLDeviceName(const MagickCLDevice device)\n{\n  if (device == (MagickCLDevice) NULL)\n    return((const char *) NULL);\n  return(device->name);\n}\n\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   G e t O p e n C L D e v i c e s                                           %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  GetOpenCLDevices() returns the devices of the OpenCL environment at sets the\n%  value of length to the number of devices that are available.\n%\n%  The format of the GetOpenCLDevices method is:\n%\n%      const MagickCLDevice *GetOpenCLDevices(size_t *length,\n%        ExceptionInfo *exception)\n%\n%  A description of each parameter follows:\n%\n%    o length: the number of device.\n%\n%    o exception: return any errors or warnings in this structure.\n%\n*/\n\nMagickExport MagickCLDevice *GetOpenCLDevices(size_t *length,\n  ExceptionInfo *exception)\n{\n  MagickCLEnv\n    clEnv;\n\n  clEnv=GetCurrentOpenCLEnv();\n  if (clEnv == (MagickCLEnv) NULL)\n    {\n      if (length != (size_t *) NULL)\n        *length=0;\n      return((MagickCLDevice *) NULL);\n    }\n  InitializeOpenCL(clEnv,exception);\n  if (length != (size_t *) NULL)\n    *length=clEnv->number_devices;\n  return(clEnv->devices);\n}\n\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   G e t O p e n C L D e v i c e T y p e                                     %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  GetOpenCLDeviceType() returns the type of the device.\n%\n%  The format of the GetOpenCLDeviceType method is:\n%\n%      MagickCLDeviceType GetOpenCLDeviceType(const MagickCLDevice device)\n%\n%  A description of each parameter follows:\n%\n%    o device: the OpenCL device.\n*/\n\nMagickExport MagickCLDeviceType GetOpenCLDeviceType(\n  const MagickCLDevice device)\n{\n  if (device == (MagickCLDevice) NULL)\n    return(UndefinedCLDeviceType);\n  if (device->type == CL_DEVICE_TYPE_GPU)\n    return(GpuCLDeviceType);\n  if (device->type == CL_DEVICE_TYPE_CPU)\n    return(CpuCLDeviceType);\n  return(UndefinedCLDeviceType);\n}\n\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   G e t O p e n C L D e v i c e V e r s i o n                               %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  GetOpenCLDeviceVersion() returns the version of the device.\n%\n%  The format of the GetOpenCLDeviceName method is:\n%\n%      const char *GetOpenCLDeviceVersion(MagickCLDevice device)\n%\n%  A description of each parameter follows:\n%\n%    o device: the OpenCL device.\n*/\n\nMagickExport const char *GetOpenCLDeviceVersion(const MagickCLDevice device)\n{\n  if (device == (MagickCLDevice) NULL)\n    return((const char *) NULL);\n  return(device->version);\n}\n\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   G e t O p e n C L E n a b l e d                                           %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  GetOpenCLEnabled() returns true if OpenCL acceleration is enabled.\n%\n%  The format of the GetOpenCLEnabled method is:\n%\n%      MagickBooleanType GetOpenCLEnabled()\n%\n*/\n\nMagickExport MagickBooleanType GetOpenCLEnabled(void)\n{\n  MagickCLEnv\n    clEnv;\n\n  clEnv=GetCurrentOpenCLEnv();\n  if (clEnv == (MagickCLEnv) NULL)\n    return(MagickFalse);\n  return(clEnv->enabled);\n}\n\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   G e t O p e n C L K e r n e l P r o f i l e R e c o r d s                 %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  GetOpenCLKernelProfileRecords() returns the profile records for the\n%  specified device and sets length to the number of profile records.\n%\n%  The format of the GetOpenCLKernelProfileRecords method is:\n%\n%      const KernelProfileRecord *GetOpenCLKernelProfileRecords(size *length)\n%\n%  A description of each parameter follows:\n%\n%    o length: the number of profiles records.\n*/\n\nMagickExport const KernelProfileRecord *GetOpenCLKernelProfileRecords(\n  const MagickCLDevice device,size_t *length)\n{\n  if ((device == (const MagickCLDevice) NULL) || (device->profile_records ==\n      (KernelProfileRecord *) NULL))\n  {\n    if (length != (size_t *) NULL)\n      *length=0;\n    return((const KernelProfileRecord *) NULL);\n  }\n  if (length != (size_t *) NULL)\n    {\n      *length=0;\n      LockSemaphoreInfo(device->lock);\n      while (device->profile_records[*length] != (KernelProfileRecord) NULL)\n        *length=*length+1;\n      UnlockSemaphoreInfo(device->lock);\n    }\n  return(device->profile_records);\n}\n\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   H a s O p e n C L D e v i c e s                                           %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  HasOpenCLDevices() checks if the OpenCL environment has devices that are\n%  enabled and compiles the kernel for the device when necessary. False will be\n%  returned if no enabled devices could be found\n%\n%  The format of the HasOpenCLDevices method is:\n%\n%    MagickBooleanType HasOpenCLDevices(MagickCLEnv clEnv,\n%      ExceptionInfo exception)\n%\n%  A description of each parameter follows:\n%\n%    o clEnv: the OpenCL environment.\n%\n%    o exception: return any errors or warnings in this structure.\n%\n*/\n\nstatic MagickBooleanType HasOpenCLDevices(MagickCLEnv clEnv,\n  ExceptionInfo *exception)\n{\n  char\n    *accelerateKernelsBuffer,\n    options[MagickPathExtent];\n\n  MagickStatusType\n    status;\n\n  size_t\n    i;\n\n  size_t\n    signature;\n\n  /* Check if there are enabled devices */\n  for (i = 0; i < clEnv->number_devices; i++)\n  {\n    if ((clEnv->devices[i]->enabled != MagickFalse))\n      break;\n  }\n  if (i == clEnv->number_devices)\n    return(MagickFalse);\n\n  /* Check if we need to compile a kernel for one of the devices */\n  status=MagickTrue;\n  for (i = 0; i < clEnv->number_devices; i++)\n  {\n    if ((clEnv->devices[i]->enabled != MagickFalse) &&\n        (clEnv->devices[i]->program == (cl_program) NULL))\n    {\n      status=MagickFalse;\n      break;\n    }\n  }\n  if (status != MagickFalse)\n    return(MagickTrue);\n\n  /* Get additional options */\n  (void) FormatLocaleString(options,MaxTextExtent,CLOptions,\n    (float)QuantumRange,(float)QuantumScale,(float)CLCharQuantumScale,\n    (float)MagickEpsilon,(float)MagickPI,(unsigned int)MaxMap,\n    (unsigned int)MAGICKCORE_QUANTUM_DEPTH);\n\n  signature=StringSignature(options);\n  accelerateKernelsBuffer=(char*) AcquireMagickMemory(\n    strlen(accelerateKernels)+strlen(accelerateKernels2)+1);\n  if (accelerateKernelsBuffer == (char*) NULL)\n    return(MagickFalse);\n  sprintf(accelerateKernelsBuffer,\"%s%s\",accelerateKernels,accelerateKernels2);\n  signature^=StringSignature(accelerateKernelsBuffer);\n\n  status=MagickTrue;\n  for (i = 0; i < clEnv->number_devices; i++)\n  {\n    MagickCLDevice\n      device;\n\n    size_t\n      device_signature;\n\n    device=clEnv->devices[i];\n    if ((device->enabled == MagickFalse) ||\n        (device->program != (cl_program) NULL))\n      continue;\n\n    LockSemaphoreInfo(device->lock);\n    if (device->program != (cl_program) NULL)\n    {\n      UnlockSemaphoreInfo(device->lock);\n      continue;\n    }\n    device_signature=signature;\n    device_signature^=StringSignature(device->platform_name);\n    status=CompileOpenCLKernel(device,accelerateKernelsBuffer,options,\n      device_signature,exception);\n    UnlockSemaphoreInfo(device->lock);\n    if (status == MagickFalse)\n      break;\n  }\n  accelerateKernelsBuffer=RelinquishMagickMemory(accelerateKernelsBuffer);\n  return(status);\n}\n\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n+   I n i t i a l i z e O p e n C L                                           %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  InitializeOpenCL() is used to initialize the OpenCL environment. This method\n%  makes sure the devices are propertly initialized and benchmarked.\n%\n%  The format of the InitializeOpenCL method is:\n%\n%    MagickBooleanType InitializeOpenCL(ExceptionInfo exception)\n%\n%  A description of each parameter follows:\n%\n%    o exception: return any errors or warnings in this structure.\n%\n*/\n\nstatic cl_uint GetOpenCLDeviceCount(MagickCLEnv clEnv,cl_platform_id platform)\n{\n  char\n    version[MagickPathExtent];\n\n  cl_uint\n    num;\n\n  if (clEnv->library->clGetPlatformInfo(platform,CL_PLATFORM_VERSION,\n        MagickPathExtent,version,NULL) != CL_SUCCESS)\n    return(0);\n  if (strncmp(version, \"OpenCL 1.0 \", 11) == 0)\n    return(0);\n  if (clEnv->library->clGetDeviceIDs(platform,\n        CL_DEVICE_TYPE_CPU|CL_DEVICE_TYPE_GPU,0,NULL,&num) != CL_SUCCESS)\n    return(0);\n  return(num);\n}\n\nstatic void LoadOpenCLDevices(MagickCLEnv clEnv)\n{\n  cl_context_properties\n    properties[3];\n\n  cl_device_id\n    *devices;\n\n  cl_int\n    status;\n\n  cl_platform_id\n    *platforms;\n\n  cl_uint\n    i,\n    j,\n    next,\n    number_devices,\n    number_platforms;\n\n  size_t\n    length;\n\n  number_platforms=0;\n  if (openCL_library->clGetPlatformIDs(0,NULL,&number_platforms) != CL_SUCCESS)\n    return;\n  if (number_platforms == 0)\n    return;\n  platforms=(cl_platform_id *) AcquireMagickMemory(number_platforms*\n    sizeof(cl_platform_id));\n  if (platforms == (cl_platform_id *) NULL)\n    return;\n  if (openCL_library->clGetPlatformIDs(number_platforms,platforms,NULL) != CL_SUCCESS)\n    {\n       platforms=(cl_platform_id *) RelinquishMagickMemory(platforms);\n       return;\n    }\n  for (i = 0; i < number_platforms; i++)\n  {\n    number_devices=GetOpenCLDeviceCount(clEnv,platforms[i]);\n    if (number_devices == 0)\n      platforms[i]=(cl_platform_id) NULL;\n    else\n      clEnv->number_devices+=number_devices;\n  }\n  if (clEnv->number_devices == 0)\n    {\n      platforms=(cl_platform_id *) RelinquishMagickMemory(platforms);\n      return;\n    }\n  clEnv->devices=(MagickCLDevice *) AcquireQuantumMemory(clEnv->number_devices,\n    sizeof(MagickCLDevice));\n  if (clEnv->devices == (MagickCLDevice *) NULL)\n    {\n      RelinquishMagickCLDevices(clEnv);\n      platforms=(cl_platform_id *) RelinquishMagickMemory(platforms);\n      return;\n    }\n  (void) ResetMagickMemory(clEnv->devices,0,clEnv->number_devices*\n    sizeof(MagickCLDevice));\n  devices=(cl_device_id *) AcquireQuantumMemory(clEnv->number_devices,\n    sizeof(cl_device_id));\n  if (devices == (cl_device_id *) NULL)\n    {\n      platforms=(cl_platform_id *) RelinquishMagickMemory(platforms);\n      RelinquishMagickCLDevices(clEnv);\n      return;\n    }\n  clEnv->number_contexts=(size_t) number_platforms;\n  clEnv->contexts=(cl_context *) AcquireQuantumMemory(clEnv->number_contexts,\n    sizeof(cl_context));\n  if (clEnv->contexts == (cl_context *) NULL)\n    {\n      devices=(cl_device_id *) RelinquishMagickMemory(devices);\n      platforms=(cl_platform_id *) RelinquishMagickMemory(platforms);\n      RelinquishMagickCLDevices(clEnv);\n      return;\n    }\n  next=0;\n  for (i = 0; i < number_platforms; i++)\n  {\n    if (platforms[i] == (cl_platform_id) NULL)\n      continue;\n\n    status=clEnv->library->clGetDeviceIDs(platforms[i],CL_DEVICE_TYPE_CPU | \n      CL_DEVICE_TYPE_GPU,clEnv->number_devices,devices,&number_devices);\n    if (status != CL_SUCCESS)\n      continue;\n\n    properties[0]=CL_CONTEXT_PLATFORM;\n    properties[1]=(cl_context_properties) platforms[i];\n    properties[2]=0;\n    clEnv->contexts[i]=openCL_library->clCreateContext(properties,number_devices,\n      devices,NULL,NULL,&status);\n    if (status != CL_SUCCESS)\n      continue;\n\n    for (j = 0; j < number_devices; j++,next++)\n    {\n      MagickCLDevice\n        device;\n\n      device=AcquireMagickCLDevice();\n      if (device == (MagickCLDevice) NULL)\n        break;\n\n      device->context=clEnv->contexts[i];\n      device->deviceID=devices[j];\n\n      openCL_library->clGetPlatformInfo(platforms[i],CL_PLATFORM_NAME,0,NULL,\n        &length);\n      device->platform_name=AcquireQuantumMemory(length,\n        sizeof(*device->platform_name));\n      openCL_library->clGetPlatformInfo(platforms[i],CL_PLATFORM_NAME,length,\n        device->platform_name,NULL);\n\n      openCL_library->clGetDeviceInfo(devices[j],CL_DEVICE_NAME,0,NULL,\n        &length);\n      device->name=AcquireQuantumMemory(length,sizeof(*device->name));\n      openCL_library->clGetDeviceInfo(devices[j],CL_DEVICE_NAME,length,\n        device->name,NULL);\n\n      openCL_library->clGetDeviceInfo(devices[j],CL_DRIVER_VERSION,0,NULL,\n        &length);\n      device->version=AcquireQuantumMemory(length,sizeof(*device->version));\n      openCL_library->clGetDeviceInfo(devices[j],CL_DRIVER_VERSION,length,\n        device->version,NULL);\n\n      openCL_library->clGetDeviceInfo(devices[j],CL_DEVICE_MAX_CLOCK_FREQUENCY,\n        sizeof(cl_uint),&device->max_clock_frequency,NULL);\n\n      openCL_library->clGetDeviceInfo(devices[j],CL_DEVICE_MAX_COMPUTE_UNITS,\n        sizeof(cl_uint),&device->max_compute_units,NULL);\n\n      openCL_library->clGetDeviceInfo(devices[j],CL_DEVICE_TYPE,\n        sizeof(cl_device_type),&device->type,NULL);\n\n      openCL_library->clGetDeviceInfo(devices[j],CL_DEVICE_LOCAL_MEM_SIZE,\n        sizeof(cl_ulong),&device->local_memory_size,NULL);\n\n      clEnv->devices[next]=device;\n    }\n  }\n  if (next != clEnv->number_devices)\n    RelinquishMagickCLDevices(clEnv);\n  platforms=(cl_platform_id *) RelinquishMagickMemory(platforms);\n  devices=(cl_device_id *) RelinquishMagickMemory(devices);\n}\n\nMagickPrivate MagickBooleanType InitializeOpenCL(MagickCLEnv clEnv,\n  ExceptionInfo *exception)\n{\n  LockSemaphoreInfo(clEnv->lock);\n  if (clEnv->initialized != MagickFalse)\n    {\n      UnlockSemaphoreInfo(clEnv->lock);\n      return(HasOpenCLDevices(clEnv,exception));\n    }\n  if (LoadOpenCLLibrary() != MagickFalse)\n    {\n      clEnv->library=openCL_library;\n      LoadOpenCLDevices(clEnv);\n      if (clEnv->number_devices > 0)\n        AutoSelectOpenCLDevices(clEnv,exception);\n    }\n  clEnv->initialized=MagickTrue;\n  UnlockSemaphoreInfo(clEnv->lock);\n  return(HasOpenCLDevices(clEnv,exception));\n}\n\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   L o a d O p e n C L L i b r a r y                                         %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  LoadOpenCLLibrary() load and binds the OpenCL library.\n%\n%  The format of the LoadOpenCLLibrary method is:\n%\n%    MagickBooleanType LoadOpenCLLibrary(void)\n%\n*/\n\nvoid *OsLibraryGetFunctionAddress(void *library,const char *functionName)\n{\n  if ((library == (void *) NULL) || (functionName == (const char *) NULL))\n    return (void *) NULL;\n#ifdef MAGICKCORE_WINDOWS_SUPPORT\n    return (void *) GetProcAddress((HMODULE)library,functionName);\n#else\n    return (void *) dlsym(library,functionName);\n#endif\n}\n\nstatic MagickBooleanType BindOpenCLFunctions()\n{\n  void\n    *library;\n\n#ifdef MAGICKCORE_OPENCL_MACOSX\n#define BIND(X) openCL_library->X= &X;\n#else\n  (void) ResetMagickMemory(openCL_library,0,sizeof(MagickLibrary));\n#ifdef MAGICKCORE_WINDOWS_SUPPORT\n  library=(void *)LoadLibraryA(\"OpenCL.dll\");\n#else\n  library=(void *)dlopen(\"libOpenCL.so\", RTLD_NOW);\n#endif\n\n#define BIND(X) \\\n  if ((openCL_library->X=(MAGICKpfn_##X)OsLibraryGetFunctionAddress(library,#X)) == NULL) \\\n    return(MagickFalse);\n#endif\n\n  BIND(clGetPlatformIDs);\n  BIND(clGetPlatformInfo);\n\n  BIND(clGetDeviceIDs);\n  BIND(clGetDeviceInfo);\n\n  BIND(clCreateBuffer);\n  BIND(clReleaseMemObject);\n\n  BIND(clCreateContext);\n  BIND(clReleaseContext);\n\n  BIND(clCreateCommandQueue);\n  BIND(clReleaseCommandQueue);\n  BIND(clFlush);\n  BIND(clFinish);\n\n  BIND(clCreateProgramWithSource);\n  BIND(clCreateProgramWithBinary);\n  BIND(clReleaseProgram);\n  BIND(clBuildProgram);\n  BIND(clGetProgramBuildInfo);\n  BIND(clGetProgramInfo);\n\n  BIND(clCreateKernel);\n  BIND(clReleaseKernel);\n  BIND(clSetKernelArg);\n  BIND(clGetKernelInfo);\n\n  BIND(clEnqueueReadBuffer);\n  BIND(clEnqueueMapBuffer);\n  BIND(clEnqueueUnmapMemObject);\n  BIND(clEnqueueNDRangeKernel);\n\n  BIND(clWaitForEvents);\n  BIND(clReleaseEvent);\n  BIND(clRetainEvent);\n  BIND(clSetEventCallback);\n\n  BIND(clGetEventProfilingInfo);\n\n  return(MagickTrue);\n}\n\nstatic MagickBooleanType LoadOpenCLLibrary(void)\n{\n  openCL_library=(MagickLibrary *) AcquireMagickMemory(sizeof(MagickLibrary));\n  if (openCL_library == (MagickLibrary *) NULL)\n    return(MagickFalse);\n\n  if (BindOpenCLFunctions() == MagickFalse)\n    {\n      openCL_library=(MagickLibrary *)RelinquishMagickMemory(openCL_library);\n      return(MagickFalse);\n    }\n\n  return(MagickTrue);\n}\n\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n+   O p e n C L T e r m i n u s                                               %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  AnnotateComponentTerminus() destroys the annotate component.\n%\n%  The format of the AnnotateComponentTerminus method is:\n%\n%      AnnotateComponentTerminus(void)\n%\n*/\n\nMagickPrivate void OpenCLTerminus()\n{\n  DumpOpenCLProfileData();\n  if (cache_directory != (char *) NULL)\n    cache_directory=DestroyString(cache_directory);\n  if (cache_directory_lock != (SemaphoreInfo *) NULL)\n    RelinquishSemaphoreInfo(&cache_directory_lock);\n  if (default_CLEnv != (MagickCLEnv) NULL)\n    default_CLEnv=RelinquishMagickCLEnv(default_CLEnv);\n  if (openCL_lock != (SemaphoreInfo *) NULL)\n    RelinquishSemaphoreInfo(&openCL_lock);\n  if (openCL_library != (MagickLibrary *) NULL)\n    openCL_library=(MagickLibrary *)RelinquishMagickMemory(openCL_library);\n}\n\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n+   O p e n C L T h r o w M a g i c k E x c e p t i o n                       %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  OpenCLThrowMagickException logs an OpenCL exception as determined by the log\n%  configuration file.  If an error occurs, MagickFalse is returned\n%  otherwise MagickTrue.\n%\n%  The format of the OpenCLThrowMagickException method is:\n%\n%      MagickBooleanType ThrowFileException(ExceptionInfo *exception,\n%        const char *module,const char *function,const size_t line,\n%        const ExceptionType severity,const char *tag,const char *format,...)\n%\n%  A description of each parameter follows:\n%\n%    o exception: the exception info.\n%\n%    o filename: the source module filename.\n%\n%    o function: the function name.\n%\n%    o line: the line number of the source module.\n%\n%    o severity: Specifies the numeric error category.\n%\n%    o tag: the locale tag.\n%\n%    o format: the output format.\n%\n*/\n\nMagickPrivate MagickBooleanType OpenCLThrowMagickException(\n  MagickCLDevice device,ExceptionInfo *exception,const char *module,\n  const char *function,const size_t line,const ExceptionType severity,\n  const char *tag,const char *format,...)\n{\n  MagickBooleanType\n    status;\n\n  assert(device != (MagickCLDevice) NULL);\n  assert(exception != (ExceptionInfo *) NULL);\n  assert(exception->signature == MagickCoreSignature);\n\n  status=MagickTrue;\n  if (severity != 0)\n  {\n    if (device->type == CL_DEVICE_TYPE_CPU)\n    {\n      /* Workaround for Intel OpenCL CPU runtime bug */\n      /* Turn off OpenCL when a problem is detected! */\n      if (strncmp(device->platform_name, \"Intel\",5) == 0)\n        default_CLEnv->enabled=MagickFalse;\n    }\n  }\n\n#ifdef OPENCLLOG_ENABLED\n  {\n    va_list\n      operands;\n    va_start(operands,format);\n    status=ThrowMagickExceptionList(exception,module,function,line,severity,tag,\n      format,operands);\n    va_end(operands);\n  }\n#else\n  magick_unreferenced(module);\n  magick_unreferenced(function);\n  magick_unreferenced(line);\n  magick_unreferenced(tag);\n  magick_unreferenced(format);\n#endif\n\n  return(status);\n}\n\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n+   R e c o r d P r o f i l e D a t a                                         %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  RecordProfileData() records profile data.\n%\n%  The format of the RecordProfileData method is:\n%\n%      void RecordProfileData(MagickCLDevice device,ProfiledKernels kernel,\n%        cl_event event)\n%\n%  A description of each parameter follows:\n%\n%    o device: the OpenCL device that did the operation.\n%\n%    o event: the event that contains the profiling data.\n%\n*/\n\nMagickPrivate MagickBooleanType RecordProfileData(MagickCLDevice device,\n  cl_kernel kernel,cl_event event)\n{\n  char\n    *name;\n\n  cl_int\n    status;\n\n  cl_ulong\n    elapsed,\n    end,\n    start;\n\n  KernelProfileRecord\n    profile_record;\n\n  size_t\n    i,\n    length;\n\n  if (device->profile_kernels == MagickFalse)\n    return(MagickFalse);\n  status=openCL_library->clWaitForEvents(1,&event);\n  if (status != CL_SUCCESS)\n    return(MagickFalse);\n  status=openCL_library->clGetKernelInfo(kernel,CL_KERNEL_FUNCTION_NAME,0,NULL,\n    &length);\n  if (status != CL_SUCCESS)\n    return(MagickTrue);\n  name=AcquireQuantumMemory(length,sizeof(*name));\n  if (name == (char *) NULL)\n    return(MagickTrue);\n  start=end=elapsed=0;\n  status=openCL_library->clGetKernelInfo(kernel,CL_KERNEL_FUNCTION_NAME,length,\n    name,(size_t *) NULL);\n  status|=openCL_library->clGetEventProfilingInfo(event,\n    CL_PROFILING_COMMAND_START,sizeof(cl_ulong),&start,NULL);\n  status|=openCL_library->clGetEventProfilingInfo(event,\n    CL_PROFILING_COMMAND_END,sizeof(cl_ulong),&end,NULL);\n  if (status != CL_SUCCESS)\n    {\n      name=DestroyString(name);\n      return(MagickTrue);\n    }\n  start/=1000; // usecs\n  end/=1000;   // usecs\n  elapsed=end-start;\n  LockSemaphoreInfo(device->lock);\n  i=0;\n  profile_record=(KernelProfileRecord) NULL;\n  if (device->profile_records != (KernelProfileRecord *) NULL)\n    {\n      while (device->profile_records[i] != (KernelProfileRecord) NULL)\n      {\n        if (LocaleCompare(device->profile_records[i]->kernel_name,name) == 0)\n          {\n            profile_record=device->profile_records[i];\n            break;\n          }\n        i++;\n      }\n    }\n  if (profile_record != (KernelProfileRecord) NULL)\n    name=DestroyString(name);\n  else\n    {\n      profile_record=AcquireMagickMemory(sizeof(*profile_record));\n      (void) ResetMagickMemory(profile_record,0,sizeof(*profile_record));\n      profile_record->kernel_name=name;\n      device->profile_records=ResizeMagickMemory(device->profile_records,(i+2)*\n        sizeof(*device->profile_records));\n      device->profile_records[i]=profile_record;\n      device->profile_records[i+1]=(KernelProfileRecord) NULL;\n    }\n  if ((elapsed < profile_record->min) || (profile_record->count == 0))\n    profile_record->min=elapsed;\n  if (elapsed > profile_record->max)\n    profile_record->max=elapsed;\n  profile_record->total+=elapsed;\n  profile_record->count+=1;\n  UnlockSemaphoreInfo(device->lock);\n  return(MagickTrue);\n}\n\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n+  R e l e a s e O p e n C L C o m m a n d Q u e u e                          %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  ReleaseOpenCLCommandQueue() releases the OpenCL command queue\n%\n%  The format of the ReleaseOpenCLCommandQueue method is:\n%\n%      void ReleaseOpenCLCommandQueue(MagickCLDevice device,\n%        cl_command_queue queue)\n%\n%  A description of each parameter follows:\n%\n%    o device: the OpenCL device.\n%\n%    o queue: the OpenCL queue to be released.\n*/\n\nMagickPrivate void ReleaseOpenCLCommandQueue(MagickCLDevice device,\n  cl_command_queue queue)\n{\n  if (queue == (cl_command_queue) NULL)\n    return;\n\n  assert(device != (MagickCLDevice) NULL);\n  LockSemaphoreInfo(device->lock);\n  if ((device->profile_kernels != MagickFalse) ||\n      (device->command_queues_index >= MAGICKCORE_OPENCL_COMMAND_QUEUES-1))\n    {\n      UnlockSemaphoreInfo(device->lock);\n      openCL_library->clFinish(queue);\n      (void) openCL_library->clReleaseCommandQueue(queue);\n    }\n  else\n    {\n      openCL_library->clFlush(queue);\n      device->command_queues[++device->command_queues_index]=queue;\n      UnlockSemaphoreInfo(device->lock);\n    }\n}\n\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n+   R e l e a s e  M a g i c k C L D e v i c e                                %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  ReleaseOpenCLDevice() returns the OpenCL device to the environment\n%\n%  The format of the ReleaseOpenCLDevice method is:\n%\n%      void ReleaseOpenCLDevice(MagickCLDevice device)\n%\n%  A description of each parameter follows:\n%\n%    o device: the OpenCL device to be released.\n%\n*/\n\nMagickPrivate void ReleaseOpenCLDevice(MagickCLDevice device)\n{\n  assert(device != (MagickCLDevice) NULL);\n  LockSemaphoreInfo(openCL_lock);\n  device->requested--;\n  UnlockSemaphoreInfo(openCL_lock);\n}\n\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n+   R e l i n q u i s h M a g i c k C L C a c h e I n f o                     %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  RelinquishMagickCLCacheInfo() frees memory acquired with\n%  AcquireMagickCLCacheInfo()\n%\n%  The format of the RelinquishMagickCLCacheInfo method is:\n%\n%      MagickCLCacheInfo RelinquishMagickCLCacheInfo(MagickCLCacheInfo info,\n%        const MagickBooleanType relinquish_pixels)\n%\n%  A description of each parameter follows:\n%\n%    o info: the OpenCL cache info.\n%\n%    o relinquish_pixels: the pixels will be relinquish when set to true.\n%\n*/\nstatic void DestroyMagickCLCacheInfo(MagickCLCacheInfo info)\n{\n  ssize_t\n    i;\n\n  for (i=0; i < (ssize_t) info->event_count; i++)\n    openCL_library->clReleaseEvent(info->events[i]);\n  info->events=(cl_event *) RelinquishMagickMemory(info->events);\n  if (info->buffer != (cl_mem) NULL)\n    openCL_library->clReleaseMemObject(info->buffer);\n  ReleaseOpenCLDevice(info->device);\n  RelinquishMagickMemory(info);\n}\n\nstatic void CL_API_CALL DestroyMagickCLCacheInfoAndPixels(\n  cl_event magick_unused(event),\n  cl_int magick_unused(event_command_exec_status),void *user_data)\n{\n  MagickCLCacheInfo\n    info;\n\n  magick_unreferenced(event);\n  magick_unreferenced(event_command_exec_status);\n  info=(MagickCLCacheInfo) user_data;\n  (void) RelinquishAlignedMemory(info->pixels);\n  RelinquishMagickResource(MemoryResource,info->length);\n  DestroyMagickCLCacheInfo(info);\n}\n\nMagickPrivate MagickCLCacheInfo RelinquishMagickCLCacheInfo(\n  MagickCLCacheInfo info,const MagickBooleanType relinquish_pixels)\n{\n  if (info == (MagickCLCacheInfo) NULL)\n    return((MagickCLCacheInfo) NULL);\n  if (relinquish_pixels != MagickFalse)\n    {\n      if (info->event_count > 0)\n        openCL_library->clSetEventCallback(info->events[info->event_count-1],\n          CL_COMPLETE,&DestroyMagickCLCacheInfoAndPixels,info);\n      else\n        DestroyMagickCLCacheInfoAndPixels((cl_event) NULL,0,info);\n    }\n  else\n    DestroyMagickCLCacheInfo(info);\n  return((MagickCLCacheInfo) NULL);\n}\n\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   R e l i n q u i s h M a g i c k C L D e v i c e                           %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  RelinquishMagickCLDevice() releases the OpenCL device\n%\n%  The format of the RelinquishMagickCLDevice method is:\n%\n%      MagickCLDevice RelinquishMagickCLDevice(MagickCLDevice device)\n%\n%  A description of each parameter follows:\n%\n%    o device: the OpenCL device to be released.\n%\n*/\n\nstatic MagickCLDevice RelinquishMagickCLDevice(MagickCLDevice device)\n{\n  if (device == (MagickCLDevice) NULL)\n    return((MagickCLDevice) NULL);\n\n  device->platform_name=RelinquishMagickMemory(device->platform_name);\n  device->name=RelinquishMagickMemory(device->name);\n  device->version=RelinquishMagickMemory(device->version);\n  if (device->program != (cl_program) NULL)\n    (void) openCL_library->clReleaseProgram(device->program);\n  while (device->command_queues_index >= 0)\n    (void) openCL_library->clReleaseCommandQueue(\n      device->command_queues[device->command_queues_index--]);\n  RelinquishSemaphoreInfo(&device->lock);\n  return((MagickCLDevice) RelinquishMagickMemory(device));\n}\n\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   R e l i n q u i s h M a g i c k C L E n v                                 %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  RelinquishMagickCLEnv() releases the OpenCL environment\n%\n%  The format of the RelinquishMagickCLEnv method is:\n%\n%      MagickCLEnv RelinquishMagickCLEnv(MagickCLEnv device)\n%\n%  A description of each parameter follows:\n%\n%    o clEnv: the OpenCL environment to be released.\n%\n*/\n\nstatic MagickCLEnv RelinquishMagickCLEnv(MagickCLEnv clEnv)\n{\n  if (clEnv == (MagickCLEnv) NULL)\n    return((MagickCLEnv) NULL);\n\n  RelinquishSemaphoreInfo(&clEnv->lock);\n  RelinquishMagickCLDevices(clEnv);\n  if (clEnv->contexts != (cl_context *) NULL)\n    {\n      ssize_t\n        i;\n\n      for (i=0; i < clEnv->number_contexts; i++)\n         (void) openCL_library->clReleaseContext(clEnv->contexts[i]);\n      clEnv->contexts=(cl_context *) RelinquishMagickMemory(clEnv->contexts);\n    }\n  return((MagickCLEnv) RelinquishMagickMemory(clEnv));\n}\n\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n+   R e q u e s t O p e n C L D e v i c e                                     %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  RequestOpenCLDevice() returns one of the enabled OpenCL devices.\n%\n%  The format of the RequestOpenCLDevice method is:\n%\n%      MagickCLDevice RequestOpenCLDevice(MagickCLEnv clEnv)\n%\n%  A description of each parameter follows:\n%\n%    o clEnv: the OpenCL environment.\n*/\n\nMagickPrivate MagickCLDevice RequestOpenCLDevice(MagickCLEnv clEnv)\n{\n  MagickCLDevice\n    device;\n\n  double\n    score,\n    best_score;\n\n  size_t\n    i;\n\n  if (clEnv == (MagickCLEnv) NULL)\n    return((MagickCLDevice) NULL);\n\n  if (clEnv->number_devices == 1)\n  {\n    if (clEnv->devices[0]->enabled)\n      return(clEnv->devices[0]);\n    else\n      return((MagickCLDevice) NULL);\n  }\n\n  device=(MagickCLDevice) NULL;\n  best_score=0.0;\n  LockSemaphoreInfo(openCL_lock);\n  for (i = 0; i < clEnv->number_devices; i++)\n  {\n    if (clEnv->devices[i]->enabled == MagickFalse)\n      continue;\n\n    score=clEnv->devices[i]->score+(clEnv->devices[i]->score*\n      clEnv->devices[i]->requested);\n    if ((device == (MagickCLDevice) NULL) || (score < best_score))\n    {\n      device=clEnv->devices[i];\n      best_score=score;\n    }\n  }\n  if (device != (MagickCLDevice)NULL)\n    device->requested++;\n  UnlockSemaphoreInfo(openCL_lock);\n\n  return(device);\n}\n\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   S e t O p e n C L D e v i c e E n a b l e d                               %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  SetOpenCLDeviceEnabled() can be used to enable or disabled the device.\n%\n%  The format of the SetOpenCLDeviceEnabled method is:\n%\n%      void SetOpenCLDeviceEnabled(MagickCLDevice device,\n%        MagickBooleanType value)\n%\n%  A description of each parameter follows:\n%\n%    o device: the OpenCL device.\n%\n%    o value: determines if the device should be enabled or disabled.\n*/\n\nMagickExport void SetOpenCLDeviceEnabled(MagickCLDevice device,\n  const MagickBooleanType value)\n{\n  if (device == (MagickCLDevice) NULL)\n    return;\n  device->enabled=value;\n}\n\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   S e t O p e n C L K e r n e l P r o f i l e E n a b l e d                 %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  SetOpenCLKernelProfileEnabled() can be used to enable or disabled the\n%  kernel profiling of a device.\n%\n%  The format of the SetOpenCLKernelProfileEnabled method is:\n%\n%      void SetOpenCLKernelProfileEnabled(MagickCLDevice device,\n%        MagickBooleanType value)\n%\n%  A description of each parameter follows:\n%\n%    o device: the OpenCL device.\n%\n%    o value: determines if kernel profiling for the device should be enabled\n%             or disabled.\n*/\n\nMagickExport void SetOpenCLKernelProfileEnabled(MagickCLDevice device,\n  const MagickBooleanType value)\n{\n  if (device == (MagickCLDevice) NULL)\n    return;\n  device->profile_kernels=value;\n}\n\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   S e t O p e n C L E n a b l e d                                           %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  SetOpenCLEnabled() can be used to enable or disable OpenCL acceleration.\n%\n%  The format of the SetOpenCLEnabled method is:\n%\n%      void SetOpenCLEnabled(MagickBooleanType)\n%\n%  A description of each parameter follows:\n%\n%    o value: specify true to enable OpenCL acceleration\n*/\n\nMagickExport MagickBooleanType SetOpenCLEnabled(const MagickBooleanType value)\n{\n  MagickCLEnv\n    clEnv;\n\n  clEnv=GetCurrentOpenCLEnv();\n  if (clEnv == (MagickCLEnv) NULL)\n    return(MagickFalse);\n  clEnv->enabled=value;\n  return(clEnv->enabled);\n}\n\n#else\n\nMagickExport double GetOpenCLDeviceBenchmarkScore(\n  const MagickCLDevice magick_unused(device))\n{\n  magick_unreferenced(device);\n  return(0.0);\n}\n\nMagickExport MagickBooleanType GetOpenCLDeviceEnabled(\n  const MagickCLDevice magick_unused(device))\n{\n  magick_unreferenced(device);\n  return(MagickFalse);\n}\n\nMagickExport const char *GetOpenCLDeviceName(\n  const MagickCLDevice magick_unused(device))\n{\n  magick_unreferenced(device);\n  return((const char *) NULL);\n}\n\nMagickExport MagickCLDevice *GetOpenCLDevices(size_t *length,\n  ExceptionInfo *magick_unused(exception))\n{\n  magick_unreferenced(exception);\n  if (length != (size_t *) NULL)\n    *length=0;\n  return((MagickCLDevice *) NULL);\n}\n\nMagickExport MagickCLDeviceType GetOpenCLDeviceType(\n  const MagickCLDevice magick_unused(device))\n{\n  magick_unreferenced(device);\n  return(UndefinedCLDeviceType);\n}\n\nMagickExport const KernelProfileRecord *GetOpenCLKernelProfileRecords(\n  const MagickCLDevice magick_unused(device),size_t *length)\n{\n  magick_unreferenced(device);\n  if (length != (size_t *) NULL)\n    *length=0;\n  return((const KernelProfileRecord *) NULL);\n}\n\nMagickExport const char *GetOpenCLDeviceVersion(\n  const MagickCLDevice magick_unused(device))\n{\n  magick_unreferenced(device);\n  return((const char *) NULL);\n}\n\nMagickExport MagickBooleanType GetOpenCLEnabled(void)\n{\n  return(MagickFalse);\n}\n\nMagickExport void SetOpenCLDeviceEnabled(\n  MagickCLDevice magick_unused(device),\n  const MagickBooleanType magick_unused(value))\n{\n  magick_unreferenced(device);\n  magick_unreferenced(value);\n}\n\nMagickExport MagickBooleanType SetOpenCLEnabled(\n  const MagickBooleanType magick_unused(value))\n{\n  magick_unreferenced(value);\n  return(MagickFalse);\n}\n\nMagickExport void SetOpenCLKernelProfileEnabled(\n  MagickCLDevice magick_unused(device),\n  const MagickBooleanType magick_unused(value))\n{\n  magick_unreferenced(device);\n  magick_unreferenced(value);\n}\n#endif",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/MagickCore/nt-base.c": "/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%                                 N   N  TTTTT                                %\n%                                 NN  N    T                                  %\n%                                 N N N    T                                  %\n%                                 N  NN    T                                  %\n%                                 N   N    T                                  %\n%                                                                             %\n%                                                                             %\n%                   Windows NT Utility Methods for MagickCore                 %\n%                                                                             %\n%                               Software Design                               %\n%                                    Cristy                                   %\n%                                December 1996                                %\n%                                                                             %\n%                                                                             %\n%  Copyright 1999-2016 ImageMagick Studio LLC, a non-profit organization      %\n%  dedicated to making software imaging solutions freely available.           %\n%                                                                             %\n%  You may not use this file except in compliance with the License.  You may  %\n%  obtain a copy of the License at                                            %\n%                                                                             %\n%    http://www.imagemagick.org/script/license.php                            %\n%                                                                             %\n%  Unless required by applicable law or agreed to in writing, software        %\n%  distributed under the License is distributed on an \"AS IS\" BASIS,          %\n%  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   %\n%  See the License for the specific language governing permissions and        %\n%  limitations under the License.                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%\n*/\n/*\n  Include declarations.\n*/\n#include \"MagickCore/studio.h\"\n#if defined(MAGICKCORE_WINDOWS_SUPPORT)\n#include \"MagickCore/client.h\"\n#include \"MagickCore/exception-private.h\"\n#include \"MagickCore/locale_.h\"\n#include \"MagickCore/log.h\"\n#include \"MagickCore/magick.h\"\n#include \"MagickCore/memory_.h\"\n#include \"MagickCore/nt-base.h\"\n#include \"MagickCore/nt-base-private.h\"\n#include \"MagickCore/resource_.h\"\n#include \"MagickCore/resource-private.h\"\n#include \"MagickCore/timer.h\"\n#include \"MagickCore/string_.h\"\n#include \"MagickCore/string-private.h\"\n#include \"MagickCore/utility.h\"\n#include \"MagickCore/utility-private.h\"\n#include \"MagickCore/version.h\"\n#if defined(MAGICKCORE_LTDL_DELEGATE)\n#  include \"ltdl.h\"\n#endif\n#if defined(MAGICKCORE_CIPHER_SUPPORT)\n#include <ntsecapi.h>\n#include <wincrypt.h>\n#endif\n\f\n/*\n  Define declarations.\n*/\n#if !defined(MAP_FAILED)\n#define MAP_FAILED      ((void *)(LONG_PTR)-1)\n#endif\n\n/*\n  Typdef declarations.\n*/\n\n/*\n  We need to make sure only one instance is created for each process and that\n  is why we wrap the new/delete instance methods.\n\n  From: http://www.ghostscript.com/doc/current/API.htm\n  \"The Win32 DLL gsdll32.dll can be used by multiple programs simultaneously,\n   but only once within each process\"\n*/\ntypedef struct _NTGhostInfo\n{\n  void\n    (MagickDLLCall *delete_instance)(gs_main_instance *);\n\n  int\n    (MagickDLLCall *new_instance)(gs_main_instance **,void *);\n\n  MagickBooleanType\n    has_instance;\n} NTGhostInfo;\n\f\n/*\n  Static declarations.\n*/\n#if !defined(MAGICKCORE_LTDL_DELEGATE)\nstatic char\n  *lt_slsearchpath = (char *) NULL;\n#endif\n\nstatic NTGhostInfo\n  nt_ghost_info;\n\nstatic GhostInfo\n  ghost_info;\n\nstatic void\n  *ghost_handle = (void *) NULL;\n\nstatic SemaphoreInfo\n  *ghost_semaphore = (SemaphoreInfo *) NULL,\n  *winsock_semaphore = (SemaphoreInfo *) NULL;\n\nstatic WSADATA\n  *wsaData = (WSADATA*) NULL;\n\f\nstruct\n{\n  const HKEY\n    hkey;\n\n  const char\n    *name;\n}\nconst registry_roots[2] =\n{\n  { HKEY_CURRENT_USER,  \"HKEY_CURRENT_USER\"  },\n  { HKEY_LOCAL_MACHINE, \"HKEY_LOCAL_MACHINE\" }\n};\n\n/*\n  External declarations.\n*/\n#if !defined(MAGICKCORE_WINDOWS_SUPPORT)\nextern \"C\" BOOL WINAPI\n  DllMain(HINSTANCE handle,DWORD reason,LPVOID lpvReserved);\n#endif\n\nstatic void MagickDLLCall NTGhostscriptDeleteInstance(\n  gs_main_instance *instance)\n{\n  LockSemaphoreInfo(ghost_semaphore);\n  nt_ghost_info.delete_instance(instance);\n  nt_ghost_info.has_instance=MagickFalse;\n  UnlockSemaphoreInfo(ghost_semaphore);\n}\n\nstatic int MagickDLLCall NTGhostscriptNewInstance(gs_main_instance **pinstance,\n  void *caller_handle)\n{\n  int\n    status;\n\n  LockSemaphoreInfo(ghost_semaphore);\n  status=-1;\n  if (nt_ghost_info.has_instance == MagickFalse)\n    {\n      status=nt_ghost_info.new_instance(pinstance,caller_handle);\n      if (status >= 0)\n        nt_ghost_info.has_instance=MagickTrue;\n    }\n  UnlockSemaphoreInfo(ghost_semaphore);\n  return(status);\n}\n\nstatic inline char *create_utf8_string(const wchar_t *wideChar)\n{\n  char\n    *utf8;\n\n  int\n    count;\n\n  count=WideCharToMultiByte(CP_UTF8,0,wideChar,-1,NULL,0,NULL,NULL);\n  if (count < 0)\n    return((char *) NULL);\n  utf8=(char *) AcquireQuantumMemory(count+1,sizeof(*utf8));\n  if (utf8 == (char *) NULL)\n    return((char *) NULL);\n  count=WideCharToMultiByte(CP_UTF8,0,wideChar,-1,utf8,count,NULL,NULL);\n  if (count == 0)\n    {\n      utf8=DestroyString(utf8);\n      return((char *) NULL);\n    }\n  utf8[count]=0;\n  return(utf8);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   D l l M a i n                                                             %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  DllMain() is an entry point to the DLL which is called when processes and\n%  threads are initialized and terminated, or upon calls to the Windows\n%  LoadLibrary and FreeLibrary functions.\n%\n%  The function returns TRUE of it succeeds, or FALSE if initialization fails.\n%\n%  The format of the DllMain method is:\n%\n%    BOOL WINAPI DllMain(HINSTANCE handle,DWORD reason,LPVOID lpvReserved)\n%\n%  A description of each parameter follows:\n%\n%    o handle: handle to the DLL module\n%\n%    o reason: reason for calling function:\n%\n%      DLL_PROCESS_ATTACH - DLL is being loaded into virtual address\n%                           space of current process.\n%      DLL_THREAD_ATTACH - Indicates that the current process is\n%                          creating a new thread.  Called under the\n%                          context of the new thread.\n%      DLL_THREAD_DETACH - Indicates that the thread is exiting.\n%                          Called under the context of the exiting\n%                          thread.\n%      DLL_PROCESS_DETACH - Indicates that the DLL is being unloaded\n%                           from the virtual address space of the\n%                           current process.\n%\n%    o lpvReserved: Used for passing additional info during DLL_PROCESS_ATTACH\n%                   and DLL_PROCESS_DETACH.\n%\n*/\n#if defined(_DLL) && defined(ProvideDllMain)\nBOOL WINAPI DllMain(HINSTANCE handle,DWORD reason,LPVOID lpvReserved)\n{\n  switch (reason)\n  {\n    case DLL_PROCESS_ATTACH:\n    {\n      char\n        *module_path;\n\n      ssize_t\n        count;\n\n      wchar_t\n        *wide_path;\n\n      MagickCoreGenesis((const char *) NULL,MagickFalse);\n      wide_path=(wchar_t *) AcquireQuantumMemory(MagickPathExtent,\n        sizeof(*wide_path));\n      if (wide_path == (wchar_t *) NULL)\n        return(FALSE);\n      count=(ssize_t) GetModuleFileNameW(handle,wide_path,MagickPathExtent);\n      if (count != 0)\n        {\n          char\n            *path;\n\n          module_path=create_utf8_string(wide_path);\n          for ( ; count > 0; count--)\n            if (module_path[count] == '\\\\')\n              {\n                module_path[count+1]='\\0';\n                break;\n              }\n          path=(char *) AcquireQuantumMemory(16UL*MagickPathExtent,sizeof(*path));\n          if (path == (char *) NULL)\n            {\n              module_path=DestroyString(module_path);\n              wide_path=(wchar_t *) RelinquishMagickMemory(wide_path);\n              return(FALSE);\n            }\n          count=(ssize_t) GetEnvironmentVariable(\"PATH\",path,16*MagickPathExtent);\n          if ((count != 0) && (strstr(path,module_path) == (char *) NULL))\n            {\n              if ((strlen(module_path)+count+1) < (16*MagickPathExtent-1))\n                {\n                  char\n                    *variable;\n\n                  variable=(char *) AcquireQuantumMemory(16UL*MagickPathExtent,\n                    sizeof(*variable));\n                  if (variable == (char *) NULL)\n                    {\n                      path=DestroyString(path);\n                      module_path=DestroyString(module_path);\n                      wide_path=(wchar_t *) RelinquishMagickMemory(wide_path);\n                      return(FALSE);\n                    }\n                  (void) FormatLocaleString(variable,16*MagickPathExtent,\n                    \"%s;%s\",module_path,path);\n                  SetEnvironmentVariable(\"PATH\",variable);\n                  variable=DestroyString(variable);\n                }\n            }\n          path=DestroyString(path);\n          module_path=DestroyString(module_path);\n        }\n      wide_path=(wchar_t *) RelinquishMagickMemory(wide_path);\n      break;\n    }\n    case DLL_PROCESS_DETACH:\n    {\n      MagickCoreTerminus();\n      break;\n    }\n    default:\n      break;\n  }\n  return(TRUE);\n}\n#endif\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   E x i t                                                                   %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  Exit() calls TerminateProcess for Win95.\n%\n%  The format of the exit method is:\n%\n%      int Exit(int status)\n%\n%  A description of each parameter follows:\n%\n%    o status: an integer value representing the status of the terminating\n%      process.\n%\n*/\nMagickPrivate int Exit(int status)\n{\n  if (IsWindows95())\n    {\n      TerminateProcess(GetCurrentProcess(),(unsigned int) status);\n      return(0);\n    }\n  exit(status);\n}\n\f\n#if !defined(__MINGW32__) && !defined(__MINGW64__)\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   g e t t i m e o f d a y                                                   %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  The gettimeofday() method get the time of day.\n%\n%  The format of the gettimeofday method is:\n%\n%      int gettimeofday(struct timeval *time_value,struct timezone *time_zone)\n%\n%  A description of each parameter follows:\n%\n%    o time_value: the time value.\n%\n%    o time_zone: the time zone.\n%\n*/\nMagickPrivate int gettimeofday (struct timeval *time_value,\n  struct timezone *time_zone)\n{\n#define EpochFiletime  MagickLLConstant(116444736000000000)\n\n  static int\n    is_tz_set;\n\n  if (time_value != (struct timeval *) NULL)\n    {\n      FILETIME\n        file_time;\n\n      __int64\n        time;\n\n      LARGE_INTEGER\n        date_time;\n\n      GetSystemTimeAsFileTime(&file_time);\n      date_time.LowPart=file_time.dwLowDateTime;\n      date_time.HighPart=file_time.dwHighDateTime;\n      time=date_time.QuadPart;\n      time-=EpochFiletime;\n      time/=10;\n      time_value->tv_sec=(ssize_t) (time / 1000000);\n      time_value->tv_usec=(ssize_t) (time % 1000000);\n    }\n  if (time_zone != (struct timezone *) NULL)\n    {\n      if (is_tz_set == 0)\n        {\n          _tzset();\n          is_tz_set++;\n        }\n      time_zone->tz_minuteswest=_timezone/60;\n      time_zone->tz_dsttime=_daylight;\n    }\n  return(0);\n}\n#endif\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   I s W i n d o w s 9 5                                                     %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  IsWindows95() returns true if the system is Windows 95.\n%\n%  The format of the IsWindows95 method is:\n%\n%      int IsWindows95()\n%\n*/\nMagickPrivate int IsWindows95()\n{\n  OSVERSIONINFO\n    version_info;\n\n  version_info.dwOSVersionInfoSize=sizeof(version_info);\n  if (GetVersionEx(&version_info) &&\n      (version_info.dwPlatformId == VER_PLATFORM_WIN32_WINDOWS))\n    return(1);\n  return(0);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   N T A r g v T o U T F 8                                                   %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  NTArgvToUTF8() converts the wide command line arguments to UTF-8 to ensure\n%  compatibility with Linux.\n%\n%  The format of the NTArgvToUTF8 method is:\n%\n%      char **NTArgvToUTF8(const int argc,wchar_t **argv)\n%\n%  A description of each parameter follows:\n%\n%    o argc: the number of command line arguments.\n%\n%    o argv:  the  wide-character command line arguments.\n%\n*/\nMagickPrivate char **NTArgvToUTF8(const int argc,wchar_t **argv)\n{\n  char\n    **utf8;\n\n  ssize_t\n    i;\n\n  utf8=(char **) AcquireQuantumMemory(argc,sizeof(*utf8));\n  if (utf8 == (char **) NULL)\n    ThrowFatalException(ResourceLimitFatalError,\"UnableToConvertStringToARGV\");\n  for (i=0; i < (ssize_t) argc; i++)\n  {\n    utf8[i]=create_utf8_string(argv[i]);\n    if (utf8[i] == (char *) NULL)\n      {\n        for (i--; i >= 0; i--)\n          utf8[i]=DestroyString(utf8[i]);\n        ThrowFatalException(ResourceLimitFatalError,\n          \"UnableToConvertStringToARGV\");\n      }\n  }\n  return(utf8);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   N T C l o s e D i r e c t o r y                                           %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  NTCloseDirectory() closes the named directory stream and frees the DIR\n%  structure.\n%\n%  The format of the NTCloseDirectory method is:\n%\n%      int NTCloseDirectory(DIR *entry)\n%\n%  A description of each parameter follows:\n%\n%    o entry: Specifies a pointer to a DIR structure.\n%\n*/\nMagickPrivate int NTCloseDirectory(DIR *entry)\n{\n  (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"...\");\n  assert(entry != (DIR *) NULL);\n  FindClose(entry->hSearch);\n  entry=(DIR *) RelinquishMagickMemory(entry);\n  return(0);\n}\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   N T C l o s e L i b r a r y                                               %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  NTCloseLibrary() unloads the module associated with the passed handle.\n%\n%  The format of the NTCloseLibrary method is:\n%\n%      void NTCloseLibrary(void *handle)\n%\n%  A description of each parameter follows:\n%\n%    o handle: Specifies a handle to a previously loaded dynamic module.\n%\n*/\nMagickPrivate int NTCloseLibrary(void *handle)\n{\n  if (IsWindows95())\n    return(FreeLibrary((HINSTANCE) handle));\n  return(!(FreeLibrary((HINSTANCE) handle)));\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   N T C o n t r o l H a n d l e r                                           %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  NTControlHandler() registers a control handler that is activated when, for\n%  example, a ctrl-c is received.\n%\n%  The format of the NTControlHandler method is:\n%\n%      int NTControlHandler(void)\n%\n*/\n\nstatic BOOL ControlHandler(DWORD type)\n{\n  (void) type;\n  AsynchronousResourceComponentTerminus();\n  return(FALSE);\n}\n\nMagickPrivate int NTControlHandler(void)\n{\n  return(SetConsoleCtrlHandler((PHANDLER_ROUTINE) ControlHandler,TRUE));\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   N T E l a p s e d T i m e                                                 %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  NTElapsedTime() returns the elapsed time (in seconds) since the last call to\n%  StartTimer().\n%\n%  The format of the ElapsedTime method is:\n%\n%      double NTElapsedTime(void)\n%\n*/\nMagickPrivate double NTElapsedTime(void)\n{\n  union\n  {\n    FILETIME\n      filetime;\n\n    __int64\n      filetime64;\n  } elapsed_time;\n\n  SYSTEMTIME\n    system_time;\n\n  GetSystemTime(&system_time);\n  SystemTimeToFileTime(&system_time,&elapsed_time.filetime);\n  return((double) 1.0e-7*elapsed_time.filetime64);\n}\n\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   N T E r f                                                                 %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  NTErf() computes the error function of x.\n%\n%  The format of the NTErf method is:\n%\n%      double NTCloseDirectory(DIR *entry)\n%\n%  A description of each parameter follows:\n%\n%    o x: Specifies a pointer to a DIR structure.\n%\n*/\nMagickPrivate double NTErf(double x)\n{\n  double\n    a1,\n    a2,\n    a3,\n    a4,\n    a5,\n    p,\n    t,\n    y;\n\n  int\n    sign;\n\n  a1=0.254829592;\n  a2=-0.284496736;\n  a3=1.421413741;\n  a4=-1.453152027;\n  a5=1.061405429;\n  p=0.3275911;\n  sign=1;\n  if (x < 0)\n    sign=-1;\n  x=abs(x);\n  t=1.0/(1.0+p*x);\n  y=1.0-(((((a5*t+a4)*t)+a3)*t+a2)*t+a1)*t*exp(-x*x);\n  return(sign*y);\n}\n\f\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n+   N T E r r o r H a n d l e r                                               %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  NTErrorHandler() displays an error reason and then terminates the program.\n%\n%  The format of the NTErrorHandler method is:\n%\n%      void NTErrorHandler(const ExceptionType severity,const char *reason,\n%        const char *description)\n%\n%  A description of each parameter follows:\n%\n%    o severity: Specifies the numeric error category.\n%\n%    o reason: Specifies the reason to display before terminating the\n%      program.\n%\n%    o description: Specifies any description to the reason.\n%\n*/\nMagickPrivate void NTErrorHandler(const ExceptionType severity,\n  const char *reason,const char *description)\n{\n  char\n    buffer[3*MagickPathExtent],\n    *message;\n\n  (void) severity;\n  if (reason == (char *) NULL)\n    {\n      MagickCoreTerminus();\n      exit(0);\n    }\n  message=GetExceptionMessage(errno);\n  if ((description != (char *) NULL) && errno)\n    (void) FormatLocaleString(buffer,MagickPathExtent,\"%s: %s (%s) [%s].\\n\",\n      GetClientName(),reason,description,message);\n  else\n    if (description != (char *) NULL)\n      (void) FormatLocaleString(buffer,MagickPathExtent,\"%s: %s (%s).\\n\",\n        GetClientName(),reason,description);\n    else\n      if (errno != 0)\n        (void) FormatLocaleString(buffer,MagickPathExtent,\"%s: %s [%s].\\n\",\n          GetClientName(),reason,message);\n      else\n        (void) FormatLocaleString(buffer,MagickPathExtent,\"%s: %s.\\n\",\n          GetClientName(),reason);\n  message=DestroyString(message);\n  (void) MessageBox(NULL,buffer,\"ImageMagick Exception\",MB_OK | MB_TASKMODAL |\n    MB_SETFOREGROUND | MB_ICONEXCLAMATION);\n  MagickCoreTerminus();\n  exit(0);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   N T E x i t L i b r a r y                                                 %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  NTExitLibrary() exits the dynamic module loading subsystem.\n%\n%  The format of the NTExitLibrary method is:\n%\n%      int NTExitLibrary(void)\n%\n*/\nMagickPrivate int NTExitLibrary(void)\n{\n  return(0);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   N T G a t h e r R a n d o m D a t a                                       %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  NTGatherRandomData() gathers random data and returns it.\n%\n%  The format of the GatherRandomData method is:\n%\n%      MagickBooleanType NTGatherRandomData(const size_t length,\n%        unsigned char *random)\n%\n%  A description of each parameter follows:\n%\n%    length: the length of random data buffer\n%\n%    random: the random data is returned here.\n%\n*/\nMagickPrivate MagickBooleanType NTGatherRandomData(const size_t length,\n  unsigned char *random)\n{\n#if defined(MAGICKCORE_CIPHER_SUPPORT) && defined(_MSC_VER) && (_MSC_VER > 1200)\n  HCRYPTPROV\n    handle;\n\n  int\n    status;\n\n  handle=(HCRYPTPROV) NULL;\n  status=CryptAcquireContext(&handle,NULL,MS_DEF_PROV,PROV_RSA_FULL,\n    (CRYPT_VERIFYCONTEXT | CRYPT_MACHINE_KEYSET));\n  if (status == 0)\n    status=CryptAcquireContext(&handle,NULL,MS_DEF_PROV,PROV_RSA_FULL,\n      (CRYPT_VERIFYCONTEXT | CRYPT_MACHINE_KEYSET | CRYPT_NEWKEYSET));\n  if (status == 0)\n    return(MagickFalse);\n  status=CryptGenRandom(handle,(DWORD) length,random);\n  if (status == 0)\n    {\n      status=CryptReleaseContext(handle,0);\n      return(MagickFalse);\n    }\n  status=CryptReleaseContext(handle,0);\n  if (status == 0)\n    return(MagickFalse);\n#else\n  (void) random;\n  (void) length;\n#endif\n  return(MagickTrue);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   N T G e t E x e c u t i o n P a t h                                       %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  NTGetExecutionPath() returns the execution path of a program.\n%\n%  The format of the GetExecutionPath method is:\n%\n%      MagickBooleanType NTGetExecutionPath(char *path,const size_t extent)\n%\n%  A description of each parameter follows:\n%\n%    o path: the pathname of the executable that started the process.\n%\n%    o extent: the maximum extent of the path.\n%\n*/\nMagickPrivate MagickBooleanType NTGetExecutionPath(char *path,\n  const size_t extent)\n{\n  wchar_t\n    wide_path[MagickPathExtent];\n\n  (void) GetModuleFileNameW((HMODULE) NULL,wide_path,(DWORD) extent);\n  (void) WideCharToMultiByte(CP_UTF8,0,wide_path,-1,path,(int) extent,NULL,\n    NULL);\n  return(MagickTrue);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   N T G e t L a s t E r r o r                                               %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  NTGetLastError() returns the last error that occurred.\n%\n%  The format of the NTGetLastError method is:\n%\n%      char *NTGetLastError(void)\n%\n*/\nchar *NTGetLastError(void)\n{\n  char\n    *reason;\n\n  int\n    status;\n\n  LPVOID\n    buffer;\n\n  status=FormatMessage(FORMAT_MESSAGE_ALLOCATE_BUFFER |\n    FORMAT_MESSAGE_FROM_SYSTEM,NULL,GetLastError(),\n    MAKELANGID(LANG_NEUTRAL,SUBLANG_DEFAULT),(LPTSTR) &buffer,0,NULL);\n  if (!status)\n    reason=AcquireString(\"An unknown error occurred\");\n  else\n    {\n      reason=AcquireString((const char *) buffer);\n      LocalFree(buffer);\n    }\n  return(reason);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   N T G e t L i b r a r y E r r o r                                         %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  Lt_dlerror() returns a pointer to a string describing the last error\n%  associated with a lt_dl method.  Note that this function is not thread\n%  safe so it should only be used under the protection of a lock.\n%\n%  The format of the NTGetLibraryError method is:\n%\n%      const char *NTGetLibraryError(void)\n%\n*/\nMagickPrivate const char *NTGetLibraryError(void)\n{\n  static char\n    last_error[MagickPathExtent];\n\n  char\n    *error;\n\n  *last_error='\\0';\n  error=NTGetLastError();\n  if (error)\n    (void) CopyMagickString(last_error,error,MagickPathExtent);\n  error=DestroyString(error);\n  return(last_error);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   N T G e t L i b r a r y S y m b o l                                       %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  NTGetLibrarySymbol() retrieve the procedure address of the method\n%  specified by the passed character string.\n%\n%  The format of the NTGetLibrarySymbol method is:\n%\n%      void *NTGetLibrarySymbol(void *handle,const char *name)\n%\n%  A description of each parameter follows:\n%\n%    o handle: Specifies a handle to the previously loaded dynamic module.\n%\n%    o name: Specifies the procedure entry point to be returned.\n%\n*/\nvoid *NTGetLibrarySymbol(void *handle,const char *name)\n{\n  LPFNDLLFUNC1\n    lpfnDllFunc1;\n\n  lpfnDllFunc1=(LPFNDLLFUNC1) GetProcAddress((HINSTANCE) handle,name);\n  if (!lpfnDllFunc1)\n    return((void *) NULL);\n  return((void *) lpfnDllFunc1);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   N T G e t M o d u l e P a t h                                             %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  NTGetModulePath() returns the path of the specified module.\n%\n%  The format of the GetModulePath method is:\n%\n%      MagickBooleanType NTGetModulePath(const char *module,char *path)\n%\n%  A description of each parameter follows:\n%\n%    modith: the module name.\n%\n%    path: the module path is returned here.\n%\n*/\nMagickPrivate MagickBooleanType NTGetModulePath(const char *module,char *path)\n{\n  char\n    module_path[MagickPathExtent];\n\n  HMODULE\n    handle;\n\n  ssize_t\n    length;\n\n  *path='\\0';\n  handle=GetModuleHandle(module);\n  if (handle == (HMODULE) NULL)\n    return(MagickFalse);\n  length=GetModuleFileName(handle,module_path,MagickPathExtent);\n  if (length != 0)\n    GetPathComponent(module_path,HeadPath,path);\n  return(MagickTrue);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   N T G h o s t s c r i p t D L L                                           %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  NTGhostscriptDLL() returns the path to the most recent Ghostscript version\n%  DLL.  The method returns TRUE on success otherwise FALSE.\n%\n%  The format of the NTGhostscriptDLL method is:\n%\n%      int NTGhostscriptDLL(char *path,int length)\n%\n%  A description of each parameter follows:\n%\n%    o path: return the Ghostscript DLL path here.\n%\n%    o length: the buffer length.\n%\n*/\n\nstatic int NTGetRegistryValue(HKEY root,const char *key,DWORD flags,\n  const char *name,char *value,int *length)\n{\n  BYTE\n    byte,\n    *p;\n\n  DWORD\n    extent,\n    type;\n\n  HKEY\n    hkey;\n\n  LONG\n    status;\n\n  /*\n    Get a registry value: key = root\\\\key, named value = name.\n  */\n  if (RegOpenKeyExA(root,key,0,KEY_READ | flags,&hkey) != ERROR_SUCCESS)\n    return(1);  /* no match */\n  p=(BYTE *) value;\n  type=REG_SZ;\n  extent=(*length);\n  if (p == (BYTE *) NULL)\n    p=(&byte);  /* ERROR_MORE_DATA only if value is NULL */\n  status=RegQueryValueExA(hkey,(char *) name,0,&type,p,&extent);\n  RegCloseKey(hkey);\n  if (status == ERROR_SUCCESS)\n    {\n      *length=extent;\n      return(0);  /* return the match */\n    }\n  if (status == ERROR_MORE_DATA)\n    {\n      *length=extent;\n      return(-1);  /* buffer not large enough */\n    }\n  return(1);  /* not found */\n}\n\nstatic int NTLocateGhostscript(DWORD flags,int *root_index,\n  const char **product_family,int *major_version,int *minor_version)\n{\n  int\n    i;\n\n  MagickBooleanType\n    status;\n\n  static const char\n    *products[4] =\n    {\n      \"GPL Ghostscript\",\n      \"GNU Ghostscript\",\n      \"AFPL Ghostscript\",\n      \"Aladdin Ghostscript\"\n    };\n\n  /*\n    Find the most recent version of Ghostscript.\n  */\n  status=MagickFalse;\n  *root_index=0;\n  *product_family=NULL;\n  *major_version=5;\n  *minor_version=49; /* min version of Ghostscript is 5.50 */\n  for (i=0; i < (ssize_t) (sizeof(products)/sizeof(products[0])); i++)\n  {\n    char\n      key[MagickPathExtent];\n\n    HKEY\n      hkey;\n\n    int\n      j;\n\n    REGSAM\n      mode;\n\n    (void) FormatLocaleString(key,MagickPathExtent,\"SOFTWARE\\\\%s\",products[i]);\n    for (j=0; j < (ssize_t) (sizeof(registry_roots)/sizeof(registry_roots[0]));\n         j++)\n    {\n      mode=KEY_READ | flags;\n      if (RegOpenKeyExA(registry_roots[j].hkey,key,0,mode,&hkey) ==\n            ERROR_SUCCESS)\n        {\n          DWORD\n            extent;\n\n          int\n            k;\n\n          /*\n            Now enumerate the keys.\n          */\n          extent=sizeof(key)/sizeof(char);\n          for (k=0; RegEnumKeyA(hkey,k,key,extent) == ERROR_SUCCESS; k++)\n          {\n            int\n              major,\n              minor;\n\n            major=0;\n            minor=0;\n            if (sscanf(key,\"%d.%d\",&major,&minor) != 2)\n              continue;\n            if ((major > *major_version) || ((major == *major_version) &&\n                (minor > *minor_version)))\n              {\n                *root_index=j;\n                *product_family=products[i];\n                *major_version=major;\n                *minor_version=minor;\n                status=MagickTrue;\n              }\n         }\n         (void) RegCloseKey(hkey);\n       }\n    }\n  }\n  if (status == MagickFalse)\n    {\n      *major_version=0;\n      *minor_version=0;\n    }\n  (void) LogMagickEvent(ConfigureEvent,GetMagickModule(),\"Ghostscript (%s) \"\n    \"version %d.%02d\",*product_family,*major_version,*minor_version);\n  return(status);\n}\n\nstatic int NTGhostscriptGetString(const char *name,BOOL *is_64_bit,\n  char *value,const size_t length)\n{\n  char\n    buffer[MagickPathExtent],\n    *directory;\n\n  int\n    extent;\n\n  static const char\n    *product_family=(const char *) NULL;\n\n  static BOOL\n    is_64_bit_version=FALSE;\n\n  static int\n    flags=0,\n    major_version=0,\n    minor_version=0,\n    root_index=0;\n\n  /*\n    Get a string from the installed Ghostscript.\n  */\n  *value='\\0';\n  directory=(char *) NULL;\n  if (LocaleCompare(name,\"GS_DLL\") == 0)\n    {\n      directory=GetEnvironmentValue(\"MAGICK_GHOSTSCRIPT_PATH\");\n      if (directory != (char *) NULL)\n        {\n          (void) FormatLocaleString(buffer,MagickPathExtent,\"%s%sgsdll32.dll\",\n            directory,DirectorySeparator);\n          if (IsPathAccessible(buffer) != MagickFalse)\n            {\n              directory=DestroyString(directory);\n              (void) CopyMagickString(value,buffer,length);\n              if (is_64_bit != NULL)\n                *is_64_bit=FALSE;\n              return(TRUE);\n            }\n          (void) FormatLocaleString(buffer,MagickPathExtent,\"%s%sgsdll64.dll\",\n            directory,DirectorySeparator);\n          if (IsPathAccessible(buffer) != MagickFalse)\n            {\n              directory=DestroyString(directory);\n              (void) CopyMagickString(value,buffer,length);\n              if (is_64_bit != NULL)\n                *is_64_bit=TRUE;\n              return(TRUE);\n            }\n          return(FALSE);\n        }\n    }\n  if (product_family == NULL)\n    {\n      flags=0;\n#if defined(KEY_WOW64_32KEY)\n#if defined(_WIN64)\n      flags=KEY_WOW64_64KEY;\n#else\n      flags=KEY_WOW64_32KEY;\n#endif\n      (void) NTLocateGhostscript(flags,&root_index,&product_family,\n        &major_version,&minor_version);\n      if (product_family == NULL)\n#if defined(_WIN64)\n        flags=KEY_WOW64_32KEY;\n      else\n        is_64_bit_version=TRUE;\n#else\n        flags=KEY_WOW64_64KEY;\n#endif\n#endif\n    }\n  if (product_family == NULL)\n    {\n      (void) NTLocateGhostscript(flags,&root_index,&product_family,\n      &major_version,&minor_version);\n#if !defined(_WIN64)\n      is_64_bit_version=TRUE;\n#endif\n    }\n  if (product_family == NULL)\n    return(FALSE);\n  if (is_64_bit != NULL)\n    *is_64_bit=is_64_bit_version;\n  (void) FormatLocaleString(buffer,MagickPathExtent,\"SOFTWARE\\\\%s\\\\%d.%02d\",\n    product_family,major_version,minor_version);\n  extent=(int) length;\n  if (NTGetRegistryValue(registry_roots[root_index].hkey,buffer,flags,name,\n    value,&extent) == 0)\n    {\n      (void) LogMagickEvent(ConfigureEvent,GetMagickModule(),\n        \"registry: \\\"%s\\\\%s\\\\%s\\\"=\\\"%s\\\"\",registry_roots[root_index].name,\n        buffer,name,value);\n      return(TRUE);\n    }\n  return(FALSE);\n}\n\nMagickPrivate int NTGhostscriptDLL(char *path,int length)\n{\n  static char\n    dll[MagickPathExtent] = { \"\" };\n\n  static BOOL\n    is_64_bit_version;\n\n  *path='\\0';\n  if ((*dll == '\\0') &&\n      (NTGhostscriptGetString(\"GS_DLL\",&is_64_bit_version,dll,sizeof(dll)) == FALSE))\n    return(FALSE);\n\n#if defined(_WIN64)\n  if (!is_64_bit_version)\n    return(FALSE);\n#else\n  if (is_64_bit_version)\n    return(FALSE);\n#endif\n  (void) CopyMagickString(path,dll,length);\n  return(TRUE);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   N T G h o s t s c r i p t D L L V e c t o r s                             %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  NTGhostscriptDLLVectors() returns a GhostInfo structure that includes\n%  function vectors to invoke Ghostscript DLL functions. A null pointer is\n%  returned if there is an error when loading the DLL or retrieving the\n%  function vectors.\n%\n%  The format of the NTGhostscriptDLLVectors method is:\n%\n%      const GhostInfo *NTGhostscriptDLLVectors(void)\n%\n*/\nMagickPrivate const GhostInfo *NTGhostscriptDLLVectors(void)\n{\n  if (NTGhostscriptLoadDLL() == FALSE)\n    return((GhostInfo *) NULL);\n  return(&ghost_info);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   N T G h o s t s c r i p t E X E                                           %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  NTGhostscriptEXE() obtains the path to the latest Ghostscript executable.\n%  The method returns FALSE if a full path value is not obtained and returns\n%  a default path of gswin32c.exe.\n%\n%  The format of the NTGhostscriptEXE method is:\n%\n%      int NTGhostscriptEXE(char *path,int length)\n%\n%  A description of each parameter follows:\n%\n%    o path: return the Ghostscript executable path here.\n%\n%    o length: length of buffer.\n%\n*/\nMagickPrivate int NTGhostscriptEXE(char *path,int length)\n{\n  register char\n    *p;\n\n  static char\n    program[MagickPathExtent] = { \"\" };\n\n  static BOOL\n    is_64_bit_version = FALSE;\n\n  (void) CopyMagickString(path,\"gswin32c.exe\",length);\n  if (*program == '\\0')\n    {\n      if (ghost_semaphore == (SemaphoreInfo *) NULL)\n        ActivateSemaphoreInfo(&ghost_semaphore);\n      LockSemaphoreInfo(ghost_semaphore);\n      if (*program == '\\0')\n        {\n          if (NTGhostscriptGetString(\"GS_DLL\",&is_64_bit_version,program,\n              sizeof(program)) == FALSE)\n            {\n              UnlockSemaphoreInfo(ghost_semaphore);\n              return(FALSE);\n            }\n          p=strrchr(program,'\\\\');\n          if (p != (char *) NULL)\n            {\n              p++;\n              *p='\\0';\n              (void) ConcatenateMagickString(program,is_64_bit_version ?\n                \"gswin64c.exe\" : \"gswin32c.exe\",sizeof(program));\n            }\n        }\n      UnlockSemaphoreInfo(ghost_semaphore);\n    }\n  (void) CopyMagickString(path,program,length);\n  return(TRUE);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   N T G h o s t s c r i p t F o n t s                                       %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  NTGhostscriptFonts() obtains the path to the Ghostscript fonts.  The method\n%  returns FALSE if it cannot determine the font path.\n%\n%  The format of the NTGhostscriptFonts method is:\n%\n%      int NTGhostscriptFonts(char *path, int length)\n%\n%  A description of each parameter follows:\n%\n%    o path: return the font path here.\n%\n%    o length: length of the path buffer.\n%\n*/\nMagickPrivate int NTGhostscriptFonts(char *path,int length)\n{\n  char\n    buffer[MagickPathExtent],\n    *directory,\n    filename[MagickPathExtent];\n\n  register char\n    *p,\n    *q;\n\n  *path='\\0';\n  directory=GetEnvironmentValue(\"MAGICK_GHOSTSCRIPT_FONT_PATH\");\n  if (directory != (char *) NULL)\n    {\n      (void) CopyMagickString(buffer,directory,MagickPathExtent);\n      directory=DestroyString(directory);\n    }\n  else\n    {\n      if (NTGhostscriptGetString(\"GS_LIB\",NULL,buffer,MagickPathExtent) == FALSE)\n        return(FALSE);\n    }\n  for (p=buffer-1; p != (char *) NULL; p=strchr(p+1,DirectoryListSeparator))\n  {\n    (void) CopyMagickString(path,p+1,length+1);\n    q=strchr(path,DirectoryListSeparator);\n    if (q != (char *) NULL)\n      *q='\\0';\n    (void) FormatLocaleString(filename,MagickPathExtent,\"%s%sfonts.dir\",path,\n      DirectorySeparator);\n    if (IsPathAccessible(filename) != MagickFalse)\n      return(TRUE);\n  }\n  *path='\\0';\n  return(FALSE);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   N T G h o s t s c r i p t L o a d D L L                                   %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  NTGhostscriptLoadDLL() attempts to load the Ghostscript DLL and returns\n%  TRUE if it succeeds.\n%\n%  The format of the NTGhostscriptLoadDLL method is:\n%\n%      int NTGhostscriptLoadDLL(void)\n%\n*/\nstatic inline int NTGhostscriptHasValidHandle()\n{\n  if ((nt_ghost_info.delete_instance == NULL) || (ghost_info.exit == NULL) ||\n      (ghost_info.init_with_args == NULL) ||\n      (nt_ghost_info.new_instance == NULL) ||\n      (ghost_info.run_string == NULL) || (ghost_info.set_stdio == NULL) ||\n      (ghost_info.revision == NULL))\n    {\n      return(FALSE);\n    }\n  return(TRUE);\n}\n\nMagickPrivate int NTGhostscriptLoadDLL(void)\n{\n  char\n    path[MagickPathExtent];\n\n  if (ghost_semaphore == (SemaphoreInfo *) NULL)\n    ActivateSemaphoreInfo(&ghost_semaphore);\n  LockSemaphoreInfo(ghost_semaphore);\n  if (ghost_handle != (void *) NULL)\n    {\n      UnlockSemaphoreInfo(ghost_semaphore);\n      return(NTGhostscriptHasValidHandle());\n    }\n  if (NTGhostscriptDLL(path,sizeof(path)) == FALSE)\n    {\n      UnlockSemaphoreInfo(ghost_semaphore);\n      return(FALSE);\n    }\n  ghost_handle=lt_dlopen(path);\n  if (ghost_handle == (void *) NULL)\n    {\n      UnlockSemaphoreInfo(ghost_semaphore);\n      return(FALSE);\n    }\n  (void) ResetMagickMemory((void *) &nt_ghost_info,0,sizeof(NTGhostInfo));\n  nt_ghost_info.delete_instance=(void (MagickDLLCall *)(gs_main_instance *)) (\n    lt_dlsym(ghost_handle,\"gsapi_delete_instance\"));\n  nt_ghost_info.new_instance=(int (MagickDLLCall *)(gs_main_instance **,\n    void *)) (lt_dlsym(ghost_handle,\"gsapi_new_instance\"));\n  nt_ghost_info.has_instance=MagickFalse;\n  (void) ResetMagickMemory((void *) &ghost_info,0,sizeof(GhostInfo));\n  ghost_info.delete_instance=NTGhostscriptDeleteInstance;\n  ghost_info.exit=(int (MagickDLLCall *)(gs_main_instance*))\n    lt_dlsym(ghost_handle,\"gsapi_exit\");\n  ghost_info.init_with_args=(int (MagickDLLCall *)(gs_main_instance *,int,\n    char **)) (lt_dlsym(ghost_handle,\"gsapi_init_with_args\"));\n  ghost_info.new_instance=NTGhostscriptNewInstance;\n  ghost_info.run_string=(int (MagickDLLCall *)(gs_main_instance *,const char *,\n    int,int *)) (lt_dlsym(ghost_handle,\"gsapi_run_string\"));\n  ghost_info.set_stdio=(int (MagickDLLCall *)(gs_main_instance *,int(\n    MagickDLLCall *)(void *,char *,int),int(MagickDLLCall *)(void *,\n    const char *,int),int(MagickDLLCall *)(void *,const char *,int)))\n    (lt_dlsym(ghost_handle,\"gsapi_set_stdio\"));\n  ghost_info.revision=(int (MagickDLLCall *)(gsapi_revision_t *,int)) (\n    lt_dlsym(ghost_handle,\"gsapi_revision\"));\n  UnlockSemaphoreInfo(ghost_semaphore);\n  return(NTGhostscriptHasValidHandle());\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   N T G h o s t s c r i p t U n L o a d D L L                               %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  NTGhostscriptUnLoadDLL() unloads the Ghostscript DLL and returns TRUE if\n%  it succeeds.\n%\n%  The format of the NTGhostscriptUnLoadDLL method is:\n%\n%      int NTGhostscriptUnLoadDLL(void)\n%\n*/\nMagickPrivate void NTGhostscriptUnLoadDLL(void)\n{\n  if (ghost_semaphore == (SemaphoreInfo *) NULL)\n    ActivateSemaphoreInfo(&ghost_semaphore);\n  LockSemaphoreInfo(ghost_semaphore);\n  if (ghost_handle != (void *) NULL)\n    {\n      (void) lt_dlclose(ghost_handle);\n      ghost_handle=(void *) NULL;\n      (void) ResetMagickMemory((void *) &ghost_info,0,sizeof(GhostInfo));\n    }\n  UnlockSemaphoreInfo(ghost_semaphore);\n  RelinquishSemaphoreInfo(&ghost_semaphore);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   N T I n i t i a l i z e L i b r a r y                                     %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  NTInitializeLibrary() initializes the dynamic module loading subsystem.\n%\n%  The format of the NTInitializeLibrary method is:\n%\n%      int NTInitializeLibrary(void)\n%\n*/\nMagickPrivate int NTInitializeLibrary(void)\n{\n  return(0);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   N T I n i t i a l i z e W i n s o c k                                     %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  NTInitializeWinsock() initializes Winsock.\n%\n%  The format of the NTInitializeWinsock method is:\n%\n%      void NTInitializeWinsock(void)\n%\n*/\nMagickPrivate void NTInitializeWinsock(MagickBooleanType use_lock)\n{\n  if (use_lock)\n    {\n      if (winsock_semaphore == (SemaphoreInfo *) NULL)\n        ActivateSemaphoreInfo(&winsock_semaphore);\n      LockSemaphoreInfo(winsock_semaphore);\n    }\n  if (wsaData == (WSADATA *) NULL)\n    {\n      wsaData=(WSADATA *) AcquireMagickMemory(sizeof(WSADATA));\n      if (WSAStartup(MAKEWORD(2,2),wsaData) != 0)\n        ThrowFatalException(CacheFatalError,\"WSAStartup failed\");\n    }\n  if (use_lock)\n    UnlockSemaphoreInfo(winsock_semaphore);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n+  N T M a p M e m o r y                                                      %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  Mmap() emulates the Unix method of the same name.\n%\n%  The format of the NTMapMemory method is:\n%\n%    MagickPrivate void *NTMapMemory(char *address,size_t length,int protection,\n%      int access,int file,MagickOffsetType offset)\n%\n*/\nMagickPrivate void *NTMapMemory(char *address,size_t length,int protection,\n  int flags,int file,MagickOffsetType offset)\n{\n  DWORD\n    access_mode,\n    high_length,\n    high_offset,\n    low_length,\n    low_offset,\n    protection_mode;\n\n  HANDLE\n    file_handle,\n    map_handle;\n\n  void\n    *map;\n\n  (void) address;\n  access_mode=0;\n  file_handle=INVALID_HANDLE_VALUE;\n  low_length=(DWORD) (length & 0xFFFFFFFFUL);\n  high_length=(DWORD) ((((MagickOffsetType) length) >> 32) & 0xFFFFFFFFUL);\n  map_handle=INVALID_HANDLE_VALUE;\n  map=(void *) NULL;\n  low_offset=(DWORD) (offset & 0xFFFFFFFFUL);\n  high_offset=(DWORD) ((offset >> 32) & 0xFFFFFFFFUL);\n  protection_mode=0;\n  if (protection & PROT_WRITE)\n    {\n      access_mode=FILE_MAP_WRITE;\n      if (!(flags & MAP_PRIVATE))\n        protection_mode=PAGE_READWRITE;\n      else\n        {\n          access_mode=FILE_MAP_COPY;\n          protection_mode=PAGE_WRITECOPY;\n        }\n    }\n  else\n    if (protection & PROT_READ)\n      {\n        access_mode=FILE_MAP_READ;\n        protection_mode=PAGE_READONLY;\n      }\n  if ((file == -1) && (flags & MAP_ANONYMOUS))\n    file_handle=INVALID_HANDLE_VALUE;\n  else\n    file_handle=(HANDLE) _get_osfhandle(file);\n  map_handle=CreateFileMapping(file_handle,0,protection_mode,high_length,\n    low_length,0);\n  if (map_handle)\n    {\n      map=(void *) MapViewOfFile(map_handle,access_mode,high_offset,low_offset,\n        length);\n      CloseHandle(map_handle);\n    }\n  if (map == (void *) NULL)\n    return((void *) ((char *) MAP_FAILED));\n  return((void *) ((char *) map));\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   N T O p e n D i r e c t o r y                                             %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  NTOpenDirectory() opens the directory named by filename and associates a\n%  directory stream with it.\n%\n%  The format of the NTOpenDirectory method is:\n%\n%      DIR *NTOpenDirectory(const char *path)\n%\n%  A description of each parameter follows:\n%\n%    o entry: Specifies a pointer to a DIR structure.\n%\n*/\nMagickPrivate DIR *NTOpenDirectory(const char *path)\n{\n  DIR\n    *entry;\n\n  size_t\n    length;\n\n  wchar_t\n    file_specification[MagickPathExtent];\n\n  assert(path != (const char *) NULL);\n  length=MultiByteToWideChar(CP_UTF8,0,path,-1,file_specification,\n    MagickPathExtent);\n  if (length == 0)\n    return((DIR *) NULL);\n  if(wcsncat(file_specification,(const wchar_t*) DirectorySeparator,\n       MagickPathExtent-wcslen(file_specification)-1) == (wchar_t*) NULL)\n    return((DIR *) NULL);\n  entry=(DIR *) AcquireMagickMemory(sizeof(DIR));\n  if (entry != (DIR *) NULL)\n    {\n      entry->firsttime=TRUE;\n      entry->hSearch=FindFirstFileW(file_specification,&entry->Win32FindData);\n    }\n  if (entry->hSearch == INVALID_HANDLE_VALUE)\n    {\n      if(wcsncat(file_specification,L\"*.*\",\n        MagickPathExtent-wcslen(file_specification)-1) == (wchar_t*) NULL)\n        {\n          entry=(DIR *) RelinquishMagickMemory(entry);\n          return((DIR *) NULL);\n        }\n      entry->hSearch=FindFirstFileW(file_specification,&entry->Win32FindData);\n      if (entry->hSearch == INVALID_HANDLE_VALUE)\n        {\n          entry=(DIR *) RelinquishMagickMemory(entry);\n          return((DIR *) NULL);\n        }\n    }\n  return(entry);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   N T O p e n L i b r a r y                                                 %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  NTOpenLibrary() loads a dynamic module into memory and returns a handle that\n%  can be used to access the various procedures in the module.\n%\n%  The format of the NTOpenLibrary method is:\n%\n%      void *NTOpenLibrary(const char *filename)\n%\n%  A description of each parameter follows:\n%\n%    o path: Specifies a pointer to string representing dynamic module that\n%      is to be loaded.\n%\n*/\n\nstatic inline const char *GetSearchPath(void)\n{\n#if defined(MAGICKCORE_LTDL_DELEGATE)\n  return(lt_dlgetsearchpath());\n#else\n  return(lt_slsearchpath);\n#endif\n}\n\nstatic UINT ChangeErrorMode(void)\n{\n  typedef UINT\n    (CALLBACK *GETERRORMODE)(void);\n\n  GETERRORMODE\n    getErrorMode;\n\n  HMODULE\n    handle;\n\n  UINT\n    mode;\n\n  mode=SEM_FAILCRITICALERRORS | SEM_NOOPENFILEERRORBOX;\n\n  handle=GetModuleHandle(\"kernel32.dll\");\n  if (handle == (HMODULE) NULL)\n    return SetErrorMode(mode);\n\n  getErrorMode=(GETERRORMODE) NTGetLibrarySymbol(handle,\"GetErrorMode\");\n  if (getErrorMode != (GETERRORMODE) NULL)\n    mode=getErrorMode() | SEM_FAILCRITICALERRORS | SEM_NOOPENFILEERRORBOX;\n\n  return SetErrorMode(mode);\n}\n\nstatic inline void *NTLoadLibrary(const char *filename)\n{\n  int\n    length;\n\n  wchar_t\n    path[MagickPathExtent];\n\n  length=MultiByteToWideChar(CP_UTF8,0,filename,-1,path,MagickPathExtent);\n  if (length == 0)\n    return((void *) NULL);\n  return (void *) LoadLibraryExW(path,NULL,LOAD_WITH_ALTERED_SEARCH_PATH);\n}\n\nMagickPrivate void *NTOpenLibrary(const char *filename)\n{\n  char\n    path[MagickPathExtent];\n\n  register const char\n    *p,\n    *q;\n\n  UINT\n    mode;\n\n  void\n    *handle;\n\n  mode=ChangeErrorMode();\n  handle=NTLoadLibrary(filename);\n  if (handle == (void *) NULL)\n    {\n      p=GetSearchPath();\n      while (p != (const char*) NULL)\n      {\n        q=strchr(p,DirectoryListSeparator);\n        if (q != (const char*) NULL)\n          (void) CopyMagickString(path,p,q-p+1);\n        else\n          (void) CopyMagickString(path,p,MagickPathExtent);\n        (void) ConcatenateMagickString(path,DirectorySeparator,MagickPathExtent);\n        (void) ConcatenateMagickString(path,filename,MagickPathExtent);\n        handle=NTLoadLibrary(path);\n        if (handle != (void *) NULL || q == (const char*) NULL)\n          break;\n        p=q+1;\n      }\n    }\n  SetErrorMode(mode);\n  return(handle);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%    N T R e a d D i r e c t o r y                                            %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  NTReadDirectory() returns a pointer to a structure representing the\n%  directory entry at the current position in the directory stream to which\n%  entry refers.\n%\n%  The format of the NTReadDirectory\n%\n%      NTReadDirectory(entry)\n%\n%  A description of each parameter follows:\n%\n%    o entry: Specifies a pointer to a DIR structure.\n%\n*/\nMagickPrivate struct dirent *NTReadDirectory(DIR *entry)\n{\n  int\n    status;\n\n  size_t\n    length;\n\n  if (entry == (DIR *) NULL)\n    return((struct dirent *) NULL);\n  if (!entry->firsttime)\n    {\n      status=FindNextFileW(entry->hSearch,&entry->Win32FindData);\n      if (status == 0)\n        return((struct dirent *) NULL);\n    }\n  length=WideCharToMultiByte(CP_UTF8,0,entry->Win32FindData.cFileName,-1,\n    entry->file_info.d_name,sizeof(entry->file_info.d_name),NULL,NULL);\n  if (length == 0)\n    return((struct dirent *) NULL);\n  entry->firsttime=FALSE;\n  entry->file_info.d_namlen=(int) strlen(entry->file_info.d_name);\n  return(&entry->file_info);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   N T R e g i s t r y K e y L o o k u p                                     %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  NTRegistryKeyLookup() returns ImageMagick installation path settings\n%  stored in the Windows Registry.  Path settings are specific to the\n%  installed ImageMagick version so that multiple Image Magick installations\n%  may coexist.\n%\n%  Values are stored in the registry under a base path path similar to\n%  \"HKEY_LOCAL_MACHINE/SOFTWARE\\ImageMagick\\6.7.4\\Q:16\" or\n%  \"HKEY_CURRENT_USER/SOFTWARE\\ImageMagick\\6.7.4\\Q:16\". The provided subkey\n%  is appended to this base path to form the full key.\n%\n%  The format of the NTRegistryKeyLookup method is:\n%\n%      unsigned char *NTRegistryKeyLookup(const char *subkey)\n%\n%  A description of each parameter follows:\n%\n%    o subkey: Specifies a string that identifies the registry object.\n%      Currently supported sub-keys include: \"BinPath\", \"ConfigurePath\",\n%      \"LibPath\", \"CoderModulesPath\", \"FilterModulesPath\", \"SharePath\".\n%\n*/\nMagickPrivate unsigned char *NTRegistryKeyLookup(const char *subkey)\n{\n  char\n    package_key[MagickPathExtent];\n\n  DWORD\n    size,\n    type;\n\n  HKEY\n    registry_key;\n\n  LONG\n    status;\n\n  unsigned char\n    *value;\n\n  /*\n    Look-up base key.\n  */\n  (void) FormatLocaleString(package_key,MagickPathExtent,\"SOFTWARE\\\\%s\\\\%s\\\\Q:%d\",\n    MagickPackageName,MagickLibVersionText,MAGICKCORE_QUANTUM_DEPTH);\n  (void) LogMagickEvent(ConfigureEvent,GetMagickModule(),\"%s\",package_key);\n  registry_key=(HKEY) INVALID_HANDLE_VALUE;\n  status=RegOpenKeyExA(HKEY_LOCAL_MACHINE,package_key,0,KEY_READ,&registry_key);\n  if (status != ERROR_SUCCESS)\n    status=RegOpenKeyExA(HKEY_CURRENT_USER,package_key,0,KEY_READ,\n      &registry_key);\n  if (status != ERROR_SUCCESS)\n    {\n      registry_key=(HKEY) INVALID_HANDLE_VALUE;\n      return((unsigned char *) NULL);\n    }\n  /*\n    Look-up sub key.\n  */\n  size=32;\n  value=(unsigned char *) AcquireQuantumMemory(size,sizeof(*value));\n  if (value == (unsigned char *) NULL)\n    {\n      RegCloseKey(registry_key);\n      return((unsigned char *) NULL);\n    }\n  (void) LogMagickEvent(ConfigureEvent,GetMagickModule(),\"%s\",subkey);\n  status=RegQueryValueExA(registry_key,subkey,0,&type,value,&size);\n  if ((status == ERROR_MORE_DATA) && (type == REG_SZ))\n    {\n      value=(unsigned char *) ResizeQuantumMemory(value,size,sizeof(*value));\n      if (value == (BYTE *) NULL)\n        {\n          RegCloseKey(registry_key);\n          return((unsigned char *) NULL);\n        }\n      status=RegQueryValueExA(registry_key,subkey,0,&type,value,&size);\n    }\n  RegCloseKey(registry_key);\n  if ((type != REG_SZ) || (status != ERROR_SUCCESS))\n    value=(unsigned char *) RelinquishMagickMemory(value);\n  return((unsigned char *) value);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   N T R e p o r t E v e n t                                                 %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  NTReportEvent() reports an event.\n%\n%  The format of the NTReportEvent method is:\n%\n%      MagickBooleanType NTReportEvent(const char *event,\n%        const MagickBooleanType error)\n%\n%  A description of each parameter follows:\n%\n%    o event: the event.\n%\n%    o error: MagickTrue the event is an error.\n%\n*/\nMagickPrivate MagickBooleanType NTReportEvent(const char *event,\n  const MagickBooleanType error)\n{\n  const char\n    *events[1];\n\n  HANDLE\n    handle;\n\n  WORD\n    type;\n\n  handle=RegisterEventSource(NULL,MAGICKCORE_PACKAGE_NAME);\n  if (handle == NULL)\n    return(MagickFalse);\n  events[0]=event;\n  type=error ? EVENTLOG_ERROR_TYPE : EVENTLOG_WARNING_TYPE;\n  ReportEvent(handle,type,0,0,NULL,1,0,events,NULL);\n  DeregisterEventSource(handle);\n  return(MagickTrue);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   N T R e s o u r c e T o B l o b                                           %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  NTResourceToBlob() returns a blob containing the contents of the resource\n%  in the current executable specified by the id parameter. This currently\n%  used to retrieve MGK files tha have been embedded into the various command\n%  line utilities.\n%\n%  The format of the NTResourceToBlob method is:\n%\n%      unsigned char *NTResourceToBlob(const char *id)\n%\n%  A description of each parameter follows:\n%\n%    o id: Specifies a string that identifies the resource.\n%\n*/\nMagickPrivate unsigned char *NTResourceToBlob(const char *id)\n{\n\n#ifndef MAGICKCORE_LIBRARY_NAME\n  char\n    path[MagickPathExtent];\n#endif\n\n  DWORD\n    length;\n\n  HGLOBAL\n    global;\n\n  HMODULE\n    handle;\n\n  HRSRC\n    resource;\n\n  unsigned char\n    *blob,\n    *value;\n\n  assert(id != (const char *) NULL);\n  (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",id);\n#ifdef MAGICKCORE_LIBRARY_NAME\n  handle=GetModuleHandle(MAGICKCORE_LIBRARY_NAME);\n#else\n  (void) FormatLocaleString(path,MagickPathExtent,\"%s%s%s\",GetClientPath(),\n    DirectorySeparator,GetClientName());\n  if (IsPathAccessible(path) != MagickFalse)\n    handle=GetModuleHandle(path);\n  else\n    handle=GetModuleHandle(0);\n#endif\n  if (!handle)\n    return((unsigned char *) NULL);\n  resource=FindResource(handle,id,\"IMAGEMAGICK\");\n  if (!resource)\n    return((unsigned char *) NULL);\n  global=LoadResource(handle,resource);\n  if (!global)\n    return((unsigned char *) NULL);\n  length=SizeofResource(handle,resource);\n  value=(unsigned char *) LockResource(global);\n  if (!value)\n    {\n      FreeResource(global);\n      return((unsigned char *) NULL);\n    }\n  blob=(unsigned char *) AcquireQuantumMemory(length+MagickPathExtent,\n    sizeof(*blob));\n  if (blob != (unsigned char *) NULL)\n    {\n      (void) CopyMagickMemory(blob,value,length);\n      blob[length]='\\0';\n    }\n  UnlockResource(global);\n  FreeResource(global);\n  return(blob);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   N T S e e k D i r e c t o r y                                             %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  NTSeekDirectory() sets the position of the next NTReadDirectory() operation\n%  on the directory stream.\n%\n%  The format of the NTSeekDirectory method is:\n%\n%      void NTSeekDirectory(DIR *entry,ssize_t position)\n%\n%  A description of each parameter follows:\n%\n%    o entry: Specifies a pointer to a DIR structure.\n%\n%    o position: specifies the position associated with the directory\n%      stream.\n%\n*/\nMagickPrivate void NTSeekDirectory(DIR *entry,ssize_t position)\n{\n  (void) position;\n  (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"...\");\n  assert(entry != (DIR *) NULL);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   N T S e t S e a r c h P a t h                                             %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  NTSetSearchPath() sets the current locations that the subsystem should\n%  look at to find dynamically loadable modules.\n%\n%  The format of the NTSetSearchPath method is:\n%\n%      int NTSetSearchPath(const char *path)\n%\n%  A description of each parameter follows:\n%\n%    o path: Specifies a pointer to string representing the search path\n%      for DLL's that can be dynamically loaded.\n%\n*/\nMagickPrivate int NTSetSearchPath(const char *path)\n{\n#if defined(MAGICKCORE_LTDL_DELEGATE)\n  lt_dlsetsearchpath(path);\n#else\n  if (lt_slsearchpath != (char *) NULL)\n    lt_slsearchpath=DestroyString(lt_slsearchpath);\n  if (path != (char *) NULL)\n    lt_slsearchpath=AcquireString(path);\n#endif\n  return(0);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n+  N T S y n c M e m o r y                                                    %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  NTSyncMemory() emulates the Unix method of the same name.\n%\n%  The format of the NTSyncMemory method is:\n%\n%      int NTSyncMemory(void *address,size_t length,int flags)\n%\n%  A description of each parameter follows:\n%\n%    o address: the address of the binary large object.\n%\n%    o length: the length of the binary large object.\n%\n%    o flags: Option flags (ignored for Windows).\n%\n*/\nMagickPrivate int NTSyncMemory(void *address,size_t length,int flags)\n{\n  (void) flags;\n  if (FlushViewOfFile(address,length) == MagickFalse)\n    return(-1);\n  return(0);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   N T S y s t e m C o m m a n d                                             %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  NTSystemCommand() executes the specified command and waits until it\n%  terminates.  The returned value is the exit status of the command.\n%\n%  The format of the NTSystemCommand method is:\n%\n%      int NTSystemCommand(MagickFalse,const char *command)\n%\n%  A description of each parameter follows:\n%\n%    o command: This string is the command to execute.\n%\n%    o output: an optional buffer to store the output from stderr/stdout.\n%\n*/\nMagickPrivate int NTSystemCommand(const char *command,char *output)\n{\n#define CleanupOutputHandles \\\n  if (read_output != (HANDLE) NULL) \\\n    { \\\n       CloseHandle(read_output); \\\n       read_output=(HANDLE) NULL; \\\n       CloseHandle(write_output); \\\n       write_output=(HANDLE) NULL; \\\n    }\n\n#define CopyLastError \\\n  if (output != (char *) NULL) \\\n    { \\\n      error=NTGetLastError(); \\\n      if (error != (char *) NULL) \\\n        { \\\n          CopyMagickString(output,error,MagickPathExtent); \\\n          error=DestroyString(error); \\\n        } \\\n    }\n\n  char\n    *error,\n    local_command[MagickPathExtent];\n\n  DWORD\n    bytes_read,\n    child_status,\n    size;\n\n  int\n    status;\n\n  MagickBooleanType\n    asynchronous;\n\n  HANDLE\n    read_output,\n    write_output;\n\n  PROCESS_INFORMATION\n    process_info;\n\n  SECURITY_ATTRIBUTES\n    sa;\n\n  STARTUPINFO\n    startup_info;\n\n  if (command == (char *) NULL)\n    return(-1);\n  read_output=(HANDLE) NULL;\n  write_output=(HANDLE) NULL;\n  GetStartupInfo(&startup_info);\n  startup_info.dwFlags=STARTF_USESHOWWINDOW;\n  startup_info.wShowWindow=SW_SHOWMINNOACTIVE;\n  (void) CopyMagickString(local_command,command,MagickPathExtent);\n  asynchronous=command[strlen(command)-1] == '&' ? MagickTrue : MagickFalse;\n  if (asynchronous != MagickFalse)\n    {\n      local_command[strlen(command)-1]='\\0';\n      startup_info.wShowWindow=SW_SHOWDEFAULT;\n    }\n  else\n    {\n      if (command[strlen(command)-1] == '|')\n        local_command[strlen(command)-1]='\\0';\n      else\n        startup_info.wShowWindow=SW_HIDE;\n      read_output=(HANDLE) NULL;\n      if (output != (char *) NULL)\n        {\n          sa.nLength=sizeof(SECURITY_ATTRIBUTES);\n          sa.bInheritHandle=TRUE;\n          sa.lpSecurityDescriptor=NULL;\n          if (CreatePipe(&read_output,&write_output,NULL,0))\n            {\n              if (SetHandleInformation(write_output,HANDLE_FLAG_INHERIT,\n                  HANDLE_FLAG_INHERIT))\n                {\n                  startup_info.dwFlags|=STARTF_USESTDHANDLES;\n                  startup_info.hStdOutput=write_output;\n                  startup_info.hStdError=write_output;\n                }\n              else\n                CleanupOutputHandles;\n            }\n          else\n            read_output=(HANDLE) NULL;\n        }\n    }\n  status=CreateProcess((LPCTSTR) NULL,local_command,(LPSECURITY_ATTRIBUTES)\n    NULL,(LPSECURITY_ATTRIBUTES) NULL,(BOOL) TRUE,(DWORD)\n    NORMAL_PRIORITY_CLASS,(LPVOID) NULL,(LPCSTR) NULL,&startup_info,\n    &process_info);\n  if (status == 0)\n    {\n      CopyLastError;\n      CleanupOutputHandles;\n      return(-1);\n    }\n  if (asynchronous != MagickFalse)\n    return(status == 0);\n  status=WaitForSingleObject(process_info.hProcess,INFINITE);\n  if (status != WAIT_OBJECT_0)\n    {\n      CopyLastError;\n      CleanupOutputHandles;\n      return(status);\n    }\n  status=GetExitCodeProcess(process_info.hProcess,&child_status);\n  if (status == 0)\n    {\n      CopyLastError;\n      CleanupOutputHandles;\n      return(-1);\n    }\n  CloseHandle(process_info.hProcess);\n  CloseHandle(process_info.hThread);\n  if (read_output != (HANDLE) NULL)\n    if (PeekNamedPipe(read_output,(LPVOID) NULL,0,(LPDWORD) NULL,&size,\n          (LPDWORD) NULL))\n      if ((size > 0) && (ReadFile(read_output,output,MagickPathExtent-1,\n          &bytes_read,NULL))) \n        output[bytes_read]='\\0';\n  CleanupOutputHandles;\n  return((int) child_status);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   N T S y s t e m C o n i f i g u r a t i o n                               %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  NTSystemConfiguration() provides a way for the application to determine\n%  values for system limits or options at runtime.\n%\n%  The format of the exit method is:\n%\n%      ssize_t NTSystemConfiguration(int name)\n%\n%  A description of each parameter follows:\n%\n%    o name: _SC_PAGE_SIZE or _SC_PHYS_PAGES.\n%\n*/\nMagickPrivate ssize_t NTSystemConfiguration(int name)\n{\n  switch (name)\n  {\n    case _SC_PAGESIZE:\n    {\n      SYSTEM_INFO\n        system_info;\n\n      GetSystemInfo(&system_info);\n      return(system_info.dwPageSize);\n    }\n    case _SC_PHYS_PAGES:\n    {\n      HMODULE\n        handle;\n\n      LPFNDLLFUNC2\n        module;\n\n      NTMEMORYSTATUSEX\n        status;\n\n      SYSTEM_INFO\n        system_info;\n\n      handle=GetModuleHandle(\"kernel32.dll\");\n      if (handle == (HMODULE) NULL)\n        return(0L);\n      GetSystemInfo(&system_info);\n      module=(LPFNDLLFUNC2) NTGetLibrarySymbol(handle,\"GlobalMemoryStatusEx\");\n      if (module == (LPFNDLLFUNC2) NULL)\n        {\n          MEMORYSTATUS\n            global_status;\n\n          GlobalMemoryStatus(&global_status);\n          return((ssize_t) global_status.dwTotalPhys/system_info.dwPageSize/4);\n        }\n      status.dwLength=sizeof(status);\n      if (module(&status) == 0)\n        return(0L);\n      return((ssize_t) status.ullTotalPhys/system_info.dwPageSize/4);\n    }\n    case _SC_OPEN_MAX:\n      return(2048);\n    default:\n      break;\n  }\n  return(-1);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   N T T e l l D i r e c t o r y                                             %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  NTTellDirectory() returns the current location associated with the named\n%  directory stream.\n%\n%  The format of the NTTellDirectory method is:\n%\n%      ssize_t NTTellDirectory(DIR *entry)\n%\n%  A description of each parameter follows:\n%\n%    o entry: Specifies a pointer to a DIR structure.\n%\n*/\nMagickPrivate ssize_t NTTellDirectory(DIR *entry)\n{\n  assert(entry != (DIR *) NULL);\n  return(0);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   N T T r u n c a t e F i l e                                               %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  NTTruncateFile() truncates a file to a specified length.\n%\n%  The format of the NTTruncateFile method is:\n%\n%      int NTTruncateFile(int file,off_t length)\n%\n%  A description of each parameter follows:\n%\n%    o file: the file.\n%\n%    o length: the file length.\n%\n*/\nMagickPrivate int NTTruncateFile(int file,off_t length)\n{\n  DWORD\n    file_pointer;\n\n  HANDLE\n    file_handle;\n\n  long\n    high,\n    low;\n\n  file_handle=(HANDLE) _get_osfhandle(file);\n  if (file_handle == INVALID_HANDLE_VALUE)\n    return(-1);\n  low=(long) (length & 0xffffffffUL);\n  high=(long) ((((MagickOffsetType) length) >> 32) & 0xffffffffUL);\n  file_pointer=SetFilePointer(file_handle,low,&high,FILE_BEGIN);\n  if ((file_pointer == 0xFFFFFFFF) && (GetLastError() != NO_ERROR))\n    return(-1);\n  if (SetEndOfFile(file_handle) == 0)\n    return(-1);\n  return(0);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n+  N T U n m a p M e m o r y                                                  %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  NTUnmapMemory() emulates the Unix munmap method.\n%\n%  The format of the NTUnmapMemory method is:\n%\n%      int NTUnmapMemory(void *map,size_t length)\n%\n%  A description of each parameter follows:\n%\n%    o map: the address of the binary large object.\n%\n%    o length: the length of the binary large object.\n%\n*/\nMagickPrivate int NTUnmapMemory(void *map,size_t length)\n{\n  (void) length;\n  if (UnmapViewOfFile(map) == 0)\n    return(-1);\n  return(0);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   N T U s e r T i m e                                                       %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  NTUserTime() returns the total time the process has been scheduled (e.g.\n%  seconds) since the last call to StartTimer().\n%\n%  The format of the UserTime method is:\n%\n%      double NTUserTime(void)\n%\n*/\nMagickPrivate double NTUserTime(void)\n{\n  DWORD\n    status;\n\n  FILETIME\n    create_time,\n    exit_time;\n\n  OSVERSIONINFO\n    OsVersionInfo;\n\n  union\n  {\n    FILETIME\n      filetime;\n\n    __int64\n      filetime64;\n  } kernel_time;\n\n  union\n  {\n    FILETIME\n      filetime;\n\n    __int64\n      filetime64;\n  } user_time;\n\n  OsVersionInfo.dwOSVersionInfoSize=sizeof(OSVERSIONINFO);\n  GetVersionEx(&OsVersionInfo);\n  if (OsVersionInfo.dwPlatformId != VER_PLATFORM_WIN32_NT)\n    return(NTElapsedTime());\n  status=GetProcessTimes(GetCurrentProcess(),&create_time,&exit_time,\n    &kernel_time.filetime,&user_time.filetime);\n  if (status != TRUE)\n    return(0.0);\n  return((double) 1.0e-7*(kernel_time.filetime64+user_time.filetime64));\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   N T W a r n i n g H a n d l e r                                           %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  NTWarningHandler() displays a warning reason.\n%\n%  The format of the NTWarningHandler method is:\n%\n%      void NTWarningHandler(const ExceptionType severity,const char *reason,\n%        const char *description)\n%\n%  A description of each parameter follows:\n%\n%    o severity: Specifies the numeric warning category.\n%\n%    o reason: Specifies the reason to display before terminating the\n%      program.\n%\n%    o description: Specifies any description to the reason.\n%\n*/\nMagickPrivate void NTWarningHandler(const ExceptionType severity,\n  const char *reason,const char *description)\n{\n  char\n    buffer[2*MagickPathExtent];\n\n  (void) severity;\n  if (reason == (char *) NULL)\n    return;\n  if (description == (char *) NULL)\n    (void) FormatLocaleString(buffer,MagickPathExtent,\"%s: %s.\\n\",GetClientName(),\n      reason);\n  else\n    (void) FormatLocaleString(buffer,MagickPathExtent,\"%s: %s (%s).\\n\",\n      GetClientName(),reason,description);\n  (void) MessageBox(NULL,buffer,\"ImageMagick Warning\",MB_OK | MB_TASKMODAL |\n    MB_SETFOREGROUND | MB_ICONINFORMATION);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   N T W i n d o w s G e n e s i s                                           %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  NTWindowsGenesis() initializes the MagickCore Windows environment.\n%\n%  The format of the NTWindowsGenesis method is:\n%\n%      void NTWindowsGenesis(void)\n%\n*/\n\nstatic LONG WINAPI NTUncaughtException(EXCEPTION_POINTERS *info)\n{\n  magick_unreferenced(info);\n  AsynchronousResourceComponentTerminus();\n  return(EXCEPTION_CONTINUE_SEARCH);\n}\n\nMagickPrivate void NTWindowsGenesis(void)\n{\n  char\n    *mode;\n\n  SetUnhandledExceptionFilter(NTUncaughtException);\n  mode=GetEnvironmentValue(\"MAGICK_ERRORMODE\");\n  if (mode != (char *) NULL)\n    {\n      (void) SetErrorMode(StringToInteger(mode));\n      mode=DestroyString(mode);\n    }\n#if defined(_DEBUG) && !defined(__BORLANDC__) && !defined(__MINGW32__) && !defined(__MINGW64__)\n  if (IsEventLogging() != MagickFalse)\n    {\n      int\n        debug;\n\n      debug=_CrtSetDbgFlag(_CRTDBG_REPORT_FLAG);\n      debug|=_CRTDBG_CHECK_ALWAYS_DF | _CRTDBG_DELAY_FREE_MEM_DF |\n        _CRTDBG_LEAK_CHECK_DF;\n      (void) _CrtSetDbgFlag(debug);\n      _ASSERTE(_CrtCheckMemory());\n    }\n#endif\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   N T W i n d o w s T e r m i n u s                                         %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  NTWindowsTerminus() terminates the MagickCore Windows environment.\n%\n%  The format of the NTWindowsTerminus method is:\n%\n%      void NTWindowsTerminus(void)\n%\n*/\nMagickPrivate void NTWindowsTerminus(void)\n{\n  NTGhostscriptUnLoadDLL();\n  if (winsock_semaphore == (SemaphoreInfo *) NULL)\n    ActivateSemaphoreInfo(&winsock_semaphore);\n  LockSemaphoreInfo(winsock_semaphore);\n  if (wsaData != (WSADATA *) NULL)\n    {\n      WSACleanup();\n      wsaData=(WSADATA *) RelinquishMagickMemory((void *) wsaData);\n    }\n  UnlockSemaphoreInfo(winsock_semaphore);\n  RelinquishSemaphoreInfo(&winsock_semaphore);\n}\n#endif\n",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/MagickCore/nt-base.h": "/*\n  Copyright 1999-2016 ImageMagick Studio LLC, a non-profit organization\n  dedicated to making software imaging solutions freely available.\n  \n  You may not use this file except in compliance with the License.\n  obtain a copy of the License at\n  \n    http://www.imagemagick.org/script/license.php\n  \n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n  MagickCore Windows NT utility methods.\n*/\n#ifndef MAGICKCORE_NT_BASE_H\n#define MAGICKCORE_NT_BASE_H\n\n#include \"MagickCore/exception.h\"\n#include \"MagickCore/geometry.h\"\n\n#if defined(__cplusplus) || defined(c_plusplus)\nextern \"C\" {\n#endif\n\n#if defined(MAGICKCORE_WINDOWS_SUPPORT)\n\n#define WIN32_LEAN_AND_MEAN\n#define VC_EXTRALEAN\n#define _CRT_SECURE_NO_DEPRECATE  1\n#include <windows.h>\n#include <wchar.h>\n#include <winuser.h>\n#include <wingdi.h>\n#include <io.h>\n#include <process.h>\n#include <errno.h>\n#include <malloc.h>\n#include <sys/utime.h>\n#if defined(_DEBUG) && !defined(__MINGW32__) && !defined(__MINGW64__)\n#include <crtdbg.h>\n#endif\n\n#define PROT_READ  0x01\n#define PROT_WRITE  0x02\n#define MAP_SHARED  0x01\n#define MAP_PRIVATE  0x02\n#define MAP_ANONYMOUS  0x20\n#define F_OK 0\n#define R_OK 4\n#define W_OK 2\n#define RW_OK 6\n#define _SC_PAGESIZE 1\n#define _SC_PHYS_PAGES 2\n#define _SC_OPEN_MAX 3\n#if !defined(SSIZE_MAX)\n#define SSIZE_MAX  0x7fffffffL\n#endif\n\n/*\n  _MSC_VER values:\n    1100 MSVC 5.0\n    1200 MSVC 6.0\n    1300 MSVC 7.0 Visual C++ .NET 2002\n    1310 Visual c++ .NET 2003\n    1400 Visual C++ 2005\n    1500 Visual C++ 2008\n    1600 Visual C++ 2010\n    1700 Visual C++ 2012\n    1800 Visual C++ 2013\n    1900 Visual C++ 2015\n*/\n\n#if !defined(chsize)\n# if defined(__BORLANDC__)\n#   define chsize(file,length)  chsize(file,length)\n# else\n#   define chsize(file,length)  _chsize(file,length)\n# endif\n#endif\n\n#if !defined(access)\n#if defined(_VISUALC_) && (_MSC_VER >= 1400)\n#  define access(path,mode)  _access_s(path,mode)\n#endif\n#endif\n#if !defined(chdir)\n#  define chdir  _chdir\n#endif\n#if !defined(close)\n#  define close  _close\n#endif\n#if !defined(closedir)\n#  define closedir(directory)  NTCloseDirectory(directory)\n#endif\n#define MAGICKCORE_HAVE_ERF\n#if defined(_VISUALC_) && (_MSC_VER < 1700)\n#  define erf(x)  NTErf(x)\n#endif\n#if !defined(fdopen)\n#  define fdopen  _fdopen\n#endif\n#if !defined(fileno)\n#  define fileno  _fileno\n#endif\n#if !defined(fseek) && !defined(__MINGW32__) && !defined(__MINGW64__)\n#if defined(MAGICKCORE_WINDOWS_SUPPORT) && !defined(Windows95) && \\\n  !(defined(_MSC_VER) && (_MSC_VER < 1400)) && \\\n  !(defined(__MSVCRT_VERSION__) && (__MSVCRT_VERSION__ < 0x800))\n#  define fseek  _fseeki64\n#endif\n#endif\n#if !defined(fstat) && !defined(__BORLANDC__)\n#if defined(MAGICKCORE_WINDOWS_SUPPORT) && !defined(Windows95) && \\\n  !(defined(_MSC_VER) && (_MSC_VER < 1400)) && \\\n  !(defined(__MSVCRT_VERSION__) && (__MSVCRT_VERSION__ < 0x800))\n#  define fstat  _fstati64\n#else\n#  define fstat  _fstat\n#endif\n#endif\n#if !defined(fsync)\n#  define fsync  _commit\n#endif\n#if !defined(ftell) && !defined(__MINGW32__) && !defined(__MINGW64__)\n#if defined(MAGICKCORE_WINDOWS_SUPPORT) && !defined(Windows95) && \\\n  !(defined(_MSC_VER) && (_MSC_VER < 1400)) && \\\n  !(defined(__MSVCRT_VERSION__) && (__MSVCRT_VERSION__ < 0x800))\n#  define ftell  _ftelli64\n#endif\n#endif\n#if !defined(ftruncate)\n#  define ftruncate(file,length)  NTTruncateFile(file,length)\n#endif\n#if !defined(getcwd)\n#  define getcwd  _getcwd\n#endif\n#if !defined(getpid)\n#  define getpid  _getpid\n#endif\n#if !defined(hypot)\n#  define hypot  _hypot\n#endif\n#if !defined(isatty)\n#  define isatty  _isatty\n#endif\n#if !defined(locale_t)\n#define locale_t _locale_t\n#endif\n#if defined(MAGICKCORE_WINDOWS_SUPPORT) && !defined(Windows95) && \\\n  !(defined(_MSC_VER) && (_MSC_VER < 1400)) && \\\n  !(defined(__MSVCRT_VERSION__) && (__MSVCRT_VERSION__ < 0x800))\n#if !defined(lseek)\n#  define lseek  _lseeki64\n#endif\n#else\n#if !defined(lseek)\n#  define lseek  _lseek\n#endif\n#endif\n#if !defined(MAGICKCORE_LTDL_DELEGATE)\n#if !defined(lt_dlclose)\n#  define lt_dlclose(handle)  NTCloseLibrary(handle)\n#endif\n#if !defined(lt_dlerror)\n#  define lt_dlerror()  NTGetLibraryError()\n#endif\n#if !defined(lt_dlexit)\n#  define lt_dlexit()  NTExitLibrary()\n#endif\n#if !defined(lt_dlinit)\n#  define lt_dlinit()  NTInitializeLibrary()\n#endif\n#if !defined(lt_dlopen)\n#  define lt_dlopen(filename)  NTOpenLibrary(filename)\n#endif\n#if !defined(lt_dlsetsearchpath)\n#  define lt_dlsetsearchpath(path)  NTSetSearchPath(path)\n#endif\n#if !defined(lt_dlsym)\n#  define lt_dlsym(handle,name)  NTGetLibrarySymbol(handle,name)\n#endif\n#endif\n#if !defined(mkdir)\n#  define mkdir  _mkdir\n#endif\n#if !defined(mmap)\n#  define mmap(address,length,protection,access,file,offset) \\\n  NTMapMemory(address,length,protection,access,file,offset)\n#endif\n#if !defined(msync)\n#  define msync(address,length,flags)  NTSyncMemory(address,length,flags)\n#endif\n#if !defined(munmap)\n#  define munmap(address,length)  NTUnmapMemory(address,length)\n#endif\n#if !defined(opendir)\n#  define opendir(directory)  NTOpenDirectory(directory)\n#endif\n#if !defined(open)\n#  define open  _open\n#endif\n#if !defined(pclose)\n#  define pclose  _pclose\n#endif\n#if !defined(popen)\n#  define popen  _popen\n#endif\n#if !defined(fprintf_l)\n#define fprintf_l  _fprintf_s_l\n#endif\n#if !defined(read)\n#  define read(fd,buffer,count)  _read(fd,buffer,(unsigned int) count)\n#endif\n#if !defined(readdir)\n#  define readdir(directory)  NTReadDirectory(directory)\n#endif\n#if !defined(seekdir)\n#  define seekdir(directory,offset)  NTSeekDirectory(directory,offset)\n#endif\n#if !defined(setmode)\n#  define setmode  _setmode\n#endif\n#if !defined(spawnvp)\n#  define spawnvp  _spawnvp\n#endif\n#if !defined(strtod_l)\n#define strtod_l  _strtod_l\n#endif\n#if !defined(stat) && !defined(__BORLANDC__)\n#if defined(MAGICKCORE_WINDOWS_SUPPORT) && !defined(Windows95) && \\\n  !(defined(_MSC_VER) && (_MSC_VER < 1400)) && \\\n  !(defined(__MSVCRT_VERSION__) && (__MSVCRT_VERSION__ < 0x800))\n#  define stat  _stati64\n#else\n#  define stat  _stat\n#endif\n#endif\n#if !defined(strcasecmp)\n#  define strcasecmp  _stricmp\n#endif\n#if !defined(strncasecmp)\n#  define strncasecmp  _strnicmp\n#endif\n#if !defined(sysconf)\n#  define sysconf(name)  NTSystemConfiguration(name)\n#endif\n#if defined(MAGICKCORE_WINDOWS_SUPPORT) && !defined(Windows95) && \\\n  !(defined(_MSC_VER) && (_MSC_VER < 1400)) && \\\n  !(defined(__MSVCRT_VERSION__) && (__MSVCRT_VERSION__ < 0x800))\n#  define tell  _telli64\n#else\n#  define tell  _tell\n#endif\n#if !defined(telldir)\n#  define telldir(directory)  NTTellDirectory(directory)\n#endif\n#if !defined(tempnam)\n#  define tempnam  _tempnam_s\n#endif\n#if !defined(umask)\n#  define umask  _umask\n#endif\n#if !defined(unlink)\n#  define unlink  _unlink\n#endif\n#if !defined(utime)\n#  define utime  _utime\n#endif\n#if !defined(vfprintf_l)\n#define vfprintf_l  _vfprintf_l\n#endif\n#if !defined(vsnprintf)\n#if !defined(_MSC_VER) || (defined(_MSC_VER) && _MSC_VER < 1500)\n#define vsnprintf _vsnprintf \n#endif\n#endif\n#if !defined(vsnprintf_l)\n#define vsnprintf_l  _vsnprintf_l\n#endif\n#if !defined(write)\n#  define write(fd,buffer,count)  _write(fd,buffer,(unsigned int) count)\n#endif\n#if !defined(wstat) && !defined(__BORLANDC__)\n#if defined(MAGICKCORE_WINDOWS_SUPPORT) && !defined(Windows95) && \\\n  !(defined(_MSC_VER) && (_MSC_VER < 1400)) && \\\n  !(defined(__MSVCRT_VERSION__) && (__MSVCRT_VERSION__ < 0x800))\n#  define wstat  _wstati64\n#else\n#  define wstat  _wstat\n#endif\n#endif\n\n#if defined(__BORLANDC__)\n#undef _O_RANDOM\n#define _O_RANDOM 0\n#undef _O_SEQUENTIAL\n#define _O_SEQUENTIAL 0\n#undef _O_SHORT_LIVED\n#define _O_SHORT_LIVED 0\n#undef _O_TEMPORARY\n#define _O_TEMPORARY 0\n#endif\n\n#undef gettimeofday\n\ntypedef struct _GhostInfo\n  GhostInfo_;\n\nextern MagickExport char\n  **NTArgvToUTF8(const int argc,wchar_t **);\n\nextern MagickExport const GhostInfo_\n  *NTGhostscriptDLLVectors(void);\n\nextern MagickExport void\n  NTErrorHandler(const ExceptionType,const char *,const char *),\n  NTGhostscriptUnLoadDLL(void),\n  NTWarningHandler(const ExceptionType,const char *,const char *);\n#endif\n\n#if defined(__cplusplus) || defined(c_plusplus)\n}\n#endif\n\n#endif\n",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/MagickCore/module.c": "/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%                  M   M   OOO   DDDD   U   U  L      EEEEE                   %\n%                  MM MM  O   O  D   D  U   U  L      E                       %\n%                  M M M  O   O  D   D  U   U  L      EEE                     %\n%                  M   M  O   O  D   D  U   U  L      E                       %\n%                  M   M   OOO   DDDD    UUU   LLLLL  EEEEE                   %\n%                                                                             %\n%                                                                             %\n%                          MagickCore Module Methods                          %\n%                                                                             %\n%                              Software Design                                %\n%                              Bob Friesenhahn                                %\n%                                March 2000                                   %\n%                                                                             %\n%                                                                             %\n%  Copyright 1999-2016 ImageMagick Studio LLC, a non-profit organization      %\n%  dedicated to making software imaging solutions freely available.           %\n%                                                                             %\n%  You may not use this file except in compliance with the License.  You may  %\n%  obtain a copy of the License at                                            %\n%                                                                             %\n%    http://www.imagemagick.org/script/license.php                            %\n%                                                                             %\n%  Unless required by applicable law or agreed to in writing, software        %\n%  distributed under the License is distributed on an \"AS IS\" BASIS,          %\n%  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   %\n%  See the License for the specific language governing permissions and        %\n%  limitations under the License.                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%\n%\n*/\n\f\n/*\n  Include declarations.\n*/\n#include \"MagickCore/studio.h\"\n#include \"MagickCore/blob.h\"\n#include \"MagickCore/coder.h\"\n#include \"MagickCore/client.h\"\n#include \"MagickCore/configure.h\"\n#include \"MagickCore/exception.h\"\n#include \"MagickCore/exception-private.h\"\n#include \"MagickCore/log.h\"\n#include \"MagickCore/linked-list.h\"\n#include \"MagickCore/magic.h\"\n#include \"MagickCore/magick.h\"\n#include \"MagickCore/memory_.h\"\n#include \"MagickCore/module.h\"\n#include \"MagickCore/module-private.h\"\n#include \"MagickCore/nt-base-private.h\"\n#include \"MagickCore/policy.h\"\n#include \"MagickCore/semaphore.h\"\n#include \"MagickCore/splay-tree.h\"\n#include \"MagickCore/static.h\"\n#include \"MagickCore/string_.h\"\n#include \"MagickCore/string-private.h\"\n#include \"MagickCore/token.h\"\n#include \"MagickCore/utility.h\"\n#include \"MagickCore/utility-private.h\"\n#if defined(MAGICKCORE_MODULES_SUPPORT)\n#if defined(MAGICKCORE_LTDL_DELEGATE)\n#include \"ltdl.h\"\ntypedef lt_dlhandle ModuleHandle;\n#else\ntypedef void *ModuleHandle;\n#endif\n\f\n/*\n  Define declarations.\n*/\n#if defined(MAGICKCORE_LTDL_DELEGATE)\n#  define ModuleGlobExpression \"*.la\"\n#else\n#  if defined(_DEBUG)\n#    define ModuleGlobExpression \"IM_MOD_DB_*.dll\"\n#  else\n#    define ModuleGlobExpression \"IM_MOD_RL_*.dll\"\n#  endif\n#endif\n\f\n/*\n  Global declarations.\n*/\nstatic SemaphoreInfo\n  *module_semaphore = (SemaphoreInfo *) NULL;\n\nstatic SplayTreeInfo\n  *module_list = (SplayTreeInfo *) NULL;\n\f\n/*\n  Forward declarations.\n*/\nstatic const ModuleInfo\n  *RegisterModule(const ModuleInfo *,ExceptionInfo *);\n\nstatic MagickBooleanType\n  GetMagickModulePath(const char *,MagickModuleType,char *,ExceptionInfo *),\n  IsModuleTreeInstantiated(),\n  UnregisterModule(const ModuleInfo *,ExceptionInfo *);\n\nstatic void\n  TagToCoderModuleName(const char *,char *),\n  TagToFilterModuleName(const char *,char *),\n  TagToModuleName(const char *,const char *,char *);\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   A c q u i r e M o d u l e I n f o                                         %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  AcquireModuleInfo() allocates the ModuleInfo structure.\n%\n%  The format of the AcquireModuleInfo method is:\n%\n%      ModuleInfo *AcquireModuleInfo(const char *path,const char *tag)\n%\n%  A description of each parameter follows:\n%\n%    o path: the path associated with the tag.\n%\n%    o tag: a character string that represents the image format we are\n%      looking for.\n%\n*/\nMagickExport ModuleInfo *AcquireModuleInfo(const char *path,const char *tag)\n{\n  ModuleInfo\n    *module_info;\n\n  module_info=(ModuleInfo *) AcquireMagickMemory(sizeof(*module_info));\n  if (module_info == (ModuleInfo *) NULL)\n    ThrowFatalException(ResourceLimitFatalError,\"MemoryAllocationFailed\");\n  (void) ResetMagickMemory(module_info,0,sizeof(*module_info));\n  if (path != (const char *) NULL)\n    module_info->path=ConstantString(path);\n  if (tag != (const char *) NULL)\n    module_info->tag=ConstantString(tag);\n  module_info->timestamp=time(0);\n  module_info->signature=MagickCoreSignature;\n  return(module_info);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   D e s t r o y M o d u l e L i s t                                         %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  DestroyModuleList() unregisters any previously loaded modules and exits\n%  the module loaded environment.\n%\n%  The format of the DestroyModuleList module is:\n%\n%      void DestroyModuleList(void)\n%\n*/\nMagickExport void DestroyModuleList(void)\n{\n  /*\n    Destroy magick modules.\n  */\n  LockSemaphoreInfo(module_semaphore);\n#if defined(MAGICKCORE_MODULES_SUPPORT)\n  if (module_list != (SplayTreeInfo *) NULL)\n    module_list=DestroySplayTree(module_list);\n#endif\n  UnlockSemaphoreInfo(module_semaphore);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   G e t M o d u l e I n f o                                                 %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  GetModuleInfo() returns a pointer to a ModuleInfo structure that matches the\n%  specified tag.  If tag is NULL, the head of the module list is returned. If\n%  no modules are loaded, or the requested module is not found, NULL is\n%  returned.\n%\n%  The format of the GetModuleInfo module is:\n%\n%      ModuleInfo *GetModuleInfo(const char *tag,ExceptionInfo *exception)\n%\n%  A description of each parameter follows:\n%\n%    o tag: a character string that represents the image format we are\n%      looking for.\n%\n%    o exception: return any errors or warnings in this structure.\n%\n*/\nMagickExport ModuleInfo *GetModuleInfo(const char *tag,ExceptionInfo *exception)\n{\n  ModuleInfo\n    *module_info;\n\n  if (IsModuleTreeInstantiated() == MagickFalse)\n    return((ModuleInfo *) NULL);\n  LockSemaphoreInfo(module_semaphore);\n  ResetSplayTreeIterator(module_list);\n  if ((tag == (const char *) NULL) || (LocaleCompare(tag,\"*\") == 0))\n    {\n#if defined(MAGICKCORE_MODULES_SUPPORT)\n      if (LocaleCompare(tag,\"*\") == 0)\n        (void) OpenModules(exception);\n#endif\n      module_info=(ModuleInfo *) GetNextValueInSplayTree(module_list);\n      UnlockSemaphoreInfo(module_semaphore);\n      return(module_info);\n    }\n  module_info=(ModuleInfo *) GetValueFromSplayTree(module_list,tag);\n  UnlockSemaphoreInfo(module_semaphore);\n  return(module_info);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   G e t M o d u l e I n f o L i s t                                         %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  GetModuleInfoList() returns any modules that match the specified pattern.\n%\n%  The format of the GetModuleInfoList function is:\n%\n%      const ModuleInfo **GetModuleInfoList(const char *pattern,\n%        size_t *number_modules,ExceptionInfo *exception)\n%\n%  A description of each parameter follows:\n%\n%    o pattern: Specifies a pointer to a text string containing a pattern.\n%\n%    o number_modules:  This integer returns the number of modules in the list.\n%\n%    o exception: return any errors or warnings in this structure.\n%\n*/\n\n#if defined(__cplusplus) || defined(c_plusplus)\nextern \"C\" {\n#endif\n\nstatic int ModuleInfoCompare(const void *x,const void *y)\n{\n  const ModuleInfo\n    **p,\n    **q;\n\n  p=(const ModuleInfo **) x,\n  q=(const ModuleInfo **) y;\n  if (LocaleCompare((*p)->path,(*q)->path) == 0)\n    return(LocaleCompare((*p)->tag,(*q)->tag));\n  return(LocaleCompare((*p)->path,(*q)->path));\n}\n\n#if defined(__cplusplus) || defined(c_plusplus)\n}\n#endif\n\nMagickExport const ModuleInfo **GetModuleInfoList(const char *pattern,\n  size_t *number_modules,ExceptionInfo *exception)\n{\n  const ModuleInfo\n    **modules;\n\n  register const ModuleInfo\n    *p;\n\n  register ssize_t\n    i;\n\n  /*\n    Allocate module list.\n  */\n  assert(pattern != (char *) NULL);\n  (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",pattern);\n  assert(number_modules != (size_t *) NULL);\n  *number_modules=0;\n  p=GetModuleInfo(\"*\",exception);\n  if (p == (const ModuleInfo *) NULL)\n    return((const ModuleInfo **) NULL);\n  modules=(const ModuleInfo **) AcquireQuantumMemory((size_t)\n    GetNumberOfNodesInSplayTree(module_list)+1UL,sizeof(*modules));\n  if (modules == (const ModuleInfo **) NULL)\n    return((const ModuleInfo **) NULL);\n  /*\n    Generate module list.\n  */\n  LockSemaphoreInfo(module_semaphore);\n  ResetSplayTreeIterator(module_list);\n  p=(const ModuleInfo *) GetNextValueInSplayTree(module_list);\n  for (i=0; p != (const ModuleInfo *) NULL; )\n  {\n    if ((p->stealth == MagickFalse) &&\n        (GlobExpression(p->tag,pattern,MagickFalse) != MagickFalse))\n      modules[i++]=p;\n    p=(const ModuleInfo *) GetNextValueInSplayTree(module_list);\n  }\n  UnlockSemaphoreInfo(module_semaphore);\n  qsort((void *) modules,(size_t) i,sizeof(*modules),ModuleInfoCompare);\n  modules[i]=(ModuleInfo *) NULL;\n  *number_modules=(size_t) i;\n  return(modules);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   G e t M o d u l e L i s t                                                 %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  GetModuleList() returns any image format modules that match the specified\n%  pattern.\n%\n%  The format of the GetModuleList function is:\n%\n%      char **GetModuleList(const char *pattern,const MagickModuleType type,\n%        size_t *number_modules,ExceptionInfo *exception)\n%\n%  A description of each parameter follows:\n%\n%    o pattern: Specifies a pointer to a text string containing a pattern.\n%\n%    o type: choose from MagickImageCoderModule or MagickImageFilterModule.\n%\n%    o number_modules:  This integer returns the number of modules in the\n%      list.\n%\n%    o exception: return any errors or warnings in this structure.\n%\n*/\n\n#if defined(__cplusplus) || defined(c_plusplus)\nextern \"C\" {\n#endif\n\nstatic int ModuleCompare(const void *x,const void *y)\n{\n  register const char\n    **p,\n    **q;\n\n   p=(const char **) x;\n  q=(const char **) y;\n  return(LocaleCompare(*p,*q));\n}\n\n#if defined(__cplusplus) || defined(c_plusplus)\n}\n#endif\n\nstatic inline int MagickReadDirectory(DIR *directory,struct dirent *entry,\n  struct dirent **result)\n{\n#if defined(MAGICKCORE_HAVE_READDIR_R)\n  return(readdir_r(directory,entry,result));\n#else\n  (void) entry;\n  errno=0;\n  *result=readdir(directory);\n  return(errno);\n#endif\n}\n\nMagickExport char **GetModuleList(const char *pattern,\n  const MagickModuleType type,size_t *number_modules,ExceptionInfo *exception)\n{\n#define MaxModules  511\n\n  char\n    **modules,\n    filename[MagickPathExtent],\n    module_path[MagickPathExtent],\n    path[MagickPathExtent];\n\n  DIR\n    *directory;\n\n  MagickBooleanType\n    status;\n\n  register ssize_t\n    i;\n\n  size_t\n    max_entries;\n\n  struct dirent\n    *buffer,\n    *entry;\n\n  /*\n    Locate all modules in the image coder or filter path.\n  */\n  switch (type)\n  {\n    case MagickImageCoderModule:\n    default:\n    {\n      TagToCoderModuleName(\"magick\",filename);\n      status=GetMagickModulePath(filename,MagickImageCoderModule,module_path,\n        exception);\n      break;\n    }\n    case MagickImageFilterModule:\n    {\n      TagToFilterModuleName(\"analyze\",filename);\n      status=GetMagickModulePath(filename,MagickImageFilterModule,module_path,\n        exception);\n      break;\n    }\n  }\n  if (status == MagickFalse)\n    return((char **) NULL);\n  GetPathComponent(module_path,HeadPath,path);\n  max_entries=MaxModules;\n  modules=(char **) AcquireQuantumMemory((size_t) max_entries+1UL,\n    sizeof(*modules));\n  if (modules == (char **) NULL)\n    return((char **) NULL);\n  *modules=(char *) NULL;\n  directory=opendir(path);\n  if (directory == (DIR *) NULL)\n    {\n      modules=(char **) RelinquishMagickMemory(modules);\n      return((char **) NULL);\n    }\n  buffer=(struct dirent *) AcquireMagickMemory(sizeof(*buffer)+FILENAME_MAX+1);\n  if (buffer == (struct dirent *) NULL)\n    ThrowFatalException(ResourceLimitFatalError,\"MemoryAllocationFailed\");\n  i=0;\n  while ((MagickReadDirectory(directory,buffer,&entry) == 0) &&\n         (entry != (struct dirent *) NULL))\n  {\n    status=GlobExpression(entry->d_name,ModuleGlobExpression,MagickFalse);\n    if (status == MagickFalse)\n      continue;\n    if (GlobExpression(entry->d_name,pattern,MagickFalse) == MagickFalse)\n      continue;\n    if (i >= (ssize_t) max_entries)\n      {\n        modules=(char **) NULL;\n        if (~max_entries > max_entries)\n          modules=(char **) ResizeQuantumMemory(modules,(size_t)\n            (max_entries << 1),sizeof(*modules));\n        max_entries<<=1;\n        if (modules == (char **) NULL)\n          break;\n      }\n    /*\n      Add new module name to list.\n    */\n    modules[i]=AcquireString((char *) NULL);\n    GetPathComponent(entry->d_name,BasePath,modules[i]);\n    if (LocaleNCompare(\"IM_MOD_\",modules[i],7) == 0)\n      {\n        (void) CopyMagickString(modules[i],modules[i]+10,MagickPathExtent);\n        modules[i][strlen(modules[i])-1]='\\0';\n      }\n    i++;\n  }\n  buffer=(struct dirent *) RelinquishMagickMemory(buffer);\n  (void) closedir(directory);\n  if (modules == (char **) NULL)\n    {\n      (void) ThrowMagickException(exception,GetMagickModule(),ConfigureError,\n        \"MemoryAllocationFailed\",\"`%s'\",pattern);\n      return((char **) NULL);\n    }\n  qsort((void *) modules,(size_t) i,sizeof(*modules),ModuleCompare);\n  modules[i]=(char *) NULL;\n  *number_modules=(size_t) i;\n  return(modules);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%  G e t M a g i c k M o d u l e P a t h                                      %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  GetMagickModulePath() finds a module with the specified module type and\n%  filename.\n%\n%  The format of the GetMagickModulePath module is:\n%\n%      MagickBooleanType GetMagickModulePath(const char *filename,\n%        MagickModuleType module_type,char *path,ExceptionInfo *exception)\n%\n%  A description of each parameter follows:\n%\n%    o filename: the module file name.\n%\n%    o module_type: the module type: MagickImageCoderModule or\n%      MagickImageFilterModule.\n%\n%    o path: the path associated with the filename.\n%\n%    o exception: return any errors or warnings in this structure.\n%\n*/\nstatic MagickBooleanType GetMagickModulePath(const char *filename,\n  MagickModuleType module_type,char *path,ExceptionInfo *exception)\n{\n  char\n    *module_path;\n\n  assert(filename != (const char *) NULL);\n  (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",filename);\n  assert(path != (char *) NULL);\n  assert(exception != (ExceptionInfo *) NULL);\n  if (strchr(filename,'/') != (char *) NULL)\n    return(MagickFalse);\n  (void) CopyMagickString(path,filename,MagickPathExtent);\n  module_path=(char *) NULL;\n  switch (module_type)\n  {\n    case MagickImageCoderModule:\n    default:\n    {\n      (void) LogMagickEvent(ModuleEvent,GetMagickModule(),\n        \"Searching for coder module file \\\"%s\\\" ...\",filename);\n      module_path=GetEnvironmentValue(\"MAGICK_CODER_MODULE_PATH\");\n#if defined(MAGICKCORE_CODER_PATH)\n      if (module_path == (char *) NULL)\n        module_path=AcquireString(MAGICKCORE_CODER_PATH);\n#endif\n      break;\n    }\n    case MagickImageFilterModule:\n    {\n      (void) LogMagickEvent(ModuleEvent,GetMagickModule(),\n        \"Searching for filter module file \\\"%s\\\" ...\",filename);\n      module_path=GetEnvironmentValue(\"MAGICK_CODER_FILTER_PATH\");\n#if defined(MAGICKCORE_FILTER_PATH)\n      if (module_path == (char *) NULL)\n        module_path=AcquireString(MAGICKCORE_FILTER_PATH);\n#endif\n      break;\n    }\n  }\n  if (module_path != (char *) NULL)\n    {\n      register char\n        *p,\n        *q;\n\n      for (p=module_path-1; p != (char *) NULL; )\n      {\n        (void) CopyMagickString(path,p+1,MagickPathExtent);\n        q=strchr(path,DirectoryListSeparator);\n        if (q != (char *) NULL)\n          *q='\\0';\n        q=path+strlen(path)-1;\n        if ((q >= path) && (*q != *DirectorySeparator))\n          (void) ConcatenateMagickString(path,DirectorySeparator,\n            MagickPathExtent);\n        (void) ConcatenateMagickString(path,filename,MagickPathExtent);\n        if (IsPathAccessible(path) != MagickFalse)\n          {\n            module_path=DestroyString(module_path);\n            return(MagickTrue);\n          }\n        p=strchr(p+1,DirectoryListSeparator);\n      }\n      module_path=DestroyString(module_path);\n    }\n#if defined(MAGICKCORE_INSTALLED_SUPPORT)\n  else\n#if defined(MAGICKCORE_CODER_PATH)\n    {\n      const char\n        *directory;\n\n      /*\n        Search hard coded paths.\n      */\n      switch (module_type)\n      {\n        case MagickImageCoderModule:\n        default:\n        {\n          directory=MAGICKCORE_CODER_PATH;\n          break;\n        }\n        case MagickImageFilterModule:\n        {\n          directory=MAGICKCORE_FILTER_PATH;\n          break;\n        }\n      }\n      (void) FormatLocaleString(path,MagickPathExtent,\"%s%s\",directory,\n        filename);\n      if (IsPathAccessible(path) == MagickFalse)\n        {\n          ThrowFileException(exception,ConfigureWarning,\n            \"UnableToOpenModuleFile\",path);\n          return(MagickFalse);\n        }\n      return(MagickTrue);\n    }\n#else\n#if defined(MAGICKCORE_WINDOWS_SUPPORT)\n    {\n      const char\n        *registery_key;\n\n      unsigned char\n        *key_value;\n\n      /*\n        Locate path via registry key.\n      */\n      switch (module_type)\n      {\n        case MagickImageCoderModule:\n        default:\n        {\n          registery_key=\"CoderModulesPath\";\n          break;\n        }\n        case MagickImageFilterModule:\n        {\n          registery_key=\"FilterModulesPath\";\n          break;\n        }\n      }\n      key_value=NTRegistryKeyLookup(registery_key);\n      if (key_value == (unsigned char *) NULL)\n        {\n          ThrowMagickException(exception,GetMagickModule(),ConfigureError,\n            \"RegistryKeyLookupFailed\",\"`%s'\",registery_key);\n          return(MagickFalse);\n        }\n      (void) FormatLocaleString(path,MagickPathExtent,\"%s%s%s\",(char *)\n        key_value,DirectorySeparator,filename);\n      key_value=(unsigned char *) RelinquishMagickMemory(key_value);\n      if (IsPathAccessible(path) == MagickFalse)\n        {\n          ThrowFileException(exception,ConfigureWarning,\n            \"UnableToOpenModuleFile\",path);\n          return(MagickFalse);\n        }\n      return(MagickTrue);\n    }\n#endif\n#endif\n#if !defined(MAGICKCORE_CODER_PATH) && !defined(MAGICKCORE_WINDOWS_SUPPORT)\n# error MAGICKCORE_CODER_PATH or MAGICKCORE_WINDOWS_SUPPORT must be defined when MAGICKCORE_INSTALLED_SUPPORT is defined\n#endif\n#else\n  {\n    char\n      *home;\n\n    home=GetEnvironmentValue(\"MAGICK_HOME\");\n    if (home != (char *) NULL)\n      {\n        /*\n          Search MAGICK_HOME.\n        */\n#if !defined(MAGICKCORE_POSIX_SUPPORT)\n        (void) FormatLocaleString(path,MagickPathExtent,\"%s%s%s\",home,\n          DirectorySeparator,filename);\n#else\n        const char\n          *directory;\n\n        switch (module_type)\n        {\n          case MagickImageCoderModule:\n          default:\n          {\n            directory=MAGICKCORE_CODER_RELATIVE_PATH;\n            break;\n          }\n          case MagickImageFilterModule:\n          {\n            directory=MAGICKCORE_FILTER_RELATIVE_PATH;\n            break;\n          }\n        }\n        (void) FormatLocaleString(path,MagickPathExtent,\"%s/lib/%s/%s\",home,\n          directory,filename);\n#endif\n        home=DestroyString(home);\n        if (IsPathAccessible(path) != MagickFalse)\n          return(MagickTrue);\n      }\n  }\n  if (*GetClientPath() != '\\0')\n    {\n      /*\n        Search based on executable directory.\n      */\n#if !defined(MAGICKCORE_POSIX_SUPPORT)\n      (void) FormatLocaleString(path,MagickPathExtent,\"%s%s%s\",GetClientPath(),\n        DirectorySeparator,filename);\n#else\n      char\n        prefix[MagickPathExtent];\n\n      const char\n        *directory;\n\n      switch (module_type)\n      {\n        case MagickImageCoderModule:\n        default:\n        {\n          directory=\"coders\";\n          break;\n        }\n        case MagickImageFilterModule:\n        {\n          directory=\"filters\";\n          break;\n        }\n      }\n      (void) CopyMagickString(prefix,GetClientPath(),MagickPathExtent);\n      ChopPathComponents(prefix,1);\n      (void) FormatLocaleString(path,MagickPathExtent,\"%s/lib/%s/%s/%s\",prefix,\n        MAGICKCORE_MODULES_RELATIVE_PATH,directory,filename);\n#endif\n      if (IsPathAccessible(path) != MagickFalse)\n        return(MagickTrue);\n    }\n#if defined(MAGICKCORE_WINDOWS_SUPPORT)\n  {\n    /*\n      Search module path.\n    */\n    if ((NTGetModulePath(\"CORE_RL_MagickCore_.dll\",path) != MagickFalse) ||\n        (NTGetModulePath(\"CORE_DB_MagickCore_.dll\",path) != MagickFalse))\n      {\n        (void) ConcatenateMagickString(path,DirectorySeparator,\n          MagickPathExtent);\n        (void) ConcatenateMagickString(path,filename,MagickPathExtent);\n        if (IsPathAccessible(path) != MagickFalse)\n          return(MagickTrue);\n      }\n  }\n#endif\n  {\n    char\n      *home;\n\n    home=GetEnvironmentValue(\"XDG_CONFIG_HOME\");\n    if (home == (char *) NULL)\n      home=GetEnvironmentValue(\"LOCALAPPDATA\");\n    if (home == (char *) NULL)\n      home=GetEnvironmentValue(\"APPDATA\");\n    if (home == (char *) NULL)\n      home=GetEnvironmentValue(\"USERPROFILE\");\n    if (home != (char *) NULL)\n      {\n        /*\n          Search $XDG_CONFIG_HOME/ImageMagick.\n        */\n        (void) FormatLocaleString(path,MagickPathExtent,\"%s%sImageMagick%s%s\",\n          home,DirectorySeparator,DirectorySeparator,filename);\n        home=DestroyString(home);\n        if (IsPathAccessible(path) != MagickFalse)\n          return(MagickTrue);\n      }\n    home=GetEnvironmentValue(\"HOME\");\n    if (home != (char *) NULL)\n      {\n        /*\n          Search $HOME/.config/ImageMagick.\n        */\n        (void) FormatLocaleString(path,MagickPathExtent,\n          \"%s%s.config%sImageMagick%s%s\",home,DirectorySeparator,\n          DirectorySeparator,DirectorySeparator,filename);\n        home=DestroyString(home);\n        if (IsPathAccessible(path) != MagickFalse)\n          return(MagickTrue);\n      }\n  }\n  /*\n    Search current directory.\n  */\n  if (IsPathAccessible(path) != MagickFalse)\n    return(MagickTrue);\n  if (exception->severity < ConfigureError)\n    ThrowFileException(exception,ConfigureWarning,\"UnableToOpenModuleFile\",\n      path);\n#endif\n  return(MagickFalse);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   I s M o d u l e T r e e I n s t a n t i a t e d                           %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  IsModuleTreeInstantiated() determines if the module tree is instantiated.\n%  If not, it instantiates the tree and returns it.\n%\n%  The format of the IsModuleTreeInstantiated() method is:\n%\n%      IsModuleTreeInstantiated()\n%\n*/\n\nstatic void *DestroyModuleNode(void *module_info)\n{\n  ExceptionInfo\n    *exception;\n\n  register ModuleInfo\n    *p;\n\n  exception=AcquireExceptionInfo();\n  p=(ModuleInfo *) module_info;\n  if (UnregisterModule(p,exception) == MagickFalse)\n    CatchException(exception);\n  if (p->tag != (char *) NULL)\n    p->tag=DestroyString(p->tag);\n  if (p->path != (char *) NULL)\n    p->path=DestroyString(p->path);\n  exception=DestroyExceptionInfo(exception);\n  return(RelinquishMagickMemory(p));\n}\n\nstatic MagickBooleanType IsModuleTreeInstantiated()\n{\n  if (module_list == (SplayTreeInfo *) NULL)\n    {\n      if (module_semaphore == (SemaphoreInfo *) NULL)\n        ActivateSemaphoreInfo(&module_semaphore);\n      LockSemaphoreInfo(module_semaphore);\n      if (module_list == (SplayTreeInfo *) NULL)\n        {\n          MagickBooleanType\n            status;\n\n          ModuleInfo\n            *module_info;\n\n          module_list=NewSplayTree(CompareSplayTreeString,\n            (void *(*)(void *)) NULL,DestroyModuleNode);\n          if (module_list == (SplayTreeInfo *) NULL)\n            ThrowFatalException(ResourceLimitFatalError,\n              \"MemoryAllocationFailed\");\n          module_info=AcquireModuleInfo((const char *) NULL,\"[boot-strap]\");\n          module_info->stealth=MagickTrue;\n          status=AddValueToSplayTree(module_list,module_info->tag,module_info);\n          if (status == MagickFalse)\n            ThrowFatalException(ResourceLimitFatalError,\n              \"MemoryAllocationFailed\");\n          if (lt_dlinit() != 0)\n            ThrowFatalException(ModuleFatalError,\n              \"UnableToInitializeModuleLoader\");\n        }\n      UnlockSemaphoreInfo(module_semaphore);\n    }\n  return(module_list != (SplayTreeInfo *) NULL ? MagickTrue : MagickFalse);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   I n v o k e D y n a m i c I m a g e F i l t e r                           %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  InvokeDynamicImageFilter() invokes a dynamic image filter.\n%\n%  The format of the InvokeDynamicImageFilter module is:\n%\n%      MagickBooleanType InvokeDynamicImageFilter(const char *tag,Image **image,\n%        const int argc,const char **argv,ExceptionInfo *exception)\n%\n%  A description of each parameter follows:\n%\n%    o tag: a character string that represents the name of the particular\n%      module.\n%\n%    o image: the image.\n%\n%    o argc: a pointer to an integer describing the number of elements in the\n%      argument vector.\n%\n%    o argv: a pointer to a text array containing the command line arguments.\n%\n%    o exception: return any errors or warnings in this structure.\n%\n*/\nMagickExport MagickBooleanType InvokeDynamicImageFilter(const char *tag,\n  Image **images,const int argc,const char **argv,ExceptionInfo *exception)\n{\n  char\n    name[MagickPathExtent],\n    path[MagickPathExtent];\n\n  ImageFilterHandler\n    *image_filter;\n\n  MagickBooleanType\n    status;\n\n  ModuleHandle\n    handle;\n\n  PolicyRights\n    rights;\n\n  /*\n    Find the module.\n  */\n  assert(images != (Image **) NULL);\n  assert((*images)->signature == MagickCoreSignature);\n  if ((*images)->debug != MagickFalse)\n    (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",\n      (*images)->filename);\n#if !defined(MAGICKCORE_BUILD_MODULES)\n  {\n    MagickBooleanType\n      status;\n\n    status=InvokeStaticImageFilter(tag,images,argc,argv,exception);\n    if (status != MagickFalse)\n      return(status);\n  }\n#endif\n  rights=ReadPolicyRights;\n  if (IsRightsAuthorized(FilterPolicyDomain,rights,tag) == MagickFalse)\n    {\n      errno=EPERM;\n      (void) ThrowMagickException(exception,GetMagickModule(),PolicyError,\n        \"NotAuthorized\",\"`%s'\",tag);\n      return(MagickFalse);\n    }\n  TagToFilterModuleName(tag,name);\n  status=GetMagickModulePath(name,MagickImageFilterModule,path,exception);\n  if (status == MagickFalse)\n    {\n      (void) ThrowMagickException(exception,GetMagickModule(),ModuleError,\n        \"UnableToLoadModule\",\"'%s': %s\",name,path);\n      return(MagickFalse);\n    }\n  /*\n    Open the module.\n  */\n  handle=(ModuleHandle) lt_dlopen(path);\n  if (handle == (ModuleHandle) NULL)\n    {\n      (void) ThrowMagickException(exception,GetMagickModule(),ModuleError,\n        \"UnableToLoadModule\",\"'%s': %s\",name,lt_dlerror());\n      return(MagickFalse);\n    }\n  /*\n    Locate the module.\n  */\n#if !defined(MAGICKCORE_NAMESPACE_PREFIX)\n  (void) FormatLocaleString(name,MagickPathExtent,\"%sImage\",tag);\n#else\n  (void) FormatLocaleString(name,MagickPathExtent,\"%s%sImage\",\n    MAGICKCORE_NAMESPACE_PREFIX,tag);\n#endif\n  /*\n    Execute the module.\n  */\n  ClearMagickException(exception);\n  image_filter=(ImageFilterHandler *) lt_dlsym(handle,name);\n  if (image_filter == (ImageFilterHandler *) NULL)\n    (void) ThrowMagickException(exception,GetMagickModule(),ModuleError,\n      \"UnableToLoadModule\",\"'%s': %s\",name,lt_dlerror());\n  else\n    {\n      size_t\n        signature;\n\n      if ((*images)->debug != MagickFalse)\n        (void) LogMagickEvent(ModuleEvent,GetMagickModule(),\n          \"Invoking \\\"%s\\\" dynamic image filter\",tag);\n      signature=image_filter(images,argc,argv,exception);\n      if ((*images)->debug != MagickFalse)\n        (void) LogMagickEvent(ModuleEvent,GetMagickModule(),\"\\\"%s\\\" completes\",\n          tag);\n      if (signature != MagickImageFilterSignature)\n        (void) ThrowMagickException(exception,GetMagickModule(),ModuleError,\n          \"ImageFilterSignatureMismatch\",\"'%s': %8lx != %8lx\",tag,\n          (unsigned long) signature,(unsigned long) MagickImageFilterSignature);\n    }\n  /*\n    Close the module.\n  */\n  if (lt_dlclose(handle) != 0)\n    (void) ThrowMagickException(exception,GetMagickModule(),ModuleWarning,\n      \"UnableToCloseModule\",\"'%s': %s\",name,lt_dlerror());\n  return(exception->severity < ErrorException ? MagickTrue : MagickFalse);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%  L i s t M o d u l e I n f o                                                %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  ListModuleInfo() lists the module info to a file.\n%\n%  The format of the ListModuleInfo module is:\n%\n%      MagickBooleanType ListModuleInfo(FILE *file,ExceptionInfo *exception)\n%\n%  A description of each parameter follows.\n%\n%    o file:  An pointer to a FILE.\n%\n%    o exception: return any errors or warnings in this structure.\n%\n*/\nMagickExport MagickBooleanType ListModuleInfo(FILE *file,\n  ExceptionInfo *exception)\n{\n  char\n    filename[MagickPathExtent],\n    module_path[MagickPathExtent],\n    **modules,\n    path[MagickPathExtent];\n\n  register ssize_t\n    i;\n\n  size_t\n    number_modules;\n\n  if (file == (const FILE *) NULL)\n    file=stdout;\n  /*\n    List image coders.\n  */\n  modules=GetModuleList(\"*\",MagickImageCoderModule,&number_modules,exception);\n  if (modules == (char **) NULL)\n    return(MagickFalse);\n  TagToCoderModuleName(\"magick\",filename);\n  (void) GetMagickModulePath(filename,MagickImageCoderModule,module_path,\n    exception);\n  GetPathComponent(module_path,HeadPath,path);\n  (void) FormatLocaleFile(file,\"\\nPath: %s\\n\\n\",path);\n  (void) FormatLocaleFile(file,\"Image Coder\\n\");\n  (void) FormatLocaleFile(file,\n    \"-------------------------------------------------\"\n    \"------------------------------\\n\");\n  for (i=0; i < (ssize_t) number_modules; i++)\n  {\n    (void) FormatLocaleFile(file,\"%s\",modules[i]);\n    (void) FormatLocaleFile(file,\"\\n\");\n  }\n  (void) fflush(file);\n  /*\n    Relinquish resources.\n  */\n  for (i=0; i < (ssize_t) number_modules; i++)\n    modules[i]=DestroyString(modules[i]);\n  modules=(char **) RelinquishMagickMemory(modules);\n  /*\n    List image filters.\n  */\n  modules=GetModuleList(\"*\",MagickImageFilterModule,&number_modules,exception);\n  if (modules == (char **) NULL)\n    return(MagickFalse);\n  TagToFilterModuleName(\"analyze\",filename);\n  (void) GetMagickModulePath(filename,MagickImageFilterModule,module_path,\n    exception);\n  GetPathComponent(module_path,HeadPath,path);\n  (void) FormatLocaleFile(file,\"\\nPath: %s\\n\\n\",path);\n  (void) FormatLocaleFile(file,\"Image Filter\\n\");\n  (void) FormatLocaleFile(file,\n    \"-------------------------------------------------\"\n    \"------------------------------\\n\");\n  for (i=0; i < (ssize_t) number_modules; i++)\n  {\n    (void) FormatLocaleFile(file,\"%s\",modules[i]);\n    (void) FormatLocaleFile(file,\"\\n\");\n  }\n  (void) fflush(file);\n  /*\n    Relinquish resources.\n  */\n  for (i=0; i < (ssize_t) number_modules; i++)\n    modules[i]=DestroyString(modules[i]);\n  modules=(char **) RelinquishMagickMemory(modules);\n  return(MagickTrue);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n+   M o d u l e C o m p o n e n t G e n e s i s                               %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  ModuleComponentGenesis() instantiates the module component.\n%\n%  The format of the ModuleComponentGenesis method is:\n%\n%      MagickBooleanType ModuleComponentGenesis(void)\n%\n*/\nMagickPrivate MagickBooleanType ModuleComponentGenesis(void)\n{\n  MagickBooleanType\n    status;\n\n  if (module_semaphore == (SemaphoreInfo *) NULL)\n    module_semaphore=AcquireSemaphoreInfo();\n  status=IsModuleTreeInstantiated();\n  return(status);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n+   M o d u l e C o m p o n e n t T e r m i n u s                             %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  ModuleComponentTerminus() destroys the module component.\n%\n%  The format of the ModuleComponentTerminus method is:\n%\n%      ModuleComponentTerminus(void)\n%\n*/\nMagickPrivate void ModuleComponentTerminus(void)\n{\n  if (module_semaphore == (SemaphoreInfo *) NULL)\n    ActivateSemaphoreInfo(&module_semaphore);\n  DestroyModuleList();\n  RelinquishSemaphoreInfo(&module_semaphore);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   O p e n M o d u l e                                                       %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  OpenModule() loads a module, and invokes its registration module.  It\n%  returns MagickTrue on success, and MagickFalse if there is an error.\n%\n%  The format of the OpenModule module is:\n%\n%      MagickBooleanType OpenModule(const char *module,ExceptionInfo *exception)\n%\n%  A description of each parameter follows:\n%\n%    o module: a character string that indicates the module to load.\n%\n%    o exception: return any errors or warnings in this structure.\n%\n*/\nMagickPrivate MagickBooleanType OpenModule(const char *module,\n  ExceptionInfo *exception)\n{\n  char\n    filename[MagickPathExtent],\n    module_name[MagickPathExtent],\n    name[MagickPathExtent],\n    path[MagickPathExtent];\n\n  MagickBooleanType\n    status;\n\n  ModuleHandle\n    handle;\n\n  ModuleInfo\n    *module_info;\n\n  register const CoderInfo\n    *p;\n\n  size_t\n    signature;\n\n  /*\n    Assign module name from alias.\n  */\n  assert(module != (const char *) NULL);\n  module_info=(ModuleInfo *) GetModuleInfo(module,exception);\n  if (module_info != (ModuleInfo *) NULL)\n    return(MagickTrue);\n  (void) CopyMagickString(module_name,module,MagickPathExtent);\n  p=GetCoderInfo(module,exception);\n  if (p != (CoderInfo *) NULL)\n    (void) CopyMagickString(module_name,p->name,MagickPathExtent);\n  if (GetValueFromSplayTree(module_list,module_name) != (void *) NULL)\n    return(MagickTrue);  /* module already opened, return */\n  /*\n    Locate module.\n  */\n  handle=(ModuleHandle) NULL;\n  TagToCoderModuleName(module_name,filename);\n  (void) LogMagickEvent(ModuleEvent,GetMagickModule(),\n    \"Searching for module \\\"%s\\\" using filename \\\"%s\\\"\",module_name,filename);\n  *path='\\0';\n  status=GetMagickModulePath(filename,MagickImageCoderModule,path,exception);\n  if (status == MagickFalse)\n    return(MagickFalse);\n  /*\n    Load module\n  */\n  (void) LogMagickEvent(ModuleEvent,GetMagickModule(),\n    \"Opening module at path \\\"%s\\\"\",path);\n  handle=(ModuleHandle) lt_dlopen(path);\n  if (handle == (ModuleHandle) NULL)\n    {\n      (void) ThrowMagickException(exception,GetMagickModule(),ModuleError,\n        \"UnableToLoadModule\",\"'%s': %s\",path,lt_dlerror());\n      return(MagickFalse);\n    }\n  /*\n    Register module.\n  */\n  module_info=AcquireModuleInfo(path,module_name);\n  module_info->handle=handle;\n  if (RegisterModule(module_info,exception) == (ModuleInfo *) NULL)\n    return(MagickFalse);\n  /*\n    Define RegisterFORMATImage method.\n  */\n  TagToModuleName(module_name,\"Register%sImage\",name);\n  module_info->register_module=(size_t (*)(void)) lt_dlsym(handle,name);\n  if (module_info->register_module == (size_t (*)(void)) NULL)\n    {\n      (void) ThrowMagickException(exception,GetMagickModule(),ModuleError,\n        \"UnableToRegisterImageFormat\",\"'%s': %s\",module_name,lt_dlerror());\n      return(MagickFalse);\n    }\n  (void) LogMagickEvent(ModuleEvent,GetMagickModule(),\n    \"Method \\\"%s\\\" in module \\\"%s\\\" at address %p\",name,module_name,\n    (void *) module_info->register_module);\n  /*\n    Define UnregisterFORMATImage method.\n  */\n  TagToModuleName(module_name,\"Unregister%sImage\",name);\n  module_info->unregister_module=(void (*)(void)) lt_dlsym(handle,name);\n  if (module_info->unregister_module == (void (*)(void)) NULL)\n    {\n      (void) ThrowMagickException(exception,GetMagickModule(),ModuleError,\n        \"UnableToRegisterImageFormat\",\"'%s': %s\",module_name,lt_dlerror());\n      return(MagickFalse);\n    }\n  (void) LogMagickEvent(ModuleEvent,GetMagickModule(),\n    \"Method \\\"%s\\\" in module \\\"%s\\\" at address %p\",name,module_name,\n    (void *) module_info->unregister_module);\n  signature=module_info->register_module();\n  if (signature != MagickImageCoderSignature)\n    {\n      (void) ThrowMagickException(exception,GetMagickModule(),ModuleError,\n        \"ImageCoderSignatureMismatch\",\"'%s': %8lx != %8lx\",module_name,\n        (unsigned long) signature,(unsigned long) MagickImageCoderSignature);\n      return(MagickFalse);\n    }\n  return(MagickTrue);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   O p e n M o d u l e s                                                     %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  OpenModules() loads all available modules.\n%\n%  The format of the OpenModules module is:\n%\n%      MagickBooleanType OpenModules(ExceptionInfo *exception)\n%\n%  A description of each parameter follows:\n%\n%    o exception: return any errors or warnings in this structure.\n%\n*/\nMagickPrivate MagickBooleanType OpenModules(ExceptionInfo *exception)\n{\n  char\n    **modules;\n\n  register ssize_t\n    i;\n\n  size_t\n    number_modules;\n\n  /*\n    Load all modules.\n  */\n  (void) GetMagickInfo((char *) NULL,exception);\n  number_modules=0;\n  modules=GetModuleList(\"*\",MagickImageCoderModule,&number_modules,exception);\n  if ((modules == (char **) NULL) || (*modules == (char *) NULL))\n    {\n      if (modules != (char **) NULL)\n        modules=(char **) RelinquishMagickMemory(modules);\n      return(MagickFalse);\n    }\n  for (i=0; i < (ssize_t) number_modules; i++)\n    (void) OpenModule(modules[i],exception);\n  /*\n    Relinquish resources.\n  */\n  for (i=0; i < (ssize_t) number_modules; i++)\n    modules[i]=DestroyString(modules[i]);\n  modules=(char **) RelinquishMagickMemory(modules);\n  return(MagickTrue);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   R e g i s t e r M o d u l e                                               %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  RegisterModule() adds an entry to the module list.  It returns a pointer to\n%  the registered entry on success.\n%\n%  The format of the RegisterModule module is:\n%\n%      ModuleInfo *RegisterModule(const ModuleInfo *module_info,\n%        ExceptionInfo *exception)\n%\n%  A description of each parameter follows:\n%\n%    o info: a pointer to the registered entry is returned.\n%\n%    o module_info: a pointer to the ModuleInfo structure to register.\n%\n%    o exception: return any errors or warnings in this structure.\n%\n*/\nstatic const ModuleInfo *RegisterModule(const ModuleInfo *module_info,\n  ExceptionInfo *exception)\n{\n  MagickBooleanType\n    status;\n\n  assert(module_info != (ModuleInfo *) NULL);\n  assert(module_info->signature == MagickCoreSignature);\n  (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",module_info->tag);\n  if (module_list == (SplayTreeInfo *) NULL)\n    return((const ModuleInfo *) NULL);\n  status=AddValueToSplayTree(module_list,module_info->tag,module_info);\n  if (status == MagickFalse)\n    (void) ThrowMagickException(exception,GetMagickModule(),ResourceLimitError,\n      \"MemoryAllocationFailed\",\"`%s'\",module_info->tag);\n  return(module_info);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%  T a g T o C o d e r M o d u l e N a m e                                    %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  TagToCoderModuleName() munges a module tag and obtains the filename of the\n%  corresponding module.\n%\n%  The format of the TagToCoderModuleName module is:\n%\n%      char *TagToCoderModuleName(const char *tag,char *name)\n%\n%  A description of each parameter follows:\n%\n%    o tag: a character string representing the module tag.\n%\n%    o name: return the module name here.\n%\n*/\nstatic void TagToCoderModuleName(const char *tag,char *name)\n{\n  assert(tag != (char *) NULL);\n  (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",tag);\n  assert(name != (char *) NULL);\n#if defined(MAGICKCORE_LTDL_DELEGATE)\n  (void) FormatLocaleString(name,MagickPathExtent,\"%s.la\",tag);\n  (void) LocaleLower(name);\n#else\n#if defined(MAGICKCORE_WINDOWS_SUPPORT)\n  if (LocaleNCompare(\"IM_MOD_\",tag,7) == 0)\n    (void) CopyMagickString(name,tag,MagickPathExtent);\n  else\n    {\n#if defined(_DEBUG)\n      (void) FormatLocaleString(name,MagickPathExtent,\"IM_MOD_DB_%s_.dll\",tag);\n#else\n      (void) FormatLocaleString(name,MagickPathExtent,\"IM_MOD_RL_%s_.dll\",tag);\n#endif\n    }\n#endif\n#endif\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%  T a g T o F i l t e r M o d u l e N a m e                                  %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  TagToFilterModuleName() munges a module tag and returns the filename of the\n%  corresponding filter module.\n%\n%  The format of the TagToFilterModuleName module is:\n%\n%      void TagToFilterModuleName(const char *tag,char name)\n%\n%  A description of each parameter follows:\n%\n%    o tag: a character string representing the module tag.\n%\n%    o name: return the filter name here.\n%\n*/\nstatic void TagToFilterModuleName(const char *tag,char *name)\n{\n  assert(tag != (char *) NULL);\n  (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",tag);\n  assert(name != (char *) NULL);\n#if defined(MAGICKCORE_WINDOWS_SUPPORT)\n  (void) FormatLocaleString(name,MagickPathExtent,\"FILTER_%s_.dll\",tag);\n#elif !defined(MAGICKCORE_LTDL_DELEGATE)\n  (void) FormatLocaleString(name,MagickPathExtent,\"%s.dll\",tag);\n#else\n  (void) FormatLocaleString(name,MagickPathExtent,\"%s.la\",tag);\n#endif\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   T a g T o M o d u l e N a m e                                             %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  TagToModuleName() munges the module tag name and returns an upper-case tag\n%  name as the input string, and a user-provided format.\n%\n%  The format of the TagToModuleName module is:\n%\n%      TagToModuleName(const char *tag,const char *format,char *module)\n%\n%  A description of each parameter follows:\n%\n%    o tag: the module tag.\n%\n%    o format: a sprintf-compatible format string containing %s where the\n%      upper-case tag name is to be inserted.\n%\n%    o module: pointer to a destination buffer for the formatted result.\n%\n*/\nstatic void TagToModuleName(const char *tag,const char *format,char *module)\n{\n  char\n    name[MagickPathExtent];\n\n  assert(tag != (const char *) NULL);\n  (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",tag);\n  assert(format != (const char *) NULL);\n  assert(module != (char *) NULL);\n  (void) CopyMagickString(name,tag,MagickPathExtent);\n  LocaleUpper(name);\n#if !defined(MAGICKCORE_NAMESPACE_PREFIX)\n  (void) FormatLocaleString(module,MagickPathExtent,format,name);\n#else\n  {\n    char\n      prefix_format[MagickPathExtent];\n\n    (void) FormatLocaleString(prefix_format,MagickPathExtent,\"%s%s\",\n      MAGICKCORE_NAMESPACE_PREFIX,format);\n    (void) FormatLocaleString(module,MagickPathExtent,prefix_format,name);\n  }\n#endif\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   U n r e g i s t e r M o d u l e                                           %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  UnregisterModule() unloads a module, and invokes its de-registration module.\n%  Returns MagickTrue on success, and MagickFalse if there is an error.\n%\n%  The format of the UnregisterModule module is:\n%\n%      MagickBooleanType UnregisterModule(const ModuleInfo *module_info,\n%        ExceptionInfo *exception)\n%\n%  A description of each parameter follows:\n%\n%    o module_info: the module info.\n%\n%    o exception: return any errors or warnings in this structure.\n%\n*/\nstatic MagickBooleanType UnregisterModule(const ModuleInfo *module_info,\n  ExceptionInfo *exception)\n{\n  /*\n    Locate and execute UnregisterFORMATImage module.\n  */\n  assert(module_info != (const ModuleInfo *) NULL);\n  (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",module_info->tag);\n  assert(exception != (ExceptionInfo *) NULL);\n  if (module_info->unregister_module == NULL)\n    return(MagickTrue);\n  module_info->unregister_module();\n  if (lt_dlclose((ModuleHandle) module_info->handle) != 0)\n    {\n      (void) ThrowMagickException(exception,GetMagickModule(),ModuleWarning,\n        \"UnableToCloseModule\",\"'%s': %s\",module_info->tag,lt_dlerror());\n      return(MagickFalse);\n    }\n  return(MagickTrue);\n}\n#else\n\n#if !defined(MAGICKCORE_BUILD_MODULES)\nextern size_t\n  analyzeImage(Image **,const int,const char **,ExceptionInfo *);\n#endif\n\nMagickExport MagickBooleanType ListModuleInfo(FILE *magick_unused(file),\n  ExceptionInfo *magick_unused(exception))\n{\n  return(MagickTrue);\n}\n\nMagickExport MagickBooleanType InvokeDynamicImageFilter(const char *tag,\n  Image **image,const int argc,const char **argv,ExceptionInfo *exception)\n{\n  PolicyRights\n    rights;\n\n  assert(image != (Image **) NULL);\n  assert((*image)->signature == MagickCoreSignature);\n  if ((*image)->debug != MagickFalse)\n    (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",(*image)->filename);\n  rights=ReadPolicyRights;\n  if (IsRightsAuthorized(FilterPolicyDomain,rights,tag) == MagickFalse)\n    {\n      errno=EPERM;\n      (void) ThrowMagickException(exception,GetMagickModule(),PolicyError,\n        \"NotAuthorized\",\"`%s'\",tag);\n      return(MagickFalse);\n    }\n#if defined(MAGICKCORE_BUILD_MODULES)\n  (void) tag;\n  (void) argc;\n  (void) argv;\n  (void) exception;\n#else\n  {\n    ImageFilterHandler\n      *image_filter;\n\n    image_filter=(ImageFilterHandler *) NULL;\n    if (LocaleCompare(\"analyze\",tag) == 0)\n      image_filter=(ImageFilterHandler *) analyzeImage;\n    if (image_filter == (ImageFilterHandler *) NULL)\n      (void) ThrowMagickException(exception,GetMagickModule(),ModuleError,\n        \"UnableToLoadModule\",\"`%s'\",tag);\n    else\n      {\n        size_t\n          signature;\n\n        if ((*image)->debug != MagickFalse)\n          (void) LogMagickEvent(CoderEvent,GetMagickModule(),\n            \"Invoking \\\"%s\\\" static image filter\",tag);\n        signature=image_filter(image,argc,argv,exception);\n        if ((*image)->debug != MagickFalse)\n          (void) LogMagickEvent(CoderEvent,GetMagickModule(),\"\\\"%s\\\" completes\",\n            tag);\n        if (signature != MagickImageFilterSignature)\n          {\n            (void) ThrowMagickException(exception,GetMagickModule(),ModuleError,\n              \"ImageFilterSignatureMismatch\",\"'%s': %8lx != %8lx\",tag,\n              (unsigned long) signature,(unsigned long)\n              MagickImageFilterSignature);\n            return(MagickFalse);\n          }\n      }\n  }\n#endif\n  return(MagickTrue);\n}\n#endif\n",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/m4/libtool.m4": "# libtool.m4 - Configure libtool for the host system. -*-Autoconf-*-\n#\n#   Copyright (C) 1996-2001, 2003-2015 Free Software Foundation, Inc.\n#   Written by Gordon Matzigkeit, 1996\n#\n# This file is free software; the Free Software Foundation gives\n# unlimited permission to copy and/or distribute it, with or without\n# modifications, as long as this notice is preserved.\n\nm4_define([_LT_COPYING], [dnl\n# Copyright (C) 2014 Free Software Foundation, Inc.\n# This is free software; see the source for copying conditions.  There is NO\n# warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# GNU Libtool is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2 of of the License, or\n# (at your option) any later version.\n#\n# As a special exception to the GNU General Public License, if you\n# distribute this file as part of a program or library that is built\n# using GNU Libtool, you may include this file under the  same\n# distribution terms that you use for the rest of that program.\n#\n# GNU Libtool is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n])\n\n# serial 58 LT_INIT\n\n\n# LT_PREREQ(VERSION)\n# ------------------\n# Complain and exit if this libtool version is less that VERSION.\nm4_defun([LT_PREREQ],\n[m4_if(m4_version_compare(m4_defn([LT_PACKAGE_VERSION]), [$1]), -1,\n       [m4_default([$3],\n\t\t   [m4_fatal([Libtool version $1 or higher is required],\n\t\t             63)])],\n       [$2])])\n\n\n# _LT_CHECK_BUILDDIR\n# ------------------\n# Complain if the absolute build directory name contains unusual characters\nm4_defun([_LT_CHECK_BUILDDIR],\n[case `pwd` in\n  *\\ * | *\\\t*)\n    AC_MSG_WARN([Libtool does not cope well with whitespace in `pwd`]) ;;\nesac\n])\n\n\n# LT_INIT([OPTIONS])\n# ------------------\nAC_DEFUN([LT_INIT],\n[AC_PREREQ([2.62])dnl We use AC_PATH_PROGS_FEATURE_CHECK\nAC_REQUIRE([AC_CONFIG_AUX_DIR_DEFAULT])dnl\nAC_BEFORE([$0], [LT_LANG])dnl\nAC_BEFORE([$0], [LT_OUTPUT])dnl\nAC_BEFORE([$0], [LTDL_INIT])dnl\nm4_require([_LT_CHECK_BUILDDIR])dnl\n\ndnl Autoconf doesn't catch unexpanded LT_ macros by default:\nm4_pattern_forbid([^_?LT_[A-Z_]+$])dnl\nm4_pattern_allow([^(_LT_EOF|LT_DLGLOBAL|LT_DLLAZY_OR_NOW|LT_MULTI_MODULE)$])dnl\ndnl aclocal doesn't pull ltoptions.m4, ltsugar.m4, or ltversion.m4\ndnl unless we require an AC_DEFUNed macro:\nAC_REQUIRE([LTOPTIONS_VERSION])dnl\nAC_REQUIRE([LTSUGAR_VERSION])dnl\nAC_REQUIRE([LTVERSION_VERSION])dnl\nAC_REQUIRE([LTOBSOLETE_VERSION])dnl\nm4_require([_LT_PROG_LTMAIN])dnl\n\n_LT_SHELL_INIT([SHELL=${CONFIG_SHELL-/bin/sh}])\n\ndnl Parse OPTIONS\n_LT_SET_OPTIONS([$0], [$1])\n\n# This can be used to rebuild libtool when needed\nLIBTOOL_DEPS=$ltmain\n\n# Always use our own libtool.\nLIBTOOL='$(SHELL) $(top_builddir)/libtool'\nAC_SUBST(LIBTOOL)dnl\n\n_LT_SETUP\n\n# Only expand once:\nm4_define([LT_INIT])\n])# LT_INIT\n\n# Old names:\nAU_ALIAS([AC_PROG_LIBTOOL], [LT_INIT])\nAU_ALIAS([AM_PROG_LIBTOOL], [LT_INIT])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_PROG_LIBTOOL], [])\ndnl AC_DEFUN([AM_PROG_LIBTOOL], [])\n\n\n# _LT_PREPARE_CC_BASENAME\n# -----------------------\nm4_defun([_LT_PREPARE_CC_BASENAME], [\n# Calculate cc_basename.  Skip known compiler wrappers and cross-prefix.\nfunc_cc_basename ()\n{\n    for cc_temp in @S|@*\"\"; do\n      case $cc_temp in\n        compile | *[[\\\\/]]compile | ccache | *[[\\\\/]]ccache ) ;;\n        distcc | *[[\\\\/]]distcc | purify | *[[\\\\/]]purify ) ;;\n        \\-*) ;;\n        *) break;;\n      esac\n    done\n    func_cc_basename_result=`$ECHO \"$cc_temp\" | $SED \"s%.*/%%; s%^$host_alias-%%\"`\n}\n])# _LT_PREPARE_CC_BASENAME\n\n\n# _LT_CC_BASENAME(CC)\n# -------------------\n# It would be clearer to call AC_REQUIREs from _LT_PREPARE_CC_BASENAME,\n# but that macro is also expanded into generated libtool script, which\n# arranges for $SED and $ECHO to be set by different means.\nm4_defun([_LT_CC_BASENAME],\n[m4_require([_LT_PREPARE_CC_BASENAME])dnl\nAC_REQUIRE([_LT_DECL_SED])dnl\nAC_REQUIRE([_LT_PROG_ECHO_BACKSLASH])dnl\nfunc_cc_basename $1\ncc_basename=$func_cc_basename_result\n])\n\n\n# _LT_FILEUTILS_DEFAULTS\n# ----------------------\n# It is okay to use these file commands and assume they have been set\n# sensibly after 'm4_require([_LT_FILEUTILS_DEFAULTS])'.\nm4_defun([_LT_FILEUTILS_DEFAULTS],\n[: ${CP=\"cp -f\"}\n: ${MV=\"mv -f\"}\n: ${RM=\"rm -f\"}\n])# _LT_FILEUTILS_DEFAULTS\n\n\n# _LT_SETUP\n# ---------\nm4_defun([_LT_SETUP],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_CANONICAL_BUILD])dnl\nAC_REQUIRE([_LT_PREPARE_SED_QUOTE_VARS])dnl\nAC_REQUIRE([_LT_PROG_ECHO_BACKSLASH])dnl\n\n_LT_DECL([], [PATH_SEPARATOR], [1], [The PATH separator for the build system])dnl\ndnl\n_LT_DECL([], [host_alias], [0], [The host system])dnl\n_LT_DECL([], [host], [0])dnl\n_LT_DECL([], [host_os], [0])dnl\ndnl\n_LT_DECL([], [build_alias], [0], [The build system])dnl\n_LT_DECL([], [build], [0])dnl\n_LT_DECL([], [build_os], [0])dnl\ndnl\nAC_REQUIRE([AC_PROG_CC])dnl\nAC_REQUIRE([LT_PATH_LD])dnl\nAC_REQUIRE([LT_PATH_NM])dnl\ndnl\nAC_REQUIRE([AC_PROG_LN_S])dnl\ntest -z \"$LN_S\" && LN_S=\"ln -s\"\n_LT_DECL([], [LN_S], [1], [Whether we need soft or hard links])dnl\ndnl\nAC_REQUIRE([LT_CMD_MAX_LEN])dnl\n_LT_DECL([objext], [ac_objext], [0], [Object file suffix (normally \"o\")])dnl\n_LT_DECL([], [exeext], [0], [Executable file suffix (normally \"\")])dnl\ndnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_CHECK_SHELL_FEATURES])dnl\nm4_require([_LT_PATH_CONVERSION_FUNCTIONS])dnl\nm4_require([_LT_CMD_RELOAD])dnl\nm4_require([_LT_CHECK_MAGIC_METHOD])dnl\nm4_require([_LT_CHECK_SHAREDLIB_FROM_LINKLIB])dnl\nm4_require([_LT_CMD_OLD_ARCHIVE])dnl\nm4_require([_LT_CMD_GLOBAL_SYMBOLS])dnl\nm4_require([_LT_WITH_SYSROOT])dnl\nm4_require([_LT_CMD_TRUNCATE])dnl\n\n_LT_CONFIG_LIBTOOL_INIT([\n# See if we are running on zsh, and set the options that allow our\n# commands through without removal of \\ escapes INIT.\nif test -n \"\\${ZSH_VERSION+set}\"; then\n   setopt NO_GLOB_SUBST\nfi\n])\nif test -n \"${ZSH_VERSION+set}\"; then\n   setopt NO_GLOB_SUBST\nfi\n\n_LT_CHECK_OBJDIR\n\nm4_require([_LT_TAG_COMPILER])dnl\n\ncase $host_os in\naix3*)\n  # AIX sometimes has problems with the GCC collect2 program.  For some\n  # reason, if we set the COLLECT_NAMES environment variable, the problems\n  # vanish in a puff of smoke.\n  if test set != \"${COLLECT_NAMES+set}\"; then\n    COLLECT_NAMES=\n    export COLLECT_NAMES\n  fi\n  ;;\nesac\n\n# Global variables:\nofile=libtool\ncan_build_shared=yes\n\n# All known linkers require a '.a' archive for static linking (except MSVC,\n# which needs '.lib').\nlibext=a\n\nwith_gnu_ld=$lt_cv_prog_gnu_ld\n\nold_CC=$CC\nold_CFLAGS=$CFLAGS\n\n# Set sane defaults for various variables\ntest -z \"$CC\" && CC=cc\ntest -z \"$LTCC\" && LTCC=$CC\ntest -z \"$LTCFLAGS\" && LTCFLAGS=$CFLAGS\ntest -z \"$LD\" && LD=ld\ntest -z \"$ac_objext\" && ac_objext=o\n\n_LT_CC_BASENAME([$compiler])\n\n# Only perform the check for file, if the check method requires it\ntest -z \"$MAGIC_CMD\" && MAGIC_CMD=file\ncase $deplibs_check_method in\nfile_magic*)\n  if test \"$file_magic_cmd\" = '$MAGIC_CMD'; then\n    _LT_PATH_MAGIC\n  fi\n  ;;\nesac\n\n# Use C for the default configuration in the libtool script\nLT_SUPPORTED_TAG([CC])\n_LT_LANG_C_CONFIG\n_LT_LANG_DEFAULT_CONFIG\n_LT_CONFIG_COMMANDS\n])# _LT_SETUP\n\n\n# _LT_PREPARE_SED_QUOTE_VARS\n# --------------------------\n# Define a few sed substitution that help us do robust quoting.\nm4_defun([_LT_PREPARE_SED_QUOTE_VARS],\n[# Backslashify metacharacters that are still active within\n# double-quoted strings.\nsed_quote_subst='s/\\([[\"`$\\\\]]\\)/\\\\\\1/g'\n\n# Same as above, but do not quote variable references.\ndouble_quote_subst='s/\\([[\"`\\\\]]\\)/\\\\\\1/g'\n\n# Sed substitution to delay expansion of an escaped shell variable in a\n# double_quote_subst'ed string.\ndelay_variable_subst='s/\\\\\\\\\\\\\\\\\\\\\\$/\\\\\\\\\\\\$/g'\n\n# Sed substitution to delay expansion of an escaped single quote.\ndelay_single_quote_subst='s/'\\''/'\\'\\\\\\\\\\\\\\'\\''/g'\n\n# Sed substitution to avoid accidental globbing in evaled expressions\nno_glob_subst='s/\\*/\\\\\\*/g'\n])\n\n# _LT_PROG_LTMAIN\n# ---------------\n# Note that this code is called both from 'configure', and 'config.status'\n# now that we use AC_CONFIG_COMMANDS to generate libtool.  Notably,\n# 'config.status' has no value for ac_aux_dir unless we are using Automake,\n# so we pass a copy along to make sure it has a sensible value anyway.\nm4_defun([_LT_PROG_LTMAIN],\n[m4_ifdef([AC_REQUIRE_AUX_FILE], [AC_REQUIRE_AUX_FILE([ltmain.sh])])dnl\n_LT_CONFIG_LIBTOOL_INIT([ac_aux_dir='$ac_aux_dir'])\nltmain=$ac_aux_dir/ltmain.sh\n])# _LT_PROG_LTMAIN\n\n\n## ------------------------------------- ##\n## Accumulate code for creating libtool. ##\n## ------------------------------------- ##\n\n# So that we can recreate a full libtool script including additional\n# tags, we accumulate the chunks of code to send to AC_CONFIG_COMMANDS\n# in macros and then make a single call at the end using the 'libtool'\n# label.\n\n\n# _LT_CONFIG_LIBTOOL_INIT([INIT-COMMANDS])\n# ----------------------------------------\n# Register INIT-COMMANDS to be passed to AC_CONFIG_COMMANDS later.\nm4_define([_LT_CONFIG_LIBTOOL_INIT],\n[m4_ifval([$1],\n          [m4_append([_LT_OUTPUT_LIBTOOL_INIT],\n                     [$1\n])])])\n\n# Initialize.\nm4_define([_LT_OUTPUT_LIBTOOL_INIT])\n\n\n# _LT_CONFIG_LIBTOOL([COMMANDS])\n# ------------------------------\n# Register COMMANDS to be passed to AC_CONFIG_COMMANDS later.\nm4_define([_LT_CONFIG_LIBTOOL],\n[m4_ifval([$1],\n          [m4_append([_LT_OUTPUT_LIBTOOL_COMMANDS],\n                     [$1\n])])])\n\n# Initialize.\nm4_define([_LT_OUTPUT_LIBTOOL_COMMANDS])\n\n\n# _LT_CONFIG_SAVE_COMMANDS([COMMANDS], [INIT_COMMANDS])\n# -----------------------------------------------------\nm4_defun([_LT_CONFIG_SAVE_COMMANDS],\n[_LT_CONFIG_LIBTOOL([$1])\n_LT_CONFIG_LIBTOOL_INIT([$2])\n])\n\n\n# _LT_FORMAT_COMMENT([COMMENT])\n# -----------------------------\n# Add leading comment marks to the start of each line, and a trailing\n# full-stop to the whole comment if one is not present already.\nm4_define([_LT_FORMAT_COMMENT],\n[m4_ifval([$1], [\nm4_bpatsubst([m4_bpatsubst([$1], [^ *], [# ])],\n              [['`$\\]], [\\\\\\&])]m4_bmatch([$1], [[!?.]$], [], [.])\n)])\n\n\n\n## ------------------------ ##\n## FIXME: Eliminate VARNAME ##\n## ------------------------ ##\n\n\n# _LT_DECL([CONFIGNAME], VARNAME, VALUE, [DESCRIPTION], [IS-TAGGED?])\n# -------------------------------------------------------------------\n# CONFIGNAME is the name given to the value in the libtool script.\n# VARNAME is the (base) name used in the configure script.\n# VALUE may be 0, 1 or 2 for a computed quote escaped value based on\n# VARNAME.  Any other value will be used directly.\nm4_define([_LT_DECL],\n[lt_if_append_uniq([lt_decl_varnames], [$2], [, ],\n    [lt_dict_add_subkey([lt_decl_dict], [$2], [libtool_name],\n\t[m4_ifval([$1], [$1], [$2])])\n    lt_dict_add_subkey([lt_decl_dict], [$2], [value], [$3])\n    m4_ifval([$4],\n\t[lt_dict_add_subkey([lt_decl_dict], [$2], [description], [$4])])\n    lt_dict_add_subkey([lt_decl_dict], [$2],\n\t[tagged?], [m4_ifval([$5], [yes], [no])])])\n])\n\n\n# _LT_TAGDECL([CONFIGNAME], VARNAME, VALUE, [DESCRIPTION])\n# --------------------------------------------------------\nm4_define([_LT_TAGDECL], [_LT_DECL([$1], [$2], [$3], [$4], [yes])])\n\n\n# lt_decl_tag_varnames([SEPARATOR], [VARNAME1...])\n# ------------------------------------------------\nm4_define([lt_decl_tag_varnames],\n[_lt_decl_filter([tagged?], [yes], $@)])\n\n\n# _lt_decl_filter(SUBKEY, VALUE, [SEPARATOR], [VARNAME1..])\n# ---------------------------------------------------------\nm4_define([_lt_decl_filter],\n[m4_case([$#],\n  [0], [m4_fatal([$0: too few arguments: $#])],\n  [1], [m4_fatal([$0: too few arguments: $#: $1])],\n  [2], [lt_dict_filter([lt_decl_dict], [$1], [$2], [], lt_decl_varnames)],\n  [3], [lt_dict_filter([lt_decl_dict], [$1], [$2], [$3], lt_decl_varnames)],\n  [lt_dict_filter([lt_decl_dict], $@)])[]dnl\n])\n\n\n# lt_decl_quote_varnames([SEPARATOR], [VARNAME1...])\n# --------------------------------------------------\nm4_define([lt_decl_quote_varnames],\n[_lt_decl_filter([value], [1], $@)])\n\n\n# lt_decl_dquote_varnames([SEPARATOR], [VARNAME1...])\n# ---------------------------------------------------\nm4_define([lt_decl_dquote_varnames],\n[_lt_decl_filter([value], [2], $@)])\n\n\n# lt_decl_varnames_tagged([SEPARATOR], [VARNAME1...])\n# ---------------------------------------------------\nm4_define([lt_decl_varnames_tagged],\n[m4_assert([$# <= 2])dnl\n_$0(m4_quote(m4_default([$1], [[, ]])),\n    m4_ifval([$2], [[$2]], [m4_dquote(lt_decl_tag_varnames)]),\n    m4_split(m4_normalize(m4_quote(_LT_TAGS)), [ ]))])\nm4_define([_lt_decl_varnames_tagged],\n[m4_ifval([$3], [lt_combine([$1], [$2], [_], $3)])])\n\n\n# lt_decl_all_varnames([SEPARATOR], [VARNAME1...])\n# ------------------------------------------------\nm4_define([lt_decl_all_varnames],\n[_$0(m4_quote(m4_default([$1], [[, ]])),\n     m4_if([$2], [],\n\t   m4_quote(lt_decl_varnames),\n\tm4_quote(m4_shift($@))))[]dnl\n])\nm4_define([_lt_decl_all_varnames],\n[lt_join($@, lt_decl_varnames_tagged([$1],\n\t\t\tlt_decl_tag_varnames([[, ]], m4_shift($@))))dnl\n])\n\n\n# _LT_CONFIG_STATUS_DECLARE([VARNAME])\n# ------------------------------------\n# Quote a variable value, and forward it to 'config.status' so that its\n# declaration there will have the same value as in 'configure'.  VARNAME\n# must have a single quote delimited value for this to work.\nm4_define([_LT_CONFIG_STATUS_DECLARE],\n[$1='`$ECHO \"$][$1\" | $SED \"$delay_single_quote_subst\"`'])\n\n\n# _LT_CONFIG_STATUS_DECLARATIONS\n# ------------------------------\n# We delimit libtool config variables with single quotes, so when\n# we write them to config.status, we have to be sure to quote all\n# embedded single quotes properly.  In configure, this macro expands\n# each variable declared with _LT_DECL (and _LT_TAGDECL) into:\n#\n#    <var>='`$ECHO \"$<var>\" | $SED \"$delay_single_quote_subst\"`'\nm4_defun([_LT_CONFIG_STATUS_DECLARATIONS],\n[m4_foreach([_lt_var], m4_quote(lt_decl_all_varnames),\n    [m4_n([_LT_CONFIG_STATUS_DECLARE(_lt_var)])])])\n\n\n# _LT_LIBTOOL_TAGS\n# ----------------\n# Output comment and list of tags supported by the script\nm4_defun([_LT_LIBTOOL_TAGS],\n[_LT_FORMAT_COMMENT([The names of the tagged configurations supported by this script])dnl\navailable_tags='_LT_TAGS'dnl\n])\n\n\n# _LT_LIBTOOL_DECLARE(VARNAME, [TAG])\n# -----------------------------------\n# Extract the dictionary values for VARNAME (optionally with TAG) and\n# expand to a commented shell variable setting:\n#\n#    # Some comment about what VAR is for.\n#    visible_name=$lt_internal_name\nm4_define([_LT_LIBTOOL_DECLARE],\n[_LT_FORMAT_COMMENT(m4_quote(lt_dict_fetch([lt_decl_dict], [$1],\n\t\t\t\t\t   [description])))[]dnl\nm4_pushdef([_libtool_name],\n    m4_quote(lt_dict_fetch([lt_decl_dict], [$1], [libtool_name])))[]dnl\nm4_case(m4_quote(lt_dict_fetch([lt_decl_dict], [$1], [value])),\n    [0], [_libtool_name=[$]$1],\n    [1], [_libtool_name=$lt_[]$1],\n    [2], [_libtool_name=$lt_[]$1],\n    [_libtool_name=lt_dict_fetch([lt_decl_dict], [$1], [value])])[]dnl\nm4_ifval([$2], [_$2])[]m4_popdef([_libtool_name])[]dnl\n])\n\n\n# _LT_LIBTOOL_CONFIG_VARS\n# -----------------------\n# Produce commented declarations of non-tagged libtool config variables\n# suitable for insertion in the LIBTOOL CONFIG section of the 'libtool'\n# script.  Tagged libtool config variables (even for the LIBTOOL CONFIG\n# section) are produced by _LT_LIBTOOL_TAG_VARS.\nm4_defun([_LT_LIBTOOL_CONFIG_VARS],\n[m4_foreach([_lt_var],\n    m4_quote(_lt_decl_filter([tagged?], [no], [], lt_decl_varnames)),\n    [m4_n([_LT_LIBTOOL_DECLARE(_lt_var)])])])\n\n\n# _LT_LIBTOOL_TAG_VARS(TAG)\n# -------------------------\nm4_define([_LT_LIBTOOL_TAG_VARS],\n[m4_foreach([_lt_var], m4_quote(lt_decl_tag_varnames),\n    [m4_n([_LT_LIBTOOL_DECLARE(_lt_var, [$1])])])])\n\n\n# _LT_TAGVAR(VARNAME, [TAGNAME])\n# ------------------------------\nm4_define([_LT_TAGVAR], [m4_ifval([$2], [$1_$2], [$1])])\n\n\n# _LT_CONFIG_COMMANDS\n# -------------------\n# Send accumulated output to $CONFIG_STATUS.  Thanks to the lists of\n# variables for single and double quote escaping we saved from calls\n# to _LT_DECL, we can put quote escaped variables declarations\n# into 'config.status', and then the shell code to quote escape them in\n# for loops in 'config.status'.  Finally, any additional code accumulated\n# from calls to _LT_CONFIG_LIBTOOL_INIT is expanded.\nm4_defun([_LT_CONFIG_COMMANDS],\n[AC_PROVIDE_IFELSE([LT_OUTPUT],\n\tdnl If the libtool generation code has been placed in $CONFIG_LT,\n\tdnl instead of duplicating it all over again into config.status,\n\tdnl then we will have config.status run $CONFIG_LT later, so it\n\tdnl needs to know what name is stored there:\n        [AC_CONFIG_COMMANDS([libtool],\n            [$SHELL $CONFIG_LT || AS_EXIT(1)], [CONFIG_LT='$CONFIG_LT'])],\n    dnl If the libtool generation code is destined for config.status,\n    dnl expand the accumulated commands and init code now:\n    [AC_CONFIG_COMMANDS([libtool],\n        [_LT_OUTPUT_LIBTOOL_COMMANDS], [_LT_OUTPUT_LIBTOOL_COMMANDS_INIT])])\n])#_LT_CONFIG_COMMANDS\n\n\n# Initialize.\nm4_define([_LT_OUTPUT_LIBTOOL_COMMANDS_INIT],\n[\n\n# The HP-UX ksh and POSIX shell print the target directory to stdout\n# if CDPATH is set.\n(unset CDPATH) >/dev/null 2>&1 && unset CDPATH\n\nsed_quote_subst='$sed_quote_subst'\ndouble_quote_subst='$double_quote_subst'\ndelay_variable_subst='$delay_variable_subst'\n_LT_CONFIG_STATUS_DECLARATIONS\nLTCC='$LTCC'\nLTCFLAGS='$LTCFLAGS'\ncompiler='$compiler_DEFAULT'\n\n# A function that is used when there is no print builtin or printf.\nfunc_fallback_echo ()\n{\n  eval 'cat <<_LTECHO_EOF\n\\$[]1\n_LTECHO_EOF'\n}\n\n# Quote evaled strings.\nfor var in lt_decl_all_varnames([[ \\\n]], lt_decl_quote_varnames); do\n    case \\`eval \\\\\\\\\\$ECHO \\\\\\\\\"\"\\\\\\\\\\$\\$var\"\\\\\\\\\"\\` in\n    *[[\\\\\\\\\\\\\\`\\\\\"\\\\\\$]]*)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\`\\\\\\$ECHO \\\\\"\\\\\\$\\$var\\\\\" | \\\\\\$SED \\\\\"\\\\\\$sed_quote_subst\\\\\"\\\\\\`\\\\\\\\\\\\\"\" ## exclude from sc_prohibit_nested_quotes\n      ;;\n    *)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\$\\$var\\\\\\\\\\\\\"\"\n      ;;\n    esac\ndone\n\n# Double-quote double-evaled strings.\nfor var in lt_decl_all_varnames([[ \\\n]], lt_decl_dquote_varnames); do\n    case \\`eval \\\\\\\\\\$ECHO \\\\\\\\\"\"\\\\\\\\\\$\\$var\"\\\\\\\\\"\\` in\n    *[[\\\\\\\\\\\\\\`\\\\\"\\\\\\$]]*)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\`\\\\\\$ECHO \\\\\"\\\\\\$\\$var\\\\\" | \\\\\\$SED -e \\\\\"\\\\\\$double_quote_subst\\\\\" -e \\\\\"\\\\\\$sed_quote_subst\\\\\" -e \\\\\"\\\\\\$delay_variable_subst\\\\\"\\\\\\`\\\\\\\\\\\\\"\" ## exclude from sc_prohibit_nested_quotes\n      ;;\n    *)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\$\\$var\\\\\\\\\\\\\"\"\n      ;;\n    esac\ndone\n\n_LT_OUTPUT_LIBTOOL_INIT\n])\n\n# _LT_GENERATED_FILE_INIT(FILE, [COMMENT])\n# ------------------------------------\n# Generate a child script FILE with all initialization necessary to\n# reuse the environment learned by the parent script, and make the\n# file executable.  If COMMENT is supplied, it is inserted after the\n# '#!' sequence but before initialization text begins.  After this\n# macro, additional text can be appended to FILE to form the body of\n# the child script.  The macro ends with non-zero status if the\n# file could not be fully written (such as if the disk is full).\nm4_ifdef([AS_INIT_GENERATED],\n[m4_defun([_LT_GENERATED_FILE_INIT],[AS_INIT_GENERATED($@)])],\n[m4_defun([_LT_GENERATED_FILE_INIT],\n[m4_require([AS_PREPARE])]dnl\n[m4_pushdef([AS_MESSAGE_LOG_FD])]dnl\n[lt_write_fail=0\ncat >$1 <<_ASEOF || lt_write_fail=1\n#! $SHELL\n# Generated by $as_me.\n$2\nSHELL=\\${CONFIG_SHELL-$SHELL}\nexport SHELL\n_ASEOF\ncat >>$1 <<\\_ASEOF || lt_write_fail=1\nAS_SHELL_SANITIZE\n_AS_PREPARE\nexec AS_MESSAGE_FD>&1\n_ASEOF\ntest 0 = \"$lt_write_fail\" && chmod +x $1[]dnl\nm4_popdef([AS_MESSAGE_LOG_FD])])])# _LT_GENERATED_FILE_INIT\n\n# LT_OUTPUT\n# ---------\n# This macro allows early generation of the libtool script (before\n# AC_OUTPUT is called), incase it is used in configure for compilation\n# tests.\nAC_DEFUN([LT_OUTPUT],\n[: ${CONFIG_LT=./config.lt}\nAC_MSG_NOTICE([creating $CONFIG_LT])\n_LT_GENERATED_FILE_INIT([\"$CONFIG_LT\"],\n[# Run this file to recreate a libtool stub with the current configuration.])\n\ncat >>\"$CONFIG_LT\" <<\\_LTEOF\nlt_cl_silent=false\nexec AS_MESSAGE_LOG_FD>>config.log\n{\n  echo\n  AS_BOX([Running $as_me.])\n} >&AS_MESSAGE_LOG_FD\n\nlt_cl_help=\"\\\n'$as_me' creates a local libtool stub from the current configuration,\nfor use in further configure time tests before the real libtool is\ngenerated.\n\nUsage: $[0] [[OPTIONS]]\n\n  -h, --help      print this help, then exit\n  -V, --version   print version number, then exit\n  -q, --quiet     do not print progress messages\n  -d, --debug     don't remove temporary files\n\nReport bugs to <bug-libtool@gnu.org>.\"\n\nlt_cl_version=\"\\\nm4_ifset([AC_PACKAGE_NAME], [AC_PACKAGE_NAME ])config.lt[]dnl\nm4_ifset([AC_PACKAGE_VERSION], [ AC_PACKAGE_VERSION])\nconfigured by $[0], generated by m4_PACKAGE_STRING.\n\nCopyright (C) 2011 Free Software Foundation, Inc.\nThis config.lt script is free software; the Free Software Foundation\ngives unlimited permision to copy, distribute and modify it.\"\n\nwhile test 0 != $[#]\ndo\n  case $[1] in\n    --version | --v* | -V )\n      echo \"$lt_cl_version\"; exit 0 ;;\n    --help | --h* | -h )\n      echo \"$lt_cl_help\"; exit 0 ;;\n    --debug | --d* | -d )\n      debug=: ;;\n    --quiet | --q* | --silent | --s* | -q )\n      lt_cl_silent=: ;;\n\n    -*) AC_MSG_ERROR([unrecognized option: $[1]\nTry '$[0] --help' for more information.]) ;;\n\n    *) AC_MSG_ERROR([unrecognized argument: $[1]\nTry '$[0] --help' for more information.]) ;;\n  esac\n  shift\ndone\n\nif $lt_cl_silent; then\n  exec AS_MESSAGE_FD>/dev/null\nfi\n_LTEOF\n\ncat >>\"$CONFIG_LT\" <<_LTEOF\n_LT_OUTPUT_LIBTOOL_COMMANDS_INIT\n_LTEOF\n\ncat >>\"$CONFIG_LT\" <<\\_LTEOF\nAC_MSG_NOTICE([creating $ofile])\n_LT_OUTPUT_LIBTOOL_COMMANDS\nAS_EXIT(0)\n_LTEOF\nchmod +x \"$CONFIG_LT\"\n\n# configure is writing to config.log, but config.lt does its own redirection,\n# appending to config.log, which fails on DOS, as config.log is still kept\n# open by configure.  Here we exec the FD to /dev/null, effectively closing\n# config.log, so it can be properly (re)opened and appended to by config.lt.\nlt_cl_success=:\ntest yes = \"$silent\" &&\n  lt_config_lt_args=\"$lt_config_lt_args --quiet\"\nexec AS_MESSAGE_LOG_FD>/dev/null\n$SHELL \"$CONFIG_LT\" $lt_config_lt_args || lt_cl_success=false\nexec AS_MESSAGE_LOG_FD>>config.log\n$lt_cl_success || AS_EXIT(1)\n])# LT_OUTPUT\n\n\n# _LT_CONFIG(TAG)\n# ---------------\n# If TAG is the built-in tag, create an initial libtool script with a\n# default configuration from the untagged config vars.  Otherwise add code\n# to config.status for appending the configuration named by TAG from the\n# matching tagged config vars.\nm4_defun([_LT_CONFIG],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\n_LT_CONFIG_SAVE_COMMANDS([\n  m4_define([_LT_TAG], m4_if([$1], [], [C], [$1]))dnl\n  m4_if(_LT_TAG, [C], [\n    # See if we are running on zsh, and set the options that allow our\n    # commands through without removal of \\ escapes.\n    if test -n \"${ZSH_VERSION+set}\"; then\n      setopt NO_GLOB_SUBST\n    fi\n\n    cfgfile=${ofile}T\n    trap \"$RM \\\"$cfgfile\\\"; exit 1\" 1 2 15\n    $RM \"$cfgfile\"\n\n    cat <<_LT_EOF >> \"$cfgfile\"\n#! $SHELL\n# Generated automatically by $as_me ($PACKAGE) $VERSION\n# Libtool was configured on host `(hostname || uname -n) 2>/dev/null | sed 1q`:\n# NOTE: Changes made to this file will be lost: look at ltmain.sh.\n\n# Provide generalized library-building support services.\n# Written by Gordon Matzigkeit, 1996\n\n_LT_COPYING\n_LT_LIBTOOL_TAGS\n\n# Configured defaults for sys_lib_dlsearch_path munging.\n: \\${LT_SYS_LIBRARY_PATH=\"$configure_time_lt_sys_library_path\"}\n\n# ### BEGIN LIBTOOL CONFIG\n_LT_LIBTOOL_CONFIG_VARS\n_LT_LIBTOOL_TAG_VARS\n# ### END LIBTOOL CONFIG\n\n_LT_EOF\n\n    cat <<'_LT_EOF' >> \"$cfgfile\"\n\n# ### BEGIN FUNCTIONS SHARED WITH CONFIGURE\n\n_LT_PREPARE_MUNGE_PATH_LIST\n_LT_PREPARE_CC_BASENAME\n\n# ### END FUNCTIONS SHARED WITH CONFIGURE\n\n_LT_EOF\n\n  case $host_os in\n  aix3*)\n    cat <<\\_LT_EOF >> \"$cfgfile\"\n# AIX sometimes has problems with the GCC collect2 program.  For some\n# reason, if we set the COLLECT_NAMES environment variable, the problems\n# vanish in a puff of smoke.\nif test set != \"${COLLECT_NAMES+set}\"; then\n  COLLECT_NAMES=\n  export COLLECT_NAMES\nfi\n_LT_EOF\n    ;;\n  esac\n\n  _LT_PROG_LTMAIN\n\n  # We use sed instead of cat because bash on DJGPP gets confused if\n  # if finds mixed CR/LF and LF-only lines.  Since sed operates in\n  # text mode, it properly converts lines to CR/LF.  This bash problem\n  # is reportedly fixed, but why not run on old versions too?\n  sed '$q' \"$ltmain\" >> \"$cfgfile\" \\\n     || (rm -f \"$cfgfile\"; exit 1)\n\n   mv -f \"$cfgfile\" \"$ofile\" ||\n    (rm -f \"$ofile\" && cp \"$cfgfile\" \"$ofile\" && rm -f \"$cfgfile\")\n  chmod +x \"$ofile\"\n],\n[cat <<_LT_EOF >> \"$ofile\"\n\ndnl Unfortunately we have to use $1 here, since _LT_TAG is not expanded\ndnl in a comment (ie after a #).\n# ### BEGIN LIBTOOL TAG CONFIG: $1\n_LT_LIBTOOL_TAG_VARS(_LT_TAG)\n# ### END LIBTOOL TAG CONFIG: $1\n_LT_EOF\n])dnl /m4_if\n],\n[m4_if([$1], [], [\n    PACKAGE='$PACKAGE'\n    VERSION='$VERSION'\n    RM='$RM'\n    ofile='$ofile'], [])\n])dnl /_LT_CONFIG_SAVE_COMMANDS\n])# _LT_CONFIG\n\n\n# LT_SUPPORTED_TAG(TAG)\n# ---------------------\n# Trace this macro to discover what tags are supported by the libtool\n# --tag option, using:\n#    autoconf --trace 'LT_SUPPORTED_TAG:$1'\nAC_DEFUN([LT_SUPPORTED_TAG], [])\n\n\n# C support is built-in for now\nm4_define([_LT_LANG_C_enabled], [])\nm4_define([_LT_TAGS], [])\n\n\n# LT_LANG(LANG)\n# -------------\n# Enable libtool support for the given language if not already enabled.\nAC_DEFUN([LT_LANG],\n[AC_BEFORE([$0], [LT_OUTPUT])dnl\nm4_case([$1],\n  [C],\t\t\t[_LT_LANG(C)],\n  [C++],\t\t[_LT_LANG(CXX)],\n  [Go],\t\t\t[_LT_LANG(GO)],\n  [Java],\t\t[_LT_LANG(GCJ)],\n  [Fortran 77],\t\t[_LT_LANG(F77)],\n  [Fortran],\t\t[_LT_LANG(FC)],\n  [Windows Resource],\t[_LT_LANG(RC)],\n  [m4_ifdef([_LT_LANG_]$1[_CONFIG],\n    [_LT_LANG($1)],\n    [m4_fatal([$0: unsupported language: \"$1\"])])])dnl\n])# LT_LANG\n\n\n# _LT_LANG(LANGNAME)\n# ------------------\nm4_defun([_LT_LANG],\n[m4_ifdef([_LT_LANG_]$1[_enabled], [],\n  [LT_SUPPORTED_TAG([$1])dnl\n  m4_append([_LT_TAGS], [$1 ])dnl\n  m4_define([_LT_LANG_]$1[_enabled], [])dnl\n  _LT_LANG_$1_CONFIG($1)])dnl\n])# _LT_LANG\n\n\nm4_ifndef([AC_PROG_GO], [\n############################################################\n# NOTE: This macro has been submitted for inclusion into   #\n#  GNU Autoconf as AC_PROG_GO.  When it is available in    #\n#  a released version of Autoconf we should remove this    #\n#  macro and use it instead.                               #\n############################################################\nm4_defun([AC_PROG_GO],\n[AC_LANG_PUSH(Go)dnl\nAC_ARG_VAR([GOC],     [Go compiler command])dnl\nAC_ARG_VAR([GOFLAGS], [Go compiler flags])dnl\n_AC_ARG_VAR_LDFLAGS()dnl\nAC_CHECK_TOOL(GOC, gccgo)\nif test -z \"$GOC\"; then\n  if test -n \"$ac_tool_prefix\"; then\n    AC_CHECK_PROG(GOC, [${ac_tool_prefix}gccgo], [${ac_tool_prefix}gccgo])\n  fi\nfi\nif test -z \"$GOC\"; then\n  AC_CHECK_PROG(GOC, gccgo, gccgo, false)\nfi\n])#m4_defun\n])#m4_ifndef\n\n\n# _LT_LANG_DEFAULT_CONFIG\n# -----------------------\nm4_defun([_LT_LANG_DEFAULT_CONFIG],\n[AC_PROVIDE_IFELSE([AC_PROG_CXX],\n  [LT_LANG(CXX)],\n  [m4_define([AC_PROG_CXX], defn([AC_PROG_CXX])[LT_LANG(CXX)])])\n\nAC_PROVIDE_IFELSE([AC_PROG_F77],\n  [LT_LANG(F77)],\n  [m4_define([AC_PROG_F77], defn([AC_PROG_F77])[LT_LANG(F77)])])\n\nAC_PROVIDE_IFELSE([AC_PROG_FC],\n  [LT_LANG(FC)],\n  [m4_define([AC_PROG_FC], defn([AC_PROG_FC])[LT_LANG(FC)])])\n\ndnl The call to [A][M_PROG_GCJ] is quoted like that to stop aclocal\ndnl pulling things in needlessly.\nAC_PROVIDE_IFELSE([AC_PROG_GCJ],\n  [LT_LANG(GCJ)],\n  [AC_PROVIDE_IFELSE([A][M_PROG_GCJ],\n    [LT_LANG(GCJ)],\n    [AC_PROVIDE_IFELSE([LT_PROG_GCJ],\n      [LT_LANG(GCJ)],\n      [m4_ifdef([AC_PROG_GCJ],\n\t[m4_define([AC_PROG_GCJ], defn([AC_PROG_GCJ])[LT_LANG(GCJ)])])\n       m4_ifdef([A][M_PROG_GCJ],\n\t[m4_define([A][M_PROG_GCJ], defn([A][M_PROG_GCJ])[LT_LANG(GCJ)])])\n       m4_ifdef([LT_PROG_GCJ],\n\t[m4_define([LT_PROG_GCJ], defn([LT_PROG_GCJ])[LT_LANG(GCJ)])])])])])\n\nAC_PROVIDE_IFELSE([AC_PROG_GO],\n  [LT_LANG(GO)],\n  [m4_define([AC_PROG_GO], defn([AC_PROG_GO])[LT_LANG(GO)])])\n\nAC_PROVIDE_IFELSE([LT_PROG_RC],\n  [LT_LANG(RC)],\n  [m4_define([LT_PROG_RC], defn([LT_PROG_RC])[LT_LANG(RC)])])\n])# _LT_LANG_DEFAULT_CONFIG\n\n# Obsolete macros:\nAU_DEFUN([AC_LIBTOOL_CXX], [LT_LANG(C++)])\nAU_DEFUN([AC_LIBTOOL_F77], [LT_LANG(Fortran 77)])\nAU_DEFUN([AC_LIBTOOL_FC], [LT_LANG(Fortran)])\nAU_DEFUN([AC_LIBTOOL_GCJ], [LT_LANG(Java)])\nAU_DEFUN([AC_LIBTOOL_RC], [LT_LANG(Windows Resource)])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_CXX], [])\ndnl AC_DEFUN([AC_LIBTOOL_F77], [])\ndnl AC_DEFUN([AC_LIBTOOL_FC], [])\ndnl AC_DEFUN([AC_LIBTOOL_GCJ], [])\ndnl AC_DEFUN([AC_LIBTOOL_RC], [])\n\n\n# _LT_TAG_COMPILER\n# ----------------\nm4_defun([_LT_TAG_COMPILER],\n[AC_REQUIRE([AC_PROG_CC])dnl\n\n_LT_DECL([LTCC], [CC], [1], [A C compiler])dnl\n_LT_DECL([LTCFLAGS], [CFLAGS], [1], [LTCC compiler flags])dnl\n_LT_TAGDECL([CC], [compiler], [1], [A language specific compiler])dnl\n_LT_TAGDECL([with_gcc], [GCC], [0], [Is the compiler the GNU compiler?])dnl\n\n# If no C compiler was specified, use CC.\nLTCC=${LTCC-\"$CC\"}\n\n# If no C compiler flags were specified, use CFLAGS.\nLTCFLAGS=${LTCFLAGS-\"$CFLAGS\"}\n\n# Allow CC to be a program name with arguments.\ncompiler=$CC\n])# _LT_TAG_COMPILER\n\n\n# _LT_COMPILER_BOILERPLATE\n# ------------------------\n# Check for compiler boilerplate output or warnings with\n# the simple compiler test code.\nm4_defun([_LT_COMPILER_BOILERPLATE],\n[m4_require([_LT_DECL_SED])dnl\nac_outfile=conftest.$ac_objext\necho \"$lt_simple_compile_test_code\" >conftest.$ac_ext\neval \"$ac_compile\" 2>&1 >/dev/null | $SED '/^$/d; /^ *+/d' >conftest.err\n_lt_compiler_boilerplate=`cat conftest.err`\n$RM conftest*\n])# _LT_COMPILER_BOILERPLATE\n\n\n# _LT_LINKER_BOILERPLATE\n# ----------------------\n# Check for linker boilerplate output or warnings with\n# the simple link test code.\nm4_defun([_LT_LINKER_BOILERPLATE],\n[m4_require([_LT_DECL_SED])dnl\nac_outfile=conftest.$ac_objext\necho \"$lt_simple_link_test_code\" >conftest.$ac_ext\neval \"$ac_link\" 2>&1 >/dev/null | $SED '/^$/d; /^ *+/d' >conftest.err\n_lt_linker_boilerplate=`cat conftest.err`\n$RM -r conftest*\n])# _LT_LINKER_BOILERPLATE\n\n# _LT_REQUIRED_DARWIN_CHECKS\n# -------------------------\nm4_defun_once([_LT_REQUIRED_DARWIN_CHECKS],[\n  case $host_os in\n    rhapsody* | darwin*)\n    AC_CHECK_TOOL([DSYMUTIL], [dsymutil], [:])\n    AC_CHECK_TOOL([NMEDIT], [nmedit], [:])\n    AC_CHECK_TOOL([LIPO], [lipo], [:])\n    AC_CHECK_TOOL([OTOOL], [otool], [:])\n    AC_CHECK_TOOL([OTOOL64], [otool64], [:])\n    _LT_DECL([], [DSYMUTIL], [1],\n      [Tool to manipulate archived DWARF debug symbol files on Mac OS X])\n    _LT_DECL([], [NMEDIT], [1],\n      [Tool to change global to local symbols on Mac OS X])\n    _LT_DECL([], [LIPO], [1],\n      [Tool to manipulate fat objects and archives on Mac OS X])\n    _LT_DECL([], [OTOOL], [1],\n      [ldd/readelf like tool for Mach-O binaries on Mac OS X])\n    _LT_DECL([], [OTOOL64], [1],\n      [ldd/readelf like tool for 64 bit Mach-O binaries on Mac OS X 10.4])\n\n    AC_CACHE_CHECK([for -single_module linker flag],[lt_cv_apple_cc_single_mod],\n      [lt_cv_apple_cc_single_mod=no\n      if test -z \"$LT_MULTI_MODULE\"; then\n\t# By default we will add the -single_module flag. You can override\n\t# by either setting the environment variable LT_MULTI_MODULE\n\t# non-empty at configure time, or by adding -multi_module to the\n\t# link flags.\n\trm -rf libconftest.dylib*\n\techo \"int foo(void){return 1;}\" > conftest.c\n\techo \"$LTCC $LTCFLAGS $LDFLAGS -o libconftest.dylib \\\n-dynamiclib -Wl,-single_module conftest.c\" >&AS_MESSAGE_LOG_FD\n\t$LTCC $LTCFLAGS $LDFLAGS -o libconftest.dylib \\\n\t  -dynamiclib -Wl,-single_module conftest.c 2>conftest.err\n        _lt_result=$?\n\t# If there is a non-empty error log, and \"single_module\"\n\t# appears in it, assume the flag caused a linker warning\n        if test -s conftest.err && $GREP single_module conftest.err; then\n\t  cat conftest.err >&AS_MESSAGE_LOG_FD\n\t# Otherwise, if the output was created with a 0 exit code from\n\t# the compiler, it worked.\n\telif test -f libconftest.dylib && test 0 = \"$_lt_result\"; then\n\t  lt_cv_apple_cc_single_mod=yes\n\telse\n\t  cat conftest.err >&AS_MESSAGE_LOG_FD\n\tfi\n\trm -rf libconftest.dylib*\n\trm -f conftest.*\n      fi])\n\n    AC_CACHE_CHECK([for -exported_symbols_list linker flag],\n      [lt_cv_ld_exported_symbols_list],\n      [lt_cv_ld_exported_symbols_list=no\n      save_LDFLAGS=$LDFLAGS\n      echo \"_main\" > conftest.sym\n      LDFLAGS=\"$LDFLAGS -Wl,-exported_symbols_list,conftest.sym\"\n      AC_LINK_IFELSE([AC_LANG_PROGRAM([],[])],\n\t[lt_cv_ld_exported_symbols_list=yes],\n\t[lt_cv_ld_exported_symbols_list=no])\n\tLDFLAGS=$save_LDFLAGS\n    ])\n\n    AC_CACHE_CHECK([for -force_load linker flag],[lt_cv_ld_force_load],\n      [lt_cv_ld_force_load=no\n      cat > conftest.c << _LT_EOF\nint forced_loaded() { return 2;}\n_LT_EOF\n      echo \"$LTCC $LTCFLAGS -c -o conftest.o conftest.c\" >&AS_MESSAGE_LOG_FD\n      $LTCC $LTCFLAGS -c -o conftest.o conftest.c 2>&AS_MESSAGE_LOG_FD\n      echo \"$AR cru libconftest.a conftest.o\" >&AS_MESSAGE_LOG_FD\n      $AR cru libconftest.a conftest.o 2>&AS_MESSAGE_LOG_FD\n      echo \"$RANLIB libconftest.a\" >&AS_MESSAGE_LOG_FD\n      $RANLIB libconftest.a 2>&AS_MESSAGE_LOG_FD\n      cat > conftest.c << _LT_EOF\nint main() { return 0;}\n_LT_EOF\n      echo \"$LTCC $LTCFLAGS $LDFLAGS -o conftest conftest.c -Wl,-force_load,./libconftest.a\" >&AS_MESSAGE_LOG_FD\n      $LTCC $LTCFLAGS $LDFLAGS -o conftest conftest.c -Wl,-force_load,./libconftest.a 2>conftest.err\n      _lt_result=$?\n      if test -s conftest.err && $GREP force_load conftest.err; then\n\tcat conftest.err >&AS_MESSAGE_LOG_FD\n      elif test -f conftest && test 0 = \"$_lt_result\" && $GREP forced_load conftest >/dev/null 2>&1; then\n\tlt_cv_ld_force_load=yes\n      else\n\tcat conftest.err >&AS_MESSAGE_LOG_FD\n      fi\n        rm -f conftest.err libconftest.a conftest conftest.c\n        rm -rf conftest.dSYM\n    ])\n    case $host_os in\n    rhapsody* | darwin1.[[012]])\n      _lt_dar_allow_undefined='$wl-undefined ${wl}suppress' ;;\n    darwin1.*)\n      _lt_dar_allow_undefined='$wl-flat_namespace $wl-undefined ${wl}suppress' ;;\n    darwin*) # darwin 5.x on\n      # if running on 10.5 or later, the deployment target defaults\n      # to the OS version, if on x86, and 10.4, the deployment\n      # target defaults to 10.4. Don't you love it?\n      case ${MACOSX_DEPLOYMENT_TARGET-10.0},$host in\n\t10.0,*86*-darwin8*|10.0,*-darwin[[91]]*)\n\t  _lt_dar_allow_undefined='$wl-undefined ${wl}dynamic_lookup' ;;\n\t10.[[012]][[,.]]*)\n\t  _lt_dar_allow_undefined='$wl-flat_namespace $wl-undefined ${wl}suppress' ;;\n\t10.*)\n\t  _lt_dar_allow_undefined='$wl-undefined ${wl}dynamic_lookup' ;;\n      esac\n    ;;\n  esac\n    if test yes = \"$lt_cv_apple_cc_single_mod\"; then\n      _lt_dar_single_mod='$single_module'\n    fi\n    if test yes = \"$lt_cv_ld_exported_symbols_list\"; then\n      _lt_dar_export_syms=' $wl-exported_symbols_list,$output_objdir/$libname-symbols.expsym'\n    else\n      _lt_dar_export_syms='~$NMEDIT -s $output_objdir/$libname-symbols.expsym $lib'\n    fi\n    if test : != \"$DSYMUTIL\" && test no = \"$lt_cv_ld_force_load\"; then\n      _lt_dsymutil='~$DSYMUTIL $lib || :'\n    else\n      _lt_dsymutil=\n    fi\n    ;;\n  esac\n])\n\n\n# _LT_DARWIN_LINKER_FEATURES([TAG])\n# ---------------------------------\n# Checks for linker and compiler features on darwin\nm4_defun([_LT_DARWIN_LINKER_FEATURES],\n[\n  m4_require([_LT_REQUIRED_DARWIN_CHECKS])\n  _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n  _LT_TAGVAR(hardcode_direct, $1)=no\n  _LT_TAGVAR(hardcode_automatic, $1)=yes\n  _LT_TAGVAR(hardcode_shlibpath_var, $1)=unsupported\n  if test yes = \"$lt_cv_ld_force_load\"; then\n    _LT_TAGVAR(whole_archive_flag_spec, $1)='`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience $wl-force_load,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"`'\n    m4_case([$1], [F77], [_LT_TAGVAR(compiler_needs_object, $1)=yes],\n                  [FC],  [_LT_TAGVAR(compiler_needs_object, $1)=yes])\n  else\n    _LT_TAGVAR(whole_archive_flag_spec, $1)=''\n  fi\n  _LT_TAGVAR(link_all_deplibs, $1)=yes\n  _LT_TAGVAR(allow_undefined_flag, $1)=$_lt_dar_allow_undefined\n  case $cc_basename in\n     ifort*|nagfor*) _lt_dar_can_shared=yes ;;\n     *) _lt_dar_can_shared=$GCC ;;\n  esac\n  if test yes = \"$_lt_dar_can_shared\"; then\n    output_verbose_link_cmd=func_echo_all\n    _LT_TAGVAR(archive_cmds, $1)=\"\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$libobjs \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring $_lt_dar_single_mod$_lt_dsymutil\"\n    _LT_TAGVAR(module_cmds, $1)=\"\\$CC \\$allow_undefined_flag -o \\$lib -bundle \\$libobjs \\$deplibs \\$compiler_flags$_lt_dsymutil\"\n    _LT_TAGVAR(archive_expsym_cmds, $1)=\"sed 's|^|_|' < \\$export_symbols > \\$output_objdir/\\$libname-symbols.expsym~\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$libobjs \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring $_lt_dar_single_mod$_lt_dar_export_syms$_lt_dsymutil\"\n    _LT_TAGVAR(module_expsym_cmds, $1)=\"sed -e 's|^|_|' < \\$export_symbols > \\$output_objdir/\\$libname-symbols.expsym~\\$CC \\$allow_undefined_flag -o \\$lib -bundle \\$libobjs \\$deplibs \\$compiler_flags$_lt_dar_export_syms$_lt_dsymutil\"\n    m4_if([$1], [CXX],\n[   if test yes != \"$lt_cv_apple_cc_single_mod\"; then\n      _LT_TAGVAR(archive_cmds, $1)=\"\\$CC -r -keep_private_externs -nostdlib -o \\$lib-master.o \\$libobjs~\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$lib-master.o \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring$_lt_dsymutil\"\n      _LT_TAGVAR(archive_expsym_cmds, $1)=\"sed 's|^|_|' < \\$export_symbols > \\$output_objdir/\\$libname-symbols.expsym~\\$CC -r -keep_private_externs -nostdlib -o \\$lib-master.o \\$libobjs~\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$lib-master.o \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring$_lt_dar_export_syms$_lt_dsymutil\"\n    fi\n],[])\n  else\n  _LT_TAGVAR(ld_shlibs, $1)=no\n  fi\n])\n\n# _LT_SYS_MODULE_PATH_AIX([TAGNAME])\n# ----------------------------------\n# Links a minimal program and checks the executable\n# for the system default hardcoded library path. In most cases,\n# this is /usr/lib:/lib, but when the MPI compilers are used\n# the location of the communication and MPI libs are included too.\n# If we don't find anything, use the default library path according\n# to the aix ld manual.\n# Store the results from the different compilers for each TAGNAME.\n# Allow to override them for all tags through lt_cv_aix_libpath.\nm4_defun([_LT_SYS_MODULE_PATH_AIX],\n[m4_require([_LT_DECL_SED])dnl\nif test set = \"${lt_cv_aix_libpath+set}\"; then\n  aix_libpath=$lt_cv_aix_libpath\nelse\n  AC_CACHE_VAL([_LT_TAGVAR([lt_cv_aix_libpath_], [$1])],\n  [AC_LINK_IFELSE([AC_LANG_PROGRAM],[\n  lt_aix_libpath_sed='[\n      /Import File Strings/,/^$/ {\n\t  /^0/ {\n\t      s/^0  *\\([^ ]*\\) *$/\\1/\n\t      p\n\t  }\n      }]'\n  _LT_TAGVAR([lt_cv_aix_libpath_], [$1])=`dump -H conftest$ac_exeext 2>/dev/null | $SED -n -e \"$lt_aix_libpath_sed\"`\n  # Check for a 64-bit object if we didn't find anything.\n  if test -z \"$_LT_TAGVAR([lt_cv_aix_libpath_], [$1])\"; then\n    _LT_TAGVAR([lt_cv_aix_libpath_], [$1])=`dump -HX64 conftest$ac_exeext 2>/dev/null | $SED -n -e \"$lt_aix_libpath_sed\"`\n  fi],[])\n  if test -z \"$_LT_TAGVAR([lt_cv_aix_libpath_], [$1])\"; then\n    _LT_TAGVAR([lt_cv_aix_libpath_], [$1])=/usr/lib:/lib\n  fi\n  ])\n  aix_libpath=$_LT_TAGVAR([lt_cv_aix_libpath_], [$1])\nfi\n])# _LT_SYS_MODULE_PATH_AIX\n\n\n# _LT_SHELL_INIT(ARG)\n# -------------------\nm4_define([_LT_SHELL_INIT],\n[m4_divert_text([M4SH-INIT], [$1\n])])# _LT_SHELL_INIT\n\n\n\n# _LT_PROG_ECHO_BACKSLASH\n# -----------------------\n# Find how we can fake an echo command that does not interpret backslash.\n# In particular, with Autoconf 2.60 or later we add some code to the start\n# of the generated configure script that will find a shell with a builtin\n# printf (that we can use as an echo command).\nm4_defun([_LT_PROG_ECHO_BACKSLASH],\n[ECHO='\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\nECHO=$ECHO$ECHO$ECHO$ECHO$ECHO\nECHO=$ECHO$ECHO$ECHO$ECHO$ECHO$ECHO\n\nAC_MSG_CHECKING([how to print strings])\n# Test print first, because it will be a builtin if present.\nif test \"X`( print -r -- -n ) 2>/dev/null`\" = X-n && \\\n   test \"X`print -r -- $ECHO 2>/dev/null`\" = \"X$ECHO\"; then\n  ECHO='print -r --'\nelif test \"X`printf %s $ECHO 2>/dev/null`\" = \"X$ECHO\"; then\n  ECHO='printf %s\\n'\nelse\n  # Use this function as a fallback that always works.\n  func_fallback_echo ()\n  {\n    eval 'cat <<_LTECHO_EOF\n$[]1\n_LTECHO_EOF'\n  }\n  ECHO='func_fallback_echo'\nfi\n\n# func_echo_all arg...\n# Invoke $ECHO with all args, space-separated.\nfunc_echo_all ()\n{\n    $ECHO \"$*\"\n}\n\ncase $ECHO in\n  printf*) AC_MSG_RESULT([printf]) ;;\n  print*) AC_MSG_RESULT([print -r]) ;;\n  *) AC_MSG_RESULT([cat]) ;;\nesac\n\nm4_ifdef([_AS_DETECT_SUGGESTED],\n[_AS_DETECT_SUGGESTED([\n  test -n \"${ZSH_VERSION+set}${BASH_VERSION+set}\" || (\n    ECHO='\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\n    ECHO=$ECHO$ECHO$ECHO$ECHO$ECHO\n    ECHO=$ECHO$ECHO$ECHO$ECHO$ECHO$ECHO\n    PATH=/empty FPATH=/empty; export PATH FPATH\n    test \"X`printf %s $ECHO`\" = \"X$ECHO\" \\\n      || test \"X`print -r -- $ECHO`\" = \"X$ECHO\" )])])\n\n_LT_DECL([], [SHELL], [1], [Shell to use when invoking shell scripts])\n_LT_DECL([], [ECHO], [1], [An echo program that protects backslashes])\n])# _LT_PROG_ECHO_BACKSLASH\n\n\n# _LT_WITH_SYSROOT\n# ----------------\nAC_DEFUN([_LT_WITH_SYSROOT],\n[AC_MSG_CHECKING([for sysroot])\nAC_ARG_WITH([sysroot],\n[AS_HELP_STRING([--with-sysroot@<:@=DIR@:>@],\n  [Search for dependent libraries within DIR (or the compiler's sysroot\n   if not specified).])],\n[], [with_sysroot=no])\n\ndnl lt_sysroot will always be passed unquoted.  We quote it here\ndnl in case the user passed a directory name.\nlt_sysroot=\ncase $with_sysroot in #(\n yes)\n   if test yes = \"$GCC\"; then\n     lt_sysroot=`$CC --print-sysroot 2>/dev/null`\n   fi\n   ;; #(\n /*)\n   lt_sysroot=`echo \"$with_sysroot\" | sed -e \"$sed_quote_subst\"`\n   ;; #(\n no|'')\n   ;; #(\n *)\n   AC_MSG_RESULT([$with_sysroot])\n   AC_MSG_ERROR([The sysroot must be an absolute path.])\n   ;;\nesac\n\n AC_MSG_RESULT([${lt_sysroot:-no}])\n_LT_DECL([], [lt_sysroot], [0], [The root where to search for ]dnl\n[dependent libraries, and where our libraries should be installed.])])\n\n# _LT_ENABLE_LOCK\n# ---------------\nm4_defun([_LT_ENABLE_LOCK],\n[AC_ARG_ENABLE([libtool-lock],\n  [AS_HELP_STRING([--disable-libtool-lock],\n    [avoid locking (might break parallel builds)])])\ntest no = \"$enable_libtool_lock\" || enable_libtool_lock=yes\n\n# Some flags need to be propagated to the compiler or linker for good\n# libtool support.\ncase $host in\nia64-*-hpux*)\n  # Find out what ABI is being produced by ac_compile, and set mode\n  # options accordingly.\n  echo 'int i;' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    case `/usr/bin/file conftest.$ac_objext` in\n      *ELF-32*)\n\tHPUX_IA64_MODE=32\n\t;;\n      *ELF-64*)\n\tHPUX_IA64_MODE=64\n\t;;\n    esac\n  fi\n  rm -rf conftest*\n  ;;\n*-*-irix6*)\n  # Find out what ABI is being produced by ac_compile, and set linker\n  # options accordingly.\n  echo '[#]line '$LINENO' \"configure\"' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    if test yes = \"$lt_cv_prog_gnu_ld\"; then\n      case `/usr/bin/file conftest.$ac_objext` in\n\t*32-bit*)\n\t  LD=\"${LD-ld} -melf32bsmip\"\n\t  ;;\n\t*N32*)\n\t  LD=\"${LD-ld} -melf32bmipn32\"\n\t  ;;\n\t*64-bit*)\n\t  LD=\"${LD-ld} -melf64bmip\"\n\t;;\n      esac\n    else\n      case `/usr/bin/file conftest.$ac_objext` in\n\t*32-bit*)\n\t  LD=\"${LD-ld} -32\"\n\t  ;;\n\t*N32*)\n\t  LD=\"${LD-ld} -n32\"\n\t  ;;\n\t*64-bit*)\n\t  LD=\"${LD-ld} -64\"\n\t  ;;\n      esac\n    fi\n  fi\n  rm -rf conftest*\n  ;;\n\nmips64*-*linux*)\n  # Find out what ABI is being produced by ac_compile, and set linker\n  # options accordingly.\n  echo '[#]line '$LINENO' \"configure\"' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    emul=elf\n    case `/usr/bin/file conftest.$ac_objext` in\n      *32-bit*)\n\temul=\"${emul}32\"\n\t;;\n      *64-bit*)\n\temul=\"${emul}64\"\n\t;;\n    esac\n    case `/usr/bin/file conftest.$ac_objext` in\n      *MSB*)\n\temul=\"${emul}btsmip\"\n\t;;\n      *LSB*)\n\temul=\"${emul}ltsmip\"\n\t;;\n    esac\n    case `/usr/bin/file conftest.$ac_objext` in\n      *N32*)\n\temul=\"${emul}n32\"\n\t;;\n    esac\n    LD=\"${LD-ld} -m $emul\"\n  fi\n  rm -rf conftest*\n  ;;\n\nx86_64-*kfreebsd*-gnu|x86_64-*linux*|powerpc*-*linux*| \\\ns390*-*linux*|s390*-*tpf*|sparc*-*linux*)\n  # Find out what ABI is being produced by ac_compile, and set linker\n  # options accordingly.  Note that the listed cases only cover the\n  # situations where additional linker options are needed (such as when\n  # doing 32-bit compilation for a host where ld defaults to 64-bit, or\n  # vice versa); the common cases where no linker options are needed do\n  # not appear in the list.\n  echo 'int i;' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    case `/usr/bin/file conftest.o` in\n      *32-bit*)\n\tcase $host in\n\t  x86_64-*kfreebsd*-gnu)\n\t    LD=\"${LD-ld} -m elf_i386_fbsd\"\n\t    ;;\n\t  x86_64-*linux*)\n\t    case `/usr/bin/file conftest.o` in\n\t      *x86-64*)\n\t\tLD=\"${LD-ld} -m elf32_x86_64\"\n\t\t;;\n\t      *)\n\t\tLD=\"${LD-ld} -m elf_i386\"\n\t\t;;\n\t    esac\n\t    ;;\n\t  powerpc64le-*linux*)\n\t    LD=\"${LD-ld} -m elf32lppclinux\"\n\t    ;;\n\t  powerpc64-*linux*)\n\t    LD=\"${LD-ld} -m elf32ppclinux\"\n\t    ;;\n\t  s390x-*linux*)\n\t    LD=\"${LD-ld} -m elf_s390\"\n\t    ;;\n\t  sparc64-*linux*)\n\t    LD=\"${LD-ld} -m elf32_sparc\"\n\t    ;;\n\tesac\n\t;;\n      *64-bit*)\n\tcase $host in\n\t  x86_64-*kfreebsd*-gnu)\n\t    LD=\"${LD-ld} -m elf_x86_64_fbsd\"\n\t    ;;\n\t  x86_64-*linux*)\n\t    LD=\"${LD-ld} -m elf_x86_64\"\n\t    ;;\n\t  powerpcle-*linux*)\n\t    LD=\"${LD-ld} -m elf64lppc\"\n\t    ;;\n\t  powerpc-*linux*)\n\t    LD=\"${LD-ld} -m elf64ppc\"\n\t    ;;\n\t  s390*-*linux*|s390*-*tpf*)\n\t    LD=\"${LD-ld} -m elf64_s390\"\n\t    ;;\n\t  sparc*-*linux*)\n\t    LD=\"${LD-ld} -m elf64_sparc\"\n\t    ;;\n\tesac\n\t;;\n    esac\n  fi\n  rm -rf conftest*\n  ;;\n\n*-*-sco3.2v5*)\n  # On SCO OpenServer 5, we need -belf to get full-featured binaries.\n  SAVE_CFLAGS=$CFLAGS\n  CFLAGS=\"$CFLAGS -belf\"\n  AC_CACHE_CHECK([whether the C compiler needs -belf], lt_cv_cc_needs_belf,\n    [AC_LANG_PUSH(C)\n     AC_LINK_IFELSE([AC_LANG_PROGRAM([[]],[[]])],[lt_cv_cc_needs_belf=yes],[lt_cv_cc_needs_belf=no])\n     AC_LANG_POP])\n  if test yes != \"$lt_cv_cc_needs_belf\"; then\n    # this is probably gcc 2.8.0, egcs 1.0 or newer; no need for -belf\n    CFLAGS=$SAVE_CFLAGS\n  fi\n  ;;\n*-*solaris*)\n  # Find out what ABI is being produced by ac_compile, and set linker\n  # options accordingly.\n  echo 'int i;' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    case `/usr/bin/file conftest.o` in\n    *64-bit*)\n      case $lt_cv_prog_gnu_ld in\n      yes*)\n        case $host in\n        i?86-*-solaris*|x86_64-*-solaris*)\n          LD=\"${LD-ld} -m elf_x86_64\"\n          ;;\n        sparc*-*-solaris*)\n          LD=\"${LD-ld} -m elf64_sparc\"\n          ;;\n        esac\n        # GNU ld 2.21 introduced _sol2 emulations.  Use them if available.\n        if ${LD-ld} -V | grep _sol2 >/dev/null 2>&1; then\n          LD=${LD-ld}_sol2\n        fi\n        ;;\n      *)\n\tif ${LD-ld} -64 -r -o conftest2.o conftest.o >/dev/null 2>&1; then\n\t  LD=\"${LD-ld} -64\"\n\tfi\n\t;;\n      esac\n      ;;\n    esac\n  fi\n  rm -rf conftest*\n  ;;\nesac\n\nneed_locks=$enable_libtool_lock\n])# _LT_ENABLE_LOCK\n\n\n# _LT_PROG_AR\n# -----------\nm4_defun([_LT_PROG_AR],\n[AC_CHECK_TOOLS(AR, [ar], false)\n: ${AR=ar}\n: ${AR_FLAGS=cru}\n_LT_DECL([], [AR], [1], [The archiver])\n_LT_DECL([], [AR_FLAGS], [1], [Flags to create an archive])\n\nAC_CACHE_CHECK([for archiver @FILE support], [lt_cv_ar_at_file],\n  [lt_cv_ar_at_file=no\n   AC_COMPILE_IFELSE([AC_LANG_PROGRAM],\n     [echo conftest.$ac_objext > conftest.lst\n      lt_ar_try='$AR $AR_FLAGS libconftest.a @conftest.lst >&AS_MESSAGE_LOG_FD'\n      AC_TRY_EVAL([lt_ar_try])\n      if test 0 -eq \"$ac_status\"; then\n\t# Ensure the archiver fails upon bogus file names.\n\trm -f conftest.$ac_objext libconftest.a\n\tAC_TRY_EVAL([lt_ar_try])\n\tif test 0 -ne \"$ac_status\"; then\n          lt_cv_ar_at_file=@\n        fi\n      fi\n      rm -f conftest.* libconftest.a\n     ])\n  ])\n\nif test no = \"$lt_cv_ar_at_file\"; then\n  archiver_list_spec=\nelse\n  archiver_list_spec=$lt_cv_ar_at_file\nfi\n_LT_DECL([], [archiver_list_spec], [1],\n  [How to feed a file listing to the archiver])\n])# _LT_PROG_AR\n\n\n# _LT_CMD_OLD_ARCHIVE\n# -------------------\nm4_defun([_LT_CMD_OLD_ARCHIVE],\n[_LT_PROG_AR\n\nAC_CHECK_TOOL(STRIP, strip, :)\ntest -z \"$STRIP\" && STRIP=:\n_LT_DECL([], [STRIP], [1], [A symbol stripping program])\n\nAC_CHECK_TOOL(RANLIB, ranlib, :)\ntest -z \"$RANLIB\" && RANLIB=:\n_LT_DECL([], [RANLIB], [1],\n    [Commands used to install an old-style archive])\n\n# Determine commands to create old-style static archives.\nold_archive_cmds='$AR $AR_FLAGS $oldlib$oldobjs'\nold_postinstall_cmds='chmod 644 $oldlib'\nold_postuninstall_cmds=\n\nif test -n \"$RANLIB\"; then\n  case $host_os in\n  bitrig* | openbsd*)\n    old_postinstall_cmds=\"$old_postinstall_cmds~\\$RANLIB -t \\$tool_oldlib\"\n    ;;\n  *)\n    old_postinstall_cmds=\"$old_postinstall_cmds~\\$RANLIB \\$tool_oldlib\"\n    ;;\n  esac\n  old_archive_cmds=\"$old_archive_cmds~\\$RANLIB \\$tool_oldlib\"\nfi\n\ncase $host_os in\n  darwin*)\n    lock_old_archive_extraction=yes ;;\n  *)\n    lock_old_archive_extraction=no ;;\nesac\n_LT_DECL([], [old_postinstall_cmds], [2])\n_LT_DECL([], [old_postuninstall_cmds], [2])\n_LT_TAGDECL([], [old_archive_cmds], [2],\n    [Commands used to build an old-style archive])\n_LT_DECL([], [lock_old_archive_extraction], [0],\n    [Whether to use a lock for old archive extraction])\n])# _LT_CMD_OLD_ARCHIVE\n\n\n# _LT_COMPILER_OPTION(MESSAGE, VARIABLE-NAME, FLAGS,\n#\t\t[OUTPUT-FILE], [ACTION-SUCCESS], [ACTION-FAILURE])\n# ----------------------------------------------------------------\n# Check whether the given compiler option works\nAC_DEFUN([_LT_COMPILER_OPTION],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_SED])dnl\nAC_CACHE_CHECK([$1], [$2],\n  [$2=no\n   m4_if([$4], , [ac_outfile=conftest.$ac_objext], [ac_outfile=$4])\n   echo \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n   lt_compiler_flag=\"$3\"  ## exclude from sc_useless_quotes_in_assignment\n   # Insert the option either (1) after the last *FLAGS variable, or\n   # (2) before a word containing \"conftest.\", or (3) at the end.\n   # Note that $ac_compile itself does not contain backslashes and begins\n   # with a dollar sign (not a hyphen), so the echo should work correctly.\n   # The option is referenced via a variable to avoid confusing sed.\n   lt_compile=`echo \"$ac_compile\" | $SED \\\n   -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n   -e 's: [[^ ]]*conftest\\.: $lt_compiler_flag&:; t' \\\n   -e 's:$: $lt_compiler_flag:'`\n   (eval echo \"\\\"\\$as_me:$LINENO: $lt_compile\\\"\" >&AS_MESSAGE_LOG_FD)\n   (eval \"$lt_compile\" 2>conftest.err)\n   ac_status=$?\n   cat conftest.err >&AS_MESSAGE_LOG_FD\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&AS_MESSAGE_LOG_FD\n   if (exit $ac_status) && test -s \"$ac_outfile\"; then\n     # The compiler can only warn and ignore the option if not recognized\n     # So say no if there are warnings other than the usual output.\n     $ECHO \"$_lt_compiler_boilerplate\" | $SED '/^$/d' >conftest.exp\n     $SED '/^$/d; /^ *+/d' conftest.err >conftest.er2\n     if test ! -s conftest.er2 || diff conftest.exp conftest.er2 >/dev/null; then\n       $2=yes\n     fi\n   fi\n   $RM conftest*\n])\n\nif test yes = \"[$]$2\"; then\n    m4_if([$5], , :, [$5])\nelse\n    m4_if([$6], , :, [$6])\nfi\n])# _LT_COMPILER_OPTION\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_COMPILER_OPTION], [_LT_COMPILER_OPTION])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_COMPILER_OPTION], [])\n\n\n# _LT_LINKER_OPTION(MESSAGE, VARIABLE-NAME, FLAGS,\n#                  [ACTION-SUCCESS], [ACTION-FAILURE])\n# ----------------------------------------------------\n# Check whether the given linker option works\nAC_DEFUN([_LT_LINKER_OPTION],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_SED])dnl\nAC_CACHE_CHECK([$1], [$2],\n  [$2=no\n   save_LDFLAGS=$LDFLAGS\n   LDFLAGS=\"$LDFLAGS $3\"\n   echo \"$lt_simple_link_test_code\" > conftest.$ac_ext\n   if (eval $ac_link 2>conftest.err) && test -s conftest$ac_exeext; then\n     # The linker can only warn and ignore the option if not recognized\n     # So say no if there are warnings\n     if test -s conftest.err; then\n       # Append any errors to the config.log.\n       cat conftest.err 1>&AS_MESSAGE_LOG_FD\n       $ECHO \"$_lt_linker_boilerplate\" | $SED '/^$/d' > conftest.exp\n       $SED '/^$/d; /^ *+/d' conftest.err >conftest.er2\n       if diff conftest.exp conftest.er2 >/dev/null; then\n         $2=yes\n       fi\n     else\n       $2=yes\n     fi\n   fi\n   $RM -r conftest*\n   LDFLAGS=$save_LDFLAGS\n])\n\nif test yes = \"[$]$2\"; then\n    m4_if([$4], , :, [$4])\nelse\n    m4_if([$5], , :, [$5])\nfi\n])# _LT_LINKER_OPTION\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_LINKER_OPTION], [_LT_LINKER_OPTION])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_LINKER_OPTION], [])\n\n\n# LT_CMD_MAX_LEN\n#---------------\nAC_DEFUN([LT_CMD_MAX_LEN],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\n# find the maximum length of command line arguments\nAC_MSG_CHECKING([the maximum length of command line arguments])\nAC_CACHE_VAL([lt_cv_sys_max_cmd_len], [dnl\n  i=0\n  teststring=ABCD\n\n  case $build_os in\n  msdosdjgpp*)\n    # On DJGPP, this test can blow up pretty badly due to problems in libc\n    # (any single argument exceeding 2000 bytes causes a buffer overrun\n    # during glob expansion).  Even if it were fixed, the result of this\n    # check would be larger than it should be.\n    lt_cv_sys_max_cmd_len=12288;    # 12K is about right\n    ;;\n\n  gnu*)\n    # Under GNU Hurd, this test is not required because there is\n    # no limit to the length of command line arguments.\n    # Libtool will interpret -1 as no limit whatsoever\n    lt_cv_sys_max_cmd_len=-1;\n    ;;\n\n  cygwin* | mingw* | cegcc*)\n    # On Win9x/ME, this test blows up -- it succeeds, but takes\n    # about 5 minutes as the teststring grows exponentially.\n    # Worse, since 9x/ME are not pre-emptively multitasking,\n    # you end up with a \"frozen\" computer, even though with patience\n    # the test eventually succeeds (with a max line length of 256k).\n    # Instead, let's just punt: use the minimum linelength reported by\n    # all of the supported platforms: 8192 (on NT/2K/XP).\n    lt_cv_sys_max_cmd_len=8192;\n    ;;\n\n  mint*)\n    # On MiNT this can take a long time and run out of memory.\n    lt_cv_sys_max_cmd_len=8192;\n    ;;\n\n  amigaos*)\n    # On AmigaOS with pdksh, this test takes hours, literally.\n    # So we just punt and use a minimum line length of 8192.\n    lt_cv_sys_max_cmd_len=8192;\n    ;;\n\n  bitrig* | darwin* | dragonfly* | freebsd* | netbsd* | openbsd*)\n    # This has been around since 386BSD, at least.  Likely further.\n    if test -x /sbin/sysctl; then\n      lt_cv_sys_max_cmd_len=`/sbin/sysctl -n kern.argmax`\n    elif test -x /usr/sbin/sysctl; then\n      lt_cv_sys_max_cmd_len=`/usr/sbin/sysctl -n kern.argmax`\n    else\n      lt_cv_sys_max_cmd_len=65536\t# usable default for all BSDs\n    fi\n    # And add a safety zone\n    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 4`\n    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\* 3`\n    ;;\n\n  interix*)\n    # We know the value 262144 and hardcode it with a safety zone (like BSD)\n    lt_cv_sys_max_cmd_len=196608\n    ;;\n\n  os2*)\n    # The test takes a long time on OS/2.\n    lt_cv_sys_max_cmd_len=8192\n    ;;\n\n  osf*)\n    # Dr. Hans Ekkehard Plesser reports seeing a kernel panic running configure\n    # due to this test when exec_disable_arg_limit is 1 on Tru64. It is not\n    # nice to cause kernel panics so lets avoid the loop below.\n    # First set a reasonable default.\n    lt_cv_sys_max_cmd_len=16384\n    #\n    if test -x /sbin/sysconfig; then\n      case `/sbin/sysconfig -q proc exec_disable_arg_limit` in\n        *1*) lt_cv_sys_max_cmd_len=-1 ;;\n      esac\n    fi\n    ;;\n  sco3.2v5*)\n    lt_cv_sys_max_cmd_len=102400\n    ;;\n  sysv5* | sco5v6* | sysv4.2uw2*)\n    kargmax=`grep ARG_MAX /etc/conf/cf.d/stune 2>/dev/null`\n    if test -n \"$kargmax\"; then\n      lt_cv_sys_max_cmd_len=`echo $kargmax | sed 's/.*[[\t ]]//'`\n    else\n      lt_cv_sys_max_cmd_len=32768\n    fi\n    ;;\n  *)\n    lt_cv_sys_max_cmd_len=`(getconf ARG_MAX) 2> /dev/null`\n    if test -n \"$lt_cv_sys_max_cmd_len\" && \\\n       test undefined != \"$lt_cv_sys_max_cmd_len\"; then\n      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 4`\n      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\* 3`\n    else\n      # Make teststring a little bigger before we do anything with it.\n      # a 1K string should be a reasonable start.\n      for i in 1 2 3 4 5 6 7 8; do\n        teststring=$teststring$teststring\n      done\n      SHELL=${SHELL-${CONFIG_SHELL-/bin/sh}}\n      # If test is not a shell built-in, we'll probably end up computing a\n      # maximum length that is only half of the actual maximum length, but\n      # we can't tell.\n      while { test X`env echo \"$teststring$teststring\" 2>/dev/null` \\\n\t         = \"X$teststring$teststring\"; } >/dev/null 2>&1 &&\n\t      test 17 != \"$i\" # 1/2 MB should be enough\n      do\n        i=`expr $i + 1`\n        teststring=$teststring$teststring\n      done\n      # Only check the string length outside the loop.\n      lt_cv_sys_max_cmd_len=`expr \"X$teststring\" : \".*\" 2>&1`\n      teststring=\n      # Add a significant safety factor because C++ compilers can tack on\n      # massive amounts of additional arguments before passing them to the\n      # linker.  It appears as though 1/2 is a usable value.\n      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 2`\n    fi\n    ;;\n  esac\n])\nif test -n \"$lt_cv_sys_max_cmd_len\"; then\n  AC_MSG_RESULT($lt_cv_sys_max_cmd_len)\nelse\n  AC_MSG_RESULT(none)\nfi\nmax_cmd_len=$lt_cv_sys_max_cmd_len\n_LT_DECL([], [max_cmd_len], [0],\n    [What is the maximum length of a command?])\n])# LT_CMD_MAX_LEN\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_SYS_MAX_CMD_LEN], [LT_CMD_MAX_LEN])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_SYS_MAX_CMD_LEN], [])\n\n\n# _LT_HEADER_DLFCN\n# ----------------\nm4_defun([_LT_HEADER_DLFCN],\n[AC_CHECK_HEADERS([dlfcn.h], [], [], [AC_INCLUDES_DEFAULT])dnl\n])# _LT_HEADER_DLFCN\n\n\n# _LT_TRY_DLOPEN_SELF (ACTION-IF-TRUE, ACTION-IF-TRUE-W-USCORE,\n#                      ACTION-IF-FALSE, ACTION-IF-CROSS-COMPILING)\n# ----------------------------------------------------------------\nm4_defun([_LT_TRY_DLOPEN_SELF],\n[m4_require([_LT_HEADER_DLFCN])dnl\nif test yes = \"$cross_compiling\"; then :\n  [$4]\nelse\n  lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n  lt_status=$lt_dlunknown\n  cat > conftest.$ac_ext <<_LT_EOF\n[#line $LINENO \"configure\"\n#include \"confdefs.h\"\n\n#if HAVE_DLFCN_H\n#include <dlfcn.h>\n#endif\n\n#include <stdio.h>\n\n#ifdef RTLD_GLOBAL\n#  define LT_DLGLOBAL\t\tRTLD_GLOBAL\n#else\n#  ifdef DL_GLOBAL\n#    define LT_DLGLOBAL\t\tDL_GLOBAL\n#  else\n#    define LT_DLGLOBAL\t\t0\n#  endif\n#endif\n\n/* We may have to define LT_DLLAZY_OR_NOW in the command line if we\n   find out it does not work in some platform. */\n#ifndef LT_DLLAZY_OR_NOW\n#  ifdef RTLD_LAZY\n#    define LT_DLLAZY_OR_NOW\t\tRTLD_LAZY\n#  else\n#    ifdef DL_LAZY\n#      define LT_DLLAZY_OR_NOW\t\tDL_LAZY\n#    else\n#      ifdef RTLD_NOW\n#        define LT_DLLAZY_OR_NOW\tRTLD_NOW\n#      else\n#        ifdef DL_NOW\n#          define LT_DLLAZY_OR_NOW\tDL_NOW\n#        else\n#          define LT_DLLAZY_OR_NOW\t0\n#        endif\n#      endif\n#    endif\n#  endif\n#endif\n\n/* When -fvisibility=hidden is used, assume the code has been annotated\n   correspondingly for the symbols needed.  */\n#if defined __GNUC__ && (((__GNUC__ == 3) && (__GNUC_MINOR__ >= 3)) || (__GNUC__ > 3))\nint fnord () __attribute__((visibility(\"default\")));\n#endif\n\nint fnord () { return 42; }\nint main ()\n{\n  void *self = dlopen (0, LT_DLGLOBAL|LT_DLLAZY_OR_NOW);\n  int status = $lt_dlunknown;\n\n  if (self)\n    {\n      if (dlsym (self,\"fnord\"))       status = $lt_dlno_uscore;\n      else\n        {\n\t  if (dlsym( self,\"_fnord\"))  status = $lt_dlneed_uscore;\n          else puts (dlerror ());\n\t}\n      /* dlclose (self); */\n    }\n  else\n    puts (dlerror ());\n\n  return status;\n}]\n_LT_EOF\n  if AC_TRY_EVAL(ac_link) && test -s \"conftest$ac_exeext\" 2>/dev/null; then\n    (./conftest; exit; ) >&AS_MESSAGE_LOG_FD 2>/dev/null\n    lt_status=$?\n    case x$lt_status in\n      x$lt_dlno_uscore) $1 ;;\n      x$lt_dlneed_uscore) $2 ;;\n      x$lt_dlunknown|x*) $3 ;;\n    esac\n  else :\n    # compilation failed\n    $3\n  fi\nfi\nrm -fr conftest*\n])# _LT_TRY_DLOPEN_SELF\n\n\n# LT_SYS_DLOPEN_SELF\n# ------------------\nAC_DEFUN([LT_SYS_DLOPEN_SELF],\n[m4_require([_LT_HEADER_DLFCN])dnl\nif test yes != \"$enable_dlopen\"; then\n  enable_dlopen=unknown\n  enable_dlopen_self=unknown\n  enable_dlopen_self_static=unknown\nelse\n  lt_cv_dlopen=no\n  lt_cv_dlopen_libs=\n\n  case $host_os in\n  beos*)\n    lt_cv_dlopen=load_add_on\n    lt_cv_dlopen_libs=\n    lt_cv_dlopen_self=yes\n    ;;\n\n  mingw* | pw32* | cegcc*)\n    lt_cv_dlopen=LoadLibrary\n    lt_cv_dlopen_libs=\n    ;;\n\n  cygwin*)\n    lt_cv_dlopen=dlopen\n    lt_cv_dlopen_libs=\n    ;;\n\n  darwin*)\n    # if libdl is installed we need to link against it\n    AC_CHECK_LIB([dl], [dlopen],\n\t\t[lt_cv_dlopen=dlopen lt_cv_dlopen_libs=-ldl],[\n    lt_cv_dlopen=dyld\n    lt_cv_dlopen_libs=\n    lt_cv_dlopen_self=yes\n    ])\n    ;;\n\n  tpf*)\n    # Don't try to run any link tests for TPF.  We know it's impossible\n    # because TPF is a cross-compiler, and we know how we open DSOs.\n    lt_cv_dlopen=dlopen\n    lt_cv_dlopen_libs=\n    lt_cv_dlopen_self=no\n    ;;\n\n  *)\n    AC_CHECK_FUNC([shl_load],\n\t  [lt_cv_dlopen=shl_load],\n      [AC_CHECK_LIB([dld], [shl_load],\n\t    [lt_cv_dlopen=shl_load lt_cv_dlopen_libs=-ldld],\n\t[AC_CHECK_FUNC([dlopen],\n\t      [lt_cv_dlopen=dlopen],\n\t  [AC_CHECK_LIB([dl], [dlopen],\n\t\t[lt_cv_dlopen=dlopen lt_cv_dlopen_libs=-ldl],\n\t    [AC_CHECK_LIB([svld], [dlopen],\n\t\t  [lt_cv_dlopen=dlopen lt_cv_dlopen_libs=-lsvld],\n\t      [AC_CHECK_LIB([dld], [dld_link],\n\t\t    [lt_cv_dlopen=dld_link lt_cv_dlopen_libs=-ldld])\n\t      ])\n\t    ])\n\t  ])\n\t])\n      ])\n    ;;\n  esac\n\n  if test no = \"$lt_cv_dlopen\"; then\n    enable_dlopen=no\n  else\n    enable_dlopen=yes\n  fi\n\n  case $lt_cv_dlopen in\n  dlopen)\n    save_CPPFLAGS=$CPPFLAGS\n    test yes = \"$ac_cv_header_dlfcn_h\" && CPPFLAGS=\"$CPPFLAGS -DHAVE_DLFCN_H\"\n\n    save_LDFLAGS=$LDFLAGS\n    wl=$lt_prog_compiler_wl eval LDFLAGS=\\\"\\$LDFLAGS $export_dynamic_flag_spec\\\"\n\n    save_LIBS=$LIBS\n    LIBS=\"$lt_cv_dlopen_libs $LIBS\"\n\n    AC_CACHE_CHECK([whether a program can dlopen itself],\n\t  lt_cv_dlopen_self, [dnl\n\t  _LT_TRY_DLOPEN_SELF(\n\t    lt_cv_dlopen_self=yes, lt_cv_dlopen_self=yes,\n\t    lt_cv_dlopen_self=no, lt_cv_dlopen_self=cross)\n    ])\n\n    if test yes = \"$lt_cv_dlopen_self\"; then\n      wl=$lt_prog_compiler_wl eval LDFLAGS=\\\"\\$LDFLAGS $lt_prog_compiler_static\\\"\n      AC_CACHE_CHECK([whether a statically linked program can dlopen itself],\n\t  lt_cv_dlopen_self_static, [dnl\n\t  _LT_TRY_DLOPEN_SELF(\n\t    lt_cv_dlopen_self_static=yes, lt_cv_dlopen_self_static=yes,\n\t    lt_cv_dlopen_self_static=no,  lt_cv_dlopen_self_static=cross)\n      ])\n    fi\n\n    CPPFLAGS=$save_CPPFLAGS\n    LDFLAGS=$save_LDFLAGS\n    LIBS=$save_LIBS\n    ;;\n  esac\n\n  case $lt_cv_dlopen_self in\n  yes|no) enable_dlopen_self=$lt_cv_dlopen_self ;;\n  *) enable_dlopen_self=unknown ;;\n  esac\n\n  case $lt_cv_dlopen_self_static in\n  yes|no) enable_dlopen_self_static=$lt_cv_dlopen_self_static ;;\n  *) enable_dlopen_self_static=unknown ;;\n  esac\nfi\n_LT_DECL([dlopen_support], [enable_dlopen], [0],\n\t [Whether dlopen is supported])\n_LT_DECL([dlopen_self], [enable_dlopen_self], [0],\n\t [Whether dlopen of programs is supported])\n_LT_DECL([dlopen_self_static], [enable_dlopen_self_static], [0],\n\t [Whether dlopen of statically linked programs is supported])\n])# LT_SYS_DLOPEN_SELF\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_DLOPEN_SELF], [LT_SYS_DLOPEN_SELF])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_DLOPEN_SELF], [])\n\n\n# _LT_COMPILER_C_O([TAGNAME])\n# ---------------------------\n# Check to see if options -c and -o are simultaneously supported by compiler.\n# This macro does not hard code the compiler like AC_PROG_CC_C_O.\nm4_defun([_LT_COMPILER_C_O],\n[m4_require([_LT_DECL_SED])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_TAG_COMPILER])dnl\nAC_CACHE_CHECK([if $compiler supports -c -o file.$ac_objext],\n  [_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)],\n  [_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)=no\n   $RM -r conftest 2>/dev/null\n   mkdir conftest\n   cd conftest\n   mkdir out\n   echo \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n\n   lt_compiler_flag=\"-o out/conftest2.$ac_objext\"\n   # Insert the option either (1) after the last *FLAGS variable, or\n   # (2) before a word containing \"conftest.\", or (3) at the end.\n   # Note that $ac_compile itself does not contain backslashes and begins\n   # with a dollar sign (not a hyphen), so the echo should work correctly.\n   lt_compile=`echo \"$ac_compile\" | $SED \\\n   -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n   -e 's: [[^ ]]*conftest\\.: $lt_compiler_flag&:; t' \\\n   -e 's:$: $lt_compiler_flag:'`\n   (eval echo \"\\\"\\$as_me:$LINENO: $lt_compile\\\"\" >&AS_MESSAGE_LOG_FD)\n   (eval \"$lt_compile\" 2>out/conftest.err)\n   ac_status=$?\n   cat out/conftest.err >&AS_MESSAGE_LOG_FD\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&AS_MESSAGE_LOG_FD\n   if (exit $ac_status) && test -s out/conftest2.$ac_objext\n   then\n     # The compiler can only warn and ignore the option if not recognized\n     # So say no if there are warnings\n     $ECHO \"$_lt_compiler_boilerplate\" | $SED '/^$/d' > out/conftest.exp\n     $SED '/^$/d; /^ *+/d' out/conftest.err >out/conftest.er2\n     if test ! -s out/conftest.er2 || diff out/conftest.exp out/conftest.er2 >/dev/null; then\n       _LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)=yes\n     fi\n   fi\n   chmod u+w . 2>&AS_MESSAGE_LOG_FD\n   $RM conftest*\n   # SGI C++ compiler will create directory out/ii_files/ for\n   # template instantiation\n   test -d out/ii_files && $RM out/ii_files/* && rmdir out/ii_files\n   $RM out/* && rmdir out\n   cd ..\n   $RM -r conftest\n   $RM conftest*\n])\n_LT_TAGDECL([compiler_c_o], [lt_cv_prog_compiler_c_o], [1],\n\t[Does compiler simultaneously support -c and -o options?])\n])# _LT_COMPILER_C_O\n\n\n# _LT_COMPILER_FILE_LOCKS([TAGNAME])\n# ----------------------------------\n# Check to see if we can do hard links to lock some files if needed\nm4_defun([_LT_COMPILER_FILE_LOCKS],\n[m4_require([_LT_ENABLE_LOCK])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\n_LT_COMPILER_C_O([$1])\n\nhard_links=nottested\nif test no = \"$_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)\" && test no != \"$need_locks\"; then\n  # do not overwrite the value of need_locks provided by the user\n  AC_MSG_CHECKING([if we can lock with hard links])\n  hard_links=yes\n  $RM conftest*\n  ln conftest.a conftest.b 2>/dev/null && hard_links=no\n  touch conftest.a\n  ln conftest.a conftest.b 2>&5 || hard_links=no\n  ln conftest.a conftest.b 2>/dev/null && hard_links=no\n  AC_MSG_RESULT([$hard_links])\n  if test no = \"$hard_links\"; then\n    AC_MSG_WARN(['$CC' does not support '-c -o', so 'make -j' may be unsafe])\n    need_locks=warn\n  fi\nelse\n  need_locks=no\nfi\n_LT_DECL([], [need_locks], [1], [Must we lock files when doing compilation?])\n])# _LT_COMPILER_FILE_LOCKS\n\n\n# _LT_CHECK_OBJDIR\n# ----------------\nm4_defun([_LT_CHECK_OBJDIR],\n[AC_CACHE_CHECK([for objdir], [lt_cv_objdir],\n[rm -f .libs 2>/dev/null\nmkdir .libs 2>/dev/null\nif test -d .libs; then\n  lt_cv_objdir=.libs\nelse\n  # MS-DOS does not allow filenames that begin with a dot.\n  lt_cv_objdir=_libs\nfi\nrmdir .libs 2>/dev/null])\nobjdir=$lt_cv_objdir\n_LT_DECL([], [objdir], [0],\n         [The name of the directory that contains temporary libtool files])dnl\nm4_pattern_allow([LT_OBJDIR])dnl\nAC_DEFINE_UNQUOTED([LT_OBJDIR], \"$lt_cv_objdir/\",\n  [Define to the sub-directory where libtool stores uninstalled libraries.])\n])# _LT_CHECK_OBJDIR\n\n\n# _LT_LINKER_HARDCODE_LIBPATH([TAGNAME])\n# --------------------------------------\n# Check hardcoding attributes.\nm4_defun([_LT_LINKER_HARDCODE_LIBPATH],\n[AC_MSG_CHECKING([how to hardcode library paths into programs])\n_LT_TAGVAR(hardcode_action, $1)=\nif test -n \"$_LT_TAGVAR(hardcode_libdir_flag_spec, $1)\" ||\n   test -n \"$_LT_TAGVAR(runpath_var, $1)\" ||\n   test yes = \"$_LT_TAGVAR(hardcode_automatic, $1)\"; then\n\n  # We can hardcode non-existent directories.\n  if test no != \"$_LT_TAGVAR(hardcode_direct, $1)\" &&\n     # If the only mechanism to avoid hardcoding is shlibpath_var, we\n     # have to relink, otherwise we might link with an installed library\n     # when we should be linking with a yet-to-be-installed one\n     ## test no != \"$_LT_TAGVAR(hardcode_shlibpath_var, $1)\" &&\n     test no != \"$_LT_TAGVAR(hardcode_minus_L, $1)\"; then\n    # Linking always hardcodes the temporary library directory.\n    _LT_TAGVAR(hardcode_action, $1)=relink\n  else\n    # We can link without hardcoding, and we can hardcode nonexisting dirs.\n    _LT_TAGVAR(hardcode_action, $1)=immediate\n  fi\nelse\n  # We cannot hardcode anything, or else we can only hardcode existing\n  # directories.\n  _LT_TAGVAR(hardcode_action, $1)=unsupported\nfi\nAC_MSG_RESULT([$_LT_TAGVAR(hardcode_action, $1)])\n\nif test relink = \"$_LT_TAGVAR(hardcode_action, $1)\" ||\n   test yes = \"$_LT_TAGVAR(inherit_rpath, $1)\"; then\n  # Fast installation is not supported\n  enable_fast_install=no\nelif test yes = \"$shlibpath_overrides_runpath\" ||\n     test no = \"$enable_shared\"; then\n  # Fast installation is not necessary\n  enable_fast_install=needless\nfi\n_LT_TAGDECL([], [hardcode_action], [0],\n    [How to hardcode a shared library path into an executable])\n])# _LT_LINKER_HARDCODE_LIBPATH\n\n\n# _LT_CMD_STRIPLIB\n# ----------------\nm4_defun([_LT_CMD_STRIPLIB],\n[m4_require([_LT_DECL_EGREP])\nstriplib=\nold_striplib=\nAC_MSG_CHECKING([whether stripping libraries is possible])\nif test -n \"$STRIP\" && $STRIP -V 2>&1 | $GREP \"GNU strip\" >/dev/null; then\n  test -z \"$old_striplib\" && old_striplib=\"$STRIP --strip-debug\"\n  test -z \"$striplib\" && striplib=\"$STRIP --strip-unneeded\"\n  AC_MSG_RESULT([yes])\nelse\n# FIXME - insert some real tests, host_os isn't really good enough\n  case $host_os in\n  darwin*)\n    if test -n \"$STRIP\"; then\n      striplib=\"$STRIP -x\"\n      old_striplib=\"$STRIP -S\"\n      AC_MSG_RESULT([yes])\n    else\n      AC_MSG_RESULT([no])\n    fi\n    ;;\n  *)\n    AC_MSG_RESULT([no])\n    ;;\n  esac\nfi\n_LT_DECL([], [old_striplib], [1], [Commands to strip libraries])\n_LT_DECL([], [striplib], [1])\n])# _LT_CMD_STRIPLIB\n\n\n# _LT_PREPARE_MUNGE_PATH_LIST\n# ---------------------------\n# Make sure func_munge_path_list() is defined correctly.\nm4_defun([_LT_PREPARE_MUNGE_PATH_LIST],\n[[# func_munge_path_list VARIABLE PATH\n# -----------------------------------\n# VARIABLE is name of variable containing _space_ separated list of\n# directories to be munged by the contents of PATH, which is string\n# having a format:\n# \"DIR[:DIR]:\"\n#       string \"DIR[ DIR]\" will be prepended to VARIABLE\n# \":DIR[:DIR]\"\n#       string \"DIR[ DIR]\" will be appended to VARIABLE\n# \"DIRP[:DIRP]::[DIRA:]DIRA\"\n#       string \"DIRP[ DIRP]\" will be prepended to VARIABLE and string\n#       \"DIRA[ DIRA]\" will be appended to VARIABLE\n# \"DIR[:DIR]\"\n#       VARIABLE will be replaced by \"DIR[ DIR]\"\nfunc_munge_path_list ()\n{\n    case x@S|@2 in\n    x)\n        ;;\n    *:)\n        eval @S|@1=\\\"`$ECHO @S|@2 | $SED 's/:/ /g'` \\@S|@@S|@1\\\"\n        ;;\n    x:*)\n        eval @S|@1=\\\"\\@S|@@S|@1 `$ECHO @S|@2 | $SED 's/:/ /g'`\\\"\n        ;;\n    *::*)\n        eval @S|@1=\\\"\\@S|@@S|@1\\ `$ECHO @S|@2 | $SED -e 's/.*:://' -e 's/:/ /g'`\\\"\n        eval @S|@1=\\\"`$ECHO @S|@2 | $SED -e 's/::.*//' -e 's/:/ /g'`\\ \\@S|@@S|@1\\\"\n        ;;\n    *)\n        eval @S|@1=\\\"`$ECHO @S|@2 | $SED 's/:/ /g'`\\\"\n        ;;\n    esac\n}\n]])# _LT_PREPARE_PATH_LIST\n\n\n# _LT_SYS_DYNAMIC_LINKER([TAG])\n# -----------------------------\n# PORTME Fill in your ld.so characteristics\nm4_defun([_LT_SYS_DYNAMIC_LINKER],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_OBJDUMP])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_CHECK_SHELL_FEATURES])dnl\nm4_require([_LT_PREPARE_MUNGE_PATH_LIST])dnl\nAC_MSG_CHECKING([dynamic linker characteristics])\nm4_if([$1],\n\t[], [\nif test yes = \"$GCC\"; then\n  case $host_os in\n    darwin*) lt_awk_arg='/^libraries:/,/LR/' ;;\n    *) lt_awk_arg='/^libraries:/' ;;\n  esac\n  case $host_os in\n    mingw* | cegcc*) lt_sed_strip_eq='s|=\\([[A-Za-z]]:\\)|\\1|g' ;;\n    *) lt_sed_strip_eq='s|=/|/|g' ;;\n  esac\n  lt_search_path_spec=`$CC -print-search-dirs | awk $lt_awk_arg | $SED -e \"s/^libraries://\" -e $lt_sed_strip_eq`\n  case $lt_search_path_spec in\n  *\\;*)\n    # if the path contains \";\" then we assume it to be the separator\n    # otherwise default to the standard path separator (i.e. \":\") - it is\n    # assumed that no part of a normal pathname contains \";\" but that should\n    # okay in the real world where \";\" in dirpaths is itself problematic.\n    lt_search_path_spec=`$ECHO \"$lt_search_path_spec\" | $SED 's/;/ /g'`\n    ;;\n  *)\n    lt_search_path_spec=`$ECHO \"$lt_search_path_spec\" | $SED \"s/$PATH_SEPARATOR/ /g\"`\n    ;;\n  esac\n  # Ok, now we have the path, separated by spaces, we can step through it\n  # and add multilib dir if necessary...\n  lt_tmp_lt_search_path_spec=\n  lt_multi_os_dir=/`$CC $CPPFLAGS $CFLAGS $LDFLAGS -print-multi-os-directory 2>/dev/null`\n  # ...but if some path component already ends with the multilib dir we assume\n  # that all is fine and trust -print-search-dirs as is (GCC 4.2? or newer).\n  case \"$lt_multi_os_dir; $lt_search_path_spec \" in\n  \"/; \"* | \"/.; \"* | \"/./; \"* | *\"$lt_multi_os_dir \"* | *\"$lt_multi_os_dir/ \"*)\n    lt_multi_os_dir=\n    ;;\n  esac\n  for lt_sys_path in $lt_search_path_spec; do\n    if test -d \"$lt_sys_path$lt_multi_os_dir\"; then\n      lt_tmp_lt_search_path_spec=\"$lt_tmp_lt_search_path_spec $lt_sys_path$lt_multi_os_dir\"\n    elif test -n \"$lt_multi_os_dir\"; then\n      test -d \"$lt_sys_path\" && \\\n\tlt_tmp_lt_search_path_spec=\"$lt_tmp_lt_search_path_spec $lt_sys_path\"\n    fi\n  done\n  lt_search_path_spec=`$ECHO \"$lt_tmp_lt_search_path_spec\" | awk '\nBEGIN {RS = \" \"; FS = \"/|\\n\";} {\n  lt_foo = \"\";\n  lt_count = 0;\n  for (lt_i = NF; lt_i > 0; lt_i--) {\n    if ($lt_i != \"\" && $lt_i != \".\") {\n      if ($lt_i == \"..\") {\n        lt_count++;\n      } else {\n        if (lt_count == 0) {\n          lt_foo = \"/\" $lt_i lt_foo;\n        } else {\n          lt_count--;\n        }\n      }\n    }\n  }\n  if (lt_foo != \"\") { lt_freq[[lt_foo]]++; }\n  if (lt_freq[[lt_foo]] == 1) { print lt_foo; }\n}'`\n  # AWK program above erroneously prepends '/' to C:/dos/paths\n  # for these hosts.\n  case $host_os in\n    mingw* | cegcc*) lt_search_path_spec=`$ECHO \"$lt_search_path_spec\" |\\\n      $SED 's|/\\([[A-Za-z]]:\\)|\\1|g'` ;;\n  esac\n  sys_lib_search_path_spec=`$ECHO \"$lt_search_path_spec\" | $lt_NL2SP`\nelse\n  sys_lib_search_path_spec=\"/lib /usr/lib /usr/local/lib\"\nfi])\nlibrary_names_spec=\nlibname_spec='lib$name'\nsoname_spec=\nshrext_cmds=.so\npostinstall_cmds=\npostuninstall_cmds=\nfinish_cmds=\nfinish_eval=\nshlibpath_var=\nshlibpath_overrides_runpath=unknown\nversion_type=none\ndynamic_linker=\"$host_os ld.so\"\nsys_lib_dlsearch_path_spec=\"/lib /usr/lib\"\nneed_lib_prefix=unknown\nhardcode_into_libs=no\n\n# when you set need_version to no, make sure it does not cause -set_version\n# flags to be left without arguments\nneed_version=unknown\n\nAC_ARG_VAR([LT_SYS_LIBRARY_PATH],\n[User-defined run-time library search path.])\n\ncase $host_os in\naix3*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='$libname$release$shared_ext$versuffix $libname.a'\n  shlibpath_var=LIBPATH\n\n  # AIX 3 has no versioning support, so we append a major version to the name.\n  soname_spec='$libname$release$shared_ext$major'\n  ;;\n\naix[[4-9]]*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  hardcode_into_libs=yes\n  if test ia64 = \"$host_cpu\"; then\n    # AIX 5 supports IA64\n    library_names_spec='$libname$release$shared_ext$major $libname$release$shared_ext$versuffix $libname$shared_ext'\n    shlibpath_var=LD_LIBRARY_PATH\n  else\n    # With GCC up to 2.95.x, collect2 would create an import file\n    # for dependence libraries.  The import file would start with\n    # the line '#! .'.  This would cause the generated library to\n    # depend on '.', always an invalid library.  This was fixed in\n    # development snapshots of GCC prior to 3.0.\n    case $host_os in\n      aix4 | aix4.[[01]] | aix4.[[01]].*)\n      if { echo '#if __GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ >= 97)'\n\t   echo ' yes '\n\t   echo '#endif'; } | $CC -E - | $GREP yes > /dev/null; then\n\t:\n      else\n\tcan_build_shared=no\n      fi\n      ;;\n    esac\n    # Using Import Files as archive members, it is possible to support\n    # filename-based versioning of shared library archives on AIX. While\n    # this would work for both with and without runtime linking, it will\n    # prevent static linking of such archives. So we do filename-based\n    # shared library versioning with .so extension only, which is used\n    # when both runtime linking and shared linking is enabled.\n    # Unfortunately, runtime linking may impact performance, so we do\n    # not want this to be the default eventually. Also, we use the\n    # versioned .so libs for executables only if there is the -brtl\n    # linker flag in LDFLAGS as well, or --with-aix-soname=svr4 only.\n    # To allow for filename-based versioning support, we need to create\n    # libNAME.so.V as an archive file, containing:\n    # *) an Import File, referring to the versioned filename of the\n    #    archive as well as the shared archive member, telling the\n    #    bitwidth (32 or 64) of that shared object, and providing the\n    #    list of exported symbols of that shared object, eventually\n    #    decorated with the 'weak' keyword\n    # *) the shared object with the F_LOADONLY flag set, to really avoid\n    #    it being seen by the linker.\n    # At run time we better use the real file rather than another symlink,\n    # but for link time we create the symlink libNAME.so -> libNAME.so.V\n\n    case $with_aix_soname,$aix_use_runtimelinking in\n    # AIX (on Power*) has no versioning support, so currently we cannot hardcode correct\n    # soname into executable. Probably we can add versioning support to\n    # collect2, so additional links can be useful in future.\n    aix,yes) # traditional libtool\n      dynamic_linker='AIX unversionable lib.so'\n      # If using run time linking (on AIX 4.2 or later) use lib<name>.so\n      # instead of lib<name>.a to let people know that these are not\n      # typical AIX shared libraries.\n      library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n      ;;\n    aix,no) # traditional AIX only\n      dynamic_linker='AIX lib.a[(]lib.so.V[)]'\n      # We preserve .a as extension for shared libraries through AIX4.2\n      # and later when we are not doing run time linking.\n      library_names_spec='$libname$release.a $libname.a'\n      soname_spec='$libname$release$shared_ext$major'\n      ;;\n    svr4,*) # full svr4 only\n      dynamic_linker=\"AIX lib.so.V[(]$shared_archive_member_spec.o[)]\"\n      library_names_spec='$libname$release$shared_ext$major $libname$shared_ext'\n      # We do not specify a path in Import Files, so LIBPATH fires.\n      shlibpath_overrides_runpath=yes\n      ;;\n    *,yes) # both, prefer svr4\n      dynamic_linker=\"AIX lib.so.V[(]$shared_archive_member_spec.o[)], lib.a[(]lib.so.V[)]\"\n      library_names_spec='$libname$release$shared_ext$major $libname$shared_ext'\n      # unpreferred sharedlib libNAME.a needs extra handling\n      postinstall_cmds='test -n \"$linkname\" || linkname=\"$realname\"~func_stripname \"\" \".so\" \"$linkname\"~$install_shared_prog \"$dir/$func_stripname_result.$libext\" \"$destdir/$func_stripname_result.$libext\"~test -z \"$tstripme\" || test -z \"$striplib\" || $striplib \"$destdir/$func_stripname_result.$libext\"'\n      postuninstall_cmds='for n in $library_names $old_library; do :; done~func_stripname \"\" \".so\" \"$n\"~test \"$func_stripname_result\" = \"$n\" || func_append rmfiles \" $odir/$func_stripname_result.$libext\"'\n      # We do not specify a path in Import Files, so LIBPATH fires.\n      shlibpath_overrides_runpath=yes\n      ;;\n    *,no) # both, prefer aix\n      dynamic_linker=\"AIX lib.a[(]lib.so.V[)], lib.so.V[(]$shared_archive_member_spec.o[)]\"\n      library_names_spec='$libname$release.a $libname.a'\n      soname_spec='$libname$release$shared_ext$major'\n      # unpreferred sharedlib libNAME.so.V and symlink libNAME.so need extra handling\n      postinstall_cmds='test -z \"$dlname\" || $install_shared_prog $dir/$dlname $destdir/$dlname~test -z \"$tstripme\" || test -z \"$striplib\" || $striplib $destdir/$dlname~test -n \"$linkname\" || linkname=$realname~func_stripname \"\" \".a\" \"$linkname\"~(cd \"$destdir\" && $LN_S -f $dlname $func_stripname_result.so)'\n      postuninstall_cmds='test -z \"$dlname\" || func_append rmfiles \" $odir/$dlname\"~for n in $old_library $library_names; do :; done~func_stripname \"\" \".a\" \"$n\"~func_append rmfiles \" $odir/$func_stripname_result.so\"'\n      ;;\n    esac\n    shlibpath_var=LIBPATH\n  fi\n  ;;\n\namigaos*)\n  case $host_cpu in\n  powerpc)\n    # Since July 2007 AmigaOS4 officially supports .so libraries.\n    # When compiling the executable, add -use-dynld -Lsobjs: to the compileline.\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n    ;;\n  m68k)\n    library_names_spec='$libname.ixlibrary $libname.a'\n    # Create ${libname}_ixlibrary.a entries in /sys/libs.\n    finish_eval='for lib in `ls $libdir/*.ixlibrary 2>/dev/null`; do libname=`func_echo_all \"$lib\" | $SED '\\''s%^.*/\\([[^/]]*\\)\\.ixlibrary$%\\1%'\\''`; $RM /sys/libs/${libname}_ixlibrary.a; $show \"cd /sys/libs && $LN_S $lib ${libname}_ixlibrary.a\"; cd /sys/libs && $LN_S $lib ${libname}_ixlibrary.a || exit 1; done'\n    ;;\n  esac\n  ;;\n\nbeos*)\n  library_names_spec='$libname$shared_ext'\n  dynamic_linker=\"$host_os ld.so\"\n  shlibpath_var=LIBRARY_PATH\n  ;;\n\nbsdi[[45]]*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  sys_lib_search_path_spec=\"/shlib /usr/lib /usr/X11/lib /usr/contrib/lib /lib /usr/local/lib\"\n  sys_lib_dlsearch_path_spec=\"/shlib /usr/lib /usr/local/lib\"\n  # the default ld.so.conf also contains /usr/contrib/lib and\n  # /usr/X11R6/lib (/usr/X11 is a link to /usr/X11R6), but let us allow\n  # libtool to hard-code these into programs\n  ;;\n\ncygwin* | mingw* | pw32* | cegcc*)\n  version_type=windows\n  shrext_cmds=.dll\n  need_version=no\n  need_lib_prefix=no\n\n  case $GCC,$cc_basename in\n  yes,*)\n    # gcc\n    library_names_spec='$libname.dll.a'\n    # DLL is installed to $(libdir)/../bin by postinstall_cmds\n    postinstall_cmds='base_file=`basename \\$file`~\n      dlpath=`$SHELL 2>&1 -c '\\''. $dir/'\\''\\$base_file'\\''i; echo \\$dlname'\\''`~\n      dldir=$destdir/`dirname \\$dlpath`~\n      test -d \\$dldir || mkdir -p \\$dldir~\n      $install_prog $dir/$dlname \\$dldir/$dlname~\n      chmod a+x \\$dldir/$dlname~\n      if test -n '\\''$stripme'\\'' && test -n '\\''$striplib'\\''; then\n        eval '\\''$striplib \\$dldir/$dlname'\\'' || exit \\$?;\n      fi'\n    postuninstall_cmds='dldll=`$SHELL 2>&1 -c '\\''. $file; echo \\$dlname'\\''`~\n      dlpath=$dir/\\$dldll~\n       $RM \\$dlpath'\n    shlibpath_overrides_runpath=yes\n\n    case $host_os in\n    cygwin*)\n      # Cygwin DLLs use 'cyg' prefix rather than 'lib'\n      soname_spec='`echo $libname | sed -e 's/^lib/cyg/'``echo $release | $SED -e 's/[[.]]/-/g'`$versuffix$shared_ext'\nm4_if([$1], [],[\n      sys_lib_search_path_spec=\"$sys_lib_search_path_spec /usr/lib/w32api\"])\n      ;;\n    mingw* | cegcc*)\n      # MinGW DLLs use traditional 'lib' prefix\n      soname_spec='$libname`echo $release | $SED -e 's/[[.]]/-/g'`$versuffix$shared_ext'\n      ;;\n    pw32*)\n      # pw32 DLLs use 'pw' prefix rather than 'lib'\n      library_names_spec='`echo $libname | sed -e 's/^lib/pw/'``echo $release | $SED -e 's/[[.]]/-/g'`$versuffix$shared_ext'\n      ;;\n    esac\n    dynamic_linker='Win32 ld.exe'\n    ;;\n\n  *,cl*)\n    # Native MSVC\n    libname_spec='$name'\n    soname_spec='$libname`echo $release | $SED -e 's/[[.]]/-/g'`$versuffix$shared_ext'\n    library_names_spec='$libname.dll.lib'\n\n    case $build_os in\n    mingw*)\n      sys_lib_search_path_spec=\n      lt_save_ifs=$IFS\n      IFS=';'\n      for lt_path in $LIB\n      do\n        IFS=$lt_save_ifs\n        # Let DOS variable expansion print the short 8.3 style file name.\n        lt_path=`cd \"$lt_path\" 2>/dev/null && cmd //C \"for %i in (\".\") do @echo %~si\"`\n        sys_lib_search_path_spec=\"$sys_lib_search_path_spec $lt_path\"\n      done\n      IFS=$lt_save_ifs\n      # Convert to MSYS style.\n      sys_lib_search_path_spec=`$ECHO \"$sys_lib_search_path_spec\" | sed -e 's|\\\\\\\\|/|g' -e 's| \\\\([[a-zA-Z]]\\\\):| /\\\\1|g' -e 's|^ ||'`\n      ;;\n    cygwin*)\n      # Convert to unix form, then to dos form, then back to unix form\n      # but this time dos style (no spaces!) so that the unix form looks\n      # like /cygdrive/c/PROGRA~1:/cygdr...\n      sys_lib_search_path_spec=`cygpath --path --unix \"$LIB\"`\n      sys_lib_search_path_spec=`cygpath --path --dos \"$sys_lib_search_path_spec\" 2>/dev/null`\n      sys_lib_search_path_spec=`cygpath --path --unix \"$sys_lib_search_path_spec\" | $SED -e \"s/$PATH_SEPARATOR/ /g\"`\n      ;;\n    *)\n      sys_lib_search_path_spec=$LIB\n      if $ECHO \"$sys_lib_search_path_spec\" | [$GREP ';[c-zC-Z]:/' >/dev/null]; then\n        # It is most probably a Windows format PATH.\n        sys_lib_search_path_spec=`$ECHO \"$sys_lib_search_path_spec\" | $SED -e 's/;/ /g'`\n      else\n        sys_lib_search_path_spec=`$ECHO \"$sys_lib_search_path_spec\" | $SED -e \"s/$PATH_SEPARATOR/ /g\"`\n      fi\n      # FIXME: find the short name or the path components, as spaces are\n      # common. (e.g. \"Program Files\" -> \"PROGRA~1\")\n      ;;\n    esac\n\n    # DLL is installed to $(libdir)/../bin by postinstall_cmds\n    postinstall_cmds='base_file=`basename \\$file`~\n      dlpath=`$SHELL 2>&1 -c '\\''. $dir/'\\''\\$base_file'\\''i; echo \\$dlname'\\''`~\n      dldir=$destdir/`dirname \\$dlpath`~\n      test -d \\$dldir || mkdir -p \\$dldir~\n      $install_prog $dir/$dlname \\$dldir/$dlname'\n    postuninstall_cmds='dldll=`$SHELL 2>&1 -c '\\''. $file; echo \\$dlname'\\''`~\n      dlpath=$dir/\\$dldll~\n       $RM \\$dlpath'\n    shlibpath_overrides_runpath=yes\n    dynamic_linker='Win32 link.exe'\n    ;;\n\n  *)\n    # Assume MSVC wrapper\n    library_names_spec='$libname`echo $release | $SED -e 's/[[.]]/-/g'`$versuffix$shared_ext $libname.lib'\n    dynamic_linker='Win32 ld.exe'\n    ;;\n  esac\n  # FIXME: first we should search . and the directory the executable is in\n  shlibpath_var=PATH\n  ;;\n\ndarwin* | rhapsody*)\n  dynamic_linker=\"$host_os dyld\"\n  version_type=darwin\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$major$shared_ext $libname$shared_ext'\n  soname_spec='$libname$release$major$shared_ext'\n  shlibpath_overrides_runpath=yes\n  shlibpath_var=DYLD_LIBRARY_PATH\n  shrext_cmds='`test .$module = .yes && echo .so || echo .dylib`'\nm4_if([$1], [],[\n  sys_lib_search_path_spec=\"$sys_lib_search_path_spec /usr/local/lib\"])\n  sys_lib_dlsearch_path_spec='/usr/local/lib /lib /usr/lib'\n  ;;\n\ndgux*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  ;;\n\nfreebsd* | dragonfly*)\n  # DragonFly does not have aout.  When/if they implement a new\n  # versioning mechanism, adjust this.\n  if test -x /usr/bin/objformat; then\n    objformat=`/usr/bin/objformat`\n  else\n    case $host_os in\n    freebsd[[23]].*) objformat=aout ;;\n    *) objformat=elf ;;\n    esac\n  fi\n  version_type=freebsd-$objformat\n  case $version_type in\n    freebsd-elf*)\n      library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n      soname_spec='$libname$release$shared_ext$major'\n      need_version=no\n      need_lib_prefix=no\n      ;;\n    freebsd-*)\n      library_names_spec='$libname$release$shared_ext$versuffix $libname$shared_ext$versuffix'\n      need_version=yes\n      ;;\n  esac\n  shlibpath_var=LD_LIBRARY_PATH\n  case $host_os in\n  freebsd2.*)\n    shlibpath_overrides_runpath=yes\n    ;;\n  freebsd3.[[01]]* | freebsdelf3.[[01]]*)\n    shlibpath_overrides_runpath=yes\n    hardcode_into_libs=yes\n    ;;\n  freebsd3.[[2-9]]* | freebsdelf3.[[2-9]]* | \\\n  freebsd4.[[0-5]] | freebsdelf4.[[0-5]] | freebsd4.1.1 | freebsdelf4.1.1)\n    shlibpath_overrides_runpath=no\n    hardcode_into_libs=yes\n    ;;\n  *) # from 4.6 on, and DragonFly\n    shlibpath_overrides_runpath=yes\n    hardcode_into_libs=yes\n    ;;\n  esac\n  ;;\n\nhaiku*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  dynamic_linker=\"$host_os runtime_loader\"\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  sys_lib_dlsearch_path_spec='/boot/home/config/lib /boot/common/lib /boot/system/lib'\n  hardcode_into_libs=yes\n  ;;\n\nhpux9* | hpux10* | hpux11*)\n  # Give a soname corresponding to the major version so that dld.sl refuses to\n  # link against other versions.\n  version_type=sunos\n  need_lib_prefix=no\n  need_version=no\n  case $host_cpu in\n  ia64*)\n    shrext_cmds='.so'\n    hardcode_into_libs=yes\n    dynamic_linker=\"$host_os dld.so\"\n    shlibpath_var=LD_LIBRARY_PATH\n    shlibpath_overrides_runpath=yes # Unless +noenvvar is specified.\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n    soname_spec='$libname$release$shared_ext$major'\n    if test 32 = \"$HPUX_IA64_MODE\"; then\n      sys_lib_search_path_spec=\"/usr/lib/hpux32 /usr/local/lib/hpux32 /usr/local/lib\"\n      sys_lib_dlsearch_path_spec=/usr/lib/hpux32\n    else\n      sys_lib_search_path_spec=\"/usr/lib/hpux64 /usr/local/lib/hpux64\"\n      sys_lib_dlsearch_path_spec=/usr/lib/hpux64\n    fi\n    ;;\n  hppa*64*)\n    shrext_cmds='.sl'\n    hardcode_into_libs=yes\n    dynamic_linker=\"$host_os dld.sl\"\n    shlibpath_var=LD_LIBRARY_PATH # How should we handle SHLIB_PATH\n    shlibpath_overrides_runpath=yes # Unless +noenvvar is specified.\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n    soname_spec='$libname$release$shared_ext$major'\n    sys_lib_search_path_spec=\"/usr/lib/pa20_64 /usr/ccs/lib/pa20_64\"\n    sys_lib_dlsearch_path_spec=$sys_lib_search_path_spec\n    ;;\n  *)\n    shrext_cmds='.sl'\n    dynamic_linker=\"$host_os dld.sl\"\n    shlibpath_var=SHLIB_PATH\n    shlibpath_overrides_runpath=no # +s is required to enable SHLIB_PATH\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n    soname_spec='$libname$release$shared_ext$major'\n    ;;\n  esac\n  # HP-UX runs *really* slowly unless shared libraries are mode 555, ...\n  postinstall_cmds='chmod 555 $lib'\n  # or fails outright, so override atomically:\n  install_override_mode=555\n  ;;\n\ninterix[[3-9]]*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  dynamic_linker='Interix 3.x ld.so.1 (PE, like ELF)'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  ;;\n\nirix5* | irix6* | nonstopux*)\n  case $host_os in\n    nonstopux*) version_type=nonstopux ;;\n    *)\n\tif test yes = \"$lt_cv_prog_gnu_ld\"; then\n\t\tversion_type=linux # correct to gnu/linux during the next big refactor\n\telse\n\t\tversion_type=irix\n\tfi ;;\n  esac\n  need_lib_prefix=no\n  need_version=no\n  soname_spec='$libname$release$shared_ext$major'\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$release$shared_ext $libname$shared_ext'\n  case $host_os in\n  irix5* | nonstopux*)\n    libsuff= shlibsuff=\n    ;;\n  *)\n    case $LD in # libtool.m4 will add one of these switches to LD\n    *-32|*\"-32 \"|*-melf32bsmip|*\"-melf32bsmip \")\n      libsuff= shlibsuff= libmagic=32-bit;;\n    *-n32|*\"-n32 \"|*-melf32bmipn32|*\"-melf32bmipn32 \")\n      libsuff=32 shlibsuff=N32 libmagic=N32;;\n    *-64|*\"-64 \"|*-melf64bmip|*\"-melf64bmip \")\n      libsuff=64 shlibsuff=64 libmagic=64-bit;;\n    *) libsuff= shlibsuff= libmagic=never-match;;\n    esac\n    ;;\n  esac\n  shlibpath_var=LD_LIBRARY${shlibsuff}_PATH\n  shlibpath_overrides_runpath=no\n  sys_lib_search_path_spec=\"/usr/lib$libsuff /lib$libsuff /usr/local/lib$libsuff\"\n  sys_lib_dlsearch_path_spec=\"/usr/lib$libsuff /lib$libsuff\"\n  hardcode_into_libs=yes\n  ;;\n\n# No shared lib support for Linux oldld, aout, or coff.\nlinux*oldld* | linux*aout* | linux*coff*)\n  dynamic_linker=no\n  ;;\n\nlinux*android*)\n  version_type=none # Android doesn't support versioned libraries.\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext'\n  soname_spec='$libname$release$shared_ext'\n  finish_cmds=\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n\n  # This implies no fast_install, which is unacceptable.\n  # Some rework will be needed to allow for fast_install\n  # before this can be enabled.\n  hardcode_into_libs=yes\n\n  dynamic_linker='Android linker'\n  # Don't embed -rpath directories since the linker doesn't support them.\n  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n  ;;\n\n# This must be glibc/ELF.\nlinux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig -n $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n\n  # Some binutils ld are patched to set DT_RUNPATH\n  AC_CACHE_VAL([lt_cv_shlibpath_overrides_runpath],\n    [lt_cv_shlibpath_overrides_runpath=no\n    save_LDFLAGS=$LDFLAGS\n    save_libdir=$libdir\n    eval \"libdir=/foo; wl=\\\"$_LT_TAGVAR(lt_prog_compiler_wl, $1)\\\"; \\\n\t LDFLAGS=\\\"\\$LDFLAGS $_LT_TAGVAR(hardcode_libdir_flag_spec, $1)\\\"\"\n    AC_LINK_IFELSE([AC_LANG_PROGRAM([],[])],\n      [AS_IF([ ($OBJDUMP -p conftest$ac_exeext) 2>/dev/null | grep \"RUNPATH.*$libdir\" >/dev/null],\n\t [lt_cv_shlibpath_overrides_runpath=yes])])\n    LDFLAGS=$save_LDFLAGS\n    libdir=$save_libdir\n    ])\n  shlibpath_overrides_runpath=$lt_cv_shlibpath_overrides_runpath\n\n  # This implies no fast_install, which is unacceptable.\n  # Some rework will be needed to allow for fast_install\n  # before this can be enabled.\n  hardcode_into_libs=yes\n\n  # Add ABI-specific directories to the system library path.\n  sys_lib_dlsearch_path_spec=\"/lib64 /usr/lib64 /lib /usr/lib\"\n\n  # Ideally, we could use ldconfig to report *all* directores which are\n  # searched for libraries, however this is still not possible.  Aside from not\n  # being certain /sbin/ldconfig is available, command\n  # 'ldconfig -N -X -v | grep ^/' on 64bit Fedora does not report /usr/lib64,\n  # even though it is searched at run-time.  Try to do the best guess by\n  # appending ld.so.conf contents (and includes) to the search path.\n  if test -f /etc/ld.so.conf; then\n    lt_ld_extra=`awk '/^include / { system(sprintf(\"cd /etc; cat %s 2>/dev/null\", \\[$]2)); skip = 1; } { if (!skip) print \\[$]0; skip = 0; }' < /etc/ld.so.conf | $SED -e 's/#.*//;/^[\t ]*hwcap[\t ]/d;s/[:,\t]/ /g;s/=[^=]*$//;s/=[^= ]* / /g;s/\"//g;/^$/d' | tr '\\n' ' '`\n    sys_lib_dlsearch_path_spec=\"$sys_lib_dlsearch_path_spec $lt_ld_extra\"\n  fi\n\n  # We used to test for /lib/ld.so.1 and disable shared libraries on\n  # powerpc, because MkLinux only supported shared libraries with the\n  # GNU dynamic linker.  Since this was broken with cross compilers,\n  # most powerpc-linux boxes support dynamic linking these days and\n  # people can always --disable-shared, the test was removed, and we\n  # assume the GNU/Linux dynamic linker is in use.\n  dynamic_linker='GNU/Linux ld.so'\n  ;;\n\nnetbsd*)\n  version_type=sunos\n  need_lib_prefix=no\n  need_version=no\n  if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$shared_ext$versuffix'\n    finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig -m $libdir'\n    dynamic_linker='NetBSD (a.out) ld.so'\n  else\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n    soname_spec='$libname$release$shared_ext$major'\n    dynamic_linker='NetBSD ld.elf_so'\n  fi\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  hardcode_into_libs=yes\n  ;;\n\nnewsos6)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  ;;\n\n*nto* | *qnx*)\n  version_type=qnx\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  dynamic_linker='ldqnx.so'\n  ;;\n\nopenbsd* | bitrig*)\n  version_type=sunos\n  sys_lib_dlsearch_path_spec=/usr/lib\n  need_lib_prefix=no\n  if test -z \"`echo __ELF__ | $CC -E - | $GREP __ELF__`\"; then\n    need_version=no\n  else\n    need_version=yes\n  fi\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$shared_ext$versuffix'\n  finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig -m $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  ;;\n\nos2*)\n  libname_spec='$name'\n  version_type=windows\n  shrext_cmds=.dll\n  need_version=no\n  need_lib_prefix=no\n  # OS/2 can only load a DLL with a base name of 8 characters or less.\n  soname_spec='`test -n \"$os2dllname\" && libname=\"$os2dllname\";\n    v=$($ECHO $release$versuffix | tr -d .-);\n    n=$($ECHO $libname | cut -b -$((8 - ${#v})) | tr . _);\n    $ECHO $n$v`$shared_ext'\n  library_names_spec='${libname}_dll.$libext'\n  dynamic_linker='OS/2 ld.exe'\n  shlibpath_var=BEGINLIBPATH\n  sys_lib_search_path_spec=\"/lib /usr/lib /usr/local/lib\"\n  sys_lib_dlsearch_path_spec=$sys_lib_search_path_spec\n  postinstall_cmds='base_file=`basename \\$file`~\n    dlpath=`$SHELL 2>&1 -c '\\''. $dir/'\\''\\$base_file'\\''i; $ECHO \\$dlname'\\''`~\n    dldir=$destdir/`dirname \\$dlpath`~\n    test -d \\$dldir || mkdir -p \\$dldir~\n    $install_prog $dir/$dlname \\$dldir/$dlname~\n    chmod a+x \\$dldir/$dlname~\n    if test -n '\\''$stripme'\\'' && test -n '\\''$striplib'\\''; then\n      eval '\\''$striplib \\$dldir/$dlname'\\'' || exit \\$?;\n    fi'\n  postuninstall_cmds='dldll=`$SHELL 2>&1 -c '\\''. $file; $ECHO \\$dlname'\\''`~\n    dlpath=$dir/\\$dldll~\n    $RM \\$dlpath'\n  ;;\n\nosf3* | osf4* | osf5*)\n  version_type=osf\n  need_lib_prefix=no\n  need_version=no\n  soname_spec='$libname$release$shared_ext$major'\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  shlibpath_var=LD_LIBRARY_PATH\n  sys_lib_search_path_spec=\"/usr/shlib /usr/ccs/lib /usr/lib/cmplrs/cc /usr/lib /usr/local/lib /var/shlib\"\n  sys_lib_dlsearch_path_spec=$sys_lib_search_path_spec\n  ;;\n\nrdos*)\n  dynamic_linker=no\n  ;;\n\nsolaris*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  hardcode_into_libs=yes\n  # ldd complains unless libraries are executable\n  postinstall_cmds='chmod +x $lib'\n  ;;\n\nsunos4*)\n  version_type=sunos\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$shared_ext$versuffix'\n  finish_cmds='PATH=\"\\$PATH:/usr/etc\" ldconfig $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  if test yes = \"$with_gnu_ld\"; then\n    need_lib_prefix=no\n  fi\n  need_version=yes\n  ;;\n\nsysv4 | sysv4.3*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  case $host_vendor in\n    sni)\n      shlibpath_overrides_runpath=no\n      need_lib_prefix=no\n      runpath_var=LD_RUN_PATH\n      ;;\n    siemens)\n      need_lib_prefix=no\n      ;;\n    motorola)\n      need_lib_prefix=no\n      need_version=no\n      shlibpath_overrides_runpath=no\n      sys_lib_search_path_spec='/lib /usr/lib /usr/ccs/lib'\n      ;;\n  esac\n  ;;\n\nsysv4*MP*)\n  if test -d /usr/nec; then\n    version_type=linux # correct to gnu/linux during the next big refactor\n    library_names_spec='$libname$shared_ext.$versuffix $libname$shared_ext.$major $libname$shared_ext'\n    soname_spec='$libname$shared_ext.$major'\n    shlibpath_var=LD_LIBRARY_PATH\n  fi\n  ;;\n\nsysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX* | sysv4*uw2*)\n  version_type=sco\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  hardcode_into_libs=yes\n  if test yes = \"$with_gnu_ld\"; then\n    sys_lib_search_path_spec='/usr/local/lib /usr/gnu/lib /usr/ccs/lib /usr/lib /lib'\n  else\n    sys_lib_search_path_spec='/usr/ccs/lib /usr/lib'\n    case $host_os in\n      sco3.2v5*)\n        sys_lib_search_path_spec=\"$sys_lib_search_path_spec /lib\"\n\t;;\n    esac\n  fi\n  sys_lib_dlsearch_path_spec='/usr/lib'\n  ;;\n\ntpf*)\n  # TPF is a cross-target only.  Preferred cross-host = GNU/Linux.\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  ;;\n\nuts4*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  ;;\n\n*)\n  dynamic_linker=no\n  ;;\nesac\nAC_MSG_RESULT([$dynamic_linker])\ntest no = \"$dynamic_linker\" && can_build_shared=no\n\nvariables_saved_for_relink=\"PATH $shlibpath_var $runpath_var\"\nif test yes = \"$GCC\"; then\n  variables_saved_for_relink=\"$variables_saved_for_relink GCC_EXEC_PREFIX COMPILER_PATH LIBRARY_PATH\"\nfi\n\nif test set = \"${lt_cv_sys_lib_search_path_spec+set}\"; then\n  sys_lib_search_path_spec=$lt_cv_sys_lib_search_path_spec\nfi\n\nif test set = \"${lt_cv_sys_lib_dlsearch_path_spec+set}\"; then\n  sys_lib_dlsearch_path_spec=$lt_cv_sys_lib_dlsearch_path_spec\nfi\n\n# remember unaugmented sys_lib_dlsearch_path content for libtool script decls...\nconfigure_time_dlsearch_path=$sys_lib_dlsearch_path_spec\n\n# ... but it needs LT_SYS_LIBRARY_PATH munging for other configure-time code\nfunc_munge_path_list sys_lib_dlsearch_path_spec \"$LT_SYS_LIBRARY_PATH\"\n\n# to be used as default LT_SYS_LIBRARY_PATH value in generated libtool\nconfigure_time_lt_sys_library_path=$LT_SYS_LIBRARY_PATH\n\n_LT_DECL([], [variables_saved_for_relink], [1],\n    [Variables whose values should be saved in libtool wrapper scripts and\n    restored at link time])\n_LT_DECL([], [need_lib_prefix], [0],\n    [Do we need the \"lib\" prefix for modules?])\n_LT_DECL([], [need_version], [0], [Do we need a version for libraries?])\n_LT_DECL([], [version_type], [0], [Library versioning type])\n_LT_DECL([], [runpath_var], [0],  [Shared library runtime path variable])\n_LT_DECL([], [shlibpath_var], [0],[Shared library path variable])\n_LT_DECL([], [shlibpath_overrides_runpath], [0],\n    [Is shlibpath searched before the hard-coded library search path?])\n_LT_DECL([], [libname_spec], [1], [Format of library name prefix])\n_LT_DECL([], [library_names_spec], [1],\n    [[List of archive names.  First name is the real one, the rest are links.\n    The last name is the one that the linker finds with -lNAME]])\n_LT_DECL([], [soname_spec], [1],\n    [[The coded name of the library, if different from the real name]])\n_LT_DECL([], [install_override_mode], [1],\n    [Permission mode override for installation of shared libraries])\n_LT_DECL([], [postinstall_cmds], [2],\n    [Command to use after installation of a shared archive])\n_LT_DECL([], [postuninstall_cmds], [2],\n    [Command to use after uninstallation of a shared archive])\n_LT_DECL([], [finish_cmds], [2],\n    [Commands used to finish a libtool library installation in a directory])\n_LT_DECL([], [finish_eval], [1],\n    [[As \"finish_cmds\", except a single script fragment to be evaled but\n    not shown]])\n_LT_DECL([], [hardcode_into_libs], [0],\n    [Whether we should hardcode library paths into libraries])\n_LT_DECL([], [sys_lib_search_path_spec], [2],\n    [Compile-time system search path for libraries])\n_LT_DECL([sys_lib_dlsearch_path_spec], [configure_time_dlsearch_path], [2],\n    [Detected run-time system search path for libraries])\n_LT_DECL([], [configure_time_lt_sys_library_path], [2],\n    [Explicit LT_SYS_LIBRARY_PATH set during ./configure time])\n])# _LT_SYS_DYNAMIC_LINKER\n\n\n# _LT_PATH_TOOL_PREFIX(TOOL)\n# --------------------------\n# find a file program that can recognize shared library\nAC_DEFUN([_LT_PATH_TOOL_PREFIX],\n[m4_require([_LT_DECL_EGREP])dnl\nAC_MSG_CHECKING([for $1])\nAC_CACHE_VAL(lt_cv_path_MAGIC_CMD,\n[case $MAGIC_CMD in\n[[\\\\/*] |  ?:[\\\\/]*])\n  lt_cv_path_MAGIC_CMD=$MAGIC_CMD # Let the user override the test with a path.\n  ;;\n*)\n  lt_save_MAGIC_CMD=$MAGIC_CMD\n  lt_save_ifs=$IFS; IFS=$PATH_SEPARATOR\ndnl $ac_dummy forces splitting on constant user-supplied paths.\ndnl POSIX.2 word splitting is done only on the output of word expansions,\ndnl not every word.  This closes a longstanding sh security hole.\n  ac_dummy=\"m4_if([$2], , $PATH, [$2])\"\n  for ac_dir in $ac_dummy; do\n    IFS=$lt_save_ifs\n    test -z \"$ac_dir\" && ac_dir=.\n    if test -f \"$ac_dir/$1\"; then\n      lt_cv_path_MAGIC_CMD=$ac_dir/\"$1\"\n      if test -n \"$file_magic_test_file\"; then\n\tcase $deplibs_check_method in\n\t\"file_magic \"*)\n\t  file_magic_regex=`expr \"$deplibs_check_method\" : \"file_magic \\(.*\\)\"`\n\t  MAGIC_CMD=$lt_cv_path_MAGIC_CMD\n\t  if eval $file_magic_cmd \\$file_magic_test_file 2> /dev/null |\n\t    $EGREP \"$file_magic_regex\" > /dev/null; then\n\t    :\n\t  else\n\t    cat <<_LT_EOF 1>&2\n\n*** Warning: the command libtool uses to detect shared libraries,\n*** $file_magic_cmd, produces output that libtool cannot recognize.\n*** The result is that libtool may fail to recognize shared libraries\n*** as such.  This will affect the creation of libtool libraries that\n*** depend on shared libraries, but programs linked with such libtool\n*** libraries will work regardless of this problem.  Nevertheless, you\n*** may want to report the problem to your system manager and/or to\n*** bug-libtool@gnu.org\n\n_LT_EOF\n\t  fi ;;\n\tesac\n      fi\n      break\n    fi\n  done\n  IFS=$lt_save_ifs\n  MAGIC_CMD=$lt_save_MAGIC_CMD\n  ;;\nesac])\nMAGIC_CMD=$lt_cv_path_MAGIC_CMD\nif test -n \"$MAGIC_CMD\"; then\n  AC_MSG_RESULT($MAGIC_CMD)\nelse\n  AC_MSG_RESULT(no)\nfi\n_LT_DECL([], [MAGIC_CMD], [0],\n\t [Used to examine libraries when file_magic_cmd begins with \"file\"])dnl\n])# _LT_PATH_TOOL_PREFIX\n\n# Old name:\nAU_ALIAS([AC_PATH_TOOL_PREFIX], [_LT_PATH_TOOL_PREFIX])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_PATH_TOOL_PREFIX], [])\n\n\n# _LT_PATH_MAGIC\n# --------------\n# find a file program that can recognize a shared library\nm4_defun([_LT_PATH_MAGIC],\n[_LT_PATH_TOOL_PREFIX(${ac_tool_prefix}file, /usr/bin$PATH_SEPARATOR$PATH)\nif test -z \"$lt_cv_path_MAGIC_CMD\"; then\n  if test -n \"$ac_tool_prefix\"; then\n    _LT_PATH_TOOL_PREFIX(file, /usr/bin$PATH_SEPARATOR$PATH)\n  else\n    MAGIC_CMD=:\n  fi\nfi\n])# _LT_PATH_MAGIC\n\n\n# LT_PATH_LD\n# ----------\n# find the pathname to the GNU or non-GNU linker\nAC_DEFUN([LT_PATH_LD],\n[AC_REQUIRE([AC_PROG_CC])dnl\nAC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_CANONICAL_BUILD])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_PROG_ECHO_BACKSLASH])dnl\n\nAC_ARG_WITH([gnu-ld],\n    [AS_HELP_STRING([--with-gnu-ld],\n\t[assume the C compiler uses GNU ld @<:@default=no@:>@])],\n    [test no = \"$withval\" || with_gnu_ld=yes],\n    [with_gnu_ld=no])dnl\n\nac_prog=ld\nif test yes = \"$GCC\"; then\n  # Check if gcc -print-prog-name=ld gives a path.\n  AC_MSG_CHECKING([for ld used by $CC])\n  case $host in\n  *-*-mingw*)\n    # gcc leaves a trailing carriage return, which upsets mingw\n    ac_prog=`($CC -print-prog-name=ld) 2>&5 | tr -d '\\015'` ;;\n  *)\n    ac_prog=`($CC -print-prog-name=ld) 2>&5` ;;\n  esac\n  case $ac_prog in\n    # Accept absolute paths.\n    [[\\\\/]]* | ?:[[\\\\/]]*)\n      re_direlt='/[[^/]][[^/]]*/\\.\\./'\n      # Canonicalize the pathname of ld\n      ac_prog=`$ECHO \"$ac_prog\"| $SED 's%\\\\\\\\%/%g'`\n      while $ECHO \"$ac_prog\" | $GREP \"$re_direlt\" > /dev/null 2>&1; do\n\tac_prog=`$ECHO $ac_prog| $SED \"s%$re_direlt%/%\"`\n      done\n      test -z \"$LD\" && LD=$ac_prog\n      ;;\n  \"\")\n    # If it fails, then pretend we aren't using GCC.\n    ac_prog=ld\n    ;;\n  *)\n    # If it is relative, then search for the first ld in PATH.\n    with_gnu_ld=unknown\n    ;;\n  esac\nelif test yes = \"$with_gnu_ld\"; then\n  AC_MSG_CHECKING([for GNU ld])\nelse\n  AC_MSG_CHECKING([for non-GNU ld])\nfi\nAC_CACHE_VAL(lt_cv_path_LD,\n[if test -z \"$LD\"; then\n  lt_save_ifs=$IFS; IFS=$PATH_SEPARATOR\n  for ac_dir in $PATH; do\n    IFS=$lt_save_ifs\n    test -z \"$ac_dir\" && ac_dir=.\n    if test -f \"$ac_dir/$ac_prog\" || test -f \"$ac_dir/$ac_prog$ac_exeext\"; then\n      lt_cv_path_LD=$ac_dir/$ac_prog\n      # Check to see if the program is GNU ld.  I'd rather use --version,\n      # but apparently some variants of GNU ld only accept -v.\n      # Break only if it was the GNU/non-GNU ld that we prefer.\n      case `\"$lt_cv_path_LD\" -v 2>&1 </dev/null` in\n      *GNU* | *'with BFD'*)\n\ttest no != \"$with_gnu_ld\" && break\n\t;;\n      *)\n\ttest yes != \"$with_gnu_ld\" && break\n\t;;\n      esac\n    fi\n  done\n  IFS=$lt_save_ifs\nelse\n  lt_cv_path_LD=$LD # Let the user override the test with a path.\nfi])\nLD=$lt_cv_path_LD\nif test -n \"$LD\"; then\n  AC_MSG_RESULT($LD)\nelse\n  AC_MSG_RESULT(no)\nfi\ntest -z \"$LD\" && AC_MSG_ERROR([no acceptable ld found in \\$PATH])\n_LT_PATH_LD_GNU\nAC_SUBST([LD])\n\n_LT_TAGDECL([], [LD], [1], [The linker used to build libraries])\n])# LT_PATH_LD\n\n# Old names:\nAU_ALIAS([AM_PROG_LD], [LT_PATH_LD])\nAU_ALIAS([AC_PROG_LD], [LT_PATH_LD])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AM_PROG_LD], [])\ndnl AC_DEFUN([AC_PROG_LD], [])\n\n\n# _LT_PATH_LD_GNU\n#- --------------\nm4_defun([_LT_PATH_LD_GNU],\n[AC_CACHE_CHECK([if the linker ($LD) is GNU ld], lt_cv_prog_gnu_ld,\n[# I'd rather use --version here, but apparently some GNU lds only accept -v.\ncase `$LD -v 2>&1 </dev/null` in\n*GNU* | *'with BFD'*)\n  lt_cv_prog_gnu_ld=yes\n  ;;\n*)\n  lt_cv_prog_gnu_ld=no\n  ;;\nesac])\nwith_gnu_ld=$lt_cv_prog_gnu_ld\n])# _LT_PATH_LD_GNU\n\n\n# _LT_CMD_RELOAD\n# --------------\n# find reload flag for linker\n#   -- PORTME Some linkers may need a different reload flag.\nm4_defun([_LT_CMD_RELOAD],\n[AC_CACHE_CHECK([for $LD option to reload object files],\n  lt_cv_ld_reload_flag,\n  [lt_cv_ld_reload_flag='-r'])\nreload_flag=$lt_cv_ld_reload_flag\ncase $reload_flag in\n\"\" | \" \"*) ;;\n*) reload_flag=\" $reload_flag\" ;;\nesac\nreload_cmds='$LD$reload_flag -o $output$reload_objs'\ncase $host_os in\n  cygwin* | mingw* | pw32* | cegcc*)\n    if test yes != \"$GCC\"; then\n      reload_cmds=false\n    fi\n    ;;\n  darwin*)\n    if test yes = \"$GCC\"; then\n      reload_cmds='$LTCC $LTCFLAGS -nostdlib $wl-r -o $output$reload_objs'\n    else\n      reload_cmds='$LD$reload_flag -o $output$reload_objs'\n    fi\n    ;;\nesac\n_LT_TAGDECL([], [reload_flag], [1], [How to create reloadable object files])dnl\n_LT_TAGDECL([], [reload_cmds], [2])dnl\n])# _LT_CMD_RELOAD\n\n\n# _LT_PATH_DD\n# -----------\n# find a working dd\nm4_defun([_LT_PATH_DD],\n[AC_CACHE_CHECK([for a working dd], [ac_cv_path_lt_DD],\n[printf 0123456789abcdef0123456789abcdef >conftest.i\ncat conftest.i conftest.i >conftest2.i\n: ${lt_DD:=$DD}\nAC_PATH_PROGS_FEATURE_CHECK([lt_DD], [dd],\n[if \"$ac_path_lt_DD\" bs=32 count=1 <conftest2.i >conftest.out 2>/dev/null; then\n  cmp -s conftest.i conftest.out \\\n  && ac_cv_path_lt_DD=\"$ac_path_lt_DD\" ac_path_lt_DD_found=:\nfi])\nrm -f conftest.i conftest2.i conftest.out])\n])# _LT_PATH_DD\n\n\n# _LT_CMD_TRUNCATE\n# ----------------\n# find command to truncate a binary pipe\nm4_defun([_LT_CMD_TRUNCATE],\n[m4_require([_LT_PATH_DD])\nAC_CACHE_CHECK([how to truncate binary pipes], [lt_cv_truncate_bin],\n[printf 0123456789abcdef0123456789abcdef >conftest.i\ncat conftest.i conftest.i >conftest2.i\nlt_cv_truncate_bin=\nif \"$ac_cv_path_lt_DD\" bs=32 count=1 <conftest2.i >conftest.out 2>/dev/null; then\n  cmp -s conftest.i conftest.out \\\n  && lt_cv_truncate_bin=\"$ac_cv_path_lt_DD bs=4096 count=1\"\nfi\nrm -f conftest.i conftest2.i conftest.out\ntest -z \"$lt_cv_truncate_bin\" && lt_cv_truncate_bin=\"$SED -e 4q\"])\n_LT_DECL([lt_truncate_bin], [lt_cv_truncate_bin], [1],\n  [Command to truncate a binary pipe])\n])# _LT_CMD_TRUNCATE\n\n\n# _LT_CHECK_MAGIC_METHOD\n# ----------------------\n# how to check for library dependencies\n#  -- PORTME fill in with the dynamic library characteristics\nm4_defun([_LT_CHECK_MAGIC_METHOD],\n[m4_require([_LT_DECL_EGREP])\nm4_require([_LT_DECL_OBJDUMP])\nAC_CACHE_CHECK([how to recognize dependent libraries],\nlt_cv_deplibs_check_method,\n[lt_cv_file_magic_cmd='$MAGIC_CMD'\nlt_cv_file_magic_test_file=\nlt_cv_deplibs_check_method='unknown'\n# Need to set the preceding variable on all platforms that support\n# interlibrary dependencies.\n# 'none' -- dependencies not supported.\n# 'unknown' -- same as none, but documents that we really don't know.\n# 'pass_all' -- all dependencies passed with no checks.\n# 'test_compile' -- check by making test program.\n# 'file_magic [[regex]]' -- check by looking for files in library path\n# that responds to the $file_magic_cmd with a given extended regex.\n# If you have 'file' or equivalent on your system and you're not sure\n# whether 'pass_all' will *always* work, you probably want this one.\n\ncase $host_os in\naix[[4-9]]*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nbeos*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nbsdi[[45]]*)\n  lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (shared object|dynamic lib)'\n  lt_cv_file_magic_cmd='/usr/bin/file -L'\n  lt_cv_file_magic_test_file=/shlib/libc.so\n  ;;\n\ncygwin*)\n  # func_win32_libid is a shell function defined in ltmain.sh\n  lt_cv_deplibs_check_method='file_magic ^x86 archive import|^x86 DLL'\n  lt_cv_file_magic_cmd='func_win32_libid'\n  ;;\n\nmingw* | pw32*)\n  # Base MSYS/MinGW do not provide the 'file' command needed by\n  # func_win32_libid shell function, so use a weaker test based on 'objdump',\n  # unless we find 'file', for example because we are cross-compiling.\n  if ( file / ) >/dev/null 2>&1; then\n    lt_cv_deplibs_check_method='file_magic ^x86 archive import|^x86 DLL'\n    lt_cv_file_magic_cmd='func_win32_libid'\n  else\n    # Keep this pattern in sync with the one in func_win32_libid.\n    lt_cv_deplibs_check_method='file_magic file format (pei*-i386(.*architecture: i386)?|pe-arm-wince|pe-x86-64)'\n    lt_cv_file_magic_cmd='$OBJDUMP -f'\n  fi\n  ;;\n\ncegcc*)\n  # use the weaker test based on 'objdump'. See mingw*.\n  lt_cv_deplibs_check_method='file_magic file format pe-arm-.*little(.*architecture: arm)?'\n  lt_cv_file_magic_cmd='$OBJDUMP -f'\n  ;;\n\ndarwin* | rhapsody*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nfreebsd* | dragonfly*)\n  if echo __ELF__ | $CC -E - | $GREP __ELF__ > /dev/null; then\n    case $host_cpu in\n    i*86 )\n      # Not sure whether the presence of OpenBSD here was a mistake.\n      # Let's accept both of them until this is cleared up.\n      lt_cv_deplibs_check_method='file_magic (FreeBSD|OpenBSD|DragonFly)/i[[3-9]]86 (compact )?demand paged shared library'\n      lt_cv_file_magic_cmd=/usr/bin/file\n      lt_cv_file_magic_test_file=`echo /usr/lib/libc.so.*`\n      ;;\n    esac\n  else\n    lt_cv_deplibs_check_method=pass_all\n  fi\n  ;;\n\nhaiku*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nhpux10.20* | hpux11*)\n  lt_cv_file_magic_cmd=/usr/bin/file\n  case $host_cpu in\n  ia64*)\n    lt_cv_deplibs_check_method='file_magic (s[[0-9]][[0-9]][[0-9]]|ELF-[[0-9]][[0-9]]) shared object file - IA64'\n    lt_cv_file_magic_test_file=/usr/lib/hpux32/libc.so\n    ;;\n  hppa*64*)\n    [lt_cv_deplibs_check_method='file_magic (s[0-9][0-9][0-9]|ELF[ -][0-9][0-9])(-bit)?( [LM]SB)? shared object( file)?[, -]* PA-RISC [0-9]\\.[0-9]']\n    lt_cv_file_magic_test_file=/usr/lib/pa20_64/libc.sl\n    ;;\n  *)\n    lt_cv_deplibs_check_method='file_magic (s[[0-9]][[0-9]][[0-9]]|PA-RISC[[0-9]]\\.[[0-9]]) shared library'\n    lt_cv_file_magic_test_file=/usr/lib/libc.sl\n    ;;\n  esac\n  ;;\n\ninterix[[3-9]]*)\n  # PIC code is broken on Interix 3.x, that's why |\\.a not |_pic\\.a here\n  lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so|\\.a)$'\n  ;;\n\nirix5* | irix6* | nonstopux*)\n  case $LD in\n  *-32|*\"-32 \") libmagic=32-bit;;\n  *-n32|*\"-n32 \") libmagic=N32;;\n  *-64|*\"-64 \") libmagic=64-bit;;\n  *) libmagic=never-match;;\n  esac\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\n# This must be glibc/ELF.\nlinux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nnetbsd*)\n  if echo __ELF__ | $CC -E - | $GREP __ELF__ > /dev/null; then\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so\\.[[0-9]]+\\.[[0-9]]+|_pic\\.a)$'\n  else\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so|_pic\\.a)$'\n  fi\n  ;;\n\nnewos6*)\n  lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (executable|dynamic lib)'\n  lt_cv_file_magic_cmd=/usr/bin/file\n  lt_cv_file_magic_test_file=/usr/lib/libnls.so\n  ;;\n\n*nto* | *qnx*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nopenbsd* | bitrig*)\n  if test -z \"`echo __ELF__ | $CC -E - | $GREP __ELF__`\"; then\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so\\.[[0-9]]+\\.[[0-9]]+|\\.so|_pic\\.a)$'\n  else\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so\\.[[0-9]]+\\.[[0-9]]+|_pic\\.a)$'\n  fi\n  ;;\n\nosf3* | osf4* | osf5*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nrdos*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nsolaris*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nsysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX* | sysv4*uw2*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nsysv4 | sysv4.3*)\n  case $host_vendor in\n  motorola)\n    lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (shared object|dynamic lib) M[[0-9]][[0-9]]* Version [[0-9]]'\n    lt_cv_file_magic_test_file=`echo /usr/lib/libc.so*`\n    ;;\n  ncr)\n    lt_cv_deplibs_check_method=pass_all\n    ;;\n  sequent)\n    lt_cv_file_magic_cmd='/bin/file'\n    lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[LM]]SB (shared object|dynamic lib )'\n    ;;\n  sni)\n    lt_cv_file_magic_cmd='/bin/file'\n    lt_cv_deplibs_check_method=\"file_magic ELF [[0-9]][[0-9]]*-bit [[LM]]SB dynamic lib\"\n    lt_cv_file_magic_test_file=/lib/libc.so\n    ;;\n  siemens)\n    lt_cv_deplibs_check_method=pass_all\n    ;;\n  pc)\n    lt_cv_deplibs_check_method=pass_all\n    ;;\n  esac\n  ;;\n\ntpf*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\nos2*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\nesac\n])\n\nfile_magic_glob=\nwant_nocaseglob=no\nif test \"$build\" = \"$host\"; then\n  case $host_os in\n  mingw* | pw32*)\n    if ( shopt | grep nocaseglob ) >/dev/null 2>&1; then\n      want_nocaseglob=yes\n    else\n      file_magic_glob=`echo aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ | $SED -e \"s/\\(..\\)/s\\/[[\\1]]\\/[[\\1]]\\/g;/g\"`\n    fi\n    ;;\n  esac\nfi\n\nfile_magic_cmd=$lt_cv_file_magic_cmd\ndeplibs_check_method=$lt_cv_deplibs_check_method\ntest -z \"$deplibs_check_method\" && deplibs_check_method=unknown\n\n_LT_DECL([], [deplibs_check_method], [1],\n    [Method to check whether dependent libraries are shared objects])\n_LT_DECL([], [file_magic_cmd], [1],\n    [Command to use when deplibs_check_method = \"file_magic\"])\n_LT_DECL([], [file_magic_glob], [1],\n    [How to find potential files when deplibs_check_method = \"file_magic\"])\n_LT_DECL([], [want_nocaseglob], [1],\n    [Find potential files using nocaseglob when deplibs_check_method = \"file_magic\"])\n])# _LT_CHECK_MAGIC_METHOD\n\n\n# LT_PATH_NM\n# ----------\n# find the pathname to a BSD- or MS-compatible name lister\nAC_DEFUN([LT_PATH_NM],\n[AC_REQUIRE([AC_PROG_CC])dnl\nAC_CACHE_CHECK([for BSD- or MS-compatible name lister (nm)], lt_cv_path_NM,\n[if test -n \"$NM\"; then\n  # Let the user override the test.\n  lt_cv_path_NM=$NM\nelse\n  lt_nm_to_check=${ac_tool_prefix}nm\n  if test -n \"$ac_tool_prefix\" && test \"$build\" = \"$host\"; then\n    lt_nm_to_check=\"$lt_nm_to_check nm\"\n  fi\n  for lt_tmp_nm in $lt_nm_to_check; do\n    lt_save_ifs=$IFS; IFS=$PATH_SEPARATOR\n    for ac_dir in $PATH /usr/ccs/bin/elf /usr/ccs/bin /usr/ucb /bin; do\n      IFS=$lt_save_ifs\n      test -z \"$ac_dir\" && ac_dir=.\n      tmp_nm=$ac_dir/$lt_tmp_nm\n      if test -f \"$tmp_nm\" || test -f \"$tmp_nm$ac_exeext\"; then\n\t# Check to see if the nm accepts a BSD-compat flag.\n\t# Adding the 'sed 1q' prevents false positives on HP-UX, which says:\n\t#   nm: unknown option \"B\" ignored\n\t# Tru64's nm complains that /dev/null is an invalid object file\n\t# MSYS converts /dev/null to NUL, MinGW nm treats NUL as empty\n\tcase $build_os in\n\tmingw*) lt_bad_file=conftest.nm/nofile ;;\n\t*) lt_bad_file=/dev/null ;;\n\tesac\n\tcase `\"$tmp_nm\" -B $lt_bad_file 2>&1 | sed '1q'` in\n\t*$lt_bad_file* | *'Invalid file or object type'*)\n\t  lt_cv_path_NM=\"$tmp_nm -B\"\n\t  break 2\n\t  ;;\n\t*)\n\t  case `\"$tmp_nm\" -p /dev/null 2>&1 | sed '1q'` in\n\t  */dev/null*)\n\t    lt_cv_path_NM=\"$tmp_nm -p\"\n\t    break 2\n\t    ;;\n\t  *)\n\t    lt_cv_path_NM=${lt_cv_path_NM=\"$tmp_nm\"} # keep the first match, but\n\t    continue # so that we can try to find one that supports BSD flags\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n      fi\n    done\n    IFS=$lt_save_ifs\n  done\n  : ${lt_cv_path_NM=no}\nfi])\nif test no != \"$lt_cv_path_NM\"; then\n  NM=$lt_cv_path_NM\nelse\n  # Didn't find any BSD compatible name lister, look for dumpbin.\n  if test -n \"$DUMPBIN\"; then :\n    # Let the user override the test.\n  else\n    AC_CHECK_TOOLS(DUMPBIN, [dumpbin \"link -dump\"], :)\n    case `$DUMPBIN -symbols -headers /dev/null 2>&1 | sed '1q'` in\n    *COFF*)\n      DUMPBIN=\"$DUMPBIN -symbols -headers\"\n      ;;\n    *)\n      DUMPBIN=:\n      ;;\n    esac\n  fi\n  AC_SUBST([DUMPBIN])\n  if test : != \"$DUMPBIN\"; then\n    NM=$DUMPBIN\n  fi\nfi\ntest -z \"$NM\" && NM=nm\nAC_SUBST([NM])\n_LT_DECL([], [NM], [1], [A BSD- or MS-compatible name lister])dnl\n\nAC_CACHE_CHECK([the name lister ($NM) interface], [lt_cv_nm_interface],\n  [lt_cv_nm_interface=\"BSD nm\"\n  echo \"int some_variable = 0;\" > conftest.$ac_ext\n  (eval echo \"\\\"\\$as_me:$LINENO: $ac_compile\\\"\" >&AS_MESSAGE_LOG_FD)\n  (eval \"$ac_compile\" 2>conftest.err)\n  cat conftest.err >&AS_MESSAGE_LOG_FD\n  (eval echo \"\\\"\\$as_me:$LINENO: $NM \\\\\\\"conftest.$ac_objext\\\\\\\"\\\"\" >&AS_MESSAGE_LOG_FD)\n  (eval \"$NM \\\"conftest.$ac_objext\\\"\" 2>conftest.err > conftest.out)\n  cat conftest.err >&AS_MESSAGE_LOG_FD\n  (eval echo \"\\\"\\$as_me:$LINENO: output\\\"\" >&AS_MESSAGE_LOG_FD)\n  cat conftest.out >&AS_MESSAGE_LOG_FD\n  if $GREP 'External.*some_variable' conftest.out > /dev/null; then\n    lt_cv_nm_interface=\"MS dumpbin\"\n  fi\n  rm -f conftest*])\n])# LT_PATH_NM\n\n# Old names:\nAU_ALIAS([AM_PROG_NM], [LT_PATH_NM])\nAU_ALIAS([AC_PROG_NM], [LT_PATH_NM])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AM_PROG_NM], [])\ndnl AC_DEFUN([AC_PROG_NM], [])\n\n# _LT_CHECK_SHAREDLIB_FROM_LINKLIB\n# --------------------------------\n# how to determine the name of the shared library\n# associated with a specific link library.\n#  -- PORTME fill in with the dynamic library characteristics\nm4_defun([_LT_CHECK_SHAREDLIB_FROM_LINKLIB],\n[m4_require([_LT_DECL_EGREP])\nm4_require([_LT_DECL_OBJDUMP])\nm4_require([_LT_DECL_DLLTOOL])\nAC_CACHE_CHECK([how to associate runtime and link libraries],\nlt_cv_sharedlib_from_linklib_cmd,\n[lt_cv_sharedlib_from_linklib_cmd='unknown'\n\ncase $host_os in\ncygwin* | mingw* | pw32* | cegcc*)\n  # two different shell functions defined in ltmain.sh;\n  # decide which one to use based on capabilities of $DLLTOOL\n  case `$DLLTOOL --help 2>&1` in\n  *--identify-strict*)\n    lt_cv_sharedlib_from_linklib_cmd=func_cygming_dll_for_implib\n    ;;\n  *)\n    lt_cv_sharedlib_from_linklib_cmd=func_cygming_dll_for_implib_fallback\n    ;;\n  esac\n  ;;\n*)\n  # fallback: assume linklib IS sharedlib\n  lt_cv_sharedlib_from_linklib_cmd=$ECHO\n  ;;\nesac\n])\nsharedlib_from_linklib_cmd=$lt_cv_sharedlib_from_linklib_cmd\ntest -z \"$sharedlib_from_linklib_cmd\" && sharedlib_from_linklib_cmd=$ECHO\n\n_LT_DECL([], [sharedlib_from_linklib_cmd], [1],\n    [Command to associate shared and link libraries])\n])# _LT_CHECK_SHAREDLIB_FROM_LINKLIB\n\n\n# _LT_PATH_MANIFEST_TOOL\n# ----------------------\n# locate the manifest tool\nm4_defun([_LT_PATH_MANIFEST_TOOL],\n[AC_CHECK_TOOL(MANIFEST_TOOL, mt, :)\ntest -z \"$MANIFEST_TOOL\" && MANIFEST_TOOL=mt\nAC_CACHE_CHECK([if $MANIFEST_TOOL is a manifest tool], [lt_cv_path_mainfest_tool],\n  [lt_cv_path_mainfest_tool=no\n  echo \"$as_me:$LINENO: $MANIFEST_TOOL '-?'\" >&AS_MESSAGE_LOG_FD\n  $MANIFEST_TOOL '-?' 2>conftest.err > conftest.out\n  cat conftest.err >&AS_MESSAGE_LOG_FD\n  if $GREP 'Manifest Tool' conftest.out > /dev/null; then\n    lt_cv_path_mainfest_tool=yes\n  fi\n  rm -f conftest*])\nif test yes != \"$lt_cv_path_mainfest_tool\"; then\n  MANIFEST_TOOL=:\nfi\n_LT_DECL([], [MANIFEST_TOOL], [1], [Manifest tool])dnl\n])# _LT_PATH_MANIFEST_TOOL\n\n\n# _LT_DLL_DEF_P([FILE])\n# ---------------------\n# True iff FILE is a Windows DLL '.def' file.\n# Keep in sync with func_dll_def_p in the libtool script\nAC_DEFUN([_LT_DLL_DEF_P],\n[dnl\n  test DEF = \"`$SED -n dnl\n    -e '\\''s/^[[\t ]]*//'\\'' dnl Strip leading whitespace\n    -e '\\''/^\\(;.*\\)*$/d'\\'' dnl      Delete empty lines and comments\n    -e '\\''s/^\\(EXPORTS\\|LIBRARY\\)\\([[\t ]].*\\)*$/DEF/p'\\'' dnl\n    -e q dnl                          Only consider the first \"real\" line\n    $1`\" dnl\n])# _LT_DLL_DEF_P\n\n\n# LT_LIB_M\n# --------\n# check for math library\nAC_DEFUN([LT_LIB_M],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nLIBM=\ncase $host in\n*-*-beos* | *-*-cegcc* | *-*-cygwin* | *-*-haiku* | *-*-pw32* | *-*-darwin*)\n  # These system don't have libm, or don't need it\n  ;;\n*-ncr-sysv4.3*)\n  AC_CHECK_LIB(mw, _mwvalidcheckl, LIBM=-lmw)\n  AC_CHECK_LIB(m, cos, LIBM=\"$LIBM -lm\")\n  ;;\n*)\n  AC_CHECK_LIB(m, cos, LIBM=-lm)\n  ;;\nesac\nAC_SUBST([LIBM])\n])# LT_LIB_M\n\n# Old name:\nAU_ALIAS([AC_CHECK_LIBM], [LT_LIB_M])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_CHECK_LIBM], [])\n\n\n# _LT_COMPILER_NO_RTTI([TAGNAME])\n# -------------------------------\nm4_defun([_LT_COMPILER_NO_RTTI],\n[m4_require([_LT_TAG_COMPILER])dnl\n\n_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=\n\nif test yes = \"$GCC\"; then\n  case $cc_basename in\n  nvcc*)\n    _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=' -Xcompiler -fno-builtin' ;;\n  *)\n    _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=' -fno-builtin' ;;\n  esac\n\n  _LT_COMPILER_OPTION([if $compiler supports -fno-rtti -fno-exceptions],\n    lt_cv_prog_compiler_rtti_exceptions,\n    [-fno-rtti -fno-exceptions], [],\n    [_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=\"$_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1) -fno-rtti -fno-exceptions\"])\nfi\n_LT_TAGDECL([no_builtin_flag], [lt_prog_compiler_no_builtin_flag], [1],\n\t[Compiler flag to turn off builtin functions])\n])# _LT_COMPILER_NO_RTTI\n\n\n# _LT_CMD_GLOBAL_SYMBOLS\n# ----------------------\nm4_defun([_LT_CMD_GLOBAL_SYMBOLS],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_PROG_CC])dnl\nAC_REQUIRE([AC_PROG_AWK])dnl\nAC_REQUIRE([LT_PATH_NM])dnl\nAC_REQUIRE([LT_PATH_LD])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_TAG_COMPILER])dnl\n\n# Check for command to grab the raw symbol name followed by C symbol from nm.\nAC_MSG_CHECKING([command to parse $NM output from $compiler object])\nAC_CACHE_VAL([lt_cv_sys_global_symbol_pipe],\n[\n# These are sane defaults that work on at least a few old systems.\n# [They come from Ultrix.  What could be older than Ultrix?!! ;)]\n\n# Character class describing NM global symbol codes.\nsymcode='[[BCDEGRST]]'\n\n# Regexp to match symbols that can be accessed directly from C.\nsympat='\\([[_A-Za-z]][[_A-Za-z0-9]]*\\)'\n\n# Define system-specific variables.\ncase $host_os in\naix*)\n  symcode='[[BCDT]]'\n  ;;\ncygwin* | mingw* | pw32* | cegcc*)\n  symcode='[[ABCDGISTW]]'\n  ;;\nhpux*)\n  if test ia64 = \"$host_cpu\"; then\n    symcode='[[ABCDEGRST]]'\n  fi\n  ;;\nirix* | nonstopux*)\n  symcode='[[BCDEGRST]]'\n  ;;\nosf*)\n  symcode='[[BCDEGQRST]]'\n  ;;\nsolaris*)\n  symcode='[[BDRT]]'\n  ;;\nsco3.2v5*)\n  symcode='[[DT]]'\n  ;;\nsysv4.2uw2*)\n  symcode='[[DT]]'\n  ;;\nsysv5* | sco5v6* | unixware* | OpenUNIX*)\n  symcode='[[ABDT]]'\n  ;;\nsysv4)\n  symcode='[[DFNSTU]]'\n  ;;\nesac\n\n# If we're using GNU nm, then use its standard symbol codes.\ncase `$NM -V 2>&1` in\n*GNU* | *'with BFD'*)\n  symcode='[[ABCDGIRSTW]]' ;;\nesac\n\nif test \"$lt_cv_nm_interface\" = \"MS dumpbin\"; then\n  # Gets list of data symbols to import.\n  lt_cv_sys_global_symbol_to_import=\"sed -n -e 's/^I .* \\(.*\\)$/\\1/p'\"\n  # Adjust the below global symbol transforms to fixup imported variables.\n  lt_cdecl_hook=\" -e 's/^I .* \\(.*\\)$/extern __declspec(dllimport) char \\1;/p'\"\n  lt_c_name_hook=\" -e 's/^I .* \\(.*\\)$/  {\\\"\\1\\\", (void *) 0},/p'\"\n  lt_c_name_lib_hook=\"\\\n  -e 's/^I .* \\(lib.*\\)$/  {\\\"\\1\\\", (void *) 0},/p'\\\n  -e 's/^I .* \\(.*\\)$/  {\\\"lib\\1\\\", (void *) 0},/p'\"\nelse\n  # Disable hooks by default.\n  lt_cv_sys_global_symbol_to_import=\n  lt_cdecl_hook=\n  lt_c_name_hook=\n  lt_c_name_lib_hook=\nfi\n\n# Transform an extracted symbol line into a proper C declaration.\n# Some systems (esp. on ia64) link data and code symbols differently,\n# so use this general approach.\nlt_cv_sys_global_symbol_to_cdecl=\"sed -n\"\\\n$lt_cdecl_hook\\\n\" -e 's/^T .* \\(.*\\)$/extern int \\1();/p'\"\\\n\" -e 's/^$symcode$symcode* .* \\(.*\\)$/extern char \\1;/p'\"\n\n# Transform an extracted symbol line into symbol name and symbol address\nlt_cv_sys_global_symbol_to_c_name_address=\"sed -n\"\\\n$lt_c_name_hook\\\n\" -e 's/^: \\(.*\\) .*$/  {\\\"\\1\\\", (void *) 0},/p'\"\\\n\" -e 's/^$symcode$symcode* .* \\(.*\\)$/  {\\\"\\1\\\", (void *) \\&\\1},/p'\"\n\n# Transform an extracted symbol line into symbol name with lib prefix and\n# symbol address.\nlt_cv_sys_global_symbol_to_c_name_address_lib_prefix=\"sed -n\"\\\n$lt_c_name_lib_hook\\\n\" -e 's/^: \\(.*\\) .*$/  {\\\"\\1\\\", (void *) 0},/p'\"\\\n\" -e 's/^$symcode$symcode* .* \\(lib.*\\)$/  {\\\"\\1\\\", (void *) \\&\\1},/p'\"\\\n\" -e 's/^$symcode$symcode* .* \\(.*\\)$/  {\\\"lib\\1\\\", (void *) \\&\\1},/p'\"\n\n# Handle CRLF in mingw tool chain\nopt_cr=\ncase $build_os in\nmingw*)\n  opt_cr=`$ECHO 'x\\{0,1\\}' | tr x '\\015'` # option cr in regexp\n  ;;\nesac\n\n# Try without a prefix underscore, then with it.\nfor ac_symprfx in \"\" \"_\"; do\n\n  # Transform symcode, sympat, and symprfx into a raw symbol and a C symbol.\n  symxfrm=\"\\\\1 $ac_symprfx\\\\2 \\\\2\"\n\n  # Write the raw and C identifiers.\n  if test \"$lt_cv_nm_interface\" = \"MS dumpbin\"; then\n    # Fake it for dumpbin and say T for any non-static function,\n    # D for any global variable and I for any imported variable.\n    # Also find C++ and __fastcall symbols from MSVC++,\n    # which start with @ or ?.\n    lt_cv_sys_global_symbol_pipe=\"$AWK ['\"\\\n\"     {last_section=section; section=\\$ 3};\"\\\n\"     /^COFF SYMBOL TABLE/{for(i in hide) delete hide[i]};\"\\\n\"     /Section length .*#relocs.*(pick any)/{hide[last_section]=1};\"\\\n\"     /^ *Symbol name *: /{split(\\$ 0,sn,\\\":\\\"); si=substr(sn[2],2)};\"\\\n\"     /^ *Type *: code/{print \\\"T\\\",si,substr(si,length(prfx))};\"\\\n\"     /^ *Type *: data/{print \\\"I\\\",si,substr(si,length(prfx))};\"\\\n\"     \\$ 0!~/External *\\|/{next};\"\\\n\"     / 0+ UNDEF /{next}; / UNDEF \\([^|]\\)*()/{next};\"\\\n\"     {if(hide[section]) next};\"\\\n\"     {f=\\\"D\\\"}; \\$ 0~/\\(\\).*\\|/{f=\\\"T\\\"};\"\\\n\"     {split(\\$ 0,a,/\\||\\r/); split(a[2],s)};\"\\\n\"     s[1]~/^[@?]/{print f,s[1],s[1]; next};\"\\\n\"     s[1]~prfx {split(s[1],t,\\\"@\\\"); print f,t[1],substr(t[1],length(prfx))}\"\\\n\"     ' prfx=^$ac_symprfx]\"\n  else\n    lt_cv_sys_global_symbol_pipe=\"sed -n -e 's/^.*[[\t ]]\\($symcode$symcode*\\)[[\t ]][[\t ]]*$ac_symprfx$sympat$opt_cr$/$symxfrm/p'\"\n  fi\n  lt_cv_sys_global_symbol_pipe=\"$lt_cv_sys_global_symbol_pipe | sed '/ __gnu_lto/d'\"\n\n  # Check to see that the pipe works correctly.\n  pipe_works=no\n\n  rm -f conftest*\n  cat > conftest.$ac_ext <<_LT_EOF\n#ifdef __cplusplus\nextern \"C\" {\n#endif\nchar nm_test_var;\nvoid nm_test_func(void);\nvoid nm_test_func(void){}\n#ifdef __cplusplus\n}\n#endif\nint main(){nm_test_var='a';nm_test_func();return(0);}\n_LT_EOF\n\n  if AC_TRY_EVAL(ac_compile); then\n    # Now try to grab the symbols.\n    nlist=conftest.nm\n    if AC_TRY_EVAL(NM conftest.$ac_objext \\| \"$lt_cv_sys_global_symbol_pipe\" \\> $nlist) && test -s \"$nlist\"; then\n      # Try sorting and uniquifying the output.\n      if sort \"$nlist\" | uniq > \"$nlist\"T; then\n\tmv -f \"$nlist\"T \"$nlist\"\n      else\n\trm -f \"$nlist\"T\n      fi\n\n      # Make sure that we snagged all the symbols we need.\n      if $GREP ' nm_test_var$' \"$nlist\" >/dev/null; then\n\tif $GREP ' nm_test_func$' \"$nlist\" >/dev/null; then\n\t  cat <<_LT_EOF > conftest.$ac_ext\n/* Keep this code in sync between libtool.m4, ltmain, lt_system.h, and tests.  */\n#if defined _WIN32 || defined __CYGWIN__ || defined _WIN32_WCE\n/* DATA imports from DLLs on WIN32 can't be const, because runtime\n   relocations are performed -- see ld's documentation on pseudo-relocs.  */\n# define LT@&t@_DLSYM_CONST\n#elif defined __osf__\n/* This system does not cope well with relocations in const data.  */\n# define LT@&t@_DLSYM_CONST\n#else\n# define LT@&t@_DLSYM_CONST const\n#endif\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n_LT_EOF\n\t  # Now generate the symbol file.\n\t  eval \"$lt_cv_sys_global_symbol_to_cdecl\"' < \"$nlist\" | $GREP -v main >> conftest.$ac_ext'\n\n\t  cat <<_LT_EOF >> conftest.$ac_ext\n\n/* The mapping between symbol names and symbols.  */\nLT@&t@_DLSYM_CONST struct {\n  const char *name;\n  void       *address;\n}\nlt__PROGRAM__LTX_preloaded_symbols[[]] =\n{\n  { \"@PROGRAM@\", (void *) 0 },\n_LT_EOF\n\t  $SED \"s/^$symcode$symcode* .* \\(.*\\)$/  {\\\"\\1\\\", (void *) \\&\\1},/\" < \"$nlist\" | $GREP -v main >> conftest.$ac_ext\n\t  cat <<\\_LT_EOF >> conftest.$ac_ext\n  {0, (void *) 0}\n};\n\n/* This works around a problem in FreeBSD linker */\n#ifdef FREEBSD_WORKAROUND\nstatic const void *lt_preloaded_setup() {\n  return lt__PROGRAM__LTX_preloaded_symbols;\n}\n#endif\n\n#ifdef __cplusplus\n}\n#endif\n_LT_EOF\n\t  # Now try linking the two files.\n\t  mv conftest.$ac_objext conftstm.$ac_objext\n\t  lt_globsym_save_LIBS=$LIBS\n\t  lt_globsym_save_CFLAGS=$CFLAGS\n\t  LIBS=conftstm.$ac_objext\n\t  CFLAGS=\"$CFLAGS$_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)\"\n\t  if AC_TRY_EVAL(ac_link) && test -s conftest$ac_exeext; then\n\t    pipe_works=yes\n\t  fi\n\t  LIBS=$lt_globsym_save_LIBS\n\t  CFLAGS=$lt_globsym_save_CFLAGS\n\telse\n\t  echo \"cannot find nm_test_func in $nlist\" >&AS_MESSAGE_LOG_FD\n\tfi\n      else\n\techo \"cannot find nm_test_var in $nlist\" >&AS_MESSAGE_LOG_FD\n      fi\n    else\n      echo \"cannot run $lt_cv_sys_global_symbol_pipe\" >&AS_MESSAGE_LOG_FD\n    fi\n  else\n    echo \"$progname: failed program was:\" >&AS_MESSAGE_LOG_FD\n    cat conftest.$ac_ext >&5\n  fi\n  rm -rf conftest* conftst*\n\n  # Do not use the global_symbol_pipe unless it works.\n  if test yes = \"$pipe_works\"; then\n    break\n  else\n    lt_cv_sys_global_symbol_pipe=\n  fi\ndone\n])\nif test -z \"$lt_cv_sys_global_symbol_pipe\"; then\n  lt_cv_sys_global_symbol_to_cdecl=\nfi\nif test -z \"$lt_cv_sys_global_symbol_pipe$lt_cv_sys_global_symbol_to_cdecl\"; then\n  AC_MSG_RESULT(failed)\nelse\n  AC_MSG_RESULT(ok)\nfi\n\n# Response file support.\nif test \"$lt_cv_nm_interface\" = \"MS dumpbin\"; then\n  nm_file_list_spec='@'\nelif $NM --help 2>/dev/null | grep '[[@]]FILE' >/dev/null; then\n  nm_file_list_spec='@'\nfi\n\n_LT_DECL([global_symbol_pipe], [lt_cv_sys_global_symbol_pipe], [1],\n    [Take the output of nm and produce a listing of raw symbols and C names])\n_LT_DECL([global_symbol_to_cdecl], [lt_cv_sys_global_symbol_to_cdecl], [1],\n    [Transform the output of nm in a proper C declaration])\n_LT_DECL([global_symbol_to_import], [lt_cv_sys_global_symbol_to_import], [1],\n    [Transform the output of nm into a list of symbols to manually relocate])\n_LT_DECL([global_symbol_to_c_name_address],\n    [lt_cv_sys_global_symbol_to_c_name_address], [1],\n    [Transform the output of nm in a C name address pair])\n_LT_DECL([global_symbol_to_c_name_address_lib_prefix],\n    [lt_cv_sys_global_symbol_to_c_name_address_lib_prefix], [1],\n    [Transform the output of nm in a C name address pair when lib prefix is needed])\n_LT_DECL([nm_interface], [lt_cv_nm_interface], [1],\n    [The name lister interface])\n_LT_DECL([], [nm_file_list_spec], [1],\n    [Specify filename containing input files for $NM])\n]) # _LT_CMD_GLOBAL_SYMBOLS\n\n\n# _LT_COMPILER_PIC([TAGNAME])\n# ---------------------------\nm4_defun([_LT_COMPILER_PIC],\n[m4_require([_LT_TAG_COMPILER])dnl\n_LT_TAGVAR(lt_prog_compiler_wl, $1)=\n_LT_TAGVAR(lt_prog_compiler_pic, $1)=\n_LT_TAGVAR(lt_prog_compiler_static, $1)=\n\nm4_if([$1], [CXX], [\n  # C++ specific cases for pic, static, wl, etc.\n  if test yes = \"$GXX\"; then\n    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\n    case $host_os in\n    aix*)\n      # All AIX code is PIC.\n      if test ia64 = \"$host_cpu\"; then\n\t# AIX 5 now supports IA64 processor\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      fi\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n        ;;\n      m68k)\n            # FIXME: we need at least 68020 code to build shared libraries, but\n            # adding the '-m68020' flag to GCC prevents building anything better,\n            # like '-m68040'.\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-m68020 -resident32 -malways-restore-a4'\n        ;;\n      esac\n      ;;\n\n    beos* | irix5* | irix6* | nonstopux* | osf3* | osf4* | osf5*)\n      # PIC is the default for these OSes.\n      ;;\n    mingw* | cygwin* | os2* | pw32* | cegcc*)\n      # This hack is so that the source file can tell whether it is being\n      # built for inclusion in a dll (and should export symbols for example).\n      # Although the cygwin gcc ignores -fPIC, still need this for old-style\n      # (--disable-auto-import) libraries\n      m4_if([$1], [GCJ], [],\n\t[_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n      case $host_os in\n      os2*)\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-static'\n\t;;\n      esac\n      ;;\n    darwin* | rhapsody*)\n      # PIC is the default on this platform\n      # Common symbols not allowed in MH_DYLIB files\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fno-common'\n      ;;\n    *djgpp*)\n      # DJGPP does not support shared libraries at all\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n      ;;\n    haiku*)\n      # PIC is the default for Haiku.\n      # The \"-static\" flag exists, but is broken.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)=\n      ;;\n    interix[[3-9]]*)\n      # Interix 3.x gcc -fpic/-fPIC options generate broken code.\n      # Instead, we relocate shared libraries at runtime.\n      ;;\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)=-Kconform_pic\n      fi\n      ;;\n    hpux*)\n      # PIC is the default for 64-bit PA HP-UX, but not for 32-bit\n      # PA HP-UX.  On IA64 HP-UX, PIC is the default but the pic flag\n      # sets the default TLS model and affects inlining.\n      case $host_cpu in\n      hppa*64*)\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t;;\n      esac\n      ;;\n    *qnx* | *nto*)\n      # QNX uses GNU C++, but need to define -shared option too, otherwise\n      # it will coredump.\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n      ;;\n    *)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n    esac\n  else\n    case $host_os in\n      aix[[4-9]]*)\n\t# All AIX code is PIC.\n\tif test ia64 = \"$host_cpu\"; then\n\t  # AIX 5 now supports IA64 processor\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\telse\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-bnso -bI:/lib/syscalls.exp'\n\tfi\n\t;;\n      chorus*)\n\tcase $cc_basename in\n\tcxch68*)\n\t  # Green Hills C++ Compiler\n\t  # _LT_TAGVAR(lt_prog_compiler_static, $1)=\"--no_auto_instantiation -u __main -u __premain -u _abort -r $COOL_DIR/lib/libOrb.a $MVME_DIR/lib/CC/libC.a $MVME_DIR/lib/classix/libcx.s.a\"\n\t  ;;\n\tesac\n\t;;\n      mingw* | cygwin* | os2* | pw32* | cegcc*)\n\t# This hack is so that the source file can tell whether it is being\n\t# built for inclusion in a dll (and should export symbols for example).\n\tm4_if([$1], [GCJ], [],\n\t  [_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n\t;;\n      dgux*)\n\tcase $cc_basename in\n\t  ec++*)\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    ;;\n\t  ghcx*)\n\t    # Green Hills C++ Compiler\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      freebsd* | dragonfly*)\n\t# FreeBSD uses GNU C++\n\t;;\n      hpux9* | hpux10* | hpux11*)\n\tcase $cc_basename in\n\t  CC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-a ${wl}archive'\n\t    if test ia64 != \"$host_cpu\"; then\n\t      _LT_TAGVAR(lt_prog_compiler_pic, $1)='+Z'\n\t    fi\n\t    ;;\n\t  aCC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-a ${wl}archive'\n\t    case $host_cpu in\n\t    hppa*64*|ia64*)\n\t      # +Z the default\n\t      ;;\n\t    *)\n\t      _LT_TAGVAR(lt_prog_compiler_pic, $1)='+Z'\n\t      ;;\n\t    esac\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      interix*)\n\t# This is c89, which is MS Visual C++ (no shared libs)\n\t# Anyone wants to do a port?\n\t;;\n      irix5* | irix6* | nonstopux*)\n\tcase $cc_basename in\n\t  CC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n\t    # CC pic flag -KPIC is the default.\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      linux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n\tcase $cc_basename in\n\t  KCC*)\n\t    # KAI C++ Compiler\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='--backend -Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t    ;;\n\t  ecpc* )\n\t    # old Intel C++ for x86_64, which still supported -KPIC.\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t    ;;\n\t  icpc* )\n\t    # Intel C++, used to be incompatible with GCC.\n\t    # ICC 10 doesn't accept -KPIC any more.\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t    ;;\n\t  pgCC* | pgcpp*)\n\t    # Portland Group C++ compiler\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fpic'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    ;;\n\t  cxx*)\n\t    # Compaq C++\n\t    # Make sure the PIC flag is empty.  It appears that all Alpha\n\t    # Linux and Compaq Tru64 Unix objects are PIC.\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n\t    ;;\n\t  xlc* | xlC* | bgxl[[cC]]* | mpixl[[cC]]*)\n\t    # IBM XL 8.0, 9.0 on PPC and BlueGene\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-qpic'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-qstaticlink'\n\t    ;;\n\t  *)\n\t    case `$CC -V 2>&1 | sed 5q` in\n\t    *Sun\\ C*)\n\t      # Sun C++ 5.9\n\t      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n\t      ;;\n\t    esac\n\t    ;;\n\tesac\n\t;;\n      lynxos*)\n\t;;\n      m88k*)\n\t;;\n      mvs*)\n\tcase $cc_basename in\n\t  cxx*)\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-W c,exportall'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      netbsd*)\n\t;;\n      *qnx* | *nto*)\n        # QNX uses GNU C++, but need to define -shared option too, otherwise\n        # it will coredump.\n        _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n        ;;\n      osf3* | osf4* | osf5*)\n\tcase $cc_basename in\n\t  KCC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='--backend -Wl,'\n\t    ;;\n\t  RCC*)\n\t    # Rational C++ 2.4.1\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    ;;\n\t  cxx*)\n\t    # Digital/Compaq C++\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    # Make sure the PIC flag is empty.  It appears that all Alpha\n\t    # Linux and Compaq Tru64 Unix objects are PIC.\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      psos*)\n\t;;\n      solaris*)\n\tcase $cc_basename in\n\t  CC* | sunCC*)\n\t    # Sun C++ 4.2, 5.x and Centerline C++\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n\t    ;;\n\t  gcx*)\n\t    # Green Hills C++ Compiler\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      sunos4*)\n\tcase $cc_basename in\n\t  CC*)\n\t    # Sun C++ 4.x\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    ;;\n\t  lcc*)\n\t    # Lucid\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      sysv5* | unixware* | sco3.2v5* | sco5v6* | OpenUNIX*)\n\tcase $cc_basename in\n\t  CC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    ;;\n\tesac\n\t;;\n      tandem*)\n\tcase $cc_basename in\n\t  NCC*)\n\t    # NonStop-UX NCC 3.20\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      vxworks*)\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n\t;;\n    esac\n  fi\n],\n[\n  if test yes = \"$GCC\"; then\n    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\n    case $host_os in\n      aix*)\n      # All AIX code is PIC.\n      if test ia64 = \"$host_cpu\"; then\n\t# AIX 5 now supports IA64 processor\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      fi\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n        ;;\n      m68k)\n            # FIXME: we need at least 68020 code to build shared libraries, but\n            # adding the '-m68020' flag to GCC prevents building anything better,\n            # like '-m68040'.\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-m68020 -resident32 -malways-restore-a4'\n        ;;\n      esac\n      ;;\n\n    beos* | irix5* | irix6* | nonstopux* | osf3* | osf4* | osf5*)\n      # PIC is the default for these OSes.\n      ;;\n\n    mingw* | cygwin* | pw32* | os2* | cegcc*)\n      # This hack is so that the source file can tell whether it is being\n      # built for inclusion in a dll (and should export symbols for example).\n      # Although the cygwin gcc ignores -fPIC, still need this for old-style\n      # (--disable-auto-import) libraries\n      m4_if([$1], [GCJ], [],\n\t[_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n      case $host_os in\n      os2*)\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-static'\n\t;;\n      esac\n      ;;\n\n    darwin* | rhapsody*)\n      # PIC is the default on this platform\n      # Common symbols not allowed in MH_DYLIB files\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fno-common'\n      ;;\n\n    haiku*)\n      # PIC is the default for Haiku.\n      # The \"-static\" flag exists, but is broken.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)=\n      ;;\n\n    hpux*)\n      # PIC is the default for 64-bit PA HP-UX, but not for 32-bit\n      # PA HP-UX.  On IA64 HP-UX, PIC is the default but the pic flag\n      # sets the default TLS model and affects inlining.\n      case $host_cpu in\n      hppa*64*)\n\t# +Z the default\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t;;\n      esac\n      ;;\n\n    interix[[3-9]]*)\n      # Interix 3.x gcc -fpic/-fPIC options generate broken code.\n      # Instead, we relocate shared libraries at runtime.\n      ;;\n\n    msdosdjgpp*)\n      # Just because we use GCC doesn't mean we suddenly get shared libraries\n      # on systems that don't support them.\n      _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n      enable_shared=no\n      ;;\n\n    *nto* | *qnx*)\n      # QNX uses GNU C++, but need to define -shared option too, otherwise\n      # it will coredump.\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n      ;;\n\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)=-Kconform_pic\n      fi\n      ;;\n\n    *)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n    esac\n\n    case $cc_basename in\n    nvcc*) # Cuda Compiler Driver 2.2\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Xlinker '\n      if test -n \"$_LT_TAGVAR(lt_prog_compiler_pic, $1)\"; then\n        _LT_TAGVAR(lt_prog_compiler_pic, $1)=\"-Xcompiler $_LT_TAGVAR(lt_prog_compiler_pic, $1)\"\n      fi\n      ;;\n    esac\n  else\n    # PORTME Check for flag to pass linker flags through the system compiler.\n    case $host_os in\n    aix*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      if test ia64 = \"$host_cpu\"; then\n\t# AIX 5 now supports IA64 processor\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      else\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-bnso -bI:/lib/syscalls.exp'\n      fi\n      ;;\n\n    darwin* | rhapsody*)\n      # PIC is the default on this platform\n      # Common symbols not allowed in MH_DYLIB files\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fno-common'\n      case $cc_basename in\n      nagfor*)\n        # NAG Fortran compiler\n        _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,-Wl,,'\n        _LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n        _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n        ;;\n      esac\n      ;;\n\n    mingw* | cygwin* | pw32* | os2* | cegcc*)\n      # This hack is so that the source file can tell whether it is being\n      # built for inclusion in a dll (and should export symbols for example).\n      m4_if([$1], [GCJ], [],\n\t[_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n      case $host_os in\n      os2*)\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-static'\n\t;;\n      esac\n      ;;\n\n    hpux9* | hpux10* | hpux11*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      # PIC is the default for IA64 HP-UX and 64-bit HP-UX, but\n      # not for PA HP-UX.\n      case $host_cpu in\n      hppa*64*|ia64*)\n\t# +Z the default\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='+Z'\n\t;;\n      esac\n      # Is there a better lt_prog_compiler_static that works with the bundled CC?\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-a ${wl}archive'\n      ;;\n\n    irix5* | irix6* | nonstopux*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      # PIC (with -KPIC) is the default.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n      ;;\n\n    linux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n      case $cc_basename in\n      # old Intel for x86_64, which still supported -KPIC.\n      ecc*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n        ;;\n      # icc used to be incompatible with GCC.\n      # ICC 10 doesn't accept -KPIC any more.\n      icc* | ifort*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n        ;;\n      # Lahey Fortran 8.1.\n      lf95*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='--shared'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='--static'\n\t;;\n      nagfor*)\n\t# NAG Fortran compiler\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,-Wl,,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t;;\n      tcc*)\n\t# Fabrice Bellard et al's Tiny C Compiler\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t;;\n      pgcc* | pgf77* | pgf90* | pgf95* | pgfortran*)\n        # Portland Group compilers (*not* the Pentium gcc compiler,\n\t# which looks to be a dead project)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fpic'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n        ;;\n      ccc*)\n        _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n        # All Alpha code is PIC.\n        _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n        ;;\n      xl* | bgxl* | bgf* | mpixl*)\n\t# IBM XL C 8.0/Fortran 10.1, 11.1 on PPC and BlueGene\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-qpic'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-qstaticlink'\n\t;;\n      *)\n\tcase `$CC -V 2>&1 | sed 5q` in\n\t*Sun\\ Ceres\\ Fortran* | *Sun*Fortran*\\ [[1-7]].* | *Sun*Fortran*\\ 8.[[0-3]]*)\n\t  # Sun Fortran 8.3 passes all unrecognized flags to the linker\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)=''\n\t  ;;\n\t*Sun\\ F* | *Sun*Fortran*)\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n\t  ;;\n\t*Sun\\ C*)\n\t  # Sun C 5.9\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t  ;;\n        *Intel*\\ [[CF]]*Compiler*)\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t  ;;\n\t*Portland\\ Group*)\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fpic'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  ;;\n\tesac\n\t;;\n      esac\n      ;;\n\n    newsos6)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    *nto* | *qnx*)\n      # QNX uses GNU C++, but need to define -shared option too, otherwise\n      # it will coredump.\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n      ;;\n\n    osf3* | osf4* | osf5*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      # All OSF/1 code is PIC.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n      ;;\n\n    rdos*)\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n      ;;\n\n    solaris*)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      case $cc_basename in\n      f77* | f90* | f95* | sunf77* | sunf90* | sunf95*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld ';;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,';;\n      esac\n      ;;\n\n    sunos4*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    sysv4 | sysv4.2uw2* | sysv4.3*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-Kconform_pic'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      fi\n      ;;\n\n    sysv5* | unixware* | sco3.2v5* | sco5v6* | OpenUNIX*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    unicos*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n      ;;\n\n    uts4*)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    *)\n      _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n      ;;\n    esac\n  fi\n])\ncase $host_os in\n  # For platforms that do not support PIC, -DPIC is meaningless:\n  *djgpp*)\n    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n    ;;\n  *)\n    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\"$_LT_TAGVAR(lt_prog_compiler_pic, $1)@&t@m4_if([$1],[],[ -DPIC],[m4_if([$1],[CXX],[ -DPIC],[])])\"\n    ;;\nesac\n\nAC_CACHE_CHECK([for $compiler option to produce PIC],\n  [_LT_TAGVAR(lt_cv_prog_compiler_pic, $1)],\n  [_LT_TAGVAR(lt_cv_prog_compiler_pic, $1)=$_LT_TAGVAR(lt_prog_compiler_pic, $1)])\n_LT_TAGVAR(lt_prog_compiler_pic, $1)=$_LT_TAGVAR(lt_cv_prog_compiler_pic, $1)\n\n#\n# Check to make sure the PIC flag actually works.\n#\nif test -n \"$_LT_TAGVAR(lt_prog_compiler_pic, $1)\"; then\n  _LT_COMPILER_OPTION([if $compiler PIC flag $_LT_TAGVAR(lt_prog_compiler_pic, $1) works],\n    [_LT_TAGVAR(lt_cv_prog_compiler_pic_works, $1)],\n    [$_LT_TAGVAR(lt_prog_compiler_pic, $1)@&t@m4_if([$1],[],[ -DPIC],[m4_if([$1],[CXX],[ -DPIC],[])])], [],\n    [case $_LT_TAGVAR(lt_prog_compiler_pic, $1) in\n     \"\" | \" \"*) ;;\n     *) _LT_TAGVAR(lt_prog_compiler_pic, $1)=\" $_LT_TAGVAR(lt_prog_compiler_pic, $1)\" ;;\n     esac],\n    [_LT_TAGVAR(lt_prog_compiler_pic, $1)=\n     _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no])\nfi\n_LT_TAGDECL([pic_flag], [lt_prog_compiler_pic], [1],\n\t[Additional compiler flags for building library objects])\n\n_LT_TAGDECL([wl], [lt_prog_compiler_wl], [1],\n\t[How to pass a linker flag through the compiler])\n#\n# Check to make sure the static flag actually works.\n#\nwl=$_LT_TAGVAR(lt_prog_compiler_wl, $1) eval lt_tmp_static_flag=\\\"$_LT_TAGVAR(lt_prog_compiler_static, $1)\\\"\n_LT_LINKER_OPTION([if $compiler static flag $lt_tmp_static_flag works],\n  _LT_TAGVAR(lt_cv_prog_compiler_static_works, $1),\n  $lt_tmp_static_flag,\n  [],\n  [_LT_TAGVAR(lt_prog_compiler_static, $1)=])\n_LT_TAGDECL([link_static_flag], [lt_prog_compiler_static], [1],\n\t[Compiler flag to prevent dynamic linking])\n])# _LT_COMPILER_PIC\n\n\n# _LT_LINKER_SHLIBS([TAGNAME])\n# ----------------------------\n# See if the linker supports building shared libraries.\nm4_defun([_LT_LINKER_SHLIBS],\n[AC_REQUIRE([LT_PATH_LD])dnl\nAC_REQUIRE([LT_PATH_NM])dnl\nm4_require([_LT_PATH_MANIFEST_TOOL])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_CMD_GLOBAL_SYMBOLS])dnl\nm4_require([_LT_TAG_COMPILER])dnl\nAC_MSG_CHECKING([whether the $compiler linker ($LD) supports shared libraries])\nm4_if([$1], [CXX], [\n  _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\\''s/.* //'\\'' | sort | uniq > $export_symbols'\n  _LT_TAGVAR(exclude_expsyms, $1)=['_GLOBAL_OFFSET_TABLE_|_GLOBAL__F[ID]_.*']\n  case $host_os in\n  aix[[4-9]]*)\n    # If we're using GNU nm, then we don't want the \"-C\" option.\n    # -C means demangle to GNU nm, but means don't demangle to AIX nm.\n    # Without the \"-l\" option, or with the \"-B\" option, AIX nm treats\n    # weak defined symbols like other global defined symbols, whereas\n    # GNU nm marks them as \"W\".\n    # While the 'weak' keyword is ignored in the Export File, we need\n    # it in the Import File for the 'aix-soname' feature, so we have\n    # to replace the \"-B\" option with \"-P\" for AIX nm.\n    if $NM -V 2>&1 | $GREP 'GNU' > /dev/null; then\n      _LT_TAGVAR(export_symbols_cmds, $1)='$NM -Bpg $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\") || (\\$ 2 == \"W\")) && ([substr](\\$ 3,1,1) != \".\")) { if (\\$ 2 == \"W\") { print \\$ 3 \" weak\" } else { print \\$ 3 } } }'\\'' | sort -u > $export_symbols'\n    else\n      _LT_TAGVAR(export_symbols_cmds, $1)='`func_echo_all $NM | $SED -e '\\''s/B\\([[^B]]*\\)$/P\\1/'\\''` -PCpgl $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\") || (\\$ 2 == \"W\") || (\\$ 2 == \"V\") || (\\$ 2 == \"Z\")) && ([substr](\\$ 1,1,1) != \".\")) { if ((\\$ 2 == \"W\") || (\\$ 2 == \"V\") || (\\$ 2 == \"Z\")) { print \\$ 1 \" weak\" } else { print \\$ 1 } } }'\\'' | sort -u > $export_symbols'\n    fi\n    ;;\n  pw32*)\n    _LT_TAGVAR(export_symbols_cmds, $1)=$ltdll_cmds\n    ;;\n  cygwin* | mingw* | cegcc*)\n    case $cc_basename in\n    cl*)\n      _LT_TAGVAR(exclude_expsyms, $1)='_NULL_IMPORT_DESCRIPTOR|_IMPORT_DESCRIPTOR_.*'\n      ;;\n    *)\n      _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED -e '\\''/^[[BCDGRS]][[ ]]/s/.*[[ ]]\\([[^ ]]*\\)/\\1 DATA/;s/^.*[[ ]]__nm__\\([[^ ]]*\\)[[ ]][[^ ]]*/\\1 DATA/;/^I[[ ]]/d;/^[[AITW]][[ ]]/s/.* //'\\'' | sort | uniq > $export_symbols'\n      _LT_TAGVAR(exclude_expsyms, $1)=['[_]+GLOBAL_OFFSET_TABLE_|[_]+GLOBAL__[FID]_.*|[_]+head_[A-Za-z0-9_]+_dll|[A-Za-z0-9_]+_dll_iname']\n      ;;\n    esac\n    ;;\n  *)\n    _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\\''s/.* //'\\'' | sort | uniq > $export_symbols'\n    ;;\n  esac\n], [\n  runpath_var=\n  _LT_TAGVAR(allow_undefined_flag, $1)=\n  _LT_TAGVAR(always_export_symbols, $1)=no\n  _LT_TAGVAR(archive_cmds, $1)=\n  _LT_TAGVAR(archive_expsym_cmds, $1)=\n  _LT_TAGVAR(compiler_needs_object, $1)=no\n  _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n  _LT_TAGVAR(export_dynamic_flag_spec, $1)=\n  _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\\''s/.* //'\\'' | sort | uniq > $export_symbols'\n  _LT_TAGVAR(hardcode_automatic, $1)=no\n  _LT_TAGVAR(hardcode_direct, $1)=no\n  _LT_TAGVAR(hardcode_direct_absolute, $1)=no\n  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n  _LT_TAGVAR(hardcode_libdir_separator, $1)=\n  _LT_TAGVAR(hardcode_minus_L, $1)=no\n  _LT_TAGVAR(hardcode_shlibpath_var, $1)=unsupported\n  _LT_TAGVAR(inherit_rpath, $1)=no\n  _LT_TAGVAR(link_all_deplibs, $1)=unknown\n  _LT_TAGVAR(module_cmds, $1)=\n  _LT_TAGVAR(module_expsym_cmds, $1)=\n  _LT_TAGVAR(old_archive_from_new_cmds, $1)=\n  _LT_TAGVAR(old_archive_from_expsyms_cmds, $1)=\n  _LT_TAGVAR(thread_safe_flag_spec, $1)=\n  _LT_TAGVAR(whole_archive_flag_spec, $1)=\n  # include_expsyms should be a list of space-separated symbols to be *always*\n  # included in the symbol list\n  _LT_TAGVAR(include_expsyms, $1)=\n  # exclude_expsyms can be an extended regexp of symbols to exclude\n  # it will be wrapped by ' (' and ')$', so one must not match beginning or\n  # end of line.  Example: 'a|bc|.*d.*' will exclude the symbols 'a' and 'bc',\n  # as well as any symbol that contains 'd'.\n  _LT_TAGVAR(exclude_expsyms, $1)=['_GLOBAL_OFFSET_TABLE_|_GLOBAL__F[ID]_.*']\n  # Although _GLOBAL_OFFSET_TABLE_ is a valid symbol C name, most a.out\n  # platforms (ab)use it in PIC code, but their linkers get confused if\n  # the symbol is explicitly referenced.  Since portable code cannot\n  # rely on this symbol name, it's probably fine to never include it in\n  # preloaded symbol tables.\n  # Exclude shared library initialization/finalization symbols.\ndnl Note also adjust exclude_expsyms for C++ above.\n  extract_expsyms_cmds=\n\n  case $host_os in\n  cygwin* | mingw* | pw32* | cegcc*)\n    # FIXME: the MSVC++ port hasn't been tested in a loooong time\n    # When not using gcc, we currently assume that we are using\n    # Microsoft Visual C++.\n    if test yes != \"$GCC\"; then\n      with_gnu_ld=no\n    fi\n    ;;\n  interix*)\n    # we just hope/assume this is gcc and not c89 (= MSVC++)\n    with_gnu_ld=yes\n    ;;\n  openbsd* | bitrig*)\n    with_gnu_ld=no\n    ;;\n  esac\n\n  _LT_TAGVAR(ld_shlibs, $1)=yes\n\n  # On some targets, GNU ld is compatible enough with the native linker\n  # that we're better off using the native interface for both.\n  lt_use_gnu_ld_interface=no\n  if test yes = \"$with_gnu_ld\"; then\n    case $host_os in\n      aix*)\n\t# The AIX port of GNU ld has always aspired to compatibility\n\t# with the native linker.  However, as the warning in the GNU ld\n\t# block says, versions before 2.19.5* couldn't really create working\n\t# shared libraries, regardless of the interface used.\n\tcase `$LD -v 2>&1` in\n\t  *\\ \\(GNU\\ Binutils\\)\\ 2.19.5*) ;;\n\t  *\\ \\(GNU\\ Binutils\\)\\ 2.[[2-9]]*) ;;\n\t  *\\ \\(GNU\\ Binutils\\)\\ [[3-9]]*) ;;\n\t  *)\n\t    lt_use_gnu_ld_interface=yes\n\t    ;;\n\tesac\n\t;;\n      *)\n\tlt_use_gnu_ld_interface=yes\n\t;;\n    esac\n  fi\n\n  if test yes = \"$lt_use_gnu_ld_interface\"; then\n    # If archive_cmds runs LD, not CC, wlarc should be empty\n    wlarc='$wl'\n\n    # Set some defaults for GNU ld with shared library support. These\n    # are reset later if shared libraries are not supported. Putting them\n    # here allows them to be overridden if necessary.\n    runpath_var=LD_RUN_PATH\n    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n    # ancient GNU ld didn't support --whole-archive et. al.\n    if $LD --help 2>&1 | $GREP 'no-whole-archive' > /dev/null; then\n      _LT_TAGVAR(whole_archive_flag_spec, $1)=$wlarc'--whole-archive$convenience '$wlarc'--no-whole-archive'\n    else\n      _LT_TAGVAR(whole_archive_flag_spec, $1)=\n    fi\n    supports_anon_versioning=no\n    case `$LD -v | $SED -e 's/([^)]\\+)\\s\\+//' 2>&1` in\n      *GNU\\ gold*) supports_anon_versioning=yes ;;\n      *\\ [[01]].* | *\\ 2.[[0-9]].* | *\\ 2.10.*) ;; # catch versions < 2.11\n      *\\ 2.11.93.0.2\\ *) supports_anon_versioning=yes ;; # RH7.3 ...\n      *\\ 2.11.92.0.12\\ *) supports_anon_versioning=yes ;; # Mandrake 8.2 ...\n      *\\ 2.11.*) ;; # other 2.11 versions\n      *) supports_anon_versioning=yes ;;\n    esac\n\n    # See if GNU ld supports shared libraries.\n    case $host_os in\n    aix[[3-9]]*)\n      # On AIX/PPC, the GNU linker is very broken\n      if test ia64 != \"$host_cpu\"; then\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\tcat <<_LT_EOF 1>&2\n\n*** Warning: the GNU linker, at least up to release 2.19, is reported\n*** to be unable to reliably create shared libraries on AIX.\n*** Therefore, libtool is disabling shared libraries support.  If you\n*** really care for shared libraries, you may want to install binutils\n*** 2.20 or above, or modify your PATH so that a non-GNU linker is found.\n*** You will then need to restart the configuration process.\n\n_LT_EOF\n      fi\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n            _LT_TAGVAR(archive_expsym_cmds, $1)=''\n        ;;\n      m68k)\n            _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/a2ixlibrary.data~$ECHO \"#define NAME $libname\" > $output_objdir/a2ixlibrary.data~$ECHO \"#define LIBRARY_ID 1\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define VERSION $major\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define REVISION $revision\" >> $output_objdir/a2ixlibrary.data~$AR $AR_FLAGS $lib $libobjs~$RANLIB $lib~(cd $output_objdir && a2ixlibrary -32)'\n            _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n            _LT_TAGVAR(hardcode_minus_L, $1)=yes\n        ;;\n      esac\n      ;;\n\n    beos*)\n      if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t_LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t# Joseph Beckenbach <jrb3@best.com> says some releases of gcc\n\t# support --undefined.  This deserves some investigation.  FIXME\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -nostart $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    cygwin* | mingw* | pw32* | cegcc*)\n      # _LT_TAGVAR(hardcode_libdir_flag_spec, $1) is actually meaningless,\n      # as there is no search path for DLLs.\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-all-symbols'\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      _LT_TAGVAR(always_export_symbols, $1)=no\n      _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n      _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED -e '\\''/^[[BCDGRS]][[ ]]/s/.*[[ ]]\\([[^ ]]*\\)/\\1 DATA/;s/^.*[[ ]]__nm__\\([[^ ]]*\\)[[ ]][[^ ]]*/\\1 DATA/;/^I[[ ]]/d;/^[[AITW]][[ ]]/s/.* //'\\'' | sort | uniq > $export_symbols'\n      _LT_TAGVAR(exclude_expsyms, $1)=['[_]+GLOBAL_OFFSET_TABLE_|[_]+GLOBAL__[FID]_.*|[_]+head_[A-Za-z0-9_]+_dll|[A-Za-z0-9_]+_dll_iname']\n\n      if $LD --help 2>&1 | $GREP 'auto-import' > /dev/null; then\n        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags -o $output_objdir/$soname $wl--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n\t# If the export-symbols file already is a .def file, use it as\n\t# is; otherwise, prepend EXPORTS...\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='if _LT_DLL_DEF_P([$export_symbols]); then\n          cp $export_symbols $output_objdir/$soname.def;\n        else\n          echo EXPORTS > $output_objdir/$soname.def;\n          cat $export_symbols >> $output_objdir/$soname.def;\n        fi~\n        $CC -shared $output_objdir/$soname.def $libobjs $deplibs $compiler_flags -o $output_objdir/$soname $wl--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    haiku*)\n      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      ;;\n\n    os2*)\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      shrext_cmds=.dll\n      _LT_TAGVAR(archive_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t$ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t$ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t$ECHO EXPORTS >> $output_objdir/$libname.def~\n\temxexp $libobjs | $SED /\"_DLL_InitTerm\"/d >> $output_objdir/$libname.def~\n\t$CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\temximp -o $lib $output_objdir/$libname.def'\n      _LT_TAGVAR(archive_expsym_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t$ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t$ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t$ECHO EXPORTS >> $output_objdir/$libname.def~\n\tprefix_cmds=\"$SED\"~\n\tif test EXPORTS = \"`$SED 1q $export_symbols`\"; then\n\t  prefix_cmds=\"$prefix_cmds -e 1d\";\n\tfi~\n\tprefix_cmds=\"$prefix_cmds -e \\\"s/^\\(.*\\)$/_\\1/g\\\"\"~\n\tcat $export_symbols | $prefix_cmds >> $output_objdir/$libname.def~\n\t$CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\temximp -o $lib $output_objdir/$libname.def'\n      _LT_TAGVAR(old_archive_From_new_cmds, $1)='emximp -o $output_objdir/${libname}_dll.a $output_objdir/$libname.def'\n      _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n      ;;\n\n    interix[[3-9]]*)\n      _LT_TAGVAR(hardcode_direct, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n      # Hack: On Interix 3.x, we cannot compile PIC because of a broken gcc.\n      # Instead, shared libraries are loaded at an image base (0x10000000 by\n      # default) and relocated if they conflict, which is a slow very memory\n      # consuming and fragmenting process.  To avoid this, we pick a random,\n      # 256 KiB-aligned image base between 0x50000000 and 0x6FFC0000 at link\n      # time.  Moving up from 0x10000000 also allows more sbrk(2) space.\n      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-h,$soname $wl--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n      _LT_TAGVAR(archive_expsym_cmds, $1)='sed \"s|^|_|\" $export_symbols >$output_objdir/$soname.expsym~$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-h,$soname $wl--retain-symbols-file,$output_objdir/$soname.expsym $wl--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n      ;;\n\n    gnu* | linux* | tpf* | k*bsd*-gnu | kopensolaris*-gnu)\n      tmp_diet=no\n      if test linux-dietlibc = \"$host_os\"; then\n\tcase $cc_basename in\n\t  diet\\ *) tmp_diet=yes;;\t# linux-dietlibc with static linking (!diet-dyn)\n\tesac\n      fi\n      if $LD --help 2>&1 | $EGREP ': supported targets:.* elf' > /dev/null \\\n\t && test no = \"$tmp_diet\"\n      then\n\ttmp_addflag=' $pic_flag'\n\ttmp_sharedflag='-shared'\n\tcase $cc_basename,$host_cpu in\n        pgcc*)\t\t\t\t# Portland Group C compiler\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t  tmp_addflag=' $pic_flag'\n\t  ;;\n\tpgf77* | pgf90* | pgf95* | pgfortran*)\n\t\t\t\t\t# Portland Group f77 and f90 compilers\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t  tmp_addflag=' $pic_flag -Mnomain' ;;\n\tecc*,ia64* | icc*,ia64*)\t# Intel C compiler on ia64\n\t  tmp_addflag=' -i_dynamic' ;;\n\tefc*,ia64* | ifort*,ia64*)\t# Intel Fortran compiler on ia64\n\t  tmp_addflag=' -i_dynamic -nofor_main' ;;\n\tifc* | ifort*)\t\t\t# Intel Fortran compiler\n\t  tmp_addflag=' -nofor_main' ;;\n\tlf95*)\t\t\t\t# Lahey Fortran 8.1\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)=\n\t  tmp_sharedflag='--shared' ;;\n        nagfor*)                        # NAGFOR 5.3\n          tmp_sharedflag='-Wl,-shared' ;;\n\txl[[cC]]* | bgxl[[cC]]* | mpixl[[cC]]*) # IBM XL C 8.0 on PPC (deal with xlf below)\n\t  tmp_sharedflag='-qmkshrobj'\n\t  tmp_addflag= ;;\n\tnvcc*)\t# Cuda Compiler Driver 2.2\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t  _LT_TAGVAR(compiler_needs_object, $1)=yes\n\t  ;;\n\tesac\n\tcase `$CC -V 2>&1 | sed 5q` in\n\t*Sun\\ C*)\t\t\t# Sun C 5.9\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`new_convenience=; for conv in $convenience\\\"\\\"; do test -z \\\"$conv\\\" || new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t  _LT_TAGVAR(compiler_needs_object, $1)=yes\n\t  tmp_sharedflag='-G' ;;\n\t*Sun\\ F*)\t\t\t# Sun Fortran 8.3\n\t  tmp_sharedflag='-G' ;;\n\tesac\n\t_LT_TAGVAR(archive_cmds, $1)='$CC '\"$tmp_sharedflag\"\"$tmp_addflag\"' $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\n        if test yes = \"$supports_anon_versioning\"; then\n          _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $output_objdir/$libname.ver~\n            cat $export_symbols | sed -e \"s/\\(.*\\)/\\1;/\" >> $output_objdir/$libname.ver~\n            echo \"local: *; };\" >> $output_objdir/$libname.ver~\n            $CC '\"$tmp_sharedflag\"\"$tmp_addflag\"' $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-version-script $wl$output_objdir/$libname.ver -o $lib'\n        fi\n\n\tcase $cc_basename in\n\ttcc*)\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='-rdynamic'\n\t  ;;\n\txlf* | bgf* | bgxlf* | mpixlf*)\n\t  # IBM XL Fortran 10.1 on PPC cannot create shared libs itself\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='--whole-archive$convenience --no-whole-archive'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -shared $libobjs $deplibs $linker_flags -soname $soname -o $lib'\n\t  if test yes = \"$supports_anon_versioning\"; then\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $output_objdir/$libname.ver~\n              cat $export_symbols | sed -e \"s/\\(.*\\)/\\1;/\" >> $output_objdir/$libname.ver~\n              echo \"local: *; };\" >> $output_objdir/$libname.ver~\n              $LD -shared $libobjs $deplibs $linker_flags -soname $soname -version-script $output_objdir/$libname.ver -o $lib'\n\t  fi\n\t  ;;\n\tesac\n      else\n        _LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    netbsd*)\n      if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable $libobjs $deplibs $linker_flags -o $lib'\n\twlarc=\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n      fi\n      ;;\n\n    solaris*)\n      if $LD -v 2>&1 | $GREP 'BFD 2\\.8' > /dev/null; then\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\tcat <<_LT_EOF 1>&2\n\n*** Warning: The releases 2.8.* of the GNU linker cannot reliably\n*** create shared libraries on Solaris systems.  Therefore, libtool\n*** is disabling shared libraries support.  We urge you to upgrade GNU\n*** binutils to release 2.9.1 or newer.  Another option is to modify\n*** your PATH or compiler configuration so that the native linker is\n*** used, and then restart.\n\n_LT_EOF\n      elif $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    sysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX*)\n      case `$LD -v 2>&1` in\n        *\\ [[01]].* | *\\ 2.[[0-9]].* | *\\ 2.1[[0-5]].*)\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\tcat <<_LT_EOF 1>&2\n\n*** Warning: Releases of the GNU linker prior to 2.16.91.0.3 cannot\n*** reliably create shared libraries on SCO systems.  Therefore, libtool\n*** is disabling shared libraries support.  We urge you to upgrade GNU\n*** binutils to release 2.16.91.0.3 or newer.  Another option is to modify\n*** your PATH or compiler configuration so that the native linker is\n*** used, and then restart.\n\n_LT_EOF\n\t;;\n\t*)\n\t  # For security reasons, it is highly recommended that you always\n\t  # use absolute paths for naming shared libraries, and exclude the\n\t  # DT_RUNPATH tag from executables and libraries.  But doing so\n\t  # requires that you compile everything twice, which is a pain.\n\t  if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\t  else\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t  fi\n\t;;\n      esac\n      ;;\n\n    sunos4*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -assert pure-text -Bshareable -o $lib $libobjs $deplibs $linker_flags'\n      wlarc=\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    *)\n      if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n    esac\n\n    if test no = \"$_LT_TAGVAR(ld_shlibs, $1)\"; then\n      runpath_var=\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)=\n      _LT_TAGVAR(whole_archive_flag_spec, $1)=\n    fi\n  else\n    # PORTME fill in a description of your system's linker (not GNU ld)\n    case $host_os in\n    aix3*)\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      _LT_TAGVAR(always_export_symbols, $1)=yes\n      _LT_TAGVAR(archive_expsym_cmds, $1)='$LD -o $output_objdir/$soname $libobjs $deplibs $linker_flags -bE:$export_symbols -T512 -H512 -bM:SRE~$AR $AR_FLAGS $lib $output_objdir/$soname'\n      # Note: this linker hardcodes the directories in LIBPATH if there\n      # are no directories specified by -L.\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      if test yes = \"$GCC\" && test -z \"$lt_prog_compiler_static\"; then\n\t# Neither direct hardcoding nor static linking is supported with a\n\t# broken collect2.\n\t_LT_TAGVAR(hardcode_direct, $1)=unsupported\n      fi\n      ;;\n\n    aix[[4-9]]*)\n      if test ia64 = \"$host_cpu\"; then\n\t# On IA64, the linker does run time linking by default, so we don't\n\t# have to do anything special.\n\taix_use_runtimelinking=no\n\texp_sym_flag='-Bexport'\n\tno_entry_flag=\n      else\n\t# If we're using GNU nm, then we don't want the \"-C\" option.\n\t# -C means demangle to GNU nm, but means don't demangle to AIX nm.\n\t# Without the \"-l\" option, or with the \"-B\" option, AIX nm treats\n\t# weak defined symbols like other global defined symbols, whereas\n\t# GNU nm marks them as \"W\".\n\t# While the 'weak' keyword is ignored in the Export File, we need\n\t# it in the Import File for the 'aix-soname' feature, so we have\n\t# to replace the \"-B\" option with \"-P\" for AIX nm.\n\tif $NM -V 2>&1 | $GREP 'GNU' > /dev/null; then\n\t  _LT_TAGVAR(export_symbols_cmds, $1)='$NM -Bpg $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\") || (\\$ 2 == \"W\")) && ([substr](\\$ 3,1,1) != \".\")) { if (\\$ 2 == \"W\") { print \\$ 3 \" weak\" } else { print \\$ 3 } } }'\\'' | sort -u > $export_symbols'\n\telse\n\t  _LT_TAGVAR(export_symbols_cmds, $1)='`func_echo_all $NM | $SED -e '\\''s/B\\([[^B]]*\\)$/P\\1/'\\''` -PCpgl $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\") || (\\$ 2 == \"W\") || (\\$ 2 == \"V\") || (\\$ 2 == \"Z\")) && ([substr](\\$ 1,1,1) != \".\")) { if ((\\$ 2 == \"W\") || (\\$ 2 == \"V\") || (\\$ 2 == \"Z\")) { print \\$ 1 \" weak\" } else { print \\$ 1 } } }'\\'' | sort -u > $export_symbols'\n\tfi\n\taix_use_runtimelinking=no\n\n\t# Test if we are trying to use run time linking or normal\n\t# AIX style linking. If -brtl is somewhere in LDFLAGS, we\n\t# have runtime linking enabled, and use it for executables.\n\t# For shared libraries, we enable/disable runtime linking\n\t# depending on the kind of the shared library created -\n\t# when \"with_aix_soname,aix_use_runtimelinking\" is:\n\t# \"aix,no\"   lib.a(lib.so.V) shared, rtl:no,  for executables\n\t# \"aix,yes\"  lib.so          shared, rtl:yes, for executables\n\t#            lib.a           static archive\n\t# \"both,no\"  lib.so.V(shr.o) shared, rtl:yes\n\t#            lib.a(lib.so.V) shared, rtl:no,  for executables\n\t# \"both,yes\" lib.so.V(shr.o) shared, rtl:yes, for executables\n\t#            lib.a(lib.so.V) shared, rtl:no\n\t# \"svr4,*\"   lib.so.V(shr.o) shared, rtl:yes, for executables\n\t#            lib.a           static archive\n\tcase $host_os in aix4.[[23]]|aix4.[[23]].*|aix[[5-9]]*)\n\t  for ld_flag in $LDFLAGS; do\n\t  if (test x-brtl = \"x$ld_flag\" || test x-Wl,-brtl = \"x$ld_flag\"); then\n\t    aix_use_runtimelinking=yes\n\t    break\n\t  fi\n\t  done\n\t  if test svr4,no = \"$with_aix_soname,$aix_use_runtimelinking\"; then\n\t    # With aix-soname=svr4, we create the lib.so.V shared archives only,\n\t    # so we don't have lib.a shared libs to link our executables.\n\t    # We have to force runtime linking in this case.\n\t    aix_use_runtimelinking=yes\n\t    LDFLAGS=\"$LDFLAGS -Wl,-brtl\"\n\t  fi\n\t  ;;\n\tesac\n\n\texp_sym_flag='-bexport'\n\tno_entry_flag='-bnoentry'\n      fi\n\n      # When large executables or shared objects are built, AIX ld can\n      # have problems creating the table of contents.  If linking a library\n      # or program results in \"error TOC overflow\" add -mminimal-toc to\n      # CXXFLAGS/CFLAGS for g++/gcc.  In the cases where that is not\n      # enough to fix the problem, add -Wl,-bbigtoc to LDFLAGS.\n\n      _LT_TAGVAR(archive_cmds, $1)=''\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      _LT_TAGVAR(file_list_spec, $1)='$wl-f,'\n      case $with_aix_soname,$aix_use_runtimelinking in\n      aix,*) ;; # traditional, no import file\n      svr4,* | *,yes) # use import file\n\t# The Import File defines what to hardcode.\n\t_LT_TAGVAR(hardcode_direct, $1)=no\n\t_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n\t;;\n      esac\n\n      if test yes = \"$GCC\"; then\n\tcase $host_os in aix4.[[012]]|aix4.[[012]].*)\n\t# We only want to do this on AIX 4.2 and lower, the check\n\t# below for broken collect2 doesn't work under 4.3+\n\t  collect2name=`$CC -print-prog-name=collect2`\n\t  if test -f \"$collect2name\" &&\n\t   strings \"$collect2name\" | $GREP resolve_lib_name >/dev/null\n\t  then\n\t  # We have reworked collect2\n\t  :\n\t  else\n\t  # We have old collect2\n\t  _LT_TAGVAR(hardcode_direct, $1)=unsupported\n\t  # It fails to find uninstalled libraries when the uninstalled\n\t  # path is not listed in the libpath.  Setting hardcode_minus_L\n\t  # to unsupported forces relinking\n\t  _LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t  _LT_TAGVAR(hardcode_libdir_separator, $1)=\n\t  fi\n\t  ;;\n\tesac\n\tshared_flag='-shared'\n\tif test yes = \"$aix_use_runtimelinking\"; then\n\t  shared_flag=\"$shared_flag \"'$wl-G'\n\tfi\n\t# Need to ensure runtime linking is disabled for the traditional\n\t# shared library, or the linker may eventually find shared libraries\n\t# /with/ Import File - we do not want to mix them.\n\tshared_flag_aix='-shared'\n\tshared_flag_svr4='-shared $wl-G'\n      else\n\t# not using gcc\n\tif test ia64 = \"$host_cpu\"; then\n\t# VisualAge C++, Version 5.5 for AIX 5L for IA-64, Beta 3 Release\n\t# chokes on -Wl,-G. The following line is correct:\n\t  shared_flag='-G'\n\telse\n\t  if test yes = \"$aix_use_runtimelinking\"; then\n\t    shared_flag='$wl-G'\n\t  else\n\t    shared_flag='$wl-bM:SRE'\n\t  fi\n\t  shared_flag_aix='$wl-bM:SRE'\n\t  shared_flag_svr4='$wl-G'\n\tfi\n      fi\n\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-bexpall'\n      # It seems that -bexpall does not export symbols beginning with\n      # underscore (_), so it is better to generate a list of symbols to export.\n      _LT_TAGVAR(always_export_symbols, $1)=yes\n      if test aix,yes = \"$with_aix_soname,$aix_use_runtimelinking\"; then\n\t# Warning - without using the other runtime loading flags (-brtl),\n\t# -berok will link without error, but may produce a broken library.\n\t_LT_TAGVAR(allow_undefined_flag, $1)='-berok'\n        # Determine the default libpath from the value encoded in an\n        # empty executable.\n        _LT_SYS_MODULE_PATH_AIX([$1])\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-blibpath:$libdir:'\"$aix_libpath\"\n        _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $deplibs $wl'$no_entry_flag' $compiler_flags `if test -n \"$allow_undefined_flag\"; then func_echo_all \"$wl$allow_undefined_flag\"; else :; fi` $wl'$exp_sym_flag:\\$export_symbols' '$shared_flag\n      else\n\tif test ia64 = \"$host_cpu\"; then\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-R $libdir:/usr/lib:/lib'\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=\"-z nodefs\"\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)=\"\\$CC $shared_flag\"' -o $output_objdir/$soname $libobjs $deplibs '\"\\$wl$no_entry_flag\"' $compiler_flags $wl$allow_undefined_flag '\"\\$wl$exp_sym_flag:\\$export_symbols\"\n\telse\n\t # Determine the default libpath from the value encoded in an\n\t # empty executable.\n\t _LT_SYS_MODULE_PATH_AIX([$1])\n\t _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-blibpath:$libdir:'\"$aix_libpath\"\n\t  # Warning - without using the other run time loading flags,\n\t  # -berok will link without error, but may produce a broken library.\n\t  _LT_TAGVAR(no_undefined_flag, $1)=' $wl-bernotok'\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=' $wl-berok'\n\t  if test yes = \"$with_gnu_ld\"; then\n\t    # We only use this code for GNU lds that support --whole-archive.\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive$convenience $wl--no-whole-archive'\n\t  else\n\t    # Exported symbols can be pulled into shared objects from archives\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='$convenience'\n\t  fi\n\t  _LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$RM -r $output_objdir/$realname.d~$MKDIR $output_objdir/$realname.d'\n\t  # -brtl affects multiple linker settings, -berok does not and is overridden later\n\t  compiler_flags_filtered='`func_echo_all \"$compiler_flags \" | $SED -e \"s%-brtl\\\\([[, ]]\\\\)%-berok\\\\1%g\"`'\n\t  if test svr4 != \"$with_aix_soname\"; then\n\t    # This is similar to how AIX traditionally builds its shared libraries.\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$CC '$shared_flag_aix' -o $output_objdir/$realname.d/$soname $libobjs $deplibs $wl-bnoentry '$compiler_flags_filtered'$wl-bE:$export_symbols$allow_undefined_flag~$AR $AR_FLAGS $output_objdir/$libname$release.a $output_objdir/$realname.d/$soname'\n\t  fi\n\t  if test aix != \"$with_aix_soname\"; then\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$CC '$shared_flag_svr4' -o $output_objdir/$realname.d/$shared_archive_member_spec.o $libobjs $deplibs $wl-bnoentry '$compiler_flags_filtered'$wl-bE:$export_symbols$allow_undefined_flag~$STRIP -e $output_objdir/$realname.d/$shared_archive_member_spec.o~( func_echo_all \"#! $soname($shared_archive_member_spec.o)\"; if test shr_64 = \"$shared_archive_member_spec\"; then func_echo_all \"# 64\"; else func_echo_all \"# 32\"; fi; cat $export_symbols ) > $output_objdir/$realname.d/$shared_archive_member_spec.imp~$AR $AR_FLAGS $output_objdir/$soname $output_objdir/$realname.d/$shared_archive_member_spec.o $output_objdir/$realname.d/$shared_archive_member_spec.imp'\n\t  else\n\t    # used by -dlpreopen to get the symbols\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$MV  $output_objdir/$realname.d/$soname $output_objdir'\n\t  fi\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$RM -r $output_objdir/$realname.d'\n\tfi\n      fi\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n            _LT_TAGVAR(archive_expsym_cmds, $1)=''\n        ;;\n      m68k)\n            _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/a2ixlibrary.data~$ECHO \"#define NAME $libname\" > $output_objdir/a2ixlibrary.data~$ECHO \"#define LIBRARY_ID 1\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define VERSION $major\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define REVISION $revision\" >> $output_objdir/a2ixlibrary.data~$AR $AR_FLAGS $lib $libobjs~$RANLIB $lib~(cd $output_objdir && a2ixlibrary -32)'\n            _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n            _LT_TAGVAR(hardcode_minus_L, $1)=yes\n        ;;\n      esac\n      ;;\n\n    bsdi[[45]]*)\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)=-rdynamic\n      ;;\n\n    cygwin* | mingw* | pw32* | cegcc*)\n      # When not using gcc, we currently assume that we are using\n      # Microsoft Visual C++.\n      # hardcode_libdir_flag_spec is actually meaningless, as there is\n      # no search path for DLLs.\n      case $cc_basename in\n      cl*)\n\t# Native MSVC\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=' '\n\t_LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t_LT_TAGVAR(always_export_symbols, $1)=yes\n\t_LT_TAGVAR(file_list_spec, $1)='@'\n\t# Tell ltmain to make .lib files, not .a files.\n\tlibext=lib\n\t# Tell ltmain to make .dll files, not .so files.\n\tshrext_cmds=.dll\n\t# FIXME: Setting linknames here is a bad hack.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $compiler_flags $deplibs -Wl,-DLL,-IMPLIB:\"$tool_output_objdir$libname.dll.lib\"~linknames='\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='if _LT_DLL_DEF_P([$export_symbols]); then\n            cp \"$export_symbols\" \"$output_objdir/$soname.def\";\n            echo \"$tool_output_objdir$soname.def\" > \"$output_objdir/$soname.exp\";\n          else\n            $SED -e '\\''s/^/-link -EXPORT:/'\\'' < $export_symbols > $output_objdir/$soname.exp;\n          fi~\n          $CC -o $tool_output_objdir$soname $libobjs $compiler_flags $deplibs \"@$tool_output_objdir$soname.exp\" -Wl,-DLL,-IMPLIB:\"$tool_output_objdir$libname.dll.lib\"~\n          linknames='\n\t# The linker will not automatically build a static lib if we build a DLL.\n\t# _LT_TAGVAR(old_archive_from_new_cmds, $1)='true'\n\t_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\t_LT_TAGVAR(exclude_expsyms, $1)='_NULL_IMPORT_DESCRIPTOR|_IMPORT_DESCRIPTOR_.*'\n\t_LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED -e '\\''/^[[BCDGRS]][[ ]]/s/.*[[ ]]\\([[^ ]]*\\)/\\1,DATA/'\\'' | $SED -e '\\''/^[[AITW]][[ ]]/s/.*[[ ]]//'\\'' | sort | uniq > $export_symbols'\n\t# Don't use ranlib\n\t_LT_TAGVAR(old_postinstall_cmds, $1)='chmod 644 $oldlib'\n\t_LT_TAGVAR(postlink_cmds, $1)='lt_outputfile=\"@OUTPUT@\"~\n          lt_tool_outputfile=\"@TOOL_OUTPUT@\"~\n          case $lt_outputfile in\n            *.exe|*.EXE) ;;\n            *)\n              lt_outputfile=$lt_outputfile.exe\n              lt_tool_outputfile=$lt_tool_outputfile.exe\n              ;;\n          esac~\n          if test : != \"$MANIFEST_TOOL\" && test -f \"$lt_outputfile.manifest\"; then\n            $MANIFEST_TOOL -manifest \"$lt_tool_outputfile.manifest\" -outputresource:\"$lt_tool_outputfile\" || exit 1;\n            $RM \"$lt_outputfile.manifest\";\n          fi'\n\t;;\n      *)\n\t# Assume MSVC wrapper\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=' '\n\t_LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t# Tell ltmain to make .lib files, not .a files.\n\tlibext=lib\n\t# Tell ltmain to make .dll files, not .so files.\n\tshrext_cmds=.dll\n\t# FIXME: Setting linknames here is a bad hack.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -o $lib $libobjs $compiler_flags `func_echo_all \"$deplibs\" | $SED '\\''s/ -lc$//'\\''` -link -dll~linknames='\n\t# The linker will automatically build a .lib file if we build a DLL.\n\t_LT_TAGVAR(old_archive_from_new_cmds, $1)='true'\n\t# FIXME: Should let the user specify the lib program.\n\t_LT_TAGVAR(old_archive_cmds, $1)='lib -OUT:$oldlib$oldobjs$old_deplibs'\n\t_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\t;;\n      esac\n      ;;\n\n    darwin* | rhapsody*)\n      _LT_DARWIN_LINKER_FEATURES($1)\n      ;;\n\n    dgux*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    # FreeBSD 2.2.[012] allows us to include c++rt0.o to get C++ constructor\n    # support.  Future versions do this automatically, but an explicit c++rt0.o\n    # does not break anything, and helps significantly (at the cost of a little\n    # extra space).\n    freebsd2.2*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags /usr/lib/c++rt0.o'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    # Unfortunately, older versions of FreeBSD 2 do not have this feature.\n    freebsd2.*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    # FreeBSD 3 and greater uses gcc -shared to do shared libraries.\n    freebsd* | dragonfly*)\n      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    hpux9*)\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$CC -shared $pic_flag $wl+b $wl$install_libdir -o $output_objdir/$soname $libobjs $deplibs $compiler_flags~test \"x$output_objdir/$soname\" = \"x$lib\" || mv $output_objdir/$soname $lib'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$LD -b +b $install_libdir -o $output_objdir/$soname $libobjs $deplibs $linker_flags~test \"x$output_objdir/$soname\" = \"x$lib\" || mv $output_objdir/$soname $lib'\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl+b $wl$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n\n      # hardcode_minus_L: Not really in the search PATH,\n      # but as the default location of the library.\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n      ;;\n\n    hpux10*)\n      if test yes,no = \"$GCC,$with_gnu_ld\"; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -b +h $soname +b $install_libdir -o $lib $libobjs $deplibs $linker_flags'\n      fi\n      if test no = \"$with_gnu_ld\"; then\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl+b $wl$libdir'\n\t_LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\t_LT_TAGVAR(hardcode_direct, $1)=yes\n\t_LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n\t# hardcode_minus_L: Not really in the search PATH,\n\t# but as the default location of the library.\n\t_LT_TAGVAR(hardcode_minus_L, $1)=yes\n      fi\n      ;;\n\n    hpux11*)\n      if test yes,no = \"$GCC,$with_gnu_ld\"; then\n\tcase $host_cpu in\n\thppa*64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $wl+h $wl$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tia64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $wl+h $wl$soname $wl+nodefaultrpath -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\t*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tesac\n      else\n\tcase $host_cpu in\n\thppa*64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tia64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname $wl+nodefaultrpath -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\t*)\n\tm4_if($1, [], [\n\t  # Older versions of the 11.00 compiler do not understand -b yet\n\t  # (HP92453-01 A.11.01.20 doesn't, HP92453-01 B.11.X.35175-35176.GP does)\n\t  _LT_LINKER_OPTION([if $CC understands -b],\n\t    _LT_TAGVAR(lt_cv_prog_compiler__b, $1), [-b],\n\t    [_LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $libobjs $deplibs $compiler_flags'],\n\t    [_LT_TAGVAR(archive_cmds, $1)='$LD -b +h $soname +b $install_libdir -o $lib $libobjs $deplibs $linker_flags'])],\n\t  [_LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $libobjs $deplibs $compiler_flags'])\n\t  ;;\n\tesac\n      fi\n      if test no = \"$with_gnu_ld\"; then\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl+b $wl$libdir'\n\t_LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\tcase $host_cpu in\n\thppa*64*|ia64*)\n\t  _LT_TAGVAR(hardcode_direct, $1)=no\n\t  _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t  ;;\n\t*)\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes\n\t  _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n\n\t  # hardcode_minus_L: Not really in the search PATH,\n\t  # but as the default location of the library.\n\t  _LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t  ;;\n\tesac\n      fi\n      ;;\n\n    irix5* | irix6* | nonstopux*)\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n\t# Try to use the -exported_symbol ld option, if it does not\n\t# work, assume that -exports_file does not work either and\n\t# implicitly export all symbols.\n\t# This should be the same for all languages, so no per-tag cache variable.\n\tAC_CACHE_CHECK([whether the $host_os linker accepts -exported_symbol],\n\t  [lt_cv_irix_exported_symbol],\n\t  [save_LDFLAGS=$LDFLAGS\n\t   LDFLAGS=\"$LDFLAGS -shared $wl-exported_symbol ${wl}foo $wl-update_registry $wl/dev/null\"\n\t   AC_LINK_IFELSE(\n\t     [AC_LANG_SOURCE(\n\t        [AC_LANG_CASE([C], [[int foo (void) { return 0; }]],\n\t\t\t      [C++], [[int foo (void) { return 0; }]],\n\t\t\t      [Fortran 77], [[\n      subroutine foo\n      end]],\n\t\t\t      [Fortran], [[\n      subroutine foo\n      end]])])],\n\t      [lt_cv_irix_exported_symbol=yes],\n\t      [lt_cv_irix_exported_symbol=no])\n           LDFLAGS=$save_LDFLAGS])\n\tif test yes = \"$lt_cv_irix_exported_symbol\"; then\n          _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations $wl-exports_file $wl$export_symbols -o $lib'\n\tfi\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -exports_file $export_symbols -o $lib'\n      fi\n      _LT_TAGVAR(archive_cmds_need_lc, $1)='no'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      _LT_TAGVAR(inherit_rpath, $1)=yes\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      ;;\n\n    linux*)\n      case $cc_basename in\n      tcc*)\n\t# Fabrice Bellard et al's Tiny C Compiler\n\t_LT_TAGVAR(ld_shlibs, $1)=yes\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n\t;;\n      esac\n      ;;\n\n    netbsd*)\n      if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags'  # a.out\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -shared -o $lib $libobjs $deplibs $linker_flags'      # ELF\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    newsos6)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    *nto* | *qnx*)\n      ;;\n\n    openbsd* | bitrig*)\n      if test -f /usr/libexec/ld.so; then\n\t_LT_TAGVAR(hardcode_direct, $1)=yes\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t_LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\tif test -z \"`echo __ELF__ | $CC -E - | $GREP __ELF__`\"; then\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags $wl-retain-symbols-file,$export_symbols'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n\telse\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\tfi\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    os2*)\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      shrext_cmds=.dll\n      _LT_TAGVAR(archive_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t$ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t$ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t$ECHO EXPORTS >> $output_objdir/$libname.def~\n\temxexp $libobjs | $SED /\"_DLL_InitTerm\"/d >> $output_objdir/$libname.def~\n\t$CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\temximp -o $lib $output_objdir/$libname.def'\n      _LT_TAGVAR(archive_expsym_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t$ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t$ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t$ECHO EXPORTS >> $output_objdir/$libname.def~\n\tprefix_cmds=\"$SED\"~\n\tif test EXPORTS = \"`$SED 1q $export_symbols`\"; then\n\t  prefix_cmds=\"$prefix_cmds -e 1d\";\n\tfi~\n\tprefix_cmds=\"$prefix_cmds -e \\\"s/^\\(.*\\)$/_\\1/g\\\"\"~\n\tcat $export_symbols | $prefix_cmds >> $output_objdir/$libname.def~\n\t$CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\temximp -o $lib $output_objdir/$libname.def'\n      _LT_TAGVAR(old_archive_From_new_cmds, $1)='emximp -o $output_objdir/${libname}_dll.a $output_objdir/$libname.def'\n      _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n      ;;\n\n    osf3*)\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' $wl-expect_unresolved $wl\\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n      else\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' -expect_unresolved \\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $libobjs $deplibs $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n      fi\n      _LT_TAGVAR(archive_cmds_need_lc, $1)='no'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      ;;\n\n    osf4* | osf5*)\t# as osf3* with the addition of -msym flag\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' $wl-expect_unresolved $wl\\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $pic_flag $libobjs $deplibs $compiler_flags $wl-msym $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n      else\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' -expect_unresolved \\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $libobjs $deplibs $compiler_flags -msym -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='for i in `cat $export_symbols`; do printf \"%s %s\\\\n\" -exported_symbol \"\\$i\" >> $lib.exp; done; printf \"%s\\\\n\" \"-hidden\">> $lib.exp~\n          $CC -shared$allow_undefined_flag $wl-input $wl$lib.exp $compiler_flags $libobjs $deplibs -soname $soname `test -n \"$verstring\" && $ECHO \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib~$RM $lib.exp'\n\n\t# Both c and cxx compiler support -rpath directly\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-rpath $libdir'\n      fi\n      _LT_TAGVAR(archive_cmds_need_lc, $1)='no'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      ;;\n\n    solaris*)\n      _LT_TAGVAR(no_undefined_flag, $1)=' -z defs'\n      if test yes = \"$GCC\"; then\n\twlarc='$wl'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $wl-z ${wl}text $wl-h $wl$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n          $CC -shared $pic_flag $wl-z ${wl}text $wl-M $wl$lib.exp $wl-h $wl$soname -o $lib $libobjs $deplibs $compiler_flags~$RM $lib.exp'\n      else\n\tcase `$CC -V 2>&1` in\n\t*\"Compilers 5.0\"*)\n\t  wlarc=''\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G$allow_undefined_flag -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n            $LD -G$allow_undefined_flag -M $lib.exp -h $soname -o $lib $libobjs $deplibs $linker_flags~$RM $lib.exp'\n\t  ;;\n\t*)\n\t  wlarc='$wl'\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -G$allow_undefined_flag -h $soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n            $CC -G$allow_undefined_flag -M $lib.exp -h $soname -o $lib $libobjs $deplibs $compiler_flags~$RM $lib.exp'\n\t  ;;\n\tesac\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      case $host_os in\n      solaris2.[[0-5]] | solaris2.[[0-5]].*) ;;\n      *)\n\t# The compiler driver will combine and reorder linker options,\n\t# but understands '-z linker_flag'.  GCC discards it without '$wl',\n\t# but is careful enough not to reorder.\n\t# Supported since Solaris 2.6 (maybe 2.5.1?)\n\tif test yes = \"$GCC\"; then\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl-z ${wl}allextract$convenience $wl-z ${wl}defaultextract'\n\telse\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='-z allextract$convenience -z defaultextract'\n\tfi\n\t;;\n      esac\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      ;;\n\n    sunos4*)\n      if test sequent = \"$host_vendor\"; then\n\t# Use $CC to link under sequent, because it throws in some extra .o\n\t# files that make .init and .fini sections work.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -G $wl-h $soname -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -assert pure-text -Bstatic -o $lib $libobjs $deplibs $linker_flags'\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    sysv4)\n      case $host_vendor in\n\tsni)\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes # is this really true???\n\t;;\n\tsiemens)\n\t  ## LD is ld it makes a PLAMLIB\n\t  ## CC just makes a GrossModule.\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(reload_cmds, $1)='$CC -r -o $output$reload_objs'\n\t  _LT_TAGVAR(hardcode_direct, $1)=no\n        ;;\n\tmotorola)\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(hardcode_direct, $1)=no #Motorola manual says yes, but my tests say they lie\n\t;;\n      esac\n      runpath_var='LD_RUN_PATH'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    sysv4.3*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='-Bexport'\n      ;;\n\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\trunpath_var=LD_RUN_PATH\n\thardcode_runpath_var=yes\n\t_LT_TAGVAR(ld_shlibs, $1)=yes\n      fi\n      ;;\n\n    sysv4*uw2* | sysv5OpenUNIX* | sysv5UnixWare7.[[01]].[[10]]* | unixware7* | sco3.2v5.0.[[024]]*)\n      _LT_TAGVAR(no_undefined_flag, $1)='$wl-z,text'\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      runpath_var='LD_RUN_PATH'\n\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -G $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      fi\n      ;;\n\n    sysv5* | sco3.2v5* | sco5v6*)\n      # Note: We CANNOT use -z defs as we might desire, because we do not\n      # link with -lc, and that would cause any symbols used from libc to\n      # always be unresolved, which means just about no library would\n      # ever link correctly.  If we're not using GNU ld we use -z text\n      # though, which does catch some bad symbols but isn't as heavy-handed\n      # as -z defs.\n      _LT_TAGVAR(no_undefined_flag, $1)='$wl-z,text'\n      _LT_TAGVAR(allow_undefined_flag, $1)='$wl-z,nodefs'\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-R,$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-Bexport'\n      runpath_var='LD_RUN_PATH'\n\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -G $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      fi\n      ;;\n\n    uts4*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    *)\n      _LT_TAGVAR(ld_shlibs, $1)=no\n      ;;\n    esac\n\n    if test sni = \"$host_vendor\"; then\n      case $host in\n      sysv4 | sysv4.2uw2* | sysv4.3* | sysv5*)\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-Blargedynsym'\n\t;;\n      esac\n    fi\n  fi\n])\nAC_MSG_RESULT([$_LT_TAGVAR(ld_shlibs, $1)])\ntest no = \"$_LT_TAGVAR(ld_shlibs, $1)\" && can_build_shared=no\n\n_LT_TAGVAR(with_gnu_ld, $1)=$with_gnu_ld\n\n_LT_DECL([], [libext], [0], [Old archive suffix (normally \"a\")])dnl\n_LT_DECL([], [shrext_cmds], [1], [Shared library suffix (normally \".so\")])dnl\n_LT_DECL([], [extract_expsyms_cmds], [2],\n    [The commands to extract the exported symbol list from a shared archive])\n\n#\n# Do we need to explicitly link libc?\n#\ncase \"x$_LT_TAGVAR(archive_cmds_need_lc, $1)\" in\nx|xyes)\n  # Assume -lc should be added\n  _LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\n  if test yes,yes = \"$GCC,$enable_shared\"; then\n    case $_LT_TAGVAR(archive_cmds, $1) in\n    *'~'*)\n      # FIXME: we may have to deal with multi-command sequences.\n      ;;\n    '$CC '*)\n      # Test whether the compiler implicitly links with -lc since on some\n      # systems, -lgcc has to come before -lc. If gcc already passes -lc\n      # to ld, don't add -lc before -lgcc.\n      AC_CACHE_CHECK([whether -lc should be explicitly linked in],\n\t[lt_cv_]_LT_TAGVAR(archive_cmds_need_lc, $1),\n\t[$RM conftest*\n\techo \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n\n\tif AC_TRY_EVAL(ac_compile) 2>conftest.err; then\n\t  soname=conftest\n\t  lib=conftest\n\t  libobjs=conftest.$ac_objext\n\t  deplibs=\n\t  wl=$_LT_TAGVAR(lt_prog_compiler_wl, $1)\n\t  pic_flag=$_LT_TAGVAR(lt_prog_compiler_pic, $1)\n\t  compiler_flags=-v\n\t  linker_flags=-v\n\t  verstring=\n\t  output_objdir=.\n\t  libname=conftest\n\t  lt_save_allow_undefined_flag=$_LT_TAGVAR(allow_undefined_flag, $1)\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=\n\t  if AC_TRY_EVAL(_LT_TAGVAR(archive_cmds, $1) 2\\>\\&1 \\| $GREP \\\" -lc \\\" \\>/dev/null 2\\>\\&1)\n\t  then\n\t    lt_cv_[]_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\t  else\n\t    lt_cv_[]_LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\t  fi\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=$lt_save_allow_undefined_flag\n\telse\n\t  cat conftest.err 1>&5\n\tfi\n\t$RM conftest*\n\t])\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=$lt_cv_[]_LT_TAGVAR(archive_cmds_need_lc, $1)\n      ;;\n    esac\n  fi\n  ;;\nesac\n\n_LT_TAGDECL([build_libtool_need_lc], [archive_cmds_need_lc], [0],\n    [Whether or not to add -lc for building shared libraries])\n_LT_TAGDECL([allow_libtool_libs_with_static_runtimes],\n    [enable_shared_with_static_runtimes], [0],\n    [Whether or not to disallow shared libs when runtime libs are static])\n_LT_TAGDECL([], [export_dynamic_flag_spec], [1],\n    [Compiler flag to allow reflexive dlopens])\n_LT_TAGDECL([], [whole_archive_flag_spec], [1],\n    [Compiler flag to generate shared objects directly from archives])\n_LT_TAGDECL([], [compiler_needs_object], [1],\n    [Whether the compiler copes with passing no objects directly])\n_LT_TAGDECL([], [old_archive_from_new_cmds], [2],\n    [Create an old-style archive from a shared archive])\n_LT_TAGDECL([], [old_archive_from_expsyms_cmds], [2],\n    [Create a temporary old-style archive to link instead of a shared archive])\n_LT_TAGDECL([], [archive_cmds], [2], [Commands used to build a shared archive])\n_LT_TAGDECL([], [archive_expsym_cmds], [2])\n_LT_TAGDECL([], [module_cmds], [2],\n    [Commands used to build a loadable module if different from building\n    a shared archive.])\n_LT_TAGDECL([], [module_expsym_cmds], [2])\n_LT_TAGDECL([], [with_gnu_ld], [1],\n    [Whether we are building with GNU ld or not])\n_LT_TAGDECL([], [allow_undefined_flag], [1],\n    [Flag that allows shared libraries with undefined symbols to be built])\n_LT_TAGDECL([], [no_undefined_flag], [1],\n    [Flag that enforces no undefined symbols])\n_LT_TAGDECL([], [hardcode_libdir_flag_spec], [1],\n    [Flag to hardcode $libdir into a binary during linking.\n    This must work even if $libdir does not exist])\n_LT_TAGDECL([], [hardcode_libdir_separator], [1],\n    [Whether we need a single \"-rpath\" flag with a separated argument])\n_LT_TAGDECL([], [hardcode_direct], [0],\n    [Set to \"yes\" if using DIR/libNAME$shared_ext during linking hardcodes\n    DIR into the resulting binary])\n_LT_TAGDECL([], [hardcode_direct_absolute], [0],\n    [Set to \"yes\" if using DIR/libNAME$shared_ext during linking hardcodes\n    DIR into the resulting binary and the resulting library dependency is\n    \"absolute\", i.e impossible to change by setting $shlibpath_var if the\n    library is relocated])\n_LT_TAGDECL([], [hardcode_minus_L], [0],\n    [Set to \"yes\" if using the -LDIR flag during linking hardcodes DIR\n    into the resulting binary])\n_LT_TAGDECL([], [hardcode_shlibpath_var], [0],\n    [Set to \"yes\" if using SHLIBPATH_VAR=DIR during linking hardcodes DIR\n    into the resulting binary])\n_LT_TAGDECL([], [hardcode_automatic], [0],\n    [Set to \"yes\" if building a shared library automatically hardcodes DIR\n    into the library and all subsequent libraries and executables linked\n    against it])\n_LT_TAGDECL([], [inherit_rpath], [0],\n    [Set to yes if linker adds runtime paths of dependent libraries\n    to runtime path list])\n_LT_TAGDECL([], [link_all_deplibs], [0],\n    [Whether libtool must link a program against all its dependency libraries])\n_LT_TAGDECL([], [always_export_symbols], [0],\n    [Set to \"yes\" if exported symbols are required])\n_LT_TAGDECL([], [export_symbols_cmds], [2],\n    [The commands to list exported symbols])\n_LT_TAGDECL([], [exclude_expsyms], [1],\n    [Symbols that should not be listed in the preloaded symbols])\n_LT_TAGDECL([], [include_expsyms], [1],\n    [Symbols that must always be exported])\n_LT_TAGDECL([], [prelink_cmds], [2],\n    [Commands necessary for linking programs (against libraries) with templates])\n_LT_TAGDECL([], [postlink_cmds], [2],\n    [Commands necessary for finishing linking programs])\n_LT_TAGDECL([], [file_list_spec], [1],\n    [Specify filename containing input files])\ndnl FIXME: Not yet implemented\ndnl _LT_TAGDECL([], [thread_safe_flag_spec], [1],\ndnl    [Compiler flag to generate thread safe objects])\n])# _LT_LINKER_SHLIBS\n\n\n# _LT_LANG_C_CONFIG([TAG])\n# ------------------------\n# Ensure that the configuration variables for a C compiler are suitably\n# defined.  These variables are subsequently used by _LT_CONFIG to write\n# the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_C_CONFIG],\n[m4_require([_LT_DECL_EGREP])dnl\nlt_save_CC=$CC\nAC_LANG_PUSH(C)\n\n# Source file extension for C test sources.\nac_ext=c\n\n# Object file extension for compiled C test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code=\"int some_variable = 0;\"\n\n# Code to be used in simple link tests\nlt_simple_link_test_code='int main(){return(0);}'\n\n_LT_TAG_COMPILER\n# Save the default compiler, since it gets overwritten when the other\n# tags are being tested, and _LT_TAGVAR(compiler, []) is a NOP.\ncompiler_DEFAULT=$CC\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n## CAVEAT EMPTOR:\n## There is no encapsulation within the following macros, do not change\n## the running order or otherwise move them around unless you know exactly\n## what you are doing...\nif test -n \"$compiler\"; then\n  _LT_COMPILER_NO_RTTI($1)\n  _LT_COMPILER_PIC($1)\n  _LT_COMPILER_C_O($1)\n  _LT_COMPILER_FILE_LOCKS($1)\n  _LT_LINKER_SHLIBS($1)\n  _LT_SYS_DYNAMIC_LINKER($1)\n  _LT_LINKER_HARDCODE_LIBPATH($1)\n  LT_SYS_DLOPEN_SELF\n  _LT_CMD_STRIPLIB\n\n  # Report what library types will actually be built\n  AC_MSG_CHECKING([if libtool supports shared libraries])\n  AC_MSG_RESULT([$can_build_shared])\n\n  AC_MSG_CHECKING([whether to build shared libraries])\n  test no = \"$can_build_shared\" && enable_shared=no\n\n  # On AIX, shared libraries and static libraries use the same namespace, and\n  # are all built from PIC.\n  case $host_os in\n  aix3*)\n    test yes = \"$enable_shared\" && enable_static=no\n    if test -n \"$RANLIB\"; then\n      archive_cmds=\"$archive_cmds~\\$RANLIB \\$lib\"\n      postinstall_cmds='$RANLIB $lib'\n    fi\n    ;;\n\n  aix[[4-9]]*)\n    if test ia64 != \"$host_cpu\"; then\n      case $enable_shared,$with_aix_soname,$aix_use_runtimelinking in\n      yes,aix,yes) ;;\t\t\t# shared object as lib.so file only\n      yes,svr4,*) ;;\t\t\t# shared object as lib.so archive member only\n      yes,*) enable_static=no ;;\t# shared object in lib.a archive as well\n      esac\n    fi\n    ;;\n  esac\n  AC_MSG_RESULT([$enable_shared])\n\n  AC_MSG_CHECKING([whether to build static libraries])\n  # Make sure either enable_shared or enable_static is yes.\n  test yes = \"$enable_shared\" || enable_static=yes\n  AC_MSG_RESULT([$enable_static])\n\n  _LT_CONFIG($1)\nfi\nAC_LANG_POP\nCC=$lt_save_CC\n])# _LT_LANG_C_CONFIG\n\n\n# _LT_LANG_CXX_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for a C++ compiler are suitably\n# defined.  These variables are subsequently used by _LT_CONFIG to write\n# the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_CXX_CONFIG],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_PATH_MANIFEST_TOOL])dnl\nif test -n \"$CXX\" && ( test no != \"$CXX\" &&\n    ( (test g++ = \"$CXX\" && `g++ -v >/dev/null 2>&1` ) ||\n    (test g++ != \"$CXX\"))); then\n  AC_PROG_CXXCPP\nelse\n  _lt_caught_CXX_error=yes\nfi\n\nAC_LANG_PUSH(C++)\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n_LT_TAGVAR(allow_undefined_flag, $1)=\n_LT_TAGVAR(always_export_symbols, $1)=no\n_LT_TAGVAR(archive_expsym_cmds, $1)=\n_LT_TAGVAR(compiler_needs_object, $1)=no\n_LT_TAGVAR(export_dynamic_flag_spec, $1)=\n_LT_TAGVAR(hardcode_direct, $1)=no\n_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n_LT_TAGVAR(hardcode_libdir_separator, $1)=\n_LT_TAGVAR(hardcode_minus_L, $1)=no\n_LT_TAGVAR(hardcode_shlibpath_var, $1)=unsupported\n_LT_TAGVAR(hardcode_automatic, $1)=no\n_LT_TAGVAR(inherit_rpath, $1)=no\n_LT_TAGVAR(module_cmds, $1)=\n_LT_TAGVAR(module_expsym_cmds, $1)=\n_LT_TAGVAR(link_all_deplibs, $1)=unknown\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n_LT_TAGVAR(no_undefined_flag, $1)=\n_LT_TAGVAR(whole_archive_flag_spec, $1)=\n_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n\n# Source file extension for C++ test sources.\nac_ext=cpp\n\n# Object file extension for compiled C++ test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# No sense in running all these tests if we already determined that\n# the CXX compiler isn't working.  Some variables (like enable_shared)\n# are currently assumed to apply to all compilers on this platform,\n# and will be corrupted by setting them based on a non-working compiler.\nif test yes != \"$_lt_caught_CXX_error\"; then\n  # Code to be used in simple compile tests\n  lt_simple_compile_test_code=\"int some_variable = 0;\"\n\n  # Code to be used in simple link tests\n  lt_simple_link_test_code='int main(int, char *[[]]) { return(0); }'\n\n  # ltmain only uses $CC for tagged configurations so make sure $CC is set.\n  _LT_TAG_COMPILER\n\n  # save warnings/boilerplate of simple test code\n  _LT_COMPILER_BOILERPLATE\n  _LT_LINKER_BOILERPLATE\n\n  # Allow CC to be a program name with arguments.\n  lt_save_CC=$CC\n  lt_save_CFLAGS=$CFLAGS\n  lt_save_LD=$LD\n  lt_save_GCC=$GCC\n  GCC=$GXX\n  lt_save_with_gnu_ld=$with_gnu_ld\n  lt_save_path_LD=$lt_cv_path_LD\n  if test -n \"${lt_cv_prog_gnu_ldcxx+set}\"; then\n    lt_cv_prog_gnu_ld=$lt_cv_prog_gnu_ldcxx\n  else\n    $as_unset lt_cv_prog_gnu_ld\n  fi\n  if test -n \"${lt_cv_path_LDCXX+set}\"; then\n    lt_cv_path_LD=$lt_cv_path_LDCXX\n  else\n    $as_unset lt_cv_path_LD\n  fi\n  test -z \"${LDCXX+set}\" || LD=$LDCXX\n  CC=${CXX-\"c++\"}\n  CFLAGS=$CXXFLAGS\n  compiler=$CC\n  _LT_TAGVAR(compiler, $1)=$CC\n  _LT_CC_BASENAME([$compiler])\n\n  if test -n \"$compiler\"; then\n    # We don't want -fno-exception when compiling C++ code, so set the\n    # no_builtin_flag separately\n    if test yes = \"$GXX\"; then\n      _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=' -fno-builtin'\n    else\n      _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=\n    fi\n\n    if test yes = \"$GXX\"; then\n      # Set up default GNU C++ configuration\n\n      LT_PATH_LD\n\n      # Check if GNU C++ uses GNU ld as the underlying linker, since the\n      # archiving commands below assume that GNU ld is being used.\n      if test yes = \"$with_gnu_ld\"; then\n        _LT_TAGVAR(archive_cmds, $1)='$CC $pic_flag -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname -o $lib'\n        _LT_TAGVAR(archive_expsym_cmds, $1)='$CC $pic_flag -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n        _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n\n        # If archive_cmds runs LD, not CC, wlarc should be empty\n        # XXX I think wlarc can be eliminated in ltcf-cxx, but I need to\n        #     investigate it a little bit more. (MM)\n        wlarc='$wl'\n\n        # ancient GNU ld didn't support --whole-archive et. al.\n        if eval \"`$CC -print-prog-name=ld` --help 2>&1\" |\n\t  $GREP 'no-whole-archive' > /dev/null; then\n          _LT_TAGVAR(whole_archive_flag_spec, $1)=$wlarc'--whole-archive$convenience '$wlarc'--no-whole-archive'\n        else\n          _LT_TAGVAR(whole_archive_flag_spec, $1)=\n        fi\n      else\n        with_gnu_ld=no\n        wlarc=\n\n        # A generic and very simple default shared library creation\n        # command for GNU C++ for the case where it uses the native\n        # linker, instead of GNU ld.  If possible, this setting should\n        # overridden to take advantage of the native linker features on\n        # the platform it is being used on.\n        _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $lib'\n      fi\n\n      # Commands to make compiler produce verbose output that lists\n      # what \"hidden\" libraries, object files and flags are used when\n      # linking a shared library.\n      output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\n    else\n      GXX=no\n      with_gnu_ld=no\n      wlarc=\n    fi\n\n    # PORTME: fill in a description of your system's C++ link characteristics\n    AC_MSG_CHECKING([whether the $compiler linker ($LD) supports shared libraries])\n    _LT_TAGVAR(ld_shlibs, $1)=yes\n    case $host_os in\n      aix3*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n      aix[[4-9]]*)\n        if test ia64 = \"$host_cpu\"; then\n          # On IA64, the linker does run time linking by default, so we don't\n          # have to do anything special.\n          aix_use_runtimelinking=no\n          exp_sym_flag='-Bexport'\n          no_entry_flag=\n        else\n          aix_use_runtimelinking=no\n\n          # Test if we are trying to use run time linking or normal\n          # AIX style linking. If -brtl is somewhere in LDFLAGS, we\n          # have runtime linking enabled, and use it for executables.\n          # For shared libraries, we enable/disable runtime linking\n          # depending on the kind of the shared library created -\n          # when \"with_aix_soname,aix_use_runtimelinking\" is:\n          # \"aix,no\"   lib.a(lib.so.V) shared, rtl:no,  for executables\n          # \"aix,yes\"  lib.so          shared, rtl:yes, for executables\n          #            lib.a           static archive\n          # \"both,no\"  lib.so.V(shr.o) shared, rtl:yes\n          #            lib.a(lib.so.V) shared, rtl:no,  for executables\n          # \"both,yes\" lib.so.V(shr.o) shared, rtl:yes, for executables\n          #            lib.a(lib.so.V) shared, rtl:no\n          # \"svr4,*\"   lib.so.V(shr.o) shared, rtl:yes, for executables\n          #            lib.a           static archive\n          case $host_os in aix4.[[23]]|aix4.[[23]].*|aix[[5-9]]*)\n\t    for ld_flag in $LDFLAGS; do\n\t      case $ld_flag in\n\t      *-brtl*)\n\t        aix_use_runtimelinking=yes\n\t        break\n\t        ;;\n\t      esac\n\t    done\n\t    if test svr4,no = \"$with_aix_soname,$aix_use_runtimelinking\"; then\n\t      # With aix-soname=svr4, we create the lib.so.V shared archives only,\n\t      # so we don't have lib.a shared libs to link our executables.\n\t      # We have to force runtime linking in this case.\n\t      aix_use_runtimelinking=yes\n\t      LDFLAGS=\"$LDFLAGS -Wl,-brtl\"\n\t    fi\n\t    ;;\n          esac\n\n          exp_sym_flag='-bexport'\n          no_entry_flag='-bnoentry'\n        fi\n\n        # When large executables or shared objects are built, AIX ld can\n        # have problems creating the table of contents.  If linking a library\n        # or program results in \"error TOC overflow\" add -mminimal-toc to\n        # CXXFLAGS/CFLAGS for g++/gcc.  In the cases where that is not\n        # enough to fix the problem, add -Wl,-bbigtoc to LDFLAGS.\n\n        _LT_TAGVAR(archive_cmds, $1)=''\n        _LT_TAGVAR(hardcode_direct, $1)=yes\n        _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n        _LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n        _LT_TAGVAR(link_all_deplibs, $1)=yes\n        _LT_TAGVAR(file_list_spec, $1)='$wl-f,'\n        case $with_aix_soname,$aix_use_runtimelinking in\n        aix,*) ;;\t# no import file\n        svr4,* | *,yes) # use import file\n          # The Import File defines what to hardcode.\n          _LT_TAGVAR(hardcode_direct, $1)=no\n          _LT_TAGVAR(hardcode_direct_absolute, $1)=no\n          ;;\n        esac\n\n        if test yes = \"$GXX\"; then\n          case $host_os in aix4.[[012]]|aix4.[[012]].*)\n          # We only want to do this on AIX 4.2 and lower, the check\n          # below for broken collect2 doesn't work under 4.3+\n\t  collect2name=`$CC -print-prog-name=collect2`\n\t  if test -f \"$collect2name\" &&\n\t     strings \"$collect2name\" | $GREP resolve_lib_name >/dev/null\n\t  then\n\t    # We have reworked collect2\n\t    :\n\t  else\n\t    # We have old collect2\n\t    _LT_TAGVAR(hardcode_direct, $1)=unsupported\n\t    # It fails to find uninstalled libraries when the uninstalled\n\t    # path is not listed in the libpath.  Setting hardcode_minus_L\n\t    # to unsupported forces relinking\n\t    _LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=\n\t  fi\n          esac\n          shared_flag='-shared'\n\t  if test yes = \"$aix_use_runtimelinking\"; then\n\t    shared_flag=$shared_flag' $wl-G'\n\t  fi\n\t  # Need to ensure runtime linking is disabled for the traditional\n\t  # shared library, or the linker may eventually find shared libraries\n\t  # /with/ Import File - we do not want to mix them.\n\t  shared_flag_aix='-shared'\n\t  shared_flag_svr4='-shared $wl-G'\n        else\n          # not using gcc\n          if test ia64 = \"$host_cpu\"; then\n\t  # VisualAge C++, Version 5.5 for AIX 5L for IA-64, Beta 3 Release\n\t  # chokes on -Wl,-G. The following line is correct:\n\t  shared_flag='-G'\n          else\n\t    if test yes = \"$aix_use_runtimelinking\"; then\n\t      shared_flag='$wl-G'\n\t    else\n\t      shared_flag='$wl-bM:SRE'\n\t    fi\n\t    shared_flag_aix='$wl-bM:SRE'\n\t    shared_flag_svr4='$wl-G'\n          fi\n        fi\n\n        _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-bexpall'\n        # It seems that -bexpall does not export symbols beginning with\n        # underscore (_), so it is better to generate a list of symbols to\n\t# export.\n        _LT_TAGVAR(always_export_symbols, $1)=yes\n\tif test aix,yes = \"$with_aix_soname,$aix_use_runtimelinking\"; then\n          # Warning - without using the other runtime loading flags (-brtl),\n          # -berok will link without error, but may produce a broken library.\n          # The \"-G\" linker flag allows undefined symbols.\n          _LT_TAGVAR(no_undefined_flag, $1)='-bernotok'\n          # Determine the default libpath from the value encoded in an empty\n          # executable.\n          _LT_SYS_MODULE_PATH_AIX([$1])\n          _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-blibpath:$libdir:'\"$aix_libpath\"\n\n          _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $deplibs $wl'$no_entry_flag' $compiler_flags `if test -n \"$allow_undefined_flag\"; then func_echo_all \"$wl$allow_undefined_flag\"; else :; fi` $wl'$exp_sym_flag:\\$export_symbols' '$shared_flag\n        else\n          if test ia64 = \"$host_cpu\"; then\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-R $libdir:/usr/lib:/lib'\n\t    _LT_TAGVAR(allow_undefined_flag, $1)=\"-z nodefs\"\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"\\$CC $shared_flag\"' -o $output_objdir/$soname $libobjs $deplibs '\"\\$wl$no_entry_flag\"' $compiler_flags $wl$allow_undefined_flag '\"\\$wl$exp_sym_flag:\\$export_symbols\"\n          else\n\t    # Determine the default libpath from the value encoded in an\n\t    # empty executable.\n\t    _LT_SYS_MODULE_PATH_AIX([$1])\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-blibpath:$libdir:'\"$aix_libpath\"\n\t    # Warning - without using the other run time loading flags,\n\t    # -berok will link without error, but may produce a broken library.\n\t    _LT_TAGVAR(no_undefined_flag, $1)=' $wl-bernotok'\n\t    _LT_TAGVAR(allow_undefined_flag, $1)=' $wl-berok'\n\t    if test yes = \"$with_gnu_ld\"; then\n\t      # We only use this code for GNU lds that support --whole-archive.\n\t      _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive$convenience $wl--no-whole-archive'\n\t    else\n\t      # Exported symbols can be pulled into shared objects from archives\n\t      _LT_TAGVAR(whole_archive_flag_spec, $1)='$convenience'\n\t    fi\n\t    _LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$RM -r $output_objdir/$realname.d~$MKDIR $output_objdir/$realname.d'\n\t    # -brtl affects multiple linker settings, -berok does not and is overridden later\n\t    compiler_flags_filtered='`func_echo_all \"$compiler_flags \" | $SED -e \"s%-brtl\\\\([[, ]]\\\\)%-berok\\\\1%g\"`'\n\t    if test svr4 != \"$with_aix_soname\"; then\n\t      # This is similar to how AIX traditionally builds its shared\n\t      # libraries. Need -bnortl late, we may have -brtl in LDFLAGS.\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$CC '$shared_flag_aix' -o $output_objdir/$realname.d/$soname $libobjs $deplibs $wl-bnoentry '$compiler_flags_filtered'$wl-bE:$export_symbols$allow_undefined_flag~$AR $AR_FLAGS $output_objdir/$libname$release.a $output_objdir/$realname.d/$soname'\n\t    fi\n\t    if test aix != \"$with_aix_soname\"; then\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$CC '$shared_flag_svr4' -o $output_objdir/$realname.d/$shared_archive_member_spec.o $libobjs $deplibs $wl-bnoentry '$compiler_flags_filtered'$wl-bE:$export_symbols$allow_undefined_flag~$STRIP -e $output_objdir/$realname.d/$shared_archive_member_spec.o~( func_echo_all \"#! $soname($shared_archive_member_spec.o)\"; if test shr_64 = \"$shared_archive_member_spec\"; then func_echo_all \"# 64\"; else func_echo_all \"# 32\"; fi; cat $export_symbols ) > $output_objdir/$realname.d/$shared_archive_member_spec.imp~$AR $AR_FLAGS $output_objdir/$soname $output_objdir/$realname.d/$shared_archive_member_spec.o $output_objdir/$realname.d/$shared_archive_member_spec.imp'\n\t    else\n\t      # used by -dlpreopen to get the symbols\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$MV  $output_objdir/$realname.d/$soname $output_objdir'\n\t    fi\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$RM -r $output_objdir/$realname.d'\n          fi\n        fi\n        ;;\n\n      beos*)\n\tif $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t  # Joseph Beckenbach <jrb3@best.com> says some releases of gcc\n\t  # support --undefined.  This deserves some investigation.  FIXME\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -nostart $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\telse\n\t  _LT_TAGVAR(ld_shlibs, $1)=no\n\tfi\n\t;;\n\n      chorus*)\n        case $cc_basename in\n          *)\n\t  # FIXME: insert proper C++ library support\n\t  _LT_TAGVAR(ld_shlibs, $1)=no\n\t  ;;\n        esac\n        ;;\n\n      cygwin* | mingw* | pw32* | cegcc*)\n\tcase $GXX,$cc_basename in\n\t,cl* | no,cl*)\n\t  # Native MSVC\n\t  # hardcode_libdir_flag_spec is actually meaningless, as there is\n\t  # no search path for DLLs.\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)=' '\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t  _LT_TAGVAR(always_export_symbols, $1)=yes\n\t  _LT_TAGVAR(file_list_spec, $1)='@'\n\t  # Tell ltmain to make .lib files, not .a files.\n\t  libext=lib\n\t  # Tell ltmain to make .dll files, not .so files.\n\t  shrext_cmds=.dll\n\t  # FIXME: Setting linknames here is a bad hack.\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $compiler_flags $deplibs -Wl,-DLL,-IMPLIB:\"$tool_output_objdir$libname.dll.lib\"~linknames='\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='if _LT_DLL_DEF_P([$export_symbols]); then\n              cp \"$export_symbols\" \"$output_objdir/$soname.def\";\n              echo \"$tool_output_objdir$soname.def\" > \"$output_objdir/$soname.exp\";\n            else\n              $SED -e '\\''s/^/-link -EXPORT:/'\\'' < $export_symbols > $output_objdir/$soname.exp;\n            fi~\n            $CC -o $tool_output_objdir$soname $libobjs $compiler_flags $deplibs \"@$tool_output_objdir$soname.exp\" -Wl,-DLL,-IMPLIB:\"$tool_output_objdir$libname.dll.lib\"~\n            linknames='\n\t  # The linker will not automatically build a static lib if we build a DLL.\n\t  # _LT_TAGVAR(old_archive_from_new_cmds, $1)='true'\n\t  _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\t  # Don't use ranlib\n\t  _LT_TAGVAR(old_postinstall_cmds, $1)='chmod 644 $oldlib'\n\t  _LT_TAGVAR(postlink_cmds, $1)='lt_outputfile=\"@OUTPUT@\"~\n            lt_tool_outputfile=\"@TOOL_OUTPUT@\"~\n            case $lt_outputfile in\n              *.exe|*.EXE) ;;\n              *)\n                lt_outputfile=$lt_outputfile.exe\n                lt_tool_outputfile=$lt_tool_outputfile.exe\n                ;;\n            esac~\n            func_to_tool_file \"$lt_outputfile\"~\n            if test : != \"$MANIFEST_TOOL\" && test -f \"$lt_outputfile.manifest\"; then\n              $MANIFEST_TOOL -manifest \"$lt_tool_outputfile.manifest\" -outputresource:\"$lt_tool_outputfile\" || exit 1;\n              $RM \"$lt_outputfile.manifest\";\n            fi'\n\t  ;;\n\t*)\n\t  # g++\n\t  # _LT_TAGVAR(hardcode_libdir_flag_spec, $1) is actually meaningless,\n\t  # as there is no search path for DLLs.\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-all-symbols'\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t  _LT_TAGVAR(always_export_symbols, $1)=no\n\t  _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\n\t  if $LD --help 2>&1 | $GREP 'auto-import' > /dev/null; then\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $output_objdir/$soname $wl--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n\t    # If the export-symbols file already is a .def file, use it as\n\t    # is; otherwise, prepend EXPORTS...\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='if _LT_DLL_DEF_P([$export_symbols]); then\n              cp $export_symbols $output_objdir/$soname.def;\n            else\n              echo EXPORTS > $output_objdir/$soname.def;\n              cat $export_symbols >> $output_objdir/$soname.def;\n            fi~\n            $CC -shared -nostdlib $output_objdir/$soname.def $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $output_objdir/$soname $wl--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n\t  else\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t  fi\n\t  ;;\n\tesac\n\t;;\n      darwin* | rhapsody*)\n        _LT_DARWIN_LINKER_FEATURES($1)\n\t;;\n\n      os2*)\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t_LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t_LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\tshrext_cmds=.dll\n\t_LT_TAGVAR(archive_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t  $ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t  $ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t  $ECHO EXPORTS >> $output_objdir/$libname.def~\n\t  emxexp $libobjs | $SED /\"_DLL_InitTerm\"/d >> $output_objdir/$libname.def~\n\t  $CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\t  emximp -o $lib $output_objdir/$libname.def'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t  $ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t  $ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t  $ECHO EXPORTS >> $output_objdir/$libname.def~\n\t  prefix_cmds=\"$SED\"~\n\t  if test EXPORTS = \"`$SED 1q $export_symbols`\"; then\n\t    prefix_cmds=\"$prefix_cmds -e 1d\";\n\t  fi~\n\t  prefix_cmds=\"$prefix_cmds -e \\\"s/^\\(.*\\)$/_\\1/g\\\"\"~\n\t  cat $export_symbols | $prefix_cmds >> $output_objdir/$libname.def~\n\t  $CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\t  emximp -o $lib $output_objdir/$libname.def'\n\t_LT_TAGVAR(old_archive_From_new_cmds, $1)='emximp -o $output_objdir/${libname}_dll.a $output_objdir/$libname.def'\n\t_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\t;;\n\n      dgux*)\n        case $cc_basename in\n          ec++*)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          ghcx*)\n\t    # Green Hills C++ Compiler\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n        esac\n        ;;\n\n      freebsd2.*)\n        # C++ shared libraries reported to be fairly broken before\n\t# switch to ELF\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n\n      freebsd-elf*)\n        _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n        ;;\n\n      freebsd* | dragonfly*)\n        # FreeBSD 3 and later use GNU C++ and GNU ld with standard ELF\n        # conventions\n        _LT_TAGVAR(ld_shlibs, $1)=yes\n        ;;\n\n      haiku*)\n        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n        _LT_TAGVAR(link_all_deplibs, $1)=yes\n        ;;\n\n      hpux9*)\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl+b $wl$libdir'\n        _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n        _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n        _LT_TAGVAR(hardcode_direct, $1)=yes\n        _LT_TAGVAR(hardcode_minus_L, $1)=yes # Not in the search PATH,\n\t\t\t\t             # but as the default\n\t\t\t\t             # location of the library.\n\n        case $cc_basename in\n          CC*)\n            # FIXME: insert proper C++ library support\n            _LT_TAGVAR(ld_shlibs, $1)=no\n            ;;\n          aCC*)\n            _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$CC -b $wl+b $wl$install_libdir -o $output_objdir/$soname $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~test \"x$output_objdir/$soname\" = \"x$lib\" || mv $output_objdir/$soname $lib'\n            # Commands to make compiler produce verbose output that lists\n            # what \"hidden\" libraries, object files and flags are used when\n            # linking a shared library.\n            #\n            # There doesn't appear to be a way to prevent this compiler from\n            # explicitly linking system object files so we need to strip them\n            # from the output so that they don't get included in the library\n            # dependencies.\n            output_verbose_link_cmd='templist=`($CC -b $CFLAGS -v conftest.$objext 2>&1) | $EGREP \"\\-L\"`; list= ; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n            ;;\n          *)\n            if test yes = \"$GXX\"; then\n              _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$CC -shared -nostdlib $pic_flag $wl+b $wl$install_libdir -o $output_objdir/$soname $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~test \"x$output_objdir/$soname\" = \"x$lib\" || mv $output_objdir/$soname $lib'\n            else\n              # FIXME: insert proper C++ library support\n              _LT_TAGVAR(ld_shlibs, $1)=no\n            fi\n            ;;\n        esac\n        ;;\n\n      hpux10*|hpux11*)\n        if test no = \"$with_gnu_ld\"; then\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl+b $wl$libdir'\n\t  _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n          case $host_cpu in\n            hppa*64*|ia64*)\n              ;;\n            *)\n\t      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n              ;;\n          esac\n        fi\n        case $host_cpu in\n          hppa*64*|ia64*)\n            _LT_TAGVAR(hardcode_direct, $1)=no\n            _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n            ;;\n          *)\n            _LT_TAGVAR(hardcode_direct, $1)=yes\n            _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n            _LT_TAGVAR(hardcode_minus_L, $1)=yes # Not in the search PATH,\n\t\t\t\t\t         # but as the default\n\t\t\t\t\t         # location of the library.\n            ;;\n        esac\n\n        case $cc_basename in\n          CC*)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          aCC*)\n\t    case $host_cpu in\n\t      hppa*64*)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t        ;;\n\t      ia64*)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname $wl+nodefaultrpath -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t        ;;\n\t      *)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t        ;;\n\t    esac\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`($CC -b $CFLAGS -v conftest.$objext 2>&1) | $GREP \"\\-L\"`; list= ; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n\t    ;;\n          *)\n\t    if test yes = \"$GXX\"; then\n\t      if test no = \"$with_gnu_ld\"; then\n\t        case $host_cpu in\n\t          hppa*64*)\n\t            _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib -fPIC $wl+h $wl$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t            ;;\n\t          ia64*)\n\t            _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $pic_flag $wl+h $wl$soname $wl+nodefaultrpath -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t            ;;\n\t          *)\n\t            _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $pic_flag $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t            ;;\n\t        esac\n\t      fi\n\t    else\n\t      # FIXME: insert proper C++ library support\n\t      _LT_TAGVAR(ld_shlibs, $1)=no\n\t    fi\n\t    ;;\n        esac\n        ;;\n\n      interix[[3-9]]*)\n\t_LT_TAGVAR(hardcode_direct, $1)=no\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n\t# Hack: On Interix 3.x, we cannot compile PIC because of a broken gcc.\n\t# Instead, shared libraries are loaded at an image base (0x10000000 by\n\t# default) and relocated if they conflict, which is a slow very memory\n\t# consuming and fragmenting process.  To avoid this, we pick a random,\n\t# 256 KiB-aligned image base between 0x50000000 and 0x6FFC0000 at link\n\t# time.  Moving up from 0x10000000 also allows more sbrk(2) space.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-h,$soname $wl--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='sed \"s|^|_|\" $export_symbols >$output_objdir/$soname.expsym~$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-h,$soname $wl--retain-symbols-file,$output_objdir/$soname.expsym $wl--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n\t;;\n      irix5* | irix6*)\n        case $cc_basename in\n          CC*)\n\t    # SGI C++\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared -all -multigot $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n\n\t    # Archives containing C++ object files must be created using\n\t    # \"CC -ar\", where \"CC\" is the IRIX C++ compiler.  This is\n\t    # necessary to make sure instantiated templates are included\n\t    # in the archive.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -ar -WR,-u -o $oldlib $oldobjs'\n\t    ;;\n          *)\n\t    if test yes = \"$GXX\"; then\n\t      if test no = \"$with_gnu_ld\"; then\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n\t      else\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` -o $lib'\n\t      fi\n\t    fi\n\t    _LT_TAGVAR(link_all_deplibs, $1)=yes\n\t    ;;\n        esac\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n        _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n        _LT_TAGVAR(inherit_rpath, $1)=yes\n        ;;\n\n      linux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n        case $cc_basename in\n          KCC*)\n\t    # Kuck and Associates, Inc. (KAI) C++ Compiler\n\n\t    # KCC will only create a shared library if the output file\n\t    # ends with \".so\" (or \".sl\" for HP-UX), so rename the library\n\t    # to its proper name (with version) after linking.\n\t    _LT_TAGVAR(archive_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\\''s/\\([[^()0-9A-Za-z{}]]\\)/\\\\\\\\\\1/g'\\''`; templib=`echo $lib | $SED -e \"s/\\$tempext\\..*/.so/\"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \\$templib; mv \\$templib $lib'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\\''s/\\([[^()0-9A-Za-z{}]]\\)/\\\\\\\\\\1/g'\\''`; templib=`echo $lib | $SED -e \"s/\\$tempext\\..*/.so/\"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \\$templib $wl-retain-symbols-file,$export_symbols; mv \\$templib $lib'\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`$CC $CFLAGS -v conftest.$objext -o libconftest$shared_ext 2>&1 | $GREP \"ld\"`; rm -f libconftest$shared_ext; list= ; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n\n\t    # Archives containing C++ object files must be created using\n\t    # \"CC -Bstatic\", where \"CC\" is the KAI C++ compiler.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -Bstatic -o $oldlib $oldobjs'\n\t    ;;\n\t  icpc* | ecpc* )\n\t    # Intel C++\n\t    with_gnu_ld=yes\n\t    # version 8.0 and above of icpc choke on multiply defined symbols\n\t    # if we add $predep_objects and $postdep_objects, however 7.1 and\n\t    # earlier do not add the objects themselves.\n\t    case `$CC -V 2>&1` in\n\t      *\"Version 7.\"*)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname -o $lib'\n\t\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\t\t;;\n\t      *)  # Version 8.0 or newer\n\t        tmp_idyn=\n\t        case $host_cpu in\n\t\t  ia64*) tmp_idyn=' -i_dynamic';;\n\t\tesac\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared'\"$tmp_idyn\"' $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared'\"$tmp_idyn\"' $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\t\t;;\n\t    esac\n\t    _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive$convenience $wl--no-whole-archive'\n\t    ;;\n          pgCC* | pgcpp*)\n            # Portland Group C++ compiler\n\t    case `$CC -V` in\n\t    *pgCC\\ [[1-5]].* | *pgcpp\\ [[1-5]].*)\n\t      _LT_TAGVAR(prelink_cmds, $1)='tpldir=Template.dir~\n               rm -rf $tpldir~\n               $CC --prelink_objects --instantiation_dir $tpldir $objs $libobjs $compile_deplibs~\n               compile_command=\"$compile_command `find $tpldir -name \\*.o | sort | $NL2SP`\"'\n\t      _LT_TAGVAR(old_archive_cmds, $1)='tpldir=Template.dir~\n                rm -rf $tpldir~\n                $CC --prelink_objects --instantiation_dir $tpldir $oldobjs$old_deplibs~\n                $AR $AR_FLAGS $oldlib$oldobjs$old_deplibs `find $tpldir -name \\*.o | sort | $NL2SP`~\n                $RANLIB $oldlib'\n\t      _LT_TAGVAR(archive_cmds, $1)='tpldir=Template.dir~\n                rm -rf $tpldir~\n                $CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n                $CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags $wl-soname $wl$soname -o $lib'\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='tpldir=Template.dir~\n                rm -rf $tpldir~\n                $CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n                $CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\t      ;;\n\t    *) # Version 6 and above use weak symbols\n\t      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname -o $lib'\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\t      ;;\n\t    esac\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl--rpath $wl$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n            ;;\n\t  cxx*)\n\t    # Compaq C++\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname -o $lib'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname  -o $lib $wl-retain-symbols-file $wl$export_symbols'\n\n\t    runpath_var=LD_RUN_PATH\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-rpath $libdir'\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP \"ld\"`; templist=`func_echo_all \"$templist\" | $SED \"s/\\(^.*ld.*\\)\\( .*ld .*$\\)/\\1/\"`; list= ; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"X$list\" | $Xsed'\n\t    ;;\n\t  xl* | mpixl* | bgxl*)\n\t    # IBM XL 8.0 on PPC, with GNU ld\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -qmkshrobj $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t    if test yes = \"$supports_anon_versioning\"; then\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $output_objdir/$libname.ver~\n                cat $export_symbols | sed -e \"s/\\(.*\\)/\\1;/\" >> $output_objdir/$libname.ver~\n                echo \"local: *; };\" >> $output_objdir/$libname.ver~\n                $CC -qmkshrobj $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-version-script $wl$output_objdir/$libname.ver -o $lib'\n\t    fi\n\t    ;;\n\t  *)\n\t    case `$CC -V 2>&1 | sed 5q` in\n\t    *Sun\\ C*)\n\t      # Sun C++ 5.9\n\t      _LT_TAGVAR(no_undefined_flag, $1)=' -zdefs'\n\t      _LT_TAGVAR(archive_cmds, $1)='$CC -G$allow_undefined_flag -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G$allow_undefined_flag -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-retain-symbols-file $wl$export_symbols'\n\t      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t      _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`new_convenience=; for conv in $convenience\\\"\\\"; do test -z \\\"$conv\\\" || new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t      _LT_TAGVAR(compiler_needs_object, $1)=yes\n\n\t      # Not sure whether something based on\n\t      # $CC $CFLAGS -v conftest.$objext -o libconftest$shared_ext 2>&1\n\t      # would be better.\n\t      output_verbose_link_cmd='func_echo_all'\n\n\t      # Archives containing C++ object files must be created using\n\t      # \"CC -xar\", where \"CC\" is the Sun C++ compiler.  This is\n\t      # necessary to make sure instantiated templates are included\n\t      # in the archive.\n\t      _LT_TAGVAR(old_archive_cmds, $1)='$CC -xar -o $oldlib $oldobjs'\n\t      ;;\n\t    esac\n\t    ;;\n\tesac\n\t;;\n\n      lynxos*)\n        # FIXME: insert proper C++ library support\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\t;;\n\n      m88k*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n\t;;\n\n      mvs*)\n        case $cc_basename in\n          cxx*)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n\t  *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n\tesac\n\t;;\n\n      netbsd*)\n        if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable  -o $lib $predep_objects $libobjs $deplibs $postdep_objects $linker_flags'\n\t  wlarc=\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes\n\t  _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\tfi\n\t# Workaround some broken pre-1.5 toolchains\n\toutput_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP conftest.$objext | $SED -e \"s:-lgcc -lc -lgcc::\"'\n\t;;\n\n      *nto* | *qnx*)\n        _LT_TAGVAR(ld_shlibs, $1)=yes\n\t;;\n\n      openbsd* | bitrig*)\n\tif test -f /usr/libexec/ld.so; then\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes\n\t  _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t  _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $lib'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t  if test -z \"`echo __ELF__ | $CC -E - | grep __ELF__`\"; then\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-retain-symbols-file,$export_symbols -o $lib'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)=$wlarc'--whole-archive$convenience '$wlarc'--no-whole-archive'\n\t  fi\n\t  output_verbose_link_cmd=func_echo_all\n\telse\n\t  _LT_TAGVAR(ld_shlibs, $1)=no\n\tfi\n\t;;\n\n      osf3* | osf4* | osf5*)\n        case $cc_basename in\n          KCC*)\n\t    # Kuck and Associates, Inc. (KAI) C++ Compiler\n\n\t    # KCC will only create a shared library if the output file\n\t    # ends with \".so\" (or \".sl\" for HP-UX), so rename the library\n\t    # to its proper name (with version) after linking.\n\t    _LT_TAGVAR(archive_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\\''s/\\([[^()0-9A-Za-z{}]]\\)/\\\\\\\\\\1/g'\\''`; templib=`echo \"$lib\" | $SED -e \"s/\\$tempext\\..*/.so/\"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \\$templib; mv \\$templib $lib'\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t    # Archives containing C++ object files must be created using\n\t    # the KAI C++ compiler.\n\t    case $host in\n\t      osf3*) _LT_TAGVAR(old_archive_cmds, $1)='$CC -Bstatic -o $oldlib $oldobjs' ;;\n\t      *) _LT_TAGVAR(old_archive_cmds, $1)='$CC -o $oldlib $oldobjs' ;;\n\t    esac\n\t    ;;\n          RCC*)\n\t    # Rational C++ 2.4.1\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          cxx*)\n\t    case $host in\n\t      osf3*)\n\t        _LT_TAGVAR(allow_undefined_flag, $1)=' $wl-expect_unresolved $wl\\*'\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n\t        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t\t;;\n\t      *)\n\t        _LT_TAGVAR(allow_undefined_flag, $1)=' -expect_unresolved \\*'\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -msym -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n\t        _LT_TAGVAR(archive_expsym_cmds, $1)='for i in `cat $export_symbols`; do printf \"%s %s\\\\n\" -exported_symbol \"\\$i\" >> $lib.exp; done~\n                  echo \"-hidden\">> $lib.exp~\n                  $CC -shared$allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -msym -soname $soname $wl-input $wl$lib.exp  `test -n \"$verstring\" && $ECHO \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib~\n                  $RM $lib.exp'\n\t        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-rpath $libdir'\n\t\t;;\n\t    esac\n\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP \"ld\" | $GREP -v \"ld:\"`; templist=`func_echo_all \"$templist\" | $SED \"s/\\(^.*ld.*\\)\\( .*ld.*$\\)/\\1/\"`; list= ; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n\t    ;;\n\t  *)\n\t    if test yes,no = \"$GXX,$with_gnu_ld\"; then\n\t      _LT_TAGVAR(allow_undefined_flag, $1)=' $wl-expect_unresolved $wl\\*'\n\t      case $host in\n\t        osf3*)\n\t          _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n\t\t  ;;\n\t        *)\n\t          _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib $allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-msym $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n\t\t  ;;\n\t      esac\n\n\t      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t      # Commands to make compiler produce verbose output that lists\n\t      # what \"hidden\" libraries, object files and flags are used when\n\t      # linking a shared library.\n\t      output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\n\t    else\n\t      # FIXME: insert proper C++ library support\n\t      _LT_TAGVAR(ld_shlibs, $1)=no\n\t    fi\n\t    ;;\n        esac\n        ;;\n\n      psos*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n\n      sunos4*)\n        case $cc_basename in\n          CC*)\n\t    # Sun C++ 4.x\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          lcc*)\n\t    # Lucid\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n        esac\n        ;;\n\n      solaris*)\n        case $cc_basename in\n          CC* | sunCC*)\n\t    # Sun C++ 4.2, 5.x and Centerline C++\n            _LT_TAGVAR(archive_cmds_need_lc,$1)=yes\n\t    _LT_TAGVAR(no_undefined_flag, $1)=' -zdefs'\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -G$allow_undefined_flag -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n              $CC -G$allow_undefined_flag $wl-M $wl$lib.exp -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$RM $lib.exp'\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t    _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t    case $host_os in\n\t      solaris2.[[0-5]] | solaris2.[[0-5]].*) ;;\n\t      *)\n\t\t# The compiler driver will combine and reorder linker options,\n\t\t# but understands '-z linker_flag'.\n\t        # Supported since Solaris 2.6 (maybe 2.5.1?)\n\t\t_LT_TAGVAR(whole_archive_flag_spec, $1)='-z allextract$convenience -z defaultextract'\n\t        ;;\n\t    esac\n\t    _LT_TAGVAR(link_all_deplibs, $1)=yes\n\n\t    output_verbose_link_cmd='func_echo_all'\n\n\t    # Archives containing C++ object files must be created using\n\t    # \"CC -xar\", where \"CC\" is the Sun C++ compiler.  This is\n\t    # necessary to make sure instantiated templates are included\n\t    # in the archive.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -xar -o $oldlib $oldobjs'\n\t    ;;\n          gcx*)\n\t    # Green Hills C++ Compiler\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-h $wl$soname -o $lib'\n\n\t    # The C++ compiler must be used to create the archive.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC $LDFLAGS -archive -o $oldlib $oldobjs'\n\t    ;;\n          *)\n\t    # GNU C++ compiler with Solaris linker\n\t    if test yes,no = \"$GXX,$with_gnu_ld\"; then\n\t      _LT_TAGVAR(no_undefined_flag, $1)=' $wl-z ${wl}defs'\n\t      if $CC --version | $GREP -v '^2\\.7' > /dev/null; then\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-h $wl$soname -o $lib'\n\t        _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n                  $CC -shared $pic_flag -nostdlib $wl-M $wl$lib.exp $wl-h $wl$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$RM $lib.exp'\n\n\t        # Commands to make compiler produce verbose output that lists\n\t        # what \"hidden\" libraries, object files and flags are used when\n\t        # linking a shared library.\n\t        output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\t      else\n\t        # g++ 2.7 appears to require '-G' NOT '-shared' on this\n\t        # platform.\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -G -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-h $wl$soname -o $lib'\n\t        _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n                  $CC -G -nostdlib $wl-M $wl$lib.exp $wl-h $wl$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$RM $lib.exp'\n\n\t        # Commands to make compiler produce verbose output that lists\n\t        # what \"hidden\" libraries, object files and flags are used when\n\t        # linking a shared library.\n\t        output_verbose_link_cmd='$CC -G $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\t      fi\n\n\t      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-R $wl$libdir'\n\t      case $host_os in\n\t\tsolaris2.[[0-5]] | solaris2.[[0-5]].*) ;;\n\t\t*)\n\t\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl-z ${wl}allextract$convenience $wl-z ${wl}defaultextract'\n\t\t  ;;\n\t      esac\n\t    fi\n\t    ;;\n        esac\n        ;;\n\n    sysv4*uw2* | sysv5OpenUNIX* | sysv5UnixWare7.[[01]].[[10]]* | unixware7* | sco3.2v5.0.[[024]]*)\n      _LT_TAGVAR(no_undefined_flag, $1)='$wl-z,text'\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      runpath_var='LD_RUN_PATH'\n\n      case $cc_basename in\n        CC*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -G $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\t*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n      esac\n      ;;\n\n      sysv5* | sco3.2v5* | sco5v6*)\n\t# Note: We CANNOT use -z defs as we might desire, because we do not\n\t# link with -lc, and that would cause any symbols used from libc to\n\t# always be unresolved, which means just about no library would\n\t# ever link correctly.  If we're not using GNU ld we use -z text\n\t# though, which does catch some bad symbols but isn't as heavy-handed\n\t# as -z defs.\n\t_LT_TAGVAR(no_undefined_flag, $1)='$wl-z,text'\n\t_LT_TAGVAR(allow_undefined_flag, $1)='$wl-z,nodefs'\n\t_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-R,$libdir'\n\t_LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n\t_LT_TAGVAR(link_all_deplibs, $1)=yes\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-Bexport'\n\trunpath_var='LD_RUN_PATH'\n\n\tcase $cc_basename in\n          CC*)\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -G $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -Tprelink_objects $oldobjs~\n              '\"$_LT_TAGVAR(old_archive_cmds, $1)\"\n\t    _LT_TAGVAR(reload_cmds, $1)='$CC -Tprelink_objects $reload_objs~\n              '\"$_LT_TAGVAR(reload_cmds, $1)\"\n\t    ;;\n\t  *)\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    ;;\n\tesac\n      ;;\n\n      tandem*)\n        case $cc_basename in\n          NCC*)\n\t    # NonStop-UX NCC 3.20\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n        esac\n        ;;\n\n      vxworks*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n\n      *)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n    esac\n\n    AC_MSG_RESULT([$_LT_TAGVAR(ld_shlibs, $1)])\n    test no = \"$_LT_TAGVAR(ld_shlibs, $1)\" && can_build_shared=no\n\n    _LT_TAGVAR(GCC, $1)=$GXX\n    _LT_TAGVAR(LD, $1)=$LD\n\n    ## CAVEAT EMPTOR:\n    ## There is no encapsulation within the following macros, do not change\n    ## the running order or otherwise move them around unless you know exactly\n    ## what you are doing...\n    _LT_SYS_HIDDEN_LIBDEPS($1)\n    _LT_COMPILER_PIC($1)\n    _LT_COMPILER_C_O($1)\n    _LT_COMPILER_FILE_LOCKS($1)\n    _LT_LINKER_SHLIBS($1)\n    _LT_SYS_DYNAMIC_LINKER($1)\n    _LT_LINKER_HARDCODE_LIBPATH($1)\n\n    _LT_CONFIG($1)\n  fi # test -n \"$compiler\"\n\n  CC=$lt_save_CC\n  CFLAGS=$lt_save_CFLAGS\n  LDCXX=$LD\n  LD=$lt_save_LD\n  GCC=$lt_save_GCC\n  with_gnu_ld=$lt_save_with_gnu_ld\n  lt_cv_path_LDCXX=$lt_cv_path_LD\n  lt_cv_path_LD=$lt_save_path_LD\n  lt_cv_prog_gnu_ldcxx=$lt_cv_prog_gnu_ld\n  lt_cv_prog_gnu_ld=$lt_save_with_gnu_ld\nfi # test yes != \"$_lt_caught_CXX_error\"\n\nAC_LANG_POP\n])# _LT_LANG_CXX_CONFIG\n\n\n# _LT_FUNC_STRIPNAME_CNF\n# ----------------------\n# func_stripname_cnf prefix suffix name\n# strip PREFIX and SUFFIX off of NAME.\n# PREFIX and SUFFIX must not contain globbing or regex special\n# characters, hashes, percent signs, but SUFFIX may contain a leading\n# dot (in which case that matches only a dot).\n#\n# This function is identical to the (non-XSI) version of func_stripname,\n# except this one can be used by m4 code that may be executed by configure,\n# rather than the libtool script.\nm4_defun([_LT_FUNC_STRIPNAME_CNF],[dnl\nAC_REQUIRE([_LT_DECL_SED])\nAC_REQUIRE([_LT_PROG_ECHO_BACKSLASH])\nfunc_stripname_cnf ()\n{\n  case @S|@2 in\n  .*) func_stripname_result=`$ECHO \"@S|@3\" | $SED \"s%^@S|@1%%; s%\\\\\\\\@S|@2\\$%%\"`;;\n  *)  func_stripname_result=`$ECHO \"@S|@3\" | $SED \"s%^@S|@1%%; s%@S|@2\\$%%\"`;;\n  esac\n} # func_stripname_cnf\n])# _LT_FUNC_STRIPNAME_CNF\n\n\n# _LT_SYS_HIDDEN_LIBDEPS([TAGNAME])\n# ---------------------------------\n# Figure out \"hidden\" library dependencies from verbose\n# compiler output when linking a shared library.\n# Parse the compiler output and extract the necessary\n# objects, libraries and library flags.\nm4_defun([_LT_SYS_HIDDEN_LIBDEPS],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nAC_REQUIRE([_LT_FUNC_STRIPNAME_CNF])dnl\n# Dependencies to place before and after the object being linked:\n_LT_TAGVAR(predep_objects, $1)=\n_LT_TAGVAR(postdep_objects, $1)=\n_LT_TAGVAR(predeps, $1)=\n_LT_TAGVAR(postdeps, $1)=\n_LT_TAGVAR(compiler_lib_search_path, $1)=\n\ndnl we can't use the lt_simple_compile_test_code here,\ndnl because it contains code intended for an executable,\ndnl not a library.  It's possible we should let each\ndnl tag define a new lt_????_link_test_code variable,\ndnl but it's only used here...\nm4_if([$1], [], [cat > conftest.$ac_ext <<_LT_EOF\nint a;\nvoid foo (void) { a = 0; }\n_LT_EOF\n], [$1], [CXX], [cat > conftest.$ac_ext <<_LT_EOF\nclass Foo\n{\npublic:\n  Foo (void) { a = 0; }\nprivate:\n  int a;\n};\n_LT_EOF\n], [$1], [F77], [cat > conftest.$ac_ext <<_LT_EOF\n      subroutine foo\n      implicit none\n      integer*4 a\n      a=0\n      return\n      end\n_LT_EOF\n], [$1], [FC], [cat > conftest.$ac_ext <<_LT_EOF\n      subroutine foo\n      implicit none\n      integer a\n      a=0\n      return\n      end\n_LT_EOF\n], [$1], [GCJ], [cat > conftest.$ac_ext <<_LT_EOF\npublic class foo {\n  private int a;\n  public void bar (void) {\n    a = 0;\n  }\n};\n_LT_EOF\n], [$1], [GO], [cat > conftest.$ac_ext <<_LT_EOF\npackage foo\nfunc foo() {\n}\n_LT_EOF\n])\n\n_lt_libdeps_save_CFLAGS=$CFLAGS\ncase \"$CC $CFLAGS \" in #(\n*\\ -flto*\\ *) CFLAGS=\"$CFLAGS -fno-lto\" ;;\n*\\ -fwhopr*\\ *) CFLAGS=\"$CFLAGS -fno-whopr\" ;;\n*\\ -fuse-linker-plugin*\\ *) CFLAGS=\"$CFLAGS -fno-use-linker-plugin\" ;;\nesac\n\ndnl Parse the compiler output and extract the necessary\ndnl objects, libraries and library flags.\nif AC_TRY_EVAL(ac_compile); then\n  # Parse the compiler output and extract the necessary\n  # objects, libraries and library flags.\n\n  # Sentinel used to keep track of whether or not we are before\n  # the conftest object file.\n  pre_test_object_deps_done=no\n\n  for p in `eval \"$output_verbose_link_cmd\"`; do\n    case $prev$p in\n\n    -L* | -R* | -l*)\n       # Some compilers place space between \"-{L,R}\" and the path.\n       # Remove the space.\n       if test x-L = \"$p\" ||\n          test x-R = \"$p\"; then\n\t prev=$p\n\t continue\n       fi\n\n       # Expand the sysroot to ease extracting the directories later.\n       if test -z \"$prev\"; then\n         case $p in\n         -L*) func_stripname_cnf '-L' '' \"$p\"; prev=-L; p=$func_stripname_result ;;\n         -R*) func_stripname_cnf '-R' '' \"$p\"; prev=-R; p=$func_stripname_result ;;\n         -l*) func_stripname_cnf '-l' '' \"$p\"; prev=-l; p=$func_stripname_result ;;\n         esac\n       fi\n       case $p in\n       =*) func_stripname_cnf '=' '' \"$p\"; p=$lt_sysroot$func_stripname_result ;;\n       esac\n       if test no = \"$pre_test_object_deps_done\"; then\n\t case $prev in\n\t -L | -R)\n\t   # Internal compiler library paths should come after those\n\t   # provided the user.  The postdeps already come after the\n\t   # user supplied libs so there is no need to process them.\n\t   if test -z \"$_LT_TAGVAR(compiler_lib_search_path, $1)\"; then\n\t     _LT_TAGVAR(compiler_lib_search_path, $1)=$prev$p\n\t   else\n\t     _LT_TAGVAR(compiler_lib_search_path, $1)=\"${_LT_TAGVAR(compiler_lib_search_path, $1)} $prev$p\"\n\t   fi\n\t   ;;\n\t # The \"-l\" case would never come before the object being\n\t # linked, so don't bother handling this case.\n\t esac\n       else\n\t if test -z \"$_LT_TAGVAR(postdeps, $1)\"; then\n\t   _LT_TAGVAR(postdeps, $1)=$prev$p\n\t else\n\t   _LT_TAGVAR(postdeps, $1)=\"${_LT_TAGVAR(postdeps, $1)} $prev$p\"\n\t fi\n       fi\n       prev=\n       ;;\n\n    *.lto.$objext) ;; # Ignore GCC LTO objects\n    *.$objext)\n       # This assumes that the test object file only shows up\n       # once in the compiler output.\n       if test \"$p\" = \"conftest.$objext\"; then\n\t pre_test_object_deps_done=yes\n\t continue\n       fi\n\n       if test no = \"$pre_test_object_deps_done\"; then\n\t if test -z \"$_LT_TAGVAR(predep_objects, $1)\"; then\n\t   _LT_TAGVAR(predep_objects, $1)=$p\n\t else\n\t   _LT_TAGVAR(predep_objects, $1)=\"$_LT_TAGVAR(predep_objects, $1) $p\"\n\t fi\n       else\n\t if test -z \"$_LT_TAGVAR(postdep_objects, $1)\"; then\n\t   _LT_TAGVAR(postdep_objects, $1)=$p\n\t else\n\t   _LT_TAGVAR(postdep_objects, $1)=\"$_LT_TAGVAR(postdep_objects, $1) $p\"\n\t fi\n       fi\n       ;;\n\n    *) ;; # Ignore the rest.\n\n    esac\n  done\n\n  # Clean up.\n  rm -f a.out a.exe\nelse\n  echo \"libtool.m4: error: problem compiling $1 test program\"\nfi\n\n$RM -f confest.$objext\nCFLAGS=$_lt_libdeps_save_CFLAGS\n\n# PORTME: override above test on systems where it is broken\nm4_if([$1], [CXX],\n[case $host_os in\ninterix[[3-9]]*)\n  # Interix 3.5 installs completely hosed .la files for C++, so rather than\n  # hack all around it, let's just trust \"g++\" to DTRT.\n  _LT_TAGVAR(predep_objects,$1)=\n  _LT_TAGVAR(postdep_objects,$1)=\n  _LT_TAGVAR(postdeps,$1)=\n  ;;\nesac\n])\n\ncase \" $_LT_TAGVAR(postdeps, $1) \" in\n*\" -lc \"*) _LT_TAGVAR(archive_cmds_need_lc, $1)=no ;;\nesac\n _LT_TAGVAR(compiler_lib_search_dirs, $1)=\nif test -n \"${_LT_TAGVAR(compiler_lib_search_path, $1)}\"; then\n _LT_TAGVAR(compiler_lib_search_dirs, $1)=`echo \" ${_LT_TAGVAR(compiler_lib_search_path, $1)}\" | $SED -e 's! -L! !g' -e 's!^ !!'`\nfi\n_LT_TAGDECL([], [compiler_lib_search_dirs], [1],\n    [The directories searched by this compiler when creating a shared library])\n_LT_TAGDECL([], [predep_objects], [1],\n    [Dependencies to place before and after the objects being linked to\n    create a shared library])\n_LT_TAGDECL([], [postdep_objects], [1])\n_LT_TAGDECL([], [predeps], [1])\n_LT_TAGDECL([], [postdeps], [1])\n_LT_TAGDECL([], [compiler_lib_search_path], [1],\n    [The library search path used internally by the compiler when linking\n    a shared library])\n])# _LT_SYS_HIDDEN_LIBDEPS\n\n\n# _LT_LANG_F77_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for a Fortran 77 compiler are\n# suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_F77_CONFIG],\n[AC_LANG_PUSH(Fortran 77)\nif test -z \"$F77\" || test no = \"$F77\"; then\n  _lt_disable_F77=yes\nfi\n\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n_LT_TAGVAR(allow_undefined_flag, $1)=\n_LT_TAGVAR(always_export_symbols, $1)=no\n_LT_TAGVAR(archive_expsym_cmds, $1)=\n_LT_TAGVAR(export_dynamic_flag_spec, $1)=\n_LT_TAGVAR(hardcode_direct, $1)=no\n_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n_LT_TAGVAR(hardcode_libdir_separator, $1)=\n_LT_TAGVAR(hardcode_minus_L, $1)=no\n_LT_TAGVAR(hardcode_automatic, $1)=no\n_LT_TAGVAR(inherit_rpath, $1)=no\n_LT_TAGVAR(module_cmds, $1)=\n_LT_TAGVAR(module_expsym_cmds, $1)=\n_LT_TAGVAR(link_all_deplibs, $1)=unknown\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n_LT_TAGVAR(no_undefined_flag, $1)=\n_LT_TAGVAR(whole_archive_flag_spec, $1)=\n_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n\n# Source file extension for f77 test sources.\nac_ext=f\n\n# Object file extension for compiled f77 test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# No sense in running all these tests if we already determined that\n# the F77 compiler isn't working.  Some variables (like enable_shared)\n# are currently assumed to apply to all compilers on this platform,\n# and will be corrupted by setting them based on a non-working compiler.\nif test yes != \"$_lt_disable_F77\"; then\n  # Code to be used in simple compile tests\n  lt_simple_compile_test_code=\"\\\n      subroutine t\n      return\n      end\n\"\n\n  # Code to be used in simple link tests\n  lt_simple_link_test_code=\"\\\n      program t\n      end\n\"\n\n  # ltmain only uses $CC for tagged configurations so make sure $CC is set.\n  _LT_TAG_COMPILER\n\n  # save warnings/boilerplate of simple test code\n  _LT_COMPILER_BOILERPLATE\n  _LT_LINKER_BOILERPLATE\n\n  # Allow CC to be a program name with arguments.\n  lt_save_CC=$CC\n  lt_save_GCC=$GCC\n  lt_save_CFLAGS=$CFLAGS\n  CC=${F77-\"f77\"}\n  CFLAGS=$FFLAGS\n  compiler=$CC\n  _LT_TAGVAR(compiler, $1)=$CC\n  _LT_CC_BASENAME([$compiler])\n  GCC=$G77\n  if test -n \"$compiler\"; then\n    AC_MSG_CHECKING([if libtool supports shared libraries])\n    AC_MSG_RESULT([$can_build_shared])\n\n    AC_MSG_CHECKING([whether to build shared libraries])\n    test no = \"$can_build_shared\" && enable_shared=no\n\n    # On AIX, shared libraries and static libraries use the same namespace, and\n    # are all built from PIC.\n    case $host_os in\n      aix3*)\n        test yes = \"$enable_shared\" && enable_static=no\n        if test -n \"$RANLIB\"; then\n          archive_cmds=\"$archive_cmds~\\$RANLIB \\$lib\"\n          postinstall_cmds='$RANLIB $lib'\n        fi\n        ;;\n      aix[[4-9]]*)\n\tif test ia64 != \"$host_cpu\"; then\n\t  case $enable_shared,$with_aix_soname,$aix_use_runtimelinking in\n\t  yes,aix,yes) ;;\t\t# shared object as lib.so file only\n\t  yes,svr4,*) ;;\t\t# shared object as lib.so archive member only\n\t  yes,*) enable_static=no ;;\t# shared object in lib.a archive as well\n\t  esac\n\tfi\n        ;;\n    esac\n    AC_MSG_RESULT([$enable_shared])\n\n    AC_MSG_CHECKING([whether to build static libraries])\n    # Make sure either enable_shared or enable_static is yes.\n    test yes = \"$enable_shared\" || enable_static=yes\n    AC_MSG_RESULT([$enable_static])\n\n    _LT_TAGVAR(GCC, $1)=$G77\n    _LT_TAGVAR(LD, $1)=$LD\n\n    ## CAVEAT EMPTOR:\n    ## There is no encapsulation within the following macros, do not change\n    ## the running order or otherwise move them around unless you know exactly\n    ## what you are doing...\n    _LT_COMPILER_PIC($1)\n    _LT_COMPILER_C_O($1)\n    _LT_COMPILER_FILE_LOCKS($1)\n    _LT_LINKER_SHLIBS($1)\n    _LT_SYS_DYNAMIC_LINKER($1)\n    _LT_LINKER_HARDCODE_LIBPATH($1)\n\n    _LT_CONFIG($1)\n  fi # test -n \"$compiler\"\n\n  GCC=$lt_save_GCC\n  CC=$lt_save_CC\n  CFLAGS=$lt_save_CFLAGS\nfi # test yes != \"$_lt_disable_F77\"\n\nAC_LANG_POP\n])# _LT_LANG_F77_CONFIG\n\n\n# _LT_LANG_FC_CONFIG([TAG])\n# -------------------------\n# Ensure that the configuration variables for a Fortran compiler are\n# suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_FC_CONFIG],\n[AC_LANG_PUSH(Fortran)\n\nif test -z \"$FC\" || test no = \"$FC\"; then\n  _lt_disable_FC=yes\nfi\n\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n_LT_TAGVAR(allow_undefined_flag, $1)=\n_LT_TAGVAR(always_export_symbols, $1)=no\n_LT_TAGVAR(archive_expsym_cmds, $1)=\n_LT_TAGVAR(export_dynamic_flag_spec, $1)=\n_LT_TAGVAR(hardcode_direct, $1)=no\n_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n_LT_TAGVAR(hardcode_libdir_separator, $1)=\n_LT_TAGVAR(hardcode_minus_L, $1)=no\n_LT_TAGVAR(hardcode_automatic, $1)=no\n_LT_TAGVAR(inherit_rpath, $1)=no\n_LT_TAGVAR(module_cmds, $1)=\n_LT_TAGVAR(module_expsym_cmds, $1)=\n_LT_TAGVAR(link_all_deplibs, $1)=unknown\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n_LT_TAGVAR(no_undefined_flag, $1)=\n_LT_TAGVAR(whole_archive_flag_spec, $1)=\n_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n\n# Source file extension for fc test sources.\nac_ext=${ac_fc_srcext-f}\n\n# Object file extension for compiled fc test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# No sense in running all these tests if we already determined that\n# the FC compiler isn't working.  Some variables (like enable_shared)\n# are currently assumed to apply to all compilers on this platform,\n# and will be corrupted by setting them based on a non-working compiler.\nif test yes != \"$_lt_disable_FC\"; then\n  # Code to be used in simple compile tests\n  lt_simple_compile_test_code=\"\\\n      subroutine t\n      return\n      end\n\"\n\n  # Code to be used in simple link tests\n  lt_simple_link_test_code=\"\\\n      program t\n      end\n\"\n\n  # ltmain only uses $CC for tagged configurations so make sure $CC is set.\n  _LT_TAG_COMPILER\n\n  # save warnings/boilerplate of simple test code\n  _LT_COMPILER_BOILERPLATE\n  _LT_LINKER_BOILERPLATE\n\n  # Allow CC to be a program name with arguments.\n  lt_save_CC=$CC\n  lt_save_GCC=$GCC\n  lt_save_CFLAGS=$CFLAGS\n  CC=${FC-\"f95\"}\n  CFLAGS=$FCFLAGS\n  compiler=$CC\n  GCC=$ac_cv_fc_compiler_gnu\n\n  _LT_TAGVAR(compiler, $1)=$CC\n  _LT_CC_BASENAME([$compiler])\n\n  if test -n \"$compiler\"; then\n    AC_MSG_CHECKING([if libtool supports shared libraries])\n    AC_MSG_RESULT([$can_build_shared])\n\n    AC_MSG_CHECKING([whether to build shared libraries])\n    test no = \"$can_build_shared\" && enable_shared=no\n\n    # On AIX, shared libraries and static libraries use the same namespace, and\n    # are all built from PIC.\n    case $host_os in\n      aix3*)\n        test yes = \"$enable_shared\" && enable_static=no\n        if test -n \"$RANLIB\"; then\n          archive_cmds=\"$archive_cmds~\\$RANLIB \\$lib\"\n          postinstall_cmds='$RANLIB $lib'\n        fi\n        ;;\n      aix[[4-9]]*)\n\tif test ia64 != \"$host_cpu\"; then\n\t  case $enable_shared,$with_aix_soname,$aix_use_runtimelinking in\n\t  yes,aix,yes) ;;\t\t# shared object as lib.so file only\n\t  yes,svr4,*) ;;\t\t# shared object as lib.so archive member only\n\t  yes,*) enable_static=no ;;\t# shared object in lib.a archive as well\n\t  esac\n\tfi\n        ;;\n    esac\n    AC_MSG_RESULT([$enable_shared])\n\n    AC_MSG_CHECKING([whether to build static libraries])\n    # Make sure either enable_shared or enable_static is yes.\n    test yes = \"$enable_shared\" || enable_static=yes\n    AC_MSG_RESULT([$enable_static])\n\n    _LT_TAGVAR(GCC, $1)=$ac_cv_fc_compiler_gnu\n    _LT_TAGVAR(LD, $1)=$LD\n\n    ## CAVEAT EMPTOR:\n    ## There is no encapsulation within the following macros, do not change\n    ## the running order or otherwise move them around unless you know exactly\n    ## what you are doing...\n    _LT_SYS_HIDDEN_LIBDEPS($1)\n    _LT_COMPILER_PIC($1)\n    _LT_COMPILER_C_O($1)\n    _LT_COMPILER_FILE_LOCKS($1)\n    _LT_LINKER_SHLIBS($1)\n    _LT_SYS_DYNAMIC_LINKER($1)\n    _LT_LINKER_HARDCODE_LIBPATH($1)\n\n    _LT_CONFIG($1)\n  fi # test -n \"$compiler\"\n\n  GCC=$lt_save_GCC\n  CC=$lt_save_CC\n  CFLAGS=$lt_save_CFLAGS\nfi # test yes != \"$_lt_disable_FC\"\n\nAC_LANG_POP\n])# _LT_LANG_FC_CONFIG\n\n\n# _LT_LANG_GCJ_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for the GNU Java Compiler compiler\n# are suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_GCJ_CONFIG],\n[AC_REQUIRE([LT_PROG_GCJ])dnl\nAC_LANG_SAVE\n\n# Source file extension for Java test sources.\nac_ext=java\n\n# Object file extension for compiled Java test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code=\"class foo {}\"\n\n# Code to be used in simple link tests\nlt_simple_link_test_code='public class conftest { public static void main(String[[]] argv) {}; }'\n\n# ltmain only uses $CC for tagged configurations so make sure $CC is set.\n_LT_TAG_COMPILER\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n# Allow CC to be a program name with arguments.\nlt_save_CC=$CC\nlt_save_CFLAGS=$CFLAGS\nlt_save_GCC=$GCC\nGCC=yes\nCC=${GCJ-\"gcj\"}\nCFLAGS=$GCJFLAGS\ncompiler=$CC\n_LT_TAGVAR(compiler, $1)=$CC\n_LT_TAGVAR(LD, $1)=$LD\n_LT_CC_BASENAME([$compiler])\n\n# GCJ did not exist at the time GCC didn't implicitly link libc in.\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n\n## CAVEAT EMPTOR:\n## There is no encapsulation within the following macros, do not change\n## the running order or otherwise move them around unless you know exactly\n## what you are doing...\nif test -n \"$compiler\"; then\n  _LT_COMPILER_NO_RTTI($1)\n  _LT_COMPILER_PIC($1)\n  _LT_COMPILER_C_O($1)\n  _LT_COMPILER_FILE_LOCKS($1)\n  _LT_LINKER_SHLIBS($1)\n  _LT_LINKER_HARDCODE_LIBPATH($1)\n\n  _LT_CONFIG($1)\nfi\n\nAC_LANG_RESTORE\n\nGCC=$lt_save_GCC\nCC=$lt_save_CC\nCFLAGS=$lt_save_CFLAGS\n])# _LT_LANG_GCJ_CONFIG\n\n\n# _LT_LANG_GO_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for the GNU Go compiler\n# are suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_GO_CONFIG],\n[AC_REQUIRE([LT_PROG_GO])dnl\nAC_LANG_SAVE\n\n# Source file extension for Go test sources.\nac_ext=go\n\n# Object file extension for compiled Go test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code=\"package main; func main() { }\"\n\n# Code to be used in simple link tests\nlt_simple_link_test_code='package main; func main() { }'\n\n# ltmain only uses $CC for tagged configurations so make sure $CC is set.\n_LT_TAG_COMPILER\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n# Allow CC to be a program name with arguments.\nlt_save_CC=$CC\nlt_save_CFLAGS=$CFLAGS\nlt_save_GCC=$GCC\nGCC=yes\nCC=${GOC-\"gccgo\"}\nCFLAGS=$GOFLAGS\ncompiler=$CC\n_LT_TAGVAR(compiler, $1)=$CC\n_LT_TAGVAR(LD, $1)=$LD\n_LT_CC_BASENAME([$compiler])\n\n# Go did not exist at the time GCC didn't implicitly link libc in.\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n\n## CAVEAT EMPTOR:\n## There is no encapsulation within the following macros, do not change\n## the running order or otherwise move them around unless you know exactly\n## what you are doing...\nif test -n \"$compiler\"; then\n  _LT_COMPILER_NO_RTTI($1)\n  _LT_COMPILER_PIC($1)\n  _LT_COMPILER_C_O($1)\n  _LT_COMPILER_FILE_LOCKS($1)\n  _LT_LINKER_SHLIBS($1)\n  _LT_LINKER_HARDCODE_LIBPATH($1)\n\n  _LT_CONFIG($1)\nfi\n\nAC_LANG_RESTORE\n\nGCC=$lt_save_GCC\nCC=$lt_save_CC\nCFLAGS=$lt_save_CFLAGS\n])# _LT_LANG_GO_CONFIG\n\n\n# _LT_LANG_RC_CONFIG([TAG])\n# -------------------------\n# Ensure that the configuration variables for the Windows resource compiler\n# are suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_RC_CONFIG],\n[AC_REQUIRE([LT_PROG_RC])dnl\nAC_LANG_SAVE\n\n# Source file extension for RC test sources.\nac_ext=rc\n\n# Object file extension for compiled RC test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code='sample MENU { MENUITEM \"&Soup\", 100, CHECKED }'\n\n# Code to be used in simple link tests\nlt_simple_link_test_code=$lt_simple_compile_test_code\n\n# ltmain only uses $CC for tagged configurations so make sure $CC is set.\n_LT_TAG_COMPILER\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n# Allow CC to be a program name with arguments.\nlt_save_CC=$CC\nlt_save_CFLAGS=$CFLAGS\nlt_save_GCC=$GCC\nGCC=\nCC=${RC-\"windres\"}\nCFLAGS=\ncompiler=$CC\n_LT_TAGVAR(compiler, $1)=$CC\n_LT_CC_BASENAME([$compiler])\n_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)=yes\n\nif test -n \"$compiler\"; then\n  :\n  _LT_CONFIG($1)\nfi\n\nGCC=$lt_save_GCC\nAC_LANG_RESTORE\nCC=$lt_save_CC\nCFLAGS=$lt_save_CFLAGS\n])# _LT_LANG_RC_CONFIG\n\n\n# LT_PROG_GCJ\n# -----------\nAC_DEFUN([LT_PROG_GCJ],\n[m4_ifdef([AC_PROG_GCJ], [AC_PROG_GCJ],\n  [m4_ifdef([A][M_PROG_GCJ], [A][M_PROG_GCJ],\n    [AC_CHECK_TOOL(GCJ, gcj,)\n      test set = \"${GCJFLAGS+set}\" || GCJFLAGS=\"-g -O2\"\n      AC_SUBST(GCJFLAGS)])])[]dnl\n])\n\n# Old name:\nAU_ALIAS([LT_AC_PROG_GCJ], [LT_PROG_GCJ])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([LT_AC_PROG_GCJ], [])\n\n\n# LT_PROG_GO\n# ----------\nAC_DEFUN([LT_PROG_GO],\n[AC_CHECK_TOOL(GOC, gccgo,)\n])\n\n\n# LT_PROG_RC\n# ----------\nAC_DEFUN([LT_PROG_RC],\n[AC_CHECK_TOOL(RC, windres,)\n])\n\n# Old name:\nAU_ALIAS([LT_AC_PROG_RC], [LT_PROG_RC])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([LT_AC_PROG_RC], [])\n\n\n# _LT_DECL_EGREP\n# --------------\n# If we don't have a new enough Autoconf to choose the best grep\n# available, choose the one first in the user's PATH.\nm4_defun([_LT_DECL_EGREP],\n[AC_REQUIRE([AC_PROG_EGREP])dnl\nAC_REQUIRE([AC_PROG_FGREP])dnl\ntest -z \"$GREP\" && GREP=grep\n_LT_DECL([], [GREP], [1], [A grep program that handles long lines])\n_LT_DECL([], [EGREP], [1], [An ERE matcher])\n_LT_DECL([], [FGREP], [1], [A literal string matcher])\ndnl Non-bleeding-edge autoconf doesn't subst GREP, so do it here too\nAC_SUBST([GREP])\n])\n\n\n# _LT_DECL_OBJDUMP\n# --------------\n# If we don't have a new enough Autoconf to choose the best objdump\n# available, choose the one first in the user's PATH.\nm4_defun([_LT_DECL_OBJDUMP],\n[AC_CHECK_TOOL(OBJDUMP, objdump, false)\ntest -z \"$OBJDUMP\" && OBJDUMP=objdump\n_LT_DECL([], [OBJDUMP], [1], [An object symbol dumper])\nAC_SUBST([OBJDUMP])\n])\n\n# _LT_DECL_DLLTOOL\n# ----------------\n# Ensure DLLTOOL variable is set.\nm4_defun([_LT_DECL_DLLTOOL],\n[AC_CHECK_TOOL(DLLTOOL, dlltool, false)\ntest -z \"$DLLTOOL\" && DLLTOOL=dlltool\n_LT_DECL([], [DLLTOOL], [1], [DLL creation program])\nAC_SUBST([DLLTOOL])\n])\n\n# _LT_DECL_SED\n# ------------\n# Check for a fully-functional sed program, that truncates\n# as few characters as possible.  Prefer GNU sed if found.\nm4_defun([_LT_DECL_SED],\n[AC_PROG_SED\ntest -z \"$SED\" && SED=sed\nXsed=\"$SED -e 1s/^X//\"\n_LT_DECL([], [SED], [1], [A sed program that does not truncate output])\n_LT_DECL([], [Xsed], [\"\\$SED -e 1s/^X//\"],\n    [Sed that helps us avoid accidentally triggering echo(1) options like -n])\n])# _LT_DECL_SED\n\nm4_ifndef([AC_PROG_SED], [\n############################################################\n# NOTE: This macro has been submitted for inclusion into   #\n#  GNU Autoconf as AC_PROG_SED.  When it is available in   #\n#  a released version of Autoconf we should remove this    #\n#  macro and use it instead.                               #\n############################################################\n\nm4_defun([AC_PROG_SED],\n[AC_MSG_CHECKING([for a sed that does not truncate output])\nAC_CACHE_VAL(lt_cv_path_SED,\n[# Loop through the user's path and test for sed and gsed.\n# Then use that list of sed's as ones to test for truncation.\nas_save_IFS=$IFS; IFS=$PATH_SEPARATOR\nfor as_dir in $PATH\ndo\n  IFS=$as_save_IFS\n  test -z \"$as_dir\" && as_dir=.\n  for lt_ac_prog in sed gsed; do\n    for ac_exec_ext in '' $ac_executable_extensions; do\n      if $as_executable_p \"$as_dir/$lt_ac_prog$ac_exec_ext\"; then\n        lt_ac_sed_list=\"$lt_ac_sed_list $as_dir/$lt_ac_prog$ac_exec_ext\"\n      fi\n    done\n  done\ndone\nIFS=$as_save_IFS\nlt_ac_max=0\nlt_ac_count=0\n# Add /usr/xpg4/bin/sed as it is typically found on Solaris\n# along with /bin/sed that truncates output.\nfor lt_ac_sed in $lt_ac_sed_list /usr/xpg4/bin/sed; do\n  test ! -f \"$lt_ac_sed\" && continue\n  cat /dev/null > conftest.in\n  lt_ac_count=0\n  echo $ECHO_N \"0123456789$ECHO_C\" >conftest.in\n  # Check for GNU sed and select it if it is found.\n  if \"$lt_ac_sed\" --version 2>&1 < /dev/null | grep 'GNU' > /dev/null; then\n    lt_cv_path_SED=$lt_ac_sed\n    break\n  fi\n  while true; do\n    cat conftest.in conftest.in >conftest.tmp\n    mv conftest.tmp conftest.in\n    cp conftest.in conftest.nl\n    echo >>conftest.nl\n    $lt_ac_sed -e 's/a$//' < conftest.nl >conftest.out || break\n    cmp -s conftest.out conftest.nl || break\n    # 10000 chars as input seems more than enough\n    test 10 -lt \"$lt_ac_count\" && break\n    lt_ac_count=`expr $lt_ac_count + 1`\n    if test \"$lt_ac_count\" -gt \"$lt_ac_max\"; then\n      lt_ac_max=$lt_ac_count\n      lt_cv_path_SED=$lt_ac_sed\n    fi\n  done\ndone\n])\nSED=$lt_cv_path_SED\nAC_SUBST([SED])\nAC_MSG_RESULT([$SED])\n])#AC_PROG_SED\n])#m4_ifndef\n\n# Old name:\nAU_ALIAS([LT_AC_PROG_SED], [AC_PROG_SED])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([LT_AC_PROG_SED], [])\n\n\n# _LT_CHECK_SHELL_FEATURES\n# ------------------------\n# Find out whether the shell is Bourne or XSI compatible,\n# or has some other useful features.\nm4_defun([_LT_CHECK_SHELL_FEATURES],\n[if ( (MAIL=60; unset MAIL) || exit) >/dev/null 2>&1; then\n  lt_unset=unset\nelse\n  lt_unset=false\nfi\n_LT_DECL([], [lt_unset], [0], [whether the shell understands \"unset\"])dnl\n\n# test EBCDIC or ASCII\ncase `echo X|tr X '\\101'` in\n A) # ASCII based system\n    # \\n is not interpreted correctly by Solaris 8 /usr/ucb/tr\n  lt_SP2NL='tr \\040 \\012'\n  lt_NL2SP='tr \\015\\012 \\040\\040'\n  ;;\n *) # EBCDIC based system\n  lt_SP2NL='tr \\100 \\n'\n  lt_NL2SP='tr \\r\\n \\100\\100'\n  ;;\nesac\n_LT_DECL([SP2NL], [lt_SP2NL], [1], [turn spaces into newlines])dnl\n_LT_DECL([NL2SP], [lt_NL2SP], [1], [turn newlines into spaces])dnl\n])# _LT_CHECK_SHELL_FEATURES\n\n\n# _LT_PATH_CONVERSION_FUNCTIONS\n# -----------------------------\n# Determine what file name conversion functions should be used by\n# func_to_host_file (and, implicitly, by func_to_host_path).  These are needed\n# for certain cross-compile configurations and native mingw.\nm4_defun([_LT_PATH_CONVERSION_FUNCTIONS],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_CANONICAL_BUILD])dnl\nAC_MSG_CHECKING([how to convert $build file names to $host format])\nAC_CACHE_VAL(lt_cv_to_host_file_cmd,\n[case $host in\n  *-*-mingw* )\n    case $build in\n      *-*-mingw* ) # actually msys\n        lt_cv_to_host_file_cmd=func_convert_file_msys_to_w32\n        ;;\n      *-*-cygwin* )\n        lt_cv_to_host_file_cmd=func_convert_file_cygwin_to_w32\n        ;;\n      * ) # otherwise, assume *nix\n        lt_cv_to_host_file_cmd=func_convert_file_nix_to_w32\n        ;;\n    esac\n    ;;\n  *-*-cygwin* )\n    case $build in\n      *-*-mingw* ) # actually msys\n        lt_cv_to_host_file_cmd=func_convert_file_msys_to_cygwin\n        ;;\n      *-*-cygwin* )\n        lt_cv_to_host_file_cmd=func_convert_file_noop\n        ;;\n      * ) # otherwise, assume *nix\n        lt_cv_to_host_file_cmd=func_convert_file_nix_to_cygwin\n        ;;\n    esac\n    ;;\n  * ) # unhandled hosts (and \"normal\" native builds)\n    lt_cv_to_host_file_cmd=func_convert_file_noop\n    ;;\nesac\n])\nto_host_file_cmd=$lt_cv_to_host_file_cmd\nAC_MSG_RESULT([$lt_cv_to_host_file_cmd])\n_LT_DECL([to_host_file_cmd], [lt_cv_to_host_file_cmd],\n         [0], [convert $build file names to $host format])dnl\n\nAC_MSG_CHECKING([how to convert $build file names to toolchain format])\nAC_CACHE_VAL(lt_cv_to_tool_file_cmd,\n[#assume ordinary cross tools, or native build.\nlt_cv_to_tool_file_cmd=func_convert_file_noop\ncase $host in\n  *-*-mingw* )\n    case $build in\n      *-*-mingw* ) # actually msys\n        lt_cv_to_tool_file_cmd=func_convert_file_msys_to_w32\n        ;;\n    esac\n    ;;\nesac\n])\nto_tool_file_cmd=$lt_cv_to_tool_file_cmd\nAC_MSG_RESULT([$lt_cv_to_tool_file_cmd])\n_LT_DECL([to_tool_file_cmd], [lt_cv_to_tool_file_cmd],\n         [0], [convert $build files to toolchain format])dnl\n])# _LT_PATH_CONVERSION_FUNCTIONS\n",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/m4/ltoptions.m4": "# Helper functions for option handling.                    -*- Autoconf -*-\n#\n#   Copyright (C) 2004-2005, 2007-2009, 2011-2015 Free Software\n#   Foundation, Inc.\n#   Written by Gary V. Vaughan, 2004\n#\n# This file is free software; the Free Software Foundation gives\n# unlimited permission to copy and/or distribute it, with or without\n# modifications, as long as this notice is preserved.\n\n# serial 8 ltoptions.m4\n\n# This is to help aclocal find these macros, as it can't see m4_define.\nAC_DEFUN([LTOPTIONS_VERSION], [m4_if([1])])\n\n\n# _LT_MANGLE_OPTION(MACRO-NAME, OPTION-NAME)\n# ------------------------------------------\nm4_define([_LT_MANGLE_OPTION],\n[[_LT_OPTION_]m4_bpatsubst($1__$2, [[^a-zA-Z0-9_]], [_])])\n\n\n# _LT_SET_OPTION(MACRO-NAME, OPTION-NAME)\n# ---------------------------------------\n# Set option OPTION-NAME for macro MACRO-NAME, and if there is a\n# matching handler defined, dispatch to it.  Other OPTION-NAMEs are\n# saved as a flag.\nm4_define([_LT_SET_OPTION],\n[m4_define(_LT_MANGLE_OPTION([$1], [$2]))dnl\nm4_ifdef(_LT_MANGLE_DEFUN([$1], [$2]),\n        _LT_MANGLE_DEFUN([$1], [$2]),\n    [m4_warning([Unknown $1 option '$2'])])[]dnl\n])\n\n\n# _LT_IF_OPTION(MACRO-NAME, OPTION-NAME, IF-SET, [IF-NOT-SET])\n# ------------------------------------------------------------\n# Execute IF-SET if OPTION is set, IF-NOT-SET otherwise.\nm4_define([_LT_IF_OPTION],\n[m4_ifdef(_LT_MANGLE_OPTION([$1], [$2]), [$3], [$4])])\n\n\n# _LT_UNLESS_OPTIONS(MACRO-NAME, OPTION-LIST, IF-NOT-SET)\n# -------------------------------------------------------\n# Execute IF-NOT-SET unless all options in OPTION-LIST for MACRO-NAME\n# are set.\nm4_define([_LT_UNLESS_OPTIONS],\n[m4_foreach([_LT_Option], m4_split(m4_normalize([$2])),\n\t    [m4_ifdef(_LT_MANGLE_OPTION([$1], _LT_Option),\n\t\t      [m4_define([$0_found])])])[]dnl\nm4_ifdef([$0_found], [m4_undefine([$0_found])], [$3\n])[]dnl\n])\n\n\n# _LT_SET_OPTIONS(MACRO-NAME, OPTION-LIST)\n# ----------------------------------------\n# OPTION-LIST is a space-separated list of Libtool options associated\n# with MACRO-NAME.  If any OPTION has a matching handler declared with\n# LT_OPTION_DEFINE, dispatch to that macro; otherwise complain about\n# the unknown option and exit.\nm4_defun([_LT_SET_OPTIONS],\n[# Set options\nm4_foreach([_LT_Option], m4_split(m4_normalize([$2])),\n    [_LT_SET_OPTION([$1], _LT_Option)])\n\nm4_if([$1],[LT_INIT],[\n  dnl\n  dnl Simply set some default values (i.e off) if boolean options were not\n  dnl specified:\n  _LT_UNLESS_OPTIONS([LT_INIT], [dlopen], [enable_dlopen=no\n  ])\n  _LT_UNLESS_OPTIONS([LT_INIT], [win32-dll], [enable_win32_dll=no\n  ])\n  dnl\n  dnl If no reference was made to various pairs of opposing options, then\n  dnl we run the default mode handler for the pair.  For example, if neither\n  dnl 'shared' nor 'disable-shared' was passed, we enable building of shared\n  dnl archives by default:\n  _LT_UNLESS_OPTIONS([LT_INIT], [shared disable-shared], [_LT_ENABLE_SHARED])\n  _LT_UNLESS_OPTIONS([LT_INIT], [static disable-static], [_LT_ENABLE_STATIC])\n  _LT_UNLESS_OPTIONS([LT_INIT], [pic-only no-pic], [_LT_WITH_PIC])\n  _LT_UNLESS_OPTIONS([LT_INIT], [fast-install disable-fast-install],\n\t\t   [_LT_ENABLE_FAST_INSTALL])\n  _LT_UNLESS_OPTIONS([LT_INIT], [aix-soname=aix aix-soname=both aix-soname=svr4],\n\t\t   [_LT_WITH_AIX_SONAME([aix])])\n  ])\n])# _LT_SET_OPTIONS\n\n\n## --------------------------------- ##\n## Macros to handle LT_INIT options. ##\n## --------------------------------- ##\n\n# _LT_MANGLE_DEFUN(MACRO-NAME, OPTION-NAME)\n# -----------------------------------------\nm4_define([_LT_MANGLE_DEFUN],\n[[_LT_OPTION_DEFUN_]m4_bpatsubst(m4_toupper([$1__$2]), [[^A-Z0-9_]], [_])])\n\n\n# LT_OPTION_DEFINE(MACRO-NAME, OPTION-NAME, CODE)\n# -----------------------------------------------\nm4_define([LT_OPTION_DEFINE],\n[m4_define(_LT_MANGLE_DEFUN([$1], [$2]), [$3])[]dnl\n])# LT_OPTION_DEFINE\n\n\n# dlopen\n# ------\nLT_OPTION_DEFINE([LT_INIT], [dlopen], [enable_dlopen=yes\n])\n\nAU_DEFUN([AC_LIBTOOL_DLOPEN],\n[_LT_SET_OPTION([LT_INIT], [dlopen])\nAC_DIAGNOSE([obsolete],\n[$0: Remove this warning and the call to _LT_SET_OPTION when you\nput the 'dlopen' option into LT_INIT's first parameter.])\n])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_DLOPEN], [])\n\n\n# win32-dll\n# ---------\n# Declare package support for building win32 dll's.\nLT_OPTION_DEFINE([LT_INIT], [win32-dll],\n[enable_win32_dll=yes\n\ncase $host in\n*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-cegcc*)\n  AC_CHECK_TOOL(AS, as, false)\n  AC_CHECK_TOOL(DLLTOOL, dlltool, false)\n  AC_CHECK_TOOL(OBJDUMP, objdump, false)\n  ;;\nesac\n\ntest -z \"$AS\" && AS=as\n_LT_DECL([], [AS],      [1], [Assembler program])dnl\n\ntest -z \"$DLLTOOL\" && DLLTOOL=dlltool\n_LT_DECL([], [DLLTOOL], [1], [DLL creation program])dnl\n\ntest -z \"$OBJDUMP\" && OBJDUMP=objdump\n_LT_DECL([], [OBJDUMP], [1], [Object dumper program])dnl\n])# win32-dll\n\nAU_DEFUN([AC_LIBTOOL_WIN32_DLL],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\n_LT_SET_OPTION([LT_INIT], [win32-dll])\nAC_DIAGNOSE([obsolete],\n[$0: Remove this warning and the call to _LT_SET_OPTION when you\nput the 'win32-dll' option into LT_INIT's first parameter.])\n])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_WIN32_DLL], [])\n\n\n# _LT_ENABLE_SHARED([DEFAULT])\n# ----------------------------\n# implement the --enable-shared flag, and supports the 'shared' and\n# 'disable-shared' LT_INIT options.\n# DEFAULT is either 'yes' or 'no'.  If omitted, it defaults to 'yes'.\nm4_define([_LT_ENABLE_SHARED],\n[m4_define([_LT_ENABLE_SHARED_DEFAULT], [m4_if($1, no, no, yes)])dnl\nAC_ARG_ENABLE([shared],\n    [AS_HELP_STRING([--enable-shared@<:@=PKGS@:>@],\n\t[build shared libraries @<:@default=]_LT_ENABLE_SHARED_DEFAULT[@:>@])],\n    [p=${PACKAGE-default}\n    case $enableval in\n    yes) enable_shared=yes ;;\n    no) enable_shared=no ;;\n    *)\n      enable_shared=no\n      # Look at the argument we got.  We use all the common list separators.\n      lt_save_ifs=$IFS; IFS=$IFS$PATH_SEPARATOR,\n      for pkg in $enableval; do\n\tIFS=$lt_save_ifs\n\tif test \"X$pkg\" = \"X$p\"; then\n\t  enable_shared=yes\n\tfi\n      done\n      IFS=$lt_save_ifs\n      ;;\n    esac],\n    [enable_shared=]_LT_ENABLE_SHARED_DEFAULT)\n\n    _LT_DECL([build_libtool_libs], [enable_shared], [0],\n\t[Whether or not to build shared libraries])\n])# _LT_ENABLE_SHARED\n\nLT_OPTION_DEFINE([LT_INIT], [shared], [_LT_ENABLE_SHARED([yes])])\nLT_OPTION_DEFINE([LT_INIT], [disable-shared], [_LT_ENABLE_SHARED([no])])\n\n# Old names:\nAC_DEFUN([AC_ENABLE_SHARED],\n[_LT_SET_OPTION([LT_INIT], m4_if([$1], [no], [disable-])[shared])\n])\n\nAC_DEFUN([AC_DISABLE_SHARED],\n[_LT_SET_OPTION([LT_INIT], [disable-shared])\n])\n\nAU_DEFUN([AM_ENABLE_SHARED], [AC_ENABLE_SHARED($@)])\nAU_DEFUN([AM_DISABLE_SHARED], [AC_DISABLE_SHARED($@)])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AM_ENABLE_SHARED], [])\ndnl AC_DEFUN([AM_DISABLE_SHARED], [])\n\n\n\n# _LT_ENABLE_STATIC([DEFAULT])\n# ----------------------------\n# implement the --enable-static flag, and support the 'static' and\n# 'disable-static' LT_INIT options.\n# DEFAULT is either 'yes' or 'no'.  If omitted, it defaults to 'yes'.\nm4_define([_LT_ENABLE_STATIC],\n[m4_define([_LT_ENABLE_STATIC_DEFAULT], [m4_if($1, no, no, yes)])dnl\nAC_ARG_ENABLE([static],\n    [AS_HELP_STRING([--enable-static@<:@=PKGS@:>@],\n\t[build static libraries @<:@default=]_LT_ENABLE_STATIC_DEFAULT[@:>@])],\n    [p=${PACKAGE-default}\n    case $enableval in\n    yes) enable_static=yes ;;\n    no) enable_static=no ;;\n    *)\n     enable_static=no\n      # Look at the argument we got.  We use all the common list separators.\n      lt_save_ifs=$IFS; IFS=$IFS$PATH_SEPARATOR,\n      for pkg in $enableval; do\n\tIFS=$lt_save_ifs\n\tif test \"X$pkg\" = \"X$p\"; then\n\t  enable_static=yes\n\tfi\n      done\n      IFS=$lt_save_ifs\n      ;;\n    esac],\n    [enable_static=]_LT_ENABLE_STATIC_DEFAULT)\n\n    _LT_DECL([build_old_libs], [enable_static], [0],\n\t[Whether or not to build static libraries])\n])# _LT_ENABLE_STATIC\n\nLT_OPTION_DEFINE([LT_INIT], [static], [_LT_ENABLE_STATIC([yes])])\nLT_OPTION_DEFINE([LT_INIT], [disable-static], [_LT_ENABLE_STATIC([no])])\n\n# Old names:\nAC_DEFUN([AC_ENABLE_STATIC],\n[_LT_SET_OPTION([LT_INIT], m4_if([$1], [no], [disable-])[static])\n])\n\nAC_DEFUN([AC_DISABLE_STATIC],\n[_LT_SET_OPTION([LT_INIT], [disable-static])\n])\n\nAU_DEFUN([AM_ENABLE_STATIC], [AC_ENABLE_STATIC($@)])\nAU_DEFUN([AM_DISABLE_STATIC], [AC_DISABLE_STATIC($@)])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AM_ENABLE_STATIC], [])\ndnl AC_DEFUN([AM_DISABLE_STATIC], [])\n\n\n\n# _LT_ENABLE_FAST_INSTALL([DEFAULT])\n# ----------------------------------\n# implement the --enable-fast-install flag, and support the 'fast-install'\n# and 'disable-fast-install' LT_INIT options.\n# DEFAULT is either 'yes' or 'no'.  If omitted, it defaults to 'yes'.\nm4_define([_LT_ENABLE_FAST_INSTALL],\n[m4_define([_LT_ENABLE_FAST_INSTALL_DEFAULT], [m4_if($1, no, no, yes)])dnl\nAC_ARG_ENABLE([fast-install],\n    [AS_HELP_STRING([--enable-fast-install@<:@=PKGS@:>@],\n    [optimize for fast installation @<:@default=]_LT_ENABLE_FAST_INSTALL_DEFAULT[@:>@])],\n    [p=${PACKAGE-default}\n    case $enableval in\n    yes) enable_fast_install=yes ;;\n    no) enable_fast_install=no ;;\n    *)\n      enable_fast_install=no\n      # Look at the argument we got.  We use all the common list separators.\n      lt_save_ifs=$IFS; IFS=$IFS$PATH_SEPARATOR,\n      for pkg in $enableval; do\n\tIFS=$lt_save_ifs\n\tif test \"X$pkg\" = \"X$p\"; then\n\t  enable_fast_install=yes\n\tfi\n      done\n      IFS=$lt_save_ifs\n      ;;\n    esac],\n    [enable_fast_install=]_LT_ENABLE_FAST_INSTALL_DEFAULT)\n\n_LT_DECL([fast_install], [enable_fast_install], [0],\n\t [Whether or not to optimize for fast installation])dnl\n])# _LT_ENABLE_FAST_INSTALL\n\nLT_OPTION_DEFINE([LT_INIT], [fast-install], [_LT_ENABLE_FAST_INSTALL([yes])])\nLT_OPTION_DEFINE([LT_INIT], [disable-fast-install], [_LT_ENABLE_FAST_INSTALL([no])])\n\n# Old names:\nAU_DEFUN([AC_ENABLE_FAST_INSTALL],\n[_LT_SET_OPTION([LT_INIT], m4_if([$1], [no], [disable-])[fast-install])\nAC_DIAGNOSE([obsolete],\n[$0: Remove this warning and the call to _LT_SET_OPTION when you put\nthe 'fast-install' option into LT_INIT's first parameter.])\n])\n\nAU_DEFUN([AC_DISABLE_FAST_INSTALL],\n[_LT_SET_OPTION([LT_INIT], [disable-fast-install])\nAC_DIAGNOSE([obsolete],\n[$0: Remove this warning and the call to _LT_SET_OPTION when you put\nthe 'disable-fast-install' option into LT_INIT's first parameter.])\n])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_ENABLE_FAST_INSTALL], [])\ndnl AC_DEFUN([AM_DISABLE_FAST_INSTALL], [])\n\n\n# _LT_WITH_AIX_SONAME([DEFAULT])\n# ----------------------------------\n# implement the --with-aix-soname flag, and support the `aix-soname=aix'\n# and `aix-soname=both' and `aix-soname=svr4' LT_INIT options. DEFAULT\n# is either `aix', `both' or `svr4'.  If omitted, it defaults to `aix'.\nm4_define([_LT_WITH_AIX_SONAME],\n[m4_define([_LT_WITH_AIX_SONAME_DEFAULT], [m4_if($1, svr4, svr4, m4_if($1, both, both, aix))])dnl\nshared_archive_member_spec=\ncase $host,$enable_shared in\npower*-*-aix[[5-9]]*,yes)\n  AC_MSG_CHECKING([which variant of shared library versioning to provide])\n  AC_ARG_WITH([aix-soname],\n    [AS_HELP_STRING([--with-aix-soname=aix|svr4|both],\n      [shared library versioning (aka \"SONAME\") variant to provide on AIX, @<:@default=]_LT_WITH_AIX_SONAME_DEFAULT[@:>@.])],\n    [case $withval in\n    aix|svr4|both)\n      ;;\n    *)\n      AC_MSG_ERROR([Unknown argument to --with-aix-soname])\n      ;;\n    esac\n    lt_cv_with_aix_soname=$with_aix_soname],\n    [AC_CACHE_VAL([lt_cv_with_aix_soname],\n      [lt_cv_with_aix_soname=]_LT_WITH_AIX_SONAME_DEFAULT)\n    with_aix_soname=$lt_cv_with_aix_soname])\n  AC_MSG_RESULT([$with_aix_soname])\n  if test aix != \"$with_aix_soname\"; then\n    # For the AIX way of multilib, we name the shared archive member\n    # based on the bitwidth used, traditionally 'shr.o' or 'shr_64.o',\n    # and 'shr.imp' or 'shr_64.imp', respectively, for the Import File.\n    # Even when GNU compilers ignore OBJECT_MODE but need '-maix64' flag,\n    # the AIX toolchain works better with OBJECT_MODE set (default 32).\n    if test 64 = \"${OBJECT_MODE-32}\"; then\n      shared_archive_member_spec=shr_64\n    else\n      shared_archive_member_spec=shr\n    fi\n  fi\n  ;;\n*)\n  with_aix_soname=aix\n  ;;\nesac\n\n_LT_DECL([], [shared_archive_member_spec], [0],\n    [Shared archive member basename, for filename based shared library versioning on AIX])dnl\n])# _LT_WITH_AIX_SONAME\n\nLT_OPTION_DEFINE([LT_INIT], [aix-soname=aix], [_LT_WITH_AIX_SONAME([aix])])\nLT_OPTION_DEFINE([LT_INIT], [aix-soname=both], [_LT_WITH_AIX_SONAME([both])])\nLT_OPTION_DEFINE([LT_INIT], [aix-soname=svr4], [_LT_WITH_AIX_SONAME([svr4])])\n\n\n# _LT_WITH_PIC([MODE])\n# --------------------\n# implement the --with-pic flag, and support the 'pic-only' and 'no-pic'\n# LT_INIT options.\n# MODE is either 'yes' or 'no'.  If omitted, it defaults to 'both'.\nm4_define([_LT_WITH_PIC],\n[AC_ARG_WITH([pic],\n    [AS_HELP_STRING([--with-pic@<:@=PKGS@:>@],\n\t[try to use only PIC/non-PIC objects @<:@default=use both@:>@])],\n    [lt_p=${PACKAGE-default}\n    case $withval in\n    yes|no) pic_mode=$withval ;;\n    *)\n      pic_mode=default\n      # Look at the argument we got.  We use all the common list separators.\n      lt_save_ifs=$IFS; IFS=$IFS$PATH_SEPARATOR,\n      for lt_pkg in $withval; do\n\tIFS=$lt_save_ifs\n\tif test \"X$lt_pkg\" = \"X$lt_p\"; then\n\t  pic_mode=yes\n\tfi\n      done\n      IFS=$lt_save_ifs\n      ;;\n    esac],\n    [pic_mode=m4_default([$1], [default])])\n\n_LT_DECL([], [pic_mode], [0], [What type of objects to build])dnl\n])# _LT_WITH_PIC\n\nLT_OPTION_DEFINE([LT_INIT], [pic-only], [_LT_WITH_PIC([yes])])\nLT_OPTION_DEFINE([LT_INIT], [no-pic], [_LT_WITH_PIC([no])])\n\n# Old name:\nAU_DEFUN([AC_LIBTOOL_PICMODE],\n[_LT_SET_OPTION([LT_INIT], [pic-only])\nAC_DIAGNOSE([obsolete],\n[$0: Remove this warning and the call to _LT_SET_OPTION when you\nput the 'pic-only' option into LT_INIT's first parameter.])\n])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_PICMODE], [])\n\n## ----------------- ##\n## LTDL_INIT Options ##\n## ----------------- ##\n\nm4_define([_LTDL_MODE], [])\nLT_OPTION_DEFINE([LTDL_INIT], [nonrecursive],\n\t\t [m4_define([_LTDL_MODE], [nonrecursive])])\nLT_OPTION_DEFINE([LTDL_INIT], [recursive],\n\t\t [m4_define([_LTDL_MODE], [recursive])])\nLT_OPTION_DEFINE([LTDL_INIT], [subproject],\n\t\t [m4_define([_LTDL_MODE], [subproject])])\n\nm4_define([_LTDL_TYPE], [])\nLT_OPTION_DEFINE([LTDL_INIT], [installable],\n\t\t [m4_define([_LTDL_TYPE], [installable])])\nLT_OPTION_DEFINE([LTDL_INIT], [convenience],\n\t\t [m4_define([_LTDL_TYPE], [convenience])])\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/reconstruct.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/arc.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/objects.gif",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/rose-over.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/right.gif",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/bluebells_clipped.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/montage.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/script.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/wand.ico",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/frame.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/annotate.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/granite.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/gaussian-blur.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/black.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/ImageMagick.ico",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/sponsor.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/imade_art2.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/bluebells_darker.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/piechart.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/logo-sm-flop.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/logo-sm-fx.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/red-circle.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/navy.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/radial-gradient.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/sprite.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/wand.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/bluebells_lin.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/fuzzy-magick.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/examples.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/cylinder_shaded.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/objects.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/wizard.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/label.gif",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/affine.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/rose.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/atop.gif",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/over.gif",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/button.gif",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/difference.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/rose.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/t-shirt.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/rose.pnm",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/rose-sigmoidal.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/litecoin.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/smile.gif",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/bluebells_log.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/configure.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/wizard.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/objects.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/logo-sm.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/logo.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/background.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/white-highlight.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/red-ball.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/patterns/left30.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/patterns/vertical2.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/patterns/bricks.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/patterns/octagons.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/patterns/left45.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/patterns/fishscales.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/patterns/horizontal2.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/patterns/hs_cross.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/patterns/gray30.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/patterns/gray40.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/patterns/verticalleftshingle.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/patterns/gray50.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/patterns/vertical.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/patterns/hs_bdiagonal.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/patterns/right30.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/patterns/horizontal3.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/patterns/hs_vertical.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/patterns/hexagons.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/patterns/rightshingle.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/patterns/circles.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/patterns/gray75.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/patterns/horizontalsaw.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/patterns/verticalsaw.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/patterns/horizontal.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/patterns/gray45.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/patterns/vertical3.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/patterns/gray5.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/patterns/gray90.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/patterns/gray15.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/patterns/right45.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/patterns/verticalbricks.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/patterns/gray95.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/patterns/gray70.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/patterns/leftshingle.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/patterns/gray20.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/patterns/checkerboard.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/patterns/gray0.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/patterns/gray80.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/patterns/gray85.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/patterns/smallfishscales.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/patterns/gray100.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/patterns/gray55.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/patterns/gray35.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/patterns/crosshatch.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/patterns/crosshatch30.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/patterns/gray25.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/patterns/verticalrightshingle.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/patterns/hs_horizontal.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/patterns/gray10.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/patterns/hs_fdiagonal.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/patterns/crosshatch45.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/patterns/hs_diagcross.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/patterns/gray60.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/images/patterns/gray65.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/config/ImageMagick.rdf.in",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/config/sRGB.icm",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/config/cmyk.icm",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/MagickWand/tests/font_4.gif",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/MagickWand/tests/font_8.gif",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/MagickWand/tests/font_6.gif",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/MagickWand/tests/font_2.gif",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/MagickWand/tests/font_5.gif",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/MagickWand/tests/font_1.gif",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/MagickWand/tests/font_3.gif",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/MagickWand/tests/font_0.gif",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/MagickWand/tests/font_7.gif",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/MagickWand/tests/font_9.gif",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/tests/input_bilevel.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/tests/input_256c.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/tests/rose.pnm",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/tests/sequence.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/tests/input_truecolor.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/tests/input_gray.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/demo/red-flower.gif",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/demo/model.gif",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/demo/yellow-flower.gif",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/demo/pink-flower.gif",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/demo/smile.gif",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/demo/src.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/demo/tile.gif",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/demo/dst.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/demo/Generic.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/input.pcx",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/input.pict",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/input.im1",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/input.dcx",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/input.psd",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/input.p7",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/input_70x46.gray",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/input.tim",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/input.wpg",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/input.sgi",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/input.im8",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/input_16.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/input_p7.p7",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/input.dib",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/input_70x46.cmyk",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/input.tga",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/input.viff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/input_p4.pbm",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/input.wbmp",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/MasterImage_70x46.ppm",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/input.im24",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/input_gray_lsb_double.mat",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/input.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/input_70x46.rgb",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/input.mtv",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/input_p6.ppm",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/input.gif87",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/input.ico",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/input_gray_msb_08bit.mat",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/input_gray_lsb_08bit.mat",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/input.rle",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/input_70x46.rgba",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/input.fits",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/input_rgb_lsb_08bit.mat",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/input_70x46.uyvy",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/input.avs",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/input_p5.pgm",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/input.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/input.mat",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/input_70x46.yuv",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/input.gif",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/Generic.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/input.bmp24",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/input.bie",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/x11/congrats.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/x11/input.xwd",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/bzlib/input.miff.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/bzlib/input.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/ttf/input.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/rad/input.rad",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/wmf/clock.wmf",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/wmf/wizard.wmf",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/openjp2/input.jp2",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/openjp2/input.j2k",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/openjp2/input.jpc",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/jpeg/input_plane.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/jpeg/input.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/zlib/input.miff.gz",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/zlib/input.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/fpx/input_truecolor.fpx",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/fpx/input_grayscale.fpx",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/fpx/input_jpeg.fpx",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/fpx/input_256.fpx",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/fpx/input_bw.fpx",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/mpeg/input.m2v",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/mpeg/input.mpg",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/jng/input_gray.jng",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/jng/input_prog.jng",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/jng/input_prog_jdaa.jng",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/jng/input_gray_jdaa.jng",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/jng/input_jdaa.jng",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/jng/input_prog_idat.jng",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/jng/input_gray_idat.jng",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/jng/input_rose.jng",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/jng/input_gray_prog_idat.jng",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/jng/input_idat.jng",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/jng/input_gray_prog.jng",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/jng/input_gray_prog_jdaa.jng",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/png/input.mng",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/png/input_mono.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/png/input_256.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/png/input_16.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/png/input_truecolor.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/png/input_bw.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/output_p7.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/ttf/annotate.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/ttf/read.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/ttf/label.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/wmf/clock.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/wmf/wizard.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/jp2/read_jp2.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/jp2/read_pgx.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/jp2/read_jpc.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/jpeg/read_non_interlaced.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/jpeg/read_plane_interlaced.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/jpeg/write_plane_interlaced.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/jpeg/write_non_interlaced.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/read/input_rle.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/read/input_mtv.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/read/input_null_black.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/read/input_ppm_p3.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/read/input_wbmp.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/read/input_sgi.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/read/input_wpg.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/read/input_tile.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/read/granite.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/read/input_dcx.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/read/input_im8.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/read/input_bmp.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/read/input_uyvy.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/read/input_pgm_p5.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/read/input_ico.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/read/input_rgb.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/read/input_p7.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/read/input_mat.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/read/input_pict.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/read/input_psd.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/read/input_cmyk.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/read/input_xwd.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/read/input_ppm_p6.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/read/input_viff.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/read/input_fits.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/read/input_bmp24.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/read/input_pbm_p1.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/read/input_xbm.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/read/input_xc_black.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/read/input_pcx.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/read/input_im24.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/read/input_gif.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/read/input_pbm_p4.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/read/input_rgba.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/read/input_null_DarkOrange.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/read/input_im1.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/read/gradient.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/read/input_null_white.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/read/input_gif87.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/read/input_pgm_p2.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/read/input_dib.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/read/input_xpm.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/read/input_avs.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/read/input_tim.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/read/input_tga.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/read/input_gray.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/read/input_miff.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/cgm/read.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/filter/Negate.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/filter/Roll.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/filter/Emboss.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/filter/GaussianBlur.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/filter/MatteFloodfill.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/filter/Chop.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/filter/OilPaint.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/filter/Level.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/filter/Flip.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/filter/Colorize.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/filter/Equalize.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/filter/Edge.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/filter/Opaque.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/filter/Modulate.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/filter/Flop.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/filter/Shave.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/filter/Channel.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/filter/Wave.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/filter/Solarize.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/filter/AdaptiveThreshold.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/filter/Frame.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/filter/Magnify.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/filter/Implode.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/filter/Contrast.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/filter/Annotate.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/filter/Despeckle.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/filter/Scale.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/filter/MotionBlur.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/filter/Sample.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/filter/ReduceNoise.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/filter/Border.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/filter/MedianFilter.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/filter/Charcoal.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/filter/SigmoidalContrast.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/filter/Swirl.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/filter/ColorFloodfill.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/filter/Set.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/filter/Shear.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/filter/Threshold.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/filter/Rotate.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/filter/Minify.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/filter/UnsharpMask.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/filter/Crop.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/filter/Normalize.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/filter/Convolve.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/filter/Sharpen.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/filter/Resize.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/filter/Quantize.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/filter/Segment.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/filter/RadialBlur.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/filter/Blur.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/filter/Draw.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/filter/Trim.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/filter/Gamma.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/filter/Shade.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/filter/Raise.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/composite/CopyRed.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/composite/CopyAlpha.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/composite/Difference.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/composite/CopyGreen.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/composite/Atop.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/composite/Clear.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/composite/CopyBlue.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/composite/Multiply.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/composite/In.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/composite/Add.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/composite/Xor.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/composite/Out.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/composite/Rotate.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/composite/Minus.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/composite/Copy.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/composite/Plus.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/composite/Bumpmap.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/composite/Subtract.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/composite/Over.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/jng/write_gray.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/jng/read_gray.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/jng/write_prog_idat.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/jng/input_idat.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/jng/gray_prog_idat_tmp.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/jng/input_prog_jdaa.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/jng/read_gray_prog_jdaa.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/jng/write_prog_jdaa.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/jng/prog_tmp.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/jng/idat_tmp.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/jng/prog_jdaa_tmp.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/jng/input_gray_prog_idat.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/jng/write_gray_prog_jdaa.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/jng/input_gray_jdaa.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/jng/read_gray_prog.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/jng/read_jdaa.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/jng/input_gray_prog.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/jng/input_gray_idat.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/jng/read_idat.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/jng/input_prog.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/jng/gray_tmp.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/jng/read_prog_idat.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/jng/write_gray_jdaa.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/jng/jdaa_tmp.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/jng/read_prog.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/jng/write_gray_idat.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/jng/read_gray_jdaa.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/jng/write_prog.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/jng/gray_jdaa_tmp.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/jng/gray_prog_tmp.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/jng/gray_idat_tmp.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/jng/read_gray_prog_idat.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/jng/prog_idat_tmp.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/jng/write_gray_prog_idat.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/jng/input_prog_idat.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/jng/input_jdaa.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/jng/write_idat.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/jng/input_gray_prog_jdaa.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/jng/gray_prog_jdaa_tmp.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/jng/write_gray_prog.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/jng/write_jdaa.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/jng/input_rose.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/jng/read_gray_idat.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/jng/input_gray.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/write/jng/read_prog_jdaa.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/ttf/annotate.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/ttf/read.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/ttf/label.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/wmf/clock.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/wmf/wizard.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/openjp2/read_jp2.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/openjp2/read_jpc.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/openjp2/read_j2k.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/jpeg/read_non_interlaced.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/jpeg/read_plane_interlaced.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/jpeg/write_plane_interlaced.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/jpeg/write_non_interlaced.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/read/input_rle.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/read/input_gray_msb_08bit_mat.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/read/input_mtv.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/read/input_null_black.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/read/input_ppm_p3.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/read/input_wbmp.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/read/input_sgi.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/read/input_wpg.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/read/input_tile.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/read/granite.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/read/input_dcx.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/read/input_im8.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/read/input_bmp.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/read/input_uyvy.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/read/input_pgm_p5.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/read/input_ico.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/read/input_rgb.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/read/input_p7.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/read/input_mat.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/read/input_pict.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/read/input_rgb_lsb_08bit_mat.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/read/input_psd.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/read/input_cmyk.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/read/input_xwd.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/read/input_ppm_p6.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/read/input_viff.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/read/input_gray_lsb_double_mat.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/read/input_fits.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/read/input_bmp24.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/read/input_pbm_p1.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/read/input_xbm.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/read/input_gray_lsb_08bit_mat.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/read/input_pcx.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/read/input_im24.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/read/input_gif.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/read/input_pbm_p4.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/read/input_rgba.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/read/input_null_DarkOrange.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/read/input_im1.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/read/gradient.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/read/input_null_white.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/read/input_gif87.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/read/input_pgm_p2.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/read/input_dib.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/read/input_xpm.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/read/input_avs.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/read/input_tim.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/read/input_tga.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/read/input_gray.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/read/input_miff.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/cgm/read.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/filter/Negate.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/filter/Roll.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/filter/Emboss.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/filter/GaussianBlur.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/filter/MatteFloodfill.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/filter/OilPaint.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/filter/Level.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/filter/Flip.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/filter/Colorize.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/filter/Equalize.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/filter/QuantizeMono.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/filter/Edge.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/filter/Opaque.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/filter/Modulate.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/filter/Flop.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/filter/Shave.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/filter/Channel.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/filter/Wave.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/filter/AdaptiveThreshold.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/filter/Frame.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/filter/Magnify.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/filter/Implode.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/filter/Contrast.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/filter/Annotate.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/filter/Despeckle.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/filter/Scale.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/filter/MotionBlur.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/filter/Sample.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/filter/ReduceNoise.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/filter/Border.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/filter/MedianFilter.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/filter/Charcoal.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/filter/SigmoidalContrast.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/filter/Swirl.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/filter/ColorFloodfill.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/filter/Set.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/filter/Shear.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/filter/Threshold.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/filter/Rotate.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/filter/Minify.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/filter/UnsharpMask.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/filter/Crop.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/filter/Normalize.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/filter/Convolve.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/filter/Sharpen.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/filter/Resize.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/filter/Quantize.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/filter/Segment.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/filter/RadialBlur.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/filter/Blur.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/filter/Draw.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/filter/Trim.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/filter/Gamma.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/filter/Shade.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/filter/Raise.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/composite/CopyRed.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/composite/CopyAlpha.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/composite/Difference.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/composite/CopyGreen.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/composite/Atop.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/composite/Clear.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/composite/CopyBlue.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/composite/Multiply.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/composite/In.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/composite/Add.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/composite/Rotate.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/composite/Minus.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/composite/Copy.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/composite/Plus.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/composite/Bumpmap.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/composite/Subtract.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/composite/Over.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/jng/write_gray.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/jng/read_gray.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/jng/write_prog_idat.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/jng/input_idat.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/jng/gray_prog_idat_tmp.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/jng/input_prog_jdaa.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/jng/read_gray_prog_jdaa.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/jng/write_prog_jdaa.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/jng/prog_tmp.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/jng/idat_tmp.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/jng/prog_jdaa_tmp.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/jng/input_gray_prog_idat.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/jng/write_gray_prog_jdaa.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/jng/input_gray_jdaa.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/jng/read_gray_prog.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/jng/read_jdaa.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/jng/input_gray_prog.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/jng/input_gray_idat.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/jng/read_idat.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/jng/input_prog.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/jng/gray_tmp.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/jng/read_prog_idat.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/jng/write_gray_jdaa.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/jng/jdaa_tmp.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/jng/read_prog.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/jng/write_gray_idat.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/jng/read_gray_jdaa.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/jng/write_prog.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/jng/gray_jdaa_tmp.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/jng/gray_prog_tmp.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/jng/gray_idat_tmp.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/jng/read_gray_prog_idat.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/jng/prog_idat_tmp.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/jng/write_gray_prog_idat.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/jng/input_prog_idat.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/jng/input_jdaa.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/jng/write_idat.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/jng/input_gray_prog_jdaa.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/jng/gray_prog_jdaa_tmp.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/jng/write_gray_prog.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/jng/write_jdaa.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/jng/input_rose.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/jng/read_gray_idat.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/jng/input_gray.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/reference/jng/read_prog_jdaa.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/ps/input.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/tiff/input_mono.tiff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/tiff/input_256_planar_contig.tiff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/tiff/input_256_planar_separate.tiff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/tiff/input_256.tiff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/tiff/input_gray_16bit.tiff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/tiff/input_gray_8bit_matte.tiff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/tiff/input_256_matte.tiff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/tiff/input_gray_8bit.tiff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/tiff/input_16.tiff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/tiff/input_truecolor_16.tiff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/tiff/input_gray_12bit.tiff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/tiff/input_truecolor.tiff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/tiff/input_gray_4bit.tiff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/tiff/input_truecolor_stripped.tiff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/tiff/input_gray_4bit_matte.tiff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/tiff/input_truecolor_tiled32x32.tiff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/tiff/input_16_matte.tiff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/jbig/input.jbig",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/hdf/input_256.hdf",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/PerlMagick/t/hdf/input_truecolor.hdf",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/Magick++/demo/model.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/Magick++/demo/smile_anim.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/Magick++/demo/smile.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/Magick++/demo/tile.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/Magick++/tests/test_image.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/Magick++/tests/test_image_anim.miff",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/www/wand.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/www/favicon.ico",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/www/Magick++/Magick++.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/www/Magick++/thumbnail-anatomy-framed.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/www/Magick++/thumbnail-sample-framed.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/www/Magick++/right_triangle.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/www/Magick++/montage-sample-framed.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/www/Magick++/thumbnail-anatomy-plain.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/www/Magick++/Drawable_example_1.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/www/Magick++/ImageMagick.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/www/Magick++/thumbnail-sample-plain.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/www/Magick++/Cache.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/www/Magick++/Image.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/www/api/MagickWand/ftv2pnode.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/www/api/MagickWand/ftv2doc.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/www/api/MagickWand/tab_l.gif",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/www/api/MagickWand/ftv2mlastnode.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/www/api/MagickWand/ftv2folderopen.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/www/api/MagickWand/ftv2plastnode.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/www/api/MagickWand/ftv2vertline.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/www/api/MagickWand/ftv2lastnode.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/www/api/MagickWand/ftv2blank.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/www/api/MagickWand/ftv2link.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/www/api/MagickWand/ftv2folderclosed.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/www/api/MagickWand/tab_b.gif",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/www/api/MagickWand/tab_r.gif",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/www/api/MagickWand/ftv2mnode.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/www/api/MagickWand/doxygen.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/www/api/MagickWand/ftv2node.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/www/api/MagickCore/ftv2pnode.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/www/api/MagickCore/ftv2doc.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/www/api/MagickCore/tab_l.gif",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/www/api/MagickCore/ftv2mlastnode.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/www/api/MagickCore/ftv2folderopen.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/www/api/MagickCore/ftv2plastnode.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/www/api/MagickCore/ftv2vertline.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/www/api/MagickCore/ftv2lastnode.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/www/api/MagickCore/ftv2blank.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/www/api/MagickCore/ftv2link.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/www/api/MagickCore/ftv2folderclosed.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/www/api/MagickCore/tab_b.gif",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/www/api/MagickCore/tab_r.gif",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/www/api/MagickCore/ftv2mnode.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/www/api/MagickCore/doxygen.png",
        "/tmp/vanessa/spack-stage/spack-stage-imagemagick-7.0.2-7-r2srnluev5lmopptutnt6xsfqio7xflw/spack-src/www/api/MagickCore/ftv2node.png"
    ],
    "total_files": 2461
}