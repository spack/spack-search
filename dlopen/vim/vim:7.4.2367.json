{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/src/os_unix.c": "/* vi:set ts=8 sts=4 sw=4 noet:\n *\n * VIM - Vi IMproved\tby Bram Moolenaar\n *\t      OS/2 port by Paul Slootman\n *\t      VMS merge by Zoltan Arpadffy\n *\n * Do \":help uganda\"  in Vim to read copying and usage conditions.\n * Do \":help credits\" in Vim to see a list of people who contributed.\n * See README.txt for an overview of the Vim source code.\n */\n\n/*\n * os_unix.c -- code for all flavors of Unix (BSD, SYSV, SVR4, POSIX, ...)\n *\t     Also for OS/2, using the excellent EMX package!!!\n *\t     Also for BeOS and Atari MiNT.\n *\n * A lot of this file was originally written by Juergen Weigert and later\n * changed beyond recognition.\n */\n\n/*\n * Some systems have a prototype for select() that has (int *) instead of\n * (fd_set *), which is wrong. This define removes that prototype. We define\n * our own prototype below.\n * Don't use it for the Mac, it causes a warning for precompiled headers.\n * TODO: use a configure check for precompiled headers?\n */\n#if !defined(__APPLE__) && !defined(__TANDEM)\n# define select select_declared_wrong\n#endif\n\n#include \"vim.h\"\n\n#ifdef FEAT_MZSCHEME\n# include \"if_mzsch.h\"\n#endif\n\n#include \"os_unixx.h\"\t    /* unix includes for os_unix.c only */\n\n#ifdef USE_XSMP\n# include <X11/SM/SMlib.h>\n#endif\n\n#ifdef HAVE_SELINUX\n# include <selinux/selinux.h>\nstatic int selinux_enabled = -1;\n#endif\n\n#ifdef HAVE_SMACK\n# include <attr/xattr.h>\n# include <linux/xattr.h>\n# ifndef SMACK_LABEL_LEN\n#  define SMACK_LABEL_LEN 1024\n# endif\n#endif\n\n/*\n * Use this prototype for select, some include files have a wrong prototype\n */\n#ifndef __TANDEM\n# undef select\n# ifdef __BEOS__\n#  define select\tbeos_select\n# endif\n#endif\n\n#ifdef __CYGWIN__\n# ifndef WIN32\n#  include <cygwin/version.h>\n#  include <sys/cygwin.h>\t/* for cygwin_conv_to_posix_path() and/or\n\t\t\t\t * for cygwin_conv_path() */\n#  ifdef FEAT_CYGWIN_WIN32_CLIPBOARD\n#   define WIN32_LEAN_AND_MEAN\n#   include <windows.h>\n#   include \"winclip.pro\"\n#  endif\n# endif\n#endif\n\n#if defined(HAVE_SELECT)\nextern int   select(int, fd_set *, fd_set *, fd_set *, struct timeval *);\n#endif\n\n#ifdef FEAT_MOUSE_GPM\n# include <gpm.h>\n/* <linux/keyboard.h> contains defines conflicting with \"keymap.h\",\n * I just copied relevant defines here. A cleaner solution would be to put gpm\n * code into separate file and include there linux/keyboard.h\n */\n/* #include <linux/keyboard.h> */\n# define KG_SHIFT\t0\n# define KG_CTRL\t2\n# define KG_ALT\t\t3\n# define KG_ALTGR\t1\n# define KG_SHIFTL\t4\n# define KG_SHIFTR\t5\n# define KG_CTRLL\t6\n# define KG_CTRLR\t7\n# define KG_CAPSSHIFT\t8\n\nstatic void gpm_close(void);\nstatic int gpm_open(void);\nstatic int mch_gpm_process(void);\n#endif\n\n#ifdef FEAT_SYSMOUSE\n# include <sys/consio.h>\n# include <sys/fbio.h>\n\nstatic int sysmouse_open(void);\nstatic void sysmouse_close(void);\nstatic RETSIGTYPE sig_sysmouse SIGPROTOARG;\n#endif\n\n/*\n * end of autoconf section. To be extended...\n */\n\n/* Are the following #ifdefs still required? And why? Is that for X11? */\n\n#if defined(ESIX) || defined(M_UNIX) && !defined(SCO)\n# ifdef SIGWINCH\n#  undef SIGWINCH\n# endif\n# ifdef TIOCGWINSZ\n#  undef TIOCGWINSZ\n# endif\n#endif\n\n#if defined(SIGWINDOW) && !defined(SIGWINCH)\t/* hpux 9.01 has it */\n# define SIGWINCH SIGWINDOW\n#endif\n\n#ifdef FEAT_X11\n# include <X11/Xlib.h>\n# include <X11/Xutil.h>\n# include <X11/Xatom.h>\n# ifdef FEAT_XCLIPBOARD\n#  include <X11/Intrinsic.h>\n#  include <X11/Shell.h>\n#  include <X11/StringDefs.h>\nstatic Widget\txterm_Shell = (Widget)0;\nstatic void clip_update(void);\nstatic void xterm_update(void);\n# endif\n\n# if defined(FEAT_XCLIPBOARD) || defined(FEAT_TITLE)\nWindow\t    x11_window = 0;\n# endif\nDisplay\t    *x11_display = NULL;\n\n# ifdef FEAT_TITLE\nstatic int  get_x11_windis(void);\nstatic void set_x11_title(char_u *);\nstatic void set_x11_icon(char_u *);\n# endif\n#endif\n\n#ifdef FEAT_TITLE\nstatic int get_x11_title(int);\nstatic int get_x11_icon(int);\n\nstatic char_u\t*oldtitle = NULL;\nstatic int\tdid_set_title = FALSE;\nstatic char_u\t*oldicon = NULL;\nstatic int\tdid_set_icon = FALSE;\n#endif\n\nstatic void may_core_dump(void);\n\n#ifdef HAVE_UNION_WAIT\ntypedef union wait waitstatus;\n#else\ntypedef int waitstatus;\n#endif\nstatic pid_t wait4pid(pid_t, waitstatus *);\n\nstatic int  WaitForChar(long msec, int *interrupted);\nstatic int  WaitForCharOrMouse(long msec, int *interrupted);\n#if defined(__BEOS__) || defined(VMS)\nint  RealWaitForChar(int, long, int *, int *interrupted);\n#else\nstatic int  RealWaitForChar(int, long, int *, int *interrupted);\n#endif\n\n#ifdef FEAT_XCLIPBOARD\nstatic int do_xterm_trace(void);\n# define XT_TRACE_DELAY\t50\t/* delay for xterm tracing */\n#endif\n\nstatic void handle_resize(void);\n\n#if defined(SIGWINCH)\nstatic RETSIGTYPE sig_winch SIGPROTOARG;\n#endif\n#if defined(SIGINT)\nstatic RETSIGTYPE catch_sigint SIGPROTOARG;\n#endif\n#if defined(SIGPWR)\nstatic RETSIGTYPE catch_sigpwr SIGPROTOARG;\n#endif\n#if defined(SIGALRM) && defined(FEAT_X11) \\\n\t&& defined(FEAT_TITLE) && !defined(FEAT_GUI_GTK)\n# define SET_SIG_ALARM\nstatic RETSIGTYPE sig_alarm SIGPROTOARG;\n/* volatile because it is used in signal handler sig_alarm(). */\nstatic volatile int sig_alarm_called;\n#endif\nstatic RETSIGTYPE deathtrap SIGPROTOARG;\n\nstatic void catch_int_signal(void);\nstatic void set_signals(void);\nstatic void catch_signals(RETSIGTYPE (*func_deadly)(), RETSIGTYPE (*func_other)());\nstatic int  have_wildcard(int, char_u **);\nstatic int  have_dollars(int, char_u **);\n\nstatic int save_patterns(int num_pat, char_u **pat, int *num_file, char_u ***file);\n\n#ifndef SIG_ERR\n# define SIG_ERR\t((RETSIGTYPE (*)())-1)\n#endif\n\n/* volatile because it is used in signal handler sig_winch(). */\nstatic volatile int do_resize = FALSE;\nstatic char_u\t*extra_shell_arg = NULL;\nstatic int\tshow_shell_mess = TRUE;\n/* volatile because it is used in signal handler deathtrap(). */\nstatic volatile int deadly_signal = 0;\t    /* The signal we caught */\n/* volatile because it is used in signal handler deathtrap(). */\nstatic volatile int in_mch_delay = FALSE;    /* sleeping in mch_delay() */\n\nstatic int curr_tmode = TMODE_COOK;\t/* contains current terminal mode */\n\n#ifdef USE_XSMP\ntypedef struct\n{\n    SmcConn smcconn;\t    /* The SM connection ID */\n    IceConn iceconn;\t    /* The ICE connection ID */\n    char *clientid;\t    /* The client ID for the current smc session */\n    Bool save_yourself;     /* If we're in the middle of a save_yourself */\n    Bool shutdown;\t    /* If we're in shutdown mode */\n} xsmp_config_T;\n\nstatic xsmp_config_T xsmp;\n#endif\n\n#ifdef SYS_SIGLIST_DECLARED\n/*\n * I have seen\n *  extern char *_sys_siglist[NSIG];\n * on Irix, Linux, NetBSD and Solaris. It contains a nice list of strings\n * that describe the signals. That is nearly what we want here.  But\n * autoconf does only check for sys_siglist (without the underscore), I\n * do not want to change everything today.... jw.\n * This is why AC_DECL_SYS_SIGLIST is commented out in configure.in\n */\n#endif\n\nstatic struct signalinfo\n{\n    int\t    sig;\t/* Signal number, eg. SIGSEGV etc */\n    char    *name;\t/* Signal name (not char_u!). */\n    char    deadly;\t/* Catch as a deadly signal? */\n} signal_info[] =\n{\n#ifdef SIGHUP\n    {SIGHUP,\t    \"HUP\",\tTRUE},\n#endif\n#ifdef SIGQUIT\n    {SIGQUIT,\t    \"QUIT\",\tTRUE},\n#endif\n#ifdef SIGILL\n    {SIGILL,\t    \"ILL\",\tTRUE},\n#endif\n#ifdef SIGTRAP\n    {SIGTRAP,\t    \"TRAP\",\tTRUE},\n#endif\n#ifdef SIGABRT\n    {SIGABRT,\t    \"ABRT\",\tTRUE},\n#endif\n#ifdef SIGEMT\n    {SIGEMT,\t    \"EMT\",\tTRUE},\n#endif\n#ifdef SIGFPE\n    {SIGFPE,\t    \"FPE\",\tTRUE},\n#endif\n#ifdef SIGBUS\n    {SIGBUS,\t    \"BUS\",\tTRUE},\n#endif\n#if defined(SIGSEGV) && !defined(FEAT_MZSCHEME)\n    /* MzScheme uses SEGV in its garbage collector */\n    {SIGSEGV,\t    \"SEGV\",\tTRUE},\n#endif\n#ifdef SIGSYS\n    {SIGSYS,\t    \"SYS\",\tTRUE},\n#endif\n#ifdef SIGALRM\n    {SIGALRM,\t    \"ALRM\",\tFALSE},\t/* Perl's alarm() can trigger it */\n#endif\n#ifdef SIGTERM\n    {SIGTERM,\t    \"TERM\",\tTRUE},\n#endif\n#if defined(SIGVTALRM) && !defined(FEAT_RUBY)\n    {SIGVTALRM,\t    \"VTALRM\",\tTRUE},\n#endif\n#if defined(SIGPROF) && !defined(FEAT_MZSCHEME) && !defined(WE_ARE_PROFILING)\n    /* MzScheme uses SIGPROF for its own needs; On Linux with profiling\n     * this makes Vim exit.  WE_ARE_PROFILING is defined in Makefile.  */\n    {SIGPROF,\t    \"PROF\",\tTRUE},\n#endif\n#ifdef SIGXCPU\n    {SIGXCPU,\t    \"XCPU\",\tTRUE},\n#endif\n#ifdef SIGXFSZ\n    {SIGXFSZ,\t    \"XFSZ\",\tTRUE},\n#endif\n#ifdef SIGUSR1\n    {SIGUSR1,\t    \"USR1\",\tTRUE},\n#endif\n#if defined(SIGUSR2) && !defined(FEAT_SYSMOUSE)\n    /* Used for sysmouse handling */\n    {SIGUSR2,\t    \"USR2\",\tTRUE},\n#endif\n#ifdef SIGINT\n    {SIGINT,\t    \"INT\",\tFALSE},\n#endif\n#ifdef SIGWINCH\n    {SIGWINCH,\t    \"WINCH\",\tFALSE},\n#endif\n#ifdef SIGTSTP\n    {SIGTSTP,\t    \"TSTP\",\tFALSE},\n#endif\n#ifdef SIGPIPE\n    {SIGPIPE,\t    \"PIPE\",\tFALSE},\n#endif\n    {-1,\t    \"Unknown!\", FALSE}\n};\n\n    int\nmch_chdir(char *path)\n{\n    if (p_verbose >= 5)\n    {\n\tverbose_enter();\n\tsmsg((char_u *)\"chdir(%s)\", path);\n\tverbose_leave();\n    }\n# ifdef VMS\n    return chdir(vms_fixfilename(path));\n# else\n    return chdir(path);\n# endif\n}\n\n/*\n * Write s[len] to the screen.\n */\n    void\nmch_write(char_u *s, int len)\n{\n    ignored = (int)write(1, (char *)s, len);\n    if (p_wd)\t\t/* Unix is too fast, slow down a bit more */\n\tRealWaitForChar(read_cmd_fd, p_wd, NULL, NULL);\n}\n\n#if defined(HAVE_GETTIMEOFDAY) && defined(HAVE_SYS_TIME_H)\n/*\n * Return time in msec since \"start_tv\".\n */\n    static long\nelapsed(struct timeval *start_tv)\n{\n    struct timeval  now_tv;\n\n    gettimeofday(&now_tv, NULL);\n    return (now_tv.tv_sec - start_tv->tv_sec) * 1000L\n\t + (now_tv.tv_usec - start_tv->tv_usec) / 1000L;\n}\n#endif\n\n/*\n * mch_inchar(): low level input function.\n * Get a characters from the keyboard.\n * Return the number of characters that are available.\n * If wtime == 0 do not wait for characters.\n * If wtime == n wait a short time for characters.\n * If wtime == -1 wait forever for characters.\n */\n    int\nmch_inchar(\n    char_u\t*buf,\n    int\t\tmaxlen,\n    long\twtime,\t    /* don't use \"time\", MIPS cannot handle it */\n    int\t\ttb_change_cnt)\n{\n    int\t\tlen;\n    int\t\tinterrupted = FALSE;\n    long\twait_time;\n#if defined(HAVE_GETTIMEOFDAY) && defined(HAVE_SYS_TIME_H)\n    struct timeval  start_tv;\n\n    gettimeofday(&start_tv, NULL);\n#endif\n\n#ifdef MESSAGE_QUEUE\n    parse_queued_messages();\n#endif\n\n    /* Check if window changed size while we were busy, perhaps the \":set\n     * columns=99\" command was used. */\n    while (do_resize)\n\thandle_resize();\n\n    for (;;)\n    {\n\tif (wtime >= 0)\n\t    wait_time = wtime;\n\telse\n\t    wait_time = p_ut;\n#if defined(HAVE_GETTIMEOFDAY) && defined(HAVE_SYS_TIME_H)\n\twait_time -= elapsed(&start_tv);\n\tif (wait_time >= 0)\n\t{\n#endif\n\t    if (WaitForChar(wait_time, &interrupted))\n\t\tbreak;\n\n\t    /* no character available */\n\t    if (do_resize)\n\t    {\n\t\thandle_resize();\n\t\tcontinue;\n\t    }\n#ifdef FEAT_CLIENTSERVER\n\t    if (server_waiting())\n\t    {\n\t\tparse_queued_messages();\n\t\tcontinue;\n\t    }\n#endif\n#ifdef MESSAGE_QUEUE\n\t    if (interrupted)\n\t    {\n\t\tparse_queued_messages();\n\t\tcontinue;\n\t    }\n#endif\n#if defined(HAVE_GETTIMEOFDAY) && defined(HAVE_SYS_TIME_H)\n\t}\n#endif\n\tif (wtime >= 0)\n\t    /* no character available within \"wtime\" */\n\t    return 0;\n\n\t/* wtime == -1: no character available within 'updatetime' */\n#ifdef FEAT_AUTOCMD\n\tif (trigger_cursorhold() && maxlen >= 3\n\t\t\t\t\t   && !typebuf_changed(tb_change_cnt))\n\t{\n\t    buf[0] = K_SPECIAL;\n\t    buf[1] = KS_EXTRA;\n\t    buf[2] = (int)KE_CURSORHOLD;\n\t    return 3;\n\t}\n#endif\n\t/*\n\t * If there is no character available within 'updatetime' seconds\n\t * flush all the swap files to disk.\n\t * Also done when interrupted by SIGWINCH.\n\t */\n\tbefore_blocking();\n\tbreak;\n    }\n\n    /* repeat until we got a character */\n    for (;;)\n    {\n\tlong\twtime_now = -1L;\n\n\twhile (do_resize)    /* window changed size */\n\t    handle_resize();\n\n#ifdef MESSAGE_QUEUE\n\tparse_queued_messages();\n\n# ifdef FEAT_JOB_CHANNEL\n\tif (has_pending_job())\n\t{\n\t    /* Don't wait longer than a few seconds, checking for a finished\n\t     * job requires polling. */\n\t    if (p_ut > 9000L)\n\t\twtime_now = 1000L;\n\t    else\n\t\twtime_now = 10000L - p_ut;\n\t}\n# endif\n#endif\n\t/*\n\t * We want to be interrupted by the winch signal\n\t * or by an event on the monitored file descriptors.\n\t */\n\tif (!WaitForChar(wtime_now, &interrupted))\n\t{\n\t    if (do_resize)\t    /* interrupted by SIGWINCH signal */\n\t\tcontinue;\n#ifdef MESSAGE_QUEUE\n\t    if (interrupted || wtime_now > 0)\n\t    {\n\t\tparse_queued_messages();\n\t\tcontinue;\n\t    }\n#endif\n\t    return 0;\n\t}\n\n\t/* If input was put directly in typeahead buffer bail out here. */\n\tif (typebuf_changed(tb_change_cnt))\n\t    return 0;\n\n\t/*\n\t * For some terminals we only get one character at a time.\n\t * We want the get all available characters, so we could keep on\n\t * trying until none is available\n\t * For some other terminals this is quite slow, that's why we don't do\n\t * it.\n\t */\n\tlen = read_from_input_buf(buf, (long)maxlen);\n\tif (len > 0)\n\t    return len;\n    }\n}\n\n    static void\nhandle_resize(void)\n{\n    do_resize = FALSE;\n    shell_resized();\n}\n\n/*\n * Return non-zero if a character is available.\n */\n    int\nmch_char_avail(void)\n{\n    return WaitForChar(0L, NULL);\n}\n\n#if defined(HAVE_TOTAL_MEM) || defined(PROTO)\n# ifdef HAVE_SYS_RESOURCE_H\n#  include <sys/resource.h>\n# endif\n# if defined(HAVE_SYS_SYSCTL_H) && defined(HAVE_SYSCTL)\n#  include <sys/sysctl.h>\n# endif\n# if defined(HAVE_SYS_SYSINFO_H) && defined(HAVE_SYSINFO)\n#  include <sys/sysinfo.h>\n# endif\n\n/*\n * Return total amount of memory available in Kbyte.\n * Doesn't change when memory has been allocated.\n */\n    long_u\nmch_total_mem(int special UNUSED)\n{\n    long_u\tmem = 0;\n    long_u\tshiftright = 10;  /* how much to shift \"mem\" right for Kbyte */\n\n# ifdef HAVE_SYSCTL\n    int\t\tmib[2], physmem;\n    size_t\tlen;\n\n    /* BSD way of getting the amount of RAM available. */\n    mib[0] = CTL_HW;\n    mib[1] = HW_USERMEM;\n    len = sizeof(physmem);\n    if (sysctl(mib, 2, &physmem, &len, NULL, 0) == 0)\n\tmem = (long_u)physmem;\n# endif\n\n# if defined(HAVE_SYS_SYSINFO_H) && defined(HAVE_SYSINFO)\n    if (mem == 0)\n    {\n\tstruct sysinfo sinfo;\n\n\t/* Linux way of getting amount of RAM available */\n\tif (sysinfo(&sinfo) == 0)\n\t{\n#  ifdef HAVE_SYSINFO_MEM_UNIT\n\t    /* avoid overflow as much as possible */\n\t    while (shiftright > 0 && (sinfo.mem_unit & 1) == 0)\n\t    {\n\t\tsinfo.mem_unit = sinfo.mem_unit >> 1;\n\t\t--shiftright;\n\t    }\n\t    mem = sinfo.totalram * sinfo.mem_unit;\n#  else\n\t    mem = sinfo.totalram;\n#  endif\n\t}\n    }\n# endif\n\n# ifdef HAVE_SYSCONF\n    if (mem == 0)\n    {\n\tlong\t    pagesize, pagecount;\n\n\t/* Solaris way of getting amount of RAM available */\n\tpagesize = sysconf(_SC_PAGESIZE);\n\tpagecount = sysconf(_SC_PHYS_PAGES);\n\tif (pagesize > 0 && pagecount > 0)\n\t{\n\t    /* avoid overflow as much as possible */\n\t    while (shiftright > 0 && (pagesize & 1) == 0)\n\t    {\n\t\tpagesize = (long_u)pagesize >> 1;\n\t\t--shiftright;\n\t    }\n\t    mem = (long_u)pagesize * pagecount;\n\t}\n    }\n# endif\n\n    /* Return the minimum of the physical memory and the user limit, because\n     * using more than the user limit may cause Vim to be terminated. */\n# if defined(HAVE_SYS_RESOURCE_H) && defined(HAVE_GETRLIMIT)\n    {\n\tstruct rlimit\trlp;\n\n\tif (getrlimit(RLIMIT_DATA, &rlp) == 0\n\t\t&& rlp.rlim_cur < ((rlim_t)1 << (sizeof(long_u) * 8 - 1))\n#  ifdef RLIM_INFINITY\n\t\t&& rlp.rlim_cur != RLIM_INFINITY\n#  endif\n\t\t&& ((long_u)rlp.rlim_cur >> 10) < (mem >> shiftright)\n\t   )\n\t{\n\t    mem = (long_u)rlp.rlim_cur;\n\t    shiftright = 10;\n\t}\n    }\n# endif\n\n    if (mem > 0)\n\treturn mem >> shiftright;\n    return (long_u)0x1fffff;\n}\n#endif\n\n    void\nmch_delay(long msec, int ignoreinput)\n{\n    int\t\told_tmode;\n#ifdef FEAT_MZSCHEME\n    long\ttotal = msec; /* remember original value */\n#endif\n\n    if (ignoreinput)\n    {\n\t/* Go to cooked mode without echo, to allow SIGINT interrupting us\n\t * here.  But we don't want QUIT to kill us (CTRL-\\ used in a\n\t * shell may produce SIGQUIT). */\n\tin_mch_delay = TRUE;\n\told_tmode = curr_tmode;\n\tif (curr_tmode == TMODE_RAW)\n\t    settmode(TMODE_SLEEP);\n\n\t/*\n\t * Everybody sleeps in a different way...\n\t * Prefer nanosleep(), some versions of usleep() can only sleep up to\n\t * one second.\n\t */\n#ifdef FEAT_MZSCHEME\n\tdo\n\t{\n\t    /* if total is large enough, wait by portions in p_mzq */\n\t    if (total > p_mzq)\n\t\tmsec = p_mzq;\n\t    else\n\t\tmsec = total;\n\t    total -= msec;\n#endif\n#ifdef HAVE_NANOSLEEP\n\t{\n\t    struct timespec ts;\n\n\t    ts.tv_sec = msec / 1000;\n\t    ts.tv_nsec = (msec % 1000) * 1000000;\n\t    (void)nanosleep(&ts, NULL);\n\t}\n#else\n# ifdef HAVE_USLEEP\n\twhile (msec >= 1000)\n\t{\n\t    usleep((unsigned int)(999 * 1000));\n\t    msec -= 999;\n\t}\n\tusleep((unsigned int)(msec * 1000));\n# else\n#  ifndef HAVE_SELECT\n\tpoll(NULL, 0, (int)msec);\n#  else\n\t{\n\t    struct timeval tv;\n\n\t    tv.tv_sec = msec / 1000;\n\t    tv.tv_usec = (msec % 1000) * 1000;\n\t    /*\n\t     * NOTE: Solaris 2.6 has a bug that makes select() hang here.  Get\n\t     * a patch from Sun to fix this.  Reported by Gunnar Pedersen.\n\t     */\n\t    select(0, NULL, NULL, NULL, &tv);\n\t}\n#  endif /* HAVE_SELECT */\n# endif /* HAVE_NANOSLEEP */\n#endif /* HAVE_USLEEP */\n#ifdef FEAT_MZSCHEME\n\t}\n\twhile (total > 0);\n#endif\n\n\tsettmode(old_tmode);\n\tin_mch_delay = FALSE;\n    }\n    else\n\tWaitForChar(msec, NULL);\n}\n\n#if defined(HAVE_STACK_LIMIT) \\\n\t|| (!defined(HAVE_SIGALTSTACK) && defined(HAVE_SIGSTACK))\n# define HAVE_CHECK_STACK_GROWTH\n/*\n * Support for checking for an almost-out-of-stack-space situation.\n */\n\n/*\n * Return a pointer to an item on the stack.  Used to find out if the stack\n * grows up or down.\n */\nstatic void check_stack_growth(char *p);\nstatic int stack_grows_downwards;\n\n/*\n * Find out if the stack grows upwards or downwards.\n * \"p\" points to a variable on the stack of the caller.\n */\n    static void\ncheck_stack_growth(char *p)\n{\n    int\t\ti;\n\n    stack_grows_downwards = (p > (char *)&i);\n}\n#endif\n\n#if defined(HAVE_STACK_LIMIT) || defined(PROTO)\nstatic char *stack_limit = NULL;\n\n#if defined(_THREAD_SAFE) && defined(HAVE_PTHREAD_NP_H)\n# include <pthread.h>\n# include <pthread_np.h>\n#endif\n\n/*\n * Find out until how var the stack can grow without getting into trouble.\n * Called when starting up and when switching to the signal stack in\n * deathtrap().\n */\n    static void\nget_stack_limit(void)\n{\n    struct rlimit\trlp;\n    int\t\t\ti;\n    long\t\tlim;\n\n    /* Set the stack limit to 15/16 of the allowable size.  Skip this when the\n     * limit doesn't fit in a long (rlim_cur might be \"long long\"). */\n    if (getrlimit(RLIMIT_STACK, &rlp) == 0\n\t    && rlp.rlim_cur < ((rlim_t)1 << (sizeof(long_u) * 8 - 1))\n#  ifdef RLIM_INFINITY\n\t    && rlp.rlim_cur != RLIM_INFINITY\n#  endif\n       )\n    {\n\tlim = (long)rlp.rlim_cur;\n#if defined(_THREAD_SAFE) && defined(HAVE_PTHREAD_NP_H)\n\t{\n\t    pthread_attr_t  attr;\n\t    size_t\t    size;\n\n\t    /* On FreeBSD the initial thread always has a fixed stack size, no\n\t     * matter what the limits are set to.  Normally it's 1 Mbyte. */\n\t    pthread_attr_init(&attr);\n\t    if (pthread_attr_get_np(pthread_self(), &attr) == 0)\n\t    {\n\t\tpthread_attr_getstacksize(&attr, &size);\n\t\tif (lim > (long)size)\n\t\t    lim = (long)size;\n\t    }\n\t    pthread_attr_destroy(&attr);\n\t}\n#endif\n\tif (stack_grows_downwards)\n\t{\n\t    stack_limit = (char *)((long)&i - (lim / 16L * 15L));\n\t    if (stack_limit >= (char *)&i)\n\t\t/* overflow, set to 1/16 of current stack position */\n\t\tstack_limit = (char *)((long)&i / 16L);\n\t}\n\telse\n\t{\n\t    stack_limit = (char *)((long)&i + (lim / 16L * 15L));\n\t    if (stack_limit <= (char *)&i)\n\t\tstack_limit = NULL;\t/* overflow */\n\t}\n    }\n}\n\n/*\n * Return FAIL when running out of stack space.\n * \"p\" must point to any variable local to the caller that's on the stack.\n */\n    int\nmch_stackcheck(char *p)\n{\n    if (stack_limit != NULL)\n    {\n\tif (stack_grows_downwards)\n\t{\n\t    if (p < stack_limit)\n\t\treturn FAIL;\n\t}\n\telse if (p > stack_limit)\n\t    return FAIL;\n    }\n    return OK;\n}\n#endif\n\n#if defined(HAVE_SIGALTSTACK) || defined(HAVE_SIGSTACK)\n/*\n * Support for using the signal stack.\n * This helps when we run out of stack space, which causes a SIGSEGV.  The\n * signal handler then must run on another stack, since the normal stack is\n * completely full.\n */\n\n#if defined(HAVE_AVAILABILITYMACROS_H)\n# include <AvailabilityMacros.h>\n#endif\n\n#ifndef SIGSTKSZ\n# define SIGSTKSZ 8000    /* just a guess of how much stack is needed... */\n#endif\n\n# ifdef HAVE_SIGALTSTACK\nstatic stack_t sigstk;\t\t\t/* for sigaltstack() */\n# else\nstatic struct sigstack sigstk;\t\t/* for sigstack() */\n# endif\n\nstatic void init_signal_stack(void);\nstatic char *signal_stack;\n\n    static void\ninit_signal_stack(void)\n{\n    if (signal_stack != NULL)\n    {\n# ifdef HAVE_SIGALTSTACK\n#  if defined(__APPLE__) && (!defined(MAC_OS_X_VERSION_MAX_ALLOWED) \\\n\t\t|| MAC_OS_X_VERSION_MAX_ALLOWED <= 1040)\n\t/* missing prototype.  Adding it to osdef?.h.in doesn't work, because\n\t * \"struct sigaltstack\" needs to be declared. */\n\textern int sigaltstack(const struct sigaltstack *ss, struct sigaltstack *oss);\n#  endif\n\n#  ifdef HAVE_SS_BASE\n\tsigstk.ss_base = signal_stack;\n#  else\n\tsigstk.ss_sp = signal_stack;\n#  endif\n\tsigstk.ss_size = SIGSTKSZ;\n\tsigstk.ss_flags = 0;\n\t(void)sigaltstack(&sigstk, NULL);\n# else\n\tsigstk.ss_sp = signal_stack;\n\tif (stack_grows_downwards)\n\t    sigstk.ss_sp += SIGSTKSZ - 1;\n\tsigstk.ss_onstack = 0;\n\t(void)sigstack(&sigstk, NULL);\n# endif\n    }\n}\n#endif\n\n/*\n * We need correct prototypes for a signal function, otherwise mean compilers\n * will barf when the second argument to signal() is ``wrong''.\n * Let me try it with a few tricky defines from my own osdef.h\t(jw).\n */\n#if defined(SIGWINCH)\n    static RETSIGTYPE\nsig_winch SIGDEFARG(sigarg)\n{\n    /* this is not required on all systems, but it doesn't hurt anybody */\n    signal(SIGWINCH, (RETSIGTYPE (*)())sig_winch);\n    do_resize = TRUE;\n    SIGRETURN;\n}\n#endif\n\n#if defined(SIGINT)\n    static RETSIGTYPE\ncatch_sigint SIGDEFARG(sigarg)\n{\n    /* this is not required on all systems, but it doesn't hurt anybody */\n    signal(SIGINT, (RETSIGTYPE (*)())catch_sigint);\n    got_int = TRUE;\n    SIGRETURN;\n}\n#endif\n\n#if defined(SIGPWR)\n    static RETSIGTYPE\ncatch_sigpwr SIGDEFARG(sigarg)\n{\n    /* this is not required on all systems, but it doesn't hurt anybody */\n    signal(SIGPWR, (RETSIGTYPE (*)())catch_sigpwr);\n    /*\n     * I'm not sure we get the SIGPWR signal when the system is really going\n     * down or when the batteries are almost empty.  Just preserve the swap\n     * files and don't exit, that can't do any harm.\n     */\n    ml_sync_all(FALSE, FALSE);\n    SIGRETURN;\n}\n#endif\n\n#ifdef SET_SIG_ALARM\n/*\n * signal function for alarm().\n */\n    static RETSIGTYPE\nsig_alarm SIGDEFARG(sigarg)\n{\n    /* doesn't do anything, just to break a system call */\n    sig_alarm_called = TRUE;\n    SIGRETURN;\n}\n#endif\n\n#if (defined(HAVE_SETJMP_H) \\\n\t&& ((defined(FEAT_X11) && defined(FEAT_XCLIPBOARD)) \\\n\t    || defined(FEAT_LIBCALL))) \\\n    || defined(PROTO)\n/*\n * A simplistic version of setjmp() that only allows one level of using.\n * Don't call twice before calling mch_endjmp()!.\n * Usage:\n *\tmch_startjmp();\n *\tif (SETJMP(lc_jump_env) != 0)\n *\t{\n *\t    mch_didjmp();\n *\t    EMSG(\"crash!\");\n *\t}\n *\telse\n *\t{\n *\t    do_the_work;\n *\t    mch_endjmp();\n *\t}\n * Note: Can't move SETJMP() here, because a function calling setjmp() must\n * not return before the saved environment is used.\n * Returns OK for normal return, FAIL when the protected code caused a\n * problem and LONGJMP() was used.\n */\n    void\nmch_startjmp(void)\n{\n#ifdef SIGHASARG\n    lc_signal = 0;\n#endif\n    lc_active = TRUE;\n}\n\n    void\nmch_endjmp(void)\n{\n    lc_active = FALSE;\n}\n\n    void\nmch_didjmp(void)\n{\n# if defined(HAVE_SIGALTSTACK) || defined(HAVE_SIGSTACK)\n    /* On FreeBSD the signal stack has to be reset after using siglongjmp(),\n     * otherwise catching the signal only works once. */\n    init_signal_stack();\n# endif\n}\n#endif\n\n/*\n * This function handles deadly signals.\n * It tries to preserve any swap files and exit properly.\n * (partly from Elvis).\n * NOTE: Avoid unsafe functions, such as allocating memory, they can result in\n * a deadlock.\n */\n    static RETSIGTYPE\ndeathtrap SIGDEFARG(sigarg)\n{\n    static int\tentered = 0;\t    /* count the number of times we got here.\n\t\t\t\t       Note: when memory has been corrupted\n\t\t\t\t       this may get an arbitrary value! */\n#ifdef SIGHASARG\n    int\t\ti;\n#endif\n\n#if defined(HAVE_SETJMP_H)\n    /*\n     * Catch a crash in protected code.\n     * Restores the environment saved in lc_jump_env, which looks like\n     * SETJMP() returns 1.\n     */\n    if (lc_active)\n    {\n# if defined(SIGHASARG)\n\tlc_signal = sigarg;\n# endif\n\tlc_active = FALSE;\t/* don't jump again */\n\tLONGJMP(lc_jump_env, 1);\n\t/* NOTREACHED */\n    }\n#endif\n\n#ifdef SIGHASARG\n# ifdef SIGQUIT\n    /* While in mch_delay() we go to cooked mode to allow a CTRL-C to\n     * interrupt us.  But in cooked mode we may also get SIGQUIT, e.g., when\n     * pressing CTRL-\\, but we don't want Vim to exit then. */\n    if (in_mch_delay && sigarg == SIGQUIT)\n\tSIGRETURN;\n# endif\n\n    /* When SIGHUP, SIGQUIT, etc. are blocked: postpone the effect and return\n     * here.  This avoids that a non-reentrant function is interrupted, e.g.,\n     * free().  Calling free() again may then cause a crash. */\n    if (entered == 0\n\t    && (0\n# ifdef SIGHUP\n\t\t|| sigarg == SIGHUP\n# endif\n# ifdef SIGQUIT\n\t\t|| sigarg == SIGQUIT\n# endif\n# ifdef SIGTERM\n\t\t|| sigarg == SIGTERM\n# endif\n# ifdef SIGPWR\n\t\t|| sigarg == SIGPWR\n# endif\n# ifdef SIGUSR1\n\t\t|| sigarg == SIGUSR1\n# endif\n# ifdef SIGUSR2\n\t\t|| sigarg == SIGUSR2\n# endif\n\t\t)\n\t    && !vim_handle_signal(sigarg))\n\tSIGRETURN;\n#endif\n\n    /* Remember how often we have been called. */\n    ++entered;\n\n#ifdef FEAT_AUTOCMD\n    /* Executing autocommands is likely to use more stack space than we have\n     * available in the signal stack. */\n    block_autocmds();\n#endif\n\n#ifdef FEAT_EVAL\n    /* Set the v:dying variable. */\n    set_vim_var_nr(VV_DYING, (long)entered);\n#endif\n\n#ifdef HAVE_STACK_LIMIT\n    /* Since we are now using the signal stack, need to reset the stack\n     * limit.  Otherwise using a regexp will fail. */\n    get_stack_limit();\n#endif\n\n#if 0\n    /* This is for opening gdb the moment Vim crashes.\n     * You need to manually adjust the file name and Vim executable name.\n     * Suggested by SungHyun Nam. */\n    {\n# define VI_GDB_FILE \"/tmp/vimgdb\"\n# define VIM_NAME \"/usr/bin/vim\"\n\tFILE *fp = fopen(VI_GDB_FILE, \"w\");\n\tif (fp)\n\t{\n\t    fprintf(fp,\n\t\t    \"file %s\\n\"\n\t\t    \"attach %d\\n\"\n\t\t    \"set height 1000\\n\"\n\t\t    \"bt full\\n\"\n\t\t    , VIM_NAME, getpid());\n\t    fclose(fp);\n\t    system(\"xterm -e gdb -x \"VI_GDB_FILE);\n\t    unlink(VI_GDB_FILE);\n\t}\n    }\n#endif\n\n#ifdef SIGHASARG\n    /* try to find the name of this signal */\n    for (i = 0; signal_info[i].sig != -1; i++)\n\tif (sigarg == signal_info[i].sig)\n\t    break;\n    deadly_signal = sigarg;\n#endif\n\n    full_screen = FALSE;\t/* don't write message to the GUI, it might be\n\t\t\t\t * part of the problem... */\n    /*\n     * If something goes wrong after entering here, we may get here again.\n     * When this happens, give a message and try to exit nicely (resetting the\n     * terminal mode, etc.)\n     * When this happens twice, just exit, don't even try to give a message,\n     * stack may be corrupt or something weird.\n     * When this still happens again (or memory was corrupted in such a way\n     * that \"entered\" was clobbered) use _exit(), don't try freeing resources.\n     */\n    if (entered >= 3)\n    {\n\treset_signals();\t/* don't catch any signals anymore */\n\tmay_core_dump();\n\tif (entered >= 4)\n\t    _exit(8);\n\texit(7);\n    }\n    if (entered == 2)\n    {\n\t/* No translation, it may call malloc(). */\n\tOUT_STR(\"Vim: Double signal, exiting\\n\");\n\tout_flush();\n\tgetout(1);\n    }\n\n    /* No translation, it may call malloc(). */\n#ifdef SIGHASARG\n    sprintf((char *)IObuff, \"Vim: Caught deadly signal %s\\n\",\n\t\t\t\t\t\t\t signal_info[i].name);\n#else\n    sprintf((char *)IObuff, \"Vim: Caught deadly signal\\n\");\n#endif\n\n    /* Preserve files and exit.  This sets the really_exiting flag to prevent\n     * calling free(). */\n    preserve_exit();\n\n    /* NOTREACHED */\n\n#ifdef NBDEBUG\n    reset_signals();\n    may_core_dump();\n    abort();\n#endif\n\n    SIGRETURN;\n}\n\n#if defined(_REENTRANT) && defined(SIGCONT)\n/*\n * On Solaris with multi-threading, suspending might not work immediately.\n * Catch the SIGCONT signal, which will be used as an indication whether the\n * suspending has been done or not.\n *\n * On Linux, signal is not always handled immediately either.\n * See https://bugs.launchpad.net/bugs/291373\n *\n * volatile because it is used in signal handler sigcont_handler().\n */\nstatic volatile int sigcont_received;\nstatic RETSIGTYPE sigcont_handler SIGPROTOARG;\n\n/*\n * signal handler for SIGCONT\n */\n    static RETSIGTYPE\nsigcont_handler SIGDEFARG(sigarg)\n{\n    sigcont_received = TRUE;\n    SIGRETURN;\n}\n#endif\n\n# if defined(FEAT_CLIPBOARD) && defined(FEAT_X11)\nstatic void loose_clipboard(void);\n# ifdef USE_SYSTEM\nstatic void save_clipboard(void);\nstatic void restore_clipboard(void);\n\nstatic void *clip_star_save = NULL;\nstatic void *clip_plus_save = NULL;\n# endif\n\n/*\n * Called when Vim is going to sleep or execute a shell command.\n * We can't respond to requests for the X selections.  Lose them, otherwise\n * other applications will hang.  But first copy the text to cut buffer 0.\n */\n    static void\nloose_clipboard(void)\n{\n    if (clip_star.owned || clip_plus.owned)\n    {\n\tx11_export_final_selection();\n\tif (clip_star.owned)\n\t    clip_lose_selection(&clip_star);\n\tif (clip_plus.owned)\n\t    clip_lose_selection(&clip_plus);\n\tif (x11_display != NULL)\n\t    XFlush(x11_display);\n    }\n}\n\n# ifdef USE_SYSTEM\n/*\n * Save clipboard text to restore later.\n */\n    static void\nsave_clipboard(void)\n{\n    if (clip_star.owned)\n\tclip_star_save = get_register('*', TRUE);\n    if (clip_plus.owned)\n\tclip_plus_save = get_register('+', TRUE);\n}\n\n/*\n * Restore clipboard text if no one own the X selection.\n */\n    static void\nrestore_clipboard(void)\n{\n    if (clip_star_save != NULL)\n    {\n\tif (!clip_gen_owner_exists(&clip_star))\n\t    put_register('*', clip_star_save);\n\telse\n\t    free_register(clip_star_save);\n\tclip_star_save = NULL;\n    }\n    if (clip_plus_save != NULL)\n    {\n\tif (!clip_gen_owner_exists(&clip_plus))\n\t    put_register('+', clip_plus_save);\n\telse\n\t    free_register(clip_plus_save);\n\tclip_plus_save = NULL;\n    }\n}\n# endif\n#endif\n\n/*\n * If the machine has job control, use it to suspend the program,\n * otherwise fake it by starting a new shell.\n */\n    void\nmch_suspend(void)\n{\n    /* BeOS does have SIGTSTP, but it doesn't work. */\n#if defined(SIGTSTP) && !defined(__BEOS__)\n    out_flush();\t    /* needed to make cursor visible on some systems */\n    settmode(TMODE_COOK);\n    out_flush();\t    /* needed to disable mouse on some systems */\n\n# if defined(FEAT_CLIPBOARD) && defined(FEAT_X11)\n    loose_clipboard();\n# endif\n\n# if defined(_REENTRANT) && defined(SIGCONT)\n    sigcont_received = FALSE;\n# endif\n    kill(0, SIGTSTP);\t    /* send ourselves a STOP signal */\n# if defined(_REENTRANT) && defined(SIGCONT)\n    /*\n     * Wait for the SIGCONT signal to be handled. It generally happens\n     * immediately, but somehow not all the time. Do not call pause()\n     * because there would be race condition which would hang Vim if\n     * signal happened in between the test of sigcont_received and the\n     * call to pause(). If signal is not yet received, call sleep(0)\n     * to just yield CPU. Signal should then be received. If somehow\n     * it's still not received, sleep 1, 2, 3 ms. Don't bother waiting\n     * further if signal is not received after 1+2+3+4 ms (not expected\n     * to happen).\n     */\n    {\n\tlong wait_time;\n\tfor (wait_time = 0; !sigcont_received && wait_time <= 3L; wait_time++)\n\t    /* Loop is not entered most of the time */\n\t    mch_delay(wait_time, FALSE);\n    }\n# endif\n\n# ifdef FEAT_TITLE\n    /*\n     * Set oldtitle to NULL, so the current title is obtained again.\n     */\n    vim_free(oldtitle);\n    oldtitle = NULL;\n# endif\n    settmode(TMODE_RAW);\n    need_check_timestamps = TRUE;\n    did_check_timestamps = FALSE;\n#else\n    suspend_shell();\n#endif\n}\n\n    void\nmch_init(void)\n{\n    Columns = 80;\n    Rows = 24;\n\n    out_flush();\n    set_signals();\n\n#ifdef MACOS_CONVERT\n    mac_conv_init();\n#endif\n#ifdef FEAT_CYGWIN_WIN32_CLIPBOARD\n    win_clip_init();\n#endif\n}\n\n    static void\nset_signals(void)\n{\n#if defined(SIGWINCH)\n    /*\n     * WINDOW CHANGE signal is handled with sig_winch().\n     */\n    signal(SIGWINCH, (RETSIGTYPE (*)())sig_winch);\n#endif\n\n    /*\n     * We want the STOP signal to work, to make mch_suspend() work.\n     * For \"rvim\" the STOP signal is ignored.\n     */\n#ifdef SIGTSTP\n    signal(SIGTSTP, restricted ? SIG_IGN : SIG_DFL);\n#endif\n#if defined(_REENTRANT) && defined(SIGCONT)\n    signal(SIGCONT, sigcont_handler);\n#endif\n\n    /*\n     * We want to ignore breaking of PIPEs.\n     */\n#ifdef SIGPIPE\n    signal(SIGPIPE, SIG_IGN);\n#endif\n\n#ifdef SIGINT\n    catch_int_signal();\n#endif\n\n    /*\n     * Ignore alarm signals (Perl's alarm() generates it).\n     */\n#ifdef SIGALRM\n    signal(SIGALRM, SIG_IGN);\n#endif\n\n    /*\n     * Catch SIGPWR (power failure?) to preserve the swap files, so that no\n     * work will be lost.\n     */\n#ifdef SIGPWR\n    signal(SIGPWR, (RETSIGTYPE (*)())catch_sigpwr);\n#endif\n\n    /*\n     * Arrange for other signals to gracefully shutdown Vim.\n     */\n    catch_signals(deathtrap, SIG_ERR);\n\n#if defined(FEAT_GUI) && defined(SIGHUP)\n    /*\n     * When the GUI is running, ignore the hangup signal.\n     */\n    if (gui.in_use)\n\tsignal(SIGHUP, SIG_IGN);\n#endif\n}\n\n#if defined(SIGINT) || defined(PROTO)\n/*\n * Catch CTRL-C (only works while in Cooked mode).\n */\n    static void\ncatch_int_signal(void)\n{\n    signal(SIGINT, (RETSIGTYPE (*)())catch_sigint);\n}\n#endif\n\n    void\nreset_signals(void)\n{\n    catch_signals(SIG_DFL, SIG_DFL);\n#if defined(_REENTRANT) && defined(SIGCONT)\n    /* SIGCONT isn't in the list, because its default action is ignore */\n    signal(SIGCONT, SIG_DFL);\n#endif\n}\n\n    static void\ncatch_signals(\n    RETSIGTYPE (*func_deadly)(),\n    RETSIGTYPE (*func_other)())\n{\n    int\t    i;\n\n    for (i = 0; signal_info[i].sig != -1; i++)\n\tif (signal_info[i].deadly)\n\t{\n#if defined(HAVE_SIGALTSTACK) && defined(HAVE_SIGACTION)\n\t    struct sigaction sa;\n\n\t    /* Setup to use the alternate stack for the signal function. */\n\t    sa.sa_handler = func_deadly;\n\t    sigemptyset(&sa.sa_mask);\n# if defined(__linux__) && defined(_REENTRANT)\n\t    /* On Linux, with glibc compiled for kernel 2.2, there is a bug in\n\t     * thread handling in combination with using the alternate stack:\n\t     * pthread library functions try to use the stack pointer to\n\t     * identify the current thread, causing a SEGV signal, which\n\t     * recursively calls deathtrap() and hangs. */\n\t    sa.sa_flags = 0;\n# else\n\t    sa.sa_flags = SA_ONSTACK;\n# endif\n\t    sigaction(signal_info[i].sig, &sa, NULL);\n#else\n# if defined(HAVE_SIGALTSTACK) && defined(HAVE_SIGVEC)\n\t    struct sigvec sv;\n\n\t    /* Setup to use the alternate stack for the signal function. */\n\t    sv.sv_handler = func_deadly;\n\t    sv.sv_mask = 0;\n\t    sv.sv_flags = SV_ONSTACK;\n\t    sigvec(signal_info[i].sig, &sv, NULL);\n# else\n\t    signal(signal_info[i].sig, func_deadly);\n# endif\n#endif\n\t}\n\telse if (func_other != SIG_ERR)\n\t    signal(signal_info[i].sig, func_other);\n}\n\n/*\n * Handling of SIGHUP, SIGQUIT and SIGTERM:\n * \"when\" == a signal:       when busy, postpone and return FALSE, otherwise\n *\t\t\t     return TRUE\n * \"when\" == SIGNAL_BLOCK:   Going to be busy, block signals\n * \"when\" == SIGNAL_UNBLOCK: Going to wait, unblock signals, use postponed\n *\t\t\t     signal\n * Returns TRUE when Vim should exit.\n */\n    int\nvim_handle_signal(int sig)\n{\n    static int got_signal = 0;\n    static int blocked = TRUE;\n\n    switch (sig)\n    {\n\tcase SIGNAL_BLOCK:   blocked = TRUE;\n\t\t\t     break;\n\n\tcase SIGNAL_UNBLOCK: blocked = FALSE;\n\t\t\t     if (got_signal != 0)\n\t\t\t     {\n\t\t\t\t kill(getpid(), got_signal);\n\t\t\t\t got_signal = 0;\n\t\t\t     }\n\t\t\t     break;\n\n\tdefault:\t     if (!blocked)\n\t\t\t\t return TRUE;\t/* exit! */\n\t\t\t     got_signal = sig;\n#ifdef SIGPWR\n\t\t\t     if (sig != SIGPWR)\n#endif\n\t\t\t\t got_int = TRUE;    /* break any loops */\n\t\t\t     break;\n    }\n    return FALSE;\n}\n\n/*\n * Check_win checks whether we have an interactive stdout.\n */\n    int\nmch_check_win(int argc UNUSED, char **argv UNUSED)\n{\n    if (isatty(1))\n\treturn OK;\n    return FAIL;\n}\n\n/*\n * Return TRUE if the input comes from a terminal, FALSE otherwise.\n */\n    int\nmch_input_isatty(void)\n{\n    if (isatty(read_cmd_fd))\n\treturn TRUE;\n    return FALSE;\n}\n\n#ifdef FEAT_X11\n\n# if defined(HAVE_GETTIMEOFDAY) && defined(HAVE_SYS_TIME_H) \\\n\t&& (defined(FEAT_XCLIPBOARD) || defined(FEAT_TITLE))\n\nstatic void xopen_message(struct timeval *start_tv);\n\n/*\n * Give a message about the elapsed time for opening the X window.\n */\n    static void\nxopen_message(struct timeval *start_tv)\n{\n    smsg((char_u *)_(\"Opening the X display took %ld msec\"), elapsed(start_tv));\n}\n# endif\n#endif\n\n#if defined(FEAT_X11) && (defined(FEAT_TITLE) || defined(FEAT_XCLIPBOARD))\n/*\n * A few functions shared by X11 title and clipboard code.\n */\nstatic int x_error_handler(Display *dpy, XErrorEvent *error_event);\nstatic int x_error_check(Display *dpy, XErrorEvent *error_event);\nstatic int x_connect_to_server(void);\nstatic int test_x11_window(Display *dpy);\n\nstatic int\tgot_x_error = FALSE;\n\n/*\n * X Error handler, otherwise X just exits!  (very rude) -- webb\n */\n    static int\nx_error_handler(Display *dpy, XErrorEvent *error_event)\n{\n    XGetErrorText(dpy, error_event->error_code, (char *)IObuff, IOSIZE);\n    STRCAT(IObuff, _(\"\\nVim: Got X error\\n\"));\n\n    /* We cannot print a message and continue, because no X calls are allowed\n     * here (causes my system to hang).  Silently continuing might be an\n     * alternative... */\n    preserve_exit();\t\t    /* preserve files and exit */\n\n    return 0;\t\t/* NOTREACHED */\n}\n\n/*\n * Another X Error handler, just used to check for errors.\n */\n    static int\nx_error_check(Display *dpy UNUSED, XErrorEvent *error_event UNUSED)\n{\n    got_x_error = TRUE;\n    return 0;\n}\n\n#if defined(FEAT_X11) && defined(FEAT_XCLIPBOARD)\n# if defined(HAVE_SETJMP_H)\n/*\n * An X IO Error handler, used to catch error while opening the display.\n */\nstatic int x_IOerror_check(Display *dpy);\n\n    static int\nx_IOerror_check(Display *dpy UNUSED)\n{\n    /* This function should not return, it causes exit().  Longjump instead. */\n    LONGJMP(lc_jump_env, 1);\n#  if defined(VMS) || defined(__CYGWIN__) || defined(__CYGWIN32__)\n    return 0;  /* avoid the compiler complains about missing return value */\n#  endif\n}\n# endif\n\n/*\n * An X IO Error handler, used to catch terminal errors.\n */\nstatic int x_IOerror_handler(Display *dpy);\nstatic void may_restore_clipboard(void);\nstatic int xterm_dpy_was_reset = FALSE;\n\n    static int\nx_IOerror_handler(Display *dpy UNUSED)\n{\n    xterm_dpy = NULL;\n    xterm_dpy_was_reset = TRUE;\n    x11_window = 0;\n    x11_display = NULL;\n    xterm_Shell = (Widget)0;\n\n    /* This function should not return, it causes exit().  Longjump instead. */\n    LONGJMP(x_jump_env, 1);\n# if defined(VMS) || defined(__CYGWIN__) || defined(__CYGWIN32__)\n    return 0;  /* avoid the compiler complains about missing return value */\n# endif\n}\n\n/*\n * If the X11 connection was lost try to restore it.\n * Helps when the X11 server was stopped and restarted while Vim was inactive\n * (e.g. through tmux).\n */\n    static void\nmay_restore_clipboard(void)\n{\n    if (xterm_dpy_was_reset)\n    {\n\txterm_dpy_was_reset = FALSE;\n\n# ifndef LESSTIF_VERSION\n\t/* This has been reported to avoid Vim getting stuck. */\n\tif (app_context != (XtAppContext)NULL)\n\t{\n\t    XtDestroyApplicationContext(app_context);\n\t    app_context = (XtAppContext)NULL;\n\t    x11_display = NULL; /* freed by XtDestroyApplicationContext() */\n\t}\n# endif\n\n\tsetup_term_clip();\n\tget_x11_title(FALSE);\n    }\n}\n#endif\n\n/*\n * Return TRUE when connection to the X server is desired.\n */\n    static int\nx_connect_to_server(void)\n{\n#if defined(FEAT_CLIENTSERVER)\n    if (x_force_connect)\n\treturn TRUE;\n#endif\n    if (x_no_connect)\n\treturn FALSE;\n\n    /* Check for a match with \"exclude:\" from 'clipboard'. */\n    if (clip_exclude_prog != NULL)\n    {\n\tif (vim_regexec_prog(&clip_exclude_prog, FALSE, T_NAME, (colnr_T)0))\n\t    return FALSE;\n    }\n    return TRUE;\n}\n\n/*\n * Test if \"dpy\" and x11_window are valid by getting the window title.\n * I don't actually want it yet, so there may be a simpler call to use, but\n * this will cause the error handler x_error_check() to be called if anything\n * is wrong, such as the window pointer being invalid (as can happen when the\n * user changes his DISPLAY, but not his WINDOWID) -- webb\n */\n    static int\ntest_x11_window(Display *dpy)\n{\n    int\t\t\t(*old_handler)();\n    XTextProperty\ttext_prop;\n\n    old_handler = XSetErrorHandler(x_error_check);\n    got_x_error = FALSE;\n    if (XGetWMName(dpy, x11_window, &text_prop))\n\tXFree((void *)text_prop.value);\n    XSync(dpy, False);\n    (void)XSetErrorHandler(old_handler);\n\n    if (p_verbose > 0 && got_x_error)\n\tverb_msg((char_u *)_(\"Testing the X display failed\"));\n\n    return (got_x_error ? FAIL : OK);\n}\n#endif\n\n#ifdef FEAT_TITLE\n\n#ifdef FEAT_X11\n\nstatic int get_x11_thing(int get_title, int test_only);\n\n/*\n * try to get x11 window and display\n *\n * return FAIL for failure, OK otherwise\n */\n    static int\nget_x11_windis(void)\n{\n    char\t    *winid;\n    static int\t    result = -1;\n#define XD_NONE\t 0\t/* x11_display not set here */\n#define XD_HERE\t 1\t/* x11_display opened here */\n#define XD_GUI\t 2\t/* x11_display used from gui.dpy */\n#define XD_XTERM 3\t/* x11_display used from xterm_dpy */\n    static int\t    x11_display_from = XD_NONE;\n    static int\t    did_set_error_handler = FALSE;\n\n    if (!did_set_error_handler)\n    {\n\t/* X just exits if it finds an error otherwise! */\n\t(void)XSetErrorHandler(x_error_handler);\n\tdid_set_error_handler = TRUE;\n    }\n\n#if defined(FEAT_GUI_X11) || defined(FEAT_GUI_GTK)\n    if (gui.in_use)\n    {\n\t/*\n\t * If the X11 display was opened here before, for the window where Vim\n\t * was started, close that one now to avoid a memory leak.\n\t */\n\tif (x11_display_from == XD_HERE && x11_display != NULL)\n\t{\n\t    XCloseDisplay(x11_display);\n\t    x11_display_from = XD_NONE;\n\t}\n\tif (gui_get_x11_windis(&x11_window, &x11_display) == OK)\n\t{\n\t    x11_display_from = XD_GUI;\n\t    return OK;\n\t}\n\tx11_display = NULL;\n\treturn FAIL;\n    }\n    else if (x11_display_from == XD_GUI)\n    {\n\t/* GUI must have stopped somehow, clear x11_display */\n\tx11_window = 0;\n\tx11_display = NULL;\n\tx11_display_from = XD_NONE;\n    }\n#endif\n\n    /* When started with the \"-X\" argument, don't try connecting. */\n    if (!x_connect_to_server())\n\treturn FAIL;\n\n    /*\n     * If WINDOWID not set, should try another method to find out\n     * what the current window number is. The only code I know for\n     * this is very complicated.\n     * We assume that zero is invalid for WINDOWID.\n     */\n    if (x11_window == 0 && (winid = getenv(\"WINDOWID\")) != NULL)\n\tx11_window = (Window)atol(winid);\n\n#ifdef FEAT_XCLIPBOARD\n    if (xterm_dpy != NULL && x11_window != 0)\n    {\n\t/* We may have checked it already, but Gnome terminal can move us to\n\t * another window, so we need to check every time. */\n\tif (x11_display_from != XD_XTERM)\n\t{\n\t    /*\n\t     * If the X11 display was opened here before, for the window where\n\t     * Vim was started, close that one now to avoid a memory leak.\n\t     */\n\t    if (x11_display_from == XD_HERE && x11_display != NULL)\n\t\tXCloseDisplay(x11_display);\n\t    x11_display = xterm_dpy;\n\t    x11_display_from = XD_XTERM;\n\t}\n\tif (test_x11_window(x11_display) == FAIL)\n\t{\n\t    /* probably bad $WINDOWID */\n\t    x11_window = 0;\n\t    x11_display = NULL;\n\t    x11_display_from = XD_NONE;\n\t    return FAIL;\n\t}\n\treturn OK;\n    }\n#endif\n\n    if (x11_window == 0 || x11_display == NULL)\n\tresult = -1;\n\n    if (result != -1)\t    /* Have already been here and set this */\n\treturn result;\t    /* Don't do all these X calls again */\n\n    if (x11_window != 0 && x11_display == NULL)\n    {\n#ifdef SET_SIG_ALARM\n\tRETSIGTYPE (*sig_save)();\n#endif\n#if defined(HAVE_GETTIMEOFDAY) && defined(HAVE_SYS_TIME_H)\n\tstruct timeval  start_tv;\n\n\tif (p_verbose > 0)\n\t    gettimeofday(&start_tv, NULL);\n#endif\n\n#ifdef SET_SIG_ALARM\n\t/*\n\t * Opening the Display may hang if the DISPLAY setting is wrong, or\n\t * the network connection is bad.  Set an alarm timer to get out.\n\t */\n\tsig_alarm_called = FALSE;\n\tsig_save = (RETSIGTYPE (*)())signal(SIGALRM,\n\t\t\t\t\t\t (RETSIGTYPE (*)())sig_alarm);\n\talarm(2);\n#endif\n\tx11_display = XOpenDisplay(NULL);\n\n#ifdef SET_SIG_ALARM\n\talarm(0);\n\tsignal(SIGALRM, (RETSIGTYPE (*)())sig_save);\n\tif (p_verbose > 0 && sig_alarm_called)\n\t    verb_msg((char_u *)_(\"Opening the X display timed out\"));\n#endif\n\tif (x11_display != NULL)\n\t{\n# if defined(HAVE_GETTIMEOFDAY) && defined(HAVE_SYS_TIME_H)\n\t    if (p_verbose > 0)\n\t    {\n\t\tverbose_enter();\n\t\txopen_message(&start_tv);\n\t\tverbose_leave();\n\t    }\n# endif\n\t    if (test_x11_window(x11_display) == FAIL)\n\t    {\n\t\t/* Maybe window id is bad */\n\t\tx11_window = 0;\n\t\tXCloseDisplay(x11_display);\n\t\tx11_display = NULL;\n\t    }\n\t    else\n\t\tx11_display_from = XD_HERE;\n\t}\n    }\n    if (x11_window == 0 || x11_display == NULL)\n\treturn (result = FAIL);\n\n# ifdef FEAT_EVAL\n    set_vim_var_nr(VV_WINDOWID, (long)x11_window);\n# endif\n\n    return (result = OK);\n}\n\n/*\n * Determine original x11 Window Title\n */\n    static int\nget_x11_title(int test_only)\n{\n    return get_x11_thing(TRUE, test_only);\n}\n\n/*\n * Determine original x11 Window icon\n */\n    static int\nget_x11_icon(int test_only)\n{\n    int\t\tretval = FALSE;\n\n    retval = get_x11_thing(FALSE, test_only);\n\n    /* could not get old icon, use terminal name */\n    if (oldicon == NULL && !test_only)\n    {\n\tif (STRNCMP(T_NAME, \"builtin_\", 8) == 0)\n\t    oldicon = vim_strsave(T_NAME + 8);\n\telse\n\t    oldicon = vim_strsave(T_NAME);\n    }\n\n    return retval;\n}\n\n    static int\nget_x11_thing(\n    int\t\tget_title,\t/* get title string */\n    int\t\ttest_only)\n{\n    XTextProperty\ttext_prop;\n    int\t\t\tretval = FALSE;\n    Status\t\tstatus;\n\n    if (get_x11_windis() == OK)\n    {\n\t/* Get window/icon name if any */\n\tif (get_title)\n\t    status = XGetWMName(x11_display, x11_window, &text_prop);\n\telse\n\t    status = XGetWMIconName(x11_display, x11_window, &text_prop);\n\n\t/*\n\t * If terminal is xterm, then x11_window may be a child window of the\n\t * outer xterm window that actually contains the window/icon name, so\n\t * keep traversing up the tree until a window with a title/icon is\n\t * found.\n\t */\n\t/* Previously this was only done for xterm and alikes.  I don't see a\n\t * reason why it would fail for other terminal emulators.\n\t * if (term_is_xterm) */\n\t{\n\t    Window\t    root;\n\t    Window\t    parent;\n\t    Window\t    win = x11_window;\n\t    Window\t   *children;\n\t    unsigned int    num_children;\n\n\t    while (!status || text_prop.value == NULL)\n\t    {\n\t\tif (!XQueryTree(x11_display, win, &root, &parent, &children,\n\t\t\t\t\t\t\t       &num_children))\n\t\t    break;\n\t\tif (children)\n\t\t    XFree((void *)children);\n\t\tif (parent == root || parent == 0)\n\t\t    break;\n\n\t\twin = parent;\n\t\tif (get_title)\n\t\t    status = XGetWMName(x11_display, win, &text_prop);\n\t\telse\n\t\t    status = XGetWMIconName(x11_display, win, &text_prop);\n\t    }\n\t}\n\tif (status && text_prop.value != NULL)\n\t{\n\t    retval = TRUE;\n\t    if (!test_only)\n\t    {\n#if defined(FEAT_XFONTSET) || defined(FEAT_MBYTE)\n\t\tif (text_prop.encoding == XA_STRING\n# ifdef FEAT_MBYTE\n\t\t\t&& !has_mbyte\n# endif\n\t\t\t)\n\t\t{\n#endif\n\t\t    if (get_title)\n\t\t\toldtitle = vim_strsave((char_u *)text_prop.value);\n\t\t    else\n\t\t\toldicon = vim_strsave((char_u *)text_prop.value);\n#if defined(FEAT_XFONTSET) || defined(FEAT_MBYTE)\n\t\t}\n\t\telse\n\t\t{\n\t\t    char    **cl;\n\t\t    Status  transform_status;\n\t\t    int\t    n = 0;\n\n\t\t    transform_status = XmbTextPropertyToTextList(x11_display,\n\t\t\t\t\t\t\t\t &text_prop,\n\t\t\t\t\t\t\t\t &cl, &n);\n\t\t    if (transform_status >= Success && n > 0 && cl[0])\n\t\t    {\n\t\t\tif (get_title)\n\t\t\t    oldtitle = vim_strsave((char_u *) cl[0]);\n\t\t\telse\n\t\t\t    oldicon = vim_strsave((char_u *) cl[0]);\n\t\t\tXFreeStringList(cl);\n\t\t    }\n\t\t    else\n\t\t    {\n\t\t\tif (get_title)\n\t\t\t    oldtitle = vim_strsave((char_u *)text_prop.value);\n\t\t\telse\n\t\t\t    oldicon = vim_strsave((char_u *)text_prop.value);\n\t\t    }\n\t\t}\n#endif\n\t    }\n\t    XFree((void *)text_prop.value);\n\t}\n    }\n    return retval;\n}\n\n/* Xutf8 functions are not avaialble on older systems. Note that on some\n * systems X_HAVE_UTF8_STRING may be defined in a header file but\n * Xutf8SetWMProperties() is not in the X11 library.  Configure checks for\n * that and defines HAVE_XUTF8SETWMPROPERTIES. */\n#if defined(X_HAVE_UTF8_STRING) && defined(FEAT_MBYTE)\n# if X_HAVE_UTF8_STRING && HAVE_XUTF8SETWMPROPERTIES\n#  define USE_UTF8_STRING\n# endif\n#endif\n\n/*\n * Set x11 Window Title\n *\n * get_x11_windis() must be called before this and have returned OK\n */\n    static void\nset_x11_title(char_u *title)\n{\n\t/* XmbSetWMProperties() and Xutf8SetWMProperties() should use a STRING\n\t * when possible, COMPOUND_TEXT otherwise.  COMPOUND_TEXT isn't\n\t * supported everywhere and STRING doesn't work for multi-byte titles.\n\t */\n#ifdef USE_UTF8_STRING\n    if (enc_utf8)\n\tXutf8SetWMProperties(x11_display, x11_window, (const char *)title,\n\t\t\t\t\t     NULL, NULL, 0, NULL, NULL, NULL);\n    else\n#endif\n    {\n#if XtSpecificationRelease >= 4\n# ifdef FEAT_XFONTSET\n\tXmbSetWMProperties(x11_display, x11_window, (const char *)title,\n\t\t\t\t\t     NULL, NULL, 0, NULL, NULL, NULL);\n# else\n\tXTextProperty\ttext_prop;\n\tchar\t\t*c_title = (char *)title;\n\n\t/* directly from example 3-18 \"basicwin\" of Xlib Programming Manual */\n\t(void)XStringListToTextProperty(&c_title, 1, &text_prop);\n\tXSetWMProperties(x11_display, x11_window, &text_prop,\n\t\t\t\t\t     NULL, NULL, 0, NULL, NULL, NULL);\n# endif\n#else\n\tXStoreName(x11_display, x11_window, (char *)title);\n#endif\n    }\n    XFlush(x11_display);\n}\n\n/*\n * Set x11 Window icon\n *\n * get_x11_windis() must be called before this and have returned OK\n */\n    static void\nset_x11_icon(char_u *icon)\n{\n    /* See above for comments about using X*SetWMProperties(). */\n#ifdef USE_UTF8_STRING\n    if (enc_utf8)\n\tXutf8SetWMProperties(x11_display, x11_window, NULL, (const char *)icon,\n\t\t\t\t\t\t   NULL, 0, NULL, NULL, NULL);\n    else\n#endif\n    {\n#if XtSpecificationRelease >= 4\n# ifdef FEAT_XFONTSET\n\tXmbSetWMProperties(x11_display, x11_window, NULL, (const char *)icon,\n\t\t\t\t\t\t   NULL, 0, NULL, NULL, NULL);\n# else\n\tXTextProperty\ttext_prop;\n\tchar\t\t*c_icon = (char *)icon;\n\n\t(void)XStringListToTextProperty(&c_icon, 1, &text_prop);\n\tXSetWMProperties(x11_display, x11_window, NULL, &text_prop,\n\t\t\t\t\t\t   NULL, 0, NULL, NULL, NULL);\n# endif\n#else\n\tXSetIconName(x11_display, x11_window, (char *)icon);\n#endif\n    }\n    XFlush(x11_display);\n}\n\n#else  /* FEAT_X11 */\n\n    static int\nget_x11_title(int test_only UNUSED)\n{\n    return FALSE;\n}\n\n    static int\nget_x11_icon(int test_only)\n{\n    if (!test_only)\n    {\n\tif (STRNCMP(T_NAME, \"builtin_\", 8) == 0)\n\t    oldicon = vim_strsave(T_NAME + 8);\n\telse\n\t    oldicon = vim_strsave(T_NAME);\n    }\n    return FALSE;\n}\n\n#endif /* FEAT_X11 */\n\n    int\nmch_can_restore_title(void)\n{\n    return get_x11_title(TRUE);\n}\n\n    int\nmch_can_restore_icon(void)\n{\n    return get_x11_icon(TRUE);\n}\n\n/*\n * Set the window title and icon.\n */\n    void\nmch_settitle(char_u *title, char_u *icon)\n{\n    int\t\ttype = 0;\n    static int\trecursive = 0;\n\n    if (T_NAME == NULL)\t    /* no terminal name (yet) */\n\treturn;\n    if (title == NULL && icon == NULL)\t    /* nothing to do */\n\treturn;\n\n    /* When one of the X11 functions causes a deadly signal, we get here again\n     * recursively.  Avoid hanging then (something is probably locked). */\n    if (recursive)\n\treturn;\n    ++recursive;\n\n    /*\n     * if the window ID and the display is known, we may use X11 calls\n     */\n#ifdef FEAT_X11\n    if (get_x11_windis() == OK)\n\ttype = 1;\n#else\n# if defined(FEAT_GUI_PHOTON) || defined(FEAT_GUI_MAC) || defined(FEAT_GUI_GTK)\n    if (gui.in_use)\n\ttype = 1;\n# endif\n#endif\n\n    /*\n     * Note: if \"t_ts\" is set, title is set with escape sequence rather\n     *\t     than x11 calls, because the x11 calls don't always work\n     */\n    if ((type || *T_TS != NUL) && title != NULL)\n    {\n\tif (oldtitle == NULL\n#ifdef FEAT_GUI\n\t\t&& !gui.in_use\n#endif\n\t\t)\t\t/* first call but not in GUI, save title */\n\t    (void)get_x11_title(FALSE);\n\n\tif (*T_TS != NUL)\t\t/* it's OK if t_fs is empty */\n\t    term_settitle(title);\n#ifdef FEAT_X11\n\telse\n# ifdef FEAT_GUI_GTK\n\tif (!gui.in_use)\t\t/* don't do this if GTK+ is running */\n# endif\n\t    set_x11_title(title);\t\t/* x11 */\n#endif\n#if defined(FEAT_GUI_GTK) \\\n\t|| defined(FEAT_GUI_PHOTON) || defined(FEAT_GUI_MAC)\n\telse\n\t    gui_mch_settitle(title, icon);\n#endif\n\tdid_set_title = TRUE;\n    }\n\n    if ((type || *T_CIS != NUL) && icon != NULL)\n    {\n\tif (oldicon == NULL\n#ifdef FEAT_GUI\n\t\t&& !gui.in_use\n#endif\n\t\t)\t\t/* first call, save icon */\n\t    get_x11_icon(FALSE);\n\n\tif (*T_CIS != NUL)\n\t{\n\t    out_str(T_CIS);\t\t\t/* set icon start */\n\t    out_str_nf(icon);\n\t    out_str(T_CIE);\t\t\t/* set icon end */\n\t    out_flush();\n\t}\n#ifdef FEAT_X11\n\telse\n# ifdef FEAT_GUI_GTK\n\tif (!gui.in_use)\t\t/* don't do this if GTK+ is running */\n# endif\n\t    set_x11_icon(icon);\t\t\t/* x11 */\n#endif\n\tdid_set_icon = TRUE;\n    }\n    --recursive;\n}\n\n/*\n * Restore the window/icon title.\n * \"which\" is one of:\n *  1  only restore title\n *  2  only restore icon\n *  3  restore title and icon\n */\n    void\nmch_restore_title(int which)\n{\n    /* only restore the title or icon when it has been set */\n    mch_settitle(((which & 1) && did_set_title) ?\n\t\t\t(oldtitle ? oldtitle : p_titleold) : NULL,\n\t\t\t      ((which & 2) && did_set_icon) ? oldicon : NULL);\n}\n\n#endif /* FEAT_TITLE */\n\n/*\n * Return TRUE if \"name\" looks like some xterm name.\n * Seiichi Sato mentioned that \"mlterm\" works like xterm.\n */\n    int\nvim_is_xterm(char_u *name)\n{\n    if (name == NULL)\n\treturn FALSE;\n    return (STRNICMP(name, \"xterm\", 5) == 0\n\t\t|| STRNICMP(name, \"nxterm\", 6) == 0\n\t\t|| STRNICMP(name, \"kterm\", 5) == 0\n\t\t|| STRNICMP(name, \"mlterm\", 6) == 0\n\t\t|| STRNICMP(name, \"rxvt\", 4) == 0\n\t\t|| STRCMP(name, \"builtin_xterm\") == 0);\n}\n\n#if defined(FEAT_MOUSE_XTERM) || defined(PROTO)\n/*\n * Return TRUE if \"name\" appears to be that of a terminal\n * known to support the xterm-style mouse protocol.\n * Relies on term_is_xterm having been set to its correct value.\n */\n    int\nuse_xterm_like_mouse(char_u *name)\n{\n    return (name != NULL\n\t    && (term_is_xterm\n\t\t|| STRNICMP(name, \"screen\", 6) == 0\n\t\t|| STRICMP(name, \"st\") == 0\n\t\t|| STRNICMP(name, \"st-\", 3) == 0\n\t\t|| STRNICMP(name, \"stterm\", 6) == 0));\n}\n#endif\n\n#if defined(FEAT_MOUSE_TTY) || defined(PROTO)\n/*\n * Return non-zero when using an xterm mouse, according to 'ttymouse'.\n * Return 1 for \"xterm\".\n * Return 2 for \"xterm2\".\n * Return 3 for \"urxvt\".\n * Return 4 for \"sgr\".\n */\n    int\nuse_xterm_mouse(void)\n{\n    if (ttym_flags == TTYM_SGR)\n\treturn 4;\n    if (ttym_flags == TTYM_URXVT)\n\treturn 3;\n    if (ttym_flags == TTYM_XTERM2)\n\treturn 2;\n    if (ttym_flags == TTYM_XTERM)\n\treturn 1;\n    return 0;\n}\n#endif\n\n    int\nvim_is_iris(char_u *name)\n{\n    if (name == NULL)\n\treturn FALSE;\n    return (STRNICMP(name, \"iris-ansi\", 9) == 0\n\t    || STRCMP(name, \"builtin_iris-ansi\") == 0);\n}\n\n    int\nvim_is_vt300(char_u *name)\n{\n    if (name == NULL)\n\treturn FALSE;\t       /* actually all ANSI comp. terminals should be here  */\n    /* catch VT100 - VT5xx */\n    return ((STRNICMP(name, \"vt\", 2) == 0\n\t\t&& vim_strchr((char_u *)\"12345\", name[2]) != NULL)\n\t    || STRCMP(name, \"builtin_vt320\") == 0);\n}\n\n/*\n * Return TRUE if \"name\" is a terminal for which 'ttyfast' should be set.\n * This should include all windowed terminal emulators.\n */\n    int\nvim_is_fastterm(char_u *name)\n{\n    if (name == NULL)\n\treturn FALSE;\n    if (vim_is_xterm(name) || vim_is_vt300(name) || vim_is_iris(name))\n\treturn TRUE;\n    return (   STRNICMP(name, \"hpterm\", 6) == 0\n\t    || STRNICMP(name, \"sun-cmd\", 7) == 0\n\t    || STRNICMP(name, \"screen\", 6) == 0\n\t    || STRNICMP(name, \"dtterm\", 6) == 0);\n}\n\n/*\n * Insert user name in s[len].\n * Return OK if a name found.\n */\n    int\nmch_get_user_name(char_u *s, int len)\n{\n#ifdef VMS\n    vim_strncpy(s, (char_u *)cuserid(NULL), len - 1);\n    return OK;\n#else\n    return mch_get_uname(getuid(), s, len);\n#endif\n}\n\n/*\n * Insert user name for \"uid\" in s[len].\n * Return OK if a name found.\n */\n    int\nmch_get_uname(uid_t uid, char_u *s, int len)\n{\n#if defined(HAVE_PWD_H) && defined(HAVE_GETPWUID)\n    struct passwd   *pw;\n\n    if ((pw = getpwuid(uid)) != NULL\n\t    && pw->pw_name != NULL && *(pw->pw_name) != NUL)\n    {\n\tvim_strncpy(s, (char_u *)pw->pw_name, len - 1);\n\treturn OK;\n    }\n#endif\n    sprintf((char *)s, \"%d\", (int)uid);\t    /* assumes s is long enough */\n    return FAIL;\t\t\t    /* a number is not a name */\n}\n\n/*\n * Insert host name is s[len].\n */\n\n#ifdef HAVE_SYS_UTSNAME_H\n    void\nmch_get_host_name(char_u *s, int len)\n{\n    struct utsname vutsname;\n\n    if (uname(&vutsname) < 0)\n\t*s = NUL;\n    else\n\tvim_strncpy(s, (char_u *)vutsname.nodename, len - 1);\n}\n#else /* HAVE_SYS_UTSNAME_H */\n\n# ifdef HAVE_SYS_SYSTEMINFO_H\n#  define gethostname(nam, len) sysinfo(SI_HOSTNAME, nam, len)\n# endif\n\n    void\nmch_get_host_name(char_u *s, int len)\n{\n# ifdef VAXC\n    vaxc$gethostname((char *)s, len);\n# else\n    gethostname((char *)s, len);\n# endif\n    s[len - 1] = NUL;\t/* make sure it's terminated */\n}\n#endif /* HAVE_SYS_UTSNAME_H */\n\n/*\n * return process ID\n */\n    long\nmch_get_pid(void)\n{\n    return (long)getpid();\n}\n\n#if !defined(HAVE_STRERROR) && defined(USE_GETCWD)\nstatic char *strerror(int);\n\n    static char *\nstrerror(int err)\n{\n    extern int\t    sys_nerr;\n    extern char\t    *sys_errlist[];\n    static char\t    er[20];\n\n    if (err > 0 && err < sys_nerr)\n\treturn (sys_errlist[err]);\n    sprintf(er, \"Error %d\", err);\n    return er;\n}\n#endif\n\n/*\n * Get name of current directory into buffer 'buf' of length 'len' bytes.\n * Return OK for success, FAIL for failure.\n */\n    int\nmch_dirname(char_u *buf, int len)\n{\n#if defined(USE_GETCWD)\n    if (getcwd((char *)buf, len) == NULL)\n    {\n\tSTRCPY(buf, strerror(errno));\n\treturn FAIL;\n    }\n    return OK;\n#else\n    return (getwd((char *)buf) != NULL ? OK : FAIL);\n#endif\n}\n\n/*\n * Get absolute file name into \"buf[len]\".\n *\n * return FAIL for failure, OK for success\n */\n    int\nmch_FullName(\n    char_u\t*fname,\n    char_u\t*buf,\n    int\t\tlen,\n    int\t\tforce)\t\t/* also expand when already absolute path */\n{\n    int\t\tl;\n#ifdef HAVE_FCHDIR\n    int\t\tfd = -1;\n    static int\tdont_fchdir = FALSE;\t/* TRUE when fchdir() doesn't work */\n#endif\n    char_u\tolddir[MAXPATHL];\n    char_u\t*p;\n    int\t\tretval = OK;\n#ifdef __CYGWIN__\n    char_u\tposix_fname[MAXPATHL];\t/* Cygwin docs mention MAX_PATH, but\n\t\t\t\t\t   it's not always defined */\n#endif\n\n#ifdef VMS\n    fname = vms_fixfilename(fname);\n#endif\n\n#ifdef __CYGWIN__\n    /*\n     * This helps for when \"/etc/hosts\" is a symlink to \"c:/something/hosts\".\n     */\n# if CYGWIN_VERSION_DLL_MAJOR >= 1007\n    /* Use CCP_RELATIVE to avoid that it sometimes returns a path that ends in\n     * a forward slash. */\n    cygwin_conv_path(CCP_WIN_A_TO_POSIX | CCP_RELATIVE,\n\t\t     fname, posix_fname, MAXPATHL);\n# else\n    cygwin_conv_to_posix_path(fname, posix_fname);\n# endif\n    fname = posix_fname;\n#endif\n\n    /* Expand it if forced or not an absolute path.\n     * Do not do it for \"/file\", the result is always \"/\". */\n    if ((force || !mch_isFullName(fname))\n\t    && ((p = vim_strrchr(fname, '/')) == NULL || p != fname))\n    {\n\t/*\n\t * If the file name has a path, change to that directory for a moment,\n\t * and then do the getwd() (and get back to where we were).\n\t * This will get the correct path name with \"../\" things.\n\t */\n\tif (p != NULL)\n\t{\n#ifdef HAVE_FCHDIR\n\t    /*\n\t     * Use fchdir() if possible, it's said to be faster and more\n\t     * reliable.  But on SunOS 4 it might not work.  Check this by\n\t     * doing a fchdir() right now.\n\t     */\n\t    if (!dont_fchdir)\n\t    {\n\t\tfd = open(\".\", O_RDONLY | O_EXTRA, 0);\n\t\tif (fd >= 0 && fchdir(fd) < 0)\n\t\t{\n\t\t    close(fd);\n\t\t    fd = -1;\n\t\t    dont_fchdir = TRUE;\t    /* don't try again */\n\t\t}\n\t    }\n#endif\n\n\t    /* Only change directory when we are sure we can return to where\n\t     * we are now.  After doing \"su\" chdir(\".\") might not work. */\n\t    if (\n#ifdef HAVE_FCHDIR\n\t\tfd < 0 &&\n#endif\n\t\t\t(mch_dirname(olddir, MAXPATHL) == FAIL\n\t\t\t\t\t   || mch_chdir((char *)olddir) != 0))\n\t    {\n\t\tp = NULL;\t/* can't get current dir: don't chdir */\n\t\tretval = FAIL;\n\t    }\n\t    else\n\t    {\n\t\t/* The directory is copied into buf[], to be able to remove\n\t\t * the file name without changing it (could be a string in\n\t\t * read-only memory) */\n\t\tif (p - fname >= len)\n\t\t    retval = FAIL;\n\t\telse\n\t\t{\n\t\t    vim_strncpy(buf, fname, p - fname);\n\t\t    if (mch_chdir((char *)buf))\n\t\t\tretval = FAIL;\n\t\t    else\n\t\t\tfname = p + 1;\n\t\t    *buf = NUL;\n\t\t}\n\t    }\n\t}\n\tif (mch_dirname(buf, len) == FAIL)\n\t{\n\t    retval = FAIL;\n\t    *buf = NUL;\n\t}\n\tif (p != NULL)\n\t{\n#ifdef HAVE_FCHDIR\n\t    if (fd >= 0)\n\t    {\n\t\tif (p_verbose >= 5)\n\t\t{\n\t\t    verbose_enter();\n\t\t    MSG(\"fchdir() to previous dir\");\n\t\t    verbose_leave();\n\t\t}\n\t\tl = fchdir(fd);\n\t\tclose(fd);\n\t    }\n\t    else\n#endif\n\t\tl = mch_chdir((char *)olddir);\n\t    if (l != 0)\n\t\tEMSG(_(e_prev_dir));\n\t}\n\n\tl = STRLEN(buf);\n\tif (l >= len - 1)\n\t    retval = FAIL; /* no space for trailing \"/\" */\n#ifndef VMS\n\telse if (l > 0 && buf[l - 1] != '/' && *fname != NUL\n\t\t\t\t\t\t   && STRCMP(fname, \".\") != 0)\n\t    STRCAT(buf, \"/\");\n#endif\n    }\n\n    /* Catch file names which are too long. */\n    if (retval == FAIL || (int)(STRLEN(buf) + STRLEN(fname)) >= len)\n\treturn FAIL;\n\n    /* Do not append \".\", \"/dir/.\" is equal to \"/dir\". */\n    if (STRCMP(fname, \".\") != 0)\n\tSTRCAT(buf, fname);\n\n    return OK;\n}\n\n/*\n * Return TRUE if \"fname\" does not depend on the current directory.\n */\n    int\nmch_isFullName(char_u *fname)\n{\n#ifdef VMS\n    return ( fname[0] == '/'\t       || fname[0] == '.'\t    ||\n\t     strchr((char *)fname,':') || strchr((char *)fname,'\"') ||\n\t    (strchr((char *)fname,'[') && strchr((char *)fname,']'))||\n\t    (strchr((char *)fname,'<') && strchr((char *)fname,'>'))   );\n#else\n    return (*fname == '/' || *fname == '~');\n#endif\n}\n\n#if defined(USE_FNAME_CASE) || defined(PROTO)\n/*\n * Set the case of the file name, if it already exists.  This will cause the\n * file name to remain exactly the same.\n * Only required for file systems where case is ignored and preserved.\n */\n    void\nfname_case(\n    char_u\t*name,\n    int\t\tlen UNUSED)  /* buffer size, only used when name gets longer */\n{\n    struct stat st;\n    char_u\t*slash, *tail;\n    DIR\t\t*dirp;\n    struct dirent *dp;\n\n    if (lstat((char *)name, &st) >= 0)\n    {\n\t/* Open the directory where the file is located. */\n\tslash = vim_strrchr(name, '/');\n\tif (slash == NULL)\n\t{\n\t    dirp = opendir(\".\");\n\t    tail = name;\n\t}\n\telse\n\t{\n\t    *slash = NUL;\n\t    dirp = opendir((char *)name);\n\t    *slash = '/';\n\t    tail = slash + 1;\n\t}\n\n\tif (dirp != NULL)\n\t{\n\t    while ((dp = readdir(dirp)) != NULL)\n\t    {\n\t\t/* Only accept names that differ in case and are the same byte\n\t\t * length. TODO: accept different length name. */\n\t\tif (STRICMP(tail, dp->d_name) == 0\n\t\t\t&& STRLEN(tail) == STRLEN(dp->d_name))\n\t\t{\n\t\t    char_u\tnewname[MAXPATHL + 1];\n\t\t    struct stat st2;\n\n\t\t    /* Verify the inode is equal. */\n\t\t    vim_strncpy(newname, name, MAXPATHL);\n\t\t    vim_strncpy(newname + (tail - name), (char_u *)dp->d_name,\n\t\t\t\t\t\t    MAXPATHL - (tail - name));\n\t\t    if (lstat((char *)newname, &st2) >= 0\n\t\t\t    && st.st_ino == st2.st_ino\n\t\t\t    && st.st_dev == st2.st_dev)\n\t\t    {\n\t\t\tSTRCPY(tail, dp->d_name);\n\t\t\tbreak;\n\t\t    }\n\t\t}\n\t    }\n\n\t    closedir(dirp);\n\t}\n    }\n}\n#endif\n\n/*\n * Get file permissions for 'name'.\n * Returns -1 when it doesn't exist.\n */\n    long\nmch_getperm(char_u *name)\n{\n    struct stat statb;\n\n    /* Keep the #ifdef outside of stat(), it may be a macro. */\n#ifdef VMS\n    if (stat((char *)vms_fixfilename(name), &statb))\n#else\n    if (stat((char *)name, &statb))\n#endif\n\treturn -1;\n#ifdef __INTERIX\n    /* The top bit makes the value negative, which means the file doesn't\n     * exist.  Remove the bit, we don't use it. */\n    return statb.st_mode & ~S_ADDACE;\n#else\n    return statb.st_mode;\n#endif\n}\n\n/*\n * set file permission for 'name' to 'perm'\n *\n * return FAIL for failure, OK otherwise\n */\n    int\nmch_setperm(char_u *name, long perm)\n{\n    return (chmod((char *)\n#ifdef VMS\n\t\t    vms_fixfilename(name),\n#else\n\t\t    name,\n#endif\n\t\t    (mode_t)perm) == 0 ? OK : FAIL);\n}\n\n#if defined(HAVE_ACL) || defined(PROTO)\n# ifdef HAVE_SYS_ACL_H\n#  include <sys/acl.h>\n# endif\n# ifdef HAVE_SYS_ACCESS_H\n#  include <sys/access.h>\n# endif\n\n# ifdef HAVE_SOLARIS_ACL\ntypedef struct vim_acl_solaris_T {\n    int acl_cnt;\n    aclent_t *acl_entry;\n} vim_acl_solaris_T;\n# endif\n\n#if defined(HAVE_SELINUX) || defined(PROTO)\n/*\n * Copy security info from \"from_file\" to \"to_file\".\n */\n    void\nmch_copy_sec(char_u *from_file, char_u *to_file)\n{\n    if (from_file == NULL)\n\treturn;\n\n    if (selinux_enabled == -1)\n\tselinux_enabled = is_selinux_enabled();\n\n    if (selinux_enabled > 0)\n    {\n\tsecurity_context_t from_context = NULL;\n\tsecurity_context_t to_context = NULL;\n\n\tif (getfilecon((char *)from_file, &from_context) < 0)\n\t{\n\t    /* If the filesystem doesn't support extended attributes,\n\t       the original had no special security context and the\n\t       target cannot have one either.  */\n\t    if (errno == EOPNOTSUPP)\n\t\treturn;\n\n\t    MSG_PUTS(_(\"\\nCould not get security context for \"));\n\t    msg_outtrans(from_file);\n\t    msg_putchar('\\n');\n\t    return;\n\t}\n\tif (getfilecon((char *)to_file, &to_context) < 0)\n\t{\n\t    MSG_PUTS(_(\"\\nCould not get security context for \"));\n\t    msg_outtrans(to_file);\n\t    msg_putchar('\\n');\n\t    freecon (from_context);\n\t    return ;\n\t}\n\tif (strcmp(from_context, to_context) != 0)\n\t{\n\t    if (setfilecon((char *)to_file, from_context) < 0)\n\t    {\n\t\tMSG_PUTS(_(\"\\nCould not set security context for \"));\n\t\tmsg_outtrans(to_file);\n\t\tmsg_putchar('\\n');\n\t    }\n\t}\n\tfreecon(to_context);\n\tfreecon(from_context);\n    }\n}\n#endif /* HAVE_SELINUX */\n\n#if defined(HAVE_SMACK) && !defined(PROTO)\n/*\n * Copy security info from \"from_file\" to \"to_file\".\n */\n    void\nmch_copy_sec(char_u *from_file, char_u *to_file)\n{\n    static const char * const smack_copied_attributes[] =\n\t{\n\t    XATTR_NAME_SMACK,\n\t    XATTR_NAME_SMACKEXEC,\n\t    XATTR_NAME_SMACKMMAP\n\t};\n\n    char\tbuffer[SMACK_LABEL_LEN];\n    const char\t*name;\n    int\t\tindex;\n    int\t\tret;\n    ssize_t\tsize;\n\n    if (from_file == NULL)\n\treturn;\n\n    for (index = 0 ; index < (int)(sizeof(smack_copied_attributes)\n\t\t\t      / sizeof(smack_copied_attributes)[0]) ; index++)\n    {\n\t/* get the name of the attribute to copy */\n\tname = smack_copied_attributes[index];\n\n\t/* get the value of the attribute in buffer */\n\tsize = getxattr((char*)from_file, name, buffer, sizeof(buffer));\n\tif (size >= 0)\n\t{\n\t    /* copy the attribute value of buffer */\n\t    ret = setxattr((char*)to_file, name, buffer, (size_t)size, 0);\n\t    if (ret < 0)\n\t    {\n\t\tvim_snprintf((char *)IObuff, IOSIZE,\n\t\t\t_(\"Could not set security context %s for %s\"),\n\t\t\tname, to_file);\n\t\tmsg_outtrans(IObuff);\n\t\tmsg_putchar('\\n');\n\t    }\n\t}\n\telse\n\t{\n\t    /* what reason of not having the attribute value? */\n\t    switch (errno)\n\t    {\n\t\tcase ENOTSUP:\n\t\t    /* extended attributes aren't supported or enabled */\n\t\t    /* should a message be echoed? not sure... */\n\t\t    return; /* leave because it isn't usefull to continue */\n\n\t\tcase ERANGE:\n\t\tdefault:\n\t\t    /* no enough size OR unexpected error */\n\t\t     vim_snprintf((char *)IObuff, IOSIZE,\n\t\t\t    _(\"Could not get security context %s for %s. Removing it!\"),\n\t\t\t    name, from_file);\n\t\t    msg_puts(IObuff);\n\t\t    msg_putchar('\\n');\n\t\t    /* FALLTHROUGH to remove the attribute */\n\n\t\tcase ENODATA:\n\t\t    /* no attribute of this name */\n\t\t    ret = removexattr((char*)to_file, name);\n\t\t    /* Silently ignore errors, apparently this happens when\n\t\t     * smack is not actually being used. */\n\t\t    break;\n\t    }\n\t}\n    }\n}\n#endif /* HAVE_SMACK */\n\n/*\n * Return a pointer to the ACL of file \"fname\" in allocated memory.\n * Return NULL if the ACL is not available for whatever reason.\n */\n    vim_acl_T\nmch_get_acl(char_u *fname UNUSED)\n{\n    vim_acl_T\tret = NULL;\n#ifdef HAVE_POSIX_ACL\n    ret = (vim_acl_T)acl_get_file((char *)fname, ACL_TYPE_ACCESS);\n#else\n#ifdef HAVE_SOLARIS_ZFS_ACL\n    acl_t *aclent;\n\n    if (acl_get((char *)fname, 0, &aclent) < 0)\n\treturn NULL;\n    ret = (vim_acl_T)aclent;\n#else\n#ifdef HAVE_SOLARIS_ACL\n    vim_acl_solaris_T   *aclent;\n\n    aclent = malloc(sizeof(vim_acl_solaris_T));\n    if ((aclent->acl_cnt = acl((char *)fname, GETACLCNT, 0, NULL)) < 0)\n    {\n\tfree(aclent);\n\treturn NULL;\n    }\n    aclent->acl_entry = malloc(aclent->acl_cnt * sizeof(aclent_t));\n    if (acl((char *)fname, GETACL, aclent->acl_cnt, aclent->acl_entry) < 0)\n    {\n\tfree(aclent->acl_entry);\n\tfree(aclent);\n\treturn NULL;\n    }\n    ret = (vim_acl_T)aclent;\n#else\n#if defined(HAVE_AIX_ACL)\n    int\t\taclsize;\n    struct acl *aclent;\n\n    aclsize = sizeof(struct acl);\n    aclent = malloc(aclsize);\n    if (statacl((char *)fname, STX_NORMAL, aclent, aclsize) < 0)\n    {\n\tif (errno == ENOSPC)\n\t{\n\t    aclsize = aclent->acl_len;\n\t    aclent = realloc(aclent, aclsize);\n\t    if (statacl((char *)fname, STX_NORMAL, aclent, aclsize) < 0)\n\t    {\n\t\tfree(aclent);\n\t\treturn NULL;\n\t    }\n\t}\n\telse\n\t{\n\t    free(aclent);\n\t    return NULL;\n\t}\n    }\n    ret = (vim_acl_T)aclent;\n#endif /* HAVE_AIX_ACL */\n#endif /* HAVE_SOLARIS_ACL */\n#endif /* HAVE_SOLARIS_ZFS_ACL */\n#endif /* HAVE_POSIX_ACL */\n    return ret;\n}\n\n/*\n * Set the ACL of file \"fname\" to \"acl\" (unless it's NULL).\n */\n    void\nmch_set_acl(char_u *fname UNUSED, vim_acl_T aclent)\n{\n    if (aclent == NULL)\n\treturn;\n#ifdef HAVE_POSIX_ACL\n    acl_set_file((char *)fname, ACL_TYPE_ACCESS, (acl_t)aclent);\n#else\n#ifdef HAVE_SOLARIS_ZFS_ACL\n    acl_set((char *)fname, (acl_t *)aclent);\n#else\n#ifdef HAVE_SOLARIS_ACL\n    acl((char *)fname, SETACL, ((vim_acl_solaris_T *)aclent)->acl_cnt,\n\t    ((vim_acl_solaris_T *)aclent)->acl_entry);\n#else\n#ifdef HAVE_AIX_ACL\n    chacl((char *)fname, aclent, ((struct acl *)aclent)->acl_len);\n#endif /* HAVE_AIX_ACL */\n#endif /* HAVE_SOLARIS_ACL */\n#endif /* HAVE_SOLARIS_ZFS_ACL */\n#endif /* HAVE_POSIX_ACL */\n}\n\n    void\nmch_free_acl(vim_acl_T aclent)\n{\n    if (aclent == NULL)\n\treturn;\n#ifdef HAVE_POSIX_ACL\n    acl_free((acl_t)aclent);\n#else\n#ifdef HAVE_SOLARIS_ZFS_ACL\n    acl_free((acl_t *)aclent);\n#else\n#ifdef HAVE_SOLARIS_ACL\n    free(((vim_acl_solaris_T *)aclent)->acl_entry);\n    free(aclent);\n#else\n#ifdef HAVE_AIX_ACL\n    free(aclent);\n#endif /* HAVE_AIX_ACL */\n#endif /* HAVE_SOLARIS_ACL */\n#endif /* HAVE_SOLARIS_ZFS_ACL */\n#endif /* HAVE_POSIX_ACL */\n}\n#endif\n\n/*\n * Set hidden flag for \"name\".\n */\n    void\nmch_hide(char_u *name UNUSED)\n{\n    /* can't hide a file */\n}\n\n/*\n * return TRUE if \"name\" is a directory or a symlink to a directory\n * return FALSE if \"name\" is not a directory\n * return FALSE for error\n */\n    int\nmch_isdir(char_u *name)\n{\n    struct stat statb;\n\n    if (*name == NUL)\t    /* Some stat()s don't flag \"\" as an error. */\n\treturn FALSE;\n    if (stat((char *)name, &statb))\n\treturn FALSE;\n#ifdef _POSIX_SOURCE\n    return (S_ISDIR(statb.st_mode) ? TRUE : FALSE);\n#else\n    return ((statb.st_mode & S_IFMT) == S_IFDIR ? TRUE : FALSE);\n#endif\n}\n\n/*\n * return TRUE if \"name\" is a directory, NOT a symlink to a directory\n * return FALSE if \"name\" is not a directory\n * return FALSE for error\n */\n    int\nmch_isrealdir(char_u *name)\n{\n    struct stat statb;\n\n    if (*name == NUL)\t    /* Some stat()s don't flag \"\" as an error. */\n\treturn FALSE;\n    if (lstat((char *)name, &statb))\n\treturn FALSE;\n#ifdef _POSIX_SOURCE\n    return (S_ISDIR(statb.st_mode) ? TRUE : FALSE);\n#else\n    return ((statb.st_mode & S_IFMT) == S_IFDIR ? TRUE : FALSE);\n#endif\n}\n\nstatic int executable_file(char_u *name);\n\n/*\n * Return 1 if \"name\" is an executable file, 0 if not or it doesn't exist.\n */\n    static int\nexecutable_file(char_u *name)\n{\n    struct stat\tst;\n\n    if (stat((char *)name, &st))\n\treturn 0;\n#ifdef VMS\n    /* Like on Unix system file can have executable rights but not necessarily\n     * be an executable, but on Unix is not a default for an ordianry file to\n     * have an executable flag - on VMS it is in most cases.\n     * Therefore, this check does not have any sense - let keep us to the\n     * conventions instead:\n     * *.COM and *.EXE files are the executables - the rest are not. This is\n     * not ideal but better then it was.\n     */\n    int vms_executable = 0;\n    if (S_ISREG(st.st_mode) && mch_access((char *)name, X_OK) == 0)\n    {\n\tif (strstr(vms_tolower((char*)name),\".exe\") != NULL\n\t\t|| strstr(vms_tolower((char*)name),\".com\")!= NULL)\n\t    vms_executable = 1;\n    }\n    return vms_executable;\n#else\n    return S_ISREG(st.st_mode) && mch_access((char *)name, X_OK) == 0;\n#endif\n}\n\n/*\n * Return 1 if \"name\" can be found in $PATH and executed, 0 if not.\n * If \"use_path\" is FALSE only check if \"name\" is executable.\n * Return -1 if unknown.\n */\n    int\nmch_can_exe(char_u *name, char_u **path, int use_path)\n{\n    char_u\t*buf;\n    char_u\t*p, *e;\n    int\t\tretval;\n\n    /* When \"use_path\" is false and if it's an absolute or relative path don't\n     * need to use $PATH. */\n    if (!use_path || mch_isFullName(name) || (name[0] == '.'\n\t\t   && (name[1] == '/' || (name[1] == '.' && name[2] == '/'))))\n    {\n\t/* There must be a path separator, files in the current directory\n\t * can't be executed. */\n\tif (gettail(name) != name && executable_file(name))\n\t{\n\t    if (path != NULL)\n\t    {\n\t\tif (name[0] == '.')\n\t\t    *path = FullName_save(name, TRUE);\n\t\telse\n\t\t    *path = vim_strsave(name);\n\t    }\n\t    return TRUE;\n\t}\n\treturn FALSE;\n    }\n\n    p = (char_u *)getenv(\"PATH\");\n    if (p == NULL || *p == NUL)\n\treturn -1;\n    buf = alloc((unsigned)(STRLEN(name) + STRLEN(p) + 2));\n    if (buf == NULL)\n\treturn -1;\n\n    /*\n     * Walk through all entries in $PATH to check if \"name\" exists there and\n     * is an executable file.\n     */\n    for (;;)\n    {\n\te = (char_u *)strchr((char *)p, ':');\n\tif (e == NULL)\n\t    e = p + STRLEN(p);\n\tif (e - p <= 1)\t\t/* empty entry means current dir */\n\t    STRCPY(buf, \"./\");\n\telse\n\t{\n\t    vim_strncpy(buf, p, e - p);\n\t    add_pathsep(buf);\n\t}\n\tSTRCAT(buf, name);\n\tretval = executable_file(buf);\n\tif (retval == 1)\n\t{\n\t    if (path != NULL)\n\t    {\n\t\tif (buf[0] == '.')\n\t\t    *path = FullName_save(buf, TRUE);\n\t\telse\n\t\t    *path = vim_strsave(buf);\n\t    }\n\t    break;\n\t}\n\n\tif (*e != ':')\n\t    break;\n\tp = e + 1;\n    }\n\n    vim_free(buf);\n    return retval;\n}\n\n/*\n * Check what \"name\" is:\n * NODE_NORMAL: file or directory (or doesn't exist)\n * NODE_WRITABLE: writable device, socket, fifo, etc.\n * NODE_OTHER: non-writable things\n */\n    int\nmch_nodetype(char_u *name)\n{\n    struct stat\tst;\n\n    if (stat((char *)name, &st))\n\treturn NODE_NORMAL;\n    if (S_ISREG(st.st_mode) || S_ISDIR(st.st_mode))\n\treturn NODE_NORMAL;\n    if (S_ISBLK(st.st_mode))\t/* block device isn't writable */\n\treturn NODE_OTHER;\n    /* Everything else is writable? */\n    return NODE_WRITABLE;\n}\n\n    void\nmch_early_init(void)\n{\n#ifdef HAVE_CHECK_STACK_GROWTH\n    int\t\t\ti;\n\n    check_stack_growth((char *)&i);\n\n# ifdef HAVE_STACK_LIMIT\n    get_stack_limit();\n# endif\n\n#endif\n\n    /*\n     * Setup an alternative stack for signals.  Helps to catch signals when\n     * running out of stack space.\n     * Use of sigaltstack() is preferred, it's more portable.\n     * Ignore any errors.\n     */\n#if defined(HAVE_SIGALTSTACK) || defined(HAVE_SIGSTACK)\n    signal_stack = (char *)alloc(SIGSTKSZ);\n    init_signal_stack();\n#endif\n}\n\n#if defined(EXITFREE) || defined(PROTO)\n    void\nmch_free_mem(void)\n{\n# if defined(FEAT_CLIPBOARD) && defined(FEAT_X11)\n    if (clip_star.owned)\n\tclip_lose_selection(&clip_star);\n    if (clip_plus.owned)\n\tclip_lose_selection(&clip_plus);\n# endif\n# if defined(FEAT_X11) && defined(FEAT_XCLIPBOARD)\n    if (xterm_Shell != (Widget)0)\n\tXtDestroyWidget(xterm_Shell);\n#  ifndef LESSTIF_VERSION\n    /* Lesstif crashes here, lose some memory */\n    if (xterm_dpy != NULL)\n\tXtCloseDisplay(xterm_dpy);\n    if (app_context != (XtAppContext)NULL)\n    {\n\tXtDestroyApplicationContext(app_context);\n#   ifdef FEAT_X11\n\tx11_display = NULL; /* freed by XtDestroyApplicationContext() */\n#   endif\n    }\n#  endif\n# endif\n# if defined(FEAT_X11)\n    if (x11_display != NULL\n#  ifdef FEAT_XCLIPBOARD\n\t    && x11_display != xterm_dpy\n#  endif\n\t    )\n\tXCloseDisplay(x11_display);\n# endif\n# if defined(HAVE_SIGALTSTACK) || defined(HAVE_SIGSTACK)\n    vim_free(signal_stack);\n    signal_stack = NULL;\n# endif\n# ifdef FEAT_TITLE\n    vim_free(oldtitle);\n    vim_free(oldicon);\n# endif\n}\n#endif\n\nstatic void exit_scroll(void);\n\n/*\n * Output a newline when exiting.\n * Make sure the newline goes to the same stream as the text.\n */\n    static void\nexit_scroll(void)\n{\n    if (silent_mode)\n\treturn;\n    if (newline_on_exit || msg_didout)\n    {\n\tif (msg_use_printf())\n\t{\n\t    if (info_message)\n\t\tmch_msg(\"\\n\");\n\t    else\n\t\tmch_errmsg(\"\\r\\n\");\n\t}\n\telse\n\t    out_char('\\n');\n    }\n    else\n    {\n\trestore_cterm_colors();\t\t/* get original colors back */\n\tmsg_clr_eos_force();\t\t/* clear the rest of the display */\n\twindgoto((int)Rows - 1, 0);\t/* may have moved the cursor */\n    }\n}\n\n    void\nmch_exit(int r)\n{\n    exiting = TRUE;\n\n#if defined(FEAT_X11) && defined(FEAT_CLIPBOARD)\n    x11_export_final_selection();\n#endif\n\n#ifdef FEAT_GUI\n    if (!gui.in_use)\n#endif\n    {\n\tsettmode(TMODE_COOK);\n#ifdef FEAT_TITLE\n\tmch_restore_title(3);\t/* restore xterm title and icon name */\n#endif\n\t/*\n\t * When t_ti is not empty but it doesn't cause swapping terminal\n\t * pages, need to output a newline when msg_didout is set.  But when\n\t * t_ti does swap pages it should not go to the shell page.  Do this\n\t * before stoptermcap().\n\t */\n\tif (swapping_screen() && !newline_on_exit)\n\t    exit_scroll();\n\n\t/* Stop termcap: May need to check for T_CRV response, which\n\t * requires RAW mode. */\n\tstoptermcap();\n\n\t/*\n\t * A newline is only required after a message in the alternate screen.\n\t * This is set to TRUE by wait_return().\n\t */\n\tif (!swapping_screen() || newline_on_exit)\n\t    exit_scroll();\n\n\t/* Cursor may have been switched off without calling starttermcap()\n\t * when doing \"vim -u vimrc\" and vimrc contains \":q\". */\n\tif (full_screen)\n\t    cursor_on();\n    }\n    out_flush();\n    ml_close_all(TRUE);\t\t/* remove all memfiles */\n    may_core_dump();\n#ifdef FEAT_GUI\n    if (gui.in_use)\n\tgui_exit(r);\n#endif\n\n#ifdef MACOS_CONVERT\n    mac_conv_cleanup();\n#endif\n\n#ifdef __QNX__\n    /* A core dump won't be created if the signal handler\n     * doesn't return, so we can't call exit() */\n    if (deadly_signal != 0)\n\treturn;\n#endif\n\n#ifdef FEAT_NETBEANS_INTG\n    netbeans_send_disconnect();\n#endif\n\n#ifdef EXITFREE\n    free_all_mem();\n#endif\n\n    exit(r);\n}\n\n    static void\nmay_core_dump(void)\n{\n    if (deadly_signal != 0)\n    {\n\tsignal(deadly_signal, SIG_DFL);\n\tkill(getpid(), deadly_signal);\t/* Die using the signal we caught */\n    }\n}\n\n#ifndef VMS\n\n    void\nmch_settmode(int tmode)\n{\n    static int first = TRUE;\n\n    /* Why is NeXT excluded here (and not in os_unixx.h)? */\n#if defined(ECHOE) && defined(ICANON) && (defined(HAVE_TERMIO_H) || defined(HAVE_TERMIOS_H)) && !defined(__NeXT__)\n    /*\n     * for \"new\" tty systems\n     */\n# ifdef HAVE_TERMIOS_H\n    static struct termios told;\n\t   struct termios tnew;\n# else\n    static struct termio told;\n\t   struct termio tnew;\n# endif\n\n    if (first)\n    {\n\tfirst = FALSE;\n# if defined(HAVE_TERMIOS_H)\n\ttcgetattr(read_cmd_fd, &told);\n# else\n\tioctl(read_cmd_fd, TCGETA, &told);\n# endif\n    }\n\n    tnew = told;\n    if (tmode == TMODE_RAW)\n    {\n\t/*\n\t * ~ICRNL enables typing ^V^M\n\t */\n\ttnew.c_iflag &= ~ICRNL;\n\ttnew.c_lflag &= ~(ICANON | ECHO | ISIG | ECHOE\n# if defined(IEXTEN) && !defined(__MINT__)\n\t\t    | IEXTEN\t    /* IEXTEN enables typing ^V on SOLARIS */\n\t\t\t\t    /* but it breaks function keys on MINT */\n# endif\n\t\t\t\t);\n# ifdef ONLCR\t    /* don't map NL -> CR NL, we do it ourselves */\n\ttnew.c_oflag &= ~ONLCR;\n# endif\n\ttnew.c_cc[VMIN] = 1;\t\t/* return after 1 char */\n\ttnew.c_cc[VTIME] = 0;\t\t/* don't wait */\n    }\n    else if (tmode == TMODE_SLEEP)\n    {\n\t/* Also reset ICANON here, otherwise on Solaris select() won't see\n\t * typeahead characters. */\n\ttnew.c_lflag &= ~(ICANON | ECHO);\n\ttnew.c_cc[VMIN] = 1;\t\t/* return after 1 char */\n\ttnew.c_cc[VTIME] = 0;\t\t/* don't wait */\n    }\n\n# if defined(HAVE_TERMIOS_H)\n    {\n\tint\tn = 10;\n\n\t/* A signal may cause tcsetattr() to fail (e.g., SIGCONT).  Retry a\n\t * few times. */\n\twhile (tcsetattr(read_cmd_fd, TCSANOW, &tnew) == -1\n\t\t\t\t\t\t   && errno == EINTR && n > 0)\n\t    --n;\n    }\n# else\n    ioctl(read_cmd_fd, TCSETA, &tnew);\n# endif\n\n#else\n\n    /*\n     * for \"old\" tty systems\n     */\n# ifndef TIOCSETN\n#  define TIOCSETN TIOCSETP\t/* for hpux 9.0 */\n# endif\n    static struct sgttyb ttybold;\n\t   struct sgttyb ttybnew;\n\n    if (first)\n    {\n\tfirst = FALSE;\n\tioctl(read_cmd_fd, TIOCGETP, &ttybold);\n    }\n\n    ttybnew = ttybold;\n    if (tmode == TMODE_RAW)\n    {\n\tttybnew.sg_flags &= ~(CRMOD | ECHO);\n\tttybnew.sg_flags |= RAW;\n    }\n    else if (tmode == TMODE_SLEEP)\n\tttybnew.sg_flags &= ~(ECHO);\n    ioctl(read_cmd_fd, TIOCSETN, &ttybnew);\n#endif\n    curr_tmode = tmode;\n}\n\n/*\n * Try to get the code for \"t_kb\" from the stty setting\n *\n * Even if termcap claims a backspace key, the user's setting *should*\n * prevail.  stty knows more about reality than termcap does, and if\n * somebody's usual erase key is DEL (which, for most BSD users, it will\n * be), they're going to get really annoyed if their erase key starts\n * doing forward deletes for no reason. (Eric Fischer)\n */\n    void\nget_stty(void)\n{\n    char_u  buf[2];\n    char_u  *p;\n\n    /* Why is NeXT excluded here (and not in os_unixx.h)? */\n#if defined(ECHOE) && defined(ICANON) && (defined(HAVE_TERMIO_H) || defined(HAVE_TERMIOS_H)) && !defined(__NeXT__)\n    /* for \"new\" tty systems */\n# ifdef HAVE_TERMIOS_H\n    struct termios keys;\n# else\n    struct termio keys;\n# endif\n\n# if defined(HAVE_TERMIOS_H)\n    if (tcgetattr(read_cmd_fd, &keys) != -1)\n# else\n    if (ioctl(read_cmd_fd, TCGETA, &keys) != -1)\n# endif\n    {\n\tbuf[0] = keys.c_cc[VERASE];\n\tintr_char = keys.c_cc[VINTR];\n#else\n    /* for \"old\" tty systems */\n    struct sgttyb keys;\n\n    if (ioctl(read_cmd_fd, TIOCGETP, &keys) != -1)\n    {\n\tbuf[0] = keys.sg_erase;\n\tintr_char = keys.sg_kill;\n#endif\n\tbuf[1] = NUL;\n\tadd_termcode((char_u *)\"kb\", buf, FALSE);\n\n\t/*\n\t * If <BS> and <DEL> are now the same, redefine <DEL>.\n\t */\n\tp = find_termcode((char_u *)\"kD\");\n\tif (p != NULL && p[0] == buf[0] && p[1] == buf[1])\n\t    do_fixdel(NULL);\n    }\n#if 0\n    }\t    /* to keep cindent happy */\n#endif\n}\n\n#endif /* VMS  */\n\n#if defined(FEAT_MOUSE_TTY) || defined(PROTO)\n/*\n * Set mouse clicks on or off.\n */\n    void\nmch_setmouse(int on)\n{\n    static int\tison = FALSE;\n    int\t\txterm_mouse_vers;\n\n    if (on == ison)\t/* return quickly if nothing to do */\n\treturn;\n\n    xterm_mouse_vers = use_xterm_mouse();\n\n# ifdef FEAT_MOUSE_URXVT\n    if (ttym_flags == TTYM_URXVT)\n    {\n\tout_str_nf((char_u *)\n\t\t   (on\n\t\t   ? IF_EB(\"\\033[?1015h\", ESC_STR \"[?1015h\")\n\t\t   : IF_EB(\"\\033[?1015l\", ESC_STR \"[?1015l\")));\n\tison = on;\n    }\n# endif\n\n# ifdef FEAT_MOUSE_SGR\n    if (ttym_flags == TTYM_SGR)\n    {\n\tout_str_nf((char_u *)\n\t\t   (on\n\t\t   ? IF_EB(\"\\033[?1006h\", ESC_STR \"[?1006h\")\n\t\t   : IF_EB(\"\\033[?1006l\", ESC_STR \"[?1006l\")));\n\tison = on;\n    }\n# endif\n\n    if (xterm_mouse_vers > 0)\n    {\n\tif (on)\t/* enable mouse events, use mouse tracking if available */\n\t    out_str_nf((char_u *)\n\t\t       (xterm_mouse_vers > 1\n\t\t\t? IF_EB(\"\\033[?1002h\", ESC_STR \"[?1002h\")\n\t\t\t: IF_EB(\"\\033[?1000h\", ESC_STR \"[?1000h\")));\n\telse\t/* disable mouse events, could probably always send the same */\n\t    out_str_nf((char_u *)\n\t\t       (xterm_mouse_vers > 1\n\t\t\t? IF_EB(\"\\033[?1002l\", ESC_STR \"[?1002l\")\n\t\t\t: IF_EB(\"\\033[?1000l\", ESC_STR \"[?1000l\")));\n\tison = on;\n    }\n\n# ifdef FEAT_MOUSE_DEC\n    else if (ttym_flags == TTYM_DEC)\n    {\n\tif (on)\t/* enable mouse events */\n\t    out_str_nf((char_u *)\"\\033[1;2'z\\033[1;3'{\");\n\telse\t/* disable mouse events */\n\t    out_str_nf((char_u *)\"\\033['z\");\n\tison = on;\n    }\n# endif\n\n# ifdef FEAT_MOUSE_GPM\n    else\n    {\n\tif (on)\n\t{\n\t    if (gpm_open())\n\t\tison = TRUE;\n\t}\n\telse\n\t{\n\t    gpm_close();\n\t    ison = FALSE;\n\t}\n    }\n# endif\n\n# ifdef FEAT_SYSMOUSE\n    else\n    {\n\tif (on)\n\t{\n\t    if (sysmouse_open() == OK)\n\t\tison = TRUE;\n\t}\n\telse\n\t{\n\t    sysmouse_close();\n\t    ison = FALSE;\n\t}\n    }\n# endif\n\n# ifdef FEAT_MOUSE_JSB\n    else\n    {\n\tif (on)\n\t{\n\t    /* D - Enable Mouse up/down messages\n\t     * L - Enable Left Button Reporting\n\t     * M - Enable Middle Button Reporting\n\t     * R - Enable Right Button Reporting\n\t     * K - Enable SHIFT and CTRL key Reporting\n\t     * + - Enable Advanced messaging of mouse moves and up/down messages\n\t     * Q - Quiet No Ack\n\t     * # - Numeric value of mouse pointer required\n\t     *\t  0 = Multiview 2000 cursor, used as standard\n\t     *\t  1 = Windows Arrow\n\t     *\t  2 = Windows I Beam\n\t     *\t  3 = Windows Hour Glass\n\t     *\t  4 = Windows Cross Hair\n\t     *\t  5 = Windows UP Arrow\n\t     */\n#  ifdef JSBTERM_MOUSE_NONADVANCED\n\t    /* Disables full feedback of pointer movements */\n\t    out_str_nf((char_u *)IF_EB(\"\\033[0~ZwLMRK1Q\\033\\\\\",\n\t\t\t\t\t ESC_STR \"[0~ZwLMRK1Q\" ESC_STR \"\\\\\"));\n#  else\n\t    out_str_nf((char_u *)IF_EB(\"\\033[0~ZwLMRK+1Q\\033\\\\\",\n\t\t\t\t\tESC_STR \"[0~ZwLMRK+1Q\" ESC_STR \"\\\\\"));\n#  endif\n\t    ison = TRUE;\n\t}\n\telse\n\t{\n\t    out_str_nf((char_u *)IF_EB(\"\\033[0~ZwQ\\033\\\\\",\n\t\t\t\t\t      ESC_STR \"[0~ZwQ\" ESC_STR \"\\\\\"));\n\t    ison = FALSE;\n\t}\n    }\n# endif\n# ifdef FEAT_MOUSE_PTERM\n    else\n    {\n\t/* 1 = button press, 6 = release, 7 = drag, 1h...9l = right button */\n\tif (on)\n\t    out_str_nf(\"\\033[>1h\\033[>6h\\033[>7h\\033[>1h\\033[>9l\");\n\telse\n\t    out_str_nf(\"\\033[>1l\\033[>6l\\033[>7l\\033[>1l\\033[>9h\");\n\tison = on;\n    }\n# endif\n}\n\n/*\n * Set the mouse termcode, depending on the 'term' and 'ttymouse' options.\n */\n    void\ncheck_mouse_termcode(void)\n{\n# ifdef FEAT_MOUSE_XTERM\n    if (use_xterm_mouse()\n# ifdef FEAT_MOUSE_URXVT\n\t    && use_xterm_mouse() != 3\n# endif\n#  ifdef FEAT_GUI\n\t    && !gui.in_use\n#  endif\n\t    )\n    {\n\tset_mouse_termcode(KS_MOUSE, (char_u *)(term_is_8bit(T_NAME)\n\t\t    ? IF_EB(\"\\233M\", CSI_STR \"M\")\n\t\t    : IF_EB(\"\\033[M\", ESC_STR \"[M\")));\n\tif (*p_mouse != NUL)\n\t{\n\t    /* force mouse off and maybe on to send possibly new mouse\n\t     * activation sequence to the xterm, with(out) drag tracing. */\n\t    mch_setmouse(FALSE);\n\t    setmouse();\n\t}\n    }\n    else\n\tdel_mouse_termcode(KS_MOUSE);\n# endif\n\n# ifdef FEAT_MOUSE_GPM\n    if (!use_xterm_mouse()\n#  ifdef FEAT_GUI\n\t    && !gui.in_use\n#  endif\n\t    )\n\tset_mouse_termcode(KS_MOUSE, (char_u *)IF_EB(\"\\033MG\", ESC_STR \"MG\"));\n# endif\n\n# ifdef FEAT_SYSMOUSE\n    if (!use_xterm_mouse()\n#  ifdef FEAT_GUI\n\t    && !gui.in_use\n#  endif\n\t    )\n\tset_mouse_termcode(KS_MOUSE, (char_u *)IF_EB(\"\\033MS\", ESC_STR \"MS\"));\n# endif\n\n# ifdef FEAT_MOUSE_JSB\n    /* Conflicts with xterm mouse: \"\\033[\" and \"\\033[M\" ??? */\n    if (!use_xterm_mouse()\n#  ifdef FEAT_GUI\n\t    && !gui.in_use\n#  endif\n\t    )\n\tset_mouse_termcode(KS_JSBTERM_MOUSE,\n\t\t\t       (char_u *)IF_EB(\"\\033[0~zw\", ESC_STR \"[0~zw\"));\n    else\n\tdel_mouse_termcode(KS_JSBTERM_MOUSE);\n# endif\n\n# ifdef FEAT_MOUSE_NET\n    /* There is no conflict, but one may type \"ESC }\" from Insert mode.  Don't\n     * define it in the GUI or when using an xterm. */\n    if (!use_xterm_mouse()\n#  ifdef FEAT_GUI\n\t    && !gui.in_use\n#  endif\n\t    )\n\tset_mouse_termcode(KS_NETTERM_MOUSE,\n\t\t\t\t       (char_u *)IF_EB(\"\\033}\", ESC_STR \"}\"));\n    else\n\tdel_mouse_termcode(KS_NETTERM_MOUSE);\n# endif\n\n# ifdef FEAT_MOUSE_DEC\n    /* Conflicts with xterm mouse: \"\\033[\" and \"\\033[M\" */\n    if (!use_xterm_mouse()\n#  ifdef FEAT_GUI\n\t    && !gui.in_use\n#  endif\n\t    )\n\tset_mouse_termcode(KS_DEC_MOUSE, (char_u *)(term_is_8bit(T_NAME)\n\t\t     ? IF_EB(\"\\233\", CSI_STR) : IF_EB(\"\\033[\", ESC_STR \"[\")));\n    else\n\tdel_mouse_termcode(KS_DEC_MOUSE);\n# endif\n# ifdef FEAT_MOUSE_PTERM\n    /* same conflict as the dec mouse */\n    if (!use_xterm_mouse()\n#  ifdef FEAT_GUI\n\t    && !gui.in_use\n#  endif\n\t    )\n\tset_mouse_termcode(KS_PTERM_MOUSE,\n\t\t\t\t      (char_u *) IF_EB(\"\\033[\", ESC_STR \"[\"));\n    else\n\tdel_mouse_termcode(KS_PTERM_MOUSE);\n# endif\n# ifdef FEAT_MOUSE_URXVT\n    /* same conflict as the dec mouse */\n    if (use_xterm_mouse() == 3\n#  ifdef FEAT_GUI\n\t    && !gui.in_use\n#  endif\n\t    )\n    {\n\tset_mouse_termcode(KS_URXVT_MOUSE, (char_u *)(term_is_8bit(T_NAME)\n\t\t    ? IF_EB(\"\\233\", CSI_STR)\n\t\t    : IF_EB(\"\\033[\", ESC_STR \"[\")));\n\n\tif (*p_mouse != NUL)\n\t{\n\t    mch_setmouse(FALSE);\n\t    setmouse();\n\t}\n    }\n    else\n\tdel_mouse_termcode(KS_URXVT_MOUSE);\n# endif\n# ifdef FEAT_MOUSE_SGR\n    /* There is no conflict with xterm mouse */\n    if (use_xterm_mouse() == 4\n#  ifdef FEAT_GUI\n\t    && !gui.in_use\n#  endif\n\t    )\n    {\n\tset_mouse_termcode(KS_SGR_MOUSE, (char_u *)(term_is_8bit(T_NAME)\n\t\t    ? IF_EB(\"\\233<\", CSI_STR \"<\")\n\t\t    : IF_EB(\"\\033[<\", ESC_STR \"[<\")));\n\n\tif (*p_mouse != NUL)\n\t{\n\t    mch_setmouse(FALSE);\n\t    setmouse();\n\t}\n    }\n    else\n\tdel_mouse_termcode(KS_SGR_MOUSE);\n# endif\n}\n#endif\n\n/*\n * set screen mode, always fails.\n */\n    int\nmch_screenmode(char_u *arg UNUSED)\n{\n    EMSG(_(e_screenmode));\n    return FAIL;\n}\n\n#ifndef VMS\n\n/*\n * Try to get the current window size:\n * 1. with an ioctl(), most accurate method\n * 2. from the environment variables LINES and COLUMNS\n * 3. from the termcap\n * 4. keep using the old values\n * Return OK when size could be determined, FAIL otherwise.\n */\n    int\nmch_get_shellsize(void)\n{\n    long\trows = 0;\n    long\tcolumns = 0;\n    char_u\t*p;\n\n    /*\n     * 1. try using an ioctl. It is the most accurate method.\n     *\n     * Try using TIOCGWINSZ first, some systems that have it also define\n     * TIOCGSIZE but don't have a struct ttysize.\n     */\n# ifdef TIOCGWINSZ\n    {\n\tstruct winsize\tws;\n\tint fd = 1;\n\n\t/* When stdout is not a tty, use stdin for the ioctl(). */\n\tif (!isatty(fd) && isatty(read_cmd_fd))\n\t    fd = read_cmd_fd;\n\tif (ioctl(fd, TIOCGWINSZ, &ws) == 0)\n\t{\n\t    columns = ws.ws_col;\n\t    rows = ws.ws_row;\n\t}\n    }\n# else /* TIOCGWINSZ */\n#  ifdef TIOCGSIZE\n    {\n\tstruct ttysize\tts;\n\tint fd = 1;\n\n\t/* When stdout is not a tty, use stdin for the ioctl(). */\n\tif (!isatty(fd) && isatty(read_cmd_fd))\n\t    fd = read_cmd_fd;\n\tif (ioctl(fd, TIOCGSIZE, &ts) == 0)\n\t{\n\t    columns = ts.ts_cols;\n\t    rows = ts.ts_lines;\n\t}\n    }\n#  endif /* TIOCGSIZE */\n# endif /* TIOCGWINSZ */\n\n    /*\n     * 2. get size from environment\n     *    When being POSIX compliant ('|' flag in 'cpoptions') this overrules\n     *    the ioctl() values!\n     */\n    if (columns == 0 || rows == 0 || vim_strchr(p_cpo, CPO_TSIZE) != NULL)\n    {\n\tif ((p = (char_u *)getenv(\"LINES\")))\n\t    rows = atoi((char *)p);\n\tif ((p = (char_u *)getenv(\"COLUMNS\")))\n\t    columns = atoi((char *)p);\n    }\n\n#ifdef HAVE_TGETENT\n    /*\n     * 3. try reading \"co\" and \"li\" entries from termcap\n     */\n    if (columns == 0 || rows == 0)\n\tgetlinecol(&columns, &rows);\n#endif\n\n    /*\n     * 4. If everything fails, use the old values\n     */\n    if (columns <= 0 || rows <= 0)\n\treturn FAIL;\n\n    Rows = rows;\n    Columns = columns;\n    limit_screen_size();\n    return OK;\n}\n\n/*\n * Try to set the window size to Rows and Columns.\n */\n    void\nmch_set_shellsize(void)\n{\n    if (*T_CWS)\n    {\n\t/*\n\t * NOTE: if you get an error here that term_set_winsize() is\n\t * undefined, check the output of configure.  It could probably not\n\t * find a ncurses, termcap or termlib library.\n\t */\n\tterm_set_winsize((int)Rows, (int)Columns);\n\tout_flush();\n\tscreen_start();\t\t\t/* don't know where cursor is now */\n    }\n}\n\n#endif /* VMS */\n\n/*\n * Rows and/or Columns has changed.\n */\n    void\nmch_new_shellsize(void)\n{\n    /* Nothing to do. */\n}\n\n/*\n * Wait for process \"child\" to end.\n * Return \"child\" if it exited properly, <= 0 on error.\n */\n    static pid_t\nwait4pid(pid_t child, waitstatus *status)\n{\n    pid_t wait_pid = 0;\n    long delay_msec = 1;\n\n    while (wait_pid != child)\n    {\n\t/* When compiled with Python threads are probably used, in which case\n\t * wait() sometimes hangs for no obvious reason.  Use waitpid()\n\t * instead and loop (like the GUI). Also needed for other interfaces,\n\t * they might call system(). */\n# ifdef __NeXT__\n\twait_pid = wait4(child, status, WNOHANG, (struct rusage *)0);\n# else\n\twait_pid = waitpid(child, status, WNOHANG);\n# endif\n\tif (wait_pid == 0)\n\t{\n\t    /* Wait for 1 to 10 msec before trying again. */\n\t    mch_delay(delay_msec, TRUE);\n\t    if (++delay_msec > 10)\n\t\tdelay_msec = 10;\n\t    continue;\n\t}\n\tif (wait_pid <= 0\n# ifdef ECHILD\n\t\t&& errno == ECHILD\n# endif\n\t   )\n\t    break;\n    }\n    return wait_pid;\n}\n\n#if defined(FEAT_JOB_CHANNEL) || !defined(USE_SYSTEM) || defined(PROTO)\n/*\n * Parse \"cmd\" and put the white-separated parts in \"argv\".\n * \"argv\" is an allocated array with \"argc\" entries.\n * Returns FAIL when out of memory.\n */\n    int\nmch_parse_cmd(char_u *cmd, int use_shcf, char ***argv, int *argc)\n{\n    int\t\ti;\n    char_u\t*p;\n    int\t\tinquote;\n\n    /*\n     * Do this loop twice:\n     * 1: find number of arguments\n     * 2: separate them and build argv[]\n     */\n    for (i = 0; i < 2; ++i)\n    {\n\tp = skipwhite(cmd);\n\tinquote = FALSE;\n\t*argc = 0;\n\tfor (;;)\n\t{\n\t    if (i == 1)\n\t\t(*argv)[*argc] = (char *)p;\n\t    ++*argc;\n\t    while (*p != NUL && (inquote || (*p != ' ' && *p != TAB)))\n\t    {\n\t\tif (*p == '\"')\n\t\t    inquote = !inquote;\n\t\t++p;\n\t    }\n\t    if (*p == NUL)\n\t\tbreak;\n\t    if (i == 1)\n\t\t*p++ = NUL;\n\t    p = skipwhite(p);\n\t}\n\tif (*argv == NULL)\n\t{\n\t    if (use_shcf)\n\t    {\n\t\t/* Account for possible multiple args in p_shcf. */\n\t\tp = p_shcf;\n\t\tfor (;;)\n\t\t{\n\t\t    p = skiptowhite(p);\n\t\t    if (*p == NUL)\n\t\t\tbreak;\n\t\t    ++*argc;\n\t\t    p = skipwhite(p);\n\t\t}\n\t    }\n\n\t    *argv = (char **)alloc((unsigned)((*argc + 4) * sizeof(char *)));\n\t    if (*argv == NULL)\t    /* out of memory */\n\t\treturn FAIL;\n\t}\n    }\n    return OK;\n}\n#endif\n\n#if !defined(USE_SYSTEM) || defined(FEAT_JOB_CHANNEL)\n    static void\nset_child_environment(void)\n{\n# ifdef HAVE_SETENV\n    char\tenvbuf[50];\n# else\n    static char\tenvbuf_Rows[20];\n    static char\tenvbuf_Columns[20];\n# endif\n\n    /* Simulate to have a dumb terminal (for now) */\n# ifdef HAVE_SETENV\n    setenv(\"TERM\", \"dumb\", 1);\n    sprintf((char *)envbuf, \"%ld\", Rows);\n    setenv(\"ROWS\", (char *)envbuf, 1);\n    sprintf((char *)envbuf, \"%ld\", Rows);\n    setenv(\"LINES\", (char *)envbuf, 1);\n    sprintf((char *)envbuf, \"%ld\", Columns);\n    setenv(\"COLUMNS\", (char *)envbuf, 1);\n# else\n    /*\n     * Putenv does not copy the string, it has to remain valid.\n     * Use a static array to avoid losing allocated memory.\n     */\n    putenv(\"TERM=dumb\");\n    sprintf(envbuf_Rows, \"ROWS=%ld\", Rows);\n    putenv(envbuf_Rows);\n    sprintf(envbuf_Rows, \"LINES=%ld\", Rows);\n    putenv(envbuf_Rows);\n    sprintf(envbuf_Columns, \"COLUMNS=%ld\", Columns);\n    putenv(envbuf_Columns);\n# endif\n}\n#endif\n\n    int\nmch_call_shell(\n    char_u\t*cmd,\n    int\t\toptions)\t/* SHELL_*, see vim.h */\n{\n#ifdef VMS\n    char\t*ifn = NULL;\n    char\t*ofn = NULL;\n#endif\n    int\t\ttmode = cur_tmode;\n#ifdef USE_SYSTEM\t/* use system() to start the shell: simple but slow */\n    char_u\t*newcmd;\t/* only needed for unix */\n\n    out_flush();\n\n    if (options & SHELL_COOKED)\n\tsettmode(TMODE_COOK);\t    /* set to normal mode */\n\n# if defined(FEAT_CLIPBOARD) && defined(FEAT_X11)\n    save_clipboard();\n    loose_clipboard();\n# endif\n\n    if (cmd == NULL)\n\tx = system((char *)p_sh);\n    else\n    {\n# ifdef VMS\n\tif (ofn = strchr((char *)cmd, '>'))\n\t    *ofn++ = '\\0';\n\tif (ifn = strchr((char *)cmd, '<'))\n\t{\n\t    char *p;\n\n\t    *ifn++ = '\\0';\n\t    p = strchr(ifn,' '); /* chop off any trailing spaces */\n\t    if (p)\n\t\t*p = '\\0';\n\t}\n\tif (ofn)\n\t    x = vms_sys((char *)cmd, ofn, ifn);\n\telse\n\t    x = system((char *)cmd);\n# else\n\tnewcmd = lalloc(STRLEN(p_sh)\n\t\t+ (extra_shell_arg == NULL ? 0 : STRLEN(extra_shell_arg))\n\t\t+ STRLEN(p_shcf) + STRLEN(cmd) + 4, TRUE);\n\tif (newcmd == NULL)\n\t    x = 0;\n\telse\n\t{\n\t    sprintf((char *)newcmd, \"%s %s %s %s\", p_sh,\n\t\t    extra_shell_arg == NULL ? \"\" : (char *)extra_shell_arg,\n\t\t    (char *)p_shcf,\n\t\t    (char *)cmd);\n\t    x = system((char *)newcmd);\n\t    vim_free(newcmd);\n\t}\n# endif\n    }\n# ifdef VMS\n    x = vms_sys_status(x);\n# endif\n    if (emsg_silent)\n\t;\n    else if (x == 127)\n\tMSG_PUTS(_(\"\\nCannot execute shell sh\\n\"));\n    else if (x && !(options & SHELL_SILENT))\n    {\n\tMSG_PUTS(_(\"\\nshell returned \"));\n\tmsg_outnum((long)x);\n\tmsg_putchar('\\n');\n    }\n\n    if (tmode == TMODE_RAW)\n\tsettmode(TMODE_RAW);\t/* set to raw mode */\n# ifdef FEAT_TITLE\n    resettitle();\n# endif\n# if defined(FEAT_CLIPBOARD) && defined(FEAT_X11)\n    restore_clipboard();\n# endif\n    return x;\n\n#else /* USE_SYSTEM */\t    /* don't use system(), use fork()/exec() */\n\n# define EXEC_FAILED 122    /* Exit code when shell didn't execute.  Don't use\n\t\t\t       127, some shells use that already */\n\n    char_u\t*newcmd;\n    pid_t\tpid;\n    pid_t\twpid = 0;\n    pid_t\twait_pid = 0;\n# ifdef HAVE_UNION_WAIT\n    union wait\tstatus;\n# else\n    int\t\tstatus = -1;\n# endif\n    int\t\tretval = -1;\n    char\t**argv = NULL;\n    int\t\targc;\n    char_u\t*p_shcf_copy = NULL;\n    int\t\ti;\n    char_u\t*p;\n    int\t\tpty_master_fd = -1;\t    /* for pty's */\n# ifdef FEAT_GUI\n    int\t\tpty_slave_fd = -1;\n    char\t*tty_name;\n# endif\n    int\t\tfd_toshell[2];\t\t/* for pipes */\n    int\t\tfd_fromshell[2];\n    int\t\tpipe_error = FALSE;\n    int\t\tdid_settmode = FALSE;\t/* settmode(TMODE_RAW) called */\n\n    newcmd = vim_strsave(p_sh);\n    if (newcmd == NULL)\t\t/* out of memory */\n\tgoto error;\n\n    out_flush();\n    if (options & SHELL_COOKED)\n\tsettmode(TMODE_COOK);\t\t/* set to normal mode */\n\n    if (mch_parse_cmd(newcmd, TRUE, &argv, &argc) == FAIL)\n\tgoto error;\n\n    if (cmd != NULL)\n    {\n\tchar_u\t*s;\n\n\tif (extra_shell_arg != NULL)\n\t    argv[argc++] = (char *)extra_shell_arg;\n\n\t/* Break 'shellcmdflag' into white separated parts.  This doesn't\n\t * handle quoted strings, they are very unlikely to appear. */\n\tp_shcf_copy = alloc((unsigned)STRLEN(p_shcf) + 1);\n\tif (p_shcf_copy == NULL)    /* out of memory */\n\t    goto error;\n\ts = p_shcf_copy;\n\tp = p_shcf;\n\twhile (*p != NUL)\n\t{\n\t    argv[argc++] = (char *)s;\n\t    while (*p && *p != ' ' && *p != TAB)\n\t\t*s++ = *p++;\n\t    *s++ = NUL;\n\t    p = skipwhite(p);\n\t}\n\n\targv[argc++] = (char *)cmd;\n    }\n    argv[argc] = NULL;\n\n    /*\n     * For the GUI, when writing the output into the buffer and when reading\n     * input from the buffer: Try using a pseudo-tty to get the stdin/stdout\n     * of the executed command into the Vim window.  Or use a pipe.\n     */\n    if ((options & (SHELL_READ|SHELL_WRITE))\n# ifdef FEAT_GUI\n\t    || (gui.in_use && show_shell_mess)\n# endif\n\t\t    )\n    {\n# ifdef FEAT_GUI\n\t/*\n\t * Try to open a master pty.\n\t * If this works, open the slave pty.\n\t * If the slave can't be opened, close the master pty.\n\t */\n\tif (p_guipty && !(options & (SHELL_READ|SHELL_WRITE)))\n\t{\n\t    pty_master_fd = OpenPTY(&tty_name);\t    /* open pty */\n\t    if (pty_master_fd >= 0)\n\t    {\n\t\t/* Leaving out O_NOCTTY may lead to waitpid() always returning\n\t\t * 0 on Mac OS X 10.7 thereby causing freezes. Let's assume\n\t\t * adding O_NOCTTY always works when defined. */\n#ifdef O_NOCTTY\n\t\tpty_slave_fd = open(tty_name, O_RDWR | O_NOCTTY | O_EXTRA, 0);\n#else\n\t\tpty_slave_fd = open(tty_name, O_RDWR | O_EXTRA, 0);\n#endif\n\t\tif (pty_slave_fd < 0)\n\t\t{\n\t\t    close(pty_master_fd);\n\t\t    pty_master_fd = -1;\n\t\t}\n\t    }\n\t}\n\t/*\n\t * If not opening a pty or it didn't work, try using pipes.\n\t */\n\tif (pty_master_fd < 0)\n# endif\n\t{\n\t    pipe_error = (pipe(fd_toshell) < 0);\n\t    if (!pipe_error)\t\t\t    /* pipe create OK */\n\t    {\n\t\tpipe_error = (pipe(fd_fromshell) < 0);\n\t\tif (pipe_error)\t\t\t    /* pipe create failed */\n\t\t{\n\t\t    close(fd_toshell[0]);\n\t\t    close(fd_toshell[1]);\n\t\t}\n\t    }\n\t    if (pipe_error)\n\t    {\n\t\tMSG_PUTS(_(\"\\nCannot create pipes\\n\"));\n\t\tout_flush();\n\t    }\n\t}\n    }\n\n    if (!pipe_error)\t\t\t/* pty or pipe opened or not used */\n    {\n# ifdef __BEOS__\n\tbeos_cleanup_read_thread();\n# endif\n\n\tif ((pid = fork()) == -1)\t/* maybe we should use vfork() */\n\t{\n\t    MSG_PUTS(_(\"\\nCannot fork\\n\"));\n\t    if ((options & (SHELL_READ|SHELL_WRITE))\n# ifdef FEAT_GUI\n\t\t|| (gui.in_use && show_shell_mess)\n# endif\n\t\t    )\n\t    {\n# ifdef FEAT_GUI\n\t\tif (pty_master_fd >= 0)\t\t/* close the pseudo tty */\n\t\t{\n\t\t    close(pty_master_fd);\n\t\t    close(pty_slave_fd);\n\t\t}\n\t\telse\t\t\t\t/* close the pipes */\n# endif\n\t\t{\n\t\t    close(fd_toshell[0]);\n\t\t    close(fd_toshell[1]);\n\t\t    close(fd_fromshell[0]);\n\t\t    close(fd_fromshell[1]);\n\t\t}\n\t    }\n\t}\n\telse if (pid == 0)\t/* child */\n\t{\n\t    reset_signals();\t\t/* handle signals normally */\n\n\t    if (!show_shell_mess || (options & SHELL_EXPAND))\n\t    {\n\t\tint fd;\n\n\t\t/*\n\t\t * Don't want to show any message from the shell.  Can't just\n\t\t * close stdout and stderr though, because some systems will\n\t\t * break if you try to write to them after that, so we must\n\t\t * use dup() to replace them with something else -- webb\n\t\t * Connect stdin to /dev/null too, so \":n `cat`\" doesn't hang,\n\t\t * waiting for input.\n\t\t */\n\t\tfd = open(\"/dev/null\", O_RDWR | O_EXTRA, 0);\n\t\tfclose(stdin);\n\t\tfclose(stdout);\n\t\tfclose(stderr);\n\n\t\t/*\n\t\t * If any of these open()'s and dup()'s fail, we just continue\n\t\t * anyway.  It's not fatal, and on most systems it will make\n\t\t * no difference at all.  On a few it will cause the execvp()\n\t\t * to exit with a non-zero status even when the completion\n\t\t * could be done, which is nothing too serious.  If the open()\n\t\t * or dup() failed we'd just do the same thing ourselves\n\t\t * anyway -- webb\n\t\t */\n\t\tif (fd >= 0)\n\t\t{\n\t\t    ignored = dup(fd); /* To replace stdin  (fd 0) */\n\t\t    ignored = dup(fd); /* To replace stdout (fd 1) */\n\t\t    ignored = dup(fd); /* To replace stderr (fd 2) */\n\n\t\t    /* Don't need this now that we've duplicated it */\n\t\t    close(fd);\n\t\t}\n\t    }\n\t    else if ((options & (SHELL_READ|SHELL_WRITE))\n# ifdef FEAT_GUI\n\t\t    || gui.in_use\n# endif\n\t\t    )\n\t    {\n\n# ifdef HAVE_SETSID\n\t\t/* Create our own process group, so that the child and all its\n\t\t * children can be kill()ed.  Don't do this when using pipes,\n\t\t * because stdin is not a tty, we would lose /dev/tty. */\n\t\tif (p_stmp)\n\t\t{\n\t\t    (void)setsid();\n#  if defined(SIGHUP)\n\t\t    /* When doing \"!xterm&\" and 'shell' is bash: the shell\n\t\t     * will exit and send SIGHUP to all processes in its\n\t\t     * group, killing the just started process.  Ignore SIGHUP\n\t\t     * to avoid that. (suggested by Simon Schubert)\n\t\t     */\n\t\t    signal(SIGHUP, SIG_IGN);\n#  endif\n\t\t}\n# endif\n# ifdef FEAT_GUI\n\t\tif (pty_slave_fd >= 0)\n\t\t{\n\t\t    /* push stream discipline modules */\n\t\t    if (options & SHELL_COOKED)\n\t\t\tSetupSlavePTY(pty_slave_fd);\n#  ifdef TIOCSCTTY\n\t\t    /* Try to become controlling tty (probably doesn't work,\n\t\t     * unless run by root) */\n\t\t    ioctl(pty_slave_fd, TIOCSCTTY, (char *)NULL);\n#  endif\n\t\t}\n# endif\n\t\tset_child_environment();\n\n\t\t/*\n\t\t * stderr is only redirected when using the GUI, so that a\n\t\t * program like gpg can still access the terminal to get a\n\t\t * passphrase using stderr.\n\t\t */\n# ifdef FEAT_GUI\n\t\tif (pty_master_fd >= 0)\n\t\t{\n\t\t    close(pty_master_fd);   /* close master side of pty */\n\n\t\t    /* set up stdin/stdout/stderr for the child */\n\t\t    close(0);\n\t\t    ignored = dup(pty_slave_fd);\n\t\t    close(1);\n\t\t    ignored = dup(pty_slave_fd);\n\t\t    if (gui.in_use)\n\t\t    {\n\t\t\tclose(2);\n\t\t\tignored = dup(pty_slave_fd);\n\t\t    }\n\n\t\t    close(pty_slave_fd);    /* has been dupped, close it now */\n\t\t}\n\t\telse\n# endif\n\t\t{\n\t\t    /* set up stdin for the child */\n\t\t    close(fd_toshell[1]);\n\t\t    close(0);\n\t\t    ignored = dup(fd_toshell[0]);\n\t\t    close(fd_toshell[0]);\n\n\t\t    /* set up stdout for the child */\n\t\t    close(fd_fromshell[0]);\n\t\t    close(1);\n\t\t    ignored = dup(fd_fromshell[1]);\n\t\t    close(fd_fromshell[1]);\n\n# ifdef FEAT_GUI\n\t\t    if (gui.in_use)\n\t\t    {\n\t\t\t/* set up stderr for the child */\n\t\t\tclose(2);\n\t\t\tignored = dup(1);\n\t\t    }\n# endif\n\t\t}\n\t    }\n\n\t    /*\n\t     * There is no type cast for the argv, because the type may be\n\t     * different on different machines. This may cause a warning\n\t     * message with strict compilers, don't worry about it.\n\t     * Call _exit() instead of exit() to avoid closing the connection\n\t     * to the X server (esp. with GTK, which uses atexit()).\n\t     */\n\t    execvp(argv[0], argv);\n\t    _exit(EXEC_FAILED);\t    /* exec failed, return failure code */\n\t}\n\telse\t\t\t/* parent */\n\t{\n\t    /*\n\t     * While child is running, ignore terminating signals.\n\t     * Do catch CTRL-C, so that \"got_int\" is set.\n\t     */\n\t    catch_signals(SIG_IGN, SIG_ERR);\n\t    catch_int_signal();\n\n\t    /*\n\t     * For the GUI we redirect stdin, stdout and stderr to our window.\n\t     * This is also used to pipe stdin/stdout to/from the external\n\t     * command.\n\t     */\n\t    if ((options & (SHELL_READ|SHELL_WRITE))\n# ifdef FEAT_GUI\n\t\t    || (gui.in_use && show_shell_mess)\n# endif\n\t       )\n\t    {\n# define BUFLEN 100\t\t/* length for buffer, pseudo tty limit is 128 */\n\t\tchar_u\t    buffer[BUFLEN + 1];\n# ifdef FEAT_MBYTE\n\t\tint\t    buffer_off = 0;\t/* valid bytes in buffer[] */\n# endif\n\t\tchar_u\t    ta_buf[BUFLEN + 1];\t/* TypeAHead */\n\t\tint\t    ta_len = 0;\t\t/* valid bytes in ta_buf[] */\n\t\tint\t    len;\n\t\tint\t    p_more_save;\n\t\tint\t    old_State;\n\t\tint\t    c;\n\t\tint\t    toshell_fd;\n\t\tint\t    fromshell_fd;\n\t\tgarray_T    ga;\n\t\tint\t    noread_cnt;\n# if defined(HAVE_GETTIMEOFDAY) && defined(HAVE_SYS_TIME_H)\n\t\tstruct timeval  start_tv;\n# endif\n\n# ifdef FEAT_GUI\n\t\tif (pty_master_fd >= 0)\n\t\t{\n\t\t    fromshell_fd = pty_master_fd;\n\t\t    toshell_fd = dup(pty_master_fd);\n\t\t}\n\t\telse\n# endif\n\t\t{\n\t\t    close(fd_toshell[0]);\n\t\t    close(fd_fromshell[1]);\n\t\t    toshell_fd = fd_toshell[1];\n\t\t    fromshell_fd = fd_fromshell[0];\n\t\t}\n\n\t\t/*\n\t\t * Write to the child if there are typed characters.\n\t\t * Read from the child if there are characters available.\n\t\t *   Repeat the reading a few times if more characters are\n\t\t *   available. Need to check for typed keys now and then, but\n\t\t *   not too often (delays when no chars are available).\n\t\t * This loop is quit if no characters can be read from the pty\n\t\t * (WaitForChar detected special condition), or there are no\n\t\t * characters available and the child has exited.\n\t\t * Only check if the child has exited when there is no more\n\t\t * output. The child may exit before all the output has\n\t\t * been printed.\n\t\t *\n\t\t * Currently this busy loops!\n\t\t * This can probably dead-lock when the write blocks!\n\t\t */\n\t\tp_more_save = p_more;\n\t\tp_more = FALSE;\n\t\told_State = State;\n\t\tState = EXTERNCMD;\t/* don't redraw at window resize */\n\n\t\tif ((options & SHELL_WRITE) && toshell_fd >= 0)\n\t\t{\n\t\t    /* Fork a process that will write the lines to the\n\t\t     * external program. */\n\t\t    if ((wpid = fork()) == -1)\n\t\t    {\n\t\t\tMSG_PUTS(_(\"\\nCannot fork\\n\"));\n\t\t    }\n\t\t    else if (wpid == 0) /* child */\n\t\t    {\n\t\t\tlinenr_T    lnum = curbuf->b_op_start.lnum;\n\t\t\tint\t    written = 0;\n\t\t\tchar_u\t    *lp = ml_get(lnum);\n\t\t\tsize_t\t    l;\n\n\t\t\tclose(fromshell_fd);\n\t\t\tfor (;;)\n\t\t\t{\n\t\t\t    l = STRLEN(lp + written);\n\t\t\t    if (l == 0)\n\t\t\t\tlen = 0;\n\t\t\t    else if (lp[written] == NL)\n\t\t\t\t/* NL -> NUL translation */\n\t\t\t\tlen = write(toshell_fd, \"\", (size_t)1);\n\t\t\t    else\n\t\t\t    {\n\t\t\t\tchar_u\t*s = vim_strchr(lp + written, NL);\n\n\t\t\t\tlen = write(toshell_fd, (char *)lp + written,\n\t\t\t\t\t   s == NULL ? l\n\t\t\t\t\t      : (size_t)(s - (lp + written)));\n\t\t\t    }\n\t\t\t    if (len == (int)l)\n\t\t\t    {\n\t\t\t\t/* Finished a line, add a NL, unless this line\n\t\t\t\t * should not have one. */\n\t\t\t\tif (lnum != curbuf->b_op_end.lnum\n\t\t\t\t\t|| (!curbuf->b_p_bin\n\t\t\t\t\t    && curbuf->b_p_fixeol)\n\t\t\t\t\t|| (lnum != curbuf->b_no_eol_lnum\n\t\t\t\t\t    && (lnum !=\n\t\t\t\t\t\t    curbuf->b_ml.ml_line_count\n\t\t\t\t\t\t    || curbuf->b_p_eol)))\n\t\t\t\t    ignored = write(toshell_fd, \"\\n\",\n\t\t\t\t\t\t\t\t   (size_t)1);\n\t\t\t\t++lnum;\n\t\t\t\tif (lnum > curbuf->b_op_end.lnum)\n\t\t\t\t{\n\t\t\t\t    /* finished all the lines, close pipe */\n\t\t\t\t    close(toshell_fd);\n\t\t\t\t    toshell_fd = -1;\n\t\t\t\t    break;\n\t\t\t\t}\n\t\t\t\tlp = ml_get(lnum);\n\t\t\t\twritten = 0;\n\t\t\t    }\n\t\t\t    else if (len > 0)\n\t\t\t\twritten += len;\n\t\t\t}\n\t\t\t_exit(0);\n\t\t    }\n\t\t    else /* parent */\n\t\t    {\n\t\t\tclose(toshell_fd);\n\t\t\ttoshell_fd = -1;\n\t\t    }\n\t\t}\n\n\t\tif (options & SHELL_READ)\n\t\t    ga_init2(&ga, 1, BUFLEN);\n\n\t\tnoread_cnt = 0;\n# if defined(HAVE_GETTIMEOFDAY) && defined(HAVE_SYS_TIME_H)\n\t\tgettimeofday(&start_tv, NULL);\n# endif\n\t\tfor (;;)\n\t\t{\n\t\t    /*\n\t\t     * Check if keys have been typed, write them to the child\n\t\t     * if there are any.\n\t\t     * Don't do this if we are expanding wild cards (would eat\n\t\t     * typeahead).\n\t\t     * Don't do this when filtering and terminal is in cooked\n\t\t     * mode, the shell command will handle the I/O.  Avoids\n\t\t     * that a typed password is echoed for ssh or gpg command.\n\t\t     * Don't get characters when the child has already\n\t\t     * finished (wait_pid == 0).\n\t\t     * Don't read characters unless we didn't get output for a\n\t\t     * while (noread_cnt > 4), avoids that \":r !ls\" eats\n\t\t     * typeahead.\n\t\t     */\n\t\t    len = 0;\n\t\t    if (!(options & SHELL_EXPAND)\n\t\t\t    && ((options &\n\t\t\t\t\t (SHELL_READ|SHELL_WRITE|SHELL_COOKED))\n\t\t\t\t      != (SHELL_READ|SHELL_WRITE|SHELL_COOKED)\n# ifdef FEAT_GUI\n\t\t\t\t\t\t    || gui.in_use\n# endif\n\t\t\t\t\t\t    )\n\t\t\t    && wait_pid == 0\n\t\t\t    && (ta_len > 0 || noread_cnt > 4))\n\t\t    {\n\t\t      if (ta_len == 0)\n\t\t      {\n\t\t\t  /* Get extra characters when we don't have any.\n\t\t\t   * Reset the counter and timer. */\n\t\t\t  noread_cnt = 0;\n# if defined(HAVE_GETTIMEOFDAY) && defined(HAVE_SYS_TIME_H)\n\t\t\t  gettimeofday(&start_tv, NULL);\n# endif\n\t\t\t  len = ui_inchar(ta_buf, BUFLEN, 10L, 0);\n\t\t      }\n\t\t      if (ta_len > 0 || len > 0)\n\t\t      {\n\t\t\t/*\n\t\t\t * For pipes:\n\t\t\t * Check for CTRL-C: send interrupt signal to child.\n\t\t\t * Check for CTRL-D: EOF, close pipe to child.\n\t\t\t */\n\t\t\tif (len == 1 && (pty_master_fd < 0 || cmd != NULL))\n\t\t\t{\n# ifdef SIGINT\n\t\t\t    /*\n\t\t\t     * Send SIGINT to the child's group or all\n\t\t\t     * processes in our group.\n\t\t\t     */\n\t\t\t    if (ta_buf[ta_len] == Ctrl_C\n\t\t\t\t\t       || ta_buf[ta_len] == intr_char)\n\t\t\t    {\n#  ifdef HAVE_SETSID\n\t\t\t\tkill(-pid, SIGINT);\n#  else\n\t\t\t\tkill(0, SIGINT);\n#  endif\n\t\t\t\tif (wpid > 0)\n\t\t\t\t    kill(wpid, SIGINT);\n\t\t\t    }\n# endif\n\t\t\t    if (pty_master_fd < 0 && toshell_fd >= 0\n\t\t\t\t\t       && ta_buf[ta_len] == Ctrl_D)\n\t\t\t    {\n\t\t\t\tclose(toshell_fd);\n\t\t\t\ttoshell_fd = -1;\n\t\t\t    }\n\t\t\t}\n\n\t\t\t/* replace K_BS by <BS> and K_DEL by <DEL> */\n\t\t\tfor (i = ta_len; i < ta_len + len; ++i)\n\t\t\t{\n\t\t\t    if (ta_buf[i] == CSI && len - i > 2)\n\t\t\t    {\n\t\t\t\tc = TERMCAP2KEY(ta_buf[i + 1], ta_buf[i + 2]);\n\t\t\t\tif (c == K_DEL || c == K_KDEL || c == K_BS)\n\t\t\t\t{\n\t\t\t\t    mch_memmove(ta_buf + i + 1, ta_buf + i + 3,\n\t\t\t\t\t\t       (size_t)(len - i - 2));\n\t\t\t\t    if (c == K_DEL || c == K_KDEL)\n\t\t\t\t\tta_buf[i] = DEL;\n\t\t\t\t    else\n\t\t\t\t\tta_buf[i] = Ctrl_H;\n\t\t\t\t    len -= 2;\n\t\t\t\t}\n\t\t\t    }\n\t\t\t    else if (ta_buf[i] == '\\r')\n\t\t\t\tta_buf[i] = '\\n';\n# ifdef FEAT_MBYTE\n\t\t\t    if (has_mbyte)\n\t\t\t\ti += (*mb_ptr2len_len)(ta_buf + i,\n\t\t\t\t\t\t\tta_len + len - i) - 1;\n# endif\n\t\t\t}\n\n\t\t\t/*\n\t\t\t * For pipes: echo the typed characters.\n\t\t\t * For a pty this does not seem to work.\n\t\t\t */\n\t\t\tif (pty_master_fd < 0)\n\t\t\t{\n\t\t\t    for (i = ta_len; i < ta_len + len; ++i)\n\t\t\t    {\n\t\t\t\tif (ta_buf[i] == '\\n' || ta_buf[i] == '\\b')\n\t\t\t\t    msg_putchar(ta_buf[i]);\n# ifdef FEAT_MBYTE\n\t\t\t\telse if (has_mbyte)\n\t\t\t\t{\n\t\t\t\t    int l = (*mb_ptr2len)(ta_buf + i);\n\n\t\t\t\t    msg_outtrans_len(ta_buf + i, l);\n\t\t\t\t    i += l - 1;\n\t\t\t\t}\n# endif\n\t\t\t\telse\n\t\t\t\t    msg_outtrans_len(ta_buf + i, 1);\n\t\t\t    }\n\t\t\t    windgoto(msg_row, msg_col);\n\t\t\t    out_flush();\n\t\t\t}\n\n\t\t\tta_len += len;\n\n\t\t\t/*\n\t\t\t * Write the characters to the child, unless EOF has\n\t\t\t * been typed for pipes.  Write one character at a\n\t\t\t * time, to avoid losing too much typeahead.\n\t\t\t * When writing buffer lines, drop the typed\n\t\t\t * characters (only check for CTRL-C).\n\t\t\t */\n\t\t\tif (options & SHELL_WRITE)\n\t\t\t    ta_len = 0;\n\t\t\telse if (toshell_fd >= 0)\n\t\t\t{\n\t\t\t    len = write(toshell_fd, (char *)ta_buf, (size_t)1);\n\t\t\t    if (len > 0)\n\t\t\t    {\n\t\t\t\tta_len -= len;\n\t\t\t\tmch_memmove(ta_buf, ta_buf + len, ta_len);\n\t\t\t    }\n\t\t\t}\n\t\t      }\n\t\t    }\n\n\t\t    if (got_int)\n\t\t    {\n\t\t\t/* CTRL-C sends a signal to the child, we ignore it\n\t\t\t * ourselves */\n#  ifdef HAVE_SETSID\n\t\t\tkill(-pid, SIGINT);\n#  else\n\t\t\tkill(0, SIGINT);\n#  endif\n\t\t\tif (wpid > 0)\n\t\t\t    kill(wpid, SIGINT);\n\t\t\tgot_int = FALSE;\n\t\t    }\n\n\t\t    /*\n\t\t     * Check if the child has any characters to be printed.\n\t\t     * Read them and write them to our window.\tRepeat this as\n\t\t     * long as there is something to do, avoid the 10ms wait\n\t\t     * for mch_inchar(), or sending typeahead characters to\n\t\t     * the external process.\n\t\t     * TODO: This should handle escape sequences, compatible\n\t\t     * to some terminal (vt52?).\n\t\t     */\n\t\t    ++noread_cnt;\n\t\t    while (RealWaitForChar(fromshell_fd, 10L, NULL, NULL))\n\t\t    {\n\t\t\tlen = read_eintr(fromshell_fd, buffer\n# ifdef FEAT_MBYTE\n\t\t\t\t+ buffer_off, (size_t)(BUFLEN - buffer_off)\n# else\n\t\t\t\t, (size_t)BUFLEN\n# endif\n\t\t\t\t);\n\t\t\tif (len <= 0)\t\t    /* end of file or error */\n\t\t\t    goto finished;\n\n\t\t\tnoread_cnt = 0;\n\t\t\tif (options & SHELL_READ)\n\t\t\t{\n\t\t\t    /* Do NUL -> NL translation, append NL separated\n\t\t\t     * lines to the current buffer. */\n\t\t\t    for (i = 0; i < len; ++i)\n\t\t\t    {\n\t\t\t\tif (buffer[i] == NL)\n\t\t\t\t    append_ga_line(&ga);\n\t\t\t\telse if (buffer[i] == NUL)\n\t\t\t\t    ga_append(&ga, NL);\n\t\t\t\telse\n\t\t\t\t    ga_append(&ga, buffer[i]);\n\t\t\t    }\n\t\t\t}\n# ifdef FEAT_MBYTE\n\t\t\telse if (has_mbyte)\n\t\t\t{\n\t\t\t    int\t\tl;\n\n\t\t\t    len += buffer_off;\n\t\t\t    buffer[len] = NUL;\n\n\t\t\t    /* Check if the last character in buffer[] is\n\t\t\t     * incomplete, keep these bytes for the next\n\t\t\t     * round. */\n\t\t\t    for (p = buffer; p < buffer + len; p += l)\n\t\t\t    {\n\t\t\t\tl = MB_CPTR2LEN(p);\n\t\t\t\tif (l == 0)\n\t\t\t\t    l = 1;  /* NUL byte? */\n\t\t\t\telse if (MB_BYTE2LEN(*p) != l)\n\t\t\t\t    break;\n\t\t\t    }\n\t\t\t    if (p == buffer)\t/* no complete character */\n\t\t\t    {\n\t\t\t\t/* avoid getting stuck at an illegal byte */\n\t\t\t\tif (len >= 12)\n\t\t\t\t    ++p;\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t    buffer_off = len;\n\t\t\t\t    continue;\n\t\t\t\t}\n\t\t\t    }\n\t\t\t    c = *p;\n\t\t\t    *p = NUL;\n\t\t\t    msg_puts(buffer);\n\t\t\t    if (p < buffer + len)\n\t\t\t    {\n\t\t\t\t*p = c;\n\t\t\t\tbuffer_off = (buffer + len) - p;\n\t\t\t\tmch_memmove(buffer, p, buffer_off);\n\t\t\t\tcontinue;\n\t\t\t    }\n\t\t\t    buffer_off = 0;\n\t\t\t}\n# endif /* FEAT_MBYTE */\n\t\t\telse\n\t\t\t{\n\t\t\t    buffer[len] = NUL;\n\t\t\t    msg_puts(buffer);\n\t\t\t}\n\n\t\t\twindgoto(msg_row, msg_col);\n\t\t\tcursor_on();\n\t\t\tout_flush();\n\t\t\tif (got_int)\n\t\t\t    break;\n\n# if defined(HAVE_GETTIMEOFDAY) && defined(HAVE_SYS_TIME_H)\n\t\t\tif (wait_pid == 0)\n\t\t\t{\n\t\t\t    long\t    msec = elapsed(&start_tv);\n\n\t\t\t    /* Avoid that we keep looping here without\n\t\t\t     * checking for a CTRL-C for a long time.  Don't\n\t\t\t     * break out too often to avoid losing typeahead. */\n\t\t\t    if (msec > 2000)\n\t\t\t    {\n\t\t\t\tnoread_cnt = 5;\n\t\t\t\tbreak;\n\t\t\t    }\n\t\t\t}\n# endif\n\t\t    }\n\n\t\t    /* If we already detected the child has finished, continue\n\t\t     * reading output for a short while.  Some text may be\n\t\t     * buffered. */\n\t\t    if (wait_pid == pid)\n\t\t    {\n\t\t\tif (noread_cnt < 5)\n\t\t\t    continue;\n\t\t\tbreak;\n\t\t    }\n\n\t\t    /*\n\t\t     * Check if the child still exists, before checking for\n\t\t     * typed characters (otherwise we would lose typeahead).\n\t\t     */\n# ifdef __NeXT__\n\t\t    wait_pid = wait4(pid, &status, WNOHANG, (struct rusage *)0);\n# else\n\t\t    wait_pid = waitpid(pid, &status, WNOHANG);\n# endif\n\t\t    if ((wait_pid == (pid_t)-1 && errno == ECHILD)\n\t\t\t    || (wait_pid == pid && WIFEXITED(status)))\n\t\t    {\n\t\t\t/* Don't break the loop yet, try reading more\n\t\t\t * characters from \"fromshell_fd\" first.  When using\n\t\t\t * pipes there might still be something to read and\n\t\t\t * then we'll break the loop at the \"break\" above. */\n\t\t\twait_pid = pid;\n\t\t    }\n\t\t    else\n\t\t\twait_pid = 0;\n\n# if defined(FEAT_XCLIPBOARD) && defined(FEAT_X11)\n\t\t    /* Handle any X events, e.g. serving the clipboard. */\n\t\t    clip_update();\n# endif\n\t\t}\nfinished:\n\t\tp_more = p_more_save;\n\t\tif (options & SHELL_READ)\n\t\t{\n\t\t    if (ga.ga_len > 0)\n\t\t    {\n\t\t\tappend_ga_line(&ga);\n\t\t\t/* remember that the NL was missing */\n\t\t\tcurbuf->b_no_eol_lnum = curwin->w_cursor.lnum;\n\t\t    }\n\t\t    else\n\t\t\tcurbuf->b_no_eol_lnum = 0;\n\t\t    ga_clear(&ga);\n\t\t}\n\n\t\t/*\n\t\t * Give all typeahead that wasn't used back to ui_inchar().\n\t\t */\n\t\tif (ta_len)\n\t\t    ui_inchar_undo(ta_buf, ta_len);\n\t\tState = old_State;\n\t\tif (toshell_fd >= 0)\n\t\t    close(toshell_fd);\n\t\tclose(fromshell_fd);\n\t    }\n# if defined(FEAT_XCLIPBOARD) && defined(FEAT_X11)\n\t    else\n\t    {\n\t\tlong delay_msec = 1;\n\n\t\t/*\n\t\t * Similar to the loop above, but only handle X events, no\n\t\t * I/O.\n\t\t */\n\t\tfor (;;)\n\t\t{\n\t\t    if (got_int)\n\t\t    {\n\t\t\t/* CTRL-C sends a signal to the child, we ignore it\n\t\t\t * ourselves */\n#  ifdef HAVE_SETSID\n\t\t\tkill(-pid, SIGINT);\n#  else\n\t\t\tkill(0, SIGINT);\n#  endif\n\t\t\tgot_int = FALSE;\n\t\t    }\n# ifdef __NeXT__\n\t\t    wait_pid = wait4(pid, &status, WNOHANG, (struct rusage *)0);\n# else\n\t\t    wait_pid = waitpid(pid, &status, WNOHANG);\n# endif\n\t\t    if ((wait_pid == (pid_t)-1 && errno == ECHILD)\n\t\t\t    || (wait_pid == pid && WIFEXITED(status)))\n\t\t    {\n\t\t\twait_pid = pid;\n\t\t\tbreak;\n\t\t    }\n\n\t\t    /* Handle any X events, e.g. serving the clipboard. */\n\t\t    clip_update();\n\n\t\t    /* Wait for 1 to 10 msec. 1 is faster but gives the child\n\t\t     * less time. */\n\t\t    mch_delay(delay_msec, TRUE);\n\t\t    if (++delay_msec > 10)\n\t\t\tdelay_msec = 10;\n\t\t}\n\t    }\n# endif\n\n\t    /*\n\t     * Wait until our child has exited.\n\t     * Ignore wait() returning pids of other children and returning\n\t     * because of some signal like SIGWINCH.\n\t     * Don't wait if wait_pid was already set above, indicating the\n\t     * child already exited.\n\t     */\n\t    if (wait_pid != pid)\n\t\twait_pid = wait4pid(pid, &status);\n\n# ifdef FEAT_GUI\n\t    /* Close slave side of pty.  Only do this after the child has\n\t     * exited, otherwise the child may hang when it tries to write on\n\t     * the pty. */\n\t    if (pty_master_fd >= 0)\n\t\tclose(pty_slave_fd);\n# endif\n\n\t    /* Make sure the child that writes to the external program is\n\t     * dead. */\n\t    if (wpid > 0)\n\t    {\n\t\tkill(wpid, SIGKILL);\n\t\twait4pid(wpid, NULL);\n\t    }\n\n\t    /*\n\t     * Set to raw mode right now, otherwise a CTRL-C after\n\t     * catch_signals() will kill Vim.\n\t     */\n\t    if (tmode == TMODE_RAW)\n\t\tsettmode(TMODE_RAW);\n\t    did_settmode = TRUE;\n\t    set_signals();\n\n\t    if (WIFEXITED(status))\n\t    {\n\t\t/* LINTED avoid \"bitwise operation on signed value\" */\n\t\tretval = WEXITSTATUS(status);\n\t\tif (retval != 0 && !emsg_silent)\n\t\t{\n\t\t    if (retval == EXEC_FAILED)\n\t\t    {\n\t\t\tMSG_PUTS(_(\"\\nCannot execute shell \"));\n\t\t\tmsg_outtrans(p_sh);\n\t\t\tmsg_putchar('\\n');\n\t\t    }\n\t\t    else if (!(options & SHELL_SILENT))\n\t\t    {\n\t\t\tMSG_PUTS(_(\"\\nshell returned \"));\n\t\t\tmsg_outnum((long)retval);\n\t\t\tmsg_putchar('\\n');\n\t\t    }\n\t\t}\n\t    }\n\t    else\n\t\tMSG_PUTS(_(\"\\nCommand terminated\\n\"));\n\t}\n    }\n    vim_free(argv);\n    vim_free(p_shcf_copy);\n\nerror:\n    if (!did_settmode)\n\tif (tmode == TMODE_RAW)\n\t    settmode(TMODE_RAW);\t/* set to raw mode */\n# ifdef FEAT_TITLE\n    resettitle();\n# endif\n    vim_free(newcmd);\n\n    return retval;\n\n#endif /* USE_SYSTEM */\n}\n\n#if defined(FEAT_JOB_CHANNEL) || defined(PROTO)\n    void\nmch_start_job(char **argv, job_T *job, jobopt_T *options UNUSED)\n{\n    pid_t\tpid;\n    int\t\tfd_in[2];\t/* for stdin */\n    int\t\tfd_out[2];\t/* for stdout */\n    int\t\tfd_err[2];\t/* for stderr */\n    channel_T\t*channel = NULL;\n    int\t\tuse_null_for_in = options->jo_io[PART_IN] == JIO_NULL;\n    int\t\tuse_null_for_out = options->jo_io[PART_OUT] == JIO_NULL;\n    int\t\tuse_null_for_err = options->jo_io[PART_ERR] == JIO_NULL;\n    int\t\tuse_file_for_in = options->jo_io[PART_IN] == JIO_FILE;\n    int\t\tuse_file_for_out = options->jo_io[PART_OUT] == JIO_FILE;\n    int\t\tuse_file_for_err = options->jo_io[PART_ERR] == JIO_FILE;\n    int\t\tuse_out_for_err = options->jo_io[PART_ERR] == JIO_OUT;\n\n    if (use_out_for_err && use_null_for_out)\n\tuse_null_for_err = TRUE;\n\n    /* default is to fail */\n    job->jv_status = JOB_FAILED;\n    fd_in[0] = -1;\n    fd_in[1] = -1;\n    fd_out[0] = -1;\n    fd_out[1] = -1;\n    fd_err[0] = -1;\n    fd_err[1] = -1;\n\n    /* TODO: without the channel feature connect the child to /dev/null? */\n    /* Open pipes for stdin, stdout, stderr. */\n    if (use_file_for_in)\n    {\n\tchar_u *fname = options->jo_io_name[PART_IN];\n\n\tfd_in[0] = mch_open((char *)fname, O_RDONLY, 0);\n\tif (fd_in[0] < 0)\n\t{\n\t    EMSG2(_(e_notopen), fname);\n\t    goto failed;\n\t}\n    }\n    else if (!use_null_for_in && pipe(fd_in) < 0)\n\tgoto failed;\n\n    if (use_file_for_out)\n    {\n\tchar_u *fname = options->jo_io_name[PART_OUT];\n\n\tfd_out[1] = mch_open((char *)fname, O_WRONLY | O_CREAT | O_TRUNC, 0644);\n\tif (fd_out[1] < 0)\n\t{\n\t    EMSG2(_(e_notopen), fname);\n\t    goto failed;\n\t}\n    }\n    else if (!use_null_for_out && pipe(fd_out) < 0)\n\tgoto failed;\n\n    if (use_file_for_err)\n    {\n\tchar_u *fname = options->jo_io_name[PART_ERR];\n\n\tfd_err[1] = mch_open((char *)fname, O_WRONLY | O_CREAT | O_TRUNC, 0600);\n\tif (fd_err[1] < 0)\n\t{\n\t    EMSG2(_(e_notopen), fname);\n\t    goto failed;\n\t}\n    }\n    else if (!use_out_for_err && !use_null_for_err && pipe(fd_err) < 0)\n\tgoto failed;\n\n    if (!use_null_for_in || !use_null_for_out || !use_null_for_err)\n    {\n\tif (options->jo_set & JO_CHANNEL)\n\t{\n\t    channel = options->jo_channel;\n\t    if (channel != NULL)\n\t\t++channel->ch_refcount;\n\t}\n\telse\n\t    channel = add_channel();\n\tif (channel == NULL)\n\t    goto failed;\n    }\n\n    pid = fork();\t/* maybe we should use vfork() */\n    if (pid  == -1)\n    {\n\t/* failed to fork */\n\tgoto failed;\n    }\n\n    if (pid == 0)\n    {\n\tint\tnull_fd = -1;\n\tint\tstderr_works = TRUE;\n\n\t/* child */\n\treset_signals();\t\t/* handle signals normally */\n\n# ifdef HAVE_SETSID\n\t/* Create our own process group, so that the child and all its\n\t * children can be kill()ed.  Don't do this when using pipes,\n\t * because stdin is not a tty, we would lose /dev/tty. */\n\t(void)setsid();\n# endif\n\n\tset_child_environment();\n\n\tif (use_null_for_in || use_null_for_out || use_null_for_err)\n\t    null_fd = open(\"/dev/null\", O_RDWR | O_EXTRA, 0);\n\n\t/* set up stdin for the child */\n\tif (use_null_for_in && null_fd >= 0)\n\t{\n\t    close(0);\n\t    ignored = dup(null_fd);\n\t}\n\telse\n\t{\n\t    if (!use_file_for_in)\n\t\tclose(fd_in[1]);\n\t    close(0);\n\t    ignored = dup(fd_in[0]);\n\t    close(fd_in[0]);\n\t}\n\n\t/* set up stderr for the child */\n\tif (use_null_for_err && null_fd >= 0)\n\t{\n\t    close(2);\n\t    ignored = dup(null_fd);\n\t    stderr_works = FALSE;\n\t}\n\telse if (use_out_for_err)\n\t{\n\t    close(2);\n\t    ignored = dup(fd_out[1]);\n\t}\n\telse\n\t{\n\t    if (!use_file_for_err)\n\t\tclose(fd_err[0]);\n\t    close(2);\n\t    ignored = dup(fd_err[1]);\n\t    close(fd_err[1]);\n\t}\n\n\t/* set up stdout for the child */\n\tif (use_null_for_out && null_fd >= 0)\n\t{\n\t    close(1);\n\t    ignored = dup(null_fd);\n\t}\n\telse\n\t{\n\t    if (!use_file_for_out)\n\t\tclose(fd_out[0]);\n\t    close(1);\n\t    ignored = dup(fd_out[1]);\n\t    close(fd_out[1]);\n\t}\n\n\tif (null_fd >= 0)\n\t    close(null_fd);\n\n\t/* See above for type of argv. */\n\texecvp(argv[0], argv);\n\n\tif (stderr_works)\n\t    perror(\"executing job failed\");\n#ifdef EXITFREE\n\t/* calling free_all_mem() here causes problems. Ignore valgrind\n\t * reporting possibly leaked memory. */\n#endif\n\t_exit(EXEC_FAILED);\t    /* exec failed, return failure code */\n    }\n\n    /* parent */\n    job->jv_pid = pid;\n    job->jv_status = JOB_STARTED;\n    job->jv_channel = channel;  /* ch_refcount was set above */\n\n    /* child stdin, stdout and stderr */\n    if (!use_file_for_in && fd_in[0] >= 0)\n\tclose(fd_in[0]);\n    if (!use_file_for_out && fd_out[1] >= 0)\n\tclose(fd_out[1]);\n    if (!use_out_for_err && !use_file_for_err && fd_err[1] >= 0)\n\tclose(fd_err[1]);\n    if (channel != NULL)\n    {\n\tchannel_set_pipes(channel,\n\t\t      use_file_for_in || use_null_for_in\n\t\t\t\t\t\t      ? INVALID_FD : fd_in[1],\n\t\t      use_file_for_out || use_null_for_out\n\t\t\t\t\t\t     ? INVALID_FD : fd_out[0],\n\t\t      use_out_for_err || use_file_for_err || use_null_for_err\n\t\t\t\t\t\t    ? INVALID_FD : fd_err[0]);\n\tchannel_set_job(channel, job, options);\n    }\n\n    /* success! */\n    return;\n\nfailed:\n    channel_unref(channel);\n    if (fd_in[0] >= 0)\n\tclose(fd_in[0]);\n    if (fd_in[1] >= 0)\n\tclose(fd_in[1]);\n    if (fd_out[0] >= 0)\n\tclose(fd_out[0]);\n    if (fd_out[1] >= 0)\n\tclose(fd_out[1]);\n    if (fd_err[0] >= 0)\n\tclose(fd_err[0]);\n    if (fd_err[1] >= 0)\n\tclose(fd_err[1]);\n}\n\n    char *\nmch_job_status(job_T *job)\n{\n# ifdef HAVE_UNION_WAIT\n    union wait\tstatus;\n# else\n    int\t\tstatus = -1;\n# endif\n    pid_t\twait_pid = 0;\n\n# ifdef __NeXT__\n    wait_pid = wait4(job->jv_pid, &status, WNOHANG, (struct rusage *)0);\n# else\n    wait_pid = waitpid(job->jv_pid, &status, WNOHANG);\n# endif\n    if (wait_pid == -1)\n    {\n\t/* process must have exited */\n\tjob->jv_status = JOB_ENDED;\n\treturn \"dead\";\n    }\n    if (wait_pid == 0)\n\treturn \"run\";\n    if (WIFEXITED(status))\n    {\n\t/* LINTED avoid \"bitwise operation on signed value\" */\n\tjob->jv_exitval = WEXITSTATUS(status);\n\tjob->jv_status = JOB_ENDED;\n\treturn \"dead\";\n    }\n    if (WIFSIGNALED(status))\n    {\n\tjob->jv_exitval = -1;\n\tjob->jv_status = JOB_ENDED;\n\treturn \"dead\";\n    }\n    return \"run\";\n}\n\n    int\nmch_stop_job(job_T *job, char_u *how)\n{\n    int\t    sig = -1;\n    pid_t   job_pid;\n\n    if (*how == NUL || STRCMP(how, \"term\") == 0)\n\tsig = SIGTERM;\n    else if (STRCMP(how, \"hup\") == 0)\n\tsig = SIGHUP;\n    else if (STRCMP(how, \"quit\") == 0)\n\tsig = SIGQUIT;\n    else if (STRCMP(how, \"int\") == 0)\n\tsig = SIGINT;\n    else if (STRCMP(how, \"kill\") == 0)\n\tsig = SIGKILL;\n    else if (isdigit(*how))\n\tsig = atoi((char *)how);\n    else\n\treturn FAIL;\n\n    /* TODO: have an option to only kill the process, not the group? */\n    job_pid = job->jv_pid;\n    if (job_pid == getpgid(job_pid))\n\tjob_pid = -job_pid;\n\n    kill(job_pid, sig);\n\n    return OK;\n}\n\n/*\n * Clear the data related to \"job\".\n */\n    void\nmch_clear_job(job_T *job)\n{\n    /* call waitpid because child process may become zombie */\n# ifdef __NeXT__\n    (void)wait4(job->jv_pid, NULL, WNOHANG, (struct rusage *)0);\n# else\n    (void)waitpid(job->jv_pid, NULL, WNOHANG);\n# endif\n}\n#endif\n\n/*\n * Check for CTRL-C typed by reading all available characters.\n * In cooked mode we should get SIGINT, no need to check.\n */\n    void\nmch_breakcheck(void)\n{\n    if (curr_tmode == TMODE_RAW && RealWaitForChar(read_cmd_fd, 0L, NULL, NULL))\n\tfill_input_buf(FALSE);\n}\n\n/*\n * Wait \"msec\" msec until a character is available from the mouse, keyboard,\n * from inbuf[].\n * \"msec\" == -1 will block forever.\n * Invokes timer callbacks when needed.\n * \"interrupted\" (if not NULL) is set to TRUE when no character is available\n * but something else needs to be done.\n * Returns TRUE when a character is available.\n * When a GUI is being used, this will never get called -- webb\n */\n    static int\nWaitForChar(long msec, int *interrupted)\n{\n#ifdef FEAT_TIMERS\n    long    due_time;\n    long    remaining = msec;\n    int\t    tb_change_cnt = typebuf.tb_change_cnt;\n\n    /* When waiting very briefly don't trigger timers. */\n    if (msec >= 0 && msec < 10L)\n\treturn WaitForCharOrMouse(msec, NULL);\n\n    while (msec < 0 || remaining > 0)\n    {\n\t/* Trigger timers and then get the time in msec until the next one is\n\t * due.  Wait up to that time. */\n\tdue_time = check_due_timer();\n\tif (typebuf.tb_change_cnt != tb_change_cnt)\n\t{\n\t    /* timer may have used feedkeys() */\n\t    return FALSE;\n\t}\n\tif (due_time <= 0 || (msec > 0 && due_time > remaining))\n\t    due_time = remaining;\n\tif (WaitForCharOrMouse(due_time, interrupted))\n\t    return TRUE;\n\tif (interrupted != NULL && *interrupted)\n\t    /* Nothing available, but need to return so that side effects get\n\t     * handled, such as handling a message on a channel. */\n\t    return FALSE;\n\tif (msec > 0)\n\t    remaining -= due_time;\n    }\n    return FALSE;\n#else\n    return WaitForCharOrMouse(msec, interrupted);\n#endif\n}\n\n/*\n * Wait \"msec\" msec until a character is available from the mouse or keyboard\n * or from inbuf[].\n * \"msec\" == -1 will block forever.\n * \"interrupted\" (if not NULL) is set to TRUE when no character is available\n * but something else needs to be done.\n * When a GUI is being used, this will never get called -- webb\n */\n    static int\nWaitForCharOrMouse(long msec, int *interrupted)\n{\n#ifdef FEAT_MOUSE_GPM\n    int\t\tgpm_process_wanted;\n#endif\n#ifdef FEAT_XCLIPBOARD\n    int\t\trest;\n#endif\n    int\t\tavail;\n\n    if (input_available())\t    /* something in inbuf[] */\n\treturn 1;\n\n#if defined(FEAT_MOUSE_DEC)\n    /* May need to query the mouse position. */\n    if (WantQueryMouse)\n    {\n\tWantQueryMouse = FALSE;\n\tmch_write((char_u *)IF_EB(\"\\033[1'|\", ESC_STR \"[1'|\"), 5);\n    }\n#endif\n\n    /*\n     * For FEAT_MOUSE_GPM and FEAT_XCLIPBOARD we loop here to process mouse\n     * events.  This is a bit complicated, because they might both be defined.\n     */\n#if defined(FEAT_MOUSE_GPM) || defined(FEAT_XCLIPBOARD)\n# ifdef FEAT_XCLIPBOARD\n    rest = 0;\n    if (do_xterm_trace())\n\trest = msec;\n# endif\n    do\n    {\n# ifdef FEAT_XCLIPBOARD\n\tif (rest != 0)\n\t{\n\t    msec = XT_TRACE_DELAY;\n\t    if (rest >= 0 && rest < XT_TRACE_DELAY)\n\t\tmsec = rest;\n\t    if (rest >= 0)\n\t\trest -= msec;\n\t}\n# endif\n# ifdef FEAT_MOUSE_GPM\n\tgpm_process_wanted = 0;\n\tavail = RealWaitForChar(read_cmd_fd, msec,\n\t\t\t\t\t     &gpm_process_wanted, interrupted);\n# else\n\tavail = RealWaitForChar(read_cmd_fd, msec, NULL, interrupted);\n# endif\n\tif (!avail)\n\t{\n\t    if (input_available())\n\t\treturn 1;\n# ifdef FEAT_XCLIPBOARD\n\t    if (rest == 0 || !do_xterm_trace())\n# endif\n\t\tbreak;\n\t}\n    }\n    while (FALSE\n# ifdef FEAT_MOUSE_GPM\n\t   || (gpm_process_wanted && mch_gpm_process() == 0)\n# endif\n# ifdef FEAT_XCLIPBOARD\n\t   || (!avail && rest != 0)\n# endif\n\t  )\n\t;\n\n#else\n    avail = RealWaitForChar(read_cmd_fd, msec, NULL, interrupted);\n#endif\n    return avail;\n}\n\n#ifndef VMS\n/*\n * Wait \"msec\" msec until a character is available from file descriptor \"fd\".\n * \"msec\" == 0 will check for characters once.\n * \"msec\" == -1 will block until a character is available.\n * When a GUI is being used, this will not be used for input -- webb\n * Or when a Linux GPM mouse event is waiting.\n * Or when a clientserver message is on the queue.\n * \"interrupted\" (if not NULL) is set to TRUE when no character is available\n * but something else needs to be done.\n */\n#if defined(__BEOS__)\n    int\n#else\n    static int\n#endif\nRealWaitForChar(int fd, long msec, int *check_for_gpm UNUSED, int *interrupted)\n{\n    int\t\tret;\n    int\t\tresult;\n#if defined(FEAT_XCLIPBOARD) || defined(USE_XSMP) || defined(FEAT_MZSCHEME)\n    static int\tbusy = FALSE;\n\n    /* May retry getting characters after an event was handled. */\n# define MAY_LOOP\n\n# if defined(HAVE_GETTIMEOFDAY) && defined(HAVE_SYS_TIME_H)\n    /* Remember at what time we started, so that we know how much longer we\n     * should wait after being interrupted. */\n#  define USE_START_TV\n    long\t    start_msec = msec;\n    struct timeval  start_tv;\n\n    if (msec > 0)\n\tgettimeofday(&start_tv, NULL);\n# endif\n\n    /* Handle being called recursively.  This may happen for the session\n     * manager stuff, it may save the file, which does a breakcheck. */\n    if (busy)\n\treturn 0;\n#endif\n\n#ifdef MAY_LOOP\n    for (;;)\n#endif\n    {\n#ifdef MAY_LOOP\n\tint\t\tfinished = TRUE; /* default is to 'loop' just once */\n# ifdef FEAT_MZSCHEME\n\tint\t\tmzquantum_used = FALSE;\n# endif\n#endif\n#ifndef HAVE_SELECT\n\t\t\t/* each channel may use in, out and err */\n\tstruct pollfd   fds[6 + 3 * MAX_OPEN_CHANNELS];\n\tint\t\tnfd;\n# ifdef FEAT_XCLIPBOARD\n\tint\t\txterm_idx = -1;\n# endif\n# ifdef FEAT_MOUSE_GPM\n\tint\t\tgpm_idx = -1;\n# endif\n# ifdef USE_XSMP\n\tint\t\txsmp_idx = -1;\n# endif\n\tint\t\ttowait = (int)msec;\n\n# ifdef FEAT_MZSCHEME\n\tmzvim_check_threads();\n\tif (mzthreads_allowed() && p_mzq > 0 && (msec < 0 || msec > p_mzq))\n\t{\n\t    towait = (int)p_mzq;    /* don't wait longer than 'mzquantum' */\n\t    mzquantum_used = TRUE;\n\t}\n# endif\n\tfds[0].fd = fd;\n\tfds[0].events = POLLIN;\n\tnfd = 1;\n\n# ifdef FEAT_XCLIPBOARD\n\tmay_restore_clipboard();\n\tif (xterm_Shell != (Widget)0)\n\t{\n\t    xterm_idx = nfd;\n\t    fds[nfd].fd = ConnectionNumber(xterm_dpy);\n\t    fds[nfd].events = POLLIN;\n\t    nfd++;\n\t}\n# endif\n# ifdef FEAT_MOUSE_GPM\n\tif (check_for_gpm != NULL && gpm_flag && gpm_fd >= 0)\n\t{\n\t    gpm_idx = nfd;\n\t    fds[nfd].fd = gpm_fd;\n\t    fds[nfd].events = POLLIN;\n\t    nfd++;\n\t}\n# endif\n# ifdef USE_XSMP\n\tif (xsmp_icefd != -1)\n\t{\n\t    xsmp_idx = nfd;\n\t    fds[nfd].fd = xsmp_icefd;\n\t    fds[nfd].events = POLLIN;\n\t    nfd++;\n\t}\n# endif\n#ifdef FEAT_JOB_CHANNEL\n\tnfd = channel_poll_setup(nfd, &fds);\n#endif\n\tif (interrupted != NULL)\n\t    *interrupted = FALSE;\n\n\tret = poll(fds, nfd, towait);\n\n\tresult = ret > 0 && (fds[0].revents & POLLIN);\n\tif (result == 0 && interrupted != NULL && ret > 0)\n\t    *interrupted = TRUE;\n\n# ifdef FEAT_MZSCHEME\n\tif (ret == 0 && mzquantum_used)\n\t    /* MzThreads scheduling is required and timeout occurred */\n\t    finished = FALSE;\n# endif\n\n# ifdef FEAT_XCLIPBOARD\n\tif (xterm_Shell != (Widget)0 && (fds[xterm_idx].revents & POLLIN))\n\t{\n\t    xterm_update();      /* Maybe we should hand out clipboard */\n\t    if (--ret == 0 && !input_available())\n\t\t/* Try again */\n\t\tfinished = FALSE;\n\t}\n# endif\n# ifdef FEAT_MOUSE_GPM\n\tif (gpm_idx >= 0 && (fds[gpm_idx].revents & POLLIN))\n\t{\n\t    *check_for_gpm = 1;\n\t}\n# endif\n# ifdef USE_XSMP\n\tif (xsmp_idx >= 0 && (fds[xsmp_idx].revents & (POLLIN | POLLHUP)))\n\t{\n\t    if (fds[xsmp_idx].revents & POLLIN)\n\t    {\n\t\tbusy = TRUE;\n\t\txsmp_handle_requests();\n\t\tbusy = FALSE;\n\t    }\n\t    else if (fds[xsmp_idx].revents & POLLHUP)\n\t    {\n\t\tif (p_verbose > 0)\n\t\t    verb_msg((char_u *)_(\"XSMP lost ICE connection\"));\n\t\txsmp_close();\n\t    }\n\t    if (--ret == 0)\n\t\tfinished = FALSE;\t/* Try again */\n\t}\n# endif\n#ifdef FEAT_JOB_CHANNEL\n\tif (ret > 0)\n\t    ret = channel_poll_check(ret, &fds);\n#endif\n\n#else /* HAVE_SELECT */\n\n\tstruct timeval  tv;\n\tstruct timeval\t*tvp;\n\tfd_set\t\trfds, wfds, efds;\n\tint\t\tmaxfd;\n\tlong\t\ttowait = msec;\n\n# ifdef FEAT_MZSCHEME\n\tmzvim_check_threads();\n\tif (mzthreads_allowed() && p_mzq > 0 && (msec < 0 || msec > p_mzq))\n\t{\n\t    towait = p_mzq;\t/* don't wait longer than 'mzquantum' */\n\t    mzquantum_used = TRUE;\n\t}\n# endif\n\n\tif (towait >= 0)\n\t{\n\t    tv.tv_sec = towait / 1000;\n\t    tv.tv_usec = (towait % 1000) * (1000000/1000);\n\t    tvp = &tv;\n\t}\n\telse\n\t    tvp = NULL;\n\n\t/*\n\t * Select on ready for reading and exceptional condition (end of file).\n\t */\nselect_eintr:\n\tFD_ZERO(&rfds);\n\tFD_ZERO(&wfds);\n\tFD_ZERO(&efds);\n\tFD_SET(fd, &rfds);\n# if !defined(__QNX__) && !defined(__CYGWIN32__)\n\t/* For QNX select() always returns 1 if this is set.  Why? */\n\tFD_SET(fd, &efds);\n# endif\n\tmaxfd = fd;\n\n# ifdef FEAT_XCLIPBOARD\n\tmay_restore_clipboard();\n\tif (xterm_Shell != (Widget)0)\n\t{\n\t    FD_SET(ConnectionNumber(xterm_dpy), &rfds);\n\t    if (maxfd < ConnectionNumber(xterm_dpy))\n\t\tmaxfd = ConnectionNumber(xterm_dpy);\n\n\t    /* An event may have already been read but not handled.  In\n\t     * particulary, XFlush may cause this. */\n\t    xterm_update();\n\t}\n# endif\n# ifdef FEAT_MOUSE_GPM\n\tif (check_for_gpm != NULL && gpm_flag && gpm_fd >= 0)\n\t{\n\t    FD_SET(gpm_fd, &rfds);\n\t    FD_SET(gpm_fd, &efds);\n\t    if (maxfd < gpm_fd)\n\t\tmaxfd = gpm_fd;\n\t}\n# endif\n# ifdef USE_XSMP\n\tif (xsmp_icefd != -1)\n\t{\n\t    FD_SET(xsmp_icefd, &rfds);\n\t    FD_SET(xsmp_icefd, &efds);\n\t    if (maxfd < xsmp_icefd)\n\t\tmaxfd = xsmp_icefd;\n\t}\n# endif\n# ifdef FEAT_JOB_CHANNEL\n\tmaxfd = channel_select_setup(maxfd, &rfds, &wfds);\n# endif\n\tif (interrupted != NULL)\n\t    *interrupted = FALSE;\n\n\tret = select(maxfd + 1, &rfds, &wfds, &efds, tvp);\n\tresult = ret > 0 && FD_ISSET(fd, &rfds);\n\tif (result)\n\t    --ret;\n\telse if (interrupted != NULL && ret > 0)\n\t    *interrupted = TRUE;\n\n# ifdef EINTR\n\tif (ret == -1 && errno == EINTR)\n\t{\n\t    /* Check whether window has been resized, EINTR may be caused by\n\t     * SIGWINCH. */\n\t    if (do_resize)\n\t\thandle_resize();\n\n\t    /* Interrupted by a signal, need to try again.  We ignore msec\n\t     * here, because we do want to check even after a timeout if\n\t     * characters are available.  Needed for reading output of an\n\t     * external command after the process has finished. */\n\t    goto select_eintr;\n\t}\n# endif\n# ifdef __TANDEM\n\tif (ret == -1 && errno == ENOTSUP)\n\t{\n\t    FD_ZERO(&rfds);\n\t    FD_ZERO(&efds);\n\t    ret = 0;\n\t}\n# endif\n# ifdef FEAT_MZSCHEME\n\tif (ret == 0 && mzquantum_used)\n\t    /* loop if MzThreads must be scheduled and timeout occurred */\n\t    finished = FALSE;\n# endif\n\n# ifdef FEAT_XCLIPBOARD\n\tif (ret > 0 && xterm_Shell != (Widget)0\n\t\t&& FD_ISSET(ConnectionNumber(xterm_dpy), &rfds))\n\t{\n\t    xterm_update();\t      /* Maybe we should hand out clipboard */\n\t    /* continue looping when we only got the X event and the input\n\t     * buffer is empty */\n\t    if (--ret == 0 && !input_available())\n\t    {\n\t\t/* Try again */\n\t\tfinished = FALSE;\n\t    }\n\t}\n# endif\n# ifdef FEAT_MOUSE_GPM\n\tif (ret > 0 && gpm_flag && check_for_gpm != NULL && gpm_fd >= 0)\n\t{\n\t    if (FD_ISSET(gpm_fd, &efds))\n\t\tgpm_close();\n\t    else if (FD_ISSET(gpm_fd, &rfds))\n\t\t*check_for_gpm = 1;\n\t}\n# endif\n# ifdef USE_XSMP\n\tif (ret > 0 && xsmp_icefd != -1)\n\t{\n\t    if (FD_ISSET(xsmp_icefd, &efds))\n\t    {\n\t\tif (p_verbose > 0)\n\t\t    verb_msg((char_u *)_(\"XSMP lost ICE connection\"));\n\t\txsmp_close();\n\t\tif (--ret == 0)\n\t\t    finished = FALSE;   /* keep going if event was only one */\n\t    }\n\t    else if (FD_ISSET(xsmp_icefd, &rfds))\n\t    {\n\t\tbusy = TRUE;\n\t\txsmp_handle_requests();\n\t\tbusy = FALSE;\n\t\tif (--ret == 0)\n\t\t    finished = FALSE;   /* keep going if event was only one */\n\t    }\n\t}\n# endif\n#ifdef FEAT_JOB_CHANNEL\n\tif (ret > 0)\n\t    ret = channel_select_check(ret, &rfds, &wfds);\n#endif\n\n#endif /* HAVE_SELECT */\n\n#ifdef MAY_LOOP\n\tif (finished || msec == 0)\n\t    break;\n\n# ifdef FEAT_CLIENTSERVER\n\tif (server_waiting())\n\t    break;\n# endif\n\n\t/* We're going to loop around again, find out for how long */\n\tif (msec > 0)\n\t{\n# ifdef USE_START_TV\n\t    /* Compute remaining wait time. */\n\t    msec = start_msec - elapsed(&start_tv);\n# else\n\t    /* Guess we got interrupted halfway. */\n\t    msec = msec / 2;\n# endif\n\t    if (msec <= 0)\n\t\tbreak;\t/* waited long enough */\n\t}\n#endif\n    }\n\n    return result;\n}\n\n#ifndef NO_EXPANDPATH\n/*\n * Expand a path into all matching files and/or directories.  Handles \"*\",\n * \"?\", \"[a-z]\", \"**\", etc.\n * \"path\" has backslashes before chars that are not to be expanded.\n * Returns the number of matches found.\n */\n    int\nmch_expandpath(\n    garray_T\t*gap,\n    char_u\t*path,\n    int\t\tflags)\t\t/* EW_* flags */\n{\n    return unix_expandpath(gap, path, 0, flags, FALSE);\n}\n#endif\n\n/*\n * mch_expand_wildcards() - this code does wild-card pattern matching using\n * the shell\n *\n * return OK for success, FAIL for error (you may lose some memory) and put\n * an error message in *file.\n *\n * num_pat is number of input patterns\n * pat is array of pointers to input patterns\n * num_file is pointer to number of matched file names\n * file is pointer to array of pointers to matched file names\n */\n\n#ifndef SEEK_SET\n# define SEEK_SET 0\n#endif\n#ifndef SEEK_END\n# define SEEK_END 2\n#endif\n\n#define SHELL_SPECIAL (char_u *)\"\\t \\\"&'$;<>()\\\\|\"\n\n    int\nmch_expand_wildcards(\n    int\t\t   num_pat,\n    char_u\t **pat,\n    int\t\t  *num_file,\n    char_u\t***file,\n    int\t\t   flags)\t/* EW_* flags */\n{\n    int\t\ti;\n    size_t\tlen;\n    char_u\t*p;\n    int\t\tdir;\n\n    /*\n     * This is the non-OS/2 implementation (really Unix).\n     */\n    int\t\tj;\n    char_u\t*tempname;\n    char_u\t*command;\n    FILE\t*fd;\n    char_u\t*buffer;\n#define STYLE_ECHO\t0\t/* use \"echo\", the default */\n#define STYLE_GLOB\t1\t/* use \"glob\", for csh */\n#define STYLE_VIMGLOB\t2\t/* use \"vimglob\", for Posix sh */\n#define STYLE_PRINT\t3\t/* use \"print -N\", for zsh */\n#define STYLE_BT\t4\t/* `cmd` expansion, execute the pattern\n\t\t\t\t * directly */\n    int\t\tshell_style = STYLE_ECHO;\n    int\t\tcheck_spaces;\n    static int\tdid_find_nul = FALSE;\n    int\t\tampersent = FALSE;\n\t\t/* vimglob() function to define for Posix shell */\n    static char *sh_vimglob_func = \"vimglob() { while [ $# -ge 1 ]; do echo \\\"$1\\\"; shift; done }; vimglob >\";\n\n    *num_file = 0;\t/* default: no files found */\n    *file = NULL;\n\n    /*\n     * If there are no wildcards, just copy the names to allocated memory.\n     * Saves a lot of time, because we don't have to start a new shell.\n     */\n    if (!have_wildcard(num_pat, pat))\n\treturn save_patterns(num_pat, pat, num_file, file);\n\n# ifdef HAVE_SANDBOX\n    /* Don't allow any shell command in the sandbox. */\n    if (sandbox != 0 && check_secure())\n\treturn FAIL;\n# endif\n\n    /*\n     * Don't allow the use of backticks in secure and restricted mode.\n     */\n    if (secure || restricted)\n\tfor (i = 0; i < num_pat; ++i)\n\t    if (vim_strchr(pat[i], '`') != NULL\n\t\t    && (check_restricted() || check_secure()))\n\t\treturn FAIL;\n\n    /*\n     * get a name for the temp file\n     */\n    if ((tempname = vim_tempname('o', FALSE)) == NULL)\n    {\n\tEMSG(_(e_notmp));\n\treturn FAIL;\n    }\n\n    /*\n     * Let the shell expand the patterns and write the result into the temp\n     * file.\n     * STYLE_BT:\tNL separated\n     *\t    If expanding `cmd` execute it directly.\n     * STYLE_GLOB:\tNUL separated\n     *\t    If we use *csh, \"glob\" will work better than \"echo\".\n     * STYLE_PRINT:\tNL or NUL separated\n     *\t    If we use *zsh, \"print -N\" will work better than \"glob\".\n     * STYLE_VIMGLOB:\tNL separated\n     *\t    If we use *sh*, we define \"vimglob()\".\n     * STYLE_ECHO:\tspace separated.\n     *\t    A shell we don't know, stay safe and use \"echo\".\n     */\n    if (num_pat == 1 && *pat[0] == '`'\n\t    && (len = STRLEN(pat[0])) > 2\n\t    && *(pat[0] + len - 1) == '`')\n\tshell_style = STYLE_BT;\n    else if ((len = STRLEN(p_sh)) >= 3)\n    {\n\tif (STRCMP(p_sh + len - 3, \"csh\") == 0)\n\t    shell_style = STYLE_GLOB;\n\telse if (STRCMP(p_sh + len - 3, \"zsh\") == 0)\n\t    shell_style = STYLE_PRINT;\n    }\n    if (shell_style == STYLE_ECHO && strstr((char *)gettail(p_sh),\n\t\t\t\t\t\t\t\t\"sh\") != NULL)\n\tshell_style = STYLE_VIMGLOB;\n\n    /* Compute the length of the command.  We need 2 extra bytes: for the\n     * optional '&' and for the NUL.\n     * Worst case: \"unset nonomatch; print -N >\" plus two is 29 */\n    len = STRLEN(tempname) + 29;\n    if (shell_style == STYLE_VIMGLOB)\n\tlen += STRLEN(sh_vimglob_func);\n\n    for (i = 0; i < num_pat; ++i)\n    {\n\t/* Count the length of the patterns in the same way as they are put in\n\t * \"command\" below. */\n#ifdef USE_SYSTEM\n\tlen += STRLEN(pat[i]) + 3;\t/* add space and two quotes */\n#else\n\t++len;\t\t\t\t/* add space */\n\tfor (j = 0; pat[i][j] != NUL; ++j)\n\t{\n\t    if (vim_strchr(SHELL_SPECIAL, pat[i][j]) != NULL)\n\t\t++len;\t\t/* may add a backslash */\n\t    ++len;\n\t}\n#endif\n    }\n    command = alloc(len);\n    if (command == NULL)\n    {\n\t/* out of memory */\n\tvim_free(tempname);\n\treturn FAIL;\n    }\n\n    /*\n     * Build the shell command:\n     * - Set $nonomatch depending on EW_NOTFOUND (hopefully the shell\n     *\t recognizes this).\n     * - Add the shell command to print the expanded names.\n     * - Add the temp file name.\n     * - Add the file name patterns.\n     */\n    if (shell_style == STYLE_BT)\n    {\n\t/* change `command; command& ` to (command; command ) */\n\tSTRCPY(command, \"(\");\n\tSTRCAT(command, pat[0] + 1);\t\t/* exclude first backtick */\n\tp = command + STRLEN(command) - 1;\n\t*p-- = ')';\t\t\t\t/* remove last backtick */\n\twhile (p > command && vim_iswhite(*p))\n\t    --p;\n\tif (*p == '&')\t\t\t\t/* remove trailing '&' */\n\t{\n\t    ampersent = TRUE;\n\t    *p = ' ';\n\t}\n\tSTRCAT(command, \">\");\n    }\n    else\n    {\n\tif (flags & EW_NOTFOUND)\n\t    STRCPY(command, \"set nonomatch; \");\n\telse\n\t    STRCPY(command, \"unset nonomatch; \");\n\tif (shell_style == STYLE_GLOB)\n\t    STRCAT(command, \"glob >\");\n\telse if (shell_style == STYLE_PRINT)\n\t    STRCAT(command, \"print -N >\");\n\telse if (shell_style == STYLE_VIMGLOB)\n\t    STRCAT(command, sh_vimglob_func);\n\telse\n\t    STRCAT(command, \"echo >\");\n    }\n\n    STRCAT(command, tempname);\n\n    if (shell_style != STYLE_BT)\n\tfor (i = 0; i < num_pat; ++i)\n\t{\n\t    /* When using system() always add extra quotes, because the shell\n\t     * is started twice.  Otherwise put a backslash before special\n\t     * characters, except inside ``. */\n#ifdef USE_SYSTEM\n\t    STRCAT(command, \" \\\"\");\n\t    STRCAT(command, pat[i]);\n\t    STRCAT(command, \"\\\"\");\n#else\n\t    int intick = FALSE;\n\n\t    p = command + STRLEN(command);\n\t    *p++ = ' ';\n\t    for (j = 0; pat[i][j] != NUL; ++j)\n\t    {\n\t\tif (pat[i][j] == '`')\n\t\t    intick = !intick;\n\t\telse if (pat[i][j] == '\\\\' && pat[i][j + 1] != NUL)\n\t\t{\n\t\t    /* Remove a backslash, take char literally.  But keep\n\t\t     * backslash inside backticks, before a special character\n\t\t     * and before a backtick. */\n\t\t    if (intick\n\t\t\t  || vim_strchr(SHELL_SPECIAL, pat[i][j + 1]) != NULL\n\t\t\t  || pat[i][j + 1] == '`')\n\t\t\t*p++ = '\\\\';\n\t\t    ++j;\n\t\t}\n\t\telse if (!intick\n\t\t\t && ((flags & EW_KEEPDOLLAR) == 0 || pat[i][j] != '$')\n\t\t\t      && vim_strchr(SHELL_SPECIAL, pat[i][j]) != NULL)\n\t\t    /* Put a backslash before a special character, but not\n\t\t     * when inside ``. And not for $var when EW_KEEPDOLLAR is\n\t\t     * set. */\n\t\t    *p++ = '\\\\';\n\n\t\t/* Copy one character. */\n\t\t*p++ = pat[i][j];\n\t    }\n\t    *p = NUL;\n#endif\n\t}\n    if (flags & EW_SILENT)\n\tshow_shell_mess = FALSE;\n    if (ampersent)\n\tSTRCAT(command, \"&\");\t\t/* put the '&' after the redirection */\n\n    /*\n     * Using zsh -G: If a pattern has no matches, it is just deleted from\n     * the argument list, otherwise zsh gives an error message and doesn't\n     * expand any other pattern.\n     */\n    if (shell_style == STYLE_PRINT)\n\textra_shell_arg = (char_u *)\"-G\";   /* Use zsh NULL_GLOB option */\n\n    /*\n     * If we use -f then shell variables set in .cshrc won't get expanded.\n     * vi can do it, so we will too, but it is only necessary if there is a \"$\"\n     * in one of the patterns, otherwise we can still use the fast option.\n     */\n    else if (shell_style == STYLE_GLOB && !have_dollars(num_pat, pat))\n\textra_shell_arg = (char_u *)\"-f\";\t/* Use csh fast option */\n\n    /*\n     * execute the shell command\n     */\n    i = call_shell(command, SHELL_EXPAND | SHELL_SILENT);\n\n    /* When running in the background, give it some time to create the temp\n     * file, but don't wait for it to finish. */\n    if (ampersent)\n\tmch_delay(10L, TRUE);\n\n    extra_shell_arg = NULL;\t\t/* cleanup */\n    show_shell_mess = TRUE;\n    vim_free(command);\n\n    if (i != 0)\t\t\t\t/* mch_call_shell() failed */\n    {\n\tmch_remove(tempname);\n\tvim_free(tempname);\n\t/*\n\t * With interactive completion, the error message is not printed.\n\t * However with USE_SYSTEM, I don't know how to turn off error messages\n\t * from the shell, so screen may still get messed up -- webb.\n\t */\n#ifndef USE_SYSTEM\n\tif (!(flags & EW_SILENT))\n#endif\n\t{\n\t    redraw_later_clear();\t/* probably messed up screen */\n\t    msg_putchar('\\n');\t\t/* clear bottom line quickly */\n\t    cmdline_row = Rows - 1;\t/* continue on last line */\n#ifdef USE_SYSTEM\n\t    if (!(flags & EW_SILENT))\n#endif\n\t    {\n\t\tMSG(_(e_wildexpand));\n\t\tmsg_start();\t\t/* don't overwrite this message */\n\t    }\n\t}\n\t/* If a `cmd` expansion failed, don't list `cmd` as a match, even when\n\t * EW_NOTFOUND is given */\n\tif (shell_style == STYLE_BT)\n\t    return FAIL;\n\tgoto notfound;\n    }\n\n    /*\n     * read the names from the file into memory\n     */\n    fd = fopen((char *)tempname, READBIN);\n    if (fd == NULL)\n    {\n\t/* Something went wrong, perhaps a file name with a special char. */\n\tif (!(flags & EW_SILENT))\n\t{\n\t    MSG(_(e_wildexpand));\n\t    msg_start();\t\t/* don't overwrite this message */\n\t}\n\tvim_free(tempname);\n\tgoto notfound;\n    }\n    fseek(fd, 0L, SEEK_END);\n    len = ftell(fd);\t\t\t/* get size of temp file */\n    fseek(fd, 0L, SEEK_SET);\n    buffer = alloc(len + 1);\n    if (buffer == NULL)\n    {\n\t/* out of memory */\n\tmch_remove(tempname);\n\tvim_free(tempname);\n\tfclose(fd);\n\treturn FAIL;\n    }\n    i = fread((char *)buffer, 1, len, fd);\n    fclose(fd);\n    mch_remove(tempname);\n    if (i != (int)len)\n    {\n\t/* unexpected read error */\n\tEMSG2(_(e_notread), tempname);\n\tvim_free(tempname);\n\tvim_free(buffer);\n\treturn FAIL;\n    }\n    vim_free(tempname);\n\n# if defined(__CYGWIN__) || defined(__CYGWIN32__)\n    /* Translate <CR><NL> into <NL>.  Caution, buffer may contain NUL. */\n    p = buffer;\n    for (i = 0; i < (int)len; ++i)\n\tif (!(buffer[i] == CAR && buffer[i + 1] == NL))\n\t    *p++ = buffer[i];\n    len = p - buffer;\n# endif\n\n\n    /* file names are separated with Space */\n    if (shell_style == STYLE_ECHO)\n    {\n\tbuffer[len] = '\\n';\t\t/* make sure the buffer ends in NL */\n\tp = buffer;\n\tfor (i = 0; *p != '\\n'; ++i)\t/* count number of entries */\n\t{\n\t    while (*p != ' ' && *p != '\\n')\n\t\t++p;\n\t    p = skipwhite(p);\t\t/* skip to next entry */\n\t}\n    }\n    /* file names are separated with NL */\n    else if (shell_style == STYLE_BT || shell_style == STYLE_VIMGLOB)\n    {\n\tbuffer[len] = NUL;\t\t/* make sure the buffer ends in NUL */\n\tp = buffer;\n\tfor (i = 0; *p != NUL; ++i)\t/* count number of entries */\n\t{\n\t    while (*p != '\\n' && *p != NUL)\n\t\t++p;\n\t    if (*p != NUL)\n\t\t++p;\n\t    p = skipwhite(p);\t\t/* skip leading white space */\n\t}\n    }\n    /* file names are separated with NUL */\n    else\n    {\n\t/*\n\t * Some versions of zsh use spaces instead of NULs to separate\n\t * results.  Only do this when there is no NUL before the end of the\n\t * buffer, otherwise we would never be able to use file names with\n\t * embedded spaces when zsh does use NULs.\n\t * When we found a NUL once, we know zsh is OK, set did_find_nul and\n\t * don't check for spaces again.\n\t */\n\tcheck_spaces = FALSE;\n\tif (shell_style == STYLE_PRINT && !did_find_nul)\n\t{\n\t    /* If there is a NUL, set did_find_nul, else set check_spaces */\n\t    buffer[len] = NUL;\n\t    if (len && (int)STRLEN(buffer) < (int)len)\n\t\tdid_find_nul = TRUE;\n\t    else\n\t\tcheck_spaces = TRUE;\n\t}\n\n\t/*\n\t * Make sure the buffer ends with a NUL.  For STYLE_PRINT there\n\t * already is one, for STYLE_GLOB it needs to be added.\n\t */\n\tif (len && buffer[len - 1] == NUL)\n\t    --len;\n\telse\n\t    buffer[len] = NUL;\n\ti = 0;\n\tfor (p = buffer; p < buffer + len; ++p)\n\t    if (*p == NUL || (*p == ' ' && check_spaces))   /* count entry */\n\t    {\n\t\t++i;\n\t\t*p = NUL;\n\t    }\n\tif (len)\n\t    ++i;\t\t\t/* count last entry */\n    }\n    if (i == 0)\n    {\n\t/*\n\t * Can happen when using /bin/sh and typing \":e $NO_SUCH_VAR^I\".\n\t * /bin/sh will happily expand it to nothing rather than returning an\n\t * error; and hey, it's good to check anyway -- webb.\n\t */\n\tvim_free(buffer);\n\tgoto notfound;\n    }\n    *num_file = i;\n    *file = (char_u **)alloc(sizeof(char_u *) * i);\n    if (*file == NULL)\n    {\n\t/* out of memory */\n\tvim_free(buffer);\n\treturn FAIL;\n    }\n\n    /*\n     * Isolate the individual file names.\n     */\n    p = buffer;\n    for (i = 0; i < *num_file; ++i)\n    {\n\t(*file)[i] = p;\n\t/* Space or NL separates */\n\tif (shell_style == STYLE_ECHO || shell_style == STYLE_BT\n\t\t\t\t\t      || shell_style == STYLE_VIMGLOB)\n\t{\n\t    while (!(shell_style == STYLE_ECHO && *p == ' ')\n\t\t\t\t\t\t   && *p != '\\n' && *p != NUL)\n\t\t++p;\n\t    if (p == buffer + len)\t\t/* last entry */\n\t\t*p = NUL;\n\t    else\n\t    {\n\t\t*p++ = NUL;\n\t\tp = skipwhite(p);\t\t/* skip to next entry */\n\t    }\n\t}\n\telse\t\t/* NUL separates */\n\t{\n\t    while (*p && p < buffer + len)\t/* skip entry */\n\t\t++p;\n\t    ++p;\t\t\t\t/* skip NUL */\n\t}\n    }\n\n    /*\n     * Move the file names to allocated memory.\n     */\n    for (j = 0, i = 0; i < *num_file; ++i)\n    {\n\t/* Require the files to exist.\tHelps when using /bin/sh */\n\tif (!(flags & EW_NOTFOUND) && mch_getperm((*file)[i]) < 0)\n\t    continue;\n\n\t/* check if this entry should be included */\n\tdir = (mch_isdir((*file)[i]));\n\tif ((dir && !(flags & EW_DIR)) || (!dir && !(flags & EW_FILE)))\n\t    continue;\n\n\t/* Skip files that are not executable if we check for that. */\n\tif (!dir && (flags & EW_EXEC)\n\t\t    && !mch_can_exe((*file)[i], NULL, !(flags & EW_SHELLCMD)))\n\t    continue;\n\n\tp = alloc((unsigned)(STRLEN((*file)[i]) + 1 + dir));\n\tif (p)\n\t{\n\t    STRCPY(p, (*file)[i]);\n\t    if (dir)\n\t\tadd_pathsep(p);\t    /* add '/' to a directory name */\n\t    (*file)[j++] = p;\n\t}\n    }\n    vim_free(buffer);\n    *num_file = j;\n\n    if (*num_file == 0)\t    /* rejected all entries */\n    {\n\tvim_free(*file);\n\t*file = NULL;\n\tgoto notfound;\n    }\n\n    return OK;\n\nnotfound:\n    if (flags & EW_NOTFOUND)\n\treturn save_patterns(num_pat, pat, num_file, file);\n    return FAIL;\n}\n\n#endif /* VMS */\n\n    static int\nsave_patterns(\n    int\t\tnum_pat,\n    char_u\t**pat,\n    int\t\t*num_file,\n    char_u\t***file)\n{\n    int\t\ti;\n    char_u\t*s;\n\n    *file = (char_u **)alloc(num_pat * sizeof(char_u *));\n    if (*file == NULL)\n\treturn FAIL;\n    for (i = 0; i < num_pat; i++)\n    {\n\ts = vim_strsave(pat[i]);\n\tif (s != NULL)\n\t    /* Be compatible with expand_filename(): halve the number of\n\t     * backslashes. */\n\t    backslash_halve(s);\n\t(*file)[i] = s;\n    }\n    *num_file = num_pat;\n    return OK;\n}\n\n/*\n * Return TRUE if the string \"p\" contains a wildcard that mch_expandpath() can\n * expand.\n */\n    int\nmch_has_exp_wildcard(char_u *p)\n{\n    for ( ; *p; mb_ptr_adv(p))\n    {\n\tif (*p == '\\\\' && p[1] != NUL)\n\t    ++p;\n\telse\n\t    if (vim_strchr((char_u *)\n#ifdef VMS\n\t\t\t\t    \"*?%\"\n#else\n\t\t\t\t    \"*?[{'\"\n#endif\n\t\t\t\t\t\t, *p) != NULL)\n\t    return TRUE;\n    }\n    return FALSE;\n}\n\n/*\n * Return TRUE if the string \"p\" contains a wildcard.\n * Don't recognize '~' at the end as a wildcard.\n */\n    int\nmch_has_wildcard(char_u *p)\n{\n    for ( ; *p; mb_ptr_adv(p))\n    {\n\tif (*p == '\\\\' && p[1] != NUL)\n\t    ++p;\n\telse\n\t    if (vim_strchr((char_u *)\n#ifdef VMS\n\t\t\t\t    \"*?%$\"\n#else\n\t\t\t\t    \"*?[{`'$\"\n#endif\n\t\t\t\t\t\t, *p) != NULL\n\t\t|| (*p == '~' && p[1] != NUL))\n\t    return TRUE;\n    }\n    return FALSE;\n}\n\n    static int\nhave_wildcard(int num, char_u **file)\n{\n    int\t    i;\n\n    for (i = 0; i < num; i++)\n\tif (mch_has_wildcard(file[i]))\n\t    return 1;\n    return 0;\n}\n\n    static int\nhave_dollars(int num, char_u **file)\n{\n    int\t    i;\n\n    for (i = 0; i < num; i++)\n\tif (vim_strchr(file[i], '$') != NULL)\n\t    return TRUE;\n    return FALSE;\n}\n\n#if !defined(HAVE_RENAME) || defined(PROTO)\n/*\n * Scaled-down version of rename(), which is missing in Xenix.\n * This version can only move regular files and will fail if the\n * destination exists.\n */\n    int\nmch_rename(const char *src, const char *dest)\n{\n    struct stat\t    st;\n\n    if (stat(dest, &st) >= 0)\t    /* fail if destination exists */\n\treturn -1;\n    if (link(src, dest) != 0)\t    /* link file to new name */\n\treturn -1;\n    if (mch_remove(src) == 0)\t    /* delete link to old name */\n\treturn 0;\n    return -1;\n}\n#endif /* !HAVE_RENAME */\n\n#ifdef FEAT_MOUSE_GPM\n/*\n * Initializes connection with gpm (if it isn't already opened)\n * Return 1 if succeeded (or connection already opened), 0 if failed\n */\n    static int\ngpm_open(void)\n{\n    static Gpm_Connect gpm_connect; /* Must it be kept till closing ? */\n\n    if (!gpm_flag)\n    {\n\tgpm_connect.eventMask = (GPM_UP | GPM_DRAG | GPM_DOWN);\n\tgpm_connect.defaultMask = ~GPM_HARD;\n\t/* Default handling for mouse move*/\n\tgpm_connect.minMod = 0; /* Handle any modifier keys */\n\tgpm_connect.maxMod = 0xffff;\n\tif (Gpm_Open(&gpm_connect, 0) > 0)\n\t{\n\t    /* gpm library tries to handling TSTP causes\n\t     * problems. Anyways, we close connection to Gpm whenever\n\t     * we are going to suspend or starting an external process\n\t     * so we shouldn't  have problem with this\n\t     */\n# ifdef SIGTSTP\n\t    signal(SIGTSTP, restricted ? SIG_IGN : SIG_DFL);\n# endif\n\t    return 1; /* succeed */\n\t}\n\tif (gpm_fd == -2)\n\t    Gpm_Close(); /* We don't want to talk to xterm via gpm */\n\treturn 0;\n    }\n    return 1; /* already open */\n}\n\n/*\n * Closes connection to gpm\n */\n    static void\ngpm_close(void)\n{\n    if (gpm_flag && gpm_fd >= 0) /* if Open */\n\tGpm_Close();\n}\n\n/* Reads gpm event and adds special keys to input buf. Returns length of\n * generated key sequence.\n * This function is styled after gui_send_mouse_event().\n */\n    static int\nmch_gpm_process(void)\n{\n    int\t\t\tbutton;\n    static Gpm_Event\tgpm_event;\n    char_u\t\tstring[6];\n    int_u\t\tvim_modifiers;\n    int\t\t\trow,col;\n    unsigned char\tbuttons_mask;\n    unsigned char\tgpm_modifiers;\n    static unsigned char old_buttons = 0;\n\n    Gpm_GetEvent(&gpm_event);\n\n#ifdef FEAT_GUI\n    /* Don't put events in the input queue now. */\n    if (hold_gui_events)\n\treturn 0;\n#endif\n\n    row = gpm_event.y - 1;\n    col = gpm_event.x - 1;\n\n    string[0] = ESC; /* Our termcode */\n    string[1] = 'M';\n    string[2] = 'G';\n    switch (GPM_BARE_EVENTS(gpm_event.type))\n    {\n\tcase GPM_DRAG:\n\t    string[3] = MOUSE_DRAG;\n\t    break;\n\tcase GPM_DOWN:\n\t    buttons_mask = gpm_event.buttons & ~old_buttons;\n\t    old_buttons = gpm_event.buttons;\n\t    switch (buttons_mask)\n\t    {\n\t\tcase GPM_B_LEFT:\n\t\t    button = MOUSE_LEFT;\n\t\t    break;\n\t\tcase GPM_B_MIDDLE:\n\t\t    button = MOUSE_MIDDLE;\n\t\t    break;\n\t\tcase GPM_B_RIGHT:\n\t\t    button = MOUSE_RIGHT;\n\t\t    break;\n\t\tdefault:\n\t\t    return 0;\n\t\t    /*Don't know what to do. Can more than one button be\n\t\t     * reported in one event? */\n\t    }\n\t    string[3] = (char_u)(button | 0x20);\n\t    SET_NUM_MOUSE_CLICKS(string[3], gpm_event.clicks + 1);\n\t    break;\n\tcase GPM_UP:\n\t    string[3] = MOUSE_RELEASE;\n\t    old_buttons &= ~gpm_event.buttons;\n\t    break;\n\tdefault:\n\t    return 0;\n    }\n    /*This code is based on gui_x11_mouse_cb in gui_x11.c */\n    gpm_modifiers = gpm_event.modifiers;\n    vim_modifiers = 0x0;\n    /* I ignore capslock stats. Aren't we all just hate capslock mixing with\n     * Vim commands ? Besides, gpm_event.modifiers is unsigned char, and\n     * K_CAPSSHIFT is defined 8, so it probably isn't even reported\n     */\n    if (gpm_modifiers & ((1 << KG_SHIFT) | (1 << KG_SHIFTR) | (1 << KG_SHIFTL)))\n\tvim_modifiers |= MOUSE_SHIFT;\n\n    if (gpm_modifiers & ((1 << KG_CTRL) | (1 << KG_CTRLR) | (1 << KG_CTRLL)))\n\tvim_modifiers |= MOUSE_CTRL;\n    if (gpm_modifiers & ((1 << KG_ALT) | (1 << KG_ALTGR)))\n\tvim_modifiers |= MOUSE_ALT;\n    string[3] |= vim_modifiers;\n    string[4] = (char_u)(col + ' ' + 1);\n    string[5] = (char_u)(row + ' ' + 1);\n    add_to_input_buf(string, 6);\n    return 6;\n}\n#endif /* FEAT_MOUSE_GPM */\n\n#ifdef FEAT_SYSMOUSE\n/*\n * Initialize connection with sysmouse.\n * Let virtual console inform us with SIGUSR2 for pending sysmouse\n * output, any sysmouse output than will be processed via sig_sysmouse().\n * Return OK if succeeded, FAIL if failed.\n */\n    static int\nsysmouse_open(void)\n{\n    struct mouse_info   mouse;\n\n    mouse.operation = MOUSE_MODE;\n    mouse.u.mode.mode = 0;\n    mouse.u.mode.signal = SIGUSR2;\n    if (ioctl(1, CONS_MOUSECTL, &mouse) != -1)\n    {\n\tsignal(SIGUSR2, (RETSIGTYPE (*)())sig_sysmouse);\n\tmouse.operation = MOUSE_SHOW;\n\tioctl(1, CONS_MOUSECTL, &mouse);\n\treturn OK;\n    }\n    return FAIL;\n}\n\n/*\n * Stop processing SIGUSR2 signals, and also make sure that\n * virtual console do not send us any sysmouse related signal.\n */\n    static void\nsysmouse_close(void)\n{\n    struct mouse_info\tmouse;\n\n    signal(SIGUSR2, restricted ? SIG_IGN : SIG_DFL);\n    mouse.operation = MOUSE_MODE;\n    mouse.u.mode.mode = 0;\n    mouse.u.mode.signal = 0;\n    ioctl(1, CONS_MOUSECTL, &mouse);\n}\n\n/*\n * Gets info from sysmouse and adds special keys to input buf.\n */\n    static RETSIGTYPE\nsig_sysmouse SIGDEFARG(sigarg)\n{\n    struct mouse_info\tmouse;\n    struct video_info\tvideo;\n    char_u\t\tstring[6];\n    int\t\t\trow, col;\n    int\t\t\tbutton;\n    int\t\t\tbuttons;\n    static int\t\toldbuttons = 0;\n\n#ifdef FEAT_GUI\n    /* Don't put events in the input queue now. */\n    if (hold_gui_events)\n\treturn;\n#endif\n\n    mouse.operation = MOUSE_GETINFO;\n    if (ioctl(1, FBIO_GETMODE, &video.vi_mode) != -1\n\t    && ioctl(1, FBIO_MODEINFO, &video) != -1\n\t    && ioctl(1, CONS_MOUSECTL, &mouse) != -1\n\t    && video.vi_cheight > 0 && video.vi_cwidth > 0)\n    {\n\trow = mouse.u.data.y / video.vi_cheight;\n\tcol = mouse.u.data.x / video.vi_cwidth;\n\tbuttons = mouse.u.data.buttons;\n\tstring[0] = ESC; /* Our termcode */\n\tstring[1] = 'M';\n\tstring[2] = 'S';\n\tif (oldbuttons == buttons && buttons != 0)\n\t{\n\t    button = MOUSE_DRAG;\n\t}\n\telse\n\t{\n\t    switch (buttons)\n\t    {\n\t\tcase 0:\n\t\t    button = MOUSE_RELEASE;\n\t\t    break;\n\t\tcase 1:\n\t\t    button = MOUSE_LEFT;\n\t\t    break;\n\t\tcase 2:\n\t\t    button = MOUSE_MIDDLE;\n\t\t    break;\n\t\tcase 4:\n\t\t    button = MOUSE_RIGHT;\n\t\t    break;\n\t\tdefault:\n\t\t    return;\n\t    }\n\t    oldbuttons = buttons;\n\t}\n\tstring[3] = (char_u)(button);\n\tstring[4] = (char_u)(col + ' ' + 1);\n\tstring[5] = (char_u)(row + ' ' + 1);\n\tadd_to_input_buf(string, 6);\n    }\n    return;\n}\n#endif /* FEAT_SYSMOUSE */\n\n#if defined(FEAT_LIBCALL) || defined(PROTO)\ntypedef char_u * (*STRPROCSTR)(char_u *);\ntypedef char_u * (*INTPROCSTR)(int);\ntypedef int (*STRPROCINT)(char_u *);\ntypedef int (*INTPROCINT)(int);\n\n/*\n * Call a DLL routine which takes either a string or int param\n * and returns an allocated string.\n */\n    int\nmch_libcall(\n    char_u\t*libname,\n    char_u\t*funcname,\n    char_u\t*argstring,\t/* NULL when using a argint */\n    int\t\targint,\n    char_u\t**string_result,/* NULL when using number_result */\n    int\t\t*number_result)\n{\n# if defined(USE_DLOPEN)\n    void\t*hinstLib;\n    char\t*dlerr = NULL;\n# else\n    shl_t\thinstLib;\n# endif\n    STRPROCSTR\tProcAdd;\n    INTPROCSTR\tProcAddI;\n    char_u\t*retval_str = NULL;\n    int\t\tretval_int = 0;\n    int\t\tsuccess = FALSE;\n\n    /*\n     * Get a handle to the DLL module.\n     */\n# if defined(USE_DLOPEN)\n    /* First clear any error, it's not cleared by the dlopen() call. */\n    (void)dlerror();\n\n    hinstLib = dlopen((char *)libname, RTLD_LAZY\n#  ifdef RTLD_LOCAL\n\t    | RTLD_LOCAL\n#  endif\n\t    );\n    if (hinstLib == NULL)\n    {\n\t/* \"dlerr\" must be used before dlclose() */\n\tdlerr = (char *)dlerror();\n\tif (dlerr != NULL)\n\t    EMSG2(_(\"dlerror = \\\"%s\\\"\"), dlerr);\n    }\n# else\n    hinstLib = shl_load((const char*)libname, BIND_IMMEDIATE|BIND_VERBOSE, 0L);\n# endif\n\n    /* If the handle is valid, try to get the function address. */\n    if (hinstLib != NULL)\n    {\n# ifdef HAVE_SETJMP_H\n\t/*\n\t * Catch a crash when calling the library function.  For example when\n\t * using a number where a string pointer is expected.\n\t */\n\tmch_startjmp();\n\tif (SETJMP(lc_jump_env) != 0)\n\t{\n\t    success = FALSE;\n#  if defined(USE_DLOPEN)\n\t    dlerr = NULL;\n#  endif\n\t    mch_didjmp();\n\t}\n\telse\n# endif\n\t{\n\t    retval_str = NULL;\n\t    retval_int = 0;\n\n\t    if (argstring != NULL)\n\t    {\n# if defined(USE_DLOPEN)\n\t\tProcAdd = (STRPROCSTR)dlsym(hinstLib, (const char *)funcname);\n\t\tdlerr = (char *)dlerror();\n# else\n\t\tif (shl_findsym(&hinstLib, (const char *)funcname,\n\t\t\t\t\tTYPE_PROCEDURE, (void *)&ProcAdd) < 0)\n\t\t    ProcAdd = NULL;\n# endif\n\t\tif ((success = (ProcAdd != NULL\n# if defined(USE_DLOPEN)\n\t\t\t    && dlerr == NULL\n# endif\n\t\t\t    )))\n\t\t{\n\t\t    if (string_result == NULL)\n\t\t\tretval_int = ((STRPROCINT)ProcAdd)(argstring);\n\t\t    else\n\t\t\tretval_str = (ProcAdd)(argstring);\n\t\t}\n\t    }\n\t    else\n\t    {\n# if defined(USE_DLOPEN)\n\t\tProcAddI = (INTPROCSTR)dlsym(hinstLib, (const char *)funcname);\n\t\tdlerr = (char *)dlerror();\n# else\n\t\tif (shl_findsym(&hinstLib, (const char *)funcname,\n\t\t\t\t       TYPE_PROCEDURE, (void *)&ProcAddI) < 0)\n\t\t    ProcAddI = NULL;\n# endif\n\t\tif ((success = (ProcAddI != NULL\n# if defined(USE_DLOPEN)\n\t\t\t    && dlerr == NULL\n# endif\n\t\t\t    )))\n\t\t{\n\t\t    if (string_result == NULL)\n\t\t\tretval_int = ((INTPROCINT)ProcAddI)(argint);\n\t\t    else\n\t\t\tretval_str = (ProcAddI)(argint);\n\t\t}\n\t    }\n\n\t    /* Save the string before we free the library. */\n\t    /* Assume that a \"1\" or \"-1\" result is an illegal pointer. */\n\t    if (string_result == NULL)\n\t\t*number_result = retval_int;\n\t    else if (retval_str != NULL\n\t\t    && retval_str != (char_u *)1\n\t\t    && retval_str != (char_u *)-1)\n\t\t*string_result = vim_strsave(retval_str);\n\t}\n\n# ifdef HAVE_SETJMP_H\n\tmch_endjmp();\n#  ifdef SIGHASARG\n\tif (lc_signal != 0)\n\t{\n\t    int i;\n\n\t    /* try to find the name of this signal */\n\t    for (i = 0; signal_info[i].sig != -1; i++)\n\t\tif (lc_signal == signal_info[i].sig)\n\t\t    break;\n\t    EMSG2(\"E368: got SIG%s in libcall()\", signal_info[i].name);\n\t}\n#  endif\n# endif\n\n# if defined(USE_DLOPEN)\n\t/* \"dlerr\" must be used before dlclose() */\n\tif (dlerr != NULL)\n\t    EMSG2(_(\"dlerror = \\\"%s\\\"\"), dlerr);\n\n\t/* Free the DLL module. */\n\t(void)dlclose(hinstLib);\n# else\n\t(void)shl_unload(hinstLib);\n# endif\n    }\n\n    if (!success)\n    {\n\tEMSG2(_(e_libcall), funcname);\n\treturn FAIL;\n    }\n\n    return OK;\n}\n#endif\n\n#if (defined(FEAT_X11) && defined(FEAT_XCLIPBOARD)) || defined(PROTO)\nstatic int\txterm_trace = -1;\t/* default: disabled */\nstatic int\txterm_button;\n\n/*\n * Setup a dummy window for X selections in a terminal.\n */\n    void\nsetup_term_clip(void)\n{\n    int\t\tz = 0;\n    char\t*strp = \"\";\n    Widget\tAppShell;\n\n    if (!x_connect_to_server())\n\treturn;\n\n    open_app_context();\n    if (app_context != NULL && xterm_Shell == (Widget)0)\n    {\n\tint (*oldhandler)();\n#if defined(HAVE_SETJMP_H)\n\tint (*oldIOhandler)();\n#endif\n# if defined(HAVE_GETTIMEOFDAY) && defined(HAVE_SYS_TIME_H)\n\tstruct timeval  start_tv;\n\n\tif (p_verbose > 0)\n\t    gettimeofday(&start_tv, NULL);\n# endif\n\n\t/* Ignore X errors while opening the display */\n\toldhandler = XSetErrorHandler(x_error_check);\n\n#if defined(HAVE_SETJMP_H)\n\t/* Ignore X IO errors while opening the display */\n\toldIOhandler = XSetIOErrorHandler(x_IOerror_check);\n\tmch_startjmp();\n\tif (SETJMP(lc_jump_env) != 0)\n\t{\n\t    mch_didjmp();\n\t    xterm_dpy = NULL;\n\t}\n\telse\n#endif\n\t{\n\t    xterm_dpy = XtOpenDisplay(app_context, xterm_display,\n\t\t    \"vim_xterm\", \"Vim_xterm\", NULL, 0, &z, &strp);\n#if defined(HAVE_SETJMP_H)\n\t    mch_endjmp();\n#endif\n\t}\n\n#if defined(HAVE_SETJMP_H)\n\t/* Now handle X IO errors normally. */\n\t(void)XSetIOErrorHandler(oldIOhandler);\n#endif\n\t/* Now handle X errors normally. */\n\t(void)XSetErrorHandler(oldhandler);\n\n\tif (xterm_dpy == NULL)\n\t{\n\t    if (p_verbose > 0)\n\t\tverb_msg((char_u *)_(\"Opening the X display failed\"));\n\t    return;\n\t}\n\n\t/* Catch terminating error of the X server connection. */\n\t(void)XSetIOErrorHandler(x_IOerror_handler);\n\n# if defined(HAVE_GETTIMEOFDAY) && defined(HAVE_SYS_TIME_H)\n\tif (p_verbose > 0)\n\t{\n\t    verbose_enter();\n\t    xopen_message(&start_tv);\n\t    verbose_leave();\n\t}\n# endif\n\n\t/* Create a Shell to make converters work. */\n\tAppShell = XtVaAppCreateShell(\"vim_xterm\", \"Vim_xterm\",\n\t\tapplicationShellWidgetClass, xterm_dpy,\n\t\tNULL);\n\tif (AppShell == (Widget)0)\n\t    return;\n\txterm_Shell = XtVaCreatePopupShell(\"VIM\",\n\t\ttopLevelShellWidgetClass, AppShell,\n\t\tXtNmappedWhenManaged, 0,\n\t\tXtNwidth, 1,\n\t\tXtNheight, 1,\n\t\tNULL);\n\tif (xterm_Shell == (Widget)0)\n\t    return;\n\n\tx11_setup_atoms(xterm_dpy);\n\tx11_setup_selection(xterm_Shell);\n\tif (x11_display == NULL)\n\t    x11_display = xterm_dpy;\n\n\tXtRealizeWidget(xterm_Shell);\n\tXSync(xterm_dpy, False);\n\txterm_update();\n    }\n    if (xterm_Shell != (Widget)0)\n    {\n\tclip_init(TRUE);\n\tif (x11_window == 0 && (strp = getenv(\"WINDOWID\")) != NULL)\n\t    x11_window = (Window)atol(strp);\n\t/* Check if $WINDOWID is valid. */\n\tif (test_x11_window(xterm_dpy) == FAIL)\n\t    x11_window = 0;\n\tif (x11_window != 0)\n\t    xterm_trace = 0;\n    }\n}\n\n    void\nstart_xterm_trace(int button)\n{\n    if (x11_window == 0 || xterm_trace < 0 || xterm_Shell == (Widget)0)\n\treturn;\n    xterm_trace = 1;\n    xterm_button = button;\n    do_xterm_trace();\n}\n\n\n    void\nstop_xterm_trace(void)\n{\n    if (xterm_trace < 0)\n\treturn;\n    xterm_trace = 0;\n}\n\n/*\n * Query the xterm pointer and generate mouse termcodes if necessary\n * return TRUE if dragging is active, else FALSE\n */\n    static int\ndo_xterm_trace(void)\n{\n    Window\t\troot, child;\n    int\t\t\troot_x, root_y;\n    int\t\t\twin_x, win_y;\n    int\t\t\trow, col;\n    int_u\t\tmask_return;\n    char_u\t\tbuf[50];\n    char_u\t\t*strp;\n    long\t\tgot_hints;\n    static char_u\t*mouse_code;\n    static char_u\tmouse_name[2] = {KS_MOUSE, KE_FILLER};\n    static int\t\tprev_row = 0, prev_col = 0;\n    static XSizeHints\txterm_hints;\n\n    if (xterm_trace <= 0)\n\treturn FALSE;\n\n    if (xterm_trace == 1)\n    {\n\t/* Get the hints just before tracking starts.  The font size might\n\t * have changed recently. */\n\tif (!XGetWMNormalHints(xterm_dpy, x11_window, &xterm_hints, &got_hints)\n\t\t|| !(got_hints & PResizeInc)\n\t\t|| xterm_hints.width_inc <= 1\n\t\t|| xterm_hints.height_inc <= 1)\n\t{\n\t    xterm_trace = -1;  /* Not enough data -- disable tracing */\n\t    return FALSE;\n\t}\n\n\t/* Rely on the same mouse code for the duration of this */\n\tmouse_code = find_termcode(mouse_name);\n\tprev_row = mouse_row;\n\tprev_col = mouse_col;\n\txterm_trace = 2;\n\n\t/* Find the offset of the chars, there might be a scrollbar on the\n\t * left of the window and/or a menu on the top (eterm etc.) */\n\tXQueryPointer(xterm_dpy, x11_window, &root, &child, &root_x, &root_y,\n\t\t      &win_x, &win_y, &mask_return);\n\txterm_hints.y = win_y - (xterm_hints.height_inc * mouse_row)\n\t\t\t      - (xterm_hints.height_inc / 2);\n\tif (xterm_hints.y <= xterm_hints.height_inc / 2)\n\t    xterm_hints.y = 2;\n\txterm_hints.x = win_x - (xterm_hints.width_inc * mouse_col)\n\t\t\t      - (xterm_hints.width_inc / 2);\n\tif (xterm_hints.x <= xterm_hints.width_inc / 2)\n\t    xterm_hints.x = 2;\n\treturn TRUE;\n    }\n    if (mouse_code == NULL || STRLEN(mouse_code) > 45)\n    {\n\txterm_trace = 0;\n\treturn FALSE;\n    }\n\n    XQueryPointer(xterm_dpy, x11_window, &root, &child, &root_x, &root_y,\n\t\t  &win_x, &win_y, &mask_return);\n\n    row = check_row((win_y - xterm_hints.y) / xterm_hints.height_inc);\n    col = check_col((win_x - xterm_hints.x) / xterm_hints.width_inc);\n    if (row == prev_row && col == prev_col)\n\treturn TRUE;\n\n    STRCPY(buf, mouse_code);\n    strp = buf + STRLEN(buf);\n    *strp++ = (xterm_button | MOUSE_DRAG) & ~0x20;\n    *strp++ = (char_u)(col + ' ' + 1);\n    *strp++ = (char_u)(row + ' ' + 1);\n    *strp = 0;\n    add_to_input_buf(buf, STRLEN(buf));\n\n    prev_row = row;\n    prev_col = col;\n    return TRUE;\n}\n\n# if defined(FEAT_GUI) || defined(PROTO)\n/*\n * Destroy the display, window and app_context.  Required for GTK.\n */\n    void\nclear_xterm_clip(void)\n{\n    if (xterm_Shell != (Widget)0)\n    {\n\tXtDestroyWidget(xterm_Shell);\n\txterm_Shell = (Widget)0;\n    }\n    if (xterm_dpy != NULL)\n    {\n#  if 0\n\t/* Lesstif and Solaris crash here, lose some memory */\n\tXtCloseDisplay(xterm_dpy);\n#  endif\n\tif (x11_display == xterm_dpy)\n\t    x11_display = NULL;\n\txterm_dpy = NULL;\n    }\n#  if 0\n    if (app_context != (XtAppContext)NULL)\n    {\n\t/* Lesstif and Solaris crash here, lose some memory */\n\tXtDestroyApplicationContext(app_context);\n\tapp_context = (XtAppContext)NULL;\n    }\n#  endif\n}\n# endif\n\n/*\n * Catch up with GUI or X events.\n */\n    static void\nclip_update(void)\n{\n# ifdef FEAT_GUI\n    if (gui.in_use)\n\tgui_mch_update();\n    else\n# endif\n    if (xterm_Shell != (Widget)0)\n\txterm_update();\n}\n\n/*\n * Catch up with any queued X events.  This may put keyboard input into the\n * input buffer, call resize call-backs, trigger timers etc.  If there is\n * nothing in the X event queue (& no timers pending), then we return\n * immediately.\n */\n    static void\nxterm_update(void)\n{\n    XEvent event;\n\n    for (;;)\n    {\n\tXtInputMask mask = XtAppPending(app_context);\n\n\tif (mask == 0 || vim_is_input_buf_full())\n\t    break;\n\n\tif (mask & XtIMXEvent)\n\t{\n\t    /* There is an event to process. */\n\t    XtAppNextEvent(app_context, &event);\n#ifdef FEAT_CLIENTSERVER\n\t    {\n\t\tXPropertyEvent *e = (XPropertyEvent *)&event;\n\n\t\tif (e->type == PropertyNotify && e->window == commWindow\n\t\t   && e->atom == commProperty && e->state == PropertyNewValue)\n\t\t    serverEventProc(xterm_dpy, &event, 0);\n\t    }\n#endif\n\t    XtDispatchEvent(&event);\n\t}\n\telse\n\t{\n\t    /* There is something else than an event to process. */\n\t    XtAppProcessEvent(app_context, mask);\n\t}\n    }\n}\n\n    int\nclip_xterm_own_selection(VimClipboard *cbd)\n{\n    if (xterm_Shell != (Widget)0)\n\treturn clip_x11_own_selection(xterm_Shell, cbd);\n    return FAIL;\n}\n\n    void\nclip_xterm_lose_selection(VimClipboard *cbd)\n{\n    if (xterm_Shell != (Widget)0)\n\tclip_x11_lose_selection(xterm_Shell, cbd);\n}\n\n    void\nclip_xterm_request_selection(VimClipboard *cbd)\n{\n    if (xterm_Shell != (Widget)0)\n\tclip_x11_request_selection(xterm_Shell, xterm_dpy, cbd);\n}\n\n    void\nclip_xterm_set_selection(VimClipboard *cbd)\n{\n    clip_x11_set_selection(cbd);\n}\n#endif\n\n\n#if defined(USE_XSMP) || defined(PROTO)\n/*\n * Code for X Session Management Protocol.\n */\nstatic void xsmp_handle_save_yourself(SmcConn smc_conn, SmPointer client_data, int save_type, Bool shutdown, int interact_style, Bool fast);\nstatic void xsmp_die(SmcConn smc_conn, SmPointer client_data);\nstatic void xsmp_save_complete(SmcConn smc_conn, SmPointer client_data);\nstatic void xsmp_shutdown_cancelled(SmcConn smc_conn, SmPointer\tclient_data);\nstatic void xsmp_ice_connection(IceConn iceConn, IcePointer clientData, Bool opening, IcePointer *watchData);\n\n\n# if defined(FEAT_GUI) && defined(USE_XSMP_INTERACT)\nstatic void xsmp_handle_interaction(SmcConn smc_conn, SmPointer client_data);\n\n/*\n * This is our chance to ask the user if they want to save,\n * or abort the logout\n */\n    static void\nxsmp_handle_interaction(SmcConn smc_conn, SmPointer client_data UNUSED)\n{\n    cmdmod_T\tsave_cmdmod;\n    int\t\tcancel_shutdown = False;\n\n    save_cmdmod = cmdmod;\n    cmdmod.confirm = TRUE;\n    if (check_changed_any(FALSE, FALSE))\n\t/* Mustn't logout */\n\tcancel_shutdown = True;\n    cmdmod = save_cmdmod;\n    setcursor();\t\t/* position cursor */\n    out_flush();\n\n    /* Done interaction */\n    SmcInteractDone(smc_conn, cancel_shutdown);\n\n    /* Finish off\n     * Only end save-yourself here if we're not cancelling shutdown;\n     * we'll get a cancelled callback later in which we'll end it.\n     * Hopefully get around glitchy SMs (like GNOME-1)\n     */\n    if (!cancel_shutdown)\n    {\n\txsmp.save_yourself = False;\n\tSmcSaveYourselfDone(smc_conn, True);\n    }\n}\n# endif\n\n/*\n * Callback that starts save-yourself.\n */\n    static void\nxsmp_handle_save_yourself(\n    SmcConn\tsmc_conn,\n    SmPointer\tclient_data UNUSED,\n    int\t\tsave_type UNUSED,\n    Bool\tshutdown,\n    int\t\tinteract_style UNUSED,\n    Bool\tfast UNUSED)\n{\n    /* Handle already being in saveyourself */\n    if (xsmp.save_yourself)\n\tSmcSaveYourselfDone(smc_conn, True);\n    xsmp.save_yourself = True;\n    xsmp.shutdown = shutdown;\n\n    /* First up, preserve all files */\n    out_flush();\n    ml_sync_all(FALSE, FALSE);\t/* preserve all swap files */\n\n    if (p_verbose > 0)\n\tverb_msg((char_u *)_(\"XSMP handling save-yourself request\"));\n\n# if defined(FEAT_GUI) && defined(USE_XSMP_INTERACT)\n    /* Now see if we can ask about unsaved files */\n    if (shutdown && !fast && gui.in_use)\n\t/* Need to interact with user, but need SM's permission */\n\tSmcInteractRequest(smc_conn, SmDialogError,\n\t\t\t\t\txsmp_handle_interaction, client_data);\n    else\n# endif\n    {\n\t/* Can stop the cycle here */\n\tSmcSaveYourselfDone(smc_conn, True);\n\txsmp.save_yourself = False;\n    }\n}\n\n\n/*\n * Callback to warn us of imminent death.\n */\n    static void\nxsmp_die(SmcConn smc_conn UNUSED, SmPointer client_data UNUSED)\n{\n    xsmp_close();\n\n    /* quit quickly leaving swapfiles for modified buffers behind */\n    getout_preserve_modified(0);\n}\n\n\n/*\n * Callback to tell us that save-yourself has completed.\n */\n    static void\nxsmp_save_complete(\n    SmcConn\tsmc_conn UNUSED,\n    SmPointer\tclient_data UNUSED)\n{\n    xsmp.save_yourself = False;\n}\n\n\n/*\n * Callback to tell us that an instigated shutdown was cancelled\n * (maybe even by us)\n */\n    static void\nxsmp_shutdown_cancelled(\n    SmcConn\tsmc_conn,\n    SmPointer\tclient_data UNUSED)\n{\n    if (xsmp.save_yourself)\n\tSmcSaveYourselfDone(smc_conn, True);\n    xsmp.save_yourself = False;\n    xsmp.shutdown = False;\n}\n\n\n/*\n * Callback to tell us that a new ICE connection has been established.\n */\n    static void\nxsmp_ice_connection(\n    IceConn\ticeConn,\n    IcePointer\tclientData UNUSED,\n    Bool\topening,\n    IcePointer\t*watchData UNUSED)\n{\n    /* Intercept creation of ICE connection fd */\n    if (opening)\n    {\n\txsmp_icefd = IceConnectionNumber(iceConn);\n\tIceRemoveConnectionWatch(xsmp_ice_connection, NULL);\n    }\n}\n\n\n/* Handle any ICE processing that's required; return FAIL if SM lost */\n    int\nxsmp_handle_requests(void)\n{\n    Bool rep;\n\n    if (IceProcessMessages(xsmp.iceconn, NULL, &rep)\n\t\t\t\t\t\t == IceProcessMessagesIOError)\n    {\n\t/* Lost ICE */\n\tif (p_verbose > 0)\n\t    verb_msg((char_u *)_(\"XSMP lost ICE connection\"));\n\txsmp_close();\n\treturn FAIL;\n    }\n    else\n\treturn OK;\n}\n\nstatic int dummy;\n\n/* Set up X Session Management Protocol */\n    void\nxsmp_init(void)\n{\n    char\t\terrorstring[80];\n    SmcCallbacks\tsmcallbacks;\n#if 0\n    SmPropValue\t\tsmname;\n    SmProp\t\tsmnameprop;\n    SmProp\t\t*smprops[1];\n#endif\n\n    if (p_verbose > 0)\n\tverb_msg((char_u *)_(\"XSMP opening connection\"));\n\n    xsmp.save_yourself = xsmp.shutdown = False;\n\n    /* Set up SM callbacks - must have all, even if they're not used */\n    smcallbacks.save_yourself.callback = xsmp_handle_save_yourself;\n    smcallbacks.save_yourself.client_data = NULL;\n    smcallbacks.die.callback = xsmp_die;\n    smcallbacks.die.client_data = NULL;\n    smcallbacks.save_complete.callback = xsmp_save_complete;\n    smcallbacks.save_complete.client_data = NULL;\n    smcallbacks.shutdown_cancelled.callback = xsmp_shutdown_cancelled;\n    smcallbacks.shutdown_cancelled.client_data = NULL;\n\n    /* Set up a watch on ICE connection creations.  The \"dummy\" argument is\n     * apparently required for FreeBSD (we get a BUS error when using NULL). */\n    if (IceAddConnectionWatch(xsmp_ice_connection, &dummy) == 0)\n    {\n\tif (p_verbose > 0)\n\t    verb_msg((char_u *)_(\"XSMP ICE connection watch failed\"));\n\treturn;\n    }\n\n    /* Create an SM connection */\n    xsmp.smcconn = SmcOpenConnection(\n\t    NULL,\n\t    NULL,\n\t    SmProtoMajor,\n\t    SmProtoMinor,\n\t    SmcSaveYourselfProcMask | SmcDieProcMask\n\t\t     | SmcSaveCompleteProcMask | SmcShutdownCancelledProcMask,\n\t    &smcallbacks,\n\t    NULL,\n\t    &xsmp.clientid,\n\t    sizeof(errorstring),\n\t    errorstring);\n    if (xsmp.smcconn == NULL)\n    {\n\tchar errorreport[132];\n\n\tif (p_verbose > 0)\n\t{\n\t    vim_snprintf(errorreport, sizeof(errorreport),\n\t\t\t _(\"XSMP SmcOpenConnection failed: %s\"), errorstring);\n\t    verb_msg((char_u *)errorreport);\n\t}\n\treturn;\n    }\n    xsmp.iceconn = SmcGetIceConnection(xsmp.smcconn);\n\n#if 0\n    /* ID ourselves */\n    smname.value = \"vim\";\n    smname.length = 3;\n    smnameprop.name = \"SmProgram\";\n    smnameprop.type = \"SmARRAY8\";\n    smnameprop.num_vals = 1;\n    smnameprop.vals = &smname;\n\n    smprops[0] = &smnameprop;\n    SmcSetProperties(xsmp.smcconn, 1, smprops);\n#endif\n}\n\n\n/* Shut down XSMP comms. */\n    void\nxsmp_close(void)\n{\n    if (xsmp_icefd != -1)\n    {\n\tSmcCloseConnection(xsmp.smcconn, 0, NULL);\n\tif (xsmp.clientid != NULL)\n\t    free(xsmp.clientid);\n\txsmp.clientid = NULL;\n\txsmp_icefd = -1;\n    }\n}\n#endif /* USE_XSMP */\n\n\n#ifdef EBCDIC\n/* Translate character to its CTRL- value */\nchar CtrlTable[] =\n{\n/* 00 - 5E */\n\t0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n\t0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n\t0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n\t0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n\t0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n\t0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n/* ^ */ 0x1E,\n/* - */ 0x1F,\n/* 61 - 6C */\n\t0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n/* _ */ 0x1F,\n/* 6E - 80 */\n\t0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n/* a */ 0x01,\n/* b */ 0x02,\n/* c */ 0x03,\n/* d */ 0x37,\n/* e */ 0x2D,\n/* f */ 0x2E,\n/* g */ 0x2F,\n/* h */ 0x16,\n/* i */ 0x05,\n/* 8A - 90 */\n\t0, 0, 0, 0, 0, 0, 0,\n/* j */ 0x15,\n/* k */ 0x0B,\n/* l */ 0x0C,\n/* m */ 0x0D,\n/* n */ 0x0E,\n/* o */ 0x0F,\n/* p */ 0x10,\n/* q */ 0x11,\n/* r */ 0x12,\n/* 9A - A1 */\n\t0, 0, 0, 0, 0, 0, 0, 0,\n/* s */ 0x13,\n/* t */ 0x3C,\n/* u */ 0x3D,\n/* v */ 0x32,\n/* w */ 0x26,\n/* x */ 0x18,\n/* y */ 0x19,\n/* z */ 0x3F,\n/* AA - AC */\n\t0, 0, 0,\n/* [ */ 0x27,\n/* AE - BC */\n\t0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n/* ] */ 0x1D,\n/* BE - C0 */ 0, 0, 0,\n/* A */ 0x01,\n/* B */ 0x02,\n/* C */ 0x03,\n/* D */ 0x37,\n/* E */ 0x2D,\n/* F */ 0x2E,\n/* G */ 0x2F,\n/* H */ 0x16,\n/* I */ 0x05,\n/* CA - D0 */ 0, 0, 0, 0, 0, 0, 0,\n/* J */ 0x15,\n/* K */ 0x0B,\n/* L */ 0x0C,\n/* M */ 0x0D,\n/* N */ 0x0E,\n/* O */ 0x0F,\n/* P */ 0x10,\n/* Q */ 0x11,\n/* R */ 0x12,\n/* DA - DF */ 0, 0, 0, 0, 0, 0,\n/* \\ */ 0x1C,\n/* E1 */ 0,\n/* S */ 0x13,\n/* T */ 0x3C,\n/* U */ 0x3D,\n/* V */ 0x32,\n/* W */ 0x26,\n/* X */ 0x18,\n/* Y */ 0x19,\n/* Z */ 0x3F,\n/* EA - FF*/ 0, 0, 0, 0, 0, 0,\n\t0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n};\n\nchar MetaCharTable[]=\n{/*   0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F */\n      0,  0,  0,  0,'\\\\', 0,'F',  0,'W','M','N',  0,  0,  0,  0,  0,\n      0,  0,  0,  0,']',  0,  0,'G',  0,  0,'R','O',  0,  0,  0,  0,\n    '@','A','B','C','D','E',  0,  0,'H','I','J','K','L',  0,  0,  0,\n    'P','Q',  0,'S','T','U','V',  0,'X','Y','Z','[',  0,  0,'^',  0\n};\n\n\n/* TODO: Use characters NOT numbers!!! */\nchar CtrlCharTable[]=\n{/*   0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F */\n    124,193,194,195,  0,201,  0,  0,  0,  0,  0,210,211,212,213,214,\n    215,216,217,226,  0,209,200,  0,231,232,  0,  0,224,189, 95,109,\n      0,  0,  0,  0,  0,  0,230,173,  0,  0,  0,  0,  0,197,198,199,\n      0,  0,229,  0,  0,  0,  0,196,  0,  0,  0,  0,227,228,  0,233,\n};\n\n\n#endif\n",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/src/config.h.in": "/*\n * config.h.in.  Generated automatically from configure.in by autoheader, and\n * manually changed after that.\n */\n\n/* Define if we have EBCDIC code */\n#undef EBCDIC\n\n/* Define unless no X support found */\n#undef HAVE_X11\n\n/* Define when terminfo support found */\n#undef TERMINFO\n\n/* Define when termcap.h contains ospeed */\n#undef HAVE_OSPEED\n\n/* Define when ospeed can be extern */\n#undef OSPEED_EXTERN\n\n/* Define when termcap.h contains UP, BC and PC */\n#undef HAVE_UP_BC_PC\n\n/* Define when UP, BC and PC can be extern */\n#undef UP_BC_PC_EXTERN\n\n/* Define when termcap.h defines outfuntype */\n#undef HAVE_OUTFUNTYPE\n\n/* Define when __DATE__ \" \" __TIME__ can be used */\n#undef HAVE_DATE_TIME\n\n/* Define when __attribute__((unused)) can be used */\n#undef HAVE_ATTRIBUTE_UNUSED\n\n/* defined always when using configure */\n#undef UNIX\n\n/* Defined to the size of an int */\n#undef VIM_SIZEOF_INT\n\n/* Defined to the size of a long */\n#undef VIM_SIZEOF_LONG\n\n/* Defined to the size of off_t */\n#undef SIZEOF_OFF_T\n\n/* Defined to the size of time_t */\n#undef SIZEOF_TIME_T\n\n/* Define when wchar_t is only 2 bytes. */\n#undef SMALL_WCHAR_T\n\n/*\n * If we cannot trust one of the following from the libraries, we use our\n * own safe but probably slower vim_memmove().\n */\n#undef USEBCOPY\n#undef USEMEMMOVE\n#undef USEMEMCPY\n\n/* Define when \"man -s 2\" is to be used */\n#undef USEMAN_S\n\n/* Define to empty if the keyword does not work.  */\n#undef const\n\n/* Define to empty if the keyword does not work.  */\n#undef volatile\n\n/* Define to `int' if <sys/types.h> doesn't define.  */\n#undef mode_t\n\n/* Define to `long' if <sys/types.h> doesn't define.  */\n#undef off_t\n\n/* Define to `long' if <sys/types.h> doesn't define.  */\n#undef pid_t\n\n/* Define to `unsigned' if <sys/types.h> doesn't define.  */\n#undef size_t\n\n/* Define to `int' if <sys/types.h> doesn't define.  */\n#undef uid_t\n\n/* Define to `unsigned int' or other type that is 32 bit.  */\n#undef uint32_t\n\n/* Define to `int' if <sys/types.h> doesn't define.  */\n#undef gid_t\n\n/* Define to `long' if <sys/types.h> doesn't define.  */\n#undef ino_t\n\n/* Define to `unsigned' if <sys/types.h> doesn't define.  */\n#undef dev_t\n\n/* Define on big-endian machines */\n#undef WORDS_BIGENDIAN\n\n/* Define to `unsigned long' if <sys/types.h> doesn't define.  */\n#undef rlim_t\n\n/* Define to `struct sigaltstack' if <signal.h> doesn't define.  */\n#undef stack_t\n\n/* Define if stack_t has the ss_base field. */\n#undef HAVE_SS_BASE\n\n/* Define if you can safely include both <sys/time.h> and <time.h>.  */\n#undef TIME_WITH_SYS_TIME\n\n/* Define if you can safely include both <sys/time.h> and <sys/select.h>.  */\n#undef SYS_SELECT_WITH_SYS_TIME\n\n/* Define if you have /dev/ptc */\n#undef HAVE_DEV_PTC\n\n/* Define if you have Sys4 ptys */\n#undef HAVE_SVR4_PTYS\n\n/* Define to range of pty names to try */\n#undef PTYRANGE0\n#undef PTYRANGE1\n\n/* Define mode for pty */\n#undef PTYMODE\n\n/* Define group for pty */\n#undef PTYGROUP\n\n/* Define as the return type of signal handlers (int or void).  */\n#undef RETSIGTYPE\n\n/* Define as the command at the end of signal handlers (\"\" or \"return 0;\").  */\n#undef SIGRETURN\n\n/* Define if struct sigcontext is present */\n#undef HAVE_SIGCONTEXT\n\n/* Define if touuper/tolower only work on lower/upercase characters */\n#undef BROKEN_TOUPPER\n\n/* Define if stat() ignores a trailing slash */\n#undef STAT_IGNORES_SLASH\n\n/* Define if tgetstr() has a second argument that is (char *) */\n#undef TGETSTR_CHAR_P\n\n/* Define if tgetent() returns zero for an error */\n#undef TGETENT_ZERO_ERR\n\n/* Define if the getcwd() function should not be used.  */\n#undef BAD_GETCWD\n\n/* Define if you the function: */\n#undef HAVE_BCMP\n#undef HAVE_FCHDIR\n#undef HAVE_FCHOWN\n#undef HAVE_FSEEKO\n#undef HAVE_FSYNC\n#undef HAVE_GETCWD\n#undef HAVE_GETPSEUDOTTY\n#undef HAVE_GETPWENT\n#undef HAVE_GETPWNAM\n#undef HAVE_GETPWUID\n#undef HAVE_GETRLIMIT\n#undef HAVE_GETTIMEOFDAY\n#undef HAVE_GETWD\n#undef HAVE_ICONV\n#undef HAVE_NL_LANGINFO_CODESET\n#undef HAVE_LSTAT\n#undef HAVE_MEMCMP\n#undef HAVE_MEMSET\n#undef HAVE_MKDTEMP\n#undef HAVE_NANOSLEEP\n#undef HAVE_OPENDIR\n#undef HAVE_FLOAT_FUNCS\n#undef HAVE_PUTENV\n#undef HAVE_QSORT\n#undef HAVE_READLINK\n#undef HAVE_RENAME\n#undef HAVE_SELECT\n#undef HAVE_SELINUX\n#undef HAVE_SETENV\n#undef HAVE_SETPGID\n#undef HAVE_SETSID\n#undef HAVE_SIGACTION\n#undef HAVE_SIGALTSTACK\n#undef HAVE_SIGSET\n#undef HAVE_SIGSETJMP\n#undef HAVE_SIGSTACK\n#undef HAVE_SIGVEC\n#undef HAVE_SMACK\n#undef HAVE_STRCASECMP\n#undef HAVE_STRERROR\n#undef HAVE_STRFTIME\n#undef HAVE_STRICMP\n#undef HAVE_STRNCASECMP\n#undef HAVE_STRNICMP\n#undef HAVE_STRPBRK\n#undef HAVE_STRTOL\n#undef HAVE_ST_BLKSIZE\n#undef HAVE_SYSCONF\n#undef HAVE_SYSCTL\n#undef HAVE_SYSINFO\n#undef HAVE_SYSINFO_MEM_UNIT\n#undef HAVE_TGETENT\n#undef HAVE_TOWLOWER\n#undef HAVE_TOWUPPER\n#undef HAVE_ISWUPPER\n#undef HAVE_USLEEP\n#undef HAVE_UTIME\n#undef HAVE_BIND_TEXTDOMAIN_CODESET\n\n/* Define, if needed, for accessing large files. */\n#undef _LARGE_FILES\n#undef _FILE_OFFSET_BITS\n#undef _LARGEFILE_SOURCE\n\n/* Define if you do not have utime(), but do have the utimes() function. */\n#undef HAVE_UTIMES\n\n/* Define if you have the header file: */\n#undef HAVE_DIRENT_H\n#undef HAVE_ERRNO_H\n#undef HAVE_FCNTL_H\n#undef HAVE_FRAME_H\n#undef HAVE_ICONV_H\n#undef HAVE_INTTYPES_H\n#undef HAVE_LANGINFO_H\n#undef HAVE_LIBC_H\n#undef HAVE_LIBGEN_H\n#undef HAVE_LIBINTL_H\n#undef HAVE_LOCALE_H\n#undef HAVE_MATH_H\n#undef HAVE_NDIR_H\n#undef HAVE_POLL_H\n#undef HAVE_PTHREAD_NP_H\n#undef HAVE_PWD_H\n#undef HAVE_SETJMP_H\n#undef HAVE_SGTTY_H\n#undef HAVE_STDINT_H\n#undef HAVE_STRINGS_H\n#undef HAVE_STROPTS_H\n#undef HAVE_SYS_ACCESS_H\n#undef HAVE_SYS_ACL_H\n#undef HAVE_SYS_DIR_H\n#undef HAVE_SYS_IOCTL_H\n#undef HAVE_SYS_NDIR_H\n#undef HAVE_SYS_PARAM_H\n#undef HAVE_SYS_POLL_H\n#undef HAVE_SYS_PTEM_H\n#undef HAVE_SYS_RESOURCE_H\n#undef HAVE_SYS_SELECT_H\n#undef HAVE_SYS_STATFS_H\n#undef HAVE_SYS_STREAM_H\n#undef HAVE_SYS_SYSCTL_H\n#undef HAVE_SYS_SYSINFO_H\n#undef HAVE_SYS_SYSTEMINFO_H\n#undef HAVE_SYS_TIME_H\n#undef HAVE_SYS_TYPES_H\n#undef HAVE_SYS_UTSNAME_H\n#undef HAVE_TERMCAP_H\n#undef HAVE_TERMIOS_H\n#undef HAVE_TERMIO_H\n#undef HAVE_WCHAR_H\n#undef HAVE_WCTYPE_H\n#undef HAVE_UNISTD_H\n#undef HAVE_UTIL_DEBUG_H\n#undef HAVE_UTIL_MSGI18N_H\n#undef HAVE_UTIME_H\n#undef HAVE_X11_SUNKEYSYM_H\n#undef HAVE_XM_XM_H\n#undef HAVE_XM_XPMP_H\n#undef HAVE_XM_TRAITP_H\n#undef HAVE_XM_MANAGER_H\n#undef HAVE_XM_UNHIGHLIGHTT_H\n#undef HAVE_XM_JOINSIDET_H\n#undef HAVE_XM_NOTEBOOK_H\n#undef HAVE_X11_XPM_H\n#undef HAVE_X11_XMU_EDITRES_H\n#undef HAVE_X11_SM_SMLIB_H\n\n/* Define to the type of the XpmAttributes type. */\n#undef XPMATTRIBUTES_TYPE\n\n/* Define if you have <sys/wait.h> that is POSIX.1 compatible.  */\n#undef HAVE_SYS_WAIT_H\n\n/* Define if you have a <sys/wait.h> that is not POSIX.1 compatible. */\n#undef HAVE_UNION_WAIT\n\n/* This is currently unused in vim: */\n/* Define if you have the ANSI C header files. */\n/* #undef STDC_HEADERS */\n\n/* instead, we check a few STDC things ourselves */\n#undef HAVE_STDLIB_H\n#undef HAVE_STRING_H\n\n/* Define if strings.h cannot be included when strings.h already is */\n#undef NO_STRINGS_WITH_STRING_H\n\n/* Define if you want tiny features. */\n#undef FEAT_TINY\n\n/* Define if you want small features. */\n#undef FEAT_SMALL\n\n/* Define if you want normal features. */\n#undef FEAT_NORMAL\n\n/* Define if you want big features. */\n#undef FEAT_BIG\n\n/* Define if you want huge features. */\n#undef FEAT_HUGE\n\n/* Define if you want to include the Lua interpreter. */\n#undef FEAT_LUA\n\n/* Define for linking via dlopen() or LoadLibrary() */\n#undef DYNAMIC_LUA\n\n/* Define if you want to include the MzScheme interpreter. */\n#undef FEAT_MZSCHEME\n\n/* Define if you want to include the Perl interpreter. */\n#undef FEAT_PERL\n\n/* Define for linking via dlopen() or LoadLibrary() */\n#undef DYNAMIC_PERL\n\n/* Define if you want to include the Python interpreter. */\n#undef FEAT_PYTHON\n\n/* Define if you want to include the Python3 interpreter. */\n#undef FEAT_PYTHON3\n\n/* Define for linking via dlopen() or LoadLibrary() */\n#undef DYNAMIC_PYTHON\n\n/* Define for linking via dlopen() or LoadLibrary() */\n#undef DYNAMIC_PYTHON3\n\n/* Define if dynamic python does not require RTLD_GLOBAL */\n#undef PY_NO_RTLD_GLOBAL\n\n/* Define if dynamic python3 does not require RTLD_GLOBAL */\n#undef PY3_NO_RTLD_GLOBAL\n\n/* Define if you want to include the Ruby interpreter. */\n#undef FEAT_RUBY\n\n/* Define for linking via dlopen() or LoadLibrary() */\n#undef DYNAMIC_RUBY\n\n/* Define if you want to include the Tcl interpreter. */\n#undef FEAT_TCL\n\n/* Define for linking via dlopen() or LoadLibrary() */\n#undef DYNAMIC_TCL\n\n/* Define if you want to add support for ACL */\n#undef HAVE_POSIX_ACL\n#undef HAVE_SOLARIS_ZFS_ACL\n#undef HAVE_SOLARIS_ACL\n#undef HAVE_AIX_ACL\n\n/* Define if pango_shape_full() is available. */\n#undef HAVE_PANGO_SHAPE_FULL\n\n/* Define if you want to add support of GPM (Linux console mouse daemon) */\n#undef HAVE_GPM\n\n/* Define if you want to add support of sysmouse (*BSD console mouse) */\n#undef HAVE_SYSMOUSE\n\n/* Define if you want to include the Cscope interface. */\n#undef FEAT_CSCOPE\n\n/* Define if you want to include multibyte support. */\n#undef FEAT_MBYTE\n\n/* Define if you want to include fontset support. */\n#undef FEAT_XFONTSET\n\n/* Define if you want to include XIM support. */\n#undef FEAT_XIM\n\n/* Define if you want to include Hangul input support. */\n#undef FEAT_HANGULIN\n\n/* Define if you use GTK and want GNOME support. */\n#undef FEAT_GUI_GNOME\n\n/* Define if you use KDE and want KDE Toolbar support. */\n#undef FEAT_KDETOOLBAR\n\n/* Define if GTK+ multihead support is available (requires GTK+ >= 2.1.1). */\n#undef HAVE_GTK_MULTIHEAD\n\n/* Define if your X has own locale library */\n#undef X_LOCALE\n\n/* Define if we have dlfcn.h. */\n#undef HAVE_DLFCN_H\n\n/* Define if there is a working gettext(). */\n#undef HAVE_GETTEXT\n\n/* Define if _nl_msg_cat_cntr is present. */\n#undef HAVE_NL_MSG_CAT_CNTR\n\n/* Define if we have dlopen() */\n#undef HAVE_DLOPEN\n\n/* Define if we have dlsym() */\n#undef HAVE_DLSYM\n\n/* Define if we have dl.h. */\n#undef HAVE_DL_H\n\n/* Define if we have shl_load() */\n#undef HAVE_SHL_LOAD\n\n/* Define if you want to include Sun Visual Workshop support. */\n#undef FEAT_SUN_WORKSHOP\n\n/* Define if you want to include NetBeans integration. */\n#undef FEAT_NETBEANS_INTG\n\n/* Define if you want to include process communication. */\n#undef FEAT_JOB_CHANNEL\n\n/* Define default global runtime path */\n#undef RUNTIME_GLOBAL\n\n/* Define name of who modified a released Vim */\n#undef MODIFIED_BY\n\n/* Define if you want XSMP interaction as well as vanilla swapfile safety */\n#undef USE_XSMP_INTERACT\n\n/* Define if fcntl()'s F_SETFD command knows about FD_CLOEXEC */\n#undef HAVE_FD_CLOEXEC\n\n/* Define if you want Cygwin to use the WIN32 clipboard, not compatible with X11*/\n#undef FEAT_CYGWIN_WIN32_CLIPBOARD\n\n/* Define if we have AvailabilityMacros.h on Mac OS X */\n#undef HAVE_AVAILABILITYMACROS_H\n\n/* Define if Xutf8SetWMProperties() is in an X library. */\n#undef HAVE_XUTF8SETWMPROPERTIES\n\n/* Define if GResource is used to load icons */\n#undef USE_GRESOURCE\n\n/* Define if GTK+ GUI is to be linked against GTK+ 3 */\n#undef USE_GTK3\n\n/* Define if we have isinf() */\n#undef HAVE_ISINF\n\n/* Define if we have isnan() */\n#undef HAVE_ISNAN\n\n/* Define to inline symbol or empty */\n#undef inline\n",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/src/feature.h": "/* vi:set ts=8 sts=4 sw=4 noet:\n *\n * VIM - Vi IMproved\t\tby Bram Moolenaar\n *\n * Do \":help uganda\"  in Vim to read copying and usage conditions.\n * Do \":help credits\" in Vim to see a list of people who contributed.\n */\n/*\n * feature.h: Defines for optional code and preferences\n *\n * Edit this file to include/exclude parts of Vim, before compiling.\n * The only other file that may be edited is Makefile, it contains machine\n * specific options.\n *\n * To include specific options, change the \"#if*\" and \"#endif\" into comments,\n * or uncomment the \"#define\".\n * To exclude specific options, change the \"#define\" into a comment.\n */\n\n/*\n * When adding a new feature:\n * - Add a #define below.\n * - Add a message in the table above ex_version().\n * - Add a string to f_has().\n * - Add a feature to \":help feature-list\" in doc/eval.txt.\n * - Add feature to \":help +feature-list\" in doc/various.txt.\n * - Add comment for the documentation of commands that use the feature.\n */\n\n/*\n * Basic choices:\n * ==============\n *\n * +tiny\t\talmost no features enabled, not even multiple windows\n * +small\t\tfew features enabled, as basic as possible\n * +normal\t\tA default selection of features enabled\n * +big\t\t\tmany features enabled, as rich as possible.\n * +huge\t\tall possible features enabled.\n *\n * When +small is used, +tiny is also included.  +normal implies +small, etc.\n */\n\n/*\n * Uncomment one of these to override the default.  For unix use a configure\n * argument, see Makefile.\n */\n#if !defined(FEAT_TINY) && !defined(FEAT_SMALL) && !defined(FEAT_NORMAL) \\\n\t&& !defined(FEAT_BIG) && !defined(FEAT_HUGE)\n/* #define FEAT_TINY */\n/* #define FEAT_SMALL */\n/* #define FEAT_NORMAL */\n/* #define FEAT_BIG */\n/* #define FEAT_HUGE */\n#endif\n\n/*\n * For Unix, Mac and Win32 use +huge by default.  These days CPUs are fast and\n * Memory is cheap.\n * Use +big for older systems: Other MS-Windows and VMS.\n * Otherwise use +normal\n */\n#if !defined(FEAT_TINY) && !defined(FEAT_SMALL) && !defined(FEAT_NORMAL) \\\n\t&& !defined(FEAT_BIG) && !defined(FEAT_HUGE)\n# if defined(UNIX) || defined(WIN3264) || defined(MACOS)\n#  define FEAT_HUGE\n# else\n#  if defined(MSWIN) || defined(VMS) || defined(MACOS) || defined(AMIGA)\n#   define FEAT_BIG\n#  else\n#   define FEAT_NORMAL\n#  endif\n# endif\n#endif\n\n/*\n * Each feature implies including the \"smaller\" ones.\n */\n#ifdef FEAT_HUGE\n# define FEAT_BIG\n#endif\n#ifdef FEAT_BIG\n# define FEAT_NORMAL\n#endif\n#ifdef FEAT_NORMAL\n# define FEAT_SMALL\n#endif\n#ifdef FEAT_SMALL\n# define FEAT_TINY\n#endif\n\n/*\n * Optional code (see \":help +feature-list\")\n * =============\n */\n\n/*\n * +windows\t\tMultiple windows.  Without this there is no help\n *\t\t\twindow and no status lines.\n * +vertsplit\t\tVertically split windows.\n */\n#ifdef FEAT_SMALL\n# define FEAT_WINDOWS\n#endif\n\n/*\n * +listcmds\t\tVim commands for the buffer list and the argument\n *\t\t\tlist.  Without this there is no \":buffer\" \":bnext\",\n *\t\t\t\":bdel\", \":argdelete\", etc.\n */\n#ifdef FEAT_NORMAL\n# define FEAT_LISTCMDS\n#endif\n\n/*\n * +cmdhist\t\tCommand line history.\n */\n#ifdef FEAT_SMALL\n# define FEAT_CMDHIST\n#endif\n\n/*\n * Message history is fixed at 200 message, 20 for the tiny version.\n */\n#ifdef FEAT_SMALL\n# define MAX_MSG_HIST_LEN 200\n#else\n# define MAX_MSG_HIST_LEN 20\n#endif\n\n/*\n * +jumplist\t\tJumplist, CTRL-O and CTRL-I commands.\n */\n#ifdef FEAT_SMALL\n# define FEAT_JUMPLIST\n#endif\n\n/* the cmdline-window requires FEAT_WINDOWS and FEAT_CMDHIST */\n#if defined(FEAT_WINDOWS) && defined(FEAT_CMDHIST)\n# define FEAT_CMDWIN\n#endif\n\n/*\n * +folding\t\tFold lines.\n */\n#ifdef FEAT_NORMAL\n# define FEAT_FOLDING\n#endif\n\n/*\n * +digraphs\t\tDigraphs.\n *\t\t\tIn insert mode and on the command line you will be\n *\t\t\table to use digraphs. The CTRL-K command will work.\n *\t\t\tDefine OLD_DIGRAPHS to get digraphs compatible with\n *\t\t\tVim 5.x.  The new ones are from RFC 1345.\n */\n#ifdef FEAT_NORMAL\n# define FEAT_DIGRAPHS\n/* #define OLD_DIGRAPHS */\n#endif\n\n/*\n * +langmap\t\t'langmap' option.  Only useful when you put your\n *\t\t\tkeyboard in a special language mode, e.g. for typing\n *\t\t\tgreek.\n */\n#ifdef FEAT_BIG\n# define FEAT_LANGMAP\n#endif\n\n/*\n * +keymap\t\t'keymap' option.  Allows you to map typed keys in\n *\t\t\tInsert mode for a special language.\n */\n#ifdef FEAT_BIG\n# define FEAT_KEYMAP\n#endif\n\n/*\n * +localmap\t\tMappings and abbreviations local to a buffer.\n */\n#ifdef FEAT_NORMAL\n# define FEAT_LOCALMAP\n#endif\n\n/*\n * +insert_expand\tCTRL-N/CTRL-P/CTRL-X in insert mode. Takes about\n *\t\t\t4Kbyte of code.\n */\n#ifdef FEAT_NORMAL\n# define FEAT_INS_EXPAND\n#endif\n\n/*\n * +cmdline_compl\tcompletion of mappings/abbreviations in cmdline mode.\n *\t\t\tTakes a few Kbyte of code.\n */\n#ifdef FEAT_NORMAL\n# define FEAT_CMDL_COMPL\n#endif\n\n#ifdef FEAT_NORMAL\n# define VIM_BACKTICK\t\t/* internal backtick expansion */\n#endif\n\n/*\n * +visual\t\tVisual mode - now always included.\n * +visualextra\t\tExtra features for Visual mode (mostly block operators).\n */\n#ifdef FEAT_NORMAL\n# define FEAT_VISUALEXTRA\n#endif\n\n/*\n * +virtualedit\t\t'virtualedit' option and its implementation\n */\n#ifdef FEAT_NORMAL\n# define FEAT_VIRTUALEDIT\n#endif\n\n/*\n * +vreplace\t\t\"gR\" and \"gr\" commands.\n */\n#ifdef FEAT_NORMAL\n# define FEAT_VREPLACE\n#endif\n\n/*\n * +cmdline_info\t'showcmd' and 'ruler' options.\n */\n#ifdef FEAT_NORMAL\n# define FEAT_CMDL_INFO\n#endif\n\n/*\n * +linebreak\t\t'showbreak', 'breakat'  and 'linebreak' options.\n *\t\t\tAlso 'numberwidth'.\n */\n#ifdef FEAT_NORMAL\n# define FEAT_LINEBREAK\n#endif\n\n/*\n * +extra_search\t'hlsearch' and 'incsearch' options.\n */\n#ifdef FEAT_NORMAL\n# define FEAT_SEARCH_EXTRA\n#endif\n\n/*\n * +quickfix\t\tQuickfix commands.\n */\n#ifdef FEAT_NORMAL\n# define FEAT_QUICKFIX\n#endif\n\n/*\n * +file_in_path\t\"gf\" and \"<cfile>\" commands.\n */\n#ifdef FEAT_NORMAL\n# define FEAT_SEARCHPATH\n#endif\n\n/*\n * +find_in_path\t\"[I\" \":isearch\" \"^W^I\", \":checkpath\", etc.\n */\n#ifdef FEAT_NORMAL\n# ifdef FEAT_SEARCHPATH\t/* FEAT_SEARCHPATH is required */\n#  define FEAT_FIND_ID\n# endif\n#endif\n\n/*\n * +path_extra\t\tup/downwards searching in 'path' and 'tags'.\n */\n#ifdef FEAT_NORMAL\n# define FEAT_PATH_EXTRA\n#endif\n\n/*\n * +rightleft\t\tRight-to-left editing/typing support.\n *\n * Disabled for EBCDIC as it requires multibyte.\n */\n#if defined(FEAT_BIG) && !defined(EBCDIC)\n# define FEAT_RIGHTLEFT\n#endif\n\n/*\n * +farsi\t\tFarsi (Persian language) Keymap support.\n *\t\t\tRequires FEAT_RIGHTLEFT.\n *\n * Disabled for EBCDIC as it requires multibyte.\n */\n#if defined(FEAT_BIG) && !defined(EBCDIC)\n# define FEAT_FKMAP\n#endif\n#ifdef FEAT_FKMAP\n# ifndef FEAT_RIGHTLEFT\n#   define FEAT_RIGHTLEFT\n# endif\n#endif\n\n/*\n * +arabic\t\tArabic keymap and shaping support.\n *\t\t\tRequires FEAT_RIGHTLEFT and FEAT_MBYTE.\n *\n * Disabled for EBCDIC as it requires multibyte.\n */\n#if defined(FEAT_BIG) && VIM_SIZEOF_INT >= 4 && !defined(EBCDIC)\n# define FEAT_ARABIC\n#endif\n#ifdef FEAT_ARABIC\n# ifndef FEAT_RIGHTLEFT\n#   define FEAT_RIGHTLEFT\n# endif\n#endif\n\n/*\n * +emacs_tags\t\tWhen FEAT_EMACS_TAGS defined: Include support for\n *\t\t\temacs style TAGS file.\n */\n#ifdef FEAT_BIG\n# define FEAT_EMACS_TAGS\n#endif\n\n/*\n * +tag_binary\t\tCan use a binary search for the tags file.\n *\n * Disabled for EBCDIC:\n * On z/OS Unix we have the problem that /bin/sort sorts ASCII instead of\n * EBCDIC.  With this binary search doesn't work, as VIM expects a tag file\n * sorted by character values.  I'm not sure how to fix this. Should we really\n * do a EBCDIC to ASCII conversion for this??\n */\n#if !defined(EBCDIC)\n# define FEAT_TAG_BINS\n#endif\n\n/*\n * +tag_old_static\tOld style static tags: \"file:tag  file  ..\".  Slows\n *\t\t\tdown tag searching a bit.\n */\n#ifdef FEAT_NORMAL\n# define FEAT_TAG_OLDSTATIC\n#endif\n\n/*\n * +tag_any_white\tAllow any white space to separate the fields in a tags\n *\t\t\tfile.  When not defined, only a TAB is allowed.\n */\n/* #define FEAT_TAG_ANYWHITE */\n\n/*\n * +cscope\t\tUnix only: Cscope support.\n */\n#if defined(UNIX) && defined(FEAT_BIG) && !defined(FEAT_CSCOPE) && !defined(MACOS_X)\n# define FEAT_CSCOPE\n#endif\n\n/*\n * +eval\t\tBuilt-in script language and expression evaluation,\n *\t\t\t\":let\", \":if\", etc.\n * +float\t\tFloating point variables.\n * +num64\t\t64-bit Number.\n */\n#ifdef FEAT_NORMAL\n# define FEAT_EVAL\n# if defined(HAVE_FLOAT_FUNCS) || defined(WIN3264) || defined(MACOS)\n#  define FEAT_FLOAT\n# endif\n# if defined(HAVE_STDINT_H) || defined(WIN3264) || (VIM_SIZEOF_LONG >= 8)\n#  define FEAT_NUM64\n# endif\n#endif\n\n/*\n * +profile\t\tProfiling for functions and scripts.\n */\n#if defined(FEAT_HUGE) \\\n\t&& defined(FEAT_EVAL) \\\n\t&& ((defined(HAVE_GETTIMEOFDAY) && defined(HAVE_SYS_TIME_H)) \\\n\t\t|| defined(WIN3264))\n# define FEAT_PROFILE\n#endif\n\n/*\n * +reltime\t\treltime() function\n */\n#if defined(FEAT_NORMAL) \\\n\t&& defined(FEAT_EVAL) \\\n\t&& ((defined(HAVE_GETTIMEOFDAY) && defined(HAVE_SYS_TIME_H)) \\\n\t\t|| defined(WIN3264))\n# define FEAT_RELTIME\n#endif\n\n/*\n * +timers\t\ttimer_start()\n */\n#if defined(FEAT_RELTIME) && (defined(UNIX) || defined(WIN32))\n# define FEAT_TIMERS\n#endif\n\n/*\n * +textobjects\t\tText objects: \"vaw\", \"das\", etc.\n */\n#if defined(FEAT_NORMAL) && defined(FEAT_EVAL)\n# define FEAT_TEXTOBJ\n#endif\n\n/*\n *\t\t\tInsert mode completion with 'completefunc'.\n */\n#if defined(FEAT_INS_EXPAND) && defined(FEAT_EVAL)\n# define FEAT_COMPL_FUNC\n#endif\n\n/*\n * +user_commands\tAllow the user to define his own commands.\n */\n#ifdef FEAT_NORMAL\n# define FEAT_USR_CMDS\n#endif\n\n/*\n * +printer\t\t\":hardcopy\" command\n * +postscript\t\tPrinting uses PostScript file output.\n */\n#if defined(FEAT_NORMAL) && (defined(MSWIN) || defined(FEAT_EVAL)) \\\n\t&& !defined(AMIGA)\n# define FEAT_PRINTER\n#endif\n#if defined(FEAT_PRINTER) && ((defined(MSWIN) && defined(MSWINPS)) \\\n\t|| (!defined(MSWIN) && defined(FEAT_EVAL)))\n# define FEAT_POSTSCRIPT\n#endif\n\n/*\n * +modify_fname\tmodifiers for file name.  E.g., \"%:p:h\".\n */\n#ifdef FEAT_NORMAL\n# define FEAT_MODIFY_FNAME\n#endif\n\n/*\n * +autocmd\t\t\":autocmd\" command\n */\n#ifdef FEAT_NORMAL\n# define FEAT_AUTOCMD\n#endif\n\n/*\n * +diff\t\tDisplaying diffs in a nice way.\n *\t\t\tRequires +windows and +autocmd.\n */\n#if defined(FEAT_NORMAL) && defined(FEAT_WINDOWS) && defined(FEAT_AUTOCMD)\n# define FEAT_DIFF\n#endif\n\n/*\n * +title\t\t'title' and 'icon' options\n * +statusline\t\t'statusline', 'rulerformat' and special format of\n *\t\t\t'titlestring' and 'iconstring' options.\n * +byte_offset\t\t'%o' in 'statusline' and builtin functions line2byte()\n *\t\t\tand byte2line().\n *\t\t\tNote: Required for Macintosh.\n */\n#if defined(FEAT_NORMAL)\n# define FEAT_TITLE\n#endif\n\n#ifdef FEAT_NORMAL\n# define FEAT_STL_OPT\n# ifndef FEAT_CMDL_INFO\n#  define FEAT_CMDL_INFO\t/* 'ruler' is required for 'statusline' */\n# endif\n#endif\n\n#ifdef FEAT_NORMAL\n# define FEAT_BYTEOFF\n#endif\n\n/*\n * +wildignore\t\t'wildignore' and 'backupskip' options\n *\t\t\tNeeded for Unix to make \"crontab -e\" work.\n */\n#if defined(FEAT_NORMAL) || defined(UNIX)\n# define FEAT_WILDIGN\n#endif\n\n/*\n * +wildmenu\t\t'wildmenu' option\n */\n#if defined(FEAT_NORMAL) && defined(FEAT_WINDOWS)\n# define FEAT_WILDMENU\n#endif\n\n/*\n * +viminfo\t\treading/writing the viminfo file. Takes about 8Kbyte\n *\t\t\tof code.\n * VIMINFO_FILE\t\tLocation of user .viminfo file (should start with $).\n * VIMINFO_FILE2\tLocation of alternate user .viminfo file.\n */\n#ifdef FEAT_NORMAL\n# define FEAT_VIMINFO\n/* #define VIMINFO_FILE\t\"$HOME/foo/.viminfo\" */\n/* #define VIMINFO_FILE2 \"~/bar/.viminfo\" */\n#endif\n\n/*\n * +syntax\t\tsyntax highlighting.  When using this, it's a good\n *\t\t\tidea to have +autocmd and +eval too.\n */\n#if defined(FEAT_NORMAL) || defined(PROTO)\n# define FEAT_SYN_HL\n#endif\n\n/*\n * +conceal\t\t'conceal' option.  Needs syntax highlighting\n *\t\t\tas this is how the concealed text is defined.\n */\n#if defined(FEAT_BIG) && defined(FEAT_SYN_HL)\n# define FEAT_CONCEAL\n#endif\n\n/*\n * +spell\t\tspell checking\n *\n * Disabled for EBCDIC: * Doesn't work (SIGSEGV).\n */\n#if (defined(FEAT_NORMAL) || defined(PROTO)) && !defined(EBCDIC)\n# define FEAT_SPELL\n#endif\n\n/*\n * +builtin_terms\tChoose one out of the following four:\n *\n * NO_BUILTIN_TCAPS\tDo not include any builtin termcap entries (used only\n *\t\t\twith HAVE_TGETENT defined).\n *\n * (nothing)\t\tMachine specific termcap entries will be included.\n *\n * SOME_BUILTIN_TCAPS\tInclude most useful builtin termcap entries (used only\n *\t\t\twith NO_BUILTIN_TCAPS not defined).\n *\t\t\tThis is the default.\n *\n * ALL_BUILTIN_TCAPS\tInclude all builtin termcap entries\n *\t\t\t(used only with NO_BUILTIN_TCAPS not defined).\n */\n#ifdef HAVE_TGETENT\n/* #define NO_BUILTIN_TCAPS */\n#endif\n\n#if !defined(NO_BUILTIN_TCAPS)\n# ifdef FEAT_BIG\n#  define ALL_BUILTIN_TCAPS\n# else\n#  define SOME_BUILTIN_TCAPS\t\t/* default */\n# endif\n#endif\n\n/*\n * +lispindent\t\tlisp indenting (From Eric Fischer).\n * +cindent\t\tC code indenting (From Eric Fischer).\n * +smartindent\t\tsmart C code indenting when the 'si' option is set.\n *\n * These two need to be defined when making prototypes.\n */\n#if defined(FEAT_NORMAL) || defined(PROTO)\n# define FEAT_LISP\n#endif\n\n#if defined(FEAT_NORMAL) || defined(PROTO)\n# define FEAT_CINDENT\n#endif\n\n#ifdef FEAT_NORMAL\n# define FEAT_SMARTINDENT\n#endif\n\n/*\n * +comments\t\t'comments' option.\n */\n#ifdef FEAT_NORMAL\n# define FEAT_COMMENTS\n#endif\n\n/*\n * +cryptv\t\tEncryption (by Mohsin Ahmed <mosh@sasi.com>).\n */\n#if defined(FEAT_NORMAL) && !defined(FEAT_CRYPT) || defined(PROTO)\n# define FEAT_CRYPT\n#endif\n\n/*\n * +mksession\t\t\":mksession\" command.\n *\t\t\tRequires +windows and +vertsplit.\n */\n#if defined(FEAT_NORMAL) && defined(FEAT_WINDOWS)\n# define FEAT_SESSION\n#endif\n\n/*\n * +multi_lang\t\tMulti language support. \":menutrans\", \":language\", etc.\n * +gettext\t\tMessage translations (requires +multi_lang)\n *\t\t\t(only when \"lang\" archive unpacked)\n */\n#ifdef FEAT_NORMAL\n# define FEAT_MULTI_LANG\n#endif\n#if defined(HAVE_GETTEXT) && defined(FEAT_MULTI_LANG) \\\n\t&& (defined(HAVE_LOCALE_H) || defined(X_LOCALE))\n# define FEAT_GETTEXT\n#endif\n\n/*\n * +multi_byte\t\tGeneric multi-byte character handling.  Doesn't work\n *\t\t\twith 16 bit ints.  Required for GTK+ 2.\n *\n * Disabled for EBCDIC:\n * Multibyte support doesn't work on z/OS Unix currently.\n */\n#if (defined(FEAT_NORMAL) || defined(FEAT_GUI_GTK) || defined(FEAT_ARABIC)) \\\n\t&& !defined(FEAT_MBYTE) && VIM_SIZEOF_INT >= 4 && !defined(EBCDIC)\n# define FEAT_MBYTE\n#endif\n\n/* Define this if you want to use 16 bit Unicode only, reduces memory used for\n * the screen structures. */\n/* #define UNICODE16 */\n\n/*\n * +multi_byte_ime\tWin32 IME input method.  Requires +multi_byte.\n *\t\t\tOnly for far-east Windows, so IME can be used to input\n *\t\t\tchars.  Not tested much!\n */\n#if defined(FEAT_GUI_W32) && !defined(FEAT_MBYTE_IME)\n/* #define FEAT_MBYTE_IME */\n# endif\n\n#if defined(FEAT_MBYTE_IME) && !defined(FEAT_MBYTE)\n# define FEAT_MBYTE\n#endif\n\n#if defined(FEAT_MBYTE) && VIM_SIZEOF_INT < 4 && !defined(PROTO)\n\tError: Can only handle multi-byte feature with 32 bit int or larger\n#endif\n\n/* Use iconv() when it's available. */\n#if defined(FEAT_MBYTE) && ((defined(HAVE_ICONV_H) && defined(HAVE_ICONV)) \\\n\t\t|| defined(DYNAMIC_ICONV))\n# define USE_ICONV\n#endif\n\n/*\n * +xim\t\t\tX Input Method.  For entering special languages like\n *\t\t\tchinese and Japanese.\n * +hangul_input\tInternal Hangul input method.  Must be included\n *\t\t\tthrough configure: \"--enable-hangulin\"\n * Both are for Unix and VMS only.\n */\n#ifndef FEAT_XIM\n/* #define FEAT_XIM */\n#endif\n\n#if defined(FEAT_XIM) && defined(FEAT_GUI_GTK)\n# define USE_XIM 1\t\t/* needed for GTK include files */\n#endif\n\n#ifdef FEAT_HANGULIN\n# define HANGUL_DEFAULT_KEYBOARD 2\t/* 2 or 3 bulsik keyboard */\n# define ESC_CHG_TO_ENG_MODE\t\t/* if defined, when ESC pressed,\n\t\t\t\t\t * turn to english mode\n\t\t\t\t\t */\n# if defined(FEAT_XIM) && !defined(LINT)\n\tError: You should select only ONE of XIM and HANGUL INPUT\n# endif\n#endif\n#if defined(FEAT_HANGULIN) || defined(FEAT_XIM)\n/* # define X_LOCALE */\t\t\t/* for OS with incomplete locale\n\t\t\t\t\t   support, like old linux versions. */\n#endif\n\n/*\n * +xfontset\t\tX fontset support.  For outputting wide characters.\n */\n#ifndef FEAT_XFONTSET\n# if defined(FEAT_MBYTE) && defined(HAVE_X11) && !defined(FEAT_GUI_GTK)\n#  define FEAT_XFONTSET\n# else\n/* #  define FEAT_XFONTSET */\n# endif\n#endif\n\n/*\n * +libcall\t\tlibcall() function\n */\n/* Using dlopen() also requires dlsym() to be available. */\n#if defined(HAVE_DLOPEN) && defined(HAVE_DLSYM)\n# define USE_DLOPEN\n#endif\n#if defined(FEAT_EVAL) && (defined(WIN3264) || ((defined(UNIX) || defined(VMS)) \\\n\t&& (defined(USE_DLOPEN) || defined(HAVE_SHL_LOAD))))\n# define FEAT_LIBCALL\n#endif\n\n/*\n * +scrollbind\t\tsynchronization of split windows\n */\n#if defined(FEAT_NORMAL) && defined(FEAT_WINDOWS)\n# define FEAT_SCROLLBIND\n#endif\n\n/*\n * +cursorbind\t\tsynchronization of split windows\n */\n#if defined(FEAT_NORMAL) && defined(FEAT_WINDOWS)\n# define FEAT_CURSORBIND\n#endif\n\n/*\n * +menu\t\t\":menu\" command\n */\n#ifdef FEAT_NORMAL\n# define FEAT_MENU\n# ifdef FEAT_GUI_W32\n#  define FEAT_TEAROFF\n# endif\n#endif\n\n/* There are two ways to use XPM. */\n#if (defined(HAVE_XM_XPMP_H) && defined(FEAT_GUI_MOTIF)) \\\n\t\t|| defined(HAVE_X11_XPM_H)\n# define HAVE_XPM 1\n#endif\n\n/*\n * +toolbar\t\tInclude code for a toolbar (for the Win32 GUI, GTK\n *\t\t\talways has it).  But only if menus are enabled.\n */\n#if defined(FEAT_NORMAL) && defined(FEAT_MENU) \\\n\t&& (defined(FEAT_GUI_GTK) \\\n\t\t|| defined(FEAT_GUI_MSWIN) \\\n\t\t|| ((defined(FEAT_GUI_MOTIF) || defined(FEAT_GUI_ATHENA)) \\\n\t\t\t&& defined(HAVE_XPM)) \\\n\t\t|| defined(FEAT_GUI_PHOTON))\n# define FEAT_TOOLBAR\n#endif\n\n\n#if defined(FEAT_TOOLBAR) && !defined(FEAT_MENU)\n# define FEAT_MENU\n#endif\n\n/*\n * GUI tabline\n */\n#if defined(FEAT_WINDOWS) && defined(FEAT_NORMAL) \\\n    && (defined(FEAT_GUI_GTK) \\\n\t|| (defined(FEAT_GUI_MOTIF) && defined(HAVE_XM_NOTEBOOK_H)) \\\n\t|| defined(FEAT_GUI_MAC) \\\n\t|| (defined(FEAT_GUI_MSWIN) \\\n\t    && (!defined(_MSC_VER) || _MSC_VER > 1020)))\n# define FEAT_GUI_TABLINE\n#endif\n\n/*\n * +browse\t\t\":browse\" command.\n *\t\t\tor just the \":browse\" command modifier\n */\n#if defined(FEAT_NORMAL)\n# define FEAT_BROWSE_CMD\n# if defined(FEAT_GUI_MSWIN) || defined(FEAT_GUI_MOTIF) || defined(FEAT_GUI_ATHENA) || defined(FEAT_GUI_GTK) || defined(FEAT_GUI_PHOTON) || defined(FEAT_GUI_MAC)\n#  define FEAT_BROWSE\n# endif\n#endif\n\n/*\n * On some systems, when we compile with the GUI, we always use it.  On Mac\n * there is no terminal version, and on Windows we can't figure out how to\n * fork one off with :gui.\n */\n#if defined(FEAT_GUI_MSWIN) || (defined(FEAT_GUI_MAC) && !defined(MACOS_X_UNIX))\n# define ALWAYS_USE_GUI\n#endif\n\n/*\n * +dialog_gui\t\tUse GUI dialog.\n * +dialog_con\t\tMay use Console dialog.\n *\t\t\tWhen none of these defined there is no dialog support.\n */\n#ifdef FEAT_NORMAL\n# if ((defined(FEAT_GUI_ATHENA) || defined(FEAT_GUI_MOTIF)) \\\n\t\t&& defined(HAVE_X11_XPM_H)) \\\n\t|| defined(FEAT_GUI_GTK) \\\n\t|| defined(FEAT_GUI_PHOTON) \\\n\t|| defined(FEAT_GUI_MSWIN) \\\n\t|| defined(FEAT_GUI_MAC)\n#  define FEAT_CON_DIALOG\n#  define FEAT_GUI_DIALOG\n# else\n#  define FEAT_CON_DIALOG\n# endif\n#endif\n#if !defined(FEAT_GUI_DIALOG) && (defined(FEAT_GUI_MOTIF) \\\n\t|| defined(FEAT_GUI_ATHENA) || defined(FEAT_GUI_GTK) \\\n\t|| defined(FEAT_GUI_W32))\n/* need a dialog to show error messages when starting from the desktop */\n# define FEAT_GUI_DIALOG\n#endif\n#if defined(FEAT_GUI_DIALOG) && \\\n\t(defined(FEAT_GUI_MOTIF) || defined(FEAT_GUI_ATHENA) \\\n\t || defined(FEAT_GUI_GTK) || defined(FEAT_GUI_MSWIN) \\\n\t || defined(FEAT_GUI_PHOTON) || defined(FEAT_GUI_MAC))\n# define FEAT_GUI_TEXTDIALOG\n# ifndef ALWAYS_USE_GUI\n#  define FEAT_CON_DIALOG\n# endif\n#endif\n\n/*\n * +termguicolors\t'termguicolors' option.\n */\n#if (defined(FEAT_BIG) && defined(FEAT_SYN_HL)) && !defined(ALWAYS_USE_GUI)\n# define FEAT_TERMGUICOLORS\n#endif\n\n/* Mac specific thing: Codewarrior interface. */\n#ifdef FEAT_GUI_MAC\n# define FEAT_CW_EDITOR\n#endif\n\n/*\n * Preferences:\n * ============\n */\n\n/*\n * +writebackup\t\t'writebackup' is default on:\n *\t\t\tUse a backup file while overwriting a file.  But it's\n *\t\t\tdeleted again when 'backup' is not set.  Changing this\n *\t\t\tis strongly discouraged: You can lose all your\n *\t\t\tchanges when the computer crashes while writing the\n *\t\t\tfile.\n *\t\t\tVMS note: It does work on VMS as well, but because of\n *\t\t\tversion handling it does not have any purpose.\n *\t\t\tOverwrite will write to the new version.\n */\n#ifndef VMS\n# define FEAT_WRITEBACKUP\n#endif\n\n/*\n * +xterm_save\t\tThe t_ti and t_te entries for the builtin xterm will\n *\t\t\tbe set to save the screen when starting Vim and\n *\t\t\trestoring it when exiting.\n */\n/* #define FEAT_XTERM_SAVE */\n\n/*\n * DEBUG\t\tOutput a lot of debugging garbage.\n */\n/* #define DEBUG */\n\n/*\n * STARTUPTIME\t\tTime the startup process.  Writes a file with\n *\t\t\ttimestamps.\n */\n#if defined(FEAT_NORMAL) \\\n\t&& ((defined(HAVE_GETTIMEOFDAY) && defined(HAVE_SYS_TIME_H)) \\\n\t\t|| defined(WIN3264))\n# define STARTUPTIME 1\n#endif\n\n/*\n * MEM_PROFILE\t\tDebugging of memory allocation and freeing.\n */\n/* #define MEM_PROFILE */\n\n/*\n * VIMRC_FILE\t\tName of the .vimrc file in current dir.\n */\n/* #define VIMRC_FILE\t\".vimrc\" */\n\n/*\n * EXRC_FILE\t\tName of the .exrc file in current dir.\n */\n/* #define EXRC_FILE\t\".exrc\" */\n\n/*\n * GVIMRC_FILE\t\tName of the .gvimrc file in current dir.\n */\n/* #define GVIMRC_FILE\t\".gvimrc\" */\n\n/*\n * SESSION_FILE\t\tName of the default \":mksession\" file.\n */\n#define SESSION_FILE\t\"Session.vim\"\n\n/*\n * USR_VIMRC_FILE\tName of the user .vimrc file.\n * USR_VIMRC_FILE2\tName of alternate user .vimrc file.\n * USR_VIMRC_FILE3\tName of alternate user .vimrc file.\n */\n/* #define USR_VIMRC_FILE\t\"~/foo/.vimrc\" */\n/* #define USR_VIMRC_FILE2\t\"~/bar/.vimrc\" */\n/* #define USR_VIMRC_FILE3\t\"$VIM/.vimrc\" */\n\n/*\n * VIM_DEFAULTS_FILE\tName of the defaults.vim script file\n */\n/* #define VIM_DEFAULTS_FILE\t\"$VIMRUNTIME/defaults.vim\" */\n\n/*\n * EVIM_FILE\t\tName of the evim.vim script file\n */\n/* #define EVIM_FILE\t\t\"$VIMRUNTIME/evim.vim\" */\n\n/*\n * USR_EXRC_FILE\tName of the user .exrc file.\n * USR_EXRC_FILE2\tName of the alternate user .exrc file.\n */\n/* #define USR_EXRC_FILE\t\"~/foo/.exrc\" */\n/* #define USR_EXRC_FILE2\t\"~/bar/.exrc\" */\n\n/*\n * USR_GVIMRC_FILE\tName of the user .gvimrc file.\n * USR_GVIMRC_FILE2\tName of the alternate user .gvimrc file.\n */\n/* #define USR_GVIMRC_FILE\t\"~/foo/.gvimrc\" */\n/* #define USR_GVIMRC_FILE2\t\"~/bar/.gvimrc\" */\n/* #define USR_GVIMRC_FILE3\t\"$VIM/.gvimrc\" */\n\n/*\n * SYS_VIMRC_FILE\tName of the system-wide .vimrc file.\n */\n/* #define SYS_VIMRC_FILE\t\"/etc/vimrc\" */\n\n/*\n * SYS_GVIMRC_FILE\tName of the system-wide .gvimrc file.\n */\n/* #define SYS_GVIMRC_FILE\t\"/etc/gvimrc\" */\n\n/*\n * DFLT_HELPFILE\tName of the help file.\n */\n/* # define DFLT_HELPFILE\t\"$VIMRUNTIME/doc/help.txt.gz\" */\n\n/*\n * File names for:\n * FILETYPE_FILE\tswitch on file type detection\n * FTPLUGIN_FILE\tswitch on loading filetype plugin files\n * INDENT_FILE\t\tswitch on loading indent files\n * FTOFF_FILE\t\tswitch off file type detection\n * FTPLUGOF_FILE\tswitch off loading settings files\n * INDOFF_FILE\t\tswitch off loading indent files\n */\n/* # define FILETYPE_FILE\t\"filetype.vim\" */\n/* # define FTPLUGIN_FILE\t\"ftplugin.vim\" */\n/* # define INDENT_FILE\t\t\"indent.vim\" */\n/* # define FTOFF_FILE\t\t\"ftoff.vim\" */\n/* # define FTPLUGOF_FILE\t\"ftplugof.vim\" */\n/* # define INDOFF_FILE\t\t\"indoff.vim\" */\n\n/*\n * SYS_MENU_FILE\tName of the default menu.vim file.\n */\n/* # define SYS_MENU_FILE\t\"$VIMRUNTIME/menu.vim\" */\n\n/*\n * SYS_OPTWIN_FILE\tName of the default optwin.vim file.\n */\n#ifndef SYS_OPTWIN_FILE\n# define SYS_OPTWIN_FILE\t\"$VIMRUNTIME/optwin.vim\"\n#endif\n\n/*\n * SYNTAX_FNAME\t\tName of a syntax file, where %s is the syntax name.\n */\n/* #define SYNTAX_FNAME\t\"/foo/%s.vim\" */\n\n/*\n * RUNTIME_DIRNAME\tGeneric name for the directory of the runtime files.\n */\n#ifndef RUNTIME_DIRNAME\n# define RUNTIME_DIRNAME \"runtime\"\n#endif\n\n/*\n * RUNTIME_GLOBAL\tDirectory name for global Vim runtime directory.\n *\t\t\tDon't define this if the preprocessor can't handle\n *\t\t\tstring concatenation.\n *\t\t\tAlso set by \"--with-global-runtime\" configure argument.\n */\n/* #define RUNTIME_GLOBAL \"/etc/vim\" */\n\n/*\n * MODIFIED_BY\t\tName of who modified Vim.  Required when distributing\n *\t\t\ta modified version of Vim.\n *\t\t\tAlso from the \"--with-modified-by\" configure argument.\n */\n/* #define MODIFIED_BY \"John Doe\" */\n\n/*\n * Machine dependent:\n * ==================\n */\n\n/*\n * +fork\t\tUnix only: fork() support (detected by configure)\n * +system\t\tUse system() instead of fork/exec for starting a\n *\t\t\tshell.  Doesn't work for the GUI!\n */\n/* #define USE_SYSTEM */\n\n/*\n * +X11\t\t\tUnix only.  Include code for xterm title saving and X\n *\t\t\tclipboard.  Only works if HAVE_X11 is also defined.\n */\n#if (defined(FEAT_NORMAL) || defined(FEAT_GUI_MOTIF) || defined(FEAT_GUI_ATHENA))\n# define WANT_X11\n#endif\n\n/*\n * XSMP - X11 Session Management Protocol\n * It may be preferred to disable this if the GUI supports it (e.g.,\n * GNOME/KDE) and implement save-yourself etc. through that, but it may also\n * be cleaner to have all SM-aware vims do the same thing (libSM does not\n * depend upon X11).\n * If your GUI wants to support SM itself, change this ifdef.\n * I'm assuming that any X11 implementation will cope with this for now.\n */\n#if defined(HAVE_X11) && defined(WANT_X11) && defined(HAVE_X11_SM_SMLIB_H)\n# define USE_XSMP\n#endif\n#if defined(USE_XSMP_INTERACT) && !defined(USE_XSMP)\n# undef USE_XSMP_INTERACT\n#endif\n\n/*\n * +mouse_xterm\t\tUnix only: Include code for xterm mouse handling.\n * +mouse_dec\t\tidem, for Dec mouse handling.\n * +mouse_jsbterm\tidem, for Jsbterm mouse handling.\n * +mouse_netterm\tidem, for Netterm mouse handling.\n * (none)\t\tMS-DOS mouse support.\n * +mouse_gpm\t\tUnix only: Include code for Linux console mouse\n *\t\t\thandling.\n * +mouse_pterm\t\tPTerm mouse support for QNX\n * +mouse_sgr\t\tUnix only: Include code for for SGR-styled mouse.\n * +mouse_sysmouse\tUnix only: Include code for FreeBSD and DragonFly\n *\t\t\tconsole mouse handling.\n * +mouse_urxvt\t\tUnix only: Include code for for urxvt mosue handling.\n * +mouse\t\tAny mouse support (any of the above enabled).\n */\n/* OS/2 and Amiga console have no mouse support */\n#if !defined(AMIGA)\n# ifdef FEAT_NORMAL\n#  define FEAT_MOUSE_XTERM\n# endif\n# ifdef FEAT_BIG\n#  define FEAT_MOUSE_NET\n# endif\n# ifdef FEAT_BIG\n#  define FEAT_MOUSE_DEC\n# endif\n# ifdef FEAT_BIG\n#  define FEAT_MOUSE_URXVT\n# endif\n# ifdef FEAT_BIG\n#  define FEAT_MOUSE_SGR\n# endif\n# if defined(FEAT_NORMAL) && defined(WIN3264)\n#  define DOS_MOUSE\n# endif\n# if defined(FEAT_NORMAL) && defined(__QNX__)\n#  define FEAT_MOUSE_PTERM\n# endif\n#endif\n\n/*\n * Note: Only one of the following may be defined:\n * FEAT_MOUSE_GPM\n * FEAT_SYSMOUSE\n * FEAT_MOUSE_JSB\n * FEAT_MOUSE_PTERM\n */\n#if defined(FEAT_NORMAL) && defined(HAVE_GPM)\n# define FEAT_MOUSE_GPM\n#endif\n\n#if defined(FEAT_NORMAL) && defined(HAVE_SYSMOUSE)\n# define FEAT_SYSMOUSE\n#endif\n\n/* urxvt is a small variation of mouse_xterm, and shares its code */\n#if defined(FEAT_MOUSE_URXVT) && !defined(FEAT_MOUSE_XTERM)\n# define FEAT_MOUSE_XTERM\n#endif\n\n/* sgr is a small variation of mouse_xterm, and shares its code */\n#if defined(FEAT_MOUSE_SGR) && !defined(FEAT_MOUSE_XTERM)\n# define FEAT_MOUSE_XTERM\n#endif\n\n/* Define FEAT_MOUSE when any of the above is defined or FEAT_GUI. */\n#if !defined(FEAT_MOUSE_TTY) \\\n\t&& (defined(FEAT_MOUSE_XTERM) \\\n\t    || defined(FEAT_MOUSE_NET) \\\n\t    || defined(FEAT_MOUSE_DEC) \\\n\t    || defined(DOS_MOUSE) \\\n\t    || defined(FEAT_MOUSE_GPM) \\\n\t    || defined(FEAT_MOUSE_JSB) \\\n\t    || defined(FEAT_MOUSE_PTERM) \\\n\t    || defined(FEAT_SYSMOUSE) \\\n\t    || defined(FEAT_MOUSE_URXVT) \\\n\t    || defined(FEAT_MOUSE_SGR))\n# define FEAT_MOUSE_TTY\t\t/* include non-GUI mouse support */\n#endif\n#if !defined(FEAT_MOUSE) && (defined(FEAT_MOUSE_TTY) || defined(FEAT_GUI))\n# define FEAT_MOUSE\t\t/* include generic mouse support */\n#endif\n\n/*\n * +clipboard\t\tClipboard support.  Always used for the GUI.\n * +xterm_clipboard\tUnix only: Include code for handling the clipboard\n *\t\t\tin an xterm like in the GUI.\n */\n\n#ifdef FEAT_CYGWIN_WIN32_CLIPBOARD\n# define FEAT_CLIPBOARD\n#endif\n\n#ifdef FEAT_GUI\n# ifndef FEAT_CLIPBOARD\n#  define FEAT_CLIPBOARD\n# endif\n#endif\n\n#if defined(FEAT_NORMAL) \\\n\t&& (defined(UNIX) || defined(VMS)) \\\n\t&& defined(WANT_X11) && defined(HAVE_X11)\n# define FEAT_XCLIPBOARD\n# ifndef FEAT_CLIPBOARD\n#  define FEAT_CLIPBOARD\n# endif\n#endif\n\n/*\n * +dnd\t\tDrag'n'drop support.  Always used for the GTK+ GUI.\n */\n#if defined(FEAT_CLIPBOARD) && defined(FEAT_GUI_GTK)\n# define FEAT_DND\n#endif\n\n#if defined(FEAT_GUI_MSWIN) && defined(FEAT_SMALL)\n# define MSWIN_FIND_REPLACE\t/* include code for find/replace dialog */\n# define MSWIN_FR_BUFSIZE 256\n#endif\n\n#if defined(FEAT_GUI_GTK) || defined(FEAT_GUI_MOTIF) \\\n\t|| defined(MSWIN_FIND_REPLACE)\n# define FIND_REPLACE_DIALOG 1\n#endif\n\n/*\n * +clientserver\tRemote control via the remote_send() function\n *\t\t\tand the --remote argument\n */\n#if (defined(WIN32) || defined(FEAT_XCLIPBOARD)) && defined(FEAT_EVAL)\n# define FEAT_CLIENTSERVER\n#endif\n\n/*\n * +termresponse\tsend t_RV to obtain terminal response.  Used for xterm\n *\t\t\tto check if mouse dragging can be used and if term\n *\t\t\tcodes can be obtained.\n */\n#if (defined(FEAT_NORMAL) || defined(FEAT_MOUSE)) && defined(HAVE_TGETENT)\n# define FEAT_TERMRESPONSE\n#endif\n\n/*\n * cursor shape\t\tAdjust the shape of the cursor to the mode.\n * mouse shape\t\tAdjust the shape of the mouse pointer to the mode.\n */\n#ifdef FEAT_NORMAL\n/* MS-DOS console and Win32 console can change cursor shape */\n# if defined(WIN3264) && !defined(FEAT_GUI_W32)\n#  define MCH_CURSOR_SHAPE\n# endif\n# if defined(FEAT_GUI_W32) || defined(FEAT_GUI_MOTIF) \\\n\t|| defined(FEAT_GUI_ATHENA) || defined(FEAT_GUI_GTK) \\\n\t|| defined(FEAT_GUI_PHOTON)\n#  define FEAT_MOUSESHAPE\n# endif\n#endif\n\n/* GUI and some consoles can change the shape of the cursor.  The code is also\n * needed for the 'mouseshape' and 'concealcursor' options. */\n#if defined(FEAT_GUI) \\\n\t    || defined(MCH_CURSOR_SHAPE) \\\n\t    || defined(FEAT_MOUSESHAPE) \\\n\t    || defined(FEAT_CONCEAL) \\\n\t    || (defined(UNIX) && defined(FEAT_NORMAL))\n# define CURSOR_SHAPE\n#endif\n\n#if defined(FEAT_MZSCHEME) && (defined(FEAT_GUI_W32) || defined(FEAT_GUI_GTK)    \\\n\t|| defined(FEAT_GUI_MOTIF) || defined(FEAT_GUI_ATHENA)\t\\\n\t|| defined(FEAT_GUI_MAC))\n# define MZSCHEME_GUI_THREADS\n#endif\n\n/*\n * +ARP\t\t\tAmiga only. Use arp.library, DOS 2.0 is not required.\n */\n#if !defined(NO_ARP) && !defined(__amigaos4__)\n# define FEAT_ARP\n#endif\n\n/*\n * +GUI_Athena\t\tTo compile Vim with or without the GUI (gvim) you have\n * +GUI_Motif\t\tto edit the Makefile.\n */\n\n/*\n * +ole\t\t\tWin32 OLE automation: Use Makefile.ovc.\n */\n\n/*\n * These features can only be included by using a configure argument.  See the\n * Makefile for a line to uncomment.\n * +lua\t\t\tLua interface: \"--enable-luainterp\"\n * +mzscheme\t\tMzScheme interface: \"--enable-mzscheme\"\n * +perl\t\tPerl interface: \"--enable-perlinterp\"\n * +python\t\tPython interface: \"--enable-pythoninterp\"\n * +tcl\t\t\tTCL interface: \"--enable-tclinterp\"\n * +sun_workshop\tSun Workshop integration\n * +netbeans_intg\tNetbeans integration\n * +channel\t\tInter process communication\n */\n\n/*\n * These features are automatically detected:\n * +terminfo\n * +tgetent\n */\n\n/*\n * The Sun Workshop features currently only work with Motif.\n */\n#if !defined(FEAT_GUI_MOTIF) && defined(FEAT_SUN_WORKSHOP)\n# undef FEAT_SUN_WORKSHOP\n#endif\n\n/*\n * The Netbeans feature requires +listcmds and +eval.\n */\n#if (!defined(FEAT_LISTCMDS) || !defined(FEAT_EVAL)) \\\n\t&& defined(FEAT_NETBEANS_INTG)\n# undef FEAT_NETBEANS_INTG\n#endif\n\n/*\n * The +channel feature requires +eval.\n */\n#if !defined(FEAT_EVAL) && defined(FEAT_JOB_CHANNEL)\n# undef FEAT_JOB_CHANNEL\n#endif\n\n/*\n * +signs\t\tAllow signs to be displayed to the left of text lines.\n *\t\t\tAdds the \":sign\" command.\n */\n#if defined(FEAT_BIG) || defined(FEAT_SUN_WORKSHOP) \\\n\t    || defined(FEAT_NETBEANS_INTG)\n# define FEAT_SIGNS\n# if ((defined(FEAT_GUI_MOTIF) || defined(FEAT_GUI_ATHENA)) \\\n\t\t&& defined(HAVE_X11_XPM_H)) \\\n\t|| defined(FEAT_GUI_GTK) \\\n\t|| (defined(WIN32) && defined(FEAT_GUI))\n#  define FEAT_SIGN_ICONS\n# endif\n#endif\n\n/*\n * +balloon_eval\tAllow balloon expression evaluation. Used with a\n *\t\t\tdebugger and for tooltips.\n *\t\t\tOnly for GUIs where it was implemented.\n */\n#if (defined(FEAT_GUI_MOTIF) || defined(FEAT_GUI_ATHENA) \\\n\t|| defined(FEAT_GUI_GTK) || defined(FEAT_GUI_W32)) \\\n\t&& (   ((defined(FEAT_TOOLBAR) || defined(FEAT_GUI_TABLINE)) \\\n\t\t&& !defined(FEAT_GUI_GTK) && !defined(FEAT_GUI_W32)) \\\n\t    || defined(FEAT_SUN_WORKSHOP) \\\n\t    || defined(FEAT_NETBEANS_INTG) || defined(FEAT_EVAL))\n# define FEAT_BEVAL\n# if !defined(FEAT_XFONTSET) && !defined(FEAT_GUI_GTK) \\\n\t&& !defined(FEAT_GUI_W32)\n#  define FEAT_XFONTSET\n# endif\n#endif\n\n#if defined(FEAT_BEVAL) && (defined(FEAT_GUI_MOTIF) || defined(FEAT_GUI_ATHENA))\n# define FEAT_BEVAL_TIP\t\t/* balloon eval used for toolbar tooltip */\n#endif\n\n/* both Motif and Athena are X11 and share some code */\n#if defined(FEAT_GUI_MOTIF) || defined(FEAT_GUI_ATHENA)\n# define FEAT_GUI_X11\n#endif\n\n#if defined(FEAT_SUN_WORKSHOP) || defined(FEAT_NETBEANS_INTG)\n/*\n * The following features are (currently) only used by Sun Visual WorkShop 6\n * and NetBeans. These features could be used with other integrations with\n * debuggers so I've used separate feature defines.\n */\n# if !defined(FEAT_MENU)\n#  define FEAT_MENU\n# endif\n#endif\n\n#if defined(FEAT_SUN_WORKSHOP)\n/*\n *\t\t\tUse an alternative method of X input for a secondary\n *\t\t\tcommand input.\n */\n# define ALT_X_INPUT\n\n/*\n * +footer\t\tMotif only: Add a message area at the bottom of the\n *\t\t\tmain window area.\n */\n# define FEAT_FOOTER\n\n#endif\n\n/*\n * +autochdir\t\t'autochdir' option.\n */\n#if defined(FEAT_SUN_WORKSHOP) || defined(FEAT_NETBEANS_INTG) \\\n\t    || defined(FEAT_BIG)\n# define FEAT_AUTOCHDIR\n#endif\n\n/*\n * +persistent_undo\t'undofile', 'undodir' options, :wundo and :rundo, and\n * implementation.\n */\n#ifdef FEAT_NORMAL\n# define FEAT_PERSISTENT_UNDO\n#endif\n\n/*\n * +filterpipe\n */\n#if (defined(UNIX) && !defined(USE_SYSTEM)) \\\n\t    || (defined(WIN3264) && defined(FEAT_GUI_W32))\n# define FEAT_FILTERPIPE\n#endif\n",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/src/if_python.c": "/* vi:set ts=8 sts=4 sw=4 noet:\n *\n * VIM - Vi IMproved\tby Bram Moolenaar\n *\n * Do \":help uganda\"  in Vim to read copying and usage conditions.\n * Do \":help credits\" in Vim to see a list of people who contributed.\n * See README.txt for an overview of the Vim source code.\n */\n/*\n * Python extensions by Paul Moore.\n * Changes for Unix by David Leonard.\n *\n * This consists of four parts:\n * 1. Python interpreter main program\n * 2. Python output stream: writes output via [e]msg().\n * 3. Implementation of the Vim module for Python\n * 4. Utility functions for handling the interface between Vim and Python.\n */\n\n#include \"vim.h\"\n\n#include <limits.h>\n\n/* uncomment this if used with the debug version of python.\n * Checked on 2.7.4. */\n/* #define Py_DEBUG */\n/* Note: most of time you can add -DPy_DEBUG to CFLAGS in place of uncommenting\n */\n/* uncomment this if used with the debug version of python, but without its\n * allocator */\n/* #define Py_DEBUG_NO_PYMALLOC */\n\n/* Python.h defines _POSIX_THREADS itself (if needed) */\n#ifdef _POSIX_THREADS\n# undef _POSIX_THREADS\n#endif\n\n#if defined(_WIN32) && defined(HAVE_FCNTL_H)\n# undef HAVE_FCNTL_H\n#endif\n\n#ifdef _DEBUG\n# undef _DEBUG\n#endif\n\n#ifdef HAVE_STRFTIME\n# undef HAVE_STRFTIME\n#endif\n#ifdef HAVE_STRING_H\n# undef HAVE_STRING_H\n#endif\n#ifdef HAVE_PUTENV\n# undef HAVE_PUTENV\n#endif\n#ifdef HAVE_STDARG_H\n# undef HAVE_STDARG_H\t/* Python's config.h defines it as well. */\n#endif\n#ifdef _POSIX_C_SOURCE\n# undef _POSIX_C_SOURCE\t/* pyconfig.h defines it as well. */\n#endif\n#ifdef _XOPEN_SOURCE\n# undef _XOPEN_SOURCE\t/* pyconfig.h defines it as well. */\n#endif\n\n#define PY_SSIZE_T_CLEAN\n\n#include <Python.h>\n\n#if !defined(PY_VERSION_HEX) || PY_VERSION_HEX < 0x02050000\n# undef PY_SSIZE_T_CLEAN\n#endif\n\n#if defined(MACOS) && !defined(MACOS_X_UNIX)\n# include \"macglue.h\"\n# include <CodeFragments.h>\n#endif\n#undef main /* Defined in python.h - aargh */\n#undef HAVE_FCNTL_H /* Clash with os_win32.h */\n\n#define PyBytes_FromString      PyString_FromString\n#define PyBytes_Check           PyString_Check\n#define PyBytes_AsStringAndSize PyString_AsStringAndSize\n\n#if !defined(FEAT_PYTHON) && defined(PROTO)\n/* Use this to be able to generate prototypes without python being used. */\n# define PyObject Py_ssize_t\n# define PyThreadState Py_ssize_t\n# define PyTypeObject Py_ssize_t\nstruct PyMethodDef { Py_ssize_t a; };\n# define PySequenceMethods Py_ssize_t\n#endif\n\n#if defined(PY_VERSION_HEX) && PY_VERSION_HEX >= 0x02070000\n# define PY_USE_CAPSULE\n#endif\n\n#if defined(PY_VERSION_HEX) && PY_VERSION_HEX >= 0x02050000\n# define PyInt Py_ssize_t\n# define PyInquiry lenfunc\n# define PyIntArgFunc ssizeargfunc\n# define PyIntIntArgFunc ssizessizeargfunc\n# define PyIntObjArgProc ssizeobjargproc\n# define PyIntIntObjArgProc ssizessizeobjargproc\n# define Py_ssize_t_fmt \"n\"\n#else\n# define PyInt int\n# define lenfunc inquiry\n# define PyInquiry inquiry\n# define PyIntArgFunc intargfunc\n# define PyIntIntArgFunc intintargfunc\n# define PyIntObjArgProc intobjargproc\n# define PyIntIntObjArgProc intintobjargproc\n# define Py_ssize_t_fmt \"i\"\n#endif\n#define Py_bytes_fmt \"s\"\n\n/* Parser flags */\n#define single_input\t256\n#define file_input\t257\n#define eval_input\t258\n\n#if defined(PY_VERSION_HEX) && PY_VERSION_HEX >= 0x020300F0\n  /* Python 2.3: can invoke \":python\" recursively. */\n# define PY_CAN_RECURSE\n#endif\n\n# if defined(DYNAMIC_PYTHON) || defined(PROTO)\n#  ifndef DYNAMIC_PYTHON\n#   define HINSTANCE long_u\t\t/* for generating prototypes */\n#  endif\n\n# ifndef WIN3264\n#  include <dlfcn.h>\n#  define FARPROC void*\n#  define HINSTANCE void*\n#  if defined(PY_NO_RTLD_GLOBAL) && defined(PY3_NO_RTLD_GLOBAL)\n#   define load_dll(n) dlopen((n), RTLD_LAZY)\n#  else\n#   define load_dll(n) dlopen((n), RTLD_LAZY|RTLD_GLOBAL)\n#  endif\n#  define close_dll dlclose\n#  define symbol_from_dll dlsym\n# else\n#  define load_dll vimLoadLib\n#  define close_dll FreeLibrary\n#  define symbol_from_dll GetProcAddress\n# endif\n\n/* This makes if_python.c compile without warnings against Python 2.5\n * on Win32 and Win64. */\n# undef PyRun_SimpleString\n# undef PyRun_String\n# undef PyArg_Parse\n# undef PyArg_ParseTuple\n# undef Py_BuildValue\n# undef Py_InitModule4\n# undef Py_InitModule4_64\n# undef PyObject_CallMethod\n# undef PyObject_CallFunction\n\n/*\n * Wrapper defines\n */\n# define PyArg_Parse dll_PyArg_Parse\n# define PyArg_ParseTuple dll_PyArg_ParseTuple\n# define PyMem_Free dll_PyMem_Free\n# define PyMem_Malloc dll_PyMem_Malloc\n# define PyDict_SetItemString dll_PyDict_SetItemString\n# define PyErr_BadArgument dll_PyErr_BadArgument\n# define PyErr_NewException dll_PyErr_NewException\n# define PyErr_Clear dll_PyErr_Clear\n# define PyErr_Format dll_PyErr_Format\n# define PyErr_PrintEx dll_PyErr_PrintEx\n# define PyErr_NoMemory dll_PyErr_NoMemory\n# define PyErr_Occurred dll_PyErr_Occurred\n# define PyErr_SetNone dll_PyErr_SetNone\n# define PyErr_SetString dll_PyErr_SetString\n# define PyErr_SetObject dll_PyErr_SetObject\n# define PyErr_ExceptionMatches dll_PyErr_ExceptionMatches\n# define PyEval_InitThreads dll_PyEval_InitThreads\n# define PyEval_RestoreThread dll_PyEval_RestoreThread\n# define PyEval_SaveThread dll_PyEval_SaveThread\n# ifdef PY_CAN_RECURSE\n#  define PyGILState_Ensure dll_PyGILState_Ensure\n#  define PyGILState_Release dll_PyGILState_Release\n# endif\n# define PyInt_AsLong dll_PyInt_AsLong\n# define PyInt_FromLong dll_PyInt_FromLong\n# define PyLong_AsLong dll_PyLong_AsLong\n# define PyLong_FromLong dll_PyLong_FromLong\n# define PyBool_Type (*dll_PyBool_Type)\n# define PyInt_Type (*dll_PyInt_Type)\n# define PyLong_Type (*dll_PyLong_Type)\n# define PyList_GetItem dll_PyList_GetItem\n# define PyList_Append dll_PyList_Append\n# define PyList_Insert dll_PyList_Insert\n# define PyList_New dll_PyList_New\n# define PyList_SetItem dll_PyList_SetItem\n# define PyList_Size dll_PyList_Size\n# define PyList_Type (*dll_PyList_Type)\n# define PySequence_Check dll_PySequence_Check\n# define PySequence_Size dll_PySequence_Size\n# define PySequence_GetItem dll_PySequence_GetItem\n# define PySequence_Fast dll_PySequence_Fast\n# define PyTuple_Size dll_PyTuple_Size\n# define PyTuple_GetItem dll_PyTuple_GetItem\n# define PyTuple_Type (*dll_PyTuple_Type)\n# define PySlice_GetIndicesEx dll_PySlice_GetIndicesEx\n# define PyImport_ImportModule dll_PyImport_ImportModule\n# define PyDict_New dll_PyDict_New\n# define PyDict_GetItemString dll_PyDict_GetItemString\n# define PyDict_Next dll_PyDict_Next\n# define PyDict_Type (*dll_PyDict_Type)\n# ifdef PyMapping_Keys\n#  define PY_NO_MAPPING_KEYS\n# else\n#  define PyMapping_Keys dll_PyMapping_Keys\n# endif\n# define PyObject_GetItem dll_PyObject_GetItem\n# define PyObject_CallMethod dll_PyObject_CallMethod\n# define PyMapping_Check dll_PyMapping_Check\n# define PyIter_Next dll_PyIter_Next\n# define PyModule_GetDict dll_PyModule_GetDict\n# define PyModule_AddObject dll_PyModule_AddObject\n# define PyRun_SimpleString dll_PyRun_SimpleString\n# define PyRun_String dll_PyRun_String\n# define PyObject_GetAttrString dll_PyObject_GetAttrString\n# define PyObject_HasAttrString dll_PyObject_HasAttrString\n# define PyObject_SetAttrString dll_PyObject_SetAttrString\n# define PyObject_CallFunctionObjArgs dll_PyObject_CallFunctionObjArgs\n# define PyObject_CallFunction dll_PyObject_CallFunction\n# define PyObject_Call dll_PyObject_Call\n# define PyObject_Repr dll_PyObject_Repr\n# define PyString_AsString dll_PyString_AsString\n# define PyString_AsStringAndSize dll_PyString_AsStringAndSize\n# define PyString_FromString dll_PyString_FromString\n# define PyString_FromFormat dll_PyString_FromFormat\n# define PyString_FromStringAndSize dll_PyString_FromStringAndSize\n# define PyString_Size dll_PyString_Size\n# define PyString_Type (*dll_PyString_Type)\n# define PyUnicode_Type (*dll_PyUnicode_Type)\n# undef PyUnicode_AsEncodedString\n# define PyUnicode_AsEncodedString py_PyUnicode_AsEncodedString\n# define PyFloat_AsDouble dll_PyFloat_AsDouble\n# define PyFloat_FromDouble dll_PyFloat_FromDouble\n# define PyFloat_Type (*dll_PyFloat_Type)\n# define PyNumber_Check dll_PyNumber_Check\n# define PyNumber_Long dll_PyNumber_Long\n# define PyImport_AddModule (*dll_PyImport_AddModule)\n# define PySys_SetObject dll_PySys_SetObject\n# define PySys_GetObject dll_PySys_GetObject\n# define PySys_SetArgv dll_PySys_SetArgv\n# define PyType_Type (*dll_PyType_Type)\n# define PySlice_Type (*dll_PySlice_Type)\n# define PyType_Ready (*dll_PyType_Ready)\n# define PyType_GenericAlloc dll_PyType_GenericAlloc\n# define Py_BuildValue dll_Py_BuildValue\n# define Py_FindMethod dll_Py_FindMethod\n# define Py_InitModule4 dll_Py_InitModule4\n# define Py_SetPythonHome dll_Py_SetPythonHome\n# define Py_Initialize dll_Py_Initialize\n# define Py_Finalize dll_Py_Finalize\n# define Py_IsInitialized dll_Py_IsInitialized\n# define _PyObject_New dll__PyObject_New\n# define _PyObject_GC_New dll__PyObject_GC_New\n# ifdef PyObject_GC_Del\n#  define Py_underscore_GC\n#  define _PyObject_GC_Del dll__PyObject_GC_Del\n#  define _PyObject_GC_UnTrack dll__PyObject_GC_UnTrack\n# else\n#  define PyObject_GC_Del dll_PyObject_GC_Del\n#  define PyObject_GC_UnTrack dll_PyObject_GC_UnTrack\n# endif\n# if defined(PY_VERSION_HEX) && PY_VERSION_HEX >= 0x02070000\n#  define _PyObject_NextNotImplemented (*dll__PyObject_NextNotImplemented)\n# endif\n# define _Py_NoneStruct (*dll__Py_NoneStruct)\n# define _Py_ZeroStruct (*dll__Py_ZeroStruct)\n# define _Py_TrueStruct (*dll__Py_TrueStruct)\n# define PyObject_Init dll__PyObject_Init\n# define PyObject_GetIter dll_PyObject_GetIter\n# define PyObject_IsTrue dll_PyObject_IsTrue\n# if defined(PY_VERSION_HEX) && PY_VERSION_HEX >= 0x02020000\n#  define PyType_IsSubtype dll_PyType_IsSubtype\n#  ifdef Py_DEBUG\n#   define _Py_NegativeRefcount dll__Py_NegativeRefcount\n#   define _Py_RefTotal (*dll__Py_RefTotal)\n#   define _Py_Dealloc dll__Py_Dealloc\n#  endif\n# endif\n# if defined(PY_VERSION_HEX) && PY_VERSION_HEX >= 0x02030000\n#  if defined(Py_DEBUG) && !defined(Py_DEBUG_NO_PYMALLOC)\n#   define _PyObject_DebugMalloc dll__PyObject_DebugMalloc\n#   define _PyObject_DebugFree dll__PyObject_DebugFree\n#  else\n#   define PyObject_Malloc dll_PyObject_Malloc\n#   define PyObject_Free dll_PyObject_Free\n#  endif\n# endif\n# ifdef PY_USE_CAPSULE\n#  define PyCapsule_New dll_PyCapsule_New\n#  define PyCapsule_GetPointer dll_PyCapsule_GetPointer\n# else\n#  define PyCObject_FromVoidPtr dll_PyCObject_FromVoidPtr\n#  define PyCObject_AsVoidPtr dll_PyCObject_AsVoidPtr\n# endif\n# if defined(PY_VERSION_HEX) && PY_VERSION_HEX >= 0x02070000\n#  define Py_NoSiteFlag (*dll_Py_NoSiteFlag)\n# endif\n\n/*\n * Pointers for dynamic link\n */\nstatic int(*dll_PyArg_Parse)(PyObject *, char *, ...);\nstatic int(*dll_PyArg_ParseTuple)(PyObject *, char *, ...);\nstatic int(*dll_PyMem_Free)(void *);\nstatic void* (*dll_PyMem_Malloc)(size_t);\nstatic int(*dll_PyDict_SetItemString)(PyObject *dp, char *key, PyObject *item);\nstatic int(*dll_PyErr_BadArgument)(void);\nstatic PyObject *(*dll_PyErr_NewException)(char *, PyObject *, PyObject *);\nstatic void(*dll_PyErr_Clear)(void);\nstatic PyObject*(*dll_PyErr_Format)(PyObject *, const char *, ...);\nstatic void(*dll_PyErr_PrintEx)(int);\nstatic PyObject*(*dll_PyErr_NoMemory)(void);\nstatic PyObject*(*dll_PyErr_Occurred)(void);\nstatic void(*dll_PyErr_SetNone)(PyObject *);\nstatic void(*dll_PyErr_SetString)(PyObject *, const char *);\nstatic void(*dll_PyErr_SetObject)(PyObject *, PyObject *);\nstatic int(*dll_PyErr_ExceptionMatches)(PyObject *);\nstatic void(*dll_PyEval_InitThreads)(void);\nstatic void(*dll_PyEval_RestoreThread)(PyThreadState *);\nstatic PyThreadState*(*dll_PyEval_SaveThread)(void);\n# ifdef PY_CAN_RECURSE\nstatic PyGILState_STATE\t(*dll_PyGILState_Ensure)(void);\nstatic void (*dll_PyGILState_Release)(PyGILState_STATE);\n# endif\nstatic long(*dll_PyInt_AsLong)(PyObject *);\nstatic PyObject*(*dll_PyInt_FromLong)(long);\nstatic long(*dll_PyLong_AsLong)(PyObject *);\nstatic PyObject*(*dll_PyLong_FromLong)(long);\nstatic PyTypeObject* dll_PyBool_Type;\nstatic PyTypeObject* dll_PyInt_Type;\nstatic PyTypeObject* dll_PyLong_Type;\nstatic PyObject*(*dll_PyList_GetItem)(PyObject *, PyInt);\nstatic int(*dll_PyList_Append)(PyObject *, PyObject *);\nstatic int(*dll_PyList_Insert)(PyObject *, PyInt, PyObject *);\nstatic PyObject*(*dll_PyList_New)(PyInt size);\nstatic int(*dll_PyList_SetItem)(PyObject *, PyInt, PyObject *);\nstatic PyInt(*dll_PyList_Size)(PyObject *);\nstatic PyTypeObject* dll_PyList_Type;\nstatic int (*dll_PySequence_Check)(PyObject *);\nstatic PyInt(*dll_PySequence_Size)(PyObject *);\nstatic PyObject*(*dll_PySequence_GetItem)(PyObject *, PyInt);\nstatic PyObject*(*dll_PySequence_Fast)(PyObject *, const char *);\nstatic PyInt(*dll_PyTuple_Size)(PyObject *);\nstatic PyObject*(*dll_PyTuple_GetItem)(PyObject *, PyInt);\nstatic PyTypeObject* dll_PyTuple_Type;\nstatic int (*dll_PySlice_GetIndicesEx)(PySliceObject *r, PyInt length,\n\t\t     PyInt *start, PyInt *stop, PyInt *step,\n\t\t     PyInt *slicelen);\nstatic PyObject*(*dll_PyImport_ImportModule)(const char *);\nstatic PyObject*(*dll_PyDict_New)(void);\nstatic PyObject*(*dll_PyDict_GetItemString)(PyObject *, const char *);\nstatic int (*dll_PyDict_Next)(PyObject *, PyInt *, PyObject **, PyObject **);\nstatic PyTypeObject* dll_PyDict_Type;\n# ifndef PY_NO_MAPPING_KEYS\nstatic PyObject* (*dll_PyMapping_Keys)(PyObject *);\n# endif\nstatic PyObject* (*dll_PyObject_GetItem)(PyObject *, PyObject *);\nstatic PyObject* (*dll_PyObject_CallMethod)(PyObject *, char *, PyObject *);\nstatic int (*dll_PyMapping_Check)(PyObject *);\nstatic PyObject* (*dll_PyIter_Next)(PyObject *);\nstatic PyObject*(*dll_PyModule_GetDict)(PyObject *);\nstatic int(*dll_PyModule_AddObject)(PyObject *, const char *, PyObject *);\nstatic int(*dll_PyRun_SimpleString)(char *);\nstatic PyObject *(*dll_PyRun_String)(char *, int, PyObject *, PyObject *);\nstatic PyObject* (*dll_PyObject_GetAttrString)(PyObject *, const char *);\nstatic int (*dll_PyObject_HasAttrString)(PyObject *, const char *);\nstatic int (*dll_PyObject_SetAttrString)(PyObject *, const char *, PyObject *);\nstatic PyObject* (*dll_PyObject_CallFunctionObjArgs)(PyObject *, ...);\nstatic PyObject* (*dll_PyObject_CallFunction)(PyObject *, char *, ...);\nstatic PyObject* (*dll_PyObject_Call)(PyObject *, PyObject *, PyObject *);\nstatic PyObject* (*dll_PyObject_Repr)(PyObject *);\nstatic char*(*dll_PyString_AsString)(PyObject *);\nstatic int(*dll_PyString_AsStringAndSize)(PyObject *, char **, PyInt *);\nstatic PyObject*(*dll_PyString_FromString)(const char *);\nstatic PyObject*(*dll_PyString_FromFormat)(const char *, ...);\nstatic PyObject*(*dll_PyString_FromStringAndSize)(const char *, PyInt);\nstatic PyInt(*dll_PyString_Size)(PyObject *);\nstatic PyTypeObject* dll_PyString_Type;\nstatic PyTypeObject* dll_PyUnicode_Type;\nstatic PyObject *(*py_PyUnicode_AsEncodedString)(PyObject *, char *, char *);\nstatic double(*dll_PyFloat_AsDouble)(PyObject *);\nstatic PyObject*(*dll_PyFloat_FromDouble)(double);\nstatic PyTypeObject* dll_PyFloat_Type;\nstatic int(*dll_PyNumber_Check)(PyObject *);\nstatic PyObject*(*dll_PyNumber_Long)(PyObject *);\nstatic int(*dll_PySys_SetObject)(char *, PyObject *);\nstatic PyObject *(*dll_PySys_GetObject)(char *);\nstatic int(*dll_PySys_SetArgv)(int, char **);\nstatic PyTypeObject* dll_PyType_Type;\nstatic PyTypeObject* dll_PySlice_Type;\nstatic int (*dll_PyType_Ready)(PyTypeObject *type);\nstatic PyObject* (*dll_PyType_GenericAlloc)(PyTypeObject *type, PyInt nitems);\nstatic PyObject*(*dll_Py_BuildValue)(char *, ...);\nstatic PyObject*(*dll_Py_FindMethod)(struct PyMethodDef[], PyObject *, char *);\nstatic PyObject*(*dll_Py_InitModule4)(char *, struct PyMethodDef *, char *, PyObject *, int);\nstatic PyObject*(*dll_PyImport_AddModule)(char *);\nstatic void(*dll_Py_SetPythonHome)(char *home);\nstatic void(*dll_Py_Initialize)(void);\nstatic void(*dll_Py_Finalize)(void);\nstatic int(*dll_Py_IsInitialized)(void);\nstatic PyObject*(*dll__PyObject_New)(PyTypeObject *, PyObject *);\nstatic PyObject*(*dll__PyObject_GC_New)(PyTypeObject *);\n# ifdef Py_underscore_GC\nstatic void(*dll__PyObject_GC_Del)(void *);\nstatic void(*dll__PyObject_GC_UnTrack)(void *);\n# else\nstatic void(*dll_PyObject_GC_Del)(void *);\nstatic void(*dll_PyObject_GC_UnTrack)(void *);\n# endif\nstatic PyObject*(*dll__PyObject_Init)(PyObject *, PyTypeObject *);\nstatic PyObject* (*dll_PyObject_GetIter)(PyObject *);\nstatic int (*dll_PyObject_IsTrue)(PyObject *);\n# if defined(PY_VERSION_HEX) && PY_VERSION_HEX >= 0x02070000\nstatic iternextfunc dll__PyObject_NextNotImplemented;\n# endif\nstatic PyObject* dll__Py_NoneStruct;\nstatic PyObject* _Py_ZeroStruct;\nstatic PyObject* dll__Py_TrueStruct;\n# if defined(PY_VERSION_HEX) && PY_VERSION_HEX >= 0x02020000\nstatic int (*dll_PyType_IsSubtype)(PyTypeObject *, PyTypeObject *);\n#  ifdef Py_DEBUG\nstatic void (*dll__Py_NegativeRefcount)(const char *fname, int lineno, PyObject *op);\nstatic PyInt* dll__Py_RefTotal;\nstatic void (*dll__Py_Dealloc)(PyObject *obj);\n#  endif\n# endif\n# if defined(PY_VERSION_HEX) && PY_VERSION_HEX >= 0x02030000\n#  if defined(Py_DEBUG) && !defined(Py_DEBUG_NO_PYMALLOC)\nstatic void (*dll__PyObject_DebugFree)(void*);\nstatic void* (*dll__PyObject_DebugMalloc)(size_t);\n#  else\nstatic void* (*dll_PyObject_Malloc)(size_t);\nstatic void (*dll_PyObject_Free)(void*);\n#  endif\n# endif\n# ifdef PY_USE_CAPSULE\nstatic PyObject* (*dll_PyCapsule_New)(void *, char *, PyCapsule_Destructor);\nstatic void* (*dll_PyCapsule_GetPointer)(PyObject *, char *);\n# else\nstatic PyObject* (*dll_PyCObject_FromVoidPtr)(void *cobj, void (*destr)(void *));\nstatic void* (*dll_PyCObject_AsVoidPtr)(PyObject *);\n# endif\n# if defined(PY_VERSION_HEX) && PY_VERSION_HEX >= 0x02070000\nstatic int* dll_Py_NoSiteFlag;\n# endif\n\nstatic HINSTANCE hinstPython = 0; /* Instance of python.dll */\n\n/* Imported exception objects */\nstatic PyObject *imp_PyExc_AttributeError;\nstatic PyObject *imp_PyExc_IndexError;\nstatic PyObject *imp_PyExc_KeyError;\nstatic PyObject *imp_PyExc_KeyboardInterrupt;\nstatic PyObject *imp_PyExc_TypeError;\nstatic PyObject *imp_PyExc_ValueError;\nstatic PyObject *imp_PyExc_SystemExit;\nstatic PyObject *imp_PyExc_RuntimeError;\nstatic PyObject *imp_PyExc_ImportError;\nstatic PyObject *imp_PyExc_OverflowError;\n\n# define PyExc_AttributeError imp_PyExc_AttributeError\n# define PyExc_IndexError imp_PyExc_IndexError\n# define PyExc_KeyError imp_PyExc_KeyError\n# define PyExc_KeyboardInterrupt imp_PyExc_KeyboardInterrupt\n# define PyExc_TypeError imp_PyExc_TypeError\n# define PyExc_ValueError imp_PyExc_ValueError\n# define PyExc_SystemExit imp_PyExc_SystemExit\n# define PyExc_RuntimeError imp_PyExc_RuntimeError\n# define PyExc_ImportError imp_PyExc_ImportError\n# define PyExc_OverflowError imp_PyExc_OverflowError\n\n/*\n * Table of name to function pointer of python.\n */\n# define PYTHON_PROC FARPROC\nstatic struct\n{\n    char *name;\n    PYTHON_PROC *ptr;\n} python_funcname_table[] =\n{\n#ifndef PY_SSIZE_T_CLEAN\n    {\"PyArg_Parse\", (PYTHON_PROC*)&dll_PyArg_Parse},\n    {\"PyArg_ParseTuple\", (PYTHON_PROC*)&dll_PyArg_ParseTuple},\n    {\"Py_BuildValue\", (PYTHON_PROC*)&dll_Py_BuildValue},\n#else\n    {\"_PyArg_Parse_SizeT\", (PYTHON_PROC*)&dll_PyArg_Parse},\n    {\"_PyArg_ParseTuple_SizeT\", (PYTHON_PROC*)&dll_PyArg_ParseTuple},\n    {\"_Py_BuildValue_SizeT\", (PYTHON_PROC*)&dll_Py_BuildValue},\n#endif\n    {\"PyMem_Free\", (PYTHON_PROC*)&dll_PyMem_Free},\n    {\"PyMem_Malloc\", (PYTHON_PROC*)&dll_PyMem_Malloc},\n    {\"PyDict_SetItemString\", (PYTHON_PROC*)&dll_PyDict_SetItemString},\n    {\"PyErr_BadArgument\", (PYTHON_PROC*)&dll_PyErr_BadArgument},\n    {\"PyErr_NewException\", (PYTHON_PROC*)&dll_PyErr_NewException},\n    {\"PyErr_Clear\", (PYTHON_PROC*)&dll_PyErr_Clear},\n    {\"PyErr_Format\", (PYTHON_PROC*)&dll_PyErr_Format},\n    {\"PyErr_PrintEx\", (PYTHON_PROC*)&dll_PyErr_PrintEx},\n    {\"PyErr_NoMemory\", (PYTHON_PROC*)&dll_PyErr_NoMemory},\n    {\"PyErr_Occurred\", (PYTHON_PROC*)&dll_PyErr_Occurred},\n    {\"PyErr_SetNone\", (PYTHON_PROC*)&dll_PyErr_SetNone},\n    {\"PyErr_SetString\", (PYTHON_PROC*)&dll_PyErr_SetString},\n    {\"PyErr_SetObject\", (PYTHON_PROC*)&dll_PyErr_SetObject},\n    {\"PyErr_ExceptionMatches\", (PYTHON_PROC*)&dll_PyErr_ExceptionMatches},\n    {\"PyEval_InitThreads\", (PYTHON_PROC*)&dll_PyEval_InitThreads},\n    {\"PyEval_RestoreThread\", (PYTHON_PROC*)&dll_PyEval_RestoreThread},\n    {\"PyEval_SaveThread\", (PYTHON_PROC*)&dll_PyEval_SaveThread},\n# ifdef PY_CAN_RECURSE\n    {\"PyGILState_Ensure\", (PYTHON_PROC*)&dll_PyGILState_Ensure},\n    {\"PyGILState_Release\", (PYTHON_PROC*)&dll_PyGILState_Release},\n# endif\n    {\"PyInt_AsLong\", (PYTHON_PROC*)&dll_PyInt_AsLong},\n    {\"PyInt_FromLong\", (PYTHON_PROC*)&dll_PyInt_FromLong},\n    {\"PyLong_AsLong\", (PYTHON_PROC*)&dll_PyLong_AsLong},\n    {\"PyLong_FromLong\", (PYTHON_PROC*)&dll_PyLong_FromLong},\n    {\"PyBool_Type\", (PYTHON_PROC*)&dll_PyBool_Type},\n    {\"PyInt_Type\", (PYTHON_PROC*)&dll_PyInt_Type},\n    {\"PyLong_Type\", (PYTHON_PROC*)&dll_PyLong_Type},\n    {\"PyList_GetItem\", (PYTHON_PROC*)&dll_PyList_GetItem},\n    {\"PyList_Append\", (PYTHON_PROC*)&dll_PyList_Append},\n    {\"PyList_Insert\", (PYTHON_PROC*)&dll_PyList_Insert},\n    {\"PyList_New\", (PYTHON_PROC*)&dll_PyList_New},\n    {\"PyList_SetItem\", (PYTHON_PROC*)&dll_PyList_SetItem},\n    {\"PyList_Size\", (PYTHON_PROC*)&dll_PyList_Size},\n    {\"PyList_Type\", (PYTHON_PROC*)&dll_PyList_Type},\n    {\"PySequence_Size\", (PYTHON_PROC*)&dll_PySequence_Size},\n    {\"PySequence_Check\", (PYTHON_PROC*)&dll_PySequence_Check},\n    {\"PySequence_GetItem\", (PYTHON_PROC*)&dll_PySequence_GetItem},\n    {\"PySequence_Fast\", (PYTHON_PROC*)&dll_PySequence_Fast},\n    {\"PyTuple_GetItem\", (PYTHON_PROC*)&dll_PyTuple_GetItem},\n    {\"PyTuple_Size\", (PYTHON_PROC*)&dll_PyTuple_Size},\n    {\"PyTuple_Type\", (PYTHON_PROC*)&dll_PyTuple_Type},\n    {\"PySlice_GetIndicesEx\", (PYTHON_PROC*)&dll_PySlice_GetIndicesEx},\n    {\"PyImport_ImportModule\", (PYTHON_PROC*)&dll_PyImport_ImportModule},\n    {\"PyDict_GetItemString\", (PYTHON_PROC*)&dll_PyDict_GetItemString},\n    {\"PyDict_Next\", (PYTHON_PROC*)&dll_PyDict_Next},\n    {\"PyDict_New\", (PYTHON_PROC*)&dll_PyDict_New},\n    {\"PyDict_Type\", (PYTHON_PROC*)&dll_PyDict_Type},\n# ifndef PY_NO_MAPPING_KEYS\n    {\"PyMapping_Keys\", (PYTHON_PROC*)&dll_PyMapping_Keys},\n# endif\n    {\"PyObject_GetItem\", (PYTHON_PROC*)&dll_PyObject_GetItem},\n    {\"PyObject_CallMethod\", (PYTHON_PROC*)&dll_PyObject_CallMethod},\n    {\"PyMapping_Check\", (PYTHON_PROC*)&dll_PyMapping_Check},\n    {\"PyIter_Next\", (PYTHON_PROC*)&dll_PyIter_Next},\n    {\"PyModule_GetDict\", (PYTHON_PROC*)&dll_PyModule_GetDict},\n    {\"PyModule_AddObject\", (PYTHON_PROC*)&dll_PyModule_AddObject},\n    {\"PyRun_SimpleString\", (PYTHON_PROC*)&dll_PyRun_SimpleString},\n    {\"PyRun_String\", (PYTHON_PROC*)&dll_PyRun_String},\n    {\"PyObject_GetAttrString\", (PYTHON_PROC*)&dll_PyObject_GetAttrString},\n    {\"PyObject_HasAttrString\", (PYTHON_PROC*)&dll_PyObject_HasAttrString},\n    {\"PyObject_SetAttrString\", (PYTHON_PROC*)&dll_PyObject_SetAttrString},\n    {\"PyObject_CallFunctionObjArgs\", (PYTHON_PROC*)&dll_PyObject_CallFunctionObjArgs},\n    {\"PyObject_CallFunction\", (PYTHON_PROC*)&dll_PyObject_CallFunction},\n    {\"PyObject_Call\", (PYTHON_PROC*)&dll_PyObject_Call},\n    {\"PyObject_Repr\", (PYTHON_PROC*)&dll_PyObject_Repr},\n    {\"PyString_AsString\", (PYTHON_PROC*)&dll_PyString_AsString},\n    {\"PyString_AsStringAndSize\", (PYTHON_PROC*)&dll_PyString_AsStringAndSize},\n    {\"PyString_FromString\", (PYTHON_PROC*)&dll_PyString_FromString},\n    {\"PyString_FromFormat\", (PYTHON_PROC*)&dll_PyString_FromFormat},\n    {\"PyString_FromStringAndSize\", (PYTHON_PROC*)&dll_PyString_FromStringAndSize},\n    {\"PyString_Size\", (PYTHON_PROC*)&dll_PyString_Size},\n    {\"PyString_Type\", (PYTHON_PROC*)&dll_PyString_Type},\n    {\"PyUnicode_Type\", (PYTHON_PROC*)&dll_PyUnicode_Type},\n    {\"PyFloat_Type\", (PYTHON_PROC*)&dll_PyFloat_Type},\n    {\"PyFloat_AsDouble\", (PYTHON_PROC*)&dll_PyFloat_AsDouble},\n    {\"PyFloat_FromDouble\", (PYTHON_PROC*)&dll_PyFloat_FromDouble},\n    {\"PyImport_AddModule\", (PYTHON_PROC*)&dll_PyImport_AddModule},\n    {\"PyNumber_Check\", (PYTHON_PROC*)&dll_PyNumber_Check},\n    {\"PyNumber_Long\", (PYTHON_PROC*)&dll_PyNumber_Long},\n    {\"PySys_SetObject\", (PYTHON_PROC*)&dll_PySys_SetObject},\n    {\"PySys_GetObject\", (PYTHON_PROC*)&dll_PySys_GetObject},\n    {\"PySys_SetArgv\", (PYTHON_PROC*)&dll_PySys_SetArgv},\n    {\"PyType_Type\", (PYTHON_PROC*)&dll_PyType_Type},\n    {\"PySlice_Type\", (PYTHON_PROC*)&dll_PySlice_Type},\n    {\"PyType_Ready\", (PYTHON_PROC*)&dll_PyType_Ready},\n    {\"PyType_GenericAlloc\", (PYTHON_PROC*)&dll_PyType_GenericAlloc},\n    {\"Py_FindMethod\", (PYTHON_PROC*)&dll_Py_FindMethod},\n    {\"Py_SetPythonHome\", (PYTHON_PROC*)&dll_Py_SetPythonHome},\n    {\"Py_Initialize\", (PYTHON_PROC*)&dll_Py_Initialize},\n    {\"Py_Finalize\", (PYTHON_PROC*)&dll_Py_Finalize},\n    {\"Py_IsInitialized\", (PYTHON_PROC*)&dll_Py_IsInitialized},\n    {\"_PyObject_New\", (PYTHON_PROC*)&dll__PyObject_New},\n    {\"_PyObject_GC_New\", (PYTHON_PROC*)&dll__PyObject_GC_New},\n# ifdef Py_underscore_GC\n    {\"_PyObject_GC_Del\", (PYTHON_PROC*)&dll__PyObject_GC_Del},\n    {\"_PyObject_GC_UnTrack\", (PYTHON_PROC*)&dll__PyObject_GC_UnTrack},\n# else\n    {\"PyObject_GC_Del\", (PYTHON_PROC*)&dll_PyObject_GC_Del},\n    {\"PyObject_GC_UnTrack\", (PYTHON_PROC*)&dll_PyObject_GC_UnTrack},\n# endif\n    {\"PyObject_Init\", (PYTHON_PROC*)&dll__PyObject_Init},\n    {\"PyObject_GetIter\", (PYTHON_PROC*)&dll_PyObject_GetIter},\n    {\"PyObject_IsTrue\", (PYTHON_PROC*)&dll_PyObject_IsTrue},\n# if defined(PY_VERSION_HEX) && PY_VERSION_HEX >= 0x02070000\n    {\"_PyObject_NextNotImplemented\", (PYTHON_PROC*)&dll__PyObject_NextNotImplemented},\n# endif\n    {\"_Py_NoneStruct\", (PYTHON_PROC*)&dll__Py_NoneStruct},\n    {\"_Py_ZeroStruct\", (PYTHON_PROC*)&dll__Py_ZeroStruct},\n    {\"_Py_TrueStruct\", (PYTHON_PROC*)&dll__Py_TrueStruct},\n# if defined(PY_VERSION_HEX) && PY_VERSION_HEX >= 0x02020000\n#  ifdef Py_DEBUG\n    {\"_Py_NegativeRefcount\", (PYTHON_PROC*)&dll__Py_NegativeRefcount},\n    {\"_Py_RefTotal\", (PYTHON_PROC*)&dll__Py_RefTotal},\n    {\"_Py_Dealloc\", (PYTHON_PROC*)&dll__Py_Dealloc},\n#  endif\n    {\"PyType_IsSubtype\", (PYTHON_PROC*)&dll_PyType_IsSubtype},\n# endif\n# if defined(PY_VERSION_HEX) && PY_VERSION_HEX >= 0x02030000\n#  if defined(Py_DEBUG) && !defined(Py_DEBUG_NO_PYMALLOC)\n    {\"_PyObject_DebugFree\", (PYTHON_PROC*)&dll__PyObject_DebugFree},\n    {\"_PyObject_DebugMalloc\", (PYTHON_PROC*)&dll__PyObject_DebugMalloc},\n#  else\n    {\"PyObject_Malloc\", (PYTHON_PROC*)&dll_PyObject_Malloc},\n    {\"PyObject_Free\", (PYTHON_PROC*)&dll_PyObject_Free},\n#  endif\n# endif\n# if defined(PY_VERSION_HEX) && PY_VERSION_HEX >= 0x02050000 \\\n\t&& SIZEOF_SIZE_T != VIM_SIZEOF_INT\n#  ifdef Py_DEBUG\n    {\"Py_InitModule4TraceRefs_64\", (PYTHON_PROC*)&dll_Py_InitModule4},\n#  else\n    {\"Py_InitModule4_64\", (PYTHON_PROC*)&dll_Py_InitModule4},\n#  endif\n# else\n#  ifdef Py_DEBUG\n    {\"Py_InitModule4TraceRefs\", (PYTHON_PROC*)&dll_Py_InitModule4},\n#  else\n    {\"Py_InitModule4\", (PYTHON_PROC*)&dll_Py_InitModule4},\n#  endif\n# endif\n# ifdef PY_USE_CAPSULE\n    {\"PyCapsule_New\", (PYTHON_PROC*)&dll_PyCapsule_New},\n    {\"PyCapsule_GetPointer\", (PYTHON_PROC*)&dll_PyCapsule_GetPointer},\n# else\n    {\"PyCObject_FromVoidPtr\", (PYTHON_PROC*)&dll_PyCObject_FromVoidPtr},\n    {\"PyCObject_AsVoidPtr\", (PYTHON_PROC*)&dll_PyCObject_AsVoidPtr},\n# endif\n# if defined(PY_VERSION_HEX) && PY_VERSION_HEX >= 0x02070000\n    {\"Py_NoSiteFlag\", (PYTHON_PROC*)&dll_Py_NoSiteFlag},\n# endif\n    {\"\", NULL},\n};\n\n/*\n * Free python.dll\n */\n    static void\nend_dynamic_python(void)\n{\n    if (hinstPython)\n    {\n\tclose_dll(hinstPython);\n\thinstPython = 0;\n    }\n}\n\n/*\n * Load library and get all pointers.\n * Parameter 'libname' provides name of DLL.\n * Return OK or FAIL.\n */\n    static int\npython_runtime_link_init(char *libname, int verbose)\n{\n    int i;\n    void *ucs_as_encoded_string;\n\n#if !(defined(PY_NO_RTLD_GLOBAL) && defined(PY3_NO_RTLD_GLOBAL)) && defined(UNIX) && defined(FEAT_PYTHON3)\n    /* Can't have Python and Python3 loaded at the same time.\n     * It cause a crash, because RTLD_GLOBAL is needed for\n     * standard C extension libraries of one or both python versions. */\n    if (python3_loaded())\n    {\n\tif (verbose)\n\t    EMSG(_(\"E836: This Vim cannot execute :python after using :py3\"));\n\treturn FAIL;\n    }\n#endif\n\n    if (hinstPython)\n\treturn OK;\n    hinstPython = load_dll(libname);\n    if (!hinstPython)\n    {\n\tif (verbose)\n\t    EMSG2(_(e_loadlib), libname);\n\treturn FAIL;\n    }\n\n    for (i = 0; python_funcname_table[i].ptr; ++i)\n    {\n\tif ((*python_funcname_table[i].ptr = symbol_from_dll(hinstPython,\n\t\t\tpython_funcname_table[i].name)) == NULL)\n\t{\n\t    close_dll(hinstPython);\n\t    hinstPython = 0;\n\t    if (verbose)\n\t\tEMSG2(_(e_loadfunc), python_funcname_table[i].name);\n\t    return FAIL;\n\t}\n    }\n\n    /* Load unicode functions separately as only the ucs2 or the ucs4 functions\n     * will be present in the library. */\n    ucs_as_encoded_string = symbol_from_dll(hinstPython,\n\t\t\t\t\t     \"PyUnicodeUCS2_AsEncodedString\");\n    if (ucs_as_encoded_string == NULL)\n\tucs_as_encoded_string = symbol_from_dll(hinstPython,\n\t\t\t\t\t     \"PyUnicodeUCS4_AsEncodedString\");\n    if (ucs_as_encoded_string != NULL)\n\tpy_PyUnicode_AsEncodedString = ucs_as_encoded_string;\n    else\n    {\n\tclose_dll(hinstPython);\n\thinstPython = 0;\n\tif (verbose)\n\t    EMSG2(_(e_loadfunc), \"PyUnicode_UCSX_*\");\n\treturn FAIL;\n    }\n\n    return OK;\n}\n\n/*\n * If python is enabled (there is installed python on Windows system) return\n * TRUE, else FALSE.\n */\n    int\npython_enabled(int verbose)\n{\n    return python_runtime_link_init((char *)p_pydll, verbose) == OK;\n}\n\n/*\n * Load the standard Python exceptions - don't import the symbols from the\n * DLL, as this can cause errors (importing data symbols is not reliable).\n */\n    static void\nget_exceptions(void)\n{\n    PyObject *exmod = PyImport_ImportModule(\"exceptions\");\n    PyObject *exdict = PyModule_GetDict(exmod);\n    imp_PyExc_AttributeError = PyDict_GetItemString(exdict, \"AttributeError\");\n    imp_PyExc_IndexError = PyDict_GetItemString(exdict, \"IndexError\");\n    imp_PyExc_KeyError = PyDict_GetItemString(exdict, \"KeyError\");\n    imp_PyExc_KeyboardInterrupt = PyDict_GetItemString(exdict, \"KeyboardInterrupt\");\n    imp_PyExc_TypeError = PyDict_GetItemString(exdict, \"TypeError\");\n    imp_PyExc_ValueError = PyDict_GetItemString(exdict, \"ValueError\");\n    imp_PyExc_SystemExit = PyDict_GetItemString(exdict, \"SystemExit\");\n    imp_PyExc_RuntimeError = PyDict_GetItemString(exdict, \"RuntimeError\");\n    imp_PyExc_ImportError = PyDict_GetItemString(exdict, \"ImportError\");\n    imp_PyExc_OverflowError = PyDict_GetItemString(exdict, \"OverflowError\");\n    Py_XINCREF(imp_PyExc_AttributeError);\n    Py_XINCREF(imp_PyExc_IndexError);\n    Py_XINCREF(imp_PyExc_KeyError);\n    Py_XINCREF(imp_PyExc_KeyboardInterrupt);\n    Py_XINCREF(imp_PyExc_TypeError);\n    Py_XINCREF(imp_PyExc_ValueError);\n    Py_XINCREF(imp_PyExc_SystemExit);\n    Py_XINCREF(imp_PyExc_RuntimeError);\n    Py_XINCREF(imp_PyExc_ImportError);\n    Py_XINCREF(imp_PyExc_OverflowError);\n    Py_XDECREF(exmod);\n}\n#endif /* DYNAMIC_PYTHON */\n\nstatic int initialised = 0;\n#define PYINITIALISED initialised\n\n#define DESTRUCTOR_FINISH(self) self->ob_type->tp_free((PyObject*)self);\n\n#define WIN_PYTHON_REF(win) win->w_python_ref\n#define BUF_PYTHON_REF(buf) buf->b_python_ref\n#define TAB_PYTHON_REF(tab) tab->tp_python_ref\n\nstatic PyObject *OutputGetattr(PyObject *, char *);\nstatic PyObject *BufferGetattr(PyObject *, char *);\nstatic PyObject *WindowGetattr(PyObject *, char *);\nstatic PyObject *TabPageGetattr(PyObject *, char *);\nstatic PyObject *RangeGetattr(PyObject *, char *);\nstatic PyObject *DictionaryGetattr(PyObject *, char*);\nstatic PyObject *ListGetattr(PyObject *, char *);\nstatic PyObject *FunctionGetattr(PyObject *, char *);\n\n#ifndef Py_VISIT\n# define Py_VISIT(obj) visit(obj, arg)\n#endif\n#ifndef Py_CLEAR\n# define Py_CLEAR(obj) \\\n    { \\\n\tPy_XDECREF(obj); \\\n\tobj = NULL; \\\n    }\n#endif\n\n#if defined(HAVE_LOCALE_H) || defined(X_LOCALE)\n    static void *\npy_memsave(void *p, size_t len)\n{\n    void\t*r;\n\n    if (!(r = PyMem_Malloc(len)))\n\treturn NULL;\n    mch_memmove(r, p, len);\n    return r;\n}\n\n# define PY_STRSAVE(s) ((char_u *) py_memsave(s, STRLEN(s) + 1))\n#endif\n\ntypedef PySliceObject PySliceObject_T;\n\n/*\n * Include the code shared with if_python3.c\n */\n#include \"if_py_both.h\"\n\n\n/******************************************************\n * Internal function prototypes.\n */\n\nstatic int PythonMod_Init(void);\n\n\n/******************************************************\n * 1. Python interpreter main program.\n */\n\n#if PYTHON_API_VERSION < 1007 /* Python 1.4 */\ntypedef PyObject PyThreadState;\n#endif\n\n#ifndef PY_CAN_RECURSE\nstatic PyThreadState *saved_python_thread = NULL;\n\n/*\n * Suspend a thread of the Python interpreter, other threads are allowed to\n * run.\n */\n    static void\nPython_SaveThread(void)\n{\n    saved_python_thread = PyEval_SaveThread();\n}\n\n/*\n * Restore a thread of the Python interpreter, waits for other threads to\n * block.\n */\n    static void\nPython_RestoreThread(void)\n{\n    PyEval_RestoreThread(saved_python_thread);\n    saved_python_thread = NULL;\n}\n#endif\n\n    void\npython_end(void)\n{\n    static int recurse = 0;\n\n    /* If a crash occurs while doing this, don't try again. */\n    if (recurse != 0)\n\treturn;\n\n    ++recurse;\n\n#ifdef DYNAMIC_PYTHON\n    if (hinstPython && Py_IsInitialized())\n    {\n# ifdef PY_CAN_RECURSE\n\tPyGILState_Ensure();\n# else\n\tPython_RestoreThread();\t    /* enter python */\n# endif\n\tPy_Finalize();\n    }\n    end_dynamic_python();\n#else\n    if (Py_IsInitialized())\n    {\n# ifdef PY_CAN_RECURSE\n\tPyGILState_Ensure();\n# else\n\tPython_RestoreThread();\t    /* enter python */\n# endif\n\tPy_Finalize();\n    }\n#endif\n\n    --recurse;\n}\n\n#if (defined(DYNAMIC_PYTHON) && defined(FEAT_PYTHON3)) || defined(PROTO)\n    int\npython_loaded(void)\n{\n    return (hinstPython != 0);\n}\n#endif\n\n    static int\nPython_Init(void)\n{\n    if (!initialised)\n    {\n#if defined(PY_VERSION_HEX) && PY_VERSION_HEX >= 0x02070000\n\tPyObject *site;\n#endif\n\n#ifdef DYNAMIC_PYTHON\n\tif (!python_enabled(TRUE))\n\t{\n\t    EMSG(_(\"E263: Sorry, this command is disabled, the Python library could not be loaded.\"));\n\t    goto fail;\n\t}\n#endif\n\n#ifdef PYTHON_HOME\n# ifdef DYNAMIC_PYTHON\n\tif (mch_getenv((char_u *)\"PYTHONHOME\") == NULL)\n# endif\n\t    Py_SetPythonHome(PYTHON_HOME);\n#endif\n\n\tinit_structs();\n\n#if defined(PY_VERSION_HEX) && PY_VERSION_HEX >= 0x02070000\n\t/* Disable implicit 'import site', because it may cause Vim to exit\n\t * when it can't be found. */\n\tPy_NoSiteFlag++;\n#endif\n\n#if !defined(MACOS) || defined(MACOS_X_UNIX)\n\tPy_Initialize();\n#else\n\tPyMac_Initialize();\n#endif\n\n#if defined(PY_VERSION_HEX) && PY_VERSION_HEX >= 0x02070000\n\t/* 'import site' explicitly. */\n\tsite = PyImport_ImportModule(\"site\");\n\tif (site == NULL)\n\t{\n\t    EMSG(_(\"E887: Sorry, this command is disabled, the Python's site module could not be loaded.\"));\n\t    goto fail;\n\t}\n\tPy_DECREF(site);\n#endif\n\n\t/* Initialise threads, and below save the state using\n\t * PyEval_SaveThread.  Without the call to PyEval_SaveThread, thread\n\t * specific state (such as the system trace hook), will be lost\n\t * between invocations of Python code. */\n\tPyEval_InitThreads();\n#ifdef DYNAMIC_PYTHON\n\tget_exceptions();\n#endif\n\n\tif (PythonIO_Init_io())\n\t    goto fail;\n\n\tif (PythonMod_Init())\n\t    goto fail;\n\n\tglobals = PyModule_GetDict(PyImport_AddModule(\"__main__\"));\n\n\t/* Remove the element from sys.path that was added because of our\n\t * argv[0] value in PythonMod_Init().  Previously we used an empty\n\t * string, but depending on the OS we then get an empty entry or\n\t * the current directory in sys.path. */\n\tPyRun_SimpleString(\"import sys; sys.path = filter(lambda x: x != '/must>not&exist', sys.path)\");\n\n\t/* lock is created and acquired in PyEval_InitThreads() and thread\n\t * state is created in Py_Initialize()\n\t * there _PyGILState_NoteThreadState() also sets gilcounter to 1\n\t * (python must have threads enabled!)\n\t * so the following does both: unlock GIL and save thread state in TLS\n\t * without deleting thread state\n\t */\n#ifndef PY_CAN_RECURSE\n\tsaved_python_thread =\n#endif\n\t    PyEval_SaveThread();\n\n\tinitialised = 1;\n    }\n\n    return 0;\n\nfail:\n    /* We call PythonIO_Flush() here to print any Python errors.\n     * This is OK, as it is possible to call this function even\n     * if PythonIO_Init_io() has not completed successfully (it will\n     * not do anything in this case).\n     */\n    PythonIO_Flush();\n    return -1;\n}\n\n/*\n * External interface\n */\n    static void\nDoPyCommand(const char *cmd, rangeinitializer init_range, runner run, void *arg)\n{\n#ifndef PY_CAN_RECURSE\n    static int\t\trecursive = 0;\n#endif\n#if defined(MACOS) && !defined(MACOS_X_UNIX)\n    GrafPtr\t\toldPort;\n#endif\n#if defined(HAVE_LOCALE_H) || defined(X_LOCALE)\n    char\t\t*saved_locale;\n#endif\n#ifdef PY_CAN_RECURSE\n    PyGILState_STATE\tpygilstate;\n#endif\n\n#ifndef PY_CAN_RECURSE\n    if (recursive)\n    {\n\tEMSG(_(\"E659: Cannot invoke Python recursively\"));\n\treturn;\n    }\n    ++recursive;\n#endif\n\n#if defined(MACOS) && !defined(MACOS_X_UNIX)\n    GetPort(&oldPort);\n    /* Check if the Python library is available */\n    if ((Ptr)PyMac_Initialize == (Ptr)kUnresolvedCFragSymbolAddress)\n\tgoto theend;\n#endif\n    if (Python_Init())\n\tgoto theend;\n\n    init_range(arg);\n\n    Python_Release_Vim();\t    /* leave vim */\n\n#if defined(HAVE_LOCALE_H) || defined(X_LOCALE)\n    /* Python only works properly when the LC_NUMERIC locale is \"C\". */\n    saved_locale = setlocale(LC_NUMERIC, NULL);\n    if (saved_locale == NULL || STRCMP(saved_locale, \"C\") == 0)\n\tsaved_locale = NULL;\n    else\n    {\n\t/* Need to make a copy, value may change when setting new locale. */\n\tsaved_locale = (char *) PY_STRSAVE(saved_locale);\n\t(void)setlocale(LC_NUMERIC, \"C\");\n    }\n#endif\n\n#ifdef PY_CAN_RECURSE\n    pygilstate = PyGILState_Ensure();\n#else\n    Python_RestoreThread();\t    /* enter python */\n#endif\n\n    run((char *) cmd, arg\n#ifdef PY_CAN_RECURSE\n\t    , &pygilstate\n#endif\n\t    );\n\n#ifdef PY_CAN_RECURSE\n    PyGILState_Release(pygilstate);\n#else\n    Python_SaveThread();\t    /* leave python */\n#endif\n\n#if defined(HAVE_LOCALE_H) || defined(X_LOCALE)\n    if (saved_locale != NULL)\n    {\n\t(void)setlocale(LC_NUMERIC, saved_locale);\n\tPyMem_Free(saved_locale);\n    }\n#endif\n\n    Python_Lock_Vim();\t\t    /* enter vim */\n    PythonIO_Flush();\n#if defined(MACOS) && !defined(MACOS_X_UNIX)\n    SetPort(oldPort);\n#endif\n\ntheend:\n#ifndef PY_CAN_RECURSE\n    --recursive;\n#endif\n    return;\n}\n\n/*\n * \":python\"\n */\n    void\nex_python(exarg_T *eap)\n{\n    char_u *script;\n\n    script = script_get(eap, eap->arg);\n    if (!eap->skip)\n    {\n\tDoPyCommand(script == NULL ? (char *) eap->arg : (char *) script,\n\t\t(rangeinitializer) init_range_cmd,\n\t\t(runner) run_cmd,\n\t\t(void *) eap);\n    }\n    vim_free(script);\n}\n\n#define BUFFER_SIZE 1024\n\n/*\n * \":pyfile\"\n */\n    void\nex_pyfile(exarg_T *eap)\n{\n    static char buffer[BUFFER_SIZE];\n    const char *file = (char *)eap->arg;\n    char *p;\n\n    /* Have to do it like this. PyRun_SimpleFile requires you to pass a\n     * stdio file pointer, but Vim and the Python DLL are compiled with\n     * different options under Windows, meaning that stdio pointers aren't\n     * compatible between the two. Yuk.\n     *\n     * Put the string \"execfile('file')\" into buffer. But, we need to\n     * escape any backslashes or single quotes in the file name, so that\n     * Python won't mangle the file name.\n     */\n    strcpy(buffer, \"execfile('\");\n    p = buffer + 10; /* size of \"execfile('\" */\n\n    while (*file && p < buffer + (BUFFER_SIZE - 3))\n    {\n\tif (*file == '\\\\' || *file == '\\'')\n\t    *p++ = '\\\\';\n\t*p++ = *file++;\n    }\n\n    /* If we didn't finish the file name, we hit a buffer overflow */\n    if (*file != '\\0')\n\treturn;\n\n    /* Put in the terminating \"')\" and a null */\n    *p++ = '\\'';\n    *p++ = ')';\n    *p++ = '\\0';\n\n    /* Execute the file */\n    DoPyCommand(buffer,\n\t    (rangeinitializer) init_range_cmd,\n\t    (runner) run_cmd,\n\t    (void *) eap);\n}\n\n    void\nex_pydo(exarg_T *eap)\n{\n    DoPyCommand((char *)eap->arg,\n\t    (rangeinitializer) init_range_cmd,\n\t    (runner)run_do,\n\t    (void *)eap);\n}\n\n/******************************************************\n * 2. Python output stream: writes output via [e]msg().\n */\n\n/* Implementation functions\n */\n\n    static PyObject *\nOutputGetattr(PyObject *self, char *name)\n{\n    if (strcmp(name, \"softspace\") == 0)\n\treturn PyInt_FromLong(((OutputObject *)(self))->softspace);\n    else if (strcmp(name, \"__members__\") == 0)\n\treturn ObjectDir(NULL, OutputAttrs);\n    else if (strcmp(name, \"errors\") == 0)\n\treturn PyString_FromString(\"strict\");\n    else if (strcmp(name, \"encoding\") == 0)\n\treturn PyString_FromString(ENC_OPT);\n    return Py_FindMethod(OutputMethods, self, name);\n}\n\n/******************************************************\n * 3. Implementation of the Vim module for Python\n */\n\n/* Window type - Implementation functions\n * --------------------------------------\n */\n\n#define WindowType_Check(obj) ((obj)->ob_type == &WindowType)\n\n/* Buffer type - Implementation functions\n * --------------------------------------\n */\n\n#define BufferType_Check(obj) ((obj)->ob_type == &BufferType)\n\nstatic PyInt BufferAssItem(PyObject *, PyInt, PyObject *);\nstatic PyInt BufferAssSlice(PyObject *, PyInt, PyInt, PyObject *);\n\n/* Line range type - Implementation functions\n * --------------------------------------\n */\n\n#define RangeType_Check(obj) ((obj)->ob_type == &RangeType)\n\nstatic PyInt RangeAssItem(PyObject *, PyInt, PyObject *);\nstatic PyInt RangeAssSlice(PyObject *, PyInt, PyInt, PyObject *);\n\n/* Current objects type - Implementation functions\n * -----------------------------------------------\n */\n\nstatic PySequenceMethods BufferAsSeq = {\n    (PyInquiry)\t\tBufferLength,\t    /* sq_length,    len(x)   */\n    (binaryfunc)\t0,\t\t    /* BufferConcat, sq_concat, x+y */\n    (PyIntArgFunc)\t0,\t\t    /* BufferRepeat, sq_repeat, x*n */\n    (PyIntArgFunc)\tBufferItem,\t    /* sq_item,      x[i]     */\n    (PyIntIntArgFunc)\tBufferSlice,\t    /* sq_slice,     x[i:j]   */\n    (PyIntObjArgProc)\tBufferAssItem,\t    /* sq_ass_item,  x[i]=v   */\n    (PyIntIntObjArgProc) BufferAssSlice,    /* sq_ass_slice, x[i:j]=v */\n    (objobjproc)\t0,\n    (binaryfunc)\t0,\n    0,\n};\n\n/* Buffer object - Implementation\n */\n\n    static PyObject *\nBufferGetattr(PyObject *self, char *name)\n{\n    PyObject *r;\n\n    if ((r = BufferAttrValid((BufferObject *)(self), name)))\n\treturn r;\n\n    if (CheckBuffer((BufferObject *)(self)))\n\treturn NULL;\n\n    r = BufferAttr((BufferObject *)(self), name);\n    if (r || PyErr_Occurred())\n\treturn r;\n    else\n\treturn Py_FindMethod(BufferMethods, self, name);\n}\n\n/******************/\n\n    static PyInt\nBufferAssItem(PyObject *self, PyInt n, PyObject *val)\n{\n    return RBAsItem((BufferObject *)(self), n, val, 1, -1, NULL);\n}\n\n    static PyInt\nBufferAssSlice(PyObject *self, PyInt lo, PyInt hi, PyObject *val)\n{\n    return RBAsSlice((BufferObject *)(self), lo, hi, val, 1, -1, NULL);\n}\n\nstatic PySequenceMethods RangeAsSeq = {\n    (PyInquiry)\t\tRangeLength,\t      /* sq_length,    len(x)   */\n    (binaryfunc)\t0, /* RangeConcat, */ /* sq_concat,    x+y      */\n    (PyIntArgFunc)\t0, /* RangeRepeat, */ /* sq_repeat,    x*n      */\n    (PyIntArgFunc)\tRangeItem,\t      /* sq_item,      x[i]     */\n    (PyIntIntArgFunc)\tRangeSlice,\t      /* sq_slice,     x[i:j]   */\n    (PyIntObjArgProc)\tRangeAssItem,\t      /* sq_ass_item,  x[i]=v   */\n    (PyIntIntObjArgProc) RangeAssSlice,\t      /* sq_ass_slice, x[i:j]=v */\n    (objobjproc)\t0,\n#if PY_MAJOR_VERSION >= 2\n    (binaryfunc)\t0,\n    0,\n#endif\n};\n\n/* Line range object - Implementation\n */\n\n    static PyObject *\nRangeGetattr(PyObject *self, char *name)\n{\n    if (strcmp(name, \"start\") == 0)\n\treturn Py_BuildValue(Py_ssize_t_fmt, ((RangeObject *)(self))->start - 1);\n    else if (strcmp(name, \"end\") == 0)\n\treturn Py_BuildValue(Py_ssize_t_fmt, ((RangeObject *)(self))->end - 1);\n    else if (strcmp(name, \"__members__\") == 0)\n\treturn ObjectDir(NULL, RangeAttrs);\n    else\n\treturn Py_FindMethod(RangeMethods, self, name);\n}\n\n/****************/\n\n    static PyInt\nRangeAssItem(PyObject *self, PyInt n, PyObject *val)\n{\n    return RBAsItem(((RangeObject *)(self))->buf, n, val,\n\t\t     ((RangeObject *)(self))->start,\n\t\t     ((RangeObject *)(self))->end,\n\t\t     &((RangeObject *)(self))->end);\n}\n\n    static PyInt\nRangeAssSlice(PyObject *self, PyInt lo, PyInt hi, PyObject *val)\n{\n    return RBAsSlice(((RangeObject *)(self))->buf, lo, hi, val,\n\t\t      ((RangeObject *)(self))->start,\n\t\t      ((RangeObject *)(self))->end,\n\t\t      &((RangeObject *)(self))->end);\n}\n\n/* TabPage object - Implementation\n */\n\n    static PyObject *\nTabPageGetattr(PyObject *self, char *name)\n{\n    PyObject *r;\n\n    if ((r = TabPageAttrValid((TabPageObject *)(self), name)))\n\treturn r;\n\n    if (CheckTabPage((TabPageObject *)(self)))\n\treturn NULL;\n\n    r = TabPageAttr((TabPageObject *)(self), name);\n    if (r || PyErr_Occurred())\n\treturn r;\n    else\n\treturn Py_FindMethod(TabPageMethods, self, name);\n}\n\n/* Window object - Implementation\n */\n\n    static PyObject *\nWindowGetattr(PyObject *self, char *name)\n{\n    PyObject *r;\n\n    if ((r = WindowAttrValid((WindowObject *)(self), name)))\n\treturn r;\n\n    if (CheckWindow((WindowObject *)(self)))\n\treturn NULL;\n\n    r = WindowAttr((WindowObject *)(self), name);\n    if (r || PyErr_Occurred())\n\treturn r;\n    else\n\treturn Py_FindMethod(WindowMethods, self, name);\n}\n\n/* Tab page list object - Definitions\n */\n\nstatic PySequenceMethods TabListAsSeq = {\n    (PyInquiry)\t\tTabListLength,\t    /* sq_length,    len(x)   */\n    (binaryfunc)\t0,\t\t    /* sq_concat,    x+y      */\n    (PyIntArgFunc)\t0,\t\t    /* sq_repeat,    x*n      */\n    (PyIntArgFunc)\tTabListItem,\t    /* sq_item,      x[i]     */\n    (PyIntIntArgFunc)\t0,\t\t    /* sq_slice,     x[i:j]   */\n    (PyIntObjArgProc)\t0,\t\t    /* sq_ass_item,  x[i]=v   */\n    (PyIntIntObjArgProc) 0,\t\t    /* sq_ass_slice, x[i:j]=v */\n    (objobjproc)\t0,\n#if PY_MAJOR_VERSION >= 2\n    (binaryfunc)\t0,\n    0,\n#endif\n};\n\n/* Window list object - Definitions\n */\n\nstatic PySequenceMethods WinListAsSeq = {\n    (PyInquiry)\t\tWinListLength,\t    /* sq_length,    len(x)   */\n    (binaryfunc)\t0,\t\t    /* sq_concat,    x+y      */\n    (PyIntArgFunc)\t0,\t\t    /* sq_repeat,    x*n      */\n    (PyIntArgFunc)\tWinListItem,\t    /* sq_item,      x[i]     */\n    (PyIntIntArgFunc)\t0,\t\t    /* sq_slice,     x[i:j]   */\n    (PyIntObjArgProc)\t0,\t\t    /* sq_ass_item,  x[i]=v   */\n    (PyIntIntObjArgProc) 0,\t\t    /* sq_ass_slice, x[i:j]=v */\n    (objobjproc)\t0,\n#if PY_MAJOR_VERSION >= 2\n    (binaryfunc)\t0,\n    0,\n#endif\n};\n\n/* External interface\n */\n\n    void\npython_buffer_free(buf_T *buf)\n{\n    if (BUF_PYTHON_REF(buf) != NULL)\n    {\n\tBufferObject *bp = BUF_PYTHON_REF(buf);\n\tbp->buf = INVALID_BUFFER_VALUE;\n\tBUF_PYTHON_REF(buf) = NULL;\n    }\n}\n\n#if defined(FEAT_WINDOWS) || defined(PROTO)\n    void\npython_window_free(win_T *win)\n{\n    if (WIN_PYTHON_REF(win) != NULL)\n    {\n\tWindowObject *wp = WIN_PYTHON_REF(win);\n\twp->win = INVALID_WINDOW_VALUE;\n\tWIN_PYTHON_REF(win) = NULL;\n    }\n}\n\n    void\npython_tabpage_free(tabpage_T *tab)\n{\n    if (TAB_PYTHON_REF(tab) != NULL)\n    {\n\tTabPageObject *tp = TAB_PYTHON_REF(tab);\n\ttp->tab = INVALID_TABPAGE_VALUE;\n\tTAB_PYTHON_REF(tab) = NULL;\n    }\n}\n#endif\n\n    static int\nPythonMod_Init(void)\n{\n    /* The special value is removed from sys.path in Python_Init(). */\n    static char\t*(argv[2]) = {\"/must>not&exist/foo\", NULL};\n\n    if (init_types())\n\treturn -1;\n\n    /* Set sys.argv[] to avoid a crash in warn(). */\n    PySys_SetArgv(1, argv);\n\n    vim_module = Py_InitModule4(\"vim\", VimMethods, (char *)NULL,\n\t\t\t\t(PyObject *)NULL, PYTHON_API_VERSION);\n\n    if (populate_module(vim_module))\n\treturn -1;\n\n    if (init_sys_path())\n\treturn -1;\n\n    return 0;\n}\n\n/*************************************************************************\n * 4. Utility functions for handling the interface between Vim and Python.\n */\n\n/* Convert a Vim line into a Python string.\n * All internal newlines are replaced by null characters.\n *\n * On errors, the Python exception data is set, and NULL is returned.\n */\n    static PyObject *\nLineToString(const char *str)\n{\n    PyObject *result;\n    PyInt len = strlen(str);\n    char *p;\n\n    /* Allocate an Python string object, with uninitialised contents. We\n     * must do it this way, so that we can modify the string in place\n     * later. See the Python source, Objects/stringobject.c for details.\n     */\n    result = PyString_FromStringAndSize(NULL, len);\n    if (result == NULL)\n\treturn NULL;\n\n    p = PyString_AsString(result);\n\n    while (*str)\n    {\n\tif (*str == '\\n')\n\t    *p = '\\0';\n\telse\n\t    *p = *str;\n\n\t++p;\n\t++str;\n    }\n\n    return result;\n}\n\n    static PyObject *\nDictionaryGetattr(PyObject *self, char *name)\n{\n    DictionaryObject\t*this = ((DictionaryObject *) (self));\n\n    if (strcmp(name, \"locked\") == 0)\n\treturn PyInt_FromLong(this->dict->dv_lock);\n    else if (strcmp(name, \"scope\") == 0)\n\treturn PyInt_FromLong(this->dict->dv_scope);\n    else if (strcmp(name, \"__members__\") == 0)\n\treturn ObjectDir(NULL, DictionaryAttrs);\n\n    return Py_FindMethod(DictionaryMethods, self, name);\n}\n\n    static PyObject *\nListGetattr(PyObject *self, char *name)\n{\n    if (strcmp(name, \"locked\") == 0)\n\treturn PyInt_FromLong(((ListObject *)(self))->list->lv_lock);\n    else if (strcmp(name, \"__members__\") == 0)\n\treturn ObjectDir(NULL, ListAttrs);\n\n    return Py_FindMethod(ListMethods, self, name);\n}\n\n    static PyObject *\nFunctionGetattr(PyObject *self, char *name)\n{\n    PyObject\t*r;\n\n    r = FunctionAttr((FunctionObject *)(self), name);\n\n    if (r || PyErr_Occurred())\n\treturn r;\n    else\n\treturn Py_FindMethod(FunctionMethods, self, name);\n}\n\n    void\ndo_pyeval (char_u *str, typval_T *rettv)\n{\n    DoPyCommand((char *) str,\n\t    (rangeinitializer) init_range_eval,\n\t    (runner) run_eval,\n\t    (void *) rettv);\n    switch(rettv->v_type)\n    {\n\tcase VAR_DICT: ++rettv->vval.v_dict->dv_refcount; break;\n\tcase VAR_LIST: ++rettv->vval.v_list->lv_refcount; break;\n\tcase VAR_FUNC: func_ref(rettv->vval.v_string);    break;\n\tcase VAR_PARTIAL: ++rettv->vval.v_partial->pt_refcount; break;\n\tcase VAR_UNKNOWN:\n\t    rettv->v_type = VAR_NUMBER;\n\t    rettv->vval.v_number = 0;\n\t    break;\n\tcase VAR_NUMBER:\n\tcase VAR_STRING:\n\tcase VAR_FLOAT:\n\tcase VAR_SPECIAL:\n\tcase VAR_JOB:\n\tcase VAR_CHANNEL:\n\t    break;\n    }\n}\n\n/* Don't generate a prototype for the next function, it generates an error on\n * newer Python versions. */\n#if PYTHON_API_VERSION < 1007 /* Python 1.4 */ && !defined(PROTO)\n\n    char *\nPy_GetProgramName(void)\n{\n    return \"vim\";\n}\n#endif /* Python 1.4 */\n\n    int\nset_ref_in_python (int copyID)\n{\n    return set_ref_in_py(copyID);\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/src/if_perl.xs": "/* vi:set ts=8 sts=4 sw=4 noet:\n *\n * VIM - Vi IMproved\tby Bram Moolenaar\n *\n * Do \":help uganda\"  in Vim to read copying and usage conditions.\n * Do \":help credits\" in Vim to see a list of people who contributed.\n */\n/*\n * if_perl.xs: Main code for Perl interface support.\n *\t\tMostly written by Sven Verdoolaege.\n */\n\n#define _memory_h\t/* avoid memset redeclaration */\n#define IN_PERL_FILE\t/* don't include if_perl.pro from proto.h */\n\n/*\n * Currently 32-bit version of ActivePerl is built with VC6 (or MinGW since\n * ActivePerl 5.18).\n * (http://community.activestate.com/faq/windows-compilers-perl-modules)\n * It means that time_t should be 32-bit. However the default size of\n * time_t is 64-bit since VC8. So we have to define _USE_32BIT_TIME_T.\n */\n#if defined(WIN32) && !defined(_WIN64)\n# define _USE_32BIT_TIME_T\n#endif\n\n/*\n * Prevent including winsock.h.  perl.h tries to detect whether winsock.h is\n * already included before including winsock2.h, because winsock2.h isn't\n * compatible with winsock.h.  However the detection doesn't work with some\n * versions of MinGW.  If WIN32_LEAN_AND_MEAN is defined, windows.h will not\n * include winsock.h.\n */\n#ifdef WIN32\n# define WIN32_LEAN_AND_MEAN\n#endif\n\n#include \"vim.h\"\n\n/* Work around for perl-5.18.\n * Don't include \"perl\\lib\\CORE\\inline.h\" for now,\n * include it after Perl_sv_free2 is defined. */\n#ifdef DYNAMIC_PERL\n# define PERL_NO_INLINE_FUNCTIONS\n#endif\n\n/* Work around for using MSVC and ActivePerl 5.18. */\n#ifdef _MSC_VER\n# define __inline__ __inline\n#endif\n\n#ifdef __GNUC__\n# pragma GCC diagnostic push\n# pragma GCC diagnostic ignored \"-Wunused-variable\"\n#endif\n\n#include <EXTERN.h>\n#include <perl.h>\n#include <XSUB.h>\n#if defined(PERLIO_LAYERS) && !defined(USE_SFIO)\n# include <perliol.h>\n#endif\n\n/* Workaround for perl < 5.8.7 */\n#ifndef PERLIO_FUNCS_DECL\n# ifdef PERLIO_FUNCS_CONST\n#  define PERLIO_FUNCS_DECL(funcs) const PerlIO_funcs funcs\n#  define PERLIO_FUNCS_CAST(funcs) (PerlIO_funcs*)(funcs)\n# else\n#  define PERLIO_FUNCS_DECL(funcs) PerlIO_funcs funcs\n#  define PERLIO_FUNCS_CAST(funcs) (funcs)\n# endif\n#endif\n#ifndef SvREFCNT_inc_void_NN\n# define SvREFCNT_inc_void_NN SvREFCNT_inc\n#endif\n\n/*\n * Work around clashes between Perl and Vim namespace.\tproto.h doesn't\n * include if_perl.pro and perlsfio.pro when IN_PERL_FILE is defined, because\n * we need the CV typedef.  proto.h can't be moved to after including\n * if_perl.h, because we get all sorts of name clashes then.\n */\n#ifndef PROTO\n# ifndef __MINGW32__\n#  include \"proto/if_perl.pro\"\n#  include \"proto/if_perlsfio.pro\"\n# endif\n#endif\n\n/* Perl compatibility stuff. This should ensure compatibility with older\n * versions of Perl.\n */\n\n#ifndef PERL_VERSION\n# include <patchlevel.h>\n# define PERL_REVISION   5\n# define PERL_VERSION    PATCHLEVEL\n# define PERL_SUBVERSION SUBVERSION\n#endif\n\n/*\n * Quoting Jan Dubois of Active State:\n *    ActivePerl build 822 still identifies itself as 5.8.8 but already\n *    contains many of the changes from the upcoming Perl 5.8.9 release.\n *\n * The changes include addition of two symbols (Perl_sv_2iv_flags,\n * Perl_newXS_flags) not present in earlier releases.\n *\n * Jan Dubois suggested the following guarding scheme.\n *\n * Active State defined ACTIVEPERL_VERSION as a string in versions before\n * 5.8.8; and so the comparison to 822 below needs to be guarded.\n */\n#if (PERL_REVISION == 5) && (PERL_VERSION == 8) && (PERL_SUBVERSION >= 8)\n# if (ACTIVEPERL_VERSION >= 822) || (PERL_SUBVERSION >= 9)\n#  define PERL589_OR_LATER\n# endif\n#endif\n#if (PERL_REVISION == 5) && (PERL_VERSION >= 9)\n# define PERL589_OR_LATER\n#endif\n\n#if (PERL_REVISION == 5) && ((PERL_VERSION > 10) || \\\n    (PERL_VERSION == 10) && (PERL_SUBVERSION >= 1))\n# define PERL5101_OR_LATER\n#endif\n\n#ifndef pTHX\n# define pTHX void\n# define pTHX_\n#endif\n\n#ifndef EXTERN_C\n# define EXTERN_C\n#endif\n\n/* Compatibility hacks over */\n\nstatic PerlInterpreter *perl_interp = NULL;\nstatic void xs_init(pTHX);\nstatic void VIM_init(void);\nEXTERN_C void boot_DynaLoader(pTHX_ CV*);\n\n/*\n * For dynamic linked perl.\n */\n#if defined(DYNAMIC_PERL) || defined(PROTO)\n\n# ifndef DYNAMIC_PERL /* just generating prototypes */\n#  ifdef WIN3264\ntypedef int HANDLE;\n#  endif\ntypedef int XSINIT_t;\ntypedef int XSUBADDR_t;\n# endif\n# ifndef USE_ITHREADS\ntypedef int perl_key;\n# endif\n\n# ifndef WIN3264\n#  include <dlfcn.h>\n#  define HANDLE void*\n#  define PERL_PROC void*\n#  define load_dll(n) dlopen((n), RTLD_LAZY|RTLD_GLOBAL)\n#  define symbol_from_dll dlsym\n#  define close_dll dlclose\n# else\n#  define PERL_PROC FARPROC\n#  define load_dll vimLoadLib\n#  define symbol_from_dll GetProcAddress\n#  define close_dll FreeLibrary\n# endif\n/*\n * Wrapper defines\n */\n# define perl_alloc dll_perl_alloc\n# define perl_construct dll_perl_construct\n# define perl_parse dll_perl_parse\n# define perl_run dll_perl_run\n# define perl_destruct dll_perl_destruct\n# define perl_free dll_perl_free\n# define Perl_get_context dll_Perl_get_context\n# define Perl_croak dll_Perl_croak\n# ifdef PERL5101_OR_LATER\n#  define Perl_croak_xs_usage dll_Perl_croak_xs_usage\n# endif\n# ifndef PROTO\n#  define Perl_croak_nocontext dll_Perl_croak_nocontext\n#  define Perl_call_argv dll_Perl_call_argv\n#  define Perl_call_pv dll_Perl_call_pv\n#  define Perl_eval_sv dll_Perl_eval_sv\n#  define Perl_get_sv dll_Perl_get_sv\n#  define Perl_eval_pv dll_Perl_eval_pv\n#  define Perl_call_method dll_Perl_call_method\n# endif\n# define Perl_dowantarray dll_Perl_dowantarray\n# define Perl_free_tmps dll_Perl_free_tmps\n# define Perl_gv_stashpv dll_Perl_gv_stashpv\n# define Perl_markstack_grow dll_Perl_markstack_grow\n# define Perl_mg_find dll_Perl_mg_find\n# define Perl_newXS dll_Perl_newXS\n# define Perl_newSV dll_Perl_newSV\n# define Perl_newSViv dll_Perl_newSViv\n# define Perl_newSVpv dll_Perl_newSVpv\n# define Perl_pop_scope dll_Perl_pop_scope\n# define Perl_push_scope dll_Perl_push_scope\n# define Perl_save_int dll_Perl_save_int\n# if (PERL_REVISION == 5) && (PERL_VERSION >= 20)\n#  define Perl_save_strlen dll_Perl_save_strlen\n# endif\n# define Perl_stack_grow dll_Perl_stack_grow\n# define Perl_set_context dll_Perl_set_context\n# if (PERL_REVISION == 5) && (PERL_VERSION >= 14)\n#  define Perl_sv_2bool_flags dll_Perl_sv_2bool_flags\n#  if (PERL_REVISION == 5) && (PERL_VERSION < 22)\n#   define Perl_xs_apiversion_bootcheck dll_Perl_xs_apiversion_bootcheck\n#  endif\n# else\n#  define Perl_sv_2bool dll_Perl_sv_2bool\n# endif\n# define Perl_sv_2iv dll_Perl_sv_2iv\n# define Perl_sv_2mortal dll_Perl_sv_2mortal\n# if (PERL_REVISION == 5) && (PERL_VERSION >= 8)\n#  define Perl_sv_2pv_flags dll_Perl_sv_2pv_flags\n#  define Perl_sv_2pv_nolen dll_Perl_sv_2pv_nolen\n# else\n#  define Perl_sv_2pv dll_Perl_sv_2pv\n# endif\n# define Perl_sv_bless dll_Perl_sv_bless\n# if (PERL_REVISION == 5) && (PERL_VERSION >= 8)\n#  define Perl_sv_catpvn_flags dll_Perl_sv_catpvn_flags\n# else\n#  define Perl_sv_catpvn dll_Perl_sv_catpvn\n# endif\n# ifdef PERL589_OR_LATER\n#  define Perl_sv_2iv_flags dll_Perl_sv_2iv_flags\n#  define Perl_newXS_flags dll_Perl_newXS_flags\n# endif\n# define Perl_sv_free dll_Perl_sv_free\n# if (PERL_REVISION == 5) && (PERL_VERSION >= 10)\n#  define Perl_sv_free2 dll_Perl_sv_free2\n# endif\n# define Perl_sv_isa dll_Perl_sv_isa\n# define Perl_sv_magic dll_Perl_sv_magic\n# define Perl_sv_setiv dll_Perl_sv_setiv\n# define Perl_sv_setpv dll_Perl_sv_setpv\n# define Perl_sv_setpvn dll_Perl_sv_setpvn\n# if (PERL_REVISION == 5) && (PERL_VERSION >= 8)\n#  define Perl_sv_setsv_flags dll_Perl_sv_setsv_flags\n# else\n#  define Perl_sv_setsv dll_Perl_sv_setsv\n# endif\n# define Perl_sv_upgrade dll_Perl_sv_upgrade\n# define Perl_Tstack_sp_ptr dll_Perl_Tstack_sp_ptr\n# define Perl_Top_ptr dll_Perl_Top_ptr\n# define Perl_Tstack_base_ptr dll_Perl_Tstack_base_ptr\n# define Perl_Tstack_max_ptr dll_Perl_Tstack_max_ptr\n# define Perl_Ttmps_ix_ptr dll_Perl_Ttmps_ix_ptr\n# define Perl_Ttmps_floor_ptr dll_Perl_Ttmps_floor_ptr\n# define Perl_Tmarkstack_ptr_ptr dll_Perl_Tmarkstack_ptr_ptr\n# define Perl_Tmarkstack_max_ptr dll_Perl_Tmarkstack_max_ptr\n# define Perl_TSv_ptr dll_Perl_TSv_ptr\n# define Perl_TXpv_ptr dll_Perl_TXpv_ptr\n# define Perl_Tna_ptr dll_Perl_Tna_ptr\n# define Perl_Idefgv_ptr dll_Perl_Idefgv_ptr\n# define Perl_Ierrgv_ptr dll_Perl_Ierrgv_ptr\n# define Perl_Isv_yes_ptr dll_Perl_Isv_yes_ptr\n# define boot_DynaLoader dll_boot_DynaLoader\n# define Perl_Gthr_key_ptr dll_Perl_Gthr_key_ptr\n\n# define Perl_sys_init dll_Perl_sys_init\n# define Perl_sys_term dll_Perl_sys_term\n# define Perl_ISv_ptr dll_Perl_ISv_ptr\n# define Perl_Istack_max_ptr dll_Perl_Istack_max_ptr\n# define Perl_Istack_base_ptr dll_Perl_Istack_base_ptr\n# define Perl_Itmps_ix_ptr dll_Perl_Itmps_ix_ptr\n# define Perl_Itmps_floor_ptr dll_Perl_Itmps_floor_ptr\n# define Perl_IXpv_ptr dll_Perl_IXpv_ptr\n# define Perl_Ina_ptr dll_Perl_Ina_ptr\n# define Perl_Imarkstack_ptr_ptr dll_Perl_Imarkstack_ptr_ptr\n# define Perl_Imarkstack_max_ptr dll_Perl_Imarkstack_max_ptr\n# define Perl_Istack_sp_ptr dll_Perl_Istack_sp_ptr\n# define Perl_Iop_ptr dll_Perl_Iop_ptr\n# define Perl_call_list dll_Perl_call_list\n# define Perl_Iscopestack_ix_ptr dll_Perl_Iscopestack_ix_ptr\n# define Perl_Iunitcheckav_ptr dll_Perl_Iunitcheckav_ptr\n# if (PERL_REVISION == 5) && (PERL_VERSION >= 22)\n#  define Perl_xs_handshake dll_Perl_xs_handshake\n#  define Perl_xs_boot_epilog dll_Perl_xs_boot_epilog\n# endif\n# if (PERL_REVISION == 5) && (PERL_VERSION >= 14)\n#  ifdef USE_ITHREADS\n#   define PL_thr_key *dll_PL_thr_key\n#  endif\n# endif\n# define Perl_hv_iternext_flags dll_Perl_hv_iternext_flags\n# define Perl_hv_iterinit dll_Perl_hv_iterinit\n# define Perl_hv_iterkey dll_Perl_hv_iterkey\n# define Perl_hv_iterval dll_Perl_hv_iterval\n# define Perl_av_fetch dll_Perl_av_fetch\n# define Perl_av_len dll_Perl_av_len\n# define Perl_sv_2nv_flags dll_Perl_sv_2nv_flags\n# if defined(PERLIO_LAYERS) && !defined(USE_SFIO)\n#  define PerlIOBase_pushed dll_PerlIOBase_pushed\n#  define PerlIO_define_layer dll_PerlIO_define_layer\n# endif\n# if (PERL_REVISION == 5) && (PERL_VERSION >= 24)\n#  define Perl_savetmps dll_Perl_savetmps\n# endif\n\n/*\n * Declare HANDLE for perl.dll and function pointers.\n */\nstatic HANDLE hPerlLib = NULL;\n\nstatic PerlInterpreter* (*perl_alloc)();\nstatic void (*perl_construct)(PerlInterpreter*);\nstatic void (*perl_destruct)(PerlInterpreter*);\nstatic void (*perl_free)(PerlInterpreter*);\nstatic int (*perl_run)(PerlInterpreter*);\nstatic int (*perl_parse)(PerlInterpreter*, XSINIT_t, int, char**, char**);\nstatic void* (*Perl_get_context)(void);\nstatic void (*Perl_croak)(pTHX_ const char*, ...) __attribute__noreturn__;\n# ifdef PERL5101_OR_LATER\n/* Perl-5.18 has a different Perl_croak_xs_usage signature. */\n#  if (PERL_REVISION == 5) && (PERL_VERSION >= 18)\nstatic void (*Perl_croak_xs_usage)(const CV *const, const char *const params)\n\t\t\t\t\t\t    __attribute__noreturn__;\n#  else\nstatic void (*Perl_croak_xs_usage)(pTHX_ const CV *const, const char *const params)\n\t\t\t\t\t\t    __attribute__noreturn__;\n#  endif\n# endif\nstatic void (*Perl_croak_nocontext)(const char*, ...) __attribute__noreturn__;\nstatic I32 (*Perl_dowantarray)(pTHX);\nstatic void (*Perl_free_tmps)(pTHX);\nstatic HV* (*Perl_gv_stashpv)(pTHX_ const char*, I32);\n# if (PERL_REVISION == 5) && (PERL_VERSION >= 22)\nstatic I32* (*Perl_markstack_grow)(pTHX);\n# else\nstatic void (*Perl_markstack_grow)(pTHX);\n# endif\nstatic MAGIC* (*Perl_mg_find)(pTHX_ SV*, int);\nstatic CV* (*Perl_newXS)(pTHX_ char*, XSUBADDR_t, char*);\nstatic SV* (*Perl_newSV)(pTHX_ STRLEN);\nstatic SV* (*Perl_newSViv)(pTHX_ IV);\nstatic SV* (*Perl_newSVpv)(pTHX_ const char*, STRLEN);\nstatic I32 (*Perl_call_argv)(pTHX_ const char*, I32, char**);\nstatic I32 (*Perl_call_pv)(pTHX_ const char*, I32);\nstatic I32 (*Perl_eval_sv)(pTHX_ SV*, I32);\nstatic SV* (*Perl_get_sv)(pTHX_ const char*, I32);\nstatic SV* (*Perl_eval_pv)(pTHX_ const char*, I32);\nstatic SV* (*Perl_call_method)(pTHX_ const char*, I32);\nstatic void (*Perl_pop_scope)(pTHX);\nstatic void (*Perl_push_scope)(pTHX);\nstatic void (*Perl_save_int)(pTHX_ int*);\n# if (PERL_REVISION == 5) && (PERL_VERSION >= 20)\nstatic void (*Perl_save_strlen)(pTHX_ STRLEN* ptr);\n# endif\nstatic SV** (*Perl_stack_grow)(pTHX_ SV**, SV**p, int);\nstatic SV** (*Perl_set_context)(void*);\n# if (PERL_REVISION == 5) && (PERL_VERSION >= 14)\nstatic bool (*Perl_sv_2bool_flags)(pTHX_ SV*, I32);\n#  if (PERL_REVISION == 5) && (PERL_VERSION < 22)\nstatic void (*Perl_xs_apiversion_bootcheck)(pTHX_ SV *module, const char *api_p, STRLEN api_len);\n#  endif\n# else\nstatic bool (*Perl_sv_2bool)(pTHX_ SV*);\n# endif\nstatic IV (*Perl_sv_2iv)(pTHX_ SV*);\nstatic SV* (*Perl_sv_2mortal)(pTHX_ SV*);\n# if (PERL_REVISION == 5) && (PERL_VERSION >= 8)\nstatic char* (*Perl_sv_2pv_flags)(pTHX_ SV*, STRLEN*, I32);\nstatic char* (*Perl_sv_2pv_nolen)(pTHX_ SV*);\n# else\nstatic char* (*Perl_sv_2pv)(pTHX_ SV*, STRLEN*);\n# endif\nstatic SV* (*Perl_sv_bless)(pTHX_ SV*, HV*);\n# if (PERL_REVISION == 5) && (PERL_VERSION >= 8)\nstatic void (*Perl_sv_catpvn_flags)(pTHX_ SV* , const char*, STRLEN, I32);\n# else\nstatic void (*Perl_sv_catpvn)(pTHX_ SV*, const char*, STRLEN);\n# endif\n# ifdef PERL589_OR_LATER\nstatic IV (*Perl_sv_2iv_flags)(pTHX_ SV* sv, I32 flags);\nstatic CV * (*Perl_newXS_flags)(pTHX_ const char *name, XSUBADDR_t subaddr, const char *const filename, const char *const proto, U32 flags);\n# endif\nstatic void (*Perl_sv_free)(pTHX_ SV*);\nstatic int (*Perl_sv_isa)(pTHX_ SV*, const char*);\nstatic void (*Perl_sv_magic)(pTHX_ SV*, SV*, int, const char*, I32);\nstatic void (*Perl_sv_setiv)(pTHX_ SV*, IV);\nstatic void (*Perl_sv_setpv)(pTHX_ SV*, const char*);\nstatic void (*Perl_sv_setpvn)(pTHX_ SV*, const char*, STRLEN);\n# if (PERL_REVISION == 5) && (PERL_VERSION >= 8)\nstatic void (*Perl_sv_setsv_flags)(pTHX_ SV*, SV*, I32);\n# else\nstatic void (*Perl_sv_setsv)(pTHX_ SV*, SV*);\n# endif\nstatic bool (*Perl_sv_upgrade)(pTHX_ SV*, U32);\n# if (PERL_REVISION == 5) && (PERL_VERSION < 10)\nstatic SV*** (*Perl_Tstack_sp_ptr)(register PerlInterpreter*);\nstatic OP** (*Perl_Top_ptr)(register PerlInterpreter*);\nstatic SV*** (*Perl_Tstack_base_ptr)(register PerlInterpreter*);\nstatic SV*** (*Perl_Tstack_max_ptr)(register PerlInterpreter*);\nstatic I32* (*Perl_Ttmps_ix_ptr)(register PerlInterpreter*);\nstatic I32* (*Perl_Ttmps_floor_ptr)(register PerlInterpreter*);\nstatic I32** (*Perl_Tmarkstack_ptr_ptr)(register PerlInterpreter*);\nstatic I32** (*Perl_Tmarkstack_max_ptr)(register PerlInterpreter*);\nstatic SV** (*Perl_TSv_ptr)(register PerlInterpreter*);\nstatic XPV** (*Perl_TXpv_ptr)(register PerlInterpreter*);\nstatic STRLEN* (*Perl_Tna_ptr)(register PerlInterpreter*);\n# else\n/* Perl-5.18 has a different Perl_sv_free2 signature. */\n#  if (PERL_REVISION == 5) && (PERL_VERSION >= 18)\nstatic void (*Perl_sv_free2)(pTHX_ SV*, const U32);\n#  else\nstatic void (*Perl_sv_free2)(pTHX_ SV*);\n#  endif\nstatic void (*Perl_sys_init)(int* argc, char*** argv);\nstatic void (*Perl_sys_term)(void);\nstatic void (*Perl_call_list)(pTHX_ I32, AV*);\n#  if (PERL_REVISION == 5) && (PERL_VERSION >= 14)\n#  else\nstatic SV** (*Perl_ISv_ptr)(register PerlInterpreter*);\nstatic SV*** (*Perl_Istack_max_ptr)(register PerlInterpreter*);\nstatic SV*** (*Perl_Istack_base_ptr)(register PerlInterpreter*);\nstatic XPV** (*Perl_IXpv_ptr)(register PerlInterpreter*);\nstatic I32* (*Perl_Itmps_ix_ptr)(register PerlInterpreter*);\nstatic I32* (*Perl_Itmps_floor_ptr)(register PerlInterpreter*);\nstatic STRLEN* (*Perl_Ina_ptr)(register PerlInterpreter*);\nstatic I32** (*Perl_Imarkstack_ptr_ptr)(register PerlInterpreter*);\nstatic I32** (*Perl_Imarkstack_max_ptr)(register PerlInterpreter*);\nstatic SV*** (*Perl_Istack_sp_ptr)(register PerlInterpreter*);\nstatic OP** (*Perl_Iop_ptr)(register PerlInterpreter*);\nstatic I32* (*Perl_Iscopestack_ix_ptr)(register PerlInterpreter*);\nstatic AV** (*Perl_Iunitcheckav_ptr)(register PerlInterpreter*);\n#  endif\n# endif\n# if (PERL_REVISION == 5) && (PERL_VERSION >= 22)\nstatic I32 (*Perl_xs_handshake)(const U32, void *, const char *, ...);\nstatic void (*Perl_xs_boot_epilog)(pTHX_ const U32);\n# endif\n\n# if (PERL_REVISION == 5) && (PERL_VERSION >= 14)\n#  ifdef USE_ITHREADS\nstatic perl_key* dll_PL_thr_key;\n#  endif\n# else\nstatic GV** (*Perl_Idefgv_ptr)(register PerlInterpreter*);\nstatic GV** (*Perl_Ierrgv_ptr)(register PerlInterpreter*);\nstatic SV* (*Perl_Isv_yes_ptr)(register PerlInterpreter*);\nstatic perl_key* (*Perl_Gthr_key_ptr)_((pTHX));\n# endif\nstatic void (*boot_DynaLoader)_((pTHX_ CV*));\nstatic HE * (*Perl_hv_iternext_flags)(pTHX_ HV *, I32);\nstatic I32 (*Perl_hv_iterinit)(pTHX_ HV *);\nstatic char * (*Perl_hv_iterkey)(pTHX_ HE *, I32 *);\nstatic SV * (*Perl_hv_iterval)(pTHX_ HV *, HE *);\nstatic SV** (*Perl_av_fetch)(pTHX_ AV *, SSize_t, I32);\nstatic SSize_t (*Perl_av_len)(pTHX_ AV *);\nstatic NV (*Perl_sv_2nv_flags)(pTHX_ SV *const, const I32);\n# if defined(PERLIO_LAYERS) && !defined(USE_SFIO)\nstatic IV (*PerlIOBase_pushed)(pTHX_ PerlIO *, const char *, SV *, PerlIO_funcs *);\nstatic void (*PerlIO_define_layer)(pTHX_ PerlIO_funcs *);\n# endif\n# if (PERL_REVISION == 5) && (PERL_VERSION >= 24)\nstatic void (*Perl_savetmps)(pTHX);\n# endif\n\n/*\n * Table of name to function pointer of perl.\n */\nstatic struct {\n    char* name;\n    PERL_PROC* ptr;\n} perl_funcname_table[] = {\n    {\"perl_alloc\", (PERL_PROC*)&perl_alloc},\n    {\"perl_construct\", (PERL_PROC*)&perl_construct},\n    {\"perl_destruct\", (PERL_PROC*)&perl_destruct},\n    {\"perl_free\", (PERL_PROC*)&perl_free},\n    {\"perl_run\", (PERL_PROC*)&perl_run},\n    {\"perl_parse\", (PERL_PROC*)&perl_parse},\n    {\"Perl_get_context\", (PERL_PROC*)&Perl_get_context},\n    {\"Perl_croak\", (PERL_PROC*)&Perl_croak},\n# ifdef PERL5101_OR_LATER\n    {\"Perl_croak_xs_usage\", (PERL_PROC*)&Perl_croak_xs_usage},\n# endif\n# ifdef PERL_IMPLICIT_CONTEXT\n    {\"Perl_croak_nocontext\", (PERL_PROC*)&Perl_croak_nocontext},\n# endif\n    {\"Perl_dowantarray\", (PERL_PROC*)&Perl_dowantarray},\n    {\"Perl_free_tmps\", (PERL_PROC*)&Perl_free_tmps},\n    {\"Perl_gv_stashpv\", (PERL_PROC*)&Perl_gv_stashpv},\n    {\"Perl_markstack_grow\", (PERL_PROC*)&Perl_markstack_grow},\n    {\"Perl_mg_find\", (PERL_PROC*)&Perl_mg_find},\n    {\"Perl_newXS\", (PERL_PROC*)&Perl_newXS},\n    {\"Perl_newSV\", (PERL_PROC*)&Perl_newSV},\n    {\"Perl_newSViv\", (PERL_PROC*)&Perl_newSViv},\n    {\"Perl_newSVpv\", (PERL_PROC*)&Perl_newSVpv},\n    {\"Perl_call_argv\", (PERL_PROC*)&Perl_call_argv},\n    {\"Perl_call_pv\", (PERL_PROC*)&Perl_call_pv},\n    {\"Perl_eval_sv\", (PERL_PROC*)&Perl_eval_sv},\n    {\"Perl_get_sv\", (PERL_PROC*)&Perl_get_sv},\n    {\"Perl_eval_pv\", (PERL_PROC*)&Perl_eval_pv},\n    {\"Perl_call_method\", (PERL_PROC*)&Perl_call_method},\n    {\"Perl_pop_scope\", (PERL_PROC*)&Perl_pop_scope},\n    {\"Perl_push_scope\", (PERL_PROC*)&Perl_push_scope},\n    {\"Perl_save_int\", (PERL_PROC*)&Perl_save_int},\n# if (PERL_REVISION == 5) && (PERL_VERSION >= 20)\n    {\"Perl_save_strlen\", (PERL_PROC*)&Perl_save_strlen},\n# endif\n    {\"Perl_stack_grow\", (PERL_PROC*)&Perl_stack_grow},\n    {\"Perl_set_context\", (PERL_PROC*)&Perl_set_context},\n# if (PERL_REVISION == 5) && (PERL_VERSION >= 14)\n    {\"Perl_sv_2bool_flags\", (PERL_PROC*)&Perl_sv_2bool_flags},\n#  if (PERL_REVISION == 5) && (PERL_VERSION < 22)\n    {\"Perl_xs_apiversion_bootcheck\",(PERL_PROC*)&Perl_xs_apiversion_bootcheck},\n#  endif\n# else\n    {\"Perl_sv_2bool\", (PERL_PROC*)&Perl_sv_2bool},\n# endif\n    {\"Perl_sv_2iv\", (PERL_PROC*)&Perl_sv_2iv},\n    {\"Perl_sv_2mortal\", (PERL_PROC*)&Perl_sv_2mortal},\n# if (PERL_REVISION == 5) && (PERL_VERSION >= 8)\n    {\"Perl_sv_2pv_flags\", (PERL_PROC*)&Perl_sv_2pv_flags},\n    {\"Perl_sv_2pv_nolen\", (PERL_PROC*)&Perl_sv_2pv_nolen},\n# else\n    {\"Perl_sv_2pv\", (PERL_PROC*)&Perl_sv_2pv},\n# endif\n# ifdef PERL589_OR_LATER\n    {\"Perl_sv_2iv_flags\", (PERL_PROC*)&Perl_sv_2iv_flags},\n    {\"Perl_newXS_flags\", (PERL_PROC*)&Perl_newXS_flags},\n# endif\n    {\"Perl_sv_bless\", (PERL_PROC*)&Perl_sv_bless},\n# if (PERL_REVISION == 5) && (PERL_VERSION >= 8)\n    {\"Perl_sv_catpvn_flags\", (PERL_PROC*)&Perl_sv_catpvn_flags},\n# else\n    {\"Perl_sv_catpvn\", (PERL_PROC*)&Perl_sv_catpvn},\n# endif\n    {\"Perl_sv_free\", (PERL_PROC*)&Perl_sv_free},\n    {\"Perl_sv_isa\", (PERL_PROC*)&Perl_sv_isa},\n    {\"Perl_sv_magic\", (PERL_PROC*)&Perl_sv_magic},\n    {\"Perl_sv_setiv\", (PERL_PROC*)&Perl_sv_setiv},\n    {\"Perl_sv_setpv\", (PERL_PROC*)&Perl_sv_setpv},\n    {\"Perl_sv_setpvn\", (PERL_PROC*)&Perl_sv_setpvn},\n# if (PERL_REVISION == 5) && (PERL_VERSION >= 8)\n    {\"Perl_sv_setsv_flags\", (PERL_PROC*)&Perl_sv_setsv_flags},\n# else\n    {\"Perl_sv_setsv\", (PERL_PROC*)&Perl_sv_setsv},\n# endif\n    {\"Perl_sv_upgrade\", (PERL_PROC*)&Perl_sv_upgrade},\n# if (PERL_REVISION == 5) && (PERL_VERSION < 10)\n    {\"Perl_Tstack_sp_ptr\", (PERL_PROC*)&Perl_Tstack_sp_ptr},\n    {\"Perl_Top_ptr\", (PERL_PROC*)&Perl_Top_ptr},\n    {\"Perl_Tstack_base_ptr\", (PERL_PROC*)&Perl_Tstack_base_ptr},\n    {\"Perl_Tstack_max_ptr\", (PERL_PROC*)&Perl_Tstack_max_ptr},\n    {\"Perl_Ttmps_ix_ptr\", (PERL_PROC*)&Perl_Ttmps_ix_ptr},\n    {\"Perl_Ttmps_floor_ptr\", (PERL_PROC*)&Perl_Ttmps_floor_ptr},\n    {\"Perl_Tmarkstack_ptr_ptr\", (PERL_PROC*)&Perl_Tmarkstack_ptr_ptr},\n    {\"Perl_Tmarkstack_max_ptr\", (PERL_PROC*)&Perl_Tmarkstack_max_ptr},\n    {\"Perl_TSv_ptr\", (PERL_PROC*)&Perl_TSv_ptr},\n    {\"Perl_TXpv_ptr\", (PERL_PROC*)&Perl_TXpv_ptr},\n    {\"Perl_Tna_ptr\", (PERL_PROC*)&Perl_Tna_ptr},\n# else\n    {\"Perl_sv_free2\", (PERL_PROC*)&Perl_sv_free2},\n    {\"Perl_sys_init\", (PERL_PROC*)&Perl_sys_init},\n    {\"Perl_sys_term\", (PERL_PROC*)&Perl_sys_term},\n    {\"Perl_call_list\", (PERL_PROC*)&Perl_call_list},\n#  if (PERL_REVISION == 5) && (PERL_VERSION >= 14)\n#  else\n    {\"Perl_ISv_ptr\", (PERL_PROC*)&Perl_ISv_ptr},\n    {\"Perl_Istack_max_ptr\", (PERL_PROC*)&Perl_Istack_max_ptr},\n    {\"Perl_Istack_base_ptr\", (PERL_PROC*)&Perl_Istack_base_ptr},\n    {\"Perl_IXpv_ptr\", (PERL_PROC*)&Perl_IXpv_ptr},\n    {\"Perl_Itmps_ix_ptr\", (PERL_PROC*)&Perl_Itmps_ix_ptr},\n    {\"Perl_Itmps_floor_ptr\", (PERL_PROC*)&Perl_Itmps_floor_ptr},\n    {\"Perl_Ina_ptr\", (PERL_PROC*)&Perl_Ina_ptr},\n    {\"Perl_Imarkstack_ptr_ptr\", (PERL_PROC*)&Perl_Imarkstack_ptr_ptr},\n    {\"Perl_Imarkstack_max_ptr\", (PERL_PROC*)&Perl_Imarkstack_max_ptr},\n    {\"Perl_Istack_sp_ptr\", (PERL_PROC*)&Perl_Istack_sp_ptr},\n    {\"Perl_Iop_ptr\", (PERL_PROC*)&Perl_Iop_ptr},\n    {\"Perl_Iscopestack_ix_ptr\", (PERL_PROC*)&Perl_Iscopestack_ix_ptr},\n    {\"Perl_Iunitcheckav_ptr\", (PERL_PROC*)&Perl_Iunitcheckav_ptr},\n#  endif\n# endif\n# if (PERL_REVISION == 5) && (PERL_VERSION >= 22)\n    {\"Perl_xs_handshake\", (PERL_PROC*)&Perl_xs_handshake},\n    {\"Perl_xs_boot_epilog\", (PERL_PROC*)&Perl_xs_boot_epilog},\n# endif\n# if (PERL_REVISION == 5) && (PERL_VERSION >= 14)\n#  ifdef USE_ITHREADS\n    {\"PL_thr_key\", (PERL_PROC*)&dll_PL_thr_key},\n#  endif\n# else\n    {\"Perl_Idefgv_ptr\", (PERL_PROC*)&Perl_Idefgv_ptr},\n    {\"Perl_Ierrgv_ptr\", (PERL_PROC*)&Perl_Ierrgv_ptr},\n    {\"Perl_Isv_yes_ptr\", (PERL_PROC*)&Perl_Isv_yes_ptr},\n    {\"Perl_Gthr_key_ptr\", (PERL_PROC*)&Perl_Gthr_key_ptr},\n# endif\n    {\"boot_DynaLoader\", (PERL_PROC*)&boot_DynaLoader},\n    {\"Perl_hv_iternext_flags\", (PERL_PROC*)&Perl_hv_iternext_flags},\n    {\"Perl_hv_iterinit\", (PERL_PROC*)&Perl_hv_iterinit},\n    {\"Perl_hv_iterkey\", (PERL_PROC*)&Perl_hv_iterkey},\n    {\"Perl_hv_iterval\", (PERL_PROC*)&Perl_hv_iterval},\n    {\"Perl_av_fetch\", (PERL_PROC*)&Perl_av_fetch},\n    {\"Perl_av_len\", (PERL_PROC*)&Perl_av_len},\n    {\"Perl_sv_2nv_flags\", (PERL_PROC*)&Perl_sv_2nv_flags},\n# if defined(PERLIO_LAYERS) && !defined(USE_SFIO)\n    {\"PerlIOBase_pushed\", (PERL_PROC*)&PerlIOBase_pushed},\n    {\"PerlIO_define_layer\", (PERL_PROC*)&PerlIO_define_layer},\n# endif\n# if (PERL_REVISION == 5) && (PERL_VERSION >= 24)\n    {\"Perl_savetmps\", (PERL_PROC*)&Perl_savetmps},\n# endif\n    {\"\", NULL},\n};\n\n/* Work around for perl-5.18.\n * For now, only the definitions of S_SvREFCNT_dec are needed in\n * \"perl\\lib\\CORE\\inline.h\". */\n# if (PERL_REVISION == 5) && (PERL_VERSION >= 18)\nstatic void\nS_SvREFCNT_dec(pTHX_ SV *sv)\n{\n    if (LIKELY(sv != NULL)) {\n\tU32 rc = SvREFCNT(sv);\n\tif (LIKELY(rc > 1))\n\t    SvREFCNT(sv) = rc - 1;\n\telse\n\t    Perl_sv_free2(aTHX_ sv, rc);\n    }\n}\n# endif\n\n/*\n * Make all runtime-links of perl.\n *\n * 1. Get module handle using dlopen() or vimLoadLib().\n * 2. Get pointer to perl function by GetProcAddress.\n * 3. Repeat 2, until get all functions will be used.\n *\n * Parameter 'libname' provides name of DLL.\n * Return OK or FAIL.\n */\n    static int\nperl_runtime_link_init(char *libname, int verbose)\n{\n    int i;\n\n    if (hPerlLib != NULL)\n\treturn OK;\n    if ((hPerlLib = load_dll(libname)) == NULL)\n    {\n\tif (verbose)\n\t    EMSG2(_(\"E370: Could not load library %s\"), libname);\n\treturn FAIL;\n    }\n    for (i = 0; perl_funcname_table[i].ptr; ++i)\n    {\n\tif (!(*perl_funcname_table[i].ptr = symbol_from_dll(hPerlLib,\n\t\t\tperl_funcname_table[i].name)))\n\t{\n\t    close_dll(hPerlLib);\n\t    hPerlLib = NULL;\n\t    if (verbose)\n\t\tEMSG2(_(e_loadfunc), perl_funcname_table[i].name);\n\t    return FAIL;\n\t}\n    }\n    return OK;\n}\n\n/*\n * If runtime-link-perl(DLL) was loaded successfully, return TRUE.\n * There were no DLL loaded, return FALSE.\n */\n    int\nperl_enabled(int verbose)\n{\n    return perl_runtime_link_init((char *)p_perldll, verbose) == OK;\n}\n#endif /* DYNAMIC_PERL */\n\n#if defined(PERLIO_LAYERS) && !defined(USE_SFIO)\nstatic void vim_IOLayer_init(void);\n#endif\n\n/*\n * perl_init(): initialize perl interpreter\n * We have to call perl_parse to initialize some structures,\n * there's nothing to actually parse.\n */\n    static void\nperl_init(void)\n{\n    char *bootargs[] = { \"VI\", NULL };\n    int argc = 3;\n    static char *argv[] = { \"\", \"-e\", \"\" };\n\n#if (PERL_REVISION == 5) && (PERL_VERSION >= 10)\n    Perl_sys_init(&argc, (char***)&argv);\n#endif\n    perl_interp = perl_alloc();\n    perl_construct(perl_interp);\n    perl_parse(perl_interp, xs_init, argc, argv, 0);\n    perl_call_argv(\"VIM::bootstrap\", (long)G_DISCARD, bootargs);\n    VIM_init();\n#ifdef USE_SFIO\n    sfdisc(PerlIO_stdout(), sfdcnewvim());\n    sfdisc(PerlIO_stderr(), sfdcnewvim());\n    sfsetbuf(PerlIO_stdout(), NULL, 0);\n    sfsetbuf(PerlIO_stderr(), NULL, 0);\n#elif defined(PERLIO_LAYERS)\n    vim_IOLayer_init();\n#endif\n}\n\n/*\n * perl_end(): clean up after ourselves\n */\n    void\nperl_end(void)\n{\n    if (perl_interp)\n    {\n\tperl_run(perl_interp);\n\tperl_destruct(perl_interp);\n\tperl_free(perl_interp);\n\tperl_interp = NULL;\n#if (PERL_REVISION == 5) && (PERL_VERSION >= 10)\n\tPerl_sys_term();\n#endif\n    }\n#ifdef DYNAMIC_PERL\n    if (hPerlLib)\n    {\n\tclose_dll(hPerlLib);\n\thPerlLib = NULL;\n    }\n#endif\n}\n\n/*\n * msg_split(): send a message to the message handling routines\n * split at '\\n' first though.\n */\n    void\nmsg_split(\n    char_u\t*s,\n    int\t\tattr)\t/* highlighting attributes */\n{\n    char *next;\n    char *token = (char *)s;\n\n    while ((next = strchr(token, '\\n')) && !got_int)\n    {\n\t*next++ = '\\0';\t\t\t/* replace \\n with \\0 */\n\tmsg_attr((char_u *)token, attr);\n\ttoken = next;\n    }\n    if (*token && !got_int)\n\tmsg_attr((char_u *)token, attr);\n}\n\n#ifndef FEAT_EVAL\n/*\n * This stub is needed because an \"#ifdef FEAT_EVAL\" around Eval() doesn't\n * work properly.\n */\n    char_u *\neval_to_string(\n    char_u\t*arg UNUSED,\n    char_u\t**nextcmd UNUSED,\n    int\t\tdolist UNUSED)\n{\n    return NULL;\n}\n#endif\n\n/*\n * Create a new reference to an SV pointing to the SCR structure\n * The b_perl_private/w_perl_private part of the SCR structure points to the\n * SV, so there can only be one such SV for a particular SCR structure.  When\n * the last reference has gone (DESTROY is called),\n * b_perl_private/w_perl_private is reset; When the screen goes away before\n * all references are gone, the value of the SV is reset;\n * any subsequent use of any of those reference will produce\n * a warning. (see typemap)\n */\n\n    static SV *\nnewWINrv(SV *rv, win_T *ptr)\n{\n    sv_upgrade(rv, SVt_RV);\n    if (ptr->w_perl_private == NULL)\n    {\n\tptr->w_perl_private = newSV(0);\n\tsv_setiv(ptr->w_perl_private, PTR2IV(ptr));\n    }\n    else\n\tSvREFCNT_inc_void_NN(ptr->w_perl_private);\n    SvRV(rv) = ptr->w_perl_private;\n    SvROK_on(rv);\n    return sv_bless(rv, gv_stashpv(\"VIWIN\", TRUE));\n}\n\n    static SV *\nnewBUFrv(SV *rv, buf_T *ptr)\n{\n    sv_upgrade(rv, SVt_RV);\n    if (ptr->b_perl_private == NULL)\n    {\n\tptr->b_perl_private = newSV(0);\n\tsv_setiv(ptr->b_perl_private, PTR2IV(ptr));\n    }\n    else\n\tSvREFCNT_inc_void_NN(ptr->b_perl_private);\n    SvRV(rv) = ptr->b_perl_private;\n    SvROK_on(rv);\n    return sv_bless(rv, gv_stashpv(\"VIBUF\", TRUE));\n}\n\n/*\n * perl_win_free\n *\tRemove all references to the window to be destroyed\n */\n    void\nperl_win_free(win_T *wp)\n{\n    if (wp->w_perl_private)\n\tsv_setiv((SV *)wp->w_perl_private, 0);\n    return;\n}\n\n    void\nperl_buf_free(buf_T *bp)\n{\n    if (bp->b_perl_private)\n\tsv_setiv((SV *)bp->b_perl_private, 0);\n    return;\n}\n\n#ifndef PROTO\n# if (PERL_REVISION == 5) && (PERL_VERSION >= 8)\nI32 cur_val(pTHX_ IV iv, SV *sv);\n# else\nI32 cur_val(IV iv, SV *sv);\n# endif\n\n/*\n * Handler for the magic variables $main::curwin and $main::curbuf.\n * The handler is put into the magic vtbl for these variables.\n * (This is effectively a C-level equivalent of a tied variable).\n * There is no \"set\" function as the variables are read-only.\n */\n# if (PERL_REVISION == 5) && (PERL_VERSION >= 8)\nI32 cur_val(pTHX_ IV iv, SV *sv)\n# else\nI32 cur_val(IV iv, SV *sv)\n# endif\n{\n    SV *rv;\n    if (iv == 0)\n\trv = newWINrv(newSV(0), curwin);\n    else\n\trv = newBUFrv(newSV(0), curbuf);\n    sv_setsv(sv, rv);\n    SvREFCNT_dec(SvRV(rv));\n    return 0;\n}\n#endif /* !PROTO */\n\nstruct ufuncs cw_funcs = { cur_val, 0, 0 };\nstruct ufuncs cb_funcs = { cur_val, 0, 1 };\n\n/*\n * VIM_init(): Vim-specific initialisation.\n * Make the magical main::curwin and main::curbuf variables\n */\n    static void\nVIM_init(void)\n{\n    static char cw[] = \"main::curwin\";\n    static char cb[] = \"main::curbuf\";\n    SV *sv;\n\n    sv = perl_get_sv(cw, TRUE);\n    sv_magic(sv, NULL, 'U', (char *)&cw_funcs, sizeof(cw_funcs));\n    SvREADONLY_on(sv);\n\n    sv = perl_get_sv(cb, TRUE);\n    sv_magic(sv, NULL, 'U', (char *)&cb_funcs, sizeof(cb_funcs));\n    SvREADONLY_on(sv);\n\n    /*\n     * Setup the Safe compartment.\n     * It shouldn't be a fatal error if the Safe module is missing.\n     * XXX: Only shares the 'Msg' routine (which has to be called\n     * like 'Msg(...)').\n     */\n    (void)perl_eval_pv( \"if ( eval( 'require Safe' ) ) { $VIM::safe = Safe->new(); $VIM::safe->share_from( 'VIM', ['Msg'] ); }\", G_DISCARD | G_VOID );\n\n}\n\n#ifdef DYNAMIC_PERL\nstatic char *e_noperl = N_(\"Sorry, this command is disabled: the Perl library could not be loaded.\");\n#endif\n\n/*\n * \":perl\"\n */\n    void\nex_perl(exarg_T *eap)\n{\n    char\t*err;\n    char\t*script;\n    STRLEN\tlength;\n    SV\t\t*sv;\n#ifdef HAVE_SANDBOX\n    SV\t\t*safe;\n#endif\n\n    script = (char *)script_get(eap, eap->arg);\n    if (eap->skip)\n    {\n\tvim_free(script);\n\treturn;\n    }\n\n    if (perl_interp == NULL)\n    {\n#ifdef DYNAMIC_PERL\n\tif (!perl_enabled(TRUE))\n\t{\n\t    EMSG(_(e_noperl));\n\t    vim_free(script);\n\t    return;\n\t}\n#endif\n\tperl_init();\n    }\n\n    {\n    dSP;\n    ENTER;\n    SAVETMPS;\n\n    if (script == NULL)\n\tsv = newSVpv((char *)eap->arg, 0);\n    else\n    {\n\tsv = newSVpv(script, 0);\n\tvim_free(script);\n    }\n\n#ifdef HAVE_SANDBOX\n    if (sandbox)\n    {\n\tsafe = perl_get_sv(\"VIM::safe\", FALSE);\n# ifndef MAKE_TEST  /* avoid a warning for unreachable code */\n\tif (safe == NULL || !SvTRUE(safe))\n\t    EMSG(_(\"E299: Perl evaluation forbidden in sandbox without the Safe module\"));\n\telse\n# endif\n\t{\n\t    PUSHMARK(SP);\n\t    XPUSHs(safe);\n\t    XPUSHs(sv);\n\t    PUTBACK;\n\t    perl_call_method(\"reval\", G_DISCARD);\n\t}\n    }\n    else\n#endif\n\tperl_eval_sv(sv, G_DISCARD | G_NOARGS);\n\n    SvREFCNT_dec(sv);\n\n    err = SvPV(GvSV(PL_errgv), length);\n\n    FREETMPS;\n    LEAVE;\n\n    if (!length)\n\treturn;\n\n    msg_split((char_u *)err, highlight_attr[HLF_E]);\n    return;\n    }\n}\n\n    static int\nreplace_line(linenr_T *line, linenr_T *end)\n{\n    char *str;\n\n    if (SvOK(GvSV(PL_defgv)))\n    {\n\tstr = SvPV(GvSV(PL_defgv), PL_na);\n\tml_replace(*line, (char_u *)str, 1);\n\tchanged_bytes(*line, 0);\n    }\n    else\n    {\n\tml_delete(*line, FALSE);\n\tdeleted_lines_mark(*line, 1L);\n\t--(*end);\n\t--(*line);\n    }\n    return OK;\n}\n\nstatic struct ref_map_S {\n    void *vim_ref;\n    SV   *perl_ref;\n    struct ref_map_S *next;\n} *ref_map = NULL;\n\n    static void\nref_map_free(void)\n{\n    struct ref_map_S *tofree;\n    struct ref_map_S *refs = ref_map;\n\n    while (refs) {\n\ttofree = refs;\n\trefs = refs->next;\n\tvim_free(tofree);\n    }\n    ref_map = NULL;\n}\n\n    static struct ref_map_S *\nref_map_find_SV(SV *const sv)\n{\n    struct ref_map_S *refs = ref_map;\n    int count = 350;\n\n    while (refs) {\n\tif (refs->perl_ref == sv)\n\t    break;\n\trefs = refs->next;\n\tcount--;\n    }\n\n    if (!refs && count > 0) {\n\trefs = (struct ref_map_S *)alloc(sizeof(struct ref_map_S));\n\tif (!refs)\n\t    return NULL;\n\trefs->perl_ref = sv;\n\trefs->vim_ref = NULL;\n\trefs->next = ref_map;\n\tref_map = refs;\n    }\n\n    return refs;\n}\n\n    static int\nperl_to_vim(SV *sv, typval_T *rettv)\n{\n    if (SvROK(sv))\n\tsv = SvRV(sv);\n\n    switch (SvTYPE(sv)) {\n\tcase SVt_NULL:\n\t    break;\n\tcase SVt_NV:\t/* float */\n#ifdef FEAT_FLOAT\n\t    rettv->v_type\t= VAR_FLOAT;\n\t    rettv->vval.v_float = SvNV(sv);\n\t    break;\n#endif\n\tcase SVt_IV:\t/* integer */\n\t    if (!SvROK(sv)) { /* references should be string */\n\t\trettv->vval.v_number = SvIV(sv);\n\t\tbreak;\n\t    }\n\tcase SVt_PV:\t/* string */\n\t{\n\t    size_t  len\t\t= 0;\n\t    char *  str_from\t= SvPV(sv, len);\n\t    char_u *str_to\t= (char_u*)alloc(\n\t\t\t\t      (unsigned)(sizeof(char_u) * (len + 1)));\n\n\t    if (str_to) {\n\t\tstr_to[len] = '\\0';\n\n\t\twhile (len--) {\n\t\t    if (str_from[len] == '\\0')\n\t\t\tstr_to[len] = '\\n';\n\t\t    else\n\t\t\tstr_to[len] = str_from[len];\n\t\t}\n\t    }\n\n\t    rettv->v_type\t    = VAR_STRING;\n\t    rettv->vval.v_string    = str_to;\n\t    break;\n\t}\n\tcase SVt_PVAV:\t/* list */\n\t{\n\t    SSize_t\t\tsize;\n\t    listitem_T *\titem;\n\t    SV **\t\titem2;\n\t    list_T *\t\tlist;\n\t    struct ref_map_S *\trefs;\n\n\t    if ((refs = ref_map_find_SV(sv)) == NULL)\n\t\treturn FAIL;\n\n\t    if (refs->vim_ref)\n\t\tlist = (list_T *) refs->vim_ref;\n\t    else\n\t    {\n\t\tif ((list = list_alloc()) == NULL)\n\t\t    return FAIL;\n\t\trefs->vim_ref = list;\n\n\t\tfor (size = av_len((AV*)sv); size >= 0; size--)\n\t\t{\n\t\t    if ((item = listitem_alloc()) == NULL)\n\t\t\tbreak;\n\n\t\t    item->li_tv.v_type\t\t= VAR_NUMBER;\n\t\t    item->li_tv.v_lock\t\t= 0;\n\t\t    item->li_tv.vval.v_number\t= 0;\n\t\t    list_insert(list, item, list->lv_first);\n\n\t\t    item2 = av_fetch((AV *)sv, size, 0);\n\n\t\t    if (item2 == NULL || *item2 == NULL ||\n\t\t\t\t    perl_to_vim(*item2, &item->li_tv) == FAIL)\n\t\t\tbreak;\n\t\t}\n\t    }\n\n\t    list->lv_refcount++;\n\t    rettv->v_type\t= VAR_LIST;\n\t    rettv->vval.v_list\t= list;\n\t    break;\n\t}\n\tcase SVt_PVHV:\t/* dictionary */\n\t{\n\t    HE *\t\tentry;\n\t    I32\t\t\tkey_len;\n\t    char *\t\tkey;\n\t    dictitem_T *\titem;\n\t    SV *\t\titem2;\n\t    dict_T *\t\tdict;\n\t    struct ref_map_S *\trefs;\n\n\t    if ((refs = ref_map_find_SV(sv)) == NULL)\n\t\treturn FAIL;\n\n\t    if (refs->vim_ref)\n\t\tdict = (dict_T *) refs->vim_ref;\n\t    else\n\t    {\n\n\t\tif ((dict = dict_alloc()) == NULL)\n\t\t    return FAIL;\n\t\trefs->vim_ref = dict;\n\n\t\thv_iterinit((HV *)sv);\n\n\t\tfor (entry = hv_iternext((HV *)sv); entry; entry = hv_iternext((HV *)sv))\n\t\t{\n\t\t    key_len = 0;\n\t\t    key = hv_iterkey(entry, &key_len);\n\n\t\t    if (!key || !key_len || strlen(key) < (size_t)key_len) {\n\t\t\tEMSG2(\"Malformed key Dictionary '%s'\", key && *key ? key : \"(empty)\");\n\t\t\tbreak;\n\t\t    }\n\n\t\t    if ((item = dictitem_alloc((char_u *)key)) == NULL)\n\t\t\tbreak;\n\n\t\t    item->di_tv.v_type\t\t= VAR_NUMBER;\n\t\t    item->di_tv.v_lock\t\t= 0;\n\t\t    item->di_tv.vval.v_number\t= 0;\n\n\t\t    if (dict_add(dict, item) == FAIL) {\n\t\t\tdictitem_free(item);\n\t\t\tbreak;\n\t\t    }\n\t\t    item2 = hv_iterval((HV *)sv, entry);\n\t\t    if (item2 == NULL || perl_to_vim(item2, &item->di_tv) == FAIL)\n\t\t\tbreak;\n\t\t}\n\t    }\n\n\t    dict->dv_refcount++;\n\t    rettv->v_type\t= VAR_DICT;\n\t    rettv->vval.v_dict\t= dict;\n\t    break;\n\t}\n\tdefault:\t/* not convertible */\n\t{\n\t    char *val\t    = SvPV_nolen(sv);\n\t    rettv->v_type   = VAR_STRING;\n\t    rettv->vval.v_string = val ? vim_strsave((char_u *)val) : NULL;\n\t    break;\n\t}\n    }\n    return OK;\n}\n\n/*\n * \"perleval()\"\n */\n    void\ndo_perleval(char_u *str, typval_T *rettv)\n{\n    char\t*err = NULL;\n    STRLEN\terr_len = 0;\n    SV\t\t*sv = NULL;\n#ifdef HAVE_SANDBOX\n    SV\t\t*safe;\n#endif\n\n    if (perl_interp == NULL)\n    {\n#ifdef DYNAMIC_PERL\n\tif (!perl_enabled(TRUE))\n\t{\n\t    EMSG(_(e_noperl));\n\t    return;\n\t}\n#endif\n\tperl_init();\n    }\n\n    {\n\tdSP;\n\tENTER;\n\tSAVETMPS;\n\n#ifdef HAVE_SANDBOX\n\tif (sandbox)\n\t{\n\t    safe = get_sv(\"VIM::safe\", FALSE);\n# ifndef MAKE_TEST  /* avoid a warning for unreachable code */\n\t    if (safe == NULL || !SvTRUE(safe))\n\t\tEMSG(_(\"E299: Perl evaluation forbidden in sandbox without the Safe module\"));\n\t    else\n# endif\n\t    {\n\t\tsv = newSVpv((char *)str, 0);\n\t\tPUSHMARK(SP);\n\t\tXPUSHs(safe);\n\t\tXPUSHs(sv);\n\t\tPUTBACK;\n\t\tcall_method(\"reval\", G_SCALAR);\n\t\tSPAGAIN;\n\t\tSvREFCNT_dec(sv);\n\t\tsv = POPs;\n\t    }\n\t}\n\telse\n#endif /* HAVE_SANDBOX */\n\t    sv = eval_pv((char *)str, 0);\n\n\tif (sv) {\n\t    perl_to_vim(sv, rettv);\n\t    ref_map_free();\n\t    err = SvPV(GvSV(PL_errgv), err_len);\n\t}\n\tPUTBACK;\n\tFREETMPS;\n\tLEAVE;\n    }\n    if (err_len)\n\tmsg_split((char_u *)err, highlight_attr[HLF_E]);\n}\n\n/*\n * \":perldo\".\n */\n    void\nex_perldo(exarg_T *eap)\n{\n    STRLEN\tlength;\n    SV\t\t*sv;\n    char\t*str;\n    linenr_T\ti;\n\n    if (bufempty())\n\treturn;\n\n    if (perl_interp == NULL)\n    {\n#ifdef DYNAMIC_PERL\n\tif (!perl_enabled(TRUE))\n\t{\n\t    EMSG(_(e_noperl));\n\t    return;\n\t}\n#endif\n\tperl_init();\n    }\n    {\n    dSP;\n    length = strlen((char *)eap->arg);\n    sv = newSV(length + sizeof(\"sub VIM::perldo {\") - 1 + 1);\n    sv_setpvn(sv, \"sub VIM::perldo {\", sizeof(\"sub VIM::perldo {\") - 1);\n    sv_catpvn(sv, (char *)eap->arg, length);\n    sv_catpvn(sv, \"}\", 1);\n    perl_eval_sv(sv, G_DISCARD | G_NOARGS);\n    SvREFCNT_dec(sv);\n    str = SvPV(GvSV(PL_errgv), length);\n    if (length)\n\tgoto err;\n\n    if (u_save(eap->line1 - 1, eap->line2 + 1) != OK)\n\treturn;\n\n    ENTER;\n    SAVETMPS;\n    for (i = eap->line1; i <= eap->line2; i++)\n    {\n\tsv_setpv(GvSV(PL_defgv), (char *)ml_get(i));\n\tPUSHMARK(sp);\n\tperl_call_pv(\"VIM::perldo\", G_SCALAR | G_EVAL);\n\tstr = SvPV(GvSV(PL_errgv), length);\n\tif (length)\n\t    break;\n\tSPAGAIN;\n\tif (SvTRUEx(POPs))\n\t{\n\t    if (replace_line(&i, &eap->line2) != OK)\n\t    {\n\t\tPUTBACK;\n\t\tbreak;\n\t    }\n\t}\n\tPUTBACK;\n    }\n    FREETMPS;\n    LEAVE;\n    check_cursor();\n    update_screen(NOT_VALID);\n    if (!length)\n\treturn;\n\nerr:\n    msg_split((char_u *)str, highlight_attr[HLF_E]);\n    return;\n    }\n}\n\n#if defined(PERLIO_LAYERS) && !defined(USE_SFIO)\ntypedef struct {\n    struct _PerlIO base;\n    int attr;\n} PerlIOVim;\n\n    static IV\nPerlIOVim_pushed(pTHX_ PerlIO *f, const char *mode,\n\t\t SV *arg, PerlIO_funcs *tab)\n{\n    PerlIOVim *s = PerlIOSelf(f, PerlIOVim);\n    s->attr = 0;\n    if (arg && SvPOK(arg)) {\n\tint id = syn_name2id((char_u *)SvPV_nolen(arg));\n\tif (id != 0)\n\t    s->attr = syn_id2attr(id);\n    }\n    return PerlIOBase_pushed(aTHX_ f, mode, (SV *)NULL, tab);\n}\n\n    static SSize_t\nPerlIOVim_write(pTHX_ PerlIO *f, const void *vbuf, Size_t count)\n{\n    char_u *str;\n    PerlIOVim * s = PerlIOSelf(f, PerlIOVim);\n\n    str = vim_strnsave((char_u *)vbuf, (int)count);\n    if (str == NULL)\n\treturn 0;\n    msg_split((char_u *)str, s->attr);\n    vim_free(str);\n\n    return (SSize_t)count;\n}\n\nstatic PERLIO_FUNCS_DECL(PerlIO_Vim) = {\n    sizeof(PerlIO_funcs),\n    \"Vim\",\n    sizeof(PerlIOVim),\n    PERLIO_K_DUMMY,\t/* flags */\n    PerlIOVim_pushed,\n    NULL,\t\t/* popped */\n    NULL,\t\t/* open */\n    NULL,\t\t/* binmode */\n    NULL,\t\t/* arg */\n    NULL,\t\t/* fileno */\n    NULL,\t\t/* dup */\n    NULL,\t\t/* read */\n    NULL,\t\t/* unread */\n    PerlIOVim_write,\n    NULL,\t\t/* seek */\n    NULL,\t\t/* tell */\n    NULL,\t\t/* close */\n    NULL,\t\t/* flush */\n    NULL,\t\t/* fill */\n    NULL,\t\t/* eof */\n    NULL,\t\t/* error */\n    NULL,\t\t/* clearerr */\n    NULL,\t\t/* setlinebuf */\n    NULL,\t\t/* get_base */\n    NULL,\t\t/* get_bufsiz */\n    NULL,\t\t/* get_ptr */\n    NULL,\t\t/* get_cnt */\n    NULL\t\t/* set_ptrcnt */\n};\n\n/* Use Vim routine for print operator */\n    static void\nvim_IOLayer_init(void)\n{\n    PerlIO_define_layer(aTHX_ PERLIO_FUNCS_CAST(&PerlIO_Vim));\n    (void)eval_pv(   \"binmode(STDOUT, ':Vim')\"\n                \"  && binmode(STDERR, ':Vim(ErrorMsg)');\", 0);\n}\n#endif /* PERLIO_LAYERS && !USE_SFIO */\n\n#ifndef FEAT_WINDOWS\n    int\nwin_valid(win_T *w)\n{\n    return TRUE;\n}\n    int\nwin_count(void)\n{\n    return 1;\n}\n    win_T *\nwin_find_nr(int n)\n{\n    return curwin;\n}\n#endif\n\nXS(boot_VIM);\n\n    static void\nxs_init(pTHX)\n{\n    char *file = __FILE__;\n\n    /* DynaLoader is a special case */\n    newXS(\"DynaLoader::boot_DynaLoader\", boot_DynaLoader, file);\n    newXS(\"VIM::bootstrap\", boot_VIM, file);\n}\n\ntypedef win_T *\tVIWIN;\ntypedef buf_T *\tVIBUF;\n\nMODULE = VIM\t    PACKAGE = VIM\n\nvoid\nMsg(text, hl=NULL)\n    char\t*text;\n    char\t*hl;\n\n    PREINIT:\n    int\t\tattr;\n    int\t\tid;\n\n    PPCODE:\n    if (text != NULL)\n    {\n\tattr = 0;\n\tif (hl != NULL)\n\t{\n\t    id = syn_name2id((char_u *)hl);\n\t    if (id != 0)\n\t\tattr = syn_id2attr(id);\n\t}\n\tmsg_split((char_u *)text, attr);\n    }\n\nvoid\nSetOption(line)\n    char *line;\n\n    PPCODE:\n    if (line != NULL)\n\tdo_set((char_u *)line, 0);\n    update_screen(NOT_VALID);\n\nvoid\nDoCommand(line)\n    char *line;\n\n    PPCODE:\n    if (line != NULL)\n\tdo_cmdline_cmd((char_u *)line);\n\nvoid\nEval(str)\n    char *str;\n\n    PREINIT:\n\tchar_u *value;\n    PPCODE:\n\tvalue = eval_to_string((char_u *)str, (char_u **)0, TRUE);\n\tif (value == NULL)\n\t{\n\t    XPUSHs(sv_2mortal(newSViv(0)));\n\t    XPUSHs(sv_2mortal(newSVpv(\"\", 0)));\n\t}\n\telse\n\t{\n\t    XPUSHs(sv_2mortal(newSViv(1)));\n\t    XPUSHs(sv_2mortal(newSVpv((char *)value, 0)));\n\t    vim_free(value);\n\t}\n\nvoid\nBuffers(...)\n\n    PREINIT:\n    buf_T *vimbuf;\n    int i, b;\n\n    PPCODE:\n    if (items == 0)\n    {\n\tif (GIMME == G_SCALAR)\n\t{\n\t    i = 0;\n\t    FOR_ALL_BUFFERS(vimbuf)\n\t\t++i;\n\n\t    XPUSHs(sv_2mortal(newSViv(i)));\n\t}\n\telse\n\t{\n\t    FOR_ALL_BUFFERS(vimbuf)\n\t\tXPUSHs(newBUFrv(newSV(0), vimbuf));\n\t}\n    }\n    else\n    {\n\tfor (i = 0; i < items; i++)\n\t{\n\t    SV *sv = ST(i);\n\t    if (SvIOK(sv))\n\t\tb = (int) SvIV(ST(i));\n\t    else\n\t    {\n\t\tchar_u *pat;\n\t\tSTRLEN len;\n\n\t\tpat = (char_u *)SvPV(sv, len);\n\t\t++emsg_off;\n\t\tb = buflist_findpat(pat, pat+len, FALSE, FALSE, FALSE);\n\t\t--emsg_off;\n\t    }\n\n\t    if (b >= 0)\n\t    {\n\t\tvimbuf = buflist_findnr(b);\n\t\tif (vimbuf)\n\t\t    XPUSHs(newBUFrv(newSV(0), vimbuf));\n\t    }\n\t}\n    }\n\nvoid\nWindows(...)\n\n    PREINIT:\n    win_T   *vimwin;\n    int\t    i, w;\n\n    PPCODE:\n    if (items == 0)\n    {\n\tif (GIMME == G_SCALAR)\n\t    XPUSHs(sv_2mortal(newSViv(win_count())));\n\telse\n\t{\n\t    FOR_ALL_WINDOWS(vimwin)\n\t\tXPUSHs(newWINrv(newSV(0), vimwin));\n\t}\n    }\n    else\n    {\n\tfor (i = 0; i < items; i++)\n\t{\n\t    w = (int) SvIV(ST(i));\n\t    vimwin = win_find_nr(w);\n\t    if (vimwin)\n\t\tXPUSHs(newWINrv(newSV(0), vimwin));\n\t}\n    }\n\nMODULE = VIM\t    PACKAGE = VIWIN\n\nvoid\nDESTROY(win)\n    VIWIN win\n\n    CODE:\n    if (win_valid(win))\n\twin->w_perl_private = 0;\n\nSV *\nBuffer(win)\n    VIWIN win\n\n    CODE:\n    if (!win_valid(win))\n\twin = curwin;\n    RETVAL = newBUFrv(newSV(0), win->w_buffer);\n    OUTPUT:\n    RETVAL\n\nvoid\nSetHeight(win, height)\n    VIWIN win\n    int height;\n\n    PREINIT:\n    win_T *savewin;\n\n    PPCODE:\n    if (!win_valid(win))\n\twin = curwin;\n    savewin = curwin;\n    curwin = win;\n    win_setheight(height);\n    curwin = savewin;\n\nvoid\nCursor(win, ...)\n    VIWIN win\n\n    PPCODE:\n    if (items == 1)\n    {\n      EXTEND(sp, 2);\n      if (!win_valid(win))\n\t  win = curwin;\n      PUSHs(sv_2mortal(newSViv(win->w_cursor.lnum)));\n      PUSHs(sv_2mortal(newSViv(win->w_cursor.col)));\n    }\n    else if (items == 3)\n    {\n      int lnum, col;\n\n      if (!win_valid(win))\n\t  win = curwin;\n      lnum = (int) SvIV(ST(1));\n      col = (int) SvIV(ST(2));\n      win->w_cursor.lnum = lnum;\n      win->w_cursor.col = col;\n      check_cursor();\t\t    /* put cursor on an existing line */\n      update_screen(NOT_VALID);\n    }\n\nMODULE = VIM\t    PACKAGE = VIBUF\n\nvoid\nDESTROY(vimbuf)\n    VIBUF vimbuf;\n\n    CODE:\n    if (buf_valid(vimbuf))\n\tvimbuf->b_perl_private = 0;\n\nvoid\nName(vimbuf)\n    VIBUF vimbuf;\n\n    PPCODE:\n    if (!buf_valid(vimbuf))\n\tvimbuf = curbuf;\n    /* No file name returns an empty string */\n    if (vimbuf->b_fname == NULL)\n\tXPUSHs(sv_2mortal(newSVpv(\"\", 0)));\n    else\n\tXPUSHs(sv_2mortal(newSVpv((char *)vimbuf->b_fname, 0)));\n\nvoid\nNumber(vimbuf)\n    VIBUF vimbuf;\n\n    PPCODE:\n    if (!buf_valid(vimbuf))\n\tvimbuf = curbuf;\n    XPUSHs(sv_2mortal(newSViv(vimbuf->b_fnum)));\n\nvoid\nCount(vimbuf)\n    VIBUF vimbuf;\n\n    PPCODE:\n    if (!buf_valid(vimbuf))\n\tvimbuf = curbuf;\n    XPUSHs(sv_2mortal(newSViv(vimbuf->b_ml.ml_line_count)));\n\nvoid\nGet(vimbuf, ...)\n    VIBUF vimbuf;\n\n    PREINIT:\n    char_u *line;\n    int i;\n    long lnum;\n    PPCODE:\n    if (buf_valid(vimbuf))\n    {\n\tfor (i = 1; i < items; i++)\n\t{\n\t    lnum = (long) SvIV(ST(i));\n\t    if (lnum > 0 && lnum <= vimbuf->b_ml.ml_line_count)\n\t    {\n\t\tline = ml_get_buf(vimbuf, lnum, FALSE);\n\t\tXPUSHs(sv_2mortal(newSVpv((char *)line, 0)));\n\t    }\n\t}\n    }\n\nvoid\nSet(vimbuf, ...)\n    VIBUF vimbuf;\n\n    PREINIT:\n    int i;\n    long lnum;\n    char *line;\n    PPCODE:\n    if (buf_valid(vimbuf))\n    {\n\tif (items < 3)\n\t    croak(\"Usage: VIBUF::Set(vimbuf, lnum, @lines)\");\n\n\tlnum = (long) SvIV(ST(1));\n\tfor(i = 2; i < items; i++, lnum++)\n\t{\n\t    line = SvPV(ST(i),PL_na);\n\t    if (lnum > 0 && lnum <= vimbuf->b_ml.ml_line_count && line != NULL)\n\t    {\n\t\taco_save_T\taco;\n\n\t\t/* set curwin/curbuf for \"vimbuf\" and save some things */\n\t\taucmd_prepbuf(&aco, vimbuf);\n\n\t\tif (u_savesub(lnum) == OK)\n\t\t{\n\t\t    ml_replace(lnum, (char_u *)line, TRUE);\n\t\t    changed_bytes(lnum, 0);\n\t\t}\n\n\t\t/* restore curwin/curbuf and a few other things */\n\t\taucmd_restbuf(&aco);\n\t\t/* Careful: autocommands may have made \"vimbuf\" invalid! */\n\t    }\n\t}\n    }\n\nvoid\nDelete(vimbuf, ...)\n    VIBUF vimbuf;\n\n    PREINIT:\n    long i, lnum = 0, count = 0;\n    PPCODE:\n    if (buf_valid(vimbuf))\n    {\n\tif (items == 2)\n\t{\n\t    lnum = (long) SvIV(ST(1));\n\t    count = 1;\n\t}\n\telse if (items == 3)\n\t{\n\t    lnum = (long) SvIV(ST(1));\n\t    count = (long) 1 + SvIV(ST(2)) - lnum;\n\t    if (count == 0)\n\t\tcount = 1;\n\t    if (count < 0)\n\t    {\n\t\tlnum -= count;\n\t\tcount = -count;\n\t    }\n\t}\n\tif (items >= 2)\n\t{\n\t    for (i = 0; i < count; i++)\n\t    {\n\t\tif (lnum > 0 && lnum <= vimbuf->b_ml.ml_line_count)\n\t\t{\n\t\t    aco_save_T\taco;\n\n\t\t    /* set curwin/curbuf for \"vimbuf\" and save some things */\n\t\t    aucmd_prepbuf(&aco, vimbuf);\n\n\t\t    if (u_savedel(lnum, 1) == OK)\n\t\t    {\n\t\t\tml_delete(lnum, 0);\n\t\t\tcheck_cursor();\n\t\t\tdeleted_lines_mark(lnum, 1L);\n\t\t    }\n\n\t\t    /* restore curwin/curbuf and a few other things */\n\t\t    aucmd_restbuf(&aco);\n\t\t    /* Careful: autocommands may have made \"vimbuf\" invalid! */\n\n\t\t    update_curbuf(VALID);\n\t\t}\n\t    }\n\t}\n    }\n\nvoid\nAppend(vimbuf, ...)\n    VIBUF vimbuf;\n\n    PREINIT:\n    int\t\ti;\n    long\tlnum;\n    char\t*line;\n    PPCODE:\n    if (buf_valid(vimbuf))\n    {\n\tif (items < 3)\n\t    croak(\"Usage: VIBUF::Append(vimbuf, lnum, @lines)\");\n\n\tlnum = (long) SvIV(ST(1));\n\tfor (i = 2; i < items; i++, lnum++)\n\t{\n\t    line = SvPV(ST(i),PL_na);\n\t    if (lnum >= 0 && lnum <= vimbuf->b_ml.ml_line_count && line != NULL)\n\t    {\n\t\taco_save_T\taco;\n\n\t\t/* set curwin/curbuf for \"vimbuf\" and save some things */\n\t\taucmd_prepbuf(&aco, vimbuf);\n\n\t\tif (u_inssub(lnum + 1) == OK)\n\t\t{\n\t\t    ml_append(lnum, (char_u *)line, (colnr_T)0, FALSE);\n\t\t    appended_lines_mark(lnum, 1L);\n\t\t}\n\n\t\t/* restore curwin/curbuf and a few other things */\n\t\taucmd_restbuf(&aco);\n\t\t/* Careful: autocommands may have made \"vimbuf\" invalid! */\n\n\t\tupdate_curbuf(VALID);\n\t    }\n\t}\n    }\n\n#ifdef __GNUC__\n# pragma GCC diagnostic pop\n#endif\n",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/src/if_tcl.c": "/* vi:set ts=8 sts=4 sw=4 noet:\n *\n * VIM - Vi IMproved\tby Bram Moolenaar\n *\n * Do \":help uganda\"  in Vim to read copying and usage conditions.\n * Do \":help credits\" in Vim to see a list of people who contributed.\n * See README.txt for an overview of the Vim source code.\n */\n\n/*\n * Tcl extensions by Ingo Wilken <Ingo.Wilken@informatik.uni-oldenburg.de>\n * Last modification: Wed May 10 21:28:44 CEST 2000\n * Requires Tcl 8.0 or higher.\n *\n *  Variables:\n *  ::vim::current(buffer)\t# Name of buffer command for current buffer.\n *  ::vim::current(window)\t# Name of window command for current window.\n *  ::vim::range(start)\t\t# Start of current range (line number).\n *  ::vim::range(end)\t\t# End of current range (line number).\n *  ::vim::lbase\t\t# Start of line/column numbers (1 or 0).\n *\n *  Commands:\n *  ::vim::command {cmd}\t# Execute ex command {cmd}.\n *  ::vim::option {opt} [val]\t# Get/Set option {opt}.\n *  ::vim::expr {expr}\t\t# Evaluate {expr} using vim's evaluator.\n *  ::vim::beep\t\t\t# Guess.\n *\n *  set buf [::vim::buffer {n}]\t# Create Tcl command for buffer N.\n *  set bl [::vim::buffer list] # Get list of Tcl commands of all buffers.\n *  ::vim::buffer exists {n}\t# True if buffer {n} exists.\n *\n *  set wl [::vim::window list] # Get list of Tcl commands of all windows.\n *\n *  set n [$win height]\t\t# Report window height.\n *  $win height {n}\t\t# Set window height to {n}.\n *  array set pos [$win cursor] # Get cursor position.\n *  $win cursor {row} {col}\t# Set cursor position.\n *  $win cursor pos\t\t# Set cursor position from array var \"pos\"\n *  $win delcmd {cmd}\t\t# Register callback command for closed window.\n *  $win option {opt} [val]\t# Get/Set vim option in context of $win.\n *  $win command {cmd}\t\t# Execute ex command in context of $win.\n *  $win expr {expr}\t\t# Evaluate vim expression in context of $win.\n *  set buf [$win buffer]\t# Create Tcl command for window's buffer.\n *\n *  $buf name\t\t\t# Reports file name in buffer.\n *  $buf number\t\t\t# Reports buffer number.\n *  set l [$buf get {n}]\t# Get buffer line {n} as a string.\n *  set L [$buf get {n} {m}]\t# Get lines {n} through {m} as a list.\n *  $buf count\t\t\t# Reports number of lines in buffer.\n *  $buf last\t\t\t# Reports number of last line in buffer.\n *  $buf delete {n}\t\t# Delete line {n}.\n *  $buf delete {n} {m}\t\t# Delete lines {n} through {m}.\n *  $buf set {n} {l}\t\t# Set line {n} to string {l}.\n *  $buf set {n} {m} {L}\t# Set lines {n} through {m} from list {L}.\n *\t\t\t\t# Delete/inserts lines as appropriate.\n *  $buf option {opt} [val]\t# Get/Set vim option in context of $buf.\n *  $buf command {cmd}\t\t# Execute ex command in context of $buf\n *  $buf expr {cmd}\t\t# Evaluate vim expression in context of $buf.\n *  array set pos [$buf mark {m}]   # Get position of mark.\n *  $buf append {n} {str}\t# Append string {str} to buffer,after line {n}.\n *  $buf insert {n} {str}\t# Insert string {str} in buffer as line {n}.\n *  $buf delcmd {cmd}\t\t# Register callback command for deleted buffer.\n *  set wl [$buf windows]\t# Get list of Tcl commands for all windows of\n *\t\t\t\t# this buffer.\nTODO:\n *  ::vim::buffer new\t\t#   create new buffer + Tcl command\n */\n\n#include \"vim.h\"\n#undef EXTERN\t\t\t/* tcl.h defines it too */\n\n#ifdef DYNAMIC_TCL\n# define USE_TCL_STUBS /* use tcl's stubs mechanism */\n#endif\n\n#include <tcl.h>\n#include <string.h>\n\ntypedef struct\n{\n    Tcl_Interp *interp;\n    int exitvalue;\n    int range_start, range_end;\n    int lbase;\n    char *curbuf, *curwin;\n} tcl_info;\n\nstatic tcl_info tclinfo = { NULL, 0, 0, 0, 0, NULL, NULL };\n\n#define VAR_RANGE1\t\"::vim::range(start)\"\n#define VAR_RANGE2\t\"::vim::range(begin)\"\n#define VAR_RANGE3\t\"::vim::range(end)\"\n#define VAR_CURBUF\t\"::vim::current(buffer)\"\n#define VAR_CURWIN\t\"::vim::current(window)\"\n#define VAR_LBASE\t\"::vim::lbase\"\n#define VAR_CURLINE\t\"line\"\n#define VAR_CURLNUM\t\"lnum\"\n#define VARNAME_SIZE\t64\n\n#define row2tcl(x)  ((x) - (tclinfo.lbase==0))\n#define row2vim(x)  ((x) + (tclinfo.lbase==0))\n#define col2tcl(x)  ((x) + (tclinfo.lbase!=0))\n#define col2vim(x)  ((x) - (tclinfo.lbase!=0))\n\n\n#define VIMOUT\t((ClientData)1)\n#define VIMERR\t((ClientData)2)\n\n/* This appears to be new in Tcl 8.4. */\n#ifndef CONST84\n# define CONST84\n#endif\n\n/*\n *  List of Tcl interpreters who reference a vim window or buffer.\n *  Each buffer and window has it's own list in the w_tcl_ref or b_tcl_ref\n *  struct member.  We need this because Tcl can create sub-interpreters with\n *  the \"interp\" command, and each interpreter can reference all windows and\n *  buffers.\n */\nstruct ref\n{\n    struct ref\t*next;\n\n    Tcl_Interp\t*interp;\n    Tcl_Command cmd;\t    /* Tcl command that represents this object */\n    Tcl_Obj\t*delcmd;    /* Tcl command to call when object is being del. */\n    void\t*vimobj;    /* Vim window or buffer (win_T* or buf_T*) */\n};\nstatic char * tclgetbuffer _ANSI_ARGS_((Tcl_Interp *interp, buf_T *buf));\nstatic char * tclgetwindow _ANSI_ARGS_((Tcl_Interp *interp, win_T *win));\nstatic int tclsetdelcmd _ANSI_ARGS_((Tcl_Interp *interp, struct ref *reflist, void *vimobj, Tcl_Obj *delcmd));\nstatic int tclgetlinenum _ANSI_ARGS_ ((Tcl_Interp *interp, Tcl_Obj *obj, int *valueP, buf_T *buf));\nstatic win_T *tclfindwin _ANSI_ARGS_ ((buf_T *buf));\nstatic int tcldoexcommand _ANSI_ARGS_ ((Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[], int objn));\nstatic int tclsetoption _ANSI_ARGS_ ((Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[], int objn));\nstatic int tclvimexpr _ANSI_ARGS_ ((Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[], int objn));\nstatic void tcldelthisinterp _ANSI_ARGS_ ((void));\n\nstatic int vimerror _ANSI_ARGS_((Tcl_Interp *interp));\nstatic void tclmsg _ANSI_ARGS_((char *text));\nstatic void tclerrmsg _ANSI_ARGS_((char *text));\nstatic void tclupdatevars _ANSI_ARGS_((void));\n\nstatic struct ref refsdeleted;\t/* dummy object for deleted ref list */\n\n/*****************************************************************************\n * TCL interface manager\n ****************************************************************************/\n\n#if defined(DYNAMIC_TCL) || defined(PROTO)\n# ifndef DYNAMIC_TCL_DLL\n#  define DYNAMIC_TCL_DLL \"tcl83.dll\"\n# endif\n# ifndef DYNAMIC_TCL_VER\n#  define DYNAMIC_TCL_VER \"8.3\"\n# endif\n\n# ifndef  DYNAMIC_TCL /* Just generating prototypes */\ntypedef int HANDLE;\n# endif\n\n# ifndef WIN3264\n#  include <dlfcn.h>\n#  define HANDLE void*\n#  define TCL_PROC void*\n#  define load_dll(n) dlopen((n), RTLD_LAZY|RTLD_GLOBAL)\n#  define symbol_from_dll dlsym\n#  define close_dll dlclose\n# else\n#  define TCL_PROC FARPROC\n#  define load_dll vimLoadLib\n#  define symbol_from_dll GetProcAddress\n#  define close_dll FreeLibrary\n# endif\n\n/*\n * Declare HANDLE for tcl.dll and function pointers.\n */\nstatic HANDLE hTclLib = NULL;\nTcl_Interp* (*dll_Tcl_CreateInterp)();\nvoid (*dll_Tcl_FindExecutable)(const void *);\n\n/*\n * Table of name to function pointer of tcl.\n */\nstatic struct {\n    char* name;\n    TCL_PROC* ptr;\n} tcl_funcname_table[] = {\n    {\"Tcl_CreateInterp\", (TCL_PROC*)&dll_Tcl_CreateInterp},\n    {\"Tcl_FindExecutable\", (TCL_PROC*)&dll_Tcl_FindExecutable},\n    {NULL, NULL},\n};\n\n/*\n * Make all runtime-links of tcl.\n *\n * 1. Get module handle using LoadLibraryEx.\n * 2. Get pointer to tcl function by GetProcAddress.\n * 3. Repeat 2, until get all functions will be used.\n *\n * Parameter 'libname' provides name of DLL.\n * Return OK or FAIL.\n */\n    static int\ntcl_runtime_link_init(char *libname, int verbose)\n{\n    int i;\n\n    if (hTclLib)\n\treturn OK;\n    if (!(hTclLib = load_dll(libname)))\n    {\n\tif (verbose)\n\t    EMSG2(_(e_loadlib), libname);\n\treturn FAIL;\n    }\n    for (i = 0; tcl_funcname_table[i].ptr; ++i)\n    {\n\tif (!(*tcl_funcname_table[i].ptr = symbol_from_dll(hTclLib,\n\t\t\ttcl_funcname_table[i].name)))\n\t{\n\t    close_dll(hTclLib);\n\t    hTclLib = NULL;\n\t    if (verbose)\n\t\tEMSG2(_(e_loadfunc), tcl_funcname_table[i].name);\n\t    return FAIL;\n\t}\n    }\n    return OK;\n}\n#endif /* defined(DYNAMIC_TCL) || defined(PROTO) */\n\n#ifdef DYNAMIC_TCL\nstatic char *find_executable_arg = NULL;\n#endif\n\n    void\nvim_tcl_init(char *arg)\n{\n#ifndef DYNAMIC_TCL\n    Tcl_FindExecutable(arg);\n#else\n    find_executable_arg = arg;\n#endif\n}\n\n#if defined(DYNAMIC_TCL) || defined(PROTO)\n\nstatic int stubs_initialized = FALSE;\n\n/*\n * Return TRUE if the TCL interface can be used.\n */\n    int\ntcl_enabled(int verbose)\n{\n    if (!stubs_initialized && find_executable_arg != NULL\n\t    && tcl_runtime_link_init((char *)p_tcldll, verbose) == OK)\n    {\n\tTcl_Interp *interp;\n\n\tdll_Tcl_FindExecutable(find_executable_arg);\n\n\tif ((interp = dll_Tcl_CreateInterp()) != NULL)\n\t{\n\t    if (Tcl_InitStubs(interp, DYNAMIC_TCL_VER, 0))\n\t    {\n\t\tTcl_DeleteInterp(interp);\n\t\tstubs_initialized = TRUE;\n\t    }\n\t    /* FIXME: When Tcl_InitStubs() was failed, how delete interp? */\n\t}\n    }\n    return stubs_initialized;\n}\n#endif\n\n    void\ntcl_end(void)\n{\n#ifdef DYNAMIC_TCL\n    if (hTclLib)\n    {\n\tclose_dll(hTclLib);\n\thTclLib = NULL;\n    }\n#endif\n}\n\n/****************************************************************************\n  Tcl commands\n ****************************************************************************/\n\n/*\n * Replace standard \"exit\" command.\n *\n * Delete the Tcl interpreter; a new one will be created with the next\n * :tcl command). The exit code is saved (and retrieved in tclexit()).\n * Since Tcl's exit is never expected to return and this replacement\n * does, then (except for a trivial case) additional Tcl commands will\n * be run. Since the interpreter is now marked as deleted, an error\n * will be returned -- typically \"attempt to call eval in deleted\n * interpreter\". Hopefully, at this point, checks for TCL_ERROR take\n * place and control percolates back up to Vim -- but with this new error\n * string in the interpreter's result value. Therefore it would be\n * useless for this routine to return the exit code via Tcl_SetResult().\n */\n    static int\nexitcmd(\n    ClientData dummy UNUSED,\n    Tcl_Interp *interp,\n    int objc,\n    Tcl_Obj *CONST objv[])\n{\n    int value = 0;\n\n    switch (objc)\n    {\n\tcase 2:\n\t    if (Tcl_GetIntFromObj(interp, objv[1], &value) != TCL_OK)\n\t\tbreak;\n\t    /* FALLTHROUGH */\n\tcase 1:\n\t    tclinfo.exitvalue = value;\n\n\t    Tcl_DeleteInterp(interp);\n\t    break;\n\tdefault:\n\t    Tcl_WrongNumArgs(interp, 1, objv, \"?returnCode?\");\n    }\n    return TCL_ERROR;\n}\n\n/*\n *  \"::vim::beep\" - what Vi[m] does best :-)\n */\n    static int\nbeepcmd(\n    ClientData dummy UNUSED,\n    Tcl_Interp *interp,\n    int objc,\n    Tcl_Obj *CONST objv[])\n{\n    if (objc != 1)\n    {\n\tTcl_WrongNumArgs(interp, 1, objv, NULL);\n\treturn TCL_ERROR;\n    }\n    vim_beep(BO_LANG);\n    return TCL_OK;\n}\n\n/*\n *  \"::vim::buffer list\" - create a list of buffer commands.\n *  \"::vim::buffer {N}\" - create buffer command for buffer N.\n *  \"::vim::buffer exists {N}\" - test if buffer N exists.\n *  \"::vim::buffer new\" - create a new buffer (not implemented)\n */\n    static int\nbuffercmd(\n    ClientData dummy UNUSED,\n    Tcl_Interp *interp,\n    int objc,\n    Tcl_Obj *CONST objv[])\n{\n    char\t*name;\n    buf_T\t*buf;\n    Tcl_Obj\t*resobj;\n    int\t\terr, n, idx;\n    enum {BCMD_EXISTS, BCMD_LIST};\n    static CONST84 char *bcmdoptions[] =\n    {\n\t\"exists\", \"list\", (char *)0\n    };\n\n    if (objc < 2)\n    {\n\tTcl_WrongNumArgs(interp, 1, objv, \"option\");\n\treturn TCL_ERROR;\n    }\n    err = Tcl_GetIntFromObj(interp, objv[1], &n);\n    if (err == TCL_OK)\n    {\n\tif (objc != 2)\n\t{\n\t    Tcl_WrongNumArgs(interp, 1, objv, \"bufNumber\");\n\t    return TCL_ERROR;\n\t}\n\tFOR_ALL_BUFFERS(buf)\n\t{\n\t    if (buf->b_fnum == n)\n\t    {\n\t\tname = tclgetbuffer(interp, buf);\n\t\tif (name == NULL)\n\t\t    return TCL_ERROR;\n\t\tTcl_SetResult(interp, name, TCL_VOLATILE);\n\t\treturn TCL_OK;\n\t    }\n\t}\n\tTcl_SetResult(interp, _(\"invalid buffer number\"), TCL_STATIC);\n\treturn TCL_ERROR;\n    }\n    Tcl_ResetResult(interp); /* clear error from Tcl_GetIntFromObj */\n\n    err = Tcl_GetIndexFromObj(interp, objv[1], bcmdoptions, \"option\", 0, &idx);\n    if (err != TCL_OK)\n\treturn err;\n    switch (idx)\n    {\n\tcase BCMD_LIST:\n\t    if (objc != 2)\n\t    {\n\t\tTcl_WrongNumArgs(interp, 2, objv, \"\");\n\t\terr = TCL_ERROR;\n\t\tbreak;\n\t    }\n\t    FOR_ALL_BUFFERS(buf)\n\t    {\n\t\tname = tclgetbuffer(interp, buf);\n\t\tif (name == NULL)\n\t\t{\n\t\t    err = TCL_ERROR;\n\t\t    break;\n\t\t}\n\t\tTcl_AppendElement(interp, name);\n\t    }\n\t    break;\n\n\tcase BCMD_EXISTS:\n\t    if (objc != 3)\n\t    {\n\t\tTcl_WrongNumArgs(interp, 2, objv, \"bufNumber\");\n\t\terr = TCL_ERROR;\n\t\tbreak;\n\t    }\n\t    err = Tcl_GetIntFromObj(interp, objv[2], &n);\n\t    if (err == TCL_OK)\n\t    {\n\t\tbuf = buflist_findnr(n);\n\t\tresobj = Tcl_NewIntObj(buf != NULL);\n\t\tTcl_SetObjResult(interp, resobj);\n\t    }\n\t    break;\n\n\tdefault:\n\t    Tcl_SetResult(interp, _(\"not implemented yet\"), TCL_STATIC);\n\t    err = TCL_ERROR;\n    }\n    return err;\n}\n\n/*\n * \"::vim::window list\" - create list of window commands.\n */\n    static int\nwindowcmd(\n    ClientData\tdummy UNUSED,\n    Tcl_Interp\t*interp,\n    int\t\tobjc,\n    Tcl_Obj\t*CONST objv[])\n{\n    char\t*what, *string;\n    win_T\t*win;\n\n    if (objc != 2)\n    {\n\tTcl_WrongNumArgs(interp, 1, objv, \"option\");\n\treturn TCL_ERROR;\n    }\n    what = Tcl_GetStringFromObj(objv[1], NULL);\n    if (strcmp(what, \"list\") == 0)\n    {\n\tFOR_ALL_WINDOWS(win)\n\t{\n\t    string = tclgetwindow(interp, win);\n\t    if (string == NULL)\n\t\treturn TCL_ERROR;\n\t    Tcl_AppendElement(interp, string);\n\t}\n\treturn TCL_OK;\n    }\n    Tcl_SetResult(interp, _(\"unknown option\"), TCL_STATIC);\n    return TCL_ERROR;\n}\n\n/*\n * flags for bufselfcmd and winselfcmd to indicate outstanding actions.\n */\n#define FL_UPDATE_SCREEN\t(1<<0)\n#define FL_UPDATE_CURBUF\t(1<<1)\n#define FL_ADJUST_CURSOR\t(1<<2)\n\n/*\n * This function implements the buffer commands.\n */\n    static int\nbufselfcmd(\n    ClientData\tref,\n    Tcl_Interp\t*interp,\n    int\t\tobjc,\n    Tcl_Obj\t*CONST objv[])\n{\n    int\t\topt, err, idx, flags;\n    int\t\tval1, val2, n, i;\n    buf_T\t*buf, *savebuf;\n    win_T\t*win, *savewin;\n    Tcl_Obj\t*resobj;\n    pos_T\t*pos;\n    char\t*line;\n\n    enum\n    {\n\tBUF_APPEND, BUF_COMMAND, BUF_COUNT, BUF_DELCMD, BUF_DELETE, BUF_EXPR,\n\tBUF_GET, BUF_INSERT, BUF_LAST, BUF_MARK, BUF_NAME, BUF_NUMBER,\n\tBUF_OPTION, BUF_SET, BUF_WINDOWS\n    };\n    static CONST84 char *bufoptions[] =\n    {\n\t\"append\", \"command\", \"count\", \"delcmd\", \"delete\", \"expr\",\n\t\"get\", \"insert\", \"last\", \"mark\", \"name\", \"number\",\n\t\"option\", \"set\", \"windows\", (char *)0\n    };\n\n    if (objc < 2)\n    {\n\tTcl_WrongNumArgs(interp, 1, objv, \"option ?arg ...?\");\n\treturn TCL_ERROR;\n    }\n\n    err = Tcl_GetIndexFromObj(interp, objv[1], bufoptions, \"option\", 0, &idx);\n    if (err != TCL_OK)\n\treturn err;\n\n    buf = (buf_T *)((struct ref *)ref)->vimobj;\n    savebuf = curbuf;  curbuf = buf;\n    savewin = curwin;  curwin = tclfindwin(buf);\n    flags = 0;\n    opt = 0;\n\n    switch (idx)\n    {\n\tcase BUF_COMMAND:\n\t    err = tcldoexcommand(interp, objc, objv, 2);\n\t    flags |= FL_UPDATE_SCREEN;\n\t    break;\n\n\tcase BUF_OPTION:\n\t    err = tclsetoption(interp, objc, objv, 2);\n\t    flags |= FL_UPDATE_SCREEN;\n\t    break;\n\n\tcase BUF_EXPR:\n\t    err = tclvimexpr(interp, objc, objv, 2);\n\t    break;\n\n\tcase BUF_NAME:\n\t    /*\n\t     *\tGet filename of buffer.\n\t     */\n\t    if (objc != 2)\n\t    {\n\t\tTcl_WrongNumArgs(interp, 2, objv, NULL);\n\t\terr = TCL_ERROR;\n\t\tbreak;\n\t    }\n\t    if (buf->b_ffname)\n\t\tTcl_SetResult(interp, (char *)buf->b_ffname, TCL_VOLATILE);\n\t    else\n\t\tTcl_SetResult(interp, \"\", TCL_STATIC);\n\t    break;\n\n\tcase BUF_LAST:\n\t    /*\n\t     * Get line number of last line.\n\t     */\n\t    opt = 1;\n\t    /* fallthrough */\n\tcase BUF_COUNT:\n\t    /*\n\t     * Get number of lines in buffer.\n\t     */\n\t    if (objc != 2)\n\t    {\n\t\tTcl_WrongNumArgs(interp, 2, objv, NULL);\n\t\terr = TCL_ERROR;\n\t\tbreak;\n\t    }\n\t    val1 = (int)buf->b_ml.ml_line_count;\n\t    if (opt)\n\t\tval1 = row2tcl(val1);\n\n\t    resobj = Tcl_NewIntObj(val1);\n\t    Tcl_SetObjResult(interp, resobj);\n\t    break;\n\n\tcase BUF_NUMBER:\n\t    /*\n\t     * Get buffer's number.\n\t     */\n\t    if (objc != 2)\n\t    {\n\t\tTcl_WrongNumArgs(interp, 2, objv, NULL);\n\t\terr = TCL_ERROR;\n\t\tbreak;\n\t    }\n\t    resobj = Tcl_NewIntObj((int)buf->b_fnum);\n\t    Tcl_SetObjResult(interp, resobj);\n\t    break;\n\n\tcase BUF_GET:\n\t    if (objc != 3 && objc != 4)\n\t    {\n\t\tTcl_WrongNumArgs(interp, 2, objv, \"lineNumber ?lineNumber?\");\n\t\terr = TCL_ERROR;\n\t\tbreak;\n\t    }\n\t    err = tclgetlinenum(interp, objv[2], &val1, buf);\n\t    if (err != TCL_OK)\n\t\tbreak;\n\t    if (objc == 4)\n\t    {\n\t\terr = tclgetlinenum(interp, objv[3], &val2, buf);\n\t\tif (err != TCL_OK)\n\t\t    break;\n\t\tif (val1 > val2)\n\t\t{\n\t\t    n = val1; val1 = val2; val2 = n;\n\t\t}\n\t\tTcl_ResetResult(interp);\n\n\t\tfor (n = val1; n <= val2 && err == TCL_OK; n++)\n\t\t{\n\t\t    line = (char *)ml_get_buf(buf, (linenr_T)n, FALSE);\n\t\t    if (line)\n\t\t\tTcl_AppendElement(interp, line);\n\t\t    else\n\t\t\terr = TCL_ERROR;\n\t\t}\n\t    }\n\t    else {  /* objc == 3 */\n\t\tline = (char *)ml_get_buf(buf, (linenr_T)val1, FALSE);\n\t\tTcl_SetResult(interp, line, TCL_VOLATILE);\n\t    }\n\t    break;\n\n\tcase BUF_SET:\n\t    if (objc != 4 && objc != 5)\n\t    {\n\t\tTcl_WrongNumArgs(interp, 3, objv, \"lineNumber ?lineNumber? stringOrList\");\n\t\terr = TCL_ERROR;\n\t\tbreak;\n\t    }\n\t    err = tclgetlinenum(interp, objv[2], &val1, buf);\n\t    if (err != TCL_OK)\n\t\treturn TCL_ERROR;\n\t    if (objc == 4)\n\t    {\n\t\t/*\n\t\t *  Replace one line with a string.\n\t\t *\t$buf set {n} {string}\n\t\t */\n\t\tline = Tcl_GetStringFromObj(objv[3], NULL);\n\t\tif (u_savesub((linenr_T)val1) != OK)\n\t\t{\n\t\t    Tcl_SetResult(interp, _(\"cannot save undo information\"), TCL_STATIC);\n\t\t    err = TCL_ERROR;\n\t\t}\n\t\telse\n\t\tif (ml_replace((linenr_T)val1, (char_u *)line, TRUE) != OK)\n\t\t{\n\t\t    Tcl_SetResult(interp, _(\"cannot replace line\"), TCL_STATIC);\n\t\t    err = TCL_ERROR;\n\t\t}\n\t\telse\n\t\t{\n\t\t    changed_bytes((linenr_T)val1, 0);\n\t\t    flags |= FL_UPDATE_CURBUF;\n\t\t}\n\t\tbreak;\n\t    }\n\t    else\n\t    {\n\t\t/*\n\t\t * Replace several lines with the elements of a Tcl list.\n\t\t *\t$buf set {n} {m} {list}\n\t\t * If the list contains more than {m}-{n}+1 elements, they\n\t\t * are * inserted after line {m}.  If the list contains fewer\n\t\t * elements, * the lines from {n}+length({list}) through {m}\n\t\t * are deleted.\n\t\t */\n\t\tint\t    lc;\n\t\tTcl_Obj\t    **lv;\n\n\t\terr = tclgetlinenum(interp, objv[3], &val2, buf);\n\t\tif (err != TCL_OK)\n\t\t    break;\n\t\terr = Tcl_ListObjGetElements(interp, objv[4], &lc, &lv);\n\t\tif (err != TCL_OK)\n\t\t    break;\n\t\tif (val1 > val2)\n\t\t{\n\t\t    n = val1;\n\t\t    val1 = val2;\n\t\t    val2 = n;\n\t\t}\n\n\t\tn = val1;\n\t\tif (u_save((linenr_T)(val1 - 1), (linenr_T)(val2 + 1)) != OK)\n\t\t{\n\t\t    Tcl_SetResult(interp, _(\"cannot save undo information\"),\n\t\t\t\t\t\t\t\t  TCL_STATIC);\n\t\t    err = TCL_ERROR;\n\t\t    break;\n\t\t}\n\t\tflags |= FL_UPDATE_CURBUF;\n\n\t\tfor (i = 0; i < lc && n <= val2; i++)\n\t\t{\n\t\t    line = Tcl_GetStringFromObj(lv[i], NULL);\n\t\t    if (ml_replace((linenr_T)n, (char_u *)line, TRUE) != OK)\n\t\t\tgoto setListError;\n\t\t    ++n;\n\t\t}\n\t\tif (i < lc)\n\t\t{\n\t\t    /* append lines */\n\t\t    do\n\t\t    {\n\t\t\tline = Tcl_GetStringFromObj(lv[i], NULL);\n\t\t\tif (ml_append((linenr_T)(n - 1),\n\t\t\t\t\t      (char_u *)line, 0, FALSE) != OK)\n\t\t\t    goto setListError;\n\t\t\t++n;\n\t\t\t++i;\n\t\t    } while (i < lc);\n\t\t}\n\t\telse if (n <= val2)\n\t\t{\n\t\t    /* did not replace all lines, delete */\n\t\t    i = n;\n\t\t    do\n\t\t    {\n\t\t\tif (ml_delete((linenr_T)i, FALSE) != OK)\n\t\t\t    goto setListError;\n\t\t\t++n;\n\t\t    } while (n <= val2);\n\t\t}\n\t\tlc -= val2 - val1 + 1;\t/* number of lines to be replaced */\n\t\tmark_adjust((linenr_T)val1, (linenr_T)val2, (long)MAXLNUM,\n\t\t\t\t\t\t\t\t    (long)lc);\n\t\tchanged_lines((linenr_T)val1, 0, (linenr_T)val2 + 1, (long)lc);\n\t\tbreak;\n    setListError:\n\t\tu_undo(1);  /* ??? */\n\t\tTcl_SetResult(interp, _(\"cannot set line(s)\"), TCL_STATIC);\n\t\terr = TCL_ERROR;\n\t    }\n\t    break;\n\n\tcase BUF_DELETE:\n\t    if (objc != 3  &&  objc != 4)\n\t    {\n\t\tTcl_WrongNumArgs(interp, 3, objv, \"lineNumber ?lineNumber?\");\n\t\terr = TCL_ERROR;\n\t\tbreak;\n\t    }\n\t    err = tclgetlinenum(interp, objv[2], &val1, buf);\n\t    if (err != TCL_OK)\n\t\tbreak;\n\t    val2 = val1;\n\t    if (objc == 4)\n\t    {\n\t\terr = tclgetlinenum(interp, objv[3], &val2, buf);\n\t\tif (err != TCL_OK)\n\t\t    return err;\n\t\tif (val1 > val2)\n\t\t{\n\t\t    i = val1; val1 = val2; val2 = i;\n\t\t}\n\t    }\n\t    n = val2 - val1 + 1;\n\t    if (u_savedel((linenr_T)val1, (long)n) != OK)\n\t    {\n\t\tTcl_SetResult(interp, _(\"cannot save undo information\"),\n\t\t\t\t\t\t\t\t  TCL_STATIC);\n\t\terr = TCL_ERROR;\n\t\tbreak;\n\t    }\n\t    for (i = 0; i < n; i++)\n\t    {\n\t\tml_delete((linenr_T)val1, FALSE);\n\t\terr = vimerror(interp);\n\t\tif (err != TCL_OK)\n\t\t    break;\n\t    }\n\t    if (i > 0)\n\t\tdeleted_lines_mark((linenr_T)val1, (long)i);\n\t    flags |= FL_ADJUST_CURSOR|FL_UPDATE_SCREEN;\n\t    break;\n\n\tcase BUF_MARK:\n\t    if (objc != 3)\n\t    {\n\t\tTcl_WrongNumArgs(interp, 2, objv, \"markName\");\n\t\terr = TCL_ERROR;\n\t\tbreak;\n\t    }\n\t    line = Tcl_GetStringFromObj(objv[2], NULL);\n\n\t    pos = NULL;\n\t    if (line[0] != '\\0'  &&  line[1] == '\\0')\n\t    {\n\t\tpos = getmark(line[0], FALSE);\n\t    }\n\t    if (pos == NULL)\n\t    {\n\t\tTcl_SetResult(interp, _(\"invalid mark name\"), TCL_STATIC);\n\t\terr = TCL_ERROR;\n\t\tbreak;\n\t    }\n\t    err = vimerror(interp);\n\t    if (err != TCL_OK)\n\t\tbreak;\n\t    if (pos->lnum <= 0)\n\t    {\n\t\tTcl_SetResult(interp, _(\"mark not set\"), TCL_STATIC);\n\t\terr = TCL_ERROR;\n\t    }\n\t    else\n\t    {\n\t\tchar rbuf[64];\n\n\t\tsprintf(rbuf, _(\"row %d column %d\"),\n\t\t\t     (int)row2tcl(pos->lnum), (int)col2tcl(pos->col));\n\t\tTcl_SetResult(interp, rbuf, TCL_VOLATILE);\n\t    }\n\t    break;\n\n\tcase BUF_INSERT:\n\t    opt = 1;\n\t    /* fallthrough */\n\tcase BUF_APPEND:\n\t    if (objc != 4)\n\t    {\n\t\tTcl_WrongNumArgs(interp, 2, objv, \"lineNum text\");\n\t\terr = TCL_ERROR;\n\t\tbreak;\n\t    }\n\t    err = tclgetlinenum(interp, objv[2], &val1, buf);\n\t    if (err != TCL_OK)\n\t\tbreak;\n\t    if (opt)\n\t\t--val1;\n\t    if (u_save((linenr_T)val1, (linenr_T)(val1+1)) != OK)\n\t    {\n\t\tTcl_SetResult(interp, _(\"cannot save undo information\"),\n\t\t\t\t\t\t\t\t  TCL_STATIC);\n\t\terr = TCL_ERROR;\n\t\tbreak;\n\t    }\n\n\t    line = Tcl_GetStringFromObj(objv[3], NULL);\n\t    if (ml_append((linenr_T)val1, (char_u *)line, 0, FALSE) != OK)\n\t    {\n\t\tTcl_SetResult(interp, _(\"cannot insert/append line\"),\n\t\t\t\t\t\t\t\t  TCL_STATIC);\n\t\terr = TCL_ERROR;\n\t\tbreak;\n\t    }\n\t    appended_lines_mark((linenr_T)val1, 1L);\n\t    flags |= FL_UPDATE_SCREEN;\n\t    break;\n\n\tcase BUF_WINDOWS:\n\t    /*\n\t     * Return list of window commands.\n\t     */\n\t    if (objc != 2)\n\t    {\n\t\tTcl_WrongNumArgs(interp, 2, objv, NULL);\n\t\terr = TCL_ERROR;\n\t\tbreak;\n\t    }\n\t    Tcl_ResetResult(interp);\n\t    FOR_ALL_WINDOWS(win)\n\t    {\n\t\tif (win->w_buffer == buf)\n\t\t{\n\t\t    line = tclgetwindow(interp, win);\n\t\t    if (line != NULL)\n\t\t\tTcl_AppendElement(interp, line);\n\t\t    else\n\t\t    {\n\t\t\terr = TCL_ERROR;\n\t\t\tbreak;\n\t\t    }\n\t\t}\n\t    }\n\t    break;\n\n\tcase BUF_DELCMD:\n\t    /*\n\t     * Register deletion callback.\n\t     * TODO: Should be able to register multiple callbacks\n\t     */\n\t    if (objc != 3)\n\t    {\n\t\tTcl_WrongNumArgs(interp, 2, objv, \"command\");\n\t\terr = TCL_ERROR;\n\t\tbreak;\n\t    }\n\t    err = tclsetdelcmd(interp, buf->b_tcl_ref, (void *)buf, objv[2]);\n\t    break;\n\n\tdefault:\n\t    Tcl_SetResult(interp, _(\"not implemented yet\"), TCL_STATIC);\n\t    err = TCL_ERROR;\n    }\n\n    if (flags & FL_UPDATE_CURBUF)\n\tredraw_curbuf_later(NOT_VALID);\n    curbuf = savebuf;\n    curwin = savewin;\n    if (flags & FL_ADJUST_CURSOR)\n\tcheck_cursor();\n    if (flags & (FL_UPDATE_SCREEN | FL_UPDATE_CURBUF))\n\tupdate_screen(NOT_VALID);\n\n    return err;\n}\n\n/*\n * This function implements the window commands.\n */\n    static int\nwinselfcmd(\n    ClientData\tref,\n    Tcl_Interp\t*interp,\n    int\t\tobjc,\n    Tcl_Obj\t*CONST objv[])\n{\n    int\t\terr, idx, flags;\n    int\t\tval1, val2;\n    Tcl_Obj\t*resobj;\n    win_T\t*savewin, *win;\n    buf_T\t*savebuf;\n    char\t*str;\n\n    enum\n    {\n\tWIN_BUFFER, WIN_COMMAND, WIN_CURSOR, WIN_DELCMD, WIN_EXPR,\n\tWIN_HEIGHT, WIN_OPTION\n    };\n    static CONST84 char *winoptions[] =\n    {\n\t\"buffer\", \"command\", \"cursor\", \"delcmd\", \"expr\",\n\t\"height\", \"option\", (char *)0\n    };\n\n    if (objc < 2)\n    {\n\tTcl_WrongNumArgs(interp, 1, objv, \"option ?arg ...?\");\n\treturn TCL_ERROR;\n    }\n\n    err = Tcl_GetIndexFromObj(interp, objv[1], winoptions, \"option\", 0,  &idx);\n    if (err != TCL_OK)\n\treturn TCL_ERROR;\n\n    win = (win_T *)((struct ref *)ref)->vimobj;\n    savewin = curwin;  curwin = win;\n    savebuf = curbuf;  curbuf = win->w_buffer;\n    flags = 0;\n\n    switch (idx)\n    {\n\tcase WIN_OPTION:\n\t    err = tclsetoption(interp, objc, objv, 2);\n\t    flags |= FL_UPDATE_SCREEN;\n\t    break;\n\n\tcase WIN_COMMAND:\n\t    err = tcldoexcommand(interp, objc, objv, 2);\n\t    flags |= FL_UPDATE_SCREEN;\n\t    break;\n\n\tcase WIN_EXPR:\n\t    err = tclvimexpr(interp, objc, objv, 2);\n\t    break;\n\n\tcase WIN_HEIGHT:\n\t    if (objc == 3)\n\t    {\n\t\terr = Tcl_GetIntFromObj(interp, objv[2], &val1);\n\t\tif (err != TCL_OK)\n\t\t    break;\n#ifdef FEAT_GUI\n\t\tneed_mouse_correct = TRUE;\n#endif\n\t\twin_setheight(val1);\n\t\terr = vimerror(interp);\n\t\tif (err != TCL_OK)\n\t\t    break;\n\t    }\n\t    else\n\t    if (objc != 2)\n\t    {\n\t\tTcl_WrongNumArgs(interp, 2, objv, \"?value?\");\n\t\terr = TCL_ERROR;\n\t\tbreak;\n\t    }\n\n\t    resobj = Tcl_NewIntObj((int)(win->w_height));\n\t    Tcl_SetObjResult(interp, resobj);\n\t    break;\n\n\tcase WIN_BUFFER:\n\t    if (objc != 2)\n\t    {\n\t\tTcl_WrongNumArgs(interp, 2, objv, NULL);\n\t\terr = TCL_ERROR;\n\t\tbreak;\n\t    }\n\t    str = tclgetbuffer(interp, win->w_buffer);\n\t    if (str)\n\t\tTcl_SetResult(interp, str, TCL_VOLATILE);\n\t    else\n\t\terr = TCL_ERROR;\n\t    break;\n\n\tcase WIN_DELCMD:\n\t    if (objc != 3)\n\t    {\n\t\tTcl_WrongNumArgs(interp, 2, objv, \"command\");\n\t\terr = TCL_ERROR;\n\t\tbreak;\n\t    }\n\t    err = tclsetdelcmd(interp, win->w_tcl_ref, (void *)win, objv[2]);\n\t    break;\n\n\tcase WIN_CURSOR:\n\t    if (objc > 4)\n\t    {\n\t\tTcl_WrongNumArgs(interp, 2, objv, \"?arg1 ?arg2??\");\n\t\terr = TCL_ERROR;\n\t\tbreak;\n\t    }\n\t    if (objc == 2)\n\t    {\n\t\tchar buf[64];\n\n\t\tsprintf(buf, _(\"row %d column %d\"), (int)row2tcl(win->w_cursor.lnum), (int)col2tcl(win->w_cursor.col));\n\t\tTcl_SetResult(interp, buf, TCL_VOLATILE);\n\t\tbreak;\n\t    }\n\t    else if (objc == 3)\n\t    {\n\t\tTcl_Obj *part, *var;\n\n\t\tpart = Tcl_NewStringObj(\"row\", -1);\n\t\tvar = Tcl_ObjGetVar2(interp, objv[2], part, TCL_LEAVE_ERR_MSG);\n\t\tif (var == NULL)\n\t\t{\n\t\t    err = TCL_ERROR;\n\t\t    break;\n\t\t}\n\t\terr = tclgetlinenum(interp, var, &val1, win->w_buffer);\n\t\tif (err != TCL_OK)\n\t\t    break;\n\t\tpart = Tcl_NewStringObj(\"column\", -1);\n\t\tvar = Tcl_ObjGetVar2(interp, objv[2], part, TCL_LEAVE_ERR_MSG);\n\t\tif (var == NULL)\n\t\t{\n\t\t    err = TCL_ERROR;\n\t\t    break;\n\t\t}\n\t\terr = Tcl_GetIntFromObj(interp, var, &val2);\n\t\tif (err != TCL_OK)\n\t\t    break;\n\t    }\n\t    else {  /* objc == 4 */\n\t\terr = tclgetlinenum(interp, objv[2], &val1, win->w_buffer);\n\t\tif (err != TCL_OK)\n\t\t    break;\n\t\terr = Tcl_GetIntFromObj(interp, objv[3], &val2);\n\t\tif (err != TCL_OK)\n\t\t    break;\n\t    }\n\t    /* TODO: should check column */\n\t    win->w_cursor.lnum = val1;\n\t    win->w_cursor.col = col2vim(val2);\n\t    flags |= FL_UPDATE_SCREEN;\n\t    break;\n\n\tdefault:\n\t    Tcl_SetResult(interp, _(\"not implemented yet\"), TCL_STATIC);\n\t    break;\n    }\n\n    curwin = savewin;\n    curbuf = savebuf;\n    if (flags & FL_UPDATE_SCREEN)\n\tupdate_screen(NOT_VALID);\n\n    return err;\n}\n\n\n    static int\ncommandcmd(\n    ClientData\tdummy UNUSED,\n    Tcl_Interp\t*interp,\n    int\t\tobjc,\n    Tcl_Obj\t*CONST objv[])\n{\n    int\t\terr;\n\n    err = tcldoexcommand(interp, objc, objv, 1);\n    update_screen(VALID);\n    return err;\n}\n\n    static int\noptioncmd(\n    ClientData\tdummy UNUSED,\n    Tcl_Interp\t*interp,\n    int\t\tobjc,\n    Tcl_Obj\t*CONST objv[])\n{\n    int\t\terr;\n\n    err = tclsetoption(interp, objc, objv, 1);\n    update_screen(VALID);\n    return err;\n}\n\n    static int\nexprcmd(\n    ClientData\tdummy UNUSED,\n    Tcl_Interp\t*interp,\n    int\t\tobjc,\n    Tcl_Obj\t*CONST objv[])\n{\n    return tclvimexpr(interp, objc, objv, 1);\n}\n\n/****************************************************************************\n  Support functions for Tcl commands\n ****************************************************************************/\n\n/*\n * Get a line number from 'obj' and convert it to vim's range.\n */\n    static int\ntclgetlinenum(\n    Tcl_Interp\t*interp,\n    Tcl_Obj\t*obj,\n    int\t\t*valueP,\n    buf_T\t*buf)\n{\n    int err, i;\n\n    enum { LN_BEGIN, LN_BOTTOM, LN_END, LN_FIRST, LN_LAST, LN_START, LN_TOP };\n\n    static CONST84 char *keyw[] =\n    {\n\t\"begin\", \"bottom\", \"end\", \"first\", \"last\", \"start\", \"top\", (char *)0\n    };\n\n    err = Tcl_GetIndexFromObj(interp, obj, keyw, \"\", 0, &i);\n    if (err == TCL_OK)\n    {\n\tswitch (i)\n\t{\n\t    case LN_BEGIN:\n\t    case LN_FIRST:\n\t    case LN_START:\n\t    case LN_TOP:\n\t\t*valueP = 1;\n\t\tbreak;\n\t    case LN_BOTTOM:\n\t    case LN_END:\n\t    case LN_LAST:\n\t\t*valueP = buf->b_ml.ml_line_count;\n\t\tbreak;\n\t}\n\treturn TCL_OK;\n    }\n    Tcl_ResetResult(interp);\n\n    err = Tcl_GetIntFromObj(interp, obj, &i);\n    if (err != TCL_OK)\n\treturn err;\n    i = row2vim(i);\n    if (i < 1  ||  i > buf->b_ml.ml_line_count)\n    {\n\tTcl_SetResult(interp, _(\"line number out of range\"), TCL_STATIC);\n\treturn TCL_ERROR;\n    }\n    *valueP = i;\n    return TCL_OK;\n}\n\n/*\n * Find the first window in the window list that displays the buffer.\n */\n    static win_T *\ntclfindwin(buf_T *buf)\n{\n    win_T *win;\n\n    FOR_ALL_WINDOWS(win)\n    {\n\tif (win->w_buffer == buf)\n\t    return win;\n    }\n    return curwin;  /* keep current window context */\n}\n\n/*\n * Do-it-all function for \"::vim::command\", \"$buf command\" and \"$win command\".\n */\n    static int\ntcldoexcommand(\n    Tcl_Interp\t*interp,\n    int\t\tobjc,\n    Tcl_Obj\t*CONST objv[],\n    int\t\tobjn)\n{\n    tcl_info\tsaveinfo;\n    int\t\terr, flag, nobjs;\n    char\t*arg;\n\n    nobjs = objc - objn;\n    if (nobjs < 1 || nobjs > 2)\n    {\n\tTcl_WrongNumArgs(interp, objn, objv, \"?-quiet? exCommand\");\n\treturn TCL_ERROR;\n    }\n\n    flag = 0;\n    if (nobjs == 2)\n    {\n\targ = Tcl_GetStringFromObj(objv[objn], NULL);\n\tif (strcmp(arg, \"-quiet\") == 0)\n\t    flag = 1;\n\telse\n\t{\n\t    Tcl_ResetResult(interp);\n\t    Tcl_AppendResult(interp, _(\"unknown flag: \"), arg, (char *)0);\n\t    return TCL_ERROR;\n\t}\n\t++objn;\n    }\n\n    memcpy(&saveinfo, &tclinfo, sizeof(tcl_info));\n    tclinfo.interp = NULL;\n    tclinfo.curwin = NULL;\n    tclinfo.curbuf = NULL;\n\n    arg = Tcl_GetStringFromObj(objv[objn], NULL);\n    if (flag)\n\t++emsg_off;\n    do_cmdline_cmd((char_u *)arg);\n    if (flag)\n\t--emsg_off;\n    err = vimerror(interp);\n\n    /* If the ex command created a new Tcl interpreter, remove it */\n    if (tclinfo.interp)\n\ttcldelthisinterp();\n    memcpy(&tclinfo, &saveinfo, sizeof(tcl_info));\n    tclupdatevars();\n\n    return err;\n}\n\n/*\n * Do-it-all function for \"::vim::option\", \"$buf option\" and \"$win option\".\n */\n    static int\ntclsetoption(\n    Tcl_Interp\t*interp,\n    int\t\tobjc,\n    Tcl_Obj\t*CONST objv[],\n    int\t\tobjn)\n{\n    int\t\terr, nobjs, idx;\n    char_u\t*option;\n    int\t\tisnum;\n    long\tlval;\n    char_u\t*sval;\n    Tcl_Obj\t*resobj;\n\n    enum { OPT_OFF, OPT_ON, OPT_TOGGLE };\n    static CONST84 char *optkw[] = { \"off\", \"on\", \"toggle\", (char *)0 };\n\n    nobjs = objc - objn;\n    if (nobjs != 1 && nobjs != 2)\n    {\n\tTcl_WrongNumArgs(interp, objn, objv, \"vimOption ?value?\");\n\treturn TCL_ERROR;\n    }\n\n    option = (char_u *)Tcl_GetStringFromObj(objv[objn], NULL);\n    ++objn;\n    isnum = get_option_value(option, &lval, &sval, 0);\n    err = TCL_OK;\n    switch (isnum)\n    {\n\tcase 0:\n\t    Tcl_SetResult(interp, (char *)sval, TCL_VOLATILE);\n\t    vim_free(sval);\n\t    break;\n\tcase 1:\n\t    resobj = Tcl_NewLongObj(lval);\n\t    Tcl_SetObjResult(interp, resobj);\n\t    break;\n\tdefault:\n\t    Tcl_SetResult(interp, _(\"unknown vimOption\"), TCL_STATIC);\n\t    return TCL_ERROR;\n    }\n    if (nobjs == 2)\n    {\n\tif (isnum)\n\t{\n\t    sval = NULL;    /* avoid compiler warning */\n\t    err = Tcl_GetIndexFromObj(interp, objv[objn], optkw, \"\", 0, &idx);\n\t    if (err != TCL_OK)\n\t    {\n\t\tTcl_ResetResult(interp);\n\t\terr = Tcl_GetLongFromObj(interp, objv[objn], &lval);\n\t    }\n\t    else\n\t    switch (idx)\n\t    {\n\t\tcase OPT_ON:\n\t\t    lval = 1;\n\t\t    break;\n\t\tcase OPT_OFF:\n\t\t    lval = 0;\n\t\t    break;\n\t\tcase OPT_TOGGLE:\n\t\t    lval = !lval;\n\t\t    break;\n\t    }\n\t}\n\telse\n\t    sval = (char_u *)Tcl_GetStringFromObj(objv[objn], NULL);\n\tif (err == TCL_OK)\n\t{\n\t    set_option_value(option, lval, sval, OPT_LOCAL);\n\t    err = vimerror(interp);\n\t}\n    }\n    return err;\n}\n\n/*\n * Do-it-all function for \"::vim::expr\", \"$buf expr\" and \"$win expr\".\n */\n    static int\ntclvimexpr(\n    Tcl_Interp\t*interp,\n    int\t\tobjc,\n    Tcl_Obj\t*CONST objv[],\n    int\t\tobjn)\n{\n#ifdef FEAT_EVAL\n    char\t*expr, *str;\n#endif\n    int\t\terr;\n\n    if (objc - objn != 1)\n    {\n\tTcl_WrongNumArgs(interp, objn, objv, \"vimExpr\");\n\treturn TCL_ERROR;\n    }\n\n#ifdef FEAT_EVAL\n    expr = Tcl_GetStringFromObj(objv[objn], NULL);\n    str = (char *)eval_to_string((char_u *)expr, NULL, TRUE);\n    if (str == NULL)\n\tTcl_SetResult(interp, _(\"invalid expression\"), TCL_STATIC);\n    else\n\tTcl_SetResult(interp, str, TCL_VOLATILE);\n    err = vimerror(interp);\n#else\n    Tcl_SetResult(interp, _(\"expressions disabled at compile time\"), TCL_STATIC);\n    err = TCL_ERROR;\n#endif\n\n    return err;\n}\n\n/*\n * Check for internal vim errors.\n */\n    static int\nvimerror(Tcl_Interp *interp)\n{\n    if (got_int)\n    {\n\tTcl_SetResult(interp, _(\"keyboard interrupt\"), TCL_STATIC);\n\treturn TCL_ERROR;\n    }\n    else if (did_emsg)\n    {\n\tTcl_SetResult(interp, _(\"vim error\"), TCL_STATIC);\n\treturn TCL_ERROR;\n    }\n    return TCL_OK;\n}\n\n/*\n * Functions that handle the reference lists:\n *   delref() - callback for Tcl's DeleteCommand\n *   tclgetref() - find/create Tcl command for a win_T* or buf_T* object\n *   tclgetwindow() - window frontend for tclgetref()\n *   tclgetbuffer() - buffer frontend for tclgetref()\n *   tclsetdelcmd() - add Tcl callback command to a vim object\n */\n    static void\ndelref(ClientData cref)\n{\n    struct ref *ref = (struct ref *)cref;\n\n    if (ref->delcmd)\n    {\n\tTcl_DecrRefCount(ref->delcmd);\n\tref->delcmd = NULL;\n    }\n    ref->interp = NULL;\n}\n\n    static char *\ntclgetref(\n    Tcl_Interp\t*interp,\n    void\t**refstartP,\t/* ptr to w_tcl_ref/b_tcl-ref member of\n\t\t\t\t   win_T/buf_T struct */\n    char\t*prefix,\t/* \"win\" or \"buf\" */\n    void\t*vimobj,\t/* win_T* or buf_T* */\n    Tcl_ObjCmdProc *proc)\t/* winselfcmd or bufselfcmd */\n{\n    struct ref *ref, *unused = NULL;\n    static char name[VARNAME_SIZE];\n    Tcl_Command cmd;\n\n    ref = (struct ref *)(*refstartP);\n    if (ref == &refsdeleted)\n    {\n\tTcl_SetResult(interp, _(\"cannot create buffer/window command: object is being deleted\"), TCL_STATIC);\n\treturn NULL;\n    }\n\n    while (ref != NULL)\n    {\n\tif (ref->interp == interp)\n\t    break;\n\tif (ref->interp == NULL)\n\t    unused = ref;\n\tref = ref->next;\n    }\n\n    if (ref)\n\tvim_snprintf(name, sizeof(name), \"::vim::%s\",\n\t\t\t\t\tTcl_GetCommandName(interp, ref->cmd));\n    else\n    {\n\tif (unused)\n\t    ref = unused;\n\telse\n\t{\n\t    ref = (struct ref *)Tcl_Alloc(sizeof(struct ref));\n\t    ref->interp = NULL;\n\t    ref->next = (struct ref *)(*refstartP);\n\t    (*refstartP) = (void *)ref;\n\t}\n\n\t/* This might break on some exotic systems... */\n\tvim_snprintf(name, sizeof(name), \"::vim::%s_%lx\",\n\t\t\t\t\t       prefix, (unsigned long)vimobj);\n\tcmd = Tcl_CreateObjCommand(interp, name, proc,\n\t    (ClientData)ref, (Tcl_CmdDeleteProc *)delref);\n\tif (!cmd)\n\t    return NULL;\n\n\tref->interp = interp;\n\tref->cmd = cmd;\n\tref->delcmd = NULL;\n\tref->vimobj = vimobj;\n    }\n    return name;\n}\n\n    static char *\ntclgetwindow(Tcl_Interp *interp, win_T *win)\n{\n    return tclgetref(interp, &(win->w_tcl_ref), \"win\", (void *)win, winselfcmd);\n}\n\n    static char *\ntclgetbuffer(Tcl_Interp *interp, buf_T *buf)\n{\n    return tclgetref(interp, &(buf->b_tcl_ref), \"buf\", (void *)buf, bufselfcmd);\n}\n\n    static int\ntclsetdelcmd(\n    Tcl_Interp\t*interp,\n    struct ref\t*reflist,\n    void\t*vimobj,\n    Tcl_Obj\t*delcmd)\n{\n    if (reflist == &refsdeleted)\n    {\n\tTcl_SetResult(interp, _(\"cannot register callback command: buffer/window is already being deleted\"), TCL_STATIC);\n\treturn TCL_ERROR;\n    }\n\n    while (reflist != NULL)\n    {\n\tif (reflist->interp == interp && reflist->vimobj == vimobj)\n\t{\n\t    if (reflist->delcmd)\n\t    {\n\t\tTcl_DecrRefCount(reflist->delcmd);\n\t    }\n\t    Tcl_IncrRefCount(delcmd);\n\t    reflist->delcmd = delcmd;\n\t    return TCL_OK;\n\t}\n\treflist = reflist->next;\n    }\n    /* This should never happen.  Famous last word? */\n    EMSG(_(\"E280: TCL FATAL ERROR: reflist corrupt!? Please report this to vim-dev@vim.org\"));\n    Tcl_SetResult(interp, _(\"cannot register callback command: buffer/window reference not found\"), TCL_STATIC);\n    return TCL_ERROR;\n}\n\n\n/*******************************************\n    I/O Channel\n********************************************/\n\n    static int\ntcl_channel_close(ClientData instance, Tcl_Interp *interp UNUSED)\n{\n    int\t\terr = 0;\n\n    /* currently does nothing */\n\n    if (instance != VIMOUT && instance != VIMERR)\n    {\n\tTcl_SetErrno(EBADF);\n\terr = EBADF;\n    }\n    return err;\n}\n\n    static int\ntcl_channel_input(\n    ClientData\tinstance UNUSED,\n    char\t*buf UNUSED,\n    int\t\tbufsiz UNUSED,\n    int\t\t*errptr)\n{\n\n    /* input is currently not supported */\n\n    Tcl_SetErrno(EINVAL);\n    if (errptr)\n\t*errptr = EINVAL;\n    return -1;\n}\n\n    static int\ntcl_channel_output(\n    ClientData\tinstance,\n    const char\t*buf,\n    int\t\tbufsiz,\n    int\t\t*errptr)\n{\n    char_u\t*str;\n    int\t\tresult;\n\n    /* The buffer is not guaranteed to be 0-terminated, and we don't if\n     * there is enough room to add a '\\0'.  So we have to create a copy\n     * of the buffer...\n     */\n    str = vim_strnsave((char_u *)buf, bufsiz);\n    if (!str)\n    {\n\tTcl_SetErrno(ENOMEM);\n\tif (errptr)\n\t    *errptr = ENOMEM;\n\treturn -1;\n    }\n\n    result = bufsiz;\n    if (instance == VIMOUT)\n\ttclmsg((char *)str);\n    else\n    if (instance == VIMERR)\n\ttclerrmsg((char *)str);\n    else\n    {\n\tTcl_SetErrno(EBADF);\n\tif (errptr)\n\t    *errptr = EBADF;\n\tresult = -1;\n    }\n    vim_free(str);\n    return result;\n}\n\n    static void\ntcl_channel_watch(ClientData instance UNUSED, int mask UNUSED)\n{\n    Tcl_SetErrno(EINVAL);\n}\n\n    static int\ntcl_channel_gethandle(\n    ClientData\tinstance UNUSED,\n    int\t\tdirection UNUSED,\n    ClientData\t*handleptr UNUSED)\n{\n    Tcl_SetErrno(EINVAL);\n    return EINVAL;\n}\n\n\nstatic Tcl_ChannelType tcl_channel_type =\n{\n    \"vimmessage\",\t/* typeName */\n    TCL_CHANNEL_VERSION_2, /* version */\n    tcl_channel_close,\t/* closeProc */\n    tcl_channel_input,\t/* inputProc */\n    tcl_channel_output,\t/* outputProc */\n    NULL,\t\t/* seekProc */\n    NULL,\t\t/* setOptionProc */\n    NULL,\t\t/* getOptionProc */\n    tcl_channel_watch,\t/* watchProc */\n    tcl_channel_gethandle, /* getHandleProc */\n    NULL,\t\t/* close2Proc */\n    NULL,\t\t/* blockModeProc */\n#ifdef TCL_CHANNEL_VERSION_2\n    NULL,\t\t/* flushProc */\n    NULL,\t\t/* handlerProc */\n#endif\n/* The following should not be necessary since TCL_CHANNEL_VERSION_2 was\n * set above */\n#ifdef TCL_CHANNEL_VERSION_3\n    NULL,\t\t/* wideSeekProc */\n#endif\n#ifdef TCL_CHANNEL_VERSION_4\n    NULL,\t\t/* threadActionProc */\n#endif\n#ifdef TCL_CHANNEL_VERSION_5\n    NULL\t\t/* truncateProc */\n#endif\n};\n\n/**********************************\n  Interface to vim\n **********************************/\n\n    static void\ntclupdatevars(void)\n{\n    char varname[VARNAME_SIZE];\t/* must be writeable */\n    char *name;\n\n    strcpy(varname, VAR_RANGE1);\n    Tcl_UpdateLinkedVar(tclinfo.interp, varname);\n    strcpy(varname, VAR_RANGE2);\n    Tcl_UpdateLinkedVar(tclinfo.interp, varname);\n    strcpy(varname, VAR_RANGE3);\n    Tcl_UpdateLinkedVar(tclinfo.interp, varname);\n\n    strcpy(varname, VAR_LBASE);\n    Tcl_UpdateLinkedVar(tclinfo.interp, varname);\n\n    name = tclgetbuffer(tclinfo.interp, curbuf);\n    strcpy(tclinfo.curbuf, name);\n    strcpy(varname, VAR_CURBUF);\n    Tcl_UpdateLinkedVar(tclinfo.interp, varname);\n\n    name = tclgetwindow(tclinfo.interp, curwin);\n    strcpy(tclinfo.curwin, name);\n    strcpy(varname, VAR_CURWIN);\n    Tcl_UpdateLinkedVar(tclinfo.interp, varname);\n}\n\n\n    static int\ntclinit(exarg_T *eap)\n{\n    char varname[VARNAME_SIZE];\t/* Tcl_LinkVar requires writeable varname */\n    char *name;\n\n#ifdef DYNAMIC_TCL\n    if (!tcl_enabled(TRUE))\n    {\n\tEMSG(_(\"E571: Sorry, this command is disabled: the Tcl library could not be loaded.\"));\n\treturn FAIL;\n    }\n#endif\n\n    if (!tclinfo.interp)\n    {\n\tTcl_Interp *interp;\n\tstatic Tcl_Channel ch1, ch2;\n\n\t/* Create replacement channels for stdout and stderr; this has to be\n\t * done each time an interpreter is created since the channels are closed\n\t * when the interpreter is deleted */\n\tch1 = Tcl_CreateChannel(&tcl_channel_type, \"vimout\", VIMOUT, TCL_WRITABLE);\n\tch2 = Tcl_CreateChannel(&tcl_channel_type, \"vimerr\", VIMERR, TCL_WRITABLE);\n\tTcl_SetStdChannel(ch1, TCL_STDOUT);\n\tTcl_SetStdChannel(ch2, TCL_STDERR);\n\n\tinterp = Tcl_CreateInterp();\n\tTcl_Preserve(interp);\n\tif (Tcl_Init(interp) == TCL_ERROR)\n\t{\n\t    Tcl_Release(interp);\n\t    Tcl_DeleteInterp(interp);\n\t    return FAIL;\n\t}\n#if 0\n\t/* VIM sure is interactive */\n\tTcl_SetVar(interp, \"tcl_interactive\", \"1\", TCL_GLOBAL_ONLY);\n#endif\n\n\tTcl_SetChannelOption(interp, ch1, \"-buffering\", \"line\");\n#ifdef WIN3264\n\tTcl_SetChannelOption(interp, ch1, \"-translation\", \"lf\");\n#endif\n\tTcl_SetChannelOption(interp, ch2, \"-buffering\", \"line\");\n#ifdef WIN3264\n\tTcl_SetChannelOption(interp, ch2, \"-translation\", \"lf\");\n#endif\n\n\t/* replace standard Tcl exit command */\n\tTcl_DeleteCommand(interp, \"exit\");\n\tTcl_CreateObjCommand(interp, \"exit\", exitcmd,\n\t    (ClientData)NULL, (Tcl_CmdDeleteProc *)NULL);\n\n\t/* new commands, in ::vim namespace */\n\tTcl_CreateObjCommand(interp, \"::vim::buffer\", buffercmd,\n\t    (ClientData)NULL, (Tcl_CmdDeleteProc *)NULL);\n\tTcl_CreateObjCommand(interp, \"::vim::window\", windowcmd,\n\t   (ClientData)NULL, (Tcl_CmdDeleteProc *)NULL);\n\tTcl_CreateObjCommand(interp, \"::vim::command\", commandcmd,\n\t   (ClientData)NULL, (Tcl_CmdDeleteProc *)NULL);\n\tTcl_CreateObjCommand(interp, \"::vim::beep\", beepcmd,\n\t   (ClientData)NULL, (Tcl_CmdDeleteProc *)NULL);\n\tTcl_CreateObjCommand(interp, \"::vim::option\", optioncmd,\n\t   (ClientData)NULL, (Tcl_CmdDeleteProc *)NULL);\n\tTcl_CreateObjCommand(interp, \"::vim::expr\", exprcmd,\n\t   (ClientData)NULL, (Tcl_CmdDeleteProc *)NULL);\n\n\t/* \"lbase\" variable */\n\ttclinfo.lbase = 1;\n\tstrcpy(varname, VAR_LBASE);\n\tTcl_LinkVar(interp, varname, (char *)&tclinfo.lbase, TCL_LINK_INT);\n\n\t/* \"range\" variable */\n\ttclinfo.range_start = eap->line1;\n\tstrcpy(varname, VAR_RANGE1);\n\tTcl_LinkVar(interp, varname, (char *)&tclinfo.range_start, TCL_LINK_INT|TCL_LINK_READ_ONLY);\n\tstrcpy(varname, VAR_RANGE2);\n\tTcl_LinkVar(interp, varname, (char *)&tclinfo.range_start, TCL_LINK_INT|TCL_LINK_READ_ONLY);\n\ttclinfo.range_end   = eap->line2;\n\tstrcpy(varname, VAR_RANGE3);\n\tTcl_LinkVar(interp, varname, (char *)&tclinfo.range_end, TCL_LINK_INT|TCL_LINK_READ_ONLY);\n\n\t/* \"current\" variable */\n\ttclinfo.curbuf = Tcl_Alloc(VARNAME_SIZE);\n\ttclinfo.curwin = Tcl_Alloc(VARNAME_SIZE);\n\tname = tclgetbuffer(interp, curbuf);\n\tstrcpy(tclinfo.curbuf, name);\n\tstrcpy(varname, VAR_CURBUF);\n\tTcl_LinkVar(interp, varname, (char *)&tclinfo.curbuf, TCL_LINK_STRING|TCL_LINK_READ_ONLY);\n\tname = tclgetwindow(interp, curwin);\n\tstrcpy(tclinfo.curwin, name);\n\tstrcpy(varname, VAR_CURWIN);\n\tTcl_LinkVar(interp, varname, (char *)&tclinfo.curwin, TCL_LINK_STRING|TCL_LINK_READ_ONLY);\n\n\ttclinfo.interp = interp;\n    }\n    else\n    {\n\t/* Interpreter already exists, just update variables */\n\ttclinfo.range_start = row2tcl(eap->line1);\n\ttclinfo.range_end = row2tcl(eap->line2);\n\ttclupdatevars();\n    }\n\n    tclinfo.exitvalue = 0;\n    return OK;\n}\n\n    static void\ntclerrmsg(char *text)\n{\n    char *next;\n\n    while ((next=strchr(text, '\\n')))\n    {\n\t*next++ = '\\0';\n\tEMSG(text);\n\ttext = next;\n    }\n    if (*text)\n\tEMSG(text);\n}\n\n    static void\ntclmsg(char *text)\n{\n    char *next;\n\n    while ((next=strchr(text, '\\n')))\n    {\n\t*next++ = '\\0';\n\tMSG(text);\n\ttext = next;\n    }\n    if (*text)\n\tMSG(text);\n}\n\n    static void\ntcldelthisinterp(void)\n{\n    if (!Tcl_InterpDeleted(tclinfo.interp))\n\tTcl_DeleteInterp(tclinfo.interp);\n    Tcl_Release(tclinfo.interp);\n    /* The interpreter is now gets deleted.  All registered commands (esp.\n     * window and buffer commands) are deleted, triggering their deletion\n     * callback, which deletes all refs pointing to this interpreter.\n     * We could garbage-collect the unused ref structs in all windows and\n     * buffers, but unless the user creates hundreds of sub-interpreters\n     * all referring to lots of windows and buffers, this is hardly worth\n     * the effort.  Unused refs are recycled by other interpreters, and\n     * all refs are free'd when the window/buffer gets closed by vim.\n     */\n\n    tclinfo.interp = NULL;\n    Tcl_Free(tclinfo.curbuf);\n    Tcl_Free(tclinfo.curwin);\n    tclinfo.curbuf = tclinfo.curwin = NULL;\n}\n\n    static int\ntclexit(int error)\n{\n    int newerr = OK;\n\n    if (Tcl_InterpDeleted(tclinfo.interp)     /* True if we intercepted Tcl's exit command */\n#if (TCL_MAJOR_VERSION == 8 && TCL_MINOR_VERSION >= 5) || TCL_MAJOR_VERSION > 8\n\t|| Tcl_LimitExceeded(tclinfo.interp)  /* True if the interpreter cannot continue */\n#endif\n\t)\n    {\n\tchar buf[50];\n\n\tsprintf(buf, _(\"E572: exit code %d\"), tclinfo.exitvalue);\n\ttclerrmsg(buf);\n\tif (tclinfo.exitvalue == 0)\n\t{\n\t    did_emsg = 0;\n\t    newerr = OK;\n\t}\n\telse\n\t    newerr = FAIL;\n\n\ttcldelthisinterp();\n    }\n    else\n    {\n\tchar *result;\n\n\tresult = (char *)Tcl_GetStringResult(tclinfo.interp);\n\tif (error == TCL_OK)\n\t{\n\t    tclmsg(result);\n\t    newerr = OK;\n\t}\n\telse\n\t{\n\t    tclerrmsg(result);\n\t    newerr = FAIL;\n\t}\n    }\n\n    return newerr;\n}\n\n/*\n * \":tcl\"\n */\n    void\nex_tcl(exarg_T *eap)\n{\n    char_u\t*script;\n    int\t\terr;\n\n    script = script_get(eap, eap->arg);\n    if (!eap->skip)\n    {\n\terr = tclinit(eap);\n\tif (err == OK)\n\t{\n\t    Tcl_AllowExceptions(tclinfo.interp);\n\t    if (script == NULL)\n\t\terr = Tcl_Eval(tclinfo.interp, (char *)eap->arg);\n\t    else\n\t\terr = Tcl_Eval(tclinfo.interp, (char *)script);\n\t    err = tclexit(err);\n\t}\n    }\n    vim_free(script);\n}\n\n/*\n * \":tclfile\"\n */\n    void\nex_tclfile(exarg_T *eap)\n{\n    char *file = (char *)eap->arg;\n    int err;\n\n    err = tclinit(eap);\n    if (err == OK)\n    {\n\tTcl_AllowExceptions(tclinfo.interp);\n\terr = Tcl_EvalFile(tclinfo.interp, file);\n\terr = tclexit(err);\n    }\n}\n\n/*\n * \":tcldo\"\n */\n    void\nex_tcldo(exarg_T *eap)\n{\n    char\t*script, *line;\n    int\t\terr, rs, re, lnum;\n    char\tvar_lnum[VARNAME_SIZE]; /* must be writeable memory */\n    char\tvar_line[VARNAME_SIZE];\n    linenr_T\tfirst_line = 0;\n    linenr_T\tlast_line = 0;\n\n    rs = eap->line1;\n    re = eap->line2;\n    script = (char *)eap->arg;\n    strcpy(var_lnum, VAR_CURLNUM);\n    strcpy(var_line, VAR_CURLINE);\n\n    err = tclinit(eap);\n    if (err != OK)\n\treturn;\n\n    lnum = row2tcl(rs);\n    Tcl_LinkVar(tclinfo.interp, var_lnum, (char *)&lnum, TCL_LINK_INT|TCL_LINK_READ_ONLY);\n    err = TCL_OK;\n    if (u_save((linenr_T)(rs-1), (linenr_T)(re+1)) != OK)\n    {\n\tTcl_SetResult(tclinfo.interp, _(\"cannot save undo information\"), TCL_STATIC);\n\terr = TCL_ERROR;\n    }\n    while (err == TCL_OK  &&  rs <= re)\n    {\n\tline = (char *)ml_get_buf(curbuf, (linenr_T)rs, FALSE);\n\tif (!line)\n\t{\n\t    Tcl_SetResult(tclinfo.interp, _(\"cannot get line\"), TCL_STATIC);\n\t    err = TCL_ERROR;\n\t    break;\n\t}\n\tTcl_SetVar(tclinfo.interp, var_line, line, 0);\n\tTcl_AllowExceptions(tclinfo.interp);\n\terr = Tcl_Eval(tclinfo.interp, script);\n\tif (err != TCL_OK\n\t    || Tcl_InterpDeleted(tclinfo.interp)\n#if (TCL_MAJOR_VERSION == 8 && TCL_MINOR_VERSION >= 5) || TCL_MAJOR_VERSION > 8\n\t    || Tcl_LimitExceeded(tclinfo.interp)\n#endif\n\t   )\n\t    break;\n\tline = (char *)Tcl_GetVar(tclinfo.interp, var_line, 0);\n\tif (line)\n\t{\n\t    if (ml_replace((linenr_T)rs, (char_u *)line, TRUE) != OK)\n\t    {\n\t\tTcl_SetResult(tclinfo.interp, _(\"cannot replace line\"), TCL_STATIC);\n\t\terr = TCL_ERROR;\n\t\tbreak;\n\t    }\n\t    if (first_line == 0)\n\t\tfirst_line = rs;\n\t    last_line = rs;\n\t}\n\t++rs;\n\t++lnum;\n\tTcl_UpdateLinkedVar(tclinfo.interp, var_lnum);\n    }\n    if (first_line)\n\tchanged_lines(first_line, 0, last_line + 1, (long)0);\n\n    Tcl_UnsetVar(tclinfo.interp, var_line, 0);\n    Tcl_UnlinkVar(tclinfo.interp, var_lnum);\n    if (err == TCL_OK)\n\tTcl_ResetResult(tclinfo.interp);\n\n    (void)tclexit(err);\n}\n\n    static void\ntcldelallrefs(struct ref *ref)\n{\n    struct ref\t*next;\n    int\t\terr;\n    char\t*result;\n\n#ifdef DYNAMIC_TCL\n    /* TODO: this code currently crashes Vim on exit */\n    if (exiting)\n\treturn;\n#endif\n\n    while (ref != NULL)\n    {\n\tnext = ref->next;\n\tif (ref->interp)\n\t{\n\t    if (ref->delcmd)\n\t    {\n\t\terr = Tcl_GlobalEvalObj(ref->interp, ref->delcmd);\n\t\tif (err != TCL_OK)\n\t\t{\n\t\t    result = (char *)Tcl_GetStringResult(ref->interp);\n\t\t    if (result)\n\t\t\ttclerrmsg(result);\n\t\t}\n\t\tTcl_DecrRefCount(ref->delcmd);\n\t\tref->delcmd = NULL;\n\t    }\n\t    Tcl_DeleteCommandFromToken(ref->interp, ref->cmd);\n\t}\n\tTcl_Free((char *)ref);\n\tref = next;\n    }\n}\n\n    void\ntcl_buffer_free(buf_T *buf)\n{\n    struct ref *reflist;\n\n#ifdef DYNAMIC_TCL\n    if (!stubs_initialized)\t/* Not using Tcl, nothing to do. */\n\treturn;\n#endif\n\n    reflist = (struct ref *)(buf->b_tcl_ref);\n    if (reflist != &refsdeleted)\n    {\n\tbuf->b_tcl_ref = (void *)&refsdeleted;\n\ttcldelallrefs(reflist);\n\tbuf->b_tcl_ref = NULL;\n    }\n}\n\n#if defined(FEAT_WINDOWS) || defined(PROTO)\n    void\ntcl_window_free(win_T *win)\n{\n    struct ref *reflist;\n\n#ifdef DYNAMIC_TCL\n    if (!stubs_initialized)\t/* Not using Tcl, nothing to do. */\n\treturn;\n#endif\n\n    reflist = (struct ref*)(win->w_tcl_ref);\n    if (reflist != &refsdeleted)\n    {\n\twin->w_tcl_ref = (void *)&refsdeleted;\n\ttcldelallrefs(reflist);\n\twin->w_tcl_ref = NULL;\n    }\n}\n#endif\n\n/* The End */\n",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/src/if_ruby.c": "/* vi:set ts=8 sts=4 sw=4 noet:\n *\n * VIM - Vi IMproved\tby Bram Moolenaar\n *\n * Ruby interface by Shugo Maeda\n *   with improvements by SegPhault (Ryan Paul)\n *   with improvements by Jon Maken\n *\n * Do \":help uganda\"  in Vim to read copying and usage conditions.\n * Do \":help credits\" in Vim to see a list of people who contributed.\n * See README.txt for an overview of the Vim source code.\n */\n\n#ifdef HAVE_CONFIG_H\n# include \"auto/config.h\"\n#endif\n\n#include <stdio.h>\n#include <string.h>\n\n#ifdef _WIN32\n# if !defined(DYNAMIC_RUBY_VER) || (DYNAMIC_RUBY_VER < 18)\n#   define NT\n# endif\n# ifndef DYNAMIC_RUBY\n#  define IMPORT /* For static dll usage __declspec(dllimport) */\n#  define RUBYEXTERN __declspec(dllimport)\n# endif\n#endif\n#ifndef RUBYEXTERN\n# define RUBYEXTERN extern\n#endif\n\n#if defined(DYNAMIC_RUBY_VER) && DYNAMIC_RUBY_VER >= 24\n# define USE_RUBY_INTEGER\n#endif\n\n#ifdef DYNAMIC_RUBY\n/*\n * This is tricky.  In ruby.h there is (inline) function rb_class_of()\n * definition.  This function use these variables.  But we want function to\n * use dll_* variables.\n */\n# define rb_cFalseClass\t\t(*dll_rb_cFalseClass)\n# define rb_cFixnum\t\t(*dll_rb_cFixnum)\n# if defined(USE_RUBY_INTEGER)\n#  define rb_cInteger\t\t(*dll_rb_cInteger)\n# endif\n# if defined(DYNAMIC_RUBY_VER) && DYNAMIC_RUBY_VER >= 20\n#  define rb_cFloat\t\t(*dll_rb_cFloat)\n# endif\n# define rb_cNilClass\t\t(*dll_rb_cNilClass)\n# define rb_cSymbol\t\t(*dll_rb_cSymbol)\n# define rb_cTrueClass\t\t(*dll_rb_cTrueClass)\n# if defined(DYNAMIC_RUBY_VER) && DYNAMIC_RUBY_VER >= 18\n/*\n * On ver 1.8, all Ruby functions are exported with \"__declspec(dllimport)\"\n * in ruby.h.  But it causes trouble for these variables, because it is\n * defined in this file.  When defined this RUBY_EXPORT it modified to\n * \"extern\" and be able to avoid this problem.\n */\n#  define RUBY_EXPORT\n# endif\n\n#if !(defined(WIN32) || defined(_WIN64))\n# include <dlfcn.h>\n# define HINSTANCE void*\n# define RUBY_PROC void*\n# define load_dll(n) dlopen((n), RTLD_LAZY|RTLD_GLOBAL)\n# define symbol_from_dll dlsym\n# define close_dll dlclose\n#else\n# define RUBY_PROC FARPROC\n# define load_dll vimLoadLib\n# define symbol_from_dll GetProcAddress\n# define close_dll FreeLibrary\n#endif\n\n#endif  /* ifdef DYNAMIC_RUBY */\n\n/* suggested by Ariya Mizutani */\n#if (_MSC_VER == 1200)\n# undef _WIN32_WINNT\n#endif\n\n#if (defined(RUBY_VERSION) && RUBY_VERSION >= 19) \\\n    || (defined(DYNAMIC_RUBY_VER) && DYNAMIC_RUBY_VER >= 19)\n# define RUBY19_OR_LATER 1\n#endif\n\n#if (defined(RUBY_VERSION) && RUBY_VERSION >= 20) \\\n    || (defined(DYNAMIC_RUBY_VER) && DYNAMIC_RUBY_VER >= 20)\n# define RUBY20_OR_LATER 1\n#endif\n\n#if defined(DYNAMIC_RUBY_VER) && DYNAMIC_RUBY_VER >= 19\n/* Ruby 1.9 defines a number of static functions which use rb_num2long and\n * rb_int2big */\n# define rb_num2long rb_num2long_stub\n# define rb_int2big rb_int2big_stub\n#endif\n\n#if defined(DYNAMIC_RUBY_VER) && DYNAMIC_RUBY_VER >= 19 \\\n\t&& VIM_SIZEOF_INT < VIM_SIZEOF_LONG\n/* Ruby 1.9 defines a number of static functions which use rb_fix2int and\n * rb_num2int if VIM_SIZEOF_INT < VIM_SIZEOF_LONG (64bit) */\n# define rb_fix2int rb_fix2int_stub\n# define rb_num2int rb_num2int_stub\n#endif\n\n#if defined(DYNAMIC_RUBY_VER) && DYNAMIC_RUBY_VER == 21\n/* Ruby 2.1 adds new GC called RGenGC and RARRAY_PTR uses\n * rb_gc_writebarrier_unprotect_promoted if USE_RGENGC  */\n# define rb_gc_writebarrier_unprotect_promoted rb_gc_writebarrier_unprotect_promoted_stub\n#endif\n#if defined(DYNAMIC_RUBY_VER) && DYNAMIC_RUBY_VER >= 22\n# define rb_gc_writebarrier_unprotect rb_gc_writebarrier_unprotect_stub\n#endif\n\n#include <ruby.h>\n#ifdef RUBY19_OR_LATER\n# include <ruby/encoding.h>\n#endif\n\n#undef off_t\t/* ruby defines off_t as _int64, Mingw uses long */\n#undef EXTERN\n#undef _\n\n/* T_DATA defined both by Ruby and Mac header files, hack around it... */\n#if defined(MACOS_X_UNIX) || defined(macintosh)\n# define __OPENTRANSPORT__\n# define __OPENTRANSPORTPROTOCOL__\n# define __OPENTRANSPORTPROVIDERS__\n#endif\n\n/*\n * The TypedData_XXX macro family can be used since Ruby 1.9.2 but\n * rb_data_type_t changed in 1.9.3, therefore require at least 2.0.\n * The old Data_XXX macro family was deprecated on Ruby 2.2.\n * Use TypedData_XXX if available.\n */\n#if defined(TypedData_Wrap_Struct) && defined(RUBY20_OR_LATER)\n# define USE_TYPEDDATA\t1\n#endif\n\n/*\n * Backward compatibility for Ruby 1.8 and earlier.\n * Ruby 1.9 does not provide STR2CSTR, instead StringValuePtr is provided.\n * Ruby 1.9 does not provide RXXX(s)->len and RXXX(s)->ptr, instead\n * RXXX_LEN(s) and RXXX_PTR(s) are provided.\n */\n#ifndef StringValuePtr\n# define StringValuePtr(s) STR2CSTR(s)\n#endif\n#ifndef RARRAY_LEN\n# define RARRAY_LEN(s) RARRAY(s)->len\n#endif\n#ifndef RARRAY_PTR\n# define RARRAY_PTR(s) RARRAY(s)->ptr\n#endif\n#ifndef RSTRING_LEN\n# define RSTRING_LEN(s) RSTRING(s)->len\n#endif\n#ifndef RSTRING_PTR\n# define RSTRING_PTR(s) RSTRING(s)->ptr\n#endif\n\n#ifdef HAVE_DUP\n# undef HAVE_DUP\n#endif\n\n#include \"vim.h\"\n#include \"version.h\"\n\n#if defined(PROTO) && !defined(FEAT_RUBY)\n/* Define these to be able to generate the function prototypes. */\n# define VALUE int\n# define RUBY_DATA_FUNC int\n#endif\n\nstatic int ruby_initialized = 0;\nstatic void *ruby_stack_start;\nstatic VALUE objtbl;\n\nstatic VALUE mVIM;\nstatic VALUE cBuffer;\nstatic VALUE cVimWindow;\nstatic VALUE eDeletedBufferError;\nstatic VALUE eDeletedWindowError;\n\nstatic int ensure_ruby_initialized(void);\nstatic void error_print(int);\nstatic void ruby_io_init(void);\nstatic void ruby_vim_init(void);\n\n#if defined(RUBY19_OR_LATER) || defined(RUBY_INIT_STACK)\n# if defined(__ia64) && !defined(ruby_init_stack)\n#  define ruby_init_stack(addr) ruby_init_stack((addr), rb_ia64_bsp())\n# endif\n#endif\n\n#if defined(DYNAMIC_RUBY) || defined(PROTO)\n# if defined(PROTO) && !defined(HINSTANCE)\n#  define HINSTANCE int\t\t/* for generating prototypes */\n# endif\n\n/*\n * Wrapper defines\n */\n# define rb_assoc_new\t\t\tdll_rb_assoc_new\n# define rb_cObject\t\t\t(*dll_rb_cObject)\n# define rb_check_type\t\t\tdll_rb_check_type\n# ifdef USE_TYPEDDATA\n#  define rb_check_typeddata\t\tdll_rb_check_typeddata\n# endif\n# define rb_class_path\t\t\tdll_rb_class_path\n# ifdef USE_TYPEDDATA\n#  if defined(DYNAMIC_RUBY_VER) && DYNAMIC_RUBY_VER >= 23\n#   define rb_data_typed_object_wrap\tdll_rb_data_typed_object_wrap\n#  else\n#   define rb_data_typed_object_alloc\tdll_rb_data_typed_object_alloc\n#  endif\n# else\n#  define rb_data_object_alloc\t\tdll_rb_data_object_alloc\n# endif\n# define rb_define_class_under\t\tdll_rb_define_class_under\n# define rb_define_const\t\t\tdll_rb_define_const\n# define rb_define_global_function\tdll_rb_define_global_function\n# define rb_define_method\t\tdll_rb_define_method\n# define rb_define_module\t\tdll_rb_define_module\n# define rb_define_module_function\tdll_rb_define_module_function\n# define rb_define_singleton_method\tdll_rb_define_singleton_method\n# define rb_define_virtual_variable\tdll_rb_define_virtual_variable\n# define rb_stdout\t\t\t(*dll_rb_stdout)\n# define rb_eArgError\t\t\t(*dll_rb_eArgError)\n# define rb_eIndexError\t\t\t(*dll_rb_eIndexError)\n# define rb_eRuntimeError\t\t(*dll_rb_eRuntimeError)\n# define rb_eStandardError\t\t(*dll_rb_eStandardError)\n# define rb_eval_string_protect\t\tdll_rb_eval_string_protect\n# define rb_global_variable\t\tdll_rb_global_variable\n# define rb_hash_aset\t\t\tdll_rb_hash_aset\n# define rb_hash_new\t\t\tdll_rb_hash_new\n# define rb_inspect\t\t\tdll_rb_inspect\n# define rb_int2inum\t\t\tdll_rb_int2inum\n# if VIM_SIZEOF_INT < VIM_SIZEOF_LONG /* 64 bits only */\n#  if defined(DYNAMIC_RUBY_VER) && DYNAMIC_RUBY_VER <= 18\n#   define rb_fix2int\t\t\tdll_rb_fix2int\n#   define rb_num2int\t\t\tdll_rb_num2int\n#  endif\n#  define rb_num2uint\t\t\tdll_rb_num2uint\n# endif\n# define rb_lastline_get\t\t\tdll_rb_lastline_get\n# define rb_lastline_set\t\t\tdll_rb_lastline_set\n# define rb_load_protect\t\t\tdll_rb_load_protect\n# ifndef RUBY19_OR_LATER\n#  define rb_num2long\t\t\tdll_rb_num2long\n# endif\n# if defined(DYNAMIC_RUBY_VER) && DYNAMIC_RUBY_VER <= 19\n#  define rb_num2ulong\t\t\tdll_rb_num2ulong\n# endif\n# define rb_obj_alloc\t\t\tdll_rb_obj_alloc\n# define rb_obj_as_string\t\tdll_rb_obj_as_string\n# define rb_obj_id\t\t\tdll_rb_obj_id\n# define rb_raise\t\t\tdll_rb_raise\n# define rb_str_cat\t\t\tdll_rb_str_cat\n# define rb_str_concat\t\t\tdll_rb_str_concat\n# undef rb_str_new\n# define rb_str_new\t\t\tdll_rb_str_new\n# ifdef rb_str_new2\n/* Ruby may #define rb_str_new2 to use rb_str_new_cstr. */\n#  define need_rb_str_new_cstr 1\n/* Ruby's headers #define rb_str_new_cstr to make use of GCC's\n * __builtin_constant_p extension. */\n#  undef rb_str_new_cstr\n#  define rb_str_new_cstr\t\tdll_rb_str_new_cstr\n# else\n#  define rb_str_new2\t\t\tdll_rb_str_new2\n# endif\n# if defined(DYNAMIC_RUBY_VER) && DYNAMIC_RUBY_VER >= 18\n#  define rb_string_value\t\tdll_rb_string_value\n#  define rb_string_value_ptr\t\tdll_rb_string_value_ptr\n#  define rb_float_new\t\t\tdll_rb_float_new\n#  define rb_ary_new\t\t\tdll_rb_ary_new\n#  define rb_ary_push\t\t\tdll_rb_ary_push\n#  if defined(RUBY19_OR_LATER) || defined(RUBY_INIT_STACK)\n#   ifdef __ia64\n#    define rb_ia64_bsp\t\t\tdll_rb_ia64_bsp\n#    undef ruby_init_stack\n#    define ruby_init_stack(addr)\tdll_ruby_init_stack((addr), rb_ia64_bsp())\n#   else\n#    define ruby_init_stack\t\tdll_ruby_init_stack\n#   endif\n#  endif\n# else\n#  define rb_str2cstr\t\t\tdll_rb_str2cstr\n# endif\n# ifdef RUBY19_OR_LATER\n#  define rb_errinfo\t\t\tdll_rb_errinfo\n# else\n#  define ruby_errinfo\t\t\t(*dll_ruby_errinfo)\n# endif\n# define ruby_init\t\t\tdll_ruby_init\n# define ruby_init_loadpath\t\tdll_ruby_init_loadpath\n# ifdef WIN3264\n#  define NtInitialize\t\t\tdll_NtInitialize\n#  if defined(DYNAMIC_RUBY_VER) && DYNAMIC_RUBY_VER >= 18\n#   define rb_w32_snprintf\t\tdll_rb_w32_snprintf\n#  endif\n# endif\n\n# ifdef RUBY19_OR_LATER\n#  define ruby_script\t\t\tdll_ruby_script\n#  define rb_enc_find_index\t\tdll_rb_enc_find_index\n#  define rb_enc_find\t\t\tdll_rb_enc_find\n#  undef rb_enc_str_new\n#  define rb_enc_str_new\t\tdll_rb_enc_str_new\n#  define rb_sprintf\t\t\tdll_rb_sprintf\n#  define rb_require\t\t\tdll_rb_require\n#  define ruby_options\t\t\tdll_ruby_options\n# endif\n\n/*\n * Pointers for dynamic link\n */\nstatic VALUE (*dll_rb_assoc_new) (VALUE, VALUE);\nVALUE *dll_rb_cFalseClass;\nVALUE *dll_rb_cFixnum;\n# if defined(USE_RUBY_INTEGER)\nVALUE *dll_rb_cInteger;\n# endif\n# if defined(DYNAMIC_RUBY_VER) && DYNAMIC_RUBY_VER >= 20\nVALUE *dll_rb_cFloat;\n# endif\nVALUE *dll_rb_cNilClass;\nstatic VALUE *dll_rb_cObject;\nVALUE *dll_rb_cSymbol;\nVALUE *dll_rb_cTrueClass;\nstatic void (*dll_rb_check_type) (VALUE,int);\n# ifdef USE_TYPEDDATA\nstatic void *(*dll_rb_check_typeddata) (VALUE,const rb_data_type_t *);\n# endif\nstatic VALUE (*dll_rb_class_path) (VALUE);\n# ifdef USE_TYPEDDATA\n#  if defined(DYNAMIC_RUBY_VER) && DYNAMIC_RUBY_VER >= 23\nstatic VALUE (*dll_rb_data_typed_object_wrap) (VALUE, void*, const rb_data_type_t *);\n#  else\nstatic VALUE (*dll_rb_data_typed_object_alloc) (VALUE, void*, const rb_data_type_t *);\n#  endif\n# else\nstatic VALUE (*dll_rb_data_object_alloc) (VALUE, void*, RUBY_DATA_FUNC, RUBY_DATA_FUNC);\n# endif\nstatic VALUE (*dll_rb_define_class_under) (VALUE, const char*, VALUE);\nstatic void (*dll_rb_define_const) (VALUE,const char*,VALUE);\nstatic void (*dll_rb_define_global_function) (const char*,VALUE(*)(),int);\nstatic void (*dll_rb_define_method) (VALUE,const char*,VALUE(*)(),int);\nstatic VALUE (*dll_rb_define_module) (const char*);\nstatic void (*dll_rb_define_module_function) (VALUE,const char*,VALUE(*)(),int);\nstatic void (*dll_rb_define_singleton_method) (VALUE,const char*,VALUE(*)(),int);\nstatic void (*dll_rb_define_virtual_variable) (const char*,VALUE(*)(),void(*)());\nstatic VALUE *dll_rb_stdout;\nstatic VALUE *dll_rb_eArgError;\nstatic VALUE *dll_rb_eIndexError;\nstatic VALUE *dll_rb_eRuntimeError;\nstatic VALUE *dll_rb_eStandardError;\nstatic VALUE (*dll_rb_eval_string_protect) (const char*, int*);\nstatic void (*dll_rb_global_variable) (VALUE*);\nstatic VALUE (*dll_rb_hash_aset) (VALUE, VALUE, VALUE);\nstatic VALUE (*dll_rb_hash_new) (void);\nstatic VALUE (*dll_rb_inspect) (VALUE);\nstatic VALUE (*dll_rb_int2inum) (long);\n# if VIM_SIZEOF_INT < VIM_SIZEOF_LONG /* 64 bits only */\nstatic long (*dll_rb_fix2int) (VALUE);\nstatic long (*dll_rb_num2int) (VALUE);\nstatic unsigned long (*dll_rb_num2uint) (VALUE);\n# endif\nstatic VALUE (*dll_rb_lastline_get) (void);\nstatic void (*dll_rb_lastline_set) (VALUE);\nstatic void (*dll_rb_load_protect) (VALUE, int, int*);\nstatic long (*dll_rb_num2long) (VALUE);\nstatic unsigned long (*dll_rb_num2ulong) (VALUE);\nstatic VALUE (*dll_rb_obj_alloc) (VALUE);\nstatic VALUE (*dll_rb_obj_as_string) (VALUE);\nstatic VALUE (*dll_rb_obj_id) (VALUE);\nstatic void (*dll_rb_raise) (VALUE, const char*, ...);\n# if defined(DYNAMIC_RUBY_VER) && DYNAMIC_RUBY_VER >= 18\nstatic VALUE (*dll_rb_string_value) (volatile VALUE*);\n# else\nstatic char *(*dll_rb_str2cstr) (VALUE,int*);\n# endif\nstatic VALUE (*dll_rb_str_cat) (VALUE, const char*, long);\nstatic VALUE (*dll_rb_str_concat) (VALUE, VALUE);\nstatic VALUE (*dll_rb_str_new) (const char*, long);\n# ifdef need_rb_str_new_cstr\n/* Ruby may #define rb_str_new2 to use rb_str_new_cstr. */\nstatic VALUE (*dll_rb_str_new_cstr) (const char*);\n# else\nstatic VALUE (*dll_rb_str_new2) (const char*);\n# endif\n# ifdef RUBY19_OR_LATER\nstatic VALUE (*dll_rb_errinfo) (void);\n# else\nstatic VALUE *dll_ruby_errinfo;\n# endif\nstatic void (*dll_ruby_init) (void);\nstatic void (*dll_ruby_init_loadpath) (void);\n# ifdef WIN3264\nstatic void (*dll_NtInitialize) (int*, char***);\n#  if defined(DYNAMIC_RUBY_VER) && DYNAMIC_RUBY_VER >= 18\nstatic int (*dll_rb_w32_snprintf)(char*, size_t, const char*, ...);\n#  endif\n# endif\n# if defined(DYNAMIC_RUBY_VER) && DYNAMIC_RUBY_VER >= 18\nstatic char * (*dll_rb_string_value_ptr) (volatile VALUE*);\nstatic VALUE (*dll_rb_float_new) (double);\nstatic VALUE (*dll_rb_ary_new) (void);\nstatic VALUE (*dll_rb_ary_push) (VALUE, VALUE);\n#  if defined(RUBY19_OR_LATER) || defined(RUBY_INIT_STACK)\n#   ifdef __ia64\nstatic void * (*dll_rb_ia64_bsp) (void);\nstatic void (*dll_ruby_init_stack)(VALUE*, void*);\n#   else\nstatic void (*dll_ruby_init_stack)(VALUE*);\n#   endif\n#  endif\n# endif\n# ifdef RUBY19_OR_LATER\nstatic VALUE (*dll_rb_int2big)(SIGNED_VALUE);\n# endif\n\n# ifdef RUBY19_OR_LATER\nstatic void (*dll_ruby_script) (const char*);\nstatic int (*dll_rb_enc_find_index) (const char*);\nstatic rb_encoding* (*dll_rb_enc_find) (const char*);\nstatic VALUE (*dll_rb_enc_str_new) (const char*, long, rb_encoding*);\nstatic VALUE (*dll_rb_sprintf) (const char*, ...);\nstatic VALUE (*dll_rb_require) (const char*);\nstatic void* (*ruby_options)(int, char**);\n# endif\n\n# if defined(USE_RGENGC) && USE_RGENGC\n#  if defined(DYNAMIC_RUBY_VER) && DYNAMIC_RUBY_VER == 21\nstatic void (*dll_rb_gc_writebarrier_unprotect_promoted)(VALUE);\n#  else\nstatic void (*dll_rb_gc_writebarrier_unprotect)(VALUE obj);\n#  endif\n# endif\n\n# if defined(RUBY19_OR_LATER) && !defined(PROTO)\n#  if defined(DYNAMIC_RUBY_VER) && DYNAMIC_RUBY_VER >= 22\nlong rb_num2long_stub(VALUE x)\n#  else\nSIGNED_VALUE rb_num2long_stub(VALUE x)\n#  endif\n{\n    return dll_rb_num2long(x);\n}\nVALUE rb_int2big_stub(SIGNED_VALUE x)\n{\n    return dll_rb_int2big(x);\n}\n#  if defined(DYNAMIC_RUBY_VER) && DYNAMIC_RUBY_VER >= 19 \\\n\t&& VIM_SIZEOF_INT < VIM_SIZEOF_LONG\nlong rb_fix2int_stub(VALUE x)\n{\n    return dll_rb_fix2int(x);\n}\nlong rb_num2int_stub(VALUE x)\n{\n    return dll_rb_num2int(x);\n}\n#  endif\n#  if defined(DYNAMIC_RUBY_VER) && DYNAMIC_RUBY_VER >= 20\nVALUE\nrb_float_new_in_heap(double d)\n{\n    return dll_rb_float_new(d);\n}\n#   if defined(DYNAMIC_RUBY_VER) && DYNAMIC_RUBY_VER >= 22\nunsigned long rb_num2ulong(VALUE x)\n#   else\nVALUE rb_num2ulong(VALUE x)\n#   endif\n{\n    return (long)RSHIFT((SIGNED_VALUE)(x),1);\n}\n#  endif\n# endif\n\n   /* Do not generate a prototype here, VALUE isn't always defined. */\n# if defined(USE_RGENGC) && USE_RGENGC && !defined(PROTO)\n#  if defined(DYNAMIC_RUBY_VER) && DYNAMIC_RUBY_VER == 21\nvoid rb_gc_writebarrier_unprotect_promoted_stub(VALUE obj)\n{\n    dll_rb_gc_writebarrier_unprotect_promoted(obj);\n}\n#  else\nvoid rb_gc_writebarrier_unprotect_stub(VALUE obj)\n{\n    dll_rb_gc_writebarrier_unprotect(obj);\n}\n#  endif\n# endif\n\nstatic HINSTANCE hinstRuby = NULL; /* Instance of ruby.dll */\n\n/*\n * Table of name to function pointer of ruby.\n */\nstatic struct\n{\n    char *name;\n    RUBY_PROC *ptr;\n} ruby_funcname_table[] =\n{\n    {\"rb_assoc_new\", (RUBY_PROC*)&dll_rb_assoc_new},\n    {\"rb_cFalseClass\", (RUBY_PROC*)&dll_rb_cFalseClass},\n    {\"rb_cFixnum\", (RUBY_PROC*)&dll_rb_cFixnum},\n# if defined(USE_RUBY_INTEGER)\n    {\"rb_cInteger\", (RUBY_PROC*)&dll_rb_cInteger},\n# endif\n# if defined(DYNAMIC_RUBY_VER) && DYNAMIC_RUBY_VER >= 20\n    {\"rb_cFloat\", (RUBY_PROC*)&dll_rb_cFloat},\n# endif\n    {\"rb_cNilClass\", (RUBY_PROC*)&dll_rb_cNilClass},\n    {\"rb_cObject\", (RUBY_PROC*)&dll_rb_cObject},\n    {\"rb_cSymbol\", (RUBY_PROC*)&dll_rb_cSymbol},\n    {\"rb_cTrueClass\", (RUBY_PROC*)&dll_rb_cTrueClass},\n    {\"rb_check_type\", (RUBY_PROC*)&dll_rb_check_type},\n# ifdef USE_TYPEDDATA\n    {\"rb_check_typeddata\", (RUBY_PROC*)&dll_rb_check_typeddata},\n# endif\n    {\"rb_class_path\", (RUBY_PROC*)&dll_rb_class_path},\n# ifdef USE_TYPEDDATA\n#  if defined(DYNAMIC_RUBY_VER) && DYNAMIC_RUBY_VER >= 23\n    {\"rb_data_typed_object_wrap\", (RUBY_PROC*)&dll_rb_data_typed_object_wrap},\n#  else\n    {\"rb_data_typed_object_alloc\", (RUBY_PROC*)&dll_rb_data_typed_object_alloc},\n#  endif\n# else\n    {\"rb_data_object_alloc\", (RUBY_PROC*)&dll_rb_data_object_alloc},\n# endif\n    {\"rb_define_class_under\", (RUBY_PROC*)&dll_rb_define_class_under},\n    {\"rb_define_const\", (RUBY_PROC*)&dll_rb_define_const},\n    {\"rb_define_global_function\", (RUBY_PROC*)&dll_rb_define_global_function},\n    {\"rb_define_method\", (RUBY_PROC*)&dll_rb_define_method},\n    {\"rb_define_module\", (RUBY_PROC*)&dll_rb_define_module},\n    {\"rb_define_module_function\", (RUBY_PROC*)&dll_rb_define_module_function},\n    {\"rb_define_singleton_method\", (RUBY_PROC*)&dll_rb_define_singleton_method},\n    {\"rb_define_virtual_variable\", (RUBY_PROC*)&dll_rb_define_virtual_variable},\n    {\"rb_stdout\", (RUBY_PROC*)&dll_rb_stdout},\n    {\"rb_eArgError\", (RUBY_PROC*)&dll_rb_eArgError},\n    {\"rb_eIndexError\", (RUBY_PROC*)&dll_rb_eIndexError},\n    {\"rb_eRuntimeError\", (RUBY_PROC*)&dll_rb_eRuntimeError},\n    {\"rb_eStandardError\", (RUBY_PROC*)&dll_rb_eStandardError},\n    {\"rb_eval_string_protect\", (RUBY_PROC*)&dll_rb_eval_string_protect},\n    {\"rb_global_variable\", (RUBY_PROC*)&dll_rb_global_variable},\n    {\"rb_hash_aset\", (RUBY_PROC*)&dll_rb_hash_aset},\n    {\"rb_hash_new\", (RUBY_PROC*)&dll_rb_hash_new},\n    {\"rb_inspect\", (RUBY_PROC*)&dll_rb_inspect},\n    {\"rb_int2inum\", (RUBY_PROC*)&dll_rb_int2inum},\n# if VIM_SIZEOF_INT < VIM_SIZEOF_LONG /* 64 bits only */\n    {\"rb_fix2int\", (RUBY_PROC*)&dll_rb_fix2int},\n    {\"rb_num2int\", (RUBY_PROC*)&dll_rb_num2int},\n    {\"rb_num2uint\", (RUBY_PROC*)&dll_rb_num2uint},\n# endif\n    {\"rb_lastline_get\", (RUBY_PROC*)&dll_rb_lastline_get},\n    {\"rb_lastline_set\", (RUBY_PROC*)&dll_rb_lastline_set},\n    {\"rb_load_protect\", (RUBY_PROC*)&dll_rb_load_protect},\n    {\"rb_num2long\", (RUBY_PROC*)&dll_rb_num2long},\n    {\"rb_num2ulong\", (RUBY_PROC*)&dll_rb_num2ulong},\n    {\"rb_obj_alloc\", (RUBY_PROC*)&dll_rb_obj_alloc},\n    {\"rb_obj_as_string\", (RUBY_PROC*)&dll_rb_obj_as_string},\n    {\"rb_obj_id\", (RUBY_PROC*)&dll_rb_obj_id},\n    {\"rb_raise\", (RUBY_PROC*)&dll_rb_raise},\n# if defined(DYNAMIC_RUBY_VER) && DYNAMIC_RUBY_VER >= 18\n    {\"rb_string_value\", (RUBY_PROC*)&dll_rb_string_value},\n# else\n    {\"rb_str2cstr\", (RUBY_PROC*)&dll_rb_str2cstr},\n# endif\n    {\"rb_str_cat\", (RUBY_PROC*)&dll_rb_str_cat},\n    {\"rb_str_concat\", (RUBY_PROC*)&dll_rb_str_concat},\n    {\"rb_str_new\", (RUBY_PROC*)&dll_rb_str_new},\n# ifdef need_rb_str_new_cstr\n    {\"rb_str_new_cstr\", (RUBY_PROC*)&dll_rb_str_new_cstr},\n# else\n    {\"rb_str_new2\", (RUBY_PROC*)&dll_rb_str_new2},\n# endif\n# ifdef RUBY19_OR_LATER\n    {\"rb_errinfo\", (RUBY_PROC*)&dll_rb_errinfo},\n# else\n    {\"ruby_errinfo\", (RUBY_PROC*)&dll_ruby_errinfo},\n# endif\n    {\"ruby_init\", (RUBY_PROC*)&dll_ruby_init},\n    {\"ruby_init_loadpath\", (RUBY_PROC*)&dll_ruby_init_loadpath},\n# ifdef WIN3264\n    {\n#  if defined(DYNAMIC_RUBY_VER) && DYNAMIC_RUBY_VER < 19\n    \"NtInitialize\",\n#  else\n    \"ruby_sysinit\",\n#  endif\n\t\t\t(RUBY_PROC*)&dll_NtInitialize},\n#  if defined(DYNAMIC_RUBY_VER) && DYNAMIC_RUBY_VER >= 18\n    {\"rb_w32_snprintf\", (RUBY_PROC*)&dll_rb_w32_snprintf},\n#  endif\n# endif\n# if defined(DYNAMIC_RUBY_VER) && DYNAMIC_RUBY_VER >= 18\n    {\"rb_string_value_ptr\", (RUBY_PROC*)&dll_rb_string_value_ptr},\n#  if DYNAMIC_RUBY_VER <= 19\n    {\"rb_float_new\", (RUBY_PROC*)&dll_rb_float_new},\n#  else\n    {\"rb_float_new_in_heap\", (RUBY_PROC*)&dll_rb_float_new},\n#  endif\n    {\"rb_ary_new\", (RUBY_PROC*)&dll_rb_ary_new},\n    {\"rb_ary_push\", (RUBY_PROC*)&dll_rb_ary_push},\n# endif\n# ifdef RUBY19_OR_LATER\n    {\"rb_int2big\", (RUBY_PROC*)&dll_rb_int2big},\n    {\"ruby_script\", (RUBY_PROC*)&dll_ruby_script},\n    {\"rb_enc_find_index\", (RUBY_PROC*)&dll_rb_enc_find_index},\n    {\"rb_enc_find\", (RUBY_PROC*)&dll_rb_enc_find},\n    {\"rb_enc_str_new\", (RUBY_PROC*)&dll_rb_enc_str_new},\n    {\"rb_sprintf\", (RUBY_PROC*)&dll_rb_sprintf},\n    {\"rb_require\", (RUBY_PROC*)&dll_rb_require},\n    {\"ruby_options\", (RUBY_PROC*)&dll_ruby_options},\n# endif\n# if defined(RUBY19_OR_LATER) || defined(RUBY_INIT_STACK)\n#  ifdef __ia64\n    {\"rb_ia64_bsp\", (RUBY_PROC*)&dll_rb_ia64_bsp},\n#  endif\n    {\"ruby_init_stack\", (RUBY_PROC*)&dll_ruby_init_stack},\n# endif\n# if defined(USE_RGENGC) && USE_RGENGC\n#  if defined(DYNAMIC_RUBY_VER) && DYNAMIC_RUBY_VER == 21\n    {\"rb_gc_writebarrier_unprotect_promoted\", (RUBY_PROC*)&dll_rb_gc_writebarrier_unprotect_promoted},\n#  else\n    {\"rb_gc_writebarrier_unprotect\", (RUBY_PROC*)&dll_rb_gc_writebarrier_unprotect},\n#  endif\n# endif\n    {\"\", NULL},\n};\n\n/*\n * Free ruby.dll\n */\n    static void\nend_dynamic_ruby(void)\n{\n    if (hinstRuby)\n    {\n\tclose_dll(hinstRuby);\n\thinstRuby = NULL;\n    }\n}\n\n/*\n * Load library and get all pointers.\n * Parameter 'libname' provides name of DLL.\n * Return OK or FAIL.\n */\n    static int\nruby_runtime_link_init(char *libname, int verbose)\n{\n    int i;\n\n    if (hinstRuby)\n\treturn OK;\n    hinstRuby = load_dll(libname);\n    if (!hinstRuby)\n    {\n\tif (verbose)\n\t    EMSG2(_(e_loadlib), libname);\n\treturn FAIL;\n    }\n\n    for (i = 0; ruby_funcname_table[i].ptr; ++i)\n    {\n\tif (!(*ruby_funcname_table[i].ptr = symbol_from_dll(hinstRuby,\n\t\t\truby_funcname_table[i].name)))\n\t{\n\t    close_dll(hinstRuby);\n\t    hinstRuby = NULL;\n\t    if (verbose)\n\t\tEMSG2(_(e_loadfunc), ruby_funcname_table[i].name);\n\t    return FAIL;\n\t}\n    }\n    return OK;\n}\n\n/*\n * If ruby is enabled (there is installed ruby on Windows system) return TRUE,\n * else FALSE.\n */\n    int\nruby_enabled(int verbose)\n{\n    return ruby_runtime_link_init((char *)p_rubydll, verbose) == OK;\n}\n#endif /* defined(DYNAMIC_RUBY) || defined(PROTO) */\n\n    void\nruby_end(void)\n{\n#ifdef DYNAMIC_RUBY\n    end_dynamic_ruby();\n#endif\n}\n\nvoid ex_ruby(exarg_T *eap)\n{\n    int state;\n    char *script = NULL;\n\n    script = (char *)script_get(eap, eap->arg);\n    if (!eap->skip && ensure_ruby_initialized())\n    {\n\tif (script == NULL)\n\t    rb_eval_string_protect((char *)eap->arg, &state);\n\telse\n\t    rb_eval_string_protect(script, &state);\n\tif (state)\n\t    error_print(state);\n    }\n    vim_free(script);\n}\n\n/*\n *  In Ruby 1.9 or later, ruby String object has encoding.\n *  conversion buffer string of vim to ruby String object using\n *  VIM encoding option.\n */\n    static VALUE\nvim_str2rb_enc_str(const char *s)\n{\n#ifdef RUBY19_OR_LATER\n    int isnum;\n    long lval;\n    char_u *sval;\n    rb_encoding *enc;\n\n    isnum = get_option_value((char_u *)\"enc\", &lval, &sval, 0);\n    if (isnum == 0)\n    {\n\tenc = rb_enc_find((char *)sval);\n\tvim_free(sval);\n\tif (enc)\n\t{\n\t    return rb_enc_str_new(s, (long)strlen(s), enc);\n\t}\n    }\n#endif\n    return rb_str_new2(s);\n}\n\n    static VALUE\neval_enc_string_protect(const char *str, int *state)\n{\n#ifdef RUBY19_OR_LATER\n    int isnum;\n    long lval;\n    char_u *sval;\n    rb_encoding *enc;\n    VALUE v;\n\n    isnum = get_option_value((char_u *)\"enc\", &lval, &sval, 0);\n    if (isnum == 0)\n    {\n\tenc = rb_enc_find((char *)sval);\n\tvim_free(sval);\n\tif (enc)\n\t{\n\t    v = rb_sprintf(\"#-*- coding:%s -*-\\n%s\", rb_enc_name(enc), str);\n\t    return rb_eval_string_protect(StringValuePtr(v), state);\n\t}\n    }\n#endif\n    return rb_eval_string_protect(str, state);\n}\n\nvoid ex_rubydo(exarg_T *eap)\n{\n    int state;\n    linenr_T i;\n\n    if (ensure_ruby_initialized())\n    {\n\tif (u_save(eap->line1 - 1, eap->line2 + 1) != OK)\n\t    return;\n\tfor (i = eap->line1; i <= eap->line2; i++)\n\t{\n\t    VALUE line;\n\n\t    line = vim_str2rb_enc_str((char *)ml_get(i));\n\t    rb_lastline_set(line);\n\t    eval_enc_string_protect((char *) eap->arg, &state);\n\t    if (state)\n\t    {\n\t\terror_print(state);\n\t\tbreak;\n\t    }\n\t    line = rb_lastline_get();\n\t    if (!NIL_P(line))\n\t    {\n\t\tif (TYPE(line) != T_STRING)\n\t\t{\n\t\t    EMSG(_(\"E265: $_ must be an instance of String\"));\n\t\t    return;\n\t\t}\n\t\tml_replace(i, (char_u *) StringValuePtr(line), 1);\n\t\tchanged();\n#ifdef SYNTAX_HL\n\t\tsyn_changed(i); /* recompute syntax hl. for this line */\n#endif\n\t    }\n\t}\n\tcheck_cursor();\n\tupdate_curbuf(NOT_VALID);\n    }\n}\n\nvoid ex_rubyfile(exarg_T *eap)\n{\n    int state;\n\n    if (ensure_ruby_initialized())\n    {\n\trb_load_protect(rb_str_new2((char *) eap->arg), 0, &state);\n\tif (state) error_print(state);\n    }\n}\n\nvoid ruby_buffer_free(buf_T *buf)\n{\n    if (buf->b_ruby_ref)\n    {\n\trb_hash_aset(objtbl, rb_obj_id((VALUE) buf->b_ruby_ref), Qnil);\n\tRDATA(buf->b_ruby_ref)->data = NULL;\n    }\n}\n\nvoid ruby_window_free(win_T *win)\n{\n    if (win->w_ruby_ref)\n    {\n\trb_hash_aset(objtbl, rb_obj_id((VALUE) win->w_ruby_ref), Qnil);\n\tRDATA(win->w_ruby_ref)->data = NULL;\n    }\n}\n\nstatic int ensure_ruby_initialized(void)\n{\n    if (!ruby_initialized)\n    {\n#ifdef DYNAMIC_RUBY\n\tif (ruby_enabled(TRUE))\n\t{\n#endif\n#ifdef _WIN32\n\t    /* suggested by Ariya Mizutani */\n\t    int argc = 1;\n\t    char *argv[] = {\"gvim.exe\"};\n\t    char **argvp = argv;\n\t    NtInitialize(&argc, &argvp);\n#endif\n\t    {\n#if defined(RUBY19_OR_LATER) || defined(RUBY_INIT_STACK)\n\t\truby_init_stack(ruby_stack_start);\n#endif\n\t\truby_init();\n\t    }\n#ifdef RUBY19_OR_LATER\n\t    {\n\t\tint dummy_argc = 2;\n\t\tchar *dummy_argv[] = {\"vim-ruby\", \"-e0\"};\n\t\truby_options(dummy_argc, dummy_argv);\n\t    }\n\t    ruby_script(\"vim-ruby\");\n#else\n\t    ruby_init_loadpath();\n#endif\n\t    ruby_io_init();\n\t    ruby_vim_init();\n\t    ruby_initialized = 1;\n#ifdef DYNAMIC_RUBY\n\t}\n\telse\n\t{\n\t    EMSG(_(\"E266: Sorry, this command is disabled, the Ruby library could not be loaded.\"));\n\t    return 0;\n\t}\n#endif\n    }\n    return ruby_initialized;\n}\n\nstatic void error_print(int state)\n{\n#ifndef DYNAMIC_RUBY\n#if !(defined(RUBY_VERSION) && RUBY_VERSION >= 19) \\\n    && !(defined(DYNAMIC_RUBY_VER) && DYNAMIC_RUBY_VER >= 19)\n    RUBYEXTERN VALUE ruby_errinfo;\n#endif\n#endif\n    VALUE eclass;\n    VALUE einfo;\n    char buff[BUFSIZ];\n\n#define TAG_RETURN\t0x1\n#define TAG_BREAK\t0x2\n#define TAG_NEXT\t0x3\n#define TAG_RETRY\t0x4\n#define TAG_REDO\t0x5\n#define TAG_RAISE\t0x6\n#define TAG_THROW\t0x7\n#define TAG_FATAL\t0x8\n#define TAG_MASK\t0xf\n\n    switch (state)\n    {\n    case TAG_RETURN:\n\tEMSG(_(\"E267: unexpected return\"));\n\tbreak;\n    case TAG_NEXT:\n\tEMSG(_(\"E268: unexpected next\"));\n\tbreak;\n    case TAG_BREAK:\n\tEMSG(_(\"E269: unexpected break\"));\n\tbreak;\n    case TAG_REDO:\n\tEMSG(_(\"E270: unexpected redo\"));\n\tbreak;\n    case TAG_RETRY:\n\tEMSG(_(\"E271: retry outside of rescue clause\"));\n\tbreak;\n    case TAG_RAISE:\n    case TAG_FATAL:\n#ifdef RUBY19_OR_LATER\n\teclass = CLASS_OF(rb_errinfo());\n\teinfo = rb_obj_as_string(rb_errinfo());\n#else\n\teclass = CLASS_OF(ruby_errinfo);\n\teinfo = rb_obj_as_string(ruby_errinfo);\n#endif\n\tif (eclass == rb_eRuntimeError && RSTRING_LEN(einfo) == 0)\n\t{\n\t    EMSG(_(\"E272: unhandled exception\"));\n\t}\n\telse\n\t{\n\t    VALUE epath;\n\t    char *p;\n\n\t    epath = rb_class_path(eclass);\n\t    vim_snprintf(buff, BUFSIZ, \"%s: %s\",\n\t\t     RSTRING_PTR(epath), RSTRING_PTR(einfo));\n\t    p = strchr(buff, '\\n');\n\t    if (p) *p = '\\0';\n\t    EMSG(buff);\n\t}\n\tbreak;\n    default:\n\tvim_snprintf(buff, BUFSIZ, _(\"E273: unknown longjmp status %d\"), state);\n\tEMSG(buff);\n\tbreak;\n    }\n}\n\nstatic VALUE vim_message(VALUE self UNUSED, VALUE str)\n{\n    char *buff, *p;\n\n    str = rb_obj_as_string(str);\n    if (RSTRING_LEN(str) > 0)\n    {\n\t/* Only do this when the string isn't empty, alloc(0) causes trouble. */\n\tbuff = ALLOCA_N(char, RSTRING_LEN(str));\n\tstrcpy(buff, RSTRING_PTR(str));\n\tp = strchr(buff, '\\n');\n\tif (p) *p = '\\0';\n\tMSG(buff);\n    }\n    else\n    {\n\tMSG(\"\");\n    }\n    return Qnil;\n}\n\nstatic VALUE vim_set_option(VALUE self UNUSED, VALUE str)\n{\n    do_set((char_u *)StringValuePtr(str), 0);\n    update_screen(NOT_VALID);\n    return Qnil;\n}\n\nstatic VALUE vim_command(VALUE self UNUSED, VALUE str)\n{\n    do_cmdline_cmd((char_u *)StringValuePtr(str));\n    return Qnil;\n}\n\n#ifdef FEAT_EVAL\nstatic VALUE vim_to_ruby(typval_T *tv)\n{\n    VALUE result = Qnil;\n\n    if (tv->v_type == VAR_STRING)\n    {\n\tresult = rb_str_new2(tv->vval.v_string == NULL\n\t\t\t\t\t  ? \"\" : (char *)(tv->vval.v_string));\n    }\n    else if (tv->v_type == VAR_NUMBER)\n    {\n\tresult = INT2NUM(tv->vval.v_number);\n    }\n# ifdef FEAT_FLOAT\n    else if (tv->v_type == VAR_FLOAT)\n    {\n\tresult = rb_float_new(tv->vval.v_float);\n    }\n# endif\n    else if (tv->v_type == VAR_LIST)\n    {\n\tlist_T      *list = tv->vval.v_list;\n\tlistitem_T  *curr;\n\n\tresult = rb_ary_new();\n\n\tif (list != NULL)\n\t{\n\t    for (curr = list->lv_first; curr != NULL; curr = curr->li_next)\n\t    {\n\t\trb_ary_push(result, vim_to_ruby(&curr->li_tv));\n\t    }\n\t}\n    }\n    else if (tv->v_type == VAR_DICT)\n    {\n\tresult = rb_hash_new();\n\n\tif (tv->vval.v_dict != NULL)\n\t{\n\t    hashtab_T   *ht = &tv->vval.v_dict->dv_hashtab;\n\t    long_u      todo = ht->ht_used;\n\t    hashitem_T  *hi;\n\t    dictitem_T  *di;\n\n\t    for (hi = ht->ht_array; todo > 0; ++hi)\n\t    {\n\t\tif (!HASHITEM_EMPTY(hi))\n\t\t{\n\t\t    --todo;\n\n\t\t    di = dict_lookup(hi);\n\t\t    rb_hash_aset(result, rb_str_new2((char *)hi->hi_key),\n\t\t\t\t\t\t     vim_to_ruby(&di->di_tv));\n\t\t}\n\t    }\n\t}\n    }\n    else if (tv->v_type == VAR_SPECIAL)\n    {\n\tif (tv->vval.v_number <= VVAL_TRUE)\n\t    result = INT2NUM(tv->vval.v_number);\n    } /* else return Qnil; */\n\n    return result;\n}\n#endif\n\nstatic VALUE vim_evaluate(VALUE self UNUSED, VALUE str)\n{\n#ifdef FEAT_EVAL\n    typval_T    *tv;\n    VALUE       result;\n\n    tv = eval_expr((char_u *)StringValuePtr(str), NULL);\n    if (tv == NULL)\n    {\n\treturn Qnil;\n    }\n    result = vim_to_ruby(tv);\n\n    free_tv(tv);\n\n    return result;\n#else\n    return Qnil;\n#endif\n}\n\n#ifdef USE_TYPEDDATA\nstatic size_t buffer_dsize(const void *buf);\n\nstatic const rb_data_type_t buffer_type = {\n    \"vim_buffer\",\n    {0, 0, buffer_dsize, {0, 0}},\n    0, 0,\n# ifdef RUBY_TYPED_FREE_IMMEDIATELY\n    0,\n# endif\n};\n\nstatic size_t buffer_dsize(const void *buf UNUSED)\n{\n    return sizeof(buf_T);\n}\n#endif\n\nstatic VALUE buffer_new(buf_T *buf)\n{\n    if (buf->b_ruby_ref)\n    {\n\treturn (VALUE) buf->b_ruby_ref;\n    }\n    else\n    {\n#ifdef USE_TYPEDDATA\n\tVALUE obj = TypedData_Wrap_Struct(cBuffer, &buffer_type, buf);\n#else\n\tVALUE obj = Data_Wrap_Struct(cBuffer, 0, 0, buf);\n#endif\n\tbuf->b_ruby_ref = (void *) obj;\n\trb_hash_aset(objtbl, rb_obj_id(obj), obj);\n\treturn obj;\n    }\n}\n\nstatic buf_T *get_buf(VALUE obj)\n{\n    buf_T *buf;\n\n#ifdef USE_TYPEDDATA\n    TypedData_Get_Struct(obj, buf_T, &buffer_type, buf);\n#else\n    Data_Get_Struct(obj, buf_T, buf);\n#endif\n    if (buf == NULL)\n\trb_raise(eDeletedBufferError, \"attempt to refer to deleted buffer\");\n    return buf;\n}\n\nstatic VALUE buffer_s_current(void)\n{\n    return buffer_new(curbuf);\n}\n\nstatic VALUE buffer_s_count(void)\n{\n    buf_T *b;\n    int n = 0;\n\n    FOR_ALL_BUFFERS(b)\n    {\n\t/*  Deleted buffers should not be counted\n\t *    SegPhault - 01/07/05 */\n\tif (b->b_p_bl)\n\t    n++;\n    }\n\n    return INT2NUM(n);\n}\n\nstatic VALUE buffer_s_aref(VALUE self UNUSED, VALUE num)\n{\n    buf_T *b;\n    int n = NUM2INT(num);\n\n    FOR_ALL_BUFFERS(b)\n    {\n\t/*  Deleted buffers should not be counted\n\t *    SegPhault - 01/07/05 */\n\tif (!b->b_p_bl)\n\t    continue;\n\n\tif (n == 0)\n\t    return buffer_new(b);\n\n\tn--;\n    }\n    return Qnil;\n}\n\nstatic VALUE buffer_name(VALUE self)\n{\n    buf_T *buf = get_buf(self);\n\n    return buf->b_ffname ? rb_str_new2((char *)buf->b_ffname) : Qnil;\n}\n\nstatic VALUE buffer_number(VALUE self)\n{\n    buf_T *buf = get_buf(self);\n\n    return INT2NUM(buf->b_fnum);\n}\n\nstatic VALUE buffer_count(VALUE self)\n{\n    buf_T *buf = get_buf(self);\n\n    return INT2NUM(buf->b_ml.ml_line_count);\n}\n\nstatic VALUE get_buffer_line(buf_T *buf, linenr_T n)\n{\n    if (n <= 0 || n > buf->b_ml.ml_line_count)\n\trb_raise(rb_eIndexError, \"line number %ld out of range\", (long)n);\n    return vim_str2rb_enc_str((char *)ml_get_buf(buf, n, FALSE));\n}\n\nstatic VALUE buffer_aref(VALUE self, VALUE num)\n{\n    buf_T *buf = get_buf(self);\n\n    if (buf != NULL)\n\treturn get_buffer_line(buf, (linenr_T)NUM2LONG(num));\n    return Qnil; /* For stop warning */\n}\n\nstatic VALUE set_buffer_line(buf_T *buf, linenr_T n, VALUE str)\n{\n    char\t*line = StringValuePtr(str);\n    aco_save_T\taco;\n\n    if (n > 0 && n <= buf->b_ml.ml_line_count && line != NULL)\n    {\n\t/* set curwin/curbuf for \"buf\" and save some things */\n\taucmd_prepbuf(&aco, buf);\n\n\tif (u_savesub(n) == OK)\n\t{\n\t    ml_replace(n, (char_u *)line, TRUE);\n\t    changed();\n#ifdef SYNTAX_HL\n\t    syn_changed(n); /* recompute syntax hl. for this line */\n#endif\n\t}\n\n\t/* restore curwin/curbuf and a few other things */\n\taucmd_restbuf(&aco);\n\t/* Careful: autocommands may have made \"buf\" invalid! */\n\n\tupdate_curbuf(NOT_VALID);\n    }\n    else\n    {\n\trb_raise(rb_eIndexError, \"line number %ld out of range\", (long)n);\n    }\n    return str;\n}\n\nstatic VALUE buffer_aset(VALUE self, VALUE num, VALUE str)\n{\n    buf_T *buf = get_buf(self);\n\n    if (buf != NULL)\n\treturn set_buffer_line(buf, (linenr_T)NUM2LONG(num), str);\n    return str;\n}\n\nstatic VALUE buffer_delete(VALUE self, VALUE num)\n{\n    buf_T\t*buf = get_buf(self);\n    long\tn = NUM2LONG(num);\n    aco_save_T\taco;\n\n    if (n > 0 && n <= buf->b_ml.ml_line_count)\n    {\n\t/* set curwin/curbuf for \"buf\" and save some things */\n\taucmd_prepbuf(&aco, buf);\n\n\tif (u_savedel(n, 1) == OK)\n\t{\n\t    ml_delete(n, 0);\n\n\t    /* Changes to non-active buffers should properly refresh\n\t     *   SegPhault - 01/09/05 */\n\t    deleted_lines_mark(n, 1L);\n\n\t    changed();\n\t}\n\n\t/* restore curwin/curbuf and a few other things */\n\taucmd_restbuf(&aco);\n\t/* Careful: autocommands may have made \"buf\" invalid! */\n\n\tupdate_curbuf(NOT_VALID);\n    }\n    else\n    {\n\trb_raise(rb_eIndexError, \"line number %ld out of range\", n);\n    }\n    return Qnil;\n}\n\nstatic VALUE buffer_append(VALUE self, VALUE num, VALUE str)\n{\n    buf_T\t*buf = get_buf(self);\n    char\t*line = StringValuePtr(str);\n    long\tn = NUM2LONG(num);\n    aco_save_T\taco;\n\n    if (line == NULL)\n    {\n\trb_raise(rb_eIndexError, \"NULL line\");\n    }\n    else if (n >= 0 && n <= buf->b_ml.ml_line_count)\n    {\n\t/* set curwin/curbuf for \"buf\" and save some things */\n\taucmd_prepbuf(&aco, buf);\n\n\tif (u_inssub(n + 1) == OK)\n\t{\n\t    ml_append(n, (char_u *) line, (colnr_T) 0, FALSE);\n\n\t    /*  Changes to non-active buffers should properly refresh screen\n\t     *    SegPhault - 12/20/04 */\n\t    appended_lines_mark(n, 1L);\n\n\t    changed();\n\t}\n\n\t/* restore curwin/curbuf and a few other things */\n\taucmd_restbuf(&aco);\n\t/* Careful: autocommands may have made \"buf\" invalid! */\n\n\tupdate_curbuf(NOT_VALID);\n    }\n    else\n    {\n\trb_raise(rb_eIndexError, \"line number %ld out of range\", n);\n    }\n    return str;\n}\n\n#ifdef USE_TYPEDDATA\nstatic size_t window_dsize(const void *buf);\n\nstatic const rb_data_type_t window_type = {\n    \"vim_window\",\n    {0, 0, window_dsize, {0, 0}},\n    0, 0,\n# ifdef RUBY_TYPED_FREE_IMMEDIATELY\n    0,\n# endif\n};\n\nstatic size_t window_dsize(const void *win UNUSED)\n{\n    return sizeof(win_T);\n}\n#endif\n\nstatic VALUE window_new(win_T *win)\n{\n    if (win->w_ruby_ref)\n    {\n\treturn (VALUE) win->w_ruby_ref;\n    }\n    else\n    {\n#ifdef USE_TYPEDDATA\n\tVALUE obj = TypedData_Wrap_Struct(cVimWindow, &window_type, win);\n#else\n\tVALUE obj = Data_Wrap_Struct(cVimWindow, 0, 0, win);\n#endif\n\twin->w_ruby_ref = (void *) obj;\n\trb_hash_aset(objtbl, rb_obj_id(obj), obj);\n\treturn obj;\n    }\n}\n\nstatic win_T *get_win(VALUE obj)\n{\n    win_T *win;\n\n#ifdef USE_TYPEDDATA\n    TypedData_Get_Struct(obj, win_T, &window_type, win);\n#else\n    Data_Get_Struct(obj, win_T, win);\n#endif\n    if (win == NULL)\n\trb_raise(eDeletedWindowError, \"attempt to refer to deleted window\");\n    return win;\n}\n\nstatic VALUE window_s_current(void)\n{\n    return window_new(curwin);\n}\n\n/*\n * Added line manipulation functions\n *    SegPhault - 03/07/05\n */\nstatic VALUE line_s_current(void)\n{\n    return get_buffer_line(curbuf, curwin->w_cursor.lnum);\n}\n\nstatic VALUE set_current_line(VALUE self UNUSED, VALUE str)\n{\n    return set_buffer_line(curbuf, curwin->w_cursor.lnum, str);\n}\n\nstatic VALUE current_line_number(void)\n{\n    return INT2FIX((int)curwin->w_cursor.lnum);\n}\n\n\n\nstatic VALUE window_s_count(void)\n{\n#ifdef FEAT_WINDOWS\n    win_T\t*w;\n    int n = 0;\n\n    FOR_ALL_WINDOWS(w)\n\tn++;\n    return INT2NUM(n);\n#else\n    return INT2NUM(1);\n#endif\n}\n\nstatic VALUE window_s_aref(VALUE self UNUSED, VALUE num)\n{\n    win_T *w;\n    int n = NUM2INT(num);\n\n#ifndef FEAT_WINDOWS\n    w = curwin;\n#else\n    for (w = firstwin; w != NULL; w = w->w_next, --n)\n#endif\n\tif (n == 0)\n\t    return window_new(w);\n    return Qnil;\n}\n\nstatic VALUE window_buffer(VALUE self)\n{\n    win_T *win = get_win(self);\n\n    return buffer_new(win->w_buffer);\n}\n\nstatic VALUE window_height(VALUE self)\n{\n    win_T *win = get_win(self);\n\n    return INT2NUM(win->w_height);\n}\n\nstatic VALUE window_set_height(VALUE self, VALUE height)\n{\n    win_T *win = get_win(self);\n    win_T *savewin = curwin;\n\n    curwin = win;\n    win_setheight(NUM2INT(height));\n    curwin = savewin;\n    return height;\n}\n\nstatic VALUE window_width(VALUE self UNUSED)\n{\n    return INT2NUM(W_WIDTH(get_win(self)));\n}\n\nstatic VALUE window_set_width(VALUE self UNUSED, VALUE width)\n{\n#ifdef FEAT_WINDOWS\n    win_T *win = get_win(self);\n    win_T *savewin = curwin;\n\n    curwin = win;\n    win_setwidth(NUM2INT(width));\n    curwin = savewin;\n#endif\n    return width;\n}\n\nstatic VALUE window_cursor(VALUE self)\n{\n    win_T *win = get_win(self);\n\n    return rb_assoc_new(INT2NUM(win->w_cursor.lnum), INT2NUM(win->w_cursor.col));\n}\n\nstatic VALUE window_set_cursor(VALUE self, VALUE pos)\n{\n    VALUE lnum, col;\n    win_T *win = get_win(self);\n\n    Check_Type(pos, T_ARRAY);\n    if (RARRAY_LEN(pos) != 2)\n\trb_raise(rb_eArgError, \"array length must be 2\");\n    lnum = RARRAY_PTR(pos)[0];\n    col = RARRAY_PTR(pos)[1];\n    win->w_cursor.lnum = NUM2LONG(lnum);\n    win->w_cursor.col = NUM2UINT(col);\n    check_cursor();\t\t    /* put cursor on an existing line */\n    update_screen(NOT_VALID);\n    return Qnil;\n}\n\nstatic VALUE f_nop(VALUE self UNUSED)\n{\n    return Qnil;\n}\n\nstatic VALUE f_p(int argc, VALUE *argv, VALUE self UNUSED)\n{\n    int i;\n    VALUE str = rb_str_new(\"\", 0);\n\n    for (i = 0; i < argc; i++)\n    {\n\tif (i > 0) rb_str_cat(str, \", \", 2);\n\trb_str_concat(str, rb_inspect(argv[i]));\n    }\n    MSG(RSTRING_PTR(str));\n    return Qnil;\n}\n\nstatic void ruby_io_init(void)\n{\n#ifndef DYNAMIC_RUBY\n    RUBYEXTERN VALUE rb_stdout;\n#endif\n\n    rb_stdout = rb_obj_alloc(rb_cObject);\n    rb_define_singleton_method(rb_stdout, \"write\", vim_message, 1);\n    rb_define_singleton_method(rb_stdout, \"flush\", f_nop, 0);\n    rb_define_global_function(\"p\", f_p, -1);\n}\n\nstatic void ruby_vim_init(void)\n{\n    objtbl = rb_hash_new();\n    rb_global_variable(&objtbl);\n\n    /* The Vim module used to be called \"VIM\", but \"Vim\" is better.  Make an\n     * alias \"VIM\" for backwards compatibility. */\n    mVIM = rb_define_module(\"Vim\");\n    rb_define_const(rb_cObject, \"VIM\", mVIM);\n    rb_define_const(mVIM, \"VERSION_MAJOR\", INT2NUM(VIM_VERSION_MAJOR));\n    rb_define_const(mVIM, \"VERSION_MINOR\", INT2NUM(VIM_VERSION_MINOR));\n    rb_define_const(mVIM, \"VERSION_BUILD\", INT2NUM(VIM_VERSION_BUILD));\n    rb_define_const(mVIM, \"VERSION_PATCHLEVEL\", INT2NUM(VIM_VERSION_PATCHLEVEL));\n    rb_define_const(mVIM, \"VERSION_SHORT\", rb_str_new2(VIM_VERSION_SHORT));\n    rb_define_const(mVIM, \"VERSION_MEDIUM\", rb_str_new2(VIM_VERSION_MEDIUM));\n    rb_define_const(mVIM, \"VERSION_LONG\", rb_str_new2(VIM_VERSION_LONG));\n    rb_define_const(mVIM, \"VERSION_LONG_DATE\", rb_str_new2(VIM_VERSION_LONG_DATE));\n    rb_define_module_function(mVIM, \"message\", vim_message, 1);\n    rb_define_module_function(mVIM, \"set_option\", vim_set_option, 1);\n    rb_define_module_function(mVIM, \"command\", vim_command, 1);\n    rb_define_module_function(mVIM, \"evaluate\", vim_evaluate, 1);\n\n    eDeletedBufferError = rb_define_class_under(mVIM, \"DeletedBufferError\",\n\t\t\t\t\t\trb_eStandardError);\n    eDeletedWindowError = rb_define_class_under(mVIM, \"DeletedWindowError\",\n\t\t\t\t\t\trb_eStandardError);\n\n    cBuffer = rb_define_class_under(mVIM, \"Buffer\", rb_cObject);\n    rb_define_singleton_method(cBuffer, \"current\", buffer_s_current, 0);\n    rb_define_singleton_method(cBuffer, \"count\", buffer_s_count, 0);\n    rb_define_singleton_method(cBuffer, \"[]\", buffer_s_aref, 1);\n    rb_define_method(cBuffer, \"name\", buffer_name, 0);\n    rb_define_method(cBuffer, \"number\", buffer_number, 0);\n    rb_define_method(cBuffer, \"count\", buffer_count, 0);\n    rb_define_method(cBuffer, \"length\", buffer_count, 0);\n    rb_define_method(cBuffer, \"[]\", buffer_aref, 1);\n    rb_define_method(cBuffer, \"[]=\", buffer_aset, 2);\n    rb_define_method(cBuffer, \"delete\", buffer_delete, 1);\n    rb_define_method(cBuffer, \"append\", buffer_append, 2);\n\n    /* Added line manipulation functions\n     *   SegPhault - 03/07/05 */\n    rb_define_method(cBuffer, \"line_number\", current_line_number, 0);\n    rb_define_method(cBuffer, \"line\", line_s_current, 0);\n    rb_define_method(cBuffer, \"line=\", set_current_line, 1);\n\n\n    cVimWindow = rb_define_class_under(mVIM, \"Window\", rb_cObject);\n    rb_define_singleton_method(cVimWindow, \"current\", window_s_current, 0);\n    rb_define_singleton_method(cVimWindow, \"count\", window_s_count, 0);\n    rb_define_singleton_method(cVimWindow, \"[]\", window_s_aref, 1);\n    rb_define_method(cVimWindow, \"buffer\", window_buffer, 0);\n    rb_define_method(cVimWindow, \"height\", window_height, 0);\n    rb_define_method(cVimWindow, \"height=\", window_set_height, 1);\n    rb_define_method(cVimWindow, \"width\", window_width, 0);\n    rb_define_method(cVimWindow, \"width=\", window_set_width, 1);\n    rb_define_method(cVimWindow, \"cursor\", window_cursor, 0);\n    rb_define_method(cVimWindow, \"cursor=\", window_set_cursor, 1);\n\n    rb_define_virtual_variable(\"$curbuf\", buffer_s_current, 0);\n    rb_define_virtual_variable(\"$curwin\", window_s_current, 0);\n}\n\nvoid vim_ruby_init(void *stack_start)\n{\n    /* should get machine stack start address early in main function */\n    ruby_stack_start = stack_start;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/src/if_python3.c": "/* vi:set ts=8 sts=4 sw=4 noet:\n *\n * VIM - Vi IMproved    by Bram Moolenaar\n *\n * Do \":help uganda\"  in Vim to read copying and usage conditions.\n * Do \":help credits\" in Vim to see a list of people who contributed.\n * See README.txt for an overview of the Vim source code.\n */\n/*\n * Python extensions by Paul Moore.\n * Changes for Unix by David Leonard.\n *\n * This consists of four parts:\n * 1. Python interpreter main program\n * 2. Python output stream: writes output via [e]msg().\n * 3. Implementation of the Vim module for Python\n * 4. Utility functions for handling the interface between Vim and Python.\n */\n\n/*\n * Roland Puntaier 2009/sept/16:\n * Adaptations to support both python3.x and python2.x\n */\n\n/* uncomment this if used with the debug version of python */\n/* #define Py_DEBUG */\n/* Note: most of time you can add -DPy_DEBUG to CFLAGS in place of uncommenting\n */\n/* uncomment this if used with the debug version of python, but without its\n * allocator */\n/* #define Py_DEBUG_NO_PYMALLOC */\n\n#include \"vim.h\"\n\n#include <limits.h>\n\n/* Python.h defines _POSIX_THREADS itself (if needed) */\n#ifdef _POSIX_THREADS\n# undef _POSIX_THREADS\n#endif\n\n#if defined(_WIN32) && defined(HAVE_FCNTL_H)\n# undef HAVE_FCNTL_H\n#endif\n\n#ifdef _DEBUG\n# undef _DEBUG\n#endif\n\n#ifdef F_BLANK\n# undef F_BLANK\n#endif\n\n#ifdef HAVE_STRFTIME\n# undef HAVE_STRFTIME\n#endif\n#ifdef HAVE_STRING_H\n# undef HAVE_STRING_H\n#endif\n#ifdef HAVE_PUTENV\n# undef HAVE_PUTENV\n#endif\n#ifdef HAVE_STDARG_H\n# undef HAVE_STDARG_H   /* Python's config.h defines it as well. */\n#endif\n#ifdef _POSIX_C_SOURCE  /* defined in feature.h */\n# undef _POSIX_C_SOURCE\n#endif\n#ifdef _XOPEN_SOURCE\n# undef _XOPEN_SOURCE\t/* pyconfig.h defines it as well. */\n#endif\n\n#define PY_SSIZE_T_CLEAN\n\n#include <Python.h>\n\n#if defined(MACOS) && !defined(MACOS_X_UNIX)\n# include \"macglue.h\"\n# include <CodeFragments.h>\n#endif\n#undef main /* Defined in python.h - aargh */\n#undef HAVE_FCNTL_H /* Clash with os_win32.h */\n\n/* The \"surrogateescape\" error handler is new in Python 3.1 */\n#if PY_VERSION_HEX >= 0x030100f0\n# define CODEC_ERROR_HANDLER \"surrogateescape\"\n#else\n# define CODEC_ERROR_HANDLER NULL\n#endif\n\n/* Python 3 does not support CObjects, always use Capsules */\n#define PY_USE_CAPSULE\n\n#define PyInt Py_ssize_t\n#ifndef PyString_Check\n# define PyString_Check(obj) PyUnicode_Check(obj)\n#endif\n#define PyString_FromString(repr) \\\n    PyUnicode_Decode(repr, STRLEN(repr), ENC_OPT, NULL)\n#define PyString_FromFormat PyUnicode_FromFormat\n#ifndef PyInt_Check\n# define PyInt_Check(obj) PyLong_Check(obj)\n#endif\n#define PyInt_FromLong(i) PyLong_FromLong(i)\n#define PyInt_AsLong(obj) PyLong_AsLong(obj)\n#define Py_ssize_t_fmt \"n\"\n#define Py_bytes_fmt \"y\"\n\n#define PyIntArgFunc\tssizeargfunc\n#define PyIntObjArgProc\tssizeobjargproc\n\n/*\n * PySlice_GetIndicesEx(): first argument type changed from PySliceObject\n * to PyObject in Python 3.2 or later.\n */\n#if PY_VERSION_HEX >= 0x030200f0\ntypedef PyObject PySliceObject_T;\n#else\ntypedef PySliceObject PySliceObject_T;\n#endif\n\n#if defined(DYNAMIC_PYTHON3) || defined(PROTO)\n\n# ifndef WIN3264\n#  include <dlfcn.h>\n#  define FARPROC void*\n#  define HINSTANCE void*\n#  if defined(PY_NO_RTLD_GLOBAL) && defined(PY3_NO_RTLD_GLOBAL)\n#   define load_dll(n) dlopen((n), RTLD_LAZY)\n#  else\n#   define load_dll(n) dlopen((n), RTLD_LAZY|RTLD_GLOBAL)\n#  endif\n#  define close_dll dlclose\n#  define symbol_from_dll dlsym\n# else\n#  define load_dll vimLoadLib\n#  define close_dll FreeLibrary\n#  define symbol_from_dll GetProcAddress\n# endif\n/*\n * Wrapper defines\n */\n# undef PyArg_Parse\n# define PyArg_Parse py3_PyArg_Parse\n# undef PyArg_ParseTuple\n# define PyArg_ParseTuple py3_PyArg_ParseTuple\n# define PyMem_Free py3_PyMem_Free\n# define PyMem_Malloc py3_PyMem_Malloc\n# define PyDict_SetItemString py3_PyDict_SetItemString\n# define PyErr_BadArgument py3_PyErr_BadArgument\n# define PyErr_Clear py3_PyErr_Clear\n# define PyErr_Format py3_PyErr_Format\n# define PyErr_PrintEx py3_PyErr_PrintEx\n# define PyErr_NoMemory py3_PyErr_NoMemory\n# define PyErr_Occurred py3_PyErr_Occurred\n# define PyErr_SetNone py3_PyErr_SetNone\n# define PyErr_SetString py3_PyErr_SetString\n# define PyErr_SetObject py3_PyErr_SetObject\n# define PyErr_ExceptionMatches py3_PyErr_ExceptionMatches\n# define PyEval_InitThreads py3_PyEval_InitThreads\n# define PyEval_RestoreThread py3_PyEval_RestoreThread\n# define PyEval_SaveThread py3_PyEval_SaveThread\n# define PyGILState_Ensure py3_PyGILState_Ensure\n# define PyGILState_Release py3_PyGILState_Release\n# define PyLong_AsLong py3_PyLong_AsLong\n# define PyLong_FromLong py3_PyLong_FromLong\n# define PyList_GetItem py3_PyList_GetItem\n# define PyList_Append py3_PyList_Append\n# define PyList_Insert py3_PyList_Insert\n# define PyList_New py3_PyList_New\n# define PyList_SetItem py3_PyList_SetItem\n# define PyList_Size py3_PyList_Size\n# define PySequence_Check py3_PySequence_Check\n# define PySequence_Size py3_PySequence_Size\n# define PySequence_GetItem py3_PySequence_GetItem\n# define PySequence_Fast py3_PySequence_Fast\n# define PyTuple_Size py3_PyTuple_Size\n# define PyTuple_GetItem py3_PyTuple_GetItem\n# define PySlice_GetIndicesEx py3_PySlice_GetIndicesEx\n# define PyImport_ImportModule py3_PyImport_ImportModule\n# define PyObject_Init py3__PyObject_Init\n# define PyDict_New py3_PyDict_New\n# define PyDict_GetItemString py3_PyDict_GetItemString\n# define PyDict_Next py3_PyDict_Next\n# define PyMapping_Check py3_PyMapping_Check\n# ifndef PyMapping_Keys\n#  define PyMapping_Keys py3_PyMapping_Keys\n# endif\n# define PyIter_Next py3_PyIter_Next\n# define PyObject_GetIter py3_PyObject_GetIter\n# define PyObject_Repr py3_PyObject_Repr\n# define PyObject_GetItem py3_PyObject_GetItem\n# define PyObject_IsTrue py3_PyObject_IsTrue\n# define PyModule_GetDict py3_PyModule_GetDict\n#undef PyRun_SimpleString\n# define PyRun_SimpleString py3_PyRun_SimpleString\n#undef PyRun_String\n# define PyRun_String py3_PyRun_String\n# define PyObject_GetAttrString py3_PyObject_GetAttrString\n# define PyObject_HasAttrString py3_PyObject_HasAttrString\n# define PyObject_SetAttrString py3_PyObject_SetAttrString\n# define PyObject_CallFunctionObjArgs py3_PyObject_CallFunctionObjArgs\n# define _PyObject_CallFunction_SizeT py3__PyObject_CallFunction_SizeT\n# define PyObject_Call py3_PyObject_Call\n# define PyEval_GetLocals py3_PyEval_GetLocals\n# define PyEval_GetGlobals py3_PyEval_GetGlobals\n# define PySys_SetObject py3_PySys_SetObject\n# define PySys_GetObject py3_PySys_GetObject\n# define PySys_SetArgv py3_PySys_SetArgv\n# define PyType_Ready py3_PyType_Ready\n#undef Py_BuildValue\n# define Py_BuildValue py3_Py_BuildValue\n# define Py_SetPythonHome py3_Py_SetPythonHome\n# define Py_Initialize py3_Py_Initialize\n# define Py_Finalize py3_Py_Finalize\n# define Py_IsInitialized py3_Py_IsInitialized\n# define _Py_NoneStruct (*py3__Py_NoneStruct)\n# define _Py_FalseStruct (*py3__Py_FalseStruct)\n# define _Py_TrueStruct (*py3__Py_TrueStruct)\n# define _PyObject_NextNotImplemented (*py3__PyObject_NextNotImplemented)\n# define PyModule_AddObject py3_PyModule_AddObject\n# define PyImport_AppendInittab py3_PyImport_AppendInittab\n# define PyImport_AddModule py3_PyImport_AddModule\n# if PY_VERSION_HEX >= 0x030300f0\n#  undef _PyUnicode_AsString\n#  define _PyUnicode_AsString py3_PyUnicode_AsUTF8\n# else\n#  define _PyUnicode_AsString py3__PyUnicode_AsString\n# endif\n# undef PyUnicode_AsEncodedString\n# define PyUnicode_AsEncodedString py3_PyUnicode_AsEncodedString\n# undef PyBytes_AsString\n# define PyBytes_AsString py3_PyBytes_AsString\n# ifndef PyBytes_AsStringAndSize\n#  define PyBytes_AsStringAndSize py3_PyBytes_AsStringAndSize\n# endif\n# undef PyBytes_FromString\n# define PyBytes_FromString py3_PyBytes_FromString\n# define PyFloat_FromDouble py3_PyFloat_FromDouble\n# define PyFloat_AsDouble py3_PyFloat_AsDouble\n# define PyObject_GenericGetAttr py3_PyObject_GenericGetAttr\n# define PyType_Type (*py3_PyType_Type)\n# define PySlice_Type (*py3_PySlice_Type)\n# define PyFloat_Type (*py3_PyFloat_Type)\n# define PyNumber_Check (*py3_PyNumber_Check)\n# define PyNumber_Long (*py3_PyNumber_Long)\n# define PyBool_Type (*py3_PyBool_Type)\n# define PyErr_NewException py3_PyErr_NewException\n# ifdef Py_DEBUG\n#  define _Py_NegativeRefcount py3__Py_NegativeRefcount\n#  define _Py_RefTotal (*py3__Py_RefTotal)\n#  define _Py_Dealloc py3__Py_Dealloc\n#  define PyModule_Create2TraceRefs py3_PyModule_Create2TraceRefs\n# else\n#  define PyModule_Create2 py3_PyModule_Create2\n# endif\n# if defined(Py_DEBUG) && !defined(Py_DEBUG_NO_PYMALLOC)\n#  define _PyObject_DebugMalloc py3__PyObject_DebugMalloc\n#  define _PyObject_DebugFree py3__PyObject_DebugFree\n# else\n#  define PyObject_Malloc py3_PyObject_Malloc\n#  define PyObject_Free py3_PyObject_Free\n# endif\n# define _PyObject_GC_New py3__PyObject_GC_New\n# define PyObject_GC_Del py3_PyObject_GC_Del\n# define PyObject_GC_UnTrack py3_PyObject_GC_UnTrack\n# define PyType_GenericAlloc py3_PyType_GenericAlloc\n# define PyType_GenericNew py3_PyType_GenericNew\n# undef PyUnicode_FromString\n# define PyUnicode_FromString py3_PyUnicode_FromString\n# ifndef PyUnicode_FromFormat\n#  define PyUnicode_FromFormat py3_PyUnicode_FromFormat\n# else\n#  define Py_UNICODE_USE_UCS_FUNCTIONS\n#  ifdef Py_UNICODE_WIDE\n#   define PyUnicodeUCS4_FromFormat py3_PyUnicodeUCS4_FromFormat\n#  else\n#   define PyUnicodeUCS2_FromFormat py3_PyUnicodeUCS2_FromFormat\n#  endif\n# endif\n# undef PyUnicode_Decode\n# define PyUnicode_Decode py3_PyUnicode_Decode\n# define PyType_IsSubtype py3_PyType_IsSubtype\n# define PyCapsule_New py3_PyCapsule_New\n# define PyCapsule_GetPointer py3_PyCapsule_GetPointer\n\n# if defined(Py_DEBUG) && !defined(Py_DEBUG_NO_PYMALLOC)\n#  undef PyObject_NEW\n#  define PyObject_NEW(type, typeobj) \\\n( (type *) PyObject_Init( \\\n\t(PyObject *) _PyObject_DebugMalloc( _PyObject_SIZE(typeobj) ), (typeobj)) )\n# endif\n\n/*\n * Pointers for dynamic link\n */\nstatic int (*py3_PySys_SetArgv)(int, wchar_t **);\nstatic void (*py3_Py_SetPythonHome)(wchar_t *home);\nstatic void (*py3_Py_Initialize)(void);\nstatic PyObject* (*py3_PyList_New)(Py_ssize_t size);\nstatic PyGILState_STATE (*py3_PyGILState_Ensure)(void);\nstatic void (*py3_PyGILState_Release)(PyGILState_STATE);\nstatic int (*py3_PySys_SetObject)(char *, PyObject *);\nstatic PyObject* (*py3_PySys_GetObject)(char *);\nstatic int (*py3_PyList_Append)(PyObject *, PyObject *);\nstatic int (*py3_PyList_Insert)(PyObject *, int, PyObject *);\nstatic Py_ssize_t (*py3_PyList_Size)(PyObject *);\nstatic int (*py3_PySequence_Check)(PyObject *);\nstatic Py_ssize_t (*py3_PySequence_Size)(PyObject *);\nstatic PyObject* (*py3_PySequence_GetItem)(PyObject *, Py_ssize_t);\nstatic PyObject* (*py3_PySequence_Fast)(PyObject *, const char *);\nstatic Py_ssize_t (*py3_PyTuple_Size)(PyObject *);\nstatic PyObject* (*py3_PyTuple_GetItem)(PyObject *, Py_ssize_t);\nstatic int (*py3_PyMapping_Check)(PyObject *);\nstatic PyObject* (*py3_PyMapping_Keys)(PyObject *);\nstatic int (*py3_PySlice_GetIndicesEx)(PySliceObject_T *r, Py_ssize_t length,\n\t\t     Py_ssize_t *start, Py_ssize_t *stop, Py_ssize_t *step,\n\t\t     Py_ssize_t *slicelen);\nstatic PyObject* (*py3_PyErr_NoMemory)(void);\nstatic void (*py3_Py_Finalize)(void);\nstatic void (*py3_PyErr_SetString)(PyObject *, const char *);\nstatic void (*py3_PyErr_SetObject)(PyObject *, PyObject *);\nstatic int (*py3_PyErr_ExceptionMatches)(PyObject *);\nstatic int (*py3_PyRun_SimpleString)(char *);\nstatic PyObject* (*py3_PyRun_String)(char *, int, PyObject *, PyObject *);\nstatic PyObject* (*py3_PyObject_GetAttrString)(PyObject *, const char *);\nstatic int (*py3_PyObject_HasAttrString)(PyObject *, const char *);\nstatic int (*py3_PyObject_SetAttrString)(PyObject *, const char *, PyObject *);\nstatic PyObject* (*py3_PyObject_CallFunctionObjArgs)(PyObject *, ...);\nstatic PyObject* (*py3__PyObject_CallFunction_SizeT)(PyObject *, char *, ...);\nstatic PyObject* (*py3_PyObject_Call)(PyObject *, PyObject *, PyObject *);\nstatic PyObject* (*py3_PyEval_GetGlobals)();\nstatic PyObject* (*py3_PyEval_GetLocals)();\nstatic PyObject* (*py3_PyList_GetItem)(PyObject *, Py_ssize_t);\nstatic PyObject* (*py3_PyImport_ImportModule)(const char *);\nstatic PyObject* (*py3_PyImport_AddModule)(const char *);\nstatic int (*py3_PyErr_BadArgument)(void);\nstatic PyObject* (*py3_PyErr_Occurred)(void);\nstatic PyObject* (*py3_PyModule_GetDict)(PyObject *);\nstatic int (*py3_PyList_SetItem)(PyObject *, Py_ssize_t, PyObject *);\nstatic PyObject* (*py3_PyDict_GetItemString)(PyObject *, const char *);\nstatic int (*py3_PyDict_Next)(PyObject *, Py_ssize_t *, PyObject **, PyObject **);\nstatic PyObject* (*py3_PyLong_FromLong)(long);\nstatic PyObject* (*py3_PyDict_New)(void);\nstatic PyObject* (*py3_PyIter_Next)(PyObject *);\nstatic PyObject* (*py3_PyObject_GetIter)(PyObject *);\nstatic PyObject* (*py3_PyObject_Repr)(PyObject *);\nstatic PyObject* (*py3_PyObject_GetItem)(PyObject *, PyObject *);\nstatic int (*py3_PyObject_IsTrue)(PyObject *);\nstatic PyObject* (*py3_Py_BuildValue)(char *, ...);\nstatic int (*py3_PyType_Ready)(PyTypeObject *type);\nstatic int (*py3_PyDict_SetItemString)(PyObject *dp, char *key, PyObject *item);\nstatic PyObject* (*py3_PyUnicode_FromString)(const char *u);\n# ifndef Py_UNICODE_USE_UCS_FUNCTIONS\nstatic PyObject* (*py3_PyUnicode_FromFormat)(const char *u, ...);\n# else\n#  ifdef Py_UNICODE_WIDE\nstatic PyObject* (*py3_PyUnicodeUCS4_FromFormat)(const char *u, ...);\n#  else\nstatic PyObject* (*py3_PyUnicodeUCS2_FromFormat)(const char *u, ...);\n#  endif\n# endif\nstatic PyObject* (*py3_PyUnicode_Decode)(const char *u, Py_ssize_t size,\n\tconst char *encoding, const char *errors);\nstatic long (*py3_PyLong_AsLong)(PyObject *);\nstatic void (*py3_PyErr_SetNone)(PyObject *);\nstatic void (*py3_PyEval_InitThreads)(void);\nstatic void(*py3_PyEval_RestoreThread)(PyThreadState *);\nstatic PyThreadState*(*py3_PyEval_SaveThread)(void);\nstatic int (*py3_PyArg_Parse)(PyObject *, char *, ...);\nstatic int (*py3_PyArg_ParseTuple)(PyObject *, char *, ...);\nstatic int (*py3_PyMem_Free)(void *);\nstatic void* (*py3_PyMem_Malloc)(size_t);\nstatic int (*py3_Py_IsInitialized)(void);\nstatic void (*py3_PyErr_Clear)(void);\nstatic PyObject* (*py3_PyErr_Format)(PyObject *, const char *, ...);\nstatic void (*py3_PyErr_PrintEx)(int);\nstatic PyObject*(*py3__PyObject_Init)(PyObject *, PyTypeObject *);\nstatic iternextfunc py3__PyObject_NextNotImplemented;\nstatic PyObject* py3__Py_NoneStruct;\nstatic PyObject* py3__Py_FalseStruct;\nstatic PyObject* py3__Py_TrueStruct;\nstatic int (*py3_PyModule_AddObject)(PyObject *m, const char *name, PyObject *o);\nstatic int (*py3_PyImport_AppendInittab)(const char *name, PyObject* (*initfunc)(void));\n# if PY_VERSION_HEX >= 0x030300f0\nstatic char* (*py3_PyUnicode_AsUTF8)(PyObject *unicode);\n# else\nstatic char* (*py3__PyUnicode_AsString)(PyObject *unicode);\n# endif\nstatic PyObject* (*py3_PyUnicode_AsEncodedString)(PyObject *unicode, const char* encoding, const char* errors);\nstatic char* (*py3_PyBytes_AsString)(PyObject *bytes);\nstatic int (*py3_PyBytes_AsStringAndSize)(PyObject *bytes, char **buffer, Py_ssize_t *length);\nstatic PyObject* (*py3_PyBytes_FromString)(char *str);\nstatic PyObject* (*py3_PyFloat_FromDouble)(double num);\nstatic double (*py3_PyFloat_AsDouble)(PyObject *);\nstatic PyObject* (*py3_PyObject_GenericGetAttr)(PyObject *obj, PyObject *name);\nstatic PyObject* (*py3_PyType_GenericAlloc)(PyTypeObject *type, Py_ssize_t nitems);\nstatic PyObject* (*py3_PyType_GenericNew)(PyTypeObject *type, PyObject *args, PyObject *kwds);\nstatic PyTypeObject* py3_PyType_Type;\nstatic PyTypeObject* py3_PySlice_Type;\nstatic PyTypeObject* py3_PyFloat_Type;\nstatic PyTypeObject* py3_PyBool_Type;\nstatic int (*py3_PyNumber_Check)(PyObject *);\nstatic PyObject* (*py3_PyNumber_Long)(PyObject *);\nstatic PyObject* (*py3_PyErr_NewException)(char *name, PyObject *base, PyObject *dict);\nstatic PyObject* (*py3_PyCapsule_New)(void *, char *, PyCapsule_Destructor);\nstatic void* (*py3_PyCapsule_GetPointer)(PyObject *, char *);\n# ifdef Py_DEBUG\nstatic void (*py3__Py_NegativeRefcount)(const char *fname, int lineno, PyObject *op);\nstatic Py_ssize_t* py3__Py_RefTotal;\nstatic void (*py3__Py_Dealloc)(PyObject *obj);\nstatic PyObject* (*py3_PyModule_Create2TraceRefs)(struct PyModuleDef* module, int module_api_version);\n# else\nstatic PyObject* (*py3_PyModule_Create2)(struct PyModuleDef* module, int module_api_version);\n# endif\n# if defined(Py_DEBUG) && !defined(Py_DEBUG_NO_PYMALLOC)\nstatic void (*py3__PyObject_DebugFree)(void*);\nstatic void* (*py3__PyObject_DebugMalloc)(size_t);\n# else\nstatic void (*py3_PyObject_Free)(void*);\nstatic void* (*py3_PyObject_Malloc)(size_t);\n# endif\nstatic PyObject*(*py3__PyObject_GC_New)(PyTypeObject *);\nstatic void(*py3_PyObject_GC_Del)(void *);\nstatic void(*py3_PyObject_GC_UnTrack)(void *);\nstatic int (*py3_PyType_IsSubtype)(PyTypeObject *, PyTypeObject *);\n\nstatic HINSTANCE hinstPy3 = 0; /* Instance of python.dll */\n\n/* Imported exception objects */\nstatic PyObject *p3imp_PyExc_AttributeError;\nstatic PyObject *p3imp_PyExc_IndexError;\nstatic PyObject *p3imp_PyExc_KeyError;\nstatic PyObject *p3imp_PyExc_KeyboardInterrupt;\nstatic PyObject *p3imp_PyExc_TypeError;\nstatic PyObject *p3imp_PyExc_ValueError;\nstatic PyObject *p3imp_PyExc_SystemExit;\nstatic PyObject *p3imp_PyExc_RuntimeError;\nstatic PyObject *p3imp_PyExc_ImportError;\nstatic PyObject *p3imp_PyExc_OverflowError;\n\n# define PyExc_AttributeError p3imp_PyExc_AttributeError\n# define PyExc_IndexError p3imp_PyExc_IndexError\n# define PyExc_KeyError p3imp_PyExc_KeyError\n# define PyExc_KeyboardInterrupt p3imp_PyExc_KeyboardInterrupt\n# define PyExc_TypeError p3imp_PyExc_TypeError\n# define PyExc_ValueError p3imp_PyExc_ValueError\n# define PyExc_SystemExit p3imp_PyExc_SystemExit\n# define PyExc_RuntimeError p3imp_PyExc_RuntimeError\n# define PyExc_ImportError p3imp_PyExc_ImportError\n# define PyExc_OverflowError p3imp_PyExc_OverflowError\n\n/*\n * Table of name to function pointer of python.\n */\n# define PYTHON_PROC FARPROC\nstatic struct\n{\n    char *name;\n    PYTHON_PROC *ptr;\n} py3_funcname_table[] =\n{\n    {\"PySys_SetArgv\", (PYTHON_PROC*)&py3_PySys_SetArgv},\n    {\"Py_SetPythonHome\", (PYTHON_PROC*)&py3_Py_SetPythonHome},\n    {\"Py_Initialize\", (PYTHON_PROC*)&py3_Py_Initialize},\n    {\"_PyArg_ParseTuple_SizeT\", (PYTHON_PROC*)&py3_PyArg_ParseTuple},\n    {\"_Py_BuildValue_SizeT\", (PYTHON_PROC*)&py3_Py_BuildValue},\n    {\"PyMem_Free\", (PYTHON_PROC*)&py3_PyMem_Free},\n    {\"PyMem_Malloc\", (PYTHON_PROC*)&py3_PyMem_Malloc},\n    {\"PyList_New\", (PYTHON_PROC*)&py3_PyList_New},\n    {\"PyGILState_Ensure\", (PYTHON_PROC*)&py3_PyGILState_Ensure},\n    {\"PyGILState_Release\", (PYTHON_PROC*)&py3_PyGILState_Release},\n    {\"PySys_SetObject\", (PYTHON_PROC*)&py3_PySys_SetObject},\n    {\"PySys_GetObject\", (PYTHON_PROC*)&py3_PySys_GetObject},\n    {\"PyList_Append\", (PYTHON_PROC*)&py3_PyList_Append},\n    {\"PyList_Insert\", (PYTHON_PROC*)&py3_PyList_Insert},\n    {\"PyList_Size\", (PYTHON_PROC*)&py3_PyList_Size},\n    {\"PySequence_Check\", (PYTHON_PROC*)&py3_PySequence_Check},\n    {\"PySequence_Size\", (PYTHON_PROC*)&py3_PySequence_Size},\n    {\"PySequence_GetItem\", (PYTHON_PROC*)&py3_PySequence_GetItem},\n    {\"PySequence_Fast\", (PYTHON_PROC*)&py3_PySequence_Fast},\n    {\"PyTuple_Size\", (PYTHON_PROC*)&py3_PyTuple_Size},\n    {\"PyTuple_GetItem\", (PYTHON_PROC*)&py3_PyTuple_GetItem},\n    {\"PySlice_GetIndicesEx\", (PYTHON_PROC*)&py3_PySlice_GetIndicesEx},\n    {\"PyErr_NoMemory\", (PYTHON_PROC*)&py3_PyErr_NoMemory},\n    {\"Py_Finalize\", (PYTHON_PROC*)&py3_Py_Finalize},\n    {\"PyErr_SetString\", (PYTHON_PROC*)&py3_PyErr_SetString},\n    {\"PyErr_SetObject\", (PYTHON_PROC*)&py3_PyErr_SetObject},\n    {\"PyErr_ExceptionMatches\", (PYTHON_PROC*)&py3_PyErr_ExceptionMatches},\n    {\"PyRun_SimpleString\", (PYTHON_PROC*)&py3_PyRun_SimpleString},\n    {\"PyRun_String\", (PYTHON_PROC*)&py3_PyRun_String},\n    {\"PyObject_GetAttrString\", (PYTHON_PROC*)&py3_PyObject_GetAttrString},\n    {\"PyObject_HasAttrString\", (PYTHON_PROC*)&py3_PyObject_HasAttrString},\n    {\"PyObject_SetAttrString\", (PYTHON_PROC*)&py3_PyObject_SetAttrString},\n    {\"PyObject_CallFunctionObjArgs\", (PYTHON_PROC*)&py3_PyObject_CallFunctionObjArgs},\n    {\"_PyObject_CallFunction_SizeT\", (PYTHON_PROC*)&py3__PyObject_CallFunction_SizeT},\n    {\"PyObject_Call\", (PYTHON_PROC*)&py3_PyObject_Call},\n    {\"PyEval_GetGlobals\", (PYTHON_PROC*)&py3_PyEval_GetGlobals},\n    {\"PyEval_GetLocals\", (PYTHON_PROC*)&py3_PyEval_GetLocals},\n    {\"PyList_GetItem\", (PYTHON_PROC*)&py3_PyList_GetItem},\n    {\"PyImport_ImportModule\", (PYTHON_PROC*)&py3_PyImport_ImportModule},\n    {\"PyImport_AddModule\", (PYTHON_PROC*)&py3_PyImport_AddModule},\n    {\"PyErr_BadArgument\", (PYTHON_PROC*)&py3_PyErr_BadArgument},\n    {\"PyErr_Occurred\", (PYTHON_PROC*)&py3_PyErr_Occurred},\n    {\"PyModule_GetDict\", (PYTHON_PROC*)&py3_PyModule_GetDict},\n    {\"PyList_SetItem\", (PYTHON_PROC*)&py3_PyList_SetItem},\n    {\"PyDict_GetItemString\", (PYTHON_PROC*)&py3_PyDict_GetItemString},\n    {\"PyDict_Next\", (PYTHON_PROC*)&py3_PyDict_Next},\n    {\"PyMapping_Check\", (PYTHON_PROC*)&py3_PyMapping_Check},\n    {\"PyMapping_Keys\", (PYTHON_PROC*)&py3_PyMapping_Keys},\n    {\"PyIter_Next\", (PYTHON_PROC*)&py3_PyIter_Next},\n    {\"PyObject_GetIter\", (PYTHON_PROC*)&py3_PyObject_GetIter},\n    {\"PyObject_Repr\", (PYTHON_PROC*)&py3_PyObject_Repr},\n    {\"PyObject_GetItem\", (PYTHON_PROC*)&py3_PyObject_GetItem},\n    {\"PyObject_IsTrue\", (PYTHON_PROC*)&py3_PyObject_IsTrue},\n    {\"PyLong_FromLong\", (PYTHON_PROC*)&py3_PyLong_FromLong},\n    {\"PyDict_New\", (PYTHON_PROC*)&py3_PyDict_New},\n    {\"PyType_Ready\", (PYTHON_PROC*)&py3_PyType_Ready},\n    {\"PyDict_SetItemString\", (PYTHON_PROC*)&py3_PyDict_SetItemString},\n    {\"PyLong_AsLong\", (PYTHON_PROC*)&py3_PyLong_AsLong},\n    {\"PyErr_SetNone\", (PYTHON_PROC*)&py3_PyErr_SetNone},\n    {\"PyEval_InitThreads\", (PYTHON_PROC*)&py3_PyEval_InitThreads},\n    {\"PyEval_RestoreThread\", (PYTHON_PROC*)&py3_PyEval_RestoreThread},\n    {\"PyEval_SaveThread\", (PYTHON_PROC*)&py3_PyEval_SaveThread},\n    {\"_PyArg_Parse_SizeT\", (PYTHON_PROC*)&py3_PyArg_Parse},\n    {\"Py_IsInitialized\", (PYTHON_PROC*)&py3_Py_IsInitialized},\n    {\"_PyObject_NextNotImplemented\", (PYTHON_PROC*)&py3__PyObject_NextNotImplemented},\n    {\"_Py_NoneStruct\", (PYTHON_PROC*)&py3__Py_NoneStruct},\n    {\"_Py_FalseStruct\", (PYTHON_PROC*)&py3__Py_FalseStruct},\n    {\"_Py_TrueStruct\", (PYTHON_PROC*)&py3__Py_TrueStruct},\n    {\"PyErr_Clear\", (PYTHON_PROC*)&py3_PyErr_Clear},\n    {\"PyErr_Format\", (PYTHON_PROC*)&py3_PyErr_Format},\n    {\"PyErr_PrintEx\", (PYTHON_PROC*)&py3_PyErr_PrintEx},\n    {\"PyObject_Init\", (PYTHON_PROC*)&py3__PyObject_Init},\n    {\"PyModule_AddObject\", (PYTHON_PROC*)&py3_PyModule_AddObject},\n    {\"PyImport_AppendInittab\", (PYTHON_PROC*)&py3_PyImport_AppendInittab},\n# if PY_VERSION_HEX >= 0x030300f0\n    {\"PyUnicode_AsUTF8\", (PYTHON_PROC*)&py3_PyUnicode_AsUTF8},\n# else\n    {\"_PyUnicode_AsString\", (PYTHON_PROC*)&py3__PyUnicode_AsString},\n# endif\n# ifndef Py_UNICODE_USE_UCS_FUNCTIONS\n    {\"PyUnicode_FromFormat\", (PYTHON_PROC*)&py3_PyUnicode_FromFormat},\n# else\n#  ifdef Py_UNICODE_WIDE\n    {\"PyUnicodeUCS4_FromFormat\", (PYTHON_PROC*)&py3_PyUnicodeUCS4_FromFormat},\n#  else\n    {\"PyUnicodeUCS2_FromFormat\", (PYTHON_PROC*)&py3_PyUnicodeUCS2_FromFormat},\n#  endif\n# endif\n    {\"PyBytes_AsString\", (PYTHON_PROC*)&py3_PyBytes_AsString},\n    {\"PyBytes_AsStringAndSize\", (PYTHON_PROC*)&py3_PyBytes_AsStringAndSize},\n    {\"PyBytes_FromString\", (PYTHON_PROC*)&py3_PyBytes_FromString},\n    {\"PyFloat_FromDouble\", (PYTHON_PROC*)&py3_PyFloat_FromDouble},\n    {\"PyFloat_AsDouble\", (PYTHON_PROC*)&py3_PyFloat_AsDouble},\n    {\"PyObject_GenericGetAttr\", (PYTHON_PROC*)&py3_PyObject_GenericGetAttr},\n    {\"PyType_GenericAlloc\", (PYTHON_PROC*)&py3_PyType_GenericAlloc},\n    {\"PyType_GenericNew\", (PYTHON_PROC*)&py3_PyType_GenericNew},\n    {\"PyType_Type\", (PYTHON_PROC*)&py3_PyType_Type},\n    {\"PySlice_Type\", (PYTHON_PROC*)&py3_PySlice_Type},\n    {\"PyFloat_Type\", (PYTHON_PROC*)&py3_PyFloat_Type},\n    {\"PyBool_Type\", (PYTHON_PROC*)&py3_PyBool_Type},\n    {\"PyNumber_Check\", (PYTHON_PROC*)&py3_PyNumber_Check},\n    {\"PyNumber_Long\", (PYTHON_PROC*)&py3_PyNumber_Long},\n    {\"PyErr_NewException\", (PYTHON_PROC*)&py3_PyErr_NewException},\n# ifdef Py_DEBUG\n    {\"_Py_NegativeRefcount\", (PYTHON_PROC*)&py3__Py_NegativeRefcount},\n    {\"_Py_RefTotal\", (PYTHON_PROC*)&py3__Py_RefTotal},\n    {\"_Py_Dealloc\", (PYTHON_PROC*)&py3__Py_Dealloc},\n    {\"PyModule_Create2TraceRefs\", (PYTHON_PROC*)&py3_PyModule_Create2TraceRefs},\n# else\n    {\"PyModule_Create2\", (PYTHON_PROC*)&py3_PyModule_Create2},\n# endif\n# if defined(Py_DEBUG) && !defined(Py_DEBUG_NO_PYMALLOC)\n    {\"_PyObject_DebugFree\", (PYTHON_PROC*)&py3__PyObject_DebugFree},\n    {\"_PyObject_DebugMalloc\", (PYTHON_PROC*)&py3__PyObject_DebugMalloc},\n# else\n    {\"PyObject_Malloc\", (PYTHON_PROC*)&py3_PyObject_Malloc},\n    {\"PyObject_Free\", (PYTHON_PROC*)&py3_PyObject_Free},\n# endif\n    {\"_PyObject_GC_New\", (PYTHON_PROC*)&py3__PyObject_GC_New},\n    {\"PyObject_GC_Del\", (PYTHON_PROC*)&py3_PyObject_GC_Del},\n    {\"PyObject_GC_UnTrack\", (PYTHON_PROC*)&py3_PyObject_GC_UnTrack},\n    {\"PyType_IsSubtype\", (PYTHON_PROC*)&py3_PyType_IsSubtype},\n    {\"PyCapsule_New\", (PYTHON_PROC*)&py3_PyCapsule_New},\n    {\"PyCapsule_GetPointer\", (PYTHON_PROC*)&py3_PyCapsule_GetPointer},\n    {\"\", NULL},\n};\n\n/*\n * Free python.dll\n */\n    static void\nend_dynamic_python3(void)\n{\n    if (hinstPy3 != 0)\n    {\n\tclose_dll(hinstPy3);\n\thinstPy3 = 0;\n    }\n}\n\n/*\n * Load library and get all pointers.\n * Parameter 'libname' provides name of DLL.\n * Return OK or FAIL.\n */\n    static int\npy3_runtime_link_init(char *libname, int verbose)\n{\n    int i;\n    void *ucs_from_string, *ucs_decode, *ucs_as_encoded_string;\n\n# if !(defined(PY_NO_RTLD_GLOBAL) && defined(PY3_NO_RTLD_GLOBAL)) && defined(UNIX) && defined(FEAT_PYTHON)\n    /* Can't have Python and Python3 loaded at the same time.\n     * It cause a crash, because RTLD_GLOBAL is needed for\n     * standard C extension libraries of one or both python versions. */\n    if (python_loaded())\n    {\n\tif (verbose)\n\t    EMSG(_(\"E837: This Vim cannot execute :py3 after using :python\"));\n\treturn FAIL;\n    }\n# endif\n\n    if (hinstPy3 != 0)\n\treturn OK;\n    hinstPy3 = load_dll(libname);\n\n    if (!hinstPy3)\n    {\n\tif (verbose)\n\t    EMSG2(_(e_loadlib), libname);\n\treturn FAIL;\n    }\n\n    for (i = 0; py3_funcname_table[i].ptr; ++i)\n    {\n\tif ((*py3_funcname_table[i].ptr = symbol_from_dll(hinstPy3,\n\t\t\tpy3_funcname_table[i].name)) == NULL)\n\t{\n\t    close_dll(hinstPy3);\n\t    hinstPy3 = 0;\n\t    if (verbose)\n\t\tEMSG2(_(e_loadfunc), py3_funcname_table[i].name);\n\t    return FAIL;\n\t}\n    }\n\n    /* Load unicode functions separately as only the ucs2 or the ucs4 functions\n     * will be present in the library. */\n# if PY_VERSION_HEX >= 0x030300f0\n    ucs_from_string = symbol_from_dll(hinstPy3, \"PyUnicode_FromString\");\n    ucs_decode = symbol_from_dll(hinstPy3, \"PyUnicode_Decode\");\n    ucs_as_encoded_string = symbol_from_dll(hinstPy3,\n\t    \"PyUnicode_AsEncodedString\");\n# else\n    ucs_from_string = symbol_from_dll(hinstPy3, \"PyUnicodeUCS2_FromString\");\n    ucs_decode = symbol_from_dll(hinstPy3,\n\t    \"PyUnicodeUCS2_Decode\");\n    ucs_as_encoded_string = symbol_from_dll(hinstPy3,\n\t    \"PyUnicodeUCS2_AsEncodedString\");\n    if (!ucs_from_string || !ucs_decode || !ucs_as_encoded_string)\n    {\n\tucs_from_string = symbol_from_dll(hinstPy3,\n\t\t\"PyUnicodeUCS4_FromString\");\n\tucs_decode = symbol_from_dll(hinstPy3,\n\t\t\"PyUnicodeUCS4_Decode\");\n\tucs_as_encoded_string = symbol_from_dll(hinstPy3,\n\t\t\"PyUnicodeUCS4_AsEncodedString\");\n    }\n# endif\n    if (ucs_from_string && ucs_decode && ucs_as_encoded_string)\n    {\n\tpy3_PyUnicode_FromString = ucs_from_string;\n\tpy3_PyUnicode_Decode = ucs_decode;\n\tpy3_PyUnicode_AsEncodedString = ucs_as_encoded_string;\n    }\n    else\n    {\n\tclose_dll(hinstPy3);\n\thinstPy3 = 0;\n\tif (verbose)\n\t    EMSG2(_(e_loadfunc), \"PyUnicode_UCSX_*\");\n\treturn FAIL;\n    }\n\n    return OK;\n}\n\n/*\n * If python is enabled (there is installed python on Windows system) return\n * TRUE, else FALSE.\n */\n    int\npython3_enabled(int verbose)\n{\n    return py3_runtime_link_init((char *)p_py3dll, verbose) == OK;\n}\n\n/* Load the standard Python exceptions - don't import the symbols from the\n * DLL, as this can cause errors (importing data symbols is not reliable).\n */\nstatic void get_py3_exceptions(void);\n\n    static void\nget_py3_exceptions(void)\n{\n    PyObject *exmod = PyImport_ImportModule(\"builtins\");\n    PyObject *exdict = PyModule_GetDict(exmod);\n    p3imp_PyExc_AttributeError = PyDict_GetItemString(exdict, \"AttributeError\");\n    p3imp_PyExc_IndexError = PyDict_GetItemString(exdict, \"IndexError\");\n    p3imp_PyExc_KeyError = PyDict_GetItemString(exdict, \"KeyError\");\n    p3imp_PyExc_KeyboardInterrupt = PyDict_GetItemString(exdict, \"KeyboardInterrupt\");\n    p3imp_PyExc_TypeError = PyDict_GetItemString(exdict, \"TypeError\");\n    p3imp_PyExc_ValueError = PyDict_GetItemString(exdict, \"ValueError\");\n    p3imp_PyExc_SystemExit = PyDict_GetItemString(exdict, \"SystemExit\");\n    p3imp_PyExc_RuntimeError = PyDict_GetItemString(exdict, \"RuntimeError\");\n    p3imp_PyExc_ImportError = PyDict_GetItemString(exdict, \"ImportError\");\n    p3imp_PyExc_OverflowError = PyDict_GetItemString(exdict, \"OverflowError\");\n    Py_XINCREF(p3imp_PyExc_AttributeError);\n    Py_XINCREF(p3imp_PyExc_IndexError);\n    Py_XINCREF(p3imp_PyExc_KeyError);\n    Py_XINCREF(p3imp_PyExc_KeyboardInterrupt);\n    Py_XINCREF(p3imp_PyExc_TypeError);\n    Py_XINCREF(p3imp_PyExc_ValueError);\n    Py_XINCREF(p3imp_PyExc_SystemExit);\n    Py_XINCREF(p3imp_PyExc_RuntimeError);\n    Py_XINCREF(p3imp_PyExc_ImportError);\n    Py_XINCREF(p3imp_PyExc_OverflowError);\n    Py_XDECREF(exmod);\n}\n#endif /* DYNAMIC_PYTHON3 */\n\nstatic int py3initialised = 0;\n\n#define PYINITIALISED py3initialised\n\n#define DESTRUCTOR_FINISH(self) Py_TYPE(self)->tp_free((PyObject*)self)\n\n#define WIN_PYTHON_REF(win) win->w_python3_ref\n#define BUF_PYTHON_REF(buf) buf->b_python3_ref\n#define TAB_PYTHON_REF(tab) tab->tp_python3_ref\n\n    static void\ncall_PyObject_Free(void *p)\n{\n#if defined(Py_DEBUG) && !defined(Py_DEBUG_NO_PYMALLOC)\n    _PyObject_DebugFree(p);\n#else\n    PyObject_Free(p);\n#endif\n}\n\n    static PyObject *\ncall_PyType_GenericNew(PyTypeObject *type, PyObject *args, PyObject *kwds)\n{\n    return PyType_GenericNew(type,args,kwds);\n}\n\n    static PyObject *\ncall_PyType_GenericAlloc(PyTypeObject *type, Py_ssize_t nitems)\n{\n    return PyType_GenericAlloc(type,nitems);\n}\n\nstatic PyObject *OutputGetattro(PyObject *, PyObject *);\nstatic int OutputSetattro(PyObject *, PyObject *, PyObject *);\nstatic PyObject *BufferGetattro(PyObject *, PyObject *);\nstatic int BufferSetattro(PyObject *, PyObject *, PyObject *);\nstatic PyObject *TabPageGetattro(PyObject *, PyObject *);\nstatic PyObject *WindowGetattro(PyObject *, PyObject *);\nstatic int WindowSetattro(PyObject *, PyObject *, PyObject *);\nstatic PyObject *RangeGetattro(PyObject *, PyObject *);\nstatic PyObject *CurrentGetattro(PyObject *, PyObject *);\nstatic int CurrentSetattro(PyObject *, PyObject *, PyObject *);\nstatic PyObject *DictionaryGetattro(PyObject *, PyObject *);\nstatic int DictionarySetattro(PyObject *, PyObject *, PyObject *);\nstatic PyObject *ListGetattro(PyObject *, PyObject *);\nstatic int ListSetattro(PyObject *, PyObject *, PyObject *);\nstatic PyObject *FunctionGetattro(PyObject *, PyObject *);\n\nstatic PyObject *VimPathHook(PyObject *, PyObject *);\n\nstatic struct PyModuleDef vimmodule;\n\n#define PY_CAN_RECURSE\n\n/*\n * Include the code shared with if_python.c\n */\n#include \"if_py_both.h\"\n\n#define GET_ATTR_STRING(name, nameobj) \\\n    char\t*name = \"\"; \\\n    if (PyUnicode_Check(nameobj)) \\\n\tname = _PyUnicode_AsString(nameobj)\n\n#define PY3OBJ_DELETED(obj) (obj->ob_base.ob_refcnt<=0)\n\n/******************************************************\n * Internal function prototypes.\n */\n\nstatic PyObject *Py3Init_vim(void);\n\n/******************************************************\n * 1. Python interpreter main program.\n */\n\n    void\npython3_end(void)\n{\n    static int recurse = 0;\n\n    /* If a crash occurs while doing this, don't try again. */\n    if (recurse != 0)\n\treturn;\n\n    ++recurse;\n\n#ifdef DYNAMIC_PYTHON3\n    if (hinstPy3)\n#endif\n    if (Py_IsInitialized())\n    {\n\t// acquire lock before finalizing\n\tPyGILState_Ensure();\n\n\tPy_Finalize();\n    }\n\n#ifdef DYNAMIC_PYTHON3\n    end_dynamic_python3();\n#endif\n\n    --recurse;\n}\n\n#if (defined(DYNAMIC_PYTHON3) && defined(DYNAMIC_PYTHON) && defined(FEAT_PYTHON) && defined(UNIX)) || defined(PROTO)\n    int\npython3_loaded(void)\n{\n    return (hinstPy3 != 0);\n}\n#endif\n\n    static int\nPython3_Init(void)\n{\n    if (!py3initialised)\n    {\n#ifdef DYNAMIC_PYTHON3\n\tif (!python3_enabled(TRUE))\n\t{\n\t    EMSG(_(\"E263: Sorry, this command is disabled, the Python library could not be loaded.\"));\n\t    goto fail;\n\t}\n#endif\n\n\tinit_structs();\n\n\n#ifdef PYTHON3_HOME\n# ifdef DYNAMIC_PYTHON3\n\tif (mch_getenv((char_u *)\"PYTHONHOME\") == NULL)\n# endif\n\t    Py_SetPythonHome(PYTHON3_HOME);\n#endif\n\n\tPyImport_AppendInittab(\"vim\", Py3Init_vim);\n\n#if !defined(MACOS) || defined(MACOS_X_UNIX)\n\tPy_Initialize();\n#else\n\tPyMac_Initialize();\n#endif\n\t/* Initialise threads, and below save the state using\n\t * PyEval_SaveThread.  Without the call to PyEval_SaveThread, thread\n\t * specific state (such as the system trace hook), will be lost\n\t * between invocations of Python code. */\n\tPyEval_InitThreads();\n#ifdef DYNAMIC_PYTHON3\n\tget_py3_exceptions();\n#endif\n\n\tif (PythonIO_Init_io())\n\t    goto fail;\n\n\tglobals = PyModule_GetDict(PyImport_AddModule(\"__main__\"));\n\n\t/* Remove the element from sys.path that was added because of our\n\t * argv[0] value in Py3Init_vim().  Previously we used an empty\n\t * string, but depending on the OS we then get an empty entry or\n\t * the current directory in sys.path.\n\t * Only after vim has been imported, the element does exist in\n\t * sys.path.\n\t */\n\tPyRun_SimpleString(\"import vim; import sys; sys.path = list(filter(lambda x: not x.endswith('must>not&exist'), sys.path))\");\n\n\t/* lock is created and acquired in PyEval_InitThreads() and thread\n\t * state is created in Py_Initialize()\n\t * there _PyGILState_NoteThreadState() also sets gilcounter to 1\n\t * (python must have threads enabled!)\n\t * so the following does both: unlock GIL and save thread state in TLS\n\t * without deleting thread state\n\t */\n\tPyEval_SaveThread();\n\n\tpy3initialised = 1;\n    }\n\n    return 0;\n\nfail:\n    /* We call PythonIO_Flush() here to print any Python errors.\n     * This is OK, as it is possible to call this function even\n     * if PythonIO_Init_io() has not completed successfully (it will\n     * not do anything in this case).\n     */\n    PythonIO_Flush();\n    return -1;\n}\n\n/*\n * External interface\n */\n    static void\nDoPyCommand(const char *cmd, rangeinitializer init_range, runner run, void *arg)\n{\n#if defined(MACOS) && !defined(MACOS_X_UNIX)\n    GrafPtr\t\toldPort;\n#endif\n#if defined(HAVE_LOCALE_H) || defined(X_LOCALE)\n    char\t\t*saved_locale;\n#endif\n    PyObject\t\t*cmdstr;\n    PyObject\t\t*cmdbytes;\n    PyGILState_STATE\tpygilstate;\n\n#if defined(MACOS) && !defined(MACOS_X_UNIX)\n    GetPort(&oldPort);\n    /* Check if the Python library is available */\n    if ((Ptr)PyMac_Initialize == (Ptr)kUnresolvedCFragSymbolAddress)\n\tgoto theend;\n#endif\n    if (Python3_Init())\n\tgoto theend;\n\n    init_range(arg);\n\n    Python_Release_Vim();\t    /* leave vim */\n\n#if defined(HAVE_LOCALE_H) || defined(X_LOCALE)\n    /* Python only works properly when the LC_NUMERIC locale is \"C\". */\n    saved_locale = setlocale(LC_NUMERIC, NULL);\n    if (saved_locale == NULL || STRCMP(saved_locale, \"C\") == 0)\n\tsaved_locale = NULL;\n    else\n    {\n\t/* Need to make a copy, value may change when setting new locale. */\n\tsaved_locale = (char *)vim_strsave((char_u *)saved_locale);\n\t(void)setlocale(LC_NUMERIC, \"C\");\n    }\n#endif\n\n    pygilstate = PyGILState_Ensure();\n\n    /* PyRun_SimpleString expects a UTF-8 string. Wrong encoding may cause\n     * SyntaxError (unicode error). */\n    cmdstr = PyUnicode_Decode(cmd, strlen(cmd),\n\t\t\t\t\t(char *)ENC_OPT, CODEC_ERROR_HANDLER);\n    cmdbytes = PyUnicode_AsEncodedString(cmdstr, \"utf-8\", CODEC_ERROR_HANDLER);\n    Py_XDECREF(cmdstr);\n\n    run(PyBytes_AsString(cmdbytes), arg, &pygilstate);\n    Py_XDECREF(cmdbytes);\n\n    PyGILState_Release(pygilstate);\n\n#if defined(HAVE_LOCALE_H) || defined(X_LOCALE)\n    if (saved_locale != NULL)\n    {\n\t(void)setlocale(LC_NUMERIC, saved_locale);\n\tvim_free(saved_locale);\n    }\n#endif\n\n    Python_Lock_Vim();\t\t    /* enter vim */\n    PythonIO_Flush();\n#if defined(MACOS) && !defined(MACOS_X_UNIX)\n    SetPort(oldPort);\n#endif\n\ntheend:\n    return;\t    /* keeps lint happy */\n}\n\n/*\n * \":py3\"\n */\n    void\nex_py3(exarg_T *eap)\n{\n    char_u *script;\n\n    script = script_get(eap, eap->arg);\n    if (!eap->skip)\n    {\n\tDoPyCommand(script == NULL ? (char *) eap->arg : (char *) script,\n\t\t(rangeinitializer) init_range_cmd,\n\t\t(runner) run_cmd,\n\t\t(void *) eap);\n    }\n    vim_free(script);\n}\n\n#define BUFFER_SIZE 2048\n\n/*\n * \":py3file\"\n */\n    void\nex_py3file(exarg_T *eap)\n{\n    static char buffer[BUFFER_SIZE];\n    const char *file;\n    char *p;\n    int i;\n\n    /* Have to do it like this. PyRun_SimpleFile requires you to pass a\n     * stdio file pointer, but Vim and the Python DLL are compiled with\n     * different options under Windows, meaning that stdio pointers aren't\n     * compatible between the two. Yuk.\n     *\n     * construct: exec(compile(open('a_filename', 'rb').read(), 'a_filename', 'exec'))\n     *\n     * Using bytes so that Python can detect the source encoding as it normally\n     * does. The doc does not say \"compile\" accept bytes, though.\n     *\n     * We need to escape any backslashes or single quotes in the file name, so that\n     * Python won't mangle the file name.\n     */\n\n    strcpy(buffer, \"exec(compile(open('\");\n    p = buffer + 19; /* size of \"exec(compile(open('\" */\n\n    for (i=0; i<2; ++i)\n    {\n\tfile = (char *)eap->arg;\n\twhile (*file && p < buffer + (BUFFER_SIZE - 3))\n\t{\n\t    if (*file == '\\\\' || *file == '\\'')\n\t\t*p++ = '\\\\';\n\t    *p++ = *file++;\n\t}\n\t/* If we didn't finish the file name, we hit a buffer overflow */\n\tif (*file != '\\0')\n\t    return;\n\tif (i==0)\n\t{\n\t    strcpy(p,\"','rb').read(),'\");\n\t    p += 16;\n\t}\n\telse\n\t{\n\t    strcpy(p,\"','exec'))\");\n\t    p += 10;\n\t}\n    }\n\n\n    /* Execute the file */\n    DoPyCommand(buffer,\n\t    (rangeinitializer) init_range_cmd,\n\t    (runner) run_cmd,\n\t    (void *) eap);\n}\n\n    void\nex_py3do(exarg_T *eap)\n{\n    DoPyCommand((char *)eap->arg,\n\t    (rangeinitializer)init_range_cmd,\n\t    (runner)run_do,\n\t    (void *)eap);\n}\n\n/******************************************************\n * 2. Python output stream: writes output via [e]msg().\n */\n\n/* Implementation functions\n */\n\n    static PyObject *\nOutputGetattro(PyObject *self, PyObject *nameobj)\n{\n    GET_ATTR_STRING(name, nameobj);\n\n    if (strcmp(name, \"softspace\") == 0)\n\treturn PyLong_FromLong(((OutputObject *)(self))->softspace);\n    else if (strcmp(name, \"errors\") == 0)\n\treturn PyString_FromString(\"strict\");\n    else if (strcmp(name, \"encoding\") == 0)\n\treturn PyString_FromString(ENC_OPT);\n\n    return PyObject_GenericGetAttr(self, nameobj);\n}\n\n    static int\nOutputSetattro(PyObject *self, PyObject *nameobj, PyObject *val)\n{\n    GET_ATTR_STRING(name, nameobj);\n\n    return OutputSetattr((OutputObject *)(self), name, val);\n}\n\n/******************************************************\n * 3. Implementation of the Vim module for Python\n */\n\n/* Window type - Implementation functions\n * --------------------------------------\n */\n\n#define WindowType_Check(obj) ((obj)->ob_base.ob_type == &WindowType)\n\n/* Buffer type - Implementation functions\n * --------------------------------------\n */\n\n#define BufferType_Check(obj) ((obj)->ob_base.ob_type == &BufferType)\n\nstatic PyObject* BufferSubscript(PyObject *self, PyObject *idx);\nstatic Py_ssize_t BufferAsSubscript(PyObject *self, PyObject *idx, PyObject *val);\n\n/* Line range type - Implementation functions\n * --------------------------------------\n */\n\n#define RangeType_Check(obj) ((obj)->ob_base.ob_type == &RangeType)\n\nstatic PyObject* RangeSubscript(PyObject *self, PyObject *idx);\nstatic Py_ssize_t RangeAsItem(PyObject *, Py_ssize_t, PyObject *);\nstatic Py_ssize_t RangeAsSubscript(PyObject *self, PyObject *idx, PyObject *val);\n\n/* Current objects type - Implementation functions\n * -----------------------------------------------\n */\n\nstatic PySequenceMethods BufferAsSeq = {\n    (lenfunc)\t\tBufferLength,\t    /* sq_length,    len(x)   */\n    (binaryfunc)\t0,\t\t    /* sq_concat,    x+y      */\n    (ssizeargfunc)\t0,\t\t    /* sq_repeat,    x*n      */\n    (ssizeargfunc)\tBufferItem,\t    /* sq_item,      x[i]     */\n    0,\t\t\t\t\t    /* was_sq_slice,\t x[i:j]   */\n    0,\t\t\t\t\t    /* sq_ass_item,  x[i]=v   */\n    0,\t\t\t\t\t    /* sq_ass_slice, x[i:j]=v */\n    0,\t\t\t\t\t    /* sq_contains */\n    0,\t\t\t\t\t    /* sq_inplace_concat */\n    0,\t\t\t\t\t    /* sq_inplace_repeat */\n};\n\nstatic PyMappingMethods BufferAsMapping = {\n    /* mp_length\t*/ (lenfunc)BufferLength,\n    /* mp_subscript     */ (binaryfunc)BufferSubscript,\n    /* mp_ass_subscript */ (objobjargproc)BufferAsSubscript,\n};\n\n\n/* Buffer object\n */\n\n    static PyObject *\nBufferGetattro(PyObject *self, PyObject *nameobj)\n{\n    PyObject *r;\n\n    GET_ATTR_STRING(name, nameobj);\n\n    if ((r = BufferAttrValid((BufferObject *)(self), name)))\n\treturn r;\n\n    if (CheckBuffer((BufferObject *)(self)))\n\treturn NULL;\n\n    r = BufferAttr((BufferObject *)(self), name);\n    if (r || PyErr_Occurred())\n\treturn r;\n    else\n\treturn PyObject_GenericGetAttr(self, nameobj);\n}\n\n    static int\nBufferSetattro(PyObject *self, PyObject *nameobj, PyObject *val)\n{\n    GET_ATTR_STRING(name, nameobj);\n\n    return BufferSetattr((BufferObject *)(self), name, val);\n}\n\n/******************/\n\n    static PyObject *\nBufferSubscript(PyObject *self, PyObject* idx)\n{\n    if (PyLong_Check(idx))\n    {\n\tlong _idx = PyLong_AsLong(idx);\n\treturn BufferItem((BufferObject *)(self), _idx);\n    } else if (PySlice_Check(idx))\n    {\n\tPy_ssize_t start, stop, step, slicelen;\n\n\tif (CheckBuffer((BufferObject *) self))\n\t    return NULL;\n\n\tif (PySlice_GetIndicesEx((PySliceObject_T *)idx,\n\t      (Py_ssize_t)((BufferObject *)(self))->buf->b_ml.ml_line_count,\n\t      &start, &stop,\n\t      &step, &slicelen) < 0)\n\t{\n\t    return NULL;\n\t}\n\treturn BufferSlice((BufferObject *)(self), start, stop);\n    }\n    else\n    {\n\tRAISE_INVALID_INDEX_TYPE(idx);\n\treturn NULL;\n    }\n}\n\n    static Py_ssize_t\nBufferAsSubscript(PyObject *self, PyObject* idx, PyObject* val)\n{\n    if (PyLong_Check(idx))\n    {\n\tlong n = PyLong_AsLong(idx);\n\treturn RBAsItem((BufferObject *)(self), n, val, 1,\n\t\t    (Py_ssize_t)((BufferObject *)(self))->buf->b_ml.ml_line_count,\n\t\t    NULL);\n    } else if (PySlice_Check(idx))\n    {\n\tPy_ssize_t start, stop, step, slicelen;\n\n\tif (CheckBuffer((BufferObject *) self))\n\t    return -1;\n\n\tif (PySlice_GetIndicesEx((PySliceObject_T *)idx,\n\t      (Py_ssize_t)((BufferObject *)(self))->buf->b_ml.ml_line_count,\n\t      &start, &stop,\n\t      &step, &slicelen) < 0)\n\t{\n\t    return -1;\n\t}\n\treturn RBAsSlice((BufferObject *)(self), start, stop, val, 1,\n\t\t\t  (PyInt)((BufferObject *)(self))->buf->b_ml.ml_line_count,\n\t\t\t  NULL);\n    }\n    else\n    {\n\tRAISE_INVALID_INDEX_TYPE(idx);\n\treturn -1;\n    }\n}\n\nstatic PySequenceMethods RangeAsSeq = {\n    (lenfunc)\t\tRangeLength,\t /* sq_length,\t  len(x)   */\n    (binaryfunc)\t0,\t\t /* RangeConcat, sq_concat,  x+y   */\n    (ssizeargfunc)\t0,\t\t /* RangeRepeat, sq_repeat,  x*n   */\n    (ssizeargfunc)\tRangeItem,\t /* sq_item,\t  x[i]\t   */\n    0,\t\t\t\t\t /* was_sq_slice,     x[i:j]   */\n    (ssizeobjargproc)\tRangeAsItem,\t /* sq_as_item,  x[i]=v   */\n    0,\t\t\t\t\t /* sq_ass_slice, x[i:j]=v */\n    0,\t\t\t\t\t /* sq_contains */\n    0,\t\t\t\t\t /* sq_inplace_concat */\n    0,\t\t\t\t\t /* sq_inplace_repeat */\n};\n\nstatic PyMappingMethods RangeAsMapping = {\n    /* mp_length\t*/ (lenfunc)RangeLength,\n    /* mp_subscript     */ (binaryfunc)RangeSubscript,\n    /* mp_ass_subscript */ (objobjargproc)RangeAsSubscript,\n};\n\n/* Line range object - Implementation\n */\n\n    static PyObject *\nRangeGetattro(PyObject *self, PyObject *nameobj)\n{\n    GET_ATTR_STRING(name, nameobj);\n\n    if (strcmp(name, \"start\") == 0)\n\treturn Py_BuildValue(\"n\", ((RangeObject *)(self))->start - 1);\n    else if (strcmp(name, \"end\") == 0)\n\treturn Py_BuildValue(\"n\", ((RangeObject *)(self))->end - 1);\n    else\n\treturn PyObject_GenericGetAttr(self, nameobj);\n}\n\n/****************/\n\n    static Py_ssize_t\nRangeAsItem(PyObject *self, Py_ssize_t n, PyObject *val)\n{\n    return RBAsItem(((RangeObject *)(self))->buf, n, val,\n\t\t    ((RangeObject *)(self))->start,\n\t\t    ((RangeObject *)(self))->end,\n\t\t    &((RangeObject *)(self))->end);\n}\n\n    static Py_ssize_t\nRangeAsSlice(PyObject *self, Py_ssize_t lo, Py_ssize_t hi, PyObject *val)\n{\n    return RBAsSlice(((RangeObject *)(self))->buf, lo, hi, val,\n\t\t    ((RangeObject *)(self))->start,\n\t\t    ((RangeObject *)(self))->end,\n\t\t    &((RangeObject *)(self))->end);\n}\n\n    static PyObject *\nRangeSubscript(PyObject *self, PyObject* idx)\n{\n    if (PyLong_Check(idx))\n    {\n\tlong _idx = PyLong_AsLong(idx);\n\treturn RangeItem((RangeObject *)(self), _idx);\n    } else if (PySlice_Check(idx))\n    {\n\tPy_ssize_t start, stop, step, slicelen;\n\n\tif (PySlice_GetIndicesEx((PySliceObject_T *)idx,\n\t\t((RangeObject *)(self))->end-((RangeObject *)(self))->start+1,\n\t\t&start, &stop,\n\t\t&step, &slicelen) < 0)\n\t{\n\t    return NULL;\n\t}\n\treturn RangeSlice((RangeObject *)(self), start, stop);\n    }\n    else\n    {\n\tRAISE_INVALID_INDEX_TYPE(idx);\n\treturn NULL;\n    }\n}\n\n    static Py_ssize_t\nRangeAsSubscript(PyObject *self, PyObject *idx, PyObject *val)\n{\n    if (PyLong_Check(idx))\n    {\n\tlong n = PyLong_AsLong(idx);\n\treturn RangeAsItem(self, n, val);\n    } else if (PySlice_Check(idx))\n    {\n\tPy_ssize_t start, stop, step, slicelen;\n\n\tif (PySlice_GetIndicesEx((PySliceObject_T *)idx,\n\t\t((RangeObject *)(self))->end-((RangeObject *)(self))->start+1,\n\t\t&start, &stop,\n\t\t&step, &slicelen) < 0)\n\t{\n\t    return -1;\n\t}\n\treturn RangeAsSlice(self, start, stop, val);\n    }\n    else\n    {\n\tRAISE_INVALID_INDEX_TYPE(idx);\n\treturn -1;\n    }\n}\n\n/* TabPage object - Implementation\n */\n\n    static PyObject *\nTabPageGetattro(PyObject *self, PyObject *nameobj)\n{\n    PyObject *r;\n\n    GET_ATTR_STRING(name, nameobj);\n\n    if ((r = TabPageAttrValid((TabPageObject *)(self), name)))\n\treturn r;\n\n    if (CheckTabPage((TabPageObject *)(self)))\n\treturn NULL;\n\n    r = TabPageAttr((TabPageObject *)(self), name);\n    if (r || PyErr_Occurred())\n\treturn r;\n    else\n\treturn PyObject_GenericGetAttr(self, nameobj);\n}\n\n/* Window object - Implementation\n */\n\n    static PyObject *\nWindowGetattro(PyObject *self, PyObject *nameobj)\n{\n    PyObject *r;\n\n    GET_ATTR_STRING(name, nameobj);\n\n    if ((r = WindowAttrValid((WindowObject *)(self), name)))\n\treturn r;\n\n    if (CheckWindow((WindowObject *)(self)))\n\treturn NULL;\n\n    r = WindowAttr((WindowObject *)(self), name);\n    if (r || PyErr_Occurred())\n\treturn r;\n    else\n\treturn PyObject_GenericGetAttr(self, nameobj);\n}\n\n    static int\nWindowSetattro(PyObject *self, PyObject *nameobj, PyObject *val)\n{\n    GET_ATTR_STRING(name, nameobj);\n\n    return WindowSetattr((WindowObject *)(self), name, val);\n}\n\n/* Tab page list object - Definitions\n */\n\nstatic PySequenceMethods TabListAsSeq = {\n    (lenfunc)\t     TabListLength,\t    /* sq_length,    len(x)   */\n    (binaryfunc)     0,\t\t\t    /* sq_concat,    x+y      */\n    (ssizeargfunc)   0,\t\t\t    /* sq_repeat,    x*n      */\n    (ssizeargfunc)   TabListItem,\t    /* sq_item,      x[i]     */\n    0,\t\t\t\t\t    /* sq_slice,     x[i:j]   */\n    (ssizeobjargproc)0,\t\t\t    /* sq_as_item,  x[i]=v   */\n    0,\t\t\t\t\t    /* sq_ass_slice, x[i:j]=v */\n    0,\t\t\t\t\t    /* sq_contains */\n    0,\t\t\t\t\t    /* sq_inplace_concat */\n    0,\t\t\t\t\t    /* sq_inplace_repeat */\n};\n\n/* Window list object - Definitions\n */\n\nstatic PySequenceMethods WinListAsSeq = {\n    (lenfunc)\t     WinListLength,\t    /* sq_length,    len(x)   */\n    (binaryfunc)     0,\t\t\t    /* sq_concat,    x+y      */\n    (ssizeargfunc)   0,\t\t\t    /* sq_repeat,    x*n      */\n    (ssizeargfunc)   WinListItem,\t    /* sq_item,      x[i]     */\n    0,\t\t\t\t\t    /* sq_slice,     x[i:j]   */\n    (ssizeobjargproc)0,\t\t\t    /* sq_as_item,  x[i]=v   */\n    0,\t\t\t\t\t    /* sq_ass_slice, x[i:j]=v */\n    0,\t\t\t\t\t    /* sq_contains */\n    0,\t\t\t\t\t    /* sq_inplace_concat */\n    0,\t\t\t\t\t    /* sq_inplace_repeat */\n};\n\n/* Current items object - Implementation\n */\n    static PyObject *\nCurrentGetattro(PyObject *self, PyObject *nameobj)\n{\n    PyObject\t*r;\n    GET_ATTR_STRING(name, nameobj);\n    if (!(r = CurrentGetattr(self, name)))\n\treturn PyObject_GenericGetAttr(self, nameobj);\n    return r;\n}\n\n    static int\nCurrentSetattro(PyObject *self, PyObject *nameobj, PyObject *value)\n{\n    GET_ATTR_STRING(name, nameobj);\n    return CurrentSetattr(self, name, value);\n}\n\n/* Dictionary object - Definitions\n */\n\n    static PyObject *\nDictionaryGetattro(PyObject *self, PyObject *nameobj)\n{\n    DictionaryObject\t*this = ((DictionaryObject *) (self));\n\n    GET_ATTR_STRING(name, nameobj);\n\n    if (strcmp(name, \"locked\") == 0)\n\treturn PyLong_FromLong(this->dict->dv_lock);\n    else if (strcmp(name, \"scope\") == 0)\n\treturn PyLong_FromLong(this->dict->dv_scope);\n\n    return PyObject_GenericGetAttr(self, nameobj);\n}\n\n    static int\nDictionarySetattro(PyObject *self, PyObject *nameobj, PyObject *val)\n{\n    GET_ATTR_STRING(name, nameobj);\n    return DictionarySetattr((DictionaryObject *)(self), name, val);\n}\n\n/* List object - Definitions\n */\n\n    static PyObject *\nListGetattro(PyObject *self, PyObject *nameobj)\n{\n    GET_ATTR_STRING(name, nameobj);\n\n    if (strcmp(name, \"locked\") == 0)\n\treturn PyLong_FromLong(((ListObject *) (self))->list->lv_lock);\n\n    return PyObject_GenericGetAttr(self, nameobj);\n}\n\n    static int\nListSetattro(PyObject *self, PyObject *nameobj, PyObject *val)\n{\n    GET_ATTR_STRING(name, nameobj);\n    return ListSetattr((ListObject *)(self), name, val);\n}\n\n/* Function object - Definitions\n */\n\n    static PyObject *\nFunctionGetattro(PyObject *self, PyObject *nameobj)\n{\n    PyObject\t\t*r;\n    FunctionObject\t*this = (FunctionObject *)(self);\n\n    GET_ATTR_STRING(name, nameobj);\n\n    r = FunctionAttr(this, name);\n    if (r || PyErr_Occurred())\n\treturn r;\n    else\n\treturn PyObject_GenericGetAttr(self, nameobj);\n}\n\n/* External interface\n */\n\n    void\npython3_buffer_free(buf_T *buf)\n{\n    if (BUF_PYTHON_REF(buf) != NULL)\n    {\n\tBufferObject *bp = BUF_PYTHON_REF(buf);\n\tbp->buf = INVALID_BUFFER_VALUE;\n\tBUF_PYTHON_REF(buf) = NULL;\n    }\n}\n\n#if defined(FEAT_WINDOWS) || defined(PROTO)\n    void\npython3_window_free(win_T *win)\n{\n    if (WIN_PYTHON_REF(win) != NULL)\n    {\n\tWindowObject *wp = WIN_PYTHON_REF(win);\n\twp->win = INVALID_WINDOW_VALUE;\n\tWIN_PYTHON_REF(win) = NULL;\n    }\n}\n\n    void\npython3_tabpage_free(tabpage_T *tab)\n{\n    if (TAB_PYTHON_REF(tab) != NULL)\n    {\n\tTabPageObject *tp = TAB_PYTHON_REF(tab);\n\ttp->tab = INVALID_TABPAGE_VALUE;\n\tTAB_PYTHON_REF(tab) = NULL;\n    }\n}\n#endif\n\n    static PyObject *\nPy3Init_vim(void)\n{\n    /* The special value is removed from sys.path in Python3_Init(). */\n    static wchar_t *(argv[2]) = {L\"/must>not&exist/foo\", NULL};\n\n    if (init_types())\n\treturn NULL;\n\n    /* Set sys.argv[] to avoid a crash in warn(). */\n    PySys_SetArgv(1, argv);\n\n    if ((vim_module = PyModule_Create(&vimmodule)) == NULL)\n\treturn NULL;\n\n    if (populate_module(vim_module))\n\treturn NULL;\n\n    if (init_sys_path())\n\treturn NULL;\n\n    return vim_module;\n}\n\n/*************************************************************************\n * 4. Utility functions for handling the interface between Vim and Python.\n */\n\n/* Convert a Vim line into a Python string.\n * All internal newlines are replaced by null characters.\n *\n * On errors, the Python exception data is set, and NULL is returned.\n */\n    static PyObject *\nLineToString(const char *str)\n{\n    PyObject *result;\n    Py_ssize_t len = strlen(str);\n    char *tmp,*p;\n\n    tmp = (char *)alloc((unsigned)(len+1));\n    p = tmp;\n    if (p == NULL)\n    {\n\tPyErr_NoMemory();\n\treturn NULL;\n    }\n\n    while (*str)\n    {\n\tif (*str == '\\n')\n\t    *p = '\\0';\n\telse\n\t    *p = *str;\n\n\t++p;\n\t++str;\n    }\n    *p = '\\0';\n\n    result = PyUnicode_Decode(tmp, len, (char *)ENC_OPT, CODEC_ERROR_HANDLER);\n\n    vim_free(tmp);\n    return result;\n}\n\n    void\ndo_py3eval (char_u *str, typval_T *rettv)\n{\n    DoPyCommand((char *) str,\n\t    (rangeinitializer) init_range_eval,\n\t    (runner) run_eval,\n\t    (void *) rettv);\n    switch(rettv->v_type)\n    {\n\tcase VAR_DICT: ++rettv->vval.v_dict->dv_refcount; break;\n\tcase VAR_LIST: ++rettv->vval.v_list->lv_refcount; break;\n\tcase VAR_FUNC: func_ref(rettv->vval.v_string);    break;\n\tcase VAR_PARTIAL: ++rettv->vval.v_partial->pt_refcount; break;\n\tcase VAR_UNKNOWN:\n\t    rettv->v_type = VAR_NUMBER;\n\t    rettv->vval.v_number = 0;\n\t    break;\n\tcase VAR_NUMBER:\n\tcase VAR_STRING:\n\tcase VAR_FLOAT:\n\tcase VAR_SPECIAL:\n\tcase VAR_JOB:\n\tcase VAR_CHANNEL:\n\t    break;\n    }\n}\n\n    int\nset_ref_in_python3 (int copyID)\n{\n    return set_ref_in_py(copyID);\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/src/if_lua.c": "/* vi:set ts=8 sts=4 sw=4 noet:\n *\n * VIM - Vi IMproved\tby Bram Moolenaar\n *\n * Lua interface by Luis Carvalho\n *\n * Do \":help uganda\"  in Vim to read copying and usage conditions.\n * Do \":help credits\" in Vim to see a list of people who contributed.\n * See README.txt for an overview of the Vim source code.\n */\n\n#include \"vim.h\"\n\n#include <lua.h>\n#include <lualib.h>\n#include <lauxlib.h>\n\n/* Only do the following when the feature is enabled.  Needed for \"make\n * depend\". */\n#if defined(FEAT_LUA) || defined(PROTO)\n\n#define LUAVIM_CHUNKNAME \"vim chunk\"\n#define LUAVIM_NAME \"vim\"\n#define LUAVIM_EVALNAME \"luaeval\"\n#define LUAVIM_EVALHEADER \"local _A=select(1,...) return \"\n\ntypedef buf_T *luaV_Buffer;\ntypedef win_T *luaV_Window;\ntypedef dict_T *luaV_Dict;\ntypedef list_T *luaV_List;\ntypedef void (*msgfunc_T)(char_u *);\n\nstatic const char LUAVIM_DICT[] = \"dict\";\nstatic const char LUAVIM_LIST[] = \"list\";\nstatic const char LUAVIM_BUFFER[] = \"buffer\";\nstatic const char LUAVIM_WINDOW[] = \"window\";\nstatic const char LUAVIM_FREE[] = \"luaV_free\";\nstatic const char LUAVIM_LUAEVAL[] = \"luaV_luaeval\";\nstatic const char LUAVIM_SETREF[] = \"luaV_setref\";\n\n/* most functions are closures with a cache table as first upvalue;\n * get/setudata manage references to vim userdata in cache table through\n * object pointers (light userdata) */\n#define luaV_getudata(L, v) \\\n    lua_pushlightuserdata((L), (void *) (v)); \\\n    lua_rawget((L), lua_upvalueindex(1))\n#define luaV_setudata(L, v) \\\n    lua_pushlightuserdata((L), (void *) (v)); \\\n    lua_pushvalue((L), -2); \\\n    lua_rawset((L), lua_upvalueindex(1))\n#define luaV_getfield(L, s) \\\n    lua_pushlightuserdata((L), (void *)(s)); \\\n    lua_rawget((L), LUA_REGISTRYINDEX)\n#define luaV_checksandbox(L) \\\n    if (sandbox) luaL_error((L), \"not allowed in sandbox\")\n#define luaV_msg(L) luaV_msgfunc((L), (msgfunc_T) msg)\n#define luaV_emsg(L) luaV_msgfunc((L), (msgfunc_T) emsg)\n\nstatic luaV_List *luaV_pushlist (lua_State *L, list_T *lis);\nstatic luaV_Dict *luaV_pushdict (lua_State *L, dict_T *dic);\n\n#if LUA_VERSION_NUM <= 501\n#define luaV_openlib(L, l, n) luaL_openlib(L, NULL, l, n)\n#define luaL_typeerror luaL_typerror\n#else\n#define luaV_openlib luaL_setfuncs\n#endif\n\n#ifdef DYNAMIC_LUA\n\n#ifndef WIN3264\n# include <dlfcn.h>\n# define HANDLE void*\n# define load_dll(n) dlopen((n), RTLD_LAZY|RTLD_GLOBAL)\n# define symbol_from_dll dlsym\n# define close_dll dlclose\n#else\n# define load_dll vimLoadLib\n# define symbol_from_dll GetProcAddress\n# define close_dll FreeLibrary\n#endif\n\n/* lauxlib */\n#if LUA_VERSION_NUM <= 501\n#define luaL_register dll_luaL_register\n#define luaL_prepbuffer dll_luaL_prepbuffer\n#define luaL_openlib dll_luaL_openlib\n#define luaL_typerror dll_luaL_typerror\n#define luaL_loadfile dll_luaL_loadfile\n#define luaL_loadbuffer dll_luaL_loadbuffer\n#else\n#define luaL_prepbuffsize dll_luaL_prepbuffsize\n#define luaL_setfuncs dll_luaL_setfuncs\n#define luaL_loadfilex dll_luaL_loadfilex\n#define luaL_loadbufferx dll_luaL_loadbufferx\n#define luaL_argerror dll_luaL_argerror\n#endif\n#define luaL_checkany dll_luaL_checkany\n#define luaL_checklstring dll_luaL_checklstring\n#define luaL_checkinteger dll_luaL_checkinteger\n#define luaL_optinteger dll_luaL_optinteger\n#define luaL_checktype dll_luaL_checktype\n#define luaL_error dll_luaL_error\n#define luaL_newstate dll_luaL_newstate\n#define luaL_buffinit dll_luaL_buffinit\n#define luaL_addlstring dll_luaL_addlstring\n#define luaL_pushresult dll_luaL_pushresult\n/* lua */\n#if LUA_VERSION_NUM <= 501\n#define lua_tonumber dll_lua_tonumber\n#define lua_tointeger dll_lua_tointeger\n#define lua_call dll_lua_call\n#define lua_pcall dll_lua_pcall\n#else\n#define lua_tonumberx dll_lua_tonumberx\n#define lua_tointegerx dll_lua_tointegerx\n#define lua_callk dll_lua_callk\n#define lua_pcallk dll_lua_pcallk\n#define lua_getglobal dll_lua_getglobal\n#define lua_setglobal dll_lua_setglobal\n#endif\n#if LUA_VERSION_NUM <= 502\n#define lua_replace dll_lua_replace\n#define lua_remove dll_lua_remove\n#endif\n#if LUA_VERSION_NUM >= 503\n#define lua_rotate dll_lua_rotate\n#define lua_copy dll_lua_copy\n#endif\n#define lua_typename dll_lua_typename\n#define lua_close dll_lua_close\n#define lua_gettop dll_lua_gettop\n#define lua_settop dll_lua_settop\n#define lua_pushvalue dll_lua_pushvalue\n#define lua_isnumber dll_lua_isnumber\n#define lua_isstring dll_lua_isstring\n#define lua_type dll_lua_type\n#define lua_rawequal dll_lua_rawequal\n#define lua_toboolean dll_lua_toboolean\n#define lua_tolstring dll_lua_tolstring\n#define lua_touserdata dll_lua_touserdata\n#define lua_pushnil dll_lua_pushnil\n#define lua_pushnumber dll_lua_pushnumber\n#define lua_pushinteger dll_lua_pushinteger\n#define lua_pushlstring dll_lua_pushlstring\n#define lua_pushstring dll_lua_pushstring\n#define lua_pushfstring dll_lua_pushfstring\n#define lua_pushcclosure dll_lua_pushcclosure\n#define lua_pushboolean dll_lua_pushboolean\n#define lua_pushlightuserdata dll_lua_pushlightuserdata\n#define lua_getfield dll_lua_getfield\n#define lua_rawget dll_lua_rawget\n#define lua_rawgeti dll_lua_rawgeti\n#define lua_createtable dll_lua_createtable\n#define lua_newuserdata dll_lua_newuserdata\n#define lua_getmetatable dll_lua_getmetatable\n#define lua_setfield dll_lua_setfield\n#define lua_rawset dll_lua_rawset\n#define lua_rawseti dll_lua_rawseti\n#define lua_setmetatable dll_lua_setmetatable\n#define lua_next dll_lua_next\n/* libs */\n#define luaopen_base dll_luaopen_base\n#define luaopen_table dll_luaopen_table\n#define luaopen_string dll_luaopen_string\n#define luaopen_math dll_luaopen_math\n#define luaopen_io dll_luaopen_io\n#define luaopen_os dll_luaopen_os\n#define luaopen_package dll_luaopen_package\n#define luaopen_debug dll_luaopen_debug\n#define luaL_openlibs dll_luaL_openlibs\n\n/* lauxlib */\n#if LUA_VERSION_NUM <= 501\nvoid (*dll_luaL_register) (lua_State *L, const char *libname, const luaL_Reg *l);\nchar *(*dll_luaL_prepbuffer) (luaL_Buffer *B);\nvoid (*dll_luaL_openlib) (lua_State *L, const char *libname, const luaL_Reg *l, int nup);\nint (*dll_luaL_typerror) (lua_State *L, int narg, const char *tname);\nint (*dll_luaL_loadfile) (lua_State *L, const char *filename);\nint (*dll_luaL_loadbuffer) (lua_State *L, const char *buff, size_t sz, const char *name);\n#else\nchar *(*dll_luaL_prepbuffsize) (luaL_Buffer *B, size_t sz);\nvoid (*dll_luaL_setfuncs) (lua_State *L, const luaL_Reg *l, int nup);\nint (*dll_luaL_loadfilex) (lua_State *L, const char *filename, const char *mode);\nint (*dll_luaL_loadbufferx) (lua_State *L, const char *buff, size_t sz, const char *name, const char *mode);\nint (*dll_luaL_argerror) (lua_State *L, int numarg, const char *extramsg);\n#endif\nvoid (*dll_luaL_checkany) (lua_State *L, int narg);\nconst char *(*dll_luaL_checklstring) (lua_State *L, int numArg, size_t *l);\nlua_Integer (*dll_luaL_checkinteger) (lua_State *L, int numArg);\nlua_Integer (*dll_luaL_optinteger) (lua_State *L, int nArg, lua_Integer def);\nvoid (*dll_luaL_checktype) (lua_State *L, int narg, int t);\nint (*dll_luaL_error) (lua_State *L, const char *fmt, ...);\nlua_State *(*dll_luaL_newstate) (void);\nvoid (*dll_luaL_buffinit) (lua_State *L, luaL_Buffer *B);\nvoid (*dll_luaL_addlstring) (luaL_Buffer *B, const char *s, size_t l);\nvoid (*dll_luaL_pushresult) (luaL_Buffer *B);\n/* lua */\n#if LUA_VERSION_NUM <= 501\nlua_Number (*dll_lua_tonumber) (lua_State *L, int idx);\nlua_Integer (*dll_lua_tointeger) (lua_State *L, int idx);\nvoid (*dll_lua_call) (lua_State *L, int nargs, int nresults);\nint (*dll_lua_pcall) (lua_State *L, int nargs, int nresults, int errfunc);\n#else\nlua_Number (*dll_lua_tonumberx) (lua_State *L, int idx, int *isnum);\nlua_Integer (*dll_lua_tointegerx) (lua_State *L, int idx, int *isnum);\nvoid (*dll_lua_callk) (lua_State *L, int nargs, int nresults, int ctx,\n\tlua_CFunction k);\nint (*dll_lua_pcallk) (lua_State *L, int nargs, int nresults, int errfunc,\n\tint ctx, lua_CFunction k);\nvoid (*dll_lua_getglobal) (lua_State *L, const char *var);\nvoid (*dll_lua_setglobal) (lua_State *L, const char *var);\n#endif\n#if LUA_VERSION_NUM <= 502\nvoid (*dll_lua_replace) (lua_State *L, int idx);\nvoid (*dll_lua_remove) (lua_State *L, int idx);\n#endif\n#if LUA_VERSION_NUM >= 503\nvoid  (*dll_lua_rotate) (lua_State *L, int idx, int n);\nvoid (*dll_lua_copy) (lua_State *L, int fromidx, int toidx);\n#endif\nconst char *(*dll_lua_typename) (lua_State *L, int tp);\nvoid       (*dll_lua_close) (lua_State *L);\nint (*dll_lua_gettop) (lua_State *L);\nvoid (*dll_lua_settop) (lua_State *L, int idx);\nvoid (*dll_lua_pushvalue) (lua_State *L, int idx);\nint (*dll_lua_isnumber) (lua_State *L, int idx);\nint (*dll_lua_isstring) (lua_State *L, int idx);\nint (*dll_lua_type) (lua_State *L, int idx);\nint (*dll_lua_rawequal) (lua_State *L, int idx1, int idx2);\nint (*dll_lua_toboolean) (lua_State *L, int idx);\nconst char *(*dll_lua_tolstring) (lua_State *L, int idx, size_t *len);\nvoid *(*dll_lua_touserdata) (lua_State *L, int idx);\nvoid (*dll_lua_pushnil) (lua_State *L);\nvoid (*dll_lua_pushnumber) (lua_State *L, lua_Number n);\nvoid (*dll_lua_pushinteger) (lua_State *L, lua_Integer n);\nvoid (*dll_lua_pushlstring) (lua_State *L, const char *s, size_t l);\nvoid (*dll_lua_pushstring) (lua_State *L, const char *s);\nconst char *(*dll_lua_pushfstring) (lua_State *L, const char *fmt, ...);\nvoid (*dll_lua_pushcclosure) (lua_State *L, lua_CFunction fn, int n);\nvoid (*dll_lua_pushboolean) (lua_State *L, int b);\nvoid (*dll_lua_pushlightuserdata) (lua_State *L, void *p);\nvoid (*dll_lua_getfield) (lua_State *L, int idx, const char *k);\nvoid (*dll_lua_rawget) (lua_State *L, int idx);\nvoid (*dll_lua_rawgeti) (lua_State *L, int idx, int n);\nvoid (*dll_lua_createtable) (lua_State *L, int narr, int nrec);\nvoid *(*dll_lua_newuserdata) (lua_State *L, size_t sz);\nint (*dll_lua_getmetatable) (lua_State *L, int objindex);\nvoid (*dll_lua_setfield) (lua_State *L, int idx, const char *k);\nvoid (*dll_lua_rawset) (lua_State *L, int idx);\nvoid (*dll_lua_rawseti) (lua_State *L, int idx, int n);\nint (*dll_lua_setmetatable) (lua_State *L, int objindex);\nint (*dll_lua_next) (lua_State *L, int idx);\n/* libs */\nint (*dll_luaopen_base) (lua_State *L);\nint (*dll_luaopen_table) (lua_State *L);\nint (*dll_luaopen_string) (lua_State *L);\nint (*dll_luaopen_math) (lua_State *L);\nint (*dll_luaopen_io) (lua_State *L);\nint (*dll_luaopen_os) (lua_State *L);\nint (*dll_luaopen_package) (lua_State *L);\nint (*dll_luaopen_debug) (lua_State *L);\nvoid (*dll_luaL_openlibs) (lua_State *L);\n\ntypedef void **luaV_function;\ntypedef struct {\n    const char *name;\n    luaV_function func;\n} luaV_Reg;\n\nstatic const luaV_Reg luaV_dll[] = {\n    /* lauxlib */\n#if LUA_VERSION_NUM <= 501\n    {\"luaL_register\", (luaV_function) &dll_luaL_register},\n    {\"luaL_prepbuffer\", (luaV_function) &dll_luaL_prepbuffer},\n    {\"luaL_openlib\", (luaV_function) &dll_luaL_openlib},\n    {\"luaL_typerror\", (luaV_function) &dll_luaL_typerror},\n    {\"luaL_loadfile\", (luaV_function) &dll_luaL_loadfile},\n    {\"luaL_loadbuffer\", (luaV_function) &dll_luaL_loadbuffer},\n#else\n    {\"luaL_prepbuffsize\", (luaV_function) &dll_luaL_prepbuffsize},\n    {\"luaL_setfuncs\", (luaV_function) &dll_luaL_setfuncs},\n    {\"luaL_loadfilex\", (luaV_function) &dll_luaL_loadfilex},\n    {\"luaL_loadbufferx\", (luaV_function) &dll_luaL_loadbufferx},\n    {\"luaL_argerror\", (luaV_function) &dll_luaL_argerror},\n#endif\n    {\"luaL_checkany\", (luaV_function) &dll_luaL_checkany},\n    {\"luaL_checklstring\", (luaV_function) &dll_luaL_checklstring},\n    {\"luaL_checkinteger\", (luaV_function) &dll_luaL_checkinteger},\n    {\"luaL_optinteger\", (luaV_function) &dll_luaL_optinteger},\n    {\"luaL_checktype\", (luaV_function) &dll_luaL_checktype},\n    {\"luaL_error\", (luaV_function) &dll_luaL_error},\n    {\"luaL_newstate\", (luaV_function) &dll_luaL_newstate},\n    {\"luaL_buffinit\", (luaV_function) &dll_luaL_buffinit},\n    {\"luaL_addlstring\", (luaV_function) &dll_luaL_addlstring},\n    {\"luaL_pushresult\", (luaV_function) &dll_luaL_pushresult},\n    /* lua */\n#if LUA_VERSION_NUM <= 501\n    {\"lua_tonumber\", (luaV_function) &dll_lua_tonumber},\n    {\"lua_tointeger\", (luaV_function) &dll_lua_tointeger},\n    {\"lua_call\", (luaV_function) &dll_lua_call},\n    {\"lua_pcall\", (luaV_function) &dll_lua_pcall},\n#else\n    {\"lua_tonumberx\", (luaV_function) &dll_lua_tonumberx},\n    {\"lua_tointegerx\", (luaV_function) &dll_lua_tointegerx},\n    {\"lua_callk\", (luaV_function) &dll_lua_callk},\n    {\"lua_pcallk\", (luaV_function) &dll_lua_pcallk},\n    {\"lua_getglobal\", (luaV_function) &dll_lua_getglobal},\n    {\"lua_setglobal\", (luaV_function) &dll_lua_setglobal},\n#endif\n#if LUA_VERSION_NUM <= 502\n    {\"lua_replace\", (luaV_function) &dll_lua_replace},\n    {\"lua_remove\", (luaV_function) &dll_lua_remove},\n#endif\n#if LUA_VERSION_NUM >= 503\n    {\"lua_rotate\", (luaV_function) &dll_lua_rotate},\n    {\"lua_copy\", (luaV_function) &dll_lua_copy},\n#endif\n    {\"lua_typename\", (luaV_function) &dll_lua_typename},\n    {\"lua_close\", (luaV_function) &dll_lua_close},\n    {\"lua_gettop\", (luaV_function) &dll_lua_gettop},\n    {\"lua_settop\", (luaV_function) &dll_lua_settop},\n    {\"lua_pushvalue\", (luaV_function) &dll_lua_pushvalue},\n    {\"lua_isnumber\", (luaV_function) &dll_lua_isnumber},\n    {\"lua_isstring\", (luaV_function) &dll_lua_isstring},\n    {\"lua_type\", (luaV_function) &dll_lua_type},\n    {\"lua_rawequal\", (luaV_function) &dll_lua_rawequal},\n    {\"lua_toboolean\", (luaV_function) &dll_lua_toboolean},\n    {\"lua_tolstring\", (luaV_function) &dll_lua_tolstring},\n    {\"lua_touserdata\", (luaV_function) &dll_lua_touserdata},\n    {\"lua_pushnil\", (luaV_function) &dll_lua_pushnil},\n    {\"lua_pushnumber\", (luaV_function) &dll_lua_pushnumber},\n    {\"lua_pushinteger\", (luaV_function) &dll_lua_pushinteger},\n    {\"lua_pushlstring\", (luaV_function) &dll_lua_pushlstring},\n    {\"lua_pushstring\", (luaV_function) &dll_lua_pushstring},\n    {\"lua_pushfstring\", (luaV_function) &dll_lua_pushfstring},\n    {\"lua_pushcclosure\", (luaV_function) &dll_lua_pushcclosure},\n    {\"lua_pushboolean\", (luaV_function) &dll_lua_pushboolean},\n    {\"lua_pushlightuserdata\", (luaV_function) &dll_lua_pushlightuserdata},\n    {\"lua_getfield\", (luaV_function) &dll_lua_getfield},\n    {\"lua_rawget\", (luaV_function) &dll_lua_rawget},\n    {\"lua_rawgeti\", (luaV_function) &dll_lua_rawgeti},\n    {\"lua_createtable\", (luaV_function) &dll_lua_createtable},\n    {\"lua_newuserdata\", (luaV_function) &dll_lua_newuserdata},\n    {\"lua_getmetatable\", (luaV_function) &dll_lua_getmetatable},\n    {\"lua_setfield\", (luaV_function) &dll_lua_setfield},\n    {\"lua_rawset\", (luaV_function) &dll_lua_rawset},\n    {\"lua_rawseti\", (luaV_function) &dll_lua_rawseti},\n    {\"lua_setmetatable\", (luaV_function) &dll_lua_setmetatable},\n    {\"lua_next\", (luaV_function) &dll_lua_next},\n    /* libs */\n    {\"luaopen_base\", (luaV_function) &dll_luaopen_base},\n    {\"luaopen_table\", (luaV_function) &dll_luaopen_table},\n    {\"luaopen_string\", (luaV_function) &dll_luaopen_string},\n    {\"luaopen_math\", (luaV_function) &dll_luaopen_math},\n    {\"luaopen_io\", (luaV_function) &dll_luaopen_io},\n    {\"luaopen_os\", (luaV_function) &dll_luaopen_os},\n    {\"luaopen_package\", (luaV_function) &dll_luaopen_package},\n    {\"luaopen_debug\", (luaV_function) &dll_luaopen_debug},\n    {\"luaL_openlibs\", (luaV_function) &dll_luaL_openlibs},\n    {NULL, NULL}\n};\n\nstatic HANDLE hinstLua = NULL;\n\n    static void\nend_dynamic_lua(void)\n{\n    if (hinstLua)\n    {\n\tclose_dll(hinstLua);\n\thinstLua = 0;\n    }\n}\n\n    static int\nlua_link_init(char *libname, int verbose)\n{\n    const luaV_Reg *reg;\n    if (hinstLua) return OK;\n    hinstLua = load_dll(libname);\n    if (!hinstLua)\n    {\n\tif (verbose)\n\t    EMSG2(_(e_loadlib), libname);\n\treturn FAIL;\n    }\n    for (reg = luaV_dll; reg->func; reg++)\n    {\n\tif ((*reg->func = symbol_from_dll(hinstLua, reg->name)) == NULL)\n\t{\n\t    close_dll(hinstLua);\n\t    hinstLua = 0;\n\t    if (verbose)\n\t\tEMSG2(_(e_loadfunc), reg->name);\n\t    return FAIL;\n\t}\n    }\n    return OK;\n}\n#endif /* DYNAMIC_LUA */\n\n#if defined(DYNAMIC_LUA) || defined(PROTO)\n    int\nlua_enabled(int verbose)\n{\n    return lua_link_init((char *)p_luadll, verbose) == OK;\n}\n#endif\n\n#if LUA_VERSION_NUM > 501\n    static int\nluaL_typeerror (lua_State *L, int narg, const char *tname)\n{\n    const char *msg = lua_pushfstring(L, \"%s expected, got %s\",\n\t    tname, luaL_typename(L, narg));\n    return luaL_argerror(L, narg, msg);\n}\n#endif\n\n\n/* =======   Internal   ======= */\n\n    static void\nluaV_newmetatable(lua_State *L, const char *tname)\n{\n    lua_newtable(L);\n    lua_pushlightuserdata(L, (void *) tname);\n    lua_pushvalue(L, -2);\n    lua_rawset(L, LUA_REGISTRYINDEX);\n}\n\n    static void *\nluaV_toudata(lua_State *L, int ud, const char *tname)\n{\n    void *p = lua_touserdata(L, ud);\n\n    if (p != NULL) /* value is userdata? */\n    {\n\tif (lua_getmetatable(L, ud)) /* does it have a metatable? */\n\t{\n\t    luaV_getfield(L, tname); /* get metatable */\n\t    if (lua_rawequal(L, -1, -2)) /* MTs match? */\n\t    {\n\t\tlua_pop(L, 2); /* MTs */\n\t\treturn p;\n\t    }\n\t}\n    }\n    return NULL;\n}\n\n    static void *\nluaV_checkcache(lua_State *L, void *p)\n{\n    luaV_getudata(L, p);\n    if (lua_isnil(L, -1)) luaL_error(L, \"invalid object\");\n    lua_pop(L, 1);\n    return p;\n}\n\n#define luaV_unbox(L,luatyp,ud) (*((luatyp *) lua_touserdata((L),(ud))))\n\n#define luaV_checkvalid(L,luatyp,ud) \\\n    luaV_checkcache((L), (void *) luaV_unbox((L),luatyp,(ud)))\n\n    static void *\nluaV_checkudata(lua_State *L, int ud, const char *tname)\n{\n    void *p = luaV_toudata(L, ud, tname);\n    if (p == NULL) luaL_typeerror(L, ud, tname);\n    return p;\n}\n\n    static void\nluaV_pushtypval(lua_State *L, typval_T *tv)\n{\n    if (tv == NULL)\n    {\n\tlua_pushnil(L);\n\treturn;\n    }\n    switch (tv->v_type)\n    {\n\tcase VAR_STRING:\n\t    lua_pushstring(L, tv->vval.v_string == NULL\n\t\t\t\t\t    ? \"\" : (char *)tv->vval.v_string);\n\t    break;\n\tcase VAR_NUMBER:\n\t    lua_pushinteger(L, (int) tv->vval.v_number);\n\t    break;\n#ifdef FEAT_FLOAT\n\tcase VAR_FLOAT:\n\t    lua_pushnumber(L, (lua_Number) tv->vval.v_float);\n\t    break;\n#endif\n\tcase VAR_LIST:\n\t    luaV_pushlist(L, tv->vval.v_list);\n\t    break;\n\tcase VAR_DICT:\n\t    luaV_pushdict(L, tv->vval.v_dict);\n\t    break;\n\tcase VAR_SPECIAL:\n\t    if (tv->vval.v_number <= VVAL_TRUE)\n\t\tlua_pushinteger(L, (int) tv->vval.v_number);\n\t    else\n\t\tlua_pushnil(L);\n\t    break;\n\tdefault:\n\t    lua_pushnil(L);\n    }\n}\n\n/* converts lua value at 'pos' to typval 'tv' */\n    static void\nluaV_totypval (lua_State *L, int pos, typval_T *tv)\n{\n    switch(lua_type(L, pos)) {\n\tcase LUA_TBOOLEAN:\n\t    tv->v_type = VAR_SPECIAL;\n\t    tv->vval.v_number = (varnumber_T) lua_toboolean(L, pos);\n\t    break;\n\tcase LUA_TSTRING:\n\t    tv->v_type = VAR_STRING;\n\t    tv->vval.v_string = vim_strsave((char_u *) lua_tostring(L, pos));\n\t    break;\n\tcase LUA_TNUMBER:\n#ifdef FEAT_FLOAT\n\t    tv->v_type = VAR_FLOAT;\n\t    tv->vval.v_float = (float_T) lua_tonumber(L, pos);\n#else\n\t    tv->v_type = VAR_NUMBER;\n\t    tv->vval.v_number = (varnumber_T) lua_tointeger(L, pos);\n#endif\n\t    break;\n\tcase LUA_TUSERDATA: {\n\t    void *p = lua_touserdata(L, pos);\n\t    if (lua_getmetatable(L, pos)) /* has metatable? */\n\t    {\n\t\t/* check list */\n\t\tluaV_getfield(L, LUAVIM_LIST);\n\t\tif (lua_rawequal(L, -1, -2))\n\t\t{\n\t\t    tv->v_type = VAR_LIST;\n\t\t    tv->vval.v_list = *((luaV_List *) p);\n\t\t    ++tv->vval.v_list->lv_refcount;\n\t\t    lua_pop(L, 2); /* MTs */\n\t\t    return;\n\t\t}\n\t\t/* check dict */\n\t\tluaV_getfield(L, LUAVIM_DICT);\n\t\tif (lua_rawequal(L, -1, -3))\n\t\t{\n\t\t    tv->v_type = VAR_DICT;\n\t\t    tv->vval.v_dict = *((luaV_Dict *) p);\n\t\t    ++tv->vval.v_dict->dv_refcount;\n\t\t    lua_pop(L, 3); /* MTs */\n\t\t    return;\n\t\t}\n\t\tlua_pop(L, 3); /* MTs */\n\t    }\n\t    break;\n\t}\n\tdefault:\n\t    tv->v_type = VAR_NUMBER;\n\t    tv->vval.v_number = 0;\n    }\n}\n\n/* similar to luaL_addlstring, but replaces \\0 with \\n if toline and\n * \\n with \\0 otherwise */\n    static void\nluaV_addlstring(luaL_Buffer *b, const char *s, size_t l, int toline)\n{\n    while (l--)\n    {\n\tif (*s == '\\0' && toline)\n\t    luaL_addchar(b, '\\n');\n\telse if (*s == '\\n' && !toline)\n\t    luaL_addchar(b, '\\0');\n\telse\n\t    luaL_addchar(b, *s);\n\ts++;\n    }\n}\n\n    static void\nluaV_pushline(lua_State *L, buf_T *buf, linenr_T n)\n{\n    const char *s = (const char *) ml_get_buf(buf, n, FALSE);\n    luaL_Buffer b;\n    luaL_buffinit(L, &b);\n    luaV_addlstring(&b, s, strlen(s), 0);\n    luaL_pushresult(&b);\n}\n\n    static char_u *\nluaV_toline(lua_State *L, int pos)\n{\n    size_t l;\n    const char *s = lua_tolstring(L, pos, &l);\n\n    luaL_Buffer b;\n    luaL_buffinit(L, &b);\n    luaV_addlstring(&b, s, l, 1);\n    luaL_pushresult(&b);\n    return (char_u *) lua_tostring(L, -1);\n}\n\n/* pops a string s from the top of the stack and calls mf(t) for pieces t of\n * s separated by newlines */\n    static void\nluaV_msgfunc(lua_State *L, msgfunc_T mf)\n{\n    luaL_Buffer b;\n    size_t l;\n    const char *p, *s = lua_tolstring(L, -1, &l);\n    luaL_buffinit(L, &b);\n    luaV_addlstring(&b, s, l, 0);\n    luaL_pushresult(&b);\n    /* break string */\n    p = s = lua_tolstring(L, -1, &l);\n    while (l--)\n    {\n\tif (*p++ == '\\0') /* break? */\n\t{\n\t    mf((char_u *) s);\n\t    s = p;\n\t}\n    }\n    mf((char_u *) s);\n    lua_pop(L, 2); /* original and modified strings */\n}\n\n#define luaV_newtype(typ,tname,luatyp,luatname) \\\n\tstatic luatyp * \\\n    luaV_new##tname (lua_State *L, typ *obj) \\\n    { \\\n\tluatyp *o = (luatyp *) lua_newuserdata(L, sizeof(luatyp)); \\\n\t*o = obj; \\\n\tluaV_setudata(L, obj); /* cache[obj] = udata */ \\\n\tluaV_getfield(L, luatname); \\\n\tlua_setmetatable(L, -2); \\\n\treturn o; \\\n    }\n\n#define luaV_pushtype(typ,tname,luatyp) \\\n\tstatic luatyp * \\\n    luaV_push##tname (lua_State *L, typ *obj) \\\n    { \\\n\tluatyp *o = NULL; \\\n\tif (obj == NULL) \\\n\t    lua_pushnil(L); \\\n\telse { \\\n\t    luaV_getudata(L, obj); \\\n\t    if (lua_isnil(L, -1)) /* not interned? */ \\\n\t    { \\\n\t\tlua_pop(L, 1); \\\n\t\to = luaV_new##tname(L, obj); \\\n\t    } \\\n\t    else \\\n\t\to = (luatyp *) lua_touserdata(L, -1); \\\n\t} \\\n\treturn o; \\\n    }\n\n#define luaV_type_tostring(tname,luatname) \\\n\tstatic int \\\n    luaV_##tname##_tostring (lua_State *L) \\\n    { \\\n\tlua_pushfstring(L, \"%s: %p\", luatname, lua_touserdata(L, 1)); \\\n\treturn 1; \\\n    }\n\n/* =======   List type   ======= */\n\n    static luaV_List *\nluaV_newlist (lua_State *L, list_T *lis)\n{\n    luaV_List *l = (luaV_List *) lua_newuserdata(L, sizeof(luaV_List));\n    *l = lis;\n    lis->lv_refcount++; /* reference in Lua */\n    luaV_setudata(L, lis); /* cache[lis] = udata */\n    luaV_getfield(L, LUAVIM_LIST);\n    lua_setmetatable(L, -2);\n    return l;\n}\n\nluaV_pushtype(list_T, list, luaV_List)\nluaV_type_tostring(list, LUAVIM_LIST)\n\n    static int\nluaV_list_len (lua_State *L)\n{\n    list_T *l = luaV_unbox(L, luaV_List, 1);\n    lua_pushinteger(L, (l == NULL) ? 0 : (int) l->lv_len);\n    return 1;\n}\n\n    static int\nluaV_list_iter (lua_State *L)\n{\n    listitem_T *li = (listitem_T *) lua_touserdata(L, lua_upvalueindex(2));\n    if (li == NULL) return 0;\n    luaV_pushtypval(L, &li->li_tv);\n    lua_pushlightuserdata(L, (void *) li->li_next);\n    lua_replace(L, lua_upvalueindex(2));\n    return 1;\n}\n\n    static int\nluaV_list_call (lua_State *L)\n{\n    list_T *l = luaV_unbox(L, luaV_List, 1);\n    lua_pushvalue(L, lua_upvalueindex(1)); /* pass cache table along */\n    lua_pushlightuserdata(L, (void *) l->lv_first);\n    lua_pushcclosure(L, luaV_list_iter, 2);\n    return 1;\n}\n\n    static int\nluaV_list_index (lua_State *L)\n{\n    list_T *l = luaV_unbox(L, luaV_List, 1);\n    if (lua_isnumber(L, 2)) /* list item? */\n    {\n\tlistitem_T *li = list_find(l, (long) luaL_checkinteger(L, 2));\n\tif (li == NULL)\n\t    lua_pushnil(L);\n\telse\n\t    luaV_pushtypval(L, &li->li_tv);\n    }\n    else if (lua_isstring(L, 2)) /* method? */\n    {\n\tconst char *s = lua_tostring(L, 2);\n\tif (strncmp(s, \"add\", 3) == 0\n\t\t|| strncmp(s, \"insert\", 6) == 0)\n\t{\n\t    lua_getmetatable(L, 1);\n\t    lua_getfield(L, -1, s);\n\t}\n\telse\n\t    lua_pushnil(L);\n    }\n    else\n\tlua_pushnil(L);\n    return 1;\n}\n\n    static int\nluaV_list_newindex (lua_State *L)\n{\n    list_T *l = luaV_unbox(L, luaV_List, 1);\n    long n = (long) luaL_checkinteger(L, 2);\n    listitem_T *li;\n    if (l->lv_lock)\n\tluaL_error(L, \"list is locked\");\n    li = list_find(l, n);\n    if (li == NULL) return 0;\n    if (lua_isnil(L, 3)) /* remove? */\n    {\n\tvimlist_remove(l, li, li);\n\tclear_tv(&li->li_tv);\n\tvim_free(li);\n    }\n    else\n    {\n\ttypval_T v;\n\tluaV_totypval(L, 3, &v);\n\tclear_tv(&li->li_tv);\n\tcopy_tv(&v, &li->li_tv);\n\tclear_tv(&v);\n    }\n    return 0;\n}\n\n    static int\nluaV_list_add (lua_State *L)\n{\n    luaV_List *lis = luaV_checkudata(L, 1, LUAVIM_LIST);\n    list_T *l = (list_T *) luaV_checkcache(L, (void *) *lis);\n    typval_T v;\n    if (l->lv_lock)\n\tluaL_error(L, \"list is locked\");\n    lua_settop(L, 2);\n    luaV_totypval(L, 2, &v);\n    if (list_append_tv(l, &v) == FAIL)\n    {\n\tclear_tv(&v);\n\tluaL_error(L, \"Failed to add item to list\");\n    }\n    clear_tv(&v);\n    lua_settop(L, 1);\n    return 1;\n}\n\n    static int\nluaV_list_insert (lua_State *L)\n{\n    luaV_List *lis = luaV_checkudata(L, 1, LUAVIM_LIST);\n    list_T *l = (list_T *) luaV_checkcache(L, (void *) *lis);\n    long pos = (long) luaL_optinteger(L, 3, 0);\n    listitem_T *li = NULL;\n    typval_T v;\n    if (l->lv_lock)\n\tluaL_error(L, \"list is locked\");\n    if (pos < l->lv_len)\n    {\n\tli = list_find(l, pos);\n\tif (li == NULL)\n\t    luaL_error(L, \"invalid position\");\n    }\n    lua_settop(L, 2);\n    luaV_totypval(L, 2, &v);\n    if (list_insert_tv(l, &v, li) == FAIL)\n    {\n\tclear_tv(&v);\n\tluaL_error(L, \"Failed to add item to list\");\n    }\n    clear_tv(&v);\n    lua_settop(L, 1);\n    return 1;\n}\n\nstatic const luaL_Reg luaV_List_mt[] = {\n    {\"__tostring\", luaV_list_tostring},\n    {\"__len\", luaV_list_len},\n    {\"__call\", luaV_list_call},\n    {\"__index\", luaV_list_index},\n    {\"__newindex\", luaV_list_newindex},\n    {\"add\", luaV_list_add},\n    {\"insert\", luaV_list_insert},\n    {NULL, NULL}\n};\n\n\n/* =======   Dict type   ======= */\n\n    static luaV_Dict *\nluaV_newdict (lua_State *L, dict_T *dic)\n{\n    luaV_Dict *d = (luaV_Dict *) lua_newuserdata(L, sizeof(luaV_Dict));\n    *d = dic;\n    dic->dv_refcount++; /* reference in Lua */\n    luaV_setudata(L, dic); /* cache[dic] = udata */\n    luaV_getfield(L, LUAVIM_DICT);\n    lua_setmetatable(L, -2);\n    return d;\n}\n\nluaV_pushtype(dict_T, dict, luaV_Dict)\nluaV_type_tostring(dict, LUAVIM_DICT)\n\n    static int\nluaV_dict_len (lua_State *L)\n{\n    dict_T *d = luaV_unbox(L, luaV_Dict, 1);\n    lua_pushinteger(L, (d == NULL) ? 0 : (int) d->dv_hashtab.ht_used);\n    return 1;\n}\n\n    static int\nluaV_dict_iter (lua_State *L UNUSED)\n{\n#ifdef FEAT_EVAL\n    hashitem_T *hi = (hashitem_T *) lua_touserdata(L, lua_upvalueindex(2));\n    int n = lua_tointeger(L, lua_upvalueindex(3));\n    dictitem_T *di;\n    if (n <= 0) return 0;\n    while (HASHITEM_EMPTY(hi)) hi++;\n    di = dict_lookup(hi);\n    lua_pushstring(L, (char *) hi->hi_key);\n    luaV_pushtypval(L, &di->di_tv);\n    lua_pushlightuserdata(L, (void *) (hi + 1));\n    lua_replace(L, lua_upvalueindex(2));\n    lua_pushinteger(L, n - 1);\n    lua_replace(L, lua_upvalueindex(3));\n    return 2;\n#else\n    return 0;\n#endif\n}\n\n    static int\nluaV_dict_call (lua_State *L)\n{\n    dict_T *d = luaV_unbox(L, luaV_Dict, 1);\n    hashtab_T *ht = &d->dv_hashtab;\n    lua_pushvalue(L, lua_upvalueindex(1)); /* pass cache table along */\n    lua_pushlightuserdata(L, (void *) ht->ht_array);\n    lua_pushinteger(L, ht->ht_used); /* # remaining items */\n    lua_pushcclosure(L, luaV_dict_iter, 3);\n    return 1;\n}\n\n    static int\nluaV_dict_index (lua_State *L)\n{\n    dict_T *d = luaV_unbox(L, luaV_Dict, 1);\n    char_u *key = (char_u *) luaL_checkstring(L, 2);\n    dictitem_T *di = dict_find(d, key, -1);\n    if (di == NULL)\n\tlua_pushnil(L);\n    else\n\tluaV_pushtypval(L, &di->di_tv);\n    return 1;\n}\n\n    static int\nluaV_dict_newindex (lua_State *L)\n{\n    dict_T *d = luaV_unbox(L, luaV_Dict, 1);\n    char_u *key = (char_u *) luaL_checkstring(L, 2);\n    dictitem_T *di;\n    if (d->dv_lock)\n\tluaL_error(L, \"dict is locked\");\n    di = dict_find(d, key, -1);\n    if (di == NULL) /* non-existing key? */\n    {\n\tif (lua_isnil(L, 3)) return 0;\n\tdi = dictitem_alloc(key);\n\tif (di == NULL) return 0;\n\tif (dict_add(d, di) == FAIL)\n\t{\n\t\tvim_free(di);\n\t\treturn 0;\n\t}\n    }\n    else\n\tclear_tv(&di->di_tv);\n    if (lua_isnil(L, 3)) /* remove? */\n    {\n\thashitem_T *hi = hash_find(&d->dv_hashtab, di->di_key);\n\thash_remove(&d->dv_hashtab, hi);\n\tdictitem_free(di);\n    }\n    else {\n\ttypval_T v;\n\tluaV_totypval(L, 3, &v);\n\tcopy_tv(&v, &di->di_tv);\n\tclear_tv(&v);\n    }\n    return 0;\n}\n\nstatic const luaL_Reg luaV_Dict_mt[] = {\n    {\"__tostring\", luaV_dict_tostring},\n    {\"__len\", luaV_dict_len},\n    {\"__call\", luaV_dict_call},\n    {\"__index\", luaV_dict_index},\n    {\"__newindex\", luaV_dict_newindex},\n    {NULL, NULL}\n};\n\n\n/* =======   Buffer type   ======= */\n\nluaV_newtype(buf_T, buffer, luaV_Buffer, LUAVIM_BUFFER)\nluaV_pushtype(buf_T, buffer, luaV_Buffer)\nluaV_type_tostring(buffer, LUAVIM_BUFFER)\n\n    static int\nluaV_buffer_len(lua_State *L)\n{\n    buf_T *b = (buf_T *) luaV_checkvalid(L, luaV_Buffer, 1);\n    lua_pushinteger(L, b->b_ml.ml_line_count);\n    return 1;\n}\n\n    static int\nluaV_buffer_call(lua_State *L)\n{\n    buf_T *b = (buf_T *) luaV_checkvalid(L, luaV_Buffer, 1);\n    lua_settop(L, 1);\n    set_curbuf(b, DOBUF_SPLIT);\n    return 1;\n}\n\n    static int\nluaV_buffer_index(lua_State *L)\n{\n    buf_T *b = (buf_T *) luaV_checkvalid(L, luaV_Buffer, 1);\n    linenr_T n = (linenr_T) lua_tointeger(L, 2);\n    if (n > 0 && n <= b->b_ml.ml_line_count)\n\tluaV_pushline(L, b, n);\n    else if (lua_isstring(L, 2))\n    {\n\tconst char *s = lua_tostring(L, 2);\n\tif (strncmp(s, \"name\", 4) == 0)\n\t    lua_pushstring(L, (char *) b->b_sfname);\n\telse if (strncmp(s, \"fname\", 5) == 0)\n\t    lua_pushstring(L, (char *) b->b_ffname);\n\telse if (strncmp(s, \"number\", 6) == 0)\n\t    lua_pushinteger(L, b->b_fnum);\n\t/* methods */\n\telse if (strncmp(s,   \"insert\", 6) == 0\n\t\t|| strncmp(s, \"next\", 4) == 0\n\t\t|| strncmp(s, \"previous\", 8) == 0\n\t\t|| strncmp(s, \"isvalid\", 7) == 0)\n\t{\n\t    lua_getmetatable(L, 1);\n\t    lua_getfield(L, -1, s);\n\t}\n\telse\n\t    lua_pushnil(L);\n    }\n    else\n\tlua_pushnil(L);\n    return 1;\n}\n\n    static int\nluaV_buffer_newindex(lua_State *L)\n{\n    buf_T *b = (buf_T *) luaV_checkvalid(L, luaV_Buffer, 1);\n    linenr_T n = (linenr_T) luaL_checkinteger(L, 2);\n#ifdef HAVE_SANDBOX\n    luaV_checksandbox(L);\n#endif\n    if (n < 1 || n > b->b_ml.ml_line_count)\n\tluaL_error(L, \"invalid line number\");\n    if (lua_isnil(L, 3)) /* delete line */\n    {\n\tbuf_T *buf = curbuf;\n\tcurbuf = b;\n\tif (u_savedel(n, 1L) == FAIL)\n\t{\n\t    curbuf = buf;\n\t    luaL_error(L, \"cannot save undo information\");\n\t}\n\telse if (ml_delete(n, FALSE) == FAIL)\n\t{\n\t    curbuf = buf;\n\t    luaL_error(L, \"cannot delete line\");\n\t}\n\telse {\n\t    deleted_lines_mark(n, 1L);\n\t    if (b == curwin->w_buffer) /* fix cursor in current window? */\n\t    {\n\t\tif (curwin->w_cursor.lnum >= n)\n\t\t{\n\t\t    if (curwin->w_cursor.lnum > n)\n\t\t    {\n\t\t\tcurwin->w_cursor.lnum -= 1;\n\t\t\tcheck_cursor_col();\n\t\t    }\n\t\t    else check_cursor();\n\t\t    changed_cline_bef_curs();\n\t\t}\n\t\tinvalidate_botline();\n\t    }\n\t}\n\tcurbuf = buf;\n    }\n    else if (lua_isstring(L, 3)) /* update line */\n    {\n\tbuf_T *buf = curbuf;\n\tcurbuf = b;\n\tif (u_savesub(n) == FAIL)\n\t{\n\t    curbuf = buf;\n\t    luaL_error(L, \"cannot save undo information\");\n\t}\n\telse if (ml_replace(n, luaV_toline(L, 3), TRUE) == FAIL)\n\t{\n\t    curbuf = buf;\n\t    luaL_error(L, \"cannot replace line\");\n\t}\n\telse changed_bytes(n, 0);\n\tcurbuf = buf;\n\tif (b == curwin->w_buffer)\n\t    check_cursor_col();\n    }\n    else\n\tluaL_error(L, \"wrong argument to change line\");\n    return 0;\n}\n\n    static int\nluaV_buffer_insert(lua_State *L)\n{\n    luaV_Buffer *lb = luaV_checkudata(L, 1, LUAVIM_BUFFER);\n    buf_T *b = (buf_T *) luaV_checkcache(L, (void *) *lb);\n    linenr_T last = b->b_ml.ml_line_count;\n    linenr_T n = (linenr_T) luaL_optinteger(L, 3, last);\n    buf_T *buf;\n    luaL_checktype(L, 2, LUA_TSTRING);\n#ifdef HAVE_SANDBOX\n    luaV_checksandbox(L);\n#endif\n    /* fix insertion line */\n    if (n < 0) n = 0;\n    if (n > last) n = last;\n    /* insert */\n    buf = curbuf;\n    curbuf = b;\n    if (u_save(n, n + 1) == FAIL)\n    {\n\tcurbuf = buf;\n\tluaL_error(L, \"cannot save undo information\");\n    }\n    else if (ml_append(n, luaV_toline(L, 2), 0, FALSE) == FAIL)\n    {\n\tcurbuf = buf;\n\tluaL_error(L, \"cannot insert line\");\n    }\n    else\n\tappended_lines_mark(n, 1L);\n    curbuf = buf;\n    update_screen(VALID);\n    return 0;\n}\n\n    static int\nluaV_buffer_next(lua_State *L)\n{\n    luaV_Buffer *b = luaV_checkudata(L, 1, LUAVIM_BUFFER);\n    buf_T *buf = (buf_T *) luaV_checkcache(L, (void *) *b);\n    luaV_pushbuffer(L, buf->b_next);\n    return 1;\n}\n\n    static int\nluaV_buffer_previous(lua_State *L)\n{\n    luaV_Buffer *b = luaV_checkudata(L, 1, LUAVIM_BUFFER);\n    buf_T *buf = (buf_T *) luaV_checkcache(L, (void *) *b);\n    luaV_pushbuffer(L, buf->b_prev);\n    return 1;\n}\n\n    static int\nluaV_buffer_isvalid(lua_State *L)\n{\n    luaV_Buffer *b = luaV_checkudata(L, 1, LUAVIM_BUFFER);\n    luaV_getudata(L, *b);\n    lua_pushboolean(L, !lua_isnil(L, -1));\n    return 1;\n}\n\nstatic const luaL_Reg luaV_Buffer_mt[] = {\n    {\"__tostring\", luaV_buffer_tostring},\n    {\"__len\", luaV_buffer_len},\n    {\"__call\", luaV_buffer_call},\n    {\"__index\", luaV_buffer_index},\n    {\"__newindex\", luaV_buffer_newindex},\n    {\"insert\", luaV_buffer_insert},\n    {\"next\", luaV_buffer_next},\n    {\"previous\", luaV_buffer_previous},\n    {\"isvalid\", luaV_buffer_isvalid},\n    {NULL, NULL}\n};\n\n\n/* =======   Window type   ======= */\n\nluaV_newtype(win_T, window, luaV_Window, LUAVIM_WINDOW)\nluaV_pushtype(win_T, window, luaV_Window)\nluaV_type_tostring(window, LUAVIM_WINDOW)\n\n    static int\nluaV_window_call(lua_State *L)\n{\n    win_T *w = (win_T *) luaV_checkvalid(L, luaV_Window, 1);\n    lua_settop(L, 1);\n    win_goto(w);\n    return 1;\n}\n\n    static int\nluaV_window_index(lua_State *L)\n{\n    win_T *w = (win_T *) luaV_checkvalid(L, luaV_Window, 1);\n    const char *s = luaL_checkstring(L, 2);\n    if (strncmp(s, \"buffer\", 6) == 0)\n\tluaV_pushbuffer(L, w->w_buffer);\n    else if (strncmp(s, \"line\", 4) == 0)\n\tlua_pushinteger(L, w->w_cursor.lnum);\n    else if (strncmp(s, \"col\", 3) == 0)\n\tlua_pushinteger(L, w->w_cursor.col + 1);\n#ifdef FEAT_WINDOWS\n    else if (strncmp(s, \"width\", 5) == 0)\n\tlua_pushinteger(L, W_WIDTH(w));\n#endif\n    else if (strncmp(s, \"height\", 6) == 0)\n\tlua_pushinteger(L, w->w_height);\n    /* methods */\n    else if (strncmp(s,   \"next\", 4) == 0\n\t    || strncmp(s, \"previous\", 8) == 0\n\t    || strncmp(s, \"isvalid\", 7) == 0)\n    {\n\tlua_getmetatable(L, 1);\n\tlua_getfield(L, -1, s);\n    }\n    else\n\tlua_pushnil(L);\n    return 1;\n}\n\n    static int\nluaV_window_newindex (lua_State *L)\n{\n    win_T *w = (win_T *) luaV_checkvalid(L, luaV_Window, 1);\n    const char *s = luaL_checkstring(L, 2);\n    int v = luaL_checkinteger(L, 3);\n    if (strncmp(s, \"line\", 4) == 0)\n    {\n#ifdef HAVE_SANDBOX\n\tluaV_checksandbox(L);\n#endif\n\tif (v < 1 || v > w->w_buffer->b_ml.ml_line_count)\n\t    luaL_error(L, \"line out of range\");\n\tw->w_cursor.lnum = v;\n\tupdate_screen(VALID);\n    }\n    else if (strncmp(s, \"col\", 3) == 0)\n    {\n#ifdef HAVE_SANDBOX\n\tluaV_checksandbox(L);\n#endif\n\tw->w_cursor.col = v - 1;\n\tupdate_screen(VALID);\n    }\n#ifdef FEAT_WINDOWS\n    else if (strncmp(s, \"width\", 5) == 0)\n    {\n\twin_T *win = curwin;\n#ifdef FEAT_GUI\n\tneed_mouse_correct = TRUE;\n#endif\n\tcurwin = w;\n\twin_setwidth(v);\n\tcurwin = win;\n    }\n#endif\n    else if (strncmp(s, \"height\", 6) == 0)\n    {\n\twin_T *win = curwin;\n#ifdef FEAT_GUI\n\tneed_mouse_correct = TRUE;\n#endif\n\tcurwin = w;\n\twin_setheight(v);\n\tcurwin = win;\n    }\n    else\n\tluaL_error(L, \"invalid window property: `%s'\", s);\n    return 0;\n}\n\n    static int\nluaV_window_next(lua_State *L)\n{\n    luaV_Window *w = luaV_checkudata(L, 1, LUAVIM_WINDOW);\n    win_T *win = (win_T *) luaV_checkcache(L, (void *) *w);\n    luaV_pushwindow(L, win->w_next);\n    return 1;\n}\n\n    static int\nluaV_window_previous(lua_State *L)\n{\n    luaV_Window *w = luaV_checkudata(L, 1, LUAVIM_WINDOW);\n    win_T *win = (win_T *) luaV_checkcache(L, (void *) *w);\n    luaV_pushwindow(L, win->w_prev);\n    return 1;\n}\n\n    static int\nluaV_window_isvalid(lua_State *L)\n{\n    luaV_Window *w = luaV_checkudata(L, 1, LUAVIM_WINDOW);\n    luaV_getudata(L, *w);\n    lua_pushboolean(L, !lua_isnil(L, -1));\n    return 1;\n}\n\nstatic const luaL_Reg luaV_Window_mt[] = {\n    {\"__tostring\", luaV_window_tostring},\n    {\"__call\", luaV_window_call},\n    {\"__index\", luaV_window_index},\n    {\"__newindex\", luaV_window_newindex},\n    {\"next\", luaV_window_next},\n    {\"previous\", luaV_window_previous},\n    {\"isvalid\", luaV_window_isvalid},\n    {NULL, NULL}\n};\n\n\n/* =======   Vim module   ======= */\n\n    static int\nluaV_print(lua_State *L)\n{\n    int i, n = lua_gettop(L); /* nargs */\n    const char *s;\n    size_t l;\n    luaL_Buffer b;\n    luaL_buffinit(L, &b);\n    lua_getglobal(L, \"tostring\");\n    for (i = 1; i <= n; i++)\n    {\n\tlua_pushvalue(L, -1); /* tostring */\n\tlua_pushvalue(L, i); /* arg */\n\tlua_call(L, 1, 1);\n\ts = lua_tolstring(L, -1, &l);\n\tif (s == NULL)\n\t    return luaL_error(L, \"cannot convert to string\");\n\tif (i > 1) luaL_addchar(&b, ' '); /* use space instead of tab */\n\tluaV_addlstring(&b, s, l, 0);\n\tlua_pop(L, 1);\n    }\n    luaL_pushresult(&b);\n    luaV_msg(L);\n    return 0;\n}\n\n    static int\nluaV_debug(lua_State *L)\n{\n    lua_settop(L, 0);\n    lua_getglobal(L, \"vim\");\n    lua_getfield(L, -1, \"eval\");\n    lua_remove(L, -2); /* vim.eval at position 1 */\n    for (;;)\n    {\n\tconst char *input;\n\tsize_t l;\n\tlua_pushvalue(L, 1); /* vim.eval */\n\tlua_pushliteral(L, \"input('lua_debug> ')\");\n\tlua_call(L, 1, 1); /* return string */\n\tinput = lua_tolstring(L, -1, &l);\n\tif (l == 0 || strcmp(input, \"cont\") == 0)\n\t    return 0;\n\tmsg_putchar('\\n'); /* avoid outputting on input line */\n\tif (luaL_loadbuffer(L, input, l, \"=(debug command)\")\n\t\t|| lua_pcall(L, 0, 0, 0))\n\t    luaV_emsg(L);\n\tlua_settop(L, 1); /* remove eventual returns, but keep vim.eval */\n    }\n}\n\n    static int\nluaV_command(lua_State *L)\n{\n    do_cmdline_cmd((char_u *) luaL_checkstring(L, 1));\n    update_screen(VALID);\n    return 0;\n}\n\n    static int\nluaV_eval(lua_State *L)\n{\n    typval_T *tv = eval_expr((char_u *) luaL_checkstring(L, 1), NULL);\n    if (tv == NULL) luaL_error(L, \"invalid expression\");\n    luaV_pushtypval(L, tv);\n    free_tv(tv);\n    return 1;\n}\n\n    static int\nluaV_beep(lua_State *L UNUSED)\n{\n    vim_beep(BO_LANG);\n    return 0;\n}\n\n    static int\nluaV_line(lua_State *L)\n{\n    luaV_pushline(L, curbuf, curwin->w_cursor.lnum);\n    return 1;\n}\n\n    static int\nluaV_list(lua_State *L)\n{\n    list_T *l = list_alloc();\n    if (l == NULL)\n\tlua_pushnil(L);\n    else\n\tluaV_newlist(L, l);\n    return 1;\n}\n\n    static int\nluaV_dict(lua_State *L)\n{\n    dict_T *d = dict_alloc();\n    if (d == NULL)\n\tlua_pushnil(L);\n    else\n\tluaV_newdict(L, d);\n    return 1;\n}\n\n    static int\nluaV_buffer(lua_State *L)\n{\n    buf_T *buf;\n    if (lua_isstring(L, 1)) /* get by number or name? */\n    {\n\tif (lua_isnumber(L, 1)) /* by number? */\n\t{\n\t    int n = lua_tointeger(L, 1);\n\t    FOR_ALL_BUFFERS(buf)\n\t\tif (buf->b_fnum == n) break;\n\t}\n\telse { /* by name */\n\t    size_t l;\n\t    const char *s = lua_tolstring(L, 1, &l);\n\t    FOR_ALL_BUFFERS(buf)\n\t    {\n\t\tif (buf->b_ffname == NULL || buf->b_sfname == NULL)\n\t\t{\n\t\t    if (l == 0) break;\n\t\t}\n\t\telse if (strncmp(s, (char *)buf->b_ffname, l) == 0\n\t\t\t|| strncmp(s, (char *)buf->b_sfname, l) == 0)\n\t\t    break;\n\t    }\n\t}\n    }\n    else\n\tbuf = (lua_toboolean(L, 1)) ? firstbuf : curbuf; /* first buffer? */\n    luaV_pushbuffer(L, buf);\n    return 1;\n}\n\n    static int\nluaV_window(lua_State *L)\n{\n    win_T *win;\n    if (lua_isnumber(L, 1)) /* get by number? */\n    {\n\tint n = lua_tointeger(L, 1);\n\tfor (win = firstwin; win != NULL; win = win->w_next, n--)\n\t    if (n == 1) break;\n    }\n    else\n\twin = (lua_toboolean(L, 1)) ? firstwin : curwin; /* first window? */\n    luaV_pushwindow(L, win);\n    return 1;\n}\n\n    static int\nluaV_open(lua_State *L)\n{\n    char_u *s = NULL;\n#ifdef HAVE_SANDBOX\n    luaV_checksandbox(L);\n#endif\n    if (lua_isstring(L, 1)) s = (char_u *) lua_tostring(L, 1);\n    luaV_pushbuffer(L, buflist_new(s, NULL, 1L, BLN_LISTED));\n    return 1;\n}\n\n    static int\nluaV_type(lua_State *L)\n{\n    luaL_checkany(L, 1);\n    if (lua_type(L, 1) == LUA_TUSERDATA) /* check vim udata? */\n    {\n\tlua_settop(L, 1);\n\tif (lua_getmetatable(L, 1))\n\t{\n\t    luaV_getfield(L, LUAVIM_LIST);\n\t    if (lua_rawequal(L, -1, 2))\n\t    {\n\t\tlua_pushstring(L, \"list\");\n\t\treturn 1;\n\t    }\n\t    luaV_getfield(L, LUAVIM_DICT);\n\t    if (lua_rawequal(L, -1, 2))\n\t    {\n\t\tlua_pushstring(L, \"dict\");\n\t\treturn 1;\n\t    }\n\t    luaV_getfield(L, LUAVIM_BUFFER);\n\t    if (lua_rawequal(L, -1, 2))\n\t    {\n\t\tlua_pushstring(L, \"buffer\");\n\t\treturn 1;\n\t    }\n\t    luaV_getfield(L, LUAVIM_WINDOW);\n\t    if (lua_rawequal(L, -1, 2))\n\t    {\n\t\tlua_pushstring(L, \"window\");\n\t\treturn 1;\n\t    }\n\t}\n    }\n    lua_pushstring(L, luaL_typename(L, 1)); /* fallback */\n    return 1;\n}\n\nstatic const luaL_Reg luaV_module[] = {\n    {\"command\", luaV_command},\n    {\"eval\", luaV_eval},\n    {\"beep\", luaV_beep},\n    {\"line\", luaV_line},\n    {\"list\", luaV_list},\n    {\"dict\", luaV_dict},\n    {\"buffer\", luaV_buffer},\n    {\"window\", luaV_window},\n    {\"open\", luaV_open},\n    {\"type\", luaV_type},\n    {NULL, NULL}\n};\n\n/* for freeing list, dict, buffer and window objects; lightuserdata as arg */\n    static int\nluaV_free(lua_State *L)\n{\n    lua_pushnil(L);\n    luaV_setudata(L, lua_touserdata(L, 1));\n    return 0;\n}\n\n    static int\nluaV_luaeval (lua_State *L)\n{\n    luaL_Buffer b;\n    size_t l;\n    const char *str = lua_tolstring(L, 1, &l);\n    typval_T *arg = (typval_T *) lua_touserdata(L, 2);\n    typval_T *rettv = (typval_T *) lua_touserdata(L, 3);\n    luaL_buffinit(L, &b);\n    luaL_addlstring(&b, LUAVIM_EVALHEADER, sizeof(LUAVIM_EVALHEADER) - 1);\n    luaL_addlstring(&b, str, l);\n    luaL_pushresult(&b);\n    str = lua_tolstring(L, -1, &l);\n    if (luaL_loadbuffer(L, str, l, LUAVIM_EVALNAME)) /* compile error? */\n    {\n\tluaV_emsg(L);\n\treturn 0;\n    }\n    luaV_pushtypval(L, arg);\n    if (lua_pcall(L, 1, 1, 0)) /* running error? */\n    {\n\tluaV_emsg(L);\n\treturn 0;\n    }\n    luaV_totypval(L, -1, rettv);\n    return 0;\n}\n\n    static int\nluaV_setref (lua_State *L)\n{\n    int\t\tcopyID = lua_tointeger(L, 1);\n    int\t\tabort = FALSE;\n    typval_T\ttv;\n\n    luaV_getfield(L, LUAVIM_LIST);\n    luaV_getfield(L, LUAVIM_DICT);\n    lua_pushnil(L);\n    /* traverse cache table */\n    while (!abort && lua_next(L, lua_upvalueindex(1)) != 0)\n    {\n\tlua_getmetatable(L, -1);\n\tif (lua_rawequal(L, -1, 2)) /* list? */\n\t{\n\t    tv.v_type = VAR_LIST;\n\t    tv.vval.v_list = (list_T *) lua_touserdata(L, 4); /* key */\n\t    abort = set_ref_in_item(&tv, copyID, NULL, NULL);\n\t}\n\telse if (lua_rawequal(L, -1, 3)) /* dict? */\n\t{\n\t    tv.v_type = VAR_DICT;\n\t    tv.vval.v_dict = (dict_T *) lua_touserdata(L, 4); /* key */\n\t    abort = set_ref_in_item(&tv, copyID, NULL, NULL);\n\t}\n\tlua_pop(L, 2); /* metatable and value */\n    }\n    lua_pushinteger(L, abort);\n    return 1;\n}\n\n    static int\nluaopen_vim(lua_State *L)\n{\n    /* set cache table */\n    lua_newtable(L);\n    lua_newtable(L);\n    lua_pushstring(L, \"v\");\n    lua_setfield(L, -2, \"__mode\");\n    lua_setmetatable(L, -2); /* cache is weak-valued */\n    /* print */\n    lua_pushcfunction(L, luaV_print);\n    lua_setglobal(L, \"print\");\n    /* debug.debug */\n    lua_getglobal(L, \"debug\");\n    lua_pushcfunction(L, luaV_debug);\n    lua_setfield(L, -2, \"debug\");\n    lua_pop(L, 1);\n    /* free */\n    lua_pushlightuserdata(L, (void *) LUAVIM_FREE);\n    lua_pushvalue(L, 1); /* cache table */\n    lua_pushcclosure(L, luaV_free, 1);\n    lua_rawset(L, LUA_REGISTRYINDEX);\n    /* luaeval */\n    lua_pushlightuserdata(L, (void *) LUAVIM_LUAEVAL);\n    lua_pushvalue(L, 1); /* cache table */\n    lua_pushcclosure(L, luaV_luaeval, 1);\n    lua_rawset(L, LUA_REGISTRYINDEX);\n    /* setref */\n    lua_pushlightuserdata(L, (void *) LUAVIM_SETREF);\n    lua_pushvalue(L, 1); /* cache table */\n    lua_pushcclosure(L, luaV_setref, 1);\n    lua_rawset(L, LUA_REGISTRYINDEX);\n    /* register */\n    luaV_newmetatable(L, LUAVIM_LIST);\n    lua_pushvalue(L, 1);\n    luaV_openlib(L, luaV_List_mt, 1);\n    luaV_newmetatable(L, LUAVIM_DICT);\n    lua_pushvalue(L, 1);\n    luaV_openlib(L, luaV_Dict_mt, 1);\n    luaV_newmetatable(L, LUAVIM_BUFFER);\n    lua_pushvalue(L, 1); /* cache table */\n    luaV_openlib(L, luaV_Buffer_mt, 1);\n    luaV_newmetatable(L, LUAVIM_WINDOW);\n    lua_pushvalue(L, 1); /* cache table */\n    luaV_openlib(L, luaV_Window_mt, 1);\n    lua_newtable(L); /* vim table */\n    lua_pushvalue(L, 1); /* cache table */\n    luaV_openlib(L, luaV_module, 1);\n    lua_setglobal(L, LUAVIM_NAME);\n    return 0;\n}\n\n    static lua_State *\nluaV_newstate(void)\n{\n    lua_State *L = luaL_newstate();\n    luaL_openlibs(L); /* core libs */\n    lua_pushcfunction(L, luaopen_vim); /* vim */\n    lua_call(L, 0, 0);\n    return L;\n}\n\n    static void\nluaV_setrange(lua_State *L, int line1, int line2)\n{\n    lua_getglobal(L, LUAVIM_NAME);\n    lua_pushinteger(L, line1);\n    lua_setfield(L, -2, \"firstline\");\n    lua_pushinteger(L, line2);\n    lua_setfield(L, -2, \"lastline\");\n    lua_pop(L, 1); /* vim table */\n}\n\n\n/* =======   Interface   ======= */\n\nstatic lua_State *L = NULL;\n\n    static int\nlua_isopen(void)\n{\n    return L != NULL;\n}\n\n    static int\nlua_init(void)\n{\n    if (!lua_isopen())\n    {\n#ifdef DYNAMIC_LUA\n\tif (!lua_enabled(TRUE))\n\t{\n\t    EMSG(_(\"Lua library cannot be loaded.\"));\n\t    return FAIL;\n\t}\n#endif\n\tL = luaV_newstate();\n    }\n    return OK;\n}\n\n    void\nlua_end(void)\n{\n    if (lua_isopen())\n    {\n\tlua_close(L);\n\tL = NULL;\n#ifdef DYNAMIC_LUA\n\tend_dynamic_lua();\n#endif\n    }\n}\n\n/* ex commands */\n    void\nex_lua(exarg_T *eap)\n{\n    char *script;\n    if (lua_init() == FAIL) return;\n    script = (char *) script_get(eap, eap->arg);\n    if (!eap->skip)\n    {\n\tchar *s = (script) ? script :  (char *) eap->arg;\n\tluaV_setrange(L, eap->line1, eap->line2);\n\tif (luaL_loadbuffer(L, s, strlen(s), LUAVIM_CHUNKNAME)\n\t\t|| lua_pcall(L, 0, 0, 0))\n\t    luaV_emsg(L);\n    }\n    if (script != NULL) vim_free(script);\n}\n\n    void\nex_luado(exarg_T *eap)\n{\n    linenr_T l;\n    const char *s = (const char *) eap->arg;\n    luaL_Buffer b;\n    size_t len;\n    if (lua_init() == FAIL) return;\n    if (u_save(eap->line1 - 1, eap->line2 + 1) == FAIL)\n    {\n\tEMSG(_(\"cannot save undo information\"));\n\treturn;\n    }\n    luaV_setrange(L, eap->line1, eap->line2);\n    luaL_buffinit(L, &b);\n    luaL_addlstring(&b, \"return function(line, linenr) \", 30); /* header */\n    luaL_addlstring(&b, s, strlen(s));\n    luaL_addlstring(&b, \" end\", 4); /* footer */\n    luaL_pushresult(&b);\n    s = lua_tolstring(L, -1, &len);\n    if (luaL_loadbuffer(L, s, len, LUAVIM_CHUNKNAME))\n    {\n\tluaV_emsg(L);\n\tlua_pop(L, 1); /* function body */\n\treturn;\n    }\n    lua_call(L, 0, 1);\n    lua_replace(L, -2); /* function -> body */\n    for (l = eap->line1; l <= eap->line2; l++)\n    {\n\tlua_pushvalue(L, -1); /* function */\n\tluaV_pushline(L, curbuf, l); /* current line as arg */\n\tlua_pushinteger(L, l); /* current line number as arg */\n\tif (lua_pcall(L, 2, 1, 0))\n\t{\n\t    luaV_emsg(L);\n\t    break;\n\t}\n\tif (lua_isstring(L, -1)) /* update line? */\n\t{\n#ifdef HAVE_SANDBOX\n\t    luaV_checksandbox(L);\n#endif\n\t    ml_replace(l, luaV_toline(L, -1), TRUE);\n\t    changed_bytes(l, 0);\n\t    lua_pop(L, 1); /* result from luaV_toline */\n\t}\n\tlua_pop(L, 1); /* line */\n    }\n    lua_pop(L, 1); /* function */\n    check_cursor();\n    update_screen(NOT_VALID);\n}\n\n    void\nex_luafile(exarg_T *eap)\n{\n    if (lua_init() == FAIL)\n\treturn;\n    if (!eap->skip)\n    {\n\tluaV_setrange(L, eap->line1, eap->line2);\n\tif (luaL_loadfile(L, (char *) eap->arg) || lua_pcall(L, 0, 0, 0))\n\t    luaV_emsg(L);\n    }\n}\n\n#define luaV_freetype(typ,tname) \\\n\tvoid \\\n    lua_##tname##_free(typ *o) \\\n    { \\\n\tif (!lua_isopen()) return; \\\n\tluaV_getfield(L, LUAVIM_FREE); \\\n\tlua_pushlightuserdata(L, (void *) o); \\\n\tlua_call(L, 1, 0); \\\n    }\n\nluaV_freetype(buf_T, buffer)\nluaV_freetype(win_T, window)\n\n    void\ndo_luaeval (char_u *str, typval_T *arg, typval_T *rettv)\n{\n    lua_init();\n    luaV_getfield(L, LUAVIM_LUAEVAL);\n    lua_pushstring(L, (char *) str);\n    lua_pushlightuserdata(L, (void *) arg);\n    lua_pushlightuserdata(L, (void *) rettv);\n    lua_call(L, 3, 0);\n}\n\n    int\nset_ref_in_lua (int copyID)\n{\n    int aborted = 0;\n\n    if (lua_isopen())\n    {\n\tluaV_getfield(L, LUAVIM_SETREF);\n\t/* call the function with 1 arg, getting 1 result back */\n\tlua_pushinteger(L, copyID);\n\tlua_call(L, 1, 1);\n\t/* get the result */\n\taborted = lua_tointeger(L, -1);\n\t/* pop result off the stack */\n\tlua_pop(L, 1);\n    }\n    return aborted;\n}\n\n#endif\n",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/src/configure.in": "dnl configure.in: autoconf script for Vim\n\ndnl Process this file with autoconf 2.12 or 2.13 to produce \"configure\".\ndnl Should also work with autoconf 2.54 and later.\n\nAC_INIT(vim.h)\nAC_CONFIG_HEADER(auto/config.h:config.h.in)\n\ndnl Being able to run configure means the system is Unix (compatible).\nAC_DEFINE(UNIX)\nAC_PROG_MAKE_SET\n\ndnl Checks for programs.\nAC_PROG_CC\tdnl required by almost everything\nAC_PROG_CPP\tdnl required by header file checks\nAC_PROGRAM_EGREP dnl required by AC_EGREP_CPP\nAC_PROG_FGREP\tdnl finds working grep -F\nAC_ISC_POSIX\tdnl required by AC_C_CROSS\nAC_PROG_AWK\tdnl required for \"make html\" in ../doc\n\ndnl Don't strip if we don't have it\nAC_CHECK_PROG(STRIP, strip, strip, :)\n\ndnl Check for extension of executables\nAC_EXEEXT\n\ndnl Check for standard headers.  We don't use this in Vim but other stuff\ndnl in autoconf needs it, where it uses STDC_HEADERS.\nAC_HEADER_STDC\nAC_HEADER_SYS_WAIT\n\ndnl Check for the flag that fails if stuff are missing.\n\nAC_MSG_CHECKING(--enable-fail-if-missing argument)\nAC_ARG_ENABLE(fail_if_missing,\n\t[  --enable-fail-if-missing    Fail if dependencies on additional features\n     specified on the command line are missing.], \n\t[fail_if_missing=\"yes\"],\n\t[fail_if_missing=\"no\"])\nAC_MSG_RESULT($fail_if_missing)\n\ndnl Set default value for CFLAGS if none is defined or it's empty\nif test -z \"$CFLAGS\"; then\n  CFLAGS=\"-O\"\n  test \"$GCC\" = yes && CFLAGS=\"-O2 -fno-strength-reduce -Wall\"\nfi\nif test \"$GCC\" = yes; then\n  dnl method that should work for nearly all versions\n  gccversion=`$CC -dumpversion`\n  if test \"x$gccversion\" = \"x\"; then\n    dnl old method; fall-back for when -dumpversion doesn't work\n    gccversion=`$CC --version | sed -e '2,$d' -e 's/darwin.//' -e 's/^[[^0-9]]*\\([[0-9]]\\.[[0-9.]]*\\).*$/\\1/g'`\n  fi\n  dnl version 4.0.1 was reported to cause trouble on Macintosh by Marcin Dalecki\n  if test \"$gccversion\" = \"3.0.1\" -o \"$gccversion\" = \"3.0.2\" -o \"$gccversion\" = \"4.0.1\"; then\n    echo 'GCC [[34]].0.[[12]] has a bug in the optimizer, disabling \"-O#\"'\n    CFLAGS=`echo \"$CFLAGS\" | sed 's/-O[[23456789]]/-O/'`\n  else\n    if test \"$gccversion\" = \"3.1\" -o \"$gccversion\" = \"3.2\" -o \"$gccversion\" = \"3.2.1\" && `echo \"$CFLAGS\" | grep -v fno-strength-reduce >/dev/null`; then\n      echo 'GCC 3.1 and 3.2 have a bug in the optimizer, adding \"-fno-strength-reduce\"'\n      CFLAGS=\"$CFLAGS -fno-strength-reduce\"\n    fi\n  fi\nfi\n\ndnl clang-500.2.75 or around has abandoned -f[no-]strength-reduce and issues a\ndnl warning when that flag is passed to.  Accordingly, adjust CFLAGS based on\ndnl the version number of the clang in use.\ndnl Note that this does not work to get the version of clang 3.1 or 3.2.\nAC_MSG_CHECKING(for recent clang version)\nCLANG_VERSION_STRING=`$CC --version 2>/dev/null | sed  -n -e 's/^.*clang.*\\([[0-9]][[0-9]]*\\.[[0-9]][[0-9]]*\\.[[0-9]][[0-9]]*\\).*$/\\1/p'`\nif test x\"$CLANG_VERSION_STRING\" != x\"\" ; then\n  CLANG_MAJOR=`echo \"$CLANG_VERSION_STRING\" | sed -n -e 's/\\([[0-9]][[0-9]]*\\)\\.[[0-9]][[0-9]]*\\.[[0-9]][[0-9]]*/\\1/p'`\n  CLANG_MINOR=`echo \"$CLANG_VERSION_STRING\" | sed -n -e 's/[[0-9]][[0-9]]*\\.\\([[0-9]][[0-9]]*\\)\\.[[0-9]][[0-9]]*/\\1/p'`\n  CLANG_REVISION=`echo \"$CLANG_VERSION_STRING\" | sed -n -e 's/[[0-9]][[0-9]]*\\.[[0-9]][[0-9]]*\\.\\([[0-9]][[0-9]]*\\)/\\1/p'`\n  CLANG_VERSION=`expr $CLANG_MAJOR '*' 1000000 '+' $CLANG_MINOR '*' 1000 '+' $CLANG_REVISION`\n  AC_MSG_RESULT($CLANG_VERSION)\n  dnl If you find the same issue with versions earlier than 500.2.75,\n  dnl change the constant 500002075 below appropriately.  To get the\n  dnl integer corresponding to a version number, refer to the\n  dnl definition of CLANG_VERSION above.\n  if test \"$CLANG_VERSION\" -ge 500002075 ; then\n    CFLAGS=`echo \"$CFLAGS\" | sed -n -e 's/-fno-strength-reduce/ /p'`\n  fi\nelse\n  AC_MSG_RESULT(no)\nfi\n\ndnl If configure thinks we are cross compiling, there might be something\ndnl wrong with the CC or CFLAGS settings, give a useful warning message\nCROSS_COMPILING=\nif test \"$cross_compiling\" = yes; then\n  AC_MSG_RESULT([cannot compile a simple program; if not cross compiling check CC and CFLAGS])\n  CROSS_COMPILING=1\nfi\nAC_SUBST(CROSS_COMPILING)\n\ndnl gcc-cpp has the wonderful -MM option to produce nicer dependencies.\ndnl But gcc 3.1 changed the meaning!  See near the end.\ntest \"$GCC\" = yes && CPP_MM=M; AC_SUBST(CPP_MM)\n\nif test -f ./toolcheck; then\n  AC_CHECKING(for buggy tools)\n  sh ./toolcheck 1>&AC_FD_MSG\nfi\n\nOS_EXTRA_SRC=\"\"; OS_EXTRA_OBJ=\"\"\n\ndnl Check for BeOS, which needs an extra source file\nAC_MSG_CHECKING(for BeOS)\ncase `uname` in\n    BeOS)\tOS_EXTRA_SRC=os_beos.c; OS_EXTRA_OBJ=objects/os_beos.o\n\t\tBEOS=yes; AC_MSG_RESULT(yes);;\n    *)\t\tBEOS=no; AC_MSG_RESULT(no);;\nesac\n\ndnl If QNX is found, assume we don't want to use Xphoton\ndnl unless it was specifically asked for (--with-x)\nAC_MSG_CHECKING(for QNX)\ncase `uname` in\n    QNX)\tOS_EXTRA_SRC=os_qnx.c; OS_EXTRA_OBJ=objects/os_qnx.o\n\t\ttest -z \"$with_x\" && with_x=no\n\t\tQNX=yes; AC_MSG_RESULT(yes);;\n    *)\t\tQNX=no; AC_MSG_RESULT(no);;\nesac\n\ndnl Check for Darwin and MacOS X\ndnl We do a check for MacOS X in the very beginning because there\ndnl are a lot of other things we need to change besides GUI stuff\nAC_MSG_CHECKING([for Darwin (Mac OS X)])\nif test \"`(uname) 2>/dev/null`\" = Darwin; then\n  AC_MSG_RESULT(yes)\n\n  AC_MSG_CHECKING(--disable-darwin argument)\n  AC_ARG_ENABLE(darwin,\n\t  [  --disable-darwin        Disable Darwin (Mac OS X) support.],\n\t  , [enable_darwin=\"yes\"])\n  if test \"$enable_darwin\" = \"yes\"; then\n    AC_MSG_RESULT(no)\n    AC_MSG_CHECKING(if Darwin files are there)\n    if test -f os_macosx.m; then\n      AC_MSG_RESULT(yes)\n    else\n      AC_MSG_RESULT([no, Darwin support disabled])\n      enable_darwin=no\n    fi\n  else\n    AC_MSG_RESULT([yes, Darwin support excluded])\n  fi\n\n  AC_MSG_CHECKING(--with-mac-arch argument)\n  AC_ARG_WITH(mac-arch, [  --with-mac-arch=ARCH    current, intel, ppc or both],\n\tMACARCH=\"$withval\"; AC_MSG_RESULT($MACARCH),\n\tMACARCH=\"current\"; AC_MSG_RESULT(defaulting to $MACARCH))\n\n  AC_MSG_CHECKING(--with-developer-dir argument)\n  AC_ARG_WITH(developer-dir, [  --with-developer-dir=PATH    use PATH as location for Xcode developer tools],\n\tDEVELOPER_DIR=\"$withval\"; AC_MSG_RESULT($DEVELOPER_DIR),\n        AC_MSG_RESULT(not present))\n  \n  if test \"x$DEVELOPER_DIR\" = \"x\"; then\n    AC_PATH_PROG(XCODE_SELECT, xcode-select)\n    if test \"x$XCODE_SELECT\" != \"x\"; then\n      AC_MSG_CHECKING(for developer dir using xcode-select)\n      DEVELOPER_DIR=`$XCODE_SELECT -print-path`\n      AC_MSG_RESULT([$DEVELOPER_DIR])\n    else\n      DEVELOPER_DIR=/Developer\n    fi\n  fi\n\n  if test \"x$MACARCH\" = \"xboth\"; then\n    AC_MSG_CHECKING(for 10.4 universal SDK)\n    dnl There is a terrible inconsistency (but we appear to get away with it):\n    dnl $CFLAGS uses the 10.4u SDK library for the headers, while $CPPFLAGS\n    dnl doesn't, because \"gcc -E\" doesn't grok it.  That means the configure\n    dnl tests using the preprocessor are actually done with the wrong header\n    dnl files. $LDFLAGS is set at the end, because configure uses it together\n    dnl with $CFLAGS and we can only have one -sysroot argument.\n    save_cppflags=\"$CPPFLAGS\"\n    save_cflags=\"$CFLAGS\"\n    save_ldflags=\"$LDFLAGS\"\n    CFLAGS=\"$CFLAGS -isysroot $DEVELOPER_DIR/SDKs/MacOSX10.4u.sdk -arch i386 -arch ppc\"\n    AC_TRY_LINK([ ], [ ],\n\tAC_MSG_RESULT(found, will make universal binary),\n\n\tAC_MSG_RESULT(not found)\n\tCFLAGS=\"$save_cflags\"\n\tAC_MSG_CHECKING(if Intel architecture is supported)\n\tCPPFLAGS=\"$CPPFLAGS -arch i386\"\n\tLDFLAGS=\"$save_ldflags -arch i386\"\n\tAC_TRY_LINK([ ], [ ],\n\t    AC_MSG_RESULT(yes); MACARCH=\"intel\",\n\t    AC_MSG_RESULT(no, using PowerPC)\n\t\tMACARCH=\"ppc\"\n\t\tCPPFLAGS=\"$save_cppflags -arch ppc\"\n\t\tLDFLAGS=\"$save_ldflags -arch ppc\"))\n  elif test \"x$MACARCH\" = \"xintel\"; then\n    CPPFLAGS=\"$CPPFLAGS -arch intel\"\n    LDFLAGS=\"$LDFLAGS -arch intel\"\n  elif test \"x$MACARCH\" = \"xppc\"; then\n    CPPFLAGS=\"$CPPFLAGS -arch ppc\"\n    LDFLAGS=\"$LDFLAGS -arch ppc\"\n  fi\n\n  if test \"$enable_darwin\" = \"yes\"; then\n    MACOSX=yes\n    OS_EXTRA_SRC=\"os_macosx.m os_mac_conv.c\";\n    OS_EXTRA_OBJ=\"objects/os_macosx.o objects/os_mac_conv.o\"\n    dnl TODO: use -arch i386 on Intel machines\n    dnl Removed -no-cpp-precomp, only for very old compilers.\n    CPPFLAGS=\"$CPPFLAGS -DMACOS_X_UNIX\"\n\n    dnl If Carbon is found, assume we don't want X11\n    dnl unless it was specifically asked for (--with-x)\n    dnl or Motif, Athena or GTK GUI is used.\n    AC_CHECK_HEADER(Carbon/Carbon.h, CARBON=yes)\n    if test \"x$CARBON\" = \"xyes\"; then\n      if test -z \"$with_x\" -a \"X$enable_gui\" != Xmotif -a \"X$enable_gui\" != Xathena -a \"X$enable_gui\" != Xgtk2 -a \"X$enable_gui\" != Xgtk3; then\n\twith_x=no\n      fi\n    fi\n  fi\n\n  dnl Avoid a bug with -O2 with gcc 4.0.1.  Symptom: malloc() reports double\n  dnl free.  This happens in expand_filename(), because the optimizer swaps\n  dnl two blocks of code, both using \"repl\", that can't be swapped.\n  if test \"$MACARCH\" = \"intel\" -o \"$MACARCH\" = \"both\"; then\n    CFLAGS=`echo \"$CFLAGS\" | sed 's/-O[[23456789]]/-Oz/'`\n  fi\n\nelse\n  AC_MSG_RESULT(no)\nfi\n\ndnl Mac OS X 10.9+ no longer include AvailabilityMacros.h in Carbon\ndnl so we need to include it to have access to version macros.\nAC_CHECK_HEADERS(AvailabilityMacros.h)\n\nAC_SUBST(OS_EXTRA_SRC)\nAC_SUBST(OS_EXTRA_OBJ)\n\ndnl Add /usr/local/lib to $LDFLAGS and /usr/local/include to CFLAGS.\ndnl Only when the directory exists and it wasn't there yet.\ndnl For gcc don't do this when it is already in the default search path.\ndnl Skip all of this when cross-compiling.\nif test \"$cross_compiling\" = no; then\n  AC_MSG_CHECKING(--with-local-dir argument)\n  have_local_include=''\n  have_local_lib=''\n  AC_ARG_WITH([local-dir], [  --with-local-dir=PATH   search PATH instead of /usr/local for local libraries.\n  --without-local-dir     do not search /usr/local for local libraries.], [\n    local_dir=\"$withval\"\n    case \"$withval\" in\n    */*) ;;\n    no)\n      # avoid adding local dir to LDFLAGS and CPPFLAGS\n      have_local_include=yes\n      have_local_lib=yes\n      ;;\n    *) AC_MSG_ERROR(must pass path argument to --with-local-dir) ;;\n    esac\n\tAC_MSG_RESULT($local_dir)\n  ], [\n    local_dir=/usr/local\n    AC_MSG_RESULT(Defaulting to $local_dir)\n  ])\n  if test \"$GCC\" = yes -a \"$local_dir\" != no; then\n    echo 'void f(){}' > conftest.c\n    dnl Removed -no-cpp-precomp, only needed for OS X 10.2 (Ben Fowler)\n    have_local_include=`${CC-cc} -c -v conftest.c 2>&1 | grep \"${local_dir}/include\"`\n    have_local_lib=`${CC-cc} -c -v conftest.c 2>&1 | grep \"${local_dir}/lib\"`\n    rm -f conftest.c conftest.o\n  fi\n  if test -z \"$have_local_lib\" -a -d \"${local_dir}/lib\"; then\n    tt=`echo \"$LDFLAGS\" | sed -e \"s+-L${local_dir}/lib ++g\" -e \"s+-L${local_dir}/lib$++g\"`\n    if test \"$tt\" = \"$LDFLAGS\"; then\n      LDFLAGS=\"$LDFLAGS -L${local_dir}/lib\"\n    fi\n  fi\n  if test -z \"$have_local_include\" -a -d \"${local_dir}/include\"; then\n    tt=`echo \"$CPPFLAGS\" | sed -e \"s+-I${local_dir}/include ++g\" -e \"s+-I${local_dir}/include$++g\"`\n    if test \"$tt\" = \"$CPPFLAGS\"; then\n      CPPFLAGS=\"$CPPFLAGS -I${local_dir}/include\"\n    fi\n  fi\nfi\n\nAC_MSG_CHECKING(--with-vim-name argument)\nAC_ARG_WITH(vim-name, [  --with-vim-name=NAME    what to call the Vim executable],\n\tVIMNAME=\"$withval\"; AC_MSG_RESULT($VIMNAME),\n\tVIMNAME=\"vim\"; AC_MSG_RESULT(Defaulting to $VIMNAME))\nAC_SUBST(VIMNAME)\nAC_MSG_CHECKING(--with-ex-name argument)\nAC_ARG_WITH(ex-name, [  --with-ex-name=NAME     what to call the Ex executable],\n\tEXNAME=\"$withval\"; AC_MSG_RESULT($EXNAME),\n\tEXNAME=\"ex\"; AC_MSG_RESULT(Defaulting to ex))\nAC_SUBST(EXNAME)\nAC_MSG_CHECKING(--with-view-name argument)\nAC_ARG_WITH(view-name, [  --with-view-name=NAME   what to call the View executable],\n\tVIEWNAME=\"$withval\"; AC_MSG_RESULT($VIEWNAME),\n\tVIEWNAME=\"view\"; AC_MSG_RESULT(Defaulting to view))\nAC_SUBST(VIEWNAME)\n\nAC_MSG_CHECKING(--with-global-runtime argument)\nAC_ARG_WITH(global-runtime, [  --with-global-runtime=DIR    global runtime directory in 'runtimepath'],\n\tAC_MSG_RESULT($withval); AC_DEFINE_UNQUOTED(RUNTIME_GLOBAL, \"$withval\"),\n\tAC_MSG_RESULT(no))\n\nAC_MSG_CHECKING(--with-modified-by argument)\nAC_ARG_WITH(modified-by, [  --with-modified-by=NAME       name of who modified a release version],\n\tAC_MSG_RESULT($withval); AC_DEFINE_UNQUOTED(MODIFIED_BY, \"$withval\"),\n\tAC_MSG_RESULT(no))\n\ndnl Check for EBCDIC stolen from the LYNX port to z/OS Unix\nAC_MSG_CHECKING(if character set is EBCDIC)\nAC_TRY_COMPILE([ ],\n[ /* TryCompile function for CharSet.\n   Treat any failure as ASCII for compatibility with existing art.\n   Use compile-time rather than run-time tests for cross-compiler\n   tolerance.  */\n#if '0'!=240\nmake an error \"Character set is not EBCDIC\"\n#endif ],\n[ # TryCompile action if true\ncf_cv_ebcdic=yes ],\n[ # TryCompile action if false\ncf_cv_ebcdic=no])\n# end of TryCompile ])\n# end of CacheVal CvEbcdic\nAC_MSG_RESULT($cf_cv_ebcdic)\ncase \"$cf_cv_ebcdic\" in  #(vi\n    yes)\tAC_DEFINE(EBCDIC)\n\t\tline_break='\"\\\\n\"'\n\t\t;;\n    *)\t\tline_break='\"\\\\012\"';;\nesac\nAC_SUBST(line_break)\n\nif test \"$cf_cv_ebcdic\" = \"yes\"; then\ndnl If we have EBCDIC we most likely have z/OS Unix, let's test it!\nAC_MSG_CHECKING(for z/OS Unix)\ncase `uname` in\n    OS/390)\tzOSUnix=\"yes\";\n\t\tdnl If using cc the environment variable _CC_CCMODE must be\n\t\tdnl set to \"1\", so that some compiler extensions are enabled.\n\t\tdnl If using c89 the environment variable is named _CC_C89MODE.\n\t\tdnl Note: compile with c89 never tested.\n\t\tif test \"$CC\" = \"cc\"; then\n\t\t  ccm=\"$_CC_CCMODE\"\n\t\t  ccn=\"CC\"\n\t\telse\n\t\t  if test \"$CC\" = \"c89\"; then\n\t\t    ccm=\"$_CC_C89MODE\"\n\t\t    ccn=\"C89\"\n\t\t  else\n\t\t    ccm=1\n\t\t  fi\n\t\tfi\n\t\tif test \"$ccm\" != \"1\"; then\n\t\t  echo \"\"\n\t\t  echo \"------------------------------------------\"\n\t\t  echo \" On z/OS Unix, the environment variable\"\n\t\t  echo \" _CC_${ccn}MODE must be set to \\\"1\\\"!\"\n\t\t  echo \" Do:\"\n\t\t  echo \"    export _CC_${ccn}MODE=1\"\n\t\t  echo \" and then call configure again.\"\n\t\t  echo \"------------------------------------------\"\n\t\t  exit 1\n\t\tfi\n\t\t# Set CFLAGS for configure process.\n\t\t# This will be reset later for config.mk.\n\t\t# Use haltonmsg to force error for missing H files.\n\t\tCFLAGS=\"$CFLAGS -D_ALL_SOURCE -Wc,float(ieee),haltonmsg(3296)\";\n\t\tLDFLAGS=\"$LDFLAGS -Wl,EDIT=NO\"\n\t\tAC_MSG_RESULT(yes)\n\t\t;;\n    *)\t\tzOSUnix=\"no\";\n\t\tAC_MSG_RESULT(no)\n\t\t;;\nesac\nfi\n\ndnl Set QUOTESED. Needs additional backslashes on zOS\nif test \"$zOSUnix\" = \"yes\"; then\n    QUOTESED=\"sed -e 's/[[\\\\\\\\\\\"]]/\\\\\\\\\\\\\\\\&/g' -e 's/\\\\\\\\\\\\\\\\\\\"/\\\"/' -e 's/\\\\\\\\\\\\\\\\\\\";\\$\\$/\\\";/'\"\nelse\n    QUOTESED=\"sed -e 's/[[\\\\\\\\\\\"]]/\\\\\\\\&/g' -e 's/\\\\\\\\\\\"/\\\"/' -e 's/\\\\\\\\\\\";\\$\\$/\\\";/'\"\nfi\nAC_SUBST(QUOTESED)\n\n\ndnl Link with -lsmack for Smack stuff; if not found\nAC_MSG_CHECKING(--disable-smack argument)\nAC_ARG_ENABLE(smack,\n\t[  --disable-smack\t  Do not check for Smack support.],\n\t, enable_smack=\"yes\")\nif test \"$enable_smack\" = \"yes\"; then\n  AC_MSG_RESULT(no)\n  AC_CHECK_HEADER([linux/xattr.h], true, enable_smack=\"no\")\nelse\n  AC_MSG_RESULT(yes)\nfi\nif test \"$enable_smack\" = \"yes\"; then\n  AC_CHECK_HEADER([attr/xattr.h], true, enable_smack=\"no\")\nfi\nif test \"$enable_smack\" = \"yes\"; then\n  AC_MSG_CHECKING(for XATTR_NAME_SMACKEXEC in linux/xattr.h)\n  AC_EGREP_CPP(XATTR_NAME_SMACKEXEC, [#include <linux/xattr.h>],\n\t       AC_MSG_RESULT(yes),\n\t       AC_MSG_RESULT(no); enable_smack=\"no\")\nfi\nif test \"$enable_smack\" = \"yes\"; then\n  AC_CHECK_LIB(attr, setxattr,\n\t  [LIBS=\"$LIBS -lattr\"\n\t   found_smack=\"yes\"\n\t   AC_DEFINE(HAVE_SMACK)])\nfi\n\ndnl When smack was found don't search for SELinux\nif test \"x$found_smack\" = \"x\"; then\n  dnl Link with -lselinux for SELinux stuff; if not found\n  AC_MSG_CHECKING(--disable-selinux argument)\n  AC_ARG_ENABLE(selinux,\n\t  [  --disable-selinux\t  Do not check for SELinux support.],\n\t  , enable_selinux=\"yes\")\n  if test \"$enable_selinux\" = \"yes\"; then\n    AC_MSG_RESULT(no)\n    AC_CHECK_LIB(selinux, is_selinux_enabled,\n\t    [LIBS=\"$LIBS -lselinux\"\n\t     AC_DEFINE(HAVE_SELINUX)])\n  else\n     AC_MSG_RESULT(yes)\n  fi\nfi\n\ndnl Check user requested features.\n\nAC_MSG_CHECKING(--with-features argument)\nAC_ARG_WITH(features, [  --with-features=TYPE    tiny, small, normal, big or huge (default: huge)],\n\tfeatures=\"$withval\"; AC_MSG_RESULT($features),\n\tfeatures=\"huge\"; AC_MSG_RESULT(Defaulting to huge))\n\ndovimdiff=\"\"\ndogvimdiff=\"\"\ncase \"$features\" in\n  tiny)\t\tAC_DEFINE(FEAT_TINY) ;;\n  small)\tAC_DEFINE(FEAT_SMALL) ;;\n  normal)\tAC_DEFINE(FEAT_NORMAL) dovimdiff=\"installvimdiff\";\n\t\t\tdogvimdiff=\"installgvimdiff\" ;;\n  big)\t\tAC_DEFINE(FEAT_BIG) dovimdiff=\"installvimdiff\";\n\t\t\tdogvimdiff=\"installgvimdiff\" ;;\n  huge)\t\tAC_DEFINE(FEAT_HUGE) dovimdiff=\"installvimdiff\";\n\t\t\tdogvimdiff=\"installgvimdiff\" ;;\n  *)\t\tAC_MSG_RESULT([Sorry, $features is not supported]) ;;\nesac\n\nAC_SUBST(dovimdiff)\nAC_SUBST(dogvimdiff)\n\nAC_MSG_CHECKING(--with-compiledby argument)\nAC_ARG_WITH(compiledby, [  --with-compiledby=NAME  name to show in :version message],\n\tcompiledby=\"$withval\"; AC_MSG_RESULT($withval),\n\tcompiledby=\"\"; AC_MSG_RESULT(no))\nAC_SUBST(compiledby)\n\nAC_MSG_CHECKING(--disable-xsmp argument)\nAC_ARG_ENABLE(xsmp,\n\t[  --disable-xsmp          Disable XSMP session management],\n\t, enable_xsmp=\"yes\")\n\nif test \"$enable_xsmp\" = \"yes\"; then\n  AC_MSG_RESULT(no)\n  AC_MSG_CHECKING(--disable-xsmp-interact argument)\n  AC_ARG_ENABLE(xsmp-interact,\n\t  [  --disable-xsmp-interact Disable XSMP interaction],\n\t  , enable_xsmp_interact=\"yes\")\n  if test \"$enable_xsmp_interact\" = \"yes\"; then\n    AC_MSG_RESULT(no)\n    AC_DEFINE(USE_XSMP_INTERACT)\n  else\n    AC_MSG_RESULT(yes)\n  fi\nelse\n  AC_MSG_RESULT(yes)\nfi\n\ndnl Check for Lua feature.\nAC_MSG_CHECKING(--enable-luainterp argument)\nAC_ARG_ENABLE(luainterp,\n\t[  --enable-luainterp[=OPTS]     Include Lua interpreter.  [default=no] [OPTS=no/yes/dynamic]], ,\n\t[enable_luainterp=\"no\"])\nAC_MSG_RESULT($enable_luainterp)\n\nif test \"$enable_luainterp\" = \"yes\" -o \"$enable_luainterp\" = \"dynamic\"; then\n  if test \"x$features\" = \"xtiny\" -o \"x$features\" = \"xsmall\"; then\n    AC_MSG_ERROR([cannot use Lua with tiny or small features])\n  fi\n\n  dnl -- find the lua executable\n  AC_SUBST(vi_cv_path_lua)\n\n  AC_MSG_CHECKING(--with-lua-prefix argument)\n  AC_ARG_WITH(lua_prefix,\n\t[  --with-lua-prefix=PFX   Prefix where Lua is installed.],\n\twith_lua_prefix=\"$withval\"; AC_MSG_RESULT($with_lua_prefix),\n\twith_lua_prefix=\"\";AC_MSG_RESULT(no))\n\n  if test \"X$with_lua_prefix\" != \"X\"; then\n       vi_cv_path_lua_pfx=\"$with_lua_prefix\"\n  else\n    AC_MSG_CHECKING(LUA_PREFIX environment var)\n    if test \"X$LUA_PREFIX\" != \"X\"; then\n\tAC_MSG_RESULT(\"$LUA_PREFIX\")\n\tvi_cv_path_lua_pfx=\"$LUA_PREFIX\"\n    else\n\tAC_MSG_RESULT([not set, default to /usr])\n\tvi_cv_path_lua_pfx=\"/usr\"\n    fi\n  fi\n\n  AC_MSG_CHECKING(--with-luajit)\n  AC_ARG_WITH(luajit,\n\t[  --with-luajit           Link with LuaJIT instead of Lua.],\n\t[vi_cv_with_luajit=\"$withval\"],\n\t[vi_cv_with_luajit=\"no\"])\n  AC_MSG_RESULT($vi_cv_with_luajit)\n\n  LUA_INC=\n  if test \"X$vi_cv_path_lua_pfx\" != \"X\"; then\n    if test \"x$vi_cv_with_luajit\" != \"xno\"; then\n      dnl -- try to find LuaJIT executable\n      AC_PATH_PROG(vi_cv_path_luajit, luajit)\n      if test \"X$vi_cv_path_luajit\" != \"X\"; then\n\tdnl -- find LuaJIT version\n\tAC_CACHE_CHECK(LuaJIT version, vi_cv_version_luajit,\n\t[ vi_cv_version_luajit=`${vi_cv_path_luajit} -v 2>&1 | sed 's/LuaJIT \\([[0-9.]]*\\)\\.[[0-9]]\\(-[[a-z0-9]]*\\)* .*/\\1/'` ])\n\tAC_CACHE_CHECK(Lua version of LuaJIT, vi_cv_version_lua_luajit,\n\t[ vi_cv_version_lua_luajit=`${vi_cv_path_luajit} -e \"print(_VERSION)\" | sed 's/.* //'` ])\n\tvi_cv_path_lua=\"$vi_cv_path_luajit\"\n\tvi_cv_version_lua=\"$vi_cv_version_lua_luajit\"\n      fi\n    else\n      dnl -- try to find Lua executable\n      AC_PATH_PROG(vi_cv_path_plain_lua, lua)\n      if test \"X$vi_cv_path_plain_lua\" != \"X\"; then\n\tdnl -- find Lua version\n\tAC_CACHE_CHECK(Lua version, vi_cv_version_plain_lua,\n\t[ vi_cv_version_plain_lua=`${vi_cv_path_plain_lua} -e \"print(_VERSION)\" | sed 's/.* //'` ])\n      fi\n      vi_cv_path_lua=\"$vi_cv_path_plain_lua\"\n      vi_cv_version_lua=\"$vi_cv_version_plain_lua\"\n    fi\n    if test \"x$vi_cv_with_luajit\" != \"xno\" && test \"X$vi_cv_version_luajit\" != \"X\"; then\n      AC_MSG_CHECKING(if lua.h can be found in $vi_cv_path_lua_pfx/include/luajit-$vi_cv_version_luajit)\n      if test -f \"$vi_cv_path_lua_pfx/include/luajit-$vi_cv_version_luajit/lua.h\"; then\n\tAC_MSG_RESULT(yes)\n\tLUA_INC=/luajit-$vi_cv_version_luajit\n      fi\n    fi\n    if test \"X$LUA_INC\" = \"X\"; then\n      AC_MSG_CHECKING(if lua.h can be found in $vi_cv_path_lua_pfx/include)\n      if test -f \"$vi_cv_path_lua_pfx/include/lua.h\"; then\n\tAC_MSG_RESULT(yes)\n      else\n\tAC_MSG_RESULT(no)\n\tAC_MSG_CHECKING(if lua.h can be found in $vi_cv_path_lua_pfx/include/lua$vi_cv_version_lua)\n\tif test -f \"$vi_cv_path_lua_pfx/include/lua$vi_cv_version_lua/lua.h\"; then\n\t  AC_MSG_RESULT(yes)\n\t  LUA_INC=/lua$vi_cv_version_lua\n\telse\n\t  AC_MSG_RESULT(no)\n\t  vi_cv_path_lua_pfx=\n\tfi\n      fi\n    fi\n  fi\n\n  if test \"X$vi_cv_path_lua_pfx\" != \"X\"; then\n    if test \"x$vi_cv_with_luajit\" != \"xno\"; then\n      multiarch=`dpkg-architecture -qDEB_HOST_MULTIARCH 2> /dev/null`\n      if test \"X$multiarch\" != \"X\"; then\n\tlib_multiarch=\"lib/${multiarch}\"\n      else\n\tlib_multiarch=\"lib\"\n      fi\n      if test \"X$vi_cv_version_lua\" = \"X\"; then\n\tLUA_LIBS=\"-L${vi_cv_path_lua_pfx}/${lib_multiarch} -lluajit\"\n      else\n\tLUA_LIBS=\"-L${vi_cv_path_lua_pfx}/${lib_multiarch} -lluajit-$vi_cv_version_lua\"\n      fi\n    else\n      if test \"X$LUA_INC\" != \"X\"; then\n\tdnl Test alternate location using version\n\tLUA_LIBS=\"-L${vi_cv_path_lua_pfx}/lib -llua$vi_cv_version_lua\"\n      else\n\tLUA_LIBS=\"-L${vi_cv_path_lua_pfx}/lib -llua\"\n      fi\n    fi\n    if test \"$enable_luainterp\" = \"dynamic\"; then\n      lua_ok=\"yes\"\n    else\n      AC_MSG_CHECKING([if link with ${LUA_LIBS} is sane])\n      libs_save=$LIBS\n      LIBS=\"$LIBS $LUA_LIBS\"\n      AC_TRY_LINK(,[ ],\n\tAC_MSG_RESULT(yes); lua_ok=\"yes\",\n\tAC_MSG_RESULT(no); lua_ok=\"no\"; LUA_LIBS=\"\")\n      LIBS=$libs_save\n    fi\n    if test \"x$lua_ok\" = \"xyes\"; then\n      LUA_CFLAGS=\"-I${vi_cv_path_lua_pfx}/include${LUA_INC}\"\n      LUA_SRC=\"if_lua.c\"\n      LUA_OBJ=\"objects/if_lua.o\"\n      LUA_PRO=\"if_lua.pro\"\n      AC_DEFINE(FEAT_LUA)\n    fi\n    if test \"$enable_luainterp\" = \"dynamic\"; then\n      if test \"x$vi_cv_with_luajit\" != \"xno\"; then\n\tluajit=\"jit\"\n      fi\n      if test -f \"${vi_cv_path_lua_pfx}/bin/cyglua-${vi_cv_version_lua}.dll\"; then\n\tvi_cv_dll_name_lua=\"cyglua-${vi_cv_version_lua}.dll\"\n      else\n\tif test \"x$MACOSX\" = \"xyes\"; then\n\t  ext=\"dylib\"\n\t  indexes=\"\"\n\telse\n\t  ext=\"so\"\n\t  indexes=\".0 .1 .2 .3 .4 .5 .6 .7 .8 .9\"\n\t  multiarch=`dpkg-architecture -qDEB_HOST_MULTIARCH 2> /dev/null`\n\t  if test \"X$multiarch\" != \"X\"; then\n\t    lib_multiarch=\"lib/${multiarch}\"\n\t  fi\n\tfi\n\tdnl Determine the sover for the current version, but fallback to\n\tdnl liblua${vi_cv_version_lua}.so if no sover-versioned file is found.\n\tAC_MSG_CHECKING(if liblua${luajit}*.${ext}* can be found in $vi_cv_path_lua_pfx)\n\tfor subdir in \"${lib_multiarch}\" lib64 lib; do\n\t  if test -z \"$subdir\"; then\n\t    continue\n\t  fi\n\t  for sover in \"${vi_cv_version_lua}.${ext}\" \"-${vi_cv_version_lua}.${ext}\" \\\n\t    \".${vi_cv_version_lua}.${ext}\" \".${ext}.${vi_cv_version_lua}\"; do\n\t    for i in $indexes \"\"; do\n\t      if test -f \"${vi_cv_path_lua_pfx}/${subdir}/liblua${luajit}${sover}$i\"; then\n\t\tsover2=\"$i\"\n\t\tbreak 3\n\t      fi\n\t    done\n\t  done\n\t  sover=\"\"\n\tdone\n\tif test \"X$sover\" = \"X\"; then\n\t  AC_MSG_RESULT(no)\n\t  lua_ok=\"no\"\n\t  vi_cv_dll_name_lua=\"liblua${luajit}.${ext}\"\n\telse\n\t  AC_MSG_RESULT(yes)\n\t  lua_ok=\"yes\"\n\t  vi_cv_dll_name_lua=\"liblua${luajit}${sover}$sover2\"\n\tfi\n      fi\n      AC_DEFINE(DYNAMIC_LUA)\n      LUA_LIBS=\"\"\n      LUA_CFLAGS=\"-DDYNAMIC_LUA_DLL=\\\\\\\"${vi_cv_dll_name_lua}\\\\\\\" $LUA_CFLAGS\"\n    fi\n    if test \"X$LUA_CFLAGS$LUA_LIBS\" != \"X\" && \\\n       test \"x$MACOSX\" = \"xyes\" && test \"x$vi_cv_with_luajit\" != \"xno\" && \\\n       test \"`(uname -m) 2>/dev/null`\" = \"x86_64\"; then\n      dnl OSX/x64 requires these flags. See http://luajit.org/install.html\n      LUA_LIBS=\"-pagezero_size 10000 -image_base 100000000 $LUA_LIBS\"\n    fi\n  fi\n  if test \"$fail_if_missing\" = \"yes\" -a \"$lua_ok\" != \"yes\"; then\n    AC_MSG_ERROR([could not configure lua])\n  fi\n  AC_SUBST(LUA_SRC)\n  AC_SUBST(LUA_OBJ)\n  AC_SUBST(LUA_PRO)\n  AC_SUBST(LUA_LIBS)\n  AC_SUBST(LUA_CFLAGS)\nfi\n\n\ndnl Check for MzScheme feature.\nAC_MSG_CHECKING(--enable-mzschemeinterp argument)\nAC_ARG_ENABLE(mzschemeinterp,\n\t[  --enable-mzschemeinterp   Include MzScheme interpreter.], ,\n\t[enable_mzschemeinterp=\"no\"])\nAC_MSG_RESULT($enable_mzschemeinterp)\n\nif test \"$enable_mzschemeinterp\" = \"yes\"; then\n  dnl -- find the mzscheme executable\n  AC_SUBST(vi_cv_path_mzscheme)\n\n  AC_MSG_CHECKING(--with-plthome argument)\n  AC_ARG_WITH(plthome,\n\t[  --with-plthome=PLTHOME   Use PLTHOME.],\n\twith_plthome=\"$withval\"; AC_MSG_RESULT($with_plthome),\n\twith_plthome=\"\";AC_MSG_RESULT(\"no\"))\n\n  if test \"X$with_plthome\" != \"X\"; then\n       vi_cv_path_mzscheme_pfx=\"$with_plthome\"\n       vi_cv_path_mzscheme=\"${vi_cv_path_mzscheme_pfx}/bin/mzscheme\"\n  else\n    AC_MSG_CHECKING(PLTHOME environment var)\n    if test \"X$PLTHOME\" != \"X\"; then\n\tAC_MSG_RESULT(\"$PLTHOME\")\n\tvi_cv_path_mzscheme_pfx=\"$PLTHOME\"\n\tvi_cv_path_mzscheme=\"${vi_cv_path_mzscheme_pfx}/bin/mzscheme\"\n    else\n\tAC_MSG_RESULT(not set)\n\tdnl -- try to find MzScheme executable\n\tAC_PATH_PROG(vi_cv_path_mzscheme, mzscheme)\n\n\tdnl resolve symbolic link, the executable is often elsewhere and there\n\tdnl are no links for the include files.\n\tif test \"X$vi_cv_path_mzscheme\" != \"X\"; then\n\t  lsout=`ls -l $vi_cv_path_mzscheme`\n\t  if echo \"$lsout\" | grep -e '->' >/dev/null 2>/dev/null; then\n\t    vi_cv_path_mzscheme=`echo \"$lsout\" | sed 's/.*-> \\(.*\\)/\\1/'`\n\t  fi\n\tfi\n\n\tif test \"X$vi_cv_path_mzscheme\" != \"X\"; then\n\t    dnl -- find where MzScheme thinks it was installed\n\t    AC_CACHE_CHECK(MzScheme install prefix,vi_cv_path_mzscheme_pfx,\n\t    dnl different versions of MzScheme differ in command line processing\n\t    dnl use universal approach\n\t    echo \"(display (simplify-path\t\t\\\n\t       (build-path (call-with-values\t\\\n\t\t(lambda () (split-path (find-system-path (quote exec-file)))) \\\n\t\t(lambda (base name must-be-dir?) base)) (quote up))))\" > mzdirs.scm\n\t    dnl Remove a trailing slash\n\t    [ vi_cv_path_mzscheme_pfx=`${vi_cv_path_mzscheme} -r mzdirs.scm | \\\n\t\tsed -e 's+/$++'` ])\n\t    rm -f mzdirs.scm\n\tfi\n    fi\n  fi\n\n  if test \"X$vi_cv_path_mzscheme_pfx\" != \"X\"; then\n    AC_MSG_CHECKING(for racket include directory)\n    SCHEME_INC=`${vi_cv_path_mzscheme} -e '(require setup/dirs)(let ((p (find-include-dir))) (when (path? p) (display p)))'`\n    if test \"X$SCHEME_INC\" != \"X\"; then\n      AC_MSG_RESULT(${SCHEME_INC})\n    else\n      AC_MSG_RESULT(not found)\n      AC_MSG_CHECKING(if scheme.h can be found in $vi_cv_path_mzscheme_pfx/include)\n      if test -f \"$vi_cv_path_mzscheme_pfx/include/scheme.h\"; then\n\tSCHEME_INC=${vi_cv_path_mzscheme_pfx}/include\n\tAC_MSG_RESULT(yes)\n      else\n\tAC_MSG_RESULT(no)\n\tAC_MSG_CHECKING(if scheme.h can be found in $vi_cv_path_mzscheme_pfx/include/plt)\n\tif test -f \"$vi_cv_path_mzscheme_pfx/include/plt/scheme.h\"; then\n\t  AC_MSG_RESULT(yes)\n\t  SCHEME_INC=${vi_cv_path_mzscheme_pfx}/include/plt\n\telse\n\t  AC_MSG_RESULT(no)\n\t  AC_MSG_CHECKING(if scheme.h can be found in $vi_cv_path_mzscheme_pfx/include/racket)\n\t  if test -f \"$vi_cv_path_mzscheme_pfx/include/racket/scheme.h\"; then\n\t    AC_MSG_RESULT(yes)\n\t    SCHEME_INC=${vi_cv_path_mzscheme_pfx}/include/racket\n\t  else\n\t    AC_MSG_RESULT(no)\n\t    AC_MSG_CHECKING(if scheme.h can be found in /usr/include/plt/)\n\t    if test -f /usr/include/plt/scheme.h; then\n\t      AC_MSG_RESULT(yes)\n\t      SCHEME_INC=/usr/include/plt\n\t    else\n\t      AC_MSG_RESULT(no)\n\t      AC_MSG_CHECKING(if scheme.h can be found in /usr/include/racket/)\n\t      if test -f /usr/include/racket/scheme.h; then\n\t\tAC_MSG_RESULT(yes)\n\t\tSCHEME_INC=/usr/include/racket\n\t      else\n\t\tAC_MSG_RESULT(no)\n\t\tvi_cv_path_mzscheme_pfx=\n\t      fi\n\t    fi\n\t  fi\n\tfi\n      fi\n    fi\n  fi\n\n  if test \"X$vi_cv_path_mzscheme_pfx\" != \"X\"; then\n\n    AC_MSG_CHECKING(for racket lib directory)\n    SCHEME_LIB=`${vi_cv_path_mzscheme} -e '(require setup/dirs)(let ((p (find-lib-dir))) (when (path? p) (display p)))'`\n    if test \"X$SCHEME_LIB\" != \"X\"; then\n      AC_MSG_RESULT(${SCHEME_LIB})\n    else\n      AC_MSG_RESULT(not found)\n    fi\n\n    for path in \"${vi_cv_path_mzscheme_pfx}/lib\" \"${SCHEME_LIB}\"; do\n      if test \"X$path\" != \"X\"; then\n\tif test \"x$MACOSX\" = \"xyes\"; then\n\t  MZSCHEME_LIBS=\"-framework Racket\"\n\t  MZSCHEME_CFLAGS=\"-DMZ_PRECISE_GC\"\n\telif test -f \"${path}/libmzscheme3m.a\"; then\n\t  MZSCHEME_LIBS=\"${path}/libmzscheme3m.a\"\n\t  MZSCHEME_CFLAGS=\"-DMZ_PRECISE_GC\"\n\telif test -f \"${path}/libracket3m.a\"; then\n\t  MZSCHEME_LIBS=\"${path}/libracket3m.a\"\n\t  MZSCHEME_CFLAGS=\"-DMZ_PRECISE_GC\"\n\telif test -f \"${path}/libracket.a\"; then\n\t  MZSCHEME_LIBS=\"${path}/libracket.a ${path}/libmzgc.a\"\n\telif test -f \"${path}/libmzscheme.a\"; then\n\t  MZSCHEME_LIBS=\"${path}/libmzscheme.a ${path}/libmzgc.a\"\n\telse\n\t  dnl Using shared objects\n\t  if test -f \"${path}/libmzscheme3m.so\"; then\n\t    MZSCHEME_LIBS=\"-L${path} -lmzscheme3m\"\n\t    MZSCHEME_CFLAGS=\"-DMZ_PRECISE_GC\"\n\t  elif test -f \"${path}/libracket3m.so\"; then\n\t    MZSCHEME_LIBS=\"-L${path} -lracket3m\"\n\t    MZSCHEME_CFLAGS=\"-DMZ_PRECISE_GC\"\n\t  elif test -f \"${path}/libracket.so\"; then\n\t    MZSCHEME_LIBS=\"-L${path} -lracket -lmzgc\"\n\t  else\n\t    dnl try next until last\n\t    if test \"$path\" != \"$SCHEME_LIB\"; then\n\t      continue\n\t    fi\n\t    MZSCHEME_LIBS=\"-L${path} -lmzscheme -lmzgc\"\n\t  fi\n\t  if test \"$GCC\" = yes; then\n\t    dnl Make Vim remember the path to the library.  For when it's not in\n\t    dnl $LD_LIBRARY_PATH.\n\t    MZSCHEME_LIBS=\"${MZSCHEME_LIBS} -Wl,-rpath -Wl,${path}\"\n\t  elif test \"`(uname) 2>/dev/null`\" = SunOS &&\n\t\t\t\t   uname -r | grep '^5' >/dev/null; then\n\t    MZSCHEME_LIBS=\"${MZSCHEME_LIBS} -R ${path}\"\n\t  fi\n\tfi\n      fi\n      if test \"X$MZSCHEME_LIBS\" != \"X\"; then\n\tbreak\n      fi\n    done\n\n    AC_MSG_CHECKING([if racket requires -pthread])\n    if test \"X$SCHEME_LIB\" != \"X\" && $FGREP -e -pthread \"$SCHEME_LIB/buildinfo\" >/dev/null ; then\n      AC_MSG_RESULT(yes)\n      MZSCHEME_LIBS=\"${MZSCHEME_LIBS} -pthread\"\n      MZSCHEME_CFLAGS=\"${MZSCHEME_CFLAGS} -pthread\"\n    else\n      AC_MSG_RESULT(no)\n    fi\n\n    AC_MSG_CHECKING(for racket config directory)\n    SCHEME_CONFIGDIR=`${vi_cv_path_mzscheme} -e '(require setup/dirs)(let ((p (find-config-dir))) (when (path? p) (display p)))'`\n    if test \"X$SCHEME_CONFIGDIR\" != \"X\"; then\n      MZSCHEME_CFLAGS=\"${MZSCHEME_CFLAGS} -DMZSCHEME_CONFIGDIR='\\\"${SCHEME_CONFIGDIR}\\\"'\"\n      AC_MSG_RESULT(${SCHEME_CONFIGDIR})\n    else\n      AC_MSG_RESULT(not found)\n    fi\n\n    AC_MSG_CHECKING(for racket collects directory)\n    SCHEME_COLLECTS=`${vi_cv_path_mzscheme} -e '(require setup/dirs)(let ((p (find-collects-dir))) (when (path? p) (let-values (((base _1 _2) (split-path p))) (display base))))'`\n    if test \"X$SCHEME_COLLECTS\" = \"X\"; then\n      if test -d \"$vi_cv_path_mzscheme_pfx/lib/plt/collects\"; then\n\tSCHEME_COLLECTS=$vi_cv_path_mzscheme_pfx/lib/plt/\n      else\n\tif test -d \"$vi_cv_path_mzscheme_pfx/lib/racket/collects\"; then\n\t  SCHEME_COLLECTS=$vi_cv_path_mzscheme_pfx/lib/racket/\n\telse\n\t  if test -d \"$vi_cv_path_mzscheme_pfx/share/racket/collects\"; then\n\t    SCHEME_COLLECTS=$vi_cv_path_mzscheme_pfx/share/racket/\n\t  else\n\t    if test -d \"$vi_cv_path_mzscheme_pfx/collects\"; then\n\t      SCHEME_COLLECTS=$vi_cv_path_mzscheme_pfx/\n\t    fi\n\t  fi\n\tfi\n      fi\n    fi\n    if test \"X$SCHEME_COLLECTS\" != \"X\" ; then\n      AC_MSG_RESULT(${SCHEME_COLLECTS})\n    else\n      AC_MSG_RESULT(not found)\n    fi\n\n    AC_MSG_CHECKING(for mzscheme_base.c)\n    if test -f \"${SCHEME_COLLECTS}collects/scheme/base.ss\" ; then\n      MZSCHEME_EXTRA=\"mzscheme_base.c\"\n      MZSCHEME_MZC=\"${vi_cv_path_mzscheme_pfx}/bin/mzc\"\n      MZSCHEME_MOD=\"++lib scheme/base\"\n    else\n      if test -f \"${SCHEME_COLLECTS}collects/scheme/base.rkt\" ; then\n\tMZSCHEME_EXTRA=\"mzscheme_base.c\"\n\tMZSCHEME_MZC=\"${vi_cv_path_mzscheme_pfx}/bin/mzc\"\n\tMZSCHEME_MOD=\"++lib scheme/base\"\n      else\n\tif test -f \"${SCHEME_COLLECTS}collects/racket/base.rkt\" ; then\n\t  MZSCHEME_EXTRA=\"mzscheme_base.c\"\n\t  MZSCHEME_MZC=\"${vi_cv_path_mzscheme_pfx}/bin/raco ctool\"\n\t  MZSCHEME_MOD=\"\"\n\tfi\n      fi\n    fi\n    if test \"X$MZSCHEME_EXTRA\" != \"X\" ; then\n      dnl need to generate bytecode for MzScheme base\n      MZSCHEME_CFLAGS=\"${MZSCHEME_CFLAGS} -DINCLUDE_MZSCHEME_BASE\"\n      AC_MSG_RESULT(needed)\n    else\n      AC_MSG_RESULT(not needed)\n    fi\n\n    dnl On Ubuntu this fixes \"undefined reference to symbol 'ffi_type_void'\".\n    AC_CHECK_LIB(ffi, ffi_type_void, [MZSCHEME_LIBS=\"$MZSCHEME_LIBS -lffi\"])\n\n    MZSCHEME_CFLAGS=\"${MZSCHEME_CFLAGS} -I${SCHEME_INC} \\\n      -DMZSCHEME_COLLECTS='\\\"${SCHEME_COLLECTS}collects\\\"'\"\n\n    dnl Test that we can compile a simple program with these CFLAGS and LIBS.\n    AC_MSG_CHECKING([if compile and link flags for MzScheme are sane])\n    cflags_save=$CFLAGS\n    libs_save=$LIBS\n    CFLAGS=\"$CFLAGS $MZSCHEME_CFLAGS\"\n    LIBS=\"$LIBS $MZSCHEME_LIBS\"\n    AC_TRY_LINK(,[ ],\n\t   AC_MSG_RESULT(yes); mzs_ok=yes,\n\t   AC_MSG_RESULT(no: MZSCHEME DISABLED); mzs_ok=no)\n    CFLAGS=$cflags_save\n    LIBS=$libs_save\n    if test $mzs_ok = yes; then\n      MZSCHEME_SRC=\"if_mzsch.c\"\n      MZSCHEME_OBJ=\"objects/if_mzsch.o\"\n      MZSCHEME_PRO=\"if_mzsch.pro\"\n      AC_DEFINE(FEAT_MZSCHEME)\n    else\n      MZSCHEME_CFLAGS=\n      MZSCHEME_LIBS=\n      MZSCHEME_EXTRA=\n      MZSCHEME_MZC=\n    fi\n  fi\n  AC_SUBST(MZSCHEME_SRC)\n  AC_SUBST(MZSCHEME_OBJ)\n  AC_SUBST(MZSCHEME_PRO)\n  AC_SUBST(MZSCHEME_LIBS)\n  AC_SUBST(MZSCHEME_CFLAGS)\n  AC_SUBST(MZSCHEME_EXTRA)\n  AC_SUBST(MZSCHEME_MZC)\nfi\n\n\nAC_MSG_CHECKING(--enable-perlinterp argument)\nAC_ARG_ENABLE(perlinterp,\n\t[  --enable-perlinterp[=OPTS]     Include Perl interpreter.  [default=no] [OPTS=no/yes/dynamic]], ,\n\t[enable_perlinterp=\"no\"])\nAC_MSG_RESULT($enable_perlinterp)\nif test \"$enable_perlinterp\" = \"yes\" -o \"$enable_perlinterp\" = \"dynamic\"; then\n  if test \"x$features\" = \"xtiny\" -o \"x$features\" = \"xsmall\"; then\n    AC_MSG_ERROR([cannot use Perl with tiny or small features])\n  fi\n  AC_SUBST(vi_cv_path_perl)\n  AC_PATH_PROG(vi_cv_path_perl, perl)\n  if test \"X$vi_cv_path_perl\" != \"X\"; then\n    AC_MSG_CHECKING(Perl version)\n    if $vi_cv_path_perl -e 'require 5.003_01' >/dev/null 2>/dev/null; then\n     eval `$vi_cv_path_perl -V:usethreads`\n     eval `$vi_cv_path_perl -V:libperl`\n     if test \"X$usethreads\" = \"XUNKNOWN\" -o \"X$usethreads\" = \"Xundef\"; then\n       badthreads=no\n     else\n       if $vi_cv_path_perl -e 'require 5.6.0' >/dev/null 2>/dev/null; then\n\t eval `$vi_cv_path_perl -V:use5005threads`\n\t if test \"X$use5005threads\" = \"XUNKNOWN\" -o \"X$use5005threads\" = \"Xundef\"; then\n\t   badthreads=no\n\t else\n\t   badthreads=yes\n\t   AC_MSG_RESULT(>>> Perl > 5.6 with 5.5 threads cannot be used <<<)\n\t fi\n       else\n\t badthreads=yes\n\t AC_MSG_RESULT(>>> Perl 5.5 with threads cannot be used <<<)\n       fi\n     fi\n     if test $badthreads = no; then\n      AC_MSG_RESULT(OK)\n      eval `$vi_cv_path_perl -V:shrpenv`\n      if test \"X$shrpenv\" = \"XUNKNOWN\"; then # pre 5.003_04\n\tshrpenv=\"\"\n      fi\n      vi_cv_perllib=`$vi_cv_path_perl -MConfig -e 'print $Config{privlibexp}'`\n      AC_SUBST(vi_cv_perllib)\n      vi_cv_perl_extutils=unknown_perl_extutils_path\n      for extutils_rel_path in ExtUtils vendor_perl/ExtUtils; do\n\txsubpp_path=\"$vi_cv_perllib/$extutils_rel_path/xsubpp\"\n\tif test -f \"$xsubpp_path\"; then\n\t  vi_cv_perl_xsubpp=\"$xsubpp_path\"\n\tfi\n      done\n      AC_SUBST(vi_cv_perl_xsubpp)\n      dnl Remove \"-fno-something\", it breaks using cproto.\n      dnl Remove \"-fdebug-prefix-map\", it isn't supported by clang.\n      perlcppflags=`$vi_cv_path_perl -Mlib=$srcdir -MExtUtils::Embed \\\n\t      -e 'ccflags;perl_inc;print\"\\n\"' | sed -e 's/-fno[[^ ]]*//' \\\n\t\t\t-e 's/-fdebug-prefix-map[[^ ]]*//g'`\n      dnl Remove \"-lc\", it breaks on FreeBSD when using \"-pthread\".\n      perllibs=`cd $srcdir; $vi_cv_path_perl -MExtUtils::Embed -e 'ldopts' | \\\n\t\tsed -e '/Warning/d' -e '/Note (probably harmless)/d' \\\n\t\t\t-e 's/-bE:perl.exp//' -e 's/-lc //'`\n      dnl Don't add perl lib to $LIBS: if it's not in LD_LIBRARY_PATH\n      dnl a test in configure may fail because of that.\n      perlldflags=`cd $srcdir; $vi_cv_path_perl -MExtUtils::Embed \\\n\t\t-e 'ccdlflags' | sed -e 's/-bE:perl.exp//'`\n\n      dnl check that compiling a simple program still works with the flags\n      dnl added for Perl.\n      AC_MSG_CHECKING([if compile and link flags for Perl are sane])\n      cflags_save=$CFLAGS\n      libs_save=$LIBS\n      ldflags_save=$LDFLAGS\n      CFLAGS=\"$CFLAGS $perlcppflags\"\n      LIBS=\"$LIBS $perllibs\"\n      perlldflags=`echo \"$perlldflags\" | sed -e 's/^ *//g'`\n      LDFLAGS=\"$perlldflags $LDFLAGS\"\n      AC_TRY_LINK(,[ ],\n\t     AC_MSG_RESULT(yes); perl_ok=yes,\n\t     AC_MSG_RESULT(no: PERL DISABLED); perl_ok=no)\n      CFLAGS=$cflags_save\n      LIBS=$libs_save\n      LDFLAGS=$ldflags_save\n      if test $perl_ok = yes; then\n\tif test \"X$perlcppflags\" != \"X\"; then\n\t  dnl remove -pipe and -Wxxx, it confuses cproto\n\t  PERL_CFLAGS=`echo \"$perlcppflags\" | sed -e 's/-pipe //' -e 's/-W[[^ ]]*//'`\n\tfi\n\tif test \"X$perlldflags\" != \"X\"; then\n\t  if test \"X`echo \\\"$LDFLAGS\\\" | $FGREP -e \\\"$perlldflags\\\"`\" = \"X\"; then\n\t    LDFLAGS=\"$perlldflags $LDFLAGS\"\n\t  fi\n\tfi\n\tPERL_LIBS=$perllibs\n\tPERL_SRC=\"auto/if_perl.c if_perlsfio.c\"\n\tPERL_OBJ=\"objects/if_perl.o objects/if_perlsfio.o\"\n\tPERL_PRO=\"if_perl.pro if_perlsfio.pro\"\n\tAC_DEFINE(FEAT_PERL)\n      fi\n     fi\n    else\n      AC_MSG_RESULT(>>> too old; need Perl version 5.003_01 or later <<<)\n    fi\n  fi\n\n  if test \"x$MACOSX\" = \"xyes\"; then\n    dnl Mac OS X 10.2 or later\n    dir=/System/Library/Perl\n    darwindir=$dir/darwin\n    if test -d $darwindir; then\n      PERL=/usr/bin/perl\n    else\n      dnl Mac OS X 10.3\n      dir=/System/Library/Perl/5.8.1\n      darwindir=$dir/darwin-thread-multi-2level\n      if test -d $darwindir; then\n\tPERL=/usr/bin/perl\n      fi\n    fi\n    if test -n \"$PERL\"; then\n      PERL_DIR=\"$dir\"\n      PERL_CFLAGS=\"-DFEAT_PERL -I$darwindir/CORE\"\n      PERL_OBJ=\"objects/if_perl.o objects/if_perlsfio.o $darwindir/auto/DynaLoader/DynaLoader.a\"\n      PERL_LIBS=\"-L$darwindir/CORE -lperl\"\n    fi\n    dnl Perl on Mac OS X 10.5 adds \"-arch\" flags but these should only\n    dnl be included if requested by passing --with-mac-arch to\n    dnl configure, so strip these flags first (if present)\n    PERL_LIBS=`echo \"$PERL_LIBS\" | sed -e 's/-arch\\ ppc//' -e 's/-arch\\ i386//' -e 's/-arch\\ x86_64//'`\n    PERL_CFLAGS=`echo \"$PERL_CFLAGS\" | sed -e 's/-arch\\ ppc//' -e 's/-arch\\ i386//' -e 's/-arch\\ x86_64//'`\n  fi\n  if test \"$enable_perlinterp\" = \"dynamic\"; then\n    if test \"$perl_ok\" = \"yes\" -a \"X$libperl\" != \"X\"; then\n      AC_DEFINE(DYNAMIC_PERL)\n      PERL_CFLAGS=\"-DDYNAMIC_PERL_DLL=\\\\\\\"$libperl\\\\\\\" $PERL_CFLAGS\"\n    fi\n  fi\n\n  if test \"$fail_if_missing\" = \"yes\" -a \"$perl_ok\" != \"yes\"; then\n    AC_MSG_ERROR([could not configure perl])\n  fi\nfi\nAC_SUBST(shrpenv)\nAC_SUBST(PERL_SRC)\nAC_SUBST(PERL_OBJ)\nAC_SUBST(PERL_PRO)\nAC_SUBST(PERL_CFLAGS)\nAC_SUBST(PERL_LIBS)\n\nAC_MSG_CHECKING(--enable-pythoninterp argument)\nAC_ARG_ENABLE(pythoninterp,\n\t[  --enable-pythoninterp[=OPTS]   Include Python interpreter. [default=no] [OPTS=no/yes/dynamic]], ,\n\t[enable_pythoninterp=\"no\"])\nAC_MSG_RESULT($enable_pythoninterp)\nif test \"$enable_pythoninterp\" = \"yes\" -o \"$enable_pythoninterp\" = \"dynamic\"; then\n  if test \"x$features\" = \"xtiny\" -o \"x$features\" = \"xsmall\"; then\n    AC_MSG_ERROR([cannot use Python with tiny or small features])\n  fi\n\n  dnl -- find the python executable\n  AC_PATH_PROGS(vi_cv_path_python, python2 python)\n  if test \"X$vi_cv_path_python\" != \"X\"; then\n\n    dnl -- get its version number\n    AC_CACHE_CHECK(Python version,vi_cv_var_python_version,\n    [[vi_cv_var_python_version=`\n\t    ${vi_cv_path_python} -c 'import sys; print sys.version[:3]'`\n    ]])\n\n    dnl -- it must be at least version 2.3\n    AC_MSG_CHECKING(Python is 2.3 or better)\n    if ${vi_cv_path_python} -c \\\n\t\"import sys; sys.exit(${vi_cv_var_python_version} < 2.3)\"\n    then\n      AC_MSG_RESULT(yep)\n\n      dnl -- find where python thinks it was installed\n      AC_CACHE_CHECK(Python's install prefix,vi_cv_path_python_pfx,\n      [ vi_cv_path_python_pfx=`\n\t    ${vi_cv_path_python} -c \\\n\t\t\"import sys; print sys.prefix\"` ])\n\n      dnl -- and where it thinks it runs\n      AC_CACHE_CHECK(Python's execution prefix,vi_cv_path_python_epfx,\n      [ vi_cv_path_python_epfx=`\n\t    ${vi_cv_path_python} -c \\\n\t\t\"import sys; print sys.exec_prefix\"` ])\n\n      dnl -- python's internal library path\n\n      AC_CACHE_VAL(vi_cv_path_pythonpath,\n      [ vi_cv_path_pythonpath=`\n\t    unset PYTHONPATH;\n\t    ${vi_cv_path_python} -c \\\n\t\t\"import sys, string; print string.join(sys.path,':')\"` ])\n\n      dnl -- where the Python implementation library archives are\n\n      AC_ARG_WITH(python-config-dir,\n\t[  --with-python-config-dir=PATH  Python's config directory],\n\t[ vi_cv_path_python_conf=\"${withval}\" ] )\n\n      AC_CACHE_CHECK(Python's configuration directory,vi_cv_path_python_conf,\n      [\n\tvi_cv_path_python_conf=\n\td=`${vi_cv_path_python} -c \"import distutils.sysconfig; print distutils.sysconfig.get_config_var('LIBPL')\"`\n\tif test -d \"$d\" && test -f \"$d/config.c\"; then\n\t  vi_cv_path_python_conf=\"$d\"\n\telse\n\t  for path in \"${vi_cv_path_python_pfx}\" \"${vi_cv_path_python_epfx}\"; do\n\t    for subdir in lib64 lib share; do\n\t      d=\"${path}/${subdir}/python${vi_cv_var_python_version}/config\"\n\t      if test -d \"$d\" && test -f \"$d/config.c\"; then\n\t\tvi_cv_path_python_conf=\"$d\"\n\t      fi\n\t    done\n\t  done\n\tfi\n      ])\n\n      PYTHON_CONFDIR=\"${vi_cv_path_python_conf}\"\n\n      if test \"X$PYTHON_CONFDIR\" = \"X\"; then\n\tAC_MSG_RESULT([can't find it!])\n      else\n\n\tdnl -- we need to examine Python's config/Makefile too\n\tdnl    see what the interpreter is built from\n\tAC_CACHE_VAL(vi_cv_path_python_plibs,\n\t[\n\t    pwd=`pwd`\n\t    tmp_mkf=\"$pwd/config-PyMake$$\"\n\t    cat -- \"${PYTHON_CONFDIR}/Makefile\" - <<'eof' >\"${tmp_mkf}\"\n__:\n\t@echo \"python_BASEMODLIBS='$(BASEMODLIBS)'\"\n\t@echo \"python_LIBS='$(LIBS)'\"\n\t@echo \"python_SYSLIBS='$(SYSLIBS)'\"\n\t@echo \"python_LINKFORSHARED='$(LINKFORSHARED)'\"\n\t@echo \"python_DLLLIBRARY='$(DLLLIBRARY)'\"\n\t@echo \"python_INSTSONAME='$(INSTSONAME)'\"\n\t@echo \"python_PYTHONFRAMEWORK='$(PYTHONFRAMEWORK)'\"\n\t@echo \"python_PYTHONFRAMEWORKPREFIX='$(PYTHONFRAMEWORKPREFIX)'\"\n\t@echo \"python_PYTHONFRAMEWORKINSTALLDIR='$(PYTHONFRAMEWORKINSTALLDIR)'\"\neof\n\t    dnl -- delete the lines from make about Entering/Leaving directory\n\t    eval \"`cd ${PYTHON_CONFDIR} && make -f \"${tmp_mkf}\" __ | sed '/ directory /d'`\"\n\t    rm -f -- \"${tmp_mkf}\"\n\t    if test \"x$MACOSX\" = \"xyes\" && test -n \"${python_PYTHONFRAMEWORK}\" && ${vi_cv_path_python} -c \\\n\t\t\"import sys; sys.exit(${vi_cv_var_python_version} < 2.3)\"; then\n\t      vi_cv_path_python_plibs=\"-framework Python\"\n\t      if test \"x${vi_cv_path_python}\" != \"x/usr/bin/python\" && test -n \"${python_PYTHONFRAMEWORKPREFIX}\"; then\n\t\t  vi_cv_path_python_plibs=\"-F${python_PYTHONFRAMEWORKPREFIX} -framework Python\"\n\t      fi\n\t    else\n\t      if test \"${vi_cv_var_python_version}\" = \"1.4\"; then\n\t\t  vi_cv_path_python_plibs=\"${PYTHON_CONFDIR}/libModules.a ${PYTHON_CONFDIR}/libPython.a ${PYTHON_CONFDIR}/libObjects.a ${PYTHON_CONFDIR}/libParser.a\"\n\t      else\n\t\t  vi_cv_path_python_plibs=\"-L${PYTHON_CONFDIR} -lpython${vi_cv_var_python_version}\"\n\t      fi\n\t      dnl -- Check if the path contained in python_LINKFORSHARED is\n\t      dnl    usable for vim build. If not, make and try other\n\t      dnl    candidates.\n\t      if test -n \"${python_LINKFORSHARED}\" && test -n \"${python_PYTHONFRAMEWORKPREFIX}\"; then\n\t        python_link_symbol=`echo ${python_LINKFORSHARED} | sed 's/\\([[^ \\t]][[^ \\t]]*[[ \\t]][[ \\t]]*[[^ \\t]][[^ \\t]]*\\)[[ \\t]].*/\\1/'`\n\t\tpython_link_path=`echo ${python_LINKFORSHARED} |   sed 's/\\([[^ \\t]][[^ \\t]]*[[ \\t]][[ \\t]]*[[^ \\t]][[^ \\t]]*\\)[[ \\t]][[ \\t]]*\\(.*\\)/\\2/'`\n\t        if test -n \"${python_link_path}\" && ! test -x \"${python_link_path}\"; then\n\t          dnl -- The path looks relative. Guess the absolute one using\n\t\t  dnl    the prefix and try that.\n\t          python_link_path=\"${python_PYTHONFRAMEWORKPREFIX}/${python_link_path}\"\n\t\t  if test -n \"${python_link_path}\" && ! test -x \"${python_link_path}\"; then\n\t\t    dnl -- A last resort.\n\t\t    python_link_path=\"${python_PYTHONFRAMEWORKINSTALLDIR}/Versions/${vi_cv_var_python_version}/${python_PYTHONFRAMEWORK}\"\n\t            dnl -- No check is done. The last word is left to the\n\t            dnl    \"sanity\" test on link flags that follows shortly.\n\t\t  fi\n\t          python_LINKFORSHARED=\"${python_link_symbol} ${python_link_path}\"\n\t        fi\n\t      fi\n\t      vi_cv_path_python_plibs=\"${vi_cv_path_python_plibs} ${python_BASEMODLIBS} ${python_LIBS} ${python_SYSLIBS} ${python_LINKFORSHARED}\"\n\t      dnl remove -ltermcap, it can conflict with an earlier -lncurses\n\t      vi_cv_path_python_plibs=`echo $vi_cv_path_python_plibs | sed s/-ltermcap//`\n\t    fi\n\t])\n\tAC_CACHE_CHECK(Python's dll name,vi_cv_dll_name_python,\n\t[\n\t  if test \"X$python_DLLLIBRARY\" != \"X\"; then\n\t    vi_cv_dll_name_python=\"$python_DLLLIBRARY\"\n\t  else\n\t    vi_cv_dll_name_python=\"$python_INSTSONAME\"\n\t  fi\n\t])\n\n\tPYTHON_LIBS=\"${vi_cv_path_python_plibs}\"\n\tif test \"${vi_cv_path_python_pfx}\" = \"${vi_cv_path_python_epfx}\"; then\n\t  PYTHON_CFLAGS=\"-I${vi_cv_path_python_pfx}/include/python${vi_cv_var_python_version} -DPYTHON_HOME='\\\"${vi_cv_path_python_pfx}\\\"'\"\n\telse\n\t  PYTHON_CFLAGS=\"-I${vi_cv_path_python_pfx}/include/python${vi_cv_var_python_version} -I${vi_cv_path_python_epfx}/include/python${vi_cv_var_python_version} -DPYTHON_HOME='\\\"${vi_cv_path_python_pfx}\\\"'\"\n\tfi\n\tPYTHON_SRC=\"if_python.c\"\n\tPYTHON_OBJ=\"objects/if_python.o\"\n\tif test \"${vi_cv_var_python_version}\" = \"1.4\"; then\n\t   PYTHON_OBJ=\"$PYTHON_OBJ objects/py_getpath.o\"\n\tfi\n    PYTHON_GETPATH_CFLAGS=\"-DPYTHONPATH='\\\"${vi_cv_path_pythonpath}\\\"' -DPREFIX='\\\"${vi_cv_path_python_pfx}\\\"' -DEXEC_PREFIX='\\\"${vi_cv_path_python_epfx}\\\"'\"\n\n\tdnl On FreeBSD linking with \"-pthread\" is required to use threads.\n\tdnl _THREAD_SAFE must be used for compiling then.\n\tdnl The \"-pthread\" is added to $LIBS, so that the following check for\n\tdnl sigaltstack() will look in libc_r (it's there in libc!).\n\tdnl Otherwise, when using GCC, try adding -pthread to $CFLAGS.  GCC\n\tdnl will then define target-specific defines, e.g., -D_REENTRANT.\n\tdnl Don't do this for Mac OSX, -pthread will generate a warning.\n\tAC_MSG_CHECKING([if -pthread should be used])\n\tthreadsafe_flag=\n\tthread_lib=\n\tdnl if test \"x$MACOSX\" != \"xyes\"; then\n        if test \"`(uname) 2>/dev/null`\" != Darwin; then\n\t  test \"$GCC\" = yes && threadsafe_flag=\"-pthread\"\n\t  if test \"`(uname) 2>/dev/null`\" = FreeBSD; then\n\t    threadsafe_flag=\"-D_THREAD_SAFE\"\n\t    thread_lib=\"-pthread\"\n\t  fi\n\t  if test \"`(uname) 2>/dev/null`\" = SunOS; then\n\t    threadsafe_flag=\"-pthreads\"\n\t  fi\n\tfi\n\tlibs_save_old=$LIBS\n\tif test -n \"$threadsafe_flag\"; then\n\t  cflags_save=$CFLAGS\n\t  CFLAGS=\"$CFLAGS $threadsafe_flag\"\n\t  LIBS=\"$LIBS $thread_lib\"\n\t  AC_TRY_LINK(,[ ],\n\t     AC_MSG_RESULT(yes); PYTHON_CFLAGS=\"$PYTHON_CFLAGS $threadsafe_flag\",\n\t     AC_MSG_RESULT(no); LIBS=$libs_save_old\n\t     )\n\t  CFLAGS=$cflags_save\n\telse\n\t  AC_MSG_RESULT(no)\n\tfi\n\n\tdnl Check that compiling a simple program still works with the flags\n\tdnl added for Python.\n\tAC_MSG_CHECKING([if compile and link flags for Python are sane])\n\tcflags_save=$CFLAGS\n\tlibs_save=$LIBS\n\tCFLAGS=\"$CFLAGS $PYTHON_CFLAGS\"\n\tLIBS=\"$LIBS $PYTHON_LIBS\"\n\tAC_TRY_LINK(,[ ],\n\t       AC_MSG_RESULT(yes); python_ok=yes,\n\t       AC_MSG_RESULT(no: PYTHON DISABLED); python_ok=no)\n\tCFLAGS=$cflags_save\n\tLIBS=$libs_save\n\tif test $python_ok = yes; then\n\t  AC_DEFINE(FEAT_PYTHON)\n\telse\n\t  LIBS=$libs_save_old\n\t  PYTHON_SRC=\n\t  PYTHON_OBJ=\n\t  PYTHON_LIBS=\n\t  PYTHON_CFLAGS=\n\tfi\n      fi\n    else\n      AC_MSG_RESULT(too old)\n    fi\n  fi\n\n  if test \"$fail_if_missing\" = \"yes\" -a \"$python_ok\" != \"yes\"; then\n    AC_MSG_ERROR([could not configure python])\n  fi\nfi\n\nAC_SUBST(PYTHON_CONFDIR)\nAC_SUBST(PYTHON_LIBS)\nAC_SUBST(PYTHON_GETPATH_CFLAGS)\nAC_SUBST(PYTHON_CFLAGS)\nAC_SUBST(PYTHON_SRC)\nAC_SUBST(PYTHON_OBJ)\n\n\nAC_MSG_CHECKING(--enable-python3interp argument)\nAC_ARG_ENABLE(python3interp,\n\t[  --enable-python3interp[=OPTS]   Include Python3 interpreter. [default=no] [OPTS=no/yes/dynamic]], ,\n\t[enable_python3interp=\"no\"])\nAC_MSG_RESULT($enable_python3interp)\nif test \"$enable_python3interp\" = \"yes\" -o \"$enable_python3interp\" = \"dynamic\"; then\n  if test \"x$features\" = \"xtiny\" -o \"x$features\" = \"xsmall\"; then\n    AC_MSG_ERROR([cannot use Python with tiny or small features])\n  fi\n\n  dnl -- find the python3 executable\n  AC_PATH_PROGS(vi_cv_path_python3, python3 python)\n  if test \"X$vi_cv_path_python3\" != \"X\"; then\n\n    dnl -- get its version number\n    AC_CACHE_CHECK(Python version,vi_cv_var_python3_version,\n    [[vi_cv_var_python3_version=`\n          ${vi_cv_path_python3} -c 'import sys; print(sys.version[:3])'`\n    ]])\n\n    dnl -- it must be at least version 3\n    AC_MSG_CHECKING(Python is 3.0 or better)\n    if ${vi_cv_path_python3} -c \\\n      \"import sys; sys.exit(${vi_cv_var_python3_version} < 3.0)\"\n    then\n      AC_MSG_RESULT(yep)\n\n      dnl -- get abiflags for python 3.2 or higher (PEP 3149)\n      AC_CACHE_CHECK(Python's abiflags,vi_cv_var_python3_abiflags,\n      [\n       vi_cv_var_python3_abiflags=\n       if ${vi_cv_path_python3} -c \\\n           \"import sys; sys.exit(${vi_cv_var_python3_version} < 3.2)\"\n       then\n         vi_cv_var_python3_abiflags=`${vi_cv_path_python3} -c \\    \n           \"import sys; print(sys.abiflags)\"`\n       fi ])\n  \n      dnl -- find where python3 thinks it was installed\n      AC_CACHE_CHECK(Python's install prefix,vi_cv_path_python3_pfx,\n      [ vi_cv_path_python3_pfx=`\n       ${vi_cv_path_python3} -c \\\n       \"import sys; print(sys.prefix)\"` ])\n  \n      dnl -- and where it thinks it runs\n      AC_CACHE_CHECK(Python's execution prefix,vi_cv_path_python3_epfx,\n      [ vi_cv_path_python3_epfx=`\n       ${vi_cv_path_python3} -c \\\n       \"import sys; print(sys.exec_prefix)\"` ])\n  \n      dnl -- python3's internal library path\n  \n      AC_CACHE_VAL(vi_cv_path_python3path,\n      [ vi_cv_path_python3path=`\n       unset PYTHONPATH;\n       ${vi_cv_path_python3} -c \\\n       \"import sys, string; print(':'.join(sys.path))\"` ])\n  \n      dnl -- where the Python implementation library archives are\n  \n      AC_ARG_WITH(python3-config-dir,\n       [  --with-python3-config-dir=PATH  Python's config directory],\n       [ vi_cv_path_python3_conf=\"${withval}\" ] )\n  \n      AC_CACHE_CHECK(Python's configuration directory,vi_cv_path_python3_conf,\n      [\n       vi_cv_path_python3_conf=\n       config_dir=\"config-${vi_cv_var_python3_version}${vi_cv_var_python3_abiflags}\"\n       d=`${vi_cv_path_python3} -c \"import distutils.sysconfig; print(distutils.sysconfig.get_config_var('LIBPL'))\"`\n       if test -d \"$d\" && test -f \"$d/config.c\"; then\n         vi_cv_path_python3_conf=\"$d\"\n       else\n         for path in \"${vi_cv_path_python3_pfx}\" \"${vi_cv_path_python3_epfx}\"; do\n\t   for subdir in lib64 lib share; do\n\t     d=\"${path}/${subdir}/python${vi_cv_var_python3_version}/${config_dir}\"\n\t     if test -d \"$d\" && test -f \"$d/config.c\"; then\n\t       vi_cv_path_python3_conf=\"$d\"\n\t     fi\n\t   done\n         done\n       fi\n      ])\n  \n      PYTHON3_CONFDIR=\"${vi_cv_path_python3_conf}\"\n  \n      if test \"X$PYTHON3_CONFDIR\" = \"X\"; then\n        AC_MSG_RESULT([can't find it!])\n      else\n  \n        dnl -- we need to examine Python's config/Makefile too\n        dnl    see what the interpreter is built from\n        AC_CACHE_VAL(vi_cv_path_python3_plibs,\n        [\n            pwd=`pwd`\n            tmp_mkf=\"$pwd/config-PyMake$$\"\n            cat -- \"${PYTHON3_CONFDIR}/Makefile\" - <<'eof' >\"${tmp_mkf}\"\n__:\n\t@echo \"python3_BASEMODLIBS='$(BASEMODLIBS)'\"\n\t@echo \"python3_LIBS='$(LIBS)'\"\n\t@echo \"python3_SYSLIBS='$(SYSLIBS)'\"\n\t@echo \"python3_DLLLIBRARY='$(DLLLIBRARY)'\"\n\t@echo \"python3_INSTSONAME='$(INSTSONAME)'\"\neof\n\t    dnl -- delete the lines from make about Entering/Leaving directory\n\t    eval \"`cd ${PYTHON3_CONFDIR} && make -f \"${tmp_mkf}\" __ | sed '/ directory /d'`\"\n\t    rm -f -- \"${tmp_mkf}\"\n\t    vi_cv_path_python3_plibs=\"-L${PYTHON3_CONFDIR} -lpython${vi_cv_var_python3_version}${vi_cv_var_python3_abiflags}\"\n\t    vi_cv_path_python3_plibs=\"${vi_cv_path_python3_plibs} ${python3_BASEMODLIBS} ${python3_LIBS} ${python3_SYSLIBS}\"\n\t    dnl remove -ltermcap, it can conflict with an earlier -lncurses\n\t    vi_cv_path_python3_plibs=`echo $vi_cv_path_python3_plibs | sed s/-ltermcap//`\n\t    vi_cv_path_python3_plibs=`echo $vi_cv_path_python3_plibs | sed s/-lffi//`\n\t])\n\tAC_CACHE_CHECK(Python3's dll name,vi_cv_dll_name_python3,\n\t[\n\t  if test \"X$python3_DLLLIBRARY\" != \"X\"; then\n\t    vi_cv_dll_name_python3=\"$python3_DLLLIBRARY\"\n\t  else\n\t    vi_cv_dll_name_python3=\"$python3_INSTSONAME\"\n\t  fi\n\t])\n\n        PYTHON3_LIBS=\"${vi_cv_path_python3_plibs}\"\n        if test \"${vi_cv_path_python3_pfx}\" = \"${vi_cv_path_python3_epfx}\"; then\n          PYTHON3_CFLAGS=\"-I${vi_cv_path_python3_pfx}/include/python${vi_cv_var_python3_version}${vi_cv_var_python3_abiflags} -DPYTHON3_HOME='L\\\"${vi_cv_path_python3_pfx}\\\"'\"\n        else\n          PYTHON3_CFLAGS=\"-I${vi_cv_path_python3_pfx}/include/python${vi_cv_var_python3_version}${vi_cv_var_python3_abiflags} -I${vi_cv_path_python3_epfx}/include/python${vi_cv_var_python3_version}${vi_cv_var_python3_abiflags} -DPYTHON3_HOME='L\\\"${vi_cv_path_python3_pfx}\\\"'\"\n        fi\n        PYTHON3_SRC=\"if_python3.c\"\n        PYTHON3_OBJ=\"objects/if_python3.o\"\n  \n        dnl On FreeBSD linking with \"-pthread\" is required to use threads.\n        dnl _THREAD_SAFE must be used for compiling then.\n        dnl The \"-pthread\" is added to $LIBS, so that the following check for\n        dnl sigaltstack() will look in libc_r (it's there in libc!).\n        dnl Otherwise, when using GCC, try adding -pthread to $CFLAGS.  GCC\n        dnl will then define target-specific defines, e.g., -D_REENTRANT.\n        dnl Don't do this for Mac OSX, -pthread will generate a warning.\n        AC_MSG_CHECKING([if -pthread should be used])\n        threadsafe_flag=\n        thread_lib=\n        dnl if test \"x$MACOSX\" != \"xyes\"; then\n        if test \"`(uname) 2>/dev/null`\" != Darwin; then\n          test \"$GCC\" = yes && threadsafe_flag=\"-pthread\"\n          if test \"`(uname) 2>/dev/null`\" = FreeBSD; then\n            threadsafe_flag=\"-D_THREAD_SAFE\"\n            thread_lib=\"-pthread\"\n          fi\n          if test \"`(uname) 2>/dev/null`\" = SunOS; then\n            threadsafe_flag=\"-pthreads\"\n          fi\n        fi\n        libs_save_old=$LIBS\n        if test -n \"$threadsafe_flag\"; then\n          cflags_save=$CFLAGS\n          CFLAGS=\"$CFLAGS $threadsafe_flag\"\n          LIBS=\"$LIBS $thread_lib\"\n          AC_TRY_LINK(,[ ],\n             AC_MSG_RESULT(yes); PYTHON3_CFLAGS=\"$PYTHON3_CFLAGS $threadsafe_flag\",\n             AC_MSG_RESULT(no); LIBS=$libs_save_old\n             )\n          CFLAGS=$cflags_save\n        else\n          AC_MSG_RESULT(no)\n        fi\n  \n        dnl check that compiling a simple program still works with the flags\n        dnl added for Python.\n        AC_MSG_CHECKING([if compile and link flags for Python 3 are sane])\n        cflags_save=$CFLAGS\n        libs_save=$LIBS\n        CFLAGS=\"$CFLAGS $PYTHON3_CFLAGS\"\n        LIBS=\"$LIBS $PYTHON3_LIBS\"\n        AC_TRY_LINK(,[ ],\n               AC_MSG_RESULT(yes); python3_ok=yes,\n               AC_MSG_RESULT(no: PYTHON3 DISABLED); python3_ok=no)\n        CFLAGS=$cflags_save\n        LIBS=$libs_save\n        if test \"$python3_ok\" = yes; then\n          AC_DEFINE(FEAT_PYTHON3)\n        else\n          LIBS=$libs_save_old\n          PYTHON3_SRC=\n          PYTHON3_OBJ=\n          PYTHON3_LIBS=\n          PYTHON3_CFLAGS=\n        fi\n      fi\n    else\n      AC_MSG_RESULT(too old)\n    fi\n  fi\n  if test \"$fail_if_missing\" = \"yes\" -a \"$python3_ok\" != \"yes\"; then\n    AC_MSG_ERROR([could not configure python3])\n  fi\nfi\n\nAC_SUBST(PYTHON3_CONFDIR)\nAC_SUBST(PYTHON3_LIBS)\nAC_SUBST(PYTHON3_CFLAGS)\nAC_SUBST(PYTHON3_SRC)\nAC_SUBST(PYTHON3_OBJ)\n\ndnl if python2.x and python3.x are enabled one can only link in code\ndnl with dlopen(), dlsym(), dlclose() \nif test \"$python_ok\" = yes && test \"$python3_ok\" = yes; then\n  AC_DEFINE(DYNAMIC_PYTHON)\n  AC_DEFINE(DYNAMIC_PYTHON3)\n  AC_MSG_CHECKING(whether we can do without RTLD_GLOBAL for Python)\n  cflags_save=$CFLAGS\n  CFLAGS=\"$CFLAGS $PYTHON_CFLAGS\"\n  libs_save=$LIBS\n  dnl -ldl must go first to make this work on Archlinux (Roland Puntaier)\n  LIBS=\"-ldl $LIBS\"\n  AC_RUN_IFELSE([AC_LANG_SOURCE([\n    #include <dlfcn.h>\n    /* If this program fails, then RTLD_GLOBAL is needed.\n     * RTLD_GLOBAL will be used and then it is not possible to\n     * have both python versions enabled in the same vim instance.\n     * Only the first python version used will be switched on.\n     */\n\n    int no_rtl_global_needed_for(char *python_instsoname, char *prefix)\n    {\n      int needed = 0;\n      void* pylib = dlopen(python_instsoname, RTLD_LAZY|RTLD_LOCAL);\n      if (pylib != 0)\n      {\n          void (*pfx)(char *home) = dlsym(pylib, \"Py_SetPythonHome\");\n          void (*init)(void) = dlsym(pylib, \"Py_Initialize\");\n          int (*simple)(char*) = dlsym(pylib, \"PyRun_SimpleString\");\n          void (*final)(void) = dlsym(pylib, \"Py_Finalize\");\n          (*pfx)(prefix);\n          (*init)();\n          needed = (*simple)(\"import termios\") == -1;\n          (*final)();\n          dlclose(pylib);\n      }\n      return !needed;\n    }\n\n    int main(int argc, char** argv)\n    {\n      int not_needed = 0;\n      if (no_rtl_global_needed_for(\"${vi_cv_dll_name_python}\", \"${vi_cv_path_python_pfx}\"))\n            not_needed = 1;\n      return !not_needed;\n    }])],\n    [AC_MSG_RESULT(yes);AC_DEFINE(PY_NO_RTLD_GLOBAL)], [AC_MSG_RESULT(no)])\n\n  CFLAGS=$cflags_save\n  LIBS=$libs_save\n\n  AC_MSG_CHECKING(whether we can do without RTLD_GLOBAL for Python3)\n  cflags_save=$CFLAGS\n  CFLAGS=\"$CFLAGS $PYTHON3_CFLAGS\"\n  libs_save=$LIBS\n  dnl -ldl must go first to make this work on Archlinux (Roland Puntaier)\n  LIBS=\"-ldl $LIBS\"\n  AC_RUN_IFELSE([AC_LANG_SOURCE([\n    #include <dlfcn.h>\n    #include <wchar.h>\n    /* If this program fails, then RTLD_GLOBAL is needed.\n     * RTLD_GLOBAL will be used and then it is not possible to\n     * have both python versions enabled in the same vim instance.\n     * Only the first python version used will be switched on.\n     */\n\n    int no_rtl_global_needed_for(char *python_instsoname, wchar_t *prefix)\n    {\n      int needed = 0;\n      void* pylib = dlopen(python_instsoname, RTLD_LAZY|RTLD_LOCAL);\n      if (pylib != 0)\n      {\n          void (*pfx)(wchar_t *home) = dlsym(pylib, \"Py_SetPythonHome\");\n          void (*init)(void) = dlsym(pylib, \"Py_Initialize\");\n          int (*simple)(char*) = dlsym(pylib, \"PyRun_SimpleString\");\n          void (*final)(void) = dlsym(pylib, \"Py_Finalize\");\n          (*pfx)(prefix);\n          (*init)();\n          needed = (*simple)(\"import termios\") == -1;\n          (*final)();\n          dlclose(pylib);\n      }\n      return !needed;\n    }\n\n    int main(int argc, char** argv)\n    {\n      int not_needed = 0;\n      if (no_rtl_global_needed_for(\"${vi_cv_dll_name_python3}\", L\"${vi_cv_path_python3_pfx}\"))\n            not_needed = 1;\n      return !not_needed;\n    }])],\n    [AC_MSG_RESULT(yes);AC_DEFINE(PY3_NO_RTLD_GLOBAL)], [AC_MSG_RESULT(no)])\n\n  CFLAGS=$cflags_save\n  LIBS=$libs_save\n\n  PYTHON_SRC=\"if_python.c\"\n  PYTHON_OBJ=\"objects/if_python.o\"\n  PYTHON_CFLAGS=\"$PYTHON_CFLAGS -DDYNAMIC_PYTHON_DLL=\\\\\\\"${vi_cv_dll_name_python}\\\\\\\"\"\n  PYTHON_LIBS=\n  PYTHON3_SRC=\"if_python3.c\"\n  PYTHON3_OBJ=\"objects/if_python3.o\"\n  PYTHON3_CFLAGS=\"$PYTHON3_CFLAGS -DDYNAMIC_PYTHON3_DLL=\\\\\\\"${vi_cv_dll_name_python3}\\\\\\\"\"\n  PYTHON3_LIBS=\nelif test \"$python_ok\" = yes && test \"$enable_pythoninterp\" = \"dynamic\"; then\n  AC_DEFINE(DYNAMIC_PYTHON)\n  PYTHON_SRC=\"if_python.c\"\n  PYTHON_OBJ=\"objects/if_python.o\"\n  PYTHON_CFLAGS=\"$PYTHON_CFLAGS -DDYNAMIC_PYTHON_DLL=\\\\\\\"${vi_cv_dll_name_python}\\\\\\\"\"\n  PYTHON_LIBS=\nelif test \"$python_ok\" = yes; then\n  dnl Check that adding -fPIE works.  It may be needed when using a static\n  dnl Python library.\n  AC_MSG_CHECKING([if -fPIE can be added for Python])\n  cflags_save=$CFLAGS\n  libs_save=$LIBS\n  CFLAGS=\"$CFLAGS $PYTHON_CFLAGS -fPIE\"\n  LIBS=\"$LIBS $PYTHON_LIBS\"\n  AC_TRY_LINK(,[ ],\n\t AC_MSG_RESULT(yes); fpie_ok=yes,\n\t AC_MSG_RESULT(no); fpie_ok=no)\n  CFLAGS=$cflags_save\n  LIBS=$libs_save\n  if test $fpie_ok = yes; then\n    PYTHON_CFLAGS=\"$PYTHON_CFLAGS -fPIE\"\n  fi\nelif test \"$python3_ok\" = yes && test \"$enable_python3interp\" = \"dynamic\"; then\n  AC_DEFINE(DYNAMIC_PYTHON3)\n  PYTHON3_SRC=\"if_python3.c\"\n  PYTHON3_OBJ=\"objects/if_python3.o\"\n  PYTHON3_CFLAGS=\"$PYTHON3_CFLAGS -DDYNAMIC_PYTHON3_DLL=\\\\\\\"${vi_cv_dll_name_python3}\\\\\\\"\"\n  PYTHON3_LIBS=\nelif test \"$python3_ok\" = yes; then\n  dnl Check that adding -fPIE works.  It may be needed when using a static\n  dnl Python library.\n  AC_MSG_CHECKING([if -fPIE can be added for Python3])\n  cflags_save=$CFLAGS\n  libs_save=$LIBS\n  CFLAGS=\"$CFLAGS $PYTHON3_CFLAGS -fPIE\"\n  LIBS=\"$LIBS $PYTHON3_LIBS\"\n  AC_TRY_LINK(,[ ],\n\t AC_MSG_RESULT(yes); fpie_ok=yes,\n\t AC_MSG_RESULT(no); fpie_ok=no)\n  CFLAGS=$cflags_save\n  LIBS=$libs_save\n  if test $fpie_ok = yes; then\n    PYTHON3_CFLAGS=\"$PYTHON3_CFLAGS -fPIE\"\n  fi\nfi\n\nAC_MSG_CHECKING(--enable-tclinterp argument)\nAC_ARG_ENABLE(tclinterp,\n\t[  --enable-tclinterp[=OPTS]      Include Tcl interpreter. [default=no] [OPTS=no/yes/dynamic]], ,\n\t[enable_tclinterp=\"no\"])\nAC_MSG_RESULT($enable_tclinterp)\n\nif test \"$enable_tclinterp\" = \"yes\" -o \"$enable_tclinterp\" = \"dynamic\"; then\n\n  dnl on FreeBSD tclsh is a silly script, look for tclsh8.[5420]\n  AC_MSG_CHECKING(--with-tclsh argument)\n  AC_ARG_WITH(tclsh, [  --with-tclsh=PATH       which tclsh to use (default: tclsh8.0)],\n\ttclsh_name=\"$withval\"; AC_MSG_RESULT($tclsh_name),\n\ttclsh_name=\"tclsh8.5\"; AC_MSG_RESULT(no))\n  AC_PATH_PROG(vi_cv_path_tcl, $tclsh_name)\n  AC_SUBST(vi_cv_path_tcl)\n\n  dnl when no specific version specified, also try 8.4, 8.2 and 8.0\n  if test \"X$vi_cv_path_tcl\" = \"X\" -a $tclsh_name = \"tclsh8.5\"; then\n    tclsh_name=\"tclsh8.4\"\n    AC_PATH_PROG(vi_cv_path_tcl, $tclsh_name)\n  fi\n  if test \"X$vi_cv_path_tcl\" = \"X\" -a $tclsh_name = \"tclsh8.4\"; then\n    tclsh_name=\"tclsh8.2\"\n    AC_PATH_PROG(vi_cv_path_tcl, $tclsh_name)\n  fi\n  if test \"X$vi_cv_path_tcl\" = \"X\" -a $tclsh_name = \"tclsh8.2\"; then\n    tclsh_name=\"tclsh8.0\"\n    AC_PATH_PROG(vi_cv_path_tcl, $tclsh_name)\n  fi\n  dnl still didn't find it, try without version number\n  if test \"X$vi_cv_path_tcl\" = \"X\"; then\n    tclsh_name=\"tclsh\"\n    AC_PATH_PROG(vi_cv_path_tcl, $tclsh_name)\n  fi\n  if test \"X$vi_cv_path_tcl\" != \"X\"; then\n    AC_MSG_CHECKING(Tcl version)\n    if echo 'exit [[expr [info tclversion] < 8.0]]' | \"$vi_cv_path_tcl\" - ; then\n      tclver=`echo 'puts [[info tclversion]]' | $vi_cv_path_tcl -`\n      AC_MSG_RESULT($tclver - OK);\n      tclloc=`echo 'set l [[info library]];set i [[string last lib $l]];incr i -2;puts [[string range $l 0 $i]]' | $vi_cv_path_tcl -`\n      tcldll=`echo 'puts libtcl[[info tclversion]][[info sharedlibextension]]' | $vi_cv_path_tcl -`\n\n      AC_MSG_CHECKING(for location of Tcl include)\n      if test \"x$MACOSX\" != \"xyes\"; then\n\ttclinc=\"$tclloc/include $tclloc/include/tcl $tclloc/include/tcl$tclver /usr/local/include /usr/local/include/tcl$tclver /usr/include /usr/include/tcl$tclver\"\n      else\n\tdnl For Mac OS X 10.3, use the OS-provided framework location\n\ttclinc=\"/System/Library/Frameworks/Tcl.framework/Headers\"\n      fi\n      TCL_INC=\n      for try in $tclinc; do\n\tif test -f \"$try/tcl.h\"; then\n\t  AC_MSG_RESULT($try/tcl.h)\n\t  TCL_INC=$try\n\t  break\n\tfi\n      done\n      if test -z \"$TCL_INC\"; then\n\tAC_MSG_RESULT(<not found>)\n\tSKIP_TCL=YES\n      fi\n      if test -z \"$SKIP_TCL\"; then\n\tAC_MSG_CHECKING(for location of tclConfig.sh script)\n\tif test \"x$MACOSX\" != \"xyes\"; then\n\t  tclcnf=`echo $tclinc | sed s/include/lib/g`\n\t  tclcnf=\"$tclcnf `echo $tclinc | sed s/include/lib64/g`\"\n\telse\n\t  dnl For Mac OS X 10.3, use the OS-provided framework location\n\t  tclcnf=\"/System/Library/Frameworks/Tcl.framework\"\n\tfi\n\tfor try in $tclcnf; do\n\t  if test -f \"$try/tclConfig.sh\"; then\n\t    AC_MSG_RESULT($try/tclConfig.sh)\n\t    . \"$try/tclConfig.sh\"\n\t    dnl use eval, because tcl 8.2 includes ${TCL_DBGX}\n\t    if test \"$enable_tclinterp\" = \"dynamic\"; then\n\t      TCL_LIBS=`eval echo \"$TCL_STUB_LIB_SPEC $TCL_LIBS\"`\n\t    else\n\t      TCL_LIBS=`eval echo \"$TCL_LIB_SPEC $TCL_LIBS\"`\n\t    fi\n\t    dnl Use $TCL_DEFS for -D_THREAD_SAFE et al.  But only use the\n\t    dnl \"-D_ABC\" items.  Watch out for -DFOO=long\\ long.\n\t    TCL_DEFS=`echo $TCL_DEFS | sed -e 's/\\\\\\\\ /\\\\\\\\X/g' | tr ' ' '\\012' | sed -e '/^[[^-]]/d' -e '/^-[[^D]]/d' -e '/-D[[^_]]/d' -e 's/-D_/ -D_/' | tr '\\012' ' ' | sed -e 's/\\\\\\\\X/\\\\\\\\ /g'`\n\t    break\n\t  fi\n\tdone\n\tif test -z \"$TCL_LIBS\"; then\n\t  AC_MSG_RESULT(<not found>)\n\t  AC_MSG_CHECKING(for Tcl library by myself)\n\t  tcllib=`echo $tclinc | sed s/include/lib/g`\n\t  tcllib=\"$tcllib `echo $tclinc | sed s/include/lib64/g`\"\n\t  for ext in .so .a ; do\n\t    for ver in \"\" $tclver ; do\n\t      for try in $tcllib ; do\n\t\ttrylib=tcl$ver$ext\n\t\tif test -f \"$try/lib$trylib\" ; then\n\t\t  AC_MSG_RESULT($try/lib$trylib)\n\t\t  TCL_LIBS=\"-L\\\"$try\\\" -ltcl$ver -ldl -lm\"\n\t\t  if test \"`(uname) 2>/dev/null`\" = SunOS &&\n\t\t\t\t\t uname -r | grep '^5' >/dev/null; then\n\t\t    TCL_LIBS=\"$TCL_LIBS -R $try\"\n\t\t  fi\n\t\t  break 3\n\t\tfi\n\t      done\n\t    done\n\t  done\n\t  if test -z \"$TCL_LIBS\"; then\n\t    AC_MSG_RESULT(<not found>)\n\t    SKIP_TCL=YES\n\t  fi\n\tfi\n\tif test -z \"$SKIP_TCL\"; then\n\t  AC_DEFINE(FEAT_TCL)\n\t  TCL_SRC=if_tcl.c\n\t  TCL_OBJ=objects/if_tcl.o\n\t  TCL_PRO=if_tcl.pro\n\t  TCL_CFLAGS=\"-I$TCL_INC $TCL_DEFS\"\n\tfi\n      fi\n    else\n      AC_MSG_RESULT(too old; need Tcl version 8.0 or later)\n    fi\n  fi\n  if test \"$enable_tclinterp\" = \"dynamic\"; then\n    if test \"X$TCL_SRC\" != \"X\" -a \"X$tcldll\" != \"X\"; then\n      AC_DEFINE(DYNAMIC_TCL)\n      TCL_CFLAGS=\"-DDYNAMIC_TCL_DLL=\\\\\\\"$tcldll\\\\\\\" -DDYNAMIC_TCL_VER=\\\\\\\"$tclver\\\\\\\" $TCL_CFLAGS\"\n    fi\n  fi\n  if test \"$fail_if_missing\" = \"yes\" -a -z \"$TCL_SRC\"; then\n    AC_MSG_ERROR([could not configure Tcl])\n  fi\nfi\nAC_SUBST(TCL_SRC)\nAC_SUBST(TCL_OBJ)\nAC_SUBST(TCL_PRO)\nAC_SUBST(TCL_CFLAGS)\nAC_SUBST(TCL_LIBS)\n\nAC_MSG_CHECKING(--enable-rubyinterp argument)\nAC_ARG_ENABLE(rubyinterp,\n\t[  --enable-rubyinterp[=OPTS]     Include Ruby interpreter.  [default=no] [OPTS=no/yes/dynamic]], ,\n\t[enable_rubyinterp=\"no\"])\nAC_MSG_RESULT($enable_rubyinterp)\nif test \"$enable_rubyinterp\" = \"yes\" -o \"$enable_rubyinterp\" = \"dynamic\"; then\n  if test \"x$features\" = \"xtiny\" -o \"x$features\" = \"xsmall\"; then\n    AC_MSG_ERROR([cannot use Ruby with tiny or small features])\n  fi\n\n  AC_MSG_CHECKING(--with-ruby-command argument)\n  AC_SUBST(vi_cv_path_ruby)\n  AC_ARG_WITH(ruby-command, [  --with-ruby-command=RUBY  name of the Ruby command (default: ruby)],\n\tRUBY_CMD=\"$withval\"; vi_cv_path_ruby=\"$withval\"; AC_MSG_RESULT($RUBY_CMD),\n\tRUBY_CMD=\"ruby\"; AC_MSG_RESULT(defaulting to $RUBY_CMD))\n  AC_PATH_PROG(vi_cv_path_ruby, $RUBY_CMD)\n  if test \"X$vi_cv_path_ruby\" != \"X\"; then\n    AC_MSG_CHECKING(Ruby version)\n    if $vi_cv_path_ruby -e '(VERSION rescue RUBY_VERSION) >= \"1.6.0\" or exit 1' >/dev/null 2>/dev/null; then\n      AC_MSG_RESULT(OK)\n      AC_MSG_CHECKING(Ruby rbconfig)\n      ruby_rbconfig=\"RbConfig\"\n      if ! $vi_cv_path_ruby -r rbconfig -e 'RbConfig' >/dev/null 2>/dev/null; then\n\truby_rbconfig=\"Config\"\n      fi\n      AC_MSG_RESULT($ruby_rbconfig)\n      AC_MSG_CHECKING(Ruby header files)\n      rubyhdrdir=`$vi_cv_path_ruby -r mkmf -e \"print $ruby_rbconfig::CONFIG[['rubyhdrdir']] || $ruby_rbconfig::CONFIG[['archdir']] || \\\\$hdrdir\" 2>/dev/null`\n      if test \"X$rubyhdrdir\" != \"X\"; then\n\tAC_MSG_RESULT($rubyhdrdir)\n\tRUBY_CFLAGS=\"-I$rubyhdrdir\"\n        rubyarchdir=`$vi_cv_path_ruby -r rbconfig -e \"print ($ruby_rbconfig::CONFIG.has_key? 'rubyarchhdrdir') ? $ruby_rbconfig::CONFIG[['rubyarchhdrdir']] : '$rubyhdrdir/'+$ruby_rbconfig::CONFIG[['arch']]\"`\n        if test -d \"$rubyarchdir\"; then\n          RUBY_CFLAGS=\"$RUBY_CFLAGS -I$rubyarchdir\"\n        fi\n        rubyversion=`$vi_cv_path_ruby -r rbconfig -e \"print $ruby_rbconfig::CONFIG[['ruby_version']].gsub(/\\./, '')[[0,2]]\"`\n\tif test \"X$rubyversion\" = \"X\"; then\n\t  rubyversion=`$vi_cv_path_ruby -e \"print ((VERSION rescue RUBY_VERSION)).gsub(/\\./, '')[[0,2]]\"`\n\tfi\n        RUBY_CFLAGS=\"$RUBY_CFLAGS -DRUBY_VERSION=$rubyversion\"\n\trubylibs=`$vi_cv_path_ruby -r rbconfig -e \"print $ruby_rbconfig::CONFIG[['LIBS']]\"`\n\tif test \"X$rubylibs\" != \"X\"; then\n\t  RUBY_LIBS=\"$rubylibs\"\n\tfi\n\tlibrubyarg=`$vi_cv_path_ruby -r rbconfig -e \"print $ruby_rbconfig.expand($ruby_rbconfig::CONFIG[['LIBRUBYARG']])\"`\n\tlibrubya=`$vi_cv_path_ruby -r rbconfig -e \"print $ruby_rbconfig.expand($ruby_rbconfig::CONFIG[['LIBRUBY_A']])\"`\n\trubylibdir=`$vi_cv_path_ruby -r rbconfig -e \"print $ruby_rbconfig.expand($ruby_rbconfig::CONFIG[['libdir']])\"`\n\tif test -f \"$rubylibdir/$librubya\"; then\n\t  librubyarg=\"$librubyarg\"\n\t  RUBY_LIBS=\"$RUBY_LIBS -L$rubylibdir\"\n\telif test \"$librubyarg\" = \"libruby.a\"; then\n\t  dnl required on Mac OS 10.3 where libruby.a doesn't exist\n\t  librubyarg=\"-lruby\"\n\t  RUBY_LIBS=\"$RUBY_LIBS -L$rubylibdir\"\n\tfi\n\n\tif test \"X$librubyarg\" != \"X\"; then\n\t  RUBY_LIBS=\"$librubyarg $RUBY_LIBS\"\n\tfi\n\trubyldflags=`$vi_cv_path_ruby -r rbconfig -e \"print $ruby_rbconfig::CONFIG[['LDFLAGS']]\"`\n\tif test \"X$rubyldflags\" != \"X\"; then\n\t  dnl Ruby on Mac OS X 10.5 adds \"-arch\" flags but these should only\n\t  dnl be included if requested by passing --with-mac-arch to\n\t  dnl configure, so strip these flags first (if present)\n\t  rubyldflags=`echo \"$rubyldflags\" | sed -e 's/-arch\\ ppc//' -e 's/-arch\\ i386//' -e 's/-arch\\ x86_64//'`\n\t  if test \"X$rubyldflags\" != \"X\"; then\n\t    if test \"X`echo \\\"$LDFLAGS\\\" | $FGREP -e \\\"$rubyldflags\\\"`\" = \"X\"; then\n\t      LDFLAGS=\"$rubyldflags $LDFLAGS\"\n\t    fi\n\t  fi\n\tfi\n\tRUBY_SRC=\"if_ruby.c\"\n\tRUBY_OBJ=\"objects/if_ruby.o\"\n\tRUBY_PRO=\"if_ruby.pro\"\n\tAC_DEFINE(FEAT_RUBY)\n\tif test \"$enable_rubyinterp\" = \"dynamic\"; then\n\t  libruby=`$vi_cv_path_ruby -r rbconfig -e \"puts $ruby_rbconfig::CONFIG[['LIBRUBY_SO']]\"`\n\t  AC_DEFINE(DYNAMIC_RUBY)\n\t  RUBY_CFLAGS=\"-DDYNAMIC_RUBY_DLL=\\\\\\\"$libruby\\\\\\\" -DDYNAMIC_RUBY_VER=$rubyversion $RUBY_CFLAGS\"\n\t  RUBY_LIBS=\n\tfi\n      else\n\tAC_MSG_RESULT(not found; disabling Ruby)\n      fi\n    else\n      AC_MSG_RESULT(too old; need Ruby version 1.6.0 or later)\n    fi\n  fi\n\n  if test \"$fail_if_missing\" = \"yes\" -a -z \"$RUBY_OBJ\"; then\n    AC_MSG_ERROR([could not configure Ruby])\n  fi\nfi\nAC_SUBST(RUBY_SRC)\nAC_SUBST(RUBY_OBJ)\nAC_SUBST(RUBY_PRO)\nAC_SUBST(RUBY_CFLAGS)\nAC_SUBST(RUBY_LIBS)\n\nAC_MSG_CHECKING(--enable-cscope argument)\nAC_ARG_ENABLE(cscope,\n\t[  --enable-cscope         Include cscope interface.], ,\n\t[enable_cscope=\"no\"])\nAC_MSG_RESULT($enable_cscope)\nif test \"$enable_cscope\" = \"yes\"; then\n  AC_DEFINE(FEAT_CSCOPE)\nfi\n\nAC_MSG_CHECKING(--enable-workshop argument)\nAC_ARG_ENABLE(workshop,\n\t[  --enable-workshop       Include Sun Visual Workshop support.], ,\n\t[enable_workshop=\"no\"])\nAC_MSG_RESULT($enable_workshop)\nif test \"$enable_workshop\" = \"yes\"; then\n  AC_DEFINE(FEAT_SUN_WORKSHOP)\n  WORKSHOP_SRC=\"workshop.c integration.c\"\n  AC_SUBST(WORKSHOP_SRC)\n  WORKSHOP_OBJ=\"objects/workshop.o objects/integration.o\"\n  AC_SUBST(WORKSHOP_OBJ)\n  if test \"${enable_gui-xxx}\" = xxx; then\n    enable_gui=motif\n  fi\nfi\n\nAC_MSG_CHECKING(--disable-netbeans argument)\nAC_ARG_ENABLE(netbeans,\n\t[  --disable-netbeans      Disable NetBeans integration support.],\n\t, [enable_netbeans=\"yes\"])\nif test \"$enable_netbeans\" = \"yes\"; then\n  if test \"x$features\" = \"xtiny\" -o \"x$features\" = \"xsmall\"; then\n    AC_MSG_RESULT([cannot use NetBeans with tiny or small features])\n    enable_netbeans=\"no\"\n  else\n    AC_MSG_RESULT(no)\n  fi\nelse\n  AC_MSG_RESULT(yes)\nfi\n\nAC_MSG_CHECKING(--disable-channel argument)\nAC_ARG_ENABLE(channel,\n\t[  --disable-channel      Disable process communication support.],\n\t, [enable_channel=\"yes\"])\nif test \"$enable_channel\" = \"yes\"; then\n  if test \"x$features\" = \"xtiny\" -o \"x$features\" = \"xsmall\"; then\n    AC_MSG_RESULT([cannot use channels with tiny or small features])\n    enable_channel=\"no\"\n  else\n    AC_MSG_RESULT(no)\n  fi\nelse\n  if test \"$enable_netbeans\" = \"yes\"; then\n    AC_MSG_RESULT([yes, netbeans also disabled])\n    enable_netbeans=\"no\"\n  else\n    AC_MSG_RESULT(yes)\n  fi\nfi\n\nif test \"$enable_channel\" = \"yes\"; then\n  dnl On Solaris we need the socket and nsl library.\n  AC_CHECK_LIB(socket, socket)\n  AC_CHECK_LIB(nsl, gethostbyname)\n  AC_MSG_CHECKING(whether compiling with process communication is possible)\n  AC_TRY_LINK([\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdarg.h>\n#include <fcntl.h>\n#include <netdb.h>\n#include <netinet/in.h>\n#include <errno.h>\n#include <sys/types.h>\n#include <sys/socket.h>\n\t/* Check bitfields */\n\tstruct nbbuf {\n\tunsigned int  initDone:1;\n\tushort signmaplen;\n\t};\n\t    ], [\n\t\t/* Check creating a socket. */\n\t\tstruct sockaddr_in server;\n\t\t(void)socket(AF_INET, SOCK_STREAM, 0);\n\t\t(void)htons(100);\n\t\t(void)gethostbyname(\"microsoft.com\");\n\t\tif (errno == ECONNREFUSED)\n\t\t  (void)connect(1, (struct sockaddr *)&server, sizeof(server));\n\t    ],\n\tAC_MSG_RESULT(yes),\n\tAC_MSG_RESULT(no); enable_netbeans=\"no\"; enable_channel=\"no\")\nfi\nif test \"$enable_netbeans\" = \"yes\"; then\n  AC_DEFINE(FEAT_NETBEANS_INTG)\n  NETBEANS_SRC=\"netbeans.c\"\n  AC_SUBST(NETBEANS_SRC)\n  NETBEANS_OBJ=\"objects/netbeans.o\"\n  AC_SUBST(NETBEANS_OBJ)\nfi\nif test \"$enable_channel\" = \"yes\"; then\n  AC_DEFINE(FEAT_JOB_CHANNEL)\n  CHANNEL_SRC=\"channel.c\"\n  AC_SUBST(CHANNEL_SRC)\n  CHANNEL_OBJ=\"objects/channel.o\"\n  AC_SUBST(CHANNEL_OBJ)\nfi\n\nAC_MSG_CHECKING(--enable-multibyte argument)\nAC_ARG_ENABLE(multibyte,\n\t[  --enable-multibyte      Include multibyte editing support.], ,\n\t[enable_multibyte=\"no\"])\nAC_MSG_RESULT($enable_multibyte)\nif test \"$enable_multibyte\" = \"yes\"; then\n  AC_DEFINE(FEAT_MBYTE)\nfi\n\nAC_MSG_CHECKING(--enable-hangulinput argument)\nAC_ARG_ENABLE(hangulinput,\n\t[  --enable-hangulinput    Include Hangul input support.], ,\n\t[enable_hangulinput=\"no\"])\nAC_MSG_RESULT($enable_hangulinput)\n\nAC_MSG_CHECKING(--enable-xim argument)\nAC_ARG_ENABLE(xim,\n\t[  --enable-xim            Include XIM input support.],\n\tAC_MSG_RESULT($enable_xim),\n\t[enable_xim=\"auto\"; AC_MSG_RESULT(defaulting to auto)])\n\nAC_MSG_CHECKING(--enable-fontset argument)\nAC_ARG_ENABLE(fontset,\n\t[  --enable-fontset        Include X fontset output support.], ,\n\t[enable_fontset=\"no\"])\nAC_MSG_RESULT($enable_fontset)\ndnl defining FEAT_XFONTSET is delayed, so that it can be disabled for no GUI\n\ntest -z \"$with_x\" && with_x=yes\ntest \"${enable_gui-yes}\" != no -a \"x$MACOSX\" != \"xyes\" -a \"x$QNX\" != \"xyes\" && with_x=yes\nif test \"$with_x\" = no; then\n  AC_MSG_RESULT(defaulting to: don't HAVE_X11)\nelse\n  dnl Do this check early, so that its failure can override user requests.\n\n  AC_PATH_PROG(xmkmfpath, xmkmf)\n\n  AC_PATH_XTRA\n\n  dnl On z/OS Unix the X libraries are DLLs. To use them the code must\n  dnl be compiled with a special option.\n  dnl Also add SM, ICE and Xmu to X_EXTRA_LIBS.\n  if test \"$zOSUnix\" = \"yes\"; then\n    CFLAGS=\"$CFLAGS -W c,dll\"\n    LDFLAGS=\"$LDFLAGS -W l,dll\"\n    X_EXTRA_LIBS=\"$X_EXTRA_LIBS -lSM -lICE -lXmu\"\n  fi\n\n  dnl On my HPUX system the X include dir is found, but the lib dir not.\n  dnl This is a desparate try to fix this.\n\n  if test -d \"$x_includes\" && test ! -d \"$x_libraries\"; then\n    x_libraries=`echo \"$x_includes\" | sed s/include/lib/`\n    AC_MSG_RESULT(Corrected X libraries to $x_libraries)\n    X_LIBS=\"$X_LIBS -L$x_libraries\"\n    if test \"`(uname) 2>/dev/null`\" = SunOS &&\n\t\t\t\t\t uname -r | grep '^5' >/dev/null; then\n      X_LIBS=\"$X_LIBS -R $x_libraries\"\n    fi\n  fi\n\n  if test -d \"$x_libraries\" && test ! -d \"$x_includes\"; then\n    x_includes=`echo \"$x_libraries\" | sed s/lib/include/`\n    AC_MSG_RESULT(Corrected X includes to $x_includes)\n    X_CFLAGS=\"$X_CFLAGS -I$x_includes\"\n  fi\n\n  dnl Remove \"-I/usr/include \" from X_CFLAGS, should not be needed.\n  X_CFLAGS=\"`echo $X_CFLAGS\\  | sed 's%-I/usr/include %%'`\"\n  dnl Remove \"-L/usr/lib \" from X_LIBS, should not be needed.\n  X_LIBS=\"`echo $X_LIBS\\  | sed 's%-L/usr/lib %%'`\"\n  dnl Same for \"-R/usr/lib \".\n  X_LIBS=\"`echo $X_LIBS\\  | sed -e 's%-R/usr/lib %%' -e 's%-R /usr/lib %%'`\"\n\n\n  dnl Check if the X11 header files are correctly installed. On some systems\n  dnl Xlib.h includes files that don't exist.  On some systems X11/Intrinsic.h\n  dnl is missing.\n  AC_MSG_CHECKING(if X11 header files can be found)\n  cflags_save=$CFLAGS\n  CFLAGS=\"$CFLAGS $X_CFLAGS\"\n  AC_TRY_COMPILE([#include <X11/Xlib.h>\n#include <X11/Intrinsic.h>], ,\n\tAC_MSG_RESULT(yes),\n\tAC_MSG_RESULT(no); no_x=yes)\n  CFLAGS=$cflags_save\n\n  if test \"${no_x-no}\" = yes; then\n    with_x=no\n  else\n    AC_DEFINE(HAVE_X11)\n    X_LIB=\"-lXt -lX11\";\n    AC_SUBST(X_LIB)\n\n    ac_save_LDFLAGS=\"$LDFLAGS\"\n    LDFLAGS=\"-L$x_libraries $LDFLAGS\"\n\n    dnl Check for -lXdmcp (needed on SunOS 4.1.4)\n    dnl For HP-UX 10.20 it must be before -lSM -lICE\n    AC_CHECK_LIB(Xdmcp, _XdmcpAuthDoIt, [X_EXTRA_LIBS=\"$X_EXTRA_LIBS -lXdmcp\"],,\n\t\t[-lXt $X_PRE_LIBS -lX11 $X_EXTRA_LIBS -lXdmcp])\n\n    dnl Some systems need -lnsl -lsocket when testing for ICE.\n    dnl The check above doesn't do this, try here (again).  Also needed to get\n    dnl them after Xdmcp.  link.sh will remove them when not needed.\n    dnl Check for other function than above to avoid the cached value\n    AC_CHECK_LIB(ICE, IceOpenConnection,\n\t\t  [X_EXTRA_LIBS=\"$X_EXTRA_LIBS -lSM -lICE\"],, [$X_EXTRA_LIBS])\n\n    dnl Check for -lXpm (needed for some versions of Motif)\n    LDFLAGS=\"$X_LIBS $ac_save_LDFLAGS\"\n    AC_CHECK_LIB(Xpm, XpmCreatePixmapFromData, [X_PRE_LIBS=\"$X_PRE_LIBS -lXpm\"],,\n\t\t[-lXt $X_PRE_LIBS -lXpm -lX11 $X_EXTRA_LIBS])\n\n    dnl Check that the X11 header files don't use implicit declarations\n    AC_MSG_CHECKING(if X11 header files implicitly declare return values)\n    cflags_save=$CFLAGS\n    dnl -Werror is GCC only, others like Solaris Studio might not like it\n    if test \"$GCC\" = yes; then\n      CFLAGS=\"$CFLAGS $X_CFLAGS -Werror\"\n    else\n      CFLAGS=\"$CFLAGS $X_CFLAGS\"\n    fi\n    AC_TRY_COMPILE([#include <X11/Xlib.h>], ,\n\tAC_MSG_RESULT(no),\n\tCFLAGS=\"$CFLAGS -Wno-implicit-int\"\n\tAC_TRY_COMPILE([#include <X11/Xlib.h>], ,\n\t    AC_MSG_RESULT(yes); cflags_save=\"$cflags_save -Wno-implicit-int\",\n\t    AC_MSG_RESULT(test failed)\n\t)\n    )\n    CFLAGS=$cflags_save\n\n    LDFLAGS=\"$ac_save_LDFLAGS\"\n\n    AC_MSG_CHECKING(size of wchar_t is 2 bytes)\n    AC_CACHE_VAL(ac_cv_small_wchar_t,\n\t[AC_TRY_RUN([\n#include <X11/Xlib.h>\n#if STDC_HEADERS\n# include <stdlib.h>\n# include <stddef.h>\n#endif\n\t\tmain()\n\t\t{\n\t\t  if (sizeof(wchar_t) <= 2)\n\t\t    exit(1);\n\t\t  exit(0);\n\t\t}],\n\t\tac_cv_small_wchar_t=\"no\",\n\t\tac_cv_small_wchar_t=\"yes\",\n\t\tAC_MSG_ERROR(failed to compile test program))])\n    AC_MSG_RESULT($ac_cv_small_wchar_t)\n    if test \"x$ac_cv_small_wchar_t\" = \"xyes\" ; then\n      AC_DEFINE(SMALL_WCHAR_T)\n    fi\n\n  fi\nfi\n\ntest \"x$with_x\" = xno -a \"x$MACOSX\" != \"xyes\" -a \"x$QNX\" != \"xyes\" && enable_gui=no\n\nAC_MSG_CHECKING(--enable-gui argument)\nAC_ARG_ENABLE(gui,\n [  --enable-gui[=OPTS]     X11 GUI [default=auto] [OPTS=auto/no/gtk2/gnome2/gtk3/motif/athena/neXtaw/photon/carbon]], , enable_gui=\"auto\")\n\ndnl Canonicalize the --enable-gui= argument so that it can be easily compared.\ndnl Do not use character classes for portability with old tools.\nenable_gui_canon=`echo \"_$enable_gui\" | \\\n\tsed 's/[[ _+-]]//g;y/ABCDEFGHIJKLMNOPQRSTUVWXYZ/abcdefghijklmnopqrstuvwxyz/'`\n\ndnl Skip everything by default.\nSKIP_GTK2=YES\nSKIP_GTK3=YES\nSKIP_GNOME=YES\nSKIP_MOTIF=YES\nSKIP_ATHENA=YES\nSKIP_NEXTAW=YES\nSKIP_PHOTON=YES\nSKIP_CARBON=YES\nGUITYPE=NONE\n\nif test \"x$QNX\" = \"xyes\" -a \"x$with_x\" = \"xno\" ; then\n  SKIP_PHOTON=\n  case \"$enable_gui_canon\" in\n    no)\t\tAC_MSG_RESULT(no GUI support)\n\t\tSKIP_PHOTON=YES ;;\n    yes|\"\")\tAC_MSG_RESULT(yes - automatic GUI support) ;;\n    auto)\tAC_MSG_RESULT(auto - automatic GUI support) ;;\n    photon)\tAC_MSG_RESULT(Photon GUI support) ;;\n    *)\t\tAC_MSG_RESULT([Sorry, $enable_gui GUI is not supported])\n\t\tSKIP_PHOTON=YES ;;\n  esac\n\nelif test \"x$MACOSX\" = \"xyes\" -a \"x$with_x\" = \"xno\" ; then\n  SKIP_CARBON=\n  case \"$enable_gui_canon\" in\n    no)\t\tAC_MSG_RESULT(no GUI support)\n\t\tSKIP_CARBON=YES ;;\n    yes|\"\")\tAC_MSG_RESULT(yes - automatic GUI support) ;;\n    auto)\tAC_MSG_RESULT(auto - Carbon GUI is outdated - disable GUI support)\n\t\tSKIP_CARBON=YES ;;\n    carbon)\tAC_MSG_RESULT(Carbon GUI support) ;;\n    *)\t\tAC_MSG_RESULT([Sorry, $enable_gui GUI is not supported])\n\t\tSKIP_CARBON=YES ;;\n  esac\n\nelse\n\n  case \"$enable_gui_canon\" in\n    no|none)\tAC_MSG_RESULT(no GUI support) ;;\n    yes|\"\"|auto)\tAC_MSG_RESULT(yes/auto - automatic GUI support)\n\t\tSKIP_GTK2=\n\t\tSKIP_GNOME=\n\t\tSKIP_MOTIF=\n\t\tSKIP_ATHENA=\n\t\tSKIP_NEXTAW=\n\t\tSKIP_CARBON=;;\n    gtk2)\tAC_MSG_RESULT(GTK+ 2.x GUI support)\n\t\tSKIP_GTK2=;;\n    gnome2)\tAC_MSG_RESULT(GNOME 2.x GUI support)\n\t\tSKIP_GNOME=\n\t\tSKIP_GTK2=;;\n    gtk3)\tAC_MSG_RESULT(GTK+ 3.x GUI support)\n\t\tSKIP_GTK3=;;\n    motif)\tAC_MSG_RESULT(Motif GUI support)\n\t\tSKIP_MOTIF=;;\n    athena)\tAC_MSG_RESULT(Athena GUI support)\n\t\tSKIP_ATHENA=;;\n    nextaw)\tAC_MSG_RESULT(neXtaw GUI support)\n\t\tSKIP_NEXTAW=;;\n    *)\t\tAC_MSG_RESULT([Sorry, $enable_gui GUI is not supported]) ;;\n  esac\n\nfi\n\nif test \"x$SKIP_GTK2\" != \"xYES\" -a \"$enable_gui_canon\" != \"gtk2\" \\\n\t\t\t\t-a \"$enable_gui_canon\" != \"gnome2\"; then\n  AC_MSG_CHECKING(whether or not to look for GTK+ 2)\n  AC_ARG_ENABLE(gtk2-check,\n\t[  --enable-gtk2-check     If auto-select GUI, check for GTK+ 2 [default=yes]],\n\t, enable_gtk2_check=\"yes\")\n  AC_MSG_RESULT($enable_gtk2_check)\n  if test \"x$enable_gtk2_check\" = \"xno\"; then\n    SKIP_GTK2=YES\n    SKIP_GNOME=YES\n  fi\nfi\n\nif test \"x$SKIP_GNOME\" != \"xYES\" -a \"$enable_gui_canon\" != \"gnome2\"; then\n  AC_MSG_CHECKING(whether or not to look for GNOME)\n  AC_ARG_ENABLE(gnome-check,\n\t[  --enable-gnome-check    If GTK GUI, check for GNOME [default=no]],\n\t, enable_gnome_check=\"no\")\n  AC_MSG_RESULT($enable_gnome_check)\n  if test \"x$enable_gnome_check\" = \"xno\"; then\n    SKIP_GNOME=YES\n  fi\nfi\n\nif test \"x$SKIP_GTK3\" != \"xYES\" -a \"$enable_gui_canon\" != \"gtk3\"; then\n  AC_MSG_CHECKING(whether or not to look for GTK+ 3)\n  AC_ARG_ENABLE(gtk3-check,\n\t[  --enable-gtk3-check     If auto-select GUI, check for GTK+ 3 [default=yes]],\n\t, enable_gtk3_check=\"yes\")\n  AC_MSG_RESULT($enable_gtk3_check)\n  if test \"x$enable_gtk3_check\" = \"xno\"; then\n    SKIP_GTK3=YES\n  fi\nfi\n\nif test \"x$SKIP_MOTIF\" != \"xYES\" -a \"$enable_gui_canon\" != \"motif\"; then\n  AC_MSG_CHECKING(whether or not to look for Motif)\n  AC_ARG_ENABLE(motif-check,\n\t[  --enable-motif-check    If auto-select GUI, check for Motif [default=yes]],\n\t, enable_motif_check=\"yes\")\n  AC_MSG_RESULT($enable_motif_check)\n  if test \"x$enable_motif_check\" = \"xno\"; then\n    SKIP_MOTIF=YES\n  fi\nfi\n\nif test \"x$SKIP_ATHENA\" != \"xYES\" -a \"$enable_gui_canon\" != \"athena\"; then\n  AC_MSG_CHECKING(whether or not to look for Athena)\n  AC_ARG_ENABLE(athena-check,\n\t[  --enable-athena-check   If auto-select GUI, check for Athena [default=yes]],\n\t, enable_athena_check=\"yes\")\n  AC_MSG_RESULT($enable_athena_check)\n  if test \"x$enable_athena_check\" = \"xno\"; then\n    SKIP_ATHENA=YES\n  fi\nfi\n\nif test \"x$SKIP_NEXTAW\" != \"xYES\" -a \"$enable_gui_canon\" != \"nextaw\"; then\n  AC_MSG_CHECKING(whether or not to look for neXtaw)\n  AC_ARG_ENABLE(nextaw-check,\n\t[  --enable-nextaw-check   If auto-select GUI, check for neXtaw [default=yes]],\n\t, enable_nextaw_check=\"yes\")\n  AC_MSG_RESULT($enable_nextaw_check);\n  if test \"x$enable_nextaw_check\" = \"xno\"; then\n    SKIP_NEXTAW=YES\n  fi\nfi\n\nif test \"x$SKIP_CARBON\" != \"xYES\" -a \"$enable_gui_canon\" != \"carbon\"; then\n  AC_MSG_CHECKING(whether or not to look for Carbon)\n  AC_ARG_ENABLE(carbon-check,\n\t[  --enable-carbon-check   If auto-select GUI, check for Carbon [default=yes]],\n\t, enable_carbon_check=\"yes\")\n  AC_MSG_RESULT($enable_carbon_check);\n  if test \"x$enable_carbon_check\" = \"xno\"; then\n    SKIP_CARBON=YES\n  fi\nfi\n\n\nif test \"x$MACOSX\" = \"xyes\" -a -z \"$SKIP_CARBON\" -a \"x$CARBON\" = \"xyes\"; then\n  AC_MSG_CHECKING(for Carbon GUI)\n  dnl already did the check, just give the message\n  AC_MSG_RESULT(yes);\n  GUITYPE=CARBONGUI\n  if test \"$VIMNAME\" = \"vim\"; then\n    VIMNAME=Vim\n  fi\n\n  if test \"x$MACARCH\" = \"xboth\"; then\n    CPPFLAGS=\"$CPPFLAGS -I$DEVELOPER_DIR/SDKs/MacOSX10.4u.sdk/Developer/Headers/FlatCarbon\"\n  else\n    CPPFLAGS=\"$CPPFLAGS -I$DEVELOPER_DIR/Headers/FlatCarbon\"\n  fi\n\n  dnl Default install directory is not /usr/local\n  if test x$prefix = xNONE; then\n    prefix=/Applications\n  fi\n\n  dnl Sorry for the hard coded default\n  datadir='${prefix}/Vim.app/Contents/Resources'\n\n  dnl skip everything else\n  SKIP_GTK2=YES;\n  SKIP_GNOME=YES;\n  SKIP_MOTIF=YES;\n  SKIP_ATHENA=YES;\n  SKIP_NEXTAW=YES;\n  SKIP_PHOTON=YES;\n  SKIP_CARBON=YES\nfi\n\ndnl define an autoconf function to check for a specified version of GTK, and\ndnl try to compile/link a GTK program.\ndnl\ndnl AM_PATH_GTK([MINIMUM-VERSION, [ACTION-IF-FOUND [, ACTION-IF-NOT-FOUND]]])\ndnl Test for GTK, and define GTK_CFLAGS, GTK_LIBDIR and GTK_LIBS\ndnl\nAC_DEFUN(AM_PATH_GTK,\n[\n  if test \"X$GTK_CONFIG\" != \"Xno\" -o \"X$PKG_CONFIG\" != \"Xno\"; then\n  {\n    no_gtk=\"\"\n    if (test \"X$SKIP_GTK2\" != \"XYES\" -a \"X$PKG_CONFIG\" != \"Xno\") \\\n\t  && $PKG_CONFIG --exists gtk+-2.0; then\n    {\n      min_gtk_version=ifelse([$1], ,2.2.0,$1)\n      AC_MSG_CHECKING(for GTK - version >= $min_gtk_version)\n      dnl We should be using PKG_CHECK_MODULES() instead of this hack.\n      dnl But I guess the dependency on pkgconfig.m4 is not wanted or\n      dnl something like that.\n      GTK_CFLAGS=`$PKG_CONFIG --cflags gtk+-2.0`\n      GTK_LIBDIR=`$PKG_CONFIG --libs-only-L gtk+-2.0`\n      GTK_LIBS=`$PKG_CONFIG --libs gtk+-2.0`\n      gtk_major_version=`$PKG_CONFIG --modversion gtk+-2.0 | \\\n\t     sed 's/\\([[0-9]]*\\)\\.\\([[0-9]]*\\)\\.\\([[0-9]]*\\)/\\1/'`\n      gtk_minor_version=`$PKG_CONFIG --modversion gtk+-2.0 | \\\n\t     sed 's/\\([[0-9]]*\\)\\.\\([[0-9]]*\\)\\.\\([[0-9]]*\\)/\\2/'`\n      gtk_micro_version=`$PKG_CONFIG --modversion gtk+-2.0 | \\\n\t     sed 's/\\([[0-9]]*\\)\\.\\([[0-9]]*\\)\\.\\([[0-9]]*\\)/\\3/'`\n    }\n    elif (test \"X$SKIP_GTK3\" != \"XYES\" -a \"X$PKG_CONFIG\" != \"Xno\") \\\n\t  && $PKG_CONFIG --exists gtk+-3.0; then\n    {\n      min_gtk_version=ifelse([$1], ,3.0.0,$1)\n      AC_MSG_CHECKING(for GTK - version >= $min_gtk_version)\n\n      GTK_CFLAGS=`$PKG_CONFIG --cflags gtk+-3.0`\n      GTK_LIBDIR=`$PKG_CONFIG --libs-only-L gtk+-3.0`\n      GTK_LIBS=`$PKG_CONFIG --libs gtk+-3.0`\n      gtk_major_version=`$PKG_CONFIG --modversion gtk+-3.0 | \\\n\t     sed 's/\\([[0-9]]*\\)\\.\\([[0-9]]*\\)\\.\\([[0-9]]*\\)/\\1/'`\n      gtk_minor_version=`$PKG_CONFIG --modversion gtk+-3.0 | \\\n\t     sed 's/\\([[0-9]]*\\)\\.\\([[0-9]]*\\)\\.\\([[0-9]]*\\)/\\2/'`\n      gtk_micro_version=`$PKG_CONFIG --modversion gtk+-3.0 | \\\n\t     sed 's/\\([[0-9]]*\\)\\.\\([[0-9]]*\\)\\.\\([[0-9]]*\\)/\\3/'`\n    }\n    else\n      no_gtk=yes\n    fi\n\n    if test \"x$enable_gtktest\" = \"xyes\" -a \"x$no_gtk\" = \"x\"; then\n    {\n      ac_save_CFLAGS=\"$CFLAGS\"\n      ac_save_LIBS=\"$LIBS\"\n      CFLAGS=\"$CFLAGS $GTK_CFLAGS\"\n      LIBS=\"$LIBS $GTK_LIBS\"\n\n      dnl\n      dnl Now check if the installed GTK is sufficiently new.\n      dnl\n      rm -f conf.gtktest\n      AC_TRY_RUN([\n#include <gtk/gtk.h>\n#include <stdio.h>\n#if STDC_HEADERS\n# include <stdlib.h>\n# include <stddef.h>\n#endif\n\nint\nmain ()\n{\nint major, minor, micro;\nchar *tmp_version;\n\nsystem (\"touch conf.gtktest\");\n\n/* HP/UX 9 (%@#!) writes to sscanf strings */\ntmp_version = g_strdup(\"$min_gtk_version\");\nif (sscanf(tmp_version, \"%d.%d.%d\", &major, &minor, &micro) != 3) {\n   printf(\"%s, bad version string\\n\", \"$min_gtk_version\");\n   exit(1);\n }\n\nif ((gtk_major_version > major) ||\n    ((gtk_major_version == major) && (gtk_minor_version > minor)) ||\n    ((gtk_major_version == major) && (gtk_minor_version == minor) &&\n\t\t\t\t     (gtk_micro_version >= micro)))\n{\n    return 0;\n}\nreturn 1;\n}\n],, no_gtk=yes,[echo $ac_n \"cross compiling; assumed OK... $ac_c\"])\n      CFLAGS=\"$ac_save_CFLAGS\"\n      LIBS=\"$ac_save_LIBS\"\n    }\n    fi\n    if test \"x$no_gtk\" = x ; then\n      if test \"x$enable_gtktest\" = \"xyes\"; then\n\tAC_MSG_RESULT(yes; found version $gtk_major_version.$gtk_minor_version.$gtk_micro_version)\n      else\n\tAC_MSG_RESULT(found version $gtk_major_version.$gtk_minor_version.$gtk_micro_version)\n      fi\n      ifelse([$2], , :, [$2])\n    else\n    {\n      AC_MSG_RESULT(no)\n      GTK_CFLAGS=\"\"\n      GTK_LIBS=\"\"\n      ifelse([$3], , :, [$3])\n    }\n    fi\n  }\n  else\n    GTK_CFLAGS=\"\"\n    GTK_LIBS=\"\"\n    ifelse([$3], , :, [$3])\n  fi\n  AC_SUBST(GTK_CFLAGS)\n  AC_SUBST(GTK_LIBS)\n  rm -f conf.gtktest\n])\n\ndnl ---------------------------------------------------------------------------\ndnl gnome\ndnl ---------------------------------------------------------------------------\nAC_DEFUN([GNOME_INIT_HOOK],\n[\n  AC_SUBST(GNOME_LIBS)\n  AC_SUBST(GNOME_LIBDIR)\n  AC_SUBST(GNOME_INCLUDEDIR)\n\n  AC_ARG_WITH(gnome-includes,\n    [  --with-gnome-includes=DIR Specify location of GNOME headers],\n    [CFLAGS=\"$CFLAGS -I$withval\"]\n  )\n\n  AC_ARG_WITH(gnome-libs,\n    [  --with-gnome-libs=DIR   Specify location of GNOME libs],\n    [LDFLAGS=\"$LDFLAGS -L$withval\" gnome_prefix=$withval]\n  )\n\n  AC_ARG_WITH(gnome,\n    [  --with-gnome            Specify prefix for GNOME files],\n    if test x$withval = xyes; then\n      want_gnome=yes\n      ifelse([$1], [], :, [$1])\n    else\n      if test \"x$withval\" = xno; then\n\twant_gnome=no\n      else\n\twant_gnome=yes\n\tLDFLAGS=\"$LDFLAGS -L$withval/lib\"\n\tCFLAGS=\"$CFLAGS -I$withval/include\"\n\tgnome_prefix=$withval/lib\n      fi\n    fi,\n    want_gnome=yes)\n\n  if test \"x$want_gnome\" = xyes; then\n  {\n    AC_MSG_CHECKING(for libgnomeui-2.0)\n    if $PKG_CONFIG --exists libgnomeui-2.0; then\n      AC_MSG_RESULT(yes)\n      GNOME_LIBS=`$PKG_CONFIG --libs-only-l libgnomeui-2.0`\n      GNOME_LIBDIR=`$PKG_CONFIG --libs-only-L libgnomeui-2.0`\n      GNOME_INCLUDEDIR=`$PKG_CONFIG --cflags libgnomeui-2.0`\n\n      dnl On FreeBSD we need -pthread but pkg-config doesn't include it.\n      dnl This might not be the right way but it works for me...\n      AC_MSG_CHECKING(for FreeBSD)\n      if test \"`(uname) 2>/dev/null`\" = FreeBSD; then\n\tAC_MSG_RESULT(yes, adding -pthread)\n\tGNOME_INCLUDEDIR=\"$GNOME_INCLUDEDIR -D_THREAD_SAFE\"\n\tGNOME_LIBS=\"$GNOME_LIBS -pthread\"\n      else\n\tAC_MSG_RESULT(no)\n      fi\n      $1\n    else\n      AC_MSG_RESULT(not found)\n      if test \"x$2\" = xfail; then\n\tAC_MSG_ERROR(Could not find libgnomeui-2.0 via pkg-config)\n      fi\n    fi\n  }\n  fi\n])\n\nAC_DEFUN([GNOME_INIT],[\n\tGNOME_INIT_HOOK([],fail)\n])\n\n\ndnl ---------------------------------------------------------------------------\ndnl Check for GTK2.  If it fails, then continue on for Motif as before...\ndnl ---------------------------------------------------------------------------\nif test -z \"$SKIP_GTK2\"; then\n\n  AC_MSG_CHECKING(--disable-gtktest argument)\n  AC_ARG_ENABLE(gtktest, [  --disable-gtktest       Do not try to compile and run a test GTK program],\n\t, enable_gtktest=yes)\n  if test \"x$enable_gtktest\" = \"xyes\" ; then\n    AC_MSG_RESULT(gtk test enabled)\n  else\n    AC_MSG_RESULT(gtk test disabled)\n  fi\n\n  if test \"X$PKG_CONFIG\" = \"X\"; then\n    AC_PATH_PROG(PKG_CONFIG, pkg-config, no)\n  fi\n\n  if test \"x$PKG_CONFIG\" != \"xno\"; then\n    dnl First try finding version 2.2.0 or later.  The 2.0.x series has\n    dnl problems (bold fonts, --remote doesn't work).\n    AM_PATH_GTK(2.2.0,\n\t\t[GUI_LIB_LOC=\"$GTK_LIBDIR\"\n\t\t GTK_LIBNAME=\"$GTK_LIBS\"\n\t\tGUI_INC_LOC=\"$GTK_CFLAGS\"], )\n    if test \"x$GTK_CFLAGS\" != \"x\"; then\n      SKIP_GTK3=YES\n      SKIP_ATHENA=YES\n      SKIP_NEXTAW=YES\n      SKIP_MOTIF=YES\n      GUITYPE=GTK\n      AC_SUBST(GTK_LIBNAME)\n    fi\n  fi\n  if test \"x$GUITYPE\" = \"xGTK\"; then\n    if test \"$gtk_minor_version\" = 1 -a \"0$gtk_micro_version\" -ge 1 \\\n\t|| test \"0$gtk_minor_version\" -ge 2; then\n      AC_DEFINE(HAVE_GTK_MULTIHEAD)\n    fi\n    dnl\n    dnl if GTK exists, then check for GNOME.\n    dnl\n    if test -z \"$SKIP_GNOME\"; then\n    {\n      GNOME_INIT_HOOK([have_gnome=yes])\n      if test \"x$have_gnome\" = xyes ; then\n\tAC_DEFINE(FEAT_GUI_GNOME)\n\tGUI_INC_LOC=\"$GUI_INC_LOC $GNOME_INCLUDEDIR\"\n\tGTK_LIBNAME=\"$GTK_LIBNAME $GNOME_LIBDIR $GNOME_LIBS\"\n      fi\n    }\n    fi\n  fi\nfi\n\n\ndnl ---------------------------------------------------------------------------\ndnl Check for GTK3.\ndnl ---------------------------------------------------------------------------\nif test -z \"$SKIP_GTK3\"; then\n\n  AC_MSG_CHECKING(--disable-gtktest argument)\n  AC_ARG_ENABLE(gtktest, [  --disable-gtktest       Do not try to compile and run a test GTK program],\n\t, enable_gtktest=yes)\n  if test \"x$enable_gtktest\" = \"xyes\" ; then\n    AC_MSG_RESULT(gtk test enabled)\n  else\n    AC_MSG_RESULT(gtk test disabled)\n  fi\n\n  if test \"X$PKG_CONFIG\" = \"X\"; then\n    AC_PATH_PROG(PKG_CONFIG, pkg-config, no)\n  fi\n\n  if test \"x$PKG_CONFIG\" != \"xno\"; then\n    AM_PATH_GTK(3.0.0,\n\t\t[GUI_LIB_LOC=\"$GTK_LIBDIR\"\n\t\t GTK_LIBNAME=\"$GTK_LIBS\"\n\t\tGUI_INC_LOC=\"$GTK_CFLAGS\"], )\n    if test \"x$GTK_CFLAGS\" != \"x\"; then\n      SKIP_GTK2=YES\n      SKIP_GNOME=YES\n      SKIP_ATHENA=YES\n      SKIP_NEXTAW=YES\n      SKIP_MOTIF=YES\n      GUITYPE=GTK\n      AC_SUBST(GTK_LIBNAME)\n      AC_DEFINE(HAVE_GTK_MULTIHEAD)\n      AC_DEFINE(USE_GTK3)\n    fi\n  fi\nfi\n\ndnl Check the version of Gdk-Pixbuf.  If the version is 2.31 or later and\ndnl glib-compile-resources is found in PATH, use GResource.\nif test \"x$GUITYPE\" = \"xGTK\"; then\n  AC_MSG_CHECKING([version of Gdk-Pixbuf])\n  gdk_pixbuf_version=`$PKG_CONFIG --modversion gdk-pixbuf-2.0`\n  if test \"x$gdk_pixbuf_version\" != x ; then\n    gdk_pixbuf_version_minor=`echo $gdk_pixbuf_version | \\\n      sed -e 's/[[0-9]][[0-9]]*\\.\\([[0-9]][[0-9]]*\\)\\.[[0-9]][[0-9]]*/\\1/'`\n    if test \"x$gdk_pixbuf_version_minor\" != x -a \\\n\t$gdk_pixbuf_version_minor -ge 31 ; then\n      AC_MSG_RESULT([OK.])\n      AC_PATH_PROG(GLIB_COMPILE_RESOURCES,[glib-compile-resources],no)\n      AC_MSG_CHECKING([glib-compile-resources])\n      if test \"x$GLIB_COMPILE_RESOURCES\" = xno ; then\n\tGLIB_COMPILE_RESOURCES=\"\"\n\tAC_MSG_RESULT([cannot be found in PATH.])\n      else\n\tAC_MSG_RESULT([usable.])\n\tAC_DEFINE(USE_GRESOURCE)\n\tGRESOURCE_SRC=\"auto/gui_gtk_gresources.c\"\n\tGRESOURCE_OBJ=\"objects/gui_gtk_gresources.o\"\n      fi\n    else\n      AC_MSG_RESULT([not usable.])\n    fi\n  else\n    AC_MSG_RESULT([cannot obtain from pkg_config.])\n  fi\n\n  AC_MSG_CHECKING([--disable-icon-cache-update argument])\n  AC_ARG_ENABLE(icon_cache_update,\n          [  --disable-icon-cache-update        update disabled],\n          [],\n          [enable_icon_cache_update=\"yes\"])\n  if test \"$enable_icon_cache_update\" = \"yes\"; then\n    AC_MSG_RESULT([not set])\n    AC_PATH_PROG(GTK_UPDATE_ICON_CACHE,[gtk-update-icon-cache],no)\n    if test \"x$GTK_UPDATE_ICON_CACHE\" = \"xno\" ; then\n      AC_MSG_RESULT([not found in PATH.])\n    fi\n  else\n    AC_MSG_RESULT([update disabled])\n  fi\n\n  AC_MSG_CHECKING([--disable-desktop-database-update argument])\n  AC_ARG_ENABLE(desktop_database_update,\n          [  --disable-desktop-database-update  update disabled],\n          [],\n          [enable_desktop_database_update=\"yes\"])\n  if test \"$enable_desktop_database_update\" = \"yes\"; then\n    AC_MSG_RESULT([not set])\n    AC_PATH_PROG(UPDATE_DESKTOP_DATABASE,[update-desktop-database],no)\n    if test \"x$UPDATE_DESKTOP_DATABASE\" = \"xno\" ; then\n      AC_MSG_RESULT([not found in PATH.])\n    fi\n  else\n    AC_MSG_RESULT([update disabled])\n  fi\nfi\nAC_SUBST(GLIB_COMPILE_RESOURCES)\nAC_SUBST(GRESOURCE_SRC)\nAC_SUBST(GRESOURCE_OBJ)\nAC_SUBST(GTK_UPDATE_ICON_CACHE)\nAC_SUBST(UPDATE_DESKTOP_DATABASE)\n\ndnl Check for Motif include files location.\ndnl The LAST one found is used, this makes the highest version to be used,\ndnl e.g. when Motif1.2 and Motif2.0 are both present.\n\nif test -z \"$SKIP_MOTIF\"; then\n  gui_XXX=\"/usr/XXX/Motif* /usr/Motif*/XXX /usr/XXX /usr/shlib /usr/X11*/XXX /usr/XXX/X11* /usr/dt/XXX /local/Motif*/XXX /local/XXX/Motif* /usr/local/Motif*/XXX /usr/local/XXX/Motif* /usr/local/XXX /usr/local/X11*/XXX /usr/local/LessTif/Motif*/XXX $MOTIFHOME/XXX\"\n  dnl Remove \"-I\" from before $GUI_INC_LOC if it's there\n  GUI_INC_LOC=\"`echo $GUI_INC_LOC|sed 's%-I%%g'`\"\n\n  AC_MSG_CHECKING(for location of Motif GUI includes)\n  gui_includes=\"`echo $x_includes|sed 's%/[^/][^/]*$%%'` `echo \"$gui_XXX\" | sed s/XXX/include/g` $GUI_INC_LOC\"\n  GUI_INC_LOC=\n  for try in $gui_includes; do\n    if test -f \"$try/Xm/Xm.h\"; then\n      GUI_INC_LOC=$try\n    fi\n  done\n  if test -n \"$GUI_INC_LOC\"; then\n    if test \"$GUI_INC_LOC\" = /usr/include; then\n      GUI_INC_LOC=\n      AC_MSG_RESULT(in default path)\n    else\n      AC_MSG_RESULT($GUI_INC_LOC)\n    fi\n  else\n    AC_MSG_RESULT(<not found>)\n    SKIP_MOTIF=YES\n  fi\nfi\n\ndnl Check for Motif library files location.  In the same order as the include\ndnl files, to avoid a mixup if several versions are present\n\nif test -z \"$SKIP_MOTIF\"; then\n  AC_MSG_CHECKING(--with-motif-lib argument)\n  AC_ARG_WITH(motif-lib,\n  [  --with-motif-lib=STRING   Library for Motif ],\n  [ MOTIF_LIBNAME=\"${withval}\" ] )\n\n  if test -n \"$MOTIF_LIBNAME\"; then\n    AC_MSG_RESULT($MOTIF_LIBNAME)\n    GUI_LIB_LOC=\n  else\n    AC_MSG_RESULT(no)\n\n    dnl Remove \"-L\" from before $GUI_LIB_LOC if it's there\n    GUI_LIB_LOC=\"`echo $GUI_LIB_LOC|sed 's%-L%%g'`\"\n\n    dnl Ubuntu has libXm.so in /usr/lib/i386-linux-gnu and elsewhere.  The\n    dnl linker will figure out which one to use, we only check if one exists.\n    AC_MSG_CHECKING(for location of Motif GUI libs)\n    gui_libs=\"`echo $x_libraries|sed 's%/[^/][^/]*$%%'` `echo \"$gui_XXX\" | sed s/XXX/lib/g` /usr/lib/i386-linux-gnu /usr/lib/x86_64-linux-gnu `echo \"$GUI_INC_LOC\" | sed s/include/lib/` $GUI_LIB_LOC\"\n    GUI_LIB_LOC=\n    for try in $gui_libs; do\n      for libtry in \"$try\"/libXm.a \"$try\"/libXm.so* \"$try\"/libXm.sl \"$try\"/libXm.dylib; do\n\tif test -f \"$libtry\"; then\n\t  GUI_LIB_LOC=$try\n\tfi\n      done\n    done\n    if test -n \"$GUI_LIB_LOC\"; then\n      dnl Remove /usr/lib, it causes trouble on some systems\n      if test \"$GUI_LIB_LOC\" = /usr/lib \\\n\t   -o \"$GUI_LIB_LOC\" = /usr/lib/i386-linux-gnu \\\n\t   -o \"$GUI_LIB_LOC\" = /usr/lib/x86_64-linux-gnu; then\n\tGUI_LIB_LOC=\n\tAC_MSG_RESULT(in default path)\n      else\n\tif test -n \"$GUI_LIB_LOC\"; then\n\t  AC_MSG_RESULT($GUI_LIB_LOC)\n\t  if test \"`(uname) 2>/dev/null`\" = SunOS &&\n\t\t\t\t\t uname -r | grep '^5' >/dev/null; then\n\t    GUI_LIB_LOC=\"$GUI_LIB_LOC -R $GUI_LIB_LOC\"\n\t  fi\n\tfi\n      fi\n      MOTIF_LIBNAME=-lXm\n    else\n      AC_MSG_RESULT(<not found>)\n      SKIP_MOTIF=YES\n    fi\n  fi\nfi\n\nif test -z \"$SKIP_MOTIF\"; then\n  SKIP_ATHENA=YES\n  SKIP_NEXTAW=YES\n  GUITYPE=MOTIF\n  AC_SUBST(MOTIF_LIBNAME)\nfi\n\ndnl Check if the Athena files can be found\n\nGUI_X_LIBS=\n\nif test -z \"$SKIP_ATHENA\"; then\n  AC_MSG_CHECKING(if Athena header files can be found)\n  cflags_save=$CFLAGS\n  CFLAGS=\"$CFLAGS $X_CFLAGS\"\n  AC_TRY_COMPILE([\n#include <X11/Intrinsic.h>\n#include <X11/Xaw/Paned.h>], ,\n\tAC_MSG_RESULT(yes),\n\tAC_MSG_RESULT(no); SKIP_ATHENA=YES )\n  CFLAGS=$cflags_save\nfi\n\nif test -z \"$SKIP_ATHENA\"; then\n  GUITYPE=ATHENA\nfi\n\nif test -z \"$SKIP_NEXTAW\"; then\n  AC_MSG_CHECKING(if neXtaw header files can be found)\n  cflags_save=$CFLAGS\n  CFLAGS=\"$CFLAGS $X_CFLAGS\"\n  AC_TRY_COMPILE([\n#include <X11/Intrinsic.h>\n#include <X11/neXtaw/Paned.h>], ,\n\tAC_MSG_RESULT(yes),\n\tAC_MSG_RESULT(no); SKIP_NEXTAW=YES )\n  CFLAGS=$cflags_save\nfi\n\nif test -z \"$SKIP_NEXTAW\"; then\n  GUITYPE=NEXTAW\nfi\n\nif test -z \"$SKIP_ATHENA\" -o -z \"$SKIP_NEXTAW\" -o -z \"$SKIP_MOTIF\"; then\n  dnl Prepend -I and -L to $GUI_INC_LOC and $GUI_LIB_LOC if not empty\n  dnl Avoid adding it when it twice\n  if test -n \"$GUI_INC_LOC\"; then\n    GUI_INC_LOC=-I\"`echo $GUI_INC_LOC|sed 's%-I%%'`\"\n  fi\n  if test -n \"$GUI_LIB_LOC\"; then\n    GUI_LIB_LOC=-L\"`echo $GUI_LIB_LOC|sed 's%-L%%'`\"\n  fi\n\n  dnl Check for -lXext and then for -lXmu\n  ldflags_save=$LDFLAGS\n  LDFLAGS=\"$X_LIBS $LDFLAGS\"\n  AC_CHECK_LIB(Xext, XShapeQueryExtension, [GUI_X_LIBS=\"-lXext\"],,\n\t\t[-lXt $X_PRE_LIBS -lX11 $X_EXTRA_LIBS])\n  dnl For Solaris we need -lw and -ldl before linking with -lXmu works.\n  AC_CHECK_LIB(w, wslen, [X_EXTRA_LIBS=\"$X_EXTRA_LIBS -lw\"],,\n\t\t[$GUI_X_LIBS -lXt $X_PRE_LIBS -lX11 $X_EXTRA_LIBS])\n  AC_CHECK_LIB(dl, dlsym, [X_EXTRA_LIBS=\"$X_EXTRA_LIBS -ldl\"],,\n\t\t[$GUI_X_LIBS -lXt $X_PRE_LIBS -lX11 $X_EXTRA_LIBS])\n  AC_CHECK_LIB(Xmu, XmuCreateStippledPixmap, [GUI_X_LIBS=\"-lXmu $GUI_X_LIBS\"],,\n\t\t[$GUI_X_LIBS -lXt $X_PRE_LIBS -lX11 $X_EXTRA_LIBS])\n  if test -z \"$SKIP_MOTIF\"; then\n    AC_CHECK_LIB(Xp, XpEndJob, [GUI_X_LIBS=\"-lXp $GUI_X_LIBS\"],,\n\t\t[$GUI_X_LIBS -lXm -lXt $X_PRE_LIBS -lX11 $X_EXTRA_LIBS])\n  fi\n  LDFLAGS=$ldflags_save\n\n  dnl Execute xmkmf to figure out if -DNARROWPROTO is needed.\n  AC_MSG_CHECKING(for extra X11 defines)\n  NARROW_PROTO=\n  rm -fr conftestdir\n  if mkdir conftestdir; then\n    cd conftestdir\n    cat > Imakefile <<'EOF'\nacfindx:\n\t@echo 'NARROW_PROTO=\"${PROTO_DEFINES}\"'\nEOF\n    if (xmkmf) >/dev/null 2>/dev/null && test -f Makefile; then\n      eval `${MAKE-make} acfindx 2>/dev/null | grep -v make`\n    fi\n    cd ..\n    rm -fr conftestdir\n  fi\n  if test -z \"$NARROW_PROTO\"; then\n    AC_MSG_RESULT(no)\n  else\n    AC_MSG_RESULT($NARROW_PROTO)\n  fi\n  AC_SUBST(NARROW_PROTO)\nfi\n\ndnl Look for XSMP support - but don't necessarily restrict it to X11 GUIs\ndnl use the X11 include path\nif test \"$enable_xsmp\" = \"yes\"; then\n  cppflags_save=$CPPFLAGS\n  CPPFLAGS=\"$CPPFLAGS $X_CFLAGS\"\n  AC_CHECK_HEADERS(X11/SM/SMlib.h)\n  CPPFLAGS=$cppflags_save\nfi\n\n\nif test -z \"$SKIP_ATHENA\" -o -z \"$SKIP_NEXTAW\" -o -z \"$SKIP_MOTIF\" -o -z \"$SKIP_GTK2\" -o -z \"$SKIP_GTK3\"; then\n  dnl Check for X11/xpm.h and X11/Sunkeysym.h with the GUI include path\n  cppflags_save=$CPPFLAGS\n  CPPFLAGS=\"$CPPFLAGS $X_CFLAGS\"\n  AC_CHECK_HEADERS(X11/xpm.h X11/Sunkeysym.h)\n\n  dnl automatically disable XIM when XIMtext isn't in X11/Xlib.h\n  if test ! \"$enable_xim\" = \"no\"; then\n    AC_MSG_CHECKING(for XIMText in X11/Xlib.h)\n    AC_EGREP_CPP(XIMText, [#include <X11/Xlib.h>],\n\t\t  AC_MSG_RESULT(yes),\n\t\t  AC_MSG_RESULT(no; xim has been disabled); enable_xim=\"no\")\n  fi\n  CPPFLAGS=$cppflags_save\n\n  dnl automatically enable XIM when hangul input isn't enabled\n  if test \"$enable_xim\" = \"auto\" -a \"$enable_hangulinput\" != \"yes\" \\\n\t\t-a \"x$GUITYPE\" != \"xNONE\" ; then\n    AC_MSG_RESULT(X GUI selected; xim has been enabled)\n    enable_xim=\"yes\"\n  fi\nfi\n\nif test -z \"$SKIP_ATHENA\" -o -z \"$SKIP_NEXTAW\" -o -z \"$SKIP_MOTIF\"; then\n  cppflags_save=$CPPFLAGS\n  CPPFLAGS=\"$CPPFLAGS $X_CFLAGS\"\ndnl Xmu/Editres.h may exist but can only be used after including Intrinsic.h\n  AC_MSG_CHECKING([for X11/Xmu/Editres.h])\n  AC_TRY_COMPILE([\n#include <X11/Intrinsic.h>\n#include <X11/Xmu/Editres.h>],\n\t\t      [int i; i = 0;],\n\t      AC_MSG_RESULT(yes)\n\t\t      AC_DEFINE(HAVE_X11_XMU_EDITRES_H),\n\t      AC_MSG_RESULT(no))\n  CPPFLAGS=$cppflags_save\nfi\n\ndnl Only use the Xm directory when compiling Motif, don't use it for Athena\nif test -z \"$SKIP_MOTIF\"; then\n  cppflags_save=$CPPFLAGS\n  CPPFLAGS=\"$CPPFLAGS $X_CFLAGS\"\n  if test \"$zOSUnix\" = \"yes\"; then\n\txmheader=\"Xm/Xm.h\"\n  else\n\txmheader=\"Xm/Xm.h Xm/XpmP.h Xm/JoinSideT.h Xm/TraitP.h Xm/Manager.h\n\t   Xm/UnhighlightT.h Xm/Notebook.h\"  \n  fi    \n  AC_CHECK_HEADERS($xmheader)\n\n  if test \"x$ac_cv_header_Xm_XpmP_h\" = \"xyes\"; then\n    dnl Solaris uses XpmAttributes_21, very annoying.\n    AC_MSG_CHECKING([for XpmAttributes_21 in Xm/XpmP.h])\n    AC_TRY_COMPILE([#include <Xm/XpmP.h>], [XpmAttributes_21 attr;],\n\tAC_MSG_RESULT(yes); AC_DEFINE(XPMATTRIBUTES_TYPE, XpmAttributes_21),\n\tAC_MSG_RESULT(no); AC_DEFINE(XPMATTRIBUTES_TYPE, XpmAttributes)\n\t)\n  else\n    AC_DEFINE(XPMATTRIBUTES_TYPE, XpmAttributes)\n  fi\n  CPPFLAGS=$cppflags_save\nfi\n\nif test \"x$GUITYPE\" = \"xNONE\" -a \"$enable_xim\" = \"yes\"; then\n  AC_MSG_RESULT(no GUI selected; xim has been disabled)\n  enable_xim=\"no\"\nfi\nif test \"x$GUITYPE\" = \"xNONE\" -a \"$enable_fontset\" = \"yes\"; then\n  AC_MSG_RESULT(no GUI selected; fontset has been disabled)\n  enable_fontset=\"no\"\nfi\nif test \"x$GUITYPE:$enable_fontset\" = \"xGTK:yes\"; then\n  AC_MSG_RESULT(GTK+ 2 GUI selected; fontset has been disabled)\n  enable_fontset=\"no\"\nfi\n\nif test -z \"$SKIP_PHOTON\"; then\n  GUITYPE=PHOTONGUI\nfi\n\nAC_SUBST(GUI_INC_LOC)\nAC_SUBST(GUI_LIB_LOC)\nAC_SUBST(GUITYPE)\nAC_SUBST(GUI_X_LIBS)\n\nif test \"$enable_workshop\" = \"yes\" -a -n \"$SKIP_MOTIF\"; then\n  AC_MSG_ERROR([cannot use workshop without Motif])\nfi\n\ndnl defining FEAT_XIM and FEAT_XFONTSET is delayed, so that they can be disabled\nif test \"$enable_xim\" = \"yes\"; then\n  AC_DEFINE(FEAT_XIM)\nfi\nif test \"$enable_fontset\" = \"yes\"; then\n  AC_DEFINE(FEAT_XFONTSET)\nfi\n\n\ndnl ---------------------------------------------------------------------------\ndnl end of GUI-checking\ndnl ---------------------------------------------------------------------------\n\ndnl Check for Cygwin, which needs an extra source file if not using X11\nAC_MSG_CHECKING(for CYGWIN or MSYS environment)\ncase `uname` in\n    CYGWIN*|MSYS*)    CYGWIN=yes; AC_MSG_RESULT(yes)\n                AC_MSG_CHECKING(for CYGWIN clipboard support)\n                if test \"x$with_x\" = \"xno\" ; then\n                  OS_EXTRA_SRC=winclip.c; OS_EXTRA_OBJ=objects/winclip.o\n                  AC_MSG_RESULT(yes)\n                  AC_DEFINE(FEAT_CYGWIN_WIN32_CLIPBOARD)\n                else\n                  AC_MSG_RESULT(no - using X11)\n                fi ;;\n\n    *)          CYGWIN=no; AC_MSG_RESULT(no);;\nesac\n\ndnl Only really enable hangul input when GUI and XFONTSET are available\nif test \"$enable_hangulinput\" = \"yes\"; then\n  if test \"x$GUITYPE\" = \"xNONE\"; then\n    AC_MSG_RESULT(no GUI selected; hangul input has been disabled)\n    enable_hangulinput=no\n  else\n    AC_DEFINE(FEAT_HANGULIN)\n    HANGULIN_SRC=hangulin.c\n    AC_SUBST(HANGULIN_SRC)\n    HANGULIN_OBJ=objects/hangulin.o\n    AC_SUBST(HANGULIN_OBJ)\n  fi\nfi\n\ndnl Checks for libraries and include files.\n\nAC_CACHE_CHECK([whether toupper is broken], [vim_cv_toupper_broken],\n  [\n    AC_RUN_IFELSE([AC_LANG_SOURCE([[\n#include \"confdefs.h\"\n#include <ctype.h>\n#if STDC_HEADERS\n# include <stdlib.h>\n# include <stddef.h>\n#endif\nmain() { exit(toupper('A') == 'A' && tolower('z') == 'z'); }\n  ]])],[\n    vim_cv_toupper_broken=yes\n  ],[\n    vim_cv_toupper_broken=no\n  ],[\n    AC_MSG_ERROR(cross-compiling: please set 'vim_cv_toupper_broken')\n  ])])\n\nif test \"x$vim_cv_toupper_broken\" = \"xyes\" ; then\n  AC_DEFINE(BROKEN_TOUPPER)\nfi\n\nAC_MSG_CHECKING(whether __DATE__ and __TIME__ work)\nAC_TRY_COMPILE([#include <stdio.h>], [printf(\"(\" __DATE__ \" \" __TIME__ \")\");],\n\tAC_MSG_RESULT(yes); AC_DEFINE(HAVE_DATE_TIME),\n\tAC_MSG_RESULT(no))\n\nAC_MSG_CHECKING(whether __attribute__((unused)) is allowed)\nAC_TRY_COMPILE([#include <stdio.h>], [int x __attribute__((unused));],\n\tAC_MSG_RESULT(yes); AC_DEFINE(HAVE_ATTRIBUTE_UNUSED),\n\tAC_MSG_RESULT(no))\n\ndnl Checks for header files.\nAC_CHECK_HEADER(elf.h, HAS_ELF=1)\ndnl AC_CHECK_HEADER(dwarf.h, SVR4=1)\nif test \"$HAS_ELF\" = 1; then\n  AC_CHECK_LIB(elf, main)\nfi\n\nAC_HEADER_DIRENT\n\ndnl If sys/wait.h is not found it might still exist but not be POSIX\ndnl compliant. In that case we define HAVE_UNION_WAIT (for NeXT)\nif test $ac_cv_header_sys_wait_h = no; then\n  AC_MSG_CHECKING([for sys/wait.h that defines union wait])\n  AC_TRY_COMPILE([#include <sys/wait.h>],\n\t\t\t[union wait xx, yy; xx = yy],\n\t\tAC_MSG_RESULT(yes)\n\t\t\tAC_DEFINE(HAVE_SYS_WAIT_H)\n\t\t\tAC_DEFINE(HAVE_UNION_WAIT),\n\t\tAC_MSG_RESULT(no))\nfi\n\nAC_CHECK_HEADERS(stdint.h stdlib.h string.h \\\n\tsys/select.h sys/utsname.h termcap.h fcntl.h \\\n\tsgtty.h sys/ioctl.h sys/time.h sys/types.h \\\n\ttermio.h iconv.h inttypes.h langinfo.h math.h \\\n\tunistd.h stropts.h errno.h sys/resource.h \\\n\tsys/systeminfo.h locale.h sys/stream.h termios.h \\\n\tlibc.h sys/statfs.h poll.h sys/poll.h pwd.h \\\n\tutime.h sys/param.h libintl.h libgen.h \\\n\tutil/debug.h util/msg18n.h frame.h sys/acl.h \\\n\tsys/access.h sys/sysinfo.h wchar.h wctype.h)\n\ndnl sys/ptem.h depends on sys/stream.h on Solaris\nAC_CHECK_HEADERS(sys/ptem.h, [], [],\n[#if defined HAVE_SYS_STREAM_H\n#  include <sys/stream.h>\n#endif])\n\ndnl sys/sysctl.h depends on sys/param.h on OpenBSD\nAC_CHECK_HEADERS(sys/sysctl.h, [], [],\n[#if defined HAVE_SYS_PARAM_H\n#  include <sys/param.h>\n#endif])\n\n\ndnl pthread_np.h may exist but can only be used after including pthread.h\nAC_MSG_CHECKING([for pthread_np.h])\nAC_TRY_COMPILE([\n#include <pthread.h>\n#include <pthread_np.h>],\n\t\t      [int i; i = 0;],\n\t      AC_MSG_RESULT(yes)\n\t\t      AC_DEFINE(HAVE_PTHREAD_NP_H),\n\t      AC_MSG_RESULT(no))\n\nAC_CHECK_HEADERS(strings.h)\nif test \"x$MACOSX\" = \"xyes\"; then\n  dnl The strings.h file on OS/X contains a warning and nothing useful.\n  AC_DEFINE(NO_STRINGS_WITH_STRING_H)\nelse\n\ndnl Check if strings.h and string.h can both be included when defined.\nAC_MSG_CHECKING([if strings.h can be included after string.h])\ncppflags_save=$CPPFLAGS\nCPPFLAGS=\"$CPPFLAGS $X_CFLAGS\"\nAC_TRY_COMPILE([\n#if defined(_AIX) && !defined(_AIX51) && !defined(_NO_PROTO)\n# define _NO_PROTO\t/* like in os_unix.h, causes conflict for AIX (Winn) */\n\t\t\t/* but don't do it on AIX 5.1 (Uribarri) */\n#endif\n#ifdef HAVE_XM_XM_H\n# include <Xm/Xm.h>\t/* This breaks it for HP-UX 11 (Squassabia) */\n#endif\n#ifdef HAVE_STRING_H\n# include <string.h>\n#endif\n#if defined(HAVE_STRINGS_H)\n# include <strings.h>\n#endif\n\t\t], [int i; i = 0;],\n\t\tAC_MSG_RESULT(yes),\n\t\tAC_DEFINE(NO_STRINGS_WITH_STRING_H)\n\t\tAC_MSG_RESULT(no))\nCPPFLAGS=$cppflags_save\nfi\n\ndnl Checks for typedefs, structures, and compiler characteristics.\nAC_PROG_GCC_TRADITIONAL\nAC_C_CONST\nAC_C_VOLATILE\nAC_TYPE_MODE_T\nAC_TYPE_OFF_T\nAC_TYPE_PID_T\nAC_TYPE_SIZE_T\nAC_TYPE_UID_T\nAC_TYPE_UINT32_T\n\nAC_HEADER_TIME\nAC_CHECK_TYPE(ino_t, long)\nAC_CHECK_TYPE(dev_t, unsigned)\nAC_C_BIGENDIAN(,,,)\nAC_C_INLINE\n\nAC_MSG_CHECKING(for rlim_t)\nif eval \"test \\\"`echo '$''{'ac_cv_type_rlim_t'+set}'`\\\" = set\"; then\n  AC_MSG_RESULT([(cached) $ac_cv_type_rlim_t])\nelse\n  AC_EGREP_CPP(dnl\nchangequote(<<,>>)dnl\n<<(^|[^a-zA-Z_0-9])rlim_t[^a-zA-Z_0-9]>>dnl\nchangequote([,]),\n  [\n#include <sys/types.h>\n#if STDC_HEADERS\n# include <stdlib.h>\n# include <stddef.h>\n#endif\n#ifdef HAVE_SYS_RESOURCE_H\n# include <sys/resource.h>\n#endif\n\t  ], ac_cv_type_rlim_t=yes, ac_cv_type_rlim_t=no)\n\t  AC_MSG_RESULT($ac_cv_type_rlim_t)\nfi\nif test $ac_cv_type_rlim_t = no; then\n  cat >> confdefs.h <<\\EOF\n#define rlim_t unsigned long\nEOF\nfi\n\nAC_MSG_CHECKING(for stack_t)\nif eval \"test \\\"`echo '$''{'ac_cv_type_stack_t'+set}'`\\\" = set\"; then\n  AC_MSG_RESULT([(cached) $ac_cv_type_stack_t])\nelse\n  AC_EGREP_CPP(stack_t,\n  [\n#include <sys/types.h>\n#if STDC_HEADERS\n# include <stdlib.h>\n# include <stddef.h>\n#endif\n#include <signal.h>\n\t  ], ac_cv_type_stack_t=yes, ac_cv_type_stack_t=no)\n\t  AC_MSG_RESULT($ac_cv_type_stack_t)\nfi\nif test $ac_cv_type_stack_t = no; then\n  cat >> confdefs.h <<\\EOF\n#define stack_t struct sigaltstack\nEOF\nfi\n\ndnl BSDI uses ss_base while others use ss_sp for the stack pointer.\nAC_MSG_CHECKING(whether stack_t has an ss_base field)\nAC_TRY_COMPILE([\n#include <sys/types.h>\n#if STDC_HEADERS\n# include <stdlib.h>\n# include <stddef.h>\n#endif\n#include <signal.h>\n#include \"confdefs.h\"\n\t\t\t], [stack_t sigstk; sigstk.ss_base = 0; ],\n\tAC_MSG_RESULT(yes); AC_DEFINE(HAVE_SS_BASE),\n\tAC_MSG_RESULT(no))\n\nolibs=\"$LIBS\"\nAC_MSG_CHECKING(--with-tlib argument)\nAC_ARG_WITH(tlib, [  --with-tlib=library     terminal library to be used ],)\nif test -n \"$with_tlib\"; then\n  AC_MSG_RESULT($with_tlib)\n  LIBS=\"$LIBS -l$with_tlib\"\n  AC_MSG_CHECKING(for linking with $with_tlib library)\n  AC_TRY_LINK([], [], AC_MSG_RESULT(OK), AC_MSG_ERROR(FAILED))\n  dnl Need to check for tgetent() below.\n  olibs=\"$LIBS\"\nelse\n  AC_MSG_RESULT([empty: automatic terminal library selection])\n  dnl  On HP-UX 10.10 termcap or termlib should be used instead of\n  dnl  curses, because curses is much slower.\n  dnl  Newer versions of ncurses are preferred over anything, except\n  dnl  when tinfo has been split off, it contains all we need.\n  dnl  Older versions of ncurses have bugs, get a new one!\n  dnl  Digital Unix (OSF1) should use curses (Ronald Schild).\n  dnl  On SCO Openserver should prefer termlib (Roger Cornelius).\n  case \"`uname -s 2>/dev/null`\" in\n\tOSF1|SCO_SV)\ttlibs=\"tinfo ncurses curses termlib termcap\";;\n\t*)\ttlibs=\"tinfo ncurses termlib termcap curses\";;\n  esac\n  for libname in $tlibs; do\n    AC_CHECK_LIB(${libname}, tgetent,,)\n    if test \"x$olibs\" != \"x$LIBS\"; then\n      dnl It's possible that a library is found but it doesn't work\n      dnl e.g., shared library that cannot be found\n      dnl compile and run a test program to be sure\n      AC_TRY_RUN([\n#ifdef HAVE_TERMCAP_H\n# include <termcap.h>\n#endif\n#if STDC_HEADERS\n# include <stdlib.h>\n# include <stddef.h>\n#endif\nmain() {char *s; s=(char *)tgoto(\"%p1%d\", 0, 1); exit(0); }],\n\t\t\t  res=\"OK\", res=\"FAIL\", res=\"FAIL\")\n      if test \"$res\" = \"OK\"; then\n\tbreak\n      fi\n      AC_MSG_RESULT($libname library is not usable)\n      LIBS=\"$olibs\"\n    fi\n  done\n  if test \"x$olibs\" = \"x$LIBS\"; then\n    AC_MSG_RESULT(no terminal library found)\n  fi\nfi\n\nif test \"x$olibs\" = \"x$LIBS\"; then\n  AC_MSG_CHECKING([for tgetent()])\n  AC_TRY_LINK([],\n      [char s[10000]; int res = tgetent(s, \"thisterminaldoesnotexist\");],\n\tAC_MSG_RESULT(yes),\n\tAC_MSG_ERROR([NOT FOUND!\n      You need to install a terminal library; for example ncurses.\n      Or specify the name of the library with --with-tlib.]))\nfi\n\nAC_CACHE_CHECK([whether we talk terminfo], [vim_cv_terminfo],\n  [\n    AC_RUN_IFELSE([AC_LANG_SOURCE([[\n#include \"confdefs.h\"\n#ifdef HAVE_TERMCAP_H\n# include <termcap.h>\n#endif\n#ifdef HAVE_STRING_H\n# include <string.h>\n#endif\n#if STDC_HEADERS\n# include <stdlib.h>\n# include <stddef.h>\n#endif\nmain()\n{char *s; s=(char *)tgoto(\"%p1%d\", 0, 1); exit(!strcmp(s==0 ? \"\" : s, \"1\")); }\n    ]])],[\n      vim_cv_terminfo=no\n    ],[\n      vim_cv_terminfo=yes\n    ],[\n      AC_MSG_ERROR(cross-compiling: please set 'vim_cv_terminfo')\n    ])\n  ])\n\nif test \"x$vim_cv_terminfo\" = \"xyes\" ; then\n  AC_DEFINE(TERMINFO)\nfi\n\nif test \"x$olibs\" != \"x$LIBS\"; then\n  AC_CACHE_CHECK([what tgetent() returns for an unknown terminal], [vim_cv_tgent],\n    [\n      AC_RUN_IFELSE([AC_LANG_SOURCE([[\n#include \"confdefs.h\"\n#ifdef HAVE_TERMCAP_H\n# include <termcap.h>\n#endif\n#if STDC_HEADERS\n# include <stdlib.h>\n# include <stddef.h>\n#endif\nmain()\n{char s[10000]; int res = tgetent(s, \"thisterminaldoesnotexist\"); exit(res != 0); }\n      ]])],[\n\tvim_cv_tgent=zero\n      ],[\n\tvim_cv_tgent=non-zero\n      ],[\n\tAC_MSG_ERROR(failed to compile test program.)\n      ])\n    ])\n  \n  if test \"x$vim_cv_tgent\" = \"xzero\" ; then\n    AC_DEFINE(TGETENT_ZERO_ERR, 0)\n  fi\nfi\n\nAC_MSG_CHECKING(whether termcap.h contains ospeed)\nAC_TRY_LINK([\n#ifdef HAVE_TERMCAP_H\n# include <termcap.h>\n#endif\n\t\t\t], [ospeed = 20000],\n\tAC_MSG_RESULT(yes); AC_DEFINE(HAVE_OSPEED),\n\t[AC_MSG_RESULT(no)\n\tAC_MSG_CHECKING(whether ospeed can be extern)\n\tAC_TRY_LINK([\n#ifdef HAVE_TERMCAP_H\n# include <termcap.h>\n#endif\nextern short ospeed;\n\t\t\t], [ospeed = 20000],\n\t\tAC_MSG_RESULT(yes); AC_DEFINE(OSPEED_EXTERN),\n\t\tAC_MSG_RESULT(no))]\n\t)\n\nAC_MSG_CHECKING([whether termcap.h contains UP, BC and PC])\nAC_TRY_LINK([\n#ifdef HAVE_TERMCAP_H\n# include <termcap.h>\n#endif\n\t\t\t], [if (UP == 0 && BC == 0) PC = 1],\n\tAC_MSG_RESULT(yes); AC_DEFINE(HAVE_UP_BC_PC),\n\t[AC_MSG_RESULT(no)\n\tAC_MSG_CHECKING([whether UP, BC and PC can be extern])\n\tAC_TRY_LINK([\n#ifdef HAVE_TERMCAP_H\n# include <termcap.h>\n#endif\nextern char *UP, *BC, PC;\n\t\t\t], [if (UP == 0 && BC == 0) PC = 1],\n\t\tAC_MSG_RESULT(yes); AC_DEFINE(UP_BC_PC_EXTERN),\n\t\tAC_MSG_RESULT(no))]\n\t)\n\nAC_MSG_CHECKING(whether tputs() uses outfuntype)\nAC_TRY_COMPILE([\n#ifdef HAVE_TERMCAP_H\n# include <termcap.h>\n#endif\n\t\t\t], [extern int xx(); tputs(\"test\", 1, (outfuntype)xx)],\n\tAC_MSG_RESULT(yes); AC_DEFINE(HAVE_OUTFUNTYPE),\n\tAC_MSG_RESULT(no))\n\ndnl On some SCO machines sys/select redefines struct timeval\nAC_MSG_CHECKING([whether sys/select.h and sys/time.h may both be included])\nAC_TRY_COMPILE([\n#include <sys/types.h>\n#include <sys/time.h>\n#include <sys/select.h>], ,\n\t  AC_MSG_RESULT(yes)\n\t\t\tAC_DEFINE(SYS_SELECT_WITH_SYS_TIME),\n\t  AC_MSG_RESULT(no))\n\ndnl AC_DECL_SYS_SIGLIST\n\ndnl Checks for pty.c (copied from screen) ==========================\nAC_MSG_CHECKING(for /dev/ptc)\nif test -r /dev/ptc; then\n  AC_DEFINE(HAVE_DEV_PTC)\n  AC_MSG_RESULT(yes)\nelse\n  AC_MSG_RESULT(no)\nfi\n\nAC_MSG_CHECKING(for SVR4 ptys)\nif test -c /dev/ptmx ; then\n  AC_TRY_LINK([], [ptsname(0);grantpt(0);unlockpt(0);],\n\tAC_MSG_RESULT(yes); AC_DEFINE(HAVE_SVR4_PTYS),\n\tAC_MSG_RESULT(no))\nelse\n  AC_MSG_RESULT(no)\nfi\n\nAC_MSG_CHECKING(for ptyranges)\nif test -d /dev/ptym ; then\n  pdir='/dev/ptym'\nelse\n  pdir='/dev'\nfi\ndnl SCO uses ptyp%d\nAC_EGREP_CPP(yes,\n[#ifdef M_UNIX\n   yes;\n#endif\n\t], ptys=`echo /dev/ptyp??`, ptys=`echo $pdir/pty??`)\ndnl if test -c /dev/ptyp19; then\ndnl ptys=`echo /dev/ptyp??`\ndnl else\ndnl ptys=`echo $pdir/pty??`\ndnl fi\nif test \"$ptys\" != \"$pdir/pty??\" ; then\n  p0=`echo $ptys | tr ' ' '\\012' | sed -e 's/^.*\\(.\\).$/\\1/g' | sort -u | tr -d '\\012'`\n  p1=`echo $ptys | tr ' ' '\\012' | sed -e 's/^.*\\(.\\)$/\\1/g'  | sort -u | tr -d '\\012'`\n  AC_DEFINE_UNQUOTED(PTYRANGE0,\"$p0\")\n  AC_DEFINE_UNQUOTED(PTYRANGE1,\"$p1\")\n  AC_MSG_RESULT([$p0 / $p1])\nelse\n  AC_MSG_RESULT([don't know])\nfi\n\ndnl    ****  pty mode/group handling ****\ndnl\ndnl support provided by Luke Mewburn <lm@rmit.edu.au>, 931222\nrm -f conftest_grp\nAC_CACHE_CHECK([default tty permissions/group], [vim_cv_tty_group],\n  [\n    AC_RUN_IFELSE([AC_LANG_SOURCE([[\n#include \"confdefs.h\"\n#include <sys/types.h>\n#if STDC_HEADERS\n# include <stdlib.h>\n# include <stddef.h>\n#endif\n#ifdef HAVE_UNISTD_H\n#include <unistd.h>\n#endif\n#include <sys/stat.h>\n#include <stdio.h>\nmain()\n{\n  struct stat sb;\n  char *x,*ttyname();\n  int om, m;\n  FILE *fp;\n\n  if (!(x = ttyname(0))) exit(1);\n  if (stat(x, &sb)) exit(1);\n  om = sb.st_mode;\n  if (om & 002) exit(0);\n  m = system(\"mesg y\");\n  if (m == -1 || m == 127) exit(1);\n  if (stat(x, &sb)) exit(1);\n  m = sb.st_mode;\n  if (chmod(x, om)) exit(1);\n  if (m & 002) exit(0);\n  if (sb.st_gid == getgid()) exit(1);\n  if (!(fp=fopen(\"conftest_grp\", \"w\")))\n    exit(1);\n  fprintf(fp, \"%d\\n\", sb.st_gid);\n  fclose(fp);\n  exit(0);\n}\n    ]])],[\n      if test -f conftest_grp; then\n\tvim_cv_tty_group=`cat conftest_grp`\n\tif test \"x$vim_cv_tty_mode\" = \"x\" ; then\n\t  vim_cv_tty_mode=0620\n\tfi\n\tAC_MSG_RESULT([pty mode: $vim_cv_tty_mode, group: $vim_cv_tty_group])\n      else\n\tvim_cv_tty_group=world\n\tAC_MSG_RESULT([ptys are world accessible])\n      fi\n    ],[\n      vim_cv_tty_group=world\n      AC_MSG_RESULT([can't determine - assume ptys are world accessible])\n    ],[\n      AC_MSG_ERROR(cross-compiling: please set 'vim_cv_tty_group' and 'vim_cv_tty_mode')\n    ])\n  ])\nrm -f conftest_grp\n\nif test \"x$vim_cv_tty_group\" != \"xworld\" ; then\n  AC_DEFINE_UNQUOTED(PTYGROUP,$vim_cv_tty_group)\n  if test \"x$vim_cv_tty_mode\" = \"x\" ; then\n    AC_MSG_ERROR([It seems you're cross compiling and have 'vim_cv_tty_group' set, please also set the environment variable 'vim_cv_tty_mode' to the correct mode (probably 0620)])\n  else\n    AC_DEFINE(PTYMODE, 0620)\n  fi\nfi\n\ndnl Checks for library functions. ===================================\n\nAC_TYPE_SIGNAL\n\ndnl find out what to use at the end of a signal function\nif test $ac_cv_type_signal = void; then\n  AC_DEFINE(SIGRETURN, [return])\nelse\n  AC_DEFINE(SIGRETURN, [return 0])\nfi\n\ndnl check if struct sigcontext is defined (used for SGI only)\nAC_MSG_CHECKING(for struct sigcontext)\nAC_TRY_COMPILE([\n#include <signal.h>\ntest_sig()\n{\n    struct sigcontext *scont;\n    scont = (struct sigcontext *)0;\n    return 1;\n} ], ,\n\t  AC_MSG_RESULT(yes)\n\t\tAC_DEFINE(HAVE_SIGCONTEXT),\n\t  AC_MSG_RESULT(no))\n\ndnl tricky stuff: try to find out if getcwd() is implemented with\ndnl system(\"sh -c pwd\")\nAC_CACHE_CHECK([getcwd implementation is broken], [vim_cv_getcwd_broken],\n  [\n    AC_RUN_IFELSE([AC_LANG_SOURCE([[\n#include \"confdefs.h\"\n#ifdef HAVE_UNISTD_H\n#include <unistd.h>\n#endif\nchar *dagger[] = { \"IFS=pwd\", 0 };\nmain()\n{\n  char buffer[500];\n  extern char **environ;\n  environ = dagger;\n  return getcwd(buffer, 500) ? 0 : 1;\n}\n    ]])],[\n      vim_cv_getcwd_broken=no\n    ],[\n      vim_cv_getcwd_broken=yes\n    ],[\n      AC_MSG_ERROR(cross-compiling: please set 'vim_cv_getcwd_broken')\n    ])\n  ])\n\nif test \"x$vim_cv_getcwd_broken\" = \"xyes\" ; then\n  AC_DEFINE(BAD_GETCWD)\nfi\n\ndnl Check for functions in one big call, to reduce the size of configure.\ndnl Can only be used for functions that do not require any include.\nAC_CHECK_FUNCS(bcmp fchdir fchown fsync getcwd getpseudotty \\\n\tgetpwent getpwnam getpwuid getrlimit gettimeofday getwd lstat memcmp \\\n\tmemset mkdtemp nanosleep opendir putenv qsort readlink select setenv \\\n\tsetpgid setsid sigaltstack sigstack sigset sigsetjmp sigaction \\\n\tsigvec strcasecmp strerror strftime stricmp strncasecmp \\\n\tstrnicmp strpbrk strtol tgetent towlower towupper iswupper \\\n\tusleep utime utimes)\nAC_FUNC_FSEEKO\n\ndnl define _LARGE_FILES, _FILE_OFFSET_BITS and _LARGEFILE_SOURCE when\ndnl appropriate, so that off_t is 64 bits when needed.\nAC_SYS_LARGEFILE\n\ndnl fstatfs() can take 2 to 4 arguments, try to use st_blksize if possible\nAC_MSG_CHECKING(for st_blksize)\nAC_TRY_COMPILE(\n[#include <sys/types.h>\n#include <sys/stat.h>],\n[\tstruct stat st;\n\tint n;\n\n\tstat(\"/\", &st);\n\tn = (int)st.st_blksize;],\n\tAC_MSG_RESULT(yes); AC_DEFINE(HAVE_ST_BLKSIZE),\n\tAC_MSG_RESULT(no))\n\nAC_CACHE_CHECK([whether stat() ignores a trailing slash], [vim_cv_stat_ignores_slash],\n  [\n    AC_RUN_IFELSE([AC_LANG_SOURCE([[\n#include \"confdefs.h\"\n#if STDC_HEADERS\n# include <stdlib.h>\n# include <stddef.h>\n#endif\n#include <sys/types.h>\n#include <sys/stat.h>\nmain() {struct stat st;  exit(stat(\"configure/\", &st) != 0); }\n    ]])],[\n      vim_cv_stat_ignores_slash=yes\n    ],[\n      vim_cv_stat_ignores_slash=no\n    ],[\n      AC_MSG_ERROR(cross-compiling: please set 'vim_cv_stat_ignores_slash')\n    ])\n  ])\n\nif test \"x$vim_cv_stat_ignores_slash\" = \"xyes\" ; then\n  AC_DEFINE(STAT_IGNORES_SLASH)\nfi\n  \ndnl Link with iconv for charset translation, if not found without library.\ndnl check for iconv() requires including iconv.h\ndnl Add \"-liconv\" when possible; Solaris has iconv but use GNU iconv when it\ndnl has been installed.\nAC_MSG_CHECKING(for iconv_open())\nsave_LIBS=\"$LIBS\"\nLIBS=\"$LIBS -liconv\"\nAC_TRY_LINK([\n#ifdef HAVE_ICONV_H\n# include <iconv.h>\n#endif\n    ], [iconv_open(\"fr\", \"to\");],\n    AC_MSG_RESULT(yes; with -liconv); AC_DEFINE(HAVE_ICONV),\n    LIBS=\"$save_LIBS\"\n    AC_TRY_LINK([\n#ifdef HAVE_ICONV_H\n# include <iconv.h>\n#endif\n\t], [iconv_open(\"fr\", \"to\");],\n\tAC_MSG_RESULT(yes); AC_DEFINE(HAVE_ICONV),\n\tAC_MSG_RESULT(no)))\n\n\nAC_MSG_CHECKING(for nl_langinfo(CODESET))\nAC_TRY_LINK([\n#ifdef HAVE_LANGINFO_H\n# include <langinfo.h>\n#endif\n], [char *cs = nl_langinfo(CODESET);],\n\tAC_MSG_RESULT(yes); AC_DEFINE(HAVE_NL_LANGINFO_CODESET),\n\tAC_MSG_RESULT(no))\n\ndnl Need various functions for floating point support.  Only enable\ndnl floating point when they are all present.\nAC_CHECK_LIB(m, strtod)\nAC_MSG_CHECKING([for strtod() and other floating point functions])\nAC_TRY_LINK([\n#ifdef HAVE_MATH_H\n# include <math.h>\n#endif\n#if STDC_HEADERS\n# include <stdlib.h>\n# include <stddef.h>\n#endif\n], [char *s; double d;\n    d = strtod(\"1.1\", &s);\n    d = fabs(1.11);\n    d = ceil(1.11);\n    d = floor(1.11);\n    d = log10(1.11);\n    d = pow(1.11, 2.22);\n    d = sqrt(1.11);\n    d = sin(1.11);\n    d = cos(1.11);\n    d = atan(1.11);\n    ],\n\tAC_MSG_RESULT(yes); AC_DEFINE(HAVE_FLOAT_FUNCS),\n\tAC_MSG_RESULT(no))\n\ndnl isinf() and isnan() need to include header files and may need -lm.\nAC_MSG_CHECKING([for isinf()])\nAC_TRY_LINK([\n#ifdef HAVE_MATH_H\n# include <math.h>\n#endif\n#if STDC_HEADERS\n# include <stdlib.h>\n# include <stddef.h>\n#endif\n], [int r = isinf(1.11); ],\n\tAC_MSG_RESULT(yes); AC_DEFINE(HAVE_ISINF),\n\tAC_MSG_RESULT(no))\n\nAC_MSG_CHECKING([for isnan()])\nAC_TRY_LINK([\n#ifdef HAVE_MATH_H\n# include <math.h>\n#endif\n#if STDC_HEADERS\n# include <stdlib.h>\n# include <stddef.h>\n#endif\n], [int r = isnan(1.11); ],\n\tAC_MSG_RESULT(yes); AC_DEFINE(HAVE_ISNAN),\n\tAC_MSG_RESULT(no))\n\ndnl Link with -lposix1e for ACL stuff; if not found, try -lacl for SGI\ndnl when -lacl works, also try to use -lattr (required for Debian).\ndnl On Solaris, use the acl_get/set functions in libsec, if present.\nAC_MSG_CHECKING(--disable-acl argument)\nAC_ARG_ENABLE(acl,\n\t[  --disable-acl           Don't check for ACL support.],\n\t, [enable_acl=\"yes\"])\nif test \"$enable_acl\" = \"yes\"; then\nAC_MSG_RESULT(no)\nAC_CHECK_LIB(posix1e, acl_get_file, [LIBS=\"$LIBS -lposix1e\"],\n\tAC_CHECK_LIB(acl, acl_get_file, [LIBS=\"$LIBS -lacl\"\n\t\t  AC_CHECK_LIB(attr, fgetxattr, LIBS=\"$LIBS -lattr\",,)],,),)\n\nAC_MSG_CHECKING(for POSIX ACL support)\nAC_TRY_LINK([\n#include <sys/types.h>\n#ifdef HAVE_SYS_ACL_H\n# include <sys/acl.h>\n#endif\nacl_t acl;], [acl = acl_get_file(\"foo\", ACL_TYPE_ACCESS);\n\tacl_set_file(\"foo\", ACL_TYPE_ACCESS, acl);\n\tacl_free(acl);],\n\tAC_MSG_RESULT(yes); AC_DEFINE(HAVE_POSIX_ACL),\n\tAC_MSG_RESULT(no))\n\nAC_CHECK_LIB(sec, acl_get, [LIBS=\"$LIBS -lsec\"; AC_DEFINE(HAVE_SOLARIS_ZFS_ACL)],\nAC_MSG_CHECKING(for Solaris ACL support)\nAC_TRY_LINK([\n#ifdef HAVE_SYS_ACL_H\n# include <sys/acl.h>\n#endif], [acl(\"foo\", GETACLCNT, 0, NULL);\n\t],\n\tAC_MSG_RESULT(yes); AC_DEFINE(HAVE_SOLARIS_ACL),\n\tAC_MSG_RESULT(no)))\n\nAC_MSG_CHECKING(for AIX ACL support)\nAC_TRY_LINK([\n#if STDC_HEADERS\n# include <stdlib.h>\n# include <stddef.h>\n#endif\n#ifdef HAVE_SYS_ACL_H\n# include <sys/acl.h>\n#endif\n#ifdef HAVE_SYS_ACCESS_H\n# include <sys/access.h>\n#endif\n#define _ALL_SOURCE\n\n#include <sys/stat.h>\n\nint aclsize;\nstruct acl *aclent;], [aclsize = sizeof(struct acl);\n\taclent = (void *)malloc(aclsize);\n\tstatacl(\"foo\", STX_NORMAL, aclent, aclsize);\n\t],\n\tAC_MSG_RESULT(yes); AC_DEFINE(HAVE_AIX_ACL),\n\tAC_MSG_RESULT(no))\nelse\n  AC_MSG_RESULT(yes)\nfi\n\nif test \"x$GTK_CFLAGS\" != \"x\"; then\n  dnl pango_shape_full() is new, fall back to pango_shape().\n  AC_MSG_CHECKING(for pango_shape_full)\n  ac_save_CFLAGS=\"$CFLAGS\"\n  ac_save_LIBS=\"$LIBS\"\n  CFLAGS=\"$CFLAGS $GTK_CFLAGS\"\n  LIBS=\"$LIBS $GTK_LIBS\"\n  AC_TRY_LINK(\n  [#include <gtk/gtk.h>],\n  [ pango_shape_full(NULL, 0, NULL, 0, NULL, NULL); ],\n\t  AC_MSG_RESULT(yes); AC_DEFINE(HAVE_PANGO_SHAPE_FULL),\n\t  AC_MSG_RESULT(no))\n  CFLAGS=\"$ac_save_CFLAGS\"\n  LIBS=\"$ac_save_LIBS\"\nfi\n\nAC_MSG_CHECKING(--disable-gpm argument)\nAC_ARG_ENABLE(gpm,\n\t[  --disable-gpm           Don't use gpm (Linux mouse daemon).], ,\n\t[enable_gpm=\"yes\"])\n\nif test \"$enable_gpm\" = \"yes\"; then\n  AC_MSG_RESULT(no)\n  dnl Checking if gpm support can be compiled\n  AC_CACHE_CHECK([for gpm], vi_cv_have_gpm,\n\t[olibs=\"$LIBS\" ; LIBS=\"-lgpm\"]\n\tAC_TRY_LINK(\n\t    [#include <gpm.h>\n\t    #include <linux/keyboard.h>],\n\t    [Gpm_GetLibVersion(NULL);],\n\t    dnl Configure defines HAVE_GPM, if it is defined feature.h defines\n\t    dnl FEAT_MOUSE_GPM if mouse support is included\n\t    [vi_cv_have_gpm=yes],\n\t    [vi_cv_have_gpm=no])\n\t[LIBS=\"$olibs\"]\n    )\n  if test $vi_cv_have_gpm = yes; then\n    LIBS=\"$LIBS -lgpm\"\n    AC_DEFINE(HAVE_GPM)\n  fi\nelse\n  AC_MSG_RESULT(yes)\nfi\n\nAC_MSG_CHECKING(--disable-sysmouse argument)\nAC_ARG_ENABLE(sysmouse,\n\t[  --disable-sysmouse    Don't use sysmouse (mouse in *BSD console).], ,\n\t[enable_sysmouse=\"yes\"])\n\nif test \"$enable_sysmouse\" = \"yes\"; then\n  AC_MSG_RESULT(no)\n  dnl Checking if sysmouse support can be compiled\n  dnl Configure defines HAVE_SYSMOUSE, if it is defined feature.h\n  dnl defines FEAT_SYSMOUSE if mouse support is included\n  AC_CACHE_CHECK([for sysmouse], vi_cv_have_sysmouse,\n\tAC_TRY_LINK(\n\t    [#include <sys/consio.h>\n\t     #include <signal.h>\n\t     #include <sys/fbio.h>],\n\t    [struct mouse_info   mouse;\n\t     mouse.operation = MOUSE_MODE;\n\t     mouse.operation = MOUSE_SHOW;\n\t     mouse.u.mode.mode = 0;\n\t     mouse.u.mode.signal = SIGUSR2;],\n\t    [vi_cv_have_sysmouse=yes],\n\t    [vi_cv_have_sysmouse=no])\n    )\n  if test $vi_cv_have_sysmouse = yes; then\n    AC_DEFINE(HAVE_SYSMOUSE)\n  fi\nelse\n  AC_MSG_RESULT(yes)\nfi\n\ndnl make sure the FD_CLOEXEC flag for fcntl()'s F_SETFD command is known\nAC_MSG_CHECKING(for FD_CLOEXEC)\nAC_TRY_COMPILE(\n[#if HAVE_FCNTL_H\n# include <fcntl.h>\n#endif],\n[\tint flag = FD_CLOEXEC;],\n\tAC_MSG_RESULT(yes); AC_DEFINE(HAVE_FD_CLOEXEC),\n\tAC_MSG_RESULT(not usable))\n\ndnl rename needs to be checked separately to work on Nextstep with cc\nAC_MSG_CHECKING(for rename)\nAC_TRY_LINK([#include <stdio.h>], [rename(\"this\", \"that\")],\n\tAC_MSG_RESULT(yes); AC_DEFINE(HAVE_RENAME),\n\tAC_MSG_RESULT(no))\n\ndnl sysctl() may exist but not the arguments we use\nAC_MSG_CHECKING(for sysctl)\nAC_TRY_COMPILE(\n[#include <sys/types.h>\n#include <sys/sysctl.h>],\n[\tint mib[2], r;\n\tsize_t len;\n\n\tmib[0] = CTL_HW;\n\tmib[1] = HW_USERMEM;\n\tlen = sizeof(r);\n\t(void)sysctl(mib, 2, &r, &len, (void *)0, (size_t)0);\n\t],\n\tAC_MSG_RESULT(yes); AC_DEFINE(HAVE_SYSCTL),\n\tAC_MSG_RESULT(not usable))\n\ndnl sysinfo() may exist but not be Linux compatible\nAC_MSG_CHECKING(for sysinfo)\nAC_TRY_COMPILE(\n[#include <sys/types.h>\n#include <sys/sysinfo.h>],\n[\tstruct sysinfo sinfo;\n\tint t;\n\n\t(void)sysinfo(&sinfo);\n\tt = sinfo.totalram;\n\t],\n\tAC_MSG_RESULT(yes); AC_DEFINE(HAVE_SYSINFO),\n\tAC_MSG_RESULT(not usable))\n\ndnl struct sysinfo may have the mem_unit field or not\nAC_MSG_CHECKING(for sysinfo.mem_unit)\nAC_TRY_COMPILE(\n[#include <sys/types.h>\n#include <sys/sysinfo.h>],\n[\tstruct sysinfo sinfo;\n\tsinfo.mem_unit = 1;\n\t],\n\tAC_MSG_RESULT(yes); AC_DEFINE(HAVE_SYSINFO_MEM_UNIT),\n\tAC_MSG_RESULT(no))\n\ndnl sysconf() may exist but not support what we want to use\nAC_MSG_CHECKING(for sysconf)\nAC_TRY_COMPILE(\n[#include <unistd.h>],\n[\t(void)sysconf(_SC_PAGESIZE);\n\t(void)sysconf(_SC_PHYS_PAGES);\n\t],\n\tAC_MSG_RESULT(yes); AC_DEFINE(HAVE_SYSCONF),\n\tAC_MSG_RESULT(not usable))\n\nAC_CHECK_SIZEOF([int])\nAC_CHECK_SIZEOF([long])\nAC_CHECK_SIZEOF([time_t])\nAC_CHECK_SIZEOF([off_t])\n\ndnl Use different names to avoid clashing with other header files.\nAC_DEFINE_UNQUOTED(VIM_SIZEOF_INT, [$ac_cv_sizeof_int])\nAC_DEFINE_UNQUOTED(VIM_SIZEOF_LONG, [$ac_cv_sizeof_long])\n\ndnl Make sure that uint32_t is really 32 bits unsigned.\nAC_MSG_CHECKING([uint32_t is 32 bits])\nAC_TRY_RUN([\n#ifdef HAVE_STDINT_H\n# include <stdint.h>\n#endif\n#ifdef HAVE_INTTYPES_H\n# include <inttypes.h>\n#endif\nmain() {\n  uint32_t nr1 = (uint32_t)-1;\n  uint32_t nr2 = (uint32_t)0xffffffffUL;\n  if (sizeof(uint32_t) != 4 || nr1 != 0xffffffffUL || nr2 + 1 != 0) exit(1);\n  exit(0);\n}],\nAC_MSG_RESULT(ok),\nAC_MSG_ERROR([WRONG!  uint32_t not defined correctly.]),\nAC_MSG_WARN([cannot check uint32_t when cross-compiling.]))\n\ndnl Check for memmove() before bcopy(), makes memmove() be used when both are\ndnl present, fixes problem with incompatibility between Solaris 2.4 and 2.5.\n\n[bcopy_test_prog='\n#include \"confdefs.h\"\n#ifdef HAVE_STRING_H\n# include <string.h>\n#endif\n#if STDC_HEADERS\n# include <stdlib.h>\n# include <stddef.h>\n#endif\nmain() {\n  char buf[10];\n  strcpy(buf, \"abcdefghi\");\n  mch_memmove(buf, buf + 2, 3);\n  if (strncmp(buf, \"ababcf\", 6))\n    exit(1);\n  strcpy(buf, \"abcdefghi\");\n  mch_memmove(buf + 2, buf, 3);\n  if (strncmp(buf, \"cdedef\", 6))\n    exit(1);\n  exit(0); /* libc version works properly.  */\n}']\n\nAC_CACHE_CHECK([whether memmove handles overlaps],[vim_cv_memmove_handles_overlap],\n  [\n    AC_RUN_IFELSE([AC_LANG_SOURCE([[#define mch_memmove(s,d,l) memmove(d,s,l) $bcopy_test_prog]])],\n      [\n\tvim_cv_memmove_handles_overlap=yes\n      ],[\n\tvim_cv_memmove_handles_overlap=no\n      ],[\n\tAC_MSG_ERROR(cross-compiling: please set 'vim_cv_memmove_handles_overlap')\n      ])\n  ])\n\nif test \"x$vim_cv_memmove_handles_overlap\" = \"xyes\" ; then\n  AC_DEFINE(USEMEMMOVE)\nelse\n  AC_CACHE_CHECK([whether bcopy handles overlaps],[vim_cv_bcopy_handles_overlap],\n    [\n      AC_RUN_IFELSE([AC_LANG_SOURCE([[#define mch_bcopy(s,d,l) bcopy(d,s,l) $bcopy_test_prog]])],\n      [\n\tvim_cv_bcopy_handles_overlap=yes\n      ],[\n\tvim_cv_bcopy_handles_overlap=no\n      ],[\n\tAC_MSG_ERROR(cross-compiling: please set 'vim_cv_bcopy_handles_overlap')\n      ])\n    ])\n\n  if test \"x$vim_cv_bcopy_handles_overlap\" = \"xyes\" ; then\n    AC_DEFINE(USEBCOPY)\n  else\n    AC_CACHE_CHECK([whether memcpy handles overlaps],[vim_cv_memcpy_handles_overlap],\n      [\n\tAC_RUN_IFELSE([AC_LANG_SOURCE([[#define mch_memcpy(s,d,l) memcpy(d,s,l) $bcopy_test_prog]])],\n\t  [\n\t    vim_cv_memcpy_handles_overlap=yes\n\t  ],[\n\t    vim_cv_memcpy_handles_overlap=no\n\t  ],[\n\t    AC_MSG_ERROR(cross-compiling: please set 'vim_cv_memcpy_handles_overlap')\n\t  ])\n      ])\n\n    if test \"x$vim_cv_memcpy_handles_overlap\" = \"xyes\" ; then\n      AC_DEFINE(USEMEMCPY)\n    fi\n  fi\nfi\n\n\ndnl Check for multibyte locale functions\ndnl Find out if _Xsetlocale() is supported by libX11.\ndnl Check if X_LOCALE should be defined.\nif test \"x$with_x\" = \"xyes\"; then\n  cflags_save=$CFLAGS\n  libs_save=$LIBS\n  LIBS=\"$LIBS $X_LIBS $GUI_LIB_LOC $GUI_X_LIBS $X_PRE_LIBS $X_LIB $X_EXTRA_LIBS\"\n  CFLAGS=\"$CFLAGS $X_CFLAGS\"\n\n  AC_MSG_CHECKING(whether X_LOCALE needed)\n  AC_TRY_COMPILE([#include <X11/Xlocale.h>],,\n      AC_TRY_LINK_FUNC([_Xsetlocale], [AC_MSG_RESULT(yes)\n\t      AC_DEFINE(X_LOCALE)], AC_MSG_RESULT(no)),\n      AC_MSG_RESULT(no))\n\n  AC_MSG_CHECKING(whether Xutf8SetWMProperties() can be used)\n  AC_TRY_LINK_FUNC([Xutf8SetWMProperties], [AC_MSG_RESULT(yes)\n\t      AC_DEFINE(HAVE_XUTF8SETWMPROPERTIES)], AC_MSG_RESULT(no))\n\n  CFLAGS=$cflags_save\n  LIBS=$libs_save\nfi\n\ndnl Link with xpg4, it is said to make Korean locale working\nAC_CHECK_LIB(xpg4, _xpg4_setrunelocale, [LIBS=\"$LIBS -lxpg4\"],,)\n\ndnl Check how we can run ctags.  Default to \"ctags\" when nothing works.\ndnl Use --version to detect Exuberant ctags (preferred)\ndnl       Add --fields=+S to get function signatures for omni completion.\ndnl -t for typedefs (many ctags have this)\ndnl -s for static functions (Elvis ctags only?)\ndnl -v for variables. Dangerous, most ctags take this for 'vgrind style'.\ndnl -i+m to test for older Exuberant ctags\nAC_MSG_CHECKING(how to create tags)\ntest -f tags && mv tags tags.save\nif (eval ctags --version /dev/null | grep Exuberant) < /dev/null 1>&AC_FD_CC 2>&1; then\n  TAGPRG=\"ctags -I INIT+ --fields=+S\"\nelif (eval exctags --version /dev/null | grep Exuberant) < /dev/null 1>&AC_FD_CC 2>&1; then\n  TAGPRG=\"exctags -I INIT+ --fields=+S\"\nelif (eval exuberant-ctags --version /dev/null | grep Exuberant) < /dev/null 1>&AC_FD_CC 2>&1; then\n  TAGPRG=\"exuberant-ctags -I INIT+ --fields=+S\"\nelse\n  TAGPRG=\"ctags\"\n  (eval etags\t   /dev/null) < /dev/null 1>&AC_FD_CC 2>&1 && TAGPRG=\"etags\"\n  (eval etags -c   /dev/null) < /dev/null 1>&AC_FD_CC 2>&1 && TAGPRG=\"etags -c\"\n  (eval ctags\t   /dev/null) < /dev/null 1>&AC_FD_CC 2>&1 && TAGPRG=\"ctags\"\n  (eval ctags -t   /dev/null) < /dev/null 1>&AC_FD_CC 2>&1 && TAGPRG=\"ctags -t\"\n  (eval ctags -ts  /dev/null) < /dev/null 1>&AC_FD_CC 2>&1 && TAGPRG=\"ctags -ts\"\n  (eval ctags -tvs /dev/null) < /dev/null 1>&AC_FD_CC 2>&1 && TAGPRG=\"ctags -tvs\"\n  (eval ctags -i+m /dev/null) < /dev/null 1>&AC_FD_CC 2>&1 && TAGPRG=\"ctags -i+m\"\nfi\ntest -f tags.save && mv tags.save tags\nAC_MSG_RESULT($TAGPRG) AC_SUBST(TAGPRG)\n\ndnl Check how we can run man with a section number\nAC_MSG_CHECKING(how to run man with a section nr)\nMANDEF=\"man\"\n(eval MANPAGER=cat PAGER=cat man -s 2 read) < /dev/null > /dev/null 2>&AC_FD_CC && MANDEF=\"man -s\"\nAC_MSG_RESULT($MANDEF)\nif test \"$MANDEF\" = \"man -s\"; then\n  AC_DEFINE(USEMAN_S)\nfi\n\ndnl Check if gettext() is working and if it needs -lintl\ndnl We take care to base this on an empty LIBS: on some systems libelf would be\ndnl in LIBS and implicitly take along libintl. The final LIBS would then not\ndnl contain libintl, and the link step would fail due to -Wl,--as-needed.\nAC_MSG_CHECKING(--disable-nls argument)\nAC_ARG_ENABLE(nls,\n\t[  --disable-nls           Don't support NLS (gettext()).], ,\n\t[enable_nls=\"yes\"])\n\nif test \"$enable_nls\" = \"yes\"; then\n  AC_MSG_RESULT(no)\n\n  INSTALL_LANGS=install-languages\n  AC_SUBST(INSTALL_LANGS)\n  INSTALL_TOOL_LANGS=install-tool-languages\n  AC_SUBST(INSTALL_TOOL_LANGS)\n\n  AC_CHECK_PROG(MSGFMT, msgfmt, msgfmt, )\n  AC_MSG_CHECKING([for NLS])\n  if test -f po/Makefile; then\n    have_gettext=\"no\"\n    if test -n \"$MSGFMT\"; then\n      olibs=$LIBS\n      LIBS=\"\"\n      AC_TRY_LINK(\n\t[#include <libintl.h>],\n\t[gettext(\"Test\");],\n\tAC_MSG_RESULT([gettext() works]); have_gettext=\"yes\"; LIBS=$olibs,\n\t  LIBS=\"-lintl\"\n\t  AC_TRY_LINK(\n\t      [#include <libintl.h>],\n\t      [gettext(\"Test\");],\n\t      AC_MSG_RESULT([gettext() works with -lintl]); have_gettext=\"yes\";\n\t      LIBS=\"$olibs -lintl\",\n\t      AC_MSG_RESULT([gettext() doesn't work]);\n\t      LIBS=$olibs))\n    else\n      AC_MSG_RESULT([msgfmt not found - disabled]);\n    fi\n    if test $have_gettext = \"yes\" -a \"x$features\" != \"xtiny\" -a \"x$features\" != \"xsmall\"; then\n      AC_DEFINE(HAVE_GETTEXT)\n      MAKEMO=yes\n      AC_SUBST(MAKEMO)\n      dnl this was added in GNU gettext 0.10.36\n      AC_CHECK_FUNCS(bind_textdomain_codeset)\n      dnl _nl_msg_cat_cntr is required for GNU gettext\n      AC_MSG_CHECKING([for _nl_msg_cat_cntr])\n      AC_TRY_LINK(\n\t\t[#include <libintl.h>\n\t\textern int _nl_msg_cat_cntr;],\n\t\t[++_nl_msg_cat_cntr;],\n\t\tAC_MSG_RESULT([yes]); AC_DEFINE(HAVE_NL_MSG_CAT_CNTR),\n\t\tAC_MSG_RESULT([no]))\n    fi\n  else\n    AC_MSG_RESULT([no \"po/Makefile\" - disabled]);\n  fi\nelse\n  AC_MSG_RESULT(yes)\nfi\n\ndnl Check for dynamic linking loader\nAC_CHECK_HEADER(dlfcn.h, DLL=dlfcn.h, [AC_CHECK_HEADER(dl.h, DLL=dl.h)])\nif test x${DLL} = xdlfcn.h; then\n  AC_DEFINE(HAVE_DLFCN_H, 1, [ Define if we have dlfcn.h. ])\n  AC_MSG_CHECKING([for dlopen()])\n  AC_TRY_LINK(,[\n\t\textern void* dlopen();\n\t\tdlopen();\n      ],\n      AC_MSG_RESULT(yes);\n\t      AC_DEFINE(HAVE_DLOPEN, 1, [ Define if we have dlopen() ]),\n      AC_MSG_RESULT(no);\n\t      AC_MSG_CHECKING([for dlopen() in -ldl])\n\t      olibs=$LIBS\n\t      LIBS=\"$LIBS -ldl\"\n\t      AC_TRY_LINK(,[\n\t\t\t\textern void* dlopen();\n\t\t\t\tdlopen();\n\t\t ],\n\t\t AC_MSG_RESULT(yes);\n\t\t\t  AC_DEFINE(HAVE_DLOPEN, 1, [ Define if we have dlopen() ]),\n\t\t AC_MSG_RESULT(no);\n\t\t\t  LIBS=$olibs))\n  dnl ReliantUNIX has dlopen() in libc but everything else in libdl\n  dnl ick :-)\n  AC_MSG_CHECKING([for dlsym()])\n  AC_TRY_LINK(,[\n\t\textern void* dlsym();\n\t\tdlsym();\n      ],\n      AC_MSG_RESULT(yes);\n\t      AC_DEFINE(HAVE_DLSYM, 1, [ Define if we have dlsym() ]),\n      AC_MSG_RESULT(no);\n\t      AC_MSG_CHECKING([for dlsym() in -ldl])\n\t      olibs=$LIBS\n\t      LIBS=\"$LIBS -ldl\"\n\t      AC_TRY_LINK(,[\n\t\t\t\textern void* dlsym();\n\t\t\t\tdlsym();\n\t\t ],\n\t\t AC_MSG_RESULT(yes);\n\t\t\t  AC_DEFINE(HAVE_DLSYM, 1, [ Define if we have dlsym() ]),\n\t\t AC_MSG_RESULT(no);\n\t\t\t  LIBS=$olibs))\nelif test x${DLL} = xdl.h; then\n  AC_DEFINE(HAVE_DL_H, 1, [ Define if we have dl.h. ])\n  AC_MSG_CHECKING([for shl_load()])\n  AC_TRY_LINK(,[\n\t\textern void* shl_load();\n\t\tshl_load();\n     ],\n     AC_MSG_RESULT(yes);\n\t  AC_DEFINE(HAVE_SHL_LOAD, 1, [ Define if we have shl_load() ]),\n     AC_MSG_RESULT(no);\n\t  AC_MSG_CHECKING([for shl_load() in -ldld])\n\t  olibs=$LIBS\n\t  LIBS=\"$LIBS -ldld\"\n\t  AC_TRY_LINK(,[\n\t\t\textern void* shl_load();\n\t\t\tshl_load();\n\t     ],\n\t     AC_MSG_RESULT(yes);\n\t\t  AC_DEFINE(HAVE_SHL_LOAD, 1, [ Define if we have shl_load() ]),\n\t     AC_MSG_RESULT(no);\n\t\t  LIBS=$olibs))\nfi\nAC_CHECK_HEADERS(setjmp.h)\n\nif test \"x$MACOSX\" = \"xyes\" -a -n \"$PERL\"; then\n  dnl -ldl must come after DynaLoader.a\n  if echo $LIBS | grep -e '-ldl' >/dev/null; then\n    LIBS=`echo $LIBS | sed s/-ldl//`\n    PERL_LIBS=\"$PERL_LIBS -ldl\"\n  fi\nfi\n\nif test \"x$MACOSX\" = \"xyes\"; then\n  AC_MSG_CHECKING(whether we need -framework Cocoa)\n  dnl Cocoa is needed with FEAT_CLIPBOARD or FEAT_MBYTE (the former is\n  dnl disabled during tiny build)\n  if test \"x$features\" != \"xtiny\" || test \"x$enable_multibyte\" = \"xyes\"; then\n    LIBS=$\"$LIBS -framework Cocoa\"\n    AC_MSG_RESULT(yes)\n  else\n    AC_MSG_RESULT(no)\n  fi\n  dnl As mentioned above, tiny build implies os_macosx.m isn't needed.  \n  dnl Exclude it from OS_EXTRA_SRC so that linker won't complain about\n  dnl missing Objective-C symbols.\n  if test \"x$features\" = \"xtiny\"; then\n    OS_EXTRA_SRC=`echo \"$OS_EXTRA_SRC\" | sed -e 's+os_macosx.m++'`\n    OS_EXTRA_OBJ=`echo \"$OS_EXTRA_OBJ\" | sed -e 's+objects/os_macosx.o++'`\n  fi\nfi\nif test \"x$MACARCH\" = \"xboth\" && test \"x$GUITYPE\" = \"xCARBONGUI\"; then\n  LDFLAGS=\"$LDFLAGS -isysroot $DEVELOPER_DIR/SDKs/MacOSX10.4u.sdk -arch i386 -arch ppc\"\nfi\n\ndnl gcc 3.1 changed the meaning of -MM.  The only solution appears to be to\ndnl use \"-isystem\" instead of \"-I\" for all non-Vim include dirs.\ndnl But only when making dependencies, cproto and lint don't take \"-isystem\".\ndnl Mac gcc returns \"powerpc-apple-darwin8-gcc-4.0.1 (GCC)...\", need to allow\ndnl the number before the version number.\nDEPEND_CFLAGS_FILTER=\nif test \"$GCC\" = yes; then\n  AC_MSG_CHECKING(for GCC 3 or later)\n  gccmajor=`echo \"$gccversion\" | sed -e 's/^\\([[1-9]]\\)\\..*$/\\1/g'`\n  if test \"$gccmajor\" -gt \"2\"; then\n    DEPEND_CFLAGS_FILTER=\"| sed 's+-I */+-isystem /+g'\"\n    AC_MSG_RESULT(yes)\n  else\n    AC_MSG_RESULT(no)\n  fi\n  dnl -D_FORTIFY_SOURCE=2 crashes Vim on strcpy(buf, \"000\") when buf is\n  dnl declared as char x[1] but actually longer.  Introduced in gcc 4.0.\n  dnl Also remove duplicate _FORTIFY_SOURCE arguments.\n  dnl And undefine it first to avoid a warning.\n  AC_MSG_CHECKING(whether we need -D_FORTIFY_SOURCE=1)\n  if test \"$gccmajor\" -gt \"3\"; then\n    CFLAGS=`echo \"$CFLAGS\" | sed -e 's/ *-Wp,-D_FORTIFY_SOURCE=.//g' -e 's/ *-D_FORTIFY_SOURCE=.//g' -e 's/ *-U_FORTIFY_SOURCE//g' -e 's/$/ -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1/'`\n    AC_MSG_RESULT(yes)\n  else\n    AC_MSG_RESULT(no)\n  fi\nfi\nAC_SUBST(DEPEND_CFLAGS_FILTER)\n\ndnl link.sh tries to avoid overlinking in a hackish way.\ndnl At least GNU ld supports --as-needed which provides the same functionality\ndnl at linker level. Let's use it.\nAC_MSG_CHECKING(linker --as-needed support)\nLINK_AS_NEEDED=\n# Check if linker supports --as-needed and --no-as-needed options\nif $CC -Wl,--help 2>/dev/null | grep as-needed > /dev/null; then\n  LDFLAGS=`echo \"$LDFLAGS\" | sed -e 's/ *-Wl,--as-needed//g' | sed -e 's/$/ -Wl,--as-needed/'`\n  LINK_AS_NEEDED=yes\nfi\nif test \"$LINK_AS_NEEDED\" = yes; then\n  AC_MSG_RESULT(yes)\nelse\n  AC_MSG_RESULT(no)\nfi\nAC_SUBST(LINK_AS_NEEDED)\n\n# IBM z/OS reset CFLAGS for config.mk\nif test \"$zOSUnix\" = \"yes\"; then\n\tCFLAGS=\"-D_ALL_SOURCE -Wc,float\\(ieee\\),dll\"\nfi\n\ndnl write output files\nAC_OUTPUT(auto/config.mk:config.mk.in)\n\ndnl vim: set sw=2 tw=78 fo+=l:\n",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/doc/version8.txt": "*version8.txt*  For Vim version 8.0.  Last change: 2016 Sep 12\n\n\n\t\t  VIM REFERENCE MANUAL    by Bram Moolenaar\n\n\nNOTE: VIM 8 WAS NOT RELEASED YET, this is work in progress\n\n\n\t\t\t\t*vim8* *vim-8* *version-8.0* *version8.0*\nWelcome to Vim 8!  A large number of bugs have been fixed and several nice\nfeatures have been added.  This file mentions all the new items and changes to\nexisting features since Vim 7.4. The patches up to Vim 7.4 can be found here:\n|vim-7.4|.\n\nUse this command to see the full version and features information of the Vim\nprogram you are using: >\n\t:version\n\nNEW FEATURES\t\t\t\t|new-8|\n\tVim script enhancements\t\t|new-vim-script-8|\n\tVarious new items\t\t|new-items-8|\n\nINCOMPATIBLE CHANGES\t\t\t|incompatible-8|\n\nIMPROVEMENTS\t\t\t\t|improvements-8|\n\nCOMPILE TIME CHANGES\t\t\t|compile-changes-8|\n\nPATCHES\t\t\t\t\t|patches-8|\n\n\nSee |vi_diff.txt| for an overview of differences between Vi and Vim 8.0.\nSee |version4.txt|, |version5.txt|, |version6.txt| and |version7.txt| for\ndifferences between other versions.\n\n==============================================================================\nNEW FEATURES\t\t\t\t\t\t*new-8*\n\nFirst a list of the bigger new features.  A comprehensive list is below.\n\n\nAsynchronous I/O support, channels ~\n\nVim can now exchange messages with other processes in the background.  This\nmakes it possible to have servers do work and send back the results to Vim.\nSee |channel-demo| for an example, this shows communicating with a Python\nserver.\n\nClosely related to channels is JSON support.  JSON is widely supported and can\neasily be used for inter-process communication, allowing for writing a server\nin any language.  The functions to use are |json_encode()| and |json_decode()|.\n\nThis makes it possible to build very complex plugins, written in any language\nand running in a separate process.\n\n\nJobs ~\n\nVim can now start a job, communicate with it and stop it.  This is very useful\nto run a process for completion, syntax checking, etc.  Channels are used to\ncommunicate with the job.  Jobs can also read from or write to a buffer or a\nfile.  See |job_start()|.\n\n\nTimers ~\n\nAlso asynchronous are timers.  They can fire once or repeatedly and invoke a\nfunction to do any work.  For example: >\n\tlet tempTimer = timer_start(4000, 'CheckTemp')\nThis will call the CheckTemp() function four seconds (4000 milli seconds)\nlater.  See |timer_start()|.\n\n\nPartials ~\n\nVim already had a Funcref, a reference to a function.  A partial also refers\nto a function, and additionally binds arguments and/or a dictionary.  This is\nespecially useful for callbacks on channels and timers.  E.g., for the timer\nexample above, to pass an argument to the function: >\n\tlet tempTimer = timer_start(4000, function('CheckTemp', ['out']))\nThis will call CheckTemp('out') four seconds later.\n\n\nLambda and Closure ~\n\nA short way to create a function has been added: {args -> expr}.  See |lambda|.\nThis is useful for functions such as `filter()` and `map()`, which now also\naccept a function argument.  Example: >\n\t:call filter(mylist, {idx, val -> val > 20})\n\nA lambda can use variables defined in the scope where the lambda is defined.\nThis is usually called a |closure|.\n\nUser defined functions can also be a closure by adding the \"closure\" argument\n|:func-closure|.\n\n\nPackages ~\n\nPlugins keep growing and more of them are available than ever before.  To keep\nthe collection of plugins manageable package support has been added.  This is\na convenient way to get one or more plugins, drop them in a directory and\npossibly keep them updated.  Vim will load them automatically, or only when\ndesired.  See |packages|.\n\n\nNew style tests ~\n\nThis is for Vim developers.  So far writing tests for Vim has not been easy.\nVim 8 adds assert functions and a framework to run tests.  This makes it a lot\nsimpler to write tests and keep them updated.  Also new are several functions\nthat are added specifically for testing. See |test-functions|.\n\n\nWindow IDs ~\n\nPreviously windows could only be accessed by their number. And every time a\nwindow would open, close or move that number changes.  Each window now has a\nunique ID, so that they are easy to find.  See |win_getid()| and |win_id2win()|.\n\n\nViminfo uses timestamps ~\n\nPreviously the information stored in viminfo was whatever the last Vim wrote\nthere.  Now timestamps are used to always keep the most recent items.\nSee |viminfo-timestamp|.\n\n\nWrapping lines with indent ~\n\nThe 'breakindent' option has been added to be able to wrap lines without\nchanging the amount of indent.\n\n\nWindows: DirectX support ~\n\nThis adds the 'renderoptions' option to allow for switching on DirectX\n(DirectWrite) support on MS-Windows.\n\n\nGTK+ 3 support ~\n\nThe GTK+ 3 GUI works just like GTK+ 2 except for hardly noticeable technical\ndifferences between them.  Configure still chooses GTK+ 2 if both 2 and 3 are\navailable.  See src/Makefile for how to use GTK+ 3 instead.  See\n|gui-x11-compiling| for other details.\n\n\nVim script enhancements\t\t\t\t\t*new-vim-script-8*\n-----------------------\n\nIn Vim script the following types have been added:\n\n\t|Special|\t|v:false|, |v:true|, |v:none| and |v:null|\n\t|Channel|\tconnection to another process for asynchronous I/O\n\t|Job|\t\tprocess control\n\nMany functions and commands have been added to support the new types.\n\nOn some systems the numbers used in Vim script are now 64 bit.  This can be\nchecked with the |+num64| feature.\n\nMany items were added so support |new-style-testing|.\n\nprintf() now accepts any type of argument for %s.  It is converted to a string\nlike with string().\n\n\nVarious new items\t\t\t\t\t*new-items-8*\n-----------------\n\nVisual mode commands: ~\n\n|v_CTRL-A|\tCTRL-A\t\tadd N to number in highlighted text\n|v_CTRL-X|\tCTRL-X\t\tsubtract N from number in highlighted text\n|v_g_CTRL-A|\tg CTRL-A\tadd N to number in highlighted text\n|v_g_CTRL-X|\tg CTRL-X\tsubtract N from number in highlighted text\n\n\nInsert mode commands: ~\n\n|i_CTRL-G_U|\tCTRL-G U\tdon't break undo with next cursor movement\n\n\nOptions: ~\n\n'belloff'\t\tdo not ring the bell for these reasons\n'breakindent'\t\twrapped line repeats indent\n'breakindentopt'\tsettings for 'breakindent'.\n'emoji'\t\t\temoji characters are considered full width\n'fixendofline'\t\tmake sure last line in file has <EOL>\n'langremap'\t\tdo apply 'langmap' to mapped characters\n'luadll'\t\tname of the Lua dynamic library\n'packpath'\t\tlist of directories used for packages\n'perldll'\t\tname of the Perl dynamic library\n'pythondll'\t\tname of the Python 2 dynamic library\n'pythonthreedll'\tname of the Python 3 dynamic library\n'signcolumn'\t\twhen to display the sign column\n'renderoptions'\t\toptions for text rendering on Windows\n'rubydll'\t\tname of the Ruby dynamic library\n'tagcase'\t\thow to handle case when searching in tags files\n'tcldll'\t\tname of the Tcl dynamic library\n'termguicolors'\t\tuse GUI colors for the terminal\n\n\nEx commands: ~\n\n|:cbottom|\t\tscroll to the bottom of the quickfix window\n|:cdo|\t\t\texecute command in each valid error list entry\n|:cfdo|\t\t\texecute command in each file in error list\n|:chistory|\t\tdisplay quickfix list stack\n|:clearjumps|\t\tclear the jump list\n|:filter|\t\tonly output lines that (do not) match a pattern\n|:helpclose|\t\tclose one help window\n|:lbottom|\t\tscroll to the bottom of the location window\n|:ldo|\t\t\texecute command in valid location list entries\n|:lfdo|\t\t\texecute command in each file in location list\n|:lhistory|\t\tdisplay location list stack\n|:noswapfile|\t\tfollowing commands don't create a swap file\n|:packadd|\t\tadd a plugin from 'packpath'\n|:packloadall|\t\tload all packages under 'packpath'\n|:smile|\t\tmake the user happy\n\n\nEx command modifiers: ~\n\n|:keeppatterns|\t\tfollowing command keeps search pattern history\n\n\nNew and extended functions: ~\n\n|arglistid()|\t\tget id of the argument list\n|assert_equal()|\tassert that two expressions values are equal\n|assert_exception()|\tassert that a command throws an exception\n|assert_fails()|\tassert that a function call fails\n|assert_false()|\tassert that an expression is false\n|assert_inrange()|\tassert that an expression is inside a range\n|assert_match()|\tassert that a pattern matches the value\n|assert_notequal()|\tassert that two expressions values are not equal\n|assert_notmatch()|\tassert that a pattern does not match the value\n|assert_true()|\t\tassert that an expression is true\n|bufwinid()|\t\tget the window ID of a specific buffer\n|byteidxcomp()|\t\tlike byteidx() but count composing characters\n|ch_close()|\t\tclose a channel\n|ch_close_in()|\t\tclose the in part of a channel\n|ch_evalexpr()|\t\tevaluates an expression over channel\n|ch_evalraw()|\t\tevaluates a raw string over channel\n|ch_getbufnr()|\t\tget the buffer number of a channel\n|ch_getjob()|\t\tget the job associated with a channel\n|ch_info()|\t\tget channel information\n|ch_log()|\t\twrite a message in the channel log file\n|ch_logfile()|\t\tset the channel log file\n|ch_open()|\t\topen a channel\n|ch_read()|\t\tread a message from a channel\n|ch_readraw()|\t\tread a raw message from a channel\n|ch_sendexpr()|\t\tsend a JSON message over a channel\n|ch_sendraw()|\t\tsend a raw message over a channel\n|ch_setoptions()|\tset the options for a channel\n|ch_status()|\t\tget status of a channel\n|execute()|\t\texecute an Ex command and get the output\n|exepath()|\t\tfull path of an executable program\n|funcref()|\t\treturn a reference to function {name}\n|getbufinfo()|\t\tget a list with buffer information\n|getcharsearch()|\treturn character search information\n|getcmdwintype()|\treturn the current command-line window type\n|getcompletion()|\treturn a list of command-line completion matches\n|getcurpos()|\t\tget position of the cursor\n|gettabinfo()|\t\tget a list with tab page information\n|getwininfo()|\t\tget a list with window information\n|glob2regpat()|\t\tconvert a glob pattern into a search pattern\n|isnan()|\t\tcheck for not a number\n|job_getchannel()|\tget the channel used by a job\n|job_info()|\t\tget information about a job\n|job_setoptions()|\tset options for a job\n|job_start()|\t\tstart a job\n|job_status()|\t\tget the status of a job\n|job_stop()|\t\tstop a job\n|js_decode()|\t\tdecode a JSON string to Vim types\n|js_encode()|\t\tencode an expression to a JSON string\n|json_decode()|\t\tdecode a JSON string to Vim types\n|json_encode()|\t\tencode an expression to a JSON string\n|matchaddpos()|\t\tdefine a list of positions to highlight\n|matchstrpos()|\t\tmatch and positions of a pattern in a string\n|perleval()|\t\tevaluate Perl expression\n|reltimefloat()|\tconvert reltime() result to a Float\n|setcharsearch()|\tset character search information\n|setfperm()|\t\tset the permissions of a file\n|strcharpart()|\t\tget part of a string using char index\n|strgetchar()|\t\tget character from a string using char index\n|systemlist()|\t\tget the result of a shell command as a list\n|test_alloc_fail()|\tmake memory allocation fail\n|test_autochdir()|\ttest 'autochdir' functionality\n|test_disable_char_avail()| test without typeahead\n|test_garbagecollect_now()| free memory right now\n|test_null_channel()|\treturn a null Channel\n|test_null_dict()|\treturn a null Dict\n|test_null_job()|\treturn a null Job\n|test_null_list()|\treturn a null List\n|test_null_partial()|\treturn a null Partial function\n|test_null_string()|\treturn a null String\n|test_settime()|\tset the time Vim uses internally\n|timer_info()|\t\tget information about timers\n|timer_pause()|\t\tpause or unpause a timer\n|timer_start()|\t\tcreate a timer\n|timer_stop()|\t\tstop a timer\n|timer_stopall()|\tstop all timers\n|uniq()|\t\tremove copies of repeated adjacent items\n|win_findbuf()|\t\tfind windows containing a buffer\n|win_getid()|\t\tget window ID of a window\n|win_gotoid()|\t\tgo to window with ID\n|win_id2tabwin()|\tget tab and window nr from window ID\n|win_id2win()|\t\tget window nr from window ID\n|wordcount()|\t\tget byte/word/char count of buffer\n\n\nNew Vim variables: ~\n\n|v:beval_winid|\t\tWindow ID of the window where the mouse pointer is\n|v:completed_item|\tcomplete items for the most recently completed word\n|v:errors|\t\terrors found by assert functions\n|v:false|\t\ta Number with value zero\n|v:hlsearch|\t\tindicates whether search highlighting is on\n|v:mouse_winid|\t\tWindow ID for a mouse click obtained with |getchar()|\n|v:none|\t\tan empty String, used for JSON\n|v:null|\t\tan empty String, used for JSON\n|v:option_new|    \tnew value of the option, used by |OptionSet|\n|v:option_old|    \told value of the option, used by |OptionSet|\n|v:option_type|   \tscope of the set command, used by |OptionSet|\n|v:progpath|\t\tthe command with which Vim was invoked\n|v:t_bool|\t\tvalue of Boolean type\n|v:t_channel|\t\tvalue of Channel type\n|v:t_dict|\t\tvalue of Dictionary type\n|v:t_float|\t\tvalue of Float type\n|v:t_func|\t\tvalue of Funcref type\n|v:t_job|\t\tvalue of Job type\n|v:t_list|\t\tvalue of List type\n|v:t_none|\t\tvalue of None type\n|v:t_number|\t\tvalue of Number type\n|v:t_string|\t\tvalue of String type\n|v:testing|\t\tmust be set before using `test_garbagecollect_now()`\n|v:true|\t\ta Number with value one\n|v:vim_did_enter|\tset just before VimEnter autocommands are triggered\n\n\nNew autocommand events: ~\n\n|CmdUndefined|\t\ta user command is used but it isn't defined\n|OptionSet|\t\tafter setting any option\n|TabClosed|\t\tafter closing a tab page\n|TabNew|\t\tafter creating a new tab page\n|TextChangedI|\t\tafter a change was made to the text in Insert mode\n|TextChanged|\t\tafter a change was made to the text in Normal mode\n|WinNew|\t\tafter creating a new window\n\n\nNew highlight groups: ~\n\nEndOfBuffer\t\tfiller lines (~) after the last line in the buffer.\n\t\t\t|hl-EndOfBuffer|\n\n\nNew items in search patterns: ~\n\n|/\\%C|\t\\%C\t\tmatch any composing characters\n\n\nNew Syntax/Indent/FTplugin files: ~\n\nAVR Assembler (Avra) syntax\nArduino syntax\nBazel syntax and indent and ftplugin\nDockerfile syntax and ftplugin\nEiffel ftplugin\nEuphoria 3 and 4 syntax\nGo syntax and indent and ftplugin\nGodoc syntax\nGroovy ftplugin\nHGcommit ftplugin\nHog indent and ftplugin\nInnovation Data Processing upstream.pt syntax\nJ syntax and indent and ftplugin\nJproperties ftplugin\nJson syntax and indent and ftplugin\nKivy syntax\nLess syntax and indent\nMix syntax\nMotorola S-Record syntax\nR ftplugin\nReStructuredText syntax and indent and ftplugin\nRegistry ftplugin\nRhelp indent and ftplugin\nRmd (markdown with R code chunks) syntax and indent\nRmd ftplugin\nRnoweb ftplugin\nRnoweb indent\nScala syntax and indent and ftplugin\nSystemVerilog syntax and indent and ftplugin\nSystemd syntax and indent and ftplugin\nTeraterm (TTL) syntax and indent\nText ftplugin\nVroom syntax and indent and ftplugin\n\n\nNew Keymaps: ~\n\nArmenian eastern and western\nRussian jcukenwintype\nVietnamese telex and vni\n\n==============================================================================\nINCOMPATIBLE CHANGES\t\t\t\t*incompatible-8*\n\nThese changes are incompatible with previous releases.  Check this list if you\nrun into a problem when upgrading from Vim 7.4 to 8.0.\n\n\nBetter defaults without a vimrc ~\n\nWhen no vimrc file is found, the |defaults.vim| script is loaded to set more\nuseful default values for new users.  That includes setting 'nocompatible'.\nThus Vim no longer starts up in Vi compatible mode.  If you do want that,\neither create a .vimrc file that does \"set compatible\" or start Vim with\n\"Vim -C\".\n\n\nSupport removed ~\n\nThe support for MS-DOS has been removed.  It hasn't been working for a while\n(Vim doesn't fit in memory) and removing it cleans up the code quite a bit.\n\nThe support for Windows 16 bit (Windows 95 and older) has been removed.\n\nThe support for OS/2 has been removed.  It probably hasn't been working for a\nwhile since nobody uses it.\n\nThe SNiFF+ support has been removed.\n\n\nMinor incompatibilities: ~\n\nProbably...\n\n==============================================================================\nIMPROVEMENTS\t\t\t\t\t\t*improvements-8*\n\nThe existing blowfish encryption turned out to be much weaker than it was\nsupposed to be.  The blowfish2 method has been added to fix that.  Note that\nthis still isn't a state-of-the-art encryption, but good enough for most\nusage.  See 'cryptmethod'.\n\n\n==============================================================================\nCOMPILE TIME CHANGES\t\t\t\t\t*compile-changes-8*\n\nThe Vim repository was moved from Google code to github, since Google code\nwas shut down.  It can now be found at https://github.com/vim/vim.\n\nFunctions now use ANSI-C declarations.  At least a C-89 compatible compiler is\nrequired.\n\nThe +visual feature is now always included.\n\n==============================================================================\nPATCHES\t\t\t\t\t\t*patches-8* *bug-fixes-8*\n\nThe list of patches that got included since 7.4.0.  This includes all the new\nfeatures, but does not include runtime file changes (syntax, indent, help,\netc.)\n\nPatch 7.4.001\nProblem:    Character classes such as [a-z] do not react to 'ignorecase'.\n\t    Breaks man page highlighting. (Mario Grgic)\nSolution:   Add separate items for classes that react to 'ignorecase'.  Clean\n\t    up logic handling character classes.  Add more tests.\nFiles:\t    src/regexp_nfa.c, src/testdir/test64.in, src/testdir/test64.ok\n\nPatch 7.4.002\nProblem:    Pattern with two alternative look-behind matches does not match.\n\t    (Amadeus Demarzi)\nSolution:   When comparing PIMs also compare their state ID to see if they are\n\t    different.\nFiles:\t    src/regexp_nfa.c, src/testdir/test64.in, src/testdir/test64.ok\n\nPatch 7.4.003\nProblem:    Memory access error in Ruby syntax highlighting. (Christopher Chow)\nSolution:   Refresh stale pointer. (James McCoy)\nFiles:\t    src/regexp_nfa.c\n\nPatch 7.4.004\nProblem:    When closing a window fails \":bwipe\" may hang.\nSolution:   Let win_close() return FAIL and break out of the loop.\nFiles:\t    src/window.c, src/proto/window.pro, src/buffer.c\n\nPatch 7.4.005\nProblem:    Using \"vaB\" while 'virtualedit' is set selects the wrong area.\n\t    (Dimitar Dimitrov)\nSolution:   Reset coladd when finding a match.\nFiles:\t    src/search.c\n\nPatch 7.4.006\nProblem:    mkdir(\"foo/bar/\", \"p\") gives an error message. (David Barnett)\nSolution:   Remove the trailing slash. (lcd)\nFiles:\t    src/eval.c\n\nPatch 7.4.007\nProblem:    Creating a preview window on startup leaves the screen layout in a\n\t    messed up state. (Marius Gedminas)\nSolution:   Don't change firstwin. (Christian Brabandt)\nFiles:\t    src/main.c\n\nPatch 7.4.008\nProblem:    New regexp engine can't be interrupted.\nSolution:   Check for CTRL-C pressed. (Yasuhiro Matsumoto)\nFiles:\t    src/regexp_nfa.c, src/regexp.c\n\nPatch 7.4.009\nProblem:    When a file was not decrypted (yet), writing it may destroy the\n\t    contents.\nSolution:   Mark the file as readonly until decryption was done. (Christian\n\t    Brabandt)\nFiles:\t    src/fileio.c\n\nPatch 7.4.010 (after 7.4.006)\nProblem:    Crash with invalid argument to mkdir().\nSolution:   Check for empty string. (lcd47)\nFiles:\t    src/eval.c\n\nPatch 7.4.011\nProblem:    Cannot find out if \"acl\" and \"xpm\" features are supported.\nSolution:   Add \"acl\" and \"xpm\" to the list of features. (Ken Takata)\nFiles:\t    src/eval.c, src/version.c\n\nPatch 7.4.012\nProblem:    MS-Windows: resolving shortcut does not work properly with\n\t    multi-byte characters.\nSolution:   Use wide system functions. (Ken Takata)\nFiles:\t    src/os_mswin.c\n\nPatch 7.4.013\nProblem:    MS-Windows: File name buffer too small for utf-8.\nSolution:   Use character count instead of byte count. (Ken Takata)\nFiles:\t    src/os_mswin.c\n\nPatch 7.4.014\nProblem:    MS-Windows: check for writing to device does not work.\nSolution:   Fix #ifdefs. (Ken Takata)\nFiles:\t    src/fileio.c\n\nPatch 7.4.015\nProblem:    MS-Windows: Detecting node type does not work for multi-byte\n\t    characters.\nSolution:   Use wide character function when needed. (Ken Takata)\nFiles:\t    src/os_win32.c\n\nPatch 7.4.016\nProblem:    MS-Windows: File name case can be wrong.\nSolution:   Add fname_casew(). (Ken Takata)\nFiles:\t    src/os_win32.c\n\nPatch 7.4.017\nProblem:    \":help !!\" does not find the \"!!\" tag in the help file. (Ben\n\t    Fritz)\nSolution:   When reading the start of the tags file do parse lines that are\n\t    not header lines.\nFiles:\t    src/tag.c\n\nPatch 7.4.018\nProblem:    When completing item becomes unselected. (Shougo Matsu)\nSolution:   Revert patch 7.3.1269.\nFiles:\t    src/edit.c\n\nPatch 7.4.019\nProblem:    MS-Windows: File name completion doesn't work properly with\n\t    Chinese characters. (Yue Wu)\nSolution:   Take care of multi-byte characters when looking for the start of\n\t    the file name. (Ken Takata)\nFiles:\t    src/edit.c\n\nPatch 7.4.020\nProblem:    NFA engine matches too much with \\@>. (John McGowan)\nSolution:   When a whole pattern match is found stop searching.\nFiles:\t    src/regexp_nfa.c, src/testdir/test64.in, src/testdir/test64.ok\n\nPatch 7.4.021\nProblem:    NFA regexp: Using \\ze in one branch which doesn't match may cause\n\t    end of another branch to be wrong. (William Fugh)\nSolution:   Set end position if it wasn't set yet.\nFiles:\t    src/regexp_nfa.c, src/testdir/test64.in, src/testdir/test64.ok\n\nPatch 7.4.022\nProblem:    Deadlock while exiting, because of allocating memory.\nSolution:   Do not use gettext() in deathtrap(). (James McCoy)\nFiles:\t    src/os_unix.c, src/misc1.c\n\nPatch 7.4.023\nProblem:    Compiler warning on 64 bit windows.\nSolution:   Add type cast. (Mike Williams)\nFiles:\t    src/edit.c\n\nPatch 7.4.024\nProblem:    When root edits a file the undo file is owned by root while the\n\t    edited file may be owned by another user, which is not allowed.\n\t    (cac2s)\nSolution:   Accept an undo file owned by the current user.\nFiles:\t    src/undo.c\n\nPatch 7.4.025 (after 7.4.019)\nProblem:    Reading before start of a string.\nSolution:   Do not call mb_ptr_back() at start of a string. (Dominique Pelle)\nFiles:\t    src/edit.c\n\nPatch 7.4.026\nProblem:    Clang warning for int shift overflow.\nSolution:   Use unsigned and cast back to int. (Dominique Pelle)\nFiles:\t    src/misc2.c\n\nPatch 7.4.027 (after 7.4.025)\nProblem:    Another valgrind error when using CTRL-X CTRL-F at the start of\n\t    the line. (Dominique Pelle)\nSolution:   Don't call mb_ptr_back() at the start of the line.  Add a test.\nFiles:\t    src/edit.c, src/testdir/test32.in\n\nPatch 7.4.028\nProblem:    Equivalence classes are not working for multi-byte characters.\nSolution:   Copy the rules from the old to the new regexp engine. Add a test\n\t    to check both engines.\nFiles:\t    src/regexp_nfa.c, src/testdir/test44.in, src/testdir/test99.in,\n\t    src/testdir/test99.ok, src/testdir/Make_amiga.mak,\n\t    src/testdir/Make_dos.mak, src/testdir/Make_ming.mak,\n\t    src/testdir/Make_os2.mak, src/testdir/Make_vms.mms,\n\t    src/testdir/Makefile\n\nPatch 7.4.029\nProblem:    An error in a pattern is reported twice.\nSolution:   Remove the retry with the backtracking engine, it won't work.\nFiles:\t    src/regexp.c\n\nPatch 7.4.030\nProblem:    The -mno-cygwin argument is no longer supported by Cygwin.\nSolution:   Remove the arguments. (Steve Hall)\nFiles:\t    src/GvimExt/Make_cyg.mak, src/Make_cyg.mak, src/xxd/Make_cyg.mak\n\nPatch 7.4.031\nProblem:    \":diffoff!\" resets options even when 'diff' is not set. (Charles\n\t    Cooper)\nSolution:   Only resets related options in a window where 'diff' is set.\nFiles:\t    src/diff.c\n\nPatch 7.4.032\nProblem:    NFA engine does not match the NUL character. (Jonathon Merz)\nSolution:   Use 0x0a instead of NUL. (Christian Brabandt)\nFiles:\t    src/regexp_nfa.c, src/testdir/test64.in, src/testdir/test64.ok\n\nPatch 7.4.033\nProblem:    When the terminal has only 20 lines test 92 and 93 overwrite the\n\t    input file.\nSolution:   Explicitly write test.out. Check that the terminal is large enough\n\t    to run the tests.  (Hirohito Higashi)\nFiles:\t    src/testdir/test92.in, src/testdir/test93.in,\n\t    src/testdir/test1.in, src/testdir/Makefile\n\nPatch 7.4.034\nProblem:    Using \"p\" in Visual block mode only changes the first line.\nSolution:   Repeat the put in all text in the block. (Christian Brabandt)\nFiles:\t    runtime/doc/change.txt, src/ops.c, src/normal.c,\n\t    src/testdir/test20.in, src/testdir/test20.ok\n\nPatch 7.4.035\nProblem:    MS-Windows: The mouse pointer flickers when going from command\n\t    line mode to Normal mode.\nSolution:   Check for WM_NCMOUSEMOVE. (Ken Takata)\nFiles:\t    src/gui_w48.c\n\nPatch 7.4.036\nProblem:    NFA engine does not capture group correctly when using \\@>. (ZyX)\nSolution:   Copy submatches before doing the recursive match.\nFiles:\t    src/regexp_nfa.c, src/testdir/test64.in, src/testdir/test64.ok\n\nPatch 7.4.037\nProblem:    Using \"\\ze\" in a sub-pattern does not result in the end of the\n\t    match to be set. (Axel Bender)\nSolution:   Copy the end of match position when a recursive match was\n\t    successful.\nFiles:\t    src/regexp_nfa.c, src/testdir/test64.in, src/testdir/test64.ok\n\nPatch 7.4.038\nProblem:    Using \"zw\" and \"zg\" when 'spell' is off give a confusing error\n\t    message. (Gary Johnson)\nSolution:   Ignore the error when locating the word.  Explicitly mention what\n\t    word was added. (Christian Brabandt)\nFiles:\t    src/normal.c, src/spell.c\n\nPatch 7.4.039\nProblem:    MS-Windows: MSVC10 and earlier can't handle symlinks to a\n\t    directory properly.\nSolution:   Add stat_symlink_aware() and wstat_symlink_aware(). (Ken Takata)\nFiles:\t    src/os_mswin.c, src/os_win32.c, src/os_win32.h\n\nPatch 7.4.040\nProblem:    Valgrind error on exit when a script-local variable holds a\n\t    reference to the scope of another script.\nSolution:   First clear all variables, then free the scopes. (ZyX)\nFiles:\t    src/eval.c\n\nPatch 7.4.041 (after 7.4.034)\nProblem:    Visual selection does not remain after being copied over. (Axel\n\t    Bender)\nSolution:   Move when VIsual_active is reset. (Christian Brabandt)\nFiles:\t    src/ops.c\n\nPatch 7.4.042\nProblem:    When using \":setlocal\" for 'spell' and 'spelllang' then :spelldump\n\t    doesn't work. (Dimitar Dimitrov)\nSolution:   Copy the option variables to the new window used to show the dump.\n\t    (Christian Brabandt)\nFiles:\t    src/spell.c\n\nPatch 7.4.043\nProblem:    VMS can't handle long function names.\nSolution:   Shorten may_req_ambiguous_character_width. (Samuel Ferencik)\nFiles:\t    src/main.c, src/term.c, src/proto/term.pro\n\n\nPatch 7.4.044 (after 7.4.039)\nProblem:    Can't build with old MSVC. (Wang Shoulin)\nSolution:   Define OPEN_OH_ARGTYPE instead of using intptr_t directly.\nFiles:\t    src/os_mswin.c\n\nPatch 7.4.045\nProblem:    substitute() does not work properly when the pattern starts with\n\t    \"\\ze\".\nSolution:   Detect an empty match. (Christian Brabandt)\nFiles:\t    src/eval.c, src/testdir/test80.in, src/testdir/test80.ok\n\nPatch 7.4.046\nProblem:    Can't use Tcl 8.6.\nSolution:   Change how Tcl_FindExecutable is called. (Jan Nijtmans)\nFiles:\t    src/if_tcl.c\n\nPatch 7.4.047\nProblem:    When using input() in a function invoked by a mapping it doesn't\n\t    work.\nSolution:   Temporarily reset ex_normal_busy. (Yasuhiro Matsumoto)\nFiles:\t    src/eval.c\n\nPatch 7.4.048\nProblem:    Recent clang version complains about -fno-strength-reduce.\nSolution:   Add a configure check for the clang version. (Kazunobu Kuriyama)\nFiles:\t    src/configure.in, src/auto/configure\n\nPatch 7.4.049\nProblem:    In Ex mode, when line numbers are enabled the substitute prompt is\n\t    wrong.\nSolution:   Adjust for the line number size. (Benoit Pierre)\nFiles:\t    src/ex_cmds.c\n\nPatch 7.4.050\nProblem:    \"gn\" selects too much for the pattern \"\\d\" when there are two\n\t    lines with a single digit. (Ryan Carney)\nSolution:   Adjust the logic of is_one_char(). (Christian Brabandt)\nFiles:\t    src/search.c, src/testdir/test53.in, src/testdir/test53.ok\n\nPatch 7.4.051\nProblem:    Syntax highlighting a Yaml file causes a crash. (Blake Preston)\nSolution:   Copy the pim structure before calling addstate() to avoid it\n\t    becoming invalid when the state list is reallocated.\nFiles:\t    src/regexp_nfa.c\n\nPatch 7.4.052\nProblem:    With 'fo' set to \"a2\" inserting a space in the first column may\n\t    cause the cursor to jump to the previous line.\nSolution:   Handle the case when there is no comment leader properly. (Tor\n\t    Perkins)  Also fix that cursor is in the wrong place when spaces\n\t    get replaced with a Tab.\nFiles:\t    src/misc1.c, src/ops.c, src/testdir/test68.in,\n\t    src/testdir/test68.ok\n\nPatch 7.4.053\nProblem:    Test75 has a wrong header. (ZyX)\nSolution:   Fix the text and remove leading \".\nFiles:\t    src/testdir/test75.in\n\nPatch 7.4.054\nProblem:    Reading past end of the 'stl' string.\nSolution:   Don't increment pointer when already at the NUL. (Christian\n\t    Brabandt)\nFiles:\t    src/buffer.c\n\nPatch 7.4.055\nProblem:    Mac: Where availability macros are defined depends on the system.\nSolution:   Add a configure check. (Felix B\u00fcnemann)\nFiles:\t    src/config.h.in, src/configure.in, src/auto/configure,\n\t    src/os_mac.h\n\nPatch 7.4.056\nProblem:    Mac: Compilation problem with OS X 10.9 Mavericks.\nSolution:   Include AvailabilityMacros.h when available. (Kazunobu Kuriyama)\nFiles:\t    src/os_unix.c\n\nPatch 7.4.057\nProblem:    byteidx() does not work for composing characters.\nSolution:   Add byteidxcomp().\nFiles:\t    src/eval.c, src/testdir/test69.in, src/testdir/test69.ok,\n\t    runtime/doc/eval.txt\n\nPatch 7.4.058\nProblem:    Warnings on 64 bit Windows.\nSolution:   Add type casts. (Mike Williams)\nFiles:\t    src/ops.c\n\nPatch 7.4.059\nProblem:    set_last_cursor() may encounter w_buffer being NULL.  (Matt\n\t    Mkaniaris)\nSolution:   Check for NULL.\nFiles:\t    src/mark.c\n\nPatch 7.4.060\nProblem:    Declaration has wrong return type for PyObject_SetAttrString().\nSolution:   Use int instead of PyObject. (Andreas Schwab)\nFiles:\t    src/if_python.c, src/if_python3.c\n\nPatch 7.4.061 (after 7.4.055 and 7.4.056)\nProblem:    Availability macros configure check in wrong place.\nSolution:   Also check when not using Darwin. Remove version check.\nFiles:\t    src/configure.in, src/auto/configure, src/os_unix.c\n\nPatch 7.4.062 (after 7.4.061)\nProblem:    Configure check for AvailabilityMacros.h is wrong.\nSolution:   Use AC_CHECK_HEADERS().\nFiles:\t    src/configure.in, src/auto/configure\n\nPatch 7.4.063\nProblem:    Crash when using invalid key in Python dictionary.\nSolution:   Check for object to be NULL.  Add tests. (ZyX)\nFiles:\t    src/if_py_both.h, src/testdir/test86.in, src/testdir/test86.ok,\n\t    src/testdir/test87.in, src/testdir/test87.ok\n\nPatch 7.4.064\nProblem:    When replacing a character in Visual block mode, entering a CR\n\t    does not cause a repeated line break.\nSolution:   Recognize the situation and repeat the line break. (Christian\n\t    Brabandt)\nFiles:\t    src/normal.c, src/ops.c, src/testdir/test39.in,\n\t    src/testdir/test39.ok\n\nPatch 7.4.065\nProblem:    When recording, the character typed at the hit-enter prompt is\n\t    recorded twice. (Urtica Dioica)\nSolution:   Avoid recording the character twice. (Christian Brabandt)\nFiles:\t    src/message.c\n\nPatch 7.4.066\nProblem:    MS-Windows: When there is a colon in the file name (sub-stream\n\t    feature) the swap file name is wrong.\nSolution:   Change the colon to \"%\". (Yasuhiro Matsumoto)\nFiles:\t    src/fileio.c, src/memline.c, src/misc1.c, src/proto/misc1.pro\n\nPatch 7.4.067\nProblem:    After inserting comment leader, CTRL-\\ CTRL-O does move the\n\t    cursor. (Wiktor Ruben)\nSolution:   Avoid moving the cursor. (Christian Brabandt)\nFiles:\t    src/edit.c\n\nPatch 7.4.068\nProblem:    Cannot build Vim on Mac with non-Apple compilers.\nSolution:   Remove the -no-cpp-precomp flag. (Misty De Meo)\nFiles:\t    src/configure.in, src/auto/configure, src/osdef.sh\n\nPatch 7.4.069\nProblem:    Cannot right shift lines starting with #.\nSolution:   Allow the right shift when 'cino' contains #N with N > 0.\n\t    (Christian Brabandt)\n\t    Refactor parsing 'cino', store the values in the buffer.\nFiles:\t    runtime/doc/indent.txt, src/buffer.c, src/edit.c, src/eval.c,\n\t    src/ex_getln.c, src/fold.c, src/misc1.c, src/ops.c,\n\t    src/proto/misc1.pro, src/proto/option.pro, src/structs.h,\n\t    src/option.c\n\nPatch 7.4.070 (after 7.4.069)\nProblem:    Can't compile with tiny features. (Tony Mechelynck)\nSolution:   Add #ifdef.\nFiles:\t    src/buffer.c\n\nPatch 7.4.071 (after 7.4.069)\nProblem:    Passing limits around too often.\nSolution:   Use limits from buffer.\nFiles:\t    src/edit.c, src/misc1.c, src/proto/misc1.pro\n\nPatch 7.4.072\nProblem:    Crash when using Insert mode completion.\nSolution:   Avoid going past the end of pum_array. (idea by Francisco Lopes)\nFiles:\t    src/popupmnu.c\n\nPatch 7.4.073\nProblem:    Setting undolevels for one buffer changes undo in another.\nSolution:   Make 'undolevels' a global-local option. (Christian Brabandt)\nFiles:\t    runtime/doc/options.txt, src/buffer.c, src/option.c, src/option.h\n\t    src/structs.h, src/undo.c\n\nPatch 7.4.074\nProblem:    When undo'ing all changes and creating a new change the undo\n\t    structure is incorrect. (Christian Brabandt)\nSolution:   When deleting the branch starting at the old header, delete the\n\t    whole branch, not just the first entry.\nFiles:\t    src/undo.c\n\nPatch 7.4.075\nProblem:    Locally setting 'undolevels' is not tested.\nSolution:   Add a test. (Christian Brabandt)\nFiles:\t    src/testdir/test100.in, src/testdir/test100.ok,\n\t    src/testdir/Make_amiga.mak, src/testdir/Make_dos.mak,\n\t    src/testdir/Make_ming.mak, src/testdir/Make_os2.mak,\n\t    src/testdir/Make_vms.mms, src/testdir/Makefile, src/Makefile\n\nPatch 7.4.076\nProblem:    \"cgn\" does not wrap around the end of the file. (Dimitar Dimitrov)\nSolution:   Restore 'wrapscan' earlier. (Christian Brabandt)\nFiles:\t    src/search.c\n\nPatch 7.4.077\nProblem:    DOS installer creates shortcut without a path, resulting in the\n\t    current directory to be C:\\Windows\\system32.\nSolution:   Use environment variables.\nFiles:\t    src/dosinst.c\n\nPatch 7.4.078\nProblem:    MSVC 2013 is not supported.\nSolution:   Recognize and support MSVC 2013. (Ed Brown)\nFiles:\t    src/Make_mvc.mak\n\nPatch 7.4.079\nProblem:    A script cannot detect whether 'hlsearch' highlighting is actually\n\t    displayed.\nSolution:   Add the \"v:hlsearch\" variable. (ZyX)\nFiles:\t    src/eval.c, src/ex_docmd.c,\n\t    src/option.c, src/screen.c, src/search.c, src/tag.c, src/vim.h,\n\t    src/testdir/test101.in, src/testdir/test101.ok, \n\t    src/testdir/Make_amiga.mak, src/testdir/Make_dos.mak,\n\t    src/testdir/Make_ming.mak, src/testdir/Make_os2.mak,\n\t    src/testdir/Make_vms.mms, src/testdir/Makefile\n\nPatch 7.4.080 (after 7.4.079)\nProblem:    Missing documentation for v:hlsearch.\nSolution:   Include the right file in the patch.\nFiles:\t    runtime/doc/eval.txt\n\nPatch 7.4.081 (after 7.4.078)\nProblem:    Wrong logic when ANALYZE is \"yes\".\nSolution:   Use or instead of and. (KF Leong)\nFiles:\t    src/Make_mvc.mak\n\nPatch 7.4.082\nProblem:    Using \"gf\" in a changed buffer suggests adding \"!\", which is not\n\t    possible. (Tim Chase)\nSolution:   Pass a flag to check_changed() whether adding ! make sense.\nFiles:\t    src/vim.h, src/ex_cmds2.c, src/proto/ex_cmds2.pro, src/globals.h,\n\t    src/ex_cmds.c, src/ex_docmd.c\n\nPatch 7.4.083\nProblem:    It's hard to avoid adding a used pattern to the search history.\nSolution:   Add the \":keeppatterns\" modifier. (Christian Brabandt)\nFiles:\t    runtime/doc/cmdline.txt, src/ex_cmds.h, src/ex_docmd.c,\n\t    src/ex_getln.c, src/structs.h\n\nPatch 7.4.084\nProblem:    Python: interrupt not being properly discarded. (Yggdroot Chen)\nSolution:   Discard interrupt in VimTryEnd. (ZyX)\nFiles:\t    src/if_py_both.h, src/testdir/test86.in, src/testdir/test86.ok,\n\t    src/testdir/test87.in, src/testdir/test87.ok\n\nPatch 7.4.085\nProblem:    When inserting text in Visual block mode and moving the cursor the\n\t    wrong text gets repeated in other lines.\nSolution:   Use the '[ mark to find the start of the actually inserted text.\n\t    (Christian Brabandt)\nFiles:\t    src/ops.c, src/testdir/test39.in, src/testdir/test39.ok\n\nPatch 7.4.086\nProblem:    Skipping over an expression when not evaluating it does not work\n\t    properly for dict members.\nSolution:   Skip over unrecognized expression. (ZyX)\nFiles:\t    src/eval.c, src/testdir/test34.in, src/testdir/test34.ok\n\nPatch 7.4.087\nProblem:    Compiler warning on 64 bit Windows systems.\nSolution:   Fix type cast. (Mike Williams)\nFiles:\t    src/ops.c\n\nPatch 7.4.088\nProblem:    When spell checking is enabled Asian characters are always marked\n\t    as error.\nSolution:   When 'spelllang' contains \"cjk\" do not mark Asian characters as\n\t    error. (Ken Takata)\nFiles:\t    runtime/doc/options.txt, runtime/doc/spell.txt, src/mbyte.c,\n\t    src/option.c, src/spell.c, src/structs.h\n\nPatch 7.4.089\nProblem:    When editing a file in a directory mounted through sshfs Vim\n\t    doesn't set the security context on a renamed file.\nSolution:   Add mch_copy_sec() to vim_rename(). (Peter Backes)\nFiles:\t    src/fileio.c\n\nPatch 7.4.090\nProblem:    Win32: When a directory name contains an exclamation mark,\n\t    completion doesn't complete the contents of the directory.\nSolution:   Escape the exclamation mark. (Jan Stocker)\nFiles:\t    src/ex_getln.c, src/testdir/test102.in, src/testdir/test102.ok,\n\t    src/testdir/Make_amiga.mak, src/testdir/Make_dos.mak,\n\t    src/testdir/Make_ming.mak, src/testdir/Make_os2.mak,\n\t    src/testdir/Make_vms.mms, src/testdir/Makefile\n\nPatch 7.4.091 (after 7.4.089)\nProblem:    Missing semicolon.\nSolution:   Add the semicolon.\nFiles:\t    src/fileio.c\n\nPatch 7.4.092 (after 7.4.088)\nProblem:    Can't build small version.\nSolution:   Add #ifdef where the b_cjk flag is used. (Ken Takata)\nFiles:\t    src/spell.c\n\nPatch 7.4.093\nProblem:    Configure can't use LuaJIT on ubuntu 12.04.\nSolution:   Adjust the configure regexp that locates the version number.\n\t    (Charles Strahan)\nFiles:\t    src/configure.in, src/auto/configure\n\nPatch 7.4.094\nProblem:    Configure may not find that -lint is needed for gettext().\nSolution:   Check for gettext() with empty $LIBS.  (Thomas De Schampheleire)\nFiles:\t    src/configure.in, src/auto/configure\n\nPatch 7.4.095 (after 7.4.093)\nProblem:    Regexp for LuaJIT version doesn't work on BSD.\nSolution:   Use \"*\" instead of \"\\+\" and \"\\?\". (Ozaki)\nFiles:\t    src/configure.in, src/auto/configure\n\nPatch 7.4.096\nProblem:    Can't change directory to an UNC path.\nSolution:   Use win32_getattrs() in mch_getperm(). (Christian Brabandt)\nFiles:\t    src/os_win32.c\n\nPatch 7.4.097 (after 7.4.034)\nProblem:    Unexpected behavior change related to 'virtualedit'. (Ingo Karkat)\nSolution:   Update the valid cursor position. (Christian Brabandt)\nFiles:\t    src/ops.c\n\nPatch 7.4.098\nProblem:    When using \":'<,'>del\" errors may be given for the visual line\n\t    numbers being out of range.\nSolution:   Reset Visual mode in \":del\". (Lech Lorens)\nFiles:\t    src/ex_docmd.c, src/testdir/test103.in, src/testdir/test103.ok,\n\t    src/testdir/Make_amiga.mak, src/testdir/Make_dos.mak,\n\t    src/testdir/Make_ming.mak, src/testdir/Make_os2.mak,\n\t    src/testdir/Make_vms.mms, src/testdir/Makefile\n\nPatch 7.4.099\nProblem:    Append in blockwise Visual mode with \"$\" is wrong.\nSolution:   After \"$\" don't use the code that checks if the cursor was moved.\n\t    (Hirohito Higashi, Ken Takata)\nFiles:\t    src/ops.c, src/testdir/test39.in, src/testdir/test39.ok\n\nPatch 7.4.100\nProblem:    NFA regexp doesn't handle backreference correctly. (Ryuichi\n\t    Hayashida, Urtica Dioica)\nSolution:   Always add NFA_SKIP, also when it already exists at the start\n\t    position.\nFiles:\t    src/regexp_nfa.c, src/testdir/test64.in, src/testdir/test64.ok\n\nPatch 7.4.101\nProblem:    Using \\1 in pattern goes one line too far. (Bohr Shaw, John Little)\nSolution:   Only advance the match end for the matched characters in the last\n\t    line.\nFiles:\t    src/regexp.c, src/testdir/test64.in, src/testdir/test64.ok\n\nPatch 7.4.102\nProblem:    Crash when interrupting \"z=\".\nSolution:   Add safety check for word length. (Christian Brabandt, Dominique\n\t    Pelle)\nFiles:\t    src/spell.c\n\nPatch 7.4.103\nProblem:    Dos installer uses an old way to escape spaces in the diff\n\t    command.\nSolution:   Adjust the quoting to the new default shellxquote. (Ben Fritz)\nFiles:\t    src/dosinst.c\n\nPatch 7.4.104\nProblem:    \":help s/\\_\" reports an internal error. (John Beckett)\nSolution:   Check for NUL and invalid character classes.\nFiles:\t    src/regexp_nfa.c\n\nPatch 7.4.105\nProblem:    Completing a tag pattern may give an error for invalid pattern.\nSolution:   Suppress the error, just return no matches.\nFiles:\t    src/tag.c\n\nPatch 7.4.106\nProblem:    Can't build with Ruby using Cygwin.\nSolution:   Fix library name in makefile. (Steve Hall)\nFiles:\t    src/Make_cyg.mak\n\nPatch 7.4.107\nProblem:    Python: When vim.eval() encounters a Vim error, a try/catch in the\n\t    Python code doesn't catch it. (Yggdroot Chen)\nSolution:   Throw exceptions on errors in vim.eval(). (ZyX)\nFiles:\t    src/ex_eval.c, src/if_py_both.h, src/proto/ex_eval.pro,\n\t    src/testdir/test86.in, src/testdir/test86.ok,\n\t    src/testdir/test87.in, src/testdir/test87.ok\n\nPatch 7.4.108\nProblem:    \"zG\" and \"zW\" leave temp files around on MS-Windows.\nSolution:   Delete the temp files when exiting. (Ken Takata)\nFiles:\t    src/memline.c, src/proto/spell.pro, src/spell.c\n\nPatch 7.4.109\nProblem:    ColorScheme autocommand matches with the current buffer name.\nSolution:   Match with the colorscheme name. (Christian Brabandt)\nFiles:\t    runtime/doc/autocmd.txt, src/fileio.c, src/syntax.c\n\nPatch 7.4.110\nProblem:    \"gUgn\" cannot be repeated. (Dimitar Dimitrov)\nSolution:   Don't put \"gn\" in a different order in the redo buffer.  Restore\n\t    'wrapscan' when the pattern isn't found. (Christian Wellenbrock)\nFiles:\t    src/normal.c, src/search.c, src/test53.in, src/test53.ok\n\nPatch 7.4.111\nProblem:    Memory leak in Python OptionsAssItem. (Ken Takata)\nSolution:   Call Py_XDECREF() where needed. (ZyX)\nFiles:\t    src/if_py_both.h\n\nPatch 7.4.112\nProblem:    The defaults for 'directory' and 'backupdir' on MS-Windows do not\n\t    include a directory that exists.\nSolution:   Use $TEMP.\nFiles:\t    src/os_dos.h\n\nPatch 7.4.113\nProblem:    MSVC static analysis gives warnings.\nSolution:   Avoid the warnings and avoid possible bugs. (Ken Takata)\nFiles:\t    src/os_win32.c\n\nPatch 7.4.114\nProblem:    New GNU make outputs messages about changing directory in another\n\t    format.\nSolution:   Recognize the new format.\nFiles:\t    src/option.h\n\nPatch 7.4.115\nProblem:    When using Zsh expanding ~abc doesn't work when the result\n\t    contains a space.\nSolution:   Off-by-one error in detecting the NUL. (Pavol Juhas)\nFiles:\t    src/os_unix.c\n\nPatch 7.4.116\nProblem:    When a mapping starts with a space, the typed space does not show\n\t    up for 'showcmd'.\nSolution:   Show \"<20>\". (Brook Hong)\nFiles:\t    src/normal.c\n\nPatch 7.4.117\nProblem:    Can't build with Cygwin/MingW and Perl 5.18.\nSolution:   Add a linker argument for the Perl library. (Cesar Romani)\n\t    Adjust CFLAGS and LIB. (Cesar Romani)\n\t    Move including inline.h further down. (Ken Takata)\nFiles:\t    src/Make_cyg.mak, src/Make_ming.mak, src/if_perl.xs\n\nPatch 7.4.118\nProblem:    It's possible that redrawing the status lines causes\n\t    win_redr_custom() to be called recursively.\nSolution:   Protect against recursiveness. (Yasuhiro Matsumoto)\nFiles:\t    src/screen.c\n\nPatch 7.4.119\nProblem:    Vim doesn't work well on OpenVMS.\nSolution:   Fix various problems. (Samuel Ferencik)\nFiles:\t    src/os_unix.c, src/os_unix.h, src/os_vms.c\n\nPatch 7.4.120 (after 7.4.117)\nProblem:    Can't build with Perl 5.18 on Linux. (Lcd 47)\nSolution:   Add #ifdef. (Ken Takata)\nFiles:\t    src/if_perl.xs\n\nPatch 7.4.121\nProblem:    Completion doesn't work for \":py3d\" and \":py3f\". (Bohr Shaw)\nSolution:   Skip over letters after \":py3\".\nFiles:\t    src/ex_docmd.c\n\nPatch 7.4.122\nProblem:    Win32: When 'encoding' is set to \"utf-8\" and the active codepage\n\t    is cp932 then \":grep\" and other commands don't work for multi-byte\n\t    characters.\nSolution:   (Yasuhiro Matsumoto)\nFiles:\t    src/os_win32.c\n\nPatch 7.4.123\nProblem:    Win32: Getting user name does not use wide function.\nSolution:   Use GetUserNameW() if possible. (Ken Takata)\nFiles:\t    src/os_win32.c\n\nPatch 7.4.124\nProblem:    Win32: Getting host name does not use wide function.\nSolution:   Use GetComputerNameW() if possible. (Ken Takata)\nFiles:\t    src/os_win32.c\n\nPatch 7.4.125\nProblem:    Win32: Dealing with messages may not work for multi-byte chars.\nSolution:   Use pDispatchMessage(). (Ken Takata)\nFiles:\t    src/os_win32.c\n\nPatch 7.4.126\nProblem:    Compiler warnings for \"const\" and incompatible types.\nSolution:   Remove \"const\", add type cast. (Ken Takata)\nFiles:\t    src/os_win32.c\n\nPatch 7.4.127\nProblem:    Perl 5.18 on Unix doesn't work.\nSolution:   Move workaround to after including vim.h. (Ken Takata)\nFiles:\t    src/if_perl.xs\n\nPatch 7.4.128\nProblem:    Perl 5.18 for MSVC doesn't work.\nSolution:   Add check in makefile and define __inline. (Ken Takata)\nFiles:\t    src/Make_mvc.mak, src/if_perl.xs\n\nPatch 7.4.129\nProblem:    getline(-1) returns zero. (mvxxc)\nSolution:   Return an empty string.\nFiles:\t    src/eval.c\n\nPatch 7.4.130\nProblem:    Relative line numbers mix up windows when using folds.\nSolution:   Use hasFoldingWin() instead of hasFolding(). (Lech Lorens)\nFiles:\t    src/misc2.c\n\nPatch 7.4.131\nProblem:    Syncbind causes E315 errors in some situations. (Liang Li)\nSolution:   Set and restore curbuf in ex_syncbind(). (Christian Brabandt)\nFiles:\t    src/ex_docmd.c, src/testdir/test37.ok\n\nPatch 7.4.132 (after 7.4.122)\nProblem:    Win32: flags and inherit_handles arguments mixed up.\nSolution:   Swap the argument. (cs86661)\nFiles:\t    src/os_win32.c\n\nPatch 7.4.133\nProblem:    Clang warns for using NUL.\nSolution:   Change NUL to NULL. (Dominique Pelle)\nFiles:\t    src/eval.c, src/misc2.c\n\nPatch 7.4.134\nProblem:    Spurious space in MingW Makefile.\nSolution:   Remove the space. (Michael Soyka)\nFiles:\t    src/Make_ming.mak\n\nPatch 7.4.135\nProblem:    Missing dot in MingW test Makefile.\nSolution:   Add the dot. (Michael Soyka)\nFiles:\t    src/testdir/Make_ming.mak\n\nPatch 7.4.136 (after 7.4.096)\nProblem:    MS-Windows: When saving a file with a UNC path the file becomes\n\t    read-only.\nSolution:   Don't mix up Win32 attributes and Unix attributes. (Ken Takata)\nFiles:\t    src/os_mswin.c, src/os_win32.c\n\nPatch 7.4.137\nProblem:    Cannot use IME with Windows 8 console.\nSolution:   Change the user of ReadConsoleInput() and PeekConsoleInput().\n\t    (Nobuhiro Takasaki)\nFiles:\t    src/os_win32.c\n\nPatch 7.4.138 (after 7.4.114)\nProblem:    Directory change messages are not recognized.\nSolution:   Fix using a character range literally. (Lech Lorens)\nFiles:\t    src/option.h\n\nPatch 7.4.139\nProblem:    Crash when using :cd in autocommand. (Fran\u00e7ois Ingelrest)\nSolution:   Set w_localdir to NULL after freeing it. (Dominique Pelle)\nFiles:\t    src/ex_docmd.c, src/window.c\n\nPatch 7.4.140\nProblem:    Crash when wiping out buffer triggers autocommand that wipes out\n\t    only other buffer.\nSolution:   Do not delete the last buffer, make it empty. (Hirohito Higashi)\nFiles:\t    src/buffer.c\n\nPatch 7.4.141\nProblem:    Problems when building with Borland: st_mode is signed short;\n\t    can't build with Python; temp files not ignored by Mercurial;\n\t    building with DEBUG doesn't define _DEBUG.\nSolution:   Fix the problems. (Ken Takata)\nFiles:\t    src/Make_bc5.mak, src/if_py_both.h, src/os_win32.c\n\nPatch 7.4.142 (after 7.4.137)\nProblem:    On MS-Windows 8 IME input doesn't work correctly.\nSolution:   Work around the problem. (Nobuhiro Takasaki)\nFiles:\t    src/os_win32.c\n\nPatch 7.4.143\nProblem:    TextChangedI is not triggered.\nSolution:   Reverse check for \"ready\". (lilydjwg)\nFiles:\t    src/edit.c\n\nPatch 7.4.144\nProblem:    MingW also supports intptr_t for OPEN_OH_ARGTYPE.\nSolution:   Adjust #ifdef. (Ken Takata)\nFiles:\t    src/os_mswin.c\n\nPatch 7.4.145\nProblem:    getregtype() does not return zero for unknown register.\nSolution:   Adjust documentation: return empty string for unknown register.\n\t    Check the register name to be valid. (Yukihiro Nakadaira)\nFiles:\t    runtime/doc/eval.txt, src/ops.c\n\nPatch 7.4.146\nProblem:    When starting Vim with \"-u NONE\" v:oldfiles is NULL.\nSolution:   Set v:oldfiles to an empty list. (Yasuhiro Matsumoto)\nFiles:\t    src/main.c\n\nPatch 7.4.147\nProblem:    Cursor moves to wrong position when using \"gj\" after \"$\" and\n\t    virtual editing is active.\nSolution:   Make \"gj\" behave differently when virtual editing is active.\n\t    (Hirohito Higashi)\nFiles:\t    src/normal.c, src/testdir/test39.in, src/testdir/test39.ok\n\nPatch 7.4.148\nProblem:    Cannot build with Cygwin and X11.\nSolution:   Include Xwindows.h instead of windows.h. (Lech Lorens)\nFiles:\t    src/mbyte.c\n\nPatch 7.4.149\nProblem:    Get E685 error when assigning a function to an autoload variable.\n\t    (Yukihiro Nakadaira)\nSolution:   Instead of having a global no_autoload variable, pass an autoload\n\t    flag down to where it is used. (ZyX)\nFiles:\t    src/eval.c, src/testdir/test55.in, src/testdir/test55.ok,\n\t    src/testdir/test60.in, src/testdir/test60.ok,\n\t    src/testdir/sautest/autoload/footest.vim\n\nPatch 7.4.150\nProblem:    :keeppatterns is not respected for :s.\nSolution:   Check the keeppatterns flag. (Yasuhiro Matsumoto)\nFiles:\t    src/search.c, src/testdir/test14.in, src/testdir/test14.ok\n\nPatch 7.4.151\nProblem:    Python: slices with steps are not supported.\nSolution:   Support slices in Python vim.List. (ZyX)\nFiles:\t    src/eval.c, src/if_py_both.h, src/if_python3.c, src/if_python.c,\n\t    src/proto/eval.pro, src/testdir/test86.in, src/testdir/test86.ok,\n\t    src/testdir/test87.in, src/testdir/test87.ok\n\nPatch 7.4.152\nProblem:    Python: Cannot iterate over options.\nSolution:   Add options iterator. (ZyX)\nFiles:\t    src/if_py_both.h, src/option.c, src/proto/option.pro,\n\t    src/testdir/test86.in, src/testdir/test86.ok,\n\t    src/testdir/test87.in, src/testdir/test87.ok, src/vim.h\n\nPatch 7.4.153\nProblem:    Compiler warning for pointer type.\nSolution:   Add type cast.\nFiles:\t    src/if_py_both.h, src/if_python.c, src/if_python3.c\n\nPatch 7.4.154 (after 7.4.149)\nProblem:    Still a problem with auto-loading.\nSolution:   Pass no_autoload to deref_func_name(). (Yukihiro Nakadaira)\nFiles:\t    src/eval.c\n\nPatch 7.4.155\nProblem:    \":keeppatterns /pat\" does not keep search pattern offset.\nSolution:   Restore the offset after doing the search.\nFiles:\t    src/search.c, src/testdir/test14.in, src/testdir/test14.ok\n\nPatch 7.4.156\nProblem:    Test file missing from distribution.\nSolution:   Add new directory to file list.\nFiles:\t    Filelist\n\nPatch 7.4.157\nProblem:    Error number used twice. (Yukihiro Nakadaira)\nSolution:   Change the one not referred in the docs.\nFiles:\t    src/undo.c\n\nPatch 7.4.158 (after 7.4.045)\nProblem:    Pattern containing \\zs is not handled correctly by substitute().\nSolution:   Change how an empty match is skipped. (Yukihiro Nakadaira)\nFiles:\t    src/eval.c, src/testdir/test80.in, src/testdir/test80.ok\n\nPatch 7.4.159\nProblem:    Completion hangs when scanning the current buffer after doing\n\t    keywords. (Christian Brabandt)\nSolution:   Set the first match position when starting to scan the current\n\t    buffer.\nFiles:\t    src/edit.c\n\nPatch 7.4.160\nProblem:    Win32: Crash when executing external command.\nSolution:   Only close the handle when it was created. (Yasuhiro Matsumoto)\nFiles:\t    src/os_win32.c\n\nPatch 7.4.161\nProblem:    Crash in Python exception handling.\nSolution:   Only use exception variables if did_throw is set. (ZyX)\nFiles:\t    if_py_both.h\n\nPatch 7.4.162\nProblem:    Running tests in shadow dir doesn't work.\nSolution:   Add testdir/sautest to the shadow target. (James McCoy)\nFiles:\t    src/Makefile\n\nPatch 7.4.163 (after 7.4.142)\nProblem:    MS-Windows input doesn't work properly on Windows 7 and earlier.\nSolution:   Add a check for Windows 8. (Yasuhiro Matsumoto)\nFiles:\t    src/os_win32.c\n\nPatch 7.4.164 (after 7.4.163)\nProblem:    Problem with event handling on Windows 8.\nSolution:   Ignore duplicate WINDOW_BUFFER_SIZE_EVENTs. (Nobuhiro Takasaki)\nFiles:\t    src/os_win32.c\n\nPatch 7.4.165\nProblem:    By default, after closing a buffer changes can't be undone.\nSolution:   In the example vimrc file set 'undofile'.\nFiles:\t    runtime/vimrc_example.vim\n\nPatch 7.4.166\nProblem:    Auto-loading a function for code that won't be executed.\nSolution:   Do not auto-load when evaluation is off. (Yasuhiro Matsumoto)\nFiles:\t    src/eval.c\n\nPatch 7.4.167 (after 7.4.149)\nProblem:    Fixes are not tested.\nSolution:   Add a test for not autoloading on assignment. (Yukihiro Nakadaira)\nFiles:\t    src/testdir/Make_amiga.mak, src/testdir/Make_dos.mak,\n\t    src/testdir/Make_ming.mak, src/testdir/Make_os2.mak,\n\t    src/testdir/Make_vms.mms, src/testdir/Makefile,\n\t    src/testdir/sautest/autoload/Test104.vim, src/testdir/test104.in,\n\t    src/testdir/test104.ok\n\nPatch 7.4.168\nProblem:    Can't compile with Ruby 2.1.0.\nSolution:   Add support for new GC. (Kohei Suzuki)\nFiles:\t    src/if_ruby.c\n\nPatch 7.4.169\nProblem:    \":sleep\" puts cursor in the wrong column. (Liang Li)\nSolution:   Add the window offset. (Christian Brabandt)\nFiles:\t    src/ex_docmd.c\n\nPatch 7.4.170\nProblem:    Some help tags don't work with \":help\". (Tim Chase)\nSolution:   Add exceptions.\nFiles:\t    src/ex_cmds.c\n\nPatch 7.4.171\nProblem:    Redo does not set v:count and v:count1.\nSolution:   Use a separate buffer for redo, so that we can set the counts when\n\t    performing redo.\nFiles:\t    src/getchar.c, src/globals.h, src/normal.c, src/proto/getchar.pro,\n\t    src/structs.h\n\nPatch 7.4.172\nProblem:    The blowfish code mentions output feedback, but the code is\n\t    actually doing cipher feedback.\nSolution:   Adjust names and comments.\nFiles:\t    src/blowfish.c, src/fileio.c, src/proto/blowfish.pro,\n\t    src/memline.c\n\nPatch 7.4.173\nProblem:    When using scrollbind the cursor can end up below the last line.\n\t    (mvxxc)\nSolution:   Reset w_botfill when scrolling up. (Christian Brabandt)\nFiles:\t    src/move.c\n\nPatch 7.4.174\nProblem:    Compiler warnings for Python interface. (Tony Mechelynck)\nSolution:   Add type casts, initialize variable.\nFiles:\t    src/if_py_both.h\n\nPatch 7.4.175\nProblem:    When a wide library function fails, falling back to the non-wide\n\t    function may do the wrong thing.\nSolution:   Check the platform, when the wide function is supported don't fall\n\t    back to the non-wide function. (Ken Takata)\nFiles:\t    src/os_mswin.c, src/os_win32.c\n\nPatch 7.4.176\nProblem:    Dictionary.update() throws an error when used without arguments.\n\t    Python programmers don't expect that.\nSolution:   Make Dictionary.update() without arguments do nothing. (ZyX)\nFiles:\t    src/if_py_both.h, src/testdir/test86.in, src/testdir/test87.in\n\nPatch 7.4.177\nProblem:    Compiler warning for unused variable. (Tony Mechelynck)\nSolution:   Add #ifdef.\nFiles:\t    src/move.c\n\nPatch 7.4.178\nProblem:    The J command does not update '[ and '] marks. (William Gardner)\nSolution:   Set the marks. (Christian Brabandt)\nFiles:\t    src/ops.c\n\nPatch 7.4.179\nProblem:    Warning for type-punned pointer. (Tony Mechelynck)\nSolution:   Use intermediate variable.\nFiles:\t    src/if_py_both.h\n\nPatch 7.4.180 (after 7.4.174)\nProblem:    Older Python versions don't support %ld.\nSolution:   Use %d instead. (ZyX)\nFiles:\t    src/if_py_both.h\n\nPatch 7.4.181\nProblem:    When using 'pastetoggle' the status lines are not updated. (Samuel\n\t    Ferencik, Jan Christoph Ebersbach)\nSolution:   Update the status lines. (Nobuhiro Takasaki)\nFiles:\t    src/getchar.c\n\nPatch 7.4.182\nProblem:    Building with mzscheme and racket does not work. (David Chimay)\nSolution:   Adjust autoconf. (Sergey Khorev)\nFiles:\t    src/configure.in, src/auto/configure\n\nPatch 7.4.183\nProblem:    MSVC Visual Studio update not supported.\nSolution:   Add version number. (Mike Williams)\nFiles:\t    src/Make_mvc.mak\n\nPatch 7.4.184\nProblem:    match() does not work properly with a {count} argument.\nSolution:   Compute the length once and update it.  Quit the loop when at the\n\t    end. (Hirohito Higashi)\nFiles:\t    src/eval.c, src/testdir/test53.in, src/testdir/test53.ok\n\nPatch 7.4.185\nProblem:    Clang gives warnings.\nSolution:   Adjust how bigness is set. (Dominique Pelle)\nFiles:\t    src/ex_cmds.c\n\nPatch 7.4.186 (after 7.4.085)\nProblem:    Insert in Visual mode sometimes gives incorrect results.\n\t    (Dominique Pelle)\nSolution:   Remember the original insert start position. (Christian Brabandt,\n\t    Dominique Pelle)\nFiles:\t    src/edit.c, src/globals.h, src/ops.c, src/structs.h\n\nPatch 7.4.187\nProblem:    Delete that crosses line break splits multi-byte character.\nSolution:   Advance a character instead of a byte. (Cade Foster)\nFiles:\t    src/normal.c, src/testdir/test69.in, src/testdir/test69.ok\n\nPatch 7.4.188\nProblem:    SIZEOF_LONG clashes with similar defines in header files.\nSolution:   Rename to a name starting with VIM_.  Also for SIZEOF_INT.\nFiles:\t    src/if_ruby.c, src/vim.h, src/configure.in, src/auto/configure,\n\t    src/config.h.in, src/fileio.c, src/if_python.c, src/message.c,\n\t    src/spell.c, src/feature.h, src/os_os2_cfg.h, src/os_vms_conf.h,\n\t    src/os_win16.h, src/structs.h\n\nPatch 7.4.189\nProblem:    Compiler warning for unused argument.\nSolution:   Add UNUSED.\nFiles:\t    src/eval.c\n\nPatch 7.4.190\nProblem:    Compiler warning for using %lld for off_t.\nSolution:   Add type cast.\nFiles:\t    src/fileio.c\n\nPatch 7.4.191\nProblem:    Escaping a file name for shell commands can't be done without a\n\t    function.\nSolution:   Add the :S file name modifier.\nFiles:\t    src/testdir/Make_amiga.mak, src/testdir/Make_dos.mak,\n\t    src/testdir/Make_ming.mak, src/testdir/Make_os2.mak,\n\t    src/testdir/Make_vms.mms, src/testdir/Makefile,\n\t    src/testdir/test105.in, src/testdir/test105.ok,\n\t    runtime/doc/cmdline.txt, runtime/doc/eval.txt,\n\t    runtime/doc/map.txt, runtime/doc/options.txt,\n\t    runtime/doc/quickfix.txt, runtime/doc/usr_30.txt,\n\t    runtime/doc/usr_40.txt, runtime/doc/usr_42.txt,\n\t    runtime/doc/vi_diff.txt, src/eval.c, src/misc2.c, src/normal.c,\n\t    src/proto/misc2.pro\n\nPatch 7.4.192\nProblem:    Memory leak when giving E853.\nSolution:   Free the argument. (Dominique Pelle)\nFiles:\t    src/eval.c\n\nPatch 7.4.193\nProblem:    Typos in messages.\nSolution:   \"then\" -> \"than\". (Dominique Pelle)\nFiles:\t    src/if_py_both.h, src/spell.c\n\nPatch 7.4.194\nProblem:    Can't build for Android.\nSolution:   Add #if condition. (Fredrik Fornwall)\nFiles:\t    src/mbyte.c\n\nPatch 7.4.195 (after 7.4.193)\nProblem:    Python tests fail.\nSolution:   Change \"then\" to \"than\" in more places. (Dominique Pelle, Taro\n\t    Muraoka)\nFiles:\t    src/testdir/test86.in, src/testdir/test86.ok,\n\t    src/testdir/test87.in, src/testdir/test87.ok\n\nPatch 7.4.196\nProblem:    Tests fail on Solaris 9 and 10.\nSolution:   Use \"test -f\" instead of \"test -e\".  (Laurent Blume)\nFiles:\t    src/testdir/Makefile\n\nPatch 7.4.197\nProblem:    Various problems on VMS.\nSolution:   Fix several VMS problems. (Zoltan Arpadffy)\nFiles:\t    runtime/doc/os_vms.txt, src/Make_vms.mms, src/fileio.c,\n\t    src/os_unix.c, src/os_unix.h, src/os_vms.c, src/os_vms_conf.h,\n\t    src/proto/os_vms.pro, src/testdir/Make_vms.mms,\n\t    src/testdir/test72.in, src/testdir/test77a.com,\n\t    src/testdir/test77a.in, src/testdir/test77a.ok src/undo.c\n\nPatch 7.4.198\nProblem:    Can't build Vim with Perl when -Dusethreads is not specified for\n\t    building Perl, and building Vim with --enable-perlinterp=dynamic.\nSolution:   Adjust #ifdefs. (Yasuhiro Matsumoto)\nFiles:\t    src/if_perl.xs\n\nPatch 7.4.199\nProblem:    (issue 197) ]P doesn't paste over Visual selection.\nSolution:   Handle Visual mode specifically. (Christian Brabandt)\nFiles:\t    src/normal.c\n\nPatch 7.4.200\nProblem:    Too many #ifdefs in the code.\nSolution:   Enable FEAT_VISUAL always, await any complaints\nFiles:\t    src/feature.h\n\nPatch 7.4.201\nProblem:    'lispwords' is a global option.\nSolution:   Make 'lispwords' global-local. (Sung Pae)\nFiles:\t    runtime/doc/options.txt, runtime/optwin.vim, src/buffer.c,\n\t    src/misc1.c, src/option.c, src/option.h, src/structs.h,\n\t    src/testdir/test100.in, src/testdir/test100.ok\n\nPatch 7.4.202\nProblem:    MS-Windows: non-ASCII font names don't work.\nSolution:   Convert between the current code page and 'encoding'. (Ken Takata)\nFiles:\t    src/gui_w48.c, src/os_mswin.c, src/proto/winclip.pro,\n\t    src/winclip.c\n\nPatch 7.4.203\nProblem:    Parsing 'errorformat' is not correct.\nSolution:   Reset \"multiignore\" at the start of a multi-line message. (Lcd)\nFiles:\t    src/quickfix.c, src/testdir/Make_amiga.mak,\n\t    src/testdir/Make_dos.mak, src/testdir/Make_ming.mak,\n\t    src/testdir/Make_os2.mak, src/testdir/Make_vms.mms,\n\t    src/testdir/Makefile, src/testdir/test106.in,\n\t    src/testdir/test106.ok\n\nPatch 7.4.204\nProblem:    A mapping where the second byte is 0x80 doesn't work.\nSolution:   Unescape before checking for incomplete multi-byte char. (Nobuhiro\n\t    Takasaki)\nFiles:\t    src/getchar.c, src/testdir/test75.in, src/testdir/test75.ok\n\nPatch 7.4.205\nProblem:    \":mksession\" writes command to move to second argument while it\n\t    does not exist.  When it does exist the order might be wrong.\nSolution:   Use \":argadd\" for each argument instead of using \":args\" with a\n\t    list of names. (Nobuhiro Takasaki)\nFiles:\t    src/ex_docmd.c\n\nPatch 7.4.206\nProblem:    Compiler warnings on 64 bit Windows.\nSolution:   Add type casts. (Mike Williams)\nFiles:\t    src/gui_w48.c, src/os_mswin.c\n\nPatch 7.4.207\nProblem:    The cursor report sequence is sometimes not recognized and results\n\t    in entering replace mode.\nSolution:   Also check for the cursor report when not asked for.\nFiles:\t    src/term.c\n\nPatch 7.4.208\nProblem:    Mercurial picks up some files that are not distributed.\nSolution:   Add patterns to the ignore list. (Cade Forester)\nFiles:\t    .hgignore\n\nPatch 7.4.209\nProblem:    When repeating a filter command \"%\" and \"#\" are expanded.\nSolution:   Escape the command when storing for redo. (Christian Brabandt)\nFiles:\t    src/ex_cmds.c\n\nPatch 7.4.210\nProblem:    Visual block mode plus virtual edit doesn't work well with tabs.\n\t    (Liang Li) \nSolution:   Take coladd into account. (Christian Brabandt)\nFiles:\t    src/ops.c, src/testdir/test39.in, src/testdir/test39.ok\n\nPatch 7.4.211\nProblem:    \":lu\" is an abbreviation for \":lua\", but it should be \":lunmap\".\n\t    (ZyX)\nSolution:   Move \"lunmap\" to above \"lua\".\nFiles:\t    src/ex_cmds.h\n\nPatch 7.4.212 (after 7.4.200)\nProblem:    Now that the +visual feature is always enabled the #ifdefs for it\n\t    are not useful.\nSolution:   Remove the checks for FEAT_VISUAL.\nFiles:\t    src/buffer.c, src/charset.c, src/edit.c, src/eval.c,\n\t    src/ex_cmds.c, src/ex_docmd.c, src/fold.c, src/getchar.c,\n\t    src/gui.c, src/gui_mac.c, src/gui_w48.c, src/main.c, src/mark.c,\n\t    src/menu.c, src/misc2.c, src/move.c, src/netbeans.c, src/normal.c,\n\t    src/ops.c, src/option.c, src/os_msdos.c, src/os_qnx.c,\n\t    src/quickfix.c, src/regexp.c, src/regexp_nfa.c, src/screen.c,\n\t    src/search.c, src/spell.c, src/syntax.c, src/term.c, src/ui.c,\n\t    src/undo.c, src/version.c, src/window.c, src/feature.h,\n\t    src/globals.h, src/option.h, src/os_win32.h, src/structs.h\n\nPatch 7.4.213\nProblem:    It's not possible to open a new buffer without creating a swap\n\t    file.\nSolution:   Add the \":noswapfile\" modifier. (Christian Brabandt)\nFiles:\t    runtime/doc/recover.txt, src/ex_cmds.h, src/ex_docmd.c,\n\t    src/memline.c, src/structs.h\n\nPatch 7.4.214\nProblem:    Compilation problems on HP_nonStop (Tandem).\nSolution:   Add #defines. (Joachim Schmitz)\nFiles:\t    src/vim.h\n\nPatch 7.4.215\nProblem:    Inconsistency: \":sp foo\" does not reload \"foo\", unless \"foo\" is\n\t    the current buffer. (Liang Li)\nSolution:   Do not reload the current buffer on a split command.\nFiles:\t    runtime/doc/windows.txt, src/ex_docmd.c\n\nPatch 7.4.216\nProblem:    Compiler warnings. (Tony Mechelynck)\nSolution:   Initialize variables, add #ifdef.\nFiles:\t    src/term.c, src/os_unix.h\n\nPatch 7.4.217\nProblem:    When src/auto/configure was updated, \"make clean\" would run\n\t    configure pointlessly.\nSolution:   Do not run configure for \"make clean\" and \"make distclean\" when\n\t    the make program supports $MAKECMDGOALS. (Ken Takata)\nFiles:\t    src/Makefile\n\nPatch 7.4.218\nProblem:    It's not easy to remove duplicates from a list.\nSolution:   Add the uniq() function. (LCD)\nFiles:\t    runtime/doc/change.txt, runtime/doc/eval.txt,\n\t    runtime/doc/usr_41.txt, runtime/doc/version7.txt, src/eval.c,\n\t    src/testdir/test55.in, src/testdir/test55.ok\n\nPatch 7.4.219\nProblem:    When 'relativenumber' or 'cursorline' are set the window is\n\t    redrawn much to often. (Patrick Hemmer, Dominique Pelle)\nSolution:   Check the VALID_CROW flag instead of VALID_WROW.\nFiles:\t    src/move.c\n\nPatch 7.4.220\nProblem:    Test 105 does not work in a shadow dir. (James McCoy)\nSolution:   Omit \"src/\" from the checked path.\nFiles:\t    src/testdir/test105.in, src/testdir/test105.ok\n\nPatch 7.4.221\nProblem:    Quickfix doesn't resize on \":copen 20\". (issue 199)\nSolution:   Resize the window when requested. (Christian Brabandt)\nFiles:\t    src/quickfix.c\n\nPatch 7.4.222\nProblem:    The Ruby directory is constructed from parts.\nSolution:   Use 'rubyarchhdrdir' if it exists. (James McCoy)\nFiles:\t    src/configure.in, src/auto/configure\n\nPatch 7.4.223\nProblem:    Still using an older autoconf version.\nSolution:   Switch to autoconf 2.69.\nFiles:\t    src/Makefile, src/configure.in, src/auto/configure\n\nPatch 7.4.224\nProblem:    /usr/bin/grep on Solaris does not support -F.\nSolution:   Add configure check to find a good grep. (Danek Duvall)\nFiles:\t    src/configure.in, src/auto/configure\n\nPatch 7.4.225\nProblem:    Dynamic Ruby doesn't work on Solaris.\nSolution:   Always use the stubs. (Danek Duvall, Yukihiro Nakadaira)\nFiles:\t    src/if_ruby.c\n\nPatch 7.4.226 (after 7.4.219)\nProblem:    Cursurline highlighting not redrawn when scrolling. (John\n\t    Marriott)\nSolution:   Check for required redraw in two places.\nFiles:\t    src/move.c\n\nPatch 7.4.227 (after 7.4.225)\nProblem:    Can't build with Ruby 1.8.\nSolution:   Do include a check for the Ruby version. (Ken Takata)\nFiles:\t    src/if_ruby.c\n\nPatch 7.4.228\nProblem:    Compiler warnings when building with Python 3.2.\nSolution:   Make type cast depend on Python version. (Ken Takata)\nFiles:\t    src/if_py_both.h, src/if_python.c, src/if_python3.c\n\nPatch 7.4.229\nProblem:    Using \":let\" for listing variables and the second one is a curly\n\t    braces expression may fail.\nSolution:   Check for an \"=\" in a better way. (ZyX)\nFiles:\t    src/eval.c, src/testdir/test104.in, src/testdir/test104.ok\n\nPatch 7.4.230\nProblem:    Error when using \":options\".\nSolution:   Fix the entry for 'lispwords'. (Kenichi Ito)\nFiles:\t    runtime/optwin.vim\n\nPatch 7.4.231\nProblem:    An error in \":options\" is not caught by the tests.\nSolution:   Add a test for \":options\".  Set $VIMRUNTIME for the tests so that\n\t    it uses the current runtime files instead of the installed ones.\nFiles:\t    src/Makefile, src/testdir/Makefile, src/testdir/test_options.in,\n\t    src/testdir/test_options.ok, src/testdir/Make_amiga.mak,\n\t    src/testdir/Make_dos.mak, src/testdir/Make_ming.mak,\n\t    src/testdir/Make_os2.mak, src/testdir/Make_vms.mms\n\nPatch 7.4.232\nProblem:    \":%s/\\n//\" uses a lot of memory. (Aidan Marlin)\nSolution:   Turn this into a join command. (Christian Brabandt)\nFiles:\t    src/ex_cmds.c, src/ex_docmd.c, src/proto/ex_docmd.pro\n\nPatch 7.4.233\nProblem:    Escaping special characters for using \"%\" with a shell command is\n\t    inconsistent, parentheses are escaped but spaces are not.\nSolution:   Only escape \"!\". (Gary Johnson)\nFiles:\t    src/ex_docmd.c\n\nPatch 7.4.234\nProblem:    Can't get the command that was used to start Vim.\nSolution:   Add v:progpath. (Viktor Kojouharov)\nFiles:\t    runtime/doc/eval.txt, src/eval.c, src/main.c, src/vim.h\n\nPatch 7.4.235\nProblem:    It is not easy to get the full path of a command.\nSolution:   Add the exepath() function.\nFiles:\t    src/eval.c, src/misc1.c, src/os_amiga.c, src/os_msdos.c,\n\t    src/os_unix.c, src/os_vms.c, src/os_win32.c,\n\t    src/proto/os_amiga.pro, src/proto/os_msdos.pro,\n\t    src/proto/os_unix.pro, src/proto/os_win32.pro,\n\t    runtime/doc/eval.txt\n\nPatch 7.4.236\nProblem:    It's not that easy to check the Vim patch version.\nSolution:   Make has(\"patch-7.4.123\") work. (partly by Marc Weber)\nFiles:\t    runtime/doc/eval.txt, src/eval.c, src/testdir/test60.in,\n\t    src/testdir/test60.ok\n\nPatch 7.4.237 (after 7.4.236)\nProblem:    When some patches was not included has(\"patch-7.4.123\") may return\n\t    true falsely.\nSolution:   Check for the specific patch number.\nFiles:\t    runtime/doc/eval.txt, src/eval.c\n\nPatch 7.4.238\nProblem:    Vim does not support the smack library.\nSolution:   Add smack support (Jose Bollo)\nFiles:\t    src/config.h.in, src/configure.in, src/fileio.c, src/memfile.c,\n\t    src/os_unix.c, src/undo.c, src/auto/configure\n\nPatch 7.4.239\nProblem:    \":e +\" does not position cursor at end of the file.\nSolution:   Check for \"+\" being the last character (ZyX)\nFiles:\t    src/ex_docmd.c\n\nPatch 7.4.240\nProblem:    \":tjump\" shows \"\\n\" as \"\\\\n\".\nSolution:   Skip over \"\\\" that escapes a backslash. (Gary Johnson)\nFiles:\t    src/tag.c\n\nPatch 7.4.241\nProblem:    The string returned by submatch() does not distinguish between a\n\t    NL from a line break and a NL that stands for a NUL character.\nSolution:   Add a second argument to return a list. (ZyX)\nFiles:\t    runtime/doc/eval.txt, src/eval.c, src/proto/regexp.pro,\n\t    src/regexp.c, src/testdir/test79.in, src/testdir/test79.ok,\n\t    src/testdir/test80.in, src/testdir/test80.ok\n\nPatch 7.4.242\nProblem:    getreg() does not distinguish between a NL used for a line break\n\t    and a NL used for a NUL character.\nSolution:   Add another argument to return a list. (ZyX)\nFiles:\t    runtime/doc/eval.txt, src/eval.c src/ops.c, src/proto/ops.pro,\n\t    src/vim.h, src/Makefile, src/testdir/test_eval.in,\n\t    src/testdir/test_eval.ok, src/testdir/Make_amiga.mak,\n\t    src/testdir/Make_dos.mak, src/testdir/Make_ming.mak,\n\t    src/testdir/Make_os2.mak, src/testdir/Make_vms.mms\n\nPatch 7.4.243\nProblem:    Cannot use setreg() to add text that includes a NUL.\nSolution:   Make setreg() accept a list.\nFiles:\t    runtime/doc/eval.txt, src/eval.c, src/ops.c, src/proto/ops.pro,\n\t    src/testdir/test_eval.in, src/testdir/test_eval.ok\n\nPatch 7.4.244 (after 7.4.238)\nProblem:    The smack feature causes stray error messages.\nSolution:   Remove the error messages.\nFiles:\t    src/os_unix.c\n\nPatch 7.4.245\nProblem:    Crash for \"vim -u NONE -N  -c '&&'\".\nSolution:   Check for the pattern to be NULL. (Dominique Pelle)\nFiles:\t    src/ex_cmds.c\n\nPatch 7.4.246\nProblem:    Configure message for detecting smack are out of sequence.\nSolution:   Put the messages in the right place. (Kazunobu Kuriyama)\nFiles:\t    src/configure.in, src/auto/configure\n\nPatch 7.4.247\nProblem:    When passing input to system() there is no way to keep NUL and\n\t    NL characters separate.\nSolution:   Optionally use a list for the system() input. (ZyX)\nFiles:\t    runtime/doc/eval.txt, src/eval.c\n\nPatch 7.4.248\nProblem:    Cannot distinguish between NL and NUL in output of system().\nSolution:   Add systemlist(). (ZyX)\nFiles:\t    runtime/doc/eval.txt, src/eval.c, src/ex_cmds2.c, src/misc1.c,\n\t    src/proto/misc1.pro\n\nPatch 7.4.249\nProblem:    Using setreg() with a list of numbers does not work.\nSolution:   Use a separate buffer for numbers. (ZyX)\nFiles:\t    src/eval.c, src/testdir/test_eval.in, src/testdir/test_eval.ok\n\nPatch 7.4.250\nProblem:    Some test files missing from distribution.\nSolution:   Add pattern for newly added tests.\nFiles:\t    Filelist\n\nPatch 7.4.251\nProblem:    Crash when BufAdd autocommand wipes out the buffer.\nSolution:   Check for buffer to still be valid. Postpone freeing the buffer\n\t    structure. (Hirohito Higashi)\nFiles:\t    src/buffer.c, src/ex_cmds.c, src/fileio.c, src/globals.h\n\nPatch 7.4.252\nProblem:    Critical error in GTK, removing timer twice.\nSolution:   Clear the timer after removing it. (James McCoy)\nFiles:\t    src/gui_gtk_x11.c\n\nPatch 7.4.253\nProblem:    Crash when using cpp syntax file with pattern using external\n\t    match. (Havard Garnes)\nSolution:   Discard match when end column is before start column.\nFiles:\t    src/regexp.c, src/regexp_nfa.c\n\nPatch 7.4.254\nProblem:    Smack support detection is incomplete.\nSolution:   Check for attr/xattr.h and specific macro.\nFiles:\t    src/configure.in, src/auto/configure\n\nPatch 7.4.255\nProblem:    Configure check for smack doesn't work with all shells. (David\n\t    Larson)\nSolution:   Remove spaces in set command.\nFiles:\t    src/configure.in, src/auto/configure\n\nPatch 7.4.256 (after 7.4.248)\nProblem:    Using systemlist() may cause a crash and does not handle NUL\n\t    characters properly.\nSolution:   Increase the reference count, allocate memory by length. (Yasuhiro\n\t    Matsumoto)\nFiles:\t    src/eval.c\n\nPatch 7.4.257\nProblem:    Compiler warning, possibly for mismatch in parameter name.\nSolution:   Rename the parameter in the declaration.\nFiles:\t    src/ops.c\n\nPatch 7.4.258\nProblem:    Configure fails if $CC contains options.\nSolution:   Remove quotes around $CC. (Paul Barker)\nFiles:\t    src/configure.in, src/auto/configure\n\nPatch 7.4.259\nProblem:    Warning for misplaced \"const\".\nSolution:   Move the \"const\". (Yukihiro Nakadaira)\nFiles:\t    src/os_unix.c\n\nPatch 7.4.260\nProblem:    It is possible to define a function with a colon in the name.  It\n\t    is possible to define a function with a lower case character if a\n\t    \"#\" appears after the name.\nSolution:   Disallow using a colon other than with \"s:\".  Ignore \"#\" after the\n\t    name.\nFiles:\t    runtime/doc/eval.txt, src/eval.c, src/testdir/test_eval.in,\n\t    src/testdir/test_eval.ok\n\nPatch 7.4.261\nProblem:    When updating the window involves a regexp pattern, an interactive\n\t    substitute to replace a \"\\n\" with a line break fails. (Ingo\n\t    Karkat)\nSolution:   Set reg_line_lbr in vim_regsub() and vim_regsub_multi().\nFiles:\t    src/regexp.c, src/testdir/test79.in, src/testdir/test79.ok\n\nPatch 7.4.262\nProblem:    Duplicate code in regexec().\nSolution:   Add line_lbr flag to regexec_nl().\nFiles:\t    src/regexp.c, src/regexp_nfa.c, src/regexp.h\n\nPatch 7.4.263\nProblem:    GCC 4.8 compiler warning for hiding a declaration (Fran\u00e7ois Gannaz)\nSolution:   Remove the second declaration.\nFiles:\t    src/eval.c\n\nPatch 7.4.264 (after 7.4.260)\nProblem:    Can't define a function starting with \"g:\".  Can't assign a\n\t    funcref to a buffer-local variable.\nSolution:   Skip \"g:\" at the start of a function name.  Don't check for colons\n\t    when assigning to a variable.\nFiles:\t    src/eval.c, src/testdir/test_eval.in, src/testdir/test_eval.ok\n\nPatch 7.4.265 (after 7.4.260)\nProblem:    Can't call a global function with \"g:\" in an expression.\nSolution:   Skip the \"g:\" when looking up the function.\nFiles:\t    src/eval.c, src/testdir/test_eval.in, src/testdir/test_eval.ok\n\nPatch 7.4.266\nProblem:    Test 62 fails.\nSolution:   Set the language to C. (Christian Brabandt)\nFiles:\t    src/testdir/test62.in\n\nPatch 7.4.267 (after 7.4.178)\nProblem:    The '[ mark is in the wrong position after \"gq\". (Ingo Karkat)\nSolution:   Add the setmark argument to do_join(). (Christian Brabandt)\nFiles:\t    src/testdir/Make_amiga.mak, src/testdir/Make_dos.mak,\n\t    src/testdir/Make_ming.mak, src/testdir/Make_os2.mak,\n\t    src/testdir/Make_vms.mms, src/testdir/Makefile,\n\t    src/testdir/test_autoformat_join.in,\n\t    src/testdir/test_autoformat_join.ok, src/Makefile, src/edit.c,\n\t    src/ex_cmds.c, src/ex_docmd.c, src/normal.c, src/ops.c,\n\t    src/proto/ops.pro\n\nPatch 7.4.268\nProblem:    Using exists() on a funcref for a script-local function does not\n\t    work.\nSolution:   Translate <SNR> to the special byte sequence.  Add a test.\nFiles:\t    src/eval.c, src/testdir/test_eval.in, src/testdir/test_eval.ok,\n\t    src/testdir/test_eval_func.vim, Filelist\n\nPatch 7.4.269\nProblem:    CTRL-U in Insert mode does not work after using a cursor key.\n\t    (Pine Wu)\nSolution:   Use the original insert start position. (Christian Brabandt)\nFiles:\t    src/edit.c, src/testdir/test29.in, src/testdir/test29.ok\n\nPatch 7.4.270\nProblem:    Comparing pointers instead of the string they point to.\nSolution:   Use strcmp(). (Ken Takata)\nFiles:\t    src/gui_gtk_x11.c\n\nPatch 7.4.271\nProblem:    Compiler warning on 64 bit windows.\nSolution:   Add type cast. (Mike Williams)\nFiles:\t    src/ops.c\n\nPatch 7.4.272\nProblem:    Using just \"$\" does not cause an error message.\nSolution:   Check for empty environment variable name. (Christian Brabandt)\nFiles:\t    src/eval.c, src/testdir/test_eval.in, src/testdir/test_eval.ok\n\nPatch 7.4.273\nProblem:    \"make autoconf\" and \"make reconfig\" may first run configure and\n\t    then remove the output.\nSolution:   Add these targets to the exceptions. (Ken Takata)\nFiles:\t    src/Makefile\n\nPatch 7.4.274\nProblem:    When doing \":update\" just before running an external command that\n\t    changes the file, the timestamp may be unchanged and the file\n\t    is not reloaded.\nSolution:   Also check the file size.\nFiles:\t    src/fileio.c\n\nPatch 7.4.275\nProblem:    When changing the type of a sign that hasn't been placed there is\n\t    no error message.\nSolution:   Add an error message. (Christian Brabandt)\nFiles:\t    src/ex_cmds.c\n\nPatch 7.4.276\nProblem:    The fish shell is not supported.\nSolution:   Use begin/end instead of () for fish. (Andy Russell)\nFiles:\t    src/ex_cmds.c, src/misc1.c, src/option.c, src/proto/misc1.pro\n\nPatch 7.4.277\nProblem:    Using \":sign unplace *\" may leave the cursor in the wrong position\n\t    (Christian Brabandt)\nSolution:   Update the cursor position when removing all signs.\nFiles:\t    src/buffer.c\n\nPatch 7.4.278\nProblem:    list_remove() conflicts with function defined in Sun header file.\nSolution:   Rename the function. (Richard Palo)\nFiles:\t    src/eval.c, src/if_lua.c, src/if_py_both.h, src/proto/eval.pro\n\nPatch 7.4.279\nProblem:    globpath() returns a string, making it difficult to get a list of\n\t    matches. (Greg Novack)\nSolution:   Add an optional argument like with glob(). (Adnan Zafar)\nFiles:\t    runtime/doc/eval.txt, src/eval.c, src/ex_getln.c, src/misc1.c,\n\t    src/misc2.c, src/proto/ex_getln.pro, src/proto/misc2.pro,\n\t    src/testdir/test97.in, src/testdir/test97.ok\n\nPatch 7.4.280\nProblem:    When using a session file the relative position of the cursor is\n\t    not restored if there is another tab. (Nobuhiro Takasaki)\nSolution:   Update w_wrow before calculating the fraction.\nFiles:\t    src/window.c\n\nPatch 7.4.281\nProblem:    When a session file has more than one tabpage and 'showtabline' is\n\t    one the positions may be slightly off.\nSolution:   Set 'showtabline' to two while positioning windows.\nFiles:\t    src/ex_docmd.c\n\nPatch 7.4.282 (after 7.4.279)\nProblem:    Test 97 fails on Mac.\nSolution:   Do not ignore case in file names. (Jun Takimoto)\nFiles:\t    src/testdir/test97.in\n\nPatch 7.4.283 (after 7.4.276)\nProblem:    Compiler warning about unused variable. (Charles Cooper)\nSolution:   Move the variable inside the #if block.\nFiles:\t    src/ex_cmds.c\n\nPatch 7.4.284\nProblem:    Setting 'langmap' in the modeline can cause trouble.  E.g. mapping\n\t    \":\" breaks many commands. (Jens-Wolfhard Schicke-Uffmann)\nSolution:   Disallow setting 'langmap' from the modeline.\nFiles:\t    src/option.c\n\nPatch 7.4.285\nProblem:    When 'relativenumber' is set and deleting lines or undoing that,\n\t    line numbers are not always updated. (Robert Arkwright)\nSolution:   (Christian Brabandt)\nFiles:\t    src/misc1.c\n\nPatch 7.4.286\nProblem:    Error messages are inconsistent. (ZyX)\nSolution:   Change \"Lists\" to \"list\".\nFiles:\t    src/eval.c\n\nPatch 7.4.287\nProblem:    Patches for .hgignore don't work, since the file is not in the\n\t    distribution.\nSolution:   Add .hgignore to the distribution.  Will be effective with the\n\t    next version.\nFiles:\t    Filelist\n\nPatch 7.4.288\nProblem:    When 'spellfile' is set the screen is not redrawn.\nSolution:   Redraw when updating the spelling info. (Christian Brabandt)\nFiles:\t    src/spell.c\n\nPatch 7.4.289\nProblem:    Pattern with repeated backreference does not match with new regexp\n\t    engine. (Urtica Dioica)\nSolution:   Also check the end of a submatch when deciding to put a state in\n\t    the state list.\nFiles:\t    src/testdir/test64.in, src/testdir/test64.ok, src/regexp_nfa.c\n\nPatch 7.4.290\nProblem:    A non-greedy match followed by a branch is too greedy. (Ingo\n\t    Karkat)\nSolution:   Add NFA_MATCH when it is already in the state list if the position\n\t    differs.\nFiles:\t    src/testdir/test64.in, src/testdir/test64.ok, src/regexp_nfa.c\n\nPatch 7.4.291\nProblem:    Compiler warning for int to pointer of different size when DEBUG\n\t    is defined.\nSolution:   use smsg() instead of EMSG3().\nFiles:\t    src/regexp.c\n\nPatch 7.4.292\nProblem:    Searching for \"a\" does not match accented \"a\" with new regexp\n\t    engine, does match with old engine. (David B\u00fcrgin)\n\t    \"ca\" does not match \"ca\" with accented \"a\" with either engine.\nSolution:   Change the old engine, check for following composing character\n\t    also for single-byte patterns.\nFiles:\t    src/regexp.c, src/testdir/test95.in, src/testdir/test95.ok\n\nPatch 7.4.293\nProblem:    It is not possible to ignore composing characters at a specific\n\t    point in a pattern.\nSolution:   Add the %C item.\nFiles:\t    src/regexp.c, src/regexp_nfa.c, src/testdir/test95.in,\n\t    src/testdir/test95.ok, runtime/doc/pattern.txt\n\nPatch 7.4.294 (7.4.293)\nProblem:    Test files missing from patch.\nSolution:   Patch the test files.\nFiles:\t    src/testdir/test95.in, src/testdir/test95.ok\n\nPatch 7.4.295\nProblem:    Various typos, bad white space and unclear comments.\nSolution:   Fix typos.  Improve white space. Update comments.\nFiles:\t    src/testdir/test49.in, src/macros.h, src/screen.c, src/structs.h,\n\t    src/gui_gtk_x11.c, src/os_unix.c\n\nPatch 7.4.296\nProblem:    Can't run tests on Solaris.\nSolution:   Change the way VIMRUNTIME is set. (Laurent Blume)\nFiles:\t    src/testdir/Makefile\n\nPatch 7.4.297\nProblem:    Memory leak from result of get_isolated_shell_name().\nSolution:   Free the memory. (Dominique Pelle)\nFiles:\t    src/ex_cmds.c, src/misc1.c\n\nPatch 7.4.298\nProblem:    Can't have a funcref start with \"t:\".\nSolution:   Add \"t\" to the list of accepted names. (Yukihiro Nakadaira)\nFiles:\t    src/eval.c\n\nPatch 7.4.299\nProblem:    When running configure twice DYNAMIC_PYTHON_DLL may become empty.\nSolution:   Use AC_CACHE_VAL. (Ken Takata)\nFiles:\t    src/configure.in, src/auto/configure\n\nPatch 7.4.300\nProblem:    The way config.cache is removed doesn't always work.\nSolution:   Always remove config.cache. (Ken Takata)\nFiles:\t    src/Makefile\n\nPatch 7.4.301 (after 7.4.280)\nProblem:    Still a scrolling problem when loading a session file.\nSolution:   Fix off-by-one mistake. (Nobuhiro Takasaki)\nFiles:\t    src/window.c\n\nPatch 7.4.302\nProblem:    Signs placed with 'foldcolumn' set don't show up after filler\n\t    lines.\nSolution:   Take filler lines into account. (Olaf Dabrunz)\nFiles:\t    src/screen.c\n\nPatch 7.4.303\nProblem:    When using double-width characters the text displayed on the\n\t    command line is sometimes truncated.\nSolution:   Reset the string length. (Nobuhiro Takasaki)\nFiles:\t    src/screen.c\n\nPatch 7.4.304\nProblem:    Cannot always use Python with Vim.\nSolution:   Add the manifest to the executable. (Jacques Germishuys)\nFiles:\t    src/Make_mvc.mak\n\nPatch 7.4.305\nProblem:    Making 'ttymouse' empty after the xterm version was requested\n\t    causes problems. (Elijah Griffin)\nSolution:   Do not check for DEC mouse sequences when the xterm version was\n\t    requested.  Also don't request the xterm version when DEC mouse\n\t    was enabled.\nFiles:\t    src/term.c, src/os_unix.c, src/proto/term.pro, src/globals.h\n\nPatch 7.4.306\nProblem:    getchar(0) does not return Esc.\nSolution:   Do not wait for an Esc sequence to be complete.  (Yasuhiro\n\t    Matsumoto)\nFiles:\t    src/eval.c, src/getchar.c\n\nPatch 7.4.307 (after 7.4.305)\nProblem:    Can't build without the +termresponse feature.\nSolution:   Add proper #ifdefs.\nFiles:\t    src/os_unix.c, src/term.c\n\nPatch 7.4.308\nProblem:    When using \":diffsplit\" on an empty file the cursor is displayed\n\t    on the command line.\nSolution:   Limit the value of w_topfill.\nFiles:\t    src/diff.c\n\nPatch 7.4.309\nProblem:    When increasing the size of the lower window, the upper window\n\t    jumps back to the top. (Ron Aaron)\nSolution:   Change setting the topline. (Nobuhiro Takasaki)\nFiles:\t    src/window.c\n\nPatch 7.4.310\nProblem:    getpos()/setpos() don't include curswant.\nSolution:   Add a fifth number when getting/setting the cursor.\nFiles:\t    src/eval.c, src/testdir/test_eval.in, src/testdir/test_eval.ok,\n\t    runtime/doc/eval.txt\n\nPatch 7.4.311\nProblem:    Can't use winrestview to only restore part of the view.\nSolution:   Handle missing items in the dict. (Christian Brabandt)\nFiles:\t    src/eval.c, runtime/doc/eval.txt\n\nPatch 7.4.312\nProblem:    Cannot figure out what argument list is being used for a window.\nSolution:   Add the arglistid() function. (Marcin Szamotulski)\nFiles:\t    runtime/doc/eval.txt, runtime/doc/usr_41.txt, src/eval.c,\n\t    src/ex_docmd.c, src/globals.h, src/structs.h, src/main.c\n\nPatch 7.4.313 (after 7.4.310)\nProblem:    Changing the return value of getpos() causes an error. (Jie Zhu)\nSolution:   Revert getpos() and add getcurpos().\nFiles:\t    src/eval.c, src/testdir/test_eval.in, src/testdir/test_eval.ok,\n\t    runtime/doc/eval.txt\n\nPatch 7.4.314\nProblem:    Completion messages can get in the way of a plugin.\nSolution:   Add 'c' flag to 'shortmess' option. (Shougo Matsu)\nFiles:\t    runtime/doc/options.txt, src/edit.c, src/option.h, src/screen.c\n\nPatch 7.4.315 (after 7.4.309)\nProblem:    Fixes for computation of topline not tested.\nSolution:   Add test. (Hirohito Higashi)\nFiles:\t    src/testdir/Make_amiga.mak, src/testdir/Make_dos.mak,\n\t    src/testdir/Make_ming.mak, src/testdir/Make_os2.mak,\n\t    src/testdir/Make_vms.mms, src/testdir/Makefile,\n\t    src/testdir/test107.in, src/testdir/test107.ok\n\nPatch 7.4.316\nProblem:    Warning from 64-bit compiler.\nSolution:   Add type cast. (Mike Williams)\nFiles:\t    src/ex_getln.c\n\nPatch 7.4.317\nProblem:    Crash when starting gvim.  Issue 230.\nSolution:   Check for a pointer to be NULL. (Christian Brabandt)\nFiles:\t    src/window.c\n\nPatch 7.4.318\nProblem:    Check for whether a highlight group has settings ignores fg and bg\n\t    color settings.\nSolution:   Also check cterm and GUI color settings. (Christian Brabandt)\nFiles:\t    src/syntax.c\n\nPatch 7.4.319\nProblem:    Crash when putting zero bytes on the clipboard.\nSolution:   Do not support the utf8_atom target when not using a Unicode\n\t    encoding. (Naofumi Honda)\nFiles:\t    src/ui.c\n\nPatch 7.4.320\nProblem:    Possible crash when an BufLeave autocommand deletes the buffer.\nSolution:   Check for the window pointer being valid.  Postpone freeing the\n\t    window until autocommands are done. (Yasuhiro Matsumoto)\nFiles:\t    src/buffer.c, src/fileio.c, src/globals.h, src/window.c\n\nPatch 7.4.321\nProblem:    Can't build with strawberry perl 5.20 + mingw-w64-4.9.0.\nSolution:   Define save_strlen. (Ken Takata)\nFiles:\t    src/if_perl.xs\n\nPatch 7.4.322\nProblem:    Using \"msgfmt\" is hard coded, cannot use \"gmsgfmt\".\nSolution:   Use the msgfmt command found by configure. (Danek Duvall)\nFiles:\t    src/config.mk.in, src/po/Makefile\n\nPatch 7.4.323\nProblem:    Substitute() with zero width pattern breaks multi-byte character.\nSolution:   Take multi-byte character size into account. (Yukihiro Nakadaira)\nFiles:\t    src/eval.c src/testdir/test69.in, src/testdir/test69.ok\n\nPatch 7.4.324\nProblem:    In Ex mode, cyrillic characters are not handled. (Stas Malavin)\nSolution:   Support multi-byte characters in Ex mode. (Yukihiro Nakadaira)\nFiles:\t    src/ex_getln.c\n\nPatch 7.4.325\nProblem:    When starting the gui and changing the window size the status line\n\t    may not be drawn correctly.\nSolution:   Catch new_win_height() being called recursively. (Christian\n\t    Brabandt)\nFiles:\t    src/window.c\n\nPatch 7.4.326\nProblem:    Can't build Tiny version. (Elimar Riesebieter)\nSolution:   Add #ifdef.\nFiles:\t    src/window.c\n\nPatch 7.4.327\nProblem:    When 'verbose' is set to display the return value of a function,\n\t    may get E724 repeatedly.\nSolution:   Do not give an error for verbose messages. Abort conversion to\n\t    string after an error.\nFiles:\t    src/eval.c\n\nPatch 7.4.328\nProblem:    Selection of inner block is inconsistent.\nSolution:   Skip indent not only for '}' but all parens. (Tom McDonald)\nFiles:\t    src/search.c\n\nPatch 7.4.329\nProblem:    When moving the cursor and then switching to another window the\n\t    previous window isn't scrolled. (Yukihiro Nakadaira)\nSolution:   Call update_topline() before leaving the window. (Christian\n\t    Brabandt)\nFiles:\t    src/window.c\n\nPatch 7.4.330\nProblem:    Using a regexp pattern to highlight a specific position can be\n\t    slow.\nSolution:   Add matchaddpos() to highlight specific positions efficiently.\n\t    (Alexey Radkov)\nFiles:\t    runtime/doc/eval.txt, runtime/doc/usr_41.txt,\n\t    runtime/plugin/matchparen.vim, src/eval.c, src/ex_docmd.c,\n\t    src/proto/window.pro, src/screen.c, src/structs.h,\n\t    src/testdir/test63.in, src/testdir/test63.ok, src/window.c\n\nPatch 7.4.331\nProblem:    Relative numbering not updated after a linewise yank.  Issue 235.\nSolution:   Redraw after the yank. (Christian Brabandt)\nFiles:\t    src/ops.c\n\nPatch 7.4.332\nProblem:    GTK: When a sign icon doesn't fit exactly there can be ugly gaps.\nSolution:   Scale the sign to fit when the aspect ratio is not too far off.\n\t    (Christian Brabandt)\nFiles:\t    src/gui_gtk_x11.c\n\nPatch 7.4.333\nProblem:    Compiler warning for unused function.\nSolution:   Put the function inside the #ifdef.\nFiles:\t    src/screen.c\n\nPatch 7.4.334 (after 7.4.330)\nProblem:    Uninitialized variables, causing some problems.\nSolution:   Initialize the variables. (Dominique Pelle)\nFiles:\t    src/screen.c, src/window.c\n\nPatch 7.4.335\nProblem:    No digraph for the new rouble sign.\nSolution:   Add the digraphs =R and =P.\nFiles:\t    src/digraph.c, runtime/doc/digraph.txt\n\nPatch 7.4.336\nProblem:    Setting 'history' to a big value causes out-of-memory errors.\nSolution:   Limit the value to 10000. (Hirohito Higashi)\nFiles:\t    runtime/doc/options.txt, src/option.c\n\nPatch 7.4.337\nProblem:    When there is an error preparing to edit the command line, the\n\t    command won't be executed. (Hirohito Higashi)\nSolution:   Reset did_emsg before editing.\nFiles:\t    src/ex_getln.c\n\nPatch 7.4.338\nProblem:    Cannot wrap lines taking indent into account.\nSolution:   Add the 'breakindent' option. (many authors, final improvements by\n\t    Christian Brabandt)\nFiles:\t    runtime/doc/eval.txt, runtime/doc/options.txt, runtime/optwin.vim,\n\t    src/buffer.c, src/charset.c, src/edit.c, src/ex_getln.c,\n\t    src/getchar.c, src/misc1.c, src/misc2.c, src/ops.c, src/option.c,\n\t    src/option.h, src/proto/charset.pro, src/proto/misc1.pro,\n\t    src/proto/option.pro, src/screen.c, src/structs.h,\n\t    src/testdir/Make_amiga.mak, src/testdir/Make_dos.mak,\n\t    src/testdir/Make_ming.mak, src/testdir/Make_os2.mak,\n\t    src/testdir/Make_vms.mms, src/testdir/Makefile,\n\t    src/testdir/test_breakindent.in, src/testdir/test_breakindent.ok,\n\t    src/ui.c, src/version.c\n\nPatch 7.4.339\nProblem:    Local function is available globally.\nSolution:   Add \"static\".\nFiles:\t    src/option.c, src/proto/option.pro\n\nPatch 7.4.340\nProblem:    Error from sed about illegal bytes when installing Vim.\nSolution:   Prepend LC_ALL=C. (Itchyny)\nFiles:\t    src/installman.sh\n\nPatch 7.4.341\nProblem:    sort() doesn't handle numbers well.\nSolution:   Add an argument to specify sorting on numbers. (Christian Brabandt)\nFiles:\t    runtime/doc/eval.txt, src/eval.c, src/testdir/test55.in,\n\t    src/testdir/test55.ok\n\nPatch 7.4.342\nProblem:    Clang gives warnings.\nSolution:   Add an else block. (Dominique Pelle)\nFiles:\t    src/gui_beval.c\n\nPatch 7.4.343\nProblem:    matchdelete() does not always update the right lines.\nSolution:   Fix off-by-one error.  (Ozaki Kiichi)\nFiles:\t    src/window.c\n\nPatch 7.4.344\nProblem:    Unnecessary initializations and other things related to\n\t    matchaddpos().\nSolution:   Code cleanup. (Alexey Radkov)\nFiles:\t    runtime/doc/eval.txt, src/screen.c, src/window.c\n\nPatch 7.4.345 (after 7.4.338)\nProblem:    Indent is not updated when deleting indent.\nSolution:   Remember changedtick.\nFiles:\t    src/misc1.c\n\nPatch 7.4.346 (after 7.4.338)\nProblem:    Indent is not updated when changing 'breakindentopt'. (itchyny)\nSolution:   Do not cache \"brishift\". (Christian Brabandt)\nFiles:\t    src/misc1.c\n\nPatch 7.4.347\nProblem:    test55 fails on some systems.\nSolution:   Remove the elements that all result in zero and can end up in an\n\t    arbitrary position.\nFiles:\t    src/testdir/test55.in, src/testdir/test55.ok\n\nPatch 7.4.348\nProblem:    When using \"J1\" in 'cinoptions' a line below a continuation line\n\t    gets too much indent.\nSolution:   Fix parentheses in condition.\nFiles:\t    src/misc1.c\n\nPatch 7.4.349\nProblem:    When there are matches to highlight the whole window is redrawn,\n\t    which is slow.\nSolution:   Only redraw everything when lines were inserted or deleted.\n\t    Reset b_mod_xlines when needed.  (Alexey Radkov)\nFiles:\t    src/screen.c, src/window.c\n\nPatch 7.4.350\nProblem:    Using C indenting for Javascript does not work well for a {} block\n\t    inside parentheses.\nSolution:   When looking for a matching paren ignore one that is before the\n\t    start of a {} block.\nFiles:\t    src/misc1.c, src/testdir/test3.in, src/testdir/test3.ok\n\nPatch 7.4.351\nProblem:    sort() is not stable.\nSolution:   When the items are identical, compare the pointers.\nFiles:\t    src/eval.c, src/testdir/test55.in, src/testdir/test55.ok\n\nPatch 7.4.352\nProblem:    With 'linebreak' a tab causes a missing line break.\nSolution:   Count a tab for what it's worth also for shorter lines.\n\t    (Christian Brabandt)\nFiles:\t    src/charset.c\n\nPatch 7.4.353\nProblem:    'linebreak' doesn't work with the 'list' option.\nSolution:   Make it work. (Christian Brabandt)\nFiles:\t    runtime/doc/options.txt, src/charset.c, src/screen.c,\n\t    src/testdir/Make_amiga.mak, src/testdir/Make_dos.mak,\n\t    src/testdir/Make_ming.mak, src/testdir/Make_os2.mak,\n\t    src/testdir/Make_vms.mms, src/testdir/Makefile,\n\t    src/testdir/test_listlbr.in, src/testdir/test_listlbr.ok\n\nPatch 7.4.354\nProblem:    Compiler warning.\nSolution:   Change NUL to NULL. (Ken Takata)\nFiles:\t    src/screen.c\n\nPatch 7.4.355\nProblem:    Several problems with Javascript indenting.\nSolution:   Improve Javascript indenting.\nFiles:\t    src/misc1.c, src/testdir/test3.in, src/testdir/test3.ok\n\nPatch 7.4.356\nProblem:    Mercurial does not ignore memfile_test. (Daniel Hahler)\nSolution:   Add memfile_test to ignored files, remove trailing spaces.\nFiles:\t    .hgignore\n\nPatch 7.4.357\nProblem:    After completion some characters are not redrawn.\nSolution:   Clear the command line unconditionally. (Jacob Niehus)\nFiles:\t    src/edit.c\n\nPatch 7.4.358 (after 7.4.351)\nProblem:    Sort is not always stable.\nSolution:   Add an index instead of relying on the pointer to remain the same.\n\t    Idea by Jun Takimoto.\nFiles:\t    src/eval.c\n\nPatch 7.4.359\nProblem:    When 'ttymouse' is set to 'uxterm' the xterm version is not\n\t    requested. (Tomas Janousek)\nSolution:   Do not mark uxterm as a conflict mouse and add\n\t    resume_get_esc_sequence().\nFiles:\t    src/term.c, src/os_unix.c, src/proto/term.pro\n\nPatch 7.4.360\nProblem:    In a regexp pattern a \"$\" followed by \\v or \\V is not seen as the\n\t    end-of-line.\nSolution:   Handle the situation. (Ozaki Kiichi)\nFiles:\t    src/regexp.c\n\nPatch 7.4.361\nProblem:    Lots of flickering when filling the preview window for 'omnifunc'.\nSolution:   Disable redrawing. (Hirohito Higashi)\nFiles:\t    src/popupmnu.c\n\nPatch 7.4.362\nProblem:    When matchaddpos() uses a length smaller than the number of bytes\n\t    in the (last) character the highlight continues until the end of\n\t    the line.\nSolution:   Change condition from equal to larger-or-equal.\nFiles:\t    src/screen.c\n\nPatch 7.4.363\nProblem:    In Windows console typing 0xCE does not work.\nSolution:   Convert 0xCE to K_NUL 3. (Nobuhiro Takasaki et al.)\nFiles:\t    src/os_win32.c, src/term.c\n\nPatch 7.4.364\nProblem:    When the viminfo file can't be renamed there is no error message.\n\t    (Vladimir Berezhnoy)\nSolution:   Check for the rename to fail.\nFiles:\t    src/ex_cmds.c\n\nPatch 7.4.365\nProblem:    Crash when using \":botright split\" when there isn't much space.\nSolution:   Add a check for the minimum width/height. (Yukihiro Nakadaira)\nFiles:\t    src/window.c\n\nPatch 7.4.366\nProblem:    Can't run the linebreak test on MS-Windows.\nSolution:   Fix the output file name. (Taro Muraoka)\nFiles:\t    src/testdir/Make_dos.mak\n\nPatch 7.4.367 (after 7.4.357)\nProblem:    Other solution for redrawing after completion.\nSolution:   Schedule a window redraw instead of just clearing the command\n\t    line. (Jacob Niehus)\nFiles:\t    src/edit.c\n\nPatch 7.4.368\nProblem:    Restoring the window sizes after closing the command line window\n\t    doesn't work properly if there are nested splits.\nSolution:   Restore the sizes twice. (Hirohito Higashi)\nFiles:\t    src/window.c\n\nPatch 7.4.369\nProblem:    Using freed memory when exiting while compiled with EXITFREE.\nSolution:   Set curwin to NULL and check for that. (Dominique Pelle)\nFiles:\t    src/buffer.c, src/window.c\n\nPatch 7.4.370\nProblem:    Linebreak test fails when encoding is not utf-8. (Danek Duvall)\nSolution:   Split the test in a single byte one and a utf-8 one. (Christian\n\t    Brabandt)\nFiles:\t    src/testdir/Make_amiga.mak, src/testdir/Make_dos.mak,\n\t    src/testdir/Make_ming.mak, src/testdir/Make_os2.mak,\n\t    src/testdir/Make_vms.mms, src/testdir/Makefile,\n\t    src/testdir/test_listlbr.in, src/testdir/test_listlbr.ok,\n\t    src/testdir/test_listlbr_utf8.in, src/testdir/test_listlbr_utf8.ok\n\nPatch 7.4.371\nProblem:    When 'linebreak' is set control characters are not correctly\n\t    displayed. (Kimmy Lindvall)\nSolution:   Set n_extra. (Christian Brabandt)\nFiles:\t    src/screen.c\n\nPatch 7.4.372\nProblem:    When 'winminheight' is zero there might not be one line for the\n\t    current window.\nSolution:   Change the size computations. (Yukihiro Nakadaira)\nFiles:\t    src/window.c\n\nPatch 7.4.373\nProblem:    Compiler warning for unused argument and unused variable.\nSolution:   Add UNUSED.  Move variable inside #ifdef.\nFiles:\t    src/charset.c, src/window.c\n\nPatch 7.4.374\nProblem:    Character after \"fb\" command not mapped if it might be a composing\n\t    character.\nSolution:   Don't disable mapping when looking for a composing character.\n\t    (Jacob Niehus)\nFiles:\t    src/normal.c\n\nPatch 7.4.375\nProblem:    Test 63 fails when run with GUI-only Vim.\nSolution:   Add guibg attributes. (suggested by Mike Soyka)\nFiles:\t    src/testdir/test63.in\n\nPatch 7.4.376 (after 7.4.367)\nProblem:    Popup menu flickers too much.\nSolution:   Remove the forced redraw. (Hirohito Higashi)\nFiles:\t    src/edit.c\n\nPatch 7.4.377\nProblem:    When 'equalalways' is set a split may report \"no room\" even though\n\t    there is plenty of room.\nSolution:   Compute the available room properly. (Yukihiro Nakadaira)\nFiles:\t    src/window.c\n\nPatch 7.4.378\nProblem:    Title of quickfix list is not kept for setqflist(list, 'r').\nSolution:   Keep the title.  Add a test. (Lcd)\nFiles:\t    src/quickfix.c, src/testdir/Make_amiga.mak,\n\t    src/testdir/Make_dos.mak, src/testdir/Make_ming.mak,\n\t    src/testdir/Make_os2.mak, src/testdir/Make_vms.mms,\n\t    src/testdir/Makefile, src/testdir/test_qf_title.in,\n\t    src/testdir/test_qf_title.ok\n\nPatch 7.4.379\nProblem:    Accessing freed memory after using setqflist(list, 'r'). (Lcd)\nSolution:   Reset qf_index.\nFiles:\t    src/quickfix.c\n\nPatch 7.4.380\nProblem:    Loading python may cause Vim to exit.\nSolution:   Avoid loading the \"site\" module. (Taro Muraoka)\nFiles:\t    src/if_python.c\n\nPatch 7.4.381\nProblem:    Get u_undo error when backspacing in Insert mode deletes more than\n\t    one line break. (Ayberk Ozgur)\nSolution:   Also decrement Insstart.lnum.\nFiles:\t    src/edit.c\n\nPatch 7.4.382\nProblem:    Mapping characters may not work after typing Esc in Insert mode.\nSolution:   Fix the noremap flags for inserted characters. (Jacob Niehus)\nFiles:\t    src/getchar.c\n\nPatch 7.4.383\nProblem:    Bad interaction between preview window and omnifunc.\nSolution:   Avoid redrawing the status line. (Hirohito Higashi)\nFiles:\t    src/popupmnu.c\n\nPatch 7.4.384\nProblem:    Test 102 fails when compiled with small features.\nSolution:   Source small.vim. (Jacob Niehus)\nFiles:\t    src/testdir/test102.in\n\nPatch 7.4.385\nProblem:    When building with tiny or small features building the .mo files\n\t    fails.\nSolution:   In autoconf do not setup for building the .mo files when it would\n\t    fail.\nFiles:\t    src/configure.in, src/auto/configure\n\nPatch 7.4.386\nProblem:    When splitting a window the changelist position is wrong.\nSolution:   Copy the changelist position. (Jacob Niehus)\nFiles:\t    src/window.c, src/testdir/Make_amiga.mak,\n\t    src/testdir/Make_dos.mak, src/testdir/Make_ming.mak,\n\t    src/testdir/Make_os2.mak, src/testdir/Make_vms.mms,\n\t    src/testdir/Makefile, src/testdir/test_changelist.in,\n\t    src/testdir/test_changelist.ok\n\nPatch 7.4.387\nProblem:    \"4gro\" replaces one character then executes \"ooo\". (Urtica Dioica)\nSolution:   Write the ESC in the second stuff buffer.\nFiles:\t    src/getchar.c, src/proto/getchar.pro, src/edit.c,\n\t    src/testdir/Make_amiga.mak, src/testdir/Make_dos.mak,\n\t    src/testdir/Make_ming.mak, src/testdir/Make_os2.mak,\n\t    src/testdir/Make_vms.mms, src/testdir/Makefile,\n\t    src/testdir/test_insertcount.in, src/testdir/test_insertcount.ok\n\nPatch 7.4.388\nProblem:    With 'linebreak' set and 'list' unset a Tab is not counted\n\t    properly. (Kent Sibilev)\nSolution:   Check the 'list' option. (Christian Brabandt)\nFiles:\t    src/screen.c, src/testdir/test_listlbr_utf8.in,\n\t    src/testdir/test_listlbr_utf8.ok\n\nPatch 7.4.389\nProblem:    Still sometimes Vim enters Replace mode when starting up.\nSolution:   Use a different solution in detecting the termresponse and\n\t    location response. (Hayaki Saito)\nFiles:\t    src/globals.h, src/os_unix.c, src/term.c, src/proto/term.pro\n\nPatch 7.4.390\nProblem:    Advancing pointer over end of a string.\nSolution:   Init quote character to -1 instead of zero. (Dominique Pelle)\nFiles:\t    src/misc1.c\n\nPatch 7.4.391\nProblem:    No 'cursorline' highlighting when the cursor is on a line with\n\t    diff highlighting. (Benjamin Fritz)\nSolution:   Combine the highlight attributes. (Christian Brabandt)\nFiles:\t    src/screen.c\n\nPatch 7.4.392\nProblem:    Not easy to detect type of command line window.\nSolution:   Add the getcmdwintype() function. (Jacob Niehus)\nFiles:\t    src/eval.c\n\nPatch 7.4.393\nProblem:    Text drawing on newer MS-Windows systems is suboptimal.  Some\n\t    multi-byte characters are not displayed, even though the same font\n\t    in Notepad can display them. (Srinath Avadhanula)\nSolution:   Add the 'renderoptions' option to enable DirectX drawing. (Taro\n\t    Muraoka)\nFiles:\t    runtime/doc/eval.txt, runtime/doc/options.txt,\n\t    runtime/doc/various.txt, src/Make_cyg.mak, src/Make_ming.mak,\n\t    src/Make_mvc.mak, src/eval.c, src/gui_dwrite.cpp,\n\t    src/gui_dwrite.h, src/gui_w32.c, src/gui_w48.c, src/option.c,\n\t    src/option.h, src/version.c, src/vim.h, src/proto/gui_w32.pro\n\nPatch 7.4.394 (after 7.4.393)\nProblem:    When using DirectX last italic character is incomplete.\nSolution:   Add one to the number of cells. (Ken Takata)\nFiles:\t    src/gui_w32.c\n\nPatch 7.4.395 (after 7.4.355)\nProblem:    C indent is wrong below an if with wrapped condition followed by\n\t    curly braces. (Trevor Powell)\nSolution:   Make a copy of tryposBrace.\nFiles:\t    src/misc1.c, src/testdir/test3.in, src/testdir/test3.ok\n\nPatch 7.4.396\nProblem:    When 'clipboard' is \"unnamed\", :g/pat/d is very slow. (Praful)\nSolution:   Only set the clipboard after the last delete. (Christian Brabandt)\nFiles:\t    src/ex_cmds.c, src/ex_cmds2.c, src/ex_docmd.c, src/globals.h,\n\t    src/ops.c, src/proto/ui.pro, src/ui.c\n\nPatch 7.4.397\nProblem:    Matchparen only uses the topmost syntax item.\nSolution:   Go through the syntax stack to find items. (James McCoy)\n\t    Also use getcurpos() when possible.\nFiles:\t    runtime/plugin/matchparen.vim\n\nPatch 7.4.398 (after 7.4.393)\nProblem:    Gcc error for the argument of InterlockedIncrement() and\n\t    InterlockedDecrement(). (Axel Bender)\nSolution:   Remove \"unsigned\" from the cRefCount_ declaration.\nFiles:\t    src/gui_dwrite.cpp\n\nPatch 7.4.399\nProblem:    Encryption implementation is messy.  Blowfish encryption has a\n\t    weakness.\nSolution:   Refactor the encryption, store the state in an allocated struct\n\t    instead of using a save/restore mechanism.  Introduce the\n\t    \"blowfish2\" method, which does not have the weakness and encrypts\n\t    the whole undo file. (largely by David Leadbeater)\nFiles:\t    runtime/doc/editing.txt, runtime/doc/options.txt, src/Makefile,\n\t    src/blowfish.c, src/crypt.c, src/crypt_zip.c, src/ex_docmd.c,\n\t    src/fileio.c, src/globals.h, src/main.c, src/memline.c,\n\t    src/misc2.c, src/option.c, src/proto.h, src/proto/blowfish.pro,\n\t    src/proto/crypt.pro, src/proto/crypt_zip.pro,\n\t    src/proto/fileio.pro, src/proto/misc2.pro, src/structs.h,\n\t    src/undo.c, src/testdir/test71.in, src/testdir/test71.ok,\n\t    src/testdir/test71a.in, src/testdir/test72.in,\n\t    src/testdir/test72.ok\n\nPatch 7.4.400\nProblem:    List of distributed files is incomplete.\nSolution:   Add recently added files.\nFiles:\t    Filelist\n\nPatch 7.4.401 (after 7.4.399)\nProblem:    Can't build on MS-Windows.\nSolution:   Include the new files in all the Makefiles.\nFiles:\t    src/Make_bc3.mak, src/Make_bc5.mak, src/Make_cyg.mak,\n\t    src/Make_dice.mak, src/Make_djg.mak, src/Make_ivc.mak,\n\t    src/Make_manx.mak, src/Make_ming.mak, src/Make_morph.mak,\n\t    src/Make_mvc.mak, src/Make_os2.mak, src/Make_sas.mak,\n\t    Make_vms.mms\n\nPatch 7.4.402\nProblem:    Test 72 crashes under certain conditions. (Kazunobu Kuriyama)\nSolution:   Clear the whole bufinfo_T early.\nFiles:\t    src/undo.c\n\nPatch 7.4.403\nProblem:    Valgrind reports errors when running test 72. (Dominique Pelle)\nSolution:   Reset the local 'cryptmethod' option before storing the seed.\n\t    Set the seed in the memfile even when there is no block0 yet.\nFiles:\t    src/fileio.c, src/option.c, src/memline.c\n\nPatch 7.4.404\nProblem:    Windows 64 bit compiler warnings.\nSolution:   Add type casts. (Mike Williams)\nFiles:\t    src/crypt.c, src/undo.c\n\nPatch 7.4.405\nProblem:    Screen updating is slow when using matches.\nSolution:   Do not use the \">=\" as in patch 7.4.362, check the lnum.\nFiles:\t    src/screen.c, src/testdir/test63.in, src/testdir/test63.ok\n\nPatch 7.4.406\nProblem:    Test 72 and 100 fail on MS-Windows.\nSolution:   Set fileformat to unix in the tests. (Taro Muraoka)\nFiles:\t    src/testdir/test72.in, src/testdir/test100.in\n\nPatch 7.4.407\nProblem:    Inserting text for Visual block mode, with cursor movement,\n\t    repeats the wrong text. (Aleksandar Ivanov)\nSolution:   Reset the update_Insstart_orig flag. (Christian Brabandt)\nFiles:\t    src/edit.c, src/testdir/test39.in, src/testdir/test39.ok\n\nPatch 7.4.408\nProblem:    Visual block insert breaks a multi-byte character.\nSolution:   Calculate the position properly. (Yasuhiro Matsumoto)\nFiles:\t    src/ops.c, src/testdir/test_utf8.in, src/testdir/test_utf8.ok,\n\t    src/testdir/Make_amiga.mak, src/testdir/Make_dos.mak,\n\t    src/testdir/Make_ming.mak, src/testdir/Make_os2.mak,\n\t    src/testdir/Make_vms.mms, src/testdir/Makefile\n\nPatch 7.4.409\nProblem:    Can't build with Perl on Fedora 20.\nSolution:   Find xsubpp in another directory. (Michael Henry)\nFiles:\t    src/Makefile, src/config.mk.in, src/configure.in,\n\t    src/auto/configure\n\nPatch 7.4.410\nProblem:    Fold does not open after search when there is a CmdwinLeave\n\t    autocommand.\nSolution:   Restore KeyTyped. (Jacob Niehus)\nFiles:\t    src/ex_getln.c\n\nPatch 7.4.411\nProblem:    \"foo bar\" sorts before \"foo\" with sort(). (John Little)\nSolution:   Avoid putting quotes around strings before comparing them.\nFiles:\t    src/eval.c\n\nPatch 7.4.412\nProblem:    Can't build on Windows XP with MSVC.\nSolution:   Add SUBSYSTEM_VER to the Makefile. (Yongwei Wu)\nFiles:\t    src/Make_mvc.mak, src/INSTALLpc.txt\n\nPatch 7.4.413\nProblem:    MS-Windows: Using US international keyboard layout, inserting dead\n\t    key by pressing space does not always work.  Issue 250.\nSolution:   Let MS-Windows translate the message. (John Wellesz)\nFiles:\t    src/gui_w48.c\n\nPatch 7.4.414\nProblem:    Cannot define a command only when it's used.\nSolution:   Add the CmdUndefined autocommand event. (partly by Yasuhiro\n\t    Matsumoto)\nFiles:\t    runtime/doc/autocmd.txt, src/ex_docmd.c, src/fileio.c,\n\t    src/proto/fileio.pro\n\nPatch 7.4.415 (after 7.4.414)\nProblem:    Cannot build.  Warning for shadowed variable. (John Little)\nSolution:   Add missing change.  Remove declaration.\nFiles:\t    src/vim.h, src/ex_docmd.c\n\nPatch 7.4.416\nProblem:    Problem with breakindent/showbreak and tabs.\nSolution:   Handle tabs differently. (Christian Brabandt)\nFiles:\t    src/testdir/test_breakindent.in, src/testdir/test_breakindent.ok,\n\t    src/charset.c\n\nPatch 7.4.417\nProblem:    After splitting a window and setting 'breakindent' the default\n\t    minimum with is not respected.\nSolution:   Call briopt_check() when copying options to a new window.\nFiles:\t    src/option.c, src/proto/option.pro,\n\t    src/testdir/test_breakindent.in\n\nPatch 7.4.418\nProblem:    When leaving \":append\" the cursor shape is like in Insert mode.\n\t    (Jacob Niehus)\nSolution:   Do not have State set to INSERT when calling getline().\nFiles:\t    src/ex_cmds.c\n\nPatch 7.4.419\nProblem:    When part of a list is locked it's possible to make changes.\nSolution:   Check if any of the list items is locked before make a change.\n\t    (ZyX)\nFiles:\t    src/eval.c, src/testdir/test55.in, src/testdir/test55.ok\n\nPatch 7.4.420\nProblem:    It's not obvious how to add a new test.\nSolution:   Add a README file. (Christian Brabandt)\nFiles:\t    src/testdir/README.txt\n\nPatch 7.4.421\nProblem:    Crash when searching for \"\\ze*\". (Urtica Dioica)\nSolution:   Disallow a multi after \\ze and \\zs.\nFiles:\t    src/regexp_nfa.c, src/testdir/test64.in, src/testdir/test64.ok\n\nPatch 7.4.422\nProblem:    When using conceal with linebreak some text is not displayed\n\t    correctly. (Gr\u00fcner Gimpel)\nSolution:   Check for conceal mode when using linebreak. (Christian Brabandt)\nFiles:\t    src/screen.c, src/testdir/test_listlbr.in,\n\t    src/testdir/test_listlbr.ok\n\nPatch 7.4.423\nProblem:    expand(\"$shell\") does not work as documented.\nSolution:   Do not escape the $ when expanding environment variables.\nFiles:\t    src/os_unix.c, src/misc1.c, src/vim.h\n\nPatch 7.4.424\nProblem:    Get ml_get error when using Python to delete lines in a buffer\n\t    that is not in a window.  issue 248.\nSolution:   Do not try adjusting the cursor for a different buffer.\nFiles:\t    src/if_py_both.h\n\nPatch 7.4.425\nProblem:    When 'showbreak' is used \"gj\" may move to the wrong position.\n\t    (Nazri Ramliy)\nSolution:   Adjust virtcol when 'showbreak' is set. (Christian Brabandt)\nFiles:\t    src/normal.c\n\nPatch 7.4.426\nProblem:    README File missing from list of files.\nSolution:   Update the list of files.\nFiles:\t    Filelist\n\nPatch 7.4.427\nProblem:    When an InsertCharPre autocommand executes system() typeahead may\n\t    be echoed and messes up the display. (Jacob Niehus)\nSolution:   Do not set cooked mode when invoked from \":silent\".\nFiles:\t    src/eval.c, runtime/doc/eval.txt\n\nPatch 7.4.428\nProblem:    executable() may return a wrong result on MS-Windows.\nSolution:   Change the way SearchPath() is called. (Yasuhiro Matsumoto, Ken\n\t    Takata)\nFiles:\t    src/os_win32.c\n\nPatch 7.4.429\nProblem:    Build fails with fewer features. (Elimar Riesebieter)\nSolution:   Add #ifdef.\nFiles:\t    src/normal.c\n\nPatch 7.4.430\nProblem:    test_listlbr fails when compiled with normal features.\nSolution:   Check for the +conceal feature.\nFiles:\t    src/testdir/test_listlbr.in\n\nPatch 7.4.431\nProblem:    Compiler warning.\nSolution:   Add type cast. (Mike Williams)\nFiles:\t    src/ex_docmd.c\n\nPatch 7.4.432\nProblem:    When the startup code expands command line arguments, setting\n\t    'encoding' will not properly convert the arguments.\nSolution:   Call get_cmd_argsW() early in main(). (Yasuhiro Matsumoto)\nFiles:\t    src/os_win32.c, src/main.c, src/os_mswin.c\n\nPatch 7.4.433\nProblem:    Test 75 fails on MS-Windows.\nSolution:   Use \":normal\" instead of feedkeys(). (Michael Soyka)\nFiles:\t    src/testdir/test75.in\n\nPatch 7.4.434\nProblem:    gettabvar() is not consistent with getwinvar() and getbufvar().\nSolution:   Return a dict with all variables when the varname is empty.\n\t    (Yasuhiro Matsumoto)\nFiles:\t    src/eval.c, runtime/doc/eval.txt, src/testdir/test91.in,\n\t    src/testdir/test91.ok\n\nPatch 7.4.435\nProblem:    Line formatting behaves differently when 'linebreak' is set.\n\t    (mvxxc)\nSolution:   Disable 'linebreak' temporarily. (Christian Brabandt)\nFiles:\t    src/edit.c\n\nPatch 7.4.436\nProblem:    ml_get error for autocommand that moves the cursor of the current\n\t    window.\nSolution:   Check the cursor position after switching back to the current\n\t    buffer.  (Christian Brabandt)\nFiles:\t    src/fileio.c\n\nPatch 7.4.437\nProblem:    New and old regexp engine are not consistent.\nSolution:   Also give an error for \"\\ze*\" for the old regexp engine.\nFiles:\t    src/regexp.c, src/regexp_nfa.c\n\nPatch 7.4.438\nProblem:    Cached values for 'cino' not reset for \":set all&\".\nSolution:   Call parse_cino(). (Yukihiro Nakadaira)\nFiles:\t    src/option.c\n\nPatch 7.4.439\nProblem:    Duplicate message in message history.  Some quickfix messages\n\t    appear twice. (Gary Johnson)\nSolution:   Do not reset keep_msg too early. (Hirohito Higashi)\nFiles:\t    src/main.c\n\nPatch 7.4.440\nProblem:    Omni complete popup drawn incorrectly.\nSolution:   Call validate_cursor() instead of check_cursor(). (Hirohito\n\t    Higashi)\nFiles:\t    src/edit.c\n\nPatch 7.4.441\nProblem:    Endless loop and other problems when 'cedit' is set to CTRL-C.\nSolution:   Do not call ex_window() when ex_normal_busy or got_int was set.\n\t    (Yasuhiro Matsumoto)\nFiles:\t    src/ex_getln.c\n\nPatch 7.4.442 (after 7.4.434)\nProblem:    Using uninitialized variable.\nSolution:   Pass the first window of the tabpage.\nFiles:\t    src/eval.c\n\nPatch 7.4.443\nProblem:    Error reported by ubsan when running test 72.\nSolution:   Add type cast to unsigned. (Dominique Pelle)\nFiles:\t    src/undo.c\n\nPatch 7.4.444\nProblem:    Reversed question mark not recognized as punctuation. (Issue 258)\nSolution:   Add the Supplemental Punctuation range.\nFiles:\t    src/mbyte.c\n\nPatch 7.4.445\nProblem:    Clipboard may be cleared on startup.\nSolution:   Set clip_did_set_selection to -1 during startup. (Christian\n\t    Brabandt)\nFiles:\t    src/main.c, src/ui.c\n\nPatch 7.4.446\nProblem:    In some situations, when setting up an environment to trigger an\n\t    autocommand, the environment is not properly restored.\nSolution:   Check the return value of switch_win() and call restore_win()\n\t    always.  (Daniel Hahler)\nFiles:\t    src/eval.c, src/misc2.c, src/window.c\n\nPatch 7.4.447\nProblem:    Spell files from Hunspell may generate a lot of errors.\nSolution:   Add the IGNOREEXTRA flag.\nFiles:\t    src/spell.c, runtime/doc/spell.txt\n\nPatch 7.4.448\nProblem:    Using ETO_IGNORELANGUAGE causes problems.\nSolution:   Remove this flag. (Paul Moore)\nFiles:\t    src/gui_w32.c\n\nPatch 7.4.449\nProblem:    Can't easily close the help window. (Chris Gaal)\nSolution:   Add \":helpclose\". (Christian Brabandt)\nFiles:\t    runtime/doc/helphelp.txt, runtime/doc/index.txt, src/ex_cmds.c,\n\t    src/ex_cmds.h, src/proto/ex_cmds.pro\n\nPatch 7.4.450\nProblem:    Not all commands that edit another buffer support the +cmd\n\t    argument.\nSolution:   Add the +cmd argument to relevant commands. (Marcin Szamotulski)\nFiles:\t    runtime/doc/windows.txt, src/ex_cmds.h, src/ex_docmd.c\n\nPatch 7.4.451\nProblem:    Calling system() with empty input gives an error for writing the\n\t    temp file.\nSolution:   Do not try writing if the string length is zero. (Olaf Dabrunz)\nFiles:\t    src/eval.c\n\nPatch 7.4.452\nProblem:    Can't build with tiny features. (Tony Mechelynck)\nSolution:   Use \"return\" instead of \"break\".\nFiles:\t    src/ex_cmds.c\n\nPatch 7.4.453\nProblem:    Still can't build with tiny features.\nSolution:   Add #ifdef.\nFiles:\t    src/ex_cmds.c\n\nPatch 7.4.454\nProblem:    When using a Visual selection of multiple words and doing CTRL-W_]\n\t    it jumps to the tag matching the word under the cursor, not the\n\t    selected text.  (Patrick hemmer)\nSolution:   Do not reset Visual mode. (idea by Christian Brabandt)\nFiles:\t    src/window.c\n\nPatch 7.4.455\nProblem:    Completion for :buf does not use 'wildignorecase'. (Akshay H)\nSolution:   Pass the 'wildignorecase' flag around.\nFiles:\t    src/buffer.c\n\nPatch 7.4.456\nProblem:    'backupcopy' is global, cannot write only some files in a\n\t    different way.\nSolution:   Make 'backupcopy' global-local. (Christian Brabandt)\nFiles:\t    runtime/doc/options.txt, src/buffer.c, src/fileio.c, src/option.c,\n\t    src/option.h, src/proto/option.pro, src/structs.h\n\nPatch 7.4.457\nProblem:    Using getchar() in an expression mapping may result in\n\t    K_CURSORHOLD, which can't be recognized.\nSolution:   Add the <CursorHold> key.  (Hirohito Higashi)\nFiles:\t    src/misc2.c\n\nPatch 7.4.458\nProblem:    Issue 252: Cursor moves in a zero-height window.\nSolution:   Check for zero height. (idea by Christian Brabandt)\nFiles:\t    src/move.c\n\nPatch 7.4.459\nProblem:    Can't change the icon after building Vim.\nSolution:   Load the icon from a file on startup. (Yasuhiro Matsumoto)\nFiles:\t    src/gui_w32.c, src/os_mswin.c, src/os_win32.c,\n\t    src/proto/os_mswin.pro\n\nPatch 7.4.460 (after 7.4.454)\nProblem:    Can't build without the quickfix feature. (Erik Falor)\nSolution:   Add a #ifdef.\nFiles:\t    src/window.c\n\nPatch 7.4.461\nProblem:    MS-Windows: When collate is on the number of copies is too high.\nSolution:   Only set the collated/uncollated count when collate is on.\n\t    (Yasuhiro Matsumoto)\nFiles:\t    src/os_mswin.c\n\nPatch 7.4.462\nProblem:    Setting the local value of 'backupcopy' empty gives an error.\n\t    (Peter Mattern)\nSolution:   When using an empty value set the flags to zero. (Hirohito\n\t    Higashi)\nFiles:\t    src/option.c\n\nPatch 7.4.463\nProblem:    Test 86 and 87 may hang on MS-Windows.\nSolution:   Call inputrestore() after inputsave(). (Ken Takata)\nFiles:\t    src/testdir/test86.in, src/testdir/test87.in\n\nPatch 7.4.464 (after 7.4.459)\nProblem:    Compiler warning.\nSolution:   Add type cast. (Ken Takata)\nFiles:\t    src/gui_w32.c\n\nPatch 7.4.465 (after 7.4.016)\nProblem:    Crash when expanding a very long string.\nSolution:   Use wcsncpy() instead of wcscpy(). (Ken Takata)\nFiles:\t    src/os_win32.c\n\nPatch 7.4.466 (after 7.4.460)\nProblem:    CTRL-W } does not open preview window. (Erik Falor)\nSolution:   Don't set g_do_tagpreview for CTRL-W }.\nFiles:\t    src/window.c\n\nPatch 7.4.467\nProblem:    'linebreak' does not work well together with Visual mode.\nSolution:   Disable 'linebreak' while applying an operator.  Fix the test.\n\t    (Christian Brabandt)\nFiles:\t    src/normal.c, src/screen.c, src/testdir/test_listlbr.in,\n\t    src/testdir/test_listlbr.ok\n\nPatch 7.4.468\nProblem:    Issue 26: CTRL-C does not interrupt after it was mapped and then\n\t    unmapped.\nSolution:   Reset mapped_ctrl_c. (Christian Brabandt)\nFiles:\t    src/getchar.c\n\nPatch 7.4.469 (after 7.4.467)\nProblem:    Can't build with MSVC. (Ken Takata)\nSolution:   Move the assignment after the declarations.\nFiles:\t    src/normal.c\n\nPatch 7.4.470\nProblem:    Test 11 and 100 do not work properly on Windows.\nSolution:   Avoid using feedkeys(). (Ken Takata)\nFiles:\t    src/testdir/Make_dos.mak, src/testdir/test11.in,\n\t    src/testdir/test100.in\n\nPatch 7.4.471\nProblem:    MS-Windows: When printer name contains multi-byte, the name is\n\t    displayed as ???.\nSolution:   Convert the printer name from the active codepage to 'encoding'.\n\t    (Yasuhiro Matsumoto)\nFiles:\t    src/os_mswin.c\n\nPatch 7.4.472\nProblem:    The \"precedes\" entry in 'listchar' will be drawn when 'showbreak'\n\t    is set and 'list' is not.\nSolution:   Only draw this character when 'list' is on. (Christian Brabandt)\nFiles:\t    src/screen.c\n\nPatch 7.4.473\nProblem:    Cursor movement is incorrect when there is a number/sign/fold\n\t    column and 'sbr' is displayed.\nSolution:   Adjust the column for 'sbr'. (Christian Brabandt)\nFiles:\t    src/charset.c\n\nPatch 7.4.474\nProblem:    AIX compiler can't handle // comment.  Issue 265.\nSolution:   Remove that line.\nFiles:\t    src/regexp_nfa.c\n\nPatch 7.4.475\nProblem:    Can't compile on a system where Xutf8SetWMProperties() is not in\n\t    the X11 library.  Issue 265.\nSolution:   Add a configure check.\nFiles:\t    src/configure.in, src/auto/configure, src/config.h.in,\n\t    src/os_unix.c\n\nPatch 7.4.476\nProblem:    MingW: compiling with \"XPM=no\" doesn't work.\nSolution:   Check for the \"no\" value. (KF Leong)  Also for Cygwin. (Ken\n\t    Takata)\nFiles:\t    src/Make_ming.mak, src/Make_cyg.mak\n\nPatch 7.4.477\nProblem:    When using \":%diffput\" and the other file is empty an extra empty\n\t    line remains.\nSolution:   Set the buf_empty flag.\nFiles:\t    src/diff.c\n\nPatch 7.4.478\nProblem:    Using byte length instead of character length for 'showbreak'.\nSolution:   Compute the character length. (Marco Hinz)\nFiles:\t    src/charset.c\n\nPatch 7.4.479\nProblem:    MS-Windows: The console title can be wrong.\nSolution:   Take the encoding into account. When restoring the title use the\n\t    right function. (Yasuhiro Matsumoto)\nFiles:\t    src/os_mswin.c, src/os_win32.c\n\nPatch 7.4.480 (after 7.4.479)\nProblem:    MS-Windows: Can't build.\nSolution:   Remove goto, use a flag instead.\nFiles:\t    src/os_win32.c\n\nPatch 7.4.481 (after 7.4.471)\nProblem:    Compiler warning on MS-Windows.\nSolution:   Add type casts. (Ken Takata)\nFiles:\t    src/os_mswin.c\n\nPatch 7.4.482\nProblem:    When 'balloonexpr' results in a list, the text has a trailing\n\t    newline. (Lcd)\nSolution:   Remove one trailing newline.\nFiles:\t    src/gui_beval.c\n\nPatch 7.4.483\nProblem:    A 0x80 byte is not handled correctly in abbreviations.\nSolution:   Unescape special characters. Add a test. (Christian Brabandt)\nFiles:\t    src/getchar.c, src/testdir/Make_amiga.mak,\n\t    src/testdir/Make_dos.mak, src/testdir/Make_ming.mak,\n\t    src/testdir/Make_os2.mak, src/testdir/Make_vms.mms,\n\t    src/testdir/Makefile, src/testdir/test_mapping.in,\n\t    src/testdir/test_mapping.ok\n\nPatch 7.4.484 (after 7.4.483)\nProblem:    Compiler warning on MS-Windows. (Ken Takata)\nSolution:   Add type cast.\nFiles:\t    src/getchar.c\n\nPatch 7.4.485 (after 7.4.484)\nProblem:    Abbreviations don't work. (Toothpik)\nSolution:   Move the length computation inside the for loop.  Compare against\n\t    the unescaped key.\nFiles:\t    src/getchar.c\n\nPatch 7.4.486\nProblem:    Check for writing to a yank register is wrong.\nSolution:   Negate the check. (Zyx).  Also clean up the #ifdefs.\nFiles:\t    src/ex_docmd.c, src/ex_cmds.h\n\nPatch 7.4.487\nProblem:    \":sign jump\" may use another window even though the file is\n\t    already edited in the current window.\nSolution:   First check if the file is in the current window. (James McCoy)\nFiles:\t    src/window.c, src/testdir/Make_amiga.mak,\n\t    src/testdir/Make_dos.mak, src/testdir/Make_ming.mak,\n\t    src/testdir/Make_os2.mak, src/testdir/Make_vms.mms,\n\t    src/testdir/Makefile, src/testdir/test_signs.in,\n\t    src/testdir/test_signs.ok\n\nPatch 7.4.488\nProblem:    test_mapping fails for some people.\nSolution:   Set the 'encoding' option. (Ken Takata)\nFiles:\t    src/testdir/test_mapping.in\n\nPatch 7.4.489\nProblem:    Cursor movement still wrong when 'lbr' is set and there is a\n\t    number column. (Hirohito Higashi)\nSolution:   Add correction for number column. (Hiroyuki Takagi)\nFiles:\t    src/charset.c\n\nPatch 7.4.490\nProblem:    Cannot specify the buffer to use for \"do\" and \"dp\", making them\n\t    useless for three-way diff.\nSolution:   Use the count as the buffer number. (James McCoy)\nFiles:\t    runtime/doc/diff.txt, src/diff.c, src/normal.c, src/proto/diff.pro\n\nPatch 7.4.491\nProblem:    When winrestview() has a negative \"topline\" value there are\n\t    display errors.\nSolution:   Correct a negative value to 1. (Hirohito Higashi)\nFiles:\t    src/eval.c\n\nPatch 7.4.492\nProblem:    In Insert mode, after inserting a newline that inserts a comment\n\t    leader, CTRL-O moves to the right. (ZyX) Issue 57.\nSolution:   Correct the condition for moving the cursor back to the NUL.\n\t    (Christian Brabandt)\nFiles:\t    src/edit.c, src/testdir/test4.in, src/testdir/test4.ok\n\nPatch 7.4.493\nProblem:    A TextChanged autocommand is triggered when saving a file.\n\t    (William Gardner)\nSolution:   Update last_changedtick after calling unchanged(). (Christian\n\t    Brabandt)\nFiles:\t    src/fileio.c\n\nPatch 7.4.494\nProblem:    Cursor shape is wrong after a CompleteDone autocommand.\nSolution:   Update the cursor and mouse shape after \":normal\" restores the\n\t    state. (Jacob Niehus)\nFiles:\t    src/ex_docmd.c\n\nPatch 7.4.495\nProblem:    XPM isn't used correctly in the Cygwin Makefile.\nSolution:   Include the rules like in Make_ming.mak. (Ken Takata)\nFiles:\t    src/Make_cyg.mak\n\nPatch 7.4.496\nProblem:    Many lines are both in Make_cyg.mak and Make_ming.mak\nSolution:   Move the common parts to one file. (Ken Takata)\nFiles:\t    src/INSTALLpc.txt, src/Make_cyg.mak, src/Make_cyg_ming.mak,\n\t    src/Make_ming.mak, src/Make_mvc.mak, Filelist\n\nPatch 7.4.497\nProblem:    With some regexp patterns the NFA engine uses many states and\n\t    becomes very slow.  To the user it looks like Vim freezes.\nSolution:   When the number of states reaches a limit fall back to the old\n\t    engine. (Christian Brabandt)\nFiles:\t    runtime/doc/options.txt, src/Makefile, src/regexp.c, src/regexp.h,\n\t    src/regexp_nfa.c, src/testdir/Make_dos.mak,\n\t    src/testdir/Make_ming.mak, src/testdir/Make_os2.mak,\n\t    src/testdir/Makefile, src/testdir/samples/re.freeze.txt,\n\t    src/testdir/bench_re_freeze.in, src/testdir/bench_re_freeze.vim,\n\t    Filelist\n\nPatch 7.4.498 (after 7.4.497)\nProblem:    Typo in DOS makefile.\nSolution:   Change exists to exist. (Ken Takata)\nFiles:\t    src/testdirMake_dos.mak\n\nPatch 7.4.499\nProblem:    substitute() can be slow with long strings.\nSolution:   Store a pointer to the end, instead of calling strlen() every\n\t    time. (Ozaki Kiichi)\nFiles:\t    src/eval.c\n\nPatch 7.4.500\nProblem:    Test 72 still fails once in a while.\nSolution:   Don't set 'fileformat' to unix, reset it. (Ken Takata)\nFiles:\t    src/testdir/test72.in\n\nPatch 7.4.501 (after 7.4.497)\nProblem:    Typo in file pattern.\nSolution:   Insert a slash and remove a dot.\nFiles:\t    Filelist\n\nPatch 7.4.502\nProblem:    Language mapping also applies to mapped characters.\nSolution:   Add the 'langnoremap' option, when on 'langmap' does not apply to\n\t    mapped characters. (Christian Brabandt)\nFiles:\t    runtime/doc/options.txt, runtime/vimrc_example.vim, src/macros.h,\n\t    src/option.c, src/option.h\n\nPatch 7.4.503\nProblem:    Cannot append a list of lines to a file.\nSolution:   Add the append option to writefile(). (Yasuhiro Matsumoto)\nFiles:\t    runtime/doc/eval.txt, src/Makefile, src/eval.c,\n\t    src/testdir/test_writefile.in, src/testdir/test_writefile.ok\n\nPatch 7.4.504\nProblem:    Restriction of the MS-Windows installer that the path must end in\n\t    \"Vim\" prevents installing more than one version.\nSolution:   Remove the restriction. (Tim Lebedkov)\nFiles:\t    nsis/gvim.nsi\n\nPatch 7.4.505\nProblem:    On MS-Windows when 'encoding' is a double-byte encoding a file\n\t    name longer than MAX_PATH bytes but shorter than that in\n\t    characters causes problems.\nSolution:   Fail on file names longer than MAX_PATH bytes. (Ken Takata)\nFiles:\t    src/os_win32.c\n\nPatch 7.4.506\nProblem:    MS-Windows: Cannot open a file with 259 characters.\nSolution:   Fix off-by-one error. (Ken Takata)\nFiles:\t    src/os_mswin.c\n\nPatch 7.4.507 (after 7.4.496)\nProblem:    Building with MingW and Perl.\nSolution:   Remove quotes. (Ken Takata)\nFiles:\t    src/Make_cyg_ming.mak\n\nPatch 7.4.508\nProblem:    When generating ja.sjis.po the header is not correctly adjusted.\nSolution:   Check for the right header string. (Ken Takata)\nFiles:\t    src/po/sjiscorr.c\n\nPatch 7.4.509\nProblem:    Users are not aware their encryption is weak.\nSolution:   Give a warning when prompting for the key.\nFiles:\t    src/crypt.c, src/ex_docmd.c, src/fileio.c, src/main.c,\n\t    src/proto/crypt.pro\n\nPatch 7.4.510\nProblem:    \"-fwrapv\" argument breaks use of cproto.\nSolution:   Remove the alphabetic arguments in a drastic way.\nFiles:\t    src/Makefile\n\nPatch 7.4.511\nProblem:    Generating proto for if_ruby.c uses type not defined elsewhere.\nSolution:   Do not generate a prototype for\n\t    rb_gc_writebarrier_unprotect_promoted()\nFiles:\t    src/if_ruby.c\n\nPatch 7.4.512\nProblem:    Cannot generate prototypes for Win32 files and VMS.\nSolution:   Add typedefs and #ifdef\nFiles:\t    src/os_win32.c, src/gui_w32.c, src/os_vms.c\n\nPatch 7.4.513\nProblem:    Crash because reference count is wrong for list returned by\n\t    getreg().\nSolution:   Increment the reference count. (Kimmy Lindvall)\nFiles:\t    src/eval.c\n\nPatch 7.4.514 (after 7.4.492)\nProblem:    Memory access error. (Dominique Pelle)\nSolution:   Update tpos. (Christian Brabandt)\nFiles:\t    src/edit.c\n\nPatch 7.4.515\nProblem:    In a help buffer the global 'foldmethod' is used.  (Paul Marshall)\nSolution:   Reset 'foldmethod' when starting to edit a help file.  Move the\n\t    code to a separate function.\nFiles:\t    src/ex_cmds.c\n\nPatch 7.4.516\nProblem:    Completing a function name containing a # does not work.  Issue\n\t    253.\nSolution:   Recognize the # character. (Christian Brabandt)\nFiles:\t    src/eval.c\n\nPatch 7.4.517\nProblem:    With a wrapping line the cursor may not end up in the right place.\n\t    (Nazri Ramliy)\nSolution:   Adjust n_extra for a Tab that wraps. (Christian Brabandt)\nFiles:\t    src/screen.c\n\nPatch 7.4.518\nProblem:    Using status line height in width computations.\nSolution:   Use one instead. (Hirohito Higashi)\nFiles:\t    src/window.c\n\nPatch 7.4.519 (after 7.4.497)\nProblem:    Crash when using syntax highlighting.\nSolution:   When regprog is freed and replaced, store the result.\nFiles:\t    src/buffer.c, src/regexp.c, src/syntax.c, src/spell.c,\n\t    src/ex_cmds2.c, src/fileio.c, src/proto/fileio.pro,\n\t    src/proto/regexp.pro, src/os_unix.c\n\nPatch 7.4.520\nProblem:    Sun PCK locale is not recognized.\nSolution:   Add PCK in the table. (Keiichi Oono)\nFiles:\t    src/mbyte.c\n\nPatch 7.4.521\nProblem:    When using \"vep\" a mark is moved to the next line. (Maxi Padulo,\n\t    Issue 283)\nSolution:   Decrement the line number. (Christian Brabandt)\nFiles:\t    src/ops.c\n\nPatch 7.4.522\nProblem:    Specifying wrong buffer size for GetLongPathName().\nSolution:   Use the actual size. (Ken Takata)\nFiles:\t    src/eval.c\n\nPatch 7.4.523\nProblem:    When the X11 server is stopped and restarted, while Vim is kept in\n\t    the background, copy/paste no longer works. (Issue 203)\nSolution:   Setup the clipboard again. (Christian Brabandt)\nFiles:\t    src/os_unix.c\n\nPatch 7.4.524\nProblem:    When using \":ownsyntax\" spell checking is messed up. (Issue 78)\nSolution:   Use the window-local option values. (Christian Brabandt)\nFiles:\t    src/option.c, src/syntax.c\n\nPatch 7.4.525\nProblem:    map() leaks memory when there is an error in the expression.\nSolution:   Call clear_tv(). (Christian Brabandt)\nFiles:\t    src/eval.c\n\nPatch 7.4.526\nProblem:    matchstr() fails on long text. (Daniel Hahler)\nSolution:   Return NFA_TOO_EXPENSIVE from regexec_nl(). (Christian Brabandt)\nFiles:\t    src/regexp.c\n\nPatch 7.4.527\nProblem:    Still confusing regexp failure and NFA_TOO_EXPENSIVE.\nSolution:   NFA changes equivalent of 7.4.526.\nFiles:\t    src/regexp_nfa.c\n\nPatch 7.4.528\nProblem:    Crash when using matchadd() (Yasuhiro Matsumoto)\nSolution:   Copy the match regprog.\nFiles:\t    src/screen.c\n\nPatch 7.4.529\nProblem:    No test for what 7.4.517 fixes.\nSolution:   Adjust the tests for breakindent. (Christian Brabandt)\nFiles:\t    src/testdir/test_breakindent.in, src/testdir/test_breakindent.ok\n\nPatch 7.4.530\nProblem:    Many commands take a count or range that is not using line\n\t    numbers.\nSolution:   For each command specify what kind of count it uses.  For windows,\n\t    buffers and arguments have \"$\" and \".\" have a relevant meaning.\n\t    (Marcin Szamotulski)\nFiles:\t    runtime/doc/editing.txt, runtime/doc/tabpage.txt,\n\t    runtime/doc/windows.txt, src/Makefile, src/ex_cmds.h,\n\t    src/ex_docmd.c, src/testdir/Make_amiga.mak\n\t    src/testdir/Make_dos.mak, src/testdir/Make_ming.mak,\n\t    src/testdir/Make_os2.mak, src/testdir/Make_vms.mms,\n\t    src/testdir/Makefile, src/testdir/test_argument_count.in,\n\t    src/testdir/test_argument_count.ok,\n\t    src/testdir/test_close_count.in, src/testdir/test_close_count.ok,\n\t    src/window.c\n\nPatch 7.4.531\nProblem:    Comments about parsing an Ex command are wrong.\nSolution:   Correct the step numbers.\nFiles:\t    src/ex_docmd.c\n\nPatch 7.4.532\nProblem:    When using 'incsearch' \"2/pattern/e\" highlights the first match.\nSolution:   Move the code to set extra_col inside the loop for count.  (Ozaki\n\t    Kiichi)\nFiles:\t    src/search.c\n\nPatch 7.4.533\nProblem:    \":hardcopy\" leaks memory in case of errors.\nSolution:   Free memory in all code paths. (Christian Brabandt)\nFiles:\t    src/hardcopy.c\n\nPatch 7.4.534\nProblem:    Warnings when compiling if_ruby.c.\nSolution:   Avoid the warnings. (Ken Takata)\nFiles:\t    src/if_ruby.c\n\nPatch 7.4.535 (after 7.4.530)\nProblem:    Can't build with tiny features.\nSolution:   Add #ifdefs and skip a test.\nFiles:\t    src/ex_docmd.c, src/testdir/test_argument_count.in\n\nPatch 7.4.536\nProblem:    Test 63 fails when using a black&white terminal.\nSolution:   Add attributes for a non-color terminal. (Christian Brabandt)\nFiles:\t    src/testdir/test63.in\n\nPatch 7.4.537\nProblem:    Value of v:hlsearch reflects an internal variable.\nSolution:   Make the value reflect whether search highlighting is actually\n\t    displayed. (Christian Brabandt)\nFiles:\t    runtime/doc/eval.txt, src/testdir/test101.in,\n\t    src/testdir/test101.ok, src/vim.h\n\nPatch 7.4.538\nProblem:    Tests fail with small features plus Python.\nSolution:   Disallow weird combination of options.  Do not set \"fdm\" when\n\t    folding is disabled.\nFiles:\t    src/option.c, src/ex_cmds.c, src/configure.in, src/auto/configure,\n\t    src/feature.h\n\nPatch 7.4.539 (after 7.4.530)\nProblem:    Crash when computing buffer count.  Problem with range for user\n\t    commands.  Line range wrong in Visual area.\nSolution:   Avoid segfault in compute_buffer_local_count().  Check for\n\t    CMD_USER when checking type of range. (Marcin Szamotulski)\nFiles:\t    runtime/doc/windows.txt, src/ex_docmd.c\n\nPatch 7.4.540 (after 7.4.539)\nProblem:    Cannot build with tiny and small features. (Taro Muraoka)\nSolution:   Add #ifdef around CMD_USER.\nFiles:\t    src/ex_docmd.c\n\nPatch 7.4.541\nProblem:    Crash when doing a range assign.\nSolution:   Check for NULL pointer. (Yukihiro Nakadaira)\nFiles:\t    src/eval.c, src/testdir/test55.in, src/testdir/test55.ok\n\nPatch 7.4.542\nProblem:    Using a range for window and buffer commands has a few problems.\n\t    Cannot specify the type of range for a user command.\nSolution:   Add the -addr argument for user commands.  Fix problems. (Marcin\n\t    Szamotulski)\nFiles:\t    src/testdir/test_command_count.in,\n\t    src/testdir/test_command_count.ok src/testdir/Make_amiga.mak\n\t    src/testdir/Make_dos.mak, src/testdir/Make_ming.mak,\n\t    src/testdir/Make_os2.mak, src/testdir/Make_vms.mms,\n\t    src/testdir/Makefile, runtime/doc/map.txt, src/Makefile,\n\t    src/ex_cmds.h, src/ex_docmd.c, src/ex_getln.c,\n\t    src/proto/ex_docmd.pro, src/vim.h,\n\nPatch 7.4.543\nProblem:    Since patch 7.4.232 \"1,3s/\\n//\" joins two lines instead of three.\n\t    (Eliseo Mart\u00ednez)  Issue 287\nSolution:   Correct the line count. (Christian Brabandt)\n\t    Also set the last used search pattern.\nFiles:\t    src/ex_cmds.c, src/search.c, src/proto/search.pro\n\nPatch 7.4.544\nProblem:    Warnings for unused arguments when compiling with a combination of\n\t    features.\nSolution:   Add \"UNUSED\".\nFiles:\t    src/if_cscope.c\n\nPatch 7.4.545\nProblem:    Highlighting for multi-line matches is not correct.\nSolution:   Stop highlight at the end of the match. (Hirohito Higashi)\nFiles:\t    src/screen.c\n\nPatch 7.4.546\nProblem:    Repeated use of vim_snprintf() with a number.\nSolution:   Move these vim_snprintf() calls into a function.\nFiles:\t    src/window.c\n\nPatch 7.4.547\nProblem:    Using \"vit\" does not select a multi-byte character at the end\n\t    correctly.\nSolution:   Advance the cursor over the multi-byte character. (Christian\n\t    Brabandt)\nFiles:\t    src/search.c\n\nPatch 7.4.548\nProblem:    Compilation fails with native version of MinGW-w64, because\n\t    it doesn't have x86_64-w64-mingw32-windres.exe.\nSolution:   Use windres instead. (Ken Takata)\nFiles:\t    src/Make_cyg_ming.mak\n\nPatch 7.4.549\nProblem:    Function name not recognized correctly when inside a function.\nSolution:   Don't check for an alpha character. (Ozaki Kiichi)\nFiles:\t    src/eval.c, src/testdir/test_nested_function.in,\n\t    src/testdir/test_nested_function.ok, src/testdir/Make_amiga.mak,\n\t    src/testdir/Make_dos.mak, src/testdir/Make_ming.mak,\n\t    src/testdir/Make_os2.mak, src/testdir/Make_vms.mms,\n\t    src/testdir/Makefile\n\nPatch 7.4.550\nProblem:    curs_rows() function is always called with the second argument\n\t    false.\nSolution:   Remove the argument. (Christian Brabandt)\n\t    validate_botline_win() can then also be removed.\nFiles:\t    src/move.c\n\nPatch 7.4.551\nProblem:    \"ygn\" may yank too much. (Fritzophrenic)  Issue 295.\nSolution:   Check the width of the next match. (Christian Brabandt)\nFiles:\t    src/search.c, src/testdir/test53.in, src/testdir/test53.ok\n\nPatch 7.4.552\nProblem:    Langmap applies to Insert mode expression mappings.\nSolution:   Check for Insert mode. (Daniel Hahler)\nFiles:\t    src/getchar.c, src/testdir/test_mapping.in,\n\t    src/testdir/test_mapping.ok\n\nPatch 7.4.553\nProblem:    Various small issues.\nSolution:   Fix those issues.\nFiles:\t    src/ex_cmds.h, src/gui.h, src/message.c, src/testdir/test39.in,\n\t    src/proto/eval.pro, src/proto/misc1.pro, src/proto/ops.pro,\n\t    src/proto/screen.pro, src/proto/window.pro. src/os_unix.c,\n\t    src/Make_vms.mms, src/proto/os_vms.pro, src/INSTALL\n\nPatch 7.4.554\nProblem:    Missing part of patch 7.4.519.\nSolution:   Copy back regprog after calling vim_regexec.\nFiles:\t    src/quickfix.c\n\nPatch 7.4.555\nProblem:    test_close_count may fail for some combination of features.\nSolution:   Require normal features.\nFiles:\t    src/testdir/test_close_count.in\n\nPatch 7.4.556\nProblem:    Failed commands in Python interface not handled correctly.\nSolution:   Restore window and buffer on failure.\nFiles:\t    src/if_py_both.h\n\nPatch 7.4.557\nProblem:    One more small issue.\nSolution:   Update function proto.\nFiles:\t    src/proto/window.pro\n\nPatch 7.4.558\nProblem:    When the X server restarts Vim may get stuck.\nSolution:   Destroy the application context and create it again.  (Issue 203)\nFiles:\t    src/os_unix.c\n\nPatch 7.4.559\nProblem:    Appending a block in the middle of a tab does not work correctly\n\t    when virtualedit is set.\nSolution:   Decrement spaces and count, don't reset them. (James McCoy)\nFiles:\t    src/ops.c, src/testdir/test39.in, src/testdir/test39.ok\n\nPatch 7.4.560\nProblem:    Memory leak using :wviminfo. Issue 296.\nSolution:   Free memory when needed. (idea by Christian Brabandt)\nFiles:\t    src/ops.c\n\nPatch 7.4.561\nProblem:    Ex range handling is wrong for buffer-local user commands.\nSolution:   Check for CMD_USER_BUF. (Marcin Szamotulski)\nFiles:\t    src/ex_docmd.c, src/testdir/test_command_count.in,\n\t    src/testdir/test_command_count.ok\n\nPatch 7.4.562\nProblem:    Segfault with wide screen and error in 'rulerformat'. (Ingo Karkat)\nSolution:   Check there is enough space. (Christian Brabandt)\nFiles:\t    src/buffer.c, src/screen.c\n\nPatch 7.4.563\nProblem:    No test for replacing on a tab in Virtual replace mode.\nSolution:   Add a test. (Elias Diem)\nFiles:\t    src/testdir/test48.in, src/testdir/test48.ok\n\nPatch 7.4.564\nProblem:    FEAT_OSFILETYPE is used even though it's never defined.\nSolution:   Remove the code. (Christian Brabandt)\nFiles:\t    src/fileio.c\n\nPatch 7.4.565\nProblem:    Ranges for arguments, buffers, tabs, etc. are not checked to be\n\t    valid but limited to the maximum.  This can cause the wrong thing\n\t    to happen.\nSolution:   Give an error for an invalid value. (Marcin Szamotulski)\n\t    Use windows range for \":wincmd\".\nFiles:\t    src/ex_docmd.c, src/ex_cmds.h, src/testdir/test62.in,\n\t    src/testdir/test_argument_count.in,\n\t    src/testdir/test_argument_count.ok,\n\t    src/testdir/test_close_count.in,\n\t    src/testdir/test_command_count.in,\n\t    src/testdir/test_command_count.ok\n\nPatch 7.4.566\nProblem:    :argdo, :bufdo, :windo and :tabdo don't take a range.\nSolution:   Support the range. (Marcin Szamotulski)\nFiles:\t    runtime/doc/editing.txt, runtime/doc/tabpage.txt,\n\t    runtime/doc/windows.txt, src/ex_cmds.h, src/ex_cmds2.c,\n\t    src/testdir/test_command_count.in,\n\t    src/testdir/test_command_count.ok\n\nPatch 7.4.567\nProblem:    Non-ascii vertical separator characters are always redrawn.\nSolution:   Compare only the one byte that's stored. (Thiago Padilha)\nFiles:\t    src/screen.c\n\nPatch 7.4.568\nProblem:    Giving an error for \":0wincmd w\" is a problem for some plugins.\nSolution:   Allow the zero in the range. (Marcin Szamotulski)\nFiles:\t    src/ex_docmd.c, src/testdir/test_command_count.ok\n\nPatch 7.4.569 (after 7.4.468)\nProblem:    Having CTRL-C interrupt or not does not check the mode of the\n\t    mapping. (Ingo Karkat)\nSolution:   Use a bitmask with the map mode. (Christian Brabandt)\nFiles:\t    src/getchar.c, src/structs.h, src/testdir/test_mapping.in,\n\t    src/testdir/test_mapping.ok, src/ui.c, src/globals.h\n\nPatch 7.4.570\nProblem:    Building with dynamic library does not work for Ruby 2.2.0\nSolution:   Change #ifdefs and #defines. (Ken Takata)\nFiles:\t    src/if_ruby.c\n\nPatch 7.4.571 (after 7.4.569)\nProblem:    Can't build with tiny features. (Ike Devolder)\nSolution:   Add #ifdef.\nFiles:\t    src/getchar.c\n\nPatch 7.4.572\nProblem:    Address type of :wincmd depends on the argument.\nSolution:   Check the argument.\nFiles:\t    src/ex_docmd.c, src/window.c, src/proto/window.pro\n\nPatch 7.4.573 (after 7.4.569)\nProblem:    Mapping CTRL-C in Visual mode doesn't work. (Ingo Karkat)\nSolution:   Call get_real_state() instead of using State directly.\nFiles:\t    src/ui.c, src/testdir/test_mapping.in, src/testdir/test_mapping.ok\n\nPatch 7.4.574\nProblem:    No error for eval('$').\nSolution:   Check for empty name. (Yasuhiro Matsumoto)\nFiles:\t    src/eval.c\n\nPatch 7.4.575\nProblem:    Unicode character properties are outdated.\nSolution:   Update the tables with the latest version.\nFiles:\t    src/mbyte.c\n\nPatch 7.4.576\nProblem:    Redrawing problem with 'relativenumber' and 'linebreak'.\nSolution:   Temporarily reset 'linebreak' and restore it in more places.\n\t    (Christian Brabandt)\nFiles:\t    src/normal.c\n\nPatch 7.4.577\nProblem:    Matching with a virtual column has a lot of overhead on very long\n\t    lines. (Issue 310)\nSolution:   Bail out early if there can't be a match. (Christian Brabandt)\n\t    Also check for CTRL-C at every position.\nFiles:\t    src/regexp_nfa.c\n\nPatch 7.4.578\nProblem:    Using getcurpos() after \"$\" in an empty line returns a negative\n\t    number.\nSolution:   Don't add one when this would overflow. (Hirohito Higashi)\nFiles:\t    src/eval.c\n\nPatch 7.4.579\nProblem:    Wrong cursor positioning when 'linebreak' is set and lines wrap. \nSolution:   Fix it. (Christian Brabandt)\nFiles:\t    src/charset.c, src/screen.c\n\nPatch 7.4.580\nProblem:    \":52wincmd v\" still gives an invalid range error. (Charles\n\t    Campbell)\nSolution:   Skip over white space.\nFiles:\t    src/ex_docmd.c\n\nPatch 7.4.581\nProblem:    Compiler warnings for uninitialized variables. (John Little)\nSolution:   Initialize the variables.\nFiles:\t    src/ops.c\n\nPatch 7.4.582 (after 7.4.577)\nProblem:    Can't match \"%>80v\" properly. (Axel Bender)\nSolution:   Correctly handle \">\". (Christian Brabandt)\nFiles:\t    src/regexp_nfa.c, src/testdir/test64.in, src/testdir/test64.ok\n\nPatch 7.4.583\nProblem:    With tiny features test 16 may fail.\nSolution:   Source small.vim. (Christian Brabandt)\nFiles:\t    src/testdir/test16.in\n\nPatch 7.4.584\nProblem:    With tiny features test_command_count may fail.\nSolution:   Source small.vim. (Christian Brabandt)\nFiles:\t    src/testdir/test_command_count.in\n\nPatch 7.4.585\nProblem:    Range for :bdelete does not work. (Ronald Schild)\nSolution:   Also allow unloaded buffers.\nFiles:\t    src/ex_cmds.h, src/testdir/test_command_count.in,\n\t    src/testdir/test_command_count.ok\n\nPatch 7.4.586\nProblem:    Parallel building of the documentation html files is not reliable. \nSolution:   Remove a cyclic dependency. (Reiner Herrmann)\nFiles:\t    runtime/doc/Makefile\n\nPatch 7.4.587\nProblem:    Conceal does not work properly with 'linebreak'. (cs86661)\nSolution:   Save and restore boguscols. (Christian Brabandt)\nFiles:\t    src/screen.c, src/testdir/test_listlbr_utf8.in,\n\t    src/testdir/test_listlbr_utf8.ok\n\nPatch 7.4.588\nProblem:    \":0argedit foo\" puts the new argument in the second place instead\n\t    of the first.\nSolution:   Adjust the range type. (Ingo Karkat)\nFiles:\t    src/ex_cmds.h, src/testdir/Make_amiga.mak,\n\t    src/testdir/Make_dos.mak, src/testdir/Make_ming.mak,\n\t    src/testdir/Make_os2.mak, src/testdir/Make_vms.mms,\n\t    src/testdir/Makefile, src/testdir/test_argument_0count.in,\n\t    src/testdir/test_argument_0count.ok\n\nPatch 7.4.589\nProblem:    In the MS-Windows console Vim can't handle greek characters when\n\t    encoding is utf-8.\nSolution:   Escape K_NUL. (Yasuhiro Matsumoto)\nFiles:\t    src/os_win32.c\n\nPatch 7.4.590\nProblem:    Using ctrl_x_mode as if it contains flags.\nSolution:   Don't use AND with CTRL_X_OMNI. (Hirohito Higashi)\nFiles:\t    src/edit.c\n\nPatch 7.4.591 (after 7.4.587)\nProblem:    test_listlbr_utf8 fails when the conceal feature is not available.\nSolution:   Check for the conceal feature. (Kazunobu Kuriyama)\nFiles:\t    src/testdir/test_listlbr_utf8.in\n\nPatch 7.4.592\nProblem:    When doing \":e foobar\" when already editing \"foobar\" and 'buftype'\n\t    is \"nofile\" the buffer is cleared. (Xavier de Gaye)\nSolution:   Do no clear the buffer.\nFiles:\t    src/ex_cmds.c\n\nPatch 7.4.593\nProblem:    Crash when searching for \"x\\{0,90000}\". (Dominique Pelle)\nSolution:   Bail out from the NFA engine when the max limit is much higher\n\t    than the min limit.\nFiles:\t    src/regexp_nfa.c, src/regexp.c, src/vim.h\n\nPatch 7.4.594\nProblem:    Using a block delete while 'breakindent' is set does not work\n\t    properly.\nSolution:   Use \"line\" instead of \"prev_pend\" as the first argument to\n\t    lbr_chartabsize_adv().  (Hirohito Higashi)\nFiles:\t    src/ops.c, src/testdir/test_breakindent.in,\n\t    src/testdir/test_breakindent.ok\n\nPatch 7.4.595\nProblem:    The test_command_count test fails when using Japanese.\nSolution:   Force the language to C. (Hirohito Higashi)\nFiles:\t    src/testdir/test_command_count.in\n\nPatch 7.4.596 (after 7.4.592)\nProblem:    Tiny build doesn't compile.  (Ike Devolder)\nSolution:   Add #ifdef.\nFiles:\t    src/ex_cmds.c\n\nPatch 7.4.597\nProblem:    Cannot change the result of systemlist().\nSolution:   Initialize v_lock. (Yukihiro Nakadaira)\nFiles:\t    src/eval.c\n\nPatch 7.4.598\nProblem:    \":tabdo windo echo 'hi'\" causes \"* register not to be changed.\n\t    (Salman Halim)\nSolution:   Change how clip_did_set_selection is used and add\n\t    clipboard_needs_update and global_change_count.  (Christian\n\t    Brabandt)\nFiles:\t    src/main.c, src/ui.c, src/testdir/test_eval.in,\n\t    src/testdir/test_eval.ok\n\nPatch 7.4.599\nProblem:    Out-of-memory error.\nSolution:   Avoid trying to allocate a negative amount of memory, use size_t\n\t    instead of int. (Dominique Pelle)\nFiles:\t    src/regexp_nfa.c\n\nPatch 7.4.600\nProblem:    Memory wasted in struct because of aligning.\nSolution:   Split pos in lnum and col. (Dominique Pelle)\nFiles:\t    src/regexp_nfa.c\n\nPatch 7.4.601\nProblem:    It is not possible to have feedkeys() insert characters.\nSolution:   Add the 'i' flag.\nFiles:\t    src/eval.c, runtime/doc/eval.txt\n\nPatch 7.4.602\nProblem:    \":set\" does not accept hex numbers as documented.\nSolution:   Use vim_str2nr(). (ZyX)\nFiles:\t    src/option.c, runtime/doc/options.txt\n\nPatch 7.4.603\nProblem:    'foldcolumn' may be set such that it fills the whole window, not\n\t    leaving space for text.\nSolution:   Reduce the foldcolumn width when there is not sufficient room.\n\t    (idea by Christian Brabandt)\nFiles:\t    src/screen.c\n\nPatch 7.4.604\nProblem:    Running tests changes viminfo.\nSolution:   Disable viminfo.\nFiles:\t    src/testdir/test_breakindent.in\n\nPatch 7.4.605\nProblem:    The # register is not writable, it cannot be restored after\n\t    jumping around.\nSolution:   Make the # register writable. (Marcin Szamotulski)\nFiles:\t    runtime/doc/change.txt, src/ops.c, src/buffer.c, src/globals.h\n\nPatch 7.4.606\nProblem:    May crash when using a small window.\nSolution:   Avoid dividing by zero. (Christian Brabandt)\nFiles:\t    src/normal.c\n\nPatch 7.4.607 (after 7.4.598)\nProblem:    Compiler warnings for unused variables.\nSolution:   Move them inside #ifdef. (Kazunobu Kuriyama)\nFiles:\t    src/ui.c\n\nPatch 7.4.608 (after 7.4.598)\nProblem:    test_eval fails when the clipboard feature is missing.\nSolution:   Skip part of the test. Reduce the text used.\nFiles:\t    src/testdir/test_eval.in, src/testdir/test_eval.ok\n\nPatch 7.4.609\nProblem:    For complicated list and dict use the garbage collector can run\n\t    out of stack space.\nSolution:   Use a stack of dicts and lists to be marked, thus making it\n\t    iterative instead of recursive. (Ben Fritz)\nFiles:\t    src/eval.c, src/if_lua.c, src/if_py_both.h, src/if_python.c,\n\t    src/if_python3.c, src/proto/eval.pro, src/proto/if_lua.pro,\n\t    src/proto/if_python.pro, src/proto/if_python3.pro, src/structs.h\n\nPatch 7.4.610\nProblem:    Some function headers may be missing from generated .pro files.\nSolution:   Add PROTO to the #ifdef.\nFiles:\t    src/option.c, src/syntax.c\n\nPatch 7.4.611 (after 7.4.609)\nProblem:    Syntax error.\nSolution:   Change statement to return.\nFiles:\t    src/if_python3.c\n\nPatch 7.4.612\nProblem:    test_eval fails on Mac.\nSolution:   Use the * register instead of the + register. (Jun Takimoto)\nFiles:\t    src/testdir/test_eval.in, src/testdir/test_eval.ok\n\nPatch 7.4.613\nProblem:    The NFA engine does not implement the 'redrawtime' time limit.\nSolution:   Implement the time limit.\nFiles:\t    src/regexp_nfa.c\n\nPatch 7.4.614\nProblem:    There is no test for what patch 7.4.601 fixes.\nSolution:   Add a test. (Christian Brabandt)\nFiles:\t    src/testdir/test_mapping.in, src/testdir/test_mapping.ok\n\nPatch 7.4.615\nProblem:    Vim hangs when freeing a lot of objects.\nSolution:   Do not go back to the start of the list every time.  (Yasuhiro\n\t    Matsumoto and Ariya Mizutani)\nFiles:\t    src/eval.c\n\nPatch 7.4.616\nProblem:    Cannot insert a tab in front of a block.\nSolution:   Correctly compute aop->start. (Christian Brabandt)\nFiles:\t    src/ops.c, src/testdir/test39.in, src/testdir/test39.ok\n\nPatch 7.4.617\nProblem:    Wrong \":argdo\" range does not cause an error.\nSolution:   Reset \"cmd\" to NULL. (Marcin Szamotulski, Ingo Karkat)\nFiles:\t    src/ex_docmd.c\n\nPatch 7.4.618 (after 7.4.609)\nProblem:    luaV_setref() is missing a return statement. (Ozaki Kiichi)\nSolution:   Put the return statement back.\nFiles:\t    src/if_lua.c\n\nPatch 7.4.619 (after 7.4.618)\nProblem:    luaV_setref() not returning the correct value.\nSolution:   Return one.\nFiles:\t    src/if_lua.c\n\nPatch 7.4.620\nProblem:    Compiler warning for uninitialized variable. (Tony Mechelynck)\nSolution:   Initialize \"did_free\". (Ben Fritz)\nFiles:\t    src/eval.c\n\nPatch 7.4.621 (after 7.4.619)\nProblem:    Returning 1 in the wrong function. (Raymond Ko)\nSolution:   Return 1 in the right function (hopefully).\nFiles:\t    src/if_lua.c\n\nPatch 7.4.622\nProblem:    Compiler warning for unused argument.\nSolution:   Add UNUSED.\nFiles:\t    src/regexp_nfa.c\n\nPatch 7.4.623\nProblem:    Crash with pattern: \\(\\)\\{80000}  (Dominique Pelle)\nSolution:   When the max limit is large fall back to the old engine.\nFiles:\t    src/regexp_nfa.c\n\nPatch 7.4.624\nProblem:    May leak memory or crash when vim_realloc() returns NULL.\nSolution:   Handle a NULL value properly. (Mike Williams)\nFiles:\t    src/if_cscope.c, src/memline.c, src/misc1.c, src/netbeans.c\n\nPatch 7.4.625\nProblem:    Possible NULL pointer dereference.\nSolution:   Check for NULL before using it. (Mike Williams)\nFiles:\t    src/if_py_both.h\n\nPatch 7.4.626\nProblem:    MSVC with W4 gives useless warnings.\nSolution:   Disable more warnings. (Mike Williams)\nFiles:\t    src/vim.h\n\nPatch 7.4.627\nProblem:    The last screen cell is not updated.\nSolution:   Respect the \"tn\" termcap feature. (Hayaki Saito)\nFiles:\t    runtime/doc/term.txt, src/option.c, src/screen.c, src/term.c,\n\t    src/term.h\n\nPatch 7.4.628\nProblem:    Compiler warning for variable might be clobbered by longjmp.\nSolution:   Add volatile. (Michael Jarvis)\nFiles:\t    src/main.c\n\nPatch 7.4.629\nProblem:    Coverity warning for Out-of-bounds read.\nSolution:   Increase MAXWLEN to 254. (Eliseo Mart\u00ednez)\nFiles:\t    src/spell.c\n\nPatch 7.4.630\nProblem:    When using Insert mode completion combined with autocommands the\n\t    redo command may not work.\nSolution:   Do not save the redo buffer when executing autocommands. (Yasuhiro\n\t    Matsumoto)\nFiles:\t    src/fileio.c\n\nPatch 7.4.631\nProblem:    The default conceal character is documented to be a space but it's\n\t    initially a dash. (Christian Brabandt)\nSolution:   Make the initial value a space.\nFiles:\t    src/globals.h\n\nPatch 7.4.632 (after 7.4.592)\nProblem:    7.4.592 breaks the netrw plugin, because the autocommands are\n\t    skipped.\nSolution:   Roll back the change.\nFiles:\t    src/ex_cmds.c\n\nPatch 7.4.633\nProblem:    After 7.4.630 the problem persists.\nSolution:   Also skip redo when calling a user function.\nFiles:\t    src/eval.c\n\nPatch 7.4.634\nProblem:    Marks are not restored after redo + undo.\nSolution:   Fix the way marks are restored. (Olaf Dabrunz)\nFiles:\t    src/undo.c, src/testdir/Make_amiga.mak, src/testdir/Make_dos.mak,\n\t    src/testdir/Make_ming.mak, src/testdir/Make_os2.mak,\n\t    src/testdir/Make_vms.mms, src/testdir/Makefile,\n\t    src/testdir/test_marks.in, src/testdir/test_marks.ok\n\nPatch 7.4.635\nProblem:    If no NL or CR is found in the first block of a file then the\n\t    'fileformat' may be set to \"mac\". (Issue 77)\nSolution:   Check if a CR was found. (eswald)\nFiles:\t    src/fileio.c\n\nPatch 7.4.636\nProblem:    A search with end offset gets stuck at end of file. (Gary Johnson)\nSolution:   When a search doesn't move the cursor repeat it with a higher\n\t    count. (Christian Brabandt)\nFiles:\t    src/normal.c, src/testdir/test44.in, src/testdir/test44.ok\n\nPatch 7.4.637\nProblem:    Incorrectly read the number of buffer for which an autocommand\n\t    should be registered.\nSolution:   Reverse check for \"<buffer=abuf>\". (Lech Lorens)\nFiles:\t    src/fileio.c\n\nPatch 7.4.638\nProblem:    Can't build with Lua 5.3 on Windows.\nSolution:   use luaL_optinteger() instead of LuaL_optlong(). (Ken Takata)\nFiles:\t    src/if_lua.c\n\nPatch 7.4.639\nProblem:    Combination of linebreak and conceal doesn't work well.\nSolution:   Fix the display problems. (Christian Brabandt)\nFiles:\t    src/screen.c, src/testdir/test88.in, src/testdir/test88.ok,\n\t    src/testdir/test_listlbr_utf8.in, src/testdir/test_listlbr_utf8.ok\n\nPatch 7.4.640\nProblem:    After deleting characters in Insert mode such that lines are\n\t    joined undo does not work properly. (issue 324)\nSolution:   Use Insstart instead of Insstart_orig. (Christian Brabandt)\nFiles:\t    src/edit.c\n\nPatch 7.4.641\nProblem:    The tabline menu was using \":999tabnew\" which is now invalid.\nSolution:   Use \":$tabnew\" instead. (Florian Degner)\nFiles:\t    src/normal.c\n\nPatch 7.4.642\nProblem:    When using \"gf\" escaped spaces are not handled.\nSolution:   Recognize escaped spaces.\nFiles:\t    src/vim.h, src/normal.h, src/window.c, src/misc2.c\n\nPatch 7.4.643\nProblem:    Using the default file format for Mac files. (Issue 77)\nSolution:   Reset the try_mac counter in the right place. (Oswald)\nFiles:\t    src/fileio.c, src/testdir/test30.in, src/testdir/test30.ok\n\nPatch 7.4.644\nProblem:    Stratus VOS doesn't have sync().\nSolution:   Use fflush(). (Karli Aurelia)\nFiles:\t    src/memfile.c\n\nPatch 7.4.645\nProblem:    When splitting the window in a BufAdd autocommand while still in\n\t    the first, empty buffer the window count is wrong.\nSolution:   Do not reset b_nwindows to zero and don't increment it.\nFiles:\t    src/buffer.c, src/ex_cmds.c\n\nPatch 7.4.646\nProblem:    \":bufdo\" may start at a deleted buffer.\nSolution:   Find the first not deleted buffer. (Shane Harper)\nFiles:\t    src/ex_cmds2.c, src/testdir/test_command_count.in,\n\t    src/testdir/test_command_count.ok\n\nPatch 7.4.647\nProblem:    After running the tests on MS-Windows many files differ from their\n\t    originals as they were checked out.\nSolution:   Use a temp directory for executing the tests. (Ken Takata, Taro\n\t    Muraoka)\nFiles:\t    src/testdir/Make_dos.mak\n\nPatch 7.4.648 (after 7.4.647)\nProblem:    Tests broken on MS-Windows.\nSolution:   Delete wrong copy line. (Ken Takata)\nFiles:\t    src/testdir/Make_dos.mak\n\nPatch 7.4.649\nProblem:    Compiler complains about ignoring return value of fwrite().\n\t    (Michael Jarvis)\nSolution:   Add (void).\nFiles:\t    src/misc2.c\n\nPatch 7.4.650\nProblem:    Configure check may fail because the dl library is not used.\nSolution:   Put \"-ldl\" in LIBS rather than LDFLAGS. (Oazki Kiichi)\nFiles:\t    src/configure.in, src/auto/configure\n\nPatch 7.4.651 (after 7.4.582)\nProblem:    Can't match \"%>80v\" properly for multi-byte characters.\nSolution:   Multiply the character number by the maximum number of bytes in a\n\t    character. (Yasuhiro Matsumoto)\nFiles:\t    src/regexp_nfa.c\n\nPatch 7.4.652\nProblem:    Xxd lacks a few features.\nSolution:   Use 8 characters for the file position.  Add the -e and -o\n\t    arguments. (Vadim Vygonets)\nFiles:\t    src/xxd/xxd.c, runtime/doc/xxd.1\n\nPatch 7.4.653\nProblem:    Insert mode completion with complete() may have CTRL-L work like\n\t    CTRL-P.\nSolution:   Handle completion with complete() differently. (Yasuhiro\n\t    Matsumoto, Christian Brabandt, Hirohito Higashi)\nFiles:\t    src/edit.c\n\nPatch 7.4.654\nProblem:    glob() and globpath() cannot include links to non-existing files.\n\t    (Charles Campbell)\nSolution:   Add an argument to include all links with glob(). (James McCoy)\n\t    Also for globpath().\nFiles:\t    src/vim.h, src/eval.c, src/ex_getln.c\n\nPatch 7.4.655\nProblem:    Text deleted by \"dit\" depends on indent of closing tag.\n\t    (Jan Parthey)\nSolution:   Do not adjust oap->end in do_pending_operator(). (Christian\n\t    Brabandt)\nFiles:\t    src/normal.c, src/search.c, src/testdir/test53.in,\n\t    src/testdir/test53.ok\n\nPatch 7.4.656 (after 7.4.654)\nProblem:    Missing changes for glob() in one file.\nSolution:   Add the missing changes.\nFiles:\t    src/misc1.c\n\nPatch 7.4.657 (after 7.4.656)\nProblem:    Compiler warnings for pointer mismatch.\nSolution:   Add a typecast. (John Marriott)\nFiles:\t    src/misc1.c\n\nPatch 7.4.658\nProblem:    'formatexpr' is evaluated too often.\nSolution:   Only invoke it when beyond the 'textwidth' column, as it is\n\t    documented. (James McCoy)\nFiles:\t    src/edit.c\n\nPatch 7.4.659\nProblem:    When 'ruler' is set the preferred column is reset. (Issue 339)\nSolution:   Don't set curswant when redrawing the status lines.\nFiles:\t    src/option.c\n\nPatch 7.4.660\nProblem:    Using freed memory when g:colors_name is changed in the colors\n\t    script. (oni-link)\nSolution:   Make a copy of the variable value.\nFiles:\t    src/syntax.c\n\nPatch 7.4.661\nProblem:    Using \"0 CTRL-D\" in Insert mode may have CursorHoldI interfere.\n\t    (Gary Johnson)\nSolution:   Don't store K_CURSORHOLD as the last character. (Christian\n\t    Brabandt)\nFiles:\t    src/edit.c\n\nPatch 7.4.662\nProblem:    When 'M' is in the 'cpo' option then selecting a text object in\n\t    parentheses does not work correctly.\nSolution:   Keep 'M' in 'cpo' when finding a match. (Hirohito Higashi)\nFiles:\t    src/search.c, src/testdir/Make_amiga.mak,\n\t    src/testdir/Make_dos.mak, src/testdir/Make_ming.mak,\n\t    src/testdir/Make_os2.mak, src/testdir/Make_vms.mms,\n\t    src/testdir/Makefile, src/testdir/test_textobjects.in,\n\t    src/testdir/test_textobjects.ok\n\nPatch 7.4.663\nProblem:    When using netbeans a buffer is not found in another tab.\nSolution:   When 'switchbuf' is set to \"usetab\" then switch to another tab\n\t    when possible. (Xavier de Gaye)\nFiles:\t    src/netbeans.c\n\nPatch 7.4.664\nProblem:    When 'compatible' is reset 'numberwidth' is set to 4, but the\n\t    effect doesn't show until a change is made.\nSolution:   Check if 'numberwidth' changed. (Christian Brabandt)\nFiles:\t    src/screen.c, src/structs.h\n\nPatch 7.4.665\nProblem:    'linebreak' does not work properly with multi-byte characters.\nSolution:   Compute the pointer offset with mb_head_off().  (Yasuhiro\n\t    Matsumoto)\nFiles:\t    src/screen.c\n\nPatch 7.4.666\nProblem:    There is a chance that Vim may lock up.\nSolution:   Handle timer events differently. (Aaron Burrow)\nFiles:\t    src/os_unix.c\n\nPatch 7.4.667\nProblem:    'colorcolumn' isn't drawn in a closed fold while 'cursorcolumn'\n\t    is. (Carlos Pita)\nSolution:   Make it consistent. (Christian Brabandt)\nFiles:\t    src/screen.c\n\nPatch 7.4.668\nProblem:    Can't use a glob pattern as a regexp pattern.\nSolution:   Add glob2regpat(). (Christian Brabandt)\nFiles:\t    src/eval.c, runtime/doc/eval.txt\n\nPatch 7.4.669\nProblem:    When netbeans is active the sign column always shows up.\nSolution:   Only show the sign column once a sign has been added. (Xavier de\n\t    Gaye)\nFiles:\t    src/buffer.c, src/edit.c, src/move.c, src/netbeans.c,\n\t    src/screen.c, src/structs.h\n\nPatch 7.4.670\nProblem:    Using 'cindent' for Javascript is less than perfect.\nSolution:   Improve indenting of continuation lines. (Hirohito Higashi)\nFiles:\t    src/misc1.c, src/testdir/test3.in, src/testdir/test3.ok\n\nPatch 7.4.671 (after 7.4.665)\nProblem:    Warning for shadowing a variable.\nSolution:   Rename off to mb_off. (Kazunobu Kuriyama)\nFiles:\t    src/screen.c\n\nPatch 7.4.672\nProblem:    When completing a shell command, directories in the current\n\t    directory are not listed.\nSolution:   When \".\" is not in $PATH also look in the current directory for\n\t    directories.\nFiles:\t    src/ex_getln.c, src/vim.h, src/misc1.c, src/eval.c,\n\t    src/os_amiga.c, src/os_msdos.c, src/os_unix.c, src/os_vms.c,\n\t    src/proto/os_amiga.pro, src/proto/os_msdos.pro,\n\t    src/proto/os_unix.pro, src/proto/os_win32.pro\n\nPatch 7.4.673\nProblem:    The first syntax entry gets sequence number zero, which doesn't\n\t    work. (Clinton McKay)\nSolution:   Start at number one. (Bjorn Linse)\nFiles:\t    src/syntax.c\n\nPatch 7.4.674 (after 7.4.672)\nProblem:    Missing changes in one file.\nSolution:   Also change the win32 file.\nFiles:\t    src/os_win32.c\n\nPatch 7.4.675\nProblem:    When a FileReadPost autocommand moves the cursor inside a line it\n\t    gets moved back.\nSolution:   When checking whether an autocommand moved the cursor store the\n\t    column as well. (Christian Brabandt)\nFiles:\t    src/ex_cmds.c\n\nPatch 7.4.676\nProblem:    On Mac, when not using the default Python framework configure\n\t    doesn't do the right thing.\nSolution:   Use a linker search path. (Kazunobu Kuriyama)\nFiles:\t    src/configure.in, src/auto/configure\n\nPatch 7.4.677 (after 7.4.676)\nProblem:    Configure fails when specifying a python-config-dir. (Lcd)\nSolution:   Check if PYTHONFRAMEWORKPREFIX is set.\nFiles:\t    src/configure.in, src/auto/configure\n\nPatch 7.4.678\nProblem:    When using --remote the directory may end up being wrong.\nSolution:   Use localdir() to find out what to do. (Xaizek)\nFiles:\t    src/main.c\n\nPatch 7.4.679\nProblem:    Color values greater than 255 cause problems on MS-Windows.\nSolution:   Truncate to 255 colors. (Yasuhiro Matsumoto)\nFiles:\t    src/os_win32.c\n\nPatch 7.4.680\nProblem:    CTRL-W in Insert mode does not work well for multi-byte\n\t    characters.\nSolution:   Use mb_get_class(). (Yasuhiro Matsumoto)\nFiles:\t    src/edit.c, src/testdir/Make_amiga.mak, src/testdir/Make_dos.mak,\n\t    src/testdir/Make_ming.mak, src/testdir/Make_os2.mak,\n\t    src/testdir/Make_vms.mms, src/testdir/Makefile,\n\t    src/testdir/test_erasebackword.in,\n\t    src/testdir/test_erasebackword.ok,\n\nPatch 7.4.681\nProblem:    MS-Windows: When Vim is minimized the window height is computed\n\t    incorrectly.\nSolution:   When minimized use the previously computed size. (Ingo Karkat)\nFiles:\t    src/gui_w32.c\n\nPatch 7.4.682\nProblem:    The search highlighting and match highlighting replaces the\n\t    cursorline highlighting, this doesn't look good.\nSolution:   Combine the highlighting. (Yasuhiro Matsumoto)\nFiles:\t    src/screen.c\n\nPatch 7.4.683\nProblem:    Typo in the vimtutor command.\nSolution:   Fix the typo. (Corey Farwell, github pull 349)\nFiles:\t    vimtutor.com\n\nPatch 7.4.684\nProblem:    When starting several Vim instances in diff mode, the temp files\n\t    used may not be unique. (Issue 353)\nSolution:   Add an argument to vim_tempname() to keep the file.\nFiles:\t    src/diff.c, src/eval.c, src/ex_cmds.c, src/fileio.c,\n\t    src/hardcopy.c, src/proto/fileio.pro, src/if_cscope.c,\n\t    src/memline.c, src/misc1.c, src/os_unix.c, src/quickfix.c,\n\t    src/spell.c\n\nPatch 7.4.685\nProblem:    When there are illegal utf-8 characters the old regexp engine may\n\t    go past the end of a string.\nSolution:   Only advance to the end of the string. (Dominique Pelle)\nFiles:\t    src/regexp.c\n\nPatch 7.4.686\nProblem:    \"zr\" and \"zm\" do not take a count.\nSolution:   Implement the count, restrict the fold level to the maximum\n\t    nesting depth.  (Marcin Szamotulski)\nFiles:\t    runtime/doc/fold.txt, src/normal.c\n\nPatch 7.4.687\nProblem:    There is no way to use a different in Replace mode for a terminal.\nSolution:   Add t_SR. (Omar Sandoval)\nFiles:\t    runtime/doc/options.txt, runtime/doc/term.txt,\n\t    runtime/syntax/vim.vim, src/option.c, src/term.c, src/term.h\n\nPatch 7.4.688\nProblem:    When \"$\" is in 'cpo' the popup menu isn't undrawn correctly.\n\t    (Issue 166)\nSolution:   When using the popup menu remove the \"$\".\nFiles:\t    src/edit.c\n\nPatch 7.4.689\nProblem:    On MS-Windows, when 'autochdir' is set, diff mode with files in\n\t    different directories does not work. (Axel Bender)\nSolution:   Remember the current directory and use it where needed. (Christian\n\t    Brabandt)\nFiles:\t    src/main.c\n\nPatch 7.4.690\nProblem:    Memory access errors when changing indent in Ex mode. Also missing\n\t    redraw when using CTRL-U. (Knil Ino)\nSolution:   Update pointers after calling ga_grow().\nFiles:\t    src/ex_getln.c\n\nPatch 7.4.691 (after 7.4.689)\nProblem:    Can't build with MzScheme.\nSolution:   Change \"cwd\" into the global variable \"start_dir\".\nFiles:\t    src/main.c\n\nPatch 7.4.692\nProblem:    Defining SOLARIS for no good reason. (Danek Duvall)\nSolution:   Remove it.\nFiles:\t    src/os_unix.h\n\nPatch 7.4.693\nProblem:    Session file is not correct when there are multiple tab pages.\nSolution:   Reset the current window number for each tab page. (Jacob Niehus)\nFiles:      src/ex_docmd.c\n\nPatch 7.4.694\nProblem:    Running tests changes the .viminfo file.\nSolution:   Disable viminfo in the text objects test.\nFiles:      src/testdir/test_textobjects.in\n\nPatch 7.4.695\nProblem:    Out-of-bounds read, detected by Coverity.\nSolution:   Remember the value of cmap for the first matching encoding.  Reset\n            cmap to that value if first matching encoding is going to be used.\n            (Eliseo Mart\u00ednez)\nFiles:      src/hardcopy.c\n\nPatch 7.4.696\nProblem:    Not freeing memory when encountering an error.\nSolution:   Free the stack before returning. (Eliseo Mart\u00ednez)\nFiles:      src/regexp_nfa.c\n\nPatch 7.4.697\nProblem:    The filename used for \":profile\" must be given literally.\nSolution:   Expand \"~\" and environment variables. (Marco Hinz)\nFiles:      src/ex_cmds2.c\n\nPatch 7.4.698\nProblem:    Various problems with locked and fixed lists and dictionaries.\nSolution:   Disallow changing locked items, fix a crash, add tests. (Olaf\n            Dabrunz)\nFiles:      src/structs.h, src/eval.c, src/testdir/test55.in,\n            src/testdir/test55.ok\n\nPatch 7.4.699\nProblem:    E315 when trying to delete a fold. (Yutao Yuan)\nSolution:   Make sure the fold doesn't go beyond the last buffer line.\n            (Christian Brabandt)\nFiles:      src/fold.c\n\nPatch 7.4.700\nProblem:    Fold can't be opened after \":move\". (Ein Brown)\nSolution:   Delete the folding information and update it afterwards.\n            (Christian Brabandt)\nFiles:      src/ex_cmds.c, src/fold.c, src/testdir/test45.in,\n            src/testdir/test45.ok\n\nPatch 7.4.701\nProblem:    Compiler warning for using uninitialized variable. (Yasuhiro\n            Matsumoto)\nSolution:   Initialize it.\nFiles:      src/hardcopy.c\n\nPatch 7.4.702\nProblem:    Joining an empty list does unnecessary work.\nSolution:   Let join() return early. (Marco Hinz)\nFiles:      src/eval.c\n\nPatch 7.4.703\nProblem:    Compiler warning for start_dir unused when building unittests.\nSolution:   Move start_dir inside the #ifdef.\nFiles:      src/main.c\n\nPatch 7.4.704\nProblem:    Searching for a character matches an illegal byte and causes\n            invalid memory access. (Dominique Pelle)\nSolution:   Do not match an invalid byte when search for a character in a\n            string.  Fix equivalence classes using negative numbers, which\n            result in illegal bytes.\nFiles:      src/misc2.c, src/regexp.c, src/testdir/test44.in\n\nPatch 7.4.705\nProblem:    Can't build with Ruby 2.2.\nSolution:   Add #ifdefs to handle the incompatible change. (Andrei Olsen)\nFiles:      src/if_ruby.c\n\nPatch 7.4.706\nProblem:    Window drawn wrong when 'laststatus' is zero and there is a\n            command-line window. (Yclept Nemo)\nSolution:   Set the status height a bit later. (Christian Brabandt)\nFiles:      src/window.c\n\nPatch 7.4.707\nProblem:    Undo files can have their executable bit set.\nSolution:   Strip of the executable bit. (Mikael Berthe)\nFiles:      src/undo.c\n\nPatch 7.4.708\nProblem:    gettext() is called too often.\nSolution:   Do not call gettext() for messages until they are actually used.\n            (idea by Yasuhiro Matsumoto)\nFiles:      src/eval.c\n\nPatch 7.4.709\nProblem:    \":tabmove\" does not work as documented.\nSolution:   Make it work consistently.  Update documentation and add tests.\n            (Hirohito Higashi)\nFiles:      src/window.c, runtime/doc/tabpage.txt, src/ex_docmd.c,\n            src/testdir/test62.in, src/testdir/test62.ok\n\nPatch 7.4.710\nProblem:    It is not possible to make spaces visible in list mode.\nSolution:   Add the \"space\" item to 'listchars'. (David B\u00fcrgin, issue 350)\nFiles:      runtime/doc/options.txt, src/globals.h, src/message.h,\n            src/screen.c, src/testdir/test_listchars.in,\n            src/testdir/test_listchars.ok, src/testdir/Make_amiga.mak,\n            src/testdir/Make_dos.mak, src/testdir/Make_ming.mak,\n            src/testdir/Make_os2.mak, src/testdir/Make_vms.mms,\n            src/testdir/Makefile\n\nPatch 7.4.711 (after 7.4.710)\nProblem:    Missing change in one file.\nSolution:   Also change option.c\nFiles:      src/option.c\n\nPatch 7.4.712 (after 7.4.710)\nProblem:    Missing change in another file.\nSolution:   Also change message.c\nFiles:      src/message.c\n\nPatch 7.4.713\nProblem:    Wrong condition for #ifdef.\nSolution:   Change USR_EXRC_FILE2 to USR_VIMRC_FILE2. (Mikael Fourrier)\nFiles:      src/os_unix.h\n\nPatch 7.4.714\nProblem:    Illegal memory access when there are illegal bytes.\nSolution:   Check the byte length of the character. (Dominique Pelle)\nFiles:      src/regexp.c\n\nPatch 7.4.715\nProblem:    Invalid memory access when there are illegal bytes.\nSolution:   Get the length from the text, not from the character. (Dominique\n            Pelle)\nFiles:      src/regexp_nfa.c\n\nPatch 7.4.716\nProblem:    When using the 'c' flag of \":substitute\" and selecting \"a\" or \"l\"\n            at the prompt the flags are not remembered for \":&&\". (Ingo\n            Karkat)\nSolution:   Save the flag values and restore them. (Hirohito Higashi)\nFiles:      src/ex_cmds.c\n\nPatch 7.4.717\nProblem:    \":let list += list\" can change a locked list.\nSolution:   Check for the lock earlier. (Olaf Dabrunz)\nFiles:      src/eval.c, src/testdir/test55.in, src/testdir/test55.ok\n\nPatch 7.4.718\nProblem:    Autocommands triggered by quickfix cannot get the current title\n            value.\nSolution:   Set w:quickfix_title earlier. (Yannick)\n            Also move the check for a title into the function.\nFiles:      src/quickfix.c\n\nPatch 7.4.719\nProblem:    Overflow when adding MAXCOL to a pointer.\nSolution:   Subtract pointers instead. (James McCoy)\nFiles:      src/screen.c\n\nPatch 7.4.720\nProblem:    Can't build with Visual Studio 2015.\nSolution:   Recognize the \"version 14\" numbers and omit /nodefaultlib when\n            appropriate. (Paul Moore)\nFiles:      src/Make_mvc.mak\n\nPatch 7.4.721\nProblem:    When 'list' is set Visual mode does not highlight anything in\n            empty lines. (mgaleski)\nSolution:   Check the value of lcs_eol in another place. (Christian Brabandt)\nFiles:      src/screen.c\n\nPatch 7.4.722\nProblem:    0x202f is not recognized as a non-breaking space character.\nSolution:   Add 0x202f to the list. (Christian Brabandt)\nFiles:      runtime/doc/options.txt, src/message.c, src/screen.c\n\nPatch 7.4.723\nProblem:    For indenting, finding the C++ baseclass can be slow.\nSolution:   Cache the result. (Hirohito Higashi)\nFiles:      src/misc1.c\n\nPatch 7.4.724\nProblem:    Vim icon does not show in Windows context menu. (issue 249)\nSolution:   Load the icon in GvimExt.\nFiles:      src/GvimExt/gvimext.cpp, src/GvimExt/gvimext.h\n\nPatch 7.4.725\nProblem:    \":call setreg('\"', [])\" reports an internal error.\nSolution:   Make the register empty. (Yasuhiro Matsumoto)\nFiles:      src/ops.c\n\nPatch 7.4.726 (after 7.4.724)\nProblem:    Cannot build GvimExt.\nSolution:   Set APPVER to 5.0.  (KF Leong)\nFiles:      src/GvimExt/Makefile\n\nPatch 7.4.727 (after 7.4.724)\nProblem:    Cannot build GvimExt with MingW.\nSolution:   Add -lgdi32.  (KF Leong)\nFiles:      src/GvimExt/Make_ming.mak\n\nPatch 7.4.728\nProblem:    Can't build with some version of Visual Studio 2015.\nSolution:   Recognize another version 14 number. (Sinan)\nFiles:      src/Make_mvc.mak\n\nPatch 7.4.729 (after 7.4.721)\nProblem:    Occasional crash with 'list' set.\nSolution:   Fix off-by-one error. (Christian Brabandt)\nFiles:      src/screen.c\n\nPatch 7.4.730\nProblem:    When setting the crypt key and using a swap file, text may be\n            encrypted twice or unencrypted text remains in the swap file.\n            (Issue 369)\nSolution:   Call ml_preserve() before re-encrypting.  Set correct index for\n            next pointer block.\nFiles:      src/memfile.c, src/memline.c, src/proto/memline.pro, src/option.c\n\nPatch 7.4.731\nProblem:    The tab menu shows \"Close tab\" even when it doesn't work.\nSolution:   Don't show \"Close tab\" for the last tab. (John Marriott)\nFiles:      src/gui_w48.c, src/gui_gtk_x11.c, src/gui_mac.c, src/gui_motif.c\n\nPatch 7.4.732\nProblem:    The cursor line is not always updated for the \"O\" command.\nSolution:   Reset the VALID_CROW flag. (Christian Brabandt)\nFiles:      src/normal.c\n\nPatch 7.4.733\nProblem:    test_listchars breaks on MS-Windows. (Kenichi Ito)\nSolution:   Set fileformat to \"unix\". (Christian Brabandt)\nFiles:      src/testdir/test_listchars.in\n\nPatch 7.4.734\nProblem:    ml_get error when using \"p\" in a Visual selection in the last\n            line.\nSolution:   Change the behavior at the last line. (Yukihiro Nakadaira)\nFiles:      src/normal.c, src/ops.c, src/testdir/test94.in,\n            src/testdir/test94.ok\n\nPatch 7.4.735\nProblem:    Wrong argument for sizeof().\nSolution:   Use a pointer argument. (Chris Hall)\nFiles:      src/eval.c\n\nPatch 7.4.736\nProblem:    Invalid memory access.\nSolution:   Avoid going over the end of a NUL terminated string. (Dominique\n            Pelle)\nFiles:      src/regexp.c\n\nPatch 7.4.737\nProblem:    On MS-Windows vimgrep over arglist doesn't work (Issue 361)\nSolution:   Only escape backslashes in ## expansion when it is not used as the\n            path separator. (James McCoy)\nFiles:      src/ex_docmd.c\n\nPatch 7.4.738 (after 7.4.732)\nProblem:    Can't compile without the syntax highlighting feature.\nSolution:   Add #ifdef around use of w_p_cul. (Hirohito Higashi)\nFiles:      src/normal.c, src/screen.c\n\nPatch 7.4.739\nProblem:    In a string \"\\U\" only takes 4 digits, while after CTRL-V U eight\n            digits can be used.\nSolution:   Make \"\\U\" also take eight digits. (Christian Brabandt)\nFiles:      src/eval.c\n\nPatch 7.4.740\nProblem:    \":1quit\" works like \":.quit\". (Bohr Shaw)\nSolution:   Don't exit Vim when a range is specified. (Christian Brabandt)\nFiles:      src/ex_docmd.c, src/testdir/test13.in, src/testdir/test13.ok\n\nPatch 7.4.741\nProblem:    When using += with \":set\" a trailing comma is not recognized.\n            (Issue 365)\nSolution:   Don't add a second comma. Add a test. (partly by Christian\n            Brabandt)\nFiles:      src/option.c, src/testdir/test_set.in, src/testdir/test_set.ok,\n            src/testdir/Make_amiga.mak, src/testdir/Make_dos.mak,\n            src/testdir/Make_ming.mak, src/testdir/Make_os2.mak,\n            src/testdir/Make_vms.mms, src/testdir/Makefile\n\nPatch 7.4.742\nProblem:    Cannot specify a vertical split when loading a buffer for a\n            quickfix command.\nSolution:   Add the \"vsplit\" value to 'switchbuf'. (Brook Hong)\nFiles:      runtime/doc/options.txt, src/buffer.c, src/option.h\n\nPatch 7.4.743\nProblem:    \"p\" in Visual mode causes an unexpected line split.\nSolution:   Advance the cursor first. (Yukihiro Nakadaira)\nFiles:      src/ops.c, src/testdir/test94.in, src/testdir/test94.ok\n\nPatch 7.4.744\nProblem:    No tests for Ruby and Perl.\nSolution:   Add minimal tests. (Ken Takata)\nFiles:      src/testdir/test_perl.in, src/testdir/test_perl.ok,\n            src/testdir/test_ruby.in, src/testdir/test_ruby.ok,\n            src/testdir/Make_amiga.mak, src/testdir/Make_dos.mak,\n            src/testdir/Make_ming.mak, src/testdir/Make_os2.mak,\n            src/testdir/Make_vms.mms, src/testdir/Makefile\n\nPatch 7.4.745\nProblem:    The entries added by matchaddpos() are returned by getmatches()\n            but can't be set with setmatches(). (Lcd)\nSolution:   Fix setmatches(). (Christian Brabandt)\nFiles:      src/eval.c, src/testdir/test63.in, src/testdir/test63.ok\n\nPatch 7.4.746\nProblem:    \":[count]tag\" is not always working. (cs86661)\nSolution:   Set cur_match a bit later. (Hirohito Higashi)\nFiles:      src/tag.c,\n\nPatch 7.4.747\nProblem:    \":cnext\" may jump to the wrong column when setting\n            'virtualedit=all' (cs86661)\nSolution:   Reset the coladd field. (Hirohito Higashi)\nFiles:      src/quickfix.c\n\nPatch 7.4.748 (after 7.4.745)\nProblem:    Buffer overflow.\nSolution:   Make the buffer larger. (Kazunobu Kuriyama)\nFiles:      src/eval.c\n\nPatch 7.4.749 (after 7.4.741)\nProblem:    For some options two consecutive commas are OK. (Nikolay Pavlov)\nSolution:   Add the P_ONECOMMA flag.\nFiles:      src/option.c\n\nPatch 7.4.750\nProblem:    Cannot build with clang 3.5 on Cygwin with perl enabled.\nSolution:   Strip \"-fdebug-prefix-map\" in configure. (Ken Takata)\nFiles:      src/configure.in, src/auto/configure\n\nPatch 7.4.751\nProblem:    It is not obvious how to enable the address sanitizer.\nSolution:   Add commented-out flags in the Makefile. (Dominique Pelle)\n            Also add missing test targets.\nFiles:      src/Makefile\n\nPatch 7.4.752\nProblem:    Unicode 8.0 not supported.\nSolution:   Update tables for Unicode 8.0.  Avoid E36 when running the script.\n            (James McCoy)\nFiles:      runtime/tools/unicode.vim, src/mbyte.c\n\nPatch 7.4.753\nProblem:    Appending in Visual mode with 'linebreak' set does not work\n            properly.  Also when 'selection' is \"exclusive\". (Ingo Karkat)\nSolution:   Recalculate virtual columns. (Christian Brabandt)\nFiles:      src/normal.c, src/testdir/test_listlbr.in,\n            src/testdir/test_listlbr.ok, src/testdir/test_listlbr_utf8.in,\n            src/testdir/test_listlbr_utf8.ok\n\nPatch 7.4.754\nProblem:    Using CTRL-A in Visual mode does not work well. (Gary Johnson)\nSolution:   Make it increment all numbers in the Visual area. (Christian\n            Brabandt)\nFiles:      runtime/doc/change.txt, src/normal.c, src/ops.c,\n            src/proto/ops.pro, src/testdir/Make_amiga.mak,\n            src/testdir/Make_dos.mak, src/testdir/Make_ming.mak,\n            src/testdir/Make_os2.mak, src/testdir/Make_vms.mms,\n            src/testdir/Makefile, src/testdir/test_increment.in,\n            src/testdir/test_increment.ok\n\nPatch 7.4.755\nProblem:    It is not easy to count the number of characters.\nSolution:   Add the skipcc argument to strchars(). (Hirohito Higashi, Ken\n            Takata)\nFiles:      runtime/doc/eval.txt, src/eval.c, src/testdir/test_utf8.in,\n            src/testdir/test_utf8.ok\n\nPatch 7.4.756\nProblem:    Can't use strawberry Perl 5.22 x64 on MS-Windows.\nSolution:   Add new defines and #if. (Ken Takata)\nFiles:      src/Make_cyg_ming.mak, src/Make_mvc.mak, src/if_perl.xs\n\nPatch 7.4.757\nProblem:    Cannot detect the background color of a terminal.\nSolution:   Add T_RBG to request the background color if possible. (Lubomir\n            Rintel)\nFiles:      src/main.c, src/term.c, src/term.h, src/proto/term.pro\n\nPatch 7.4.758\nProblem:    When 'conceallevel' is 1 and quitting the command-line window with\n            CTRL-C the first character ':' is erased.\nSolution:   Reset 'conceallevel' in the command-line window. (Hirohito\n            Higashi)\nFiles:      src/ex_getln.c\n\nPatch 7.4.759\nProblem:    Building with Lua 5.3 doesn't work, symbols have changed.\nSolution:   Use the new names for the new version. (Felix Schnizlein)\nFiles:      src/if_lua.c\n\nPatch 7.4.760\nProblem:    Spelling mistakes are not displayed after \":syn spell\".\nSolution:   Force a redraw after \":syn spell\" command. (Christian Brabandt)\nFiles:      src/syntax.c\n\nPatch 7.4.761 (after 7.4.757)\nProblem:    The request-background termcode implementation is incomplete.\nSolution:   Add the missing pieces.\nFiles:      src/option.c, src/term.c\n\nPatch 7.4.762 (after 7.4.757)\nProblem:    Comment for may_req_bg_color() is wrong. (Christ van Willegen)\nSolution:   Rewrite the comment.\nFiles:      src/term.c\n\nPatch 7.4.763 (after 7.4.759)\nProblem:    Building with Lua 5.1 doesn't work.\nSolution:   Define lua_replace and lua_remove. (KF Leong)\nFiles:      src/if_lua.c\n\nPatch 7.4.764 (after 7.4.754)\nProblem:    test_increment fails on MS-Windows. (Ken Takata)\nSolution:   Clear Visual mappings. (Taro Muraoka)\nFiles:      src/testdir/test_increment.in\n\nPatch 7.4.765 (after 7.4.754)\nProblem:    CTRL-A and CTRL-X in Visual mode do not always work well.\nSolution:   Improvements for increment and decrement. (Christian Brabandt)\nFiles:      src/normal.c, src/ops.c, src/testdir/test_increment.in,\n            src/testdir/test_increment.ok\n\nPatch 7.4.766 (after 7.4.757)\nProblem:    Background color check does not work on Tera Term.\nSolution:   Also recognize ST as a termination character. (Hirohito Higashi)\nFiles:      src/term.c\n\nPatch 7.4.767\nProblem:    --remote-tab-silent can fail on MS-Windows.\nSolution:   Use single quotes to avoid problems with backslashes. (Idea by\n            Weiyong Mao)\nFiles:      src/main.c\n\nPatch 7.4.768\nProblem:    :diffoff only works properly once.\nSolution:   Also make :diffoff work when used a second time. (Olaf Dabrunz)\nFiles:      src/diff.c\n\nPatch 7.4.769 (after 7.4 768)\nProblem:    Behavior of :diffoff is not tested.\nSolution:   Add a bit of testing. (Olaf Dabrunz)\nFiles:      src/testdir/test47.in, src/testdir/test47.ok\n\nPatch 7.4.770 (after 7.4.766)\nProblem:    Background color response with transparency is not ignored.\nSolution:   Change the way escape sequences are recognized. (partly by\n            Hirohito Higashi)\nFiles:      src/ascii.h, src/term.c\n\nPatch 7.4.771\nProblem:    Search does not handle multi-byte character at the start position\n            correctly.\nSolution:   Take byte size of character into account. (Yukihiro Nakadaira)\nFiles:      src/search.c, src/testdir/Make_amiga.mak,\n            src/testdir/Make_dos.mak, src/testdir/Make_ming.mak,\n            src/testdir/Make_os2.mak, src/testdir/Make_vms.mms,\n            src/testdir/Makefile, src/testdir/test_search_mbyte.in,\n            src/testdir/test_search_mbyte.ok\n\nPatch 7.4.772\nProblem:    Racket 6.2 is not supported on MS-Windows.\nSolution:   Check for the \"racket\" subdirectory. (Weiyong Mao)\nFiles:      src/Make_mvc.mak, src/if_mzsch.c\n\nPatch 7.4.773\nProblem:    'langmap' is used in command-line mode when checking for mappings.\n            Issue 376.\nSolution:   Do not use 'langmap' in command-line mode. (Larry Velazquez)\nFiles:      src/getchar.c, src/testdir/test_mapping.in,\n            src/testdir/test_mapping.ok\n\nPatch 7.4.774\nProblem:    When using the CompleteDone autocommand event it's difficult to\n            get to the completed items.\nSolution:   Add the v:completed_items variable. (Shougo Matsu)\nFiles:      runtime/doc/autocmd.txt, runtime/doc/eval.txt, src/edit.c,\n            src/eval.c, src/macros.h, src/proto/eval.pro, src/vim.h\n\nPatch 7.4.775\nProblem:    It is not possible to avoid using the first item of completion.\nSolution:   Add the \"noinsert\" and \"noselect\" values to 'completeopt'. (Shougo\n            Matsu)\nFiles:      runtime/doc/options.txt, src/edit.c, src/option.c\n\nPatch 7.4.776\nProblem:    Equivalence class for 'd' does not work correctly.\nSolution:   Fix 0x1e0f and 0x1d0b. (Dominique Pelle)\nFiles:      src/regexp.c, src/regexp_nfa.c\n\nPatch 7.4.777\nProblem:    The README file doesn't look nice on github.\nSolution:   Add a markdown version of the README file.\nFiles:      Filelist, README.md\n\nPatch 7.4.778\nProblem:    Coverity warns for uninitialized variable.\nSolution:   Change condition of assignment.\nFiles:      src/ops.c\n\nPatch 7.4.779\nProblem:    Using CTRL-A in a line without a number moves the cursor. May\n            cause a crash when at the start of the line. (Urtica Dioica)\nSolution:   Do not move the cursor if no number was changed.\nFiles:      src/ops.c\n\nPatch 7.4.780\nProblem:    Compiler complains about uninitialized variable and clobbered\n            variables.\nSolution:   Add Initialization.  Make variables static.\nFiles:      src/ops.c, src/main.c\n\nPatch 7.4.781\nProblem:    line2byte() returns one less when 'bin' and 'noeol' are set.\nSolution:   Only adjust the size for the last line. (Rob Wu)\nFiles:      src/memline.c\n\nPatch 7.4.782\nProblem:    Still a few problems with CTRL-A and CTRL-X in Visual mode.\nSolution:   Fix the reported problems. (Christian Brabandt)\nFiles:      src/charset.c, src/eval.c, src/ex_cmds.c, src/ex_getln.c,\n            src/misc2.c, src/normal.c, src/ops.c, src/option.c,\n            src/proto/charset.pro, src/testdir/test_increment.in,\n            src/testdir/test_increment.ok\n\nPatch 7.4.783\nProblem:    copy_chars() and copy_spaces() are inefficient.\nSolution:   Use memset() instead. (Dominique Pelle)\nFiles:      src/ex_getln.c, src/misc2.c, src/ops.c, src/proto/misc2.pro,\n            src/screen.c\n\nPatch 7.4.784\nProblem:    Using both \"noinsert\" and \"noselect\" in 'completeopt' does not\n            work properly.\nSolution:   Change the ins_complete() calls. (Ozaki Kiichi)\nFiles:      src/edit.c\n\nPatch 7.4.785\nProblem:    On some systems automatically adding the missing EOL causes\n            problems. Setting 'binary' has too many side effects.\nSolution:   Add the 'fixeol' option, default on. (Pavel Samarkin)\nFiles:      src/buffer.c, src/fileio.c, src/memline.c, src/netbeans.c,\n            src/ops.c, src/option.c, src/option.h, src/os_unix.c,\n            src/os_win32.c, src/structs.h, src/testdir/Make_amiga.mak,\n            src/testdir/Make_dos.mak, src/testdir/Make_ming.mak,\n            src/testdir/Make_os2.mak, src/testdir/Make_vms.mms,\n            src/testdir/Makefile, src/testdir/test_fixeol.in,\n            src/testdir/test_fixeol.ok, runtime/doc/options.txt,\n            runtime/optwin.vim\n\nPatch 7.4.786\nProblem:    It is not possible for a plugin to adjust to a changed setting.\nSolution:   Add the OptionSet autocommand event. (Christian Brabandt)\nFiles:      runtime/doc/autocmd.txt, runtime/doc/eval.txt, src/eval.c,\n            src/fileio.c, src/option.c, src/proto/eval.pro,\n            src/testdir/Make_amiga.mak, src/testdir/Make_dos.mak,\n            src/testdir/Make_ming.mak, src/testdir/Make_os2.mak,\n            src/testdir/Make_vms.mms, src/testdir/Makefile,\n            src/testdir/test_autocmd_option.in,\n            src/testdir/test_autocmd_option.ok, src/vim.h\n\nPatch 7.4.787 (after 7.4.786)\nProblem:    snprintf() isn't available everywhere.\nSolution:   Use vim_snprintf(). (Ken Takata)\nFiles:      src/option.c\n\nPatch 7.4.788 (after 7.4.787)\nProblem:    Can't build without the crypt feature. (John Marriott)\nSolution:   Add #ifdef's.\nFiles:      src/option.c\n\nPatch 7.4.789 (after 7.4.788)\nProblem:    Using freed memory and crash. (Dominique Pelle)\nSolution:   Correct use of pointers. (Hirohito Higashi)\nFiles:      src/option.c\n\nPatch 7.4.790 (after 7.4.786)\nProblem:    Test fails when the autochdir feature is not available.  Test\n            output contains the test script.\nSolution:   Check for the autochdir feature. (Kazunobu Kuriyama)  Only write\n            the relevant test output.\nFiles:      src/testdir/test_autocmd_option.in,\n            src/testdir/test_autocmd_option.ok\n\nPatch 7.4.791\nProblem:    The buffer list can be very long.\nSolution:   Add an argument to \":ls\" to specify the type of buffer to list.\n            (Marcin Szamotulski)\nFiles:      runtime/doc/windows.txt, src/buffer.c, src/ex_cmds.h\n\nPatch 7.4.792\nProblem:    Can only conceal text by defining syntax items.\nSolution:   Use matchadd() to define concealing. (Christian Brabandt)\nFiles:      runtime/doc/eval.txt, src/eval.c, src/ex_docmd.c,\n            src/proto/window.pro, src/screen.c, src/structs.h,\n            src/testdir/Make_amiga.mak,\n            src/testdir/Make_dos.mak, src/testdir/Make_ming.mak,\n            src/testdir/Make_os2.mak, src/testdir/Make_vms.mms,\n            src/testdir/Makefile, src/testdir/test_match_conceal.in,\n            src/testdir/test_match_conceal.ok, src/window.c\n\nPatch 7.4.793\nProblem:    Can't specify when not to ring the bell.\nSolution:   Add the 'belloff' option. (Christian Brabandt)\nFiles:      runtime/doc/options.txt, src/edit.c, src/ex_getln.c,\n            src/hangulin.c, src/if_lua.c, src/if_mzsch.c, src/if_tcl.c,\n            src/message.c, src/misc1.c, src/normal.c, src/option.c,\n            src/option.h, src/proto/misc1.pro, src/search.c, src/spell.c\n\nPatch 7.4.794\nProblem:    Visual Studio 2015 is not recognized.\nSolution:   Add the version numbers to the makefile. (Taro Muraoka)\nFiles:      src/Make_mvc.mak\n\nPatch 7.4.795\nProblem:    The 'fixeol' option is not copied to a new window.\nSolution:   Copy the option value. (Yasuhiro Matsumoto)\nFiles:      src/option.c\n\nPatch 7.4.796\nProblem:    Warning from 64 bit compiler.\nSolution:   Add type cast. (Mike Williams)\nFiles:      src/ops.c\n\nPatch 7.4.797\nProblem:    Crash when using more lines for the command line than\n            'maxcombine'.\nSolution:   Use the correct array index.  Also, do not try redrawing when\n            exiting.  And use screen_Columns instead of Columns.\nFiles:      src/screen.c\n\nPatch 7.4.798 (after 7.4.753)\nProblem:    Repeating a change in Visual mode does not work as expected.\n            (Urtica Dioica)\nSolution:   Make redo in Visual mode work better. (Christian Brabandt)\nFiles:      src/normal.c, src/testdir/test_listlbr.in,\n            src/testdir/test_listlbr.ok\n\nPatch 7.4.799\nProblem:    Accessing memory before an allocated block.\nSolution:   Check for not going before the start of a pattern. (Dominique\n            Pelle)\nFiles:      src/fileio.c\n\nPatch 7.4.800\nProblem:    Using freed memory when triggering CmdUndefined autocommands.\nSolution:   Set pointer to NULL. (Dominique Pelle)\nFiles:      src/ex_docmd.c\n\nPatch 7.4.801 (after 7.4.769)\nProblem:    Test for \":diffoff\" doesn't catch all potential problems.\nSolution:   Add a :diffthis and a :diffoff command. (Olaf Dabrunz)\nFiles:      src/testdir/test47.in\n\nPatch 7.4.802\nProblem:    Using \"A\" in Visual mode while 'linebreak' is set is not tested.\nSolution:   Add a test for this, verifies the problem is fixed. (Ingo Karkat)\nFiles:      src/testdir/test39.in, src/testdir/test39.ok\n\nPatch 7.4.803\nProblem:    C indent does not support C11 raw strings. (Mark Lodato)\nSolution:   Do not change indent inside the raw string.\nFiles:      src/search.c, src/misc1.c, src/edit.c, src/ops.c,\n            src/testdir/test3.in, src/testdir/test3.ok\n\nPatch 7.4.804\nProblem:    Xxd doesn't have a license notice.\nSolution:   Add license as indicated by Juergen.\nFiles:      src/xxd/xxd.c\n\nPatch 7.4.805\nProblem:    The ruler shows \"Bot\" even when there are only filler lines\n            missing. (Gary Johnson)\nSolution:   Use \"All\" when the first line and one filler line are visible.\nFiles:      src/buffer.c\n\nPatch 7.4.806\nProblem:    CTRL-A in Visual mode doesn't work properly with \"alpha\" in\n            'nrformats'.\nSolution:   Make it work. (Christian Brabandt)\nFiles:      src/ops.c, src/testdir/test_increment.in,\n            src/testdir/test_increment.ok\n\nPatch 7.4.807 (after 7.4.798)\nProblem:    After CTRL-V CTRL-A mode isn't updated. (Hirohito Higashi)\nSolution:   Clear the command line or update the displayed command.\nFiles:      src/normal.c\n\nPatch 7.4.808\nProblem:    On MS-Windows 8 IME input doesn't work correctly.\nSolution:   Read console input before calling MsgWaitForMultipleObjects().\n            (vim-jp, Nobuhiro Takasaki)\nFiles:      src/os_win32.c\n\nPatch 7.4.809 (after 7.4.802)\nProblem:    Test is duplicated.\nSolution:   Roll back 7.4.802.\nFiles:      src/testdir/test39.in, src/testdir/test39.ok\n\nPatch 7.4.810\nProblem:    With a sequence of commands using buffers in diff mode E749 is\n            given. (itchyny)\nSolution:   Skip unloaded buffer. (Hirohito Higashi)\nFiles:      src/diff.c\n\nPatch 7.4.811\nProblem:    Invalid memory access when using \"exe 'sc'\".\nSolution:   Avoid going over the end of the string. (Dominique Pelle)\nFiles:      src/ex_docmd.c\n\nPatch 7.4.812\nProblem:    Gcc sanitizer complains about using a NULL pointer to memmove().\nSolution:   Only call memmove when there is something to move. (Vittorio\n            Zecca)\nFiles:      src/memline.c\n\nPatch 7.4.813\nProblem:    It is not possible to save and restore character search state.\nSolution:   Add getcharsearch() and setcharsearch().  (James McCoy)\nFiles:      runtime/doc/eval.txt, src/eval.c, src/proto/search.pro,\n            src/search.c, src/testdir/test_charsearch.in,\n            src/testdir/test_charsearch.ok, src/testdir/Makefile,\n            src/testdir/Make_amiga.mak, src/testdir/Make_dos.mak,\n            src/testdir/Make_ming.mak, src/testdir/Make_os2.mak,\n            src/testdir/Make_vms.mms\n\nPatch 7.4.814\nProblem:    Illegal memory access with \"sy match a fold\".\nSolution:   Check for empty string. (Dominique Pelle)\nFiles:      src/syntax.c\n\nPatch 7.4.815\nProblem:    Invalid memory access when doing \":call g:\".\nSolution:   Check for an empty name. (Dominique Pelle)\nFiles:      src/eval.c\n\nPatch 7.4.816\nProblem:    Invalid memory access when doing \":fun X(\".\nSolution:   Check for missing ')'. (Dominique Pelle)\nFiles:      src/eval.c\n\nPatch 7.4.817\nProblem:    Invalid memory access in file_pat_to_reg_pat().\nSolution:   Use vim_isspace() instead of checking for a space only. (Dominique\n            Pelle)\nFiles:      src/fileio.c\n\nPatch 7.4.818\nProblem:    'linebreak' breaks c% if the last Visual selection was block.\n            (Chris Morganiser, Issue 389)\nSolution:   Handle Visual block mode differently. (Christian Brabandt)\nFiles:      src/normal.c, src/testdir/test_listlbr.in,\n            src/testdir/test_listlbr.ok\n\nPatch 7.4.819\nProblem:    Beeping when running the tests.\nSolution:   Fix 41 beeps. (Roland Eggner)\nFiles:      src/testdir/test17.in, src/testdir/test29.in,\n            src/testdir/test4.in, src/testdir/test61.in,\n            src/testdir/test82.in, src/testdir/test83.in,\n            src/testdir/test90.in, src/testdir/test95.in,\n            src/testdir/test_autoformat_join.in\n\nPatch 7.4.820\nProblem:    Invalid memory access in file_pat_to_reg_pat.\nSolution:   Avoid looking before the start of a string. (Dominique Pelle)\nFiles:      src/fileio.c\n\nPatch 7.4.821\nProblem:    Coverity reports a few problems.\nSolution:   Avoid the warnings. (Christian Brabandt)\nFiles:      src/ex_docmd.c, src/option.c, src/screen.c\n\nPatch 7.4.822\nProblem:    More problems reported by coverity.\nSolution:   Avoid the warnings. (Christian Brabandt)\nFiles:      src/os_unix.c, src/eval.c, src/ex_cmds.c, src/ex_cmds2.c,\n            src/ex_getln.c, src/fold.c, src/gui.c, src/gui_w16.c,\n            src/gui_w32.c, src/if_cscope.c, src/if_xcmdsrv.c, src/move.c,\n            src/normal.c, src/regexp.c, src/syntax.c, src/ui.c, src/window.c\n\nPatch 7.4.823\nProblem:    Cursor moves after CTRL-A on alphabetic character.\nSolution:   (Hirohito Higashi, test by Christian Brabandt)\nFiles:      src/testdir/test_increment.in, src/testdir/test_increment.ok,\n            src/ops.c\n\nPatch 7.4.824 (after 7.4.813)\nProblem:    Can't compile without the multi-byte feature. (John Marriott)\nSolution:   Add #ifdef.\nFiles:      src/eval.c\n\nPatch 7.4.825\nProblem:    Invalid memory access for \":syn keyword x a[\".\nSolution:   Do not skip over the NUL. (Dominique Pelle)\nFiles:      src/syntax.c\n\nPatch 7.4.826\nProblem:    Compiler warnings and errors.\nSolution:   Make it build properly without the multi-byte feature.\nFiles:      src/eval.c, src/search.c\n\nPatch 7.4.827\nProblem:    Not all test targets are in the Makefile.\nSolution:   Add the missing targets.\nFiles:      src/Makefile\n\nPatch 7.4.828\nProblem:    Crash when using \"syn keyword x c\". (Dominique Pelle)\nSolution:   Initialize the keyword table. (Raymond Ko, PR 397)\nFiles:      src/syntax.c\n\nPatch 7.4.829\nProblem:    Crash when clicking in beval balloon. (Travis Lebsock)\nSolution:   Use PostMessage() instead of DestroyWindow(). (Raymond Ko, PR 298)\nFiles:      src/gui_w32.c\n\nPatch 7.4.830\nProblem:    Resetting 'encoding' when doing \":set all&\" causes problems.\n            (Bjorn Linse) Display is not updated.\nSolution:   Do not reset 'encoding'. Do a full redraw.\nFiles:      src/option.c\n\nPatch 7.4.831\nProblem:    When expanding `=expr` on the command line and encountering an\n            error, the command is executed anyway.\nSolution:   Bail out when an error is detected.\nFiles:      src/misc1.c\n\nPatch 7.4.832\nProblem:    $HOME in `=$HOME . '/.vimrc'` is expanded too early.\nSolution:   Skip over `=expr` when expanding environment names.\nFiles:      src/misc1.c\n\nPatch 7.4.833\nProblem:    More side effects of \":set all&\" are missing. (Bj\u00f6rn Linse)\nSolution:   Call didset_options() and add didset_options2() to collect more\n            side effects to take care of.  Still not everything...\nFiles:      src/option.c\n\nPatch 7.4.834\nProblem:    gettabvar() doesn't work after Vim start. (Szymon Wrozynski)\nSolution:   Handle first window in tab still being NULL. (Christian Brabandt)\nFiles:      src/eval.c, src/testdir/test91.in, src/testdir/test91.ok\n\nPatch 7.4.835\nProblem:    Comparing utf-8 sequences does not handle different byte sizes\n            correctly.\nSolution:   Get the byte size of each character. (Dominique Pelle)\nFiles:      src/misc2.c\n\nPatch 7.4.836\nProblem:    Accessing uninitialized memory.\nSolution:   Add missing calls to init_tv(). (Dominique Pelle)\nFiles:      src/eval.c\n\nPatch 7.4.837\nProblem:    Compiler warning with MSVC compiler when using +sniff.\nSolution:   Use Sleep() instead of _sleep(). (Tux)\nFiles:      src/if_sniff.c\n\nPatch 7.4.838 (after 7.4.833)\nProblem:    Can't compile without the crypt feature. (John Marriott)\nSolution:   Add #ifdef.\nFiles:      src/option.c\n\nPatch 7.4.839\nProblem:    Compiler warning on 64-bit system.\nSolution:   Add cast to int. (Mike Williams)\nFiles:      src/search.c\n\nPatch 7.4.840 (after 7.4.829)\nProblem:    Tooltip window stays open.\nSolution:   Send a WM_CLOSE message. (Jurgen Kramer)\nFiles:      src/gui_w32.c\n\nPatch 7.4.841\nProblem:    Can't compile without the multi-byte feature. (John Marriott)\nSolution:   Add more #ifdef's.\nFiles:      src/option.c\n\nPatch 7.4.842 (after 7.4.840)\nProblem:    Sending too many messages to close the balloon.\nSolution:   Only send a WM_CLOSE message. (Jurgen Kramer)\nFiles:      src/gui_w32.c\n\nPatch 7.4.843 (after 7.4.835)\nProblem:    Still possible to go beyond the end of a string.\nSolution:   Check for NUL also in second string. (Dominique Pelle)\nFiles:      src/misc2.c\n\nPatch 7.4.844\nProblem:    When '#' is in 'isident' the is# comparator doesn't work.\nSolution:   Don't use vim_isIDc(). (Yasuhiro Matsumoto)\nFiles:      src/eval.c, src/testdir/test_comparators.in,\n            src/testdir/test_comparators.ok, src/testdir/Makefile,\n            src/testdir/Make_amiga.mak, src/testdir/Make_dos.mak,\n            src/testdir/Make_ming.mak, src/testdir/Make_os2.mak,\n            src/testdir/Make_vms.mms\n\nPatch 7.4.845\nProblem:    Compiler warning for possible loss of data.\nSolution:   Add a type cast. (Erich Ritz)\nFiles:      src/misc1.c\n\nPatch 7.4.846\nProblem:    Some GitHub users don't know how to use issues.\nSolution:   Add a file that explains the basics of contributing.\nFiles:      Filelist, CONTRIBUTING.md\n\nPatch 7.4.847\nProblem:    \"vi)d\" may leave a character behind.\nSolution:   Skip over multi-byte character. (Christian Brabandt)\nFiles:      src/search.c\n\nPatch 7.4.848\nProblem:    CTRL-A on hex number in Visual block mode is incorrect.\nSolution:   Account for the \"0x\". (Hirohito Higashi)\nFiles:      src/charset.c, src/testdir/test_increment.in,\n            src/testdir/test_increment.ok\n\nPatch 7.4.849\nProblem:    Moving the cursor in Insert mode starts new undo sequence.\nSolution:   Add CTRL-G U to keep the undo sequence for the following cursor\n            movement command. (Christian Brabandt)\nFiles:      runtime/doc/insert.txt, src/edit.c, src/testdir/test_mapping.in,\n            src/testdir/test_mapping.ok\n\nPatch 7.4.850 (after 7.4.846)\nProblem:    <Esc> does not show up.\nSolution:   Use &gt; and &lt;. (Kazunobu Kuriyama)\nFiles:      CONTRIBUTING.md\n\nPatch 7.4.851\nProblem:    Saving and restoring the console buffer does not work properly.\nSolution:   Instead of ReadConsoleOutputA/WriteConsoleOutputA use\n            CreateConsoleScreenBuffer and SetConsoleActiveScreenBuffer.\n            (Ken Takata)\nFiles:      src/os_win32.c\n\nPatch 7.4.852\nProblem:    On MS-Windows console Vim uses ANSI APIs for keyboard input and\n            console output, it cannot input/output Unicode characters.\nSolution:   Use Unicode APIs for console I/O. (Ken Takata, Yasuhiro Matsumoto)\nFiles:      src/os_win32.c, src/ui.c, runtime/doc/options.txt\n\nPatch 7.4.853\nProblem:    \"zt\" in diff mode does not always work properly. (Gary Johnson)\nSolution:   Don't count filler lines twice. (Christian Brabandt)\nFiles:      src/move.c\n\nPatch 7.4.854 (after 7.4.850)\nProblem:    Missing information about runtime files.\nSolution:   Add section about runtime files. (Christian Brabandt)\nFiles:      CONTRIBUTING.md\n\nPatch 7.4.855\nProblem:    GTK: font glitches for combining characters\nSolution:   Use pango_shape_full() instead of pango_shape(). (luchr, PR #393)\nFiles:      src/gui_gtk_x11.c\n\nPatch 7.4.856\nProblem:    \"zt\" still doesn't work well with filler lines. (Gary Johnson)\nSolution:   Check for filler lines above the cursor. (Christian Brabandt)\nFiles:      src/move.c\n\nPatch 7.4.857\nProblem:    Dragging the current tab with the mouse doesn't work properly.\nSolution:   Take the current tabpage index into account. (Hirohito Higashi)\nFiles:      src/normal.c\n\nPatch 7.4.858\nProblem:    It's a bit clumsy to execute a command on a list of matches.\nSolution:   Add the \":ldo\", \":lfdo\", \":cdo\" and \":cfdo\" commands. (Yegappan\n            Lakshmanan)\nFiles:      runtime/doc/cmdline.txt, runtime/doc/editing.txt,\n            runtime/doc/index.txt, runtime/doc/quickfix.txt,\n            runtime/doc/tabpage.txt, runtime/doc/windows.txt, src/ex_cmds.h,\n            src/ex_cmds2.c, src/ex_docmd.c, src/proto/quickfix.pro,\n            src/quickfix.c, src/testdir/Make_amiga.mak,\n            src/testdir/Make_dos.mak, src/testdir/Make_ming.mak,\n            src/testdir/Make_os2.mak, src/testdir/Make_vms.mms,\n            src/testdir/Makefile, src/testdir/test_cdo.in,\n            src/testdir/test_cdo.ok\n\nPatch 7.4.859\nProblem:    Vim doesn't recognize all htmldjango files.\nSolution:   Recognize a comment. (Daniel Hahler, PR #410)\nFiles:      runtime/filetype.vim\n\nPatch 7.4.860\nProblem:    Filetype detection is outdated.\nSolution:   Include all recent and not-so-recent changes.\nFiles:      runtime/filetype.vim\n\nPatch 7.4.861 (after 7.4.855)\nProblem:    pango_shape_full() is not always available.\nSolution:   Add a configure check.\nFiles:      src/configure.in, src/auto/configure, src/config.h.in,\n            src/gui_gtk_x11.c\n\nPatch 7.4.862 (after 7.4.861)\nProblem:    Still problems with pango_shape_full() not available.\nSolution:   Change AC_TRY_COMPILE to AC_TRY_LINK.\nFiles:      src/configure.in, src/auto/configure\n\nPatch 7.4.863 (after 7.4.856)\nProblem:    plines_nofill() used without the diff feature.\nSolution:   Define PLINES_NOFILL().\nFiles:      src/macros.h, src/move.c\n\nPatch 7.4.864 (after 7.4.858)\nProblem:    Tiny build fails.\nSolution:   Put qf_ items inside #ifdef.\nFiles:      src/ex_docmd.c\n\nPatch 7.4.865\nProblem:    Compiler warning for uninitialized variable.\nSolution:   Initialize.\nFiles:      src/ex_cmds2.c\n\nPatch 7.4.866\nProblem:    Crash when changing the 'tags' option from a remote command.\n            (Benjamin Fritz)\nSolution:   Instead of executing messages immediately, use a queue, like for\n            netbeans. (James Kolb)\nFiles:      src/ex_docmd.c, src/getchar.c, src/gui_gtk_x11.c, src/gui_w48.c,\n            src/gui_x11.c, src/if_xcmdsrv.c, src/misc2.c, src/os_unix.c,\n            src/proto/if_xcmdsrv.pro, src/proto/misc2.pro, src/macros.h\n\nPatch 7.4.867 (after 7.4.866)\nProblem:    Can't build on MS-Windows. (Taro Muraoka)\nSolution:   Adjust #ifdef.\nFiles:      src/misc2.c\n\nPatch 7.4.868\nProblem:    'smarttab' is also effective when 'paste' is enabled. (Alexander\n            Monakov)\nSolution:   Disable 'smarttab' when 'paste' is set. (Christian Brabandt)\n            Do the same for 'expandtab'.\nFiles:      src/option.c, src/structs.h\n\nPatch 7.4.869\nProblem:    MS-Windows: scrolling may cause text to disappear when using an\n            Intel GPU.\nSolution:   Call GetPixel(). (Yohei Endo)\nFiles:      src/gui_w48.c\n\nPatch 7.4.870\nProblem:    May get into an invalid state when using getchar() in an\n            expression mapping.\nSolution:   Anticipate mod_mask to change. (idea by Yukihiro Nakadaira)\nFiles:      src/getchar.c\n\nPatch 7.4.871\nProblem:    Vim leaks memory, when 'wildignore' filters out all matches.\nSolution:   Free the files array when it becomes empty.\nFiles:      src/misc1.c\n\nPatch 7.4.872\nProblem:    Not using CI services available.\nSolution:   Add configuration files for travis and appveyor. (Ken Takata,\n            vim-jp, PR #401)\nFiles:      .travis.yml, appveyor.yml, Filelist\n\nPatch 7.4.873 (after 7.4.866)\nProblem:    Compiler warning for unused variable. (Tony Mechelynck)\nSolution:   Remove the variable.  Also fix int vs long_u mixup.\nFiles:      src/if_xcmdsrv.c\n\nPatch 7.4.874\nProblem:    MS-Windows: When Vim runs inside another application, the size\n            isn't right.\nSolution:   When in child mode compute the size differently. (Agorgianitis\n            Loukas)\nFiles:      src/gui_w48.c\n\nPatch 7.4.875\nProblem:    Not obvious how to contribute.\nSolution:   Add a remark about CONTRIBUTING.md to README.md\nFiles:      README.md\n\nPatch 7.4.876\nProblem:    Windows7: when using vim.exe with msys or msys2, conhost.exe\n            (console window provider on Windows7) will freeze or crash.\nSolution:   Make original screen buffer active, before executing external\n            program.  And when the program is finished, revert to vim's one.\n            (Taro Muraoka)\nFiles:      src/os_win32.c\n\nPatch 7.4.877 (after 7.4.843)\nProblem:    \":find\" sometimes fails. (Excanoe)\nSolution:   Compare current characters instead of previous ones.\nFiles:      src/misc2.c\n\nPatch 7.4.878\nProblem:    Coverity error for clearing only one byte of struct.\nSolution:   Clear the whole struct. (Dominique Pelle)\nFiles:      src/ex_docmd.c\n\nPatch 7.4.879\nProblem:    Can't see line numbers in nested function calls.\nSolution:   Add line number to the file name. (Alberto Fanjul)\nFiles:      src/eval.c\n\nPatch 7.4.880\nProblem:    No build and coverage status.\nSolution:   Add links to the README file. (Christian Brabandt)\nFiles:      README.md\n\nPatch 7.4.881 (after 7.4.879)\nProblem:    Test 49 fails.\nSolution:   Add line number to check of call stack.\nFiles:      src/testdir/test49.vim\n\nPatch 7.4.882\nProblem:    When leaving the command line window with CTRL-C while a\n            completion menu is displayed the menu isn't removed.\nSolution:   Force a screen update. (Hirohito Higashi)\nFiles:      src/edit.c\n\nPatch 7.4.883 (after 7.4.818)\nProblem:    Block-mode replace works characterwise instead of blockwise after\n            column 147. (Issue #422)\nSolution:   Set Visual mode. (Christian Brabandt)\nFiles:      src/normal.c, src/testdir/test_listlbr.in,\n            src/testdir/test_listlbr.ok\n\nPatch 7.4.884\nProblem:    Travis also builds on a tag push.\nSolution:   Filter out tag pushes. (Kenichi Ito)\nFiles:      .travis.yml\n\nPatch 7.4.885\nProblem:    When doing an upwards search without wildcards the search fails if\n            the initial directory doesn't exist.\nSolution:   Fix the non-wildcard case. (Stefan Kempf)\nFiles:      src/misc2.c\n\nPatch 7.4.886 (after 7.4.876)\nProblem:    Windows7: Switching screen buffer causes flicker when using\n            system().\nSolution:   Instead of actually switching screen buffer, duplicate the handle.\n            (Yasuhiro Matsumoto)\nFiles:      src/os_win32.c\n\nPatch 7.4.887\nProblem:    Using uninitialized memory for regexp with back reference.\n            (Dominique Pelle)\nSolution:   Initialize end_lnum.\nFiles:      src/regexp_nfa.c\n\nPatch 7.4.888\nProblem:    The OptionSet autocommands are not triggered from setwinvar().\nSolution:   Do not use switch_win() when not needed. (Hirohito Higashi)\nFiles:      src/eval.c\n\nPatch 7.4.889\nProblem:    Triggering OptionSet from setwinvar() isn't tested.\nSolution:   Add a test. (Christian Brabandt)\nFiles:      src/testdir/test_autocmd_option.in,\n            src/testdir/test_autocmd_option.ok\n\nPatch 7.4.890\nProblem:    Build failure when using dynamic python but not python3.\nSolution:   Adjust the #if to also include DYNAMIC_PYTHON3 and UNIX.\nFiles:      src/if_python3.c\n\nPatch 7.4.891\nProblem:    Indentation of array initializer is wrong.\nSolution:   Avoid that calling find_start_rawstring() changes the position\n            returned by find_start_comment(), add a test. (Hirohito Higashi)\nFiles:      src/misc1.c, src/testdir/test3.in, src/testdir/test3.ok\n\nPatch 7.4.892\nProblem:    On MS-Windows the iconv DLL may have a different name.\nSolution:   Also try libiconv2.dll and libiconv-2.dll. (Yasuhiro Matsumoto)\nFiles:      src/mbyte.c\n\nPatch 7.4.893\nProblem:    C indenting is wrong below a \"case (foo):\" because it is\n            recognized as a C++ base class construct.  Issue #38.\nSolution:   Check for the case keyword.\nFiles:      src/misc1.c, src/testdir/test3.in, src/testdir/test3.ok\n\nPatch 7.4.894\nProblem:    vimrun.exe is picky about the number of spaces before -s.\nSolution:   Skip all spaces. (Cam Sinclair)\nFiles:      src/vimrun.c\n\nPatch 7.4.895\nProblem:    Custom command line completion does not work for a command\n            containing digits.\nSolution:   Skip over the digits. (suggested by Yasuhiro Matsumoto)\nFiles:      src/ex_docmd.c\n\nPatch 7.4.896\nProblem:    Editing a URL, which netrw should handle, doesn't work.\nSolution:   Avoid changing slashes to backslashes. (Yasuhiro Matsumoto)\nFiles:      src/fileio.c, src/os_mswin.c\n\nPatch 7.4.897\nProblem:    Freeze and crash when there is a sleep in a remote command.\n            (Karl Yngve Lerv\u00e5g)\nSolution:   Remove a message from the queue before dealing with it. (James\n            Kolb)\nFiles:      src/if_xcmdsrv.c\n\nPatch 7.4.898\nProblem:    The 'fixendofline' option is set on with \":edit\".\nSolution:   Don't set the option when clearing a buffer. (Yasuhiro Matsumoto)\nFiles:      src/buffer.c\n\nPatch 7.4.899\nProblem:    README file is not optimal.\nSolution:   Move buttons, update some text. (closes #460)\nFiles:      README.txt, README.md\n\nPatch 7.4.900 (after 7.4.899)\nProblem:    README file can still be improved\nSolution:   Add a couple of links. (Christian Brabandt)\nFiles:      README.md\n\nPatch 7.4.901\nProblem:    When a BufLeave autocommand changes folding in a way it syncs\n            undo, undo can be corrupted.\nSolution:   Prevent undo sync. (Jacob Niehus)\nFiles:      src/popupmnu.c\n\nPatch 7.4.902\nProblem:    Problems with using the MS-Windows console.\nSolution:   Revert patches 7.4.851, 7.4.876 and 7.4.886 until we find a better\n            solution. (suggested by Ken Takata)\nFiles:      src/os_win32.c\n\nPatch 7.4.903\nProblem:    MS-Windows: When 'encoding' differs from the current code page,\n            expanding wildcards may cause illegal memory access.\nSolution:   Allocate a longer buffer. (Ken Takata)\nFiles:      src/misc1.c\n\nPatch 7.4.904\nProblem:    Vim does not provide .desktop files.\nSolution:   Include and install .desktop files. (James McCoy, closes #455)\nFiles:      Filelist, runtime/vim.desktop, runtime/gvim.desktop, src/Makefile\n\nPatch 7.4.905\nProblem:    Python interface can produce error \"vim.message' object has no\n            attribute 'isatty'\".\nSolution:   Add dummy isatty(), readable(), etc. (closes #464)\nFiles:      src/if_py_both.h, src/testdir/test86.in, src/testdir/test86.ok,\n            src/testdir/test87.in, src/testdir/test87.ok\n\nPatch 7.4.906\nProblem:    On MS-Windows the viminfo file is (always) given the hidden\n            attribute. (raulnac)\nSolution:   Check the hidden attribute in a different way. (Ken Takata)\nFiles:      src/ex_cmds.c, src/os_win32.c, src/os_win32.pro\n\nPatch 7.4.907\nProblem:    Libraries for dynamically loading interfaces can only be defined\n            at compile time.\nSolution:   Add options to specify the dll names. (Kazuki Sakamoto,\n            closes #452)\nFiles:      runtime/doc/if_lua.txt, runtime/doc/if_perl.txt,\n            runtime/doc/if_pyth.txt, runtime/doc/if_ruby.txt,\n            runtime/doc/options.txt, src/if_lua.c, src/if_perl.xs,\n            src/if_python.c, src/if_python3.c, src/if_ruby.c, src/option.c,\n            src/option.h\n\nPatch 7.4.908 (after 7.4.907)\nProblem:    Build error with MingW compiler. (Cesar Romani)\nSolution:   Change #if into #ifdef.\nFiles:      src/if_perl.xs\n\nPatch 7.4.909 (after 7.4.905)\nProblem:    \"make install\" fails.\nSolution:   Only try installing desktop files if the destination directory\n            exists.\nFiles:      src/Makefile\n\nPatch 7.4.910 (after 7.4.905)\nProblem:    Compiler complains about type punned pointer.\nSolution:   Use another way to increment the ref count.\nFiles:      src/if_py_both.h\n\nPatch 7.4.911\nProblem:    t_Ce and t_Cs are documented but not supported. (Hirohito Higashi)\nSolution:   Define the options.\nFiles:      src/option.c\n\nPatch 7.4.912\nProblem:    Wrong indenting for C++ constructor.\nSolution:   Recognize ::.  (Anhong)\nFiles:      src/misc1.c, src/testdir/test3.in, src/testdir/test3.ok\n\nPatch 7.4.913\nProblem:    No utf-8 support for the hangul input feature.\nSolution:   Add utf-8 support. (Namsh)\nFiles:      src/gui.c, src/hangulin.c, src/proto/hangulin.pro, src/screen.c,\n            src/ui.c, runtime/doc/hangulin.txt, src/feature.h\n\nPatch 7.4.914\nProblem:    New compiler warning: logical-not-parentheses\nSolution:   Silence the warning.\nFiles:      src/term.c\n\nPatch 7.4.915\nProblem:    When removing from 'path' and then adding, a comma may go missing.\n            (Malcolm Rowe)\nSolution:   Fix the check for P_ONECOMMA. (closes #471)\nFiles:      src/option.c, src/testdir/test_options.in,\n            src/testdir/test_options.ok\n\nPatch 7.4.916\nProblem:    When running out of memory while copying a dict memory may be\n            freed twice. (ZyX)\nSolution:   Do not call the garbage collector when running out of memory.\nFiles:      src/misc2.c\n\nPatch 7.4.917\nProblem:    Compiler warning for comparing signed and unsigned.\nSolution:   Add a type cast.\nFiles:      src/hangulin.c\n\nPatch 7.4.918\nProblem:    A digit in an option name has problems.\nSolution:   Rename 'python3dll' to 'pythonthreedll'.\nFiles:      src/option.c, src/option.h, runtime/doc/options.txt\n\nPatch 7.4.919\nProblem:    The dll options are not in the options window.\nSolution:   Add the dll options.  And other fixes.\nFiles:\t    runtime/optwin.vim\n\nPatch 7.4.920\nProblem:    The rubydll option is not in the options window.\nSolution:   Add the rubydll option.\nFiles:\t    runtime/optwin.vim\n\nPatch 7.4.921 (after 7.4.906)\nProblem:    Missing proto file update. (Randall W. Morris)\nSolution:   Add the missing line for mch_ishidden.\nFiles:      src/proto/os_win32.pro\n\nPatch 7.4.922\nProblem:    Leaking memory with \":helpt {dir-not-exists}\".\nSolution:   Free dirname. (Dominique Pelle)\nFiles:      src/ex_cmds.c\n\nPatch 7.4.923\nProblem:    Prototypes not always generated.\nSolution:   Change #if to OR with PROTO.\nFiles:      src/window.c\n\nPatch 7.4.924\nProblem:    DEVELOPER_DIR gets reset by configure.\nSolution:   Do not reset DEVELOPER_DIR when there is no --with-developer-dir\n            argument. (Kazuki Sakamoto, closes #482)\nFiles:      src/configure.in, src/auto/configure\n\nPatch 7.4.925\nProblem:    User may yank or put using the register being recorded in.\nSolution:   Add the recording register in the message. (Christian Brabandt,\n            closes #470)\nFiles:      runtime/doc/options.txt, runtime/doc/repeat.txt, src/ops.c,\n            src/option.h, src/screen.c\n\nPatch 7.4.926\nProblem:    Completing the longest match doesn't work properly with multi-byte\n            characters.\nSolution:   When using multi-byte characters use another way to find the\n            longest match. (Hirohito Higashi)\nFiles:      src/ex_getln.c, src/testdir/test_utf8.in, src/testdir/test_utf8.ok\n\nPatch 7.4.927\nProblem:    Ruby crashes when there is a runtime error.\nSolution:   Use ruby_options() instead of ruby_process_options(). (Damien)\nFiles:      src/if_ruby.c\n\nPatch 7.4.928\nProblem:    A clientserver message interrupts handling keys of a mapping.\nSolution:   Have mch_inchar() send control back to WaitForChar when it is\n            interrupted by server message. (James Kolb)\nFiles:      src/os_unix.c\n\nPatch 7.4.929\nProblem:    \"gv\" after paste selects one character less if 'selection' is\n            \"exclusive\".\nSolution:   Increment the end position. (Christian Brabandt)\nFiles:      src/normal.c, src/testdir/test94.in, src/testdir/test94.ok\n\nPatch 7.4.930\nProblem:    MS-Windows: Most users appear not to like the window border.\nSolution:   Remove WS_EX_CLIENTEDGE. (Ian Halliday)\nFiles:      src/gui_w32.c\n\nPatch 7.4.931 (after 7.4.929)\nProblem:    Test 94 fails on some systems.\nSolution:   Set 'encoding' to utf-8.\nFiles:      src/testdir/test94.in\n\nPatch 7.4.932 (after 7.4.926)\nProblem:    test_utf8 has confusing dummy command.\nSolution:   Use a real command instead of a colon.\nFiles:      src/testdir/test_utf8.in\n\nPatch 7.4.933 (after 7.4.926)\nProblem:    Crash when using longest completion match.\nSolution:   Fix array index.\nFiles:      src/ex_getln.c\n\nPatch 7.4.934\nProblem:    Appveyor also builds on a tag push.\nSolution:   Add a skip_tags line. (Kenichi Ito, closes #489)\nFiles:      appveyor.yml\n\nPatch 7.4.935 (after 7.4.932)\nProblem:    test_utf8 fails on MS-Windows when executed with gvim.\nSolution:   Use the insert flag on feedkeys() to put the string before the\n            \":\" that was already read when checking for available chars.\nFiles:      src/testdir/test_utf8.in\n\nPatch 7.4.936\nProblem:    Crash when dragging with the mouse.\nSolution:   Add safety check for NULL pointer. Check mouse position for valid\n            value. (Hirohito Higashi)\nFiles:      src/window.c, src/term.c\n\nPatch 7.4.937\nProblem:    Segfault reading uninitialized memory.\nSolution:   Do not read match \\z0, it does not exist. (Marius Gedminas, closes\n            #497)\nFiles:      src/regexp_nfa.c\n\nPatch 7.4.938\nProblem:    X11 and GTK have more mouse buttons than Vim supports.\nSolution:   Recognize more mouse buttons. (Benoit Pierre, closes #498)\nFiles:      src/gui_gtk_x11.c, src/gui_x11.c\n\nPatch 7.4.939\nProblem:    Memory leak when encountering a syntax error.\nSolution:   Free the memory. (Dominique Pelle)\nFiles:      src/ex_docmd.c\n\nPatch 7.4.940\nProblem:    vt52 terminal codes are not correct.\nSolution:   Move entries outside of #if. (Random)  Adjustments based on\n            documented codes.\nFiles:      src/term.c\n\nPatch 7.4.941\nProblem:    There is no way to ignore case only for tag searches.\nSolution:   Add the 'tagcase' option. (Gary Johnson)\nFiles:      runtime/doc/options.txt, runtime/doc/quickref.txt,\n            runtime/doc/tagsrch.txt, runtime/doc/usr_29.txt,\n            runtime/optwin.vim, src/Makefile, src/buffer.c, src/option.c,\n            src/option.h, src/structs.h, src/tag.c,\n            src/testdir/Make_amiga.mak, src/testdir/Make_dos.mak,\n            src/testdir/Make_ming.mak, src/testdir/Make_os2.mak,\n            src/testdir/Make_vms.mms, src/testdir/Makefile,\n            src/testdir/test_tagcase.in, src/testdir/test_tagcase.ok\n\nPatch 7.4.942 (after 7.4.941)\nProblem:    test_tagcase breaks for small builds.\nSolution:   Bail out of the test early. (Hirohito Higashi)\nFiles:      src/testdir/test_tagcase.in\n\nPatch 7.4.943\nProblem:    Tests are not run.\nSolution:   Add test_writefile to makefiles. (Ken Takata)\nFiles:      src/testdir/Make_amiga.mak, src/testdir/Make_dos.mak,\n            src/testdir/Make_ming.mak, src/testdir/Make_os2.mak,\n            src/testdir/Make_vms.mms, src/testdir/Makefile\n\nPatch 7.4.944\nProblem:    Writing tests for Vim script is hard.\nSolution:   Add assertEqual(), assertFalse() and assertTrue() functions.  Add\n            the v:errors variable.  Add the runtest script. Add a first new\n            style test script.\nFiles:      src/eval.c, src/vim.h, src/misc2.c, src/testdir/Makefile,\n            src/testdir/runtest.vim, src/testdir/test_assert.vim,\n            runtime/doc/eval.txt\n\nPatch 7.4.945 (after 7.4.944)\nProblem:    New style testing is incomplete.\nSolution:   Add the runtest script to the list of distributed files.\n            Add the new functions to the function overview.\n            Rename the functions to match Vim function style.\n            Move undolevels testing into a new style test script.\nFiles:      Filelist, runtime/doc/usr_41.txt, runtime/doc/eval.txt,\n            src/testdir/test_assert.vim, src/testdir/Makefile,\n            src/testdir/test_undolevels.vim, src/testdir/test100.in,\n            src/testdir/test100.ok\n\nPatch 7.4.946 (after 7.4.945)\nProblem:    Missing changes in source file.\nSolution:   Include changes to the eval.c file.\nFiles:      src/eval.c\n\nPatch 7.4.947\nProblem:    Test_listchars fails with MingW. (Michael Soyka)\nSolution:   Add the test to the ones that need the fileformat fixed.\n            (Christian Brabandt)\nFiles:      src/testdir/Make_ming.mak\n\nPatch 7.4.948\nProblem:    Can't build when the insert_expand feature is disabled.\nSolution:   Add #ifdefs. (Dan Pasanen, closes #499)\nFiles:      src/eval.c, src/fileio.c\n\nPatch 7.4.949\nProblem:    When using 'colorcolumn' and there is a sign with a fullwidth\n            character the highlighting is wrong. (Andrew Stewart)\nSolution:   Only increment vcol when in the right state. (Christian Brabandt)\nFiles:      src/screen.c, src/testdir/test_listlbr_utf8.in,\n            src/testdir/test_listlbr_utf8.ok\n\nPatch 7.4.950\nProblem:    v:errors is not initialized.\nSolution:   Initialize it to an empty list. (Thinca)\nFiles:      src/eval.c\n\nPatch 7.4.951\nProblem:    Sorting number strings does not work as expected. (Luc Hermitte)\nSolution:   Add the \"N\" argument to sort()\nFiles:      src/eval.c, runtime/doc/eval.txt, src/testdir/test_alot.vim,\n            src/testdir/test_sort.vim, src/testdir/Makefile\n\nPatch 7.4.952\nProblem:    'lispwords' is tested in the old way.\nSolution:   Make a new style test for 'lispwords'.\nFiles:      src/testdir/test_alot.vim, src/testdir/test_lispwords.vim,\n            src/testdir/test100.in, src/testdir/test100.ok,\n            src/testdir/Make_amiga.mak, src/testdir/Make_dos.mak,\n            src/testdir/Make_ming.mak, src/testdir/Make_os2.mak,\n            src/testdir/Make_vms.mms, src/testdir/Makefile\n\nPatch 7.4.953\nProblem:    When a test script navigates to another buffer the .res file is\n            created with the wrong name.\nSolution:   Use the \"testname\" for the .res file. (Damien)\nFiles:      src/testdir/runtest.vim\n\nPatch 7.4.954\nProblem:    When using Lua there may be a crash. (issue #468)\nSolution:   Avoid using an uninitialized tv. (Yukihiro Nakadaira)\nFiles:      src/if_lua.c\n\nPatch 7.4.955\nProblem:    Vim doesn't recognize .pl6 and .pod6 files.\nSolution:   Recognize them as perl6 and pod6. (Mike Eve, closes #511)\nFiles:      runtime/filetype.vim\n\nPatch 7.4.956\nProblem:    A few more file name extensions not recognized.\nSolution:   Add .asciidoc, .bzl, .gradle, etc.\nFiles:      runtime/filetype.vim\n\nPatch 7.4.957\nProblem:    Test_tagcase fails when using another language than English.\nSolution:   Set the messages language to C. (Kenichi Ito)\nFiles:      src/testdir/test_tagcase.in\n\nPatch 7.4.958\nProblem:    Vim checks if the directory \"$TMPDIR\" exists.\nSolution:   Do not check if the name starts with \"$\".\nFiles:      src/fileio.c\n\nPatch 7.4.959\nProblem:    When setting 'term' the clipboard ownership is lost.\nSolution:   Do not call clip_init(). (James McCoy)\nFiles:      src/term.c\n\nPatch 7.4.960\nProblem:    Detecting every version of nmake is clumsy.\nSolution:   Use a tiny C program to get the version of _MSC_VER. (Ken Takata)\nFiles:      src/Make_mvc.mak\n\nPatch 7.4.961\nProblem:    Test107 fails in some circumstances.\nSolution:   When using \"zt\", \"zb\" and \"z=\" recompute the fraction.\nFiles:      src/normal.c, src/window.c, src/proto/window.pro\n\nPatch 7.4.962\nProblem:    Cannot run the tests with gvim.  Cannot run individual new tests.\nSolution:   Add the -f flag. Add new test targets in Makefile.\nFiles:      src/Makefile, src/testdir/Makefile\n\nPatch 7.4.963\nProblem:    test_listlbr_utf8 sometimes fails.\nSolution:   Don't use a literal multibyte character but <C-V>uXXXX. Do not\n            dump the screen highlighting. (Christian Brabandt, closes #518)\nFiles:      src/testdir/test_listlbr_utf8.in, src/testdir/test_listlbr_utf8.ok\n\nPatch 7.4.964\nProblem:    Test 87 doesn't work in a shadow directory.\nSolution:   Handle the extra subdirectory. (James McCoy, closes #515)\nFiles:      src/testdir/test87.in\n\nPatch 7.4.965\nProblem:    On FreeBSD /dev/fd/ files are special.\nSolution:   Use is_dev_fd_file() also for FreeBSD. (Derek Schrock, closes #521)\nFiles:      src/fileio.c\n\nPatch 7.4.966\nProblem:    Configure doesn't work with a space in a path.\nSolution:   Put paths in quotes. (James McCoy, closes #525)\nFiles:      src/configure.in, src/auto/configure\n\nPatch 7.4.967\nProblem:    Cross compilation on MS-windows doesn't work well.\nSolution:   Tidy up cross compilation across architectures with Visual Studio.\n            (Mike Williams)\nFiles:      src/Make_mvc.mak\n\nPatch 7.4.968\nProblem:    test86 and test87 are flaky in Appveyor.\nSolution:   Reduce the count from 8 to 7. (suggested by ZyX)\nFiles:      src/testdir/test86.in, src/testdir/test87.in\n\nPatch 7.4.969\nProblem:    Compiler warnings on Windows x64 build.\nSolution:   Add type casts. (Mike Williams)\nFiles:      src/option.c\n\nPatch 7.4.970\nProblem:    Rare crash in getvcol(). (Timo Mihaljov)\nSolution:   Check for the buffer being NULL in init_preedit_start_col.\n            (Hirohito Higashi, Christian Brabandt)\nFiles:      src/mbyte.c\n\nPatch 7.4.971\nProblem:    The asin() function can't be used.\nSolution:   Sort the function table properly. (Watiko)\nFiles:      src/eval.c\n\nPatch 7.4.972\nProblem:    Memory leak when there is an error in setting an option.\nSolution:   Free the saved value (Christian Brabandt)\nFiles:      src/option.c\n\nPatch 7.4.973\nProblem:    When pasting on the command line line breaks result in literal\n            <CR> characters. This makes pasting a long file name difficult.\nSolution:   Skip the characters.\nFiles:      src/ex_getln.c, src/ops.c\n\nPatch 7.4.974\nProblem:    When using :diffsplit the cursor jumps to the first line.\nSolution:   Put the cursor on the line related to where the cursor was before\n            the split.\nFiles:      src/diff.c\n\nPatch 7.4.975\nProblem:    Using \":sort\" on a very big file sometimes causes text to be\n            corrupted. (John Beckett)\nSolution:   Copy the line into a buffer before calling ml_append().\nFiles:      src/ex_cmds.c\n\nPatch 7.4.976\nProblem:    When compiling Vim for MSYS2 (linked with msys-2.0.dll), the Win32\n            clipboard is not enabled.\nSolution:   Recognize MSYS like CYGWIN. (Ken Takata)\nFiles:      src/configure.in, src/auto/configure\n\nPatch 7.4.977\nProblem:    'linebreak' does not work properly when using \"space\" in\n            'listchars'.\nSolution:   (Hirohito Higashi, Christian Brabandt)\nFiles:      src/screen.c, src/testdir/test_listlbr.in,\n            src/testdir/test_listlbr.ok\n\nPatch 7.4.978\nProblem:    test_cdo fails when using another language than English.\nSolution:   Set the language to C. (Dominique Pelle, Kenichi Ito)\nFiles:      src/testdir/test_cdo.in\n\nPatch 7.4.979\nProblem:    When changing the crypt key the blocks read from disk are not\n            decrypted.\nSolution:   Also call ml_decrypt_data() when mf_old_key is set. (Ken Takata)\nFiles:      src/memfile.c\n\nPatch 7.4.980\nProblem:    Tests for :cdo, :ldo, etc. are outdated.\nSolution:   Add new style tests for these commands. (Yegappan Lakshmanan)\nFiles:      src/testdir/Make_amiga.mak, src/testdir/Make_dos.mak,\n            src/testdir/Make_ming.mak, src/testdir/Make_os2.mak,\n            src/testdir/Make_vms.mms, src/testdir/Makefile,\n            src/testdir/test_cdo.in, src/testdir/test_cdo.ok,\n            src/testdir/test_cdo.vim\n\nPatch 7.4.981\nProblem:    An error in a test script goes unnoticed.\nSolution:   Source the test script inside try/catch. (Hirohito Higashi)\nFiles:      src/testdir/runtest.vim\n\nPatch 7.4.982\nProblem:    Keeping the list of tests updated is a hassle.\nSolution:   Move the list to a separate file, so that it only needs to be\n            updated in one place.\nFiles:      src/testdir/Make_amiga.mak, src/testdir/Make_dos.mak,\n            src/testdir/Make_ming.mak, src/testdir/Make_os2.mak,\n            src/testdir/Make_vms.mms, src/testdir/Makefile,\n            src/testdir/Make_all.mak\n\nPatch 7.4.983\nProblem:    Executing one test after \"make testclean\" doesn't work.\nSolution:   Add a dependency on test1.out.\nFiles:      src/testdir/Make_amiga.mak, src/testdir/Make_dos.mak,\n            src/testdir/Make_ming.mak, src/testdir/Make_os2.mak,\n            src/testdir/Make_vms.mms, src/testdir/Makefile,\n            src/testdir/Make_all.mak\n\nPatch 7.4.984\nProblem:    searchpos() always starts searching in the first column, which is\n            not what some people expect. (Brett Stahlman)\nSolution:   Add the 'z' flag: start at the specified column.\nFiles:      src/vim.h, src/eval.c, src/search.c,\n            src/testdir/test_searchpos.vim, src/testdir/test_alot.vim,\n            runtime/doc/eval.txt\n\nPatch 7.4.985\nProblem:    Can't build with Ruby 2.3.0.\nSolution:   Use the new TypedData_XXX macro family instead of Data_XXX. Use\n            TypedData. (Ken Takata)\nFiles:      src/if_ruby.c\n\nPatch 7.4.986\nProblem:    Test49 doesn't work on MS-Windows.  test70 is listed twice.\nSolution:   Move test49 to the group not used on Amiga and MS-Windows.\n            Remove test70 from SCRIPTS_WIN32.\nFiles:      src/testdir/Make_all.mak, src/testdir/Make_dos.mak\n\nPatch 7.4.987 (after 7.4.985)\nProblem:    Can't build with Ruby 1.9.2.\nSolution:   Require Rub 2.0 for defining USE_TYPEDDATA.\nFiles:      src/if_ruby.c\n\nPatch 7.4.988 (after 7.4.982)\nProblem:    Default test target is test49.out.\nSolution:   Add a build rule before including Make_all.mak.\nFiles:      src/testdir/Make_dos.mak, src/testdir/Make_amiga.mak,\n            src/testdir/Make_ming.mak, src/testdir/Make_os2.mak,\n            src/testdir/Make_vms.mms, src/testdir/Makefile\n\nPatch 7.4.989\nProblem:    Leaking memory when hash_add() fails. Coverity error 99126.\nSolution:   When hash_add() fails free the memory.\nFiles:      src/eval.c\n\nPatch 7.4.990\nProblem:    Test 86 fails on AppVeyor.\nSolution:   Do some registry magic. (Ken Takata)\nFiles:      appveyor.yml\n\nPatch 7.4.991\nProblem:    When running new style tests the output is not visible.\nSolution:   Add the testdir/messages file and show it.  Update the list of\n            test names.\nFiles:      src/Makefile, src/testdir/Makefile, src/testdir/runtest.vim\n\nPatch 7.4.992\nProblem:    Makefiles for MS-Windows in src/po are outdated.\nSolution:   Make them work. (Ken Takata, Taro Muraoka)\nFiles:      src/po/Make_cyg.mak, src/po/Make_ming.mak, src/po/Make_mvc.mak,\n            src/po/README_mingw.txt, src/po/README_mvc.txt\n\nPatch 7.4.993\nProblem:    Test 87 is flaky on AppVeyor.\nSolution:   Reduce the minimum background thread count.\nFiles:      src/testdir/test86.in, src/testdir/test87.in\n\nPatch 7.4.994\nProblem:    New style tests are not run on MS-Windows.\nSolution:   Add the new style tests.\nFiles:      src/testdir/Make_dos.mak\n\nPatch 7.4.995\nProblem:    gdk_pixbuf_new_from_inline() is deprecated.\nSolution:   Generate auto/gui_gtk_gresources.c. (Kazunobu Kuriyama,\n            closes #507)\nFiles:      src/Makefile, src/auto/configure, src/config.h.in,\n            src/config.mk.in, src/configure.in, src/gui_gtk.c,\n            src/gui_gtk_gresources.xml, src/gui_gtk_x11.c,\n            src/proto/gui_gtk_gresources.pro,\n            pixmaps/stock_vim_build_tags.png, pixmaps/stock_vim_find_help.png,\n            pixmaps/stock_vim_save_all.png,\n            pixmaps/stock_vim_session_load.png,\n            pixmaps/stock_vim_session_new.png,\n            pixmaps/stock_vim_session_save.png, pixmaps/stock_vim_shell.png,\n            pixmaps/stock_vim_window_maximize.png,\n            pixmaps/stock_vim_window_maximize_width.png,\n            pixmaps/stock_vim_window_minimize.png,\n            pixmaps/stock_vim_window_minimize_width.png,\n            pixmaps/stock_vim_window_split.png,\n            pixmaps/stock_vim_window_split_vertical.png\n\nPatch 7.4.996\nProblem:    New GDK files and testdir/Make_all.mak missing from distribution.\n            PC build instructions are outdated.\nSolution:   Add the file to the list.  Update PC build instructions.\nFiles:      Filelist, Makefile\n\nPatch 7.4.997\nProblem:    \"make shadow\" was sometimes broken.\nSolution:   Add a test for it. (James McCoy, closes #520)\nFiles:      .travis.yml\n\nPatch 7.4.998\nProblem:    Running tests in shadow directory fails.  Test 49 fails.\nSolution:   Link more files for the shadow directory. Make test 49 ends up in\n            the right buffer.\nFiles:      src/Makefile, src/testdir/test49.in\n\nPatch 7.4.999\nProblem:    \"make shadow\" creates a broken link. (Tony Mechelynck)\nSolution:   Remove vimrc.unix from the list.\nFiles:      src/Makefile\n\nPatch 7.4.1000\nProblem:    Test 49 is slow and doesn't work on MS-Windows.\nSolution:   Start moving parts of test 49 to test_viml.\nFiles:      src/Makefile, src/testdir/runtest.vim, src/testdir/test_viml.vim,\n            src/testdir/test49.vim, src/testdir/test49.ok\n\nPatch 7.4.1001 (after 7.4.1000)\nProblem:    test_viml isn't run.\nSolution:   Include change in makefile.\nFiles:      src/testdir/Make_all.mak\n\nPatch 7.4.1002\nProblem:    Cannot run an individual test on MS-Windows.\nSolution:   Move the rule to run test1 downwards. (Ken Takata)\nFiles:      src/testdir/Make_dos.mak\n\nPatch 7.4.1003\nProblem:    Travis could check a few more things.\nSolution:   Run autoconf on one of the builds. (James McCoy, closes #510)\n            Also build with normal features.\nFiles:      .travis.yml\n\nPatch 7.4.1004\nProblem:    Using Makefile when auto/config.mk does not exist results in\n            warnings.\nSolution:   Use default values for essential variables.\nFiles:      src/Makefile\n\nPatch 7.4.1005\nProblem:    Vim users are not always happy.\nSolution:   Make them happy.\nFiles:      src/ex_cmds.h, src/ex_cmds.c, src/proto/ex_cmds.pro\n\nPatch 7.4.1006\nProblem:    The fix in patch 7.3.192 is not tested.\nSolution:   Add a test, one for each regexp engine. (Elias Diem)\nFiles:      src/testdir/test44.in, src/testdir/test44.ok,\n            src/testdir/test99.in, src/testdir/test99.ok\n\nPatch 7.4.1007\nProblem:    When a symbolic link points to a file in the root directory, the\n            swapfile is not correct.\nSolution:   Do not try getting the full name of a file in the root directory.\n            (Milly, closes #501)\nFiles:      src/os_unix.c\n\nPatch 7.4.1008\nProblem:    The OS/2 code pollutes the source while nobody uses it these days.\nSolution:   Drop the support for OS/2. \nFiles:      src/feature.h, src/globals.h, src/macros.h, src/option.h,\n            src/os_unix.c, src/os_unix.h, src/proto/os_unix.pro, src/vim.h,\n            src/digraph.c, src/eval.c, src/ex_cmds.c, src/ex_docmd.c,\n            src/ex_getln.c, src/fileio.c, src/getchar.c, src/memline.c,\n            src/misc1.c, src/misc2.c, src/netbeans.c, src/option.c,\n            src/term.c, src/ui.c, src/window.c, src/os_os2_cfg.h,\n            src/Make_os2.mak, src/testdir/Make_os2.mak, src/testdir/os2.vim,\n            src/INSTALL, runtime/doc/os_os2.txt\n\nPatch 7.4.1009\nProblem:    There are still #ifdefs for ARCHIE.\nSolution:   Remove references to ARCHIE, the code was removed in Vim 5.\nFiles:      src/ex_cmds.c, src/ex_docmd.c, src/fileio.c, src/main.c,\n            src/memline.c, src/option.c, src/term.c\n\nPatch 7.4.1010\nProblem:    Some developers are unhappy while running tests.\nSolution:   Add a test and some color.\nFiles:      src/ex_cmds.c, src/testdir/test_assert.vim\n\nPatch 7.4.1011\nProblem:    Can't build with Strawberry Perl.\nSolution:   Include stdbool.h. (Ken Takata, closes #328)\nFiles:      Filelist, src/Make_mvc.mak, src/if_perl_msvc/stdbool.h\n\nPatch 7.4.1012\nProblem:    Vim overwrites the value of $PYTHONHOME.\nSolution:   Do not set $PYTHONHOME if it is already set. (Kazuki Sakamoto,\n            closes #500)\nFiles:      src/if_python.c, src/if_python3.c\n\nPatch 7.4.1013\nProblem:    The local value of 'errorformat' is not used for \":lexpr\" and\n            \":cexpr\".\nSolution:   Use the local value if it exists. (Christian Brabandt) Adjust the\n            help for this.\nFiles:      runtime/doc/quickfix.txt, src/quickfix.c\n\nPatch 7.4.1014\nProblem:    `fnamemodify('.', ':.')` returns an empty string in Cygwin.\nSolution:   Use CCP_RELATIVE in the call to cygwin_conv_path. (Jacob Niehus,\n            closes #505)\nFiles:      src/os_unix.c\n\nPatch 7.4.1015\nProblem:    The column is not restored properly when the matchparen plugin is\n            used in Insert mode and the cursor is after the end of the line.\nSolution:   Set the curswant flag. (Christian Brabandt).  Also fix\n            highlighting the match of the character before the cursor.\nFiles:      src/eval.c, runtime/plugin/matchparen.vim\n\nPatch 7.4.1016\nProblem:    Still a few OS/2 pieces remain.\nSolution:   Delete more.\nFiles:      Filelist, README_os2.txt, testdir/todos.vim, src/xxd/Make_os2.mak\n\nPatch 7.4.1017\nProblem:    When there is a backslash in an option \":set -=\" doesn't work.\nSolution:   Handle a backslash better. (Jacob Niehus)  Add a new test, merge\n            in old test.\nFiles:      src/testdir/test_cdo.vim, src/testdir/test_set.vim,\n            src/testdir/test_alot.vim, src/option.c, src/testdir/test_set.in,\n            src/testdir/test_set.ok, src/Makefile\n\nPatch 7.4.1018 (after 7.4.1017)\nProblem:    Failure running tests.\nSolution:   Add missing change to list of old style tests.\nFiles:      src/testdir/Make_all.mak\n\nPatch 7.4.1019\nProblem:    Directory listing of \"src\" is too long.\nSolution:   Rename the resources file to make it shorter.\nFiles:      src/gui_gtk_gresources.xml, src/gui_gtk_res.xml, src/Makefile,\n            Filelist\n\nPatch 7.4.1020\nProblem:    On MS-Windows there is no target to run tests with gvim.\nSolution:   Add the testgvim target.\nFiles:      src/Make_mvc.mak\n\nPatch 7.4.1021\nProblem:    Some makefiles are outdated.\nSolution:   Add a note to warn developers.\nFiles:      src/Make_manx.mak, src/Make_bc3.mak, src/Make_bc5.mak,\n            src/Make_djg.mak, src/Make_w16.mak\n\nPatch 7.4.1022\nProblem:    The README file contains some outdated information.\nSolution:   Update the information about supported systems.\nFiles:      README.txt, README.md\n\nPatch 7.4.1023\nProblem:    The distribution files for MS-Windows use CR-LF, which is\n            inconsistent with what one gets from github.\nSolution:   Use LF in the distribution files.\nFiles:      Makefile\n\nPatch 7.4.1024\nProblem:    Interfaces for MS-Windows are outdated.\nSolution:   Use Python 2.7.10, Python 3.4.4, Perl 5.22, TCL 8.6.\nFiles:      src/bigvim.bat\n\nPatch 7.4.1025\nProblem:    Version in installer needs to be updated manually.\nSolution:   Generate a file with the version number. (Guopeng Wen)\nFiles:      Makefile, nsis/gvim.nsi, nsis/gvim_version.nsh\n\nPatch 7.4.1026\nProblem:    When using MingW the tests do not clean up all files.  E.g. test\n            17 leaves Xdir1 behind. (Michael Soyka)\nSolution:   Also delete directories, like Make_dos.mak.  Delete files after\n            directories to reduce warnings.\nFiles:      src/testdir/Make_ming.mak, src/testdir/Make_dos.mak\n\nPatch 7.4.1027\nProblem:    No support for binary numbers.\nSolution:   Add \"bin\" to 'nrformats'. (Jason Schulz)\nFiles:      runtime/doc/change.txt, runtime/doc/eval.txt,\n            runtime/doc/version7.txt, src/charset.c, src/eval.c,\n            src/ex_cmds.c, src/ex_getln.c, src/misc2.c, src/ops.c,\n            src/option.c, src/proto/charset.pro, src/spell.c,\n            src/testdir/test57.in, src/testdir/test57.ok,\n            src/testdir/test58.in, src/testdir/test58.ok,\n            src/testdir/test_increment.in, src/testdir/test_increment.ok,\n            src/vim.h\n\nPatch 7.4.1028\nProblem:    Nsis version file missing from the distribution.\nSolution:   Add the file to the list.\nFiles:      Filelist\n\nPatch 7.4.1029 (after 7.4.1027)\nProblem:    test_increment fails on systems with 32 bit long.\nSolution:   Only test with 32 bits.\nFiles:      src/testdir/test_increment.in, src/testdir/test_increment.ok\n\nPatch 7.4.1030\nProblem:    test49 is still slow.\nSolution:   Move more tests from old to new style.\nFiles:      src/testdir/test_viml.vim, src/testdir/test49.vim,\n            src/testdir/test49.ok, src/testdir/runtest.vim\n\nPatch 7.4.1031\nProblem:    Can't build with Python interface using MingW.\nSolution:   Update the Makefile. (Yasuhiro Matsumoto)\nFiles:      src/INSTALLpc.txt, src/Make_cyg_ming.mak\n\nPatch 7.4.1032\nProblem:    message from assert_false() does not look nice.\nSolution:   Handle missing sourcing_name. Use right number of spaces. (Watiko)\n            Don't use line number if it's zero.\nFiles:      src/eval.c\n\nPatch 7.4.1033\nProblem:    Memory use on MS-Windows is very conservative.\nSolution:   Use the global memory status to estimate amount of memory.\n            (Mike Williams)\nFiles:      src/os_win32.c, src/os_win32.h, src/proto/os_win32.pro\n\nPatch 7.4.1034\nProblem:    There is no test for the 'backspace' option behavior.\nSolution:   Add a test. (Hirohito Higashi)\nFiles:      src/testdir/test_alot.vim, src/testdir/test_backspace_opt.vim\n\nPatch 7.4.1035\nProblem:    An Ex range gets adjusted for folded lines even when the range is\n            not using line numbers.\nSolution:   Only adjust line numbers for folding. (Christian Brabandt)\nFiles:      runtime/doc/fold.txt, src/ex_docmd.c\n\nPatch 7.4.1036\nProblem:    Only terminals with up to 256 colors work properly.\nSolution:   Use the 256 color behavior for all terminals with 256 or more\n            colors. (Robert de Bath, closes #504)\nFiles:      src/syntax.c\n\nPatch 7.4.1037\nProblem:    Using \"q!\" when there is a modified hidden buffer does not unload\n            the current buffer, resulting in the need to abandon it again.\nSolution:   When using \"q!\" unload the current buffer when needed. (Yasuhiro\n            Matsumoto, Hirohito Higashi)\nFiles:      src/testdir/test31.in, src/testdir/test31.ok,\n            runtime/doc/editing.txt, src/ex_cmds2.c, src/ex_docmd.c,\n            src/gui.c, src/gui_gtk_x11.c, src/os_unix.c,\n            src/proto/ex_cmds2.pro\n\nPatch 7.4.1038\nProblem:    Still get a warning for a deprecated function with gdk-pixbuf\n            2.31.\nSolution:   Change minimum minor version from 32 to 31.\nFiles:      src/configure.in, src/auto/configure\n\nPatch 7.4.1039 (after 7.4.1037)\nProblem:    Test 31 fails with small build.\nSolution:   Bail out for small build. (Hirohito Higashi)\nFiles:      src/testdir/test31.in\n\nPatch 7.4.1040\nProblem:    The tee command is not available on MS-Windows.\nSolution:   Adjust tee.c for MSVC and add a makefile. (Yasuhiro Matsumoto)\nFiles:      src/tee/tee.c, src/tee/Make_mvc.mak, src/Make_mvc.mak\n\nPatch 7.4.1041\nProblem:    Various small things.\nSolution:   Add file to list of distributed files.  Adjust README.  Fix typo.\nFiles:      Filelist, src/testdir/README.txt, src/testdir/test_charsearch.in,\n            src/INSTALLmac.txt\n\nPatch 7.4.1042\nProblem:    g-CTRL-G shows the word count, but there is no way to get the word\n            count in a script.\nSolution:   Add the wordcount() function. (Christian Brabandt)\nFiles:      runtime/doc/editing.txt, runtime/doc/eval.txt,\n            runtime/doc/usr_41.txt, src/eval.c, src/normal.c, src/ops.c,\n            src/proto/ops.pro, src/testdir/test_wordcount.in,\n            src/testdir/test_wordcount.ok, src/testdir/Make_all.mak\n\nPatch 7.4.1043\nProblem:    Another small thing.\nSolution:   Now really update the Mac install text.\nFiles:      src/INSTALLmac.txt\n\nPatch 7.4.1044 (after 7.4.1042)\nProblem:    Can't build without the +eval feature.\nSolution:   Add #ifdef.\nFiles:      src/ops.c\n\nPatch 7.4.1045\nProblem:    Having shadow and coverage on the same build results in the source\n            files not being available in the coverage view.\nSolution:   Move using shadow to the normal build.\nFiles:      .travis.yml\n\nPatch 7.4.1046\nProblem:    No test coverage for menus.\nSolution:   Load the standard menus and check there is no error.\nFiles:      testdir/test_menu.vim, testdir/test_alot.vim\n\nPatch 7.4.1047 (after patch 7.4.1042)\nProblem:    Tests fail on MS-Windows.\nSolution:   Set 'selection' to inclusive.\nFiles:      src/testdir/test_wordcount.in\n\nPatch 7.4.1048 (after patch 7.4.1047)\nProblem:    Wordcount test still fail on MS-Windows.\nSolution:   Set 'fileformat' to \"unix\".\nFiles:      src/testdir/test_wordcount.in\n\nPatch 7.4.1049 (after patch 7.4.1048)\nProblem:    Wordcount test still fails on MS-Windows.\nSolution:   Set 'fileformats' to \"unix\".\nFiles:      src/testdir/test_wordcount.in\n\nPatch 7.4.1050\nProblem:    Warning for unused var with tiny features. (Tony Mechelynck)\nSolution:   Add #ifdef.  Use vim_snprintf().  Reduce number of statements.\nFiles:      src/ops.c\n\nPatch 7.4.1051\nProblem:    Segfault when unletting \"count\".\nSolution:   Check for readonly and locked first. (Dominique Pelle)\n            Add a test.\nFiles:      src/eval.c, src/testdir/test_alot.vim, src/testdir/test_unlet.vim\n\nPatch 7.4.1052\nProblem:    Illegal memory access with weird syntax command. (Dominique Pelle)\nSolution:   Check for column past end of line.\nFiles:      src/syntax.c\n\nPatch 7.4.1053\nProblem:    Insufficient testing for quickfix commands.\nSolution:   Add a new style quickfix test. (Yegappan Lakshmanan)\nFiles:      src/testdir/Make_all.mak, src/testdir/test_quickfix.vim\n\nPatch 7.4.1054\nProblem:    Illegal memory access.\nSolution:   Check for missing pattern. (Dominique Pelle)\nFiles:      src/syntax.c\n\nPatch 7.4.1055\nProblem:    Running \"make newtests\" in src/testdir has no output.\nSolution:   List the messages file when a test fails. (Christian Brabandt)\n            Update the list of tests.\nFiles:      src/Makefile, src/testdir/Makefile\n\nPatch 7.4.1056\nProblem:    Don't know why finding spell suggestions is slow.\nSolution:   Add some code to gather profiling information.\nFiles:      src/spell.c\n\nPatch 7.4.1057\nProblem:    Typos in the :options window.\nSolution:   Fix the typos. (Dominique Pelle)\nFiles:      runtime/optwin.vim\n\nPatch 7.4.1058\nProblem:    It is not possible to test code that is only reached when memory\n            allocation fails.\nSolution:   Add the alloc_fail() function.  Try it out with :vimgrep.\nFiles:      runtime/doc/eval.txt, src/globals.h, src/eval.c, src/quickfix.c,\n            src/misc2.c, src/proto/misc2.pro, src/testdir/test_quickfix.vim\n\nPatch 7.4.1059\nProblem:    Code will never be executed.\nSolution:   Remove the code.\nFiles:      src/quickfix.c\n\nPatch 7.4.1060\nProblem:    Instructions for writing tests are outdated.\nSolution:   Mention Make_all.mak.  Add steps for new style tests.\nFiles:      src/testdir/README.txt\n\nPatch 7.4.1061\nProblem:    Compiler warning for ignoring return value of fwrite().\nSolution:   Do use the return value. (idea: Charles Campbell)\nFiles:      src/misc2.c, src/proto/misc2.pro\n\nPatch 7.4.1062\nProblem:    Building with Ruby on MS-Windows requires a lot of arguments.\nSolution:   Make it simpler. (Ken Takata)\nFiles:      src/Make_cyg_ming.mak, src/Make_mvc.mak\n\nPatch 7.4.1063\nProblem:    TCL_VER_LONG and DYNAMIC_TCL_VER are not set when building with\n            Cygwin and MingW.\nSolution:   Add TCL_VER_LONG and DYNAMIC_TCL_VER to the makefile. (Ken Takata)\nFiles:      src/Make_cyg_ming.mak\n\nPatch 7.4.1064\nProblem:    When a spell file has single letter compounding creating\n            suggestions takes an awful long time.\nSolution:   Add the NOCOMPOUNDSUGS flag.\nFiles:      runtime/doc/spell.txt, src/spell.c\n\nPatch 7.4.1065\nProblem:    Cannot use the \"dll\" options on MS-Windows.\nSolution:   Support the options on all platforms.  Use the built-in name as\n            the default, so that it's clear what Vim is looking for.\nFiles:      src/if_python.c, src/if_python3.c, src/if_lua.c, src/if_perl.xs,\n            src/if_ruby.c, src/option.c, runtime/doc/options.txt, src/Makefile\n\nPatch 7.4.1066 (after 7.4.1065)\nProblem:    Build fails on MS-Windows.\nSolution:   Adjust the #ifdefs for \"dll\" options.\nFiles:      src/option.h\n\nPatch 7.4.1067 (after 7.4.1065)\nProblem:    Can't build with MingW and Python on MS-Windows.\nSolution:   Move the build flags to CFLAGS.\nFiles:      src/Make_cyg_ming.mak\n\nPatch 7.4.1068\nProblem:    Wrong way to check for unletting internal variables.\nSolution:   Use a better way. (Olaf Dabrunz)\nFiles:      src/testdir/test_unlet.c, src/eval.c\n\nPatch 7.4.1069\nProblem:    Compiler warning for unused argument.\nSolution:   Add UNUSED.\nFiles:      src/misc2.c\n\nPatch 7.4.1070\nProblem:    The Tcl interface can't be loaded dynamically on Unix.\nSolution:   Make it possible to load it dynamically. (Ken Takata)\nFiles:      runtime/doc/if_tcl.txt, runtime/doc/options.txt,\n            runtime/doc/quickref.txt, runtime/optwin.vim, src/Makefile,\n            src/config.h.in, src/configure.in, src/auto/configure,\n            src/if_tcl.c, src/option.c, src/option.h\n\nPatch 7.4.1071\nProblem:    New style tests are executed in arbitrary order.\nSolution:   Sort the test function names. (Hirohito Higashi)\n            Fix the quickfix test that depended on the order.\nFiles:      src/testdir/runtest.vim, src/testdir/test_quickfix.vim\n\nPatch 7.4.1072\nProblem:    Increment test is old style.\nSolution:   Make the increment test a new style test. (Hirohito Higashi)\nFiles:      src/Makefile, src/testdir/Make_all.mak,\n            src/testdir/test_increment.in, src/testdir/test_increment.ok,\n            src/testdir/test_increment.vim\n\nPatch 7.4.1073\nProblem:    Alloc_id depends on numbers, may use the same one twice.  It's not\n            clear from the number what it's for.\nSolution:   Use an enum.  Add a function to lookup the enum value from the\n            name.\nFiles:      src/misc2.c, src/vim.h, src/alloc.h, src/globals.h,\n            src/testdir/runtest.vim, src/proto/misc2.pro,\n            src/testdir/test_quickfix.vim\n\nPatch 7.4.1074\nProblem:    Warning from VC2015 compiler.\nSolution:   Add a type cast. (Mike Williams)\nFiles:      src/gui_dwrite.cpp\n\nPatch 7.4.1075\nProblem:    Crash when using an invalid command.\nSolution:   Fix generating the error message. (Dominique Pelle)\nFiles:      src/ex_docmd.c\n\nPatch 7.4.1076\nProblem:    CTRL-A does not work well in right-left mode.\nSolution:   Remove reversing the line, add a test. (Hirohito Higashi)\nFiles:      src/ops.c, src/testdir/test_increment.vim\n\nPatch 7.4.1077\nProblem:    The build instructions for MS-Windows are incomplete.\nSolution:   Add explanations for how to build with various interfaces. (Ken\n            Takata)\nFiles:      src/INSTALLpc.txt\n\nPatch 7.4.1078\nProblem:    MSVC: \"make clean\" doesn't cleanup in the tee directory.\nSolution:   Add the commands to cleanup tee. (Erich Ritz)\nFiles:      src/Make_mvc.mak\n\nPatch 7.4.1079 (after 7.4.1073)\nProblem:    New include file missing from distribution.  Missing changes to\n            quickfix code.\nSolution:   Add alloc.h to the list of distributed files. Use the enum in\n            quickfix code.\nFiles:      Filelist, src/quickfix.c\n\nPatch 7.4.1080\nProblem:    VS2015 has a function HandleToLong() that is shadowed by the macro\n            that Vim defines.\nSolution:   Do not define HandleToLong() for MSVC version 1400 and later.\n            (Mike Williams)\nFiles:      src/gui_w32.c\n\nPatch 7.4.1081\nProblem:    No test for what previously caused a crash.\nSolution:   Add test for unletting errmsg.\nFiles:      src/testdir/test_unlet.vim\n\nPatch 7.4.1082\nProblem:    The Tcl interface is always skipping memory free on exit.\nSolution:   Only skip for dynamically loaded Tcl.\nFiles:      src/if_tcl.c\n\nPatch 7.4.1083\nProblem:    Building GvimExt with VS2015 may fail.\nSolution:   Adjust the makefile. (Mike Williams)\nFiles:      src/GvimExt/Makefile\n\nPatch 7.4.1084\nProblem:    Using \".\" to repeat CTRL-A in Visual mode increments the wrong\n            numbers.\nSolution:   Append right size to the redo buffer. (Ozaki Kiichi)\nFiles:      src/normal.c, src/testdir/test_increment.vim\n\nPatch 7.4.1085\nProblem:    The CTRL-A and CTRL-X commands do not update the '[ and '] marks.\nSolution:   (Yukihiro Nakadaira)\nFiles:      src/ops.c, src/testdir/test_marks.in, src/testdir/test_marks.ok\n\nPatch 7.4.1086\nProblem:    Crash with an extremely long buffer name.\nSolution:   Limit the return value of vim_snprintf(). (Dominique Pelle)\nFiles:      src/buffer.c\n\nPatch 7.4.1087\nProblem:    CTRL-A and CTRL-X do not work properly with blockwise visual\n            selection if there is a mix of Tab and spaces.\nSolution:   Add OP_NR_ADD and OP_NR_SUB. (Hirohito Higashi)\nFiles:      src/testdir/test_increment.vim, src/normal.c, src/ops.c,\n            src/proto/ops.pro, src/vim.h\n\nPatch 7.4.1088\nProblem:    Coverity warns for uninitialized variables.  Only one is an actual\n            problem.\nSolution:   Move the conditions.  Don't use endpos if handling an error.\nFiles:      src/ops.c\n\nPatch 7.4.1089\nProblem:    Repeating CTRL-A doesn't work.\nSolution:   Call prep_redo_cmd(). (Hirohito Higashi)\nFiles:      src/normal.c, src/testdir/test_increment.vim\n\nPatch 7.4.1090\nProblem:    No tests for :hardcopy and related options.\nSolution:   Add test_hardcopy.\nFiles:      src/testdir/test_hardcopy.vim, src/Makefile,\n            src/testdir/Make_all.mak\n\nPatch 7.4.1091\nProblem:    When making a change while need_wait_return is set there is a two\n            second delay.\nSolution:   Do not assume the ATTENTION prompt was given when need_wait_return\n            was set already.\nFiles:      src/misc1.c\n\nPatch 7.4.1092\nProblem:    It is not simple to test for an exception and give a proper error\n            message.\nSolution:   Add assert_exception().\nFiles:      src/eval.c, runtime/doc/eval.txt\n\nPatch 7.4.1093\nProblem:    Typo in test goes unnoticed.\nSolution:   Fix the typo. Give error for wrong arguments to cursor().\n            (partly by Hirohito Higashi) Add a test for cursor().\nFiles:      src/testdir/test_searchpos.vim, src/testdir/test_cursor_func.vim,\n            src/eval.c, src/testdir/test_alot.vim\n\nPatch 7.4.1094\nProblem:    Test for :hardcopy fails on MS-Windows.\nSolution:   Check for the +postscript feature.\nFiles:      src/testdir/test_hardcopy.vim\n\nPatch 7.4.1095\nProblem:    Can't build GvimExt with SDK 7.1.\nSolution:   Support using setenv.bat instead of vcvars32.bat. (Ken Takata)\nFiles:      src/Make_mvc.mak, src/GvimExt/Makefile\n\nPatch 7.4.1096\nProblem:    Need several lines to verify a command produces an error.\nSolution:   Add assert_fails(). (suggested by Nikolay Pavlov)\n            Make the quickfix alloc test actually work.\nFiles:      src/testdir/test_quickfix.vim, src/eval.c, runtime/doc/eval.txt,\n            src/misc2.c, src/alloc.h\n\nPatch 7.4.1097\nProblem:    Looking up the alloc ID for tests fails.\nSolution:   Fix the line computation.  Use assert_fails() for unlet test.\nFiles:      src/testdir/runtest.vim, src/testdir/test_unlet.vim\n\nPatch 7.4.1098\nProblem:    Still using old style C function declarations.\nSolution:   Always define __ARGS() to include types.  Turn a few functions\n            into ANSI style to find out if this causes problems for anyone.\nFiles:      src/vim.h, src/os_unix.h, src/eval.c, src/main.c\n\nPatch 7.4.1099\nProblem:    It's not easy to know if Vim supports blowfish. (Smu Johnson)\nSolution:   Add has('crypt-blowfish') and has('crypt-blowfish2').\nFiles:      src/eval.c\n\nPatch 7.4.1100\nProblem:    Cygwin makefiles are unused.\nSolution:   Remove them.\nFiles:      src/GvimExt/Make_ming.mak, src/GvimExt/Make_cyg.mak,\n            src/xxd/Make_ming.mak, src/xxd/Make_cyg.mak\n\nPatch 7.4.1101\nProblem:    With 'rightleft' and concealing the cursor may move to the wrong\n            position.\nSolution:   Compute the column differently when 'rightleft' is set. (Hirohito\n            Higashi)\nFiles:      src/screen.c\n\nPatch 7.4.1102\nProblem:    Debugger has no stack backtrace support.\nSolution:   Add \"backtrace\", \"frame\", \"up\" and \"down\" commands. (Alberto\n            Fanjul, closes #433)\nFiles:      runtime/doc/repeat.txt, src/eval.c, src/ex_cmds2.c, src/globals.h,\n            src/testdir/Make_all.mak, src/testdir/test108.in,\n            src/testdir/test108.ok\n\nPatch 7.4.1103 (after 7.4.1100)\nProblem:    Removed file still in distribution.\nSolution:   Remove Make_cyg.mak from the list of files.\nFiles:      Filelist\n\nPatch 7.4.1104\nProblem:    Various problems building with MzScheme/Racket.\nSolution:   Make it work with new versions of Racket. (Yukihiro Nakadaira, Ken\n            Takata)\nFiles:      runtime/doc/if_mzsch.txt, src/INSTALLpc.txt,\n            src/Make_cyg_ming.mak, src/Make_mvc.mak, src/auto/configure,\n            src/configure.in, src/if_mzsch.c\n\nPatch 7.4.1105\nProblem:    When using slices there is a mixup of variable name and namespace.\nSolution:   Recognize variables that can't be a namespace. (Hirohito Higashi)\nFiles:      src/eval.c, src/testdir/test_eval.in, src/testdir/test_eval.ok\n\nPatch 7.4.1106\nProblem:    The nsis script can't be used from the appveyor build.\nSolution:   Add \"ifndef\" to allow for variables to be set from the command\n            line. Remove duplicate SetCompressor command. Support using other\n            gettext binaries. (Ken Takata)  Update build instructions to use\n            libintl-8.dll.\nFiles:      Makefile, nsis/gvim.nsi, src/os_win32.c, src/proto/os_win32.pro,\n            src/main.c, os_w32exe.c\n\nPatch 7.4.1107\nProblem:    Vim can create a directory but not delete it.\nSolution:   Add an argument to delete() to make it possible to delete a\n            directory, also recursively.\nFiles:      src/fileio.c, src/eval.c, src/proto/fileio.pro,\n            src/testdir/test_delete.vim, src/testdir/test_alot.vim,\n            runtime/doc/eval.txt\n\nPatch 7.4.1108\nProblem:    Expanding \"~\" halfway a file name.\nSolution:   Handle the file name as one name. (Marco Hinz)  Add a test.\n            Closes #564.\nFiles:      src/testdir/test27.in, src/testdir/test27.ok,\n            src/testdir/test_expand.vim, src/testdir/test_alot.vim,\n            src/Makefile, src/misc2.c\n\nPatch 7.4.1109 (after 7.4.1107)\nProblem:    MS-Windows doesn't have rmdir().\nSolution:   Add mch_rmdir().\nFiles:      src/os_win32.c, src/proto/os_win32.pro\n\nPatch 7.4.1110\nProblem:    Test 108 fails when language is French.\nSolution:   Force English messages. (Dominique Pelle)\nFiles:      src/testdir/test108.in\n\nPatch 7.4.1111\nProblem:    test_expand fails on MS-Windows.\nSolution:   Always use forward slashes.  Remove references to test27.\nFiles:      src/testdir/runtest.vim, src/testdir/test_expand.vim,\n            src/testdir/Make_dos.mak, src/testdir/Make_all.mak,\n            src/testdir/Make_amiga.mak, src/testdir/Make_ming.mak\n\nPatch 7.4.1112\nProblem:    When using \":next\" with an illegal file name no error is reported.\nSolution:   Give an error message.\nFiles:      src/ex_cmds2.c\n\nPatch 7.4.1113 (after 7.4.1105)\nProblem:    Using {ns} in variable name does not work. (lilydjwg)\nSolution:   Fix recognizing colon.  Add a test.\nFiles:      src/eval.c, src/testdir/test_viml.vim\n\nPatch 7.4.1114 (after 7.4.1107)\nProblem:    delete() does not work well with symbolic links.\nSolution:   Recognize symbolic links.\nFiles:      src/eval.c, src/fileio.c, src/os_unix.c, src/proto/os_unix.pro,\n            src/testdir/test_delete.vim, runtime/doc/eval.txt\n\nPatch 7.4.1115\nProblem:    MS-Windows: make clean in testdir doesn't clean everything.\nSolution:   Add command to delete X* directories. (Ken Takata)\nFiles:      src/testdir/Make_dos.mak\n\nPatch 7.4.1116\nProblem:    delete(x, 'rf') does not delete files starting with a dot.\nSolution:   Also delete files starting with a dot.\nFiles:      src/misc1.c, src/fileio.c, src/vim.h\n\nPatch 7.4.1117 (after 7.4.1116)\nProblem:    No longer get \".\" and \"..\" in directory list.\nSolution:   Do not skip \".\" and \"..\" unless EW_DODOT is set.\nFiles:      src/mics1.c\n\nPatch 7.4.1118\nProblem:    Tests hang in 24 line terminal.\nSolution:   Set the 'more' option off.\nFiles:      src/testdir/runtest.vim\n\nPatch 7.4.1119\nProblem:    argidx() has a wrong value after \":%argdelete\". (Yegappan\n            Lakshmanan)\nSolution:   Correct the value of w_arg_idx.  Add a test.\nFiles:      src/ex_cmds2.c, src/testdir/test_arglist.vim,\n            src/testdir/Make_all.mak\n\nPatch 7.4.1120\nProblem:    delete(x, 'rf') fails if a directory is empty. (Lcd)\nSolution:   Ignore not finding matches in an empty directory.\nFiles:      src/fileio.c, src/misc1.c, src/vim.h, src/testdir/test_delete.vim\n\nPatch 7.4.1121\nProblem:    test_expand leaves files behind.\nSolution:   Edit another file before deleting, otherwise the swap file\n            remains.\nFiles:      src/testdir/test_expand.vim\n\nPatch 7.4.1122\nProblem:    Test 92 and 93 fail when using gvim on a system with a non utf-8\n            locale.\nSolution:   Avoid using .gvimrc by adding -U NONE. (Yukihiro Nakadaira)\nFiles:      src/testdir/Make_dos.mak, src/testdir/Make_ming.mak,\n            src/testdir/Make_vms.mms, src/testdir/Makefile\n\nPatch 7.4.1123\nProblem:    Using \":argadd\" when there are no arguments results in the second\n            argument to be the current one. (Yegappan Lakshmanan)\nSolution:   Correct the w_arg_idx value.\nFiles:      src/ex_cmds2.c, src/testdir/test_arglist.vim\n\nPatch 7.4.1124\nProblem:    MS-Windows: dead key behavior is not ideal.\nSolution:   Handle dead keys differently when not in Insert or Select mode.\n            (John Wellesz, closes #399)\nFiles:      src/gui_w48.c\n\nPatch 7.4.1125\nProblem:    There is no perleval().\nSolution:   Add perleval(). (Damien)\nFiles:      runtime/doc/eval.txt, runtime/doc/usr_41.txt, src/eval.c,\n            src/if_perl.xs, src/proto/if_perl.pro, src/testdir/Make_all.mak,\n            src/testdir/test_perl.vim\n\nPatch 7.4.1126\nProblem:    Can only get the directory of the current window.\nSolution:   Add window and tab arguments to getcwd() and haslocaldir().\n            (Thinca, Hirohito Higashi)\nFiles:      src/Makefile, src/testdir/Make_all.mak,\n            src/testdir/test_getcwd.in, src/testdir/test_getcwd.ok,\n            runtime/doc/eval.txt, patching file src/eval.c\n\nPatch 7.4.1127\nProblem:    Both old and new style tests for Perl.\nSolution:   Merge the old tests with the new style tests.\nFiles:      src/Makefile, src/testdir/Make_all.mak, src/testdir/test_perl.in,\n            src/testdir/test_perl.ok, src/testdir/test_perl.vim\n\nPatch 7.4.1128\nProblem:    MS-Windows: delete() does not recognize junctions.\nSolution:   Add mch_isrealdir() for MS-Windows. Update mch_is_symbolic_link().\n            (Ken Takata)\nFiles:      src/fileio.c, src/os_win32.c, src/proto/os_win32.pro\n\nPatch 7.4.1129\nProblem:    Python None value can't be converted to a Vim value.\nSolution:   Just use zero. (Damien)\nFiles:      src/if_py_both.h, src/testdir/test86.in, src/testdir/test86.ok,\n            src/testdir/test87.in, src/testdir/test87.ok,\n\nPatch 7.4.1130\nProblem:    Memory leak in :vimgrep.\nSolution:   Call FreeWild(). (Yegappan Lakshmanan)\nFiles:      src/quickfix.c\n\nPatch 7.4.1131\nProblem:    New lines in the viminfo file are dropped.\nSolution:   Copy lines starting with \"|\".  Fix that when using :rviminfo in a\n            function global variables were restored as function-local\n            variables.\nFiles:      src/eval.c, src/structs.h, src/ex_cmds.c, src/misc2.c,\n            src/proto/misc2.pro, src/testdir/test_viminfo.vim,\n            src/testdir/Make_all.mak, src/testdir/test74.in,\n            src/testdir/test74.ok\n\nPatch 7.4.1132\nProblem:    Old style tests for the argument list.\nSolution:   Add more new style tests. (Yegappan Lakshmanan)\nFiles:      src/testdir/test_arglist.vim, src/testdir/test_argument_0count.in,\n            src/testdir/test_argument_0count.ok,\n            src/testdir/test_argument_count.in, src/Makefile,\n            src/testdir/test_argument_count.ok, src/testdir/Make_all.mak\n\nPatch 7.4.1133\nProblem:    Generated function prototypes still have __ARGS().\nSolution:   Generate function prototypes without __ARGS().\nFiles:      src/Makefile, src/if_ruby.c, src/os_win32.c,\n            src/proto/blowfish.pro, src/proto/buffer.pro,\n            src/proto/charset.pro, src/proto/crypt.pro,\n            src/proto/crypt_zip.pro, src/proto/diff.pro,\n            src/proto/digraph.pro, src/proto/edit.pro, src/proto/eval.pro,\n            src/proto/ex_cmds2.pro, src/proto/ex_cmds.pro,\n            src/proto/ex_docmd.pro, src/proto/ex_eval.pro,\n            src/proto/ex_getln.pro, src/proto/fileio.pro, src/proto/fold.pro,\n            src/proto/getchar.pro, src/proto/gui_athena.pro,\n            src/proto/gui_beval.pro, src/proto/gui_gtk_gresources.pro,\n            src/proto/gui_gtk.pro, src/proto/gui_gtk_x11.pro,\n            src/proto/gui_mac.pro, src/proto/gui_motif.pro,\n            src/proto/gui_photon.pro, src/proto/gui.pro,\n            src/proto/gui_w16.pro, src/proto/gui_w32.pro,\n            src/proto/gui_x11.pro, src/proto/gui_xmdlg.pro,\n            src/proto/hangulin.pro, src/proto/hardcopy.pro,\n            src/proto/hashtab.pro, src/proto/if_cscope.pro,\n            src/proto/if_lua.pro, src/proto/if_mzsch.pro,\n            src/proto/if_ole.pro, src/proto/if_perl.pro,\n            src/proto/if_perlsfio.pro, src/proto/if_python3.pro,\n            src/proto/if_python.pro, src/proto/if_ruby.pro,\n            src/proto/if_tcl.pro, src/proto/if_xcmdsrv.pro,\n            src/proto/main.pro, src/proto/mark.pro, src/proto/mbyte.pro,\n            src/proto/memfile.pro, src/proto/memline.pro, src/proto/menu.pro,\n            src/proto/message.pro, src/proto/misc1.pro, src/proto/misc2.pro,\n            src/proto/move.pro, src/proto/netbeans.pro, src/proto/normal.pro,\n            src/proto/ops.pro, src/proto/option.pro, src/proto/os_amiga.pro,\n            src/proto/os_beos.pro, src/proto/os_mac_conv.pro,\n            src/proto/os_msdos.pro, src/proto/os_mswin.pro,\n            src/proto/os_qnx.pro, src/proto/os_unix.pro, src/proto/os_vms.pro,\n            src/proto/os_win16.pro, src/proto/os_win32.pro,\n            src/proto/popupmnu.pro, src/proto/pty.pro, src/proto/quickfix.pro,\n            src/proto/regexp.pro, src/proto/screen.pro, src/proto/search.pro,\n            src/proto/sha256.pro, src/proto/spell.pro, src/proto/syntax.pro,\n            src/proto/tag.pro, src/proto/termlib.pro, src/proto/term.pro,\n            src/proto/ui.pro, src/proto/undo.pro, src/proto/version.pro,\n            src/proto/winclip.pro, src/proto/window.pro,\n            src/proto/workshop.pro\n\nPatch 7.4.1134\nProblem:    The arglist test fails on MS-Windows.\nSolution:   Only check for failure of argedit on Unix.\nFiles:      src/testdir/test_arglist.vim\n\nPatch 7.4.1135\nProblem:    One more arglist test fails on MS-Windows.\nSolution:   Don't edit \"Y\" after editing \"y\".\nFiles:      src/testdir/test_arglist.vim\n\nPatch 7.4.1136\nProblem:    Wrong argument to assert_exception() causes a crash. (reported by\n            Coverity)\nSolution:   Check for NULL pointer.  Add a test.\nFiles:      src/eval.c, src/testdir/test_assert.vim\n\nPatch 7.4.1137\nProblem:    Illegal memory access when using :copen and :cclose.\nSolution:   Avoid that curbuf is invalid. (suggestion by Justin M. Keyes)\n            Add a test.\nFiles:      src/window.c, src/testdir/test_quickfix.vim\n\nPatch 7.4.1138\nProblem:    When running gvim in the foreground some icons are missing.\n            (Taylor Venable)\nSolution:   Move the call to gui_gtk_register_resource(). (Kazunobu Kuriyama)\nFiles:      src/gui_gtk_x11.c\n\nPatch 7.4.1139\nProblem:    MS-Windows: getftype() returns \"file\" for symlink to directory.\nSolution:   Make it return \"dir\". (Ken Takata)\nFiles:      src/os_mswin.c\n\nPatch 7.4.1140\nProblem:    Recognizing <sid> does not work when the language is Turkish.\n            (Christian Brabandt)\nSolution:   Use MB_STNICMP() instead of STNICMP().\nFiles:      src/eval.c\n\nPatch 7.4.1141\nProblem:    Using searchpair() with a skip expression that uses syntax\n            highlighting sometimes doesn't work. (David Fishburn)\nSolution:   Reset next_match_idx. (Christian Brabandt)\nFiles:      src/syntax.c\n\nPatch 7.4.1142\nProblem:    Cannot define keyword characters for a syntax file.\nSolution:   Add the \":syn iskeyword\" command. (Christian Brabandt)\nFiles:      runtime/doc/options.txt, runtime/doc/syntax.txt, src/buffer.c,\n            src/option.c, src/structs.h, src/syntax.c,\n            src/testdir/Make_all.mak, src/testdir/test_syntax.vim\n\nPatch 7.4.1143\nProblem:    Can't sort on floating point numbers.\nSolution:   Add the \"f\" flag to \":sort\".  (Alex Jakushev)  Also add the \"f\"\n            flag to sort().\nFiles:      runtime/doc/change.txt, src/ex_cmds.c, src/testdir/test_sort.vim,\n            src/testdir/test57.in, src/testdir/test57.ok, src/eval.c\n\nPatch 7.4.1144 (after 7.4.1143)\nProblem:    Can't build on several systems.\nSolution:   Include float.h. (Christian Robinson, closes #570 #571)\nFiles:      src/ex_cmds.c\n\nPatch 7.4.1145\nProblem:    Default features are conservative.\nSolution:   Make the default feature set for most of today's systems \"huge\".\nFiles:      src/feature.h, src/configure.in, src/auto/configure\n\nPatch 7.4.1146\nProblem:    Can't build with Python 3 interface using MingW.\nSolution:   Update the Makefile. (Yasuhiro Matsumoto, Ken Takata)\nFiles:      src/Make_cyg_ming.mak\n\nPatch 7.4.1147\nProblem:    Conflict for \"chartab\". (Kazunobu Kuriyama)\nSolution:   Rename the global one to something less obvious.  Move it into\n            src/chartab.c.\nFiles:      src/macros.h, src/globals.h, src/charset.c, src/main.c,\n            src/option.c, src/screen.c, src/vim.h\n\nPatch 7.4.1148\nProblem:    Default for MingW and Cygwin is still \"normal\".\nSolution:   Use \"huge\" as default. (Ken Takata)\nFiles:      src/Make_cyg_ming.mak, src/Make_mvc.mak\n\nPatch 7.4.1149 (after 7.4.1013)\nProblem:    Using the local value of 'errorformat' causes more problems than\n            it solves.\nSolution:   Revert 7.4.1013.\nFiles:      runtime/doc/quickfix.txt, src/quickfix.c\n\nPatch 7.4.1150\nProblem:    'langmap' applies to the first character typed in Select mode.\n            (David Watson)\nSolution:   Check for SELECTMODE. (Christian Brabandt, closes #572)\n            Add the 'x' flag to feedkeys().\nFiles:      src/getchar.c, src/normal.c, src/testdir/test_langmap.vim,\n            src/ex_docmd.c, src/proto/ex_docmd.pro, src/testdir/Make_all.mak,\n            runtime/doc/eval.txt\n\nPatch 7.4.1151 (after 7.4.1150)\nProblem:    Missing change to eval.c\nSolution:   Also change feedkeys().\nFiles:      src/eval.c\n\nPatch 7.4.1152\nProblem:    Langmap test fails with normal build.\nSolution:   Check for +langmap feature.\nFiles:      src/testdir/test_langmap.vim\n\nPatch 7.4.1153\nProblem:    Autocommands triggered by quickfix cannot always get the current\n            title value.\nSolution:   Call qf_fill_buffer() later. (Christian Brabandt)\nFiles:      src/quickfix.c, src/testdir/test_quickfix.vim\n\nPatch 7.4.1154\nProblem:    No support for JSON.\nSolution:   Add jsonencode() and jsondecode().  Also add v:false, v:true,\n            v:null and v:none.\nFiles:      src/json.c, src/eval.c, src/proto.h, src/structs.h, src/vim.h,\n            src/if_lua.c, src/if_mzsch.c, src/if_ruby.c, src/if_py_both.h,\n            src/globals.h, src/Makefile, src/Make_bc3.mak, src/Make_bc5.mak,\n            src/Make_cyg_ming.mak, src/Make_dice.mak, src/Make_ivc.mak,\n            src/Make_manx.mak, src/Make_morph.mak, src/Make_mvc.mak,\n            src/Make_sas.mak, src/Make_vms.mms, src/proto/json.pro,\n            src/proto/eval.pro, src/testdir/test_json.vim,\n            src/testdir/test_alot.vim, Filelist, runtime/doc/eval.txt\n\nPatch 7.4.1155\nProblem:    Build with normal features fails.\nSolution:   Always define dict_lookup().\nFiles:      src/eval.c\n\nPatch 7.4.1156\nProblem:    Coverity warns for NULL pointer and ignoring return value.\nSolution:   Check for NULL pointer. When dict_add() returns FAIL free the item.\nFiles:      src/json.c\n\nPatch 7.4.1157\nProblem:    type() does not work for v:true, v:none, etc.\nSolution:   Add new type numbers.\nFiles:      src/eval.c, src/testdir/test_json.vim, src/testdir/test_viml.vim\n\nPatch 7.4.1158\nProblem:    Still using __ARGS().\nSolution:   Remove __ARGS() from eval.c\nFiles:      src/eval.c\n\nPatch 7.4.1159\nProblem:    Automatically generated function prototypes use __ARGS.\nSolution:   Remove __ARGS from osdef.sh.\nFiles:      src/osdef.sh, src/osdef1.h.in, src/osdef2.h.in\n\nPatch 7.4.1160\nProblem:    No error for jsondecode('\"').\nSolution:   Give an error message for missing double quote.\nFiles:      src/json.c\n\nPatch 7.4.1161\nProblem:    \":argadd\" without argument is supposed to add the current buffer\n            name to the arglist.\nSolution:   Make it work as documented. (Coot, closes #577)\nFiles:      src/ex_cmds.h, src/ex_cmds2.c, src/testdir/test_arglist.vim\n\nPatch 7.4.1162\nProblem:    Missing error number in MzScheme. (Dominique Pelle)\nSolution:   Add a proper error number.\nFiles:      src/if_mzsch.c\n\nPatch 7.4.1163\nProblem:    Expressions \"0 + v:true\" and \"'' . v:true\" cause an error.\nSolution:   Return something sensible when using a special variable as a\n            number or as a string. (suggested by Damien)\nFiles:      src/eval.c, src/testdir/test_viml.vim\n\nPatch 7.4.1164\nProblem:    No tests for comparing special variables.  Error in jsondecode()\n            not reported.  test_json does not work with Japanese system.\nSolution:   Set scriptencoding. (Ken Takata) Add a few more tests. Add error.\nFiles:      src/json.c, src/testdir/test_viml.vim, src/testdir/test_json.vim\n\nPatch 7.4.1165\nProblem:    When defining DYNAMIC_ICONV_DLL in the makefile, the build fails.\nSolution:   Add #ifdef's. (Taro Muraoka)  Try the newer version first.\nFiles:      src/mbyte.c, src/os_win32.c\n\nPatch 7.4.1166\nProblem:    Can't encode a Funcref into JSON.  jsonencode() doesn't handle the\n            same list or dict twice properly.  (Nikolay Pavlov)\nSolution:   Give an error.  Reset copyID when the list or dict is finished.\nFiles:      src/json.c, src/proto/json.pro, src/testdir/test_json.vim\n\nPatch 7.4.1167\nProblem:    No tests for \"is\" and \"isnot\" with the new variables.\nSolution:   Add tests.\nFiles:      src/testdir/test_viml.vim\n\nPatch 7.4.1168\nProblem:    This doesn't give the right result: eval(string(v:true)). (Nikolay\n            Pavlov)\nSolution:   Make the string \"v:true\" instead of \"true\".\nFiles:      src/eval.c, src/testdir/test_viml.vim\n\nPatch 7.4.1169\nProblem:    The socket I/O is intertwined with the netbeans code.\nSolution:   Start refactoring the netbeans communication to split off the\n            socket I/O.  Add the +channel feature.\nFiles:      src/channel.c, src/netbeans.c, src/proto/channel.pro,\n            src/proto/netbeans.pro, src/proto/gui_w32.pro, src/gui_w32.c,\n            src/eval.c, src/os_mswin.c, src/ui.c, src/macros.h, Makefile,\n            src/proto.h, src/feature.h, src/os_unix.c, src/vim.h,\n            src/configure.in, src/auto/configure, src/config.mk.in,\n            src/config.aap.in, src/config.h.in, src/Make_bc5.mak,\n            src/Make_cyg_ming.mak, src/Make_mvc.mak\n\nPatch 7.4.1170 (after 7.4.1169)\nProblem:    Missing changes in src/Makefile, Filelist.\nSolution:   Add the missing changes.\nFiles:      Filelist, src/Makefile\n\nPatch 7.4.1171\nProblem:    Makefile dependencies are outdated.\nSolution:   Run \"make depend\". Add GTK resource dependencies.\nFiles:      src/Makefile\n\nPatch 7.4.1172 (after 7.4.1169)\nProblem:    Configure is overly positive.\nSolution:   Insert \"test\".\nFiles:      src/configure.in, src/auto/configure\n\nPatch 7.4.1173 (after 7.4.1168)\nProblem:    No test for new behavior of v:true et al.\nSolution:   Add a test.\nFiles:      src/testdir/test_viml.vim\n\nPatch 7.4.1174\nProblem:    Netbeans contains dead code inside #ifndef INIT_SOCKETS.\nSolution:   Remove the dead code.\nFiles:      src/netbeans.c\n\nPatch 7.4.1175 (after 7.4.1169)\nProblem:    Can't build with Mingw and Cygwin.\nSolution:   Remove extra \"endif\". (Christian J. Robinson)\nFiles:      src/Make_cyg_ming.mak\n\nPatch 7.4.1176\nProblem:    Missing change to proto file.\nSolution:   Update the proto file. (Charles Cooper)\nFiles:      src/proto/gui_w32.pro\n\nPatch 7.4.1177\nProblem:    The +channel feature is not in :version output. (Tony Mechelynck)\nSolution:   Add the feature string.\nFiles:      src/version.c\n\nPatch 7.4.1178\nProblem:    empty() doesn't work for the new special variables.\nSolution:   Make empty() work. (Damien)\nFiles:      src/eval.c, src/testdir/test_viml.vim\n\nPatch 7.4.1179\nProblem:    test_writefile and test_viml do not delete the tempfile.\nSolution:   Delete the tempfile. (Charles Cooper)  Add DeleteTheScript().\nFiles:      src/testdir/test_writefile.in, src/testdir/test_viml.vim\n\nPatch 7.4.1180\nProblem:    Crash with invalid argument to glob2regpat().\nSolution:   Check for NULL. (Justin M. Keyes, closes #596)  Add a test.\nFiles:      src/eval.c, src/testdir/test_glob2regpat.vim,\n            src/testdir/test_alot.vim\n\nPatch 7.4.1181\nProblem:    free_tv() can't handle special variables. (Damien)\nSolution:   Add the variable type.\nFiles:      src/eval.c, src/testdir/test_viml.vim\n\nPatch 7.4.1182\nProblem:    Still socket code intertwined with netbeans.\nSolution:   Move code from netbeans.c to channel.c\nFiles:      src/channel.c, src/netbeans.c, src/proto/channel.pro,\n            src/proto/netbeans.pro, src/gui.c, src/gui_w48.c\n\nPatch 7.4.1183 (after 7.4.1182)\nProblem:    MS-Windows build is broken.\nSolution:   Remove init in wrong place.\nFiles:      src/channel.c\n\nPatch 7.4.1184 (after 7.4.1182)\nProblem:    MS-Windows build is still broken.\nSolution:   Change nbsock to ch_fd.\nFiles:      src/channel.c\n\nPatch 7.4.1185\nProblem:    Can't build with TCL on some systems.\nSolution:   Rename the channel_ functions.\nFiles:      src/if_tcl.c\n\nPatch 7.4.1186\nProblem:    Error messages for security context are hard to translate.\nSolution:   Use one string with %s. (Ken Takata)\nFiles:      src/os_unix.c\n\nPatch 7.4.1187\nProblem:    MS-Windows channel code only supports one channel.  Doesn't build\n            without netbeans support.\nSolution:   Get the channel index from the socket in the message. Closes #600.\nFiles:      src/channel.c, src/netbeans.c, src/gui_w48.c,\n            src/proto/channel.pro, src/proto/netbeans.pro\n\nPatch 7.4.1188\nProblem:    Using older JSON standard.\nSolution:   Update the link.  Adjust the text a bit.\nFiles:      src/json.c, runtime/doc/eval.txt\n\nPatch 7.4.1189 (after 7.4.1165)\nProblem:    Using another language on MS-Windows does not work. (Yongwei Wu)\nSolution:   Undo the change to try loading libintl-8.dll first.\nFiles:      src/os_win32.c\n\nPatch 7.4.1190\nProblem:    On OSX the default flag for dlopen() is different.\nSolution:   Add RTLD_LOCAL in the configure check. (sv99, closes #604)\nFiles:      src/configure.in, src/auto/configure\n\nPatch 7.4.1191\nProblem:    The channel feature isn't working yet.\nSolution:   Add the connect(), disconnect(), sendexpr() and sendraw()\n            functions.  Add initial documentation.  Add a demo server.\nFiles:      src/channel.c, src/eval.c, src/proto/channel.pro,\n            src/proto/eval.pro, runtime/doc/channel.txt, runtime/doc/eval.txt,\n            runtime/doc/Makefile, runtime/tools/demoserver.py\n\nPatch 7.4.1192\nProblem:    Can't build with FEAT_EVAL but without FEAT_MBYTE. (John\n            Marriott)\nSolution:   Add #ifdef for FEAT_MBYTE.\nFiles:      src/json.c\n\nPatch 7.4.1193\nProblem:    Can't build the channel feature on MS-Windows.\nSolution:   Add #ifdef HAVE_POLL.\nFiles:      src/channel.c\n\nPatch 7.4.1194\nProblem:    Compiler warning for not using return value of fwrite().\nSolution:   Return OK/FAIL. (Charles Campbell)\nFiles:      src/channel.c, src/proto/channel.pro\n\nPatch 7.4.1195\nProblem:    The channel feature does not work in the MS-Windows console.\nSolution:   Add win32 console support. (Yasuhiro Matsumoto)\nFiles:      src/channel.c, src/gui_w32.c, src/os_mswin.c, src/os_win32.c,\n            src/proto/gui_w32.pro, src/proto/os_mswin.pro, src/vim.h\n\nPatch 7.4.1196\nProblem:    Still using __ARGS.\nSolution:   Remove __ARGS in several files. (script by Hirohito Higashi)\nFiles:      src/arabic.c, src/buffer.c, src/charset.c, src/crypt_zip.c,\n            src/diff.c, src/digraph.c, src/edit.c, src/ex_cmds.c,\n            src/ex_cmds2.c, src/ex_docmd.c\n\nPatch 7.4.1197\nProblem:    Still using __ARGS.\nSolution:   Remove __ARGS in several files. (script by Hirohito Higashi)\nFiles:      src/ex_eval.c, src/ex_getln.c, src/farsi.c, src/fileio.c,\n            src/fold.c, src/getchar.c, src/gui.c, src/gui_at_fs.c,\n            gui_at_sb.c, src/gui_athena.c, src/gui_beval.c, src/gui_motif.c,\n            src/gui_w32.c, src/gui_w48.c\n\nPatch 7.4.1198\nProblem:    Still using __ARGS.\nSolution:   Remove __ARGS in several files. (script by Hirohito Higashi)\n            Also remove use of HAVE_STDARG_H.\nFiles:      src/gui_x11.c, src/hangulin.c, src/hardcopy.c, src/hashtab.c,\n            src/if_cscope.c, src/if_python3.c, src/if_sniff.c,\n            src/if_xcmdsrv.c, src/main.c, src/mark.c, src/mbyte.c,\n            src/memfile.c, src/memfile_test.c, src/memline.c, src/menu.c,\n            src/message.c, src/misc1.c, src/misc2.c, src/move.c,\n            src/netbeans.c, src/normal.c\n\nPatch 7.4.1199\nProblem:    Still using __ARGS.\nSolution:   Remove __ARGS in several files. (script by Hirohito Higashi)\nFiles:      src/ops.c, src/option.c, src/os_amiga.c, src/os_mac_conv.c,\n            src/os_unix.c, src/os_vms.c, src/os_w32exe.c, src/popupmnu.c,\n            src/pty.c, src/quickfix.c, src/regexp.c, src/regexp_nfa.c,\n            src/screen.c, src/search.c, src/sha256.c, src/spell.c,\n            src/syntax.c, src/tag.c, src/term.c, src/termlib.c, src/ui.c,\n            src/undo.c, src/version.c, src/window.c\n\nPatch 7.4.1200\nProblem:    Still using __ARGS.\nSolution:   Remove __ARGS in several files. (script by Hirohito Higashi)\nFiles:      src/blowfish.c, src/ex_cmds2.c, src/ex_getln.c, src/fold.c,\n            src/gui_beval.c, src/gui_w32.c, src/os_unix.c, src/os_win16.c,\n            src/pty.c, src/regexp.c, src/syntax.c, src/xpm_w32.c,\n            src/ex_cmds.h, src/globals.h, src/gui_at_sb.h, src/gui_beval.h,\n            src/if_cscope.h, src/if_sniff.h, src/nbdebug.h, src/os_unix.h,\n            src/proto.h, src/structs.h, src/vim.h, src/xpm_w32.h,\n            src/if_perl.xs, src/proto/if_lua.pro, src/proto/pty.pro,\n            runtime/tools/xcmdsrv_client.c,\n            src/Makefile\n\nPatch 7.4.1201\nProblem:    One more file still using __ARGS.\nSolution:   Remove __ARGS in the last file. (script by Hirohito Higashi)\nFiles:      src/gui_at_sb.c\n\nPatch 7.4.1202\nProblem:    Still one more file still using __ARGS.\nSolution:   Remove __ARGS in the last file. (script by Hirohito Higashi)\n            (closes #612)\nFiles:      src/proto/os_mac_conv.pro, src/os_mac_conv.c, src/Makefile\n\nPatch 7.4.1203\nProblem:    Still more files still using __ARGS.\nSolution:   Remove __ARGS in really the last files.\nFiles:      src/proto/if_mzsch.pro, src/if_mzsch.c, src/vim.h,\n            src/proto/gui_gtk_gresources.pro, src/proto/gui_mac.pro,\n            src/proto/if_ole.pro, src/proto/os_qnx.pro, src/Makefile\n\nPatch 7.4.1204\nProblem:    Latin1 characters cause encoding conversion.\nSolution:   Remove the characters.\nFiles:      src/gui_motif.c\n\nPatch 7.4.1205\nProblem:    Using old style function declarations.\nSolution:   Change to new style function declarations. (script by Hirohito\n            Higashi)\nFiles:      src/arabic.c, src/blowfish.c, src/buffer.c, src/channel.c,\n            src/charset.c, src/crypt.c, src/crypt_zip.c, src/diff.c,\n            src/digraph.c, src/edit.c, src/eval.c\n\nPatch 7.4.1206\nProblem:    Using old style function declarations.\nSolution:   Change to new style function declarations. (script by Hirohito\n            Higashi)\nFiles:      src/ex_cmds.c, src/ex_cmds2.c, src/ex_docmd.c, src/ex_eval.c,\n            src/ex_getln.c, src/farsi.c, src/fileio.c\n\nPatch 7.4.1207\nProblem:    Using old style function declarations.\nSolution:   Change to new style function declarations. (script by Hirohito\n            Higashi)\nFiles:      src/fold.c, src/getchar.c, src/gui_at_fs.c, src/gui_athena.c,\n            src/gui_at_sb.c, src/gui_beval.c, src/gui.c, src/gui_gtk.c,\n            src/gui_gtk_x11.c, src/gui_mac.c, src/gui_motif.c\n\nPatch 7.4.1208\nProblem:    Using old style function declarations.\nSolution:   Change to new style function declarations. (script by Hirohito\n            Higashi)\nFiles:      src/gui_photon.c, src/gui_w32.c, src/gui_w48.c, src/gui_x11.c,\n            src/hangulin.c, src/hardcopy.c, src/hashtab.c, src/if_cscope.c,\n            src/if_mzsch.c, src/if_perlsfio.c, src/if_python.c,\n            src/if_python3.c, src/if_ruby.c, src/if_sniff.c, src/if_tcl.c,\n            src/if_xcmdsrv.c, src/integration.c\n\nPatch 7.4.1209 (after 7.4.1207)\nProblem:    Can't build with Athena. (Elimar Riesebieter)\nSolution:   Fix function declarations.\nFiles:      src/gui_athena.c, src/gui_x11.c, src/gui_at_sb.c, src/gui_at_fs.c\n\nPatch 7.4.1210\nProblem:    Using old style function declarations.\nSolution:   Change to new style function declarations. (script by Hirohito\n            Higashi)\nFiles:      src/main.c, src/mark.c, src/mbyte.c, src/memfile.c,\n            src/memfile_test.c, src/memline.c, src/menu.c, src/message.c\n\nPatch 7.4.1211\nProblem:    Using old style function declarations.\nSolution:   Change to new style function declarations. (script by Hirohito\n            Higashi)\nFiles:      src/misc1.c, src/misc2.c, src/move.c, src/netbeans.c,\n            src/normal.c, src/ops.c, src/option.c\n\nPatch 7.4.1212 (after 7.4.1207)\nProblem:    Can't build with Motif.\nSolution:   Fix function declaration.(Dominique Pelle)\nFiles:      src/gui_motif.c\n\nPatch 7.4.1213\nProblem:    Using old style function declarations.\nSolution:   Change to new style function declarations. (script by Hirohito\n            Higashi)\nFiles:      src/os_amiga.c, src/os_mac_conv.c, src/os_msdos.d, src/os_mswin.c,\n            src/os_qnx.c, src/os_unix.c, src/os_vms.c, src/os_win16.c,\n            src/os_win32.c, src/popupmnu.c, src/pty.c, src/quickfix.c,\n            src/regexp.c, src/regexp_nfa.c, src/screen.c\n\nPatch 7.4.1214\nProblem:    Using old style function declarations.\nSolution:   Change to new style function declarations. (script by Hirohito\n            Higashi)\nFiles:      src/search.c, src/sha256.c, src/spell.c, src/syntax.c, src/tag.c,\n            src/term.c, src/termlib.c, src/ui.c, src/undo.c\n\nPatch 7.4.1215\nProblem:    Using old style function declarations.\nSolution:   Change to new style function declarations. (script by Hirohito\n            Higashi)\nFiles:      src/version.c, src/winclip.c, src/window.c, src/workshop.c,\n            src/xpm_w32.c, runtime/doc/doctags.c,\n            runtime/tools/xcmdsrv_client.c, src/po/sjiscorr.c, src/xxd/xxd.c\n\nPatch 7.4.1216\nProblem:    Still using HAVE_STDARG_H.\nSolution:   Assume it's always defined.\nFiles:      src/eval.c, src/misc2.c, src/vim.h, src/proto.h, src/configure.in,\n            src/auto/configure, config.h.in, src/os_amiga.h, src/os_msdos.h,\n            src/os_vms_conf.h, src/os_win32.h\n\nPatch 7.4.1217\nProblem:    Execution of command on channel doesn't work yet.\nSolution:   Implement the \"ex\" and \"normal\" commands.\nFiles:      src/channel.c, src/proto/channel.pro, src/misc2.c, src/eval.c,\n            src/ex_docmd.c, src/proto/ex_docmd.pro, src/feature.h\n\nPatch 7.4.1218\nProblem:    Missing change in configure.  More changes for function style.\nSolution:   Avoid the typos.\nFiles:      src/configure.in, src/config.h.in, runtime/tools/ccfilter.c,\n            src/os_msdos.c\n\nPatch 7.4.1219\nProblem:    Build fails with +channel but without +float.\nSolution:   Add #ifdef.\nFiles:      src/ex_cmds.c\n\nPatch 7.4.1220\nProblem:    Warnings for unused variables in tiny build. (Tony Mechelynck)\nSolution:   Move declarations inside #ifdef. (Hirohito Higashi)\nFiles:      src/ex_cmds.c\n\nPatch 7.4.1221\nProblem:    Including netbeans and channel support in small and tiny builds.\n            Build fails with some interfaces.\nSolution:   Only include these features in small build and above.  Let\n            configure fail if trying to enable an interface that won't build.\nFiles:      src/configure.in, src/auto/configure\n\nPatch 7.4.1222\nProblem:    \":normal\" command and others missing in tiny build.\nSolution:   Graduate FEAT_EX_EXTRA.\nFiles:      src/feature.h, src/charset.c, src/eval.c, src/ex_cmds.c,\n            src/ex_cmds2.c, src/ex_docmd.c, src/ex_getln.c, src/getchar.c,\n            src/normal.c, src/ui.c, src/version.c, src/globals.h\n\nPatch 7.4.1223\nProblem:    Crash when setting v:errors to a number.\nSolution:   Free the typval without assuming its type. (Yasuhiro Matsumoto)\nFiles:      src/eval.c, src/testdir/test_assert.vim\n\nPatch 7.4.1224\nProblem:    Build problems with GTK on BSD. (Mike Williams)\nSolution:   Don't use \"$<\". Skip building gui_gtk_gresources.h when it doesn't\n            work. (Kazunobu Kuriyama)\nFiles:      src/Makefile\n\nPatch 7.4.1225\nProblem:    Still a few old style function declarations.\nSolution:   Make them new style. (Hirohito Higashi)\nFiles:      runtime/tools/blink.c, src/eval.c, src/ex_cmds2.c, src/ex_getln.c,\n            src/fileio.c, src/gui_w32.c, src/gui_x11.c, src/if_perl.xs,\n            src/os_unix.c, src/po/sjiscorr.c, src/pty.c\n\nPatch 7.4.1226\nProblem:    GRESOURCE_HDR is unused.\nSolution:   Remove it. (Kazunobu Kuriyama)\nFiles:      src/configure.in, src/auto/configure, src/config.mk.in\n\nPatch 7.4.1227\nProblem:    Compiler warnings.\nSolution:   Add UNUSED.  Add type cast. (Yegappan Lakshmanan)\nFiles:      src/getchar.c, src/os_macosx.m\n\nPatch 7.4.1228\nProblem:    copy() and deepcopy() fail with special variables. (Nikolai\n            Pavlov)\nSolution:   Make it work.  Add a test.  Closes #614.\nFiles:      src/eval.c, src/testdir/test_viml.vim\n\nPatch 7.4.1229\nProblem:    \"eval\" and \"expr\" channel commands don't work yet.\nSolution:   Implement them.  Update the error numbers.  Also add \"redraw\".\nFiles:      src/channel.c, src/eval.c, src/json.c, src/ex_docmd.c,\n            src/proto/channel.pro, src/proto/json.pro, src/proto/ex_docmd.pro,\n            runtime/doc/channel.txt\n\nPatch 7.4.1230\nProblem:    Win32: opening a channel may hang.  Not checking for messages\n            while waiting for characters.\nSolution:   Add a zero timeout.  Call parse_queued_messages(). (Yasuhiro\n            Matsumoto)\nFiles:      src/os_win32.c\n\nPatch 7.4.1231\nProblem:    JSON messages are not parsed properly.\nSolution:   Queue received messages.\nFiles:      src/eval.c src/channel.c, src/json.c, src/proto/eval.pro,\n            src/proto/channel.pro, src/proto/json.pro, src/structs.h\n\nPatch 7.4.1232\nProblem:    Compiler warnings when the Sniff feature is enabled.\nSolution:   Add UNUSED.\nFiles:      src/gui_gtk_x11.c\n\nPatch 7.4.1233\nProblem:    Channel command may cause a crash.\nSolution:   Check for NULL argument. (Damien)\nFiles:      src/channel.c\n\nPatch 7.4.1234\nProblem:    Demo server only runs with Python 2.\nSolution:   Make it run with Python 3 as well. (Ken Takata)\nFiles:      runtime/tools/demoserver.py\n\nPatch 7.4.1235 (after 7.4.1231)\nProblem:    Missing change to eval.c.\nSolution:   Include that change.\nFiles:      src/eval.c\n\nPatch 7.4.1236\nProblem:    When \"syntax manual\" was used switching between buffers removes\n            the highlighting.\nSolution:   Set the syntax option without changing the value. (Anton\n            Lindqvist)\nFiles:      runtime/syntax/manual.vim\n\nPatch 7.4.1237\nProblem:    Can't translate message without adding a line break.\nSolution:   Join the two parts of the message.\nFiles:      src/memline.c\n\nPatch 7.4.1238\nProblem:    Can't handle two messages right after each other.\nSolution:   Find the end of the JSON.  Read more when incomplete.  Add a C\n            test for the JSON decoding.\nFiles:      src/channel.c, src/json.c, src/proto/json.pro, src/eval.c,\n            src/Makefile, src/json_test.c, src/memfile_test.c, src/structs.h\n\nPatch 7.4.1239\nProblem:    JSON message after the first one is dropped.\nSolution:   Put remainder of message back in the queue.\nFiles:      src/channel.c\n\nPatch 7.4.1240\nProblem:    Visual studio tools are noisy.\nSolution:   Suppress startup info. (Mike Williams)\nFiles:      src/GvimExt/Makefile, src/Make_mvc.mak, src/tee/Make_mvc.mak\n\nPatch 7.4.1241 (after 7.4.1238)\nProblem:    Missing change in Makefile due to diff mismatch\nSolution:   Update the list of object files.\nFiles:      src/Makefile\n\nPatch 7.4.1242 (after 7.4.1238)\nProblem:    json_test fails without the eval feature.\nSolution:   Add #ifdef.\nFiles:      src/json_test.c\n\nPatch 7.4.1243\nProblem:    Compiler warning for uninitialized variable.\nSolution:   Initialize it. (Elias Diem)\nFiles:      src/json.c\n\nPatch 7.4.1244\nProblem:    The channel functions don't sort together.\nSolution:   Use a common \"ch_\" prefix.\nFiles:      src/eval.c, runtime/doc/eval.txt, runtime/tools/demoserver.py\n\nPatch 7.4.1245\nProblem:    File missing from distribution.\nSolution:   Add json_test.c.\nFiles:      Filelist\n\nPatch 7.4.1246\nProblem:    The channel functionality isn't tested.\nSolution:   Add a test using a Python test server.\nFiles:      src/channel.c, src/proto/channel.pro,\n            src/testdir/test_channel.vim, src/testdir/test_channel.py,\n            src/testdir/Make_all.mak\n\nPatch 7.4.1247\nProblem:    The channel test doesn't run on MS-Windows.\nSolution:   Make it work on the MS-Windows console. (Ken Takata)\nFiles:      src/testdir/test_channel.py, src/testdir/test_channel.vim\n\nPatch 7.4.1248\nProblem:    Can't reliably stop the channel test server.  Can't start the\n            server if the python file is not executable.\nSolution:   Use \"pkill\" instead of \"killall\".  Run the python file as an\n            argument instead of as an executable.\nFiles:      src/testdir/test_channel.vim\n\nPatch 7.4.1249\nProblem:    Crash when the process a channel is connected to exits.\nSolution:   Use the file descriptor properly.  Add a test. (Damien)\n            Also add a test for eval().\nFiles:      src/channel.c, src/testdir/test_channel.py,\n            src/testdir/test_channel.vim\n\nPatch 7.4.1250\nProblem:    Running tests in shadow directory fails.\nSolution:   Also link testdir/*.py\nFiles:      src/Makefile\n\nPatch 7.4.1251\nProblem:    New test file missing from distribution.\nSolution:   Add src/testdir/*.py.\nFiles:      Filelist\n\nPatch 7.4.1252\nProblem:    The channel test server may receive two messages concatenated.\nSolution:   Split the messages.\nFiles:      src/testdir/test_channel.py\n\nPatch 7.4.1253\nProblem:    Python test server not displaying second of two commands.\n            Solaris doesn't have \"pkill --full\".\nSolution:   Also echo the second command. Use \"pkill -f\".\nFiles:      src/testdir/test_channel.py, src/testdir/test_channel.vim\n\nPatch 7.4.1254\nProblem:    Opening a second channel causes a crash. (Ken Takata)\nSolution:   Don't re-allocate the array with channels.\nFiles:      src/channel.c, src/testdir/test_channel.vim,\n            src/testdir/test_channel.py\n\nPatch 7.4.1255\nProblem:    Crash for channel \"eval\" command without third argument.\nSolution:   Check for missing argument.\nFiles:      src/channel.c, src/testdir/test_channel.vim,\n            src/testdir/test_channel.py\n\nPatch 7.4.1256\nProblem:    On Mac sys.exit(0) doesn't kill the test server.\nSolution:   Use self.server.shutdown(). (Jun Takimoto)\nFiles:      src/testdir/test_channel.py\n\nPatch 7.4.1257\nProblem:    Channel test fails in some configurations.\nSolution:   Add check for the +channel feature.\nFiles:      src/testdir/test_channel.vim\n\nPatch 7.4.1258\nProblem:    The channel test can fail if messages arrive later.\nSolution:   Add a short sleep. (Jun T.)\nFiles:      src/testdir/test_channel.vim\n\nPatch 7.4.1259\nProblem:    No test for what patch 7.3.414 fixed.\nSolution:   Add a test. (Elias Diem)\nFiles:      src/testdir/test_increment.vim\n\nPatch 7.4.1260\nProblem:    The channel feature doesn't work on Win32 GUI.\nSolution:   Use WSAGetLastError(). (Ken Takata)\nFiles:      src/channel.c, src/testdir/test_channel.vim, src/vim.h\n\nPatch 7.4.1261\nProblem:    Pending channel messages are garbage collected. Leaking memory in\n            ch_sendexpr().  Leaking memory for a decoded JSON string.\nSolution:   Mark the message list as used. Free the encoded JSON.  Don't save\n            the JSON string.\nFiles:      src/eval.c, src/channel.c, src/json.c, src/proto/channel.pro\n\nPatch 7.4.1262\nProblem:    The channel callback is not invoked.\nSolution:   Make a list of pending callbacks.\nFiles:      src/eval.c, src/channel.c, src/proto/channel.pro,\n            src/testdir/test_channel.vim\n\nPatch 7.4.1263\nProblem:    ch_open() hangs when the server isn't running.\nSolution:   Add a timeout. Use a dict to pass arguments. (Yasuhiro Matsumoto)\nFiles:      runtime/doc/eval.txt, runtime/doc/channel.txt, src/channel.c,\n            src/eval.c, src/netbeans.c, src/os_win32.c, src/proto/channel.pro,\n            src/testdir/test_channel.vim\n\nPatch 7.4.1264\nProblem:    Crash when receiving an empty array.\nSolution:   Check for array with wrong number of arguments. (Damien)\nFiles:      src/channel.c, src/eval.c, src/testdir/test_channel.py,\n            src/testdir.test_channel.vim\n\nPatch 7.4.1265\nProblem:    Not all channel commands are tested.\nSolution:   Add a test for \"normal\", \"expr\" and \"redraw\".\nFiles:      src/testdir/test_channel.py, src/testdir/test_channel.vim\n\nPatch 7.4.1266\nProblem:    A BufAdd autocommand may cause an ml_get error (Christian\n            Brabandt)\nSolution:   Increment RedrawingDisabled earlier.\nFiles:      src/ex_cmds.c\n\nPatch 7.4.1267\nProblem:    Easy to miss handling all types of variables.\nSolution:   Change the variable type into an enum.\nFiles:      src/structs.h, src/eval.c\n\nPatch 7.4.1268\nProblem:    Waittime is used as seconds instead of milliseconds. (Hirohito\n            Higashi)\nSolution:   Divide by 1000.\nFiles:      src/channel.c\n\nPatch 7.4.1269\nProblem:    Encoding {'key':v:none} to JSON doesn't give an error (Tyru)\nSolution:   Give an error.\nFiles:      src/json.c, src/testdir/test_json.vim\n\nPatch 7.4.1270\nProblem:    Warnings for missing values in switch.\nSolution:   Change switch to if-else or add values.\nFiles:      src/if_py_both.h, src/if_python.c, src/if_python3.c\n\nPatch 7.4.1271\nProblem:    assert_false(v:false) reports an error. (Nikolai Pavlov)\nSolution:   Recognize v:true and v:false. (Closes #625)\nFiles:      src/eval.c, src/testdir/test_assert.vim\n\nPatch 7.4.1272 (after 7.4.1270)\nProblem:    Using future enum value.\nSolution:   Remove it.\nFiles:      src/if_python.c, src/if_python3.c\n\nPatch 7.4.1273 (after 7.4.1271)\nProblem:    assert_false(v:false) still fails.\nSolution:   Fix the typo.\nFiles:      src/eval.c\n\nPatch 7.4.1274\nProblem:    Cannot run a job.\nSolution:   Add job_start(), job_status() and job_stop(). Currently only works\n            for Unix.\nFiles:      src/eval.c, src/structs.h, runtime/doc/eval.txt, src/os_unix.c,\n            src/proto/os_unix.pro, src/feature.h, src/version.c,\n            src/testdir/test_channel.vim\n\nPatch 7.4.1275 (after 7.4.1274)\nProblem:    Build fails on MS-Windows.\nSolution:   Fix wrong #ifdef.\nFiles:      src/eval.c\n\nPatch 7.4.1276\nProblem:    Warning for not using return value of fcntl().\nSolution:   Explicitly ignore the return value.\nFiles:      src/fileio.c, src/channel.c, src/memfile.c, src/memline.c\n\nPatch 7.4.1277\nProblem:    Compiler can complain about missing enum value in switch with some\n            combination of features.\nSolution:   Remove #ifdefs around case statements.\nFiles:      src/eval.c\n\nPatch 7.4.1278\nProblem:    When jsonencode() fails it still returns something.\nSolution:   Return an empty string on failure.\nFiles:      src/json.c, src/channel.c, src/testdir/test_json.vim,\n            src/testdir/test_channel.vim, src/testdir/test_channel.py\n\nPatch 7.4.1279\nProblem:    jsonencode() is not producing strict JSON.\nSolution:   Add jsencode() and jsdecode().  Make jsonencode() and jsondecode()\n            strict.\nFiles:      src/json.c, src/json_test.c, src/proto/json.pro, src/channel.c,\n            src/proto/channel.pro, src/eval.c, src/vim.h, src/structs.h,\n            runtime/doc/eval.txt, runtime/doc/channel.txt,\n            src/testdir/test_json.vim\n\nPatch 7.4.1280\nProblem:    Missing case value.\nSolution:   Add VAR_JOB.\nFiles:      src/if_python.c, src/if_python3.c\n\nPatch 7.4.1281\nProblem:    No test for skipping over code that isn't evaluated.\nSolution:   Add a test with code that would fail when not skipped.\nFiles:      src/testdir/test_viml.vim\n\nPatch 7.4.1282\nProblem:    Crash when evaluating the pattern of \":catch\" causes an error.\n            (Dominique Pelle)\nSolution:   Block error messages at this point.\nFiles:      src/ex_eval.c\n\nPatch 7.4.1283\nProblem:    The job feature isn't available on MS-Windows.\nSolution:   Add the job feature.  Fix argument of job_stop(). (Yasuhiro\n            Matsumoto)\nFiles:      src/eval.c, src/feature.h, src/os_win32.c, src/proto/os_win32.pro\n\nPatch 7.4.1284 (after 7.4.1282)\nProblem:    Test 49 fails.\nSolution:   Check for a different error message.\nFiles:      src/testdir/test49.vim\n\nPatch 7.4.1285\nProblem:    Cannot measure elapsed time.\nSolution:   Add reltimefloat().\nFiles:      src/ex_cmds2.c, src/eval.c, src/proto/ex_cmds2.pro,\n            src/testdir/test_reltime.vim, src/testdir/test_alot.vim\n\nPatch 7.4.1286\nProblem:    ch_open() with a timeout doesn't work correctly.\nSolution:   Change how select() is used.  Don't give an error on timeout.\n            Add a test for ch_open() failing.\nFiles:      src/channel.c, src/testdir/test_channel.vim\n\nPatch 7.4.1287 (after 7.4.1286)\nProblem:    Channel test fails.\nSolution:   Use reltimefloat().\nFiles:      src/testdir/test_channel.vim\n\nPatch 7.4.1288\nProblem:    ch_sendexpr() does not use JS encoding.\nSolution:   Use the encoding that fits the channel mode.  Refuse using\n            ch_sendexpr() on a raw channel.\nFiles:      src/channel.c, src/proto/channel.pro, src/eval.c\n\nPatch 7.4.1289\nProblem:    Channel test fails on MS-Windows, connect() takes too long.\nSolution:   Adjust the test for MS-Windows using \"waittime\".\nFiles:      src/channel.c, src/testdir/test_channel.vim\n\nPatch 7.4.1290\nProblem:    Coverity complains about unnecessary check for NULL.\nSolution:   Remove the check.\nFiles:      src/eval.c\n\nPatch 7.4.1291\nProblem:    On MS-Windows the channel test server doesn't quit.\nSolution:   Use return instead of break. (Ken Takata)\nFiles:      src/testdir/test_channel.py\n\nPatch 7.4.1292\nProblem:    Some compilers complain about uninitialized variable, even though\n            all possible cases are handled. (Dominique Pelle)\nSolution:   Add a default initialization.\nFiles:      src/eval.c\n\nPatch 7.4.1293\nProblem:    Sometimes a channel may hang waiting for a message that was\n            already discarded. (Ken Takata)\nSolution:   Store the ID of the message blocking on in the channel.\nFiles:      src/channel.c\n\nPatch 7.4.1294\nProblem:    job_stop() only kills the started process.\nSolution:   Send the signal to the process group. (Olaf Dabrunz)\nFiles:      src/os_unix.c\n\nPatch 7.4.1295\nProblem:    string(job) doesn't work well on MS-Windows.\nSolution:   Use the process ID. (Yasuhiro Matsumoto)\nFiles:      src/eval.c\n\nPatch 7.4.1296\nProblem:    Cursor changes column with up motion when the matchparen plugin\n            saves and restores the cursor position. (Martin Kunev)\nSolution:   Make sure curswant is updated before invoking the autocommand.\nFiles:      src/edit.c\n\nPatch 7.4.1297\nProblem:    On Mac test_channel leaves python instances running.\nSolution:   Use a small waittime to make ch_open() work. (Ozaki Kiichi)\nFiles:      src/testdir/test_channel.vim\n\nPatch 7.4.1298\nProblem:    When the channel test fails in an unexpected way the server keeps\n            running.\nSolution:   Use try/catch. (Ozaki Kiichi)\nFiles:      src/testdir/test_channel.vim\n\nPatch 7.4.1299\nProblem:    When the server sends a message with ID zero the channel handler\n            is not invoked. (Christian J. Robinson)\nSolution:   Recognize zero value for the request ID.  Add a test for invoking\n            the channel handler.\nFiles:      src/channel.c, src/testdir/test_channel.vim,\n            src/testdir/test_channel.py\n\nPatch 7.4.1300\nProblem:    Cannot test CursorMovedI because there is typeahead.\nSolution:   Add disable_char_avail_for_testing().\nFiles:      src/eval.c, src/getchar.c, src/globals.h,\n            src/testdir/test_cursor_func.vim, src/testdir/README.txt\n\nPatch 7.4.1301\nProblem:    Missing options in ch_open().\nSolution:   Add s:chopt like in the other calls. (Ozaki Kiichi)\nFiles:      src/testdir/test_channel.vim\n\nPatch 7.4.1302\nProblem:    Typo in struct field name. (Ken Takata)\nSolution:   Rename jf_pi to jv_pi.\nFiles:      src/eval.c, src/os_win32.c, src/structs.h\n\nPatch 7.4.1303\nProblem:    A Funcref is not accepted as a callback.\nSolution:   Make a Funcref work. (Damien)\nFiles:      src/eval.c, src/testdir/test_channel.vim\n\nPatch 7.4.1304\nProblem:    Function names are difficult to read.\nSolution:   Rename jsonencode to json_encode, jsondecode to json_decode,\n            jsencode to js_encode and jsdecode to js_decode.\nFiles:      src/eval.c, runtime/doc/eval.txt, src/testdir/test_json.vim\n\nPatch 7.4.1305\nProblem:    \"\\%1l^#.*\" does not match on a line starting with \"#\".\nSolution:   Do not clear the start-of-line flag. (Christian Brabandt)\nFiles:      src/regexp.c, src/regexp_nfa.c, src/testdir/test36.in,\n            src/testdir/test36.ok\n\nPatch 7.4.1306\nProblem:    Job control doesn't work well on MS-Windows.\nSolution:   Various fixes. (Ken Takata, Ozaki Kiichi, Yukihiro Nakadaira,\n            Yasuhiro Matsumoto)\nFiles:      src/Make_mvc.mak, src/eval.c, src/os_unix.c, src/os_win32.c,\n            src/proto/os_unix.pro, src/proto/os_win32.pro, src/structs.h\n\nPatch 7.4.1307\nProblem:    Some channel tests fail on MS-Windows.\nSolution:   Disable the failing tests temporarily.\nFiles:      src/testdir/test_channel.vim\n\nPatch 7.4.1308 (after 7.4.1307)\nProblem:    Typo in test.\nSolution:   Change endf to endif.\nFiles:      src/testdir/test_channel.vim\n\nPatch 7.4.1309\nProblem:    When a test fails not all relevant info is listed.\nSolution:   Add the errors to the messages.\nFiles:      src/testdir/runtest.vim\n\nPatch 7.4.1310\nProblem:    Jobs don't open a channel.\nSolution:   Create pipes and add them to the channel.  Add ch_logfile().\n            Only Unix for now.\nFiles:      src/channel.c, src/eval.c, src/os_unix.c, src/structs.h,\n            src/gui_w48.c, src/proto/channel.pro, src/testdir/test_channel.vim,\n            src/testdir/test_channel_pipe.py, runtime/doc/eval.txt\n\nPatch 7.4.1311 (after 7.4.1310)\nProblem:    sock_T is defined too late.\nSolution:   Move it up.\nFiles:      src/vim.h\n\nPatch 7.4.1312 (after 7.4.1311)\nProblem:    sock_T is not defined without the +channel feature.\nSolution:   Always define it.\nFiles:      src/vim.h\n\nPatch 7.4.1313\nProblem:    MS-Windows: Using socket after it was closed causes an exception.\nSolution:   Don't give an error when handling WM_NETBEANS.  Re-enable tests\n            for MS-Windows.\nFiles:      src/gui_w48.c, src/testdir/test_channel.vim\n\nPatch 7.4.1314\nProblem:    Warning for uninitialized variable.\nSolution:   Initialize it. (Dominique Pelle)\nFiles:      src/channel.c\n\nPatch 7.4.1315\nProblem:    Using a channel handle does not allow for freeing it when unused.\nSolution:   Add the Channel variable type.\nFiles:      src/structs.h, src/channel.c, src/misc2.c, src/eval.c,\n            src/if_python.c, src/if_python3.c, src/json.c, src/gui_w48.c,\n            src/netbeans.c, src/proto/channel.pro, src/os_unix.c,\n            src/testdir/test_channel.py, src/testdir/test_channel.vim\n\nPatch 7.4.1316\nProblem:    Can't build MS-Windows console version. (Tux)\nSolution:   Add #ifdefs.\nFiles:      src/eval.c\n\nPatch 7.4.1317\nProblem:    MS-Windows: channel test fails.\nSolution:   Temporarily disable Test_connect_waittime().\nFiles:      src/testdir/test_channel.vim\n\nPatch 7.4.1318\nProblem:    Channel with pipes doesn't work in GUI.\nSolution:   Register input handlers for pipes.\nFiles:      src/structs.h, src/feature.h, src/channel.c, src/eval.c,\n            src/os_unix.c, src/os_win32.c, src/gui_w48.c, src/proto/channel.pro\n\nPatch 7.4.1319 (after 7.4.1318)\nProblem:    Tests fail on MS-Windows and on Unix with GUI.\nSolution:   Fix unregistering.\nFiles:      src/structs.h, src/channel.c, src/os_unix.c, src/os_win32.c,\n            src/proto/channel.pro\n\nPatch 7.4.1320\nProblem:    Building with Cygwin or MingW with channel but without Netbeans\n            doesn't work.\nSolution:   Set NETBEANS to \"no\" when not used.\nFiles:      src/Make_cyg_ming.mak\n\nPatch 7.4.1321\nProblem:    Compiler complains about missing statement.\nSolution:   Add an empty statement. (Andrei Olsen)\nFiles:      src/os_win32.c\n\nPatch 7.4.1322\nProblem:    Crash when unletting the variable that holds the channel in a\n            callback function.  (Christian Robinson)\nSolution:   Increase the reference count while invoking the callback.\nFiles:      src/eval.c, src/channel.c, src/proto/eval.pro,\n            src/testdir/test_channel.vim\n\nPatch 7.4.1323\nProblem:    Do not get warnings when building with MingW.\nSolution:   Remove the -w flag. (Ken Takata)\nFiles:      src/Make_cyg_ming.mak\n\nPatch 7.4.1324\nProblem:    Channels with pipes don't work on MS-Windows.\nSolution:   Add pipe I/O support. (Yasuhiro Matsumoto)\nFiles:      src/channel.c, src/os_win32.c, src/proto/channel.pro,\n            src/structs.h, src/vim.h, src/testdir/test_channel.vim\n\nPatch 7.4.1325\nProblem:    Channel test fails on difference between Unix and DOS line endings.\nSolution:   Strip off CR.  Make assert show difference better.\nFiles:      src/eval.c, src/channel.c\n\nPatch 7.4.1326\nProblem:    Build rules are bit too complicated.\nSolution:   Remove -lwsock32 from Netbeans, it's already added for the channel\n            feature that it depends on. (Tony Mechelynck)\nFiles:      src/Make_cyg_ming.mak\n\nPatch 7.4.1327\nProblem:    Channel test doesn't work if Python executable is python.exe.\nSolution:   Find py.exe or python.exe. (Ken Takata)\nFiles:      src/testdir/test_channel.vim\n\nPatch 7.4.1328\nProblem:    Can't compile with +job but without +channel. (John Marriott)\nSolution:   Add more #ifdefs.\nFiles:      src/os_unix.c\n\nPatch 7.4.1329\nProblem:    Crash when using channel that failed to open.\nSolution:   Check for NULL.  Update messages. (Yukihiro Nakadaira)\nFiles:      src/channel.c, src/eval.c, src/testdir/test_channel.vim\n\nPatch 7.4.1330\nProblem:    fd_read() has an unused argument.\nSolution:   Remove the timeout. (Yasuhiro Matsumoto)\nFiles:      src/channel.c\n\nPatch 7.4.1331\nProblem:    Crash when closing the channel in a callback. (Christian J.\n            Robinson)\nSolution:   Take the callback out of the list before invoking it.\nFiles:      src/channel.c, src/testdir/test_channel.vim\n\nPatch 7.4.1332\nProblem:    Problem using Python3 when compiled with MingW.\nSolution:   Define PYTHON3_HOME as a wide character string. (Yasuhiro\n            Matsumoto)\nFiles:      src/Make_cyg_ming.mak\n\nPatch 7.4.1333\nProblem:    Channel test fails on non-darwin builds.\nSolution:   Add the \"osx\" feature and test for that. (Kazunobu Kuriyama)\nFiles:      runtime/doc/eval.txt, src/eval.c, src/testdir/test_channel.vim\n\nPatch 7.4.1334\nProblem:    Many compiler warnings with MingW.\nSolution:   Add type casts. (Yasuhiro Matsumoto)\nFiles:      src/channel.c, src/dosinst.h, src/eval.c, src/ex_cmds2.c,\n            src/ex_getln.c, src/fileio.c, src/if_cscope.c, src/if_perl.xs,\n            src/if_python.c, src/if_python3.c, src/if_ruby.c, src/main.c,\n            src/mbyte.c, src/misc1.c, src/option.c, src/os_mswin.c,\n            src/os_win32.c\n\nPatch 7.4.1335\nProblem:    Can't build on MS-Windows with +job but without +channel. (Cesar\n            Romani)\nSolution:   Add #ifdefs. (Yasuhiro Matsumoto)\nFiles:      src/os_win32.c\n\nPatch 7.4.1336\nProblem:    Channel NL mode is not supported yet.\nSolution:   Add NL mode support to channels.\nFiles:      src/channel.c, src/netbeans.c, src/structs.h, src/os_unix.d,\n            src/os_win32.c, src/proto/channel.pro, src/proto/os_unix.pro,\n            src/proto/os_win32.pro, src/testdir/test_channel.vim,\n            src/testdir/test_channel_pipe.py\n\nPatch 7.4.1337 (after 7.4.1336)\nProblem:    Part of the change is missing.\nSolution:   Add changes to eval.c\nFiles:      src/eval.c\n\n\nPatch 7.4.1338 (after 7.4.1336)\nProblem:    Another part of the change is missing.\nSolution:   Type os_unix.c right this time.\nFiles:      src/os_unix.c\n\nPatch 7.4.1339\nProblem:    Warnings when building the GUI with MingW. (Cesar Romani)\nSolution:   Add type casts. (Yasuhiro Matsumoto)\nFiles:      src/edit.c, src/gui_w32.c, src/gui_w48.c, src/os_mswin.c,\n            src/os_win32.c\n\nPatch 7.4.1340 (after 7.4.1339)\nProblem:    Merge left extra #endif behind.\nSolution:   Remove the #endif\nFiles:      src/os_win32.c\n\nPatch 7.4.1341\nProblem:    It's difficult to add more arguments to ch_sendraw() and\n            ch_sendexpr().\nSolution:   Make the third option a dictionary.\nFiles:      src/eval.c, src/structs.h, src/channel.c, src/os_unix.c,\n            src/os_win32.c, src/proto/channel.pro,\n            src/testdir/test_channel.vim, runtime/doc/eval.txt\n\nPatch 7.4.1342\nProblem:    On Mac OS/X the waittime must be > 0 for connect to work.\nSolution:   Use select() in a different way. (partly by Kazunobu Kuriyama)\n            Always use a waittime of 1 or more.\nFiles:      src/eval.c, src/channel.c, src/testdir/test_channel.vim\n\nPatch 7.4.1343\nProblem:    Can't compile with +job but without +channel. (Andrei Olsen)\nSolution:   Move get_job_options up and adjust #ifdef.\nFiles:      src/eval.c\n\nPatch 7.4.1344\nProblem:    Can't compile Win32 GUI with tiny features.\nSolution:   Add #ifdef. (Christian Brabandt)\nFiles:      src/gui_w32.c\n\nPatch 7.4.1345\nProblem:    A few more compiler warnings. (Axel Bender)\nSolution:   Add type casts.\nFiles:      src/gui_w32.c, src/gui_w48.c\n\nPatch 7.4.1346\nProblem:    Compiler warnings in build with -O2.\nSolution:   Add initializations.\nFiles:      src/eval.c\n\nPatch 7.4.1347\nProblem:    When there is any error Vim will use a non-zero exit code.\nSolution:   When using \":silent!\" do not set the exit code. (Yasuhiro\n            Matsumoto)\nFiles:      src/message.c\n\nPatch 7.4.1348\nProblem:    More compiler warnings. (John Marriott)\nSolution:   Add type casts, remove unused variable.\nFiles:      src/gui_w32.c\n\nPatch 7.4.1349\nProblem:    And some more MingW compiler warnings. (Cesar Romani)\nSolution:   Add type casts.\nFiles:      src/if_mzsch.c\n\nPatch 7.4.1350\nProblem:    When the test server fails to start Vim hangs.\nSolution:   Check that there is actually something to read from the tty fd.\nFiles:      src/os_unix.c\n\nPatch 7.4.1351\nProblem:    When the port isn't opened yet when ch_open() is called it may\n            fail instead of waiting for the specified time.\nSolution:   Loop when select() succeeds but when connect() failed. Also use\n            channel logging for jobs.  Add ch_log().\nFiles:      src/channel.c, src/eval.c, src/netbeans.c, src/proto/channel.pro,\n            src/testdir/test_channel.vim, src/testdir/test_channel.py\n\nPatch 7.4.1352\nProblem:    The test script lists all functions before executing them.\nSolution:   Only list the function currently being executed.\nFiles:      src/testdir/runtest.vim\n\nPatch 7.4.1353\nProblem:    Test_connect_waittime is skipped for MS-Windows.\nSolution:   Add the test back, it works now.\nFiles:      src/testdir/test_channel.vim\n\nPatch 7.4.1354\nProblem:    MS-Windows: Mismatch between default compile options and what the\n            code expects.\nSolution:   Change the default WINVER from 0x0500 to 0x0501. (Ken Takata)\nFiles:      src/Make_cyg_ming.mak, src/Make_mvc.mak\n\nPatch 7.4.1355\nProblem:    Win32 console and GUI handle channels differently.\nSolution:   Consolidate code between Win32 console and GUI.\nFiles:      src/channel.c, src/eval.c, src/gui_w48.c, src/os_win32.c,\n            src/proto/channel.pro\n\nPatch 7.4.1356\nProblem:    Job and channel options parsing is scattered.\nSolution:   Move all option value parsing to get_job_options();\nFiles:      src/channel.c, src/eval.c, src/structs.h, src/proto/channel.pro,\n            src/testdir/test_channel.vim\n\nPatch 7.4.1357 (after 7.4.1356)\nProblem:    Error for returning value from void function.\nSolution:   Don't do that.\nFiles:      src/eval.c\n\nPatch 7.4.1358\nProblem:    Compiler warning when not building with +crypt.\nSolution:   Add #ifdef. (John Marriott)\nFiles:      src/undo.c\n\nPatch 7.4.1359 (after 7.4.1356)\nProblem:    Channel test ch_sendexpr() times out.\nSolution:   Increase the timeout\nFiles:      src/testdir/test_channel.vim\n\nPatch 7.4.1360\nProblem:    Can't remove a callback with ch_setoptions().\nSolution:   When passing zero or an empty string remove the callback.\nFiles:      src/channel.c, src/proto/channel.pro, src/testdir/test_channel.vim\n\nPatch 7.4.1361\nProblem:    Channel test fails on Solaris.\nSolution:   Use the 1 msec waittime for all systems.\nFiles:      src/channel.c\n\nPatch 7.4.1362 (after 7.4.1356)\nProblem:    Using uninitialized value.\nSolution:   Initialize jo_set.\nFiles:      src/eval.c\n\nPatch 7.4.1363\nProblem:    Compiler warnings with tiny build.\nSolution:   Add #ifdefs.\nFiles:      src/gui_w48.c, src/gui_w32.c\n\nPatch 7.4.1364\nProblem:    The Win 16 code is not maintained and unused.\nSolution:   Remove the Win 16 support.\nFiles:      src/gui_w16.c, src/gui_w32.c, src/gui_w48.c, src/Make_w16.mak,\n            src/Makefile, src/Make_cyg_ming.mak, src/Make_mvc.mak,\n            src/proto/gui_w16.pro, src/proto/os_win16.pro, src/guiw16rc.h,\n            src/vim16.rc, src/vim16.def, src/tools16.bmp, src/eval.c,\n            src/gui.c, src/misc2.c, src/option.c, src/os_msdos.c,\n            src/os_mswin.c, src/os_win16.c, src/os_win16.h, src/version.c,\n            src/winclip.c, src/feature.h, src/proto.h, src/vim.h, Filelist\n\nPatch 7.4.1365\nProblem:    Cannot execute a single test function.\nSolution:   Add an argument to filter the functions with. (Yasuhiro Matsumoto)\nFiles:      src/testdir/runtest.vim\n\nPatch 7.4.1366\nProblem:    Typo in test and resulting error in test result.\nSolution:   Fix the typo and correct the result. (James McCoy, closes #650)\nFiles:      src/testdir/test_charsearch.in, src/testdir/test_charsearch.ok\n\nPatch 7.4.1367\nProblem:    Compiler warning for unreachable code.\nSolution:   Remove a \"break\". (Danek Duvall)\nFiles:      src/json.c\n\nPatch 7.4.1368\nProblem:    One more Win16 file remains.\nSolution:   Delete it.\nFiles:      src/proto/os_win16.pro\n\nPatch 7.4.1369\nProblem:    Channels don't have a queue for stderr.\nSolution:   Have a queue for each part of the channel.\nFiles:      src/channel.c, src/eval.c, src/structs.h, src/netbeans.c,\n            src/gui_w32.c, src/proto/channel.pro\n\nPatch 7.4.1370\nProblem:    The Python test script may keep on running.\nSolution:   Join the threads. (Yasuhiro Matsumoto)\nFiles:      src/testdir/test_channel.py\n\nPatch 7.4.1371\nProblem:    X11 GUI callbacks don't specify the part of the channel.\nSolution:   Pass the fd instead of the channel ID.\nFiles:      src/channel.c\n\nPatch 7.4.1372\nProblem:    channel read implementation is incomplete.\nSolution:   Add ch_read() and options for ch_readraw().\nFiles:      src/channel.c, src/eval.c, src/structs.h, src/proto/channel.pro,\n            src/testdir/test_channel.vim\n\nPatch 7.4.1373\nProblem:    Calling a Vim function over a channel requires turning the\n            arguments into a string.\nSolution:   Add the \"call\" command. (Damien)  Also merge \"expr\" and \"eval\"\n            into one.\nFiles:      src/channel.c, src/testdir/test_channel.py,\n            src/testdir/test_channel.vim\n\nPatch 7.4.1374\nProblem:    Channel test hangs on MS-Windows.\nSolution:   Disable the ch_read() that is supposed to time out.\nFiles:      src/testdir/test_channel.vim\n\nPatch 7.4.1375\nProblem:    Still some Win16 code.\nSolution:   Remove FEAT_GUI_W16.(Hirohito Higashi)\nFiles:      src/eval.c, src/ex_cmds.h, src/feature.h, src/gui.h, src/menu.c,\n            src/misc1.c, src/option.c, src/proto.h, src/structs.h, src/term.c,\n            src/vim.h, runtime/doc/gui_w16.txt\n\nPatch 7.4.1376\nProblem:    ch_setoptions() cannot set all options.\nSolution:   Support more options.\nFiles:      src/channel.c, src/eval.c, src/structs.h, runtime/doc/channel.txt,\n            src/testdir/test_channel.vim\n\nPatch 7.4.1377\nProblem:    Test_connect_waittime() is flaky.\nSolution:   Ignore the \"Connection reset by peer\" error.\nFiles:      src/testdir/test_channel.vim\n\nPatch 7.4.1378\nProblem:    Can't change job settings after it started.\nSolution:   Add job_setoptions() with the \"stoponexit\" flag.\nFiles:      src/eval.c, src/main.c, src/structs.h, src/proto/eval.pro,\n            src/testdir/test_channel.vim\n\nPatch 7.4.1379\nProblem:    Channel test fails on Win32 console.\nSolution:   Don't sleep when timeout is zero. Call channel_wait() before\n            channel_read(). Channels are not polled during \":sleep\". (Yukihiro\n            Nakadaira)\nFiles:      src/channel.c, src/misc2.c, src/gui_w32.c, src/os_win32.c\n\nPatch 7.4.1380\nProblem:    The job exit callback is not implemented.\nSolution:   Add the \"exit-cb\" option.\nFiles:      src/structs.h, src/eval.c, src/channel.c, src/proto/eval.pro,\n            src/misc2.c, src/macros.h, src/testdir/test_channel.vim\n\nPatch 7.4.1381 (after 7.4.1380)\nProblem:    Exit value not available on MS-Windows.\nSolution:   Set the exit value.\nFiles:      src/structs.h, src/os_win32.c\n\nPatch 7.4.1382\nProblem:    Can't get the job of a channel.\nSolution:   Add ch_getjob().\nFiles:      src/eval.c, runtime/doc/channel.txt, runtime/doc/eval.txt\n\nPatch 7.4.1383\nProblem:    GvimExt only loads the old libintl.dll.\nSolution:   Also try loading libint-8.dll. (Ken Takata, closes #608)\nFiles:      src/GvimExt/gvimext.cpp, src/GvimExt/gvimext.h\n\nPatch 7.4.1384\nProblem:    It is not easy to use a set of plugins and their dependencies.\nSolution:   Add packages, \":loadplugin\", 'packpath'.\nFiles:      src/main.c, src/ex_cmds2.c, src/option.c, src/option.h,\n            src/ex_cmds.h, src/eval.c, src/version.c, src/proto/ex_cmds2.pro,\n            runtime/doc/repeat.txt, runtime/doc/options.txt,\n            runtime/optwin.vim\n\nPatch 7.4.1385\nProblem:    Compiler warning for using array.\nSolution:   Use the right member name. (Yegappan Lakshmanan)\nFiles:      src/eval.c\n\nPatch 7.4.1386\nProblem:    When the Job exit callback is invoked, the job may be freed too\n            soon. (Yasuhiro Matsumoto)\nSolution:   Increase refcount.\nFiles:      src/eval.c\n\nPatch 7.4.1387\nProblem:    Win16 docs still referenced.\nSolution:   Remove Win16 files from the docs Makefile. (Kenichi Ito)\nFiles:      runtime/doc/Makefile\n\nPatch 7.4.1388\nProblem:    Compiler warning. (Cesar Romani)\nSolution:   Initialize variable.\nFiles:      src/ex_cmds2.c\n\nPatch 7.4.1389\nProblem:    Incomplete function declaration.\nSolution:   Add \"void\". (Yasuhiro Matsumoto)\nFiles:      src/eval.c\n\nPatch 7.4.1390\nProblem:    When building with GTK and glib-compile-resources cannot be found\n            building Vim fails. (Michael Gehring)\nSolution:   Make GLIB_COMPILE_RESOURCES empty instead of leaving it at \"no\".\n            (nuko8, closes #655)\nFiles:      src/configure.in, src/auto/configure\n\nPatch 7.4.1391\nProblem:    Warning for uninitialized variable.\nSolution:   Set it to zero. (Christian Brabandt)\nFiles:      src/eval.c\n\nPatch 7.4.1392\nProblem:    Some tests fail for Win32 console version.\nSolution:   Move the tests to SCRIPTS_MORE2.  Pass VIMRUNTIME. (Christian\n            Brabandt)\nFiles:      src/testdir/Make_all.mak\n\nPatch 7.4.1393\nProblem:    Starting a job hangs in the GUI. (Takuya Fujiwara)\nSolution:   Don't check if ch_job is NULL when checking for an error.\n            (Yasuhiro Matsumoto)\nFiles:      src/channel.c\n\nPatch 7.4.1394\nProblem:    Can't sort inside a sort function.\nSolution:   Use a struct to store the sort parameters. (Jacob Niehus)\nFiles:      src/eval.c, src/testdir/test_sort.vim\n\nPatch 7.4.1395\nProblem:    Using DETACH in quotes is not compatible with the Netbeans\n            interface. (Xavier de Gaye)\nSolution:   Remove the quotes, only use them for JSON and JS mode.\nFiles:      src/netbeans.c, src/channel.c\n\nPatch 7.4.1396\nProblem:    Compiler warnings for conversions.\nSolution:   Add type cast.\nFiles:      src/ex_cmds2.c\n\nPatch 7.4.1397\nProblem:    Sort test fails on MS-Windows.\nSolution:   Correct the compare function.\nFiles:      src/testdir/test_sort.vim\n\nPatch 7.4.1398\nProblem:    The close-cb option is not implemented yet.\nSolution:   Implement close-cb. (Yasuhiro Matsumoto)\nFiles:      src/channel.c, src/eval.c, src/structs.h, src/proto/channel.pro,\n            src/testdir/test_channel.py, src/testdir/test_channel.vim\n\nPatch 7.4.1399\nProblem:    The MS-DOS code does not build.\nSolution:   Remove the old MS-DOS code.\nFiles:      Filelist, src/Make_bc3.mak, src/Make_bc5.mak, src/Make_djg.mak,\n            src/Makefile, src/blowfish.c, src/buffer.c, src/diff.c,\n            src/digraph.c, src/dosinst.h, src/eval.c, src/ex_cmds.c,\n            src/ex_cmds2.c, src/ex_docmd.c, src/ex_getln.c, src/feature.h,\n            src/fileio.c, src/getchar.c, src/globals.h, src/macros.h,\n            src/main.c, src/mbyte.c, src/memfile.c, src/memline.c,\n            src/misc1.c, src/misc2.c, src/netbeans.c, src/option.c,\n            src/option.h, src/os_msdos.c, src/os_msdos.h, src/proto.h,\n            src/proto/os_msdos.pro, src/regexp.c, src/screen.c, src/structs.h,\n            src/syntax.c, src/term.c, src/undo.c, src/uninstal.c,\n            src/version.c, src/vim.h, src/window.c, src/xxd/Make_bc3.mak,\n            src/xxd/Make_djg.mak\n\n\nPatch 7.4.1400\nProblem:    Perl eval doesn't work properly on 64-bit big-endian machine.\nSolution:   Use 32 bit type for the key. (Danek Duvall)\nFiles:      src/if_perl.xs\n\nPatch 7.4.1401\nProblem:    Having 'autochdir' set during startup and using diff mode doesn't\n            work. (Axel Bender)\nSolution:   Don't use 'autochdir' while still starting up. (Christian\n            Brabandt)\nFiles:      src/buffer.c\n\nPatch 7.4.1402\nProblem:    GTK 3 is not supported.\nSolution:   Add GTK 3 support. (Kazunobu Kuriyama)\nFiles:      runtime/doc/eval.txt, runtime/doc/gui.txt,\n            runtime/doc/gui_x11.txt, src/auto/configure, src/channel.c,\n            src/config.h.in, src/configure.in, src/eval.c, src/gui.h,\n            src/gui_beval.c, src/gui_beval.h, src/gui_gtk.c, src/gui_gtk_f.c,\n            src/gui_gtk_f.h, src/gui_gtk_x11.c, src/if_mzsch.c, src/mbyte.c,\n            src/netbeans.c, src/structs.h, src/version.c\n\nPatch 7.4.1403\nProblem:    Can't build without the quickfix feature.\nSolution:   Add #ifdefs. Call ex_ni() for unimplemented commands. (Yegappan\n            Lakshmanan)\nFiles:      src/ex_cmds2.c, src/popupmnu.c\n\nPatch 7.4.1404\nProblem:    ch_read() doesn't time out on MS-Windows.\nSolution:   Instead of WM_NETBEANS use select(). (Yukihiro Nakadaira)\nFiles:      src/channel.c, src/gui_w32.c, src/os_win32.c, src/structs.h,\n            src/testdir/test_channel.vim, src/vim.h\n\nPatch 7.4.1405\nProblem:    Completion menu flickers.\nSolution:   Delay showing the popup menu. (Shougo, Justin M. Keyes, closes\n            #656)\nFiles:      src/edit.c\n\nPatch 7.4.1406\nProblem:    Leaking memory in cs_print_tags_priv().\nSolution:   Free tbuf. (idea by Forrest Fleming)\nFiles:      src/if_cscope.c\n\nPatch 7.4.1407\nProblem:    json_encode() does not handle NaN and inf properly. (David\n            Barnett)\nSolution:   For JSON turn them into \"null\".  For JS use \"NaN\" and \"Infinity\".\n            Add isnan().\nFiles:      src/eval.c, src/json.c, src/testdir/test_json.vim\n\nPatch 7.4.1408\nProblem:    MS-Windows doesn't have isnan() and isinf().\nSolution:   Use _isnan() and _isinf().\nFiles:      src/eval.c, src/json.c\n\nPatch 7.4.1409 (after 7.4.1402)\nProblem:    Configure includes GUI despite --disable-gui flag.\nSolution:   Add SKIP_GTK3. (Kazunobu Kuriyama)\nFiles:      src/configure.in, src/auto/configure\n\nPatch 7.4.1410\nProblem:    Leaking memory in cscope interface.\nSolution:   Free memory when no tab is found. (Christian Brabandt)\nFiles:      src/if_cscope.c\n\nPatch 7.4.1411\nProblem:    Compiler warning for indent. (Ajit Thakkar)\nSolution:   Indent normally.\nFiles:      src/ui.c\n\nPatch 7.4.1412\nProblem:    Compiler warning for indent. (Dominique Pelle)\nSolution:   Fix the indent.\nFiles:      src/farsi.c\n\nPatch 7.4.1413\nProblem:    When calling ch_close() the close callback is invoked, even though\n            the docs say it isn't. (Christian J. Robinson)\nSolution:   Don't call the close callback.\nFiles:      src/eval.c, src/channel.c, src/netbeans.c, src/proto/channel.pro\n\nPatch 7.4.1414\nProblem:    Appveyor only builds one feature set.\nSolution:   Build a combination of features and GUI/console. (Christian\n            Brabandt)\nFiles:      appveyor.yml, src/appveyor.bat\n\nPatch 7.4.1415 (after 7.4.1414)\nProblem:    Dropped the skip-tags setting.\nSolution:   Put it back.\nFiles:      appveyor.yml\n\nPatch 7.4.1416\nProblem:    Using \"u_char\" instead of \"char_u\", which doesn't work everywhere.\n            (J\u00f6rg Plate)\nSolution:   Use \"char_u\" always.\nFiles:      src/integration.c, src/macros.h\n\nPatch 7.4.1417 (after 7.4.1414)\nProblem:    Missing appveyor.bat from the distribution.\nSolution:   Add it to the list of files.\nFiles:      Filelist\n\nPatch 7.4.1418\nProblem:    job_stop() on MS-Windows does not really stop the job.\nSolution:   Make the default to stop the job forcefully. (Ken Takata)\n            Make MS-Windows and Unix more similar.\nFiles:      src/os_win32.c, src/os_unix.c, runtime/doc/eval.txt\n\nPatch 7.4.1419\nProblem:    Tests slowed down because of the \"not a terminal\" warning.\nSolution:   Add the --not-a-term command line argument.\nFiles:      src/main.c, src/testdir/Makefile, src/Make_all.mak,\n            src/Make_amiga.mak, src/testdir/Make_dos.mak,\n            src/testdir/Make_ming.mak, src/testdir/Make_vms.mms,\n            runtime/doc/starting.txt\n\nPatch 7.4.1420 (after 7.4.1419)\nProblem:    Missing makefile.\nSolution:   Type the path correctly.\nFiles:      src/testdir/Make_all.mak\n\nPatch 7.4.1421\nProblem:    May free a channel when a callback may need to be invoked.\nSolution:   Keep the channel when refcount is zero.\nFiles:      src/eval.c, src/channel.c, src/proto/channel.pro\n\nPatch 7.4.1422\nProblem:    Error when reading fails uses wrong errno.  Keeping channel open\n            after job stops results in test failing.\nSolution:   Move the error up.  Add ch_job_killed.\nFiles:      src/channel.c, src/eval.c, src/structs.h\n\nPatch 7.4.1423\nProblem:    Channel test fails on MS-Windows.\nSolution:   Do not give an error message when reading fails, assume the other\n            end exited.\nFiles:      src/channel.c\n\nPatch 7.4.1424\nProblem:    Not using --not-a-term when running tests on MS-Windows.\nSolution:   Use NO_PLUGIN. (Christian Brabandt)\nFiles:      src/testdir/Make_dos.mak\n\nPatch 7.4.1425\nProblem:    There are still references to MS-DOS support.\nSolution:   Remove most of the help txt and install instructions. (Ken Takata)\nFiles:      src/INSTALLpc.txt, runtime/doc/os_msdos.txt, csdpmi4b.zip,\n            Filelist\n\nPatch 7.4.1426\nProblem:    The \"out-io\" option for jobs is not implemented yet.\nSolution:   Implement the \"buffer\" value: append job output to a buffer.\nFiles:      src/eval.c, src/channel.c, src/structs.h, src/netbeans.c,\n            runtime/doc/channel.txt\n\nPatch 7.4.1427\nProblem:    Trailing comma in enums is not ANSI C.\nSolution:   Remove the trailing commas.\nFiles:      src/alloc.h, src/gui_mac.c\n\nPatch 7.4.1428\nProblem:    Compiler warning for non-virtual destructor.\nSolution:   Make it virtual. (Yasuhiro Matsumoto)\nFiles:      src/gui_dwrite.cpp\n\nPatch 7.4.1429\nProblem:    On MS-Windows, when not use renderoptions=type:directx, drawing\n            emoji will be broken.\nSolution:   Fix usage of unicodepdy. (Yasuhiro Matsumoto)\nFiles:      src/gui_w32.c\n\nPatch 7.4.1430\nProblem:    When encoding JSON, turning NaN and Infinity into null without\n            giving an error is not useful.\nSolution:   Pass NaN and Infinity on.  If the receiver can't handle them it\n            will generate the error.\nFiles:      src/json.c, src/testdir/test_json.vim, runtime/doc/eval.txt\n\nPatch 7.4.1431\nProblem:    Including header files twice.\nSolution:   Remove the extra includes.\nFiles:      src/if_cscope.h\n\nPatch 7.4.1432\nProblem:    Typo in button text.\nSolution:   Fix the typo. (Dominique Pelle)\nFiles:      src/gui_gtk.c\n\nPatch 7.4.1433\nProblem:    The Sniff interface is no longer useful, the tool has not been\n            available for may years.\nSolution:   Delete the Sniff interface and related code.\nFiles:      src/if_sniff.c, src/if_sniff.h, src/charset.c, src/edit.c,\n            src/eval.c, src/ex_cmds2.c, src/ex_docmd.c, src/ex_getln.c,\n            src/gui_gtk_x11.c, src/gui_w32.c, src/gui_x11.c, src/normal.c,\n            src/os_unix.c, src/os_win32.c, src/term.c, src/ui.c,\n            src/version.c, src/ex_cmds.h, src/feature.h, src/keymap.h,\n            src/structs.h, src/vim.h, src/Make_mvc.mak, src/Make_vms.mms,\n            src/Makefile, src/configure.in, src/auto/configure,\n            src/config.h.in, src/config.mk.in, runtime/doc/if_sniff.txt,\n            src/config.aap.in, src/main.aap\n\nPatch 7.4.1434\nProblem:    JSON encoding doesn't handle surrogate pair.\nSolution:   Improve multi-byte handling of JSON. (Yasuhiro Matsumoto)\nFiles:      src/json.c, src/testdir/test_json.vim\n\nPatch 7.4.1435\nProblem:    It is confusing that ch_sendexpr() and ch_sendraw() wait for a\n            response.\nSolution:   Add ch_evalexpr() and ch_evalraw().\nFiles:      src/eval.c, runtime/doc/channel.txt, runtime/doc/eval.txt,\n            src/testdir/test_channel.vim\n\nPatch 7.4.1436 (after 7.4.1433)\nProblem:    Sniff files still referenced in distribution.\nSolution:   Remove sniff files from distribution.\nFiles:      Filelist\n\nPatch 7.4.1437\nProblem:    Old system doesn't have isinf() and NAN. (Ben Fritz)\nSolution:   Adjust #ifdefs.  Detect isnan() and isinf() functions with\n            configure. Use a replacement when missing. (Kazunobu Kuriyama)\nFiles:      src/eval.c, src/json.c, src/macros.h, src/message.c,\n            src/config.h.in, src/configure.in, src/auto/configure\n\nPatch 7.4.1438\nProblem:    Can't get buffer number of a channel.\nSolution:   Add ch_getbufnr().\nFiles:      src/eval.c, src/channel.c, src/testdir/test_channel.vim,\n            runtime/doc/channel.txt, runtime/doc/eval.txt\n\nPatch 7.4.1439 (after 7.4.1434)\nProblem:    Using uninitialized variable.\nSolution:   Initialize vc_type.\nFiles:      src/json.c\n\nPatch 7.4.1440 (after 7.4.1437)\nProblem:    Can't build on Windows.\nSolution:   Change #ifdefs.  Only define isnan when used.\nFiles:      src/macros.h, src/eval.c, src/json.c\n\nPatch 7.4.1441\nProblem:    Using empty name instead of no name for channel buffer.\nSolution:   Remove the empty name.\nFiles:      src/channel.c\n\nPatch 7.4.1442\nProblem:    MS-Windows: more compilation warnings for destructor.\nSolution:   Add \"virtual\". (Ken Takata)\nFiles:      src/if_ole.cpp\n\nPatch 7.4.1443\nProblem:    Can't build GTK3 with small features.\nSolution:   Use gtk_widget_get_window().  Fix typos. (Dominique Pelle)\nFiles:      src/gui_gtk_x11.c\n\nPatch 7.4.1444\nProblem:    Can't build with JSON but without multi-byte.\nSolution:   Fix pointer name.\nFiles:      src/json.c\n\nPatch 7.4.1445\nProblem:    Memory corruption when 'encoding' is not utf-8.\nSolution:   Convert decoded string later.\nFiles:      src/json.c\n\nPatch 7.4.1446\nProblem:    Crash when using json_decode().\nSolution:   Terminate string with a NUL byte.\nFiles:      src/json.c\n\nPatch 7.4.1447\nProblem:    Memory leak when using ch_read(). (Dominique Pelle)\n            No log message when stopping a job and a few other situations.\n            Too many \"Nothing to read\" messages.  Channels are not freed.\nSolution:   Free the listtv.  Add more log messages. Remove \"Nothing to read\"\n            message.  Remove the channel from the job when its refcount\n            becomes zero.\nFiles:      src/eval.c, src/channel.c\n\nPatch 7.4.1448\nProblem:    JSON tests fail if 'encoding' is not utf-8.\nSolution:   Force encoding to utf-8.\nFiles:      src/testdir/test_json.vim\n\nPatch 7.4.1449\nProblem:    Build fails with job feature but without channel feature.\nSolution:   Add #ifdef.\nFiles:      src/eval.c\n\nPatch 7.4.1450\nProblem:    Json encoding still fails when encoding is not utf-8.\nSolution:   Set 'encoding' before :scriptencoding.  Run the json test\n            separately to avoid affecting other tests.\nFiles:      src/testdir/test_json.vim, src/testdir/Make_all.mak,\n            src/testdir/test_alot.vim\n\nPatch 7.4.1451\nProblem:    Vim hangs when a channel has a callback but isn't referenced.\nSolution:   Have channel_unref() only return TRUE when the channel was\n            actually freed.\nFiles:      src/eval.c, src/channel.c, src/proto/channel.pro\n\nPatch 7.4.1452\nProblem:    When a callback adds a syntax item either the redraw doesn't\n            happen right away or in the GUI the cursor is in the wrong\n            position for a moment. (Jakson Alves de Aquino)\nSolution:   Redraw after the callback was invoked.\nFiles:      src/channel.c\n\nPatch 7.4.1453\nProblem:    Missing --not-a-term.\nSolution:   Add the argument.\nFiles:      src/testdir/Make_amiga.mak\n\nPatch 7.4.1454\nProblem:    The exit callback test is flaky.\nSolution:   Loop to wait for a short time up to a second.\nFiles:      src/testdir/test_channel.vim\n\nPatch 7.4.1455\nProblem:    JSON decoding test for surrogate pairs is in the wrong place.\nSolution:   Move the test lines. (Ken Takata)\nFiles:      src/testdir/test_json.vim\n\nPatch 7.4.1456\nProblem:    Test 87 fails with Python 3.5.\nSolution:   Work around difference. (Taro Muraoka)\nFiles:      src/testdir/test87.in\n\nPatch 7.4.1457\nProblem:    Opening a channel with select() is not done properly.\nSolution:   Also used read-fds. Use getsockopt() to check for errors. (Ozaki\n            Kiichi)\nFiles:      src/channel.c\n\nPatch 7.4.1458\nProblem:    When a JSON channel has a callback it may never be cleared.\nSolution:   Do not write \"DETACH\" into a JS or JSON channel.\nFiles:      src/channel.c\n\nPatch 7.4.1459 (after 7.4.1457)\nProblem:    MS-Windows doesn't know socklen_t.\nSolution:   Use previous method for WIN32.\nFiles:      src/channel.c\n\nPatch 7.4.1460\nProblem:    Syntax error in rarely used code.\nSolution:   Fix the mch_rename() declaration. (Ken Takata)\nFiles:      src/os_unix.c, src/proto/os_unix.pro\n\nPatch 7.4.1461\nProblem:    When starting job on MS-Windows all parts of the command are put\n            in quotes.\nSolution:   Only use quotes when needed. (Yasuhiro Matsumoto)\nFiles:      src/eval.c\n\nPatch 7.4.1462\nProblem:    Two more rarely used functions with errors.\nSolution:   Add proper argument types. (Dominique Pelle)\nFiles:      src/misc2.c, src/termlib.c\n\nPatch 7.4.1463\nProblem:    Configure doesn't find isinf() and isnan() on some systems.\nSolution:   Use a configure check that includes math.h.\nFiles:      src/configure.in, src/auto/configure\n\nPatch 7.4.1464\nProblem:    When the argument of sort() is zero or empty it fails.\nSolution:   Make zero work as documented. (suggested by Yasuhiro Matsumoto)\nFiles:      src/eval.c, src/testdir/test_sort.vim\n\nPatch 7.4.1465\nProblem:    Coverity reported possible use of NULL pointer when using buffer\n            output with JSON mode.\nSolution:   Make it actually possible to use JSON mode with a buffer.\n            Re-encode the JSON to append it to the buffer.\nFiles:      src/channel.c, src/testdir/test_channel.vim\n\nPatch 7.4.1466\nProblem:    Coverity reports dead code.\nSolution:   Remove the two lines.\nFiles:      src/channel.c\n\nPatch 7.4.1467\nProblem:    Can't build without the float feature.\nSolution:   Add #ifdefs. (Nick Owens, closes #667)\nFiles:      src/eval.c, src/json.c\n\nPatch 7.4.1468\nProblem:    Sort test doesn't test with \"1\" argument.\nSolution:   Also test ignore-case sorting. (Yasuhiro Matsumoto)\nFiles:      src/testdir/test_sort.vim\n\nPatch 7.4.1469\nProblem:    Channel test sometimes fails, especially on OS/X. (Kazunobu\n            Kuriyama)\nSolution:   Change the && into ||, call getsockopt() in more situations.\n            (Ozaki Kiichi)\nFiles:      src/channel.c\n\nPatch 7.4.1470\nProblem:    Coverity reports missing restore.\nSolution:   Move json_encode() call up.\nFiles:      src/channel.c\n\nPatch 7.4.1471\nProblem:    Missing out-of-memory check.  And Coverity warning.\nSolution:   Bail out when msg is NULL.\nFiles:      src/channel.c\n\nPatch 7.4.1472\nProblem:    Coverity warning for not using return value.\nSolution:   Add \"(void)\".\nFiles:      src/os_unix.c\n\nPatch 7.4.1473\nProblem:    Can't build without the autocommand feature.\nSolution:   Add #ifdefs. (Yegappan Lakshmanan)\nFiles:      src/edit.c, src/main.c, src/syntax.c\n\nPatch 7.4.1474\nProblem:    Compiler warnings without the float feature.\nSolution:   Move #ifdefs. (John Marriott)\nFiles:      src/eval.c\n\nPatch 7.4.1475\nProblem:    When using hangulinput with utf-8 a CSI character is\n            misinterpreted.\nSolution:   Convert CSI to K_CSI. (SungHyun Nam)\nFiles:      src/ui.c\n\nPatch 7.4.1476\nProblem:    Function arguments marked as unused while they are not.\nSolution:   Remove UNUSED. (Yegappan Lakshmanan)\nFiles:      src/diff.c, src/eval.c, src/ex_cmds2.c, src/ex_docmd.c,\n            src/window.c\n\nPatch 7.4.1477\nProblem:    Test_reltime is flaky, it depends on timing.\nSolution:   When it fails run it a second time.\nFiles:      src/testdir/runtest.vim\n\nPatch 7.4.1478\nProblem:    \":loadplugin\" doesn't take care of ftdetect files.\nSolution:   Also load ftdetect scripts when appropriate.\nFiles:      src/ex_cmds2.c\n\nPatch 7.4.1479\nProblem:    No testfor \":loadplugin\".\nSolution:   Add a test.  Fix how option is being set.\nFiles:      src/ex_cmds2.c, src/testdir/test_loadplugin.vim,\n            src/testdir/Make_all.mak\n\nPatch 7.4.1480\nProblem:    Cannot add a pack directory without loading a plugin.\nSolution:   Add the :packadd command.\nFiles:      src/ex_cmds.h, src/ex_cmds2.c, src/proto/ex_cmds2.pro,\n            src/testdir/test_loadplugin.vim, runtime/doc/repeat.txt\n\nPatch 7.4.1481\nProblem:    Can't build with small features.\nSolution:   Add #ifdef.\nFiles:      src/ex_cmds2.c\n\nPatch 7.4.1482\nProblem:    \"timeout\" option not supported on ch_eval*().\nSolution:   Get and use the timeout option from the argument.\nFiles:      src/eval.c, src/testdir/test_channel.vim\n\nPatch 7.4.1483\nProblem:    A one-time callback is not used for a raw channel.\nSolution:   Use a one-time callback when it exists.\nFiles:      src/channel.c, src/testdir/test_channel.vim,\n            src/testdir/test_channel.py\n\nPatch 7.4.1484\nProblem:    Channel \"err-io\" value \"out\" is not supported.\nSolution:   Connect stderr to stdout if wanted.\nFiles:      src/os_unix.c, src/os_win32.c, src/testdir/test_channel.vim,\n            src/testdir/test_channel_pipe.py\n\nPatch 7.4.1485\nProblem:    Job input from buffer is not implemented.\nSolution:   Implement it.  Add \"in-top\" and \"in-bot\" options.\nFiles:      src/structs.h, src/eval.c, src/channel.c, src/proto/channel.pro,\n            src/os_unix.c, src/os_win32.c, src/testdir/test_channel.vim\n\nPatch 7.4.1486\nProblem:    \":loadplugin\" is not optimal, some people find it confusing.\nSolution:   Only use \":packadd\" with an optional \"!\".\nFiles:      src/ex_cmds.h, src/ex_cmds2.c, src/testdir/test_loadplugin.vim,\n            src/testdir/test_packadd.vim, src/testdir/Make_all.mak,\n            runtime/doc/repeat.txt\n\nPatch 7.4.1487\nProblem:    For WIN32 isinf() is defined as a macro.\nSolution:   Define it as an inline function. (ZyX)\nFiles:      src/macros.h\n\nPatch 7.4.1488 (after 7.4.1475)\nProblem:    Not using key when result from hangul_string_convert() is NULL.\nSolution:   Fall back to not converted string.\nFiles:      src/ui.c\n\nPatch 7.4.1489 (after 7.4.1487)\nProblem:    \"inline\" is not supported by old MSVC.\nSolution:   use \"__inline\". (Ken Takata)\nFiles:      src/macros.h\n\nPatch 7.4.1490\nProblem:    Compiler warning for unused function.\nSolution:   Add #ifdef. (Dominique Pelle)\nFiles:      src/gui_gtk_x11.c\n\nPatch 7.4.1491\nProblem:    Visual-block shift breaks multi-byte characters.\nSolution:   Compute column differently. (Yasuhiro Matsumoto) Add a test.\nFiles:      src/ops.c, src/testdir/test_visual.vim, src/testdir/Make_all.mak\n\nPatch 7.4.1492\nProblem:    No command line completion for \":packadd\".\nSolution:   Implement completion. (Hirohito Higashi)\nFiles:      src/ex_docmd.c, src/ex_getln.c, src/testdir/test_packadd.vim,\n            src/vim.h\n\nPatch 7.4.1493\nProblem:    Wrong callback invoked for zero-id messages.\nSolution:   Don't use the first one-time callback when the sequence number\n            doesn't match.\nFiles:      src/channel.c, src/testdir/test_channel.vim,\n            src/testdir/test_channel.py\n\nPatch 7.4.1494\nProblem:    clr_history() does not work properly.\nSolution:   Increment hisptr. Add a test. (Yegappan Lakshmanan)\nFiles:      src/ex_getln.c, src/testdir/test_history.vim,\n            src/testdir/Make_all.mak\n\nPatch 7.4.1495\nProblem:    Compiler warnings when building on Unix with the job feature but\n            without the channel feature.\nSolution:   Move #ifdefs. (Dominique Pelle)\nFiles:      src/os_unix.c\n\nPatch 7.4.1496\nProblem:    Crash when built with GUI but it's not active. (Dominique Pelle)\nSolution:   Check gui.in_use.\nFiles:      src/channel.c\n\nPatch 7.4.1497\nProblem:    Cursor drawing problem with GTK 3.\nSolution:   Handle blinking differently. (Kazunobu Kuriyama)\nFiles:      src/gui_gtk_x11.c\n\nPatch 7.4.1498\nProblem:    Error for locked item when using json_decode(). (Shougo)\nSolution:   Initialize v_lock.\nFiles:      src/json.c\n\nPatch 7.4.1499\nProblem:    No error message when :packadd does not find anything.\nSolution:   Add an error message. (Hirohito Higashi)\nFiles:      runtime/doc/repeat.txt, src/ex_cmds.h, src/ex_cmds2.c,\n            src/globals.h, src/testdir/test_packadd.vim\n\nPatch 7.4.1500\nProblem:    Should_free flag set to FALSE.\nSolution:   Set it to TRUE. (Neovim 4415)\nFiles:      src/ex_eval.c\n\nPatch 7.4.1501\nProblem:    Garbage collection with an open channel is not tested.\nSolution:   Call garbagecollect() in the test.\nFiles:      src/testdir/test_channel.vim\n\nPatch 7.4.1502\nProblem:    Writing last-but-one line of buffer to a channel isn't implemented\n            yet.\nSolution:   Implement it.  Fix leaving a swap file behind.\nFiles:      src/channel.c, src/structs.h, src/memline.c, src/proto/channel.pro\n\nPatch 7.4.1503\nProblem:    Crash when using ch_getjob(). (Damien)\nSolution:   Check for a NULL job.\nFiles:      src/eval.c, src/testdir/test_channel.vim\n\nPatch 7.4.1504 (after 7.4.1502)\nProblem:    No test for reading last-but-one line.\nSolution:   Add a test.\nFiles:      src/testdir/test_channel.vim\n\nPatch 7.4.1505\nProblem:    When channel log is enabled get too many \"looking for messages\"\n            log entries.\nSolution:   Only give the message after another message.\nFiles:      src/channel.c\n\nPatch 7.4.1506\nProblem:    Job cannot read from a file.\nSolution:   Implement reading from a file for Unix.\nFiles:      src/eval.c, src/os_unix.c, src/os_win32.c,\n            src/testdir/test_channel.vim\n\nPatch 7.4.1507\nProblem:    Crash when starting a job fails.\nSolution:   Check for the channel to be NULL.  (idea by Yasuhiro Matsumoto)\nFiles:      src/eval.c\n\nPatch 7.4.1508\nProblem:    Can't build GvimExt with MingW.\nSolution:   Adjust the makefile. (Ben Fritz)\nFiles:      src/GvimExt/Make_ming.mak\n\nPatch 7.4.1509\nProblem:    Keeping both a variable for a job and the channel it refers to is\n            a hassle.\nSolution:   Allow passing the job where a channel is expected. (Damien)\nFiles:      src/eval.c, src/testdir/test_channel.vim\n\nPatch 7.4.1510\nProblem:    Channel test fails on AppVeyor.\nSolution:   Wait longer than 10 msec if needed.\nFiles:      src/testdir/test_channel.vim\n\nPatch 7.4.1511\nProblem:    Statusline highlighting is sometimes wrong.\nSolution:   Check for Highlight type. (Christian Brabandt)\nFiles:      src/buffer.c\n\nPatch 7.4.1512\nProblem:    Channel input from file not supported on MS-Windows.\nSolution:   Implement it. (Yasuhiro Matsumoto)\nFiles:      src/os_win32.c, src/testdir/test_channel.vim\n\nPatch 7.4.1513\nProblem:    \"J\" fails if there are not enough lines. (Christian Neukirchen)\nSolution:   Reduce the count, only fail on the last line.\nFiles:      src/normal.c, src/testdir/test_join.vim, src/testdir/test_alot.vim\n\nPatch 7.4.1514\nProblem:    Channel output to file not implemented yet.\nSolution:   Implement it for Unix.\nFiles:      src/os_unix.c, src/testdir/test_channel.vim,\n            src/testdir/test_channel_pipe.py\n\nPatch 7.4.1515\nProblem:    Channel test is a bit flaky.\nSolution:   Instead of a fixed sleep time wait until an expression evaluates\n            to true.\nFiles:      src/testdir/test_channel.vim\n\nPatch 7.4.1516\nProblem:    Cannot change file permissions.\nSolution:   Add setfperm().\nFiles:      src/eval.c, runtime/doc/eval.txt, src/testdir/test_alot.vim,\n            src/testdir/test_file_perm.vim\n\nPatch 7.4.1517\nProblem:    Compiler warning with 64bit compiler.\nSolution:   Add typecast. (Mike Williams)\nFiles:      src/channel.c\n\nPatch 7.4.1518\nProblem:    Channel with disconnected in/out/err is not supported.\nSolution:   Implement it for Unix.\nFiles:      src/eval.c, src/os_unix.c, src/structs.h,\n            src/testdir/test_channel.vim, src/testdir/test_channel_pipe.py\n\nPatch 7.4.1519 (after 7.4.1514)\nProblem:    Channel output to file not implemented for MS-Windows.\nSolution:   Implement it. (Yasuhiro Matsumoto)\nFiles:      src/os_win32.c, src/testdir/test_channel.vim\n\nPatch 7.4.1520\nProblem:    Channel test: Waiting for a file to appear doesn't work.\nSolution:   In waitFor() ignore errors.\nFiles:      src/testdir/test_channel.vim\n\nPatch 7.4.1521 (after 7.4.1516)\nProblem:    File permission test fails on MS-Windows.\nSolution:   Expect a different permission.\nFiles:      src/testdir/test_file_perm.vim\n\nPatch 7.4.1522\nProblem:    Cannot write channel err to a buffer.\nSolution:   Implement it.\nFiles:      src/channel.c, src/testdir/test_channel.vim\n\nPatch 7.4.1523\nProblem:    Writing channel to a file fails on MS-Windows.\nSolution:   Disable it for now.\nFiles:      src/testdir/test_channel.vim\n\nPatch 7.4.1524\nProblem:    Channel test fails on BSD.\nSolution:   Break out of the loop when connect() succeeds. (Ozaki Kiichi)\nFiles:      src/channel.c\n\nPatch 7.4.1525\nProblem:    On a high resolution screen the toolbar icons are too small.\nSolution:   Add \"huge\" and \"giant\" to 'toolbariconsize'. (Brian Gix)\nFiles:      src/gui_gtk_x11.c, src/option.h\n\nPatch 7.4.1526\nProblem:    Writing to file and not connecting a channel doesn't work for\n            MS-Windows.\nSolution:   Make it work. (Yasuhiro Matsumoto)\nFiles:      src/os_win32.c, src/testdir/test_channel.vim\n\nPatch 7.4.1527\nProblem:    Channel test is flaky on MS-Windows.\nSolution:   Limit the select() timeout to 50 msec and try with a new socket if\n            it fails.\nFiles:      src/channel.c\n\nPatch 7.4.1528\nProblem:    Using \"ever\" for packages is confusing.\nSolution:   Use \"start\", as it's related to startup.\nFiles:      src/ex_cmds2.c, runtime/doc/repeat.txt\n\nPatch 7.4.1529\nProblem:    Specifying buffer number for channel not implemented yet.\nSolution:   Implement passing a buffer number.\nFiles:      src/structs.h, src/channel.c, src/eval.c,\n            src/testdir/test_channel.vim\n\nPatch 7.4.1530\nProblem:    MS-Windows job_start() closes wrong handle.\nSolution:   Close hThread on the process info. (Ken Takata)\nFiles:      src/os_win32.c\n\nPatch 7.4.1531\nProblem:    Compiler warning for uninitialized variable. (Dominique Pelle)\nSolution:   Always give the variable a value.\nFiles:      src/channel.c\n\nPatch 7.4.1532\nProblem:    MS-Windows channel leaks file descriptor.\nSolution:   Use CreateFile with the right options. (Yasuhiro Matsumoto)\nFiles:      src/os_win32.c\n\nPatch 7.4.1533\nProblem:    Using feedkeys() with an empty string disregards 'x' option.\nSolution:   Make 'x' work with an empty string. (Thinca)\nFiles:      src/eval.c, src/testdir/test_alot.vim,\n            src/testdir/test_feedkeys.vim\n\nPatch 7.4.1534\nProblem:    Compiler warning for shadowed variable. (Kazunobu Kuriyama)\nSolution:   Rename it.\nFiles:      src/eval.c\n\nPatch 7.4.1535\nProblem:    The feedkeys test has a one second delay.\nSolution:   Avoid need_wait_return() to delay. (Hirohito Higashi)\nFiles:      src/eval.c\n\nPatch 7.4.1536\nProblem:    Cannot re-use a channel for another job.\nSolution:   Add the \"channel\" option to job_start().\nFiles:      src/channel.c, src/eval.c, src/structs.h, src/os_unix.c,\n            src/os_win32.c, src/proto/channel.pro,\n            src/testdir/test_channel.vim\n\nPatch 7.4.1537\nProblem:    Too many feature flags for pipes, jobs and channels.\nSolution:   Only use FEAT_JOB_CHANNEL.\nFiles:      src/structs.h, src/feature.h, src/configure.in,\n            src/auto/configure, src/config.h.in, src/channel.c, src/eval.c,\n            src/gui.c, src/main.c, src/memline.c, src/misc2.c, src/os_mswin.c,\n            src/os_unix.c, src/os_win32.c, src/ui.c, src/version.c,\n            src/macros.h, src/proto.h, src/vim.h, src/Make_cyg_ming.mak,\n            src/Make_bc5.mak, src/Make_mvc.mak\n\nPatch 7.4.1538\nProblem:    Selection with the mouse does not work in command line mode.\nSolution:   Use cairo functions. (Kazunobu Kuriyama)\nFiles:      src/gui_gtk_x11.c\n\nPatch 7.4.1539\nProblem:    Too much code in eval.c.\nSolution:   Move job and channel code to channel.c.\nFiles:      src/eval.c, src/channel.c, src/proto/channel.pro,\n            src/proto/eval.pro\n\nPatch 7.4.1540\nProblem:    Channel test is a bit flaky.\nSolution:   Increase expected wait time.\nFiles:      src/testdir/test_channel.vim\n\nPatch 7.4.1541\nProblem:    Missing job_info().\nSolution:   Implement it.\nFiles:      src/eval.c, src/channel.c, src/proto/channel.pro,\n            src/testdir/test_channel.vim, runtime/doc/eval.txt\n\nPatch 7.4.1542\nProblem:    job_start() with a list is not tested.\nSolution:   Call job_start() with a list.\nFiles:      src/testdir/test_channel.vim\n\nPatch 7.4.1543\nProblem:    Channel log methods are not tested.\nSolution:   Log job activity and check it.\nFiles:      src/testdir/test_channel.vim\n\nPatch 7.4.1544\nProblem:    On Win32 escaping the command does not work properly.\nSolution:   Reset 'ssl' when escaping the command. (Yasuhiro Matsumoto)\nFiles:      src/channel.c\n\nPatch 7.4.1545\nProblem:    GTK3: horizontal cursor movement in Visual selection not good.\nSolution:   Make it work better. (Kazunobu Kuriyama)\nFiles:      src/gui_gtk_x11.c\n\nPatch 7.4.1546\nProblem:    Sticky type checking is more annoying than useful.\nSolution:   Remove the error for changing a variable type.\nFiles:      src/eval.c, src/testdir/test_assign.vim,\n            src/testdir/test_alot.vim, runtime/doc/eval.txt\n\nPatch 7.4.1547\nProblem:    Getting a cterm highlight attribute that is not set results in the\n            string \"-1\".\nSolution:   Return an empty string. (Taro Muraoka)\nFiles:      src/syntax.c, src/testdir/test_alot.vim,\n            src/testdir/test_syn_attr.vim\n\nPatch 7.4.1548 (after 7.4.1546)\nProblem:    Two tests fail.\nSolution:   Adjust the expected error number. Remove check for type.\nFiles:      src/testdir/test101.ok, src/testdir/test55.in,\n            src/testdir/test55.ok\n\nPatch 7.4.1549 (after 7.4.1547)\nProblem:    Test for syntax attributes fails in Win32 GUI.\nSolution:   Use an existing font name.\nFiles:      src/testdir/test_syn_attr.vim\n\nPatch 7.4.1550\nProblem:    Cannot load packages early.\nSolution:   Add the \":packloadall\" command.\nFiles:      src/ex_cmds.h, src/ex_cmds2.c, src/main.c,\n            src/proto/ex_cmds2.pro, src/testdir/test_packadd.vim\n\nPatch 7.4.1551\nProblem:    Cannot generate help tags in all doc directories.\nSolution:   Make \":helptags ALL\" work.\nFiles:      src/ex_cmds2.c, src/proto/ex_cmds2.pro, src/ex_cmds.c, src/vim.h\n            src/testdir/test_packadd.vim\n\nPatch 7.4.1552\nProblem:    \":colorscheme\" does not use 'packpath'.\nSolution:   Also use in \"start\" and \"opt\" directories in 'packpath'.\nFiles:      src/ex_cmds2.c, src/gui.c, src/hardcopy.c, src/os_mswin.c,\n            src/spell.c, src/tag.c, src/if_py_both.h, src/vim.h,\n            src/digraph.c, src/eval.c, src/ex_docmd.c, src/main.c,\n            src/option.c, src/syntax.c, src/testdir/test_packadd.vim\n\nPatch 7.4.1553\nProblem:    \":runtime\" does not use 'packpath'.\nSolution:   Add \"what\" argument.\nFiles:      src/ex_cmds2.c, src/vim.h, runtime/doc/repeat.txt,\n            src/testdir/test_packadd.vim\n\nPatch 7.4.1554\nProblem:    Completion for :colorscheme does not use 'packpath'.\nSolution:   Make it work, add a test. (Hirohito Higashi)\nFiles:      src/ex_getln.c, src/testdir/test_packadd.vim\n\nPatch 7.4.1555\nProblem:    List of test targets incomplete.\nSolution:   Add newly added tests.\nFiles:      src/Makefile\n\nPatch 7.4.1556\nProblem:    \"make install\" changes the help tags file, causing it to differ\n            from the repository.\nSolution:   Move it aside and restore it.\nFiles:      src/Makefile\n\nPatch 7.4.1557\nProblem:    Windows cannot be identified.\nSolution:   Add a unique window number to each window and functions to use it.\nFiles:      src/structs.h, src/window.c, src/eval.c, src/proto/eval.pro,\n            src/proto/window.pro, src/testdir/test_window_id.vim,\n            src/testdir/Make_all.mak, runtime/doc/eval.txt\n\nPatch 7.4.1558\nProblem:    It is not easy to find out what windows display a buffer.\nSolution:   Add win_findbuf().\nFiles:      src/eval.c, src/window.c, src/proto/window.pro,\n            src/testdir/test_window_id.vim, runtime/doc/eval.txt\n\nPatch 7.4.1559\nProblem:    Passing cookie to a callback is clumsy.\nSolution:   Change function() to take arguments and return a partial.\nFiles:      src/structs.h, src/channel.c, src/eval.c, src/if_python.c,\n            src/if_python3.c, src/if_py_both.h, src/json.c,\n            src/proto/eval.pro, src/testdir/test_partial.vim,\n            src/testdir/test_alot.vim, runtime/doc/eval.txt\n\nPatch 7.4.1560\nProblem:    Dict options with a dash are more difficult to use.\nSolution:   Use an underscore, so that dict.err_io can be used.\nFiles:      src/channel.c, src/structs.h, src/testdir/test_channel.vim,\n            runtime/doc/channel.txt\n\nPatch 7.4.1561 (after 7.4.1559)\nProblem:    Missing update to proto file.\nSolution:   Change the proto file.\nFiles:      src/proto/channel.pro\n\nPatch 7.4.1562\nProblem:    \":helptags ALL\" crashes. (Lcd)\nSolution:   Don't free twice.\nFiles:      src/ex_cmds.c\n\nPatch 7.4.1563\nProblem:    Partial test fails on windows.\nSolution:   Return 1 or -1 from compare function.\nFiles:      src/testdir/test_partial.vim\n\nPatch 7.4.1564\nProblem:    An empty list in function() causes an error.\nSolution:   Handle an empty list like there is no list of arguments.\nFiles:      src/eval.c, src/testdir/test_partial.vim\n\nPatch 7.4.1565\nProblem:    Crash when assert_equal() runs into a NULL string.\nSolution:   Check for NULL. (Dominique) Add a test.\nFiles:      src/eval.c, src/testdir/test_assert.vim\n\nPatch 7.4.1566\nProblem:    Compiler warning for shadowed variable. (Kazunobu Kuriyama)\nSolution:   Remove the inner one.\nFiles:      src/eval.c\n\nPatch 7.4.1567\nProblem:    Crash in assert_fails().\nSolution:   Check for NULL. (Dominique Pelle)  Add a test.\nFiles:      src/eval.c, src/testdir/test_assert.vim\n\nPatch 7.4.1568\nProblem:    Using CTRL-] in help on option in parentheses doesn't work.\nSolution:   Skip the \"(\" in \"('\". (Hirohito Higashi)\nFiles:      src/ex_cmds.c\n\nPatch 7.4.1569\nProblem:    Using old style tests for quickfix.\nSolution:   Change them to new style tests. (Yegappan Lakshmanan)\nFiles:      src/testdir/Make_all.mak, src/testdir/test106.in,\n            src/testdir/test106.ok, src/testdir/test_qf_title.in,\n            src/testdir/test_qf_title.ok, src/testdir/test_quickfix.vim\n\nPatch 7.4.1570\nProblem:    There is no way to avoid the message when editing a file.\nSolution:   Add the \"F\" flag to 'shortmess'. (Shougo, closes #686)\nFiles:      runtime/doc/options.txt, src/buffer.c, src/ex_cmds.c,\n            src/option.h\n\nPatch 7.4.1571\nProblem:    No test for \":help\".\nSolution:   Add a test for what 7.4.1568 fixed. (Hirohito Higashi)\nFiles:      src/testdir/test_alot.vim, src/testdir/test_help_tagjump.vim\n\nPatch 7.4.1572\nProblem:    Setting 'compatible' in test influences following tests.\nSolution:   Turn 'compatible' off again.\nFiles:      src/testdir/test_backspace_opt.vim\n\nPatch 7.4.1573\nProblem:    Tests get stuck at the more prompt.\nSolution:   Move the backspace test out of test_alot.\nFiles:      src/testdir/test_alot.vim, src/testdir/Make_all.mak\n\nPatch 7.4.1574\nProblem:    \":undo 0\" does not work. (Florent Fayolle)\nSolution:   Make it undo all the way. (closes #688)\nFiles:      src/undo.c, src/testdir/test_undolevels.vim,\n            src/testdir/test_ex_undo.vim, src/testdir/test_alot.vim\n\nPatch 7.4.1575\nProblem:    Using wrong size for struct.\nSolution:   Use the size for wide API. (Ken Takata)\nFiles:      src/gui_w32.c\n\nPatch 7.4.1576\nProblem:    Write error of viminfo file is not handled properly. (Christian\n            Neukirchen)\nSolution:   Check the return value of fclose(). (closes #682)\nFiles:      src/ex_cmds.c\n\nPatch 7.4.1577\nProblem:    Cannot pass \"dict.Myfunc\" around as a partial.\nSolution:   Create a partial when expected.\nFiles:      src/eval.c, src/testdir/test_partial.vim\n\nPatch 7.4.1578\nProblem:    There is no way to invoke a function later or periodically.\nSolution:   Add timer support.\nFiles:      src/eval.c, src/ex_cmds2.c, src/screen.c, src/ex_docmd.c,\n            src/feature.h, src/gui.c, src/proto/eval.pro,\n            src/proto/ex_cmds2.pro, src/proto/screen.pro, src/structs.h,\n            src/version.c, src/testdir/test_alot.vim,\n            src/testdir/test_timers.vim, runtime/doc/eval.txt\n\nPatch 7.4.1579 (after 7.4.1578)\nProblem:    Missing changes in channel.c\nSolution:   Include the changes.\nFiles:      src/channel.c\n\nPatch 7.4.1580\nProblem:    Crash when using function reference. (Luchr)\nSolution:   Set initial refcount. (Ken Takata, closes #690)\nFiles:      src/eval.c, src/testdir/test_partial.vim\n\nPatch 7.4.1581\nProblem:    Using \":call dict.func()\" where the function is a partial does\n            not work.  Using \"dict.func()\" where the function does not take a\n            Dictionary does not work.\nSolution:   Handle partial properly in \":call\". (Yasuhiro Matsumoto)\nFiles:      src/eval.c, src/testdir/test_partial.vim, src/testdir/test55.ok\n\nPatch 7.4.1582\nProblem:    Get E923 when using function(dict.func, [], dict). (Kent Sibilev)\n            Storing a function with a dict in a variable drops the dict if the\n            function is script-local.\nSolution:   Translate the function name.  Use dict arg if present.\nFiles:      src/eval.c, src/testdir/test_partial.vim\n\nPatch 7.4.1583\nProblem:    Warning for uninitialized variable.\nSolution:   Initialize it. (Dominique)\nFiles:      src/ex_cmds2.c\n\nPatch 7.4.1584\nProblem:    Timers don't work for Win32 console.\nSolution:   Add check_due_timer() in WaitForChar().\nFiles:      src/os_win32.c\n\nPatch 7.4.1585\nProblem:    Partial is not recognized everywhere.\nSolution:   Check for partial in trans_function_name(). (Yasuhiro Matsumoto)\n            Add a test.\nFiles:      src/eval.c, src/testdir/test_partial.vim\n\nPatch 7.4.1586\nProblem:    Nesting partials doesn't work.\nSolution:   Append arguments. (Ken Takata)\nFiles:      src/eval.c, src/testdir/test_partial.vim\n\nPatch 7.4.1587\nProblem:    Compiler warnings with 64 bit compiler.\nSolution:   Add type casts. (Mike Williams)\nFiles:      src/ex_cmds2.c\n\nPatch 7.4.1588\nProblem:    Old style test for quickfix.\nSolution:   Turn test 96 into a new style test.\nFiles:      src/testdir/Make_all.mak, src/testdir/test96.in,\n            src/testdir/test96.ok, src/testdir/test_quickfix.vim\n\nPatch 7.4.1589\nProblem:    Combining dict and args with partial doesn't always work.\nSolution:   Use the arguments from the partial.\nFiles:      src/eval.c, src/testdir/test_partial.vim\n\nPatch 7.4.1590\nProblem:    Warning for shadowed variable. (Christian Brabandt)\nSolution:   Move the variable into a local block.\nFiles:      src/eval.c\n\nPatch 7.4.1591\nProblem:    The quickfix title is truncated.\nSolution:   Save the command before it is truncated. (Anton Lindqvist)\nFiles:      src/quickfix.c, src/testdir/test_quickfix.vim\n\nPatch 7.4.1592\nProblem:    Quickfix code using memory after being freed. (Dominique Pelle)\nSolution:   Detect that the window was closed. (Hirohito Higashi)\nFiles:      src/quickfix.c, src/testdir/test_quickfix.vim\n\nPatch 7.4.1593\nProblem:    Using channel timeout instead of request timeout. (Coverity)\nSolution:   Remove the extra assignment.\nFiles:      src/channel.c\n\nPatch 7.4.1594\nProblem:    Timers don't work on Unix.\nSolution:   Add missing code.\nFiles:      src/os_unix.c\n\nPatch 7.4.1595\nProblem:    Not checking for failed open(). (Coverity)\nSolution:   Check file descriptor not being negative.\nFiles:      src/os_unix.c\n\nPatch 7.4.1596\nProblem:    Memory leak. (Coverity)\nSolution:   Free the pattern.\nFiles:      src/ex_cmds2.c\n\nPatch 7.4.1597\nProblem:    Memory leak when out of memory. (Coverity)\nSolution:   Free the name.\nFiles:      src/eval.c\n\nPatch 7.4.1598\nProblem:    When starting the GUI fails a swap file is left behind. (Joerg\n            Plate)\nSolution:   Preserve files before exiting. (closes #692)\nFiles:      src/main.c, src/gui.c\n\nPatch 7.4.1599\nProblem:    No link to Coverity.\nSolution:   Add Coverity badge in README.\nFiles:      README.md\n\nPatch 7.4.1600\nProblem:    libs directory is not useful.\nSolution:   Remove arp.library, it was only for very old Amiga versions.\nFiles:      libs/arp.library, Filelist\n\nPatch 7.4.1601\nProblem:    README files take a lot of space in the top directory.\nSolution:   Move most of them to \"READMEdir\".\nFiles:      Filelist, Makefile, README.txt.info, README_ami.txt,\n            README_ami.txt.info, README_amibin.txt, README_amibin.txt.info,\n            README_amisrc.txt, README_amisrc.txt.info, README_bindos.txt,\n            README_dos.txt, README_extra.txt, README_mac.txt, README_ole.txt,\n            README_os2.txt, README_os390.txt, README_src.txt,\n            README_srcdos.txt, README_unix.txt, README_vms.txt,\n            README_w32s.txt, READMEdir/README.txt.info,\n            READMEdir/README_ami.txt, READMEdir/README_ami.txt.info,\n            READMEdir/README_amibin.txt, READMEdir/README_amibin.txt.info,\n            READMEdir/README_amisrc.txt, READMEdir/README_amisrc.txt.info,\n            READMEdir/README_bindos.txt, READMEdir/README_dos.txt,\n            READMEdir/README_extra.txt, READMEdir/README_mac.txt,\n            READMEdir/README_ole.txt, READMEdir/README_os2.txt,\n            READMEdir/README_os390.txt, READMEdir/README_src.txt,\n            READMEdir/README_srcdos.txt, READMEdir/README_unix.txt,\n            READMEdir/README_vms.txt, READMEdir/README_w32s.txt,\n\nPatch 7.4.1602\nProblem:    Info files take space in the top directory.\nSolution:   Move them to \"READMEdir\".\nFiles:      Filelist, src.info, Contents.info, runtime.info, vimdir.info,\n            Vim.info, Xxd.info, READMEdir/src.info, READMEdir/Contents.info,\n            READMEdir/runtime.info, READMEdir/vimdir.info, READMEdir/Vim.info,\n            READMEdir/Xxd.info\n\nPatch 7.4.1603\nProblem:    Timer with an \":echo\" command messes up display.\nSolution:   Redraw depending on the mode. (Hirohito Higashi)  Avoid the more\n            prompt being used recursively.\nFiles:      src/screen.c, src/message.c\n\nPatch 7.4.1604\nProblem:    Although emoji characters are ambiguous width, best is to treat\n            them as full width.\nSolution:   Update the Unicode character tables. Add the 'emoji' options.\n            (Yasuhiro Matsumoto)\nFiles:      runtime/doc/options.txt, runtime/optwin.vim,\n            runtime/tools/unicode.vim, src/mbyte.c, src/option.c, src/option.h\n\nPatch 7.4.1605\nProblem:    Catching exception that won't be thrown.\nSolution:   Remove try/catch.\nFiles:      src/testdir/test55.in\n\nPatch 7.4.1606\nProblem:    Having type() handle a Funcref that is or isn't a partial\n            differently causes problems for existing scripts.\nSolution:   Make type() return the same value. (Thinca)\nFiles:      src/eval.c, src/testdir/test_viml.vim\n\nPatch 7.4.1607\nProblem:    Comparing a function that exists on two dicts is not backwards\n            compatible. (Thinca)\nSolution:   Only compare the function, not what the partial adds.\nFiles:      src/eval.c, src/testdir/test_alot.vim, src/testdir/test_expr.vim\n\nPatch 7.4.1608\nProblem:    string() doesn't handle a partial.\nSolution:   Make a string from a partial.\nFiles:      src/eval.c, src/testdir/test_partial.vim\n\nPatch 7.4.1609\nProblem:    Contents file is only for Amiga distro.\nSolution:   Move it to \"READMEdir\".  Update some info.\nFiles:      Filelist, Contents, READMEdir/Contents\n\nPatch 7.4.1610\nProblem:    Compiler warnings for non-virtual destructor.\nSolution:   Mark the classes final. (Ken Takata)\nFiles:      src/Make_cyg_ming.mak, src/gui_dwrite.cpp, src/if_ole.cpp\n\nPatch 7.4.1611\nProblem:    The versplit feature makes the code unnecessary complicated.\nSolution:   Remove FEAT_VERTSPLIT, always support vertical splits when\n            FEAT_WINDOWS is defined.\nFiles:      src/buffer.c, src/charset.c, src/eval.c, src/ex_cmds.c,\n            src/ex_docmd.c, src/ex_getln.c, src/gui.c, src/if_lua.c,\n            src/if_mzsch.c, src/if_ruby.c, src/main.c, src/misc1.c,\n            src/misc2.c, src/move.c, src/normal.c, src/option.c,\n            src/quickfix.c, src/screen.c, src/syntax.c, src/term.c, src/ui.c,\n            src/window.c, src/globals.h, src/gui.h, src/if_py_both.h,\n            src/option.h, src/structs.h, src/term.h\n            src/feature.h, src/vim.h, src/version.c\n\nPatch 7.4.1612 (after 7.4.1611)\nProblem:    Can't build with small features.\nSolution:   Move code and #ifdefs.\nFiles:      src/ex_getln.c\n\nPatch 7.4.1613 (after 7.4.1612)\nProblem:    Still can't build with small features.\nSolution:   Adjust #ifdefs.\nFiles:      src/ex_getln.c\n\nPatch 7.4.1614\nProblem:    Still quickfix test in old style.\nSolution:   Turn test 10 into a new style test.\nFiles:      src/testdir/Make_all.mak, src/testdir/Make_vms.mms,\n            src/testdir/main.aap, src/testdir/test10.in,\n            src/testdir/test10.ok, src/testdir/test_quickfix.vim,\n            src/testdir/test10a.in, src/testdir/test10a.ok\n\nPatch 7.4.1615\nProblem:    Build fails with tiny features.\nSolution:   Adjust #ifdefs.\nFiles:      src/normal.c, src/window.c\n\nPatch 7.4.1616\nProblem:    Malformed channel request causes a hang.\nSolution:   Drop malformed message. (Damien)\nFiles:      src/channel.c, src/testdir/test_channel.vim,\n            src/testdir/test_channel.py\n\nPatch 7.4.1617\nProblem:    When a JSON message is split it isn't decoded.\nSolution:   Wait a short time for the rest of the message to arrive.\nFiles:      src/channel.c, src/json.c, src/structs.h,\n            src/testdir/test_channel.vim, src/testdir/test_channel.py\n\nPatch 7.4.1618\nProblem:    Starting job with output to buffer changes options in the current\n            buffer.\nSolution:   Set \"curbuf\" earlier. (Yasuhiro Matsumoto)\nFiles:      src/channel.c\n\nPatch 7.4.1619\nProblem:    When 'fileformats' is set in the vimrc it applies to new buffers\n            but not the initial buffer.\nSolution:   Set 'fileformat' when starting up. (Mike Williams)\nFiles:      src/option.c\n\nPatch 7.4.1620\nProblem:    Emoji characters are not considered as a kind of word character.\nSolution:   Give emoji characters a word class number. (Yasuhiro Matsumoto)\nFiles:      src/mbyte.c\n\nPatch 7.4.1621\nProblem:    Channel test doesn't work with Python 2.6.\nSolution:   Add number in formatting placeholder. (Wiredool)\nFiles:      src/testdir/test_channel.py\n\nPatch 7.4.1622\nProblem:    Channel demo doesn't work with Python 2.6.\nSolution:   Add number in formatting placeholder\nFiles:      runtime/tools/demoserver.py\n\nPatch 7.4.1623\nProblem:    All Channels share the message ID, it keeps getting bigger.\nSolution:   Use a message ID per channel.\nFiles:      src/channel.c, src/proto/channel.pro, src/structs.h\n\nPatch 7.4.1624\nProblem:    Can't get info about a channel.\nSolution:   Add ch_info().\nFiles:      src/eval.c, src/channel.c, src/proto/channel.pro,\n            src/testdir/test_channel.vim, runtime/doc/eval.txt\n\nPatch 7.4.1625\nProblem:    Trying to close file descriptor that isn't open.\nSolution:   Check for negative number.\nFiles:      src/os_unix.c\n\nPatch 7.4.1626 (after 7.4.1624)\nProblem:    Missing changes to structs.\nSolution:   Include the changes.\nFiles:      src/structs.h\n\nPatch 7.4.1627\nProblem:    Channel out_cb and err_cb are not tested.\nSolution:   Add a test.\nFiles:      src/testdir/test_channel.vim\n\nPatch 7.4.1628\nProblem:    64-bit Compiler warning.\nSolution:   Change type of variable. (Mike Williams)\nFiles:      src/channel.c\n\nPatch 7.4.1629\nProblem:    Handling emoji characters as full width has problems with\n            backwards compatibility.\nSolution:   Remove ambiguous and double width characters from the emoji table.\n            Use a separate table for the character class.\n            (partly by Yasuhiro Matsumoto)\nFiles:      runtime/tools/unicode.vim, src/mbyte.c\n\nPatch 7.4.1630\nProblem:    Unicode table for double width is outdated.\nSolution:   Update to the latest Unicode standard.\nFiles:      src/mbyte.c\n\nPatch 7.4.1631\nProblem:    Compiler doesn't understand switch on all enum values. (Tony\n            Mechelynck)\nSolution:   Initialize variable.\nFiles:      src/channel.c\n\nPatch 7.4.1632\nProblem:    List of test targets is outdated.\nSolution:   Update to current list of test targets.\nFiles:      src/Makefile\n\nPatch 7.4.1633\nProblem:    If the help tags file was removed \"make install\" fails. (Tony\n            Mechelynck)\nSolution:   Only try moving the file if it exists.\nFiles:      src/Makefile\n\nPatch 7.4.1634\nProblem:    Vertical movement after CTRL-A ends up in the wrong column.\n            (Urtica Dioica)\nSolution:   Set curswant when appropriate. (Hirohito Higashi)\nFiles:      src/ops.c, src/testdir/test_increment.vim\n\nPatch 7.4.1635\nProblem:    Channel test is a bit flaky.\nSolution:   Remove 'DETACH' if it's there.\nFiles:      src/testdir/test_channel.vim\n\nPatch 7.4.1636\nProblem:    When 'F' is in 'shortmess' the prompt for the encryption key isn't\n            displayed. (Toothpik)\nSolution:   Reset msg_silent.\nFiles:      src/ex_getln.c\n\nPatch 7.4.1637\nProblem:    Can't build with older MinGW compiler.\nSolution:   Change option from c++11 to gnu++11. (Ken Takata)\nFiles:      src/Make_cyg_ming.mak\n\nPatch 7.4.1638\nProblem:    When binding a function to a dict the reference count is wrong.\nSolution:   Decrement dict reference count, only reference the function when\n            actually making a copy. (Ken Takata)\nFiles:      src/eval.c, src/testdir/test_partial.vim\n\nPatch 7.4.1639\nProblem:    Invoking garbage collection may cause a double free.\nSolution:   Don't free the dict in a partial when recursive is FALSE.\nFiles:      src/eval.c\n\nPatch 7.4.1640\nProblem:    Crash when an autocommand changes a quickfix list. (Dominique)\nSolution:   Check whether an entry is still valid. (Yegappan Lakshmanan,\n            Hirohito Higashi)\nFiles:      src/quickfix.c, src/testdir/test_quickfix.vim\n\nPatch 7.4.1641\nProblem:    Using unterminated string.\nSolution:   Add NUL before calling vim_strsave_shellescape(). (James McCoy)\nFiles:      src/eval.c, src/testdir/test105.in, src/testdir/test105.ok\n\nPatch 7.4.1642\nProblem:    Handling emoji characters as full width has problems with\n            backwards compatibility.\nSolution:   Only put characters in the 1f000 range in the emoji table.\nFiles:      runtime/tools/unicode.vim, src/mbyte.c\n\nPatch 7.4.1643 (after 7.4.1641)\nProblem:    Terminating file name has side effects.\nSolution:   Restore the character. (mostly by James McCoy, closes #713)\nFiles:      src/eval.c, src/testdir/test105.in, src/testdir/test105.ok\n\nPatch 7.4.1644\nProblem:    Using string() on a partial that exists in the dictionary it binds\n            results in an error. (Nikolai Pavlov)\nSolution:   Make string() not fail on a recursively nested structure. (Ken\n            Takata)\nFiles:      src/eval.c, src/testdir/test_partial.vim\n\nPatch 7.4.1645\nProblem:    When a dict contains a partial it can't be redefined as a\n            function. (Nikolai Pavlov)\nSolution:   Remove the partial when overwriting with a function.\nFiles:      src/eval.c, src/testdir/test_partial.vim\n\nPatch 7.4.1646\nProblem:    Using Python vim.bindeval() on a partial doesn't work. (Nikolai\n            Pavlov)\nSolution:   Add VAR_PARTIAL support in Python.\nFiles:      src/if_py_both.h, src/testdir/test_partial.vim\n\nPatch 7.4.1647\nProblem:    Using freed memory after setqflist() and \":caddbuffer\".  (Dominique)\nSolution:   Set qf_ptr when adding the first item to the quickfix list.\nFiles:      src/quickfix.c, src/testdir/test_quickfix.vim\n\nPatch 7.4.1648\nProblem:    Compiler has a problem copying a string into di_key[]. (Yegappan\n            Lakshmanan)\nSolution:   Add dictitem16_T.\nFiles:      src/structs.h, src/eval.c\n\nPatch 7.4.1649\nProblem:    The matchit plugin needs to be copied to be used.\nSolution:   Put the matchit plugin in an optional package.\nFiles:      Filelist, runtime/macros/matchit.vim, runtime/macros/matchit.txt,\n            runtime/macros/README.txt, src/Makefile,\n            runtime/pack/dist/opt/matchit/plugin/matchit.vim,\n            runtime/pack/dist/opt/matchit/doc/matchit.txt,\n            runtime/pack/dist/opt/matchit/doc/tags,\n            runtime/doc/usr_05.txt, runtime/doc/usr_toc.txt\n\nPatch 7.4.1650\nProblem:    Quickfix test fails.\nSolution:   Accept any number of matches.\nFiles:      src/testdir/test_quickfix.vim\n\nPatch 7.4.1651\nProblem:    Some dead (MSDOS) code remains.\nSolution:   Remove the unused lines. (Ken Takata)\nFiles:      src/misc1.c\n\nPatch 7.4.1652\nProblem:    Old style test for fnamemodify().\nSolution:   Turn it into a new style test.\nFiles:      src/testdir/test105.in, src/testdir/test105.ok,\n            src/testdir/test_fnamemodify.vim, src/testdir/test_alot.vim,\n            src/testdir/Make_all.mak\n\nPatch 7.4.1653 (after 7.4.1649)\nProblem:    Users who loaded matchit.vim manually have to change their\n            startup. (Gary Johnson)\nSolution:   Add a file in the old location that loads the package.\nFiles:      runtime/macros/matchit.vim, Filelist\n\nPatch 7.4.1654\nProblem:    Crash when using expand('%:S') in a buffer without a name.\nSolution:   Don't set a NUL. (James McCoy, closes #714)\nFiles:      src/eval.c, src/testdir/test_fnamemodify.vim\n\nPatch 7.4.1655\nProblem:    remote_expr() hangs. (Ramel)\nSolution:   Check for messages in the waiting loop.\nFiles:      src/if_xcmdsrv.c\n\nPatch 7.4.1656\nProblem:    Crash when using partial with a timer.\nSolution:   Increment partial reference count. (Hirohito Higashi)\nFiles:      src/eval.c, src/testdir/test_timers.vim\n\nPatch 7.4.1657\nProblem:    On Unix in a terminal: channel messages are not handled right away.\n            (Jackson Alves de Aquino)\nSolution:   Break the loop for timers when something was received.\nFiles:      src/os_unix.c\n\nPatch 7.4.1658\nProblem:    A plugin does not know when VimEnter autocommands were already\n            triggered.\nSolution:   Add the v:vim_did_enter variable.\nFiles:      src/eval.c, src/main.c, src/vim.h, src/testdir/test_autocmd.vim,\n            src/testdir/test_alot.vim, runtime/doc/autocmd.txt,\n            runtime/doc/eval.txt\n\nPatch 7.4.1659 (after 7.4.1657)\nProblem:    Compiler warning for argument type. (Manuel Ortega)\nSolution:   Remove \"&\".\nFiles:      src/os_unix.c\n\nPatch 7.4.1660\nProblem:    has('patch-7.4.1') doesn't work.\nSolution:   Fix off-by-one error. (Thinca)\nFiles:      src/eval.c, src/testdir/test_expr.vim, src/testdir/test60.in,\n            src/testdir/test60.ok\n\nPatch 7.4.1661\nProblem:    No test for special characters in channel eval command.\nSolution:   Testing sending and receiving text with special characters.\nFiles:      src/testdir/test_channel.vim, src/testdir/test_channel.py\n\nPatch 7.4.1662\nProblem:    No test for an invalid Ex command on a channel.\nSolution:   Test handling an invalid command gracefully.  Avoid getting an\n            error message, do write it to the channel log.\nFiles:      src/channel.c, src/testdir/test_channel.vim,\n            src/testdir/test_channel.py\n\nPatch 7.4.1663\nProblem:    In tests it's often useful to check if a pattern matches.\nSolution:   Add assert_match().\nFiles:      src/eval.c, src/testdir/test_assert.vim,\n            src/testdir/test_channel.vim, runtime/doc/eval.txt\n\nPatch 7.4.1664\nProblem:    Crash in :cgetexpr.\nSolution:   Check for NULL pointer. (Dominique) Add a test.\nFiles:      src/quickfix.c, src/testdir/test_quickfix.vim\n\nPatch 7.4.1665\nProblem:    Crash when calling job_start() with a NULL string. (Dominique)\nSolution:   Check for an invalid argument.\nFiles:      src/channel.c, src/testdir/test_channel.vim\n\nPatch 7.4.1666\nProblem:    When reading JSON from a channel all readahead is used.\nSolution:   Use the fill function to reduce overhead.\nFiles:      src/channel.c, src/json.c, src/structs.h\n\nPatch 7.4.1667\nProblem:    Win32: waiting on a pipe with fixed sleep time.\nSolution:   Start with a short delay and increase it when looping.\nFiles:      src/channel.c\n\nPatch 7.4.1668\nProblem:    channel_get_all() does multiple allocations.\nSolution:   Compute the size and allocate once.\nFiles:      src/channel.c\n\nPatch 7.4.1669\nProblem:    When writing buffer lines to a pipe Vim may block.\nSolution:   Avoid blocking, write more lines later.\nFiles:      src/channel.c, src/misc2.c, src/os_unix.c, src/structs.h,\n            src/vim.h, src/proto/channel.pro, src/testdir/test_channel.vim\n\nPatch 7.4.1670\nProblem:    Completion doesn't work well for a variable containing \"#\".\nSolution:   Recognize the \"#\". (Watiko)\nFiles:      src/eval.c\n\nPatch 7.4.1671\nProblem:    When help exists in multiple languages, adding @ab while \"ab\" is\n            the default help language is unnecessary.\nSolution:   Leave out \"@ab\" when not needed. (Ken Takata)\nFiles:      src/ex_getln.c\n\nPatch 7.4.1672\nProblem:    The Dvorak support is a bit difficult to install.\nSolution:   Turn it into an optional package.\nFiles:      runtime/macros/dvorak, runtime/macros/README.txt,\n            runtime/pack/dist/opt/dvorak/plugin/dvorak.vim,\n            runtime/pack/dist/opt/dvorak/dvorak/enable.vim,\n            runtime/pack/dist/opt/dvorak/dvorak/disable.vim\n\nPatch 7.4.1673\nProblem:    The justify plugin has to be copied or sourced to be used.\nSolution:   Turn it into a package.\nFiles:      runtime/macros/justify.vim, runtime/macros/README.txt,\n            runtime/pack/dist/opt/justify/plugin/justify.vim, Filelist\n\nPatch 7.4.1674\nProblem:    The editexisting plugin has to be copied or sourced to be used.\nSolution:   Turn it into a package.\nFiles:      runtime/macros/editexisting.vim, runtime/macros/README.txt,\n            runtime/pack/dist/opt/editexisting/plugin/editexisting.vim,\n            Filelist\n\nPatch 7.4.1675\nProblem:    The swapmous plugin has to be copied or sourced to be used.\nSolution:   Turn it into the swapmouse package.\nFiles:      runtime/macros/swapmous.vim, runtime/macros/README.txt,\n            runtime/pack/dist/opt/swapmouse/plugin/swapmouse.vim, Filelist\n\nPatch 7.4.1676\nProblem:    The shellmenu plugin has to be copied or sourced to be used.\nSolution:   Turn it into a package.\nFiles:      runtime/macros/shellmenu.vim, runtime/macros/README.txt,\n            runtime/pack/dist/opt/shellmenu/plugin/shellmenu.vim, Filelist\n\nPatch 7.4.1677\nProblem:    A reference to the removed file_select plugin remains.\nSolution:   Remove it.\nFiles:      runtime/macros/README.txt\n\nPatch 7.4.1678\nProblem:    Warning for unused argument.\nSolution:   Add UNUSED. (Dominique Pelle)\nFiles:      src/if_mzsch.c\n\nPatch 7.4.1679\nProblem:    Coverity: copying value of v_lock without initializing it.\nSolution:   Init v_lock in rettv_list_alloc() and rettv_dict_alloc().\nFiles:      src/eval.c\n\nPatch 7.4.1680\nProblem:    Coverity warns for not checking name length (false positive).\nSolution:   Only copy the characters we know are there.\nFiles:      src/channel.c\n\nPatch 7.4.1681\nProblem:    Coverity warns for fixed size buffer length (false positive).\nSolution:   Add a check for the name length.\nFiles:      src/eval.c\n\nPatch 7.4.1682\nProblem:    Coverity: no check for NULL.\nSolution:   Add check for invalid argument to assert_match().\nFiles:      src/eval.c\n\nPatch 7.4.1683\nProblem:    Generated .bat files do not support --nofork.\nSolution:   Add check for --nofork.  Also add \"setlocal\". (Kevin Cant\u00fa,\n            closes #659)\nFiles:      src/dosinst.c\n\nPatch 7.4.1684\nProblem:    README text is slightly outdated.\nSolution:   Mention the READMEdir directory.\nFiles:      README.md, README.txt\n\nPatch 7.4.1685\nProblem:    There is no easy way to get all the information about a match.\nSolution:   Add matchstrpos(). (Ozaki Kiichi)\nFiles:      runtime/doc/eval.txt, runtime/doc/usr_41.txt, src/eval.c,\n            src/testdir/test_alot.vim, src/testdir/test_matchstrpos.vim\n\nPatch 7.4.1686\nProblem:    When running tests $HOME/.viminfo is written. (James McCoy)\nSolution:   Add 'nviminfo' to the 'viminfo' option. (closes #722)\nFiles:      src/testdir/test_backspace_opt.vim, src/testdir/test_viminfo.vim,\n            src/testdir/runtest.vim.\n\nPatch 7.4.1687\nProblem:    The channel close_cb option does not work.\nSolution:   Use jo_close_partial instead of jo_err_partial. (Damien)\nFiles:      src/channel.c, src/testdir/test_channel.vim\n\nPatch 7.4.1688\nProblem:    MzScheme does not support partial.\nSolution:   Add minimal partial support. (Ken Takata)\nFiles:      src/if_mzsch.c\n\nPatch 7.4.1689\nProblem:    Ruby interface has inconsistent coding style.\nSolution:   Fix the coding style. (Ken Takata)\nFiles:      src/if_ruby.c\n\nPatch 7.4.1690\nProblem:    Can't compile with the conceal feature but without multi-byte.\nSolution:   Adjust #ifdef. (Owen Leibman)\nFiles:      src/eval.c, src/window.c\n\nPatch 7.4.1691\nProblem:    When switching to a new buffer and an autocommand applies syntax\n            highlighting an ml_get error may occur.\nSolution:   Check \"syn_buf\" against the buffer in the window. (Alexander von\n            Buddenbrock, closes #676)\nFiles:      src/syntax.c\n\nPatch 7.4.1692\nProblem:    feedkeys('i', 'x') gets stuck, waits for a character to be typed.\nSolution:   Behave like \":normal\". (Yasuhiro Matsumoto)\nFiles:      src/eval.c, src/testdir/test_feedkeys.vim\n\nPatch 7.4.1693\nProblem:    Building the Perl interface gives compiler warnings.\nSolution:   Remove a pragma. Add noreturn attributes. (Damien)\nFiles:      src/if_perl.xs\n\nPatch 7.4.1694\nProblem:    Win32 gvim doesn't work with \"dvorakj\" input method.\nSolution:   Wait for QS_ALLINPUT instead of QS_ALLEVENTS. (Yukihiro Nakadaira)\nFiles:      src/gui_w32.c\n\nPatch 7.4.1695\nProblem:    \":syn reset\" clears the effect \":syn iskeyword\". (James McCoy)\nSolution:   Remove clearing the syntax keywords.\nFiles:      src/syntax.c\n\nPatch 7.4.1696\nProblem:    When using :stopinsert in a silent mapping the \"INSERT\" message\n            isn't cleared. (Coacher)\nSolution:   Always clear the message. (Christian Brabandt, closes #718)\nFiles:      src/ex_docmd.c, src/proto/screen.pro, src/screen.c\n\nPatch 7.4.1697\nProblem:    Display problems when the 'ambiwidth' and 'emoji' options are not\n            set properly or the terminal doesn't behave as expected.\nSolution:   After drawing an ambiguous width character always position the\n            cursor.\nFiles:      src/mbyte.c, src/screen.c, src/proto/mbyte.pro\n\nPatch 7.4.1698\nProblem:    Two tests fail when running tests with MinGW. (Michael Soyka)\nSolution:   Convert test_getcwd.ok test_wordcount.ok to unix fileformat.\nFiles:      src/testdir/Make_ming.mak\n\nPatch 7.4.1699\nProblem:    :packadd does not work the same when used early or late.\nSolution:   Always load plugins matching \"plugin/**/*.vim\".\nFiles:      src/ex_cmds2.c, src/testdir/test_packadd.vim\n\nPatch 7.4.1700\nProblem:    Equivalence classes are not properly tested.\nSolution:   Add tests for multi-byte and latin1. Fix an error. (Owen Leibman)\nFiles:      src/regexp.c, src/testdir/Make_all.mak,\n            src/testdir/test_alot_latin.vim, src/testdir/test_alot_utf8.vim,\n            src/testdir/test_regexp_latin.vim,\n            src/testdir/test_regexp_utf8.vim\n\nPatch 7.4.1701\nProblem:    Equivalence classes still tested in old style tests.\nSolution:   Remove the duplicate.\nFiles:      src/testdir/test44.in, src/testdir/test44.ok,\n            src/testdir/test99.in, src/testdir/test99.ok\n\nPatch 7.4.1702\nProblem:    Using freed memory when parsing 'printoptions' fails.\nSolution:   Save the old options and restore them in case of an error.\n            (Dominique)\nFiles:      src/hardcopy.c, src/testdir/test_hardcopy.vim\n\nPatch 7.4.1703\nProblem:    Can't assert for not equal and not matching.\nSolution:   Add assert_notmatch() and assert_notequal().\nFiles:      src/eval.c, runtime/doc/eval.txt, src/testdir/test_assert.vim\n\nPatch 7.4.1704\nProblem:    Using freed memory with \"wincmd p\". (Dominique Pelle)\nSolution:   Also clear \"prevwin\" in other tab pages.\nFiles:      src/window.c\n\nPatch 7.4.1705\nProblem:    The 'guifont' option does not allow for a quality setting.\nSolution:   Add the \"q\" item, supported on MS-Windows. (Yasuhiro Matsumoto)\nFiles:      runtime/doc/options.txt, src/gui_w32.c, src/os_mswin.c,\n            src/proto/os_mswin.pro\n\nPatch 7.4.1706\nProblem:    Old style function declaration breaks build.\nSolution:   Remove __ARGS().\nFiles:      src/proto/os_mswin.pro\n\nPatch 7.4.1707\nProblem:    Cannot use empty dictionary key, even though it can be useful.\nSolution:   Allow using an empty dictionary key.\nFiles:      src/hashtab.c, src/eval.c, src/testdir/test_expr.vim\n\nPatch 7.4.1708\nProblem:    New regexp engine does not work properly with EBCDIC.\nSolution:   Define equivalence class characters. (Owen Leibman)\nFiles:      src/regexp_nfa.c\n\nPatch 7.4.1709\nProblem:    Mistake in #ifdef.\nSolution:   Change PROOF_QUALITY to DRAFT_QUALITY. (Ken Takata)\nFiles:      src/os_mswin.c\n\nPatch 7.4.1710\nProblem:    Not all output of an external command is read.\nSolution:   Avoid timing out when the process has exited. (closes #681)\nFiles:      src/os_unix.c\n\nPatch 7.4.1711\nProblem:    When using try/catch in 'statusline' it is still considered an\n            error and the status line will be disabled.\nSolution:   Check did_emsg instead of called_emsg. (haya14busa, closes #729)\nFiles:      src/screen.c, src/testdir/test_statusline.vim,\n            src/testdir/test_alot.vim\n\nPatch 7.4.1712\nProblem:    For plugins in packages, plugin authors need to take care of all\n            dependencies.\nSolution:   When loading \"start\" packages and for :packloadall, first add all\n            directories to 'runtimepath' before sourcing plugins.\nFiles:      src/ex_cmds2.c, src/testdir/test_packadd.vim\n\nPatch 7.4.1713\nProblem:    GTK GUI doesn't work on Wayland.\nSolution:   Specify that only the X11 backend is allowed. (Simon McVittie)\nFiles:      src/gui_gtk_x11.c\n\nPatch 7.4.1714\nProblem:    Non-GUI specific settings in the gvimrc_example file.\nSolution:   Move some settings to the vimrc_example file.  Remove setting\n            'hlsearch' again. (suggested by Hirohito Higashi)\nFiles:      runtime/vimrc_example.vim, runtime/gvimrc_example.vim\n\nPatch 7.4.1715\nProblem:    Double free when a partial is in a cycle with a list or dict.\n            (Nikolai Pavlov)\nSolution:   Do not free a nested list or dict used by the partial.\nFiles:      src/eval.c, src/testdir/test_partial.vim\n\nPatch 7.4.1716\nProblem:    'autochdir' doesn't work for the first file. (Rob Hoelz)\nSolution:   Call DO_AUTOCHDIR after startup. (Christian Brabandt, closes #704)\nFiles:      src/main.c\n\nPatch 7.4.1717\nProblem:    Leaking memory when opening a channel fails.\nSolution:   Unreference partials in job options.\nFiles:      src/eval.c, src/channel.c, src/proto/channel.pro,\n            src/testdir/test_channel.vim\n\nPatch 7.4.1718\nProblem:    Coverity: not using return value of set_ref_in_item().\nSolution:   Use the return value.\nFiles:      src/eval.c\n\nPatch 7.4.1719\nProblem:    Leaking memory when there is a cycle involving a job and a\n            partial.\nSolution:   Add a copyID to job and channel.  Set references in items referred\n            by them.  Go through all jobs and channels to find unreferenced\n            items.  Also, decrement reference counts when garbage collecting.\nFiles:      src/eval.c, src/channel.c, src/netbeans.c, src/globals.h,\n            src/ops.c, src/regexp.c, src/tag.c, src/proto/channel.pro,\n            src/proto/eval.pro, src/testdir/test_partial.vim, src/structs.h\n\nPatch 7.4.1720\nProblem:    Tests fail without the job feature.\nSolution:   Skip tests when the job feature is not present.\nFiles:      src/testdir/test_partial.vim\n\nPatch 7.4.1721\nProblem:    The vimtbar files are unused.\nSolution:   Remove them. (Ken Takata)\nFiles:      src/vimtbar.dll, src/vimtbar.h, src/vimtbar.lib, Filelist\n\nPatch 7.4.1722\nProblem:    Crash when calling garbagecollect() after starting a job.\nSolution:   Set the copyID on job and channel. (Hirohito Higashi, Ozaki\n            Kiichi)\nFiles:      src/eval.c\n\nPatch 7.4.1723\nProblem:    When using try/catch in 'tabline' it is still considered an\n            error and the tabline will be disabled.\nSolution:   Check did_emsg instead of called_emsg. (haya14busa, closes #746)\nFiles:      src/screen.c, src/testdir/test_tabline.vim,\n            src/testdir/test_alot.vim\n\nPatch 7.4.1724 (after 7.4.1723)\nProblem:    Tabline test fails in GUI.\nSolution:   Remove 'e' from 'guioptions'.\nFiles:      src/testdir/test_tabline.vim\n\nPatch 7.4.1725\nProblem:    Compiler errors for non-ANSI compilers.\nSolution:   Remove // comment.  Remove comma at end of enum. (Michael Jarvis)\nFiles:      src/eval.c\n\nPatch 7.4.1726\nProblem:    ANSI compiler complains about string length.\nSolution:   Split long string in two parts. (Michael Jarvis)\nFiles:      src/ex_cmds.c\n\nPatch 7.4.1727\nProblem:    Cannot detect a crash in tests when caused by garbagecollect().\nSolution:   Add garbagecollect_for_testing().  Do not free a job if is still\n            useful.\nFiles:      src/channel.c, src/eval.c, src/getchar.c, src/main.c, src/vim.h,\n            src/proto/eval.pro, src/testdir/runtest.vim,\n            src/testdir/test_channel.vim, runtime/doc/eval.txt\n\nPatch 7.4.1728\nProblem:    The help for functions require a space after the \"(\".\nSolution:   Make CTRL-] on a function name ignore the arguments. (Hirohito\n            Higashi)\nFiles:      src/ex_cmds.c, src/testdir/test_help_tagjump.vim,\n            runtime/doc/eval.txt\n\nPatch 7.4.1729\nProblem:    The Perl interface cannot use 'print' operator for writing\n            directly in standard IO.\nSolution:   Add a minimal implementation of PerlIO Layer feature and try to\n            use it for STDOUT/STDERR. (Damien)\nFiles:      src/if_perl.xs, src/testdir/test_perl.vim\n\nPatch 7.4.1730\nProblem:    It is not easy to get a character out of a string.\nSolution:   Add strgetchar() and strcharpart().\nFiles:      src/eval.c, src/testdir/test_expr.vim\n\nPatch 7.4.1731\nProblem:    Python: turns partial into simple funcref.\nSolution:   Use partials like partials. (Nikolai Pavlov, closes #734)\nFiles:      runtime/doc/if_pyth.txt, src/eval.c, src/if_py_both.h,\n            src/if_python.c, src/if_python3.c, src/proto/eval.pro,\n            src/testdir/test86.in, src/testdir/test86.ok,\n            src/testdir/test87.in, src/testdir/test87.ok\n\nPatch 7.4.1732\nProblem:    Folds may close when using autocomplete. (Anmol Sethi)\nSolution:   Increment/decrement disable_fold. (Christian Brabandt, closes\n            #643)\nFiles:      src/edit.c, src/fold.c, src/globals.h\n\nPatch 7.4.1733\nProblem:    \"make install\" doesn't know about cross-compiling. (Christian\n            Neukirchen)\nSolution:   Add CROSS_COMPILING. (closes #740)\nFiles:      src/configure.in, src/auto/configure, src/config.mk.in,\n            src/Makefile\n\nPatch 7.4.1734 (after 7.4.1730)\nProblem:    Test fails when not using utf-8.\nSolution:   Split test in regular and utf-8 part.\nFiles:      src/testdir/test_expr.vim, src/testdir/test_expr_utf8.vim,\n            src/testdir/test_alot_utf8.vim\n\nPatch 7.4.1735\nProblem:    It is not possible to only see part of the message history.  It is\n            not possible to clear messages.\nSolution:   Add a count to \":messages\" and a clear argument. (Yasuhiro\n            Matsumoto)\nFiles:      runtime/doc/message.txt, src/ex_cmds.h, src/message.c,\n            src/testdir/test_messages.vim, src/testdir/test_alot.vim\n\nPatch 7.4.1736 (after 7.4.1731)\nProblem:    Unused variable.\nSolution:   Remove it. (Yasuhiro Matsumoto)\nFiles:      src/if_py_both.h\n\nPatch 7.4.1737\nProblem:    Argument marked as unused is used.\nSolution:   Remove UNUSED.\nFiles:      src/message.c\n\nPatch 7.4.1738\nProblem:    Count for \":messages\" depends on number of lines.\nSolution:   Add ADDR_OTHER address type.\nFiles:      src/ex_cmds.h\n\nPatch 7.4.1739\nProblem:    Messages test fails on MS-Windows.\nSolution:   Adjust the asserts.  Skip the \"messages maintainer\" line if not\n            showing all messages.\nFiles:      src/message.c, src/testdir/test_messages.vim\n\nPatch 7.4.1740\nProblem:    syn-cchar defined with matchadd() does not appear if there are no\n            other syntax definitions which matches buffer text.\nSolution:   Check for startcol. (Ozaki Kiichi, haya14busa, closes #757)\nFiles:      src/screen.c, src/testdir/Make_all.mak,\n            src/testdir/test_alot_utf8.vim, src/testdir/test_match_conceal.in,\n            src/testdir/test_match_conceal.ok,\n            src/testdir/test_matchadd_conceal.vim,\n            src/testdir/test_matchadd_conceal_utf8.vim,\n            src/testdir/test_undolevels.vim\n\nPatch 7.4.1741\nProblem:    Not testing utf-8 characters.\nSolution:   Move the right asserts to the test_expr_utf8 test.\nFiles:      src/testdir/test_expr.vim, src/testdir/test_expr_utf8.vim\n\nPatch 7.4.1742\nProblem:    strgetchar() does not work correctly.\nSolution:   use mb_cptr2len().  Add a test. (Naruhiko Nishino)\nFiles:      src/eval.c, src/testdir/test_expr_utf8.vim\n\nPatch 7.4.1743\nProblem:    Clang warns for uninitialized variable. (Michael Jarvis)\nSolution:   Initialize it.\nFiles:      src/if_py_both.h\n\nPatch 7.4.1744\nProblem:    Python: Converting a sequence may leak memory.\nSolution:   Decrement a reference. (Nikolay Pavlov)\nFiles:      src/if_py_both.h\n\nPatch 7.4.1745\nProblem:    README file is not clear about where to get Vim.\nSolution:   Add links to github, releases and the Windows installer.\n            (Suggested by Christian Brabandt)\nFiles:      README.md, README.txt\n\nPatch 7.4.1746\nProblem:    Memory leak in Perl.\nSolution:   Decrement the reference count.  Add a test. (Damien)\nFiles:      src/if_perl.xs, src/testdir/test_perl.vim\n\nPatch 7.4.1747\nProblem:    Coverity: missing check for NULL pointer.\nSolution:   Check for out of memory.\nFiles:      src/if_py_both.h\n\nPatch 7.4.1748\nProblem:    \"gD\" does not find match in first column of first line. (Gary\n            Johnson)\nSolution:   Accept match at the cursor.\nFiles:      src/normal.c, src/testdir/test_goto.vim, src/testdir/test_alot.vim\n\nPatch 7.4.1749\nProblem:    When using GTK 3.20 there are a few warnings.\nSolution:   Use new functions when available. (Kazunobu Kuriyama)\nFiles:      src/gui_beval.c src/gui_gtk_x11.c\n\nPatch 7.4.1750\nProblem:    When a buffer gets updated while in command line mode, the screen\n            may be messed up.\nSolution:   Postpone the redraw when the screen is scrolled.\nFiles:      src/channel.c\n\nPatch 7.4.1751\nProblem:    Crash when 'tagstack' is off. (Dominique Pelle)\nSolution:   Fix it. (Hirohito Higashi)\nFiles:      src/tag.c, src/testdir/test_alot.vim, src/testdir/test_tagjump.vim\n\nPatch 7.4.1752\nProblem:    When adding to the quickfix list the current position is reset.\nSolution:   Do not reset the position when not needed. (Yegappan Lakshmanan)\nFiles:      src/quickfix.c, src/testdir/test_quickfix.vim\n\nPatch 7.4.1753\nProblem:    \"noinsert\" in 'completeopt' is sometimes ignored.\nSolution:   Set the variables when the 'completeopt' was set. (Ozaki Kiichi)\nFiles:      src/edit.c, src/option.c, src/proto/edit.pro\n\nPatch 7.4.1754\nProblem:    When 'filetype' was set and reloading a buffer which does not\n            cause it to be set, the syntax isn't loaded. (KillTheMule)\nSolution:   Remember whether the FileType event was fired and fire it if not.\n            (Anton Lindqvist, closes #747)\nFiles:      src/fileio.c, src/testdir/test_syntax.vim\n\nPatch 7.4.1755\nProblem:    When using getreg() on a non-existing register a NULL list is\n            returned. (Bjorn Linse)\nSolution:   Allocate an empty list. Add a test.\nFiles:      src/eval.c, src/testdir/test_expr.vim\n\nPatch 7.4.1756\nProblem:    \"dll\" options are not expanded.\nSolution:   Expand environment variables. (Ozaki Kiichi)\nFiles:      src/option.c, src/testdir/test_alot.vim,\n            src/testdir/test_expand_dllpath.vim\n\nPatch 7.4.1757\nProblem:    When using complete() it may set 'modified' even though nothing\n            was inserted.\nSolution:   Use Down/Up instead of Next/Previous match. (Shougo, closes #745)\nFiles:      src/edit.c\n\nPatch 7.4.1758\nProblem:    Triggering CursorHoldI when in CTRL-X mode causes problems.\nSolution:   Do not trigger CursorHoldI in CTRL-X mode. Add \"!\" flag to\n            feedkeys() (test with that didn't work though).\nFiles:      src/edit.c, src/eval.c\n\nPatch 7.4.1759\nProblem:    When using feedkeys() in a timer the inserted characters are not\n            used right away.\nSolution:   Break the wait loop when characters have been added to typebuf.\n            use this for testing CursorHoldI.\nFiles:      src/gui.c, src/os_win32.c, src/os_unix.c,\n            src/testdir/test_autocmd.vim\n\nPatch 7.4.1760 (after 7.4.1759)\nProblem:    Compiler warning for unused variable.\nSolution:   Add #ifdef. (John Marriott)\nFiles:      src/os_win32.c\n\nPatch 7.4.1761\nProblem:    Coverity complains about ignoring return value.\nSolution:   Add \"(void)\" to get rid of the warning.\nFiles:      src/eval.c\n\nPatch 7.4.1762\nProblem:    Coverity: useless assignments.\nSolution:   Remove them.\nFiles:      src/search.c\n\nPatch 7.4.1763\nProblem:    Coverity: useless assignment.\nSolution:   Add #if 0.\nFiles:      src/spell.c\n\nPatch 7.4.1764\nProblem:    C++ style comment. (Ken Takata)\nSolution:   Finish the work started here: don't call perror() when stderr\n            isn't working.\nFiles:      src/os_unix.c\n\nPatch 7.4.1765\nProblem:    Undo options are not together in the options window.\nSolution:   Put them together.  (Gary Johnson)\nFiles:      runtime/optwin.vim\n\nPatch 7.4.1766\nProblem:    Building instructions for MS-Windows are outdated.\nSolution:   Mention setting SDK_INCLUDE_DIR. (Ben Franklin, closes #771)  Move\n            outdated instructions further down.\nFiles:      src/INSTALLpc.txt\n\nPatch 7.4.1767\nProblem:    When installing Vim on a GTK system the icon cache is not updated.\nSolution:   Update the GTK icon cache when possible. (Kazunobu Kuriyama)\nFiles:      src/Makefile, src/configure.in, src/config.mk.in,\n            src/auto/configure\n\nPatch 7.4.1768\nProblem:    Arguments of setqflist() are not checked properly.\nSolution:   Add better checks, add a test. (Nikolai Pavlov, Hirohito Higashi,\n            closes #661)\nFiles:      src/eval.c, src/testdir/test_quickfix.vim\n\nPatch 7.4.1769\nProblem:    No \"closed\", \"errors\" and \"encoding\" attribute on Python output.\nSolution:   Add attributes and more tests. (Roland Puntaier, closes #622)\nFiles:      src/if_py_both.h, src/if_python.c, src/if_python3.c,\n            src/testdir/test86.in, src/testdir/test86.ok,\n            src/testdir/test87.in, src/testdir/test87.ok\n\nPatch 7.4.1770\nProblem:    Cannot use true color in the terminal.\nSolution:   Add the 'guicolors' option. (Nikolai Pavlov)\nFiles:      runtime/doc/options.txt, runtime/doc/term.txt,\n            runtime/doc/various.txt, src/auto/configure, src/config.h.in,\n            src/configure.in, src/eval.c, src/globals.h, src/hardcopy.c,\n            src/option.c, src/option.h, src/proto/term.pro, src/screen.c,\n            src/structs.h, src/syntax.c, src/term.c, src/term.h,\n            src/version.c, src/vim.h\n\nPatch 7.4.1771 (after 7.4.1768)\nProblem:    Warning for unused variable.\nSolution:   Add #ifdef. (John Marriott)\nFiles:      src/eval.c\n\nPatch 7.4.1772 (after 7.4.1767)\nProblem:    Installation fails when $GTK_UPDATE_ICON_CACHE is empty.\nSolution:   Add quotes. (Kazunobu Kuriyama)\nFiles:      src/Makefile\n\nPatch 7.4.1773 (after 7.4.1770)\nProblem:    Compiler warnings. (Dominique Pelle)\nSolution:   Add UNUSED. Add type cast. Avoid a buffer overflow.\nFiles:      src/syntax.c, src/term.c\n\nPatch 7.4.1774 (after 7.4.1770)\nProblem:    Cterm true color feature has warnings.\nSolution:   Add type casts.\nFiles:      src/screen.c, src/syntax.c, src/term.c\n\nPatch 7.4.1775\nProblem:    The rgb.txt file is not installed.\nSolution:   Install the file. (Christian Brabandt)\nFiles:      src/Makefile\n\nPatch 7.4.1776\nProblem:    Using wrong buffer length.\nSolution:   use the right name. (Kazunobu Kuriyama)\nFiles:      src/term.c\n\nPatch 7.4.1777\nProblem:    Newly added features can escape the sandbox.\nSolution:   Add checks for restricted and secure. (Yasuhiro Matsumoto)\nFiles:      src/eval.c\n\nPatch 7.4.1778\nProblem:    When using the term truecolor feature, the t_8f and t_8b termcap\n            options are not set by default.\nSolution:   Move the values to before BT_EXTRA_KEYS. (Christian Brabandt)\nFiles:      src/term.c\n\nPatch 7.4.1779\nProblem:    Using negative index in strcharpart(). (Yegappan Lakshmanan)\nSolution:   Assume single byte when using a negative index.\nFiles:      src/eval.c\n\nPatch 7.4.1780\nProblem:    Warnings reported by cppcheck.\nSolution:   Fix the warnings. (Dominique Pelle)\nFiles:      src/ex_cmds2.c, src/json.c, src/misc1.c, src/ops.c,\n            src/regexp_nfa.c\n\nPatch 7.4.1781\nProblem:    synIDattr() does not respect 'guicolors'.\nSolution:   Change the condition for the mode. (Christian Brabandt)\nFiles:      src/eval.c\n\nPatch 7.4.1782\nProblem:    strcharpart() does not work properly with some multi-byte\n            characters.\nSolution:   Use mb_cptr2len() instead of mb_char2len(). (Hirohito Higashi)\nFiles:      src/eval.c, src/testdir/test_expr_utf8.vim\n\nPatch 7.4.1783\nProblem:    The old regexp engine doesn't handle character classes correctly.\n            (Manuel Ortega)\nSolution:   Use regmbc() instead of regc().  Add a test.\nFiles:      src/regexp.c, src/testdir/test_regexp_utf8.vim\n\nPatch 7.4.1784\nProblem:    The termtruecolor feature is enabled differently from many other\n            features.\nSolution:   Enable the termtruecolor feature for the big build, not through\n            configure.\nFiles:      src/configure.in, src/config.h.in, src/auto/configure,\n            src/feature.h\n\nPatch 7.4.1785 (after 7.4.1783)\nProblem:    Regexp test fails on windows.\nSolution:   set 'isprint' to the right value for testing.\nFiles:      src/testdir/test_regexp_utf8.vim\n\nPatch 7.4.1786\nProblem:    Compiled-in colors do not match rgb.txt.\nSolution:   Use the rgb.txt colors. (Kazunobu Kuriyama)\nFiles:      src/term.c\n\nPatch 7.4.1787\nProblem:    When a job ends the close callback is invoked before other\n            callbacks. On Windows the close callback is not called.\nSolution:   First invoke out/err callbacks before the close callback.\n            Make the close callback work on Windows.\nFiles:      src/channel.c, src/proto/channel.pro,\n            src/testdir/test_channel.vim, src/testdir/test_channel_pipe.py\n\nPatch 7.4.1788\nProblem:    NSIS script is missing packages.\nSolution:   Add the missing directories. (Ken Takata)\nFiles:      nsis/gvim.nsi\n\nPatch 7.4.1789\nProblem:    Cannot use ch_read() in the close callback.\nSolution:   Do not discard the channel if there is readahead.  Do not discard\n            readahead if there is a close callback.\nFiles:      src/eval.c, src/channel.c, src/proto/channel.pro,\n            src/testdir/test_channel.vim\n\nPatch 7.4.1790\nProblem:    Leading white space in a job command matters. (Andrew Stewart)\nSolution:   Skip leading white space.\nFiles:      src/os_unix.c\n\nPatch 7.4.1791\nProblem:    Channel could be garbage collected too early.\nSolution:   Don't free a channel or remove it from a job when it is still\n            useful.\nFiles:      src/channel.c\n\nPatch 7.4.1792\nProblem:    Color name decoding is implemented several times.\nSolution:   Move it to term.c. (Christian Brabandt)\nFiles:      src/gui_mac.c, src/gui_photon.c, src/gui_w32.c,\n            src/proto/term.pro, src/term.c\n\nPatch 7.4.1793\nProblem:    Some character classes may differ between systems.  On OS/X the\n            regexp test fails.\nSolution:   Make this less dependent on the system. (idea by Kazunobu Kuriyama)\nFiles:      src/regexp.c, src/regexp_nfa.c\n\nPatch 7.4.1794 (after 7.4.1792)\nProblem:    Can't build on MS-Windows.\nSolution:   Add missing declaration.\nFiles:      src/gui_w32.c\n\nPatch 7.4.1795\nProblem:    Compiler warning for redefining RGB. (John Marriott)\nSolution:   Rename it to TORGB.\nFiles:      src/term.c\n\nPatch 7.4.1796 (after 7.4.1795)\nProblem:    Colors are wrong on MS-Windows. (Christian Robinson)\nSolution:   Use existing RGB macro if it exists. (Ken Takata)\nFiles:      src/term.c\n\nPatch 7.4.1797\nProblem:    Warning from Windows 64 bit compiler.\nSolution:   Change int to size_t. (Mike Williams)\nFiles:      src/term.c\n\nPatch 7.4.1798\nProblem:    Still compiler warning for unused return value. (Charles Campbell)\nSolution:   Assign to ignoredp.\nFiles:      src/term.c\n\nPatch 7.4.1799\nProblem:    'guicolors' is a confusing option name.\nSolution:   Use 'termguicolors' instead. (Hirohito Higashi, Ken Takata)\nFiles:      runtime/doc/options.txt, runtime/doc/term.txt,\n            runtime/doc/various.txt, runtime/syntax/dircolors.vim, src/eval.c,\n            src/feature.h, src/globals.h, src/hardcopy.c, src/option.c,\n            src/option.h, src/proto/term.pro, src/screen.c, src/structs.h,\n            src/syntax.c, src/term.c, src/version.c, src/vim.h\n\nPatch 7.4.1800 (after 7.4.1799)\nProblem:    Unnecessary #ifdef.\nSolution:   Just use USE_24BIT. (Ken Takata)\nFiles:      src/syntax.c\n\nPatch 7.4.1801\nProblem:    Make uninstall leaves file behind.\nSolution:   Delete rgb.txt. (Kazunobu Kuriyama)\nFiles:      src/Makefile\n\nPatch 7.4.1802\nProblem:    Quickfix doesn't handle long lines well, they are split.\nSolution:   Drop characters after a limit. (Anton Lindqvist)\nFiles:      src/quickfix.c, src/testdir/test_quickfix.vim,\n            src/testdir/samples/quickfix.txt\n\nPatch 7.4.1803\nProblem:    GTK3 doesn't handle menu separators properly.\nSolution:   Use gtk_separator_menu_item_new(). (Kazunobu Kuriyama)\nFiles:      src/gui_gtk.c\n\nPatch 7.4.1804\nProblem:    Can't use Vim as MANPAGER.\nSolution:   Add manpager.vim. (Enno Nagel, closes #491)\nFiles:      runtime/doc/filetype.txt, runtime/plugin/manpager.vim\n\nPatch 7.4.1805\nProblem:    Running tests in shadow dir fails.\nSolution:   Link the samples directory\nFiles:      src/Makefile\n\nPatch 7.4.1806\nProblem:    'termguicolors' option missing from the options window.\nSolution:   Add the entry.\nFiles:      runtime/optwin.vim\n\nPatch 7.4.1807\nProblem:    Test_out_close_cb sometimes fails.\nSolution:   Always write DETACH to out, not err.\nFiles:      src/channel.c, src/testdir/test_channel.vim\n\nPatch 7.4.1808 (after 7.4.1806)\nProblem:    Using wrong feature name to check for 'termguicolors'.\nSolution:   Use the right feature name. (Ken Takata)\nFiles:      runtime/optwin.vim\n\nPatch 7.4.1809 (after 7.4.1808)\nProblem:    Using wrong short option name for 'termguicolors'.\nSolution:   Use the option name.\nFiles:      runtime/optwin.vim\n\nPatch 7.4.1810\nProblem:    Sending DETACH after a channel was closed isn't useful.\nSolution:   Only add DETACH for a netbeans channel.\nFiles:      src/channel.c, src/testdir/test_channel.vim\n\nPatch 7.4.1811\nProblem:    Netbeans channel gets garbage collected.\nSolution:   Set reference in nb_channel.\nFiles:      src/eval.c, src/netbeans.c, src/proto/netbeans.pro\n\nPatch 7.4.1812\nProblem:    Failure on startup with Athena and Motif.\nSolution:   Check for INVALCOLOR. (Kazunobu Kuriyama)\nFiles:      src/syntax.c, src/vim.h\n\nPatch 7.4.1813\nProblem:    Memory access error when running test_quickfix.\nSolution:   Allocate one more byte. (Yegappan Lakshmanan)\nFiles:      src/quickfix.c\n\nPatch 7.4.1814\nProblem:    A channel may be garbage collected while it's still being used by\n            a job. (James McCoy)\nSolution:   Mark the channel as used if the job is still used.  Do the same\n            for channels that are still used.\nFiles:      src/eval.c, src/channel.c, src/proto/channel.pro\n\nPatch 7.4.1815\nProblem:    Compiler warnings for unused variables. (Ajit Thakkar)\nSolution:   Add a dummy initialization. (Yasuhiro Matsumoto)\nFiles:      src/quickfix.c\n\nPatch 7.4.1816\nProblem:    Looping over a null list throws an error.\nSolution:   Skip over the for loop.\nFiles:      src/eval.c, src/testdir/test_expr.vim\n\nPatch 7.4.1817\nProblem:    The screen is not updated if a callback is invoked when closing a\n            channel.\nSolution:   Invoke redraw_after_callback().\nFiles:      src/channel.c\n\nPatch 7.4.1818\nProblem:    Help completion adds @en to all matches except the first one.\nSolution:   Remove \"break\", go over all items.\nFiles:      src/ex_getln.c\n\nPatch 7.4.1819\nProblem:    Compiler warnings when sprintf() is a macro.\nSolution:   Don't interrupt sprintf() with an #ifdef. (Michael Jarvis,\n            closes #788)\nFiles:      src/fileio.c, src/tag.c, src/term.c\n\nPatch 7.4.1820\nProblem:    Removing language from help tags too often.\nSolution:   Only remove @en when not needed. (Hirohito Higashi)\nFiles:      src/ex_getln.c, src/testdir/test_help_tagjump.vim\n\nPatch 7.4.1821 (after 7.4.1820)\nProblem:    Test fails on MS-Windows.\nSolution:   Sort the completion results.\nFiles:      src/testdir/test_help_tagjump.vim\n\nPatch 7.4.1822\nProblem:    Redirecting stdout of a channel to \"null\" doesn't work. (Nicola)\nSolution:   Correct the file descriptor number.\nFiles:      src/os_unix.c\n\nPatch 7.4.1823\nProblem:    Warning from 64 bit compiler.\nSolution:   Add type cast. (Mike Williams)\nFiles:      src/quickfix.c\n\nPatch 7.4.1824\nProblem:    When a job is no longer referenced and does not have an exit\n            callback the process may hang around in defunct state. (Nicola)\nSolution:   Call job_status() if the job is running and won't get freed\n            because it might still be useful.\nFiles:      src/channel.c\n\nPatch 7.4.1825\nProblem:    When job writes to buffer nothing is written. (Nicola)\nSolution:   Do not discard a channel before writing is done.\nFiles:      src/channel.c\n\nPatch 7.4.1826\nProblem:    Callbacks are invoked when it's not safe. (Andrew Stewart)\nSolution:   When a channel is to be closed don't invoke callbacks right away,\n            wait for a safe moment.\nFiles:      src/structs.h, src/channel.c\n\nPatch 7.4.1827\nProblem:    No error when invoking a callback when it's not safe.\nSolution:   Add an error message.  Avoid the error when freeing a channel.\nFiles:      src/structs.h, src/channel.c\n\nPatch 7.4.1828\nProblem:    May try to access buffer that's already freed.\nSolution:   When freeing a buffer remove it from any channel.\nFiles:      src/buffer.c, src/channel.c, src/proto/channel.pro\n\nPatch 7.4.1829 (after 7.4.1828)\nProblem:    No message on channel log when buffer was freed.\nSolution:   Log a message.\nFiles:      src/channel.c\n\nPatch 7.4.1830\nProblem:    non-antialiased misnamed.\nSolution:   Use NONANTIALIASED and NONANTIALIASED_QUALITY. (Kim Brouer,\n            closes #793)\nFiles:      src/os_mswin.c, runtime/doc/options.txt\n\nPatch 7.4.1831\nProblem:    When timer_stop() is called with a string there is no proper error\n            message.\nSolution:   Require getting a number. (Bjorn Linse)\nFiles:      src/eval.c\n\nPatch 7.4.1832\nProblem:    Memory leak in debug commands.\nSolution:   Free memory before overwriting the pointer. (hint by Justin Keyes)\nFiles:      src/ex_cmds2.c\n\nPatch 7.4.1833\nProblem:    Cannot use an Ex command for 'keywordprg'.\nSolution:   Accept an Ex command. (Nelo-Thara Wallus)\nFiles:      src/normal.c, runtime/doc/options.txt\n\nPatch 7.4.1834\nProblem:    Possible crash when conceal is active.\nSolution:   Check for the screen to be valid when redrawing a line.\nFiles:      src/screen.c\n\nPatch 7.4.1835\nProblem:    When splitting and closing a window the status height changes.\nSolution:   Compute the frame height correctly. (Hirohito Higashi)\nFiles:      src/window.c, src/testdir/test_alot.vim,\n            src/testdir/test_window_cmd.vim\n\nPatch 7.4.1836\nProblem:    When using a partial on a dictionary it always gets bound to that\n            dictionary.\nSolution:   Make a difference between binding a function to a dictionary\n            explicitly or automatically.\nFiles:      src/structs.h, src/eval.c, src/testdir/test_partial.vim,\n            runtime/doc/eval.txt\n\nPatch 7.4.1837\nProblem:    The BufUnload event is triggered twice, when :bunload is used with\n            `bufhidden` set to `unload` or `delete`.\nSolution:   Do not trigger the event when ml_mfp is NULL. (Hirohito Higashi)\nFiles:      src/buffer.c, src/testdir/test_autocmd.vim\n\nPatch 7.4.1838\nProblem:    Functions specifically for testing do not sort together.\nSolution:   Rename garbagecollect_for_testing() to test_garbagecollect_now().\n            Add test_null_list(), test_null_dict(), etc.\nFiles:      src/eval.c, src/testdir/test_expr.vim,\n            src/testdir/test_channel.vim, runtime/doc/eval.txt\n\nPatch 7.4.1839\nProblem:    Cannot get the items stored in a partial.\nSolution:   Support using get() on a partial.\nFiles:      src/eval.c, src/testdir/test_partial.vim, runtime/doc/eval.txt\n\nPatch 7.4.1840\nProblem:    When using packages an \"after\" directory cannot be used.\nSolution:   Add the \"after\" directory of the package to 'runtimepath' if it\n            exists.\nFiles:      src/ex_cmds2.c, src/testdir/test_packadd.vim\n\nPatch 7.4.1841\nProblem:    The code to reallocate the buffer used for quickfix is repeated.\nSolution:   Move the code to a function. (Yegappan Lakshmanan, closes #831)\nFiles:      src/quickfix.c, src/testdir/test_quickfix.vim\n\nPatch 7.4.1842 (after 7.4.1839)\nProblem:    get() works for Partial but not for Funcref.\nSolution:   Accept Funcref.  Also return the function itself. (Nikolai Pavlov)\nFiles:      src/eval.c, src/testdir/test_partial.vim, runtime/doc/eval.txt\n\nPatch 7.4.1843\nProblem:    Tests involving Python are flaky.\nSolution:   Set the pt_auto field.  Add tests. (Nikolai Pavlov)\nFiles:      runtime/doc/if_pyth.txt, src/if_py_both.h, src/testdir/test86.in,\n            src/testdir/test86.ok, src/testdir/test87.in,\n            src/testdir/test87.ok\n\nPatch 7.4.1844\nProblem:    Using old function name in comment.  More functions should start\n            with test_.\nSolution:   Rename function in comment. (Hirohito Higashi) Rename\n            disable_char_avail_for_testing() to test_disable_char_avail().\n            And alloc_fail() to test_alloc_fail().\nFiles:      src/eval.c, src/getchar.c, src/testdir/runtest.vim,\n            src/testdir/test_cursor_func.vim, src/testdir/test_quickfix.vim,\n            runtime/doc/eval.txt\n\nPatch 7.4.1845\nProblem:    Mentioning NetBeans when reading from channel. (Ramel Eshed)\nSolution:   Make the text more generic.\nFiles:      src/channel.c\n\nPatch 7.4.1846\nProblem:    Ubsan detects a multiplication overflow.\nSolution:   Don't use orig_mouse_time when it's zero. (Dominique Pelle)\nFiles:      src/term.c\n\nPatch 7.4.1847\nProblem:    Getting an item from a NULL dict crashes.  Setting a register to a\n            NULL list crashes. (Nikolai Pavlov, issue #768)  Comparing a NULL\n            dict with a NULL dict fails.\nSolution:   Properly check for NULL.\nFiles:      src/eval.c, src/testdir/test_expr.vim\n\nPatch 7.4.1848\nProblem:    Can't build with Strawberry Perl 5.24.\nSolution:   Define S_SvREFCNT_dec() if needed. (Damien, Ken Takata)\nFiles:      src/if_perl.xs\n\nPatch 7.4.1849\nProblem:    Still trying to read from channel that is going to be closed.\n            (Ramel Eshed)\nSolution:   Check if ch_to_be_closed is set.\nFiles:      src/channel.c\n\nPatch 7.4.1850\nProblem:    GUI freezes when using a job. (Shougo)\nSolution:   Unregister the channel when there is an input error.\nFiles:      src/channel.c\n\nPatch 7.4.1851\nProblem:    test_syn_attr fails when using the GUI. (Dominique Pelle)\nSolution:   Escape the font name properly.\nFiles:      src/testdir/test_syn_attr.vim\n\nPatch 7.4.1852\nProblem:    Unix: Cannot run all tests with the GUI.\nSolution:   Add the \"testgui\" target.\nFiles:      src/Makefile, src/testdir/Makefile\n\nPatch 7.4.1853\nProblem:    Crash when job and channel are in the same dict while using\n            partials. (Luc Hermitte)\nSolution:   Do not decrement the channel reference count too early.\nFiles:      src/channel.c\n\nPatch 7.4.1854\nProblem:    When setting 'termguicolors' the Ignore highlighting doesn't work.\n            (Charles Campbell)\nSolution:   Handle the color names \"fg\" and \"bg\" when the GUI isn't running\n            and no colors are specified, fall back to black and white.\nFiles:      src/syntax.c\n\nPatch 7.4.1855\nProblem:    Valgrind reports memory leak for job that is not freed.\nSolution:   Free all jobs on exit.  Add test for failing job.\nFiles:      src/channel.c, src/misc2.c, src/proto/channel.pro,\n            src/testdir/test_partial.vim\n\nPatch 7.4.1856 (after 7.4.1855)\nProblem:    failing job test fails on MS-Windows.\nSolution:   Expect \"fail\" status instead of \"dead\".\nFiles:      src/testdir/test_partial.vim\n\nPatch 7.4.1857\nProblem:    When a channel appends to a buffer that is 'nomodifiable' there is\n            an error but appending is done anyway.\nSolution:   Add the 'modifiable' option.  Refuse to write to a 'nomodifiable'\n            when the value is 1.\nFiles:      src/structs.h, src/channel.c, src/testdir/test_channel.vim,\n            runtime/doc/channel.txt\n\nPatch 7.4.1858\nProblem:    When a channel writes to a buffer it doesn't find a buffer by the\n            short name but re-uses it anyway.\nSolution:   Find buffer also by the short name.\nFiles:      src/channel.c, src/buffer.c, src/vim.h\n\nPatch 7.4.1859\nProblem:    Cannot use a function reference for \"exit_cb\".\nSolution:   Use get_callback(). (Yegappan Lakshmanan)\nFiles:      src/channel.c, src/structs.h\n\nPatch 7.4.1860\nProblem:    Using a partial for timer_start() may cause a crash.\nSolution:   Set the copyID in timer objects. (Ozaki Kiichi)\nFiles:      src/testdir/test_timers.vim, src/eval.c, src/ex_cmds2.c,\n            src/proto/ex_cmds2.pro\n\nPatch 7.4.1861\nProblem:    Compiler warnings with 64 bit compiler.\nSolution:   Change int to size_t. (Mike Williams)\nFiles:      src/ex_cmds2.c\n\nPatch 7.4.1862\nProblem:    string() with repeated argument does not give a result usable by\n            eval().\nSolution:   Refactor echo_string and tv2string(), moving the common part to\n            echo_string_core(). (Ken Takata)\nFiles:      src/eval.c, src/testdir/test_viml.vim, src/testdir/test86.ok,\n            src/testdir/test87.ok\n\nPatch 7.4.1863\nProblem:    Compiler warnings on Win64.\nSolution:   Adjust types, add type casts. (Ken Takata)\nFiles:      src/if_mzsch.c, src/if_perl.xs, src/if_ruby.c, src/version.c\n\nPatch 7.4.1864\nProblem:    Python: encoding error with Python 2.\nSolution:   Use \"getcwdu\" instead of \"getcwd\". (Ken Takata)\nFiles:      src/if_py_both.h\n\nPatch 7.4.1865\nProblem:    Memory leaks in test49. (Dominique Pelle)\nSolution:   Use NULL instead of an empty string.\nFiles:      src/eval.c\n\nPatch 7.4.1866\nProblem:    Invalid memory access when exiting with EXITFREE defined.\n            (Dominique Pelle)\nSolution:   Set \"really_exiting\" and skip error messages.\nFiles:      src/misc2.c, src/eval.c\n\nPatch 7.4.1867\nProblem:    Memory leak in test_matchstrpos.\nSolution:   Free the string before overwriting. (Yegappan Lakshmanan)\nFiles:      src/eval.c\n\nPatch 7.4.1868\nProblem:    Setting really_exiting causes memory leaks to be reported.\nSolution:   Add the in_free_all_mem flag.\nFiles:      src/globals.h, src/misc2.c, src/eval.c\n\nPatch 7.4.1869\nProblem:    Can't build with old version of Perl.\nSolution:   Define PERLIO_FUNCS_DECL. (Tom G. Christensen)\nFiles:      src/if_perl.xs\n\nPatch 7.4.1870 (after 7.4.1863)\nProblem:    One more Win64 compiler warning.\nSolution:   Change declared argument type. (Ken Takata)\nFiles:      src/if_mzsch.c\n\nPatch 7.4.1871\nProblem:    Appending to the quickfix list while the quickfix window is open\n            is very slow.\nSolution:   Do not delete all the lines, only append the new ones.  Avoid\n            using a window while updating the list. (closes #841)\nFiles:      src/quickfix.c\n\nPatch 7.4.1872\nProblem:    Still build problem with old version of Perl.\nSolution:   Also define SvREFCNT_inc_void_NN if needed. (Tom G. Christensen)\nFiles:      src/if_perl.xs\n\nPatch 7.4.1873\nProblem:    When a callback adds a timer the GUI doesn't use it until later.\n            (Ramel Eshed)\nSolution:   Return early if a callback adds a timer.\nFiles:      src/ex_cmds2.c, src/gui_gtk_x11.c, src/gui_w32.c, src/gui_x11.c,\n            src/globals.h\n\nPatch 7.4.1874\nProblem:    Unused variable in Win32 code.\nSolution:   Remove it. (Mike Williams)\nFiles:      src/gui_w32.c\n\nPatch 7.4.1875\nProblem:    Comparing functions and partials doesn't work well.\nSolution:   Add tests. (Nikolai Pavlov)  Compare the dict and arguments in the\n            partial. (closes #813)\nFiles:      src/eval.c, src/testdir/test_partial.vim\n\nPatch 7.4.1876\nProblem:    Typing \"k\" at the hit-enter prompt has no effect.\nSolution:   Don't assume recursive use of the prompt if a character was typed.\n            (Hirohito Higashi)\nFiles:      src/message.c\n\nPatch 7.4.1877\nProblem:    No test for invoking \"close_cb\" when writing to a buffer.\nSolution:   Add using close_cb to a test case.\nFiles:      src/testdir/test_channel.vim\n\nPatch 7.4.1878\nProblem:    Whether a job has exited isn't detected until a character is\n            typed.  After calling exit_cb the cursor is in the wrong place.\nSolution:   Don't wait forever for a character to be typed when there is a\n            pending job.  Update the screen if needed after calling exit_cb.\nFiles:      src/os_unix.c, src/channel.c, src/proto/channel.pro\n\nPatch 7.4.1879 (after 7.4.1877)\nProblem:    Channel test is flaky.\nSolution:   Wait for close_cb to be invoked.\nFiles:      src/testdir/test_channel.vim\n\nPatch 7.4.1880\nProblem:    MS-Windows console build defaults to not having +channel.\nSolution:   Include the channel feature if building with huge features.\nFiles:      src/Make_mvc.mak\n\nPatch 7.4.1881\nProblem:    Appending to a long quickfix list is slow.\nSolution:   Add qf_last.\nFiles:      src/quickfix.c\n\nPatch 7.4.1882\nProblem:    Check for line break at end of line wrong. (Dominique Pelle)\nSolution:   Correct the logic.\nFiles:      src/quickfix.c\n\nPatch 7.4.1883\nProblem:    Cppcheck found 2 incorrect printf formats.\nSolution:   Use %ld and %lx. (Dominique Pelle)\nFiles:      src/VisVim/Commands.cpp, src/gui_mac.c\n\nPatch 7.4.1884\nProblem:    Updating marks in a quickfix list is very slow when the list is\n            long.\nSolution:   Only update marks if the buffer has a quickfix entry.\nFiles:      src/structs.h, src/quickfix.c\n\nPatch 7.4.1885\nProblem:    MinGW console build defaults to not having +channel.\nSolution:   Include the channel feature if building with huge features. (Ken\n            Takata)\nFiles:      src/Make_cyg_ming.mak\n\nPatch 7.4.1886\nProblem:    When waiting for a character is interrupted by receiving channel\n            data and the first character of a mapping was typed, the mapping\n            times out. (Ramel Eshed)\nSolution:   When dealing with channel data don't return from mch_inchar().\nFiles:      src/getchar.c, src/proto/getchar.pro, src/os_unix.c\n\nPatch 7.4.1887\nProblem:    When receiving channel data 'updatetime' is not respected.\nSolution:   Recompute the waiting time after being interrupted.\nFiles:      src/os_unix.c\n\nPatch 7.4.1888\nProblem:    Wrong computation of remaining wait time in RealWaitForChar()\nSolution:   Remember the original waiting time.\nFiles:      src/os_unix.c\n\nPatch 7.4.1889\nProblem:    When umask is set to 0177 Vim can't create temp files. (Lcd)\nSolution:   Also correct umask when using mkdtemp().\nFiles:      src/fileio.c\n\nPatch 7.4.1890\nProblem:    GUI: When channel data is received the cursor blinking is\n            interrupted.  (Ramel Eshed)\nSolution:   Don't update the cursor when it is blinking.\nFiles:      src/screen.c, src/gui_gtk_x11.c, src/proto/gui_gtk_x11.pro,\n            src/gui_mac.c, src/proto/gui_mac.pro, src/gui_photon.c,\n            src/proto/gui_photon.pro, src/gui_w32.c, src/proto/gui_w32.pro,\n            src/gui_x11.c, src/proto/gui_x11.pro\n\nPatch 7.4.1891\nProblem:    Channel reading very long lines is slow.\nSolution:   Collapse multiple buffers until a NL is found.\nFiles:      src/channel.c, src/netbeans.c, src/proto/channel.pro,\n            src/structs.h\n\nPatch 7.4.1892\nProblem:    balloon eval only gets the window number, not the ID.\nSolution:   Add v:beval_winid.\nFiles:      src/eval.c, src/gui_beval.c, src/vim.h\n\nPatch 7.4.1893\nProblem:    Cannot easily get the window ID for a buffer.\nSolution:   Add bufwinid().\nFiles:      src/eval.c, runtime/doc/eval.txt\n\nPatch 7.4.1894\nProblem:    Cannot get the window ID for a mouse click.\nSolution:   Add v:mouse_winid.\nFiles:      src/eval.c, src/vim.h, runtime/doc/eval.txt\n\nPatch 7.4.1895\nProblem:    Cannot use a window ID where a window number is expected.\nSolution:   Add LOWEST_WIN_ID, so that the window ID can be used where a\n            number is expected.\nFiles:      src/window.c, src/eval.c, src/vim.h, runtime/doc/eval.txt,\n            src/testdir/test_window_id.vim\n\nPatch 7.4.1896\nProblem:    Invoking mark_adjust() when adding a new line below the last line\n            is pointless.\nSolution:   Skip calling mark_adjust() when appending below the last line.\nFiles:      src/misc1.c, src/ops.c\n\nPatch 7.4.1897\nProblem:    Various typos, long lines and style mistakes.\nSolution:   Fix the typos, wrap lines, improve style.\nFiles:      src/buffer.c, src/ex_docmd.c, src/getchar.c, src/option.c,\n            src/main.aap, src/testdir/README.txt,\n            src/testdir/test_reltime.vim, src/testdir/test_tagjump.vim,\n            src/INSTALL, src/config.aap.in, src/if_mzsch.c\n\nPatch 7.4.1898\nProblem:    User commands don't support modifiers.\nSolution:   Add the <mods> item. (Yegappan Lakshmanan, closes #829)\nFiles:      runtime/doc/map.txt, src/ex_docmd.c, src/testdir/Make_all.mak,\n            src/testdir/test_usercommands.vim\n\nPatch 7.4.1899\nProblem:    GTK 3: cursor blinking doesn't work well.\nSolution:   Instead of gui_gtk_window_clear() use gui_mch_clear_block().\n            (Kazunobu Kuriyama)\nFiles:      src/gui_gtk_x11.c\n\nPatch 7.4.1900\nProblem:    Using CTRL-] in the help on \"{address}.\" doesn't work.\nSolution:   Recognize an item in {}. (Hirohito Higashi, closes #814)\nFiles:      src/ex_cmds.c, src/testdir/test_help_tagjump.vim\n\nPatch 7.4.1901\nProblem:    Win32: the \"Disabled\" menu items would appear enabled.\nSolution:   Use submenu_id if there is a parent. (Shane Harper, closes #834)\nFiles:      src/gui_w32.c\n\nPatch 7.4.1902\nProblem:    No test for collapsing buffers for a channel.  Some text is lost.\nSolution:   Add a simple test.  Set rq_buflen correctly.\nFiles:      src/channel.c, src/testdir/test_channel.vim,\n            src/testdir/test_channel_pipe.py\n\nPatch 7.4.1903\nProblem:    When writing viminfo merging current history with history in\n            viminfo may drop recent history entries.\nSolution:   Add new format for viminfo lines, use it for history entries.  Use\n            a timestamp for ordering the entries. Add test_settime().\n            Add the viminfo version.  Does not do merging on timestamp yet.\nFiles:      src/eval.c, src/ex_getln.c, src/ex_cmds.c, src/structs.h,\n            src/globals.h, src/proto/ex_cmds.pro, src/proto/ex_getln.pro,\n            src/testdir/test_viminfo.vim\n\nPatch 7.4.1904 (after 7.4.1903)\nProblem:    Build fails.\nSolution:   Add missing changes.\nFiles:      src/vim.h\n\nPatch 7.4.1905 (after 7.4.1903)\nProblem:    Some compilers can't handle a double semicolon.\nSolution:   Remove one semicolon.\nFiles:      src/ex_cmds.c\n\nPatch 7.4.1906\nProblem:    Collapsing channel buffers and searching for NL does not work\n            properly. (Xavier de Gaye, Ramel Eshed)\nSolution:   Do not assume the buffer contains a NUL or not.  Change NUL bytes\n            to NL to avoid the string is truncated.\nFiles:      src/channel.c, src/netbeans.c, src/proto/channel.pro\n\nPatch 7.4.1907\nProblem:    Warnings from 64 bit compiler.\nSolution:   Change type to size_t. (Mike Williams)\nFiles:      src/ex_cmds.c\n\nPatch 7.4.1908\nProblem:    Netbeans uses uninitialized pointer and freed memory.\nSolution:   Set \"buffer\" at the right place (hint by Ken Takata)\nFiles:      src/netbeans.c\n\nPatch 7.4.1909\nProblem:    Doubled semicolons.\nSolution:   Reduce to one. (Dominique Pelle)\nFiles:      src/dosinst.c, src/fold.c, src/gui_gtk_x11.c, src/gui_w32.c,\n            src/main.c, src/misc2.c\n\nPatch 7.4.1910\nProblem:    Tests using external command to delete directory.\nSolution:   Use delete().\nFiles:      src/testdir/test17.in, src/testdir/test73.in,\n            src/testdir/test_getcwd.in\n\nPatch 7.4.1911\nProblem:    Recent history lines may be lost when exiting Vim.\nSolution:   Merge history using the timestamp.\nFiles:      src/ex_getln.c, src/ex_cmds.c, src/vim.h, src/proto/ex_getln.pro,\n            src/testdir/test_viminfo.vim\n\nPatch 7.4.1912\nProblem:    No test for using setqflist() on an older quickfix list.\nSolution:   Add a couple of tests.\nFiles:      src/testdir/test_quickfix.vim\n\nPatch 7.4.1913\nProblem:    When \":doautocmd\" is used modelines are used even when no\n            autocommands were executed. (Daniel Hahler)\nSolution:   Skip processing modelines. (closes #854)\nFiles:      src/fileio.c, src/ex_cmds.c, src/ex_docmd.c, src/proto/fileio.pro\n\nPatch 7.4.1914\nProblem:    Executing autocommands while using the signal stack has a high\n            chance of crashing Vim.\nSolution:   Don't invoke autocommands when on the signal stack.\nFiles:      src/os_unix.c\n\nPatch 7.4.1915\nProblem:    The effect of the PopupMenu autocommand isn't directly visible.\nSolution:   Call gui_update_menus() before displaying the popup menu. (Shane\n            Harper, closs #855)\nFiles:      src/menu.c\n\nPatch 7.4.1916 (after 7.4.1906)\nProblem:    No proper test for what 7.4.1906 fixes.\nSolution:   Add a test for reading many lines.\nFiles:      src/testdir/test_channel.vim\n\nPatch 7.4.1917\nProblem:    History lines read from viminfo in different encoding than when\n            writing are not converted.\nSolution:   Convert the history lines.\nFiles:      src/ex_cmds.c, src/testdir/test_viminfo.vim\n\nPatch 7.4.1918\nProblem:    Not enough testing for parsing viminfo lines.\nSolution:   Add test with viminfo lines in bad syntax.  Fix memory leak.\nFiles:      src/ex_cmds.c, src/ex_getln.c, src/testdir/test_viminfo.vim\n\nPatch 7.4.1919\nProblem:    Register contents is not merged when writing viminfo.\nSolution:   Use timestamps for register contents.\nFiles:      src/ops.c, src/ex_getln.c, src/ex_cmds.c, src/proto/ex_cmds.pro,\n            src/proto/ex_getln.pro, src/proto/ops.pro, src/vim.h\n\nPatch 7.4.1920 (after 7.4.1919)\nProblem:    Missing test changes.\nSolution:   Update viminfo test.\nFiles:      src/testdir/test_viminfo.vim\n\nPatch 7.4.1921 (after 7.4.1919)\nProblem:    vim_time() not included when needed.\nSolution:   Adjust #ifdef.\nFiles:      src/ex_cmds.c\n\nPatch 7.4.1922\nProblem:    Ruby 2.4.0 unifies Fixnum and Bignum into Integer.\nSolution:   Use rb_cInteger. (Weiyong Mao)\nFiles:      src/if_ruby.c\n\nPatch 7.4.1923\nProblem:    Command line editing is not tested much.\nSolution:   Add tests for expanding the file name and 'wildmenu'.\nFiles:      src/testdir/test_cmdline.vim, src/testdir/Make_all.mak\n\nPatch 7.4.1924\nProblem:    Missing \"void\" for functions without argument.\nSolution:   Add \"void\". (Hirohito Higashi)\nFiles:      src/channel.c, src/edit.c, src/ex_cmds2.c, src/ops.c, src/screen.c\n\nPatch 7.4.1925\nProblem:    Viminfo does not merge file marks properly.\nSolution:   Use a timestamp.  Add the :clearjumps command.\nFiles:      src/mark.c, src/ex_cmds.c, src/ex_docmd.c, src/proto/mark.pro,\n            src/structs.h, src/vim.h, src/ex_cmds.h,\n            src/testdir/test_viminfo.vim\n\nPatch 7.4.1926\nProblem:    Possible crash with many history items.\nSolution:   Avoid the index going past the last item.\nFiles:      src/ex_getln.c\n\nPatch 7.4.1927\nProblem:    Compiler warning for signed/unsigned.\nSolution:   Add type cast.\nFiles:      src/if_mzsch.c\n\nPatch 7.4.1928\nProblem:    Overwriting pointer argument.\nSolution:   Assign to what it points to. (Dominique Pelle)\nFiles:      src/fileio.c\n\nPatch 7.4.1929\nProblem:    Inconsistent indenting and weird name.\nSolution:   Fix indent, make name all upper case. (Ken Takata)\nFiles:      src/if_ruby.c\n\nPatch 7.4.1930\nProblem:    Can't build without +spell but with +quickfix. (Charles)\nSolution:   Add better #ifdef around ml_append_buf(). (closes #864)\nFiles:      src/memline.c\n\nPatch 7.4.1931\nProblem:    Using both old and new style file mark lines from viminfo.\nSolution:   Skip the old style lines if the viminfo file was written with a\n            Vim version that supports the new style.\nFiles:      src/ex_cmds.c\n\nPatch 7.4.1932\nProblem:    When writing viminfo the jumplist is not merged with the one in\n            the viminfo file.\nSolution:   Merge based on timestamp.\nFiles:      src/mark.c, src/testdir/test_viminfo.vim\n\nPatch 7.4.1933\nProblem:    Compiler warning about uninitialized variable. (Yegappan)\nSolution:   Give it a dummy value.\nFiles:      src/ex_getln.c\n\nPatch 7.4.1934\nProblem:    New style tests not executed with MinGW compiler.\nSolution:   Add new style test support. (Yegappan Lakshmanan)\nFiles:      src/testdir/Make_ming.mak\n\nPatch 7.4.1935\nProblem:    When using the GUI search/replace a second match right after the\n            replacement is skipped.\nSolution:   Add the SEARCH_START flag. (Mleddy)\nFiles:      src/gui.c\n\nPatch 7.4.1936\nProblem:    Off-by-one error in bounds check. (Coverity)\nSolution:   Check register number properly.\nFiles:      src/ops.c\n\nPatch 7.4.1937\nProblem:    No test for directory stack in quickfix.\nSolution:   Add a test. (Yegappan Lakshmanan)\nFiles:      src/testdir/test_quickfix.vim\n\nPatch 7.4.1938\nProblem:    When writing viminfo numbered marks were duplicated.\nSolution:   Check for duplicates between current numbered marks and the ones\n            read from viminfo.\nFiles:      src/mark.c\n\nPatch 7.4.1939\nProblem:    Memory access error when reading viminfo. (Dominique Pelle)\nSolution:   Correct index in jumplist when at the end.\nFiles:      src/mark.c, src/testdir/test_viminfo.vim\n\nPatch 7.4.1940\nProblem:    \"gd\" hangs in some situations. (Eric Biggers)\nSolution:   Remove the SEARCH_START flag when looping.  Add a test.\nFiles:      src/normal.c, src/testdir/test_goto.vim\n\nPatch 7.4.1941\nProblem:    Not all quickfix tests are also done with the location lists.\nSolution:   Test more quickfix code.  Use user commands instead of \"exe\".\n            (Yegappan Lakshmanan)\nFiles:      src/testdir/test_quickfix.vim\n\nPatch 7.4.1942\nProblem:    Background is not drawn properly when 'termguicolors' is set.\nSolution:   Check cterm_normal_bg_color. (Jacob Niehus, closes #805)\nFiles:      src/screen.c\n\nPatch 7.4.1943\nProblem:    Coverity warns for unreachable code.\nSolution:   Remove the code that won't do anything.\nFiles:      src/mark.c\n\nPatch 7.4.1944\nProblem:    Win32: Cannot compile with XPM feature using VC2015\nSolution:   Add XPM libraries compiled with VC2015, and enable to build\n            gvim.exe which supports XPM using VC2015. (Ken Takata)\nFiles:      src/Make_mvc.mak, src/xpm/x64/lib-vc14/libXpm.lib,\n            src/xpm/x86/lib-vc14/libXpm.lib\n\nPatch 7.4.1945\nProblem:    The Man plugin doesn't work that well.\nSolution:   Use \"g:ft_man_open_mode\" to be able open man pages in vert split\n            or separate tab. Set nomodifiable for buffer with man content. Add\n            a test. (Andrey Starodubtsev, closes #873)\nFiles:      runtime/ftplugin/man.vim, src/testdir/test_man.vim,\n            src/testdir/Make_all.mak\n\nPatch 7.4.1946 (after 7.4.1944)\nProblem:    File list does not include new XPM libraries.\nSolution:   Add the file list entries.\nFiles:      Filelist\n\nPatch 7.4.1947\nProblem:    Viminfo continuation line with wrong length isn't skipped. (Marius\n            Gedminas)\nSolution:   Skip a line when encountering an error, but not two lines.\nFiles:      src/ex_cmds.c\n\nPatch 7.4.1948\nProblem:    Using Ctrl-A with double-byte encoding may result in garbled text.\nSolution:   Skip to the start of a character. (Hirohito Higashi)\nFiles:      src/ops.c\n\nPatch 7.4.1949\nProblem:    Minor problems with the quickfix code.\nSolution:   Fix the problems. (Yegappan Lakshmanan)\nFiles:      src/quickfix.c, src/testdir/test_quickfix.vim\n\nPatch 7.4.1950\nProblem:    Quickfix long lines test not executed for buffer.\nSolution:   Call the function to test long lines. (Yegappan Lakshmanan)\nFiles:      src/testdir/test_quickfix.vim\n\nPatch 7.4.1951\nProblem:    Ruby test is old style.\nSolution:   Convert to a new style test. (Ken Takata)\nFiles:      src/Makefile, src/testdir/Make_all.mak, src/testdir/test_ruby.in,\n            src/testdir/test_ruby.ok, src/testdir/test_ruby.vim\n\nPatch 7.4.1952\nProblem:    Cscope interface does not support finding assignments.\nSolution:   Add the \"a\" command. (ppettina, closes #882)\nFiles:      runtime/doc/if_cscop.txt, src/if_cscope.c\n\nPatch 7.4.1953\nProblem:    Not all parts of the quickfix code are tested.\nSolution:   Add more tests. (Yegappan Lakshmanan)\nFiles:      src/testdir/samples/quickfix.txt,\n            src/testdir/test_quickfix.vim\n\nPatch 7.4.1954 (after 7.4.1948)\nProblem:    No test for what 7.4.1948 fixes.\nSolution:   Add a test. (Hirohito Higashi, closes #880)\nFiles:      src/Makefile, src/testdir/Make_all.mak,\n            src/testdir/test_increment_dbcs.vim\n\nPatch 7.4.1955\nProblem:    Using 32-bit Perl with 64-bit time_t causes memory corruption.\n            (Christian Brabandt)\nSolution:   Use time_T instead of time_t for global variables. (Ken Takata)\nFiles:      src/ex_cmds.c, src/globals.h, src/misc2.c, src/proto/ex_cmds.pro,\n            src/proto/misc2.pro, src/structs.h, src/vim.h\n\nPatch 7.4.1956\nProblem:    When using CTRL-W f and pressing \"q\" at the ATTENTION dialog the\n            newly opened window is not closed.\nSolution:   Close the window and go back to the original one. (Norio Takagi,\n            Hirohito Higashi)\nFiles:      src/window.c, src/testdir/test_window_cmd.vim\n\nPatch 7.4.1957\nProblem:    Perl interface has obsolete workaround.\nSolution:   Remove the workaround added by 7.3.623. (Ken Takata)\nFiles:      src/if_perl.xs\n\nPatch 7.4.1958\nProblem:    Perl interface preprocessor statements not nicely indented.\nSolution:   Improve the indenting. (Ken Takata)\nFiles:      src/if_perl.xs\n\nPatch 7.4.1959\nProblem:    Crash when running test_channel.vim on Windows.\nSolution:   Check for NULL pointer result from FormatMessage(). (Christian\n            Brabandt)\nFiles:      src/channel.c\n\nPatch 7.4.1960\nProblem:    Unicode standard 9 was released.\nSolution:   Update the character property tables. (Christian Brabandt)\nFiles:      src/mbyte.c\n\nPatch 7.4.1961\nProblem:    When 'insertmode' is reset while doing completion the popup menu\n            remains even though Vim is in Normal mode.\nSolution:   Ignore stop_insert_mode when the popup menu is visible.  Don't set\n            stop_insert_mode when 'insertmode' was already off. (Christian\n            Brabandt)\nFiles:      src/edit.c, src/option.c, src/Makefile, src/testdir/test_alot.vim,\n            src/testdir/test_popup.vim\n\nPatch 7.4.1962\nProblem:    Two test files for increment/decrement.\nSolution:   Move the old style test into the new style test. (Hirohito\n            Higashi, closes #881)\nFiles:      src/Makefile, src/testdir/Make_all.mak, src/testdir/main.aap,\n            src/testdir/test35.in, src/testdir/test35.ok,\n            src/testdir/test_increment.vim\n\nPatch 7.4.1963\nProblem:    Running Win32 Vim in mintty does not work.\nSolution:   Detect mintty and give a helpful error message. (Ken Takata)\nFiles:      src/Make_cyg_ming.mak, src/Make_mvc.mak, src/iscygpty.c,\n            src/iscygpty.h, src/main.c, Filelist\n\nPatch 7.4.1964\nProblem:    The quickfix init function is too big.\nSolution:   Factor out parsing 'errorformat' to a separate function. (Yegappan\n            Lakshmanan)\nFiles:      src/quickfix.c\n\nPatch 7.4.1965\nProblem:    When using a job in raw mode to append to a buffer garbage\n            characters are added.\nSolution:   Do not replace the trailing NUL with a NL. (Ozaki Kiichi)\nFiles:      src/channel.c, src/testdir/test_channel.vim\n\nPatch 7.4.1966\nProblem:    Coverity reports a resource leak.\nSolution:   Close \"fd\" also when bailing out.\nFiles:      src/quickfix.c\n\nPatch 7.4.1967\nProblem:    Falling back from NFA to old regexp engine does not work properly.\n            (fritzophrenic)\nSolution:   Do not restore nfa_match. (Christian Brabandt, closes #867)\nFiles:      src/regexp_nfa.c, src/testdir/test64.in, src/testdir/test64.ok\n\nPatch 7.4.1968\nProblem:    Invalid memory access with \"\\<C-\">.\nSolution:   Do not recognize this as a special character. (Dominique Pelle)\nFiles:      src/misc2.c, src/testdir/test_expr.vim\n\nPatch 7.4.1969\nProblem:    When the netbeans channel is closed consuming the buffer may cause\n            a crash.\nSolution:   Check for nb_channel not to be NULL. (Xavier de Gaye)\nFiles:      src/netbeans.c\n\nPatch 7.4.1970\nProblem:    Using \":insert\" in an empty buffer sets the jump mark. (Ingo\n            Karkat)\nSolution:   Don't adjust marks when replacing the empty line in an empty\n            buffer. (closes #892)\nFiles:      src/ex_cmds.c, src/testdir/test_jumps.vim,\n            src/testdir/test_alot.vim\n\nPatch 7.4.1971\nProblem:    It is not easy to see unrecognized error lines below the current\n            error position.\nSolution:   Add \":clist +count\".\nFiles:      src/quickfix.c, runtime/doc/quickfix.txt\n\nPatch 7.4.1972\nProblem:    On Solaris select() does not work as expected when there is\n            typeahead.\nSolution:   Add ICANON when sleeping. (Ozaki Kiichi)\nFiles:      src/os_unix.c\n\nPatch 7.4.1973\nProblem:    On MS-Windows the package directory may be added at the end\n            because of forward/backward slash differences. (Matthew\n            Desjardins)\nSolution:   Ignore slash differences.\nFiles:      src/ex_cmds2.c\n\nPatch 7.4.1974\nProblem:    GUI has a problem with some termcodes.\nSolution:   Handle negative numbers. (Kazunobu Kuriyama)\nFiles:      src/gui.c\n\nPatch 7.4.1975\nProblem:    On MS-Windows large files (> 2Gbyte) cause problems.\nSolution:   Use \"off_T\" instead of \"off_t\".  Use \"stat_T\" instead of \"struct\n            stat\".  Use 64 bit system functions if available.  (Ken Takata)\nFiles:      src/Makefile, src/buffer.c, src/diff.c, src/eval.c, src/ex_cmds.c,\n            src/ex_cmds2.c, src/fileio.c, src/gui.c, src/gui_at_fs.c,\n            src/if_cscope.c, src/main.c, src/memfile.c, src/memline.c,\n            src/misc1.c, src/misc2.c, src/netbeans.c, src/os_mswin.c,\n            src/os_win32.c, src/proto/fileio.pro, src/proto/memline.pro,\n            src/proto/os_mswin.pro, src/pty.c, src/quickfix.c, src/spell.c,\n            src/structs.h, src/tag.c, src/testdir/Make_all.mak,\n            src/testdir/test_largefile.vim, src/testdir/test_stat.vim,\n            src/undo.c, src/vim.h\n\nPatch 7.4.1976\nProblem:    Number variables are not 64 bits while they could be.\nSolution:   Add the num64 feature. (Ken Takata, Yasuhiro Matsumoto)\nFiles:      runtime/doc/eval.txt, runtime/doc/various.txt,\n            src/Make_cyg_ming.mak, src/Make_mvc.mak, src/charset.c,\n            src/eval.c, src/ex_cmds.c, src/ex_getln.c, src/feature.h,\n            src/fileio.c, src/fold.c, src/json.c, src/message.c, src/misc1.c,\n            src/misc2.c, src/ops.c, src/option.c, src/proto/charset.pro,\n            src/proto/eval.pro, src/quickfix.c, src/structs.h,\n            src/testdir/test_viml.vim, src/version.c\n\nPatch 7.4.1977\nProblem:    With 64 bit changes don't need three calls to sprintf().\nSolution:   Simplify the code, use vim_snprintf(). (Ken Takata)\nFiles:      src/fileio.c\n\nPatch 7.4.1978 (after 7.4.1975)\nProblem:    Large file test does not delete its output.\nSolution:   Delete the output. Check size properly when possible. (Ken Takata)\nFiles:      src/testdir/test_largefile.vim\n\nPatch 7.4.1979 (after 7.4.1976)\nProblem:    Getting value of binary option is wrong. (Kent Sibilev)\nSolution:   Fix type cast.  Add a test.\nFiles:      src/option.c, src/testdir/test_expr.vim\n\nPatch 7.4.1980\nProblem:    'errorformat' is parsed for every call to \":caddexpr\".  Can't add\n            to two location lists asynchronously.\nSolution:   Keep the previously parsed data when appropriate. (mostly by\n            Yegappan Lakshmanan)\nFiles:      src/quickfix.c, src/testdir/test_quickfix.vim\n\nPatch 7.4.1981\nProblem:    No testing for Farsi code.\nSolution:   Add a minimal test.  Clean up Farsi code.\nFiles:      src/farsi.c, src/Makefile, src/charset.c, src/normal.c,\n            src/proto/main.pro, src/testdir/Make_all.mak,\n            src/testdir/test_farsi.vim\n\nPatch 7.4.1982\nProblem:    Viminfo file contains duplicate change marks.\nSolution:   Drop duplicate marks.\nFiles:      src/mark.c\n\nPatch 7.4.1983\nProblem:    farsi.c and arabic.c are included in a strange way.\nSolution:   Build them like other files.\nFiles:      src/main.c, src/farsi.c, src/arabic.c, src/proto.h,\n            src/proto/main.pro, src/proto/farsi.pro, src/proto/arabic.pro,\n            src/Makefile, src/Make_bc5.mak, src/Make_cyg_ming.mak,\n            src/Make_dice.mak, src/Make_ivc.mak, src/Make_manx.mak,\n            src/Make_morph.mak, src/Make_mvc.mak, src/Make_sas.mak,\n            Filelist\n\nPatch 7.4.1984\nProblem:    Not all quickfix features are tested.\nSolution:   Add a few more tests. (Yegappan Lakshmanan)\nFiles:      src/testdir/test_quickfix.vim\n\nPatch 7.4.1985 (after 7.4.1983)\nProblem:    Missing changes in VMS build file.\nSolution:   Use the right file name.\nFiles:      src/Make_vms.mms\n\nPatch 7.4.1986\nProblem:    Compiler warns for loss of data.\nSolution:   Use size_t instead of int. (Christian Brabandt)\nFiles:      src/ex_cmds2.c\n\nPatch 7.4.1987\nProblem:    When copying unrecognized lines for viminfo, end up with useless\n            continuation lines.\nSolution:   Skip continuation lines.\nFiles:      src/ex_cmds.c\n\nPatch 7.4.1988\nProblem:    When updating viminfo with file marks there is no time order.\nSolution:   Remember the time when a buffer was last used, store marks for\n            the most recently used buffers.\nFiles:      src/buffer.c, src/structs.h, src/mark.c, src/main.c,\n            src/ex_cmds.c, src/proto/mark.pro, src/testdir/test_viminfo.vim\n\nPatch 7.4.1989\nProblem:    filter() and map() only accept a string argument.\nSolution:   Implement using a Funcref argument (Yasuhiro Matsumoto, Ken\n            Takata)\nFiles:      runtime/doc/eval.txt, src/Makefile, src/eval.c,\n            src/testdir/test_alot.vim, src/testdir/test_filter_map.vim,\n            src/testdir/test_partial.vim\n\nPatch 7.4.1990 (after 7.4.1952)\nProblem:    Cscope items are not sorted.\nSolution:   Put the new \"a\" command first. (Ken Takata)\nFiles:      src/if_cscope.c\n\nPatch 7.4.1991\nProblem:    glob() does not add a symbolic link when there are no wildcards.\nSolution:   Remove the call to mch_getperm().\nFiles:      src/misc1.c\n\nPatch 7.4.1992\nProblem:    Values for true and false can be confusing.\nSolution:   Update the documentation.  Add a test.  Make v:true evaluate to\n            TRUE for a non-zero-arg.\nFiles:      runtime/doc/eval.txt, src/eval.c, src/Makefile,\n            src/testdir/test_true_false.vim, src/testdir/test_alot.vim\n\nPatch 7.4.1993\nProblem:    Not all TRUE and FALSE arguments are tested.\nSolution:   Add a few more tests.\nFiles:      src/testdir/test_true_false.vim\n\nPatch 7.4.1994 (after 7.4.1993)\nProblem:    True-false test fails.\nSolution:   Filter the dict to only keep the value that matters.\nFiles:      src/testdir/test_true_false.vim\n\nPatch 7.4.1995\nProblem:    GUI: cursor drawn in wrong place if a timer callback causes a\n            screen update. (David Samvelyan)\nSolution:   Also redraw the cursor when it's blinking and on.\nFiles:      src/gui_gtk_x11.c, src/gui_mac.c, src/gui_photon.c, src/gui_w32.c,\n            src/gui_x11.c, src/screen.c, src/proto/gui_gtk_x11.pro,\n            src/proto/gui_mac.pro, src/proto/gui_photon.pro,\n            src/proto/gui_w32.pro, src/proto/gui_x11.pro\n\nPatch 7.4.1996\nProblem:    Capturing the output of a command takes a few commands.\nSolution:   Add evalcmd().\nFiles:      src/eval.c, runtime/doc/eval.txt, src/testdir/test_alot.vim,\n            src/Makefile, src/testdir/test_evalcmd.vim\n\nPatch 7.4.1997\nProblem:    Cannot easily scroll the quickfix window.\nSolution:   Add \":cbottom\".\nFiles:      src/ex_cmds.h, src/quickfix.c, src/proto/quickfix.pro,\n            src/ex_docmd.c, src/testdir/test_quickfix.vim,\n            runtime/doc/quickfix.txt\n\nPatch 7.4.1998\nProblem:    When writing buffer lines to a job there is no NL to NUL\n            conversion.\nSolution:   Make it work symmetrical with writing lines from a job into a\n            buffer.\nFiles:      src/channel.c, src/proto/channel.pro, src/netbeans.c\n\nPatch 7.4.1999\nProblem:    evalcmd() doesn't work recursively.\nSolution:   Use redir_evalcmd instead of redir_vname.\nFiles:      src/message.c, src/eval.c, src/globals.h, src/proto/eval.pro,\n            src/testdir/test_evalcmd.vim\n\nPatch 7.4.2000 (after 7.4.1999)\nProblem:    Evalcmd test fails.\nSolution:   Add missing piece.\nFiles:      src/ex_docmd.c\n\nPatch 7.4.2001 (after 7.4.2000)\nProblem:    Tiny build fails. (Tony Mechelynck)\nSolution:   Add #ifdef.\nFiles:      src/ex_docmd.c\n\nPatch 7.4.2002\nProblem:    Crash when passing number to filter() or map().\nSolution:   Convert to a string. (Ozaki Kiichi)\nFiles:      src/eval.c, src/testdir/test_filter_map.vim\n\nPatch 7.4.2003\nProblem:    Still cursor flickering when a callback updates the screen. (David\n            Samvelyan)\nSolution:   Put the cursor in the right position after updating the screen.\nFiles:      src/screen.c\n\nPatch 7.4.2004\nProblem:    GUI: cursor displayed in the wrong position.\nSolution:   Correct screen_cur_col and screen_cur_row.\nFiles:      src/screen.c\n\nPatch 7.4.2005\nProblem:    After using evalcmd() message output is in the wrong position.\n            (Christian Brabandt)\nSolution:   Reset msg_col.\nFiles:      src/eval.c\n\nPatch 7.4.2006\nProblem:    Crash when using tabnext in BufUnload autocmd. (Norio Takagi)\nSolution:   First check that the current buffer is the right one. (Hirohito\n            Higashi)\nFiles:      src/buffer.c, src/testdir/test_autocmd.vim\n\nPatch 7.4.2007\nProblem:    Running the tests leaves a viminfo file behind.\nSolution:   Make the viminfo option empty.\nFiles:      src/testdir/runtest.vim\n\nPatch 7.4.2008\nProblem:    evalcmd() has a confusing name.\nSolution:   Rename to execute().  Make silent optional.  Support a list of\n            commands.\nFiles:      src/eval.c, src/ex_docmd.c, src/message.c, src/globals.h,\n            src/proto/eval.pro, src/Makefile, src/testdir/test_evalcmd.vim,\n            src/testdir/test_execute_func.vim, src/testdir/test_alot.vim,\n            runtime/doc/eval.txt\n\nPatch 7.4.2009 (after 7.4.2008)\nProblem:    Messages test fails.\nSolution:   Don't set redir_execute before returning.  Add missing version\n            number.\nFiles:      src/eval.c\n\nPatch 7.4.2010\nProblem:    There is a :cbottom command but no :lbottom command.\nSolution:   Add :lbottom. (Yegappan Lakshmanan)\nFiles:      runtime/doc/index.txt, runtime/doc/quickfix.txt, src/ex_cmds.h,\n            src/quickfix.c, src/testdir/test_quickfix.vim\n\nPatch 7.4.2011\nProblem:    It is not easy to get a list of command arguments.\nSolution:   Add getcompletion(). (Yegappan Lakshmanan)\nFiles:      runtime/doc/eval.txt, src/eval.c, src/ex_docmd.c,\n            src/proto/ex_docmd.pro, src/testdir/test_cmdline.vim\n\nPatch 7.4.2012 (after 7.4.2011)\nProblem:    Test for getcompletion() does not pass on all systems.\nSolution:   Only test what is supported.\nFiles:      src/testdir/test_cmdline.vim\n\nPatch 7.4.2013\nProblem:    Using \"noinsert\" in 'completeopt' breaks redo.\nSolution:   Set compl_curr_match. (Shougo, closes #874)\nFiles:      src/edit.c, src/testdir/test_popup.vim\n\nPatch 7.4.2014\nProblem:    Using \"noinsert\" in 'completeopt' does not insert match.\nSolution:   Set compl_enter_selects. (Shougo, closes #875)\nFiles:      src/edit.c, src/testdir/test_popup.vim\n\nPatch 7.4.2015\nProblem:    When a file gets a name when writing it 'acd' is not effective.\n            (Dan Church)\nSolution:   Invoke DO_AUTOCHDIR after writing the file. (Allen Haim, closes\n            #777, closes #803)  Add test_autochdir() to enable 'acd' before\n            \"starting\" is reset.\nFiles:      src/ex_cmds.c, src/buffer.c, src/eval.c, src/globals.h,\n            src/Makefile, src/testdir/test_autochdir.vim,\n            src/testdir/Make_all.mak\n\nPatch 7.4.2016\nProblem:    Warning from MinGW about _WIN32_WINNT redefined. (John Marriott)\nSolution:   First undefine it. (Ken Takata)\nFiles:      src/Make_cyg_ming.mak\n\nPatch 7.4.2017\nProblem:    When there are many errors adding them to the quickfix list takes\n            a long time.\nSolution:   Add BLN_NOOPT.  Don't call buf_valid() in buf_copy_options().\n            Remember the last file name used.  When going through the buffer\n            list start from the end of the list.  Only call buf_valid() when\n            autocommands were executed.\nFiles:      src/buffer.c, src/option.c, src/quickfix.c, src/vim.h\n\nPatch 7.4.2018\nProblem:    buf_valid() can be slow when there are many buffers.\nSolution:   Add bufref_valid(), only go through the buffer list when a buffer\n            was freed.\nFiles:      src/structs.h, src/buffer.c, src/quickfix.c, src/proto/buffer.pro\n\nPatch 7.4.2019\nProblem:    When ignoring case utf_fold() may consume a lot of time.\nSolution:   Optimize for ASCII.\nFiles:      src/mbyte.c\n\nPatch 7.4.2020\nProblem:    Can't build without +autocmd feature.\nSolution:   Adjust #ifdefs.\nFiles:      src/buffer.c\n\nPatch 7.4.2021\nProblem:    Still too many buf_valid() calls.\nSolution:   Make au_new_curbuf a bufref.  Use bufref_valid() in more places.\nFiles:      src/ex_cmds.c, src/buffer.c, src/globals.h\n\nPatch 7.4.2022\nProblem:    Warnings from 64 bit compiler.\nSolution:   Add type casts. (Mike Williams)\nFiles:      src/eval.c\n\nPatch 7.4.2023\nProblem:    buflist_findname_stat() may find a dummy buffer.\nSolution:   Set the BF_DUMMY flag after loading a dummy buffer.  Start\n            finding buffers from the end of the list.\nFiles:      src/quickfix.c, src/buffer.c\n\nPatch 7.4.2024\nProblem:    More buf_valid() calls can be optimized.\nSolution:   Use bufref_valid() instead.\nFiles:      src/buffer.c, src/ex_cmds.c, src/structs.h, src/channel.c,\n            src/diff.c, src/eval.c, src/ex_cmds2.c, src/ex_docmd.c,\n            src/ex_getln.c, src/fileio.c, src/main.c, src/misc2.c,\n            src/netbeans.c, src/quickfix.c, src/spell.c, src/term.c,\n            src/if_py_both.h, src/window.c, src/proto/buffer.pro,\n            src/proto/window.pro\n\nPatch 7.4.2025\nProblem:    The cursor blinking stops or is irregular when receiving date over\n            a channel and writing it in a buffer, and when updating the status\n            line. (Ramel Eshed)\nSolution:   Make it a bit better by flushing GUI output.  Don't redraw the\n            cursor after updating the screen if the blink state is off.\nFiles:      src/gui_gtk_x11.c, src/screen.c\n\nPatch 7.4.2026\nProblem:    Reference counting for callbacks isn't right.\nSolution:   Add free_callback(). (Ken Takata)  Fix reference count.\nFiles:      src/channel.c, src/eval.c, src/ex_cmds2.c, src/proto/eval.pro\n\nPatch 7.4.2027\nProblem:    Can't build with +eval but without +menu.\nSolution:   Add #ifdef. (John Marriott)\nFiles:      src/eval.c\n\nPatch 7.4.2028\nProblem:    cppcheck warns for using index before limits check.\nSolution:   Swap the expressions. (Dominique Pelle)\nFiles:      src/mbyte.c\n\nPatch 7.4.2029\nProblem:    printf() does not work with 64 bit numbers.\nSolution:   use the \"L\" length modifier. (Ken Takata)\nFiles:      src/message.c, src/testdir/test_expr.vim\n\nPatch 7.4.2030\nProblem:    ARCH must be set properly when using MinGW.\nSolution:   Detect the default value of ARCH from the current compiler. (Ken\n            Takata)\nFiles:      src/Make_cyg_ming.mak\n\nPatch 7.4.2031\nProblem:    The list_lbr_utf8 test fails if ~/.vim/syntax/c.vim sets\n            'textwidth' to a non-zero value. (Oyvind A. Holm)\nSolution:   Add a setup.vim file that sets 'runtimepath' and $HOME to a safe\n            value. (partly by Christian Brabandt, closes #912)\nFiles:      src/testdir/setup.vim, src/testdir/amiga.vim, src/testdir/dos.vim,\n            src/testdir/unix.vim, src/testdir/vms.vim, src/testdir/runtest.vim\n\nPatch 7.4.2032 (after 7.4.2030)\nProblem:    Build fails with 64 bit MinGW. (Axel Bender)\nSolution:   Handle dash vs. underscore. (Ken Takata, Hirohito Higashi)\nFiles:      src/Make_cyg_ming.mak\n\nPatch 7.4.2033\nProblem:    'cscopequickfix' option does not accept new value \"a\".\nSolution:   Adjust list of command characters. (Ken Takata)\nFiles:      src/option.h, src/Makefile, src/testdir/test_cscope.vim,\n            src/testdir/Make_all.mak\n\nPatch 7.4.2034 (after 7.4.2032)\nProblem:    Build fails with some version of MinGW. (illusorypan)\nSolution:   Recognize mingw32. (Ken Takata, closes #921)\nFiles:      src/Make_cyg_ming.mak\n\nPatch 7.4.2035\nProblem:    On Solaris with ZFS the ACL may get removed.\nSolution:   Always restore the ACL for Solaris ZFS. (Danek Duvall)\nFiles:      src/fileio.c\n\nPatch 7.4.2036\nProblem:    Looking up a buffer by number is slow if there are many.\nSolution:   Use a hashtab.\nFiles:      src/structs.h, src/buffer.c\n\nPatch 7.4.2037 (after 7.4.2036)\nProblem:    Small build fails.\nSolution:   Adjust #ifdefs.\nFiles:      src/hashtab.c\n\nPatch 7.4.2038 (after 7.4.2036)\nProblem:    Small build still fails.\nSolution:   Adjust more #ifdefs.\nFiles:      src/globals.h, src/buffer.c\n\nPatch 7.4.2039\nProblem:    The Netbeans integration is not tested.\nSolution:   Add a first Netbeans test.\nFiles:      src/testdir/test_netbeans.vim, src/testdir/test_netbeans.py,\n            src/testdir/Make_all.mak, src/Makefile,\n            src/testdir/test_channel.vim, src/testdir/shared.vim\n\nPatch 7.4.2040\nProblem:    New files missing from distribution.\nSolution:   Add new test scripts.\nFiles:      Filelist\n\nPatch 7.4.2041\nProblem:    Netbeans file authentication not tested.\nSolution:   Add a test.\nFiles:      src/testdir/test_netbeans.vim\n\nPatch 7.4.2042\nProblem:    GTK: display updating is not done properly and can be slow.\nSolution:   Use gdk_display_flush() instead of gdk_display_sync(). Don't call\n            gdk_window_process_updates().  (Kazunobu Kuriyama)\nFiles:      src/gui_gtk_x11.c\n\nPatch 7.4.2043\nProblem:    setbuvfar() causes a screen redraw.\nSolution:   Only use aucmd_prepbuf() for options.\nFiles:      src/eval.c\n\nPatch 7.4.2044\nProblem:    filter() and map() either require a string or defining a function.\nSolution:   Support lambda, a short way to define a function that evaluates an\n            expression. (Yasuhiro Matsumoto, Ken Takata)\nFiles:      runtime/doc/eval.txt, src/eval.c, src/testdir/test_alot.vim,\n            src/Makefile, src/testdir/test_channel.vim,\n            src/testdir/test_lambda.vim\n\nPatch 7.4.2045\nProblem:    Memory leak when using a function callback.\nSolution:   Don't save the function name when it's in the partial.\nFiles:      src/channel.c\n\nPatch 7.4.2046\nProblem:    The qf_init_ext() function is too big.\nSolution:   Refactor it. (Yegappan Lakshmanan)\nFiles:      src/quickfix.c\n\nPatch 7.4.2047\nProblem:    Compiler warning for initializing a struct.\nSolution:   Initialize in another way. (Anton Lindqvist)\nFiles:      src/quickfix.c\n\nPatch 7.4.2048\nProblem:    There is still code and help for unsupported systems.\nSolution:   Remove the code and text. (Hirohito Higashi)\nFiles:      runtime/doc/eval.txt, runtime/lang/menu_sk_sk.vim,\n            runtime/menu.vim, runtime/optwin.vim, src/Make_bc5.mak,\n            src/ex_docmd.c, src/feature.h, src/fileio.c, src/globals.h,\n            src/main.c, src/memfile.c, src/memline.c, src/misc1.c,\n            src/misc2.c, src/option.c, src/option.h, src/os_unix.c,\n            src/os_unix.h, src/proto.h, src/term.c, src/undo.c, src/version.c,\n            src/vim.h, src/xxd/xxd.c\n\nPatch 7.4.2049\nProblem:    There is no way to get a list of the error lists.\nSolution:   Add \":chistory\" and \":lhistory\".\nFiles:      src/ex_cmds.h, src/quickfix.c, src/ex_docmd.c, src/message.c,\n            src/proto/quickfix.pro, src/testdir/test_quickfix.vim\n\nPatch 7.4.2050\nProblem:    When using \":vimgrep\" may end up with duplicate buffers.\nSolution:   When adding an error list entry pass the buffer number if possible.\nFiles:      src/quickfix.c, src/testdir/test_quickfix.vim\n\nPatch 7.4.2051\nProblem:    No proper testing of trunc_string().\nSolution:   Add a unittest for message.c.\nFiles:      src/Makefile, src/message.c, src/message_test.c, src/main.c,\n            src/proto/main.pro, src/structs.h\n\nPatch 7.4.2052\nProblem:    Coverage report is messed up by the unittests.\nSolution:   Add a separate test target for script tests.  Use that when\n            collecting coverage information.\nFiles:      src/Makefile\n\nPatch 7.4.2053\nProblem:    Can't run scripttests in the top directory.\nSolution:   Add targets to the top Makefile.\nFiles:      Makefile\n\nPatch 7.4.2054 (after 7.4.2048)\nProblem:    Wrong part of #ifdef removed.\nSolution:   Use the right part. (Hirohito Higashi)\nFiles:      src/os_unix.c\n\nPatch 7.4.2055\nProblem:    eval.c is too big\nSolution:   Move Dictionary functions to dict.c\nFiles:      src/eval.c, src/dict.c, src/vim.h, src/globals.h,\n            src/proto/eval.pro, src/proto/dict.pro, src/Makefile, Filelist\n\nPatch 7.4.2056 (after 7.4.2055)\nProblem:    Build fails.\nSolution:   Add missing changes.\nFiles:      src/proto.h\n\nPatch 7.4.2057\nProblem:    eval.c is too big.\nSolution:   Move List functions to list.c\nFiles:      src/eval.c, src/dict.c, src/list.c, src/proto.h, src/Makefile,\n            src/globals.h, src/proto/eval.pro, src/proto/list.pro, Filelist\n\nPatch 7.4.2058\nProblem:    eval.c is too big.\nSolution:   Move user functions to userfunc.c\nFiles:      src/userfunc.c, src/eval.c, src/vim.h, src/globals.h,\n            src/structs.h, src/proto.h, src/Makefile, src/proto/eval.pro,\n            src/proto/userfunc.pro, Filelist\n\nPatch 7.4.2059\nProblem:    Non-Unix builds fail.\nSolution:   Update Makefiles for new files.\nFiles:      src/Make_bc5.mak, src/Make_cyg_ming.mak, src/Make_dice.mak,\n            src/Make_ivc.mak, src/Make_manx.mak, src/Make_morph.mak,\n            src/Make_mvc.mak, src/Make_sas.mak\n\nPatch 7.4.2060 (after 7.4.2059)\nProblem:    Wrong file name.\nSolution:   Fix typo.\nFiles:      src/Make_mvc.mak\n\nPatch 7.4.2061\nProblem:    qf_init_ext() is too big.\nSolution:   Move code to qf_parse_line() (Yegappan Lakshmanan)\nFiles:      src/quickfix.c, src/testdir/test_quickfix.vim\n\nPatch 7.4.2062\nProblem:    Using dummy variable to compute struct member offset.\nSolution:   Use offsetof().\nFiles:      src/globals.h, src/macros.h, src/vim.h, src/spell.c\n\nPatch 7.4.2063\nProblem:    eval.c is still too big.\nSolution:   Split off internal functions to evalfunc.c.\nFiles:      src/eval.c, src/evalfunc.c, src/list.c, src/proto.h,\n            src/globals.h, src/vim.h, src/proto/eval.pro,\n            src/proto/evalfunc.pro, src/proto/list.pro, src/Makefile, Filelist,\n            src/Make_bc5.mak, src/Make_cyg_ming.mak, src/Make_dice.mak,\n            src/Make_ivc.mak, src/Make_manx.mak, src/Make_morph.mak,\n            src/Make_mvc.mak, src/Make_sas.mak\n\nPatch 7.4.2064\nProblem:    Coverity warns for possible buffer overflow.\nSolution:   Use vim_strcat() instead of strcat().\nFiles:      src/quickfix.c\n\nPatch 7.4.2065\nProblem:    Compiler warns for uninitialized variable. (John Marriott)\nSolution:   Set lnum to the right value.\nFiles:      src/evalfunc.c\n\nPatch 7.4.2066\nProblem:    getcompletion() not well tested.\nSolution:   Add more testing.\nFiles:      src/testdir/test_cmdline.vim\n\nPatch 7.4.2067\nProblem:    Compiler warning for char/char_u conversion. (Tony Mechelynck)\n            Inefficient code.\nSolution:   Use more lines to fill with spaces. (Nikolai Pavlov) Add type cast.\nFiles:      src/quickfix.c\n\nPatch 7.4.2068\nProblem:    Not all arguments of trunc_string() are tested.  Memory access\n            error when running the message tests.\nSolution:   Add another test case. (Yegappan Lakshmanan)  Make it easy to run\n            unittests with valgrind.  Fix the access error.\nFiles:      src/message.c, src/message_test.c, src/Makefile\n\nPatch 7.4.2069\nProblem:    spell.c is too big.\nSolution:   Split it in spell file handling and spell checking.\nFiles:      src/spell.c, src/spellfile.c, src/spell.h, src/Makefile,\n            src/proto/spell.pro, src/proto/spellfile.pro, src/proto.h\n            Filelist, src/Make_bc5.mak, src/Make_cyg_ming.mak,\n            src/Make_dice.mak, src/Make_ivc.mak, src/Make_manx.mak,\n            src/Make_morph.mak, src/Make_mvc.mak, src/Make_sas.mak\n\nPatch 7.4.2070 (after 7.4.2069)\nProblem:    Missing change to include file.\nSolution:   Include the spell header file.\nFiles:      src/vim.h\n\nPatch 7.4.2071\nProblem:    The return value of type() is difficult to use.\nSolution:   Define v:t_ constants. (Ken Takata)\nFiles:      runtime/doc/eval.txt, src/eval.c, src/evalfunc.c,\n            src/testdir/test_channel.vim, src/testdir/test_viml.vim, src/vim.h\n\nPatch 7.4.2072\nProblem:    substitute() does not support a Funcref argument.\nSolution:   Support a Funcref like it supports  a string starting with \"\\=\".\nFiles:      src/evalfunc.c, src/regexp.c, src/eval.c, src/proto/eval.pro,\n            src/proto/regexp.pro, src/testdir/test_expr.vim\n\nPatch 7.4.2073\nProblem:    rgb.txt is read for every color name.\nSolution:   Load rgb.txt once. (Christian Brabandt)  Add a test.\nFiles:      runtime/rgb.txt, src/term.c, src/testdir/test_syn_attr.vim\n\nPatch 7.4.2074\nProblem:    One more place using a dummy variable.\nSolution:   Use offsetof(). (Ken Takata)\nFiles:      src/userfunc.c\n\nPatch 7.4.2075\nProblem:    No autocommand event to initialize a window or tab page.\nSolution:   Add WinNew and TabNew events. (partly by Felipe Morales)\nFiles:      src/fileio.c, src/window.c, src/vim.h,\n            src/testdir/test_autocmd.vim, runtime/doc/autocmd.txt\n\nPatch 7.4.2076\nProblem:    Syntax error when dict has '>' key.\nSolution:   Check for endchar. (Ken Takata)\nFiles:      src/userfunc.c, src/testdir/test_lambda.vim\n\nPatch 7.4.2077\nProblem:    Cannot update 'tabline' when a tab was closed.\nSolution:   Add the TabClosed autocmd event. (partly by Felipe Morales)\nFiles:      src/fileio.c, src/window.c, src/vim.h,\n            src/testdir/test_autocmd.vim, runtime/doc/autocmd.txt\n\nPatch 7.4.2078\nProblem:    Running checks in po directory fails.\nSolution:   Add colors used in syntax.c to the builtin color table.\nFiles:      src/term.c\n\nPatch 7.4.2079\nProblem:    Netbeans test fails on non-Unix systems.\nSolution:   Only do the permission check on Unix systems.\nFiles:      src/testdir/test_netbeans.vim\n\nPatch 7.4.2080\nProblem:    When using PERROR() on some systems assert_fails() does not see\n            the error.\nSolution:   Make PERROR() always report the error.\nFiles:      src/vim.h, src/message.c, src/proto/message.pro\n\nPatch 7.4.2081\nProblem:    Line numbers in the error list are not always adjusted.\nSolution:   Set b_has_qf_entry properly. (Yegappan Lakshmanan)\nFiles:      src/quickfix.c, src/structs.h, src/testdir/test_quickfix.vim\n\nPatch 7.4.2082\nProblem:    Not much test coverage for digraphs.\nSolution:   Add a new style digraph test. (Christian Brabandt)\nFiles:      src/Makefile, src/testdir/test_alot.vim,\n            src/testdir/test_digraph.vim\n\nPatch 7.4.2083\nProblem:    Coverity complains about not restoring a value.\nSolution:   Restore the value, although it's not really needed.  Change return\n            to jump to cleanup, might leak memory.\nFiles:      src/userfunc.c\n\nPatch 7.4.2084\nProblem:    New digraph test makes testing hang.\nSolution:   Don't set \"nocp\".\nFiles:      src/testdir/test_digraph.vim\n\nPatch 7.4.2085\nProblem:    Digraph tests fails on some systems.\nSolution:   Run it separately and set 'encoding' early.\nFiles:      src/testdir/Make_all.mak, src/testdir/test_alot.vim,\n            src/testdir/test_digraph.vim\n\nPatch 7.4.2086\nProblem:    Using the system default encoding makes tests unpredictable.\nSolution:   Always use utf-8 or latin1 in the new style tests.  Remove setting\n            encoding and scriptencoding where it is not needed.\nFiles:      src/testdir/runtest.vim, src/testdir/test_channel.vim,\n            src/testdir/test_digraph.vim, src/testdir/test_expand_dllpath.vim,\n            src/testdir/test_expr_utf8.vim, src/testdir/test_json.vim,\n            src/testdir/test_matchadd_conceal_utf8.vim,\n            src/testdir/test_regexp_utf8.vim, src/testdir/test_visual.vim,\n            src/testdir/test_alot_utf8.vim,\n\nPatch 7.4.2087\nProblem:    Digraph code test coverage is still low.\nSolution:   Add more tests. (Christian Brabandt)\nFiles:      src/testdir/test_digraph.vim\n\nPatch 7.4.2088 (after 7.4.2087)\nProblem:    Keymap test fails with normal features.\nSolution:   Bail out if the keymap feature is not supported.\nFiles:      src/testdir/test_digraph.vim\n\nPatch 7.4.2089\nProblem:    Color handling of X11 GUIs is too complicated.\nSolution:   Simplify the code.  Use RGBA where appropriate. (Kazunobu\n            Kuriyama)\nFiles:      src/gui.h, src/gui_beval.c, src/gui_gtk_x11.c, src/netbeans.c\n\nPatch 7.4.2090\nProblem:    Using submatch() in a lambda passed to substitute() is verbose.\nSolution:   Use a static list and pass it as an optional argument to the\n            function.  Fix memory leak.\nFiles:      src/structs.h, src/list.c, src/userfunc.c, src/channel.c,\n            src/eval.c, src/evalfunc.c, src/ex_cmds2.c, src/regexp.c,\n            src/proto/list.pro, src/proto/userfunc.pro,\n            src/testdir/test_expr.vim, runtime/doc/eval.txt\n\nPatch 7.4.2091\nProblem:    Coverity reports a resource leak when out of memory.\nSolution:   Close the file before returning.\nFiles:      src/term.c\n\nPatch 7.4.2092\nProblem:    GTK 3 build fails with older GTK version.\nSolution:   Check the pango version. (Kazunobu Kuriyama)\nFiles:      src/gui_beval.c\n\nPatch 7.4.2093\nProblem:    Netbeans test fails once in a while.  Leaving log file behind.\nSolution:   Add it to the list of flaky tests.  Disable logfile.\nFiles:      src/testdir/runtest.vim, src/testdir/test_channel.vim\n\nPatch 7.4.2094\nProblem:    The color allocation in X11 is overly complicated.\nSolution:   Remove find_closest_color(), XAllocColor() already does this.\n            (Kazunobu Kuriyama)\nFiles:      src/gui_x11.c\n\nPatch 7.4.2095\nProblem:    Man test fails when run with the GUI.\nSolution:   Adjust for different behavior of GUI.  Add assert_inrange().\nFiles:      src/eval.c, src/evalfunc.c, src/proto/eval.pro,\n            src/testdir/test_assert.vim, src/testdir/test_man.vim,\n            runtime/doc/eval.txt\n\nPatch 7.4.2096\nProblem:    Lambda functions show up with completion.\nSolution:   Don't show lambda functions. (Ken Takata)\nFiles:      src/userfunc.c, src/testdir/test_cmdline.vim\n\nPatch 7.4.2097\nProblem:    Warning from 64 bit compiler.\nSolution:   use size_t instead of int. (Mike Williams)\nFiles:      src/message.c\n\nPatch 7.4.2098\nProblem:    Text object tests are old style.\nSolution:   Turn them into new style tests. (James McCoy, closes #941)\nFiles:      src/testdir/Make_all.mak, src/testdir/test_textobjects.in,\n            src/testdir/test_textobjects.ok, src/testdir/test_textobjects.vim,\n            src/Makefile\n\nPatch 7.4.2099\nProblem:    When a keymap is active only \"(lang)\" is displayed. (Ilya\n            Dogolazky)\nSolution:   Show the keymap name. (Dmitri Vereshchagin, closes #933)\nFiles:      src/buffer.c, src/proto/screen.pro, src/screen.c\n\nPatch 7.4.2100\nProblem:    \"cgn\" and \"dgn\" do not work correctly with a single character\n            match and the replacement includes the searched pattern. (John\n            Beckett)\nSolution:   If the match is found in the wrong column try in the next column.\n            Turn the test into new style. (Christian Brabandt)\nFiles:      src/search.c, src/testdir/Make_all.mak, src/Makefile,\n            src/testdir/test53.in, src/testdir/test53.ok,\n            src/testdir/test_gn.vim\n\nPatch 7.4.2101\nProblem:    Looping over windows, buffers and tab pages is inconsistent.\nSolution:   Use FOR_ALL_ macros everywhere. (Yegappan Lakshmanan)\nFiles:      src/buffer.c, src/diff.c, src/edit.c, src/eval.c, src/evalfunc.c,\n            src/ex_cmds.c, src/ex_cmds2.c, src/ex_docmd.c, src/fileio.c,\n            src/globals.h, src/gui.c, src/gui_mac.c, src/if_lua.c,\n            src/if_mzsch.c, src/if_perl.xs, src/if_ruby.c, src/if_tcl.c,\n            src/main.c, src/mark.c, src/memfile.c, src/memline.c, src/misc1.c,\n            src/move.c, src/netbeans.c, src/normal.c, src/option.c,\n            src/quickfix.c, src/screen.c, src/spell.c, src/term.c,\n            src/window.c, src/workshop.c\n\nPatch 7.4.2102 (after 7.4.2101)\nProblem:    Tiny build with GUI fails.\nSolution:   Revert one FOR_ALL_ change.\nFiles:      src/gui.c\n\nPatch 7.4.2103\nProblem:    Can't have \"augroup END\" right after \":au!\".\nSolution:   Check for the bar character before the command argument.\nFiles:      src/fileio.c, src/testdir/test_autocmd.vim,\n            runtime/doc/autocmd.txt\n\nPatch 7.4.2104\nProblem:    Code duplication when unreferencing a function.\nSolution:   De-duplicate.\nFiles:      src/userfunc.c\n\nPatch 7.4.2105\nProblem:    Configure reports default features to be \"normal\" while it is\n            \"huge\".\nSolution:   Change the default text.  Build with newer autoconf.\nFiles:      src/configure.in, src/auto/configure\n\nPatch 7.4.2106\nProblem:    Clang warns about missing field in initializer.\nSolution:   Define COMMA and use it.  (Kazunobu Kuriyama)\nFiles:      src/ex_cmds.c, src/globals.h, src/vim.h\n\nPatch 7.4.2107 (after 7.4.2106)\nProblem:    Misplaced equal sign.\nSolution:   Remove it.\nFiles:      src/globals.h\n\nPatch 7.4.2108\nProblem:    Netbeans test is flaky.\nSolution:   Wait for the cursor to be positioned.\nFiles:      src/testdir/test_netbeans.vim\n\nPatch 7.4.2109\nProblem:    Setting 'display' to \"lastline\" is a drastic change, while\n            omitting it results in lots of \"@\" lines.\nSolution:   Add \"truncate\" to show \"@@@\" for a truncated line.\nFiles:      src/option.h, src/screen.c, runtime/doc/options.txt\n\nPatch 7.4.2110\nProblem:    When there is an CmdUndefined autocmd then the error for a missing\n            command is E464 instead of E492. (Manuel Ortega)\nSolution:   Don't let the pointer be NULL.\nFiles:      src/ex_docmd.c, src/testdir/test_usercommands.vim\n\nPatch 7.4.2111\nProblem:    Defaults are very conservative.\nSolution:   Move settings from vimrc_example.vim to defaults.vim.  Load\n            defaults.vim if no .vimrc was found.\nFiles:      src/main.c, src/version.c, src/os_amiga.h, src/os_dos.h,\n            src/os_mac.h, src/os_unix.h, src/feature.h, src/Makefile,\n            runtime/vimrc_example.vim, runtime/defaults.vim,\n            runtime/evim.vim, Filelist, runtime/doc/starting.txt\n\nPatch 7.4.2112\nProblem:    getcompletion(.., 'dir') returns a match with trailing \"*\" when\n            there are no matches. (Chdiza)\nSolution:   Return an empty list when there are no matches.  Add a trailing\n            slash to directories. (Yegappan Lakshmanan)  Add tests for no\n            matches. (closes #947)\nFiles:      src/evalfunc.c, src/testdir/test_cmdline.vim\n\nPatch 7.4.2113\nProblem:    Test for undo is flaky.\nSolution:   Turn it into a new style test.  Use test_settime() to avoid\n            flakyness.\nFiles:      src/Makefile, src/undo.c, src/testdir/test61.in,\n            src/testdir/test61.ok, src/testdir/test_undo.vim,\n            src/testdir/test_undolevels.vim, src/testdir/Make_all.mak,\n            src/testdir/test_alot.vim\n\nPatch 7.4.2114\nProblem:    Tiny build fails.\nSolution:   Always include vim_time().\nFiles:      src/ex_cmds.c\n\nPatch 7.4.2115\nProblem:    Loading defaults.vim with -C argument.\nSolution:   Don't load the defaults script with -C argument.  Test sourcing\n            the defaults script.  Set 'display' to \"truncate\".\nFiles:      src/main.c, src/Makefile, runtime/defaults.vim,\n            src/testdir/test_startup.vim, src/testdir/Make_all.mak\n\nPatch 7.4.2116\nProblem:    The default vimrc for Windows is very conservative.\nSolution:   Use the defaults.vim in the Windows installer.\nFiles:      src/dosinst.c\n\nPatch 7.4.2117\nProblem:    Deleting an augroup that still has autocmds does not give a\n            warning.  The next defined augroup takes its place.\nSolution:   Give a warning and prevent the index being used for another group\n            name.\nFiles:      src/fileio.c, src/testdir/test_autocmd.vim\n\nPatch 7.4.2118\nProblem:    Mac: can't build with tiny features.\nSolution:   Don't define FEAT_CLIPBOARD unconditionally. (Kazunobu Kuriyama)\nFiles:      src/vim.h\n\nPatch 7.4.2119\nProblem:    Closures are not supported.\nSolution:   Capture variables in lambdas from the outer scope. (Yasuhiro\n            Matsumoto, Ken Takata)\nFiles:      runtime/doc/eval.txt, src/eval.c, src/ex_cmds2.c, src/globals.h,\n            src/proto/eval.pro, src/proto/userfunc.pro,\n            src/testdir/test_lambda.vim, src/userfunc.c\n\nPatch 7.4.2120\nProblem:    User defined functions can't be a closure.\nSolution:   Add the \"closure\" argument. Allow using :unlet on a bound\n            variable. (Yasuhiro Matsumoto, Ken Takata)\nFiles:      runtime/doc/eval.txt, src/testdir/test_lambda.vim, src/userfunc.c,\n            src/eval.c src/proto/userfunc.pro\n\nPatch 7.4.2121\nProblem:    No easy way to check if lambda and closure are supported.\nSolution:   Add the +lambda feature.\nFiles:      src/evalfunc.c, src/version.c, src/testdir/test_lambda.vim\n\nPatch 7.4.2122 (after 7.4.2118)\nProblem:    Mac: don't get +clipboard in huge build.\nSolution:   Move #define down below including feature.h\nFiles:      src/vim.h\n\nPatch 7.4.2123\nProblem:    No new style test for diff mode.\nSolution:   Add a test.  Check that folds are in sync.\nFiles:      src/Makefile, src/testdir/test_diffmode.vim,\n            src/testdir/Make_all.mak, src/testdir/test47.in,\n            src/testdir/test47.ok\n\nPatch 7.4.2124\nProblem:    diffmode test leaves files behind, breaking another test.\nSolution:   Delete the files.\nFiles:      src/testdir/test_diffmode.vim\n\nPatch 7.4.2125\nProblem:    Compiler warning for loss of data.\nSolution:   Add a type cast. (Christian Brabandt)\nFiles:      src/message.c\n\nPatch 7.4.2126\nProblem:    No tests for :diffget and :diffput\nSolution:   Add tests.\nFiles:      src/testdir/test_diffmode.vim\n\nPatch 7.4.2127\nProblem:    The short form of \":noswapfile\" is \":noswap\" instead of \":nos\".\n            (Kent Sibilev)\nSolution:   Only require three characters.  Add a test for the short forms.\nFiles:      src/ex_docmd.c, src/testdir/test_usercommands.vim\n\nPatch 7.4.2128\nProblem:    Memory leak when saving for undo fails.\nSolution:   Free allocated memory. (Hirohito Higashi)\nFiles:      src/ex_cmds.c\n\nPatch 7.4.2129\nProblem:    Memory leak when using timer_start(). (Dominique Pelle)\nSolution:   Don't copy the callback when using a partial.\nFiles:      src/evalfunc.c\n\nPatch 7.4.2130\nProblem:    Pending timers cause false memory leak reports.\nSolution:   Free all timers on exit.\nFiles:      src/ex_cmds2.c, src/proto/ex_cmds2.pro, src/misc2.c\n\nPatch 7.4.2131\nProblem:    More memory leaks when using partial, e.g. for \"exit-cb\".\nSolution:   Don't copy the callback when using a partial.\nFiles:      src/channel.c\n\nPatch 7.4.2132\nProblem:    test_partial has memory leaks reported.\nSolution:   Add a note about why this happens.\nFiles:      src/testdir/test_partial.vim\n\nPatch 7.4.2133 (after 7.4.2128)\nProblem:    Can't build with tiny features.\nSolution:   Add #ifdef.\nFiles:      src/ex_cmds.c\n\nPatch 7.4.2134\nProblem:    No error for using function() badly.\nSolution:   Check for passing wrong function name. (Ken Takata)\nFiles:      src/eval.c, src/evalfunc.c, src/proto/userfunc.pro,\n            src/testdir/test_expr.vim, src/userfunc.c, src/vim.h\n\nPatch 7.4.2135\nProblem:    Various tiny issues.\nSolution:   Update comments, white space, etc.\nFiles:      src/diff.c, src/digraph.c, src/testdir/test80.in,\n            src/testdir/test_channel.vim, src/testdir/Makefile,\n            runtime/menu.vim, src/INSTALLpc.txt, src/xpm/README.txt\n\nPatch 7.4.2136\nProblem:    Closure function fails.\nSolution:   Don't reset uf_scoped when it points to another funccal.\nFiles:      src/userfunc.c, src/testdir/test_lambda.vim\n\nPatch 7.4.2137\nProblem:    Using function() with a name will find another function when it is\n            redefined.\nSolution:   Add funcref().  Refer to lambda using a partial.  Fix several\n            reference counting issues.\nFiles:      src/vim.h, src/structs.h, src/userfunc.c, src/eval.c,\n            src/evalfunc.c, src/channel.c, src/proto/eval.pro,\n            src/proto/userfunc.pro, src/if_mzsch.c, src/regexp.c, src/misc2.c,\n            src/if_py_both.h, src/testdir/test_expr.vim, runtime/doc/eval.txt\n\nPatch 7.4.2138\nProblem:    Test 86 and 87 fail.\nSolution:   Call func_ref() also for regular functions.\nFiles:      src/if_py_both.h\n\nPatch 7.4.2139\nProblem:    :delfunction causes illegal memory access.\nSolution:   Correct logic when deciding to free a function.\nFiles:      src/userfunc.c, src/testdir/test_lambda.vim\n\nPatch 7.4.2140\nProblem:    Tiny build fails.\nSolution:   Add dummy typedefs.\nFiles:      src/structs.h\n\nPatch 7.4.2141\nProblem:    Coverity reports bogus NULL check.\nSolution:   When checking for a variable in the funccal scope don't pass the\n            varname.\nFiles:      src/userfunc.c, src/proto/userfunc.pro, src/eval.c\n\nPatch 7.4.2142\nProblem:    Leaking memory when redefining a function.\nSolution:   Don't increment the function reference count when it's found by\n            name. Don't remove the wrong function from the hashtab.  More\n            reference counting fixes.\nFiles:      src/structs.h, src/userfunc.c\n\nPatch 7.4.2143\nProblem:    A funccal is garbage collected while it can still be used.\nSolution:   Set copyID in all referenced functions.  Do not list lambda\n            functions with \":function\".\nFiles:      src/userfunc.c, src/proto/userfunc.pro, src/eval.c,\n            src/testdir/test_lambda.vim\n\nPatch 7.4.2144\nProblem:    On MS-Windows quickfix does not handle a line with 1023 bytes\n            ending in CR-LF properly.\nSolution:   Don't consider CR a line break. (Ken Takata)\nFiles:      src/quickfix.c\n\nPatch 7.4.2145\nProblem:    Win32: Using CreateThread/ExitThread is not safe.\nSolution:   Use _beginthreadex and return from the thread. (Ken Takata)\nFiles:      src/os_win32.c\n\nPatch 7.4.2146\nProblem:    Not enough testing for popup menu.  CTRL-E does not always work\n            properly.\nSolution:   Add more tests.  When using CTRL-E check if the popup menu is\n            visible. (Christian Brabandt)\nFiles:      src/edit.c, src/testdir/test_popup.vim\n\nPatch 7.4.2147 (after 7.4.2146)\nProblem:    test_alot fails.\nSolution:   Close window.\nFiles:      src/testdir/test_popup.vim\n\nPatch 7.4.2148\nProblem:    Not much testing for cscope.\nSolution:   Add a test that uses the cscope program. (Christian Brabandt)\nFiles:      src/testdir/test_cscope.vim\n\nPatch 7.4.2149\nProblem:    If a test leaves a window open a following test may fail.\nSolution:   Always close extra windows after running a test.\nFiles:      src/testdir/runtest.vim, src/testdir/test_popup.vim\n\nPatch 7.4.2150\nProblem:    Warning with MinGW 64. (John Marriott)\nSolution:   Change return type. (Ken Takata)\nFiles:      src/os_win32.c\n\nPatch 7.4.2151\nProblem:    Quickfix test fails on MS-Windows.\nSolution:   Close the help window. (Christian Brabandt)\nFiles:      src/testdir/test_quickfix.vim\n\nPatch 7.4.2152\nProblem:    No proper translation of messages with a count.\nSolution:   Use ngettext(). (Sergey Alyoshin)\nFiles:      src/evalfunc.c, src/fold.c, src/os_win32.c, src/screen.c, src/vim.h\n\nPatch 7.4.2153\nProblem:    GUI test isn't testing much.\nSolution:   Turn into a new style test.  Execute a shell command.\nFiles:      src/testdir/test_gui.vim, src/testdir/test16.in,\n            src/testdir/test16.ok, src/testdir/Make_all.mak, src/Makefile,\n            src/testdir/Make_vms.mms\n\nPatch 7.4.2154\nProblem:    Test_communicate() fails sometimes.\nSolution:   Add it to the flaky tests.\nFiles:      src/testdir/runtest.vim\n\nPatch 7.4.2155\nProblem:    Quotes make GUI test fail on MS-Windows.\nSolution:   Remove quotes, strip white space.\nFiles:      src/testdir/test_gui.vim\n\nPatch 7.4.2156\nProblem:    Compiler warning.\nSolution:   Add type cast. (Ken Takata, Mike Williams)\nFiles:      src/os_win32.c\n\nPatch 7.4.2157\nProblem:    Test_job_start_fails() is expected to report memory leaks, making\n            it hard to see other leaks in test_partial.\nSolution:   Move Test_job_start_fails() to a separate test file.\nFiles:      src/testdir/test_partial.vim, src/testdir/test_job_fails.vim,\n            src/Makefile, src/testdir/Make_all.mak\n\nPatch 7.4.2158\nProblem:    Result of getcompletion('', 'cscope') depends on previous\n            completion. (Christian Brabandt)\nSolution:   Call set_context_in_cscope_cmd().\nFiles:      src/evalfunc.c, src/testdir/test_cmdline.vim\n\nPatch 7.4.2159\nProblem:    Insufficient testing for cscope.\nSolution:   Add more tests. (Dominique Pelle)\nFiles:      src/testdir/test_cscope.vim\n\nPatch 7.4.2160\nProblem:    setmatches() mixes up values. (Nikolai Pavlov)\nSolution:   Save the string instead of reusing a shared buffer.\nFiles:      src/dict.c, src/evalfunc.c, src/testdir/test_expr.vim,\n\nPatch 7.4.2161 (after 7.4.2160)\nProblem:    Expression test fails without conceal feature.\nSolution:   Only check \"conceal\" with the conceal feature.\nFiles:      src/testdir/test_expr.vim\n\nPatch 7.4.2162\nProblem:    Result of getcompletion('', 'sign') depends on previous\n            completion.\nSolution:   Call set_context_in_sign_cmd(). (Dominique Pelle)\nFiles:      src/evalfunc.c, src/testdir/test_cmdline.vim\n\nPatch 7.4.2163\nProblem:    match() and related functions tested with old style test.\nSolution:   Convert to new style test. (Hirohito Higashi)\nFiles:      src/Makefile, src/testdir/Make_all.mak, src/testdir/test63.in,\n            src/testdir/test63.ok, src/testdir/test_alot.vim,\n            src/testdir/test_match.vim, src/testdir/test_matchstrpos.vim\n\nPatch 7.4.2164\nProblem:    It is not possible to use plugins in an \"after\" directory to tune\n            the behavior of a package.\nSolution:   First load plugins from non-after directories, then packages and\n            finally plugins in after directories.\n            Reset 'loadplugins' before executing --cmd arguments.\nFiles:      src/main.c, src/vim.h, src/ex_cmds2.c, src/testdir/Makefile,\n            src/testdir/shared.vim, src/testdir/test_startup.vim,\n            src/testdir/setup.vim, runtime/doc/starting.txt\n\nPatch 7.4.2165 (after 7.4.2164)\nProblem:    Startup test fails on MS-Windows.\nSolution:   Don't check output if RunVim() returns zero.\nFiles:      src/testdir/test_startup.vim\n\nPatch 7.4.2166 (after 7.4.2164)\nProblem:    Small build can't run startup test.\nSolution:   Skip the test.\nFiles:      src/testdir/test_startup.vim\n\nPatch 7.4.2167 (after 7.4.2164)\nProblem:    Small build can't run tests.\nSolution:   Don't try setting 'packpath'.\nFiles:      src/testdir/setup.vim\n\nPatch 7.4.2168\nProblem:    Not running the startup test on MS-Windows.\nSolution:   Write vimcmd.\nFiles:      src/testdir/Make_ming.mak, src/testdir/Make_dos.mak\n\nPatch 7.4.2169 (after 7.4.2168)\nProblem:    Startup test gets stuck on MS-Windows.\nSolution:   Use double quotes.\nFiles:      src/testdir/shared.vim, src/testdir/test_startup.vim\n\nPatch 7.4.2170\nProblem:    Cannot get information about timers.\nSolution:   Add timer_info().\nFiles:      src/evalfunc.c, src/ex_cmds2.c, src/proto/ex_cmds2.pro,\n            runtime/doc/eval.txt\n\nPatch 7.4.2171 (after 7.4.2170)\nProblem:    MS-Windows build fails.\nSolution:   Add QueryPerformanceCounter().\nFiles:      src/ex_cmds2.c\n\nPatch 7.4.2172\nProblem:    No test for \"vim --help\".\nSolution:   Add a test.\nFiles:      src/testdir/test_startup.vim, src/testdir/shared.vim\n\nPatch 7.4.2173 (after 7.4.2172)\nProblem:    Can't test help on MS-Windows.\nSolution:   Skip the test.\nFiles:      src/testdir/test_startup.vim\n\nPatch 7.4.2174\nProblem:    Adding duplicate flags to 'whichwrap' leaves commas behind.\nSolution:   Also remove the commas. (Naruhiko Nishino)\nFiles:      src/Makefile, src/option.c, src/testdir/Make_all.mak,\n            src/testdir/test_alot.vim, src/testdir/test_options.in,\n            src/testdir/test_options.ok, src/testdir/test_options.vim\n\nPatch 7.4.2175\nProblem:    Insufficient testing of cscope.\nSolution:   Add more tests. (Dominique Pelle)\nFiles:      src/testdir/test_cscope.vim\n\nPatch 7.4.2176\nProblem:    #ifdefs in main() are complicated.\nSolution:   Always define vim_main2().  Move params to the file level.\n            (suggested by Ken Takata)\nFiles:      src/main.c, src/structs.h, src/vim.h, src/if_mzsch.c,\n            src/proto/if_mzsch.pro\n\nPatch 7.4.2177\nProblem:    No testing for -C and -N command line flags, file arguments,\n            startuptime.\nSolution:   Add tests.\nFiles:      src/testdir/test_startup.vim, src/testdir/shared.vim\n\nPatch 7.4.2178\nProblem:    No test for reading from stdin.\nSolution:   Add a test.\nFiles:      src/testdir/test_startup.vim, src/testdir/shared.vim\n\nPatch 7.4.2179 (after 7.4.2178)\nProblem:    Reading from stdin test fails on MS-Windows.\nSolution:   Strip the extra space.\nFiles:      src/testdir/test_startup.vim\n\nPatch 7.4.2180\nProblem:    There is no easy way to stop all timers.  There is no way to\n            temporary pause a timer.\nSolution:   Add timer_stopall() and timer_pause().\nFiles:      src/evalfunc.c, src/ex_cmds2.c, src/proto/ex_cmds2.pro,\n            src/structs.h, src/testdir/test_timers.vim,\n            src/testdir/shared.vim, runtime/doc/eval.txt\n\nPatch 7.4.2181\nProblem:    Compiler warning for unused variable.\nSolution:   Remove it. (Dominique Pelle)\nFiles:      src/ex_cmds2.c\n\nPatch 7.4.2182\nProblem:    Color Grey40 used in startup but not in the short list.\nSolution:   Add Grey40 to the builtin colors.\nFiles:      src/term.c\n\nPatch 7.4.2183\nProblem:    Sign tests are old style.\nSolution:   Turn them into new style tests. (Dominique Pelle)\nFiles:      src/Makefile, src/testdir/Make_all.mak, src/testdir/test_signs.in,\n            src/testdir/test_signs.ok, src/testdir/test_signs.vim,\n\nPatch 7.4.2184\nProblem:    Tests that use RunVim() do not actually perform the test.\nSolution:   Use \"return\" instead of \"call\". (Ken Takata)\nFiles:      src/testdir/shared.vim\n\nPatch 7.4.2185\nProblem:    Test glob2regpat does not test much.\nSolution:   Add a few more test cases. (Dominique Pelle)\nFiles:      src/testdir/test_glob2regpat.vim\n\nPatch 7.4.2186\nProblem:    Timers test is flaky.\nSolution:   Relax the sleep time check.\nFiles:      src/testdir/test_timers.vim\n\nPatch 7.4.2187 (after 7.4.2185)\nProblem:    glob2regpat test fails on Windows.\nSolution:   Remove the checks that use backslashes.\nFiles:      src/testdir/test_glob2regpat.vim\n\nPatch 7.4.2188 (after 7.4.2146)\nProblem:    Completion does not work properly with some plugins.\nSolution:   Revert the part related to typing CTRL-E. (closes #972)\nFiles:      src/edit.c, src/testdir/test_popup.vim\n\nPatch 7.4.2189\nProblem:    Cannot detect encoding in a fifo.\nSolution:   Extend the stdin way of detecting encoding to fifo.  Add a test\n            for detecting encoding on stdin and fifo. (Ken Takata)\nFiles:      src/buffer.c, src/fileio.c, src/Makefile,\n            src/testdir/Make_all.mak, src/testdir/test_startup_utf8.vim,\n            src/vim.h\n\nPatch 7.4.2190\nProblem:    When startup test fails it's not easy to find out why.\n            GUI test fails with Gnome.\nSolution:   Add the help entry matches to a list an assert that.\n            Set $HOME for Gnome to create .gnome2 directory.\nFiles:      src/testdir/test_startup.vim, src/testdir/test_gui.vim\n\nPatch 7.4.2191\nProblem:    No automatic prototype for vim_main2().\nSolution:   Move the #endif. (Ken Takata)\nFiles:      src/main.c, src/vim.h, src/proto/main.pro\n\nPatch 7.4.2192\nProblem:    Generating prototypes with Cygwin doesn't work well.\nSolution:   Change #ifdefs. (Ken Takata)\nFiles:      src/gui.h, src/gui_w32.c, src/ops.c, src/proto/fileio.pro,\n            src/proto/message.pro, src/proto/normal.pro, src/proto/ops.pro,\n            src/vim.h\n\nPatch 7.4.2193\nProblem:    With Gnome when the GUI can't start test_startup hangs.\nSolution:   Call gui_mch_early_init_check(). (Hirohito Higashi)\nFiles:      src/gui.c, src/gui_gtk_x11.c, src/proto/gui_gtk_x11.pro\n\nPatch 7.4.2194\nProblem:    Sign tests don't cover enough.\nSolution:   Add more test cases. (Dominique Pelle)\nFiles:      src/testdir/test_signs.vim\n\nPatch 7.4.2195\nProblem:    MS-Windows: The vimrun program does not support Unicode.\nSolution:   Use GetCommandLineW().  Cleanup old #ifdefs. (Ken Takata)\nFiles:      src/vimrun.c\n\nPatch 7.4.2196\nProblem:    glob2regpat test doesn't test everything on MS-Windows.\nSolution:   Add patterns with backslash handling.\nFiles:      src/testdir/test_glob2regpat.vim\n\nPatch 7.4.2197\nProblem:    All functions are freed on exit, which may hide leaks.\nSolution:   Only free named functions, not reference counted ones.\nFiles:      src/userfunc.c\n\nPatch 7.4.2198\nProblem:    Test alot sometimes fails under valgrind. (Dominique Pelle)\nSolution:   Avoid passing a callback with the wrong number of arguments.\nFiles:      src/testdir/test_partial.vim\n\nPatch 7.4.2199\nProblem:    In the GUI the cursor is hidden when redrawing any window,\n            causing flicker.\nSolution:   Only undraw the cursor when updating the window it's in.\nFiles:      src/screen.c, src/gui.c, src/proto/gui.pro, src/gui_gtk_x11.c\n\nPatch 7.4.2200\nProblem:    Cannot get all information about a quickfix list.\nSolution:   Add an optional argument to get/set loc/qf list(). (Yegappan\n            Lakshmanan)\nFiles:      runtime/doc/eval.txt, src/evalfunc.c, src/proto/quickfix.pro,\n            src/quickfix.c, src/tag.c, src/testdir/test_quickfix.vim\n\nPatch 7.4.2201\nProblem:    The sign column disappears when the last sign is deleted.\nSolution:   Add the 'signcolumn' option. (Christian Brabandt)\nFiles:      runtime/doc/options.txt, runtime/optwin.vim, src/edit.c,\n            src/move.c, src/option.c, src/option.h, src/proto/option.pro,\n            src/screen.c, src/structs.h, src/testdir/test_options.vim\n\nPatch 7.4.2202\nProblem:    Build fails with small features.\nSolution:   Correct option initialization.\nFiles:      src/option.c\n\nPatch 7.4.2203\nProblem:    Test fails with normal features.\nSolution:   Check is signs are supported.\nFiles:      src/testdir/test_options.vim\n\nPatch 7.4.2204\nProblem:    It is not easy to get information about buffers, windows and\n            tabpages.\nSolution:   Add getbufinfo(), getwininfo() and gettabinfo(). (Yegappan\n            Lakshmanan)\nFiles:      runtime/doc/eval.txt, runtime/doc/usr_41.txt, src/dict.c,\n            src/evalfunc.c, src/option.c, src/proto/dict.pro,\n            src/proto/option.pro, src/proto/window.pro,\n            src/testdir/Make_all.mak, src/testdir/test_bufwintabinfo.vim,\n            src/window.c, src/Makefile\n\nPatch 7.4.2205\nProblem:    'wildignore' always applies to getcompletion().\nSolution:   Add an option to use 'wildignore' or not. (Yegappan Lakshmanan)\nFiles:      runtime/doc/eval.txt, src/evalfunc.c, src/testdir/test_cmdline.vim\n\nPatch 7.4.2206\nProblem:    Warning for unused function.\nSolution:   Put the function inside #ifdef. (John Marriott)\nFiles:      src/evalfunc.c\n\nPatch 7.4.2207\nProblem:    The +xpm feature is not sorted properly in :version output.\nSolution:   Move it up. (Tony Mechelynck)\nFiles:      src/version.c\n\nPatch 7.4.2208\nProblem:    Test for mappings is old style.\nSolution:   Convert the test to new style.\nFiles:      src/testdir/test_mapping.vim, src/testdir/test_mapping.in,\n            src/testdir/test_mapping.ok, src/Makefile,\n            src/testdir/test_alot.vim, src/testdir/Make_all.mak\n\nPatch 7.4.2209\nProblem:    Cannot map <M-\">. (Stephen Riehm)\nSolution:   Solve the memory access problem in another way. (Dominique Pelle)\n            Allow for using <M-\\\"> in a string.\nFiles:      src/eval.c, src/gui_mac.c, src/misc2.c, src/option.c,\n            src/proto/misc2.pro, src/syntax.c, src/term.c,\n            src/testdir/test_mapping.vim\n\nPatch 7.4.2210\nProblem:    On OSX configure mixes up a Python framework and the Unix layout.\nSolution:   Make configure check properly. (Tim D. Smith, closes #980)\nFiles:      src/configure.in, src/auto/configure\n\nPatch 7.4.2211\nProblem:    Mouse support is not automatically enabled with simple term.\nSolution:   Recognize \"st\" and other names. (Manuel Schiller, closes #963)\nFiles:      src/os_unix.c\n\nPatch 7.4.2212\nProblem:    Mark \" is not set when closing a window in another tab. (Guraga)\nSolution:   Check all tabs for the window to be valid. (based on patch by\n            Hirohito Higashi, closes #974)\nFiles:      src/window.c, src/proto/window.pro, src/buffer.c,\n            src/testdir/test_viminfo.vim\n\nPatch 7.4.2213\nProblem:    Cannot highlight the \"~\" lines at the end of a window differently.\nSolution:   Add the EndOfBuffer highlighting. (Marco Hinz, James McCoy)\nFiles:      runtime/doc/options.txt, runtime/doc/syntax.txt, src/option.c,\n            src/screen.c, src/syntax.c, src/vim.h\n\nPatch 7.4.2214\nProblem:    A font that uses ligatures messes up the screen display.\nSolution:   Put spaces between characters when building the glyph table.\n            (based on a patch from Manuel Schiller)\nFiles:      src/gui_gtk_x11.c\n\nPatch 7.4.2215\nProblem:    It's not easy to find out if a window is a quickfix or location\n            list window.\nSolution:   Add \"loclist\" and \"quickfix\" entries to the dict returned by\n            getwininfo(). (Yegappan Lakshmanan)\nFiles:      runtime/doc/eval.txt, src/evalfunc.c,\n            src/testdir/test_bufwintabinfo.vim\n\nPatch 7.4.2216 (after 7.4.2215)\nProblem:    Test fails without the +sign feature.\nSolution:   Only check for signcolumn with the +sign feature.\nFiles:      src/testdir/test_bufwintabinfo.vim\n\nPatch 7.4.2217\nProblem:    When using matchaddpos() a character after the end of the line can\n            be highlighted.\nSolution:   Only highlight existing characters. (Hirohito Higashi)\nFiles:      src/screen.c, src/structs.h, src/testdir/test_match.vim\n\nPatch 7.4.2218\nProblem:    Can't build with +timers when +digraph is not included.\nSolution:   Change #ifdef for e_number_exp. (Damien)\nFiles:      src/globals.h\n\nPatch 7.4.2219\nProblem:    Recursive call to substitute gets stuck in sandbox. (Nikolai\n            Pavlov)\nSolution:   Handle the recursive call. (Christian Brabandt, closes #950)\n            Add a test.\nFiles:      src/ex_cmds.c, src/testdir/test_regexp_latin.vim\n\nPatch 7.4.2220\nProblem:    printf() gives an error when the argument for %s is not a string.\n            (Ozaki Kiichi)\nSolution:   Behave like invoking string() on the argument. (Ken Takata)\nFiles:      runtime/doc/eval.txt, src/message.c, src/testdir/test_expr.vim\n\nPatch 7.4.2221\nProblem:    printf() does not support binary format.\nSolution:   Add %b and %B. (Ozaki Kiichi)\nFiles:      runtime/doc/eval.txt, src/message.c, src/testdir/test_expr.vim\n\nPatch 7.4.2222\nProblem:    Sourcing a script where a character has 0x80 as a second byte does\n            not work. (Filipe L B Correia)\nSolution:   Turn 0x80 into K_SPECIAL KS_SPECIAL KE_FILLER. (Christian\n            Brabandt, closes #728)  Add a test case.\nFiles:      src/getchar.c, src/proto/getchar.pro, src/misc1.c,\n            src/testdir/test_regexp_utf8.vim\n\nPatch 7.4.2223\nProblem:    Buffer overflow when using latin1 character with feedkeys().\nSolution:   Check for an illegal character.  Add a test.\nFiles:      src/testdir/test_regexp_utf8.vim, src/testdir/test_source_utf8.vim,\n            src/testdir/test_alot_utf8.vim, src/Makefile, src/getchar.c,\n            src/macros.h, src/evalfunc.c, src/os_unix.c, src/os_win32.c,\n            src/spell.c,\n\nPatch 7.4.2224\nProblem:    Compiler warnings with older compiler and 64 bit numbers.\nSolution:   Add \"LL\" to large values. (Mike Williams)\nFiles:      src/eval.c, src/evalfunc.c\n\nPatch 7.4.2225\nProblem:    Crash when placing a sign in a deleted buffer.\nSolution:   Check for missing buffer name. (Dominique Pelle). Add a test.\nFiles:      src/ex_cmds.c, src/testdir/test_signs.vim\n\nPatch 7.4.2226\nProblem:    The field names used by getbufinfo(), gettabinfo() and\n            getwininfo() are not consistent.\nSolution:   Use bufnr, winnr and tabnr. (Yegappan Lakshmanan)\nFiles:      runtime/doc/eval.txt, src/evalfunc.c,\n            src/testdir/test_bufwintabinfo.vim\n\nPatch 7.4.2227\nProblem:    Tab page tests are old style.\nSolution:   Change into new style tests. (Hirohito Higashi)\nFiles:      src/Makefile, src/testdir/Make_all.mak, src/testdir/test62.in,\n            src/testdir/test62.ok, src/testdir/test_alot.vim,\n            src/testdir/test_tabpage.vim\n\nPatch 7.4.2228\nProblem:    Test files have inconsistent modelines.\nSolution:   Don't set 'tabstop' to 2, use 'sts' and 'sw'.\nFiles:      src/testdir/README.txt, src/testdir/test_backspace_opt.vim,\n            src/testdir/test_digraph.vim, src/testdir/test_gn.vim\n            src/testdir/test_help_tagjump.vim,\n            src/testdir/test_increment_dbcs.vim,\n            src/testdir/test_increment.vim, src/testdir/test_match.vim,\n            src/testdir/test_tagjump.vim, src/testdir/test_window_cmd.vim,\n            src/testdir/test_regexp_latin.vim, src/testdir/test_timers.vim\n\nPatch 7.4.2229\nProblem:    Startup test fails on Solaris.\nSolution:   Recognize a character device. (Danek Duvall)\nFiles:      src/buffer.c, src/fileio.c, src/proto/fileio.pro, src/vim.h\n\nPatch 7.4.2230\nProblem:    There is no equivalent of 'smartcase' for a tag search.\nSolution:   Add value \"followscs\" and \"smart\" to 'tagcase'. (Christian\n            Brabandt, closes #712) Turn tagcase test into new style.\nFiles:      runtime/doc/options.txt, runtime/doc/tagsrch.txt, src/option.h,\n            src/tag.c, src/search.c, src/proto/search.pro,\n            src/testdir/test_tagcase.in, src/testdir/test_tagcase.ok,\n            src/testdir/test_tagcase.vim, src/Makefile,\n            src/testdir/Make_all.mak, src/testdir/test_alot.vim\n\nPatch 7.4.2231\nProblem:    \":oldfiles\" output is a very long list.\nSolution:   Add a pattern argument. (Coot, closes #575)\nFiles:      runtime/doc/starting.txt, src/ex_cmds.h, src/eval.c,\n            src/ex_cmds.c, src/proto/eval.pro, src/proto/ex_cmds.pro,\n            src/testdir/test_viminfo.vim\n\nPatch 7.4.2232\nProblem:    The default ttimeoutlen is very long.\nSolution:   Use \"100\". (Hirohito Higashi)\nFiles:      runtime/defaults.vim\n\nPatch 7.4.2233\nProblem:    Crash when using funcref() with invalid name. (Dominique Pelle)\nSolution:   Check for NULL translated name.\nFiles:      src/evalfunc.c, src/testdir/test_expr.vim\n\nPatch 7.4.2234\nProblem:    Can't build with +eval but without +quickfix. (John Marriott)\nSolution:   Move skip_vimgrep_pat() to separate #ifdef block.\nFiles:      src/quickfix.c\n\nPatch 7.4.2235\nProblem:    submatch() does not check for a valid argument.\nSolution:   Give an error if the argument is out of range. (Dominique Pelle)\nFiles:      src/evalfunc.c, src/testdir/test_expr.vim\n\nPatch 7.4.2236\nProblem:    The 'langnoremap' option leads to double negatives.  And it does\n            not work for the last character of a mapping.\nSolution:   Add 'langremap' with the opposite value.  Keep 'langnoremap' for\n            backwards compatibility.  Make it work for the last character of a\n            mapping.  Make the test work.\nFiles:      runtime/doc/options.txt, runtime/defaults.vim, src/option.c,\n            src/option.h, src/macros.h, src/testdir/test_mapping.vim\n\nPatch 7.4.2237\nProblem:    Can't use \".\" and \"$\" with \":tab\".\nSolution:   Support a range for \":tab\". (Hirohito Higashi)\nFiles:      runtime/doc/tabpage.txt, src/ex_docmd.c,\n            src/testdir/test_tabpage.vim\n\nPatch 7.4.2238\nProblem:    With SGR mouse reporting (suckless terminal) the mouse release and\n            scroll up/down is confused.\nSolution:   Don't see a release as a scroll up/down. (Ralph Eastwood)\nFiles:      src/term.c\n\nPatch 7.4.2239\nProblem:    Warning for missing declaration of skip_vimgrep_pat(). (John\n            Marriott)\nSolution:   Move it to another file.\nFiles:      src/quickfix.c, src/proto/quickfix.pro, src/ex_cmds.c,\n            src/proto/ex_cmds.pro\n\nPatch 7.4.2240\nProblem:    Tests using the sleep time can be flaky.\nSolution:   Use reltime() if available. (Partly by Shane Harper)\nFiles:      src/testdir/shared.vim, src/testdir/test_timers.vim\n\nPatch 7.4.2241 (after 7.4.2240)\nProblem:    Timer test sometimes fails.\nSolution:   Increase the maximum time for repeating timer.\nFiles:      src/testdir/test_timers.vim\n\nPatch 7.4.2242 (after 7.4.2240)\nProblem:    Timer test sometimes fails.\nSolution:   Increase the maximum time for callback timer test.\nFiles:      src/testdir/test_timers.vim\n\nPatch 7.4.2243\nProblem:    Warning for assigning negative value to unsigned. (Danek Duvall)\nSolution:   Make cterm_normal_fg_gui_color and _bg_ guicolor_T, cast to long_u\n            only when an unsigned is needed.\nFiles:      src/structs.h, src/globals.h, src/screen.c, src/term.c,\n            src/syntax.c, src/gui_gtk_x11.c, src/gui.c, src/gui_mac.c,\n            src/gui_photon.c, src/gui_w32.c, src/gui_x11.c,\n            src/proto/term.pro, src/proto/gui_gtk_x11.pro,\n            src/proto/gui_mac.pro, src/proto/gui_photon.pro,\n            src/proto/gui_w32.pro, src/proto/gui_x11.pro\n\nPatch 7.4.2244\nProblem:    Adding pattern to \":oldfiles\" is not a generic solution.\nSolution:   Add the \":filter /pat/ cmd\" command modifier.  Only works for some\n            commands right now.\nFiles:      src/structs.h, src/ex_docmd.c, src/ex_cmds.h, src/message.c,\n            src/proto/message.pro, runtime/doc/starting.txt,\n            runtime/doc/various.txt, src/testdir/test_viminfo.vim,\n            src/testdir/test_alot.vim, src/testdir/test_filter_cmd.vim,\n            src/Makefile\n\nPatch 7.4.2245 (after 7.4.2244)\nProblem:    Filter test fails.\nSolution:   Include missing changes.\nFiles:      src/buffer.c\n\nPatch 7.4.2246 (after 7.4.2244)\nProblem:    Oldfiles test fails.\nSolution:   Include missing changes.\nFiles:      src/ex_cmds.c\n\nPatch 7.4.2247 (after 7.4.2244)\nProblem:    Tiny build fails. (Tony Mechelynck)\nSolution:   Remove #ifdef.\nFiles:      src/ex_cmds.c\n\nPatch 7.4.2248\nProblem:    When cancelling the :ptjump prompt a preview window is opened for\n            a following command.\nSolution:   Reset g_do_tagpreview. (Hirohito Higashi)  Add a test.  Avoid that\n            the test runner gets stuck in trying to close a window.\nFiles:      src/tag.c, src/testdir/test_tagjump.vim, src/testdir/runtest.vim\n\nPatch 7.4.2249\nProblem:    Missing colon in error message.\nSolution:   Add the colon. (Dominique Pelle)\nFiles:      src/userfunc.c\n\nPatch 7.4.2250\nProblem:    Some error messages cannot be translated.\nSolution:   Enclose them in _() and N_(). (Dominique Pelle)\nFiles:      src/channel.c, src/evalfunc.c, src/ex_cmds.c, src/spell.c,\n            src/window.c\n\nPatch 7.4.2251\nProblem:    In rare cases diffing 4 buffers is not enough.\nSolution:   Raise the limit to 8. (closes #1000)\nFiles:      src/structs.h, runtime/doc/diff.txt\n\nPatch 7.4.2252\nProblem:    Compiler warnings for signed/unsigned in expression.\nSolution:   Remove type cast. (Dominique Pelle)\nFiles:      src/vim.h\n\nPatch 7.4.2253\nProblem:    Check for Windows 3.1 will always return false.  (Christian\n            Brabandt)\nSolution:   Remove the dead code.\nFiles:      src/gui_w32.c, src/evalfunc.c, src/ex_cmds.c, src/option.c,\n            src/os_win32.c, src/version.c, src/proto/gui_w32.pro\n\nPatch 7.4.2254\nProblem:    Compiler warnings in MzScheme code.\nSolution:   Add UNUSED.  Remove unreachable code.\nFiles:      src/if_mzsch.c\n\nPatch 7.4.2255\nProblem:    The script that checks translations can't handle plurals.\nSolution:   Check for plural msgid and msgstr entries.  Leave the cursor on\n            the first error.\nFiles:      src/po/check.vim\n\nPatch 7.4.2256\nProblem:    Coverity complains about null pointer check.\nSolution:   Remove wrong and superfluous error check.\nFiles:      src/eval.c\n\nPatch 7.4.2257\nProblem:    Coverity complains about not checking for NULL.\nSolution:   Check for out of memory.\nFiles:      src/if_py_both.h\n\nPatch 7.4.2258\nProblem:    Two JSON messages are sent without a separator.\nSolution:   Separate messages with a NL. (closes #1001)\nFiles:      src/json.c, src/channel.c, src/vim.h, src/testdir/test_channel.py,\n            src/testdir/test_channel.vim, runtime/doc/channel.txt\n\nPatch 7.4.2259\nProblem:    With 'incsearch' can only see the next match.\nSolution:   Make CTRL-N/CTRL-P move to the previous/next match. (Christian\n            Brabandt)\nFiles:      runtime/doc/cmdline.txt, src/ex_getln.c, src/testdir/Make_all.mak,\n            src/testdir/test_search.vim, src/Makefile\n\nPatch 7.4.2260 (after 7.4.2258)\nProblem:    Channel test is flaky.\nSolution:   Add a newline to separate JSON messages.\nFiles:      src/testdir/test_channel.vim\n\nPatch 7.4.2261 (after 7.4.2259)\nProblem:    Build fails with small features.\nSolution:   Move \"else\" inside the #ifdef.\nFiles:      src/ex_getln.c\n\nPatch 7.4.2262\nProblem:    Fail to read register content from viminfo if it is 438 characters\n            long. (John Chen)\nSolution:   Adjust the check for line wrapping. (closes #1010)\nFiles:      src/testdir/test_viminfo.vim, src/ex_cmds.c\n\nPatch 7.4.2263\nProblem:    :filter does not work for many commands.  Can only get matching\n            messages.\nSolution:   Make :filter work for :command, :map, :list, :number and :print.\n            Make \":filter!\" show non-matching lines.\nFiles:      src/getchar.c, src/ex_cmds.c, src/ex_cmds.h, src/ex_docmd.c,\n            src/message.c, src/structs.h, src/testdir/test_filter_cmd.vim\n\nPatch 7.4.2264\nProblem:    When adding entries to an empty quickfix list the title is reset.\nSolution:   Improve handling of the title. (Yegappan Lakshmanan)\nFiles:      src/testdir/test_quickfix.vim, src/quickfix.c\n\nPatch 7.4.2265\nProblem:    printf() isn't tested much.\nSolution:   Add more tests for printf(). (Dominique Pelle)\nFiles:      src/testdir/test_expr.vim\n\nPatch 7.4.2266 (after 7.4.2265)\nProblem:    printf() test fails on Windows. \"-inf\" is not used.\nSolution:   Check for Windows-specific values for \"nan\".  Add sign to \"inf\"\n            when appropriate.\nFiles:      src/message.c, src/testdir/test_expr.vim\n\nPatch 7.4.2267 (after 7.4.2266)\nProblem:    Build fails on MS-Windows.\nSolution:   Add define to get isinf().\nFiles:      src/message.c\n\nPatch 7.4.2268 (after 7.4.2259)\nProblem:    Using CTRL-N and CTRL-P for incsearch shadows completion keys.\nSolution:   Use CTRL-T and CTRL-G instead.\nFiles:      runtime/doc/cmdline.txt, src/ex_getln.c,\n            src/testdir/test_search.vim\n\nPatch 7.4.2269\nProblem:    Using 'hlsearch' highlighting instead of matchpos if there is no\n            search match.\nSolution:   Pass NULL as last item to next_search_hl() when searching for\n            'hlsearch' match. (Shane Harper, closes #1013)\nFiles:      src/screen.c, src/testdir/test_match.vim.\n\nPatch 7.4.2270\nProblem:    Insufficient testing for NUL bytes on a raw channel.\nSolution:   Add a test for writing and reading.\nFiles:      src/testdir/test_channel.vim\n\nPatch 7.4.2271\nProblem:    Netbeans test doesn't read settings from file.\nSolution:   Use \"-Xnbauth\".\nFiles:      src/testdir/test_netbeans.vim\n\nPatch 7.4.2272\nProblem:    getbufinfo(), getwininfo() and gettabinfo() are inefficient.\nSolution:   Instead of making a copy of the variables dictionary, use a\n            reference.\nFiles:      src/evalfunc.c\n\nPatch 7.4.2273\nProblem:    getwininfo() and getbufinfo() are inefficient.\nSolution:   Do not make a copy of all window/buffer-local options.  Make it\n            possible to get them with gettabwinvar() or getbufvar().\nFiles:      src/evalfunc.c, src/eval.c, src/testdir/test_bufwintabinfo.vim,\n            runtime/doc/eval.txt\n\nPatch 7.4.2274\nProblem:    Command line completion on \"find **/filename\" drops sub-directory.\nSolution:   Handle this case separately. (Harm te Hennepe, closes #932, closes\n            #939)\nFiles:      src/misc1.c, src/testdir/test_cmdline.vim\n\nPatch 7.4.2275\nProblem:    \":diffoff!\" does not remove filler lines.\nSolution:   Force a redraw and invalidate the cursor. (closes #1014)\nFiles:      src/diff.c, src/testdir/test_diffmode.vim\n\nPatch 7.4.2276\nProblem:    Command line test fails on Windows when run twice.\nSolution:   Wipe the buffer so that the directory can be deleted.\nFiles:      src/testdir/test_cmdline.vim\n\nPatch 7.4.2277\nProblem:    Memory leak in getbufinfo() when there is a sign. (Dominique\n            Pelle)\nSolution:   Remove extra vim_strsave().\nFiles:      src/evalfunc.c\n\nPatch 7.4.2278\nProblem:    New users have no idea of the 'scrolloff' option.\nSolution:   Set 'scrolloff' in defaults.vim.\nFiles:      runtime/defaults.vim\n\nPatch 7.4.2279\nProblem:    Starting diff mode with the cursor in the last line might end up\n            only showing one closed fold. (John Beckett)\nSolution:   Scroll the window to show the same relative cursor position.\nFiles:      src/diff.c, src/window.c, src/proto/window.pro\n\nPatch 7.4.2280\nProblem:    printf() doesn't handle infinity float values correctly.\nSolution:   Add a table with possible infinity values. (Dominique Pelle)\nFiles:      src/message.c, src/testdir/test_expr.vim\n\nPatch 7.4.2281\nProblem:    Timer test fails sometimes.\nSolution:   Reduce minimum time by 1 msec.\nFiles:      src/testdir/test_timers.vim\n\nPatch 7.4.2282\nProblem:    When a child process is very fast waiting 10 msec for it is\n            noticeable. (Ramel Eshed)\nSolution:   Start waiting for 1 msec and gradually increase.\nFiles:      src/os_unix.c\n\nPatch 7.4.2283\nProblem:    Part of \":oldfiles\" command isn't cleared. (Lifepillar)\nSolution:   Clear the rest of the line. (closes 1018)\nFiles:      src/ex_cmds.c\n\nPatch 7.4.2284\nProblem:    Comment in scope header file is outdated. (KillTheMule)\nSolution:   Point to the help instead. (closes #1017)\nFiles:      src/if_cscope.h\n\nPatch 7.4.2285\nProblem:    Generated files are outdated.\nSolution:   Generate the files.  Avoid errors when generating prototypes.\nFiles:      src/if_mzsch.h, src/Makefile, src/option.h, src/os_mac_conv.c,\n            src/os_amiga.c, src/vim.h, src/structs.h, src/os_win32.c,\n            src/if_lua.c, src/proto/mbyte.pro\n\nPatch 7.4.2286\nProblem:    The tee program isn't included.  Makefile contains build\n            instructions that don't work.\nSolution:   Update the Filelist and build instructions. Remove build\n            instructions for DOS and old Windows.  Add the tee program.\nFiles:      Filelist, Makefile, nsis/gvim.nsi\n\nPatch 7.4.2287\nProblem:    The callback passed to ch_sendraw() is not used.\nSolution:   Pass the read part, not the send part. (haya14busa, closes #1019)\nFiles:      src/channel.c, src/testdir/test_channel.vim\n\nPatch 7.4.2288\nProblem:    MS-Windows build instructions are clumsy. \"dosbin\" doesn't build.\nSolution:   Add rename.bat. Fix building \"dosbin\".\nFiles:      Makefile, Filelist, rename.bat\n\nPatch 7.4.2289\nProblem:    When installing and $DESTDIR is set the icons probably won't be\n            installed.\nSolution:   Create the icon directories if $DESTDIR is not empty. (Danek\n            Duvall)\nFiles:      src/Makefile\n\nPatch 7.4.2290\nProblem:    Compiler warning in tiny build. (Tony Mechelynck)\nSolution:   Add #ifdef around infinity_str().\nFiles:      src/message.c\n\nPatch 7.4.2291\nProblem:    printf() handles floats wrong when there is a sign.\nSolution:   Fix placing the sign.  Add tests. (Dominique Pelle)\nFiles:      src/testdir/test_expr.vim, runtime/doc/eval.txt, src/message.c\n\nPatch 7.4.2292 (after 7.4.2291)\nProblem:    Not all systems understand %F in printf().\nSolution:   Use %f.\nFiles:      src/message.c\n\nPatch 7.4.2293\nProblem:    Modelines in source code are inconsistent.\nSolution:   Use the same line in most files.  Add 'noet'.  (Naruhiko Nishino)\nFiles:      src/alloc.h, src/arabic.c, src/arabic.h, src/ascii.h,\n            src/blowfish.c, src/buffer.c, src/channel.c, src/charset.c,\n            src/crypt.c, src/crypt_zip.c, src/dict.c, src/diff.c,\n            src/digraph.c, src/dosinst.c, src/dosinst.h, src/edit.c,\n            src/eval.c, src/evalfunc.c, src/ex_cmds.c, src/ex_cmds.h,\n            src/ex_cmds2.c, src/ex_docmd.c, src/ex_eval.c, src/ex_getln.c,\n            src/farsi.c, src/farsi.h, src/feature.h, src/fileio.c, src/fold.c,\n            src/getchar.c, src/glbl_ime.cpp, src/glbl_ime.h, src/globals.h,\n            src/gui.c, src/gui.h, src/gui_at_fs.c, src/gui_at_sb.c,\n            src/gui_at_sb.h, src/gui_athena.c, src/gui_beval.c,\n            src/gui_beval.h, src/gui_gtk.c, src/gui_gtk_f.c, src/gui_gtk_f.h,\n            src/gui_gtk_vms.h, src/gui_gtk_x11.c, src/gui_mac.c,\n            src/gui_motif.c, src/gui_photon.c, src/gui_w32.c, src/gui_x11.c,\n            src/gui_x11_pm.h, src/gui_xmdlg.c, src/gui_xmebw.c,\n            src/gui_xmebw.h, src/gui_xmebwp.h, src/hangulin.c, src/hardcopy.c,\n            src/hashtab.c, src/if_cscope.c, src/if_cscope.h, src/if_mzsch.c,\n            src/if_mzsch.h, src/if_ole.cpp, src/if_perl.xs, src/if_perlsfio.c,\n            src/if_python3.c, src/if_ruby.c, src/if_tcl.c, src/if_xcmdsrv.c,\n            src/integration.c, src/integration.h, src/iscygpty.c, src/json.c,\n            src/json_test.c, src/keymap.h, src/list.c, src/macros.h,\n            src/main.c, src/mark.c, src/mbyte.c, src/memfile.c,\n            src/memfile_test.c, src/memline.c, src/menu.c, src/message.c,\n            src/message_test.c, src/misc1.c, src/misc2.c, src/move.c,\n            src/nbdebug.c, src/nbdebug.h, src/netbeans.c, src/normal.c,\n            src/ops.c, src/option.c, src/option.h, src/os_amiga.c,\n            src/os_amiga.h, src/os_beos.c, src/os_beos.h, src/os_dos.h,\n            src/os_mac.h, src/os_mac_conv.c, src/os_macosx.m, src/os_mint.h,\n            src/os_mswin.c, src/os_qnx.c, src/os_qnx.h, src/os_unix.c,\n            src/os_unix.h, src/os_unixx.h, src/os_vms.c, src/os_w32dll.c,\n            src/os_w32exe.c, src/os_win32.c, src/os_win32.h, src/popupmnu.c,\n            src/proto.h, src/pty.c, src/quickfix.c, src/regexp.c,\n            src/regexp.h, src/regexp_nfa.c, src/screen.c, src/search.c,\n            src/sha256.c, src/spell.c, src/spell.h, src/spellfile.c,\n            src/structs.h, src/syntax.c, src/tag.c, src/term.c, src/term.h,\n            src/termlib.c, src/ui.c, src/undo.c, src/uninstal.c,\n            src/userfunc.c, src/version.c, src/version.h, src/vim.h,\n            src/vim.rc, src/vimio.h, src/vimrun.c, src/winclip.c,\n            src/window.c, src/workshop.c, src/workshop.h, src/wsdebug.c,\n            src/wsdebug.h, src/xpm_w32.c\n\nPatch 7.4.2294\nProblem:    Sign test fails on MS-Windows when using the distributed zip\n            archives.\nSolution:   Create dummy files instead of relying on files in the pixmaps\n            directory.\nFiles:      src/testdir/test_signs.vim\n\nPatch 7.4.2295 (after 7.4.2293)\nProblem:    Cscope test fails.\nSolution:   Avoid checking for specific line and column numbers.\nFiles:      src/testdir/test_cscope.vim\n\nPatch 7.4.2296\nProblem:    No tests for :undolist and \"U\" command.\nSolution:   Add tests. (Dominique Pelle)\nFiles:      src/testdir/test_undo.vim\n\nPatch 7.4.2297\nProblem:    When starting a job that reads from a buffer and reaching the end,\n            the job hangs.\nSolution:   Close the pipe or socket when all lines were read.\nFiles:      src/channel.c, src/testdir/test_channel.vim\n\nPatch 7.4.2298\nProblem:    It is not possible to close the \"in\" part of a channel.\nSolution:   Add ch_close_in().\nFiles:      src/evalfunc.c, src/channel.c, src/proto/channel.pro,\n            src/testdir/test_channel.vim, runtime/doc/eval.txt,\n            runtime/doc/channel.txt\n\nPatch 7.4.2299\nProblem:    QuickFixCmdPre and QuickFixCmdPost autocommands are not always\n            triggered.\nSolution:   Also trigger on \":cexpr\", \":cbuffer\", etc. (Yegappan Lakshmanan)\nFiles:      src/quickfix.c, src/testdir/test_quickfix.vim\n\nPatch 7.4.2300\nProblem:    Get warning for deleting autocommand group when the autocommand\n            using the group is scheduled for deletion. (Pavol Juhas)\nSolution:   Check for deleted autocommand.\nFiles:      src/fileio.c, src/testdir/test_autocmd.vim\n\nPatch 7.4.2301\nProblem:    MS-Windows: some files remain after testing.\nSolution:   Close the channel output file.  Wait for the file handle to be\n            closed before deleting the file.\nFiles:      src/os_win32.c, src/testdir/test_channel.vim\n\nPatch 7.4.2302\nProblem:    Default interface versions for MS-Windows are outdated.\nSolution:   Use Active Perl 5.24, Python 3.5.2.  Could only make it work with\n            Ruby 1.9.2.\nFiles:      src/bigvim.bat, src/bigvim64.bat, src/Make_mvc.mak\n\nPatch 7.4.2303\nProblem:    When using \"is\" the mode isn't always updated.\nSolution:   Redraw the command line. (Christian Brabandt)\nFiles:      src/search.c\n\nPatch 7.4.2304\nProblem:    In a timer callback the timer itself can't be found or stopped.\n            (Thinca)\nSolution:   Do not remove the timer from the list, remember whether it was\n            freed.\nFiles:      src/ex_cmds2.c, src/testdir/test_timers.vim\n\nPatch 7.4.2305\nProblem:    Marks, writefile and nested function tests are old style.\nSolution:   Turn them into new style tests. (Yegappan Lakshmanan)\nFiles:      src/testdir/Make_all.mak, src/testdir/test_marks.in,\n            src/testdir/test_marks.ok, src/testdir/test_marks.vim,\n            src/testdir/test_nested_function.in,\n            src/testdir/test_nested_function.ok,\n            src/testdir/test_nested_function.vim,\n            src/testdir/test_writefile.in, src/testdir/test_writefile.ok,\n            src/testdir/test_writefile.vim, src/Makefile\n\nPatch 7.4.2306\nProblem:    Default value for 'langremap' is wrong.\nSolution:   Set the right value. (J\u00fcrgen Kr\u00e4mer)  Add a test.\nFiles:      src/option.c, src/testdir/test_mapping.vim\n\nPatch 7.4.2307\nProblem:    Several tests are old style.\nSolution:   Turn them into new style tests. (Yegappan Lakshmanan)\nFiles:      src/testdir/Make_all.mak, src/testdir/test102.in,\n            src/testdir/test102.ok, src/testdir/test46.in,\n            src/testdir/test46.ok, src/testdir/test81.in,\n            src/testdir/test81.ok, src/testdir/test_charsearch.in,\n            src/testdir/test_charsearch.ok, src/testdir/test_charsearch.vim,\n            src/testdir/test_fnameescape.vim, src/testdir/test_substitute.vim,\n            src/Makefile\n\nPatch 7.4.2308 (after 7.4.2307)\nProblem:    Old charsearch test still listed in Makefile.\nSolution:   Remove the line.\nFiles:      src/testdir/Make_all.mak\n\nPatch 7.4.2309\nProblem:    Crash when doing tabnext in a BufUnload autocmd. (Dominique Pelle)\nSolution:   When detecting that the tab page changed, don't just abort but\n            delete the window where w_buffer is NULL.\nFiles:      src/window.c, src/testdir/test_tabpage.vim\n\nPatch 7.4.2310 (after 7.4.2304)\nProblem:    Accessing freed memory when a timer does not repeat.\nSolution:   Free after removing it. (Dominique Pelle)\nFiles:      src/ex_cmds2.c\n\nPatch 7.4.2311\nProblem:    Appveyor 64 bit build still using Python 3.4\nSolution:   Switch to Python 3.5. (Ken Takata, closes #1032)\nFiles:      appveyor.yml, src/appveyor.bat\n\nPatch 7.4.2312\nProblem:    Crash when autocommand moves to another tab. (Dominique Pelle)\nSolution:   When navigating to another window halfway the :edit command go\n            back to the right window.\nFiles:      src/buffer.c, src/ex_cmds.c, src/ex_getln.c, src/ex_docmd.c,\n            src/window.c, src/proto/ex_getln.pro, src/testdir/test_tabpage.vim\n\nPatch 7.4.2313\nProblem:    Crash when deleting an augroup and listing an autocommand.\n            (Dominique Pelle)\nSolution:   Make sure deleted_augroup is valid.\nFiles:      src/fileio.c, src/testdir/test_autocmd.vim\n\nPatch 7.4.2314\nProblem:    No error when deleting an augroup while it's the current one.\nSolution:   Disallow deleting an augroup when it's the current one.\nFiles:      src/fileio.c, src/testdir/test_autocmd.vim\n\nPatch 7.4.2315\nProblem:    Insufficient testing for Normal mode commands.\nSolution:   Add a big test. (Christian Brabandt, closes #1029)\nFiles:      src/Makefile, src/testdir/Make_all.mak,\n            src/testdir/test_normal.vim\n\nPatch 7.4.2316\nProblem:    Channel sort test is flaky.\nSolution:   Add a check the output has been read.\nFiles:      src/testdir/test_channel.vim\n\nPatch 7.4.2317 (after 7.4.2315)\nProblem:    Normal mode tests fail on MS-Windows.\nSolution:   Do some tests only on Unix.  Set 'fileformat' to \"unix\".\nFiles:      src/testdir/test_normal.vim\n\nPatch 7.4.2318\nProblem:    When 'incsearch' is not set CTRL-T and CTRL-G are not inserted as\n            before.\nSolution:   Move #ifdef and don't use goto.\nFiles:      src/ex_getln.c\n\nPatch 7.4.2319\nProblem:    No way for a system wide vimrc to stop loading defaults.vim.\n            (Christian Hesse)\nSolution:   Bail out of defaults.vim if skip_defaults_vim was set.\nFiles:      runtime/defaults.vim\n\nPatch 7.4.2320\nProblem:    Redraw problem when using 'incsearch'.\nSolution:   Save the current view when deleting characters. (Christian\n            Brabandt) Fix that the '\" mark is set in the wrong position. Don't\n            change the search start when using BS.\nFiles:      src/ex_getln.c, src/normal.c, src/testdir/test_search.vim\n\nPatch 7.4.2321\nProblem:    When a test is commented out we forget about it.\nSolution:   Let a test throw an exception with \"Skipped\" and list skipped test\n            functions. (Christian Brabandt)\nFiles:      src/testdir/Makefile, src/testdir/runtest.vim,\n            src/testdir/test_popup.vim, src/testdir/README.txt\n\nPatch 7.4.2322\nProblem:    Access memory beyond the end of the line. (Dominique Pelle)\nSolution:   Adjust the cursor column.\nFiles:      src/move.c, src/testdir/test_normal.vim\n\nPatch 7.4.2323\nProblem:    Using freed memory when using 'formatexpr'. (Dominique Pelle)\nSolution:   Make a copy of 'formatexpr' before evaluating it.\nFiles:      src/ops.c, src/testdir/test_normal.vim\n\nPatch 7.4.2324\nProblem:    Crash when editing a new buffer and BufUnload autocommand wipes\n            out the new buffer. (Norio Takagi)\nSolution:   Don't allow wiping out this buffer. (partly by Hirohito Higashi)\n            Move old style test13 into test_autocmd. Avoid ml_get error when\n            editing a file.\nFiles:      src/structs.h, src/buffer.c, src/ex_cmds.c, src/ex_docmd.c,\n            src/window.c, src/testdir/test13.in, src/testdir/test13.ok,\n            src/testdir/test_autocmd.vim, src/testdir/Make_all.mak,\n            src/Makefile\n\nPatch 7.4.2325 (after 7.4.2324)\nProblem:    Tiny build fails.\nSolution:   Add #ifdef.\nFiles:      src/buffer.c\n\nPatch 7.4.2326\nProblem:    Illegal memory access when Visual selection starts in invalid\n            position. (Dominique Pelle)\nSolution:   Correct position when needed.\nFiles:      src/normal.c, src/misc2.c, src/proto/misc2.pro\n\nPatch 7.4.2327\nProblem:    Freeing a variable that is on the stack.\nSolution:   Don't free res_tv or err_tv. (Ozaki Kiichi)\nFiles:      src/channel.c\n\nPatch 7.4.2328\nProblem:    Crash when BufWinLeave autocmd goes to another tab page. (Hirohito\n            Higashi)\nSolution:   Make close_buffer() go back to the right window.\nFiles:      src/buffer.c, src/testdir/test_autocmd.vim\n\nPatch 7.4.2329\nProblem:    Error for min() and max() contains %s. (Nikolay Pavlov)\nSolution:   Pass the function name. (closes #1040)\nFiles:      src/evalfunc.c, src/testdir/test_expr.vim\n\nPatch 7.4.2330\nProblem:    Coverity complains about not checking curwin to be NULL.\nSolution:   Use firstwin to avoid the warning.\nFiles:      src/buffer.c\n\nPatch 7.4.2331\nProblem:    Using CTRL-X CTRL-V to complete a command line from Insert mode\n            does not work after entering an expression on the command line.\nSolution:   Don't use \"ccline\" when not actually using a command line. (test\n            by Hirohito Higashi)\nFiles:      src/edit.c, src/ex_getln.c, src/proto/ex_getln.pro,\n            src/testdir/test_popup.vim\n\nPatch 7.4.2332\nProblem:    Crash when stop_timer() is called in a callback of a callback.\n            Vim hangs when the timer callback uses too much time.\nSolution:   Set tr_id to -1 when a timer is to be deleted. Don't keep calling\n            callbacks forever. (Ozaki Kiichi)\nFiles:      src/evalfunc.c, src/ex_cmds2.c, src/structs.h,\n            src/proto/ex_cmds2.pro, src/testdir/test_timers.vim\n\nPatch 7.4.2333\nProblem:    Outdated comments in test.\nSolution:   Cleanup normal mode test. (Christian Brabandt)\nFiles:      src/testdir/test_normal.vim\n\nPatch 7.4.2334\nProblem:    On MS-Windows test_getcwd leaves Xtopdir behind.\nSolution:   Set 'noswapfile'. (Michael Soyka)\nFiles:      src/testdir/test_getcwd.in\n\nPatch 7.4.2335\nProblem:    taglist() is slow. (Luc Hermitte)\nSolution:   Check for CTRL-C less often when doing a linear search. (closes\n            #1044)\nFiles:      src/tag.c\n\nPatch 7.4.2336\nProblem:    Running normal mode tests leave a couple of files behind.\n            (Yegappan Lakshmanan)\nSolution:   Delete the files. (Christian Brabandt)\nFiles:      src/testdir/test_normal.vim\n\nPatch 7.4.2337\nProblem:    taglist() is still slow. (Luc Hermitte)\nSolution:   Check for CTRL-C less often when finding duplicates.\nFiles:      src/tag.c\n\nPatch 7.4.2338\nProblem:    Can't build with small features. (John Marriott)\nSolution:   Nearly always define FEAT_TAG_BINS.\nFiles:      src/feature.h, src/tag.c\n\nPatch 7.4.2339\nProblem:    Tab page test fails when run as fake root.\nSolution:   Check 'buftype' instead of 'filetype'. (James McCoy, closes #1042)\nFiles:      src/testdir/test_tabpage.vim\n\nPatch 7.4.2340\nProblem:    MS-Windows: Building with Ruby uses old version.\nSolution:   Update to 2.2.X. Use clearer name for the API version. (Ken\n            Takata)\nFiles:      Makefile, src/INSTALLpc.txt, src/Make_cyg_ming.mak,\n            src/Make_mvc.mak, src/bigvim.bat\n\nPatch 7.4.2341\nProblem:    Tiny things.  Test doesn't clean up properly.\nSolution:   Adjust comment and white space. Restore option value.\nFiles:      src/ex_cmds.c, src/message.c, src/testdir/test_autocmd.vim\n\nPatch 7.4.2342\nProblem:    Typo in MS-Windows build script.\nSolution:   change \"w2\" to \"22\".\nFiles:      src/bigvim.bat\n\nPatch 7.4.2343\nProblem:    Too many old style tests.\nSolution:   Turn several into new style tests. (Yegappan Lakshmanan)\nFiles:      src/testdir/Make_all.mak, src/testdir/test101.in,\n            src/testdir/test101.ok, src/testdir/test18.in,\n            src/testdir/test18.ok, src/testdir/test2.in, src/testdir/test2.ok,\n            src/testdir/test21.in, src/testdir/test21.ok,\n            src/testdir/test6.in, src/testdir/test6.ok,\n            src/testdir/test_arglist.vim, src/testdir/test_charsearch.vim,\n            src/testdir/test_fnameescape.vim, src/testdir/test_gf.vim,\n            src/testdir/test_hlsearch.vim, src/testdir/test_smartindent.vim,\n            src/testdir/test_tagjump.vim, src/Makefile\n\nPatch 7.4.2344\nProblem:    The \"Reading from channel output...\" message can be unwanted.\n            Appending to a buffer leaves an empty first line behind.\nSolution:   Add the \"out_msg\" and \"err_msg\" options. Writing the first line\n            overwrites the first, empty line.\nFiles:      src/structs.h, src/channel.c, src/testdir/test_channel.vim,\n            runtime/doc/channel.txt\n\nPatch 7.4.2345 (after 7.4.2340)\nProblem:    For MinGW RUBY_API_VER_LONG isn't set correctly.  Many default\n            version numbers are outdated.\nSolution:   Set RUBY_API_VER_LONG to RUBY_VER_LONG. Use latest stable releases\n            for defaults. (Ken Takata)\nFiles:      src/Make_cyg_ming.mak, src/Make_mvc.mak\n\nPatch 7.4.2346\nProblem:    Autocommand test fails when run directly, passes when run as part\n            of test_alot.\nSolution:   Add command to make the cursor move.  Close a tab page.\nFiles:      src/testdir/test_autocmd.vim\n\nPatch 7.4.2347\nProblem:    Crash when closing a buffer while Visual mode is active.\n            (Dominique Pelle)\nSolution:   Adjust the position before computing the number of lines.\n            When closing the current buffer stop Visual mode.\nFiles:      src/buffer.c, src/normal.c, src/testdir/test_normal.vim\n\nPatch 7.4.2348\nProblem:    Crash on exit when EXITFREE is defined. (Dominique Pelle)\nSolution:   Don't access curwin when exiting.\nFiles:      src/buffer.c\n\nPatch 7.4.2349\nProblem:    Valgrind reports using uninitialzed memory. (Dominique Pelle)\nSolution:   Check the length before checking for a NUL.\nFiles:      src/message.c\n\nPatch 7.4.2350\nProblem:    Test 86 and 87 fail with some version of Python.\nSolution:   Unify \"can't\" and \"cannot\".  Unify quotes.\nFiles:      src/testdir/test86.in, src/testdir/test86.ok,\n            src/testdir/test87.in, src/testdir/test87.ok\n\nPatch 7.4.2351\nProblem:    Netbeans test fails when run from unpacked MS-Windows sources.\nSolution:   Open README.txt instead of Makefile.\nFiles:      src/testdir/test_netbeans.py, src/testdir/test_netbeans.vim\n\nPatch 7.4.2352\nProblem:    Netbeans test fails in shadow directory.\nSolution:   Also copy README.txt to the shadow directory.\nFiles:      src/Makefile\n\nPatch 7.4.2353\nProblem:    Not enough test coverage for Normal mode commands.\nSolution:   Add more tests. (Christian Brabandt)\nFiles:      src/testdir/test_normal.vim\n\nPatch 7.4.2354\nProblem:    The example that explains nested backreferences does not work\n            properly with the new regexp engine. (Harm te Hennepe)\nSolution:   Also save the end position when adding a state. (closes #990)\nFiles:      src/regexp_nfa.c, src/testdir/test_regexp_latin.vim\n\nPatch 7.4.2355\nProblem:    Regexp fails to match when using \"\\>\\)\\?\". (Ramel)\nSolution:   When a state is already in the list, but addstate_here() is used\n            and the existing state comes later, add the new state anyway.\nFiles:      src/regexp_nfa.c, src/testdir/test_regexp_latin.vim\n\nPatch 7.4.2356\nProblem:    Reading past end of line when using previous substitute pattern.\n            (Dominique Pelle)\nSolution:   Don't set \"pat\" only set \"searchstr\".\nFiles:      src/search.c, src/testdir/test_search.vim\n\nPatch 7.4.2357\nProblem:    Attempt to read history entry while not initialized.\nSolution:   Skip when the index is negative.\nFiles:      src/ex_getln.c\n\nPatch 7.4.2358\nProblem:    Compiler warnings with Solaris Studio when using GTK3. (Danek\n            Duvall)\nSolution:   Define FUNC2GENERIC depending on the system. (Kazunobu Kuriyama)\nFiles:      src/gui.h, src/gui_beval.c, src/gui_gtk_f.c\n\nPatch 7.4.2359\nProblem:    Memory leak in timer_start().\nSolution:   Check the right field to be NULL.\nFiles:      src/evalfunc.c, src/testdir/test_timers.vim\n\nPatch 7.4.2360\nProblem:    Invalid memory access when formatting. (Dominique Pelle)\nSolution:   Make sure cursor line and column are associated.\nFiles:      src/misc1.c\n\nPatch 7.4.2361\nProblem:    Checking for last_timer_id to overflow is not reliable. (Ozaki\n            Kiichi)\nSolution:   Check for the number not going up.\nFiles:      src/ex_cmds2.c\n\nPatch 7.4.2362\nProblem:    Illegal memory access with \":1@\". (Dominique Pelle)\nSolution:   Correct cursor column after setting the line number.  Also avoid\n            calling end_visual_mode() when not in Visual mode.\nFiles:      src/ex_docmd.c, src/buffer.c\n\nPatch 7.4.2363\nProblem:    Superfluous function prototypes.\nSolution:   Remove them.\nFiles:      src/regexp.c\n\nPatch 7.4.2364\nProblem:    Sort test sometimes fails.\nSolution:   Add it to the list of flaky tests.\nFiles:      src/testdir/runtest.vim\n\nPatch 7.4.2365\nProblem:    Needless line break. Confusing directory name.\nSolution:   Remove line break.  Prepend \"../\" to \"tools\".\nFiles:      Makefile, src/normal.c\n\n vim:tw=78:ts=8:ft=help:norl:\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/READMEdir/Xxd.info",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/READMEdir/README_ami.txt.info",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/READMEdir/README_amisrc.txt.info",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/READMEdir/README_amibin.txt.info",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/READMEdir/Vim.info",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/READMEdir/README.txt.info",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/READMEdir/Contents.info",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/READMEdir/runtime.info",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/READMEdir/src.info",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/READMEdir/vimdir.info",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/farsi/fonts/UNIXs/far-a01.pcf.Z",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/farsi/fonts/UNIXs/far-a01.f16",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/farsi/fonts/UNIXs/far-a01.pcf.gz",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/farsi/fonts/DOS/far-a01.com",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/farsi/fonts/SunOs/far-a01.fb",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/farsi/fonts/WINDOWS/far-a01.fon",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/src/hangulin.c",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/src/vim_info.ico",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/src/tools.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/src/os_beos.rsrc",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/src/vim_alert.ico",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/src/tearoff.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/src/vim_error.ico",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/src/vim_quest.ico",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/src/digraph.c",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/src/vim.tlb",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/src/vim.ico",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/src/po/cs.po",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/src/po/zh_CN.po",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/src/po/ja.euc-jp.po",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/src/po/ru.cp1251.po",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/src/po/ko.po",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/src/po/sk.po",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/src/po/cs.cp1250.po",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/src/po/zh_CN.cp936.po",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/src/po/pl.po",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/src/po/zh_TW.po",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/src/po/ca.po",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/src/po/sk.cp1250.po",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/src/po/ga.po",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/src/po/sv.po",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/src/po/uk.cp1251.po",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/src/po/nb.po",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/src/po/it.po",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/src/po/pl.cp1250.po",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/src/po/README.txt",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/src/po/no.po",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/src/po/pt_BR.po",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/src/po/ja.sjis.po",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/src/po/af.po",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/src/po/fr.po",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/src/po/de.po",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/src/po/README_mingw.txt",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/src/testdir/test58.ok",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/src/testdir/test44.in",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/src/testdir/test_increment_dbcs.vim",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/src/testdir/test39.ok",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/src/testdir/test58.in",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/src/testdir/test52.in",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/src/testdir/test_regexp_latin.vim",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/src/testdir/test71.ok",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/src/testdir/test59.in",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/src/testdir/test99.in",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/src/testdir/test42.ok",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/src/testdir/test93.in",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/src/testdir/test36.ok",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/src/testdir/test36.in",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/src/testdir/test52.ok",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/src/testdir/test71a.in",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/src/testdir/test39.in",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/src/testdir/test42.in",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/src/VisVim/VisVim.dll",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/src/VisVim/Res/ToolbarL.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/src/VisVim/Res/ToolbarM.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/src/xpm/x86/lib/libXpm.a",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/src/xpm/x86/lib/libXpm.lib",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/src/xpm/x86/lib-vc14/libXpm.lib",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/src/xpm/x64/lib/libXpm.a",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/src/xpm/x64/lib/libXpm.lib",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/src/xpm/x64/lib-vc14/libXpm.lib",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/src/GvimExt/gvimext_ming.rc",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/src/GvimExt/gvimext.rc",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/src/os_mac_rsrc/doc.icns",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/src/os_mac_rsrc/app.icns",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/src/os_mac_rsrc/doc-txt.icns",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/tutor.info",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/vimlogo.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/hi22-action-make.png",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/vim32x32.gif",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/vimlogo.cdr",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/icons.info",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/hi16-action-make.png",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/doc.info",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/tools.info",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/vim16x16.gif",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/vim48x48.png",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/macros.info",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/vim16x16.png",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/vim32x32.png",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/vim48x48.gif",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/vimlogo.gif",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/icons/Vim_8ColorsLace.info",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/icons/Vim_4ColorsLace.info",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/icons/Vim_32Colors.info",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/icons/README.txt.info",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/icons/Vim_8Colors.info",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/syntax/moo.vim",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/syntax/tilde.vim",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/syntax/pascal.vim",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/syntax/rtf.vim",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/syntax/sas.vim",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/syntax/groff.vim",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/syntax/lout.vim",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/syntax/forth.vim",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/syntax/nroff.vim",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/syntax/css.vim",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/syntax/rpl.vim",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/syntax/fortran.vim",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/syntax/initng.vim",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/syntax/iss.vim",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/syntax/mmix.vim",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/syntax/elf.vim",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/syntax/robots.vim",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/ftplugin/ocaml.vim",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/ftplugin/rpl.vim",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/ftplugin/erlang.vim",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/keymap/hebrewp_utf-8.vim",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/keymap/greek_cp737.vim",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/keymap/canfr-win.vim",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/keymap/serbian_cp1251.vim",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/keymap/slovak_iso-8859-2.vim",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/keymap/greek_iso-8859-7.vim",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/keymap/hebrew_iso-8859-8.vim",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/keymap/serbian_iso-8859-5.vim",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/keymap/accents.vim",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/keymap/serbian_cp1250.vim",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/keymap/esperanto_utf-8.vim",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/keymap/croatian_iso-8859-2.vim",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/keymap/serbian_iso-8859-2.vim",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/keymap/greek_utf-8.vim",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/keymap/croatian_cp1250.vim",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/keymap/greek_cp1253.vim",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/keymap/hebrewp_cp1255.vim",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/keymap/slovak_cp1250.vim",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/lang/menu_sr_rs.iso_8859-2.vim",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/lang/menu_uk_ua.koi8-u.vim",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/lang/menu_sr_rs.iso_8859-5.vim",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/lang/menu_sk_sk.iso_8859-2.vim",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/lang/menu_sl_si.latin2.vim",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/lang/menu_af_af.latin1.vim",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/lang/menu_ja_jp.euc-jp.vim",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/lang/menu_pt_br.vim",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/lang/menu_chinese_taiwan.950.vim",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/lang/menu_polish_poland.1250.vim",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/lang/menu_ko_kr.euckr.vim",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/lang/menu_chinese_gb.936.vim",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/lang/menu_fr_fr.latin1.vim",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/lang/menu_zh_cn.gb2312.vim",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/lang/menu_ca_es.latin1.vim",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/lang/menu_it_it.latin1.vim",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/lang/menu_czech_czech_republic.1250.vim",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/lang/menu_slovak_slovak_republic.1250.vim",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/lang/menu_es_es.latin1.vim",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/lang/menu_no_no.latin1.vim",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/lang/menu_pt_pt.latin1.vim",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/lang/menu_pt_pt.utf-8.vim",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/lang/menu_hu_hu.iso_8859-2.vim",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/lang/menu_pl_pl.iso_8859-2.vim",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/lang/menu_japanese_japan.932.vim",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/lang/menu_pt_pt.vim",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/lang/menu_uk_ua.cp1251.vim",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/lang/menu_fi_fi.latin1.vim",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/lang/menu_cs_cz.iso_8859-2.vim",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/lang/menu_nl_nl.latin1.vim",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/lang/menu_sl_si.cp1250.vim",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/lang/menu_ru_ru.koi8-r.vim",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/lang/menu_sv_se.latin1.vim",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/lang/menu_de_de.latin1.vim",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/lang/menu_ca.utf-8.vim",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/lang/menu_ca_es.utf-8.vim",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/indent/tilde.vim",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/indent/rpl.vim",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/tools/vimspell.sh",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/tutor/tutor.sr.cp1250",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/tutor/tutor.fr",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/tutor/tutor.cs.cp1250",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/tutor/tutor.info",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/tutor/tutor.ja.euc",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/tutor/tutor.tr.iso9",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/tutor/tutor.es",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/tutor/tutor.sk.cp1250",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/tutor/tutor.hr",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/tutor/tutor.bar",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/tutor/tutor.hu.cp1250",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/tutor/tutor.hu",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/tutor/tutor.zh.euc",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/tutor/tutor.nb",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/tutor/tutor.pl.cp1250",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/tutor/tutor.ja.sjis",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/tutor/tutor.el",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/tutor/tutor.ko.euc",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/tutor/tutor.hr.cp1250",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/tutor/tutor.no",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/tutor/tutor.pt",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/tutor/tutor.it",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/tutor/README.txt.info",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/tutor/tutor.eo",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/tutor/tutor.sv",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/tutor/tutor.el.cp737",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/tutor/tutor.de",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/tutor/tutor.ru",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/tutor/tutor.ca",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/tutor/tutor.sk",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/tutor/README.el.cp737.txt",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/tutor/tutor.nl",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/tutor/tutor.pl",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/tutor/README.el.txt",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/tutor/tutor.cs",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/tutor/tutor.zh.big5",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/tutor/tutor.ru.cp1251",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/macros/hanoi.info",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/macros/urm.info",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/macros/README.txt.info",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/macros/maze.info",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/macros/urm/README.txt.info",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/macros/life/click.me.info",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/macros/maze/maze_5.78.info",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/macros/maze/poster.info",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/macros/maze/README.txt.info",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/macros/hanoi/poster.info",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/macros/hanoi/click.me.info",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/doc/quotes.txt",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/doc/vimtutor-ru.1",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/doc/help.txt.info",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/doc/vim-ru.1",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/doc/map.txt",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/doc/version6.txt",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/doc/spell.txt",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/doc/xxd-ru.1",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/doc/vim-it.1",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/doc/mlang.txt",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/doc/evim-fr.1",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/doc/eval.txt",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/doc/vim-de.1",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/doc/xxd-fr.1",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/doc/vimdiff-it.1",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/doc/makehtml.awk",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/doc/xxd-pl.1",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/doc/vim.man.info",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/doc/evim-ru.1",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/doc/vimdiff-pl.1",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/doc/vim-fr.1",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/doc/usr_24.txt",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/doc/evim-pl.1",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/doc/vimtutor-fr.1",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/doc/evim-it.1",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/doc/vimdiff-fr.1",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/doc/vimtutor-pl.1",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/doc/xxd-it.1",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/doc/vim-pl.1",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/doc/vimtutor-it.1",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/doc/vimdiff-ru.1",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/doc/os_vms.txt",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/doc/farsi.txt",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/spell/en.ascii.spl",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/spell/en.latin1.sug",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/spell/en.utf-8.sug",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/spell/en.ascii.sug",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/spell/en.utf-8.spl",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/spell/en.latin1.spl",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/spell/gd/gd_GB.diff",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/spell/hr/hr_HR.diff",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/spell/nl/nl_NL.diff",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/spell/hu/hu_HU.diff",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/spell/tl/tl_PH.diff",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/spell/ca/ca_ES.diff",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/spell/es/es_MX.diff",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/spell/es/es_ES.diff",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/spell/ku/ku_TR.diff",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/spell/af/af_ZA.diff",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/spell/ru/ru_YO.diff",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/spell/ru/ru_RU.diff",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/spell/el/el_GR.diff",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/spell/tet/tet_ID.diff",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/spell/uk/uk_UA.diff",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/spell/nb/nb_NO.diff",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/spell/cs/cs_CZ.diff",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/spell/nn/nn_NO.diff",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/spell/fr/main.aap",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/spell/fr/fr_FR.diff",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/spell/de/de_DE.diff",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/spell/de/de_20.diff",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/spell/de/de_AT.diff",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/spell/de/de_CH.diff",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/spell/de/de_19.diff",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/spell/sl/sl_SI.diff",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/spell/sw/sw_KE.diff",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/spell/tn/tn_ZA.diff",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/spell/da/da_DK.diff",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/spell/check/check_aa.aff",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/spell/check/check_bb.aff",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/spell/he/he_IL.diff",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/spell/la/la.diff",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/spell/mi/mi_NZ.diff",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/spell/pt/pt_BR.diff",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/spell/en/en_NZ.diff",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/spell/en/en_AU.diff",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/spell/ga/ga_IE.diff",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/spell/yi/yi_tr.diff",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/spell/it/it_IT.diff",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/spell/pl/pl_PL.diff",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/spell/gl/gl_ES.diff",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/spell/rw/rw_RW.diff",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/spell/bg/bg_BG.diff",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/spell/id/id_ID.diff",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/spell/sv/sv_SE.diff",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/spell/ms/ms_MY.diff",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/spell/fo/fo_FO.diff",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/spell/sk/sk_SK.diff",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/runtime/spell/mg/mg_MG.diff",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/nsis/icons/vim_uninst_16c.ico",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/nsis/icons/enabled.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/nsis/icons/vim_16c.ico",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/nsis/icons/disabled.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/pixmaps/stock_vim_save_all.png",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/pixmaps/stock_vim_session_load.png",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/pixmaps/stock_vim_window_maximize.png",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/pixmaps/stock_vim_build_tags.png",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/pixmaps/stock_vim_shell.png",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/pixmaps/stock_vim_session_new.png",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/pixmaps/stock_vim_window_minimize.png",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/pixmaps/stock_vim_window_minimize_width.png",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/pixmaps/stock_vim_window_maximize_width.png",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/pixmaps/stock_vim_find_help.png",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/pixmaps/stock_vim_window_split.png",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/pixmaps/stock_vim_session_save.png",
        "/tmp/vanessa/spack-stage/spack-stage-vim-7.4.2367-s3cnkvkfvtgwqfgnuvxnnjn6el5htyzg/spack-src/pixmaps/stock_vim_window_split_vertical.png"
    ],
    "total_files": 2670
}