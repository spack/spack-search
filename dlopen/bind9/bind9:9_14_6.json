{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/HISTORY.md": "<!--\n - Copyright (C) Internet Systems Consortium, Inc. (\"ISC\")\n -\n - This Source Code Form is subject to the terms of the Mozilla Public\n - License, v. 2.0. If a copy of the MPL was not distributed with this\n - file, You can obtain one at http://mozilla.org/MPL/2.0/.\n -\n - See the COPYRIGHT file distributed with this work for additional\n - information regarding copyright ownership.\n-->\n### Functional enhancements from prior major releases of BIND 9\n\n#### BIND 9.11\n\nBIND 9.11.0 includes a number of changes from BIND 9.10 and earlier\nreleases.  New features include:\n\n- Added support for Catalog Zones, a new method for provisioning servers: a\n  list of zones to be served is stored in a DNS zone, along with their\n  configuration parameters. Changes to the catalog zone are propagated to\n  slaves via normal AXFR/IXFR, whereupon the zones that are listed in it\n  are automatically added, deleted or reconfigured.\n- Added support for \"dnstap\", a fast and flexible method of capturing and\n  logging DNS traffic.\n- Added support for \"dyndb\", a new API for loading zone data from an\n  external database, developed by Red Hat for the FreeIPA project.\n- \"fetchlimit\" quotas are now compiled in by default.  These are for the\n  use of recursive resolvers that are are under high query load for domains\n  whose authoritative servers are nonresponsive or are experiencing a\n  denial of service attack:\n    - \"fetches-per-server\" limits the number of simultaneous queries that\n      can be sent to any single authoritative server.  The configured value\n      is a starting point; it is automatically adjusted downward if the\n      server is partially or completely non-responsive. The algorithm used\n      to adjust the quota can be configured via the \"fetch-quota-params\"\n      option.\n    - \"fetches-per-zone\" limits the number of simultaneous queries that can\n      be sent for names within a single domain.  (Note: Unlike\n      \"fetches-per-server\", this value is not self-tuning.)\n    - New stats counters have been added to count queries spilled due to\n      these quotas.\n- Added a new \"dnssec-keymgr\" key mainenance utility, which can generate or\n  update keys as needed to ensure that a zone's keys match a defined DNSSEC\n  policy.\n- The experimental \"SIT\" feature in BIND 9.10 has been renamed \"COOKIE\" and\n  is no longer optional. EDNS COOKIE is a mechanism enabling clients to\n  detect off-path spoofed responses, and servers to detect spoofed-source\n  queries.  Clients that identify themselves using COOKIE options are not\n  subject to response rate limiting (RRL) and can receive larger UDP\n  responses.\n- SERVFAIL responses can now be cached for a limited time (defaulting to 1\n  second, with an upper limit of 30).  This can reduce the frequency of\n  retries when a query is persistently failing.\n- Added an \"nsip-wait-recurse\" switch to RPZ. This causes NSIP rules to be\n  skipped if a name server IP address isn't in the cache yet; the address\n  will be looked up and the rule will be applied on future queries.\n- Added a Python RNDC module. This allows multiple commands to sent over a\n  persistent RNDC channel, which saves time.\n- The \"controls\" block in named.conf can now grant read-only \"rndc\" access\n  to specified clients or keys. Read-only clients could, for example, check\n  \"rndc status\" but could not reconfigure or shut down the server.\n- \"rndc\" commands can now return arbitrarily large amounts of text to the\n  caller.\n- The zone serial number of a dynamically updatable zone can now be set via\n  \"rndc signing -serial <number> <zonename>\".  This allows inline-signing\n  zones to be set to a specific serial number.\n- The new \"rndc nta\" command can be used to set a Negative Trust Anchor\n  (NTA), disabling DNSSEC validation for a specific domain; this can be\n  used when responses from a domain are known to be failing validation due\n  to administrative error rather than because of a spoofing attack.\n  Negative trust anchors are strictly temporary; by default they expire\n  after one hour, but can be configured to last up to one week.\n- \"rndc delzone\" can now be used on zones that were not originally created\n  by \"rndc addzone\".\n- \"rndc modzone\" reconfigures a single zone, without requiring the entire\n  server to be reconfigured.\n- \"rndc showzone\" displays the current configuration of a zone.\n- \"rndc managed-keys\" can be used to check the status of RFC 5001 managed\n  trust anchors, or to force trust anchors to be refreshed.\n- \"max-cache-size\" can now be set to a percentage of available memory. The\n  default is 90%.\n- Update forwarding performance has been improved by allowing a single TCP\n  connection to be shared by multiple updates.\n- The EDNS Client Subnet (ECS) option is now supported for authoritative\n  servers; if a query contains an ECS option then ACLs containing \"geoip\"\n  or \"ecs\" elements can match against the the address encoded in the\n  option.  This can be used to select a view for a query, so that different\n  answers can be provided depending on the client network.\n- The EDNS EXPIRE option has been implemented on the client side, allowing\n  a slave server to set the expiration timer correctly when transferring\n  zone data from another slave server.\n- The key generation and manipulation tools (dnssec-keygen, dnssec-settime,\n  dnssec-importkey, dnssec-keyfromlabel) now take \"-Psync\" and \"-Dsync\"\n  options to set the publication and deletion times of CDS and CDNSKEY\n  parent-synchronization records.  Both named and dnssec-signzone can now\n  publish and remove these records at the scheduled times.\n- A new \"minimal-any\" option reduces the size of UDP responses for query\n  type ANY by returning a single arbitrarily selected RRset instead of all\n  RRsets.\n- A new \"masterfile-style\" zone option controls the formatting of text zone\n  files:  When set to \"full\", a zone file is dumped in\n  single-line-per-record format.\n- \"serial-update-method\" can now be set to \"date\". On update, the serial\n  number will be set to the current date in YYYYMMDDNN format.\n- \"dnssec-signzone -N date\" sets the serial number to YYYYMMDDNN.\n- \"named -L <filename>\" causes named to send log messages to the specified\n  file by default instead of to the system log.\n- \"dig +ttlunits\" prints TTL values with time-unit suffixes: w, d, h, m, s\n  for weeks, days, hours, minutes, and seconds.\n- \"dig +unknownformat\" prints dig output in RFC 3597 \"unknown record\"\n  presentation format.\n- \"dig +ednsopt\" allows dig to set arbitrary EDNS options on requests.\n- \"dig +ednsflags\" allows dig to set yet-to-be-defined EDNS flags on\n  requests.\n- \"mdig\" is an alternate version of dig which sends multiple pipelined TCP\n  queries to a server.  Instead of waiting for a response after sending a\n  query, it sends all queries immediately and displays responses in the\n  order received.\n- \"serial-query-rate\" no longer controls NOTIFY messages.  These are\n  separately controlled by \"notify-rate\" and \"startup-notify-rate\".\n- \"nsupdate\" now performs \"check-names\" processing by default on records to\n  be added.  This can be disabled with \"check-names no\".\n- The statistics channel now supports DEFLATE compression, reducing the\n  size of the data sent over the network when querying statistics.\n- New counters have been added to the statistics channel to track the sizes\n  of incoming queries and outgoing responses in histogram buckets, as\n  specified in RSSAC002.\n- A new NXDOMAIN redirect method (option \"nxdomain-redirect\") has been\n  added, allowing redirection to a specified DNS namespace instead of a\n  single redirect zone.\n- When starting up, named now ensures that no other named process is\n  already running.\n- Files created by named to store information, including \"mkeys\" and \"nzf\"\n  files, are now named after their corresponding views unless the view name\n  contains characters incompatible with use as a filename. Old style\n  filenames (based on the hash of the view name) will still work.\n\n#### BIND 9.10.0\n\nBIND 9.10.0 includes a number of changes from BIND 9.9 and earlier\nreleases.  New features include:\n\n - DNS Response-rate limiting (DNS RRL), which blunts the\n   impact of reflection and amplification attacks, is always\n   compiled in and no longer requires a compile-time option\n   to enable it.\n - An experimental \"Source Identity Token\" (SIT) EDNS option\n   is now available.  Similar to DNS Cookies as invented by\n   Donald Eastlake 3rd, these are designed to enable clients\n   to detect off-path spoofed responses, and to enable servers\n   to detect spoofed-source queries.  Servers can be configured\n   to send smaller responses to clients that have not identified\n   themselves using a SIT option, reducing the effectiveness of\n   amplification attacks.  RRL processing has also been updated;\n   clients proven to be legitimate via SIT are not subject to\n   rate limiting.  Use \"configure --enable-sit\" to enable this\n   feature in BIND.\n - A new zone file format, \"map\", stores zone data in a\n   format that can be mapped directly into memory, allowing\n   significantly faster zone loading.\n - \"delv\" (domain entity lookup and validation) is a new tool\n   with dig-like semantics for looking up DNS data and performing\n   internal DNSSEC validation.  This allows easy validation in\n   environments where the resolver may not be trustworthy, and\n   assists with troubleshooting of DNSSEC problems. (NOTE:\n   In previous development releases of BIND 9.10, this utility\n   was called \"delve\". The spelling has been changed to avoid\n   confusion with the \"delve\" utility included with the Xapian\n   search engine.)\n - Improved EDNS(0) processing for better resolver performance\n   and reliability over slow or lossy connections.\n - A new \"configure --with-tuning=large\" option tunes certain\n   compiled-in constants and default settings to values better\n   suited to large servers with abundant memory.  This can\n   improve performance on such servers, but will consume more\n   memory and may degrade performance on smaller systems.\n - Substantial improvement in response-policy zone (RPZ)\n   performance.  Up to 32 response-policy zones can be\n   configured with minimal performance loss.\n - To improve recursive resolver performance, cache records\n   which are still being requested by clients can now be\n   automatically refreshed from the authoritative server\n   before they expire, reducing or eliminating the time\n   window in which no answer is available in the cache.\n - New \"rpz-client-ip\" triggers and drop policies allowing\n   response policies based on the IP address of the client.\n - ACLs can now be specified based on geographic location\n   using the MaxMind GeoIP databases.  Use \"configure\n   --with-geoip\" to enable.\n - Zone data can now be shared between views, allowing\n   multiple views to serve the same zones authoritatively\n   without storing multiple copies in memory.\n - New XML schema (version 3) for the statistics channel\n   includes many new statistics and uses a flattened XML tree\n   for faster parsing. The older schema is now deprecated.\n - A new stylesheet, based on the Google Charts API, displays\n   XML statistics in charts and graphs on javascript-enabled\n   browsers.\n - The statistics channel can now provide data in JSON\n   format as well as XML.\n - New stats counters track TCP and UDP queries received\n   per zone, and EDNS options received in total.\n - The internal and export versions of the BIND libraries\n   (libisc, libdns, etc) have been unified so that external\n   library clients can use the same libraries as BIND itself.\n - A new compile-time option, \"configure --enable-native-pkcs11\",\n   allows BIND 9 cryptography functions to use the PKCS#11 API\n   natively, so that BIND can drive a cryptographic hardware\n   service module (HSM) directly instead of using a modified\n   OpenSSL as an intermediary. (Note: This feature requires an\n   HSM to have a full implementation of the PKCS#11 API; many\n   current HSMs only have partial implementations. The new\n   \"pkcs11-tokens\" command can be used to check API completeness.\n   Native PKCS#11 is known to work with the Thales nShield HSM\n   and with SoftHSM version 2 from the Open DNSSEC project.)\n - The new \"max-zone-ttl\" option enforces maximum TTLs for\n   zones. This can simplify the process of rolling DNSSEC keys\n   by guaranteeing that cached signatures will have expired\n   within the specified amount of time.\n - \"dig +subnet\" sends an EDNS CLIENT-SUBNET option when\n   querying.\n - \"dig +expire\" sends an EDNS EXPIRE option when querying.\n   When this option is sent with an SOA query to a server\n   that supports it, it will report the expiry time of\n   a slave zone.\n - New \"dnssec-coverage\" tool to check DNSSEC key coverage\n   for a zone and report if a lapse in signing coverage has\n   been inadvertently scheduled.\n - Signing algorithm flexibility and other improvements\n   for the \"rndc\" control channel.\n - \"named-checkzone\" and \"named-compilezone\" can now read\n   journal files, allowing them to process dynamic zones.\n - Multiple DLZ databases can now be configured.  Individual\n   zones can be configured to be served from a specific DLZ\n   database.  DLZ databases now serve zones of type \"master\"\n   and \"redirect\".\n - \"rndc zonestatus\" reports information about a specified zone.\n - \"named\" now listens on IPv6 as well as IPv4 interfaces\n   by default.\n - \"named\" now preserves the capitalization of names\n   when responding to queries: for instance, a query for\n   \"example.com\" may be answered with \"example.COM\" if the\n   name was configured that way in the zone file.  Some\n   clients have a bug causing them to depend on the older\n   behavior, in which the case of the answer always matched\n   the case of the query, rather than the case of the name\n   configured in the DNS.  Such clients can now be specified\n   in the new \"no-case-compress\" ACL; this will restore the\n   older behavior of \"named\" for those clients only.\n - new \"dnssec-importkey\" command allows the use of offline\n   DNSSEC keys with automatic DNSKEY management.\n - New \"named-rrchecker\" tool to verify the syntactic\n   correctness of individual resource records.\n - When re-signing a zone, the new \"dnssec-signzone -Q\" option\n   drops signatures from keys that are still published but are\n   no longer active.\n - \"named-checkconf -px\" will print the contents of configuration\n   files with the shared secrets obscured, making it easier to\n   share configuration (e.g. when submitting a bug report)\n   without revealing private information.\n - \"rndc scan\" causes named to re-scan network interfaces for\n   changes in local addresses.\n - On operating systems with support for routing sockets,\n   network interfaces are re-scanned automatically whenever\n   they change.\n - \"tsig-keygen\" is now available as an alternate command\n   name to use for \"ddns-confgen\".\n\n#### BIND 9.9.0\n\nBIND 9.9.0 includes a number of changes from BIND 9.8 and earlier\nreleases.  New features include:\n\n- Inline signing, allowing automatic DNSSEC signing of\n  master zones without modification of the zonefile, or\n  \"bump in the wire\" signing in slaves.\n- NXDOMAIN redirection.\n- New 'rndc flushtree' command clears all data under a given\n  name from the DNS cache.\n- New 'rndc sync' command dumps pending changes in a dynamic\n  zone to disk without a freeze/thaw cycle.\n- New 'rndc signing' command displays or clears signing status\n  records in 'auto-dnssec' zones.\n- NSEC3 parameters for 'auto-dnssec' zones can now be set prior\n  to signing, eliminating the need to initially sign with NSEC.\n- Startup time improvements on large authoritative servers.\n- Slave zones are now saved in raw format by default.\n- Several improvements to response policy zones (RPZ).\n- Improved hardware scalability by using multiple threads\n  to listen for queries and using finer-grained client locking\n- The 'also-notify' option now takes the same syntax as\n  'masters', so it can used named masterlists and TSIG keys.\n- 'dnssec-signzone -D' writes an output file containing only DNSSEC\n  data, which can be included by the primary zone file.\n- 'dnssec-signzone -R' forces removal of signatures that are\n  not expired but were created by a key which no longer exists.\n- 'dnssec-signzone -X' allows a separate expiration date to\n  be specified for DNSKEY signatures from other signatures.\n- New '-L' option to dnssec-keygen, dnssec-settime, and\n  dnssec-keyfromlabel sets the default TTL for the key.\n- dnssec-dsfromkey now supports reading from standard input,\n  to make it easier to convert DNSKEY to DS.\n- RFC 1918 reverse zones have been added to the empty-zones\n  table per RFC 6303.\n- Dynamic updates can now optionally set the zone's SOA serial\n  number to the current UNIX time.\n- DLZ modules can now retrieve the source IP address of\n  the querying client.\n- 'request-ixfr' option can now be set at the per-zone level.\n- 'dig +rrcomments' turns on comments about DNSKEY records,\n  indicating their key ID, algorithm and function\n- Simplified nsupdate syntax and added readline support\n\n#### BIND 9.8.0\n\nBIND 9.8.0 includes a number of changes from BIND 9.7 and earlier\nreleases.  New features include:\n\n- Built-in trust anchor for the root zone, which can be\n  switched on via \"dnssec-validation auto;\"\n- Support for DNS64.\n- Support for response policy zones (RPZ).\n- Support for writable DLZ zones.\n- Improved ease of configuration of GSS/TSIG for\n  interoperability with Active Directory\n- Support for GOST signing algorithm for DNSSEC.\n- Removed RTT Banding from server selection algorithm.\n- New \"static-stub\" zone type.\n- Allow configuration of resolver timeouts via\n  \"resolver-query-timeout\" option.\n- The DLZ \"dlopen\" driver is now built by default.\n- Added a new include file with function typedefs\n  for the DLZ \"dlopen\" driver.\n- Made \"--with-gssapi\" default.\n- More verbose error reporting from DLZ LDAP.\n\n#### BIND 9.7.0\n\nBIND 9.7.0 includes a number of changes from BIND 9.6 and earlier\nreleases.  Most are intended to simplify DNSSEC configuration.\nNew features include:\n\n- Fully automatic signing of zones by \"named\".\n- Simplified configuration of DNSSEC Lookaside Validation (DLV).\n- Simplified configuration of Dynamic DNS, using the \"ddns-confgen\"\n  command line tool or the \"local\" update-policy option.  (As a side\n  effect, this also makes it easier to configure automatic zone\n  re-signing.)\n- New named option \"attach-cache\" that allows multiple views to\n  share a single cache.\n- DNS rebinding attack prevention.\n- New default values for dnssec-keygen parameters.\n- Support for RFC 5011 automated trust anchor maintenance\n- Smart signing: simplified tools for zone signing and key\n  maintenance.\n- The \"statistics-channels\" option is now available on Windows.\n- A new DNSSEC-aware libdns API for use by non-BIND9 applications\n- On some platforms, named and other binaries can now print out\n  a stack backtrace on assertion failure, to aid in debugging.\n- A \"tools only\" installation mode on Windows, which only installs\n  dig, host, nslookup and nsupdate.\n- Improved PKCS#11 support, including Keyper support and explicit\n  OpenSSL engine selection.\n\n#### BIND 9.6.0\n\n- Full NSEC3 support\n- Automatic zone re-signing\n- New update-policy methods tcp-self and 6to4-self\n- The BIND 8 resolver library, libbind, has been removed from the BIND 9\n  distribution and is now available as a separate download.\n- Change the default pid file location from /var/run to\n  /var/run/{named,lwresd} for improved chroot/setuid support.\n\n#### BIND 9.5.0\n\n- GSS-TSIG support (RFC 3645).\n- DHCID support.\n- Experimental http server and statistics support for named via xml.\n- More detailed statistics counters including those supported in BIND 8.\n- Faster ACL processing.\n- Use Doxygen to generate internal documentation.\n- Efficient LRU cache-cleaning mechanism.\n- NSID support.\n\nBIND 9.4.0\n\n- Implemented \"additional section caching (or acache)\", an internal cache\n  framework for additional section content to improve response performance.\n  Several configuration options were provided to control the behavior.\n- New notify type 'master-only'.  Enable notify for master zones only.\n- Accept 'notify-source' style syntax for query-source.\n- rndc now allows addresses to be set in the server clauses.\n- New option \"allow-query-cache\".  This lets \"allow-query\" be used to\n  specify the default zone access level rather than having to have every\n  zone override the global value.  \"allow-query-cache\" can be set at both\n  the options and view levels.  If \"allow-query-cache\" is not set then\n  \"allow-recursion\" is used if set, otherwise \"allow-query\" is used if set\n  unless \"recursion no;\" is set in which case \"none;\" is used, otherwise\n  the default (localhost; localnets;) is used.\n- rndc: the source address can now be specified.\n- ixfr-from-differences now takes master and slave in addition to yes and\n  no at the options and view levels.\n- Allow the journal's name to be changed via named.conf.\n- 'rndc notify zone [class [view]]' resend the NOTIFY messages for the\n  specified zone.\n- 'dig +trace' now randomly selects the next servers to try.  Report if\n  there is a bad delegation.\n- Improve check-names error messages.\n- Make public the function to read a key file, dst_key_read_public().\n- dig now returns the byte count for axfr/ixfr.\n- allow-update is now settable at the options / view level.\n- named-checkconf now checks the logging configuration.\n- host now can turn on memory debugging flags with '-m'.\n- Don't send notify messages to self.\n- Perform sanity checks on NS records which refer to 'in zone' names.\n- New zone option \"notify-delay\".  Specify a minimum delay between sets of\n  NOTIFY messages.\n- Extend adjusting TTL warning messages.\n- Named and named-checkzone can now both check for non-terminal wildcard\n  records.\n- \"rndc freeze/thaw\" now freezes/thaws all zones.\n- named-checkconf now check acls to verify that they only refer to existing\n  acls.\n- The server syntax has been extended to support a range of servers.\n- Report differences between hints and real NS rrset and associated address\n  records.\n- Preserve the case of domain names in rdata during zone transfers.\n- Restructured the data locking framework using architecture dependent\n  atomic operations (when available), improving response performance on\n  multi-processor machines significantly.  x86, x86_64, alpha, powerpc, and\n  mips are currently supported.\n- UNIX domain controls are now supported.\n- Add support for additional zone file formats for improving loading\n  performance.  The masterfile-format option in named.conf can be used to\n  specify a non-default format.  A separate command named-compilezone was\n  provided to generate zone files in the new format.  Additionally, the -I\n  and -O options for dnssec-signzone specify the input and output formats.\n- dnssec-signzone can now randomize signature end times (dnssec-signzone -j\n  jitter).\n- Add support for CH A record.\n- Add additional zone data constancy checks.  named-checkzone has extended\n  checking of NS, MX and SRV record and the hosts they reference.  named\n  has extended post zone load checks.  New zone options: check-mx and\n  integrity-check.\n- edns-udp-size can now be overridden on a per server basis.\n- dig can now specify the EDNS version when making a query.\n- Added framework for handling multiple EDNS versions.\n- Additional memory debugging support to track size and mctx arguments.\n- Detect duplicates of UDP queries we are recursing on and drop them.  New\n  stats category \"duplicates\".\n- \"USE INTERNAL MALLOC\" is now runtime selectable.\n- The lame cache is now done on a <qname,qclass,qtype> basis as some\n  servers only appear to be lame for certain query types.\n- Limit the number of recursive clients that can be waiting for a single\n  query (<qname,qtype,qclass>) to resolve.  New options clients-per-query\n  and max-clients-per-query.\n- dig: report the number of extra bytes still left in the packet after\n  processing all the records.\n- Support for IPSECKEY rdata type.\n- Raise the UDP recieve buffer size to 32k if it is less than 32k.\n- x86 and x86_64 now have seperate atomic locking implementations.\n- named-checkconf now validates update-policy entries.\n- Attempt to make the amount of work performed in a iteration self tuning.\n  The covers nodes clean from the cache per iteration, nodes written to\n  disk when rewriting a master file and nodes destroyed per iteration when\n  destroying a zone or a cache.\n- ISC string copy API.\n- Automatic empty zone creation for D.F.IP6.ARPA and friends.  Note: RFC\n  1918 zones are not yet covered by this but are likely to be in a future\n  release.\n- New options: empty-server, empty-contact, empty-zones-enable and\n  disable-empty-zone.\n- dig now has a '-q queryname' and '+showsearch' options.\n- host/nslookup now continue (default)/fail on SERVFAIL.\n- dig now warns if 'RA' is not set in the answer when 'RD' was set in the\n  query.  host/nslookup skip servers that fail to set 'RA' when 'RD' is set\n  unless a server is explicitly set.\n- Integrate contibuted DLZ code into named.\n- Integrate contibuted IDN code from JPNIC.\n- libbind: corresponds to that from BIND 8.4.7.\n\n#### BIND 9.3.0\n\n- DNSSEC is now DS based (RFC 3658).\n- DNSSEC lookaside validation.\n- check-names is now implemented.\n- rrset-order is more complete.\n- IPv4/IPv6 transition support, dual-stack-servers.\n- IXFR deltas can now be generated when loading master files,\n  ixfr-from-differences.\n- It is now possible to specify the size of a journal, max-journal-size.\n- It is now possible to define a named set of master servers to be used in\n  masters clause, masters.\n- The advertised EDNS UDP size can now be set, edns-udp-size.\n- allow-v6-synthesis has been obsoleted.\n- Zones containing MD and MF will now be rejected.\n- dig, nslookup name. now report \"Not Implemented\" as NOTIMP rather than\n  NOTIMPL.  This will have impact on scripts that are looking for NOTIMPL.\n- libbind: corresponds to that from BIND 8.4.5.\n\n#### BIND 9.2.0\n\n- The size of the cache can now be limited using the \"max-cache-size\"\n  option.\n- The server can now automatically convert RFC1886-style recursive lookup\n  requests into RFC2874-style lookups, when enabled using the new option\n  \"allow-v6-synthesis\".  This allows stub resolvers that support AAAA\n  records but not A6 record chains or binary labels to perform lookups in\n  domains that make use of these IPv6 DNS features.\n- Performance has been improved.\n- The man pages now use the more portable \"man\" macros rather than the\n  \"mandoc\" macros, and are installed by \"make install\".\n- The named.conf parser has been completely rewritten.  It now supports\n  \"include\" directives in more places such as inside \"view\" statements, and\n  it no longer has any reserved words.\n- The \"rndc status\" command is now implemented.\n- rndc can now be configured automatically.\n- A BIND 8 compatible stub resolver library is now included in lib/bind.\n- OpenSSL has been removed from the distribution.  This means that to use\n  DNSSEC, OpenSSL must be installed and the --with-openssl option must be\n  supplied to configure.  This does not apply to the use of TSIG, which\n  does not require OpenSSL.\n- The source distribution now builds on Windows.  See\n  win32utils/readme1.txt and win32utils/win32-build.txt for details.\n- This distribution also includes a new lightweight stub resolver library\n  and associated resolver daemon that fully support forward and reverse\n  lookups of both IPv4 and IPv6 addresses.  This library is considered\n  experimental and is not a complete replacement for the BIND 8 resolver\n  library.  Applications that use the BIND 8 `res_*` functions to perform\n  DNS lookups or dynamic updates still need to be linked against the BIND 8\n  libraries.  For DNS lookups, they can also use the new \"getrrsetbyname()\"\n  API.\n- BIND 9.2 is capable of acting as an authoritative server for DNSSEC\n  secured zones.  This functionality is believed to be stable and complete\n  except for lacking support for verifications involving wildcard records\n  in secure zones.\n- When acting as a caching server, BIND 9.2 can be configured to perform\n  DNSSEC secure resolution on behalf of its clients.  This part of the\n  DNSSEC implementation is still considered experimental.  For detailed\n  information about the state of the DNSSEC implementation, see the file\n  doc/misc/dnssec.\n",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/config.h.in": "/* config.h.in.  Generated from configure.ac by autoheader.  */\n\n/* Define if building universal (internal helper macro) */\n#undef AC_APPLE_UNIVERSAL_BUILD\n\n/* Define if you cannot bind() before connect() for TCP sockets. */\n#undef BROKEN_TCP_BIND_BEFORE_CONNECT\n\n/* dnsrps $librpz_name */\n#undef DNSRPS_LIBRPZ_PATH\n\n/* 0=no DNSRPS 1=static link 2=dlopen() */\n#undef DNSRPS_LIB_OPEN\n\n/* Define to enable \"rrset-order fixed\" syntax. */\n#undef DNS_RDATASET_FIXED\n\n/* Define to enable American Fuzzy Lop test harness */\n#undef ENABLE_AFL\n\n/* define if you want TCP_FASTOPEN enabled if available */\n#undef ENABLE_TCP_FASTOPEN\n\n/* Solaris hack to get select_large_fdset. */\n#undef FD_SETSIZE\n\n/* Define to nothing if C supports flexible array members, and to 1 if it does\n   not. That way, with a declaration like `struct s { int n; double\n   d[FLEXIBLE_ARRAY_MEMBER]; };', the struct hack can be used with pre-C99\n   compilers. When computing the size of such an object, don't use 'sizeof\n   (struct s)' as it overestimates the size. Use 'offsetof (struct s, d)'\n   instead. Don't use 'offsetof (struct s, d[0])', as this doesn't work with\n   MSVC and with C++ compilers. */\n#undef FLEXIBLE_ARRAY_MEMBER\n\n/* Define to 1 if you have the `arc4random' function. */\n#undef HAVE_ARC4RANDOM\n\n/* Define to 1 if you have the `arc4random_buf' function. */\n#undef HAVE_ARC4RANDOM_BUF\n\n/* Define to 1 if you have the `arc4random_uniform' function. */\n#undef HAVE_ARC4RANDOM_UNIFORM\n\n/* define if the ARM yield instruction is available */\n#undef HAVE_ARM_YIELD\n\n/* Define to 1 if the compiler supports __builtin_clz. */\n#undef HAVE_BUILTIN_CLZ\n\n/* Define to 1 if the compiler supports __builtin_expect. */\n#undef HAVE_BUILTIN_EXPECT\n\n/* define if the compiler supports __builtin_unreachable(). */\n#undef HAVE_BUILTIN_UNREACHABLE\n\n/* Define to 1 if you have the `chroot' function. */\n#undef HAVE_CHROOT\n\n/* Define if clock_gettime is available. */\n#undef HAVE_CLOCK_GETTIME\n\n/* Use CMocka */\n#undef HAVE_CMOCKA\n\n/* Define to 1 if you have the `cpuset_setaffinity' function. */\n#undef HAVE_CPUSET_SETAFFINITY\n\n/* Define to 1 if you have the `CRYPTO_zalloc' function. */\n#undef HAVE_CRYPTO_ZALLOC\n\n/* Define to 1 if you have the <devpoll.h> header file. */\n#undef HAVE_DEVPOLL_H\n\n/* Define to 1 if you have the `DH_get0_key' function. */\n#undef HAVE_DH_GET0_KEY\n\n/* Define to 1 if you have the `dlclose' function. */\n#undef HAVE_DLCLOSE\n\n/* Define to 1 if you have the <dlfcn.h> header file. */\n#undef HAVE_DLFCN_H\n\n/* Define to 1 if you have the `dlopen' function. */\n#undef HAVE_DLOPEN\n\n/* Define to 1 if you have the `dlsym' function. */\n#undef HAVE_DLSYM\n\n/* Define to 1 to enable dnstap support */\n#undef HAVE_DNSTAP\n\n/* Define to 1 if you have the `ECDSA_sign' function. */\n#undef HAVE_ECDSA_SIGN\n\n/* Define to 1 if you have the `ECDSA_SIG_get0' function. */\n#undef HAVE_ECDSA_SIG_GET0\n\n/* Define to 1 if you have the `ECDSA_verify' function. */\n#undef HAVE_ECDSA_VERIFY\n\n/* Define to 1 if you have the <editline/readline.h> header file. */\n#undef HAVE_EDITLINE_READLINE_H\n\n/* Define to 1 if you have the <edit/readline/history.h> header file. */\n#undef HAVE_EDIT_READLINE_HISTORY_H\n\n/* Define to 1 if you have the <edit/readline/readline.h> header file. */\n#undef HAVE_EDIT_READLINE_READLINE_H\n\n/* Define to 1 if you have the `epoll_create1' function. */\n#undef HAVE_EPOLL_CREATE1\n\n/* Define to 1 if you have the `EVP_aes_128_ecb' function. */\n#undef HAVE_EVP_AES_128_ECB\n\n/* Define to 1 if you have the `EVP_aes_192_ecb' function. */\n#undef HAVE_EVP_AES_192_ECB\n\n/* Define to 1 if you have the `EVP_aes_256_ecb' function. */\n#undef HAVE_EVP_AES_256_ECB\n\n/* Define to 1 if you have the `EVP_CIPHER_CTX_free' function. */\n#undef HAVE_EVP_CIPHER_CTX_FREE\n\n/* Define to 1 if you have the `EVP_CIPHER_CTX_new' function. */\n#undef HAVE_EVP_CIPHER_CTX_NEW\n\n/* Define to 1 if you have the `EVP_MD_CTX_free' function. */\n#undef HAVE_EVP_MD_CTX_FREE\n\n/* Define to 1 if you have the `EVP_MD_CTX_new' function. */\n#undef HAVE_EVP_MD_CTX_NEW\n\n/* Define to 1 if you have the `EVP_MD_CTX_reset' function. */\n#undef HAVE_EVP_MD_CTX_RESET\n\n/* Define to 1 if you have the `EVP_sha1' function. */\n#undef HAVE_EVP_SHA1\n\n/* Define to 1 if you have the `EVP_sha224' function. */\n#undef HAVE_EVP_SHA224\n\n/* Define to 1 if you have the `EVP_sha256' function. */\n#undef HAVE_EVP_SHA256\n\n/* Define to 1 if you have the `EVP_sha384' function. */\n#undef HAVE_EVP_SHA384\n\n/* Define to 1 if you have the `EVP_sha512' function. */\n#undef HAVE_EVP_SHA512\n\n/* Define to 1 if you have the `explicit_bzero' function. */\n#undef HAVE_EXPLICIT_BZERO\n\n/* Define to 1 if you have the <fcntl.h> header file. */\n#undef HAVE_FCNTL_H\n\n/* Define to 1 if you have the `FIPS_mode' function. */\n#undef HAVE_FIPS_MODE\n\n/* Define to 1 if you have the `flockfile' function. */\n#undef HAVE_FLOCKFILE\n\n/* Build with GeoIP support */\n#undef HAVE_GEOIP\n\n/* Build with GeoIP2 support */\n#undef HAVE_GEOIP2\n\n/* Build with GeoIP City IPv6 support */\n#undef HAVE_GEOIP_CITY_V6\n\n/* Build with GeoIP Country IPv6 support */\n#undef HAVE_GEOIP_V6\n\n/* Define to 1 if you have the `getc_unlocked' function. */\n#undef HAVE_GETC_UNLOCKED\n\n/* Define to 1 if you have the `getpassphrase' function. */\n#undef HAVE_GETPASSPHRASE\n\n/* Define to 1 if you have the `getrandom' function. */\n#undef HAVE_GETRANDOM\n\n/* Define to use gperftools CPU profiler. */\n#undef HAVE_GPERFTOOLS_PROFILER\n\n/* Define to 1 if you have the <gssapi/gssapi.h> header file. */\n#undef HAVE_GSSAPI_GSSAPI_H\n\n/* Define to 1 if you have the <gssapi/gssapi_krb5.h> header file. */\n#undef HAVE_GSSAPI_GSSAPI_KRB5_H\n\n/* Define to 1 if you have the <gssapi.h> header file. */\n#undef HAVE_GSSAPI_H\n\n/* Define to 1 if you have the <gssapi_krb5.h> header file. */\n#undef HAVE_GSSAPI_KRB5_H\n\n/* Define to 1 if you have the `HMAC_CTX_free' function. */\n#undef HAVE_HMAC_CTX_FREE\n\n/* Define to 1 if you have the `HMAC_CTX_get_md' function. */\n#undef HAVE_HMAC_CTX_GET_MD\n\n/* Define to 1 if you have the `HMAC_CTX_new' function. */\n#undef HAVE_HMAC_CTX_NEW\n\n/* Define to 1 if you have the `HMAC_CTX_reset' function. */\n#undef HAVE_HMAC_CTX_RESET\n\n/* Define to 1 if you have the <idn2.h> header file. */\n#undef HAVE_IDN2_H\n\n/* Define to 1 if you have the `if_nametoindex' function. */\n#undef HAVE_IF_NAMETOINDEX\n\n/* Define to 1 if you have the <inttypes.h> header file. */\n#undef HAVE_INTTYPES_H\n\n/* Define if libjson was found */\n#undef HAVE_JSON\n\n/* Define if json-c was found */\n#undef HAVE_JSON_C\n\n/* Define to 1 if you have the <kerberosv5/krb5.h> header file. */\n#undef HAVE_KERBEROSV5_KRB5_H\n\n/* Define to 1 if you have the `kqueue' function. */\n#undef HAVE_KQUEUE\n\n/* Define to 1 if you have the <krb5.h> header file. */\n#undef HAVE_KRB5_H\n\n/* Define to 1 if you have the <krb5/krb5.h> header file. */\n#undef HAVE_KRB5_KRB5_H\n\n/* define if system have backtrace function */\n#undef HAVE_LIBCTRACE\n\n/* Define if libidn2 was found */\n#undef HAVE_LIBIDN2\n\n/* Define to 1 if you have the `nsl' library (-lnsl). */\n#undef HAVE_LIBNSL\n\n/* Define to 1 if you have the `scf' library (-lscf). */\n#undef HAVE_LIBSCF\n\n/* Define to 1 if you have the `socket' library (-lsocket). */\n#undef HAVE_LIBSOCKET\n\n/* Define if libxml2 was found */\n#undef HAVE_LIBXML2\n\n/* Define to 1 if you have the <linux/netlink.h> header file. */\n#undef HAVE_LINUX_NETLINK_H\n\n/* Define to 1 if you have the <linux/rtnetlink.h> header file. */\n#undef HAVE_LINUX_RTNETLINK_H\n\n/* Define if lmdb was found */\n#undef HAVE_LMDB\n\n/* Define to 1 if you have the <locale.h> header file. */\n#undef HAVE_LOCALE_H\n\n/* Define to 1 if you have the <memory.h> header file. */\n#undef HAVE_MEMORY_H\n\n/* Define to 1 if you have the `mmap' function. */\n#undef HAVE_MMAP\n\n/* Define to 1 if you have the `nanosleep' function. */\n#undef HAVE_NANOSLEEP\n\n/* Define to 1 if you have the <net/if6.h> header file. */\n#undef HAVE_NET_IF6_H\n\n/* Define to 1 if you have the <net/route.h> header file. */\n#undef HAVE_NET_ROUTE_H\n\n/* define if OpenSSL supports Ed25519 */\n#undef HAVE_OPENSSL_ED25519\n\n/* define if OpenSSL supports Ed448 */\n#undef HAVE_OPENSSL_ED448\n\n/* Define to 1 if you have the `processor_bind' function. */\n#undef HAVE_PROCESSOR_BIND\n\n/* Define if you have POSIX threads libraries and header files. */\n#undef HAVE_PTHREAD\n\n/* Define to 1 if you have the `pthread_attr_getstacksize' function. */\n#undef HAVE_PTHREAD_ATTR_GETSTACKSIZE\n\n/* Define to 1 if you have the `pthread_attr_setstacksize' function. */\n#undef HAVE_PTHREAD_ATTR_SETSTACKSIZE\n\n/* Support for PTHREAD_MUTEX_ADAPTIVE_NP */\n#undef HAVE_PTHREAD_MUTEX_ADAPTIVE_NP\n\n/* Define to 1 if you have the <pthread_np.h> header file. */\n#undef HAVE_PTHREAD_NP_H\n\n/* Have PTHREAD_PRIO_INHERIT. */\n#undef HAVE_PTHREAD_PRIO_INHERIT\n\n/* Define to 1 if you have the `pthread_setaffinity_np' function. */\n#undef HAVE_PTHREAD_SETAFFINITY_NP\n\n/* Define to 1 if you have the `pthread_setname_np' function. */\n#undef HAVE_PTHREAD_SETNAME_NP\n\n/* Define to 1 if you have the `pthread_set_name_np' function. */\n#undef HAVE_PTHREAD_SET_NAME_NP\n\n/* Define to 1 if you have the `pthread_yield' function. */\n#undef HAVE_PTHREAD_YIELD\n\n/* Define to 1 if you have the `pthread_yield_np' function. */\n#undef HAVE_PTHREAD_YIELD_NP\n\n/* Define to 1 if you have the `readline' function. */\n#undef HAVE_READLINE\n\n/* Define to 1 if you have the <readline/history.h> header file. */\n#undef HAVE_READLINE_HISTORY_H\n\n/* Define to 1 if you have the <readline/readline.h> header file. */\n#undef HAVE_READLINE_READLINE_H\n\n/* Define to 1 if you have the <regex.h> header file. */\n#undef HAVE_REGEX_H\n\n/* Define to 1 if you have the `RSA_set0_key' function. */\n#undef HAVE_RSA_SET0_KEY\n\n/* Define to 1 if you have the <sched.h> header file. */\n#undef HAVE_SCHED_H\n\n/* Define to 1 if you have the `sched_setaffinity' function. */\n#undef HAVE_SCHED_SETAFFINITY\n\n/* Define to 1 if you have the `sched_yield' function. */\n#undef HAVE_SCHED_YIELD\n\n/* Define to 1 if you have the `setegid' function. */\n#undef HAVE_SETEGID\n\n/* Define to 1 if you have the `seteuid' function. */\n#undef HAVE_SETEUID\n\n/* Define to 1 if you have the `setlocale' function. */\n#undef HAVE_SETLOCALE\n\n/* Define to 1 if you have the `setresgid' function. */\n#undef HAVE_SETRESGID\n\n/* Define to 1 if you have the `setresuid' function. */\n#undef HAVE_SETRESUID\n\n/* Define to 1 if you have the `sigwait' function. */\n#undef HAVE_SIGWAIT\n\n/* define if the SPARC pause instruction is available */\n#undef HAVE_SPARC_PAUSE\n\n/* define if struct stat has st_mtim.tv_nsec field */\n#undef HAVE_STAT_NSEC\n\n/* Define to 1 if you have the <stdatomic.h> header file. */\n#undef HAVE_STDATOMIC_H\n\n/* Define to 1 if you have the <stdint.h> header file. */\n#undef HAVE_STDINT_H\n\n/* Define to 1 if you have the <stdlib.h> header file. */\n#undef HAVE_STDLIB_H\n\n/* Define to 1 if you have the <strings.h> header file. */\n#undef HAVE_STRINGS_H\n\n/* Define to 1 if you have the <string.h> header file. */\n#undef HAVE_STRING_H\n\n/* Define to 1 if you have the `strlcat' function. */\n#undef HAVE_STRLCAT\n\n/* Define to 1 if you have the `strlcpy' function. */\n#undef HAVE_STRLCPY\n\n/* Define to 1 if you have the `sysconf' function. */\n#undef HAVE_SYSCONF\n\n/* Define to 1 if you have the `sysctlbyname' function. */\n#undef HAVE_SYSCTLBYNAME\n\n/* Define to 1 if you have the <sys/capability.h> header file. */\n#undef HAVE_SYS_CAPABILITY_H\n\n/* Define to 1 if you have the <sys/cpuset.h> header file. */\n#undef HAVE_SYS_CPUSET_H\n\n/* Define to 1 if you have the <sys/devpoll.h> header file. */\n#undef HAVE_SYS_DEVPOLL_H\n\n/* Define to 1 if you have the <sys/mman.h> header file. */\n#undef HAVE_SYS_MMAN_H\n\n/* Define to 1 if you have the <sys/param.h> header file. */\n#undef HAVE_SYS_PARAM_H\n\n/* Define to 1 if you have the <sys/procset.h> header file. */\n#undef HAVE_SYS_PROCSET_H\n\n/* Define to 1 if you have the <sys/select.h> header file. */\n#undef HAVE_SYS_SELECT_H\n\n/* Define to 1 if you have the <sys/socket.h> header file. */\n#undef HAVE_SYS_SOCKET_H\n\n/* Define to 1 if you have the <sys/sockio.h> header file. */\n#undef HAVE_SYS_SOCKIO_H\n\n/* Define to 1 if you have the <sys/stat.h> header file. */\n#undef HAVE_SYS_STAT_H\n\n/* Define to 1 if you have the <sys/sysctl.h> header file. */\n#undef HAVE_SYS_SYSCTL_H\n\n/* Define to 1 if you have the <sys/time.h> header file. */\n#undef HAVE_SYS_TIME_H\n\n/* Define to 1 if you have the <sys/types.h> header file. */\n#undef HAVE_SYS_TYPES_H\n\n/* Define to 1 if you have the <sys/un.h> header file. */\n#undef HAVE_SYS_UN_H\n\n/* Define to 1 if you have the <threads.h> header file. */\n#undef HAVE_THREADS_H\n\n/* Define if thread_local keyword is available */\n#undef HAVE_THREAD_LOCAL\n\n/* Define if Thread-Local Storage is available */\n#undef HAVE_TLS\n\n/* Define to 1 if you have the `tzset' function. */\n#undef HAVE_TZSET\n\n/* Define to 1 if you have the <uchar.h> header file. */\n#undef HAVE_UCHAR_H\n\n/* Define to 1 if the system has the type `uintptr_t'. */\n#undef HAVE_UINTPTR_T\n\n/* define if uname is available */\n#undef HAVE_UNAME\n\n/* Define to 1 if you have the <unistd.h> header file. */\n#undef HAVE_UNISTD_H\n\n/* Define to 1 if you have the `usleep' function. */\n#undef HAVE_USLEEP\n\n/* Define if zlib was found */\n#undef HAVE_ZLIB\n\n/* define if __atomic builtins are not available */\n#undef HAVE___ATOMIC\n\n/* Define if __thread keyword is available */\n#undef HAVE___THREAD\n\n/* Define if you want to use inline buffers */\n#undef ISC_BUFFER_USEINLINE\n\n/* Define to allow building of objects for dlopen(). */\n#undef ISC_DLZ_DLOPEN\n\n/* have __attribute__s used in librpz.h */\n#undef LIBRPZ_HAVE_ATTR\n\n/* Define to the sub-directory where libtool stores uninstalled libraries. */\n#undef LT_OBJDIR\n\n/* Defined if extern char *optarg is not declared. */\n#undef NEED_OPTARG\n\n/* Define if connect does not honour the permission on the UNIX domain socket.\n   */\n#undef NEED_SECURE_DIRECTORY\n\n/* Define to the address where bug reports for this package should be sent. */\n#undef PACKAGE_BUGREPORT\n\n/* Define to the full name of this package. */\n#undef PACKAGE_NAME\n\n/* Define to the full name and version of this package. */\n#undef PACKAGE_STRING\n\n/* Define to the one symbol short name of this package. */\n#undef PACKAGE_TARNAME\n\n/* Define to the home page for this package. */\n#undef PACKAGE_URL\n\n/* Define to the version of this package. */\n#undef PACKAGE_VERSION\n\n/* define the default PKCS11 library path */\n#undef PK11_LIB_LOCATION\n\n/* Sets which flag to pass to open/fcntl to make non-blocking\n   (O_NDELAY/O_NONBLOCK). */\n#undef PORT_NONBLOCK\n\n/* Define to necessary symbol if this constant uses a non-standard name on\n   your system. */\n#undef PTHREAD_CREATE_JOINABLE\n\n/* Define to 1 if you have the ANSI C header files. */\n#undef STDC_HEADERS\n\n/* Define to 1 if you can safely include both <sys/time.h> and <time.h>. */\n#undef TIME_WITH_SYS_TIME\n\n/* Define to use large-system tuning. */\n#undef TUNE_LARGE\n\n/* define if we can use backtrace */\n#undef USE_BACKTRACE\n\n/* Enable DNS Response Policy Service API */\n#undef USE_DNSRPS\n\n/* Defined if you need to use ioctl(FIONBIO) instead a fcntl call to make\n   non-blocking. */\n#undef USE_FIONBIO_IOCTL\n\n/* define if OpenSSL is used for Public-Key Cryptography */\n#undef USE_OPENSSL\n\n/* define if PKCS11 is used for Public-Key Cryptography */\n#undef USE_PKCS11\n\n/* Enable extensions on AIX 3, Interix.  */\n#ifndef _ALL_SOURCE\n# undef _ALL_SOURCE\n#endif\n/* Enable GNU extensions on systems that have them.  */\n#ifndef _GNU_SOURCE\n# undef _GNU_SOURCE\n#endif\n/* Enable threading extensions on Solaris.  */\n#ifndef _POSIX_PTHREAD_SEMANTICS\n# undef _POSIX_PTHREAD_SEMANTICS\n#endif\n/* Enable extensions on HP NonStop.  */\n#ifndef _TANDEM_SOURCE\n# undef _TANDEM_SOURCE\n#endif\n/* Enable general extensions on Solaris.  */\n#ifndef __EXTENSIONS__\n# undef __EXTENSIONS__\n#endif\n\n\n/* the default value of dnssec-validation option */\n#undef VALIDATION_DEFAULT\n\n/* Define to enable very verbose query trace logging. */\n#undef WANT_QUERYTRACE\n\n/* Define WORDS_BIGENDIAN to 1 if your processor stores words with the most\n   significant byte first (like Motorola and SPARC, unlike Intel). */\n#if defined AC_APPLE_UNIVERSAL_BUILD\n# if defined __BIG_ENDIAN__\n#  define WORDS_BIGENDIAN 1\n# endif\n#else\n# ifndef WORDS_BIGENDIAN\n#  undef WORDS_BIGENDIAN\n# endif\n#endif\n\n/* Define to 1 if on MINIX. */\n#undef _MINIX\n\n/* Define to 2 if the system does not provide POSIX.1 features except with\n   this defined. */\n#undef _POSIX_1_SOURCE\n\n/* Define to 1 if you need to in order for `stat' and other things to work. */\n#undef _POSIX_SOURCE\n\n/* Select RFC3542 IPv6 API on macOS */\n#undef __APPLE_USE_RFC_3542\n\n/* Define to empty if `const' does not conform to ANSI C. */\n#undef const\n\n/* Define to `__inline__' or `__inline' if that's what the C compiler\n   calls it, or to nothing if 'inline' is not supported under any name.  */\n#ifndef __cplusplus\n#undef inline\n#endif\n\n/* Define to `unsigned int' if <sys/types.h> does not define. */\n#undef size_t\n\n/* Define to `int' if <sys/types.h> does not define. */\n#undef ssize_t\n\n/* Define to the type of an unsigned integer type wide enough to hold a\n   pointer, if such a type exists, and if the system does not define it. */\n#undef uintptr_t\n\n/* Define to empty if the keyword `volatile' does not work. Warning: valid\n   code using `volatile' can become incorrect without. Disable with care. */\n#undef volatile\n",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/configure.ac": "# Copyright (C) Internet Systems Consortium, Inc. (\"ISC\")\n#\n# This Source Code Form is subject to the terms of the Mozilla Public\n# License, v. 2.0. If a copy of the MPL was not distributed with this\n# file, You can obtain one at http://mozilla.org/MPL/2.0/.\n#\n# See the COPYRIGHT file distributed with this work for additional\n# information regarding copyright ownership.\n\nAC_INIT(BIND, [9.14], [info@isc.org], [], [https://www.isc.org/downloads/BIND/])\nAC_PREREQ([2.60])\n\nAC_CONFIG_HEADER(config.h)\nAC_CONFIG_MACRO_DIR([m4])\n\nAC_CANONICAL_HOST\nAC_USE_SYSTEM_EXTENSIONS\n\nLFS_CFLAGS=`getconf LFS_CFLAGS 2>/dev/null`\nLFS_LDFLAGS=`getconf LFS_LDFLAGS 2>/dev/null`\nLFS_LIBS=`getconf LFS_LIBS 2>/dev/null`\n\nAC_SUBST([LFS_CFLAGS])\nAC_SUBST([LFS_LDFLAGS])\nAC_SUBST([LFS_LIBS])\n\n# Enable RFC 3542 APIs on macOS\nAC_DEFINE([__APPLE_USE_RFC_3542], [1], [Select RFC3542 IPv6 API on macOS])\n\nAC_PROG_MAKE_SET\n\nAC_PROG_LIBTOOL\nAC_PROG_INSTALL\nAC_PROG_LN_S\nAX_POSIX_SHELL\n\nAC_SUBST(STD_CINCLUDES)\nAC_SUBST(STD_CDEFINES)\nAC_SUBST(STD_CWARNINGS)\nAC_SUBST(CCOPT)\nAC_SUBST(CCNOOPT)\nAC_SUBST(BACKTRACECFLAGS)\n\n#\n# Use pkg-config\n#\n\nPKG_PROG_PKG_CONFIG\n\n# Warn if the user specified libbind, which is now deprecated\nAC_ARG_ENABLE(libbind, AS_HELP_STRING([--enable-libbind], [deprecated]))\n\ncase \"$enable_libbind\" in\n\tyes)\n\t\tAC_MSG_ERROR(['libbind' is no longer part of the BIND 9 distribution.\nIt is available from http://www.isc.org as a separate download.])\n\t\t;;\n\tno|'')\n\t\t;;\nesac\n\nAC_ARG_ENABLE(buffer_useinline,\n\t      AS_HELP_STRING([--enable-buffer-useinline],\n\t\t             [define ISC_BUFFER_USEINLINE when compiling\n\t\t\t\t[default=yes]]),\n\t      if test yes = \"${enable}\"\n\t      then\n\t\t      AC_DEFINE([ISC_BUFFER_USEINLINE], [1],\n\t\t\t        [Define if you want to use inline buffers])\n\t      fi,\n\t      AC_DEFINE([ISC_BUFFER_USEINLINE], [1]))\n\nAC_ARG_ENABLE(warn_shadow,\n\t      AS_HELP_STRING([--enable-warn-shadow],\n\t\t\t     [turn on -Wshadow when compiling]))\n\nAC_ARG_ENABLE(warn_error,\n\t      AS_HELP_STRING([--enable-warn-error],\n\t\t\t    [turn on -Werror when compiling]))\n\nAC_ARG_ENABLE(developer,\n\t      AS_HELP_STRING([--enable-developer],\n\t\t\t     [enable developer build settings]))\nXTARGETS=\ncase \"$enable_developer\" in\nyes)\n\tSTD_CDEFINES=\"$STD_CDEFINES -DISC_MEM_DEFAULTFILL=1 -DISC_LIST_CHECKINIT=1\"\n\ttest \"${enable_fixed_rrset+set}\" = set || enable_fixed_rrset=yes\n\ttest \"${enable_querytrace+set}\" = set || enable_querytrace=yes\n\ttest \"${with_cmocka+set}\" = set || with_cmocka=yes\n\ttest \"${with_dlz_filesystem+set}\" = set || with_dlz_filesystem=yes\n\ttest \"${enable_symtable+set}\" = set || enable_symtable=all\n\ttest \"${enable_warn_error+set}\" = set || enable_warn_error=yes\n\ttest \"${enable_warn_shadow+set}\" = set || enable_warn_shadow=yes\n\ttest \"${with_zlib+set}\" = set || with_zlib=yes\n\tXTARGETS='${XTARGETS}'\n\t;;\nesac\nAC_SUBST(XTARGETS)\n\nAC_ARG_ENABLE([fuzzing],\n\t      [AS_HELP_STRING([--enable-fuzzing=<afl|libfuzzer>],\n\t\t\t      [Enable fuzzing using American Fuzzy Lop or libFuzzer (default=no)])],\n\t      [],\n\t      [enable_fuzzing=no])\n\nAC_MSG_CHECKING([whether to enable fuzzing mode])\nAS_CASE([$enable_fuzzing],\n\t[no],[AC_MSG_RESULT([no])],\n\t[afl],[\n\t  AC_MSG_RESULT([using AFL])\n\t  AC_DEFINE([ENABLE_AFL], [1],\n\t\t    [Define to enable American Fuzzy Lop test harness])\n\t  CFLAGS=\"$CFLAGS -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION=1\"\n\t  LIBS=\"$LIBS -lpthread\"],\n\t[libfuzzer],[\n\t  AC_MSG_RESULT([using libFuzzer])\n\t  CFLAGS=\"$CFLAGS -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION=1 -fsanitize=fuzzer,address,undefined\"\n\t  LDFLAGS=\"$LDFLAGS -fsanitize=fuzzer,address,undefined\"],\n\t[*],[AC_MSG_ERROR([You need to explicitly select the fuzzer])])\n\nAS_IF([test \"$enable_fuzzing\" = \"afl\"],\n      [AC_MSG_CHECKING(\"for AFL enabled compiler\")\n       AC_COMPILE_IFELSE([AC_LANG_PROGRAM([],\n\t\t\t\t\t  [#ifndef __AFL_COMPILER\n\t\t\t\t\t   #error AFL compiler required\n\t\t\t\t\t   #endif\n\t\t\t\t\t  ])],\n\t\t\t [AC_MSG_RESULT([yes])],\n\t\t\t [AC_MSG_ERROR([set CC=afl-<gcc|clang> when --enable-fuzzing=afl is used])])\n      ])\n\n#\n# Make very sure that these are the first files processed by\n# config.status, since we use the processed output as the input for\n# AC_SUBST_FILE() substitutions in other files.\n#\nAC_CONFIG_FILES([make/rules make/includes])\n\nAC_PATH_PROG(AR, ar)\nARFLAGS=\"cruv\"\nAC_SUBST(AR)\nAC_SUBST(ARFLAGS)\n\n# The POSIX ln(1) program.  Non-POSIX systems may substitute\n# \"copy\" or something.\nLN=ln\nAC_SUBST(LN)\n\ncase \"$AR\" in\n\t\"\")\n\t\tAC_MSG_ERROR([\nar program not found.  Please fix your PATH to include the directory in\nwhich ar resides, or set AR in the environment with the full path to ar.\n])\n\n\t\t;;\nesac\n\n#\n# Etags.\n#\nAC_PATH_PROGS(ETAGS, etags emacs-etags)\n\n#\n# Some systems, e.g. RH7, have the Exuberant Ctags etags instead of\n# GNU emacs etags, and it requires the -L flag.\n#\nif test \"X$ETAGS\" != \"X\"; then\n\tAC_MSG_CHECKING(for Exuberant Ctags etags)\n\tif $ETAGS --version 2>&1 | grep 'Exuberant Ctags' >/dev/null 2>&1; then\n\t\tAC_MSG_RESULT(yes)\n\t\tETAGS=\"$ETAGS -L\"\n\telse\n\t\tAC_MSG_RESULT(no)\n\tfi\nfi\nAC_SUBST(ETAGS)\n\n#\n# Perl is optional; it is used only by some of the system test scripts.\n# Note: the backtrace feature (see below) uses perl to build the symbol table,\n# but it still compiles without perl, in which case an empty table will be used.\n#\nAC_PATH_PROGS(PERL, perl5 perl)\nAC_SUBST(PERL)\n\n#\n# Python is also optional but required by default so that dnssec-keymgr gets\n# installed unless explicitly prevented by the user using --without-python.\n#\ntestminvers='import sys\nif (sys.version_info < (2,7)) or (sys.version_info < (3,2) and sys.version_info >= (3,0)):\n   exit(1)'\n\ntestargparse='try: import argparse\nexcept: exit(1)'\n\ntestply='try: import ply\nexcept: exit(1)'\n\ndefault_with_python=\"python python3 python3.7 python3.6 python3.5 python3.4 python3.3 python3.2 python2 python2.7\"\n\nAC_ARG_WITH([python],\n\t    AS_HELP_STRING([--with-python=PATH],\n\t\t\t   [specify path to Python interpreter]),\n\t    [], [with_python=$default_with_python])\nAC_ARG_WITH([python-install-dir],\n\t    AS_HELP_STRING([--with-python-install-dir=PATH],\n\t\t\t   [installation directory for Python modules]),\n\t    [], with_python_install_dir=\"\")\n\nAS_IF([test \"$with_python\" = \"yes\"],\n      [with_python=$default_with_python])\n\nAS_IF([test \"$with_python\" = \"no\"],\n      [AC_MSG_CHECKING([for Python support])\n       AC_MSG_RESULT([disabled])],\n      [for p in $with_python\n       do\n\t AS_CASE([$p],\n\t\t [/*],[PYTHON=\"$p\"])\n\n\t AC_PATH_PROG([PYTHON], [$p])\n\t # Do not cache the result of the check from the previous line.  If the\n\t # first found Python interpreter has missing module dependencies and\n\t # the result of the above check is cached, subsequent module checks\n\t # will erroneously keep on using the cached path to the first found\n\t # Python interpreter instead of different ones.\n\t unset ac_cv_path_PYTHON\n\n\t AS_IF([test -z \"$PYTHON\"], [continue])\n\n\t AC_MSG_CHECKING([if $PYTHON is python2 version >= 2.7 or python3 version >= 3.2])\n\t AS_IF([\"$PYTHON\" -c \"$testminvers\" 2>/dev/null],\n\t       [AC_MSG_RESULT([yes])],\n\t       [AC_MSG_RESULT([no])\n\t\tunset PYTHON\n\t\tcontinue])\n\n\t AC_MSG_CHECKING([Python module 'argparse'])\n\t AS_IF([\"$PYTHON\" -c \"$testargparse\" 2>/dev/null],\n\t       [AC_MSG_RESULT([yes])],\n\t       [AC_MSG_RESULT([no])\n\t\tunset PYTHON\n\t\tcontinue])\n\n\t AC_MSG_CHECKING([Python module 'ply'])\n\t AS_IF([\"$PYTHON\" -c \"$testply\" 2>/dev/null],\n\t       [AC_MSG_RESULT([yes])],\n\t       [AC_MSG_RESULT([no])\n\t\tunset PYTHON\n\t\tcontinue])\n\n\t # Stop looking any further once we find a Python interpreter\n\t # satisfying all requirements.\n\t break\n       done\n\n       AS_IF([test \"X$PYTHON\" = \"X\"],\n\t     [AC_MSG_CHECKING([for Python support])\n\t      AC_MSG_RESULT([no])\n\t      AC_MSG_ERROR([m4_normalize(\n\t\t\t\t[Python >= 2.7 or >= 3.2 and the PLY package\n                                 are required for dnssec-keymgr and other\n                                 Python-based tools. PLY may be\n                                 available from your OS package manager\n                                 as python-ply or python3-ply; it can also\n                                 be installed via pip. To build without\n                                 Python/PLY, use --without-python.]\n\t\t\t    )])])])\n\nPYTHON_TOOLS=''\nCHECKDS=''\nCOVERAGE=''\nKEYMGR=''\nAS_IF([test \"X$PYTHON\" != \"X\"],\n      [PYTHON_TOOLS=python\n       CHECKDS=checkds\n       COVERAGE=coverage\n       KEYMGR=keymgr\n       PYTHON_INSTALL_DIR=\"$with_python_install_dir\"\n       AS_IF([test -n \"$with_python_install_dir\"],\n\t     [PYTHON_INSTALL_LIB=\"--install-lib=$with_python_install_dir\"])])\nAC_SUBST(CHECKDS)\nAC_SUBST(COVERAGE)\nAC_SUBST(KEYMGR)\nAC_SUBST(PYTHON_TOOLS)\nAC_SUBST(PYTHON_INSTALL_DIR)\nAC_SUBST(PYTHON_INSTALL_LIB)\n\n#\n# Special processing of paths depending on whether --prefix,\n# --sysconfdir or --localstatedir arguments were given.  What's\n# desired is some compatibility with the way previous versions\n# of BIND built; they defaulted to /usr/local for most parts of\n# the installation, but named.boot/named.conf was in /etc\n# and named.pid was in /var/run.\n#\n# So ... if none of --prefix, --sysconfdir or --localstatedir are\n# specified, set things up that way.  If --prefix is given, use\n# it for sysconfdir and localstatedir the way configure normally\n# would.  To change the prefix for everything but leave named.conf\n# in /etc or named.pid in /var/run, then do this the usual configure way:\n# ./configure --prefix=/somewhere --sysconfdir=/etc\n# ./configure --prefix=/somewhere --localstatedir=/var\n#\n# To put named.conf and named.pid in /usr/local with everything else,\n# set the prefix explicitly to /usr/local even though that's the default:\n# ./configure --prefix=/usr/local\n#\ncase \"$prefix\" in\n\tNONE)\n\t\tcase \"$sysconfdir\" in\n\t\t\t'${prefix}/etc')\n\t\t\t\tsysconfdir=/etc\n\t\t\t\t;;\n\t\tesac\n\t\tcase \"$localstatedir\" in\n\t\t\t'${prefix}/var')\n\t\t\t\tlocalstatedir=/var\n\t\t\t\t;;\n\t\tesac\n\t\t;;\nesac\nexpanded_sysconfdir=`eval echo $sysconfdir`\nAC_SUBST(expanded_sysconfdir)\n\n#\n# Make sure INSTALL uses an absolute path, else it will be wrong in all\n# Makefiles, since they use make/rules.in and INSTALL will be adjusted by\n# configure based on the location of the file where it is substituted.\n# Since in BIND9 INSTALL is only substituted into make/rules.in, an immediate\n# subdirectory of install-sh, This relative path will be wrong for all\n# directories more than one level down from install-sh.\n#\ncase \"$INSTALL\" in\n\t/*)\n\t\t;;\n\t*)\n\t\t#\n\t\t# Not all systems have dirname.\n\t\t#\n\t\tchangequote({, })\n\t\tac_dir=\"`echo $INSTALL | sed 's%/[^/]*$%%'`\"\n\t\tchangequote([, ])\n\n\t\tac_prog=\"`echo $INSTALL | sed 's%.*/%%'`\"\n\t\ttest \"X$ac_dir\" = \"X$ac_prog\" && ac_dir=.\n\t\ttest -d \"$ac_dir\" && ac_dir=\"`(cd \\\"$ac_dir\\\" && pwd)`\"\n\t\tINSTALL=\"$ac_dir/$ac_prog\"\n\t\t;;\nesac\n\nAC_PROG_CC\nAC_PROG_CC_C99\n\n#\n# Using Solaris linker with gcc on Solaris breaks Thread Local Storage\n#\nAS_CASE([$host],\n\t[*-solaris*],[\n\t    AS_IF([test \"$GCC\" = \"yes\"],\n\t\t  [LDFLAGS=\"$LDFLAGS -zrelax=transtls\"\n\t\t   AC_MSG_WARN([When using GNU C Compiler on Solaris, -zrelax=transtls linker flag is used to fix bug in Thread Local Storage])\n\t\t  ])\n\t])\n\n#\n# CCNOOPT defaults to -O0 on gcc and disables optimization when is last\n#\nif test \"X$CCNOOPT\" = \"X\" -a \"X$GCC\" = \"Xyes\"; then\n\tCCNOOPT=\"-O0\"\nfi\n\nAC_HEADER_STDC\n\nAC_CHECK_HEADERS(fcntl.h regex.h sys/time.h unistd.h sys/mman.h sys/sockio.h sys/select.h sys/param.h sys/sysctl.h net/if6.h sys/socket.h net/route.h linux/netlink.h linux/rtnetlink.h,,,\n[$ac_includes_default\n#ifdef HAVE_SYS_PARAM_H\n# include <sys/param.h>\n#endif\n#ifdef HAVE_SYS_SOCKET_H\n# include <sys/socket.h>\n#endif\n])\n\n#\n# Check for thread local storage\n#\nAC_CHECK_HEADERS([threads.h],\n\t\t [\n\t\t     AC_MSG_CHECKING([for C11 Thread-Local Storage using thread_local])\n\t\t     AC_COMPILE_IFELSE(\n\t\t\t [AC_LANG_PROGRAM(\n\t\t\t      [\n\t\t\t\t  #include <threads.h>\n\t\t\t      ],[\n\t\t\t\t  static thread_local int tls = 0;\n\t\t\t\t  return (tls);\n\t\t\t      ])\n\t\t\t ],[\n\t\t\t     AC_MSG_RESULT([yes])\n\t\t\t     AC_DEFINE([HAVE_THREAD_LOCAL],[1],[Define if thread_local keyword is available])\n\t\t\t     AC_DEFINE([HAVE_TLS],[1],[Define if Thread-Local Storage is available])\n\t\t\t ],[\n\t\t\t     AC_MSG_RESULT([no])\n\t\t\t ])\n\t\t ],[\n\t\t     AC_MSG_CHECKING([for Thread-Local Storage using __thread])\n\t\t     AC_COMPILE_IFELSE(\n\t\t\t [AC_LANG_PROGRAM(\n\t\t\t      [\n\t\t\t      ],[\n\t\t\t\t  static __thread int tls = 0;\n\t\t\t\t  return (tls);\n\t\t\t      ])\n\t\t\t ],[\n\t\t\t     AC_MSG_RESULT([yes])\n\t\t\t     AC_DEFINE([HAVE___THREAD],[1],[Define if __thread keyword is available])\n\t\t\t     AC_DEFINE([HAVE_TLS],[1],[Define if Thread-Local Storage is available])\n\t\t\t ],[\n\t\t\t     AC_MSG_RESULT([no])\n\t\t\t ])\n\t\t ])\n\nAC_C_CONST\nAC_C_INLINE\nAC_C_VOLATILE\nAC_C_FLEXIBLE_ARRAY_MEMBER\n\n#\n# Check for yield support on ARM processors\n#\nAS_CASE([$host],\n\t[arm*],\n\t[AC_MSG_CHECKING([for yield instruction support])\n\t AC_COMPILE_IFELSE(\n\t     [AC_LANG_PROGRAM([[]],\n\t\t\t     [[__asm__ __volatile__ (\"yield\")]])],\n\t     [AC_MSG_RESULT([yes])\n\t      AC_DEFINE([HAVE_ARM_YIELD], [1],\n\t\t\t[define if the ARM yield instruction is available])],\n\t     [AC_MSG_RESULT([no])])])\n\n#\n# Check for pause support on SPARC processors\n#\nAS_CASE([$host],\n\t[sparc*],\n\t[AC_MSG_CHECKING([for pause instruction support])\n\t AC_COMPILE_IFELSE(\n\t     [AC_LANG_PROGRAM([[]],\n\t\t\t     [[__asm__ __volatile__ (\"pause\")]])],\n\t     [AC_MSG_RESULT([yes])\n\t      AC_DEFINE([HAVE_SPARC_PAUSE], [1],\n\t\t\t[define if the SPARC pause instruction is available])],\n\t     [AC_MSG_RESULT([no])])])\n\nAC_CHECK_FUNCS([sysctlbyname])\n\n#\n# Check for the existence of mmap to enable the fast format zones\n#\nAC_CHECK_FUNCS(mmap)\n\n#\n# Older versions of HP/UX don't define seteuid() and setegid()\n#\nAC_CHECK_FUNCS(seteuid setresuid)\nAC_CHECK_FUNCS(setegid setresgid)\n\nAC_TYPE_SIZE_T\nAC_TYPE_SSIZE_T\nAC_TYPE_UINTPTR_T\n\nAC_HEADER_TIME\n\n#\n# check for uname library routine\n#\nAC_MSG_CHECKING([for uname])\nAC_COMPILE_IFELSE(\n  [AC_LANG_PROGRAM(\n     [[#include <sys/utsname.h>\n       #include <stdio.h>\n      ]],\n     [[\n       struct utsname uts;\n       uname(&uts);\n       printf(\"running on %s %s %s for %s\\n\",\n\t      uts.sysname, uts.release, uts.version, uts.machine);\n     ]])],\n  [AC_MSG_RESULT(yes)\n   AC_DEFINE([HAVE_UNAME], [1], [define if uname is available])\n  ],\n  [AC_MSG_RESULT(no)\n   AC_MSG_WARN([uname is not correctly supported])\n  ])\n\n#\n# check for GCC noreturn attribute\n#\nAC_MSG_CHECKING(for GCC noreturn attribute)\nAC_TRY_COMPILE([],[void foo() __attribute__((noreturn));],\n\t[AC_MSG_RESULT(yes)\n\t\tISC_PLATFORM_NORETURN_PRE=\"#define ISC_PLATFORM_NORETURN_PRE\"\n\t\tISC_PLATFORM_NORETURN_POST=\"#define ISC_PLATFORM_NORETURN_POST __attribute__((noreturn))\"],\n\t[AC_MSG_RESULT(no)\n\t\tISC_PLATFORM_NORETURN_PRE=\"#define ISC_PLATFORM_NORETURN_PRE\"\n\t\tISC_PLATFORM_NORETURN_POST=\"#define ISC_PLATFORM_NORETURN_POST\"])\nAC_SUBST(ISC_PLATFORM_NORETURN_PRE)\nAC_SUBST(ISC_PLATFORM_NORETURN_POST)\n\n#\n# check if we have kqueue\n#\nAC_ARG_ENABLE([kqueue],\n\t      [AS_HELP_STRING([--enable-kqueue],\n\t\t\t      [use BSD kqueue when available [default=yes]])],\n\t      [], enable_kqueue=\"yes\")\n\nAS_IF([test \"$enable_kqueue\" = \"yes\"],\n      [AC_CHECK_FUNCS([kqueue])])\n\n#\n# check if we have epoll.  Linux kernel 2.4 has epoll_create() which fails,\n# so we need to try running the code, not just test its existence.\n#\nAC_ARG_ENABLE([epoll],\n\t      [AS_HELP_STRING([--enable-epoll],\n\t\t\t      [use Linux epoll when available [default=auto]])],\n\t      [], [enable_epoll=\"yes\"])\n\nAS_IF([test \"$enable_epoll\" = \"yes\"],\n      [AC_CHECK_FUNCS([epoll_create1])])\n\n#\n# check if we support /dev/poll\n#\nAC_ARG_ENABLE([devpoll],\n\t      [AS_HELP_STRING([--enable-devpoll],\n\t\t\t      [use /dev/poll when available [default=yes]])],\n\t      [], [enable_devpoll=\"yes\"])\nAS_IF([test \"$enable_devpoll\" = \"yes\"],\n      [AC_CHECK_HEADERS([sys/devpoll.h devpoll.h])])\n\n#\n# Find the machine's endian flavor.\n#\nAC_C_BIGENDIAN\n\n#\n# GeoIP support?\n#\ngeoip2_default=\"no\"\nAC_ARG_WITH(geoip,\n\t    AS_HELP_STRING([--with-geoip=PATH],\n\t\t\t   [Build with legacy GeoIP support (yes|no|path)]),\n                           [\n                            use_geoip=\"$withval\"\n                            geoip2_default=\"no\"\n                           ],\n                           [use_geoip=\"no\"])\nAC_ARG_WITH([geoip2],\n\t    [AS_HELP_STRING([--with-geoip2=PATH],\n\t\t\t    [Build with MaxMind GeoIP2 support (auto|yes|no|path) [default=no]])],\n\t    [], with_geoip2=\"$geoip2_default\")\n\n# specifying both --with-geoip and --with-geoip2 is an error.\nAS_IF([test \"no\" != \"$with_geoip2\" && test \"no\" != \"$use_geoip\"],\n      [AC_MSG_ERROR([--with-geoip and --with-geoip2 are incompatible])])\n\nGEOIP2LINKSRCS=\nGEOIP2LINKOBJS=\nAS_CASE([$with_geoip2],\n\t[no],[],\n\t[auto],[PKG_CHECK_MODULES([MAXMINDDB], [libmaxminddb],\n\t\t\t\t      [AC_DEFINE([HAVE_GEOIP2], [1], [Build with GeoIP2 support])\n\t\t\t\t       PKG_CHECK_VAR([MAXMINDDB_PREFIX], [libmaxminddb], [prefix], [], [AC_MSG_ERROR([libmaxminddb prefix not found in pkg-config; set MAXMINDDB_PREFIX in the environment])])\n\t\t\t\t       GEOIP2LINKSRCS='${GEOIP2LINKSRCS}'\n\t\t\t\t       GEOIP2LINKOBJS='${GEOIP2LINKOBJS}'\n\t\t\t\t      ],[:])],\n\t[yes],[PKG_CHECK_MODULES([MAXMINDDB], [libmaxminddb],\n\t\t\t\t      [AC_DEFINE([HAVE_GEOIP2], [1], [Build with GeoIP2 support])\n\t\t\t\t       PKG_CHECK_VAR([MAXMINDDB_PREFIX], [libmaxminddb], [prefix], [], [AC_MSG_ERROR([libmaxminddb prefix not found in pkg-config; set MAXMINDDB_PREFIX in the environment])])\n\t\t\t\t       GEOIP2LINKSRCS='${GEOIP2LINKSRCS}'\n\t\t\t\t       GEOIP2LINKOBJS='${GEOIP2LINKOBJS}'\n\t\t\t\t      ])],\n\t[ # default\n\t    AX_SAVE_FLAGS([geoip2])\n\t    MAXMINDDB_CFLAGS=\"-I$with_geoip2/include\"\n\t    MAXMINDDB_LIBS=\"-L$with_geoip2/libs\"\n\t    CFLAGS=\"$CFLAGS $MAXMINDDB_CFLAGS\"\n\t    LDFLAGS=\"$LDFLAGS $MAXMINDDB_LIBS\"\n\t    AC_SEARCH_LIBS([MMDB_open], [maxminddb],\n\t\t\t   [AC_DEFINE([HAVE_GEOIP2], [1], [Build with GeoIP2 support])\n\t\t\t    GEOIP2LINKSRCS='${GEOIP2LINKSRCS}'\n\t\t\t    GEOIP2LINKOBJS='${GEOIP2LINKOBJS}'\n\t\t\t    MAXMINDDB_LIBS=\"$MAXMINDDB_LIBS $ac_cv_search_mmdb_open\"\n\t\t\t    AC_MSG_NOTICE([GeoIP2 default database path set to $with_geoip2/share/GeoIP])\n\t\t\t    AS_VAR_COPY([MAXMINDDB_PREFIX], [$with_geoip2])\n\t\t\t   ],\n\t\t\t   [AC_MSG_ERROR([GeoIP2 requested, but libmaxminddb not found])])\n\t    AX_RESTORE_FLAGS([maxminddb])\n\t])\nAC_ARG_VAR([MAXMINDDB_PREFIX], [value of prefix for MAXMINDDB, overriding pkg-config])\nAC_SUBST([MAXMINDDB_CFLAGS])\nAC_SUBST([MAXMINDDB_LIBS])\nAC_SUBST([GEOIP2LINKSRCS])\nAC_SUBST([GEOIP2LINKOBJS])\n\nGEOIPLINKSRCS=\nGEOIPLINKOBJS=\nif test \"yes\" = \"$use_geoip\"\nthen\n\tfor d in /usr /usr/local /opt/local\n\tdo\n\t\tif test -f $d/include/GeoIP.h\n\t\tthen\n\t\t\tuse_geoip=$d\n\t\t\tbreak\n\t\tfi\n\tdone\nfi\n\ncase \"$use_geoip\" in\n\tno|'')\n\t\t;;\n\t*)\n\t\tif test -d \"$use_geoip\" -o -L \"$use_geoip\"\n\t\tthen\n\t\t\tCFLAGS=\"$CFLAGS -I$use_geoip/include\"\n\t\t\tCPPFLAGS=\"$CPPFLAGS -I$use_geoip/include\"\n\t\t\tLIBS=\"$LIBS -L$use_geoip/lib\"\n\t\t\tcase \"$host_os\" in\n\t\t\t\tnetbsd*|openbsd*|solaris*)\n\t\t\t\t\tLIBS=\"$LIBS -Wl,-rpath=$use_geoip/lib\"\n\t\t\t\t\t;;\n\t\t\tesac\n\t\telif test \"yes\" = \"$use_geoip\"\n\t\tthen\n\t\t\tAC_MSG_ERROR([GeoIP path not found])\n\t\telse\n\t\t\tAC_MSG_ERROR([GeoIP path $use_geoip does not exist])\n\t\tfi\n\t\tAC_CHECK_HEADER(GeoIP.h, [],\n\t\t\t[AC_MSG_ERROR([GeoIP header file not found])]\n\t\t)\n\t\tAC_SEARCH_LIBS(GeoIP_id_by_addr_gl, GeoIP, [],\n\t\t\t[AC_MSG_ERROR([suitable GeoIP library not found])]\n\t\t)\n\t\tAC_SEARCH_LIBS(fabsf, m, [],\n\t\t\t[AC_MSG_ERROR([Math library not found])]\n\t\t)\n\t\tAC_DEFINE(HAVE_GEOIP, 1, Build with GeoIP support)\n\t\tGEOIPLINKSRCS='${GEOIPLINKSRCS}'\n\t\tGEOIPLINKOBJS='${GEOIPLINKOBJS}'\n\t\tAC_MSG_CHECKING([for GeoIP support])\n\t\tAC_MSG_RESULT([yes])\n\n\t\tAC_MSG_CHECKING([for GeoIP Country IPv6 support])\n\t\tAC_COMPILE_IFELSE(\n\t\t\t[AC_LANG_PROGRAM([\n\t\t\t\t#include <GeoIP.h>\n\t\t\t\t#include <netinet/in.h>\n\t\t\t], [\n\t\t\t\tstruct in6_addr in6;\n\t\t\t\tGeoIP_country_name_by_ipnum_v6(NULL, in6);\n\t\t\t])],\n\t\t\t[\n\t\t\t\tAC_MSG_RESULT([yes])\n\t\t\t\tAC_DEFINE(HAVE_GEOIP_V6, 1, Build with GeoIP Country IPv6 support)\n\t\t\t],\n\t\t\t[AC_MSG_RESULT([no])]\n\t\t)\n\n\t\tAC_MSG_CHECKING([for GeoIP City IPv6 support])\n\t\tAC_COMPILE_IFELSE(\n\t\t\t[AC_LANG_PROGRAM([\n\t\t\t\t#include <GeoIP.h>\n\t\t\t\t#include <GeoIPCity.h>\n\t\t\t\t#include <netinet/in.h>\n\t\t\t], [\n\t\t\t\tstruct in6_addr in6;\n\t\t\t\tint i = GEOIP_CITY_EDITION_REV0_V6;\n\t\t\t\tGeoIP_record_by_ipnum_v6(NULL, in6);\n\t\t\t])],\n\t\t\t[\n\t\t\t\tAC_MSG_RESULT([yes])\n\t\t\t\tAC_DEFINE(HAVE_GEOIP_CITY_V6, 1, Build with GeoIP City IPv6 support)\n\t\t\t],\n\t\t\t[AC_MSG_RESULT([no])]\n\t\t)\n\t\t;;\nesac\nAC_SUBST(GEOIPLINKSRCS)\nAC_SUBST(GEOIPLINKOBJS)\n\n#\n# Do we have arc4random(), etc ?\n#\nAC_CHECK_FUNCS(arc4random arc4random_buf arc4random_uniform getrandom)\n\nAX_PTHREAD\n\nLIBS=\"$PTHREAD_LIBS $LIBS\"\nCFLAGS=\"$CFLAGS $PTHREAD_CFLAGS\"\nCC=\"$PTHREAD_CC\"\n\n#\n# We'd like to use sigwait() too\n#\nAC_CHECK_FUNCS([sigwait pthread_attr_getstacksize pthread_attr_setstacksize])\n\nAC_ARG_WITH([locktype],\n\t    AS_HELP_STRING([--with-locktype=ARG],\n\t\t\t   [Specify mutex lock type\n\t\t\t    (adaptive or standard)]),\n\t    [], [with_locktype=\"adaptive\"])\n\nAS_CASE([$with_locktype],\n\t[adaptive],[\n\t  AC_MSG_CHECKING([for PTHREAD_MUTEX_ADAPTIVE_NP])\n\t  AC_COMPILE_IFELSE(\n\t    [AC_LANG_PROGRAM(\n\t       [[\n\t\t #ifndef _GNU_SOURCE\n\t\t #define _GNU_SOURCE\n\t\t #endif\n\t\t #include <pthread.h>\n\t       ]],\n\t       [[\n\t\t return (PTHREAD_MUTEX_ADAPTIVE_NP);\n\t       ]]\n\t     )],\n\t    [AC_MSG_RESULT([using adaptive lock type])\n\t     AC_DEFINE([HAVE_PTHREAD_MUTEX_ADAPTIVE_NP], 1,\n\t\t       [Support for PTHREAD_MUTEX_ADAPTIVE_NP]) ],\n\t    [AC_MSG_RESULT([using standard lock type])]\n\t  )],\n\t[standard],[AC_MSG_RESULT([using standard lock type])],\n\t[AC_MSG_ERROR([You must specify \"adaptive\" or \"standard\" for --with-locktype.])]\n       )\n\nAC_CHECK_HEADERS([sched.h])\n\nAC_SEARCH_LIBS([sched_yield],[rt])\nAC_CHECK_FUNCS([sched_yield pthread_yield pthread_yield_np])\n\nAC_CHECK_HEADERS([sys/cpuset.h])\nAC_CHECK_HEADERS([sys/procset.h])\nAC_CHECK_FUNCS([pthread_setaffinity_np cpuset_setaffinity processor_bind sched_setaffinity])\n\n# Look for functions relating to thread naming\nAC_CHECK_FUNCS([pthread_setname_np pthread_set_name_np])\nAC_CHECK_HEADERS([pthread_np.h], [], [], [#include <pthread.h>])\n\n#\n# flockfile is usually provided by pthreads\n#\nAC_CHECK_FUNCS([flockfile getc_unlocked])\n\n#\n# Look for sysconf to allow detection of the number of processors.\n#\nAC_CHECK_FUNCS([sysconf])\n\nAC_SUBST(ALWAYS_DEFINES)\n\nAC_MSG_CHECKING(for libtool)\nAC_ARG_WITH(libtool, AS_HELP_STRING([--with-libtool], [use GNU libtool]),\n\t    use_libtool=\"$withval\", use_libtool=\"no\")\n\ncase $use_libtool in\n\tyes)\n\t\tAC_MSG_RESULT(yes)\n\t\tAM_PROG_LIBTOOL\n\t\tO=lo\n\t\tA=la\n\t\tLIBTOOL_MKDEP_SED='s;\\.o;\\.lo;'\n\t\tLIBTOOL_MODE_COMPILE='--mode=compile'\n\t\tLIBTOOL_MODE_INSTALL='--mode=install'\n\t\tLIBTOOL_MODE_LINK='--mode=link'\n\t\tLIBTOOL_MODE_UNINSTALL='--mode=uninstall'\n\t\tINSTALL_LIBRARY='${INSTALL_PROGRAM}'\n\t\t;;\n\t*)\n\t\tAC_MSG_RESULT(no)\n\t\tO=o\n\t\tA=a\n\t\tLIBTOOL=\n\t\tAC_SUBST(LIBTOOL)\n\t\tLIBTOOL_MKDEP_SED=\n\t\tLIBTOOL_MODE_COMPILE=\n\t\tLIBTOOL_MODE_INSTALL=\n\t\tLIBTOOL_MODE_LINK=\n\t\tLIBTOOL_MODE_UNINSTALL=\n\t\tINSTALL_LIBRARY='${INSTALL_DATA}'\n\t\t;;\nesac\nAC_SUBST(INSTALL_LIBRARY)\n\n#\n# If PIC is disabled, shared libraries must also be\n#\nAS_IF([test \"$pic_mode\" = \"no\"],\n      [enable_shared=\"no\"])\n\nCRYPTO=OpenSSL\n\n#\n# was --with-openssl specified?\n#\nAX_CHECK_OPENSSL([:],[AC_MSG_FAILURE([OpenSSL/LibreSSL not found])])\n\nsave_CFLAGS=\"$CFLAGS\"\nsave_LIBS=\"$LIBS\"\nsave_LDFLAGS=\"$LDFLAGS\"\nCFLAGS=\"$CFLAGS $OPENSSL_INCLUDES\"\nLIBS=\"$LIBS $OPENSSL_LIBS\"\nLDFLAGS=\"$LDFLAGS $OPENSSL_LDFLAGS\"\n\nAC_MSG_CHECKING([for OpenSSL >= 1.0.0 or LibreSSL])\nAC_COMPILE_IFELSE(\n    [AC_LANG_PROGRAM([[#include <openssl/opensslv.h>]],\n\t\t     [[#if !defined(LIBRESSL_VERSION_NUMBER) && (OPENSSL_VERSION_NUMBER < 0x1000000fL)\n\t\t       #error OpenSSL >= 1.0.0 or LibreSSL required\n\t\t       #endif\n\t\t      ]])],\n    [AC_MSG_RESULT([yes])],\n    [AC_MSG_FAILURE([not found])])\n\n#\n# Check for functions added in OpenSSL or LibreSSL\n#\n\nAC_CHECK_FUNCS([CRYPTO_zalloc])\nAC_CHECK_FUNCS([EVP_CIPHER_CTX_new EVP_CIPHER_CTX_free])\nAC_CHECK_FUNCS([EVP_MD_CTX_new EVP_MD_CTX_free EVP_MD_CTX_reset])\nAC_CHECK_FUNCS([HMAC_CTX_new HMAC_CTX_free HMAC_CTX_reset HMAC_CTX_get_md])\n\n#\n# Check for algorithm support in OpenSSL\n#\n\nAC_CHECK_FUNCS([ECDSA_sign ECDSA_verify], [:],\n\t       [AC_MSG_FAILURE([ECDSA support in OpenSSL is mandatory.])])\n\nAC_MSG_CHECKING([for ECDSA P-256 support])\nAC_COMPILE_IFELSE(\n    [AC_LANG_PROGRAM([[#include <openssl/evp.h>\n\t\t       #include <openssl/ec.h>]],\n\t\t     [[EC_KEY *key = EC_KEY_new_by_curve_name(NID_X9_62_prime256v1);]])],\n    [AC_MSG_RESULT([yes])],\n    [AC_MSG_FAILURE([not found.  ECDSA P-256 support in OpenSSL is mandatory.])])\n\nAC_MSG_CHECKING([for ECDSA P-384 support])\nAC_COMPILE_IFELSE(\n    [AC_LANG_PROGRAM([[#include <openssl/evp.h>\n\t\t       #include <openssl/ec.h>]],\n\t\t     [[EC_KEY *key = EC_KEY_new_by_curve_name(NID_secp384r1);]])],\n    [AC_MSG_RESULT([yes])],\n    [AC_MSG_FAILURE([not found.  ECDSA P-384 support in OpenSSL is mandatory.])])\n\nAC_MSG_CHECKING([for Ed25519 support])\nAC_COMPILE_IFELSE(\n    [AC_LANG_PROGRAM([[#include <openssl/evp.h>\n\t\t       #include <openssl/ec.h>]],\n\t\t     [[EC_KEY *key = EC_KEY_new_by_curve_name(NID_ED25519);]])],\n    [AC_DEFINE([HAVE_OPENSSL_ED25519], [1], [define if OpenSSL supports Ed25519])\n     AC_MSG_RESULT([yes])],\n    [AC_MSG_RESULT([no])])\n\nAC_MSG_CHECKING([for Ed448 support])\nAC_COMPILE_IFELSE(\n    [AC_LANG_PROGRAM([[#include <openssl/evp.h>\n\t\t       #include <openssl/ec.h>]],\n\t\t     [[EC_KEY *key = EC_KEY_new_by_curve_name(NID_ED448);]])],\n    [AC_DEFINE([HAVE_OPENSSL_ED448], [1], [define if OpenSSL supports Ed448])\n     AC_MSG_RESULT([yes])],\n    [AC_MSG_RESULT([no])])\n\n#\n# Check for OpenSSL SHA-1 support\n#\nAC_CHECK_FUNCS([EVP_sha1], [:],\n\t       [AC_MSG_FAILURE([SHA-1 support in OpenSSL is mandatory.])])\n\n#\n# Check for OpenSSL SHA-2 support\n#\nAC_CHECK_FUNCS([EVP_sha224 EVP_sha256 EVP_sha384 EVP_sha512], [:],\n\t       [AC_MSG_FAILURE([SHA-2 support in OpenSSL is mandatory.])])\n\n#\n# Check for OpenSSL AES support\n#\nAC_CHECK_FUNCS([EVP_aes_128_ecb EVP_aes_192_ecb EVP_aes_256_ecb], [:],\n\t       [AC_MSG_FAILURE([AES support in OpenSSL is mandatory.])])\n\n#\n# Check for OpenSSL 1.1.x/LibreSSL functions\n#\nAC_CHECK_FUNCS([DH_get0_key ECDSA_SIG_get0 RSA_set0_key])\n\n#\n# Check whether FIPS mode is available and whether we should enable it\n#\nAC_ARG_ENABLE([fips-mode],\n\t      [AS_HELP_STRING([--enable-fips-mode],\n\t\t\t      [enable FIPS mode in OpenSSL library [default=no]])],\n\t      [], [enable_fips_mode=\"no\"])\n\nAC_MSG_CHECKING([whether to enable FIPS mode in OpenSSL library])\nAS_CASE([$enable_fips_mode],\n\t[yes], [AC_MSG_RESULT([yes])\n\t\tAC_CHECK_FUNCS([FIPS_mode],\n\t\t\t       [], [AC_MSG_FAILURE([OpenSSL FIPS mode requested but not available.])])],\n\t[no], [AC_MSG_RESULT([no])])\n\nCFLAGS=\"$save_CFLAGS\"\nLIBS=\"$save_LIBS\"\nLDFLAGS=\"$save_LDFLAGS\"\n\nAC_SUBST([OPENSSL_INCLUDES])\nAC_SUBST([OPENSSL_LIBS])\nAC_SUBST([OPENSSL_LDFLAGS])\n\n#\n# Client Cookie algorithm choice\n#\nAC_ARG_WITH([cc-alg],\n\t    [AS_HELP_STRING([--with-cc-alg=ALG], [deprecated])],\n\t    [:], [with_cc_alg=\"siphash24\"])\n\nAS_CASE([$with_cc_alg],\n\t[siphash24],[:],\n\t[AC_MSG_WARN([The Client Cookie is always SipHash 2-4 based])])\n\nPKCS11_TOOLS=\nPKCS11_TEST=\n#\n# was --enable-native-pkcs11 specified?\n#\nAC_ARG_ENABLE(native-pkcs11,\n\t      AS_HELP_STRING([--enable-native-pkcs11],\n\t\t\t     [use native PKCS11 for public-key crypto [default=no]]),\n\t      [:], [enable_native_pkcs11=\"no\"])\n\nAC_MSG_CHECKING([for PKCS11 for Public-Key Cryptography])\nAS_CASE([$enable_native_pkcs11],\n\t[no],[AC_MSG_RESULT([no])],\n\t[yes],[PKCS11_TOOLS=pkcs11\n\t       PKCS11_TEST=pkcs11\n\t       CRYPTO=pkcs11\n\t       AS_IF([$use_threads],\n\t\t     [:],\n\t\t     [AC_MSG_ERROR([PKCS11 requires threading support])])\n\t       AC_MSG_RESULT([yes])\n\t       AC_CHECK_FUNCS([getpassphrase])\n\t      ])\nAC_SUBST([PKCS11_TEST])\nAC_SUBST([PKCS11_TOOLS])\n\nAS_CASE([$CRYPTO],\n\t[pkcs11],[AC_DEFINE([USE_PKCS11], [1], [define if PKCS11 is used for Public-Key Cryptography])],\n\t[AC_DEFINE([USE_OPENSSL], [1], [define if OpenSSL is used for Public-Key Cryptography])])\n\n# preparation for automake\n# AM_CONDITIONAL([PKCS11_TOOLS], [test \"$with_native_pkcs11\" = \"yes\"])\n\n#\n# was --with-pkcs11 specified?\n#\nAC_ARG_WITH([pkcs11],\n\t    [AS_HELP_STRING([--with-pkcs11[=PATH]],\n\t\t\t    [Build with PKCS11 support [no|path] (PATH is for the PKCS11 provider)])],\n\t    [:], [with_pkcs11=\"undefined\"])\n\nAS_CASE([$with_pkcs11],\n\t[yes|auto],[AC_MSG_ERROR([--with-pkcs11 needs explicit path to the PKCS11 library])],\n\t[no|undefined],[with_pkcs11=\"undefined\"])\nAC_DEFINE_UNQUOTED([PK11_LIB_LOCATION], [\"$with_pkcs11\"], [define the default PKCS11 library path])\n\n# for PKCS11 benchmarks\n\nhave_clock_gt=no\nAC_CHECK_FUNC(clock_gettime,have_clock_gt=yes,)\nif test \"no\" = \"$have_clock_gt\"; then\n\tAC_CHECK_LIB(rt,clock_gettime,have_clock_gt=rt,)\nfi\n\nif test \"no\" != \"$have_clock_gt\"; then\n\tAC_DEFINE(HAVE_CLOCK_GETTIME, 1, [Define if clock_gettime is available.])\nfi\n\nif test \"rt\" = \"$have_clock_gt\"; then\n\tLIBS=\"-lrt $LIBS\"\nfi\n\nAC_MSG_CHECKING(for GSSAPI library)\nAC_ARG_WITH(gssapi,\n\t    AS_HELP_STRING([--with-gssapi=[PATH|[/path/]krb5-config]],\n\t\t\t   [Specify path for system-supplied GSSAPI\n\t\t\t\t[default=auto]]),\n\t    use_gssapi=\"$withval\", use_gssapi=\"auto\")\n\n# first try using krb5-config, if that does not work then fall back to \"yes\" method.\n\ncase \"$use_gssapi\" in\n*/krb5-config|krb5-config)\n    AC_MSG_RESULT(trying $use_gssapi)\n    if test krb5-config = \"$use_gssapi\"\n    then\n\tAC_PATH_PROG(KRB5_CONFIG, $use_gssapi)\n    else\n\tKRB5_CONFIG=\"$use_gssapi\"\n    fi\n    gssapi_cflags=`$KRB5_CONFIG --cflags gssapi`\n    gssapi_libs=`$KRB5_CONFIG --libs gssapi`\n    saved_cppflags=\"$CPPFLAGS\"\n    CPPFLAGS=\"$gssapi_cflags $CPPFLAGS\"\n    AC_CHECK_HEADERS(gssapi.h gssapi/gssapi.h,\n\t[ISC_PLATFORM_GSSAPIHEADER=\"#define ISC_PLATFORM_GSSAPIHEADER <$ac_header>\"])\n    if test \"\" = \"$ISC_PLATFORM_GSSAPIHEADER\"; then\n\tAC_MSG_RESULT([krb5-config: gssapi.h not found])\n\tCPPFLAGS=\"$saved_cppflags\"\n\tuse_gssapi=\"yes\"\n    else\n\tAC_CHECK_HEADERS(krb5/krb5.h krb5.h,\n\t    [ISC_PLATFORM_KRB5HEADER=\"#define ISC_PLATFORM_KRB5HEADER <$ac_header>\"])\n\tif test \"\" = \"$ISC_PLATFORM_KRB5HEADER\"; then\n\t    AC_MSG_RESULT([krb5-config: krb5.h not found])\n\t    CPPFLAGS=\"$saved_cppflags\"\n\t    use_gssapi=\"yes\"\n\telse\n\t    CPPFLAGS=\"$saved_cppflags\"\n\t    saved_libs=\"$LIBS\"\n\t    LIBS=$gssapi_libs\n\t    AC_MSG_CHECKING([krb5-config linking as $LIBS])\n\t    AC_TRY_LINK( , [gss_acquire_cred();krb5_init_context()],\n\t\tgssapi_linked=yes, gssapi_linked=no)\n\t    case $gssapi_linked in\n\t\tyes) AC_MSG_RESULT([krb5-config: linked]);;\n\t\tno)  AC_MSG_RESULT([krb5-config: could not determine proper GSSAPI linkage])\n\t\t    use_gssapi=\"yes\"\n\t\t    ;;\n\t    esac\n\t    LIBS=$saved_libs\n\tfi\n    fi\n    if test \"yes\" = \"$use_gssapi\"; then\n\tAC_MSG_CHECKING([for GSSAPI library, non krb5-config method])\n    fi\n    ;;\nesac\n\ncase \"$host\" in\n*darwin*)\n\tif test \"yes\" = \"$use_gssapi\" -o \"auto\" = \"$use_gssapi\"\n\tthen\n\t\tuse_gssapi=framework\n\tfi\n\t;;\nesac\n\n# gssapi is just the framework, we really require kerberos v5, so\n# look for those headers (the gssapi headers must be there, too)\n# The problem with this implementation is that it doesn't allow\n# for the specification of gssapi and krb5 headers in different locations,\n# which probably ought to be fixed although fixing might raise the issue of\n# trying to build with incompatible versions of gssapi and krb5.\nif test \"yes\" = \"$use_gssapi\" -o \"auto\" = \"$use_gssapi\"\nthen\n\t# first, deal with the obvious\n\tif test \\( -f /usr/include/kerberosv5/krb5.h -o \\\n\t\t   -f /usr/include/krb5/krb5.h -o \\\n\t\t   -f /usr/include/krb5.h \\)   -a \\\n\t\t\\( -f /usr/include/gssapi.h -o \\\n\t\t   -f /usr/include/gssapi/gssapi.h \\)\n\tthen\n\t\tuse_gssapi=/usr\n\telse\n\t    krb5dirs=\"/usr/local /usr/local/krb5 /usr/local/kerberosv5 /usr/local/kerberos /usr/pkg /usr/krb5 /usr/kerberosv5 /usr/kerberos /usr\"\n\t    for d in $krb5dirs\n\t    do\n\t\tif test -f $d/include/gssapi/gssapi_krb5.h -o \\\n\t\t\t-f $d/include/krb5.h\n\t\tthen\n\t\t\tif test -f $d/include/gssapi/gssapi.h -o \\\n\t\t\t\t-f $d/include/gssapi.h\n\t\t\tthen\n\t\t\t\tuse_gssapi=$d\n\t\t\t\tbreak\n\t\t\tfi\n\t\tfi\n\t    done\n\t    if test \"auto\" = \"$use_gssapi\"\n\t    then\n\t\tuse_gssapi=\"no\"\n\t    fi\n\tfi\nfi\n\ncase \"$use_gssapi\" in\n\tno)\n\t\tAC_MSG_RESULT(disabled)\n\t\tUSE_GSSAPI=''\n\t\t;;\n\tyes)\n\t\tAC_MSG_ERROR([--with-gssapi must specify a path])\n\t\t;;\n\t*/krb5-config|krb5-config)\n\t\tUSE_GSSAPI='-DGSSAPI'\n\t\tDST_GSSAPI_INC=\"$gssapi_cflags\"\n\t\tDNS_GSSAPI_LIBS=\"$gssapi_libs\"\n\t\t;;\n\tframework)\n\t\tUSE_GSSAPI='-DGSSAPI'\n\t\tISC_PLATFORM_GSSAPIHEADER=\"#define ISC_PLATFORM_GSSAPIHEADER <Kerberos/Kerberos.h>\"\n\t\tISC_PLATFORM_KRB5HEADER=\"#define ISC_PLATFORM_KRB5HEADER <Kerberos/Kerberos.h>\"\n\t\tDNS_GSSAPI_LIBS=\"-framework Kerberos\"\n\t\tAC_MSG_RESULT(framework)\n\t\t;;\n\n\t*)\n\t\tAC_MSG_RESULT(looking in $use_gssapi/lib)\n\t\tUSE_GSSAPI='-DGSSAPI'\n\t\tsaved_cppflags=\"$CPPFLAGS\"\n\t\tCPPFLAGS=\"-I$use_gssapi/include $CPPFLAGS\"\n\t\tAC_CHECK_HEADERS(gssapi.h gssapi/gssapi.h,\n\t\t    [ISC_PLATFORM_GSSAPIHEADER=\"#define ISC_PLATFORM_GSSAPIHEADER <$ac_header>\"\n\t\t     gssapi_hack=\"#include <$ac_header>\"])\n\n\t\tif test \"\" = \"$ISC_PLATFORM_GSSAPIHEADER\"; then\n\t\t    AC_MSG_ERROR([gssapi.h not found])\n\t\tfi\n\n\t\tAC_CHECK_HEADERS(gssapi_krb5.h gssapi/gssapi_krb5.h,\n\t\t    [ISC_PLATFORM_GSSAPI_KRB5_HEADER=\"#define ISC_PLATFORM_GSSAPI_KRB5_HEADER <$ac_header>\"\n\t\t     gssapi_krb5_hack=\"#include <$ac_header>\"])\n\n\t\tAC_CHECK_HEADERS(krb5.h krb5/krb5.h kerberosv5/krb5.h,\n\t\t    [ISC_PLATFORM_KRB5HEADER=\"#define ISC_PLATFORM_KRB5HEADER <$ac_header>\"\n\t\t    krb5_hack=\"#include <$ac_header>\"])\n\n\t\tif test \"\" = \"$ISC_PLATFORM_KRB5HEADER\"; then\n\t\t    AC_MSG_ERROR([krb5.h not found])\n\t\tfi\n\n\t\t#\n\t\t# XXXDCL This probably doesn't work right on all systems.\n\t\t# It will need to be worked on as problems become evident.\n\t\t#\n\t\t# Essentially the problems here relate to two different\n\t\t# areas.  The first area is building with either KTH\n\t\t# or MIT Kerberos, particularly when both are present on\n\t\t# the machine.  The other is static versus dynamic linking.\n\t\t#\n\t\t# On the KTH vs MIT issue, Both have libkrb5 that can mess\n\t\t# up the works if one implementation ends up trying to\n\t\t# use the other's krb.  This is unfortunately a situation\n\t\t# that very easily arises.\n\t\t#\n\t\t# Dynamic linking when the dependency information is built\n\t\t# into MIT's libgssapi_krb5 or KTH's libgssapi magically makes\n\t\t# all such problems go away, but when that setup is not\n\t\t# present, because either the dynamic libraries lack\n\t\t# dependencies or static linking is being done, then the\n\t\t# problems start to show up.\n\t\tsaved_libs=\"$LIBS\"\n\t\tfor TRY_LIBS in \\\n\t\t    \"-lgssapi_krb5\" \\\n\t\t    \"-lgssapi_krb5 -lkrb5 -lk5crypto -lcom_err\" \\\n\t\t    \"-lgssapi_krb5 -lkrb5 -lk5crypto -lcom_err -lresolv\" \\\n\t\t    \"-lgssapi\" \\\n\t\t    \"-lgssapi -lkrb5 -ldes -lcrypt -lasn1 -lroken -lcom_err\" \\\n\t\t    \"-lgssapi -lkrb5 -lcrypt -lasn1 -lroken -lcom_err\" \\\n\t\t    \"-lgssapi -lkrb5 -lgssapi_krb5 -lcrypt -lasn1 -lroken -lcom_err\" \\\n\t\t    \"-lgssapi -lkrb5 -lhx509 -lcrypt -lasn1 -lroken -lcom_err\" \\\n\t\t    \"-lgss -lkrb5\"\n\t\tdo\n\t\t    # Note that this does not include $saved_libs, because\n\t\t    # on FreeBSD machines this configure script has added\n\t\t    # -L/usr/local/lib to LIBS, which can make the\n\t\t    # -lgssapi_krb5 test succeed with shared libraries even\n\t\t    # when you are trying to build with KTH in /usr/lib.\n\t\t    if test \"/usr\" = \"$use_gssapi\"\n\t\t    then\n\t\t\t    LIBS=\"$TRY_LIBS $ISC_OPENSSL_LIBS\"\n\t\t    else\n\t\t\t    LIBS=\"-L$use_gssapi/lib $TRY_LIBS $ISC_OPENSSL_LIBS\"\n\t\t    fi\n\t\t    AC_MSG_CHECKING(linking as $TRY_LIBS)\n\t\t    AC_TRY_LINK([\n#include <sys/types.h>\n$gssapi_hack\n$gssapi_krb5_hack\n$krb5_hack\n\t\t\t\t] , [gss_acquire_cred(NULL, NULL, 0, NULL, 0, NULL, NULL, NULL);krb5_init_context(NULL);\n#if defined(HAVE_GSSAPI_KRB5_H) || defined(HAVE_GSSAPI_GSSAPI_KRB5_H)\ngsskrb5_register_acceptor_identity(NULL);\n#endif],\n\t\t\t\tgssapi_linked=yes, gssapi_linked=no)\n\t\t    case $gssapi_linked in\n\t\t    yes) AC_MSG_RESULT(yes); break ;;\n\t\t    no)  AC_MSG_RESULT(no) ;;\n\t\t    esac\n\t\tdone\n\n\t\tCPPFLAGS=\"$saved_cppflags\"\n\n\t\tcase $gssapi_linked in\n\t\tno) AC_MSG_ERROR(could not determine proper GSSAPI linkage) ;;\n\t\tesac\n\n\t\t#\n\t\t# XXXDCL Major kludge.  Tries to cope with KTH in /usr/lib\n\t\t# but MIT in /usr/local/lib and trying to build with KTH.\n\t\t# /usr/local/lib can end up earlier on the link lines.\n\t\t# Like most kludges, this one is not only inelegant it\n\t\t# is also likely to be the wrong thing to do at least as\n\t\t# many times as it is the right thing.  Something better\n\t\t# needs to be done.\n\t\t#\n\t\tif test \"/usr\" = \"$use_gssapi\" -a \\\n\t\t\t-f /usr/local/lib/libkrb5.a; then\n\t\t    FIX_KTH_VS_MIT=yes\n\t\tfi\n\n\t\tcase \"$FIX_KTH_VS_MIT\" in\n\t\tyes)\n\t\t    case \"$enable_static_linking\" in\n\t\t    yes) gssapi_lib_suffix=\".a\"  ;;\n\t\t    *)   gssapi_lib_suffix=\".so\" ;;\n\t\t    esac\n\n\t\t    for lib in $LIBS; do\n\t\t\tcase $lib in\n\t\t\t-L*)\n\t\t\t    ;;\n\t\t\t-l*)\n\t\t\t    new_lib=`echo $lib |\n\t\t\t\t     sed -e s%^-l%$use_gssapi/lib/lib% \\\n\t\t\t\t\t -e s%$%$gssapi_lib_suffix%`\n\t\t\t    NEW_LIBS=\"$NEW_LIBS $new_lib\"\n\t\t\t    ;;\n\t\t\t*)\n\t\t\t   AC_MSG_ERROR([KTH vs MIT Kerberos confusion!])\n\t\t\t    ;;\n\t\t\tesac\n\t\t    done\n\t\t    LIBS=\"$NEW_LIBS\"\n\t\t    ;;\n\t\tesac\n\n\t\tDST_GSSAPI_INC=\"-I$use_gssapi/include\"\n\t\tDNS_GSSAPI_LIBS=\"$LIBS\"\n\n\t\tAC_MSG_RESULT(using GSSAPI from $use_gssapi/lib and $use_gssapi/include)\n\t\tLIBS=\"$saved_libs\"\n\t\t;;\nesac\n\nAC_SUBST(ISC_PLATFORM_HAVEGSSAPI)\nAC_SUBST(ISC_PLATFORM_GSSAPIHEADER)\nAC_SUBST(ISC_PLATFORM_GSSAPI_KRB5_HEADER)\nAC_SUBST(ISC_PLATFORM_KRB5HEADER)\n\nAC_SUBST(USE_GSSAPI)\nAC_SUBST(DST_GSSAPI_INC)\nAC_SUBST(DNS_GSSAPI_LIBS)\nDNS_CRYPTO_LIBS=\"$DNS_GSSAPI_LIBS\"\n\n#\n# Applications linking with libdns also need to link with these libraries.\n#\n\nAC_SUBST(DNS_CRYPTO_LIBS)\n\n#\n# was --with-lmdb specified?\n#\nAC_MSG_CHECKING(for lmdb library)\nAC_ARG_WITH(lmdb,\n\t    AS_HELP_STRING([--with-lmdb[=PATH]],\n\t\t\t   [build with LMDB library [yes|no|path]]),\n    use_lmdb=\"$withval\", use_lmdb=\"auto\")\n\nhave_lmdb=\"\"\ncase \"$use_lmdb\" in\n\tno)\n\t\tlmdb_libs=\"\"\n\t\t;;\n\tauto|yes)\n\t\tfor d in /usr /usr/local /opt/local\n\t\tdo\n\t\t\tif test -f \"${d}/include/lmdb.h\"\n\t\t\tthen\n\t\t\t\tif test ${d} != /usr\n\t\t\t\tthen\n\t\t\t\t\tlmdb_cflags=\"-I ${d}/include\"\n\t\t\t\t\tLIBS=\"$LIBS -L${d}/lib\"\n\t\t\t\tfi\n\t\t\t\thave_lmdb=\"yes\"\n\t\t\tfi\n\t\tdone\n\t\t;;\n\t*)\n\t\tif test -f \"${use_lmdb}/include/lmdb.h\"\n\t\tthen\n\t\t\tlmdb_cflags=\"-I${use_lmdb}/include\"\n\t\t\tLIBS=\"$LIBS -L${use_lmdb}/lib\"\n\t\t\thave_lmdb=\"yes\"\n\t\telse\n\t\t\tAC_MSG_ERROR([$use_lmdb/include/lmdb.h not found.])\n\t\tfi\n\t\t;;\nesac\n\nif test \"X${have_lmdb}\" != \"X\"\nthen\n\tAC_MSG_RESULT(yes)\n\tAC_SEARCH_LIBS([mdb_env_create], [lmdb], [],\n\t\t       [AC_MSG_ERROR([found lmdb include but not library.])\n\t\t\thave_lmdb=\"\"])\nelif test \"X$use_lmdb\" = Xyes\nthen\n\tAC_MSG_ERROR([include/lmdb.h not found.])\nelse\n\tAC_MSG_RESULT(no)\nfi\n\nNZD_TOOLS=\"\"\nNZDSRCS=\nNZDTARGETS=\nif test \"X${have_lmdb}\" != \"X\"\nthen\n\tCFLAGS=\"$CFLAGS $lmdb_cflags\"\n\tAC_DEFINE(HAVE_LMDB, 1, [Define if lmdb was found])\n\tNZD_TOOLS=\"nzd\"\n\tNZDSRCS='${NZDSRCS}'\n\tNZDTARGETS='${NZDTARGETS}'\nfi\nAC_SUBST(NZD_TOOLS)\nAC_SUBST(NZDSRCS)\nAC_SUBST(NZDTARGETS)\n\n#\n# was --with-libxml2 specified?\n#\nAC_MSG_CHECKING(for libxml2 library)\nAC_ARG_WITH(libxml2,\n\t    AS_HELP_STRING([--with-libxml2[=PATH]],\n\t\t\t   [build with libxml2 library [yes|no|path]]),\n    use_libxml2=\"$withval\", use_libxml2=\"auto\")\n\ncase \"$use_libxml2\" in\n\tno)\n\t\tDST_LIBXML2_INC=\"\"\n\t\t;;\n\tauto|yes)\n\t\tcase X`(xml2-config --version) 2>/dev/null` in\n\t\tX2.[[6789]].*)\n\t\t\tlibxml2_libs=`xml2-config --libs`\n\t\t\tlibxml2_cflags=`xml2-config --cflags`\n\t\t\t;;\n\t\t*)\n\t\t\tif test \"yes\" = \"$use_libxml2\" ; then\n\t\t\t\tAC_MSG_RESULT(no)\n\t\t\t\tAC_MSG_ERROR(required libxml2 version not available)\n\t\t\telse\n\t\t\t\tlibxml2_libs=\n\t\t\t\tlibxml2_cflags=\n\t\t\tfi\n\t\t\t;;\n\t\tesac\n\t\t;;\n\t*)\n\t\tif test -f \"$use_libxml2/bin/xml2-config\" ; then\n\t\t\tlibxml2_libs=`$use_libxml2/bin/xml2-config --libs`\n\t\t\tlibxml2_cflags=`$use_libxml2/bin/xml2-config --cflags`\n\t\tfi\n\t\t;;\nesac\n\nif test \"X$libxml2_libs\" != \"X\"\nthen\n\tCFLAGS=\"$CFLAGS $libxml2_cflags\"\n\tLIBS=\"$LIBS $libxml2_libs\"\n\t#\n\t# Sanity check xml2-config output.\n\t#\n\tAC_TRY_LINK([#include <libxml/xmlwriter.h>],\n\t\t    [return(xmlTextWriterStartElement(NULL, NULL));],\n\t\t    AC_MSG_RESULT(yes),\n\t\t    AC_MSG_ERROR(xml2-config returns badness))\n\tAC_DEFINE(HAVE_LIBXML2, 1, [Define if libxml2 was found])\n\tXMLSTATS=1\nelse\n\tAC_MSG_RESULT(no)\nfi\nAC_SUBST(XMLSTATS)\n\n#\n# was --with-libjson specified?\n#\nAC_MSG_CHECKING(for json library)\nAC_ARG_WITH(libjson,\n\t    AS_HELP_STRING([--with-libjson[=PATH]],\n\t\t\t   [build with libjson0 library [yes|no|path]]),\n\t    use_libjson=\"$withval\", use_libjson=\"auto\")\n\nhave_libjson=\"\"\nhave_libjson_c=\"\"\ncase \"$use_libjson\" in\n\tno)\n\t\tlibjson_libs=\"\"\n\t\t;;\n\tauto|yes)\n\t\tfor d in /usr /usr/local /opt/local\n\t\tdo\n\t\t\tif test -f \"${d}/include/json/json.h\"\n\t\t\tthen\n\t\t\t\tif test ${d} != /usr\n\t\t\t\tthen\n\t\t\t\t\tlibjson_cflags=\"-I ${d}/include\"\n\t\t\t\t\tLIBS=\"$LIBS -L${d}/lib\"\n\t\t\t\tfi\n\t\t\t\thave_libjson=\"yes\"\n\t\t\telif test -f \"${d}/include/json-c/json.h\"\n\t\t\tthen\n\t\t\t\tif test ${d} != /usr\n\t\t\t\tthen\n\t\t\t\t\tlibjson_cflags=\"-I ${d}/include\"\n\t\t\t\t\tLIBS=\"$LIBS -L${d}/lib\"\n\t\t\t\tfi\n\t\t\t\thave_libjson=\"yes\"\n\t\t\t\thave_libjson_c=\"yes\"\n\t\t\tfi\n\t\tdone\n\t\t;;\n\t*)\n\t\tif test -f \"${use_libjson}/include/json/json.h\"\n\t\tthen\n\t\t\tlibjson_cflags=\"-I${use_libjson}/include\"\n\t\t\tLIBS=\"$LIBS -L${use_libjson}/lib\"\n\t\t\thave_libjson=\"yes\"\n\t\telif test -f \"${use_libjson}/include/json-c/json.h\"\n\t\tthen\n\t\t\tlibjson_cflags=\"-I${use_libjson}/include\"\n\t\t\tLIBS=\"$LIBS -L${use_libjson}/lib\"\n\t\t\thave_libjson=\"yes\"\n\t\t\thave_libjson_c=\"yes\"\n\t\telse\n\t\t\tAC_MSG_ERROR([$use_libjson/include/json{,-c}/json.h not found.])\n\t\tfi\n\t\t;;\nesac\n\nif test \"X${have_libjson}\" != \"X\"\nthen\n\tAC_MSG_RESULT(yes)\n\tAC_SEARCH_LIBS([json_object_new_int64], [json json-c], [],\n\t\t       [AC_MSG_ERROR([found libjson include but not library.])\n\t\t\thave_libjson=\"\"])\nelif test \"X$use_libjson\" = Xyes\nthen\n\tAC_MSG_ERROR([include/json{,-c}/json.h not found.])\nelse\n\tAC_MSG_RESULT(no)\nfi\n\nif test \"X${have_libjson}\" != \"X\"\nthen\n\tCFLAGS=\"$CFLAGS $libjson_cflags\"\n\tAC_DEFINE(HAVE_JSON, 1, [Define if libjson was found])\n\tif test \"X${have_libjson_c}\" = Xyes\n\tthen\n\t\tAC_DEFINE(HAVE_JSON_C, 1, [Define if json-c was found])\n\tfi\n\tJSONSTATS=1\nfi\nAC_SUBST(JSONSTATS)\n\n#\n# was --with-zlib specified?\n#\nAC_MSG_CHECKING(for zlib library)\nAC_ARG_WITH(zlib,\n\t    AS_HELP_STRING([--with-zlib[=PATH]],\n\t\t\t   [build with zlib for HTTP compression\n\t\t\t\t[default=yes]]),\n\t    with_zlib=\"$withval\", with_zlib=\"auto\")\n\nhave_zlib=\"\"\ncase \"$with_zlib\" in\n\tno)\n\t\tzlib_libs=\"\"\n\t\t;;\n\tauto|yes)\n\t\tfor d in /usr /usr/local /opt/local\n\t\tdo\n\t\t\tif test -f \"${d}/include/zlib.h\"\n\t\t\tthen\n\t\t\t\tif test ${d} != /usr\n\t\t\t\tthen\n\t\t\t\t\tzlib_cflags=\"-I ${d}/include\"\n\t\t\t\t\tLIBS=\"$LIBS -L${d}/lib\"\n\t\t\t\tfi\n\t\t\t\thave_zlib=\"yes\"\n\t\t\tfi\n\t\tdone\n\t\t;;\n\t*)\n\t\tif test -f \"${with_zlib}/include/zlib.h\"\n\t\tthen\n\t\t\tzlib_cflags=\"-I${with_zlib}/include\"\n\t\t\tLIBS=\"$LIBS -L${with_zlib}/lib\"\n\t\t\thave_zlib=\"yes\"\n\t\telse\n\t\t\tAC_MSG_ERROR([$with_zlib/include/zlib.h not found.])\n\t\tfi\n\t\t;;\nesac\n\nif test \"X${have_zlib}\" != \"X\"\nthen\n\tAC_MSG_RESULT(yes)\n\tAC_SEARCH_LIBS([deflate], [z], [],\n\t\t       [AC_MSG_ERROR([found zlib include but not library.])\n\t\t\thave_zlib=\"\"])\nelif test \"X$with_zlib\" = Xyes\nthen\n\tAC_MSG_ERROR([include/zlib.h not found.])\nelse\n\tAC_MSG_RESULT(no)\nfi\n\nZLIB=\nif test \"X${have_zlib}\" != \"X\"\nthen\n\tCFLAGS=\"$CFLAGS $zlib_cflags\"\n\tAC_DEFINE(HAVE_ZLIB, 1, [Define if zlib was found])\n\tZLIB=1\nfi\nAC_SUBST(ZLIB)\n\n\n#\n# In solaris 10, SMF can manage named service\n#\nAC_CHECK_LIB(scf, smf_enable_instance)\n\n#\n# Large File\n#\nAC_ARG_ENABLE(largefile,\n\t      AS_HELP_STRING([--enable-largefile], [64-bit file support]),\n\t      want_largefile=\"yes\", want_largefile=\"no\")\ncase $want_largefile in\n\tyes)\n\t\tALWAYS_DEFINES=\"$ALWAYS_DEFINES -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64\"\n\t\t;;\n\t*)\n\t\t;;\nesac\n\n#\n# Additional compiler settings.\n#\nMKDEPCC=\"$CC\"\nMKDEPCFLAGS=\"-M\"\n\nif test \"X$GCC\" = \"Xyes\"; then\n\tSTD_CWARNINGS=\"$STD_CWARNINGS -W -Wall -Wmissing-prototypes -Wcast-qual -Wwrite-strings -Wformat -Wpointer-arith\"\n\tAC_MSG_CHECKING(if \"$CC\" supports -fno-strict-aliasing)\n\tSAVE_CFLAGS=\"$CFLAGS\"\n\tCFLAGS=\"$CFLAGS -Werror -fno-strict-aliasing\"\n\tAC_TRY_COMPILE(,, [FNOSTRICTALIASING=yes],[FNOSTRICTALIASING=no])\n\tCFLAGS=\"$SAVE_CFLAGS\"\n\tif test \"yes\" = \"$FNOSTRICTALIASING\"; then\n\t\tAC_MSG_RESULT(yes)\n\t\tSTD_CWARNINGS=\"$STD_CWARNINGS -fno-strict-aliasing\"\n\telse\n\t\tAC_MSG_RESULT(no)\n\tfi\n\t#\n\t# turn off delete null pointer checks\n\t#\n\tAC_MSG_CHECKING(if \"$CC\" supports -fno-delete-null-pointer-checks)\n\tSAVE_CFLAGS=\"$CFLAGS\"\n\tCFLAGS=\"$CFLAGS -Werror -fno-delete-null-pointer-checks\"\n\tAC_TRY_COMPILE(,, [FNODELETENULLPOINTERCHECKS=yes],\n\t\t\t  [FNODELETENULLPOINTERCHECKS=no])\n\tCFLAGS=\"$SAVE_CFLAGS\"\n\tif test \"yes\" = \"$FNODELETENULLPOINTERCHECKS\"; then\n\t\tAC_MSG_RESULT(yes)\n\t\tSTD_CWARNINGS=\"$STD_CWARNINGS -fno-delete-null-pointer-checks\"\n\telse\n\t\tAC_MSG_RESULT(no)\n\tfi\n\tif test \"X$enable_warn_shadow\" = Xyes; then\n\t\tSTD_CWARNINGS=\"$STD_CWARNINGS -Wshadow\"\n\tfi\n\tif test \"X$enable_warn_error\" = Xyes; then\n\t\tSTD_CWARNINGS=\"$STD_CWARNINGS -Werror\"\n\tfi\nelse\n\tcase $host in\n\t*-solaris*)\n\t\tMKDEPCFLAGS=\"-xM\"\n\t\t;;\n\tesac\nfi\n\nAC_SUBST(MKDEPCC)\nAC_SUBST(MKDEPCFLAGS)\nAC_SUBST(MKDEPPROG)\n\n#\n# -lxnet buys us one big porting headache...  standards, gotta love 'em.\n#\n# AC_CHECK_LIB(xnet, socket, ,\n#    AC_CHECK_LIB(socket, socket)\n# )\n#\n# Use this for now, instead:\n#\ncase \"$host\" in\n\t*-linux*)\n\t\t;;\n\t*)\n\t\tAC_CHECK_LIB(socket, socket)\n\t\tAC_CHECK_LIB(nsl, inet_addr)\n\t\t;;\nesac\n\n#\n# Work around Solaris's select() limitations.\n#\ncase \"$host\" in\n\t*-solaris2.[[89]]|*-solaris2.1?)\n\tAC_DEFINE(FD_SETSIZE, 65536,\n\t\t  [Solaris hack to get select_large_fdset.])\n\t;;\nesac\n\n#\n# Purify support\n#\nAC_MSG_CHECKING(whether to use purify)\nAC_ARG_WITH(purify,\n\t    AS_HELP_STRING([--with-purify[=PATH]],[use Rational purify]),\n\t    use_purify=\"$withval\", use_purify=\"no\")\n\ncase \"$use_purify\" in\n\tno)\n\t\t;;\n\tyes)\n\t\tAC_PATH_PROG(purify_path, purify, purify)\n\t\t;;\n\t*)\n\t\tpurify_path=\"$use_purify\"\n\t\t;;\nesac\n\ncase \"$use_purify\" in\n\tno)\n\t\tAC_MSG_RESULT(no)\n\t\tPURIFY=\"\"\n\t\t;;\n\t*)\n\t\tif test -f \"$purify_path\" || test purify = \"$purify_path\"; then\n\t\t\tAC_MSG_RESULT($purify_path)\n\t\t\tPURIFYFLAGS=\"`echo $PURIFYOPTIONS`\"\n\t\t\tPURIFY=\"$purify_path $PURIFYFLAGS\"\n\t\telse\n\t\t\tAC_MSG_ERROR([$purify_path not found.\n\nPlease choose the proper path with the following command:\n\n    configure --with-purify=PATH\n])\n\t\tfi\n\t\t;;\nesac\n\nAC_SUBST(PURIFY)\n\n#\n# Google/Great Performance Tools CPU Profiler\n#\nAC_MSG_CHECKING(whether to use gperftools profiler)\nAC_ARG_WITH(gperftools-profiler,\n\t    AS_HELP_STRING([--with-gperftools-profiler],\n\t\t\t   [use gperftools CPU profiler]),\n\t    use_profiler=\"$withval\", use_profiler=\"no\")\n\ncase $use_profiler in\n\tyes)\n\t\tAC_MSG_RESULT(yes)\n\t\tAC_DEFINE([HAVE_GPERFTOOLS_PROFILER], 1,\n\t\t[Define to use gperftools CPU profiler.])\n\t\tLIBS=\"$LIBS -lprofiler\"\n\t\t;;\n\t*)\n\t\tAC_MSG_RESULT(no)\n\t\t;;\nesac\n\n#\n# enable/disable dumping stack backtrace.  Also check if the system supports\n# glibc-compatible backtrace() function.\n#\nAC_ARG_ENABLE([backtrace],\n\t      [AS_HELP_STRING([--enable-backtrace],\n\t\t\t      [log stack backtrace on abort [default=yes]])],\n\t      [], [enable_backtrace=\"yes\"])\n\nAS_IF([test \"$enable_backtrace\" = \"yes\"],\n      [AC_DEFINE([USE_BACKTRACE], [1], [define if we can use backtrace])\n       AC_LINK_IFELSE(\n\t [AC_LANG_PROGRAM(\n\t    [[#include <execinfo.h>]],\n\t    [[return (backtrace((void **)0, 0));]]\n\t  )],\n\t [AC_DEFINE([HAVE_LIBCTRACE], [1], [define if system have backtrace function])]\n       )])\n\nAC_ARG_ENABLE(symtable,\n\t      AS_HELP_STRING([--enable-symtable],\n\t\t\t     [use internal symbol table for backtrace\n\t\t\t      [all|minimal(default)|none]]),\n\t\twant_symtable=\"$enableval\",  want_symtable=\"minimal\")\ncase $want_symtable in\nyes|all|minimal)     # \"yes\" is a hidden value equivalent to \"minimal\"\n\tif test \"\" = \"$PERL\"\n\tthen\n\t\tAC_MSG_ERROR([Internal symbol table requires perl but no perl is found.\nInstall perl or explicitly disable the feature by --disable-symtable.])\n\tfi\n\tif test \"yes\" = \"$use_libtool\"; then\n\t\tAC_MSG_WARN([Internal symbol table does not work with libtool.  Disabling symbol table.])\n\telse\n\t\t# we generate the internal symbol table only for those systems\n\t\t# known to work to avoid unexpected build failure.  Also, warn\n\t\t# about unsupported systems when the feature is enabled\n\t\t#  manually.\n\t\tcase $host_os in\n\t\tfreebsd*|netbsd*|openbsd*|linux*|solaris*|darwin*)\n\t\t\tMKSYMTBL_PROGRAM=\"$PERL\"\n\t\t\tif test \"all\" = \"$want_symtable\"; then\n\t\t\t\tALWAYS_MAKE_SYMTABLE=\"yes\"\n\t\t\tfi\n\t\t\t;;\n\t\t*)\n\t\t\tif test \"yes\" = \"$want_symtable\" -o \"all\" = \"$want_symtable\"\n\t\t\tthen\n\t\t\t\tAC_MSG_WARN([this system is not known to generate internal symbol table safely; disabling it])\n\t\t\tfi\n\t\tesac\n\tfi\n\t;;\n*)\n\t;;\nesac\nAC_SUBST(MKSYMTBL_PROGRAM)\nAC_SUBST(ALWAYS_MAKE_SYMTABLE)\n\n#\n# File name extension for static archive files, for those few places\n# where they are treated differently from dynamic ones.\n#\nSA=a\n\nAC_SUBST(O)\nAC_SUBST(A)\nAC_SUBST(SA)\nAC_SUBST(LIBTOOL_MKDEP_SED)\nAC_SUBST(LIBTOOL_MODE_COMPILE)\nAC_SUBST(LIBTOOL_MODE_INSTALL)\nAC_SUBST(LIBTOOL_MODE_LINK)\nAC_SUBST(LIBTOOL_MODE_UNINSTALL)\n\nBIND9_CO_RULE=\".c.$O:\"\nAC_SUBST(BIND9_CO_RULE)\n\n#\n# Here begins a very long section to determine the system's networking\n# capabilities.  The order of the tests is significant.\n#\n\n#\n# We do the IPv6 compilation checking after libtool so that we can put\n# the right suffix on the files.\n#\nAC_MSG_CHECKING([for IPv6 structures])\nAC_COMPILE_IFELSE(\n  [AC_LANG_PROGRAM(\n     [[\n       #include <sys/types.h>\n       #include <sys/socket.h>\n       #include <netinet/in.h>\n     ]],\n     [[\n       struct sockaddr_in6 sin6;\n       struct in6_addr in6;\n       struct in6_pktinfo in6_pi;\n       struct sockaddr_storage storage;\n       in6 = in6addr_any;\n       in6 = in6addr_loopback;\n       sin6.sin6_scope_id = 0;\n       return (0);\n     ]])],\n  [AC_MSG_RESULT([yes])],\n  [AC_MSG_FAILURE([IPv6 support is mandatory])])\n\n#\n# Allow forcibly disabling TCP Fast Open support as autodetection might yield\n# confusing results on some systems (e.g. FreeBSD; see set_tcp_fastopen()\n# comment in lib/isc/unix/socket.c).\n#\n\nAC_ARG_ENABLE([tcp_fastopen],\n\t      [AS_HELP_STRING([--disable-tcp-fastopen],\n\t\t\t      [disable TCP Fast Open support [default=yes]])],\n\t     [], [enable_tcp_fastopen=\"yes\"])\n\nAS_IF([test \"$enable_tcp_fastopen\" = \"yes\"],\n      [AC_DEFINE([ENABLE_TCP_FASTOPEN], [1], [define if you want TCP_FASTOPEN enabled if available])])\n\n#\n# Check for some other useful functions that are not ever-present.\n#\nAC_CHECK_FUNCS([strlcpy strlcat])\n\nAC_SUBST(READLINE_LIB)\nAC_ARG_WITH(readline,\n\t    AS_HELP_STRING([--with-readline[=LIBSPEC]],\n\t\t\t   [specify readline library [default auto]]),\n\t    use_readline=\"$withval\", use_readline=\"auto\")\ncase \"$use_readline\" in\nno)\t;;\n*)\n\tsaved_LIBS=\"$LIBS\"\n\tcase \"$use_readline\" in\n\tyes|auto) try_readline=\"-ledit\"; or_readline=\"-lreadline\" ;;\n\t*) try_readline=\"$use_readline\"\n\tesac\n\tfor readline in \"$try_readline\" $or_readline\n\tdo\n\t\tLIBS=\"$readline\"\n\t\tAC_MSG_NOTICE(checking for readline with $readline)\n\t\tAC_CHECK_FUNCS(readline)\n\t\tif test \"yes\" = \"$ac_cv_func_readline\"\n\t\tthen\n\t\t\tREADLINE_LIB=\"$readline\"\n\t\t\tbreak\n\t\tfi\n\t\tfor lib in -lterminfo -ltermcap -lncurses -lcurses\n\t\tdo\n\t\t\tAC_MSG_NOTICE(checking for readline with $readline $lib)\n\t\t\tunset ac_cv_func_readline\n\t\t\tLIBS=\"$readline $lib\"\n\t\t\tAC_CHECK_FUNCS(readline)\n\t\t\tif test \"yes\" = \"$ac_cv_func_readline\"\n\t\t\tthen\n\t\t\t\tREADLINE_LIB=\"$readline $lib\"\n\t\t\t\tbreak\n\t\t\tfi\n\t\tdone\n\t\tif test \"yes\" = \"$ac_cv_func_readline\"\n\t\tthen\n\t\t\tbreak\n\t\tfi\n\tdone\n\tif test \"auto\" != \"$use_readline\" &&\n\t   test \"X$READLINE_LIB\" = \"X\"\n\tthen\n\t\tAC_MSG_ERROR([The readline library was not found.])\n\tfi\n\tLIBS=\"$saved_LIBS\"\n\t;;\nesac\nif test \"yes\" = \"$ac_cv_func_readline\"\nthen\n\tcase \"$READLINE_LIB\" in\n\t*edit*)\n\t\tAC_CHECK_HEADERS(editline/readline.h)\n\t\tAC_CHECK_HEADERS(edit/readline/readline.h)\n\t\tAC_CHECK_HEADERS(edit/readline/history.h)\n\t\t;;\n\tesac\n\tAC_CHECK_HEADERS(readline/readline.h)\n\tAC_CHECK_HEADERS(readline/history.h)\nfi\n\n#\n# Use our own SPNEGO implementation?\n#\nAC_ARG_ENABLE(isc-spnego,\n\t      AS_HELP_STRING([--disable-isc-spnego],\n\t\t\t     [use SPNEGO from GSSAPI library]))\n\nif test -n \"$USE_GSSAPI\"\nthen\n\tcase \"$enable_isc_spnego\" in\n\t\tyes|'')\n\t\t\tUSE_ISC_SPNEGO='-DUSE_ISC_SPNEGO'\n\t\t\tDST_EXTRA_OBJS=\"$DST_EXTRA_OBJS spnego.$O\"\n\t\t\tDST_EXTRA_SRCS=\"$DST_EXTRA_SRCS spnego.c\"\n\t\t\tAC_MSG_RESULT(using SPNEGO from lib/dns)\n\t\t\t;;\n\t\tno)\n\t\t\tAC_MSG_RESULT(using SPNEGO from GSSAPI library)\n\t\t\t;;\n\tesac\nfi\n\nAC_SUBST(USE_ISC_SPNEGO)\n\nAC_SUBST(DST_EXTRA_OBJS)\nAC_SUBST(DST_EXTRA_SRCS)\n\n#\n# Security Stuff\n#\n# Note it is very recommended to *not* disable chroot(),\n# this is only because chroot() was made obsolete by Posix.\nAC_ARG_ENABLE(chroot, AS_HELP_STRING([--disable-chroot], [disable chroot]))\ncase \"$enable_chroot\" in\n\tyes|'')\n\t\tAC_CHECK_FUNCS(chroot)\n\t\t;;\n\tno)\n\t\t;;\nesac\n\nLIBCAP_LIBS=\"\"\nAC_MSG_CHECKING([whether to enable Linux capabilities])\nAC_ARG_ENABLE([linux-caps],\n\t      [AS_HELP_STRING([--disable-linux-caps],\n\t\t\t      [disable Linux capabilities])],\n\t      [],\n\t      [AS_CASE([$host],\n\t\t       [*-linux*],[enable_linux_caps=yes],\n\t\t       [enable_linux_caps=no])])\n\nAS_IF([test \"$enable_linux_caps\" = \"yes\"],\n      [AC_MSG_RESULT([yes])\n       AC_CHECK_HEADERS([sys/capability.h],\n\t\t\t[],\n\t\t\t[AC_MSG_ERROR(m4_normalize([sys/capability.h header is required for Linux capabilities support.\n\t\t\t\t\t\t    Either install libcap or use --disable-linux-caps.]))])\n       save_LIBS=\"$LIBS\"\n       AC_SEARCH_LIBS([cap_set_proc], [cap],\n\t\t      [LIBCAP_LIBS=\"$ac_cv_search_cap_set_proc\"],\n\t\t      [AC_MSG_ERROR(m4_normalize([libcap is required for Linux capabilities support.\n\t\t\t\t\t\t  Either install libcap or use --disable-linux-caps.]))])\n       LIBS=\"$save_LIBS\"],\n      [AC_MSG_RESULT([no])])\nAC_SUBST([LIBCAP_LIBS])\n\nAC_CHECK_HEADERS(sys/un.h,\nISC_PLATFORM_HAVESYSUNH=\"#define ISC_PLATFORM_HAVESYSUNH 1\"\n,\nISC_PLATFORM_HAVESYSUNH=\"#undef ISC_PLATFORM_HAVESYSUNH\"\n)\nAC_SUBST(ISC_PLATFORM_HAVESYSUNH)\n\ncase \"$host\" in\n*-solaris*)\n\tAC_DEFINE(NEED_SECURE_DIRECTORY, 1,\n\t\t  [Define if connect does not honour the permission on the UNIX domain socket.])\n\t;;\nesac\n\n#\n# Time Zone Stuff\n#\nAC_CHECK_FUNCS([tzset])\n\nAC_MSG_CHECKING(for optarg declaration)\nAC_TRY_COMPILE([\n#include <unistd.h>\n],\n[optarg = 0;],\n[AC_MSG_RESULT(yes)],\n[AC_MSG_RESULT(no)\nGEN_NEED_OPTARG=\"-DNEED_OPTARG=1\"\nAC_DEFINE(NEED_OPTARG, 1, [Defined if extern char *optarg is not declared.])])\n\n#\n# Check for nanoseconds in file stats\n#\nAC_MSG_CHECKING([for st_mtim.tv_nsec])\nAC_COMPILE_IFELSE(\n  [AC_LANG_PROGRAM(\n     [[#include <sys/fcntl.h>]],\n     [[struct stat s;\n       return(s.st_mtim.tv_nsec);\n      ]])],\n   [AC_DEFINE([HAVE_STAT_NSEC], [1], [define if struct stat has st_mtim.tv_nsec field])])\n\n#\n# Check for if_nametoindex() for IPv6 scoped addresses support\n#\nAC_CHECK_FUNCS([if_nametoindex])\n\nAC_CHECK_FUNCS(nanosleep usleep explicit_bzero)\n\nISC_ATOMIC_LIBS=\"\"\nAC_CHECK_HEADERS(\n  [stdatomic.h],\n  [AC_MSG_CHECKING([for memory model aware atomic operations])\n   AC_COMPILE_IFELSE(\n     [AC_LANG_PROGRAM(\n\t[[#include <stdatomic.h>]],\n\t[[atomic_int_fast32_t val = 0; atomic_fetch_add_explicit(&val, 1, memory_order_relaxed);]]\n      )],\n     [AC_MSG_RESULT([stdatomic.h])\n      AC_MSG_CHECKING([whether -latomic is needed for 64-bit stdatomic.h functions])\n      AC_LINK_IFELSE(\n\t[AC_LANG_PROGRAM(\n\t   [[#include <stdatomic.h>]],\n\t   [[atomic_int_fast64_t val = 0; atomic_fetch_add_explicit(&val, 1, memory_order_relaxed);]]\n\t )],\n\t[AC_MSG_RESULT([no])],\n\t[ISC_ATOMIC_LIBS=\"-latomic\"\n\t save_LIBS=\"$LIBS\"\n\t LIBS=\"$LIBS $ISC_ATOMIC_LIBS\"\n\t AC_LINK_IFELSE(\n\t   [AC_LANG_PROGRAM(\n\t      [[#include <stdatomic.h>]],\n\t      [[atomic_int_fast64_t val = 0; atomic_fetch_add_explicit(&val, 1, memory_order_relaxed);]]\n\t    )],\n\t   [AC_MSG_RESULT([yes])],\n\t   [AC_MSG_FAILURE([libatomic needed, but linking with -latomic failed, please fix your toolchain.])])\n\t LIBS=\"$save_LIBS\"\n\t])\n     ],\n     [AC_MSG_FAILURE([stdatomic.h header found, but compilation failed, please fix your toolchain.])]\n   )],\n  [AC_MSG_CHECKING([for memory model aware atomic operations])\n   AC_COMPILE_IFELSE(\n     [AC_LANG_PROGRAM(\n\t[[#include <inttypes.h>]],\n\t[[int32_t val = 0; __atomic_fetch_add(&val, 1, __ATOMIC_RELAXED);]]\n      )],\n     [AC_MSG_RESULT([__atomic builtins])\n      AC_DEFINE([HAVE___ATOMIC], [1], [define if __atomic builtins are not available])\n      AC_MSG_CHECKING([whether -latomic is needed for 64-bit __atomic builtins])\n      AC_LINK_IFELSE(\n\t[AC_LANG_PROGRAM(\n\t   [[#include <inttypes.h>]],\n\t   [[int64_t val = 0; __atomic_fetch_add(&val, 1, __ATOMIC_RELAXED);]]\n\t )],\n\t[AC_MSG_RESULT([no])],\n\t[ISC_ATOMIC_LIBS=\"-latomic\"\n\t save_LIBS=\"$LIBS\"\n\t LIBS=\"$LIBS $ISC_ATOMIC_LIBS\"\n\t AC_LINK_IFELSE(\n\t   [AC_LANG_PROGRAM(\n\t      [[#include <inttypes.h>]],\n\t      [[int64_t val = 0; __atomic_fetch_add(&val, 1, __ATOMIC_RELAXED);]]\n\t    )],\n\t   [AC_MSG_RESULT([yes])],\n\t   [AC_MSG_FAILURE([libatomic needed, but linking with -latomic failed, please fix your toolchain.])])\n\t LIBS=\"$save_LIBS\"\n\t])\n     ],\n     [AC_MSG_RESULT([__sync builtins])\n     ])\n  ])\nLIBS=\"$LIBS $ISC_ATOMIC_LIBS\"\n\nAC_CHECK_HEADERS([uchar.h])\n\n#\n# Check for __builtin_unreachable\n#\nAC_MSG_CHECKING([compiler support for __builtin_unreachable()])\nAC_LINK_IFELSE(\n  [AC_LANG_PROGRAM(\n     [[]],\n     [[__builtin_unreachable();]]\n   )],\n  [AC_MSG_RESULT([yes])\n   AC_DEFINE([HAVE_BUILTIN_UNREACHABLE], [1], [define if the compiler supports __builtin_unreachable().])\n  ],\n  [AC_MSG_RESULT([no])\n  ])\n\n#\n# Check for __builtin_expect\n#\nAC_MSG_CHECKING([compiler support for __builtin_expect])\nAC_TRY_LINK(, [\n\treturn (__builtin_expect(1, 1) ? 1 : 0);\n], [\n\thave_builtin_expect=yes\n\tAC_MSG_RESULT(yes)\n], [\n\thave_builtin_expect=no\n\tAC_MSG_RESULT(no)\n])\nif test \"yes\" = \"$have_builtin_expect\"; then\n\tAC_DEFINE(HAVE_BUILTIN_EXPECT, 1, [Define to 1 if the compiler supports __builtin_expect.])\nfi\n\n#\n# Check for __builtin_clz\n#\nAC_MSG_CHECKING([compiler support for __builtin_clz])\nAC_TRY_LINK(, [\n\treturn (__builtin_clz(0xff) == 24 ? 1 : 0);\n], [\n\thave_builtin_clz=yes\n\tAC_MSG_RESULT(yes)\n], [\n\thave_builtin_clz=no\n\tAC_MSG_RESULT(no)\n])\nif test \"yes\" = \"$have_builtin_clz\"; then\n\tAC_DEFINE(HAVE_BUILTIN_CLZ, 1, [Define to 1 if the compiler supports __builtin_clz.])\nfi\n\n#\n# Activate \"rrset-order fixed\" or not?\n#\nAC_ARG_ENABLE(fixed-rrset,\n\t      AS_HELP_STRING([--enable-fixed-rrset],\n\t\t\t     [enable fixed rrset ordering [default=no]]),\n\t      enable_fixed=\"$enableval\", enable_fixed=\"no\")\ncase \"$enable_fixed\" in\n\tyes)\n\t\tAC_DEFINE(DNS_RDATASET_FIXED, 1,\n\t\t\t  [Define to enable \"rrset-order fixed\" syntax.])\n\t\t;;\n\tno)\n\t\t;;\n\t*)\n\t\t;;\nesac\n\n#\n# Activate dnstap?\n#\nAC_ARG_ENABLE(dnstap,\n\t      AS_HELP_STRING([--enable-dnstap],\n\t\t\t     [enable dnstap support\n\t\t\t\t(requires fstrm, protobuf-c)]),\n\t      use_dnstap=$enableval, use_dnstap=no)\n\nDNSTAP=\nDNSTAPSRCS=\nDNSTAPOBJS=\nDNSTAPTARGETS=\nif test \"x$use_dnstap\" != \"xno\"; then\n\tAC_ARG_WITH([protobuf-c],\n\t\t    AS_HELP_STRING([--with-protobuf-c=path],\n\t\t\t\t   [Path where protobuf-c is installed, for dnstap]), [\n\t    # workaround for protobuf-c includes at old dir\n\t    # before protobuf-c-1.0.0\n\t    if test -f $withval/include/google/protobuf-c/protobuf-c.h\n\t    then\n\t\tCFLAGS=\"$CFLAGS -I$withval/include/google\"\n\t    else\n\t\tCFLAGS=\"$CFLAGS -I$withval/include\"\n\t    fi\n\t    LDFLAGS=\"$LDFLAGS -L$withval/lib\"\n\t    AC_PATH_PROG([PROTOC_C], [protoc-c], [],\n\t\t\t [$PATH$PATH_SEPARATOR$withval/bin])\n\t], [\n\t    # workaround for protobuf-c includes at old dir\n\t    # before protobuf-c-1.0.0\n\t    if test -f /usr/include/google/protobuf-c/protobuf-c.h\n\t    then\n\t\tCFLAGS=\"$CFLAGS -I/usr/include/google\"\n\t    else\n\t\tif test -f /usr/local/include/google/protobuf-c/protobuf-c.h\n\t\tthen\n\t\t    CFLAGS=\"$CFLAGS -I/usr/local/include/google\"\n\t\t    LDFLAGS=\"$LDFLAGS -L/usr/local/lib\"\n\t\tfi\n\t    fi\n\t    AC_PATH_PROG([PROTOC_C],[protoc-c])\n\t])\n\tif test -z \"$PROTOC_C\"; then\n\t\tAC_MSG_ERROR([The protoc-c program was not found.])\n\tfi\n\tAC_ARG_WITH([libfstrm], AS_HELP_STRING([--with-libfstrm=path],\n\t\t    [Path where libfstrm is installed, for dnstap]), [\n\t    CFLAGS=\"$CFLAGS -I$withval/include\"\n\t    LDFLAGS=\"$LDFLAGS -L$withval/lib\"\n\t    AC_PATH_PROG([FSTRM_CAPTURE], [fstrm_capture], [], [$PATH$PATH_SEPARATOR$withval/bin])\n\t],[\n\t    AC_PATH_PROG([FSTRM_CAPTURE], [fstrm_capture])\n\t])\n\n\tAC_SEARCH_LIBS([fstrm_iothr_init], [fstrm], [],\n\t\t       AC_MSG_ERROR([The fstrm library was not found. Please install fstrm!]))\n\tAC_SEARCH_LIBS([protobuf_c_message_pack], [protobuf-c], [],\n\t\t       AC_MSG_ERROR([The protobuf-c library was not found. Please install protobuf-c!]))\n\n\tAC_DEFINE(HAVE_DNSTAP, 1, [Define to 1 to enable dnstap support])\n\tDNSTAP=dnstap\n\tDNSTAPSRCS='${DNSTAPSRCS}'\n\tDNSTAPOBJS='${DNSTAPOBJS}'\n\tDNSTAPTARGETS='${DNSTAPTARGETS}'\nfi\nAC_SUBST(DNSTAP)\nAC_SUBST(DNSTAPSRCS)\nAC_SUBST(DNSTAPOBJS)\nAC_SUBST(DNSTAPTARGETS)\n\n#\n#  The following sets up how non-blocking i/o is established.\n#  cygwin and solaris 2.x (x<5) require special handling.\n#\ncase \"$host\" in\n*-cygwin*) AC_DEFINE(PORT_NONBLOCK, O_NDELAY);;\n*-solaris2.[[01234]])\n\tAC_DEFINE(PORT_NONBLOCK, O_NONBLOCK)\n\tAC_DEFINE(USE_FIONBIO_IOCTL, 1,\n\t\t  [Defined if you need to use ioctl(FIONBIO) instead a fcntl call to make non-blocking.])\n\t;;\n*) AC_DEFINE(PORT_NONBLOCK, O_NONBLOCK,\n\t     [Sets which flag to pass to open/fcntl to make non-blocking (O_NDELAY/O_NONBLOCK).])\n\t;;\nesac\n#\n# Solaris 2.5.1 and earlier cannot bind() then connect() a TCP socket.\n# This prevents the source address being set.\n#\ncase \"$host\" in\n*-solaris2.[[012345]]|*-solaris2.5.1)\n\tAC_DEFINE(BROKEN_TCP_BIND_BEFORE_CONNECT, 1,\n\t\t  [Define if you cannot bind() before connect() for TCP sockets.])\n\t;;\nesac\n#\n# The following sections deal with tools used for formatting\n# the documentation.  They are all optional, unless you are\n# a developer editing the documentation source.\n#\n\n#\n# Look for TeX.\n#\n\nAC_PATH_PROGS(LATEX, latex, latex)\nAC_SUBST(LATEX)\n\nAC_PATH_PROGS(PDFLATEX, pdflatex, pdflatex)\nAC_SUBST(PDFLATEX)\n\nAC_PATH_PROGS(DBLATEX, dblatex, dblatex)\nAC_SUBST(DBLATEX)\n\n#\n# Look for w3m\n#\n\nAC_PATH_PROGS(W3M, w3m, w3m)\nAC_SUBST(W3M)\n\n#\n# Look for pandoc\n#\nAC_PATH_PROG(PANDOC, pandoc, pandoc)\nAC_SUBST(PANDOC)\n\n\n#\n# Look for xsltproc (libxslt)\n#\n\nAC_PATH_PROG(XSLTPROC, xsltproc, xsltproc)\nAC_SUBST(XSLTPROC)\n\n#\n# Look for xmllint (libxml2)\n#\n\nAC_PATH_PROG(XMLLINT, xmllint, xmllint)\nAC_SUBST(XMLLINT)\n\n#\n# Look for Doxygen\n#\n\nAC_PATH_PROG(DOXYGEN, doxygen, doxygen)\nAC_SUBST(DOXYGEN)\n\n#\n# Look for curl\n#\n\nAC_PATH_PROG(CURL, curl, curl)\nAC_SUBST(CURL)\n\n#\n# Subroutine for searching for an ordinary file (e.g., a stylesheet)\n# in a number of directories:\n#\n#   NOM_PATH_FILE(VARIABLE, FILENAME, DIRECTORIES)\n#\n# If the file FILENAME is found in one of the DIRECTORIES, the shell\n# variable VARIABLE is defined to its absolute pathname.  Otherwise,\n# it is set to FILENAME, with no directory prefix (that's not terribly\n# useful, but looks less confusing in substitutions than leaving it\n# empty).  The variable VARIABLE will be substituted into output files.\n#\n\nAC_DEFUN([NOM_PATH_FILE], [\n$1=\"\"\nAC_MSG_CHECKING(for $2)\nfor d in $3\ndo\n\tf=$d/$2\n\tif test -f $f\n\tthen\n\t\t$1=$f\n\t\tAC_MSG_RESULT($f)\n\t\tbreak\n\tfi\ndone\nif test \"X[$]$1\" = \"X\"\nthen\n\tAC_MSG_RESULT(\"not found\");\n\t$1=$2\nfi\nAC_SUBST($1)\n])\n\n#\n# Look for Docbook-XSL stylesheets.  Location probably varies by system.\n# If it's not explicitly specified, guess where it might be found, based on\n# where SGML stuff lives on some systems (FreeBSD is the only one we're sure\n# of at the moment).\n#\nAC_MSG_CHECKING(for Docbook-XSL path)\nAC_ARG_WITH(docbook-xsl,\n\t    AS_HELP_STRING([--with-docbook-xsl[=PATH]],\n\t\t\t   [specify path for Docbook-XSL stylesheets]),\n   docbook_path=\"$withval\", docbook_path=\"auto\")\ncase \"$docbook_path\" in\nauto)\n\tAC_MSG_RESULT(auto)\n\tdocbook_xsl_trees=\"/usr/pkg/share/xsl/docbook /usr/local/share/xsl/docbook-ns /usr/local/share/xsl/docbook /usr/share/xsl/docbook /opt/local/share/xsl/docbook-xsl /opt/local/share/xsl/docbook-xsl-nons /usr/share/xml/docbook/stylesheet/docbook-xsl\"\n\t;;\n*)\n\tdocbook_xsl_trees=\"$withval\"\n\tAC_MSG_RESULT($docbook_xsl_trees)\n\t;;\nesac\n\n#\n# Look for stylesheets we need.\n#\n\nNOM_PATH_FILE(XSLT_DOCBOOK_STYLE_HTML, html/docbook.xsl, $docbook_xsl_trees)\nNOM_PATH_FILE(XSLT_DOCBOOK_STYLE_XHTML, xhtml/docbook.xsl, $docbook_xsl_trees)\nNOM_PATH_FILE(XSLT_DOCBOOK_STYLE_MAN, manpages/docbook.xsl, $docbook_xsl_trees)\nNOM_PATH_FILE(XSLT_DOCBOOK_CHUNK_HTML, html/chunk.xsl, $docbook_xsl_trees)\nNOM_PATH_FILE(XSLT_DOCBOOK_CHUNK_XHTML, xhtml/chunk.xsl, $docbook_xsl_trees)\nNOM_PATH_FILE(XSLT_DOCBOOK_CHUNKTOC_HTML, html/chunktoc.xsl, $docbook_xsl_trees)\nNOM_PATH_FILE(XSLT_DOCBOOK_CHUNKTOC_XHTML, xhtml/chunktoc.xsl, $docbook_xsl_trees)\nNOM_PATH_FILE(XSLT_DOCBOOK_MAKETOC_HTML, html/maketoc.xsl, $docbook_xsl_trees)\nNOM_PATH_FILE(XSLT_DOCBOOK_MAKETOC_XHTML, xhtml/maketoc.xsl, $docbook_xsl_trees)\n\n#\n# Same dance for dblatex\n#\ndblatex_xsl_trees=\"/usr/local/share/xml/docbook/stylesheet/dblatex /usr/pkg/share/xml/docbook/stylesheet/dblatex /usr/share/xml/docbook/stylesheet/dblatex\"\nNOM_PATH_FILE(XSLT_DBLATEX_STYLE, xsl/docbook.xsl, $dblatex_xsl_trees)\nNOM_PATH_FILE(XSLT_DBLATEX_FASTBOOK, xsl/latex_book_fast.xsl, $dblatex_xsl_trees)\n\n#\n# IDN support using libidn2\n#\n\nLIBIDN2_CFLAGS=\nLIBIDN2_LDFLAGS=\nLIBIDN2_LIBS=\nAC_ARG_WITH([libidn2],\n\t    [AS_HELP_STRING([--with-libidn2[=PATH]], [enable IDN support using GNU libidn2 [yes|no(default)|path]])],\n\t    [with_libidn2=\"$withval\"], [with_libidn2=\"no\"])\nAS_CASE([$with_libidn2],\n\t[yes],\t[PKG_CHECK_MODULES([LIBIDN2], [libidn2],\n\t\t\t\t   [AC_DEFINE([HAVE_LIBIDN2], [1], [Define if libidn2 was found])])],\n\t[no],\t[],\n\t[*],\t[save_CFLAGS=\"$CFLAGS\"\n\t\t save_CPPFLAGS=\"$CPPFLAGS\"\n\t\t save_LDFLAGS=\"$LDFLAGS\"\n\t\t save_LIBS=\"$LIBS\"\n\t\t LIBIDN2_CFLAGS=\"-I$with_libidn2/include\"\n\t\t LIBIDN2_LDFLAGS=\"-L$with_libidn2/lib\"\n\t\t CFLAGS=\"$LIBIDN2_CFLAGS $CFLAGS\"\n\t\t CPPFLAGS=\"$LIBIDN2_CFLAGS $CPPFLAGS\"\n\t\t LDFLAGS=\"$LIBIDN2_LDFLAGS $LDFLAGS\"\n\t\t AC_CHECK_HEADERS([idn2.h],\n\t\t\t\t  [],\n\t\t\t\t  [AC_MSG_ERROR([idn2.h not found])])\n\t\t AC_SEARCH_LIBS([idn2_to_ascii_lz], [idn2],\n\t\t\t\t[LIBIDN2_LIBS=\"$ac_cv_search_idn2_to_ascii_lz\"\n\t\t\t\t AC_DEFINE([HAVE_LIBIDN2], [1], [Define if libidn2 was found])],\n\t\t\t\t[AC_MSG_ERROR([libidn2 requested, but not found])])\n\t\t CFLAGS=\"$save_CFLAGS\"\n\t\t CPPFLAGS=\"$save_CPPFLAGS\"\n\t\t LDFLAGS=\"$save_LDFLAGS\"\n\t\t LIBS=\"$save_LIBS\"])\nAC_SUBST([LIBIDN2_CFLAGS])\nAC_SUBST([LIBIDN2_LDFLAGS])\nAC_SUBST([LIBIDN2_LIBS])\n\n#\n# Check whether to build with cmocka unit testing framework\n#\n\nAC_ARG_WITH([cmocka],\n\t    [AS_HELP_STRING([--with-cmocka=detect],[enable CMocka based tests (default is detect)])],\n\t    [],[with_cmocka=detect])\n\nAS_CASE([$with_cmocka],\n\t[no],[],\n\t[detect],[PKG_CHECK_MODULES([CMOCKA], [cmocka >= 1.0.0],\n\t\t\t\t    [AC_DEFINE([HAVE_CMOCKA], [1], [Use CMocka])\n\t\t\t\t     UNITTESTS=tests],[with_cmocka=no])],\n\t[yes],[PKG_CHECK_MODULES([CMOCKA], [cmocka >= 1.0.0],\n\t\t\t\t [AC_DEFINE([HAVE_CMOCKA], [1], [Use CMocka])])\n\t                          UNITTESTS=tests],\n\t[AC_MSG_ERROR([Use PKG_CONFIG_PATH to specify path to CMocka library])]\n       )\nAC_SUBST([CMOCKA_CFLAGS])\nAC_SUBST([CMOCKA_LIBS])\nAC_SUBST(UNITTESTS)\n\n#\n# Check for kyua execution engine if CMocka was requested\n# and bail out if execution engine was not found\n#\nAC_ARG_VAR([KYUA], [path to kyua execution engine])\nAS_IF([test \"$with_cmocka\" != \"no\"],\n      [AC_PATH_PROGS([KYUA], [kyua], [])\n       AS_IF([test -z \"$KYUA\"],\n            [AC_MSG_WARN([kyua test execution engine not found])])])\n\nAC_SUBST([KYUA])\n\n#\n# Check for i18n\n#\nAC_CHECK_HEADERS(locale.h)\nAC_CHECK_FUNCS(setlocale)\n\n#\n# was --with-tuning specified?\n#\nAC_ARG_WITH(tuning,\n\t    AS_HELP_STRING([--with-tuning=ARG],\n\t\t\t   [Specify server tuning (large or default)]),\n\t    use_tuning=\"$withval\", use_tuning=\"no\")\n\ncase \"$use_tuning\" in\n\tlarge)\n\t\tAC_DEFINE(TUNE_LARGE, 1, [Define to use large-system tuning.])\n\t\tAC_MSG_RESULT(using large-system tuning)\n\t\t;;\n\tno|default)\n\t\tAC_MSG_RESULT(using default tuning)\n\t\t;;\n\tyes|*)\n\t\tAC_MSG_ERROR([You must specify \"large\" or \"default\" for --with-tuning.])\n\t\t;;\nesac\n\n#\n# was --enable-querytrace specified?\n#\nAC_ARG_ENABLE(querytrace,\n\t      AS_HELP_STRING([--enable-querytrace],\n\t\t\t     [enable very verbose query trace logging\n\t\t\t\t[default=no]]),\n\t      want_querytrace=\"$enableval\", want_querytrace=\"no\")\n\nAC_MSG_CHECKING([whether to enable query trace logging])\ncase \"$want_querytrace\" in\nyes)\n\tAC_MSG_RESULT(yes)\n\tAC_DEFINE(WANT_QUERYTRACE, 1, [Define to enable very verbose query trace logging.])\n\t;;\nno)\n\tAC_MSG_RESULT(no)\n\t;;\n*)\n\tAC_MSG_ERROR(\"--enable-querytrace requires yes or no\")\n\t;;\nesac\n\n#\n# Was --disable-auto-validation specified?\n#\nvalidation_default=auto\nAC_ARG_ENABLE(auto-validation,\n\t      AS_HELP_STRING([--enable-auto-validation],\n\t\t\t     [turn on DNSSEC validation by default, using the IANA root key [default=yes]]),\n\t      [:],[enable_auto_validation=yes])\nAS_IF([test \"$enable_auto_validation\" = \"no\"],[validation_default=yes])\nAC_DEFINE_UNQUOTED([VALIDATION_DEFAULT], [\"$validation_default\"], [the default value of dnssec-validation option])\n\n#\n# Substitutions\n#\nAC_SUBST(BIND9_TOP_BUILDDIR)\nBIND9_TOP_BUILDDIR=`pwd`\n\nAC_SUBST(BIND9_ISC_BUILDINCLUDE)\nAC_SUBST(BIND9_ISCCC_BUILDINCLUDE)\nAC_SUBST(BIND9_ISCCFG_BUILDINCLUDE)\nAC_SUBST(BIND9_DNS_BUILDINCLUDE)\nAC_SUBST(BIND9_NS_BUILDINCLUDE)\nAC_SUBST(BIND9_BIND9_BUILDINCLUDE)\nAC_SUBST(BIND9_IRS_BUILDINCLUDE)\nif test \"X$srcdir\" != \"X\"; then\n\tBIND9_ISC_BUILDINCLUDE=\"-I${BIND9_TOP_BUILDDIR}/lib/isc/include\"\n\tBIND9_ISCCC_BUILDINCLUDE=\"-I${BIND9_TOP_BUILDDIR}/lib/isccc/include\"\n\tBIND9_ISCCFG_BUILDINCLUDE=\"-I${BIND9_TOP_BUILDDIR}/lib/isccfg/include\"\n\tBIND9_DNS_BUILDINCLUDE=\"-I${BIND9_TOP_BUILDDIR}/lib/dns/include\"\n\tBIND9_NS_BUILDINCLUDE=\"-I${BIND9_TOP_BUILDDIR}/lib/ns/include\"\n\tBIND9_BIND9_BUILDINCLUDE=\"-I${BIND9_TOP_BUILDDIR}/lib/bind9/include\"\n\tBIND9_IRS_BUILDINCLUDE=\"-I${BIND9_TOP_BUILDDIR}/lib/irs/include\"\nelse\n\tBIND9_ISC_BUILDINCLUDE=\"\"\n\tBIND9_ISCCC_BUILDINCLUDE=\"\"\n\tBIND9_ISCCFG_BUILDINCLUDE=\"\"\n\tBIND9_DNS_BUILDINCLUDE=\"\"\n\tBIND9_NS_BUILDINCLUDE=\"\"\n\tBIND9_BIND9_BUILDINCLUDE=\"\"\n\tBIND9_IRS_BUILDINCLUDE=\"\"\nfi\n\nAC_SUBST_FILE(BIND9_MAKE_INCLUDES)\nBIND9_MAKE_INCLUDES=$BIND9_TOP_BUILDDIR/make/includes\n\nAC_SUBST_FILE(BIND9_MAKE_RULES)\nBIND9_MAKE_RULES=$BIND9_TOP_BUILDDIR/make/rules\n\n. \"$srcdir/version\"\nBIND9_PRODUCT=\"PRODUCT=\\\"${PRODUCT}\\\"\"\nAC_SUBST(BIND9_PRODUCT)\nBIND9_DESCRIPTION=\"DESCRIPTION=\\\"${DESCRIPTION}\\\"\"\nAC_SUBST(BIND9_DESCRIPTION)\nBIND9_VERSION=\"${MAJORVER}.${MINORVER}${PATCHVER:+.}${PATCHVER}${RELEASETYPE}${RELEASEVER}${EXTENSIONS}\"\nAC_SUBST(BIND9_VERSION)\nBIND9_MAJOR=\"MAJOR=${MAJORVER}.${MINORVER}\"\nAC_SUBST(BIND9_MAJOR)\nBIND9_VERSIONSTRING=\"${PRODUCT} ${MAJORVER}.${MINORVER}${PATCHVER:+.}${PATCHVER}${RELEASETYPE}${RELEASEVER}${EXTENSIONS}${DESCRIPTION:+ }${DESCRIPTION}\"\nAC_SUBST(BIND9_VERSIONSTRING)\nBIND9_VERSIONSHORT=\"${PRODUCT} ${MAJORVER}.${MINORVER}${PATCHVER:+.}${PATCHVER}${RELEASETYPE}${RELEASEVER}${EXTENSIONS}\"\nAC_SUBST(BIND9_VERSIONSHORT)\n\nBIND9_SRCID=\"SRCID=unset_id\"\nif test -f \"${srcdir}/srcid\"; then\n\t. \"${srcdir}/srcid\"\n\tBIND9_SRCID=\"SRCID=$SRCID\"\nelif test -d \"${srcdir}/.git\"; then\n\tBIND9_SRCID=\"SRCID=\"`(cd \"${srcdir}\";git rev-parse --short HEAD)`\nfi\n\nAC_SUBST(BIND9_SRCID)\n\nif test -z \"$ac_configure_args\"; then\n\tBIND9_CONFIGARGS=\"defaults\"\nelse\n\tfor a in $ac_configure_args\n\tdo\n\t\tBIND9_CONFIGARGS=\"$BIND9_CONFIGARGS $a\"\n\tdone\nfi\nBIND9_CONFIGARGS=\"`echo $BIND9_CONFIGARGS | sed 's/^ //'`\"\nBIND9_CONFIGARGS=\"CONFIGARGS=${BIND9_CONFIGARGS}\"\nAC_SUBST(BIND9_CONFIGARGS)\n\nAC_SUBST_FILE(LIBISC_API)\nLIBISC_API=\"$srcdir/lib/isc/api\"\n\nAC_SUBST_FILE(LIBISCCC_API)\nLIBISCCC_API=\"$srcdir/lib/isccc/api\"\n\nAC_SUBST_FILE(LIBISCCFG_API)\nLIBISCCFG_API=\"$srcdir/lib/isccfg/api\"\n\nAC_SUBST_FILE(LIBDNS_API)\nLIBDNS_API=\"$srcdir/lib/dns/api\"\n\nAC_SUBST_FILE(LIBDNS_MAPAPI)\nLIBDNS_MAPAPI=\"$srcdir/lib/dns/mapapi\"\n\nAC_SUBST_FILE(LIBBIND9_API)\nLIBBIND9_API=\"$srcdir/lib/bind9/api\"\n\nAC_SUBST_FILE(LIBIRS_API)\nLIBIRS_API=\"$srcdir/lib/irs/api\"\n\nAC_SUBST_FILE(LIBNS_API)\nLIBNS_API=\"$srcdir/lib/ns/api\"\n\n#\n# Configure any DLZ drivers.\n#\n# If config.dlz.in selects one or more DLZ drivers, it will set\n# CONTRIB_DLZ to a non-empty value, which will be our clue to\n# build DLZ drivers in contrib.\n#\n# This section has to come after the libtool stuff because it needs to\n# know how to name the driver object files.\n#\n\nCONTRIB_DLZ=\"\"\nDLZ_DRIVER_INCLUDES=\"\"\nDLZ_DRIVER_LIBS=\"\"\nDLZ_DRIVER_SRCS=\"\"\nDLZ_DRIVER_OBJS=\"\"\nDLZ_SYSTEM_TEST=\"\"\nDLZ_DRIVER_MYSQL_INCLUDES=\"\"\nDLZ_DRIVER_MYSQL_LIBS=\"\"\n\n#\n# Configure support for building a shared library object\n#\n# Even when libtool is available it can't always be relied upon\n# to build an object that can be dlopen()'ed, but this is necessary\n# for building the dlzexternal system test, so we'll try it the\n# old-fashioned way.\n#\nSO=\"so\"\nSO_CFLAGS=\"\"\nSO_LDFLAGS=\"\"\nSO_LD=\"\"\nSO_TARGETS=\"\"\nSO_STRIP=\"cat\"\n\nAC_ARG_WITH([dlopen],\n\t    AS_HELP_STRING([--with-dlopen=ARG],\n\t\t\t   [support dynamically loadable DLZ and DYNDB drivers]),\n\t    [], [with_dlopen=\"auto\"])\n\n\n#\n# If PIC is disabled, dlopen must also be\n#\nAS_IF([test \"$pic_mode\" = \"no\"],\n      [AS_CASE([$with_dlopen],\n\t       [auto],[with_dlopen=\"no\"],\n\t       [yes],[AC_MSG_ERROR([--with-dlopen requires PIC])])])\n\nAS_CASE([$with_dlopen],\n\t[auto|yes],[\n\t  AC_SEARCH_LIBS([dlopen],[dl])\n\t  AC_CHECK_FUNCS([dlopen dlclose dlsym],\n\t\t\t [with_dlopen=\"yes\"],\n\t\t\t [with_dlopen=\"no\"])\n\t])\n\nAS_IF([test \"$with_dlopen\" = \"yes\"],\n      [AS_CASE([$host],\n\t       [*-linux*|*-gnu*],[\n\t\t LDFLAGS=\"${LDFLAGS} -Wl,--export-dynamic\"\n\t\t SO_CFLAGS=\"-fPIC\"\n\t\t SO_LDFLAGS=\"\"\n\t\t AS_IF([test \"$use_libtool\" = \"yes\"],[\n\t\t\t SO_LDFLAGS=\"-Xcompiler -shared\"\n\t\t\t SO_LD=\"${CC}\"\n\t\t       ],[\n\t\t\t SO_LDFLAGS=\"-shared\"\n\t\t\t SO_LD=\"${CC}\"\n\t\t       ])\n\t       ],\n\t       [*-freebsd*|*-openbsd*|*-netbsd*],[\n\t\t LDFLAGS=\"${LDFLAGS} -Wl,-E\"\n\t\t SO_CFLAGS=\"-fpic\"\n\t\t AS_IF([test \"$use_libtool\" = \"yes\"],[\n\t\t\t SO_LDFLAGS=\"-Xcompiler -shared\"\n\t\t\t SO_LD=\"${CC}\"\n\t\t       ],[\n\t\t\t SO_LDFLAGS=\"-shared\"\n\t\t\t SO_LD=\"${CC}\"\n\t\t       ])\n\t       ],\n\t       [*-darwin*],[\n\t\t SO_CFLAGS=\"-fPIC\"\n                 SO_LD=\"${CC}\"\n\t\t AS_IF([test \"$use_libtool\" = \"yes\"],[\n\t\t\t SO_LDFLAGS=\"-Xcompiler -dynamiclib -undefined dynamic_lookup\"\n\t\t       ],[\n\t\t\t SO_LDFLAGS=\"-dynamiclib -undefined dynamic_lookup\"\n\t\t       ])\n\t       ],\n\t       [*-solaris*],[\n\t\t SO_CFLAGS=\"-KPIC\"\n\t\t SO_LDFLAGS=\"-G -z text\"\n\t\t SO_LD=\"ld\"\n\t       ],\n\t       [ia64-hp-hpux*],[\n\t\t SO_CFLAGS=\"+z\"\n\t         SO_LDFLAGS=\"-b\"\n\t\t SO_LD=\"${CC}\"\n\t       ],\n\t       [\n\t\t SO_CFLAGS=\"-fPIC\"\n\t       ])\n       AS_IF([test \"$GCC\" = \"yes\"],[\n\t       SO_CFLAGS=\"-fPIC\"\n\t       AS_IF([test -z \"$SO_LD\"],\n\t\t     [AS_IF([test \"$use_libtool\" = \"yes\"],[\n\t\t\t      SO_LDFLAGS=\"-Xcompiler -shared\"\n\t\t\t      SO_LD=\"${CC}\"\n\t\t\t    ],[\n\t\t\t      SO_LDFLAGS=\"-shared\"\n\t\t\t      SO_LD=\"${CC}\"\n\t\t\t    ])\n\t\t     ])\n\t     ])\n       # If we still don't know how to make shared objects, don't make any.\n       AS_IF([test -n \"$SO_LD\"],\n\t     [SO_TARGETS=\"\\${SO_TARGETS}\"\n\t      AC_DEFINE([ISC_DLZ_DLOPEN], [1],\n\t\t\t[Define to allow building of objects for dlopen().])\n\t     ])\n      ])\n\nCFLAGS=\"$CFLAGS $SO_CFLAGS\"\n\nAC_SUBST(SO)\nAC_SUBST(SO_CFLAGS)\nAC_SUBST(SO_LDFLAGS)\nAC_SUBST(SO_LD)\nAC_SUBST(SO_STRIP)\nAC_SUBST(SO_TARGETS)\n\n#\n# Response policy rewriting using DNS Response Policy Service (DNSRPS)\n# interface.\n#\n# DNSRPS can be compiled into BIND everywhere with a reasonably\n# modern C compiler.  It is enabled on systems with dlopen() and librpz.so.\n#\ndnsrps_avail=yes\nAC_MSG_CHECKING([for librpz __attribute__s])\nAC_COMPILE_IFELSE(\n  [AC_LANG_PROGRAM(\n     [[]],\n     [[\n       extern void f(char *p __attribute__((unused)), ...)\n       __attribute__((format(printf,1,2))) __attribute__((__noreturn__));\n     ]])],\n  [\n    librpz_have_attr=yes\n    AC_DEFINE([LIBRPZ_HAVE_ATTR], [1], [have __attribute__s used in librpz.h])\n    AC_MSG_RESULT([yes])\n  ],[\n    librpz_have_attr=no\n    AC_MSG_RESULT([no])\n  ])\n\nAC_ARG_ENABLE([dnsrps-dl],\n\t      [AS_HELP_STRING([--enable-dnsrps-dl],\n\t\t\t      [DNS Response Policy Service delayed link\n\t\t\t       [default=$librpz_dl]])],\n\t      [enable_librpz_dl=\"$enableval\"], [enable_librpz_dl=\"$with_dlopen\"])\n\nAS_IF([test \"$enable_librpz_dl\" = \"yes\" -a \"$with_dlopen\" = \"no\"],\n      [AC_MSG_ERROR([DNS Response Policy Service delayed link requires dlopen to be enabled])])\n\nAC_ARG_WITH([dnsrps-libname],\n\t    [AS_HELP_STRING([--with-dnsrps-libname],\n\t\t\t    [DNSRPS provider library name (librpz.so)])],\n\t    [librpz_name=\"$withval\"], [librpz_name=\"librpz.so\"])\nAC_ARG_WITH([dnsrps-dir],\n\t    [AS_HELP_STRING([--with-dnsrps-dir],\n\t\t\t    [path to DNSRPS provider library])],\n\t    [librpz_path=\"$withval/$librpz_name\"], [librpz_path=\"$librpz_name\"])\nAC_DEFINE_UNQUOTED([DNSRPS_LIBRPZ_PATH], [\"$librpz_path\"],\n\t\t   [dnsrps $librpz_name])\nAS_IF([test \"$enable_librpz_dl\" = \"yes\"],\n      [\n\tdnsrps_lib_open=2\n      ],[\n\tdnsrps_lib_open=1\n\t# Add librpz.so to linked libraries if we are not using dlopen()\n\tAC_SEARCH_LIBS([librpz_client_create], [rpz], [],\n\t\t[dnsrps_lib_open=0\n\t\t dnsrps_avail=no])\n      ])\nAC_DEFINE_UNQUOTED([DNSRPS_LIB_OPEN], [$dnsrps_lib_open],\n\t\t   [0=no DNSRPS  1=static link  2=dlopen()])\n\nAC_ARG_ENABLE([dnsrps],\n\t      AS_HELP_STRING([--enable-dnsrps],\n\t\t\t     [enable DNS Response Policy Service API]),\n\t      [enable_dnsrps=$enableval], [enable_dnsrps=no])\n\nAS_IF([test \"$enable_dnsrps\" != \"no\"],[\n\tAS_IF([test \"$dnsrps_avail\" != \"yes\"],\n\t      [AC_MSG_ERROR([dlopen and librpz.so needed for DNSRPS])])\n\tAS_IF([test \"$dnsrps_lib_open\" = \"0\"],\n\t      [AC_MSG_ERROR([dlopen and librpz.so needed for DNSRPS])])\n\tAC_DEFINE([USE_DNSRPS], [1], [Enable DNS Response Policy Service API])\n      ])\n\nsinclude(contrib/dlz/config.dlz.in)\nAC_MSG_CHECKING(contributed DLZ drivers)\n\nif test -n \"$CONTRIB_DLZ\"\nthen\n\tAC_MSG_RESULT(yes)\n\tDLZ_DRIVER_RULES=contrib/dlz/drivers/rules\n\tAC_CONFIG_FILES([$DLZ_DRIVER_RULES\n\t\tcontrib/dlz/modules/mysql/Makefile\n\t\tcontrib/dlz/modules/mysqldyn/Makefile])\nelse\n\tAC_MSG_RESULT(no)\n\tDLZ_DRIVER_RULES=/dev/null\nfi\n\nAC_SUBST(CONTRIB_DLZ)\nAC_SUBST(DLZ_DRIVER_INCLUDES)\nAC_SUBST(DLZ_DRIVER_LIBS)\nAC_SUBST(DLZ_DRIVER_SRCS)\nAC_SUBST(DLZ_DRIVER_OBJS)\nAC_SUBST(DLZ_SYSTEM_TEST)\nAC_SUBST(DLZ_DRIVER_MYSQL_INCLUDES)\nAC_SUBST(DLZ_DRIVER_MYSQL_LIBS)\nAC_SUBST_FILE(DLZ_DRIVER_RULES)\n\nif test \"yes\" = \"$cross_compiling\"; then\n\tif test -z \"$BUILD_CC\"; then\n\t\tAC_MSG_ERROR([BUILD_CC not set])\n\tfi\n\tBUILD_CFLAGS=\"$BUILD_CFLAGS\"\n\tBUILD_CPPFLAGS=\"$BUILD_CPPFLAGS\"\n\tBUILD_LDFLAGS=\"$BUILD_LDFLAGS\"\n\tBUILD_LIBS=\"$BUILD_LIBS\"\nelse\n\tBUILD_CC=\"$CC\"\n\tBUILD_CFLAGS=\"$CFLAGS\"\n\tBUILD_CPPFLAGS=\"$CPPFLAGS $GEN_NEED_OPTARG\"\n\tBUILD_LDFLAGS=\"$LDFLAGS\"\n\tBUILD_LIBS=\"$LIBS\"\nfi\n\nNEWFLAGS=\"\"\nfor e in $BUILD_LDFLAGS ; do\n    case $e in\n\t-L*)\n\t    case $host_os in\n\t\tnetbsd*)\n\t\t    ee=`echo $e | sed -e 's%^-L%-Wl,-rpath,%'`\n\t\t    NEWFLAGS=\"$NEWFLAGS $e $ee\"\n\t\t    ;;\n\t\tfreebsd*)\n\t\t    ee=`echo $e | sed -e 's%^-L%-Wl,-rpath,%'`\n\t\t    NEWFLAGS=\"$NEWFLAGS $e $ee\"\n\t\t    ;;\n\t\tsolaris*)\n\t\t    ee=`echo $e | sed -e 's%^-L%-R%'`\n\t\t    NEWFLAGS=\"$NEWFLAGS $e $ee\"\n\t\t    ;;\n\t\t*)\n\t\t    NEWFLAGS=\"$NEWFLAGS $e\"\n\t\t    ;;\n\t\tesac\n\t    ;;\n\t*)\n\t    NEWFLAGS=\"$NEWFLAGS $e\"\n\t    ;;\n    esac\ndone\nBUILD_LDFLAGS=\"$NEWFLAGS\"\n\nNEWFLAGS=\"\"\nfor e in $DNS_GSSAPI_LIBS ; do\n    case $e in\n\t-L*)\n\t    case $host_os in\n\t\tnetbsd*)\n\t\t    ee=`echo $e | sed -e 's%^-L%-Wl,-rpath,%'`\n\t\t    NEWFLAGS=\"$NEWFLAGS $e $ee\"\n\t\t    ;;\n\t\tfreebsd*)\n\t\t    ee=`echo $e | sed -e 's%^-L%-Wl,-rpath,%'`\n\t\t    NEWFLAGS=\"$NEWFLAGS $e $ee\"\n\t\t    ;;\n\t\tsolaris*)\n\t\t    ee=`echo $e | sed -e 's%^-L%-R%'`\n\t\t    NEWFLAGS=\"$NEWFLAGS $e $ee\"\n\t\t    ;;\n\t\t*)\n\t\t    NEWFLAGS=\"$NEWFLAGS $e\"\n\t\t    ;;\n\t\tesac\n\t    ;;\n\t*)\n\t    NEWFLAGS=\"$NEWFLAGS $e\"\n\t    ;;\n    esac\ndone\nDNS_GSSAPI_LIBS=\"$NEWFLAGS\"\n\nNEWFLAGS=\"\"\nfor e in $ISC_OPENSSL_LIBS ; do\n    case $e in\n\t-L*)\n\t    case $host_os in\n\t\tnetbsd*)\n\t\t    ee=`echo $e | sed -e 's%^-L%-Wl,-rpath,%'`\n\t\t    NEWFLAGS=\"$NEWFLAGS $e $ee\"\n\t\t    ;;\n\t\tfreebsd*)\n\t\t    ee=`echo $e | sed -e 's%^-L%-Wl,-rpath,%'`\n\t\t    NEWFLAGS=\"$NEWFLAGS $e $ee\"\n\t\t    ;;\n\t\tsolaris*)\n\t\t    ee=`echo $e | sed -e 's%^-L%-R%'`\n\t\t    NEWFLAGS=\"$NEWFLAGS $e $ee\"\n\t\t    ;;\n\t\t*)\n\t\t    NEWFLAGS=\"$NEWFLAGS $e\"\n\t\t    ;;\n\t\tesac\n\t    ;;\n\t*)\n\t    NEWFLAGS=\"$NEWFLAGS $e\"\n\t    ;;\n    esac\ndone\nISC_OPENSSL_LIBS=\"$NEWFLAGS\"\n\nNEWFLAGS=\"\"\nfor e in $DNS_CRYPTO_LIBS ; do\n    case $e in\n\t-L*)\n\t    case $host_os in\n\t\tnetbsd*)\n\t\t    ee=`echo $e | sed -e 's%^-L%-Wl,-rpath,%'`\n\t\t    NEWFLAGS=\"$NEWFLAGS $e $ee\"\n\t\t    ;;\n\t\tfreebsd*)\n\t\t    ee=`echo $e | sed -e 's%^-L%-Wl,-rpath,%'`\n\t\t    NEWFLAGS=\"$NEWFLAGS $e $ee\"\n\t\t    ;;\n\t\tsolaris*)\n\t\t    ee=`echo $e | sed -e 's%^-L%-R%'`\n\t\t    NEWFLAGS=\"$NEWFLAGS $e $ee\"\n\t\t    ;;\n\t\t*)\n\t\t    NEWFLAGS=\"$NEWFLAGS $e\"\n\t\t    ;;\n\t\tesac\n\t    ;;\n\t*)\n\t    NEWFLAGS=\"$NEWFLAGS $e\"\n\t    ;;\n    esac\ndone\nDNS_CRYPTO_LIBS=\"$NEWFLAGS\"\n\nAC_SUBST(BUILD_CC)\nAC_SUBST(BUILD_CFLAGS)\nAC_SUBST(BUILD_CPPFLAGS)\nAC_SUBST(BUILD_LDFLAGS)\nAC_SUBST(BUILD_LIBS)\n\n#\n# Commands to run at the end of config.status.\n# Don't just put these into configure, it won't work right if somebody\n# runs config.status directly (which autoconf allows).\n#\n\nAC_CONFIG_COMMANDS(\n\t[chmod],\n\t[chmod a+x isc-config.sh doc/doxygen/doxygen-input-filter])\n\n#\n# Files to configure.  These are listed here because we used to\n# specify them as arguments to AC_OUTPUT.  It's (now) ok to move these\n# elsewhere if there's a good reason for doing so.\n#\n\nAC_CONFIG_FILES([\n\tmake/Makefile\n\tmake/mkdep\n\tMakefile\n\tbin/Makefile\n\tbin/check/Makefile\n\tbin/confgen/Makefile\n\tbin/confgen/unix/Makefile\n\tbin/delv/Makefile\n\tbin/dig/Makefile\n\tbin/dnssec/Makefile\n\tbin/named/Makefile\n\tbin/named/unix/Makefile\n\tbin/nsupdate/Makefile\n\tbin/pkcs11/Makefile\n\tbin/plugins/Makefile\n\tbin/python/Makefile\n\tbin/python/isc/Makefile\n\tbin/python/isc/utils.py\n\tbin/python/isc/tests/Makefile\n\tbin/python/dnssec-checkds.py\n\tbin/python/dnssec-coverage.py\n\tbin/python/dnssec-keymgr.py\n\tbin/python/isc/__init__.py\n\tbin/python/isc/checkds.py\n\tbin/python/isc/coverage.py\n\tbin/python/isc/dnskey.py\n\tbin/python/isc/eventlist.py\n\tbin/python/isc/keydict.py\n\tbin/python/isc/keyevent.py\n\tbin/python/isc/keymgr.py\n\tbin/python/isc/keyseries.py\n\tbin/python/isc/keyzone.py\n\tbin/python/isc/policy.py\n\tbin/python/isc/rndc.py\n\tbin/python/isc/tests/dnskey_test.py\n\tbin/python/isc/tests/policy_test.py\n\tbin/rndc/Makefile\n\tbin/tests/Makefile\n\tbin/tests/headerdep_test.sh\n\tbin/tests/optional/Makefile\n\tbin/tests/pkcs11/Makefile\n\tbin/tests/pkcs11/benchmarks/Makefile\n\tbin/tests/system/Makefile\n\tbin/tests/system/conf.sh\n\tbin/tests/system/dlzexternal/Makefile\n\tbin/tests/system/dlzexternal/ns1/dlzs.conf\n\tbin/tests/system/dyndb/Makefile\n\tbin/tests/system/dyndb/driver/Makefile\n\tbin/tests/system/pipelined/Makefile\n\tbin/tests/system/rndc/Makefile\n\tbin/tests/system/rpz/Makefile\n\tbin/tests/system/rsabigexponent/Makefile\n\tbin/tests/system/tkey/Makefile\n\tbin/tests/virtual-time/Makefile\n\tbin/tests/virtual-time/conf.sh\n\tbin/tools/Makefile\n\tcontrib/scripts/check-secure-delegation.pl\n\tcontrib/scripts/zone-edit.sh\n\tdoc/Makefile\n\tdoc/arm/Makefile\n\tdoc/arm/noteversion.xml\n\tdoc/arm/pkgversion.xml\n\tdoc/arm/releaseinfo.xml\n\tdoc/doxygen/Doxyfile\n\tdoc/doxygen/Makefile\n\tdoc/doxygen/doxygen-input-filter\n\tdoc/misc/Makefile\n\tdoc/tex/Makefile\n\tdoc/tex/armstyle.sty\n\tdoc/xsl/Makefile\n\tdoc/xsl/isc-docbook-chunk.xsl\n\tdoc/xsl/isc-docbook-html.xsl\n\tdoc/xsl/isc-manpage.xsl\n\tdoc/xsl/isc-notes-html.xsl\n\tisc-config.sh\n\tlib/Makefile\n\tlib/bind9/Makefile\n\tlib/bind9/include/Makefile\n\tlib/bind9/include/bind9/Makefile\n\tlib/dns/Makefile\n\tlib/dns/include/Makefile\n\tlib/dns/include/dns/Makefile\n\tlib/dns/include/dst/Makefile\n\tlib/dns/tests/Makefile\n\tlib/irs/Makefile\n\tlib/irs/include/Makefile\n\tlib/irs/include/irs/Makefile\n\tlib/irs/include/irs/netdb.h\n\tlib/irs/include/irs/platform.h\n\tlib/irs/tests/Makefile\n\tlib/isc/pthreads/Makefile\n\tlib/isc/pthreads/include/Makefile\n\tlib/isc/pthreads/include/isc/Makefile\n\tlib/isc/Makefile\n\tlib/isc/include/Makefile\n\tlib/isc/include/isc/Makefile\n\tlib/isc/include/isc/platform.h\n\tlib/isc/include/pk11/Makefile\n\tlib/isc/include/pkcs11/Makefile\n\tlib/isc/tests/Makefile\n\tlib/isc/unix/Makefile\n\tlib/isc/unix/include/Makefile\n\tlib/isc/unix/include/isc/Makefile\n\tlib/isc/unix/include/pkcs11/Makefile\n\tlib/isccc/Makefile\n\tlib/isccc/include/Makefile\n\tlib/isccc/include/isccc/Makefile\n\tlib/isccc/tests/Makefile\n\tlib/isccfg/Makefile\n\tlib/isccfg/include/Makefile\n\tlib/isccfg/include/isccfg/Makefile\n\tlib/isccfg/tests/Makefile\n\tlib/ns/Makefile\n\tlib/ns/include/Makefile\n\tlib/ns/include/ns/Makefile\n\tlib/ns/tests/Makefile\n\tlib/samples/Makefile\n\tlib/samples/Makefile-postinstall\n\tunit/unittest.sh\n\tfuzz/Makefile\n])\n\n#\n# Do it\n#\n\nAC_OUTPUT\n\n#\n# Now that the Makefiles exist we can ensure that everything is rebuilt.\n#\nAC_ARG_WITH(make-clean,\n\t    AS_HELP_STRING([--with-make-clean],\n\t\t\t   [run \"make clean\" at end of configure [yes|no]]),\n    make_clean=\"$withval\", make_clean=\"yes\")\ncase \"$make_clean\" in\nyes)\n\tif test \"yes\" != \"$no_create\"\n\tthen\n\t\tif test \"yes\" = \"$silent\"\n\t\tthen\n\t\t\tmake clean > /dev/null\n\t\telse\n\t\t\tmake clean\n\t\tfi\n\tfi\n\t;;\nesac\n\nAC_ARG_ENABLE(full-report,\n\t      AS_HELP_STRING([--enable-full-report],\n\t\t\t     [report values of all configure options]))\n\nreport() {\n    echo \"===============================================================================\"\n    echo \"Configuration summary:\"\n    echo \"-------------------------------------------------------------------------------\"\n    echo \"Optional features enabled:\"\n    if test \"yes\" = \"$enable_full_report\" -o \"standard\" = \"$locktype\"; then\n\techo \"        Mutex lock type: $locktype\"\n    fi\n    test \"large\" = \"$use_tuning\" && echo \"    Large-system tuning (--with-tuning)\"\n    test \"no\" = \"$use_dnstap\" || \\\n\t    echo \"    Allow 'dnstap' packet logging (--enable-dnstap)\"\n    test -z \"$MAXMINDDB_LIBS\" || echo \"    GeoIP2 access control (--with-geoip2)\"\n    test \"no\" = \"$use_geoip\" || echo \"    Legacy GeoIP access control (--with-geoip)\"\n    test \"no\" = \"$use_gssapi\" || echo \"    GSS-API (--with-gssapi)\"\n    if test \"yes\" = \"$enable_full_report\" -o \"aes\" != \"$with_cc_alg\"; then\n\techo \"        Algorithm: $with_cc_alg\"\n    fi\n\n    # these lines are only printed if run with --enable-full-report\n    if test \"yes\" = \"$enable_full_report\"; then\n\ttest \"no\" = \"$found_ipv6\" || echo \"    IPv6 support (--enable-ipv6)\"\n\ttest \"X$PYTHON\" = \"X\" || echo \"    Python tools (--with-python)\"\n\ttest \"X$XMLSTATS\" = \"X\" || echo \"    XML statistics (--with-libxml2)\"\n\ttest \"X$JSONSTATS\" = \"X\" || echo \"    JSON statistics (--with-libjson)\"\n\ttest \"X$ZLIB\" = \"X\" || echo \"    HTTP zlib compression (--with-zlib)\"\n\ttest \"X$NZD_TOOLS\" = \"X\" || echo \"    LMDB database to store configuration for 'addzone' zones (--with-lmdb)\"\n\ttest \"no\" = \"$with_libidn2\" || echo \"    IDN support (--with-libidn2)\"\n    fi\n\n    test \"yes\" = \"$enable_dnsrps\" && \\\n\techo \"    DNS Response Policy Service interface (--enable-dnsrps)\"\n    test \"yes\" = \"$enable_fixed\" && \\\n\techo \"    Allow 'fixed' rrset-order (--enable-fixed-rrset)\"\n    test \"yes\" = \"$enable_backtrace\" && \\\n\techo \"    Print backtrace on crash (--enable-backtrace)\"\n    test \"minimal\" = \"$want_symtable\" && \\\n\techo \"    Use symbol table for backtrace, named only (--enable-symtable)\"\n    test \"yes\" = \"$want_symtable\" -o \"all\" = \"$want_symtable\" && \\\n\techo \"    Use symbol table for backtrace, all binaries (--enable-symtable=all)\"\n    test \"no\" = \"$use_libtool\" || echo \"    Use GNU libtool (--with-libtool)\"\n    test \"yes\" = \"$want_querytrace\" && \\\n\techo \"    Very verbose query trace logging (--enable-querytrace)\"\n    test \"no\" = \"$with_cmocka\" || echo \"    CMocka Unit Testing Framework (--with-cmocka)\"\n\n    test \"auto\" = \"$validation_default\" && echo \"    DNSSEC validation active by default (--enable-auto-validation)\"\n\n    test \"$CRYPTO\" = \"pkcs11\" && (\n\techo \"    Using PKCS#11 for Public-Key Cryptography (--with-native-pkcs11)\"\n\techo \"    PKCS#11 module (--with-pkcs11): $with_pkcs11\"\n    )\n\n    echo \"    Dynamically loadable zone (DLZ) drivers:\"\n    test \"no\" = \"$use_dlz_bdb\" || \\\n\techo \"        Berkeley DB (--with-dlz-bdb)\"\n    test \"no\" = \"$use_dlz_ldap\" || \\\n\techo \"        LDAP (--with-dlz-ldap)\"\n    test \"no\" = \"$use_dlz_mysql\" || \\\n\techo \"        MySQL (--with-dlz-mysql)\"\n    test \"no\" = \"$use_dlz_odbc\" || \\\n\techo \"        ODBC (--with-dlz-odbc)\"\n    test \"no\" = \"$use_dlz_postgres\" || \\\n\techo \"        Postgres (--with-dlz-postgres)\"\n    test \"no\" = \"$use_dlz_filesystem\" || \\\n\techo \"        Filesystem (--with-dlz-filesystem)\"\n    test \"no\" = \"$use_dlz_stub\" || \\\n\techo \"        Stub (--with-dlz-stub)\"\n    test \"$use_dlz_bdb $use_dlz_ldap $use_dlz_mysql $use_dlz_odbc $use_dlz_postgres $use_dlz_filesystem $use_dlz_stub\" = \"no no no no no no no\" && echo \"        None\"\n\n    echo \"-------------------------------------------------------------------------------\"\n\n    echo \"Features disabled or unavailable on this platform:\"\n    test \"no\" = \"$found_ipv6\" && echo \"    IPv6 support (--enable-ipv6)\"\n    test \"large\" = \"$use_tuning\" || echo \"    Large-system tuning (--with-tuning)\"\n\n    test \"no\" = \"$use_dnstap\" && \\\n\t    echo \"    Allow 'dnstap' packet logging (--enable-dnstap)\"\n    test -z \"$MAXMINDDB_LIBS\" && echo \"    GeoIP2 access control (--with-geoip2)\"\n    test \"no\" = \"$use_gssapi\" && echo \"    GSS-API (--with-gssapi)\"\n\n    test \"no\" = \"$enable_dnsrps\" && \\\n\techo \"    DNS Response Policy Service interface (--enable-dnsrps)\"\n\n    test \"yes\" = \"$enable_fixed\" || \\\n\techo \"    Allow 'fixed' rrset-order (--enable-fixed-rrset)\"\n\n    test \"yes\" = \"$validation_default\" && echo \"    DNSSEC validation requires configuration (--enablee-auto-validation)\"\n\n    test \"$CRYPTO\" = \"pkcs11\" || (\n\techo \"    Using PKCS#11 for Public-Key Cryptography (--with-native-pkcs11)\"\n    )\n\n    test \"yes\" = \"$enable_backtrace\" || \\\n\techo \"    Print backtrace on crash (--enable-backtrace)\"\n    test \"yes\" = \"$want_querytrace\" || \\\n\techo \"    Very verbose query trace logging (--enable-querytrace)\"\n\n    test \"yes\" = \"$use_libtool\" || echo \"    Use GNU libtool (--with-libtool)\"\n    test \"no\" = \"$with_cmocka\" && echo \"    CMocka Unit Testing Framework (--with-cmocka)\"\n\n    test \"X$PYTHON\" = \"X\" && echo \"    Python tools (--with-python)\"\n    test \"X$XMLSTATS\" = \"X\" && echo \"    XML statistics (--with-libxml2)\"\n    test \"X$JSONSTATS\" = \"X\" && echo \"    JSON statistics (--with-libjson)\"\n    test \"X$ZLIB\" = \"X\" && echo \"    HTTP zlib compression (--with-zlib)\"\n    test \"X$NZD_TOOLS\" = \"X\" && echo \"    LMDB database to store configuration for 'addzone' zones (--with-lmdb)\"\n    test \"no\" = \"$with_libidn2\" && echo \"    IDN support (--with-libidn2)\"\n\n    echo \"-------------------------------------------------------------------------------\"\n    echo \"Configured paths:\"\n    echo \"    prefix: $prefix\"\n    echo \"    sysconfdir: $sysconfdir\"\n    echo \"    localstatedir: $localstatedir\"\n    echo \"-------------------------------------------------------------------------------\"\n    echo \"Compiler: $CC\"\n    $CC --version 2>&1 | sed 's/^/    /'\n\n    if test \"X$ac_unrecognized_opts\" != \"X\"; then\n\techo \"Unrecognized options:\"\n\techo \"    $ac_unrecognized_opts\"\n    fi\n\n    if test \"yes\" != \"$enable_full_report\"; then\n\techo \"-------------------------------------------------------------------------------\"\n\techo \"For more detail, use --enable-full-report.\"\n    fi\n    echo \"===============================================================================\"\n}\n\nif test \"yes\" != \"$silent\"; then\n\treport\nfi\n\n# Tell Emacs to edit this file in shell mode.\n# Local Variables:\n# mode: sh\n# End:\n",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/config.h.win32": "/*\n * Copyright (C) Internet Systems Consortium, Inc. (\"ISC\")\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n *\n * See the COPYRIGHT file distributed with this work for additional\n * information regarding copyright ownership.\n */\n\n/*\n * win32 configuration file\n * All definitions, declarations, macros and includes are\n * specific to the requirements of the Windows NT and Windows 2000\n * platforms\n */\n\n/* Define to empty if the keyword does not work.  */\n/* #undef const */\n\n/* Define as __inline if that's what the C compiler calls it.  */\n#define inline __inline\n\n/* Define to `unsigned int/__int64' if <sys/types.h> doesn't define.  */\n/* #undef size_t */\n\n/*\n * ANSI C compliance enabled\n */\n#define __STDC__ 1\n\n/*\n * Silence compiler warnings about using strcpy and friends.\n */\n#define _CRT_SECURE_NO_DEPRECATE 1\n\n/*\n * Use 32 bit time.\n */\n#ifndef _WIN64\n#define _USE_32BIT_TIME_T 1\n#endif\n\n/*\n * Minimum version is Windows 8 and Windows Server 2012\n */\n#ifndef _WIN32_WINNT\n#define _WIN32_WINNT 0x0602\n#endif\n#if _WIN32_WINNT < 0x0602\n#error Minimum Target environment is Windows 8 and Windows Server 2012\n#endif\n#ifndef NTDDI_VERSION\n#define NTDDI_VERSION 0x06020000\n#endif\n#if NTDDI_VERSION < 0x06020000\n#error Minimum Target environment is Windows 8 and Windows Server 2012\n#endif\n\n/* Define if you have the ANSI C header files.  */\n#define STDC_HEADERS 1\n\n/* Define if you can safely include both <sys/time.h> and <time.h>.  */\n#define TIME_WITH_SYS_TIME 1\n\n/* define on DEC OSF to enable 4.4BSD style sa_len support */\n/* #undef _SOCKADDR_LEN */\n\n/* define if your system has sigwait() */\n/* #undef HAVE_SIGWAIT */\n\n/* define on Solaris to get sigwait() to work using pthreads semantics */\n/* #undef _POSIX_PTHREAD_SEMANTICS */\n\n/* define if you need to #define _XPG4_2 before including sys/socket.h */\n/* #undef NEED_XPG4_2_BEFORE_SOCKET_H */\n\n/* define if you need to #define _XOPEN_SOURCE_ENTENDED before including\n * sys/socket.h\n */\n/* #undef NEED_XSE_BEFORE_SOCKET_H */\n\n/* Define if you have the <fcntl.h> header file.  */\n#define HAVE_FCNTL_H 1\n\n/* Define if you have the <sys/sockio.h> header file.  */\n#define HAVE_SYS_SOCKIO_H 1\n\n/* Define if you have the <sys/time.h> header file.  */\n#define HAVE_SYS_TIME_H 1\n\n/* Define if you have the <unistd.h> header file.  */\n#define HAVE_UNISTD_H 1\n\n/* Define if you have the c_r library (-lc_r).  */\n/* #undef HAVE_LIBC_R */\n\n/* Define if you have the nsl library (-lnsl).  */\n/* #undef HAVE_LIBNSL */\n\n/* Define if you have the pthread library (-lpthread).  */\n/* #undef HAVE_LIBPTHREAD */\n\n/* Define if you have the socket library (-lsocket).  */\n/* #undef HAVE_LIBSOCKET */\n\n/* Define if you have h_errno */\n#define HAVE_H_ERRNO\n\n/* Define if you have getpassphrase in the C library. */\n#define HAVE_GETPASSPHRASE\n\nchar *getpassphrase(const char *);\n\n/*\n * Define to 1 if you want to use the DLZ \"dlopen\" driver\n * (which has the same name on windows even though it uses\n * LoadLibrary() instead of dlopen()).\n */\n#define ISC_DLZ_DLOPEN 1\n\n#define S_IFMT   _S_IFMT         /* file type mask */\n#define S_IFDIR  _S_IFDIR        /* directory */\n#define S_IFCHR  _S_IFCHR        /* character special */\n#define S_IFIFO  _S_IFIFO        /* pipe */\n#define S_IFREG  _S_IFREG        /* regular */\n#define S_IREAD  _S_IREAD        /* read permission, owner */\n#define S_IWRITE _S_IWRITE       /* write permission, owner */\n#define S_IEXEC  _S_IEXEC        /* execute/search permission, owner */\n\n#define O_RDONLY        _O_RDONLY\n#define O_WRONLY        _O_WRONLY\n#define O_RDWR          _O_RDWR\n#define O_APPEND        _O_APPEND\n#define O_CREAT         _O_CREAT\n#define O_TRUNC         _O_TRUNC\n#define O_EXCL          _O_EXCL\n\n/* open() under unix allows setting of read/write permissions\n * at the owner, group and other levels.  These don't exist in NT\n * We'll just map them all to the NT equivalent\n */\n\n#define S_IRUSR _S_IREAD\t/* Owner read permission */\n#define S_IWUSR _S_IWRITE\t/* Owner write permission */\n#define S_IRGRP _S_IREAD\t/* Group read permission */\n#define S_IWGRP _S_IWRITE\t/* Group write permission */\n#define S_IROTH _S_IREAD\t/* Other read permission */\n#define S_IWOTH _S_IWRITE\t/* Other write permission */\n\n\n/*\n * WIN32 specials until some other way of dealing with these is decided.\n */\n\n#if _MSC_VER < 1900\n#define snprintf _snprintf\n#endif\n#if _MSC_VER < 1800\n#error Use Visual Studio 2013 or later for %zu support.\n#endif\n#if _MSC_VER <= 1400\n#define vsnprintf _vsnprintf\n#endif\n#define strcasecmp  _stricmp\n#define strncasecmp _strnicmp\n#define strdup _strdup\n#define sopen _sopen\n#define isascii __isascii\n#ifndef _WIN64\n#define stat _stat\n#define fstat _fstat\n#else\n#define stat _stat64\n#define fstat _fstat64\n#endif\n#define fileno _fileno\n#define unlink _unlink\n#define chdir _chdir\n#define mkdir _mkdir\n#define rmdir _rmdir\n#define getcwd _getcwd\n#define utime _utime\n#define utimbuf _utimbuf\n#ifndef _WIN64\n#define lseek _lseek\n#else\n#define lseek _lseeki64\n#endif\n\n/* #define EAFNOSUPPORT EINVAL */\n#define chmod _chmod\n#define getpid _getpid\n#define getppid _getpid\t/* WARNING!!! For now this gets the same pid */\n#define random rand\t/* Random number generator */\n#define srandom srand\t/* Random number generator seeding */\n/* for the config file */\ntypedef unsigned int    uid_t;          /* user id */\ntypedef unsigned int    gid_t;          /* group id */\ntypedef long pid_t;\t\t\t/* PID */\n#ifndef _WIN64\ntypedef int ssize_t;\ntypedef long off_t;\n#else\ntypedef __int64 ssize_t;\n#ifndef _AFX\n/* BINDInstall defines it with another type but doesn't use it */\ntypedef __int64 off_t;\n#endif\n#endif\n\n/*\n * Set up the Version Information\n */\n#include <versions.h>\n\n#include <stddef.h>\n#include <stdio.h>\n#include <stdarg.h>\n\n/*\n * Applications may need to get the configuration path\n */\n#ifndef _USRDLL\n#include <isc/ntpaths.h>\n#endif\n\n#define fdopen\t_fdopen\n#define read\t_read\n#define open\t_open\n#define close\t_close\n#define write\t_write\n#include <io.h>\n#define isatty\t_isatty\n\n#ifndef _WINSOCKAPI_\n#define _WINSOCKAPI_   /* Prevent inclusion of winsock.h in windows.h */\n#endif\n\n/*\n * Make the number of available sockets large\n * The number of sockets needed can get large and memory's cheap\n * This must be defined before winsock2.h gets included as the\n * macro is used there.\n */\n\n#ifndef FD_SETSIZE\n#define FD_SETSIZE 16384\n#endif\n#include <windows.h>\n\n/*\n * main() is hooked\n */\n#define ISC_MAIN_HOOK 1\n\n/*\n * Configure sensible arguments\n */\n@CONFIGARGS@\n\n/*\n * Define if libxml2 is present\n */\n@HAVE_LIBXML2@\n\n/* Define to enable \"rrset-order fixed\" syntax. */\n@DNS_RDATASET_FIXED@\n\n/* Define if OpenSSL includes Ed25519 support */\n@HAVE_OPENSSL_ED25519@\n\n/* Define if OpenSSL includes Ed448 support */\n@HAVE_OPENSSL_ED448@\n\n/* Define if your OpenSSL version supports DH functions. */\n@HAVE_DH_GET0_KEY@\n\n/* Define if your OpenSSL version supports ECDSA functions. */\n@HAVE_ECDSA_SIG_GET0@\n\n/* Define if your OpenSSL version supports RSA functions. */\n@HAVE_RSA_SET0_KEY@\n\n/* define if OpenSSL is used for Public-Key Cryptography */\n@USE_OPENSSL@\n\n/* Define if native PKCS#11 is used as cryptographic library provider */\n@USE_PKCS11@\n\n/* Define if your PKCS11 provider supports Ed25519. */\n@HAVE_PKCS11_ED25519@\n\n/* Define if your PKCS11 provider supports Ed448. */\n@HAVE_PKCS11_ED448@\n\n/* HMAC_*() return ints */\n@HMAC_RETURN_INT@\n\n/* Define to 1 if you have the `readline' function. */\n@HAVE_READLINE@\n\n/* Build with GeoIP support */\n@HAVE_GEOIP@\n\n/* Build with GeoIP2 support */\n@HAVE_GEOIP2@\n\n/* define if idnkit support is to be included. */\n@WITH_IDN@\n\n/* Build with GeoIP City IPv6 support */\n@HAVE_GEOIP_CITY_V6@\n\n/* Build with GeoIP Country IPv6 support */\n@HAVE_GEOIP_V6@\n\n/* Define if zlib was found */\n@HAVE_ZLIB@\n\n/* From enable developer */\n@ISC_LIST_CHECKINIT@\n\n/* Large system tuning */\n@TUNE_LARGE@\n\n/* define if we can use backtrace */\n@USE_BACKTRACE@\n\n/* the default value of dnssec-validation option */\n@VALIDATION_DEFAULT@\n\n/* Verbose query trace logging */\n@WANT_QUERYTRACE@\n\n/* Define to 1 if you have the `CRYPTO_zalloc' function. */\n@HAVE_CRYPTO_ZALLOC@\n\n/* Define to 1 if you have the `EVP_CIPHER_CTX_free' function. */\n@HAVE_EVP_CIPHER_CTX_FREE@\n\n/* Define to 1 if you have the `EVP_CIPHER_CTX_new' function. */\n@HAVE_EVP_CIPHER_CTX_NEW@\n\n/* Define to 1 if you have the `EVP_MD_CTX_free' function. */\n@HAVE_EVP_MD_CTX_FREE@\n\n/* Define to 1 if you have the `EVP_MD_CTX_new' function. */\n@HAVE_EVP_MD_CTX_NEW@\n\n/* Define to 1 if you have the `EVP_MD_CTX_reset' function. */\n@HAVE_EVP_MD_CTX_RESET@\n\n/* Define to 1 if you have the `HMAC_CTX_free' function. */\n@HAVE_HMAC_CTX_FREE@\n\n/* Define to 1 if you have the `HMAC_CTX_get_md' function. */\n@HAVE_HMAC_CTX_GET_MD@\n\n/* Define to 1 if you have the `HMAC_CTX_new' function. */\n@HAVE_HMAC_CTX_NEW@\n\n/* Define to 1 if you have the `HMAC_CTX_reset' function. */\n@HAVE_HMAC_CTX_RESET@\n\n/*\n * Define to nothing if C supports flexible array members, and to 1 if it does\n * not. That way, with a declaration like `struct s { int n; double\n * d[FLEXIBLE_ARRAY_MEMBER]; };', the struct hack can be used with pre-C99\n * compilers. When computing the size of such an object, don't use 'sizeof\n * (struct s)' as it overestimates the size. Use 'offsetof (struct s, d)'\n * instead. Don't use 'offsetof (struct s, d[0])', as this doesn't work with\n * MSVC and with C++ compilers.\n */\n#define FLEXIBLE_ARRAY_MEMBER /**/\n\n/* Avoid warnings with strlen() */\n#ifdef _WIN64\n#define strlen(x)\t(unsigned int) strlen(x)\n#endif\n\n/* Get SRCID */\n#include \"srcid.h\"\n",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/ltmain.sh": "#! /bin/sh\n## DO NOT EDIT - This file generated from ./build-aux/ltmain.in\n##               by inline-source v2014-01-03.01\n\n# libtool (GNU libtool) 2.4.6\n# Provide generalized library-building support services.\n# Written by Gordon Matzigkeit <gord@gnu.ai.mit.edu>, 1996\n\n# Copyright (C) 1996-2015 Free Software Foundation, Inc.\n# This is free software; see the source for copying conditions.  There is NO\n# warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# GNU Libtool is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2 of the License, or\n# (at your option) any later version.\n#\n# As a special exception to the GNU General Public License,\n# if you distribute this file as part of a program or library that\n# is built using GNU Libtool, you may include this file under the\n# same distribution terms that you use for the rest of that program.\n#\n# GNU Libtool is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n# General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n\nPROGRAM=libtool\nPACKAGE=libtool\nVERSION=2.4.6\npackage_revision=2.4.6\n\n\n## ------ ##\n## Usage. ##\n## ------ ##\n\n# Run './libtool --help' for help with using this script from the\n# command line.\n\n\n## ------------------------------- ##\n## User overridable command paths. ##\n## ------------------------------- ##\n\n# After configure completes, it has a better idea of some of the\n# shell tools we need than the defaults used by the functions shared\n# with bootstrap, so set those here where they can still be over-\n# ridden by the user, but otherwise take precedence.\n\n: ${AUTOCONF=\"autoconf\"}\n: ${AUTOMAKE=\"automake\"}\n\n\n## -------------------------- ##\n## Source external libraries. ##\n## -------------------------- ##\n\n# Much of our low-level functionality needs to be sourced from external\n# libraries, which are installed to $pkgauxdir.\n\n# Set a version string for this script.\nscriptversion=2015-01-20.17; # UTC\n\n# General shell script boiler plate, and helper functions.\n# Written by Gary V. Vaughan, 2004\n\n# Copyright (C) 2004-2015 Free Software Foundation, Inc.\n# This is free software; see the source for copying conditions.  There is NO\n# warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# This program is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 3 of the License, or\n# (at your option) any later version.\n\n# As a special exception to the GNU General Public License, if you distribute\n# this file as part of a program or library that is built using GNU Libtool,\n# you may include this file under the same distribution terms that you use\n# for the rest of that program.\n\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNES FOR A PARTICULAR PURPOSE. See the GNU\n# General Public License for more details.\n\n# You should have received a copy of the GNU General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n\n# Please report bugs or propose patches to gary@gnu.org.\n\n\n## ------ ##\n## Usage. ##\n## ------ ##\n\n# Evaluate this file near the top of your script to gain access to\n# the functions and variables defined here:\n#\n#   . `echo \"$0\" | ${SED-sed} 's|[^/]*$||'`/build-aux/funclib.sh\n#\n# If you need to override any of the default environment variable\n# settings, do that before evaluating this file.\n\n\n## -------------------- ##\n## Shell normalisation. ##\n## -------------------- ##\n\n# Some shells need a little help to be as Bourne compatible as possible.\n# Before doing anything else, make sure all that help has been provided!\n\nDUALCASE=1; export DUALCASE # for MKS sh\nif test -n \"${ZSH_VERSION+set}\" && (emulate sh) >/dev/null 2>&1; then :\n  emulate sh\n  NULLCMD=:\n  # Pre-4.2 versions of Zsh do word splitting on ${1+\"$@\"}, which\n  # is contrary to our usage.  Disable this feature.\n  alias -g '${1+\"$@\"}'='\"$@\"'\n  setopt NO_GLOB_SUBST\nelse\n  case `(set -o) 2>/dev/null` in *posix*) set -o posix ;; esac\nfi\n\n# NLS nuisances: We save the old values in case they are required later.\n_G_user_locale=\n_G_safe_locale=\nfor _G_var in LANG LANGUAGE LC_ALL LC_CTYPE LC_COLLATE LC_MESSAGES\ndo\n  eval \"if test set = \\\"\\${$_G_var+set}\\\"; then\n          save_$_G_var=\\$$_G_var\n          $_G_var=C\n\t  export $_G_var\n\t  _G_user_locale=\\\"$_G_var=\\\\\\$save_\\$_G_var; \\$_G_user_locale\\\"\n\t  _G_safe_locale=\\\"$_G_var=C; \\$_G_safe_locale\\\"\n\tfi\"\ndone\n\n# CDPATH.\n(unset CDPATH) >/dev/null 2>&1 && unset CDPATH\n\n# Make sure IFS has a sensible default\nsp=' '\nnl='\n'\nIFS=\"$sp\t$nl\"\n\n# There are apparently some retarded systems that use ';' as a PATH separator!\nif test \"${PATH_SEPARATOR+set}\" != set; then\n  PATH_SEPARATOR=:\n  (PATH='/bin;/bin'; FPATH=$PATH; sh -c :) >/dev/null 2>&1 && {\n    (PATH='/bin:/bin'; FPATH=$PATH; sh -c :) >/dev/null 2>&1 ||\n      PATH_SEPARATOR=';'\n  }\nfi\n\n\n\n## ------------------------- ##\n## Locate command utilities. ##\n## ------------------------- ##\n\n\n# func_executable_p FILE\n# ----------------------\n# Check that FILE is an executable regular file.\nfunc_executable_p ()\n{\n    test -f \"$1\" && test -x \"$1\"\n}\n\n\n# func_path_progs PROGS_LIST CHECK_FUNC [PATH]\n# --------------------------------------------\n# Search for either a program that responds to --version with output\n# containing \"GNU\", or else returned by CHECK_FUNC otherwise, by\n# trying all the directories in PATH with each of the elements of\n# PROGS_LIST.\n#\n# CHECK_FUNC should accept the path to a candidate program, and\n# set $func_check_prog_result if it truncates its output less than\n# $_G_path_prog_max characters.\nfunc_path_progs ()\n{\n    _G_progs_list=$1\n    _G_check_func=$2\n    _G_PATH=${3-\"$PATH\"}\n\n    _G_path_prog_max=0\n    _G_path_prog_found=false\n    _G_save_IFS=$IFS; IFS=${PATH_SEPARATOR-:}\n    for _G_dir in $_G_PATH; do\n      IFS=$_G_save_IFS\n      test -z \"$_G_dir\" && _G_dir=.\n      for _G_prog_name in $_G_progs_list; do\n        for _exeext in '' .EXE; do\n          _G_path_prog=$_G_dir/$_G_prog_name$_exeext\n          func_executable_p \"$_G_path_prog\" || continue\n          case `\"$_G_path_prog\" --version 2>&1` in\n            *GNU*) func_path_progs_result=$_G_path_prog _G_path_prog_found=: ;;\n            *)     $_G_check_func $_G_path_prog\n\t\t   func_path_progs_result=$func_check_prog_result\n\t\t   ;;\n          esac\n          $_G_path_prog_found && break 3\n        done\n      done\n    done\n    IFS=$_G_save_IFS\n    test -z \"$func_path_progs_result\" && {\n      echo \"no acceptable sed could be found in \\$PATH\" >&2\n      exit 1\n    }\n}\n\n\n# We want to be able to use the functions in this file before configure\n# has figured out where the best binaries are kept, which means we have\n# to search for them ourselves - except when the results are already set\n# where we skip the searches.\n\n# Unless the user overrides by setting SED, search the path for either GNU\n# sed, or the sed that truncates its output the least.\ntest -z \"$SED\" && {\n  _G_sed_script=s/aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb/\n  for _G_i in 1 2 3 4 5 6 7; do\n    _G_sed_script=$_G_sed_script$nl$_G_sed_script\n  done\n  echo \"$_G_sed_script\" 2>/dev/null | sed 99q >conftest.sed\n  _G_sed_script=\n\n  func_check_prog_sed ()\n  {\n    _G_path_prog=$1\n\n    _G_count=0\n    printf 0123456789 >conftest.in\n    while :\n    do\n      cat conftest.in conftest.in >conftest.tmp\n      mv conftest.tmp conftest.in\n      cp conftest.in conftest.nl\n      echo '' >> conftest.nl\n      \"$_G_path_prog\" -f conftest.sed <conftest.nl >conftest.out 2>/dev/null || break\n      diff conftest.out conftest.nl >/dev/null 2>&1 || break\n      _G_count=`expr $_G_count + 1`\n      if test \"$_G_count\" -gt \"$_G_path_prog_max\"; then\n        # Best one so far, save it but keep looking for a better one\n        func_check_prog_result=$_G_path_prog\n        _G_path_prog_max=$_G_count\n      fi\n      # 10*(2^10) chars as input seems more than enough\n      test 10 -lt \"$_G_count\" && break\n    done\n    rm -f conftest.in conftest.tmp conftest.nl conftest.out\n  }\n\n  func_path_progs \"sed gsed\" func_check_prog_sed $PATH:/usr/xpg4/bin\n  rm -f conftest.sed\n  SED=$func_path_progs_result\n}\n\n\n# Unless the user overrides by setting GREP, search the path for either GNU\n# grep, or the grep that truncates its output the least.\ntest -z \"$GREP\" && {\n  func_check_prog_grep ()\n  {\n    _G_path_prog=$1\n\n    _G_count=0\n    _G_path_prog_max=0\n    printf 0123456789 >conftest.in\n    while :\n    do\n      cat conftest.in conftest.in >conftest.tmp\n      mv conftest.tmp conftest.in\n      cp conftest.in conftest.nl\n      echo 'GREP' >> conftest.nl\n      \"$_G_path_prog\" -e 'GREP$' -e '-(cannot match)-' <conftest.nl >conftest.out 2>/dev/null || break\n      diff conftest.out conftest.nl >/dev/null 2>&1 || break\n      _G_count=`expr $_G_count + 1`\n      if test \"$_G_count\" -gt \"$_G_path_prog_max\"; then\n        # Best one so far, save it but keep looking for a better one\n        func_check_prog_result=$_G_path_prog\n        _G_path_prog_max=$_G_count\n      fi\n      # 10*(2^10) chars as input seems more than enough\n      test 10 -lt \"$_G_count\" && break\n    done\n    rm -f conftest.in conftest.tmp conftest.nl conftest.out\n  }\n\n  func_path_progs \"grep ggrep\" func_check_prog_grep $PATH:/usr/xpg4/bin\n  GREP=$func_path_progs_result\n}\n\n\n## ------------------------------- ##\n## User overridable command paths. ##\n## ------------------------------- ##\n\n# All uppercase variable names are used for environment variables.  These\n# variables can be overridden by the user before calling a script that\n# uses them if a suitable command of that name is not already available\n# in the command search PATH.\n\n: ${CP=\"cp -f\"}\n: ${ECHO=\"printf %s\\n\"}\n: ${EGREP=\"$GREP -E\"}\n: ${FGREP=\"$GREP -F\"}\n: ${LN_S=\"ln -s\"}\n: ${MAKE=\"make\"}\n: ${MKDIR=\"mkdir\"}\n: ${MV=\"mv -f\"}\n: ${RM=\"rm -f\"}\n: ${SHELL=\"${CONFIG_SHELL-/bin/sh}\"}\n\n\n## -------------------- ##\n## Useful sed snippets. ##\n## -------------------- ##\n\nsed_dirname='s|/[^/]*$||'\nsed_basename='s|^.*/||'\n\n# Sed substitution that helps us do robust quoting.  It backslashifies\n# metacharacters that are still active within double-quoted strings.\nsed_quote_subst='s|\\([`\"$\\\\]\\)|\\\\\\1|g'\n\n# Same as above, but do not quote variable references.\nsed_double_quote_subst='s/\\([\"`\\\\]\\)/\\\\\\1/g'\n\n# Sed substitution that turns a string into a regex matching for the\n# string literally.\nsed_make_literal_regex='s|[].[^$\\\\*\\/]|\\\\&|g'\n\n# Sed substitution that converts a w32 file name or path\n# that contains forward slashes, into one that contains\n# (escaped) backslashes.  A very naive implementation.\nsed_naive_backslashify='s|\\\\\\\\*|\\\\|g;s|/|\\\\|g;s|\\\\|\\\\\\\\|g'\n\n# Re-'\\' parameter expansions in output of sed_double_quote_subst that\n# were '\\'-ed in input to the same.  If an odd number of '\\' preceded a\n# '$' in input to sed_double_quote_subst, that '$' was protected from\n# expansion.  Since each input '\\' is now two '\\'s, look for any number\n# of runs of four '\\'s followed by two '\\'s and then a '$'.  '\\' that '$'.\n_G_bs='\\\\'\n_G_bs2='\\\\\\\\'\n_G_bs4='\\\\\\\\\\\\\\\\'\n_G_dollar='\\$'\nsed_double_backslash=\"\\\n  s/$_G_bs4/&\\\\\n/g\n  s/^$_G_bs2$_G_dollar/$_G_bs&/\n  s/\\\\([^$_G_bs]\\\\)$_G_bs2$_G_dollar/\\\\1$_G_bs2$_G_bs$_G_dollar/g\n  s/\\n//g\"\n\n\n## ----------------- ##\n## Global variables. ##\n## ----------------- ##\n\n# Except for the global variables explicitly listed below, the following\n# functions in the '^func_' namespace, and the '^require_' namespace\n# variables initialised in the 'Resource management' section, sourcing\n# this file will not pollute your global namespace with anything\n# else. There's no portable way to scope variables in Bourne shell\n# though, so actually running these functions will sometimes place\n# results into a variable named after the function, and often use\n# temporary variables in the '^_G_' namespace. If you are careful to\n# avoid using those namespaces casually in your sourcing script, things\n# should continue to work as you expect. And, of course, you can freely\n# overwrite any of the functions or variables defined here before\n# calling anything to customize them.\n\nEXIT_SUCCESS=0\nEXIT_FAILURE=1\nEXIT_MISMATCH=63  # $? = 63 is used to indicate version mismatch to missing.\nEXIT_SKIP=77\t  # $? = 77 is used to indicate a skipped test to automake.\n\n# Allow overriding, eg assuming that you follow the convention of\n# putting '$debug_cmd' at the start of all your functions, you can get\n# bash to show function call trace with:\n#\n#    debug_cmd='eval echo \"${FUNCNAME[0]} $*\" >&2' bash your-script-name\ndebug_cmd=${debug_cmd-\":\"}\nexit_cmd=:\n\n# By convention, finish your script with:\n#\n#    exit $exit_status\n#\n# so that you can set exit_status to non-zero if you want to indicate\n# something went wrong during execution without actually bailing out at\n# the point of failure.\nexit_status=$EXIT_SUCCESS\n\n# Work around backward compatibility issue on IRIX 6.5. On IRIX 6.4+, sh\n# is ksh but when the shell is invoked as \"sh\" and the current value of\n# the _XPG environment variable is not equal to 1 (one), the special\n# positional parameter $0, within a function call, is the name of the\n# function.\nprogpath=$0\n\n# The name of this program.\nprogname=`$ECHO \"$progpath\" |$SED \"$sed_basename\"`\n\n# Make sure we have an absolute progpath for reexecution:\ncase $progpath in\n  [\\\\/]*|[A-Za-z]:\\\\*) ;;\n  *[\\\\/]*)\n     progdir=`$ECHO \"$progpath\" |$SED \"$sed_dirname\"`\n     progdir=`cd \"$progdir\" && pwd`\n     progpath=$progdir/$progname\n     ;;\n  *)\n     _G_IFS=$IFS\n     IFS=${PATH_SEPARATOR-:}\n     for progdir in $PATH; do\n       IFS=$_G_IFS\n       test -x \"$progdir/$progname\" && break\n     done\n     IFS=$_G_IFS\n     test -n \"$progdir\" || progdir=`pwd`\n     progpath=$progdir/$progname\n     ;;\nesac\n\n\n## ----------------- ##\n## Standard options. ##\n## ----------------- ##\n\n# The following options affect the operation of the functions defined\n# below, and should be set appropriately depending on run-time para-\n# meters passed on the command line.\n\nopt_dry_run=false\nopt_quiet=false\nopt_verbose=false\n\n# Categories 'all' and 'none' are always available.  Append any others\n# you will pass as the first argument to func_warning from your own\n# code.\nwarning_categories=\n\n# By default, display warnings according to 'opt_warning_types'.  Set\n# 'warning_func'  to ':' to elide all warnings, or func_fatal_error to\n# treat the next displayed warning as a fatal error.\nwarning_func=func_warn_and_continue\n\n# Set to 'all' to display all warnings, 'none' to suppress all\n# warnings, or a space delimited list of some subset of\n# 'warning_categories' to display only the listed warnings.\nopt_warning_types=all\n\n\n## -------------------- ##\n## Resource management. ##\n## -------------------- ##\n\n# This section contains definitions for functions that each ensure a\n# particular resource (a file, or a non-empty configuration variable for\n# example) is available, and if appropriate to extract default values\n# from pertinent package files. Call them using their associated\n# 'require_*' variable to ensure that they are executed, at most, once.\n#\n# It's entirely deliberate that calling these functions can set\n# variables that don't obey the namespace limitations obeyed by the rest\n# of this file, in order that that they be as useful as possible to\n# callers.\n\n\n# require_term_colors\n# -------------------\n# Allow display of bold text on terminals that support it.\nrequire_term_colors=func_require_term_colors\nfunc_require_term_colors ()\n{\n    $debug_cmd\n\n    test -t 1 && {\n      # COLORTERM and USE_ANSI_COLORS environment variables take\n      # precedence, because most terminfo databases neglect to describe\n      # whether color sequences are supported.\n      test -n \"${COLORTERM+set}\" && : ${USE_ANSI_COLORS=\"1\"}\n\n      if test 1 = \"$USE_ANSI_COLORS\"; then\n        # Standard ANSI escape sequences\n        tc_reset='\u001b[0m'\n        tc_bold='\u001b[1m';   tc_standout='\u001b[7m'\n        tc_red='\u001b[31m';   tc_green='\u001b[32m'\n        tc_blue='\u001b[34m';  tc_cyan='\u001b[36m'\n      else\n        # Otherwise trust the terminfo database after all.\n        test -n \"`tput sgr0 2>/dev/null`\" && {\n          tc_reset=`tput sgr0`\n          test -n \"`tput bold 2>/dev/null`\" && tc_bold=`tput bold`\n          tc_standout=$tc_bold\n          test -n \"`tput smso 2>/dev/null`\" && tc_standout=`tput smso`\n          test -n \"`tput setaf 1 2>/dev/null`\" && tc_red=`tput setaf 1`\n          test -n \"`tput setaf 2 2>/dev/null`\" && tc_green=`tput setaf 2`\n          test -n \"`tput setaf 4 2>/dev/null`\" && tc_blue=`tput setaf 4`\n          test -n \"`tput setaf 5 2>/dev/null`\" && tc_cyan=`tput setaf 5`\n        }\n      fi\n    }\n\n    require_term_colors=:\n}\n\n\n## ----------------- ##\n## Function library. ##\n## ----------------- ##\n\n# This section contains a variety of useful functions to call in your\n# scripts. Take note of the portable wrappers for features provided by\n# some modern shells, which will fall back to slower equivalents on\n# less featureful shells.\n\n\n# func_append VAR VALUE\n# ---------------------\n# Append VALUE onto the existing contents of VAR.\n\n  # We should try to minimise forks, especially on Windows where they are\n  # unreasonably slow, so skip the feature probes when bash or zsh are\n  # being used:\n  if test set = \"${BASH_VERSION+set}${ZSH_VERSION+set}\"; then\n    : ${_G_HAVE_ARITH_OP=\"yes\"}\n    : ${_G_HAVE_XSI_OPS=\"yes\"}\n    # The += operator was introduced in bash 3.1\n    case $BASH_VERSION in\n      [12].* | 3.0 | 3.0*) ;;\n      *)\n        : ${_G_HAVE_PLUSEQ_OP=\"yes\"}\n        ;;\n    esac\n  fi\n\n  # _G_HAVE_PLUSEQ_OP\n  # Can be empty, in which case the shell is probed, \"yes\" if += is\n  # useable or anything else if it does not work.\n  test -z \"$_G_HAVE_PLUSEQ_OP\" \\\n    && (eval 'x=a; x+=\" b\"; test \"a b\" = \"$x\"') 2>/dev/null \\\n    && _G_HAVE_PLUSEQ_OP=yes\n\nif test yes = \"$_G_HAVE_PLUSEQ_OP\"\nthen\n  # This is an XSI compatible shell, allowing a faster implementation...\n  eval 'func_append ()\n  {\n    $debug_cmd\n\n    eval \"$1+=\\$2\"\n  }'\nelse\n  # ...otherwise fall back to using expr, which is often a shell builtin.\n  func_append ()\n  {\n    $debug_cmd\n\n    eval \"$1=\\$$1\\$2\"\n  }\nfi\n\n\n# func_append_quoted VAR VALUE\n# ----------------------------\n# Quote VALUE and append to the end of shell variable VAR, separated\n# by a space.\nif test yes = \"$_G_HAVE_PLUSEQ_OP\"; then\n  eval 'func_append_quoted ()\n  {\n    $debug_cmd\n\n    func_quote_for_eval \"$2\"\n    eval \"$1+=\\\\ \\$func_quote_for_eval_result\"\n  }'\nelse\n  func_append_quoted ()\n  {\n    $debug_cmd\n\n    func_quote_for_eval \"$2\"\n    eval \"$1=\\$$1\\\\ \\$func_quote_for_eval_result\"\n  }\nfi\n\n\n# func_append_uniq VAR VALUE\n# --------------------------\n# Append unique VALUE onto the existing contents of VAR, assuming\n# entries are delimited by the first character of VALUE.  For example:\n#\n#   func_append_uniq options \" --another-option option-argument\"\n#\n# will only append to $options if \" --another-option option-argument \"\n# is not already present somewhere in $options already (note spaces at\n# each end implied by leading space in second argument).\nfunc_append_uniq ()\n{\n    $debug_cmd\n\n    eval _G_current_value='`$ECHO $'$1'`'\n    _G_delim=`expr \"$2\" : '\\(.\\)'`\n\n    case $_G_delim$_G_current_value$_G_delim in\n      *\"$2$_G_delim\"*) ;;\n      *) func_append \"$@\" ;;\n    esac\n}\n\n\n# func_arith TERM...\n# ------------------\n# Set func_arith_result to the result of evaluating TERMs.\n  test -z \"$_G_HAVE_ARITH_OP\" \\\n    && (eval 'test 2 = $(( 1 + 1 ))') 2>/dev/null \\\n    && _G_HAVE_ARITH_OP=yes\n\nif test yes = \"$_G_HAVE_ARITH_OP\"; then\n  eval 'func_arith ()\n  {\n    $debug_cmd\n\n    func_arith_result=$(( $* ))\n  }'\nelse\n  func_arith ()\n  {\n    $debug_cmd\n\n    func_arith_result=`expr \"$@\"`\n  }\nfi\n\n\n# func_basename FILE\n# ------------------\n# Set func_basename_result to FILE with everything up to and including\n# the last / stripped.\nif test yes = \"$_G_HAVE_XSI_OPS\"; then\n  # If this shell supports suffix pattern removal, then use it to avoid\n  # forking. Hide the definitions single quotes in case the shell chokes\n  # on unsupported syntax...\n  _b='func_basename_result=${1##*/}'\n  _d='case $1 in\n        */*) func_dirname_result=${1%/*}$2 ;;\n        *  ) func_dirname_result=$3        ;;\n      esac'\n\nelse\n  # ...otherwise fall back to using sed.\n  _b='func_basename_result=`$ECHO \"$1\" |$SED \"$sed_basename\"`'\n  _d='func_dirname_result=`$ECHO \"$1\"  |$SED \"$sed_dirname\"`\n      if test \"X$func_dirname_result\" = \"X$1\"; then\n        func_dirname_result=$3\n      else\n        func_append func_dirname_result \"$2\"\n      fi'\nfi\n\neval 'func_basename ()\n{\n    $debug_cmd\n\n    '\"$_b\"'\n}'\n\n\n# func_dirname FILE APPEND NONDIR_REPLACEMENT\n# -------------------------------------------\n# Compute the dirname of FILE.  If nonempty, add APPEND to the result,\n# otherwise set result to NONDIR_REPLACEMENT.\neval 'func_dirname ()\n{\n    $debug_cmd\n\n    '\"$_d\"'\n}'\n\n\n# func_dirname_and_basename FILE APPEND NONDIR_REPLACEMENT\n# --------------------------------------------------------\n# Perform func_basename and func_dirname in a single function\n# call:\n#   dirname:  Compute the dirname of FILE.  If nonempty,\n#             add APPEND to the result, otherwise set result\n#             to NONDIR_REPLACEMENT.\n#             value returned in \"$func_dirname_result\"\n#   basename: Compute filename of FILE.\n#             value retuned in \"$func_basename_result\"\n# For efficiency, we do not delegate to the functions above but instead\n# duplicate the functionality here.\neval 'func_dirname_and_basename ()\n{\n    $debug_cmd\n\n    '\"$_b\"'\n    '\"$_d\"'\n}'\n\n\n# func_echo ARG...\n# ----------------\n# Echo program name prefixed message.\nfunc_echo ()\n{\n    $debug_cmd\n\n    _G_message=$*\n\n    func_echo_IFS=$IFS\n    IFS=$nl\n    for _G_line in $_G_message; do\n      IFS=$func_echo_IFS\n      $ECHO \"$progname: $_G_line\"\n    done\n    IFS=$func_echo_IFS\n}\n\n\n# func_echo_all ARG...\n# --------------------\n# Invoke $ECHO with all args, space-separated.\nfunc_echo_all ()\n{\n    $ECHO \"$*\"\n}\n\n\n# func_echo_infix_1 INFIX ARG...\n# ------------------------------\n# Echo program name, followed by INFIX on the first line, with any\n# additional lines not showing INFIX.\nfunc_echo_infix_1 ()\n{\n    $debug_cmd\n\n    $require_term_colors\n\n    _G_infix=$1; shift\n    _G_indent=$_G_infix\n    _G_prefix=\"$progname: $_G_infix: \"\n    _G_message=$*\n\n    # Strip color escape sequences before counting printable length\n    for _G_tc in \"$tc_reset\" \"$tc_bold\" \"$tc_standout\" \"$tc_red\" \"$tc_green\" \"$tc_blue\" \"$tc_cyan\"\n    do\n      test -n \"$_G_tc\" && {\n        _G_esc_tc=`$ECHO \"$_G_tc\" | $SED \"$sed_make_literal_regex\"`\n        _G_indent=`$ECHO \"$_G_indent\" | $SED \"s|$_G_esc_tc||g\"`\n      }\n    done\n    _G_indent=\"$progname: \"`echo \"$_G_indent\" | $SED 's|.| |g'`\"  \" ## exclude from sc_prohibit_nested_quotes\n\n    func_echo_infix_1_IFS=$IFS\n    IFS=$nl\n    for _G_line in $_G_message; do\n      IFS=$func_echo_infix_1_IFS\n      $ECHO \"$_G_prefix$tc_bold$_G_line$tc_reset\" >&2\n      _G_prefix=$_G_indent\n    done\n    IFS=$func_echo_infix_1_IFS\n}\n\n\n# func_error ARG...\n# -----------------\n# Echo program name prefixed message to standard error.\nfunc_error ()\n{\n    $debug_cmd\n\n    $require_term_colors\n\n    func_echo_infix_1 \"  $tc_standout${tc_red}error$tc_reset\" \"$*\" >&2\n}\n\n\n# func_fatal_error ARG...\n# -----------------------\n# Echo program name prefixed message to standard error, and exit.\nfunc_fatal_error ()\n{\n    $debug_cmd\n\n    func_error \"$*\"\n    exit $EXIT_FAILURE\n}\n\n\n# func_grep EXPRESSION FILENAME\n# -----------------------------\n# Check whether EXPRESSION matches any line of FILENAME, without output.\nfunc_grep ()\n{\n    $debug_cmd\n\n    $GREP \"$1\" \"$2\" >/dev/null 2>&1\n}\n\n\n# func_len STRING\n# ---------------\n# Set func_len_result to the length of STRING. STRING may not\n# start with a hyphen.\n  test -z \"$_G_HAVE_XSI_OPS\" \\\n    && (eval 'x=a/b/c;\n      test 5aa/bb/cc = \"${#x}${x%%/*}${x%/*}${x#*/}${x##*/}\"') 2>/dev/null \\\n    && _G_HAVE_XSI_OPS=yes\n\nif test yes = \"$_G_HAVE_XSI_OPS\"; then\n  eval 'func_len ()\n  {\n    $debug_cmd\n\n    func_len_result=${#1}\n  }'\nelse\n  func_len ()\n  {\n    $debug_cmd\n\n    func_len_result=`expr \"$1\" : \".*\" 2>/dev/null || echo $max_cmd_len`\n  }\nfi\n\n\n# func_mkdir_p DIRECTORY-PATH\n# ---------------------------\n# Make sure the entire path to DIRECTORY-PATH is available.\nfunc_mkdir_p ()\n{\n    $debug_cmd\n\n    _G_directory_path=$1\n    _G_dir_list=\n\n    if test -n \"$_G_directory_path\" && test : != \"$opt_dry_run\"; then\n\n      # Protect directory names starting with '-'\n      case $_G_directory_path in\n        -*) _G_directory_path=./$_G_directory_path ;;\n      esac\n\n      # While some portion of DIR does not yet exist...\n      while test ! -d \"$_G_directory_path\"; do\n        # ...make a list in topmost first order.  Use a colon delimited\n\t# list incase some portion of path contains whitespace.\n        _G_dir_list=$_G_directory_path:$_G_dir_list\n\n        # If the last portion added has no slash in it, the list is done\n        case $_G_directory_path in */*) ;; *) break ;; esac\n\n        # ...otherwise throw away the child directory and loop\n        _G_directory_path=`$ECHO \"$_G_directory_path\" | $SED -e \"$sed_dirname\"`\n      done\n      _G_dir_list=`$ECHO \"$_G_dir_list\" | $SED 's|:*$||'`\n\n      func_mkdir_p_IFS=$IFS; IFS=:\n      for _G_dir in $_G_dir_list; do\n\tIFS=$func_mkdir_p_IFS\n        # mkdir can fail with a 'File exist' error if two processes\n        # try to create one of the directories concurrently.  Don't\n        # stop in that case!\n        $MKDIR \"$_G_dir\" 2>/dev/null || :\n      done\n      IFS=$func_mkdir_p_IFS\n\n      # Bail out if we (or some other process) failed to create a directory.\n      test -d \"$_G_directory_path\" || \\\n        func_fatal_error \"Failed to create '$1'\"\n    fi\n}\n\n\n# func_mktempdir [BASENAME]\n# -------------------------\n# Make a temporary directory that won't clash with other running\n# libtool processes, and avoids race conditions if possible.  If\n# given, BASENAME is the basename for that directory.\nfunc_mktempdir ()\n{\n    $debug_cmd\n\n    _G_template=${TMPDIR-/tmp}/${1-$progname}\n\n    if test : = \"$opt_dry_run\"; then\n      # Return a directory name, but don't create it in dry-run mode\n      _G_tmpdir=$_G_template-$$\n    else\n\n      # If mktemp works, use that first and foremost\n      _G_tmpdir=`mktemp -d \"$_G_template-XXXXXXXX\" 2>/dev/null`\n\n      if test ! -d \"$_G_tmpdir\"; then\n        # Failing that, at least try and use $RANDOM to avoid a race\n        _G_tmpdir=$_G_template-${RANDOM-0}$$\n\n        func_mktempdir_umask=`umask`\n        umask 0077\n        $MKDIR \"$_G_tmpdir\"\n        umask $func_mktempdir_umask\n      fi\n\n      # If we're not in dry-run mode, bomb out on failure\n      test -d \"$_G_tmpdir\" || \\\n        func_fatal_error \"cannot create temporary directory '$_G_tmpdir'\"\n    fi\n\n    $ECHO \"$_G_tmpdir\"\n}\n\n\n# func_normal_abspath PATH\n# ------------------------\n# Remove doubled-up and trailing slashes, \".\" path components,\n# and cancel out any \"..\" path components in PATH after making\n# it an absolute path.\nfunc_normal_abspath ()\n{\n    $debug_cmd\n\n    # These SED scripts presuppose an absolute path with a trailing slash.\n    _G_pathcar='s|^/\\([^/]*\\).*$|\\1|'\n    _G_pathcdr='s|^/[^/]*||'\n    _G_removedotparts=':dotsl\n\t\ts|/\\./|/|g\n\t\tt dotsl\n\t\ts|/\\.$|/|'\n    _G_collapseslashes='s|/\\{1,\\}|/|g'\n    _G_finalslash='s|/*$|/|'\n\n    # Start from root dir and reassemble the path.\n    func_normal_abspath_result=\n    func_normal_abspath_tpath=$1\n    func_normal_abspath_altnamespace=\n    case $func_normal_abspath_tpath in\n      \"\")\n        # Empty path, that just means $cwd.\n        func_stripname '' '/' \"`pwd`\"\n        func_normal_abspath_result=$func_stripname_result\n        return\n        ;;\n      # The next three entries are used to spot a run of precisely\n      # two leading slashes without using negated character classes;\n      # we take advantage of case's first-match behaviour.\n      ///*)\n        # Unusual form of absolute path, do nothing.\n        ;;\n      //*)\n        # Not necessarily an ordinary path; POSIX reserves leading '//'\n        # and for example Cygwin uses it to access remote file shares\n        # over CIFS/SMB, so we conserve a leading double slash if found.\n        func_normal_abspath_altnamespace=/\n        ;;\n      /*)\n        # Absolute path, do nothing.\n        ;;\n      *)\n        # Relative path, prepend $cwd.\n        func_normal_abspath_tpath=`pwd`/$func_normal_abspath_tpath\n        ;;\n    esac\n\n    # Cancel out all the simple stuff to save iterations.  We also want\n    # the path to end with a slash for ease of parsing, so make sure\n    # there is one (and only one) here.\n    func_normal_abspath_tpath=`$ECHO \"$func_normal_abspath_tpath\" | $SED \\\n          -e \"$_G_removedotparts\" -e \"$_G_collapseslashes\" -e \"$_G_finalslash\"`\n    while :; do\n      # Processed it all yet?\n      if test / = \"$func_normal_abspath_tpath\"; then\n        # If we ascended to the root using \"..\" the result may be empty now.\n        if test -z \"$func_normal_abspath_result\"; then\n          func_normal_abspath_result=/\n        fi\n        break\n      fi\n      func_normal_abspath_tcomponent=`$ECHO \"$func_normal_abspath_tpath\" | $SED \\\n          -e \"$_G_pathcar\"`\n      func_normal_abspath_tpath=`$ECHO \"$func_normal_abspath_tpath\" | $SED \\\n          -e \"$_G_pathcdr\"`\n      # Figure out what to do with it\n      case $func_normal_abspath_tcomponent in\n        \"\")\n          # Trailing empty path component, ignore it.\n          ;;\n        ..)\n          # Parent dir; strip last assembled component from result.\n          func_dirname \"$func_normal_abspath_result\"\n          func_normal_abspath_result=$func_dirname_result\n          ;;\n        *)\n          # Actual path component, append it.\n          func_append func_normal_abspath_result \"/$func_normal_abspath_tcomponent\"\n          ;;\n      esac\n    done\n    # Restore leading double-slash if one was found on entry.\n    func_normal_abspath_result=$func_normal_abspath_altnamespace$func_normal_abspath_result\n}\n\n\n# func_notquiet ARG...\n# --------------------\n# Echo program name prefixed message only when not in quiet mode.\nfunc_notquiet ()\n{\n    $debug_cmd\n\n    $opt_quiet || func_echo ${1+\"$@\"}\n\n    # A bug in bash halts the script if the last line of a function\n    # fails when set -e is in force, so we need another command to\n    # work around that:\n    :\n}\n\n\n# func_relative_path SRCDIR DSTDIR\n# --------------------------------\n# Set func_relative_path_result to the relative path from SRCDIR to DSTDIR.\nfunc_relative_path ()\n{\n    $debug_cmd\n\n    func_relative_path_result=\n    func_normal_abspath \"$1\"\n    func_relative_path_tlibdir=$func_normal_abspath_result\n    func_normal_abspath \"$2\"\n    func_relative_path_tbindir=$func_normal_abspath_result\n\n    # Ascend the tree starting from libdir\n    while :; do\n      # check if we have found a prefix of bindir\n      case $func_relative_path_tbindir in\n        $func_relative_path_tlibdir)\n          # found an exact match\n          func_relative_path_tcancelled=\n          break\n          ;;\n        $func_relative_path_tlibdir*)\n          # found a matching prefix\n          func_stripname \"$func_relative_path_tlibdir\" '' \"$func_relative_path_tbindir\"\n          func_relative_path_tcancelled=$func_stripname_result\n          if test -z \"$func_relative_path_result\"; then\n            func_relative_path_result=.\n          fi\n          break\n          ;;\n        *)\n          func_dirname $func_relative_path_tlibdir\n          func_relative_path_tlibdir=$func_dirname_result\n          if test -z \"$func_relative_path_tlibdir\"; then\n            # Have to descend all the way to the root!\n            func_relative_path_result=../$func_relative_path_result\n            func_relative_path_tcancelled=$func_relative_path_tbindir\n            break\n          fi\n          func_relative_path_result=../$func_relative_path_result\n          ;;\n      esac\n    done\n\n    # Now calculate path; take care to avoid doubling-up slashes.\n    func_stripname '' '/' \"$func_relative_path_result\"\n    func_relative_path_result=$func_stripname_result\n    func_stripname '/' '/' \"$func_relative_path_tcancelled\"\n    if test -n \"$func_stripname_result\"; then\n      func_append func_relative_path_result \"/$func_stripname_result\"\n    fi\n\n    # Normalisation. If bindir is libdir, return '.' else relative path.\n    if test -n \"$func_relative_path_result\"; then\n      func_stripname './' '' \"$func_relative_path_result\"\n      func_relative_path_result=$func_stripname_result\n    fi\n\n    test -n \"$func_relative_path_result\" || func_relative_path_result=.\n\n    :\n}\n\n\n# func_quote_for_eval ARG...\n# --------------------------\n# Aesthetically quote ARGs to be evaled later.\n# This function returns two values:\n#   i) func_quote_for_eval_result\n#      double-quoted, suitable for a subsequent eval\n#  ii) func_quote_for_eval_unquoted_result\n#      has all characters that are still active within double\n#      quotes backslashified.\nfunc_quote_for_eval ()\n{\n    $debug_cmd\n\n    func_quote_for_eval_unquoted_result=\n    func_quote_for_eval_result=\n    while test 0 -lt $#; do\n      case $1 in\n        *[\\\\\\`\\\"\\$]*)\n\t  _G_unquoted_arg=`printf '%s\\n' \"$1\" |$SED \"$sed_quote_subst\"` ;;\n        *)\n          _G_unquoted_arg=$1 ;;\n      esac\n      if test -n \"$func_quote_for_eval_unquoted_result\"; then\n\tfunc_append func_quote_for_eval_unquoted_result \" $_G_unquoted_arg\"\n      else\n        func_append func_quote_for_eval_unquoted_result \"$_G_unquoted_arg\"\n      fi\n\n      case $_G_unquoted_arg in\n        # Double-quote args containing shell metacharacters to delay\n        # word splitting, command substitution and variable expansion\n        # for a subsequent eval.\n        # Many Bourne shells cannot handle close brackets correctly\n        # in scan sets, so we specify it separately.\n        *[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t]*|*]*|\"\")\n          _G_quoted_arg=\\\"$_G_unquoted_arg\\\"\n          ;;\n        *)\n          _G_quoted_arg=$_G_unquoted_arg\n\t  ;;\n      esac\n\n      if test -n \"$func_quote_for_eval_result\"; then\n\tfunc_append func_quote_for_eval_result \" $_G_quoted_arg\"\n      else\n        func_append func_quote_for_eval_result \"$_G_quoted_arg\"\n      fi\n      shift\n    done\n}\n\n\n# func_quote_for_expand ARG\n# -------------------------\n# Aesthetically quote ARG to be evaled later; same as above,\n# but do not quote variable references.\nfunc_quote_for_expand ()\n{\n    $debug_cmd\n\n    case $1 in\n      *[\\\\\\`\\\"]*)\n\t_G_arg=`$ECHO \"$1\" | $SED \\\n\t    -e \"$sed_double_quote_subst\" -e \"$sed_double_backslash\"` ;;\n      *)\n        _G_arg=$1 ;;\n    esac\n\n    case $_G_arg in\n      # Double-quote args containing shell metacharacters to delay\n      # word splitting and command substitution for a subsequent eval.\n      # Many Bourne shells cannot handle close brackets correctly\n      # in scan sets, so we specify it separately.\n      *[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t]*|*]*|\"\")\n        _G_arg=\\\"$_G_arg\\\"\n        ;;\n    esac\n\n    func_quote_for_expand_result=$_G_arg\n}\n\n\n# func_stripname PREFIX SUFFIX NAME\n# ---------------------------------\n# strip PREFIX and SUFFIX from NAME, and store in func_stripname_result.\n# PREFIX and SUFFIX must not contain globbing or regex special\n# characters, hashes, percent signs, but SUFFIX may contain a leading\n# dot (in which case that matches only a dot).\nif test yes = \"$_G_HAVE_XSI_OPS\"; then\n  eval 'func_stripname ()\n  {\n    $debug_cmd\n\n    # pdksh 5.2.14 does not do ${X%$Y} correctly if both X and Y are\n    # positional parameters, so assign one to ordinary variable first.\n    func_stripname_result=$3\n    func_stripname_result=${func_stripname_result#\"$1\"}\n    func_stripname_result=${func_stripname_result%\"$2\"}\n  }'\nelse\n  func_stripname ()\n  {\n    $debug_cmd\n\n    case $2 in\n      .*) func_stripname_result=`$ECHO \"$3\" | $SED -e \"s%^$1%%\" -e \"s%\\\\\\\\$2\\$%%\"`;;\n      *)  func_stripname_result=`$ECHO \"$3\" | $SED -e \"s%^$1%%\" -e \"s%$2\\$%%\"`;;\n    esac\n  }\nfi\n\n\n# func_show_eval CMD [FAIL_EXP]\n# -----------------------------\n# Unless opt_quiet is true, then output CMD.  Then, if opt_dryrun is\n# not true, evaluate CMD.  If the evaluation of CMD fails, and FAIL_EXP\n# is given, then evaluate it.\nfunc_show_eval ()\n{\n    $debug_cmd\n\n    _G_cmd=$1\n    _G_fail_exp=${2-':'}\n\n    func_quote_for_expand \"$_G_cmd\"\n    eval \"func_notquiet $func_quote_for_expand_result\"\n\n    $opt_dry_run || {\n      eval \"$_G_cmd\"\n      _G_status=$?\n      if test 0 -ne \"$_G_status\"; then\n\teval \"(exit $_G_status); $_G_fail_exp\"\n      fi\n    }\n}\n\n\n# func_show_eval_locale CMD [FAIL_EXP]\n# ------------------------------------\n# Unless opt_quiet is true, then output CMD.  Then, if opt_dryrun is\n# not true, evaluate CMD.  If the evaluation of CMD fails, and FAIL_EXP\n# is given, then evaluate it.  Use the saved locale for evaluation.\nfunc_show_eval_locale ()\n{\n    $debug_cmd\n\n    _G_cmd=$1\n    _G_fail_exp=${2-':'}\n\n    $opt_quiet || {\n      func_quote_for_expand \"$_G_cmd\"\n      eval \"func_echo $func_quote_for_expand_result\"\n    }\n\n    $opt_dry_run || {\n      eval \"$_G_user_locale\n\t    $_G_cmd\"\n      _G_status=$?\n      eval \"$_G_safe_locale\"\n      if test 0 -ne \"$_G_status\"; then\n\teval \"(exit $_G_status); $_G_fail_exp\"\n      fi\n    }\n}\n\n\n# func_tr_sh\n# ----------\n# Turn $1 into a string suitable for a shell variable name.\n# Result is stored in $func_tr_sh_result.  All characters\n# not in the set a-zA-Z0-9_ are replaced with '_'. Further,\n# if $1 begins with a digit, a '_' is prepended as well.\nfunc_tr_sh ()\n{\n    $debug_cmd\n\n    case $1 in\n    [0-9]* | *[!a-zA-Z0-9_]*)\n      func_tr_sh_result=`$ECHO \"$1\" | $SED -e 's/^\\([0-9]\\)/_\\1/' -e 's/[^a-zA-Z0-9_]/_/g'`\n      ;;\n    * )\n      func_tr_sh_result=$1\n      ;;\n    esac\n}\n\n\n# func_verbose ARG...\n# -------------------\n# Echo program name prefixed message in verbose mode only.\nfunc_verbose ()\n{\n    $debug_cmd\n\n    $opt_verbose && func_echo \"$*\"\n\n    :\n}\n\n\n# func_warn_and_continue ARG...\n# -----------------------------\n# Echo program name prefixed warning message to standard error.\nfunc_warn_and_continue ()\n{\n    $debug_cmd\n\n    $require_term_colors\n\n    func_echo_infix_1 \"${tc_red}warning$tc_reset\" \"$*\" >&2\n}\n\n\n# func_warning CATEGORY ARG...\n# ----------------------------\n# Echo program name prefixed warning message to standard error. Warning\n# messages can be filtered according to CATEGORY, where this function\n# elides messages where CATEGORY is not listed in the global variable\n# 'opt_warning_types'.\nfunc_warning ()\n{\n    $debug_cmd\n\n    # CATEGORY must be in the warning_categories list!\n    case \" $warning_categories \" in\n      *\" $1 \"*) ;;\n      *) func_internal_error \"invalid warning category '$1'\" ;;\n    esac\n\n    _G_category=$1\n    shift\n\n    case \" $opt_warning_types \" in\n      *\" $_G_category \"*) $warning_func ${1+\"$@\"} ;;\n    esac\n}\n\n\n# func_sort_ver VER1 VER2\n# -----------------------\n# 'sort -V' is not generally available.\n# Note this deviates from the version comparison in automake\n# in that it treats 1.5 < 1.5.0, and treats 1.4.4a < 1.4-p3a\n# but this should suffice as we won't be specifying old\n# version formats or redundant trailing .0 in bootstrap.conf.\n# If we did want full compatibility then we should probably\n# use m4_version_compare from autoconf.\nfunc_sort_ver ()\n{\n    $debug_cmd\n\n    printf '%s\\n%s\\n' \"$1\" \"$2\" \\\n      | sort -t. -k 1,1n -k 2,2n -k 3,3n -k 4,4n -k 5,5n -k 6,6n -k 7,7n -k 8,8n -k 9,9n\n}\n\n# func_lt_ver PREV CURR\n# ---------------------\n# Return true if PREV and CURR are in the correct order according to\n# func_sort_ver, otherwise false.  Use it like this:\n#\n#  func_lt_ver \"$prev_ver\" \"$proposed_ver\" || func_fatal_error \"...\"\nfunc_lt_ver ()\n{\n    $debug_cmd\n\n    test \"x$1\" = x`func_sort_ver \"$1\" \"$2\" | $SED 1q`\n}\n\n\n# Local variables:\n# mode: shell-script\n# sh-indentation: 2\n# eval: (add-hook 'before-save-hook 'time-stamp)\n# time-stamp-pattern: \"10/scriptversion=%:y-%02m-%02d.%02H; # UTC\"\n# time-stamp-time-zone: \"UTC\"\n# End:\n#! /bin/sh\n\n# Set a version string for this script.\nscriptversion=2014-01-07.03; # UTC\n\n# A portable, pluggable option parser for Bourne shell.\n# Written by Gary V. Vaughan, 2010\n\n# Copyright (C) 2010-2015 Free Software Foundation, Inc.\n# This is free software; see the source for copying conditions.  There is NO\n# warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n# Please report bugs or propose patches to gary@gnu.org.\n\n\n## ------ ##\n## Usage. ##\n## ------ ##\n\n# This file is a library for parsing options in your shell scripts along\n# with assorted other useful supporting features that you can make use\n# of too.\n#\n# For the simplest scripts you might need only:\n#\n#   #!/bin/sh\n#   . relative/path/to/funclib.sh\n#   . relative/path/to/options-parser\n#   scriptversion=1.0\n#   func_options ${1+\"$@\"}\n#   eval set dummy \"$func_options_result\"; shift\n#   ...rest of your script...\n#\n# In order for the '--version' option to work, you will need to have a\n# suitably formatted comment like the one at the top of this file\n# starting with '# Written by ' and ending with '# warranty; '.\n#\n# For '-h' and '--help' to work, you will also need a one line\n# description of your script's purpose in a comment directly above the\n# '# Written by ' line, like the one at the top of this file.\n#\n# The default options also support '--debug', which will turn on shell\n# execution tracing (see the comment above debug_cmd below for another\n# use), and '--verbose' and the func_verbose function to allow your script\n# to display verbose messages only when your user has specified\n# '--verbose'.\n#\n# After sourcing this file, you can plug processing for additional\n# options by amending the variables from the 'Configuration' section\n# below, and following the instructions in the 'Option parsing'\n# section further down.\n\n## -------------- ##\n## Configuration. ##\n## -------------- ##\n\n# You should override these variables in your script after sourcing this\n# file so that they reflect the customisations you have added to the\n# option parser.\n\n# The usage line for option parsing errors and the start of '-h' and\n# '--help' output messages. You can embed shell variables for delayed\n# expansion at the time the message is displayed, but you will need to\n# quote other shell meta-characters carefully to prevent them being\n# expanded when the contents are evaled.\nusage='$progpath [OPTION]...'\n\n# Short help message in response to '-h' and '--help'.  Add to this or\n# override it after sourcing this library to reflect the full set of\n# options your script accepts.\nusage_message=\"\\\n       --debug        enable verbose shell tracing\n   -W, --warnings=CATEGORY\n                      report the warnings falling in CATEGORY [all]\n   -v, --verbose      verbosely report processing\n       --version      print version information and exit\n   -h, --help         print short or long help message and exit\n\"\n\n# Additional text appended to 'usage_message' in response to '--help'.\nlong_help_message=\"\nWarning categories include:\n       'all'          show all warnings\n       'none'         turn off all the warnings\n       'error'        warnings are treated as fatal errors\"\n\n# Help message printed before fatal option parsing errors.\nfatal_help=\"Try '\\$progname --help' for more information.\"\n\n\n\n## ------------------------- ##\n## Hook function management. ##\n## ------------------------- ##\n\n# This section contains functions for adding, removing, and running hooks\n# to the main code.  A hook is just a named list of of function, that can\n# be run in order later on.\n\n# func_hookable FUNC_NAME\n# -----------------------\n# Declare that FUNC_NAME will run hooks added with\n# 'func_add_hook FUNC_NAME ...'.\nfunc_hookable ()\n{\n    $debug_cmd\n\n    func_append hookable_fns \" $1\"\n}\n\n\n# func_add_hook FUNC_NAME HOOK_FUNC\n# ---------------------------------\n# Request that FUNC_NAME call HOOK_FUNC before it returns.  FUNC_NAME must\n# first have been declared \"hookable\" by a call to 'func_hookable'.\nfunc_add_hook ()\n{\n    $debug_cmd\n\n    case \" $hookable_fns \" in\n      *\" $1 \"*) ;;\n      *) func_fatal_error \"'$1' does not accept hook functions.\" ;;\n    esac\n\n    eval func_append ${1}_hooks '\" $2\"'\n}\n\n\n# func_remove_hook FUNC_NAME HOOK_FUNC\n# ------------------------------------\n# Remove HOOK_FUNC from the list of functions called by FUNC_NAME.\nfunc_remove_hook ()\n{\n    $debug_cmd\n\n    eval ${1}_hooks='`$ECHO \"\\$'$1'_hooks\" |$SED \"s| '$2'||\"`'\n}\n\n\n# func_run_hooks FUNC_NAME [ARG]...\n# ---------------------------------\n# Run all hook functions registered to FUNC_NAME.\n# It is assumed that the list of hook functions contains nothing more\n# than a whitespace-delimited list of legal shell function names, and\n# no effort is wasted trying to catch shell meta-characters or preserve\n# whitespace.\nfunc_run_hooks ()\n{\n    $debug_cmd\n\n    case \" $hookable_fns \" in\n      *\" $1 \"*) ;;\n      *) func_fatal_error \"'$1' does not support hook funcions.n\" ;;\n    esac\n\n    eval _G_hook_fns=\\$$1_hooks; shift\n\n    for _G_hook in $_G_hook_fns; do\n      eval $_G_hook '\"$@\"'\n\n      # store returned options list back into positional\n      # parameters for next 'cmd' execution.\n      eval _G_hook_result=\\$${_G_hook}_result\n      eval set dummy \"$_G_hook_result\"; shift\n    done\n\n    func_quote_for_eval ${1+\"$@\"}\n    func_run_hooks_result=$func_quote_for_eval_result\n}\n\n\n\n## --------------- ##\n## Option parsing. ##\n## --------------- ##\n\n# In order to add your own option parsing hooks, you must accept the\n# full positional parameter list in your hook function, remove any\n# options that you action, and then pass back the remaining unprocessed\n# options in '<hooked_function_name>_result', escaped suitably for\n# 'eval'.  Like this:\n#\n#    my_options_prep ()\n#    {\n#        $debug_cmd\n#\n#        # Extend the existing usage message.\n#        usage_message=$usage_message'\n#      -s, --silent       don'\\''t print informational messages\n#    '\n#\n#        func_quote_for_eval ${1+\"$@\"}\n#        my_options_prep_result=$func_quote_for_eval_result\n#    }\n#    func_add_hook func_options_prep my_options_prep\n#\n#\n#    my_silent_option ()\n#    {\n#        $debug_cmd\n#\n#        # Note that for efficiency, we parse as many options as we can\n#        # recognise in a loop before passing the remainder back to the\n#        # caller on the first unrecognised argument we encounter.\n#        while test $# -gt 0; do\n#          opt=$1; shift\n#          case $opt in\n#            --silent|-s) opt_silent=: ;;\n#            # Separate non-argument short options:\n#            -s*)         func_split_short_opt \"$_G_opt\"\n#                         set dummy \"$func_split_short_opt_name\" \\\n#                             \"-$func_split_short_opt_arg\" ${1+\"$@\"}\n#                         shift\n#                         ;;\n#            *)            set dummy \"$_G_opt\" \"$*\"; shift; break ;;\n#          esac\n#        done\n#\n#        func_quote_for_eval ${1+\"$@\"}\n#        my_silent_option_result=$func_quote_for_eval_result\n#    }\n#    func_add_hook func_parse_options my_silent_option\n#\n#\n#    my_option_validation ()\n#    {\n#        $debug_cmd\n#\n#        $opt_silent && $opt_verbose && func_fatal_help \"\\\n#    '--silent' and '--verbose' options are mutually exclusive.\"\n#\n#        func_quote_for_eval ${1+\"$@\"}\n#        my_option_validation_result=$func_quote_for_eval_result\n#    }\n#    func_add_hook func_validate_options my_option_validation\n#\n# You'll alse need to manually amend $usage_message to reflect the extra\n# options you parse.  It's preferable to append if you can, so that\n# multiple option parsing hooks can be added safely.\n\n\n# func_options [ARG]...\n# ---------------------\n# All the functions called inside func_options are hookable. See the\n# individual implementations for details.\nfunc_hookable func_options\nfunc_options ()\n{\n    $debug_cmd\n\n    func_options_prep ${1+\"$@\"}\n    eval func_parse_options \\\n        ${func_options_prep_result+\"$func_options_prep_result\"}\n    eval func_validate_options \\\n        ${func_parse_options_result+\"$func_parse_options_result\"}\n\n    eval func_run_hooks func_options \\\n        ${func_validate_options_result+\"$func_validate_options_result\"}\n\n    # save modified positional parameters for caller\n    func_options_result=$func_run_hooks_result\n}\n\n\n# func_options_prep [ARG]...\n# --------------------------\n# All initialisations required before starting the option parse loop.\n# Note that when calling hook functions, we pass through the list of\n# positional parameters.  If a hook function modifies that list, and\n# needs to propogate that back to rest of this script, then the complete\n# modified list must be put in 'func_run_hooks_result' before\n# returning.\nfunc_hookable func_options_prep\nfunc_options_prep ()\n{\n    $debug_cmd\n\n    # Option defaults:\n    opt_verbose=false\n    opt_warning_types=\n\n    func_run_hooks func_options_prep ${1+\"$@\"}\n\n    # save modified positional parameters for caller\n    func_options_prep_result=$func_run_hooks_result\n}\n\n\n# func_parse_options [ARG]...\n# ---------------------------\n# The main option parsing loop.\nfunc_hookable func_parse_options\nfunc_parse_options ()\n{\n    $debug_cmd\n\n    func_parse_options_result=\n\n    # this just eases exit handling\n    while test $# -gt 0; do\n      # Defer to hook functions for initial option parsing, so they\n      # get priority in the event of reusing an option name.\n      func_run_hooks func_parse_options ${1+\"$@\"}\n\n      # Adjust func_parse_options positional parameters to match\n      eval set dummy \"$func_run_hooks_result\"; shift\n\n      # Break out of the loop if we already parsed every option.\n      test $# -gt 0 || break\n\n      _G_opt=$1\n      shift\n      case $_G_opt in\n        --debug|-x)   debug_cmd='set -x'\n                      func_echo \"enabling shell trace mode\"\n                      $debug_cmd\n                      ;;\n\n        --no-warnings|--no-warning|--no-warn)\n                      set dummy --warnings none ${1+\"$@\"}\n                      shift\n\t\t      ;;\n\n        --warnings|--warning|-W)\n                      test $# = 0 && func_missing_arg $_G_opt && break\n                      case \" $warning_categories $1\" in\n                        *\" $1 \"*)\n                          # trailing space prevents matching last $1 above\n                          func_append_uniq opt_warning_types \" $1\"\n                          ;;\n                        *all)\n                          opt_warning_types=$warning_categories\n                          ;;\n                        *none)\n                          opt_warning_types=none\n                          warning_func=:\n                          ;;\n                        *error)\n                          opt_warning_types=$warning_categories\n                          warning_func=func_fatal_error\n                          ;;\n                        *)\n                          func_fatal_error \\\n                             \"unsupported warning category: '$1'\"\n                          ;;\n                      esac\n                      shift\n                      ;;\n\n        --verbose|-v) opt_verbose=: ;;\n        --version)    func_version ;;\n        -\\?|-h)       func_usage ;;\n        --help)       func_help ;;\n\n\t# Separate optargs to long options (plugins may need this):\n\t--*=*)        func_split_equals \"$_G_opt\"\n\t              set dummy \"$func_split_equals_lhs\" \\\n                          \"$func_split_equals_rhs\" ${1+\"$@\"}\n                      shift\n                      ;;\n\n       # Separate optargs to short options:\n        -W*)\n                      func_split_short_opt \"$_G_opt\"\n                      set dummy \"$func_split_short_opt_name\" \\\n                          \"$func_split_short_opt_arg\" ${1+\"$@\"}\n                      shift\n                      ;;\n\n        # Separate non-argument short options:\n        -\\?*|-h*|-v*|-x*)\n                      func_split_short_opt \"$_G_opt\"\n                      set dummy \"$func_split_short_opt_name\" \\\n                          \"-$func_split_short_opt_arg\" ${1+\"$@\"}\n                      shift\n                      ;;\n\n        --)           break ;;\n        -*)           func_fatal_help \"unrecognised option: '$_G_opt'\" ;;\n        *)            set dummy \"$_G_opt\" ${1+\"$@\"}; shift; break ;;\n      esac\n    done\n\n    # save modified positional parameters for caller\n    func_quote_for_eval ${1+\"$@\"}\n    func_parse_options_result=$func_quote_for_eval_result\n}\n\n\n# func_validate_options [ARG]...\n# ------------------------------\n# Perform any sanity checks on option settings and/or unconsumed\n# arguments.\nfunc_hookable func_validate_options\nfunc_validate_options ()\n{\n    $debug_cmd\n\n    # Display all warnings if -W was not given.\n    test -n \"$opt_warning_types\" || opt_warning_types=\" $warning_categories\"\n\n    func_run_hooks func_validate_options ${1+\"$@\"}\n\n    # Bail if the options were screwed!\n    $exit_cmd $EXIT_FAILURE\n\n    # save modified positional parameters for caller\n    func_validate_options_result=$func_run_hooks_result\n}\n\n\n\n## ----------------- ##\n## Helper functions. ##\n## ----------------- ##\n\n# This section contains the helper functions used by the rest of the\n# hookable option parser framework in ascii-betical order.\n\n\n# func_fatal_help ARG...\n# ----------------------\n# Echo program name prefixed message to standard error, followed by\n# a help hint, and exit.\nfunc_fatal_help ()\n{\n    $debug_cmd\n\n    eval \\$ECHO \\\"\"Usage: $usage\"\\\"\n    eval \\$ECHO \\\"\"$fatal_help\"\\\"\n    func_error ${1+\"$@\"}\n    exit $EXIT_FAILURE\n}\n\n\n# func_help\n# ---------\n# Echo long help message to standard output and exit.\nfunc_help ()\n{\n    $debug_cmd\n\n    func_usage_message\n    $ECHO \"$long_help_message\"\n    exit 0\n}\n\n\n# func_missing_arg ARGNAME\n# ------------------------\n# Echo program name prefixed message to standard error and set global\n# exit_cmd.\nfunc_missing_arg ()\n{\n    $debug_cmd\n\n    func_error \"Missing argument for '$1'.\"\n    exit_cmd=exit\n}\n\n\n# func_split_equals STRING\n# ------------------------\n# Set func_split_equals_lhs and func_split_equals_rhs shell variables after\n# splitting STRING at the '=' sign.\ntest -z \"$_G_HAVE_XSI_OPS\" \\\n    && (eval 'x=a/b/c;\n      test 5aa/bb/cc = \"${#x}${x%%/*}${x%/*}${x#*/}${x##*/}\"') 2>/dev/null \\\n    && _G_HAVE_XSI_OPS=yes\n\nif test yes = \"$_G_HAVE_XSI_OPS\"\nthen\n  # This is an XSI compatible shell, allowing a faster implementation...\n  eval 'func_split_equals ()\n  {\n      $debug_cmd\n\n      func_split_equals_lhs=${1%%=*}\n      func_split_equals_rhs=${1#*=}\n      test \"x$func_split_equals_lhs\" = \"x$1\" \\\n        && func_split_equals_rhs=\n  }'\nelse\n  # ...otherwise fall back to using expr, which is often a shell builtin.\n  func_split_equals ()\n  {\n      $debug_cmd\n\n      func_split_equals_lhs=`expr \"x$1\" : 'x\\([^=]*\\)'`\n      func_split_equals_rhs=\n      test \"x$func_split_equals_lhs\" = \"x$1\" \\\n        || func_split_equals_rhs=`expr \"x$1\" : 'x[^=]*=\\(.*\\)$'`\n  }\nfi #func_split_equals\n\n\n# func_split_short_opt SHORTOPT\n# -----------------------------\n# Set func_split_short_opt_name and func_split_short_opt_arg shell\n# variables after splitting SHORTOPT after the 2nd character.\nif test yes = \"$_G_HAVE_XSI_OPS\"\nthen\n  # This is an XSI compatible shell, allowing a faster implementation...\n  eval 'func_split_short_opt ()\n  {\n      $debug_cmd\n\n      func_split_short_opt_arg=${1#??}\n      func_split_short_opt_name=${1%\"$func_split_short_opt_arg\"}\n  }'\nelse\n  # ...otherwise fall back to using expr, which is often a shell builtin.\n  func_split_short_opt ()\n  {\n      $debug_cmd\n\n      func_split_short_opt_name=`expr \"x$1\" : 'x-\\(.\\)'`\n      func_split_short_opt_arg=`expr \"x$1\" : 'x-.\\(.*\\)$'`\n  }\nfi #func_split_short_opt\n\n\n# func_usage\n# ----------\n# Echo short help message to standard output and exit.\nfunc_usage ()\n{\n    $debug_cmd\n\n    func_usage_message\n    $ECHO \"Run '$progname --help |${PAGER-more}' for full usage\"\n    exit 0\n}\n\n\n# func_usage_message\n# ------------------\n# Echo short help message to standard output.\nfunc_usage_message ()\n{\n    $debug_cmd\n\n    eval \\$ECHO \\\"\"Usage: $usage\"\\\"\n    echo\n    $SED -n 's|^# ||\n        /^Written by/{\n          x;p;x\n        }\n\th\n\t/^Written by/q' < \"$progpath\"\n    echo\n    eval \\$ECHO \\\"\"$usage_message\"\\\"\n}\n\n\n# func_version\n# ------------\n# Echo version message to standard output and exit.\nfunc_version ()\n{\n    $debug_cmd\n\n    printf '%s\\n' \"$progname $scriptversion\"\n    $SED -n '\n        /(C)/!b go\n        :more\n        /\\./!{\n          N\n          s|\\n# | |\n          b more\n        }\n        :go\n        /^# Written by /,/# warranty; / {\n          s|^# ||\n          s|^# *$||\n          s|\\((C)\\)[ 0-9,-]*[ ,-]\\([1-9][0-9]* \\)|\\1 \\2|\n          p\n        }\n        /^# Written by / {\n          s|^# ||\n          p\n        }\n        /^warranty; /q' < \"$progpath\"\n\n    exit $?\n}\n\n\n# Local variables:\n# mode: shell-script\n# sh-indentation: 2\n# eval: (add-hook 'before-save-hook 'time-stamp)\n# time-stamp-pattern: \"10/scriptversion=%:y-%02m-%02d.%02H; # UTC\"\n# time-stamp-time-zone: \"UTC\"\n# End:\n\n# Set a version string.\nscriptversion='(GNU libtool) 2.4.6'\n\n\n# func_echo ARG...\n# ----------------\n# Libtool also displays the current mode in messages, so override\n# funclib.sh func_echo with this custom definition.\nfunc_echo ()\n{\n    $debug_cmd\n\n    _G_message=$*\n\n    func_echo_IFS=$IFS\n    IFS=$nl\n    for _G_line in $_G_message; do\n      IFS=$func_echo_IFS\n      $ECHO \"$progname${opt_mode+: $opt_mode}: $_G_line\"\n    done\n    IFS=$func_echo_IFS\n}\n\n\n# func_warning ARG...\n# -------------------\n# Libtool warnings are not categorized, so override funclib.sh\n# func_warning with this simpler definition.\nfunc_warning ()\n{\n    $debug_cmd\n\n    $warning_func ${1+\"$@\"}\n}\n\n\n## ---------------- ##\n## Options parsing. ##\n## ---------------- ##\n\n# Hook in the functions to make sure our own options are parsed during\n# the option parsing loop.\n\nusage='$progpath [OPTION]... [MODE-ARG]...'\n\n# Short help message in response to '-h'.\nusage_message=\"Options:\n       --config             show all configuration variables\n       --debug              enable verbose shell tracing\n   -n, --dry-run            display commands without modifying any files\n       --features           display basic configuration information and exit\n       --mode=MODE          use operation mode MODE\n       --no-warnings        equivalent to '-Wnone'\n       --preserve-dup-deps  don't remove duplicate dependency libraries\n       --quiet, --silent    don't print informational messages\n       --tag=TAG            use configuration variables from tag TAG\n   -v, --verbose            print more informational messages than default\n       --version            print version information\n   -W, --warnings=CATEGORY  report the warnings falling in CATEGORY [all]\n   -h, --help, --help-all   print short, long, or detailed help message\n\"\n\n# Additional text appended to 'usage_message' in response to '--help'.\nfunc_help ()\n{\n    $debug_cmd\n\n    func_usage_message\n    $ECHO \"$long_help_message\n\nMODE must be one of the following:\n\n       clean           remove files from the build directory\n       compile         compile a source file into a libtool object\n       execute         automatically set library path, then run a program\n       finish          complete the installation of libtool libraries\n       install         install libraries or executables\n       link            create a library or an executable\n       uninstall       remove libraries from an installed directory\n\nMODE-ARGS vary depending on the MODE.  When passed as first option,\n'--mode=MODE' may be abbreviated as 'MODE' or a unique abbreviation of that.\nTry '$progname --help --mode=MODE' for a more detailed description of MODE.\n\nWhen reporting a bug, please describe a test case to reproduce it and\ninclude the following information:\n\n       host-triplet:   $host\n       shell:          $SHELL\n       compiler:       $LTCC\n       compiler flags: $LTCFLAGS\n       linker:         $LD (gnu? $with_gnu_ld)\n       version:        $progname (GNU libtool) 2.4.6\n       automake:       `($AUTOMAKE --version) 2>/dev/null |$SED 1q`\n       autoconf:       `($AUTOCONF --version) 2>/dev/null |$SED 1q`\n\nReport bugs to <bug-libtool@gnu.org>.\nGNU libtool home page: <http://www.gnu.org/software/libtool/>.\nGeneral help using GNU software: <http://www.gnu.org/gethelp/>.\"\n    exit 0\n}\n\n\n# func_lo2o OBJECT-NAME\n# ---------------------\n# Transform OBJECT-NAME from a '.lo' suffix to the platform specific\n# object suffix.\n\nlo2o=s/\\\\.lo\\$/.$objext/\no2lo=s/\\\\.$objext\\$/.lo/\n\nif test yes = \"$_G_HAVE_XSI_OPS\"; then\n  eval 'func_lo2o ()\n  {\n    case $1 in\n      *.lo) func_lo2o_result=${1%.lo}.$objext ;;\n      *   ) func_lo2o_result=$1               ;;\n    esac\n  }'\n\n  # func_xform LIBOBJ-OR-SOURCE\n  # ---------------------------\n  # Transform LIBOBJ-OR-SOURCE from a '.o' or '.c' (or otherwise)\n  # suffix to a '.lo' libtool-object suffix.\n  eval 'func_xform ()\n  {\n    func_xform_result=${1%.*}.lo\n  }'\nelse\n  # ...otherwise fall back to using sed.\n  func_lo2o ()\n  {\n    func_lo2o_result=`$ECHO \"$1\" | $SED \"$lo2o\"`\n  }\n\n  func_xform ()\n  {\n    func_xform_result=`$ECHO \"$1\" | $SED 's|\\.[^.]*$|.lo|'`\n  }\nfi\n\n\n# func_fatal_configuration ARG...\n# -------------------------------\n# Echo program name prefixed message to standard error, followed by\n# a configuration failure hint, and exit.\nfunc_fatal_configuration ()\n{\n    func__fatal_error ${1+\"$@\"} \\\n      \"See the $PACKAGE documentation for more information.\" \\\n      \"Fatal configuration error.\"\n}\n\n\n# func_config\n# -----------\n# Display the configuration for all the tags in this script.\nfunc_config ()\n{\n    re_begincf='^# ### BEGIN LIBTOOL'\n    re_endcf='^# ### END LIBTOOL'\n\n    # Default configuration.\n    $SED \"1,/$re_begincf CONFIG/d;/$re_endcf CONFIG/,\\$d\" < \"$progpath\"\n\n    # Now print the configurations for the tags.\n    for tagname in $taglist; do\n      $SED -n \"/$re_begincf TAG CONFIG: $tagname\\$/,/$re_endcf TAG CONFIG: $tagname\\$/p\" < \"$progpath\"\n    done\n\n    exit $?\n}\n\n\n# func_features\n# -------------\n# Display the features supported by this script.\nfunc_features ()\n{\n    echo \"host: $host\"\n    if test yes = \"$build_libtool_libs\"; then\n      echo \"enable shared libraries\"\n    else\n      echo \"disable shared libraries\"\n    fi\n    if test yes = \"$build_old_libs\"; then\n      echo \"enable static libraries\"\n    else\n      echo \"disable static libraries\"\n    fi\n\n    exit $?\n}\n\n\n# func_enable_tag TAGNAME\n# -----------------------\n# Verify that TAGNAME is valid, and either flag an error and exit, or\n# enable the TAGNAME tag.  We also add TAGNAME to the global $taglist\n# variable here.\nfunc_enable_tag ()\n{\n    # Global variable:\n    tagname=$1\n\n    re_begincf=\"^# ### BEGIN LIBTOOL TAG CONFIG: $tagname\\$\"\n    re_endcf=\"^# ### END LIBTOOL TAG CONFIG: $tagname\\$\"\n    sed_extractcf=/$re_begincf/,/$re_endcf/p\n\n    # Validate tagname.\n    case $tagname in\n      *[!-_A-Za-z0-9,/]*)\n        func_fatal_error \"invalid tag name: $tagname\"\n        ;;\n    esac\n\n    # Don't test for the \"default\" C tag, as we know it's\n    # there but not specially marked.\n    case $tagname in\n        CC) ;;\n    *)\n        if $GREP \"$re_begincf\" \"$progpath\" >/dev/null 2>&1; then\n\t  taglist=\"$taglist $tagname\"\n\n\t  # Evaluate the configuration.  Be careful to quote the path\n\t  # and the sed script, to avoid splitting on whitespace, but\n\t  # also don't use non-portable quotes within backquotes within\n\t  # quotes we have to do it in 2 steps:\n\t  extractedcf=`$SED -n -e \"$sed_extractcf\" < \"$progpath\"`\n\t  eval \"$extractedcf\"\n        else\n\t  func_error \"ignoring unknown tag $tagname\"\n        fi\n        ;;\n    esac\n}\n\n\n# func_check_version_match\n# ------------------------\n# Ensure that we are using m4 macros, and libtool script from the same\n# release of libtool.\nfunc_check_version_match ()\n{\n    if test \"$package_revision\" != \"$macro_revision\"; then\n      if test \"$VERSION\" != \"$macro_version\"; then\n        if test -z \"$macro_version\"; then\n          cat >&2 <<_LT_EOF\n$progname: Version mismatch error.  This is $PACKAGE $VERSION, but the\n$progname: definition of this LT_INIT comes from an older release.\n$progname: You should recreate aclocal.m4 with macros from $PACKAGE $VERSION\n$progname: and run autoconf again.\n_LT_EOF\n        else\n          cat >&2 <<_LT_EOF\n$progname: Version mismatch error.  This is $PACKAGE $VERSION, but the\n$progname: definition of this LT_INIT comes from $PACKAGE $macro_version.\n$progname: You should recreate aclocal.m4 with macros from $PACKAGE $VERSION\n$progname: and run autoconf again.\n_LT_EOF\n        fi\n      else\n        cat >&2 <<_LT_EOF\n$progname: Version mismatch error.  This is $PACKAGE $VERSION, revision $package_revision,\n$progname: but the definition of this LT_INIT comes from revision $macro_revision.\n$progname: You should recreate aclocal.m4 with macros from revision $package_revision\n$progname: of $PACKAGE $VERSION and run autoconf again.\n_LT_EOF\n      fi\n\n      exit $EXIT_MISMATCH\n    fi\n}\n\n\n# libtool_options_prep [ARG]...\n# -----------------------------\n# Preparation for options parsed by libtool.\nlibtool_options_prep ()\n{\n    $debug_mode\n\n    # Option defaults:\n    opt_config=false\n    opt_dlopen=\n    opt_dry_run=false\n    opt_help=false\n    opt_mode=\n    opt_preserve_dup_deps=false\n    opt_quiet=false\n\n    nonopt=\n    preserve_args=\n\n    # Shorthand for --mode=foo, only valid as the first argument\n    case $1 in\n    clean|clea|cle|cl)\n      shift; set dummy --mode clean ${1+\"$@\"}; shift\n      ;;\n    compile|compil|compi|comp|com|co|c)\n      shift; set dummy --mode compile ${1+\"$@\"}; shift\n      ;;\n    execute|execut|execu|exec|exe|ex|e)\n      shift; set dummy --mode execute ${1+\"$@\"}; shift\n      ;;\n    finish|finis|fini|fin|fi|f)\n      shift; set dummy --mode finish ${1+\"$@\"}; shift\n      ;;\n    install|instal|insta|inst|ins|in|i)\n      shift; set dummy --mode install ${1+\"$@\"}; shift\n      ;;\n    link|lin|li|l)\n      shift; set dummy --mode link ${1+\"$@\"}; shift\n      ;;\n    uninstall|uninstal|uninsta|uninst|unins|unin|uni|un|u)\n      shift; set dummy --mode uninstall ${1+\"$@\"}; shift\n      ;;\n    esac\n\n    # Pass back the list of options.\n    func_quote_for_eval ${1+\"$@\"}\n    libtool_options_prep_result=$func_quote_for_eval_result\n}\nfunc_add_hook func_options_prep libtool_options_prep\n\n\n# libtool_parse_options [ARG]...\n# ---------------------------------\n# Provide handling for libtool specific options.\nlibtool_parse_options ()\n{\n    $debug_cmd\n\n    # Perform our own loop to consume as many options as possible in\n    # each iteration.\n    while test $# -gt 0; do\n      _G_opt=$1\n      shift\n      case $_G_opt in\n        --dry-run|--dryrun|-n)\n                        opt_dry_run=:\n                        ;;\n\n        --config)       func_config ;;\n\n        --dlopen|-dlopen)\n                        opt_dlopen=\"${opt_dlopen+$opt_dlopen\n}$1\"\n                        shift\n                        ;;\n\n        --preserve-dup-deps)\n                        opt_preserve_dup_deps=: ;;\n\n        --features)     func_features ;;\n\n        --finish)       set dummy --mode finish ${1+\"$@\"}; shift ;;\n\n        --help)         opt_help=: ;;\n\n        --help-all)     opt_help=': help-all' ;;\n\n        --mode)         test $# = 0 && func_missing_arg $_G_opt && break\n                        opt_mode=$1\n                        case $1 in\n                          # Valid mode arguments:\n                          clean|compile|execute|finish|install|link|relink|uninstall) ;;\n\n                          # Catch anything else as an error\n                          *) func_error \"invalid argument for $_G_opt\"\n                             exit_cmd=exit\n                             break\n                             ;;\n                        esac\n                        shift\n                        ;;\n\n        --no-silent|--no-quiet)\n                        opt_quiet=false\n                        func_append preserve_args \" $_G_opt\"\n                        ;;\n\n        --no-warnings|--no-warning|--no-warn)\n                        opt_warning=false\n                        func_append preserve_args \" $_G_opt\"\n                        ;;\n\n        --no-verbose)\n                        opt_verbose=false\n                        func_append preserve_args \" $_G_opt\"\n                        ;;\n\n        --silent|--quiet)\n                        opt_quiet=:\n                        opt_verbose=false\n                        func_append preserve_args \" $_G_opt\"\n                        ;;\n\n        --tag)          test $# = 0 && func_missing_arg $_G_opt && break\n                        opt_tag=$1\n                        func_append preserve_args \" $_G_opt $1\"\n                        func_enable_tag \"$1\"\n                        shift\n                        ;;\n\n        --verbose|-v)   opt_quiet=false\n                        opt_verbose=:\n                        func_append preserve_args \" $_G_opt\"\n                        ;;\n\n\t# An option not handled by this hook function:\n        *)\t\tset dummy \"$_G_opt\" ${1+\"$@\"};\tshift; break  ;;\n      esac\n    done\n\n\n    # save modified positional parameters for caller\n    func_quote_for_eval ${1+\"$@\"}\n    libtool_parse_options_result=$func_quote_for_eval_result\n}\nfunc_add_hook func_parse_options libtool_parse_options\n\n\n\n# libtool_validate_options [ARG]...\n# ---------------------------------\n# Perform any sanity checks on option settings and/or unconsumed\n# arguments.\nlibtool_validate_options ()\n{\n    # save first non-option argument\n    if test 0 -lt $#; then\n      nonopt=$1\n      shift\n    fi\n\n    # preserve --debug\n    test : = \"$debug_cmd\" || func_append preserve_args \" --debug\"\n\n    case $host in\n      # Solaris2 added to fix http://debbugs.gnu.org/cgi/bugreport.cgi?bug=16452\n      # see also: http://gcc.gnu.org/bugzilla/show_bug.cgi?id=59788\n      *cygwin* | *mingw* | *pw32* | *cegcc* | *solaris2* | *os2*)\n        # don't eliminate duplications in $postdeps and $predeps\n        opt_duplicate_compiler_generated_deps=:\n        ;;\n      *)\n        opt_duplicate_compiler_generated_deps=$opt_preserve_dup_deps\n        ;;\n    esac\n\n    $opt_help || {\n      # Sanity checks first:\n      func_check_version_match\n\n      test yes != \"$build_libtool_libs\" \\\n        && test yes != \"$build_old_libs\" \\\n        && func_fatal_configuration \"not configured to build any kind of library\"\n\n      # Darwin sucks\n      eval std_shrext=\\\"$shrext_cmds\\\"\n\n      # Only execute mode is allowed to have -dlopen flags.\n      if test -n \"$opt_dlopen\" && test execute != \"$opt_mode\"; then\n        func_error \"unrecognized option '-dlopen'\"\n        $ECHO \"$help\" 1>&2\n        exit $EXIT_FAILURE\n      fi\n\n      # Change the help message to a mode-specific one.\n      generic_help=$help\n      help=\"Try '$progname --help --mode=$opt_mode' for more information.\"\n    }\n\n    # Pass back the unparsed argument list\n    func_quote_for_eval ${1+\"$@\"}\n    libtool_validate_options_result=$func_quote_for_eval_result\n}\nfunc_add_hook func_validate_options libtool_validate_options\n\n\n# Process options as early as possible so that --help and --version\n# can return quickly.\nfunc_options ${1+\"$@\"}\neval set dummy \"$func_options_result\"; shift\n\n\n\n## ----------- ##\n##    Main.    ##\n## ----------- ##\n\nmagic='%%%MAGIC variable%%%'\nmagic_exe='%%%MAGIC EXE variable%%%'\n\n# Global variables.\nextracted_archives=\nextracted_serial=0\n\n# If this variable is set in any of the actions, the command in it\n# will be execed at the end.  This prevents here-documents from being\n# left over by shells.\nexec_cmd=\n\n\n# A function that is used when there is no print builtin or printf.\nfunc_fallback_echo ()\n{\n  eval 'cat <<_LTECHO_EOF\n$1\n_LTECHO_EOF'\n}\n\n# func_generated_by_libtool\n# True iff stdin has been generated by Libtool. This function is only\n# a basic sanity check; it will hardly flush out determined imposters.\nfunc_generated_by_libtool_p ()\n{\n  $GREP \"^# Generated by .*$PACKAGE\" > /dev/null 2>&1\n}\n\n# func_lalib_p file\n# True iff FILE is a libtool '.la' library or '.lo' object file.\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_lalib_p ()\n{\n    test -f \"$1\" &&\n      $SED -e 4q \"$1\" 2>/dev/null | func_generated_by_libtool_p\n}\n\n# func_lalib_unsafe_p file\n# True iff FILE is a libtool '.la' library or '.lo' object file.\n# This function implements the same check as func_lalib_p without\n# resorting to external programs.  To this end, it redirects stdin and\n# closes it afterwards, without saving the original file descriptor.\n# As a safety measure, use it only where a negative result would be\n# fatal anyway.  Works if 'file' does not exist.\nfunc_lalib_unsafe_p ()\n{\n    lalib_p=no\n    if test -f \"$1\" && test -r \"$1\" && exec 5<&0 <\"$1\"; then\n\tfor lalib_p_l in 1 2 3 4\n\tdo\n\t    read lalib_p_line\n\t    case $lalib_p_line in\n\t\t\\#\\ Generated\\ by\\ *$PACKAGE* ) lalib_p=yes; break;;\n\t    esac\n\tdone\n\texec 0<&5 5<&-\n    fi\n    test yes = \"$lalib_p\"\n}\n\n# func_ltwrapper_script_p file\n# True iff FILE is a libtool wrapper script\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_ltwrapper_script_p ()\n{\n    test -f \"$1\" &&\n      $lt_truncate_bin < \"$1\" 2>/dev/null | func_generated_by_libtool_p\n}\n\n# func_ltwrapper_executable_p file\n# True iff FILE is a libtool wrapper executable\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_ltwrapper_executable_p ()\n{\n    func_ltwrapper_exec_suffix=\n    case $1 in\n    *.exe) ;;\n    *) func_ltwrapper_exec_suffix=.exe ;;\n    esac\n    $GREP \"$magic_exe\" \"$1$func_ltwrapper_exec_suffix\" >/dev/null 2>&1\n}\n\n# func_ltwrapper_scriptname file\n# Assumes file is an ltwrapper_executable\n# uses $file to determine the appropriate filename for a\n# temporary ltwrapper_script.\nfunc_ltwrapper_scriptname ()\n{\n    func_dirname_and_basename \"$1\" \"\" \".\"\n    func_stripname '' '.exe' \"$func_basename_result\"\n    func_ltwrapper_scriptname_result=$func_dirname_result/$objdir/${func_stripname_result}_ltshwrapper\n}\n\n# func_ltwrapper_p file\n# True iff FILE is a libtool wrapper script or wrapper executable\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_ltwrapper_p ()\n{\n    func_ltwrapper_script_p \"$1\" || func_ltwrapper_executable_p \"$1\"\n}\n\n\n# func_execute_cmds commands fail_cmd\n# Execute tilde-delimited COMMANDS.\n# If FAIL_CMD is given, eval that upon failure.\n# FAIL_CMD may read-access the current command in variable CMD!\nfunc_execute_cmds ()\n{\n    $debug_cmd\n\n    save_ifs=$IFS; IFS='~'\n    for cmd in $1; do\n      IFS=$sp$nl\n      eval cmd=\\\"$cmd\\\"\n      IFS=$save_ifs\n      func_show_eval \"$cmd\" \"${2-:}\"\n    done\n    IFS=$save_ifs\n}\n\n\n# func_source file\n# Source FILE, adding directory component if necessary.\n# Note that it is not necessary on cygwin/mingw to append a dot to\n# FILE even if both FILE and FILE.exe exist: automatic-append-.exe\n# behavior happens only for exec(3), not for open(2)!  Also, sourcing\n# 'FILE.' does not work on cygwin managed mounts.\nfunc_source ()\n{\n    $debug_cmd\n\n    case $1 in\n    */* | *\\\\*)\t. \"$1\" ;;\n    *)\t\t. \"./$1\" ;;\n    esac\n}\n\n\n# func_resolve_sysroot PATH\n# Replace a leading = in PATH with a sysroot.  Store the result into\n# func_resolve_sysroot_result\nfunc_resolve_sysroot ()\n{\n  func_resolve_sysroot_result=$1\n  case $func_resolve_sysroot_result in\n  =*)\n    func_stripname '=' '' \"$func_resolve_sysroot_result\"\n    func_resolve_sysroot_result=$lt_sysroot$func_stripname_result\n    ;;\n  esac\n}\n\n# func_replace_sysroot PATH\n# If PATH begins with the sysroot, replace it with = and\n# store the result into func_replace_sysroot_result.\nfunc_replace_sysroot ()\n{\n  case $lt_sysroot:$1 in\n  ?*:\"$lt_sysroot\"*)\n    func_stripname \"$lt_sysroot\" '' \"$1\"\n    func_replace_sysroot_result='='$func_stripname_result\n    ;;\n  *)\n    # Including no sysroot.\n    func_replace_sysroot_result=$1\n    ;;\n  esac\n}\n\n# func_infer_tag arg\n# Infer tagged configuration to use if any are available and\n# if one wasn't chosen via the \"--tag\" command line option.\n# Only attempt this if the compiler in the base compile\n# command doesn't match the default compiler.\n# arg is usually of the form 'gcc ...'\nfunc_infer_tag ()\n{\n    $debug_cmd\n\n    if test -n \"$available_tags\" && test -z \"$tagname\"; then\n      CC_quoted=\n      for arg in $CC; do\n\tfunc_append_quoted CC_quoted \"$arg\"\n      done\n      CC_expanded=`func_echo_all $CC`\n      CC_quoted_expanded=`func_echo_all $CC_quoted`\n      case $@ in\n      # Blanks in the command may have been stripped by the calling shell,\n      # but not from the CC environment variable when configure was run.\n      \" $CC \"* | \"$CC \"* | \" $CC_expanded \"* | \"$CC_expanded \"* | \\\n      \" $CC_quoted\"* | \"$CC_quoted \"* | \" $CC_quoted_expanded \"* | \"$CC_quoted_expanded \"*) ;;\n      # Blanks at the start of $base_compile will cause this to fail\n      # if we don't check for them as well.\n      *)\n\tfor z in $available_tags; do\n\t  if $GREP \"^# ### BEGIN LIBTOOL TAG CONFIG: $z$\" < \"$progpath\" > /dev/null; then\n\t    # Evaluate the configuration.\n\t    eval \"`$SED -n -e '/^# ### BEGIN LIBTOOL TAG CONFIG: '$z'$/,/^# ### END LIBTOOL TAG CONFIG: '$z'$/p' < $progpath`\"\n\t    CC_quoted=\n\t    for arg in $CC; do\n\t      # Double-quote args containing other shell metacharacters.\n\t      func_append_quoted CC_quoted \"$arg\"\n\t    done\n\t    CC_expanded=`func_echo_all $CC`\n\t    CC_quoted_expanded=`func_echo_all $CC_quoted`\n\t    case \"$@ \" in\n\t    \" $CC \"* | \"$CC \"* | \" $CC_expanded \"* | \"$CC_expanded \"* | \\\n\t    \" $CC_quoted\"* | \"$CC_quoted \"* | \" $CC_quoted_expanded \"* | \"$CC_quoted_expanded \"*)\n\t      # The compiler in the base compile command matches\n\t      # the one in the tagged configuration.\n\t      # Assume this is the tagged configuration we want.\n\t      tagname=$z\n\t      break\n\t      ;;\n\t    esac\n\t  fi\n\tdone\n\t# If $tagname still isn't set, then no tagged configuration\n\t# was found and let the user know that the \"--tag\" command\n\t# line option must be used.\n\tif test -z \"$tagname\"; then\n\t  func_echo \"unable to infer tagged configuration\"\n\t  func_fatal_error \"specify a tag with '--tag'\"\n#\telse\n#\t  func_verbose \"using $tagname tagged configuration\"\n\tfi\n\t;;\n      esac\n    fi\n}\n\n\n\n# func_write_libtool_object output_name pic_name nonpic_name\n# Create a libtool object file (analogous to a \".la\" file),\n# but don't create it if we're doing a dry run.\nfunc_write_libtool_object ()\n{\n    write_libobj=$1\n    if test yes = \"$build_libtool_libs\"; then\n      write_lobj=\\'$2\\'\n    else\n      write_lobj=none\n    fi\n\n    if test yes = \"$build_old_libs\"; then\n      write_oldobj=\\'$3\\'\n    else\n      write_oldobj=none\n    fi\n\n    $opt_dry_run || {\n      cat >${write_libobj}T <<EOF\n# $write_libobj - a libtool object file\n# Generated by $PROGRAM (GNU $PACKAGE) $VERSION\n#\n# Please DO NOT delete this file!\n# It is necessary for linking the library.\n\n# Name of the PIC object.\npic_object=$write_lobj\n\n# Name of the non-PIC object\nnon_pic_object=$write_oldobj\n\nEOF\n      $MV \"${write_libobj}T\" \"$write_libobj\"\n    }\n}\n\n\n##################################################\n# FILE NAME AND PATH CONVERSION HELPER FUNCTIONS #\n##################################################\n\n# func_convert_core_file_wine_to_w32 ARG\n# Helper function used by file name conversion functions when $build is *nix,\n# and $host is mingw, cygwin, or some other w32 environment. Relies on a\n# correctly configured wine environment available, with the winepath program\n# in $build's $PATH.\n#\n# ARG is the $build file name to be converted to w32 format.\n# Result is available in $func_convert_core_file_wine_to_w32_result, and will\n# be empty on error (or when ARG is empty)\nfunc_convert_core_file_wine_to_w32 ()\n{\n  $debug_cmd\n\n  func_convert_core_file_wine_to_w32_result=$1\n  if test -n \"$1\"; then\n    # Unfortunately, winepath does not exit with a non-zero error code, so we\n    # are forced to check the contents of stdout. On the other hand, if the\n    # command is not found, the shell will set an exit code of 127 and print\n    # *an error message* to stdout. So we must check for both error code of\n    # zero AND non-empty stdout, which explains the odd construction:\n    func_convert_core_file_wine_to_w32_tmp=`winepath -w \"$1\" 2>/dev/null`\n    if test \"$?\" -eq 0 && test -n \"$func_convert_core_file_wine_to_w32_tmp\"; then\n      func_convert_core_file_wine_to_w32_result=`$ECHO \"$func_convert_core_file_wine_to_w32_tmp\" |\n        $SED -e \"$sed_naive_backslashify\"`\n    else\n      func_convert_core_file_wine_to_w32_result=\n    fi\n  fi\n}\n# end: func_convert_core_file_wine_to_w32\n\n\n# func_convert_core_path_wine_to_w32 ARG\n# Helper function used by path conversion functions when $build is *nix, and\n# $host is mingw, cygwin, or some other w32 environment. Relies on a correctly\n# configured wine environment available, with the winepath program in $build's\n# $PATH. Assumes ARG has no leading or trailing path separator characters.\n#\n# ARG is path to be converted from $build format to win32.\n# Result is available in $func_convert_core_path_wine_to_w32_result.\n# Unconvertible file (directory) names in ARG are skipped; if no directory names\n# are convertible, then the result may be empty.\nfunc_convert_core_path_wine_to_w32 ()\n{\n  $debug_cmd\n\n  # unfortunately, winepath doesn't convert paths, only file names\n  func_convert_core_path_wine_to_w32_result=\n  if test -n \"$1\"; then\n    oldIFS=$IFS\n    IFS=:\n    for func_convert_core_path_wine_to_w32_f in $1; do\n      IFS=$oldIFS\n      func_convert_core_file_wine_to_w32 \"$func_convert_core_path_wine_to_w32_f\"\n      if test -n \"$func_convert_core_file_wine_to_w32_result\"; then\n        if test -z \"$func_convert_core_path_wine_to_w32_result\"; then\n          func_convert_core_path_wine_to_w32_result=$func_convert_core_file_wine_to_w32_result\n        else\n          func_append func_convert_core_path_wine_to_w32_result \";$func_convert_core_file_wine_to_w32_result\"\n        fi\n      fi\n    done\n    IFS=$oldIFS\n  fi\n}\n# end: func_convert_core_path_wine_to_w32\n\n\n# func_cygpath ARGS...\n# Wrapper around calling the cygpath program via LT_CYGPATH. This is used when\n# when (1) $build is *nix and Cygwin is hosted via a wine environment; or (2)\n# $build is MSYS and $host is Cygwin, or (3) $build is Cygwin. In case (1) or\n# (2), returns the Cygwin file name or path in func_cygpath_result (input\n# file name or path is assumed to be in w32 format, as previously converted\n# from $build's *nix or MSYS format). In case (3), returns the w32 file name\n# or path in func_cygpath_result (input file name or path is assumed to be in\n# Cygwin format). Returns an empty string on error.\n#\n# ARGS are passed to cygpath, with the last one being the file name or path to\n# be converted.\n#\n# Specify the absolute *nix (or w32) name to cygpath in the LT_CYGPATH\n# environment variable; do not put it in $PATH.\nfunc_cygpath ()\n{\n  $debug_cmd\n\n  if test -n \"$LT_CYGPATH\" && test -f \"$LT_CYGPATH\"; then\n    func_cygpath_result=`$LT_CYGPATH \"$@\" 2>/dev/null`\n    if test \"$?\" -ne 0; then\n      # on failure, ensure result is empty\n      func_cygpath_result=\n    fi\n  else\n    func_cygpath_result=\n    func_error \"LT_CYGPATH is empty or specifies non-existent file: '$LT_CYGPATH'\"\n  fi\n}\n#end: func_cygpath\n\n\n# func_convert_core_msys_to_w32 ARG\n# Convert file name or path ARG from MSYS format to w32 format.  Return\n# result in func_convert_core_msys_to_w32_result.\nfunc_convert_core_msys_to_w32 ()\n{\n  $debug_cmd\n\n  # awkward: cmd appends spaces to result\n  func_convert_core_msys_to_w32_result=`( cmd //c echo \"$1\" ) 2>/dev/null |\n    $SED -e 's/[ ]*$//' -e \"$sed_naive_backslashify\"`\n}\n#end: func_convert_core_msys_to_w32\n\n\n# func_convert_file_check ARG1 ARG2\n# Verify that ARG1 (a file name in $build format) was converted to $host\n# format in ARG2. Otherwise, emit an error message, but continue (resetting\n# func_to_host_file_result to ARG1).\nfunc_convert_file_check ()\n{\n  $debug_cmd\n\n  if test -z \"$2\" && test -n \"$1\"; then\n    func_error \"Could not determine host file name corresponding to\"\n    func_error \"  '$1'\"\n    func_error \"Continuing, but uninstalled executables may not work.\"\n    # Fallback:\n    func_to_host_file_result=$1\n  fi\n}\n# end func_convert_file_check\n\n\n# func_convert_path_check FROM_PATHSEP TO_PATHSEP FROM_PATH TO_PATH\n# Verify that FROM_PATH (a path in $build format) was converted to $host\n# format in TO_PATH. Otherwise, emit an error message, but continue, resetting\n# func_to_host_file_result to a simplistic fallback value (see below).\nfunc_convert_path_check ()\n{\n  $debug_cmd\n\n  if test -z \"$4\" && test -n \"$3\"; then\n    func_error \"Could not determine the host path corresponding to\"\n    func_error \"  '$3'\"\n    func_error \"Continuing, but uninstalled executables may not work.\"\n    # Fallback.  This is a deliberately simplistic \"conversion\" and\n    # should not be \"improved\".  See libtool.info.\n    if test \"x$1\" != \"x$2\"; then\n      lt_replace_pathsep_chars=\"s|$1|$2|g\"\n      func_to_host_path_result=`echo \"$3\" |\n        $SED -e \"$lt_replace_pathsep_chars\"`\n    else\n      func_to_host_path_result=$3\n    fi\n  fi\n}\n# end func_convert_path_check\n\n\n# func_convert_path_front_back_pathsep FRONTPAT BACKPAT REPL ORIG\n# Modifies func_to_host_path_result by prepending REPL if ORIG matches FRONTPAT\n# and appending REPL if ORIG matches BACKPAT.\nfunc_convert_path_front_back_pathsep ()\n{\n  $debug_cmd\n\n  case $4 in\n  $1 ) func_to_host_path_result=$3$func_to_host_path_result\n    ;;\n  esac\n  case $4 in\n  $2 ) func_append func_to_host_path_result \"$3\"\n    ;;\n  esac\n}\n# end func_convert_path_front_back_pathsep\n\n\n##################################################\n# $build to $host FILE NAME CONVERSION FUNCTIONS #\n##################################################\n# invoked via '$to_host_file_cmd ARG'\n#\n# In each case, ARG is the path to be converted from $build to $host format.\n# Result will be available in $func_to_host_file_result.\n\n\n# func_to_host_file ARG\n# Converts the file name ARG from $build format to $host format. Return result\n# in func_to_host_file_result.\nfunc_to_host_file ()\n{\n  $debug_cmd\n\n  $to_host_file_cmd \"$1\"\n}\n# end func_to_host_file\n\n\n# func_to_tool_file ARG LAZY\n# converts the file name ARG from $build format to toolchain format. Return\n# result in func_to_tool_file_result.  If the conversion in use is listed\n# in (the comma separated) LAZY, no conversion takes place.\nfunc_to_tool_file ()\n{\n  $debug_cmd\n\n  case ,$2, in\n    *,\"$to_tool_file_cmd\",*)\n      func_to_tool_file_result=$1\n      ;;\n    *)\n      $to_tool_file_cmd \"$1\"\n      func_to_tool_file_result=$func_to_host_file_result\n      ;;\n  esac\n}\n# end func_to_tool_file\n\n\n# func_convert_file_noop ARG\n# Copy ARG to func_to_host_file_result.\nfunc_convert_file_noop ()\n{\n  func_to_host_file_result=$1\n}\n# end func_convert_file_noop\n\n\n# func_convert_file_msys_to_w32 ARG\n# Convert file name ARG from (mingw) MSYS to (mingw) w32 format; automatic\n# conversion to w32 is not available inside the cwrapper.  Returns result in\n# func_to_host_file_result.\nfunc_convert_file_msys_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_file_result=$1\n  if test -n \"$1\"; then\n    func_convert_core_msys_to_w32 \"$1\"\n    func_to_host_file_result=$func_convert_core_msys_to_w32_result\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_msys_to_w32\n\n\n# func_convert_file_cygwin_to_w32 ARG\n# Convert file name ARG from Cygwin to w32 format.  Returns result in\n# func_to_host_file_result.\nfunc_convert_file_cygwin_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_file_result=$1\n  if test -n \"$1\"; then\n    # because $build is cygwin, we call \"the\" cygpath in $PATH; no need to use\n    # LT_CYGPATH in this case.\n    func_to_host_file_result=`cygpath -m \"$1\"`\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_cygwin_to_w32\n\n\n# func_convert_file_nix_to_w32 ARG\n# Convert file name ARG from *nix to w32 format.  Requires a wine environment\n# and a working winepath. Returns result in func_to_host_file_result.\nfunc_convert_file_nix_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_file_result=$1\n  if test -n \"$1\"; then\n    func_convert_core_file_wine_to_w32 \"$1\"\n    func_to_host_file_result=$func_convert_core_file_wine_to_w32_result\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_nix_to_w32\n\n\n# func_convert_file_msys_to_cygwin ARG\n# Convert file name ARG from MSYS to Cygwin format.  Requires LT_CYGPATH set.\n# Returns result in func_to_host_file_result.\nfunc_convert_file_msys_to_cygwin ()\n{\n  $debug_cmd\n\n  func_to_host_file_result=$1\n  if test -n \"$1\"; then\n    func_convert_core_msys_to_w32 \"$1\"\n    func_cygpath -u \"$func_convert_core_msys_to_w32_result\"\n    func_to_host_file_result=$func_cygpath_result\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_msys_to_cygwin\n\n\n# func_convert_file_nix_to_cygwin ARG\n# Convert file name ARG from *nix to Cygwin format.  Requires Cygwin installed\n# in a wine environment, working winepath, and LT_CYGPATH set.  Returns result\n# in func_to_host_file_result.\nfunc_convert_file_nix_to_cygwin ()\n{\n  $debug_cmd\n\n  func_to_host_file_result=$1\n  if test -n \"$1\"; then\n    # convert from *nix to w32, then use cygpath to convert from w32 to cygwin.\n    func_convert_core_file_wine_to_w32 \"$1\"\n    func_cygpath -u \"$func_convert_core_file_wine_to_w32_result\"\n    func_to_host_file_result=$func_cygpath_result\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_nix_to_cygwin\n\n\n#############################################\n# $build to $host PATH CONVERSION FUNCTIONS #\n#############################################\n# invoked via '$to_host_path_cmd ARG'\n#\n# In each case, ARG is the path to be converted from $build to $host format.\n# The result will be available in $func_to_host_path_result.\n#\n# Path separators are also converted from $build format to $host format.  If\n# ARG begins or ends with a path separator character, it is preserved (but\n# converted to $host format) on output.\n#\n# All path conversion functions are named using the following convention:\n#   file name conversion function    : func_convert_file_X_to_Y ()\n#   path conversion function         : func_convert_path_X_to_Y ()\n# where, for any given $build/$host combination the 'X_to_Y' value is the\n# same.  If conversion functions are added for new $build/$host combinations,\n# the two new functions must follow this pattern, or func_init_to_host_path_cmd\n# will break.\n\n\n# func_init_to_host_path_cmd\n# Ensures that function \"pointer\" variable $to_host_path_cmd is set to the\n# appropriate value, based on the value of $to_host_file_cmd.\nto_host_path_cmd=\nfunc_init_to_host_path_cmd ()\n{\n  $debug_cmd\n\n  if test -z \"$to_host_path_cmd\"; then\n    func_stripname 'func_convert_file_' '' \"$to_host_file_cmd\"\n    to_host_path_cmd=func_convert_path_$func_stripname_result\n  fi\n}\n\n\n# func_to_host_path ARG\n# Converts the path ARG from $build format to $host format. Return result\n# in func_to_host_path_result.\nfunc_to_host_path ()\n{\n  $debug_cmd\n\n  func_init_to_host_path_cmd\n  $to_host_path_cmd \"$1\"\n}\n# end func_to_host_path\n\n\n# func_convert_path_noop ARG\n# Copy ARG to func_to_host_path_result.\nfunc_convert_path_noop ()\n{\n  func_to_host_path_result=$1\n}\n# end func_convert_path_noop\n\n\n# func_convert_path_msys_to_w32 ARG\n# Convert path ARG from (mingw) MSYS to (mingw) w32 format; automatic\n# conversion to w32 is not available inside the cwrapper.  Returns result in\n# func_to_host_path_result.\nfunc_convert_path_msys_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_path_result=$1\n  if test -n \"$1\"; then\n    # Remove leading and trailing path separator characters from ARG.  MSYS\n    # behavior is inconsistent here; cygpath turns them into '.;' and ';.';\n    # and winepath ignores them completely.\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_msys_to_w32 \"$func_to_host_path_tmp1\"\n    func_to_host_path_result=$func_convert_core_msys_to_w32_result\n    func_convert_path_check : \";\" \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" \";\" \"$1\"\n  fi\n}\n# end func_convert_path_msys_to_w32\n\n\n# func_convert_path_cygwin_to_w32 ARG\n# Convert path ARG from Cygwin to w32 format.  Returns result in\n# func_to_host_file_result.\nfunc_convert_path_cygwin_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_path_result=$1\n  if test -n \"$1\"; then\n    # See func_convert_path_msys_to_w32:\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_to_host_path_result=`cygpath -m -p \"$func_to_host_path_tmp1\"`\n    func_convert_path_check : \";\" \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" \";\" \"$1\"\n  fi\n}\n# end func_convert_path_cygwin_to_w32\n\n\n# func_convert_path_nix_to_w32 ARG\n# Convert path ARG from *nix to w32 format.  Requires a wine environment and\n# a working winepath.  Returns result in func_to_host_file_result.\nfunc_convert_path_nix_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_path_result=$1\n  if test -n \"$1\"; then\n    # See func_convert_path_msys_to_w32:\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_path_wine_to_w32 \"$func_to_host_path_tmp1\"\n    func_to_host_path_result=$func_convert_core_path_wine_to_w32_result\n    func_convert_path_check : \";\" \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" \";\" \"$1\"\n  fi\n}\n# end func_convert_path_nix_to_w32\n\n\n# func_convert_path_msys_to_cygwin ARG\n# Convert path ARG from MSYS to Cygwin format.  Requires LT_CYGPATH set.\n# Returns result in func_to_host_file_result.\nfunc_convert_path_msys_to_cygwin ()\n{\n  $debug_cmd\n\n  func_to_host_path_result=$1\n  if test -n \"$1\"; then\n    # See func_convert_path_msys_to_w32:\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_msys_to_w32 \"$func_to_host_path_tmp1\"\n    func_cygpath -u -p \"$func_convert_core_msys_to_w32_result\"\n    func_to_host_path_result=$func_cygpath_result\n    func_convert_path_check : : \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" : \"$1\"\n  fi\n}\n# end func_convert_path_msys_to_cygwin\n\n\n# func_convert_path_nix_to_cygwin ARG\n# Convert path ARG from *nix to Cygwin format.  Requires Cygwin installed in a\n# a wine environment, working winepath, and LT_CYGPATH set.  Returns result in\n# func_to_host_file_result.\nfunc_convert_path_nix_to_cygwin ()\n{\n  $debug_cmd\n\n  func_to_host_path_result=$1\n  if test -n \"$1\"; then\n    # Remove leading and trailing path separator characters from\n    # ARG. msys behavior is inconsistent here, cygpath turns them\n    # into '.;' and ';.', and winepath ignores them completely.\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_path_wine_to_w32 \"$func_to_host_path_tmp1\"\n    func_cygpath -u -p \"$func_convert_core_path_wine_to_w32_result\"\n    func_to_host_path_result=$func_cygpath_result\n    func_convert_path_check : : \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" : \"$1\"\n  fi\n}\n# end func_convert_path_nix_to_cygwin\n\n\n# func_dll_def_p FILE\n# True iff FILE is a Windows DLL '.def' file.\n# Keep in sync with _LT_DLL_DEF_P in libtool.m4\nfunc_dll_def_p ()\n{\n  $debug_cmd\n\n  func_dll_def_p_tmp=`$SED -n \\\n    -e 's/^[\t ]*//' \\\n    -e '/^\\(;.*\\)*$/d' \\\n    -e 's/^\\(EXPORTS\\|LIBRARY\\)\\([\t ].*\\)*$/DEF/p' \\\n    -e q \\\n    \"$1\"`\n  test DEF = \"$func_dll_def_p_tmp\"\n}\n\n\n# func_mode_compile arg...\nfunc_mode_compile ()\n{\n    $debug_cmd\n\n    # Get the compilation command and the source file.\n    base_compile=\n    srcfile=$nonopt  #  always keep a non-empty value in \"srcfile\"\n    suppress_opt=yes\n    suppress_output=\n    arg_mode=normal\n    libobj=\n    later=\n    pie_flag=\n\n    for arg\n    do\n      case $arg_mode in\n      arg  )\n\t# do not \"continue\".  Instead, add this to base_compile\n\tlastarg=$arg\n\targ_mode=normal\n\t;;\n\n      target )\n\tlibobj=$arg\n\targ_mode=normal\n\tcontinue\n\t;;\n\n      normal )\n\t# Accept any command-line options.\n\tcase $arg in\n\t-o)\n\t  test -n \"$libobj\" && \\\n\t    func_fatal_error \"you cannot specify '-o' more than once\"\n\t  arg_mode=target\n\t  continue\n\t  ;;\n\n\t-pie | -fpie | -fPIE)\n          func_append pie_flag \" $arg\"\n\t  continue\n\t  ;;\n\n\t-shared | -static | -prefer-pic | -prefer-non-pic)\n\t  func_append later \" $arg\"\n\t  continue\n\t  ;;\n\n\t-no-suppress)\n\t  suppress_opt=no\n\t  continue\n\t  ;;\n\n\t-Xcompiler)\n\t  arg_mode=arg  #  the next one goes into the \"base_compile\" arg list\n\t  continue      #  The current \"srcfile\" will either be retained or\n\t  ;;            #  replaced later.  I would guess that would be a bug.\n\n\t-Wc,*)\n\t  func_stripname '-Wc,' '' \"$arg\"\n\t  args=$func_stripname_result\n\t  lastarg=\n\t  save_ifs=$IFS; IFS=,\n\t  for arg in $args; do\n\t    IFS=$save_ifs\n\t    func_append_quoted lastarg \"$arg\"\n\t  done\n\t  IFS=$save_ifs\n\t  func_stripname ' ' '' \"$lastarg\"\n\t  lastarg=$func_stripname_result\n\n\t  # Add the arguments to base_compile.\n\t  func_append base_compile \" $lastarg\"\n\t  continue\n\t  ;;\n\n\t*)\n\t  # Accept the current argument as the source file.\n\t  # The previous \"srcfile\" becomes the current argument.\n\t  #\n\t  lastarg=$srcfile\n\t  srcfile=$arg\n\t  ;;\n\tesac  #  case $arg\n\t;;\n      esac    #  case $arg_mode\n\n      # Aesthetically quote the previous argument.\n      func_append_quoted base_compile \"$lastarg\"\n    done # for arg\n\n    case $arg_mode in\n    arg)\n      func_fatal_error \"you must specify an argument for -Xcompile\"\n      ;;\n    target)\n      func_fatal_error \"you must specify a target with '-o'\"\n      ;;\n    *)\n      # Get the name of the library object.\n      test -z \"$libobj\" && {\n\tfunc_basename \"$srcfile\"\n\tlibobj=$func_basename_result\n      }\n      ;;\n    esac\n\n    # Recognize several different file suffixes.\n    # If the user specifies -o file.o, it is replaced with file.lo\n    case $libobj in\n    *.[cCFSifmso] | \\\n    *.ada | *.adb | *.ads | *.asm | \\\n    *.c++ | *.cc | *.ii | *.class | *.cpp | *.cxx | \\\n    *.[fF][09]? | *.for | *.java | *.go | *.obj | *.sx | *.cu | *.cup)\n      func_xform \"$libobj\"\n      libobj=$func_xform_result\n      ;;\n    esac\n\n    case $libobj in\n    *.lo) func_lo2o \"$libobj\"; obj=$func_lo2o_result ;;\n    *)\n      func_fatal_error \"cannot determine name of library object from '$libobj'\"\n      ;;\n    esac\n\n    func_infer_tag $base_compile\n\n    for arg in $later; do\n      case $arg in\n      -shared)\n\ttest yes = \"$build_libtool_libs\" \\\n\t  || func_fatal_configuration \"cannot build a shared library\"\n\tbuild_old_libs=no\n\tcontinue\n\t;;\n\n      -static)\n\tbuild_libtool_libs=no\n\tbuild_old_libs=yes\n\tcontinue\n\t;;\n\n      -prefer-pic)\n\tpic_mode=yes\n\tcontinue\n\t;;\n\n      -prefer-non-pic)\n\tpic_mode=no\n\tcontinue\n\t;;\n      esac\n    done\n\n    func_quote_for_eval \"$libobj\"\n    test \"X$libobj\" != \"X$func_quote_for_eval_result\" \\\n      && $ECHO \"X$libobj\" | $GREP '[]~#^*{};<>?\"'\"'\"'\t &()|`$[]' \\\n      && func_warning \"libobj name '$libobj' may not contain shell special characters.\"\n    func_dirname_and_basename \"$obj\" \"/\" \"\"\n    objname=$func_basename_result\n    xdir=$func_dirname_result\n    lobj=$xdir$objdir/$objname\n\n    test -z \"$base_compile\" && \\\n      func_fatal_help \"you must specify a compilation command\"\n\n    # Delete any leftover library objects.\n    if test yes = \"$build_old_libs\"; then\n      removelist=\"$obj $lobj $libobj ${libobj}T\"\n    else\n      removelist=\"$lobj $libobj ${libobj}T\"\n    fi\n\n    # On Cygwin there's no \"real\" PIC flag so we must build both object types\n    case $host_os in\n    cygwin* | mingw* | pw32* | os2* | cegcc*)\n      pic_mode=default\n      ;;\n    esac\n    if test no = \"$pic_mode\" && test pass_all != \"$deplibs_check_method\"; then\n      # non-PIC code in shared libraries is not supported\n      pic_mode=default\n    fi\n\n    # Calculate the filename of the output object if compiler does\n    # not support -o with -c\n    if test no = \"$compiler_c_o\"; then\n      output_obj=`$ECHO \"$srcfile\" | $SED 's%^.*/%%; s%\\.[^.]*$%%'`.$objext\n      lockfile=$output_obj.lock\n    else\n      output_obj=\n      need_locks=no\n      lockfile=\n    fi\n\n    # Lock this critical section if it is needed\n    # We use this script file to make the link, it avoids creating a new file\n    if test yes = \"$need_locks\"; then\n      until $opt_dry_run || ln \"$progpath\" \"$lockfile\" 2>/dev/null; do\n\tfunc_echo \"Waiting for $lockfile to be removed\"\n\tsleep 2\n      done\n    elif test warn = \"$need_locks\"; then\n      if test -f \"$lockfile\"; then\n\t$ECHO \"\\\n*** ERROR, $lockfile exists and contains:\n`cat $lockfile 2>/dev/null`\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support '-c' and '-o' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler.\"\n\n\t$opt_dry_run || $RM $removelist\n\texit $EXIT_FAILURE\n      fi\n      func_append removelist \" $output_obj\"\n      $ECHO \"$srcfile\" > \"$lockfile\"\n    fi\n\n    $opt_dry_run || $RM $removelist\n    func_append removelist \" $lockfile\"\n    trap '$opt_dry_run || $RM $removelist; exit $EXIT_FAILURE' 1 2 15\n\n    func_to_tool_file \"$srcfile\" func_convert_file_msys_to_w32\n    srcfile=$func_to_tool_file_result\n    func_quote_for_eval \"$srcfile\"\n    qsrcfile=$func_quote_for_eval_result\n\n    # Only build a PIC object if we are building libtool libraries.\n    if test yes = \"$build_libtool_libs\"; then\n      # Without this assignment, base_compile gets emptied.\n      fbsd_hideous_sh_bug=$base_compile\n\n      if test no != \"$pic_mode\"; then\n\tcommand=\"$base_compile $qsrcfile $pic_flag\"\n      else\n\t# Don't build PIC code\n\tcommand=\"$base_compile $qsrcfile\"\n      fi\n\n      func_mkdir_p \"$xdir$objdir\"\n\n      if test -z \"$output_obj\"; then\n\t# Place PIC objects in $objdir\n\tfunc_append command \" -o $lobj\"\n      fi\n\n      func_show_eval_locale \"$command\"\t\\\n          'test -n \"$output_obj\" && $RM $removelist; exit $EXIT_FAILURE'\n\n      if test warn = \"$need_locks\" &&\n\t test \"X`cat $lockfile 2>/dev/null`\" != \"X$srcfile\"; then\n\t$ECHO \"\\\n*** ERROR, $lockfile contains:\n`cat $lockfile 2>/dev/null`\n\nbut it should contain:\n$srcfile\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support '-c' and '-o' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler.\"\n\n\t$opt_dry_run || $RM $removelist\n\texit $EXIT_FAILURE\n      fi\n\n      # Just move the object if needed, then go on to compile the next one\n      if test -n \"$output_obj\" && test \"X$output_obj\" != \"X$lobj\"; then\n\tfunc_show_eval '$MV \"$output_obj\" \"$lobj\"' \\\n\t  'error=$?; $opt_dry_run || $RM $removelist; exit $error'\n      fi\n\n      # Allow error messages only from the first compilation.\n      if test yes = \"$suppress_opt\"; then\n\tsuppress_output=' >/dev/null 2>&1'\n      fi\n    fi\n\n    # Only build a position-dependent object if we build old libraries.\n    if test yes = \"$build_old_libs\"; then\n      if test yes != \"$pic_mode\"; then\n\t# Don't build PIC code\n\tcommand=\"$base_compile $qsrcfile$pie_flag\"\n      else\n\tcommand=\"$base_compile $qsrcfile $pic_flag\"\n      fi\n      if test yes = \"$compiler_c_o\"; then\n\tfunc_append command \" -o $obj\"\n      fi\n\n      # Suppress compiler output if we already did a PIC compilation.\n      func_append command \"$suppress_output\"\n      func_show_eval_locale \"$command\" \\\n        '$opt_dry_run || $RM $removelist; exit $EXIT_FAILURE'\n\n      if test warn = \"$need_locks\" &&\n\t test \"X`cat $lockfile 2>/dev/null`\" != \"X$srcfile\"; then\n\t$ECHO \"\\\n*** ERROR, $lockfile contains:\n`cat $lockfile 2>/dev/null`\n\nbut it should contain:\n$srcfile\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support '-c' and '-o' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler.\"\n\n\t$opt_dry_run || $RM $removelist\n\texit $EXIT_FAILURE\n      fi\n\n      # Just move the object if needed\n      if test -n \"$output_obj\" && test \"X$output_obj\" != \"X$obj\"; then\n\tfunc_show_eval '$MV \"$output_obj\" \"$obj\"' \\\n\t  'error=$?; $opt_dry_run || $RM $removelist; exit $error'\n      fi\n    fi\n\n    $opt_dry_run || {\n      func_write_libtool_object \"$libobj\" \"$objdir/$objname\" \"$objname\"\n\n      # Unlock the critical section if it was locked\n      if test no != \"$need_locks\"; then\n\tremovelist=$lockfile\n        $RM \"$lockfile\"\n      fi\n    }\n\n    exit $EXIT_SUCCESS\n}\n\n$opt_help || {\n  test compile = \"$opt_mode\" && func_mode_compile ${1+\"$@\"}\n}\n\nfunc_mode_help ()\n{\n    # We need to display help for each of the modes.\n    case $opt_mode in\n      \"\")\n        # Generic help is extracted from the usage comments\n        # at the start of this file.\n        func_help\n        ;;\n\n      clean)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=clean RM [RM-OPTION]... FILE...\n\nRemove files from the build directory.\n\nRM is the name of the program to use to delete files associated with each FILE\n(typically '/bin/rm').  RM-OPTIONS are options (such as '-f') to be passed\nto RM.\n\nIf FILE is a libtool library, object or program, all the files associated\nwith it are deleted. Otherwise, only FILE itself is deleted using RM.\"\n        ;;\n\n      compile)\n      $ECHO \\\n\"Usage: $progname [OPTION]... --mode=compile COMPILE-COMMAND... SOURCEFILE\n\nCompile a source file into a libtool library object.\n\nThis mode accepts the following additional options:\n\n  -o OUTPUT-FILE    set the output file name to OUTPUT-FILE\n  -no-suppress      do not suppress compiler output for multiple passes\n  -prefer-pic       try to build PIC objects only\n  -prefer-non-pic   try to build non-PIC objects only\n  -shared           do not build a '.o' file suitable for static linking\n  -static           only build a '.o' file suitable for static linking\n  -Wc,FLAG          pass FLAG directly to the compiler\n\nCOMPILE-COMMAND is a command to be used in creating a 'standard' object file\nfrom the given SOURCEFILE.\n\nThe output file name is determined by removing the directory component from\nSOURCEFILE, then substituting the C source code suffix '.c' with the\nlibrary object suffix, '.lo'.\"\n        ;;\n\n      execute)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=execute COMMAND [ARGS]...\n\nAutomatically set library path, then run a program.\n\nThis mode accepts the following additional options:\n\n  -dlopen FILE      add the directory containing FILE to the library path\n\nThis mode sets the library path environment variable according to '-dlopen'\nflags.\n\nIf any of the ARGS are libtool executable wrappers, then they are translated\ninto their corresponding uninstalled binary, and any of their required library\ndirectories are added to the library path.\n\nThen, COMMAND is executed, with ARGS as arguments.\"\n        ;;\n\n      finish)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=finish [LIBDIR]...\n\nComplete the installation of libtool libraries.\n\nEach LIBDIR is a directory that contains libtool libraries.\n\nThe commands that this mode executes may require superuser privileges.  Use\nthe '--dry-run' option if you just want to see what would be executed.\"\n        ;;\n\n      install)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=install INSTALL-COMMAND...\n\nInstall executables or libraries.\n\nINSTALL-COMMAND is the installation command.  The first component should be\neither the 'install' or 'cp' program.\n\nThe following components of INSTALL-COMMAND are treated specially:\n\n  -inst-prefix-dir PREFIX-DIR  Use PREFIX-DIR as a staging area for installation\n\nThe rest of the components are interpreted as arguments to that command (only\nBSD-compatible install options are recognized).\"\n        ;;\n\n      link)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=link LINK-COMMAND...\n\nLink object files or libraries together to form another library, or to\ncreate an executable program.\n\nLINK-COMMAND is a command using the C compiler that you would use to create\na program from several object files.\n\nThe following components of LINK-COMMAND are treated specially:\n\n  -all-static       do not do any dynamic linking at all\n  -avoid-version    do not add a version suffix if possible\n  -bindir BINDIR    specify path to binaries directory (for systems where\n                    libraries must be found in the PATH setting at runtime)\n  -dlopen FILE      '-dlpreopen' FILE if it cannot be dlopened at runtime\n  -dlpreopen FILE   link in FILE and add its symbols to lt_preloaded_symbols\n  -export-dynamic   allow symbols from OUTPUT-FILE to be resolved with dlsym(3)\n  -export-symbols SYMFILE\n                    try to export only the symbols listed in SYMFILE\n  -export-symbols-regex REGEX\n                    try to export only the symbols matching REGEX\n  -LLIBDIR          search LIBDIR for required installed libraries\n  -lNAME            OUTPUT-FILE requires the installed library libNAME\n  -module           build a library that can dlopened\n  -no-fast-install  disable the fast-install mode\n  -no-install       link a not-installable executable\n  -no-undefined     declare that a library does not refer to external symbols\n  -o OUTPUT-FILE    create OUTPUT-FILE from the specified objects\n  -objectlist FILE  use a list of object files found in FILE to specify objects\n  -os2dllname NAME  force a short DLL name on OS/2 (no effect on other OSes)\n  -precious-files-regex REGEX\n                    don't remove output files matching REGEX\n  -release RELEASE  specify package release information\n  -rpath LIBDIR     the created library will eventually be installed in LIBDIR\n  -R[ ]LIBDIR       add LIBDIR to the runtime path of programs and libraries\n  -shared           only do dynamic linking of libtool libraries\n  -shrext SUFFIX    override the standard shared library file extension\n  -static           do not do any dynamic linking of uninstalled libtool libraries\n  -static-libtool-libs\n                    do not do any dynamic linking of libtool libraries\n  -version-info CURRENT[:REVISION[:AGE]]\n                    specify library version info [each variable defaults to 0]\n  -weak LIBNAME     declare that the target provides the LIBNAME interface\n  -Wc,FLAG\n  -Xcompiler FLAG   pass linker-specific FLAG directly to the compiler\n  -Wl,FLAG\n  -Xlinker FLAG     pass linker-specific FLAG directly to the linker\n  -XCClinker FLAG   pass link-specific FLAG to the compiler driver (CC)\n\nAll other options (arguments beginning with '-') are ignored.\n\nEvery other argument is treated as a filename.  Files ending in '.la' are\ntreated as uninstalled libtool libraries, other files are standard or library\nobject files.\n\nIf the OUTPUT-FILE ends in '.la', then a libtool library is created,\nonly library objects ('.lo' files) may be specified, and '-rpath' is\nrequired, except when creating a convenience library.\n\nIf OUTPUT-FILE ends in '.a' or '.lib', then a standard library is created\nusing 'ar' and 'ranlib', or on Windows using 'lib'.\n\nIf OUTPUT-FILE ends in '.lo' or '.$objext', then a reloadable object file\nis created, otherwise an executable program is created.\"\n        ;;\n\n      uninstall)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=uninstall RM [RM-OPTION]... FILE...\n\nRemove libraries from an installation directory.\n\nRM is the name of the program to use to delete files associated with each FILE\n(typically '/bin/rm').  RM-OPTIONS are options (such as '-f') to be passed\nto RM.\n\nIf FILE is a libtool library, all the files associated with it are deleted.\nOtherwise, only FILE itself is deleted using RM.\"\n        ;;\n\n      *)\n        func_fatal_help \"invalid operation mode '$opt_mode'\"\n        ;;\n    esac\n\n    echo\n    $ECHO \"Try '$progname --help' for more information about other modes.\"\n}\n\n# Now that we've collected a possible --mode arg, show help if necessary\nif $opt_help; then\n  if test : = \"$opt_help\"; then\n    func_mode_help\n  else\n    {\n      func_help noexit\n      for opt_mode in compile link execute install finish uninstall clean; do\n\tfunc_mode_help\n      done\n    } | $SED -n '1p; 2,$s/^Usage:/  or: /p'\n    {\n      func_help noexit\n      for opt_mode in compile link execute install finish uninstall clean; do\n\techo\n\tfunc_mode_help\n      done\n    } |\n    $SED '1d\n      /^When reporting/,/^Report/{\n\tH\n\td\n      }\n      $x\n      /information about other modes/d\n      /more detailed .*MODE/d\n      s/^Usage:.*--mode=\\([^ ]*\\) .*/Description of \\1 mode:/'\n  fi\n  exit $?\nfi\n\n\n# func_mode_execute arg...\nfunc_mode_execute ()\n{\n    $debug_cmd\n\n    # The first argument is the command name.\n    cmd=$nonopt\n    test -z \"$cmd\" && \\\n      func_fatal_help \"you must specify a COMMAND\"\n\n    # Handle -dlopen flags immediately.\n    for file in $opt_dlopen; do\n      test -f \"$file\" \\\n\t|| func_fatal_help \"'$file' is not a file\"\n\n      dir=\n      case $file in\n      *.la)\n\tfunc_resolve_sysroot \"$file\"\n\tfile=$func_resolve_sysroot_result\n\n\t# Check to see that this really is a libtool archive.\n\tfunc_lalib_unsafe_p \"$file\" \\\n\t  || func_fatal_help \"'$lib' is not a valid libtool archive\"\n\n\t# Read the libtool library.\n\tdlname=\n\tlibrary_names=\n\tfunc_source \"$file\"\n\n\t# Skip this library if it cannot be dlopened.\n\tif test -z \"$dlname\"; then\n\t  # Warn if it was a shared library.\n\t  test -n \"$library_names\" && \\\n\t    func_warning \"'$file' was not linked with '-export-dynamic'\"\n\t  continue\n\tfi\n\n\tfunc_dirname \"$file\" \"\" \".\"\n\tdir=$func_dirname_result\n\n\tif test -f \"$dir/$objdir/$dlname\"; then\n\t  func_append dir \"/$objdir\"\n\telse\n\t  if test ! -f \"$dir/$dlname\"; then\n\t    func_fatal_error \"cannot find '$dlname' in '$dir' or '$dir/$objdir'\"\n\t  fi\n\tfi\n\t;;\n\n      *.lo)\n\t# Just add the directory containing the .lo file.\n\tfunc_dirname \"$file\" \"\" \".\"\n\tdir=$func_dirname_result\n\t;;\n\n      *)\n\tfunc_warning \"'-dlopen' is ignored for non-libtool libraries and objects\"\n\tcontinue\n\t;;\n      esac\n\n      # Get the absolute pathname.\n      absdir=`cd \"$dir\" && pwd`\n      test -n \"$absdir\" && dir=$absdir\n\n      # Now add the directory to shlibpath_var.\n      if eval \"test -z \\\"\\$$shlibpath_var\\\"\"; then\n\teval \"$shlibpath_var=\\\"\\$dir\\\"\"\n      else\n\teval \"$shlibpath_var=\\\"\\$dir:\\$$shlibpath_var\\\"\"\n      fi\n    done\n\n    # This variable tells wrapper scripts just to set shlibpath_var\n    # rather than running their programs.\n    libtool_execute_magic=$magic\n\n    # Check if any of the arguments is a wrapper script.\n    args=\n    for file\n    do\n      case $file in\n      -* | *.la | *.lo ) ;;\n      *)\n\t# Do a test to see if this is really a libtool program.\n\tif func_ltwrapper_script_p \"$file\"; then\n\t  func_source \"$file\"\n\t  # Transform arg to wrapped name.\n\t  file=$progdir/$program\n\telif func_ltwrapper_executable_p \"$file\"; then\n\t  func_ltwrapper_scriptname \"$file\"\n\t  func_source \"$func_ltwrapper_scriptname_result\"\n\t  # Transform arg to wrapped name.\n\t  file=$progdir/$program\n\tfi\n\t;;\n      esac\n      # Quote arguments (to preserve shell metacharacters).\n      func_append_quoted args \"$file\"\n    done\n\n    if $opt_dry_run; then\n      # Display what would be done.\n      if test -n \"$shlibpath_var\"; then\n\teval \"\\$ECHO \\\"\\$shlibpath_var=\\$$shlibpath_var\\\"\"\n\techo \"export $shlibpath_var\"\n      fi\n      $ECHO \"$cmd$args\"\n      exit $EXIT_SUCCESS\n    else\n      if test -n \"$shlibpath_var\"; then\n\t# Export the shlibpath_var.\n\teval \"export $shlibpath_var\"\n      fi\n\n      # Restore saved environment variables\n      for lt_var in LANG LANGUAGE LC_ALL LC_CTYPE LC_COLLATE LC_MESSAGES\n      do\n\teval \"if test \\\"\\${save_$lt_var+set}\\\" = set; then\n                $lt_var=\\$save_$lt_var; export $lt_var\n\t      else\n\t\t$lt_unset $lt_var\n\t      fi\"\n      done\n\n      # Now prepare to actually exec the command.\n      exec_cmd=\\$cmd$args\n    fi\n}\n\ntest execute = \"$opt_mode\" && func_mode_execute ${1+\"$@\"}\n\n\n# func_mode_finish arg...\nfunc_mode_finish ()\n{\n    $debug_cmd\n\n    libs=\n    libdirs=\n    admincmds=\n\n    for opt in \"$nonopt\" ${1+\"$@\"}\n    do\n      if test -d \"$opt\"; then\n\tfunc_append libdirs \" $opt\"\n\n      elif test -f \"$opt\"; then\n\tif func_lalib_unsafe_p \"$opt\"; then\n\t  func_append libs \" $opt\"\n\telse\n\t  func_warning \"'$opt' is not a valid libtool archive\"\n\tfi\n\n      else\n\tfunc_fatal_error \"invalid argument '$opt'\"\n      fi\n    done\n\n    if test -n \"$libs\"; then\n      if test -n \"$lt_sysroot\"; then\n        sysroot_regex=`$ECHO \"$lt_sysroot\" | $SED \"$sed_make_literal_regex\"`\n        sysroot_cmd=\"s/\\([ ']\\)$sysroot_regex/\\1/g;\"\n      else\n        sysroot_cmd=\n      fi\n\n      # Remove sysroot references\n      if $opt_dry_run; then\n        for lib in $libs; do\n          echo \"removing references to $lt_sysroot and '=' prefixes from $lib\"\n        done\n      else\n        tmpdir=`func_mktempdir`\n        for lib in $libs; do\n\t  $SED -e \"$sysroot_cmd s/\\([ ']-[LR]\\)=/\\1/g; s/\\([ ']\\)=/\\1/g\" $lib \\\n\t    > $tmpdir/tmp-la\n\t  mv -f $tmpdir/tmp-la $lib\n\tdone\n        ${RM}r \"$tmpdir\"\n      fi\n    fi\n\n    if test -n \"$finish_cmds$finish_eval\" && test -n \"$libdirs\"; then\n      for libdir in $libdirs; do\n\tif test -n \"$finish_cmds\"; then\n\t  # Do each command in the finish commands.\n\t  func_execute_cmds \"$finish_cmds\" 'admincmds=\"$admincmds\n'\"$cmd\"'\"'\n\tfi\n\tif test -n \"$finish_eval\"; then\n\t  # Do the single finish_eval.\n\t  eval cmds=\\\"$finish_eval\\\"\n\t  $opt_dry_run || eval \"$cmds\" || func_append admincmds \"\n       $cmds\"\n\tfi\n      done\n    fi\n\n    # Exit here if they wanted silent mode.\n    $opt_quiet && exit $EXIT_SUCCESS\n\n    if test -n \"$finish_cmds$finish_eval\" && test -n \"$libdirs\"; then\n      echo \"----------------------------------------------------------------------\"\n      echo \"Libraries have been installed in:\"\n      for libdir in $libdirs; do\n\t$ECHO \"   $libdir\"\n      done\n      echo\n      echo \"If you ever happen to want to link against installed libraries\"\n      echo \"in a given directory, LIBDIR, you must either use libtool, and\"\n      echo \"specify the full pathname of the library, or use the '-LLIBDIR'\"\n      echo \"flag during linking and do at least one of the following:\"\n      if test -n \"$shlibpath_var\"; then\n\techo \"   - add LIBDIR to the '$shlibpath_var' environment variable\"\n\techo \"     during execution\"\n      fi\n      if test -n \"$runpath_var\"; then\n\techo \"   - add LIBDIR to the '$runpath_var' environment variable\"\n\techo \"     during linking\"\n      fi\n      if test -n \"$hardcode_libdir_flag_spec\"; then\n\tlibdir=LIBDIR\n\teval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\n\t$ECHO \"   - use the '$flag' linker flag\"\n      fi\n      if test -n \"$admincmds\"; then\n\t$ECHO \"   - have your system administrator run these commands:$admincmds\"\n      fi\n      if test -f /etc/ld.so.conf; then\n\techo \"   - have your system administrator add LIBDIR to '/etc/ld.so.conf'\"\n      fi\n      echo\n\n      echo \"See any operating system documentation about shared libraries for\"\n      case $host in\n\tsolaris2.[6789]|solaris2.1[0-9])\n\t  echo \"more information, such as the ld(1), crle(1) and ld.so(8) manual\"\n\t  echo \"pages.\"\n\t  ;;\n\t*)\n\t  echo \"more information, such as the ld(1) and ld.so(8) manual pages.\"\n\t  ;;\n      esac\n      echo \"----------------------------------------------------------------------\"\n    fi\n    exit $EXIT_SUCCESS\n}\n\ntest finish = \"$opt_mode\" && func_mode_finish ${1+\"$@\"}\n\n\n# func_mode_install arg...\nfunc_mode_install ()\n{\n    $debug_cmd\n\n    # There may be an optional sh(1) argument at the beginning of\n    # install_prog (especially on Windows NT).\n    if test \"$SHELL\" = \"$nonopt\" || test /bin/sh = \"$nonopt\" ||\n       # Allow the use of GNU shtool's install command.\n       case $nonopt in *shtool*) :;; *) false;; esac\n    then\n      # Aesthetically quote it.\n      func_quote_for_eval \"$nonopt\"\n      install_prog=\"$func_quote_for_eval_result \"\n      arg=$1\n      shift\n    else\n      install_prog=\n      arg=$nonopt\n    fi\n\n    # The real first argument should be the name of the installation program.\n    # Aesthetically quote it.\n    func_quote_for_eval \"$arg\"\n    func_append install_prog \"$func_quote_for_eval_result\"\n    install_shared_prog=$install_prog\n    case \" $install_prog \" in\n      *[\\\\\\ /]cp\\ *) install_cp=: ;;\n      *) install_cp=false ;;\n    esac\n\n    # We need to accept at least all the BSD install flags.\n    dest=\n    files=\n    opts=\n    prev=\n    install_type=\n    isdir=false\n    stripme=\n    no_mode=:\n    for arg\n    do\n      arg2=\n      if test -n \"$dest\"; then\n\tfunc_append files \" $dest\"\n\tdest=$arg\n\tcontinue\n      fi\n\n      case $arg in\n      -d) isdir=: ;;\n      -f)\n\tif $install_cp; then :; else\n\t  prev=$arg\n\tfi\n\t;;\n      -g | -m | -o)\n\tprev=$arg\n\t;;\n      -s)\n\tstripme=\" -s\"\n\tcontinue\n\t;;\n      -*)\n\t;;\n      *)\n\t# If the previous option needed an argument, then skip it.\n\tif test -n \"$prev\"; then\n\t  if test X-m = \"X$prev\" && test -n \"$install_override_mode\"; then\n\t    arg2=$install_override_mode\n\t    no_mode=false\n\t  fi\n\t  prev=\n\telse\n\t  dest=$arg\n\t  continue\n\tfi\n\t;;\n      esac\n\n      # Aesthetically quote the argument.\n      func_quote_for_eval \"$arg\"\n      func_append install_prog \" $func_quote_for_eval_result\"\n      if test -n \"$arg2\"; then\n\tfunc_quote_for_eval \"$arg2\"\n      fi\n      func_append install_shared_prog \" $func_quote_for_eval_result\"\n    done\n\n    test -z \"$install_prog\" && \\\n      func_fatal_help \"you must specify an install program\"\n\n    test -n \"$prev\" && \\\n      func_fatal_help \"the '$prev' option requires an argument\"\n\n    if test -n \"$install_override_mode\" && $no_mode; then\n      if $install_cp; then :; else\n\tfunc_quote_for_eval \"$install_override_mode\"\n\tfunc_append install_shared_prog \" -m $func_quote_for_eval_result\"\n      fi\n    fi\n\n    if test -z \"$files\"; then\n      if test -z \"$dest\"; then\n\tfunc_fatal_help \"no file or destination specified\"\n      else\n\tfunc_fatal_help \"you must specify a destination\"\n      fi\n    fi\n\n    # Strip any trailing slash from the destination.\n    func_stripname '' '/' \"$dest\"\n    dest=$func_stripname_result\n\n    # Check to see that the destination is a directory.\n    test -d \"$dest\" && isdir=:\n    if $isdir; then\n      destdir=$dest\n      destname=\n    else\n      func_dirname_and_basename \"$dest\" \"\" \".\"\n      destdir=$func_dirname_result\n      destname=$func_basename_result\n\n      # Not a directory, so check to see that there is only one file specified.\n      set dummy $files; shift\n      test \"$#\" -gt 1 && \\\n\tfunc_fatal_help \"'$dest' is not a directory\"\n    fi\n    case $destdir in\n    [\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n    *)\n      for file in $files; do\n\tcase $file in\n\t*.lo) ;;\n\t*)\n\t  func_fatal_help \"'$destdir' must be an absolute directory name\"\n\t  ;;\n\tesac\n      done\n      ;;\n    esac\n\n    # This variable tells wrapper scripts just to set variables rather\n    # than running their programs.\n    libtool_install_magic=$magic\n\n    staticlibs=\n    future_libdirs=\n    current_libdirs=\n    for file in $files; do\n\n      # Do each installation.\n      case $file in\n      *.$libext)\n\t# Do the static libraries later.\n\tfunc_append staticlibs \" $file\"\n\t;;\n\n      *.la)\n\tfunc_resolve_sysroot \"$file\"\n\tfile=$func_resolve_sysroot_result\n\n\t# Check to see that this really is a libtool archive.\n\tfunc_lalib_unsafe_p \"$file\" \\\n\t  || func_fatal_help \"'$file' is not a valid libtool archive\"\n\n\tlibrary_names=\n\told_library=\n\trelink_command=\n\tfunc_source \"$file\"\n\n\t# Add the libdir to current_libdirs if it is the destination.\n\tif test \"X$destdir\" = \"X$libdir\"; then\n\t  case \"$current_libdirs \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append current_libdirs \" $libdir\" ;;\n\t  esac\n\telse\n\t  # Note the libdir as a future libdir.\n\t  case \"$future_libdirs \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append future_libdirs \" $libdir\" ;;\n\t  esac\n\tfi\n\n\tfunc_dirname \"$file\" \"/\" \"\"\n\tdir=$func_dirname_result\n\tfunc_append dir \"$objdir\"\n\n\tif test -n \"$relink_command\"; then\n\t  # Determine the prefix the user has applied to our future dir.\n\t  inst_prefix_dir=`$ECHO \"$destdir\" | $SED -e \"s%$libdir\\$%%\"`\n\n\t  # Don't allow the user to place us outside of our expected\n\t  # location b/c this prevents finding dependent libraries that\n\t  # are installed to the same prefix.\n\t  # At present, this check doesn't affect windows .dll's that\n\t  # are installed into $libdir/../bin (currently, that works fine)\n\t  # but it's something to keep an eye on.\n\t  test \"$inst_prefix_dir\" = \"$destdir\" && \\\n\t    func_fatal_error \"error: cannot install '$file' to a directory not ending in $libdir\"\n\n\t  if test -n \"$inst_prefix_dir\"; then\n\t    # Stick the inst_prefix_dir data into the link command.\n\t    relink_command=`$ECHO \"$relink_command\" | $SED \"s%@inst_prefix_dir@%-inst-prefix-dir $inst_prefix_dir%\"`\n\t  else\n\t    relink_command=`$ECHO \"$relink_command\" | $SED \"s%@inst_prefix_dir@%%\"`\n\t  fi\n\n\t  func_warning \"relinking '$file'\"\n\t  func_show_eval \"$relink_command\" \\\n\t    'func_fatal_error \"error: relink '\\''$file'\\'' with the above command before installing it\"'\n\tfi\n\n\t# See the names of the shared library.\n\tset dummy $library_names; shift\n\tif test -n \"$1\"; then\n\t  realname=$1\n\t  shift\n\n\t  srcname=$realname\n\t  test -n \"$relink_command\" && srcname=${realname}T\n\n\t  # Install the shared library and build the symlinks.\n\t  func_show_eval \"$install_shared_prog $dir/$srcname $destdir/$realname\" \\\n\t      'exit $?'\n\t  tstripme=$stripme\n\t  case $host_os in\n\t  cygwin* | mingw* | pw32* | cegcc*)\n\t    case $realname in\n\t    *.dll.a)\n\t      tstripme=\n\t      ;;\n\t    esac\n\t    ;;\n\t  os2*)\n\t    case $realname in\n\t    *_dll.a)\n\t      tstripme=\n\t      ;;\n\t    esac\n\t    ;;\n\t  esac\n\t  if test -n \"$tstripme\" && test -n \"$striplib\"; then\n\t    func_show_eval \"$striplib $destdir/$realname\" 'exit $?'\n\t  fi\n\n\t  if test \"$#\" -gt 0; then\n\t    # Delete the old symlinks, and create new ones.\n\t    # Try 'ln -sf' first, because the 'ln' binary might depend on\n\t    # the symlink we replace!  Solaris /bin/ln does not understand -f,\n\t    # so we also need to try rm && ln -s.\n\t    for linkname\n\t    do\n\t      test \"$linkname\" != \"$realname\" \\\n\t\t&& func_show_eval \"(cd $destdir && { $LN_S -f $realname $linkname || { $RM $linkname && $LN_S $realname $linkname; }; })\"\n\t    done\n\t  fi\n\n\t  # Do each command in the postinstall commands.\n\t  lib=$destdir/$realname\n\t  func_execute_cmds \"$postinstall_cmds\" 'exit $?'\n\tfi\n\n\t# Install the pseudo-library for information purposes.\n\tfunc_basename \"$file\"\n\tname=$func_basename_result\n\tinstname=$dir/${name}i\n\tfunc_show_eval \"$install_prog $instname $destdir/$name\" 'exit $?'\n\n\t# Maybe install the static library, too.\n\ttest -n \"$old_library\" && func_append staticlibs \" $dir/$old_library\"\n\t;;\n\n      *.lo)\n\t# Install (i.e. copy) a libtool object.\n\n\t# Figure out destination file name, if it wasn't already specified.\n\tif test -n \"$destname\"; then\n\t  destfile=$destdir/$destname\n\telse\n\t  func_basename \"$file\"\n\t  destfile=$func_basename_result\n\t  destfile=$destdir/$destfile\n\tfi\n\n\t# Deduce the name of the destination old-style object file.\n\tcase $destfile in\n\t*.lo)\n\t  func_lo2o \"$destfile\"\n\t  staticdest=$func_lo2o_result\n\t  ;;\n\t*.$objext)\n\t  staticdest=$destfile\n\t  destfile=\n\t  ;;\n\t*)\n\t  func_fatal_help \"cannot copy a libtool object to '$destfile'\"\n\t  ;;\n\tesac\n\n\t# Install the libtool object if requested.\n\ttest -n \"$destfile\" && \\\n\t  func_show_eval \"$install_prog $file $destfile\" 'exit $?'\n\n\t# Install the old object if enabled.\n\tif test yes = \"$build_old_libs\"; then\n\t  # Deduce the name of the old-style object file.\n\t  func_lo2o \"$file\"\n\t  staticobj=$func_lo2o_result\n\t  func_show_eval \"$install_prog \\$staticobj \\$staticdest\" 'exit $?'\n\tfi\n\texit $EXIT_SUCCESS\n\t;;\n\n      *)\n\t# Figure out destination file name, if it wasn't already specified.\n\tif test -n \"$destname\"; then\n\t  destfile=$destdir/$destname\n\telse\n\t  func_basename \"$file\"\n\t  destfile=$func_basename_result\n\t  destfile=$destdir/$destfile\n\tfi\n\n\t# If the file is missing, and there is a .exe on the end, strip it\n\t# because it is most likely a libtool script we actually want to\n\t# install\n\tstripped_ext=\n\tcase $file in\n\t  *.exe)\n\t    if test ! -f \"$file\"; then\n\t      func_stripname '' '.exe' \"$file\"\n\t      file=$func_stripname_result\n\t      stripped_ext=.exe\n\t    fi\n\t    ;;\n\tesac\n\n\t# Do a test to see if this is really a libtool program.\n\tcase $host in\n\t*cygwin* | *mingw*)\n\t    if func_ltwrapper_executable_p \"$file\"; then\n\t      func_ltwrapper_scriptname \"$file\"\n\t      wrapper=$func_ltwrapper_scriptname_result\n\t    else\n\t      func_stripname '' '.exe' \"$file\"\n\t      wrapper=$func_stripname_result\n\t    fi\n\t    ;;\n\t*)\n\t    wrapper=$file\n\t    ;;\n\tesac\n\tif func_ltwrapper_script_p \"$wrapper\"; then\n\t  notinst_deplibs=\n\t  relink_command=\n\n\t  func_source \"$wrapper\"\n\n\t  # Check the variables that should have been set.\n\t  test -z \"$generated_by_libtool_version\" && \\\n\t    func_fatal_error \"invalid libtool wrapper script '$wrapper'\"\n\n\t  finalize=:\n\t  for lib in $notinst_deplibs; do\n\t    # Check to see that each library is installed.\n\t    libdir=\n\t    if test -f \"$lib\"; then\n\t      func_source \"$lib\"\n\t    fi\n\t    libfile=$libdir/`$ECHO \"$lib\" | $SED 's%^.*/%%g'`\n\t    if test -n \"$libdir\" && test ! -f \"$libfile\"; then\n\t      func_warning \"'$lib' has not been installed in '$libdir'\"\n\t      finalize=false\n\t    fi\n\t  done\n\n\t  relink_command=\n\t  func_source \"$wrapper\"\n\n\t  outputname=\n\t  if test no = \"$fast_install\" && test -n \"$relink_command\"; then\n\t    $opt_dry_run || {\n\t      if $finalize; then\n\t        tmpdir=`func_mktempdir`\n\t\tfunc_basename \"$file$stripped_ext\"\n\t\tfile=$func_basename_result\n\t        outputname=$tmpdir/$file\n\t        # Replace the output file specification.\n\t        relink_command=`$ECHO \"$relink_command\" | $SED 's%@OUTPUT@%'\"$outputname\"'%g'`\n\n\t        $opt_quiet || {\n\t          func_quote_for_expand \"$relink_command\"\n\t\t  eval \"func_echo $func_quote_for_expand_result\"\n\t        }\n\t        if eval \"$relink_command\"; then :\n\t          else\n\t\t  func_error \"error: relink '$file' with the above command before installing it\"\n\t\t  $opt_dry_run || ${RM}r \"$tmpdir\"\n\t\t  continue\n\t        fi\n\t        file=$outputname\n\t      else\n\t        func_warning \"cannot relink '$file'\"\n\t      fi\n\t    }\n\t  else\n\t    # Install the binary that we compiled earlier.\n\t    file=`$ECHO \"$file$stripped_ext\" | $SED \"s%\\([^/]*\\)$%$objdir/\\1%\"`\n\t  fi\n\tfi\n\n\t# remove .exe since cygwin /usr/bin/install will append another\n\t# one anyway\n\tcase $install_prog,$host in\n\t*/usr/bin/install*,*cygwin*)\n\t  case $file:$destfile in\n\t  *.exe:*.exe)\n\t    # this is ok\n\t    ;;\n\t  *.exe:*)\n\t    destfile=$destfile.exe\n\t    ;;\n\t  *:*.exe)\n\t    func_stripname '' '.exe' \"$destfile\"\n\t    destfile=$func_stripname_result\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n\tfunc_show_eval \"$install_prog\\$stripme \\$file \\$destfile\" 'exit $?'\n\t$opt_dry_run || if test -n \"$outputname\"; then\n\t  ${RM}r \"$tmpdir\"\n\tfi\n\t;;\n      esac\n    done\n\n    for file in $staticlibs; do\n      func_basename \"$file\"\n      name=$func_basename_result\n\n      # Set up the ranlib parameters.\n      oldlib=$destdir/$name\n      func_to_tool_file \"$oldlib\" func_convert_file_msys_to_w32\n      tool_oldlib=$func_to_tool_file_result\n\n      func_show_eval \"$install_prog \\$file \\$oldlib\" 'exit $?'\n\n      if test -n \"$stripme\" && test -n \"$old_striplib\"; then\n\tfunc_show_eval \"$old_striplib $tool_oldlib\" 'exit $?'\n      fi\n\n      # Do each command in the postinstall commands.\n      func_execute_cmds \"$old_postinstall_cmds\" 'exit $?'\n    done\n\n    test -n \"$future_libdirs\" && \\\n      func_warning \"remember to run '$progname --finish$future_libdirs'\"\n\n    if test -n \"$current_libdirs\"; then\n      # Maybe just do a dry run.\n      $opt_dry_run && current_libdirs=\" -n$current_libdirs\"\n      exec_cmd='$SHELL \"$progpath\" $preserve_args --finish$current_libdirs'\n    else\n      exit $EXIT_SUCCESS\n    fi\n}\n\ntest install = \"$opt_mode\" && func_mode_install ${1+\"$@\"}\n\n\n# func_generate_dlsyms outputname originator pic_p\n# Extract symbols from dlprefiles and create ${outputname}S.o with\n# a dlpreopen symbol table.\nfunc_generate_dlsyms ()\n{\n    $debug_cmd\n\n    my_outputname=$1\n    my_originator=$2\n    my_pic_p=${3-false}\n    my_prefix=`$ECHO \"$my_originator\" | $SED 's%[^a-zA-Z0-9]%_%g'`\n    my_dlsyms=\n\n    if test -n \"$dlfiles$dlprefiles\" || test no != \"$dlself\"; then\n      if test -n \"$NM\" && test -n \"$global_symbol_pipe\"; then\n\tmy_dlsyms=${my_outputname}S.c\n      else\n\tfunc_error \"not configured to extract global symbols from dlpreopened files\"\n      fi\n    fi\n\n    if test -n \"$my_dlsyms\"; then\n      case $my_dlsyms in\n      \"\") ;;\n      *.c)\n\t# Discover the nlist of each of the dlfiles.\n\tnlist=$output_objdir/$my_outputname.nm\n\n\tfunc_show_eval \"$RM $nlist ${nlist}S ${nlist}T\"\n\n\t# Parse the name list into a source file.\n\tfunc_verbose \"creating $output_objdir/$my_dlsyms\"\n\n\t$opt_dry_run || $ECHO > \"$output_objdir/$my_dlsyms\" \"\\\n/* $my_dlsyms - symbol resolution table for '$my_outputname' dlsym emulation. */\n/* Generated by $PROGRAM (GNU $PACKAGE) $VERSION */\n\n#ifdef __cplusplus\nextern \\\"C\\\" {\n#endif\n\n#if defined __GNUC__ && (((__GNUC__ == 4) && (__GNUC_MINOR__ >= 4)) || (__GNUC__ > 4))\n#pragma GCC diagnostic ignored \\\"-Wstrict-prototypes\\\"\n#endif\n\n/* Keep this code in sync between libtool.m4, ltmain, lt_system.h, and tests.  */\n#if defined _WIN32 || defined __CYGWIN__ || defined _WIN32_WCE\n/* DATA imports from DLLs on WIN32 can't be const, because runtime\n   relocations are performed -- see ld's documentation on pseudo-relocs.  */\n# define LT_DLSYM_CONST\n#elif defined __osf__\n/* This system does not cope well with relocations in const data.  */\n# define LT_DLSYM_CONST\n#else\n# define LT_DLSYM_CONST const\n#endif\n\n#define STREQ(s1, s2) (strcmp ((s1), (s2)) == 0)\n\n/* External symbol declarations for the compiler. */\\\n\"\n\n\tif test yes = \"$dlself\"; then\n\t  func_verbose \"generating symbol list for '$output'\"\n\n\t  $opt_dry_run || echo ': @PROGRAM@ ' > \"$nlist\"\n\n\t  # Add our own program objects to the symbol list.\n\t  progfiles=`$ECHO \"$objs$old_deplibs\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n\t  for progfile in $progfiles; do\n\t    func_to_tool_file \"$progfile\" func_convert_file_msys_to_w32\n\t    func_verbose \"extracting global C symbols from '$func_to_tool_file_result'\"\n\t    $opt_dry_run || eval \"$NM $func_to_tool_file_result | $global_symbol_pipe >> '$nlist'\"\n\t  done\n\n\t  if test -n \"$exclude_expsyms\"; then\n\t    $opt_dry_run || {\n\t      eval '$EGREP -v \" ($exclude_expsyms)$\" \"$nlist\" > \"$nlist\"T'\n\t      eval '$MV \"$nlist\"T \"$nlist\"'\n\t    }\n\t  fi\n\n\t  if test -n \"$export_symbols_regex\"; then\n\t    $opt_dry_run || {\n\t      eval '$EGREP -e \"$export_symbols_regex\" \"$nlist\" > \"$nlist\"T'\n\t      eval '$MV \"$nlist\"T \"$nlist\"'\n\t    }\n\t  fi\n\n\t  # Prepare the list of exported symbols\n\t  if test -z \"$export_symbols\"; then\n\t    export_symbols=$output_objdir/$outputname.exp\n\t    $opt_dry_run || {\n\t      $RM $export_symbols\n\t      eval \"$SED -n -e '/^: @PROGRAM@ $/d' -e 's/^.* \\(.*\\)$/\\1/p' \"'< \"$nlist\" > \"$export_symbols\"'\n\t      case $host in\n\t      *cygwin* | *mingw* | *cegcc* )\n                eval \"echo EXPORTS \"'> \"$output_objdir/$outputname.def\"'\n                eval 'cat \"$export_symbols\" >> \"$output_objdir/$outputname.def\"'\n\t        ;;\n\t      esac\n\t    }\n\t  else\n\t    $opt_dry_run || {\n\t      eval \"$SED -e 's/\\([].[*^$]\\)/\\\\\\\\\\1/g' -e 's/^/ /' -e 's/$/$/'\"' < \"$export_symbols\" > \"$output_objdir/$outputname.exp\"'\n\t      eval '$GREP -f \"$output_objdir/$outputname.exp\" < \"$nlist\" > \"$nlist\"T'\n\t      eval '$MV \"$nlist\"T \"$nlist\"'\n\t      case $host in\n\t        *cygwin* | *mingw* | *cegcc* )\n\t          eval \"echo EXPORTS \"'> \"$output_objdir/$outputname.def\"'\n\t          eval 'cat \"$nlist\" >> \"$output_objdir/$outputname.def\"'\n\t          ;;\n\t      esac\n\t    }\n\t  fi\n\tfi\n\n\tfor dlprefile in $dlprefiles; do\n\t  func_verbose \"extracting global C symbols from '$dlprefile'\"\n\t  func_basename \"$dlprefile\"\n\t  name=$func_basename_result\n          case $host in\n\t    *cygwin* | *mingw* | *cegcc* )\n\t      # if an import library, we need to obtain dlname\n\t      if func_win32_import_lib_p \"$dlprefile\"; then\n\t        func_tr_sh \"$dlprefile\"\n\t        eval \"curr_lafile=\\$libfile_$func_tr_sh_result\"\n\t        dlprefile_dlbasename=\n\t        if test -n \"$curr_lafile\" && func_lalib_p \"$curr_lafile\"; then\n\t          # Use subshell, to avoid clobbering current variable values\n\t          dlprefile_dlname=`source \"$curr_lafile\" && echo \"$dlname\"`\n\t          if test -n \"$dlprefile_dlname\"; then\n\t            func_basename \"$dlprefile_dlname\"\n\t            dlprefile_dlbasename=$func_basename_result\n\t          else\n\t            # no lafile. user explicitly requested -dlpreopen <import library>.\n\t            $sharedlib_from_linklib_cmd \"$dlprefile\"\n\t            dlprefile_dlbasename=$sharedlib_from_linklib_result\n\t          fi\n\t        fi\n\t        $opt_dry_run || {\n\t          if test -n \"$dlprefile_dlbasename\"; then\n\t            eval '$ECHO \": $dlprefile_dlbasename\" >> \"$nlist\"'\n\t          else\n\t            func_warning \"Could not compute DLL name from $name\"\n\t            eval '$ECHO \": $name \" >> \"$nlist\"'\n\t          fi\n\t          func_to_tool_file \"$dlprefile\" func_convert_file_msys_to_w32\n\t          eval \"$NM \\\"$func_to_tool_file_result\\\" 2>/dev/null | $global_symbol_pipe |\n\t            $SED -e '/I __imp/d' -e 's/I __nm_/D /;s/_nm__//' >> '$nlist'\"\n\t        }\n\t      else # not an import lib\n\t        $opt_dry_run || {\n\t          eval '$ECHO \": $name \" >> \"$nlist\"'\n\t          func_to_tool_file \"$dlprefile\" func_convert_file_msys_to_w32\n\t          eval \"$NM \\\"$func_to_tool_file_result\\\" 2>/dev/null | $global_symbol_pipe >> '$nlist'\"\n\t        }\n\t      fi\n\t    ;;\n\t    *)\n\t      $opt_dry_run || {\n\t        eval '$ECHO \": $name \" >> \"$nlist\"'\n\t        func_to_tool_file \"$dlprefile\" func_convert_file_msys_to_w32\n\t        eval \"$NM \\\"$func_to_tool_file_result\\\" 2>/dev/null | $global_symbol_pipe >> '$nlist'\"\n\t      }\n\t    ;;\n          esac\n\tdone\n\n\t$opt_dry_run || {\n\t  # Make sure we have at least an empty file.\n\t  test -f \"$nlist\" || : > \"$nlist\"\n\n\t  if test -n \"$exclude_expsyms\"; then\n\t    $EGREP -v \" ($exclude_expsyms)$\" \"$nlist\" > \"$nlist\"T\n\t    $MV \"$nlist\"T \"$nlist\"\n\t  fi\n\n\t  # Try sorting and uniquifying the output.\n\t  if $GREP -v \"^: \" < \"$nlist\" |\n\t      if sort -k 3 </dev/null >/dev/null 2>&1; then\n\t\tsort -k 3\n\t      else\n\t\tsort +2\n\t      fi |\n\t      uniq > \"$nlist\"S; then\n\t    :\n\t  else\n\t    $GREP -v \"^: \" < \"$nlist\" > \"$nlist\"S\n\t  fi\n\n\t  if test -f \"$nlist\"S; then\n\t    eval \"$global_symbol_to_cdecl\"' < \"$nlist\"S >> \"$output_objdir/$my_dlsyms\"'\n\t  else\n\t    echo '/* NONE */' >> \"$output_objdir/$my_dlsyms\"\n\t  fi\n\n\t  func_show_eval '$RM \"${nlist}I\"'\n\t  if test -n \"$global_symbol_to_import\"; then\n\t    eval \"$global_symbol_to_import\"' < \"$nlist\"S > \"$nlist\"I'\n\t  fi\n\n\t  echo >> \"$output_objdir/$my_dlsyms\" \"\\\n\n/* The mapping between symbol names and symbols.  */\ntypedef struct {\n  const char *name;\n  void *address;\n} lt_dlsymlist;\nextern LT_DLSYM_CONST lt_dlsymlist\nlt_${my_prefix}_LTX_preloaded_symbols[];\\\n\"\n\n\t  if test -s \"$nlist\"I; then\n\t    echo >> \"$output_objdir/$my_dlsyms\" \"\\\nstatic void lt_syminit(void)\n{\n  LT_DLSYM_CONST lt_dlsymlist *symbol = lt_${my_prefix}_LTX_preloaded_symbols;\n  for (; symbol->name; ++symbol)\n    {\"\n\t    $SED 's/.*/      if (STREQ (symbol->name, \\\"&\\\")) symbol->address = (void *) \\&&;/' < \"$nlist\"I >> \"$output_objdir/$my_dlsyms\"\n\t    echo >> \"$output_objdir/$my_dlsyms\" \"\\\n    }\n}\"\n\t  fi\n\t  echo >> \"$output_objdir/$my_dlsyms\" \"\\\nLT_DLSYM_CONST lt_dlsymlist\nlt_${my_prefix}_LTX_preloaded_symbols[] =\n{ {\\\"$my_originator\\\", (void *) 0},\"\n\n\t  if test -s \"$nlist\"I; then\n\t    echo >> \"$output_objdir/$my_dlsyms\" \"\\\n  {\\\"@INIT@\\\", (void *) &lt_syminit},\"\n\t  fi\n\n\t  case $need_lib_prefix in\n\t  no)\n\t    eval \"$global_symbol_to_c_name_address\" < \"$nlist\" >> \"$output_objdir/$my_dlsyms\"\n\t    ;;\n\t  *)\n\t    eval \"$global_symbol_to_c_name_address_lib_prefix\" < \"$nlist\" >> \"$output_objdir/$my_dlsyms\"\n\t    ;;\n\t  esac\n\t  echo >> \"$output_objdir/$my_dlsyms\" \"\\\n  {0, (void *) 0}\n};\n\n/* This works around a problem in FreeBSD linker */\n#ifdef FREEBSD_WORKAROUND\nstatic const void *lt_preloaded_setup() {\n  return lt_${my_prefix}_LTX_preloaded_symbols;\n}\n#endif\n\n#ifdef __cplusplus\n}\n#endif\\\n\"\n\t} # !$opt_dry_run\n\n\tpic_flag_for_symtable=\n\tcase \"$compile_command \" in\n\t*\" -static \"*) ;;\n\t*)\n\t  case $host in\n\t  # compiling the symbol table file with pic_flag works around\n\t  # a FreeBSD bug that causes programs to crash when -lm is\n\t  # linked before any other PIC object.  But we must not use\n\t  # pic_flag when linking with -static.  The problem exists in\n\t  # FreeBSD 2.2.6 and is fixed in FreeBSD 3.1.\n\t  *-*-freebsd2.*|*-*-freebsd3.0*|*-*-freebsdelf3.0*)\n\t    pic_flag_for_symtable=\" $pic_flag -DFREEBSD_WORKAROUND\" ;;\n\t  *-*-hpux*)\n\t    pic_flag_for_symtable=\" $pic_flag\"  ;;\n\t  *)\n\t    $my_pic_p && pic_flag_for_symtable=\" $pic_flag\"\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n\tsymtab_cflags=\n\tfor arg in $LTCFLAGS; do\n\t  case $arg in\n\t  -pie | -fpie | -fPIE) ;;\n\t  *) func_append symtab_cflags \" $arg\" ;;\n\t  esac\n\tdone\n\n\t# Now compile the dynamic symbol file.\n\tfunc_show_eval '(cd $output_objdir && $LTCC$symtab_cflags -c$no_builtin_flag$pic_flag_for_symtable \"$my_dlsyms\")' 'exit $?'\n\n\t# Clean up the generated files.\n\tfunc_show_eval '$RM \"$output_objdir/$my_dlsyms\" \"$nlist\" \"${nlist}S\" \"${nlist}T\" \"${nlist}I\"'\n\n\t# Transform the symbol file into the correct name.\n\tsymfileobj=$output_objdir/${my_outputname}S.$objext\n\tcase $host in\n\t*cygwin* | *mingw* | *cegcc* )\n\t  if test -f \"$output_objdir/$my_outputname.def\"; then\n\t    compile_command=`$ECHO \"$compile_command\" | $SED \"s%@SYMFILE@%$output_objdir/$my_outputname.def $symfileobj%\"`\n\t    finalize_command=`$ECHO \"$finalize_command\" | $SED \"s%@SYMFILE@%$output_objdir/$my_outputname.def $symfileobj%\"`\n\t  else\n\t    compile_command=`$ECHO \"$compile_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t    finalize_command=`$ECHO \"$finalize_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t  fi\n\t  ;;\n\t*)\n\t  compile_command=`$ECHO \"$compile_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t  finalize_command=`$ECHO \"$finalize_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t  ;;\n\tesac\n\t;;\n      *)\n\tfunc_fatal_error \"unknown suffix for '$my_dlsyms'\"\n\t;;\n      esac\n    else\n      # We keep going just in case the user didn't refer to\n      # lt_preloaded_symbols.  The linker will fail if global_symbol_pipe\n      # really was required.\n\n      # Nullify the symbol file.\n      compile_command=`$ECHO \"$compile_command\" | $SED \"s% @SYMFILE@%%\"`\n      finalize_command=`$ECHO \"$finalize_command\" | $SED \"s% @SYMFILE@%%\"`\n    fi\n}\n\n# func_cygming_gnu_implib_p ARG\n# This predicate returns with zero status (TRUE) if\n# ARG is a GNU/binutils-style import library. Returns\n# with nonzero status (FALSE) otherwise.\nfunc_cygming_gnu_implib_p ()\n{\n  $debug_cmd\n\n  func_to_tool_file \"$1\" func_convert_file_msys_to_w32\n  func_cygming_gnu_implib_tmp=`$NM \"$func_to_tool_file_result\" | eval \"$global_symbol_pipe\" | $EGREP ' (_head_[A-Za-z0-9_]+_[ad]l*|[A-Za-z0-9_]+_[ad]l*_iname)$'`\n  test -n \"$func_cygming_gnu_implib_tmp\"\n}\n\n# func_cygming_ms_implib_p ARG\n# This predicate returns with zero status (TRUE) if\n# ARG is an MS-style import library. Returns\n# with nonzero status (FALSE) otherwise.\nfunc_cygming_ms_implib_p ()\n{\n  $debug_cmd\n\n  func_to_tool_file \"$1\" func_convert_file_msys_to_w32\n  func_cygming_ms_implib_tmp=`$NM \"$func_to_tool_file_result\" | eval \"$global_symbol_pipe\" | $GREP '_NULL_IMPORT_DESCRIPTOR'`\n  test -n \"$func_cygming_ms_implib_tmp\"\n}\n\n# func_win32_libid arg\n# return the library type of file 'arg'\n#\n# Need a lot of goo to handle *both* DLLs and import libs\n# Has to be a shell function in order to 'eat' the argument\n# that is supplied when $file_magic_command is called.\n# Despite the name, also deal with 64 bit binaries.\nfunc_win32_libid ()\n{\n  $debug_cmd\n\n  win32_libid_type=unknown\n  win32_fileres=`file -L $1 2>/dev/null`\n  case $win32_fileres in\n  *ar\\ archive\\ import\\ library*) # definitely import\n    win32_libid_type=\"x86 archive import\"\n    ;;\n  *ar\\ archive*) # could be an import, or static\n    # Keep the egrep pattern in sync with the one in _LT_CHECK_MAGIC_METHOD.\n    if eval $OBJDUMP -f $1 | $SED -e '10q' 2>/dev/null |\n       $EGREP 'file format (pei*-i386(.*architecture: i386)?|pe-arm-wince|pe-x86-64)' >/dev/null; then\n      case $nm_interface in\n      \"MS dumpbin\")\n\tif func_cygming_ms_implib_p \"$1\" ||\n\t   func_cygming_gnu_implib_p \"$1\"\n\tthen\n\t  win32_nmres=import\n\telse\n\t  win32_nmres=\n\tfi\n\t;;\n      *)\n\tfunc_to_tool_file \"$1\" func_convert_file_msys_to_w32\n\twin32_nmres=`eval $NM -f posix -A \\\"$func_to_tool_file_result\\\" |\n\t  $SED -n -e '\n\t    1,100{\n\t\t/ I /{\n\t\t    s|.*|import|\n\t\t    p\n\t\t    q\n\t\t}\n\t    }'`\n\t;;\n      esac\n      case $win32_nmres in\n      import*)  win32_libid_type=\"x86 archive import\";;\n      *)        win32_libid_type=\"x86 archive static\";;\n      esac\n    fi\n    ;;\n  *DLL*)\n    win32_libid_type=\"x86 DLL\"\n    ;;\n  *executable*) # but shell scripts are \"executable\" too...\n    case $win32_fileres in\n    *MS\\ Windows\\ PE\\ Intel*)\n      win32_libid_type=\"x86 DLL\"\n      ;;\n    esac\n    ;;\n  esac\n  $ECHO \"$win32_libid_type\"\n}\n\n# func_cygming_dll_for_implib ARG\n#\n# Platform-specific function to extract the\n# name of the DLL associated with the specified\n# import library ARG.\n# Invoked by eval'ing the libtool variable\n#    $sharedlib_from_linklib_cmd\n# Result is available in the variable\n#    $sharedlib_from_linklib_result\nfunc_cygming_dll_for_implib ()\n{\n  $debug_cmd\n\n  sharedlib_from_linklib_result=`$DLLTOOL --identify-strict --identify \"$1\"`\n}\n\n# func_cygming_dll_for_implib_fallback_core SECTION_NAME LIBNAMEs\n#\n# The is the core of a fallback implementation of a\n# platform-specific function to extract the name of the\n# DLL associated with the specified import library LIBNAME.\n#\n# SECTION_NAME is either .idata$6 or .idata$7, depending\n# on the platform and compiler that created the implib.\n#\n# Echos the name of the DLL associated with the\n# specified import library.\nfunc_cygming_dll_for_implib_fallback_core ()\n{\n  $debug_cmd\n\n  match_literal=`$ECHO \"$1\" | $SED \"$sed_make_literal_regex\"`\n  $OBJDUMP -s --section \"$1\" \"$2\" 2>/dev/null |\n    $SED '/^Contents of section '\"$match_literal\"':/{\n      # Place marker at beginning of archive member dllname section\n      s/.*/====MARK====/\n      p\n      d\n    }\n    # These lines can sometimes be longer than 43 characters, but\n    # are always uninteresting\n    /:[\t ]*file format pe[i]\\{,1\\}-/d\n    /^In archive [^:]*:/d\n    # Ensure marker is printed\n    /^====MARK====/p\n    # Remove all lines with less than 43 characters\n    /^.\\{43\\}/!d\n    # From remaining lines, remove first 43 characters\n    s/^.\\{43\\}//' |\n    $SED -n '\n      # Join marker and all lines until next marker into a single line\n      /^====MARK====/ b para\n      H\n      $ b para\n      b\n      :para\n      x\n      s/\\n//g\n      # Remove the marker\n      s/^====MARK====//\n      # Remove trailing dots and whitespace\n      s/[\\. \\t]*$//\n      # Print\n      /./p' |\n    # we now have a list, one entry per line, of the stringified\n    # contents of the appropriate section of all members of the\n    # archive that possess that section. Heuristic: eliminate\n    # all those that have a first or second character that is\n    # a '.' (that is, objdump's representation of an unprintable\n    # character.) This should work for all archives with less than\n    # 0x302f exports -- but will fail for DLLs whose name actually\n    # begins with a literal '.' or a single character followed by\n    # a '.'.\n    #\n    # Of those that remain, print the first one.\n    $SED -e '/^\\./d;/^.\\./d;q'\n}\n\n# func_cygming_dll_for_implib_fallback ARG\n# Platform-specific function to extract the\n# name of the DLL associated with the specified\n# import library ARG.\n#\n# This fallback implementation is for use when $DLLTOOL\n# does not support the --identify-strict option.\n# Invoked by eval'ing the libtool variable\n#    $sharedlib_from_linklib_cmd\n# Result is available in the variable\n#    $sharedlib_from_linklib_result\nfunc_cygming_dll_for_implib_fallback ()\n{\n  $debug_cmd\n\n  if func_cygming_gnu_implib_p \"$1\"; then\n    # binutils import library\n    sharedlib_from_linklib_result=`func_cygming_dll_for_implib_fallback_core '.idata$7' \"$1\"`\n  elif func_cygming_ms_implib_p \"$1\"; then\n    # ms-generated import library\n    sharedlib_from_linklib_result=`func_cygming_dll_for_implib_fallback_core '.idata$6' \"$1\"`\n  else\n    # unknown\n    sharedlib_from_linklib_result=\n  fi\n}\n\n\n# func_extract_an_archive dir oldlib\nfunc_extract_an_archive ()\n{\n    $debug_cmd\n\n    f_ex_an_ar_dir=$1; shift\n    f_ex_an_ar_oldlib=$1\n    if test yes = \"$lock_old_archive_extraction\"; then\n      lockfile=$f_ex_an_ar_oldlib.lock\n      until $opt_dry_run || ln \"$progpath\" \"$lockfile\" 2>/dev/null; do\n\tfunc_echo \"Waiting for $lockfile to be removed\"\n\tsleep 2\n      done\n    fi\n    func_show_eval \"(cd \\$f_ex_an_ar_dir && $AR x \\\"\\$f_ex_an_ar_oldlib\\\")\" \\\n\t\t   'stat=$?; rm -f \"$lockfile\"; exit $stat'\n    if test yes = \"$lock_old_archive_extraction\"; then\n      $opt_dry_run || rm -f \"$lockfile\"\n    fi\n    if ($AR t \"$f_ex_an_ar_oldlib\" | sort | sort -uc >/dev/null 2>&1); then\n     :\n    else\n      func_fatal_error \"object name conflicts in archive: $f_ex_an_ar_dir/$f_ex_an_ar_oldlib\"\n    fi\n}\n\n\n# func_extract_archives gentop oldlib ...\nfunc_extract_archives ()\n{\n    $debug_cmd\n\n    my_gentop=$1; shift\n    my_oldlibs=${1+\"$@\"}\n    my_oldobjs=\n    my_xlib=\n    my_xabs=\n    my_xdir=\n\n    for my_xlib in $my_oldlibs; do\n      # Extract the objects.\n      case $my_xlib in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) my_xabs=$my_xlib ;;\n\t*) my_xabs=`pwd`\"/$my_xlib\" ;;\n      esac\n      func_basename \"$my_xlib\"\n      my_xlib=$func_basename_result\n      my_xlib_u=$my_xlib\n      while :; do\n        case \" $extracted_archives \" in\n\t*\" $my_xlib_u \"*)\n\t  func_arith $extracted_serial + 1\n\t  extracted_serial=$func_arith_result\n\t  my_xlib_u=lt$extracted_serial-$my_xlib ;;\n\t*) break ;;\n\tesac\n      done\n      extracted_archives=\"$extracted_archives $my_xlib_u\"\n      my_xdir=$my_gentop/$my_xlib_u\n\n      func_mkdir_p \"$my_xdir\"\n\n      case $host in\n      *-darwin*)\n\tfunc_verbose \"Extracting $my_xabs\"\n\t# Do not bother doing anything if just a dry run\n\t$opt_dry_run || {\n\t  darwin_orig_dir=`pwd`\n\t  cd $my_xdir || exit $?\n\t  darwin_archive=$my_xabs\n\t  darwin_curdir=`pwd`\n\t  func_basename \"$darwin_archive\"\n\t  darwin_base_archive=$func_basename_result\n\t  darwin_arches=`$LIPO -info \"$darwin_archive\" 2>/dev/null | $GREP Architectures 2>/dev/null || true`\n\t  if test -n \"$darwin_arches\"; then\n\t    darwin_arches=`$ECHO \"$darwin_arches\" | $SED -e 's/.*are://'`\n\t    darwin_arch=\n\t    func_verbose \"$darwin_base_archive has multiple architectures $darwin_arches\"\n\t    for darwin_arch in  $darwin_arches; do\n\t      func_mkdir_p \"unfat-$$/$darwin_base_archive-$darwin_arch\"\n\t      $LIPO -thin $darwin_arch -output \"unfat-$$/$darwin_base_archive-$darwin_arch/$darwin_base_archive\" \"$darwin_archive\"\n\t      cd \"unfat-$$/$darwin_base_archive-$darwin_arch\"\n\t      func_extract_an_archive \"`pwd`\" \"$darwin_base_archive\"\n\t      cd \"$darwin_curdir\"\n\t      $RM \"unfat-$$/$darwin_base_archive-$darwin_arch/$darwin_base_archive\"\n\t    done # $darwin_arches\n            ## Okay now we've a bunch of thin objects, gotta fatten them up :)\n\t    darwin_filelist=`find unfat-$$ -type f -name \\*.o -print -o -name \\*.lo -print | $SED -e \"$sed_basename\" | sort -u`\n\t    darwin_file=\n\t    darwin_files=\n\t    for darwin_file in $darwin_filelist; do\n\t      darwin_files=`find unfat-$$ -name $darwin_file -print | sort | $NL2SP`\n\t      $LIPO -create -output \"$darwin_file\" $darwin_files\n\t    done # $darwin_filelist\n\t    $RM -rf unfat-$$\n\t    cd \"$darwin_orig_dir\"\n\t  else\n\t    cd $darwin_orig_dir\n\t    func_extract_an_archive \"$my_xdir\" \"$my_xabs\"\n\t  fi # $darwin_arches\n\t} # !$opt_dry_run\n\t;;\n      *)\n        func_extract_an_archive \"$my_xdir\" \"$my_xabs\"\n\t;;\n      esac\n      my_oldobjs=\"$my_oldobjs \"`find $my_xdir -name \\*.$objext -print -o -name \\*.lo -print | sort | $NL2SP`\n    done\n\n    func_extract_archives_result=$my_oldobjs\n}\n\n\n# func_emit_wrapper [arg=no]\n#\n# Emit a libtool wrapper script on stdout.\n# Don't directly open a file because we may want to\n# incorporate the script contents within a cygwin/mingw\n# wrapper executable.  Must ONLY be called from within\n# func_mode_link because it depends on a number of variables\n# set therein.\n#\n# ARG is the value that the WRAPPER_SCRIPT_BELONGS_IN_OBJDIR\n# variable will take.  If 'yes', then the emitted script\n# will assume that the directory where it is stored is\n# the $objdir directory.  This is a cygwin/mingw-specific\n# behavior.\nfunc_emit_wrapper ()\n{\n\tfunc_emit_wrapper_arg1=${1-no}\n\n\t$ECHO \"\\\n#! $SHELL\n\n# $output - temporary wrapper script for $objdir/$outputname\n# Generated by $PROGRAM (GNU $PACKAGE) $VERSION\n#\n# The $output program cannot be directly executed until all the libtool\n# libraries that it depends on are installed.\n#\n# This wrapper script should never be moved out of the build directory.\n# If it is, it will not operate correctly.\n\n# Sed substitution that helps us do robust quoting.  It backslashifies\n# metacharacters that are still active within double-quoted strings.\nsed_quote_subst='$sed_quote_subst'\n\n# Be Bourne compatible\nif test -n \\\"\\${ZSH_VERSION+set}\\\" && (emulate sh) >/dev/null 2>&1; then\n  emulate sh\n  NULLCMD=:\n  # Zsh 3.x and 4.x performs word splitting on \\${1+\\\"\\$@\\\"}, which\n  # is contrary to our usage.  Disable this feature.\n  alias -g '\\${1+\\\"\\$@\\\"}'='\\\"\\$@\\\"'\n  setopt NO_GLOB_SUBST\nelse\n  case \\`(set -o) 2>/dev/null\\` in *posix*) set -o posix;; esac\nfi\nBIN_SH=xpg4; export BIN_SH # for Tru64\nDUALCASE=1; export DUALCASE # for MKS sh\n\n# The HP-UX ksh and POSIX shell print the target directory to stdout\n# if CDPATH is set.\n(unset CDPATH) >/dev/null 2>&1 && unset CDPATH\n\nrelink_command=\\\"$relink_command\\\"\n\n# This environment variable determines our operation mode.\nif test \\\"\\$libtool_install_magic\\\" = \\\"$magic\\\"; then\n  # install mode needs the following variables:\n  generated_by_libtool_version='$macro_version'\n  notinst_deplibs='$notinst_deplibs'\nelse\n  # When we are sourced in execute mode, \\$file and \\$ECHO are already set.\n  if test \\\"\\$libtool_execute_magic\\\" != \\\"$magic\\\"; then\n    file=\\\"\\$0\\\"\"\n\n    qECHO=`$ECHO \"$ECHO\" | $SED \"$sed_quote_subst\"`\n    $ECHO \"\\\n\n# A function that is used when there is no print builtin or printf.\nfunc_fallback_echo ()\n{\n  eval 'cat <<_LTECHO_EOF\n\\$1\n_LTECHO_EOF'\n}\n    ECHO=\\\"$qECHO\\\"\n  fi\n\n# Very basic option parsing. These options are (a) specific to\n# the libtool wrapper, (b) are identical between the wrapper\n# /script/ and the wrapper /executable/ that is used only on\n# windows platforms, and (c) all begin with the string \"--lt-\"\n# (application programs are unlikely to have options that match\n# this pattern).\n#\n# There are only two supported options: --lt-debug and\n# --lt-dump-script. There is, deliberately, no --lt-help.\n#\n# The first argument to this parsing function should be the\n# script's $0 value, followed by \"$@\".\nlt_option_debug=\nfunc_parse_lt_options ()\n{\n  lt_script_arg0=\\$0\n  shift\n  for lt_opt\n  do\n    case \\\"\\$lt_opt\\\" in\n    --lt-debug) lt_option_debug=1 ;;\n    --lt-dump-script)\n        lt_dump_D=\\`\\$ECHO \\\"X\\$lt_script_arg0\\\" | $SED -e 's/^X//' -e 's%/[^/]*$%%'\\`\n        test \\\"X\\$lt_dump_D\\\" = \\\"X\\$lt_script_arg0\\\" && lt_dump_D=.\n        lt_dump_F=\\`\\$ECHO \\\"X\\$lt_script_arg0\\\" | $SED -e 's/^X//' -e 's%^.*/%%'\\`\n        cat \\\"\\$lt_dump_D/\\$lt_dump_F\\\"\n        exit 0\n      ;;\n    --lt-*)\n        \\$ECHO \\\"Unrecognized --lt- option: '\\$lt_opt'\\\" 1>&2\n        exit 1\n      ;;\n    esac\n  done\n\n  # Print the debug banner immediately:\n  if test -n \\\"\\$lt_option_debug\\\"; then\n    echo \\\"$outputname:$output:\\$LINENO: libtool wrapper (GNU $PACKAGE) $VERSION\\\" 1>&2\n  fi\n}\n\n# Used when --lt-debug. Prints its arguments to stdout\n# (redirection is the responsibility of the caller)\nfunc_lt_dump_args ()\n{\n  lt_dump_args_N=1;\n  for lt_arg\n  do\n    \\$ECHO \\\"$outputname:$output:\\$LINENO: newargv[\\$lt_dump_args_N]: \\$lt_arg\\\"\n    lt_dump_args_N=\\`expr \\$lt_dump_args_N + 1\\`\n  done\n}\n\n# Core function for launching the target application\nfunc_exec_program_core ()\n{\n\"\n  case $host in\n  # Backslashes separate directories on plain windows\n  *-*-mingw | *-*-os2* | *-cegcc*)\n    $ECHO \"\\\n      if test -n \\\"\\$lt_option_debug\\\"; then\n        \\$ECHO \\\"$outputname:$output:\\$LINENO: newargv[0]: \\$progdir\\\\\\\\\\$program\\\" 1>&2\n        func_lt_dump_args \\${1+\\\"\\$@\\\"} 1>&2\n      fi\n      exec \\\"\\$progdir\\\\\\\\\\$program\\\" \\${1+\\\"\\$@\\\"}\n\"\n    ;;\n\n  *)\n    $ECHO \"\\\n      if test -n \\\"\\$lt_option_debug\\\"; then\n        \\$ECHO \\\"$outputname:$output:\\$LINENO: newargv[0]: \\$progdir/\\$program\\\" 1>&2\n        func_lt_dump_args \\${1+\\\"\\$@\\\"} 1>&2\n      fi\n      exec \\\"\\$progdir/\\$program\\\" \\${1+\\\"\\$@\\\"}\n\"\n    ;;\n  esac\n  $ECHO \"\\\n      \\$ECHO \\\"\\$0: cannot exec \\$program \\$*\\\" 1>&2\n      exit 1\n}\n\n# A function to encapsulate launching the target application\n# Strips options in the --lt-* namespace from \\$@ and\n# launches target application with the remaining arguments.\nfunc_exec_program ()\n{\n  case \\\" \\$* \\\" in\n  *\\\\ --lt-*)\n    for lt_wr_arg\n    do\n      case \\$lt_wr_arg in\n      --lt-*) ;;\n      *) set x \\\"\\$@\\\" \\\"\\$lt_wr_arg\\\"; shift;;\n      esac\n      shift\n    done ;;\n  esac\n  func_exec_program_core \\${1+\\\"\\$@\\\"}\n}\n\n  # Parse options\n  func_parse_lt_options \\\"\\$0\\\" \\${1+\\\"\\$@\\\"}\n\n  # Find the directory that this script lives in.\n  thisdir=\\`\\$ECHO \\\"\\$file\\\" | $SED 's%/[^/]*$%%'\\`\n  test \\\"x\\$thisdir\\\" = \\\"x\\$file\\\" && thisdir=.\n\n  # Follow symbolic links until we get to the real thisdir.\n  file=\\`ls -ld \\\"\\$file\\\" | $SED -n 's/.*-> //p'\\`\n  while test -n \\\"\\$file\\\"; do\n    destdir=\\`\\$ECHO \\\"\\$file\\\" | $SED 's%/[^/]*\\$%%'\\`\n\n    # If there was a directory component, then change thisdir.\n    if test \\\"x\\$destdir\\\" != \\\"x\\$file\\\"; then\n      case \\\"\\$destdir\\\" in\n      [\\\\\\\\/]* | [A-Za-z]:[\\\\\\\\/]*) thisdir=\\\"\\$destdir\\\" ;;\n      *) thisdir=\\\"\\$thisdir/\\$destdir\\\" ;;\n      esac\n    fi\n\n    file=\\`\\$ECHO \\\"\\$file\\\" | $SED 's%^.*/%%'\\`\n    file=\\`ls -ld \\\"\\$thisdir/\\$file\\\" | $SED -n 's/.*-> //p'\\`\n  done\n\n  # Usually 'no', except on cygwin/mingw when embedded into\n  # the cwrapper.\n  WRAPPER_SCRIPT_BELONGS_IN_OBJDIR=$func_emit_wrapper_arg1\n  if test \\\"\\$WRAPPER_SCRIPT_BELONGS_IN_OBJDIR\\\" = \\\"yes\\\"; then\n    # special case for '.'\n    if test \\\"\\$thisdir\\\" = \\\".\\\"; then\n      thisdir=\\`pwd\\`\n    fi\n    # remove .libs from thisdir\n    case \\\"\\$thisdir\\\" in\n    *[\\\\\\\\/]$objdir ) thisdir=\\`\\$ECHO \\\"\\$thisdir\\\" | $SED 's%[\\\\\\\\/][^\\\\\\\\/]*$%%'\\` ;;\n    $objdir )   thisdir=. ;;\n    esac\n  fi\n\n  # Try to get the absolute directory name.\n  absdir=\\`cd \\\"\\$thisdir\\\" && pwd\\`\n  test -n \\\"\\$absdir\\\" && thisdir=\\\"\\$absdir\\\"\n\"\n\n\tif test yes = \"$fast_install\"; then\n\t  $ECHO \"\\\n  program=lt-'$outputname'$exeext\n  progdir=\\\"\\$thisdir/$objdir\\\"\n\n  if test ! -f \\\"\\$progdir/\\$program\\\" ||\n     { file=\\`ls -1dt \\\"\\$progdir/\\$program\\\" \\\"\\$progdir/../\\$program\\\" 2>/dev/null | $SED 1q\\`; \\\\\n       test \\\"X\\$file\\\" != \\\"X\\$progdir/\\$program\\\"; }; then\n\n    file=\\\"\\$\\$-\\$program\\\"\n\n    if test ! -d \\\"\\$progdir\\\"; then\n      $MKDIR \\\"\\$progdir\\\"\n    else\n      $RM \\\"\\$progdir/\\$file\\\"\n    fi\"\n\n\t  $ECHO \"\\\n\n    # relink executable if necessary\n    if test -n \\\"\\$relink_command\\\"; then\n      if relink_command_output=\\`eval \\$relink_command 2>&1\\`; then :\n      else\n\t\\$ECHO \\\"\\$relink_command_output\\\" >&2\n\t$RM \\\"\\$progdir/\\$file\\\"\n\texit 1\n      fi\n    fi\n\n    $MV \\\"\\$progdir/\\$file\\\" \\\"\\$progdir/\\$program\\\" 2>/dev/null ||\n    { $RM \\\"\\$progdir/\\$program\\\";\n      $MV \\\"\\$progdir/\\$file\\\" \\\"\\$progdir/\\$program\\\"; }\n    $RM \\\"\\$progdir/\\$file\\\"\n  fi\"\n\telse\n\t  $ECHO \"\\\n  program='$outputname'\n  progdir=\\\"\\$thisdir/$objdir\\\"\n\"\n\tfi\n\n\t$ECHO \"\\\n\n  if test -f \\\"\\$progdir/\\$program\\\"; then\"\n\n\t# fixup the dll searchpath if we need to.\n\t#\n\t# Fix the DLL searchpath if we need to.  Do this before prepending\n\t# to shlibpath, because on Windows, both are PATH and uninstalled\n\t# libraries must come first.\n\tif test -n \"$dllsearchpath\"; then\n\t  $ECHO \"\\\n    # Add the dll search path components to the executable PATH\n    PATH=$dllsearchpath:\\$PATH\n\"\n\tfi\n\n\t# Export our shlibpath_var if we have one.\n\tif test yes = \"$shlibpath_overrides_runpath\" && test -n \"$shlibpath_var\" && test -n \"$temp_rpath\"; then\n\t  $ECHO \"\\\n    # Add our own library path to $shlibpath_var\n    $shlibpath_var=\\\"$temp_rpath\\$$shlibpath_var\\\"\n\n    # Some systems cannot cope with colon-terminated $shlibpath_var\n    # The second colon is a workaround for a bug in BeOS R4 sed\n    $shlibpath_var=\\`\\$ECHO \\\"\\$$shlibpath_var\\\" | $SED 's/::*\\$//'\\`\n\n    export $shlibpath_var\n\"\n\tfi\n\n\t$ECHO \"\\\n    if test \\\"\\$libtool_execute_magic\\\" != \\\"$magic\\\"; then\n      # Run the actual program with our arguments.\n      func_exec_program \\${1+\\\"\\$@\\\"}\n    fi\n  else\n    # The program doesn't exist.\n    \\$ECHO \\\"\\$0: error: '\\$progdir/\\$program' does not exist\\\" 1>&2\n    \\$ECHO \\\"This script is just a wrapper for \\$program.\\\" 1>&2\n    \\$ECHO \\\"See the $PACKAGE documentation for more information.\\\" 1>&2\n    exit 1\n  fi\nfi\\\n\"\n}\n\n\n# func_emit_cwrapperexe_src\n# emit the source code for a wrapper executable on stdout\n# Must ONLY be called from within func_mode_link because\n# it depends on a number of variable set therein.\nfunc_emit_cwrapperexe_src ()\n{\n\tcat <<EOF\n\n/* $cwrappersource - temporary wrapper executable for $objdir/$outputname\n   Generated by $PROGRAM (GNU $PACKAGE) $VERSION\n\n   The $output program cannot be directly executed until all the libtool\n   libraries that it depends on are installed.\n\n   This wrapper executable should never be moved out of the build directory.\n   If it is, it will not operate correctly.\n*/\nEOF\n\t    cat <<\"EOF\"\n#ifdef _MSC_VER\n# define _CRT_SECURE_NO_DEPRECATE 1\n#endif\n#include <stdio.h>\n#include <stdlib.h>\n#ifdef _MSC_VER\n# include <direct.h>\n# include <process.h>\n# include <io.h>\n#else\n# include <unistd.h>\n# include <stdint.h>\n# ifdef __CYGWIN__\n#  include <io.h>\n# endif\n#endif\n#include <malloc.h>\n#include <stdarg.h>\n#include <assert.h>\n#include <string.h>\n#include <ctype.h>\n#include <errno.h>\n#include <fcntl.h>\n#include <sys/stat.h>\n\n#define STREQ(s1, s2) (strcmp ((s1), (s2)) == 0)\n\n/* declarations of non-ANSI functions */\n#if defined __MINGW32__\n# ifdef __STRICT_ANSI__\nint _putenv (const char *);\n# endif\n#elif defined __CYGWIN__\n# ifdef __STRICT_ANSI__\nchar *realpath (const char *, char *);\nint putenv (char *);\nint setenv (const char *, const char *, int);\n# endif\n/* #elif defined other_platform || defined ... */\n#endif\n\n/* portability defines, excluding path handling macros */\n#if defined _MSC_VER\n# define setmode _setmode\n# define stat    _stat\n# define chmod   _chmod\n# define getcwd  _getcwd\n# define putenv  _putenv\n# define S_IXUSR _S_IEXEC\n#elif defined __MINGW32__\n# define setmode _setmode\n# define stat    _stat\n# define chmod   _chmod\n# define getcwd  _getcwd\n# define putenv  _putenv\n#elif defined __CYGWIN__\n# define HAVE_SETENV\n# define FOPEN_WB \"wb\"\n/* #elif defined other platforms ... */\n#endif\n\n#if defined PATH_MAX\n# define LT_PATHMAX PATH_MAX\n#elif defined MAXPATHLEN\n# define LT_PATHMAX MAXPATHLEN\n#else\n# define LT_PATHMAX 1024\n#endif\n\n#ifndef S_IXOTH\n# define S_IXOTH 0\n#endif\n#ifndef S_IXGRP\n# define S_IXGRP 0\n#endif\n\n/* path handling portability macros */\n#ifndef DIR_SEPARATOR\n# define DIR_SEPARATOR '/'\n# define PATH_SEPARATOR ':'\n#endif\n\n#if defined _WIN32 || defined __MSDOS__ || defined __DJGPP__ || \\\n  defined __OS2__\n# define HAVE_DOS_BASED_FILE_SYSTEM\n# define FOPEN_WB \"wb\"\n# ifndef DIR_SEPARATOR_2\n#  define DIR_SEPARATOR_2 '\\\\'\n# endif\n# ifndef PATH_SEPARATOR_2\n#  define PATH_SEPARATOR_2 ';'\n# endif\n#endif\n\n#ifndef DIR_SEPARATOR_2\n# define IS_DIR_SEPARATOR(ch) ((ch) == DIR_SEPARATOR)\n#else /* DIR_SEPARATOR_2 */\n# define IS_DIR_SEPARATOR(ch) \\\n\t(((ch) == DIR_SEPARATOR) || ((ch) == DIR_SEPARATOR_2))\n#endif /* DIR_SEPARATOR_2 */\n\n#ifndef PATH_SEPARATOR_2\n# define IS_PATH_SEPARATOR(ch) ((ch) == PATH_SEPARATOR)\n#else /* PATH_SEPARATOR_2 */\n# define IS_PATH_SEPARATOR(ch) ((ch) == PATH_SEPARATOR_2)\n#endif /* PATH_SEPARATOR_2 */\n\n#ifndef FOPEN_WB\n# define FOPEN_WB \"w\"\n#endif\n#ifndef _O_BINARY\n# define _O_BINARY 0\n#endif\n\n#define XMALLOC(type, num)      ((type *) xmalloc ((num) * sizeof(type)))\n#define XFREE(stale) do { \\\n  if (stale) { free (stale); stale = 0; } \\\n} while (0)\n\n#if defined LT_DEBUGWRAPPER\nstatic int lt_debug = 1;\n#else\nstatic int lt_debug = 0;\n#endif\n\nconst char *program_name = \"libtool-wrapper\"; /* in case xstrdup fails */\n\nvoid *xmalloc (size_t num);\nchar *xstrdup (const char *string);\nconst char *base_name (const char *name);\nchar *find_executable (const char *wrapper);\nchar *chase_symlinks (const char *pathspec);\nint make_executable (const char *path);\nint check_executable (const char *path);\nchar *strendzap (char *str, const char *pat);\nvoid lt_debugprintf (const char *file, int line, const char *fmt, ...);\nvoid lt_fatal (const char *file, int line, const char *message, ...);\nstatic const char *nonnull (const char *s);\nstatic const char *nonempty (const char *s);\nvoid lt_setenv (const char *name, const char *value);\nchar *lt_extend_str (const char *orig_value, const char *add, int to_end);\nvoid lt_update_exe_path (const char *name, const char *value);\nvoid lt_update_lib_path (const char *name, const char *value);\nchar **prepare_spawn (char **argv);\nvoid lt_dump_script (FILE *f);\nEOF\n\n\t    cat <<EOF\n#if __GNUC__ < 4 || (__GNUC__ == 4 && __GNUC_MINOR__ < 5)\n# define externally_visible volatile\n#else\n# define externally_visible __attribute__((externally_visible)) volatile\n#endif\nexternally_visible const char * MAGIC_EXE = \"$magic_exe\";\nconst char * LIB_PATH_VARNAME = \"$shlibpath_var\";\nEOF\n\n\t    if test yes = \"$shlibpath_overrides_runpath\" && test -n \"$shlibpath_var\" && test -n \"$temp_rpath\"; then\n              func_to_host_path \"$temp_rpath\"\n\t      cat <<EOF\nconst char * LIB_PATH_VALUE   = \"$func_to_host_path_result\";\nEOF\n\t    else\n\t      cat <<\"EOF\"\nconst char * LIB_PATH_VALUE   = \"\";\nEOF\n\t    fi\n\n\t    if test -n \"$dllsearchpath\"; then\n              func_to_host_path \"$dllsearchpath:\"\n\t      cat <<EOF\nconst char * EXE_PATH_VARNAME = \"PATH\";\nconst char * EXE_PATH_VALUE   = \"$func_to_host_path_result\";\nEOF\n\t    else\n\t      cat <<\"EOF\"\nconst char * EXE_PATH_VARNAME = \"\";\nconst char * EXE_PATH_VALUE   = \"\";\nEOF\n\t    fi\n\n\t    if test yes = \"$fast_install\"; then\n\t      cat <<EOF\nconst char * TARGET_PROGRAM_NAME = \"lt-$outputname\"; /* hopefully, no .exe */\nEOF\n\t    else\n\t      cat <<EOF\nconst char * TARGET_PROGRAM_NAME = \"$outputname\"; /* hopefully, no .exe */\nEOF\n\t    fi\n\n\n\t    cat <<\"EOF\"\n\n#define LTWRAPPER_OPTION_PREFIX         \"--lt-\"\n\nstatic const char *ltwrapper_option_prefix = LTWRAPPER_OPTION_PREFIX;\nstatic const char *dumpscript_opt       = LTWRAPPER_OPTION_PREFIX \"dump-script\";\nstatic const char *debug_opt            = LTWRAPPER_OPTION_PREFIX \"debug\";\n\nint\nmain (int argc, char *argv[])\n{\n  char **newargz;\n  int  newargc;\n  char *tmp_pathspec;\n  char *actual_cwrapper_path;\n  char *actual_cwrapper_name;\n  char *target_name;\n  char *lt_argv_zero;\n  int rval = 127;\n\n  int i;\n\n  program_name = (char *) xstrdup (base_name (argv[0]));\n  newargz = XMALLOC (char *, (size_t) argc + 1);\n\n  /* very simple arg parsing; don't want to rely on getopt\n   * also, copy all non cwrapper options to newargz, except\n   * argz[0], which is handled differently\n   */\n  newargc=0;\n  for (i = 1; i < argc; i++)\n    {\n      if (STREQ (argv[i], dumpscript_opt))\n\t{\nEOF\n\t    case $host in\n\t      *mingw* | *cygwin* )\n\t\t# make stdout use \"unix\" line endings\n\t\techo \"          setmode(1,_O_BINARY);\"\n\t\t;;\n\t      esac\n\n\t    cat <<\"EOF\"\n\t  lt_dump_script (stdout);\n\t  return 0;\n\t}\n      if (STREQ (argv[i], debug_opt))\n\t{\n          lt_debug = 1;\n          continue;\n\t}\n      if (STREQ (argv[i], ltwrapper_option_prefix))\n        {\n          /* however, if there is an option in the LTWRAPPER_OPTION_PREFIX\n             namespace, but it is not one of the ones we know about and\n             have already dealt with, above (inluding dump-script), then\n             report an error. Otherwise, targets might begin to believe\n             they are allowed to use options in the LTWRAPPER_OPTION_PREFIX\n             namespace. The first time any user complains about this, we'll\n             need to make LTWRAPPER_OPTION_PREFIX a configure-time option\n             or a configure.ac-settable value.\n           */\n          lt_fatal (__FILE__, __LINE__,\n\t\t    \"unrecognized %s option: '%s'\",\n                    ltwrapper_option_prefix, argv[i]);\n        }\n      /* otherwise ... */\n      newargz[++newargc] = xstrdup (argv[i]);\n    }\n  newargz[++newargc] = NULL;\n\nEOF\n\t    cat <<EOF\n  /* The GNU banner must be the first non-error debug message */\n  lt_debugprintf (__FILE__, __LINE__, \"libtool wrapper (GNU $PACKAGE) $VERSION\\n\");\nEOF\n\t    cat <<\"EOF\"\n  lt_debugprintf (__FILE__, __LINE__, \"(main) argv[0]: %s\\n\", argv[0]);\n  lt_debugprintf (__FILE__, __LINE__, \"(main) program_name: %s\\n\", program_name);\n\n  tmp_pathspec = find_executable (argv[0]);\n  if (tmp_pathspec == NULL)\n    lt_fatal (__FILE__, __LINE__, \"couldn't find %s\", argv[0]);\n  lt_debugprintf (__FILE__, __LINE__,\n                  \"(main) found exe (before symlink chase) at: %s\\n\",\n\t\t  tmp_pathspec);\n\n  actual_cwrapper_path = chase_symlinks (tmp_pathspec);\n  lt_debugprintf (__FILE__, __LINE__,\n                  \"(main) found exe (after symlink chase) at: %s\\n\",\n\t\t  actual_cwrapper_path);\n  XFREE (tmp_pathspec);\n\n  actual_cwrapper_name = xstrdup (base_name (actual_cwrapper_path));\n  strendzap (actual_cwrapper_path, actual_cwrapper_name);\n\n  /* wrapper name transforms */\n  strendzap (actual_cwrapper_name, \".exe\");\n  tmp_pathspec = lt_extend_str (actual_cwrapper_name, \".exe\", 1);\n  XFREE (actual_cwrapper_name);\n  actual_cwrapper_name = tmp_pathspec;\n  tmp_pathspec = 0;\n\n  /* target_name transforms -- use actual target program name; might have lt- prefix */\n  target_name = xstrdup (base_name (TARGET_PROGRAM_NAME));\n  strendzap (target_name, \".exe\");\n  tmp_pathspec = lt_extend_str (target_name, \".exe\", 1);\n  XFREE (target_name);\n  target_name = tmp_pathspec;\n  tmp_pathspec = 0;\n\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(main) libtool target name: %s\\n\",\n\t\t  target_name);\nEOF\n\n\t    cat <<EOF\n  newargz[0] =\n    XMALLOC (char, (strlen (actual_cwrapper_path) +\n\t\t    strlen (\"$objdir\") + 1 + strlen (actual_cwrapper_name) + 1));\n  strcpy (newargz[0], actual_cwrapper_path);\n  strcat (newargz[0], \"$objdir\");\n  strcat (newargz[0], \"/\");\nEOF\n\n\t    cat <<\"EOF\"\n  /* stop here, and copy so we don't have to do this twice */\n  tmp_pathspec = xstrdup (newargz[0]);\n\n  /* do NOT want the lt- prefix here, so use actual_cwrapper_name */\n  strcat (newargz[0], actual_cwrapper_name);\n\n  /* DO want the lt- prefix here if it exists, so use target_name */\n  lt_argv_zero = lt_extend_str (tmp_pathspec, target_name, 1);\n  XFREE (tmp_pathspec);\n  tmp_pathspec = NULL;\nEOF\n\n\t    case $host_os in\n\t      mingw*)\n\t    cat <<\"EOF\"\n  {\n    char* p;\n    while ((p = strchr (newargz[0], '\\\\')) != NULL)\n      {\n\t*p = '/';\n      }\n    while ((p = strchr (lt_argv_zero, '\\\\')) != NULL)\n      {\n\t*p = '/';\n      }\n  }\nEOF\n\t    ;;\n\t    esac\n\n\t    cat <<\"EOF\"\n  XFREE (target_name);\n  XFREE (actual_cwrapper_path);\n  XFREE (actual_cwrapper_name);\n\n  lt_setenv (\"BIN_SH\", \"xpg4\"); /* for Tru64 */\n  lt_setenv (\"DUALCASE\", \"1\");  /* for MSK sh */\n  /* Update the DLL searchpath.  EXE_PATH_VALUE ($dllsearchpath) must\n     be prepended before (that is, appear after) LIB_PATH_VALUE ($temp_rpath)\n     because on Windows, both *_VARNAMEs are PATH but uninstalled\n     libraries must come first. */\n  lt_update_exe_path (EXE_PATH_VARNAME, EXE_PATH_VALUE);\n  lt_update_lib_path (LIB_PATH_VARNAME, LIB_PATH_VALUE);\n\n  lt_debugprintf (__FILE__, __LINE__, \"(main) lt_argv_zero: %s\\n\",\n\t\t  nonnull (lt_argv_zero));\n  for (i = 0; i < newargc; i++)\n    {\n      lt_debugprintf (__FILE__, __LINE__, \"(main) newargz[%d]: %s\\n\",\n\t\t      i, nonnull (newargz[i]));\n    }\n\nEOF\n\n\t    case $host_os in\n\t      mingw*)\n\t\tcat <<\"EOF\"\n  /* execv doesn't actually work on mingw as expected on unix */\n  newargz = prepare_spawn (newargz);\n  rval = (int) _spawnv (_P_WAIT, lt_argv_zero, (const char * const *) newargz);\n  if (rval == -1)\n    {\n      /* failed to start process */\n      lt_debugprintf (__FILE__, __LINE__,\n\t\t      \"(main) failed to launch target \\\"%s\\\": %s\\n\",\n\t\t      lt_argv_zero, nonnull (strerror (errno)));\n      return 127;\n    }\n  return rval;\nEOF\n\t\t;;\n\t      *)\n\t\tcat <<\"EOF\"\n  execv (lt_argv_zero, newargz);\n  return rval; /* =127, but avoids unused variable warning */\nEOF\n\t\t;;\n\t    esac\n\n\t    cat <<\"EOF\"\n}\n\nvoid *\nxmalloc (size_t num)\n{\n  void *p = (void *) malloc (num);\n  if (!p)\n    lt_fatal (__FILE__, __LINE__, \"memory exhausted\");\n\n  return p;\n}\n\nchar *\nxstrdup (const char *string)\n{\n  return string ? strcpy ((char *) xmalloc (strlen (string) + 1),\n\t\t\t  string) : NULL;\n}\n\nconst char *\nbase_name (const char *name)\n{\n  const char *base;\n\n#if defined HAVE_DOS_BASED_FILE_SYSTEM\n  /* Skip over the disk name in MSDOS pathnames. */\n  if (isalpha ((unsigned char) name[0]) && name[1] == ':')\n    name += 2;\n#endif\n\n  for (base = name; *name; name++)\n    if (IS_DIR_SEPARATOR (*name))\n      base = name + 1;\n  return base;\n}\n\nint\ncheck_executable (const char *path)\n{\n  struct stat st;\n\n  lt_debugprintf (__FILE__, __LINE__, \"(check_executable): %s\\n\",\n                  nonempty (path));\n  if ((!path) || (!*path))\n    return 0;\n\n  if ((stat (path, &st) >= 0)\n      && (st.st_mode & (S_IXUSR | S_IXGRP | S_IXOTH)))\n    return 1;\n  else\n    return 0;\n}\n\nint\nmake_executable (const char *path)\n{\n  int rval = 0;\n  struct stat st;\n\n  lt_debugprintf (__FILE__, __LINE__, \"(make_executable): %s\\n\",\n                  nonempty (path));\n  if ((!path) || (!*path))\n    return 0;\n\n  if (stat (path, &st) >= 0)\n    {\n      rval = chmod (path, st.st_mode | S_IXOTH | S_IXGRP | S_IXUSR);\n    }\n  return rval;\n}\n\n/* Searches for the full path of the wrapper.  Returns\n   newly allocated full path name if found, NULL otherwise\n   Does not chase symlinks, even on platforms that support them.\n*/\nchar *\nfind_executable (const char *wrapper)\n{\n  int has_slash = 0;\n  const char *p;\n  const char *p_next;\n  /* static buffer for getcwd */\n  char tmp[LT_PATHMAX + 1];\n  size_t tmp_len;\n  char *concat_name;\n\n  lt_debugprintf (__FILE__, __LINE__, \"(find_executable): %s\\n\",\n                  nonempty (wrapper));\n\n  if ((wrapper == NULL) || (*wrapper == '\\0'))\n    return NULL;\n\n  /* Absolute path? */\n#if defined HAVE_DOS_BASED_FILE_SYSTEM\n  if (isalpha ((unsigned char) wrapper[0]) && wrapper[1] == ':')\n    {\n      concat_name = xstrdup (wrapper);\n      if (check_executable (concat_name))\n\treturn concat_name;\n      XFREE (concat_name);\n    }\n  else\n    {\n#endif\n      if (IS_DIR_SEPARATOR (wrapper[0]))\n\t{\n\t  concat_name = xstrdup (wrapper);\n\t  if (check_executable (concat_name))\n\t    return concat_name;\n\t  XFREE (concat_name);\n\t}\n#if defined HAVE_DOS_BASED_FILE_SYSTEM\n    }\n#endif\n\n  for (p = wrapper; *p; p++)\n    if (*p == '/')\n      {\n\thas_slash = 1;\n\tbreak;\n      }\n  if (!has_slash)\n    {\n      /* no slashes; search PATH */\n      const char *path = getenv (\"PATH\");\n      if (path != NULL)\n\t{\n\t  for (p = path; *p; p = p_next)\n\t    {\n\t      const char *q;\n\t      size_t p_len;\n\t      for (q = p; *q; q++)\n\t\tif (IS_PATH_SEPARATOR (*q))\n\t\t  break;\n\t      p_len = (size_t) (q - p);\n\t      p_next = (*q == '\\0' ? q : q + 1);\n\t      if (p_len == 0)\n\t\t{\n\t\t  /* empty path: current directory */\n\t\t  if (getcwd (tmp, LT_PATHMAX) == NULL)\n\t\t    lt_fatal (__FILE__, __LINE__, \"getcwd failed: %s\",\n                              nonnull (strerror (errno)));\n\t\t  tmp_len = strlen (tmp);\n\t\t  concat_name =\n\t\t    XMALLOC (char, tmp_len + 1 + strlen (wrapper) + 1);\n\t\t  memcpy (concat_name, tmp, tmp_len);\n\t\t  concat_name[tmp_len] = '/';\n\t\t  strcpy (concat_name + tmp_len + 1, wrapper);\n\t\t}\n\t      else\n\t\t{\n\t\t  concat_name =\n\t\t    XMALLOC (char, p_len + 1 + strlen (wrapper) + 1);\n\t\t  memcpy (concat_name, p, p_len);\n\t\t  concat_name[p_len] = '/';\n\t\t  strcpy (concat_name + p_len + 1, wrapper);\n\t\t}\n\t      if (check_executable (concat_name))\n\t\treturn concat_name;\n\t      XFREE (concat_name);\n\t    }\n\t}\n      /* not found in PATH; assume curdir */\n    }\n  /* Relative path | not found in path: prepend cwd */\n  if (getcwd (tmp, LT_PATHMAX) == NULL)\n    lt_fatal (__FILE__, __LINE__, \"getcwd failed: %s\",\n              nonnull (strerror (errno)));\n  tmp_len = strlen (tmp);\n  concat_name = XMALLOC (char, tmp_len + 1 + strlen (wrapper) + 1);\n  memcpy (concat_name, tmp, tmp_len);\n  concat_name[tmp_len] = '/';\n  strcpy (concat_name + tmp_len + 1, wrapper);\n\n  if (check_executable (concat_name))\n    return concat_name;\n  XFREE (concat_name);\n  return NULL;\n}\n\nchar *\nchase_symlinks (const char *pathspec)\n{\n#ifndef S_ISLNK\n  return xstrdup (pathspec);\n#else\n  char buf[LT_PATHMAX];\n  struct stat s;\n  char *tmp_pathspec = xstrdup (pathspec);\n  char *p;\n  int has_symlinks = 0;\n  while (strlen (tmp_pathspec) && !has_symlinks)\n    {\n      lt_debugprintf (__FILE__, __LINE__,\n\t\t      \"checking path component for symlinks: %s\\n\",\n\t\t      tmp_pathspec);\n      if (lstat (tmp_pathspec, &s) == 0)\n\t{\n\t  if (S_ISLNK (s.st_mode) != 0)\n\t    {\n\t      has_symlinks = 1;\n\t      break;\n\t    }\n\n\t  /* search backwards for last DIR_SEPARATOR */\n\t  p = tmp_pathspec + strlen (tmp_pathspec) - 1;\n\t  while ((p > tmp_pathspec) && (!IS_DIR_SEPARATOR (*p)))\n\t    p--;\n\t  if ((p == tmp_pathspec) && (!IS_DIR_SEPARATOR (*p)))\n\t    {\n\t      /* no more DIR_SEPARATORS left */\n\t      break;\n\t    }\n\t  *p = '\\0';\n\t}\n      else\n\t{\n\t  lt_fatal (__FILE__, __LINE__,\n\t\t    \"error accessing file \\\"%s\\\": %s\",\n\t\t    tmp_pathspec, nonnull (strerror (errno)));\n\t}\n    }\n  XFREE (tmp_pathspec);\n\n  if (!has_symlinks)\n    {\n      return xstrdup (pathspec);\n    }\n\n  tmp_pathspec = realpath (pathspec, buf);\n  if (tmp_pathspec == 0)\n    {\n      lt_fatal (__FILE__, __LINE__,\n\t\t\"could not follow symlinks for %s\", pathspec);\n    }\n  return xstrdup (tmp_pathspec);\n#endif\n}\n\nchar *\nstrendzap (char *str, const char *pat)\n{\n  size_t len, patlen;\n\n  assert (str != NULL);\n  assert (pat != NULL);\n\n  len = strlen (str);\n  patlen = strlen (pat);\n\n  if (patlen <= len)\n    {\n      str += len - patlen;\n      if (STREQ (str, pat))\n\t*str = '\\0';\n    }\n  return str;\n}\n\nvoid\nlt_debugprintf (const char *file, int line, const char *fmt, ...)\n{\n  va_list args;\n  if (lt_debug)\n    {\n      (void) fprintf (stderr, \"%s:%s:%d: \", program_name, file, line);\n      va_start (args, fmt);\n      (void) vfprintf (stderr, fmt, args);\n      va_end (args);\n    }\n}\n\nstatic void\nlt_error_core (int exit_status, const char *file,\n\t       int line, const char *mode,\n\t       const char *message, va_list ap)\n{\n  fprintf (stderr, \"%s:%s:%d: %s: \", program_name, file, line, mode);\n  vfprintf (stderr, message, ap);\n  fprintf (stderr, \".\\n\");\n\n  if (exit_status >= 0)\n    exit (exit_status);\n}\n\nvoid\nlt_fatal (const char *file, int line, const char *message, ...)\n{\n  va_list ap;\n  va_start (ap, message);\n  lt_error_core (EXIT_FAILURE, file, line, \"FATAL\", message, ap);\n  va_end (ap);\n}\n\nstatic const char *\nnonnull (const char *s)\n{\n  return s ? s : \"(null)\";\n}\n\nstatic const char *\nnonempty (const char *s)\n{\n  return (s && !*s) ? \"(empty)\" : nonnull (s);\n}\n\nvoid\nlt_setenv (const char *name, const char *value)\n{\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(lt_setenv) setting '%s' to '%s'\\n\",\n                  nonnull (name), nonnull (value));\n  {\n#ifdef HAVE_SETENV\n    /* always make a copy, for consistency with !HAVE_SETENV */\n    char *str = xstrdup (value);\n    setenv (name, str, 1);\n#else\n    size_t len = strlen (name) + 1 + strlen (value) + 1;\n    char *str = XMALLOC (char, len);\n    sprintf (str, \"%s=%s\", name, value);\n    if (putenv (str) != EXIT_SUCCESS)\n      {\n        XFREE (str);\n      }\n#endif\n  }\n}\n\nchar *\nlt_extend_str (const char *orig_value, const char *add, int to_end)\n{\n  char *new_value;\n  if (orig_value && *orig_value)\n    {\n      size_t orig_value_len = strlen (orig_value);\n      size_t add_len = strlen (add);\n      new_value = XMALLOC (char, add_len + orig_value_len + 1);\n      if (to_end)\n        {\n          strcpy (new_value, orig_value);\n          strcpy (new_value + orig_value_len, add);\n        }\n      else\n        {\n          strcpy (new_value, add);\n          strcpy (new_value + add_len, orig_value);\n        }\n    }\n  else\n    {\n      new_value = xstrdup (add);\n    }\n  return new_value;\n}\n\nvoid\nlt_update_exe_path (const char *name, const char *value)\n{\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(lt_update_exe_path) modifying '%s' by prepending '%s'\\n\",\n                  nonnull (name), nonnull (value));\n\n  if (name && *name && value && *value)\n    {\n      char *new_value = lt_extend_str (getenv (name), value, 0);\n      /* some systems can't cope with a ':'-terminated path #' */\n      size_t len = strlen (new_value);\n      while ((len > 0) && IS_PATH_SEPARATOR (new_value[len-1]))\n        {\n          new_value[--len] = '\\0';\n        }\n      lt_setenv (name, new_value);\n      XFREE (new_value);\n    }\n}\n\nvoid\nlt_update_lib_path (const char *name, const char *value)\n{\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(lt_update_lib_path) modifying '%s' by prepending '%s'\\n\",\n                  nonnull (name), nonnull (value));\n\n  if (name && *name && value && *value)\n    {\n      char *new_value = lt_extend_str (getenv (name), value, 0);\n      lt_setenv (name, new_value);\n      XFREE (new_value);\n    }\n}\n\nEOF\n\t    case $host_os in\n\t      mingw*)\n\t\tcat <<\"EOF\"\n\n/* Prepares an argument vector before calling spawn().\n   Note that spawn() does not by itself call the command interpreter\n     (getenv (\"COMSPEC\") != NULL ? getenv (\"COMSPEC\") :\n      ({ OSVERSIONINFO v; v.dwOSVersionInfoSize = sizeof(OSVERSIONINFO);\n         GetVersionEx(&v);\n         v.dwPlatformId == VER_PLATFORM_WIN32_NT;\n      }) ? \"cmd.exe\" : \"command.com\").\n   Instead it simply concatenates the arguments, separated by ' ', and calls\n   CreateProcess().  We must quote the arguments since Win32 CreateProcess()\n   interprets characters like ' ', '\\t', '\\\\', '\"' (but not '<' and '>') in a\n   special way:\n   - Space and tab are interpreted as delimiters. They are not treated as\n     delimiters if they are surrounded by double quotes: \"...\".\n   - Unescaped double quotes are removed from the input. Their only effect is\n     that within double quotes, space and tab are treated like normal\n     characters.\n   - Backslashes not followed by double quotes are not special.\n   - But 2*n+1 backslashes followed by a double quote become\n     n backslashes followed by a double quote (n >= 0):\n       \\\" -> \"\n       \\\\\\\" -> \\\"\n       \\\\\\\\\\\" -> \\\\\"\n */\n#define SHELL_SPECIAL_CHARS \"\\\"\\\\ \\001\\002\\003\\004\\005\\006\\007\\010\\011\\012\\013\\014\\015\\016\\017\\020\\021\\022\\023\\024\\025\\026\\027\\030\\031\\032\\033\\034\\035\\036\\037\"\n#define SHELL_SPACE_CHARS \" \\001\\002\\003\\004\\005\\006\\007\\010\\011\\012\\013\\014\\015\\016\\017\\020\\021\\022\\023\\024\\025\\026\\027\\030\\031\\032\\033\\034\\035\\036\\037\"\nchar **\nprepare_spawn (char **argv)\n{\n  size_t argc;\n  char **new_argv;\n  size_t i;\n\n  /* Count number of arguments.  */\n  for (argc = 0; argv[argc] != NULL; argc++)\n    ;\n\n  /* Allocate new argument vector.  */\n  new_argv = XMALLOC (char *, argc + 1);\n\n  /* Put quoted arguments into the new argument vector.  */\n  for (i = 0; i < argc; i++)\n    {\n      const char *string = argv[i];\n\n      if (string[0] == '\\0')\n\tnew_argv[i] = xstrdup (\"\\\"\\\"\");\n      else if (strpbrk (string, SHELL_SPECIAL_CHARS) != NULL)\n\t{\n\t  int quote_around = (strpbrk (string, SHELL_SPACE_CHARS) != NULL);\n\t  size_t length;\n\t  unsigned int backslashes;\n\t  const char *s;\n\t  char *quoted_string;\n\t  char *p;\n\n\t  length = 0;\n\t  backslashes = 0;\n\t  if (quote_around)\n\t    length++;\n\t  for (s = string; *s != '\\0'; s++)\n\t    {\n\t      char c = *s;\n\t      if (c == '\"')\n\t\tlength += backslashes + 1;\n\t      length++;\n\t      if (c == '\\\\')\n\t\tbackslashes++;\n\t      else\n\t\tbackslashes = 0;\n\t    }\n\t  if (quote_around)\n\t    length += backslashes + 1;\n\n\t  quoted_string = XMALLOC (char, length + 1);\n\n\t  p = quoted_string;\n\t  backslashes = 0;\n\t  if (quote_around)\n\t    *p++ = '\"';\n\t  for (s = string; *s != '\\0'; s++)\n\t    {\n\t      char c = *s;\n\t      if (c == '\"')\n\t\t{\n\t\t  unsigned int j;\n\t\t  for (j = backslashes + 1; j > 0; j--)\n\t\t    *p++ = '\\\\';\n\t\t}\n\t      *p++ = c;\n\t      if (c == '\\\\')\n\t\tbackslashes++;\n\t      else\n\t\tbackslashes = 0;\n\t    }\n\t  if (quote_around)\n\t    {\n\t      unsigned int j;\n\t      for (j = backslashes; j > 0; j--)\n\t\t*p++ = '\\\\';\n\t      *p++ = '\"';\n\t    }\n\t  *p = '\\0';\n\n\t  new_argv[i] = quoted_string;\n\t}\n      else\n\tnew_argv[i] = (char *) string;\n    }\n  new_argv[argc] = NULL;\n\n  return new_argv;\n}\nEOF\n\t\t;;\n\t    esac\n\n            cat <<\"EOF\"\nvoid lt_dump_script (FILE* f)\n{\nEOF\n\t    func_emit_wrapper yes |\n\t      $SED -n -e '\ns/^\\(.\\{79\\}\\)\\(..*\\)/\\1\\\n\\2/\nh\ns/\\([\\\\\"]\\)/\\\\\\1/g\ns/$/\\\\n/\ns/\\([^\\n]*\\).*/  fputs (\"\\1\", f);/p\ng\nD'\n            cat <<\"EOF\"\n}\nEOF\n}\n# end: func_emit_cwrapperexe_src\n\n# func_win32_import_lib_p ARG\n# True if ARG is an import lib, as indicated by $file_magic_cmd\nfunc_win32_import_lib_p ()\n{\n    $debug_cmd\n\n    case `eval $file_magic_cmd \\\"\\$1\\\" 2>/dev/null | $SED -e 10q` in\n    *import*) : ;;\n    *) false ;;\n    esac\n}\n\n# func_suncc_cstd_abi\n# !!ONLY CALL THIS FOR SUN CC AFTER $compile_command IS FULLY EXPANDED!!\n# Several compiler flags select an ABI that is incompatible with the\n# Cstd library. Avoid specifying it if any are in CXXFLAGS.\nfunc_suncc_cstd_abi ()\n{\n    $debug_cmd\n\n    case \" $compile_command \" in\n    *\" -compat=g \"*|*\\ -std=c++[0-9][0-9]\\ *|*\" -library=stdcxx4 \"*|*\" -library=stlport4 \"*)\n      suncc_use_cstd_abi=no\n      ;;\n    *)\n      suncc_use_cstd_abi=yes\n      ;;\n    esac\n}\n\n# func_mode_link arg...\nfunc_mode_link ()\n{\n    $debug_cmd\n\n    case $host in\n    *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-cegcc*)\n      # It is impossible to link a dll without this setting, and\n      # we shouldn't force the makefile maintainer to figure out\n      # what system we are compiling for in order to pass an extra\n      # flag for every libtool invocation.\n      # allow_undefined=no\n\n      # FIXME: Unfortunately, there are problems with the above when trying\n      # to make a dll that has undefined symbols, in which case not\n      # even a static library is built.  For now, we need to specify\n      # -no-undefined on the libtool link line when we can be certain\n      # that all symbols are satisfied, otherwise we get a static library.\n      allow_undefined=yes\n      ;;\n    *)\n      allow_undefined=yes\n      ;;\n    esac\n    libtool_args=$nonopt\n    base_compile=\"$nonopt $@\"\n    compile_command=$nonopt\n    finalize_command=$nonopt\n\n    compile_rpath=\n    finalize_rpath=\n    compile_shlibpath=\n    finalize_shlibpath=\n    convenience=\n    old_convenience=\n    deplibs=\n    old_deplibs=\n    compiler_flags=\n    linker_flags=\n    dllsearchpath=\n    lib_search_path=`pwd`\n    inst_prefix_dir=\n    new_inherited_linker_flags=\n\n    avoid_version=no\n    bindir=\n    dlfiles=\n    dlprefiles=\n    dlself=no\n    export_dynamic=no\n    export_symbols=\n    export_symbols_regex=\n    generated=\n    libobjs=\n    ltlibs=\n    module=no\n    no_install=no\n    objs=\n    os2dllname=\n    non_pic_objects=\n    precious_files_regex=\n    prefer_static_libs=no\n    preload=false\n    prev=\n    prevarg=\n    release=\n    rpath=\n    xrpath=\n    perm_rpath=\n    temp_rpath=\n    thread_safe=no\n    vinfo=\n    vinfo_number=no\n    weak_libs=\n    single_module=$wl-single_module\n    func_infer_tag $base_compile\n\n    # We need to know -static, to get the right output filenames.\n    for arg\n    do\n      case $arg in\n      -shared)\n\ttest yes != \"$build_libtool_libs\" \\\n\t  && func_fatal_configuration \"cannot build a shared library\"\n\tbuild_old_libs=no\n\tbreak\n\t;;\n      -all-static | -static | -static-libtool-libs)\n\tcase $arg in\n\t-all-static)\n\t  if test yes = \"$build_libtool_libs\" && test -z \"$link_static_flag\"; then\n\t    func_warning \"complete static linking is impossible in this configuration\"\n\t  fi\n\t  if test -n \"$link_static_flag\"; then\n\t    dlopen_self=$dlopen_self_static\n\t  fi\n\t  prefer_static_libs=yes\n\t  ;;\n\t-static)\n\t  if test -z \"$pic_flag\" && test -n \"$link_static_flag\"; then\n\t    dlopen_self=$dlopen_self_static\n\t  fi\n\t  prefer_static_libs=built\n\t  ;;\n\t-static-libtool-libs)\n\t  if test -z \"$pic_flag\" && test -n \"$link_static_flag\"; then\n\t    dlopen_self=$dlopen_self_static\n\t  fi\n\t  prefer_static_libs=yes\n\t  ;;\n\tesac\n\tbuild_libtool_libs=no\n\tbuild_old_libs=yes\n\tbreak\n\t;;\n      esac\n    done\n\n    # See if our shared archives depend on static archives.\n    test -n \"$old_archive_from_new_cmds\" && build_old_libs=yes\n\n    # Go through the arguments, transforming them on the way.\n    while test \"$#\" -gt 0; do\n      arg=$1\n      shift\n      func_quote_for_eval \"$arg\"\n      qarg=$func_quote_for_eval_unquoted_result\n      func_append libtool_args \" $func_quote_for_eval_result\"\n\n      # If the previous option needs an argument, assign it.\n      if test -n \"$prev\"; then\n\tcase $prev in\n\toutput)\n\t  func_append compile_command \" @OUTPUT@\"\n\t  func_append finalize_command \" @OUTPUT@\"\n\t  ;;\n\tesac\n\n\tcase $prev in\n\tbindir)\n\t  bindir=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\tdlfiles|dlprefiles)\n\t  $preload || {\n\t    # Add the symbol object into the linking commands.\n\t    func_append compile_command \" @SYMFILE@\"\n\t    func_append finalize_command \" @SYMFILE@\"\n\t    preload=:\n\t  }\n\t  case $arg in\n\t  *.la | *.lo) ;;  # We handle these cases below.\n\t  force)\n\t    if test no = \"$dlself\"; then\n\t      dlself=needless\n\t      export_dynamic=yes\n\t    fi\n\t    prev=\n\t    continue\n\t    ;;\n\t  self)\n\t    if test dlprefiles = \"$prev\"; then\n\t      dlself=yes\n\t    elif test dlfiles = \"$prev\" && test yes != \"$dlopen_self\"; then\n\t      dlself=yes\n\t    else\n\t      dlself=needless\n\t      export_dynamic=yes\n\t    fi\n\t    prev=\n\t    continue\n\t    ;;\n\t  *)\n\t    if test dlfiles = \"$prev\"; then\n\t      func_append dlfiles \" $arg\"\n\t    else\n\t      func_append dlprefiles \" $arg\"\n\t    fi\n\t    prev=\n\t    continue\n\t    ;;\n\t  esac\n\t  ;;\n\texpsyms)\n\t  export_symbols=$arg\n\t  test -f \"$arg\" \\\n\t    || func_fatal_error \"symbol file '$arg' does not exist\"\n\t  prev=\n\t  continue\n\t  ;;\n\texpsyms_regex)\n\t  export_symbols_regex=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\tframework)\n\t  case $host in\n\t    *-*-darwin*)\n\t      case \"$deplibs \" in\n\t\t*\" $qarg.ltframework \"*) ;;\n\t\t*) func_append deplibs \" $qarg.ltframework\" # this is fixed later\n\t\t   ;;\n\t      esac\n\t      ;;\n\t  esac\n\t  prev=\n\t  continue\n\t  ;;\n\tinst_prefix)\n\t  inst_prefix_dir=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\tmllvm)\n\t  # Clang does not use LLVM to link, so we can simply discard any\n\t  # '-mllvm $arg' options when doing the link step.\n\t  prev=\n\t  continue\n\t  ;;\n\tobjectlist)\n\t  if test -f \"$arg\"; then\n\t    save_arg=$arg\n\t    moreargs=\n\t    for fil in `cat \"$save_arg\"`\n\t    do\n#\t      func_append moreargs \" $fil\"\n\t      arg=$fil\n\t      # A libtool-controlled object.\n\n\t      # Check to see that this really is a libtool object.\n\t      if func_lalib_unsafe_p \"$arg\"; then\n\t\tpic_object=\n\t\tnon_pic_object=\n\n\t\t# Read the .lo file\n\t\tfunc_source \"$arg\"\n\n\t\tif test -z \"$pic_object\" ||\n\t\t   test -z \"$non_pic_object\" ||\n\t\t   test none = \"$pic_object\" &&\n\t\t   test none = \"$non_pic_object\"; then\n\t\t  func_fatal_error \"cannot find name of object for '$arg'\"\n\t\tfi\n\n\t\t# Extract subdirectory from the argument.\n\t\tfunc_dirname \"$arg\" \"/\" \"\"\n\t\txdir=$func_dirname_result\n\n\t\tif test none != \"$pic_object\"; then\n\t\t  # Prepend the subdirectory the object is found in.\n\t\t  pic_object=$xdir$pic_object\n\n\t\t  if test dlfiles = \"$prev\"; then\n\t\t    if test yes = \"$build_libtool_libs\" && test yes = \"$dlopen_support\"; then\n\t\t      func_append dlfiles \" $pic_object\"\n\t\t      prev=\n\t\t      continue\n\t\t    else\n\t\t      # If libtool objects are unsupported, then we need to preload.\n\t\t      prev=dlprefiles\n\t\t    fi\n\t\t  fi\n\n\t\t  # CHECK ME:  I think I busted this.  -Ossama\n\t\t  if test dlprefiles = \"$prev\"; then\n\t\t    # Preload the old-style object.\n\t\t    func_append dlprefiles \" $pic_object\"\n\t\t    prev=\n\t\t  fi\n\n\t\t  # A PIC object.\n\t\t  func_append libobjs \" $pic_object\"\n\t\t  arg=$pic_object\n\t\tfi\n\n\t\t# Non-PIC object.\n\t\tif test none != \"$non_pic_object\"; then\n\t\t  # Prepend the subdirectory the object is found in.\n\t\t  non_pic_object=$xdir$non_pic_object\n\n\t\t  # A standard non-PIC object\n\t\t  func_append non_pic_objects \" $non_pic_object\"\n\t\t  if test -z \"$pic_object\" || test none = \"$pic_object\"; then\n\t\t    arg=$non_pic_object\n\t\t  fi\n\t\telse\n\t\t  # If the PIC object exists, use it instead.\n\t\t  # $xdir was prepended to $pic_object above.\n\t\t  non_pic_object=$pic_object\n\t\t  func_append non_pic_objects \" $non_pic_object\"\n\t\tfi\n\t      else\n\t\t# Only an error if not doing a dry-run.\n\t\tif $opt_dry_run; then\n\t\t  # Extract subdirectory from the argument.\n\t\t  func_dirname \"$arg\" \"/\" \"\"\n\t\t  xdir=$func_dirname_result\n\n\t\t  func_lo2o \"$arg\"\n\t\t  pic_object=$xdir$objdir/$func_lo2o_result\n\t\t  non_pic_object=$xdir$func_lo2o_result\n\t\t  func_append libobjs \" $pic_object\"\n\t\t  func_append non_pic_objects \" $non_pic_object\"\n\t        else\n\t\t  func_fatal_error \"'$arg' is not a valid libtool object\"\n\t\tfi\n\t      fi\n\t    done\n\t  else\n\t    func_fatal_error \"link input file '$arg' does not exist\"\n\t  fi\n\t  arg=$save_arg\n\t  prev=\n\t  continue\n\t  ;;\n\tos2dllname)\n\t  os2dllname=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\tprecious_regex)\n\t  precious_files_regex=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\trelease)\n\t  release=-$arg\n\t  prev=\n\t  continue\n\t  ;;\n\trpath | xrpath)\n\t  # We need an absolute path.\n\t  case $arg in\n\t  [\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n\t  *)\n\t    func_fatal_error \"only absolute run-paths are allowed\"\n\t    ;;\n\t  esac\n\t  if test rpath = \"$prev\"; then\n\t    case \"$rpath \" in\n\t    *\" $arg \"*) ;;\n\t    *) func_append rpath \" $arg\" ;;\n\t    esac\n\t  else\n\t    case \"$xrpath \" in\n\t    *\" $arg \"*) ;;\n\t    *) func_append xrpath \" $arg\" ;;\n\t    esac\n\t  fi\n\t  prev=\n\t  continue\n\t  ;;\n\tshrext)\n\t  shrext_cmds=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\tweak)\n\t  func_append weak_libs \" $arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\txcclinker)\n\t  func_append linker_flags \" $qarg\"\n\t  func_append compiler_flags \" $qarg\"\n\t  prev=\n\t  func_append compile_command \" $qarg\"\n\t  func_append finalize_command \" $qarg\"\n\t  continue\n\t  ;;\n\txcompiler)\n\t  func_append compiler_flags \" $qarg\"\n\t  prev=\n\t  func_append compile_command \" $qarg\"\n\t  func_append finalize_command \" $qarg\"\n\t  continue\n\t  ;;\n\txlinker)\n\t  func_append linker_flags \" $qarg\"\n\t  func_append compiler_flags \" $wl$qarg\"\n\t  prev=\n\t  func_append compile_command \" $wl$qarg\"\n\t  func_append finalize_command \" $wl$qarg\"\n\t  continue\n\t  ;;\n\t*)\n\t  eval \"$prev=\\\"\\$arg\\\"\"\n\t  prev=\n\t  continue\n\t  ;;\n\tesac\n      fi # test -n \"$prev\"\n\n      prevarg=$arg\n\n      case $arg in\n      -all-static)\n\tif test -n \"$link_static_flag\"; then\n\t  # See comment for -static flag below, for more details.\n\t  func_append compile_command \" $link_static_flag\"\n\t  func_append finalize_command \" $link_static_flag\"\n\tfi\n\tcontinue\n\t;;\n\n      -allow-undefined)\n\t# FIXME: remove this flag sometime in the future.\n\tfunc_fatal_error \"'-allow-undefined' must not be used because it is the default\"\n\t;;\n\n      -avoid-version)\n\tavoid_version=yes\n\tcontinue\n\t;;\n\n      -bindir)\n\tprev=bindir\n\tcontinue\n\t;;\n\n      -dlopen)\n\tprev=dlfiles\n\tcontinue\n\t;;\n\n      -dlpreopen)\n\tprev=dlprefiles\n\tcontinue\n\t;;\n\n      -export-dynamic)\n\texport_dynamic=yes\n\tcontinue\n\t;;\n\n      -export-symbols | -export-symbols-regex)\n\tif test -n \"$export_symbols\" || test -n \"$export_symbols_regex\"; then\n\t  func_fatal_error \"more than one -exported-symbols argument is not allowed\"\n\tfi\n\tif test X-export-symbols = \"X$arg\"; then\n\t  prev=expsyms\n\telse\n\t  prev=expsyms_regex\n\tfi\n\tcontinue\n\t;;\n\n      -framework)\n\tprev=framework\n\tcontinue\n\t;;\n\n      -inst-prefix-dir)\n\tprev=inst_prefix\n\tcontinue\n\t;;\n\n      # The native IRIX linker understands -LANG:*, -LIST:* and -LNO:*\n      # so, if we see these flags be careful not to treat them like -L\n      -L[A-Z][A-Z]*:*)\n\tcase $with_gcc/$host in\n\tno/*-*-irix* | /*-*-irix*)\n\t  func_append compile_command \" $arg\"\n\t  func_append finalize_command \" $arg\"\n\t  ;;\n\tesac\n\tcontinue\n\t;;\n\n      -L*)\n\tfunc_stripname \"-L\" '' \"$arg\"\n\tif test -z \"$func_stripname_result\"; then\n\t  if test \"$#\" -gt 0; then\n\t    func_fatal_error \"require no space between '-L' and '$1'\"\n\t  else\n\t    func_fatal_error \"need path for '-L' option\"\n\t  fi\n\tfi\n\tfunc_resolve_sysroot \"$func_stripname_result\"\n\tdir=$func_resolve_sysroot_result\n\t# We need an absolute path.\n\tcase $dir in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n\t*)\n\t  absdir=`cd \"$dir\" && pwd`\n\t  test -z \"$absdir\" && \\\n\t    func_fatal_error \"cannot determine absolute directory name of '$dir'\"\n\t  dir=$absdir\n\t  ;;\n\tesac\n\tcase \"$deplibs \" in\n\t*\" -L$dir \"* | *\" $arg \"*)\n\t  # Will only happen for absolute or sysroot arguments\n\t  ;;\n\t*)\n\t  # Preserve sysroot, but never include relative directories\n\t  case $dir in\n\t    [\\\\/]* | [A-Za-z]:[\\\\/]* | =*) func_append deplibs \" $arg\" ;;\n\t    *) func_append deplibs \" -L$dir\" ;;\n\t  esac\n\t  func_append lib_search_path \" $dir\"\n\t  ;;\n\tesac\n\tcase $host in\n\t*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-cegcc*)\n\t  testbindir=`$ECHO \"$dir\" | $SED 's*/lib$*/bin*'`\n\t  case :$dllsearchpath: in\n\t  *\":$dir:\"*) ;;\n\t  ::) dllsearchpath=$dir;;\n\t  *) func_append dllsearchpath \":$dir\";;\n\t  esac\n\t  case :$dllsearchpath: in\n\t  *\":$testbindir:\"*) ;;\n\t  ::) dllsearchpath=$testbindir;;\n\t  *) func_append dllsearchpath \":$testbindir\";;\n\t  esac\n\t  ;;\n\tesac\n\tcontinue\n\t;;\n\n      -l*)\n\tif test X-lc = \"X$arg\" || test X-lm = \"X$arg\"; then\n\t  case $host in\n\t  *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-beos* | *-cegcc* | *-*-haiku*)\n\t    # These systems don't actually have a C or math library (as such)\n\t    continue\n\t    ;;\n\t  *-*-os2*)\n\t    # These systems don't actually have a C library (as such)\n\t    test X-lc = \"X$arg\" && continue\n\t    ;;\n\t  *-*-openbsd* | *-*-freebsd* | *-*-dragonfly* | *-*-bitrig*)\n\t    # Do not include libc due to us having libc/libc_r.\n\t    test X-lc = \"X$arg\" && continue\n\t    ;;\n\t  *-*-rhapsody* | *-*-darwin1.[012])\n\t    # Rhapsody C and math libraries are in the System framework\n\t    func_append deplibs \" System.ltframework\"\n\t    continue\n\t    ;;\n\t  *-*-sco3.2v5* | *-*-sco5v6*)\n\t    # Causes problems with __ctype\n\t    test X-lc = \"X$arg\" && continue\n\t    ;;\n\t  *-*-sysv4.2uw2* | *-*-sysv5* | *-*-unixware* | *-*-OpenUNIX*)\n\t    # Compiler inserts libc in the correct place for threads to work\n\t    test X-lc = \"X$arg\" && continue\n\t    ;;\n\t  esac\n\telif test X-lc_r = \"X$arg\"; then\n\t case $host in\n\t *-*-openbsd* | *-*-freebsd* | *-*-dragonfly* | *-*-bitrig*)\n\t   # Do not include libc_r directly, use -pthread flag.\n\t   continue\n\t   ;;\n\t esac\n\tfi\n\tfunc_append deplibs \" $arg\"\n\tcontinue\n\t;;\n\n      -mllvm)\n\tprev=mllvm\n\tcontinue\n\t;;\n\n      -module)\n\tmodule=yes\n\tcontinue\n\t;;\n\n      # Tru64 UNIX uses -model [arg] to determine the layout of C++\n      # classes, name mangling, and exception handling.\n      # Darwin uses the -arch flag to determine output architecture.\n      -model|-arch|-isysroot|--sysroot)\n\tfunc_append compiler_flags \" $arg\"\n\tfunc_append compile_command \" $arg\"\n\tfunc_append finalize_command \" $arg\"\n\tprev=xcompiler\n\tcontinue\n\t;;\n\n      -mt|-mthreads|-kthread|-Kthread|-pthread|-pthreads|--thread-safe \\\n      |-threads|-fopenmp|-openmp|-mp|-xopenmp|-omp|-qsmp=*)\n\tfunc_append compiler_flags \" $arg\"\n\tfunc_append compile_command \" $arg\"\n\tfunc_append finalize_command \" $arg\"\n\tcase \"$new_inherited_linker_flags \" in\n\t    *\" $arg \"*) ;;\n\t    * ) func_append new_inherited_linker_flags \" $arg\" ;;\n\tesac\n\tcontinue\n\t;;\n\n      -multi_module)\n\tsingle_module=$wl-multi_module\n\tcontinue\n\t;;\n\n      -no-fast-install)\n\tfast_install=no\n\tcontinue\n\t;;\n\n      -no-install)\n\tcase $host in\n\t*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-*-darwin* | *-cegcc*)\n\t  # The PATH hackery in wrapper scripts is required on Windows\n\t  # and Darwin in order for the loader to find any dlls it needs.\n\t  func_warning \"'-no-install' is ignored for $host\"\n\t  func_warning \"assuming '-no-fast-install' instead\"\n\t  fast_install=no\n\t  ;;\n\t*) no_install=yes ;;\n\tesac\n\tcontinue\n\t;;\n\n      -no-undefined)\n\tallow_undefined=no\n\tcontinue\n\t;;\n\n      -objectlist)\n\tprev=objectlist\n\tcontinue\n\t;;\n\n      -os2dllname)\n\tprev=os2dllname\n\tcontinue\n\t;;\n\n      -o) prev=output ;;\n\n      -precious-files-regex)\n\tprev=precious_regex\n\tcontinue\n\t;;\n\n      -release)\n\tprev=release\n\tcontinue\n\t;;\n\n      -rpath)\n\tprev=rpath\n\tcontinue\n\t;;\n\n      -R)\n\tprev=xrpath\n\tcontinue\n\t;;\n\n      -R*)\n\tfunc_stripname '-R' '' \"$arg\"\n\tdir=$func_stripname_result\n\t# We need an absolute path.\n\tcase $dir in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n\t=*)\n\t  func_stripname '=' '' \"$dir\"\n\t  dir=$lt_sysroot$func_stripname_result\n\t  ;;\n\t*)\n\t  func_fatal_error \"only absolute run-paths are allowed\"\n\t  ;;\n\tesac\n\tcase \"$xrpath \" in\n\t*\" $dir \"*) ;;\n\t*) func_append xrpath \" $dir\" ;;\n\tesac\n\tcontinue\n\t;;\n\n      -shared)\n\t# The effects of -shared are defined in a previous loop.\n\tcontinue\n\t;;\n\n      -shrext)\n\tprev=shrext\n\tcontinue\n\t;;\n\n      -static | -static-libtool-libs)\n\t# The effects of -static are defined in a previous loop.\n\t# We used to do the same as -all-static on platforms that\n\t# didn't have a PIC flag, but the assumption that the effects\n\t# would be equivalent was wrong.  It would break on at least\n\t# Digital Unix and AIX.\n\tcontinue\n\t;;\n\n      -thread-safe)\n\tthread_safe=yes\n\tcontinue\n\t;;\n\n      -version-info)\n\tprev=vinfo\n\tcontinue\n\t;;\n\n      -version-number)\n\tprev=vinfo\n\tvinfo_number=yes\n\tcontinue\n\t;;\n\n      -weak)\n        prev=weak\n\tcontinue\n\t;;\n\n      -Wc,*)\n\tfunc_stripname '-Wc,' '' \"$arg\"\n\targs=$func_stripname_result\n\targ=\n\tsave_ifs=$IFS; IFS=,\n\tfor flag in $args; do\n\t  IFS=$save_ifs\n          func_quote_for_eval \"$flag\"\n\t  func_append arg \" $func_quote_for_eval_result\"\n\t  func_append compiler_flags \" $func_quote_for_eval_result\"\n\tdone\n\tIFS=$save_ifs\n\tfunc_stripname ' ' '' \"$arg\"\n\targ=$func_stripname_result\n\t;;\n\n      -Wl,*)\n\tfunc_stripname '-Wl,' '' \"$arg\"\n\targs=$func_stripname_result\n\targ=\n\tsave_ifs=$IFS; IFS=,\n\tfor flag in $args; do\n\t  IFS=$save_ifs\n          func_quote_for_eval \"$flag\"\n\t  func_append arg \" $wl$func_quote_for_eval_result\"\n\t  func_append compiler_flags \" $wl$func_quote_for_eval_result\"\n\t  func_append linker_flags \" $func_quote_for_eval_result\"\n\tdone\n\tIFS=$save_ifs\n\tfunc_stripname ' ' '' \"$arg\"\n\targ=$func_stripname_result\n\t;;\n\n      -Xcompiler)\n\tprev=xcompiler\n\tcontinue\n\t;;\n\n      -Xlinker)\n\tprev=xlinker\n\tcontinue\n\t;;\n\n      -XCClinker)\n\tprev=xcclinker\n\tcontinue\n\t;;\n\n      # -msg_* for osf cc\n      -msg_*)\n\tfunc_quote_for_eval \"$arg\"\n\targ=$func_quote_for_eval_result\n\t;;\n\n      # Flags to be passed through unchanged, with rationale:\n      # -64, -mips[0-9]      enable 64-bit mode for the SGI compiler\n      # -r[0-9][0-9]*        specify processor for the SGI compiler\n      # -xarch=*, -xtarget=* enable 64-bit mode for the Sun compiler\n      # +DA*, +DD*           enable 64-bit mode for the HP compiler\n      # -q*                  compiler args for the IBM compiler\n      # -m*, -t[45]*, -txscale* architecture-specific flags for GCC\n      # -F/path              path to uninstalled frameworks, gcc on darwin\n      # -p, -pg, --coverage, -fprofile-*  profiling flags for GCC\n      # -fstack-protector*   stack protector flags for GCC\n      # @file                GCC response files\n      # -tp=*                Portland pgcc target processor selection\n      # --sysroot=*          for sysroot support\n      # -O*, -g*, -flto*, -fwhopr*, -fuse-linker-plugin GCC link-time optimization\n      # -stdlib=*            select c++ std lib with clang\n      -64|-mips[0-9]|-r[0-9][0-9]*|-xarch=*|-xtarget=*|+DA*|+DD*|-q*|-m*| \\\n      -t[45]*|-txscale*|-p|-pg|--coverage|-fprofile-*|-F*|@*|-tp=*|--sysroot=*| \\\n      -O*|-g*|-flto*|-fwhopr*|-fuse-linker-plugin|-fstack-protector*|-stdlib=*)\n        func_quote_for_eval \"$arg\"\n\targ=$func_quote_for_eval_result\n        func_append compile_command \" $arg\"\n        func_append finalize_command \" $arg\"\n        func_append compiler_flags \" $arg\"\n        continue\n        ;;\n\n      -Z*)\n        if test os2 = \"`expr $host : '.*\\(os2\\)'`\"; then\n          # OS/2 uses -Zxxx to specify OS/2-specific options\n\t  compiler_flags=\"$compiler_flags $arg\"\n\t  func_append compile_command \" $arg\"\n\t  func_append finalize_command \" $arg\"\n\t  case $arg in\n\t  -Zlinker | -Zstack)\n\t    prev=xcompiler\n\t    ;;\n\t  esac\n\t  continue\n        else\n\t  # Otherwise treat like 'Some other compiler flag' below\n\t  func_quote_for_eval \"$arg\"\n\t  arg=$func_quote_for_eval_result\n        fi\n\t;;\n\n      # Some other compiler flag.\n      -* | +*)\n        func_quote_for_eval \"$arg\"\n\targ=$func_quote_for_eval_result\n\t;;\n\n      *.$objext)\n\t# A standard object.\n\tfunc_append objs \" $arg\"\n\t;;\n\n      *.lo)\n\t# A libtool-controlled object.\n\n\t# Check to see that this really is a libtool object.\n\tif func_lalib_unsafe_p \"$arg\"; then\n\t  pic_object=\n\t  non_pic_object=\n\n\t  # Read the .lo file\n\t  func_source \"$arg\"\n\n\t  if test -z \"$pic_object\" ||\n\t     test -z \"$non_pic_object\" ||\n\t     test none = \"$pic_object\" &&\n\t     test none = \"$non_pic_object\"; then\n\t    func_fatal_error \"cannot find name of object for '$arg'\"\n\t  fi\n\n\t  # Extract subdirectory from the argument.\n\t  func_dirname \"$arg\" \"/\" \"\"\n\t  xdir=$func_dirname_result\n\n\t  test none = \"$pic_object\" || {\n\t    # Prepend the subdirectory the object is found in.\n\t    pic_object=$xdir$pic_object\n\n\t    if test dlfiles = \"$prev\"; then\n\t      if test yes = \"$build_libtool_libs\" && test yes = \"$dlopen_support\"; then\n\t\tfunc_append dlfiles \" $pic_object\"\n\t\tprev=\n\t\tcontinue\n\t      else\n\t\t# If libtool objects are unsupported, then we need to preload.\n\t\tprev=dlprefiles\n\t      fi\n\t    fi\n\n\t    # CHECK ME:  I think I busted this.  -Ossama\n\t    if test dlprefiles = \"$prev\"; then\n\t      # Preload the old-style object.\n\t      func_append dlprefiles \" $pic_object\"\n\t      prev=\n\t    fi\n\n\t    # A PIC object.\n\t    func_append libobjs \" $pic_object\"\n\t    arg=$pic_object\n\t  }\n\n\t  # Non-PIC object.\n\t  if test none != \"$non_pic_object\"; then\n\t    # Prepend the subdirectory the object is found in.\n\t    non_pic_object=$xdir$non_pic_object\n\n\t    # A standard non-PIC object\n\t    func_append non_pic_objects \" $non_pic_object\"\n\t    if test -z \"$pic_object\" || test none = \"$pic_object\"; then\n\t      arg=$non_pic_object\n\t    fi\n\t  else\n\t    # If the PIC object exists, use it instead.\n\t    # $xdir was prepended to $pic_object above.\n\t    non_pic_object=$pic_object\n\t    func_append non_pic_objects \" $non_pic_object\"\n\t  fi\n\telse\n\t  # Only an error if not doing a dry-run.\n\t  if $opt_dry_run; then\n\t    # Extract subdirectory from the argument.\n\t    func_dirname \"$arg\" \"/\" \"\"\n\t    xdir=$func_dirname_result\n\n\t    func_lo2o \"$arg\"\n\t    pic_object=$xdir$objdir/$func_lo2o_result\n\t    non_pic_object=$xdir$func_lo2o_result\n\t    func_append libobjs \" $pic_object\"\n\t    func_append non_pic_objects \" $non_pic_object\"\n\t  else\n\t    func_fatal_error \"'$arg' is not a valid libtool object\"\n\t  fi\n\tfi\n\t;;\n\n      *.$libext)\n\t# An archive.\n\tfunc_append deplibs \" $arg\"\n\tfunc_append old_deplibs \" $arg\"\n\tcontinue\n\t;;\n\n      *.la)\n\t# A libtool-controlled library.\n\n\tfunc_resolve_sysroot \"$arg\"\n\tif test dlfiles = \"$prev\"; then\n\t  # This library was specified with -dlopen.\n\t  func_append dlfiles \" $func_resolve_sysroot_result\"\n\t  prev=\n\telif test dlprefiles = \"$prev\"; then\n\t  # The library was specified with -dlpreopen.\n\t  func_append dlprefiles \" $func_resolve_sysroot_result\"\n\t  prev=\n\telse\n\t  func_append deplibs \" $func_resolve_sysroot_result\"\n\tfi\n\tcontinue\n\t;;\n\n      # Some other compiler argument.\n      *)\n\t# Unknown arguments in both finalize_command and compile_command need\n\t# to be aesthetically quoted because they are evaled later.\n\tfunc_quote_for_eval \"$arg\"\n\targ=$func_quote_for_eval_result\n\t;;\n      esac # arg\n\n      # Now actually substitute the argument into the commands.\n      if test -n \"$arg\"; then\n\tfunc_append compile_command \" $arg\"\n\tfunc_append finalize_command \" $arg\"\n      fi\n    done # argument parsing loop\n\n    test -n \"$prev\" && \\\n      func_fatal_help \"the '$prevarg' option requires an argument\"\n\n    if test yes = \"$export_dynamic\" && test -n \"$export_dynamic_flag_spec\"; then\n      eval arg=\\\"$export_dynamic_flag_spec\\\"\n      func_append compile_command \" $arg\"\n      func_append finalize_command \" $arg\"\n    fi\n\n    oldlibs=\n    # calculate the name of the file, without its directory\n    func_basename \"$output\"\n    outputname=$func_basename_result\n    libobjs_save=$libobjs\n\n    if test -n \"$shlibpath_var\"; then\n      # get the directories listed in $shlibpath_var\n      eval shlib_search_path=\\`\\$ECHO \\\"\\$$shlibpath_var\\\" \\| \\$SED \\'s/:/ /g\\'\\`\n    else\n      shlib_search_path=\n    fi\n    eval sys_lib_search_path=\\\"$sys_lib_search_path_spec\\\"\n    eval sys_lib_dlsearch_path=\\\"$sys_lib_dlsearch_path_spec\\\"\n\n    # Definition is injected by LT_CONFIG during libtool generation.\n    func_munge_path_list sys_lib_dlsearch_path \"$LT_SYS_LIBRARY_PATH\"\n\n    func_dirname \"$output\" \"/\" \"\"\n    output_objdir=$func_dirname_result$objdir\n    func_to_tool_file \"$output_objdir/\"\n    tool_output_objdir=$func_to_tool_file_result\n    # Create the object directory.\n    func_mkdir_p \"$output_objdir\"\n\n    # Determine the type of output\n    case $output in\n    \"\")\n      func_fatal_help \"you must specify an output file\"\n      ;;\n    *.$libext) linkmode=oldlib ;;\n    *.lo | *.$objext) linkmode=obj ;;\n    *.la) linkmode=lib ;;\n    *) linkmode=prog ;; # Anything else should be a program.\n    esac\n\n    specialdeplibs=\n\n    libs=\n    # Find all interdependent deplibs by searching for libraries\n    # that are linked more than once (e.g. -la -lb -la)\n    for deplib in $deplibs; do\n      if $opt_preserve_dup_deps; then\n\tcase \"$libs \" in\n\t*\" $deplib \"*) func_append specialdeplibs \" $deplib\" ;;\n\tesac\n      fi\n      func_append libs \" $deplib\"\n    done\n\n    if test lib = \"$linkmode\"; then\n      libs=\"$predeps $libs $compiler_lib_search_path $postdeps\"\n\n      # Compute libraries that are listed more than once in $predeps\n      # $postdeps and mark them as special (i.e., whose duplicates are\n      # not to be eliminated).\n      pre_post_deps=\n      if $opt_duplicate_compiler_generated_deps; then\n\tfor pre_post_dep in $predeps $postdeps; do\n\t  case \"$pre_post_deps \" in\n\t  *\" $pre_post_dep \"*) func_append specialdeplibs \" $pre_post_deps\" ;;\n\t  esac\n\t  func_append pre_post_deps \" $pre_post_dep\"\n\tdone\n      fi\n      pre_post_deps=\n    fi\n\n    deplibs=\n    newdependency_libs=\n    newlib_search_path=\n    need_relink=no # whether we're linking any uninstalled libtool libraries\n    notinst_deplibs= # not-installed libtool libraries\n    notinst_path= # paths that contain not-installed libtool libraries\n\n    case $linkmode in\n    lib)\n\tpasses=\"conv dlpreopen link\"\n\tfor file in $dlfiles $dlprefiles; do\n\t  case $file in\n\t  *.la) ;;\n\t  *)\n\t    func_fatal_help \"libraries can '-dlopen' only libtool libraries: $file\"\n\t    ;;\n\t  esac\n\tdone\n\t;;\n    prog)\n\tcompile_deplibs=\n\tfinalize_deplibs=\n\talldeplibs=false\n\tnewdlfiles=\n\tnewdlprefiles=\n\tpasses=\"conv scan dlopen dlpreopen link\"\n\t;;\n    *)  passes=\"conv\"\n\t;;\n    esac\n\n    for pass in $passes; do\n      # The preopen pass in lib mode reverses $deplibs; put it back here\n      # so that -L comes before libs that need it for instance...\n      if test lib,link = \"$linkmode,$pass\"; then\n\t## FIXME: Find the place where the list is rebuilt in the wrong\n\t##        order, and fix it there properly\n        tmp_deplibs=\n\tfor deplib in $deplibs; do\n\t  tmp_deplibs=\"$deplib $tmp_deplibs\"\n\tdone\n\tdeplibs=$tmp_deplibs\n      fi\n\n      if test lib,link = \"$linkmode,$pass\" ||\n\t test prog,scan = \"$linkmode,$pass\"; then\n\tlibs=$deplibs\n\tdeplibs=\n      fi\n      if test prog = \"$linkmode\"; then\n\tcase $pass in\n\tdlopen) libs=$dlfiles ;;\n\tdlpreopen) libs=$dlprefiles ;;\n\tlink) libs=\"$deplibs %DEPLIBS% $dependency_libs\" ;;\n\tesac\n      fi\n      if test lib,dlpreopen = \"$linkmode,$pass\"; then\n\t# Collect and forward deplibs of preopened libtool libs\n\tfor lib in $dlprefiles; do\n\t  # Ignore non-libtool-libs\n\t  dependency_libs=\n\t  func_resolve_sysroot \"$lib\"\n\t  case $lib in\n\t  *.la)\tfunc_source \"$func_resolve_sysroot_result\" ;;\n\t  esac\n\n\t  # Collect preopened libtool deplibs, except any this library\n\t  # has declared as weak libs\n\t  for deplib in $dependency_libs; do\n\t    func_basename \"$deplib\"\n            deplib_base=$func_basename_result\n\t    case \" $weak_libs \" in\n\t    *\" $deplib_base \"*) ;;\n\t    *) func_append deplibs \" $deplib\" ;;\n\t    esac\n\t  done\n\tdone\n\tlibs=$dlprefiles\n      fi\n      if test dlopen = \"$pass\"; then\n\t# Collect dlpreopened libraries\n\tsave_deplibs=$deplibs\n\tdeplibs=\n      fi\n\n      for deplib in $libs; do\n\tlib=\n\tfound=false\n\tcase $deplib in\n\t-mt|-mthreads|-kthread|-Kthread|-pthread|-pthreads|--thread-safe \\\n        |-threads|-fopenmp|-openmp|-mp|-xopenmp|-omp|-qsmp=*)\n\t  if test prog,link = \"$linkmode,$pass\"; then\n\t    compile_deplibs=\"$deplib $compile_deplibs\"\n\t    finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t  else\n\t    func_append compiler_flags \" $deplib\"\n\t    if test lib = \"$linkmode\"; then\n\t\tcase \"$new_inherited_linker_flags \" in\n\t\t    *\" $deplib \"*) ;;\n\t\t    * ) func_append new_inherited_linker_flags \" $deplib\" ;;\n\t\tesac\n\t    fi\n\t  fi\n\t  continue\n\t  ;;\n\t-l*)\n\t  if test lib != \"$linkmode\" && test prog != \"$linkmode\"; then\n\t    func_warning \"'-l' is ignored for archives/objects\"\n\t    continue\n\t  fi\n\t  func_stripname '-l' '' \"$deplib\"\n\t  name=$func_stripname_result\n\t  if test lib = \"$linkmode\"; then\n\t    searchdirs=\"$newlib_search_path $lib_search_path $compiler_lib_search_dirs $sys_lib_search_path $shlib_search_path\"\n\t  else\n\t    searchdirs=\"$newlib_search_path $lib_search_path $sys_lib_search_path $shlib_search_path\"\n\t  fi\n\t  for searchdir in $searchdirs; do\n\t    for search_ext in .la $std_shrext .so .a; do\n\t      # Search the libtool library\n\t      lib=$searchdir/lib$name$search_ext\n\t      if test -f \"$lib\"; then\n\t\tif test .la = \"$search_ext\"; then\n\t\t  found=:\n\t\telse\n\t\t  found=false\n\t\tfi\n\t\tbreak 2\n\t      fi\n\t    done\n\t  done\n\t  if $found; then\n\t    # deplib is a libtool library\n\t    # If $allow_libtool_libs_with_static_runtimes && $deplib is a stdlib,\n\t    # We need to do some special things here, and not later.\n\t    if test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t      case \" $predeps $postdeps \" in\n\t      *\" $deplib \"*)\n\t\tif func_lalib_p \"$lib\"; then\n\t\t  library_names=\n\t\t  old_library=\n\t\t  func_source \"$lib\"\n\t\t  for l in $old_library $library_names; do\n\t\t    ll=$l\n\t\t  done\n\t\t  if test \"X$ll\" = \"X$old_library\"; then # only static version available\n\t\t    found=false\n\t\t    func_dirname \"$lib\" \"\" \".\"\n\t\t    ladir=$func_dirname_result\n\t\t    lib=$ladir/$old_library\n\t\t    if test prog,link = \"$linkmode,$pass\"; then\n\t\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t\t    else\n\t\t      deplibs=\"$deplib $deplibs\"\n\t\t      test lib = \"$linkmode\" && newdependency_libs=\"$deplib $newdependency_libs\"\n\t\t    fi\n\t\t    continue\n\t\t  fi\n\t\tfi\n\t\t;;\n\t      *) ;;\n\t      esac\n\t    fi\n\t  else\n\t    # deplib doesn't seem to be a libtool library\n\t    if test prog,link = \"$linkmode,$pass\"; then\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    else\n\t      deplibs=\"$deplib $deplibs\"\n\t      test lib = \"$linkmode\" && newdependency_libs=\"$deplib $newdependency_libs\"\n\t    fi\n\t    continue\n\t  fi\n\t  ;; # -l\n\t*.ltframework)\n\t  if test prog,link = \"$linkmode,$pass\"; then\n\t    compile_deplibs=\"$deplib $compile_deplibs\"\n\t    finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t  else\n\t    deplibs=\"$deplib $deplibs\"\n\t    if test lib = \"$linkmode\"; then\n\t\tcase \"$new_inherited_linker_flags \" in\n\t\t    *\" $deplib \"*) ;;\n\t\t    * ) func_append new_inherited_linker_flags \" $deplib\" ;;\n\t\tesac\n\t    fi\n\t  fi\n\t  continue\n\t  ;;\n\t-L*)\n\t  case $linkmode in\n\t  lib)\n\t    deplibs=\"$deplib $deplibs\"\n\t    test conv = \"$pass\" && continue\n\t    newdependency_libs=\"$deplib $newdependency_libs\"\n\t    func_stripname '-L' '' \"$deplib\"\n\t    func_resolve_sysroot \"$func_stripname_result\"\n\t    func_append newlib_search_path \" $func_resolve_sysroot_result\"\n\t    ;;\n\t  prog)\n\t    if test conv = \"$pass\"; then\n\t      deplibs=\"$deplib $deplibs\"\n\t      continue\n\t    fi\n\t    if test scan = \"$pass\"; then\n\t      deplibs=\"$deplib $deplibs\"\n\t    else\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    fi\n\t    func_stripname '-L' '' \"$deplib\"\n\t    func_resolve_sysroot \"$func_stripname_result\"\n\t    func_append newlib_search_path \" $func_resolve_sysroot_result\"\n\t    ;;\n\t  *)\n\t    func_warning \"'-L' is ignored for archives/objects\"\n\t    ;;\n\t  esac # linkmode\n\t  continue\n\t  ;; # -L\n\t-R*)\n\t  if test link = \"$pass\"; then\n\t    func_stripname '-R' '' \"$deplib\"\n\t    func_resolve_sysroot \"$func_stripname_result\"\n\t    dir=$func_resolve_sysroot_result\n\t    # Make sure the xrpath contains only unique directories.\n\t    case \"$xrpath \" in\n\t    *\" $dir \"*) ;;\n\t    *) func_append xrpath \" $dir\" ;;\n\t    esac\n\t  fi\n\t  deplibs=\"$deplib $deplibs\"\n\t  continue\n\t  ;;\n\t*.la)\n\t  func_resolve_sysroot \"$deplib\"\n\t  lib=$func_resolve_sysroot_result\n\t  ;;\n\t*.$libext)\n\t  if test conv = \"$pass\"; then\n\t    deplibs=\"$deplib $deplibs\"\n\t    continue\n\t  fi\n\t  case $linkmode in\n\t  lib)\n\t    # Linking convenience modules into shared libraries is allowed,\n\t    # but linking other static libraries is non-portable.\n\t    case \" $dlpreconveniencelibs \" in\n\t    *\" $deplib \"*) ;;\n\t    *)\n\t      valid_a_lib=false\n\t      case $deplibs_check_method in\n\t\tmatch_pattern*)\n\t\t  set dummy $deplibs_check_method; shift\n\t\t  match_pattern_regex=`expr \"$deplibs_check_method\" : \"$1 \\(.*\\)\"`\n\t\t  if eval \"\\$ECHO \\\"$deplib\\\"\" 2>/dev/null | $SED 10q \\\n\t\t    | $EGREP \"$match_pattern_regex\" > /dev/null; then\n\t\t    valid_a_lib=:\n\t\t  fi\n\t\t;;\n\t\tpass_all)\n\t\t  valid_a_lib=:\n\t\t;;\n\t      esac\n\t      if $valid_a_lib; then\n\t\techo\n\t\t$ECHO \"*** Warning: Linking the shared library $output against the\"\n\t\t$ECHO \"*** static library $deplib is not portable!\"\n\t\tdeplibs=\"$deplib $deplibs\"\n\t      else\n\t\techo\n\t\t$ECHO \"*** Warning: Trying to link with static lib archive $deplib.\"\n\t\techo \"*** I have the capability to make that library automatically link in when\"\n\t\techo \"*** you link to this library.  But I can only do this if you have a\"\n\t\techo \"*** shared version of the library, which you do not appear to have\"\n\t\techo \"*** because the file extensions .$libext of this argument makes me believe\"\n\t\techo \"*** that it is just a static archive that I should not use here.\"\n\t      fi\n\t      ;;\n\t    esac\n\t    continue\n\t    ;;\n\t  prog)\n\t    if test link != \"$pass\"; then\n\t      deplibs=\"$deplib $deplibs\"\n\t    else\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    fi\n\t    continue\n\t    ;;\n\t  esac # linkmode\n\t  ;; # *.$libext\n\t*.lo | *.$objext)\n\t  if test conv = \"$pass\"; then\n\t    deplibs=\"$deplib $deplibs\"\n\t  elif test prog = \"$linkmode\"; then\n\t    if test dlpreopen = \"$pass\" || test yes != \"$dlopen_support\" || test no = \"$build_libtool_libs\"; then\n\t      # If there is no dlopen support or we're linking statically,\n\t      # we need to preload.\n\t      func_append newdlprefiles \" $deplib\"\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    else\n\t      func_append newdlfiles \" $deplib\"\n\t    fi\n\t  fi\n\t  continue\n\t  ;;\n\t%DEPLIBS%)\n\t  alldeplibs=:\n\t  continue\n\t  ;;\n\tesac # case $deplib\n\n\t$found || test -f \"$lib\" \\\n\t  || func_fatal_error \"cannot find the library '$lib' or unhandled argument '$deplib'\"\n\n\t# Check to see that this really is a libtool archive.\n\tfunc_lalib_unsafe_p \"$lib\" \\\n\t  || func_fatal_error \"'$lib' is not a valid libtool archive\"\n\n\tfunc_dirname \"$lib\" \"\" \".\"\n\tladir=$func_dirname_result\n\n\tdlname=\n\tdlopen=\n\tdlpreopen=\n\tlibdir=\n\tlibrary_names=\n\told_library=\n\tinherited_linker_flags=\n\t# If the library was installed with an old release of libtool,\n\t# it will not redefine variables installed, or shouldnotlink\n\tinstalled=yes\n\tshouldnotlink=no\n\tavoidtemprpath=\n\n\n\t# Read the .la file\n\tfunc_source \"$lib\"\n\n\t# Convert \"-framework foo\" to \"foo.ltframework\"\n\tif test -n \"$inherited_linker_flags\"; then\n\t  tmp_inherited_linker_flags=`$ECHO \"$inherited_linker_flags\" | $SED 's/-framework \\([^ $]*\\)/\\1.ltframework/g'`\n\t  for tmp_inherited_linker_flag in $tmp_inherited_linker_flags; do\n\t    case \" $new_inherited_linker_flags \" in\n\t      *\" $tmp_inherited_linker_flag \"*) ;;\n\t      *) func_append new_inherited_linker_flags \" $tmp_inherited_linker_flag\";;\n\t    esac\n\t  done\n\tfi\n\tdependency_libs=`$ECHO \" $dependency_libs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\tif test lib,link = \"$linkmode,$pass\" ||\n\t   test prog,scan = \"$linkmode,$pass\" ||\n\t   { test prog != \"$linkmode\" && test lib != \"$linkmode\"; }; then\n\t  test -n \"$dlopen\" && func_append dlfiles \" $dlopen\"\n\t  test -n \"$dlpreopen\" && func_append dlprefiles \" $dlpreopen\"\n\tfi\n\n\tif test conv = \"$pass\"; then\n\t  # Only check for convenience libraries\n\t  deplibs=\"$lib $deplibs\"\n\t  if test -z \"$libdir\"; then\n\t    if test -z \"$old_library\"; then\n\t      func_fatal_error \"cannot find name of link library for '$lib'\"\n\t    fi\n\t    # It is a libtool convenience library, so add in its objects.\n\t    func_append convenience \" $ladir/$objdir/$old_library\"\n\t    func_append old_convenience \" $ladir/$objdir/$old_library\"\n\t  elif test prog != \"$linkmode\" && test lib != \"$linkmode\"; then\n\t    func_fatal_error \"'$lib' is not a convenience library\"\n\t  fi\n\t  tmp_libs=\n\t  for deplib in $dependency_libs; do\n\t    deplibs=\"$deplib $deplibs\"\n\t    if $opt_preserve_dup_deps; then\n\t      case \"$tmp_libs \" in\n\t      *\" $deplib \"*) func_append specialdeplibs \" $deplib\" ;;\n\t      esac\n\t    fi\n\t    func_append tmp_libs \" $deplib\"\n\t  done\n\t  continue\n\tfi # $pass = conv\n\n\n\t# Get the name of the library we link against.\n\tlinklib=\n\tif test -n \"$old_library\" &&\n\t   { test yes = \"$prefer_static_libs\" ||\n\t     test built,no = \"$prefer_static_libs,$installed\"; }; then\n\t  linklib=$old_library\n\telse\n\t  for l in $old_library $library_names; do\n\t    linklib=$l\n\t  done\n\tfi\n\tif test -z \"$linklib\"; then\n\t  func_fatal_error \"cannot find name of link library for '$lib'\"\n\tfi\n\n\t# This library was specified with -dlopen.\n\tif test dlopen = \"$pass\"; then\n\t  test -z \"$libdir\" \\\n\t    && func_fatal_error \"cannot -dlopen a convenience library: '$lib'\"\n\t  if test -z \"$dlname\" ||\n\t     test yes != \"$dlopen_support\" ||\n\t     test no = \"$build_libtool_libs\"\n\t  then\n\t    # If there is no dlname, no dlopen support or we're linking\n\t    # statically, we need to preload.  We also need to preload any\n\t    # dependent libraries so libltdl's deplib preloader doesn't\n\t    # bomb out in the load deplibs phase.\n\t    func_append dlprefiles \" $lib $dependency_libs\"\n\t  else\n\t    func_append newdlfiles \" $lib\"\n\t  fi\n\t  continue\n\tfi # $pass = dlopen\n\n\t# We need an absolute path.\n\tcase $ladir in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) abs_ladir=$ladir ;;\n\t*)\n\t  abs_ladir=`cd \"$ladir\" && pwd`\n\t  if test -z \"$abs_ladir\"; then\n\t    func_warning \"cannot determine absolute directory name of '$ladir'\"\n\t    func_warning \"passing it literally to the linker, although it might fail\"\n\t    abs_ladir=$ladir\n\t  fi\n\t  ;;\n\tesac\n\tfunc_basename \"$lib\"\n\tlaname=$func_basename_result\n\n\t# Find the relevant object directory and library name.\n\tif test yes = \"$installed\"; then\n\t  if test ! -f \"$lt_sysroot$libdir/$linklib\" && test -f \"$abs_ladir/$linklib\"; then\n\t    func_warning \"library '$lib' was moved.\"\n\t    dir=$ladir\n\t    absdir=$abs_ladir\n\t    libdir=$abs_ladir\n\t  else\n\t    dir=$lt_sysroot$libdir\n\t    absdir=$lt_sysroot$libdir\n\t  fi\n\t  test yes = \"$hardcode_automatic\" && avoidtemprpath=yes\n\telse\n\t  if test ! -f \"$ladir/$objdir/$linklib\" && test -f \"$abs_ladir/$linklib\"; then\n\t    dir=$ladir\n\t    absdir=$abs_ladir\n\t    # Remove this search path later\n\t    func_append notinst_path \" $abs_ladir\"\n\t  else\n\t    dir=$ladir/$objdir\n\t    absdir=$abs_ladir/$objdir\n\t    # Remove this search path later\n\t    func_append notinst_path \" $abs_ladir\"\n\t  fi\n\tfi # $installed = yes\n\tfunc_stripname 'lib' '.la' \"$laname\"\n\tname=$func_stripname_result\n\n\t# This library was specified with -dlpreopen.\n\tif test dlpreopen = \"$pass\"; then\n\t  if test -z \"$libdir\" && test prog = \"$linkmode\"; then\n\t    func_fatal_error \"only libraries may -dlpreopen a convenience library: '$lib'\"\n\t  fi\n\t  case $host in\n\t    # special handling for platforms with PE-DLLs.\n\t    *cygwin* | *mingw* | *cegcc* )\n\t      # Linker will automatically link against shared library if both\n\t      # static and shared are present.  Therefore, ensure we extract\n\t      # symbols from the import library if a shared library is present\n\t      # (otherwise, the dlopen module name will be incorrect).  We do\n\t      # this by putting the import library name into $newdlprefiles.\n\t      # We recover the dlopen module name by 'saving' the la file\n\t      # name in a special purpose variable, and (later) extracting the\n\t      # dlname from the la file.\n\t      if test -n \"$dlname\"; then\n\t        func_tr_sh \"$dir/$linklib\"\n\t        eval \"libfile_$func_tr_sh_result=\\$abs_ladir/\\$laname\"\n\t        func_append newdlprefiles \" $dir/$linklib\"\n\t      else\n\t        func_append newdlprefiles \" $dir/$old_library\"\n\t        # Keep a list of preopened convenience libraries to check\n\t        # that they are being used correctly in the link pass.\n\t        test -z \"$libdir\" && \\\n\t          func_append dlpreconveniencelibs \" $dir/$old_library\"\n\t      fi\n\t    ;;\n\t    * )\n\t      # Prefer using a static library (so that no silly _DYNAMIC symbols\n\t      # are required to link).\n\t      if test -n \"$old_library\"; then\n\t        func_append newdlprefiles \" $dir/$old_library\"\n\t        # Keep a list of preopened convenience libraries to check\n\t        # that they are being used correctly in the link pass.\n\t        test -z \"$libdir\" && \\\n\t          func_append dlpreconveniencelibs \" $dir/$old_library\"\n\t      # Otherwise, use the dlname, so that lt_dlopen finds it.\n\t      elif test -n \"$dlname\"; then\n\t        func_append newdlprefiles \" $dir/$dlname\"\n\t      else\n\t        func_append newdlprefiles \" $dir/$linklib\"\n\t      fi\n\t    ;;\n\t  esac\n\tfi # $pass = dlpreopen\n\n\tif test -z \"$libdir\"; then\n\t  # Link the convenience library\n\t  if test lib = \"$linkmode\"; then\n\t    deplibs=\"$dir/$old_library $deplibs\"\n\t  elif test prog,link = \"$linkmode,$pass\"; then\n\t    compile_deplibs=\"$dir/$old_library $compile_deplibs\"\n\t    finalize_deplibs=\"$dir/$old_library $finalize_deplibs\"\n\t  else\n\t    deplibs=\"$lib $deplibs\" # used for prog,scan pass\n\t  fi\n\t  continue\n\tfi\n\n\n\tif test prog = \"$linkmode\" && test link != \"$pass\"; then\n\t  func_append newlib_search_path \" $ladir\"\n\t  deplibs=\"$lib $deplibs\"\n\n\t  linkalldeplibs=false\n\t  if test no != \"$link_all_deplibs\" || test -z \"$library_names\" ||\n\t     test no = \"$build_libtool_libs\"; then\n\t    linkalldeplibs=:\n\t  fi\n\n\t  tmp_libs=\n\t  for deplib in $dependency_libs; do\n\t    case $deplib in\n\t    -L*) func_stripname '-L' '' \"$deplib\"\n\t         func_resolve_sysroot \"$func_stripname_result\"\n\t         func_append newlib_search_path \" $func_resolve_sysroot_result\"\n\t\t ;;\n\t    esac\n\t    # Need to link against all dependency_libs?\n\t    if $linkalldeplibs; then\n\t      deplibs=\"$deplib $deplibs\"\n\t    else\n\t      # Need to hardcode shared library paths\n\t      # or/and link against static libraries\n\t      newdependency_libs=\"$deplib $newdependency_libs\"\n\t    fi\n\t    if $opt_preserve_dup_deps; then\n\t      case \"$tmp_libs \" in\n\t      *\" $deplib \"*) func_append specialdeplibs \" $deplib\" ;;\n\t      esac\n\t    fi\n\t    func_append tmp_libs \" $deplib\"\n\t  done # for deplib\n\t  continue\n\tfi # $linkmode = prog...\n\n\tif test prog,link = \"$linkmode,$pass\"; then\n\t  if test -n \"$library_names\" &&\n\t     { { test no = \"$prefer_static_libs\" ||\n\t         test built,yes = \"$prefer_static_libs,$installed\"; } ||\n\t       test -z \"$old_library\"; }; then\n\t    # We need to hardcode the library path\n\t    if test -n \"$shlibpath_var\" && test -z \"$avoidtemprpath\"; then\n\t      # Make sure the rpath contains only unique directories.\n\t      case $temp_rpath: in\n\t      *\"$absdir:\"*) ;;\n\t      *) func_append temp_rpath \"$absdir:\" ;;\n\t      esac\n\t    fi\n\n\t    # Hardcode the library path.\n\t    # Skip directories that are in the system default run-time\n\t    # search path.\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $absdir \"*) ;;\n\t    *)\n\t      case \"$compile_rpath \" in\n\t      *\" $absdir \"*) ;;\n\t      *) func_append compile_rpath \" $absdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $libdir \"*) ;;\n\t    *)\n\t      case \"$finalize_rpath \" in\n\t      *\" $libdir \"*) ;;\n\t      *) func_append finalize_rpath \" $libdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t  fi # $linkmode,$pass = prog,link...\n\n\t  if $alldeplibs &&\n\t     { test pass_all = \"$deplibs_check_method\" ||\n\t       { test yes = \"$build_libtool_libs\" &&\n\t\t test -n \"$library_names\"; }; }; then\n\t    # We only need to search for static libraries\n\t    continue\n\t  fi\n\tfi\n\n\tlink_static=no # Whether the deplib will be linked statically\n\tuse_static_libs=$prefer_static_libs\n\tif test built = \"$use_static_libs\" && test yes = \"$installed\"; then\n\t  use_static_libs=no\n\tfi\n\tif test -n \"$library_names\" &&\n\t   { test no = \"$use_static_libs\" || test -z \"$old_library\"; }; then\n\t  case $host in\n\t  *cygwin* | *mingw* | *cegcc* | *os2*)\n\t      # No point in relinking DLLs because paths are not encoded\n\t      func_append notinst_deplibs \" $lib\"\n\t      need_relink=no\n\t    ;;\n\t  *)\n\t    if test no = \"$installed\"; then\n\t      func_append notinst_deplibs \" $lib\"\n\t      need_relink=yes\n\t    fi\n\t    ;;\n\t  esac\n\t  # This is a shared library\n\n\t  # Warn about portability, can't link against -module's on some\n\t  # systems (darwin).  Don't bleat about dlopened modules though!\n\t  dlopenmodule=\n\t  for dlpremoduletest in $dlprefiles; do\n\t    if test \"X$dlpremoduletest\" = \"X$lib\"; then\n\t      dlopenmodule=$dlpremoduletest\n\t      break\n\t    fi\n\t  done\n\t  if test -z \"$dlopenmodule\" && test yes = \"$shouldnotlink\" && test link = \"$pass\"; then\n\t    echo\n\t    if test prog = \"$linkmode\"; then\n\t      $ECHO \"*** Warning: Linking the executable $output against the loadable module\"\n\t    else\n\t      $ECHO \"*** Warning: Linking the shared library $output against the loadable module\"\n\t    fi\n\t    $ECHO \"*** $linklib is not portable!\"\n\t  fi\n\t  if test lib = \"$linkmode\" &&\n\t     test yes = \"$hardcode_into_libs\"; then\n\t    # Hardcode the library path.\n\t    # Skip directories that are in the system default run-time\n\t    # search path.\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $absdir \"*) ;;\n\t    *)\n\t      case \"$compile_rpath \" in\n\t      *\" $absdir \"*) ;;\n\t      *) func_append compile_rpath \" $absdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $libdir \"*) ;;\n\t    *)\n\t      case \"$finalize_rpath \" in\n\t      *\" $libdir \"*) ;;\n\t      *) func_append finalize_rpath \" $libdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t  fi\n\n\t  if test -n \"$old_archive_from_expsyms_cmds\"; then\n\t    # figure out the soname\n\t    set dummy $library_names\n\t    shift\n\t    realname=$1\n\t    shift\n\t    libname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t    # use dlname if we got it. it's perfectly good, no?\n\t    if test -n \"$dlname\"; then\n\t      soname=$dlname\n\t    elif test -n \"$soname_spec\"; then\n\t      # bleh windows\n\t      case $host in\n\t      *cygwin* | mingw* | *cegcc* | *os2*)\n\t        func_arith $current - $age\n\t\tmajor=$func_arith_result\n\t\tversuffix=-$major\n\t\t;;\n\t      esac\n\t      eval soname=\\\"$soname_spec\\\"\n\t    else\n\t      soname=$realname\n\t    fi\n\n\t    # Make a new name for the extract_expsyms_cmds to use\n\t    soroot=$soname\n\t    func_basename \"$soroot\"\n\t    soname=$func_basename_result\n\t    func_stripname 'lib' '.dll' \"$soname\"\n\t    newlib=libimp-$func_stripname_result.a\n\n\t    # If the library has no export list, then create one now\n\t    if test -f \"$output_objdir/$soname-def\"; then :\n\t    else\n\t      func_verbose \"extracting exported symbol list from '$soname'\"\n\t      func_execute_cmds \"$extract_expsyms_cmds\" 'exit $?'\n\t    fi\n\n\t    # Create $newlib\n\t    if test -f \"$output_objdir/$newlib\"; then :; else\n\t      func_verbose \"generating import library for '$soname'\"\n\t      func_execute_cmds \"$old_archive_from_expsyms_cmds\" 'exit $?'\n\t    fi\n\t    # make sure the library variables are pointing to the new library\n\t    dir=$output_objdir\n\t    linklib=$newlib\n\t  fi # test -n \"$old_archive_from_expsyms_cmds\"\n\n\t  if test prog = \"$linkmode\" || test relink != \"$opt_mode\"; then\n\t    add_shlibpath=\n\t    add_dir=\n\t    add=\n\t    lib_linked=yes\n\t    case $hardcode_action in\n\t    immediate | unsupported)\n\t      if test no = \"$hardcode_direct\"; then\n\t\tadd=$dir/$linklib\n\t\tcase $host in\n\t\t  *-*-sco3.2v5.0.[024]*) add_dir=-L$dir ;;\n\t\t  *-*-sysv4*uw2*) add_dir=-L$dir ;;\n\t\t  *-*-sysv5OpenUNIX* | *-*-sysv5UnixWare7.[01].[10]* | \\\n\t\t    *-*-unixware7*) add_dir=-L$dir ;;\n\t\t  *-*-darwin* )\n\t\t    # if the lib is a (non-dlopened) module then we cannot\n\t\t    # link against it, someone is ignoring the earlier warnings\n\t\t    if /usr/bin/file -L $add 2> /dev/null |\n\t\t\t $GREP \": [^:]* bundle\" >/dev/null; then\n\t\t      if test \"X$dlopenmodule\" != \"X$lib\"; then\n\t\t\t$ECHO \"*** Warning: lib $linklib is a module, not a shared library\"\n\t\t\tif test -z \"$old_library\"; then\n\t\t\t  echo\n\t\t\t  echo \"*** And there doesn't seem to be a static archive available\"\n\t\t\t  echo \"*** The link will probably fail, sorry\"\n\t\t\telse\n\t\t\t  add=$dir/$old_library\n\t\t\tfi\n\t\t      elif test -n \"$old_library\"; then\n\t\t\tadd=$dir/$old_library\n\t\t      fi\n\t\t    fi\n\t\tesac\n\t      elif test no = \"$hardcode_minus_L\"; then\n\t\tcase $host in\n\t\t*-*-sunos*) add_shlibpath=$dir ;;\n\t\tesac\n\t\tadd_dir=-L$dir\n\t\tadd=-l$name\n\t      elif test no = \"$hardcode_shlibpath_var\"; then\n\t\tadd_shlibpath=$dir\n\t\tadd=-l$name\n\t      else\n\t\tlib_linked=no\n\t      fi\n\t      ;;\n\t    relink)\n\t      if test yes = \"$hardcode_direct\" &&\n\t         test no = \"$hardcode_direct_absolute\"; then\n\t\tadd=$dir/$linklib\n\t      elif test yes = \"$hardcode_minus_L\"; then\n\t\tadd_dir=-L$absdir\n\t\t# Try looking first in the location we're being installed to.\n\t\tif test -n \"$inst_prefix_dir\"; then\n\t\t  case $libdir in\n\t\t    [\\\\/]*)\n\t\t      func_append add_dir \" -L$inst_prefix_dir$libdir\"\n\t\t      ;;\n\t\t  esac\n\t\tfi\n\t\tadd=-l$name\n\t      elif test yes = \"$hardcode_shlibpath_var\"; then\n\t\tadd_shlibpath=$dir\n\t\tadd=-l$name\n\t      else\n\t\tlib_linked=no\n\t      fi\n\t      ;;\n\t    *) lib_linked=no ;;\n\t    esac\n\n\t    if test yes != \"$lib_linked\"; then\n\t      func_fatal_configuration \"unsupported hardcode properties\"\n\t    fi\n\n\t    if test -n \"$add_shlibpath\"; then\n\t      case :$compile_shlibpath: in\n\t      *\":$add_shlibpath:\"*) ;;\n\t      *) func_append compile_shlibpath \"$add_shlibpath:\" ;;\n\t      esac\n\t    fi\n\t    if test prog = \"$linkmode\"; then\n\t      test -n \"$add_dir\" && compile_deplibs=\"$add_dir $compile_deplibs\"\n\t      test -n \"$add\" && compile_deplibs=\"$add $compile_deplibs\"\n\t    else\n\t      test -n \"$add_dir\" && deplibs=\"$add_dir $deplibs\"\n\t      test -n \"$add\" && deplibs=\"$add $deplibs\"\n\t      if test yes != \"$hardcode_direct\" &&\n\t\t test yes != \"$hardcode_minus_L\" &&\n\t\t test yes = \"$hardcode_shlibpath_var\"; then\n\t\tcase :$finalize_shlibpath: in\n\t\t*\":$libdir:\"*) ;;\n\t\t*) func_append finalize_shlibpath \"$libdir:\" ;;\n\t\tesac\n\t      fi\n\t    fi\n\t  fi\n\n\t  if test prog = \"$linkmode\" || test relink = \"$opt_mode\"; then\n\t    add_shlibpath=\n\t    add_dir=\n\t    add=\n\t    # Finalize command for both is simple: just hardcode it.\n\t    if test yes = \"$hardcode_direct\" &&\n\t       test no = \"$hardcode_direct_absolute\"; then\n\t      add=$libdir/$linklib\n\t    elif test yes = \"$hardcode_minus_L\"; then\n\t      add_dir=-L$libdir\n\t      add=-l$name\n\t    elif test yes = \"$hardcode_shlibpath_var\"; then\n\t      case :$finalize_shlibpath: in\n\t      *\":$libdir:\"*) ;;\n\t      *) func_append finalize_shlibpath \"$libdir:\" ;;\n\t      esac\n\t      add=-l$name\n\t    elif test yes = \"$hardcode_automatic\"; then\n\t      if test -n \"$inst_prefix_dir\" &&\n\t\t test -f \"$inst_prefix_dir$libdir/$linklib\"; then\n\t\tadd=$inst_prefix_dir$libdir/$linklib\n\t      else\n\t\tadd=$libdir/$linklib\n\t      fi\n\t    else\n\t      # We cannot seem to hardcode it, guess we'll fake it.\n\t      add_dir=-L$libdir\n\t      # Try looking first in the location we're being installed to.\n\t      if test -n \"$inst_prefix_dir\"; then\n\t\tcase $libdir in\n\t\t  [\\\\/]*)\n\t\t    func_append add_dir \" -L$inst_prefix_dir$libdir\"\n\t\t    ;;\n\t\tesac\n\t      fi\n\t      add=-l$name\n\t    fi\n\n\t    if test prog = \"$linkmode\"; then\n\t      test -n \"$add_dir\" && finalize_deplibs=\"$add_dir $finalize_deplibs\"\n\t      test -n \"$add\" && finalize_deplibs=\"$add $finalize_deplibs\"\n\t    else\n\t      test -n \"$add_dir\" && deplibs=\"$add_dir $deplibs\"\n\t      test -n \"$add\" && deplibs=\"$add $deplibs\"\n\t    fi\n\t  fi\n\telif test prog = \"$linkmode\"; then\n\t  # Here we assume that one of hardcode_direct or hardcode_minus_L\n\t  # is not unsupported.  This is valid on all known static and\n\t  # shared platforms.\n\t  if test unsupported != \"$hardcode_direct\"; then\n\t    test -n \"$old_library\" && linklib=$old_library\n\t    compile_deplibs=\"$dir/$linklib $compile_deplibs\"\n\t    finalize_deplibs=\"$dir/$linklib $finalize_deplibs\"\n\t  else\n\t    compile_deplibs=\"-l$name -L$dir $compile_deplibs\"\n\t    finalize_deplibs=\"-l$name -L$dir $finalize_deplibs\"\n\t  fi\n\telif test yes = \"$build_libtool_libs\"; then\n\t  # Not a shared library\n\t  if test pass_all != \"$deplibs_check_method\"; then\n\t    # We're trying link a shared library against a static one\n\t    # but the system doesn't support it.\n\n\t    # Just print a warning and add the library to dependency_libs so\n\t    # that the program can be linked against the static library.\n\t    echo\n\t    $ECHO \"*** Warning: This system cannot link to static lib archive $lib.\"\n\t    echo \"*** I have the capability to make that library automatically link in when\"\n\t    echo \"*** you link to this library.  But I can only do this if you have a\"\n\t    echo \"*** shared version of the library, which you do not appear to have.\"\n\t    if test yes = \"$module\"; then\n\t      echo \"*** But as you try to build a module library, libtool will still create \"\n\t      echo \"*** a static module, that should work as long as the dlopening application\"\n\t      echo \"*** is linked with the -dlopen flag to resolve symbols at runtime.\"\n\t      if test -z \"$global_symbol_pipe\"; then\n\t\techo\n\t\techo \"*** However, this would only work if libtool was able to extract symbol\"\n\t\techo \"*** lists from a program, using 'nm' or equivalent, but libtool could\"\n\t\techo \"*** not find such a program.  So, this module is probably useless.\"\n\t\techo \"*** 'nm' from GNU binutils and a full rebuild may help.\"\n\t      fi\n\t      if test no = \"$build_old_libs\"; then\n\t\tbuild_libtool_libs=module\n\t\tbuild_old_libs=yes\n\t      else\n\t\tbuild_libtool_libs=no\n\t      fi\n\t    fi\n\t  else\n\t    deplibs=\"$dir/$old_library $deplibs\"\n\t    link_static=yes\n\t  fi\n\tfi # link shared/static library?\n\n\tif test lib = \"$linkmode\"; then\n\t  if test -n \"$dependency_libs\" &&\n\t     { test yes != \"$hardcode_into_libs\" ||\n\t       test yes = \"$build_old_libs\" ||\n\t       test yes = \"$link_static\"; }; then\n\t    # Extract -R from dependency_libs\n\t    temp_deplibs=\n\t    for libdir in $dependency_libs; do\n\t      case $libdir in\n\t      -R*) func_stripname '-R' '' \"$libdir\"\n\t           temp_xrpath=$func_stripname_result\n\t\t   case \" $xrpath \" in\n\t\t   *\" $temp_xrpath \"*) ;;\n\t\t   *) func_append xrpath \" $temp_xrpath\";;\n\t\t   esac;;\n\t      *) func_append temp_deplibs \" $libdir\";;\n\t      esac\n\t    done\n\t    dependency_libs=$temp_deplibs\n\t  fi\n\n\t  func_append newlib_search_path \" $absdir\"\n\t  # Link against this library\n\t  test no = \"$link_static\" && newdependency_libs=\"$abs_ladir/$laname $newdependency_libs\"\n\t  # ... and its dependency_libs\n\t  tmp_libs=\n\t  for deplib in $dependency_libs; do\n\t    newdependency_libs=\"$deplib $newdependency_libs\"\n\t    case $deplib in\n              -L*) func_stripname '-L' '' \"$deplib\"\n                   func_resolve_sysroot \"$func_stripname_result\";;\n              *) func_resolve_sysroot \"$deplib\" ;;\n            esac\n\t    if $opt_preserve_dup_deps; then\n\t      case \"$tmp_libs \" in\n\t      *\" $func_resolve_sysroot_result \"*)\n                func_append specialdeplibs \" $func_resolve_sysroot_result\" ;;\n\t      esac\n\t    fi\n\t    func_append tmp_libs \" $func_resolve_sysroot_result\"\n\t  done\n\n\t  if test no != \"$link_all_deplibs\"; then\n\t    # Add the search paths of all dependency libraries\n\t    for deplib in $dependency_libs; do\n\t      path=\n\t      case $deplib in\n\t      -L*) path=$deplib ;;\n\t      *.la)\n\t        func_resolve_sysroot \"$deplib\"\n\t        deplib=$func_resolve_sysroot_result\n\t        func_dirname \"$deplib\" \"\" \".\"\n\t\tdir=$func_dirname_result\n\t\t# We need an absolute path.\n\t\tcase $dir in\n\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) absdir=$dir ;;\n\t\t*)\n\t\t  absdir=`cd \"$dir\" && pwd`\n\t\t  if test -z \"$absdir\"; then\n\t\t    func_warning \"cannot determine absolute directory name of '$dir'\"\n\t\t    absdir=$dir\n\t\t  fi\n\t\t  ;;\n\t\tesac\n\t\tif $GREP \"^installed=no\" $deplib > /dev/null; then\n\t\tcase $host in\n\t\t*-*-darwin*)\n\t\t  depdepl=\n\t\t  eval deplibrary_names=`$SED -n -e 's/^library_names=\\(.*\\)$/\\1/p' $deplib`\n\t\t  if test -n \"$deplibrary_names\"; then\n\t\t    for tmp in $deplibrary_names; do\n\t\t      depdepl=$tmp\n\t\t    done\n\t\t    if test -f \"$absdir/$objdir/$depdepl\"; then\n\t\t      depdepl=$absdir/$objdir/$depdepl\n\t\t      darwin_install_name=`$OTOOL -L $depdepl | awk '{if (NR == 2) {print $1;exit}}'`\n                      if test -z \"$darwin_install_name\"; then\n                          darwin_install_name=`$OTOOL64 -L $depdepl  | awk '{if (NR == 2) {print $1;exit}}'`\n                      fi\n\t\t      func_append compiler_flags \" $wl-dylib_file $wl$darwin_install_name:$depdepl\"\n\t\t      func_append linker_flags \" -dylib_file $darwin_install_name:$depdepl\"\n\t\t      path=\n\t\t    fi\n\t\t  fi\n\t\t  ;;\n\t\t*)\n\t\t  path=-L$absdir/$objdir\n\t\t  ;;\n\t\tesac\n\t\telse\n\t\t  eval libdir=`$SED -n -e 's/^libdir=\\(.*\\)$/\\1/p' $deplib`\n\t\t  test -z \"$libdir\" && \\\n\t\t    func_fatal_error \"'$deplib' is not a valid libtool archive\"\n\t\t  test \"$absdir\" != \"$libdir\" && \\\n\t\t    func_warning \"'$deplib' seems to be moved\"\n\n\t\t  path=-L$absdir\n\t\tfi\n\t\t;;\n\t      esac\n\t      case \" $deplibs \" in\n\t      *\" $path \"*) ;;\n\t      *) deplibs=\"$path $deplibs\" ;;\n\t      esac\n\t    done\n\t  fi # link_all_deplibs != no\n\tfi # linkmode = lib\n      done # for deplib in $libs\n      if test link = \"$pass\"; then\n\tif test prog = \"$linkmode\"; then\n\t  compile_deplibs=\"$new_inherited_linker_flags $compile_deplibs\"\n\t  finalize_deplibs=\"$new_inherited_linker_flags $finalize_deplibs\"\n\telse\n\t  compiler_flags=\"$compiler_flags \"`$ECHO \" $new_inherited_linker_flags\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\tfi\n      fi\n      dependency_libs=$newdependency_libs\n      if test dlpreopen = \"$pass\"; then\n\t# Link the dlpreopened libraries before other libraries\n\tfor deplib in $save_deplibs; do\n\t  deplibs=\"$deplib $deplibs\"\n\tdone\n      fi\n      if test dlopen != \"$pass\"; then\n\ttest conv = \"$pass\" || {\n\t  # Make sure lib_search_path contains only unique directories.\n\t  lib_search_path=\n\t  for dir in $newlib_search_path; do\n\t    case \"$lib_search_path \" in\n\t    *\" $dir \"*) ;;\n\t    *) func_append lib_search_path \" $dir\" ;;\n\t    esac\n\t  done\n\t  newlib_search_path=\n\t}\n\n\tif test prog,link = \"$linkmode,$pass\"; then\n\t  vars=\"compile_deplibs finalize_deplibs\"\n\telse\n\t  vars=deplibs\n\tfi\n\tfor var in $vars dependency_libs; do\n\t  # Add libraries to $var in reverse order\n\t  eval tmp_libs=\\\"\\$$var\\\"\n\t  new_libs=\n\t  for deplib in $tmp_libs; do\n\t    # FIXME: Pedantically, this is the right thing to do, so\n\t    #        that some nasty dependency loop isn't accidentally\n\t    #        broken:\n\t    #new_libs=\"$deplib $new_libs\"\n\t    # Pragmatically, this seems to cause very few problems in\n\t    # practice:\n\t    case $deplib in\n\t    -L*) new_libs=\"$deplib $new_libs\" ;;\n\t    -R*) ;;\n\t    *)\n\t      # And here is the reason: when a library appears more\n\t      # than once as an explicit dependence of a library, or\n\t      # is implicitly linked in more than once by the\n\t      # compiler, it is considered special, and multiple\n\t      # occurrences thereof are not removed.  Compare this\n\t      # with having the same library being listed as a\n\t      # dependency of multiple other libraries: in this case,\n\t      # we know (pedantically, we assume) the library does not\n\t      # need to be listed more than once, so we keep only the\n\t      # last copy.  This is not always right, but it is rare\n\t      # enough that we require users that really mean to play\n\t      # such unportable linking tricks to link the library\n\t      # using -Wl,-lname, so that libtool does not consider it\n\t      # for duplicate removal.\n\t      case \" $specialdeplibs \" in\n\t      *\" $deplib \"*) new_libs=\"$deplib $new_libs\" ;;\n\t      *)\n\t\tcase \" $new_libs \" in\n\t\t*\" $deplib \"*) ;;\n\t\t*) new_libs=\"$deplib $new_libs\" ;;\n\t\tesac\n\t\t;;\n\t      esac\n\t      ;;\n\t    esac\n\t  done\n\t  tmp_libs=\n\t  for deplib in $new_libs; do\n\t    case $deplib in\n\t    -L*)\n\t      case \" $tmp_libs \" in\n\t      *\" $deplib \"*) ;;\n\t      *) func_append tmp_libs \" $deplib\" ;;\n\t      esac\n\t      ;;\n\t    *) func_append tmp_libs \" $deplib\" ;;\n\t    esac\n\t  done\n\t  eval $var=\\\"$tmp_libs\\\"\n\tdone # for var\n      fi\n\n      # Add Sun CC postdeps if required:\n      test CXX = \"$tagname\" && {\n        case $host_os in\n        linux*)\n          case `$CC -V 2>&1 | sed 5q` in\n          *Sun\\ C*) # Sun C++ 5.9\n            func_suncc_cstd_abi\n\n            if test no != \"$suncc_use_cstd_abi\"; then\n              func_append postdeps ' -library=Cstd -library=Crun'\n            fi\n            ;;\n          esac\n          ;;\n\n        solaris*)\n          func_cc_basename \"$CC\"\n          case $func_cc_basename_result in\n          CC* | sunCC*)\n            func_suncc_cstd_abi\n\n            if test no != \"$suncc_use_cstd_abi\"; then\n              func_append postdeps ' -library=Cstd -library=Crun'\n            fi\n            ;;\n          esac\n          ;;\n        esac\n      }\n\n      # Last step: remove runtime libs from dependency_libs\n      # (they stay in deplibs)\n      tmp_libs=\n      for i in $dependency_libs; do\n\tcase \" $predeps $postdeps $compiler_lib_search_path \" in\n\t*\" $i \"*)\n\t  i=\n\t  ;;\n\tesac\n\tif test -n \"$i\"; then\n\t  func_append tmp_libs \" $i\"\n\tfi\n      done\n      dependency_libs=$tmp_libs\n    done # for pass\n    if test prog = \"$linkmode\"; then\n      dlfiles=$newdlfiles\n    fi\n    if test prog = \"$linkmode\" || test lib = \"$linkmode\"; then\n      dlprefiles=$newdlprefiles\n    fi\n\n    case $linkmode in\n    oldlib)\n      if test -n \"$dlfiles$dlprefiles\" || test no != \"$dlself\"; then\n\tfunc_warning \"'-dlopen' is ignored for archives\"\n      fi\n\n      case \" $deplibs\" in\n      *\\ -l* | *\\ -L*)\n\tfunc_warning \"'-l' and '-L' are ignored for archives\" ;;\n      esac\n\n      test -n \"$rpath\" && \\\n\tfunc_warning \"'-rpath' is ignored for archives\"\n\n      test -n \"$xrpath\" && \\\n\tfunc_warning \"'-R' is ignored for archives\"\n\n      test -n \"$vinfo\" && \\\n\tfunc_warning \"'-version-info/-version-number' is ignored for archives\"\n\n      test -n \"$release\" && \\\n\tfunc_warning \"'-release' is ignored for archives\"\n\n      test -n \"$export_symbols$export_symbols_regex\" && \\\n\tfunc_warning \"'-export-symbols' is ignored for archives\"\n\n      # Now set the variables for building old libraries.\n      build_libtool_libs=no\n      oldlibs=$output\n      func_append objs \"$old_deplibs\"\n      ;;\n\n    lib)\n      # Make sure we only generate libraries of the form 'libNAME.la'.\n      case $outputname in\n      lib*)\n\tfunc_stripname 'lib' '.la' \"$outputname\"\n\tname=$func_stripname_result\n\teval shared_ext=\\\"$shrext_cmds\\\"\n\teval libname=\\\"$libname_spec\\\"\n\t;;\n      *)\n\ttest no = \"$module\" \\\n\t  && func_fatal_help \"libtool library '$output' must begin with 'lib'\"\n\n\tif test no != \"$need_lib_prefix\"; then\n\t  # Add the \"lib\" prefix for modules if required\n\t  func_stripname '' '.la' \"$outputname\"\n\t  name=$func_stripname_result\n\t  eval shared_ext=\\\"$shrext_cmds\\\"\n\t  eval libname=\\\"$libname_spec\\\"\n\telse\n\t  func_stripname '' '.la' \"$outputname\"\n\t  libname=$func_stripname_result\n\tfi\n\t;;\n      esac\n\n      if test -n \"$objs\"; then\n\tif test pass_all != \"$deplibs_check_method\"; then\n\t  func_fatal_error \"cannot build libtool library '$output' from non-libtool objects on this host:$objs\"\n\telse\n\t  echo\n\t  $ECHO \"*** Warning: Linking the shared library $output against the non-libtool\"\n\t  $ECHO \"*** objects $objs is not portable!\"\n\t  func_append libobjs \" $objs\"\n\tfi\n      fi\n\n      test no = \"$dlself\" \\\n\t|| func_warning \"'-dlopen self' is ignored for libtool libraries\"\n\n      set dummy $rpath\n      shift\n      test 1 -lt \"$#\" \\\n\t&& func_warning \"ignoring multiple '-rpath's for a libtool library\"\n\n      install_libdir=$1\n\n      oldlibs=\n      if test -z \"$rpath\"; then\n\tif test yes = \"$build_libtool_libs\"; then\n\t  # Building a libtool convenience library.\n\t  # Some compilers have problems with a '.al' extension so\n\t  # convenience libraries should have the same extension an\n\t  # archive normally would.\n\t  oldlibs=\"$output_objdir/$libname.$libext $oldlibs\"\n\t  build_libtool_libs=convenience\n\t  build_old_libs=yes\n\tfi\n\n\ttest -n \"$vinfo\" && \\\n\t  func_warning \"'-version-info/-version-number' is ignored for convenience libraries\"\n\n\ttest -n \"$release\" && \\\n\t  func_warning \"'-release' is ignored for convenience libraries\"\n      else\n\n\t# Parse the version information argument.\n\tsave_ifs=$IFS; IFS=:\n\tset dummy $vinfo 0 0 0\n\tshift\n\tIFS=$save_ifs\n\n\ttest -n \"$7\" && \\\n\t  func_fatal_help \"too many parameters to '-version-info'\"\n\n\t# convert absolute version numbers to libtool ages\n\t# this retains compatibility with .la files and attempts\n\t# to make the code below a bit more comprehensible\n\n\tcase $vinfo_number in\n\tyes)\n\t  number_major=$1\n\t  number_minor=$2\n\t  number_revision=$3\n\t  #\n\t  # There are really only two kinds -- those that\n\t  # use the current revision as the major version\n\t  # and those that subtract age and use age as\n\t  # a minor version.  But, then there is irix\n\t  # that has an extra 1 added just for fun\n\t  #\n\t  case $version_type in\n\t  # correct linux to gnu/linux during the next big refactor\n\t  darwin|freebsd-elf|linux|osf|windows|none)\n\t    func_arith $number_major + $number_minor\n\t    current=$func_arith_result\n\t    age=$number_minor\n\t    revision=$number_revision\n\t    ;;\n\t  freebsd-aout|qnx|sunos)\n\t    current=$number_major\n\t    revision=$number_minor\n\t    age=0\n\t    ;;\n\t  irix|nonstopux)\n\t    func_arith $number_major + $number_minor\n\t    current=$func_arith_result\n\t    age=$number_minor\n\t    revision=$number_minor\n\t    lt_irix_increment=no\n\t    ;;\n\t  esac\n\t  ;;\n\tno)\n\t  current=$1\n\t  revision=$2\n\t  age=$3\n\t  ;;\n\tesac\n\n\t# Check that each of the things are valid numbers.\n\tcase $current in\n\t0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]) ;;\n\t*)\n\t  func_error \"CURRENT '$current' must be a nonnegative integer\"\n\t  func_fatal_error \"'$vinfo' is not valid version information\"\n\t  ;;\n\tesac\n\n\tcase $revision in\n\t0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]) ;;\n\t*)\n\t  func_error \"REVISION '$revision' must be a nonnegative integer\"\n\t  func_fatal_error \"'$vinfo' is not valid version information\"\n\t  ;;\n\tesac\n\n\tcase $age in\n\t0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]) ;;\n\t*)\n\t  func_error \"AGE '$age' must be a nonnegative integer\"\n\t  func_fatal_error \"'$vinfo' is not valid version information\"\n\t  ;;\n\tesac\n\n\tif test \"$age\" -gt \"$current\"; then\n\t  func_error \"AGE '$age' is greater than the current interface number '$current'\"\n\t  func_fatal_error \"'$vinfo' is not valid version information\"\n\tfi\n\n\t# Calculate the version variables.\n\tmajor=\n\tversuffix=\n\tverstring=\n\tcase $version_type in\n\tnone) ;;\n\n\tdarwin)\n\t  # Like Linux, but with the current version available in\n\t  # verstring for coding it into the library header\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=$major.$age.$revision\n\t  # Darwin ld doesn't like 0 for these options...\n\t  func_arith $current + 1\n\t  minor_current=$func_arith_result\n\t  xlcverstring=\"$wl-compatibility_version $wl$minor_current $wl-current_version $wl$minor_current.$revision\"\n\t  verstring=\"-compatibility_version $minor_current -current_version $minor_current.$revision\"\n          # On Darwin other compilers\n          case $CC in\n              nagfor*)\n                  verstring=\"$wl-compatibility_version $wl$minor_current $wl-current_version $wl$minor_current.$revision\"\n                  ;;\n              *)\n                  verstring=\"-compatibility_version $minor_current -current_version $minor_current.$revision\"\n                  ;;\n          esac\n\t  ;;\n\n\tfreebsd-aout)\n\t  major=.$current\n\t  versuffix=.$current.$revision\n\t  ;;\n\n\tfreebsd-elf)\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=$major.$age.$revision\n\t  ;;\n\n\tirix | nonstopux)\n\t  if test no = \"$lt_irix_increment\"; then\n\t    func_arith $current - $age\n\t  else\n\t    func_arith $current - $age + 1\n\t  fi\n\t  major=$func_arith_result\n\n\t  case $version_type in\n\t    nonstopux) verstring_prefix=nonstopux ;;\n\t    *)         verstring_prefix=sgi ;;\n\t  esac\n\t  verstring=$verstring_prefix$major.$revision\n\n\t  # Add in all the interfaces that we are compatible with.\n\t  loop=$revision\n\t  while test 0 -ne \"$loop\"; do\n\t    func_arith $revision - $loop\n\t    iface=$func_arith_result\n\t    func_arith $loop - 1\n\t    loop=$func_arith_result\n\t    verstring=$verstring_prefix$major.$iface:$verstring\n\t  done\n\n\t  # Before this point, $major must not contain '.'.\n\t  major=.$major\n\t  versuffix=$major.$revision\n\t  ;;\n\n\tlinux) # correct to gnu/linux during the next big refactor\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=$major.$age.$revision\n\t  ;;\n\n\tosf)\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=.$current.$age.$revision\n\t  verstring=$current.$age.$revision\n\n\t  # Add in all the interfaces that we are compatible with.\n\t  loop=$age\n\t  while test 0 -ne \"$loop\"; do\n\t    func_arith $current - $loop\n\t    iface=$func_arith_result\n\t    func_arith $loop - 1\n\t    loop=$func_arith_result\n\t    verstring=$verstring:$iface.0\n\t  done\n\n\t  # Make executables depend on our current version.\n\t  func_append verstring \":$current.0\"\n\t  ;;\n\n\tqnx)\n\t  major=.$current\n\t  versuffix=.$current\n\t  ;;\n\n\tsco)\n\t  major=.$current\n\t  versuffix=.$current\n\t  ;;\n\n\tsunos)\n\t  major=.$current\n\t  versuffix=.$current.$revision\n\t  ;;\n\n\twindows)\n\t  # Use '-' rather than '.', since we only want one\n\t  # extension on DOS 8.3 file systems.\n\t  func_arith $current - $age\n\t  major=$func_arith_result\n\t  versuffix=-$major\n\t  ;;\n\n\t*)\n\t  func_fatal_configuration \"unknown library version type '$version_type'\"\n\t  ;;\n\tesac\n\n\t# Clear the version info if we defaulted, and they specified a release.\n\tif test -z \"$vinfo\" && test -n \"$release\"; then\n\t  major=\n\t  case $version_type in\n\t  darwin)\n\t    # we can't check for \"0.0\" in archive_cmds due to quoting\n\t    # problems, so we reset it completely\n\t    verstring=\n\t    ;;\n\t  *)\n\t    verstring=0.0\n\t    ;;\n\t  esac\n\t  if test no = \"$need_version\"; then\n\t    versuffix=\n\t  else\n\t    versuffix=.0.0\n\t  fi\n\tfi\n\n\t# Remove version info from name if versioning should be avoided\n\tif test yes,no = \"$avoid_version,$need_version\"; then\n\t  major=\n\t  versuffix=\n\t  verstring=\n\tfi\n\n\t# Check to see if the archive will have undefined symbols.\n\tif test yes = \"$allow_undefined\"; then\n\t  if test unsupported = \"$allow_undefined_flag\"; then\n\t    if test yes = \"$build_old_libs\"; then\n\t      func_warning \"undefined symbols not allowed in $host shared libraries; building static only\"\n\t      build_libtool_libs=no\n\t    else\n\t      func_fatal_error \"can't build $host shared library unless -no-undefined is specified\"\n\t    fi\n\t  fi\n\telse\n\t  # Don't allow undefined symbols.\n\t  allow_undefined_flag=$no_undefined_flag\n\tfi\n\n      fi\n\n      func_generate_dlsyms \"$libname\" \"$libname\" :\n      func_append libobjs \" $symfileobj\"\n      test \" \" = \"$libobjs\" && libobjs=\n\n      if test relink != \"$opt_mode\"; then\n\t# Remove our outputs, but don't remove object files since they\n\t# may have been created when compiling PIC objects.\n\tremovelist=\n\ttempremovelist=`$ECHO \"$output_objdir/*\"`\n\tfor p in $tempremovelist; do\n\t  case $p in\n\t    *.$objext | *.gcno)\n\t       ;;\n\t    $output_objdir/$outputname | $output_objdir/$libname.* | $output_objdir/$libname$release.*)\n\t       if test -n \"$precious_files_regex\"; then\n\t\t if $ECHO \"$p\" | $EGREP -e \"$precious_files_regex\" >/dev/null 2>&1\n\t\t then\n\t\t   continue\n\t\t fi\n\t       fi\n\t       func_append removelist \" $p\"\n\t       ;;\n\t    *) ;;\n\t  esac\n\tdone\n\ttest -n \"$removelist\" && \\\n\t  func_show_eval \"${RM}r \\$removelist\"\n      fi\n\n      # Now set the variables for building old libraries.\n      if test yes = \"$build_old_libs\" && test convenience != \"$build_libtool_libs\"; then\n\tfunc_append oldlibs \" $output_objdir/$libname.$libext\"\n\n\t# Transform .lo files to .o files.\n\toldobjs=\"$objs \"`$ECHO \"$libobjs\" | $SP2NL | $SED \"/\\.$libext$/d; $lo2o\" | $NL2SP`\n      fi\n\n      # Eliminate all temporary directories.\n      #for path in $notinst_path; do\n      #\tlib_search_path=`$ECHO \"$lib_search_path \" | $SED \"s% $path % %g\"`\n      #\tdeplibs=`$ECHO \"$deplibs \" | $SED \"s% -L$path % %g\"`\n      #\tdependency_libs=`$ECHO \"$dependency_libs \" | $SED \"s% -L$path % %g\"`\n      #done\n\n      if test -n \"$xrpath\"; then\n\t# If the user specified any rpath flags, then add them.\n\ttemp_xrpath=\n\tfor libdir in $xrpath; do\n\t  func_replace_sysroot \"$libdir\"\n\t  func_append temp_xrpath \" -R$func_replace_sysroot_result\"\n\t  case \"$finalize_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append finalize_rpath \" $libdir\" ;;\n\t  esac\n\tdone\n\tif test yes != \"$hardcode_into_libs\" || test yes = \"$build_old_libs\"; then\n\t  dependency_libs=\"$temp_xrpath $dependency_libs\"\n\tfi\n      fi\n\n      # Make sure dlfiles contains only unique files that won't be dlpreopened\n      old_dlfiles=$dlfiles\n      dlfiles=\n      for lib in $old_dlfiles; do\n\tcase \" $dlprefiles $dlfiles \" in\n\t*\" $lib \"*) ;;\n\t*) func_append dlfiles \" $lib\" ;;\n\tesac\n      done\n\n      # Make sure dlprefiles contains only unique files\n      old_dlprefiles=$dlprefiles\n      dlprefiles=\n      for lib in $old_dlprefiles; do\n\tcase \"$dlprefiles \" in\n\t*\" $lib \"*) ;;\n\t*) func_append dlprefiles \" $lib\" ;;\n\tesac\n      done\n\n      if test yes = \"$build_libtool_libs\"; then\n\tif test -n \"$rpath\"; then\n\t  case $host in\n\t  *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-*-beos* | *-cegcc* | *-*-haiku*)\n\t    # these systems don't actually have a c library (as such)!\n\t    ;;\n\t  *-*-rhapsody* | *-*-darwin1.[012])\n\t    # Rhapsody C library is in the System framework\n\t    func_append deplibs \" System.ltframework\"\n\t    ;;\n\t  *-*-netbsd*)\n\t    # Don't link with libc until the a.out ld.so is fixed.\n\t    ;;\n\t  *-*-openbsd* | *-*-freebsd* | *-*-dragonfly*)\n\t    # Do not include libc due to us having libc/libc_r.\n\t    ;;\n\t  *-*-sco3.2v5* | *-*-sco5v6*)\n\t    # Causes problems with __ctype\n\t    ;;\n\t  *-*-sysv4.2uw2* | *-*-sysv5* | *-*-unixware* | *-*-OpenUNIX*)\n\t    # Compiler inserts libc in the correct place for threads to work\n\t    ;;\n\t  *)\n\t    # Add libc to deplibs on all other systems if necessary.\n\t    if test yes = \"$build_libtool_need_lc\"; then\n\t      func_append deplibs \" -lc\"\n\t    fi\n\t    ;;\n\t  esac\n\tfi\n\n\t# Transform deplibs into only deplibs that can be linked in shared.\n\tname_save=$name\n\tlibname_save=$libname\n\trelease_save=$release\n\tversuffix_save=$versuffix\n\tmajor_save=$major\n\t# I'm not sure if I'm treating the release correctly.  I think\n\t# release should show up in the -l (ie -lgmp5) so we don't want to\n\t# add it in twice.  Is that correct?\n\trelease=\n\tversuffix=\n\tmajor=\n\tnewdeplibs=\n\tdroppeddeps=no\n\tcase $deplibs_check_method in\n\tpass_all)\n\t  # Don't check for shared/static.  Everything works.\n\t  # This might be a little naive.  We might want to check\n\t  # whether the library exists or not.  But this is on\n\t  # osf3 & osf4 and I'm not really sure... Just\n\t  # implementing what was already the behavior.\n\t  newdeplibs=$deplibs\n\t  ;;\n\ttest_compile)\n\t  # This code stresses the \"libraries are programs\" paradigm to its\n\t  # limits. Maybe even breaks it.  We compile a program, linking it\n\t  # against the deplibs as a proxy for the library.  Then we can check\n\t  # whether they linked in statically or dynamically with ldd.\n\t  $opt_dry_run || $RM conftest.c\n\t  cat > conftest.c <<EOF\n\t  int main() { return 0; }\nEOF\n\t  $opt_dry_run || $RM conftest\n\t  if $LTCC $LTCFLAGS -o conftest conftest.c $deplibs; then\n\t    ldd_output=`ldd conftest`\n\t    for i in $deplibs; do\n\t      case $i in\n\t      -l*)\n\t\tfunc_stripname -l '' \"$i\"\n\t\tname=$func_stripname_result\n\t\tif test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t\t  case \" $predeps $postdeps \" in\n\t\t  *\" $i \"*)\n\t\t    func_append newdeplibs \" $i\"\n\t\t    i=\n\t\t    ;;\n\t\t  esac\n\t\tfi\n\t\tif test -n \"$i\"; then\n\t\t  libname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\t  deplib_matches=`eval \"\\\\$ECHO \\\"$library_names_spec\\\"\"`\n\t\t  set dummy $deplib_matches; shift\n\t\t  deplib_match=$1\n\t\t  if test `expr \"$ldd_output\" : \".*$deplib_match\"` -ne 0; then\n\t\t    func_append newdeplibs \" $i\"\n\t\t  else\n\t\t    droppeddeps=yes\n\t\t    echo\n\t\t    $ECHO \"*** Warning: dynamic linker does not accept needed library $i.\"\n\t\t    echo \"*** I have the capability to make that library automatically link in when\"\n\t\t    echo \"*** you link to this library.  But I can only do this if you have a\"\n\t\t    echo \"*** shared version of the library, which I believe you do not have\"\n\t\t    echo \"*** because a test_compile did reveal that the linker did not use it for\"\n\t\t    echo \"*** its dynamic dependency list that programs get resolved with at runtime.\"\n\t\t  fi\n\t\tfi\n\t\t;;\n\t      *)\n\t\tfunc_append newdeplibs \" $i\"\n\t\t;;\n\t      esac\n\t    done\n\t  else\n\t    # Error occurred in the first compile.  Let's try to salvage\n\t    # the situation: Compile a separate program for each library.\n\t    for i in $deplibs; do\n\t      case $i in\n\t      -l*)\n\t\tfunc_stripname -l '' \"$i\"\n\t\tname=$func_stripname_result\n\t\t$opt_dry_run || $RM conftest\n\t\tif $LTCC $LTCFLAGS -o conftest conftest.c $i; then\n\t\t  ldd_output=`ldd conftest`\n\t\t  if test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t\t    case \" $predeps $postdeps \" in\n\t\t    *\" $i \"*)\n\t\t      func_append newdeplibs \" $i\"\n\t\t      i=\n\t\t      ;;\n\t\t    esac\n\t\t  fi\n\t\t  if test -n \"$i\"; then\n\t\t    libname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\t    deplib_matches=`eval \"\\\\$ECHO \\\"$library_names_spec\\\"\"`\n\t\t    set dummy $deplib_matches; shift\n\t\t    deplib_match=$1\n\t\t    if test `expr \"$ldd_output\" : \".*$deplib_match\"` -ne 0; then\n\t\t      func_append newdeplibs \" $i\"\n\t\t    else\n\t\t      droppeddeps=yes\n\t\t      echo\n\t\t      $ECHO \"*** Warning: dynamic linker does not accept needed library $i.\"\n\t\t      echo \"*** I have the capability to make that library automatically link in when\"\n\t\t      echo \"*** you link to this library.  But I can only do this if you have a\"\n\t\t      echo \"*** shared version of the library, which you do not appear to have\"\n\t\t      echo \"*** because a test_compile did reveal that the linker did not use this one\"\n\t\t      echo \"*** as a dynamic dependency that programs can get resolved with at runtime.\"\n\t\t    fi\n\t\t  fi\n\t\telse\n\t\t  droppeddeps=yes\n\t\t  echo\n\t\t  $ECHO \"*** Warning!  Library $i is needed by this library but I was not able to\"\n\t\t  echo \"*** make it link in!  You will probably need to install it or some\"\n\t\t  echo \"*** library that it depends on before this library will be fully\"\n\t\t  echo \"*** functional.  Installing it before continuing would be even better.\"\n\t\tfi\n\t\t;;\n\t      *)\n\t\tfunc_append newdeplibs \" $i\"\n\t\t;;\n\t      esac\n\t    done\n\t  fi\n\t  ;;\n\tfile_magic*)\n\t  set dummy $deplibs_check_method; shift\n\t  file_magic_regex=`expr \"$deplibs_check_method\" : \"$1 \\(.*\\)\"`\n\t  for a_deplib in $deplibs; do\n\t    case $a_deplib in\n\t    -l*)\n\t      func_stripname -l '' \"$a_deplib\"\n\t      name=$func_stripname_result\n\t      if test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t\tcase \" $predeps $postdeps \" in\n\t\t*\" $a_deplib \"*)\n\t\t  func_append newdeplibs \" $a_deplib\"\n\t\t  a_deplib=\n\t\t  ;;\n\t\tesac\n\t      fi\n\t      if test -n \"$a_deplib\"; then\n\t\tlibname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\tif test -n \"$file_magic_glob\"; then\n\t\t  libnameglob=`func_echo_all \"$libname\" | $SED -e $file_magic_glob`\n\t\telse\n\t\t  libnameglob=$libname\n\t\tfi\n\t\ttest yes = \"$want_nocaseglob\" && nocaseglob=`shopt -p nocaseglob`\n\t\tfor i in $lib_search_path $sys_lib_search_path $shlib_search_path; do\n\t\t  if test yes = \"$want_nocaseglob\"; then\n\t\t    shopt -s nocaseglob\n\t\t    potential_libs=`ls $i/$libnameglob[.-]* 2>/dev/null`\n\t\t    $nocaseglob\n\t\t  else\n\t\t    potential_libs=`ls $i/$libnameglob[.-]* 2>/dev/null`\n\t\t  fi\n\t\t  for potent_lib in $potential_libs; do\n\t\t      # Follow soft links.\n\t\t      if ls -lLd \"$potent_lib\" 2>/dev/null |\n\t\t\t $GREP \" -> \" >/dev/null; then\n\t\t\tcontinue\n\t\t      fi\n\t\t      # The statement above tries to avoid entering an\n\t\t      # endless loop below, in case of cyclic links.\n\t\t      # We might still enter an endless loop, since a link\n\t\t      # loop can be closed while we follow links,\n\t\t      # but so what?\n\t\t      potlib=$potent_lib\n\t\t      while test -h \"$potlib\" 2>/dev/null; do\n\t\t\tpotliblink=`ls -ld $potlib | $SED 's/.* -> //'`\n\t\t\tcase $potliblink in\n\t\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) potlib=$potliblink;;\n\t\t\t*) potlib=`$ECHO \"$potlib\" | $SED 's|[^/]*$||'`\"$potliblink\";;\n\t\t\tesac\n\t\t      done\n\t\t      if eval $file_magic_cmd \\\"\\$potlib\\\" 2>/dev/null |\n\t\t\t $SED -e 10q |\n\t\t\t $EGREP \"$file_magic_regex\" > /dev/null; then\n\t\t\tfunc_append newdeplibs \" $a_deplib\"\n\t\t\ta_deplib=\n\t\t\tbreak 2\n\t\t      fi\n\t\t  done\n\t\tdone\n\t      fi\n\t      if test -n \"$a_deplib\"; then\n\t\tdroppeddeps=yes\n\t\techo\n\t\t$ECHO \"*** Warning: linker path does not have real file for library $a_deplib.\"\n\t\techo \"*** I have the capability to make that library automatically link in when\"\n\t\techo \"*** you link to this library.  But I can only do this if you have a\"\n\t\techo \"*** shared version of the library, which you do not appear to have\"\n\t\techo \"*** because I did check the linker path looking for a file starting\"\n\t\tif test -z \"$potlib\"; then\n\t\t  $ECHO \"*** with $libname but no candidates were found. (...for file magic test)\"\n\t\telse\n\t\t  $ECHO \"*** with $libname and none of the candidates passed a file format test\"\n\t\t  $ECHO \"*** using a file magic. Last file checked: $potlib\"\n\t\tfi\n\t      fi\n\t      ;;\n\t    *)\n\t      # Add a -L argument.\n\t      func_append newdeplibs \" $a_deplib\"\n\t      ;;\n\t    esac\n\t  done # Gone through all deplibs.\n\t  ;;\n\tmatch_pattern*)\n\t  set dummy $deplibs_check_method; shift\n\t  match_pattern_regex=`expr \"$deplibs_check_method\" : \"$1 \\(.*\\)\"`\n\t  for a_deplib in $deplibs; do\n\t    case $a_deplib in\n\t    -l*)\n\t      func_stripname -l '' \"$a_deplib\"\n\t      name=$func_stripname_result\n\t      if test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t\tcase \" $predeps $postdeps \" in\n\t\t*\" $a_deplib \"*)\n\t\t  func_append newdeplibs \" $a_deplib\"\n\t\t  a_deplib=\n\t\t  ;;\n\t\tesac\n\t      fi\n\t      if test -n \"$a_deplib\"; then\n\t\tlibname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\tfor i in $lib_search_path $sys_lib_search_path $shlib_search_path; do\n\t\t  potential_libs=`ls $i/$libname[.-]* 2>/dev/null`\n\t\t  for potent_lib in $potential_libs; do\n\t\t    potlib=$potent_lib # see symlink-check above in file_magic test\n\t\t    if eval \"\\$ECHO \\\"$potent_lib\\\"\" 2>/dev/null | $SED 10q | \\\n\t\t       $EGREP \"$match_pattern_regex\" > /dev/null; then\n\t\t      func_append newdeplibs \" $a_deplib\"\n\t\t      a_deplib=\n\t\t      break 2\n\t\t    fi\n\t\t  done\n\t\tdone\n\t      fi\n\t      if test -n \"$a_deplib\"; then\n\t\tdroppeddeps=yes\n\t\techo\n\t\t$ECHO \"*** Warning: linker path does not have real file for library $a_deplib.\"\n\t\techo \"*** I have the capability to make that library automatically link in when\"\n\t\techo \"*** you link to this library.  But I can only do this if you have a\"\n\t\techo \"*** shared version of the library, which you do not appear to have\"\n\t\techo \"*** because I did check the linker path looking for a file starting\"\n\t\tif test -z \"$potlib\"; then\n\t\t  $ECHO \"*** with $libname but no candidates were found. (...for regex pattern test)\"\n\t\telse\n\t\t  $ECHO \"*** with $libname and none of the candidates passed a file format test\"\n\t\t  $ECHO \"*** using a regex pattern. Last file checked: $potlib\"\n\t\tfi\n\t      fi\n\t      ;;\n\t    *)\n\t      # Add a -L argument.\n\t      func_append newdeplibs \" $a_deplib\"\n\t      ;;\n\t    esac\n\t  done # Gone through all deplibs.\n\t  ;;\n\tnone | unknown | *)\n\t  newdeplibs=\n\t  tmp_deplibs=`$ECHO \" $deplibs\" | $SED 's/ -lc$//; s/ -[LR][^ ]*//g'`\n\t  if test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t    for i in $predeps $postdeps; do\n\t      # can't use Xsed below, because $i might contain '/'\n\t      tmp_deplibs=`$ECHO \" $tmp_deplibs\" | $SED \"s|$i||\"`\n\t    done\n\t  fi\n\t  case $tmp_deplibs in\n\t  *[!\\\t\\ ]*)\n\t    echo\n\t    if test none = \"$deplibs_check_method\"; then\n\t      echo \"*** Warning: inter-library dependencies are not supported in this platform.\"\n\t    else\n\t      echo \"*** Warning: inter-library dependencies are not known to be supported.\"\n\t    fi\n\t    echo \"*** All declared inter-library dependencies are being dropped.\"\n\t    droppeddeps=yes\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n\tversuffix=$versuffix_save\n\tmajor=$major_save\n\trelease=$release_save\n\tlibname=$libname_save\n\tname=$name_save\n\n\tcase $host in\n\t*-*-rhapsody* | *-*-darwin1.[012])\n\t  # On Rhapsody replace the C library with the System framework\n\t  newdeplibs=`$ECHO \" $newdeplibs\" | $SED 's/ -lc / System.ltframework /'`\n\t  ;;\n\tesac\n\n\tif test yes = \"$droppeddeps\"; then\n\t  if test yes = \"$module\"; then\n\t    echo\n\t    echo \"*** Warning: libtool could not satisfy all declared inter-library\"\n\t    $ECHO \"*** dependencies of module $libname.  Therefore, libtool will create\"\n\t    echo \"*** a static module, that should work as long as the dlopening\"\n\t    echo \"*** application is linked with the -dlopen flag.\"\n\t    if test -z \"$global_symbol_pipe\"; then\n\t      echo\n\t      echo \"*** However, this would only work if libtool was able to extract symbol\"\n\t      echo \"*** lists from a program, using 'nm' or equivalent, but libtool could\"\n\t      echo \"*** not find such a program.  So, this module is probably useless.\"\n\t      echo \"*** 'nm' from GNU binutils and a full rebuild may help.\"\n\t    fi\n\t    if test no = \"$build_old_libs\"; then\n\t      oldlibs=$output_objdir/$libname.$libext\n\t      build_libtool_libs=module\n\t      build_old_libs=yes\n\t    else\n\t      build_libtool_libs=no\n\t    fi\n\t  else\n\t    echo \"*** The inter-library dependencies that have been dropped here will be\"\n\t    echo \"*** automatically added whenever a program is linked with this library\"\n\t    echo \"*** or is declared to -dlopen it.\"\n\n\t    if test no = \"$allow_undefined\"; then\n\t      echo\n\t      echo \"*** Since this library must not contain undefined symbols,\"\n\t      echo \"*** because either the platform does not support them or\"\n\t      echo \"*** it was explicitly requested with -no-undefined,\"\n\t      echo \"*** libtool will only create a static version of it.\"\n\t      if test no = \"$build_old_libs\"; then\n\t\toldlibs=$output_objdir/$libname.$libext\n\t\tbuild_libtool_libs=module\n\t\tbuild_old_libs=yes\n\t      else\n\t\tbuild_libtool_libs=no\n\t      fi\n\t    fi\n\t  fi\n\tfi\n\t# Done checking deplibs!\n\tdeplibs=$newdeplibs\n      fi\n      # Time to change all our \"foo.ltframework\" stuff back to \"-framework foo\"\n      case $host in\n\t*-*-darwin*)\n\t  newdeplibs=`$ECHO \" $newdeplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t  new_inherited_linker_flags=`$ECHO \" $new_inherited_linker_flags\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t  deplibs=`$ECHO \" $deplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t  ;;\n      esac\n\n      # move library search paths that coincide with paths to not yet\n      # installed libraries to the beginning of the library search list\n      new_libs=\n      for path in $notinst_path; do\n\tcase \" $new_libs \" in\n\t*\" -L$path/$objdir \"*) ;;\n\t*)\n\t  case \" $deplibs \" in\n\t  *\" -L$path/$objdir \"*)\n\t    func_append new_libs \" -L$path/$objdir\" ;;\n\t  esac\n\t  ;;\n\tesac\n      done\n      for deplib in $deplibs; do\n\tcase $deplib in\n\t-L*)\n\t  case \" $new_libs \" in\n\t  *\" $deplib \"*) ;;\n\t  *) func_append new_libs \" $deplib\" ;;\n\t  esac\n\t  ;;\n\t*) func_append new_libs \" $deplib\" ;;\n\tesac\n      done\n      deplibs=$new_libs\n\n      # All the library-specific variables (install_libdir is set above).\n      library_names=\n      old_library=\n      dlname=\n\n      # Test again, we may have decided not to build it any more\n      if test yes = \"$build_libtool_libs\"; then\n\t# Remove $wl instances when linking with ld.\n\t# FIXME: should test the right _cmds variable.\n\tcase $archive_cmds in\n\t  *\\$LD\\ *) wl= ;;\n        esac\n\tif test yes = \"$hardcode_into_libs\"; then\n\t  # Hardcode the library paths\n\t  hardcode_libdirs=\n\t  dep_rpath=\n\t  rpath=$finalize_rpath\n\t  test relink = \"$opt_mode\" || rpath=$compile_rpath$rpath\n\t  for libdir in $rpath; do\n\t    if test -n \"$hardcode_libdir_flag_spec\"; then\n\t      if test -n \"$hardcode_libdir_separator\"; then\n\t\tfunc_replace_sysroot \"$libdir\"\n\t\tlibdir=$func_replace_sysroot_result\n\t\tif test -z \"$hardcode_libdirs\"; then\n\t\t  hardcode_libdirs=$libdir\n\t\telse\n\t\t  # Just accumulate the unique libdirs.\n\t\t  case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in\n\t\t  *\"$hardcode_libdir_separator$libdir$hardcode_libdir_separator\"*)\n\t\t    ;;\n\t\t  *)\n\t\t    func_append hardcode_libdirs \"$hardcode_libdir_separator$libdir\"\n\t\t    ;;\n\t\t  esac\n\t\tfi\n\t      else\n\t\teval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\t\tfunc_append dep_rpath \" $flag\"\n\t      fi\n\t    elif test -n \"$runpath_var\"; then\n\t      case \"$perm_rpath \" in\n\t      *\" $libdir \"*) ;;\n\t      *) func_append perm_rpath \" $libdir\" ;;\n\t      esac\n\t    fi\n\t  done\n\t  # Substitute the hardcoded libdirs into the rpath.\n\t  if test -n \"$hardcode_libdir_separator\" &&\n\t     test -n \"$hardcode_libdirs\"; then\n\t    libdir=$hardcode_libdirs\n\t    eval \"dep_rpath=\\\"$hardcode_libdir_flag_spec\\\"\"\n\t  fi\n\t  if test -n \"$runpath_var\" && test -n \"$perm_rpath\"; then\n\t    # We should set the runpath_var.\n\t    rpath=\n\t    for dir in $perm_rpath; do\n\t      func_append rpath \"$dir:\"\n\t    done\n\t    eval \"$runpath_var='$rpath\\$$runpath_var'; export $runpath_var\"\n\t  fi\n\t  test -n \"$dep_rpath\" && deplibs=\"$dep_rpath $deplibs\"\n\tfi\n\n\tshlibpath=$finalize_shlibpath\n\ttest relink = \"$opt_mode\" || shlibpath=$compile_shlibpath$shlibpath\n\tif test -n \"$shlibpath\"; then\n\t  eval \"$shlibpath_var='$shlibpath\\$$shlibpath_var'; export $shlibpath_var\"\n\tfi\n\n\t# Get the real and link names of the library.\n\teval shared_ext=\\\"$shrext_cmds\\\"\n\teval library_names=\\\"$library_names_spec\\\"\n\tset dummy $library_names\n\tshift\n\trealname=$1\n\tshift\n\n\tif test -n \"$soname_spec\"; then\n\t  eval soname=\\\"$soname_spec\\\"\n\telse\n\t  soname=$realname\n\tfi\n\tif test -z \"$dlname\"; then\n\t  dlname=$soname\n\tfi\n\n\tlib=$output_objdir/$realname\n\tlinknames=\n\tfor link\n\tdo\n\t  func_append linknames \" $link\"\n\tdone\n\n\t# Use standard objects if they are pic\n\ttest -z \"$pic_flag\" && libobjs=`$ECHO \"$libobjs\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n\ttest \"X$libobjs\" = \"X \" && libobjs=\n\n\tdelfiles=\n\tif test -n \"$export_symbols\" && test -n \"$include_expsyms\"; then\n\t  $opt_dry_run || cp \"$export_symbols\" \"$output_objdir/$libname.uexp\"\n\t  export_symbols=$output_objdir/$libname.uexp\n\t  func_append delfiles \" $export_symbols\"\n\tfi\n\n\torig_export_symbols=\n\tcase $host_os in\n\tcygwin* | mingw* | cegcc*)\n\t  if test -n \"$export_symbols\" && test -z \"$export_symbols_regex\"; then\n\t    # exporting using user supplied symfile\n\t    func_dll_def_p \"$export_symbols\" || {\n\t      # and it's NOT already a .def file. Must figure out\n\t      # which of the given symbols are data symbols and tag\n\t      # them as such. So, trigger use of export_symbols_cmds.\n\t      # export_symbols gets reassigned inside the \"prepare\n\t      # the list of exported symbols\" if statement, so the\n\t      # include_expsyms logic still works.\n\t      orig_export_symbols=$export_symbols\n\t      export_symbols=\n\t      always_export_symbols=yes\n\t    }\n\t  fi\n\t  ;;\n\tesac\n\n\t# Prepare the list of exported symbols\n\tif test -z \"$export_symbols\"; then\n\t  if test yes = \"$always_export_symbols\" || test -n \"$export_symbols_regex\"; then\n\t    func_verbose \"generating symbol list for '$libname.la'\"\n\t    export_symbols=$output_objdir/$libname.exp\n\t    $opt_dry_run || $RM $export_symbols\n\t    cmds=$export_symbols_cmds\n\t    save_ifs=$IFS; IFS='~'\n\t    for cmd1 in $cmds; do\n\t      IFS=$save_ifs\n\t      # Take the normal branch if the nm_file_list_spec branch\n\t      # doesn't work or if tool conversion is not needed.\n\t      case $nm_file_list_spec~$to_tool_file_cmd in\n\t\t*~func_convert_file_noop | *~func_convert_file_msys_to_w32 | ~*)\n\t\t  try_normal_branch=yes\n\t\t  eval cmd=\\\"$cmd1\\\"\n\t\t  func_len \" $cmd\"\n\t\t  len=$func_len_result\n\t\t  ;;\n\t\t*)\n\t\t  try_normal_branch=no\n\t\t  ;;\n\t      esac\n\t      if test yes = \"$try_normal_branch\" \\\n\t\t && { test \"$len\" -lt \"$max_cmd_len\" \\\n\t\t      || test \"$max_cmd_len\" -le -1; }\n\t      then\n\t\tfunc_show_eval \"$cmd\" 'exit $?'\n\t\tskipped_export=false\n\t      elif test -n \"$nm_file_list_spec\"; then\n\t\tfunc_basename \"$output\"\n\t\toutput_la=$func_basename_result\n\t\tsave_libobjs=$libobjs\n\t\tsave_output=$output\n\t\toutput=$output_objdir/$output_la.nm\n\t\tfunc_to_tool_file \"$output\"\n\t\tlibobjs=$nm_file_list_spec$func_to_tool_file_result\n\t\tfunc_append delfiles \" $output\"\n\t\tfunc_verbose \"creating $NM input file list: $output\"\n\t\tfor obj in $save_libobjs; do\n\t\t  func_to_tool_file \"$obj\"\n\t\t  $ECHO \"$func_to_tool_file_result\"\n\t\tdone > \"$output\"\n\t\teval cmd=\\\"$cmd1\\\"\n\t\tfunc_show_eval \"$cmd\" 'exit $?'\n\t\toutput=$save_output\n\t\tlibobjs=$save_libobjs\n\t\tskipped_export=false\n\t      else\n\t\t# The command line is too long to execute in one step.\n\t\tfunc_verbose \"using reloadable object file for export list...\"\n\t\tskipped_export=:\n\t\t# Break out early, otherwise skipped_export may be\n\t\t# set to false by a later but shorter cmd.\n\t\tbreak\n\t      fi\n\t    done\n\t    IFS=$save_ifs\n\t    if test -n \"$export_symbols_regex\" && test : != \"$skipped_export\"; then\n\t      func_show_eval '$EGREP -e \"$export_symbols_regex\" \"$export_symbols\" > \"${export_symbols}T\"'\n\t      func_show_eval '$MV \"${export_symbols}T\" \"$export_symbols\"'\n\t    fi\n\t  fi\n\tfi\n\n\tif test -n \"$export_symbols\" && test -n \"$include_expsyms\"; then\n\t  tmp_export_symbols=$export_symbols\n\t  test -n \"$orig_export_symbols\" && tmp_export_symbols=$orig_export_symbols\n\t  $opt_dry_run || eval '$ECHO \"$include_expsyms\" | $SP2NL >> \"$tmp_export_symbols\"'\n\tfi\n\n\tif test : != \"$skipped_export\" && test -n \"$orig_export_symbols\"; then\n\t  # The given exports_symbols file has to be filtered, so filter it.\n\t  func_verbose \"filter symbol list for '$libname.la' to tag DATA exports\"\n\t  # FIXME: $output_objdir/$libname.filter potentially contains lots of\n\t  # 's' commands, which not all seds can handle. GNU sed should be fine\n\t  # though. Also, the filter scales superlinearly with the number of\n\t  # global variables. join(1) would be nice here, but unfortunately\n\t  # isn't a blessed tool.\n\t  $opt_dry_run || $SED -e '/[ ,]DATA/!d;s,\\(.*\\)\\([ \\,].*\\),s|^\\1$|\\1\\2|,' < $export_symbols > $output_objdir/$libname.filter\n\t  func_append delfiles \" $export_symbols $output_objdir/$libname.filter\"\n\t  export_symbols=$output_objdir/$libname.def\n\t  $opt_dry_run || $SED -f $output_objdir/$libname.filter < $orig_export_symbols > $export_symbols\n\tfi\n\n\ttmp_deplibs=\n\tfor test_deplib in $deplibs; do\n\t  case \" $convenience \" in\n\t  *\" $test_deplib \"*) ;;\n\t  *)\n\t    func_append tmp_deplibs \" $test_deplib\"\n\t    ;;\n\t  esac\n\tdone\n\tdeplibs=$tmp_deplibs\n\n\tif test -n \"$convenience\"; then\n\t  if test -n \"$whole_archive_flag_spec\" &&\n\t    test yes = \"$compiler_needs_object\" &&\n\t    test -z \"$libobjs\"; then\n\t    # extract the archives, so we have objects to list.\n\t    # TODO: could optimize this to just extract one archive.\n\t    whole_archive_flag_spec=\n\t  fi\n\t  if test -n \"$whole_archive_flag_spec\"; then\n\t    save_libobjs=$libobjs\n\t    eval libobjs=\\\"\\$libobjs $whole_archive_flag_spec\\\"\n\t    test \"X$libobjs\" = \"X \" && libobjs=\n\t  else\n\t    gentop=$output_objdir/${outputname}x\n\t    func_append generated \" $gentop\"\n\n\t    func_extract_archives $gentop $convenience\n\t    func_append libobjs \" $func_extract_archives_result\"\n\t    test \"X$libobjs\" = \"X \" && libobjs=\n\t  fi\n\tfi\n\n\tif test yes = \"$thread_safe\" && test -n \"$thread_safe_flag_spec\"; then\n\t  eval flag=\\\"$thread_safe_flag_spec\\\"\n\t  func_append linker_flags \" $flag\"\n\tfi\n\n\t# Make a backup of the uninstalled library when relinking\n\tif test relink = \"$opt_mode\"; then\n\t  $opt_dry_run || eval '(cd $output_objdir && $RM ${realname}U && $MV $realname ${realname}U)' || exit $?\n\tfi\n\n\t# Do each of the archive commands.\n\tif test yes = \"$module\" && test -n \"$module_cmds\"; then\n\t  if test -n \"$export_symbols\" && test -n \"$module_expsym_cmds\"; then\n\t    eval test_cmds=\\\"$module_expsym_cmds\\\"\n\t    cmds=$module_expsym_cmds\n\t  else\n\t    eval test_cmds=\\\"$module_cmds\\\"\n\t    cmds=$module_cmds\n\t  fi\n\telse\n\t  if test -n \"$export_symbols\" && test -n \"$archive_expsym_cmds\"; then\n\t    eval test_cmds=\\\"$archive_expsym_cmds\\\"\n\t    cmds=$archive_expsym_cmds\n\t  else\n\t    eval test_cmds=\\\"$archive_cmds\\\"\n\t    cmds=$archive_cmds\n\t  fi\n\tfi\n\n\tif test : != \"$skipped_export\" &&\n\t   func_len \" $test_cmds\" &&\n\t   len=$func_len_result &&\n\t   test \"$len\" -lt \"$max_cmd_len\" || test \"$max_cmd_len\" -le -1; then\n\t  :\n\telse\n\t  # The command line is too long to link in one step, link piecewise\n\t  # or, if using GNU ld and skipped_export is not :, use a linker\n\t  # script.\n\n\t  # Save the value of $output and $libobjs because we want to\n\t  # use them later.  If we have whole_archive_flag_spec, we\n\t  # want to use save_libobjs as it was before\n\t  # whole_archive_flag_spec was expanded, because we can't\n\t  # assume the linker understands whole_archive_flag_spec.\n\t  # This may have to be revisited, in case too many\n\t  # convenience libraries get linked in and end up exceeding\n\t  # the spec.\n\t  if test -z \"$convenience\" || test -z \"$whole_archive_flag_spec\"; then\n\t    save_libobjs=$libobjs\n\t  fi\n\t  save_output=$output\n\t  func_basename \"$output\"\n\t  output_la=$func_basename_result\n\n\t  # Clear the reloadable object creation command queue and\n\t  # initialize k to one.\n\t  test_cmds=\n\t  concat_cmds=\n\t  objlist=\n\t  last_robj=\n\t  k=1\n\n\t  if test -n \"$save_libobjs\" && test : != \"$skipped_export\" && test yes = \"$with_gnu_ld\"; then\n\t    output=$output_objdir/$output_la.lnkscript\n\t    func_verbose \"creating GNU ld script: $output\"\n\t    echo 'INPUT (' > $output\n\t    for obj in $save_libobjs\n\t    do\n\t      func_to_tool_file \"$obj\"\n\t      $ECHO \"$func_to_tool_file_result\" >> $output\n\t    done\n\t    echo ')' >> $output\n\t    func_append delfiles \" $output\"\n\t    func_to_tool_file \"$output\"\n\t    output=$func_to_tool_file_result\n\t  elif test -n \"$save_libobjs\" && test : != \"$skipped_export\" && test -n \"$file_list_spec\"; then\n\t    output=$output_objdir/$output_la.lnk\n\t    func_verbose \"creating linker input file list: $output\"\n\t    : > $output\n\t    set x $save_libobjs\n\t    shift\n\t    firstobj=\n\t    if test yes = \"$compiler_needs_object\"; then\n\t      firstobj=\"$1 \"\n\t      shift\n\t    fi\n\t    for obj\n\t    do\n\t      func_to_tool_file \"$obj\"\n\t      $ECHO \"$func_to_tool_file_result\" >> $output\n\t    done\n\t    func_append delfiles \" $output\"\n\t    func_to_tool_file \"$output\"\n\t    output=$firstobj\\\"$file_list_spec$func_to_tool_file_result\\\"\n\t  else\n\t    if test -n \"$save_libobjs\"; then\n\t      func_verbose \"creating reloadable object files...\"\n\t      output=$output_objdir/$output_la-$k.$objext\n\t      eval test_cmds=\\\"$reload_cmds\\\"\n\t      func_len \" $test_cmds\"\n\t      len0=$func_len_result\n\t      len=$len0\n\n\t      # Loop over the list of objects to be linked.\n\t      for obj in $save_libobjs\n\t      do\n\t\tfunc_len \" $obj\"\n\t\tfunc_arith $len + $func_len_result\n\t\tlen=$func_arith_result\n\t\tif test -z \"$objlist\" ||\n\t\t   test \"$len\" -lt \"$max_cmd_len\"; then\n\t\t  func_append objlist \" $obj\"\n\t\telse\n\t\t  # The command $test_cmds is almost too long, add a\n\t\t  # command to the queue.\n\t\t  if test 1 -eq \"$k\"; then\n\t\t    # The first file doesn't have a previous command to add.\n\t\t    reload_objs=$objlist\n\t\t    eval concat_cmds=\\\"$reload_cmds\\\"\n\t\t  else\n\t\t    # All subsequent reloadable object files will link in\n\t\t    # the last one created.\n\t\t    reload_objs=\"$objlist $last_robj\"\n\t\t    eval concat_cmds=\\\"\\$concat_cmds~$reload_cmds~\\$RM $last_robj\\\"\n\t\t  fi\n\t\t  last_robj=$output_objdir/$output_la-$k.$objext\n\t\t  func_arith $k + 1\n\t\t  k=$func_arith_result\n\t\t  output=$output_objdir/$output_la-$k.$objext\n\t\t  objlist=\" $obj\"\n\t\t  func_len \" $last_robj\"\n\t\t  func_arith $len0 + $func_len_result\n\t\t  len=$func_arith_result\n\t\tfi\n\t      done\n\t      # Handle the remaining objects by creating one last\n\t      # reloadable object file.  All subsequent reloadable object\n\t      # files will link in the last one created.\n\t      test -z \"$concat_cmds\" || concat_cmds=$concat_cmds~\n\t      reload_objs=\"$objlist $last_robj\"\n\t      eval concat_cmds=\\\"\\$concat_cmds$reload_cmds\\\"\n\t      if test -n \"$last_robj\"; then\n\t        eval concat_cmds=\\\"\\$concat_cmds~\\$RM $last_robj\\\"\n\t      fi\n\t      func_append delfiles \" $output\"\n\n\t    else\n\t      output=\n\t    fi\n\n\t    ${skipped_export-false} && {\n\t      func_verbose \"generating symbol list for '$libname.la'\"\n\t      export_symbols=$output_objdir/$libname.exp\n\t      $opt_dry_run || $RM $export_symbols\n\t      libobjs=$output\n\t      # Append the command to create the export file.\n\t      test -z \"$concat_cmds\" || concat_cmds=$concat_cmds~\n\t      eval concat_cmds=\\\"\\$concat_cmds$export_symbols_cmds\\\"\n\t      if test -n \"$last_robj\"; then\n\t\teval concat_cmds=\\\"\\$concat_cmds~\\$RM $last_robj\\\"\n\t      fi\n\t    }\n\n\t    test -n \"$save_libobjs\" &&\n\t      func_verbose \"creating a temporary reloadable object file: $output\"\n\n\t    # Loop through the commands generated above and execute them.\n\t    save_ifs=$IFS; IFS='~'\n\t    for cmd in $concat_cmds; do\n\t      IFS=$save_ifs\n\t      $opt_quiet || {\n\t\t  func_quote_for_expand \"$cmd\"\n\t\t  eval \"func_echo $func_quote_for_expand_result\"\n\t      }\n\t      $opt_dry_run || eval \"$cmd\" || {\n\t\tlt_exit=$?\n\n\t\t# Restore the uninstalled library and exit\n\t\tif test relink = \"$opt_mode\"; then\n\t\t  ( cd \"$output_objdir\" && \\\n\t\t    $RM \"${realname}T\" && \\\n\t\t    $MV \"${realname}U\" \"$realname\" )\n\t\tfi\n\n\t\texit $lt_exit\n\t      }\n\t    done\n\t    IFS=$save_ifs\n\n\t    if test -n \"$export_symbols_regex\" && ${skipped_export-false}; then\n\t      func_show_eval '$EGREP -e \"$export_symbols_regex\" \"$export_symbols\" > \"${export_symbols}T\"'\n\t      func_show_eval '$MV \"${export_symbols}T\" \"$export_symbols\"'\n\t    fi\n\t  fi\n\n          ${skipped_export-false} && {\n\t    if test -n \"$export_symbols\" && test -n \"$include_expsyms\"; then\n\t      tmp_export_symbols=$export_symbols\n\t      test -n \"$orig_export_symbols\" && tmp_export_symbols=$orig_export_symbols\n\t      $opt_dry_run || eval '$ECHO \"$include_expsyms\" | $SP2NL >> \"$tmp_export_symbols\"'\n\t    fi\n\n\t    if test -n \"$orig_export_symbols\"; then\n\t      # The given exports_symbols file has to be filtered, so filter it.\n\t      func_verbose \"filter symbol list for '$libname.la' to tag DATA exports\"\n\t      # FIXME: $output_objdir/$libname.filter potentially contains lots of\n\t      # 's' commands, which not all seds can handle. GNU sed should be fine\n\t      # though. Also, the filter scales superlinearly with the number of\n\t      # global variables. join(1) would be nice here, but unfortunately\n\t      # isn't a blessed tool.\n\t      $opt_dry_run || $SED -e '/[ ,]DATA/!d;s,\\(.*\\)\\([ \\,].*\\),s|^\\1$|\\1\\2|,' < $export_symbols > $output_objdir/$libname.filter\n\t      func_append delfiles \" $export_symbols $output_objdir/$libname.filter\"\n\t      export_symbols=$output_objdir/$libname.def\n\t      $opt_dry_run || $SED -f $output_objdir/$libname.filter < $orig_export_symbols > $export_symbols\n\t    fi\n\t  }\n\n\t  libobjs=$output\n\t  # Restore the value of output.\n\t  output=$save_output\n\n\t  if test -n \"$convenience\" && test -n \"$whole_archive_flag_spec\"; then\n\t    eval libobjs=\\\"\\$libobjs $whole_archive_flag_spec\\\"\n\t    test \"X$libobjs\" = \"X \" && libobjs=\n\t  fi\n\t  # Expand the library linking commands again to reset the\n\t  # value of $libobjs for piecewise linking.\n\n\t  # Do each of the archive commands.\n\t  if test yes = \"$module\" && test -n \"$module_cmds\"; then\n\t    if test -n \"$export_symbols\" && test -n \"$module_expsym_cmds\"; then\n\t      cmds=$module_expsym_cmds\n\t    else\n\t      cmds=$module_cmds\n\t    fi\n\t  else\n\t    if test -n \"$export_symbols\" && test -n \"$archive_expsym_cmds\"; then\n\t      cmds=$archive_expsym_cmds\n\t    else\n\t      cmds=$archive_cmds\n\t    fi\n\t  fi\n\tfi\n\n\tif test -n \"$delfiles\"; then\n\t  # Append the command to remove temporary files to $cmds.\n\t  eval cmds=\\\"\\$cmds~\\$RM $delfiles\\\"\n\tfi\n\n\t# Add any objects from preloaded convenience libraries\n\tif test -n \"$dlprefiles\"; then\n\t  gentop=$output_objdir/${outputname}x\n\t  func_append generated \" $gentop\"\n\n\t  func_extract_archives $gentop $dlprefiles\n\t  func_append libobjs \" $func_extract_archives_result\"\n\t  test \"X$libobjs\" = \"X \" && libobjs=\n\tfi\n\n\tsave_ifs=$IFS; IFS='~'\n\tfor cmd in $cmds; do\n\t  IFS=$sp$nl\n\t  eval cmd=\\\"$cmd\\\"\n\t  IFS=$save_ifs\n\t  $opt_quiet || {\n\t    func_quote_for_expand \"$cmd\"\n\t    eval \"func_echo $func_quote_for_expand_result\"\n\t  }\n\t  $opt_dry_run || eval \"$cmd\" || {\n\t    lt_exit=$?\n\n\t    # Restore the uninstalled library and exit\n\t    if test relink = \"$opt_mode\"; then\n\t      ( cd \"$output_objdir\" && \\\n\t        $RM \"${realname}T\" && \\\n\t\t$MV \"${realname}U\" \"$realname\" )\n\t    fi\n\n\t    exit $lt_exit\n\t  }\n\tdone\n\tIFS=$save_ifs\n\n\t# Restore the uninstalled library and exit\n\tif test relink = \"$opt_mode\"; then\n\t  $opt_dry_run || eval '(cd $output_objdir && $RM ${realname}T && $MV $realname ${realname}T && $MV ${realname}U $realname)' || exit $?\n\n\t  if test -n \"$convenience\"; then\n\t    if test -z \"$whole_archive_flag_spec\"; then\n\t      func_show_eval '${RM}r \"$gentop\"'\n\t    fi\n\t  fi\n\n\t  exit $EXIT_SUCCESS\n\tfi\n\n\t# Create links to the real library.\n\tfor linkname in $linknames; do\n\t  if test \"$realname\" != \"$linkname\"; then\n\t    func_show_eval '(cd \"$output_objdir\" && $RM \"$linkname\" && $LN_S \"$realname\" \"$linkname\")' 'exit $?'\n\t  fi\n\tdone\n\n\t# If -module or -export-dynamic was specified, set the dlname.\n\tif test yes = \"$module\" || test yes = \"$export_dynamic\"; then\n\t  # On all known operating systems, these are identical.\n\t  dlname=$soname\n\tfi\n      fi\n      ;;\n\n    obj)\n      if test -n \"$dlfiles$dlprefiles\" || test no != \"$dlself\"; then\n\tfunc_warning \"'-dlopen' is ignored for objects\"\n      fi\n\n      case \" $deplibs\" in\n      *\\ -l* | *\\ -L*)\n\tfunc_warning \"'-l' and '-L' are ignored for objects\" ;;\n      esac\n\n      test -n \"$rpath\" && \\\n\tfunc_warning \"'-rpath' is ignored for objects\"\n\n      test -n \"$xrpath\" && \\\n\tfunc_warning \"'-R' is ignored for objects\"\n\n      test -n \"$vinfo\" && \\\n\tfunc_warning \"'-version-info' is ignored for objects\"\n\n      test -n \"$release\" && \\\n\tfunc_warning \"'-release' is ignored for objects\"\n\n      case $output in\n      *.lo)\n\ttest -n \"$objs$old_deplibs\" && \\\n\t  func_fatal_error \"cannot build library object '$output' from non-libtool objects\"\n\n\tlibobj=$output\n\tfunc_lo2o \"$libobj\"\n\tobj=$func_lo2o_result\n\t;;\n      *)\n\tlibobj=\n\tobj=$output\n\t;;\n      esac\n\n      # Delete the old objects.\n      $opt_dry_run || $RM $obj $libobj\n\n      # Objects from convenience libraries.  This assumes\n      # single-version convenience libraries.  Whenever we create\n      # different ones for PIC/non-PIC, this we'll have to duplicate\n      # the extraction.\n      reload_conv_objs=\n      gentop=\n      # if reload_cmds runs $LD directly, get rid of -Wl from\n      # whole_archive_flag_spec and hope we can get by with turning comma\n      # into space.\n      case $reload_cmds in\n        *\\$LD[\\ \\$]*) wl= ;;\n      esac\n      if test -n \"$convenience\"; then\n\tif test -n \"$whole_archive_flag_spec\"; then\n\t  eval tmp_whole_archive_flags=\\\"$whole_archive_flag_spec\\\"\n\t  test -n \"$wl\" || tmp_whole_archive_flags=`$ECHO \"$tmp_whole_archive_flags\" | $SED 's|,| |g'`\n\t  reload_conv_objs=$reload_objs\\ $tmp_whole_archive_flags\n\telse\n\t  gentop=$output_objdir/${obj}x\n\t  func_append generated \" $gentop\"\n\n\t  func_extract_archives $gentop $convenience\n\t  reload_conv_objs=\"$reload_objs $func_extract_archives_result\"\n\tfi\n      fi\n\n      # If we're not building shared, we need to use non_pic_objs\n      test yes = \"$build_libtool_libs\" || libobjs=$non_pic_objects\n\n      # Create the old-style object.\n      reload_objs=$objs$old_deplibs' '`$ECHO \"$libobjs\" | $SP2NL | $SED \"/\\.$libext$/d; /\\.lib$/d; $lo2o\" | $NL2SP`' '$reload_conv_objs\n\n      output=$obj\n      func_execute_cmds \"$reload_cmds\" 'exit $?'\n\n      # Exit if we aren't doing a library object file.\n      if test -z \"$libobj\"; then\n\tif test -n \"$gentop\"; then\n\t  func_show_eval '${RM}r \"$gentop\"'\n\tfi\n\n\texit $EXIT_SUCCESS\n      fi\n\n      test yes = \"$build_libtool_libs\" || {\n\tif test -n \"$gentop\"; then\n\t  func_show_eval '${RM}r \"$gentop\"'\n\tfi\n\n\t# Create an invalid libtool object if no PIC, so that we don't\n\t# accidentally link it into a program.\n\t# $show \"echo timestamp > $libobj\"\n\t# $opt_dry_run || eval \"echo timestamp > $libobj\" || exit $?\n\texit $EXIT_SUCCESS\n      }\n\n      if test -n \"$pic_flag\" || test default != \"$pic_mode\"; then\n\t# Only do commands if we really have different PIC objects.\n\treload_objs=\"$libobjs $reload_conv_objs\"\n\toutput=$libobj\n\tfunc_execute_cmds \"$reload_cmds\" 'exit $?'\n      fi\n\n      if test -n \"$gentop\"; then\n\tfunc_show_eval '${RM}r \"$gentop\"'\n      fi\n\n      exit $EXIT_SUCCESS\n      ;;\n\n    prog)\n      case $host in\n\t*cygwin*) func_stripname '' '.exe' \"$output\"\n\t          output=$func_stripname_result.exe;;\n      esac\n      test -n \"$vinfo\" && \\\n\tfunc_warning \"'-version-info' is ignored for programs\"\n\n      test -n \"$release\" && \\\n\tfunc_warning \"'-release' is ignored for programs\"\n\n      $preload \\\n\t&& test unknown,unknown,unknown = \"$dlopen_support,$dlopen_self,$dlopen_self_static\" \\\n\t&& func_warning \"'LT_INIT([dlopen])' not used. Assuming no dlopen support.\"\n\n      case $host in\n      *-*-rhapsody* | *-*-darwin1.[012])\n\t# On Rhapsody replace the C library is the System framework\n\tcompile_deplibs=`$ECHO \" $compile_deplibs\" | $SED 's/ -lc / System.ltframework /'`\n\tfinalize_deplibs=`$ECHO \" $finalize_deplibs\" | $SED 's/ -lc / System.ltframework /'`\n\t;;\n      esac\n\n      case $host in\n      *-*-darwin*)\n\t# Don't allow lazy linking, it breaks C++ global constructors\n\t# But is supposedly fixed on 10.4 or later (yay!).\n\tif test CXX = \"$tagname\"; then\n\t  case ${MACOSX_DEPLOYMENT_TARGET-10.0} in\n\t    10.[0123])\n\t      func_append compile_command \" $wl-bind_at_load\"\n\t      func_append finalize_command \" $wl-bind_at_load\"\n\t    ;;\n\t  esac\n\tfi\n\t# Time to change all our \"foo.ltframework\" stuff back to \"-framework foo\"\n\tcompile_deplibs=`$ECHO \" $compile_deplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\tfinalize_deplibs=`$ECHO \" $finalize_deplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t;;\n      esac\n\n\n      # move library search paths that coincide with paths to not yet\n      # installed libraries to the beginning of the library search list\n      new_libs=\n      for path in $notinst_path; do\n\tcase \" $new_libs \" in\n\t*\" -L$path/$objdir \"*) ;;\n\t*)\n\t  case \" $compile_deplibs \" in\n\t  *\" -L$path/$objdir \"*)\n\t    func_append new_libs \" -L$path/$objdir\" ;;\n\t  esac\n\t  ;;\n\tesac\n      done\n      for deplib in $compile_deplibs; do\n\tcase $deplib in\n\t-L*)\n\t  case \" $new_libs \" in\n\t  *\" $deplib \"*) ;;\n\t  *) func_append new_libs \" $deplib\" ;;\n\t  esac\n\t  ;;\n\t*) func_append new_libs \" $deplib\" ;;\n\tesac\n      done\n      compile_deplibs=$new_libs\n\n\n      func_append compile_command \" $compile_deplibs\"\n      func_append finalize_command \" $finalize_deplibs\"\n\n      if test -n \"$rpath$xrpath\"; then\n\t# If the user specified any rpath flags, then add them.\n\tfor libdir in $rpath $xrpath; do\n\t  # This is the magic to use -rpath.\n\t  case \"$finalize_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append finalize_rpath \" $libdir\" ;;\n\t  esac\n\tdone\n      fi\n\n      # Now hardcode the library paths\n      rpath=\n      hardcode_libdirs=\n      for libdir in $compile_rpath $finalize_rpath; do\n\tif test -n \"$hardcode_libdir_flag_spec\"; then\n\t  if test -n \"$hardcode_libdir_separator\"; then\n\t    if test -z \"$hardcode_libdirs\"; then\n\t      hardcode_libdirs=$libdir\n\t    else\n\t      # Just accumulate the unique libdirs.\n\t      case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in\n\t      *\"$hardcode_libdir_separator$libdir$hardcode_libdir_separator\"*)\n\t\t;;\n\t      *)\n\t\tfunc_append hardcode_libdirs \"$hardcode_libdir_separator$libdir\"\n\t\t;;\n\t      esac\n\t    fi\n\t  else\n\t    eval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\t    func_append rpath \" $flag\"\n\t  fi\n\telif test -n \"$runpath_var\"; then\n\t  case \"$perm_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append perm_rpath \" $libdir\" ;;\n\t  esac\n\tfi\n\tcase $host in\n\t*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-cegcc*)\n\t  testbindir=`$ECHO \"$libdir\" | $SED -e 's*/lib$*/bin*'`\n\t  case :$dllsearchpath: in\n\t  *\":$libdir:\"*) ;;\n\t  ::) dllsearchpath=$libdir;;\n\t  *) func_append dllsearchpath \":$libdir\";;\n\t  esac\n\t  case :$dllsearchpath: in\n\t  *\":$testbindir:\"*) ;;\n\t  ::) dllsearchpath=$testbindir;;\n\t  *) func_append dllsearchpath \":$testbindir\";;\n\t  esac\n\t  ;;\n\tesac\n      done\n      # Substitute the hardcoded libdirs into the rpath.\n      if test -n \"$hardcode_libdir_separator\" &&\n\t test -n \"$hardcode_libdirs\"; then\n\tlibdir=$hardcode_libdirs\n\teval rpath=\\\" $hardcode_libdir_flag_spec\\\"\n      fi\n      compile_rpath=$rpath\n\n      rpath=\n      hardcode_libdirs=\n      for libdir in $finalize_rpath; do\n\tif test -n \"$hardcode_libdir_flag_spec\"; then\n\t  if test -n \"$hardcode_libdir_separator\"; then\n\t    if test -z \"$hardcode_libdirs\"; then\n\t      hardcode_libdirs=$libdir\n\t    else\n\t      # Just accumulate the unique libdirs.\n\t      case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in\n\t      *\"$hardcode_libdir_separator$libdir$hardcode_libdir_separator\"*)\n\t\t;;\n\t      *)\n\t\tfunc_append hardcode_libdirs \"$hardcode_libdir_separator$libdir\"\n\t\t;;\n\t      esac\n\t    fi\n\t  else\n\t    eval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\t    func_append rpath \" $flag\"\n\t  fi\n\telif test -n \"$runpath_var\"; then\n\t  case \"$finalize_perm_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append finalize_perm_rpath \" $libdir\" ;;\n\t  esac\n\tfi\n      done\n      # Substitute the hardcoded libdirs into the rpath.\n      if test -n \"$hardcode_libdir_separator\" &&\n\t test -n \"$hardcode_libdirs\"; then\n\tlibdir=$hardcode_libdirs\n\teval rpath=\\\" $hardcode_libdir_flag_spec\\\"\n      fi\n      finalize_rpath=$rpath\n\n      if test -n \"$libobjs\" && test yes = \"$build_old_libs\"; then\n\t# Transform all the library objects into standard objects.\n\tcompile_command=`$ECHO \"$compile_command\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n\tfinalize_command=`$ECHO \"$finalize_command\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n      fi\n\n      func_generate_dlsyms \"$outputname\" \"@PROGRAM@\" false\n\n      # template prelinking step\n      if test -n \"$prelink_cmds\"; then\n\tfunc_execute_cmds \"$prelink_cmds\" 'exit $?'\n      fi\n\n      wrappers_required=:\n      case $host in\n      *cegcc* | *mingw32ce*)\n        # Disable wrappers for cegcc and mingw32ce hosts, we are cross compiling anyway.\n        wrappers_required=false\n        ;;\n      *cygwin* | *mingw* )\n        test yes = \"$build_libtool_libs\" || wrappers_required=false\n        ;;\n      *)\n        if test no = \"$need_relink\" || test yes != \"$build_libtool_libs\"; then\n          wrappers_required=false\n        fi\n        ;;\n      esac\n      $wrappers_required || {\n\t# Replace the output file specification.\n\tcompile_command=`$ECHO \"$compile_command\" | $SED 's%@OUTPUT@%'\"$output\"'%g'`\n\tlink_command=$compile_command$compile_rpath\n\n\t# We have no uninstalled library dependencies, so finalize right now.\n\texit_status=0\n\tfunc_show_eval \"$link_command\" 'exit_status=$?'\n\n\tif test -n \"$postlink_cmds\"; then\n\t  func_to_tool_file \"$output\"\n\t  postlink_cmds=`func_echo_all \"$postlink_cmds\" | $SED -e 's%@OUTPUT@%'\"$output\"'%g' -e 's%@TOOL_OUTPUT@%'\"$func_to_tool_file_result\"'%g'`\n\t  func_execute_cmds \"$postlink_cmds\" 'exit $?'\n\tfi\n\n\t# Delete the generated files.\n\tif test -f \"$output_objdir/${outputname}S.$objext\"; then\n\t  func_show_eval '$RM \"$output_objdir/${outputname}S.$objext\"'\n\tfi\n\n\texit $exit_status\n      }\n\n      if test -n \"$compile_shlibpath$finalize_shlibpath\"; then\n\tcompile_command=\"$shlibpath_var=\\\"$compile_shlibpath$finalize_shlibpath\\$$shlibpath_var\\\" $compile_command\"\n      fi\n      if test -n \"$finalize_shlibpath\"; then\n\tfinalize_command=\"$shlibpath_var=\\\"$finalize_shlibpath\\$$shlibpath_var\\\" $finalize_command\"\n      fi\n\n      compile_var=\n      finalize_var=\n      if test -n \"$runpath_var\"; then\n\tif test -n \"$perm_rpath\"; then\n\t  # We should set the runpath_var.\n\t  rpath=\n\t  for dir in $perm_rpath; do\n\t    func_append rpath \"$dir:\"\n\t  done\n\t  compile_var=\"$runpath_var=\\\"$rpath\\$$runpath_var\\\" \"\n\tfi\n\tif test -n \"$finalize_perm_rpath\"; then\n\t  # We should set the runpath_var.\n\t  rpath=\n\t  for dir in $finalize_perm_rpath; do\n\t    func_append rpath \"$dir:\"\n\t  done\n\t  finalize_var=\"$runpath_var=\\\"$rpath\\$$runpath_var\\\" \"\n\tfi\n      fi\n\n      if test yes = \"$no_install\"; then\n\t# We don't need to create a wrapper script.\n\tlink_command=$compile_var$compile_command$compile_rpath\n\t# Replace the output file specification.\n\tlink_command=`$ECHO \"$link_command\" | $SED 's%@OUTPUT@%'\"$output\"'%g'`\n\t# Delete the old output file.\n\t$opt_dry_run || $RM $output\n\t# Link the executable and exit\n\tfunc_show_eval \"$link_command\" 'exit $?'\n\n\tif test -n \"$postlink_cmds\"; then\n\t  func_to_tool_file \"$output\"\n\t  postlink_cmds=`func_echo_all \"$postlink_cmds\" | $SED -e 's%@OUTPUT@%'\"$output\"'%g' -e 's%@TOOL_OUTPUT@%'\"$func_to_tool_file_result\"'%g'`\n\t  func_execute_cmds \"$postlink_cmds\" 'exit $?'\n\tfi\n\n\texit $EXIT_SUCCESS\n      fi\n\n      case $hardcode_action,$fast_install in\n        relink,*)\n\t  # Fast installation is not supported\n\t  link_command=$compile_var$compile_command$compile_rpath\n\t  relink_command=$finalize_var$finalize_command$finalize_rpath\n\n\t  func_warning \"this platform does not like uninstalled shared libraries\"\n\t  func_warning \"'$output' will be relinked during installation\"\n\t  ;;\n        *,yes)\n\t  link_command=$finalize_var$compile_command$finalize_rpath\n\t  relink_command=`$ECHO \"$compile_var$compile_command$compile_rpath\" | $SED 's%@OUTPUT@%\\$progdir/\\$file%g'`\n          ;;\n\t*,no)\n\t  link_command=$compile_var$compile_command$compile_rpath\n\t  relink_command=$finalize_var$finalize_command$finalize_rpath\n          ;;\n\t*,needless)\n\t  link_command=$finalize_var$compile_command$finalize_rpath\n\t  relink_command=\n          ;;\n      esac\n\n      # Replace the output file specification.\n      link_command=`$ECHO \"$link_command\" | $SED 's%@OUTPUT@%'\"$output_objdir/$outputname\"'%g'`\n\n      # Delete the old output files.\n      $opt_dry_run || $RM $output $output_objdir/$outputname $output_objdir/lt-$outputname\n\n      func_show_eval \"$link_command\" 'exit $?'\n\n      if test -n \"$postlink_cmds\"; then\n\tfunc_to_tool_file \"$output_objdir/$outputname\"\n\tpostlink_cmds=`func_echo_all \"$postlink_cmds\" | $SED -e 's%@OUTPUT@%'\"$output_objdir/$outputname\"'%g' -e 's%@TOOL_OUTPUT@%'\"$func_to_tool_file_result\"'%g'`\n\tfunc_execute_cmds \"$postlink_cmds\" 'exit $?'\n      fi\n\n      # Now create the wrapper script.\n      func_verbose \"creating $output\"\n\n      # Quote the relink command for shipping.\n      if test -n \"$relink_command\"; then\n\t# Preserve any variables that may affect compiler behavior\n\tfor var in $variables_saved_for_relink; do\n\t  if eval test -z \\\"\\${$var+set}\\\"; then\n\t    relink_command=\"{ test -z \\\"\\${$var+set}\\\" || $lt_unset $var || { $var=; export $var; }; }; $relink_command\"\n\t  elif eval var_value=\\$$var; test -z \"$var_value\"; then\n\t    relink_command=\"$var=; export $var; $relink_command\"\n\t  else\n\t    func_quote_for_eval \"$var_value\"\n\t    relink_command=\"$var=$func_quote_for_eval_result; export $var; $relink_command\"\n\t  fi\n\tdone\n\trelink_command=\"(cd `pwd`; $relink_command)\"\n\trelink_command=`$ECHO \"$relink_command\" | $SED \"$sed_quote_subst\"`\n      fi\n\n      # Only actually do things if not in dry run mode.\n      $opt_dry_run || {\n\t# win32 will think the script is a binary if it has\n\t# a .exe suffix, so we strip it off here.\n\tcase $output in\n\t  *.exe) func_stripname '' '.exe' \"$output\"\n\t         output=$func_stripname_result ;;\n\tesac\n\t# test for cygwin because mv fails w/o .exe extensions\n\tcase $host in\n\t  *cygwin*)\n\t    exeext=.exe\n\t    func_stripname '' '.exe' \"$outputname\"\n\t    outputname=$func_stripname_result ;;\n\t  *) exeext= ;;\n\tesac\n\tcase $host in\n\t  *cygwin* | *mingw* )\n\t    func_dirname_and_basename \"$output\" \"\" \".\"\n\t    output_name=$func_basename_result\n\t    output_path=$func_dirname_result\n\t    cwrappersource=$output_path/$objdir/lt-$output_name.c\n\t    cwrapper=$output_path/$output_name.exe\n\t    $RM $cwrappersource $cwrapper\n\t    trap \"$RM $cwrappersource $cwrapper; exit $EXIT_FAILURE\" 1 2 15\n\n\t    func_emit_cwrapperexe_src > $cwrappersource\n\n\t    # The wrapper executable is built using the $host compiler,\n\t    # because it contains $host paths and files. If cross-\n\t    # compiling, it, like the target executable, must be\n\t    # executed on the $host or under an emulation environment.\n\t    $opt_dry_run || {\n\t      $LTCC $LTCFLAGS -o $cwrapper $cwrappersource\n\t      $STRIP $cwrapper\n\t    }\n\n\t    # Now, create the wrapper script for func_source use:\n\t    func_ltwrapper_scriptname $cwrapper\n\t    $RM $func_ltwrapper_scriptname_result\n\t    trap \"$RM $func_ltwrapper_scriptname_result; exit $EXIT_FAILURE\" 1 2 15\n\t    $opt_dry_run || {\n\t      # note: this script will not be executed, so do not chmod.\n\t      if test \"x$build\" = \"x$host\"; then\n\t\t$cwrapper --lt-dump-script > $func_ltwrapper_scriptname_result\n\t      else\n\t\tfunc_emit_wrapper no > $func_ltwrapper_scriptname_result\n\t      fi\n\t    }\n\t  ;;\n\t  * )\n\t    $RM $output\n\t    trap \"$RM $output; exit $EXIT_FAILURE\" 1 2 15\n\n\t    func_emit_wrapper no > $output\n\t    chmod +x $output\n\t  ;;\n\tesac\n      }\n      exit $EXIT_SUCCESS\n      ;;\n    esac\n\n    # See if we need to build an old-fashioned archive.\n    for oldlib in $oldlibs; do\n\n      case $build_libtool_libs in\n        convenience)\n\t  oldobjs=\"$libobjs_save $symfileobj\"\n\t  addlibs=$convenience\n\t  build_libtool_libs=no\n\t  ;;\n\tmodule)\n\t  oldobjs=$libobjs_save\n\t  addlibs=$old_convenience\n\t  build_libtool_libs=no\n          ;;\n\t*)\n\t  oldobjs=\"$old_deplibs $non_pic_objects\"\n\t  $preload && test -f \"$symfileobj\" \\\n\t    && func_append oldobjs \" $symfileobj\"\n\t  addlibs=$old_convenience\n\t  ;;\n      esac\n\n      if test -n \"$addlibs\"; then\n\tgentop=$output_objdir/${outputname}x\n\tfunc_append generated \" $gentop\"\n\n\tfunc_extract_archives $gentop $addlibs\n\tfunc_append oldobjs \" $func_extract_archives_result\"\n      fi\n\n      # Do each command in the archive commands.\n      if test -n \"$old_archive_from_new_cmds\" && test yes = \"$build_libtool_libs\"; then\n\tcmds=$old_archive_from_new_cmds\n      else\n\n\t# Add any objects from preloaded convenience libraries\n\tif test -n \"$dlprefiles\"; then\n\t  gentop=$output_objdir/${outputname}x\n\t  func_append generated \" $gentop\"\n\n\t  func_extract_archives $gentop $dlprefiles\n\t  func_append oldobjs \" $func_extract_archives_result\"\n\tfi\n\n\t# POSIX demands no paths to be encoded in archives.  We have\n\t# to avoid creating archives with duplicate basenames if we\n\t# might have to extract them afterwards, e.g., when creating a\n\t# static archive out of a convenience library, or when linking\n\t# the entirety of a libtool archive into another (currently\n\t# not supported by libtool).\n\tif (for obj in $oldobjs\n\t    do\n\t      func_basename \"$obj\"\n\t      $ECHO \"$func_basename_result\"\n\t    done | sort | sort -uc >/dev/null 2>&1); then\n\t  :\n\telse\n\t  echo \"copying selected object files to avoid basename conflicts...\"\n\t  gentop=$output_objdir/${outputname}x\n\t  func_append generated \" $gentop\"\n\t  func_mkdir_p \"$gentop\"\n\t  save_oldobjs=$oldobjs\n\t  oldobjs=\n\t  counter=1\n\t  for obj in $save_oldobjs\n\t  do\n\t    func_basename \"$obj\"\n\t    objbase=$func_basename_result\n\t    case \" $oldobjs \" in\n\t    \" \") oldobjs=$obj ;;\n\t    *[\\ /]\"$objbase \"*)\n\t      while :; do\n\t\t# Make sure we don't pick an alternate name that also\n\t\t# overlaps.\n\t\tnewobj=lt$counter-$objbase\n\t\tfunc_arith $counter + 1\n\t\tcounter=$func_arith_result\n\t\tcase \" $oldobjs \" in\n\t\t*[\\ /]\"$newobj \"*) ;;\n\t\t*) if test ! -f \"$gentop/$newobj\"; then break; fi ;;\n\t\tesac\n\t      done\n\t      func_show_eval \"ln $obj $gentop/$newobj || cp $obj $gentop/$newobj\"\n\t      func_append oldobjs \" $gentop/$newobj\"\n\t      ;;\n\t    *) func_append oldobjs \" $obj\" ;;\n\t    esac\n\t  done\n\tfi\n\tfunc_to_tool_file \"$oldlib\" func_convert_file_msys_to_w32\n\ttool_oldlib=$func_to_tool_file_result\n\teval cmds=\\\"$old_archive_cmds\\\"\n\n\tfunc_len \" $cmds\"\n\tlen=$func_len_result\n\tif test \"$len\" -lt \"$max_cmd_len\" || test \"$max_cmd_len\" -le -1; then\n\t  cmds=$old_archive_cmds\n\telif test -n \"$archiver_list_spec\"; then\n\t  func_verbose \"using command file archive linking...\"\n\t  for obj in $oldobjs\n\t  do\n\t    func_to_tool_file \"$obj\"\n\t    $ECHO \"$func_to_tool_file_result\"\n\t  done > $output_objdir/$libname.libcmd\n\t  func_to_tool_file \"$output_objdir/$libname.libcmd\"\n\t  oldobjs=\" $archiver_list_spec$func_to_tool_file_result\"\n\t  cmds=$old_archive_cmds\n\telse\n\t  # the command line is too long to link in one step, link in parts\n\t  func_verbose \"using piecewise archive linking...\"\n\t  save_RANLIB=$RANLIB\n\t  RANLIB=:\n\t  objlist=\n\t  concat_cmds=\n\t  save_oldobjs=$oldobjs\n\t  oldobjs=\n\t  # Is there a better way of finding the last object in the list?\n\t  for obj in $save_oldobjs\n\t  do\n\t    last_oldobj=$obj\n\t  done\n\t  eval test_cmds=\\\"$old_archive_cmds\\\"\n\t  func_len \" $test_cmds\"\n\t  len0=$func_len_result\n\t  len=$len0\n\t  for obj in $save_oldobjs\n\t  do\n\t    func_len \" $obj\"\n\t    func_arith $len + $func_len_result\n\t    len=$func_arith_result\n\t    func_append objlist \" $obj\"\n\t    if test \"$len\" -lt \"$max_cmd_len\"; then\n\t      :\n\t    else\n\t      # the above command should be used before it gets too long\n\t      oldobjs=$objlist\n\t      if test \"$obj\" = \"$last_oldobj\"; then\n\t\tRANLIB=$save_RANLIB\n\t      fi\n\t      test -z \"$concat_cmds\" || concat_cmds=$concat_cmds~\n\t      eval concat_cmds=\\\"\\$concat_cmds$old_archive_cmds\\\"\n\t      objlist=\n\t      len=$len0\n\t    fi\n\t  done\n\t  RANLIB=$save_RANLIB\n\t  oldobjs=$objlist\n\t  if test -z \"$oldobjs\"; then\n\t    eval cmds=\\\"\\$concat_cmds\\\"\n\t  else\n\t    eval cmds=\\\"\\$concat_cmds~\\$old_archive_cmds\\\"\n\t  fi\n\tfi\n      fi\n      func_execute_cmds \"$cmds\" 'exit $?'\n    done\n\n    test -n \"$generated\" && \\\n      func_show_eval \"${RM}r$generated\"\n\n    # Now create the libtool archive.\n    case $output in\n    *.la)\n      old_library=\n      test yes = \"$build_old_libs\" && old_library=$libname.$libext\n      func_verbose \"creating $output\"\n\n      # Preserve any variables that may affect compiler behavior\n      for var in $variables_saved_for_relink; do\n\tif eval test -z \\\"\\${$var+set}\\\"; then\n\t  relink_command=\"{ test -z \\\"\\${$var+set}\\\" || $lt_unset $var || { $var=; export $var; }; }; $relink_command\"\n\telif eval var_value=\\$$var; test -z \"$var_value\"; then\n\t  relink_command=\"$var=; export $var; $relink_command\"\n\telse\n\t  func_quote_for_eval \"$var_value\"\n\t  relink_command=\"$var=$func_quote_for_eval_result; export $var; $relink_command\"\n\tfi\n      done\n      # Quote the link command for shipping.\n      relink_command=\"(cd `pwd`; $SHELL \\\"$progpath\\\" $preserve_args --mode=relink $libtool_args @inst_prefix_dir@)\"\n      relink_command=`$ECHO \"$relink_command\" | $SED \"$sed_quote_subst\"`\n      if test yes = \"$hardcode_automatic\"; then\n\trelink_command=\n      fi\n\n      # Only create the output if not a dry run.\n      $opt_dry_run || {\n\tfor installed in no yes; do\n\t  if test yes = \"$installed\"; then\n\t    if test -z \"$install_libdir\"; then\n\t      break\n\t    fi\n\t    output=$output_objdir/${outputname}i\n\t    # Replace all uninstalled libtool libraries with the installed ones\n\t    newdependency_libs=\n\t    for deplib in $dependency_libs; do\n\t      case $deplib in\n\t      *.la)\n\t\tfunc_basename \"$deplib\"\n\t\tname=$func_basename_result\n\t\tfunc_resolve_sysroot \"$deplib\"\n\t\teval libdir=`$SED -n -e 's/^libdir=\\(.*\\)$/\\1/p' $func_resolve_sysroot_result`\n\t\ttest -z \"$libdir\" && \\\n\t\t  func_fatal_error \"'$deplib' is not a valid libtool archive\"\n\t\tfunc_append newdependency_libs \" ${lt_sysroot:+=}$libdir/$name\"\n\t\t;;\n\t      -L*)\n\t\tfunc_stripname -L '' \"$deplib\"\n\t\tfunc_replace_sysroot \"$func_stripname_result\"\n\t\tfunc_append newdependency_libs \" -L$func_replace_sysroot_result\"\n\t\t;;\n\t      -R*)\n\t\tfunc_stripname -R '' \"$deplib\"\n\t\tfunc_replace_sysroot \"$func_stripname_result\"\n\t\tfunc_append newdependency_libs \" -R$func_replace_sysroot_result\"\n\t\t;;\n\t      *) func_append newdependency_libs \" $deplib\" ;;\n\t      esac\n\t    done\n\t    dependency_libs=$newdependency_libs\n\t    newdlfiles=\n\n\t    for lib in $dlfiles; do\n\t      case $lib in\n\t      *.la)\n\t        func_basename \"$lib\"\n\t\tname=$func_basename_result\n\t\teval libdir=`$SED -n -e 's/^libdir=\\(.*\\)$/\\1/p' $lib`\n\t\ttest -z \"$libdir\" && \\\n\t\t  func_fatal_error \"'$lib' is not a valid libtool archive\"\n\t\tfunc_append newdlfiles \" ${lt_sysroot:+=}$libdir/$name\"\n\t\t;;\n\t      *) func_append newdlfiles \" $lib\" ;;\n\t      esac\n\t    done\n\t    dlfiles=$newdlfiles\n\t    newdlprefiles=\n\t    for lib in $dlprefiles; do\n\t      case $lib in\n\t      *.la)\n\t\t# Only pass preopened files to the pseudo-archive (for\n\t\t# eventual linking with the app. that links it) if we\n\t\t# didn't already link the preopened objects directly into\n\t\t# the library:\n\t\tfunc_basename \"$lib\"\n\t\tname=$func_basename_result\n\t\teval libdir=`$SED -n -e 's/^libdir=\\(.*\\)$/\\1/p' $lib`\n\t\ttest -z \"$libdir\" && \\\n\t\t  func_fatal_error \"'$lib' is not a valid libtool archive\"\n\t\tfunc_append newdlprefiles \" ${lt_sysroot:+=}$libdir/$name\"\n\t\t;;\n\t      esac\n\t    done\n\t    dlprefiles=$newdlprefiles\n\t  else\n\t    newdlfiles=\n\t    for lib in $dlfiles; do\n\t      case $lib in\n\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) abs=$lib ;;\n\t\t*) abs=`pwd`\"/$lib\" ;;\n\t      esac\n\t      func_append newdlfiles \" $abs\"\n\t    done\n\t    dlfiles=$newdlfiles\n\t    newdlprefiles=\n\t    for lib in $dlprefiles; do\n\t      case $lib in\n\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) abs=$lib ;;\n\t\t*) abs=`pwd`\"/$lib\" ;;\n\t      esac\n\t      func_append newdlprefiles \" $abs\"\n\t    done\n\t    dlprefiles=$newdlprefiles\n\t  fi\n\t  $RM $output\n\t  # place dlname in correct position for cygwin\n\t  # In fact, it would be nice if we could use this code for all target\n\t  # systems that can't hard-code library paths into their executables\n\t  # and that have no shared library path variable independent of PATH,\n\t  # but it turns out we can't easily determine that from inspecting\n\t  # libtool variables, so we have to hard-code the OSs to which it\n\t  # applies here; at the moment, that means platforms that use the PE\n\t  # object format with DLL files.  See the long comment at the top of\n\t  # tests/bindir.at for full details.\n\t  tdlname=$dlname\n\t  case $host,$output,$installed,$module,$dlname in\n\t    *cygwin*,*lai,yes,no,*.dll | *mingw*,*lai,yes,no,*.dll | *cegcc*,*lai,yes,no,*.dll)\n\t      # If a -bindir argument was supplied, place the dll there.\n\t      if test -n \"$bindir\"; then\n\t\tfunc_relative_path \"$install_libdir\" \"$bindir\"\n\t\ttdlname=$func_relative_path_result/$dlname\n\t      else\n\t\t# Otherwise fall back on heuristic.\n\t\ttdlname=../bin/$dlname\n\t      fi\n\t      ;;\n\t  esac\n\t  $ECHO > $output \"\\\n# $outputname - a libtool library file\n# Generated by $PROGRAM (GNU $PACKAGE) $VERSION\n#\n# Please DO NOT delete this file!\n# It is necessary for linking the library.\n\n# The name that we can dlopen(3).\ndlname='$tdlname'\n\n# Names of this library.\nlibrary_names='$library_names'\n\n# The name of the static archive.\nold_library='$old_library'\n\n# Linker flags that cannot go in dependency_libs.\ninherited_linker_flags='$new_inherited_linker_flags'\n\n# Libraries that this one depends upon.\ndependency_libs='$dependency_libs'\n\n# Names of additional weak libraries provided by this library\nweak_library_names='$weak_libs'\n\n# Version information for $libname.\ncurrent=$current\nage=$age\nrevision=$revision\n\n# Is this an already installed library?\ninstalled=$installed\n\n# Should we warn about portability when linking against -modules?\nshouldnotlink=$module\n\n# Files to dlopen/dlpreopen\ndlopen='$dlfiles'\ndlpreopen='$dlprefiles'\n\n# Directory that this library needs to be installed in:\nlibdir='$install_libdir'\"\n\t  if test no,yes = \"$installed,$need_relink\"; then\n\t    $ECHO >> $output \"\\\nrelink_command=\\\"$relink_command\\\"\"\n\t  fi\n\tdone\n      }\n\n      # Do a symbolic link so that the libtool archive can be found in\n      # LD_LIBRARY_PATH before the program is installed.\n      func_show_eval '( cd \"$output_objdir\" && $RM \"$outputname\" && $LN_S \"../$outputname\" \"$outputname\" )' 'exit $?'\n      ;;\n    esac\n    exit $EXIT_SUCCESS\n}\n\nif test link = \"$opt_mode\" || test relink = \"$opt_mode\"; then\n  func_mode_link ${1+\"$@\"}\nfi\n\n\n# func_mode_uninstall arg...\nfunc_mode_uninstall ()\n{\n    $debug_cmd\n\n    RM=$nonopt\n    files=\n    rmforce=false\n    exit_status=0\n\n    # This variable tells wrapper scripts just to set variables rather\n    # than running their programs.\n    libtool_install_magic=$magic\n\n    for arg\n    do\n      case $arg in\n      -f) func_append RM \" $arg\"; rmforce=: ;;\n      -*) func_append RM \" $arg\" ;;\n      *) func_append files \" $arg\" ;;\n      esac\n    done\n\n    test -z \"$RM\" && \\\n      func_fatal_help \"you must specify an RM program\"\n\n    rmdirs=\n\n    for file in $files; do\n      func_dirname \"$file\" \"\" \".\"\n      dir=$func_dirname_result\n      if test . = \"$dir\"; then\n\todir=$objdir\n      else\n\todir=$dir/$objdir\n      fi\n      func_basename \"$file\"\n      name=$func_basename_result\n      test uninstall = \"$opt_mode\" && odir=$dir\n\n      # Remember odir for removal later, being careful to avoid duplicates\n      if test clean = \"$opt_mode\"; then\n\tcase \" $rmdirs \" in\n\t  *\" $odir \"*) ;;\n\t  *) func_append rmdirs \" $odir\" ;;\n\tesac\n      fi\n\n      # Don't error if the file doesn't exist and rm -f was used.\n      if { test -L \"$file\"; } >/dev/null 2>&1 ||\n\t { test -h \"$file\"; } >/dev/null 2>&1 ||\n\t test -f \"$file\"; then\n\t:\n      elif test -d \"$file\"; then\n\texit_status=1\n\tcontinue\n      elif $rmforce; then\n\tcontinue\n      fi\n\n      rmfiles=$file\n\n      case $name in\n      *.la)\n\t# Possibly a libtool archive, so verify it.\n\tif func_lalib_p \"$file\"; then\n\t  func_source $dir/$name\n\n\t  # Delete the libtool libraries and symlinks.\n\t  for n in $library_names; do\n\t    func_append rmfiles \" $odir/$n\"\n\t  done\n\t  test -n \"$old_library\" && func_append rmfiles \" $odir/$old_library\"\n\n\t  case $opt_mode in\n\t  clean)\n\t    case \" $library_names \" in\n\t    *\" $dlname \"*) ;;\n\t    *) test -n \"$dlname\" && func_append rmfiles \" $odir/$dlname\" ;;\n\t    esac\n\t    test -n \"$libdir\" && func_append rmfiles \" $odir/$name $odir/${name}i\"\n\t    ;;\n\t  uninstall)\n\t    if test -n \"$library_names\"; then\n\t      # Do each command in the postuninstall commands.\n\t      func_execute_cmds \"$postuninstall_cmds\" '$rmforce || exit_status=1'\n\t    fi\n\n\t    if test -n \"$old_library\"; then\n\t      # Do each command in the old_postuninstall commands.\n\t      func_execute_cmds \"$old_postuninstall_cmds\" '$rmforce || exit_status=1'\n\t    fi\n\t    # FIXME: should reinstall the best remaining shared library.\n\t    ;;\n\t  esac\n\tfi\n\t;;\n\n      *.lo)\n\t# Possibly a libtool object, so verify it.\n\tif func_lalib_p \"$file\"; then\n\n\t  # Read the .lo file\n\t  func_source $dir/$name\n\n\t  # Add PIC object to the list of files to remove.\n\t  if test -n \"$pic_object\" && test none != \"$pic_object\"; then\n\t    func_append rmfiles \" $dir/$pic_object\"\n\t  fi\n\n\t  # Add non-PIC object to the list of files to remove.\n\t  if test -n \"$non_pic_object\" && test none != \"$non_pic_object\"; then\n\t    func_append rmfiles \" $dir/$non_pic_object\"\n\t  fi\n\tfi\n\t;;\n\n      *)\n\tif test clean = \"$opt_mode\"; then\n\t  noexename=$name\n\t  case $file in\n\t  *.exe)\n\t    func_stripname '' '.exe' \"$file\"\n\t    file=$func_stripname_result\n\t    func_stripname '' '.exe' \"$name\"\n\t    noexename=$func_stripname_result\n\t    # $file with .exe has already been added to rmfiles,\n\t    # add $file without .exe\n\t    func_append rmfiles \" $file\"\n\t    ;;\n\t  esac\n\t  # Do a test to see if this is a libtool program.\n\t  if func_ltwrapper_p \"$file\"; then\n\t    if func_ltwrapper_executable_p \"$file\"; then\n\t      func_ltwrapper_scriptname \"$file\"\n\t      relink_command=\n\t      func_source $func_ltwrapper_scriptname_result\n\t      func_append rmfiles \" $func_ltwrapper_scriptname_result\"\n\t    else\n\t      relink_command=\n\t      func_source $dir/$noexename\n\t    fi\n\n\t    # note $name still contains .exe if it was in $file originally\n\t    # as does the version of $file that was added into $rmfiles\n\t    func_append rmfiles \" $odir/$name $odir/${name}S.$objext\"\n\t    if test yes = \"$fast_install\" && test -n \"$relink_command\"; then\n\t      func_append rmfiles \" $odir/lt-$name\"\n\t    fi\n\t    if test \"X$noexename\" != \"X$name\"; then\n\t      func_append rmfiles \" $odir/lt-$noexename.c\"\n\t    fi\n\t  fi\n\tfi\n\t;;\n      esac\n      func_show_eval \"$RM $rmfiles\" 'exit_status=1'\n    done\n\n    # Try to remove the $objdir's in the directories where we deleted files\n    for dir in $rmdirs; do\n      if test -d \"$dir\"; then\n\tfunc_show_eval \"rmdir $dir >/dev/null 2>&1\"\n      fi\n    done\n\n    exit $exit_status\n}\n\nif test uninstall = \"$opt_mode\" || test clean = \"$opt_mode\"; then\n  func_mode_uninstall ${1+\"$@\"}\nfi\n\ntest -z \"$opt_mode\" && {\n  help=$generic_help\n  func_fatal_help \"you must specify a MODE\"\n}\n\ntest -z \"$exec_cmd\" && \\\n  func_fatal_help \"invalid operation mode '$opt_mode'\"\n\nif test -n \"$exec_cmd\"; then\n  eval exec \"$exec_cmd\"\n  exit $EXIT_FAILURE\nfi\n\nexit $exit_status\n\n\n# The TAGs below are defined such that we never get into a situation\n# where we disable both kinds of libraries.  Given conflicting\n# choices, we go for a static library, that is the most portable,\n# since we can't tell whether shared libraries were disabled because\n# the user asked for that or because the platform doesn't support\n# them.  This is particularly important on AIX, because we don't\n# support having both static and shared libraries enabled at the same\n# time on that platform, so we default to a shared-only configuration.\n# If a disable-shared tag is given, we'll fallback to a static-only\n# configuration.  But we'll never go from static-only to shared-only.\n\n# ### BEGIN LIBTOOL TAG CONFIG: disable-shared\nbuild_libtool_libs=no\nbuild_old_libs=yes\n# ### END LIBTOOL TAG CONFIG: disable-shared\n\n# ### BEGIN LIBTOOL TAG CONFIG: disable-static\nbuild_old_libs=`case $build_libtool_libs in yes) echo no;; *) echo yes;; esac`\n# ### END LIBTOOL TAG CONFIG: disable-static\n\n# Local Variables:\n# mode:shell-script\n# sh-indentation:2\n# End:\n",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/.gitlab-ci.yml": "variables:\n  # Not normally needed, but may be if some script uses `apt-get install`.\n  DEBIAN_FRONTEND: noninteractive\n  # Locale settings do not affect the build, but might affect tests.\n  LC_ALL: C\n\n  CI_REGISTRY_IMAGE: registry.gitlab.isc.org/isc-projects/images/bind9\n  CCACHE_DIR: \"/ccache\"\n  SOFTHSM2_CONF: \"/var/tmp/softhsm2/softhsm2.conf\"\n\n  # VirtualBox driver needs to set build_dir to \"/builds\" in gitlab-runner.toml\n  KYUA_RESULT: \"$CI_PROJECT_DIR/kyua.results\"\n\n  BUILD_PARALLEL_JOBS: 6\n  TEST_PARALLEL_JOBS: 6\n\nstages:\n  - precheck\n  - build\n  - unit\n  - system\n  - docs\n  - push\n\n### Runner Tag Templates\n\n.linux-amd64: &linux_amd64\n  tags:\n    - linux\n    - amd64\n\n.linux-i386: &linux_i386\n  tags:\n    - linux\n    - i386\n\n### Docker Image Templates\n\n# Alpine Linux\n\n.alpine-3.10-amd64: &alpine_3_10_amd64_image\n  image: \"$CI_REGISTRY_IMAGE:alpine-3.10-amd64\"\n  <<: *linux_amd64\n\n# CentOS\n\n.centos-centos6-amd64: &centos_centos6_amd64_image\n  image: \"$CI_REGISTRY_IMAGE:centos-centos6-amd64\"\n  <<: *linux_amd64\n\n.centos-centos7-amd64: &centos_centos7_amd64_image\n  image: \"$CI_REGISTRY_IMAGE:centos-centos7-amd64\"\n  <<: *linux_amd64\n\n# Debian\n\n.debian-jessie-amd64: &debian_jessie_amd64_image\n  image: \"$CI_REGISTRY_IMAGE:debian-jessie-amd64\"\n  <<: *linux_amd64\n\n.debian-stretch-amd64: &debian_stretch_amd64_image\n  image: \"$CI_REGISTRY_IMAGE:debian-stretch-amd64\"\n  <<: *linux_amd64\n\n.debian-stretch-i386: &debian_stretch_i386_image\n  image: \"$CI_REGISTRY_IMAGE:debian-stretch-i386\"\n  <<: *linux_i386\n\n.debian-buster-amd64: &debian_buster_amd64_image\n  image: \"$CI_REGISTRY_IMAGE:debian-buster-amd64\"\n  <<: *linux_i386\n\n.debian-sid-amd64: &debian_sid_amd64_image\n  image: \"$CI_REGISTRY_IMAGE:debian-sid-amd64\"\n  <<: *linux_amd64\n\n.debian-sid-i386: &debian_sid_i386_image\n  image: \"$CI_REGISTRY_IMAGE:debian-sid-i386\"\n  <<: *linux_i386\n\n# Fedora\n\n.fedora-30-amd64: &fedora_30_amd64_image\n  image: \"$CI_REGISTRY_IMAGE:fedora-30-amd64\"\n  <<: *linux_amd64\n\n# Ubuntu\n\n.ubuntu-xenial-amd64: &ubuntu_xenial_amd64_image\n  image: \"$CI_REGISTRY_IMAGE:ubuntu-xenial-amd64\"\n  <<: *linux_amd64\n\n.ubuntu-xenial-i386: &ubuntu_xenial_i386_image\n  image: \"$CI_REGISTRY_IMAGE:ubuntu-xenial-i386\"\n  <<: *linux_i386\n\n.ubuntu-bionic-amd64: &ubuntu_bionic_amd64_image\n  image: \"$CI_REGISTRY_IMAGE:ubuntu-bionic-amd64\"\n  <<: *linux_amd64\n\n.ubuntu-bionic-i386: &ubuntu_bionic_i386_image\n  image: \"$CI_REGISTRY_IMAGE:ubuntu-bionic-i386\"\n  <<: *linux_i386\n\n### Job Templates\n\n.default-triggering-rules: &default_triggering_rules\n  only:\n    - merge_requests\n    - tags\n    - web\n\n.precheck: &precheck_job\n  <<: *default_triggering_rules\n  <<: *debian_sid_amd64_image\n  stage: precheck\n\n.autoconf: &autoconf_job\n  <<: *default_triggering_rules\n  <<: *debian_sid_amd64_image\n  stage: precheck\n  script:\n    - autoreconf -fi\n  artifacts:\n    untracked: true\n    expire_in: \"1 hour\"\n\n.configure: &configure |\n    ./configure \\\n    --disable-maintainer-mode \\\n    --enable-developer \\\n    --with-libtool \\\n    --with-geoip2=auto \\\n    --disable-static \\\n    --with-cmocka \\\n    --with-libxml2 \\\n    --with-json \\\n    --prefix=$HOME/.local \\\n    --without-make-clean \\\n    $EXTRA_CONFIGURE \\\n    || cat config.log\n\n.build: &build_job\n  <<: *default_triggering_rules\n  stage: build\n  before_script:\n    - test -w \"${CCACHE_DIR}\" && export PATH=\"/usr/lib/ccache:${PATH}\"\n  script:\n    - *configure\n    - make -j${BUILD_PARALLEL_JOBS:-1} -k all V=1\n    - test -z \"${RUN_MAKE_INSTALL}\" || make install\n  dependencies:\n    - autoreconf:sid:amd64\n  needs:\n    - autoreconf:sid:amd64\n  artifacts:\n    untracked: true\n    expire_in: \"1 hour\"\n\n.setup_interfaces: &setup_interfaces |\n    if [ \"$(id -u)\" -eq \"0\" ]; then\n      sh -x bin/tests/system/ifconfig.sh up;\n    else\n      sudo sh -x bin/tests/system/ifconfig.sh up;\n    fi\n\n.setup_softhsm: &setup_softhsm |\n    sh -x util/prepare-softhsm2.sh\n\n.system_test: &system_test_job\n  <<: *default_triggering_rules\n  stage: system\n  retry: 2\n  before_script:\n    - *setup_interfaces\n    - *setup_softhsm\n  script:\n    - ( cd bin/tests && make -j${TEST_PARALLEL_JOBS:-1} -k test V=1 )\n    - test -s bin/tests/system/systests.output\n  artifacts:\n    untracked: true\n    expire_in: \"1 week\"\n    when: on_failure\n\n.kyua_report: &kyua_report_html |\n  kyua report-html \\\n       --force \\\n       --results-file \"$KYUA_RESULT\" \\\n       --results-filter \"\" \\\n       --output kyua_html\n\n.unit_test: &unit_test_job\n  <<: *default_triggering_rules\n  stage: unit\n  before_script:\n    - *setup_softhsm\n  script:\n    - make unit\n  after_script:\n    - *kyua_report_html\n  artifacts:\n    paths:\n      - kyua.log\n      - kyua.results\n      - kyua_html/\n    expire_in: \"1 week\"\n    when: on_failure\n\n### Job Definitions\n\n# Jobs in the precheck stage\n\nautoreconf:sid:amd64:\n  <<: *autoconf_job\n\nmisc:sid:amd64:\n  <<: *precheck_job\n  script:\n    - sh util/check-ans-prereq.sh\n    - sh util/checklibs.sh > checklibs.out\n    - sh util/tabify-changes < CHANGES > CHANGES.tmp\n    - diff -urNap CHANGES CHANGES.tmp\n    - rm CHANGES.tmp\n    - perl util/check-changes CHANGES\n    - perl -w util/merge_copyrights\n    - diff -urNap util/copyrights util/newcopyrights\n    - rm util/newcopyrights\n    - perl -w util/update_copyrights < util/copyrights\n    - if test \"$(git status --porcelain | grep -Ev '\\?\\?' | wc -l)\" -gt \"0\"; then git status --short; exit 1; fi\n    - xmllint --noout --nonet `git ls-files '*.xml' '*.docbook'`\n    - xmllint --noout --nonet --html `git ls-files '*.html'`\n    - sh util/check-win32util-configure\n  artifacts:\n    paths:\n      - util/newcopyrights\n      - checklibs.out\n    expire_in: \"1 week\"\n    when: on_failure\n\n\ud83d\udc1e:sid:amd64:\n  <<: *precheck_job\n  script:\n    - util/check-cocci\n    - if test \"$(git status --porcelain | grep -Ev '\\?\\?' | wc -l)\" -gt \"0\"; then git status --short; exit 1; fi\n\n# Jobs for doc builds on Debian Sid (amd64)\n\ndocs:sid:amd64:\n  <<: *debian_sid_amd64_image\n  stage: docs\n  script:\n    - ./configure || cat config.log\n    - make -C doc/misc docbook\n    - make -C doc/arm Bv9ARM.html\n  dependencies:\n    - autoreconf:sid:amd64\n  needs:\n    - autoreconf:sid:amd64\n  artifacts:\n    paths:\n      - doc/arm/\n    expire_in: \"1 month\"\n  only:\n    - merge_requests\n    - tags\n    - web\n    - master@isc-projects/bind9\n    - /^v9_[1-9][0-9]$/@isc-projects/bind9\n\npush:docs:sid:amd64:\n  <<: *debian_sid_amd64_image\n  stage: push\n  dependencies: []\n  script:\n    - curl -X POST -F token=$GITLAB_PAGES_DOCS_TRIGGER_TOKEN -F ref=master $GITLAB_PAGES_DOCS_TRIGGER_URL\n  only:\n    - master@isc-projects/bind9\n    - /^v9_[1-9][0-9]$/@isc-projects/bind9\n\n# Jobs for regular GCC builds on Alpine Linux 3.10 (amd64)\n\ngcc:alpine3.10:amd64:\n  variables:\n    CC: gcc\n    CFLAGS: \"-Wall -Wextra -O2 -g\"\n    EXTRA_CONFIGURE: \"--enable-dnstap\"\n  <<: *alpine_3_10_amd64_image\n  <<: *build_job\n\nsystem:gcc:alpine3.10:amd64:\n  <<: *alpine_3_10_amd64_image\n  <<: *system_test_job\n  dependencies:\n    - gcc:alpine3.10:amd64\n  needs: [\"gcc:alpine3.10:amd64\"]\n\nunit:gcc:alpine3.10:amd64:\n  <<: *alpine_3_10_amd64_image\n  <<: *unit_test_job\n  dependencies:\n    - gcc:alpine3.10:amd64\n  needs: [\"gcc:alpine3.10:amd64\"]\n\n# Jobs for regular GCC builds on CentOS 6 (amd64)\n\ngcc:centos6:amd64:\n  variables:\n    CC: gcc\n    CFLAGS: \"-Wall -Wextra -O2 -g\"\n    EXTRA_CONFIGURE: \"--with-libidn2 --disable-warn-error\"\n  <<: *centos_centos6_amd64_image\n  <<: *build_job\n\nsystem:gcc:centos6:amd64:\n  <<: *centos_centos6_amd64_image\n  <<: *system_test_job\n  dependencies:\n    - gcc:centos6:amd64\n  needs: [\"gcc:centos6:amd64\"]\n\nunit:gcc:centos6:amd64:\n  <<: *centos_centos6_amd64_image\n  <<: *unit_test_job\n  dependencies:\n    - gcc:centos6:amd64\n  needs: [\"gcc:centos6:amd64\"]\n\n# Jobs for regular GCC builds on CentOS 7 (amd64)\n\ngcc:centos7:amd64:\n  variables:\n    CC: gcc\n    CFLAGS: \"-Wall -Wextra -O2 -g\"\n    EXTRA_CONFIGURE: \"--enable-dnstap --with-libidn2\"\n  <<: *centos_centos7_amd64_image\n  <<: *build_job\n\nsystem:gcc:centos7:amd64:\n  <<: *centos_centos7_amd64_image\n  <<: *system_test_job\n  dependencies:\n    - gcc:centos7:amd64\n  needs: [\"gcc:centos7:amd64\"]\n\nunit:gcc:centos7:amd64:\n  <<: *centos_centos7_amd64_image\n  <<: *unit_test_job\n  dependencies:\n    - gcc:centos7:amd64\n  needs: [\"gcc:centos7:amd64\"]\n\n# Jobs for regular GCC builds on Debian 8 Jessie (amd64)\n\ngcc:jessie:amd64:\n  variables:\n    CC: gcc\n    CFLAGS: \"-Wall -Wextra -O2 -g\"\n    EXTRA_CONFIGURE: \"--without-cmocka --with-python --disable-geoip\"\n  <<: *debian_jessie_amd64_image\n  <<: *build_job\n\nsystem:gcc:jessie:amd64:\n  <<: *debian_jessie_amd64_image\n  <<: *system_test_job\n  dependencies:\n    - gcc:jessie:amd64\n  needs: [\"gcc:jessie:amd64\"]\n\nunit:gcc:jessie:amd64:\n  <<: *debian_jessie_amd64_image\n  <<: *unit_test_job\n  dependencies:\n    - gcc:jessie:amd64\n  needs: [\"gcc:jessie:amd64\"]\n\n# Jobs for regular GCC builds on Debian 9 Stretch (amd64)\n\ngcc:stretch:amd64:\n  variables:\n    CC: gcc\n    CFLAGS: \"-Wall -Wextra -O2 -g\"\n  <<: *debian_stretch_amd64_image\n  <<: *build_job\n\nsystem:gcc:stretch:amd64:\n  <<: *debian_stretch_amd64_image\n  <<: *system_test_job\n  dependencies:\n    - gcc:stretch:amd64\n  needs: [\"gcc:stretch:amd64\"]\n\nunit:gcc:stretch:amd64:\n  <<: *debian_stretch_amd64_image\n  <<: *unit_test_job\n  dependencies:\n    - gcc:stretch:amd64\n  needs: [\"gcc:stretch:amd64\"]\n\n# Jobs for regular GCC builds on Debian 10 Buster (amd64)\n\ngcc:buster:amd64:\n  variables:\n    CC: gcc\n    CFLAGS: \"-Wall -Wextra -O2 -g\"\n  <<: *debian_buster_amd64_image\n  <<: *build_job\n\nsystem:gcc:buster:amd64:\n  <<: *debian_buster_amd64_image\n  <<: *system_test_job\n  dependencies:\n    - gcc:buster:amd64\n  needs: [\"gcc:buster:amd64\"]\n\nunit:gcc:buster:amd64:\n  <<: *debian_buster_amd64_image\n  <<: *unit_test_job\n  dependencies:\n    - gcc:buster:amd64\n  needs: [\"gcc:buster:amd64\"]\n\n# Jobs for regular GCC builds on Debian Sid (amd64)\n\ngcc:sid:amd64:\n  variables:\n    CC: gcc\n    CFLAGS: \"-Wall -Wextra -O3 -g\"\n    EXTRA_CONFIGURE: \"--enable-dnstap --with-libidn2\"\n    RUN_MAKE_INSTALL: 1\n  <<: *debian_sid_amd64_image\n  <<: *build_job\n\nsystem:gcc:sid:amd64:\n  <<: *debian_sid_amd64_image\n  <<: *system_test_job\n  dependencies:\n    - gcc:sid:amd64\n  needs: [\"gcc:sid:amd64\"]\n\nunit:gcc:sid:amd64:\n  <<: *debian_sid_amd64_image\n  <<: *unit_test_job\n  dependencies:\n    - gcc:sid:amd64\n  needs: [\"gcc:sid:amd64\"]\n\n# Jobs for regular GCC builds on Debian Sid (i386)\n\ngcc:sid:i386:\n  variables:\n    CC: gcc\n    CFLAGS: \"-Wall -Wextra -O3 -g\"\n    EXTRA_CONFIGURE: \"--enable-dnstap --with-libidn2 --without-python\"\n  <<: *debian_sid_i386_image\n  <<: *build_job\n\nsystem:gcc:sid:i386:\n  <<: *debian_sid_i386_image\n  <<: *system_test_job\n  dependencies:\n    - gcc:sid:i386\n  needs: [\"gcc:sid:i386\"]\n\nunit:gcc:sid:i386:\n  <<: *debian_sid_i386_image\n  <<: *unit_test_job\n  dependencies:\n    - gcc:sid:i386\n  needs: [\"gcc:sid:i386\"]\n\n# Jobs for regular GCC builds on Fedora 30 (amd64)\n\ngcc:fedora30:amd64:\n  variables:\n    CC: gcc\n    CFLAGS: \"-Wall -Wextra -O2 -g\"\n    EXTRA_CONFIGURE: \"--with-libidn2\"\n  <<: *fedora_30_amd64_image\n  <<: *build_job\n\nsystem:gcc:fedora30:amd64:\n  <<: *fedora_30_amd64_image\n  <<: *system_test_job\n  dependencies:\n    - gcc:fedora30:amd64\n  needs: [\"gcc:fedora30:amd64\"]\n\nunit:gcc:fedora30:amd64:\n  <<: *fedora_30_amd64_image\n  <<: *unit_test_job\n  dependencies:\n    - gcc:fedora30:amd64\n  needs: [\"gcc:fedora30:amd64\"]\n\n# Jobs for regular GCC builds on Ubuntu 16.04 Xenial Xerus (amd64)\n\ngcc:xenial:amd64:\n  variables:\n    CC: gcc\n    CFLAGS: \"-Wall -Wextra -O2 -g\"\n    EXTRA_CONFIGURE: \"--disable-geoip\"\n  <<: *ubuntu_xenial_amd64_image\n  <<: *build_job\n\nsystem:gcc:xenial:amd64:\n  <<: *ubuntu_xenial_amd64_image\n  <<: *system_test_job\n  dependencies:\n    - gcc:xenial:amd64\n  needs: [\"gcc:xenial:amd64\"]\n\nunit:gcc:xenial:amd64:\n  <<: *ubuntu_xenial_amd64_image\n  <<: *unit_test_job\n  dependencies:\n    - gcc:xenial:amd64\n  needs: [\"gcc:xenial:amd64\"]\n\n# Jobs for regular GCC builds on Ubuntu 18.04 Bionic Beaver (amd64)\n\ngcc:bionic:amd64:\n  variables:\n    CC: gcc\n    CFLAGS: \"-Wall -Wextra -O2 -g\"\n    EXTRA_CONFIGURE: \"--with-libidn2\"\n  <<: *ubuntu_bionic_amd64_image\n  <<: *build_job\n\nsystem:gcc:bionic:amd64:\n  <<: *ubuntu_bionic_amd64_image\n  <<: *system_test_job\n  dependencies:\n    - gcc:bionic:amd64\n  needs: [\"gcc:bionic:amd64\"]\n\nunit:gcc:bionic:amd64:\n  <<: *ubuntu_bionic_amd64_image\n  <<: *unit_test_job\n  dependencies:\n    - gcc:bionic:amd64\n  needs: [\"gcc:bionic:amd64\"]\n\n# Jobs for GCC builds with ASAN enabled on Debian Sid (amd64)\n\nasan:sid:amd64:\n  variables:\n    CC: gcc\n    CFLAGS: \"-Wall -Wextra -O2 -g -fsanitize=address,undefined -DISC_MEM_USE_INTERNAL_MALLOC=0\"\n    LDFLAGS: \"-fsanitize=address,undefined\"\n    EXTRA_CONFIGURE: \"--with-libidn2\"\n  <<: *debian_sid_amd64_image\n  <<: *build_job\n\nsystem:asan:sid:amd64:\n  <<: *debian_sid_amd64_image\n  <<: *system_test_job\n  dependencies:\n    - asan:sid:amd64\n  needs: [\"asan:sid:amd64\"]\n\nunit:asan:sid:amd64:\n  <<: *debian_sid_amd64_image\n  <<: *unit_test_job\n  dependencies:\n    - asan:sid:amd64\n  needs: [\"asan:sid:amd64\"]\n\n# Jobs for Clang builds on Debian Stretch (amd64)\n\nclang:stretch:amd64:\n  variables:\n    CC: clang\n    CFLAGS: \"-Wall -Wextra -Wenum-conversion -O2 -g\"\n    EXTRA_CONFIGURE: \"--with-python=python3\"\n  <<: *debian_stretch_amd64_image\n  <<: *build_job\n\nunit:clang:stretch:amd64:\n  <<: *debian_stretch_amd64_image\n  <<: *unit_test_job\n  dependencies:\n    - clang:stretch:amd64\n  needs: [\"clang:stretch:amd64\"]\n\n# Jobs for Clang builds on Debian Stretch (i386)\n\nclang:stretch:i386:\n  variables:\n    CC: clang\n    CFLAGS: \"-Wall -Wextra -Wenum-conversion -O2 -g\"\n    EXTRA_CONFIGURE: \"--with-python=python2\"\n  <<: *debian_stretch_i386_image\n  <<: *build_job\n\n# Jobs for PKCS#11-enabled GCC builds on Debian Sid (amd64)\n\npkcs11:sid:amd64:\n  variables:\n    CC: gcc\n    CFLAGS: \"-Wall -Wextra -O2 -g\"\n    EXTRA_CONFIGURE: \"--enable-native-pkcs11 --with-pkcs11=/usr/lib/softhsm/libsofthsm2.so\"\n  <<: *debian_sid_amd64_image\n  <<: *build_job\n\nsystem:pkcs11:sid:amd64:\n  <<: *debian_sid_amd64_image\n  <<: *system_test_job\n  dependencies:\n    - pkcs11:sid:amd64\n  needs: [\"pkcs11:sid:amd64\"]\n\nunit:pkcs11:sid:amd64:\n  <<: *debian_sid_amd64_image\n  <<: *unit_test_job\n  dependencies:\n    - pkcs11:sid:amd64\n  needs: [\"pkcs11:sid:amd64\"]\n\n# Jobs with libtool disabled\n\nnolibtool:sid:amd64:\n  variables:\n    CC: gcc\n    CFLAGS: \"-Wall -Wextra -Og -g\"\n    EXTRA_CONFIGURE: \"--with-libidn2 --without-libtool --with-dlopen\"\n  <<: *debian_sid_amd64_image\n  <<: *build_job\n\nsystem:nolibtool:sid:amd64:\n  <<: *debian_sid_amd64_image\n  <<: *system_test_job\n  dependencies:\n    - nolibtool:sid:amd64\n  needs: [\"nolibtool:sid:amd64\"]\n\nunit:nolibtool:sid:amd64:\n  <<: *debian_sid_amd64_image\n  <<: *unit_test_job\n  dependencies:\n    - nolibtool:sid:amd64\n  needs: [\"nolibtool:sid:amd64\"]\n",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/bin/named/main.c": "/*\n * Copyright (C) Internet Systems Consortium, Inc. (\"ISC\")\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n *\n * See the COPYRIGHT file distributed with this work for additional\n * information regarding copyright ownership.\n */\n\n/*! \\file */\n\n#include <config.h>\n\n#include <ctype.h>\n#include <inttypes.h>\n#include <stdbool.h>\n#include <stdlib.h>\n#include <string.h>\n\n#include <isc/app.h>\n#include <isc/backtrace.h>\n#include <isc/commandline.h>\n#include <isc/dir.h>\n#include <isc/file.h>\n#include <isc/hash.h>\n#include <isc/httpd.h>\n#include <isc/os.h>\n#include <isc/platform.h>\n#include <isc/print.h>\n#include <isc/resource.h>\n#include <isc/stdio.h>\n#include <isc/string.h>\n#include <isc/task.h>\n#include <isc/timer.h>\n#include <isc/util.h>\n\n#include <isccc/result.h>\n\n#include <dns/dispatch.h>\n#include <dns/dyndb.h>\n#include <dns/name.h>\n#include <dns/result.h>\n#include <dns/resolver.h>\n#include <dns/view.h>\n\n#include <dst/result.h>\n#if USE_PKCS11\n#include <pk11/result.h>\n#endif\n\n#include <dlz/dlz_dlopen_driver.h>\n\n#ifdef HAVE_GPERFTOOLS_PROFILER\n#include <gperftools/profiler.h>\n#endif\n\n\n/*\n * Defining NAMED_MAIN provides storage declarations (rather than extern)\n * for variables in named/globals.h.\n */\n#define NAMED_MAIN 1\n\n#include <ns/interfacemgr.h>\n\n#include <named/builtin.h>\n#include <named/control.h>\n#include <named/fuzz.h>\n#include <named/globals.h>\t/* Explicit, though named/log.h includes it. */\n#include <named/log.h>\n#include <named/os.h>\n#include <named/server.h>\n#include <named/main.h>\n#ifdef HAVE_LIBSCF\n#include <named/smf_globals.h>\n#endif\n\n#include <openssl/opensslv.h>\n#include <openssl/crypto.h>\n#ifdef HAVE_LIBXML2\n#include <libxml/xmlversion.h>\n#endif\n#ifdef HAVE_ZLIB\n#include <zlib.h>\n#endif\n/*\n * Include header files for database drivers here.\n */\n/* #include \"xxdb.h\" */\n\n#ifdef CONTRIB_DLZ\n/*\n * Include contributed DLZ drivers if appropriate.\n */\n#include <dlz/dlz_drivers.h>\n#endif\n\n/*\n * The maximum number of stack frames to dump on assertion failure.\n */\n#ifndef BACKTRACE_MAXFRAME\n#define BACKTRACE_MAXFRAME 128\n#endif\n\nLIBISC_EXTERNAL_DATA extern int isc_dscp_check_value;\nLIBDNS_EXTERNAL_DATA extern unsigned int dns_zone_mkey_hour;\nLIBDNS_EXTERNAL_DATA extern unsigned int dns_zone_mkey_day;\nLIBDNS_EXTERNAL_DATA extern unsigned int dns_zone_mkey_month;\n\nstatic bool\twant_stats = false;\nstatic char\t\tprogram_name[NAME_MAX] = \"named\";\nstatic char\t\tabsolute_conffile[PATH_MAX];\nstatic char\t\tsaved_command_line[512];\nstatic char\t\tversion[512];\nstatic unsigned int\tmaxsocks = 0;\nstatic int\t\tmaxudp = 0;\n\n/*\n * -T options:\n */\nstatic bool clienttest = false;\nstatic bool dropedns = false;\nstatic bool ednsformerr = false;\nstatic bool ednsnotimp = false;\nstatic bool ednsrefused = false;\nstatic bool fixedlocal = false;\nstatic bool noaa = false;\nstatic bool noedns = false;\nstatic bool nonearest = false;\nstatic bool nosoa = false;\nstatic bool notcp = false;\nstatic bool sigvalinsecs = false;\nstatic unsigned int delay = 0;\n\n/*\n * -4 and -6\n */\nstatic bool disable6 = false;\nstatic bool disable4 = false;\n\nvoid\nnamed_main_earlywarning(const char *format, ...) {\n\tva_list args;\n\n\tva_start(args, format);\n\tif (named_g_lctx != NULL) {\n\t\tisc_log_vwrite(named_g_lctx, NAMED_LOGCATEGORY_GENERAL,\n\t\t\t       NAMED_LOGMODULE_MAIN, ISC_LOG_WARNING,\n\t\t\t       format, args);\n\t} else {\n\t\tfprintf(stderr, \"%s: \", program_name);\n\t\tvfprintf(stderr, format, args);\n\t\tfprintf(stderr, \"\\n\");\n\t\tfflush(stderr);\n\t}\n\tva_end(args);\n}\n\nvoid\nnamed_main_earlyfatal(const char *format, ...) {\n\tva_list args;\n\n\tva_start(args, format);\n\tif (named_g_lctx != NULL) {\n\t\tisc_log_vwrite(named_g_lctx, NAMED_LOGCATEGORY_GENERAL,\n\t\t\t       NAMED_LOGMODULE_MAIN, ISC_LOG_CRITICAL,\n\t\t\t       format, args);\n\t\tisc_log_write(named_g_lctx, NAMED_LOGCATEGORY_GENERAL,\n\t\t\t       NAMED_LOGMODULE_MAIN, ISC_LOG_CRITICAL,\n\t\t\t       \"exiting (due to early fatal error)\");\n\t} else {\n\t\tfprintf(stderr, \"%s: \", program_name);\n\t\tvfprintf(stderr, format, args);\n\t\tfprintf(stderr, \"\\n\");\n\t\tfflush(stderr);\n\t}\n\tva_end(args);\n\n\texit(1);\n}\n\nISC_PLATFORM_NORETURN_PRE static void\nassertion_failed(const char *file, int line, isc_assertiontype_t type,\n\t\t const char *cond) ISC_PLATFORM_NORETURN_POST;\n\nstatic void\nassertion_failed(const char *file, int line, isc_assertiontype_t type,\n\t\t const char *cond)\n{\n\tvoid *tracebuf[BACKTRACE_MAXFRAME];\n\tint i, nframes;\n\tisc_result_t result;\n\tconst char *logsuffix = \"\";\n\tconst char *fname;\n\n\t/*\n\t * Handle assertion failures.\n\t */\n\n\tif (named_g_lctx != NULL) {\n\t\t/*\n\t\t * Reset the assertion callback in case it is the log\n\t\t * routines causing the assertion.\n\t\t */\n\t\tisc_assertion_setcallback(NULL);\n\n\t\tresult = isc_backtrace_gettrace(tracebuf, BACKTRACE_MAXFRAME,\n\t\t\t\t\t\t&nframes);\n\t\tif (result == ISC_R_SUCCESS && nframes > 0)\n\t\t\tlogsuffix = \", back trace\";\n\t\tisc_log_write(named_g_lctx, NAMED_LOGCATEGORY_GENERAL,\n\t\t\t      NAMED_LOGMODULE_MAIN, ISC_LOG_CRITICAL,\n\t\t\t      \"%s:%d: %s(%s) failed%s\", file, line,\n\t\t\t      isc_assertion_typetotext(type), cond, logsuffix);\n\t\tif (result == ISC_R_SUCCESS) {\n\t\t\tfor (i = 0; i < nframes; i++) {\n\t\t\t\tunsigned long offset;\n\n\t\t\t\tfname = NULL;\n\t\t\t\tresult = isc_backtrace_getsymbol(tracebuf[i],\n\t\t\t\t\t\t\t\t &fname,\n\t\t\t\t\t\t\t\t &offset);\n\t\t\t\tif (result == ISC_R_SUCCESS) {\n\t\t\t\t\tisc_log_write(named_g_lctx,\n\t\t\t\t\t\t      NAMED_LOGCATEGORY_GENERAL,\n\t\t\t\t\t\t      NAMED_LOGMODULE_MAIN,\n\t\t\t\t\t\t      ISC_LOG_CRITICAL,\n\t\t\t\t\t\t      \"#%d %p in %s()+0x%lx\", i,\n\t\t\t\t\t\t      tracebuf[i], fname,\n\t\t\t\t\t\t      offset);\n\t\t\t\t} else {\n\t\t\t\t\tisc_log_write(named_g_lctx,\n\t\t\t\t\t\t      NAMED_LOGCATEGORY_GENERAL,\n\t\t\t\t\t\t      NAMED_LOGMODULE_MAIN,\n\t\t\t\t\t\t      ISC_LOG_CRITICAL,\n\t\t\t\t\t\t      \"#%d %p in ??\", i,\n\t\t\t\t\t\t      tracebuf[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tisc_log_write(named_g_lctx, NAMED_LOGCATEGORY_GENERAL,\n\t\t\t      NAMED_LOGMODULE_MAIN, ISC_LOG_CRITICAL,\n\t\t\t      \"exiting (due to assertion failure)\");\n\t} else {\n\t\tfprintf(stderr, \"%s:%d: %s(%s) failed\\n\",\n\t\t\tfile, line, isc_assertion_typetotext(type), cond);\n\t\tfflush(stderr);\n\t}\n\n\tif (named_g_coreok)\n\t\tabort();\n\texit(1);\n}\n\nISC_PLATFORM_NORETURN_PRE static void\nlibrary_fatal_error(const char *file, int line, const char *format,\n\t\t    va_list args)\nISC_FORMAT_PRINTF(3, 0) ISC_PLATFORM_NORETURN_POST;\n\nstatic void\nlibrary_fatal_error(const char *file, int line, const char *format,\n\t\t    va_list args)\n{\n\t/*\n\t * Handle isc_error_fatal() calls from our libraries.\n\t */\n\n\tif (named_g_lctx != NULL) {\n\t\t/*\n\t\t * Reset the error callback in case it is the log\n\t\t * routines causing the assertion.\n\t\t */\n\t\tisc_error_setfatal(NULL);\n\n\t\tisc_log_write(named_g_lctx, NAMED_LOGCATEGORY_GENERAL,\n\t\t\t      NAMED_LOGMODULE_MAIN, ISC_LOG_CRITICAL,\n\t\t\t      \"%s:%d: fatal error:\", file, line);\n\t\tisc_log_vwrite(named_g_lctx, NAMED_LOGCATEGORY_GENERAL,\n\t\t\t       NAMED_LOGMODULE_MAIN, ISC_LOG_CRITICAL,\n\t\t\t       format, args);\n\t\tisc_log_write(named_g_lctx, NAMED_LOGCATEGORY_GENERAL,\n\t\t\t      NAMED_LOGMODULE_MAIN, ISC_LOG_CRITICAL,\n\t\t\t      \"exiting (due to fatal error in library)\");\n\t} else {\n\t\tfprintf(stderr, \"%s:%d: fatal error: \", file, line);\n\t\tvfprintf(stderr, format, args);\n\t\tfprintf(stderr, \"\\n\");\n\t\tfflush(stderr);\n\t}\n\n\tif (named_g_coreok)\n\t\tabort();\n\texit(1);\n}\n\nstatic void\nlibrary_unexpected_error(const char *file, int line, const char *format,\n\t\t\t va_list args) ISC_FORMAT_PRINTF(3, 0);\n\nstatic void\nlibrary_unexpected_error(const char *file, int line, const char *format,\n\t\t\t va_list args)\n{\n\t/*\n\t * Handle isc_error_unexpected() calls from our libraries.\n\t */\n\n\tif (named_g_lctx != NULL) {\n\t\tisc_log_write(named_g_lctx, NAMED_LOGCATEGORY_GENERAL,\n\t\t\t      NAMED_LOGMODULE_MAIN, ISC_LOG_ERROR,\n\t\t\t      \"%s:%d: unexpected error:\", file, line);\n\t\tisc_log_vwrite(named_g_lctx, NAMED_LOGCATEGORY_GENERAL,\n\t\t\t       NAMED_LOGMODULE_MAIN, ISC_LOG_ERROR,\n\t\t\t       format, args);\n\t} else {\n\t\tfprintf(stderr, \"%s:%d: fatal error: \", file, line);\n\t\tvfprintf(stderr, format, args);\n\t\tfprintf(stderr, \"\\n\");\n\t\tfflush(stderr);\n\t}\n}\n\nstatic void\nusage(void) {\n\tfprintf(stderr,\n\t\t\"usage: named [-4|-6] [-c conffile] [-d debuglevel] \"\n\t\t\"[-E engine] [-f|-g]\\n\"\n\t\t\"             [-n number_of_cpus] [-p port] [-s] \"\n\t\t\"[-S sockets] [-t chrootdir]\\n\"\n\t\t\"             [-u username] [-U listeners] \"\n\t\t\"[-m {usage|trace|record|size|mctx}]\\n\"\n\t\t\"usage: named [-v|-V]\\n\");\n}\n\nstatic void\nsave_command_line(int argc, char *argv[]) {\n\tint i;\n\tchar *src;\n\tchar *dst;\n\tchar *eob;\n\tconst char truncated[] = \"...\";\n\tbool quoted = false;\n\n\tdst = saved_command_line;\n\teob = saved_command_line + sizeof(saved_command_line);\n\n\tfor (i = 1; i < argc && dst < eob; i++) {\n\t\t*dst++ = ' ';\n\n\t\tsrc = argv[i];\n\t\twhile (*src != '\\0' && dst < eob) {\n\t\t\t/*\n\t\t\t * This won't perfectly produce a shell-independent\n\t\t\t * pastable command line in all circumstances, but\n\t\t\t * comes close, and for practical purposes will\n\t\t\t * nearly always be fine.\n\t\t\t */\n\t\t\tif (quoted || isalnum(*src & 0xff) ||\n\t\t\t    *src == ',' || *src == '-' || *src == '_' ||\n\t\t\t    *src == '.' || *src == '/') {\n\t\t\t\t*dst++ = *src++;\n\t\t\t\tquoted = false;\n\t\t\t} else {\n\t\t\t\t*dst++ = '\\\\';\n\t\t\t\tquoted = true;\n\t\t\t}\n\t\t}\n\t}\n\n\tINSIST(sizeof(saved_command_line) >= sizeof(truncated));\n\n\tif (dst == eob)\n\t\tstrcpy(eob - sizeof(truncated), truncated);\n\telse\n\t\t*dst = '\\0';\n}\n\nstatic int\nparse_int(char *arg, const char *desc) {\n\tchar *endp;\n\tint tmp;\n\tlong int ltmp;\n\n\tltmp = strtol(arg, &endp, 10);\n\ttmp = (int) ltmp;\n\tif (*endp != '\\0')\n\t\tnamed_main_earlyfatal(\"%s '%s' must be numeric\", desc, arg);\n\tif (tmp < 0 || tmp != ltmp)\n\t\tnamed_main_earlyfatal(\"%s '%s' out of range\", desc, arg);\n\treturn (tmp);\n}\n\nstatic struct flag_def {\n\tconst char *name;\n\tunsigned int value;\n\tbool negate;\n} mem_debug_flags[] = {\n\t{ \"none\", 0, false },\n\t{ \"trace\",  ISC_MEM_DEBUGTRACE, false },\n\t{ \"record\", ISC_MEM_DEBUGRECORD, false },\n\t{ \"usage\", ISC_MEM_DEBUGUSAGE, false },\n\t{ \"size\", ISC_MEM_DEBUGSIZE, false },\n\t{ \"mctx\", ISC_MEM_DEBUGCTX, false },\n\t{ NULL, 0, false }\n}, mem_context_flags[] = {\n\t{ \"external\", ISC_MEMFLAG_INTERNAL, true },\n\t{ \"fill\", ISC_MEMFLAG_FILL, false },\n\t{ \"nofill\", ISC_MEMFLAG_FILL, true },\n\t{ NULL, 0, false }\n};\n\nstatic void\nset_flags(const char *arg, struct flag_def *defs, unsigned int *ret) {\n\tbool clear = false;\n\n\tfor (;;) {\n\t\tconst struct flag_def *def;\n\t\tconst char *end = strchr(arg, ',');\n\t\tint arglen;\n\t\tif (end == NULL)\n\t\t\tend = arg + strlen(arg);\n\t\targlen = (int)(end - arg);\n\t\tfor (def = defs; def->name != NULL; def++) {\n\t\t\tif (arglen == (int)strlen(def->name) &&\n\t\t\t    memcmp(arg, def->name, arglen) == 0) {\n\t\t\t\tif (def->value == 0)\n\t\t\t\t\tclear = true;\n\t\t\t\tif (def->negate)\n\t\t\t\t\t*ret &= ~(def->value);\n\t\t\t\telse\n\t\t\t\t\t*ret |= def->value;\n\t\t\t\tgoto found;\n\t\t\t}\n\t\t}\n\t\tnamed_main_earlyfatal(\"unrecognized flag '%.*s'\", arglen, arg);\n\t found:\n\t\tif (clear || (*end == '\\0'))\n\t\t\tbreak;\n\t\targ = end + 1;\n\t}\n\n\tif (clear)\n\t\t*ret = 0;\n}\n\nstatic void\nprintversion(bool verbose) {\n\tchar rndcconf[PATH_MAX], *dot = NULL;\n\n\tprintf(\"%s %s%s%s <id:%s>\\n\",\n\t       named_g_product, named_g_version,\n\t       (*named_g_description != '\\0') ? \" \" : \"\",\n\t       named_g_description, named_g_srcid);\n\n\tif (!verbose) {\n\t\treturn;\n\t}\n\n\tprintf(\"running on %s\\n\", named_os_uname());\n\tprintf(\"built by %s with %s\\n\",\n\t       named_g_builder, named_g_configargs);\n#ifdef __clang__\n\tprintf(\"compiled by CLANG %s\\n\", __VERSION__);\n#else\n#if defined(__ICC) || defined(__INTEL_COMPILER)\n\tprintf(\"compiled by ICC %s\\n\", __VERSION__);\n#else\n#ifdef __GNUC__\n\tprintf(\"compiled by GCC %s\\n\", __VERSION__);\n#endif\n#endif\n#endif\n#ifdef _MSC_VER\n\tprintf(\"compiled by MSVC %d\\n\", _MSC_VER);\n#endif\n#ifdef __SUNPRO_C\n\tprintf(\"compiled by Solaris Studio %x\\n\", __SUNPRO_C);\n#endif\n\tprintf(\"compiled with OpenSSL version: %s\\n\",\n\t       OPENSSL_VERSION_TEXT);\n#if !defined(LIBRESSL_VERSION_NUMBER) && \\\nOPENSSL_VERSION_NUMBER >= 0x10100000L /* 1.1.0 or higher */\n\tprintf(\"linked to OpenSSL version: %s\\n\",\n\t       OpenSSL_version(OPENSSL_VERSION));\n\n#else\n\tprintf(\"linked to OpenSSL version: %s\\n\",\n\t       SSLeay_version(SSLEAY_VERSION));\n#endif /* OPENSSL_VERSION_NUMBER >= 0x10100000L */\n#ifdef HAVE_LIBXML2\n\tprintf(\"compiled with libxml2 version: %s\\n\",\n\t       LIBXML_DOTTED_VERSION);\n\tprintf(\"linked to libxml2 version: %s\\n\",\n\t       xmlParserVersion);\n#endif\n#if defined(HAVE_JSON) && defined(JSON_C_VERSION)\n\tprintf(\"compiled with libjson-c version: %s\\n\",\n\t       JSON_C_VERSION);\n\tprintf(\"linked to libjson-c version: %s\\n\",\n\t       json_c_version());\n#endif\n#if defined(HAVE_ZLIB) && defined(ZLIB_VERSION)\n\tprintf(\"compiled with zlib version: %s\\n\",\n\t       ZLIB_VERSION);\n\tprintf(\"linked to zlib version: %s\\n\",\n\t       zlibVersion());\n#endif\n\tprintf(\"threads support is enabled\\n\\n\");\n\n\n\t/*\n\t * The default rndc.conf and rndc.key paths are in the same\n\t * directory, but named only has rndc.key defined internally.\n\t * We construct the rndc.conf path from it. (We could use\n\t * NAMED_SYSCONFDIR here but the result would look wrong on\n\t * Windows.)\n\t */\n\tstrlcpy(rndcconf, named_g_keyfile, sizeof(rndcconf));\n\tdot = strrchr(rndcconf, '.');\n\tif (dot != NULL) {\n\t\tsize_t len = dot - rndcconf + 1;\n\t\tsnprintf(dot + 1, PATH_MAX - len, \"conf\");\n\t}\n\n\t/*\n\t * Print default configuration paths.\n\t */\n\tprintf(\"default paths:\\n\");\n\tprintf(\"  named configuration:  %s\\n\", named_g_conffile);\n\tprintf(\"  rndc configuration:   %s\\n\", rndcconf);\n\tprintf(\"  DNSSEC root key:      %s\\n\", named_g_defaultbindkeys);\n\tprintf(\"  nsupdate session key: %s\\n\", named_g_defaultsessionkeyfile);\n\tprintf(\"  named PID file:       %s\\n\", named_g_defaultpidfile);\n\tprintf(\"  named lock file:      %s\\n\", named_g_defaultlockfile);\n\n}\n\nstatic void\nparse_fuzz_arg(void) {\n\tif (!strncmp(isc_commandline_argument, \"client:\", 7)) {\n\t\tnamed_g_fuzz_addr = isc_commandline_argument + 7;\n\t\tnamed_g_fuzz_type = isc_fuzz_client;\n\t} else if (!strncmp(isc_commandline_argument, \"tcp:\", 4)) {\n\t\tnamed_g_fuzz_addr = isc_commandline_argument + 4;\n\t\tnamed_g_fuzz_type = isc_fuzz_tcpclient;\n\t} else if (!strncmp(isc_commandline_argument, \"resolver:\", 9)) {\n\t\tnamed_g_fuzz_addr = isc_commandline_argument + 9;\n\t\tnamed_g_fuzz_type = isc_fuzz_resolver;\n\t} else if (!strncmp(isc_commandline_argument, \"http:\", 5)) {\n\t\tnamed_g_fuzz_addr = isc_commandline_argument + 5;\n\t\tnamed_g_fuzz_type = isc_fuzz_http;\n\t} else if (!strncmp(isc_commandline_argument, \"rndc:\", 5)) {\n\t\tnamed_g_fuzz_addr = isc_commandline_argument + 5;\n\t\tnamed_g_fuzz_type = isc_fuzz_rndc;\n\t} else {\n\t\tnamed_main_earlyfatal(\"unknown fuzzing type '%s'\",\n\t\t\t\t   isc_commandline_argument);\n\t}\n}\n\nstatic void\nparse_T_opt(char *option) {\n\tconst char *p;\n\tchar *last = NULL;\n\t/*\n\t * force the server to behave (or misbehave) in\n\t * specified ways for testing purposes.\n\t *\n\t * clienttest: make clients single shot with their\n\t * \t       own memory context.\n\t * delay=xxxx: delay client responses by xxxx ms to\n\t *\t       simulate remote servers.\n\t * dscp=x:     check that dscp values are as\n\t * \t       expected and assert otherwise.\n\t */\n\tif (!strcmp(option, \"clienttest\")) {\n\t\tclienttest = true;\n\t} else if (!strncmp(option, \"delay=\", 6)) {\n\t\tdelay = atoi(option + 6);\n\t} else if (!strcmp(option, \"dropedns\")) {\n\t\tdropedns = true;\n\t} else if (!strncmp(option, \"dscp=\", 5)) {\n\t\tisc_dscp_check_value = atoi(option + 5);\n\t} else if (!strcmp(option, \"ednsformerr\")) {\n\t\tednsformerr = true;\n\t} else if (!strcmp(option, \"ednsnotimp\")) {\n\t\tednsnotimp = true;\n\t} else if (!strcmp(option, \"ednsrefused\")) {\n\t\tednsrefused = true;\n\t} else if (!strcmp(option, \"fixedlocal\")) {\n\t\tfixedlocal = true;\n\t} else if (!strcmp(option, \"keepstderr\")) {\n\t\tnamed_g_keepstderr = true;\n\t} else if (!strcmp(option, \"noaa\")) {\n\t\tnoaa = true;\n\t} else if (!strcmp(option, \"noedns\")) {\n\t\tnoedns = true;\n\t} else if (!strcmp(option, \"nonearest\")) {\n\t\tnonearest = true;\n\t} else if (!strcmp(option, \"nosoa\")) {\n\t\tnosoa = true;\n\t} else if (!strcmp(option, \"nosyslog\")) {\n\t\tnamed_g_nosyslog = true;\n\t} else if (!strcmp(option, \"notcp\")) {\n\t\tnotcp = true;\n\t} else if (!strcmp(option, \"maxudp512\")) {\n\t\tmaxudp = 512;\n\t} else if (!strcmp(option, \"maxudp1460\")) {\n\t\tmaxudp = 1460;\n\t} else if (!strncmp(option, \"maxudp=\", 7)) {\n\t\tmaxudp = atoi(option + 7);\n\t\tif (maxudp <= 0) {\n\t\t\tnamed_main_earlyfatal(\"bad maxudp\");\n\t\t}\n\t} else if (!strncmp(option, \"mkeytimers=\", 11)) {\n\t\tp = strtok_r(option + 11, \"/\", &last);\n\t\tif (p == NULL) {\n\t\t\tnamed_main_earlyfatal(\"bad mkeytimer\");\n\t\t}\n\n\t\tdns_zone_mkey_hour = atoi(p);\n\t\tif (dns_zone_mkey_hour == 0) {\n\t\t\tnamed_main_earlyfatal(\"bad mkeytimer\");\n\t\t}\n\n\t\tp = strtok_r(NULL, \"/\", &last);\n\t\tif (p == NULL) {\n\t\t\tdns_zone_mkey_day = (24 * dns_zone_mkey_hour);\n\t\t\tdns_zone_mkey_month = (30 * dns_zone_mkey_day);\n\t\t\treturn;\n\t\t}\n\n\t\tdns_zone_mkey_day = atoi(p);\n\t\tif (dns_zone_mkey_day < dns_zone_mkey_hour)\n\t\t\tnamed_main_earlyfatal(\"bad mkeytimer\");\n\n\t\tp = strtok_r(NULL, \"/\", &last);\n\t\tif (p == NULL) {\n\t\t\tdns_zone_mkey_month = (30 * dns_zone_mkey_day);\n\t\t\treturn;\n\t\t}\n\n\t\tdns_zone_mkey_month = atoi(p);\n\t\tif (dns_zone_mkey_month < dns_zone_mkey_day) {\n\t\t\tnamed_main_earlyfatal(\"bad mkeytimer\");\n\t\t}\n\t} else if (!strcmp(option, \"sigvalinsecs\")) {\n\t\tsigvalinsecs = true;\n\t} else if (!strncmp(option, \"tat=\", 4)) {\n\t\tnamed_g_tat_interval = atoi(option + 4);\n\t} else {\n\t\tfprintf(stderr, \"unknown -T flag '%s'\\n\", option);\n\t}\n}\n\nstatic void\nparse_command_line(int argc, char *argv[]) {\n\tint ch;\n\tint port;\n\tconst char *p;\n\n\tsave_command_line(argc, argv);\n\n\t/*\n\t * NAMED_MAIN_ARGS is defined in main.h, so that it can be used\n\t * both by named and by ntservice hooks.\n\t */\n\tisc_commandline_errprint = false;\n\twhile ((ch = isc_commandline_parse(argc, argv,\n\t\t\t\t\t   NAMED_MAIN_ARGS)) != -1)\n\t{\n\t\tswitch (ch) {\n\t\tcase '4':\n\t\t\tif (disable4)\n\t\t\t\tnamed_main_earlyfatal(\"cannot specify \"\n\t\t\t\t\t\t      \"-4 and -6\");\n\t\t\tif (isc_net_probeipv4() != ISC_R_SUCCESS)\n\t\t\t\tnamed_main_earlyfatal(\"IPv4 not supported \"\n\t\t\t\t\t\t      \"by OS\");\n\t\t\tisc_net_disableipv6();\n\t\t\tdisable6 = true;\n\t\t\tbreak;\n\t\tcase '6':\n\t\t\tif (disable6)\n\t\t\t\tnamed_main_earlyfatal(\"cannot specify \"\n\t\t\t\t\t\t      \"-4 and -6\");\n\t\t\tif (isc_net_probeipv6() != ISC_R_SUCCESS)\n\t\t\t\tnamed_main_earlyfatal(\"IPv6 not supported \"\n\t\t\t\t\t\t      \"by OS\");\n\t\t\tisc_net_disableipv4();\n\t\t\tdisable4 = true;\n\t\t\tbreak;\n\t\tcase 'A':\n\t\t\tparse_fuzz_arg();\n\t\t\tbreak;\n\t\tcase 'c':\n\t\t\tnamed_g_conffile = isc_commandline_argument;\n\t\t\tnamed_g_conffileset = true;\n\t\t\tbreak;\n\t\tcase 'd':\n\t\t\tnamed_g_debuglevel = parse_int(isc_commandline_argument,\n\t\t\t\t\t\t       \"debug level\");\n\t\t\tbreak;\n\t\tcase 'D':\n\t\t\t/* Descriptive comment for 'ps'. */\n\t\t\tbreak;\n\t\tcase 'E':\n\t\t\tnamed_g_engine = isc_commandline_argument;\n\t\t\tbreak;\n\t\tcase 'f':\n\t\t\tnamed_g_foreground = true;\n\t\t\tbreak;\n\t\tcase 'g':\n\t\t\tnamed_g_foreground = true;\n\t\t\tnamed_g_logstderr = true;\n\t\t\tbreak;\n\t\tcase 'L':\n\t\t\tnamed_g_logfile = isc_commandline_argument;\n\t\t\tbreak;\n\t\tcase 'M':\n\t\t\tset_flags(isc_commandline_argument, mem_context_flags,\n\t\t\t\t  &isc_mem_defaultflags);\n\t\t\tbreak;\n\t\tcase 'm':\n\t\t\tset_flags(isc_commandline_argument, mem_debug_flags,\n\t\t\t\t  &isc_mem_debugging);\n\t\t\tbreak;\n\t\tcase 'N': /* Deprecated. */\n\t\tcase 'n':\n\t\t\tnamed_g_cpus = parse_int(isc_commandline_argument,\n\t\t\t\t\t      \"number of cpus\");\n\t\t\tif (named_g_cpus == 0)\n\t\t\t\tnamed_g_cpus = 1;\n\t\t\tbreak;\n\t\tcase 'p':\n\t\t\tport = parse_int(isc_commandline_argument, \"port\");\n\t\t\tif (port < 1 || port > 65535)\n\t\t\t\tnamed_main_earlyfatal(\"port '%s' out of range\",\n\t\t\t\t\t\t   isc_commandline_argument);\n\t\t\tnamed_g_port = port;\n\t\t\tbreak;\n\t\tcase 's':\n\t\t\t/* XXXRTH temporary syntax */\n\t\t\twant_stats = true;\n\t\t\tbreak;\n\t\tcase 'S':\n\t\t\tmaxsocks = parse_int(isc_commandline_argument,\n\t\t\t\t\t     \"max number of sockets\");\n\t\t\tbreak;\n\t\tcase 't':\n\t\t\t/* XXXJAB should we make a copy? */\n\t\t\tnamed_g_chrootdir = isc_commandline_argument;\n\t\t\tbreak;\n\t\tcase 'T':\t/* NOT DOCUMENTED */\n\t\t\tparse_T_opt(isc_commandline_argument);\n\t\t\tbreak;\n\t\tcase 'U':\n\t\t\tnamed_g_udpdisp = parse_int(isc_commandline_argument,\n\t\t\t\t\t\t    \"number of UDP listeners \"\n\t\t\t\t\t\t    \"per interface\");\n\t\t\tbreak;\n\t\tcase 'u':\n\t\t\tnamed_g_username = isc_commandline_argument;\n\t\t\tbreak;\n\t\tcase 'v':\n\t\t\tprintversion(false);\n\t\t\texit(0);\n\t\tcase 'V':\n\t\t\tprintversion(true);\n\t\t\texit(0);\n\t\tcase 'x':\n\t\t\t/* Obsolete. No longer in use. Ignore. */\n\t\t\tbreak;\n\t\tcase 'X':\n\t\t\tnamed_g_forcelock = true;\n\t\t\tif (strcasecmp(isc_commandline_argument, \"none\") != 0)\n\t\t\t\tnamed_g_defaultlockfile =\n\t\t\t\t\tisc_commandline_argument;\n\t\t\telse\n\t\t\t\tnamed_g_defaultlockfile = NULL;\n\t\t\tbreak;\n\t\tcase 'F':\n\t\t\t/* Reserved for FIPS mode */\n\t\t\t/* FALLTHROUGH */\n\t\tcase '?':\n\t\t\tusage();\n\t\t\tif (isc_commandline_option == '?')\n\t\t\t\texit(0);\n\t\t\tp = strchr(NAMED_MAIN_ARGS, isc_commandline_option);\n\t\t\tif (p == NULL || *++p != ':')\n\t\t\t\tnamed_main_earlyfatal(\"unknown option '-%c'\",\n\t\t\t\t\t\t   isc_commandline_option);\n\t\t\telse\n\t\t\t\tnamed_main_earlyfatal(\"option '-%c' requires \"\n\t\t\t\t\t\t   \"an argument\",\n\t\t\t\t\t\t   isc_commandline_option);\n\t\t\t/* FALLTHROUGH */\n\t\tdefault:\n\t\t\tnamed_main_earlyfatal(\"parsing options returned %d\",\n\t\t\t\t\t      ch);\n\t\t}\n\t}\n\n\targc -= isc_commandline_index;\n\targv += isc_commandline_index;\n\tPOST(argv);\n\n\tif (argc > 0) {\n\t\tusage();\n\t\tnamed_main_earlyfatal(\"extra command line arguments\");\n\t}\n}\n\nstatic isc_result_t\ncreate_managers(void) {\n\tisc_result_t result;\n\tunsigned int socks;\n\n\tINSIST(named_g_cpus_detected > 0);\n\n\tif (named_g_cpus == 0)\n\t\tnamed_g_cpus = named_g_cpus_detected;\n\tisc_log_write(named_g_lctx, NAMED_LOGCATEGORY_GENERAL,\n\t\t      NAMED_LOGMODULE_SERVER, ISC_LOG_INFO,\n\t\t      \"found %u CPU%s, using %u worker thread%s\",\n\t\t      named_g_cpus_detected,\n\t\t      named_g_cpus_detected == 1 ? \"\" : \"s\",\n\t\t      named_g_cpus, named_g_cpus == 1 ? \"\" : \"s\");\n#ifdef WIN32\n\tnamed_g_udpdisp = 1;\n#else\n\tif (named_g_udpdisp == 0) {\n\t\tnamed_g_udpdisp = named_g_cpus_detected;\n\t}\n\tif (named_g_udpdisp > named_g_cpus)\n\t\tnamed_g_udpdisp = named_g_cpus;\n#endif\n\tisc_log_write(named_g_lctx, NAMED_LOGCATEGORY_GENERAL,\n\t\t      NAMED_LOGMODULE_SERVER, ISC_LOG_INFO,\n\t\t      \"using %u UDP listener%s per interface\",\n\t\t      named_g_udpdisp, named_g_udpdisp == 1 ? \"\" : \"s\");\n\n\tresult = isc_taskmgr_create(named_g_mctx, named_g_cpus, 0,\n\t\t\t\t    &named_g_taskmgr);\n\tif (result != ISC_R_SUCCESS) {\n\t\tUNEXPECTED_ERROR(__FILE__, __LINE__,\n\t\t\t\t \"isc_taskmgr_create() failed: %s\",\n\t\t\t\t isc_result_totext(result));\n\t\treturn (ISC_R_UNEXPECTED);\n\t}\n\n\tresult = isc_timermgr_create(named_g_mctx, &named_g_timermgr);\n\tif (result != ISC_R_SUCCESS) {\n\t\tUNEXPECTED_ERROR(__FILE__, __LINE__,\n\t\t\t\t \"isc_timermgr_create() failed: %s\",\n\t\t\t\t isc_result_totext(result));\n\t\treturn (ISC_R_UNEXPECTED);\n\t}\n\n\tresult = isc_socketmgr_create2(named_g_mctx, &named_g_socketmgr,\n\t\t\t\t       maxsocks, named_g_cpus);\n\tif (result != ISC_R_SUCCESS) {\n\t\tUNEXPECTED_ERROR(__FILE__, __LINE__,\n\t\t\t\t \"isc_socketmgr_create() failed: %s\",\n\t\t\t\t isc_result_totext(result));\n\t\treturn (ISC_R_UNEXPECTED);\n\t}\n\tisc_socketmgr_maxudp(named_g_socketmgr, maxudp);\n\tresult = isc_socketmgr_getmaxsockets(named_g_socketmgr, &socks);\n\tif (result == ISC_R_SUCCESS) {\n\t\tisc_log_write(named_g_lctx, NAMED_LOGCATEGORY_GENERAL,\n\t\t\t      NAMED_LOGMODULE_SERVER,\n\t\t\t      ISC_LOG_INFO, \"using up to %u sockets\", socks);\n\t}\n\n\treturn (ISC_R_SUCCESS);\n}\n\nstatic void\ndestroy_managers(void) {\n\t/*\n\t * isc_taskmgr_destroy() will block until all tasks have exited,\n\t */\n\tisc_taskmgr_destroy(&named_g_taskmgr);\n\tisc_timermgr_destroy(&named_g_timermgr);\n\tisc_socketmgr_destroy(&named_g_socketmgr);\n}\n\nstatic void\ndump_symboltable(void) {\n\tint i;\n\tisc_result_t result;\n\tconst char *fname;\n\tconst void *addr;\n\n\tif (isc__backtrace_nsymbols == 0)\n\t\treturn;\n\n\tif (!isc_log_wouldlog(named_g_lctx, ISC_LOG_DEBUG(99)))\n\t\treturn;\n\n\tisc_log_write(named_g_lctx, NAMED_LOGCATEGORY_GENERAL,\n\t\t      NAMED_LOGMODULE_MAIN, ISC_LOG_DEBUG(99),\n\t\t      \"Symbol table:\");\n\n\tfor (i = 0, result = ISC_R_SUCCESS; result == ISC_R_SUCCESS; i++) {\n\t\taddr = NULL;\n\t\tfname = NULL;\n\t\tresult = isc_backtrace_getsymbolfromindex(i, &addr, &fname);\n\t\tif (result == ISC_R_SUCCESS) {\n\t\t\tisc_log_write(named_g_lctx, NAMED_LOGCATEGORY_GENERAL,\n\t\t\t\t      NAMED_LOGMODULE_MAIN, ISC_LOG_DEBUG(99),\n\t\t\t\t      \"[%d] %p %s\", i, addr, fname);\n\t\t}\n\t}\n}\n\nstatic void\nsetup(void) {\n\tisc_result_t result;\n\tisc_resourcevalue_t old_openfiles;\n\tns_server_t *sctx;\n#ifdef HAVE_LIBSCF\n\tchar *instance = NULL;\n#endif\n\n\t/*\n\t * Get the user and group information before changing the root\n\t * directory, so the administrator does not need to keep a copy\n\t * of the user and group databases in the chroot'ed environment.\n\t */\n\tnamed_os_inituserinfo(named_g_username);\n\n\t/*\n\t * Initialize time conversion information\n\t */\n\tnamed_os_tzset();\n\n\tnamed_os_opendevnull();\n\n#ifdef HAVE_LIBSCF\n\t/* Check if named is under smf control, before chroot. */\n\tresult = named_smf_get_instance(&instance, 0, named_g_mctx);\n\t/* We don't care about instance, just check if we got one. */\n\tif (result == ISC_R_SUCCESS)\n\t\tnamed_smf_got_instance = 1;\n\telse\n\t\tnamed_smf_got_instance = 0;\n\tif (instance != NULL)\n\t\tisc_mem_free(named_g_mctx, instance);\n#endif /* HAVE_LIBSCF */\n\n\t/*\n\t * Check for the number of cpu's before named_os_chroot().\n\t */\n\tnamed_g_cpus_detected = isc_os_ncpus();\n\n\tnamed_os_chroot(named_g_chrootdir);\n\n\t/*\n\t * For operating systems which have a capability mechanism, now\n\t * is the time to switch to minimal privs and change our user id.\n\t * On traditional UNIX systems, this call will be a no-op, and we\n\t * will change the user ID after reading the config file the first\n\t * time.  (We need to read the config file to know which possibly\n\t * privileged ports to bind() to.)\n\t */\n\tnamed_os_minprivs();\n\n\tresult = named_log_init(named_g_username != NULL);\n\tif (result != ISC_R_SUCCESS)\n\t\tnamed_main_earlyfatal(\"named_log_init() failed: %s\",\n\t\t\t\t   isc_result_totext(result));\n\n\t/*\n\t * Now is the time to daemonize (if we're not running in the\n\t * foreground).  We waited until now because we wanted to get\n\t * a valid logging context setup.  We cannot daemonize any later,\n\t * because calling create_managers() will create threads, which\n\t * would be lost after fork().\n\t */\n\tif (!named_g_foreground)\n\t\tnamed_os_daemonize();\n\n\t/*\n\t * We call isc_app_start() here as some versions of FreeBSD's fork()\n\t * destroys all the signal handling it sets up.\n\t */\n\tresult = isc_app_start();\n\tif (result != ISC_R_SUCCESS)\n\t\tnamed_main_earlyfatal(\"isc_app_start() failed: %s\",\n\t\t\t\t   isc_result_totext(result));\n\n\tisc_log_write(named_g_lctx, NAMED_LOGCATEGORY_GENERAL,\n\t\t      NAMED_LOGMODULE_MAIN, ISC_LOG_NOTICE,\n\t\t      \"starting %s %s%s%s <id:%s>\",\n\t\t      named_g_product, named_g_version,\n\t\t      *named_g_description ? \" \" : \"\", named_g_description,\n\t\t      named_g_srcid);\n\n\tisc_log_write(named_g_lctx, NAMED_LOGCATEGORY_GENERAL,\n\t\t      NAMED_LOGMODULE_MAIN, ISC_LOG_NOTICE,\n\t\t      \"running on %s\", named_os_uname());\n\n\tisc_log_write(named_g_lctx, NAMED_LOGCATEGORY_GENERAL,\n\t\t      NAMED_LOGMODULE_MAIN, ISC_LOG_NOTICE,\n\t\t      \"built with %s\", named_g_configargs);\n\n\tisc_log_write(named_g_lctx, NAMED_LOGCATEGORY_GENERAL,\n\t\t      NAMED_LOGMODULE_MAIN, ISC_LOG_NOTICE,\n\t\t      \"running as: %s%s\",\n\t\t      program_name, saved_command_line);\n#ifdef __clang__\n\tisc_log_write(named_g_lctx, NAMED_LOGCATEGORY_GENERAL,\n\t\t      NAMED_LOGMODULE_MAIN, ISC_LOG_NOTICE,\n\t\t      \"compiled by CLANG %s\", __VERSION__);\n#else\n#if defined(__ICC) || defined(__INTEL_COMPILER)\n\tisc_log_write(named_g_lctx, NAMED_LOGCATEGORY_GENERAL,\n\t\t      NAMED_LOGMODULE_MAIN, ISC_LOG_NOTICE,\n\t\t      \"compiled by ICC %s\", __VERSION__);\n#else\n#ifdef __GNUC__\n\tisc_log_write(named_g_lctx, NAMED_LOGCATEGORY_GENERAL,\n\t\t      NAMED_LOGMODULE_MAIN, ISC_LOG_NOTICE,\n\t\t      \"compiled by GCC %s\", __VERSION__);\n#endif\n#endif\n#endif\n#ifdef _MSC_VER\n\tisc_log_write(named_g_lctx, NAMED_LOGCATEGORY_GENERAL,\n\t\t      NAMED_LOGMODULE_MAIN, ISC_LOG_NOTICE,\n\t\t      \"compiled by MSVC %d\", _MSC_VER);\n#endif\n#ifdef __SUNPRO_C\n\tisc_log_write(named_g_lctx, NAMED_LOGCATEGORY_GENERAL,\n\t\t      NAMED_LOGMODULE_MAIN, ISC_LOG_NOTICE,\n\t\t      \"compiled by Solaris Studio %x\", __SUNPRO_C);\n#endif\n\tisc_log_write(named_g_lctx, NAMED_LOGCATEGORY_GENERAL,\n\t\t      NAMED_LOGMODULE_MAIN, ISC_LOG_NOTICE,\n\t\t      \"compiled with OpenSSL version: %s\",\n\t\t      OPENSSL_VERSION_TEXT);\n#if !defined(LIBRESSL_VERSION_NUMBER) && \\\n    OPENSSL_VERSION_NUMBER >= 0x10100000L /* 1.1.0 or higher */\n\tisc_log_write(named_g_lctx, NAMED_LOGCATEGORY_GENERAL,\n\t\t      NAMED_LOGMODULE_MAIN, ISC_LOG_NOTICE,\n\t\t      \"linked to OpenSSL version: %s\",\n\t\t      OpenSSL_version(OPENSSL_VERSION));\n#else\n\tisc_log_write(named_g_lctx, NAMED_LOGCATEGORY_GENERAL,\n\t\t      NAMED_LOGMODULE_MAIN, ISC_LOG_NOTICE,\n\t\t      \"linked to OpenSSL version: %s\",\n\t\t      SSLeay_version(SSLEAY_VERSION));\n#endif /* OPENSSL_VERSION_NUMBER >= 0x10100000L */\n#ifdef HAVE_LIBXML2\n\tisc_log_write(named_g_lctx, NAMED_LOGCATEGORY_GENERAL,\n\t\t      NAMED_LOGMODULE_MAIN, ISC_LOG_NOTICE,\n\t\t      \"compiled with libxml2 version: %s\",\n\t\t      LIBXML_DOTTED_VERSION);\n\tisc_log_write(named_g_lctx, NAMED_LOGCATEGORY_GENERAL,\n\t\t      NAMED_LOGMODULE_MAIN, ISC_LOG_NOTICE,\n\t\t      \"linked to libxml2 version: %s\", xmlParserVersion);\n#endif\n#if defined(HAVE_JSON) && defined(JSON_C_VERSION)\n\tisc_log_write(named_g_lctx, NAMED_LOGCATEGORY_GENERAL,\n\t\t      NAMED_LOGMODULE_MAIN, ISC_LOG_NOTICE,\n\t\t      \"compiled with libjson-c version: %s\", JSON_C_VERSION);\n\tisc_log_write(named_g_lctx, NAMED_LOGCATEGORY_GENERAL,\n\t\t      NAMED_LOGMODULE_MAIN, ISC_LOG_NOTICE,\n\t\t      \"linked to libjson-c version: %s\", json_c_version());\n#endif\n#if defined(HAVE_ZLIB) && defined(ZLIB_VERSION)\n\tisc_log_write(named_g_lctx, NAMED_LOGCATEGORY_GENERAL,\n\t\t      NAMED_LOGMODULE_MAIN, ISC_LOG_NOTICE,\n\t\t      \"compiled with zlib version: %s\", ZLIB_VERSION);\n\tisc_log_write(named_g_lctx, NAMED_LOGCATEGORY_GENERAL,\n\t\t      NAMED_LOGMODULE_MAIN, ISC_LOG_NOTICE,\n\t\t      \"linked to zlib version: %s\", zlibVersion());\n#endif\n\tisc_log_write(named_g_lctx, NAMED_LOGCATEGORY_GENERAL,\n\t\t      NAMED_LOGMODULE_MAIN, ISC_LOG_NOTICE,\n\t\t      \"----------------------------------------------------\");\n\tisc_log_write(named_g_lctx, NAMED_LOGCATEGORY_GENERAL,\n\t\t      NAMED_LOGMODULE_MAIN, ISC_LOG_NOTICE,\n\t\t      \"BIND 9 is maintained by Internet Systems Consortium,\");\n\tisc_log_write(named_g_lctx, NAMED_LOGCATEGORY_GENERAL,\n\t\t      NAMED_LOGMODULE_MAIN, ISC_LOG_NOTICE,\n\t\t      \"Inc. (ISC), a non-profit 501(c)(3) public-benefit \");\n\tisc_log_write(named_g_lctx, NAMED_LOGCATEGORY_GENERAL,\n\t\t      NAMED_LOGMODULE_MAIN, ISC_LOG_NOTICE,\n\t\t      \"corporation.  Support and training for BIND 9 are \");\n\tisc_log_write(named_g_lctx, NAMED_LOGCATEGORY_GENERAL,\n\t\t      NAMED_LOGMODULE_MAIN, ISC_LOG_NOTICE,\n\t\t      \"available at https://www.isc.org/support\");\n\tisc_log_write(named_g_lctx, NAMED_LOGCATEGORY_GENERAL,\n\t\t      NAMED_LOGMODULE_MAIN, ISC_LOG_NOTICE,\n\t\t      \"----------------------------------------------------\");\n\n\tdump_symboltable();\n\n\t/*\n\t * Get the initial resource limits.\n\t */\n#ifndef WIN32\n\tRUNTIME_CHECK(isc_resource_getlimit(isc_resource_stacksize,\n\t\t\t\t\t    &named_g_initstacksize)\n\t\t      == ISC_R_SUCCESS);\n\tRUNTIME_CHECK(isc_resource_getlimit(isc_resource_datasize,\n\t\t\t\t\t    &named_g_initdatasize)\n\t\t      == ISC_R_SUCCESS);\n\tRUNTIME_CHECK(isc_resource_getlimit(isc_resource_coresize,\n\t\t\t\t\t    &named_g_initcoresize)\n\t\t      == ISC_R_SUCCESS);\n#endif\n\tRUNTIME_CHECK(isc_resource_getlimit(isc_resource_openfiles,\n\t\t\t\t\t    &named_g_initopenfiles)\n\t\t      == ISC_R_SUCCESS);\n\n\t/*\n\t * System resources cannot effectively be tuned on some systems.\n\t * Raise the limit in such cases for safety.\n\t */\n\told_openfiles = named_g_initopenfiles;\n\tnamed_os_adjustnofile();\n\tRUNTIME_CHECK(isc_resource_getlimit(isc_resource_openfiles,\n\t\t\t\t\t    &named_g_initopenfiles)\n\t\t      == ISC_R_SUCCESS);\n\tif (old_openfiles != named_g_initopenfiles) {\n\t\tisc_log_write(named_g_lctx, NAMED_LOGCATEGORY_GENERAL,\n\t\t\t      NAMED_LOGMODULE_MAIN, ISC_LOG_NOTICE,\n\t\t\t      \"adjusted limit on open files from \"\n\t\t\t      \"%\" PRIu64 \" to \"\n\t\t\t      \"%\" PRIu64,\n\t\t\t      old_openfiles, named_g_initopenfiles);\n\t}\n\n\t/*\n\t * If the named configuration filename is relative, prepend the current\n\t * directory's name before possibly changing to another directory.\n\t */\n\tif (! isc_file_isabsolute(named_g_conffile)) {\n\t\tresult = isc_file_absolutepath(named_g_conffile,\n\t\t\t\t\t       absolute_conffile,\n\t\t\t\t\t       sizeof(absolute_conffile));\n\t\tif (result != ISC_R_SUCCESS)\n\t\t\tnamed_main_earlyfatal(\"could not construct \"\n\t\t\t\t\t      \"absolute path \"\n\t\t\t\t\t      \"of configuration file: %s\",\n\t\t\t\t\t      isc_result_totext(result));\n\t\tnamed_g_conffile = absolute_conffile;\n\t}\n\n\t/*\n\t * Record the server's startup time.\n\t */\n\tresult = isc_time_now(&named_g_boottime);\n\tif (result != ISC_R_SUCCESS)\n\t\tnamed_main_earlyfatal(\"isc_time_now() failed: %s\",\n\t\t\t\t   isc_result_totext(result));\n\n\tresult = create_managers();\n\tif (result != ISC_R_SUCCESS)\n\t\tnamed_main_earlyfatal(\"create_managers() failed: %s\",\n\t\t\t\t   isc_result_totext(result));\n\n\tnamed_builtin_init();\n\n\t/*\n\t * Add calls to register sdb drivers here.\n\t */\n\t/* xxdb_init(); */\n\n#ifdef ISC_DLZ_DLOPEN\n\t/*\n\t * Register the DLZ \"dlopen\" driver.\n\t */\n\tresult = dlz_dlopen_init(named_g_mctx);\n\tif (result != ISC_R_SUCCESS)\n\t\tnamed_main_earlyfatal(\"dlz_dlopen_init() failed: %s\",\n\t\t\t\t   isc_result_totext(result));\n#endif\n\n#if CONTRIB_DLZ\n\t/*\n\t * Register any other contributed DLZ drivers.\n\t */\n\tresult = dlz_drivers_init();\n\tif (result != ISC_R_SUCCESS)\n\t\tnamed_main_earlyfatal(\"dlz_drivers_init() failed: %s\",\n\t\t\t\t   isc_result_totext(result));\n#endif\n\n\tnamed_server_create(named_g_mctx, &named_g_server);\n\tsctx = named_g_server->sctx;\n\n\t/*\n\t * Modify server context according to command line options\n\t */\n\tif (clienttest)\n\t\tns_server_setoption(sctx, NS_SERVER_CLIENTTEST, true);\n\tif (disable4)\n\t\tns_server_setoption(sctx, NS_SERVER_DISABLE4, true);\n\tif (disable6)\n\t\tns_server_setoption(sctx, NS_SERVER_DISABLE6, true);\n\tif (dropedns)\n\t\tns_server_setoption(sctx, NS_SERVER_DROPEDNS, true);\n\tif (ednsformerr)\t/* STD13 server */\n\t\tns_server_setoption(sctx, NS_SERVER_EDNSFORMERR, true);\n\tif (ednsnotimp)\n\t\tns_server_setoption(sctx, NS_SERVER_EDNSNOTIMP, true);\n\tif (ednsrefused)\n\t\tns_server_setoption(sctx, NS_SERVER_EDNSREFUSED, true);\n\tif (fixedlocal)\n\t\tns_server_setoption(sctx, NS_SERVER_FIXEDLOCAL, true);\n\tif (noaa)\n\t\tns_server_setoption(sctx, NS_SERVER_NOAA, true);\n\tif (noedns)\n\t\tns_server_setoption(sctx, NS_SERVER_NOEDNS, true);\n\tif (nonearest)\n\t\tns_server_setoption(sctx, NS_SERVER_NONEAREST, true);\n\tif (nosoa)\n\t\tns_server_setoption(sctx, NS_SERVER_NOSOA, true);\n\tif (notcp)\n\t\tns_server_setoption(sctx, NS_SERVER_NOTCP, true);\n\tif (sigvalinsecs)\n\t\tns_server_setoption(sctx, NS_SERVER_SIGVALINSECS, true);\n\n\tnamed_g_server->sctx->delay = delay;\n}\n\nstatic void\ncleanup(void) {\n\tdestroy_managers();\n\n\tif (named_g_mapped != NULL)\n\t\tdns_acl_detach(&named_g_mapped);\n\n\tnamed_server_destroy(&named_g_server);\n\n\tnamed_builtin_deinit();\n\n\t/*\n\t * Add calls to unregister sdb drivers here.\n\t */\n\t/* xxdb_clear(); */\n\n#ifdef CONTRIB_DLZ\n\t/*\n\t * Unregister contributed DLZ drivers.\n\t */\n\tdlz_drivers_clear();\n#endif\n#ifdef ISC_DLZ_DLOPEN\n\t/*\n\t * Unregister \"dlopen\" DLZ driver.\n\t */\n\tdlz_dlopen_clear();\n#endif\n\n\tdns_name_destroy();\n\n\tisc_log_write(named_g_lctx, NAMED_LOGCATEGORY_GENERAL,\n\t\t      NAMED_LOGMODULE_MAIN,\n\t\t      ISC_LOG_NOTICE, \"exiting\");\n\tnamed_log_shutdown();\n}\n\nstatic char *memstats = NULL;\n\nvoid\nnamed_main_setmemstats(const char *filename) {\n\t/*\n\t * Caller has to ensure locking.\n\t */\n\n\tif (memstats != NULL) {\n\t\tfree(memstats);\n\t\tmemstats = NULL;\n\t}\n\n\tif (filename == NULL)\n\t\treturn;\n\n\tmemstats = strdup(filename);\n}\n\n#ifdef HAVE_LIBSCF\n/*\n * Get FMRI for the named process.\n */\nisc_result_t\nnamed_smf_get_instance(char **ins_name, int debug, isc_mem_t *mctx) {\n\tscf_handle_t *h = NULL;\n\tint namelen;\n\tchar *instance;\n\n\tREQUIRE(ins_name != NULL && *ins_name == NULL);\n\n\tif ((h = scf_handle_create(SCF_VERSION)) == NULL) {\n\t\tif (debug)\n\t\t\tUNEXPECTED_ERROR(__FILE__, __LINE__,\n\t\t\t\t\t \"scf_handle_create() failed: %s\",\n\t\t\t\t\t scf_strerror(scf_error()));\n\t\treturn (ISC_R_FAILURE);\n\t}\n\n\tif (scf_handle_bind(h) == -1) {\n\t\tif (debug)\n\t\t\tUNEXPECTED_ERROR(__FILE__, __LINE__,\n\t\t\t\t\t \"scf_handle_bind() failed: %s\",\n\t\t\t\t\t scf_strerror(scf_error()));\n\t\tscf_handle_destroy(h);\n\t\treturn (ISC_R_FAILURE);\n\t}\n\n\tif ((namelen = scf_myname(h, NULL, 0)) == -1) {\n\t\tif (debug)\n\t\t\tUNEXPECTED_ERROR(__FILE__, __LINE__,\n\t\t\t\t\t \"scf_myname() failed: %s\",\n\t\t\t\t\t scf_strerror(scf_error()));\n\t\tscf_handle_destroy(h);\n\t\treturn (ISC_R_FAILURE);\n\t}\n\n\tif ((instance = isc_mem_allocate(mctx, namelen + 1)) == NULL) {\n\t\tUNEXPECTED_ERROR(__FILE__, __LINE__,\n\t\t\t\t \"named_smf_get_instance memory \"\n\t\t\t\t \"allocation failed: %s\",\n\t\t\t\t isc_result_totext(ISC_R_NOMEMORY));\n\t\tscf_handle_destroy(h);\n\t\treturn (ISC_R_FAILURE);\n\t}\n\n\tif (scf_myname(h, instance, namelen + 1) == -1) {\n\t\tif (debug)\n\t\t\tUNEXPECTED_ERROR(__FILE__, __LINE__,\n\t\t\t\t\t \"scf_myname() failed: %s\",\n\t\t\t\t\t scf_strerror(scf_error()));\n\t\tscf_handle_destroy(h);\n\t\tisc_mem_free(mctx, instance);\n\t\treturn (ISC_R_FAILURE);\n\t}\n\n\tscf_handle_destroy(h);\n\t*ins_name = instance;\n\treturn (ISC_R_SUCCESS);\n}\n#endif /* HAVE_LIBSCF */\n\n/* main entry point, possibly hooked */\n\nint\nmain(int argc, char *argv[]) {\n\tisc_result_t result;\n#ifdef HAVE_LIBSCF\n\tchar *instance = NULL;\n#endif\n\n#ifdef HAVE_GPERFTOOLS_PROFILER\n\t(void) ProfilerStart(NULL);\n#endif\n\n\t/*\n\t * Record version in core image.\n\t * strings named.core | grep \"named version:\"\n\t */\n\tstrlcat(version,\n#if defined(NO_VERSION_DATE) || !defined(__DATE__)\n\t\t\"named version: BIND \" VERSION \" <\" SRCID \">\",\n#else\n\t\t\"named version: BIND \" VERSION \" <\" SRCID \"> (\" __DATE__ \")\",\n#endif\n\t\tsizeof(version));\n\tresult = isc_file_progname(*argv, program_name, sizeof(program_name));\n\tif (result != ISC_R_SUCCESS)\n\t\tnamed_main_earlyfatal(\"program name too long\");\n\n\tisc_assertion_setcallback(assertion_failed);\n\tisc_error_setfatal(library_fatal_error);\n\tisc_error_setunexpected(library_unexpected_error);\n\n\tnamed_os_init(program_name);\n\n\tdns_result_register();\n\tdst_result_register();\n\tisccc_result_register();\n#if USE_PKCS11\n\tpk11_result_register();\n#endif\n\n#if !ISC_MEM_DEFAULTFILL\n\t/*\n\t * Update the default flags to remove ISC_MEMFLAG_FILL\n\t * before we parse the command line. If disabled here,\n\t * it can be turned back on with -M fill.\n\t */\n\tisc_mem_defaultflags &= ~ISC_MEMFLAG_FILL;\n#endif\n\n\tparse_command_line(argc, argv);\n\n#ifdef ENABLE_AFL\n\tif (named_g_fuzz_type != isc_fuzz_none) {\n\t\tnamed_fuzz_setup();\n\t}\n\n\tif (named_g_fuzz_type == isc_fuzz_resolver) {\n\t\tdns_resolver_setfuzzing();\n\t} else if (named_g_fuzz_type == isc_fuzz_http) {\n\t\tisc_httpd_setfinishhook(named_fuzz_notify);\n\t}\n#endif\n\t/*\n\t * Warn about common configuration error.\n\t */\n\tif (named_g_chrootdir != NULL) {\n\t\tint len = strlen(named_g_chrootdir);\n\t\tif (strncmp(named_g_chrootdir, named_g_conffile, len) == 0 &&\n\t\t    (named_g_conffile[len] == '/' ||\n\t\t     named_g_conffile[len] == '\\\\'))\n\t\t\tnamed_main_earlywarning(\"config filename (-c %s) \"\n\t\t\t\t\t\t\"contains chroot path (-t %s)\",\n\t\t\t\t\t\tnamed_g_conffile,\n\t\t\t\t\t\tnamed_g_chrootdir);\n\t}\n\n\tresult = isc_mem_create(0, 0, &named_g_mctx);\n\tif (result != ISC_R_SUCCESS)\n\t\tnamed_main_earlyfatal(\"isc_mem_create() failed: %s\",\n\t\t\t\t   isc_result_totext(result));\n\tisc_mem_setname(named_g_mctx, \"main\", NULL);\n\n\tsetup();\n\n\t/*\n\t * Start things running and then wait for a shutdown request\n\t * or reload.\n\t */\n\tdo {\n\t\tresult = isc_app_run();\n\n\t\tif (result == ISC_R_RELOAD) {\n\t\t\tnamed_server_reloadwanted(named_g_server);\n\t\t} else if (result != ISC_R_SUCCESS) {\n\t\t\tUNEXPECTED_ERROR(__FILE__, __LINE__,\n\t\t\t\t\t \"isc_app_run(): %s\",\n\t\t\t\t\t isc_result_totext(result));\n\t\t\t/*\n\t\t\t * Force exit.\n\t\t\t */\n\t\t\tresult = ISC_R_SUCCESS;\n\t\t}\n\t} while (result != ISC_R_SUCCESS);\n\n#ifdef HAVE_LIBSCF\n\tif (named_smf_want_disable == 1) {\n\t\tresult = named_smf_get_instance(&instance, 1, named_g_mctx);\n\t\tif (result == ISC_R_SUCCESS && instance != NULL) {\n\t\t\tif (smf_disable_instance(instance, 0) != 0)\n\t\t\t\tUNEXPECTED_ERROR(__FILE__, __LINE__,\n\t\t\t\t\t\t \"smf_disable_instance() \"\n\t\t\t\t\t\t \"failed for %s : %s\",\n\t\t\t\t\t\t instance,\n\t\t\t\t\t\t scf_strerror(scf_error()));\n\t\t}\n\t\tif (instance != NULL)\n\t\t\tisc_mem_free(named_g_mctx, instance);\n\t}\n#endif /* HAVE_LIBSCF */\n\n\tcleanup();\n\n\tif (want_stats) {\n\t\tisc_mem_stats(named_g_mctx, stdout);\n\t\tisc_mutex_stats(stdout);\n\t}\n\n\tif (named_g_memstatistics && memstats != NULL) {\n\t\tFILE *fp = NULL;\n\t\tresult = isc_stdio_open(memstats, \"w\", &fp);\n\t\tif (result == ISC_R_SUCCESS) {\n\t\t\tisc_mem_stats(named_g_mctx, fp);\n\t\t\tisc_mutex_stats(fp);\n\t\t\t(void) isc_stdio_close(fp);\n\t\t}\n\t}\n\tisc_mem_destroy(&named_g_mctx);\n\tisc_mem_checkdestroyed(stderr);\n\n\tnamed_main_setmemstats(NULL);\n\n\tisc_app_finish();\n\n\tnamed_os_closedevnull();\n\n\tnamed_os_shutdown();\n\n#ifdef HAVE_GPERFTOOLS_PROFILER\n\tProfilerStop();\n#endif\n\n\treturn (0);\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/bin/named/Makefile.in": "# Copyright (C) Internet Systems Consortium, Inc. (\"ISC\")\n#\n# This Source Code Form is subject to the terms of the Mozilla Public\n# License, v. 2.0. If a copy of the MPL was not distributed with this\n# file, You can obtain one at http://mozilla.org/MPL/2.0/.\n#\n# See the COPYRIGHT file distributed with this work for additional\n# information regarding copyright ownership.\n\nsrcdir =\t@srcdir@\nVPATH =\t\t@srcdir@\ntop_srcdir =\t@top_srcdir@\n\n# Attempt to disable parallel processing.\n.NOTPARALLEL:\n.NO_PARALLEL:\n\nVERSION=@BIND9_VERSION@\n\n@BIND9_PRODUCT@\n\n@BIND9_DESCRIPTION@\n\n@BIND9_SRCID@\n\n@BIND9_CONFIGARGS@\n\n@BIND9_MAKE_INCLUDES@\n\n#\n# Add database drivers here.\n#\nDBDRIVER_OBJS =\nDBDRIVER_SRCS =\nDBDRIVER_INCLUDES =\nDBDRIVER_LIBS =\n\nDLZ_DRIVER_DIR =\t${top_srcdir}/contrib/dlz/drivers\n\nDLZDRIVER_OBJS =\t@DLZ_DRIVER_OBJS@\nDLZDRIVER_SRCS =\t@DLZ_DRIVER_SRCS@\nDLZDRIVER_INCLUDES =\t@DLZ_DRIVER_INCLUDES@\nDLZDRIVER_LIBS =\t@DLZ_DRIVER_LIBS@\n\nCINCLUDES =\t-I${srcdir}/include -I${srcdir}/unix/include -I. \\\n\t\t${NS_INCLUDES} ${DNS_INCLUDES} \\\n\t\t${BIND9_INCLUDES} ${ISCCFG_INCLUDES} ${ISCCC_INCLUDES} \\\n\t\t${ISC_INCLUDES} ${DLZDRIVER_INCLUDES} \\\n\t\t${DBDRIVER_INCLUDES} ${MAXMINDDB_CFLAGS} \\\n\t\t@OPENSSL_INCLUDES@\n\nCDEFINES =      @CONTRIB_DLZ@\n\nCWARNINGS =\n\nDNSLIBS =\t../../lib/dns/libdns.@A@ ${MAXMINDDB_LIBS} @DNS_CRYPTO_LIBS@\nISCCFGLIBS =\t../../lib/isccfg/libisccfg.@A@\nISCCCLIBS =\t../../lib/isccc/libisccc.@A@\nISCLIBS =\t../../lib/isc/libisc.@A@ @OPENSSL_LIBS@\nISCNOSYMLIBS =\t../../lib/isc/libisc-nosymtbl.@A@ @OPENSSL_LIBS@\nBIND9LIBS =\t../../lib/bind9/libbind9.@A@\nNSLIBS =\t../../lib/ns/libns.@A@\n\nDNSDEPLIBS =\t../../lib/dns/libdns.@A@\nISCCFGDEPLIBS =\t../../lib/isccfg/libisccfg.@A@\nISCCCDEPLIBS =\t../../lib/isccc/libisccc.@A@\nISCDEPLIBS =\t../../lib/isc/libisc.@A@\nBIND9DEPLIBS =\t../../lib/bind9/libbind9.@A@\nNSDEPLIBS =\t../../lib/ns/libns.@A@\n\nDEPLIBS =\t${NSDEPLIBS} ${DNSDEPLIBS} ${BIND9DEPLIBS} \\\n\t\t${ISCCFGDEPLIBS} ${ISCCCDEPLIBS} ${ISCDEPLIBS}\n\nLIBS =\t\t${NSLIBS} ${DNSLIBS} ${BIND9LIBS} \\\n\t\t${ISCCFGLIBS} ${ISCCCLIBS} ${ISCLIBS} \\\n\t\t${DLZDRIVER_LIBS} ${DBDRIVER_LIBS} @LIBCAP_LIBS@ \\\n\t\t@LIBS@\n\nNOSYMLIBS =\t${NSLIBS} ${DNSLIBS} ${BIND9LIBS} \\\n\t\t${ISCCFGLIBS} ${ISCCCLIBS} ${ISCNOSYMLIBS} \\\n\t\t${DLZDRIVER_LIBS} ${DBDRIVER_LIBS} @LIBCAP_LIBS@ \\\n\t\t@LIBS@\n\nSUBDIRS =\tunix\n\nTARGETS =\tnamed@EXEEXT@\n\nGEOIPLINKOBJS = geoip.@O@\nGEOIP2LINKOBJS = geoip.@O@\n\nOBJS =\t\tbuiltin.@O@ config.@O@ control.@O@ \\\n\t\tcontrolconf.@O@ fuzz.@O@ \\\n\t\t@GEOIPLINKOBJS@ @GEOIP2LINKOBJS@ \\\n\t\tlog.@O@ logconf.@O@ main.@O@ \\\n\t\tserver.@O@ statschannel.@O@ \\\n\t\ttkeyconf.@O@ tsigconf.@O@ zoneconf.@O@ \\\n\t\t${DLZDRIVER_OBJS} ${DBDRIVER_OBJS}\n\nUOBJS =\t\tunix/os.@O@ unix/dlz_dlopen_driver.@O@\n\nSYMOBJS =\tsymtbl.@O@\n\nGEOIPLINKSRCS = geoip.c\nGEOIP2LINKSRCS = geoip.c\n\nSRCS =\t\tbuiltin.c config.c control.c \\\n\t\tcontrolconf.c fuzz.c \\\n\t\t@GEOIPLINKSRCS@ @GEOIP2LINKSRCS@ \\\n\t\tlog.c logconf.c main.c \\\n\t\tserver.c statschannel.c \\\n\t\ttkeyconf.c tsigconf.c zoneconf.c \\\n\t\t${DLZDRIVER_SRCS} ${DBDRIVER_SRCS}\n\nMANPAGES =\tnamed.8 named.conf.5\n\nHTMLPAGES =\tnamed.html named.conf.html\n\nMANOBJS =\t${MANPAGES} ${HTMLPAGES}\n\n@BIND9_MAKE_RULES@\n\nmain.@O@: main.c\n\t${LIBTOOL_MODE_COMPILE} ${CC} ${ALL_CFLAGS} \\\n\t\t-DVERSION=\\\"${VERSION}\\\" \\\n\t\t-DPRODUCT=\\\"${PRODUCT}\\\" \\\n\t\t-DDESCRIPTION=\\\"${DESCRIPTION}\\\" \\\n\t\t-DSRCID=\\\"${SRCID}\\\" \\\n\t\t-DCONFIGARGS=\"\\\"${CONFIGARGS}\\\"\" \\\n\t\t-DBUILDER=\"\\\"make\\\"\" \\\n\t\t-DNAMED_LOCALSTATEDIR=\\\"${localstatedir}\\\" \\\n\t\t-DNAMED_SYSCONFDIR=\\\"${sysconfdir}\\\" -c ${srcdir}/main.c\n\nconfig.@O@: config.c\n\t${LIBTOOL_MODE_COMPILE} ${CC} ${ALL_CFLAGS} \\\n\t\t-DVERSION=\\\"${VERSION}\\\" \\\n\t\t-DSRCID=\\\"${SRCID}\\\" \\\n\t\t-DDYNDB_LIBDIR=\\\"@libdir@/bind\\\" \\\n\t\t-DNAMED_LOCALSTATEDIR=\\\"${localstatedir}\\\" \\\n\t\t-DNAMED_SYSCONFDIR=\\\"${sysconfdir}\\\" \\\n\t\t-DMAXMINDDB_PREFIX=\\\"@MAXMINDDB_PREFIX@\\\" \\\n\t\t-c ${srcdir}/config.c\n\nserver.@O@: server.c\n\t${LIBTOOL_MODE_COMPILE} ${CC} ${ALL_CFLAGS} \\\n\t\t-DPRODUCT=\\\"${PRODUCT}\\\" \\\n\t\t-DVERSION=\\\"${VERSION}\\\" -c ${srcdir}/server.c\n\nnamed@EXEEXT@: ${OBJS} ${DEPLIBS}\n\texport MAKE_SYMTABLE=\"yes\"; \\\n\texport BASEOBJS=\"${OBJS} ${UOBJS}\"; \\\n\t${FINALBUILDCMD}\n\ndoc man:: ${MANOBJS}\n\ndocclean manclean maintainer-clean::\n\trm -f ${MANOBJS}\n\nclean distclean maintainer-clean::\n\trm -f ${TARGETS} ${OBJS}\n\nmaintainer-clean::\n\nbind9.xsl.h: bind9.xsl ${srcdir}/convertxsl.pl\n\t${PERL} ${srcdir}/convertxsl.pl < ${srcdir}/bind9.xsl > bind9.xsl.h\n\ndepend: bind9.xsl.h\nstatschannel.@O@: bind9.xsl.h\n\ninstalldirs:\n\t$(SHELL) ${top_srcdir}/mkinstalldirs ${DESTDIR}${sbindir}\n\t$(SHELL) ${top_srcdir}/mkinstalldirs ${DESTDIR}${mandir}/man5\n\t$(SHELL) ${top_srcdir}/mkinstalldirs ${DESTDIR}${mandir}/man8\n\ninstall:: named@EXEEXT@ installdirs\n\t${LIBTOOL_MODE_INSTALL} ${INSTALL_PROGRAM} named@EXEEXT@ ${DESTDIR}${sbindir}\n\t${INSTALL_DATA} ${srcdir}/named.8 ${DESTDIR}${mandir}/man8\n\t${INSTALL_DATA} ${srcdir}/named.conf.5 ${DESTDIR}${mandir}/man5\n\nuninstall::\n\trm -f ${DESTDIR}${mandir}/man5/named.conf.5\n\trm -f ${DESTDIR}${mandir}/man8/named.8\n\t${LIBTOOL_MODE_UNINSTALL} rm -f ${DESTDIR}${sbindir}/named@EXEEXT@\n\n@DLZ_DRIVER_RULES@\n\nnamed-symtbl.@O@: named-symtbl.c\n\t${LIBTOOL_MODE_COMPILE} ${CC} ${ALL_CFLAGS} -c named-symtbl.c\n",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/bin/named/include/dlz/dlz_dlopen_driver.h": "/*\n * Copyright (C) Internet Systems Consortium, Inc. (\"ISC\")\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n *\n * See the COPYRIGHT file distributed with this work for additional\n * information regarding copyright ownership.\n */\n\n\n#ifndef DLZ_DLOPEN_DRIVER_H\n#define DLZ_DLOPEN_DRIVER_H\n\nisc_result_t\ndlz_dlopen_init(isc_mem_t *mctx);\n\nvoid\ndlz_dlopen_clear(void);\n#endif\n",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/bin/named/unix/dlz_dlopen_driver.c": "/*\n * Copyright (C) Internet Systems Consortium, Inc. (\"ISC\")\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n *\n * See the COPYRIGHT file distributed with this work for additional\n * information regarding copyright ownership.\n */\n\n\n#include <config.h>\n\n#include <stdbool.h>\n#include <stdio.h>\n#include <inttypes.h>\n#include <stdlib.h>\n#include <string.h>\n#if HAVE_DLFCN_H\n#include <dlfcn.h>\n#endif\n\n#include <dns/log.h>\n#include <dns/result.h>\n#include <dns/dlz_dlopen.h>\n\n#include <isc/mem.h>\n#include <isc/print.h>\n#include <isc/result.h>\n#include <isc/util.h>\n\n#include <named/globals.h>\n\n#include <dlz/dlz_dlopen_driver.h>\n\n#ifdef ISC_DLZ_DLOPEN\nstatic dns_sdlzimplementation_t *dlz_dlopen = NULL;\n\n\ntypedef struct dlopen_data {\n\tisc_mem_t *mctx;\n\tchar *dl_path;\n\tchar *dlzname;\n\tvoid *dl_handle;\n\tvoid *dbdata;\n\tunsigned int flags;\n\tisc_mutex_t lock;\n\tint version;\n\tbool in_configure;\n\n\tdlz_dlopen_version_t *dlz_version;\n\tdlz_dlopen_create_t *dlz_create;\n\tdlz_dlopen_findzonedb_t *dlz_findzonedb;\n\tdlz_dlopen_lookup_t *dlz_lookup;\n\tdlz_dlopen_authority_t *dlz_authority;\n\tdlz_dlopen_allnodes_t *dlz_allnodes;\n\tdlz_dlopen_allowzonexfr_t *dlz_allowzonexfr;\n\tdlz_dlopen_newversion_t *dlz_newversion;\n\tdlz_dlopen_closeversion_t *dlz_closeversion;\n\tdlz_dlopen_configure_t *dlz_configure;\n\tdlz_dlopen_ssumatch_t *dlz_ssumatch;\n\tdlz_dlopen_addrdataset_t *dlz_addrdataset;\n\tdlz_dlopen_subrdataset_t *dlz_subrdataset;\n\tdlz_dlopen_delrdataset_t *dlz_delrdataset;\n\tdlz_dlopen_destroy_t *dlz_destroy;\n} dlopen_data_t;\n\n/* Modules can choose whether they are lock-safe or not. */\n#define MAYBE_LOCK(cd) \\\n\tdo { \\\n\t\tif ((cd->flags & DNS_SDLZFLAG_THREADSAFE) == 0 && \\\n\t\t    cd->in_configure == false) \\\n\t\t\tLOCK(&cd->lock); \\\n\t} while (0)\n\n#define MAYBE_UNLOCK(cd) \\\n\tdo { \\\n\t\tif ((cd->flags & DNS_SDLZFLAG_THREADSAFE) == 0 && \\\n\t\t    cd->in_configure == false) \\\n\t\t\tUNLOCK(&cd->lock); \\\n\t} while (0)\n\n/*\n * Log a message at the given level.\n */\nstatic void dlopen_log(int level, const char *fmt, ...)\n{\n\tva_list ap;\n\tva_start(ap, fmt);\n\tisc_log_vwrite(dns_lctx, DNS_LOGCATEGORY_DATABASE,\n\t\t       DNS_LOGMODULE_DLZ, ISC_LOG_DEBUG(level),\n\t\t       fmt, ap);\n\tva_end(ap);\n}\n\n/*\n * SDLZ methods\n */\n\nstatic isc_result_t\ndlopen_dlz_allnodes(const char *zone, void *driverarg, void *dbdata,\n\t\t    dns_sdlzallnodes_t *allnodes)\n{\n\tdlopen_data_t *cd = (dlopen_data_t *) dbdata;\n\tisc_result_t result;\n\n\n\tUNUSED(driverarg);\n\n\tif (cd->dlz_allnodes == NULL) {\n\t\treturn (ISC_R_NOPERM);\n\t}\n\n\tMAYBE_LOCK(cd);\n\tresult = cd->dlz_allnodes(zone, cd->dbdata, allnodes);\n\tMAYBE_UNLOCK(cd);\n\treturn (result);\n}\n\n\nstatic isc_result_t\ndlopen_dlz_allowzonexfr(void *driverarg, void *dbdata, const char *name,\n\t\t\tconst char *client)\n{\n\tdlopen_data_t *cd = (dlopen_data_t *) dbdata;\n\tisc_result_t result;\n\n\tUNUSED(driverarg);\n\n\n\tif (cd->dlz_allowzonexfr == NULL) {\n\t\treturn (ISC_R_NOPERM);\n\t}\n\n\tMAYBE_LOCK(cd);\n\tresult = cd->dlz_allowzonexfr(cd->dbdata, name, client);\n\tMAYBE_UNLOCK(cd);\n\treturn (result);\n}\n\nstatic isc_result_t\ndlopen_dlz_authority(const char *zone, void *driverarg, void *dbdata,\n\t\t     dns_sdlzlookup_t *lookup)\n{\n\tdlopen_data_t *cd = (dlopen_data_t *) dbdata;\n\tisc_result_t result;\n\n\tUNUSED(driverarg);\n\n\tif (cd->dlz_authority == NULL) {\n\t\treturn (ISC_R_NOTIMPLEMENTED);\n\t}\n\n\tMAYBE_LOCK(cd);\n\tresult = cd->dlz_authority(zone, cd->dbdata, lookup);\n\tMAYBE_UNLOCK(cd);\n\treturn (result);\n}\n\nstatic isc_result_t\ndlopen_dlz_findzonedb(void *driverarg, void *dbdata, const char *name,\n\t\t      dns_clientinfomethods_t *methods,\n\t\t      dns_clientinfo_t *clientinfo)\n{\n\tdlopen_data_t *cd = (dlopen_data_t *) dbdata;\n\tisc_result_t result;\n\n\tUNUSED(driverarg);\n\n\tMAYBE_LOCK(cd);\n\tresult = cd->dlz_findzonedb(cd->dbdata, name, methods, clientinfo);\n\tMAYBE_UNLOCK(cd);\n\treturn (result);\n}\n\n\nstatic isc_result_t\ndlopen_dlz_lookup(const char *zone, const char *name, void *driverarg,\n\t\t  void *dbdata, dns_sdlzlookup_t *lookup,\n\t\t  dns_clientinfomethods_t *methods,\n\t\t  dns_clientinfo_t *clientinfo)\n{\n\tdlopen_data_t *cd = (dlopen_data_t *) dbdata;\n\tisc_result_t result;\n\n\tUNUSED(driverarg);\n\n\tMAYBE_LOCK(cd);\n\tresult = cd->dlz_lookup(zone, name, cd->dbdata, lookup,\n\t\t\t\tmethods, clientinfo);\n\tMAYBE_UNLOCK(cd);\n\treturn (result);\n}\n\n/*\n * Load a symbol from the library\n */\nstatic void *\ndl_load_symbol(dlopen_data_t *cd, const char *symbol, bool mandatory) {\n\tvoid *ptr = dlsym(cd->dl_handle, symbol);\n\tif (ptr == NULL && mandatory) {\n\t\tdlopen_log(ISC_LOG_ERROR,\n\t\t\t   \"dlz_dlopen: library '%s' is missing \"\n\t\t\t   \"required symbol '%s'\", cd->dl_path, symbol);\n\t}\n\treturn (ptr);\n}\n\n/*\n * Called at startup for each dlopen zone in named.conf\n */\nstatic isc_result_t\ndlopen_dlz_create(const char *dlzname, unsigned int argc, char *argv[],\n\t\t  void *driverarg, void **dbdata)\n{\n\tdlopen_data_t *cd;\n\tisc_mem_t *mctx = NULL;\n\tisc_result_t result = ISC_R_FAILURE;\n\tint dlopen_flags = 0;\n\n\tUNUSED(driverarg);\n\n\tif (argc < 2) {\n\t\tdlopen_log(ISC_LOG_ERROR,\n\t\t\t   \"dlz_dlopen driver for '%s' needs a path to \"\n\t\t\t   \"the shared library\", dlzname);\n\t\treturn (ISC_R_FAILURE);\n\t}\n\n\tresult = isc_mem_create(0, 0, &mctx);\n\tif (result != ISC_R_SUCCESS)\n\t\treturn (result);\n\n\tcd = isc_mem_get(mctx, sizeof(*cd));\n\tif (cd == NULL) {\n\t\tisc_mem_destroy(&mctx);\n\t\treturn (ISC_R_NOMEMORY);\n\t}\n\tmemset(cd, 0, sizeof(*cd));\n\n\tcd->mctx = mctx;\n\n\tcd->dl_path = isc_mem_strdup(cd->mctx, argv[1]);\n\tif (cd->dl_path == NULL) {\n\t\tresult = ISC_R_NOMEMORY;\n\t\tgoto failed;\n\t}\n\n\tcd->dlzname = isc_mem_strdup(cd->mctx, dlzname);\n\tif (cd->dlzname == NULL) {\n\t\tresult = ISC_R_NOMEMORY;\n\t\tgoto failed;\n\t}\n\n\t/* Initialize the lock */\n\tisc_mutex_init(&cd->lock);\n\n\t/* Open the library */\n\tdlopen_flags = RTLD_NOW|RTLD_GLOBAL;\n\n#if defined(RTLD_DEEPBIND) && !__SANITIZE_ADDRESS__\n\t/*\n\t * If RTLD_DEEPBIND is available then use it. This can avoid\n\t * issues with a module using a different version of a system\n\t * library than one that bind9 uses. For example, bind9 may link\n\t * to MIT kerberos, but the module may use Heimdal. If we don't\n\t * use RTLD_DEEPBIND then we could end up with Heimdal functions\n\t * calling MIT functions, which leads to bizarre results (usually\n\t * a segfault).\n\t */\n\tdlopen_flags |= RTLD_DEEPBIND;\n#endif\n\n\tcd->dl_handle = dlopen(cd->dl_path, dlopen_flags);\n\tif (cd->dl_handle == NULL) {\n\t\tdlopen_log(ISC_LOG_ERROR,\n\t\t\t   \"dlz_dlopen failed to open library '%s' - %s\",\n\t\t\t   cd->dl_path, dlerror());\n\t\tresult = ISC_R_FAILURE;\n\t\tgoto failed;\n\t}\n\n\t/* Find the symbols */\n\tcd->dlz_version = (dlz_dlopen_version_t *)\n\t\tdl_load_symbol(cd, \"dlz_version\", true);\n\tcd->dlz_create = (dlz_dlopen_create_t *)\n\t\tdl_load_symbol(cd, \"dlz_create\", true);\n\tcd->dlz_lookup = (dlz_dlopen_lookup_t *)\n\t\tdl_load_symbol(cd, \"dlz_lookup\", true);\n\tcd->dlz_findzonedb = (dlz_dlopen_findzonedb_t *)\n\t\tdl_load_symbol(cd, \"dlz_findzonedb\", true);\n\n\tif (cd->dlz_create == NULL ||\n\t    cd->dlz_version == NULL ||\n\t    cd->dlz_lookup == NULL ||\n\t    cd->dlz_findzonedb == NULL)\n\t{\n\t\t/* We're missing a required symbol */\n\t\tresult = ISC_R_FAILURE;\n\t\tgoto failed;\n\t}\n\n\tcd->dlz_allowzonexfr = (dlz_dlopen_allowzonexfr_t *)\n\t\tdl_load_symbol(cd, \"dlz_allowzonexfr\", false);\n\tcd->dlz_allnodes = (dlz_dlopen_allnodes_t *)\n\t\tdl_load_symbol(cd, \"dlz_allnodes\",\n\t\t\t       (cd->dlz_allowzonexfr != NULL));\n\tcd->dlz_authority = (dlz_dlopen_authority_t *)\n\t\tdl_load_symbol(cd, \"dlz_authority\", false);\n\tcd->dlz_newversion = (dlz_dlopen_newversion_t *)\n\t\tdl_load_symbol(cd, \"dlz_newversion\", false);\n\tcd->dlz_closeversion = (dlz_dlopen_closeversion_t *)\n\t\tdl_load_symbol(cd, \"dlz_closeversion\",\n\t\t\t       (cd->dlz_newversion != NULL));\n\tcd->dlz_configure = (dlz_dlopen_configure_t *)\n\t\tdl_load_symbol(cd, \"dlz_configure\", false);\n\tcd->dlz_ssumatch = (dlz_dlopen_ssumatch_t *)\n\t\tdl_load_symbol(cd, \"dlz_ssumatch\", false);\n\tcd->dlz_addrdataset = (dlz_dlopen_addrdataset_t *)\n\t\tdl_load_symbol(cd, \"dlz_addrdataset\", false);\n\tcd->dlz_subrdataset = (dlz_dlopen_subrdataset_t *)\n\t\tdl_load_symbol(cd, \"dlz_subrdataset\", false);\n\tcd->dlz_delrdataset = (dlz_dlopen_delrdataset_t *)\n\t\tdl_load_symbol(cd, \"dlz_delrdataset\", false);\n\tcd->dlz_destroy = (dlz_dlopen_destroy_t *)\n\t\tdl_load_symbol(cd, \"dlz_destroy\", false);\n\n\t/* Check the version of the API is the same */\n\tcd->version = cd->dlz_version(&cd->flags);\n\tif (cd->version < (DLZ_DLOPEN_VERSION - DLZ_DLOPEN_AGE) ||\n\t    cd->version > DLZ_DLOPEN_VERSION)\n\t{\n\t\tdlopen_log(ISC_LOG_ERROR,\n\t\t\t   \"dlz_dlopen: %s: incorrect driver API version %d, \"\n\t\t\t   \"requires %d\",\n\t\t\t   cd->dl_path, cd->version, DLZ_DLOPEN_VERSION);\n\t\tresult = ISC_R_FAILURE;\n\t\tgoto failed;\n\t}\n\n\t/*\n\t * Call the library's create function. Note that this is an\n\t * extended version of dlz create, with the addition of\n\t * named function pointers for helper functions that the\n\t * driver will need. This avoids the need for the backend to\n\t * link the BIND9 libraries\n\t */\n\tMAYBE_LOCK(cd);\n\tresult = cd->dlz_create(dlzname, argc-1, argv+1,\n\t\t\t\t&cd->dbdata,\n\t\t\t\t\"log\", dlopen_log,\n\t\t\t\t\"putrr\", dns_sdlz_putrr,\n\t\t\t\t\"putnamedrr\", dns_sdlz_putnamedrr,\n\t\t\t\t\"writeable_zone\", dns_dlz_writeablezone,\n\t\t\t\tNULL);\n\tMAYBE_UNLOCK(cd);\n\tif (result != ISC_R_SUCCESS)\n\t\tgoto failed;\n\n\t*dbdata = cd;\n\n\treturn (ISC_R_SUCCESS);\n\nfailed:\n\tdlopen_log(ISC_LOG_ERROR, \"dlz_dlopen of '%s' failed\", dlzname);\n\tif (cd->dl_path != NULL) {\n\t\tisc_mem_free(mctx, cd->dl_path);\n\t}\n\tif (cd->dlzname != NULL) {\n\t\tisc_mem_free(mctx, cd->dlzname);\n\t}\n\tif (dlopen_flags != 0) {\n\t\tisc_mutex_destroy(&cd->lock);\n\t}\n#ifdef HAVE_DLCLOSE\n\tif (cd->dl_handle) {\n\t\tdlclose(cd->dl_handle);\n\t}\n#endif\n\tisc_mem_put(mctx, cd, sizeof(*cd));\n\tisc_mem_destroy(&mctx);\n\treturn (result);\n}\n\n/*\n * Called when bind is shutting down\n */\nstatic void\ndlopen_dlz_destroy(void *driverarg, void *dbdata) {\n\tdlopen_data_t *cd = (dlopen_data_t *) dbdata;\n\tisc_mem_t *mctx;\n\n\tUNUSED(driverarg);\n\n\tif (cd->dlz_destroy) {\n\t\tMAYBE_LOCK(cd);\n\t\tcd->dlz_destroy(cd->dbdata);\n\t\tMAYBE_UNLOCK(cd);\n\t}\n\n\tif (cd->dl_path) {\n\t\tisc_mem_free(cd->mctx, cd->dl_path);\n\t}\n\tif (cd->dlzname) {\n\t\tisc_mem_free(cd->mctx, cd->dlzname);\n\t}\n\n#ifdef HAVE_DLCLOSE\n\tif (cd->dl_handle) {\n\t\tdlclose(cd->dl_handle);\n\t}\n#endif\n\n\tisc_mutex_destroy(&cd->lock);\n\n\tmctx = cd->mctx;\n\tisc_mem_put(mctx, cd, sizeof(*cd));\n\tisc_mem_destroy(&mctx);\n}\n\n/*\n * Called to start a transaction\n */\nstatic isc_result_t\ndlopen_dlz_newversion(const char *zone, void *driverarg, void *dbdata,\n\t\t      void **versionp)\n{\n\tdlopen_data_t *cd = (dlopen_data_t *) dbdata;\n\tisc_result_t result;\n\n\tUNUSED(driverarg);\n\n\tif (cd->dlz_newversion == NULL)\n\t\treturn (ISC_R_NOTIMPLEMENTED);\n\n\tMAYBE_LOCK(cd);\n\tresult = cd->dlz_newversion(zone, cd->dbdata, versionp);\n\tMAYBE_UNLOCK(cd);\n\treturn (result);\n}\n\n/*\n * Called to end a transaction\n */\nstatic void\ndlopen_dlz_closeversion(const char *zone, bool commit,\n\t\t\tvoid *driverarg, void *dbdata, void **versionp)\n{\n\tdlopen_data_t *cd = (dlopen_data_t *) dbdata;\n\n\tUNUSED(driverarg);\n\n\tif (cd->dlz_newversion == NULL) {\n\t\t*versionp = NULL;\n\t\treturn;\n\t}\n\n\tMAYBE_LOCK(cd);\n\tcd->dlz_closeversion(zone, commit, cd->dbdata, versionp);\n\tMAYBE_UNLOCK(cd);\n}\n\n/*\n * Called on startup to configure any writeable zones\n */\nstatic isc_result_t\ndlopen_dlz_configure(dns_view_t *view, dns_dlzdb_t *dlzdb,\n\t\t     void *driverarg, void *dbdata)\n{\n\tdlopen_data_t *cd = (dlopen_data_t *) dbdata;\n\tisc_result_t result;\n\n\tUNUSED(driverarg);\n\n\tif (cd->dlz_configure == NULL)\n\t\treturn (ISC_R_SUCCESS);\n\n\tMAYBE_LOCK(cd);\n\tcd->in_configure = true;\n\tresult = cd->dlz_configure(view, dlzdb, cd->dbdata);\n\tcd->in_configure = false;\n\tMAYBE_UNLOCK(cd);\n\n\treturn (result);\n}\n\n\n/*\n * Check for authority to change a name.\n */\nstatic bool\ndlopen_dlz_ssumatch(const char *signer, const char *name, const char *tcpaddr,\n\t\t    const char *type, const char *key, uint32_t keydatalen,\n\t\t    unsigned char *keydata, void *driverarg, void *dbdata)\n{\n\tdlopen_data_t *cd = (dlopen_data_t *) dbdata;\n\tbool ret;\n\n\tUNUSED(driverarg);\n\n\tif (cd->dlz_ssumatch == NULL)\n\t\treturn (false);\n\n\tMAYBE_LOCK(cd);\n\tret = cd->dlz_ssumatch(signer, name, tcpaddr, type, key, keydatalen,\n\t\t\t       keydata, cd->dbdata);\n\tMAYBE_UNLOCK(cd);\n\n\treturn (ret);\n}\n\n\n/*\n * Add an rdataset.\n */\nstatic isc_result_t\ndlopen_dlz_addrdataset(const char *name, const char *rdatastr,\n\t\t       void *driverarg, void *dbdata, void *version)\n{\n\tdlopen_data_t *cd = (dlopen_data_t *) dbdata;\n\tisc_result_t result;\n\n\tUNUSED(driverarg);\n\n\tif (cd->dlz_addrdataset == NULL)\n\t\treturn (ISC_R_NOTIMPLEMENTED);\n\n\tMAYBE_LOCK(cd);\n\tresult = cd->dlz_addrdataset(name, rdatastr, cd->dbdata, version);\n\tMAYBE_UNLOCK(cd);\n\n\treturn (result);\n}\n\n/*\n * Subtract an rdataset.\n */\nstatic isc_result_t\ndlopen_dlz_subrdataset(const char *name, const char *rdatastr,\n\t\t       void *driverarg, void *dbdata, void *version)\n{\n\tdlopen_data_t *cd = (dlopen_data_t *) dbdata;\n\tisc_result_t result;\n\n\tUNUSED(driverarg);\n\n\tif (cd->dlz_subrdataset == NULL)\n\t\treturn (ISC_R_NOTIMPLEMENTED);\n\n\tMAYBE_LOCK(cd);\n\tresult = cd->dlz_subrdataset(name, rdatastr, cd->dbdata, version);\n\tMAYBE_UNLOCK(cd);\n\n\treturn (result);\n}\n\n/*\n * Delete a rdataset.\n */\nstatic isc_result_t\ndlopen_dlz_delrdataset(const char *name, const char *type,\n\t\t       void *driverarg, void *dbdata, void *version)\n{\n\tdlopen_data_t *cd = (dlopen_data_t *) dbdata;\n\tisc_result_t result;\n\n\tUNUSED(driverarg);\n\n\tif (cd->dlz_delrdataset == NULL)\n\t\treturn (ISC_R_NOTIMPLEMENTED);\n\n\tMAYBE_LOCK(cd);\n\tresult = cd->dlz_delrdataset(name, type, cd->dbdata, version);\n\tMAYBE_UNLOCK(cd);\n\n\treturn (result);\n}\n\n\nstatic dns_sdlzmethods_t dlz_dlopen_methods = {\n\tdlopen_dlz_create,\n\tdlopen_dlz_destroy,\n\tdlopen_dlz_findzonedb,\n\tdlopen_dlz_lookup,\n\tdlopen_dlz_authority,\n\tdlopen_dlz_allnodes,\n\tdlopen_dlz_allowzonexfr,\n\tdlopen_dlz_newversion,\n\tdlopen_dlz_closeversion,\n\tdlopen_dlz_configure,\n\tdlopen_dlz_ssumatch,\n\tdlopen_dlz_addrdataset,\n\tdlopen_dlz_subrdataset,\n\tdlopen_dlz_delrdataset\n};\n#endif\n\n/*\n * Register driver with BIND\n */\nisc_result_t\ndlz_dlopen_init(isc_mem_t *mctx) {\n#ifndef ISC_DLZ_DLOPEN\n\tUNUSED(mctx);\n\treturn (ISC_R_NOTIMPLEMENTED);\n#else\n\tisc_result_t result;\n\n\tdlopen_log(2, \"Registering DLZ_dlopen driver\");\n\n\tresult = dns_sdlzregister(\"dlopen\", &dlz_dlopen_methods, NULL,\n\t\t\t\t  DNS_SDLZFLAG_RELATIVEOWNER |\n\t\t\t\t  DNS_SDLZFLAG_RELATIVERDATA |\n\t\t\t\t  DNS_SDLZFLAG_THREADSAFE,\n\t\t\t\t  mctx, &dlz_dlopen);\n\n\tif (result != ISC_R_SUCCESS) {\n\t\tUNEXPECTED_ERROR(__FILE__, __LINE__,\n\t\t\t\t \"dns_sdlzregister() failed: %s\",\n\t\t\t\t isc_result_totext(result));\n\t\tresult = ISC_R_UNEXPECTED;\n\t}\n\n\treturn (result);\n#endif\n}\n\n\n/*\n * Unregister the driver\n */\nvoid\ndlz_dlopen_clear(void) {\n#ifdef ISC_DLZ_DLOPEN\n\tdlopen_log(2, \"Unregistering DLZ_dlopen driver\");\n\tif (dlz_dlopen != NULL)\n\t\tdns_sdlzunregister(&dlz_dlopen);\n#endif\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/bin/named/unix/Makefile.in": "# Copyright (C) Internet Systems Consortium, Inc. (\"ISC\")\n#\n# This Source Code Form is subject to the terms of the Mozilla Public\n# License, v. 2.0. If a copy of the MPL was not distributed with this\n# file, You can obtain one at http://mozilla.org/MPL/2.0/.\n#\n# See the COPYRIGHT file distributed with this work for additional\n# information regarding copyright ownership.\n\nsrcdir =\t@srcdir@\nVPATH =\t\t@srcdir@\ntop_srcdir =\t@top_srcdir@\n\n@BIND9_MAKE_INCLUDES@\n\nCINCLUDES =\t-I${srcdir}/include -I${srcdir}/../include \\\n\t\t${ISCCFG_INCLUDES} ${ISCCC_INCLUDES} \\\n\t\t${DNS_INCLUDES} ${ISC_INCLUDES} @OPENSSL_INCLUDES@\n\nCDEFINES =\nCWARNINGS =\n\nOBJS =\t\tos.@O@ dlz_dlopen_driver.@O@\n\nSRCS =\t\tos.c dlz_dlopen_driver.c\n\nTARGETS =\t${OBJS}\n\n@BIND9_MAKE_RULES@\n",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/bin/named/win32/named.vcxproj.filters.in": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<Project ToolsVersion=\"4.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n  <ItemGroup>\n    <Filter Include=\"Source Files\">\n      <UniqueIdentifier>{4FC737F1-C7A5-4376-A066-2A32D752A2FF}</UniqueIdentifier>\n      <Extensions>cpp;c;cc;cxx;def;odl;idl;hpj;bat;asm;asmx</Extensions>\n    </Filter>\n    <Filter Include=\"Header Files\">\n      <UniqueIdentifier>{93995380-89BD-4b04-88EB-625FBE52EBFB}</UniqueIdentifier>\n      <Extensions>h;hpp;hxx;hm;inl;inc;xsd</Extensions>\n    </Filter>\n    <Filter Include=\"Resource Files\">\n      <UniqueIdentifier>{67DA6AB6-F800-4c08-8B7A-83BB121AAD01}</UniqueIdentifier>\n      <Extensions>rc;ico;cur;bmp;dlg;rc2;rct;bin;rgs;gif;jpg;jpeg;jpe;resx;tiff;tif;png;wav;mfcribbon-ms</Extensions>\n    </Filter>\n  </ItemGroup>\n  <ItemGroup>\n    <ClCompile Include=\"dlz_dlopen_driver.c\">\n      <Filter>Source Files</Filter>\n    </ClCompile>\n    <ClCompile Include=\"ntservice.c\">\n      <Filter>Source Files</Filter>\n    </ClCompile>\n    <ClCompile Include=\"os.c\">\n      <Filter>Source Files</Filter>\n    </ClCompile>\n    <ClCompile Include=\"..\\builtin.c\">\n      <Filter>Source Files</Filter>\n    </ClCompile>\n    <ClCompile Include=\"..\\config.c\">\n      <Filter>Source Files</Filter>\n    </ClCompile>\n    <ClCompile Include=\"..\\control.c\">\n      <Filter>Source Files</Filter>\n    </ClCompile>\n    <ClCompile Include=\"..\\controlconf.c\">\n      <Filter>Source Files</Filter>\n    </ClCompile>\n@IF GEOIP\n    <ClCompile Include=\"..\\geoip.c\">\n      <Filter>Source Files</Filter>\n    </ClCompile>\n@END GEOIP\n@IF GEOIPLEGACY\n    <ClCompile Include=\"..\\geoip.c\">\n      <Filter>Source Files</Filter>\n    </ClCompile>\n@END GEOIPLEGACY\n    <ClCompile Include=\"..\\log.c\">\n      <Filter>Source Files</Filter>\n    </ClCompile>\n    <ClCompile Include=\"..\\logconf.c\">\n      <Filter>Source Files</Filter>\n    </ClCompile>\n    <ClCompile Include=\"..\\main.c\">\n      <Filter>Source Files</Filter>\n    </ClCompile>\n    <ClCompile Include=\"..\\server.c\">\n      <Filter>Source Files</Filter>\n    </ClCompile>\n    <ClCompile Include=\"..\\statschannel.c\">\n      <Filter>Source Files</Filter>\n    </ClCompile>\n    <ClCompile Include=\"..\\tkeyconf.c\">\n      <Filter>Source Files</Filter>\n    </ClCompile>\n    <ClCompile Include=\"..\\tsigconf.c\">\n      <Filter>Source Files</Filter>\n    </ClCompile>\n    <ClCompile Include=\"..\\zoneconf.c\">\n      <Filter>Source Files</Filter>\n    </ClCompile>\n  </ItemGroup>\n  <ItemGroup>\n    <ClInclude Include=\"include\\named\\ntservice.h\">\n      <Filter>Header Files</Filter>\n    </ClInclude>\n    <ClInclude Include=\"include\\named\\os.h\">\n      <Filter>Header Files</Filter>\n    </ClInclude>\n    <ClInclude Include=\"..\\include\\named\\builtin.h\">\n      <Filter>Header Files</Filter>\n    </ClInclude>\n    <ClInclude Include=\"..\\include\\named\\config.h\">\n      <Filter>Header Files</Filter>\n    </ClInclude>\n    <ClInclude Include=\"..\\include\\named\\control.h\">\n      <Filter>Header Files</Filter>\n    </ClInclude>\n@IF GEOIP\n    <ClInclude Include=\"..\\include\\named\\geoip.h\">\n      <Filter>Header Files</Filter>\n    </ClInclude>\n@END GEOIP\n@IF GEOIPLEGACY\n    <ClInclude Include=\"..\\include\\named\\geoip.h\">\n      <Filter>Header Files</Filter>\n    </ClInclude>\n@END GEOIPLEGACY\n    <ClInclude Include=\"..\\include\\named\\globals.h\">\n      <Filter>Header Files</Filter>\n    </ClInclude>\n    <ClInclude Include=\"..\\include\\named\\log.h\">\n      <Filter>Header Files</Filter>\n    </ClInclude>\n    <ClInclude Include=\"..\\include\\named\\logconf.h\">\n      <Filter>Header Files</Filter>\n    </ClInclude>\n    <ClInclude Include=\"..\\include\\named\\main.h\">\n      <Filter>Header Files</Filter>\n    </ClInclude>\n    <ClInclude Include=\"..\\include\\named\\server.h\">\n      <Filter>Header Files</Filter>\n    </ClInclude>\n    <ClInclude Include=\"..\\include\\named\\statschannel.h\">\n      <Filter>Header Files</Filter>\n    </ClInclude>\n    <ClInclude Include=\"..\\include\\named\\tkeyconf.h\">\n      <Filter>Header Files</Filter>\n    </ClInclude>\n    <ClInclude Include=\"..\\include\\named\\tsigconf.h\">\n      <Filter>Header Files</Filter>\n    </ClInclude>\n    <ClInclude Include=\"..\\include\\named\\types.h\">\n      <Filter>Header Files</Filter>\n    </ClInclude>\n    <ClInclude Include=\"..\\include\\named\\zoneconf.h\">\n      <Filter>Header Files</Filter>\n    </ClInclude>\n  </ItemGroup>\n</Project>\n",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/bin/named/win32/named.vcxproj.in": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<Project DefaultTargets=\"Build\" ToolsVersion=\"4.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n  <ItemGroup Label=\"ProjectConfigurations\">\n    <ProjectConfiguration Include=\"Debug|@PLATFORM@\">\n      <Configuration>Debug</Configuration>\n      <Platform>@PLATFORM@</Platform>\n    </ProjectConfiguration>\n    <ProjectConfiguration Include=\"Release|@PLATFORM@\">\n      <Configuration>Release</Configuration>\n      <Platform>@PLATFORM@</Platform>\n    </ProjectConfiguration>\n  </ItemGroup>\n  <PropertyGroup Label=\"Globals\">\n    <ProjectGuid>{723C65DA-A96C-4BA3-A34E-44F11CA346F9}</ProjectGuid>\n    <Keyword>Win32Proj</Keyword>\n    <RootNamespace>named</RootNamespace>\n  </PropertyGroup>\n  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.Default.props\" />\n  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|@PLATFORM@'\" Label=\"Configuration\">\n    <ConfigurationType>Application</ConfigurationType>\n    <UseDebugLibraries>true</UseDebugLibraries>\n    <CharacterSet>MultiByte</CharacterSet>\n  </PropertyGroup>\n  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|@PLATFORM@'\" Label=\"Configuration\">\n    <ConfigurationType>Application</ConfigurationType>\n    <UseDebugLibraries>false</UseDebugLibraries>\n    <WholeProgramOptimization>true</WholeProgramOptimization>\n    <CharacterSet>MultiByte</CharacterSet>\n  </PropertyGroup>\n  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.props\" />\n  <ImportGroup Label=\"ExtensionSettings\">\n  </ImportGroup>\n  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Debug|@PLATFORM@'\">\n    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n  </ImportGroup>\n  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Release|@PLATFORM@'\">\n    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n  </ImportGroup>\n  <PropertyGroup Label=\"UserMacros\" />\n  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|@PLATFORM@'\">\n    <LinkIncremental>true</LinkIncremental>\n    <OutDir>..\\..\\..\\Build\\$(Configuration)\\</OutDir>\n    <IntDir>.\\$(Configuration)\\</IntDir>\n  </PropertyGroup>\n  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|@PLATFORM@'\">\n    <LinkIncremental>false</LinkIncremental>\n    <OutDir>..\\..\\..\\Build\\$(Configuration)\\</OutDir>\n    <IntDir>.\\$(Configuration)\\</IntDir>\n  </PropertyGroup>\n  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|@PLATFORM@'\">\n    <ClCompile>\n      <PrecompiledHeader>\n      </PrecompiledHeader>\n      <WarningLevel>Level3</WarningLevel>\n      <Optimization>Disabled</Optimization>\n      <PreprocessorDefinitions>WIN32;@USE_GSSAPI@BUILDER=\"Visual Studio\";_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n      <FunctionLevelLinking>true</FunctionLevelLinking>\n      <PrecompiledHeaderOutputFile>.\\$(Configuration)\\$(TargetName).pch</PrecompiledHeaderOutputFile>\n      <AssemblerListingLocation>.\\$(Configuration)\\</AssemblerListingLocation>\n      <ObjectFileName>.\\$(Configuration)\\</ObjectFileName>\n      <ProgramDataBaseFileName>$(OutDir)$(TargetName).pdb</ProgramDataBaseFileName>\n      <BrowseInformation>true</BrowseInformation>\n      <AdditionalIncludeDirectories>@OPENSSL_INC@@GSSAPI_INC@@GEOIP_INC@.\\;..\\..\\..\\;@LIBXML2_INC@..\\win32\\include;..\\include;..\\..\\..\\lib\\isc\\win32;..\\..\\..\\lib\\isc\\win32\\include;..\\..\\..\\lib\\isc\\include;..\\..\\..\\lib\\dns\\include;..\\..\\..\\lib\\isccc\\include;..\\..\\..\\lib\\isccfg\\include;..\\..\\..\\lib\\bind9\\include;..\\..\\..\\lib\\ns\\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>\n      <CompileAs>CompileAsC</CompileAs>\n    </ClCompile>\n    <Link>\n      <SubSystem>Console</SubSystem>\n      <GenerateDebugInformation>true</GenerateDebugInformation>\n      <OutputFile>..\\..\\..\\Build\\$(Configuration)\\$(TargetName)$(TargetExt)</OutputFile>\n      <AdditionalLibraryDirectories>..\\..\\..\\lib\\isc\\win32\\$(Configuration);..\\..\\..\\lib\\dns\\win32\\$(Configuration);..\\..\\..\\lib\\isccc\\win32\\$(Configuration);..\\..\\..\\lib\\isccfg\\win32\\$(Configuration);..\\..\\..\\lib\\bind9\\win32\\$(Configuration);..\\..\\..\\lib\\ns\\win32\\$(Configuration);%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>\n      <AdditionalDependencies>@OPENSSL_LIB@@LIBXML2_LIB@@GSSAPI_LIB@@GEOIP_LIB@libisc.lib;libdns.lib;libisccc.lib;libisccfg.lib;libbind9.lib;libns.lib;version.lib;ws2_32.lib;%(AdditionalDependencies)</AdditionalDependencies>\n    </Link>\n  </ItemDefinitionGroup>\n  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|@PLATFORM@'\">\n    <ClCompile>\n      <WarningLevel>Level3</WarningLevel>\n      <PrecompiledHeader>\n      </PrecompiledHeader>\n      <Optimization>MaxSpeed</Optimization>\n      <FunctionLevelLinking>true</FunctionLevelLinking>\n      <IntrinsicFunctions>@INTRINSIC@</IntrinsicFunctions>\n      <PreprocessorDefinitions>WIN32;@USE_GSSAPI@BUILDER=\"Visual Studio\";NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n      <InlineFunctionExpansion>OnlyExplicitInline</InlineFunctionExpansion>\n      <WholeProgramOptimization>false</WholeProgramOptimization>\n      <StringPooling>true</StringPooling>\n      <PrecompiledHeaderOutputFile>.\\$(Configuration)\\$(TargetName).pch</PrecompiledHeaderOutputFile>\n      <AssemblerListingLocation>.\\$(Configuration)\\</AssemblerListingLocation>\n      <ObjectFileName>.\\$(Configuration)\\</ObjectFileName>\n      <ProgramDataBaseFileName>$(OutDir)$(TargetName).pdb</ProgramDataBaseFileName>\n      <AdditionalIncludeDirectories>@OPENSSL_INC@@GSSAPI_INC@@GEOIP_INC@.\\;..\\..\\..\\;@LIBXML2_INC@..\\win32\\include;..\\include;..\\..\\..\\lib\\isc\\win32;..\\..\\..\\lib\\isc\\win32\\include;..\\..\\..\\lib\\isc\\include;..\\..\\..\\lib\\dns\\include;..\\..\\..\\lib\\isccc\\include;..\\..\\..\\lib\\isccfg\\include;..\\..\\..\\lib\\bind9\\include;..\\..\\..\\lib\\ns\\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>\n      <CompileAs>CompileAsC</CompileAs>\n    </ClCompile>\n    <Link>\n      <SubSystem>Console</SubSystem>\n      <GenerateDebugInformation>false</GenerateDebugInformation>\n      <EnableCOMDATFolding>true</EnableCOMDATFolding>\n      <OptimizeReferences>true</OptimizeReferences>\n      <OutputFile>..\\..\\..\\Build\\$(Configuration)\\$(TargetName)$(TargetExt)</OutputFile>\n      <LinkTimeCodeGeneration>Default</LinkTimeCodeGeneration>\n      <AdditionalLibraryDirectories>..\\..\\..\\lib\\isc\\win32\\$(Configuration);..\\..\\..\\lib\\dns\\win32\\$(Configuration);..\\..\\..\\lib\\isccc\\win32\\$(Configuration);..\\..\\..\\lib\\isccfg\\win32\\$(Configuration);..\\..\\..\\lib\\bind9\\win32\\$(Configuration);..\\..\\..\\lib\\ns\\win32\\$(Configuration);%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>\n      <AdditionalDependencies>@OPENSSL_LIB@@LIBXML2_LIB@@GSSAPI_LIB@@GEOIP_LIB@libisc.lib;libdns.lib;libisccc.lib;libisccfg.lib;libbind9.lib;libns.lib;version.lib;ws2_32.lib;%(AdditionalDependencies)</AdditionalDependencies>\n    </Link>\n  </ItemDefinitionGroup>\n  <ItemGroup>\n    <ClCompile Include=\"..\\builtin.c\" />\n    <ClCompile Include=\"..\\config.c\" />\n    <ClCompile Include=\"..\\control.c\" />\n    <ClCompile Include=\"..\\controlconf.c\" />\n@IF GEOIP\n    <ClCompile Include=\"..\\geoip.c\" />\n@END GEOIP\n@IF GEOIPLEGACY\n    <ClCompile Include=\"..\\geoip.c\" />\n@END GEOIPLEGACY\n    <ClCompile Include=\"..\\log.c\" />\n    <ClCompile Include=\"..\\logconf.c\" />\n    <ClCompile Include=\"..\\main.c\" />\n    <ClCompile Include=\"..\\server.c\" />\n    <ClCompile Include=\"..\\statschannel.c\" />\n    <ClCompile Include=\"..\\tkeyconf.c\" />\n    <ClCompile Include=\"..\\tsigconf.c\" />\n    <ClCompile Include=\"..\\zoneconf.c\" />\n    <ClCompile Include=\"dlz_dlopen_driver.c\" />\n    <ClCompile Include=\"ntservice.c\" />\n    <ClCompile Include=\"os.c\" />\n  </ItemGroup>\n  <ItemGroup>\n    <ClInclude Include=\"..\\include\\named\\builtin.h\" />\n    <ClInclude Include=\"..\\include\\named\\config.h\" />\n    <ClInclude Include=\"..\\include\\named\\control.h\" />\n@IF GEOIP\n    <ClInclude Include=\"..\\include\\named\\geoip.h\" />\n@END GEOIP\n@IF GEOIPLEGACY\n    <ClInclude Include=\"..\\include\\named\\geoip.h\" />\n@END GEOIPLEGACY\n    <ClInclude Include=\"..\\include\\named\\globals.h\" />\n    <ClInclude Include=\"..\\include\\named\\log.h\" />\n    <ClInclude Include=\"..\\include\\named\\logconf.h\" />\n    <ClInclude Include=\"..\\include\\named\\main.h\" />\n    <ClInclude Include=\"..\\include\\named\\server.h\" />\n    <ClInclude Include=\"..\\include\\named\\statschannel.h\" />\n    <ClInclude Include=\"..\\include\\named\\tkeyconf.h\" />\n    <ClInclude Include=\"..\\include\\named\\tsigconf.h\" />\n    <ClInclude Include=\"..\\include\\named\\types.h\" />\n    <ClInclude Include=\"..\\include\\named\\zoneconf.h\" />\n    <ClInclude Include=\"include\\named\\ntservice.h\" />\n    <ClInclude Include=\"include\\named\\os.h\" />\n  </ItemGroup>\n  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.targets\" />\n  <ImportGroup Label=\"ExtensionTargets\">\n  </ImportGroup>\n</Project>\n",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/bin/named/win32/dlz_dlopen_driver.c": "/*\n * Copyright (C) Internet Systems Consortium, Inc. (\"ISC\")\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n *\n * See the COPYRIGHT file distributed with this work for additional\n * information regarding copyright ownership.\n */\n\n\n#include <config.h>\n\n#include <windows.h>\n\n#include <stdbool.h>\n#include <stdio.h>\n#include <inttypes.h>\n#include <stdlib.h>\n#include <string.h>\n\n#include <dns/log.h>\n#include <dns/result.h>\n#include <dns/dlz_dlopen.h>\n\n#include <isc/mem.h>\n#include <isc/print.h>\n#include <isc/result.h>\n#include <isc/util.h>\n\n#include <named/globals.h>\n\n#include <dlz/dlz_dlopen_driver.h>\n\n#ifdef ISC_DLZ_DLOPEN\nstatic dns_sdlzimplementation_t *dlz_dlopen = NULL;\n\n\ntypedef struct dlopen_data {\n\tisc_mem_t *mctx;\n\tchar *dl_path;\n\tchar *dlzname;\n\tHMODULE dl_handle;\n\tvoid *dbdata;\n\tunsigned int flags;\n\tisc_mutex_t lock;\n\tint version;\n\tbool in_configure;\n\n\tdlz_dlopen_version_t *dlz_version;\n\tdlz_dlopen_create_t *dlz_create;\n\tdlz_dlopen_findzonedb_t *dlz_findzonedb;\n\tdlz_dlopen_lookup_t *dlz_lookup;\n\tdlz_dlopen_authority_t *dlz_authority;\n\tdlz_dlopen_allnodes_t *dlz_allnodes;\n\tdlz_dlopen_allowzonexfr_t *dlz_allowzonexfr;\n\tdlz_dlopen_newversion_t *dlz_newversion;\n\tdlz_dlopen_closeversion_t *dlz_closeversion;\n\tdlz_dlopen_configure_t *dlz_configure;\n\tdlz_dlopen_ssumatch_t *dlz_ssumatch;\n\tdlz_dlopen_addrdataset_t *dlz_addrdataset;\n\tdlz_dlopen_subrdataset_t *dlz_subrdataset;\n\tdlz_dlopen_delrdataset_t *dlz_delrdataset;\n\tdlz_dlopen_destroy_t *dlz_destroy;\n} dlopen_data_t;\n\n/* Modules can choose whether they are lock-safe or not. */\n#define MAYBE_LOCK(cd) \\\n\tdo { \\\n\t\tif ((cd->flags & DNS_SDLZFLAG_THREADSAFE) == 0 && \\\n\t\t    cd->in_configure == false) \\\n\t\t\tLOCK(&cd->lock); \\\n\t} while (0)\n\n#define MAYBE_UNLOCK(cd) \\\n\tdo { \\\n\t\tif ((cd->flags & DNS_SDLZFLAG_THREADSAFE) == 0 && \\\n\t\t    cd->in_configure == false) \\\n\t\t\tUNLOCK(&cd->lock); \\\n\t} while (0)\n\n/*\n * Log a message at the given level.\n */\nstatic void dlopen_log(int level, const char *fmt, ...)\n{\n\tva_list ap;\n\tva_start(ap, fmt);\n\tisc_log_vwrite(dns_lctx, DNS_LOGCATEGORY_DATABASE,\n\t\t       DNS_LOGMODULE_DLZ, ISC_LOG_DEBUG(level),\n\t\t       fmt, ap);\n\tva_end(ap);\n}\n\n/*\n * SDLZ methods\n */\n\nstatic isc_result_t\ndlopen_dlz_allnodes(const char *zone, void *driverarg, void *dbdata,\n\t\t    dns_sdlzallnodes_t *allnodes)\n{\n\tdlopen_data_t *cd = (dlopen_data_t *) dbdata;\n\tisc_result_t result;\n\n\n\tUNUSED(driverarg);\n\n\tif (cd->dlz_allnodes == NULL) {\n\t\treturn (ISC_R_NOPERM);\n\t}\n\n\tMAYBE_LOCK(cd);\n\tresult = cd->dlz_allnodes(zone, cd->dbdata, allnodes);\n\tMAYBE_UNLOCK(cd);\n\treturn (result);\n}\n\n\nstatic isc_result_t\ndlopen_dlz_allowzonexfr(void *driverarg, void *dbdata, const char *name,\n\t\t\tconst char *client)\n{\n\tdlopen_data_t *cd = (dlopen_data_t *) dbdata;\n\tisc_result_t result;\n\n\tUNUSED(driverarg);\n\n\n\tif (cd->dlz_allowzonexfr == NULL) {\n\t\treturn (ISC_R_NOPERM);\n\t}\n\n\tMAYBE_LOCK(cd);\n\tresult = cd->dlz_allowzonexfr(cd->dbdata, name, client);\n\tMAYBE_UNLOCK(cd);\n\treturn (result);\n}\n\nstatic isc_result_t\ndlopen_dlz_authority(const char *zone, void *driverarg, void *dbdata,\n\t\t   dns_sdlzlookup_t *lookup)\n{\n\tdlopen_data_t *cd = (dlopen_data_t *) dbdata;\n\tisc_result_t result;\n\n\tUNUSED(driverarg);\n\n\tif (cd->dlz_authority == NULL) {\n\t\treturn (ISC_R_NOTIMPLEMENTED);\n\t}\n\n\tMAYBE_LOCK(cd);\n\tresult = cd->dlz_authority(zone, cd->dbdata, lookup);\n\tMAYBE_UNLOCK(cd);\n\treturn (result);\n}\n\nstatic isc_result_t\ndlopen_dlz_findzonedb(void *driverarg, void *dbdata, const char *name,\n\t\t      dns_clientinfomethods_t *methods,\n\t\t      dns_clientinfo_t *clientinfo)\n{\n\tdlopen_data_t *cd = (dlopen_data_t *) dbdata;\n\tisc_result_t result;\n\n\tUNUSED(driverarg);\n\n\tMAYBE_LOCK(cd);\n\tresult = cd->dlz_findzonedb(cd->dbdata, name, methods, clientinfo);\n\tMAYBE_UNLOCK(cd);\n\treturn (result);\n}\n\n\nstatic isc_result_t\ndlopen_dlz_lookup(const char *zone, const char *name, void *driverarg,\n\t\t  void *dbdata, dns_sdlzlookup_t *lookup,\n\t\t  dns_clientinfomethods_t *methods,\n\t\t  dns_clientinfo_t *clientinfo)\n{\n\tdlopen_data_t *cd = (dlopen_data_t *) dbdata;\n\tisc_result_t result;\n\n\tUNUSED(driverarg);\n\n\tMAYBE_LOCK(cd);\n\tresult = cd->dlz_lookup(zone, name, cd->dbdata, lookup,\n\t\t\t\tmethods, clientinfo);\n\tMAYBE_UNLOCK(cd);\n\treturn (result);\n}\n\n/*\n * Load a symbol from the library\n */\nstatic void *\ndl_load_symbol(dlopen_data_t *cd, const char *symbol, bool mandatory) {\n\tvoid *ptr = GetProcAddress(cd->dl_handle, symbol);\n\tif (ptr == NULL && mandatory) {\n\t\tdlopen_log(ISC_LOG_ERROR,\n\t\t\t   \"dlz_dlopen: library '%s' is missing \"\n\t\t\t   \"required symbol '%s'\", cd->dl_path, symbol);\n\t}\n\treturn (ptr);\n}\n\n/*\n * Called at startup for each dlopen zone in named.conf\n */\nstatic isc_result_t\ndlopen_dlz_create(const char *dlzname, unsigned int argc, char *argv[],\n\t\t  void *driverarg, void **dbdata)\n{\n\tdlopen_data_t *cd;\n\tisc_mem_t *mctx = NULL;\n\tisc_result_t result = ISC_R_FAILURE;\n\tbool triedload = false;\n\n\tUNUSED(driverarg);\n\n\tif (argc < 2) {\n\t\tdlopen_log(ISC_LOG_ERROR,\n\t\t\t   \"dlz_dlopen driver for '%s' needs a path to \"\n\t\t\t   \"the shared library\", dlzname);\n\t\treturn (ISC_R_FAILURE);\n\t}\n\n\tisc_mem_create(0, 0, &mctx);\n\n\tcd = isc_mem_get(mctx, sizeof(*cd));\n\tif (cd == NULL) {\n\t\tisc_mem_destroy(&mctx);\n\t\treturn (ISC_R_NOMEMORY);\n\t}\n\tmemset(cd, 0, sizeof(*cd));\n\n\tcd->mctx = mctx;\n\n\tcd->dl_path = isc_mem_strdup(cd->mctx, argv[1]);\n\tif (cd->dl_path == NULL) {\n\t\tresult = ISC_R_NOMEMORY;\n\t\tgoto failed;\n\t}\n\n\tcd->dlzname = isc_mem_strdup(cd->mctx, dlzname);\n\tif (cd->dlzname == NULL) {\n\t\tresult = ISC_R_NOMEMORY;\n\t\tgoto failed;\n\t}\n\n\ttriedload = true;\n\n\t/* Initialize the lock */\n\tisc_mutex_init(&cd->lock);\n\n\t/* Open the library */\n\tcd->dl_handle = LoadLibraryA(cd->dl_path);\n\tif (cd->dl_handle == NULL) {\n\t\tunsigned int error = GetLastError();\n\n\t\tdlopen_log(ISC_LOG_ERROR,\n\t\t\t   \"dlz_dlopen failed to open library '%s' - %u\",\n\t\t\t   cd->dl_path, error);\n\t\tresult = ISC_R_FAILURE;\n\t\tgoto cleanup_lock;\n\t}\n\n\t/* Find the symbols */\n\tcd->dlz_version = (dlz_dlopen_version_t *)\n\t\tdl_load_symbol(cd, \"dlz_version\", true);\n\tcd->dlz_create = (dlz_dlopen_create_t *)\n\t\tdl_load_symbol(cd, \"dlz_create\", true);\n\tcd->dlz_lookup = (dlz_dlopen_lookup_t *)\n\t\tdl_load_symbol(cd, \"dlz_lookup\", true);\n\tcd->dlz_findzonedb = (dlz_dlopen_findzonedb_t *)\n\t\tdl_load_symbol(cd, \"dlz_findzonedb\", true);\n\n\tif (cd->dlz_create == NULL ||\n\t    cd->dlz_version == NULL ||\n\t    cd->dlz_lookup == NULL ||\n\t    cd->dlz_findzonedb == NULL)\n\t{\n\t\t/* We're missing a required symbol */\n\t\tresult = ISC_R_FAILURE;\n\t\tgoto cleanup_lock;\n\t}\n\n\tcd->dlz_allowzonexfr = (dlz_dlopen_allowzonexfr_t *)\n\t\tdl_load_symbol(cd, \"dlz_allowzonexfr\", false);\n\tcd->dlz_allnodes = (dlz_dlopen_allnodes_t *)\n\t\tdl_load_symbol(cd, \"dlz_allnodes\",\n\t\t\t       (cd->dlz_allowzonexfr != NULL));\n\tcd->dlz_authority = (dlz_dlopen_authority_t *)\n\t\tdl_load_symbol(cd, \"dlz_authority\", false);\n\tcd->dlz_newversion = (dlz_dlopen_newversion_t *)\n\t\tdl_load_symbol(cd, \"dlz_newversion\", false);\n\tcd->dlz_closeversion = (dlz_dlopen_closeversion_t *)\n\t\tdl_load_symbol(cd, \"dlz_closeversion\",\n\t\t\t       (cd->dlz_newversion != NULL));\n\tcd->dlz_configure = (dlz_dlopen_configure_t *)\n\t\tdl_load_symbol(cd, \"dlz_configure\", false);\n\tcd->dlz_ssumatch = (dlz_dlopen_ssumatch_t *)\n\t\tdl_load_symbol(cd, \"dlz_ssumatch\", false);\n\tcd->dlz_addrdataset = (dlz_dlopen_addrdataset_t *)\n\t\tdl_load_symbol(cd, \"dlz_addrdataset\", false);\n\tcd->dlz_subrdataset = (dlz_dlopen_subrdataset_t *)\n\t\tdl_load_symbol(cd, \"dlz_subrdataset\", false);\n\tcd->dlz_delrdataset = (dlz_dlopen_delrdataset_t *)\n\t\tdl_load_symbol(cd, \"dlz_delrdataset\", false);\n\n\t/* Check the version of the API is the same */\n\tcd->version = cd->dlz_version(&cd->flags);\n\tif (cd->version < (DLZ_DLOPEN_VERSION - DLZ_DLOPEN_AGE) ||\n\t    cd->version > DLZ_DLOPEN_VERSION)\n\t{\n\t\tdlopen_log(ISC_LOG_ERROR,\n\t\t\t   \"dlz_dlopen: %s: incorrect driver API version %d, \"\n\t\t\t   \"requires %d\",\n\t\t\t   cd->dl_path, cd->version, DLZ_DLOPEN_VERSION);\n\t\tresult = ISC_R_FAILURE;\n\t\tgoto cleanup_lock;\n\t}\n\n\t/*\n\t * Call the library's create function. Note that this is an\n\t * extended version of dlz create, with the addition of\n\t * named function pointers for helper functions that the\n\t * driver will need. This avoids the need for the backend to\n\t * link the BIND9 libraries\n\t */\n\tMAYBE_LOCK(cd);\n\tresult = cd->dlz_create(dlzname, argc-1, argv+1,\n\t\t\t\t&cd->dbdata,\n\t\t\t\t\"log\", dlopen_log,\n\t\t\t\t\"putrr\", dns_sdlz_putrr,\n\t\t\t\t\"putnamedrr\", dns_sdlz_putnamedrr,\n\t\t\t\t\"writeable_zone\", dns_dlz_writeablezone,\n\t\t\t\tNULL);\n\tMAYBE_UNLOCK(cd);\n\tif (result != ISC_R_SUCCESS)\n\t\tgoto cleanup_lock;\n\n\t*dbdata = cd;\n\n\treturn (ISC_R_SUCCESS);\n\ncleanup_lock:\n\tisc_mutex_destroy(&cd->lock);\nfailed:\n\tdlopen_log(ISC_LOG_ERROR, \"dlz_dlopen of '%s' failed\", dlzname);\n\tif (cd->dl_path) {\n\t\tisc_mem_free(mctx, cd->dl_path);\n\t}\n\tif (cd->dlzname) {\n\t\tisc_mem_free(mctx, cd->dlzname);\n\t}\n\tif (triedload) {\n\t\tisc_mutex_destroy(&cd->lock);\n\t}\n\tif (cd->dl_handle) {\n\t\tFreeLibrary(cd->dl_handle);\n\t}\n\tisc_mem_put(mctx, cd, sizeof(*cd));\n\tisc_mem_destroy(&mctx);\n\treturn (result);\n}\n\n\n/*\n * Called when bind is shutting down\n */\nstatic void\ndlopen_dlz_destroy(void *driverarg, void *dbdata) {\n\tdlopen_data_t *cd = (dlopen_data_t *) dbdata;\n\tisc_mem_t *mctx;\n\n\tUNUSED(driverarg);\n\n\tif (cd->dlz_destroy) {\n\t\tMAYBE_LOCK(cd);\n\t\tcd->dlz_destroy(cd->dbdata);\n\t\tMAYBE_UNLOCK(cd);\n\t}\n\n\tif (cd->dl_path)\n\t\tisc_mem_free(cd->mctx, cd->dl_path);\n\tif (cd->dlzname)\n\t\tisc_mem_free(cd->mctx, cd->dlzname);\n\n\tif (cd->dl_handle)\n\t\tFreeLibrary(cd->dl_handle);\n\n\tisc_mutex_destroy(&cd->lock);\n\n\tmctx = cd->mctx;\n\tisc_mem_put(mctx, cd, sizeof(*cd));\n\tisc_mem_destroy(&mctx);\n}\n\n/*\n * Called to start a transaction\n */\nstatic isc_result_t\ndlopen_dlz_newversion(const char *zone, void *driverarg, void *dbdata,\n\t\t      void **versionp)\n{\n\tdlopen_data_t *cd = (dlopen_data_t *) dbdata;\n\tisc_result_t result;\n\n\tUNUSED(driverarg);\n\n\tif (cd->dlz_newversion == NULL)\n\t\treturn (ISC_R_NOTIMPLEMENTED);\n\n\tMAYBE_LOCK(cd);\n\tresult = cd->dlz_newversion(zone, cd->dbdata, versionp);\n\tMAYBE_UNLOCK(cd);\n\treturn (result);\n}\n\n/*\n * Called to end a transaction\n */\nstatic void\ndlopen_dlz_closeversion(const char *zone, bool commit,\n\t\t\tvoid *driverarg, void *dbdata, void **versionp)\n{\n\tdlopen_data_t *cd = (dlopen_data_t *) dbdata;\n\n\tUNUSED(driverarg);\n\n\tif (cd->dlz_newversion == NULL) {\n\t\t*versionp = NULL;\n\t\treturn;\n\t}\n\n\tMAYBE_LOCK(cd);\n\tcd->dlz_closeversion(zone, commit, cd->dbdata, versionp);\n\tMAYBE_UNLOCK(cd);\n}\n\n/*\n * Called on startup to configure any writeable zones\n */\nstatic isc_result_t\ndlopen_dlz_configure(dns_view_t *view, dns_dlzdb_t *dlzdb,\n\t\t     void *driverarg, void *dbdata)\n{\n\tdlopen_data_t *cd = (dlopen_data_t *) dbdata;\n\tisc_result_t result;\n\n\tUNUSED(driverarg);\n\n\tif (cd->dlz_configure == NULL)\n\t\treturn (ISC_R_SUCCESS);\n\n\tMAYBE_LOCK(cd);\n\tcd->in_configure = true;\n\tresult = cd->dlz_configure(view, dlzdb, cd->dbdata);\n\tcd->in_configure = false;\n\tMAYBE_UNLOCK(cd);\n\n\treturn (result);\n}\n\n\n/*\n * Check for authority to change a name\n */\nstatic bool\ndlopen_dlz_ssumatch(const char *signer, const char *name, const char *tcpaddr,\n\t\t    const char *type, const char *key, uint32_t keydatalen,\n\t\t    unsigned char *keydata, void *driverarg, void *dbdata)\n{\n\tdlopen_data_t *cd = (dlopen_data_t *) dbdata;\n\tbool ret;\n\n\tUNUSED(driverarg);\n\n\tif (cd->dlz_ssumatch == NULL)\n\t\treturn (false);\n\n\tMAYBE_LOCK(cd);\n\tret = cd->dlz_ssumatch(signer, name, tcpaddr, type, key, keydatalen,\n\t\t\t       keydata, cd->dbdata);\n\tMAYBE_UNLOCK(cd);\n\n\treturn (ret);\n}\n\n\n/*\n * Add an rdataset\n */\nstatic isc_result_t\ndlopen_dlz_addrdataset(const char *name, const char *rdatastr,\n\t\t       void *driverarg, void *dbdata, void *version)\n{\n\tdlopen_data_t *cd = (dlopen_data_t *) dbdata;\n\tisc_result_t result;\n\n\tUNUSED(driverarg);\n\n\tif (cd->dlz_addrdataset == NULL)\n\t\treturn (ISC_R_NOTIMPLEMENTED);\n\n\tMAYBE_LOCK(cd);\n\tresult = cd->dlz_addrdataset(name, rdatastr, cd->dbdata, version);\n\tMAYBE_UNLOCK(cd);\n\n\treturn (result);\n}\n\n/*\n * Subtract an rdataset\n */\nstatic isc_result_t\ndlopen_dlz_subrdataset(const char *name, const char *rdatastr,\n\t\t       void *driverarg, void *dbdata, void *version)\n{\n\tdlopen_data_t *cd = (dlopen_data_t *) dbdata;\n\tisc_result_t result;\n\n\tUNUSED(driverarg);\n\n\tif (cd->dlz_subrdataset == NULL)\n\t\treturn (ISC_R_NOTIMPLEMENTED);\n\n\tMAYBE_LOCK(cd);\n\tresult = cd->dlz_subrdataset(name, rdatastr, cd->dbdata, version);\n\tMAYBE_UNLOCK(cd);\n\n\treturn (result);\n}\n\n/*\n  delete a rdataset\n */\nstatic isc_result_t\ndlopen_dlz_delrdataset(const char *name, const char *type,\n\t\t       void *driverarg, void *dbdata, void *version)\n{\n\tdlopen_data_t *cd = (dlopen_data_t *) dbdata;\n\tisc_result_t result;\n\n\tUNUSED(driverarg);\n\n\tif (cd->dlz_delrdataset == NULL)\n\t\treturn (ISC_R_NOTIMPLEMENTED);\n\n\tMAYBE_LOCK(cd);\n\tresult = cd->dlz_delrdataset(name, type, cd->dbdata, version);\n\tMAYBE_UNLOCK(cd);\n\n\treturn (result);\n}\n\n\nstatic dns_sdlzmethods_t dlz_dlopen_methods = {\n\tdlopen_dlz_create,\n\tdlopen_dlz_destroy,\n\tdlopen_dlz_findzonedb,\n\tdlopen_dlz_lookup,\n\tdlopen_dlz_authority,\n\tdlopen_dlz_allnodes,\n\tdlopen_dlz_allowzonexfr,\n\tdlopen_dlz_newversion,\n\tdlopen_dlz_closeversion,\n\tdlopen_dlz_configure,\n\tdlopen_dlz_ssumatch,\n\tdlopen_dlz_addrdataset,\n\tdlopen_dlz_subrdataset,\n\tdlopen_dlz_delrdataset\n};\n#endif\n\n/*\n * Register driver with BIND\n */\nisc_result_t\ndlz_dlopen_init(isc_mem_t *mctx) {\n#ifndef ISC_DLZ_DLOPEN\n\tUNUSED(mctx);\n\treturn (ISC_R_NOTIMPLEMENTED);\n#else\n\tisc_result_t result;\n\n\tdlopen_log(2, \"Registering DLZ_dlopen driver\");\n\n\tresult = dns_sdlzregister(\"dlopen\", &dlz_dlopen_methods, NULL,\n\t\t\t\t  DNS_SDLZFLAG_RELATIVEOWNER |\n\t\t\t\t  DNS_SDLZFLAG_RELATIVERDATA |\n\t\t\t\t  DNS_SDLZFLAG_THREADSAFE,\n\t\t\t\t  mctx, &dlz_dlopen);\n\n\tif (result != ISC_R_SUCCESS) {\n\t\tUNEXPECTED_ERROR(__FILE__, __LINE__,\n\t\t\t\t \"dns_sdlzregister() failed: %s\",\n\t\t\t\t isc_result_totext(result));\n\t\tresult = ISC_R_UNEXPECTED;\n\t}\n\n\treturn (result);\n#endif\n}\n\n\n/*\n * Unregister the driver\n */\nvoid\ndlz_dlopen_clear(void) {\n#ifdef ISC_DLZ_DLOPEN\n\tdlopen_log(2, \"Unregistering DLZ_dlopen driver\");\n\tif (dlz_dlopen != NULL)\n\t\tdns_sdlzunregister(&dlz_dlopen);\n#endif\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/bin/tests/.gitignore": ".libs\nheaderdep_test.sh\nnxtify\nsdig\n*_test\ngsstest\nconf.sh\ndlopen\nkeycreate\nkeydelete\ngssapi_krb\nmakejournal\n",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/bin/tests/system/feature-test.c": "/*\n * Copyright (C) Internet Systems Consortium, Inc. (\"ISC\")\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n *\n * See the COPYRIGHT file distributed with this work for additional\n * information regarding copyright ownership.\n */\n\n#include <config.h>\n\n#include <unistd.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#include <isc/print.h>\n#include <isc/util.h>\n#include <isc/net.h>\n#include <dns/edns.h>\n\n#ifdef WIN32\n#include <Winsock2.h>\n#endif\n\n#ifndef MAXHOSTNAMELEN\n#ifdef HOST_NAME_MAX\n#define MAXHOSTNAMELEN HOST_NAME_MAX\n#else\n#define MAXHOSTNAMELEN 256\n#endif\n#endif\n\nstatic void\nusage() {\n\tfprintf(stderr, \"usage: feature-test <arg>\\n\");\n\tfprintf(stderr, \"args:\\n\");\n\tfprintf(stderr, \"\t--edns-version\\n\");\n\tfprintf(stderr, \"\t--enable-dnsrps\\n\");\n\tfprintf(stderr, \"\t--gethostname\\n\");\n\tfprintf(stderr, \"\t--gssapi\\n\");\n\tfprintf(stderr, \"\t--have-dlopen\\n\");\n\tfprintf(stderr, \"\t--have-geoip\\n\");\n\tfprintf(stderr, \"\t--have-geoip2\\n\");\n\tfprintf(stderr, \"\t--have-libxml2\\n\");\n\tfprintf(stderr, \"\t--ipv6only=no\\n\");\n\tfprintf(stderr, \"\t--with-idn\\n\");\n\tfprintf(stderr, \"\t--with-lmdb\\n\");\n\tfprintf(stderr, \"\t--with-dlz-filesystem\\n\");\n}\n\nint\nmain(int argc, char **argv) {\n\tif (argc != 2) {\n\t\tusage();\n\t\treturn (1);\n\t}\n\n\tif (strcmp(argv[1], \"--enable-dnsrps\") == 0) {\n#ifdef USE_DNSRPS\n\t\treturn (0);\n#else\n\t\treturn (1);\n#endif\n\t}\n\n\tif (strcmp(argv[1], \"--edns-version\") == 0) {\n#ifdef DNS_EDNS_VERSION\n\t\tprintf(\"%d\\n\", DNS_EDNS_VERSION);\n#else\n\t\tprintf(\"0\\n\");\n#endif\n\t\treturn (0);\n\t}\n\n\tif (strcmp(argv[1], \"--gethostname\") == 0) {\n\t\tchar hostname[MAXHOSTNAMELEN];\n\t\tint n;\n#ifdef WIN32\n\t\t/* From InitSocket() */\n\t\tWORD wVersionRequested;\n\t\tWSADATA wsaData;\n\t\tint err;\n\n\t\twVersionRequested = MAKEWORD(2, 0);\n\t\terr = WSAStartup( wVersionRequested, &wsaData );\n\t\tif (err != 0) {\n\t\t\tfprintf(stderr, \"WSAStartup() failed: %d\\n\", err);\n\t\t\texit(1);\n\t\t}\n#endif\n\n\t\tn = gethostname(hostname, sizeof(hostname));\n\t\tif (n == -1) {\n\t\t\tperror(\"gethostname\");\n\t\t\treturn(1);\n\t\t}\n\t\tfprintf(stdout, \"%s\\n\", hostname);\n#ifdef WIN32\n\t\tWSACleanup();\n#endif\n\t\treturn (0);\n\t}\n\n\tif (strcmp(argv[1], \"--gssapi\") == 0) {\n#if defined(GSSAPI)\n\t\treturn (0);\n#else\n\t\treturn (1);\n#endif\n\t}\n\n\tif (strcmp(argv[1], \"--have-dlopen\") == 0) {\n#if defined(HAVE_DLOPEN) && defined(ISC_DLZ_DLOPEN)\n\t\treturn (0);\n#else\n\t\treturn (1);\n#endif\n\t}\n\n\tif (strcmp(argv[1], \"--have-geoip\") == 0) {\n#ifdef HAVE_GEOIP\n\t\treturn (0);\n#else\n\t\treturn (1);\n#endif\n\t}\n\n\tif (strcmp(argv[1], \"--have-geoip2\") == 0) {\n#ifdef HAVE_GEOIP2\n\t\treturn (0);\n#else\n\t\treturn (1);\n#endif\n\t}\n\n\tif (strcmp(argv[1], \"--have-libxml2\") == 0) {\n#ifdef HAVE_LIBXML2\n\t\treturn (0);\n#else\n\t\treturn (1);\n#endif\n\t}\n\n\tif (strcmp(argv[1], \"--with-idn\") == 0) {\n#ifdef HAVE_LIBIDN2\n\t\treturn (0);\n#else\n\t\treturn (1);\n#endif\n\t}\n\n\tif (strcmp(argv[1], \"--with-lmdb\") == 0) {\n#ifdef HAVE_LMDB\n\t\treturn (0);\n#else\n\t\treturn (1);\n#endif\n\t}\n\n\tif (strcmp(argv[1], \"--with-dlz-filesystem\") == 0) {\n#ifdef DLZ_FILESYSTEM\n\t\treturn (0);\n#else\n\t\treturn (1);\n#endif\n\t}\n\n\tif (strcmp(argv[1], \"--ipv6only=no\") == 0) {\n#ifdef WIN32\n\t\treturn (0);\n#elif defined(IPPROTO_IPV6) && defined(IPV6_V6ONLY)\n\t\tint s;\n\t\tint n = -1;\n\t\tint v6only = -1;\n\t\tsocklen_t len = sizeof(v6only);\n\n\t\ts = socket(AF_INET6, SOCK_DGRAM, IPPROTO_UDP);\n\t\tif (s >= 0) {\n\t\t\tn = getsockopt(s, IPPROTO_IPV6, IPV6_V6ONLY,\n\t\t\t\t       (void *)&v6only, &len);\n\t\t\tclose(s);\n\t\t}\n\t\treturn ((n == 0 && v6only == 0) ? 0 : 1);\n#else\n\t\treturn (1);\n#endif\n\t}\n\n\tfprintf(stderr, \"unknown arg: %s\\n\", argv[1]);\n\tusage();\n\treturn (1);\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/bin/tests/system/filter-aaaa/prereq.sh": "#!/bin/sh\n#\n# Copyright (C) Internet Systems Consortium, Inc. (\"ISC\")\n#\n# This Source Code Form is subject to the terms of the Mozilla Public\n# License, v. 2.0. If a copy of the MPL was not distributed with this\n# file, You can obtain one at http://mozilla.org/MPL/2.0/.\n#\n# See the COPYRIGHT file distributed with this work for additional\n# information regarding copyright ownership.\n\nSYSTEMTESTTOP=..\n. $SYSTEMTESTTOP/conf.sh\n\n$FEATURETEST --have-dlopen ||  {\n        echo_i \"dlopen() not supported - skipping filter-aaaa test\"\n        exit 255\n}\nexit 0\n",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/bin/tests/system/rpz/dnsrps.c": "/*\n * Copyright (C) Internet Systems Consortium, Inc. (\"ISC\")\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n *\n * See the COPYRIGHT file distributed with this work for additional\n * information regarding copyright ownership.\n */\n\n/*\n * -a\t\texit(0) if dnsrps is available or dlopen() msg if not\n * -p\t\tprint the path to dnsrpzd configured in dnsrps so that\n *\t\t    dnsrpzd can be run by a setup.sh script.\n *\t\t    Exit(1) if dnsrps is not available\n * -n domain\tprint the serial number of a domain to check if a new\n *\t\t    version of a policy zone has been transferred to dnsrpzd.\n *\t\t    Exit(1) if dnsrps is not available\n * -w sec.ond\twait for seconds, because `sleep 0.1` is not portable\n */\n\n#include <config.h>\n\n#include <inttypes.h>\n\n#include <errno.h>\n#include <stdbool.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <stdint.h>\n#include <string.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <unistd.h>\n\n#include <isc/print.h>\n#include <isc/util.h>\n\n#ifdef USE_DNSRPS\n#define LIBRPZ_LIB_OPEN DNSRPS_LIB_OPEN\n#include <dns/librpz.h>\n\nlibrpz_t *librpz;\n#else\ntypedef struct {char c[120];} librpz_emsg_t;\n#endif\n\n\nstatic bool link_dnsrps(librpz_emsg_t *emsg);\n\n\n#define USAGE \"usage: [-ap] [-n domain] [-w sec.onds]\\n\"\n\nint\nmain(int argc, char **argv) {\n#ifdef USE_DNSRPS\n\tchar cstr[sizeof(\"zone \")+1024+10];\n\tlibrpz_clist_t *clist;\n\tlibrpz_client_t *client;\n\tlibrpz_rsp_t *rsp;\n\tuint32_t serial;\n#endif\n\tdouble seconds;\n\tlibrpz_emsg_t emsg;\n\tchar *p;\n\tint i;\n\n\twhile ((i = getopt(argc, argv, \"apn:w:\")) != -1) {\n\t\tswitch (i) {\n\t\tcase 'a':\n\t\t\tif (!link_dnsrps(&emsg)) {\n\t\t\t\tprintf(\"I:%s\\n\", emsg.c);\n\t\t\t\treturn (1);\n\t\t\t}\n\t\t\treturn (0);\n\n\t\tcase 'p':\n\t\t\tif (!link_dnsrps(&emsg)) {\n\t\t\t\tfprintf(stderr, \"## %s\\n\", emsg.c);\n\t\t\t\treturn (1);\n\t\t\t}\n#ifdef USE_DNSRPS\n\t\t\tprintf(\"%s\\n\", librpz->dnsrpzd_path);\n#else\n\t\t\tINSIST(0);\n\t\t\tISC_UNREACHABLE();\n#endif\n\t\t\treturn (0);\n\n\t\tcase 'n':\n\t\t\tif (!link_dnsrps(&emsg)) {\n\t\t\t\tfprintf(stderr, \"## %s\\n\", emsg.c);\n\t\t\t\treturn (1);\n\t\t\t}\n#ifdef USE_DNSRPS\n\t\t\t/*\n\t\t\t * Get the serial number of a policy zone from\n\t\t\t * a running dnsrpzd daemon.\n\t\t\t */\n\t\t\tclist = librpz->clist_create(&emsg, NULL, NULL,\n\t\t\t\t\t\t     NULL, NULL, NULL);\n\t\t\tif (clist == NULL) {\n\t\t\t\tfprintf(stderr, \"## %s: %s\\n\", optarg, emsg.c);\n\t\t\t\treturn (1);\n\t\t\t}\n\t\t\tsnprintf(cstr, sizeof(cstr),\n\t\t\t\t \"zone %s; dnsrpzd \\\"\\\";\"\n\t\t\t\t \" dnsrpzd-sock dnsrpzd.sock;\"\n\t\t\t\t \" dnsrpzd-rpzf dnsrpzd.rpzf\",\n\t\t\t\t optarg);\n\t\t\tclient = librpz->client_create(&emsg, clist,\n\t\t\t\t\t\t       cstr, true);\n\t\t\tif (client == NULL) {\n\t\t\t\tfprintf(stderr, \"## %s\\n\", emsg.c);\n\t\t\t\treturn (1);\n\t\t\t}\n\n\t\t\trsp = NULL;\n\t\t\tif (!librpz->rsp_create(&emsg, &rsp, NULL,\n\t\t\t\t\t\tclient, true, false) ||\n\t\t\t    rsp == NULL) {\n\t\t\t\tfprintf(stderr, \"## %s\\n\", emsg.c);\n\t\t\t\tlibrpz->client_detach(&client);\n\t\t\t\treturn (1);\n\t\t\t}\n\n\t\t\tif (!librpz->soa_serial(&emsg, &serial, optarg, rsp)) {\n\t\t\t\tfprintf(stderr, \"## %s\\n\", emsg.c);\n\t\t\t\tlibrpz->client_detach(&client);\n\t\t\t\treturn (1);\n\t\t\t}\n\t\t\tlibrpz->rsp_detach(&rsp);\n\t\t\tlibrpz->client_detach(&client);\n\t\t\tprintf(\"%u\\n\", serial);\n#else\n\t\t\tINSIST(0);\n\t\t\tISC_UNREACHABLE();\n#endif\n\t\t\treturn (0);\n\n\t\tcase 'w':\n\t\t\tseconds = strtod(optarg, &p);\n\t\t\tif (seconds <= 0 || *p != '\\0') {\n\t\t\t\tfputs(USAGE, stderr);\n\t\t\t\treturn (1);\n\t\t\t}\n\t\t\tusleep((int)(seconds*1000.0*1000.0));\n\t\t\treturn (0);\n\n\t\tdefault:\n\t\t\tfputs(USAGE, stderr);\n\t\t\treturn (1);\n\t\t}\n\t}\n\tfputs(USAGE, stderr);\n\treturn (1);\n}\n\n\nstatic bool\nlink_dnsrps(librpz_emsg_t *emsg) {\n#ifdef USE_DNSRPS\n\tlibrpz = librpz_lib_open(emsg, NULL, DNSRPS_LIBRPZ_PATH);\n\tif (librpz == NULL)\n\t\treturn (false);\n\n\treturn (true);\n#else\n\tsnprintf(emsg->c, sizeof(emsg->c), \"DNSRPS not configured\");\n\treturn (false);\n#endif\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/bin/tests/system/checkconf/altdlz.conf": "/*\n * Copyright (C) Internet Systems Consortium, Inc. (\"ISC\")\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n *\n * See the COPYRIGHT file distributed with this work for additional\n * information regarding copyright ownership.\n */\n\ndlz external {\n\tdatabase \"dlopen driver.so\";\n\tsearch no;\n};\n\nzone \"example.com\" {\n\ttype master;\n\tdlz external;\n};\n\nzone \".\" {\n\ttype redirect;\n\tdlz external;\n};\n",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/bin/tests/system/dyndb/prereq.sh": "#!/bin/sh\n#\n# Copyright (C) Internet Systems Consortium, Inc. (\"ISC\")\n#\n# This Source Code Form is subject to the terms of the Mozilla Public\n# License, v. 2.0. If a copy of the MPL was not distributed with this\n# file, You can obtain one at http://mozilla.org/MPL/2.0/.\n#\n# See the COPYRIGHT file distributed with this work for additional\n# information regarding copyright ownership.\n\nSYSTEMTESTTOP=..\n. $SYSTEMTESTTOP/conf.sh\n\n$FEATURETEST --have-dlopen ||  {\n        echo_i \"dlopen() not supported - skipping dyndb test\"\n        exit 255\n}\nexit 0\n",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/bin/tests/system/dyndb/driver/driver.c": "/*\n * Driver API implementation and main entry point for BIND.\n *\n * BIND calls dyndb_version() before loading, dyndb_init() during startup\n * and dyndb_destroy() during shutdown.\n *\n * It is completely up to implementation what to do.\n *\n * dyndb <name> <driver> {} sections in named.conf are independent so\n * driver init() and destroy() functions are called independently for\n * each section even if they reference the same driver/library. It is\n * up to driver implementation to detect and catch this situation if\n * it is undesirable.\n *\n * Copyright (C) 2009-2015  Red Hat ; see COPYRIGHT for license\n */\n\n#include <config.h>\n\n#include <isc/commandline.h>\n#include <isc/hash.h>\n#include <isc/mem.h>\n#include <isc/lib.h>\n#include <isc/util.h>\n\n#include <dns/db.h>\n#include <dns/dyndb.h>\n#include <dns/lib.h>\n#include <dns/types.h>\n\n#include \"db.h\"\n#include \"log.h\"\n#include \"instance.h\"\n#include \"util.h\"\n\ndns_dyndb_destroy_t dyndb_destroy;\ndns_dyndb_register_t dyndb_init;\ndns_dyndb_version_t dyndb_version;\n\n/*\n * Driver init is called for each dyndb section in named.conf\n * once during startup and then again on every reload.\n *\n * @code\n * dyndb example-name \"sample.so\" { param1 param2 };\n * @endcode\n *\n * @param[in] name        User-defined string from dyndb \"name\" {}; definition\n *                        in named.conf.\n *                        The example above will have name = \"example-name\".\n * @param[in] parameters  User-defined parameters from dyndb section as one\n *                        string. The example above will have\n *                        params = \"param1 param2\";\n * @param[in] file\t  The name of the file from which the parameters\n *                        were read.\n * @param[in] line\t  The line number from which the parameters were read.\n * @param[out] instp      Pointer to instance-specific data\n *                        (for one dyndb section).\n */\nisc_result_t\ndyndb_init(isc_mem_t *mctx, const char *name, const char *parameters,\n\t   const char *file, unsigned long line,\n\t   const dns_dyndbctx_t *dctx, void **instp)\n{\n\tisc_result_t result;\n\tunsigned int argc;\n\tchar **argv = NULL;\n\tchar *s = NULL;\n\tsample_instance_t *sample_inst = NULL;\n\n\tREQUIRE(name != NULL);\n\tREQUIRE(dctx != NULL);\n\n\t/*\n\t * Depending on how dlopen() was called, we may not have\n\t * access to named's global namespace, in which case we need\n\t * to initialize libisc/libdns\n\t */\n\tif (dctx->refvar != &isc_bind9) {\n\t\tisc_lib_register();\n\t\tisc_log_setcontext(dctx->lctx);\n\t\tdns_log_setcontext(dctx->lctx);\n\t\tisc_hash_set_initializer(dctx->hashinit);\n\t}\n\n\ts = isc_mem_strdup(mctx, parameters);\n\tif (s == NULL) {\n\t\tresult = ISC_R_NOMEMORY;\n\t\tgoto cleanup;\n\t}\n\n\tresult = isc_commandline_strtoargv(mctx, s, &argc, &argv, 0);\n\tif (result != ISC_R_SUCCESS) {\n\t\tlog_write(ISC_LOG_ERROR,\n\t\t\t  \"dyndb_init: isc_commandline_strtoargv -> %s\\n\",\n\t\t\t  isc_result_totext(result));\n\t\tgoto cleanup;\n\t}\n\n\tlog_write(ISC_LOG_DEBUG(9),\n\t\t  \"loading params for dyndb '%s' from %s:%lu\",\n\t\t  name, file, line);\n\n\t/* Finally, create the instance. */\n\tresult = new_sample_instance(mctx, name, argc, argv, dctx,\n\t\t\t\t     &sample_inst);\n\tif (result != ISC_R_SUCCESS) {\n\t\tlog_write(ISC_LOG_ERROR,\n\t\t\t  \"dyndb_init: new_sample_instance -> %s\\n\",\n\t\t\t  isc_result_totext(result));\n\t\tgoto cleanup;\n\t}\n\n\t/*\n\t * This is an example so we create and load zones\n\t * right now.  This step can be arbitrarily postponed.\n\t */\n\tresult = load_sample_instance_zones(sample_inst);\n\tif (result != ISC_R_SUCCESS) {\n\t\tlog_write(ISC_LOG_ERROR,\n\t\t\t  \"dyndb_init: load_sample_instance_zones -> %s\\n\",\n\t\t\t  isc_result_totext(result));\n\t\tgoto cleanup;\n\t}\n\n\t*instp = sample_inst;\n\n cleanup:\n\tif (s != NULL)\n\t\tisc_mem_free(mctx, s);\n\tif (argv != NULL)\n\t\tisc_mem_put(mctx, argv, argc * sizeof(*argv));\n\n\treturn (result);\n}\n\n/*\n * Driver destroy is called for every instance on every reload and then once\n * during shutdown.\n *\n * @param[out] instp Pointer to instance-specific data (for one dyndb section).\n */\nvoid\ndyndb_destroy(void **instp) {\n\tdestroy_sample_instance((sample_instance_t **)instp);\n}\n\n/*\n * Driver version is called when loading the driver to ensure there\n * is no API mismatch betwen the driver and the caller.\n */\nint\ndyndb_version(unsigned int *flags) {\n\tUNUSED(flags);\n\n\treturn (DNS_DYNDB_VERSION);\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/bin/tests/system/dlzexternal/driver.h": "/*\n * Copyright (C) Internet Systems Consortium, Inc. (\"ISC\")\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n *\n * See the COPYRIGHT file distributed with this work for additional\n * information regarding copyright ownership.\n */\n\n\n/*\n * This header includes the declarations of entry points.\n */\n\ndlz_dlopen_version_t dlz_version;\ndlz_dlopen_create_t dlz_create;\ndlz_dlopen_destroy_t dlz_destroy;\ndlz_dlopen_findzonedb_t dlz_findzonedb;\ndlz_dlopen_lookup_t dlz_lookup;\ndlz_dlopen_allowzonexfr_t dlz_allowzonexfr;\ndlz_dlopen_allnodes_t dlz_allnodes;\ndlz_dlopen_newversion_t dlz_newversion;\ndlz_dlopen_closeversion_t dlz_closeversion;\ndlz_dlopen_configure_t dlz_configure;\ndlz_dlopen_ssumatch_t dlz_ssumatch;\ndlz_dlopen_addrdataset_t dlz_addrdataset;\ndlz_dlopen_subrdataset_t dlz_subrdataset;\ndlz_dlopen_delrdataset_t dlz_delrdataset;\n",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/bin/tests/system/dlzexternal/prereq.sh": "#!/bin/sh\n#\n# Copyright (C) Internet Systems Consortium, Inc. (\"ISC\")\n#\n# This Source Code Form is subject to the terms of the Mozilla Public\n# License, v. 2.0. If a copy of the MPL was not distributed with this\n# file, You can obtain one at http://mozilla.org/MPL/2.0/.\n#\n# See the COPYRIGHT file distributed with this work for additional\n# information regarding copyright ownership.\n\nSYSTEMTESTTOP=..\n. $SYSTEMTESTTOP/conf.sh\n\n$FEATURETEST --have-dlopen ||  {\n        echo_i \"dlopen() not supported - skipping dlzexternal test\"\n        exit 255\n}\nexit 0\n",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/bin/tests/system/dlzexternal/driver.c": "/*\n * Copyright (C) Internet Systems Consortium, Inc. (\"ISC\")\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n *\n * See the COPYRIGHT file distributed with this work for additional\n * information regarding copyright ownership.\n */\n\n/*\n * This provides a very simple example of an external loadable DLZ\n * driver, with update support.\n */\n\n#include <config.h>\n\n#include <stdbool.h>\n#include <stdio.h>\n#include <inttypes.h>\n#include <stdlib.h>\n#include <stdarg.h>\n\n#include <isc/log.h>\n#include <isc/result.h>\n#include <isc/string.h>\n#include <isc/types.h>\n#include <isc/util.h>\n\n#include <dns/types.h>\n#include <dns/dlz_dlopen.h>\n\n#include \"driver.h\"\n\n#define CHECK(x) \\\n\tdo { \\\n\t\tresult = (x); \\\n\t\tif (result != ISC_R_SUCCESS) \\\n\t\t\tgoto failure; \\\n\t} while (0)\n\n#define loginfo(...) \\\n\t({ if ((state != NULL) && (state->log != NULL)) \\\n\t\t state->log(ISC_LOG_INFO, __VA_ARGS__); })\n#define logerr(...) \\\n\t({ if ((state != NULL) && (state->log != NULL)) \\\n\t\t state->log(ISC_LOG_ERROR, __VA_ARGS__); })\n\n/* For this simple example, use fixed sized strings */\nstruct record {\n\tchar name[100];\n\tchar type[10];\n\tchar data[200];\n\tdns_ttl_t ttl;\n};\n\n#define MAX_RECORDS 100\n\ntypedef void log_t(int level, const char *fmt, ...);\n\nstruct dlz_example_data {\n\tchar *zone_name;\n\n\t/* An example driver doesn't need good memory management :-) */\n\tstruct record current[MAX_RECORDS];\n\tstruct record adds[MAX_RECORDS];\n\tstruct record deletes[MAX_RECORDS];\n\n\tbool transaction_started;\n\n\t/* Helper functions from the dlz_dlopen driver */\n\tlog_t *log;\n\tdns_sdlz_putrr_t *putrr;\n\tdns_sdlz_putnamedrr_t *putnamedrr;\n\tdns_dlz_writeablezone_t *writeable_zone;\n};\n\nstatic bool\nsingle_valued(const char *type) {\n\tconst char *single[] = { \"soa\", \"cname\", NULL };\n\tint i;\n\n\tfor (i = 0; single[i]; i++) {\n\t\tif (strcasecmp(single[i], type) == 0) {\n\t\t\treturn (true);\n\t\t}\n\t}\n\treturn (false);\n}\n\n/*\n * Add a record to a list\n */\nstatic isc_result_t\nadd_name(struct dlz_example_data *state, struct record *list,\n\t const char *name, const char *type, dns_ttl_t ttl, const char *data)\n{\n\tint i;\n\tbool single = single_valued(type);\n\tint first_empty = -1;\n\n\tfor (i = 0; i < MAX_RECORDS; i++) {\n\t\tif (first_empty == -1 && strlen(list[i].name) == 0U) {\n\t\t\tfirst_empty = i;\n\t\t}\n\t\tif (strcasecmp(list[i].name, name) != 0)\n\t\t\tcontinue;\n\t\tif (strcasecmp(list[i].type, type) != 0)\n\t\t\tcontinue;\n\t\tif (!single && strcasecmp(list[i].data, data) != 0)\n\t\t\tcontinue;\n\t\tbreak;\n\t}\n\tif (i == MAX_RECORDS && first_empty != -1) {\n\t\ti = first_empty;\n\t}\n\tif (i == MAX_RECORDS) {\n\t\tlogerr(\"dlz_example: out of record space\");\n\t\treturn (ISC_R_FAILURE);\n\t}\n\n\tif (strlen(name) >= sizeof(list[i].name) ||\n\t    strlen(type) >= sizeof(list[i].type) ||\n\t    strlen(data) >= sizeof(list[i].data))\n\t\treturn (ISC_R_NOSPACE);\n\n\tstrncpy(list[i].name, name, sizeof(list[i].name));\n\tlist[i].name[sizeof(list[i].name) - 1] = '\\0';\n\n\tstrncpy(list[i].type, type, sizeof(list[i].type));\n\tlist[i].type[sizeof(list[i].type) - 1] = '\\0';\n\n\tstrncpy(list[i].data, data, sizeof(list[i].data));\n\tlist[i].data[sizeof(list[i].data) - 1] = '\\0';\n\n\tlist[i].ttl = ttl;\n\n\treturn (ISC_R_SUCCESS);\n}\n\n/*\n * Delete a record from a list\n */\nstatic isc_result_t\ndel_name(struct dlz_example_data *state, struct record *list,\n\t const char *name, const char *type, dns_ttl_t ttl,\n\t const char *data)\n{\n\tint i;\n\n\tUNUSED(state);\n\n\tfor (i = 0; i < MAX_RECORDS; i++) {\n\t\tif (strcasecmp(name, list[i].name) == 0 &&\n\t\t    strcasecmp(type, list[i].type) == 0 &&\n\t\t    strcasecmp(data, list[i].data) == 0 &&\n\t\t    ttl == list[i].ttl) {\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (i == MAX_RECORDS) {\n\t\treturn (ISC_R_NOTFOUND);\n\t}\n\tmemset(&list[i], 0, sizeof(struct record));\n\treturn (ISC_R_SUCCESS);\n}\n\nstatic isc_result_t\nfmt_address(isc_sockaddr_t *addr, char *buffer, size_t size) {\n\tchar addr_buf[INET6_ADDRSTRLEN];\n\tconst char *ret;\n\tuint16_t port = 0;\n\n\tswitch (addr->type.sa.sa_family) {\n\tcase AF_INET:\n\t\tport = ntohs(addr->type.sin.sin_port);\n\t\tret = inet_ntop(AF_INET, &addr->type.sin.sin_addr, addr_buf,\n\t\t\t\tsizeof(addr_buf));\n\t\tbreak;\n\tcase AF_INET6:\n\t\tport = ntohs(addr->type.sin6.sin6_port);\n\t\tret = inet_ntop(AF_INET6, &addr->type.sin6.sin6_addr, addr_buf,\n\t\t\t\tsizeof(addr_buf));\n\t\tbreak;\n\tdefault:\n\t\treturn (ISC_R_FAILURE);\n\t}\n\n\tif (ret == NULL)\n\t\treturn (ISC_R_FAILURE);\n\n\tsnprintf(buffer, size, \"%s#%u\", addr_buf, port);\n\treturn (ISC_R_SUCCESS);\n}\n\n/*\n * Return the version of the API\n */\nint\ndlz_version(unsigned int *flags) {\n\tUNUSED(flags);\n\treturn (DLZ_DLOPEN_VERSION);\n}\n\n/*\n * Remember a helper function from the bind9 dlz_dlopen driver\n */\nstatic void\nb9_add_helper(struct dlz_example_data *state,\n\t      const char *helper_name, void *ptr)\n{\n\tif (strcmp(helper_name, \"log\") == 0)\n\t\tstate->log = (log_t *)ptr;\n\tif (strcmp(helper_name, \"putrr\") == 0)\n\t\tstate->putrr = (dns_sdlz_putrr_t *)ptr;\n\tif (strcmp(helper_name, \"putnamedrr\") == 0)\n\t\tstate->putnamedrr = (dns_sdlz_putnamedrr_t *)ptr;\n\tif (strcmp(helper_name, \"writeable_zone\") == 0)\n\t\tstate->writeable_zone = (dns_dlz_writeablezone_t *)ptr;\n}\n\n/*\n * Called to initialize the driver\n */\nisc_result_t\ndlz_create(const char *dlzname, unsigned int argc, char *argv[],\n\t   void **dbdata, ...)\n{\n\tstruct dlz_example_data *state;\n\tconst char *helper_name;\n\tva_list ap;\n\tchar soa_data[1024];\n\tconst char *extra;\n\tisc_result_t result;\n\tint n;\n\n\tUNUSED(dlzname);\n\n\tstate = calloc(1, sizeof(struct dlz_example_data));\n\tif (state == NULL)\n\t\treturn (ISC_R_NOMEMORY);\n\n\t/* Fill in the helper functions */\n\tva_start(ap, dbdata);\n\twhile ((helper_name = va_arg(ap, const char *)) != NULL) {\n\t\tb9_add_helper(state, helper_name, va_arg(ap, void *));\n\t}\n\tva_end(ap);\n\n\tif (argc < 2 || argv[1][0] == '\\0') {\n\t\tlogerr(\"dlz_example: please specify a zone name\");\n\t\tdlz_destroy(state);\n\t\treturn (ISC_R_FAILURE);\n\t}\n\n\t/* Ensure zone name is absolute */\n\tstate->zone_name = malloc(strlen(argv[1]) + 2);\n\tif (state->zone_name == NULL) {\n\t\tfree(state);\n\t\treturn (ISC_R_NOMEMORY);\n\t}\n\tif (argv[1][strlen(argv[1]) - 1] == '.')\n\t\tstrcpy(state->zone_name, argv[1]);\n\telse\n\t\tsprintf(state->zone_name, \"%s.\", argv[1]);\n\n\tif (strcmp(state->zone_name, \".\") == 0)\n\t\textra = \".root\";\n\telse\n\t\textra = \".\";\n\n\tn = sprintf(soa_data, \"%s hostmaster%s%s 123 900 600 86400 3600\",\n\t\t    state->zone_name, extra, state->zone_name);\n\n\tif (n < 0)\n\t\tCHECK(ISC_R_FAILURE);\n\tif ((unsigned)n >= sizeof(soa_data))\n\t\tCHECK(ISC_R_NOSPACE);\n\n\tadd_name(state, &state->current[0], state->zone_name,\n\t\t \"soa\", 3600, soa_data);\n\tadd_name(state, &state->current[0], state->zone_name,\n\t\t \"ns\", 3600, state->zone_name);\n\tadd_name(state, &state->current[0], state->zone_name,\n\t\t \"a\", 1800, \"10.53.0.1\");\n\n\tloginfo(\"dlz_example: started for zone %s\", state->zone_name);\n\n\t*dbdata = state;\n\treturn (ISC_R_SUCCESS);\n\n failure:\n\tfree(state);\n\treturn (result);\n\n}\n\n/*\n * Shut down the backend\n */\nvoid\ndlz_destroy(void *dbdata) {\n\tstruct dlz_example_data *state = (struct dlz_example_data *)dbdata;\n\n\tloginfo(\"dlz_example: shutting down zone %s\", state->zone_name);\n\tfree(state->zone_name);\n\tfree(state);\n}\n\n/*\n * See if we handle a given zone\n */\nisc_result_t\ndlz_findzonedb(void *dbdata, const char *name,\n\t   dns_clientinfomethods_t *methods,\n\t   dns_clientinfo_t *clientinfo)\n{\n\tstruct dlz_example_data *state = (struct dlz_example_data *)dbdata;\n\tisc_sockaddr_t *src;\n\tchar addrbuf[100];\n\tchar absolute[1024];\n\n\tstrcpy(addrbuf, \"unknown\");\n\tif (methods != NULL &&\n\t    methods->sourceip != NULL &&\n\t    methods->version - methods->age <= DNS_CLIENTINFOMETHODS_VERSION &&\n\t    DNS_CLIENTINFOMETHODS_VERSION <= methods->version)\n\t{\n\t\tmethods->sourceip(clientinfo, &src);\n\t\tfmt_address(src, addrbuf, sizeof(addrbuf));\n\t}\n\n\tloginfo(\"dlz_example: dlz_findzonedb called with name '%s' \"\n\t\t\"in zone DB '%s' from %s\", name, state->zone_name, addrbuf);\n\n\t/*\n\t * Returning ISC_R_NOTFOUND will cause the query logic to\n\t * check the database for parent names, looking for zone cuts.\n\t *\n\t * Returning ISC_R_NOMORE prevents the query logic from doing\n\t * this; it will move onto the next database after a single query.\n\t */\n\tif (strcasecmp(name, \"test.example.com\") == 0)\n\t\treturn (ISC_R_NOMORE);\n\n\t/*\n\t * For example.net, only return ISC_R_NOMORE when queried\n\t * from 10.53.0.1.\n\t */\n\tif (strcasecmp(name, \"test.example.net\") == 0 &&\n\t    strncmp(addrbuf, \"10.53.0.1\", 9) == 0)\n\t\treturn (ISC_R_NOMORE);\n\n\t/*\n\t * For bigcname.domain, return success so it appears to be\n\t * the zone origin; this regression tests a bug in which\n\t * zone origin nodes could fail to return SERVFAIL to the client.\n\t */\n\tif (strcasecmp(name, \"bigcname.domain\") == 0)\n\t\treturn (ISC_R_SUCCESS);\n\n\t/*\n\t * Return success if we have an exact match between the\n\t * zone name and the qname\n\t */\n\tif (strcasecmp(state->zone_name, name) == 0)\n\t\treturn (ISC_R_SUCCESS);\n\n\tsnprintf(absolute, sizeof(absolute), \"%s.\", name);\n\tif (strcasecmp(state->zone_name, absolute) == 0)\n\t\treturn (ISC_R_SUCCESS);\n\n\treturn (ISC_R_NOTFOUND);\n}\n\n/*\n * Look up one record in the sample database.\n *\n * If the queryname is \"source-addr\", send back a TXT record containing\n * the address of the client, to test the use of 'methods' and 'clientinfo'\n *\n * If the queryname is \"too-long\", send back a TXT record that's too long\n * to process; this should result in a SERVFAIL when queried.\n */\nisc_result_t\ndlz_lookup(const char *zone, const char *name, void *dbdata,\n\t   dns_sdlzlookup_t *lookup, dns_clientinfomethods_t *methods,\n\t   dns_clientinfo_t *clientinfo)\n{\n\tisc_result_t result;\n\tstruct dlz_example_data *state = (struct dlz_example_data *)dbdata;\n\tbool found = false;\n\tvoid *dbversion = NULL;\n\tisc_sockaddr_t *src;\n\tchar full_name[256];\n\tchar buf[512];\n\tstatic char last[256];\n\tstatic int count = 0;\n\tint i, size;\n\n\tUNUSED(zone);\n\n\tif (state->putrr == NULL) {\n\t\treturn (ISC_R_NOTIMPLEMENTED);\n\t}\n\n\tif (strcmp(name, \"@\") == 0) {\n\t\tsize = snprintf(full_name, sizeof(full_name),\n\t\t\t\t\"%s\", state->zone_name);\n\t} else if (strcmp(state->zone_name, \".\") == 0) {\n\t\tsize = snprintf(full_name, sizeof(full_name),\n\t\t\t\t\"%s.\", name);\n\t} else {\n\t\tsize = snprintf(full_name, sizeof(full_name),\n\t\t\t\t\"%s.%s\", name, state->zone_name);\n\t}\n\n\tif (size < 0 ||\n\t    (size_t)size >= sizeof(full_name) ||\n\t    (size_t)size >= sizeof(last))\n\t{\n\t\treturn (ISC_R_NOSPACE);\n\t}\n\n\t/*\n\t * For test purposes, log all calls to dlz_lookup()\n\t */\n\tif (strcasecmp(full_name, last) == 0) {\n\t\tcount++;\n\t} else {\n\t\tcount = 1;\n\t\tmemcpy(last, full_name, size + 1);\n\t}\n\tloginfo(\"lookup #%d for %s\", count, full_name);\n\n\t/*\n\t * If we need to know the database version (as set in\n\t * the 'newversion' dlz function) we can pick it up from the\n\t * clientinfo.\n\t *\n\t * This allows a lookup to query the correct version of the DNS\n\t * data, if the DLZ can differentiate between versions.\n\t *\n\t * For example, if a new database transaction is created by\n\t * 'newversion', the lookup should query within the same\n\t * transaction scope if it can.\n\t *\n\t * If the DLZ only operates on 'live' data, then version\n\t * wouldn't necessarily be needed.\n\t */\n\tif (clientinfo != NULL &&\n\t    clientinfo->version >= DNS_CLIENTINFO_VERSION) {\n\t\tdbversion = clientinfo->dbversion;\n\t\tif (dbversion != NULL && *(bool *)dbversion) {\n\t\t\tloginfo(\"dlz_example: lookup against live transaction\");\n\t\t}\n\t}\n\n\tif (strcmp(name, \"source-addr\") == 0) {\n\t\tstrncpy(buf, \"unknown\", sizeof(buf));\n\t\tif (methods != NULL &&\n\t\t    methods->sourceip != NULL &&\n\t\t    (methods->version - methods->age <=\n\t\t     DNS_CLIENTINFOMETHODS_VERSION) &&\n\t\t    DNS_CLIENTINFOMETHODS_VERSION <= methods->version)\n\t\t{\n\t\t\tmethods->sourceip(clientinfo, &src);\n\t\t\tfmt_address(src, buf, sizeof(buf));\n\t\t}\n\n\t\tloginfo(\"dlz_example: lookup connection from %s\", buf);\n\n\t\tfound = true;\n\t\tresult = state->putrr(lookup, \"TXT\", 0, buf);\n\t\tif (result != ISC_R_SUCCESS)\n\t\t\treturn (result);\n\t}\n\n\tif (strcmp(name, \"too-long\") == 0 ||\n\t    strcmp(zone, \"bigcname.domain\") == 0)\n\t{\n\t\tfor (i = 0; i < 511; i++)\n\t\t\tbuf[i] = 'x';\n\t\tbuf[i] = '\\0';\n\t\tfound = true;\n\t\tresult = state->putrr(lookup, \"TXT\", 0, buf);\n\t\tif (result != ISC_R_SUCCESS)\n\t\t\treturn (result);\n\t}\n\n\t/* Tests for DLZ redirection zones */\n\tif (strcmp(name, \"*\") == 0 && strcmp(zone, \".\") == 0) {\n\t\tresult = state->putrr(lookup, \"A\", 0, \"100.100.100.2\");\n\t\tfound = true;\n\t\tif (result != ISC_R_SUCCESS)\n\t\t\treturn (result);\n\t}\n\n\tif (strcmp(name, \"long.name.is.not.there\") == 0 &&\n\t    strcmp(zone, \".\") == 0)\n\t{\n\t\tresult = state->putrr(lookup, \"A\", 0, \"100.100.100.3\");\n\t\tfound = true;\n\t\tif (result != ISC_R_SUCCESS)\n\t\t\treturn (result);\n\t}\n\n\t/* Answer from current records */\n\tfor (i = 0; i < MAX_RECORDS; i++) {\n\t\tif (strcasecmp(state->current[i].name, full_name) == 0) {\n\t\t\tfound = true;\n\t\t\tresult = state->putrr(lookup, state->current[i].type,\n\t\t\t\t\t      state->current[i].ttl,\n\t\t\t\t\t      state->current[i].data);\n\t\t\tif (result != ISC_R_SUCCESS)\n\t\t\t\treturn (result);\n\t\t}\n\t}\n\n\tif (!found)\n\t\treturn (ISC_R_NOTFOUND);\n\n\treturn (ISC_R_SUCCESS);\n}\n\n\n/*\n * See if a zone transfer is allowed\n */\nisc_result_t\ndlz_allowzonexfr(void *dbdata, const char *name, const char *client) {\n\tstruct dlz_example_data *state = (struct dlz_example_data *)dbdata;\n\tisc_result_t result;\n\n\tloginfo(\"dlz_example: dlz_allowzonexfr called for %s\", name);\n\n\tresult = dlz_findzonedb(dbdata, name, NULL, NULL);\n\tif (result != ISC_R_SUCCESS) {\n\t\tloginfo(\"dlz_example: findzonedb returned %s\",\n\t\t\tisc_result_totext(result));\n\t\treturn (result);\n\t}\n\n\t/*\n\t * Exception for 10.53.0.5 so we can test that allow-transfer\n\t * is effective.\n\t */\n\tif (strcmp(client, \"10.53.0.5\") == 0) {\n\t\tloginfo(\"dlz_example: disallow transfer to 10.53.0.5\");\n\t\treturn (ISC_R_NOPERM);\n\t}\n\n\tloginfo(\"dlz_example: transfer allowed for %s\", name);\n\n\treturn (ISC_R_SUCCESS);\n}\n\n/*\n * Perform a zone transfer\n */\nisc_result_t\ndlz_allnodes(const char *zone, void *dbdata, dns_sdlzallnodes_t *allnodes) {\n\tstruct dlz_example_data *state = (struct dlz_example_data *)dbdata;\n\tint i;\n\n\tUNUSED(zone);\n\n\tif (state->putnamedrr == NULL)\n\t\treturn (ISC_R_NOTIMPLEMENTED);\n\n\tfor (i = 0; i < MAX_RECORDS; i++) {\n\t\tisc_result_t result;\n\t\tif (strlen(state->current[i].name) == 0U) {\n\t\t\tcontinue;\n\t\t}\n\t\tresult = state->putnamedrr(allnodes, state->current[i].name,\n\t\t\t\t\t   state->current[i].type,\n\t\t\t\t\t   state->current[i].ttl,\n\t\t\t\t\t   state->current[i].data);\n\t\tif (result != ISC_R_SUCCESS)\n\t\t\treturn (result);\n\t}\n\n\treturn (ISC_R_SUCCESS);\n}\n\n\n/*\n * Start a transaction\n */\nisc_result_t\ndlz_newversion(const char *zone, void *dbdata, void **versionp) {\n\tstruct dlz_example_data *state = (struct dlz_example_data *)dbdata;\n\n\tif (state->transaction_started) {\n\t\tloginfo(\"dlz_example: transaction already started for zone %s\",\n\t\t\tzone);\n\t\treturn (ISC_R_FAILURE);\n\t}\n\n\tstate->transaction_started = true;\n\t*versionp = (void *) &state->transaction_started;\n\n\treturn (ISC_R_SUCCESS);\n}\n\n/*\n * End a transaction\n */\nvoid\ndlz_closeversion(const char *zone, bool commit,\n\t\t void *dbdata, void **versionp)\n{\n\tstruct dlz_example_data *state = (struct dlz_example_data *)dbdata;\n\n\tif (!state->transaction_started) {\n\t\tloginfo(\"dlz_example: transaction not started for zone %s\",\n\t\t\tzone);\n\t\t*versionp = NULL;\n\t\treturn;\n\t}\n\n\tstate->transaction_started = false;\n\n\t*versionp = NULL;\n\n\tif (commit) {\n\t\tint i;\n\t\tloginfo(\"dlz_example: committing transaction on zone %s\", zone);\n\t\tfor (i = 0; i < MAX_RECORDS; i++) {\n\t\t\tif (strlen(state->deletes[i].name) > 0U) {\n\t\t\t\t(void)del_name(state, &state->current[0],\n\t\t\t\t\t       state->deletes[i].name,\n\t\t\t\t\t       state->deletes[i].type,\n\t\t\t\t\t       state->deletes[i].ttl,\n\t\t\t\t\t       state->deletes[i].data);\n\t\t\t}\n\t\t}\n\t\tfor (i = 0; i < MAX_RECORDS; i++) {\n\t\t\tif (strlen(state->adds[i].name) > 0U) {\n\t\t\t\t(void)add_name(state, &state->current[0],\n\t\t\t\t\t       state->adds[i].name,\n\t\t\t\t\t       state->adds[i].type,\n\t\t\t\t\t       state->adds[i].ttl,\n\t\t\t\t\t       state->adds[i].data);\n\t\t\t}\n\t\t}\n\t} else {\n\t\tloginfo(\"dlz_example: cancelling transaction on zone %s\", zone);\n\t}\n\tmemset(state->adds, 0, sizeof(state->adds));\n\tmemset(state->deletes, 0, sizeof(state->deletes));\n}\n\n\n/*\n * Configure a writeable zone\n */\nisc_result_t\ndlz_configure(dns_view_t *view, dns_dlzdb_t *dlzdb, void *dbdata) {\n\tstruct dlz_example_data *state = (struct dlz_example_data *)dbdata;\n\tisc_result_t result;\n\n\tloginfo(\"dlz_example: starting configure\");\n\n\tif (state->writeable_zone == NULL) {\n\t\tloginfo(\"dlz_example: no writeable_zone method available\");\n\t\treturn (ISC_R_FAILURE);\n\t}\n\n\tresult = state->writeable_zone(view, dlzdb, state->zone_name);\n\tif (result != ISC_R_SUCCESS) {\n\t\tloginfo(\"dlz_example: failed to configure zone %s\",\n\t\t\tstate->zone_name);\n\t\treturn (result);\n\t}\n\n\tloginfo(\"dlz_example: configured writeable zone %s\", state->zone_name);\n\treturn (ISC_R_SUCCESS);\n}\n\n/*\n * Authorize a zone update\n */\nbool\ndlz_ssumatch(const char *signer, const char *name, const char *tcpaddr,\n\t     const char *type, const char *key, uint32_t keydatalen,\n\t     unsigned char *keydata, void *dbdata)\n{\n\tstruct dlz_example_data *state = (struct dlz_example_data *)dbdata;\n\n\tUNUSED(tcpaddr);\n\tUNUSED(type);\n\tUNUSED(key);\n\tUNUSED(keydatalen);\n\tUNUSED(keydata);\n\n\tif (strncmp(name, \"deny.\", 5) == 0) {\n\t\tloginfo(\"dlz_example: denying update of name=%s by %s\",\n\t\t\tname, signer);\n\t\treturn (false);\n\t}\n\tloginfo(\"dlz_example: allowing update of name=%s by %s\", name, signer);\n\treturn (true);\n}\n\n\nstatic isc_result_t\nmodrdataset(struct dlz_example_data *state, const char *name,\n\t    const char *rdatastr, struct record *list)\n{\n\tchar *full_name, *dclass, *type, *data, *ttlstr, *buf;\n\tchar absolute[1024];\n\tisc_result_t result;\n\tchar *saveptr = NULL;\n\n\tbuf = strdup(rdatastr);\n\tif (buf == NULL)\n\t\treturn (ISC_R_FAILURE);\n\n\t/*\n\t * The format is:\n\t * FULLNAME\\tTTL\\tDCLASS\\tTYPE\\tDATA\n\t *\n\t * The DATA field is space separated, and is in the data format\n\t * for the type used by dig\n\t */\n\n\tfull_name = strtok_r(buf, \"\\t\", &saveptr);\n\tif (full_name == NULL)\n\t\tgoto error;\n\n\tttlstr = strtok_r(NULL, \"\\t\", &saveptr);\n\tif (ttlstr == NULL)\n\t\tgoto error;\n\n\tdclass = strtok_r(NULL, \"\\t\", &saveptr);\n\tif (dclass == NULL)\n\t\tgoto error;\n\n\ttype = strtok_r(NULL, \"\\t\", &saveptr);\n\tif (type == NULL)\n\t\tgoto error;\n\n\tdata = strtok_r(NULL, \"\\t\", &saveptr);\n\tif (data == NULL)\n\t\tgoto error;\n\n\tif (name[strlen(name) - 1] != '.') {\n\t\tsnprintf(absolute, sizeof(absolute), \"%s.\", name);\n\t\tname = absolute;\n\t}\n\n\tresult = add_name(state, list, name, type,\n\t\t\t  strtoul(ttlstr, NULL, 10), data);\n\tfree(buf);\n\treturn (result);\n\n error:\n\tfree(buf);\n\treturn (ISC_R_FAILURE);\n}\n\n\nisc_result_t\ndlz_addrdataset(const char *name, const char *rdatastr,\n\t\tvoid *dbdata, void *version)\n{\n\tstruct dlz_example_data *state = (struct dlz_example_data *)dbdata;\n\n\tif (version != (void *) &state->transaction_started)\n\t\treturn (ISC_R_FAILURE);\n\n\tloginfo(\"dlz_example: adding rdataset %s '%s'\", name, rdatastr);\n\n\treturn (modrdataset(state, name, rdatastr, &state->adds[0]));\n}\n\nisc_result_t\ndlz_subrdataset(const char *name, const char *rdatastr,\n\t\tvoid *dbdata, void *version)\n{\n\tstruct dlz_example_data *state = (struct dlz_example_data *)dbdata;\n\n\tif (version != (void *) &state->transaction_started)\n\t\treturn (ISC_R_FAILURE);\n\n\tloginfo(\"dlz_example: subtracting rdataset %s '%s'\", name, rdatastr);\n\n\treturn (modrdataset(state, name, rdatastr, &state->deletes[0]));\n}\n\nisc_result_t\ndlz_delrdataset(const char *name, const char *type,\n\t\tvoid *dbdata, void *version)\n{\n\tstruct dlz_example_data *state = (struct dlz_example_data *)dbdata;\n\n\tif (version != (void *) &state->transaction_started)\n\t\treturn (ISC_R_FAILURE);\n\n\tloginfo(\"dlz_example: deleting rdataset %s of type %s\", name, type);\n\n\treturn (ISC_R_SUCCESS);\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/bin/tests/system/dlzexternal/ns1/dlzs.conf.in": "/*\n * Copyright (C) Internet Systems Consortium, Inc. (\"ISC\")\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n *\n * See the COPYRIGHT file distributed with this work for additional\n * information regarding copyright ownership.\n */\n\ndlz \"example one\" {\n\tdatabase \"dlopen ../driver.@SO@ example.nil\";\n};\n\ndlz \"example two\" {\n\tdatabase \"dlopen ../driver.@SO@ alternate.nil\";\n};\n\ndlz \"unsearched1\" {\n\tdatabase \"dlopen ../driver.@SO@ other.nil\";\n\tsearch no;\n};\n\ndlz \"unsearched2\" {\n\tdatabase \"dlopen ../driver.@SO@ zone.nil\";\n\tsearch no;\n};\n\ndlz redzone {\n\tdatabase \"dlopen ../driver.@SO@ .\";\n\tsearch no;\n};\n",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/lib/ns/hooks.c": "/*\n * Copyright (C) Internet Systems Consortium, Inc. (\"ISC\")\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n *\n * See the COPYRIGHT file distributed with this work for additional\n * information regarding copyright ownership.\n */\n\n/*! \\file */\n\n#include <config.h>\n\n#include <errno.h>\n#include <stdio.h>\n#include <string.h>\n\n#if HAVE_DLFCN_H\n#include <dlfcn.h>\n#elif _WIN32\n#include <windows.h>\n#endif\n\n#include <isc/errno.h>\n#include <isc/list.h>\n#include <isc/log.h>\n#include <isc/mem.h>\n#include <isc/mutex.h>\n#include <isc/print.h>\n#include <isc/result.h>\n#include <isc/platform.h>\n#include <isc/util.h>\n#include <isc/types.h>\n\n#include <dns/view.h>\n\n#include <ns/hooks.h>\n#include <ns/log.h>\n#include <ns/query.h>\n\n#define CHECK(op)\t\t\t\t\t\t\\\n\tdo {\t\t\t\t\t\t\t\\\n\t\tresult = (op);\t\t\t\t\t\\\n\t\tif (result != ISC_R_SUCCESS) {\t\t\t\\\n\t\t\tgoto cleanup;\t\t\t\t\\\n\t\t}\t\t\t\t\t\t\\\n\t} while (0)\n\nstruct ns_plugin {\n       isc_mem_t\t\t*mctx;\n       void\t\t\t*handle;\n       void\t\t\t*inst;\n       char\t\t\t*modpath;\n       ns_plugin_check_t\t*check_func;\n       ns_plugin_register_t\t*register_func;\n       ns_plugin_destroy_t\t*destroy_func;\n       LINK(ns_plugin_t)\tlink;\n};\n\nstatic ns_hooklist_t default_hooktable[NS_HOOKPOINTS_COUNT];\nLIBNS_EXTERNAL_DATA ns_hooktable_t *ns__hook_table = &default_hooktable;\n\nisc_result_t\nns_plugin_expandpath(const char *src, char *dst, size_t dstsize) {\n\tint result;\n\n#ifndef WIN32\n\t/*\n\t * On Unix systems, differentiate between paths and filenames.\n\t */\n\tif (strchr(src, '/') != NULL) {\n\t\t/*\n\t\t * 'src' is an absolute or relative path.  Copy it verbatim.\n\t\t */\n\t\tresult = snprintf(dst, dstsize, \"%s\", src);\n\t} else {\n\t\t/*\n\t\t * 'src' is a filename.  Prepend default plugin directory path.\n\t\t */\n\t\tresult = snprintf(dst, dstsize, \"%s/%s\", NAMED_PLUGINDIR, src);\n\t}\n#else\n\t/*\n\t * On Windows, always copy 'src' do 'dst'.\n\t */\n\tresult = snprintf(dst, dstsize, \"%s\", src);\n#endif\n\n\tif (result < 0) {\n\t\treturn (isc_errno_toresult(errno));\n\t} else if ((size_t)result >= dstsize) {\n\t\treturn (ISC_R_NOSPACE);\n\t} else {\n\t\treturn (ISC_R_SUCCESS);\n\t}\n}\n\n#if HAVE_DLFCN_H && HAVE_DLOPEN\nstatic isc_result_t\nload_symbol(void *handle, const char *modpath,\n\t    const char *symbol_name, void **symbolp)\n{\n\tvoid *symbol = NULL;\n\n\tREQUIRE(handle != NULL);\n\tREQUIRE(symbolp != NULL && *symbolp == NULL);\n\n\t/*\n\t * Clear any pre-existing error conditions before running dlsym().\n\t * (In this case, we expect dlsym() to return non-NULL values\n\t * and will always return an error if it returns NULL, but\n\t * this ensures that we'll report the correct error condition\n\t * if there is one.)\n\t */\n\tdlerror();\n\tsymbol = dlsym(handle, symbol_name);\n\tif (symbol == NULL) {\n\t\tconst char *errmsg = dlerror();\n\t\tif (errmsg == NULL) {\n\t\t\terrmsg = \"returned function pointer is NULL\";\n\t\t}\n\t\tisc_log_write(ns_lctx, NS_LOGCATEGORY_GENERAL,\n\t\t\t      NS_LOGMODULE_HOOKS, ISC_LOG_ERROR,\n\t\t\t      \"failed to look up symbol %s in \"\n\t\t\t      \"plugin '%s': %s\",\n\t\t\t      symbol_name, modpath, errmsg);\n\t\treturn (ISC_R_FAILURE);\n\t}\n\n\t*symbolp = symbol;\n\n\treturn (ISC_R_SUCCESS);\n}\n\nstatic isc_result_t\nload_plugin(isc_mem_t *mctx, const char *modpath, ns_plugin_t **pluginp) {\n\tisc_result_t result;\n\tvoid *handle = NULL;\n\tns_plugin_t *plugin = NULL;\n\tns_plugin_check_t *check_func = NULL;\n\tns_plugin_register_t *register_func = NULL;\n\tns_plugin_destroy_t *destroy_func = NULL;\n\tns_plugin_version_t *version_func = NULL;\n\tint version, flags;\n\n\tREQUIRE(pluginp != NULL && *pluginp == NULL);\n\n\tflags = RTLD_LAZY | RTLD_LOCAL;\n#if defined(RTLD_DEEPBIND) && !__SANITIZE_ADDRESS__\n\tflags |= RTLD_DEEPBIND;\n#endif\n\n\thandle = dlopen(modpath, flags);\n\tif (handle == NULL) {\n\t\tconst char *errmsg = dlerror();\n\t\tif (errmsg == NULL) {\n\t\t\terrmsg = \"unknown error\";\n\t\t}\n\t\tisc_log_write(ns_lctx, NS_LOGCATEGORY_GENERAL,\n\t\t\t      NS_LOGMODULE_HOOKS, ISC_LOG_ERROR,\n\t\t\t      \"failed to dlopen() plugin '%s': %s\",\n\t\t\t      modpath, errmsg);\n\t\treturn (ISC_R_FAILURE);\n\t}\n\n\tCHECK(load_symbol(handle, modpath, \"plugin_version\",\n\t\t\t  (void **)&version_func));\n\n\tversion = version_func();\n\tif (version < (NS_PLUGIN_VERSION - NS_PLUGIN_AGE) ||\n\t    version > NS_PLUGIN_VERSION)\n\t{\n\t\tisc_log_write(ns_lctx, NS_LOGCATEGORY_GENERAL,\n\t\t\t      NS_LOGMODULE_HOOKS, ISC_LOG_ERROR,\n\t\t\t      \"plugin API version mismatch: %d/%d\",\n\t\t\t      version, NS_PLUGIN_VERSION);\n\t\tCHECK(ISC_R_FAILURE);\n\t}\n\n\tCHECK(load_symbol(handle, modpath, \"plugin_check\",\n\t\t\t  (void **)&check_func));\n\tCHECK(load_symbol(handle, modpath, \"plugin_register\",\n\t\t\t  (void **)&register_func));\n\tCHECK(load_symbol(handle, modpath, \"plugin_destroy\",\n\t\t\t  (void **)&destroy_func));\n\n\tplugin = isc_mem_get(mctx, sizeof(*plugin));\n\tmemset(plugin, 0, sizeof(*plugin));\n\tisc_mem_attach(mctx, &plugin->mctx);\n\tplugin->handle = handle;\n\tplugin->modpath = isc_mem_strdup(plugin->mctx, modpath);\n\tplugin->check_func = check_func;\n\tplugin->register_func = register_func;\n\tplugin->destroy_func = destroy_func;\n\n\tISC_LINK_INIT(plugin, link);\n\n\t*pluginp = plugin;\n\tplugin = NULL;\n\ncleanup:\n\tif (result != ISC_R_SUCCESS) {\n\t\tisc_log_write(ns_lctx, NS_LOGCATEGORY_GENERAL,\n\t\t\t      NS_LOGMODULE_HOOKS, ISC_LOG_ERROR,\n\t\t\t      \"failed to dynamically load \"\n\t\t\t      \"plugin '%s': %s\", modpath,\n\t\t\t      isc_result_totext(result));\n\n\t\tif (plugin != NULL) {\n\t\t\tisc_mem_putanddetach(&plugin->mctx, plugin,\n\t\t\t\t\t     sizeof(*plugin));\n\t\t}\n\n\t\tif (handle != NULL) {\n\t\t\t(void) dlclose(handle);\n\t\t}\n\t}\n\n\treturn (result);\n}\n\nstatic void\nunload_plugin(ns_plugin_t **pluginp) {\n\tns_plugin_t *plugin = NULL;\n\n\tREQUIRE(pluginp != NULL && *pluginp != NULL);\n\n\tplugin = *pluginp;\n\t*pluginp = NULL;\n\n\tisc_log_write(ns_lctx, NS_LOGCATEGORY_GENERAL,\n\t\t      NS_LOGMODULE_HOOKS, ISC_LOG_DEBUG(1),\n\t\t      \"unloading plugin '%s'\", plugin->modpath);\n\n\tif (plugin->inst != NULL) {\n\t\tplugin->destroy_func(&plugin->inst);\n\t}\n\tif (plugin->handle != NULL) {\n\t\t(void) dlclose(plugin->handle);\n\t}\n\tif (plugin->modpath != NULL) {\n\t\tisc_mem_free(plugin->mctx, plugin->modpath);\n\t}\n\n\tisc_mem_putanddetach(&plugin->mctx, plugin, sizeof(*plugin));\n}\n#elif _WIN32\nstatic isc_result_t\nload_symbol(HMODULE handle, const char *modpath,\n\t    const char *symbol_name, void **symbolp)\n{\n\tvoid *symbol = NULL;\n\n\tREQUIRE(handle != NULL);\n\tREQUIRE(symbolp != NULL && *symbolp == NULL);\n\n\tsymbol = GetProcAddress(handle, symbol_name);\n\tif (symbol == NULL) {\n\t\tint errstatus = GetLastError();\n\t\tisc_log_write(ns_lctx, NS_LOGCATEGORY_GENERAL,\n\t\t\t      NS_LOGMODULE_HOOKS, ISC_LOG_ERROR,\n\t\t\t      \"failed to look up symbol %s in \"\n\t\t\t      \"plugin '%s': %d\",\n\t\t\t      symbol_name, modpath, errstatus);\n\t\treturn (ISC_R_FAILURE);\n\t}\n\n\t*symbolp = symbol;\n\n\treturn (ISC_R_SUCCESS);\n}\n\nstatic isc_result_t\nload_plugin(isc_mem_t *mctx, const char *modpath, ns_plugin_t **pluginp) {\n\tisc_result_t result;\n\tHMODULE handle;\n\tns_plugin_t *plugin = NULL;\n\tns_plugin_register_t *register_func = NULL;\n\tns_plugin_destroy_t *destroy_func = NULL;\n\tns_plugin_version_t *version_func = NULL;\n\tint version;\n\n\tREQUIRE(pluginp != NULL && *pluginp == NULL);\n\n\thandle = LoadLibraryA(modpath);\n\tif (handle == NULL) {\n\t\tCHECK(ISC_R_FAILURE);\n\t}\n\n\tCHECK(load_symbol(handle, modpath, \"plugin_version\",\n\t\t\t  (void **)&version_func));\n\n\tversion = version_func();\n\tif (version < (NS_PLUGIN_VERSION - NS_PLUGIN_AGE) ||\n\t    version > NS_PLUGIN_VERSION)\n\t{\n\t\tisc_log_write(ns_lctx, NS_LOGCATEGORY_GENERAL,\n\t\t\t      NS_LOGMODULE_HOOKS, ISC_LOG_ERROR,\n\t\t\t      \"plugin API version mismatch: %d/%d\",\n\t\t\t      version, NS_PLUGIN_VERSION);\n\t\tCHECK(ISC_R_FAILURE);\n\t}\n\n\tCHECK(load_symbol(handle, modpath, \"plugin_register\",\n\t\t\t  (void **)&register_func));\n\tCHECK(load_symbol(handle, modpath, \"plugin_destroy\",\n\t\t\t  (void **)&destroy_func));\n\n\tplugin = isc_mem_get(mctx, sizeof(*plugin));\n\tmemset(plugin, 0, sizeof(*plugin));\n\tisc_mem_attach(mctx, &plugin->mctx);\n\tplugin->handle = handle;\n\tplugin->modpath = isc_mem_strdup(plugin->mctx, modpath);\n\tplugin->register_func = register_func;\n\tplugin->destroy_func = destroy_func;\n\n\tISC_LINK_INIT(plugin, link);\n\n\t*pluginp = plugin;\n\tplugin = NULL;\n\ncleanup:\n\tif (result != ISC_R_SUCCESS) {\n\t\tisc_log_write(ns_lctx, NS_LOGCATEGORY_GENERAL,\n\t\t\t      NS_LOGMODULE_HOOKS, ISC_LOG_ERROR,\n\t\t\t      \"failed to dynamically load \"\n\t\t\t      \"plugin '%s': %d (%s)\", modpath,\n\t\t\t      GetLastError(), isc_result_totext(result));\n\n\t\tif (plugin != NULL) {\n\t\t\tisc_mem_putanddetach(&plugin->mctx, plugin,\n\t\t\t\t\t     sizeof(*plugin));\n\t\t}\n\n\t\tif (handle != NULL) {\n\t\t\tFreeLibrary(handle);\n\t\t}\n\t}\n\n\treturn (result);\n}\n\nstatic void\nunload_plugin(ns_plugin_t **pluginp) {\n\tns_plugin_t *plugin = NULL;\n\n\tREQUIRE(pluginp != NULL && *pluginp != NULL);\n\n\tplugin = *pluginp;\n\t*pluginp = NULL;\n\n\tisc_log_write(ns_lctx, NS_LOGCATEGORY_GENERAL,\n\t\t      NS_LOGMODULE_HOOKS, ISC_LOG_DEBUG(1),\n\t\t      \"unloading plugin '%s'\", plugin->modpath);\n\n\tif (plugin->inst != NULL) {\n\t\tplugin->destroy_func(&plugin->inst);\n\t}\n\tif (plugin->handle != NULL) {\n\t\tFreeLibrary(plugin->handle);\n\t}\n\n\tif (plugin->modpath != NULL) {\n\t\tisc_mem_free(plugin->mctx, plugin->modpath);\n\t}\n\n\tisc_mem_putanddetach(&plugin->mctx, plugin, sizeof(*plugin));\n}\n#else\t/* HAVE_DLFCN_H || _WIN32 */\nstatic isc_result_t\nload_plugin(isc_mem_t *mctx, const char *modpath, ns_plugin_t **pluginp) {\n\tUNUSED(mctx);\n\tUNUSED(modpath);\n\tUNUSED(pluginp);\n\n\tisc_log_write(ns_lctx, NS_LOGCATEGORY_GENERAL,\n\t\t      NS_LOGMODULE_HOOKS, ISC_LOG_ERROR,\n\t\t      \"plugin support is not implemented\");\n\n\treturn (ISC_R_NOTIMPLEMENTED);\n}\n\nstatic void\nunload_plugin(ns_plugin_t **pluginp) {\n\tUNUSED(pluginp);\n}\n#endif\t/* HAVE_DLFCN_H */\n\nisc_result_t\nns_plugin_register(const char *modpath, const char *parameters,\n\t\t   const void *cfg, const char *cfg_file,\n\t\t   unsigned long cfg_line,\n\t\t   isc_mem_t *mctx, isc_log_t *lctx, void *actx,\n\t\t   dns_view_t *view)\n{\n\tisc_result_t result;\n\tns_plugin_t *plugin = NULL;\n\n\tREQUIRE(mctx != NULL);\n\tREQUIRE(lctx != NULL);\n\tREQUIRE(view != NULL);\n\n\tisc_log_write(ns_lctx, NS_LOGCATEGORY_GENERAL,\n\t\t      NS_LOGMODULE_HOOKS, ISC_LOG_INFO,\n\t\t      \"loading plugin '%s'\", modpath);\n\n\tCHECK(load_plugin(mctx, modpath, &plugin));\n\n\tisc_log_write(ns_lctx, NS_LOGCATEGORY_GENERAL,\n\t\t      NS_LOGMODULE_HOOKS, ISC_LOG_INFO,\n\t\t      \"registering plugin '%s'\", modpath);\n\n\tCHECK(plugin->register_func(parameters, cfg, cfg_file, cfg_line,\n\t\t\t\t    mctx, lctx, actx, view->hooktable,\n\t\t\t\t    &plugin->inst));\n\n\tISC_LIST_APPEND(*(ns_plugins_t *)view->plugins, plugin, link);\n\ncleanup:\n\tif (result != ISC_R_SUCCESS && plugin != NULL) {\n\t\tunload_plugin(&plugin);\n\t}\n\n\treturn (result);\n}\n\nisc_result_t\nns_plugin_check(const char *modpath, const char *parameters,\n\t\tconst void *cfg, const char *cfg_file, unsigned long cfg_line,\n\t\tisc_mem_t *mctx, isc_log_t *lctx, void *actx)\n{\n\tisc_result_t result;\n\tns_plugin_t *plugin = NULL;\n\n\tCHECK(load_plugin(mctx, modpath, &plugin));\n\n\tresult = plugin->check_func(parameters, cfg, cfg_file, cfg_line,\n\t\t\t\t  mctx, lctx, actx);\n\ncleanup:\n\tif (plugin != NULL) {\n\t\tunload_plugin(&plugin);\n\t}\n\n\treturn (result);\n}\n\nvoid\nns_hooktable_init(ns_hooktable_t *hooktable) {\n\tint i;\n\n\tfor (i = 0; i < NS_HOOKPOINTS_COUNT; i++) {\n\t\tISC_LIST_INIT((*hooktable)[i]);\n\t}\n}\n\nisc_result_t\nns_hooktable_create(isc_mem_t *mctx, ns_hooktable_t **tablep) {\n\tns_hooktable_t *hooktable = NULL;\n\n\tREQUIRE(tablep != NULL && *tablep == NULL);\n\n\thooktable = isc_mem_get(mctx, sizeof(*hooktable));\n\n\tns_hooktable_init(hooktable);\n\n\t*tablep = hooktable;\n\n\treturn (ISC_R_SUCCESS);\n}\n\nvoid\nns_hooktable_free(isc_mem_t *mctx, void **tablep) {\n\tns_hooktable_t *table = NULL;\n\tns_hook_t *hook = NULL, *next = NULL;\n\tint i = 0;\n\n\tREQUIRE(tablep != NULL && *tablep != NULL);\n\n\ttable = *tablep;\n\t*tablep = NULL;\n\n\tfor (i = 0; i < NS_HOOKPOINTS_COUNT; i++) {\n\t\tfor (hook = ISC_LIST_HEAD((*table)[i]);\n\t\t     hook != NULL;\n\t\t     hook = next)\n\t\t{\n\t\t\tnext = ISC_LIST_NEXT(hook, link);\n\t\t\tISC_LIST_UNLINK((*table)[i], hook, link);\n\t\t\tif (hook->mctx != NULL) {\n\t\t\t\tisc_mem_putanddetach(&hook->mctx,\n\t\t\t\t\t\t     hook, sizeof(*hook));\n\t\t\t}\n\t\t}\n\t}\n\n\tisc_mem_put(mctx, table, sizeof(*table));\n}\n\nvoid\nns_hook_add(ns_hooktable_t *hooktable, isc_mem_t *mctx,\n\t    ns_hookpoint_t hookpoint, const ns_hook_t *hook)\n{\n\tns_hook_t *copy = NULL;\n\n\tREQUIRE(hooktable != NULL);\n\tREQUIRE(mctx != NULL);\n\tREQUIRE(hookpoint < NS_HOOKPOINTS_COUNT);\n\tREQUIRE(hook != NULL);\n\n\tcopy = isc_mem_get(mctx, sizeof(*copy));\n\tmemset(copy, 0, sizeof(*copy));\n\n\tcopy->action = hook->action;\n\tcopy->action_data = hook->action_data;\n\tisc_mem_attach(mctx, &copy->mctx);\n\n\tISC_LINK_INIT(copy, link);\n\tISC_LIST_APPEND((*hooktable)[hookpoint], copy, link);\n}\n\nvoid\nns_plugins_create(isc_mem_t *mctx, ns_plugins_t **listp) {\n\tns_plugins_t *plugins = NULL;\n\n\tREQUIRE(listp != NULL && *listp == NULL);\n\n\tplugins = isc_mem_get(mctx, sizeof(*plugins));\n\tmemset(plugins, 0, sizeof(*plugins));\n\tISC_LIST_INIT(*plugins);\n\n\t*listp = plugins;\n}\n\nvoid\nns_plugins_free(isc_mem_t *mctx, void **listp) {\n\tns_plugins_t *list = NULL;\n\tns_plugin_t *plugin = NULL, *next = NULL;\n\n\tREQUIRE(listp != NULL && *listp != NULL);\n\n\tlist = *listp;\n\t*listp = NULL;\n\n\tfor (plugin = ISC_LIST_HEAD(*list);\n\t     plugin != NULL;\n\t     plugin = next)\n\t{\n\t\tnext = ISC_LIST_NEXT(plugin, link);\n\t\tISC_LIST_UNLINK(*list, plugin, link);\n\t\tunload_plugin(&plugin);\n\t}\n\n\tisc_mem_put(mctx, list, sizeof(*list));\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/lib/ns/include/ns/hooks.h": "/*\n * Copyright (C) Internet Systems Consortium, Inc. (\"ISC\")\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n *\n * See the COPYRIGHT file distributed with this work for additional\n * information regarding copyright ownership.\n */\n\n#ifndef NS_HOOKS_H\n#define NS_HOOKS_H 1\n\n/*! \\file */\n\n#include <stdbool.h>\n\n#include <isc/list.h>\n#include <isc/magic.h>\n#include <isc/result.h>\n\n#include <dns/rdatatype.h>\n\n#include <ns/client.h>\n#include <ns/query.h>\n/*\n * \"Hooks\" are a mechanism to call a defined function or set of functions once\n * a certain place in code is reached.  Hook actions can inspect and alter the\n * state of an ongoing process, allowing processing to continue afterward or\n * triggering an early return.\n *\n * Currently hooks are used in two ways: in plugins, which use them to\n * add functionality to query processing, and in the unit tests for libns,\n * where they are used to inspect state before and after certain functions have\n * run.\n *\n * Both of these uses are limited to libns, so hooks are currently defined in\n * the ns/hooks.h header file, and hook-related macro and function names are\n * prefixed with `NS_` and `ns_`.  However, the design is fairly generic and\n * could be repurposed for general use, e.g. as part of libisc, after some\n * further customization.\n *\n * Hooks are created by defining a hook point identifier in the ns_hookpoint_t\n * enum below, and placing a special call at a corresponding location in the\n * code which invokes the action(s) for that hook; there are two such special\n * calls currently implemented, namely the CALL_HOOK() and CALL_HOOK_NORETURN()\n * macros in query.c.  The former macro contains a \"goto cleanup\" statement\n * which is inlined into the function into which the hook has been inserted;\n * this enables the hook action to cause the calling function to return from\n * the hook insertion point.  For functions returning isc_result_t, if a hook\n * action intends to cause a return at hook insertion point, it also has to set\n * the value to be returned by the calling function.\n *\n * A hook table is an array (indexed by the value of the hook point identifier)\n * in which each cell contains a linked list of structures, each of which\n * contains a function pointer to a hook action and a pointer to data which is\n * to be passed to the action function when it is called.\n *\n * Each view has its own separate hook table, populated by loading plugin\n * modules specified in the \"plugin\" statements in named.conf.  There is also a\n * special, global hook table (ns__hook_table) that is only used by libns unit\n * tests and whose existence can be safely ignored by plugin modules.\n *\n * Hook actions are functions which:\n *\n *   - return an ns_hookresult_t value:\n *       - if NS_HOOK_RETURN is returned by the hook action, the function\n *         into which the hook is inserted will return and no further hook\n *         actions at the same hook point will be invoked,\n *       - if NS_HOOK_CONTINUE is returned by the hook action and there are\n *         further hook actions set up at the same hook point, they will be\n *         processed; if NS_HOOK_CONTINUE is returned and there are no\n *         further hook actions set up at the same hook point, execution of\n *         the function into which the hook has been inserted will be\n *         resumed.\n *\n *   - accept three pointers as arguments:\n *       - a pointer specified by the special call at the hook insertion point,\n *       - a pointer specified upon inserting the action into the hook table,\n *       - a pointer to an isc_result_t value which will be returned by the\n *         function into which the hook is inserted if the action returns\n *         NS_HOOK_RETURN.\n *\n * In order for a hook action to be called for a given hook, a pointer to that\n * action function (along with an optional pointer to action-specific data) has\n * to be inserted into the relevant hook table entry for that hook using an\n * ns_hook_add() call.  If multiple actions are set up at a single hook point\n * (e.g. by multiple plugin modules), they are processed in FIFO order, that is\n * they are performed in the same order in which their relevant ns_hook_add()\n * calls were issued.  Since the configuration is loaded from a single thread,\n * this means that multiple actions at a single hook point are determined by\n * the order in which the relevant plugin modules were declared in the\n * configuration file(s).  The hook API currently does not support changing\n * this order.\n *\n * As an example, consider the following hypothetical function in query.c:\n *\n * ----------------------------------------------------------------------------\n * static isc_result_t\n * query_foo(query_ctx_t *qctx) {\n *     isc_result_t result;\n *\n *     CALL_HOOK(NS_QUERY_FOO_BEGIN, qctx);\n *\n *     ns_client_log(qctx->client, NS_LOGCATEGORY_CLIENT, NS_LOGMODULE_QUERY,\n *                   ISC_LOG_DEBUG(99), \"Lorem ipsum dolor sit amet...\");\n *\n *     result = ISC_R_COMPLETE;\n *\n *  cleanup:\n *     return (result);\n * }\n * ----------------------------------------------------------------------------\n *\n * and the following hook action:\n *\n * ----------------------------------------------------------------------------\n * static ns_hookresult_t\n * cause_failure(void *hook_data, void *action_data, isc_result_t *resultp) {\n *     UNUSED(hook_data);\n *     UNUSED(action_data);\n *\n *     *resultp = ISC_R_FAILURE;\n *\n *     return (NS_HOOK_RETURN);\n * }\n * ----------------------------------------------------------------------------\n *\n * If this hook action was installed in the hook table using:\n *\n * ----------------------------------------------------------------------------\n * const ns_hook_t foo_fail = {\n *     .action = cause_failure,\n * };\n *\n * ns_hook_add(..., NS_QUERY_FOO_BEGIN, &foo_fail);\n * ----------------------------------------------------------------------------\n *\n * then query_foo() would return ISC_R_FAILURE every time it is called due\n * to the cause_failure() hook action returning NS_HOOK_RETURN and setting\n * '*resultp' to ISC_R_FAILURE.  query_foo() would also never log the\n * \"Lorem ipsum dolor sit amet...\" message.\n *\n * Consider a different hook action:\n *\n * ----------------------------------------------------------------------------\n * static ns_hookresult_t\n * log_qtype(void *hook_data, void *action_data, isc_result_t *resultp) {\n *     query_ctx_t *qctx = (query_ctx_t *)hook_data;\n *     FILE *stream = (FILE *)action_data;\n *\n *     UNUSED(resultp);\n *\n *     fprintf(stream, \"QTYPE=%u\\n\", qctx->qtype);\n *\n *     return (NS_HOOK_CONTINUE);\n * }\n * ----------------------------------------------------------------------------\n *\n * If this hook action was installed in the hook table instead of\n * cause_failure(), using:\n *\n * ----------------------------------------------------------------------------\n * const ns_hook_t foo_log_qtype = {\n *     .action = log_qtype,\n *     .action_data = stderr,\n * };\n *\n * ns_hook_add(..., NS_QUERY_FOO_BEGIN, &foo_log_qtype);\n * ----------------------------------------------------------------------------\n *\n * then the QTYPE stored in the query context passed to query_foo() would be\n * logged to stderr upon each call to that function; 'qctx' would be passed to\n * the hook action in 'hook_data' since it is specified in the CALL_HOOK() call\n * inside query_foo() while stderr would be passed to the hook action in\n * 'action_data' since it is specified in the ns_hook_t structure passed to\n * ns_hook_add().  As the hook action returns NS_HOOK_CONTINUE,\n * query_foo() would also be logging the \"Lorem ipsum dolor sit amet...\"\n * message before returning ISC_R_COMPLETE.\n */\n\n/*!\n * Currently-defined hook points. So long as these are unique,\n * the order in which they are declared is unimportant, but\n * currently matches the order in which they are referenced in\n * query.c.\n */\ntypedef enum {\n\t/* hookpoints from query.c */\n\tNS_QUERY_QCTX_INITIALIZED,\n\tNS_QUERY_QCTX_DESTROYED,\n\tNS_QUERY_SETUP,\n\tNS_QUERY_START_BEGIN,\n\tNS_QUERY_LOOKUP_BEGIN,\n\tNS_QUERY_RESUME_BEGIN,\n\tNS_QUERY_RESUME_RESTORED,\n\tNS_QUERY_GOT_ANSWER_BEGIN,\n\tNS_QUERY_RESPOND_ANY_BEGIN,\n\tNS_QUERY_RESPOND_ANY_FOUND,\n\tNS_QUERY_ADDANSWER_BEGIN,\n\tNS_QUERY_RESPOND_BEGIN,\n\tNS_QUERY_NOTFOUND_BEGIN,\n\tNS_QUERY_NOTFOUND_RECURSE,\n\tNS_QUERY_PREP_DELEGATION_BEGIN,\n\tNS_QUERY_ZONE_DELEGATION_BEGIN,\n\tNS_QUERY_DELEGATION_BEGIN,\n\tNS_QUERY_DELEGATION_RECURSE_BEGIN,\n\tNS_QUERY_NODATA_BEGIN,\n\tNS_QUERY_NXDOMAIN_BEGIN,\n\tNS_QUERY_NCACHE_BEGIN,\n\tNS_QUERY_ZEROTTL_RECURSE,\n\tNS_QUERY_CNAME_BEGIN,\n\tNS_QUERY_DNAME_BEGIN,\n\tNS_QUERY_PREP_RESPONSE_BEGIN,\n\tNS_QUERY_DONE_BEGIN,\n\tNS_QUERY_DONE_SEND,\n\n\t/* XXX other files could be added later */\n\n\tNS_HOOKPOINTS_COUNT\t/* MUST BE LAST */\n} ns_hookpoint_t;\n\n/*\n * Returned by a hook action to indicate how to proceed after it has\n * been called: continue processing, or return immediately.\n */\ntypedef enum {\n\tNS_HOOK_CONTINUE,\n\tNS_HOOK_RETURN,\n} ns_hookresult_t;\n\ntypedef ns_hookresult_t\n(*ns_hook_action_t)(void *arg, void *data, isc_result_t *resultp);\n\ntypedef struct ns_hook {\n\tisc_mem_t *mctx;\n\tns_hook_action_t action;\n\tvoid *action_data;\n\tISC_LINK(struct ns_hook) link;\n} ns_hook_t;\n\ntypedef ISC_LIST(ns_hook_t) ns_hooklist_t;\ntypedef ns_hooklist_t ns_hooktable_t[NS_HOOKPOINTS_COUNT];\n\n/*%\n * ns__hook_table is a global hook table, which is used if view->hooktable\n * is NULL.  It's intended only for use by unit tests.\n */\nLIBNS_EXTERNAL_DATA extern ns_hooktable_t *ns__hook_table;\n\n/*\n * Plugin API version\n *\n * When the API changes, increment NS_PLUGIN_VERSION. If the\n * change is backward-compatible (e.g., adding a new function call\n * but not changing or removing an old one), increment NS_PLUGIN_AGE\n * as well; if not, set NS_PLUGIN_AGE to 0.\n */\n#ifndef NS_PLUGIN_VERSION\n#define NS_PLUGIN_VERSION 1\n#define NS_PLUGIN_AGE 0\n#endif\n\ntypedef isc_result_t\nns_plugin_register_t(const char *parameters,\n\t\t     const void *cfg, const char *file, unsigned long line,\n\t\t     isc_mem_t *mctx, isc_log_t *lctx, void *actx,\n\t\t     ns_hooktable_t *hooktable, void **instp);\n/*%<\n * Called when registering a new plugin.\n *\n * 'parameters' contains the plugin configuration text.\n *\n * '*instp' will be set to the module instance handle if the function\n * is successful.\n *\n * Returns:\n *\\li\t#ISC_R_SUCCESS\n *\\li\t#ISC_R_NOMEMORY\n *\\li\tOther errors are possible\n */\n\ntypedef void\nns_plugin_destroy_t(void **instp);\n/*%<\n * Destroy a plugin instance.\n *\n * '*instp' must be set to NULL by the function before it returns.\n */\n\ntypedef isc_result_t\nns_plugin_check_t(const char *parameters,\n\t\t  const void *cfg, const char *file, unsigned long line,\n\t\t  isc_mem_t *mctx, isc_log_t *lctx, void *actx);\n/*%<\n * Check the validity of 'parameters'.\n */\n\ntypedef int\nns_plugin_version_t(void);\n/*%<\n * Return the API version number a plugin was compiled with.\n *\n * If the returned version number is no greater than\n * NS_PLUGIN_VERSION, and no less than NS_PLUGIN_VERSION - NS_PLUGIN_AGE,\n * then the module is API-compatible with named.\n */\n\n/*%\n * Prototypes for API functions to be defined in each module.\n */\nns_plugin_check_t plugin_check;\nns_plugin_destroy_t plugin_destroy;\nns_plugin_register_t plugin_register;\nns_plugin_version_t plugin_version;\n\nisc_result_t\nns_plugin_expandpath(const char *src, char *dst, size_t dstsize);\n/*%<\n * Prepare the plugin location to be passed to dlopen() based on the plugin\n * path or filename found in the configuration file ('src').  Store the result\n * in 'dst', which is 'dstsize' bytes large.\n *\n * On Unix systems, two classes of 'src' are recognized:\n *\n *   - If 'src' is an absolute or relative path, it will be copied to 'dst'\n *     verbatim.\n *\n *   - If 'src' is a filename (i.e. does not contain a path separator), the\n *     path to the directory into which named plugins are installed will be\n *     prepended to it and the result will be stored in 'dst'.\n *\n * On Windows, 'src' is always copied to 'dst' verbatim.\n *\n * Returns:\n *\\li\t#ISC_R_SUCCESS\tSuccess\n *\\li\t#ISC_R_NOSPACE\t'dst' is not large enough to hold the output string\n *\\li\tOther result\tsnprintf() returned a negative value\n */\n\nisc_result_t\nns_plugin_register(const char *modpath, const char *parameters,\n\t\t   const void *cfg, const char *cfg_file,\n\t\t   unsigned long cfg_line,\n\t\t   isc_mem_t *mctx, isc_log_t *lctx, void *actx,\n\t\t   dns_view_t *view);\n/*%<\n * Load the plugin module specified from the file 'modpath', and\n * register an instance using 'parameters'.\n *\n * 'cfg_file' and 'cfg_line' specify the location of the plugin\n * declaration in the configuration file.\n *\n * 'cfg' and 'actx' are the configuration context and ACL configuration\n * context, respectively; they are passed as void * here in order to\n * prevent this library from having a dependency on libisccfg).\n *\n * 'instp' will be left pointing to the instance of the plugin\n * created by the module's plugin_register function.\n */\n\nisc_result_t\nns_plugin_check(const char *modpath, const char *parameters,\n\t\tconst void *cfg, const char *cfg_file, unsigned long cfg_line,\n\t\tisc_mem_t *mctx, isc_log_t *lctx, void *actx);\n/*%<\n * Open the plugin module at 'modpath' and check the validity of\n * 'parameters', logging any errors or warnings found, then\n * close it without configuring it.\n */\n\nvoid\nns_plugins_create(isc_mem_t *mctx, ns_plugins_t **listp);\n/*%<\n * Create and initialize a plugin list.\n */\n\nvoid\nns_plugins_free(isc_mem_t *mctx, void **listp);\n/*%<\n * Close each plugin module in a plugin list, then free the list object.\n */\n\nvoid\nns_hooktable_free(isc_mem_t *mctx, void **tablep);\n/*%<\n * Free a hook table.\n */\n\nvoid\nns_hook_add(ns_hooktable_t *hooktable, isc_mem_t *mctx,\n\t    ns_hookpoint_t hookpoint, const ns_hook_t *hook);\n/*%<\n * Allocate (using memory context 'mctx') a copy of the 'hook' structure\n * describing a hook action and append it to the list of hooks at 'hookpoint'\n * in 'hooktable'.\n *\n * Requires:\n *\\li 'hooktable' is not NULL\n *\n *\\li 'mctx' is not NULL\n *\n *\\li 'hookpoint' is less than NS_QUERY_HOOKS_COUNT\n *\n *\\li 'hook' is not NULL\n */\n\nvoid\nns_hooktable_init(ns_hooktable_t *hooktable);\n/*%<\n * Initialize a hook table.\n */\n\nisc_result_t\nns_hooktable_create(isc_mem_t *mctx, ns_hooktable_t **tablep);\n/*%<\n * Allocate and initialize a hook table.\n */\n#endif /* NS_HOOKS_H */\n",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/lib/isc/unix/pk11_api.c": "/*\n * Copyright (C) Internet Systems Consortium, Inc. (\"ISC\")\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n *\n * See the COPYRIGHT file distributed with this work for additional\n * information regarding copyright ownership.\n */\n\n\n/*! \\file */\n\n#include <config.h>\n\n#include <string.h>\n#include <dlfcn.h>\n\n#include <isc/log.h>\n#include <isc/mem.h>\n#include <isc/once.h>\n#include <isc/print.h>\n#include <isc/stdio.h>\n#include <isc/thread.h>\n#include <isc/util.h>\n\n#include <pkcs11/cryptoki.h>\n#include <pkcs11/pkcs11.h>\n\n#define KEEP_PKCS11_NAMES\n#include <pk11/pk11.h>\n#include <pk11/internal.h>\n\nstatic void *hPK11 = NULL;\nstatic char loaderrmsg[1024];\n\nCK_RV\npkcs_C_Initialize(CK_VOID_PTR pReserved) {\n\tCK_C_Initialize sym;\n\n\tif (hPK11 != NULL)\n\t\treturn (CKR_LIBRARY_ALREADY_INITIALIZED);\n\n\thPK11 = dlopen(pk11_get_lib_name(), RTLD_NOW);\n\n\tif (hPK11 == NULL) {\n\t\tsnprintf(loaderrmsg, sizeof(loaderrmsg),\n\t\t\t \"dlopen(\\\"%s\\\") failed: %s\\n\",\n\t\t\t pk11_get_lib_name(), dlerror());\n\t\treturn (CKR_LIBRARY_FAILED_TO_LOAD);\n\t}\n\tsym = (CK_C_Initialize)dlsym(hPK11, \"C_Initialize\");\n\tif (sym == NULL)\n\t\treturn (CKR_SYMBOL_RESOLUTION_FAILED);\n\treturn (*sym)(pReserved);\n}\n\nchar *pk11_get_load_error_message(void) {\n\treturn (loaderrmsg);\n}\n\nCK_RV\npkcs_C_Finalize(CK_VOID_PTR pReserved) {\n\tCK_C_Finalize sym;\n\tCK_RV rv;\n\n\tif (hPK11 == NULL)\n\t\treturn (CKR_LIBRARY_FAILED_TO_LOAD);\n\tsym = (CK_C_Finalize)dlsym(hPK11, \"C_Finalize\");\n\tif (sym == NULL)\n\t\treturn (CKR_SYMBOL_RESOLUTION_FAILED);\n\trv = (*sym)(pReserved);\n\tif ((rv == CKR_OK) && (dlclose(hPK11) != 0))\n\t\treturn (CKR_LIBRARY_FAILED_TO_LOAD);\n\thPK11 = NULL;\n\treturn (rv);\n}\n\nCK_RV\npkcs_C_GetSlotList(CK_BBOOL tokenPresent, CK_SLOT_ID_PTR pSlotList,\n\t\t   CK_ULONG_PTR pulCount)\n{\n\tstatic CK_C_GetSlotList sym = NULL;\n\tstatic void *pPK11 = NULL;\n\n\tif (hPK11 == NULL)\n\t\treturn (CKR_LIBRARY_FAILED_TO_LOAD);\n\tif ((sym == NULL) || (hPK11 != pPK11)) {\n\t\tpPK11 = hPK11;\n\t\tsym = (CK_C_GetSlotList)dlsym(hPK11, \"C_GetSlotList\");\n\t}\n\tif (sym == NULL)\n\t\treturn (CKR_SYMBOL_RESOLUTION_FAILED);\n\treturn (*sym)(tokenPresent, pSlotList, pulCount);\n}\n\nCK_RV\npkcs_C_GetTokenInfo(CK_SLOT_ID slotID, CK_TOKEN_INFO_PTR pInfo) {\n\tstatic CK_C_GetTokenInfo sym = NULL;\n\tstatic void *pPK11 = NULL;\n\n\tif (hPK11 == NULL)\n\t\treturn (CKR_LIBRARY_FAILED_TO_LOAD);\n\tif ((sym == NULL) || (hPK11 != pPK11)) {\n\t\tpPK11 = hPK11;\n\t\tsym = (CK_C_GetTokenInfo)dlsym(hPK11, \"C_GetTokenInfo\");\n\t}\n\tif (sym == NULL)\n\t\treturn (CKR_SYMBOL_RESOLUTION_FAILED);\n\treturn (*sym)(slotID, pInfo);\n}\n\nCK_RV\npkcs_C_GetMechanismInfo(CK_SLOT_ID slotID, CK_MECHANISM_TYPE type,\n\t\t\tCK_MECHANISM_INFO_PTR pInfo)\n{\n\tstatic CK_C_GetMechanismInfo sym = NULL;\n\tstatic void *pPK11 = NULL;\n\n\tif (hPK11 == NULL)\n\t\treturn (CKR_LIBRARY_FAILED_TO_LOAD);\n\tif ((sym == NULL) || (hPK11 != pPK11)) {\n\t\tpPK11 = hPK11;\n\t\tsym = (CK_C_GetMechanismInfo)dlsym(hPK11,\n\t\t\t\t\t\t   \"C_GetMechanismInfo\");\n\t}\n\tif (sym == NULL)\n\t\treturn (CKR_SYMBOL_RESOLUTION_FAILED);\n\treturn (*sym)(slotID, type, pInfo);\n}\n\nCK_RV\npkcs_C_OpenSession(CK_SLOT_ID slotID, CK_FLAGS flags,\n\t\t   CK_VOID_PTR pApplication,\n\t\t   CK_RV  (*Notify) (CK_SESSION_HANDLE hSession,\n\t\t\t\t     CK_NOTIFICATION event,\n\t\t\t\t     CK_VOID_PTR pApplication),\n\t\t   CK_SESSION_HANDLE_PTR phSession)\n{\n\tstatic CK_C_OpenSession sym = NULL;\n\tstatic void *pPK11 = NULL;\n\n\tif (hPK11 == NULL)\n\t\thPK11 = dlopen(pk11_get_lib_name(), RTLD_NOW);\n\tif (hPK11 == NULL) {\n\t\tsnprintf(loaderrmsg, sizeof(loaderrmsg),\n\t\t\t \"dlopen(\\\"%s\\\") failed: %s\\n\",\n\t\t\t pk11_get_lib_name(), dlerror());\n\t\treturn (CKR_LIBRARY_FAILED_TO_LOAD);\n\t}\n\tif ((sym == NULL) || (hPK11 != pPK11)) {\n\t\tpPK11 = hPK11;\n\t\tsym = (CK_C_OpenSession)dlsym(hPK11, \"C_OpenSession\");\n\t}\n\tif (sym == NULL)\n\t\treturn (CKR_SYMBOL_RESOLUTION_FAILED);\n\treturn (*sym)(slotID, flags, pApplication, Notify, phSession);\n}\n\nCK_RV\npkcs_C_CloseSession(CK_SESSION_HANDLE hSession) {\n\tstatic CK_C_CloseSession sym = NULL;\n\tstatic void *pPK11 = NULL;\n\n\tif (hPK11 == NULL)\n\t\treturn (CKR_LIBRARY_FAILED_TO_LOAD);\n\tif ((sym == NULL) || (hPK11 != pPK11)) {\n\t\tpPK11 = hPK11;\n\t\tsym = (CK_C_CloseSession)dlsym(hPK11, \"C_CloseSession\");\n\t}\n\tif (sym == NULL)\n\t\treturn (CKR_SYMBOL_RESOLUTION_FAILED);\n\treturn (*sym)(hSession);\n}\n\nCK_RV\npkcs_C_Login(CK_SESSION_HANDLE hSession, CK_USER_TYPE userType,\n\t     CK_CHAR_PTR pPin, CK_ULONG usPinLen)\n{\n\tstatic CK_C_Login sym = NULL;\n\tstatic void *pPK11 = NULL;\n\n\tif (hPK11 == NULL)\n\t\treturn (CKR_LIBRARY_FAILED_TO_LOAD);\n\tif ((sym == NULL) || (hPK11 != pPK11)) {\n\t\tpPK11 = hPK11;\n\t\tsym = (CK_C_Login)dlsym(hPK11, \"C_Login\");\n\t}\n\tif (sym == NULL)\n\t\treturn (CKR_SYMBOL_RESOLUTION_FAILED);\n\treturn (*sym)(hSession, userType, pPin, usPinLen);\n}\n\nCK_RV\npkcs_C_Logout(CK_SESSION_HANDLE hSession) {\n\tstatic CK_C_Logout sym = NULL;\n\tstatic void *pPK11 = NULL;\n\n\tif (hPK11 == NULL)\n\t\treturn (CKR_LIBRARY_FAILED_TO_LOAD);\n\tif ((sym == NULL) || (hPK11 != pPK11)) {\n\t\tpPK11 = hPK11;\n\t\tsym = (CK_C_Logout)dlsym(hPK11, \"C_Logout\");\n\t}\n\tif (sym == NULL)\n\t\treturn (CKR_SYMBOL_RESOLUTION_FAILED);\n\treturn (*sym)(hSession);\n}\n\nCK_RV\npkcs_C_CreateObject(CK_SESSION_HANDLE hSession, CK_ATTRIBUTE_PTR pTemplate,\n\t\t    CK_ULONG usCount, CK_OBJECT_HANDLE_PTR phObject)\n{\n\tstatic CK_C_CreateObject sym = NULL;\n\tstatic void *pPK11 = NULL;\n\n\tif (hPK11 == NULL)\n\t\treturn (CKR_LIBRARY_FAILED_TO_LOAD);\n\tif ((sym == NULL) || (hPK11 != pPK11)) {\n\t\tpPK11 = hPK11;\n\t\tsym = (CK_C_CreateObject)dlsym(hPK11, \"C_CreateObject\");\n\t}\n\tif (sym == NULL)\n\t\treturn (CKR_SYMBOL_RESOLUTION_FAILED);\n\treturn (*sym)(hSession, pTemplate, usCount, phObject);\n}\n\nCK_RV\npkcs_C_DestroyObject(CK_SESSION_HANDLE hSession, CK_OBJECT_HANDLE hObject) {\n\tstatic CK_C_DestroyObject sym = NULL;\n\tstatic void *pPK11 = NULL;\n\n\tif (hPK11 == NULL)\n\t\treturn (CKR_LIBRARY_FAILED_TO_LOAD);\n\tif ((sym == NULL) || (hPK11 != pPK11)) {\n\t\tpPK11 = hPK11;\n\t\tsym = (CK_C_DestroyObject)dlsym(hPK11, \"C_DestroyObject\");\n\t}\n\tif (sym == NULL)\n\t\treturn (CKR_SYMBOL_RESOLUTION_FAILED);\n\treturn (*sym)(hSession, hObject);\n}\n\nCK_RV\npkcs_C_GetAttributeValue(CK_SESSION_HANDLE hSession, CK_OBJECT_HANDLE hObject,\n\t\t\t CK_ATTRIBUTE_PTR pTemplate, CK_ULONG usCount)\n{\n\tstatic CK_C_GetAttributeValue sym = NULL;\n\tstatic void *pPK11 = NULL;\n\n\tif (hPK11 == NULL)\n\t\treturn (CKR_LIBRARY_FAILED_TO_LOAD);\n\tif ((sym == NULL) || (hPK11 != pPK11)) {\n\t\tpPK11 = hPK11;\n\t\tsym = (CK_C_GetAttributeValue)dlsym(hPK11,\n\t\t\t\t\t\t    \"C_GetAttributeValue\");\n\t}\n\tif (sym == NULL)\n\t\treturn (CKR_SYMBOL_RESOLUTION_FAILED);\n\treturn (*sym)(hSession, hObject, pTemplate, usCount);\n}\n\nCK_RV\npkcs_C_SetAttributeValue(CK_SESSION_HANDLE hSession, CK_OBJECT_HANDLE hObject,\n\t\t\t CK_ATTRIBUTE_PTR pTemplate, CK_ULONG usCount)\n{\n\tstatic CK_C_SetAttributeValue sym = NULL;\n\tstatic void *pPK11 = NULL;\n\n\tif (hPK11 == NULL)\n\t\treturn (CKR_LIBRARY_FAILED_TO_LOAD);\n\tif ((sym == NULL) || (hPK11 != pPK11)) {\n\t\tpPK11 = hPK11;\n\t\tsym = (CK_C_SetAttributeValue)dlsym(hPK11,\n\t\t\t\t\t\t    \"C_SetAttributeValue\");\n\t}\n\tif (sym == NULL)\n\t\treturn (CKR_SYMBOL_RESOLUTION_FAILED);\n\treturn (*sym)(hSession, hObject, pTemplate, usCount);\n}\n\nCK_RV\npkcs_C_FindObjectsInit(CK_SESSION_HANDLE hSession, CK_ATTRIBUTE_PTR pTemplate,\n\t\t       CK_ULONG usCount)\n{\n\tstatic CK_C_FindObjectsInit sym = NULL;\n\tstatic void *pPK11 = NULL;\n\n\tif (hPK11 == NULL)\n\t\treturn (CKR_LIBRARY_FAILED_TO_LOAD);\n\tif ((sym == NULL) || (hPK11 != pPK11)) {\n\t\tpPK11 = hPK11;\n\t\tsym = (CK_C_FindObjectsInit)dlsym(hPK11, \"C_FindObjectsInit\");\n\t}\n\tif (sym == NULL)\n\t\treturn (CKR_SYMBOL_RESOLUTION_FAILED);\n\treturn (*sym)(hSession, pTemplate, usCount);\n}\n\nCK_RV\npkcs_C_FindObjects(CK_SESSION_HANDLE hSession, CK_OBJECT_HANDLE_PTR phObject,\n\t\t   CK_ULONG usMaxObjectCount, CK_ULONG_PTR pusObjectCount)\n{\n\tstatic CK_C_FindObjects sym = NULL;\n\tstatic void *pPK11 = NULL;\n\n\tif (hPK11 == NULL)\n\t\treturn (CKR_LIBRARY_FAILED_TO_LOAD);\n\tif ((sym == NULL) || (hPK11 != pPK11)) {\n\t\tpPK11 = hPK11;\n\t\tsym = (CK_C_FindObjects)dlsym(hPK11, \"C_FindObjects\");\n\t}\n\tif (sym == NULL)\n\t\treturn (CKR_SYMBOL_RESOLUTION_FAILED);\n\treturn (*sym)(hSession, phObject, usMaxObjectCount, pusObjectCount);\n}\n\nCK_RV\npkcs_C_FindObjectsFinal(CK_SESSION_HANDLE hSession)\n{\n\tstatic CK_C_FindObjectsFinal sym = NULL;\n\tstatic void *pPK11 = NULL;\n\n\tif (hPK11 == NULL)\n\t\treturn (CKR_LIBRARY_FAILED_TO_LOAD);\n\tif ((sym == NULL) || (hPK11 != pPK11)) {\n\t\tpPK11 = hPK11;\n\t\tsym = (CK_C_FindObjectsFinal)dlsym(hPK11,\n\t\t\t\t\t\t   \"C_FindObjectsFinal\");\n\t}\n\tif (sym == NULL)\n\t\treturn (CKR_SYMBOL_RESOLUTION_FAILED);\n\treturn (*sym)(hSession);\n}\n\nCK_RV\npkcs_C_EncryptInit(CK_SESSION_HANDLE hSession, CK_MECHANISM_PTR pMechanism,\n\t\t   CK_OBJECT_HANDLE hKey)\n{\n\tstatic CK_C_EncryptInit sym = NULL;\n\tstatic void *pPK11 = NULL;\n\n\tif (hPK11 == NULL)\n\t\treturn (CKR_LIBRARY_FAILED_TO_LOAD);\n\tif ((sym == NULL) || (hPK11 != pPK11)) {\n\t\tpPK11 = hPK11;\n\t\tsym = (CK_C_EncryptInit)dlsym(hPK11, \"C_EncryptInit\");\n\t}\n\tif (sym == NULL)\n\t\treturn (CKR_SYMBOL_RESOLUTION_FAILED);\n\treturn (*sym)(hSession, pMechanism, hKey);\n}\n\nCK_RV\npkcs_C_Encrypt(CK_SESSION_HANDLE hSession, CK_BYTE_PTR pData,\n\t       CK_ULONG ulDataLen, CK_BYTE_PTR pEncryptedData,\n\t       CK_ULONG_PTR pulEncryptedDataLen)\n{\n\tstatic CK_C_Encrypt sym = NULL;\n\tstatic void *pPK11 = NULL;\n\n\tif (hPK11 == NULL)\n\t\treturn (CKR_LIBRARY_FAILED_TO_LOAD);\n\tif ((sym == NULL) || (hPK11 != pPK11)) {\n\t\tpPK11 = hPK11;\n\t\tsym = (CK_C_Encrypt)dlsym(hPK11, \"C_Encrypt\");\n\t}\n\tif (sym == NULL)\n\t\treturn (CKR_SYMBOL_RESOLUTION_FAILED);\n\treturn (*sym)(hSession, pData, ulDataLen,\n\t\t      pEncryptedData, pulEncryptedDataLen);\n}\n\nCK_RV\npkcs_C_DigestInit(CK_SESSION_HANDLE hSession, CK_MECHANISM_PTR pMechanism) {\n\tstatic CK_C_DigestInit sym = NULL;\n\tstatic void *pPK11 = NULL;\n\n\tif (hPK11 == NULL)\n\t\treturn (CKR_LIBRARY_FAILED_TO_LOAD);\n\tif ((sym == NULL) || (hPK11 != pPK11)) {\n\t\tpPK11 = hPK11;\n\t\tsym = (CK_C_DigestInit)dlsym(hPK11, \"C_DigestInit\");\n\t}\n\tif (sym == NULL)\n\t\treturn (CKR_SYMBOL_RESOLUTION_FAILED);\n\treturn (*sym)(hSession, pMechanism);\n}\n\nCK_RV\npkcs_C_DigestUpdate(CK_SESSION_HANDLE hSession, CK_BYTE_PTR pPart,\n\t\t    CK_ULONG ulPartLen)\n{\n\tstatic CK_C_DigestUpdate sym = NULL;\n\tstatic void *pPK11 = NULL;\n\n\tif (hPK11 == NULL)\n\t\treturn (CKR_LIBRARY_FAILED_TO_LOAD);\n\tif ((sym == NULL) || (hPK11 != pPK11)) {\n\t\tpPK11 = hPK11;\n\t\tsym = (CK_C_DigestUpdate)dlsym(hPK11, \"C_DigestUpdate\");\n\t}\n\tif (sym == NULL)\n\t\treturn (CKR_SYMBOL_RESOLUTION_FAILED);\n\treturn (*sym)(hSession, pPart, ulPartLen);\n}\n\nCK_RV\npkcs_C_DigestFinal(CK_SESSION_HANDLE hSession, CK_BYTE_PTR pDigest,\n\t\t   CK_ULONG_PTR pulDigestLen)\n{\n\tstatic CK_C_DigestFinal sym = NULL;\n\tstatic void *pPK11 = NULL;\n\n\tif (hPK11 == NULL)\n\t\treturn (CKR_LIBRARY_FAILED_TO_LOAD);\n\tif ((sym == NULL) || (hPK11 != pPK11)) {\n\t\tpPK11 = hPK11;\n\t\tsym = (CK_C_DigestFinal)dlsym(hPK11, \"C_DigestFinal\");\n\t}\n\tif (sym == NULL)\n\t\treturn (CKR_SYMBOL_RESOLUTION_FAILED);\n\treturn (*sym)(hSession, pDigest, pulDigestLen);\n}\n\nCK_RV\npkcs_C_SignInit(CK_SESSION_HANDLE hSession, CK_MECHANISM_PTR pMechanism,\n\t\tCK_OBJECT_HANDLE hKey)\n{\n\tstatic CK_C_SignInit sym = NULL;\n\tstatic void *pPK11 = NULL;\n\n\tif (hPK11 == NULL)\n\t\treturn (CKR_LIBRARY_FAILED_TO_LOAD);\n\tif ((sym == NULL) || (hPK11 != pPK11)) {\n\t\tpPK11 = hPK11;\n\t\tsym = (CK_C_SignInit)dlsym(hPK11, \"C_SignInit\");\n\t}\n\tif (sym == NULL)\n\t\treturn (CKR_SYMBOL_RESOLUTION_FAILED);\n\treturn (*sym)(hSession, pMechanism, hKey);\n}\n\nCK_RV\npkcs_C_Sign(CK_SESSION_HANDLE hSession, CK_BYTE_PTR pData,\n\t    CK_ULONG ulDataLen, CK_BYTE_PTR pSignature,\n\t    CK_ULONG_PTR pulSignatureLen)\n{\n\tstatic CK_C_Sign sym = NULL;\n\tstatic void *pPK11 = NULL;\n\n\tif (hPK11 == NULL)\n\t\treturn (CKR_LIBRARY_FAILED_TO_LOAD);\n\tif ((sym == NULL) || (hPK11 != pPK11)) {\n\t\tpPK11 = hPK11;\n\t\tsym = (CK_C_Sign)dlsym(hPK11, \"C_Sign\");\n\t}\n\tif (sym == NULL)\n\t\treturn (CKR_SYMBOL_RESOLUTION_FAILED);\n\treturn (*sym)(hSession, pData, ulDataLen, pSignature, pulSignatureLen);\n}\n\nCK_RV\npkcs_C_SignUpdate(CK_SESSION_HANDLE hSession, CK_BYTE_PTR pPart,\n\t\t  CK_ULONG ulPartLen)\n{\n\tstatic CK_C_SignUpdate sym = NULL;\n\tstatic void *pPK11 = NULL;\n\n\tif (hPK11 == NULL)\n\t\treturn (CKR_LIBRARY_FAILED_TO_LOAD);\n\tif ((sym == NULL) || (hPK11 != pPK11)) {\n\t\tpPK11 = hPK11;\n\t\tsym = (CK_C_SignUpdate)dlsym(hPK11, \"C_SignUpdate\");\n\t}\n\tif (sym == NULL)\n\t\treturn (CKR_SYMBOL_RESOLUTION_FAILED);\n\treturn (*sym)(hSession, pPart, ulPartLen);\n}\n\nCK_RV\npkcs_C_SignFinal(CK_SESSION_HANDLE hSession, CK_BYTE_PTR pSignature,\n\t\t CK_ULONG_PTR pulSignatureLen)\n{\n\tstatic CK_C_SignFinal sym = NULL;\n\tstatic void *pPK11 = NULL;\n\n\tif (hPK11 == NULL)\n\t\treturn (CKR_LIBRARY_FAILED_TO_LOAD);\n\tif ((sym == NULL) || (hPK11 != pPK11)) {\n\t\tpPK11 = hPK11;\n\t\tsym = (CK_C_SignFinal)dlsym(hPK11, \"C_SignFinal\");\n\t}\n\tif (sym == NULL)\n\t\treturn (CKR_SYMBOL_RESOLUTION_FAILED);\n\treturn (*sym)(hSession, pSignature, pulSignatureLen);\n}\n\nCK_RV\npkcs_C_VerifyInit(CK_SESSION_HANDLE hSession, CK_MECHANISM_PTR pMechanism,\n\t\t  CK_OBJECT_HANDLE hKey)\n{\n\tstatic CK_C_VerifyInit sym = NULL;\n\tstatic void *pPK11 = NULL;\n\n\tif (hPK11 == NULL)\n\t\treturn (CKR_LIBRARY_FAILED_TO_LOAD);\n\tif ((sym == NULL) || (hPK11 != pPK11)) {\n\t\tpPK11 = hPK11;\n\t\tsym = (CK_C_VerifyInit)dlsym(hPK11, \"C_VerifyInit\");\n\t}\n\tif (sym == NULL)\n\t\treturn (CKR_SYMBOL_RESOLUTION_FAILED);\n\treturn (*sym)(hSession, pMechanism, hKey);\n}\n\nCK_RV\npkcs_C_Verify(CK_SESSION_HANDLE hSession, CK_BYTE_PTR pData,\n\t      CK_ULONG ulDataLen, CK_BYTE_PTR pSignature,\n\t      CK_ULONG ulSignatureLen)\n{\n\tstatic CK_C_Verify sym = NULL;\n\tstatic void *pPK11 = NULL;\n\n\tif (hPK11 == NULL)\n\t\treturn (CKR_LIBRARY_FAILED_TO_LOAD);\n\tif ((sym == NULL) || (hPK11 != pPK11)) {\n\t\tpPK11 = hPK11;\n\t\tsym = (CK_C_Verify)dlsym(hPK11, \"C_Verify\");\n\t}\n\tif (sym == NULL)\n\t\treturn (CKR_SYMBOL_RESOLUTION_FAILED);\n\treturn (*sym)(hSession, pData, ulDataLen, pSignature, ulSignatureLen);\n}\n\nCK_RV\npkcs_C_VerifyUpdate(CK_SESSION_HANDLE hSession, CK_BYTE_PTR pPart,\n\t\t    CK_ULONG ulPartLen)\n{\n\tstatic CK_C_VerifyUpdate sym = NULL;\n\tstatic void *pPK11 = NULL;\n\n\tif (hPK11 == NULL)\n\t\treturn (CKR_LIBRARY_FAILED_TO_LOAD);\n\tif ((sym == NULL) || (hPK11 != pPK11)) {\n\t\tpPK11 = hPK11;\n\t\tsym = (CK_C_VerifyUpdate)dlsym(hPK11, \"C_VerifyUpdate\");\n\t}\n\tif (sym == NULL)\n\t\treturn (CKR_SYMBOL_RESOLUTION_FAILED);\n\treturn (*sym)(hSession, pPart, ulPartLen);\n}\n\nCK_RV\npkcs_C_VerifyFinal(CK_SESSION_HANDLE hSession, CK_BYTE_PTR pSignature,\n\t\t   CK_ULONG ulSignatureLen)\n{\n\tstatic CK_C_VerifyFinal sym = NULL;\n\tstatic void *pPK11 = NULL;\n\n\tif (hPK11 == NULL)\n\t\treturn (CKR_LIBRARY_FAILED_TO_LOAD);\n\tif ((sym == NULL) || (hPK11 != pPK11)) {\n\t\tpPK11 = hPK11;\n\t\tsym = (CK_C_VerifyFinal)dlsym(hPK11, \"C_VerifyFinal\");\n\t}\n\tif (sym == NULL)\n\t\treturn (CKR_SYMBOL_RESOLUTION_FAILED);\n\treturn (*sym)(hSession, pSignature, ulSignatureLen);\n}\n\nCK_RV\npkcs_C_GenerateKey(CK_SESSION_HANDLE hSession, CK_MECHANISM_PTR pMechanism,\n\t\t   CK_ATTRIBUTE_PTR pTemplate, CK_ULONG ulCount,\n\t\t   CK_OBJECT_HANDLE_PTR phKey)\n{\n\tstatic CK_C_GenerateKey sym = NULL;\n\tstatic void *pPK11 = NULL;\n\n\tif (hPK11 == NULL)\n\t\treturn (CKR_LIBRARY_FAILED_TO_LOAD);\n\tif ((sym == NULL) || (hPK11 != pPK11)) {\n\t\tpPK11 = hPK11;\n\t\tsym = (CK_C_GenerateKey)dlsym(hPK11, \"C_GenerateKey\");\n\t}\n\tif (sym == NULL)\n\t\treturn (CKR_SYMBOL_RESOLUTION_FAILED);\n\treturn (*sym)(hSession, pMechanism, pTemplate, ulCount, phKey);\n}\n\nCK_RV\npkcs_C_GenerateKeyPair(CK_SESSION_HANDLE hSession,\n\t\t       CK_MECHANISM_PTR pMechanism,\n\t\t       CK_ATTRIBUTE_PTR pPublicKeyTemplate,\n\t\t       CK_ULONG usPublicKeyAttributeCount,\n\t\t       CK_ATTRIBUTE_PTR pPrivateKeyTemplate,\n\t\t       CK_ULONG usPrivateKeyAttributeCount,\n\t\t       CK_OBJECT_HANDLE_PTR phPrivateKey,\n\t\t       CK_OBJECT_HANDLE_PTR phPublicKey)\n{\n\tstatic CK_C_GenerateKeyPair sym = NULL;\n\tstatic void *pPK11 = NULL;\n\n\tif (hPK11 == NULL)\n\t\treturn (CKR_LIBRARY_FAILED_TO_LOAD);\n\tif ((sym == NULL) || (hPK11 != pPK11)) {\n\t\tpPK11 = hPK11;\n\t\tsym = (CK_C_GenerateKeyPair)dlsym(hPK11, \"C_GenerateKeyPair\");\n\t}\n\tif (sym == NULL)\n\t\treturn (CKR_SYMBOL_RESOLUTION_FAILED);\n\treturn (*sym)(hSession,\n\t\t      pMechanism,\n\t\t      pPublicKeyTemplate,\n\t\t      usPublicKeyAttributeCount,\n\t\t      pPrivateKeyTemplate,\n\t\t      usPrivateKeyAttributeCount,\n\t\t      phPrivateKey,\n\t\t      phPublicKey);\n}\n\nCK_RV\npkcs_C_DeriveKey(CK_SESSION_HANDLE hSession, CK_MECHANISM_PTR pMechanism,\n\t\t CK_OBJECT_HANDLE hBaseKey, CK_ATTRIBUTE_PTR pTemplate,\n\t\t CK_ULONG ulAttributeCount, CK_OBJECT_HANDLE_PTR phKey)\n{\n\tstatic CK_C_DeriveKey sym = NULL;\n\tstatic void *pPK11 = NULL;\n\n\tif (hPK11 == NULL)\n\t\treturn (CKR_LIBRARY_FAILED_TO_LOAD);\n\tif ((sym == NULL) || (hPK11 != pPK11)) {\n\t\tpPK11 = hPK11;\n\t\tsym = (CK_C_DeriveKey)dlsym(hPK11, \"C_DeriveKey\");\n\t}\n\tif (sym == NULL)\n\t\treturn (CKR_SYMBOL_RESOLUTION_FAILED);\n\treturn (*sym)(hSession,\n\t\t      pMechanism,\n\t\t      hBaseKey,\n\t\t      pTemplate,\n\t\t      ulAttributeCount,\n\t\t      phKey);\n}\n\nCK_RV\npkcs_C_SeedRandom(CK_SESSION_HANDLE hSession, CK_BYTE_PTR pSeed,\n\t\t  CK_ULONG ulSeedLen)\n{\n\tstatic CK_C_SeedRandom sym = NULL;\n\tstatic void *pPK11 = NULL;\n\n\tif (hPK11 == NULL)\n\t\treturn (CKR_LIBRARY_FAILED_TO_LOAD);\n\tif ((sym == NULL) || (hPK11 != pPK11)) {\n\t\tpPK11 = hPK11;\n\t\tsym = (CK_C_SeedRandom)dlsym(hPK11, \"C_SeedRandom\");\n\t}\n\tif (sym == NULL)\n\t\treturn (CKR_SYMBOL_RESOLUTION_FAILED);\n\treturn (*sym)(hSession, pSeed, ulSeedLen);\n}\n\nCK_RV\npkcs_C_GenerateRandom(CK_SESSION_HANDLE hSession, CK_BYTE_PTR RandomData,\n\t\t      CK_ULONG ulRandomLen)\n{\n\tstatic CK_C_GenerateRandom sym = NULL;\n\tstatic void *pPK11 = NULL;\n\n\tif (hPK11 == NULL)\n\t\treturn (CKR_LIBRARY_FAILED_TO_LOAD);\n\tif ((sym == NULL) || (hPK11 != pPK11)) {\n\t\tpPK11 = hPK11;\n\t\tsym = (CK_C_GenerateRandom)dlsym(hPK11, \"C_GenerateRandom\");\n\t}\n\tif (sym == NULL)\n\t\treturn (CKR_SYMBOL_RESOLUTION_FAILED);\n\treturn (*sym)(hSession, RandomData, ulRandomLen);\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/lib/dns/dyndb.c": "/*\n * Copyright (C) Internet Systems Consortium, Inc. (\"ISC\")\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n *\n * See the COPYRIGHT file distributed with this work for additional\n * information regarding copyright ownership.\n */\n\n\n#include <config.h>\n\n#if HAVE_DLFCN_H\n#include <dlfcn.h>\n#elif _WIN32\n#include <windows.h>\n#endif\n\n#include <isc/buffer.h>\n#include <isc/mem.h>\n#include <isc/mutex.h>\n#include <isc/once.h>\n#include <isc/result.h>\n#include <isc/region.h>\n#include <isc/task.h>\n#include <isc/types.h>\n#include <isc/util.h>\n\n#include <dns/dyndb.h>\n#include <dns/log.h>\n#include <dns/types.h>\n#include <dns/view.h>\n#include <dns/zone.h>\n\n#include <string.h>\n\n#define CHECK(op)\t\t\t\t\t\t\\\n\tdo { result = (op);\t\t\t\t\t\\\n\t\tif (result != ISC_R_SUCCESS) goto cleanup;\t\\\n\t} while (0)\n\n\ntypedef struct dyndb_implementation dyndb_implementation_t;\nstruct dyndb_implementation {\n\tisc_mem_t\t\t\t*mctx;\n\tvoid\t\t\t\t*handle;\n\tdns_dyndb_register_t\t\t*register_func;\n\tdns_dyndb_destroy_t\t\t*destroy_func;\n\tchar\t\t\t\t*name;\n\tvoid\t\t\t\t*inst;\n\tLINK(dyndb_implementation_t)\tlink;\n};\n\n/*\n * List of dyndb implementations. Locked by dyndb_lock.\n *\n * These are stored here so they can be cleaned up on shutdown.\n * (The order in which they are stored is not important.)\n */\nstatic LIST(dyndb_implementation_t) dyndb_implementations;\n\n/* Locks dyndb_implementations. */\nstatic isc_mutex_t dyndb_lock;\nstatic isc_once_t once = ISC_ONCE_INIT;\n\nstatic void\ndyndb_initialize(void) {\n\tisc_mutex_init(&dyndb_lock);\n\tINIT_LIST(dyndb_implementations);\n}\n\nstatic dyndb_implementation_t *\nimpfind(const char *name) {\n\tdyndb_implementation_t *imp;\n\n\tfor (imp = ISC_LIST_HEAD(dyndb_implementations);\n\t     imp != NULL;\n\t     imp = ISC_LIST_NEXT(imp, link))\n\t\tif (strcasecmp(name, imp->name) == 0)\n\t\t\treturn (imp);\n\treturn (NULL);\n}\n\n#if HAVE_DLFCN_H && HAVE_DLOPEN\nstatic isc_result_t\nload_symbol(void *handle, const char *filename,\n\t    const char *symbol_name, void **symbolp)\n{\n\tconst char *errmsg;\n\tvoid *symbol;\n\n\tREQUIRE(handle != NULL);\n\tREQUIRE(symbolp != NULL && *symbolp == NULL);\n\n\tsymbol = dlsym(handle, symbol_name);\n\tif (symbol == NULL) {\n\t\terrmsg = dlerror();\n\t\tif (errmsg == NULL)\n\t\t\terrmsg = \"returned function pointer is NULL\";\n\t\tisc_log_write(dns_lctx, DNS_LOGCATEGORY_DATABASE,\n\t\t\t      DNS_LOGMODULE_DYNDB, ISC_LOG_ERROR,\n\t\t\t      \"failed to lookup symbol %s in \"\n\t\t\t      \"dyndb module '%s': %s\",\n\t\t\t      symbol_name, filename, errmsg);\n\t\treturn (ISC_R_FAILURE);\n\t}\n\tdlerror();\n\n\t*symbolp = symbol;\n\n\treturn (ISC_R_SUCCESS);\n}\n\nstatic isc_result_t\nload_library(isc_mem_t *mctx, const char *filename, const char *instname,\n\t     dyndb_implementation_t **impp)\n{\n\tisc_result_t result;\n\tvoid *handle = NULL;\n\tdyndb_implementation_t *imp = NULL;\n\tdns_dyndb_register_t *register_func = NULL;\n\tdns_dyndb_destroy_t *destroy_func = NULL;\n\tdns_dyndb_version_t *version_func = NULL;\n\tint version, flags;\n\n\tREQUIRE(impp != NULL && *impp == NULL);\n\n\tisc_log_write(dns_lctx, DNS_LOGCATEGORY_DATABASE,\n\t\t      DNS_LOGMODULE_DYNDB, ISC_LOG_INFO,\n\t\t      \"loading DynDB instance '%s' driver '%s'\",\n\t\t      instname, filename);\n\n\tflags = RTLD_NOW|RTLD_LOCAL;\n#if defined(RTLD_DEEPBIND) && !__SANITIZE_ADDRESS__\n\tflags |= RTLD_DEEPBIND;\n#endif\n\n\thandle = dlopen(filename, flags);\n\tif (handle == NULL)\n\t\tCHECK(ISC_R_FAILURE);\n\n\t/* Clear dlerror */\n\tdlerror();\n\n\tCHECK(load_symbol(handle, filename, \"dyndb_version\",\n\t\t\t  (void **)&version_func));\n\n\tversion = version_func(NULL);\n\tif (version < (DNS_DYNDB_VERSION - DNS_DYNDB_AGE) ||\n\t    version > DNS_DYNDB_VERSION)\n\t{\n\t\tisc_log_write(dns_lctx, DNS_LOGCATEGORY_DATABASE,\n\t\t\t      DNS_LOGMODULE_DYNDB, ISC_LOG_ERROR,\n\t\t\t      \"driver API version mismatch: %d/%d\",\n\t\t\t      version, DNS_DYNDB_VERSION);\n\t\tCHECK(ISC_R_FAILURE);\n\t}\n\n\tCHECK(load_symbol(handle, filename, \"dyndb_init\",\n\t\t\t  (void **)&register_func));\n\tCHECK(load_symbol(handle, filename, \"dyndb_destroy\",\n\t\t\t  (void **)&destroy_func));\n\n\timp = isc_mem_get(mctx, sizeof(dyndb_implementation_t));\n\tif (imp == NULL)\n\t\tCHECK(ISC_R_NOMEMORY);\n\n\timp->mctx = NULL;\n\tisc_mem_attach(mctx, &imp->mctx);\n\timp->handle = handle;\n\timp->register_func = register_func;\n\timp->destroy_func = destroy_func;\n\timp->name = isc_mem_strdup(mctx, instname);\n\tif (imp->name == NULL)\n\t\tCHECK(ISC_R_NOMEMORY);\n\n\timp->inst = NULL;\n\tINIT_LINK(imp, link);\n\n\t*impp = imp;\n\timp = NULL;\n\ncleanup:\n\tif (result != ISC_R_SUCCESS)\n\t\tisc_log_write(dns_lctx, DNS_LOGCATEGORY_DATABASE,\n\t\t\t      DNS_LOGMODULE_DYNDB, ISC_LOG_ERROR,\n\t\t\t      \"failed to dynamically load instance '%s' \"\n\t\t\t      \"driver '%s': %s (%s)\", instname, filename,\n\t\t\t      dlerror(), isc_result_totext(result));\n\tif (imp != NULL)\n\t\tisc_mem_putanddetach(&imp->mctx, imp,\n\t\t\t\t     sizeof(dyndb_implementation_t));\n\tif (result != ISC_R_SUCCESS && handle != NULL)\n\t\tdlclose(handle);\n\n\treturn (result);\n}\n\nstatic void\nunload_library(dyndb_implementation_t **impp) {\n\tdyndb_implementation_t *imp;\n\n\tREQUIRE(impp != NULL && *impp != NULL);\n\n\timp = *impp;\n\n\tisc_mem_free(imp->mctx, imp->name);\n\tisc_mem_putanddetach(&imp->mctx, imp, sizeof(dyndb_implementation_t));\n\n\t*impp = NULL;\n}\n#elif _WIN32\nstatic isc_result_t\nload_symbol(HMODULE handle, const char *filename,\n\t    const char *symbol_name, void **symbolp)\n{\n\tvoid *symbol;\n\n\tREQUIRE(handle != NULL);\n\tREQUIRE(symbolp != NULL && *symbolp == NULL);\n\n\tsymbol = GetProcAddress(handle, symbol_name);\n\tif (symbol == NULL) {\n\t\tint errstatus = GetLastError();\n\t\tisc_log_write(dns_lctx, DNS_LOGCATEGORY_DATABASE,\n\t\t\t      DNS_LOGMODULE_DYNDB, ISC_LOG_ERROR,\n\t\t\t      \"failed to lookup symbol %s in \"\n\t\t\t      \"dyndb module '%s': %d\",\n\t\t\t      symbol_name, filename, errstatus);\n\t\treturn (ISC_R_FAILURE);\n\t}\n\n\t*symbolp = symbol;\n\n\treturn (ISC_R_SUCCESS);\n}\n\nstatic isc_result_t\nload_library(isc_mem_t *mctx, const char *filename, const char *instname,\n\t     dyndb_implementation_t **impp)\n{\n\tisc_result_t result;\n\tHMODULE handle;\n\tdyndb_implementation_t *imp = NULL;\n\tdns_dyndb_register_t *register_func = NULL;\n\tdns_dyndb_destroy_t *destroy_func = NULL;\n\tdns_dyndb_version_t *version_func = NULL;\n\tint version;\n\n\tREQUIRE(impp != NULL && *impp == NULL);\n\n\tisc_log_write(dns_lctx, DNS_LOGCATEGORY_DATABASE,\n\t\t      DNS_LOGMODULE_DYNDB, ISC_LOG_INFO,\n\t\t      \"loading DynDB instance '%s' driver '%s'\",\n\t\t      instname, filename);\n\n\thandle = LoadLibraryA(filename);\n\tif (handle == NULL)\n\t\tCHECK(ISC_R_FAILURE);\n\n\tCHECK(load_symbol(handle, filename, \"dyndb_version\",\n\t\t\t  (void **)&version_func));\n\n\tversion = version_func(NULL);\n\tif (version < (DNS_DYNDB_VERSION - DNS_DYNDB_AGE) ||\n\t    version > DNS_DYNDB_VERSION)\n\t{\n\t\tisc_log_write(dns_lctx, DNS_LOGCATEGORY_DATABASE,\n\t\t\t      DNS_LOGMODULE_DYNDB, ISC_LOG_ERROR,\n\t\t\t      \"driver API version mismatch: %d/%d\",\n\t\t\t      version, DNS_DYNDB_VERSION);\n\t\tCHECK(ISC_R_FAILURE);\n\t}\n\n\tCHECK(load_symbol(handle, filename, \"dyndb_init\",\n\t\t\t  (void **)&register_func));\n\tCHECK(load_symbol(handle, filename, \"dyndb_destroy\",\n\t\t\t  (void **)&destroy_func));\n\n\timp = isc_mem_get(mctx, sizeof(dyndb_implementation_t));\n\tif (imp == NULL)\n\t\tCHECK(ISC_R_NOMEMORY);\n\n\timp->mctx = NULL;\n\tisc_mem_attach(mctx, &imp->mctx);\n\timp->handle = handle;\n\timp->register_func = register_func;\n\timp->destroy_func = destroy_func;\n\timp->name = isc_mem_strdup(mctx, instname);\n\tif (imp->name == NULL)\n\t\tCHECK(ISC_R_NOMEMORY);\n\n\timp->inst = NULL;\n\tINIT_LINK(imp, link);\n\n\t*impp = imp;\n\timp = NULL;\n\ncleanup:\n\tif (result != ISC_R_SUCCESS)\n\t\tisc_log_write(dns_lctx, DNS_LOGCATEGORY_DATABASE,\n\t\t\t      DNS_LOGMODULE_DYNDB, ISC_LOG_ERROR,\n\t\t\t      \"failed to dynamically load instance '%s' \"\n\t\t\t      \"driver '%s': %d (%s)\", instname, filename,\n\t\t\t      GetLastError(), isc_result_totext(result));\n\tif (imp != NULL)\n\t\tisc_mem_putanddetach(&imp->mctx, imp,\n\t\t\t\t     sizeof(dyndb_implementation_t));\n\tif (result != ISC_R_SUCCESS && handle != NULL)\n\t\tFreeLibrary(handle);\n\n\treturn (result);\n}\n\nstatic void\nunload_library(dyndb_implementation_t **impp) {\n\tdyndb_implementation_t *imp;\n\n\tREQUIRE(impp != NULL && *impp != NULL);\n\n\timp = *impp;\n\n\tisc_mem_free(imp->mctx, imp->name);\n\tisc_mem_putanddetach(&imp->mctx, imp, sizeof(dyndb_implementation_t));\n\n\t*impp = NULL;\n}\n#else\t/* HAVE_DLFCN_H || _WIN32 */\nstatic isc_result_t\nload_library(isc_mem_t *mctx, const char *filename, const char *instname,\n\t     dyndb_implementation_t **impp)\n{\n\tUNUSED(mctx);\n\tUNUSED(filename);\n\tUNUSED(instname);\n\tUNUSED(impp);\n\n\tisc_log_write(dns_lctx, DNS_LOGCATEGORY_DATABASE, DNS_LOGMODULE_DYNDB,\n\t\t      ISC_LOG_ERROR,\n\t\t      \"dynamic database support is not implemented\");\n\n\treturn (ISC_R_NOTIMPLEMENTED);\n}\n\nstatic void\nunload_library(dyndb_implementation_t **impp)\n{\n\tUNUSED(impp);\n}\n#endif\t/* HAVE_DLFCN_H */\n\nisc_result_t\ndns_dyndb_load(const char *libname, const char *name, const char *parameters,\n\t       const char *file, unsigned long line, isc_mem_t *mctx,\n\t       const dns_dyndbctx_t *dctx)\n{\n\tisc_result_t result;\n\tdyndb_implementation_t *implementation = NULL;\n\n\tREQUIRE(DNS_DYNDBCTX_VALID(dctx));\n\tREQUIRE(name != NULL);\n\n\tRUNTIME_CHECK(isc_once_do(&once, dyndb_initialize) == ISC_R_SUCCESS);\n\n\tLOCK(&dyndb_lock);\n\n\t/* duplicate instance names are not allowed */\n\tif (impfind(name) != NULL)\n\t\tCHECK(ISC_R_EXISTS);\n\n\tCHECK(load_library(mctx, libname, name, &implementation));\n\tCHECK(implementation->register_func(mctx, name, parameters, file, line,\n\t\t\t\t\t    dctx, &implementation->inst));\n\n\tAPPEND(dyndb_implementations, implementation, link);\n\tresult = ISC_R_SUCCESS;\n\ncleanup:\n\tif (result != ISC_R_SUCCESS)\n\t\tif (implementation != NULL)\n\t\t\tunload_library(&implementation);\n\n\tUNLOCK(&dyndb_lock);\n\treturn (result);\n}\n\nvoid\ndns_dyndb_cleanup(bool exiting) {\n\tdyndb_implementation_t *elem;\n\tdyndb_implementation_t *prev;\n\n\tRUNTIME_CHECK(isc_once_do(&once, dyndb_initialize) == ISC_R_SUCCESS);\n\n\tLOCK(&dyndb_lock);\n\telem = TAIL(dyndb_implementations);\n\twhile (elem != NULL) {\n\t\tprev = PREV(elem, link);\n\t\tUNLINK(dyndb_implementations, elem, link);\n\t\tisc_log_write(dns_lctx, DNS_LOGCATEGORY_DATABASE,\n\t\t\t      DNS_LOGMODULE_DYNDB, ISC_LOG_INFO,\n\t\t\t      \"unloading DynDB instance '%s'\", elem->name);\n\t\telem->destroy_func(&elem->inst);\n\t\tENSURE(elem->inst == NULL);\n\t\tunload_library(&elem);\n\t\telem = prev;\n\t}\n\tUNLOCK(&dyndb_lock);\n\n\tif (exiting == true)\n\t\tisc_mutex_destroy(&dyndb_lock);\n}\n\nisc_result_t\ndns_dyndb_createctx(isc_mem_t *mctx, const void *hashinit, isc_log_t *lctx,\n\t\t    dns_view_t *view, dns_zonemgr_t *zmgr, isc_task_t *task,\n\t\t    isc_timermgr_t *tmgr, dns_dyndbctx_t **dctxp)\n{\n\tdns_dyndbctx_t *dctx;\n\n\tREQUIRE(dctxp != NULL && *dctxp == NULL);\n\n\tdctx = isc_mem_get(mctx, sizeof(*dctx));\n\tif (dctx == NULL)\n\t\treturn (ISC_R_NOMEMORY);\n\n\tmemset(dctx, 0, sizeof(*dctx));\n\tif (view != NULL)\n\t\tdns_view_attach(view, &dctx->view);\n\tif (zmgr != NULL)\n\t\tdns_zonemgr_attach(zmgr, &dctx->zmgr);\n\tif (task != NULL)\n\t\tisc_task_attach(task, &dctx->task);\n\tdctx->timermgr = tmgr;\n\tdctx->hashinit = hashinit;\n\tdctx->lctx = lctx;\n\tdctx->refvar = &isc_bind9;\n\n\tisc_mem_attach(mctx, &dctx->mctx);\n\tdctx->magic = DNS_DYNDBCTX_MAGIC;\n\n\t*dctxp = dctx;\n\n\treturn (ISC_R_SUCCESS);\n}\n\nvoid\ndns_dyndb_destroyctx(dns_dyndbctx_t **dctxp) {\n\tdns_dyndbctx_t *dctx;\n\n\tREQUIRE(dctxp != NULL && DNS_DYNDBCTX_VALID(*dctxp));\n\n\tdctx = *dctxp;\n\t*dctxp = NULL;\n\n\tdctx->magic = 0;\n\n\tif (dctx->view != NULL)\n\t\tdns_view_detach(&dctx->view);\n\tif (dctx->zmgr != NULL)\n\t\tdns_zonemgr_detach(&dctx->zmgr);\n\tif (dctx->task != NULL)\n\t\tisc_task_detach(&dctx->task);\n\tdctx->timermgr = NULL;\n\tdctx->lctx = NULL;\n\n\tisc_mem_putanddetach(&dctx->mctx, dctx, sizeof(*dctx));\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/lib/dns/include/dns/librpz.h": "/*\n * Copyright (C) Internet Systems Consortium, Inc. (\"ISC\")\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n *\n * See the COPYRIGHT file distributed with this work for additional\n * information regarding copyright ownership.\n */\n\n/*\n * Define the interface from a DNS resolver to the Response Policy Zone\n * library, librpz.\n *\n * This file should be included only the interface functions between the\n * resolver and librpz to avoid name space pollution.\n *\n * Copyright (c) 2016-2017 Farsight Security, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * version 1.2.12\n */\n\n#ifndef LIBRPZ_H\n#define LIBRPZ_H\n\n#include <inttypes.h>\n#include <stdbool.h>\n\n#include <arpa/nameser.h>\n#include <netinet/in.h>\n#include <stdarg.h>\n#include <stdbool.h>\n#include <stdio.h>\n#include <sys/types.h>\n\n\n/*\n * Allow either ordinary or dlopen() linking.\n */\n#ifdef LIBRPZ_INTERNAL\n#define LIBDEF(t,s) extern t s;\n#define LIBDEF_F(f) LIBDEF(librpz_##f##_t, librpz_##f)\n#else\n#define LIBDEF(t,s)\n#define LIBDEF_F(f)\n#endif\n\n/*\n * Response Policy Zone triggers.\n *\tComparisons of trigger precedences require\n *\tLIBRPZ_TRIG_CLIENT_IP < LIBRPZ_TRIG_QNAME < LIBRPZ_TRIG_IP\n *\t    < LIBRPZ_TRIG_NSDNAME < LIBRPZ_TRIG_NSIP}\n */\ntypedef enum {\n\tLIBRPZ_TRIG_BAD\t\t=0,\n\tLIBRPZ_TRIG_CLIENT_IP\t=1,\n\tLIBRPZ_TRIG_QNAME\t=2,\n\tLIBRPZ_TRIG_IP\t\t=3,\n\tLIBRPZ_TRIG_NSDNAME\t=4,\n\tLIBRPZ_TRIG_NSIP\t=5\n} librpz_trig_t;\n#define LIBRPZ_TRIG_SIZE\t3\t/* sizeof librpz_trig_t in bits */\ntypedef uint8_t\t\tlibrpz_tbit_t;  /* one bit for each of the TRIGS_NUM\n\t\t\t\t\t * trigger types */\n\n\n/*\n * Response Policy Zone Actions or policies\n */\ntypedef enum {\n\tLIBRPZ_POLICY_UNDEFINED\t=0,\t/* an empty entry or no decision yet */\n\tLIBRPZ_POLICY_DELETED\t=1,\t/* placeholder for a deleted policy */\n\n\tLIBRPZ_POLICY_PASSTHRU\t=2,\t/* 'passthru': do not rewrite */\n\tLIBRPZ_POLICY_DROP\t=3,\t/* 'drop': do not respond */\n\tLIBRPZ_POLICY_TCP_ONLY\t=4,\t/* 'tcp-only': answer UDP with TC=1 */\n\tLIBRPZ_POLICY_NXDOMAIN\t=5,\t/* 'nxdomain': answer with NXDOMAIN */\n\tLIBRPZ_POLICY_NODATA\t=6,\t/* 'nodata': answer with ANCOUNT=0 */\n\tLIBRPZ_POLICY_RECORD\t=7,\t/* rewrite with the policy's RR */\n\n\t/* only in client configurations to override the zone */\n\tLIBRPZ_POLICY_GIVEN,\t\t/* 'given': what policy record says */\n\tLIBRPZ_POLICY_DISABLED,\t\t/* at most log */\n\tLIBRPZ_POLICY_CNAME,\t\t/* answer with 'cname x' */\n} librpz_policy_t;\n#define LIBRPZ_POLICY_BITS\t4\n\n/*\n * Special policies that appear as targets of CNAMEs\n * NXDOMAIN is signaled by a CNAME with a \".\" target.\n * NODATA is signaled by a CNAME with a \"*.\" target.\n */\n#define LIBRPZ_RPZ_PREFIX\t\"rpz-\"\n#define LIBRPZ_RPZ_PASSTHRU\tLIBRPZ_RPZ_PREFIX\"passthru\"\n#define LIBRPZ_RPZ_DROP\t\tLIBRPZ_RPZ_PREFIX\"drop\"\n#define LIBRPZ_RPZ_TCP_ONLY\tLIBRPZ_RPZ_PREFIX\"tcp-only\"\n\n\ntypedef\tuint16_t    librpz_dznum_t;\t/* dnsrpzd zone # in [0,DZNUM_MAX] */\ntypedef\tuint8_t\t    librpz_cznum_t;\t/* client zone # in [0,CZNUM_MAX] */\n\n\n/*\n * CIDR block\n */\ntypedef struct librpz_prefix {\n\tunion {\n\t\tstruct in_addr\tin;\n\t\tstruct in6_addr\tin6;\n\t} addr;\n\tuint8_t\t\t    family;\n\tuint8_t\t\t    len;\n} librpz_prefix_t;\n\n/*\n * A domain\n */\ntypedef uint8_t\tlibrpz_dsize_t;\ntypedef struct librpz_domain {\n\tlibrpz_dsize_t\t    size;\t/* of only .d */\n\tuint8_t\t\t    d[0];\t/* variable length wire format */\n} librpz_domain_t;\n\n/*\n * A maximal domain buffer\n */\ntypedef struct librpz_domain_buf {\n\tlibrpz_dsize_t\t    size;\n\tuint8_t\t\t    d[NS_MAXCDNAME];\n} librpz_domain_buf_t;\n\n/*\n * A resource record without the owner name.\n * C compilers say that sizeof(librpz_rr_t)=12 instead of 10.\n */\ntypedef struct {\n\tuint16_t\t    type;\t/* network byte order */\n\tuint16_t\t    class;\t/* network byte order */\n\tuint32_t\t    ttl;\t/* network byte order */\n\tuint16_t\t    rdlength;\t/* network byte order */\n\tuint8_t\t\t    rdata[0];\t/* variable length */\n} librpz_rr_t;\n\n/*\n * The database file might be mapped with different starting addresses\n * by concurrent clients (resolvers), and so all pointers are offsets.\n */\ntypedef uint32_t\tlibrpz_idx_t;\n#define LIBRPZ_IDX_NULL\t0\n#define LIBRPZ_IDX_MIN\t1\n#define LIBRPZ_IDX_BAD  ((librpz_idx_t)-1)\n/**\n * Partial decoded results of a set of RPZ queries for a single DNS response\n * or iteration through the mapped file.\n */\ntypedef int16_t librpz_result_id_t;\ntypedef struct librpz_result {\n\tlibrpz_idx_t\t    next_rr;\n\tlibrpz_result_id_t  hit_id;\t\t/* trigger ID from resolver */\n\tlibrpz_policy_t\t    zpolicy;\t/* policy from zone */\n\tlibrpz_policy_t\t    policy;\t/* adjusted by client configuration */\n\tlibrpz_dznum_t\t    dznum;\t/* dnsrpzd zone number */\n\tlibrpz_cznum_t\t    cznum;\t/* librpz client zone number */\n\tlibrpz_trig_t\t    trig:LIBRPZ_TRIG_SIZE;\n\tbool\t\t    log:1;\t/* log rewrite given librpz_log_level */\n} librpz_result_t;\n\n\n/**\n * librpz trace or log levels.\n */\ntypedef enum {\n\tLIBRPZ_LOG_FATAL    =0,\t\t/* always print fatal errors */\n\tLIBRPZ_LOG_ERROR    =1,\t\t/* errors have this level */\n\tLIBRPZ_LOG_TRACE1   =2,\t\t/* big events such as dnsrpzd starts */\n\tLIBRPZ_LOG_TRACE2   =3,\t\t/* smaller dnsrpzd zone transfers */\n\tLIBRPZ_LOG_TRACE3   =4,\t\t/* librpz hits */\n\tLIBRPZ_LOG_TRACE4   =5,\t\t/* librpz lookups */\n\tLIBRPZ_LOG_INVALID   =999,\n} librpz_log_level_t;\ntypedef librpz_log_level_t (librpz_log_level_val_t)(librpz_log_level_t level);\nLIBDEF_F(log_level_val)\n\n/**\n * Logging function that can be supplied by the resolver.\n * @param level is one of librpz_log_level_t\n * @param ctx is for use by the resolver's logging system.\n *\tNULL mean a context-free message.\n */\ntypedef void(librpz_log_fnc_t)(librpz_log_level_t level, void *ctx,\n\t\t\t       const char *buf);\n\n/**\n * Point librpz logging functions to the resolver's choice.\n */\ntypedef void (librpz_set_log_t)(librpz_log_fnc_t *new_log, const char *prog_nm);\nLIBDEF_F(set_log)\n\n\n/**\n * librpz error messages are put in these buffers.\n * Use a structure instead of naked char* to let the compiler check the length.\n * A function defined with \"foo(char buf[120])\" can be called with\n * \"char sbuf[2]; foo(sbuf)\" and suffer a buffer overrun.\n */\ntypedef struct {\n\tchar\tc[120];\n} librpz_emsg_t;\n\n\n#ifdef LIBRPZ_HAVE_ATTR\n#define LIBRPZ_UNUSED\t__attribute__((unused))\n#define LIBRPZ_PF(f,l)\t__attribute__((format(printf,f,l)))\n#define\tLIBRPZ_NORET\t__attribute__((__noreturn__))\n#else\n#define LIBRPZ_UNUSED\n#define LIBRPZ_PF(f,l)\n#define\tLIBRPZ_NORET\n#endif\n\n#ifdef HAVE_BUILTIN_EXPECT\n#define LIBRPZ_LIKELY(c) __builtin_expect(!!(c), 1)\n#define LIBRPZ_UNLIKELY(c) __builtin_expect(!!(c), 0)\n#else\n#define LIBRPZ_LIKELY(c) (c)\n#define LIBRPZ_UNLIKELY(c) (c)\n#endif\n\ntypedef bool (librpz_parse_log_opt_t)(librpz_emsg_t *emsg, const char *arg);\nLIBDEF_F(parse_log_opt)\n\ntypedef void (librpz_vpemsg_t)(librpz_emsg_t *emsg,\n\t\t\t       const char *p, va_list args);\nLIBDEF_F(vpemsg)\ntypedef void (librpz_pemsg_t)(librpz_emsg_t *emsg,\n\t\t\t      const char *p, ...) LIBRPZ_PF(2,3);\nLIBDEF_F(pemsg)\n\ntypedef void (librpz_vlog_t)(librpz_log_level_t level, void *ctx,\n\t\t\t     const char *p, va_list args);\nLIBDEF_F(vlog)\ntypedef void (librpz_log_t)(librpz_log_level_t level, void *ctx,\n\t\t\t    const char *p, ...) LIBRPZ_PF(3,4);\nLIBDEF_F(log)\n\ntypedef void (librpz_fatal_t)(int ex_code,\n\t\t\t      const char *p, ...) LIBRPZ_PF(2,3);\nextern void librpz_fatal(int ex_code,\n\t\t\t const char *p, ...) LIBRPZ_PF(2,3) LIBRPZ_NORET;\n\ntypedef void (librpz_rpz_assert_t)(const char *file, unsigned line,\n\t\t\t\t   const char *p, ...) LIBRPZ_PF(3,4);\nextern void librpz_rpz_assert(const char *file, unsigned line,\n\t\t\t      const char *p, ...) LIBRPZ_PF(3,4) LIBRPZ_NORET;\n\ntypedef void (librpz_rpz_vassert_t)(const char *file, uint line,\n\t\t\t\t    const char *p, va_list args);\nextern void librpz_rpz_vassert(const char *file, uint line,\n\t\t\t       const char *p, va_list args) LIBRPZ_NORET;\n\n\n/*\n * As far as clients are concerned, all relative pointers or indexes in a\n * version of the mapped file except trie node parent pointers remain valid\n * forever.  A client must release a version so that it can be garbage\n * collected by the file system.  When dnsrpzd needs to expand the file,\n * it copies the old file to a new, larger file.  Clients can continue\n * using the old file.\n *\n * Versions can also appear in a single file.  Old nodes and trie values\n * within the file are not destroyed until all clients using the version\n * that contained the old values release the version.\n *\n * A client is marked as using version by connecting to the daemon.  It is\n * marked as using all subsequent versions.  A client releases all versions\n * by closing the connection or a range of versions by updating is slot\n * in the shared memory version table.\n *\n * As far as clients are concerned, there are the following possible librpz\n * failures:\n *\t- malloc() or other fatal internal librpz problems indicated by\n *\t    a failing return from a librpz function\n *\t    All operations will fail until client handle is destroyed and\n *\t    recreated with librpz_client_detach() and librpz_client_create().\n *\t- corrupt database detected by librpz code, corrupt database detected\n *\t    by dnsrpzd, or disconnection from the daemon.\n *\t    Current operations will fail.\n *\n * Clients assume that the file has already been unlinked before\n *\tthe corrupt flag is set so that they do not race with the server\n *\tover the corruption of a single file.  A client that finds the\n *\tcorrupt set knows that dnsrpzd has already crashed with\n *\tabort() and is restarting.  The client can re-connect to dnsrpzd\n *\tand retransmit its configuration, backing off as usual if anything\n *\tgoes wrong.\n *\n * Searches of the database by a client do not need locks against dnsrpzd or\n *\tother clients, but a lock is used to protect changes to the connection\n *\tby competing threads in the client.  The client provides functions\n *\tto serialize the concurrent use of any single client handle.\n *\tFunctions that do nothing are appropriate for applications that are\n *\tnot \"threaded\" or that do not share client handles among threads.\n *\tOtherwise, functions must be provided to librpz_clientcreate().\n *\tSomething like the following works with pthreads:\n *\n * static void\n * lock(void *mutex) { assert(pthread_mutex_lock(mutex) == 0); }\n *\n * static void\n * unlock(void *mutex) { assert(pthread_mutex_unlock(mutex) == 0); }\n *\n * static void\n * mutex_destroy(void *mutex) { assert(pthread_mutex_destroy(mutex) == 0); }\n *\n *\n *\n * At every instant, all of the data and pointers in the mapped file are valid.\n *\tChanges to trie node or other data are always made so that it and\n *\tall pointers in and to it remain valid for a time.  Old versions are\n *\teventually discarded.\n *\n * Dnsrpzd periodically defines a new version by setting aside all changes\n *\tmade since the previous version was defined.  Subsequent changes\n *\tmade (only!) by dnsrpzd will be part of the next version.\n *\n * To discard an old version, dnsrpzd must know that all clients have stopped\n *\tusing that version.  Clients do that by using part of the mapped file\n *\tto tell dnsrpzd the oldest version that each client is using.\n *\tDnsrpzd assigns each connecting client an entry in the cversions array\n *\tin the mapped file.  The client puts version numbers into that entry\n *\tto signal to dnsrpzd which versions that can be discarded.\n *\tDnsrpzd is free, as far as that client is concerned, to discard all\n *\tnumerically smaller versions.  A client can disclaim all versions with\n *\tthe version number VERSIONS_ALL or 0.\n *\n * The race between a client changing its entry and dnsrpzd discarding a\n *\tversion is resolved by allowing dnsrpzd to discard all versions\n *\tsmaller or equal to the client's version number.  If dnsrpzd is in\n *\tthe midst of discarding or about to discard version N when the\n *\tclient asserts N, no harm is done.  The client depends only on\n *\tthe consistency of version N+1.\n *\n * This version mechanism depends in part on not being exercised too frequently\n *\tVersion numbers are 32 bits long and dnsrpzd creates new versions\n *\tat most once every 30 seconds.\n */\n\n\n/*\n * Lock functions for concurrent use of a single librpz_client_t client handle.\n */\ntypedef void(librpz_mutex_t)(void *mutex);\n\n/*\n * List of connections to dnsrpzd daemons.\n */\ntypedef struct librpz_clist librpz_clist_t;\n\n/*\n * Client's handle on dnsrpzd.\n */\ntypedef struct librpz_client librpz_client_t;\n\n/**\n * Create the list of connections to the dnsrpzd daemon.\n * @param[out] emsg: error message\n * @param lock: start exclusive access to the client handle\n * @param unlock: end exclusive access to the client handle\n * @param mutex_destroy: release the lock\n * @param mutex: pointer to the lock for the client handle\n * @param log_ctx: NULL or resolver's context log messages\n */\ntypedef librpz_clist_t *(librpz_clist_create_t)(librpz_emsg_t *emsg,\n\t\t\t\t\t\tlibrpz_mutex_t *lock,\n\t\t\t\t\t\tlibrpz_mutex_t *unlock,\n\t\t\t\t\t\tlibrpz_mutex_t *mutex_destroy,\n\t\t\t\t\t\tvoid *mutex, void *log_ctx);\nLIBDEF_F(clist_create)\n\n\n/**\n * Release the list of dnsrpzd connections.\n */\ntypedef void (librpz_clist_detach_t)(librpz_clist_t **clistp);\nLIBDEF_F(clist_detach)\n\n/**\n * Create a librpz client handle.\n * @param[out] emsg: error message\n * @param clist: of dnsrpzd connections\n * @param cstr: string of configuration settings separated by ';' or '\\n'\n * @param use_expired: true to not ignore expired zones\n * @return client handle or NULL if the handle could not be created\n */\ntypedef librpz_client_t *(librpz_client_create_t)(librpz_emsg_t *emsg,\n\t\t\t\t\t\t  librpz_clist_t *clist,\n\t\t\t\t\t\t  const char *cstr,\n\t\t\t\t\t\t  bool use_expired);\nLIBDEF_F(client_create)\n\n/**\n * Start (if necessary) dnsrpzd and connect to it.\n * @param[out] emsg: error message\n * @param client handle\n * @param optional: true if it is ok if starting the daemon is not allowed\n */\ntypedef bool (librpz_connect_t)(librpz_emsg_t *emsg, librpz_client_t *client,\n\t\t\t\tbool optional);\nLIBDEF_F(connect)\n\n/**\n * Start to destroy a librpz client handle.\n * It will not be destroyed until the last set of RPZ queries represented\n * by a librpz_rsp_t ends.\n * @param client handle to be released\n * @return false on error\n */\ntypedef void (librpz_client_detach_t)(librpz_client_t **clientp);\nLIBDEF_F(client_detach)\n\n/**\n * State for a set of RPZ queries for a single DNS response\n * or for listing the database.\n */\ntypedef struct librpz_rsp librpz_rsp_t;\n\n/**\n * Start a set of RPZ queries for a single DNS response.\n * @param[out] emsg: error message for false return or *rspp=NULL\n * @param[out] rspp created context or NULL\n * @param[out] min_ns_dotsp: NULL or pointer to configured MIN-NS-DOTS value\n * @param client state\n * @param have_rd: RD=1 in the DNS request\n * @param have_do: DO=1 in the DNS request\n * @return false on error\n */\ntypedef bool (librpz_rsp_create_t)(librpz_emsg_t *emsg, librpz_rsp_t **rspp,\n\t\t\t\t   int *min_ns_dotsp, librpz_client_t *client,\n\t\t\t\t   bool have_rd, bool have_do);\nLIBDEF_F(rsp_create)\n\n/**\n * Finish RPZ work for a DNS response.\n */\ntypedef void (librpz_rsp_detach_t)(librpz_rsp_t **rspp);\nLIBDEF_F(rsp_detach)\n\n/**\n * Get the final, accumulated result of a set of RPZ queries.\n * Yield LIBRPZ_POLICY_UNDEFINED if\n *  - there were no hits,\n *  - there was a dispositive hit, be we have not recursed and are required\n *\tto recurse so that evil DNS authorities will not know we are using RPZ\n *  - we have a hit and have recursed, but later data such as NSIP could\n *\toverride\n * @param[out] emsg\n * @param[out] result describes the hit\n *\tor result->policy=LIBRPZ_POLICY_UNDEFINED without a hit\n * @param[out] result: current policy rewrite values\n * @param recursed: recursion has now been done even if it was not done\n *\twhen the hit was found\n * @param[in,out] rsp state from librpz_itr_start()\n * @return false on error\n */\ntypedef bool (librpz_rsp_result_t)(librpz_emsg_t *emsg, librpz_result_t *result,\n\t\t\t\t   bool recursed, const librpz_rsp_t *rsp);\nLIBDEF_F(rsp_result)\n\n/**\n * Might looking for a trigger be worthwhile?\n * @param trig: look for this type of trigger\n * @param ipv6: true if trig is LIBRPZ_TRIG_CLIENT_IP, LIBRPZ_TRIG_IP,\n *\tor LIBRPZ_TRIG_NSIP and the IP address is IPv6\n * @return: true if looking could be worthwhile\n */\ntypedef bool (librpz_have_trig_t)(librpz_trig_t trig, bool ipv6,\n\t\t\t\t  const librpz_rsp_t *rsp);\nLIBDEF_F(have_trig)\n\n/**\n * Might looking for NSDNAME and NSIP triggers be worthwhile?\n * @return: true if looking could be worthwhile\n */\ntypedef bool (librpz_have_ns_trig_t)(const librpz_rsp_t *rsp);\nLIBDEF_F(have_ns_trig)\n\n/**\n * Convert the found client IP trie key to a CIDR block\n * @param[out] emsg\n * @param[out] prefix trigger\n * @param[in,out] rsp state from librpz_itr_start()\n * @return false on error\n */\ntypedef bool (librpz_rsp_clientip_prefix_t)(librpz_emsg_t *emsg,\n\t\t\t\t\t    librpz_prefix_t *prefix,\n\t\t\t\t\t    librpz_rsp_t *rsp);\nLIBDEF_F(rsp_clientip_prefix)\n\n/**\n * Compute the owner name of the found or result trie key, usually to log it.\n * An IP address key might be returned as 8.0.0.0.127.rpz-client-ip.\n * example.com. might be a qname trigger.  example.com.rpz-nsdname. could\n * be an NSDNAME trigger.\n * @param[out] emsg\n * @param[out] owner domain\n * @param[in,out] rsp state from librpz_itr_start()\n * @return false on error\n */\ntypedef bool (librpz_rsp_domain_t)(librpz_emsg_t *emsg,\n\t\t\t\t   librpz_domain_buf_t *owner,\n\t\t\t\t   librpz_rsp_t *rsp);\nLIBDEF_F(rsp_domain)\n\n/**\n * Get the next RR of the LIBRPZ_POLICY_RECORD result after an initial use of\n * librpz_rsp_result() or librpz_itr_node() or after a previous use of\n * librpz_rsp_rr().  The RR is in uncompressed wire format including type,\n * class, ttl and length in network byte order.\n * @param[out] emsg\n * @param[out] typep: optional host byte order record type or ns_t_invalid (0)\n * @param[out] classp: class such as ns_c_in\n * @param[out] ttlp: TTL\n * @param[out] rrp: optional malloc() buffer containing the next RR or\n *\tNULL after the last RR\n * @param[out] result: current policy rewrite values\n * @param qname: used construct a wildcard CNAME\n * @param qname_size\n * @param[in,out] rsp state from librpz_itr_start()\n * @return false on error\n */\ntypedef bool (librpz_rsp_rr_t)(librpz_emsg_t *emsg, uint16_t *typep,\n\t\t\t       uint16_t *classp, uint32_t *ttlp,\n\t\t\t       librpz_rr_t **rrp, librpz_result_t *result,\n\t\t\t       const uint8_t *qname, size_t qname_size,\n\t\t\t       librpz_rsp_t *rsp);\nLIBDEF_F(rsp_rr)\n\n/**\n * Get the next RR of the LIBRPZ_POLICY_RECORD result.\n * @param[out] emsg\n * @param[out] ttlp: TTL\n * @param[out] rrp: malloc() buffer with SOA RR without owner name\n * @param[out] result: current policy rewrite values\n * @param[out] origin: SOA owner name\n * @param[out] origin_size\n * @param[in,out] rsp state from librpz_itr_start()\n * @return false on error\n */\ntypedef bool (librpz_rsp_soa_t)(librpz_emsg_t *emsg, uint32_t *ttlp,\n\t\t\t\tlibrpz_rr_t **rrp, librpz_domain_buf_t *origin,\n\t\t\t\tlibrpz_result_t *result, librpz_rsp_t *rsp);\nLIBDEF_F(rsp_soa)\n\n/**\n * Get the SOA serial number for a policy zone to compare with a known value\n * to check whether a zone transfer is complete.\n */\ntypedef bool (librpz_soa_serial_t)(librpz_emsg_t *emsg, uint32_t *serialp,\n\t\t\t\t   const char *domain_nm, librpz_rsp_t *rsp);\nLIBDEF_F(soa_serial)\n\n/**\n * Save the current policy checking state.\n * @param[out] emsg\n * @param[in,out] rsp state from librpz_itr_start()\n * @return false on error\n */\ntypedef bool (librpz_rsp_push_t)(librpz_emsg_t *emsg, librpz_rsp_t *rsp);\nLIBDEF_F(rsp_push)\n#define LIBRPZ_RSP_STACK_DEPTH\t3\n\n/**\n * Restore the previous policy checking state.\n * @param[out] emsg\n * @param[out] result: NULL or restored policy rewrite values\n * @param[in,out] rsp state from librpz_itr_start()\n * @return false on error\n */\ntypedef bool (librpz_rsp_pop_t)(librpz_emsg_t *emsg, librpz_result_t *result,\n\t\t\t\tlibrpz_rsp_t *rsp);\nLIBDEF_F(rsp_pop)\n\n/**\n * Discard the most recently save policy checking state.\n * @param[out] emsg\n * @param[out] result: NULL or restored policy rewrite values\n * @return false on error\n */\ntypedef bool (librpz_rsp_pop_discard_t)(librpz_emsg_t *emsg, librpz_rsp_t *rsp);\nLIBDEF_F(rsp_pop_discard)\n\n/**\n * Disable a zone.\n * @param[out] emsg\n * @param znum\n * @param[in,out] rsp state from librpz_itr_start()\n * @return false on error\n */\ntypedef bool (librpz_rsp_forget_zone_t)(librpz_emsg_t *emsg,\n\t\t\t\t\tlibrpz_cznum_t znum, librpz_rsp_t *rsp);\nLIBDEF_F(rsp_forget_zone)\n\n/**\n * Apply RPZ to an IP address.\n * @param[out] emsg\n * @param addr: address to check\n * @param ipv6: true for 16 byte IPv6 instead of 4 byte IPv4\n * @param trig LIBRPZ_TRIG_CLIENT_IP, LIBRPZ_TRIG_IP, or LIBRPZ_TRIG_NSIP\n * @param hit_id: caller chosen\n * @param recursed: recursion has been done\n * @param[in,out] rsp state from librpz_itr_start()\n * @return false on error\n */\ntypedef bool (librpz_ck_ip_t)(librpz_emsg_t *emsg,\n\t\t\t      const void *addr, uint family,\n\t\t\t      librpz_trig_t trig, librpz_result_id_t hit_id,\n\t\t\t      bool recursed, librpz_rsp_t *rsp);\nLIBDEF_F(ck_ip)\n\n/**\n * Apply RPZ to a wire-format domain.\n * @param[out] emsg\n * @param domain in wire format\n * @param domain_size\n * @param trig LIBRPZ_TRIG_QNAME or LIBRPZ_TRIG_NSDNAME\n * @param hit_id: caller chosen\n * @param recursed: recursion has been done\n * @param[in,out] rsp state from librpz_itr_start()\n * @return false on error\n */\ntypedef bool (librpz_ck_domain_t)(librpz_emsg_t *emsg,\n\t\t\t\t  const uint8_t *domain, size_t domain_size,\n\t\t\t\t  librpz_trig_t trig, librpz_result_id_t hit_id,\n\t\t\t\t  bool recursed, librpz_rsp_t *rsp);\nLIBDEF_F(ck_domain)\n\n/**\n * Ask dnsrpzd to refresh a zone.\n * @param[out] emsg error message\n * @param librpz_domain_t domain to refresh\n * @param client context\n * @return false after error\n */\ntypedef bool (librpz_zone_refresh_t)(librpz_emsg_t *emsg, const char *domain,\n\t\t\t\t       librpz_rsp_t *rsp);\nLIBDEF_F(zone_refresh)\n\n/**\n * Get a string describing the database\n * @param license: include the license\n * @param cfiles: include the configuration file names\n * @param listens: include the local notify IP addresses\n * @param[out] emsg error message if the result is null\n * @param client context\n * @return malloc'ed string or NULL after error\n */\ntypedef char *(librpz_db_info_t)(librpz_emsg_t *emsg,\n\t\t\t\t bool license, bool cfiles, bool listens,\n\t\t\t\t librpz_rsp_t *rsp);\nLIBDEF_F(db_info)\n\n/**\n * Start a context for listing the nodes and/or zones in the mapped file\n * @param[out] emsg: error message for false return or *rspp=NULL\n * @param[out] rspp: created context or NULL\n * @param client context\n * @return false after error\n */\ntypedef bool (librpz_itr_start_t)(librpz_emsg_t *emsg, librpz_rsp_t **rspp,\n\t\t\t\t  librpz_client_t *client);\nLIBDEF_F(itr_start)\n\n/**\n * Get mapped file memory allocation statistics.\n * @param[out] emsg: error message\n * @param rsp state from librpz_itr_start()\n * @return malloc'ed string or NULL after error\n */\ntypedef char *(librpz_mf_stats_t)(librpz_emsg_t *emsg, librpz_rsp_t *rsp);\nLIBDEF_F(mf_stats)\n\n/**\n * Get versions currently used by clients.\n * @param[out] emsg: error message\n * @param[in,out] rsp: state from librpz_itr_start()\n * @return malloc'ed string or NULL after error\n */\ntypedef char *(librpz_vers_stats_t)(librpz_emsg_t *emsg, librpz_rsp_t *rsp);\nLIBDEF_F(vers_stats)\n\n/**\n * Allocate a string describing the next zone or \"\" after the last zone.\n * @param[out] emsg\n * @param all_zones to list all instead of only requested zones\n * @param[in,out] rsp state from librpz_rsp_start()\n * @return malloc'ed string or NULL after error\n */\ntypedef char *(librpz_itr_zone_t)(librpz_emsg_t *emsg, bool all_zones,\n\t\t\t\t  librpz_rsp_t *rsp);\nLIBDEF_F(itr_zone)\n\n/**\n * Describe the next trie node while dumping the database.\n * @param[out] emsg\n * @param[out] result describes node\n *\tor result->policy=LIBRPZ_POLICY_UNDEFINED after the last node.\n * @param all_zones to list all instead of only requested zones\n * @param[in,out] rsp state from librpz_itr_start()\n * @return: false on error\n */\ntypedef bool (librpz_itr_node_t)(librpz_emsg_t *emsg, librpz_result_t *result,\n\t\t\t\t bool all_zones, librpz_rsp_t *rsp);\nLIBDEF_F(itr_node)\n\n/**\n * RPZ policy to string with a backup buffer of POLICY2STR_SIZE size\n */\ntypedef const char *(librpz_policy2str_t)(librpz_policy_t policy,\n\t\t\t\t\t  char *buf, size_t buf_size);\n#define POLICY2STR_SIZE sizeof(\"policy xxxxxx\")\nLIBDEF_F(policy2str)\n\n/**\n * Trigger type to string.\n */\ntypedef const char *(librpz_trig2str_t)(librpz_trig_t trig);\nLIBDEF_F(trig2str)\n\n/**\n * Convert a number of seconds to a zone file duration string\n */\ntypedef const char *(librpz_secs2str_t)(time_t secs,\n\t\t\t\t\tchar *buf, size_t buf_size);\n#define SECS2STR_SIZE sizeof(\"1234567w7d24h59m59s\")\nLIBDEF_F(secs2str)\n\n/**\n * Parse a duration with 's', 'm', 'h', 'd', and 'w' units.\n */\ntypedef bool (librpz_str2secs_t)(librpz_emsg_t *emsg, time_t *val,\n\t\t\t\t const char *str0);\nLIBDEF_F(str2secs)\n\n/**\n * Translate selected rtypes to strings\n */\ntypedef const char *(librpz_rtype2str_t)(uint type, char *buf, size_t buf_size);\n#define RTYPE2STR_SIZE sizeof(\"type xxxxx\")\nLIBDEF_F(rtype2str)\n\n/**\n * Local version of ns_name_ntop() for portability.\n */\ntypedef int (librpz_domain_ntop_t)(const u_char *src, char *dst, size_t dstsiz);\nLIBDEF_F(domain_ntop)\n\n/**\n * Local version of ns_name_pton().\n */\ntypedef int (librpz_domain_pton2_t)(const char *src, u_char *dst, size_t dstsiz,\n\t\t\t\t    size_t *dstlen, bool lower);\nLIBDEF_F(domain_pton2)\n\ntypedef union socku socku_t;\ntypedef socku_t *(librpz_mk_inet_su_t)(socku_t *su, const struct in_addr *addrp,\n\t\t\t\t     in_port_t port);\nLIBDEF_F(mk_inet_su)\n\ntypedef socku_t *(librpz_mk_inet6_su_t)(socku_t *su, const\n\t\t\t\t\tstruct in6_addr *addrp,\n\t\t\t\t\tuint32_t scope_id, in_port_t port);\nLIBDEF_F(mk_inet6_su)\n\ntypedef bool (librpz_str2su_t)(socku_t *sup, const char *str);\nLIBDEF_F(str2su)\n\ntypedef char *(librpz_su2str_t)(char *str, size_t str_len, const socku_t *su);\nLIBDEF_F(su2str)\n#define SU2STR_SIZE (INET6_ADDRSTRLEN+1+6+1)\n\n\n/**\n * default path to dnsrpzd\n */\nconst char *librpz_dnsrpzd_path;\n\n\n#undef LIBDEF\n\n/*\n * This is the dlopen() interface to librpz.\n */\ntypedef const struct {\n\tconst char\t\t\t*dnsrpzd_path;\n\tconst char\t\t\t*version;\n\tlibrpz_parse_log_opt_t\t\t*parse_log_opt;\n\tlibrpz_log_level_val_t\t\t*log_level_val;\n\tlibrpz_set_log_t\t\t*set_log;\n\tlibrpz_vpemsg_t\t\t\t*vpemsg;\n\tlibrpz_pemsg_t\t\t\t*pemsg;\n\tlibrpz_vlog_t\t\t\t*vlog;\n\tlibrpz_log_t\t\t\t*log;\n\tlibrpz_fatal_t\t\t\t*fatal LIBRPZ_NORET;\n\tlibrpz_rpz_assert_t\t\t*rpz_assert LIBRPZ_NORET;\n\tlibrpz_rpz_vassert_t\t\t*rpz_vassert LIBRPZ_NORET;\n\tlibrpz_clist_create_t\t\t*clist_create;\n\tlibrpz_clist_detach_t\t\t*clist_detach;\n\tlibrpz_client_create_t\t\t*client_create;\n\tlibrpz_connect_t\t\t*connect;\n\tlibrpz_client_detach_t\t\t*client_detach;\n\tlibrpz_rsp_create_t\t\t*rsp_create;\n\tlibrpz_rsp_detach_t\t\t*rsp_detach;\n\tlibrpz_rsp_result_t\t\t*rsp_result;\n\tlibrpz_have_trig_t\t\t*have_trig;\n\tlibrpz_have_ns_trig_t\t\t*have_ns_trig;\n\tlibrpz_rsp_clientip_prefix_t\t*rsp_clientip_prefix;\n\tlibrpz_rsp_domain_t\t\t*rsp_domain;\n\tlibrpz_rsp_rr_t\t\t\t*rsp_rr;\n\tlibrpz_rsp_soa_t\t\t*rsp_soa;\n\tlibrpz_soa_serial_t\t\t*soa_serial;\n\tlibrpz_rsp_push_t\t\t*rsp_push;\n\tlibrpz_rsp_pop_t\t\t*rsp_pop;\n\tlibrpz_rsp_pop_discard_t\t*rsp_pop_discard;\n\tlibrpz_rsp_forget_zone_t\t*rsp_forget_zone;\n\tlibrpz_ck_ip_t\t\t\t*ck_ip;\n\tlibrpz_ck_domain_t\t\t*ck_domain;\n\tlibrpz_zone_refresh_t\t\t*zone_refresh;\n\tlibrpz_db_info_t\t\t*db_info;\n\tlibrpz_itr_start_t\t\t*itr_start;\n\tlibrpz_mf_stats_t\t\t*mf_stats;\n\tlibrpz_vers_stats_t\t\t*vers_stats;\n\tlibrpz_itr_zone_t\t\t*itr_zone;\n\tlibrpz_itr_node_t\t\t*itr_node;\n\tlibrpz_policy2str_t\t\t*policy2str;\n\tlibrpz_trig2str_t\t\t*trig2str;\n\tlibrpz_secs2str_t\t\t*secs2str;\n\tlibrpz_str2secs_t\t\t*str2secs;\n\tlibrpz_rtype2str_t\t\t*rtype2str;\n\tlibrpz_domain_ntop_t\t\t*domain_ntop;\n\tlibrpz_domain_pton2_t\t\t*domain_pton2;\n\tlibrpz_mk_inet_su_t\t\t*mk_inet_su;\n\tlibrpz_mk_inet6_su_t\t\t*mk_inet6_su;\n\tlibrpz_str2su_t\t\t\t*str2su;\n\tlibrpz_su2str_t\t\t\t*su2str;\n} librpz_0_t;\nextern librpz_0_t librpz_def_0;\n\n/*\n * Future versions can be upward compatible by defining LIBRPZ_DEF as\n * librpz_X_t.\n */\n#define LIBRPZ_DEF\tlibrpz_def_0\n#define LIBRPZ_DEF_STR\t\"librpz_def_0\"\n\ntypedef librpz_0_t librpz_t;\nextern librpz_t *librpz;\n\n\n#if LIBRPZ_LIB_OPEN == 2\n#include <dlfcn.h>\n\n/**\n * link-load librpz\n * @param[out] emsg: error message\n * @param[in,out] dl_handle: NULL or pointer to new dlopen handle\n * @param[in] path: librpz.so path\n * @return address of interface structure or NULL on failure\n */\nstatic inline librpz_t *\nlibrpz_lib_open(librpz_emsg_t *emsg, void **dl_handle, const char *path)\n{\n\tvoid *handle;\n\tlibrpz_t *new_librpz;\n\n\temsg->c[0] = '\\0';\n\n\t/*\n\t * Close a previously opened handle on librpz.so.\n\t */\n\tif (dl_handle != NULL && *dl_handle != NULL) {\n\t\tif (dlclose(*dl_handle) != 0) {\n\t\t\tsnprintf(emsg->c, sizeof(librpz_emsg_t),\n\t\t\t\t \"dlopen(NULL): %s\", dlerror());\n\t\t\treturn (NULL);\n\t\t}\n\t\t*dl_handle = NULL;\n\t}\n\n\t/*\n\t * First try the main executable of the process in case it was\n\t * linked to librpz.\n\t * Do not worry if we cannot search the main executable of the process.\n\t */\n\thandle = dlopen(NULL, RTLD_NOW | RTLD_LOCAL);\n\tif (handle != NULL) {\n\t\tnew_librpz = dlsym(handle, LIBRPZ_DEF_STR);\n\t\tif (new_librpz != NULL) {\n\t\t\tif (dl_handle != NULL)\n\t\t\t\t*dl_handle = handle;\n\t\t\treturn (new_librpz);\n\t\t}\n\t\tif (dlclose(handle) != 0) {\n\t\t\tsnprintf(emsg->c, sizeof(librpz_emsg_t),\n\t\t\t\t \"dlsym(NULL, \"LIBRPZ_DEF_STR\"): %s\",\n\t\t\t\t dlerror());\n\t\t\treturn (NULL);\n\t\t}\n\t}\n\n\tif (path == NULL || path[0] == '\\0') {\n\t\tsnprintf(emsg->c, sizeof(librpz_emsg_t),\n\t\t\t \"librpz not linked and no dlopen() path provided\");\n\t\treturn (NULL);\n\t}\n\n\thandle = dlopen(path, RTLD_NOW | RTLD_LOCAL);\n\tif (handle == NULL) {\n\t\tsnprintf(emsg->c, sizeof(librpz_emsg_t), \"dlopen(%s): %s\",\n\t\t\t path, dlerror());\n\t\treturn (NULL);\n\t}\n\tnew_librpz = dlsym(handle, LIBRPZ_DEF_STR);\n\tif (new_librpz != NULL) {\n\t\tif (dl_handle != NULL)\n\t\t\t*dl_handle = handle;\n\t\treturn (new_librpz);\n\t}\n\tsnprintf(emsg->c, sizeof(librpz_emsg_t),\n\t\t \"dlsym(%s, \"LIBRPZ_DEF_STR\"): %s\",\n\t\t path, dlerror());\n\tdlclose(handle);\n\treturn (NULL);\n}\n#elif defined(LIBRPZ_LIB_OPEN)\n/*\n * Statically link to the librpz.so DSO on systems without dlopen()\n */\nstatic inline librpz_t *\nlibrpz_lib_open(librpz_emsg_t *emsg, void **dl_handle, const char *path)\n{\n\t(void)(path);\n\n\tif (dl_handle != NULL)\n\t\t*dl_handle = NULL;\n\n#if LIBRPZ_LIB_OPEN == 1\n\temsg->c[0] = '\\0';\n\treturn (&LIBRPZ_DEF);\n#else\n\tsnprintf(emsg->c, sizeof(librpz_emsg_t),\n\t\t \"librpz not available via ./configure\");\n\treturn (NULL);\n#endif /* LIBRPZ_LIB_OPEN */\n}\n#endif /* LIBRPZ_LIB_OPEN */\n\n#endif /* LIBRPZ_H */\n",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/lib/dns/include/dns/dlz_dlopen.h": "/*\n * Copyright (C) Internet Systems Consortium, Inc. (\"ISC\")\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n *\n * See the COPYRIGHT file distributed with this work for additional\n * information regarding copyright ownership.\n */\n\n\n/*! \\file dns/dlz_dlopen.h */\n\n#ifndef DLZ_DLOPEN_H\n#define DLZ_DLOPEN_H\n\n#include <inttypes.h>\n#include <stdbool.h>\n\n#include <dns/sdlz.h>\n\nISC_LANG_BEGINDECLS\n\n/*\n * This header provides a minimal set of defines and typedefs needed\n * for the entry points of an external DLZ module for bind9.\n */\n\n#define DLZ_DLOPEN_VERSION 3\n#define DLZ_DLOPEN_AGE 0\n\n/*\n * dlz_dlopen_version() is required for all DLZ external drivers. It\n * should return DLZ_DLOPEN_VERSION\n */\ntypedef int dlz_dlopen_version_t(unsigned int *flags);\n\n/*\n * dlz_dlopen_create() is required for all DLZ external drivers.\n */\ntypedef isc_result_t dlz_dlopen_create_t(const char *dlzname,\n\t\t\t\t\t unsigned int argc,\n\t\t\t\t\t char *argv[],\n\t\t\t\t\t void **dbdata,\n\t\t\t\t\t ...);\n\n/*\n * dlz_dlopen_destroy() is optional, and will be called when the\n * driver is unloaded if supplied\n */\ntypedef void dlz_dlopen_destroy_t(void *dbdata);\n\n/*\n * dlz_dlopen_findzonedb() is required for all DLZ external drivers\n */\ntypedef isc_result_t dlz_dlopen_findzonedb_t(void *dbdata,\n\t\t\t\t\t     const char *name,\n\t\t\t\t\t     dns_clientinfomethods_t *methods,\n\t\t\t\t\t     dns_clientinfo_t *clientinfo);\n\n/*\n * dlz_dlopen_lookup() is required for all DLZ external drivers\n */\ntypedef isc_result_t dlz_dlopen_lookup_t(const char *zone,\n\t\t\t\t\t const char *name,\n\t\t\t\t\t void *dbdata,\n\t\t\t\t\t dns_sdlzlookup_t *lookup,\n\t\t\t\t\t dns_clientinfomethods_t *methods,\n\t\t\t\t\t dns_clientinfo_t *clientinfo);\n\n/*\n * dlz_dlopen_authority is optional() if dlz_dlopen_lookup()\n * supplies authority information for the dns record\n */\ntypedef isc_result_t dlz_dlopen_authority_t(const char *zone,\n\t\t\t\t\t    void *dbdata,\n\t\t\t\t\t    dns_sdlzlookup_t *lookup);\n\n/*\n * dlz_dlopen_allowzonexfr() is optional, and should be supplied if\n * you want to support zone transfers\n */\ntypedef isc_result_t dlz_dlopen_allowzonexfr_t(void *dbdata,\n\t\t\t\t\t       const char *name,\n\t\t\t\t\t       const char *client);\n\n/*\n * dlz_dlopen_allnodes() is optional, but must be supplied if supply a\n * dlz_dlopen_allowzonexfr() function\n */\ntypedef isc_result_t dlz_dlopen_allnodes_t(const char *zone,\n\t\t\t\t\t   void *dbdata,\n\t\t\t\t\t   dns_sdlzallnodes_t *allnodes);\n\n/*\n * dlz_dlopen_newversion() is optional. It should be supplied if you\n * want to support dynamic updates.\n */\ntypedef isc_result_t dlz_dlopen_newversion_t(const char *zone,\n\t\t\t\t\t     void *dbdata,\n\t\t\t\t\t     void **versionp);\n\n/*\n * dlz_closeversion() is optional, but must be supplied if you supply\n * a dlz_newversion() function\n */\ntypedef void dlz_dlopen_closeversion_t(const char *zone,\n\t\t\t\t       bool commit,\n\t\t\t\t       void *dbdata,\n\t\t\t\t       void **versionp);\n\n/*\n * dlz_dlopen_configure() is optional, but must be supplied if you\n * want to support dynamic updates\n */\ntypedef isc_result_t dlz_dlopen_configure_t(dns_view_t *view,\n\t\t\t\t\t    dns_dlzdb_t *dlzdb,\n\t\t\t\t\t    void *dbdata);\n\n/*\n * dlz_dlopen_setclientcallback() is optional, but must be supplied if you\n * want to retrieve information about the client (e.g., source address)\n * before sending a replay.\n */\ntypedef isc_result_t dlz_dlopen_setclientcallback_t(dns_view_t *view,\n\t\t\t\t\t\t    void *dbdata);\n\n\n/*\n * dlz_dlopen_ssumatch() is optional, but must be supplied if you want\n * to support dynamic updates\n */\ntypedef bool dlz_dlopen_ssumatch_t(const char *signer,\n\t\t\t\t\t    const char *name,\n\t\t\t\t\t    const char *tcpaddr,\n\t\t\t\t\t    const char *type,\n\t\t\t\t\t    const char *key,\n\t\t\t\t\t    uint32_t keydatalen,\n\t\t\t\t\t    unsigned char *keydata,\n\t\t\t\t\t    void *dbdata);\n\n/*\n * dlz_dlopen_addrdataset() is optional, but must be supplied if you\n * want to support dynamic updates\n */\ntypedef isc_result_t dlz_dlopen_addrdataset_t(const char *name,\n\t\t\t\t\t      const char *rdatastr,\n\t\t\t\t\t      void *dbdata,\n\t\t\t\t\t      void *version);\n\n/*\n * dlz_dlopen_subrdataset() is optional, but must be supplied if you\n * want to support dynamic updates\n */\ntypedef isc_result_t dlz_dlopen_subrdataset_t(const char *name,\n\t\t\t\t\t      const char *rdatastr,\n\t\t\t\t\t      void *dbdata,\n\t\t\t\t\t      void *version);\n\n/*\n * dlz_dlopen_delrdataset() is optional, but must be supplied if you\n * want to support dynamic updates\n */\ntypedef isc_result_t dlz_dlopen_delrdataset_t(const char *name,\n\t\t\t\t\t      const char *type,\n\t\t\t\t\t      void *dbdata,\n\t\t\t\t\t      void *version);\n\nISC_LANG_ENDDECLS\n\n#endif\n",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/lib/dns/include/dns/dyndb.h": "/*\n * Copyright (C) Internet Systems Consortium, Inc. (\"ISC\")\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n *\n * See the COPYRIGHT file distributed with this work for additional\n * information regarding copyright ownership.\n */\n\n#ifndef DNS_DYNDB_H\n#define DNS_DYNDB_H\n\n#include <stdbool.h>\n\n#include <isc/types.h>\n\n#include <dns/types.h>\n\nISC_LANG_BEGINDECLS\n\n/*!\n * \\brief\n * Context for initializing a dyndb module.\n *\n * This structure passes global server data to which a dyndb\n * module will need access -- the server memory context, hash\n * initializer, log context, etc.  The structure doesn't persist\n * beyond configuring the dyndb module. The module's register function\n * should attach to all reference-counted variables and its destroy\n * function should detach from them.\n */\nstruct dns_dyndbctx {\n\tunsigned int\tmagic;\n\tconst void\t*hashinit;\n\tisc_mem_t\t*mctx;\n\tisc_log_t\t*lctx;\n\tdns_view_t\t*view;\n\tdns_zonemgr_t\t*zmgr;\n\tisc_task_t\t*task;\n\tisc_timermgr_t\t*timermgr;\n\tbool\t\t*refvar;\n};\n\n#define DNS_DYNDBCTX_MAGIC\tISC_MAGIC('D', 'd', 'b', 'c')\n#define DNS_DYNDBCTX_VALID(d)\tISC_MAGIC_VALID(d, DNS_DYNDBCTX_MAGIC)\n\n/*\n * API version\n *\n * When the API changes, increment DNS_DYNDB_VERSION. If the\n * change is backward-compatible (e.g., adding a new function call\n * but not changing or removing an old one), increment DNS_DYNDB_AGE;\n * if not, set DNS_DYNDB_AGE to 0.\n */\n#ifndef DNS_DYNDB_VERSION\n#define DNS_DYNDB_VERSION 1\n#define DNS_DYNDB_AGE 0\n#endif\n\ntypedef isc_result_t dns_dyndb_register_t(isc_mem_t *mctx,\n\t\t\t\t\t  const char *name,\n\t\t\t\t\t  const char *parameters,\n\t\t\t\t\t  const char *file,\n\t\t\t\t\t  unsigned long line,\n\t\t\t\t\t  const dns_dyndbctx_t *dctx,\n\t\t\t\t\t  void **instp);\n/*%\n * Called when registering a new driver instance. 'name' must be unique.\n * 'parameters' contains the driver configuration text. 'dctx' is the\n * initialization context set up in dns_dyndb_createctx().\n *\n * '*instp' will be set to the driver instance handle if the function\n * is successful.\n *\n * Returns:\n *\\li\t#ISC_R_SUCCESS\n *\\li\t#ISC_R_NOMEMORY\n *\\li\tOther errors are possible\n */\n\ntypedef void dns_dyndb_destroy_t(void **instp);\n/*%\n * Destroy a driver instance. Dereference any reference-counted\n * variables passed in 'dctx' and 'inst' in the register function.\n *\n * \\c *instp must be set to \\c NULL by the function before it returns.\n */\n\ntypedef int dns_dyndb_version_t(unsigned int *flags);\n/*%\n * Return the API version number a dyndb module was compiled with.\n *\n * If the returned version number is no greater than than\n * DNS_DYNDB_VERSION, and no less than DNS_DYNDB_VERSION - DNS_DYNDB_AGE,\n * then the module is API-compatible with named.\n *\n * 'flags' is currently unused and may be NULL, but could be used in\n * the future to pass back driver capabilities or other information.\n */\n\nisc_result_t\ndns_dyndb_load(const char *libname, const char *name, const char *parameters,\n\t       const char *file, unsigned long line, isc_mem_t *mctx,\n\t       const dns_dyndbctx_t *dctx);\n/*%\n * Load a dyndb module.\n *\n * This loads a dyndb module using dlopen() or equivalent, calls its register\n * function (see dns_dyndb_register_t above), and if successful, adds\n * the instance handle to a list of dyndb instances so it can be cleaned\n * up later.\n *\n * 'file' and 'line' can be used to indicate the name of the file and\n * the line number from which the parameters were taken, so that logged\n * error messages, if any, will display the correct locations.\n *\n * Returns:\n *\\li\t#ISC_R_SUCCESS\n *\\li\t#ISC_R_NOMEMORY\n *\\li\tOther errors are possible\n */\n\nvoid\ndns_dyndb_cleanup(bool exiting);\n/*%\n * Shut down and destroy all running dyndb modules.\n *\n * 'exiting' indicates whether the server is shutting down,\n * as opposed to merely being reconfigured.\n */\n\nisc_result_t\ndns_dyndb_createctx(isc_mem_t *mctx, const void *hashinit, isc_log_t *lctx,\n\t\t    dns_view_t *view, dns_zonemgr_t *zmgr, isc_task_t *task,\n\t\t    isc_timermgr_t *tmgr, dns_dyndbctx_t **dctxp);\n/*%\n * Create a dyndb initialization context structure, with\n * pointers to structures in the server that the dyndb module will\n * need to access (view, zone manager, memory context, hash initializer,\n * etc). This structure is expected to last only until all dyndb\n * modules have been loaded and initialized; after that it will be\n * destroyed with dns_dyndb_destroyctx().\n *\n * Returns:\n *\\li\t#ISC_R_SUCCESS\n *\\li\t#ISC_R_NOMEMORY\n *\\li\tOther errors are possible\n */\n\nvoid\ndns_dyndb_destroyctx(dns_dyndbctx_t **dctxp);\n/*%\n * Destroys a dyndb initialization context structure; all\n * reference-counted members are detached and the structure is freed.\n */\n\nISC_LANG_ENDDECLS\n\n#endif /* DNS_DYNDB_H */\n",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/lib/dns/include/dns/dnsrps.h": "/*\n * Copyright (C) Internet Systems Consortium, Inc. (\"ISC\")\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n *\n * See the COPYRIGHT file distributed with this work for additional\n * information regarding copyright ownership.\n */\n\n#ifndef DNS_DNSRPS_H\n#define DNS_DNSRPS_H\n\n#include <inttypes.h>\n#include <stdbool.h>\n\n#include <isc/lang.h>\n#include <dns/types.h>\n\n#ifdef USE_DNSRPS\n\n#include <dns/librpz.h>\n#include <dns/rpz.h>\n\n/*\n * Error message if dlopen(librpz) failed.\n */\nextern librpz_emsg_t librpz_lib_open_emsg;\n\n\n/*\n * These shim BIND9 database, node, and rdataset are handles on RRs from librpz.\n *\n * All of these structures are used by a single thread and so need no locks.\n *\n * rpsdb_t holds the state for a set of RPZ queries.\n *\n * rpsnode_t is a link to the rpsdb_t for the set of  RPZ queries\n * and a flag saying whether it is pretending to be a node with RRs for\n * the qname or the node with the SOA for the zone containing the rewritten\n * RRs or justifying NXDOMAIN.\n */\ntypedef struct {\n\tuint8_t\t\t\tunused;\n} rpsnode_t;\ntypedef struct rpsdb {\n\tdns_db_t\t\tcommon;\n\tint\t\t\tref_cnt;\n\tlibrpz_result_id_t\thit_id;\n\tlibrpz_result_t\t\tresult;\n\tlibrpz_rsp_t*\t\trsp;\n\tlibrpz_domain_buf_t\torigin_buf;\n\tconst dns_name_t\t*qname;\n\trpsnode_t\t\torigin_node;\n\trpsnode_t\t\tdata_node;\n} rpsdb_t;\n\n\n/*\n * Convert a dnsrps policy to a classic BIND9 RPZ policy.\n */\ndns_rpz_policy_t dns_dnsrps_2policy(librpz_policy_t rps_policy);\n\n/*\n * Convert a dnsrps trigger to a classic BIND9 RPZ rewrite or trigger type.\n */\ndns_rpz_type_t dns_dnsrps_trig2type(librpz_trig_t trig);\n\n/*\n * Convert a classic BIND9 RPZ rewrite or trigger type to a librpz trigger type.\n */\nlibrpz_trig_t dns_dnsrps_type2trig(dns_rpz_type_t type);\n\n/*\n * Start dnsrps for the entire server.\n */\nisc_result_t dns_dnsrps_server_create(void);\n\n/*\n * Stop dnsrps for the entire server.\n */\nvoid dns_dnsrps_server_destroy(void);\n\n/*\n * Ready dnsrps for a view.\n */\nisc_result_t dns_dnsrps_view_init(dns_rpz_zones_t *new, char *rps_cstr);\n\n/*\n * Connect to and start the dnsrps daemon, dnsrpzd.\n */\nisc_result_t dns_dnsrps_connect(dns_rpz_zones_t *rpzs);\n\n/*\n * Get ready to try dnsrps rewriting.\n */\nisc_result_t dns_dnsrps_rewrite_init(librpz_emsg_t *emsg, dns_rpz_st_t *st,\n\t\t\t\t      dns_rpz_zones_t *rpzs,\n\t\t\t\t      const dns_name_t *qname, isc_mem_t *mctx,\n\t\t\t\t      bool have_rd);\n\n#endif /* USE_DNSRPS */\n\nISC_LANG_ENDDECLS\n\n#endif /* DNS_DNSRPS_H */\n",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/lib/dns/include/dns/Makefile.in": "# Copyright (C) Internet Systems Consortium, Inc. (\"ISC\")\n#\n# This Source Code Form is subject to the terms of the Mozilla Public\n# License, v. 2.0. If a copy of the MPL was not distributed with this\n# file, You can obtain one at http://mozilla.org/MPL/2.0/.\n#\n# See the COPYRIGHT file distributed with this work for additional\n# information regarding copyright ownership.\n\nsrcdir =\t@srcdir@\nVPATH =\t\t@srcdir@\ntop_srcdir =\t@top_srcdir@\n\nVERSION=@BIND9_VERSION@\n\nHEADERS =\tacl.h adb.h badcache.h bit.h byaddr.h \\\n\t\tcache.h callbacks.h catz.h cert.h \\\n\t\tclient.h clientinfo.h compress.h \\\n\t\tdb.h dbiterator.h dbtable.h diff.h dispatch.h \\\n\t\tdlz.h dlz_dlopen.h dns64.h dnsrps.h dnssec.h ds.h dsdigest.h \\\n\t\tdnstap.h dyndb.h ecs.h \\\n\t\tedns.h ecdb.h events.h fixedname.h forward.h geoip.h \\\n\t\tipkeylist.h iptable.h \\\n\t\tjournal.h keydata.h keyflags.h keytable.h keyvalues.h \\\n\t\tlib.h librpz.h lookup.h log.h master.h masterdump.h message.h \\\n\t\tname.h ncache.h nsec.h nsec3.h nta.h opcode.h order.h \\\n\t\tpeer.h portlist.h private.h \\\n\t\trbt.h rcode.h rdata.h rdataclass.h rdatalist.h \\\n\t\trdataset.h rdatasetiter.h rdataslab.h rdatatype.h request.h \\\n\t\tresolver.h result.h rootns.h rpz.h rriterator.h rrl.h \\\n\t\tsdb.h sdlz.h secalg.h secproto.h soa.h ssu.h stats.h \\\n\t\ttcpmsg.h time.h timer.h tkey.h tsec.h tsig.h ttl.h types.h \\\n\t\tupdate.h validator.h version.h view.h xfrin.h \\\n\t\tzone.h zonekey.h zoneverify.h zt.h\n\nGENHEADERS =\tenumclass.h enumtype.h rdatastruct.h\n\nSUBDIRS =\nTARGETS =\n\n@BIND9_MAKE_RULES@\n\ninstalldirs:\n\t$(SHELL) ${top_srcdir}/mkinstalldirs ${DESTDIR}${includedir}/dns\n\ninstall:: installdirs\n\tfor i in ${HEADERS}; do \\\n\t\t${INSTALL_DATA} ${srcdir}/$$i ${DESTDIR}${includedir}/dns || exit 1; \\\n\tdone\n\tfor i in ${GENHEADERS}; do \\\n\t\t${INSTALL_DATA} $$i ${DESTDIR}${includedir}/dns || exit 1; \\\n\tdone\n\nuninstall::\n\tfor i in ${GENHEADERS}; do \\\n\t\trm -f ${DESTDIR}${includedir}/dns/$$i || exit 1; \\\n\tdone\n\tfor i in ${HEADERS}; do \\\n\t\trm -f ${DESTDIR}${includedir}/dns/$$i || exit 1; \\\n\tdone\n",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/m4/libtool.m4": "# libtool.m4 - Configure libtool for the host system. -*-Autoconf-*-\n#\n#   Copyright (C) 1996-2001, 2003-2015 Free Software Foundation, Inc.\n#   Written by Gordon Matzigkeit, 1996\n#\n# This file is free software; the Free Software Foundation gives\n# unlimited permission to copy and/or distribute it, with or without\n# modifications, as long as this notice is preserved.\n\nm4_define([_LT_COPYING], [dnl\n# Copyright (C) 2014 Free Software Foundation, Inc.\n# This is free software; see the source for copying conditions.  There is NO\n# warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# GNU Libtool is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2 of of the License, or\n# (at your option) any later version.\n#\n# As a special exception to the GNU General Public License, if you\n# distribute this file as part of a program or library that is built\n# using GNU Libtool, you may include this file under the  same\n# distribution terms that you use for the rest of that program.\n#\n# GNU Libtool is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n])\n\n# serial 58 LT_INIT\n\n\n# LT_PREREQ(VERSION)\n# ------------------\n# Complain and exit if this libtool version is less that VERSION.\nm4_defun([LT_PREREQ],\n[m4_if(m4_version_compare(m4_defn([LT_PACKAGE_VERSION]), [$1]), -1,\n       [m4_default([$3],\n\t\t   [m4_fatal([Libtool version $1 or higher is required],\n\t\t             63)])],\n       [$2])])\n\n\n# _LT_CHECK_BUILDDIR\n# ------------------\n# Complain if the absolute build directory name contains unusual characters\nm4_defun([_LT_CHECK_BUILDDIR],\n[case `pwd` in\n  *\\ * | *\\\t*)\n    AC_MSG_WARN([Libtool does not cope well with whitespace in `pwd`]) ;;\nesac\n])\n\n\n# LT_INIT([OPTIONS])\n# ------------------\nAC_DEFUN([LT_INIT],\n[AC_PREREQ([2.62])dnl We use AC_PATH_PROGS_FEATURE_CHECK\nAC_REQUIRE([AC_CONFIG_AUX_DIR_DEFAULT])dnl\nAC_BEFORE([$0], [LT_LANG])dnl\nAC_BEFORE([$0], [LT_OUTPUT])dnl\nAC_BEFORE([$0], [LTDL_INIT])dnl\nm4_require([_LT_CHECK_BUILDDIR])dnl\n\ndnl Autoconf doesn't catch unexpanded LT_ macros by default:\nm4_pattern_forbid([^_?LT_[A-Z_]+$])dnl\nm4_pattern_allow([^(_LT_EOF|LT_DLGLOBAL|LT_DLLAZY_OR_NOW|LT_MULTI_MODULE)$])dnl\ndnl aclocal doesn't pull ltoptions.m4, ltsugar.m4, or ltversion.m4\ndnl unless we require an AC_DEFUNed macro:\nAC_REQUIRE([LTOPTIONS_VERSION])dnl\nAC_REQUIRE([LTSUGAR_VERSION])dnl\nAC_REQUIRE([LTVERSION_VERSION])dnl\nAC_REQUIRE([LTOBSOLETE_VERSION])dnl\nm4_require([_LT_PROG_LTMAIN])dnl\n\n_LT_SHELL_INIT([SHELL=${CONFIG_SHELL-/bin/sh}])\n\ndnl Parse OPTIONS\n_LT_SET_OPTIONS([$0], [$1])\n\n# This can be used to rebuild libtool when needed\nLIBTOOL_DEPS=$ltmain\n\n# Always use our own libtool.\nLIBTOOL='$(SHELL) $(top_builddir)/libtool'\nAC_SUBST(LIBTOOL)dnl\n\n_LT_SETUP\n\n# Only expand once:\nm4_define([LT_INIT])\n])# LT_INIT\n\n# Old names:\nAU_ALIAS([AC_PROG_LIBTOOL], [LT_INIT])\nAU_ALIAS([AM_PROG_LIBTOOL], [LT_INIT])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_PROG_LIBTOOL], [])\ndnl AC_DEFUN([AM_PROG_LIBTOOL], [])\n\n\n# _LT_PREPARE_CC_BASENAME\n# -----------------------\nm4_defun([_LT_PREPARE_CC_BASENAME], [\n# Calculate cc_basename.  Skip known compiler wrappers and cross-prefix.\nfunc_cc_basename ()\n{\n    for cc_temp in @S|@*\"\"; do\n      case $cc_temp in\n        compile | *[[\\\\/]]compile | ccache | *[[\\\\/]]ccache ) ;;\n        distcc | *[[\\\\/]]distcc | purify | *[[\\\\/]]purify ) ;;\n        \\-*) ;;\n        *) break;;\n      esac\n    done\n    func_cc_basename_result=`$ECHO \"$cc_temp\" | $SED \"s%.*/%%; s%^$host_alias-%%\"`\n}\n])# _LT_PREPARE_CC_BASENAME\n\n\n# _LT_CC_BASENAME(CC)\n# -------------------\n# It would be clearer to call AC_REQUIREs from _LT_PREPARE_CC_BASENAME,\n# but that macro is also expanded into generated libtool script, which\n# arranges for $SED and $ECHO to be set by different means.\nm4_defun([_LT_CC_BASENAME],\n[m4_require([_LT_PREPARE_CC_BASENAME])dnl\nAC_REQUIRE([_LT_DECL_SED])dnl\nAC_REQUIRE([_LT_PROG_ECHO_BACKSLASH])dnl\nfunc_cc_basename $1\ncc_basename=$func_cc_basename_result\n])\n\n\n# _LT_FILEUTILS_DEFAULTS\n# ----------------------\n# It is okay to use these file commands and assume they have been set\n# sensibly after 'm4_require([_LT_FILEUTILS_DEFAULTS])'.\nm4_defun([_LT_FILEUTILS_DEFAULTS],\n[: ${CP=\"cp -f\"}\n: ${MV=\"mv -f\"}\n: ${RM=\"rm -f\"}\n])# _LT_FILEUTILS_DEFAULTS\n\n\n# _LT_SETUP\n# ---------\nm4_defun([_LT_SETUP],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_CANONICAL_BUILD])dnl\nAC_REQUIRE([_LT_PREPARE_SED_QUOTE_VARS])dnl\nAC_REQUIRE([_LT_PROG_ECHO_BACKSLASH])dnl\n\n_LT_DECL([], [PATH_SEPARATOR], [1], [The PATH separator for the build system])dnl\ndnl\n_LT_DECL([], [host_alias], [0], [The host system])dnl\n_LT_DECL([], [host], [0])dnl\n_LT_DECL([], [host_os], [0])dnl\ndnl\n_LT_DECL([], [build_alias], [0], [The build system])dnl\n_LT_DECL([], [build], [0])dnl\n_LT_DECL([], [build_os], [0])dnl\ndnl\nAC_REQUIRE([AC_PROG_CC])dnl\nAC_REQUIRE([LT_PATH_LD])dnl\nAC_REQUIRE([LT_PATH_NM])dnl\ndnl\nAC_REQUIRE([AC_PROG_LN_S])dnl\ntest -z \"$LN_S\" && LN_S=\"ln -s\"\n_LT_DECL([], [LN_S], [1], [Whether we need soft or hard links])dnl\ndnl\nAC_REQUIRE([LT_CMD_MAX_LEN])dnl\n_LT_DECL([objext], [ac_objext], [0], [Object file suffix (normally \"o\")])dnl\n_LT_DECL([], [exeext], [0], [Executable file suffix (normally \"\")])dnl\ndnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_CHECK_SHELL_FEATURES])dnl\nm4_require([_LT_PATH_CONVERSION_FUNCTIONS])dnl\nm4_require([_LT_CMD_RELOAD])dnl\nm4_require([_LT_CHECK_MAGIC_METHOD])dnl\nm4_require([_LT_CHECK_SHAREDLIB_FROM_LINKLIB])dnl\nm4_require([_LT_CMD_OLD_ARCHIVE])dnl\nm4_require([_LT_CMD_GLOBAL_SYMBOLS])dnl\nm4_require([_LT_WITH_SYSROOT])dnl\nm4_require([_LT_CMD_TRUNCATE])dnl\n\n_LT_CONFIG_LIBTOOL_INIT([\n# See if we are running on zsh, and set the options that allow our\n# commands through without removal of \\ escapes INIT.\nif test -n \"\\${ZSH_VERSION+set}\"; then\n   setopt NO_GLOB_SUBST\nfi\n])\nif test -n \"${ZSH_VERSION+set}\"; then\n   setopt NO_GLOB_SUBST\nfi\n\n_LT_CHECK_OBJDIR\n\nm4_require([_LT_TAG_COMPILER])dnl\n\ncase $host_os in\naix3*)\n  # AIX sometimes has problems with the GCC collect2 program.  For some\n  # reason, if we set the COLLECT_NAMES environment variable, the problems\n  # vanish in a puff of smoke.\n  if test set != \"${COLLECT_NAMES+set}\"; then\n    COLLECT_NAMES=\n    export COLLECT_NAMES\n  fi\n  ;;\nesac\n\n# Global variables:\nofile=libtool\ncan_build_shared=yes\n\n# All known linkers require a '.a' archive for static linking (except MSVC,\n# which needs '.lib').\nlibext=a\n\nwith_gnu_ld=$lt_cv_prog_gnu_ld\n\nold_CC=$CC\nold_CFLAGS=$CFLAGS\n\n# Set sane defaults for various variables\ntest -z \"$CC\" && CC=cc\ntest -z \"$LTCC\" && LTCC=$CC\ntest -z \"$LTCFLAGS\" && LTCFLAGS=$CFLAGS\ntest -z \"$LD\" && LD=ld\ntest -z \"$ac_objext\" && ac_objext=o\n\n_LT_CC_BASENAME([$compiler])\n\n# Only perform the check for file, if the check method requires it\ntest -z \"$MAGIC_CMD\" && MAGIC_CMD=file\ncase $deplibs_check_method in\nfile_magic*)\n  if test \"$file_magic_cmd\" = '$MAGIC_CMD'; then\n    _LT_PATH_MAGIC\n  fi\n  ;;\nesac\n\n# Use C for the default configuration in the libtool script\nLT_SUPPORTED_TAG([CC])\n_LT_LANG_C_CONFIG\n_LT_LANG_DEFAULT_CONFIG\n_LT_CONFIG_COMMANDS\n])# _LT_SETUP\n\n\n# _LT_PREPARE_SED_QUOTE_VARS\n# --------------------------\n# Define a few sed substitution that help us do robust quoting.\nm4_defun([_LT_PREPARE_SED_QUOTE_VARS],\n[# Backslashify metacharacters that are still active within\n# double-quoted strings.\nsed_quote_subst='s/\\([[\"`$\\\\]]\\)/\\\\\\1/g'\n\n# Same as above, but do not quote variable references.\ndouble_quote_subst='s/\\([[\"`\\\\]]\\)/\\\\\\1/g'\n\n# Sed substitution to delay expansion of an escaped shell variable in a\n# double_quote_subst'ed string.\ndelay_variable_subst='s/\\\\\\\\\\\\\\\\\\\\\\$/\\\\\\\\\\\\$/g'\n\n# Sed substitution to delay expansion of an escaped single quote.\ndelay_single_quote_subst='s/'\\''/'\\'\\\\\\\\\\\\\\'\\''/g'\n\n# Sed substitution to avoid accidental globbing in evaled expressions\nno_glob_subst='s/\\*/\\\\\\*/g'\n])\n\n# _LT_PROG_LTMAIN\n# ---------------\n# Note that this code is called both from 'configure', and 'config.status'\n# now that we use AC_CONFIG_COMMANDS to generate libtool.  Notably,\n# 'config.status' has no value for ac_aux_dir unless we are using Automake,\n# so we pass a copy along to make sure it has a sensible value anyway.\nm4_defun([_LT_PROG_LTMAIN],\n[m4_ifdef([AC_REQUIRE_AUX_FILE], [AC_REQUIRE_AUX_FILE([ltmain.sh])])dnl\n_LT_CONFIG_LIBTOOL_INIT([ac_aux_dir='$ac_aux_dir'])\nltmain=$ac_aux_dir/ltmain.sh\n])# _LT_PROG_LTMAIN\n\n\n## ------------------------------------- ##\n## Accumulate code for creating libtool. ##\n## ------------------------------------- ##\n\n# So that we can recreate a full libtool script including additional\n# tags, we accumulate the chunks of code to send to AC_CONFIG_COMMANDS\n# in macros and then make a single call at the end using the 'libtool'\n# label.\n\n\n# _LT_CONFIG_LIBTOOL_INIT([INIT-COMMANDS])\n# ----------------------------------------\n# Register INIT-COMMANDS to be passed to AC_CONFIG_COMMANDS later.\nm4_define([_LT_CONFIG_LIBTOOL_INIT],\n[m4_ifval([$1],\n          [m4_append([_LT_OUTPUT_LIBTOOL_INIT],\n                     [$1\n])])])\n\n# Initialize.\nm4_define([_LT_OUTPUT_LIBTOOL_INIT])\n\n\n# _LT_CONFIG_LIBTOOL([COMMANDS])\n# ------------------------------\n# Register COMMANDS to be passed to AC_CONFIG_COMMANDS later.\nm4_define([_LT_CONFIG_LIBTOOL],\n[m4_ifval([$1],\n          [m4_append([_LT_OUTPUT_LIBTOOL_COMMANDS],\n                     [$1\n])])])\n\n# Initialize.\nm4_define([_LT_OUTPUT_LIBTOOL_COMMANDS])\n\n\n# _LT_CONFIG_SAVE_COMMANDS([COMMANDS], [INIT_COMMANDS])\n# -----------------------------------------------------\nm4_defun([_LT_CONFIG_SAVE_COMMANDS],\n[_LT_CONFIG_LIBTOOL([$1])\n_LT_CONFIG_LIBTOOL_INIT([$2])\n])\n\n\n# _LT_FORMAT_COMMENT([COMMENT])\n# -----------------------------\n# Add leading comment marks to the start of each line, and a trailing\n# full-stop to the whole comment if one is not present already.\nm4_define([_LT_FORMAT_COMMENT],\n[m4_ifval([$1], [\nm4_bpatsubst([m4_bpatsubst([$1], [^ *], [# ])],\n              [['`$\\]], [\\\\\\&])]m4_bmatch([$1], [[!?.]$], [], [.])\n)])\n\n\n\n## ------------------------ ##\n## FIXME: Eliminate VARNAME ##\n## ------------------------ ##\n\n\n# _LT_DECL([CONFIGNAME], VARNAME, VALUE, [DESCRIPTION], [IS-TAGGED?])\n# -------------------------------------------------------------------\n# CONFIGNAME is the name given to the value in the libtool script.\n# VARNAME is the (base) name used in the configure script.\n# VALUE may be 0, 1 or 2 for a computed quote escaped value based on\n# VARNAME.  Any other value will be used directly.\nm4_define([_LT_DECL],\n[lt_if_append_uniq([lt_decl_varnames], [$2], [, ],\n    [lt_dict_add_subkey([lt_decl_dict], [$2], [libtool_name],\n\t[m4_ifval([$1], [$1], [$2])])\n    lt_dict_add_subkey([lt_decl_dict], [$2], [value], [$3])\n    m4_ifval([$4],\n\t[lt_dict_add_subkey([lt_decl_dict], [$2], [description], [$4])])\n    lt_dict_add_subkey([lt_decl_dict], [$2],\n\t[tagged?], [m4_ifval([$5], [yes], [no])])])\n])\n\n\n# _LT_TAGDECL([CONFIGNAME], VARNAME, VALUE, [DESCRIPTION])\n# --------------------------------------------------------\nm4_define([_LT_TAGDECL], [_LT_DECL([$1], [$2], [$3], [$4], [yes])])\n\n\n# lt_decl_tag_varnames([SEPARATOR], [VARNAME1...])\n# ------------------------------------------------\nm4_define([lt_decl_tag_varnames],\n[_lt_decl_filter([tagged?], [yes], $@)])\n\n\n# _lt_decl_filter(SUBKEY, VALUE, [SEPARATOR], [VARNAME1..])\n# ---------------------------------------------------------\nm4_define([_lt_decl_filter],\n[m4_case([$#],\n  [0], [m4_fatal([$0: too few arguments: $#])],\n  [1], [m4_fatal([$0: too few arguments: $#: $1])],\n  [2], [lt_dict_filter([lt_decl_dict], [$1], [$2], [], lt_decl_varnames)],\n  [3], [lt_dict_filter([lt_decl_dict], [$1], [$2], [$3], lt_decl_varnames)],\n  [lt_dict_filter([lt_decl_dict], $@)])[]dnl\n])\n\n\n# lt_decl_quote_varnames([SEPARATOR], [VARNAME1...])\n# --------------------------------------------------\nm4_define([lt_decl_quote_varnames],\n[_lt_decl_filter([value], [1], $@)])\n\n\n# lt_decl_dquote_varnames([SEPARATOR], [VARNAME1...])\n# ---------------------------------------------------\nm4_define([lt_decl_dquote_varnames],\n[_lt_decl_filter([value], [2], $@)])\n\n\n# lt_decl_varnames_tagged([SEPARATOR], [VARNAME1...])\n# ---------------------------------------------------\nm4_define([lt_decl_varnames_tagged],\n[m4_assert([$# <= 2])dnl\n_$0(m4_quote(m4_default([$1], [[, ]])),\n    m4_ifval([$2], [[$2]], [m4_dquote(lt_decl_tag_varnames)]),\n    m4_split(m4_normalize(m4_quote(_LT_TAGS)), [ ]))])\nm4_define([_lt_decl_varnames_tagged],\n[m4_ifval([$3], [lt_combine([$1], [$2], [_], $3)])])\n\n\n# lt_decl_all_varnames([SEPARATOR], [VARNAME1...])\n# ------------------------------------------------\nm4_define([lt_decl_all_varnames],\n[_$0(m4_quote(m4_default([$1], [[, ]])),\n     m4_if([$2], [],\n\t   m4_quote(lt_decl_varnames),\n\tm4_quote(m4_shift($@))))[]dnl\n])\nm4_define([_lt_decl_all_varnames],\n[lt_join($@, lt_decl_varnames_tagged([$1],\n\t\t\tlt_decl_tag_varnames([[, ]], m4_shift($@))))dnl\n])\n\n\n# _LT_CONFIG_STATUS_DECLARE([VARNAME])\n# ------------------------------------\n# Quote a variable value, and forward it to 'config.status' so that its\n# declaration there will have the same value as in 'configure'.  VARNAME\n# must have a single quote delimited value for this to work.\nm4_define([_LT_CONFIG_STATUS_DECLARE],\n[$1='`$ECHO \"$][$1\" | $SED \"$delay_single_quote_subst\"`'])\n\n\n# _LT_CONFIG_STATUS_DECLARATIONS\n# ------------------------------\n# We delimit libtool config variables with single quotes, so when\n# we write them to config.status, we have to be sure to quote all\n# embedded single quotes properly.  In configure, this macro expands\n# each variable declared with _LT_DECL (and _LT_TAGDECL) into:\n#\n#    <var>='`$ECHO \"$<var>\" | $SED \"$delay_single_quote_subst\"`'\nm4_defun([_LT_CONFIG_STATUS_DECLARATIONS],\n[m4_foreach([_lt_var], m4_quote(lt_decl_all_varnames),\n    [m4_n([_LT_CONFIG_STATUS_DECLARE(_lt_var)])])])\n\n\n# _LT_LIBTOOL_TAGS\n# ----------------\n# Output comment and list of tags supported by the script\nm4_defun([_LT_LIBTOOL_TAGS],\n[_LT_FORMAT_COMMENT([The names of the tagged configurations supported by this script])dnl\navailable_tags='_LT_TAGS'dnl\n])\n\n\n# _LT_LIBTOOL_DECLARE(VARNAME, [TAG])\n# -----------------------------------\n# Extract the dictionary values for VARNAME (optionally with TAG) and\n# expand to a commented shell variable setting:\n#\n#    # Some comment about what VAR is for.\n#    visible_name=$lt_internal_name\nm4_define([_LT_LIBTOOL_DECLARE],\n[_LT_FORMAT_COMMENT(m4_quote(lt_dict_fetch([lt_decl_dict], [$1],\n\t\t\t\t\t   [description])))[]dnl\nm4_pushdef([_libtool_name],\n    m4_quote(lt_dict_fetch([lt_decl_dict], [$1], [libtool_name])))[]dnl\nm4_case(m4_quote(lt_dict_fetch([lt_decl_dict], [$1], [value])),\n    [0], [_libtool_name=[$]$1],\n    [1], [_libtool_name=$lt_[]$1],\n    [2], [_libtool_name=$lt_[]$1],\n    [_libtool_name=lt_dict_fetch([lt_decl_dict], [$1], [value])])[]dnl\nm4_ifval([$2], [_$2])[]m4_popdef([_libtool_name])[]dnl\n])\n\n\n# _LT_LIBTOOL_CONFIG_VARS\n# -----------------------\n# Produce commented declarations of non-tagged libtool config variables\n# suitable for insertion in the LIBTOOL CONFIG section of the 'libtool'\n# script.  Tagged libtool config variables (even for the LIBTOOL CONFIG\n# section) are produced by _LT_LIBTOOL_TAG_VARS.\nm4_defun([_LT_LIBTOOL_CONFIG_VARS],\n[m4_foreach([_lt_var],\n    m4_quote(_lt_decl_filter([tagged?], [no], [], lt_decl_varnames)),\n    [m4_n([_LT_LIBTOOL_DECLARE(_lt_var)])])])\n\n\n# _LT_LIBTOOL_TAG_VARS(TAG)\n# -------------------------\nm4_define([_LT_LIBTOOL_TAG_VARS],\n[m4_foreach([_lt_var], m4_quote(lt_decl_tag_varnames),\n    [m4_n([_LT_LIBTOOL_DECLARE(_lt_var, [$1])])])])\n\n\n# _LT_TAGVAR(VARNAME, [TAGNAME])\n# ------------------------------\nm4_define([_LT_TAGVAR], [m4_ifval([$2], [$1_$2], [$1])])\n\n\n# _LT_CONFIG_COMMANDS\n# -------------------\n# Send accumulated output to $CONFIG_STATUS.  Thanks to the lists of\n# variables for single and double quote escaping we saved from calls\n# to _LT_DECL, we can put quote escaped variables declarations\n# into 'config.status', and then the shell code to quote escape them in\n# for loops in 'config.status'.  Finally, any additional code accumulated\n# from calls to _LT_CONFIG_LIBTOOL_INIT is expanded.\nm4_defun([_LT_CONFIG_COMMANDS],\n[AC_PROVIDE_IFELSE([LT_OUTPUT],\n\tdnl If the libtool generation code has been placed in $CONFIG_LT,\n\tdnl instead of duplicating it all over again into config.status,\n\tdnl then we will have config.status run $CONFIG_LT later, so it\n\tdnl needs to know what name is stored there:\n        [AC_CONFIG_COMMANDS([libtool],\n            [$SHELL $CONFIG_LT || AS_EXIT(1)], [CONFIG_LT='$CONFIG_LT'])],\n    dnl If the libtool generation code is destined for config.status,\n    dnl expand the accumulated commands and init code now:\n    [AC_CONFIG_COMMANDS([libtool],\n        [_LT_OUTPUT_LIBTOOL_COMMANDS], [_LT_OUTPUT_LIBTOOL_COMMANDS_INIT])])\n])#_LT_CONFIG_COMMANDS\n\n\n# Initialize.\nm4_define([_LT_OUTPUT_LIBTOOL_COMMANDS_INIT],\n[\n\n# The HP-UX ksh and POSIX shell print the target directory to stdout\n# if CDPATH is set.\n(unset CDPATH) >/dev/null 2>&1 && unset CDPATH\n\nsed_quote_subst='$sed_quote_subst'\ndouble_quote_subst='$double_quote_subst'\ndelay_variable_subst='$delay_variable_subst'\n_LT_CONFIG_STATUS_DECLARATIONS\nLTCC='$LTCC'\nLTCFLAGS='$LTCFLAGS'\ncompiler='$compiler_DEFAULT'\n\n# A function that is used when there is no print builtin or printf.\nfunc_fallback_echo ()\n{\n  eval 'cat <<_LTECHO_EOF\n\\$[]1\n_LTECHO_EOF'\n}\n\n# Quote evaled strings.\nfor var in lt_decl_all_varnames([[ \\\n]], lt_decl_quote_varnames); do\n    case \\`eval \\\\\\\\\\$ECHO \\\\\\\\\"\"\\\\\\\\\\$\\$var\"\\\\\\\\\"\\` in\n    *[[\\\\\\\\\\\\\\`\\\\\"\\\\\\$]]*)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\`\\\\\\$ECHO \\\\\"\\\\\\$\\$var\\\\\" | \\\\\\$SED \\\\\"\\\\\\$sed_quote_subst\\\\\"\\\\\\`\\\\\\\\\\\\\"\" ## exclude from sc_prohibit_nested_quotes\n      ;;\n    *)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\$\\$var\\\\\\\\\\\\\"\"\n      ;;\n    esac\ndone\n\n# Double-quote double-evaled strings.\nfor var in lt_decl_all_varnames([[ \\\n]], lt_decl_dquote_varnames); do\n    case \\`eval \\\\\\\\\\$ECHO \\\\\\\\\"\"\\\\\\\\\\$\\$var\"\\\\\\\\\"\\` in\n    *[[\\\\\\\\\\\\\\`\\\\\"\\\\\\$]]*)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\`\\\\\\$ECHO \\\\\"\\\\\\$\\$var\\\\\" | \\\\\\$SED -e \\\\\"\\\\\\$double_quote_subst\\\\\" -e \\\\\"\\\\\\$sed_quote_subst\\\\\" -e \\\\\"\\\\\\$delay_variable_subst\\\\\"\\\\\\`\\\\\\\\\\\\\"\" ## exclude from sc_prohibit_nested_quotes\n      ;;\n    *)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\$\\$var\\\\\\\\\\\\\"\"\n      ;;\n    esac\ndone\n\n_LT_OUTPUT_LIBTOOL_INIT\n])\n\n# _LT_GENERATED_FILE_INIT(FILE, [COMMENT])\n# ------------------------------------\n# Generate a child script FILE with all initialization necessary to\n# reuse the environment learned by the parent script, and make the\n# file executable.  If COMMENT is supplied, it is inserted after the\n# '#!' sequence but before initialization text begins.  After this\n# macro, additional text can be appended to FILE to form the body of\n# the child script.  The macro ends with non-zero status if the\n# file could not be fully written (such as if the disk is full).\nm4_ifdef([AS_INIT_GENERATED],\n[m4_defun([_LT_GENERATED_FILE_INIT],[AS_INIT_GENERATED($@)])],\n[m4_defun([_LT_GENERATED_FILE_INIT],\n[m4_require([AS_PREPARE])]dnl\n[m4_pushdef([AS_MESSAGE_LOG_FD])]dnl\n[lt_write_fail=0\ncat >$1 <<_ASEOF || lt_write_fail=1\n#! $SHELL\n# Generated by $as_me.\n$2\nSHELL=\\${CONFIG_SHELL-$SHELL}\nexport SHELL\n_ASEOF\ncat >>$1 <<\\_ASEOF || lt_write_fail=1\nAS_SHELL_SANITIZE\n_AS_PREPARE\nexec AS_MESSAGE_FD>&1\n_ASEOF\ntest 0 = \"$lt_write_fail\" && chmod +x $1[]dnl\nm4_popdef([AS_MESSAGE_LOG_FD])])])# _LT_GENERATED_FILE_INIT\n\n# LT_OUTPUT\n# ---------\n# This macro allows early generation of the libtool script (before\n# AC_OUTPUT is called), incase it is used in configure for compilation\n# tests.\nAC_DEFUN([LT_OUTPUT],\n[: ${CONFIG_LT=./config.lt}\nAC_MSG_NOTICE([creating $CONFIG_LT])\n_LT_GENERATED_FILE_INIT([\"$CONFIG_LT\"],\n[# Run this file to recreate a libtool stub with the current configuration.])\n\ncat >>\"$CONFIG_LT\" <<\\_LTEOF\nlt_cl_silent=false\nexec AS_MESSAGE_LOG_FD>>config.log\n{\n  echo\n  AS_BOX([Running $as_me.])\n} >&AS_MESSAGE_LOG_FD\n\nlt_cl_help=\"\\\n'$as_me' creates a local libtool stub from the current configuration,\nfor use in further configure time tests before the real libtool is\ngenerated.\n\nUsage: $[0] [[OPTIONS]]\n\n  -h, --help      print this help, then exit\n  -V, --version   print version number, then exit\n  -q, --quiet     do not print progress messages\n  -d, --debug     don't remove temporary files\n\nReport bugs to <bug-libtool@gnu.org>.\"\n\nlt_cl_version=\"\\\nm4_ifset([AC_PACKAGE_NAME], [AC_PACKAGE_NAME ])config.lt[]dnl\nm4_ifset([AC_PACKAGE_VERSION], [ AC_PACKAGE_VERSION])\nconfigured by $[0], generated by m4_PACKAGE_STRING.\n\nCopyright (C) 2011 Free Software Foundation, Inc.\nThis config.lt script is free software; the Free Software Foundation\ngives unlimited permision to copy, distribute and modify it.\"\n\nwhile test 0 != $[#]\ndo\n  case $[1] in\n    --version | --v* | -V )\n      echo \"$lt_cl_version\"; exit 0 ;;\n    --help | --h* | -h )\n      echo \"$lt_cl_help\"; exit 0 ;;\n    --debug | --d* | -d )\n      debug=: ;;\n    --quiet | --q* | --silent | --s* | -q )\n      lt_cl_silent=: ;;\n\n    -*) AC_MSG_ERROR([unrecognized option: $[1]\nTry '$[0] --help' for more information.]) ;;\n\n    *) AC_MSG_ERROR([unrecognized argument: $[1]\nTry '$[0] --help' for more information.]) ;;\n  esac\n  shift\ndone\n\nif $lt_cl_silent; then\n  exec AS_MESSAGE_FD>/dev/null\nfi\n_LTEOF\n\ncat >>\"$CONFIG_LT\" <<_LTEOF\n_LT_OUTPUT_LIBTOOL_COMMANDS_INIT\n_LTEOF\n\ncat >>\"$CONFIG_LT\" <<\\_LTEOF\nAC_MSG_NOTICE([creating $ofile])\n_LT_OUTPUT_LIBTOOL_COMMANDS\nAS_EXIT(0)\n_LTEOF\nchmod +x \"$CONFIG_LT\"\n\n# configure is writing to config.log, but config.lt does its own redirection,\n# appending to config.log, which fails on DOS, as config.log is still kept\n# open by configure.  Here we exec the FD to /dev/null, effectively closing\n# config.log, so it can be properly (re)opened and appended to by config.lt.\nlt_cl_success=:\ntest yes = \"$silent\" &&\n  lt_config_lt_args=\"$lt_config_lt_args --quiet\"\nexec AS_MESSAGE_LOG_FD>/dev/null\n$SHELL \"$CONFIG_LT\" $lt_config_lt_args || lt_cl_success=false\nexec AS_MESSAGE_LOG_FD>>config.log\n$lt_cl_success || AS_EXIT(1)\n])# LT_OUTPUT\n\n\n# _LT_CONFIG(TAG)\n# ---------------\n# If TAG is the built-in tag, create an initial libtool script with a\n# default configuration from the untagged config vars.  Otherwise add code\n# to config.status for appending the configuration named by TAG from the\n# matching tagged config vars.\nm4_defun([_LT_CONFIG],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\n_LT_CONFIG_SAVE_COMMANDS([\n  m4_define([_LT_TAG], m4_if([$1], [], [C], [$1]))dnl\n  m4_if(_LT_TAG, [C], [\n    # See if we are running on zsh, and set the options that allow our\n    # commands through without removal of \\ escapes.\n    if test -n \"${ZSH_VERSION+set}\"; then\n      setopt NO_GLOB_SUBST\n    fi\n\n    cfgfile=${ofile}T\n    trap \"$RM \\\"$cfgfile\\\"; exit 1\" 1 2 15\n    $RM \"$cfgfile\"\n\n    cat <<_LT_EOF >> \"$cfgfile\"\n#! $SHELL\n# Generated automatically by $as_me ($PACKAGE) $VERSION\n# Libtool was configured on host `(hostname || uname -n) 2>/dev/null | sed 1q`:\n# NOTE: Changes made to this file will be lost: look at ltmain.sh.\n\n# Provide generalized library-building support services.\n# Written by Gordon Matzigkeit, 1996\n\n_LT_COPYING\n_LT_LIBTOOL_TAGS\n\n# Configured defaults for sys_lib_dlsearch_path munging.\n: \\${LT_SYS_LIBRARY_PATH=\"$configure_time_lt_sys_library_path\"}\n\n# ### BEGIN LIBTOOL CONFIG\n_LT_LIBTOOL_CONFIG_VARS\n_LT_LIBTOOL_TAG_VARS\n# ### END LIBTOOL CONFIG\n\n_LT_EOF\n\n    cat <<'_LT_EOF' >> \"$cfgfile\"\n\n# ### BEGIN FUNCTIONS SHARED WITH CONFIGURE\n\n_LT_PREPARE_MUNGE_PATH_LIST\n_LT_PREPARE_CC_BASENAME\n\n# ### END FUNCTIONS SHARED WITH CONFIGURE\n\n_LT_EOF\n\n  case $host_os in\n  aix3*)\n    cat <<\\_LT_EOF >> \"$cfgfile\"\n# AIX sometimes has problems with the GCC collect2 program.  For some\n# reason, if we set the COLLECT_NAMES environment variable, the problems\n# vanish in a puff of smoke.\nif test set != \"${COLLECT_NAMES+set}\"; then\n  COLLECT_NAMES=\n  export COLLECT_NAMES\nfi\n_LT_EOF\n    ;;\n  esac\n\n  _LT_PROG_LTMAIN\n\n  # We use sed instead of cat because bash on DJGPP gets confused if\n  # if finds mixed CR/LF and LF-only lines.  Since sed operates in\n  # text mode, it properly converts lines to CR/LF.  This bash problem\n  # is reportedly fixed, but why not run on old versions too?\n  sed '$q' \"$ltmain\" >> \"$cfgfile\" \\\n     || (rm -f \"$cfgfile\"; exit 1)\n\n   mv -f \"$cfgfile\" \"$ofile\" ||\n    (rm -f \"$ofile\" && cp \"$cfgfile\" \"$ofile\" && rm -f \"$cfgfile\")\n  chmod +x \"$ofile\"\n],\n[cat <<_LT_EOF >> \"$ofile\"\n\ndnl Unfortunately we have to use $1 here, since _LT_TAG is not expanded\ndnl in a comment (ie after a #).\n# ### BEGIN LIBTOOL TAG CONFIG: $1\n_LT_LIBTOOL_TAG_VARS(_LT_TAG)\n# ### END LIBTOOL TAG CONFIG: $1\n_LT_EOF\n])dnl /m4_if\n],\n[m4_if([$1], [], [\n    PACKAGE='$PACKAGE'\n    VERSION='$VERSION'\n    RM='$RM'\n    ofile='$ofile'], [])\n])dnl /_LT_CONFIG_SAVE_COMMANDS\n])# _LT_CONFIG\n\n\n# LT_SUPPORTED_TAG(TAG)\n# ---------------------\n# Trace this macro to discover what tags are supported by the libtool\n# --tag option, using:\n#    autoconf --trace 'LT_SUPPORTED_TAG:$1'\nAC_DEFUN([LT_SUPPORTED_TAG], [])\n\n\n# C support is built-in for now\nm4_define([_LT_LANG_C_enabled], [])\nm4_define([_LT_TAGS], [])\n\n\n# LT_LANG(LANG)\n# -------------\n# Enable libtool support for the given language if not already enabled.\nAC_DEFUN([LT_LANG],\n[AC_BEFORE([$0], [LT_OUTPUT])dnl\nm4_case([$1],\n  [C],\t\t\t[_LT_LANG(C)],\n  [C++],\t\t[_LT_LANG(CXX)],\n  [Go],\t\t\t[_LT_LANG(GO)],\n  [Java],\t\t[_LT_LANG(GCJ)],\n  [Fortran 77],\t\t[_LT_LANG(F77)],\n  [Fortran],\t\t[_LT_LANG(FC)],\n  [Windows Resource],\t[_LT_LANG(RC)],\n  [m4_ifdef([_LT_LANG_]$1[_CONFIG],\n    [_LT_LANG($1)],\n    [m4_fatal([$0: unsupported language: \"$1\"])])])dnl\n])# LT_LANG\n\n\n# _LT_LANG(LANGNAME)\n# ------------------\nm4_defun([_LT_LANG],\n[m4_ifdef([_LT_LANG_]$1[_enabled], [],\n  [LT_SUPPORTED_TAG([$1])dnl\n  m4_append([_LT_TAGS], [$1 ])dnl\n  m4_define([_LT_LANG_]$1[_enabled], [])dnl\n  _LT_LANG_$1_CONFIG($1)])dnl\n])# _LT_LANG\n\n\nm4_ifndef([AC_PROG_GO], [\n############################################################\n# NOTE: This macro has been submitted for inclusion into   #\n#  GNU Autoconf as AC_PROG_GO.  When it is available in    #\n#  a released version of Autoconf we should remove this    #\n#  macro and use it instead.                               #\n############################################################\nm4_defun([AC_PROG_GO],\n[AC_LANG_PUSH(Go)dnl\nAC_ARG_VAR([GOC],     [Go compiler command])dnl\nAC_ARG_VAR([GOFLAGS], [Go compiler flags])dnl\n_AC_ARG_VAR_LDFLAGS()dnl\nAC_CHECK_TOOL(GOC, gccgo)\nif test -z \"$GOC\"; then\n  if test -n \"$ac_tool_prefix\"; then\n    AC_CHECK_PROG(GOC, [${ac_tool_prefix}gccgo], [${ac_tool_prefix}gccgo])\n  fi\nfi\nif test -z \"$GOC\"; then\n  AC_CHECK_PROG(GOC, gccgo, gccgo, false)\nfi\n])#m4_defun\n])#m4_ifndef\n\n\n# _LT_LANG_DEFAULT_CONFIG\n# -----------------------\nm4_defun([_LT_LANG_DEFAULT_CONFIG],\n[AC_PROVIDE_IFELSE([AC_PROG_CXX],\n  [LT_LANG(CXX)],\n  [m4_define([AC_PROG_CXX], defn([AC_PROG_CXX])[LT_LANG(CXX)])])\n\nAC_PROVIDE_IFELSE([AC_PROG_F77],\n  [LT_LANG(F77)],\n  [m4_define([AC_PROG_F77], defn([AC_PROG_F77])[LT_LANG(F77)])])\n\nAC_PROVIDE_IFELSE([AC_PROG_FC],\n  [LT_LANG(FC)],\n  [m4_define([AC_PROG_FC], defn([AC_PROG_FC])[LT_LANG(FC)])])\n\ndnl The call to [A][M_PROG_GCJ] is quoted like that to stop aclocal\ndnl pulling things in needlessly.\nAC_PROVIDE_IFELSE([AC_PROG_GCJ],\n  [LT_LANG(GCJ)],\n  [AC_PROVIDE_IFELSE([A][M_PROG_GCJ],\n    [LT_LANG(GCJ)],\n    [AC_PROVIDE_IFELSE([LT_PROG_GCJ],\n      [LT_LANG(GCJ)],\n      [m4_ifdef([AC_PROG_GCJ],\n\t[m4_define([AC_PROG_GCJ], defn([AC_PROG_GCJ])[LT_LANG(GCJ)])])\n       m4_ifdef([A][M_PROG_GCJ],\n\t[m4_define([A][M_PROG_GCJ], defn([A][M_PROG_GCJ])[LT_LANG(GCJ)])])\n       m4_ifdef([LT_PROG_GCJ],\n\t[m4_define([LT_PROG_GCJ], defn([LT_PROG_GCJ])[LT_LANG(GCJ)])])])])])\n\nAC_PROVIDE_IFELSE([AC_PROG_GO],\n  [LT_LANG(GO)],\n  [m4_define([AC_PROG_GO], defn([AC_PROG_GO])[LT_LANG(GO)])])\n\nAC_PROVIDE_IFELSE([LT_PROG_RC],\n  [LT_LANG(RC)],\n  [m4_define([LT_PROG_RC], defn([LT_PROG_RC])[LT_LANG(RC)])])\n])# _LT_LANG_DEFAULT_CONFIG\n\n# Obsolete macros:\nAU_DEFUN([AC_LIBTOOL_CXX], [LT_LANG(C++)])\nAU_DEFUN([AC_LIBTOOL_F77], [LT_LANG(Fortran 77)])\nAU_DEFUN([AC_LIBTOOL_FC], [LT_LANG(Fortran)])\nAU_DEFUN([AC_LIBTOOL_GCJ], [LT_LANG(Java)])\nAU_DEFUN([AC_LIBTOOL_RC], [LT_LANG(Windows Resource)])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_CXX], [])\ndnl AC_DEFUN([AC_LIBTOOL_F77], [])\ndnl AC_DEFUN([AC_LIBTOOL_FC], [])\ndnl AC_DEFUN([AC_LIBTOOL_GCJ], [])\ndnl AC_DEFUN([AC_LIBTOOL_RC], [])\n\n\n# _LT_TAG_COMPILER\n# ----------------\nm4_defun([_LT_TAG_COMPILER],\n[AC_REQUIRE([AC_PROG_CC])dnl\n\n_LT_DECL([LTCC], [CC], [1], [A C compiler])dnl\n_LT_DECL([LTCFLAGS], [CFLAGS], [1], [LTCC compiler flags])dnl\n_LT_TAGDECL([CC], [compiler], [1], [A language specific compiler])dnl\n_LT_TAGDECL([with_gcc], [GCC], [0], [Is the compiler the GNU compiler?])dnl\n\n# If no C compiler was specified, use CC.\nLTCC=${LTCC-\"$CC\"}\n\n# If no C compiler flags were specified, use CFLAGS.\nLTCFLAGS=${LTCFLAGS-\"$CFLAGS\"}\n\n# Allow CC to be a program name with arguments.\ncompiler=$CC\n])# _LT_TAG_COMPILER\n\n\n# _LT_COMPILER_BOILERPLATE\n# ------------------------\n# Check for compiler boilerplate output or warnings with\n# the simple compiler test code.\nm4_defun([_LT_COMPILER_BOILERPLATE],\n[m4_require([_LT_DECL_SED])dnl\nac_outfile=conftest.$ac_objext\necho \"$lt_simple_compile_test_code\" >conftest.$ac_ext\neval \"$ac_compile\" 2>&1 >/dev/null | $SED '/^$/d; /^ *+/d' >conftest.err\n_lt_compiler_boilerplate=`cat conftest.err`\n$RM conftest*\n])# _LT_COMPILER_BOILERPLATE\n\n\n# _LT_LINKER_BOILERPLATE\n# ----------------------\n# Check for linker boilerplate output or warnings with\n# the simple link test code.\nm4_defun([_LT_LINKER_BOILERPLATE],\n[m4_require([_LT_DECL_SED])dnl\nac_outfile=conftest.$ac_objext\necho \"$lt_simple_link_test_code\" >conftest.$ac_ext\neval \"$ac_link\" 2>&1 >/dev/null | $SED '/^$/d; /^ *+/d' >conftest.err\n_lt_linker_boilerplate=`cat conftest.err`\n$RM -r conftest*\n])# _LT_LINKER_BOILERPLATE\n\n# _LT_REQUIRED_DARWIN_CHECKS\n# -------------------------\nm4_defun_once([_LT_REQUIRED_DARWIN_CHECKS],[\n  case $host_os in\n    rhapsody* | darwin*)\n    AC_CHECK_TOOL([DSYMUTIL], [dsymutil], [:])\n    AC_CHECK_TOOL([NMEDIT], [nmedit], [:])\n    AC_CHECK_TOOL([LIPO], [lipo], [:])\n    AC_CHECK_TOOL([OTOOL], [otool], [:])\n    AC_CHECK_TOOL([OTOOL64], [otool64], [:])\n    _LT_DECL([], [DSYMUTIL], [1],\n      [Tool to manipulate archived DWARF debug symbol files on Mac OS X])\n    _LT_DECL([], [NMEDIT], [1],\n      [Tool to change global to local symbols on Mac OS X])\n    _LT_DECL([], [LIPO], [1],\n      [Tool to manipulate fat objects and archives on Mac OS X])\n    _LT_DECL([], [OTOOL], [1],\n      [ldd/readelf like tool for Mach-O binaries on Mac OS X])\n    _LT_DECL([], [OTOOL64], [1],\n      [ldd/readelf like tool for 64 bit Mach-O binaries on Mac OS X 10.4])\n\n    AC_CACHE_CHECK([for -single_module linker flag],[lt_cv_apple_cc_single_mod],\n      [lt_cv_apple_cc_single_mod=no\n      if test -z \"$LT_MULTI_MODULE\"; then\n\t# By default we will add the -single_module flag. You can override\n\t# by either setting the environment variable LT_MULTI_MODULE\n\t# non-empty at configure time, or by adding -multi_module to the\n\t# link flags.\n\trm -rf libconftest.dylib*\n\techo \"int foo(void){return 1;}\" > conftest.c\n\techo \"$LTCC $LTCFLAGS $LDFLAGS -o libconftest.dylib \\\n-dynamiclib -Wl,-single_module conftest.c\" >&AS_MESSAGE_LOG_FD\n\t$LTCC $LTCFLAGS $LDFLAGS -o libconftest.dylib \\\n\t  -dynamiclib -Wl,-single_module conftest.c 2>conftest.err\n        _lt_result=$?\n\t# If there is a non-empty error log, and \"single_module\"\n\t# appears in it, assume the flag caused a linker warning\n        if test -s conftest.err && $GREP single_module conftest.err; then\n\t  cat conftest.err >&AS_MESSAGE_LOG_FD\n\t# Otherwise, if the output was created with a 0 exit code from\n\t# the compiler, it worked.\n\telif test -f libconftest.dylib && test 0 = \"$_lt_result\"; then\n\t  lt_cv_apple_cc_single_mod=yes\n\telse\n\t  cat conftest.err >&AS_MESSAGE_LOG_FD\n\tfi\n\trm -rf libconftest.dylib*\n\trm -f conftest.*\n      fi])\n\n    AC_CACHE_CHECK([for -exported_symbols_list linker flag],\n      [lt_cv_ld_exported_symbols_list],\n      [lt_cv_ld_exported_symbols_list=no\n      save_LDFLAGS=$LDFLAGS\n      echo \"_main\" > conftest.sym\n      LDFLAGS=\"$LDFLAGS -Wl,-exported_symbols_list,conftest.sym\"\n      AC_LINK_IFELSE([AC_LANG_PROGRAM([],[])],\n\t[lt_cv_ld_exported_symbols_list=yes],\n\t[lt_cv_ld_exported_symbols_list=no])\n\tLDFLAGS=$save_LDFLAGS\n    ])\n\n    AC_CACHE_CHECK([for -force_load linker flag],[lt_cv_ld_force_load],\n      [lt_cv_ld_force_load=no\n      cat > conftest.c << _LT_EOF\nint forced_loaded() { return 2;}\n_LT_EOF\n      echo \"$LTCC $LTCFLAGS -c -o conftest.o conftest.c\" >&AS_MESSAGE_LOG_FD\n      $LTCC $LTCFLAGS -c -o conftest.o conftest.c 2>&AS_MESSAGE_LOG_FD\n      echo \"$AR cru libconftest.a conftest.o\" >&AS_MESSAGE_LOG_FD\n      $AR cru libconftest.a conftest.o 2>&AS_MESSAGE_LOG_FD\n      echo \"$RANLIB libconftest.a\" >&AS_MESSAGE_LOG_FD\n      $RANLIB libconftest.a 2>&AS_MESSAGE_LOG_FD\n      cat > conftest.c << _LT_EOF\nint main() { return 0;}\n_LT_EOF\n      echo \"$LTCC $LTCFLAGS $LDFLAGS -o conftest conftest.c -Wl,-force_load,./libconftest.a\" >&AS_MESSAGE_LOG_FD\n      $LTCC $LTCFLAGS $LDFLAGS -o conftest conftest.c -Wl,-force_load,./libconftest.a 2>conftest.err\n      _lt_result=$?\n      if test -s conftest.err && $GREP force_load conftest.err; then\n\tcat conftest.err >&AS_MESSAGE_LOG_FD\n      elif test -f conftest && test 0 = \"$_lt_result\" && $GREP forced_load conftest >/dev/null 2>&1; then\n\tlt_cv_ld_force_load=yes\n      else\n\tcat conftest.err >&AS_MESSAGE_LOG_FD\n      fi\n        rm -f conftest.err libconftest.a conftest conftest.c\n        rm -rf conftest.dSYM\n    ])\n    case $host_os in\n    rhapsody* | darwin1.[[012]])\n      _lt_dar_allow_undefined='$wl-undefined ${wl}suppress' ;;\n    darwin1.*)\n      _lt_dar_allow_undefined='$wl-flat_namespace $wl-undefined ${wl}suppress' ;;\n    darwin*) # darwin 5.x on\n      # if running on 10.5 or later, the deployment target defaults\n      # to the OS version, if on x86, and 10.4, the deployment\n      # target defaults to 10.4. Don't you love it?\n      case ${MACOSX_DEPLOYMENT_TARGET-10.0},$host in\n\t10.0,*86*-darwin8*|10.0,*-darwin[[91]]*)\n\t  _lt_dar_allow_undefined='$wl-undefined ${wl}dynamic_lookup' ;;\n\t10.[[012]][[,.]]*)\n\t  _lt_dar_allow_undefined='$wl-flat_namespace $wl-undefined ${wl}suppress' ;;\n\t10.*)\n\t  _lt_dar_allow_undefined='$wl-undefined ${wl}dynamic_lookup' ;;\n      esac\n    ;;\n  esac\n    if test yes = \"$lt_cv_apple_cc_single_mod\"; then\n      _lt_dar_single_mod='$single_module'\n    fi\n    if test yes = \"$lt_cv_ld_exported_symbols_list\"; then\n      _lt_dar_export_syms=' $wl-exported_symbols_list,$output_objdir/$libname-symbols.expsym'\n    else\n      _lt_dar_export_syms='~$NMEDIT -s $output_objdir/$libname-symbols.expsym $lib'\n    fi\n    if test : != \"$DSYMUTIL\" && test no = \"$lt_cv_ld_force_load\"; then\n      _lt_dsymutil='~$DSYMUTIL $lib || :'\n    else\n      _lt_dsymutil=\n    fi\n    ;;\n  esac\n])\n\n\n# _LT_DARWIN_LINKER_FEATURES([TAG])\n# ---------------------------------\n# Checks for linker and compiler features on darwin\nm4_defun([_LT_DARWIN_LINKER_FEATURES],\n[\n  m4_require([_LT_REQUIRED_DARWIN_CHECKS])\n  _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n  _LT_TAGVAR(hardcode_direct, $1)=no\n  _LT_TAGVAR(hardcode_automatic, $1)=yes\n  _LT_TAGVAR(hardcode_shlibpath_var, $1)=unsupported\n  if test yes = \"$lt_cv_ld_force_load\"; then\n    _LT_TAGVAR(whole_archive_flag_spec, $1)='`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience $wl-force_load,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"`'\n    m4_case([$1], [F77], [_LT_TAGVAR(compiler_needs_object, $1)=yes],\n                  [FC],  [_LT_TAGVAR(compiler_needs_object, $1)=yes])\n  else\n    _LT_TAGVAR(whole_archive_flag_spec, $1)=''\n  fi\n  _LT_TAGVAR(link_all_deplibs, $1)=yes\n  _LT_TAGVAR(allow_undefined_flag, $1)=$_lt_dar_allow_undefined\n  case $cc_basename in\n     ifort*|nagfor*) _lt_dar_can_shared=yes ;;\n     *) _lt_dar_can_shared=$GCC ;;\n  esac\n  if test yes = \"$_lt_dar_can_shared\"; then\n    output_verbose_link_cmd=func_echo_all\n    _LT_TAGVAR(archive_cmds, $1)=\"\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$libobjs \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring $_lt_dar_single_mod$_lt_dsymutil\"\n    _LT_TAGVAR(module_cmds, $1)=\"\\$CC \\$allow_undefined_flag -o \\$lib -bundle \\$libobjs \\$deplibs \\$compiler_flags$_lt_dsymutil\"\n    _LT_TAGVAR(archive_expsym_cmds, $1)=\"sed 's|^|_|' < \\$export_symbols > \\$output_objdir/\\$libname-symbols.expsym~\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$libobjs \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring $_lt_dar_single_mod$_lt_dar_export_syms$_lt_dsymutil\"\n    _LT_TAGVAR(module_expsym_cmds, $1)=\"sed -e 's|^|_|' < \\$export_symbols > \\$output_objdir/\\$libname-symbols.expsym~\\$CC \\$allow_undefined_flag -o \\$lib -bundle \\$libobjs \\$deplibs \\$compiler_flags$_lt_dar_export_syms$_lt_dsymutil\"\n    m4_if([$1], [CXX],\n[   if test yes != \"$lt_cv_apple_cc_single_mod\"; then\n      _LT_TAGVAR(archive_cmds, $1)=\"\\$CC -r -keep_private_externs -nostdlib -o \\$lib-master.o \\$libobjs~\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$lib-master.o \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring$_lt_dsymutil\"\n      _LT_TAGVAR(archive_expsym_cmds, $1)=\"sed 's|^|_|' < \\$export_symbols > \\$output_objdir/\\$libname-symbols.expsym~\\$CC -r -keep_private_externs -nostdlib -o \\$lib-master.o \\$libobjs~\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$lib-master.o \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring$_lt_dar_export_syms$_lt_dsymutil\"\n    fi\n],[])\n  else\n  _LT_TAGVAR(ld_shlibs, $1)=no\n  fi\n])\n\n# _LT_SYS_MODULE_PATH_AIX([TAGNAME])\n# ----------------------------------\n# Links a minimal program and checks the executable\n# for the system default hardcoded library path. In most cases,\n# this is /usr/lib:/lib, but when the MPI compilers are used\n# the location of the communication and MPI libs are included too.\n# If we don't find anything, use the default library path according\n# to the aix ld manual.\n# Store the results from the different compilers for each TAGNAME.\n# Allow to override them for all tags through lt_cv_aix_libpath.\nm4_defun([_LT_SYS_MODULE_PATH_AIX],\n[m4_require([_LT_DECL_SED])dnl\nif test set = \"${lt_cv_aix_libpath+set}\"; then\n  aix_libpath=$lt_cv_aix_libpath\nelse\n  AC_CACHE_VAL([_LT_TAGVAR([lt_cv_aix_libpath_], [$1])],\n  [AC_LINK_IFELSE([AC_LANG_PROGRAM],[\n  lt_aix_libpath_sed='[\n      /Import File Strings/,/^$/ {\n\t  /^0/ {\n\t      s/^0  *\\([^ ]*\\) *$/\\1/\n\t      p\n\t  }\n      }]'\n  _LT_TAGVAR([lt_cv_aix_libpath_], [$1])=`dump -H conftest$ac_exeext 2>/dev/null | $SED -n -e \"$lt_aix_libpath_sed\"`\n  # Check for a 64-bit object if we didn't find anything.\n  if test -z \"$_LT_TAGVAR([lt_cv_aix_libpath_], [$1])\"; then\n    _LT_TAGVAR([lt_cv_aix_libpath_], [$1])=`dump -HX64 conftest$ac_exeext 2>/dev/null | $SED -n -e \"$lt_aix_libpath_sed\"`\n  fi],[])\n  if test -z \"$_LT_TAGVAR([lt_cv_aix_libpath_], [$1])\"; then\n    _LT_TAGVAR([lt_cv_aix_libpath_], [$1])=/usr/lib:/lib\n  fi\n  ])\n  aix_libpath=$_LT_TAGVAR([lt_cv_aix_libpath_], [$1])\nfi\n])# _LT_SYS_MODULE_PATH_AIX\n\n\n# _LT_SHELL_INIT(ARG)\n# -------------------\nm4_define([_LT_SHELL_INIT],\n[m4_divert_text([M4SH-INIT], [$1\n])])# _LT_SHELL_INIT\n\n\n\n# _LT_PROG_ECHO_BACKSLASH\n# -----------------------\n# Find how we can fake an echo command that does not interpret backslash.\n# In particular, with Autoconf 2.60 or later we add some code to the start\n# of the generated configure script that will find a shell with a builtin\n# printf (that we can use as an echo command).\nm4_defun([_LT_PROG_ECHO_BACKSLASH],\n[ECHO='\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\nECHO=$ECHO$ECHO$ECHO$ECHO$ECHO\nECHO=$ECHO$ECHO$ECHO$ECHO$ECHO$ECHO\n\nAC_MSG_CHECKING([how to print strings])\n# Test print first, because it will be a builtin if present.\nif test \"X`( print -r -- -n ) 2>/dev/null`\" = X-n && \\\n   test \"X`print -r -- $ECHO 2>/dev/null`\" = \"X$ECHO\"; then\n  ECHO='print -r --'\nelif test \"X`printf %s $ECHO 2>/dev/null`\" = \"X$ECHO\"; then\n  ECHO='printf %s\\n'\nelse\n  # Use this function as a fallback that always works.\n  func_fallback_echo ()\n  {\n    eval 'cat <<_LTECHO_EOF\n$[]1\n_LTECHO_EOF'\n  }\n  ECHO='func_fallback_echo'\nfi\n\n# func_echo_all arg...\n# Invoke $ECHO with all args, space-separated.\nfunc_echo_all ()\n{\n    $ECHO \"$*\"\n}\n\ncase $ECHO in\n  printf*) AC_MSG_RESULT([printf]) ;;\n  print*) AC_MSG_RESULT([print -r]) ;;\n  *) AC_MSG_RESULT([cat]) ;;\nesac\n\nm4_ifdef([_AS_DETECT_SUGGESTED],\n[_AS_DETECT_SUGGESTED([\n  test -n \"${ZSH_VERSION+set}${BASH_VERSION+set}\" || (\n    ECHO='\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\n    ECHO=$ECHO$ECHO$ECHO$ECHO$ECHO\n    ECHO=$ECHO$ECHO$ECHO$ECHO$ECHO$ECHO\n    PATH=/empty FPATH=/empty; export PATH FPATH\n    test \"X`printf %s $ECHO`\" = \"X$ECHO\" \\\n      || test \"X`print -r -- $ECHO`\" = \"X$ECHO\" )])])\n\n_LT_DECL([], [SHELL], [1], [Shell to use when invoking shell scripts])\n_LT_DECL([], [ECHO], [1], [An echo program that protects backslashes])\n])# _LT_PROG_ECHO_BACKSLASH\n\n\n# _LT_WITH_SYSROOT\n# ----------------\nAC_DEFUN([_LT_WITH_SYSROOT],\n[AC_MSG_CHECKING([for sysroot])\nAC_ARG_WITH([sysroot],\n[AS_HELP_STRING([--with-sysroot@<:@=DIR@:>@],\n  [Search for dependent libraries within DIR (or the compiler's sysroot\n   if not specified).])],\n[], [with_sysroot=no])\n\ndnl lt_sysroot will always be passed unquoted.  We quote it here\ndnl in case the user passed a directory name.\nlt_sysroot=\ncase $with_sysroot in #(\n yes)\n   if test yes = \"$GCC\"; then\n     lt_sysroot=`$CC --print-sysroot 2>/dev/null`\n   fi\n   ;; #(\n /*)\n   lt_sysroot=`echo \"$with_sysroot\" | sed -e \"$sed_quote_subst\"`\n   ;; #(\n no|'')\n   ;; #(\n *)\n   AC_MSG_RESULT([$with_sysroot])\n   AC_MSG_ERROR([The sysroot must be an absolute path.])\n   ;;\nesac\n\n AC_MSG_RESULT([${lt_sysroot:-no}])\n_LT_DECL([], [lt_sysroot], [0], [The root where to search for ]dnl\n[dependent libraries, and where our libraries should be installed.])])\n\n# _LT_ENABLE_LOCK\n# ---------------\nm4_defun([_LT_ENABLE_LOCK],\n[AC_ARG_ENABLE([libtool-lock],\n  [AS_HELP_STRING([--disable-libtool-lock],\n    [avoid locking (might break parallel builds)])])\ntest no = \"$enable_libtool_lock\" || enable_libtool_lock=yes\n\n# Some flags need to be propagated to the compiler or linker for good\n# libtool support.\ncase $host in\nia64-*-hpux*)\n  # Find out what ABI is being produced by ac_compile, and set mode\n  # options accordingly.\n  echo 'int i;' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    case `/usr/bin/file conftest.$ac_objext` in\n      *ELF-32*)\n\tHPUX_IA64_MODE=32\n\t;;\n      *ELF-64*)\n\tHPUX_IA64_MODE=64\n\t;;\n    esac\n  fi\n  rm -rf conftest*\n  ;;\n*-*-irix6*)\n  # Find out what ABI is being produced by ac_compile, and set linker\n  # options accordingly.\n  echo '[#]line '$LINENO' \"configure\"' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    if test yes = \"$lt_cv_prog_gnu_ld\"; then\n      case `/usr/bin/file conftest.$ac_objext` in\n\t*32-bit*)\n\t  LD=\"${LD-ld} -melf32bsmip\"\n\t  ;;\n\t*N32*)\n\t  LD=\"${LD-ld} -melf32bmipn32\"\n\t  ;;\n\t*64-bit*)\n\t  LD=\"${LD-ld} -melf64bmip\"\n\t;;\n      esac\n    else\n      case `/usr/bin/file conftest.$ac_objext` in\n\t*32-bit*)\n\t  LD=\"${LD-ld} -32\"\n\t  ;;\n\t*N32*)\n\t  LD=\"${LD-ld} -n32\"\n\t  ;;\n\t*64-bit*)\n\t  LD=\"${LD-ld} -64\"\n\t  ;;\n      esac\n    fi\n  fi\n  rm -rf conftest*\n  ;;\n\nmips64*-*linux*)\n  # Find out what ABI is being produced by ac_compile, and set linker\n  # options accordingly.\n  echo '[#]line '$LINENO' \"configure\"' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    emul=elf\n    case `/usr/bin/file conftest.$ac_objext` in\n      *32-bit*)\n\temul=\"${emul}32\"\n\t;;\n      *64-bit*)\n\temul=\"${emul}64\"\n\t;;\n    esac\n    case `/usr/bin/file conftest.$ac_objext` in\n      *MSB*)\n\temul=\"${emul}btsmip\"\n\t;;\n      *LSB*)\n\temul=\"${emul}ltsmip\"\n\t;;\n    esac\n    case `/usr/bin/file conftest.$ac_objext` in\n      *N32*)\n\temul=\"${emul}n32\"\n\t;;\n    esac\n    LD=\"${LD-ld} -m $emul\"\n  fi\n  rm -rf conftest*\n  ;;\n\nx86_64-*kfreebsd*-gnu|x86_64-*linux*|powerpc*-*linux*| \\\ns390*-*linux*|s390*-*tpf*|sparc*-*linux*)\n  # Find out what ABI is being produced by ac_compile, and set linker\n  # options accordingly.  Note that the listed cases only cover the\n  # situations where additional linker options are needed (such as when\n  # doing 32-bit compilation for a host where ld defaults to 64-bit, or\n  # vice versa); the common cases where no linker options are needed do\n  # not appear in the list.\n  echo 'int i;' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    case `/usr/bin/file conftest.o` in\n      *32-bit*)\n\tcase $host in\n\t  x86_64-*kfreebsd*-gnu)\n\t    LD=\"${LD-ld} -m elf_i386_fbsd\"\n\t    ;;\n\t  x86_64-*linux*)\n\t    case `/usr/bin/file conftest.o` in\n\t      *x86-64*)\n\t\tLD=\"${LD-ld} -m elf32_x86_64\"\n\t\t;;\n\t      *)\n\t\tLD=\"${LD-ld} -m elf_i386\"\n\t\t;;\n\t    esac\n\t    ;;\n\t  powerpc64le-*linux*)\n\t    LD=\"${LD-ld} -m elf32lppclinux\"\n\t    ;;\n\t  powerpc64-*linux*)\n\t    LD=\"${LD-ld} -m elf32ppclinux\"\n\t    ;;\n\t  s390x-*linux*)\n\t    LD=\"${LD-ld} -m elf_s390\"\n\t    ;;\n\t  sparc64-*linux*)\n\t    LD=\"${LD-ld} -m elf32_sparc\"\n\t    ;;\n\tesac\n\t;;\n      *64-bit*)\n\tcase $host in\n\t  x86_64-*kfreebsd*-gnu)\n\t    LD=\"${LD-ld} -m elf_x86_64_fbsd\"\n\t    ;;\n\t  x86_64-*linux*)\n\t    LD=\"${LD-ld} -m elf_x86_64\"\n\t    ;;\n\t  powerpcle-*linux*)\n\t    LD=\"${LD-ld} -m elf64lppc\"\n\t    ;;\n\t  powerpc-*linux*)\n\t    LD=\"${LD-ld} -m elf64ppc\"\n\t    ;;\n\t  s390*-*linux*|s390*-*tpf*)\n\t    LD=\"${LD-ld} -m elf64_s390\"\n\t    ;;\n\t  sparc*-*linux*)\n\t    LD=\"${LD-ld} -m elf64_sparc\"\n\t    ;;\n\tesac\n\t;;\n    esac\n  fi\n  rm -rf conftest*\n  ;;\n\n*-*-sco3.2v5*)\n  # On SCO OpenServer 5, we need -belf to get full-featured binaries.\n  SAVE_CFLAGS=$CFLAGS\n  CFLAGS=\"$CFLAGS -belf\"\n  AC_CACHE_CHECK([whether the C compiler needs -belf], lt_cv_cc_needs_belf,\n    [AC_LANG_PUSH(C)\n     AC_LINK_IFELSE([AC_LANG_PROGRAM([[]],[[]])],[lt_cv_cc_needs_belf=yes],[lt_cv_cc_needs_belf=no])\n     AC_LANG_POP])\n  if test yes != \"$lt_cv_cc_needs_belf\"; then\n    # this is probably gcc 2.8.0, egcs 1.0 or newer; no need for -belf\n    CFLAGS=$SAVE_CFLAGS\n  fi\n  ;;\n*-*solaris*)\n  # Find out what ABI is being produced by ac_compile, and set linker\n  # options accordingly.\n  echo 'int i;' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    case `/usr/bin/file conftest.o` in\n    *64-bit*)\n      case $lt_cv_prog_gnu_ld in\n      yes*)\n        case $host in\n        i?86-*-solaris*|x86_64-*-solaris*)\n          LD=\"${LD-ld} -m elf_x86_64\"\n          ;;\n        sparc*-*-solaris*)\n          LD=\"${LD-ld} -m elf64_sparc\"\n          ;;\n        esac\n        # GNU ld 2.21 introduced _sol2 emulations.  Use them if available.\n        if ${LD-ld} -V | grep _sol2 >/dev/null 2>&1; then\n          LD=${LD-ld}_sol2\n        fi\n        ;;\n      *)\n\tif ${LD-ld} -64 -r -o conftest2.o conftest.o >/dev/null 2>&1; then\n\t  LD=\"${LD-ld} -64\"\n\tfi\n\t;;\n      esac\n      ;;\n    esac\n  fi\n  rm -rf conftest*\n  ;;\nesac\n\nneed_locks=$enable_libtool_lock\n])# _LT_ENABLE_LOCK\n\n\n# _LT_PROG_AR\n# -----------\nm4_defun([_LT_PROG_AR],\n[AC_CHECK_TOOLS(AR, [ar], false)\n: ${AR=ar}\n: ${AR_FLAGS=cru}\n_LT_DECL([], [AR], [1], [The archiver])\n_LT_DECL([], [AR_FLAGS], [1], [Flags to create an archive])\n\nAC_CACHE_CHECK([for archiver @FILE support], [lt_cv_ar_at_file],\n  [lt_cv_ar_at_file=no\n   AC_COMPILE_IFELSE([AC_LANG_PROGRAM],\n     [echo conftest.$ac_objext > conftest.lst\n      lt_ar_try='$AR $AR_FLAGS libconftest.a @conftest.lst >&AS_MESSAGE_LOG_FD'\n      AC_TRY_EVAL([lt_ar_try])\n      if test 0 -eq \"$ac_status\"; then\n\t# Ensure the archiver fails upon bogus file names.\n\trm -f conftest.$ac_objext libconftest.a\n\tAC_TRY_EVAL([lt_ar_try])\n\tif test 0 -ne \"$ac_status\"; then\n          lt_cv_ar_at_file=@\n        fi\n      fi\n      rm -f conftest.* libconftest.a\n     ])\n  ])\n\nif test no = \"$lt_cv_ar_at_file\"; then\n  archiver_list_spec=\nelse\n  archiver_list_spec=$lt_cv_ar_at_file\nfi\n_LT_DECL([], [archiver_list_spec], [1],\n  [How to feed a file listing to the archiver])\n])# _LT_PROG_AR\n\n\n# _LT_CMD_OLD_ARCHIVE\n# -------------------\nm4_defun([_LT_CMD_OLD_ARCHIVE],\n[_LT_PROG_AR\n\nAC_CHECK_TOOL(STRIP, strip, :)\ntest -z \"$STRIP\" && STRIP=:\n_LT_DECL([], [STRIP], [1], [A symbol stripping program])\n\nAC_CHECK_TOOL(RANLIB, ranlib, :)\ntest -z \"$RANLIB\" && RANLIB=:\n_LT_DECL([], [RANLIB], [1],\n    [Commands used to install an old-style archive])\n\n# Determine commands to create old-style static archives.\nold_archive_cmds='$AR $AR_FLAGS $oldlib$oldobjs'\nold_postinstall_cmds='chmod 644 $oldlib'\nold_postuninstall_cmds=\n\nif test -n \"$RANLIB\"; then\n  case $host_os in\n  bitrig* | openbsd*)\n    old_postinstall_cmds=\"$old_postinstall_cmds~\\$RANLIB -t \\$tool_oldlib\"\n    ;;\n  *)\n    old_postinstall_cmds=\"$old_postinstall_cmds~\\$RANLIB \\$tool_oldlib\"\n    ;;\n  esac\n  old_archive_cmds=\"$old_archive_cmds~\\$RANLIB \\$tool_oldlib\"\nfi\n\ncase $host_os in\n  darwin*)\n    lock_old_archive_extraction=yes ;;\n  *)\n    lock_old_archive_extraction=no ;;\nesac\n_LT_DECL([], [old_postinstall_cmds], [2])\n_LT_DECL([], [old_postuninstall_cmds], [2])\n_LT_TAGDECL([], [old_archive_cmds], [2],\n    [Commands used to build an old-style archive])\n_LT_DECL([], [lock_old_archive_extraction], [0],\n    [Whether to use a lock for old archive extraction])\n])# _LT_CMD_OLD_ARCHIVE\n\n\n# _LT_COMPILER_OPTION(MESSAGE, VARIABLE-NAME, FLAGS,\n#\t\t[OUTPUT-FILE], [ACTION-SUCCESS], [ACTION-FAILURE])\n# ----------------------------------------------------------------\n# Check whether the given compiler option works\nAC_DEFUN([_LT_COMPILER_OPTION],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_SED])dnl\nAC_CACHE_CHECK([$1], [$2],\n  [$2=no\n   m4_if([$4], , [ac_outfile=conftest.$ac_objext], [ac_outfile=$4])\n   echo \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n   lt_compiler_flag=\"$3\"  ## exclude from sc_useless_quotes_in_assignment\n   # Insert the option either (1) after the last *FLAGS variable, or\n   # (2) before a word containing \"conftest.\", or (3) at the end.\n   # Note that $ac_compile itself does not contain backslashes and begins\n   # with a dollar sign (not a hyphen), so the echo should work correctly.\n   # The option is referenced via a variable to avoid confusing sed.\n   lt_compile=`echo \"$ac_compile\" | $SED \\\n   -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n   -e 's: [[^ ]]*conftest\\.: $lt_compiler_flag&:; t' \\\n   -e 's:$: $lt_compiler_flag:'`\n   (eval echo \"\\\"\\$as_me:$LINENO: $lt_compile\\\"\" >&AS_MESSAGE_LOG_FD)\n   (eval \"$lt_compile\" 2>conftest.err)\n   ac_status=$?\n   cat conftest.err >&AS_MESSAGE_LOG_FD\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&AS_MESSAGE_LOG_FD\n   if (exit $ac_status) && test -s \"$ac_outfile\"; then\n     # The compiler can only warn and ignore the option if not recognized\n     # So say no if there are warnings other than the usual output.\n     $ECHO \"$_lt_compiler_boilerplate\" | $SED '/^$/d' >conftest.exp\n     $SED '/^$/d; /^ *+/d' conftest.err >conftest.er2\n     if test ! -s conftest.er2 || diff conftest.exp conftest.er2 >/dev/null; then\n       $2=yes\n     fi\n   fi\n   $RM conftest*\n])\n\nif test yes = \"[$]$2\"; then\n    m4_if([$5], , :, [$5])\nelse\n    m4_if([$6], , :, [$6])\nfi\n])# _LT_COMPILER_OPTION\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_COMPILER_OPTION], [_LT_COMPILER_OPTION])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_COMPILER_OPTION], [])\n\n\n# _LT_LINKER_OPTION(MESSAGE, VARIABLE-NAME, FLAGS,\n#                  [ACTION-SUCCESS], [ACTION-FAILURE])\n# ----------------------------------------------------\n# Check whether the given linker option works\nAC_DEFUN([_LT_LINKER_OPTION],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_SED])dnl\nAC_CACHE_CHECK([$1], [$2],\n  [$2=no\n   save_LDFLAGS=$LDFLAGS\n   LDFLAGS=\"$LDFLAGS $3\"\n   echo \"$lt_simple_link_test_code\" > conftest.$ac_ext\n   if (eval $ac_link 2>conftest.err) && test -s conftest$ac_exeext; then\n     # The linker can only warn and ignore the option if not recognized\n     # So say no if there are warnings\n     if test -s conftest.err; then\n       # Append any errors to the config.log.\n       cat conftest.err 1>&AS_MESSAGE_LOG_FD\n       $ECHO \"$_lt_linker_boilerplate\" | $SED '/^$/d' > conftest.exp\n       $SED '/^$/d; /^ *+/d' conftest.err >conftest.er2\n       if diff conftest.exp conftest.er2 >/dev/null; then\n         $2=yes\n       fi\n     else\n       $2=yes\n     fi\n   fi\n   $RM -r conftest*\n   LDFLAGS=$save_LDFLAGS\n])\n\nif test yes = \"[$]$2\"; then\n    m4_if([$4], , :, [$4])\nelse\n    m4_if([$5], , :, [$5])\nfi\n])# _LT_LINKER_OPTION\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_LINKER_OPTION], [_LT_LINKER_OPTION])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_LINKER_OPTION], [])\n\n\n# LT_CMD_MAX_LEN\n#---------------\nAC_DEFUN([LT_CMD_MAX_LEN],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\n# find the maximum length of command line arguments\nAC_MSG_CHECKING([the maximum length of command line arguments])\nAC_CACHE_VAL([lt_cv_sys_max_cmd_len], [dnl\n  i=0\n  teststring=ABCD\n\n  case $build_os in\n  msdosdjgpp*)\n    # On DJGPP, this test can blow up pretty badly due to problems in libc\n    # (any single argument exceeding 2000 bytes causes a buffer overrun\n    # during glob expansion).  Even if it were fixed, the result of this\n    # check would be larger than it should be.\n    lt_cv_sys_max_cmd_len=12288;    # 12K is about right\n    ;;\n\n  gnu*)\n    # Under GNU Hurd, this test is not required because there is\n    # no limit to the length of command line arguments.\n    # Libtool will interpret -1 as no limit whatsoever\n    lt_cv_sys_max_cmd_len=-1;\n    ;;\n\n  cygwin* | mingw* | cegcc*)\n    # On Win9x/ME, this test blows up -- it succeeds, but takes\n    # about 5 minutes as the teststring grows exponentially.\n    # Worse, since 9x/ME are not pre-emptively multitasking,\n    # you end up with a \"frozen\" computer, even though with patience\n    # the test eventually succeeds (with a max line length of 256k).\n    # Instead, let's just punt: use the minimum linelength reported by\n    # all of the supported platforms: 8192 (on NT/2K/XP).\n    lt_cv_sys_max_cmd_len=8192;\n    ;;\n\n  mint*)\n    # On MiNT this can take a long time and run out of memory.\n    lt_cv_sys_max_cmd_len=8192;\n    ;;\n\n  amigaos*)\n    # On AmigaOS with pdksh, this test takes hours, literally.\n    # So we just punt and use a minimum line length of 8192.\n    lt_cv_sys_max_cmd_len=8192;\n    ;;\n\n  bitrig* | darwin* | dragonfly* | freebsd* | netbsd* | openbsd*)\n    # This has been around since 386BSD, at least.  Likely further.\n    if test -x /sbin/sysctl; then\n      lt_cv_sys_max_cmd_len=`/sbin/sysctl -n kern.argmax`\n    elif test -x /usr/sbin/sysctl; then\n      lt_cv_sys_max_cmd_len=`/usr/sbin/sysctl -n kern.argmax`\n    else\n      lt_cv_sys_max_cmd_len=65536\t# usable default for all BSDs\n    fi\n    # And add a safety zone\n    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 4`\n    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\* 3`\n    ;;\n\n  interix*)\n    # We know the value 262144 and hardcode it with a safety zone (like BSD)\n    lt_cv_sys_max_cmd_len=196608\n    ;;\n\n  os2*)\n    # The test takes a long time on OS/2.\n    lt_cv_sys_max_cmd_len=8192\n    ;;\n\n  osf*)\n    # Dr. Hans Ekkehard Plesser reports seeing a kernel panic running configure\n    # due to this test when exec_disable_arg_limit is 1 on Tru64. It is not\n    # nice to cause kernel panics so lets avoid the loop below.\n    # First set a reasonable default.\n    lt_cv_sys_max_cmd_len=16384\n    #\n    if test -x /sbin/sysconfig; then\n      case `/sbin/sysconfig -q proc exec_disable_arg_limit` in\n        *1*) lt_cv_sys_max_cmd_len=-1 ;;\n      esac\n    fi\n    ;;\n  sco3.2v5*)\n    lt_cv_sys_max_cmd_len=102400\n    ;;\n  sysv5* | sco5v6* | sysv4.2uw2*)\n    kargmax=`grep ARG_MAX /etc/conf/cf.d/stune 2>/dev/null`\n    if test -n \"$kargmax\"; then\n      lt_cv_sys_max_cmd_len=`echo $kargmax | sed 's/.*[[\t ]]//'`\n    else\n      lt_cv_sys_max_cmd_len=32768\n    fi\n    ;;\n  *)\n    lt_cv_sys_max_cmd_len=`(getconf ARG_MAX) 2> /dev/null`\n    if test -n \"$lt_cv_sys_max_cmd_len\" && \\\n       test undefined != \"$lt_cv_sys_max_cmd_len\"; then\n      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 4`\n      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\* 3`\n    else\n      # Make teststring a little bigger before we do anything with it.\n      # a 1K string should be a reasonable start.\n      for i in 1 2 3 4 5 6 7 8; do\n        teststring=$teststring$teststring\n      done\n      SHELL=${SHELL-${CONFIG_SHELL-/bin/sh}}\n      # If test is not a shell built-in, we'll probably end up computing a\n      # maximum length that is only half of the actual maximum length, but\n      # we can't tell.\n      while { test X`env echo \"$teststring$teststring\" 2>/dev/null` \\\n\t         = \"X$teststring$teststring\"; } >/dev/null 2>&1 &&\n\t      test 17 != \"$i\" # 1/2 MB should be enough\n      do\n        i=`expr $i + 1`\n        teststring=$teststring$teststring\n      done\n      # Only check the string length outside the loop.\n      lt_cv_sys_max_cmd_len=`expr \"X$teststring\" : \".*\" 2>&1`\n      teststring=\n      # Add a significant safety factor because C++ compilers can tack on\n      # massive amounts of additional arguments before passing them to the\n      # linker.  It appears as though 1/2 is a usable value.\n      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 2`\n    fi\n    ;;\n  esac\n])\nif test -n \"$lt_cv_sys_max_cmd_len\"; then\n  AC_MSG_RESULT($lt_cv_sys_max_cmd_len)\nelse\n  AC_MSG_RESULT(none)\nfi\nmax_cmd_len=$lt_cv_sys_max_cmd_len\n_LT_DECL([], [max_cmd_len], [0],\n    [What is the maximum length of a command?])\n])# LT_CMD_MAX_LEN\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_SYS_MAX_CMD_LEN], [LT_CMD_MAX_LEN])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_SYS_MAX_CMD_LEN], [])\n\n\n# _LT_HEADER_DLFCN\n# ----------------\nm4_defun([_LT_HEADER_DLFCN],\n[AC_CHECK_HEADERS([dlfcn.h], [], [], [AC_INCLUDES_DEFAULT])dnl\n])# _LT_HEADER_DLFCN\n\n\n# _LT_TRY_DLOPEN_SELF (ACTION-IF-TRUE, ACTION-IF-TRUE-W-USCORE,\n#                      ACTION-IF-FALSE, ACTION-IF-CROSS-COMPILING)\n# ----------------------------------------------------------------\nm4_defun([_LT_TRY_DLOPEN_SELF],\n[m4_require([_LT_HEADER_DLFCN])dnl\nif test yes = \"$cross_compiling\"; then :\n  [$4]\nelse\n  lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n  lt_status=$lt_dlunknown\n  cat > conftest.$ac_ext <<_LT_EOF\n[#line $LINENO \"configure\"\n#include \"confdefs.h\"\n\n#if HAVE_DLFCN_H\n#include <dlfcn.h>\n#endif\n\n#include <stdio.h>\n\n#ifdef RTLD_GLOBAL\n#  define LT_DLGLOBAL\t\tRTLD_GLOBAL\n#else\n#  ifdef DL_GLOBAL\n#    define LT_DLGLOBAL\t\tDL_GLOBAL\n#  else\n#    define LT_DLGLOBAL\t\t0\n#  endif\n#endif\n\n/* We may have to define LT_DLLAZY_OR_NOW in the command line if we\n   find out it does not work in some platform. */\n#ifndef LT_DLLAZY_OR_NOW\n#  ifdef RTLD_LAZY\n#    define LT_DLLAZY_OR_NOW\t\tRTLD_LAZY\n#  else\n#    ifdef DL_LAZY\n#      define LT_DLLAZY_OR_NOW\t\tDL_LAZY\n#    else\n#      ifdef RTLD_NOW\n#        define LT_DLLAZY_OR_NOW\tRTLD_NOW\n#      else\n#        ifdef DL_NOW\n#          define LT_DLLAZY_OR_NOW\tDL_NOW\n#        else\n#          define LT_DLLAZY_OR_NOW\t0\n#        endif\n#      endif\n#    endif\n#  endif\n#endif\n\n/* When -fvisibility=hidden is used, assume the code has been annotated\n   correspondingly for the symbols needed.  */\n#if defined __GNUC__ && (((__GNUC__ == 3) && (__GNUC_MINOR__ >= 3)) || (__GNUC__ > 3))\nint fnord () __attribute__((visibility(\"default\")));\n#endif\n\nint fnord () { return 42; }\nint main ()\n{\n  void *self = dlopen (0, LT_DLGLOBAL|LT_DLLAZY_OR_NOW);\n  int status = $lt_dlunknown;\n\n  if (self)\n    {\n      if (dlsym (self,\"fnord\"))       status = $lt_dlno_uscore;\n      else\n        {\n\t  if (dlsym( self,\"_fnord\"))  status = $lt_dlneed_uscore;\n          else puts (dlerror ());\n\t}\n      /* dlclose (self); */\n    }\n  else\n    puts (dlerror ());\n\n  return status;\n}]\n_LT_EOF\n  if AC_TRY_EVAL(ac_link) && test -s \"conftest$ac_exeext\" 2>/dev/null; then\n    (./conftest; exit; ) >&AS_MESSAGE_LOG_FD 2>/dev/null\n    lt_status=$?\n    case x$lt_status in\n      x$lt_dlno_uscore) $1 ;;\n      x$lt_dlneed_uscore) $2 ;;\n      x$lt_dlunknown|x*) $3 ;;\n    esac\n  else :\n    # compilation failed\n    $3\n  fi\nfi\nrm -fr conftest*\n])# _LT_TRY_DLOPEN_SELF\n\n\n# LT_SYS_DLOPEN_SELF\n# ------------------\nAC_DEFUN([LT_SYS_DLOPEN_SELF],\n[m4_require([_LT_HEADER_DLFCN])dnl\nif test yes != \"$enable_dlopen\"; then\n  enable_dlopen=unknown\n  enable_dlopen_self=unknown\n  enable_dlopen_self_static=unknown\nelse\n  lt_cv_dlopen=no\n  lt_cv_dlopen_libs=\n\n  case $host_os in\n  beos*)\n    lt_cv_dlopen=load_add_on\n    lt_cv_dlopen_libs=\n    lt_cv_dlopen_self=yes\n    ;;\n\n  mingw* | pw32* | cegcc*)\n    lt_cv_dlopen=LoadLibrary\n    lt_cv_dlopen_libs=\n    ;;\n\n  cygwin*)\n    lt_cv_dlopen=dlopen\n    lt_cv_dlopen_libs=\n    ;;\n\n  darwin*)\n    # if libdl is installed we need to link against it\n    AC_CHECK_LIB([dl], [dlopen],\n\t\t[lt_cv_dlopen=dlopen lt_cv_dlopen_libs=-ldl],[\n    lt_cv_dlopen=dyld\n    lt_cv_dlopen_libs=\n    lt_cv_dlopen_self=yes\n    ])\n    ;;\n\n  tpf*)\n    # Don't try to run any link tests for TPF.  We know it's impossible\n    # because TPF is a cross-compiler, and we know how we open DSOs.\n    lt_cv_dlopen=dlopen\n    lt_cv_dlopen_libs=\n    lt_cv_dlopen_self=no\n    ;;\n\n  *)\n    AC_CHECK_FUNC([shl_load],\n\t  [lt_cv_dlopen=shl_load],\n      [AC_CHECK_LIB([dld], [shl_load],\n\t    [lt_cv_dlopen=shl_load lt_cv_dlopen_libs=-ldld],\n\t[AC_CHECK_FUNC([dlopen],\n\t      [lt_cv_dlopen=dlopen],\n\t  [AC_CHECK_LIB([dl], [dlopen],\n\t\t[lt_cv_dlopen=dlopen lt_cv_dlopen_libs=-ldl],\n\t    [AC_CHECK_LIB([svld], [dlopen],\n\t\t  [lt_cv_dlopen=dlopen lt_cv_dlopen_libs=-lsvld],\n\t      [AC_CHECK_LIB([dld], [dld_link],\n\t\t    [lt_cv_dlopen=dld_link lt_cv_dlopen_libs=-ldld])\n\t      ])\n\t    ])\n\t  ])\n\t])\n      ])\n    ;;\n  esac\n\n  if test no = \"$lt_cv_dlopen\"; then\n    enable_dlopen=no\n  else\n    enable_dlopen=yes\n  fi\n\n  case $lt_cv_dlopen in\n  dlopen)\n    save_CPPFLAGS=$CPPFLAGS\n    test yes = \"$ac_cv_header_dlfcn_h\" && CPPFLAGS=\"$CPPFLAGS -DHAVE_DLFCN_H\"\n\n    save_LDFLAGS=$LDFLAGS\n    wl=$lt_prog_compiler_wl eval LDFLAGS=\\\"\\$LDFLAGS $export_dynamic_flag_spec\\\"\n\n    save_LIBS=$LIBS\n    LIBS=\"$lt_cv_dlopen_libs $LIBS\"\n\n    AC_CACHE_CHECK([whether a program can dlopen itself],\n\t  lt_cv_dlopen_self, [dnl\n\t  _LT_TRY_DLOPEN_SELF(\n\t    lt_cv_dlopen_self=yes, lt_cv_dlopen_self=yes,\n\t    lt_cv_dlopen_self=no, lt_cv_dlopen_self=cross)\n    ])\n\n    if test yes = \"$lt_cv_dlopen_self\"; then\n      wl=$lt_prog_compiler_wl eval LDFLAGS=\\\"\\$LDFLAGS $lt_prog_compiler_static\\\"\n      AC_CACHE_CHECK([whether a statically linked program can dlopen itself],\n\t  lt_cv_dlopen_self_static, [dnl\n\t  _LT_TRY_DLOPEN_SELF(\n\t    lt_cv_dlopen_self_static=yes, lt_cv_dlopen_self_static=yes,\n\t    lt_cv_dlopen_self_static=no,  lt_cv_dlopen_self_static=cross)\n      ])\n    fi\n\n    CPPFLAGS=$save_CPPFLAGS\n    LDFLAGS=$save_LDFLAGS\n    LIBS=$save_LIBS\n    ;;\n  esac\n\n  case $lt_cv_dlopen_self in\n  yes|no) enable_dlopen_self=$lt_cv_dlopen_self ;;\n  *) enable_dlopen_self=unknown ;;\n  esac\n\n  case $lt_cv_dlopen_self_static in\n  yes|no) enable_dlopen_self_static=$lt_cv_dlopen_self_static ;;\n  *) enable_dlopen_self_static=unknown ;;\n  esac\nfi\n_LT_DECL([dlopen_support], [enable_dlopen], [0],\n\t [Whether dlopen is supported])\n_LT_DECL([dlopen_self], [enable_dlopen_self], [0],\n\t [Whether dlopen of programs is supported])\n_LT_DECL([dlopen_self_static], [enable_dlopen_self_static], [0],\n\t [Whether dlopen of statically linked programs is supported])\n])# LT_SYS_DLOPEN_SELF\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_DLOPEN_SELF], [LT_SYS_DLOPEN_SELF])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_DLOPEN_SELF], [])\n\n\n# _LT_COMPILER_C_O([TAGNAME])\n# ---------------------------\n# Check to see if options -c and -o are simultaneously supported by compiler.\n# This macro does not hard code the compiler like AC_PROG_CC_C_O.\nm4_defun([_LT_COMPILER_C_O],\n[m4_require([_LT_DECL_SED])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_TAG_COMPILER])dnl\nAC_CACHE_CHECK([if $compiler supports -c -o file.$ac_objext],\n  [_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)],\n  [_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)=no\n   $RM -r conftest 2>/dev/null\n   mkdir conftest\n   cd conftest\n   mkdir out\n   echo \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n\n   lt_compiler_flag=\"-o out/conftest2.$ac_objext\"\n   # Insert the option either (1) after the last *FLAGS variable, or\n   # (2) before a word containing \"conftest.\", or (3) at the end.\n   # Note that $ac_compile itself does not contain backslashes and begins\n   # with a dollar sign (not a hyphen), so the echo should work correctly.\n   lt_compile=`echo \"$ac_compile\" | $SED \\\n   -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n   -e 's: [[^ ]]*conftest\\.: $lt_compiler_flag&:; t' \\\n   -e 's:$: $lt_compiler_flag:'`\n   (eval echo \"\\\"\\$as_me:$LINENO: $lt_compile\\\"\" >&AS_MESSAGE_LOG_FD)\n   (eval \"$lt_compile\" 2>out/conftest.err)\n   ac_status=$?\n   cat out/conftest.err >&AS_MESSAGE_LOG_FD\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&AS_MESSAGE_LOG_FD\n   if (exit $ac_status) && test -s out/conftest2.$ac_objext\n   then\n     # The compiler can only warn and ignore the option if not recognized\n     # So say no if there are warnings\n     $ECHO \"$_lt_compiler_boilerplate\" | $SED '/^$/d' > out/conftest.exp\n     $SED '/^$/d; /^ *+/d' out/conftest.err >out/conftest.er2\n     if test ! -s out/conftest.er2 || diff out/conftest.exp out/conftest.er2 >/dev/null; then\n       _LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)=yes\n     fi\n   fi\n   chmod u+w . 2>&AS_MESSAGE_LOG_FD\n   $RM conftest*\n   # SGI C++ compiler will create directory out/ii_files/ for\n   # template instantiation\n   test -d out/ii_files && $RM out/ii_files/* && rmdir out/ii_files\n   $RM out/* && rmdir out\n   cd ..\n   $RM -r conftest\n   $RM conftest*\n])\n_LT_TAGDECL([compiler_c_o], [lt_cv_prog_compiler_c_o], [1],\n\t[Does compiler simultaneously support -c and -o options?])\n])# _LT_COMPILER_C_O\n\n\n# _LT_COMPILER_FILE_LOCKS([TAGNAME])\n# ----------------------------------\n# Check to see if we can do hard links to lock some files if needed\nm4_defun([_LT_COMPILER_FILE_LOCKS],\n[m4_require([_LT_ENABLE_LOCK])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\n_LT_COMPILER_C_O([$1])\n\nhard_links=nottested\nif test no = \"$_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)\" && test no != \"$need_locks\"; then\n  # do not overwrite the value of need_locks provided by the user\n  AC_MSG_CHECKING([if we can lock with hard links])\n  hard_links=yes\n  $RM conftest*\n  ln conftest.a conftest.b 2>/dev/null && hard_links=no\n  touch conftest.a\n  ln conftest.a conftest.b 2>&5 || hard_links=no\n  ln conftest.a conftest.b 2>/dev/null && hard_links=no\n  AC_MSG_RESULT([$hard_links])\n  if test no = \"$hard_links\"; then\n    AC_MSG_WARN(['$CC' does not support '-c -o', so 'make -j' may be unsafe])\n    need_locks=warn\n  fi\nelse\n  need_locks=no\nfi\n_LT_DECL([], [need_locks], [1], [Must we lock files when doing compilation?])\n])# _LT_COMPILER_FILE_LOCKS\n\n\n# _LT_CHECK_OBJDIR\n# ----------------\nm4_defun([_LT_CHECK_OBJDIR],\n[AC_CACHE_CHECK([for objdir], [lt_cv_objdir],\n[rm -f .libs 2>/dev/null\nmkdir .libs 2>/dev/null\nif test -d .libs; then\n  lt_cv_objdir=.libs\nelse\n  # MS-DOS does not allow filenames that begin with a dot.\n  lt_cv_objdir=_libs\nfi\nrmdir .libs 2>/dev/null])\nobjdir=$lt_cv_objdir\n_LT_DECL([], [objdir], [0],\n         [The name of the directory that contains temporary libtool files])dnl\nm4_pattern_allow([LT_OBJDIR])dnl\nAC_DEFINE_UNQUOTED([LT_OBJDIR], \"$lt_cv_objdir/\",\n  [Define to the sub-directory where libtool stores uninstalled libraries.])\n])# _LT_CHECK_OBJDIR\n\n\n# _LT_LINKER_HARDCODE_LIBPATH([TAGNAME])\n# --------------------------------------\n# Check hardcoding attributes.\nm4_defun([_LT_LINKER_HARDCODE_LIBPATH],\n[AC_MSG_CHECKING([how to hardcode library paths into programs])\n_LT_TAGVAR(hardcode_action, $1)=\nif test -n \"$_LT_TAGVAR(hardcode_libdir_flag_spec, $1)\" ||\n   test -n \"$_LT_TAGVAR(runpath_var, $1)\" ||\n   test yes = \"$_LT_TAGVAR(hardcode_automatic, $1)\"; then\n\n  # We can hardcode non-existent directories.\n  if test no != \"$_LT_TAGVAR(hardcode_direct, $1)\" &&\n     # If the only mechanism to avoid hardcoding is shlibpath_var, we\n     # have to relink, otherwise we might link with an installed library\n     # when we should be linking with a yet-to-be-installed one\n     ## test no != \"$_LT_TAGVAR(hardcode_shlibpath_var, $1)\" &&\n     test no != \"$_LT_TAGVAR(hardcode_minus_L, $1)\"; then\n    # Linking always hardcodes the temporary library directory.\n    _LT_TAGVAR(hardcode_action, $1)=relink\n  else\n    # We can link without hardcoding, and we can hardcode nonexisting dirs.\n    _LT_TAGVAR(hardcode_action, $1)=immediate\n  fi\nelse\n  # We cannot hardcode anything, or else we can only hardcode existing\n  # directories.\n  _LT_TAGVAR(hardcode_action, $1)=unsupported\nfi\nAC_MSG_RESULT([$_LT_TAGVAR(hardcode_action, $1)])\n\nif test relink = \"$_LT_TAGVAR(hardcode_action, $1)\" ||\n   test yes = \"$_LT_TAGVAR(inherit_rpath, $1)\"; then\n  # Fast installation is not supported\n  enable_fast_install=no\nelif test yes = \"$shlibpath_overrides_runpath\" ||\n     test no = \"$enable_shared\"; then\n  # Fast installation is not necessary\n  enable_fast_install=needless\nfi\n_LT_TAGDECL([], [hardcode_action], [0],\n    [How to hardcode a shared library path into an executable])\n])# _LT_LINKER_HARDCODE_LIBPATH\n\n\n# _LT_CMD_STRIPLIB\n# ----------------\nm4_defun([_LT_CMD_STRIPLIB],\n[m4_require([_LT_DECL_EGREP])\nstriplib=\nold_striplib=\nAC_MSG_CHECKING([whether stripping libraries is possible])\nif test -n \"$STRIP\" && $STRIP -V 2>&1 | $GREP \"GNU strip\" >/dev/null; then\n  test -z \"$old_striplib\" && old_striplib=\"$STRIP --strip-debug\"\n  test -z \"$striplib\" && striplib=\"$STRIP --strip-unneeded\"\n  AC_MSG_RESULT([yes])\nelse\n# FIXME - insert some real tests, host_os isn't really good enough\n  case $host_os in\n  darwin*)\n    if test -n \"$STRIP\"; then\n      striplib=\"$STRIP -x\"\n      old_striplib=\"$STRIP -S\"\n      AC_MSG_RESULT([yes])\n    else\n      AC_MSG_RESULT([no])\n    fi\n    ;;\n  *)\n    AC_MSG_RESULT([no])\n    ;;\n  esac\nfi\n_LT_DECL([], [old_striplib], [1], [Commands to strip libraries])\n_LT_DECL([], [striplib], [1])\n])# _LT_CMD_STRIPLIB\n\n\n# _LT_PREPARE_MUNGE_PATH_LIST\n# ---------------------------\n# Make sure func_munge_path_list() is defined correctly.\nm4_defun([_LT_PREPARE_MUNGE_PATH_LIST],\n[[# func_munge_path_list VARIABLE PATH\n# -----------------------------------\n# VARIABLE is name of variable containing _space_ separated list of\n# directories to be munged by the contents of PATH, which is string\n# having a format:\n# \"DIR[:DIR]:\"\n#       string \"DIR[ DIR]\" will be prepended to VARIABLE\n# \":DIR[:DIR]\"\n#       string \"DIR[ DIR]\" will be appended to VARIABLE\n# \"DIRP[:DIRP]::[DIRA:]DIRA\"\n#       string \"DIRP[ DIRP]\" will be prepended to VARIABLE and string\n#       \"DIRA[ DIRA]\" will be appended to VARIABLE\n# \"DIR[:DIR]\"\n#       VARIABLE will be replaced by \"DIR[ DIR]\"\nfunc_munge_path_list ()\n{\n    case x@S|@2 in\n    x)\n        ;;\n    *:)\n        eval @S|@1=\\\"`$ECHO @S|@2 | $SED 's/:/ /g'` \\@S|@@S|@1\\\"\n        ;;\n    x:*)\n        eval @S|@1=\\\"\\@S|@@S|@1 `$ECHO @S|@2 | $SED 's/:/ /g'`\\\"\n        ;;\n    *::*)\n        eval @S|@1=\\\"\\@S|@@S|@1\\ `$ECHO @S|@2 | $SED -e 's/.*:://' -e 's/:/ /g'`\\\"\n        eval @S|@1=\\\"`$ECHO @S|@2 | $SED -e 's/::.*//' -e 's/:/ /g'`\\ \\@S|@@S|@1\\\"\n        ;;\n    *)\n        eval @S|@1=\\\"`$ECHO @S|@2 | $SED 's/:/ /g'`\\\"\n        ;;\n    esac\n}\n]])# _LT_PREPARE_PATH_LIST\n\n\n# _LT_SYS_DYNAMIC_LINKER([TAG])\n# -----------------------------\n# PORTME Fill in your ld.so characteristics\nm4_defun([_LT_SYS_DYNAMIC_LINKER],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_OBJDUMP])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_CHECK_SHELL_FEATURES])dnl\nm4_require([_LT_PREPARE_MUNGE_PATH_LIST])dnl\nAC_MSG_CHECKING([dynamic linker characteristics])\nm4_if([$1],\n\t[], [\nif test yes = \"$GCC\"; then\n  case $host_os in\n    darwin*) lt_awk_arg='/^libraries:/,/LR/' ;;\n    *) lt_awk_arg='/^libraries:/' ;;\n  esac\n  case $host_os in\n    mingw* | cegcc*) lt_sed_strip_eq='s|=\\([[A-Za-z]]:\\)|\\1|g' ;;\n    *) lt_sed_strip_eq='s|=/|/|g' ;;\n  esac\n  lt_search_path_spec=`$CC -print-search-dirs | awk $lt_awk_arg | $SED -e \"s/^libraries://\" -e $lt_sed_strip_eq`\n  case $lt_search_path_spec in\n  *\\;*)\n    # if the path contains \";\" then we assume it to be the separator\n    # otherwise default to the standard path separator (i.e. \":\") - it is\n    # assumed that no part of a normal pathname contains \";\" but that should\n    # okay in the real world where \";\" in dirpaths is itself problematic.\n    lt_search_path_spec=`$ECHO \"$lt_search_path_spec\" | $SED 's/;/ /g'`\n    ;;\n  *)\n    lt_search_path_spec=`$ECHO \"$lt_search_path_spec\" | $SED \"s/$PATH_SEPARATOR/ /g\"`\n    ;;\n  esac\n  # Ok, now we have the path, separated by spaces, we can step through it\n  # and add multilib dir if necessary...\n  lt_tmp_lt_search_path_spec=\n  lt_multi_os_dir=/`$CC $CPPFLAGS $CFLAGS $LDFLAGS -print-multi-os-directory 2>/dev/null`\n  # ...but if some path component already ends with the multilib dir we assume\n  # that all is fine and trust -print-search-dirs as is (GCC 4.2? or newer).\n  case \"$lt_multi_os_dir; $lt_search_path_spec \" in\n  \"/; \"* | \"/.; \"* | \"/./; \"* | *\"$lt_multi_os_dir \"* | *\"$lt_multi_os_dir/ \"*)\n    lt_multi_os_dir=\n    ;;\n  esac\n  for lt_sys_path in $lt_search_path_spec; do\n    if test -d \"$lt_sys_path$lt_multi_os_dir\"; then\n      lt_tmp_lt_search_path_spec=\"$lt_tmp_lt_search_path_spec $lt_sys_path$lt_multi_os_dir\"\n    elif test -n \"$lt_multi_os_dir\"; then\n      test -d \"$lt_sys_path\" && \\\n\tlt_tmp_lt_search_path_spec=\"$lt_tmp_lt_search_path_spec $lt_sys_path\"\n    fi\n  done\n  lt_search_path_spec=`$ECHO \"$lt_tmp_lt_search_path_spec\" | awk '\nBEGIN {RS = \" \"; FS = \"/|\\n\";} {\n  lt_foo = \"\";\n  lt_count = 0;\n  for (lt_i = NF; lt_i > 0; lt_i--) {\n    if ($lt_i != \"\" && $lt_i != \".\") {\n      if ($lt_i == \"..\") {\n        lt_count++;\n      } else {\n        if (lt_count == 0) {\n          lt_foo = \"/\" $lt_i lt_foo;\n        } else {\n          lt_count--;\n        }\n      }\n    }\n  }\n  if (lt_foo != \"\") { lt_freq[[lt_foo]]++; }\n  if (lt_freq[[lt_foo]] == 1) { print lt_foo; }\n}'`\n  # AWK program above erroneously prepends '/' to C:/dos/paths\n  # for these hosts.\n  case $host_os in\n    mingw* | cegcc*) lt_search_path_spec=`$ECHO \"$lt_search_path_spec\" |\\\n      $SED 's|/\\([[A-Za-z]]:\\)|\\1|g'` ;;\n  esac\n  sys_lib_search_path_spec=`$ECHO \"$lt_search_path_spec\" | $lt_NL2SP`\nelse\n  sys_lib_search_path_spec=\"/lib /usr/lib /usr/local/lib\"\nfi])\nlibrary_names_spec=\nlibname_spec='lib$name'\nsoname_spec=\nshrext_cmds=.so\npostinstall_cmds=\npostuninstall_cmds=\nfinish_cmds=\nfinish_eval=\nshlibpath_var=\nshlibpath_overrides_runpath=unknown\nversion_type=none\ndynamic_linker=\"$host_os ld.so\"\nsys_lib_dlsearch_path_spec=\"/lib /usr/lib\"\nneed_lib_prefix=unknown\nhardcode_into_libs=no\n\n# when you set need_version to no, make sure it does not cause -set_version\n# flags to be left without arguments\nneed_version=unknown\n\nAC_ARG_VAR([LT_SYS_LIBRARY_PATH],\n[User-defined run-time library search path.])\n\ncase $host_os in\naix3*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='$libname$release$shared_ext$versuffix $libname.a'\n  shlibpath_var=LIBPATH\n\n  # AIX 3 has no versioning support, so we append a major version to the name.\n  soname_spec='$libname$release$shared_ext$major'\n  ;;\n\naix[[4-9]]*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  hardcode_into_libs=yes\n  if test ia64 = \"$host_cpu\"; then\n    # AIX 5 supports IA64\n    library_names_spec='$libname$release$shared_ext$major $libname$release$shared_ext$versuffix $libname$shared_ext'\n    shlibpath_var=LD_LIBRARY_PATH\n  else\n    # With GCC up to 2.95.x, collect2 would create an import file\n    # for dependence libraries.  The import file would start with\n    # the line '#! .'.  This would cause the generated library to\n    # depend on '.', always an invalid library.  This was fixed in\n    # development snapshots of GCC prior to 3.0.\n    case $host_os in\n      aix4 | aix4.[[01]] | aix4.[[01]].*)\n      if { echo '#if __GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ >= 97)'\n\t   echo ' yes '\n\t   echo '#endif'; } | $CC -E - | $GREP yes > /dev/null; then\n\t:\n      else\n\tcan_build_shared=no\n      fi\n      ;;\n    esac\n    # Using Import Files as archive members, it is possible to support\n    # filename-based versioning of shared library archives on AIX. While\n    # this would work for both with and without runtime linking, it will\n    # prevent static linking of such archives. So we do filename-based\n    # shared library versioning with .so extension only, which is used\n    # when both runtime linking and shared linking is enabled.\n    # Unfortunately, runtime linking may impact performance, so we do\n    # not want this to be the default eventually. Also, we use the\n    # versioned .so libs for executables only if there is the -brtl\n    # linker flag in LDFLAGS as well, or --with-aix-soname=svr4 only.\n    # To allow for filename-based versioning support, we need to create\n    # libNAME.so.V as an archive file, containing:\n    # *) an Import File, referring to the versioned filename of the\n    #    archive as well as the shared archive member, telling the\n    #    bitwidth (32 or 64) of that shared object, and providing the\n    #    list of exported symbols of that shared object, eventually\n    #    decorated with the 'weak' keyword\n    # *) the shared object with the F_LOADONLY flag set, to really avoid\n    #    it being seen by the linker.\n    # At run time we better use the real file rather than another symlink,\n    # but for link time we create the symlink libNAME.so -> libNAME.so.V\n\n    case $with_aix_soname,$aix_use_runtimelinking in\n    # AIX (on Power*) has no versioning support, so currently we cannot hardcode correct\n    # soname into executable. Probably we can add versioning support to\n    # collect2, so additional links can be useful in future.\n    aix,yes) # traditional libtool\n      dynamic_linker='AIX unversionable lib.so'\n      # If using run time linking (on AIX 4.2 or later) use lib<name>.so\n      # instead of lib<name>.a to let people know that these are not\n      # typical AIX shared libraries.\n      library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n      ;;\n    aix,no) # traditional AIX only\n      dynamic_linker='AIX lib.a[(]lib.so.V[)]'\n      # We preserve .a as extension for shared libraries through AIX4.2\n      # and later when we are not doing run time linking.\n      library_names_spec='$libname$release.a $libname.a'\n      soname_spec='$libname$release$shared_ext$major'\n      ;;\n    svr4,*) # full svr4 only\n      dynamic_linker=\"AIX lib.so.V[(]$shared_archive_member_spec.o[)]\"\n      library_names_spec='$libname$release$shared_ext$major $libname$shared_ext'\n      # We do not specify a path in Import Files, so LIBPATH fires.\n      shlibpath_overrides_runpath=yes\n      ;;\n    *,yes) # both, prefer svr4\n      dynamic_linker=\"AIX lib.so.V[(]$shared_archive_member_spec.o[)], lib.a[(]lib.so.V[)]\"\n      library_names_spec='$libname$release$shared_ext$major $libname$shared_ext'\n      # unpreferred sharedlib libNAME.a needs extra handling\n      postinstall_cmds='test -n \"$linkname\" || linkname=\"$realname\"~func_stripname \"\" \".so\" \"$linkname\"~$install_shared_prog \"$dir/$func_stripname_result.$libext\" \"$destdir/$func_stripname_result.$libext\"~test -z \"$tstripme\" || test -z \"$striplib\" || $striplib \"$destdir/$func_stripname_result.$libext\"'\n      postuninstall_cmds='for n in $library_names $old_library; do :; done~func_stripname \"\" \".so\" \"$n\"~test \"$func_stripname_result\" = \"$n\" || func_append rmfiles \" $odir/$func_stripname_result.$libext\"'\n      # We do not specify a path in Import Files, so LIBPATH fires.\n      shlibpath_overrides_runpath=yes\n      ;;\n    *,no) # both, prefer aix\n      dynamic_linker=\"AIX lib.a[(]lib.so.V[)], lib.so.V[(]$shared_archive_member_spec.o[)]\"\n      library_names_spec='$libname$release.a $libname.a'\n      soname_spec='$libname$release$shared_ext$major'\n      # unpreferred sharedlib libNAME.so.V and symlink libNAME.so need extra handling\n      postinstall_cmds='test -z \"$dlname\" || $install_shared_prog $dir/$dlname $destdir/$dlname~test -z \"$tstripme\" || test -z \"$striplib\" || $striplib $destdir/$dlname~test -n \"$linkname\" || linkname=$realname~func_stripname \"\" \".a\" \"$linkname\"~(cd \"$destdir\" && $LN_S -f $dlname $func_stripname_result.so)'\n      postuninstall_cmds='test -z \"$dlname\" || func_append rmfiles \" $odir/$dlname\"~for n in $old_library $library_names; do :; done~func_stripname \"\" \".a\" \"$n\"~func_append rmfiles \" $odir/$func_stripname_result.so\"'\n      ;;\n    esac\n    shlibpath_var=LIBPATH\n  fi\n  ;;\n\namigaos*)\n  case $host_cpu in\n  powerpc)\n    # Since July 2007 AmigaOS4 officially supports .so libraries.\n    # When compiling the executable, add -use-dynld -Lsobjs: to the compileline.\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n    ;;\n  m68k)\n    library_names_spec='$libname.ixlibrary $libname.a'\n    # Create ${libname}_ixlibrary.a entries in /sys/libs.\n    finish_eval='for lib in `ls $libdir/*.ixlibrary 2>/dev/null`; do libname=`func_echo_all \"$lib\" | $SED '\\''s%^.*/\\([[^/]]*\\)\\.ixlibrary$%\\1%'\\''`; $RM /sys/libs/${libname}_ixlibrary.a; $show \"cd /sys/libs && $LN_S $lib ${libname}_ixlibrary.a\"; cd /sys/libs && $LN_S $lib ${libname}_ixlibrary.a || exit 1; done'\n    ;;\n  esac\n  ;;\n\nbeos*)\n  library_names_spec='$libname$shared_ext'\n  dynamic_linker=\"$host_os ld.so\"\n  shlibpath_var=LIBRARY_PATH\n  ;;\n\nbsdi[[45]]*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  sys_lib_search_path_spec=\"/shlib /usr/lib /usr/X11/lib /usr/contrib/lib /lib /usr/local/lib\"\n  sys_lib_dlsearch_path_spec=\"/shlib /usr/lib /usr/local/lib\"\n  # the default ld.so.conf also contains /usr/contrib/lib and\n  # /usr/X11R6/lib (/usr/X11 is a link to /usr/X11R6), but let us allow\n  # libtool to hard-code these into programs\n  ;;\n\ncygwin* | mingw* | pw32* | cegcc*)\n  version_type=windows\n  shrext_cmds=.dll\n  need_version=no\n  need_lib_prefix=no\n\n  case $GCC,$cc_basename in\n  yes,*)\n    # gcc\n    library_names_spec='$libname.dll.a'\n    # DLL is installed to $(libdir)/../bin by postinstall_cmds\n    postinstall_cmds='base_file=`basename \\$file`~\n      dlpath=`$SHELL 2>&1 -c '\\''. $dir/'\\''\\$base_file'\\''i; echo \\$dlname'\\''`~\n      dldir=$destdir/`dirname \\$dlpath`~\n      test -d \\$dldir || mkdir -p \\$dldir~\n      $install_prog $dir/$dlname \\$dldir/$dlname~\n      chmod a+x \\$dldir/$dlname~\n      if test -n '\\''$stripme'\\'' && test -n '\\''$striplib'\\''; then\n        eval '\\''$striplib \\$dldir/$dlname'\\'' || exit \\$?;\n      fi'\n    postuninstall_cmds='dldll=`$SHELL 2>&1 -c '\\''. $file; echo \\$dlname'\\''`~\n      dlpath=$dir/\\$dldll~\n       $RM \\$dlpath'\n    shlibpath_overrides_runpath=yes\n\n    case $host_os in\n    cygwin*)\n      # Cygwin DLLs use 'cyg' prefix rather than 'lib'\n      soname_spec='`echo $libname | sed -e 's/^lib/cyg/'``echo $release | $SED -e 's/[[.]]/-/g'`$versuffix$shared_ext'\nm4_if([$1], [],[\n      sys_lib_search_path_spec=\"$sys_lib_search_path_spec /usr/lib/w32api\"])\n      ;;\n    mingw* | cegcc*)\n      # MinGW DLLs use traditional 'lib' prefix\n      soname_spec='$libname`echo $release | $SED -e 's/[[.]]/-/g'`$versuffix$shared_ext'\n      ;;\n    pw32*)\n      # pw32 DLLs use 'pw' prefix rather than 'lib'\n      library_names_spec='`echo $libname | sed -e 's/^lib/pw/'``echo $release | $SED -e 's/[[.]]/-/g'`$versuffix$shared_ext'\n      ;;\n    esac\n    dynamic_linker='Win32 ld.exe'\n    ;;\n\n  *,cl*)\n    # Native MSVC\n    libname_spec='$name'\n    soname_spec='$libname`echo $release | $SED -e 's/[[.]]/-/g'`$versuffix$shared_ext'\n    library_names_spec='$libname.dll.lib'\n\n    case $build_os in\n    mingw*)\n      sys_lib_search_path_spec=\n      lt_save_ifs=$IFS\n      IFS=';'\n      for lt_path in $LIB\n      do\n        IFS=$lt_save_ifs\n        # Let DOS variable expansion print the short 8.3 style file name.\n        lt_path=`cd \"$lt_path\" 2>/dev/null && cmd //C \"for %i in (\".\") do @echo %~si\"`\n        sys_lib_search_path_spec=\"$sys_lib_search_path_spec $lt_path\"\n      done\n      IFS=$lt_save_ifs\n      # Convert to MSYS style.\n      sys_lib_search_path_spec=`$ECHO \"$sys_lib_search_path_spec\" | sed -e 's|\\\\\\\\|/|g' -e 's| \\\\([[a-zA-Z]]\\\\):| /\\\\1|g' -e 's|^ ||'`\n      ;;\n    cygwin*)\n      # Convert to unix form, then to dos form, then back to unix form\n      # but this time dos style (no spaces!) so that the unix form looks\n      # like /cygdrive/c/PROGRA~1:/cygdr...\n      sys_lib_search_path_spec=`cygpath --path --unix \"$LIB\"`\n      sys_lib_search_path_spec=`cygpath --path --dos \"$sys_lib_search_path_spec\" 2>/dev/null`\n      sys_lib_search_path_spec=`cygpath --path --unix \"$sys_lib_search_path_spec\" | $SED -e \"s/$PATH_SEPARATOR/ /g\"`\n      ;;\n    *)\n      sys_lib_search_path_spec=$LIB\n      if $ECHO \"$sys_lib_search_path_spec\" | [$GREP ';[c-zC-Z]:/' >/dev/null]; then\n        # It is most probably a Windows format PATH.\n        sys_lib_search_path_spec=`$ECHO \"$sys_lib_search_path_spec\" | $SED -e 's/;/ /g'`\n      else\n        sys_lib_search_path_spec=`$ECHO \"$sys_lib_search_path_spec\" | $SED -e \"s/$PATH_SEPARATOR/ /g\"`\n      fi\n      # FIXME: find the short name or the path components, as spaces are\n      # common. (e.g. \"Program Files\" -> \"PROGRA~1\")\n      ;;\n    esac\n\n    # DLL is installed to $(libdir)/../bin by postinstall_cmds\n    postinstall_cmds='base_file=`basename \\$file`~\n      dlpath=`$SHELL 2>&1 -c '\\''. $dir/'\\''\\$base_file'\\''i; echo \\$dlname'\\''`~\n      dldir=$destdir/`dirname \\$dlpath`~\n      test -d \\$dldir || mkdir -p \\$dldir~\n      $install_prog $dir/$dlname \\$dldir/$dlname'\n    postuninstall_cmds='dldll=`$SHELL 2>&1 -c '\\''. $file; echo \\$dlname'\\''`~\n      dlpath=$dir/\\$dldll~\n       $RM \\$dlpath'\n    shlibpath_overrides_runpath=yes\n    dynamic_linker='Win32 link.exe'\n    ;;\n\n  *)\n    # Assume MSVC wrapper\n    library_names_spec='$libname`echo $release | $SED -e 's/[[.]]/-/g'`$versuffix$shared_ext $libname.lib'\n    dynamic_linker='Win32 ld.exe'\n    ;;\n  esac\n  # FIXME: first we should search . and the directory the executable is in\n  shlibpath_var=PATH\n  ;;\n\ndarwin* | rhapsody*)\n  dynamic_linker=\"$host_os dyld\"\n  version_type=darwin\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$major$shared_ext $libname$shared_ext'\n  soname_spec='$libname$release$major$shared_ext'\n  shlibpath_overrides_runpath=yes\n  shlibpath_var=DYLD_LIBRARY_PATH\n  shrext_cmds='`test .$module = .yes && echo .so || echo .dylib`'\nm4_if([$1], [],[\n  sys_lib_search_path_spec=\"$sys_lib_search_path_spec /usr/local/lib\"])\n  sys_lib_dlsearch_path_spec='/usr/local/lib /lib /usr/lib'\n  ;;\n\ndgux*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  ;;\n\nfreebsd* | dragonfly*)\n  # DragonFly does not have aout.  When/if they implement a new\n  # versioning mechanism, adjust this.\n  if test -x /usr/bin/objformat; then\n    objformat=`/usr/bin/objformat`\n  else\n    case $host_os in\n    freebsd[[23]].*) objformat=aout ;;\n    *) objformat=elf ;;\n    esac\n  fi\n  version_type=freebsd-$objformat\n  case $version_type in\n    freebsd-elf*)\n      library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n      soname_spec='$libname$release$shared_ext$major'\n      need_version=no\n      need_lib_prefix=no\n      ;;\n    freebsd-*)\n      library_names_spec='$libname$release$shared_ext$versuffix $libname$shared_ext$versuffix'\n      need_version=yes\n      ;;\n  esac\n  shlibpath_var=LD_LIBRARY_PATH\n  case $host_os in\n  freebsd2.*)\n    shlibpath_overrides_runpath=yes\n    ;;\n  freebsd3.[[01]]* | freebsdelf3.[[01]]*)\n    shlibpath_overrides_runpath=yes\n    hardcode_into_libs=yes\n    ;;\n  freebsd3.[[2-9]]* | freebsdelf3.[[2-9]]* | \\\n  freebsd4.[[0-5]] | freebsdelf4.[[0-5]] | freebsd4.1.1 | freebsdelf4.1.1)\n    shlibpath_overrides_runpath=no\n    hardcode_into_libs=yes\n    ;;\n  *) # from 4.6 on, and DragonFly\n    shlibpath_overrides_runpath=yes\n    hardcode_into_libs=yes\n    ;;\n  esac\n  ;;\n\nhaiku*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  dynamic_linker=\"$host_os runtime_loader\"\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  sys_lib_dlsearch_path_spec='/boot/home/config/lib /boot/common/lib /boot/system/lib'\n  hardcode_into_libs=yes\n  ;;\n\nhpux9* | hpux10* | hpux11*)\n  # Give a soname corresponding to the major version so that dld.sl refuses to\n  # link against other versions.\n  version_type=sunos\n  need_lib_prefix=no\n  need_version=no\n  case $host_cpu in\n  ia64*)\n    shrext_cmds='.so'\n    hardcode_into_libs=yes\n    dynamic_linker=\"$host_os dld.so\"\n    shlibpath_var=LD_LIBRARY_PATH\n    shlibpath_overrides_runpath=yes # Unless +noenvvar is specified.\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n    soname_spec='$libname$release$shared_ext$major'\n    if test 32 = \"$HPUX_IA64_MODE\"; then\n      sys_lib_search_path_spec=\"/usr/lib/hpux32 /usr/local/lib/hpux32 /usr/local/lib\"\n      sys_lib_dlsearch_path_spec=/usr/lib/hpux32\n    else\n      sys_lib_search_path_spec=\"/usr/lib/hpux64 /usr/local/lib/hpux64\"\n      sys_lib_dlsearch_path_spec=/usr/lib/hpux64\n    fi\n    ;;\n  hppa*64*)\n    shrext_cmds='.sl'\n    hardcode_into_libs=yes\n    dynamic_linker=\"$host_os dld.sl\"\n    shlibpath_var=LD_LIBRARY_PATH # How should we handle SHLIB_PATH\n    shlibpath_overrides_runpath=yes # Unless +noenvvar is specified.\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n    soname_spec='$libname$release$shared_ext$major'\n    sys_lib_search_path_spec=\"/usr/lib/pa20_64 /usr/ccs/lib/pa20_64\"\n    sys_lib_dlsearch_path_spec=$sys_lib_search_path_spec\n    ;;\n  *)\n    shrext_cmds='.sl'\n    dynamic_linker=\"$host_os dld.sl\"\n    shlibpath_var=SHLIB_PATH\n    shlibpath_overrides_runpath=no # +s is required to enable SHLIB_PATH\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n    soname_spec='$libname$release$shared_ext$major'\n    ;;\n  esac\n  # HP-UX runs *really* slowly unless shared libraries are mode 555, ...\n  postinstall_cmds='chmod 555 $lib'\n  # or fails outright, so override atomically:\n  install_override_mode=555\n  ;;\n\ninterix[[3-9]]*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  dynamic_linker='Interix 3.x ld.so.1 (PE, like ELF)'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  ;;\n\nirix5* | irix6* | nonstopux*)\n  case $host_os in\n    nonstopux*) version_type=nonstopux ;;\n    *)\n\tif test yes = \"$lt_cv_prog_gnu_ld\"; then\n\t\tversion_type=linux # correct to gnu/linux during the next big refactor\n\telse\n\t\tversion_type=irix\n\tfi ;;\n  esac\n  need_lib_prefix=no\n  need_version=no\n  soname_spec='$libname$release$shared_ext$major'\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$release$shared_ext $libname$shared_ext'\n  case $host_os in\n  irix5* | nonstopux*)\n    libsuff= shlibsuff=\n    ;;\n  *)\n    case $LD in # libtool.m4 will add one of these switches to LD\n    *-32|*\"-32 \"|*-melf32bsmip|*\"-melf32bsmip \")\n      libsuff= shlibsuff= libmagic=32-bit;;\n    *-n32|*\"-n32 \"|*-melf32bmipn32|*\"-melf32bmipn32 \")\n      libsuff=32 shlibsuff=N32 libmagic=N32;;\n    *-64|*\"-64 \"|*-melf64bmip|*\"-melf64bmip \")\n      libsuff=64 shlibsuff=64 libmagic=64-bit;;\n    *) libsuff= shlibsuff= libmagic=never-match;;\n    esac\n    ;;\n  esac\n  shlibpath_var=LD_LIBRARY${shlibsuff}_PATH\n  shlibpath_overrides_runpath=no\n  sys_lib_search_path_spec=\"/usr/lib$libsuff /lib$libsuff /usr/local/lib$libsuff\"\n  sys_lib_dlsearch_path_spec=\"/usr/lib$libsuff /lib$libsuff\"\n  hardcode_into_libs=yes\n  ;;\n\n# No shared lib support for Linux oldld, aout, or coff.\nlinux*oldld* | linux*aout* | linux*coff*)\n  dynamic_linker=no\n  ;;\n\nlinux*android*)\n  version_type=none # Android doesn't support versioned libraries.\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext'\n  soname_spec='$libname$release$shared_ext'\n  finish_cmds=\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n\n  # This implies no fast_install, which is unacceptable.\n  # Some rework will be needed to allow for fast_install\n  # before this can be enabled.\n  hardcode_into_libs=yes\n\n  dynamic_linker='Android linker'\n  # Don't embed -rpath directories since the linker doesn't support them.\n  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n  ;;\n\n# This must be glibc/ELF.\nlinux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig -n $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n\n  # Some binutils ld are patched to set DT_RUNPATH\n  AC_CACHE_VAL([lt_cv_shlibpath_overrides_runpath],\n    [lt_cv_shlibpath_overrides_runpath=no\n    save_LDFLAGS=$LDFLAGS\n    save_libdir=$libdir\n    eval \"libdir=/foo; wl=\\\"$_LT_TAGVAR(lt_prog_compiler_wl, $1)\\\"; \\\n\t LDFLAGS=\\\"\\$LDFLAGS $_LT_TAGVAR(hardcode_libdir_flag_spec, $1)\\\"\"\n    AC_LINK_IFELSE([AC_LANG_PROGRAM([],[])],\n      [AS_IF([ ($OBJDUMP -p conftest$ac_exeext) 2>/dev/null | grep \"RUNPATH.*$libdir\" >/dev/null],\n\t [lt_cv_shlibpath_overrides_runpath=yes])])\n    LDFLAGS=$save_LDFLAGS\n    libdir=$save_libdir\n    ])\n  shlibpath_overrides_runpath=$lt_cv_shlibpath_overrides_runpath\n\n  # This implies no fast_install, which is unacceptable.\n  # Some rework will be needed to allow for fast_install\n  # before this can be enabled.\n  hardcode_into_libs=yes\n\n  # Ideally, we could use ldconfig to report *all* directores which are\n  # searched for libraries, however this is still not possible.  Aside from not\n  # being certain /sbin/ldconfig is available, command\n  # 'ldconfig -N -X -v | grep ^/' on 64bit Fedora does not report /usr/lib64,\n  # even though it is searched at run-time.  Try to do the best guess by\n  # appending ld.so.conf contents (and includes) to the search path.\n  if test -f /etc/ld.so.conf; then\n    lt_ld_extra=`awk '/^include / { system(sprintf(\"cd /etc; cat %s 2>/dev/null\", \\[$]2)); skip = 1; } { if (!skip) print \\[$]0; skip = 0; }' < /etc/ld.so.conf | $SED -e 's/#.*//;/^[\t ]*hwcap[\t ]/d;s/[:,\t]/ /g;s/=[^=]*$//;s/=[^= ]* / /g;s/\"//g;/^$/d' | tr '\\n' ' '`\n    sys_lib_dlsearch_path_spec=\"/lib /usr/lib $lt_ld_extra\"\n  fi\n\n  # We used to test for /lib/ld.so.1 and disable shared libraries on\n  # powerpc, because MkLinux only supported shared libraries with the\n  # GNU dynamic linker.  Since this was broken with cross compilers,\n  # most powerpc-linux boxes support dynamic linking these days and\n  # people can always --disable-shared, the test was removed, and we\n  # assume the GNU/Linux dynamic linker is in use.\n  dynamic_linker='GNU/Linux ld.so'\n  ;;\n\nnetbsd*)\n  version_type=sunos\n  need_lib_prefix=no\n  need_version=no\n  if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$shared_ext$versuffix'\n    finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig -m $libdir'\n    dynamic_linker='NetBSD (a.out) ld.so'\n  else\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n    soname_spec='$libname$release$shared_ext$major'\n    dynamic_linker='NetBSD ld.elf_so'\n  fi\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  hardcode_into_libs=yes\n  ;;\n\nnewsos6)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  ;;\n\n*nto* | *qnx*)\n  version_type=qnx\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  dynamic_linker='ldqnx.so'\n  ;;\n\nopenbsd* | bitrig*)\n  version_type=sunos\n  sys_lib_dlsearch_path_spec=/usr/lib\n  need_lib_prefix=no\n  if test -z \"`echo __ELF__ | $CC -E - | $GREP __ELF__`\"; then\n    need_version=no\n  else\n    need_version=yes\n  fi\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$shared_ext$versuffix'\n  finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig -m $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  ;;\n\nos2*)\n  libname_spec='$name'\n  version_type=windows\n  shrext_cmds=.dll\n  need_version=no\n  need_lib_prefix=no\n  # OS/2 can only load a DLL with a base name of 8 characters or less.\n  soname_spec='`test -n \"$os2dllname\" && libname=\"$os2dllname\";\n    v=$($ECHO $release$versuffix | tr -d .-);\n    n=$($ECHO $libname | cut -b -$((8 - ${#v})) | tr . _);\n    $ECHO $n$v`$shared_ext'\n  library_names_spec='${libname}_dll.$libext'\n  dynamic_linker='OS/2 ld.exe'\n  shlibpath_var=BEGINLIBPATH\n  sys_lib_search_path_spec=\"/lib /usr/lib /usr/local/lib\"\n  sys_lib_dlsearch_path_spec=$sys_lib_search_path_spec\n  postinstall_cmds='base_file=`basename \\$file`~\n    dlpath=`$SHELL 2>&1 -c '\\''. $dir/'\\''\\$base_file'\\''i; $ECHO \\$dlname'\\''`~\n    dldir=$destdir/`dirname \\$dlpath`~\n    test -d \\$dldir || mkdir -p \\$dldir~\n    $install_prog $dir/$dlname \\$dldir/$dlname~\n    chmod a+x \\$dldir/$dlname~\n    if test -n '\\''$stripme'\\'' && test -n '\\''$striplib'\\''; then\n      eval '\\''$striplib \\$dldir/$dlname'\\'' || exit \\$?;\n    fi'\n  postuninstall_cmds='dldll=`$SHELL 2>&1 -c '\\''. $file; $ECHO \\$dlname'\\''`~\n    dlpath=$dir/\\$dldll~\n    $RM \\$dlpath'\n  ;;\n\nosf3* | osf4* | osf5*)\n  version_type=osf\n  need_lib_prefix=no\n  need_version=no\n  soname_spec='$libname$release$shared_ext$major'\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  shlibpath_var=LD_LIBRARY_PATH\n  sys_lib_search_path_spec=\"/usr/shlib /usr/ccs/lib /usr/lib/cmplrs/cc /usr/lib /usr/local/lib /var/shlib\"\n  sys_lib_dlsearch_path_spec=$sys_lib_search_path_spec\n  ;;\n\nrdos*)\n  dynamic_linker=no\n  ;;\n\nsolaris*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  hardcode_into_libs=yes\n  # ldd complains unless libraries are executable\n  postinstall_cmds='chmod +x $lib'\n  ;;\n\nsunos4*)\n  version_type=sunos\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$shared_ext$versuffix'\n  finish_cmds='PATH=\"\\$PATH:/usr/etc\" ldconfig $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  if test yes = \"$with_gnu_ld\"; then\n    need_lib_prefix=no\n  fi\n  need_version=yes\n  ;;\n\nsysv4 | sysv4.3*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  case $host_vendor in\n    sni)\n      shlibpath_overrides_runpath=no\n      need_lib_prefix=no\n      runpath_var=LD_RUN_PATH\n      ;;\n    siemens)\n      need_lib_prefix=no\n      ;;\n    motorola)\n      need_lib_prefix=no\n      need_version=no\n      shlibpath_overrides_runpath=no\n      sys_lib_search_path_spec='/lib /usr/lib /usr/ccs/lib'\n      ;;\n  esac\n  ;;\n\nsysv4*MP*)\n  if test -d /usr/nec; then\n    version_type=linux # correct to gnu/linux during the next big refactor\n    library_names_spec='$libname$shared_ext.$versuffix $libname$shared_ext.$major $libname$shared_ext'\n    soname_spec='$libname$shared_ext.$major'\n    shlibpath_var=LD_LIBRARY_PATH\n  fi\n  ;;\n\nsysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX* | sysv4*uw2*)\n  version_type=sco\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  hardcode_into_libs=yes\n  if test yes = \"$with_gnu_ld\"; then\n    sys_lib_search_path_spec='/usr/local/lib /usr/gnu/lib /usr/ccs/lib /usr/lib /lib'\n  else\n    sys_lib_search_path_spec='/usr/ccs/lib /usr/lib'\n    case $host_os in\n      sco3.2v5*)\n        sys_lib_search_path_spec=\"$sys_lib_search_path_spec /lib\"\n\t;;\n    esac\n  fi\n  sys_lib_dlsearch_path_spec='/usr/lib'\n  ;;\n\ntpf*)\n  # TPF is a cross-target only.  Preferred cross-host = GNU/Linux.\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  ;;\n\nuts4*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  ;;\n\n*)\n  dynamic_linker=no\n  ;;\nesac\nAC_MSG_RESULT([$dynamic_linker])\ntest no = \"$dynamic_linker\" && can_build_shared=no\n\nvariables_saved_for_relink=\"PATH $shlibpath_var $runpath_var\"\nif test yes = \"$GCC\"; then\n  variables_saved_for_relink=\"$variables_saved_for_relink GCC_EXEC_PREFIX COMPILER_PATH LIBRARY_PATH\"\nfi\n\nif test set = \"${lt_cv_sys_lib_search_path_spec+set}\"; then\n  sys_lib_search_path_spec=$lt_cv_sys_lib_search_path_spec\nfi\n\nif test set = \"${lt_cv_sys_lib_dlsearch_path_spec+set}\"; then\n  sys_lib_dlsearch_path_spec=$lt_cv_sys_lib_dlsearch_path_spec\nfi\n\n# remember unaugmented sys_lib_dlsearch_path content for libtool script decls...\nconfigure_time_dlsearch_path=$sys_lib_dlsearch_path_spec\n\n# ... but it needs LT_SYS_LIBRARY_PATH munging for other configure-time code\nfunc_munge_path_list sys_lib_dlsearch_path_spec \"$LT_SYS_LIBRARY_PATH\"\n\n# to be used as default LT_SYS_LIBRARY_PATH value in generated libtool\nconfigure_time_lt_sys_library_path=$LT_SYS_LIBRARY_PATH\n\n_LT_DECL([], [variables_saved_for_relink], [1],\n    [Variables whose values should be saved in libtool wrapper scripts and\n    restored at link time])\n_LT_DECL([], [need_lib_prefix], [0],\n    [Do we need the \"lib\" prefix for modules?])\n_LT_DECL([], [need_version], [0], [Do we need a version for libraries?])\n_LT_DECL([], [version_type], [0], [Library versioning type])\n_LT_DECL([], [runpath_var], [0],  [Shared library runtime path variable])\n_LT_DECL([], [shlibpath_var], [0],[Shared library path variable])\n_LT_DECL([], [shlibpath_overrides_runpath], [0],\n    [Is shlibpath searched before the hard-coded library search path?])\n_LT_DECL([], [libname_spec], [1], [Format of library name prefix])\n_LT_DECL([], [library_names_spec], [1],\n    [[List of archive names.  First name is the real one, the rest are links.\n    The last name is the one that the linker finds with -lNAME]])\n_LT_DECL([], [soname_spec], [1],\n    [[The coded name of the library, if different from the real name]])\n_LT_DECL([], [install_override_mode], [1],\n    [Permission mode override for installation of shared libraries])\n_LT_DECL([], [postinstall_cmds], [2],\n    [Command to use after installation of a shared archive])\n_LT_DECL([], [postuninstall_cmds], [2],\n    [Command to use after uninstallation of a shared archive])\n_LT_DECL([], [finish_cmds], [2],\n    [Commands used to finish a libtool library installation in a directory])\n_LT_DECL([], [finish_eval], [1],\n    [[As \"finish_cmds\", except a single script fragment to be evaled but\n    not shown]])\n_LT_DECL([], [hardcode_into_libs], [0],\n    [Whether we should hardcode library paths into libraries])\n_LT_DECL([], [sys_lib_search_path_spec], [2],\n    [Compile-time system search path for libraries])\n_LT_DECL([sys_lib_dlsearch_path_spec], [configure_time_dlsearch_path], [2],\n    [Detected run-time system search path for libraries])\n_LT_DECL([], [configure_time_lt_sys_library_path], [2],\n    [Explicit LT_SYS_LIBRARY_PATH set during ./configure time])\n])# _LT_SYS_DYNAMIC_LINKER\n\n\n# _LT_PATH_TOOL_PREFIX(TOOL)\n# --------------------------\n# find a file program that can recognize shared library\nAC_DEFUN([_LT_PATH_TOOL_PREFIX],\n[m4_require([_LT_DECL_EGREP])dnl\nAC_MSG_CHECKING([for $1])\nAC_CACHE_VAL(lt_cv_path_MAGIC_CMD,\n[case $MAGIC_CMD in\n[[\\\\/*] |  ?:[\\\\/]*])\n  lt_cv_path_MAGIC_CMD=$MAGIC_CMD # Let the user override the test with a path.\n  ;;\n*)\n  lt_save_MAGIC_CMD=$MAGIC_CMD\n  lt_save_ifs=$IFS; IFS=$PATH_SEPARATOR\ndnl $ac_dummy forces splitting on constant user-supplied paths.\ndnl POSIX.2 word splitting is done only on the output of word expansions,\ndnl not every word.  This closes a longstanding sh security hole.\n  ac_dummy=\"m4_if([$2], , $PATH, [$2])\"\n  for ac_dir in $ac_dummy; do\n    IFS=$lt_save_ifs\n    test -z \"$ac_dir\" && ac_dir=.\n    if test -f \"$ac_dir/$1\"; then\n      lt_cv_path_MAGIC_CMD=$ac_dir/\"$1\"\n      if test -n \"$file_magic_test_file\"; then\n\tcase $deplibs_check_method in\n\t\"file_magic \"*)\n\t  file_magic_regex=`expr \"$deplibs_check_method\" : \"file_magic \\(.*\\)\"`\n\t  MAGIC_CMD=$lt_cv_path_MAGIC_CMD\n\t  if eval $file_magic_cmd \\$file_magic_test_file 2> /dev/null |\n\t    $EGREP \"$file_magic_regex\" > /dev/null; then\n\t    :\n\t  else\n\t    cat <<_LT_EOF 1>&2\n\n*** Warning: the command libtool uses to detect shared libraries,\n*** $file_magic_cmd, produces output that libtool cannot recognize.\n*** The result is that libtool may fail to recognize shared libraries\n*** as such.  This will affect the creation of libtool libraries that\n*** depend on shared libraries, but programs linked with such libtool\n*** libraries will work regardless of this problem.  Nevertheless, you\n*** may want to report the problem to your system manager and/or to\n*** bug-libtool@gnu.org\n\n_LT_EOF\n\t  fi ;;\n\tesac\n      fi\n      break\n    fi\n  done\n  IFS=$lt_save_ifs\n  MAGIC_CMD=$lt_save_MAGIC_CMD\n  ;;\nesac])\nMAGIC_CMD=$lt_cv_path_MAGIC_CMD\nif test -n \"$MAGIC_CMD\"; then\n  AC_MSG_RESULT($MAGIC_CMD)\nelse\n  AC_MSG_RESULT(no)\nfi\n_LT_DECL([], [MAGIC_CMD], [0],\n\t [Used to examine libraries when file_magic_cmd begins with \"file\"])dnl\n])# _LT_PATH_TOOL_PREFIX\n\n# Old name:\nAU_ALIAS([AC_PATH_TOOL_PREFIX], [_LT_PATH_TOOL_PREFIX])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_PATH_TOOL_PREFIX], [])\n\n\n# _LT_PATH_MAGIC\n# --------------\n# find a file program that can recognize a shared library\nm4_defun([_LT_PATH_MAGIC],\n[_LT_PATH_TOOL_PREFIX(${ac_tool_prefix}file, /usr/bin$PATH_SEPARATOR$PATH)\nif test -z \"$lt_cv_path_MAGIC_CMD\"; then\n  if test -n \"$ac_tool_prefix\"; then\n    _LT_PATH_TOOL_PREFIX(file, /usr/bin$PATH_SEPARATOR$PATH)\n  else\n    MAGIC_CMD=:\n  fi\nfi\n])# _LT_PATH_MAGIC\n\n\n# LT_PATH_LD\n# ----------\n# find the pathname to the GNU or non-GNU linker\nAC_DEFUN([LT_PATH_LD],\n[AC_REQUIRE([AC_PROG_CC])dnl\nAC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_CANONICAL_BUILD])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_PROG_ECHO_BACKSLASH])dnl\n\nAC_ARG_WITH([gnu-ld],\n    [AS_HELP_STRING([--with-gnu-ld],\n\t[assume the C compiler uses GNU ld @<:@default=no@:>@])],\n    [test no = \"$withval\" || with_gnu_ld=yes],\n    [with_gnu_ld=no])dnl\n\nac_prog=ld\nif test yes = \"$GCC\"; then\n  # Check if gcc -print-prog-name=ld gives a path.\n  AC_MSG_CHECKING([for ld used by $CC])\n  case $host in\n  *-*-mingw*)\n    # gcc leaves a trailing carriage return, which upsets mingw\n    ac_prog=`($CC -print-prog-name=ld) 2>&5 | tr -d '\\015'` ;;\n  *)\n    ac_prog=`($CC -print-prog-name=ld) 2>&5` ;;\n  esac\n  case $ac_prog in\n    # Accept absolute paths.\n    [[\\\\/]]* | ?:[[\\\\/]]*)\n      re_direlt='/[[^/]][[^/]]*/\\.\\./'\n      # Canonicalize the pathname of ld\n      ac_prog=`$ECHO \"$ac_prog\"| $SED 's%\\\\\\\\%/%g'`\n      while $ECHO \"$ac_prog\" | $GREP \"$re_direlt\" > /dev/null 2>&1; do\n\tac_prog=`$ECHO $ac_prog| $SED \"s%$re_direlt%/%\"`\n      done\n      test -z \"$LD\" && LD=$ac_prog\n      ;;\n  \"\")\n    # If it fails, then pretend we aren't using GCC.\n    ac_prog=ld\n    ;;\n  *)\n    # If it is relative, then search for the first ld in PATH.\n    with_gnu_ld=unknown\n    ;;\n  esac\nelif test yes = \"$with_gnu_ld\"; then\n  AC_MSG_CHECKING([for GNU ld])\nelse\n  AC_MSG_CHECKING([for non-GNU ld])\nfi\nAC_CACHE_VAL(lt_cv_path_LD,\n[if test -z \"$LD\"; then\n  lt_save_ifs=$IFS; IFS=$PATH_SEPARATOR\n  for ac_dir in $PATH; do\n    IFS=$lt_save_ifs\n    test -z \"$ac_dir\" && ac_dir=.\n    if test -f \"$ac_dir/$ac_prog\" || test -f \"$ac_dir/$ac_prog$ac_exeext\"; then\n      lt_cv_path_LD=$ac_dir/$ac_prog\n      # Check to see if the program is GNU ld.  I'd rather use --version,\n      # but apparently some variants of GNU ld only accept -v.\n      # Break only if it was the GNU/non-GNU ld that we prefer.\n      case `\"$lt_cv_path_LD\" -v 2>&1 </dev/null` in\n      *GNU* | *'with BFD'*)\n\ttest no != \"$with_gnu_ld\" && break\n\t;;\n      *)\n\ttest yes != \"$with_gnu_ld\" && break\n\t;;\n      esac\n    fi\n  done\n  IFS=$lt_save_ifs\nelse\n  lt_cv_path_LD=$LD # Let the user override the test with a path.\nfi])\nLD=$lt_cv_path_LD\nif test -n \"$LD\"; then\n  AC_MSG_RESULT($LD)\nelse\n  AC_MSG_RESULT(no)\nfi\ntest -z \"$LD\" && AC_MSG_ERROR([no acceptable ld found in \\$PATH])\n_LT_PATH_LD_GNU\nAC_SUBST([LD])\n\n_LT_TAGDECL([], [LD], [1], [The linker used to build libraries])\n])# LT_PATH_LD\n\n# Old names:\nAU_ALIAS([AM_PROG_LD], [LT_PATH_LD])\nAU_ALIAS([AC_PROG_LD], [LT_PATH_LD])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AM_PROG_LD], [])\ndnl AC_DEFUN([AC_PROG_LD], [])\n\n\n# _LT_PATH_LD_GNU\n#- --------------\nm4_defun([_LT_PATH_LD_GNU],\n[AC_CACHE_CHECK([if the linker ($LD) is GNU ld], lt_cv_prog_gnu_ld,\n[# I'd rather use --version here, but apparently some GNU lds only accept -v.\ncase `$LD -v 2>&1 </dev/null` in\n*GNU* | *'with BFD'*)\n  lt_cv_prog_gnu_ld=yes\n  ;;\n*)\n  lt_cv_prog_gnu_ld=no\n  ;;\nesac])\nwith_gnu_ld=$lt_cv_prog_gnu_ld\n])# _LT_PATH_LD_GNU\n\n\n# _LT_CMD_RELOAD\n# --------------\n# find reload flag for linker\n#   -- PORTME Some linkers may need a different reload flag.\nm4_defun([_LT_CMD_RELOAD],\n[AC_CACHE_CHECK([for $LD option to reload object files],\n  lt_cv_ld_reload_flag,\n  [lt_cv_ld_reload_flag='-r'])\nreload_flag=$lt_cv_ld_reload_flag\ncase $reload_flag in\n\"\" | \" \"*) ;;\n*) reload_flag=\" $reload_flag\" ;;\nesac\nreload_cmds='$LD$reload_flag -o $output$reload_objs'\ncase $host_os in\n  cygwin* | mingw* | pw32* | cegcc*)\n    if test yes != \"$GCC\"; then\n      reload_cmds=false\n    fi\n    ;;\n  darwin*)\n    if test yes = \"$GCC\"; then\n      reload_cmds='$LTCC $LTCFLAGS -nostdlib $wl-r -o $output$reload_objs'\n    else\n      reload_cmds='$LD$reload_flag -o $output$reload_objs'\n    fi\n    ;;\nesac\n_LT_TAGDECL([], [reload_flag], [1], [How to create reloadable object files])dnl\n_LT_TAGDECL([], [reload_cmds], [2])dnl\n])# _LT_CMD_RELOAD\n\n\n# _LT_PATH_DD\n# -----------\n# find a working dd\nm4_defun([_LT_PATH_DD],\n[AC_CACHE_CHECK([for a working dd], [ac_cv_path_lt_DD],\n[printf 0123456789abcdef0123456789abcdef >conftest.i\ncat conftest.i conftest.i >conftest2.i\n: ${lt_DD:=$DD}\nAC_PATH_PROGS_FEATURE_CHECK([lt_DD], [dd],\n[if \"$ac_path_lt_DD\" bs=32 count=1 <conftest2.i >conftest.out 2>/dev/null; then\n  cmp -s conftest.i conftest.out \\\n  && ac_cv_path_lt_DD=\"$ac_path_lt_DD\" ac_path_lt_DD_found=:\nfi])\nrm -f conftest.i conftest2.i conftest.out])\n])# _LT_PATH_DD\n\n\n# _LT_CMD_TRUNCATE\n# ----------------\n# find command to truncate a binary pipe\nm4_defun([_LT_CMD_TRUNCATE],\n[m4_require([_LT_PATH_DD])\nAC_CACHE_CHECK([how to truncate binary pipes], [lt_cv_truncate_bin],\n[printf 0123456789abcdef0123456789abcdef >conftest.i\ncat conftest.i conftest.i >conftest2.i\nlt_cv_truncate_bin=\nif \"$ac_cv_path_lt_DD\" bs=32 count=1 <conftest2.i >conftest.out 2>/dev/null; then\n  cmp -s conftest.i conftest.out \\\n  && lt_cv_truncate_bin=\"$ac_cv_path_lt_DD bs=4096 count=1\"\nfi\nrm -f conftest.i conftest2.i conftest.out\ntest -z \"$lt_cv_truncate_bin\" && lt_cv_truncate_bin=\"$SED -e 4q\"])\n_LT_DECL([lt_truncate_bin], [lt_cv_truncate_bin], [1],\n  [Command to truncate a binary pipe])\n])# _LT_CMD_TRUNCATE\n\n\n# _LT_CHECK_MAGIC_METHOD\n# ----------------------\n# how to check for library dependencies\n#  -- PORTME fill in with the dynamic library characteristics\nm4_defun([_LT_CHECK_MAGIC_METHOD],\n[m4_require([_LT_DECL_EGREP])\nm4_require([_LT_DECL_OBJDUMP])\nAC_CACHE_CHECK([how to recognize dependent libraries],\nlt_cv_deplibs_check_method,\n[lt_cv_file_magic_cmd='$MAGIC_CMD'\nlt_cv_file_magic_test_file=\nlt_cv_deplibs_check_method='unknown'\n# Need to set the preceding variable on all platforms that support\n# interlibrary dependencies.\n# 'none' -- dependencies not supported.\n# 'unknown' -- same as none, but documents that we really don't know.\n# 'pass_all' -- all dependencies passed with no checks.\n# 'test_compile' -- check by making test program.\n# 'file_magic [[regex]]' -- check by looking for files in library path\n# that responds to the $file_magic_cmd with a given extended regex.\n# If you have 'file' or equivalent on your system and you're not sure\n# whether 'pass_all' will *always* work, you probably want this one.\n\ncase $host_os in\naix[[4-9]]*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nbeos*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nbsdi[[45]]*)\n  lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (shared object|dynamic lib)'\n  lt_cv_file_magic_cmd='/usr/bin/file -L'\n  lt_cv_file_magic_test_file=/shlib/libc.so\n  ;;\n\ncygwin*)\n  # func_win32_libid is a shell function defined in ltmain.sh\n  lt_cv_deplibs_check_method='file_magic ^x86 archive import|^x86 DLL'\n  lt_cv_file_magic_cmd='func_win32_libid'\n  ;;\n\nmingw* | pw32*)\n  # Base MSYS/MinGW do not provide the 'file' command needed by\n  # func_win32_libid shell function, so use a weaker test based on 'objdump',\n  # unless we find 'file', for example because we are cross-compiling.\n  if ( file / ) >/dev/null 2>&1; then\n    lt_cv_deplibs_check_method='file_magic ^x86 archive import|^x86 DLL'\n    lt_cv_file_magic_cmd='func_win32_libid'\n  else\n    # Keep this pattern in sync with the one in func_win32_libid.\n    lt_cv_deplibs_check_method='file_magic file format (pei*-i386(.*architecture: i386)?|pe-arm-wince|pe-x86-64)'\n    lt_cv_file_magic_cmd='$OBJDUMP -f'\n  fi\n  ;;\n\ncegcc*)\n  # use the weaker test based on 'objdump'. See mingw*.\n  lt_cv_deplibs_check_method='file_magic file format pe-arm-.*little(.*architecture: arm)?'\n  lt_cv_file_magic_cmd='$OBJDUMP -f'\n  ;;\n\ndarwin* | rhapsody*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nfreebsd* | dragonfly*)\n  if echo __ELF__ | $CC -E - | $GREP __ELF__ > /dev/null; then\n    case $host_cpu in\n    i*86 )\n      # Not sure whether the presence of OpenBSD here was a mistake.\n      # Let's accept both of them until this is cleared up.\n      lt_cv_deplibs_check_method='file_magic (FreeBSD|OpenBSD|DragonFly)/i[[3-9]]86 (compact )?demand paged shared library'\n      lt_cv_file_magic_cmd=/usr/bin/file\n      lt_cv_file_magic_test_file=`echo /usr/lib/libc.so.*`\n      ;;\n    esac\n  else\n    lt_cv_deplibs_check_method=pass_all\n  fi\n  ;;\n\nhaiku*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nhpux10.20* | hpux11*)\n  lt_cv_file_magic_cmd=/usr/bin/file\n  case $host_cpu in\n  ia64*)\n    lt_cv_deplibs_check_method='file_magic (s[[0-9]][[0-9]][[0-9]]|ELF-[[0-9]][[0-9]]) shared object file - IA64'\n    lt_cv_file_magic_test_file=/usr/lib/hpux32/libc.so\n    ;;\n  hppa*64*)\n    [lt_cv_deplibs_check_method='file_magic (s[0-9][0-9][0-9]|ELF[ -][0-9][0-9])(-bit)?( [LM]SB)? shared object( file)?[, -]* PA-RISC [0-9]\\.[0-9]']\n    lt_cv_file_magic_test_file=/usr/lib/pa20_64/libc.sl\n    ;;\n  *)\n    lt_cv_deplibs_check_method='file_magic (s[[0-9]][[0-9]][[0-9]]|PA-RISC[[0-9]]\\.[[0-9]]) shared library'\n    lt_cv_file_magic_test_file=/usr/lib/libc.sl\n    ;;\n  esac\n  ;;\n\ninterix[[3-9]]*)\n  # PIC code is broken on Interix 3.x, that's why |\\.a not |_pic\\.a here\n  lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so|\\.a)$'\n  ;;\n\nirix5* | irix6* | nonstopux*)\n  case $LD in\n  *-32|*\"-32 \") libmagic=32-bit;;\n  *-n32|*\"-n32 \") libmagic=N32;;\n  *-64|*\"-64 \") libmagic=64-bit;;\n  *) libmagic=never-match;;\n  esac\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\n# This must be glibc/ELF.\nlinux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nnetbsd*)\n  if echo __ELF__ | $CC -E - | $GREP __ELF__ > /dev/null; then\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so\\.[[0-9]]+\\.[[0-9]]+|_pic\\.a)$'\n  else\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so|_pic\\.a)$'\n  fi\n  ;;\n\nnewos6*)\n  lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (executable|dynamic lib)'\n  lt_cv_file_magic_cmd=/usr/bin/file\n  lt_cv_file_magic_test_file=/usr/lib/libnls.so\n  ;;\n\n*nto* | *qnx*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nopenbsd* | bitrig*)\n  if test -z \"`echo __ELF__ | $CC -E - | $GREP __ELF__`\"; then\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so\\.[[0-9]]+\\.[[0-9]]+|\\.so|_pic\\.a)$'\n  else\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so\\.[[0-9]]+\\.[[0-9]]+|_pic\\.a)$'\n  fi\n  ;;\n\nosf3* | osf4* | osf5*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nrdos*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nsolaris*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nsysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX* | sysv4*uw2*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nsysv4 | sysv4.3*)\n  case $host_vendor in\n  motorola)\n    lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (shared object|dynamic lib) M[[0-9]][[0-9]]* Version [[0-9]]'\n    lt_cv_file_magic_test_file=`echo /usr/lib/libc.so*`\n    ;;\n  ncr)\n    lt_cv_deplibs_check_method=pass_all\n    ;;\n  sequent)\n    lt_cv_file_magic_cmd='/bin/file'\n    lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[LM]]SB (shared object|dynamic lib )'\n    ;;\n  sni)\n    lt_cv_file_magic_cmd='/bin/file'\n    lt_cv_deplibs_check_method=\"file_magic ELF [[0-9]][[0-9]]*-bit [[LM]]SB dynamic lib\"\n    lt_cv_file_magic_test_file=/lib/libc.so\n    ;;\n  siemens)\n    lt_cv_deplibs_check_method=pass_all\n    ;;\n  pc)\n    lt_cv_deplibs_check_method=pass_all\n    ;;\n  esac\n  ;;\n\ntpf*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\nos2*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\nesac\n])\n\nfile_magic_glob=\nwant_nocaseglob=no\nif test \"$build\" = \"$host\"; then\n  case $host_os in\n  mingw* | pw32*)\n    if ( shopt | grep nocaseglob ) >/dev/null 2>&1; then\n      want_nocaseglob=yes\n    else\n      file_magic_glob=`echo aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ | $SED -e \"s/\\(..\\)/s\\/[[\\1]]\\/[[\\1]]\\/g;/g\"`\n    fi\n    ;;\n  esac\nfi\n\nfile_magic_cmd=$lt_cv_file_magic_cmd\ndeplibs_check_method=$lt_cv_deplibs_check_method\ntest -z \"$deplibs_check_method\" && deplibs_check_method=unknown\n\n_LT_DECL([], [deplibs_check_method], [1],\n    [Method to check whether dependent libraries are shared objects])\n_LT_DECL([], [file_magic_cmd], [1],\n    [Command to use when deplibs_check_method = \"file_magic\"])\n_LT_DECL([], [file_magic_glob], [1],\n    [How to find potential files when deplibs_check_method = \"file_magic\"])\n_LT_DECL([], [want_nocaseglob], [1],\n    [Find potential files using nocaseglob when deplibs_check_method = \"file_magic\"])\n])# _LT_CHECK_MAGIC_METHOD\n\n\n# LT_PATH_NM\n# ----------\n# find the pathname to a BSD- or MS-compatible name lister\nAC_DEFUN([LT_PATH_NM],\n[AC_REQUIRE([AC_PROG_CC])dnl\nAC_CACHE_CHECK([for BSD- or MS-compatible name lister (nm)], lt_cv_path_NM,\n[if test -n \"$NM\"; then\n  # Let the user override the test.\n  lt_cv_path_NM=$NM\nelse\n  lt_nm_to_check=${ac_tool_prefix}nm\n  if test -n \"$ac_tool_prefix\" && test \"$build\" = \"$host\"; then\n    lt_nm_to_check=\"$lt_nm_to_check nm\"\n  fi\n  for lt_tmp_nm in $lt_nm_to_check; do\n    lt_save_ifs=$IFS; IFS=$PATH_SEPARATOR\n    for ac_dir in $PATH /usr/ccs/bin/elf /usr/ccs/bin /usr/ucb /bin; do\n      IFS=$lt_save_ifs\n      test -z \"$ac_dir\" && ac_dir=.\n      tmp_nm=$ac_dir/$lt_tmp_nm\n      if test -f \"$tmp_nm\" || test -f \"$tmp_nm$ac_exeext\"; then\n\t# Check to see if the nm accepts a BSD-compat flag.\n\t# Adding the 'sed 1q' prevents false positives on HP-UX, which says:\n\t#   nm: unknown option \"B\" ignored\n\t# Tru64's nm complains that /dev/null is an invalid object file\n\t# MSYS converts /dev/null to NUL, MinGW nm treats NUL as empty\n\tcase $build_os in\n\tmingw*) lt_bad_file=conftest.nm/nofile ;;\n\t*) lt_bad_file=/dev/null ;;\n\tesac\n\tcase `\"$tmp_nm\" -B $lt_bad_file 2>&1 | sed '1q'` in\n\t*$lt_bad_file* | *'Invalid file or object type'*)\n\t  lt_cv_path_NM=\"$tmp_nm -B\"\n\t  break 2\n\t  ;;\n\t*)\n\t  case `\"$tmp_nm\" -p /dev/null 2>&1 | sed '1q'` in\n\t  */dev/null*)\n\t    lt_cv_path_NM=\"$tmp_nm -p\"\n\t    break 2\n\t    ;;\n\t  *)\n\t    lt_cv_path_NM=${lt_cv_path_NM=\"$tmp_nm\"} # keep the first match, but\n\t    continue # so that we can try to find one that supports BSD flags\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n      fi\n    done\n    IFS=$lt_save_ifs\n  done\n  : ${lt_cv_path_NM=no}\nfi])\nif test no != \"$lt_cv_path_NM\"; then\n  NM=$lt_cv_path_NM\nelse\n  # Didn't find any BSD compatible name lister, look for dumpbin.\n  if test -n \"$DUMPBIN\"; then :\n    # Let the user override the test.\n  else\n    AC_CHECK_TOOLS(DUMPBIN, [dumpbin \"link -dump\"], :)\n    case `$DUMPBIN -symbols -headers /dev/null 2>&1 | sed '1q'` in\n    *COFF*)\n      DUMPBIN=\"$DUMPBIN -symbols -headers\"\n      ;;\n    *)\n      DUMPBIN=:\n      ;;\n    esac\n  fi\n  AC_SUBST([DUMPBIN])\n  if test : != \"$DUMPBIN\"; then\n    NM=$DUMPBIN\n  fi\nfi\ntest -z \"$NM\" && NM=nm\nAC_SUBST([NM])\n_LT_DECL([], [NM], [1], [A BSD- or MS-compatible name lister])dnl\n\nAC_CACHE_CHECK([the name lister ($NM) interface], [lt_cv_nm_interface],\n  [lt_cv_nm_interface=\"BSD nm\"\n  echo \"int some_variable = 0;\" > conftest.$ac_ext\n  (eval echo \"\\\"\\$as_me:$LINENO: $ac_compile\\\"\" >&AS_MESSAGE_LOG_FD)\n  (eval \"$ac_compile\" 2>conftest.err)\n  cat conftest.err >&AS_MESSAGE_LOG_FD\n  (eval echo \"\\\"\\$as_me:$LINENO: $NM \\\\\\\"conftest.$ac_objext\\\\\\\"\\\"\" >&AS_MESSAGE_LOG_FD)\n  (eval \"$NM \\\"conftest.$ac_objext\\\"\" 2>conftest.err > conftest.out)\n  cat conftest.err >&AS_MESSAGE_LOG_FD\n  (eval echo \"\\\"\\$as_me:$LINENO: output\\\"\" >&AS_MESSAGE_LOG_FD)\n  cat conftest.out >&AS_MESSAGE_LOG_FD\n  if $GREP 'External.*some_variable' conftest.out > /dev/null; then\n    lt_cv_nm_interface=\"MS dumpbin\"\n  fi\n  rm -f conftest*])\n])# LT_PATH_NM\n\n# Old names:\nAU_ALIAS([AM_PROG_NM], [LT_PATH_NM])\nAU_ALIAS([AC_PROG_NM], [LT_PATH_NM])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AM_PROG_NM], [])\ndnl AC_DEFUN([AC_PROG_NM], [])\n\n# _LT_CHECK_SHAREDLIB_FROM_LINKLIB\n# --------------------------------\n# how to determine the name of the shared library\n# associated with a specific link library.\n#  -- PORTME fill in with the dynamic library characteristics\nm4_defun([_LT_CHECK_SHAREDLIB_FROM_LINKLIB],\n[m4_require([_LT_DECL_EGREP])\nm4_require([_LT_DECL_OBJDUMP])\nm4_require([_LT_DECL_DLLTOOL])\nAC_CACHE_CHECK([how to associate runtime and link libraries],\nlt_cv_sharedlib_from_linklib_cmd,\n[lt_cv_sharedlib_from_linklib_cmd='unknown'\n\ncase $host_os in\ncygwin* | mingw* | pw32* | cegcc*)\n  # two different shell functions defined in ltmain.sh;\n  # decide which one to use based on capabilities of $DLLTOOL\n  case `$DLLTOOL --help 2>&1` in\n  *--identify-strict*)\n    lt_cv_sharedlib_from_linklib_cmd=func_cygming_dll_for_implib\n    ;;\n  *)\n    lt_cv_sharedlib_from_linklib_cmd=func_cygming_dll_for_implib_fallback\n    ;;\n  esac\n  ;;\n*)\n  # fallback: assume linklib IS sharedlib\n  lt_cv_sharedlib_from_linklib_cmd=$ECHO\n  ;;\nesac\n])\nsharedlib_from_linklib_cmd=$lt_cv_sharedlib_from_linklib_cmd\ntest -z \"$sharedlib_from_linklib_cmd\" && sharedlib_from_linklib_cmd=$ECHO\n\n_LT_DECL([], [sharedlib_from_linklib_cmd], [1],\n    [Command to associate shared and link libraries])\n])# _LT_CHECK_SHAREDLIB_FROM_LINKLIB\n\n\n# _LT_PATH_MANIFEST_TOOL\n# ----------------------\n# locate the manifest tool\nm4_defun([_LT_PATH_MANIFEST_TOOL],\n[AC_CHECK_TOOL(MANIFEST_TOOL, mt, :)\ntest -z \"$MANIFEST_TOOL\" && MANIFEST_TOOL=mt\nAC_CACHE_CHECK([if $MANIFEST_TOOL is a manifest tool], [lt_cv_path_mainfest_tool],\n  [lt_cv_path_mainfest_tool=no\n  echo \"$as_me:$LINENO: $MANIFEST_TOOL '-?'\" >&AS_MESSAGE_LOG_FD\n  $MANIFEST_TOOL '-?' 2>conftest.err > conftest.out\n  cat conftest.err >&AS_MESSAGE_LOG_FD\n  if $GREP 'Manifest Tool' conftest.out > /dev/null; then\n    lt_cv_path_mainfest_tool=yes\n  fi\n  rm -f conftest*])\nif test yes != \"$lt_cv_path_mainfest_tool\"; then\n  MANIFEST_TOOL=:\nfi\n_LT_DECL([], [MANIFEST_TOOL], [1], [Manifest tool])dnl\n])# _LT_PATH_MANIFEST_TOOL\n\n\n# _LT_DLL_DEF_P([FILE])\n# ---------------------\n# True iff FILE is a Windows DLL '.def' file.\n# Keep in sync with func_dll_def_p in the libtool script\nAC_DEFUN([_LT_DLL_DEF_P],\n[dnl\n  test DEF = \"`$SED -n dnl\n    -e '\\''s/^[[\t ]]*//'\\'' dnl Strip leading whitespace\n    -e '\\''/^\\(;.*\\)*$/d'\\'' dnl      Delete empty lines and comments\n    -e '\\''s/^\\(EXPORTS\\|LIBRARY\\)\\([[\t ]].*\\)*$/DEF/p'\\'' dnl\n    -e q dnl                          Only consider the first \"real\" line\n    $1`\" dnl\n])# _LT_DLL_DEF_P\n\n\n# LT_LIB_M\n# --------\n# check for math library\nAC_DEFUN([LT_LIB_M],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nLIBM=\ncase $host in\n*-*-beos* | *-*-cegcc* | *-*-cygwin* | *-*-haiku* | *-*-pw32* | *-*-darwin*)\n  # These system don't have libm, or don't need it\n  ;;\n*-ncr-sysv4.3*)\n  AC_CHECK_LIB(mw, _mwvalidcheckl, LIBM=-lmw)\n  AC_CHECK_LIB(m, cos, LIBM=\"$LIBM -lm\")\n  ;;\n*)\n  AC_CHECK_LIB(m, cos, LIBM=-lm)\n  ;;\nesac\nAC_SUBST([LIBM])\n])# LT_LIB_M\n\n# Old name:\nAU_ALIAS([AC_CHECK_LIBM], [LT_LIB_M])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_CHECK_LIBM], [])\n\n\n# _LT_COMPILER_NO_RTTI([TAGNAME])\n# -------------------------------\nm4_defun([_LT_COMPILER_NO_RTTI],\n[m4_require([_LT_TAG_COMPILER])dnl\n\n_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=\n\nif test yes = \"$GCC\"; then\n  case $cc_basename in\n  nvcc*)\n    _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=' -Xcompiler -fno-builtin' ;;\n  *)\n    _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=' -fno-builtin' ;;\n  esac\n\n  _LT_COMPILER_OPTION([if $compiler supports -fno-rtti -fno-exceptions],\n    lt_cv_prog_compiler_rtti_exceptions,\n    [-fno-rtti -fno-exceptions], [],\n    [_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=\"$_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1) -fno-rtti -fno-exceptions\"])\nfi\n_LT_TAGDECL([no_builtin_flag], [lt_prog_compiler_no_builtin_flag], [1],\n\t[Compiler flag to turn off builtin functions])\n])# _LT_COMPILER_NO_RTTI\n\n\n# _LT_CMD_GLOBAL_SYMBOLS\n# ----------------------\nm4_defun([_LT_CMD_GLOBAL_SYMBOLS],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_PROG_CC])dnl\nAC_REQUIRE([AC_PROG_AWK])dnl\nAC_REQUIRE([LT_PATH_NM])dnl\nAC_REQUIRE([LT_PATH_LD])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_TAG_COMPILER])dnl\n\n# Check for command to grab the raw symbol name followed by C symbol from nm.\nAC_MSG_CHECKING([command to parse $NM output from $compiler object])\nAC_CACHE_VAL([lt_cv_sys_global_symbol_pipe],\n[\n# These are sane defaults that work on at least a few old systems.\n# [They come from Ultrix.  What could be older than Ultrix?!! ;)]\n\n# Character class describing NM global symbol codes.\nsymcode='[[BCDEGRST]]'\n\n# Regexp to match symbols that can be accessed directly from C.\nsympat='\\([[_A-Za-z]][[_A-Za-z0-9]]*\\)'\n\n# Define system-specific variables.\ncase $host_os in\naix*)\n  symcode='[[BCDT]]'\n  ;;\ncygwin* | mingw* | pw32* | cegcc*)\n  symcode='[[ABCDGISTW]]'\n  ;;\nhpux*)\n  if test ia64 = \"$host_cpu\"; then\n    symcode='[[ABCDEGRST]]'\n  fi\n  ;;\nirix* | nonstopux*)\n  symcode='[[BCDEGRST]]'\n  ;;\nosf*)\n  symcode='[[BCDEGQRST]]'\n  ;;\nsolaris*)\n  symcode='[[BDRT]]'\n  ;;\nsco3.2v5*)\n  symcode='[[DT]]'\n  ;;\nsysv4.2uw2*)\n  symcode='[[DT]]'\n  ;;\nsysv5* | sco5v6* | unixware* | OpenUNIX*)\n  symcode='[[ABDT]]'\n  ;;\nsysv4)\n  symcode='[[DFNSTU]]'\n  ;;\nesac\n\n# If we're using GNU nm, then use its standard symbol codes.\ncase `$NM -V 2>&1` in\n*GNU* | *'with BFD'*)\n  symcode='[[ABCDGIRSTW]]' ;;\nesac\n\nif test \"$lt_cv_nm_interface\" = \"MS dumpbin\"; then\n  # Gets list of data symbols to import.\n  lt_cv_sys_global_symbol_to_import=\"sed -n -e 's/^I .* \\(.*\\)$/\\1/p'\"\n  # Adjust the below global symbol transforms to fixup imported variables.\n  lt_cdecl_hook=\" -e 's/^I .* \\(.*\\)$/extern __declspec(dllimport) char \\1;/p'\"\n  lt_c_name_hook=\" -e 's/^I .* \\(.*\\)$/  {\\\"\\1\\\", (void *) 0},/p'\"\n  lt_c_name_lib_hook=\"\\\n  -e 's/^I .* \\(lib.*\\)$/  {\\\"\\1\\\", (void *) 0},/p'\\\n  -e 's/^I .* \\(.*\\)$/  {\\\"lib\\1\\\", (void *) 0},/p'\"\nelse\n  # Disable hooks by default.\n  lt_cv_sys_global_symbol_to_import=\n  lt_cdecl_hook=\n  lt_c_name_hook=\n  lt_c_name_lib_hook=\nfi\n\n# Transform an extracted symbol line into a proper C declaration.\n# Some systems (esp. on ia64) link data and code symbols differently,\n# so use this general approach.\nlt_cv_sys_global_symbol_to_cdecl=\"sed -n\"\\\n$lt_cdecl_hook\\\n\" -e 's/^T .* \\(.*\\)$/extern int \\1();/p'\"\\\n\" -e 's/^$symcode$symcode* .* \\(.*\\)$/extern char \\1;/p'\"\n\n# Transform an extracted symbol line into symbol name and symbol address\nlt_cv_sys_global_symbol_to_c_name_address=\"sed -n\"\\\n$lt_c_name_hook\\\n\" -e 's/^: \\(.*\\) .*$/  {\\\"\\1\\\", (void *) 0},/p'\"\\\n\" -e 's/^$symcode$symcode* .* \\(.*\\)$/  {\\\"\\1\\\", (void *) \\&\\1},/p'\"\n\n# Transform an extracted symbol line into symbol name with lib prefix and\n# symbol address.\nlt_cv_sys_global_symbol_to_c_name_address_lib_prefix=\"sed -n\"\\\n$lt_c_name_lib_hook\\\n\" -e 's/^: \\(.*\\) .*$/  {\\\"\\1\\\", (void *) 0},/p'\"\\\n\" -e 's/^$symcode$symcode* .* \\(lib.*\\)$/  {\\\"\\1\\\", (void *) \\&\\1},/p'\"\\\n\" -e 's/^$symcode$symcode* .* \\(.*\\)$/  {\\\"lib\\1\\\", (void *) \\&\\1},/p'\"\n\n# Handle CRLF in mingw tool chain\nopt_cr=\ncase $build_os in\nmingw*)\n  opt_cr=`$ECHO 'x\\{0,1\\}' | tr x '\\015'` # option cr in regexp\n  ;;\nesac\n\n# Try without a prefix underscore, then with it.\nfor ac_symprfx in \"\" \"_\"; do\n\n  # Transform symcode, sympat, and symprfx into a raw symbol and a C symbol.\n  symxfrm=\"\\\\1 $ac_symprfx\\\\2 \\\\2\"\n\n  # Write the raw and C identifiers.\n  if test \"$lt_cv_nm_interface\" = \"MS dumpbin\"; then\n    # Fake it for dumpbin and say T for any non-static function,\n    # D for any global variable and I for any imported variable.\n    # Also find C++ and __fastcall symbols from MSVC++,\n    # which start with @ or ?.\n    lt_cv_sys_global_symbol_pipe=\"$AWK ['\"\\\n\"     {last_section=section; section=\\$ 3};\"\\\n\"     /^COFF SYMBOL TABLE/{for(i in hide) delete hide[i]};\"\\\n\"     /Section length .*#relocs.*(pick any)/{hide[last_section]=1};\"\\\n\"     /^ *Symbol name *: /{split(\\$ 0,sn,\\\":\\\"); si=substr(sn[2],2)};\"\\\n\"     /^ *Type *: code/{print \\\"T\\\",si,substr(si,length(prfx))};\"\\\n\"     /^ *Type *: data/{print \\\"I\\\",si,substr(si,length(prfx))};\"\\\n\"     \\$ 0!~/External *\\|/{next};\"\\\n\"     / 0+ UNDEF /{next}; / UNDEF \\([^|]\\)*()/{next};\"\\\n\"     {if(hide[section]) next};\"\\\n\"     {f=\\\"D\\\"}; \\$ 0~/\\(\\).*\\|/{f=\\\"T\\\"};\"\\\n\"     {split(\\$ 0,a,/\\||\\r/); split(a[2],s)};\"\\\n\"     s[1]~/^[@?]/{print f,s[1],s[1]; next};\"\\\n\"     s[1]~prfx {split(s[1],t,\\\"@\\\"); print f,t[1],substr(t[1],length(prfx))}\"\\\n\"     ' prfx=^$ac_symprfx]\"\n  else\n    lt_cv_sys_global_symbol_pipe=\"sed -n -e 's/^.*[[\t ]]\\($symcode$symcode*\\)[[\t ]][[\t ]]*$ac_symprfx$sympat$opt_cr$/$symxfrm/p'\"\n  fi\n  lt_cv_sys_global_symbol_pipe=\"$lt_cv_sys_global_symbol_pipe | sed '/ __gnu_lto/d'\"\n\n  # Check to see that the pipe works correctly.\n  pipe_works=no\n\n  rm -f conftest*\n  cat > conftest.$ac_ext <<_LT_EOF\n#ifdef __cplusplus\nextern \"C\" {\n#endif\nchar nm_test_var;\nvoid nm_test_func(void);\nvoid nm_test_func(void){}\n#ifdef __cplusplus\n}\n#endif\nint main(){nm_test_var='a';nm_test_func();return(0);}\n_LT_EOF\n\n  if AC_TRY_EVAL(ac_compile); then\n    # Now try to grab the symbols.\n    nlist=conftest.nm\n    if AC_TRY_EVAL(NM conftest.$ac_objext \\| \"$lt_cv_sys_global_symbol_pipe\" \\> $nlist) && test -s \"$nlist\"; then\n      # Try sorting and uniquifying the output.\n      if sort \"$nlist\" | uniq > \"$nlist\"T; then\n\tmv -f \"$nlist\"T \"$nlist\"\n      else\n\trm -f \"$nlist\"T\n      fi\n\n      # Make sure that we snagged all the symbols we need.\n      if $GREP ' nm_test_var$' \"$nlist\" >/dev/null; then\n\tif $GREP ' nm_test_func$' \"$nlist\" >/dev/null; then\n\t  cat <<_LT_EOF > conftest.$ac_ext\n/* Keep this code in sync between libtool.m4, ltmain, lt_system.h, and tests.  */\n#if defined _WIN32 || defined __CYGWIN__ || defined _WIN32_WCE\n/* DATA imports from DLLs on WIN32 can't be const, because runtime\n   relocations are performed -- see ld's documentation on pseudo-relocs.  */\n# define LT@&t@_DLSYM_CONST\n#elif defined __osf__\n/* This system does not cope well with relocations in const data.  */\n# define LT@&t@_DLSYM_CONST\n#else\n# define LT@&t@_DLSYM_CONST const\n#endif\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n_LT_EOF\n\t  # Now generate the symbol file.\n\t  eval \"$lt_cv_sys_global_symbol_to_cdecl\"' < \"$nlist\" | $GREP -v main >> conftest.$ac_ext'\n\n\t  cat <<_LT_EOF >> conftest.$ac_ext\n\n/* The mapping between symbol names and symbols.  */\nLT@&t@_DLSYM_CONST struct {\n  const char *name;\n  void       *address;\n}\nlt__PROGRAM__LTX_preloaded_symbols[[]] =\n{\n  { \"@PROGRAM@\", (void *) 0 },\n_LT_EOF\n\t  $SED \"s/^$symcode$symcode* .* \\(.*\\)$/  {\\\"\\1\\\", (void *) \\&\\1},/\" < \"$nlist\" | $GREP -v main >> conftest.$ac_ext\n\t  cat <<\\_LT_EOF >> conftest.$ac_ext\n  {0, (void *) 0}\n};\n\n/* This works around a problem in FreeBSD linker */\n#ifdef FREEBSD_WORKAROUND\nstatic const void *lt_preloaded_setup() {\n  return lt__PROGRAM__LTX_preloaded_symbols;\n}\n#endif\n\n#ifdef __cplusplus\n}\n#endif\n_LT_EOF\n\t  # Now try linking the two files.\n\t  mv conftest.$ac_objext conftstm.$ac_objext\n\t  lt_globsym_save_LIBS=$LIBS\n\t  lt_globsym_save_CFLAGS=$CFLAGS\n\t  LIBS=conftstm.$ac_objext\n\t  CFLAGS=\"$CFLAGS$_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)\"\n\t  if AC_TRY_EVAL(ac_link) && test -s conftest$ac_exeext; then\n\t    pipe_works=yes\n\t  fi\n\t  LIBS=$lt_globsym_save_LIBS\n\t  CFLAGS=$lt_globsym_save_CFLAGS\n\telse\n\t  echo \"cannot find nm_test_func in $nlist\" >&AS_MESSAGE_LOG_FD\n\tfi\n      else\n\techo \"cannot find nm_test_var in $nlist\" >&AS_MESSAGE_LOG_FD\n      fi\n    else\n      echo \"cannot run $lt_cv_sys_global_symbol_pipe\" >&AS_MESSAGE_LOG_FD\n    fi\n  else\n    echo \"$progname: failed program was:\" >&AS_MESSAGE_LOG_FD\n    cat conftest.$ac_ext >&5\n  fi\n  rm -rf conftest* conftst*\n\n  # Do not use the global_symbol_pipe unless it works.\n  if test yes = \"$pipe_works\"; then\n    break\n  else\n    lt_cv_sys_global_symbol_pipe=\n  fi\ndone\n])\nif test -z \"$lt_cv_sys_global_symbol_pipe\"; then\n  lt_cv_sys_global_symbol_to_cdecl=\nfi\nif test -z \"$lt_cv_sys_global_symbol_pipe$lt_cv_sys_global_symbol_to_cdecl\"; then\n  AC_MSG_RESULT(failed)\nelse\n  AC_MSG_RESULT(ok)\nfi\n\n# Response file support.\nif test \"$lt_cv_nm_interface\" = \"MS dumpbin\"; then\n  nm_file_list_spec='@'\nelif $NM --help 2>/dev/null | grep '[[@]]FILE' >/dev/null; then\n  nm_file_list_spec='@'\nfi\n\n_LT_DECL([global_symbol_pipe], [lt_cv_sys_global_symbol_pipe], [1],\n    [Take the output of nm and produce a listing of raw symbols and C names])\n_LT_DECL([global_symbol_to_cdecl], [lt_cv_sys_global_symbol_to_cdecl], [1],\n    [Transform the output of nm in a proper C declaration])\n_LT_DECL([global_symbol_to_import], [lt_cv_sys_global_symbol_to_import], [1],\n    [Transform the output of nm into a list of symbols to manually relocate])\n_LT_DECL([global_symbol_to_c_name_address],\n    [lt_cv_sys_global_symbol_to_c_name_address], [1],\n    [Transform the output of nm in a C name address pair])\n_LT_DECL([global_symbol_to_c_name_address_lib_prefix],\n    [lt_cv_sys_global_symbol_to_c_name_address_lib_prefix], [1],\n    [Transform the output of nm in a C name address pair when lib prefix is needed])\n_LT_DECL([nm_interface], [lt_cv_nm_interface], [1],\n    [The name lister interface])\n_LT_DECL([], [nm_file_list_spec], [1],\n    [Specify filename containing input files for $NM])\n]) # _LT_CMD_GLOBAL_SYMBOLS\n\n\n# _LT_COMPILER_PIC([TAGNAME])\n# ---------------------------\nm4_defun([_LT_COMPILER_PIC],\n[m4_require([_LT_TAG_COMPILER])dnl\n_LT_TAGVAR(lt_prog_compiler_wl, $1)=\n_LT_TAGVAR(lt_prog_compiler_pic, $1)=\n_LT_TAGVAR(lt_prog_compiler_static, $1)=\n\nm4_if([$1], [CXX], [\n  # C++ specific cases for pic, static, wl, etc.\n  if test yes = \"$GXX\"; then\n    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\n    case $host_os in\n    aix*)\n      # All AIX code is PIC.\n      if test ia64 = \"$host_cpu\"; then\n\t# AIX 5 now supports IA64 processor\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      fi\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n        ;;\n      m68k)\n            # FIXME: we need at least 68020 code to build shared libraries, but\n            # adding the '-m68020' flag to GCC prevents building anything better,\n            # like '-m68040'.\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-m68020 -resident32 -malways-restore-a4'\n        ;;\n      esac\n      ;;\n\n    beos* | irix5* | irix6* | nonstopux* | osf3* | osf4* | osf5*)\n      # PIC is the default for these OSes.\n      ;;\n    mingw* | cygwin* | os2* | pw32* | cegcc*)\n      # This hack is so that the source file can tell whether it is being\n      # built for inclusion in a dll (and should export symbols for example).\n      # Although the cygwin gcc ignores -fPIC, still need this for old-style\n      # (--disable-auto-import) libraries\n      m4_if([$1], [GCJ], [],\n\t[_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n      case $host_os in\n      os2*)\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-static'\n\t;;\n      esac\n      ;;\n    darwin* | rhapsody*)\n      # PIC is the default on this platform\n      # Common symbols not allowed in MH_DYLIB files\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fno-common'\n      ;;\n    *djgpp*)\n      # DJGPP does not support shared libraries at all\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n      ;;\n    haiku*)\n      # PIC is the default for Haiku.\n      # The \"-static\" flag exists, but is broken.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)=\n      ;;\n    interix[[3-9]]*)\n      # Interix 3.x gcc -fpic/-fPIC options generate broken code.\n      # Instead, we relocate shared libraries at runtime.\n      ;;\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)=-Kconform_pic\n      fi\n      ;;\n    hpux*)\n      # PIC is the default for 64-bit PA HP-UX, but not for 32-bit\n      # PA HP-UX.  On IA64 HP-UX, PIC is the default but the pic flag\n      # sets the default TLS model and affects inlining.\n      case $host_cpu in\n      hppa*64*)\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t;;\n      esac\n      ;;\n    *qnx* | *nto*)\n      # QNX uses GNU C++, but need to define -shared option too, otherwise\n      # it will coredump.\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n      ;;\n    *)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n    esac\n  else\n    case $host_os in\n      aix[[4-9]]*)\n\t# All AIX code is PIC.\n\tif test ia64 = \"$host_cpu\"; then\n\t  # AIX 5 now supports IA64 processor\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\telse\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-bnso -bI:/lib/syscalls.exp'\n\tfi\n\t;;\n      chorus*)\n\tcase $cc_basename in\n\tcxch68*)\n\t  # Green Hills C++ Compiler\n\t  # _LT_TAGVAR(lt_prog_compiler_static, $1)=\"--no_auto_instantiation -u __main -u __premain -u _abort -r $COOL_DIR/lib/libOrb.a $MVME_DIR/lib/CC/libC.a $MVME_DIR/lib/classix/libcx.s.a\"\n\t  ;;\n\tesac\n\t;;\n      mingw* | cygwin* | os2* | pw32* | cegcc*)\n\t# This hack is so that the source file can tell whether it is being\n\t# built for inclusion in a dll (and should export symbols for example).\n\tm4_if([$1], [GCJ], [],\n\t  [_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n\t;;\n      dgux*)\n\tcase $cc_basename in\n\t  ec++*)\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    ;;\n\t  ghcx*)\n\t    # Green Hills C++ Compiler\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      freebsd* | dragonfly*)\n\t# FreeBSD uses GNU C++\n\t;;\n      hpux9* | hpux10* | hpux11*)\n\tcase $cc_basename in\n\t  CC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-a ${wl}archive'\n\t    if test ia64 != \"$host_cpu\"; then\n\t      _LT_TAGVAR(lt_prog_compiler_pic, $1)='+Z'\n\t    fi\n\t    ;;\n\t  aCC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-a ${wl}archive'\n\t    case $host_cpu in\n\t    hppa*64*|ia64*)\n\t      # +Z the default\n\t      ;;\n\t    *)\n\t      _LT_TAGVAR(lt_prog_compiler_pic, $1)='+Z'\n\t      ;;\n\t    esac\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      interix*)\n\t# This is c89, which is MS Visual C++ (no shared libs)\n\t# Anyone wants to do a port?\n\t;;\n      irix5* | irix6* | nonstopux*)\n\tcase $cc_basename in\n\t  CC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n\t    # CC pic flag -KPIC is the default.\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      linux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n\tcase $cc_basename in\n\t  KCC*)\n\t    # KAI C++ Compiler\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='--backend -Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t    ;;\n\t  ecpc* )\n\t    # old Intel C++ for x86_64, which still supported -KPIC.\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t    ;;\n\t  icpc* )\n\t    # Intel C++, used to be incompatible with GCC.\n\t    # ICC 10 doesn't accept -KPIC any more.\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t    ;;\n\t  pgCC* | pgcpp*)\n\t    # Portland Group C++ compiler\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fpic'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    ;;\n\t  cxx*)\n\t    # Compaq C++\n\t    # Make sure the PIC flag is empty.  It appears that all Alpha\n\t    # Linux and Compaq Tru64 Unix objects are PIC.\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n\t    ;;\n\t  xlc* | xlC* | bgxl[[cC]]* | mpixl[[cC]]*)\n\t    # IBM XL 8.0, 9.0 on PPC and BlueGene\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-qpic'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-qstaticlink'\n\t    ;;\n\t  *)\n\t    case `$CC -V 2>&1 | sed 5q` in\n\t    *Sun\\ C*)\n\t      # Sun C++ 5.9\n\t      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n\t      ;;\n\t    esac\n\t    ;;\n\tesac\n\t;;\n      lynxos*)\n\t;;\n      m88k*)\n\t;;\n      mvs*)\n\tcase $cc_basename in\n\t  cxx*)\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-W c,exportall'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      netbsd*)\n\t;;\n      *qnx* | *nto*)\n        # QNX uses GNU C++, but need to define -shared option too, otherwise\n        # it will coredump.\n        _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n        ;;\n      osf3* | osf4* | osf5*)\n\tcase $cc_basename in\n\t  KCC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='--backend -Wl,'\n\t    ;;\n\t  RCC*)\n\t    # Rational C++ 2.4.1\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    ;;\n\t  cxx*)\n\t    # Digital/Compaq C++\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    # Make sure the PIC flag is empty.  It appears that all Alpha\n\t    # Linux and Compaq Tru64 Unix objects are PIC.\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      psos*)\n\t;;\n      solaris*)\n\tcase $cc_basename in\n\t  CC* | sunCC*)\n\t    # Sun C++ 4.2, 5.x and Centerline C++\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n\t    ;;\n\t  gcx*)\n\t    # Green Hills C++ Compiler\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      sunos4*)\n\tcase $cc_basename in\n\t  CC*)\n\t    # Sun C++ 4.x\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    ;;\n\t  lcc*)\n\t    # Lucid\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      sysv5* | unixware* | sco3.2v5* | sco5v6* | OpenUNIX*)\n\tcase $cc_basename in\n\t  CC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    ;;\n\tesac\n\t;;\n      tandem*)\n\tcase $cc_basename in\n\t  NCC*)\n\t    # NonStop-UX NCC 3.20\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      vxworks*)\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n\t;;\n    esac\n  fi\n],\n[\n  if test yes = \"$GCC\"; then\n    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\n    case $host_os in\n      aix*)\n      # All AIX code is PIC.\n      if test ia64 = \"$host_cpu\"; then\n\t# AIX 5 now supports IA64 processor\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      fi\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n        ;;\n      m68k)\n            # FIXME: we need at least 68020 code to build shared libraries, but\n            # adding the '-m68020' flag to GCC prevents building anything better,\n            # like '-m68040'.\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-m68020 -resident32 -malways-restore-a4'\n        ;;\n      esac\n      ;;\n\n    beos* | irix5* | irix6* | nonstopux* | osf3* | osf4* | osf5*)\n      # PIC is the default for these OSes.\n      ;;\n\n    mingw* | cygwin* | pw32* | os2* | cegcc*)\n      # This hack is so that the source file can tell whether it is being\n      # built for inclusion in a dll (and should export symbols for example).\n      # Although the cygwin gcc ignores -fPIC, still need this for old-style\n      # (--disable-auto-import) libraries\n      m4_if([$1], [GCJ], [],\n\t[_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n      case $host_os in\n      os2*)\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-static'\n\t;;\n      esac\n      ;;\n\n    darwin* | rhapsody*)\n      # PIC is the default on this platform\n      # Common symbols not allowed in MH_DYLIB files\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fno-common'\n      ;;\n\n    haiku*)\n      # PIC is the default for Haiku.\n      # The \"-static\" flag exists, but is broken.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)=\n      ;;\n\n    hpux*)\n      # PIC is the default for 64-bit PA HP-UX, but not for 32-bit\n      # PA HP-UX.  On IA64 HP-UX, PIC is the default but the pic flag\n      # sets the default TLS model and affects inlining.\n      case $host_cpu in\n      hppa*64*)\n\t# +Z the default\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t;;\n      esac\n      ;;\n\n    interix[[3-9]]*)\n      # Interix 3.x gcc -fpic/-fPIC options generate broken code.\n      # Instead, we relocate shared libraries at runtime.\n      ;;\n\n    msdosdjgpp*)\n      # Just because we use GCC doesn't mean we suddenly get shared libraries\n      # on systems that don't support them.\n      _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n      enable_shared=no\n      ;;\n\n    *nto* | *qnx*)\n      # QNX uses GNU C++, but need to define -shared option too, otherwise\n      # it will coredump.\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n      ;;\n\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)=-Kconform_pic\n      fi\n      ;;\n\n    *)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n    esac\n\n    case $cc_basename in\n    nvcc*) # Cuda Compiler Driver 2.2\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Xlinker '\n      if test -n \"$_LT_TAGVAR(lt_prog_compiler_pic, $1)\"; then\n        _LT_TAGVAR(lt_prog_compiler_pic, $1)=\"-Xcompiler $_LT_TAGVAR(lt_prog_compiler_pic, $1)\"\n      fi\n      ;;\n    esac\n  else\n    # PORTME Check for flag to pass linker flags through the system compiler.\n    case $host_os in\n    aix*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      if test ia64 = \"$host_cpu\"; then\n\t# AIX 5 now supports IA64 processor\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      else\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-bnso -bI:/lib/syscalls.exp'\n      fi\n      ;;\n\n    darwin* | rhapsody*)\n      # PIC is the default on this platform\n      # Common symbols not allowed in MH_DYLIB files\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fno-common'\n      case $cc_basename in\n      nagfor*)\n        # NAG Fortran compiler\n        _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,-Wl,,'\n        _LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n        _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n        ;;\n      esac\n      ;;\n\n    mingw* | cygwin* | pw32* | os2* | cegcc*)\n      # This hack is so that the source file can tell whether it is being\n      # built for inclusion in a dll (and should export symbols for example).\n      m4_if([$1], [GCJ], [],\n\t[_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n      case $host_os in\n      os2*)\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-static'\n\t;;\n      esac\n      ;;\n\n    hpux9* | hpux10* | hpux11*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      # PIC is the default for IA64 HP-UX and 64-bit HP-UX, but\n      # not for PA HP-UX.\n      case $host_cpu in\n      hppa*64*|ia64*)\n\t# +Z the default\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='+Z'\n\t;;\n      esac\n      # Is there a better lt_prog_compiler_static that works with the bundled CC?\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-a ${wl}archive'\n      ;;\n\n    irix5* | irix6* | nonstopux*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      # PIC (with -KPIC) is the default.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n      ;;\n\n    linux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n      case $cc_basename in\n      # old Intel for x86_64, which still supported -KPIC.\n      ecc*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n        ;;\n      # icc used to be incompatible with GCC.\n      # ICC 10 doesn't accept -KPIC any more.\n      icc* | ifort*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n        ;;\n      # Lahey Fortran 8.1.\n      lf95*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='--shared'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='--static'\n\t;;\n      nagfor*)\n\t# NAG Fortran compiler\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,-Wl,,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t;;\n      tcc*)\n\t# Fabrice Bellard et al's Tiny C Compiler\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t;;\n      pgcc* | pgf77* | pgf90* | pgf95* | pgfortran*)\n        # Portland Group compilers (*not* the Pentium gcc compiler,\n\t# which looks to be a dead project)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fpic'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n        ;;\n      ccc*)\n        _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n        # All Alpha code is PIC.\n        _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n        ;;\n      xl* | bgxl* | bgf* | mpixl*)\n\t# IBM XL C 8.0/Fortran 10.1, 11.1 on PPC and BlueGene\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-qpic'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-qstaticlink'\n\t;;\n      *)\n\tcase `$CC -V 2>&1 | sed 5q` in\n\t*Sun\\ Ceres\\ Fortran* | *Sun*Fortran*\\ [[1-7]].* | *Sun*Fortran*\\ 8.[[0-3]]*)\n\t  # Sun Fortran 8.3 passes all unrecognized flags to the linker\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)=''\n\t  ;;\n\t*Sun\\ F* | *Sun*Fortran*)\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n\t  ;;\n\t*Sun\\ C*)\n\t  # Sun C 5.9\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t  ;;\n        *Intel*\\ [[CF]]*Compiler*)\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t  ;;\n\t*Portland\\ Group*)\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fpic'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  ;;\n\tesac\n\t;;\n      esac\n      ;;\n\n    newsos6)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    *nto* | *qnx*)\n      # QNX uses GNU C++, but need to define -shared option too, otherwise\n      # it will coredump.\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n      ;;\n\n    osf3* | osf4* | osf5*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      # All OSF/1 code is PIC.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n      ;;\n\n    rdos*)\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n      ;;\n\n    solaris*)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      case $cc_basename in\n      f77* | f90* | f95* | sunf77* | sunf90* | sunf95*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld ';;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,';;\n      esac\n      ;;\n\n    sunos4*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    sysv4 | sysv4.2uw2* | sysv4.3*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-Kconform_pic'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      fi\n      ;;\n\n    sysv5* | unixware* | sco3.2v5* | sco5v6* | OpenUNIX*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    unicos*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n      ;;\n\n    uts4*)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    *)\n      _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n      ;;\n    esac\n  fi\n])\ncase $host_os in\n  # For platforms that do not support PIC, -DPIC is meaningless:\n  *djgpp*)\n    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n    ;;\n  *)\n    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\"$_LT_TAGVAR(lt_prog_compiler_pic, $1)@&t@m4_if([$1],[],[ -DPIC],[m4_if([$1],[CXX],[ -DPIC],[])])\"\n    ;;\nesac\n\nAC_CACHE_CHECK([for $compiler option to produce PIC],\n  [_LT_TAGVAR(lt_cv_prog_compiler_pic, $1)],\n  [_LT_TAGVAR(lt_cv_prog_compiler_pic, $1)=$_LT_TAGVAR(lt_prog_compiler_pic, $1)])\n_LT_TAGVAR(lt_prog_compiler_pic, $1)=$_LT_TAGVAR(lt_cv_prog_compiler_pic, $1)\n\n#\n# Check to make sure the PIC flag actually works.\n#\nif test -n \"$_LT_TAGVAR(lt_prog_compiler_pic, $1)\"; then\n  _LT_COMPILER_OPTION([if $compiler PIC flag $_LT_TAGVAR(lt_prog_compiler_pic, $1) works],\n    [_LT_TAGVAR(lt_cv_prog_compiler_pic_works, $1)],\n    [$_LT_TAGVAR(lt_prog_compiler_pic, $1)@&t@m4_if([$1],[],[ -DPIC],[m4_if([$1],[CXX],[ -DPIC],[])])], [],\n    [case $_LT_TAGVAR(lt_prog_compiler_pic, $1) in\n     \"\" | \" \"*) ;;\n     *) _LT_TAGVAR(lt_prog_compiler_pic, $1)=\" $_LT_TAGVAR(lt_prog_compiler_pic, $1)\" ;;\n     esac],\n    [_LT_TAGVAR(lt_prog_compiler_pic, $1)=\n     _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no])\nfi\n_LT_TAGDECL([pic_flag], [lt_prog_compiler_pic], [1],\n\t[Additional compiler flags for building library objects])\n\n_LT_TAGDECL([wl], [lt_prog_compiler_wl], [1],\n\t[How to pass a linker flag through the compiler])\n#\n# Check to make sure the static flag actually works.\n#\nwl=$_LT_TAGVAR(lt_prog_compiler_wl, $1) eval lt_tmp_static_flag=\\\"$_LT_TAGVAR(lt_prog_compiler_static, $1)\\\"\n_LT_LINKER_OPTION([if $compiler static flag $lt_tmp_static_flag works],\n  _LT_TAGVAR(lt_cv_prog_compiler_static_works, $1),\n  $lt_tmp_static_flag,\n  [],\n  [_LT_TAGVAR(lt_prog_compiler_static, $1)=])\n_LT_TAGDECL([link_static_flag], [lt_prog_compiler_static], [1],\n\t[Compiler flag to prevent dynamic linking])\n])# _LT_COMPILER_PIC\n\n\n# _LT_LINKER_SHLIBS([TAGNAME])\n# ----------------------------\n# See if the linker supports building shared libraries.\nm4_defun([_LT_LINKER_SHLIBS],\n[AC_REQUIRE([LT_PATH_LD])dnl\nAC_REQUIRE([LT_PATH_NM])dnl\nm4_require([_LT_PATH_MANIFEST_TOOL])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_CMD_GLOBAL_SYMBOLS])dnl\nm4_require([_LT_TAG_COMPILER])dnl\nAC_MSG_CHECKING([whether the $compiler linker ($LD) supports shared libraries])\nm4_if([$1], [CXX], [\n  _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\\''s/.* //'\\'' | sort | uniq > $export_symbols'\n  _LT_TAGVAR(exclude_expsyms, $1)=['_GLOBAL_OFFSET_TABLE_|_GLOBAL__F[ID]_.*']\n  case $host_os in\n  aix[[4-9]]*)\n    # If we're using GNU nm, then we don't want the \"-C\" option.\n    # -C means demangle to GNU nm, but means don't demangle to AIX nm.\n    # Without the \"-l\" option, or with the \"-B\" option, AIX nm treats\n    # weak defined symbols like other global defined symbols, whereas\n    # GNU nm marks them as \"W\".\n    # While the 'weak' keyword is ignored in the Export File, we need\n    # it in the Import File for the 'aix-soname' feature, so we have\n    # to replace the \"-B\" option with \"-P\" for AIX nm.\n    if $NM -V 2>&1 | $GREP 'GNU' > /dev/null; then\n      _LT_TAGVAR(export_symbols_cmds, $1)='$NM -Bpg $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\") || (\\$ 2 == \"W\")) && ([substr](\\$ 3,1,1) != \".\")) { if (\\$ 2 == \"W\") { print \\$ 3 \" weak\" } else { print \\$ 3 } } }'\\'' | sort -u > $export_symbols'\n    else\n      _LT_TAGVAR(export_symbols_cmds, $1)='`func_echo_all $NM | $SED -e '\\''s/B\\([[^B]]*\\)$/P\\1/'\\''` -PCpgl $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\") || (\\$ 2 == \"W\") || (\\$ 2 == \"V\") || (\\$ 2 == \"Z\")) && ([substr](\\$ 1,1,1) != \".\")) { if ((\\$ 2 == \"W\") || (\\$ 2 == \"V\") || (\\$ 2 == \"Z\")) { print \\$ 1 \" weak\" } else { print \\$ 1 } } }'\\'' | sort -u > $export_symbols'\n    fi\n    ;;\n  pw32*)\n    _LT_TAGVAR(export_symbols_cmds, $1)=$ltdll_cmds\n    ;;\n  cygwin* | mingw* | cegcc*)\n    case $cc_basename in\n    cl*)\n      _LT_TAGVAR(exclude_expsyms, $1)='_NULL_IMPORT_DESCRIPTOR|_IMPORT_DESCRIPTOR_.*'\n      ;;\n    *)\n      _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED -e '\\''/^[[BCDGRS]][[ ]]/s/.*[[ ]]\\([[^ ]]*\\)/\\1 DATA/;s/^.*[[ ]]__nm__\\([[^ ]]*\\)[[ ]][[^ ]]*/\\1 DATA/;/^I[[ ]]/d;/^[[AITW]][[ ]]/s/.* //'\\'' | sort | uniq > $export_symbols'\n      _LT_TAGVAR(exclude_expsyms, $1)=['[_]+GLOBAL_OFFSET_TABLE_|[_]+GLOBAL__[FID]_.*|[_]+head_[A-Za-z0-9_]+_dll|[A-Za-z0-9_]+_dll_iname']\n      ;;\n    esac\n    ;;\n  *)\n    _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\\''s/.* //'\\'' | sort | uniq > $export_symbols'\n    ;;\n  esac\n], [\n  runpath_var=\n  _LT_TAGVAR(allow_undefined_flag, $1)=\n  _LT_TAGVAR(always_export_symbols, $1)=no\n  _LT_TAGVAR(archive_cmds, $1)=\n  _LT_TAGVAR(archive_expsym_cmds, $1)=\n  _LT_TAGVAR(compiler_needs_object, $1)=no\n  _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n  _LT_TAGVAR(export_dynamic_flag_spec, $1)=\n  _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\\''s/.* //'\\'' | sort | uniq > $export_symbols'\n  _LT_TAGVAR(hardcode_automatic, $1)=no\n  _LT_TAGVAR(hardcode_direct, $1)=no\n  _LT_TAGVAR(hardcode_direct_absolute, $1)=no\n  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n  _LT_TAGVAR(hardcode_libdir_separator, $1)=\n  _LT_TAGVAR(hardcode_minus_L, $1)=no\n  _LT_TAGVAR(hardcode_shlibpath_var, $1)=unsupported\n  _LT_TAGVAR(inherit_rpath, $1)=no\n  _LT_TAGVAR(link_all_deplibs, $1)=unknown\n  _LT_TAGVAR(module_cmds, $1)=\n  _LT_TAGVAR(module_expsym_cmds, $1)=\n  _LT_TAGVAR(old_archive_from_new_cmds, $1)=\n  _LT_TAGVAR(old_archive_from_expsyms_cmds, $1)=\n  _LT_TAGVAR(thread_safe_flag_spec, $1)=\n  _LT_TAGVAR(whole_archive_flag_spec, $1)=\n  # include_expsyms should be a list of space-separated symbols to be *always*\n  # included in the symbol list\n  _LT_TAGVAR(include_expsyms, $1)=\n  # exclude_expsyms can be an extended regexp of symbols to exclude\n  # it will be wrapped by ' (' and ')$', so one must not match beginning or\n  # end of line.  Example: 'a|bc|.*d.*' will exclude the symbols 'a' and 'bc',\n  # as well as any symbol that contains 'd'.\n  _LT_TAGVAR(exclude_expsyms, $1)=['_GLOBAL_OFFSET_TABLE_|_GLOBAL__F[ID]_.*']\n  # Although _GLOBAL_OFFSET_TABLE_ is a valid symbol C name, most a.out\n  # platforms (ab)use it in PIC code, but their linkers get confused if\n  # the symbol is explicitly referenced.  Since portable code cannot\n  # rely on this symbol name, it's probably fine to never include it in\n  # preloaded symbol tables.\n  # Exclude shared library initialization/finalization symbols.\ndnl Note also adjust exclude_expsyms for C++ above.\n  extract_expsyms_cmds=\n\n  case $host_os in\n  cygwin* | mingw* | pw32* | cegcc*)\n    # FIXME: the MSVC++ port hasn't been tested in a loooong time\n    # When not using gcc, we currently assume that we are using\n    # Microsoft Visual C++.\n    if test yes != \"$GCC\"; then\n      with_gnu_ld=no\n    fi\n    ;;\n  interix*)\n    # we just hope/assume this is gcc and not c89 (= MSVC++)\n    with_gnu_ld=yes\n    ;;\n  openbsd* | bitrig*)\n    with_gnu_ld=no\n    ;;\n  esac\n\n  _LT_TAGVAR(ld_shlibs, $1)=yes\n\n  # On some targets, GNU ld is compatible enough with the native linker\n  # that we're better off using the native interface for both.\n  lt_use_gnu_ld_interface=no\n  if test yes = \"$with_gnu_ld\"; then\n    case $host_os in\n      aix*)\n\t# The AIX port of GNU ld has always aspired to compatibility\n\t# with the native linker.  However, as the warning in the GNU ld\n\t# block says, versions before 2.19.5* couldn't really create working\n\t# shared libraries, regardless of the interface used.\n\tcase `$LD -v 2>&1` in\n\t  *\\ \\(GNU\\ Binutils\\)\\ 2.19.5*) ;;\n\t  *\\ \\(GNU\\ Binutils\\)\\ 2.[[2-9]]*) ;;\n\t  *\\ \\(GNU\\ Binutils\\)\\ [[3-9]]*) ;;\n\t  *)\n\t    lt_use_gnu_ld_interface=yes\n\t    ;;\n\tesac\n\t;;\n      *)\n\tlt_use_gnu_ld_interface=yes\n\t;;\n    esac\n  fi\n\n  if test yes = \"$lt_use_gnu_ld_interface\"; then\n    # If archive_cmds runs LD, not CC, wlarc should be empty\n    wlarc='$wl'\n\n    # Set some defaults for GNU ld with shared library support. These\n    # are reset later if shared libraries are not supported. Putting them\n    # here allows them to be overridden if necessary.\n    runpath_var=LD_RUN_PATH\n    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n    # ancient GNU ld didn't support --whole-archive et. al.\n    if $LD --help 2>&1 | $GREP 'no-whole-archive' > /dev/null; then\n      _LT_TAGVAR(whole_archive_flag_spec, $1)=$wlarc'--whole-archive$convenience '$wlarc'--no-whole-archive'\n    else\n      _LT_TAGVAR(whole_archive_flag_spec, $1)=\n    fi\n    supports_anon_versioning=no\n    case `$LD -v | $SED -e 's/([^)]\\+)\\s\\+//' 2>&1` in\n      *GNU\\ gold*) supports_anon_versioning=yes ;;\n      *\\ [[01]].* | *\\ 2.[[0-9]].* | *\\ 2.10.*) ;; # catch versions < 2.11\n      *\\ 2.11.93.0.2\\ *) supports_anon_versioning=yes ;; # RH7.3 ...\n      *\\ 2.11.92.0.12\\ *) supports_anon_versioning=yes ;; # Mandrake 8.2 ...\n      *\\ 2.11.*) ;; # other 2.11 versions\n      *) supports_anon_versioning=yes ;;\n    esac\n\n    # See if GNU ld supports shared libraries.\n    case $host_os in\n    aix[[3-9]]*)\n      # On AIX/PPC, the GNU linker is very broken\n      if test ia64 != \"$host_cpu\"; then\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\tcat <<_LT_EOF 1>&2\n\n*** Warning: the GNU linker, at least up to release 2.19, is reported\n*** to be unable to reliably create shared libraries on AIX.\n*** Therefore, libtool is disabling shared libraries support.  If you\n*** really care for shared libraries, you may want to install binutils\n*** 2.20 or above, or modify your PATH so that a non-GNU linker is found.\n*** You will then need to restart the configuration process.\n\n_LT_EOF\n      fi\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n            _LT_TAGVAR(archive_expsym_cmds, $1)=''\n        ;;\n      m68k)\n            _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/a2ixlibrary.data~$ECHO \"#define NAME $libname\" > $output_objdir/a2ixlibrary.data~$ECHO \"#define LIBRARY_ID 1\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define VERSION $major\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define REVISION $revision\" >> $output_objdir/a2ixlibrary.data~$AR $AR_FLAGS $lib $libobjs~$RANLIB $lib~(cd $output_objdir && a2ixlibrary -32)'\n            _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n            _LT_TAGVAR(hardcode_minus_L, $1)=yes\n        ;;\n      esac\n      ;;\n\n    beos*)\n      if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t_LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t# Joseph Beckenbach <jrb3@best.com> says some releases of gcc\n\t# support --undefined.  This deserves some investigation.  FIXME\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -nostart $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    cygwin* | mingw* | pw32* | cegcc*)\n      # _LT_TAGVAR(hardcode_libdir_flag_spec, $1) is actually meaningless,\n      # as there is no search path for DLLs.\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-all-symbols'\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      _LT_TAGVAR(always_export_symbols, $1)=no\n      _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n      _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED -e '\\''/^[[BCDGRS]][[ ]]/s/.*[[ ]]\\([[^ ]]*\\)/\\1 DATA/;s/^.*[[ ]]__nm__\\([[^ ]]*\\)[[ ]][[^ ]]*/\\1 DATA/;/^I[[ ]]/d;/^[[AITW]][[ ]]/s/.* //'\\'' | sort | uniq > $export_symbols'\n      _LT_TAGVAR(exclude_expsyms, $1)=['[_]+GLOBAL_OFFSET_TABLE_|[_]+GLOBAL__[FID]_.*|[_]+head_[A-Za-z0-9_]+_dll|[A-Za-z0-9_]+_dll_iname']\n\n      if $LD --help 2>&1 | $GREP 'auto-import' > /dev/null; then\n        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags -o $output_objdir/$soname $wl--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n\t# If the export-symbols file already is a .def file, use it as\n\t# is; otherwise, prepend EXPORTS...\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='if _LT_DLL_DEF_P([$export_symbols]); then\n          cp $export_symbols $output_objdir/$soname.def;\n        else\n          echo EXPORTS > $output_objdir/$soname.def;\n          cat $export_symbols >> $output_objdir/$soname.def;\n        fi~\n        $CC -shared $output_objdir/$soname.def $libobjs $deplibs $compiler_flags -o $output_objdir/$soname $wl--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    haiku*)\n      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      ;;\n\n    os2*)\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      shrext_cmds=.dll\n      _LT_TAGVAR(archive_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t$ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t$ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t$ECHO EXPORTS >> $output_objdir/$libname.def~\n\temxexp $libobjs | $SED /\"_DLL_InitTerm\"/d >> $output_objdir/$libname.def~\n\t$CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\temximp -o $lib $output_objdir/$libname.def'\n      _LT_TAGVAR(archive_expsym_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t$ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t$ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t$ECHO EXPORTS >> $output_objdir/$libname.def~\n\tprefix_cmds=\"$SED\"~\n\tif test EXPORTS = \"`$SED 1q $export_symbols`\"; then\n\t  prefix_cmds=\"$prefix_cmds -e 1d\";\n\tfi~\n\tprefix_cmds=\"$prefix_cmds -e \\\"s/^\\(.*\\)$/_\\1/g\\\"\"~\n\tcat $export_symbols | $prefix_cmds >> $output_objdir/$libname.def~\n\t$CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\temximp -o $lib $output_objdir/$libname.def'\n      _LT_TAGVAR(old_archive_From_new_cmds, $1)='emximp -o $output_objdir/${libname}_dll.a $output_objdir/$libname.def'\n      _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n      ;;\n\n    interix[[3-9]]*)\n      _LT_TAGVAR(hardcode_direct, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n      # Hack: On Interix 3.x, we cannot compile PIC because of a broken gcc.\n      # Instead, shared libraries are loaded at an image base (0x10000000 by\n      # default) and relocated if they conflict, which is a slow very memory\n      # consuming and fragmenting process.  To avoid this, we pick a random,\n      # 256 KiB-aligned image base between 0x50000000 and 0x6FFC0000 at link\n      # time.  Moving up from 0x10000000 also allows more sbrk(2) space.\n      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-h,$soname $wl--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n      _LT_TAGVAR(archive_expsym_cmds, $1)='sed \"s|^|_|\" $export_symbols >$output_objdir/$soname.expsym~$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-h,$soname $wl--retain-symbols-file,$output_objdir/$soname.expsym $wl--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n      ;;\n\n    gnu* | linux* | tpf* | k*bsd*-gnu | kopensolaris*-gnu)\n      tmp_diet=no\n      if test linux-dietlibc = \"$host_os\"; then\n\tcase $cc_basename in\n\t  diet\\ *) tmp_diet=yes;;\t# linux-dietlibc with static linking (!diet-dyn)\n\tesac\n      fi\n      if $LD --help 2>&1 | $EGREP ': supported targets:.* elf' > /dev/null \\\n\t && test no = \"$tmp_diet\"\n      then\n\ttmp_addflag=' $pic_flag'\n\ttmp_sharedflag='-shared'\n\tcase $cc_basename,$host_cpu in\n        pgcc*)\t\t\t\t# Portland Group C compiler\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t  tmp_addflag=' $pic_flag'\n\t  ;;\n\tpgf77* | pgf90* | pgf95* | pgfortran*)\n\t\t\t\t\t# Portland Group f77 and f90 compilers\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t  tmp_addflag=' $pic_flag -Mnomain' ;;\n\tecc*,ia64* | icc*,ia64*)\t# Intel C compiler on ia64\n\t  tmp_addflag=' -i_dynamic' ;;\n\tefc*,ia64* | ifort*,ia64*)\t# Intel Fortran compiler on ia64\n\t  tmp_addflag=' -i_dynamic -nofor_main' ;;\n\tifc* | ifort*)\t\t\t# Intel Fortran compiler\n\t  tmp_addflag=' -nofor_main' ;;\n\tlf95*)\t\t\t\t# Lahey Fortran 8.1\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)=\n\t  tmp_sharedflag='--shared' ;;\n        nagfor*)                        # NAGFOR 5.3\n          tmp_sharedflag='-Wl,-shared' ;;\n\txl[[cC]]* | bgxl[[cC]]* | mpixl[[cC]]*) # IBM XL C 8.0 on PPC (deal with xlf below)\n\t  tmp_sharedflag='-qmkshrobj'\n\t  tmp_addflag= ;;\n\tnvcc*)\t# Cuda Compiler Driver 2.2\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t  _LT_TAGVAR(compiler_needs_object, $1)=yes\n\t  ;;\n\tesac\n\tcase `$CC -V 2>&1 | sed 5q` in\n\t*Sun\\ C*)\t\t\t# Sun C 5.9\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`new_convenience=; for conv in $convenience\\\"\\\"; do test -z \\\"$conv\\\" || new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t  _LT_TAGVAR(compiler_needs_object, $1)=yes\n\t  tmp_sharedflag='-G' ;;\n\t*Sun\\ F*)\t\t\t# Sun Fortran 8.3\n\t  tmp_sharedflag='-G' ;;\n\tesac\n\t_LT_TAGVAR(archive_cmds, $1)='$CC '\"$tmp_sharedflag\"\"$tmp_addflag\"' $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\n        if test yes = \"$supports_anon_versioning\"; then\n          _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $output_objdir/$libname.ver~\n            cat $export_symbols | sed -e \"s/\\(.*\\)/\\1;/\" >> $output_objdir/$libname.ver~\n            echo \"local: *; };\" >> $output_objdir/$libname.ver~\n            $CC '\"$tmp_sharedflag\"\"$tmp_addflag\"' $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-version-script $wl$output_objdir/$libname.ver -o $lib'\n        fi\n\n\tcase $cc_basename in\n\ttcc*)\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='-rdynamic'\n\t  ;;\n\txlf* | bgf* | bgxlf* | mpixlf*)\n\t  # IBM XL Fortran 10.1 on PPC cannot create shared libs itself\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='--whole-archive$convenience --no-whole-archive'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -shared $libobjs $deplibs $linker_flags -soname $soname -o $lib'\n\t  if test yes = \"$supports_anon_versioning\"; then\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $output_objdir/$libname.ver~\n              cat $export_symbols | sed -e \"s/\\(.*\\)/\\1;/\" >> $output_objdir/$libname.ver~\n              echo \"local: *; };\" >> $output_objdir/$libname.ver~\n              $LD -shared $libobjs $deplibs $linker_flags -soname $soname -version-script $output_objdir/$libname.ver -o $lib'\n\t  fi\n\t  ;;\n\tesac\n      else\n        _LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    netbsd*)\n      if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable $libobjs $deplibs $linker_flags -o $lib'\n\twlarc=\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n      fi\n      ;;\n\n    solaris*)\n      if $LD -v 2>&1 | $GREP 'BFD 2\\.8' > /dev/null; then\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\tcat <<_LT_EOF 1>&2\n\n*** Warning: The releases 2.8.* of the GNU linker cannot reliably\n*** create shared libraries on Solaris systems.  Therefore, libtool\n*** is disabling shared libraries support.  We urge you to upgrade GNU\n*** binutils to release 2.9.1 or newer.  Another option is to modify\n*** your PATH or compiler configuration so that the native linker is\n*** used, and then restart.\n\n_LT_EOF\n      elif $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    sysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX*)\n      case `$LD -v 2>&1` in\n        *\\ [[01]].* | *\\ 2.[[0-9]].* | *\\ 2.1[[0-5]].*)\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\tcat <<_LT_EOF 1>&2\n\n*** Warning: Releases of the GNU linker prior to 2.16.91.0.3 cannot\n*** reliably create shared libraries on SCO systems.  Therefore, libtool\n*** is disabling shared libraries support.  We urge you to upgrade GNU\n*** binutils to release 2.16.91.0.3 or newer.  Another option is to modify\n*** your PATH or compiler configuration so that the native linker is\n*** used, and then restart.\n\n_LT_EOF\n\t;;\n\t*)\n\t  # For security reasons, it is highly recommended that you always\n\t  # use absolute paths for naming shared libraries, and exclude the\n\t  # DT_RUNPATH tag from executables and libraries.  But doing so\n\t  # requires that you compile everything twice, which is a pain.\n\t  if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\t  else\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t  fi\n\t;;\n      esac\n      ;;\n\n    sunos4*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -assert pure-text -Bshareable -o $lib $libobjs $deplibs $linker_flags'\n      wlarc=\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    *)\n      if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n    esac\n\n    if test no = \"$_LT_TAGVAR(ld_shlibs, $1)\"; then\n      runpath_var=\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)=\n      _LT_TAGVAR(whole_archive_flag_spec, $1)=\n    fi\n  else\n    # PORTME fill in a description of your system's linker (not GNU ld)\n    case $host_os in\n    aix3*)\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      _LT_TAGVAR(always_export_symbols, $1)=yes\n      _LT_TAGVAR(archive_expsym_cmds, $1)='$LD -o $output_objdir/$soname $libobjs $deplibs $linker_flags -bE:$export_symbols -T512 -H512 -bM:SRE~$AR $AR_FLAGS $lib $output_objdir/$soname'\n      # Note: this linker hardcodes the directories in LIBPATH if there\n      # are no directories specified by -L.\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      if test yes = \"$GCC\" && test -z \"$lt_prog_compiler_static\"; then\n\t# Neither direct hardcoding nor static linking is supported with a\n\t# broken collect2.\n\t_LT_TAGVAR(hardcode_direct, $1)=unsupported\n      fi\n      ;;\n\n    aix[[4-9]]*)\n      if test ia64 = \"$host_cpu\"; then\n\t# On IA64, the linker does run time linking by default, so we don't\n\t# have to do anything special.\n\taix_use_runtimelinking=no\n\texp_sym_flag='-Bexport'\n\tno_entry_flag=\n      else\n\t# If we're using GNU nm, then we don't want the \"-C\" option.\n\t# -C means demangle to GNU nm, but means don't demangle to AIX nm.\n\t# Without the \"-l\" option, or with the \"-B\" option, AIX nm treats\n\t# weak defined symbols like other global defined symbols, whereas\n\t# GNU nm marks them as \"W\".\n\t# While the 'weak' keyword is ignored in the Export File, we need\n\t# it in the Import File for the 'aix-soname' feature, so we have\n\t# to replace the \"-B\" option with \"-P\" for AIX nm.\n\tif $NM -V 2>&1 | $GREP 'GNU' > /dev/null; then\n\t  _LT_TAGVAR(export_symbols_cmds, $1)='$NM -Bpg $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\") || (\\$ 2 == \"W\")) && ([substr](\\$ 3,1,1) != \".\")) { if (\\$ 2 == \"W\") { print \\$ 3 \" weak\" } else { print \\$ 3 } } }'\\'' | sort -u > $export_symbols'\n\telse\n\t  _LT_TAGVAR(export_symbols_cmds, $1)='`func_echo_all $NM | $SED -e '\\''s/B\\([[^B]]*\\)$/P\\1/'\\''` -PCpgl $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\") || (\\$ 2 == \"W\") || (\\$ 2 == \"V\") || (\\$ 2 == \"Z\")) && ([substr](\\$ 1,1,1) != \".\")) { if ((\\$ 2 == \"W\") || (\\$ 2 == \"V\") || (\\$ 2 == \"Z\")) { print \\$ 1 \" weak\" } else { print \\$ 1 } } }'\\'' | sort -u > $export_symbols'\n\tfi\n\taix_use_runtimelinking=no\n\n\t# Test if we are trying to use run time linking or normal\n\t# AIX style linking. If -brtl is somewhere in LDFLAGS, we\n\t# have runtime linking enabled, and use it for executables.\n\t# For shared libraries, we enable/disable runtime linking\n\t# depending on the kind of the shared library created -\n\t# when \"with_aix_soname,aix_use_runtimelinking\" is:\n\t# \"aix,no\"   lib.a(lib.so.V) shared, rtl:no,  for executables\n\t# \"aix,yes\"  lib.so          shared, rtl:yes, for executables\n\t#            lib.a           static archive\n\t# \"both,no\"  lib.so.V(shr.o) shared, rtl:yes\n\t#            lib.a(lib.so.V) shared, rtl:no,  for executables\n\t# \"both,yes\" lib.so.V(shr.o) shared, rtl:yes, for executables\n\t#            lib.a(lib.so.V) shared, rtl:no\n\t# \"svr4,*\"   lib.so.V(shr.o) shared, rtl:yes, for executables\n\t#            lib.a           static archive\n\tcase $host_os in aix4.[[23]]|aix4.[[23]].*|aix[[5-9]]*)\n\t  for ld_flag in $LDFLAGS; do\n\t  if (test x-brtl = \"x$ld_flag\" || test x-Wl,-brtl = \"x$ld_flag\"); then\n\t    aix_use_runtimelinking=yes\n\t    break\n\t  fi\n\t  done\n\t  if test svr4,no = \"$with_aix_soname,$aix_use_runtimelinking\"; then\n\t    # With aix-soname=svr4, we create the lib.so.V shared archives only,\n\t    # so we don't have lib.a shared libs to link our executables.\n\t    # We have to force runtime linking in this case.\n\t    aix_use_runtimelinking=yes\n\t    LDFLAGS=\"$LDFLAGS -Wl,-brtl\"\n\t  fi\n\t  ;;\n\tesac\n\n\texp_sym_flag='-bexport'\n\tno_entry_flag='-bnoentry'\n      fi\n\n      # When large executables or shared objects are built, AIX ld can\n      # have problems creating the table of contents.  If linking a library\n      # or program results in \"error TOC overflow\" add -mminimal-toc to\n      # CXXFLAGS/CFLAGS for g++/gcc.  In the cases where that is not\n      # enough to fix the problem, add -Wl,-bbigtoc to LDFLAGS.\n\n      _LT_TAGVAR(archive_cmds, $1)=''\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      _LT_TAGVAR(file_list_spec, $1)='$wl-f,'\n      case $with_aix_soname,$aix_use_runtimelinking in\n      aix,*) ;; # traditional, no import file\n      svr4,* | *,yes) # use import file\n\t# The Import File defines what to hardcode.\n\t_LT_TAGVAR(hardcode_direct, $1)=no\n\t_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n\t;;\n      esac\n\n      if test yes = \"$GCC\"; then\n\tcase $host_os in aix4.[[012]]|aix4.[[012]].*)\n\t# We only want to do this on AIX 4.2 and lower, the check\n\t# below for broken collect2 doesn't work under 4.3+\n\t  collect2name=`$CC -print-prog-name=collect2`\n\t  if test -f \"$collect2name\" &&\n\t   strings \"$collect2name\" | $GREP resolve_lib_name >/dev/null\n\t  then\n\t  # We have reworked collect2\n\t  :\n\t  else\n\t  # We have old collect2\n\t  _LT_TAGVAR(hardcode_direct, $1)=unsupported\n\t  # It fails to find uninstalled libraries when the uninstalled\n\t  # path is not listed in the libpath.  Setting hardcode_minus_L\n\t  # to unsupported forces relinking\n\t  _LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t  _LT_TAGVAR(hardcode_libdir_separator, $1)=\n\t  fi\n\t  ;;\n\tesac\n\tshared_flag='-shared'\n\tif test yes = \"$aix_use_runtimelinking\"; then\n\t  shared_flag=\"$shared_flag \"'$wl-G'\n\tfi\n\t# Need to ensure runtime linking is disabled for the traditional\n\t# shared library, or the linker may eventually find shared libraries\n\t# /with/ Import File - we do not want to mix them.\n\tshared_flag_aix='-shared'\n\tshared_flag_svr4='-shared $wl-G'\n      else\n\t# not using gcc\n\tif test ia64 = \"$host_cpu\"; then\n\t# VisualAge C++, Version 5.5 for AIX 5L for IA-64, Beta 3 Release\n\t# chokes on -Wl,-G. The following line is correct:\n\t  shared_flag='-G'\n\telse\n\t  if test yes = \"$aix_use_runtimelinking\"; then\n\t    shared_flag='$wl-G'\n\t  else\n\t    shared_flag='$wl-bM:SRE'\n\t  fi\n\t  shared_flag_aix='$wl-bM:SRE'\n\t  shared_flag_svr4='$wl-G'\n\tfi\n      fi\n\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-bexpall'\n      # It seems that -bexpall does not export symbols beginning with\n      # underscore (_), so it is better to generate a list of symbols to export.\n      _LT_TAGVAR(always_export_symbols, $1)=yes\n      if test aix,yes = \"$with_aix_soname,$aix_use_runtimelinking\"; then\n\t# Warning - without using the other runtime loading flags (-brtl),\n\t# -berok will link without error, but may produce a broken library.\n\t_LT_TAGVAR(allow_undefined_flag, $1)='-berok'\n        # Determine the default libpath from the value encoded in an\n        # empty executable.\n        _LT_SYS_MODULE_PATH_AIX([$1])\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-blibpath:$libdir:'\"$aix_libpath\"\n        _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $deplibs $wl'$no_entry_flag' $compiler_flags `if test -n \"$allow_undefined_flag\"; then func_echo_all \"$wl$allow_undefined_flag\"; else :; fi` $wl'$exp_sym_flag:\\$export_symbols' '$shared_flag\n      else\n\tif test ia64 = \"$host_cpu\"; then\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-R $libdir:/usr/lib:/lib'\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=\"-z nodefs\"\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)=\"\\$CC $shared_flag\"' -o $output_objdir/$soname $libobjs $deplibs '\"\\$wl$no_entry_flag\"' $compiler_flags $wl$allow_undefined_flag '\"\\$wl$exp_sym_flag:\\$export_symbols\"\n\telse\n\t # Determine the default libpath from the value encoded in an\n\t # empty executable.\n\t _LT_SYS_MODULE_PATH_AIX([$1])\n\t _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-blibpath:$libdir:'\"$aix_libpath\"\n\t  # Warning - without using the other run time loading flags,\n\t  # -berok will link without error, but may produce a broken library.\n\t  _LT_TAGVAR(no_undefined_flag, $1)=' $wl-bernotok'\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=' $wl-berok'\n\t  if test yes = \"$with_gnu_ld\"; then\n\t    # We only use this code for GNU lds that support --whole-archive.\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive$convenience $wl--no-whole-archive'\n\t  else\n\t    # Exported symbols can be pulled into shared objects from archives\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='$convenience'\n\t  fi\n\t  _LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$RM -r $output_objdir/$realname.d~$MKDIR $output_objdir/$realname.d'\n\t  # -brtl affects multiple linker settings, -berok does not and is overridden later\n\t  compiler_flags_filtered='`func_echo_all \"$compiler_flags \" | $SED -e \"s%-brtl\\\\([[, ]]\\\\)%-berok\\\\1%g\"`'\n\t  if test svr4 != \"$with_aix_soname\"; then\n\t    # This is similar to how AIX traditionally builds its shared libraries.\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$CC '$shared_flag_aix' -o $output_objdir/$realname.d/$soname $libobjs $deplibs $wl-bnoentry '$compiler_flags_filtered'$wl-bE:$export_symbols$allow_undefined_flag~$AR $AR_FLAGS $output_objdir/$libname$release.a $output_objdir/$realname.d/$soname'\n\t  fi\n\t  if test aix != \"$with_aix_soname\"; then\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$CC '$shared_flag_svr4' -o $output_objdir/$realname.d/$shared_archive_member_spec.o $libobjs $deplibs $wl-bnoentry '$compiler_flags_filtered'$wl-bE:$export_symbols$allow_undefined_flag~$STRIP -e $output_objdir/$realname.d/$shared_archive_member_spec.o~( func_echo_all \"#! $soname($shared_archive_member_spec.o)\"; if test shr_64 = \"$shared_archive_member_spec\"; then func_echo_all \"# 64\"; else func_echo_all \"# 32\"; fi; cat $export_symbols ) > $output_objdir/$realname.d/$shared_archive_member_spec.imp~$AR $AR_FLAGS $output_objdir/$soname $output_objdir/$realname.d/$shared_archive_member_spec.o $output_objdir/$realname.d/$shared_archive_member_spec.imp'\n\t  else\n\t    # used by -dlpreopen to get the symbols\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$MV  $output_objdir/$realname.d/$soname $output_objdir'\n\t  fi\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$RM -r $output_objdir/$realname.d'\n\tfi\n      fi\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n            _LT_TAGVAR(archive_expsym_cmds, $1)=''\n        ;;\n      m68k)\n            _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/a2ixlibrary.data~$ECHO \"#define NAME $libname\" > $output_objdir/a2ixlibrary.data~$ECHO \"#define LIBRARY_ID 1\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define VERSION $major\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define REVISION $revision\" >> $output_objdir/a2ixlibrary.data~$AR $AR_FLAGS $lib $libobjs~$RANLIB $lib~(cd $output_objdir && a2ixlibrary -32)'\n            _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n            _LT_TAGVAR(hardcode_minus_L, $1)=yes\n        ;;\n      esac\n      ;;\n\n    bsdi[[45]]*)\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)=-rdynamic\n      ;;\n\n    cygwin* | mingw* | pw32* | cegcc*)\n      # When not using gcc, we currently assume that we are using\n      # Microsoft Visual C++.\n      # hardcode_libdir_flag_spec is actually meaningless, as there is\n      # no search path for DLLs.\n      case $cc_basename in\n      cl*)\n\t# Native MSVC\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=' '\n\t_LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t_LT_TAGVAR(always_export_symbols, $1)=yes\n\t_LT_TAGVAR(file_list_spec, $1)='@'\n\t# Tell ltmain to make .lib files, not .a files.\n\tlibext=lib\n\t# Tell ltmain to make .dll files, not .so files.\n\tshrext_cmds=.dll\n\t# FIXME: Setting linknames here is a bad hack.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $compiler_flags $deplibs -Wl,-DLL,-IMPLIB:\"$tool_output_objdir$libname.dll.lib\"~linknames='\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='if _LT_DLL_DEF_P([$export_symbols]); then\n            cp \"$export_symbols\" \"$output_objdir/$soname.def\";\n            echo \"$tool_output_objdir$soname.def\" > \"$output_objdir/$soname.exp\";\n          else\n            $SED -e '\\''s/^/-link -EXPORT:/'\\'' < $export_symbols > $output_objdir/$soname.exp;\n          fi~\n          $CC -o $tool_output_objdir$soname $libobjs $compiler_flags $deplibs \"@$tool_output_objdir$soname.exp\" -Wl,-DLL,-IMPLIB:\"$tool_output_objdir$libname.dll.lib\"~\n          linknames='\n\t# The linker will not automatically build a static lib if we build a DLL.\n\t# _LT_TAGVAR(old_archive_from_new_cmds, $1)='true'\n\t_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\t_LT_TAGVAR(exclude_expsyms, $1)='_NULL_IMPORT_DESCRIPTOR|_IMPORT_DESCRIPTOR_.*'\n\t_LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED -e '\\''/^[[BCDGRS]][[ ]]/s/.*[[ ]]\\([[^ ]]*\\)/\\1,DATA/'\\'' | $SED -e '\\''/^[[AITW]][[ ]]/s/.*[[ ]]//'\\'' | sort | uniq > $export_symbols'\n\t# Don't use ranlib\n\t_LT_TAGVAR(old_postinstall_cmds, $1)='chmod 644 $oldlib'\n\t_LT_TAGVAR(postlink_cmds, $1)='lt_outputfile=\"@OUTPUT@\"~\n          lt_tool_outputfile=\"@TOOL_OUTPUT@\"~\n          case $lt_outputfile in\n            *.exe|*.EXE) ;;\n            *)\n              lt_outputfile=$lt_outputfile.exe\n              lt_tool_outputfile=$lt_tool_outputfile.exe\n              ;;\n          esac~\n          if test : != \"$MANIFEST_TOOL\" && test -f \"$lt_outputfile.manifest\"; then\n            $MANIFEST_TOOL -manifest \"$lt_tool_outputfile.manifest\" -outputresource:\"$lt_tool_outputfile\" || exit 1;\n            $RM \"$lt_outputfile.manifest\";\n          fi'\n\t;;\n      *)\n\t# Assume MSVC wrapper\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=' '\n\t_LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t# Tell ltmain to make .lib files, not .a files.\n\tlibext=lib\n\t# Tell ltmain to make .dll files, not .so files.\n\tshrext_cmds=.dll\n\t# FIXME: Setting linknames here is a bad hack.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -o $lib $libobjs $compiler_flags `func_echo_all \"$deplibs\" | $SED '\\''s/ -lc$//'\\''` -link -dll~linknames='\n\t# The linker will automatically build a .lib file if we build a DLL.\n\t_LT_TAGVAR(old_archive_from_new_cmds, $1)='true'\n\t# FIXME: Should let the user specify the lib program.\n\t_LT_TAGVAR(old_archive_cmds, $1)='lib -OUT:$oldlib$oldobjs$old_deplibs'\n\t_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\t;;\n      esac\n      ;;\n\n    darwin* | rhapsody*)\n      _LT_DARWIN_LINKER_FEATURES($1)\n      ;;\n\n    dgux*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    # FreeBSD 2.2.[012] allows us to include c++rt0.o to get C++ constructor\n    # support.  Future versions do this automatically, but an explicit c++rt0.o\n    # does not break anything, and helps significantly (at the cost of a little\n    # extra space).\n    freebsd2.2*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags /usr/lib/c++rt0.o'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    # Unfortunately, older versions of FreeBSD 2 do not have this feature.\n    freebsd2.*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    # FreeBSD 3 and greater uses gcc -shared to do shared libraries.\n    freebsd* | dragonfly*)\n      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    hpux9*)\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$CC -shared $pic_flag $wl+b $wl$install_libdir -o $output_objdir/$soname $libobjs $deplibs $compiler_flags~test \"x$output_objdir/$soname\" = \"x$lib\" || mv $output_objdir/$soname $lib'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$LD -b +b $install_libdir -o $output_objdir/$soname $libobjs $deplibs $linker_flags~test \"x$output_objdir/$soname\" = \"x$lib\" || mv $output_objdir/$soname $lib'\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl+b $wl$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n\n      # hardcode_minus_L: Not really in the search PATH,\n      # but as the default location of the library.\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n      ;;\n\n    hpux10*)\n      if test yes,no = \"$GCC,$with_gnu_ld\"; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -b +h $soname +b $install_libdir -o $lib $libobjs $deplibs $linker_flags'\n      fi\n      if test no = \"$with_gnu_ld\"; then\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl+b $wl$libdir'\n\t_LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\t_LT_TAGVAR(hardcode_direct, $1)=yes\n\t_LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n\t# hardcode_minus_L: Not really in the search PATH,\n\t# but as the default location of the library.\n\t_LT_TAGVAR(hardcode_minus_L, $1)=yes\n      fi\n      ;;\n\n    hpux11*)\n      if test yes,no = \"$GCC,$with_gnu_ld\"; then\n\tcase $host_cpu in\n\thppa*64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $wl+h $wl$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tia64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $wl+h $wl$soname $wl+nodefaultrpath -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\t*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tesac\n      else\n\tcase $host_cpu in\n\thppa*64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tia64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname $wl+nodefaultrpath -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\t*)\n\tm4_if($1, [], [\n\t  # Older versions of the 11.00 compiler do not understand -b yet\n\t  # (HP92453-01 A.11.01.20 doesn't, HP92453-01 B.11.X.35175-35176.GP does)\n\t  _LT_LINKER_OPTION([if $CC understands -b],\n\t    _LT_TAGVAR(lt_cv_prog_compiler__b, $1), [-b],\n\t    [_LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $libobjs $deplibs $compiler_flags'],\n\t    [_LT_TAGVAR(archive_cmds, $1)='$LD -b +h $soname +b $install_libdir -o $lib $libobjs $deplibs $linker_flags'])],\n\t  [_LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $libobjs $deplibs $compiler_flags'])\n\t  ;;\n\tesac\n      fi\n      if test no = \"$with_gnu_ld\"; then\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl+b $wl$libdir'\n\t_LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\tcase $host_cpu in\n\thppa*64*|ia64*)\n\t  _LT_TAGVAR(hardcode_direct, $1)=no\n\t  _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t  ;;\n\t*)\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes\n\t  _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n\n\t  # hardcode_minus_L: Not really in the search PATH,\n\t  # but as the default location of the library.\n\t  _LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t  ;;\n\tesac\n      fi\n      ;;\n\n    irix5* | irix6* | nonstopux*)\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n\t# Try to use the -exported_symbol ld option, if it does not\n\t# work, assume that -exports_file does not work either and\n\t# implicitly export all symbols.\n\t# This should be the same for all languages, so no per-tag cache variable.\n\tAC_CACHE_CHECK([whether the $host_os linker accepts -exported_symbol],\n\t  [lt_cv_irix_exported_symbol],\n\t  [save_LDFLAGS=$LDFLAGS\n\t   LDFLAGS=\"$LDFLAGS -shared $wl-exported_symbol ${wl}foo $wl-update_registry $wl/dev/null\"\n\t   AC_LINK_IFELSE(\n\t     [AC_LANG_SOURCE(\n\t        [AC_LANG_CASE([C], [[int foo (void) { return 0; }]],\n\t\t\t      [C++], [[int foo (void) { return 0; }]],\n\t\t\t      [Fortran 77], [[\n      subroutine foo\n      end]],\n\t\t\t      [Fortran], [[\n      subroutine foo\n      end]])])],\n\t      [lt_cv_irix_exported_symbol=yes],\n\t      [lt_cv_irix_exported_symbol=no])\n           LDFLAGS=$save_LDFLAGS])\n\tif test yes = \"$lt_cv_irix_exported_symbol\"; then\n          _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations $wl-exports_file $wl$export_symbols -o $lib'\n\tfi\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -exports_file $export_symbols -o $lib'\n      fi\n      _LT_TAGVAR(archive_cmds_need_lc, $1)='no'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      _LT_TAGVAR(inherit_rpath, $1)=yes\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      ;;\n\n    linux*)\n      case $cc_basename in\n      tcc*)\n\t# Fabrice Bellard et al's Tiny C Compiler\n\t_LT_TAGVAR(ld_shlibs, $1)=yes\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n\t;;\n      esac\n      ;;\n\n    netbsd*)\n      if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags'  # a.out\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -shared -o $lib $libobjs $deplibs $linker_flags'      # ELF\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    newsos6)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    *nto* | *qnx*)\n      ;;\n\n    openbsd* | bitrig*)\n      if test -f /usr/libexec/ld.so; then\n\t_LT_TAGVAR(hardcode_direct, $1)=yes\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t_LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\tif test -z \"`echo __ELF__ | $CC -E - | $GREP __ELF__`\"; then\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags $wl-retain-symbols-file,$export_symbols'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n\telse\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\tfi\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    os2*)\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      shrext_cmds=.dll\n      _LT_TAGVAR(archive_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t$ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t$ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t$ECHO EXPORTS >> $output_objdir/$libname.def~\n\temxexp $libobjs | $SED /\"_DLL_InitTerm\"/d >> $output_objdir/$libname.def~\n\t$CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\temximp -o $lib $output_objdir/$libname.def'\n      _LT_TAGVAR(archive_expsym_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t$ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t$ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t$ECHO EXPORTS >> $output_objdir/$libname.def~\n\tprefix_cmds=\"$SED\"~\n\tif test EXPORTS = \"`$SED 1q $export_symbols`\"; then\n\t  prefix_cmds=\"$prefix_cmds -e 1d\";\n\tfi~\n\tprefix_cmds=\"$prefix_cmds -e \\\"s/^\\(.*\\)$/_\\1/g\\\"\"~\n\tcat $export_symbols | $prefix_cmds >> $output_objdir/$libname.def~\n\t$CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\temximp -o $lib $output_objdir/$libname.def'\n      _LT_TAGVAR(old_archive_From_new_cmds, $1)='emximp -o $output_objdir/${libname}_dll.a $output_objdir/$libname.def'\n      _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n      ;;\n\n    osf3*)\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' $wl-expect_unresolved $wl\\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n      else\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' -expect_unresolved \\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $libobjs $deplibs $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n      fi\n      _LT_TAGVAR(archive_cmds_need_lc, $1)='no'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      ;;\n\n    osf4* | osf5*)\t# as osf3* with the addition of -msym flag\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' $wl-expect_unresolved $wl\\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $pic_flag $libobjs $deplibs $compiler_flags $wl-msym $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n      else\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' -expect_unresolved \\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $libobjs $deplibs $compiler_flags -msym -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='for i in `cat $export_symbols`; do printf \"%s %s\\\\n\" -exported_symbol \"\\$i\" >> $lib.exp; done; printf \"%s\\\\n\" \"-hidden\">> $lib.exp~\n          $CC -shared$allow_undefined_flag $wl-input $wl$lib.exp $compiler_flags $libobjs $deplibs -soname $soname `test -n \"$verstring\" && $ECHO \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib~$RM $lib.exp'\n\n\t# Both c and cxx compiler support -rpath directly\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-rpath $libdir'\n      fi\n      _LT_TAGVAR(archive_cmds_need_lc, $1)='no'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      ;;\n\n    solaris*)\n      _LT_TAGVAR(no_undefined_flag, $1)=' -z defs'\n      if test yes = \"$GCC\"; then\n\twlarc='$wl'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $wl-z ${wl}text $wl-h $wl$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n          $CC -shared $pic_flag $wl-z ${wl}text $wl-M $wl$lib.exp $wl-h $wl$soname -o $lib $libobjs $deplibs $compiler_flags~$RM $lib.exp'\n      else\n\tcase `$CC -V 2>&1` in\n\t*\"Compilers 5.0\"*)\n\t  wlarc=''\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G$allow_undefined_flag -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n            $LD -G$allow_undefined_flag -M $lib.exp -h $soname -o $lib $libobjs $deplibs $linker_flags~$RM $lib.exp'\n\t  ;;\n\t*)\n\t  wlarc='$wl'\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -G$allow_undefined_flag -h $soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n            $CC -G$allow_undefined_flag -M $lib.exp -h $soname -o $lib $libobjs $deplibs $compiler_flags~$RM $lib.exp'\n\t  ;;\n\tesac\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      case $host_os in\n      solaris2.[[0-5]] | solaris2.[[0-5]].*) ;;\n      *)\n\t# The compiler driver will combine and reorder linker options,\n\t# but understands '-z linker_flag'.  GCC discards it without '$wl',\n\t# but is careful enough not to reorder.\n\t# Supported since Solaris 2.6 (maybe 2.5.1?)\n\tif test yes = \"$GCC\"; then\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl-z ${wl}allextract$convenience $wl-z ${wl}defaultextract'\n\telse\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='-z allextract$convenience -z defaultextract'\n\tfi\n\t;;\n      esac\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      ;;\n\n    sunos4*)\n      if test sequent = \"$host_vendor\"; then\n\t# Use $CC to link under sequent, because it throws in some extra .o\n\t# files that make .init and .fini sections work.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -G $wl-h $soname -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -assert pure-text -Bstatic -o $lib $libobjs $deplibs $linker_flags'\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    sysv4)\n      case $host_vendor in\n\tsni)\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes # is this really true???\n\t;;\n\tsiemens)\n\t  ## LD is ld it makes a PLAMLIB\n\t  ## CC just makes a GrossModule.\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(reload_cmds, $1)='$CC -r -o $output$reload_objs'\n\t  _LT_TAGVAR(hardcode_direct, $1)=no\n        ;;\n\tmotorola)\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(hardcode_direct, $1)=no #Motorola manual says yes, but my tests say they lie\n\t;;\n      esac\n      runpath_var='LD_RUN_PATH'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    sysv4.3*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='-Bexport'\n      ;;\n\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\trunpath_var=LD_RUN_PATH\n\thardcode_runpath_var=yes\n\t_LT_TAGVAR(ld_shlibs, $1)=yes\n      fi\n      ;;\n\n    sysv4*uw2* | sysv5OpenUNIX* | sysv5UnixWare7.[[01]].[[10]]* | unixware7* | sco3.2v5.0.[[024]]*)\n      _LT_TAGVAR(no_undefined_flag, $1)='$wl-z,text'\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      runpath_var='LD_RUN_PATH'\n\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -G $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      fi\n      ;;\n\n    sysv5* | sco3.2v5* | sco5v6*)\n      # Note: We CANNOT use -z defs as we might desire, because we do not\n      # link with -lc, and that would cause any symbols used from libc to\n      # always be unresolved, which means just about no library would\n      # ever link correctly.  If we're not using GNU ld we use -z text\n      # though, which does catch some bad symbols but isn't as heavy-handed\n      # as -z defs.\n      _LT_TAGVAR(no_undefined_flag, $1)='$wl-z,text'\n      _LT_TAGVAR(allow_undefined_flag, $1)='$wl-z,nodefs'\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-R,$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-Bexport'\n      runpath_var='LD_RUN_PATH'\n\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -G $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      fi\n      ;;\n\n    uts4*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    *)\n      _LT_TAGVAR(ld_shlibs, $1)=no\n      ;;\n    esac\n\n    if test sni = \"$host_vendor\"; then\n      case $host in\n      sysv4 | sysv4.2uw2* | sysv4.3* | sysv5*)\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-Blargedynsym'\n\t;;\n      esac\n    fi\n  fi\n])\nAC_MSG_RESULT([$_LT_TAGVAR(ld_shlibs, $1)])\ntest no = \"$_LT_TAGVAR(ld_shlibs, $1)\" && can_build_shared=no\n\n_LT_TAGVAR(with_gnu_ld, $1)=$with_gnu_ld\n\n_LT_DECL([], [libext], [0], [Old archive suffix (normally \"a\")])dnl\n_LT_DECL([], [shrext_cmds], [1], [Shared library suffix (normally \".so\")])dnl\n_LT_DECL([], [extract_expsyms_cmds], [2],\n    [The commands to extract the exported symbol list from a shared archive])\n\n#\n# Do we need to explicitly link libc?\n#\ncase \"x$_LT_TAGVAR(archive_cmds_need_lc, $1)\" in\nx|xyes)\n  # Assume -lc should be added\n  _LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\n  if test yes,yes = \"$GCC,$enable_shared\"; then\n    case $_LT_TAGVAR(archive_cmds, $1) in\n    *'~'*)\n      # FIXME: we may have to deal with multi-command sequences.\n      ;;\n    '$CC '*)\n      # Test whether the compiler implicitly links with -lc since on some\n      # systems, -lgcc has to come before -lc. If gcc already passes -lc\n      # to ld, don't add -lc before -lgcc.\n      AC_CACHE_CHECK([whether -lc should be explicitly linked in],\n\t[lt_cv_]_LT_TAGVAR(archive_cmds_need_lc, $1),\n\t[$RM conftest*\n\techo \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n\n\tif AC_TRY_EVAL(ac_compile) 2>conftest.err; then\n\t  soname=conftest\n\t  lib=conftest\n\t  libobjs=conftest.$ac_objext\n\t  deplibs=\n\t  wl=$_LT_TAGVAR(lt_prog_compiler_wl, $1)\n\t  pic_flag=$_LT_TAGVAR(lt_prog_compiler_pic, $1)\n\t  compiler_flags=-v\n\t  linker_flags=-v\n\t  verstring=\n\t  output_objdir=.\n\t  libname=conftest\n\t  lt_save_allow_undefined_flag=$_LT_TAGVAR(allow_undefined_flag, $1)\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=\n\t  if AC_TRY_EVAL(_LT_TAGVAR(archive_cmds, $1) 2\\>\\&1 \\| $GREP \\\" -lc \\\" \\>/dev/null 2\\>\\&1)\n\t  then\n\t    lt_cv_[]_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\t  else\n\t    lt_cv_[]_LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\t  fi\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=$lt_save_allow_undefined_flag\n\telse\n\t  cat conftest.err 1>&5\n\tfi\n\t$RM conftest*\n\t])\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=$lt_cv_[]_LT_TAGVAR(archive_cmds_need_lc, $1)\n      ;;\n    esac\n  fi\n  ;;\nesac\n\n_LT_TAGDECL([build_libtool_need_lc], [archive_cmds_need_lc], [0],\n    [Whether or not to add -lc for building shared libraries])\n_LT_TAGDECL([allow_libtool_libs_with_static_runtimes],\n    [enable_shared_with_static_runtimes], [0],\n    [Whether or not to disallow shared libs when runtime libs are static])\n_LT_TAGDECL([], [export_dynamic_flag_spec], [1],\n    [Compiler flag to allow reflexive dlopens])\n_LT_TAGDECL([], [whole_archive_flag_spec], [1],\n    [Compiler flag to generate shared objects directly from archives])\n_LT_TAGDECL([], [compiler_needs_object], [1],\n    [Whether the compiler copes with passing no objects directly])\n_LT_TAGDECL([], [old_archive_from_new_cmds], [2],\n    [Create an old-style archive from a shared archive])\n_LT_TAGDECL([], [old_archive_from_expsyms_cmds], [2],\n    [Create a temporary old-style archive to link instead of a shared archive])\n_LT_TAGDECL([], [archive_cmds], [2], [Commands used to build a shared archive])\n_LT_TAGDECL([], [archive_expsym_cmds], [2])\n_LT_TAGDECL([], [module_cmds], [2],\n    [Commands used to build a loadable module if different from building\n    a shared archive.])\n_LT_TAGDECL([], [module_expsym_cmds], [2])\n_LT_TAGDECL([], [with_gnu_ld], [1],\n    [Whether we are building with GNU ld or not])\n_LT_TAGDECL([], [allow_undefined_flag], [1],\n    [Flag that allows shared libraries with undefined symbols to be built])\n_LT_TAGDECL([], [no_undefined_flag], [1],\n    [Flag that enforces no undefined symbols])\n_LT_TAGDECL([], [hardcode_libdir_flag_spec], [1],\n    [Flag to hardcode $libdir into a binary during linking.\n    This must work even if $libdir does not exist])\n_LT_TAGDECL([], [hardcode_libdir_separator], [1],\n    [Whether we need a single \"-rpath\" flag with a separated argument])\n_LT_TAGDECL([], [hardcode_direct], [0],\n    [Set to \"yes\" if using DIR/libNAME$shared_ext during linking hardcodes\n    DIR into the resulting binary])\n_LT_TAGDECL([], [hardcode_direct_absolute], [0],\n    [Set to \"yes\" if using DIR/libNAME$shared_ext during linking hardcodes\n    DIR into the resulting binary and the resulting library dependency is\n    \"absolute\", i.e impossible to change by setting $shlibpath_var if the\n    library is relocated])\n_LT_TAGDECL([], [hardcode_minus_L], [0],\n    [Set to \"yes\" if using the -LDIR flag during linking hardcodes DIR\n    into the resulting binary])\n_LT_TAGDECL([], [hardcode_shlibpath_var], [0],\n    [Set to \"yes\" if using SHLIBPATH_VAR=DIR during linking hardcodes DIR\n    into the resulting binary])\n_LT_TAGDECL([], [hardcode_automatic], [0],\n    [Set to \"yes\" if building a shared library automatically hardcodes DIR\n    into the library and all subsequent libraries and executables linked\n    against it])\n_LT_TAGDECL([], [inherit_rpath], [0],\n    [Set to yes if linker adds runtime paths of dependent libraries\n    to runtime path list])\n_LT_TAGDECL([], [link_all_deplibs], [0],\n    [Whether libtool must link a program against all its dependency libraries])\n_LT_TAGDECL([], [always_export_symbols], [0],\n    [Set to \"yes\" if exported symbols are required])\n_LT_TAGDECL([], [export_symbols_cmds], [2],\n    [The commands to list exported symbols])\n_LT_TAGDECL([], [exclude_expsyms], [1],\n    [Symbols that should not be listed in the preloaded symbols])\n_LT_TAGDECL([], [include_expsyms], [1],\n    [Symbols that must always be exported])\n_LT_TAGDECL([], [prelink_cmds], [2],\n    [Commands necessary for linking programs (against libraries) with templates])\n_LT_TAGDECL([], [postlink_cmds], [2],\n    [Commands necessary for finishing linking programs])\n_LT_TAGDECL([], [file_list_spec], [1],\n    [Specify filename containing input files])\ndnl FIXME: Not yet implemented\ndnl _LT_TAGDECL([], [thread_safe_flag_spec], [1],\ndnl    [Compiler flag to generate thread safe objects])\n])# _LT_LINKER_SHLIBS\n\n\n# _LT_LANG_C_CONFIG([TAG])\n# ------------------------\n# Ensure that the configuration variables for a C compiler are suitably\n# defined.  These variables are subsequently used by _LT_CONFIG to write\n# the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_C_CONFIG],\n[m4_require([_LT_DECL_EGREP])dnl\nlt_save_CC=$CC\nAC_LANG_PUSH(C)\n\n# Source file extension for C test sources.\nac_ext=c\n\n# Object file extension for compiled C test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code=\"int some_variable = 0;\"\n\n# Code to be used in simple link tests\nlt_simple_link_test_code='int main(){return(0);}'\n\n_LT_TAG_COMPILER\n# Save the default compiler, since it gets overwritten when the other\n# tags are being tested, and _LT_TAGVAR(compiler, []) is a NOP.\ncompiler_DEFAULT=$CC\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n## CAVEAT EMPTOR:\n## There is no encapsulation within the following macros, do not change\n## the running order or otherwise move them around unless you know exactly\n## what you are doing...\nif test -n \"$compiler\"; then\n  _LT_COMPILER_NO_RTTI($1)\n  _LT_COMPILER_PIC($1)\n  _LT_COMPILER_C_O($1)\n  _LT_COMPILER_FILE_LOCKS($1)\n  _LT_LINKER_SHLIBS($1)\n  _LT_SYS_DYNAMIC_LINKER($1)\n  _LT_LINKER_HARDCODE_LIBPATH($1)\n  LT_SYS_DLOPEN_SELF\n  _LT_CMD_STRIPLIB\n\n  # Report what library types will actually be built\n  AC_MSG_CHECKING([if libtool supports shared libraries])\n  AC_MSG_RESULT([$can_build_shared])\n\n  AC_MSG_CHECKING([whether to build shared libraries])\n  test no = \"$can_build_shared\" && enable_shared=no\n\n  # On AIX, shared libraries and static libraries use the same namespace, and\n  # are all built from PIC.\n  case $host_os in\n  aix3*)\n    test yes = \"$enable_shared\" && enable_static=no\n    if test -n \"$RANLIB\"; then\n      archive_cmds=\"$archive_cmds~\\$RANLIB \\$lib\"\n      postinstall_cmds='$RANLIB $lib'\n    fi\n    ;;\n\n  aix[[4-9]]*)\n    if test ia64 != \"$host_cpu\"; then\n      case $enable_shared,$with_aix_soname,$aix_use_runtimelinking in\n      yes,aix,yes) ;;\t\t\t# shared object as lib.so file only\n      yes,svr4,*) ;;\t\t\t# shared object as lib.so archive member only\n      yes,*) enable_static=no ;;\t# shared object in lib.a archive as well\n      esac\n    fi\n    ;;\n  esac\n  AC_MSG_RESULT([$enable_shared])\n\n  AC_MSG_CHECKING([whether to build static libraries])\n  # Make sure either enable_shared or enable_static is yes.\n  test yes = \"$enable_shared\" || enable_static=yes\n  AC_MSG_RESULT([$enable_static])\n\n  _LT_CONFIG($1)\nfi\nAC_LANG_POP\nCC=$lt_save_CC\n])# _LT_LANG_C_CONFIG\n\n\n# _LT_LANG_CXX_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for a C++ compiler are suitably\n# defined.  These variables are subsequently used by _LT_CONFIG to write\n# the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_CXX_CONFIG],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_PATH_MANIFEST_TOOL])dnl\nif test -n \"$CXX\" && ( test no != \"$CXX\" &&\n    ( (test g++ = \"$CXX\" && `g++ -v >/dev/null 2>&1` ) ||\n    (test g++ != \"$CXX\"))); then\n  AC_PROG_CXXCPP\nelse\n  _lt_caught_CXX_error=yes\nfi\n\nAC_LANG_PUSH(C++)\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n_LT_TAGVAR(allow_undefined_flag, $1)=\n_LT_TAGVAR(always_export_symbols, $1)=no\n_LT_TAGVAR(archive_expsym_cmds, $1)=\n_LT_TAGVAR(compiler_needs_object, $1)=no\n_LT_TAGVAR(export_dynamic_flag_spec, $1)=\n_LT_TAGVAR(hardcode_direct, $1)=no\n_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n_LT_TAGVAR(hardcode_libdir_separator, $1)=\n_LT_TAGVAR(hardcode_minus_L, $1)=no\n_LT_TAGVAR(hardcode_shlibpath_var, $1)=unsupported\n_LT_TAGVAR(hardcode_automatic, $1)=no\n_LT_TAGVAR(inherit_rpath, $1)=no\n_LT_TAGVAR(module_cmds, $1)=\n_LT_TAGVAR(module_expsym_cmds, $1)=\n_LT_TAGVAR(link_all_deplibs, $1)=unknown\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n_LT_TAGVAR(no_undefined_flag, $1)=\n_LT_TAGVAR(whole_archive_flag_spec, $1)=\n_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n\n# Source file extension for C++ test sources.\nac_ext=cpp\n\n# Object file extension for compiled C++ test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# No sense in running all these tests if we already determined that\n# the CXX compiler isn't working.  Some variables (like enable_shared)\n# are currently assumed to apply to all compilers on this platform,\n# and will be corrupted by setting them based on a non-working compiler.\nif test yes != \"$_lt_caught_CXX_error\"; then\n  # Code to be used in simple compile tests\n  lt_simple_compile_test_code=\"int some_variable = 0;\"\n\n  # Code to be used in simple link tests\n  lt_simple_link_test_code='int main(int, char *[[]]) { return(0); }'\n\n  # ltmain only uses $CC for tagged configurations so make sure $CC is set.\n  _LT_TAG_COMPILER\n\n  # save warnings/boilerplate of simple test code\n  _LT_COMPILER_BOILERPLATE\n  _LT_LINKER_BOILERPLATE\n\n  # Allow CC to be a program name with arguments.\n  lt_save_CC=$CC\n  lt_save_CFLAGS=$CFLAGS\n  lt_save_LD=$LD\n  lt_save_GCC=$GCC\n  GCC=$GXX\n  lt_save_with_gnu_ld=$with_gnu_ld\n  lt_save_path_LD=$lt_cv_path_LD\n  if test -n \"${lt_cv_prog_gnu_ldcxx+set}\"; then\n    lt_cv_prog_gnu_ld=$lt_cv_prog_gnu_ldcxx\n  else\n    $as_unset lt_cv_prog_gnu_ld\n  fi\n  if test -n \"${lt_cv_path_LDCXX+set}\"; then\n    lt_cv_path_LD=$lt_cv_path_LDCXX\n  else\n    $as_unset lt_cv_path_LD\n  fi\n  test -z \"${LDCXX+set}\" || LD=$LDCXX\n  CC=${CXX-\"c++\"}\n  CFLAGS=$CXXFLAGS\n  compiler=$CC\n  _LT_TAGVAR(compiler, $1)=$CC\n  _LT_CC_BASENAME([$compiler])\n\n  if test -n \"$compiler\"; then\n    # We don't want -fno-exception when compiling C++ code, so set the\n    # no_builtin_flag separately\n    if test yes = \"$GXX\"; then\n      _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=' -fno-builtin'\n    else\n      _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=\n    fi\n\n    if test yes = \"$GXX\"; then\n      # Set up default GNU C++ configuration\n\n      LT_PATH_LD\n\n      # Check if GNU C++ uses GNU ld as the underlying linker, since the\n      # archiving commands below assume that GNU ld is being used.\n      if test yes = \"$with_gnu_ld\"; then\n        _LT_TAGVAR(archive_cmds, $1)='$CC $pic_flag -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname -o $lib'\n        _LT_TAGVAR(archive_expsym_cmds, $1)='$CC $pic_flag -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n        _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n\n        # If archive_cmds runs LD, not CC, wlarc should be empty\n        # XXX I think wlarc can be eliminated in ltcf-cxx, but I need to\n        #     investigate it a little bit more. (MM)\n        wlarc='$wl'\n\n        # ancient GNU ld didn't support --whole-archive et. al.\n        if eval \"`$CC -print-prog-name=ld` --help 2>&1\" |\n\t  $GREP 'no-whole-archive' > /dev/null; then\n          _LT_TAGVAR(whole_archive_flag_spec, $1)=$wlarc'--whole-archive$convenience '$wlarc'--no-whole-archive'\n        else\n          _LT_TAGVAR(whole_archive_flag_spec, $1)=\n        fi\n      else\n        with_gnu_ld=no\n        wlarc=\n\n        # A generic and very simple default shared library creation\n        # command for GNU C++ for the case where it uses the native\n        # linker, instead of GNU ld.  If possible, this setting should\n        # overridden to take advantage of the native linker features on\n        # the platform it is being used on.\n        _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $lib'\n      fi\n\n      # Commands to make compiler produce verbose output that lists\n      # what \"hidden\" libraries, object files and flags are used when\n      # linking a shared library.\n      output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\n    else\n      GXX=no\n      with_gnu_ld=no\n      wlarc=\n    fi\n\n    # PORTME: fill in a description of your system's C++ link characteristics\n    AC_MSG_CHECKING([whether the $compiler linker ($LD) supports shared libraries])\n    _LT_TAGVAR(ld_shlibs, $1)=yes\n    case $host_os in\n      aix3*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n      aix[[4-9]]*)\n        if test ia64 = \"$host_cpu\"; then\n          # On IA64, the linker does run time linking by default, so we don't\n          # have to do anything special.\n          aix_use_runtimelinking=no\n          exp_sym_flag='-Bexport'\n          no_entry_flag=\n        else\n          aix_use_runtimelinking=no\n\n          # Test if we are trying to use run time linking or normal\n          # AIX style linking. If -brtl is somewhere in LDFLAGS, we\n          # have runtime linking enabled, and use it for executables.\n          # For shared libraries, we enable/disable runtime linking\n          # depending on the kind of the shared library created -\n          # when \"with_aix_soname,aix_use_runtimelinking\" is:\n          # \"aix,no\"   lib.a(lib.so.V) shared, rtl:no,  for executables\n          # \"aix,yes\"  lib.so          shared, rtl:yes, for executables\n          #            lib.a           static archive\n          # \"both,no\"  lib.so.V(shr.o) shared, rtl:yes\n          #            lib.a(lib.so.V) shared, rtl:no,  for executables\n          # \"both,yes\" lib.so.V(shr.o) shared, rtl:yes, for executables\n          #            lib.a(lib.so.V) shared, rtl:no\n          # \"svr4,*\"   lib.so.V(shr.o) shared, rtl:yes, for executables\n          #            lib.a           static archive\n          case $host_os in aix4.[[23]]|aix4.[[23]].*|aix[[5-9]]*)\n\t    for ld_flag in $LDFLAGS; do\n\t      case $ld_flag in\n\t      *-brtl*)\n\t        aix_use_runtimelinking=yes\n\t        break\n\t        ;;\n\t      esac\n\t    done\n\t    if test svr4,no = \"$with_aix_soname,$aix_use_runtimelinking\"; then\n\t      # With aix-soname=svr4, we create the lib.so.V shared archives only,\n\t      # so we don't have lib.a shared libs to link our executables.\n\t      # We have to force runtime linking in this case.\n\t      aix_use_runtimelinking=yes\n\t      LDFLAGS=\"$LDFLAGS -Wl,-brtl\"\n\t    fi\n\t    ;;\n          esac\n\n          exp_sym_flag='-bexport'\n          no_entry_flag='-bnoentry'\n        fi\n\n        # When large executables or shared objects are built, AIX ld can\n        # have problems creating the table of contents.  If linking a library\n        # or program results in \"error TOC overflow\" add -mminimal-toc to\n        # CXXFLAGS/CFLAGS for g++/gcc.  In the cases where that is not\n        # enough to fix the problem, add -Wl,-bbigtoc to LDFLAGS.\n\n        _LT_TAGVAR(archive_cmds, $1)=''\n        _LT_TAGVAR(hardcode_direct, $1)=yes\n        _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n        _LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n        _LT_TAGVAR(link_all_deplibs, $1)=yes\n        _LT_TAGVAR(file_list_spec, $1)='$wl-f,'\n        case $with_aix_soname,$aix_use_runtimelinking in\n        aix,*) ;;\t# no import file\n        svr4,* | *,yes) # use import file\n          # The Import File defines what to hardcode.\n          _LT_TAGVAR(hardcode_direct, $1)=no\n          _LT_TAGVAR(hardcode_direct_absolute, $1)=no\n          ;;\n        esac\n\n        if test yes = \"$GXX\"; then\n          case $host_os in aix4.[[012]]|aix4.[[012]].*)\n          # We only want to do this on AIX 4.2 and lower, the check\n          # below for broken collect2 doesn't work under 4.3+\n\t  collect2name=`$CC -print-prog-name=collect2`\n\t  if test -f \"$collect2name\" &&\n\t     strings \"$collect2name\" | $GREP resolve_lib_name >/dev/null\n\t  then\n\t    # We have reworked collect2\n\t    :\n\t  else\n\t    # We have old collect2\n\t    _LT_TAGVAR(hardcode_direct, $1)=unsupported\n\t    # It fails to find uninstalled libraries when the uninstalled\n\t    # path is not listed in the libpath.  Setting hardcode_minus_L\n\t    # to unsupported forces relinking\n\t    _LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=\n\t  fi\n          esac\n          shared_flag='-shared'\n\t  if test yes = \"$aix_use_runtimelinking\"; then\n\t    shared_flag=$shared_flag' $wl-G'\n\t  fi\n\t  # Need to ensure runtime linking is disabled for the traditional\n\t  # shared library, or the linker may eventually find shared libraries\n\t  # /with/ Import File - we do not want to mix them.\n\t  shared_flag_aix='-shared'\n\t  shared_flag_svr4='-shared $wl-G'\n        else\n          # not using gcc\n          if test ia64 = \"$host_cpu\"; then\n\t  # VisualAge C++, Version 5.5 for AIX 5L for IA-64, Beta 3 Release\n\t  # chokes on -Wl,-G. The following line is correct:\n\t  shared_flag='-G'\n          else\n\t    if test yes = \"$aix_use_runtimelinking\"; then\n\t      shared_flag='$wl-G'\n\t    else\n\t      shared_flag='$wl-bM:SRE'\n\t    fi\n\t    shared_flag_aix='$wl-bM:SRE'\n\t    shared_flag_svr4='$wl-G'\n          fi\n        fi\n\n        _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-bexpall'\n        # It seems that -bexpall does not export symbols beginning with\n        # underscore (_), so it is better to generate a list of symbols to\n\t# export.\n        _LT_TAGVAR(always_export_symbols, $1)=yes\n\tif test aix,yes = \"$with_aix_soname,$aix_use_runtimelinking\"; then\n          # Warning - without using the other runtime loading flags (-brtl),\n          # -berok will link without error, but may produce a broken library.\n          # The \"-G\" linker flag allows undefined symbols.\n          _LT_TAGVAR(no_undefined_flag, $1)='-bernotok'\n          # Determine the default libpath from the value encoded in an empty\n          # executable.\n          _LT_SYS_MODULE_PATH_AIX([$1])\n          _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-blibpath:$libdir:'\"$aix_libpath\"\n\n          _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $deplibs $wl'$no_entry_flag' $compiler_flags `if test -n \"$allow_undefined_flag\"; then func_echo_all \"$wl$allow_undefined_flag\"; else :; fi` $wl'$exp_sym_flag:\\$export_symbols' '$shared_flag\n        else\n          if test ia64 = \"$host_cpu\"; then\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-R $libdir:/usr/lib:/lib'\n\t    _LT_TAGVAR(allow_undefined_flag, $1)=\"-z nodefs\"\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"\\$CC $shared_flag\"' -o $output_objdir/$soname $libobjs $deplibs '\"\\$wl$no_entry_flag\"' $compiler_flags $wl$allow_undefined_flag '\"\\$wl$exp_sym_flag:\\$export_symbols\"\n          else\n\t    # Determine the default libpath from the value encoded in an\n\t    # empty executable.\n\t    _LT_SYS_MODULE_PATH_AIX([$1])\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-blibpath:$libdir:'\"$aix_libpath\"\n\t    # Warning - without using the other run time loading flags,\n\t    # -berok will link without error, but may produce a broken library.\n\t    _LT_TAGVAR(no_undefined_flag, $1)=' $wl-bernotok'\n\t    _LT_TAGVAR(allow_undefined_flag, $1)=' $wl-berok'\n\t    if test yes = \"$with_gnu_ld\"; then\n\t      # We only use this code for GNU lds that support --whole-archive.\n\t      _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive$convenience $wl--no-whole-archive'\n\t    else\n\t      # Exported symbols can be pulled into shared objects from archives\n\t      _LT_TAGVAR(whole_archive_flag_spec, $1)='$convenience'\n\t    fi\n\t    _LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$RM -r $output_objdir/$realname.d~$MKDIR $output_objdir/$realname.d'\n\t    # -brtl affects multiple linker settings, -berok does not and is overridden later\n\t    compiler_flags_filtered='`func_echo_all \"$compiler_flags \" | $SED -e \"s%-brtl\\\\([[, ]]\\\\)%-berok\\\\1%g\"`'\n\t    if test svr4 != \"$with_aix_soname\"; then\n\t      # This is similar to how AIX traditionally builds its shared\n\t      # libraries. Need -bnortl late, we may have -brtl in LDFLAGS.\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$CC '$shared_flag_aix' -o $output_objdir/$realname.d/$soname $libobjs $deplibs $wl-bnoentry '$compiler_flags_filtered'$wl-bE:$export_symbols$allow_undefined_flag~$AR $AR_FLAGS $output_objdir/$libname$release.a $output_objdir/$realname.d/$soname'\n\t    fi\n\t    if test aix != \"$with_aix_soname\"; then\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$CC '$shared_flag_svr4' -o $output_objdir/$realname.d/$shared_archive_member_spec.o $libobjs $deplibs $wl-bnoentry '$compiler_flags_filtered'$wl-bE:$export_symbols$allow_undefined_flag~$STRIP -e $output_objdir/$realname.d/$shared_archive_member_spec.o~( func_echo_all \"#! $soname($shared_archive_member_spec.o)\"; if test shr_64 = \"$shared_archive_member_spec\"; then func_echo_all \"# 64\"; else func_echo_all \"# 32\"; fi; cat $export_symbols ) > $output_objdir/$realname.d/$shared_archive_member_spec.imp~$AR $AR_FLAGS $output_objdir/$soname $output_objdir/$realname.d/$shared_archive_member_spec.o $output_objdir/$realname.d/$shared_archive_member_spec.imp'\n\t    else\n\t      # used by -dlpreopen to get the symbols\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$MV  $output_objdir/$realname.d/$soname $output_objdir'\n\t    fi\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$RM -r $output_objdir/$realname.d'\n          fi\n        fi\n        ;;\n\n      beos*)\n\tif $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t  # Joseph Beckenbach <jrb3@best.com> says some releases of gcc\n\t  # support --undefined.  This deserves some investigation.  FIXME\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -nostart $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\telse\n\t  _LT_TAGVAR(ld_shlibs, $1)=no\n\tfi\n\t;;\n\n      chorus*)\n        case $cc_basename in\n          *)\n\t  # FIXME: insert proper C++ library support\n\t  _LT_TAGVAR(ld_shlibs, $1)=no\n\t  ;;\n        esac\n        ;;\n\n      cygwin* | mingw* | pw32* | cegcc*)\n\tcase $GXX,$cc_basename in\n\t,cl* | no,cl*)\n\t  # Native MSVC\n\t  # hardcode_libdir_flag_spec is actually meaningless, as there is\n\t  # no search path for DLLs.\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)=' '\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t  _LT_TAGVAR(always_export_symbols, $1)=yes\n\t  _LT_TAGVAR(file_list_spec, $1)='@'\n\t  # Tell ltmain to make .lib files, not .a files.\n\t  libext=lib\n\t  # Tell ltmain to make .dll files, not .so files.\n\t  shrext_cmds=.dll\n\t  # FIXME: Setting linknames here is a bad hack.\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $compiler_flags $deplibs -Wl,-DLL,-IMPLIB:\"$tool_output_objdir$libname.dll.lib\"~linknames='\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='if _LT_DLL_DEF_P([$export_symbols]); then\n              cp \"$export_symbols\" \"$output_objdir/$soname.def\";\n              echo \"$tool_output_objdir$soname.def\" > \"$output_objdir/$soname.exp\";\n            else\n              $SED -e '\\''s/^/-link -EXPORT:/'\\'' < $export_symbols > $output_objdir/$soname.exp;\n            fi~\n            $CC -o $tool_output_objdir$soname $libobjs $compiler_flags $deplibs \"@$tool_output_objdir$soname.exp\" -Wl,-DLL,-IMPLIB:\"$tool_output_objdir$libname.dll.lib\"~\n            linknames='\n\t  # The linker will not automatically build a static lib if we build a DLL.\n\t  # _LT_TAGVAR(old_archive_from_new_cmds, $1)='true'\n\t  _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\t  # Don't use ranlib\n\t  _LT_TAGVAR(old_postinstall_cmds, $1)='chmod 644 $oldlib'\n\t  _LT_TAGVAR(postlink_cmds, $1)='lt_outputfile=\"@OUTPUT@\"~\n            lt_tool_outputfile=\"@TOOL_OUTPUT@\"~\n            case $lt_outputfile in\n              *.exe|*.EXE) ;;\n              *)\n                lt_outputfile=$lt_outputfile.exe\n                lt_tool_outputfile=$lt_tool_outputfile.exe\n                ;;\n            esac~\n            func_to_tool_file \"$lt_outputfile\"~\n            if test : != \"$MANIFEST_TOOL\" && test -f \"$lt_outputfile.manifest\"; then\n              $MANIFEST_TOOL -manifest \"$lt_tool_outputfile.manifest\" -outputresource:\"$lt_tool_outputfile\" || exit 1;\n              $RM \"$lt_outputfile.manifest\";\n            fi'\n\t  ;;\n\t*)\n\t  # g++\n\t  # _LT_TAGVAR(hardcode_libdir_flag_spec, $1) is actually meaningless,\n\t  # as there is no search path for DLLs.\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-all-symbols'\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t  _LT_TAGVAR(always_export_symbols, $1)=no\n\t  _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\n\t  if $LD --help 2>&1 | $GREP 'auto-import' > /dev/null; then\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $output_objdir/$soname $wl--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n\t    # If the export-symbols file already is a .def file, use it as\n\t    # is; otherwise, prepend EXPORTS...\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='if _LT_DLL_DEF_P([$export_symbols]); then\n              cp $export_symbols $output_objdir/$soname.def;\n            else\n              echo EXPORTS > $output_objdir/$soname.def;\n              cat $export_symbols >> $output_objdir/$soname.def;\n            fi~\n            $CC -shared -nostdlib $output_objdir/$soname.def $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $output_objdir/$soname $wl--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n\t  else\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t  fi\n\t  ;;\n\tesac\n\t;;\n      darwin* | rhapsody*)\n        _LT_DARWIN_LINKER_FEATURES($1)\n\t;;\n\n      os2*)\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t_LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t_LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\tshrext_cmds=.dll\n\t_LT_TAGVAR(archive_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t  $ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t  $ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t  $ECHO EXPORTS >> $output_objdir/$libname.def~\n\t  emxexp $libobjs | $SED /\"_DLL_InitTerm\"/d >> $output_objdir/$libname.def~\n\t  $CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\t  emximp -o $lib $output_objdir/$libname.def'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t  $ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t  $ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t  $ECHO EXPORTS >> $output_objdir/$libname.def~\n\t  prefix_cmds=\"$SED\"~\n\t  if test EXPORTS = \"`$SED 1q $export_symbols`\"; then\n\t    prefix_cmds=\"$prefix_cmds -e 1d\";\n\t  fi~\n\t  prefix_cmds=\"$prefix_cmds -e \\\"s/^\\(.*\\)$/_\\1/g\\\"\"~\n\t  cat $export_symbols | $prefix_cmds >> $output_objdir/$libname.def~\n\t  $CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\t  emximp -o $lib $output_objdir/$libname.def'\n\t_LT_TAGVAR(old_archive_From_new_cmds, $1)='emximp -o $output_objdir/${libname}_dll.a $output_objdir/$libname.def'\n\t_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\t;;\n\n      dgux*)\n        case $cc_basename in\n          ec++*)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          ghcx*)\n\t    # Green Hills C++ Compiler\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n        esac\n        ;;\n\n      freebsd2.*)\n        # C++ shared libraries reported to be fairly broken before\n\t# switch to ELF\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n\n      freebsd-elf*)\n        _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n        ;;\n\n      freebsd* | dragonfly*)\n        # FreeBSD 3 and later use GNU C++ and GNU ld with standard ELF\n        # conventions\n        _LT_TAGVAR(ld_shlibs, $1)=yes\n        ;;\n\n      haiku*)\n        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n        _LT_TAGVAR(link_all_deplibs, $1)=yes\n        ;;\n\n      hpux9*)\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl+b $wl$libdir'\n        _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n        _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n        _LT_TAGVAR(hardcode_direct, $1)=yes\n        _LT_TAGVAR(hardcode_minus_L, $1)=yes # Not in the search PATH,\n\t\t\t\t             # but as the default\n\t\t\t\t             # location of the library.\n\n        case $cc_basename in\n          CC*)\n            # FIXME: insert proper C++ library support\n            _LT_TAGVAR(ld_shlibs, $1)=no\n            ;;\n          aCC*)\n            _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$CC -b $wl+b $wl$install_libdir -o $output_objdir/$soname $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~test \"x$output_objdir/$soname\" = \"x$lib\" || mv $output_objdir/$soname $lib'\n            # Commands to make compiler produce verbose output that lists\n            # what \"hidden\" libraries, object files and flags are used when\n            # linking a shared library.\n            #\n            # There doesn't appear to be a way to prevent this compiler from\n            # explicitly linking system object files so we need to strip them\n            # from the output so that they don't get included in the library\n            # dependencies.\n            output_verbose_link_cmd='templist=`($CC -b $CFLAGS -v conftest.$objext 2>&1) | $EGREP \"\\-L\"`; list= ; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n            ;;\n          *)\n            if test yes = \"$GXX\"; then\n              _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$CC -shared -nostdlib $pic_flag $wl+b $wl$install_libdir -o $output_objdir/$soname $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~test \"x$output_objdir/$soname\" = \"x$lib\" || mv $output_objdir/$soname $lib'\n            else\n              # FIXME: insert proper C++ library support\n              _LT_TAGVAR(ld_shlibs, $1)=no\n            fi\n            ;;\n        esac\n        ;;\n\n      hpux10*|hpux11*)\n        if test no = \"$with_gnu_ld\"; then\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl+b $wl$libdir'\n\t  _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n          case $host_cpu in\n            hppa*64*|ia64*)\n              ;;\n            *)\n\t      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n              ;;\n          esac\n        fi\n        case $host_cpu in\n          hppa*64*|ia64*)\n            _LT_TAGVAR(hardcode_direct, $1)=no\n            _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n            ;;\n          *)\n            _LT_TAGVAR(hardcode_direct, $1)=yes\n            _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n            _LT_TAGVAR(hardcode_minus_L, $1)=yes # Not in the search PATH,\n\t\t\t\t\t         # but as the default\n\t\t\t\t\t         # location of the library.\n            ;;\n        esac\n\n        case $cc_basename in\n          CC*)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          aCC*)\n\t    case $host_cpu in\n\t      hppa*64*)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t        ;;\n\t      ia64*)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname $wl+nodefaultrpath -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t        ;;\n\t      *)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t        ;;\n\t    esac\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`($CC -b $CFLAGS -v conftest.$objext 2>&1) | $GREP \"\\-L\"`; list= ; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n\t    ;;\n          *)\n\t    if test yes = \"$GXX\"; then\n\t      if test no = \"$with_gnu_ld\"; then\n\t        case $host_cpu in\n\t          hppa*64*)\n\t            _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib -fPIC $wl+h $wl$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t            ;;\n\t          ia64*)\n\t            _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $pic_flag $wl+h $wl$soname $wl+nodefaultrpath -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t            ;;\n\t          *)\n\t            _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $pic_flag $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t            ;;\n\t        esac\n\t      fi\n\t    else\n\t      # FIXME: insert proper C++ library support\n\t      _LT_TAGVAR(ld_shlibs, $1)=no\n\t    fi\n\t    ;;\n        esac\n        ;;\n\n      interix[[3-9]]*)\n\t_LT_TAGVAR(hardcode_direct, $1)=no\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n\t# Hack: On Interix 3.x, we cannot compile PIC because of a broken gcc.\n\t# Instead, shared libraries are loaded at an image base (0x10000000 by\n\t# default) and relocated if they conflict, which is a slow very memory\n\t# consuming and fragmenting process.  To avoid this, we pick a random,\n\t# 256 KiB-aligned image base between 0x50000000 and 0x6FFC0000 at link\n\t# time.  Moving up from 0x10000000 also allows more sbrk(2) space.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-h,$soname $wl--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='sed \"s|^|_|\" $export_symbols >$output_objdir/$soname.expsym~$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-h,$soname $wl--retain-symbols-file,$output_objdir/$soname.expsym $wl--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n\t;;\n      irix5* | irix6*)\n        case $cc_basename in\n          CC*)\n\t    # SGI C++\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared -all -multigot $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n\n\t    # Archives containing C++ object files must be created using\n\t    # \"CC -ar\", where \"CC\" is the IRIX C++ compiler.  This is\n\t    # necessary to make sure instantiated templates are included\n\t    # in the archive.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -ar -WR,-u -o $oldlib $oldobjs'\n\t    ;;\n          *)\n\t    if test yes = \"$GXX\"; then\n\t      if test no = \"$with_gnu_ld\"; then\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n\t      else\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` -o $lib'\n\t      fi\n\t    fi\n\t    _LT_TAGVAR(link_all_deplibs, $1)=yes\n\t    ;;\n        esac\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n        _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n        _LT_TAGVAR(inherit_rpath, $1)=yes\n        ;;\n\n      linux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n        case $cc_basename in\n          KCC*)\n\t    # Kuck and Associates, Inc. (KAI) C++ Compiler\n\n\t    # KCC will only create a shared library if the output file\n\t    # ends with \".so\" (or \".sl\" for HP-UX), so rename the library\n\t    # to its proper name (with version) after linking.\n\t    _LT_TAGVAR(archive_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\\''s/\\([[^()0-9A-Za-z{}]]\\)/\\\\\\\\\\1/g'\\''`; templib=`echo $lib | $SED -e \"s/\\$tempext\\..*/.so/\"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \\$templib; mv \\$templib $lib'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\\''s/\\([[^()0-9A-Za-z{}]]\\)/\\\\\\\\\\1/g'\\''`; templib=`echo $lib | $SED -e \"s/\\$tempext\\..*/.so/\"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \\$templib $wl-retain-symbols-file,$export_symbols; mv \\$templib $lib'\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`$CC $CFLAGS -v conftest.$objext -o libconftest$shared_ext 2>&1 | $GREP \"ld\"`; rm -f libconftest$shared_ext; list= ; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n\n\t    # Archives containing C++ object files must be created using\n\t    # \"CC -Bstatic\", where \"CC\" is the KAI C++ compiler.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -Bstatic -o $oldlib $oldobjs'\n\t    ;;\n\t  icpc* | ecpc* )\n\t    # Intel C++\n\t    with_gnu_ld=yes\n\t    # version 8.0 and above of icpc choke on multiply defined symbols\n\t    # if we add $predep_objects and $postdep_objects, however 7.1 and\n\t    # earlier do not add the objects themselves.\n\t    case `$CC -V 2>&1` in\n\t      *\"Version 7.\"*)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname -o $lib'\n\t\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\t\t;;\n\t      *)  # Version 8.0 or newer\n\t        tmp_idyn=\n\t        case $host_cpu in\n\t\t  ia64*) tmp_idyn=' -i_dynamic';;\n\t\tesac\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared'\"$tmp_idyn\"' $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared'\"$tmp_idyn\"' $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\t\t;;\n\t    esac\n\t    _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive$convenience $wl--no-whole-archive'\n\t    ;;\n          pgCC* | pgcpp*)\n            # Portland Group C++ compiler\n\t    case `$CC -V` in\n\t    *pgCC\\ [[1-5]].* | *pgcpp\\ [[1-5]].*)\n\t      _LT_TAGVAR(prelink_cmds, $1)='tpldir=Template.dir~\n               rm -rf $tpldir~\n               $CC --prelink_objects --instantiation_dir $tpldir $objs $libobjs $compile_deplibs~\n               compile_command=\"$compile_command `find $tpldir -name \\*.o | sort | $NL2SP`\"'\n\t      _LT_TAGVAR(old_archive_cmds, $1)='tpldir=Template.dir~\n                rm -rf $tpldir~\n                $CC --prelink_objects --instantiation_dir $tpldir $oldobjs$old_deplibs~\n                $AR $AR_FLAGS $oldlib$oldobjs$old_deplibs `find $tpldir -name \\*.o | sort | $NL2SP`~\n                $RANLIB $oldlib'\n\t      _LT_TAGVAR(archive_cmds, $1)='tpldir=Template.dir~\n                rm -rf $tpldir~\n                $CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n                $CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags $wl-soname $wl$soname -o $lib'\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='tpldir=Template.dir~\n                rm -rf $tpldir~\n                $CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n                $CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\t      ;;\n\t    *) # Version 6 and above use weak symbols\n\t      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname -o $lib'\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\t      ;;\n\t    esac\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl--rpath $wl$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n            ;;\n\t  cxx*)\n\t    # Compaq C++\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname -o $lib'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname  -o $lib $wl-retain-symbols-file $wl$export_symbols'\n\n\t    runpath_var=LD_RUN_PATH\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-rpath $libdir'\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP \"ld\"`; templist=`func_echo_all \"$templist\" | $SED \"s/\\(^.*ld.*\\)\\( .*ld .*$\\)/\\1/\"`; list= ; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"X$list\" | $Xsed'\n\t    ;;\n\t  xl* | mpixl* | bgxl*)\n\t    # IBM XL 8.0 on PPC, with GNU ld\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -qmkshrobj $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t    if test yes = \"$supports_anon_versioning\"; then\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $output_objdir/$libname.ver~\n                cat $export_symbols | sed -e \"s/\\(.*\\)/\\1;/\" >> $output_objdir/$libname.ver~\n                echo \"local: *; };\" >> $output_objdir/$libname.ver~\n                $CC -qmkshrobj $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-version-script $wl$output_objdir/$libname.ver -o $lib'\n\t    fi\n\t    ;;\n\t  *)\n\t    case `$CC -V 2>&1 | sed 5q` in\n\t    *Sun\\ C*)\n\t      # Sun C++ 5.9\n\t      _LT_TAGVAR(no_undefined_flag, $1)=' -zdefs'\n\t      _LT_TAGVAR(archive_cmds, $1)='$CC -G$allow_undefined_flag -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G$allow_undefined_flag -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-retain-symbols-file $wl$export_symbols'\n\t      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t      _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`new_convenience=; for conv in $convenience\\\"\\\"; do test -z \\\"$conv\\\" || new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t      _LT_TAGVAR(compiler_needs_object, $1)=yes\n\n\t      # Not sure whether something based on\n\t      # $CC $CFLAGS -v conftest.$objext -o libconftest$shared_ext 2>&1\n\t      # would be better.\n\t      output_verbose_link_cmd='func_echo_all'\n\n\t      # Archives containing C++ object files must be created using\n\t      # \"CC -xar\", where \"CC\" is the Sun C++ compiler.  This is\n\t      # necessary to make sure instantiated templates are included\n\t      # in the archive.\n\t      _LT_TAGVAR(old_archive_cmds, $1)='$CC -xar -o $oldlib $oldobjs'\n\t      ;;\n\t    esac\n\t    ;;\n\tesac\n\t;;\n\n      lynxos*)\n        # FIXME: insert proper C++ library support\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\t;;\n\n      m88k*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n\t;;\n\n      mvs*)\n        case $cc_basename in\n          cxx*)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n\t  *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n\tesac\n\t;;\n\n      netbsd*)\n        if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable  -o $lib $predep_objects $libobjs $deplibs $postdep_objects $linker_flags'\n\t  wlarc=\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes\n\t  _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\tfi\n\t# Workaround some broken pre-1.5 toolchains\n\toutput_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP conftest.$objext | $SED -e \"s:-lgcc -lc -lgcc::\"'\n\t;;\n\n      *nto* | *qnx*)\n        _LT_TAGVAR(ld_shlibs, $1)=yes\n\t;;\n\n      openbsd* | bitrig*)\n\tif test -f /usr/libexec/ld.so; then\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes\n\t  _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t  _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $lib'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t  if test -z \"`echo __ELF__ | $CC -E - | grep __ELF__`\"; then\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-retain-symbols-file,$export_symbols -o $lib'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)=$wlarc'--whole-archive$convenience '$wlarc'--no-whole-archive'\n\t  fi\n\t  output_verbose_link_cmd=func_echo_all\n\telse\n\t  _LT_TAGVAR(ld_shlibs, $1)=no\n\tfi\n\t;;\n\n      osf3* | osf4* | osf5*)\n        case $cc_basename in\n          KCC*)\n\t    # Kuck and Associates, Inc. (KAI) C++ Compiler\n\n\t    # KCC will only create a shared library if the output file\n\t    # ends with \".so\" (or \".sl\" for HP-UX), so rename the library\n\t    # to its proper name (with version) after linking.\n\t    _LT_TAGVAR(archive_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\\''s/\\([[^()0-9A-Za-z{}]]\\)/\\\\\\\\\\1/g'\\''`; templib=`echo \"$lib\" | $SED -e \"s/\\$tempext\\..*/.so/\"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \\$templib; mv \\$templib $lib'\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t    # Archives containing C++ object files must be created using\n\t    # the KAI C++ compiler.\n\t    case $host in\n\t      osf3*) _LT_TAGVAR(old_archive_cmds, $1)='$CC -Bstatic -o $oldlib $oldobjs' ;;\n\t      *) _LT_TAGVAR(old_archive_cmds, $1)='$CC -o $oldlib $oldobjs' ;;\n\t    esac\n\t    ;;\n          RCC*)\n\t    # Rational C++ 2.4.1\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          cxx*)\n\t    case $host in\n\t      osf3*)\n\t        _LT_TAGVAR(allow_undefined_flag, $1)=' $wl-expect_unresolved $wl\\*'\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n\t        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t\t;;\n\t      *)\n\t        _LT_TAGVAR(allow_undefined_flag, $1)=' -expect_unresolved \\*'\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -msym -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n\t        _LT_TAGVAR(archive_expsym_cmds, $1)='for i in `cat $export_symbols`; do printf \"%s %s\\\\n\" -exported_symbol \"\\$i\" >> $lib.exp; done~\n                  echo \"-hidden\">> $lib.exp~\n                  $CC -shared$allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -msym -soname $soname $wl-input $wl$lib.exp  `test -n \"$verstring\" && $ECHO \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib~\n                  $RM $lib.exp'\n\t        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-rpath $libdir'\n\t\t;;\n\t    esac\n\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP \"ld\" | $GREP -v \"ld:\"`; templist=`func_echo_all \"$templist\" | $SED \"s/\\(^.*ld.*\\)\\( .*ld.*$\\)/\\1/\"`; list= ; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n\t    ;;\n\t  *)\n\t    if test yes,no = \"$GXX,$with_gnu_ld\"; then\n\t      _LT_TAGVAR(allow_undefined_flag, $1)=' $wl-expect_unresolved $wl\\*'\n\t      case $host in\n\t        osf3*)\n\t          _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n\t\t  ;;\n\t        *)\n\t          _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib $allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-msym $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n\t\t  ;;\n\t      esac\n\n\t      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t      # Commands to make compiler produce verbose output that lists\n\t      # what \"hidden\" libraries, object files and flags are used when\n\t      # linking a shared library.\n\t      output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\n\t    else\n\t      # FIXME: insert proper C++ library support\n\t      _LT_TAGVAR(ld_shlibs, $1)=no\n\t    fi\n\t    ;;\n        esac\n        ;;\n\n      psos*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n\n      sunos4*)\n        case $cc_basename in\n          CC*)\n\t    # Sun C++ 4.x\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          lcc*)\n\t    # Lucid\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n        esac\n        ;;\n\n      solaris*)\n        case $cc_basename in\n          CC* | sunCC*)\n\t    # Sun C++ 4.2, 5.x and Centerline C++\n            _LT_TAGVAR(archive_cmds_need_lc,$1)=yes\n\t    _LT_TAGVAR(no_undefined_flag, $1)=' -zdefs'\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -G$allow_undefined_flag -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n              $CC -G$allow_undefined_flag $wl-M $wl$lib.exp -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$RM $lib.exp'\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t    _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t    case $host_os in\n\t      solaris2.[[0-5]] | solaris2.[[0-5]].*) ;;\n\t      *)\n\t\t# The compiler driver will combine and reorder linker options,\n\t\t# but understands '-z linker_flag'.\n\t        # Supported since Solaris 2.6 (maybe 2.5.1?)\n\t\t_LT_TAGVAR(whole_archive_flag_spec, $1)='-z allextract$convenience -z defaultextract'\n\t        ;;\n\t    esac\n\t    _LT_TAGVAR(link_all_deplibs, $1)=yes\n\n\t    output_verbose_link_cmd='func_echo_all'\n\n\t    # Archives containing C++ object files must be created using\n\t    # \"CC -xar\", where \"CC\" is the Sun C++ compiler.  This is\n\t    # necessary to make sure instantiated templates are included\n\t    # in the archive.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -xar -o $oldlib $oldobjs'\n\t    ;;\n          gcx*)\n\t    # Green Hills C++ Compiler\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-h $wl$soname -o $lib'\n\n\t    # The C++ compiler must be used to create the archive.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC $LDFLAGS -archive -o $oldlib $oldobjs'\n\t    ;;\n          *)\n\t    # GNU C++ compiler with Solaris linker\n\t    if test yes,no = \"$GXX,$with_gnu_ld\"; then\n\t      _LT_TAGVAR(no_undefined_flag, $1)=' $wl-z ${wl}defs'\n\t      if $CC --version | $GREP -v '^2\\.7' > /dev/null; then\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-h $wl$soname -o $lib'\n\t        _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n                  $CC -shared $pic_flag -nostdlib $wl-M $wl$lib.exp $wl-h $wl$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$RM $lib.exp'\n\n\t        # Commands to make compiler produce verbose output that lists\n\t        # what \"hidden\" libraries, object files and flags are used when\n\t        # linking a shared library.\n\t        output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\t      else\n\t        # g++ 2.7 appears to require '-G' NOT '-shared' on this\n\t        # platform.\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -G -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-h $wl$soname -o $lib'\n\t        _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n                  $CC -G -nostdlib $wl-M $wl$lib.exp $wl-h $wl$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$RM $lib.exp'\n\n\t        # Commands to make compiler produce verbose output that lists\n\t        # what \"hidden\" libraries, object files and flags are used when\n\t        # linking a shared library.\n\t        output_verbose_link_cmd='$CC -G $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\t      fi\n\n\t      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-R $wl$libdir'\n\t      case $host_os in\n\t\tsolaris2.[[0-5]] | solaris2.[[0-5]].*) ;;\n\t\t*)\n\t\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl-z ${wl}allextract$convenience $wl-z ${wl}defaultextract'\n\t\t  ;;\n\t      esac\n\t    fi\n\t    ;;\n        esac\n        ;;\n\n    sysv4*uw2* | sysv5OpenUNIX* | sysv5UnixWare7.[[01]].[[10]]* | unixware7* | sco3.2v5.0.[[024]]*)\n      _LT_TAGVAR(no_undefined_flag, $1)='$wl-z,text'\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      runpath_var='LD_RUN_PATH'\n\n      case $cc_basename in\n        CC*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -G $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\t*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n      esac\n      ;;\n\n      sysv5* | sco3.2v5* | sco5v6*)\n\t# Note: We CANNOT use -z defs as we might desire, because we do not\n\t# link with -lc, and that would cause any symbols used from libc to\n\t# always be unresolved, which means just about no library would\n\t# ever link correctly.  If we're not using GNU ld we use -z text\n\t# though, which does catch some bad symbols but isn't as heavy-handed\n\t# as -z defs.\n\t_LT_TAGVAR(no_undefined_flag, $1)='$wl-z,text'\n\t_LT_TAGVAR(allow_undefined_flag, $1)='$wl-z,nodefs'\n\t_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-R,$libdir'\n\t_LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n\t_LT_TAGVAR(link_all_deplibs, $1)=yes\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-Bexport'\n\trunpath_var='LD_RUN_PATH'\n\n\tcase $cc_basename in\n          CC*)\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -G $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -Tprelink_objects $oldobjs~\n              '\"$_LT_TAGVAR(old_archive_cmds, $1)\"\n\t    _LT_TAGVAR(reload_cmds, $1)='$CC -Tprelink_objects $reload_objs~\n              '\"$_LT_TAGVAR(reload_cmds, $1)\"\n\t    ;;\n\t  *)\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    ;;\n\tesac\n      ;;\n\n      tandem*)\n        case $cc_basename in\n          NCC*)\n\t    # NonStop-UX NCC 3.20\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n        esac\n        ;;\n\n      vxworks*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n\n      *)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n    esac\n\n    AC_MSG_RESULT([$_LT_TAGVAR(ld_shlibs, $1)])\n    test no = \"$_LT_TAGVAR(ld_shlibs, $1)\" && can_build_shared=no\n\n    _LT_TAGVAR(GCC, $1)=$GXX\n    _LT_TAGVAR(LD, $1)=$LD\n\n    ## CAVEAT EMPTOR:\n    ## There is no encapsulation within the following macros, do not change\n    ## the running order or otherwise move them around unless you know exactly\n    ## what you are doing...\n    _LT_SYS_HIDDEN_LIBDEPS($1)\n    _LT_COMPILER_PIC($1)\n    _LT_COMPILER_C_O($1)\n    _LT_COMPILER_FILE_LOCKS($1)\n    _LT_LINKER_SHLIBS($1)\n    _LT_SYS_DYNAMIC_LINKER($1)\n    _LT_LINKER_HARDCODE_LIBPATH($1)\n\n    _LT_CONFIG($1)\n  fi # test -n \"$compiler\"\n\n  CC=$lt_save_CC\n  CFLAGS=$lt_save_CFLAGS\n  LDCXX=$LD\n  LD=$lt_save_LD\n  GCC=$lt_save_GCC\n  with_gnu_ld=$lt_save_with_gnu_ld\n  lt_cv_path_LDCXX=$lt_cv_path_LD\n  lt_cv_path_LD=$lt_save_path_LD\n  lt_cv_prog_gnu_ldcxx=$lt_cv_prog_gnu_ld\n  lt_cv_prog_gnu_ld=$lt_save_with_gnu_ld\nfi # test yes != \"$_lt_caught_CXX_error\"\n\nAC_LANG_POP\n])# _LT_LANG_CXX_CONFIG\n\n\n# _LT_FUNC_STRIPNAME_CNF\n# ----------------------\n# func_stripname_cnf prefix suffix name\n# strip PREFIX and SUFFIX off of NAME.\n# PREFIX and SUFFIX must not contain globbing or regex special\n# characters, hashes, percent signs, but SUFFIX may contain a leading\n# dot (in which case that matches only a dot).\n#\n# This function is identical to the (non-XSI) version of func_stripname,\n# except this one can be used by m4 code that may be executed by configure,\n# rather than the libtool script.\nm4_defun([_LT_FUNC_STRIPNAME_CNF],[dnl\nAC_REQUIRE([_LT_DECL_SED])\nAC_REQUIRE([_LT_PROG_ECHO_BACKSLASH])\nfunc_stripname_cnf ()\n{\n  case @S|@2 in\n  .*) func_stripname_result=`$ECHO \"@S|@3\" | $SED \"s%^@S|@1%%; s%\\\\\\\\@S|@2\\$%%\"`;;\n  *)  func_stripname_result=`$ECHO \"@S|@3\" | $SED \"s%^@S|@1%%; s%@S|@2\\$%%\"`;;\n  esac\n} # func_stripname_cnf\n])# _LT_FUNC_STRIPNAME_CNF\n\n\n# _LT_SYS_HIDDEN_LIBDEPS([TAGNAME])\n# ---------------------------------\n# Figure out \"hidden\" library dependencies from verbose\n# compiler output when linking a shared library.\n# Parse the compiler output and extract the necessary\n# objects, libraries and library flags.\nm4_defun([_LT_SYS_HIDDEN_LIBDEPS],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nAC_REQUIRE([_LT_FUNC_STRIPNAME_CNF])dnl\n# Dependencies to place before and after the object being linked:\n_LT_TAGVAR(predep_objects, $1)=\n_LT_TAGVAR(postdep_objects, $1)=\n_LT_TAGVAR(predeps, $1)=\n_LT_TAGVAR(postdeps, $1)=\n_LT_TAGVAR(compiler_lib_search_path, $1)=\n\ndnl we can't use the lt_simple_compile_test_code here,\ndnl because it contains code intended for an executable,\ndnl not a library.  It's possible we should let each\ndnl tag define a new lt_????_link_test_code variable,\ndnl but it's only used here...\nm4_if([$1], [], [cat > conftest.$ac_ext <<_LT_EOF\nint a;\nvoid foo (void) { a = 0; }\n_LT_EOF\n], [$1], [CXX], [cat > conftest.$ac_ext <<_LT_EOF\nclass Foo\n{\npublic:\n  Foo (void) { a = 0; }\nprivate:\n  int a;\n};\n_LT_EOF\n], [$1], [F77], [cat > conftest.$ac_ext <<_LT_EOF\n      subroutine foo\n      implicit none\n      integer*4 a\n      a=0\n      return\n      end\n_LT_EOF\n], [$1], [FC], [cat > conftest.$ac_ext <<_LT_EOF\n      subroutine foo\n      implicit none\n      integer a\n      a=0\n      return\n      end\n_LT_EOF\n], [$1], [GCJ], [cat > conftest.$ac_ext <<_LT_EOF\npublic class foo {\n  private int a;\n  public void bar (void) {\n    a = 0;\n  }\n};\n_LT_EOF\n], [$1], [GO], [cat > conftest.$ac_ext <<_LT_EOF\npackage foo\nfunc foo() {\n}\n_LT_EOF\n])\n\n_lt_libdeps_save_CFLAGS=$CFLAGS\ncase \"$CC $CFLAGS \" in #(\n*\\ -flto*\\ *) CFLAGS=\"$CFLAGS -fno-lto\" ;;\n*\\ -fwhopr*\\ *) CFLAGS=\"$CFLAGS -fno-whopr\" ;;\n*\\ -fuse-linker-plugin*\\ *) CFLAGS=\"$CFLAGS -fno-use-linker-plugin\" ;;\nesac\n\ndnl Parse the compiler output and extract the necessary\ndnl objects, libraries and library flags.\nif AC_TRY_EVAL(ac_compile); then\n  # Parse the compiler output and extract the necessary\n  # objects, libraries and library flags.\n\n  # Sentinel used to keep track of whether or not we are before\n  # the conftest object file.\n  pre_test_object_deps_done=no\n\n  for p in `eval \"$output_verbose_link_cmd\"`; do\n    case $prev$p in\n\n    -L* | -R* | -l*)\n       # Some compilers place space between \"-{L,R}\" and the path.\n       # Remove the space.\n       if test x-L = \"$p\" ||\n          test x-R = \"$p\"; then\n\t prev=$p\n\t continue\n       fi\n\n       # Expand the sysroot to ease extracting the directories later.\n       if test -z \"$prev\"; then\n         case $p in\n         -L*) func_stripname_cnf '-L' '' \"$p\"; prev=-L; p=$func_stripname_result ;;\n         -R*) func_stripname_cnf '-R' '' \"$p\"; prev=-R; p=$func_stripname_result ;;\n         -l*) func_stripname_cnf '-l' '' \"$p\"; prev=-l; p=$func_stripname_result ;;\n         esac\n       fi\n       case $p in\n       =*) func_stripname_cnf '=' '' \"$p\"; p=$lt_sysroot$func_stripname_result ;;\n       esac\n       if test no = \"$pre_test_object_deps_done\"; then\n\t case $prev in\n\t -L | -R)\n\t   # Internal compiler library paths should come after those\n\t   # provided the user.  The postdeps already come after the\n\t   # user supplied libs so there is no need to process them.\n\t   if test -z \"$_LT_TAGVAR(compiler_lib_search_path, $1)\"; then\n\t     _LT_TAGVAR(compiler_lib_search_path, $1)=$prev$p\n\t   else\n\t     _LT_TAGVAR(compiler_lib_search_path, $1)=\"${_LT_TAGVAR(compiler_lib_search_path, $1)} $prev$p\"\n\t   fi\n\t   ;;\n\t # The \"-l\" case would never come before the object being\n\t # linked, so don't bother handling this case.\n\t esac\n       else\n\t if test -z \"$_LT_TAGVAR(postdeps, $1)\"; then\n\t   _LT_TAGVAR(postdeps, $1)=$prev$p\n\t else\n\t   _LT_TAGVAR(postdeps, $1)=\"${_LT_TAGVAR(postdeps, $1)} $prev$p\"\n\t fi\n       fi\n       prev=\n       ;;\n\n    *.lto.$objext) ;; # Ignore GCC LTO objects\n    *.$objext)\n       # This assumes that the test object file only shows up\n       # once in the compiler output.\n       if test \"$p\" = \"conftest.$objext\"; then\n\t pre_test_object_deps_done=yes\n\t continue\n       fi\n\n       if test no = \"$pre_test_object_deps_done\"; then\n\t if test -z \"$_LT_TAGVAR(predep_objects, $1)\"; then\n\t   _LT_TAGVAR(predep_objects, $1)=$p\n\t else\n\t   _LT_TAGVAR(predep_objects, $1)=\"$_LT_TAGVAR(predep_objects, $1) $p\"\n\t fi\n       else\n\t if test -z \"$_LT_TAGVAR(postdep_objects, $1)\"; then\n\t   _LT_TAGVAR(postdep_objects, $1)=$p\n\t else\n\t   _LT_TAGVAR(postdep_objects, $1)=\"$_LT_TAGVAR(postdep_objects, $1) $p\"\n\t fi\n       fi\n       ;;\n\n    *) ;; # Ignore the rest.\n\n    esac\n  done\n\n  # Clean up.\n  rm -f a.out a.exe\nelse\n  echo \"libtool.m4: error: problem compiling $1 test program\"\nfi\n\n$RM -f confest.$objext\nCFLAGS=$_lt_libdeps_save_CFLAGS\n\n# PORTME: override above test on systems where it is broken\nm4_if([$1], [CXX],\n[case $host_os in\ninterix[[3-9]]*)\n  # Interix 3.5 installs completely hosed .la files for C++, so rather than\n  # hack all around it, let's just trust \"g++\" to DTRT.\n  _LT_TAGVAR(predep_objects,$1)=\n  _LT_TAGVAR(postdep_objects,$1)=\n  _LT_TAGVAR(postdeps,$1)=\n  ;;\nesac\n])\n\ncase \" $_LT_TAGVAR(postdeps, $1) \" in\n*\" -lc \"*) _LT_TAGVAR(archive_cmds_need_lc, $1)=no ;;\nesac\n _LT_TAGVAR(compiler_lib_search_dirs, $1)=\nif test -n \"${_LT_TAGVAR(compiler_lib_search_path, $1)}\"; then\n _LT_TAGVAR(compiler_lib_search_dirs, $1)=`echo \" ${_LT_TAGVAR(compiler_lib_search_path, $1)}\" | $SED -e 's! -L! !g' -e 's!^ !!'`\nfi\n_LT_TAGDECL([], [compiler_lib_search_dirs], [1],\n    [The directories searched by this compiler when creating a shared library])\n_LT_TAGDECL([], [predep_objects], [1],\n    [Dependencies to place before and after the objects being linked to\n    create a shared library])\n_LT_TAGDECL([], [postdep_objects], [1])\n_LT_TAGDECL([], [predeps], [1])\n_LT_TAGDECL([], [postdeps], [1])\n_LT_TAGDECL([], [compiler_lib_search_path], [1],\n    [The library search path used internally by the compiler when linking\n    a shared library])\n])# _LT_SYS_HIDDEN_LIBDEPS\n\n\n# _LT_LANG_F77_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for a Fortran 77 compiler are\n# suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_F77_CONFIG],\n[AC_LANG_PUSH(Fortran 77)\nif test -z \"$F77\" || test no = \"$F77\"; then\n  _lt_disable_F77=yes\nfi\n\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n_LT_TAGVAR(allow_undefined_flag, $1)=\n_LT_TAGVAR(always_export_symbols, $1)=no\n_LT_TAGVAR(archive_expsym_cmds, $1)=\n_LT_TAGVAR(export_dynamic_flag_spec, $1)=\n_LT_TAGVAR(hardcode_direct, $1)=no\n_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n_LT_TAGVAR(hardcode_libdir_separator, $1)=\n_LT_TAGVAR(hardcode_minus_L, $1)=no\n_LT_TAGVAR(hardcode_automatic, $1)=no\n_LT_TAGVAR(inherit_rpath, $1)=no\n_LT_TAGVAR(module_cmds, $1)=\n_LT_TAGVAR(module_expsym_cmds, $1)=\n_LT_TAGVAR(link_all_deplibs, $1)=unknown\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n_LT_TAGVAR(no_undefined_flag, $1)=\n_LT_TAGVAR(whole_archive_flag_spec, $1)=\n_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n\n# Source file extension for f77 test sources.\nac_ext=f\n\n# Object file extension for compiled f77 test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# No sense in running all these tests if we already determined that\n# the F77 compiler isn't working.  Some variables (like enable_shared)\n# are currently assumed to apply to all compilers on this platform,\n# and will be corrupted by setting them based on a non-working compiler.\nif test yes != \"$_lt_disable_F77\"; then\n  # Code to be used in simple compile tests\n  lt_simple_compile_test_code=\"\\\n      subroutine t\n      return\n      end\n\"\n\n  # Code to be used in simple link tests\n  lt_simple_link_test_code=\"\\\n      program t\n      end\n\"\n\n  # ltmain only uses $CC for tagged configurations so make sure $CC is set.\n  _LT_TAG_COMPILER\n\n  # save warnings/boilerplate of simple test code\n  _LT_COMPILER_BOILERPLATE\n  _LT_LINKER_BOILERPLATE\n\n  # Allow CC to be a program name with arguments.\n  lt_save_CC=$CC\n  lt_save_GCC=$GCC\n  lt_save_CFLAGS=$CFLAGS\n  CC=${F77-\"f77\"}\n  CFLAGS=$FFLAGS\n  compiler=$CC\n  _LT_TAGVAR(compiler, $1)=$CC\n  _LT_CC_BASENAME([$compiler])\n  GCC=$G77\n  if test -n \"$compiler\"; then\n    AC_MSG_CHECKING([if libtool supports shared libraries])\n    AC_MSG_RESULT([$can_build_shared])\n\n    AC_MSG_CHECKING([whether to build shared libraries])\n    test no = \"$can_build_shared\" && enable_shared=no\n\n    # On AIX, shared libraries and static libraries use the same namespace, and\n    # are all built from PIC.\n    case $host_os in\n      aix3*)\n        test yes = \"$enable_shared\" && enable_static=no\n        if test -n \"$RANLIB\"; then\n          archive_cmds=\"$archive_cmds~\\$RANLIB \\$lib\"\n          postinstall_cmds='$RANLIB $lib'\n        fi\n        ;;\n      aix[[4-9]]*)\n\tif test ia64 != \"$host_cpu\"; then\n\t  case $enable_shared,$with_aix_soname,$aix_use_runtimelinking in\n\t  yes,aix,yes) ;;\t\t# shared object as lib.so file only\n\t  yes,svr4,*) ;;\t\t# shared object as lib.so archive member only\n\t  yes,*) enable_static=no ;;\t# shared object in lib.a archive as well\n\t  esac\n\tfi\n        ;;\n    esac\n    AC_MSG_RESULT([$enable_shared])\n\n    AC_MSG_CHECKING([whether to build static libraries])\n    # Make sure either enable_shared or enable_static is yes.\n    test yes = \"$enable_shared\" || enable_static=yes\n    AC_MSG_RESULT([$enable_static])\n\n    _LT_TAGVAR(GCC, $1)=$G77\n    _LT_TAGVAR(LD, $1)=$LD\n\n    ## CAVEAT EMPTOR:\n    ## There is no encapsulation within the following macros, do not change\n    ## the running order or otherwise move them around unless you know exactly\n    ## what you are doing...\n    _LT_COMPILER_PIC($1)\n    _LT_COMPILER_C_O($1)\n    _LT_COMPILER_FILE_LOCKS($1)\n    _LT_LINKER_SHLIBS($1)\n    _LT_SYS_DYNAMIC_LINKER($1)\n    _LT_LINKER_HARDCODE_LIBPATH($1)\n\n    _LT_CONFIG($1)\n  fi # test -n \"$compiler\"\n\n  GCC=$lt_save_GCC\n  CC=$lt_save_CC\n  CFLAGS=$lt_save_CFLAGS\nfi # test yes != \"$_lt_disable_F77\"\n\nAC_LANG_POP\n])# _LT_LANG_F77_CONFIG\n\n\n# _LT_LANG_FC_CONFIG([TAG])\n# -------------------------\n# Ensure that the configuration variables for a Fortran compiler are\n# suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_FC_CONFIG],\n[AC_LANG_PUSH(Fortran)\n\nif test -z \"$FC\" || test no = \"$FC\"; then\n  _lt_disable_FC=yes\nfi\n\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n_LT_TAGVAR(allow_undefined_flag, $1)=\n_LT_TAGVAR(always_export_symbols, $1)=no\n_LT_TAGVAR(archive_expsym_cmds, $1)=\n_LT_TAGVAR(export_dynamic_flag_spec, $1)=\n_LT_TAGVAR(hardcode_direct, $1)=no\n_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n_LT_TAGVAR(hardcode_libdir_separator, $1)=\n_LT_TAGVAR(hardcode_minus_L, $1)=no\n_LT_TAGVAR(hardcode_automatic, $1)=no\n_LT_TAGVAR(inherit_rpath, $1)=no\n_LT_TAGVAR(module_cmds, $1)=\n_LT_TAGVAR(module_expsym_cmds, $1)=\n_LT_TAGVAR(link_all_deplibs, $1)=unknown\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n_LT_TAGVAR(no_undefined_flag, $1)=\n_LT_TAGVAR(whole_archive_flag_spec, $1)=\n_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n\n# Source file extension for fc test sources.\nac_ext=${ac_fc_srcext-f}\n\n# Object file extension for compiled fc test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# No sense in running all these tests if we already determined that\n# the FC compiler isn't working.  Some variables (like enable_shared)\n# are currently assumed to apply to all compilers on this platform,\n# and will be corrupted by setting them based on a non-working compiler.\nif test yes != \"$_lt_disable_FC\"; then\n  # Code to be used in simple compile tests\n  lt_simple_compile_test_code=\"\\\n      subroutine t\n      return\n      end\n\"\n\n  # Code to be used in simple link tests\n  lt_simple_link_test_code=\"\\\n      program t\n      end\n\"\n\n  # ltmain only uses $CC for tagged configurations so make sure $CC is set.\n  _LT_TAG_COMPILER\n\n  # save warnings/boilerplate of simple test code\n  _LT_COMPILER_BOILERPLATE\n  _LT_LINKER_BOILERPLATE\n\n  # Allow CC to be a program name with arguments.\n  lt_save_CC=$CC\n  lt_save_GCC=$GCC\n  lt_save_CFLAGS=$CFLAGS\n  CC=${FC-\"f95\"}\n  CFLAGS=$FCFLAGS\n  compiler=$CC\n  GCC=$ac_cv_fc_compiler_gnu\n\n  _LT_TAGVAR(compiler, $1)=$CC\n  _LT_CC_BASENAME([$compiler])\n\n  if test -n \"$compiler\"; then\n    AC_MSG_CHECKING([if libtool supports shared libraries])\n    AC_MSG_RESULT([$can_build_shared])\n\n    AC_MSG_CHECKING([whether to build shared libraries])\n    test no = \"$can_build_shared\" && enable_shared=no\n\n    # On AIX, shared libraries and static libraries use the same namespace, and\n    # are all built from PIC.\n    case $host_os in\n      aix3*)\n        test yes = \"$enable_shared\" && enable_static=no\n        if test -n \"$RANLIB\"; then\n          archive_cmds=\"$archive_cmds~\\$RANLIB \\$lib\"\n          postinstall_cmds='$RANLIB $lib'\n        fi\n        ;;\n      aix[[4-9]]*)\n\tif test ia64 != \"$host_cpu\"; then\n\t  case $enable_shared,$with_aix_soname,$aix_use_runtimelinking in\n\t  yes,aix,yes) ;;\t\t# shared object as lib.so file only\n\t  yes,svr4,*) ;;\t\t# shared object as lib.so archive member only\n\t  yes,*) enable_static=no ;;\t# shared object in lib.a archive as well\n\t  esac\n\tfi\n        ;;\n    esac\n    AC_MSG_RESULT([$enable_shared])\n\n    AC_MSG_CHECKING([whether to build static libraries])\n    # Make sure either enable_shared or enable_static is yes.\n    test yes = \"$enable_shared\" || enable_static=yes\n    AC_MSG_RESULT([$enable_static])\n\n    _LT_TAGVAR(GCC, $1)=$ac_cv_fc_compiler_gnu\n    _LT_TAGVAR(LD, $1)=$LD\n\n    ## CAVEAT EMPTOR:\n    ## There is no encapsulation within the following macros, do not change\n    ## the running order or otherwise move them around unless you know exactly\n    ## what you are doing...\n    _LT_SYS_HIDDEN_LIBDEPS($1)\n    _LT_COMPILER_PIC($1)\n    _LT_COMPILER_C_O($1)\n    _LT_COMPILER_FILE_LOCKS($1)\n    _LT_LINKER_SHLIBS($1)\n    _LT_SYS_DYNAMIC_LINKER($1)\n    _LT_LINKER_HARDCODE_LIBPATH($1)\n\n    _LT_CONFIG($1)\n  fi # test -n \"$compiler\"\n\n  GCC=$lt_save_GCC\n  CC=$lt_save_CC\n  CFLAGS=$lt_save_CFLAGS\nfi # test yes != \"$_lt_disable_FC\"\n\nAC_LANG_POP\n])# _LT_LANG_FC_CONFIG\n\n\n# _LT_LANG_GCJ_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for the GNU Java Compiler compiler\n# are suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_GCJ_CONFIG],\n[AC_REQUIRE([LT_PROG_GCJ])dnl\nAC_LANG_SAVE\n\n# Source file extension for Java test sources.\nac_ext=java\n\n# Object file extension for compiled Java test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code=\"class foo {}\"\n\n# Code to be used in simple link tests\nlt_simple_link_test_code='public class conftest { public static void main(String[[]] argv) {}; }'\n\n# ltmain only uses $CC for tagged configurations so make sure $CC is set.\n_LT_TAG_COMPILER\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n# Allow CC to be a program name with arguments.\nlt_save_CC=$CC\nlt_save_CFLAGS=$CFLAGS\nlt_save_GCC=$GCC\nGCC=yes\nCC=${GCJ-\"gcj\"}\nCFLAGS=$GCJFLAGS\ncompiler=$CC\n_LT_TAGVAR(compiler, $1)=$CC\n_LT_TAGVAR(LD, $1)=$LD\n_LT_CC_BASENAME([$compiler])\n\n# GCJ did not exist at the time GCC didn't implicitly link libc in.\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n\n## CAVEAT EMPTOR:\n## There is no encapsulation within the following macros, do not change\n## the running order or otherwise move them around unless you know exactly\n## what you are doing...\nif test -n \"$compiler\"; then\n  _LT_COMPILER_NO_RTTI($1)\n  _LT_COMPILER_PIC($1)\n  _LT_COMPILER_C_O($1)\n  _LT_COMPILER_FILE_LOCKS($1)\n  _LT_LINKER_SHLIBS($1)\n  _LT_LINKER_HARDCODE_LIBPATH($1)\n\n  _LT_CONFIG($1)\nfi\n\nAC_LANG_RESTORE\n\nGCC=$lt_save_GCC\nCC=$lt_save_CC\nCFLAGS=$lt_save_CFLAGS\n])# _LT_LANG_GCJ_CONFIG\n\n\n# _LT_LANG_GO_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for the GNU Go compiler\n# are suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_GO_CONFIG],\n[AC_REQUIRE([LT_PROG_GO])dnl\nAC_LANG_SAVE\n\n# Source file extension for Go test sources.\nac_ext=go\n\n# Object file extension for compiled Go test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code=\"package main; func main() { }\"\n\n# Code to be used in simple link tests\nlt_simple_link_test_code='package main; func main() { }'\n\n# ltmain only uses $CC for tagged configurations so make sure $CC is set.\n_LT_TAG_COMPILER\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n# Allow CC to be a program name with arguments.\nlt_save_CC=$CC\nlt_save_CFLAGS=$CFLAGS\nlt_save_GCC=$GCC\nGCC=yes\nCC=${GOC-\"gccgo\"}\nCFLAGS=$GOFLAGS\ncompiler=$CC\n_LT_TAGVAR(compiler, $1)=$CC\n_LT_TAGVAR(LD, $1)=$LD\n_LT_CC_BASENAME([$compiler])\n\n# Go did not exist at the time GCC didn't implicitly link libc in.\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n\n## CAVEAT EMPTOR:\n## There is no encapsulation within the following macros, do not change\n## the running order or otherwise move them around unless you know exactly\n## what you are doing...\nif test -n \"$compiler\"; then\n  _LT_COMPILER_NO_RTTI($1)\n  _LT_COMPILER_PIC($1)\n  _LT_COMPILER_C_O($1)\n  _LT_COMPILER_FILE_LOCKS($1)\n  _LT_LINKER_SHLIBS($1)\n  _LT_LINKER_HARDCODE_LIBPATH($1)\n\n  _LT_CONFIG($1)\nfi\n\nAC_LANG_RESTORE\n\nGCC=$lt_save_GCC\nCC=$lt_save_CC\nCFLAGS=$lt_save_CFLAGS\n])# _LT_LANG_GO_CONFIG\n\n\n# _LT_LANG_RC_CONFIG([TAG])\n# -------------------------\n# Ensure that the configuration variables for the Windows resource compiler\n# are suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_RC_CONFIG],\n[AC_REQUIRE([LT_PROG_RC])dnl\nAC_LANG_SAVE\n\n# Source file extension for RC test sources.\nac_ext=rc\n\n# Object file extension for compiled RC test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code='sample MENU { MENUITEM \"&Soup\", 100, CHECKED }'\n\n# Code to be used in simple link tests\nlt_simple_link_test_code=$lt_simple_compile_test_code\n\n# ltmain only uses $CC for tagged configurations so make sure $CC is set.\n_LT_TAG_COMPILER\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n# Allow CC to be a program name with arguments.\nlt_save_CC=$CC\nlt_save_CFLAGS=$CFLAGS\nlt_save_GCC=$GCC\nGCC=\nCC=${RC-\"windres\"}\nCFLAGS=\ncompiler=$CC\n_LT_TAGVAR(compiler, $1)=$CC\n_LT_CC_BASENAME([$compiler])\n_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)=yes\n\nif test -n \"$compiler\"; then\n  :\n  _LT_CONFIG($1)\nfi\n\nGCC=$lt_save_GCC\nAC_LANG_RESTORE\nCC=$lt_save_CC\nCFLAGS=$lt_save_CFLAGS\n])# _LT_LANG_RC_CONFIG\n\n\n# LT_PROG_GCJ\n# -----------\nAC_DEFUN([LT_PROG_GCJ],\n[m4_ifdef([AC_PROG_GCJ], [AC_PROG_GCJ],\n  [m4_ifdef([A][M_PROG_GCJ], [A][M_PROG_GCJ],\n    [AC_CHECK_TOOL(GCJ, gcj,)\n      test set = \"${GCJFLAGS+set}\" || GCJFLAGS=\"-g -O2\"\n      AC_SUBST(GCJFLAGS)])])[]dnl\n])\n\n# Old name:\nAU_ALIAS([LT_AC_PROG_GCJ], [LT_PROG_GCJ])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([LT_AC_PROG_GCJ], [])\n\n\n# LT_PROG_GO\n# ----------\nAC_DEFUN([LT_PROG_GO],\n[AC_CHECK_TOOL(GOC, gccgo,)\n])\n\n\n# LT_PROG_RC\n# ----------\nAC_DEFUN([LT_PROG_RC],\n[AC_CHECK_TOOL(RC, windres,)\n])\n\n# Old name:\nAU_ALIAS([LT_AC_PROG_RC], [LT_PROG_RC])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([LT_AC_PROG_RC], [])\n\n\n# _LT_DECL_EGREP\n# --------------\n# If we don't have a new enough Autoconf to choose the best grep\n# available, choose the one first in the user's PATH.\nm4_defun([_LT_DECL_EGREP],\n[AC_REQUIRE([AC_PROG_EGREP])dnl\nAC_REQUIRE([AC_PROG_FGREP])dnl\ntest -z \"$GREP\" && GREP=grep\n_LT_DECL([], [GREP], [1], [A grep program that handles long lines])\n_LT_DECL([], [EGREP], [1], [An ERE matcher])\n_LT_DECL([], [FGREP], [1], [A literal string matcher])\ndnl Non-bleeding-edge autoconf doesn't subst GREP, so do it here too\nAC_SUBST([GREP])\n])\n\n\n# _LT_DECL_OBJDUMP\n# --------------\n# If we don't have a new enough Autoconf to choose the best objdump\n# available, choose the one first in the user's PATH.\nm4_defun([_LT_DECL_OBJDUMP],\n[AC_CHECK_TOOL(OBJDUMP, objdump, false)\ntest -z \"$OBJDUMP\" && OBJDUMP=objdump\n_LT_DECL([], [OBJDUMP], [1], [An object symbol dumper])\nAC_SUBST([OBJDUMP])\n])\n\n# _LT_DECL_DLLTOOL\n# ----------------\n# Ensure DLLTOOL variable is set.\nm4_defun([_LT_DECL_DLLTOOL],\n[AC_CHECK_TOOL(DLLTOOL, dlltool, false)\ntest -z \"$DLLTOOL\" && DLLTOOL=dlltool\n_LT_DECL([], [DLLTOOL], [1], [DLL creation program])\nAC_SUBST([DLLTOOL])\n])\n\n# _LT_DECL_SED\n# ------------\n# Check for a fully-functional sed program, that truncates\n# as few characters as possible.  Prefer GNU sed if found.\nm4_defun([_LT_DECL_SED],\n[AC_PROG_SED\ntest -z \"$SED\" && SED=sed\nXsed=\"$SED -e 1s/^X//\"\n_LT_DECL([], [SED], [1], [A sed program that does not truncate output])\n_LT_DECL([], [Xsed], [\"\\$SED -e 1s/^X//\"],\n    [Sed that helps us avoid accidentally triggering echo(1) options like -n])\n])# _LT_DECL_SED\n\nm4_ifndef([AC_PROG_SED], [\n############################################################\n# NOTE: This macro has been submitted for inclusion into   #\n#  GNU Autoconf as AC_PROG_SED.  When it is available in   #\n#  a released version of Autoconf we should remove this    #\n#  macro and use it instead.                               #\n############################################################\n\nm4_defun([AC_PROG_SED],\n[AC_MSG_CHECKING([for a sed that does not truncate output])\nAC_CACHE_VAL(lt_cv_path_SED,\n[# Loop through the user's path and test for sed and gsed.\n# Then use that list of sed's as ones to test for truncation.\nas_save_IFS=$IFS; IFS=$PATH_SEPARATOR\nfor as_dir in $PATH\ndo\n  IFS=$as_save_IFS\n  test -z \"$as_dir\" && as_dir=.\n  for lt_ac_prog in sed gsed; do\n    for ac_exec_ext in '' $ac_executable_extensions; do\n      if $as_executable_p \"$as_dir/$lt_ac_prog$ac_exec_ext\"; then\n        lt_ac_sed_list=\"$lt_ac_sed_list $as_dir/$lt_ac_prog$ac_exec_ext\"\n      fi\n    done\n  done\ndone\nIFS=$as_save_IFS\nlt_ac_max=0\nlt_ac_count=0\n# Add /usr/xpg4/bin/sed as it is typically found on Solaris\n# along with /bin/sed that truncates output.\nfor lt_ac_sed in $lt_ac_sed_list /usr/xpg4/bin/sed; do\n  test ! -f \"$lt_ac_sed\" && continue\n  cat /dev/null > conftest.in\n  lt_ac_count=0\n  echo $ECHO_N \"0123456789$ECHO_C\" >conftest.in\n  # Check for GNU sed and select it if it is found.\n  if \"$lt_ac_sed\" --version 2>&1 < /dev/null | grep 'GNU' > /dev/null; then\n    lt_cv_path_SED=$lt_ac_sed\n    break\n  fi\n  while true; do\n    cat conftest.in conftest.in >conftest.tmp\n    mv conftest.tmp conftest.in\n    cp conftest.in conftest.nl\n    echo >>conftest.nl\n    $lt_ac_sed -e 's/a$//' < conftest.nl >conftest.out || break\n    cmp -s conftest.out conftest.nl || break\n    # 10000 chars as input seems more than enough\n    test 10 -lt \"$lt_ac_count\" && break\n    lt_ac_count=`expr $lt_ac_count + 1`\n    if test \"$lt_ac_count\" -gt \"$lt_ac_max\"; then\n      lt_ac_max=$lt_ac_count\n      lt_cv_path_SED=$lt_ac_sed\n    fi\n  done\ndone\n])\nSED=$lt_cv_path_SED\nAC_SUBST([SED])\nAC_MSG_RESULT([$SED])\n])#AC_PROG_SED\n])#m4_ifndef\n\n# Old name:\nAU_ALIAS([LT_AC_PROG_SED], [AC_PROG_SED])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([LT_AC_PROG_SED], [])\n\n\n# _LT_CHECK_SHELL_FEATURES\n# ------------------------\n# Find out whether the shell is Bourne or XSI compatible,\n# or has some other useful features.\nm4_defun([_LT_CHECK_SHELL_FEATURES],\n[if ( (MAIL=60; unset MAIL) || exit) >/dev/null 2>&1; then\n  lt_unset=unset\nelse\n  lt_unset=false\nfi\n_LT_DECL([], [lt_unset], [0], [whether the shell understands \"unset\"])dnl\n\n# test EBCDIC or ASCII\ncase `echo X|tr X '\\101'` in\n A) # ASCII based system\n    # \\n is not interpreted correctly by Solaris 8 /usr/ucb/tr\n  lt_SP2NL='tr \\040 \\012'\n  lt_NL2SP='tr \\015\\012 \\040\\040'\n  ;;\n *) # EBCDIC based system\n  lt_SP2NL='tr \\100 \\n'\n  lt_NL2SP='tr \\r\\n \\100\\100'\n  ;;\nesac\n_LT_DECL([SP2NL], [lt_SP2NL], [1], [turn spaces into newlines])dnl\n_LT_DECL([NL2SP], [lt_NL2SP], [1], [turn newlines into spaces])dnl\n])# _LT_CHECK_SHELL_FEATURES\n\n\n# _LT_PATH_CONVERSION_FUNCTIONS\n# -----------------------------\n# Determine what file name conversion functions should be used by\n# func_to_host_file (and, implicitly, by func_to_host_path).  These are needed\n# for certain cross-compile configurations and native mingw.\nm4_defun([_LT_PATH_CONVERSION_FUNCTIONS],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_CANONICAL_BUILD])dnl\nAC_MSG_CHECKING([how to convert $build file names to $host format])\nAC_CACHE_VAL(lt_cv_to_host_file_cmd,\n[case $host in\n  *-*-mingw* )\n    case $build in\n      *-*-mingw* ) # actually msys\n        lt_cv_to_host_file_cmd=func_convert_file_msys_to_w32\n        ;;\n      *-*-cygwin* )\n        lt_cv_to_host_file_cmd=func_convert_file_cygwin_to_w32\n        ;;\n      * ) # otherwise, assume *nix\n        lt_cv_to_host_file_cmd=func_convert_file_nix_to_w32\n        ;;\n    esac\n    ;;\n  *-*-cygwin* )\n    case $build in\n      *-*-mingw* ) # actually msys\n        lt_cv_to_host_file_cmd=func_convert_file_msys_to_cygwin\n        ;;\n      *-*-cygwin* )\n        lt_cv_to_host_file_cmd=func_convert_file_noop\n        ;;\n      * ) # otherwise, assume *nix\n        lt_cv_to_host_file_cmd=func_convert_file_nix_to_cygwin\n        ;;\n    esac\n    ;;\n  * ) # unhandled hosts (and \"normal\" native builds)\n    lt_cv_to_host_file_cmd=func_convert_file_noop\n    ;;\nesac\n])\nto_host_file_cmd=$lt_cv_to_host_file_cmd\nAC_MSG_RESULT([$lt_cv_to_host_file_cmd])\n_LT_DECL([to_host_file_cmd], [lt_cv_to_host_file_cmd],\n         [0], [convert $build file names to $host format])dnl\n\nAC_MSG_CHECKING([how to convert $build file names to toolchain format])\nAC_CACHE_VAL(lt_cv_to_tool_file_cmd,\n[#assume ordinary cross tools, or native build.\nlt_cv_to_tool_file_cmd=func_convert_file_noop\ncase $host in\n  *-*-mingw* )\n    case $build in\n      *-*-mingw* ) # actually msys\n        lt_cv_to_tool_file_cmd=func_convert_file_msys_to_w32\n        ;;\n    esac\n    ;;\nesac\n])\nto_tool_file_cmd=$lt_cv_to_tool_file_cmd\nAC_MSG_RESULT([$lt_cv_to_tool_file_cmd])\n_LT_DECL([to_tool_file_cmd], [lt_cv_to_tool_file_cmd],\n         [0], [convert $build files to toolchain format])dnl\n])# _LT_PATH_CONVERSION_FUNCTIONS\n",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/m4/ltoptions.m4": "# Helper functions for option handling.                    -*- Autoconf -*-\n#\n#   Copyright (C) 2004-2005, 2007-2009, 2011-2015 Free Software\n#   Foundation, Inc.\n#   Written by Gary V. Vaughan, 2004\n#\n# This file is free software; the Free Software Foundation gives\n# unlimited permission to copy and/or distribute it, with or without\n# modifications, as long as this notice is preserved.\n\n# serial 8 ltoptions.m4\n\n# This is to help aclocal find these macros, as it can't see m4_define.\nAC_DEFUN([LTOPTIONS_VERSION], [m4_if([1])])\n\n\n# _LT_MANGLE_OPTION(MACRO-NAME, OPTION-NAME)\n# ------------------------------------------\nm4_define([_LT_MANGLE_OPTION],\n[[_LT_OPTION_]m4_bpatsubst($1__$2, [[^a-zA-Z0-9_]], [_])])\n\n\n# _LT_SET_OPTION(MACRO-NAME, OPTION-NAME)\n# ---------------------------------------\n# Set option OPTION-NAME for macro MACRO-NAME, and if there is a\n# matching handler defined, dispatch to it.  Other OPTION-NAMEs are\n# saved as a flag.\nm4_define([_LT_SET_OPTION],\n[m4_define(_LT_MANGLE_OPTION([$1], [$2]))dnl\nm4_ifdef(_LT_MANGLE_DEFUN([$1], [$2]),\n        _LT_MANGLE_DEFUN([$1], [$2]),\n    [m4_warning([Unknown $1 option '$2'])])[]dnl\n])\n\n\n# _LT_IF_OPTION(MACRO-NAME, OPTION-NAME, IF-SET, [IF-NOT-SET])\n# ------------------------------------------------------------\n# Execute IF-SET if OPTION is set, IF-NOT-SET otherwise.\nm4_define([_LT_IF_OPTION],\n[m4_ifdef(_LT_MANGLE_OPTION([$1], [$2]), [$3], [$4])])\n\n\n# _LT_UNLESS_OPTIONS(MACRO-NAME, OPTION-LIST, IF-NOT-SET)\n# -------------------------------------------------------\n# Execute IF-NOT-SET unless all options in OPTION-LIST for MACRO-NAME\n# are set.\nm4_define([_LT_UNLESS_OPTIONS],\n[m4_foreach([_LT_Option], m4_split(m4_normalize([$2])),\n\t    [m4_ifdef(_LT_MANGLE_OPTION([$1], _LT_Option),\n\t\t      [m4_define([$0_found])])])[]dnl\nm4_ifdef([$0_found], [m4_undefine([$0_found])], [$3\n])[]dnl\n])\n\n\n# _LT_SET_OPTIONS(MACRO-NAME, OPTION-LIST)\n# ----------------------------------------\n# OPTION-LIST is a space-separated list of Libtool options associated\n# with MACRO-NAME.  If any OPTION has a matching handler declared with\n# LT_OPTION_DEFINE, dispatch to that macro; otherwise complain about\n# the unknown option and exit.\nm4_defun([_LT_SET_OPTIONS],\n[# Set options\nm4_foreach([_LT_Option], m4_split(m4_normalize([$2])),\n    [_LT_SET_OPTION([$1], _LT_Option)])\n\nm4_if([$1],[LT_INIT],[\n  dnl\n  dnl Simply set some default values (i.e off) if boolean options were not\n  dnl specified:\n  _LT_UNLESS_OPTIONS([LT_INIT], [dlopen], [enable_dlopen=no\n  ])\n  _LT_UNLESS_OPTIONS([LT_INIT], [win32-dll], [enable_win32_dll=no\n  ])\n  dnl\n  dnl If no reference was made to various pairs of opposing options, then\n  dnl we run the default mode handler for the pair.  For example, if neither\n  dnl 'shared' nor 'disable-shared' was passed, we enable building of shared\n  dnl archives by default:\n  _LT_UNLESS_OPTIONS([LT_INIT], [shared disable-shared], [_LT_ENABLE_SHARED])\n  _LT_UNLESS_OPTIONS([LT_INIT], [static disable-static], [_LT_ENABLE_STATIC])\n  _LT_UNLESS_OPTIONS([LT_INIT], [pic-only no-pic], [_LT_WITH_PIC])\n  _LT_UNLESS_OPTIONS([LT_INIT], [fast-install disable-fast-install],\n\t\t   [_LT_ENABLE_FAST_INSTALL])\n  _LT_UNLESS_OPTIONS([LT_INIT], [aix-soname=aix aix-soname=both aix-soname=svr4],\n\t\t   [_LT_WITH_AIX_SONAME([aix])])\n  ])\n])# _LT_SET_OPTIONS\n\n\n## --------------------------------- ##\n## Macros to handle LT_INIT options. ##\n## --------------------------------- ##\n\n# _LT_MANGLE_DEFUN(MACRO-NAME, OPTION-NAME)\n# -----------------------------------------\nm4_define([_LT_MANGLE_DEFUN],\n[[_LT_OPTION_DEFUN_]m4_bpatsubst(m4_toupper([$1__$2]), [[^A-Z0-9_]], [_])])\n\n\n# LT_OPTION_DEFINE(MACRO-NAME, OPTION-NAME, CODE)\n# -----------------------------------------------\nm4_define([LT_OPTION_DEFINE],\n[m4_define(_LT_MANGLE_DEFUN([$1], [$2]), [$3])[]dnl\n])# LT_OPTION_DEFINE\n\n\n# dlopen\n# ------\nLT_OPTION_DEFINE([LT_INIT], [dlopen], [enable_dlopen=yes\n])\n\nAU_DEFUN([AC_LIBTOOL_DLOPEN],\n[_LT_SET_OPTION([LT_INIT], [dlopen])\nAC_DIAGNOSE([obsolete],\n[$0: Remove this warning and the call to _LT_SET_OPTION when you\nput the 'dlopen' option into LT_INIT's first parameter.])\n])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_DLOPEN], [])\n\n\n# win32-dll\n# ---------\n# Declare package support for building win32 dll's.\nLT_OPTION_DEFINE([LT_INIT], [win32-dll],\n[enable_win32_dll=yes\n\ncase $host in\n*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-cegcc*)\n  AC_CHECK_TOOL(AS, as, false)\n  AC_CHECK_TOOL(DLLTOOL, dlltool, false)\n  AC_CHECK_TOOL(OBJDUMP, objdump, false)\n  ;;\nesac\n\ntest -z \"$AS\" && AS=as\n_LT_DECL([], [AS],      [1], [Assembler program])dnl\n\ntest -z \"$DLLTOOL\" && DLLTOOL=dlltool\n_LT_DECL([], [DLLTOOL], [1], [DLL creation program])dnl\n\ntest -z \"$OBJDUMP\" && OBJDUMP=objdump\n_LT_DECL([], [OBJDUMP], [1], [Object dumper program])dnl\n])# win32-dll\n\nAU_DEFUN([AC_LIBTOOL_WIN32_DLL],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\n_LT_SET_OPTION([LT_INIT], [win32-dll])\nAC_DIAGNOSE([obsolete],\n[$0: Remove this warning and the call to _LT_SET_OPTION when you\nput the 'win32-dll' option into LT_INIT's first parameter.])\n])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_WIN32_DLL], [])\n\n\n# _LT_ENABLE_SHARED([DEFAULT])\n# ----------------------------\n# implement the --enable-shared flag, and supports the 'shared' and\n# 'disable-shared' LT_INIT options.\n# DEFAULT is either 'yes' or 'no'.  If omitted, it defaults to 'yes'.\nm4_define([_LT_ENABLE_SHARED],\n[m4_define([_LT_ENABLE_SHARED_DEFAULT], [m4_if($1, no, no, yes)])dnl\nAC_ARG_ENABLE([shared],\n    [AS_HELP_STRING([--enable-shared@<:@=PKGS@:>@],\n\t[build shared libraries @<:@default=]_LT_ENABLE_SHARED_DEFAULT[@:>@])],\n    [p=${PACKAGE-default}\n    case $enableval in\n    yes) enable_shared=yes ;;\n    no) enable_shared=no ;;\n    *)\n      enable_shared=no\n      # Look at the argument we got.  We use all the common list separators.\n      lt_save_ifs=$IFS; IFS=$IFS$PATH_SEPARATOR,\n      for pkg in $enableval; do\n\tIFS=$lt_save_ifs\n\tif test \"X$pkg\" = \"X$p\"; then\n\t  enable_shared=yes\n\tfi\n      done\n      IFS=$lt_save_ifs\n      ;;\n    esac],\n    [enable_shared=]_LT_ENABLE_SHARED_DEFAULT)\n\n    _LT_DECL([build_libtool_libs], [enable_shared], [0],\n\t[Whether or not to build shared libraries])\n])# _LT_ENABLE_SHARED\n\nLT_OPTION_DEFINE([LT_INIT], [shared], [_LT_ENABLE_SHARED([yes])])\nLT_OPTION_DEFINE([LT_INIT], [disable-shared], [_LT_ENABLE_SHARED([no])])\n\n# Old names:\nAC_DEFUN([AC_ENABLE_SHARED],\n[_LT_SET_OPTION([LT_INIT], m4_if([$1], [no], [disable-])[shared])\n])\n\nAC_DEFUN([AC_DISABLE_SHARED],\n[_LT_SET_OPTION([LT_INIT], [disable-shared])\n])\n\nAU_DEFUN([AM_ENABLE_SHARED], [AC_ENABLE_SHARED($@)])\nAU_DEFUN([AM_DISABLE_SHARED], [AC_DISABLE_SHARED($@)])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AM_ENABLE_SHARED], [])\ndnl AC_DEFUN([AM_DISABLE_SHARED], [])\n\n\n\n# _LT_ENABLE_STATIC([DEFAULT])\n# ----------------------------\n# implement the --enable-static flag, and support the 'static' and\n# 'disable-static' LT_INIT options.\n# DEFAULT is either 'yes' or 'no'.  If omitted, it defaults to 'yes'.\nm4_define([_LT_ENABLE_STATIC],\n[m4_define([_LT_ENABLE_STATIC_DEFAULT], [m4_if($1, no, no, yes)])dnl\nAC_ARG_ENABLE([static],\n    [AS_HELP_STRING([--enable-static@<:@=PKGS@:>@],\n\t[build static libraries @<:@default=]_LT_ENABLE_STATIC_DEFAULT[@:>@])],\n    [p=${PACKAGE-default}\n    case $enableval in\n    yes) enable_static=yes ;;\n    no) enable_static=no ;;\n    *)\n     enable_static=no\n      # Look at the argument we got.  We use all the common list separators.\n      lt_save_ifs=$IFS; IFS=$IFS$PATH_SEPARATOR,\n      for pkg in $enableval; do\n\tIFS=$lt_save_ifs\n\tif test \"X$pkg\" = \"X$p\"; then\n\t  enable_static=yes\n\tfi\n      done\n      IFS=$lt_save_ifs\n      ;;\n    esac],\n    [enable_static=]_LT_ENABLE_STATIC_DEFAULT)\n\n    _LT_DECL([build_old_libs], [enable_static], [0],\n\t[Whether or not to build static libraries])\n])# _LT_ENABLE_STATIC\n\nLT_OPTION_DEFINE([LT_INIT], [static], [_LT_ENABLE_STATIC([yes])])\nLT_OPTION_DEFINE([LT_INIT], [disable-static], [_LT_ENABLE_STATIC([no])])\n\n# Old names:\nAC_DEFUN([AC_ENABLE_STATIC],\n[_LT_SET_OPTION([LT_INIT], m4_if([$1], [no], [disable-])[static])\n])\n\nAC_DEFUN([AC_DISABLE_STATIC],\n[_LT_SET_OPTION([LT_INIT], [disable-static])\n])\n\nAU_DEFUN([AM_ENABLE_STATIC], [AC_ENABLE_STATIC($@)])\nAU_DEFUN([AM_DISABLE_STATIC], [AC_DISABLE_STATIC($@)])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AM_ENABLE_STATIC], [])\ndnl AC_DEFUN([AM_DISABLE_STATIC], [])\n\n\n\n# _LT_ENABLE_FAST_INSTALL([DEFAULT])\n# ----------------------------------\n# implement the --enable-fast-install flag, and support the 'fast-install'\n# and 'disable-fast-install' LT_INIT options.\n# DEFAULT is either 'yes' or 'no'.  If omitted, it defaults to 'yes'.\nm4_define([_LT_ENABLE_FAST_INSTALL],\n[m4_define([_LT_ENABLE_FAST_INSTALL_DEFAULT], [m4_if($1, no, no, yes)])dnl\nAC_ARG_ENABLE([fast-install],\n    [AS_HELP_STRING([--enable-fast-install@<:@=PKGS@:>@],\n    [optimize for fast installation @<:@default=]_LT_ENABLE_FAST_INSTALL_DEFAULT[@:>@])],\n    [p=${PACKAGE-default}\n    case $enableval in\n    yes) enable_fast_install=yes ;;\n    no) enable_fast_install=no ;;\n    *)\n      enable_fast_install=no\n      # Look at the argument we got.  We use all the common list separators.\n      lt_save_ifs=$IFS; IFS=$IFS$PATH_SEPARATOR,\n      for pkg in $enableval; do\n\tIFS=$lt_save_ifs\n\tif test \"X$pkg\" = \"X$p\"; then\n\t  enable_fast_install=yes\n\tfi\n      done\n      IFS=$lt_save_ifs\n      ;;\n    esac],\n    [enable_fast_install=]_LT_ENABLE_FAST_INSTALL_DEFAULT)\n\n_LT_DECL([fast_install], [enable_fast_install], [0],\n\t [Whether or not to optimize for fast installation])dnl\n])# _LT_ENABLE_FAST_INSTALL\n\nLT_OPTION_DEFINE([LT_INIT], [fast-install], [_LT_ENABLE_FAST_INSTALL([yes])])\nLT_OPTION_DEFINE([LT_INIT], [disable-fast-install], [_LT_ENABLE_FAST_INSTALL([no])])\n\n# Old names:\nAU_DEFUN([AC_ENABLE_FAST_INSTALL],\n[_LT_SET_OPTION([LT_INIT], m4_if([$1], [no], [disable-])[fast-install])\nAC_DIAGNOSE([obsolete],\n[$0: Remove this warning and the call to _LT_SET_OPTION when you put\nthe 'fast-install' option into LT_INIT's first parameter.])\n])\n\nAU_DEFUN([AC_DISABLE_FAST_INSTALL],\n[_LT_SET_OPTION([LT_INIT], [disable-fast-install])\nAC_DIAGNOSE([obsolete],\n[$0: Remove this warning and the call to _LT_SET_OPTION when you put\nthe 'disable-fast-install' option into LT_INIT's first parameter.])\n])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_ENABLE_FAST_INSTALL], [])\ndnl AC_DEFUN([AM_DISABLE_FAST_INSTALL], [])\n\n\n# _LT_WITH_AIX_SONAME([DEFAULT])\n# ----------------------------------\n# implement the --with-aix-soname flag, and support the `aix-soname=aix'\n# and `aix-soname=both' and `aix-soname=svr4' LT_INIT options. DEFAULT\n# is either `aix', `both' or `svr4'.  If omitted, it defaults to `aix'.\nm4_define([_LT_WITH_AIX_SONAME],\n[m4_define([_LT_WITH_AIX_SONAME_DEFAULT], [m4_if($1, svr4, svr4, m4_if($1, both, both, aix))])dnl\nshared_archive_member_spec=\ncase $host,$enable_shared in\npower*-*-aix[[5-9]]*,yes)\n  AC_MSG_CHECKING([which variant of shared library versioning to provide])\n  AC_ARG_WITH([aix-soname],\n    [AS_HELP_STRING([--with-aix-soname=aix|svr4|both],\n      [shared library versioning (aka \"SONAME\") variant to provide on AIX, @<:@default=]_LT_WITH_AIX_SONAME_DEFAULT[@:>@.])],\n    [case $withval in\n    aix|svr4|both)\n      ;;\n    *)\n      AC_MSG_ERROR([Unknown argument to --with-aix-soname])\n      ;;\n    esac\n    lt_cv_with_aix_soname=$with_aix_soname],\n    [AC_CACHE_VAL([lt_cv_with_aix_soname],\n      [lt_cv_with_aix_soname=]_LT_WITH_AIX_SONAME_DEFAULT)\n    with_aix_soname=$lt_cv_with_aix_soname])\n  AC_MSG_RESULT([$with_aix_soname])\n  if test aix != \"$with_aix_soname\"; then\n    # For the AIX way of multilib, we name the shared archive member\n    # based on the bitwidth used, traditionally 'shr.o' or 'shr_64.o',\n    # and 'shr.imp' or 'shr_64.imp', respectively, for the Import File.\n    # Even when GNU compilers ignore OBJECT_MODE but need '-maix64' flag,\n    # the AIX toolchain works better with OBJECT_MODE set (default 32).\n    if test 64 = \"${OBJECT_MODE-32}\"; then\n      shared_archive_member_spec=shr_64\n    else\n      shared_archive_member_spec=shr\n    fi\n  fi\n  ;;\n*)\n  with_aix_soname=aix\n  ;;\nesac\n\n_LT_DECL([], [shared_archive_member_spec], [0],\n    [Shared archive member basename, for filename based shared library versioning on AIX])dnl\n])# _LT_WITH_AIX_SONAME\n\nLT_OPTION_DEFINE([LT_INIT], [aix-soname=aix], [_LT_WITH_AIX_SONAME([aix])])\nLT_OPTION_DEFINE([LT_INIT], [aix-soname=both], [_LT_WITH_AIX_SONAME([both])])\nLT_OPTION_DEFINE([LT_INIT], [aix-soname=svr4], [_LT_WITH_AIX_SONAME([svr4])])\n\n\n# _LT_WITH_PIC([MODE])\n# --------------------\n# implement the --with-pic flag, and support the 'pic-only' and 'no-pic'\n# LT_INIT options.\n# MODE is either 'yes' or 'no'.  If omitted, it defaults to 'both'.\nm4_define([_LT_WITH_PIC],\n[AC_ARG_WITH([pic],\n    [AS_HELP_STRING([--with-pic@<:@=PKGS@:>@],\n\t[try to use only PIC/non-PIC objects @<:@default=use both@:>@])],\n    [lt_p=${PACKAGE-default}\n    case $withval in\n    yes|no) pic_mode=$withval ;;\n    *)\n      pic_mode=default\n      # Look at the argument we got.  We use all the common list separators.\n      lt_save_ifs=$IFS; IFS=$IFS$PATH_SEPARATOR,\n      for lt_pkg in $withval; do\n\tIFS=$lt_save_ifs\n\tif test \"X$lt_pkg\" = \"X$lt_p\"; then\n\t  pic_mode=yes\n\tfi\n      done\n      IFS=$lt_save_ifs\n      ;;\n    esac],\n    [pic_mode=m4_default([$1], [default])])\n\n_LT_DECL([], [pic_mode], [0], [What type of objects to build])dnl\n])# _LT_WITH_PIC\n\nLT_OPTION_DEFINE([LT_INIT], [pic-only], [_LT_WITH_PIC([yes])])\nLT_OPTION_DEFINE([LT_INIT], [no-pic], [_LT_WITH_PIC([no])])\n\n# Old name:\nAU_DEFUN([AC_LIBTOOL_PICMODE],\n[_LT_SET_OPTION([LT_INIT], [pic-only])\nAC_DIAGNOSE([obsolete],\n[$0: Remove this warning and the call to _LT_SET_OPTION when you\nput the 'pic-only' option into LT_INIT's first parameter.])\n])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_PICMODE], [])\n\n## ----------------- ##\n## LTDL_INIT Options ##\n## ----------------- ##\n\nm4_define([_LTDL_MODE], [])\nLT_OPTION_DEFINE([LTDL_INIT], [nonrecursive],\n\t\t [m4_define([_LTDL_MODE], [nonrecursive])])\nLT_OPTION_DEFINE([LTDL_INIT], [recursive],\n\t\t [m4_define([_LTDL_MODE], [recursive])])\nLT_OPTION_DEFINE([LTDL_INIT], [subproject],\n\t\t [m4_define([_LTDL_MODE], [subproject])])\n\nm4_define([_LTDL_TYPE], [])\nLT_OPTION_DEFINE([LTDL_INIT], [installable],\n\t\t [m4_define([_LTDL_TYPE], [installable])])\nLT_OPTION_DEFINE([LTDL_INIT], [convenience],\n\t\t [m4_define([_LTDL_TYPE], [convenience])])\n",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/contrib/dlz/example/dlz_example.c": "/*\n * Copyright (C) 2011  Internet Systems Consortium, Inc. (\"ISC\")\n *\n * Permission to use, copy, modify, and/or distribute this software for any\n * purpose with or without fee is hereby granted, provided that the above\n * copyright notice and this permission notice appear in all copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND ISC DISCLAIMS ALL WARRANTIES WITH\n * REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n * AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,\n * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\n * LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE\n * OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\n * PERFORMANCE OF THIS SOFTWARE.\n */\n\n/*\n * This provides a very simple example of an external loadable DLZ\n * driver, with update support.\n */\n\n#include <stdbool.h>\n#include <stdio.h>\n#include <inttypes.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdarg.h>\n\n#include \"../modules/include/dlz_minimal.h\"\n\n#define CHECK(x) \\\n\tdo { \\\n\t\tresult = (x); \\\n\t\tif (result != ISC_R_SUCCESS) \\\n\t\t\tgoto failure; \\\n\t} while (0)\n\n/* For this simple example, use fixed sized strings */\nstruct record {\n\tchar name[100];\n\tchar type[10];\n\tchar data[200];\n\tdns_ttl_t ttl;\n};\n\n#define MAX_RECORDS 100\n\nstruct dlz_example_data {\n\tchar *zone_name;\n\n\t/* An example driver doesn't need good memory management :-) */\n\tstruct record current[MAX_RECORDS];\n\tstruct record adds[MAX_RECORDS];\n\tstruct record deletes[MAX_RECORDS];\n\n\tbool transaction_started;\n\n\t/* Helper functions from the dlz_dlopen driver */\n\tlog_t *log;\n\tdns_sdlz_putrr_t *putrr;\n\tdns_sdlz_putnamedrr_t *putnamedrr;\n\tdns_dlz_writeablezone_t *writeable_zone;\n};\n\nstatic bool\nsingle_valued(const char *type) {\n\tconst char *single[] = { \"soa\", \"cname\", NULL };\n\tint i;\n\n\tfor (i = 0; single[i]; i++) {\n\t\tif (strcasecmp(single[i], type) == 0) {\n\t\t\treturn (true);\n\t\t}\n\t}\n\treturn (false);\n}\n\n/*\n * Add a record to a list\n */\nstatic isc_result_t\nadd_name(struct dlz_example_data *state, struct record *list,\n\t const char *name, const char *type, dns_ttl_t ttl, const char *data)\n{\n\tint i;\n\tbool single = single_valued(type);\n\tint first_empty = -1;\n\n\tfor (i = 0; i < MAX_RECORDS; i++) {\n\t\tif (first_empty == -1 && strlen(list[i].name) == 0U) {\n\t\t\tfirst_empty = i;\n\t\t}\n\t\tif (strcasecmp(list[i].name, name) != 0)\n\t\t\tcontinue;\n\t\tif (strcasecmp(list[i].type, type) != 0)\n\t\t\tcontinue;\n\t\tif (!single && strcasecmp(list[i].data, data) != 0)\n\t\t\tcontinue;\n\t\tbreak;\n\t}\n\tif (i == MAX_RECORDS && first_empty != -1) {\n\t\ti = first_empty;\n\t}\n\tif (i == MAX_RECORDS) {\n\t\tif (state->log != NULL)\n\t\t\tstate->log(ISC_LOG_ERROR,\n\t\t\t\t   \"dlz_example: out of record space\");\n\t\treturn (ISC_R_FAILURE);\n\t}\n\n\tif (strlen(name) >= sizeof(list[i].name) ||\n\t    strlen(type) >= sizeof(list[i].type) ||\n\t    strlen(data) >= sizeof(list[i].data))\n\t\treturn (ISC_R_NOSPACE);\n\n\tstrncpy(list[i].name, name, sizeof(list[i].name));\n\tlist[i].name[sizeof(list[i].name) - 1] = '\\0';\n\n\tstrncpy(list[i].type, type, sizeof(list[i].type));\n\tlist[i].type[sizeof(list[i].type) - 1] = '\\0';\n\n\tstrncpy(list[i].data, data, sizeof(list[i].data));\n\tlist[i].data[sizeof(list[i].data) - 1] = '\\0';\n\n\tlist[i].ttl = ttl;\n\n\treturn (ISC_R_SUCCESS);\n}\n\n/*\n * Delete a record from a list\n */\nstatic isc_result_t\ndel_name(struct dlz_example_data *state, struct record *list,\n\t const char *name, const char *type, dns_ttl_t ttl,\n\t const char *data)\n{\n\tint i;\n\n\tUNUSED(state);\n\n\tfor (i = 0; i < MAX_RECORDS; i++) {\n\t\tif (strcasecmp(name, list[i].name) == 0 &&\n\t\t    strcasecmp(type, list[i].type) == 0 &&\n\t\t    strcasecmp(data, list[i].data) == 0 &&\n\t\t    ttl == list[i].ttl) {\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (i == MAX_RECORDS) {\n\t\treturn (ISC_R_NOTFOUND);\n\t}\n\tmemset(&list[i], 0, sizeof(struct record));\n\treturn (ISC_R_SUCCESS);\n}\n\nstatic isc_result_t\nfmt_address(isc_sockaddr_t *addr, char *buffer, size_t size) {\n\tchar addr_buf[100];\n\tconst char *ret;\n\tuint16_t port = 0;\n\n\tswitch (addr->type.sa.sa_family) {\n\tcase AF_INET:\n\t\tport = ntohs(addr->type.sin.sin_port);\n\t\tret = inet_ntop(AF_INET, &addr->type.sin.sin_addr, addr_buf,\n\t\t\t\tsizeof(addr_buf));\n\t\tbreak;\n\tcase AF_INET6:\n\t\tport = ntohs(addr->type.sin6.sin6_port);\n\t\tret = inet_ntop(AF_INET6, &addr->type.sin6.sin6_addr, addr_buf,\n\t\t\t\tsizeof(addr_buf));\n\t\tbreak;\n\tdefault:\n\t\treturn (ISC_R_FAILURE);\n\t}\n\n\tif (ret == NULL)\n\t\treturn (ISC_R_FAILURE);\n\n\tsnprintf(buffer, size, \"%s#%u\", addr_buf, port);\n\treturn (ISC_R_SUCCESS);\n}\n\n/*\n * Return the version of the API\n */\nint\ndlz_version(unsigned int *flags) {\n\tUNUSED(flags);\n\treturn (DLZ_DLOPEN_VERSION);\n}\n\n/*\n * Remember a helper function from the bind9 dlz_dlopen driver\n */\nstatic void\nb9_add_helper(struct dlz_example_data *state,\n\t      const char *helper_name, void *ptr)\n{\n\tif (strcmp(helper_name, \"log\") == 0)\n\t\tstate->log = (log_t *)ptr;\n\tif (strcmp(helper_name, \"putrr\") == 0)\n\t\tstate->putrr = (dns_sdlz_putrr_t *)ptr;\n\tif (strcmp(helper_name, \"putnamedrr\") == 0)\n\t\tstate->putnamedrr = (dns_sdlz_putnamedrr_t *)ptr;\n\tif (strcmp(helper_name, \"writeable_zone\") == 0)\n\t\tstate->writeable_zone = (dns_dlz_writeablezone_t *)ptr;\n}\n\n/*\n * Called to initialize the driver\n */\nisc_result_t\ndlz_create(const char *dlzname, unsigned int argc, char *argv[],\n\t   void **dbdata, ...)\n{\n\tstruct dlz_example_data *state;\n\tconst char *helper_name;\n\tva_list ap;\n\tchar soa_data[200];\n\tconst char *extra;\n\tisc_result_t result;\n\tint n;\n\n\tUNUSED(dlzname);\n\n\tstate = calloc(1, sizeof(struct dlz_example_data));\n\tif (state == NULL)\n\t\treturn (ISC_R_NOMEMORY);\n\n\t/* Fill in the helper functions */\n\tva_start(ap, dbdata);\n\twhile ((helper_name = va_arg(ap, const char *)) != NULL) {\n\t\tb9_add_helper(state, helper_name, va_arg(ap, void *));\n\t}\n\tva_end(ap);\n\n\tif (argc < 2 || argv[1][0] == '\\0') {\n\t\tif (state->log != NULL)\n\t\t\tstate->log(ISC_LOG_ERROR,\n\t\t\t\t   \"dlz_example: please specify a zone name\");\n\t\tdlz_destroy(state);\n\t\treturn (ISC_R_FAILURE);\n\t}\n\n\t/* Ensure zone name is absolute */\n\tstate->zone_name = malloc(strlen(argv[1]) + 2);\n\tif (state->zone_name == NULL) {\n\t\tfree(state);\n\t\treturn (ISC_R_NOMEMORY);\n\t}\n\tif (argv[1][strlen(argv[1]) - 1] == '.')\n\t\tstrcpy(state->zone_name, argv[1]);\n\telse\n\t\tsprintf(state->zone_name, \"%s.\", argv[1]);\n\n\tif (strcmp(state->zone_name, \".\") == 0)\n\t\textra = \".root\";\n\telse\n\t\textra = \".\";\n\n\tn = sprintf(soa_data, \"%s hostmaster%s%s 123 900 600 86400 3600\",\n\t\t    state->zone_name, extra, state->zone_name);\n\n\tif (n < 0)\n\t\tCHECK(ISC_R_FAILURE);\n\tif ((unsigned)n >= sizeof(soa_data))\n\t\tCHECK(ISC_R_NOSPACE);\n\n\tadd_name(state, &state->current[0], state->zone_name,\n\t\t \"soa\", 3600, soa_data);\n\tadd_name(state, &state->current[0], state->zone_name,\n\t\t \"ns\", 3600, state->zone_name);\n\tadd_name(state, &state->current[0], state->zone_name,\n\t\t \"a\", 1800, \"10.53.0.1\");\n\n\tif (state->log != NULL)\n\t\tstate->log(ISC_LOG_INFO, \"dlz_example: started for zone %s\",\n\t\t\t   state->zone_name);\n\n\t*dbdata = state;\n\treturn (ISC_R_SUCCESS);\n\n failure:\n\tfree(state);\n\treturn (result);\n\n}\n\n/*\n * Shut down the backend\n */\nvoid\ndlz_destroy(void *dbdata) {\n\tstruct dlz_example_data *state = (struct dlz_example_data *)dbdata;\n\n\tif (state->log != NULL)\n\t\tstate->log(ISC_LOG_INFO,\n\t\t\t   \"dlz_example: shutting down zone %s\",\n\t\t\t   state->zone_name);\n\tfree(state->zone_name);\n\tfree(state);\n}\n\n/*\n * See if we handle a given zone\n */\nisc_result_t\ndlz_findzonedb(void *dbdata, const char *name,\n\t   dns_clientinfomethods_t *methods,\n\t   dns_clientinfo_t *clientinfo)\n{\n\tstruct dlz_example_data *state = (struct dlz_example_data *)dbdata;\n\tisc_sockaddr_t *src;\n\tchar addrbuf[100];\n\tchar absolute[1024];\n\n\tstrcpy(addrbuf, \"unknown\");\n\tif (methods != NULL &&\n\t    methods->sourceip != NULL &&\n\t    methods->version - methods->age <= DNS_CLIENTINFOMETHODS_VERSION &&\n\t    DNS_CLIENTINFOMETHODS_VERSION <= methods->version)\n\t{\n\t\tmethods->sourceip(clientinfo, &src);\n\t\tfmt_address(src, addrbuf, sizeof(addrbuf));\n\t}\n\tstate->log(ISC_LOG_INFO,\n\t\t   \"dlz_example: findzonedb connection from: %s\", addrbuf);\n\n\tstate->log(ISC_LOG_INFO,\n\t\t   \"dlz_example: dlz_findzonedb called with name '%s' \"\n\t\t   \"in zone DB '%s'\", name, state->zone_name);\n\n\t/*\n\t * Returning ISC_R_NOTFOUND will cause the query logic to\n\t * check the database for parent names, looking for zone cuts.\n\t *\n\t * Returning ISC_R_NOMORE prevents the query logic from doing\n\t * this; it will move onto the next database after a single query.\n\t */\n\tif (strcasecmp(name, \"test.example.com\") == 0)\n\t\treturn (ISC_R_NOMORE);\n\n\t/*\n\t * For example.net, only return ISC_R_NOMORE when queried\n\t * from 10.53.0.1.\n\t */\n\tif (strcasecmp(name, \"test.example.net\") == 0 &&\n\t    strncmp(addrbuf, \"10.53.0.1\", 9) == 0)\n\t\treturn (ISC_R_NOMORE);\n\n\tif (strcasecmp(state->zone_name, name) == 0)\n\t\treturn (ISC_R_SUCCESS);\n\n\tsnprintf(absolute, sizeof(absolute), \"%s.\", name);\n\tif (strcasecmp(state->zone_name, absolute) == 0)\n\t\treturn (ISC_R_SUCCESS);\n\n\treturn (ISC_R_NOTFOUND);\n}\n\n/*\n * Look up one record in the sample database.\n *\n * If the queryname is \"source-addr\", send back a TXT record containing\n * the address of the client; this demonstrates the use of 'methods'\n * and 'clientinfo'.\n *\n * If the queryname is \"too-long\", send back a TXT record that's too long\n * to process; this should result in a SERVFAIL when queried.\n */\nisc_result_t\ndlz_lookup(const char *zone, const char *name, void *dbdata,\n\t   dns_sdlzlookup_t *lookup, dns_clientinfomethods_t *methods,\n\t   dns_clientinfo_t *clientinfo)\n{\n\tisc_result_t result;\n\tstruct dlz_example_data *state = (struct dlz_example_data *)dbdata;\n\tbool found = false;\n\tvoid *dbversion = NULL;\n\tisc_sockaddr_t *src;\n\tchar full_name[256];\n\tchar buf[512];\n\tint i;\n\n\tUNUSED(zone);\n\n\tif (state->putrr == NULL)\n\t\treturn (ISC_R_NOTIMPLEMENTED);\n\n\tif (strcmp(name, \"@\") == 0) {\n\t\tstrncpy(full_name, state->zone_name, 255);\n\t\tfull_name[255] = '\\0';\n\t} else\n\t\tsnprintf(full_name, 255, \"%s.%s\", name, state->zone_name);\n\n\t/*\n\t * If we need to know the database version (as set in\n\t * the 'newversion' dlz function) we can pick it up from the\n\t * clientinfo.\n\t *\n\t * This allows a lookup to query the correct version of the DNS\n\t * data, if the DLZ can differentiate between versions.\n\t *\n\t * For example, if a new database transaction is created by\n\t * 'newversion', the lookup should query within the same\n\t * transaction scope if it can.\n\t *\n\t * If the DLZ only operates on 'live' data, then version\n\t * wouldn't necessarily be needed.\n\t */\n\tif (clientinfo != NULL &&\n\t    clientinfo->version >= DNS_CLIENTINFO_VERSION) {\n\t\tdbversion = clientinfo->dbversion;\n\t\tif (dbversion != NULL && *(bool *)dbversion)\n\t\t\tstate->log(ISC_LOG_INFO,\n\t\t\t\t   \"dlz_example: lookup against live \"\n\t\t\t\t   \"transaction\\n\");\n\t}\n\n\tif (strcmp(name, \"source-addr\") == 0) {\n\t\tstrcpy(buf, \"unknown\");\n\t\tif (methods != NULL &&\n\t\t    methods->sourceip != NULL &&\n\t\t    (methods->version - methods->age <=\n\t\t     DNS_CLIENTINFOMETHODS_VERSION) &&\n\t\t    DNS_CLIENTINFOMETHODS_VERSION <= methods->version)\n\t\t{\n\t\t\tmethods->sourceip(clientinfo, &src);\n\t\t\tfmt_address(src, buf, sizeof(buf));\n\t\t}\n\n\t\tstate->log(ISC_LOG_INFO,\n\t\t\t   \"dlz_example: lookup connection from: %s\", buf);\n\n\t\tfound = true;\n\t\tresult = state->putrr(lookup, \"TXT\", 0, buf);\n\t\tif (result != ISC_R_SUCCESS)\n\t\t\treturn (result);\n\t}\n\n\tif (strcmp(name, \"too-long\") == 0) {\n\t\tfor (i = 0; i < 511; i++)\n\t\t\tbuf[i] = 'x';\n\t\tbuf[i] = '\\0';\n\t\tfound = true;\n\t\tresult = state->putrr(lookup, \"TXT\", 0, buf);\n\t\tif (result != ISC_R_SUCCESS)\n\t\t\treturn (result);\n\t}\n\n\tfor (i = 0; i < MAX_RECORDS; i++) {\n\t\tif (strcasecmp(state->current[i].name, full_name) == 0) {\n\t\t\tfound = true;\n\t\t\tresult = state->putrr(lookup, state->current[i].type,\n\t\t\t\t\t      state->current[i].ttl,\n\t\t\t\t\t      state->current[i].data);\n\t\t\tif (result != ISC_R_SUCCESS)\n\t\t\t\treturn (result);\n\t\t}\n\t}\n\n\tif (!found)\n\t\treturn (ISC_R_NOTFOUND);\n\n\treturn (ISC_R_SUCCESS);\n}\n\n\n/*\n * See if a zone transfer is allowed\n */\nisc_result_t\ndlz_allowzonexfr(void *dbdata, const char *name, const char *client) {\n\tUNUSED(client);\n\n\t/* Just say yes for all our zones */\n\treturn (dlz_findzonedb(dbdata, name, NULL, NULL));\n}\n\n/*\n * Perform a zone transfer\n */\nisc_result_t\ndlz_allnodes(const char *zone, void *dbdata, dns_sdlzallnodes_t *allnodes) {\n\tstruct dlz_example_data *state = (struct dlz_example_data *)dbdata;\n\tint i;\n\n\tUNUSED(zone);\n\n\tif (state->putnamedrr == NULL)\n\t\treturn (ISC_R_NOTIMPLEMENTED);\n\n\tfor (i = 0; i < MAX_RECORDS; i++) {\n\t\tisc_result_t result;\n\t\tif (strlen(state->current[i].name) == 0U) {\n\t\t\tcontinue;\n\t\t}\n\t\tresult = state->putnamedrr(allnodes, state->current[i].name,\n\t\t\t\t\t   state->current[i].type,\n\t\t\t\t\t   state->current[i].ttl,\n\t\t\t\t\t   state->current[i].data);\n\t\tif (result != ISC_R_SUCCESS)\n\t\t\treturn (result);\n\t}\n\n\treturn (ISC_R_SUCCESS);\n}\n\n\n/*\n * Start a transaction\n */\nisc_result_t\ndlz_newversion(const char *zone, void *dbdata, void **versionp) {\n\tstruct dlz_example_data *state = (struct dlz_example_data *)dbdata;\n\n\tif (state->transaction_started) {\n\t\tif (state->log != NULL)\n\t\t\tstate->log(ISC_LOG_INFO,\n\t\t\t\t   \"dlz_example: transaction already \"\n\t\t\t\t   \"started for zone %s\", zone);\n\t\treturn (ISC_R_FAILURE);\n\t}\n\n\tstate->transaction_started = true;\n\t*versionp = (void *) &state->transaction_started;\n\n\treturn (ISC_R_SUCCESS);\n}\n\n/*\n * End a transaction\n */\nvoid\ndlz_closeversion(const char *zone, bool commit,\n\t\t void *dbdata, void **versionp)\n{\n\tstruct dlz_example_data *state = (struct dlz_example_data *)dbdata;\n\n\tif (!state->transaction_started) {\n\t\tif (state->log != NULL)\n\t\t\tstate->log(ISC_LOG_INFO, \"dlz_example: transaction not \"\n\t\t\t\t   \"started for zone %s\", zone);\n\t\t*versionp = NULL;\n\t\treturn;\n\t}\n\n\tstate->transaction_started = false;\n\n\t*versionp = NULL;\n\n\tif (commit) {\n\t\tint i;\n\t\tif (state->log != NULL)\n\t\t\tstate->log(ISC_LOG_INFO, \"dlz_example: committing \"\n\t\t\t\t   \"transaction on zone %s\", zone);\n\t\tfor (i = 0; i < MAX_RECORDS; i++) {\n\t\t\tif (strlen(state->deletes[i].name) > 0U) {\n\t\t\t\t(void)del_name(state, &state->current[0],\n\t\t\t\t\t       state->deletes[i].name,\n\t\t\t\t\t       state->deletes[i].type,\n\t\t\t\t\t       state->deletes[i].ttl,\n\t\t\t\t\t       state->deletes[i].data);\n\t\t\t}\n\t\t}\n\t\tfor (i = 0; i < MAX_RECORDS; i++) {\n\t\t\tif (strlen(state->adds[i].name) > 0U) {\n\t\t\t\t(void)add_name(state, &state->current[0],\n\t\t\t\t\t       state->adds[i].name,\n\t\t\t\t\t       state->adds[i].type,\n\t\t\t\t\t       state->adds[i].ttl,\n\t\t\t\t\t       state->adds[i].data);\n\t\t\t}\n\t\t}\n\t} else {\n\t\tif (state->log != NULL)\n\t\t\tstate->log(ISC_LOG_INFO, \"dlz_example: cancelling \"\n\t\t\t\t   \"transaction on zone %s\", zone);\n\t}\n\tmemset(state->adds, 0, sizeof(state->adds));\n\tmemset(state->deletes, 0, sizeof(state->deletes));\n}\n\n\n/*\n * Configure a writeable zone\n */\nisc_result_t\ndlz_configure(dns_view_t *view, dns_dlzdb_t *dlzdb, void *dbdata) {\n\tstruct dlz_example_data *state = (struct dlz_example_data *)dbdata;\n\tisc_result_t result;\n\n\tif (state->log != NULL)\n\t\tstate->log(ISC_LOG_INFO, \"dlz_example: starting configure\");\n\n\tif (state->writeable_zone == NULL) {\n\t\tif (state->log != NULL)\n\t\t\tstate->log(ISC_LOG_INFO, \"dlz_example: no \"\n\t\t\t\t   \"writeable_zone method available\");\n\t\treturn (ISC_R_FAILURE);\n\t}\n\n\tresult = state->writeable_zone(view, dlzdb, state->zone_name);\n\tif (result != ISC_R_SUCCESS) {\n\t\tif (state->log != NULL)\n\t\t\tstate->log(ISC_LOG_ERROR, \"dlz_example: failed to \"\n\t\t\t\t   \"configure zone %s\", state->zone_name);\n\t\treturn (result);\n\t}\n\n\tif (state->log != NULL)\n\t\tstate->log(ISC_LOG_INFO, \"dlz_example: configured writeable \"\n\t\t\t   \"zone %s\", state->zone_name);\n\treturn (ISC_R_SUCCESS);\n}\n\n/*\n * Authorize a zone update\n */\nbool\ndlz_ssumatch(const char *signer, const char *name, const char *tcpaddr,\n\t     const char *type, const char *key, uint32_t keydatalen,\n\t     unsigned char *keydata, void *dbdata)\n{\n\tstruct dlz_example_data *state = (struct dlz_example_data *)dbdata;\n\n\tUNUSED(tcpaddr);\n\tUNUSED(type);\n\tUNUSED(key);\n\tUNUSED(keydatalen);\n\tUNUSED(keydata);\n\n\tif (strncmp(name, \"deny.\", 5) == 0) {\n\t\tif (state->log != NULL)\n\t\t\tstate->log(ISC_LOG_INFO, \"dlz_example: denying update \"\n\t\t\t\t   \"of name=%s by %s\", name, signer);\n\t\treturn (false);\n\t}\n\tif (state->log != NULL)\n\t\tstate->log(ISC_LOG_INFO, \"dlz_example: allowing update of \"\n\t\t\t   \"name=%s by %s\", name, signer);\n\treturn (true);\n}\n\n\nstatic isc_result_t\nmodrdataset(struct dlz_example_data *state, const char *name,\n\t    const char *rdatastr, struct record *list)\n{\n\tchar *full_name, *dclass, *type, *data, *ttlstr, *buf;\n\tchar absolute[1024];\n\tisc_result_t result;\n#if defined(WIN32) || defined(_REENTRANT)\n\tchar *saveptr = NULL;\n#endif\n\n\tbuf = strdup(rdatastr);\n\tif (buf == NULL)\n\t\treturn (ISC_R_FAILURE);\n\n\t/*\n\t * The format is:\n\t * FULLNAME\\tTTL\\tDCLASS\\tTYPE\\tDATA\n\t *\n\t * The DATA field is space separated, and is in the data format\n\t * for the type used by dig\n\t */\n\n\tfull_name = strtok_r(buf, \"\\t\", &saveptr);\n\tif (full_name == NULL)\n\t\tgoto error;\n\n\tttlstr = strtok_r(NULL, \"\\t\", &saveptr);\n\tif (ttlstr == NULL)\n\t\tgoto error;\n\n\tdclass = strtok_r(NULL, \"\\t\", &saveptr);\n\tif (dclass == NULL)\n\t\tgoto error;\n\n\ttype = strtok_r(NULL, \"\\t\", &saveptr);\n\tif (type == NULL)\n\t\tgoto error;\n\n\tdata = strtok_r(NULL, \"\\t\", &saveptr);\n\tif (data == NULL)\n\t\tgoto error;\n\n\tif (name[strlen(name) - 1] != '.') {\n\t\tsnprintf(absolute, sizeof(absolute), \"%s.\", name);\n\t\tname = absolute;\n\t}\n\n\tresult = add_name(state, list, name, type,\n\t\t\t  strtoul(ttlstr, NULL, 10), data);\n\tfree(buf);\n\treturn (result);\n\n error:\n\tfree(buf);\n\treturn (ISC_R_FAILURE);\n}\n\n\nisc_result_t\ndlz_addrdataset(const char *name, const char *rdatastr,\n\t\tvoid *dbdata, void *version)\n{\n\tstruct dlz_example_data *state = (struct dlz_example_data *)dbdata;\n\n\tif (version != (void *) &state->transaction_started)\n\t\treturn (ISC_R_FAILURE);\n\n\tif (state->log != NULL)\n\t\tstate->log(ISC_LOG_INFO, \"dlz_example: adding rdataset %s '%s'\",\n\t\t\t   name, rdatastr);\n\n\treturn (modrdataset(state, name, rdatastr, &state->adds[0]));\n}\n\nisc_result_t\ndlz_subrdataset(const char *name, const char *rdatastr,\n\t\tvoid *dbdata, void *version)\n{\n\tstruct dlz_example_data *state = (struct dlz_example_data *)dbdata;\n\n\tif (version != (void *) &state->transaction_started)\n\t\treturn (ISC_R_FAILURE);\n\n\tif (state->log != NULL)\n\t\tstate->log(ISC_LOG_INFO, \"dlz_example: subtracting rdataset \"\n\t\t\t   \"%s '%s'\", name, rdatastr);\n\n\treturn (modrdataset(state, name, rdatastr, &state->deletes[0]));\n}\n\nisc_result_t\ndlz_delrdataset(const char *name, const char *type,\n\t\tvoid *dbdata, void *version)\n{\n\tstruct dlz_example_data *state = (struct dlz_example_data *)dbdata;\n\n\tif (version != (void *) &state->transaction_started)\n\t\treturn (ISC_R_FAILURE);\n\n\tif (state->log != NULL)\n\t\tstate->log(ISC_LOG_INFO, \"dlz_example: deleting rdataset %s \"\n\t\t\t   \"of type %s\", name, type);\n\n\treturn (ISC_R_SUCCESS);\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/contrib/dlz/example/named.conf": "/*\n * Copyright (C) 2011  Internet Systems Consortium, Inc. (\"ISC\")\n *\n * Permission to use, copy, modify, and/or distribute this software for any\n * purpose with or without fee is hereby granted, provided that the above\n * copyright notice and this permission notice appear in all copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND ISC DISCLAIMS ALL WARRANTIES WITH\n * REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n * AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,\n * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\n * LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE\n * OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\n * PERFORMANCE OF THIS SOFTWARE.\n */\n\n/*\n * This is a sample named.conf file that uses the DLZ module defined in\n * dlz_example.c.  It sets up a zone 'example.nil' which can accept DDNS\n * updates.\n *\n * By default, when run, the zone contains the following records:\n *\n * example.nil.  3600    IN      SOA     example.nil. hostmaster.example.nil. (\n *                                               123 900 600 86400 3600\n *                                       )\n * example.nil.  3600    IN      NS      example.nil.\n * example.nil.  1800    IN      A       10.53.0.1\n *\n * Additionally, a query for 'source-addr.example.nil/TXT' is always\n * answered with the source address of the query.  This is used to\n * demonstrate the code that retreives client information from the\n * caller.\n *\n * To use this driver, \"dlz_external.so\" must be moved into the working\n * directory for named.\n */\n\noptions {\n        allow-transfer { any; };\n        allow-query { any; };\n        notify yes;\n\trecursion no;\n};\n\n/*\n * To test dynamic updates, create a DDNS key:\n *\n *   ddns-confgen -q -z example.nil > ddns.key\n *\n * Then uncomment the following line:\n *\n *   include \"ddns.key\";\n *\n * Use \"nsupdate -k ddns.key\" when sending updates. (NOTE: This driver does\n * not check the key that's used: as long as the update is signed by a key\n * known to named, the update will be accepted.  Only updates to names\n * that begin with \"deny.\" are rejected.)\n */\n\ndlz \"example\" {\n\tdatabase \"dlopen ./dlz_example.so example.nil\";\n};\n",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/contrib/dlz/drivers/rules.in": "# Copyright (C) 2005  Internet Systems Consortium, Inc. (\"ISC\")\n#\n# Permission to use, copy, modify, and distribute this software for any\n# purpose with or without fee is hereby granted, provided that the above\n# copyright notice and this permission notice appear in all copies.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\" AND ISC DISCLAIMS ALL WARRANTIES WITH\n# REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n# AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,\n# INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\n# LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE\n# OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\n# PERFORMANCE OF THIS SOFTWARE.\n\ndlz_drivers.@O@: ${DLZ_DRIVER_DIR}/dlz_drivers.c ${DLZ_DRIVER_DIR}/include/dlz/dlz_drivers.h\n\t${LIBTOOL_MODE_COMPILE} ${CC} ${ALL_CFLAGS} -c ${DLZ_DRIVER_DIR}/dlz_drivers.c\n\nsdlz_helper.@O@: ${DLZ_DRIVER_DIR}/sdlz_helper.c ${DLZ_DRIVER_DIR}/include/dlz/sdlz_helper.h\n\t${LIBTOOL_MODE_COMPILE} ${CC} ${ALL_CFLAGS} -c ${DLZ_DRIVER_DIR}/sdlz_helper.c\n\n\ndlz_bdb_driver.@O@: ${DLZ_DRIVER_DIR}/dlz_bdb_driver.c ${DLZ_DRIVER_DIR}/include/dlz/dlz_bdb_driver.h\n\t${LIBTOOL_MODE_COMPILE} ${CC} ${ALL_CFLAGS} -c ${DLZ_DRIVER_DIR}/dlz_bdb_driver.c\n\ndlz_bdbhpt_driver.@O@: ${DLZ_DRIVER_DIR}/dlz_bdbhpt_driver.c ${DLZ_DRIVER_DIR}/include/dlz/dlz_bdbhpt_driver.h\n\t${LIBTOOL_MODE_COMPILE} ${CC} ${ALL_CFLAGS} -c ${DLZ_DRIVER_DIR}/dlz_bdbhpt_driver.c\n\ndlz_filesystem_driver.@O@: ${DLZ_DRIVER_DIR}/dlz_filesystem_driver.c ${DLZ_DRIVER_DIR}/include/dlz/dlz_filesystem_driver.h\n\t${LIBTOOL_MODE_COMPILE} ${CC} ${ALL_CFLAGS} -c ${DLZ_DRIVER_DIR}/dlz_filesystem_driver.c\n\ndlz_ldap_driver.@O@: ${DLZ_DRIVER_DIR}/dlz_ldap_driver.c ${DLZ_DRIVER_DIR}/include/dlz/dlz_ldap_driver.h\n\t${LIBTOOL_MODE_COMPILE} ${CC} ${ALL_CFLAGS} -c ${DLZ_DRIVER_DIR}/dlz_ldap_driver.c\n\ndlz_mysql_driver.@O@: ${DLZ_DRIVER_DIR}/dlz_mysql_driver.c ${DLZ_DRIVER_DIR}/include/dlz/dlz_mysql_driver.h\n\t${LIBTOOL_MODE_COMPILE} ${CC} ${ALL_CFLAGS} -c ${DLZ_DRIVER_DIR}/dlz_mysql_driver.c\n\ndlz_odbc_driver.@O@: ${DLZ_DRIVER_DIR}/dlz_odbc_driver.c ${DLZ_DRIVER_DIR}/include/dlz/dlz_odbc_driver.h\n\t${LIBTOOL_MODE_COMPILE} ${CC} ${ALL_CFLAGS} -c ${DLZ_DRIVER_DIR}/dlz_odbc_driver.c\n\ndlz_postgres_driver.@O@: ${DLZ_DRIVER_DIR}/dlz_postgres_driver.c ${DLZ_DRIVER_DIR}/include/dlz/dlz_postgres_driver.h\n\t${LIBTOOL_MODE_COMPILE} ${CC} ${ALL_CFLAGS} -c ${DLZ_DRIVER_DIR}/dlz_postgres_driver.c\n\ndlz_dlopen_driver.@O@: ${DLZ_DRIVER_DIR}/dlz_dlopen_driver.c ${DLZ_DRIVER_DIR}/include/dlz/dlz_dlopen_driver.h\n\t${LIBTOOL_MODE_COMPILE} ${CC} ${ALL_CFLAGS} -c ${DLZ_DRIVER_DIR}/dlz_dlopen_driver.c\n\ndlz_stub_driver.@O@: ${DLZ_DRIVER_DIR}/dlz_stub_driver.c ${DLZ_DRIVER_DIR}/include/dlz/dlz_stub_driver.h\n\t${LIBTOOL_MODE_COMPILE} ${CC} ${ALL_CFLAGS} -c ${DLZ_DRIVER_DIR}/dlz_stub_driver.c\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/contrib/dlz/modules/include/dlz_minimal.h": "/*\n * Copyright (C) 2011  Internet Systems Consortium, Inc. (\"ISC\")\n *\n * Permission to use, copy, modify, and distribute this software for any\n * purpose with or without fee is hereby granted, provided that the\n * above copyright notice and this permission notice appear in all\n * copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR\n * DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL\n * THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR\n * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS\n * OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE\n * OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE\n * USE OR PERFORMANCE OF THIS SOFTWARE.\n */\n\n/*\n * This header provides a minimal set of defines and typedefs needed\n * for building an external DLZ module for bind9. When creating a new\n * external DLZ driver, please copy this header into your own source\n * tree.\n */\n\n#ifndef DLZ_MINIMAL_H\n#define DLZ_MINIMAL_H 1\n\n#include <inttypes.h>\n#include <stdbool.h>\n#include <sys/types.h>\n#include <sys/socket.h>\n#ifdef ISC_PLATFORM_HAVESYSUNH\n#include <sys/un.h>\n#endif\n#include <net/if.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n\ntypedef unsigned int isc_result_t;\ntypedef uint32_t dns_ttl_t;\n\n/*\n * Define DLZ_DLOPEN_VERSION to different values to use older versions\n * of the interface\n */\n#ifndef DLZ_DLOPEN_VERSION\n#define DLZ_DLOPEN_VERSION 3\n#define DLZ_DLOPEN_AGE 0\n#endif\n\n/* return these in flags from dlz_version() */\n#define DNS_SDLZFLAG_THREADSAFE\t\t0x00000001U\n#define DNS_SDLZFLAG_RELATIVEOWNER\t0x00000002U\n#define DNS_SDLZFLAG_RELATIVERDATA\t0x00000004U\n\n/* result codes */\n#define ISC_R_SUCCESS\t\t\t0\n#define ISC_R_NOMEMORY\t\t\t1\n#define ISC_R_NOPERM\t\t\t6\n#define ISC_R_NOSPACE\t\t\t19\n#define ISC_R_NOTFOUND\t\t\t23\n#define ISC_R_FAILURE\t\t\t25\n#define ISC_R_NOTIMPLEMENTED\t\t27\n#define ISC_R_NOMORE\t\t\t29\n#define ISC_R_INVALIDFILE\t\t30\n#define ISC_R_UNEXPECTED\t\t34\n#define ISC_R_FILENOTFOUND\t\t38\n\n/* log levels */\n#define ISC_LOG_INFO\t\t(-1)\n#define ISC_LOG_NOTICE\t\t(-2)\n#define ISC_LOG_WARNING \t(-3)\n#define ISC_LOG_ERROR\t\t(-4)\n#define ISC_LOG_CRITICAL\t(-5)\n#define ISC_LOG_DEBUG(level)\t(level)\n\n/* other useful definitions */\n#define UNUSED(x) (void)(x)\n#define DE_CONST(konst, var) \\\n\tdo { \\\n\t\tunion { const void *k; void *v; } _u; \\\n\t\t_u.k = konst; \\\n\t\tvar = _u.v; \\\n\t} while (0)\n\n/* opaque structures */\ntypedef void *dns_sdlzlookup_t;\ntypedef void *dns_sdlzallnodes_t;\ntypedef void *dns_view_t;\ntypedef void *dns_dlzdb_t;\n\n#if DLZ_DLOPEN_VERSION > 1\n/*\n * Method and type definitions needed for retrieval of client info\n * from the caller.\n */\ntypedef struct isc_sockaddr {\n\tunion {\n\t\tstruct sockaddr         sa;\n\t\tstruct sockaddr_in      sin;\n\t\tstruct sockaddr_in6     sin6;\n#ifdef ISC_PLATFORM_HAVESYSUNH\n\t\tstruct sockaddr_un      sunix;\n#endif\n\t}                               type;\n\tunsigned int                    length;\n\tvoid *                          link;\n} isc_sockaddr_t;\n\n#define DNS_CLIENTINFO_VERSION 2\ntypedef struct dns_clientinfo {\n\tuint16_t version;\n\tvoid *data;\n\tvoid *dbversion;\n} dns_clientinfo_t;\n\ntypedef isc_result_t (*dns_clientinfo_sourceip_t)(dns_clientinfo_t *client,\n\t\t\t\t\t\t  isc_sockaddr_t **addrp);\n\ntypedef isc_result_t (*dns_clientinfo_version_t)(dns_clientinfo_t *client,\n\t\t\t\t\t\t  void **addrp);\n\n#define DNS_CLIENTINFOMETHODS_VERSION 2\n#define DNS_CLIENTINFOMETHODS_AGE 1\ntypedef struct dns_clientinfomethods {\n\tuint16_t version;\n\tuint16_t age;\n\tdns_clientinfo_sourceip_t sourceip;\n\tdns_clientinfo_version_t dbversion;\n} dns_clientinfomethods_t;\n#endif /* DLZ_DLOPEN_VERSION > 1 */\n\n/*\n * Method definitions for callbacks provided by the dlopen driver\n */\ntypedef void log_t(int level, const char *fmt, ...);\n\ntypedef isc_result_t dns_sdlz_putrr_t(dns_sdlzlookup_t *lookup,\n\t\t\t\t      const char *type,\n\t\t\t\t      dns_ttl_t ttl,\n\t\t\t\t      const char *data);\n\ntypedef isc_result_t dns_sdlz_putnamedrr_t(dns_sdlzallnodes_t *allnodes,\n\t\t\t\t\t   const char *name,\n\t\t\t\t\t   const char *type,\n\t\t\t\t\t   dns_ttl_t ttl,\n\t\t\t\t\t   const char *data);\n\n#if DLZ_DLOPEN_VERSION < 3\ntypedef isc_result_t dns_dlz_writeablezone_t(dns_view_t *view,\n\t\t\t\t\t     const char *zone_name);\n#else /* DLZ_DLOPEN_VERSION >= 3 */\ntypedef isc_result_t dns_dlz_writeablezone_t(dns_view_t *view,\n\t\t\t\t\t     dns_dlzdb_t *dlzdb,\n\t\t\t\t\t     const char *zone_name);\n#endif /* DLZ_DLOPEN_VERSION */\n\n/*\n * prototypes for the functions you can include in your module\n */\n\n/*\n * dlz_version() is required for all DLZ external drivers. It should\n * return DLZ_DLOPEN_VERSION.  'flags' is updated to indicate capabilities\n * of the module.  In particular, if the module is thread-safe then it\n * sets 'flags' to include DNS_SDLZFLAG_THREADSAFE.  Other capability\n * flags may be added in the future.\n */\nint\ndlz_version(unsigned int *flags);\n\n/*\n * dlz_create() is required for all DLZ external drivers.\n */\nisc_result_t\ndlz_create(const char *dlzname, unsigned int argc, char *argv[],\n\t   void **dbdata, ...);\n\n/*\n * dlz_destroy() is optional, and will be called when the driver is\n * unloaded if supplied\n */\nvoid\ndlz_destroy(void *dbdata);\n\n/*\n * dlz_findzonedb is required for all DLZ external drivers\n */\n#if DLZ_DLOPEN_VERSION < 3\nisc_result_t\ndlz_findzonedb(void *dbdata, const char *name);\n#else /* DLZ_DLOPEN_VERSION >= 3 */\nisc_result_t\ndlz_findzonedb(void *dbdata, const char *name,\n\t       dns_clientinfomethods_t *methods,\n\t       dns_clientinfo_t *clientinfo);\n#endif /* DLZ_DLOPEN_VERSION */\n\n/*\n * dlz_lookup is required for all DLZ external drivers\n */\n#if DLZ_DLOPEN_VERSION == 1\nisc_result_t\ndlz_lookup(const char *zone, const char *name, void *dbdata,\n\t   dns_sdlzlookup_t *lookup);\n#else /* DLZ_DLOPEN_VERSION > 1 */\nisc_result_t\ndlz_lookup(const char *zone, const char *name, void *dbdata,\n\t   dns_sdlzlookup_t *lookup,\n\t   dns_clientinfomethods_t *methods,\n\t   dns_clientinfo_t *clientinfo);\n#endif /* DLZ_DLOPEN_VERSION */\n\n/*\n * dlz_authority() is optional if dlz_lookup() supplies\n * authority information (i.e., SOA, NS) for the dns record\n */\nisc_result_t\ndlz_authority(const char *zone, void *dbdata, dns_sdlzlookup_t *lookup);\n\n/*\n * dlz_allowzonexfr() is optional, and should be supplied if you want to\n * support zone transfers\n */\nisc_result_t\ndlz_allowzonexfr(void *dbdata, const char *name, const char *client);\n\n/*\n * dlz_allnodes() is optional, but must be supplied if supply a\n * dlz_allowzonexfr() function\n */\nisc_result_t\ndlz_allnodes(const char *zone, void *dbdata, dns_sdlzallnodes_t *allnodes);\n\n/*\n * dlz_newversion() is optional. It should be supplied if you want to\n * support dynamic updates.\n */\nisc_result_t\ndlz_newversion(const char *zone, void *dbdata, void **versionp);\n\n/* \n * dlz_closeversion() is optional, but must be supplied if you supply a\n * dlz_newversion() function\n */\nvoid\ndlz_closeversion(const char *zone, bool commit, void *dbdata,\n\t\t void **versionp);\n\n/*\n * dlz_configure() is optional, but must be supplied if you want to support\n * dynamic updates\n */\n#if DLZ_DLOPEN_VERSION < 3\nisc_result_t\ndlz_configure(dns_view_t *view, void *dbdata);\n#else /* DLZ_DLOPEN_VERSION >= 3 */\nisc_result_t\ndlz_configure(dns_view_t *view, dns_dlzdb_t *dlzdb, void *dbdata);\n#endif /* DLZ_DLOPEN_VERSION */\n\n/*\n * dlz_ssumatch() is optional, but must be supplied if you want to support\n * dynamic updates\n */\nbool\ndlz_ssumatch(const char *signer, const char *name, const char *tcpaddr,\n\t     const char *type, const char *key, uint32_t keydatalen,\n\t     uint8_t *keydata, void *dbdata);\n\n/*\n * dlz_addrdataset() is optional, but must be supplied if you want to\n * support dynamic updates\n */\nisc_result_t\ndlz_addrdataset(const char *name, const char *rdatastr, void *dbdata,\n\t\tvoid *version);\n\n/*\n * dlz_subrdataset() is optional, but must be supplied if you want to\n * support dynamic updates\n */\nisc_result_t\ndlz_subrdataset(const char *name, const char *rdatastr, void *dbdata,\n\t\tvoid *version);\n\n/*\n * dlz_delrdataset() is optional, but must be supplied if you want to\n * support dynamic updates\n */\nisc_result_t\ndlz_delrdataset(const char *name, const char *type, void *dbdata,\n\t\tvoid *version);\n\n#endif /* DLZ_MINIMAL_H */\n",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/contrib/dlz/modules/ldap/dlz_ldap_dynamic.c": "/*\n * Copyright (C) 2002 Stichting NLnet, Netherlands, stichting@nlnet.nl.\n *\n * Permission to use, copy, modify, and distribute this software for any\n * purpose with or without fee is hereby granted, provided that the\n * above copyright notice and this permission notice appear in all\n * copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND STICHTING NLNET\n * DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL\n * STICHTING NLNET BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR\n * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS\n * OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE\n * OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE\n * USE OR PERFORMANCE OF THIS SOFTWARE.\n *\n * The development of Dynamically Loadable Zones (DLZ) for BIND 9 was\n * conceived and contributed by Rob Butler.\n *\n * Permission to use, copy, modify, and distribute this software for any\n * purpose with or without fee is hereby granted, provided that the\n * above copyright notice and this permission notice appear in all\n * copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND ROB BUTLER\n * DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL\n * ROB BUTLER BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR\n * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS\n * OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE\n * OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE\n * USE OR PERFORMANCE OF THIS SOFTWARE.\n */\n\n/*\n * Copyright (C) 1999-2001, 2013, 2016  Internet Systems Consortium, Inc. (\"ISC\")\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\n\n/*\n * This provides the externally loadable ldap DLZ module, without\n * update support\n */\n\n#include <stdbool.h>\n#include <stdio.h>\n#include <string.h>\n#include <stdarg.h>\n#include <stdlib.h>\n\n#include <dlz_minimal.h>\n#include <dlz_list.h>\n#include <dlz_dbi.h>\n#include <dlz_pthread.h>\n\n/*\n * Need older API functions from ldap.h.\n */\n#define LDAP_DEPRECATED 1\n\n#include <ldap.h>\n\n#define SIMPLE \"simple\"\n#define KRB41 \"krb41\"\n#define KRB42 \"krb42\"\n#define V2 \"v2\"\n#define V3 \"v3\"\n\n#define dbc_search_limit 30\n#define ALLNODES 1\n#define ALLOWXFR 2\n#define AUTHORITY 3\n#define FINDZONE 4\n#define LOOKUP 5\n\n/*%\n * Structure to hold everthing needed by this \"instance\" of the LDAP\n * driver remember, the driver code is only loaded once, but may have\n * many separate instances.\n */\ntypedef struct {\n#if PTHREADS\n\tdb_list_t    *db; /*%< handle to a list of DB */\n#else\n\tdbinstance_t *db; /*%< handle to db */\n#endif\n\tint method;\t/*%< security authentication method */\n\tchar *user;\t/*%< who is authenticating */\n\tchar *cred;\t/*%< password for simple authentication method */\n\tint protocol;\t/*%< LDAP communication protocol version */\n\tchar *hosts;\t/*%< LDAP server hosts */\n\n\t/* Helper functions from the dlz_dlopen driver */\n\tlog_t *log;\n\tdns_sdlz_putrr_t *putrr;\n\tdns_sdlz_putnamedrr_t *putnamedrr;\n\tdns_dlz_writeablezone_t *writeable_zone;\n} ldap_instance_t;\n\n/* forward references */\n\n#if DLZ_DLOPEN_VERSION < 3\nisc_result_t\ndlz_findzonedb(void *dbdata, const char *name);\n#else\nisc_result_t\ndlz_findzonedb(void *dbdata, const char *name,\n\t\t dns_clientinfomethods_t *methods,\n\t\t dns_clientinfo_t *clientinfo);\n#endif\n\nvoid\ndlz_destroy(void *dbdata);\n\nstatic void\nb9_add_helper(ldap_instance_t *db, const char *helper_name, void *ptr);\n\n/*\n * Private methods\n */\n\n/*% checks that the LDAP URL parameters make sense */\nstatic isc_result_t\nldap_checkURL(ldap_instance_t *db, char *URL, int attrCnt, const char *msg) {\n\tisc_result_t result = ISC_R_SUCCESS;\n\tint ldap_result;\n\tLDAPURLDesc *ldap_url = NULL;\n\n\tif (!ldap_is_ldap_url(URL)) {\n\t\tdb->log(ISC_LOG_ERROR,\n\t\t\t\"%s query is not a valid LDAP URL\", msg);\n\t\tresult = ISC_R_FAILURE;\n\t\tgoto cleanup;\n\t}\n\n\tldap_result = ldap_url_parse(URL, &ldap_url);\n\tif (ldap_result != LDAP_SUCCESS || ldap_url == NULL) {\n\t\tdb->log(ISC_LOG_ERROR, \"parsing %s query failed\", msg);\n\t\tresult = ISC_R_FAILURE;\n\t\tgoto cleanup;\n\t}\n\n\tif (ldap_count_values(ldap_url->lud_attrs) < attrCnt) {\n\t\tdb->log(ISC_LOG_ERROR,\n\t\t\t\"%s query must specify at least \"\n\t\t\t\"%d attributes to return\", msg, attrCnt);\n\t\tresult = ISC_R_FAILURE;\n\t\tgoto cleanup;\n\t}\n\n\tif (ldap_url->lud_host != NULL) {\n\t\tdb->log(ISC_LOG_ERROR,\n\t\t\t\"%s query must not specify a host\", msg);\n\t\tresult = ISC_R_FAILURE;\n\t\tgoto cleanup;\n\t}\n\n\tif (ldap_url->lud_port != 389) {\n\t\tdb->log(ISC_LOG_ERROR,\n\t\t\t\"%s query must not specify a port\", msg);\n\t\tresult = ISC_R_FAILURE;\n\t\tgoto cleanup;\n\t}\n\n\tif (ldap_url->lud_dn == NULL || strlen (ldap_url->lud_dn) < 1) {\n\t\tdb->log(ISC_LOG_ERROR,\n\t\t\t\"%s query must specify a search base\", msg);\n\t\tresult = ISC_R_FAILURE;\n\t\tgoto cleanup;\n\t}\n\n\tif (ldap_url->lud_exts != NULL || ldap_url->lud_crit_exts != 0) {\n\t\tdb->log(ISC_LOG_ERROR,\n\t\t\t\"%s uses extensions. \"\n\t\t\t\"The driver does not support LDAP extensions.\", msg);\n\t\tresult = ISC_R_FAILURE;\n\t\tgoto cleanup;\n\t}\n\n cleanup:\n\tif (ldap_url != NULL)\n\t\tldap_free_urldesc(ldap_url);\n\n\treturn (result);\n}\n\n/*% Connects / reconnects to LDAP server */\nstatic isc_result_t\nldap_connect(ldap_instance_t *dbi, dbinstance_t *dbc) {\n\tisc_result_t result;\n\tint ldap_result;\n\n\t/* if we have a connection, get ride of it. */\n\tif (dbc->dbconn != NULL) {\n\t\tldap_unbind_s((LDAP *) dbc->dbconn);\n\t\tdbc->dbconn = NULL;\n\t}\n\n\t/* now connect / reconnect. */\n\n\t/* initialize. */\n\tdbc->dbconn = ldap_init(dbi->hosts, LDAP_PORT);\n\tif (dbc->dbconn == NULL)\n\t\treturn (ISC_R_NOMEMORY);\n\n\t/* set protocol version. */\n\tldap_result = ldap_set_option((LDAP *) dbc->dbconn,\n\t\t\t\t      LDAP_OPT_PROTOCOL_VERSION,\n\t\t\t\t      &(dbi->protocol));\n\tif (ldap_result != LDAP_SUCCESS) {\n\t\tresult = ISC_R_NOPERM;\n\t\tgoto cleanup;\n\t}\n\n\t/* \"bind\" to server.  i.e. send username / pass */\n\tldap_result = ldap_bind_s((LDAP *) dbc->dbconn, dbi->user,\n\t\t\t\t  dbi->cred, dbi->method);\n\tif (ldap_result != LDAP_SUCCESS) {\n\t\tresult = ISC_R_FAILURE;\n\t\tgoto cleanup;\n\t}\n\n\treturn (ISC_R_SUCCESS);\n\n cleanup:\n\n\t/* cleanup if failure. */\n\tif (dbc->dbconn != NULL) {\n\t\tldap_unbind_s((LDAP *) dbc->dbconn);\n\t\tdbc->dbconn = NULL;\n\t}\n\n\treturn (result);\n}\n\n#if PTHREADS\n/*%\n * Properly cleans up a list of database instances.\n * This function is only used when the driver is compiled for\n * multithreaded operation.\n */\nstatic void\nldap_destroy_dblist(db_list_t *dblist) {\n\tdbinstance_t *ndbi = NULL;\n\tdbinstance_t *dbi = NULL;\n\n\t/* get the first DBI in the list */\n\tndbi = DLZ_LIST_HEAD(*dblist);\n\n\t/* loop through the list */\n\twhile (ndbi != NULL) {\n\t\tdbi = ndbi;\n\t\t/* get the next DBI in the list */\n\t\tndbi = DLZ_LIST_NEXT(dbi, link);\n\t\t/* release DB connection */\n\t\tif (dbi->dbconn != NULL)\n\t\t\tldap_unbind_s((LDAP *) dbi->dbconn);\n\t\t/* release all memory that comprised a DBI */\n\t\tdestroy_dbinstance(dbi);\n\t}\n\t/* release memory for the list structure */\n\tfree(dblist);\n}\n\n/*%\n * Loops through the list of DB instances, attempting to lock\n * on the mutex.  If successful, the DBI is reserved for use\n * and the thread can perform queries against the database.\n * If the lock fails, the next one in the list is tried.\n * looping continues until a lock is obtained, or until\n * the list has been searched dbc_search_limit times.\n * This function is only used when the driver is compiled for\n * multithreaded operation.\n */\nstatic dbinstance_t *\nldap_find_avail_conn(ldap_instance_t *ldap) {\n\tdbinstance_t *dbi = NULL;\n\tdbinstance_t *head;\n\tint count = 0;\n\n\t/* get top of list */\n\thead = dbi = DLZ_LIST_HEAD(*ldap->db);\n\n\t/* loop through list */\n\twhile (count < dbc_search_limit) {\n\t\t/* try to lock on the mutex */\n\t\tif (dlz_mutex_trylock(&dbi->lock) == 0)\n\t\t\treturn (dbi); /* success, return the DBI for use. */\n\n\t\t/* not successful, keep trying */\n\t\tdbi = DLZ_LIST_NEXT(dbi, link);\n\n\t\t/* check to see if we have gone to the top of the list. */\n\t\tif (dbi == NULL) {\n\t\t\tcount++;\n\t\t\tdbi = head;\n\t\t}\n\t}\n\n\tldap->log(ISC_LOG_INFO,\n\t\t\"LDAP driver unable to find available connection \"\n\t\t\"after searching %d times\", count);\n\treturn (NULL);\n}\n#endif /* PTHREADS */\n\nstatic isc_result_t\nldap_process_results(ldap_instance_t *db, LDAP *dbc, LDAPMessage *msg,\n\t\t     char **attrs, void *ptr, bool allnodes)\n{\n\tisc_result_t result = ISC_R_SUCCESS;\n\tint i = 0;\n\tint j;\n\tint len;\n\tchar *attribute = NULL;\n\tLDAPMessage *entry;\n\tchar *endp = NULL;\n\tchar *host = NULL;\n\tchar *type = NULL;\n\tchar *data = NULL;\n\tchar **vals = NULL;\n\tint ttl;\n\n\t/* get the first entry to process */\n\tentry = ldap_first_entry(dbc, msg);\n\tif (entry == NULL) {\n\t\tdb->log(ISC_LOG_INFO, \"LDAP no entries to process.\");\n\t\treturn (ISC_R_FAILURE);\n\t}\n\n\t/* loop through all entries returned */\n\twhile (entry != NULL) {\n\t\t/* reset for this loop */\n\t\tttl = 0;\n\t\tlen = 0;\n\t\ti = 0;\n\t\tattribute = attrs[i];\n\n\t\t/* determine how much space we need for data string */\n\t\tfor (j = 0; attrs[j] != NULL; j++) {\n\t\t\t/* get the list of values for this attribute. */\n\t\t\tvals = ldap_get_values(dbc, entry, attrs[j]);\n\t\t\t/* skip empty attributes. */\n\t\t\tif (vals == NULL || ldap_count_values(vals) < 1)\n\t\t\t\tcontinue;\n\t\t\t/*\n\t\t\t * we only use the first value.  this driver\n\t\t\t * does not support multi-valued attributes.\n\t\t\t */\n\t\t\tlen = len + strlen(vals[0]) + 1;\n\t\t\t/* free vals for next loop */\n\t\t\tldap_value_free(vals);\n\t\t}\n\n\t\t/* allocate memory for data string */\n\t\tdata = malloc(len + 1);\n\t\tif (data == NULL) {\n\t\t\tdb->log(ISC_LOG_ERROR,\n\t\t\t\t\"LDAP driver unable to allocate memory \"\n\t\t\t\t\"while processing results\");\n\t\t\tresult = ISC_R_FAILURE;\n\t\t\tgoto cleanup;\n\t\t}\n\n\t\t/*\n\t\t * Make sure data is null termed at the beginning so\n\t\t * we can check if any data was stored to it later.\n\t\t */\n\t\tdata[0] = '\\0';\n\n\t\t/* reset j to re-use below */\n\t\tj = 0;\n\n\t\t/* loop through the attributes in the order specified. */\n\t\twhile (attribute != NULL) {\n\t\t\t/* get the list of values for this attribute. */\n\t\t\tvals = ldap_get_values(dbc, entry, attribute);\n\n\t\t\t/* skip empty attributes. */\n\t\t\tif (vals == NULL || vals[0] == NULL) {\n\t\t\t\t/* increment attibute pointer */\n\t\t\t\tattribute = attrs[++i];\n\t\t\t\t/* start loop over */\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t/*\n\t\t\t * j initially = 0.  Increment j each time we\n\t\t\t * set a field that way next loop will set\n\t\t\t * next field.\n\t\t\t */\n\t\t\tswitch (j) {\n\t\t\tcase 0:\n\t\t\t\tj++;\n\t\t\t\t/*\n\t\t\t\t * convert text to int, make sure it\n\t\t\t\t * worked right\n\t\t\t\t */\n\t\t\t\tttl = strtol(vals[0], &endp, 10);\n\t\t\t\tif (*endp != '\\0' || ttl < 0) {\n\t\t\t\t\tdb->log(ISC_LOG_ERROR,\n\t\t\t\t\t\t\"LDAP driver ttl must \"\n\t\t\t\t\t\t\"be a postive number\");\n\t\t\t\t\tgoto cleanup;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\tj++;\n\t\t\t\ttype = strdup(vals[0]);\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tj++;\n\t\t\t\tif (allnodes)\n\t\t\t\t\thost = strdup(vals[0]);\n\t\t\t\telse\n\t\t\t\t\tstrcpy(data, vals[0]);\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tj++;\n\t\t\t\tif (allnodes)\n\t\t\t\t\tstrcpy(data, vals[0]);\n\t\t\t\telse {\n\t\t\t\t\tstrcat(data, \" \");\n\t\t\t\t\tstrcat(data, vals[0]);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tstrcat(data, \" \");\n\t\t\t\tstrcat(data, vals[0]);\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t/* free values */\n\t\t\tldap_value_free(vals);\n\t\t\tvals = NULL;\n\n\t\t\t/* increment attibute pointer */\n\t\t\tattribute = attrs[++i];\n\t\t}\n\n\t\tif (type == NULL) {\n\t\t\tdb->log(ISC_LOG_ERROR,\n\t\t\t\t\"LDAP driver unable to retrieve DNS type\");\n\t\t\tresult = ISC_R_FAILURE;\n\t\t\tgoto cleanup;\n\t\t}\n\n\t\tif (strlen(data) < 1) {\n\t\t\tdb->log(ISC_LOG_ERROR,\n\t\t\t\t\"LDAP driver unable to retrieve DNS data\");\n\t\t\tresult = ISC_R_FAILURE;\n\t\t\tgoto cleanup;\n\t\t}\n\n\t\tif (allnodes && host != NULL) {\n\t\t\tdns_sdlzallnodes_t *an = (dns_sdlzallnodes_t *) ptr;\n\t\t\tif (strcasecmp(host, \"~\") == 0)\n\t\t\t\tresult = db->putnamedrr(an, \"*\", type,\n\t\t\t\t\t\t\tttl, data);\n\t\t\telse\n\t\t\t\tresult = db->putnamedrr(an, host, type,\n\t\t\t\t\t\t\tttl, data);\n\t\t\tif (result != ISC_R_SUCCESS)\n\t\t\t\tdb->log(ISC_LOG_ERROR,\n\t\t\t\t\t\"ldap_dynamic: putnamedrr failed \"\n\t\t\t\t\t\"for \\\"%s %s %u %s\\\" (%d)\",\n\t\t\t\t\thost, type, ttl, data, result);\n\t\t} else {\n\t\t\tdns_sdlzlookup_t *lookup = (dns_sdlzlookup_t *) ptr;\n\t\t\tresult = db->putrr(lookup, type, ttl, data);\n\t\t\tif (result != ISC_R_SUCCESS)\n\t\t\t\tdb->log(ISC_LOG_ERROR,\n\t\t\t\t\t\"ldap_dynamic: putrr failed \"\n\t\t\t\t\t\"for \\\"%s %u %s\\\" (%s)\",\n\t\t\t\t\ttype, ttl, data, result);\n\t\t}\n\n\t\tif (result != ISC_R_SUCCESS) {\n\t\t\tdb->log(ISC_LOG_ERROR,\n\t\t\t\t\"LDAP driver failed \"\n\t\t\t\t\"while sending data to BIND.\");\n\t\t\tgoto cleanup;\n\t\t}\n\n\t\t/* free memory for type, data and host for next loop */\n\t\tfree(type);\n\t\ttype = NULL;\n\n\t\tfree(data);\n\t\tdata = NULL;\n\n\t\tif (host != NULL) {\n\t\t\tfree(host);\n\t\t\thost = NULL;\n\t\t}\n\n\t\t/* get the next entry to process */\n\t\tentry = ldap_next_entry(dbc, entry);\n\t}\n\n cleanup:\n\t/* de-allocate memory */\n\tif (vals != NULL)\n\t\tldap_value_free(vals);\n\tif (host != NULL)\n\t\tfree(host);\n\tif (type != NULL)\n\t\tfree(type);\n\tif (data != NULL)\n\t\tfree(data);\n\n\treturn (result);\n}\n\n/*%\n * This function is the real core of the driver.   Zone, record\n * and client strings are passed in (or NULL is passed if the\n * string is not available).  The type of query we want to run\n * is indicated by the query flag, and the dbdata object is passed\n * passed in to.  dbdata really holds either:\n *\t\t1) a list of database instances (in multithreaded mode) OR\n *\t\t2) a single database instance (in single threaded mode)\n * The function will construct the query and obtain an available\n * database instance (DBI).  It will then run the query and hopefully\n * obtain a result set.\n */\nstatic isc_result_t\nldap_get_results(const char *zone, const char *record,\n\t\t const char *client, unsigned int query,\n\t\t void *dbdata, void *ptr)\n{\n\tisc_result_t result;\n\tldap_instance_t *db = (ldap_instance_t *)dbdata;\n\tdbinstance_t *dbi = NULL;\n\tchar *querystring = NULL;\n\tLDAPURLDesc *ldap_url = NULL;\n\tint ldap_result = 0;\n\tLDAPMessage *ldap_msg = NULL;\n\tint i;\n\tint entries;\n\n\t/* get db instance / connection */\n#if PTHREADS\n\t/* find an available DBI from the list */\n\tdbi = ldap_find_avail_conn(db);\n#else /* PTHREADS */\n\t/*\n\t * only 1 DBI - no need to lock instance lock either\n\t * only 1 thread in the whole process, no possible contention.\n\t */\n\tdbi = (dbinstance_t *)(db->db);\n#endif /* PTHREADS */\n\n\t/* if DBI is null, can't do anything else */\n\tif (dbi == NULL)\n\t\treturn (ISC_R_FAILURE);\n\n\t/* set fields */\n\tif (zone != NULL) {\n\t\tdbi->zone = strdup(zone);\n\t\tif (dbi->zone == NULL) {\n\t\t\tresult = ISC_R_NOMEMORY;\n\t\t\tgoto cleanup;\n\t\t}\n\t} else\n\t\tdbi->zone = NULL;\n\n\tif (record != NULL) {\n\t\tdbi->record = strdup(record);\n\t\tif (dbi->record == NULL) {\n\t\t\tresult = ISC_R_NOMEMORY;\n\t\t\tgoto cleanup;\n\t\t}\n\t} else\n\t\tdbi->record = NULL;\n\n\tif (client != NULL) {\n\t\tdbi->client = strdup(client);\n\t\tif (dbi->client == NULL) {\n\t\t\tresult = ISC_R_NOMEMORY;\n\t\t\tgoto cleanup;\n\t\t}\n\t} else\n\t\tdbi->client = NULL;\n\n\n\t/* what type of query are we going to run? */\n\tswitch (query) {\n\tcase ALLNODES:\n\t\t/*\n\t\t * if the query was not passed in from the config file\n\t\t * then we can't run it.  return not_implemented, so\n\t\t * it's like the code for that operation was never\n\t\t * built into the driver.... AHHH flexibility!!!\n\t\t */\n\t\tif (dbi->allnodes_q == NULL) {\n\t\t\tresult = ISC_R_NOTIMPLEMENTED;\n\t\t\tgoto cleanup;\n\t\t} else\n\t\t\tquerystring = build_querystring(dbi->allnodes_q);\n\t\tbreak;\n\tcase ALLOWXFR:\n\t\t/* same as comments as ALLNODES */\n\t\tif (dbi->allowxfr_q == NULL) {\n\t\t\tresult = ISC_R_NOTIMPLEMENTED;\n\t\t\tgoto cleanup;\n\t\t} else\n\t\t\tquerystring = build_querystring(dbi->allowxfr_q);\n\t\tbreak;\n\tcase AUTHORITY:\n\t\t/* same as comments as ALLNODES */\n\t\tif (dbi->authority_q == NULL) {\n\t\t\tresult = ISC_R_NOTIMPLEMENTED;\n\t\t\tgoto cleanup;\n\t\t} else\n\t\t\tquerystring = build_querystring(dbi->authority_q);\n\t\tbreak;\n\tcase FINDZONE:\n\t\t/* this is required.  It's the whole point of DLZ! */\n\t\tif (dbi->findzone_q == NULL) {\n\t\t\tdb->log(ISC_LOG_DEBUG(2),\n\t\t\t\t\"No query specified for findzone. \"\n\t\t\t\t\"Findzone requires a query\");\n\t\t\tresult = ISC_R_FAILURE;\n\t\t\tgoto cleanup;\n\t\t} else\n\t\t\tquerystring = build_querystring(dbi->findzone_q);\n\t\tbreak;\n\tcase LOOKUP:\n\t\t/* this is required.  It's also a major point of DLZ! */\n\t\tif (dbi->lookup_q == NULL) {\n\t\t\tdb->log(ISC_LOG_DEBUG(2),\n\t\t\t\t\"No query specified for lookup. \"\n\t\t\t\t\"Lookup requires a query\");\n\t\t\tresult = ISC_R_FAILURE;\n\t\t\tgoto cleanup;\n\t\t} else\n\t\t\tquerystring = build_querystring(dbi->lookup_q);\n\t\tbreak;\n\tdefault:\n\t\t/*\n\t\t * this should never happen.  If it does, the code is\n\t\t * screwed up!\n\t\t */\n\t\tdb->log(ISC_LOG_ERROR,\n\t\t\t\"Incorrect query flag passed to ldap_get_results\");\n\t\tresult = ISC_R_UNEXPECTED;\n\t\tgoto cleanup;\n\t}\n\n\t/* if the querystring is null, Bummer, outta RAM.  UPGRADE TIME!!!   */\n\tif (querystring  == NULL) {\n\t\tresult = ISC_R_NOMEMORY;\n\t\tgoto cleanup;\n\t}\n\n\t/*\n\t * output the full query string during debug so we can see\n\t * what lame error the query has.\n\t */\n\tdb->log(ISC_LOG_DEBUG(1), \"Query String: %s\", querystring);\n\n\t/* break URL down into it's component parts, if error cleanup */\n\tldap_result = ldap_url_parse(querystring, &ldap_url);\n\tif (ldap_result != LDAP_SUCCESS || ldap_url == NULL) {\n\t\tresult = ISC_R_FAILURE;\n\t\tgoto cleanup;\n\t}\n\n\tfor (i = 0; i < 3; i++) {\n\t\t/*\n\t\t * dbi->dbconn may be null if trying to reconnect on a\n\t\t * previous query failed.\n\t\t */\n\t\tif (dbi->dbconn == NULL) {\n\t\t\tdb->log(ISC_LOG_INFO,\n\t\t\t\t\"LDAP driver attempting to re-connect\");\n\n\t\t\tresult = ldap_connect((ldap_instance_t *) dbdata, dbi);\n\t\t\tif (result != ISC_R_SUCCESS) {\n\t\t\t\tresult = ISC_R_FAILURE;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\n\t\t/* perform ldap search syncronously */\n\t\tldap_result = ldap_search_s((LDAP *) dbi->dbconn,\n\t\t\t\t\t    ldap_url->lud_dn,\n\t\t\t\t\t    ldap_url->lud_scope,\n\t\t\t\t\t    ldap_url->lud_filter,\n\t\t\t\t\t    ldap_url->lud_attrs, 0, &ldap_msg);\n\n\t\t/*\n\t\t * check return code.  No such object is ok, just\n\t\t * didn't find what we wanted\n\t\t */\n\t\tswitch (ldap_result) {\n\t\tcase LDAP_NO_SUCH_OBJECT:\n    \t\t\tdb->log(ISC_LOG_DEBUG(1),\n\t\t\t\t\"No object found matching query requirements\");\n\t\t\tresult = ISC_R_NOTFOUND;\n\t\t\tgoto cleanup;\n\t\t\tbreak;\n\t\tcase LDAP_SUCCESS:\t/* on success do nothing */\n\t\t\tresult = ISC_R_SUCCESS;\n\t\t\ti = 3;\n\t\t\tbreak;\n\t\tcase LDAP_SERVER_DOWN:\n\t\t\tdb->log(ISC_LOG_INFO,\n\t\t\t\t\"LDAP driver attempting to re-connect\");\n\t\t\tresult = ldap_connect((ldap_instance_t *) dbdata, dbi);\n\t\t\tif (result != ISC_R_SUCCESS)\n\t\t\t\tresult = ISC_R_FAILURE;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\t/*\n\t\t\t * other errors not ok.  Log error message and\n\t\t\t * get out\n\t\t\t */\n    \t\t\tdb->log(ISC_LOG_ERROR, \"LDAP error: %s\",\n\t\t\t\tldap_err2string(ldap_result));\n\t\t\tresult = ISC_R_FAILURE;\n\t\t\tgoto cleanup;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (result != ISC_R_SUCCESS)\n\t\tgoto cleanup;\n\n\tswitch (query) {\n\tcase ALLNODES:\n\t\tresult = ldap_process_results(db, (LDAP *) dbi->dbconn,\n\t\t\t\t\t      ldap_msg, ldap_url->lud_attrs,\n\t\t\t\t\t      ptr, true);\n\t\tbreak;\n\tcase AUTHORITY:\n\tcase LOOKUP:\n\t\tresult = ldap_process_results(db, (LDAP *) dbi->dbconn,\n\t\t\t\t\t      ldap_msg, ldap_url->lud_attrs,\n\t\t\t\t\t      ptr, false);\n\t\tbreak;\n\tcase ALLOWXFR:\n\t\tentries = ldap_count_entries((LDAP *) dbi->dbconn, ldap_msg);\n\t\tif (entries == 0)\n\t\t\tresult = ISC_R_NOPERM;\n\t\telse if (entries > 0)\n\t\t\tresult = ISC_R_SUCCESS;\n\t\telse\n\t\t\tresult = ISC_R_FAILURE;\n\t\tbreak;\n\tcase FINDZONE:\n\t\tentries = ldap_count_entries((LDAP *) dbi->dbconn, ldap_msg);\n\t\tif (entries == 0)\n\t\t\tresult = ISC_R_NOTFOUND;\n\t\telse if (entries > 0)\n\t\t\tresult = ISC_R_SUCCESS;\n\t\telse\n\t\t\tresult = ISC_R_FAILURE;\n\t\tbreak;\n\tdefault:\n\t\t/*\n\t\t * this should never happen.  If it does, the code is\n\t\t * screwed up!\n\t\t */\n\t\tdb->log(ISC_LOG_ERROR,\n\t\t\t\"Incorrect query flag passed to ldap_get_results\");\n\t\tresult = ISC_R_UNEXPECTED;\n\t}\n\n cleanup:\n\t/* it's always good to cleanup after yourself */\n\n\t/* if we retrieved results, free them */\n\tif (ldap_msg != NULL)\n\t\tldap_msgfree(ldap_msg);\n\n\tif (ldap_url != NULL)\n\t\tldap_free_urldesc(ldap_url);\n\n\t/* cleanup */\n\tif (dbi->zone != NULL)\n\t\tfree(dbi->zone);\n\tif (dbi->record != NULL)\n\t\tfree(dbi->record);\n\tif (dbi->client != NULL)\n\t\tfree(dbi->client);\n\tdbi->zone = dbi->record = dbi->client = NULL;\n\n\t/* release the lock so another thread can use this dbi */\n\t(void) dlz_mutex_unlock(&dbi->lock);\n\n\t/* release query string */\n\tif (querystring != NULL)\n\t\tfree(querystring);\n\n\t/* return result */\n\treturn (result);\n}\n\n/*\n * DLZ methods\n */\nisc_result_t\ndlz_allowzonexfr(void *dbdata, const char *name, const char *client) {\n\tisc_result_t result;\n\n\t/* check to see if we are authoritative for the zone first */\n#if DLZ_DLOPEN_VERSION < 3\n\tresult = dlz_findzonedb(dbdata, name);\n#else\n\tresult = dlz_findzonedb(dbdata, name, NULL, NULL);\n#endif\n\tif (result != ISC_R_SUCCESS) {\n\t\treturn (result);\n\t}\n\n\t/* get all the zone data */\n\tresult = ldap_get_results(name, NULL, client, ALLOWXFR, dbdata, NULL);\n\treturn (result);\n}\n\nisc_result_t\ndlz_allnodes(const char *zone, void *dbdata, dns_sdlzallnodes_t *allnodes)\n{\n\treturn (ldap_get_results(zone, NULL, NULL, ALLNODES, dbdata, allnodes));\n}\n\nisc_result_t\ndlz_authority(const char *zone, void *dbdata, dns_sdlzlookup_t *lookup) {\n\treturn (ldap_get_results(zone, NULL, NULL, AUTHORITY, dbdata, lookup));\n}\n\n#if DLZ_DLOPEN_VERSION < 3\nisc_result_t\ndlz_findzonedb(void *dbdata, const char *name)\n#else\nisc_result_t\ndlz_findzonedb(void *dbdata, const char *name,\n\t       dns_clientinfomethods_t *methods,\n\t       dns_clientinfo_t *clientinfo)\n#endif\n{\n#if DLZ_DLOPEN_VERSION >= 3\n\tUNUSED(methods);\n\tUNUSED(clientinfo);\n#endif\n\treturn (ldap_get_results(name, NULL, NULL, FINDZONE, dbdata, NULL));\n}\n\n#if DLZ_DLOPEN_VERSION == 1\nisc_result_t dlz_lookup(const char *zone, const char *name, \n\t\t\tvoid *dbdata, dns_sdlzlookup_t *lookup)\n#else\nisc_result_t dlz_lookup(const char *zone, const char *name,\n\t\t\tvoid *dbdata, dns_sdlzlookup_t *lookup,\n\t\t\tdns_clientinfomethods_t *methods,\n\t\t\tdns_clientinfo_t *clientinfo)\n#endif\n{\n\tisc_result_t result;\n\n#if DLZ_DLOPEN_VERSION >= 2\n\tUNUSED(methods);\n\tUNUSED(clientinfo);\n#endif\n\n\tif (strcmp(name, \"*\") == 0)\n\t\tresult = ldap_get_results(zone, \"~\", NULL, LOOKUP,\n\t\t\t\t\t  dbdata, lookup);\n\telse\n\t\tresult = ldap_get_results(zone, name, NULL, LOOKUP,\n\t\t\t\t\t  dbdata, lookup);\n\treturn (result);\n}\n\n\nisc_result_t\ndlz_create(const char *dlzname, unsigned int argc, char *argv[],\n\t   void **dbdata, ...)\n{\n\tisc_result_t result = ISC_R_FAILURE;\n\tldap_instance_t *ldap = NULL;\n\tdbinstance_t *dbi = NULL;\n\tconst char *helper_name;\n\tint protocol;\n\tint method;\n#if PTHREADS\n\tint dbcount;\n\tchar *endp;\n\tint i;\n#endif /* PTHREADS */\n\tva_list ap;\n\n\tUNUSED(dlzname);\n\n\t/* allocate memory for LDAP instance */\n\tldap = calloc(1, sizeof(ldap_instance_t));\n\tif (ldap == NULL)\n\t\treturn (ISC_R_NOMEMORY);\n\tmemset(ldap, 0, sizeof(ldap_instance_t));\n\n\t/* Fill in the helper functions */\n\tva_start(ap, dbdata);\n\twhile ((helper_name = va_arg(ap, const char*)) != NULL)\n\t\tb9_add_helper(ldap, helper_name, va_arg(ap, void*));\n\tva_end(ap);\n\n#if PTHREADS\n\t/* if debugging, let user know we are multithreaded. */\n\tldap->log(ISC_LOG_DEBUG(1), \"LDAP driver running multithreaded\");\n#else /* PTHREADS */\n\t/* if debugging, let user know we are single threaded. */\n\tldap->log(ISC_LOG_DEBUG(1), \"LDAP driver running single threaded\");\n#endif /* PTHREADS */\n\n\tif (argc < 9) {\n\t\tldap->log(ISC_LOG_ERROR,\n\t\t\t  \"LDAP driver requires at least \"\n\t\t\t  \"8 command line args.\");\n\t\tgoto cleanup;\n\t}\n\n\t/* no more than 13 arg's should be passed to the driver */\n\tif (argc > 12) {\n\t\tldap->log(ISC_LOG_ERROR,\n\t\t\t  \"LDAP driver cannot accept more than \"\n\t\t\t  \"11 command line args.\");\n\t\tgoto cleanup;\n\t}\n\n\t/* determine protocol version. */\n\tif (strncasecmp(argv[2], V2, strlen(V2)) == 0)\n\t\tprotocol = 2;\n\telse if (strncasecmp(argv[2], V3, strlen(V3)) == 0)\n\t\tprotocol = 3;\n\telse {\n\t\tldap->log(ISC_LOG_ERROR,\n\t\t\t  \"LDAP driver protocol must be either %s or %s\",\n\t\t\t  V2, V3);\n\t\tgoto cleanup;\n\t}\n\n\t/* determine connection method. */\n\tif (strncasecmp(argv[3], SIMPLE, strlen(SIMPLE)) == 0)\n\t\tmethod = LDAP_AUTH_SIMPLE;\n\telse if (strncasecmp(argv[3], KRB41, strlen(KRB41)) == 0)\n\t\tmethod = LDAP_AUTH_KRBV41;\n\telse if (strncasecmp(argv[3], KRB42, strlen(KRB42)) == 0)\n\t\tmethod = LDAP_AUTH_KRBV42;\n\telse {\n\t\tldap->log(ISC_LOG_ERROR,\n\t\t\t  \"LDAP driver authentication method must be \"\n\t\t\t  \"one of %s, %s or %s\", SIMPLE, KRB41, KRB42);\n\t\tgoto cleanup;\n\t}\n\n\t/* multithreaded build can have multiple DB connections */\n#if PTHREADS\n\t/* check how many db connections we should create */\n\tdbcount = strtol(argv[1], &endp, 10);\n\tif (*endp != '\\0' || dbcount < 0) {\n\t\tldap->log(ISC_LOG_ERROR,\n\t\t\t  \"LDAP driver database connection count \"\n\t\t\t  \"must be positive.\");\n\t\tgoto cleanup;\n\t}\n#endif\n\n\t/* check that LDAP URL parameters make sense */\n\tswitch (argc) {\n\tcase 12:\n\t\tresult = ldap_checkURL(ldap, argv[11], 0,\n\t\t\t\t       \"allow zone transfer\");\n\t\tif (result != ISC_R_SUCCESS)\n\t\t\tgoto cleanup;\n\tcase 11:\n\t\tresult = ldap_checkURL(ldap, argv[10], 3, \"all nodes\");\n\t\tif (result != ISC_R_SUCCESS)\n\t\t\tgoto cleanup;\n\tcase 10:\n\t\tif (strlen(argv[9]) > 0) {\n\t\t\tresult = ldap_checkURL(ldap, argv[9], 3, \"authority\");\n\t\t\tif (result != ISC_R_SUCCESS)\n\t\t\t\tgoto cleanup;\n\t\t}\n\tcase 9:\n\t\tresult = ldap_checkURL(ldap, argv[8], 3, \"lookup\");\n\t\tif (result != ISC_R_SUCCESS)\n\t\t\tgoto cleanup;\n\t\tresult = ldap_checkURL(ldap, argv[7], 0, \"find zone\");\n\t\tif (result != ISC_R_SUCCESS)\n\t\t\tgoto cleanup;\n\t\tbreak;\n\tdefault:\n\t\t/* not really needed, should shut up compiler. */\n\t\tresult = ISC_R_FAILURE;\n\t}\n\n\t/* store info needed to automatically re-connect. */\n\tldap->protocol = protocol;\n\tldap->method = method;\n\tldap->hosts = strdup(argv[6]);\n\tif (ldap->hosts == NULL) {\n\t\tresult = ISC_R_NOMEMORY;\n\t\tgoto cleanup;\n\t}\n\tldap->user = strdup(argv[4]);\n\tif (ldap->user == NULL) {\n\t\tresult = ISC_R_NOMEMORY;\n\t\tgoto cleanup;\n\t}\n\tldap->cred = strdup(argv[5]);\n\tif (ldap->cred == NULL) {\n\t\tresult = ISC_R_NOMEMORY;\n\t\tgoto cleanup;\n\t}\n\n#if PTHREADS\n\t/* allocate memory for database connection list */\n\tldap->db = calloc(1, sizeof(db_list_t));\n\tif (ldap->db == NULL) {\n\t\tresult = ISC_R_NOMEMORY;\n\t\tgoto cleanup;\n\t}\n\n\t/* initialize DB connection list */\n\tDLZ_LIST_INIT(*(ldap->db));\n\n\t/*\n\t * create the appropriate number of database instances (DBI)\n\t * append each new DBI to the end of the list\n\t */\n\tfor (i = 0; i < dbcount; i++) {\n#endif /* PTHREADS */\n\t\t/* how many queries were passed in from config file? */\n\t\tswitch (argc) {\n\t\tcase 9:\n\t\t\tresult = build_dbinstance(NULL, NULL, NULL, argv[7],\n\t\t\t\t\t\t  argv[8], NULL, &dbi,\n\t\t\t\t\t\t  ldap->log);\n\t\t\tbreak;\n\t\tcase 10:\n\t\t\tresult = build_dbinstance(NULL, NULL, argv[9],\n\t\t\t\t\t\t  argv[7], argv[8],\n\t\t\t\t\t\t  NULL, &dbi, ldap->log);\n\t\t\tbreak;\n\t\tcase 11:\n\t\t\tresult = build_dbinstance(argv[10], NULL, argv[9],\n\t\t\t\t\t\t  argv[7], argv[8],\n\t\t\t\t\t\t  NULL, &dbi, ldap->log);\n\t\t\tbreak;\n\t\tcase 12:\n\t\t\tresult = build_dbinstance(argv[10], argv[11],\n\t\t\t\t\t\t  argv[9], argv[7],\n\t\t\t\t\t\t  argv[8], NULL, &dbi,\n\t\t\t\t\t\t  ldap->log);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\t/* not really needed, should shut up compiler. */\n\t\t\tresult = ISC_R_FAILURE;\n\t\t}\n\n\t\tif (result == ISC_R_SUCCESS) {\n\t\t\tldap->log(ISC_LOG_DEBUG(2),\n\t\t\t\t  \"LDAP driver created \"\n\t\t\t\t  \"database instance object.\");\n\t\t} else { /* unsuccessful?, log err msg and cleanup. */\n\t\t\tldap->log(ISC_LOG_ERROR,\n\t\t\t\t  \"LDAP driver could not create \"\n\t\t\t\t  \"database instance object.\");\n\t\t\tgoto cleanup;\n\t\t}\n\n#if PTHREADS\n\t\t/* when multithreaded, build a list of DBI's */\n\t\tDLZ_LINK_INIT(dbi, link);\n\t\tDLZ_LIST_APPEND(*(ldap->db), dbi, link);\n#else\n\t\t/*\n\t\t * when single threaded, hold onto the one connection\n\t\t * instance.\n\t\t */\n\t\tldap->db = dbi;\n#endif\n\t\t/* attempt to connect */\n\t\tresult = ldap_connect(ldap, dbi);\n\n\t\t/*\n\t\t * if db connection cannot be created, log err msg and\n\t\t * cleanup.\n\t\t */\n\t\tswitch (result) {\n\t\t\t/* success, do nothing */\n\t\tcase ISC_R_SUCCESS:\n\t\t\tbreak;\n\t\t\t/*\n\t\t\t * no memory means ldap_init could not\n\t\t\t * allocate memory\n\t\t\t */\n\t\tcase ISC_R_NOMEMORY:\n#if PTHREADS\n\t\t\tldap->log(ISC_LOG_ERROR,\n\t\t\t\t  \"LDAP driver could not allocate memory \"\n\t\t\t\t  \"for connection number %u\", i + 1);\n#else\n\t\t\tldap->log(ISC_LOG_ERROR,\n\t\t\t\t  \"LDAP driver could not allocate memory \"\n\t\t\t\t  \"for connection\");\n#endif\n\t\t\tgoto cleanup;\n\t\t\t/*\n\t\t\t * no perm means ldap_set_option could not set\n\t\t\t * protocol version\n\t\t\t */\n\t\tcase ISC_R_NOPERM:\n\t\t\tldap->log(ISC_LOG_ERROR,\n\t\t\t\t  \"LDAP driver could not \"\n\t\t\t\t  \"set protocol version.\");\n\t\t\tresult = ISC_R_FAILURE;\n\t\t\tgoto cleanup;\n\t\t\t/* failure means couldn't connect to ldap server */\n\t\tcase ISC_R_FAILURE:\n#if PTHREADS\n\t\t\tldap->log(ISC_LOG_ERROR,\n\t\t\t\t  \"LDAP driver could not bind \"\n\t\t\t\t  \"connection number %u to server.\", i + 1);\n#else\n\t\t\tldap->log(ISC_LOG_ERROR,\n\t\t\t\t  \"LDAP driver could not \"\n\t\t\t\t  \"bind connection to server.\");\n#endif\n\t\t\tgoto cleanup;\n\t\t\t/*\n\t\t\t * default should never happen.  If it does,\n\t\t\t * major errors.\n\t\t\t */\n\t\tdefault:\n\t\t\tldap->log(ISC_LOG_ERROR,\n\t\t\t\t  \"dlz_create() failed (%d)\", result);\n\t\t\tresult = ISC_R_UNEXPECTED;\n\t\t\tgoto cleanup;\n\t\t}\n\n#if PTHREADS\n\t\t/* set DBI = null for next loop through. */\n\t\tdbi = NULL;\n\t}\n#endif /* PTHREADS */\n\n\t/* set dbdata to the ldap_instance we created. */\n\t*dbdata = ldap;\n\n\treturn (ISC_R_SUCCESS);\n\n cleanup:\n\tdlz_destroy(ldap);\n\n\treturn (result);\n}\n\nvoid\ndlz_destroy(void *dbdata) {\n\tif (dbdata != NULL) {\n\t\tldap_instance_t *db = (ldap_instance_t *)dbdata;\n#if PTHREADS\n\t\t/* cleanup the list of DBI's */\n\t\tif (db->db != NULL)\n\t\t\tldap_destroy_dblist((db_list_t *)(db->db));\n#else /* PTHREADS */\n\t\tif (db->db->dbconn != NULL)\n\t\t\tldap_unbind_s((LDAP *)(db->db->dbconn));\n\n\t\t/* destroy single DB instance */\n\t\tdestroy_dbinstance(db->db);\n#endif /* PTHREADS */\n\n\t\tif (db->hosts != NULL)\n\t\t\tfree(db->hosts);\n\t\tif (db->user != NULL)\n\t\t\tfree(db->user);\n\t\tif (db->cred != NULL)\n\t\t\tfree(db->cred);\n\t\tfree(dbdata);\n\t}\n}\n\n/*\n * Return the version of the API\n */\nint\ndlz_version(unsigned int *flags) {\n\t*flags |= DNS_SDLZFLAG_RELATIVERDATA;\n#if PTHREADS\n\t*flags |= DNS_SDLZFLAG_THREADSAFE;\n#else\n\t*flags &= ~DNS_SDLZFLAG_THREADSAFE;\n#endif\n\treturn (DLZ_DLOPEN_VERSION);\n}\n\n/*\n * Register a helper function from the bind9 dlz_dlopen driver\n */\nstatic void\nb9_add_helper(ldap_instance_t *db, const char *helper_name, void *ptr) {\n\tif (strcmp(helper_name, \"log\") == 0)\n\t\tdb->log = (log_t *)ptr;\n\tif (strcmp(helper_name, \"putrr\") == 0)\n\t\tdb->putrr = (dns_sdlz_putrr_t *)ptr;\n\tif (strcmp(helper_name, \"putnamedrr\") == 0)\n\t\tdb->putnamedrr = (dns_sdlz_putnamedrr_t *)ptr;\n\tif (strcmp(helper_name, \"writeable_zone\") == 0)\n\t\tdb->writeable_zone = (dns_dlz_writeablezone_t *)ptr;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/contrib/dlz/modules/ldap/testing/named.conf": "/*\n * Copyright (C) 2013  Internet Systems Consortium, Inc. (\"ISC\")\n *\n * Permission to use, copy, modify, and/or distribute this software for any\n * purpose with or without fee is hereby granted, provided that the above\n * copyright notice and this permission notice appear in all copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND ISC DISCLAIMS ALL WARRANTIES WITH\n * REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n * AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,\n * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\n * LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE\n * OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\n * PERFORMANCE OF THIS SOFTWARE.\n */\n\ncontrols { };\n\noptions {\n\tdirectory \".\";\n\tport 5300;\n\tpid-file \"named.pid\";\n\tsession-keyfile \"session.key\";\n\tlisten-on { any; };\n\tlisten-on-v6 { none; };\n\trecursion no;\n};\n\nkey rndc_key {\n\tsecret \"1234abcd8765\";\n\talgorithm hmac-md5;\n};\n\ncontrols {\n\tinet 127.0.0.1 port 9953 allow { any; } keys { rndc_key; };\n};\n\ndlz \"test\" {\n\tdatabase \"dlopen ../dlz_ldap_dynamic.so 2\n        v3 simple {cn=Manager,o=bind-dlz} {secret} {127.0.0.1}\n        ldap:///dlzZoneName=$zone$,ou=dns,o=bind-dlz???objectclass=dlzZone\n        ldap:///dlzHostName=$record$,dlzZoneName=$zone$,ou=dns,o=bind-dlz?dlzTTL,dlzType,dlzPreference,dlzData,dlzIPAddr?sub?(&(objectclass=dlzAbstractRecord)(!(dlzType=soa)))\n        ldap:///dlzHostName=@,dlzZoneName=$zone$,ou=dns,o=bind-dlz?dlzTTL,dlzType,dlzData,dlzPrimaryNS,dlzAdminEmail,dlzSerial,dlzRefresh,dlzRetry,dlzExpire,dlzMinimum?sub?(&(objectclass=dlzAbstractRecord)(dlzType=soa))\n        ldap:///dlzZoneName=$zone$,ou=dns,o=bind-dlz?dlzTTL,dlzType,dlzHostName,dlzPreference,dlzData,dlzIPAddr,dlzPrimaryNS,dlzAdminEmail,dlzSerial,dlzRefresh,dlzRetry,dlzExpire,dlzMinimum?sub?(&(objectclass=dlzAbstractRecord)(!(dlzType=soa)))\n        ldap:///dlzZoneName=$zone$,ou=dns,o=bind-dlz??sub?(&(objectclass=dlzXFR)(dlzIPAddr=$client$))\";\n};\n",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/contrib/dlz/modules/sqlite3/dlz_sqlite3_dynamic.c": "/*\n * Copyright (C) 2002 Stichting NLnet, Netherlands, stichting@nlnet.nl.\n *\n * Permission to use, copy, modify, and distribute this software for any\n * purpose with or without fee is hereby granted, provided that the\n * above copyright notice and this permission notice appear in all\n * copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND STICHTING NLNET\n * DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL\n * STICHTING NLNET BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR\n * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS\n * OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE\n * OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE\n * USE OR PERFORMANCE OF THIS SOFTWARE.\n *\n * The development of Dynamically Loadable Zones (DLZ) for BIND 9 was\n * conceived and contributed by Rob Butler.\n *\n * Permission to use, copy, modify, and distribute this software for any\n * purpose with or without fee is hereby granted, provided that the\n * above copyright notice and this permission notice appear in all\n * copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND ROB BUTLER\n * DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL\n * ROB BUTLER BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR\n * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS\n * OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE\n * OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE\n * USE OR PERFORMANCE OF THIS SOFTWARE.\n */\n\n/*\n * Copyright (C) 1999-2001, 2013-2014, 2016  Internet Systems Consortium, Inc. (\"ISC\")\n * \n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\n\n/*\n * This provides the externally loadable SQLitee DLZ module, without\n * update support. Based in part on SQLite code contributed by Tim Tessier.\n */\n\n#include <stdio.h>\n#include <string.h>\n#include <stdarg.h>\n#include <stdlib.h>\n\n#include <dlz_minimal.h>\n#include <dlz_list.h>\n#include <dlz_dbi.h>\n#include <dlz_pthread.h>\n\n#include <sqlite3.h>\n\n#define dbc_search_limit 30\n#define ALLNODES 1\n#define ALLOWXFR 2\n#define AUTHORITY 3\n#define FINDZONE 4\n#define COUNTZONE 5\n#define LOOKUP 6\n\n#define safeGet(in) in == NULL ? \"\" : in\n\n/*%\n * Structure to hold everthing needed by this \"instance\" of the SQLite3\n * module remember, the module code is only loaded once, but may have\n * many separate instances.\n */\ntypedef struct {\n#if PTHREADS\n\tdb_list_t    *db; /*%< handle to a list of DB */\n\tint dbcount;\n#else\n\tdbinstance_t *db; /*%< handle to DB */\n#endif\n\n\tchar *dbname;\n\n\t/* Helper functions from the dlz_dlopen driver */\n\tlog_t *log;\n\tdns_sdlz_putrr_t *putrr;\n\tdns_sdlz_putnamedrr_t *putnamedrr;\n\tdns_dlz_writeablezone_t *writeable_zone;\n} sqlite3_instance_t;\n\n/*\n * SQLite3 result set\n */\ntypedef struct {\n\tchar **pazResult;\t/* Result of the query */\n\tunsigned int pnRow;\t/* Number of result rows */\n\tunsigned int pnColumn;\t/* Number of result columns */\n\tunsigned int curRow;\t/* Current row */\n\tchar *pzErrmsg;\t\t/* Error message */\n} sqlite3_res_t;\n\n/* forward references */\nisc_result_t\ndlz_findzonedb(void *dbdata, const char *name,\n\t       dns_clientinfomethods_t *methods,\n\t       dns_clientinfo_t *clientinfo);\n\nvoid\ndlz_destroy(void *dbdata);\n\nstatic void\nb9_add_helper(sqlite3_instance_t *db, const char *helper_name, void *ptr);\n\n/*\n * Private methods\n */\n\nvoid\nsqlite3_destroy(dbinstance_t *db) {\n\t/* release DB connection */\n\tif (db->dbconn != NULL)\n\t\tsqlite3_close((sqlite3 *) db->dbconn);\n\tsqlite3_shutdown();\n\n\t/* destroy DB instance */\n\tdestroy_dbinstance(db);\n}\n\n#if PTHREADS\n/*%\n * Properly cleans up a list of database instances.\n * This function is only used when the module is compiled for\n * multithreaded operation.\n */\nstatic void\nsqlite3_destroy_dblist(db_list_t *dblist) {\n\tdbinstance_t *ndbi = NULL;\n\tdbinstance_t *dbi = NULL;\n\n\tndbi = DLZ_LIST_HEAD(*dblist);\n\twhile (ndbi != NULL) {\n\t\tdbi = ndbi;\n\t\tndbi = DLZ_LIST_NEXT(dbi, link);\n\n\t\tsqlite3_destroy(dbi);\n\t}\n\n\t/* release memory for the list structure */\n\tfree(dblist);\n}\n\n/*%\n * Loops through the list of DB instances, attempting to lock\n * on the mutex.  If successful, the DBI is reserved for use\n * and the thread can perform queries against the database.\n * If the lock fails, the next one in the list is tried.\n * looping continues until a lock is obtained, or until\n * the list has been searched dbc_search_limit times.\n * This function is only used when the module is compiled for\n * multithreaded operation.\n */\nstatic dbinstance_t *\nsqlite3_find_avail(sqlite3_instance_t *sqlite3) {\n\tdbinstance_t *dbi = NULL, *head;\n\tint count = 0;\n\n\t/* get top of list */\n\thead = dbi = DLZ_LIST_HEAD(*(sqlite3->db));\n\n\t/* loop through list */\n\twhile (count < dbc_search_limit) {\n\t\t/* try to lock on the mutex */\n\t\tif (dlz_mutex_trylock(&dbi->lock) == 0)\n\t\t\treturn (dbi); /* success, return the DBI for use. */\n\n\t\t/* not successful, keep trying */\n\t\tdbi = DLZ_LIST_NEXT(dbi, link);\n\n\t\t/* check to see if we have gone to the top of the list. */\n\t\tif (dbi == NULL) {\n\t\t\tcount++;\n\t\t\tdbi = head;\n\t\t}\n\t}\n\n\tsqlite3->log(ISC_LOG_INFO,\n\t\t   \"SQLite3 module: unable to find available connection \"\n\t\t   \"after searching %d times\", count);\n\treturn (NULL);\n}\n#endif /* PTHREADS */\n\n/*%\n * Allocates memory for a new string, and then constructs the new\n * string by \"escaping\" the input string.  The new string is\n * safe to be used in queries.  This is necessary because we cannot\n * be sure of what types of strings are passed to us, and we don't\n * want special characters in the string causing problems.\n */\nstatic char *\nescape_string(const char *instr) {\n\tchar *outstr;\n\tchar *ptr;\n\tunsigned int len;\n\tunsigned int tlen = 0;\n\tunsigned int atlen = 0;\n\tunsigned int i;\n\n\tif (instr == NULL)\n\t\treturn (NULL);\n\tlen = strlen(instr);\n\tatlen = (2 * len * sizeof(char)) + 1;\n\toutstr = malloc(atlen);\n\tif (outstr == NULL)\n\t\treturn (NULL);\n\n\tptr = outstr;\n\tfor (i = 0; i < len; i++) {\n\t\tif (tlen > atlen || instr[i] == '\\0')\n\t\t\tbreak;\n\n\t\tif (instr[i]  == '\\'') {\n\t\t\t*ptr++ = '\\'';\n\t\t\ttlen++;\n\t\t}\n\n\t\t*ptr++ = instr[i];\n\t\ttlen++;\n\t}\n\t*ptr = '\\0';\n\n\treturn (outstr);\n}\n\n/*%\n * This function is the real core of the module.   Zone, record\n * and client strings are passed in (or NULL is passed if the\n * string is not available).  The type of query we want to run\n * is indicated by the query flag, and the dbdata object is passed\n * passed in too.  dbdata really holds a single database instance.\n * The function will construct and run the query, hopefully getting\n * a result set.\n */\nstatic isc_result_t\nsqlite3_get_resultset(const char *zone, const char *record,\n\t\t      const char *client, unsigned int query,\n\t\t      void *dbdata, sqlite3_res_t **rsp)\n{\n\tisc_result_t result;\n\tdbinstance_t *dbi = NULL;\n\tsqlite3_instance_t *db = (sqlite3_instance_t *)dbdata;\n\tchar *querystring = NULL;\n\tsqlite3_res_t *rs = NULL;\n\tunsigned int i = 0;\n\tunsigned int j = 0;\n\tint qres = 0;\n\n\tif ((query == COUNTZONE && rsp != NULL) ||\n\t    (query != COUNTZONE && (rsp == NULL || *rsp != NULL)))\n\t{\n\t\tdb->log(ISC_LOG_DEBUG(2), \"Invalid result set pointer.\");\n\t\tresult = ISC_R_FAILURE;\n\t\tgoto cleanup;\n\t}\n\n#if PTHREADS\n\t/* find an available DBI from the list */\n\tdbi = sqlite3_find_avail(db);\n#else /* PTHREADS */\n\t/*\n\t * only 1 DBI - no need to lock instance lock either\n\t * only 1 thread in the whole process, no possible contention.\n\t */\n\tdbi = (dbinstance_t *)(db->db);\n#endif /* PTHREADS */\n\n\tif (dbi == NULL) {\n\t\tresult = ISC_R_FAILURE;\n\t\tgoto cleanup;\n\t}\n\n\t/* what type of query are we going to run? */\n\tswitch(query) {\n\tcase ALLNODES:\n\t\tif (dbi->allnodes_q == NULL) {\n\t\t\tresult = ISC_R_NOTIMPLEMENTED;\n\t\t\tgoto cleanup;\n\t\t}\n\t\tbreak;\n\tcase ALLOWXFR:\n\t\tif (dbi->allowxfr_q == NULL) {\n\t\t\tresult = ISC_R_NOTIMPLEMENTED;\n\t\t\tgoto cleanup;\n\t\t}\n\t\tbreak;\n\tcase AUTHORITY:\n\t\tif (dbi->authority_q == NULL) {\n\t\t\tresult = ISC_R_NOTIMPLEMENTED;\n\t\t\tgoto cleanup;\n\t\t}\n\t\tbreak;\n\tcase FINDZONE:\n\t\tif (dbi->findzone_q == NULL) {\n\t\t\tdb->log(ISC_LOG_DEBUG(2),\n\t\t\t\t\"No query specified for findzone.  \"\n\t\t\t\t\"Findzone requires a query\");\n\t\t\tresult = ISC_R_FAILURE;\n\t\t\tgoto cleanup;\n\t\t}\n\t\tbreak;\n\tcase COUNTZONE:\n\t\tif (dbi->countzone_q == NULL) {\n\t\t\tresult = ISC_R_NOTIMPLEMENTED;\n\t\t\tgoto cleanup;\n\t\t}\n\t\tbreak;\n\tcase LOOKUP:\n\t\tif (dbi->lookup_q == NULL) {\n\t\t\tdb->log(ISC_LOG_DEBUG(2),\n\t\t\t\t\"No query specified for lookup.  \"\n\t\t\t\t\"Lookup requires a query\");\n\t\t\tresult = ISC_R_FAILURE;\n\t\t\tgoto cleanup;\n\t\t}\n\t\tbreak;\n\tdefault:\n\t\tdb->log(ISC_LOG_ERROR,\n\t\t\t\"Incorrect query flag passed to \"\n\t\t\t\"sqlite3_get_resultset\");\n\t\tresult = ISC_R_UNEXPECTED;\n\t\tgoto cleanup;\n\t}\n\n\n\tif (zone != NULL) {\n\t\tif (dbi->zone != NULL)\n\t\t\tfree(dbi->zone);\n\n\t\tdbi->zone = escape_string(zone);\n\t\tif (dbi->zone == NULL) {\n\t\t\tresult = ISC_R_NOMEMORY;\n\t\t\tgoto cleanup;\n\t\t}\n\t} else\n\t\tdbi->zone = NULL;\n\n\tif (record != NULL) {\n\t\tif (dbi->record != NULL)\n\t\t\tfree(dbi->record);\n\n\t\tdbi->record = escape_string(record);\n\t\tif (dbi->record == NULL) {\n\t\t\tresult = ISC_R_NOMEMORY;\n\t\t\tgoto cleanup;\n\t\t}\n\t} else\n\t\tdbi->record = NULL;\n\n\tif (client != NULL) {\n\t\tif (dbi->client != NULL)\n\t\t\tfree(dbi->client);\n\n\t\tdbi->client = escape_string(client);\n\t\tif (dbi->client == NULL) {\n\t\t\tresult = ISC_R_NOMEMORY;\n\t\t\tgoto cleanup;\n\t\t}\n\t} else\n\t\tdbi->client = NULL;\n\n\t/*\n\t * what type of query are we going to run?  this time we build\n\t * the actual query to run.\n\t */\n\tswitch(query) {\n\tcase ALLNODES:\n\t\tquerystring = build_querystring(dbi->allnodes_q);\n\t\tbreak;\n\tcase ALLOWXFR:\n\t\tquerystring = build_querystring(dbi->allowxfr_q);\n\t\tbreak;\n\tcase AUTHORITY:\n\t\tquerystring = build_querystring(dbi->authority_q);\n\t\tbreak;\n\tcase FINDZONE:\n\t\tquerystring = build_querystring(dbi->findzone_q);\n\t\tbreak;\n\tcase COUNTZONE:\n\t\tquerystring = build_querystring(dbi->countzone_q);\n\t\tbreak;\n\tcase LOOKUP:\n\t\tquerystring = build_querystring(dbi->lookup_q);\n\t\tbreak;\n\tdefault:\n\t\tdb->log(ISC_LOG_ERROR,\n\t\t\t\"Incorrect query flag passed to \"\n\t\t\t\"sqlite3_get_resultset\");\n\t\tresult = ISC_R_UNEXPECTED;\n\t\tgoto cleanup;\n\t}\n\n\tif (querystring == NULL) {\n\t\tresult = ISC_R_NOMEMORY;\n\t\tgoto cleanup;\n\t}\n\n\t/* output the full query string when debugging */\n\tdb->log(ISC_LOG_DEBUG(1), \"\\nQuery String: %s\\n\", querystring);\n\n\trs = malloc(sizeof(sqlite3_res_t));\n\tif (rs == NULL) {\n\t\tdb->log(ISC_LOG_ERROR, \"Failed to allocate result set\");\n\t\tresult = ISC_R_NOMEMORY;\n\t\tgoto cleanup;\n\t}\n\tmemset(rs, 0, sizeof(sqlite3_res_t));\n\n\tqres = sqlite3_get_table(dbi->dbconn, querystring, &rs->pazResult,\n\t\t\t\t &rs->pnRow, &rs->pnColumn, &rs->pzErrmsg);\n\tif (qres != SQLITE_OK) {\n\t\tdb->log(ISC_LOG_DEBUG(1), \"SQLite3 query failed; %s\",\n\t\t\trs->pzErrmsg != NULL ? rs->pzErrmsg : \"unknown error\");\n\t\tsqlite3_free(rs->pzErrmsg);\n\t\trs->pzErrmsg = NULL;\n\t\tresult = ISC_R_FAILURE;\n\t\tgoto cleanup;\n\t}\n\n\tresult = ISC_R_SUCCESS;\n\tif (query == COUNTZONE) {\n\t\tsqlite3_free_table(rs->pazResult);\n\t\tif (rs == NULL)\n\t\t\tresult = ISC_R_FAILURE;\n\t}\n\n\t*rsp = rs;\n\n cleanup:\n\tif (dbi == NULL)\n\t\treturn (ISC_R_FAILURE);\n\n\tif (dbi->zone != NULL) {\n\t\tfree(dbi->zone);\n\t\tdbi->zone = NULL;\n\t}\n\tif (dbi->record != NULL) {\n\t\tfree(dbi->record);\n\t\tdbi->record = NULL;\n\t}\n\tif (dbi->client != NULL) {\n\t\tfree(dbi->client);\n\t\tdbi->client = NULL;\n\t}\n\n\t/* release the lock so another thread can use this dbi */\n\t(void) dlz_mutex_unlock(&dbi->lock);\n\n\tif (querystring != NULL)\n\t\tfree(querystring);\n\n\treturn (result);\n}\n\n/*%\n * The processing of result sets for lookup and authority are\n * exactly the same.  So that functionality has been moved\n * into this function to minimize code.\n */\n\nchar **\nsqlite3_fetch_row(sqlite3_res_t *rs) {\n\tchar **retval = NULL;\n\tif (rs != NULL) {\n\t\tif (rs->pnRow > 0U && rs->curRow < rs->pnRow) {\n\t\t\tint index = (rs->curRow + 1) * rs->pnColumn;\n\t\t\tretval = &rs->pazResult[index];\n\t\t\trs->curRow++;\n\t\t}\n\t}\n\treturn (retval);\n}\n\nunsigned int\nsqlite3_num_fields(sqlite3_res_t *rs) {\n\tunsigned int retval = 0;\n\tif (rs != NULL)\n\t\tretval = rs->pnColumn;\n\treturn (retval);\n}\n\nunsigned int\nsqlite3_num_rows(sqlite3_res_t *rs) {\n\tunsigned int retval = 0;\n\tif (rs != NULL)\n\t\tretval = rs->pnRow;\n\treturn (retval);\n}\n\nvoid\nsqlite3_free_result(sqlite3_res_t *rs) {\n\tif (rs != NULL) {\n\t\tsqlite3_free_table(rs->pazResult);\n\t\tfree(rs);\n\t}\n}\n\nstatic isc_result_t\nsqlite3_process_rs(sqlite3_instance_t *db, dns_sdlzlookup_t *lookup,\n\t\t   sqlite3_res_t *rs)\n{\n\tisc_result_t result = ISC_R_NOTFOUND;\n\tchar **row;\n\tunsigned int fields;\n\tunsigned int i, j;\n\tchar *tmpString;\n\tchar *endp;\n\tint ttl;\n\n\trow = sqlite3_fetch_row(rs); \t /* get a row from the result set */\n\tfields = sqlite3_num_fields(rs); /* how many columns in result set */\n\twhile (row != NULL) {\n\t\tunsigned int len = 0;\n\n\t\tswitch(fields) {\n\t\tcase 1:\n\t\t\t/*\n\t\t\t * one column in rs, it's the data field.  use\n\t\t\t * default type of A record, and default TTL\n\t\t\t * of 86400\n\t\t\t */\n\t\t\tresult = db->putrr(lookup, \"a\", 86400, safeGet(row[0]));\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\t/*\n\t\t\t * two columns, data field, and data type.\n\t\t\t * use default TTL of 86400.\n\t\t\t */\n\t\t\tresult = db->putrr(lookup, safeGet(row[0]), 86400,\n\t\t\t\t\t   safeGet(row[1]));\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\t/*\n\t\t\t * three columns, all data no defaults.\n\t\t\t * convert text to int, make sure it worked\n\t\t\t * right.\n\t\t\t */\n\t\t\tttl = strtol(safeGet(row[0]), &endp, 10);\n\t\t\tif (*endp != '\\0' || ttl < 0) {\n\t\t\t\tdb->log(ISC_LOG_ERROR,\n\t\t\t\t\t\"SQLite3 module: TTL must be \"\n\t\t\t\t\t\"a postive number\");\n\t\t\t\treturn (ISC_R_FAILURE);\n\t\t\t}\n\n\t\t\tresult = db->putrr(lookup, safeGet(row[1]), ttl,\n\t\t\t\t\t\tsafeGet(row[2]));\n\t\t\tbreak;\n\t\tdefault:\n\t\t\t/*\n\t\t\t * more than 3 fields, concatenate the last\n\t\t\t * ones together.  figure out how long to make\n\t\t\t * string.\n\t\t\t */\n\t\t\tfor (j = 2; j < fields; j++)\n\t\t\t\tlen += strlen(safeGet(row[j])) + 1;\n\n\t\t\t/*\n\t\t\t * allocate string memory, allow for NULL to\n\t\t\t * term string\n\t\t\t */\n\t\t\ttmpString = malloc(len + 1);\n\t\t\tif (tmpString == NULL) {\n\t\t\t\tdb->log(ISC_LOG_ERROR,\n\t\t\t\t\t\"SQLite3 module: unable to allocate \"\n\t\t\t\t\t\"memory for temporary string\");\n\t\t\t\tsqlite3_free_result(rs);\n\t\t\t\treturn (ISC_R_FAILURE);\n\t\t\t}\n\n\t\t\tstrcpy(tmpString, safeGet(row[2]));\n\t\t\tfor (j = 3; j < fields; j++) {\n\t\t\t\tstrcat(tmpString, \" \");\n\t\t\t\tstrcat(tmpString, safeGet(row[j]));\n\t\t\t}\n\n\t\t\tttl = strtol(safeGet(row[0]), &endp, 10);\n\t\t\tif (*endp != '\\0' || ttl < 0) {\n\t\t\t\tdb->log(ISC_LOG_ERROR,\n\t\t\t\t\t\"SQLite3 module: TTL must be \"\n\t\t\t\t\t\"a postive number\");\n\t\t\t\tfree(tmpString);\n\t\t\t\treturn (ISC_R_FAILURE);\n\t\t\t}\n\n\t\t\tresult = db->putrr(lookup, safeGet(row[1]),\n\t\t\t\t\t   ttl, tmpString);\n\t\t\tfree(tmpString);\n\t\t}\n\n\t\tif (result != ISC_R_SUCCESS) {\n\t\t\tsqlite3_free_result(rs);\n\t\t\tdb->log(ISC_LOG_ERROR,\n\t\t\t\t\"putrr returned error: %d\", result);\n\t\t\treturn (ISC_R_FAILURE);\n\t\t}\n\n\t\trow = sqlite3_fetch_row(rs);\n\t}\n\n\tsqlite3_free_result(rs);\n\treturn (result);\n}\n\n/*\n * DLZ methods\n */\n\n/*% determine if the zone is supported by (in) the database */\nisc_result_t\ndlz_findzonedb(void *dbdata, const char *name,\n\t       dns_clientinfomethods_t *methods,\n\t       dns_clientinfo_t *clientinfo)\n{\n\tisc_result_t result;\n\tsqlite3_res_t *rs = NULL;\n\tsqlite3_uint64 rows;\n\tsqlite3_instance_t *db = (sqlite3_instance_t *)dbdata;\n\n\tUNUSED(methods);\n\tUNUSED(clientinfo);\n\n\tresult = sqlite3_get_resultset(name, NULL, NULL, FINDZONE, dbdata, &rs);\n\tif (result != ISC_R_SUCCESS || rs == NULL) {\n\t\tif (rs != NULL)\n\t\t\tsqlite3_free_result(rs);\n\n\t\tdb->log(ISC_LOG_ERROR,\n\t\t\t\"SQLite3 module: unable to return \"\n\t\t\t\"result set for FINDZONE query\");\n\n\t\treturn (ISC_R_FAILURE);\n\t}\n\n\t/*\n\t * if we returned any rows, the zone is supported.\n\t */\n\trows = sqlite3_num_rows(rs);\n\tsqlite3_free_result(rs);\n\tif (rows > 0) {\n\t\tsqlite3_get_resultset(name, NULL, NULL, COUNTZONE,\n\t\t\t\t      dbdata, NULL);\n\t\treturn (ISC_R_SUCCESS);\n\t}\n\n\treturn (ISC_R_NOTFOUND);\n}\n\n/*% Determine if the client is allowed to perform a zone transfer */\nisc_result_t\ndlz_allowzonexfr(void *dbdata, const char *name, const char *client) {\n\tisc_result_t result;\n\tsqlite3_instance_t *db = (sqlite3_instance_t *)dbdata;\n\tsqlite3_res_t *rs = NULL;\n\tsqlite3_uint64 rows;\n\n\t/* first check if the zone is supported by the database. */\n\tresult = dlz_findzonedb(dbdata, name, NULL, NULL);\n\tif (result != ISC_R_SUCCESS)\n\t\treturn (ISC_R_NOTFOUND);\n\n\t/*\n\t * if we get to this point we know the zone is supported by\n\t * the database the only questions now are is the zone\n\t * transfer is allowed for this client and did the config file\n\t * have an allow zone xfr query.\n\t */\n\tresult = sqlite3_get_resultset(name, NULL, client, ALLOWXFR,\n\t\t\t\t     dbdata, &rs);\n\tif (result == ISC_R_NOTIMPLEMENTED)\n\t\treturn (result);\n\n\tif (result != ISC_R_SUCCESS || rs == NULL) {\n\t\tif (rs != NULL)\n\t\t\tsqlite3_free_result(rs);\n\t\tdb->log(ISC_LOG_ERROR,\n\t\t\t\"SQLite3 module: unable to return \"\n\t\t\t\"result set for ALLOWXFR query\");\n\t\treturn (ISC_R_FAILURE);\n\t}\n\n\t/*\n\t * count how many rows in result set; if we returned any,\n\t * zone xfr is allowed.\n\t */\n\trows = sqlite3_num_rows(rs);\n\tsqlite3_free_result(rs);\n\tif (rows > 0)\n\t\treturn (ISC_R_SUCCESS);\n\n\treturn (ISC_R_NOPERM);\n}\n\n/*%\n * If the client is allowed to perform a zone transfer, the next order of\n * business is to get all the nodes in the zone, so bind can respond to the\n * query.\n */\nisc_result_t\ndlz_allnodes(const char *zone, void *dbdata, dns_sdlzallnodes_t *allnodes) {\n\tisc_result_t result;\n\tsqlite3_instance_t *db = (sqlite3_instance_t *)dbdata;\n\tsqlite3_res_t *rs = NULL;\n\tchar **row;\n\tunsigned int fields;\n\tunsigned int j;\n\tchar *tmpString;\n\tchar *endp;\n\tint ttl;\n\n\tresult = sqlite3_get_resultset(zone, NULL, NULL, ALLNODES, dbdata, &rs);\n\tif (result == ISC_R_NOTIMPLEMENTED)\n\t\treturn (result);\n\n\t/* if we didn't get a result set, log an err msg. */\n\tif (result != ISC_R_SUCCESS) {\n\t\tdb->log(ISC_LOG_ERROR,\n\t\t\t\"SQLite3 module: unable to return \"\n\t\t\t\"result set for all nodes query\");\n\t\tgoto cleanup;\n\t}\n\n\tresult = ISC_R_NOTFOUND;\n\n\tfields = sqlite3_num_fields(rs);\n\trow = sqlite3_fetch_row(rs);\n\twhile (row != NULL) {\n\t\tif (fields < 4) {\n\t\t\tdb->log(ISC_LOG_ERROR,\n\t\t\t\t\"SQLite3 module: too few fields returned \"\n\t\t\t\t\"by ALLNODES query\");\n\t\t\tresult = ISC_R_FAILURE;\n\t\t\tgoto cleanup;\n\t\t}\n\n\t\tttl = strtol(safeGet(row[0]), &endp, 10);\n\t\tif (*endp != '\\0' || ttl < 0) {\n\t\t\tdb->log(ISC_LOG_ERROR,\n\t\t\t\t\"SQLite3 module: TTL must be \"\n\t\t\t\t\"a postive number\");\n\t\t\tresult = ISC_R_FAILURE;\n\t\t\tgoto cleanup;\n\t\t}\n\n\t\tif (fields == 4) {\n\t\t\tresult = db->putnamedrr(allnodes, safeGet(row[2]),\n\t\t\t\t\t\tsafeGet(row[1]), ttl,\n\t\t\t\t\t\tsafeGet(row[3]));\n\t\t} else {\n\t\t\tunsigned int len = 0;\n\n\t\t\t/*\n\t\t\t * more than 4 fields, concatenate the last\n\t\t\t * ones together.\n\t\t\t */\n\t\t\tfor (j = 3; j < fields; j++)\n\t\t\t\tlen += strlen(safeGet(row[j])) + 1;\n\n\t\t\ttmpString = malloc(len + 1);\n\t\t\tif (tmpString == NULL) {\n\t\t\t\tdb->log(ISC_LOG_ERROR,\n\t\t\t\t\t\"SQLite3 module: unable to allocate \"\n\t\t\t\t\t\"memory for temporary string\");\n\t\t\t\tresult = ISC_R_FAILURE;\n\t\t\t\tgoto cleanup;\n\t\t\t}\n\n\t\t\tstrcpy(tmpString, safeGet(row[3]));\n\t\t\tfor (j = 4; j < fields; j++) {\n\t\t\t\tstrcat(tmpString, \" \");\n\t\t\t\tstrcat(tmpString, safeGet(row[j]));\n\t\t\t}\n\n\t\t\tresult = db->putnamedrr(allnodes, safeGet(row[2]),\n\t\t\t\t\t\tsafeGet(row[1]),\n\t\t\t\t\t\tttl, tmpString);\n\t\t\tfree(tmpString);\n\t\t}\n\n\t\tif (result != ISC_R_SUCCESS) {\n\t\t\tdb->log(ISC_LOG_ERROR,\n\t\t\t\t\"putnamedrr returned error: %s\", result);\n\t\t\tresult = ISC_R_FAILURE;\n\t\t\tbreak;\n\t\t}\n\n\t\trow = sqlite3_fetch_row(rs);\n\t}\n\n cleanup:\n\tif (rs != NULL)\n\t\tsqlite3_free_result(rs);\n\n\treturn (result);\n}\n\n/*%\n * If the lookup function does not return SOA or NS records for the zone,\n * use this function to get that information for named.\n */\nisc_result_t\ndlz_authority(const char *zone, void *dbdata, dns_sdlzlookup_t *lookup) {\n\tisc_result_t result;\n\tsqlite3_res_t *rs = NULL;\n\tsqlite3_instance_t *db = (sqlite3_instance_t *) dbdata;\n\n\tresult = sqlite3_get_resultset(zone, NULL, NULL, AUTHORITY,\n\t\t\t\t       dbdata, &rs);\n\tif (result == ISC_R_NOTIMPLEMENTED)\n\t\treturn (result);\n\n\tif (result != ISC_R_SUCCESS) {\n\t\tif (rs != NULL)\n\t\t\tsqlite3_free_result(rs);\n\t\tdb->log(ISC_LOG_ERROR,\n\t\t\t\"SQLite3 module: unable to return \"\n\t\t\t\"result set for AUTHORITY query\");\n\t\treturn (ISC_R_FAILURE);\n\t}\n\n\t/*\n\t * lookup and authority result sets are processed in the same\n\t * manner: sqlite3_process_rs does the job for both functions.\n\t */\n\treturn (sqlite3_process_rs(db, lookup, rs));\n}\n\n/*% If zone is supported, lookup up a (or multiple) record(s) in it */\nisc_result_t\ndlz_lookup(const char *zone, const char *name,\n\t   void *dbdata, dns_sdlzlookup_t *lookup,\n\t   dns_clientinfomethods_t *methods,\n\t   dns_clientinfo_t *clientinfo)\n{\n\tisc_result_t result;\n\tsqlite3_res_t *rs = NULL;\n\tsqlite3_instance_t *db = (sqlite3_instance_t *) dbdata;\n\n\tUNUSED(methods);\n\tUNUSED(clientinfo);\n\n\tresult = sqlite3_get_resultset(zone, name, NULL, LOOKUP, dbdata, &rs);\n\n\t/* if we didn't get a result set, log an err msg. */\n\tif (result != ISC_R_SUCCESS) {\n\t\tif (rs != NULL)\n\t\t\tsqlite3_free_result(rs);\n\t\tdb->log(ISC_LOG_ERROR,\n\t\t\t\"SQLite3 module: unable to return \"\n\t\t\t\"result set for LOOKUP query\");\n\t\treturn (ISC_R_FAILURE);\n\t}\n\n\t/*\n\t * lookup and authority result sets are processed in the same\n\t * manner: sqlite3_process_rs does the job for both functions.\n\t */\n\treturn (sqlite3_process_rs(db, lookup, rs));\n}\n\n/*%\n * Create an instance of the module.\n */\nisc_result_t\ndlz_create(const char *dlzname, unsigned int argc, char *argv[],\n\t   void **dbdata, ...)\n{\n\tisc_result_t result = ISC_R_FAILURE;\n\tsqlite3_instance_t *s3 = NULL;\n\tdbinstance_t *dbi = NULL;\n\tsqlite3 *dbc = NULL;\n\tchar *tmp = NULL;\n\tchar *endp;\n\tconst char *helper_name;\n#if SQLITE3_VERSION_ID >= 50000\n        my_bool auto_reconnect = 1;\n#endif\n#if PTHREADS\n\tint dbcount;\n\tint i, ret;\n#endif /* PTHREADS */\n\tva_list ap;\n\n\tUNUSED(dlzname);\n\n\t/* allocate memory for SQLite3 instance */\n\ts3 = calloc(1, sizeof(sqlite3_instance_t));\n\tif (s3 == NULL)\n\t\treturn (ISC_R_NOMEMORY);\n\tmemset(s3, 0, sizeof(sqlite3_instance_t));\n\n\t/* Fill in the helper functions */\n\tva_start(ap, dbdata);\n\twhile ((helper_name = va_arg(ap, const char*)) != NULL)\n\t\tb9_add_helper(s3, helper_name, va_arg(ap, void*));\n\tva_end(ap);\n\n#if PTHREADS\n\t/* if debugging, let user know we are multithreaded. */\n\ts3->log(ISC_LOG_DEBUG(1), \"SQLite3 module: running multithreaded\");\n#else /* PTHREADS */\n\t/* if debugging, let user know we are single threaded. */\n\ts3->log(ISC_LOG_DEBUG(1), \"SQLite3 module: running single threaded\");\n#endif /* PTHREADS */\n\n\t/* verify we have at least 4 arg's passed to the module */\n\tif (argc < 4) {\n\t\ts3->log(ISC_LOG_ERROR,\n\t\t\t   \"SQLite3 module requires \"\n\t\t\t   \"at least 4 command line args.\");\n\t\treturn (ISC_R_FAILURE);\n\t}\n\n\t/* no more than 8 arg's should be passed to the module */\n\tif (argc > 8) {\n\t\ts3->log(ISC_LOG_ERROR,\n\t\t\t   \"SQLite3 module cannot accept \"\n\t\t\t   \"more than 8 command line args.\");\n\t\treturn (ISC_R_FAILURE);\n\t}\n\n\t/* get db name - required */\n\ts3->dbname = get_parameter_value(argv[1], \"dbname=\");\n\tif (s3->dbname == NULL) {\n\t\ts3->log(ISC_LOG_ERROR,\n\t\t\t   \"SQLite3 module requires a dbname parameter.\");\n\t\tresult = ISC_R_FAILURE;\n\t\tgoto cleanup;\n\t}\n\n#if PTHREADS\n\t/* multithreaded build can have multiple DB connections */\n\ttmp = get_parameter_value(argv[1], \"threads=\");\n\tif (tmp == NULL)\n\t\tdbcount = 1;\n\telse {\n\t\tdbcount = strtol(tmp, &endp, 10);\n\t\tif (*endp != '\\0' || dbcount < 1) {\n\t\t\ts3->log(ISC_LOG_ERROR,\n\t\t\t\t   \"SQLite3 module: database connection count \"\n\t\t\t\t   \"must be positive.\");\n\t\t\tfree(tmp);\n\t\t\tresult = ISC_R_FAILURE;\n\t\t\tgoto cleanup;\n\t\t}\n\t\tfree(tmp);\n\t}\n\n\t/* allocate memory for database connection list */\n\ts3->db = calloc(1, sizeof(db_list_t));\n\tif (s3->db == NULL) {\n\t\tresult = ISC_R_NOMEMORY;\n\t\tgoto cleanup;\n\t}\n\n\t/* initialize DB connection list */\n\tDLZ_LIST_INIT(*(s3->db));\n\n\t/*\n\t * create the appropriate number of database instances (DBI)\n\t * append each new DBI to the end of the list\n\t */\n\tfor (i = 0; i < dbcount; i++) {\n#endif /* PTHREADS */\n\t\tswitch(argc) {\n\t\tcase 4:\n\t\t\tresult = build_dbinstance(NULL, NULL, NULL,\n\t\t\t\t\t\t  argv[2], argv[3], NULL,\n\t\t\t\t\t\t  &dbi, s3->log);\n\t\t\tbreak;\n\t\tcase 5:\n\t\t\tresult = build_dbinstance(NULL, NULL, argv[4],\n\t\t\t\t\t\t  argv[2], argv[3], NULL,\n\t\t\t\t\t\t  &dbi, s3->log);\n\t\t\tbreak;\n\t\tcase 6:\n\t\t\tresult = build_dbinstance(argv[5], NULL, argv[4],\n\t\t\t\t\t\t  argv[2], argv[3], NULL,\n\t\t\t\t\t\t  &dbi, s3->log);\n\t\t\tbreak;\n\t\tcase 7:\n\t\t\tresult = build_dbinstance(argv[5], argv[6], argv[4],\n\t\t\t\t\t\t  argv[2], argv[3], NULL,\n\t\t\t\t\t\t  &dbi, s3->log);\n\t\t\tbreak;\n\t\tcase 8:\n\t\t\tresult = build_dbinstance(argv[5], argv[6], argv[4],\n\t\t\t\t\t\t  argv[2], argv[3], argv[7],\n\t\t\t\t\t\t  &dbi, s3->log);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tresult = ISC_R_FAILURE;\n\t\t}\n\n\n\t\tif (result != ISC_R_SUCCESS) {\n\t\t\ts3->log(ISC_LOG_ERROR,\n\t\t\t\t   \"SQLite3 module: could not create \"\n\t\t\t\t   \"database instance object.\");\n\t\t\tresult = ISC_R_FAILURE;\n\t\t\tgoto cleanup;\n\t\t}\n\n\t\t/* create and set db connection */\n\t\tret = sqlite3_initialize();\n\t\tif (ret != SQLITE_OK) {\n\t\t\ts3->log(ISC_LOG_ERROR,\n\t\t\t\t   \"SQLite3 module: could not \"\n\t\t\t\t   \"initialize database object.\");\n\t\t\tresult = ISC_R_FAILURE;\n\t\t\tgoto cleanup;\n\t\t}\n\n\t\tret = sqlite3_open(s3->dbname, &dbc);\n\t\tif (ret != SQLITE_OK) {\n\t\t\ts3->log(ISC_LOG_ERROR,\n\t\t\t\t   \"SQLite3 module: could not \"\n\t\t\t\t   \"open '%s'.\", s3->dbname);\n\t\t\tresult = ISC_R_FAILURE;\n\t\t\tgoto cleanup;\n\t\t}\n\n#if PTHREADS\n\t\t/* when multithreaded, build a list of DBI's */\n\t\tDLZ_LINK_INIT(dbi, link);\n\t\tDLZ_LIST_APPEND(*(s3->db), dbi, link);\n#else\n\t\t/*\n\t\t * when single threaded, hold onto the one connection\n\t\t * instance.\n\t\t */\n\t\ts3->db = dbi;\n#endif\n\n\t\tdbi->dbconn = dbc;\n\t\tdbc = NULL;\n#if PTHREADS\n\t\t/* set DBI = null for next loop through. */\n\t\tdbi = NULL;\n\t}\n#endif /* PTHREADS */\n\n\t*dbdata = s3;\n\treturn (ISC_R_SUCCESS);\n\n cleanup:\n\tdlz_destroy(s3);\n\n\treturn (result);\n}\n\n/*%\n * Destroy the module.\n */\nvoid\ndlz_destroy(void *dbdata) {\n\tsqlite3_instance_t *db = (sqlite3_instance_t *)dbdata;\n#if PTHREADS\n\t/* cleanup the list of DBI's */\n\tif (db->db != NULL)\n\t\tsqlite3_destroy_dblist((db_list_t *)(db->db));\n#else /* PTHREADS */\n\tsqlite3_destroy(db);\n#endif /* PTHREADS */\n\n\tif (db->dbname != NULL)\n\t\tfree(db->dbname);\n}\n\n/*\n * Return the version of the API\n */\nint\ndlz_version(unsigned int *flags) {\n\t*flags |= (DNS_SDLZFLAG_RELATIVEOWNER |\n\t\t   DNS_SDLZFLAG_RELATIVERDATA |\n\t\t   DNS_SDLZFLAG_THREADSAFE);\n\treturn (DLZ_DLOPEN_VERSION);\n}\n\n/*\n * Register a helper function from the bind9 dlz_dlopen driver\n */\nstatic void\nb9_add_helper(sqlite3_instance_t *db, const char *helper_name, void *ptr) {\n\tif (strcmp(helper_name, \"log\") == 0)\n\t\tdb->log = (log_t *)ptr;\n\tif (strcmp(helper_name, \"putrr\") == 0)\n\t\tdb->putrr = (dns_sdlz_putrr_t *)ptr;\n\tif (strcmp(helper_name, \"putnamedrr\") == 0)\n\t\tdb->putnamedrr = (dns_sdlz_putnamedrr_t *)ptr;\n\tif (strcmp(helper_name, \"writeable_zone\") == 0)\n\t\tdb->writeable_zone = (dns_dlz_writeablezone_t *)ptr;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/contrib/dlz/modules/sqlite3/testing/named.conf": "/*\n * Copyright (C) 2013  Internet Systems Consortium, Inc. (\"ISC\")\n *\n * Permission to use, copy, modify, and/or distribute this software for any\n * purpose with or without fee is hereby granted, provided that the above\n * copyright notice and this permission notice appear in all copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND ISC DISCLAIMS ALL WARRANTIES WITH\n * REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n * AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,\n * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\n * LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE\n * OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\n * PERFORMANCE OF THIS SOFTWARE.\n */\n\ncontrols { };\n\noptions {\n\tdirectory \".\";\n\tport 5300;\n\tpid-file \"named.pid\";\n\tsession-keyfile \"session.key\";\n\tlisten-on { any; };\n\tlisten-on-v6 { none; };\n\trecursion no;\n};\n\nkey rndc_key {\n\tsecret \"1234abcd8765\";\n\talgorithm hmac-md5;\n};\n\ncontrols {\n\tinet 127.0.0.1 port 9953 allow { any; } keys { rndc_key; };\n};\n\ndlz \"test\" {\n\tdatabase \"dlopen ../dlz_sqlite3_dynamic.so\n           {\n             dbname=BindDB threads=2\n           }\n           {SELECT zone FROM records WHERE zone = '$zone$'}\n           {SELECT ttl, type, mx_priority, CASE WHEN type = 'TXT' THEN '\\\"' || data || '\\\"' ELSE data END AS data FROM records WHERE zone = '$zone$' AND host = '$record$' AND type <> 'SOA' AND type <> 'NS'}\n           {SELECT ttl, type, data, primary_ns, resp_contact, serial, refresh, retry, expire, minimum FROM records WHERE zone = '$zone$' AND (type = 'SOA' OR type='NS')}\n           {SELECT ttl, type, host, mx_priority, CASE WHEN type = 'TXT' THEN '\\\"' || data || '\\\"' ELSE data END AS data, resp_contact, serial, refresh, retry, expire, minimum FROM records WHERE zone = '$zone$' AND type <> 'SOA' AND type <> 'NS'}\n           {SELECT zone FROM xfr where zone='$zone$' AND client = '$client$'}\";\n};\n",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/contrib/dlz/modules/mysqldyn/dlz_mysqldyn_mod.c": "/*\n * Copyright (C) 2014 Maui Systems Ltd, Scotland, contact@maui-systems.co.uk.\n *\n * Permission to use, copy, modify, and distribute this software for any\n * purpose with or without fee is hereby granted, provided that the\n * above copyright notice and this permission notice appear in all\n * copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND MAUI SYSTEMS LTD DISCLAIMS ALL\n * WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES\n * OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL MAUI SYSTEMS LTD  BE\n * LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR\n * ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,\n * WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,\n * ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS\n * SOFTWARE.\n */\n\n/*\n * Copyright (C) 2011,2014  Internet Systems Consortium, Inc. (\"ISC\")\n *\n * Permission to use, copy, modify, and/or distribute this software for any\n * purpose with or without fee is hereby granted, provided that the above\n * copyright notice and this permission notice appear in all copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND ISC DISCLAIMS ALL WARRANTIES WITH\n * REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n * AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,\n * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\n * LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE\n * OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\n * PERFORMANCE OF THIS SOFTWARE.\n */\n\n/*\n * BIND 9 DLZ MySQL module with support for dynamic DNS (DDNS)\n *\n * Adapted from code contributed by Marty Lee, Maui Systems Ltd.\n *\n * See README for database schema and usage details.\n */\n\n#include <stdbool.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdarg.h>\n#include <unistd.h>\n#include <sys/socket.h>\n#include <sys/types.h>\n#include <netinet/in.h>\n#include <inttypes.h>\n#include <pthread.h>\n#include <netdb.h>\n#include <ifaddrs.h>\n\n#include <mysql/mysql.h>\n#include <mysql/errmsg.h>\n\n#include <dlz_minimal.h>\n#include <dlz_list.h>\n#include <dlz_pthread.h>\n\n/*\n * The SQL queries that will be used for lookups and updates are defined\n * here.  They will be processed into queries by the build_query()\n * function.\n *\n * NOTE: Despite appearances, these do NOT use printf-style formatting.\n * \"%s\", with no modifiers, is the only supported directive.\n */\n\n/*\n * Get the NS RRset for a zone\n * Arguments: zone-name\n */\n#define Q_GETNS \\\n\t\"SELECT d.data FROM ZoneData d, Zones z \" \\\n\t\"WHERE UPPER(d.type) = 'NS' AND LOWER(z.domain) = LOWER('%s') \" \\\n\t\"AND z.id = d.zone_id\"\n\n/*\n * Get a list of zones (ignoring writable or not)\n * Arguments: (none)\n */\n#define Q_GETZONES \"SELECT LOWER(domain), serial FROM Zones\"\n\n/*\n * Find a specific zone\n * Arguments: zone-name\n */\n#define Q_FINDZONE \\\n\t\"SELECT id FROM Zones WHERE LOWER(domain) = LOWER('%s')\"\n\n/*\n * Get SOA data from zone apex\n * Arguments: zone-name\n */\n#define Q_GETSOA \\\n\t\"SELECT host, admin, serial, refresh, retry, expire, minimum, ttl \" \\\n\t\"FROM Zones WHERE LOWER(domain) = LOWER('%s')\"\n\n/*\n * Get other data from zone apex\n * Arguments: zone-name, zone-name (repeated)\n */\n#define Q_GETAPEX \\\n\t\"SELECT d.type, d.data, d.ttl FROM ZoneData d, Zones z \" \\\n\t\"WHERE LOWER(z.domain) = LOWER('%s') AND z.id = d.zone_id \" \\\n\t\"AND LOWER(d.name) IN (LOWER('%s'), '', '@') \"\\\n\t\"ORDER BY UPPER(d.type) ASC\"\n\n/*\n * Get data from non-apex nodes\n * Arguments: zone-name, node-name (relative to zone name)\n */\n#define Q_GETNODE \\\n\t\"SELECT d.type, d.data, d.ttl FROM ZoneData d, Zones z \" \\\n\t\"WHERE LOWER(z.domain) = LOWER('%s') AND z.id = d.zone_id \" \\\n\t\"AND LOWER(d.name) = LOWER('%s') \" \\\n\t\"ORDER BY UPPER(d.type) ASC\"\n\n/*\n * Get all data from a zone, for AXFR\n * Arguments: zone-name\n */\n#define Q_GETALL \\\n\t\"SELECT d.name, d.type, d.data, d.ttl FROM ZoneData d, Zones z \" \\\n\t\"WHERE LOWER(z.domain) = LOWER('%s') AND z.id = d.zone_id\"\n\n/*\n * Get SOA serial number for a zone.\n * Arguments: zone-name\n */\n#define Q_GETSERIAL \\\n\t\"SELECT serial FROM Zones WHERE domain = '%s'\"\n\n/*\n * Determine whether a zone is writeable, and if so, retrieve zone_id\n * Arguments: zone-name\n */\n#define Q_WRITEABLE \\\n\t\"SELECT id FROM Zones WHERE \" \\\n\t\"LOWER(domain) = LOWER('%s') AND writeable = 1\"\n\n/*\n * Insert data into zone (other than SOA)\n * Arguments: zone-id (from Q_WRITEABLE), node-name (relative to zone-name),\n * \t      rrtype, rdata text, TTL (in text format)\n */\n#define I_DATA \\\n\t\"INSERT INTO ZoneData (zone_id, name, type, data, ttl) \" \\\n\t\"VALUES (%s, LOWER('%s'), UPPER('%s'), '%s', %s)\"\n\n/*\n * Update SOA serial number for a zone\n * Arguments: new serial number (in text format), zone-id (from Q_WRITEABLE)\n */\n#define U_SERIAL \\\n\t\"UPDATE Zones SET serial = %s WHERE id = %s\"\n\n/*\n * Delete a specific record (non-SOA) from a zone\n *\n * Arguments: node-name (relative to zone-name), zone-id (from Q_WRITEABLE),\n * \t      rrtype, rdata text, TTL (in text format).\n */\n#define D_RECORD \\\n\t\"DELETE FROM ZoneData WHERE zone_id = %s AND \" \\\n\t\"LOWER(name) = LOWER('%s') AND UPPER(type) = UPPER('%s') AND \" \\\n\t\"data = '%s' AND ttl = %s\"\n\n/*\n * Delete an entire rrset from a zone\n * Arguments: node-name (relative to zone-name), zone-id (from Q_WRITEABLE),\n * \t      rrtype.\n */\n#define D_RRSET \\\n\t\"DELETE FROM ZoneData WHERE zone_id = %s AND \" \\\n\t\"LOWER(name) = LOWER('%s') AND UPPER(type) = UPPER('%s')\"\n\n/*\n * Number of concurrent database connections we support\n * - equivalent to maxmium number of concurrent transactions\n *   that can be 'in-flight' + 1\n */\n#define MAX_DBI 16\n\ntypedef struct mysql_record {\n\tchar zone[255];\n\tchar name[100];\n\tchar type[10];\n\tchar data[200];\n\tchar ttl[10];\n} mysql_record_t;\n\ntypedef struct mysql_instance {\n\tint id;\n\tMYSQL *sock;\n\tint connected;\n\tdlz_mutex_t mutex;\n} mysql_instance_t;\n\ntypedef struct mysql_transaction mysql_transaction_t;\nstruct mysql_transaction {\n\tchar *zone;\n\tchar *zone_id;\n\tmysql_instance_t *dbi;\n\tmysql_transaction_t *next;\n};\n\ntypedef struct mysql_data {\n\tint debug;\n\n\t/*\n\t * Database connection details\n\t */\n\tchar *db_name;\n\tchar *db_host;\n\tchar *db_user;\n\tchar *db_pass;\n\n\t/*\n\t * Database structures\n\t */\n\tmysql_instance_t db[MAX_DBI];\n\n\t/*\n\t * Transactions\n\t */\n\tmysql_transaction_t *transactions;\n\n\t/*\n\t * Mutex for transactions\n\t */\n\tdlz_mutex_t tx_mutex;\n\n\t/* Helper functions from the dlz_dlopen driver */\n\tlog_t *log;\n\tdns_sdlz_putrr_t *putrr;\n\tdns_sdlz_putnamedrr_t *putnamedrr;\n\tdns_dlz_writeablezone_t *writeable_zone;\n} mysql_data_t;\n\ntypedef struct mysql_arg mysql_arg_t;\ntypedef DLZ_LIST(mysql_arg_t) mysql_arglist_t;\nstruct mysql_arg {\n\tchar *arg;\n\tDLZ_LINK(mysql_arg_t) link;\n};\n\nstatic const char *modname = \"dlz_mysqldyn\";\n\n/*\n * Local functions\n */\nstatic bool\ndb_connect(mysql_data_t *state, mysql_instance_t *dbi) {\n\tMYSQL *conn;\n\t/*\n\t * Make sure this thread has been through 'init'\n\t */\n\tmysql_thread_init();\n\n\tif (dbi->connected)\n\t\treturn (true);\n\n\tif (state->log != NULL)\n\t\tstate->log(ISC_LOG_INFO, \"%s: init connection %d \",\n\t\t\t   modname, dbi->id);\n\n\tconn = mysql_real_connect(dbi->sock, state->db_host,\n\t\t\t\t  state->db_user, state->db_pass,\n\t\t\t\t  state->db_name, 0, NULL,\n\t\t\t\t  CLIENT_REMEMBER_OPTIONS);\n\tif (conn == NULL) {\n\t\tif (state->log != NULL)\n\t\t\tstate->log(ISC_LOG_ERROR,\n\t\t\t\t   \"%s: database connection failed: %s\",\n\t\t\t\t   modname, mysql_error(dbi->sock));\n\n\t\tdlz_mutex_unlock(&dbi->mutex);\n\t\treturn (false);\n\t}\n\n\tdbi->connected = 1;\n\treturn (true);\n}\n\nstatic mysql_instance_t *\nget_dbi(mysql_data_t *state) {\n\tint i;\n\n\t/*\n\t * Find an available dbi\n\t */\n\tfor (i = 0; i < MAX_DBI; i++) {\n\t\tif (dlz_mutex_trylock(&state->db[i].mutex) == 0)\n\t\t\tbreak;\n\t}\n\n\tif (i == MAX_DBI) {\n\t\tif (state->debug && state->log != NULL)\n\t\t\tstate->log(ISC_LOG_ERROR,\n\t\t\t\t   \"%s: No available connections\", modname);\n\t\treturn (NULL);\n\t}\n\treturn (&state->db[i]);\n}\n\n/*\n * Allocate memory and store an escaped, sanitized version\n * of string 'original'\n */\nstatic char *\nsanitize(mysql_instance_t *dbi, const char *original) {\n\tchar *s;\n\n\tif (original == NULL)\n\t\treturn (NULL);\n\n\ts = (char *) malloc((strlen(original) * 2) + 1);\n\tif (s != NULL) {\n\t\tmemset(s, 0, (strlen(original) * 2) + 1);\n\n\t\tmysql_real_escape_string(dbi->sock, s, original,\n\t\t\t\t\t strlen(original));\n\t}\n\n\treturn (s);\n}\n\n/*\n * Append the string pointed to by 's' to the argument list 'arglist',\n * and add the string length to the running total pointed to by 'len'.\n */\nstatic isc_result_t\nadditem(mysql_arglist_t *arglist, char **s, size_t *len) {\n\tmysql_arg_t *item;\n\n\titem = malloc(sizeof(*item));\n\tif (item == NULL)\n\t\treturn (ISC_R_NOMEMORY);\n\n\tDLZ_LINK_INIT(item, link);\n\titem->arg = *s;\n\t*len += strlen(*s);\n\tDLZ_LIST_APPEND(*arglist, item, link);\n\t*s = NULL;\n\n\treturn (ISC_R_SUCCESS);\n}\n\n/*\n * Construct a query string using a variable number of arguments, and\n * save it into newly allocated memory.\n *\n * NOTE: 'command' resembles a printf-style format string, but ONLY\n * supports the \"%s\" directive with no modifiers of any kind.\n *\n * If 'dbi' is NULL, we attempt to get a temporary database connection;\n * otherwise we use the existing one.\n */\nstatic char *\nbuild_query(mysql_data_t *state, mysql_instance_t *dbi,\n\t    const char *command, ...)\n{\n\tisc_result_t result;\n\tbool localdbi = false;\n\tmysql_arglist_t arglist;\n\tmysql_arg_t *item;\n\tchar *p, *q, *tmp = NULL, *querystr = NULL;\n\tchar *query = NULL;\n\tsize_t len = 0;\n\tva_list ap1;\n\n\t/* Get a DB instance if needed */\n\tif (dbi == NULL) {\n\t\tdbi = get_dbi(state);\n\t\tif (dbi == NULL)\n\t\t\treturn (NULL);\n\t\tlocaldbi = true;\n\t}\n\n\t/* Make sure this instance is connected */\n\tif (!db_connect(state, dbi))\n\t\tgoto fail;\n\n\tva_start(ap1, command);\n\tDLZ_LIST_INIT(arglist);\n\tq = querystr = strdup(command);\n\tif (querystr == NULL)\n\t\tgoto fail;\n\n\tfor (;;) {\n\t\tif (*q == '\\0')\n\t\t\tbreak;\n\n\t\tp = strstr(q, \"%s\");\n\t\tif (p != NULL) {\n\t\t\t*p = '\\0';\n\t\t\ttmp = strdup(q);\n\t\t\tif (tmp == NULL)\n\t\t\t\tgoto fail;\n\n\t\t\tresult = additem(&arglist, &tmp, &len);\n\t\t\tif (result != ISC_R_SUCCESS)\n\t\t\t\tgoto fail;\n\n\t\t\ttmp = sanitize(dbi, va_arg(ap1, const char *));\n\t\t\tif (tmp == NULL)\n\t\t\t\tgoto fail;\n\n\t\t\tresult = additem(&arglist, &tmp, &len);\n\t\t\tif (result != ISC_R_SUCCESS)\n\t\t\t\tgoto fail;\n\n\t\t\tq = p + 2;\n\t\t} else {\n\t\t\ttmp = strdup(q);\n\t\t\tif (tmp == NULL)\n\t\t\t\tgoto fail;\n\n\t\t\tresult = additem(&arglist, &tmp, &len);\n\t\t\tif (result != ISC_R_SUCCESS)\n\t\t\t\tgoto fail;\n\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (len == 0)\n\t\tgoto fail;\n\n\tquery = malloc(len + 1);\n\tif (query == NULL)\n\t\tgoto fail;\n\n\t*query = '\\0';\n\tfor (item = DLZ_LIST_HEAD(arglist);\n\t     item != NULL;\n\t     item = DLZ_LIST_NEXT(item, link))\n\t\tif (item->arg != NULL)\n\t\t\tstrcat(query, item->arg);\n\n fail:\n\tva_end(ap1);\n\n\tfor (item = DLZ_LIST_HEAD(arglist);\n\t     item != NULL;\n\t     item = DLZ_LIST_NEXT(item, link))\n\t{\n\t\tif (item->arg != NULL)\n\t\t\tfree(item->arg);\n\t\tfree(item);\n\t}\n\n\tif (tmp != NULL)\n\t\tfree(tmp);\n\tif (querystr != NULL)\n\t\tfree (querystr);\n\n\tif (dbi != NULL && localdbi)\n\t\tdlz_mutex_unlock(&dbi->mutex);\n\n\treturn (query);\n}\n\n/* Does this name end in a dot? */\nstatic bool\nisrelative(const char *s) {\n\tif (s == NULL || s[strlen(s) - 1] == '.')\n\t\treturn (false);\n\treturn (true);\n}\n\n/* Return a dot if 's' doesn't already end with one */\nstatic inline const char *\ndot(const char *s) {\n\treturn (isrelative(s) ? \".\" : \"\");\n}\n\n/*\n * Generate a full hostname from a (presumably relative) name 'name'\n * and a zone name 'zone'; store the result in 'dest' (which must have\n * enough space).\n */\nstatic void\nfqhn(const char *name, const char *zone, char *dest) {\n\tif (dest == NULL)\n\t\treturn;\n\n\tif (strlen(name) == 0 || strcmp(name, \"@\") == 0)\n\t\tsprintf(dest, \"%s%s\", zone, dot(zone));\n\telse {\n\t\tif (isrelative(name))\n\t\t\tsprintf(dest, \"%s.%s%s\", name, zone, dot(zone));\n\t\telse\n\t\t\tstrcpy(dest, name);\n\t}\n}\n\n/*\n * Names are stored in relative form in ZoneData; this function\n * removes labels matching 'zone' from the end of 'name'.\n */\nstatic char *\nrelname(const char *name, const char *zone) {\n\tsize_t nlen, zlen;\n\tconst char *p;\n\tchar *new;\n\n\tnew = (char *) malloc(strlen(name) + 1);\n\tif (new == NULL)\n\t\treturn (NULL);\n\n\tnlen = strlen(name);\n\tzlen = strlen(zone);\n\n\tif (nlen < zlen) {\n\t\tstrcpy(new, name);\n\t\treturn (new);\n\t} else if (nlen == zlen || strcasecmp(name, zone) == 0) {\n\t\tstrcpy(new, \"@\");\n\t\treturn (new);\n\t}\n\n\tp = name + nlen - zlen;\n\tif (strcasecmp(p, zone) != 0 &&\n\t    (zone[zlen - 1] != '.' ||\n\t     strncasecmp(p, zone, zlen - 1) != 0))\n\t{\n\t\tstrcpy(new, name);\n\t\treturn (new);\n\t}\n\n\tstrncpy(new, name, nlen - zlen);\n\tnew[nlen - zlen - 1] = '\\0';\n\treturn (new);\n}\n\nstatic isc_result_t\nvalidate_txn(mysql_data_t *state, mysql_transaction_t *txn) {\n\tisc_result_t result = ISC_R_FAILURE;\n\tmysql_transaction_t *txp;\n\n\tdlz_mutex_lock(&state->tx_mutex);\n\tfor (txp = state->transactions; txp != NULL; txp = txp->next) {\n\t\tif (txn == txp) {\n\t\t\tresult = ISC_R_SUCCESS;\n\t\t\tbreak;\n\t\t}\n\t}\n\tdlz_mutex_unlock(&state->tx_mutex);\n\n\tif (result != ISC_R_SUCCESS && state->log != NULL)\n\t\tstate->log(ISC_LOG_ERROR, \"%s: invalid txn %x\", modname, txn);\n\n\treturn (result);\n}\n\nstatic isc_result_t\ndb_execute(mysql_data_t *state, mysql_instance_t *dbi, const char *query) {\n\tint ret;\n\n\t/* Make sure this instance is connected.  */\n\tif (!db_connect(state, dbi))\n\t\treturn (ISC_R_FAILURE);\n\n\tret = mysql_real_query(dbi->sock, query, strlen(query));\n\tif (ret != 0) {\n\t\tif (state->debug && state->log != NULL)\n\t\t\tstate->log(ISC_LOG_ERROR,\n\t\t\t\t   \"%s: query '%s' failed: %s\",\n\t\t\t\t   modname, query, mysql_error(dbi->sock));\n\t\treturn (ISC_R_FAILURE);\n\t}\n\n\tif (state->debug && state->log != NULL)\n\t\tstate->log(ISC_LOG_INFO, \"%s: execute(%d) %s\",\n\t\t\t   modname, dbi->id, query);\n\n\treturn (ISC_R_SUCCESS);\n}\n\nstatic MYSQL_RES *\ndb_query(mysql_data_t *state, mysql_instance_t *dbi, const char *query) {\n\tisc_result_t result;\n\tbool localdbi = false;\n\tMYSQL_RES *res = NULL;\n\n\tif (query == NULL)\n\t\treturn (NULL);\n\n\t/* Get a DB instance if needed */\n\tif (dbi == NULL) {\n\t\tdbi = get_dbi(state);\n\t\tif (dbi == NULL)\n\t\t\treturn (NULL);\n\t\tlocaldbi = true;\n\t}\n\n\t/* Make sure this instance is connected */\n\tif (!db_connect(state, dbi))\n\t\tgoto fail;\n\n\tresult = db_execute(state, dbi, query);\n\tif (result != ISC_R_SUCCESS)\n\t\tgoto fail;\n\n\tres = mysql_store_result(dbi->sock);\n\tif (res == NULL) {\n\t\tif (state->log != NULL)\n\t\t\tstate->log(ISC_LOG_ERROR,\n\t\t\t\t   \"%s: unable to store result: %s\",\n\t\t\t\t   modname, mysql_error(dbi->sock));\n\t\tgoto fail;\n\t}\n\n\tif (state->debug && state->log != NULL)\n\t\tstate->log(ISC_LOG_INFO,\n\t\t\t   \"%s: query(%d) returned %d rows\",\n\t\t\t   modname, dbi->id, mysql_num_rows(res));\n\n fail:\n\tif (dbi != NULL && localdbi)\n\t\tdlz_mutex_unlock(&dbi->mutex);\n\treturn (res);\n}\n\n/*\n * Generate a DNS NOTIFY packet:\n * 12 bytes header\n * Question (1)\n * \tstrlen(zone) +2\n *  2 bytes qtype\n *  2 bytes qclass\n *\n * -> 18 bytes + strlen(zone)\n *\n * N.B. Need to be mindful of byte ordering; using htons to map 16bit\n * values to the 'on the wire' packet values.\n */\nstatic unsigned char *\nmake_notify(const char *zone, int *packetlen) {\n\tint i, j;\n\tunsigned char *packet = (unsigned char *) malloc(strlen(zone) + 18);\n\n\tif (packet == NULL)\n\t\treturn (NULL);\n\n\t*packetlen = strlen(zone) + 18;\n\tmemset(packet, 0, *packetlen);\n\n\t/* Random query ID */\n\ti = rand();\n\tpacket[0] = htons(i) & 0xff;\n\tpacket[1] = htons(i) >> 8;\n\n\t/* Flags (OpCode '4' in bits 14-11), Auth Answer set in bit 10 */\n\ti = 0x2400;\n\tpacket[2] = htons(i) & 0xff;\n\tpacket[3] = htons(i) >> 8;\n\n\t/* QD Count */\n\ti = 0x1;\n\tpacket[4] = htons(i) & 0xff;\n\tpacket[5] = htons(i) >> 8;\n\n\t/* Question */\n\tpacket[12] = '.';\n\tmemcpy(&packet[13], zone, strlen(zone));\n\tpacket[13 + strlen(zone)] = 0;\n\n\t/* Make the question into labels */\n\tj = 12;\n\twhile (packet[j]) {\n\t\tfor (i = j + 1; packet[i] != '\\0' && packet[i] != '.'; i++);\n\t\tpacket[j] = i - j - 1;\n\t\tj = i;\n\t}\n\n\t/* Question type */\n\ti = 6;\n\tpacket[j + 1] = htons(i) & 0xff;\n\tpacket[j + 2] = htons(i) >> 8;\n\n\t/* Queston class */\n\ti = 1;\n\tpacket[j + 3] = htons(i) & 0xff;\n\tpacket[j + 4] = htons(i) >> 8;\n\n\treturn (packet);\n}\n\nstatic void\nsend_notify(struct sockaddr_in *addr, const unsigned char *p, const int plen) {\n\tint s;\n\n\taddr->sin_family = AF_INET;\n\taddr->sin_port = htons(53);\n\n\tif ((s = socket(PF_INET, SOCK_DGRAM, 0)) < 0)\n\t\treturn;\n\n\tsendto(s, p, plen, 0, (struct sockaddr *)addr, sizeof(*addr));\n\tclose(s);\n\treturn;\n}\n\n/*\n * Generate and send a DNS NOTIFY packet\n */\nstatic void\nnotify(mysql_data_t *state, const char *zone, int sn) {\n\tMYSQL_RES *res;\n\tMYSQL_ROW row;\n\tchar *query;\n\tunsigned char *packet;\n\tint packetlen;\n\tstruct ifaddrs *ifap, *ifa;\n\tchar zaddr[INET_ADDRSTRLEN];\n\tvoid *addrp = NULL;\n\n\t/* Get the name servers from the NS rrset */\n\tquery = build_query(state, NULL, Q_GETNS, zone);\n\tres = db_query(state, NULL, query);\n\tfree (query);\n\tif (res == NULL)\n\t\treturn;\n\n\t/* Create a DNS NOTIFY packet */\n\tpacket = make_notify(zone, &packetlen);\n\tif (packet == NULL) {\n\t\tmysql_free_result(res);\n\t\treturn;\n\t}\n\n\t/* Get a list of our own addresses */\n\tif (getifaddrs(&ifap) < 0)\n\t\tifap = NULL;\n\n\t/* Tell each nameserver of the update */\n\twhile ((row = mysql_fetch_row(res)) != NULL) {\n\t\tbool local = false;\n\t\tstruct hostent *h;\n\t\tstruct sockaddr_in addr, *sin;\n\n\t\t/*\n\t\t * Put nameserver rdata through gethostbyname as it\n\t\t * might be an IP address or a hostname. (XXX: switch\n\t\t * this to inet_pton/getaddrinfo.)\n\t\t */\n\t\th = gethostbyname(row[0]);\n\t\tif (h == NULL)\n\t\t\tcontinue;\n\n\t\tmemcpy(&addr.sin_addr, h->h_addr, h->h_length);\n\t\taddrp = &addr.sin_addr;\n\n\t\t/* Get the address for the nameserver into a string */\n\t\tinet_ntop(AF_INET, addrp, zaddr, INET_ADDRSTRLEN);\n\t\tfor (ifa = ifap; ifa != NULL; ifa = ifa->ifa_next) {\n\t\t\tchar ifaddr[INET_ADDRSTRLEN];\n\n\t\t\tif (ifa->ifa_addr->sa_family != AF_INET)\n\t\t\t\tcontinue;\n\n\t\t\t/* Get local address into a string */\n\t\t\tsin = (struct sockaddr_in *) ifa->ifa_addr;\n\t\t\taddrp = &sin->sin_addr;\n\t\t\tinet_ntop(AF_INET, addrp, ifaddr, INET_ADDRSTRLEN);\n\n\t\t\t/* See if nameserver address matches this one */\n\t\t\tif (strcmp(ifaddr, zaddr) == 0)\n\t\t\t\tlocal = true;\n\t\t}\n\n\t\tif (!local) {\n\t\t\tif (state->log != NULL)\n\t\t\t\tstate->log(ISC_LOG_INFO,\n\t\t\t\t\t   \"%s: notify %s zone %s serial %d\",\n\t\t\t\t\t   modname, row[0], zone, sn);\n\t\t\tsend_notify(&addr, packet, packetlen);\n\t\t}\n\t}\n\n\tmysql_free_result(res);\n\tfree(packet);\n\tif (ifap != NULL)\n\t\tfreeifaddrs(ifap);\n}\n\n/*\n * Constructs a mysql_record_t structure from 'rdatastr', to be\n * used in the dlz_{add,sub,del}rdataset functions below.\n */\nstatic mysql_record_t *\nmakerecord(mysql_data_t *state, const char *name, const char *rdatastr) {\n\tmysql_record_t *new_record;\n\tchar *real_name, *dclass, *type, *data, *ttlstr, *buf;\n\tdns_ttl_t ttlvalue;\n\n\tnew_record = (mysql_record_t *)\n\t\tmalloc(sizeof(mysql_record_t));\n\n\tif (new_record == NULL) {\n\t\tif (state->log != NULL)\n\t\t\tstate->log(ISC_LOG_ERROR,\n\t\t\t\t   \"%s: makerecord - unable to malloc\",\n\t\t\t\t   modname);\n\t\treturn (NULL);\n\t}\n\n\tbuf = strdup(rdatastr);\n\tif (buf == NULL) {\n\t\tif (state->log != NULL)\n\t\t\tstate->log(ISC_LOG_ERROR,\n\t\t\t\t   \"%s: makerecord - unable to malloc\",\n\t\t\t\t   modname);\n\t\tfree(new_record);\n\t\treturn (NULL);\n\t}\n\n\t/*\n\t * The format is:\n\t * FULLNAME\\tTTL\\tDCLASS\\tTYPE\\tDATA\n\t *\n\t * The DATA field is space separated, and is in the data format\n\t * for the type used by dig\n\t */\n\treal_name = strtok_r(buf, \"\\t\", &saveptr);\n\tif (real_name == NULL)\n\t\tgoto error;\n\n\tttlstr = strtok_r(NULL, \"\\t\", &saveptr);\n\tif (ttlstr == NULL || sscanf(ttlstr, \"%d\", &ttlvalue) != 1)\n\t\tgoto error;\n\n\tdclass = strtok_r(NULL, \"\\t\", &saveptr);\n\tif (dclass == NULL)\n\t\tgoto error;\n\n\ttype = strtok_r(NULL, \"\\t\", &saveptr);\n\tif (type == NULL)\n\t\tgoto error;\n\n\tdata = strtok_r(NULL, \"\\t\", &saveptr);\n\tif (data == NULL)\n\t\tgoto error;\n\n\tstrcpy(new_record->name, name);\n\tstrcpy(new_record->type, type);\n\tstrcpy(new_record->data, data);\n\tsprintf(new_record->ttl, \"%d\", ttlvalue);\n\n\tfree(buf);\n\treturn (new_record);\n\n error:\n\tfree(buf);\n\tfree(new_record);\n\treturn (NULL);\n}\n\n/*\n * Remember a helper function from the bind9 dlz_dlopen driver\n */\nstatic void\nb9_add_helper(mysql_data_t *state, const char *helper_name, void *ptr) {\n\tif (strcmp(helper_name, \"log\") == 0)\n\t\tstate->log = (log_t *)ptr;\n\tif (strcmp(helper_name, \"putrr\") == 0)\n\t\tstate->putrr = (dns_sdlz_putrr_t *)ptr;\n\tif (strcmp(helper_name, \"putnamedrr\") == 0)\n\t\tstate->putnamedrr = (dns_sdlz_putnamedrr_t *)ptr;\n\tif (strcmp(helper_name, \"writeable_zone\") == 0)\n\t\tstate->writeable_zone = (dns_dlz_writeablezone_t *)ptr;\n}\n\n/*\n * DLZ API functions\n */\n\n/*\n * Return the version of the API\n */\nint\ndlz_version(unsigned int *flags) {\n\tUNUSED(flags);\n\t*flags |= DNS_SDLZFLAG_THREADSAFE;\n\treturn (DLZ_DLOPEN_VERSION);\n}\n\n/*\n * Called to initialize the driver\n */\nisc_result_t\ndlz_create(const char *dlzname, unsigned int argc, char *argv[],\n\t   void **dbdata, ...)\n{\n\tmysql_data_t *state;\n\tconst char *helper_name;\n\tva_list ap;\n\tint n;\n\n\tUNUSED(dlzname);\n\n\tstate = calloc(1, sizeof(mysql_data_t));\n\tif (state == NULL)\n\t\treturn (ISC_R_NOMEMORY);\n\n\tdlz_mutex_init(&state->tx_mutex, NULL);\n\tstate->transactions = NULL;\n\n\t/* Fill in the helper functions */\n\tva_start(ap, dbdata);\n\twhile ((helper_name = va_arg(ap, const char *)) != NULL)\n\t\tb9_add_helper(state, helper_name, va_arg(ap, void *));\n\tva_end(ap);\n\n\tif (state->log != NULL)\n\t\tstate->log(ISC_LOG_INFO, \"loading %s module\", modname);\n\n\tif ((argc < 2) || (argc > 6)) {\n\t\tif (state->log != NULL)\n\t\t\tstate->log(ISC_LOG_ERROR,\n\t\t\t\t   \"%s: missing args <dbname> \"\n\t\t\t\t   \"[<dbhost> [<user> <pass>]]\", modname);\n\t\tdlz_destroy(state);\n\t\treturn (ISC_R_FAILURE);\n\t}\n\n\tstate->db_name = strdup(argv[1]);\n\tif (argc > 2) {\n\t\tstate->db_host = strdup(argv[2]);\n\t\tif (argc > 4) {\n\t\t\tstate->db_user = strdup(argv[3]);\n\t\t\tstate->db_pass = strdup(argv[4]);\n\t\t} else {\n\t\t\tstate->db_user = strdup(\"bind\");\n\t\t\tstate->db_pass = strdup(\"\");\n\t\t}\n\t} else {\n\t\tstate->db_host = strdup(\"localhost\");\n\t\tstate->db_user = strdup(\"bind\");\n\t\tstate->db_pass = strdup(\"\");\n\t}\n\n\tif (state->log != NULL)\n\t\tstate->log(ISC_LOG_INFO,\n\t\t\t   \"%s: DB=%s, Host=%s, User=%s\",\n\t\t\t   modname, state->db_name,\n\t\t\t   state->db_host, state->db_user);\n\n\t/*\n\t * Assign the 'state' to dbdata so we get it in our callbacks\n\t */\n\n\n\tdlz_mutex_lock(&state->tx_mutex);\n\n\t/*\n\t * Populate DB instances\n\t */\n\tif (mysql_thread_safe()) {\n\t\tfor (n = 0; n < MAX_DBI; n++) {\n\t\t\tmy_bool opt = 1;\n\t\t\tdlz_mutex_init(&state->db[n].mutex, NULL);\n\t\t\tdlz_mutex_lock(&state->db[n].mutex);\n\t\t\tstate->db[n].id = n;\n\t\t\tstate->db[n].connected = 0;\n\t\t\tstate->db[n].sock = mysql_init(NULL);\n\t\t\tmysql_options(state->db[n].sock,\n\t\t\t\t      MYSQL_READ_DEFAULT_GROUP,\n\t\t\t\t      modname);\n\t\t\tmysql_options(state->db[n].sock,\n\t\t\t\t      MYSQL_OPT_RECONNECT, &opt);\n\t\t\tdlz_mutex_unlock(&state->db[n].mutex);\n\t\t}\n\n\t\t*dbdata = state;\n\t\tdlz_mutex_unlock(&state->tx_mutex);\n\t\treturn (ISC_R_SUCCESS);\n\t}\n\n\tfree(state->db_name);\n\tfree(state->db_host);\n\tfree(state->db_user);\n\tfree(state->db_pass);\n\tdlz_mutex_destroy(&state->tx_mutex);\n\tfree(state);\n\treturn (ISC_R_FAILURE);\n}\n\n/*\n * Shut down the backend\n */\nvoid\ndlz_destroy(void *dbdata) {\n\tmysql_data_t *state = (mysql_data_t *)dbdata;\n\tint i;\n\n\tif (state->debug && state->log != NULL)\n\t\tstate->log(ISC_LOG_INFO, \"%s: shutting down\", modname);\n\n\tfor (i = 0; i < MAX_DBI; i++) {\n\t\tif (state->db[i].sock) {\n\t\t\tmysql_close(state->db[i].sock);\n\t\t\tstate->db[i].sock=NULL;\n\t\t}\n\t}\n\tfree(state->db_name);\n\tfree(state->db_host);\n\tfree(state->db_user);\n\tfree(state->db_pass);\n\tdlz_mutex_destroy(&state->tx_mutex);\n\tfree(state);\n}\n\n/*\n * See if we handle a given zone\n */\nisc_result_t\ndlz_findzonedb(void *dbdata, const char *name,\n\t       dns_clientinfomethods_t *methods,\n\t       dns_clientinfo_t *clientinfo)\n{\n\tisc_result_t result = ISC_R_SUCCESS;\n\tmysql_data_t *state = (mysql_data_t *)dbdata;\n\tMYSQL_RES *res;\n\tchar *query;\n\n\t/* Query the Zones table to see if this zone is present */\n\tquery = build_query(state, NULL, Q_FINDZONE, name);\n\n\tif (query == NULL)\n\t\treturn (ISC_R_NOMEMORY);\n\n\tres = db_query(state, NULL, query);\n\tif (res == NULL)\n\t\treturn (ISC_R_FAILURE);\n\n\tif (mysql_num_rows(res) == 0)\n\t\tresult = ISC_R_NOTFOUND;\n\n\tmysql_free_result(res);\n\treturn (result);\n}\n\n/*\n * Perform a database lookup\n */\nisc_result_t\ndlz_lookup(const char *zone, const char *name, void *dbdata,\n\t   dns_sdlzlookup_t *lookup, dns_clientinfomethods_t *methods,\n\t   dns_clientinfo_t *clientinfo)\n{\n\tisc_result_t result;\n\tmysql_data_t *state = (mysql_data_t *)dbdata;\n\tbool found = false;\n\tchar *real_name;\n\tMYSQL_RES *res;\n\tMYSQL_ROW row;\n\tchar *query;\n\tmysql_transaction_t *txn = NULL;\n\tmysql_instance_t *dbi = NULL;\n\n\tif (state->putrr == NULL) {\n\t\tif (state->log != NULL)\n\t\t\tstate->log(ISC_LOG_ERROR,\n\t\t\t\t   \"%s: dlz_lookup - no putrr\", modname);\n\t\treturn (ISC_R_NOTIMPLEMENTED);\n\t}\n\n\t/* Are we okay to try to find the txn version?  */\n\tif (clientinfo != NULL &&\n\t    clientinfo->version >= DNS_CLIENTINFO_VERSION) {\n\t\ttxn = (mysql_transaction_t *) clientinfo->dbversion;\n\t\tif (txn != NULL && validate_txn(state, txn) == ISC_R_SUCCESS)\n\t\t\tdbi = txn->dbi;\n\t\tif (dbi != NULL) {\n\t\t\tstate->log(ISC_LOG_DEBUG(1),\n\t\t\t\t   \"%s: lookup in live transaction %p, DBI %p\",\n\t\t\t\t   modname, txn, dbi);\n\t\t}\n\t}\n\n\tif (strcmp(name, \"@\") == 0) {\n\t\treal_name = (char *) malloc(strlen(zone) + 1);\n\t\tif (real_name == NULL)\n\t\t\treturn (ISC_R_NOMEMORY);\n\t\tstrcpy(real_name, zone);\n\t} else {\n\t\treal_name = (char *) malloc(strlen(name) + 1);\n\t\tif (real_name == NULL)\n\t\t\treturn (ISC_R_NOMEMORY);\n\t\tstrcpy(real_name, name);\n\t}\n\n\tif (strcmp(real_name, zone) == 0) {\n\t\t/*\n\t\t * Get the Zones table data for use in the SOA:\n\t\t * zone admin serial refresh retry expire min\n\t\t */\n\t\tquery = build_query(state, dbi, Q_GETSOA, zone);\n\t\tif (query == NULL) {\n\t\t\tfree(real_name);\n\t\t\treturn (ISC_R_NOMEMORY);\n\t\t}\n\n\t\tres = db_query(state, dbi, query);\n\t\tfree (query);\n\n\t\tif (res == NULL) {\n\t\t\tfree(real_name);\n\t\t\treturn (ISC_R_NOTFOUND);\n\t\t}\n\n\t\twhile ((row = mysql_fetch_row(res)) != NULL) {\n\t\t\tchar host[1024], admin[1024], data[1024];\n\t\t\tint ttl;\n\n\t\t\tsscanf(row[7], \"%d\", &ttl);\n\t\t\tfqhn(row[0], zone, host);\n\t\t\tfqhn(row[1], zone, admin);\n\n\t\t\t/* zone admin serial refresh retry expire min */\n\t\t\tsprintf(data, \"%s%s %s%s %s %s %s %s %s\",\n\t\t\t\thost, dot(host), admin, dot(admin),\n\t\t\t\trow[2], row[3], row[4], row[5], row[6]);\n\n\t\t\tresult = state->putrr(lookup, \"soa\", ttl, data);\n\t\t\tif (result != ISC_R_SUCCESS) {\n\t\t\t\tfree(real_name);\n\t\t\t\tmysql_free_result(res);\n\t\t\t\treturn (result);\n\t\t\t}\n\t\t}\n\n\t\tmysql_free_result(res);\n\n\t\t/*\n\t\t *  Now we'll get the rest of the apex data\n\t\t */\n\t\tquery = build_query(state, dbi, Q_GETAPEX, zone, real_name);\n\t} else\n\t\tquery = build_query(state, dbi, Q_GETNODE, zone, real_name);\n\n\tres = db_query(state, dbi, query);\n\tfree(query);\n\n\tif (res == NULL) {\n\t\tfree(real_name);\n\t\treturn (ISC_R_NOTFOUND);\n\t}\n\n\twhile ((row = mysql_fetch_row(res)) != NULL) {\n\t\tint ttl;\n\t\tsscanf(row[2], \"%d\", &ttl);\n\t\tresult = state->putrr(lookup, row[0], ttl, row[1]);\n\t\tif (result != ISC_R_SUCCESS) {\n\t\t\tfree(real_name);\n\t\t\tmysql_free_result(res);\n\t\t\treturn (result);\n\t\t}\n\n\t\tfound = true;\n\t}\n\n\tif (state->debug && state->log != NULL)\n\t\tstate->log(ISC_LOG_INFO,\n\t\t\t   \"%s: dlz_lookup %s/%s/%s - (%d rows)\",\n\t\t\t   modname, name, real_name, zone,\n\t\t\t   mysql_num_rows(res));\n\n\tmysql_free_result(res);\n\tfree(real_name);\n\n\tif (!found)\n\t\treturn (ISC_R_NOTFOUND);\n\n\treturn (ISC_R_SUCCESS);\n}\n\n/*\n * See if a zone transfer is allowed\n */\nisc_result_t\ndlz_allowzonexfr(void *dbdata, const char *name, const char *client) {\n\tmysql_data_t *state = (mysql_data_t *)dbdata;\n\n\tif (state->debug && state->log != NULL)\n\t\tstate->log(ISC_LOG_INFO,\n\t\t\t   \"dlz_allowzonexfr: %s %s\", name, client);\n\n\t/* Just say yes for all our zones */\n\treturn (dlz_findzonedb(dbdata, name, NULL, NULL));\n}\n\n/*\n * Perform a zone transfer\n */\nisc_result_t\ndlz_allnodes(const char *zone, void *dbdata, dns_sdlzallnodes_t *allnodes) {\n\tisc_result_t result = ISC_R_SUCCESS;\n\tmysql_data_t *state = (mysql_data_t *)dbdata;\n\tMYSQL_RES *res;\n\tMYSQL_ROW row;\n\tchar *query;\n\n\tUNUSED(zone);\n\n\tif (state->debug && (state->log != NULL))\n\t\tstate->log(ISC_LOG_INFO, \"dlz_allnodes: %s\", zone);\n\n\tif (state->putnamedrr == NULL)\n\t\treturn (ISC_R_NOTIMPLEMENTED);\n\n\t/*\n\t * Get all the ZoneData for this zone\n\t */\n\tquery = build_query(state, NULL, Q_GETALL, zone);\n\tif (query == NULL)\n\t\treturn (ISC_R_NOMEMORY);\n\n\tres = db_query(state, NULL, query);\n\tfree(query);\n\tif (res == NULL)\n\t\treturn (ISC_R_NOTFOUND);\n\n\twhile ((row = mysql_fetch_row(res)) != NULL) {\n\t\tchar hostname[1024];\n\t\tint ttl;\n\n\t\tsscanf(row[3], \"%d\", &ttl);\n\t\tfqhn(row[0], zone, hostname);\n\t\tresult = state->putnamedrr(allnodes, hostname,\n\t\t\t\t\t   row[1], ttl, row[2]);\n\t\tif (result != ISC_R_SUCCESS)\n\t\t\tbreak;\n\t}\n\n\tmysql_free_result(res);\n\treturn (result);\n}\n\n/*\n * Start a transaction\n */\nisc_result_t\ndlz_newversion(const char *zone, void *dbdata, void **versionp) {\n\tisc_result_t result = ISC_R_FAILURE;\n\tmysql_data_t *state = (mysql_data_t *) dbdata;\n\tMYSQL_RES *res;\n\tMYSQL_ROW row;\n\tchar *query;\n\tchar zone_id[16];\n\tmysql_transaction_t *txn = NULL, *newtx = NULL;\n\n\t/*\n\t * Check Zone is writable\n\t */\n\tquery = build_query(state, NULL, Q_WRITEABLE, zone);\n\tif (query == NULL)\n\t\treturn (ISC_R_NOMEMORY);\n\n\tres = db_query(state, NULL, query);\n\tfree(query);\n\tif (res == NULL)\n\t\treturn (ISC_R_FAILURE);\n\n\tif ((row = mysql_fetch_row(res)) == NULL) {\n\t\tmysql_free_result(res);\n\t\treturn (ISC_R_FAILURE);\n\t}\n\n\tstrcpy(zone_id, row[0]);\n\tmysql_free_result(res);\n\n\t/*\n\t * See if we already have a transaction for this zone\n\t */\n\tdlz_mutex_lock(&state->tx_mutex);\n\tfor (txn = state->transactions; txn != NULL; txn = txn->next) {\n\t\tif (strcmp(txn->zone, zone) == 0) {\n\t\t\tif (state->log != NULL)\n\t\t\t\tstate->log(ISC_LOG_ERROR,\n\t\t\t\t   \"%s: transaction already \"\n\t\t\t\t   \"started for zone %s\", modname, zone);\n\t\t\tdlz_mutex_unlock(&state->tx_mutex);\n\t\t\treturn (ISC_R_FAILURE);\n\t\t}\n\t}\n\n\t/*\n\t * Create new transaction\n\t */\n\tnewtx = (mysql_transaction_t *)\n\t\tcalloc(1, sizeof(mysql_transaction_t));\n\tif (newtx == NULL) {\n\t\tresult = ISC_R_NOMEMORY;\n\t\tgoto cleanup;\n\t}\n\tnewtx->zone = strdup(zone);\n\tif (newtx->zone == NULL) {\n\t\tresult = ISC_R_NOMEMORY;\n\t\tgoto cleanup;\n\t}\n\tnewtx->zone_id = strdup(zone_id);\n\tif (newtx->zone_id == NULL) {\n\t\tresult = ISC_R_NOMEMORY;\n\t\tgoto cleanup;\n\t}\n\tnewtx->dbi = get_dbi(state);\n\tnewtx->next = NULL;\n\n\tif (newtx->dbi == NULL) {\n\t\tresult = ISC_R_FAILURE;\n\t\tgoto cleanup;\n\t}\n\n\tresult = db_execute(state, newtx->dbi, \"START TRANSACTION\");\n\tif (result != ISC_R_SUCCESS) {\n\t\tdlz_mutex_unlock(&newtx->dbi->mutex);\n\t\tgoto cleanup;\n\t}\n\n\t/*\n\t * Add this tx to front of list\n\t */\n\tnewtx->next = state->transactions;\n\tstate->transactions = newtx;\n\n\tif (state->debug && (state->log != NULL))\n\t\tstate->log(ISC_LOG_INFO, \"%s: New tx %x\", modname, newtx);\n\n cleanup:\n\tdlz_mutex_unlock(&state->tx_mutex);\n\tif (result == ISC_R_SUCCESS) {\n\t\t*versionp = (void *) newtx;\n\t} else {\n\t\tdlz_mutex_unlock(&state->tx_mutex);\n\t\tif (newtx != NULL) {\n\t\t\tif (newtx->zone != NULL) {\n\t\t\t\tfree(newtx->zone);\n\t\t\t}\n\t\t\tif (newtx->zone != NULL) {\n\t\t\t\tfree(newtx->zone_id);\n\t\t\t}\n\t\t\tfree(newtx);\n\t\t}\n\t}\n\n\treturn (result);\n}\n\n/*\n * End a transaction\n */\nvoid\ndlz_closeversion(const char *zone, bool commit,\n\t\t void *dbdata, void **versionp)\n{\n\tisc_result_t result;\n\tmysql_data_t *state = (mysql_data_t *)dbdata;\n\tmysql_transaction_t *txn = (mysql_transaction_t *)*versionp;\n\tmysql_transaction_t *txp;\n\tchar *query;\n\tMYSQL_RES *res;\n\tMYSQL_ROW row;\n\n\t/*\n\t * Find the transaction\n\t */\n\tdlz_mutex_lock(&state->tx_mutex);\n\tif (state->transactions == txn) {\n\t\t/* Tx is first in list; remove it. */\n\t\tstate->transactions = txn->next;\n\t} else {\n\t\ttxp = state->transactions;\n\t\twhile (txp != NULL) {\n\t\t\tif (txp->next != NULL) {\n\t\t\t\tif (txp->next == txn) {\n\t\t\t\t\ttxp->next = txn->next;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (txp == txn) {\n\t\t\t\ttxp = txn->next;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ttxp = txp->next;\n\t\t}\n\t}\n\n\t/*\n\t * Tidy up\n\t */\n\tdlz_mutex_unlock(&state->tx_mutex);\n\t*versionp = NULL;\n\n\tif (commit) {\n\t\tint oldsn = 0, newsn = 0;\n\n\t\t/*\n\t\t * Find out the serial number of the zone out with the\n\t\t * transaction so we can see if it has incremented or not\n\t\t */\n\t\tquery = build_query(state, txn->dbi, Q_GETSERIAL, zone);\n\t\tif (query == NULL && state->log != NULL) {\n\t\t\tstate->log(ISC_LOG_ERROR,\n\t\t\t\t   \"%s: unable to commit transaction %x \"\n\t\t\t\t   \"on zone %s: no memory\",\n\t\t\t\t   modname, txn, zone);\n\t\t\treturn;\n\t\t}\n\n\t\tres = db_query(state, txn->dbi, query);\n\t\tif (res != NULL) {\n\t\t\twhile ((row = mysql_fetch_row(res)) != NULL)\n\t\t\t\tsscanf(row[0], \"%d\", &oldsn);\n\t\t\tmysql_free_result(res);\n\t\t}\n\n\t\t/*\n\t\t * Commit the transaction to the database\n\t\t */\n\t\tresult = db_execute(state, txn->dbi, \"COMMIT\");\n\t\tif (result != ISC_R_SUCCESS && state->log != NULL) {\n\t\t\tstate->log(ISC_LOG_INFO,\n\t\t\t\t   \"%s: (%x) commit transaction on zone %s\",\n\t\t\t\t   modname, txn, zone);\n\t\t\treturn;\n\t\t}\n\n\t\tif (state->debug && state->log != NULL)\n\t\t\tstate->log(ISC_LOG_INFO,\n\t\t\t\t   \"%s: (%x) committing transaction \"\n\t\t\t\t   \"on zone %s\",\n\t\t\t\t   modname, txn, zone);\n\n\t\t/*\n\t\t * Now get the serial number again\n\t\t */\n\t\tquery = build_query(state, txn->dbi, Q_GETSERIAL, zone);\n\t\tres = db_query(state, txn->dbi, query);\n\t\tfree(query);\n\n\t\tif (res != NULL) {\n\t\t\twhile ((row = mysql_fetch_row(res)) != NULL)\n\t\t\t\tsscanf(row[0], \"%d\", &newsn);\n\t\t\tmysql_free_result(res);\n\t\t}\n\n\t\t/*\n\t\t * Look to see if serial numbers have changed\n\t\t */\n\t\tif (newsn > oldsn)\n\t\t\tnotify(state, zone, newsn);\n\t} else {\n\t\tresult = db_execute(state, txn->dbi, \"ROLLBACK\");\n\t\tif (state->debug && (state->log != NULL))\n\t\t\tstate->log(ISC_LOG_INFO,\n\t\t\t\t   \"%s: (%x) roll back transaction on zone %s\",\n\t\t\t\t   modname, txn, zone);\n\t}\n\n\t/*\n\t * Unlock the mutex for this txn\n\t */\n\tdlz_mutex_unlock(&txn->dbi->mutex);\n\n\t/*\n\t * Free up other structures\n\t */\n\tfree(txn->zone);\n\tfree(txn->zone_id);\n\tfree(txn);\n}\n\n/*\n * Configure a writeable zone\n */\n#if DLZ_DLOPEN_VERSION < 3\nisc_result_t\ndlz_configure(dns_view_t *view, void *dbdata)\n#else /* DLZ_DLOPEN_VERSION >= 3 */\nisc_result_t\ndlz_configure(dns_view_t *view, dns_dlzdb_t *dlzdb, void *dbdata)\n#endif /* DLZ_DLOPEN_VERSION */\n{\n\tmysql_data_t *state = (mysql_data_t *)dbdata;\n\tisc_result_t result;\n\tMYSQL_RES *res;\n\tMYSQL_ROW row;\n\tint count;\n\n\t/*\n\t * Seed PRNG (used by Notify code)\n\t */\n\tsrand(getpid());\n\n\tif (state->debug && state->log != NULL)\n\t\tstate->log(ISC_LOG_INFO, \"%s: dlz_confgure\", modname);\n\n\tif (state->writeable_zone == NULL) {\n\t\tif (state->log != NULL)\n\t\t\tstate->log(ISC_LOG_ERROR,\n\t\t\t\t   \"%s: no writeable_zone method available\",\n\t\t\t\t   modname);\n\t\treturn (ISC_R_FAILURE);\n\t}\n\n\t/*\n\t * Get a list of Zones (ignore writeable column at this point)\n\t */\n\tres = db_query(state, NULL, Q_GETZONES);\n\tif (res == NULL)\n\t\treturn (ISC_R_FAILURE);\n\n\tcount = 0;\n\twhile ((row = mysql_fetch_row(res)) != NULL) {\n\t\tint sn;\n\t\tsscanf(row[1], \"%d\", &sn);\n\t\tnotify(state, row[0], sn);\n\t\tresult = state->writeable_zone(view,\n#if DLZ_DLOPEN_VERSION >= 3\n\t\t\t\t\t       dlzdb,\n#endif\n\t\t\t\t\t       row[0]);\n\t\tif (result != ISC_R_SUCCESS) {\n\t\t\tif (state->log != NULL)\n\t\t\t\tstate->log(ISC_LOG_ERROR,\n\t\t\t\t\t   \"%s: failed to configure zone %s\",\n\t\t\t\t\t   modname, row[0]);\n\t\t\tmysql_free_result(res);\n\t\t\treturn (result);\n\t\t}\n\t\tcount++;\n\t}\n\tmysql_free_result(res);\n\n\tif (state->debug && state->log != NULL)\n\t\tstate->log(ISC_LOG_INFO,\n\t\t\t   \"%s: configured %d zones\", modname, count);\n\treturn (ISC_R_SUCCESS);\n}\n\n/*\n * Authorize a zone update\n */\nbool\ndlz_ssumatch(const char *signer, const char *name, const char *tcpaddr,\n\t     const char *type, const char *key, uint32_t keydatalen,\n\t     unsigned char *keydata, void *dbdata)\n{\n\tmysql_data_t *state = (mysql_data_t *)dbdata;\n\n\tUNUSED(tcpaddr);\n\tUNUSED(type);\n\tUNUSED(keydatalen);\n\tUNUSED(keydata);\n\tUNUSED(key);\n\n\tif (state->debug && state->log != NULL)\n\t\tstate->log(ISC_LOG_INFO,\n\t\t\t   \"%s: allowing update of %s by key %s\",\n\t\t\t   modname, name, signer);\n\treturn (true);\n}\n\nisc_result_t\ndlz_addrdataset(const char *name, const char *rdatastr,\n\t\tvoid *dbdata, void *version)\n{\n\tmysql_data_t *state = (mysql_data_t *)dbdata;\n\tmysql_transaction_t *txn = (mysql_transaction_t *)version;\n\tchar *new_name, *query;\n\tmysql_record_t *record;\n\tisc_result_t result;\n\n\tif (txn == NULL)\n\t\treturn (ISC_R_FAILURE);\n\n\tnew_name = relname(name, txn->zone);\n\tif (new_name == NULL)\n\t\treturn (ISC_R_NOMEMORY);\n\n\tif (state->debug && (state->log != NULL))\n\t\tstate->log(ISC_LOG_INFO, \"%s: add (%x) %s (as %s) %s\",\n\t\t\t   modname, version, name, new_name, rdatastr);\n\n\trecord = makerecord(state, new_name, rdatastr);\n\tfree(new_name);\n\tif (record == NULL)\n\t\treturn (ISC_R_FAILURE);\n\n\t/* Write out data to database */\n\tif (strcasecmp(record->type, \"SOA\") != 0) {\n\t\tquery = build_query(state, txn->dbi, I_DATA,\n\t\t\t\t    txn->zone_id, record->name,\n\t\t\t\t    record->type, record->data,\n\t\t\t\t    record->ttl);\n\t\tif (query == NULL) {\n\t\t\tresult = ISC_R_FAILURE;\n\t\t\tgoto cleanup;\n\t\t}\n\t\tresult = db_execute(state, txn->dbi, query);\n\t\tfree(query);\n\t} else {\n\t\t/*\n\t\t * This is an SOA record, so we update: it must exist,\n\t\t * or we wouldn't have gotten this far.\n\t\t * SOA: zone admin serial refresh retry expire min\n\t\t */\n\t\tchar sn[32];\n\t\tsscanf(record->data, \"%*s %*s %31s %*s %*s %*s %*s\", sn);\n\t\tquery = build_query(state, txn->dbi, U_SERIAL, sn,\n\t\t\t\t    txn->zone_id);\n\t\tif (query == NULL) {\n\t\t\tresult = ISC_R_FAILURE;\n\t\t\tgoto cleanup;\n\t\t}\n\t\tresult = db_execute(state, txn->dbi, query);\n\t\tfree(query);\n\t}\n\n cleanup:\n\tfree(record);\n\treturn (result);\n}\n\nisc_result_t\ndlz_subrdataset(const char *name, const char *rdatastr,\n\t\tvoid *dbdata, void *version)\n{\n\tmysql_data_t *state = (mysql_data_t *)dbdata;\n\tmysql_transaction_t *txn = (mysql_transaction_t *)version;\n\tchar *new_name, *query;\n\tmysql_record_t *record;\n\tisc_result_t result;\n\n\tif (txn == NULL)\n\t\treturn (ISC_R_FAILURE);\n\n\tnew_name = relname(name, txn->zone);\n\tif (new_name == NULL)\n\t\treturn (ISC_R_NOMEMORY);\n\n\tif (state->debug && (state->log != NULL))\n\t\tstate->log(ISC_LOG_INFO, \"%s: sub (%x) %s %s\",\n\t\t\t   modname, version, name, rdatastr);\n\n\trecord = makerecord(state, new_name, rdatastr);\n\tfree(new_name);\n\tif (record == NULL)\n\t\treturn (ISC_R_FAILURE);\n\t/*\n\t * If 'type' isn't 'SOA', delete the records\n\t */\n\tif (strcasecmp(record->type, \"SOA\") == 0)\n\t\tresult = ISC_R_SUCCESS;\n\telse {\n\t\tquery = build_query(state, txn->dbi, D_RECORD,\n\t\t\t\t    txn->zone_id, record->name,\n\t\t\t\t    record->type, record->data,\n\t\t\t\t    record->ttl);\n\t\tif (query == NULL) {\n\t\t\tresult = ISC_R_NOMEMORY;\n\t\t\tgoto cleanup;\n\t\t}\n\n\t\tresult = db_execute(state, txn->dbi, query);\n\t\tfree(query);\n\t}\n\n cleanup:\n\tfree(record);\n\treturn (result);\n}\n\nisc_result_t\ndlz_delrdataset(const char *name, const char *type,\n\t\tvoid *dbdata, void *version)\n{\n\tmysql_data_t *state = (mysql_data_t *)dbdata;\n\tmysql_transaction_t *txn = (mysql_transaction_t *)version;\n\tchar *new_name, *query;\n\tisc_result_t result;\n\n\tif (txn == NULL)\n\t\treturn (ISC_R_FAILURE);\n\n\tnew_name = relname(name, txn->zone);\n\tif (new_name == NULL)\n\t\treturn (ISC_R_NOMEMORY);\n\n\tif (state->debug && (state->log != NULL))\n\t\tstate->log(ISC_LOG_INFO, \"%s: del (%x) %s %s\",\n\t\t\t   modname, version, name, type);\n\n\tquery = build_query(state, txn->dbi, D_RRSET,\n\t\t\t    txn->zone_id, new_name, type);\n\tif (query == NULL) {\n\t\tresult = ISC_R_NOMEMORY;\n\t\tgoto cleanup;\n\t}\n\n\tresult = db_execute(state, txn->dbi, query);\n\tfree(query);\n\n cleanup:\n\tfree(new_name);\n\treturn (result);\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/contrib/dlz/modules/mysqldyn/testing/named.conf": "/*\n * Copyright (C) 2013  Internet Systems Consortium, Inc. (\"ISC\")\n *\n * Permission to use, copy, modify, and/or distribute this software for any\n * purpose with or without fee is hereby granted, provided that the above\n * copyright notice and this permission notice appear in all copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND ISC DISCLAIMS ALL WARRANTIES WITH\n * REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n * AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,\n * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\n * LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE\n * OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\n * PERFORMANCE OF THIS SOFTWARE.\n */\n\ncontrols { };\n\noptions {\n\tdirectory \".\";\n\tport 5300;\n\tpid-file \"named.pid\";\n\tsession-keyfile \"session.key\";\n\tlisten-on { any; };\n\tlisten-on-v6 { none; };\n\trecursion no;\n};\n\ninclude \"ddns.key\";\n\nkey rndc_key {\n\tsecret \"1234abcd8765\";\n\talgorithm hmac-md5;\n};\n\ncontrols {\n\tinet 127.0.0.1 port 9953 allow { any; } keys { rndc_key; };\n};\n\ndlz \"test\" {\n\tdatabase \"dlopen ../dlz_mysqldyn_mod.so BindDB localhost root password\";\n};\n",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/contrib/dlz/modules/perl/dlz_perl_driver.c": "/*\n * Copyright (C) 2002 Stichting NLnet, Netherlands, stichting@nlnet.nl.\n *\n * Permission to use, copy, modify, and distribute this software for any\n * purpose with or without fee is hereby granted, provided that the\n * above copyright notice and this permission notice appear in all\n * copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND STICHTING NLNET\n * DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL\n * STICHTING NLNET BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR\n * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS\n * OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE\n * OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE\n * USE OR PERFORMANCE OF THIS SOFTWARE.\n *\n * The development of Dynamically Loadable Zones (DLZ) for Bind 9 was\n * conceived and contributed by Rob Butler.\n *\n * Permission to use, copy, modify, and distribute this software for any\n * purpose with or without fee is hereby granted, provided that the\n * above copyright notice and this permission notice appear in all\n * copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND ROB BUTLER\n * DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL\n * ROB BUTLER BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR\n * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS\n * OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE\n * OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE\n * USE OR PERFORMANCE OF THIS SOFTWARE.\n */\n\n/*\n * Copyright (C) 1999-2001, 2016  Internet Systems Consortium, Inc. (\"ISC\")\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\n\n/*\n * Copyright (C) 2009-2012  John Eaglesham\n *\n * Permission to use, copy, modify, and distribute this software for any\n * purpose with or without fee is hereby granted, provided that the above\n * copyright notice and this permission notice appear in all copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND JOHN EAGLESHAM\n * DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL\n * JOHN EAGLESHAM BE LIABLE FOR ANY SPECIAL, DIRECT,\n * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING\n * FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,\n * NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION\n * WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n */\n\n#include <config.h>\n#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\n#include <EXTERN.h>\n#include <perl.h>\n\n#include <dlz_minimal.h>\n\n#include \"dlz_perl_driver.h\"\n\n/* Enable debug logging? */\n#if 0\n#define carp(...) \tcd->log(ISC_LOG_INFO, __VA_ARGS__);\n#else\n#define carp(...)\n#endif\n\n#ifndef MULTIPLICITY\n/* This is a pretty terrible work-around for handling HUP/rndc reconfig, but\n * the way BIND/DLZ handles reloads causes it to create a second back end\n * before removing the first. In the case of a single global interpreter,\n * serious problems arise. We can hack around this, but it's much better to do\n * it properly and link against a perl compiled with multiplicity. */\nstatic PerlInterpreter *global_perl = NULL;\nstatic int global_perl_dont_free = 0;\n#endif\n\ntypedef struct config_data {\n\tPerlInterpreter\t*perl;\n\tchar\t\t\t*perl_source;\n\tSV\t\t\t\t*perl_class;\n\n\t/* Functions given to us by bind9 */\n\tlog_t *log;\n\tdns_sdlz_putrr_t *putrr;\n\tdns_sdlz_putnamedrr_t *putnamedrr;\n\tdns_dlz_writeablezone_t *writeable_zone;\n} config_data_t;\n\n/* Note, this code generates warnings due to lost type qualifiers.  This code\n * is (almost) verbatim from perlembed, and is known to work correctly despite\n * the warnings.\n */\nEXTERN_C void xs_init (pTHX);\nEXTERN_C void boot_DynaLoader (pTHX_ CV* cv);\nEXTERN_C void boot_DLZ_Perl__clientinfo (pTHX_ CV* cv);\nEXTERN_C void boot_DLZ_Perl (pTHX_ CV* cv);\nEXTERN_C void\nxs_init(pTHX)\n{\n\t\tchar *file = __FILE__;\n\t\tdXSUB_SYS;\n\n\t\t/* DynaLoader is a special case */\n\t\tnewXS(\"DynaLoader::boot_DynaLoader\", boot_DynaLoader, file);\n\t\tnewXS(\"DLZ_Perl::clientinfo::bootstrap\", boot_DLZ_Perl__clientinfo, file);\n\t\tnewXS(\"DLZ_Perl::bootstrap\", boot_DLZ_Perl, file);\n}\n\n/*\n * methods\n */\n\n/*\n * remember a helper function, from the bind9 dlz_dlopen driver\n */\nstatic void b9_add_helper(config_data_t *state,\n\t\t\t  const char *helper_name, void *ptr)\n{\n\tif (strcmp(helper_name, \"log\") == 0)\n\t\tstate->log = ptr;\n\tif (strcmp(helper_name, \"putrr\") == 0)\n\t\tstate->putrr = ptr;\n\tif (strcmp(helper_name, \"putnamedrr\") == 0)\n\t\tstate->putnamedrr = ptr;\n\tif (strcmp(helper_name, \"writeable_zone\") == 0)\n\t\tstate->writeable_zone = ptr;\n}\n\nint dlz_version(unsigned int *flags) {\n\treturn DLZ_DLOPEN_VERSION;\n}\n\nisc_result_t dlz_allnodes(const char *zone, void *dbdata,\n\t\t\t  dns_sdlzallnodes_t *allnodes)\n{\n\tconfig_data_t *cd = (config_data_t *) dbdata;\n\tisc_result_t retval;\n\tint rrcount, r;\n\tSV *record_ref;\n\tSV **rr_name;\n\tSV **rr_type;\n\tSV **rr_ttl;\n\tSV **rr_data;\n#ifdef MULTIPLICITY\n\tPerlInterpreter *my_perl = cd->perl;\n#endif\n\tdSP;\n\n\tPERL_SET_CONTEXT(cd->perl);\n\tENTER;\n\tSAVETMPS;\n\t\n\tPUSHMARK(SP);\n\tXPUSHs(cd->perl_class);\n\tXPUSHs(sv_2mortal(newSVpv(zone, 0)));\n\tPUTBACK;\n\n\tcarp(\"DLZ Perl: Calling allnodes for zone %s\", zone);\n\trrcount = call_method(\"allnodes\", G_ARRAY|G_EVAL);\n\tcarp(\"DLZ Perl: Call to allnodes returned rrcount of %i\", rrcount);\n\n\tSPAGAIN;\n\n\tif (SvTRUE(ERRSV)) {\n\t\tPOPs;\n\t\tcd->log(ISC_LOG_ERROR, \"DLZ Perl: allnodes for zone %s died in eval: %s\", zone, SvPV_nolen(ERRSV));\n\t\tretval = ISC_R_FAILURE;\n\t\tgoto CLEAN_UP_AND_RETURN;\n\t}\n\n\tif (!rrcount) {\n\t\tretval = ISC_R_NOTFOUND;\n\t\tgoto CLEAN_UP_AND_RETURN;\n\t}\n\n\tretval = ISC_R_SUCCESS;\n\tr = 0;\n\twhile (r++ < rrcount) {\n\t\trecord_ref = POPs;\n\t\tif (\n\t\t\t(!SvROK(record_ref)) ||\n\t\t\t(SvTYPE(SvRV(record_ref)) != SVt_PVAV)\n\t\t) {\n\t\t\tcd->log(ISC_LOG_ERROR,\n\t\t\t\t\"DLZ Perl: allnodes for zone %s \"\n\t\t\t\t\"returned an invalid value \"\n\t\t\t\t\"(expected array of arrayrefs)\",\n\t\t\t\tzone);\n\t\t\tretval = ISC_R_FAILURE;\n\t\t\tbreak;\n\t\t}\n\n\t\trecord_ref = SvRV(record_ref);\n\n\t\trr_name = av_fetch((AV *) record_ref, 0, 0);\n\t\trr_type = av_fetch((AV *) record_ref, 1, 0);\n\t\trr_ttl = av_fetch((AV *) record_ref, 2, 0);\n\t\trr_data = av_fetch((AV *) record_ref, 3, 0);\n\n\t\tif (rr_name == NULL || rr_type == NULL ||\n\t\t    rr_ttl == NULL || rr_data == NULL)\n\t\t{\n\t\t\tcd->log(ISC_LOG_ERROR,\n\t\t\t\t\"DLZ Perl: allnodes for zone %s \"\n\t\t\t\t\"returned an array that was missing data\",\n\t\t\t\tzone);\n\t\t\tretval = ISC_R_FAILURE;\n\t\t\tbreak;\n\t\t}\n\n\t\tcarp(\"DLZ Perl: Got record %s/%s = %s\",\n\t\t     SvPV_nolen(*rr_name), SvPV_nolen(*rr_type),\n\t\t     SvPV_nolen(*rr_data));\n   \t\tretval = cd->putnamedrr(allnodes,\n\t\t\t\t\tSvPV_nolen(*rr_name),\n\t\t\t\t\tSvPV_nolen(*rr_type),\n\t\t\t\t\tSvIV(*rr_ttl), SvPV_nolen(*rr_data));\n\t\tif (retval != ISC_R_SUCCESS) {\n\t\t\tcd->log(ISC_LOG_ERROR,\n\t\t\t\t\"DLZ Perl: putnamedrr in allnodes \"\n\t\t\t\t\"for zone %s failed with code %i \"\n\t\t\t\t\"(did lookup return invalid record data?)\",\n\t\t\t\tzone, retval);\n\t\t\tbreak;\n\t\t}\n\t}\n\nCLEAN_UP_AND_RETURN:\n\tPUTBACK;\n\tFREETMPS;\n\tLEAVE;\n\n\tcarp(\"DLZ Perl: Returning from allnodes, r = %i, retval = %i\",\n\t     r, retval);\n\n\treturn (retval);\n}\n\nisc_result_t\ndlz_allowzonexfr(void *dbdata, const char *name, const char *client) {\n\tconfig_data_t *cd = (config_data_t *) dbdata;\n\tint r;\n\tisc_result_t retval;\n#ifdef MULTIPLICITY\n\tPerlInterpreter *my_perl = cd->perl;\n#endif\n\tdSP;\n\n\tPERL_SET_CONTEXT(cd->perl);\n\tENTER;\n\tSAVETMPS;\n\t\n\tPUSHMARK(SP);\n\tXPUSHs(cd->perl_class);\n\tXPUSHs(sv_2mortal(newSVpv(name, 0)));\n\tXPUSHs(sv_2mortal(newSVpv(client, 0)));\n\tPUTBACK;\n\n\tr = call_method(\"allowzonexfr\", G_SCALAR|G_EVAL);\n\tSPAGAIN;\n\n\tif (SvTRUE(ERRSV)) {\n\t\t/*\n\t\t * On error there's an undef at the top of the stack. Pop\n\t\t * it away so we don't leave junk on the stack for the next\n\t\t * caller.\n\t\t */\n\t\tPOPs;\n\t\tcd->log(ISC_LOG_ERROR,\n\t\t\t\"DLZ Perl: allowzonexfr died in eval: %s\",\n\t\t\tSvPV_nolen(ERRSV));\n\t\tretval = ISC_R_FAILURE;\n\t} else if (r == 0) {\n\t\t/* Client returned nothing -- zone not found. */\n\t \tretval = ISC_R_NOTFOUND;\n\t} else if (r > 1) {\n\t\t/* Once again, clean out the stack when possible. */\n\t\twhile (r--) POPi;\n\t\tcd->log(ISC_LOG_ERROR,\n\t\t\t\"DLZ Perl: allowzonexfr returned too many parameters!\");\n\t\tretval = ISC_R_FAILURE;\n\t} else {\n\t\t/*\n\t\t * Client returned true/false -- we're authoritative for\n\t\t * the zone.\n\t\t */\n\t\tr = POPi;\n\t\tif (r)\n\t\t\tretval = ISC_R_SUCCESS;\n\t\telse\n\t\t\tretval = ISC_R_NOPERM;\n\t}\n\n\tPUTBACK;\n\tFREETMPS;\n\tLEAVE;\n\treturn (retval);\n}\n\n#if DLZ_DLOPEN_VERSION < 3\nisc_result_t\ndlz_findzonedb(void *dbdata, const char *name)\n#else\nisc_result_t\ndlz_findzonedb(void *dbdata, const char *name,\n\t       dns_clientinfomethods_t *methods,\n\t       dns_clientinfo_t *clientinfo)\n#endif\n{\n\tconfig_data_t *cd = (config_data_t *) dbdata;\n\tint r;\n\tisc_result_t retval;\n#ifdef MULTIPLICITY\n\tPerlInterpreter *my_perl = cd->perl;\n#endif\n\n#if DLZ_DLOPEN_VERSION >= 3\n\tUNUSED(methods);\n\tUNUSED(clientinfo);\n#endif\n\n\tdSP;\n\tcarp(\"DLZ Perl: findzone looking for '%s'\", name);\n\n\tPERL_SET_CONTEXT(cd->perl);\n\tENTER;\n\tSAVETMPS;\n\t\n\tPUSHMARK(SP);\n\tXPUSHs(cd->perl_class);\n\tXPUSHs(sv_2mortal(newSVpv(name, 0)));\n\tPUTBACK;\n\n\tr = call_method(\"findzone\", G_SCALAR|G_EVAL);\n\tSPAGAIN;\n\n\tif (SvTRUE(ERRSV)) {\n\t\t/*\n\t\t * On error there's an undef at the top of the stack. Pop\n\t\t * it away so we don't leave junk on the stack for the next\n\t\t * caller.\n\t\t */\n\t\tPOPs;\n\t\tcd->log(ISC_LOG_ERROR,\n\t\t\t\"DLZ Perl: findzone died in eval: %s\",\n\t\t\tSvPV_nolen(ERRSV));\n\t\tretval = ISC_R_FAILURE;\n\t} else if (r == 0) {\n\t \tretval = ISC_R_FAILURE;\n\t} else if (r > 1) {\n\t\t/* Once again, clean out the stack when possible. */\n\t\twhile (r--) POPi;\n\t\tcd->log(ISC_LOG_ERROR,\n\t\t\t\"DLZ Perl: findzone returned too many parameters!\");\n\t\tretval = ISC_R_FAILURE;\n\t} else {\n\t\tr = POPi;\n\t\tif (r)\n\t\t\tretval = ISC_R_SUCCESS;\n\t\telse\n\t\t\tretval = ISC_R_NOTFOUND;\n\t}\n\n\tPUTBACK;\n\tFREETMPS;\n\tLEAVE;\n\treturn (retval);\n}\n\n\n#if DLZ_DLOPEN_VERSION == 1\nisc_result_t\ndlz_lookup(const char *zone, const char *name,\n\t   void *dbdata, dns_sdlzlookup_t *lookup)\n#else\nisc_result_t\ndlz_lookup(const char *zone, const char *name,\n\t   void *dbdata, dns_sdlzlookup_t *lookup,\n\t   dns_clientinfomethods_t *methods,\n\t   dns_clientinfo_t *clientinfo)\n#endif\n{\n\tisc_result_t retval;\n\tconfig_data_t *cd = (config_data_t *) dbdata;\n\tint rrcount, r;\n\tdlz_perl_clientinfo_opaque opaque;\n\tSV *record_ref;\n\tSV **rr_type;\n\tSV **rr_ttl;\n\tSV **rr_data;\n#ifdef MULTIPLICITY\n\tPerlInterpreter *my_perl = cd->perl;\n#endif\n\n#if DLZ_DLOPEN_VERSION >= 2\n\tUNUSED(methods);\n\tUNUSED(clientinfo);\n#endif\n\n\tdSP;\n\tPERL_SET_CONTEXT(cd->perl);\n\tENTER;\n\tSAVETMPS;\n\n\topaque.methods = methods;\n\topaque.clientinfo = clientinfo;\n\n\tPUSHMARK(SP);\n\tXPUSHs(cd->perl_class);\n\tXPUSHs(sv_2mortal(newSVpv(name, 0)));\n\tXPUSHs(sv_2mortal(newSVpv(zone, 0)));\n\tXPUSHs(sv_2mortal(newSViv((IV)&opaque)));\n\tPUTBACK;\n\n\tcarp(\"DLZ Perl: Searching for name %s in zone %s\", name, zone);\n\trrcount = call_method(\"lookup\", G_ARRAY|G_EVAL);\n\tcarp(\"DLZ Perl: Call to lookup returned %i\", rrcount);\n\n\tSPAGAIN;\n\n\tif (SvTRUE(ERRSV)) {\n\t\tPOPs;\n\t\tcd->log(ISC_LOG_ERROR, \"DLZ Perl: lookup died in eval: %s\",\n\t\t\tSvPV_nolen(ERRSV));\n\t\tretval = ISC_R_FAILURE;\n\t\tgoto CLEAN_UP_AND_RETURN;\n\t}\n\n\tif (!rrcount) {\n\t\tretval = ISC_R_NOTFOUND;\n\t\tgoto CLEAN_UP_AND_RETURN;\n\t}\n\n\tretval = ISC_R_SUCCESS;\n\tr = 0;\n\twhile (r++ < rrcount) {\n\t\trecord_ref = POPs;\n\t\tif ((!SvROK(record_ref)) ||\n\t\t    (SvTYPE(SvRV(record_ref)) != SVt_PVAV))\n\t\t{\n\t\t\tcd->log(ISC_LOG_ERROR,\n\t\t\t\t\"DLZ Perl: lookup returned an \"\n\t\t\t\t\"invalid value (expected array of arrayrefs)!\");\n\t\t\tretval = ISC_R_FAILURE;\n\t\t\tbreak;\n\t\t}\n\n\t\trecord_ref = SvRV(record_ref);\n\n\t\trr_type = av_fetch((AV *) record_ref, 0, 0);\n\t\trr_ttl = av_fetch((AV *) record_ref, 1, 0);\n\t\trr_data = av_fetch((AV *) record_ref, 2, 0);\n\n\t\tif (rr_type == NULL || rr_ttl == NULL || rr_data == NULL) {\n\t\t\tcd->log(ISC_LOG_ERROR,\n\t\t\t\t\"DLZ Perl: lookup for record %s in \"\n\t\t\t\t\"zone %s returned an array that was \"\n\t\t\t\t\"missing data\", name, zone);\n\t\t\tretval = ISC_R_FAILURE;\n\t\t\tbreak;\n\t\t}\n\n\t\tcarp(\"DLZ Perl: Got record %s = %s\",\n\t\t     SvPV_nolen(*rr_type), SvPV_nolen(*rr_data));\n\t\tretval = cd->putrr(lookup, SvPV_nolen(*rr_type),\n\t\t\t\t   SvIV(*rr_ttl), SvPV_nolen(*rr_data));\n\n\t\tif (retval != ISC_R_SUCCESS) {\n\t\t\tcd->log(ISC_LOG_ERROR,\n\t\t\t\t\"DLZ Perl: putrr for lookup of %s in \"\n\t\t\t\t\"zone %s failed with code %i \"\n\t\t\t\t\"(did lookup return invalid record data?)\",\n\t\t\t\tname, zone, retval);\n\t\t\tbreak;\n\t\t}\n\t}\n\nCLEAN_UP_AND_RETURN:\n\tPUTBACK;\n\tFREETMPS;\n\tLEAVE;\n\n\tcarp(\"DLZ Perl: Returning from lookup, r = %i, retval = %i\", r, retval);\n\n\treturn (retval);\n}\n\nconst char *\n#ifdef MULTIPLICITY\nmissing_perl_method(const char *perl_class_name, PerlInterpreter *my_perl)\n#else\nmissing_perl_method(const char *perl_class_name)\n#endif\n{\n\tconst int BUF_LEN = 64; /* Should be big enough, right? hah */\n\tchar full_name[BUF_LEN];\n\tconst char *methods[] = { \"new\", \"findzone\", \"lookup\", NULL };\n\tint i = 0;\n\n\twhile( methods[i] != NULL ) {\n\t\tsnprintf(full_name, BUF_LEN, \"%s::%s\",\n\t\t\t perl_class_name, methods[i]);\n\n\t\tif (get_cv(full_name, 0) == NULL) {\n\t\t\treturn methods[i];\n\t\t}\n\t\ti++;\n\t}\n\n\treturn (NULL);\n}\n\nisc_result_t\ndlz_create(const char *dlzname, unsigned int argc, char *argv[],\n\t   void **dbdata, ...)\n{\n\tconfig_data_t *cd;\n\tchar *init_args[] = { NULL, NULL };\n\tchar *perlrun[] = { \"\", NULL, \"dlz perl\", NULL };\n\tchar *perl_class_name;\n\tint r;\n\tva_list ap;\n\tconst char *helper_name;\n\tconst char *missing_method_name;\n\tchar *call_argv_args = NULL;\n#ifdef MULTIPLICITY\n\tPerlInterpreter *my_perl;\n#endif\n\n\tcd = malloc(sizeof(config_data_t));\n\tif (cd == NULL)\n\t\treturn (ISC_R_NOMEMORY);\n\n\tmemset(cd, 0, sizeof(config_data_t));\n\n\t/* fill in the helper functions */\n\tva_start(ap, dbdata);\n\twhile ((helper_name = va_arg(ap, const char *)) != NULL) {\n\t\tb9_add_helper(cd, helper_name, va_arg(ap, void*));\n\t}\n\tva_end(ap);\n\n\tif (argc < 2) {\n\t\tcd->log(ISC_LOG_ERROR,\n\t\t\t\"DLZ Perl '%s': Missing script argument.\",\n\t\t\tdlzname);\n\t\tfree(cd);\n\t\treturn (ISC_R_FAILURE);\n\t}\n\n\tif (argc < 3) {\n\t\tcd->log(ISC_LOG_ERROR,\n\t\t\t\"DLZ Perl '%s': Missing class name argument.\",\n\t\t\tdlzname);\n\t\tfree(cd);\n\t\treturn (ISC_R_FAILURE);\n\t}\n\tperl_class_name = argv[2];\n\n\tcd->log(ISC_LOG_INFO, \"DLZ Perl '%s': Loading '%s' from location '%s'\",\n\t\t dlzname, perl_class_name, argv[1], argc);\n\n#ifndef MULTIPLICITY\n\tif (global_perl) {\n\t\t/*\n\t\t * PERL_SET_CONTEXT not needed here as we're guaranteed to\n\t\t * have an implicit context thanks to an undefined\n\t\t * MULTIPLICITY.\n\t\t */\n\t\tPL_perl_destruct_level = 1;\n\t\tperl_destruct(global_perl);\n\t\tperl_free(global_perl);\n\t\tglobal_perl = NULL;\n\t\tglobal_perl_dont_free = 1;\n\t}\n#endif\n\n\tcd->perl = perl_alloc();\n\tif (cd->perl == NULL) {\n\t\tfree(cd);\n\t\treturn (ISC_R_FAILURE);\n\t}\n#ifdef MULTIPLICITY\n\tmy_perl = cd->perl;\n#endif\n\tPERL_SET_CONTEXT(cd->perl);\n \n\t/*\n\t * We will re-create the interpreter during an rndc reconfig, so we\n\t * must set this variable per perlembed in order to insure we can\n\t * clean up Perl at a later time.\n\t */\n\tPL_perl_destruct_level = 1;\n\tperl_construct(cd->perl);\n\tPL_exit_flags |= PERL_EXIT_DESTRUCT_END;\n\t/* Prevent crashes from clients writing to $0 */\n\tPL_origalen = 1;\n\n\tcd->perl_source = strdup(argv[1]);\n\tif (cd->perl_source == NULL) {\n\t\tfree(cd);\n\t\treturn (ISC_R_NOMEMORY);\n\t}\n\n\tperlrun[1] = cd->perl_source;\n\tif (perl_parse(cd->perl, xs_init, 3, perlrun, (char **)NULL)) {\n\t\tcd->log(ISC_LOG_ERROR,\n\t\t\t\"DLZ Perl '%s': Failed to parse Perl script, aborting\",\n\t\t\tdlzname);\n\t\tgoto CLEAN_UP_PERL_AND_FAIL;\n\t}\n\n\t/* Let Perl know about our callbacks. */\n\tcall_argv(\"DLZ_Perl::clientinfo::bootstrap\",\n\t\t  G_DISCARD|G_NOARGS, &call_argv_args);\n\tcall_argv(\"DLZ_Perl::bootstrap\",\n\t\t  G_DISCARD|G_NOARGS, &call_argv_args);\n\n\t/*\n\t * Run the script. We don't really need to do this since we have\n\t * the init callback, but there's not really a downside either.\n\t */\n\tif (perl_run(cd->perl)) {\n\t\tcd->log(ISC_LOG_ERROR,\n\t\t\t\"DLZ Perl '%s': Script exited with an error, aborting\",\n\t\t\tdlzname);\n\t\tgoto CLEAN_UP_PERL_AND_FAIL;\n\t}\n\n#ifdef MULTIPLICITY\n\tif (missing_method_name = missing_perl_method(perl_class_name, my_perl))\n#else\n\tif (missing_method_name = missing_perl_method(perl_class_name))\n#endif\n\t{\n\t\tcd->log(ISC_LOG_ERROR,\n\t\t\t\"DLZ Perl '%s': Missing required function '%s', \"\n\t\t\t\"aborting\", dlzname, missing_method_name);\n\t\tgoto CLEAN_UP_PERL_AND_FAIL;\n\t}\n\n\tdSP;\n\tENTER;\n\tSAVETMPS;\n\n\tPUSHMARK(SP);\n\tXPUSHs(sv_2mortal(newSVpv(perl_class_name, 0)));\n\n\t/* Build flattened hash of config info. */\n\tXPUSHs(sv_2mortal(newSVpv(\"log_context\", 0)));\n\tXPUSHs(sv_2mortal(newSViv((IV)cd->log)));\n\n\t/* Argument to pass to new? */\n\tif (argc == 4) {\n\t\tXPUSHs(sv_2mortal(newSVpv(\"argv\", 0)));\n\t\tXPUSHs(sv_2mortal(newSVpv(argv[3], 0)));\n\t}\n\n\tPUTBACK;\n\n\tr = call_method(\"new\", G_EVAL|G_SCALAR);\n\n\tSPAGAIN;\n\n\tif (r) cd->perl_class = SvREFCNT_inc(POPs);\n\n\tPUTBACK;\n\tFREETMPS;\n\tLEAVE;\n\n\tif (SvTRUE(ERRSV)) {\n\t\tPOPs;\n\t\tcd->log(ISC_LOG_ERROR,\n\t\t\t\"DLZ Perl '%s': new died in eval: %s\",\n\t\t\tdlzname, SvPV_nolen(ERRSV));\n\t\tgoto CLEAN_UP_PERL_AND_FAIL;\n\t}\n\n\tif (!r || !sv_isobject(cd->perl_class)) {\n\t\tcd->log(ISC_LOG_ERROR,\n\t\t\t\"DLZ Perl '%s': new failed to return a blessed object\",\n\t\t\tdlzname);\n\t\tgoto CLEAN_UP_PERL_AND_FAIL;\n\t}\n\n\t*dbdata = cd;\n\n#ifndef MULTIPLICITY\n\tglobal_perl = cd->perl;\n#endif\n\treturn (ISC_R_SUCCESS);\n\nCLEAN_UP_PERL_AND_FAIL:\n\tPL_perl_destruct_level = 1;\n\tperl_destruct(cd->perl);\n\tperl_free(cd->perl);\n\tfree(cd->perl_source);\n\tfree(cd);\n\treturn (ISC_R_FAILURE);\n}\n\nvoid dlz_destroy(void *dbdata) {\n\tconfig_data_t *cd = (config_data_t *) dbdata;\n#ifdef MULTIPLICITY\n\tPerlInterpreter *my_perl = cd->perl;\n#endif\n\n\tcd->log(ISC_LOG_INFO, \"DLZ Perl: Unloading driver.\");\n\n#ifndef MULTIPLICITY\n\tif (!global_perl_dont_free) {\n#endif\n\t\tPERL_SET_CONTEXT(cd->perl);\n\t\tPL_perl_destruct_level = 1;\n\t\tperl_destruct(cd->perl);\n\t\tperl_free(cd->perl);\n#ifndef MULTIPLICITY\n\t\tglobal_perl_dont_free = 0;\n\t\tglobal_perl = NULL;\n\t}\n#endif\n\n\tfree(cd->perl_source);\n\tfree(cd);\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/contrib/dlz/modules/perl/testing/named.conf": "/*\n * Copyright (C) 2011  Internet Systems Consortium, Inc. (\"ISC\")\n *\n * Permission to use, copy, modify, and/or distribute this software for any\n * purpose with or without fee is hereby granted, provided that the above\n * copyright notice and this permission notice appear in all copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND ISC DISCLAIMS ALL WARRANTIES WITH\n * REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n * AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,\n * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\n * LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE\n * OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\n * PERFORMANCE OF THIS SOFTWARE.\n */\n\noptions {\n\tport 5300;\n\tpid-file \"named.pid\";\n\tsession-keyfile \"session.key\";\n\tlisten-on { 127.0.0.1; };\n\tlisten-on-v6 { none; };\n\trecursion no;\n\tnotify no;\n};\n\ndlz \"perl zone\" {\n\tdatabase \"dlopen ../dlz_perl_driver.so dlz_perl_example.pm dlz_perl_example\";\n};\n",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/contrib/dlz/modules/filesystem/dlz_filesystem_dynamic.c": "/*\n * Copyright (C) 2002 Stichting NLnet, Netherlands, stichting@nlnet.nl.\n *\n * Permission to use, copy, modify, and distribute this software for any\n * purpose with or without fee is hereby granted, provided that the\n * above copyright notice and this permission notice appear in all\n * copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND STICHTING NLNET\n * DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL\n * STICHTING NLNET BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR\n * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS\n * OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE\n * OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE\n * USE OR PERFORMANCE OF THIS SOFTWARE.\n *\n * The development of Dynamically Loadable Zones (DLZ) for Bind 9 was\n * conceived and contributed by Rob Butler.\n *\n * Permission to use, copy, modify, and distribute this software for any\n * purpose with or without fee is hereby granted, provided that the\n * above copyright notice and this permission notice appear in all\n * copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND ROB BUTLER\n * DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL\n * ROB BUTLER BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR\n * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS\n * OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE\n * OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE\n * USE OR PERFORMANCE OF THIS SOFTWARE.\n */\n\n/*\n * Copyright (C) 1999-2001, 2013, 2016  Internet Systems Consortium, Inc. (\"ISC\")\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\n\n/*\n * This provides the externally loadable filesystem DLZ module, without\n * update support\n */\n\n#include <stdbool.h>\n#include <stdio.h>\n#include <string.h>\n#include <stdarg.h>\n#include <stdlib.h>\n\n#include <sys/stat.h>\n\n#include \"dlz_minimal.h\"\n#include \"dlz_list.h\"\n#include \"dir.h\"\n\ntypedef struct config_data {\n\tchar\t\t*basedir;\n\tint\t\tbasedirsize;\n\tchar\t\t*datadir;\n\tint\t\tdatadirsize;\n\tchar\t\t*xfrdir;\n\tint\t\txfrdirsize;\n\tint\t\tsplitcnt;\n\tchar\t\tseparator;\n\tchar\t\tpathsep;\n\n\t/* Helper functions from the dlz_dlopen driver */\n\tlog_t *log;\n\tdns_sdlz_putrr_t *putrr;\n\tdns_sdlz_putnamedrr_t *putnamedrr;\n\tdns_dlz_writeablezone_t *writeable_zone;\n} config_data_t;\n\ntypedef struct dir_entry dir_entry_t;\n\nstruct dir_entry {\n\tchar dirpath[DIR_PATHMAX];\n\tDLZ_LINK(dir_entry_t)\tlink;\n};\n\ntypedef DLZ_LIST(dir_entry_t) dlist_t;\n\n/* forward reference */\n\nstatic void\nb9_add_helper(struct config_data *cd, const char *helper_name, void *ptr);\n\n/*\n * Private methods\n */\nstatic bool\nis_safe(const char *input) {\n\tunsigned int i;\n\tunsigned int len = strlen(input);\n\n        /* check that only allowed characters are in the domain name */\n\tfor (i = 0; i < len; i++) {\n\t\t/* '.' is allowed, but has special requirements */\n\t\tif (input[i] == '.') {\n\t\t\t/* '.' is not allowed as first char */\n\t\t\tif (i == 0)\n\t\t\t\treturn (false);\n\t\t\t/* '..', two dots together is not allowed. */\n\t\t\tif (input[i-1] == '.')\n\t\t\t\treturn (false);\n\t\t\t/* '.' is not allowed as last char */\n\t\t\tif (i == len - 1)\n\t\t\t\treturn (false);\n\t\t\t/* only 1 dot in ok location, continue at next char */\n\t\t\tcontinue;\n\t\t}\n\t\t/* '-' is allowed, continue at next char */\n\t\tif (input[i] == '-')\n\t\t\tcontinue;\n\t\t/* 0-9 is allowed, continue at next char */\n\t\tif (input[i] >= '0' && input[i] <= '9')\n\t\t\tcontinue;\n\t\t/* A-Z uppercase is allowed, continue at next char */\n\t\tif (input[i] >= 'A' && input[i] <= 'Z')\n\t\t\tcontinue;\n\t\t/* a-z lowercase is allowed, continue at next char */\n\t\tif (input[i] >= 'a' && input[i] <= 'z')\n\t\t\tcontinue;\n\n\t\t/*\n\t\t * colon needs to be allowed for IPV6 client\n\t\t * addresses.  Not dangerous in domain names, as not a\n\t\t * special char.\n\t\t */\n\t\tif (input[i] == ':')\n\t\t\tcontinue;\n\n\t\t/*\n\t\t * '@' needs to be allowed for in zone data.  Not\n\t\t * dangerous in domain names, as not a special char.\n\t\t */\n\t\tif (input[i] == '@')\n\t\t\tcontinue;\n\n\t\t/*\n\t\t * if we reach this point we have encountered a\n\t\t * disallowed char!\n\t\t */\n\t\treturn (false);\n\t}\n        /* everything ok. */\n\treturn (true);\n}\n\nstatic isc_result_t\ncreate_path_helper(char *out, const char *in, config_data_t *cd) {\n\tchar *tmpString;\n\tchar *tmpPtr;\n\tint i;\n\n\ttmpString = strdup(in);\n\tif (tmpString == NULL)\n\t\treturn (ISC_R_NOMEMORY);\n\n\t/*\n\t * don't forget is_safe guarantees '.' will NOT be the\n\t * first/last char\n\t */\n\twhile ((tmpPtr = strrchr(tmpString, '.')) != NULL) {\n\t\ti = 0;\n\t\twhile (tmpPtr[i+1] != '\\0') {\n\t\t\tif (cd->splitcnt < 1)\n\t\t\t\tstrcat(out, (char *) &tmpPtr[i+1]);\n\t\t\telse\n\t\t\t\tstrncat(out, (char *) &tmpPtr[i+1],\n\t\t\t\t\tcd->splitcnt);\n\t\t\tstrncat(out, (char *) &cd->pathsep, 1);\n\t\t\tif (cd->splitcnt == 0)\n\t\t\t\tbreak;\n\t\t\tif (strlen((char *) &tmpPtr[i+1]) <=\n\t\t\t    (unsigned int) cd->splitcnt)\n\t\t\t\tbreak;\n\t\t\ti += cd->splitcnt;\n\t\t}\n\t\ttmpPtr[0] = '\\0';\n\t}\n\n\t/* handle the \"first\" label properly */\n\ti=0;\n\ttmpPtr = tmpString;\n\twhile (tmpPtr[i] != '\\0') {\n\t\tif (cd->splitcnt < 1)\n\t\t\tstrcat(out, (char *) &tmpPtr[i]);\n\t\telse\n\t\t\tstrncat(out, (char *) &tmpPtr[i], cd->splitcnt);\n\t\tstrncat(out, (char *) &cd->pathsep, 1);\n\t\tif (cd->splitcnt == 0)\n\t\t\tbreak;\n\t\tif (strlen((char *) &tmpPtr[i]) <=\n\t\t    (unsigned int) cd->splitcnt)\n\t\t\tbreak;\n\t\ti += cd->splitcnt;\n\t}\n\n\tfree(tmpString);\n\treturn (ISC_R_SUCCESS);\n}\n\n/*%\n * Checks to make sure zone and host are safe.  If safe, then\n * hashes zone and host strings to build a path.  If zone / host\n * are not safe an error is returned.\n */\n\nstatic isc_result_t\ncreate_path(const char *zone, const char *host, const char *client,\n\t    config_data_t *cd, char **path)\n{\n\n\tchar *tmpPath;\n\tint pathsize;\n\tint len;\n\tisc_result_t result;\n\tbool isroot = false;\n\n\t/* special case for root zone */\n\tif (strcmp(zone, \".\") == 0)\n\t\tisroot = true;\n\n\t/* if the requested zone is \"unsafe\", return error */\n\tif (!isroot && !is_safe(zone))\n\t\treturn (ISC_R_FAILURE);\n\n\t/* if host was passed, verify that it is safe */\n\tif (host != NULL && !is_safe(host))\n\t\treturn (ISC_R_FAILURE);\n\n\t/* if client was passed, verify that it is safe */\n\tif (client != NULL && !is_safe(client))\n\t\treturn (ISC_R_FAILURE);\n\n\t/* Determine how much memory the split up string will require */\n\tif (host != NULL)\n\t\tlen = strlen(zone) + strlen(host);\n\telse if (client != NULL)\n\t\tlen = strlen(zone) + strlen(client);\n\telse\n\t\tlen = strlen(zone);\n\n\t/*\n\t * even though datadir and xfrdir will never be in the same\n\t * string we only waste a few bytes by allocating for both,\n\t * and then we are safe from buffer overruns.\n\t */\n\tpathsize = len + cd->basedirsize +\n\t\t   cd->datadirsize + cd->xfrdirsize + 4;\n\n\t/* if we are splitting names, we will need extra space. */\n\tif (cd->splitcnt > 0)\n\t\tpathsize += len/cd->splitcnt;\n\n\ttmpPath = malloc(pathsize * sizeof(char));\n\tif (tmpPath == NULL) {\n\t\t/* write error message */\n\t\tcd->log(ISC_LOG_ERROR,\n\t\t\t\"Filesystem driver unable to \"\n\t\t\t\"allocate memory in create_path().\");\n\t\tresult = ISC_R_NOMEMORY;\n\t\tgoto cleanup_mem;\n\t}\n\n\t/*\n\t * build path string.\n\t * start out with base directory.\n\t */\n\tstrcpy(tmpPath, cd->basedir);\n\n\t/* add zone name - parsed properly */\n\tif (!isroot) {\n\t\tresult = create_path_helper(tmpPath, zone, cd);\n\t\tif (result != ISC_R_SUCCESS)\n\t\t\tgoto cleanup_mem;\n\t}\n\n\t/*\n\t * When neither client or host is passed we are building a\n\t * path to see if a zone is supported.  We require that a zone\n\t * path have the \"data dir\" directory contained within it so\n\t * that we know this zone is really supported.  Otherwise,\n\t * this zone may not really be supported because we are\n\t * supporting a delagated sub zone.\n\t *\n\t * Example:\n\t *\n\t * We are supporting long.domain.com and using a splitcnt of\n\t * 0.  the base dir is \"/base-dir/\" and the data dir is\n\t * \"/.datadir\" We want to see if we are authoritative for\n\t * domain.com.  Path /base-dir/com/domain/.datadir since\n\t * /base-dir/com/domain/.datadir does not exist, we are not\n\t * authoritative for the domain \"domain.com\".  However we are\n\t * authoritative for the domain \"long.domain.com\" because the\n\t * path /base-dir/com/domain/long/.datadir does exist!\n\t */\n\n\t/* if client is passed append xfr dir, otherwise append data dir */\n\tif (client != NULL) {\n\t\tstrcat(tmpPath, cd->xfrdir);\n\t\tstrncat(tmpPath, (char *) &cd->pathsep, 1);\n\t\tstrcat(tmpPath, client);\n\t} else\n\t\tstrcat(tmpPath, cd->datadir);\n\n\t/* if host not null, add it. */\n\tif (host != NULL) {\n\t\tstrncat(tmpPath, (char *) &cd->pathsep, 1);\n\t\tresult = create_path_helper(tmpPath, host, cd);\n\t\tif (result != ISC_R_SUCCESS)\n\t\t\tgoto cleanup_mem;\n\t}\n\n\t/* return the path we built. */\n\t*path = tmpPath;\n\n\t/* return success */\n\tresult = ISC_R_SUCCESS;\n\n cleanup_mem:\n\t/* cleanup memory */\n\n\t/* free tmpPath memory */\n\tif (tmpPath != NULL && result != ISC_R_SUCCESS)\n\t\tfree(tmpPath);\n\n\treturn (result);\n}\n\nstatic isc_result_t\nprocess_dir(dir_t *dir, void *passback, config_data_t *cd,\n\t    dlist_t *dir_list, unsigned int basedirlen)\n{\n\n\tchar tmp[DIR_PATHMAX + DIR_NAMEMAX];\n\tint astPos;\n\tstruct stat\tsb;\n\tisc_result_t result = ISC_R_FAILURE;\n\tchar *endp;\n\tchar *type;\n\tchar *ttlStr;\n\tchar *data;\n\tchar host[DIR_NAMEMAX];\n\tchar *tmpString;\n\tchar *tmpPtr;\n\tint ttl;\n\tint i;\n\tint len;\n\tdir_entry_t *direntry;\n\tbool foundHost;\n\n\ttmp[0] = '\\0'; /* set 1st byte to '\\0' so strcpy works right. */\n\thost[0] = '\\0';\n\tfoundHost = false;\n\n\t/* copy base directory name to tmp. */\n\tstrcpy(tmp, dir->dirname);\n\n\t/* dir->dirname will always have '*' as the last char. */\n\tastPos = strlen(dir->dirname) - 1;\n\n\t/* if dir_list != NULL, were are performing a zone xfr */\n\tif (dir_list != NULL) {\n\t\t/* if splitcnt == 0, determine host from path. */\n\t\tif (cd->splitcnt == 0) {\n\t\t\tif (strlen(tmp) - 3 > basedirlen) {\n\t\t\t\ttmp[astPos-1] = '\\0';\n\t\t\t\ttmpString = (char *) &tmp[basedirlen+1];\n\t\t\t\t/* handle filesystem's special wildcard \"-\"  */\n\t\t\t\tif (strcmp(tmpString, \"-\") == 0) {\n\t\t\t\t\tstrcpy(host, \"*\");\n\t\t\t\t} else {\n\t\t\t\t\t/*\n\t\t\t\t\t * not special wildcard -- normal name\n\t\t\t\t\t */\n\t\t\t\t\twhile ((tmpPtr = strrchr(tmpString,\n\t\t\t\t\t\t\t\t cd->pathsep))\n\t\t\t\t\t       != NULL)\n\t\t\t\t\t{\n\t\t\t\t\t\tif ((strlen(host) +\n\t\t\t\t\t\t     strlen(tmpPtr + 1) + 2)\n\t\t\t\t\t\t    > DIR_NAMEMAX)\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\tstrcat(host, tmpPtr + 1);\n\t\t\t\t\t\tstrcat(host, \".\");\n\t\t\t\t\t\ttmpPtr[0] = '\\0';\n\t\t\t\t\t}\n\t\t\t\t\tif ((strlen(host) +\n\t\t\t\t\t     strlen(tmpString) + 1)\n\t\t\t\t\t    <= DIR_NAMEMAX)\n\t\t\t\t\t\tstrcat(host, tmpString);\n\t\t\t\t}\n\n\t\t\t\tfoundHost = true;\n\t\t\t\t/* set tmp again for use later */\n\t\t\t\tstrcpy(tmp, dir->dirname);\n\t\t\t}\n\t\t} else {\n\t\t\t/*\n\t\t\t * if splitcnt != 0 determine host from\n\t\t\t * \".host\" directory entry\n\t\t\t */\n\t\t\twhile (dir_read(dir) == ISC_R_SUCCESS) {\n\t\t\t\tif (strncasecmp(\".host\",\n\t\t\t\t\t\tdir->entry.name, 5) == 0) {\n\t\t\t\t\t/*\n\t\t\t\t\t * handle filesystem's special\n\t\t\t\t\t * wildcard \"-\"\n\t\t\t\t\t */\n\t\t\t\t\tif (strcmp((char *) &dir->entry.name[6],\n\t\t\t\t\t\t   \"-\") == 0)\n\t\t\t\t\t\tstrcpy(host, \"*\");\n\t\t\t\t\telse {\n\t\t\t\t\t\tstrncpy(host,\n\t\t\t\t\t\t   (char *) &dir->entry.name[6],\n\t\t\t\t\t\t   sizeof(host) - 1);\n\t\t\t\t\t\thost[255] = '\\0';\n\t\t\t\t\t}\n\t\t\t\t\tfoundHost = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t/* reset dir list for use later */\n\t\t\tdir_reset(dir);\n\t\t} /* end of else */\n\t}\n\n\twhile (dir_read(dir) == ISC_R_SUCCESS) {\n\t\tcd->log(ISC_LOG_DEBUG(1),\n\t\t\t\"Filesystem driver Dir name:\"\n\t\t\t\" '%s' Dir entry: '%s'\\n\",\n\t\t\tdir->dirname, dir->entry.name);\n\n\t\t/* skip any entries starting with \".\" */\n\t\tif (dir->entry.name[0] == '.')\n\t\t\tcontinue;\n\n\t\t/*\n\t\t * get rid of '*', set to NULL.  Effectively trims\n\t\t * string from previous loop to base directory only\n\t\t * while still leaving memory for concat to be\n\t\t * performed next.\n\t\t */\n\n\t\ttmp[astPos] = '\\0';\n\n\t\t/* add name to base directory name. */\n\t\tstrcat(tmp, dir->entry.name);\n\n\t\t/* make sure we can stat entry */\n\t\tif (stat(tmp, &sb) == 0 ) {\n\t\t\t/* if entry is a directory */\n\t\t\tif ((sb.st_mode & S_IFDIR) != 0) {\n\t\t\t\t/*\n\t\t\t\t * if dir list is NOT NULL, add dir to\n\t\t\t\t * dir list\n\t\t\t\t */\n\t\t\t\tif (dir_list != NULL) {\n\t\t\t\t\tdirentry = malloc(sizeof(dir_entry_t));\n\t\t\t\t\tif (direntry == NULL)\n\t\t\t\t\t\treturn (ISC_R_NOMEMORY);\n\t\t\t\t\tstrcpy(direntry->dirpath, tmp);\n\t\t\t\t\tDLZ_LINK_INIT(direntry, link);\n\t\t\t\t\tDLZ_LIST_APPEND(*dir_list, direntry,\n\t\t\t\t\t\t\tlink);\n\t\t\t\t\tresult = ISC_R_SUCCESS;\n\t\t\t\t}\n\t\t\t\tcontinue;\n\n\t\t\t\t/*\n\t\t\t\t * if entry is a file be sure we do\n\t\t\t\t * not add entry to DNS results if we\n\t\t\t\t * are performing a zone xfr and we\n\t\t\t\t * could not find a host entry.\n\t\t\t\t */\n\n\t\t\t} else if (dir_list != NULL &&\n\t\t\t\t   foundHost == false) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t} else /* if we cannot stat entry, skip it. */\n\t\t\tcontinue;\n\n\t\ttype = dir->entry.name;\n\t\tttlStr = strchr(type,  cd->separator);\n\t\tif (ttlStr == NULL) {\n\t\t\tcd->log(ISC_LOG_ERROR,\n\t\t\t\t\"Filesystem driver: \"\n\t\t\t\t\"%s could not be parsed properly\", tmp);\n\t\t\treturn (ISC_R_FAILURE);\n\t\t}\n\n\t\t/* replace separator char with NULL to split string */\n\t\tttlStr[0] = '\\0';\n\t\t/* start string after NULL of previous string */\n\t\tttlStr = (char *) &ttlStr[1];\n\n\t\tdata = strchr(ttlStr, cd->separator);\n\t\tif (data == NULL) {\n\t\t\tcd->log(ISC_LOG_ERROR,\n\t\t\t\t\"Filesystem driver: \"\n\t\t\t\t\"%s could not be parsed properly\", tmp);\n\t\t\treturn (ISC_R_FAILURE);\n\t\t}\n\n\t\t/* replace separator char with NULL to split string */\n\t\tdata[0] = '\\0';\n\n\t\t/* start string after NULL of previous string */\n\t\tdata = (char *) &data[1];\n\n\t\t/* replace all cd->separator chars with a space. */\n\t\tlen = strlen(data);\n\n\t\tfor (i=0; i < len; i++) {\n\t\t\tif (data[i] == cd->separator)\n\t\t\t\tdata[i] = ' ';\n\t\t}\n\n\t\t/* convert text to int, make sure it worked right */\n\t\tttl = strtol(ttlStr, &endp, 10);\n\t\tif (*endp != '\\0' || ttl < 0)\n\t\t\tcd->log(ISC_LOG_ERROR,\n\t\t\t\t\"Filesystem driver \"\n\t\t\t\t\"ttl must be a postive number\");\n\n\t\t/* pass data back to Bind */\n\t\tif (dir_list == NULL)\n\t\t\tresult = cd->putrr((dns_sdlzlookup_t *) passback,\n\t\t\t\t\t   type, ttl, data);\n\t\telse\n\t\t\tresult = cd->putnamedrr((dns_sdlzallnodes_t *) passback,\n\t\t\t\t\t\t(char *) host,\n\t\t\t\t\t\ttype, ttl, data);\n\n\t\t/* if error, return error right away */\n\t\tif (result != ISC_R_SUCCESS)\n\t\t\treturn (result);\n\t} /* end of while loop */\n\n\treturn (result);\n}\n\n/*\n * DLZ methods\n */\nisc_result_t\ndlz_allowzonexfr(void *dbdata, const char *name, const char *client) {\n\tisc_result_t result;\n\tchar *path;\n\tstruct stat\tsb;\n\tconfig_data_t *cd;\n\tpath = NULL;\n\n\tcd = (config_data_t *) dbdata;\n\n\tif (create_path(name, NULL, client, cd, &path) != ISC_R_SUCCESS) {\n\t\treturn (ISC_R_NOTFOUND);\n\t}\n\n\tif (stat(path, &sb) != 0) {\n\t\tresult = ISC_R_NOTFOUND;\n\t\tgoto complete_AXFR;\n\t}\n\n\tif ((sb.st_mode & S_IFREG) != 0) {\n\t\tresult = ISC_R_SUCCESS;\n\t\tgoto complete_AXFR;\n\t}\n\n\tresult = ISC_R_NOTFOUND;\n\n complete_AXFR:\n\tfree(path);\n\treturn (result);\n}\n\nisc_result_t\ndlz_allnodes(const char *zone, void *dbdata, dns_sdlzallnodes_t *allnodes) {\n\tisc_result_t result;\n\tdlist_t *dir_list;\n\tconfig_data_t *cd = (config_data_t *) dbdata;\n\tchar *basepath;\n\tunsigned int basepathlen;\n\tstruct stat\tsb;\n\tdir_t dir;\n\tdir_entry_t *dir_entry;\n\tdir_entry_t *next_de;\n\n\tbasepath = NULL;\n\tdir_list = NULL;\n\n\t/* allocate memory for list */\n\tdir_list = malloc(sizeof(dlist_t));\n\tif (dir_list == NULL) {\n\t\tresult = ISC_R_NOTFOUND;\n\t\tgoto complete_allnds;\n\t}\n\n\t/* initialize list */\n\tDLZ_LIST_INIT(*dir_list);\n\n\tif (create_path(zone, NULL, NULL, cd, &basepath) != ISC_R_SUCCESS) {\n\t\tresult = ISC_R_NOTFOUND;\n\t\tgoto complete_allnds;\n\t}\n\n\t/* remove path separator at end of path so stat works properly */\n\tbasepathlen = strlen(basepath);\n\n\tif (stat(basepath, &sb) != 0) {\n\t\tresult = ISC_R_NOTFOUND;\n\t\tgoto complete_allnds;\n\t}\n\n\tif ((sb.st_mode & S_IFDIR) == 0) {\n\t\tresult = ISC_R_NOTFOUND;\n\t\tgoto complete_allnds;\n\t}\n\n\t/* initialize and open directory */\n\tdir_init(&dir);\n\tresult = dir_open(&dir, basepath);\n\n\t/* if directory open failed, return error. */\n\tif (result != ISC_R_SUCCESS) {\n\t\tcd->log(ISC_LOG_ERROR,\n\t\t\t\"Unable to open %s directory to read entries.\",\n\t\t\tbasepath);\n\t\tresult = ISC_R_FAILURE;\n\t\tgoto complete_allnds;\n\t}\n\n\t/* process the directory */\n\tresult = process_dir(&dir, allnodes, cd, dir_list, basepathlen);\n\n\t/* close the directory */\n\tdir_close(&dir);\n\n\tif (result != ISC_R_SUCCESS)\n\t\tgoto complete_allnds;\n\n\t/* get first dir entry from list. */\n\tdir_entry = DLZ_LIST_HEAD(*dir_list);\n\twhile (dir_entry != NULL) {\n\t\tresult = dir_open(&dir, dir_entry->dirpath);\n\t\t/* if directory open failed, return error. */\n\t\tif (result != ISC_R_SUCCESS) {\n\t\t\tcd->log(ISC_LOG_ERROR,\n\t\t\t\t\"Unable to open %s \"\n\t\t\t\t\"directory to read entries.\", basepath);\n\t\t\tresult = ISC_R_FAILURE;\n\t\t\tgoto complete_allnds;\n\t\t}\n\n\t\t/* process the directory */\n\t\tresult = process_dir(&dir, allnodes, cd, dir_list, basepathlen);\n\n\t\t/* close the directory */\n\t\tdir_close(&dir);\n\n\t\tif (result != ISC_R_SUCCESS)\n\t\t\tgoto complete_allnds;\n\n\t\tdir_entry = DLZ_LIST_NEXT(dir_entry, link);\n\t} /* end while */\n\n complete_allnds:\n\tif (dir_list != NULL) {\n\t\t/* clean up entries from list. */\n\t\tdir_entry = DLZ_LIST_HEAD(*dir_list);\n\t\twhile (dir_entry != NULL) {\n\t\t\tnext_de = DLZ_LIST_NEXT(dir_entry, link);\n\t\t\tfree(dir_entry);\n\t\t\tdir_entry = next_de;\n\t\t} /* end while */\n\t\tfree(dir_list);\n\t}\n\n\tif (basepath != NULL)\n\t\tfree(basepath);\n\n\treturn (result);\n}\n\n#if DLZ_DLOPEN_VERSION < 3\nisc_result_t\ndlz_findzonedb(void *dbdata, const char *name)\n#else\nisc_result_t\ndlz_findzonedb(void *dbdata, const char *name,\n\t       dns_clientinfomethods_t *methods,\n\t       dns_clientinfo_t *clientinfo)\n#endif\n{\n\n\tisc_result_t result;\n\tconfig_data_t *cd = (config_data_t *) dbdata;\n\tchar *path;\n\tstruct stat sb;\n\tpath = NULL;\n\n#if DLZ_DLOPEN_VERSION >= 3\n\tUNUSED(methods);\n\tUNUSED(clientinfo);\n#endif\n\n\tif (create_path(name, NULL, NULL, cd, &path) != ISC_R_SUCCESS)\n\t\treturn (ISC_R_NOTFOUND);\n\n\tcd->log(ISC_LOG_DEBUG(1),\n\t\t\"Filesystem driver Findzone() Checking for path: '%s'\\n\", path);\n\n\tif (stat(path, &sb) != 0) {\n\t\tresult = ISC_R_NOTFOUND;\n\t\tgoto complete_FZ;\n\t}\n\n\tif ((sb.st_mode & S_IFDIR) != 0) {\n\t\tresult = ISC_R_SUCCESS;\n\t\tgoto complete_FZ;\n\t}\n\n\tresult = ISC_R_NOTFOUND;\n\n complete_FZ:\n\n\tfree(path);\n\treturn (result);\n}\n\n#if DLZ_DLOPEN_VERSION == 1\nisc_result_t\ndlz_lookup(const char *zone, const char *name,\n\t   void *dbdata, dns_sdlzlookup_t *lookup)\n#else\nisc_result_t\ndlz_lookup(const char *zone, const char *name,\n\t   void *dbdata, dns_sdlzlookup_t *lookup,\n\t   dns_clientinfomethods_t *methods,\n\t   dns_clientinfo_t *clientinfo)\n#endif\n{\n\tisc_result_t result = ISC_R_NOTFOUND;\n\tconfig_data_t *cd = (config_data_t *) dbdata;\n\tchar *path;\n\tstruct stat sb;\n\tdir_t dir;\n\tpath = NULL;\n\n\tUNUSED(lookup);\n#if DLZ_DLOPEN_VERSION >= 2\n\tUNUSED(methods);\n\tUNUSED(clientinfo);\n#endif\n\n\tif (strcmp(name, \"*\") == 0)\n\t\t/*\n\t\t * handle filesystem's special wildcard \"-\"\n\t\t */\n\t\tresult = create_path(zone, \"-\", NULL, cd, &path);\n\telse\n\t\tresult = create_path(zone, name, NULL, cd, &path);\n\n\tif (result != ISC_R_SUCCESS)\n\t\treturn (ISC_R_NOTFOUND);\n\n\t/* remove path separator at end of path so stat works properly */\n\tpath[strlen(path)-1] = '\\0';\n\n\tcd->log(ISC_LOG_DEBUG(1),\n\t\t\"Filesystem driver lookup() Checking for path: '%s'\\n\", path);\n\n\tif (stat(path, &sb) != 0) {\n\t\tresult = ISC_R_NOTFOUND;\n\t\tgoto complete_lkup;\n\t}\n\n\tif ((sb.st_mode & S_IFDIR) == 0) {\n\t\tresult = ISC_R_NOTFOUND;\n\t\tgoto complete_lkup;\n\t}\n\n\t/* initialize and open directory */\n\tdir_init(&dir);\n\tresult = dir_open(&dir, path);\n\n\t/* if directory open failed, return error. */\n\tif (result != ISC_R_SUCCESS) {\n\t\tcd->log(ISC_LOG_ERROR,\n\t\t\t\"Unable to open %s directory to read entries.\", path);\n\t\tresult = ISC_R_FAILURE;\n\t\tgoto complete_lkup;\n\t}\n\n\t/* process any records in the directory */\n\tresult = process_dir(&dir, lookup, cd, NULL, 0);\n\n\t/* close the directory */\n\tdir_close(&dir);\n\n complete_lkup:\n\n\tfree(path);\n\treturn (result);\n}\n\nisc_result_t\ndlz_create(const char *dlzname, unsigned int argc, char *argv[],\n\t   void **dbdata, ...)\n{\n\tisc_result_t result = ISC_R_NOMEMORY;\n\tconfig_data_t *cd;\n\tchar *endp;\n\tint len;\n\tchar pathsep;\n\tconst char *helper_name;\n\tva_list ap;\n\n\tUNUSED(dlzname);\n\n\t/* allocate memory for our config data and helper functions */\n\tcd = calloc(1, sizeof(config_data_t));\n\tif (cd == NULL)\n\t\tgoto no_mem;\n\n\t/* zero the memory */\n\tmemset(cd, 0, sizeof(config_data_t));\n\n\t/* Fill in the helper functions */\n\tva_start(ap, dbdata);\n\twhile ((helper_name = va_arg(ap, const char*)) != NULL)\n\t\tb9_add_helper(cd, helper_name, va_arg(ap, void*));\n\tva_end(ap);\n\n\t/* we require 5 command line args. */\n\tif (argc != 6) {\n\t\tcd->log(ISC_LOG_ERROR,\n\t\t\t\"Filesystem driver requires \"\n\t\t\t\"6 command line args.\");\n\t\tresult = ISC_R_FAILURE;\n\t\tgoto free_cd;\n\t}\n\n\tif (strlen(argv[5]) > 1) {\n\t\tcd->log(ISC_LOG_ERROR,\n\t\t\t\"Filesystem driver can only \"\n\t\t\t\"accept a single character for separator.\");\n\t\tresult = ISC_R_FAILURE;\n\t\tgoto free_cd;\n\t}\n\n\t/* verify base dir ends with '/' or '\\' */\n\tlen = strlen(argv[1]);\n\tif (argv[1][len-1] != '\\\\' && argv[1][len-1] != '/') {\n\t\tcd->log(ISC_LOG_ERROR,\n\t\t\t\"Base dir parameter for filesystem driver \"\n\t\t\t\"should end with %s\",\n\t\t\t\"either '/' or '\\\\' \");\n\t\tresult = ISC_R_FAILURE;\n\t\tgoto free_cd;\n\t}\n\n\t/* determine and save path separator for later */\n\tif (argv[1][len-1] == '\\\\')\n\t\tpathsep = '\\\\';\n\telse\n\t\tpathsep = '/';\n\n\tcd->pathsep = pathsep;\n\n\t/* get and store our base directory */\n\tcd->basedir = strdup(argv[1]);\n\tif (cd->basedir == NULL)\n\t\tgoto no_mem;\n\tcd->basedirsize = strlen(cd->basedir);\n\n\t/* get and store our data sub-dir */\n\tcd->datadir = strdup(argv[2]);\n\tif (cd->datadir == NULL)\n\t\tgoto no_mem;\n\tcd->datadirsize = strlen(cd->datadir);\n\n\t/* get and store our zone xfr sub-dir */\n\tcd->xfrdir = strdup(argv[3]);\n\tif (cd->xfrdir == NULL)\n\t\tgoto no_mem;\n\tcd->xfrdirsize = strlen(cd->xfrdir);\n\n\t/* get and store our directory split count */\n\tcd->splitcnt = strtol(argv[4], &endp, 10);\n\tif (*endp != '\\0' || cd->splitcnt < 0)\n\t\tcd->log(ISC_LOG_ERROR,\n\t\t\t\"Directory split count must be zero (0) \"\n\t\t\t\"or a postive number\");\n\n\t/* get and store our separator character */\n\tcd->separator = *argv[5];\n\n\t/* pass back config data */\n\t*dbdata = cd;\n\n\t/* return success */\n\treturn (ISC_R_SUCCESS);\n\n\t/* handle no memory error */\n no_mem:\n\n\t/* write error message */\n\tif (cd != NULL && cd->log != NULL)\n\t\tcd->log(ISC_LOG_ERROR,\n\t\t\t\"filesystem_dynamic: Filesystem driver unable to \"\n\t\t\t\"allocate memory for config data.\");\n\n free_cd:\n\t/* if we allocated a config data object clean it up */\n\tif (cd != NULL)\n\t\tdlz_destroy(cd);\n\n\t/* return error */\n\treturn (result);\n}\n\nvoid\ndlz_destroy(void *dbdata) {\n\tconfig_data_t *cd;\n\n\tcd = (config_data_t *) dbdata;\n\n\t/*\n\t * free memory for each section of config data that was\n\t * allocated\n\t */\n\tif (cd->basedir != NULL)\n\t\tfree(cd->basedir);\n\n\tif (cd->datadir != NULL)\n\t\tfree(cd->datadir);\n\n\tif (cd->xfrdir != NULL)\n\t\tfree(cd->xfrdir);\n\n\t/* free config data memory */\n\tfree(cd);\n}\n\n/*\n * Return the version of the API\n */\nint\ndlz_version(unsigned int *flags) {\n\tUNUSED(flags);\n\treturn (DLZ_DLOPEN_VERSION);\n}\n\n/*\n * Register a helper function from the bind9 dlz_dlopen driver\n */\nstatic void\nb9_add_helper(struct config_data *cd, const char *helper_name, void *ptr) {\n\tif (strcmp(helper_name, \"log\") == 0)\n\t\tcd->log = (log_t *)ptr;\n\tif (strcmp(helper_name, \"putrr\") == 0)\n\t\tcd->putrr = (dns_sdlz_putrr_t *)ptr;\n\tif (strcmp(helper_name, \"putnamedrr\") == 0)\n\t\tcd->putnamedrr = (dns_sdlz_putnamedrr_t *)ptr;\n\tif (strcmp(helper_name, \"writeable_zone\") == 0)\n\t\tcd->writeable_zone = (dns_dlz_writeablezone_t *)ptr;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/contrib/dlz/modules/wildcard/dlz_wildcard_dynamic.c": "/*\n * Copyright (C) 2002 Stichting NLnet, Netherlands, stichting@nlnet.nl.\n * Copyright (C) 2012 Vadim Goncharov, Russia, vadim_nuclight@mail.ru.\n *\n * Permission to use, copy, modify, and distribute this software for any\n * purpose with or without fee is hereby granted, provided that the\n * above copyright notice and this permission notice appear in all\n * copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND STICHTING NLNET\n * DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL\n * STICHTING NLNET BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR\n * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS\n * OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE\n * OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE\n * USE OR PERFORMANCE OF THIS SOFTWARE.\n *\n * The development of Dynamically Loadable Zones (DLZ) for Bind 9 was\n * conceived and contributed by Rob Butler.\n *\n * Permission to use, copy, modify, and distribute this software for any\n * purpose with or without fee is hereby granted, provided that the\n * above copyright notice and this permission notice appear in all\n * copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND ROB BUTLER\n * DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL\n * ROB BUTLER BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR\n * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS\n * OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE\n * OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE\n * USE OR PERFORMANCE OF THIS SOFTWARE.\n */\n\n/*\n * Copyright (C) 1999-2001, 2013, 2016  Internet Systems Consortium, Inc. (\"ISC\")\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\n\n/*\n * This provides the externally loadable wildcard DLZ module.\n */\n\n#include <inttypes.h>\n#include <stdbool.h>\n#include <stdio.h>\n#include <string.h>\n#include <stdarg.h>\n#include <stdlib.h>\n\n#include <dlz_minimal.h>\n#include <dlz_list.h>\n#include <dlz_dbi.h>\n\n#include <ctype.h>\n\n#define DE_CONST(konst, var) \\\n\tdo { \\\n\t\tunion { const void *k; void *v; } _u; \\\n\t\t_u.k = konst; \\\n\t\tvar = _u.v; \\\n\t} while (0)\n\n/* fnmatch() return values. */\n#define\tFNM_NOMATCH\t1\t/* Match failed. */\n\n/* fnmatch() flags. */\n#define\tFNM_NOESCAPE\t0x01\t/* Disable backslash escaping. */\n#define\tFNM_PATHNAME\t0x02\t/* Slash must be matched by slash. */\n#define\tFNM_PERIOD\t0x04\t/* Period must be matched by period. */\n#define\tFNM_LEADING_DIR\t0x08\t/* Ignore /<tail> after Imatch. */\n#define\tFNM_CASEFOLD\t0x10\t/* Case insensitive search. */\n#define\tFNM_IGNORECASE\tFNM_CASEFOLD\n#define\tFNM_FILE_NAME\tFNM_PATHNAME\n\n/*\n * Our data structures.\n */\n\ntypedef struct named_rr nrr_t;\ntypedef DLZ_LIST(nrr_t) rr_list_t;\n\ntypedef struct config_data {\n\tchar\t\t*zone_pattern;\n\tchar\t\t*axfr_pattern;\n\trr_list_t\trrs_list;\n\tchar\t\t*zone;\n\tchar\t\t*record;\n\tchar\t\t*client;\n\n\t/* Helper functions from the dlz_dlopen driver */\n\tlog_t *log;\n\tdns_sdlz_putrr_t *putrr;\n\tdns_sdlz_putnamedrr_t *putnamedrr;\n\tdns_dlz_writeablezone_t *writeable_zone;\n} config_data_t;\n\nstruct named_rr {\n\tchar\t\t*name;\n\tchar\t\t*type;\n\tint\t\tttl;\n\tquery_list_t\t*data;\n\tDLZ_LINK(nrr_t)\tlink;\n};\n\n/*\n * Forward references\n */\nstatic int\nrangematch(const char *, char, int, char **);\n\nstatic int\nfnmatch(const char *pattern, const char *string, int flags);\n\nstatic void\nb9_add_helper(struct config_data *cd, const char *helper_name, void *ptr);\n\nstatic const char *\nshortest_match(const char *pattern, const char *string);\n\nisc_result_t\ndlz_allnodes(const char *zone, void *dbdata, dns_sdlzallnodes_t *allnodes) {\n\tconfig_data_t *cd = (config_data_t *) dbdata;\n\tisc_result_t result;\n\tchar *querystring = NULL;\n\tnrr_t *nrec;\n\tint i = 0;\n\n\tDE_CONST(zone, cd->zone);\n\n\t/* Write info message to log */\n\tcd->log(ISC_LOG_DEBUG(1),\n\t\t\"dlz_wildcard allnodes called for zone '%s'\", zone);\n\n\tresult = ISC_R_FAILURE;\n\n\tnrec = DLZ_LIST_HEAD(cd->rrs_list);\n\twhile (nrec != NULL) {\n\t\tcd->record = nrec->name;\n\n\t\tquerystring = build_querystring(nrec->data);\n\n\t\tif (querystring == NULL) {\n\t\t\tresult = ISC_R_NOMEMORY;\n\t\t\tgoto done;\n\t\t}\n\n\t\tcd->log(ISC_LOG_DEBUG(2),\n\t\t\t\"dlz_wildcard allnodes entry num %d: calling \"\n\t\t\t\"putnamedrr(name=%s type=%s ttl=%d qs=%s)\",\n\t\t\ti++, nrec->name, nrec->type, nrec->ttl, querystring);\n\n\t\tresult = cd->putnamedrr(allnodes, nrec->name, nrec->type,\n\t\t\t\t\tnrec->ttl, querystring);\n\t\tif (result != ISC_R_SUCCESS)\n\t\t\tgoto done;\n\n\t\tnrec = DLZ_LIST_NEXT(nrec, link);\n\t}\n\ndone:\n\tcd->zone = NULL;\n\n\tif (querystring != NULL)\n\t\tfree(querystring);\n\n\treturn (result);\n}\n\nisc_result_t\ndlz_allowzonexfr(void *dbdata, const char *name, const char *client) {\n\tconfig_data_t *cd = (config_data_t *) dbdata;\n\n\tUNUSED(name);\n\n\t/* Write info message to log */\n\tcd->log(ISC_LOG_DEBUG(1),\n\t\t\"dlz_wildcard allowzonexfr called for client '%s'\", client);\n\n\tif (fnmatch(cd->axfr_pattern, client, FNM_CASEFOLD) == 0)\n\t\treturn (ISC_R_SUCCESS);\n\telse\n\t\treturn (ISC_R_NOTFOUND);\n}\n\n#if DLZ_DLOPEN_VERSION < 3\nisc_result_t\ndlz_findzonedb(void *dbdata, const char *name)\n#else\nisc_result_t\ndlz_findzonedb(void *dbdata, const char *name,\n\t       dns_clientinfomethods_t *methods,\n\t       dns_clientinfo_t *clientinfo)\n#endif\n{\n\tconfig_data_t *cd = (config_data_t *) dbdata;\n\tconst char *p;\n\n#if DLZ_DLOPEN_VERSION >= 3\n\tUNUSED(methods);\n\tUNUSED(clientinfo);\n#endif\n\n\tp = shortest_match(cd->zone_pattern, name);\n\tif (p == NULL)\n\t\treturn (ISC_R_NOTFOUND);\n\n\t/* Write info message to log */\n\tcd->log(ISC_LOG_DEBUG(1),\n\t\t\"dlz_wildcard findzonedb matched '%s'\", p);\n\n\treturn (ISC_R_SUCCESS);\n}\n\n#if DLZ_DLOPEN_VERSION == 1\nisc_result_t\ndlz_lookup(const char *zone, const char *name,\n\t   void *dbdata, dns_sdlzlookup_t *lookup)\n#else\nisc_result_t\ndlz_lookup(const char *zone, const char *name,\n\t   void *dbdata, dns_sdlzlookup_t *lookup,\n\t   dns_clientinfomethods_t *methods,\n\t   dns_clientinfo_t *clientinfo)\n#endif\n{\n\tisc_result_t result;\n\tconfig_data_t *cd = (config_data_t *) dbdata;\n\tchar *querystring = NULL;\n\tconst char *p;\n\tchar *namebuf;\n\tnrr_t *nrec;\n\tbool origin = true;\n\n#if DLZ_DLOPEN_VERSION >= 2\n\tUNUSED(methods);\n\tUNUSED(clientinfo);\n#endif\n\n\tp = shortest_match(cd->zone_pattern, zone);\n\tif (p == NULL)\n\t\treturn (ISC_R_NOTFOUND);\n\n\tDE_CONST(name, cd->record);\n\tDE_CONST(p, cd->zone);\n\n\tif ((p != zone) && (strcmp(name, \"@\") == 0 || strcmp(name, zone) == 0))\n\t{\n\t\tsize_t len = p - zone;\n\t\tnamebuf = malloc(len);\n\t\tif (namebuf == NULL)\n\t\t\treturn (ISC_R_NOMEMORY);\n\t\tstrncpy(namebuf, zone, len - 1);\n\t\tnamebuf[len - 1] = '\\0';\n\t\tcd->record = namebuf;\n\t\torigin = false;\n\t} else if (p == zone)\n\t\tcd->record = \"@\";\n\n\t/* Write info message to log */\n\tcd->log(ISC_LOG_DEBUG(1),\n\t\t\"dlz_wildcard_dynamic: lookup for '%s' in '%s': \"\n\t\t\"trying '%s' in '%s'\",\n\t\tname, zone, cd->record, cd->zone);\n\n\tresult = ISC_R_NOTFOUND;\n\tnrec = DLZ_LIST_HEAD(cd->rrs_list);\n\twhile (nrec != NULL) {\n\t\tnrr_t *next = DLZ_LIST_NEXT(nrec, link);\n\t\tif (strcmp(cd->record, nrec->name) == 0) {\n\t\t\t/* We handle authority data in dlz_authority() */\n\t\t\tif (strcmp(nrec->type, \"SOA\") == 0 ||\n\t\t\t    strcmp(nrec->type, \"NS\") == 0)\n\t\t\t{\n\t\t\t\tnrec = next;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tquerystring = build_querystring(nrec->data);\n\t\t\tif (querystring == NULL) {\n\t\t\t\tresult = ISC_R_NOMEMORY;\n\t\t\t\tgoto done;\n\t\t\t}\n\n\t\t\tresult = cd->putrr(lookup, nrec->type,\n\t\t\t\t\t   nrec->ttl, querystring);\n\t\t\tif (result != ISC_R_SUCCESS)\n\t\t\t\tgoto done;\n\n\t\t\tresult = ISC_R_SUCCESS;\n\n\t\t\tfree(querystring);\n\t\t\tquerystring = NULL;\n\t\t}\n\t\tnrec = next;\n\t}\n\ndone:\n\tcd->zone = NULL;\n\tcd->record = NULL;\n\n\tif (querystring != NULL)\n\t\tfree(querystring);\n\n\treturn (result);\n}\n\nisc_result_t\ndlz_authority(const char *zone, void *dbdata, dns_sdlzlookup_t *lookup) {\n\tisc_result_t result;\n\tconfig_data_t *cd = (config_data_t *) dbdata;\n\tchar *querystring = NULL;\n\tnrr_t *nrec;\n\tconst char *p, *name = \"@\";\n\n\tp = shortest_match(cd->zone_pattern, zone);\n\tif (p == NULL)\n\t\treturn (ISC_R_NOTFOUND);\n\n\tDE_CONST(p, cd->zone);\n\n\t/* Write info message to log */\n\tcd->log(ISC_LOG_DEBUG(1),\n\t\t\"dlz_wildcard_dynamic: authority for '%s'\", zone);\n\n\tresult = ISC_R_NOTFOUND;\n\tnrec = DLZ_LIST_HEAD(cd->rrs_list);\n\twhile (nrec != NULL) {\n\t\tbool origin;\n\t\tif (strcmp(\"@\", nrec->name) == 0) {\n\t\t\tisc_result_t presult;\n\n\t\t\tquerystring = build_querystring(nrec->data);\n\t\t\tif (querystring == NULL) {\n\t\t\t\tresult = ISC_R_NOMEMORY;\n\t\t\t\tgoto done;\n\t\t\t}\n\n\t\t\tpresult = cd->putrr(lookup, nrec->type,\n\t\t\t\t\t   nrec->ttl, querystring);\n\t\t\tif (presult != ISC_R_SUCCESS) {\n\t\t\t\tresult = presult;\n\t\t\t\tgoto done;\n\t\t\t}\n\n\t\t\tresult = ISC_R_SUCCESS;\n\n\t\t\tfree(querystring);\n\t\t\tquerystring = NULL;\n\t\t}\n\t\tnrec = DLZ_LIST_NEXT(nrec, link);\n\t}\n\ndone:\n\tcd->zone = NULL;\n\n\tif (querystring != NULL)\n\t\tfree(querystring);\n\n\treturn (result);\n}\n\nstatic void\ndestroy_rrlist(config_data_t *cd) {\n\tnrr_t *trec, *nrec;\n\n\tnrec = DLZ_LIST_HEAD(cd->rrs_list);\n\n\twhile (nrec != NULL) {\n\t\ttrec = nrec;\n\n\t\tdestroy_querylist(&trec->data);\n\n\t\tif (trec->name != NULL)\n\t\t\tfree(trec->name);\n\t\tif (trec->type != NULL)\n\t\t\tfree(trec->type);\n\t\ttrec->name = trec->type = NULL;\n\n\t\t/* Get the next record, before we destroy this one. */\n\t\tnrec = DLZ_LIST_NEXT(nrec, link);\n\n\t\tfree(trec);\n\t}\n}\n\nisc_result_t\ndlz_create(const char *dlzname, unsigned int argc, char *argv[],\n\t   void **dbdata, ...)\n{\n\tconfig_data_t *cd;\n\tchar *endp;\n\tint i, def_ttl;\n\tnrr_t *trec = NULL;\n\tisc_result_t result;\n\tconst char *helper_name;\n\tva_list ap;\n\n\tif (argc < 8 || argc % 4 != 0)\n\t\treturn (ISC_R_FAILURE);\n\n\tcd = calloc(1, sizeof(config_data_t));\n\tif (cd == NULL)\n\t\treturn (ISC_R_NOMEMORY);\n\tmemset(cd, 0, sizeof(config_data_t));\n\n\t/* Fill in the helper functions */\n\tva_start(ap, dbdata);\n\twhile ((helper_name = va_arg(ap, const char*)) != NULL)\n\t\tb9_add_helper(cd, helper_name, va_arg(ap, void*));\n\tva_end(ap);\n\n\t/*\n\t * Write info message to log\n\t */\n\tcd->log(ISC_LOG_INFO,\n\t\t\"Loading '%s' using DLZ_wildcard driver. \"\n\t\t\"Zone: %s, AXFR allowed for: %s, $TTL: %s\",\n\t\tdlzname, argv[1], argv[2], argv[3]);\n\n\t/* initialize the records list here to simplify cleanup */\n\tDLZ_LIST_INIT(cd->rrs_list);\n\n\tcd->zone_pattern = strdup(argv[1]);\n\tcd->axfr_pattern = strdup(argv[2]);\n\tif (cd->zone_pattern == NULL || cd->axfr_pattern == NULL) {\n\t\tresult = ISC_R_NOMEMORY;\n\t\tgoto cleanup;\n\t}\n\n\tdef_ttl = strtol(argv[3], &endp, 10);\n\tif (*endp != '\\0' || def_ttl < 0) {\n\t\tdef_ttl = 3600;\n\t\tcd->log(ISC_LOG_ERROR, \"default TTL invalid, using 3600\");\n\t}\n\n\tfor (i = 4; i < argc; i += 4) {\n\t\tresult = ISC_R_NOMEMORY;\n\n\t\ttrec = malloc(sizeof(nrr_t));\n\t\tif (trec == NULL)\n\t\t\tgoto full_cleanup;\n\n\t\tmemset(trec, 0, sizeof(nrr_t));\n\n\t\t/* Initialize the record link */\n\t\tDLZ_LINK_INIT(trec, link);\n\t\t/* Append the record to the list */\n\t\tDLZ_LIST_APPEND(cd->rrs_list, trec, link);\n\n\t\ttrec->name = strdup(argv[i]);\n\t\tif (trec->name == NULL)\n\t\t\tgoto full_cleanup;\n\n\t\ttrec->type = strdup(argv[i + 2]);\n\t\tif (trec->type == NULL)\n\t\t\tgoto full_cleanup;\n\n\t\ttrec->ttl = strtol(argv[i + 1], &endp, 10);\n\t\tif (argv[i + 1][0] == '\\0' || *endp != '\\0' || trec->ttl < 0)\n\t\t\ttrec->ttl = def_ttl;\n\n\t\tresult = build_querylist(argv[i + 3], &cd->zone,\n\t\t\t\t\t &cd->record, &cd->client,\n\t\t\t\t\t &trec->data, 0, cd->log);\n\t\t/* If unsuccessful, log err msg and cleanup */\n\t\tif (result != ISC_R_SUCCESS) {\n\t\t\tcd->log(ISC_LOG_ERROR,\n\t\t\t\t\"Could not build RR data list at argv[%d]\",\n\t\t\t\ti + 3);\n\t\t\tgoto full_cleanup;\n\t\t}\n\t}\n\n\t*dbdata = cd;\n\n\treturn (ISC_R_SUCCESS);\n\nfull_cleanup:\n\tdestroy_rrlist(cd);\n\ncleanup:\n\tif (cd->zone_pattern != NULL)\n\t\tfree(cd->zone_pattern);\n\tif (cd->axfr_pattern != NULL)\n\t\tfree(cd->axfr_pattern);\n\tfree(cd);\n\n\treturn (result);\n}\n\nvoid\ndlz_destroy(void *dbdata) {\n\tconfig_data_t *cd = (config_data_t *) dbdata;\n\n\t/*\n\t * Write debugging message to log\n\t */\n\tcd->log(ISC_LOG_DEBUG(2), \"Unloading DLZ_wildcard driver.\");\n\n\tdestroy_rrlist(cd);\n\n\tfree(cd->zone_pattern);\n\tfree(cd->axfr_pattern);\n\tfree(cd);\n}\n\n\n/*\n * Return the version of the API\n */\nint\ndlz_version(unsigned int *flags) {\n\tUNUSED(flags);\n\t/* XXX: ok to set DNS_SDLZFLAG_THREADSAFE here? */\n\treturn (DLZ_DLOPEN_VERSION);\n}\n\n/*\n * Register a helper function from the bind9 dlz_dlopen driver\n */\nstatic void\nb9_add_helper(struct config_data *cd, const char *helper_name, void *ptr) {\n\tif (strcmp(helper_name, \"log\") == 0)\n\t\tcd->log = (log_t *)ptr;\n\tif (strcmp(helper_name, \"putrr\") == 0)\n\t\tcd->putrr = (dns_sdlz_putrr_t *)ptr;\n\tif (strcmp(helper_name, \"putnamedrr\") == 0)\n\t\tcd->putnamedrr = (dns_sdlz_putnamedrr_t *)ptr;\n\tif (strcmp(helper_name, \"writeable_zone\") == 0)\n\t\tcd->writeable_zone = (dns_dlz_writeablezone_t *)ptr;\n}\n\nstatic const char *\nshortest_match(const char *pattern, const char *string) {\n\tconst char *p = string;\n\tif (pattern == NULL || p == NULL || *p == '\\0')\n\t\treturn (NULL);\n\n\tp += strlen(p);\n\twhile (p-- > string) {\n\t\tif (*p == '.') {\n\t\t\tif (fnmatch(pattern, p + 1, FNM_CASEFOLD) == 0)\n\t\t\t\treturn (p + 1);\n\t\t}\n\t}\n\tif (fnmatch(pattern, string, FNM_CASEFOLD) == 0)\n\t\treturn (string);\n\n\treturn (NULL);\n}\n\n/*\n * The helper functions stolen from the FreeBSD kernel (sys/libkern/fnmatch.c).\n *\n * Why don't we use fnmatch(3) from libc? Because it is not thread-safe, and\n * it is not thread-safe because it supports multibyte characters. But here,\n * in BIND, we want to be thread-safe and don't need multibyte - DNS names are\n * always ASCII.\n */\n#define\tEOS\t'\\0'\n\n#define RANGE_MATCH     1\n#define RANGE_NOMATCH   0\n#define RANGE_ERROR     (-1)\n\nstatic int\nfnmatch(const char *pattern, const char *string, int flags) {\n\tconst char *stringstart;\n\tchar *newp;\n\tchar c, test;\n\n\tfor (stringstart = string;;)\n\t\tswitch (c = *pattern++) {\n\t\tcase EOS:\n\t\t\tif ((flags & FNM_LEADING_DIR) && *string == '/')\n\t\t\t\treturn (0);\n\t\t\treturn (*string == EOS ? 0 : FNM_NOMATCH);\n\t\tcase '?':\n\t\t\tif (*string == EOS)\n\t\t\t\treturn (FNM_NOMATCH);\n\t\t\tif (*string == '/' && (flags & FNM_PATHNAME))\n\t\t\t\treturn (FNM_NOMATCH);\n\t\t\tif (*string == '.' && (flags & FNM_PERIOD) &&\n\t\t\t    (string == stringstart ||\n\t\t\t    ((flags & FNM_PATHNAME) && *(string - 1) == '/')))\n\t\t\t\treturn (FNM_NOMATCH);\n\t\t\t++string;\n\t\t\tbreak;\n\t\tcase '*':\n\t\t\tc = *pattern;\n\t\t\t/* Collapse multiple stars. */\n\t\t\twhile (c == '*')\n\t\t\t\tc = *++pattern;\n\n\t\t\tif (*string == '.' && (flags & FNM_PERIOD) &&\n\t\t\t    (string == stringstart ||\n\t\t\t    ((flags & FNM_PATHNAME) && *(string - 1) == '/')))\n\t\t\t\treturn (FNM_NOMATCH);\n\n\t\t\t/* Optimize for pattern with * at end or before /. */\n\t\t\tif (c == EOS)\n\t\t\t\tif (flags & FNM_PATHNAME)\n\t\t\t\t\treturn ((flags & FNM_LEADING_DIR) ||\n\t\t\t\t\t    index(string, '/') == NULL ?\n\t\t\t\t\t    0 : FNM_NOMATCH);\n\t\t\t\telse\n\t\t\t\t\treturn (0);\n\t\t\telse if (c == '/' && flags & FNM_PATHNAME) {\n\t\t\t\tif ((string = index(string, '/')) == NULL)\n\t\t\t\t\treturn (FNM_NOMATCH);\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t/* General case, use recursion. */\n\t\t\twhile ((test = *string) != EOS) {\n\t\t\t\tif (!fnmatch(pattern, string,\n\t\t\t\t\t     flags & ~FNM_PERIOD))\n\t\t\t\t\treturn (0);\n\t\t\t\tif (test == '/' && flags & FNM_PATHNAME)\n\t\t\t\t\tbreak;\n\t\t\t\t++string;\n\t\t\t}\n\t\t\treturn (FNM_NOMATCH);\n\t\tcase '[':\n\t\t\tif (*string == EOS)\n\t\t\t\treturn (FNM_NOMATCH);\n\t\t\tif (*string == '/' && (flags & FNM_PATHNAME))\n\t\t\t\treturn (FNM_NOMATCH);\n\t\t\tif (*string == '.' && (flags & FNM_PERIOD) &&\n\t\t\t    (string == stringstart ||\n\t\t\t    ((flags & FNM_PATHNAME) && *(string - 1) == '/')))\n\t\t\t\treturn (FNM_NOMATCH);\n\n\t\t\tswitch (rangematch(pattern, *string, flags, &newp)) {\n\t\t\tcase RANGE_ERROR:\n\t\t\t\tgoto norm;\n\t\t\tcase RANGE_MATCH:\n\t\t\t\tpattern = newp;\n\t\t\t\tbreak;\n\t\t\tcase RANGE_NOMATCH:\n\t\t\t\treturn (FNM_NOMATCH);\n\t\t\t}\n\t\t\t++string;\n\t\t\tbreak;\n\t\tcase '\\\\':\n\t\t\tif (!(flags & FNM_NOESCAPE)) {\n\t\t\t\tif ((c = *pattern++) == EOS) {\n\t\t\t\t\tc = '\\\\';\n\t\t\t\t\t--pattern;\n\t\t\t\t}\n\t\t\t}\n\t\t\t/* FALLTHROUGH */\n\t\tdefault:\n\t\tnorm:\n\t\t\tif (c == *string)\n\t\t\t\t;\n\t\t\telse if ((flags & FNM_CASEFOLD) &&\n\t\t\t\t (tolower((unsigned char)c) ==\n\t\t\t\t  tolower((unsigned char)*string)))\n\t\t\t\t;\n\t\t\telse\n\t\t\t\treturn (FNM_NOMATCH);\n\t\t\tstring++;\n\t\t\tbreak;\n\t\t}\n\t/* NOTREACHED */\n}\n\nstatic int\nrangematch(const char *pattern, char test, int flags, char **newp) {\n\tint negate, ok;\n\tchar c, c2;\n\n\t/*\n\t * A bracket expression starting with an unquoted circumflex\n\t * character produces unspecified results (IEEE 1003.2-1992,\n\t * 3.13.2).  This implementation treats it like '!', for\n\t * consistency with the regular expression syntax.\n\t * J.T. Conklin (conklin@ngai.kaleida.com)\n\t */\n\tif ( (negate = (*pattern == '!' || *pattern == '^')) )\n\t\t++pattern;\n\n\tif (flags & FNM_CASEFOLD)\n\t\ttest = tolower((unsigned char)test);\n\n\t/*\n\t * A right bracket shall lose its special meaning and represent\n\t * itself in a bracket expression if it occurs first in the list.\n\t * -- POSIX.2 2.8.3.2\n\t */\n\tok = 0;\n\tc = *pattern++;\n\tdo {\n\t\tif (c == '\\\\' && !(flags & FNM_NOESCAPE))\n\t\t\tc = *pattern++;\n\t\tif (c == EOS)\n\t\t\treturn (RANGE_ERROR);\n\n\t\tif (c == '/' && (flags & FNM_PATHNAME))\n\t\t\treturn (RANGE_NOMATCH);\n\n\t\tif (flags & FNM_CASEFOLD)\n\t\t\tc = tolower((unsigned char)c);\n\n\t\tif (*pattern == '-'\n\t\t    && (c2 = *(pattern+1)) != EOS && c2 != ']') {\n\t\t\tpattern += 2;\n\t\t\tif (c2 == '\\\\' && !(flags & FNM_NOESCAPE))\n\t\t\t\tc2 = *pattern++;\n\t\t\tif (c2 == EOS)\n\t\t\t\treturn (RANGE_ERROR);\n\n\t\t\tif (flags & FNM_CASEFOLD)\n\t\t\t\tc2 = tolower((unsigned char)c2);\n\n\t\t\tif (c <= test && test <= c2)\n\t\t\t\tok = 1;\n\t\t} else if (c == test)\n\t\t\tok = 1;\n\t} while ((c = *pattern++) != ']');\n\n\t*newp = (char *)(uintptr_t)pattern;\n\treturn (ok == negate ? RANGE_NOMATCH : RANGE_MATCH);\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/contrib/dlz/modules/wildcard/testing/named.conf": "/*\n * Copyright (C) 2013  Internet Systems Consortium, Inc. (\"ISC\")\n *\n * Permission to use, copy, modify, and/or distribute this software for any\n * purpose with or without fee is hereby granted, provided that the above\n * copyright notice and this permission notice appear in all copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND ISC DISCLAIMS ALL WARRANTIES WITH\n * REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n * AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,\n * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\n * LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE\n * OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\n * PERFORMANCE OF THIS SOFTWARE.\n */\n\ncontrols { };\n\noptions {\n\tdirectory \".\";\n\tport 5300;\n\tpid-file \"named.pid\";\n\tsession-keyfile \"session.key\";\n\tlisten-on { any; };\n\tlisten-on-v6 { none; };\n\trecursion no;\n};\n\nkey rndc_key {\n\tsecret \"1234abcd8765\";\n\talgorithm hmac-md5;\n};\n\ncontrols {\n\tinet 127.0.0.1 port 9953 allow { any; } keys { rndc_key; };\n};\n\n/*\n * This will match any zone name containing the string \"example\" and\n * ending with .com, such as \"thisexample.com\", \"exampleofthat.com\",\n * or \"anexampleoftheotherthing.com\".\n */\ndlz \"test\" {\n\tdatabase \"dlopen ../dlz_wildcard_dynamic.so\n        *example*.com 10.53.* 1800\n        @      3600    SOA   {ns3.example.nil. support.example.nil. 42 14400 7200 2592000 600}\n        @      3600    NS     ns3.example.nil.\n        @      3600    NS     ns4.example.nil.\n        @      3600    NS     ns8.example.nil.\n        @      3600    MX     {5 mail.example.nil.}\n        ftp    86400   A      192.0.0.1\n        sql    86400   A      192.0.0.2\n        tmp    {}      A      192.0.0.3\n        www    86400   A      192.0.0.3\n        www    86400   AAAA   ::1\n        txt    300     TXT    {\\\"you requested $record$ in $zone$\\\"}\n        *      86400   A      192.0.0.100\";\n};\n",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/contrib/dlz/modules/mysql/dlz_mysql_dynamic.c": "/*\n * Copyright (C) 2002 Stichting NLnet, Netherlands, stichting@nlnet.nl.\n *\n * Permission to use, copy, modify, and distribute this software for any\n * purpose with or without fee is hereby granted, provided that the\n * above copyright notice and this permission notice appear in all\n * copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND STICHTING NLNET\n * DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL\n * STICHTING NLNET BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR\n * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS\n * OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE\n * OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE\n * USE OR PERFORMANCE OF THIS SOFTWARE.\n *\n * The development of Dynamically Loadable Zones (DLZ) for BIND 9 was\n * conceived and contributed by Rob Butler.\n *\n * Permission to use, copy, modify, and distribute this software for any\n * purpose with or without fee is hereby granted, provided that the\n * above copyright notice and this permission notice appear in all\n * copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND ROB BUTLER\n * DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL\n * ROB BUTLER BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR\n * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS\n * OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE\n * OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE\n * USE OR PERFORMANCE OF THIS SOFTWARE.\n */\n\n/*\n * Copyright (C) 1999-2001, 2013, 2016  Internet Systems Consortium, Inc. (\"ISC\")\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\n\n/*\n * This provides the externally loadable MySQL DLZ module, without\n * update support\n */\n\n#include <stdio.h>\n#include <string.h>\n#include <stdarg.h>\n#include <stdlib.h>\n\n#include <dlz_minimal.h>\n#include <dlz_list.h>\n#include <dlz_dbi.h>\n#include <dlz_pthread.h>\n\n#include <mysql/mysql.h>\n\n#define dbc_search_limit 30\n#define ALLNODES 1\n#define ALLOWXFR 2\n#define AUTHORITY 3\n#define FINDZONE 4\n#define COUNTZONE 5\n#define LOOKUP 6\n\n#define safeGet(in) in == NULL ? \"\" : in\n\n/*%\n * Structure to hold everthing needed by this \"instance\" of the MySQL\n * module remember, the module code is only loaded once, but may have\n * many separate instances.\n */\ntypedef struct {\n#if PTHREADS\n\tdb_list_t    *db; /*%< handle to a list of DB */\n\tint dbcount;\n#else\n\tdbinstance_t *db; /*%< handle to DB */\n#endif\n\n\tunsigned int flags;\n\tchar *dbname;\n\tchar *host;\n\tchar *user;\n\tchar *pass;\n\tchar *socket;\n\tint port;\n\n\t/* Helper functions from the dlz_dlopen driver */\n\tlog_t *log;\n\tdns_sdlz_putrr_t *putrr;\n\tdns_sdlz_putnamedrr_t *putnamedrr;\n\tdns_dlz_writeablezone_t *writeable_zone;\n} mysql_instance_t;\n\n/* forward references */\nisc_result_t\ndlz_findzonedb(void *dbdata, const char *name,\n\t       dns_clientinfomethods_t *methods,\n\t       dns_clientinfo_t *clientinfo);\n\nvoid\ndlz_destroy(void *dbdata);\n\nstatic void\nb9_add_helper(mysql_instance_t *db, const char *helper_name, void *ptr);\n\n/*\n * Private methods\n */\n\nvoid\nmysql_destroy(dbinstance_t *db) {\n\t/* release DB connection */\n\tif (db->dbconn != NULL)\n\t\tmysql_close((MYSQL *) db->dbconn);\n\n\t/* destroy DB instance */\n\tdestroy_dbinstance(db);\n}\n\n#if PTHREADS\n/*%\n * Properly cleans up a list of database instances.\n * This function is only used when the module is compiled for\n * multithreaded operation.\n */\nstatic void\nmysql_destroy_dblist(db_list_t *dblist) {\n\tdbinstance_t *ndbi = NULL;\n\tdbinstance_t *dbi = NULL;\n\n\tndbi = DLZ_LIST_HEAD(*dblist);\n\twhile (ndbi != NULL) {\n\t\tdbi = ndbi;\n\t\tndbi = DLZ_LIST_NEXT(dbi, link);\n\n\t\tmysql_destroy(dbi);\n\t}\n\n\t/* release memory for the list structure */\n\tfree(dblist);\n}\n\n/*%\n * Loops through the list of DB instances, attempting to lock\n * on the mutex.  If successful, the DBI is reserved for use\n * and the thread can perform queries against the database.\n * If the lock fails, the next one in the list is tried.\n * looping continues until a lock is obtained, or until\n * the list has been searched dbc_search_limit times.\n * This function is only used when the module is compiled for\n * multithreaded operation.\n */\nstatic dbinstance_t *\nmysql_find_avail_conn(mysql_instance_t *mysql) {\n\tdbinstance_t *dbi = NULL, *head;\n\tint count = 0;\n\n\t/* get top of list */\n\thead = dbi = DLZ_LIST_HEAD(*(mysql->db));\n\n\t/* loop through list */\n\twhile (count < dbc_search_limit) {\n\t\t/* try to lock on the mutex */\n\t\tif (dlz_mutex_trylock(&dbi->lock) == 0)\n\t\t\treturn (dbi); /* success, return the DBI for use. */\n\n\t\t/* not successful, keep trying */\n\t\tdbi = DLZ_LIST_NEXT(dbi, link);\n\n\t\t/* check to see if we have gone to the top of the list. */\n\t\tif (dbi == NULL) {\n\t\t\tcount++;\n\t\t\tdbi = head;\n\t\t}\n\t}\n\n\tmysql->log(ISC_LOG_INFO,\n\t\t   \"MySQL module unable to find available connection \"\n\t\t   \"after searching %d times\", count);\n\treturn (NULL);\n}\n#endif /* PTHREADS */\n\n/*%\n * Allocates memory for a new string, and then constructs the new\n * string by \"escaping\" the input string.  The new string is\n * safe to be used in queries.  This is necessary because we cannot\n * be sure of what types of strings are passed to us, and we don't\n * want special characters in the string causing problems.\n */\nstatic char *\nmysqldrv_escape_string(MYSQL *mysql, const char *instr) {\n\n\tchar *outstr;\n\tunsigned int len;\n\n\tif (instr == NULL)\n\t\treturn (NULL);\n\n\tlen = strlen(instr);\n\toutstr = malloc((2 * len * sizeof(char)) + 1);\n\tif (outstr == NULL)\n\t\treturn (NULL);\n\n\tmysql_real_escape_string(mysql, outstr, instr, len);\n\n\treturn (outstr);\n}\n\n/*%\n * This function is the real core of the module.   Zone, record\n * and client strings are passed in (or NULL is passed if the\n * string is not available).  The type of query we want to run\n * is indicated by the query flag, and the dbdata object is passed\n * passed in to.  dbdata really holds a single database instance.\n * The function will construct and run the query, hopefully getting\n * a result set.\n */\nstatic isc_result_t\nmysql_get_resultset(const char *zone, const char *record,\n\t\t    const char *client, unsigned int query,\n\t\t    void *dbdata, MYSQL_RES **rs)\n{\n\tisc_result_t result;\n\tdbinstance_t *dbi = NULL;\n\tmysql_instance_t *db = (mysql_instance_t *)dbdata;\n\tchar *querystring = NULL;\n\tunsigned int i = 0;\n\tunsigned int j = 0;\n\tint qres = 0;\n\n#if PTHREADS\n\t/* find an available DBI from the list */\n\tdbi = mysql_find_avail_conn(db);\n#else /* PTHREADS */\n\t/*\n\t * only 1 DBI - no need to lock instance lock either\n\t * only 1 thread in the whole process, no possible contention.\n\t */\n\tdbi = (dbinstance_t *)(db->db);\n#endif /* PTHREADS */\n\n\tif (dbi == NULL) {\n\t\tresult = ISC_R_FAILURE;\n\t\tgoto cleanup;\n\t}\n\n\t/* what type of query are we going to run? */\n\tswitch(query) {\n\tcase ALLNODES:\n\t\tif (dbi->allnodes_q == NULL) {\n\t\t\tresult = ISC_R_NOTIMPLEMENTED;\n\t\t\tgoto cleanup;\n\t\t}\n\t\tbreak;\n\tcase ALLOWXFR:\n\t\tif (dbi->allowxfr_q == NULL) {\n\t\t\tresult = ISC_R_NOTIMPLEMENTED;\n\t\t\tgoto cleanup;\n\t\t}\n\t\tbreak;\n\tcase AUTHORITY:\n\t\tif (dbi->authority_q == NULL) {\n\t\t\tresult = ISC_R_NOTIMPLEMENTED;\n\t\t\tgoto cleanup;\n\t\t}\n\t\tbreak;\n\tcase FINDZONE:\n\t\tif (dbi->findzone_q == NULL) {\n\t\t\tdb->log(ISC_LOG_DEBUG(2),\n\t\t\t\t\"No query specified for findzone.  \"\n\t\t\t\t\"Findzone requires a query\");\n\t\t\tresult = ISC_R_FAILURE;\n\t\t\tgoto cleanup;\n\t\t}\n\t\tbreak;\n\tcase COUNTZONE:\n\t\tif (dbi->countzone_q == NULL) {\n\t\t\tresult = ISC_R_NOTIMPLEMENTED;\n\t\t\tgoto cleanup;\n\t\t}\n\t\tbreak;\n\tcase LOOKUP:\n\t\tif (dbi->lookup_q == NULL) {\n\t\t\tdb->log(ISC_LOG_DEBUG(2),\n\t\t\t\t\"No query specified for lookup.  \"\n\t\t\t\t\"Lookup requires a query\");\n\t\t\tresult = ISC_R_FAILURE;\n\t\t\tgoto cleanup;\n\t\t}\n\t\tbreak;\n\tdefault:\n\t\tdb->log(ISC_LOG_ERROR,\n\t\t\t\"Incorrect query flag passed to \"\n\t\t\t\"mysql_get_resultset\");\n\t\tresult = ISC_R_UNEXPECTED;\n\t\tgoto cleanup;\n\t}\n\n\n\tif (zone != NULL) {\n\t\tif (dbi->zone != NULL)\n\t\t\tfree(dbi->zone);\n\n\t\tdbi->zone = mysqldrv_escape_string((MYSQL *) dbi->dbconn,\n\t\t\t\t\t\t   zone);\n\t\tif (dbi->zone == NULL) {\n\t\t\tresult = ISC_R_NOMEMORY;\n\t\t\tgoto cleanup;\n\t\t}\n\t} else\n\t\tdbi->zone = NULL;\n\n\tif (record != NULL) {\n\t\tif (dbi->record != NULL)\n\t\t\tfree(dbi->record);\n\n\t\tdbi->record = mysqldrv_escape_string((MYSQL *) dbi->dbconn,\n\t\t\t\t\t\t     record);\n\t\tif (dbi->record == NULL) {\n\t\t\tresult = ISC_R_NOMEMORY;\n\t\t\tgoto cleanup;\n\t\t}\n\t} else\n\t\tdbi->record = NULL;\n\n\tif (client != NULL) {\n\t\tif (dbi->client != NULL)\n\t\t\tfree(dbi->client);\n\n\t\tdbi->client = mysqldrv_escape_string((MYSQL *) dbi->dbconn,\n\t\t\t\t\t\t     client);\n\t\tif (dbi->client == NULL) {\n\t\t\tresult = ISC_R_NOMEMORY;\n\t\t\tgoto cleanup;\n\t\t}\n\t} else\n\t\tdbi->client = NULL;\n\n\t/*\n\t * what type of query are we going to run?  this time we build\n\t * the actual query to run.\n\t */\n\tswitch(query) {\n\tcase ALLNODES:\n\t\tquerystring = build_querystring(dbi->allnodes_q);\n\t\tbreak;\n\tcase ALLOWXFR:\n\t\tquerystring = build_querystring(dbi->allowxfr_q);\n\t\tbreak;\n\tcase AUTHORITY:\n\t\tquerystring = build_querystring(dbi->authority_q);\n\t\tbreak;\n\tcase FINDZONE:\n\t\tquerystring = build_querystring(dbi->findzone_q);\n\t\tbreak;\n\tcase COUNTZONE:\n\t\tquerystring = build_querystring(dbi->countzone_q);\n\t\tbreak;\n\tcase LOOKUP:\n\t\tquerystring = build_querystring(dbi->lookup_q);\n\t\tbreak;\n\tdefault:\n\t\tdb->log(ISC_LOG_ERROR,\n\t\t\t\"Incorrect query flag passed to \"\n\t\t\t\"mysql_get_resultset\");\n\t\tresult = ISC_R_UNEXPECTED; goto cleanup;\n\t}\n\n\tif (querystring == NULL) {\n\t\tresult = ISC_R_NOMEMORY;\n\t\tgoto cleanup;\n\t}\n\n\t/* output the full query string when debugging */\n\tdb->log(ISC_LOG_DEBUG(1), \"\\nQuery String: %s\\n\", querystring);\n\n\t/* attempt query up to 3 times. */\n\tfor (i = 0; i < 3; i++) {\n\t\tqres = mysql_query((MYSQL *) dbi->dbconn, querystring);\n\t\tif (qres == 0)\n\t\t\tbreak;\n\t\tfor (j = 0; j < 4; j++)\n\t\t     if (mysql_ping((MYSQL *) dbi->dbconn) == 0)\n\t\t\t     break;\n\t}\n\n\tif (qres == 0) {\n\t\tresult = ISC_R_SUCCESS;\n\t\tif (query != COUNTZONE) {\n\t\t\t*rs = mysql_store_result((MYSQL *) dbi->dbconn);\n\t\t\tif (*rs == NULL)\n\t\t\t\tresult = ISC_R_FAILURE;\n\t\t}\n\t} else\n\t\tresult = ISC_R_FAILURE;\n\n cleanup:\n\tif (dbi == NULL)\n\t\treturn (ISC_R_FAILURE);\n\n\tif (dbi->zone != NULL) {\n\t\tfree(dbi->zone);\n\t\tdbi->zone = NULL;\n\t}\n\tif (dbi->record != NULL) {\n\t\tfree(dbi->record);\n\t\tdbi->record = NULL;\n\t}\n\tif (dbi->client != NULL) {\n\t\tfree(dbi->client);\n\t\tdbi->client = NULL;\n\t}\n\n\t/* release the lock so another thread can use this dbi */\n\t(void) dlz_mutex_unlock(&dbi->lock);\n\n\tif (querystring != NULL)\n\t\tfree(querystring);\n\n\treturn (result);\n}\n\n/*%\n * The processing of result sets for lookup and authority are\n * exactly the same.  So that functionality has been moved\n * into this function to minimize code.\n */\nstatic isc_result_t\nmysql_process_rs(mysql_instance_t *db, dns_sdlzlookup_t *lookup,\n\t\t MYSQL_RES *rs)\n{\n\tisc_result_t result = ISC_R_NOTFOUND;\n\tMYSQL_ROW row;\n\tunsigned int fields;\n\tunsigned int j;\n\tchar *tmpString;\n\tchar *endp;\n\tint ttl;\n\n\tfields = mysql_num_fields(rs);\t/* how many columns in result set */\n\trow = mysql_fetch_row(rs);\t/* get a row from the result set */\n\twhile (row != NULL) {\n\t\tunsigned int len = 0;\n\n\t\tswitch(fields) {\n\t\tcase 1:\n\t\t\t/*\n\t\t\t * one column in rs, it's the data field.  use\n\t\t\t * default type of A record, and default TTL\n\t\t\t * of 86400\n\t\t\t */\n\t\t\tresult = db->putrr(lookup, \"a\", 86400, safeGet(row[0]));\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\t/*\n\t\t\t * two columns, data field, and data type.\n\t\t\t * use default TTL of 86400.\n\t\t\t */\n\t\t\tresult = db->putrr(lookup, safeGet(row[0]), 86400,\n\t\t\t\t\t   safeGet(row[1]));\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\t/*\n\t\t\t * three columns, all data no defaults.\n\t\t\t * convert text to int, make sure it worked\n\t\t\t * right.\n\t\t\t */\n\t\t\tttl = strtol(safeGet(row[0]), &endp, 10);\n\t\t\tif (*endp != '\\0' || ttl < 0) {\n\t\t\t\tdb->log(ISC_LOG_ERROR,\n\t\t\t\t\t\"MySQL module ttl must be \"\n\t\t\t\t\t\"a postive number\");\n\t\t\t\treturn (ISC_R_FAILURE);\n\t\t\t}\n\n\t\t\tresult = db->putrr(lookup, safeGet(row[1]), ttl,\n\t\t\t\t\t\tsafeGet(row[2]));\n\t\t\tbreak;\n\t\tdefault:\n\t\t\t/*\n\t\t\t * more than 3 fields, concatenate the last\n\t\t\t * ones together.  figure out how long to make\n\t\t\t * string.\n\t\t\t */\n\t\t\tfor (j = 2; j < fields; j++)\n\t\t\t\tlen += strlen(safeGet(row[j])) + 1;\n\n\t\t\t/*\n\t\t\t * allocate string memory, allow for NULL to\n\t\t\t * term string\n\t\t\t */\n\t\t\ttmpString = malloc(len + 1);\n\t\t\tif (tmpString == NULL) {\n\t\t\t\tdb->log(ISC_LOG_ERROR,\n\t\t\t\t\t\"MySQL module unable to allocate \"\n\t\t\t\t\t\"memory for temporary string\");\n\t\t\t\tmysql_free_result(rs);\n\t\t\t\treturn (ISC_R_FAILURE);\n\t\t\t}\n\n\t\t\tstrcpy(tmpString, safeGet(row[2]));\n\t\t\tfor (j = 3; j < fields; j++) {\n\t\t\t\tstrcat(tmpString, \" \");\n\t\t\t\tstrcat(tmpString, safeGet(row[j]));\n\t\t\t}\n\n\t\t\tttl = strtol(safeGet(row[0]), &endp, 10);\n\t\t\tif (*endp != '\\0' || ttl < 0) {\n\t\t\t\tdb->log(ISC_LOG_ERROR,\n\t\t\t\t\t\"MySQL module ttl must be \"\n\t\t\t\t\t\"a postive number\");\n\t\t\t\tfree(tmpString);\n\t\t\t\treturn (ISC_R_FAILURE);\n\t\t\t}\n\n\t\t\tresult = db->putrr(lookup, safeGet(row[1]),\n\t\t\t\t\t   ttl, tmpString);\n\t\t\tfree(tmpString);\n\t\t}\n\n\t\tif (result != ISC_R_SUCCESS) {\n\t\t\tmysql_free_result(rs);\n\t\t\tdb->log(ISC_LOG_ERROR,\n\t\t\t\t\"putrr returned error: %d\", result);\n\t\t\treturn (ISC_R_FAILURE);\n\t\t}\n\n\t\trow = mysql_fetch_row(rs);\n\t}\n\n\tmysql_free_result(rs);\n\treturn (result);\n}\n\n/*\n * DLZ methods\n */\n\n/*% determine if the zone is supported by (in) the database */\nisc_result_t\ndlz_findzonedb(void *dbdata, const char *name,\n\t       dns_clientinfomethods_t *methods,\n\t       dns_clientinfo_t *clientinfo)\n{\n\tisc_result_t result;\n\tMYSQL_RES *rs = NULL;\n\tmy_ulonglong rows;\n\tmysql_instance_t *db = (mysql_instance_t *)dbdata;\n\n\tUNUSED(methods);\n\tUNUSED(clientinfo);\n\n\tresult = mysql_get_resultset(name, NULL, NULL, FINDZONE, dbdata, &rs);\n\tif (result != ISC_R_SUCCESS || rs == NULL) {\n\t\tif (rs != NULL)\n\t\t\tmysql_free_result(rs);\n\n\t\tdb->log(ISC_LOG_ERROR,\n\t\t\t\"MySQL module unable to return \"\n\t\t\t\"result set for findzone query\");\n\n\t\treturn (ISC_R_FAILURE);\n\t}\n\n\t/*\n\t * if we returned any rows, the zone is supported.\n\t */\n\trows = mysql_num_rows(rs);\n\tmysql_free_result(rs);\n\tif (rows > 0) {\n\t\tmysql_get_resultset(name, NULL, NULL, COUNTZONE, dbdata, NULL);\n\t\treturn (ISC_R_SUCCESS);\n\t}\n\n\treturn (ISC_R_NOTFOUND);\n}\n\n/*% Determine if the client is allowed to perform a zone transfer */\nisc_result_t\ndlz_allowzonexfr(void *dbdata, const char *name, const char *client) {\n\tisc_result_t result;\n\tmysql_instance_t *db = (mysql_instance_t *)dbdata;\n\tMYSQL_RES *rs = NULL;\n\tmy_ulonglong rows;\n\n\t/* first check if the zone is supported by the database. */\n\tresult = dlz_findzonedb(dbdata, name, NULL, NULL);\n\tif (result != ISC_R_SUCCESS)\n\t\treturn (ISC_R_NOTFOUND);\n\n\t/*\n\t * if we get to this point we know the zone is supported by\n\t * the database the only questions now are is the zone\n\t * transfer is allowed for this client and did the config file\n\t * have an allow zone xfr query.\n\t */\n\tresult = mysql_get_resultset(name, NULL, client, ALLOWXFR,\n\t\t\t\t     dbdata, &rs);\n\tif (result == ISC_R_NOTIMPLEMENTED)\n\t\treturn (result);\n\n\tif (result != ISC_R_SUCCESS || rs == NULL) {\n\t\tif (rs != NULL)\n\t\t\tmysql_free_result(rs);\n\t\tdb->log(ISC_LOG_ERROR,\n\t\t\t\"MySQL module unable to return \"\n\t\t\t\"result set for allow xfr query\");\n\t\treturn (ISC_R_FAILURE);\n\t}\n\n\t/*\n\t * count how many rows in result set; if we returned any,\n\t * zone xfr is allowed.\n\t */\n\trows = mysql_num_rows(rs);\n\tmysql_free_result(rs);\n\tif (rows > 0)\n\t\treturn (ISC_R_SUCCESS);\n\n\treturn (ISC_R_NOPERM);\n}\n\n/*%\n * If the client is allowed to perform a zone transfer, the next order of\n * business is to get all the nodes in the zone, so bind can respond to the\n * query.\n */\nisc_result_t\ndlz_allnodes(const char *zone, void *dbdata, dns_sdlzallnodes_t *allnodes) {\n\tisc_result_t result;\n\tmysql_instance_t *db = (mysql_instance_t *)dbdata;\n\tMYSQL_RES *rs = NULL;\n\tMYSQL_ROW row;\n\tunsigned int fields;\n\tunsigned int j;\n\tchar *tmpString;\n\tchar *endp;\n\tint ttl;\n\n\tresult = mysql_get_resultset(zone, NULL, NULL, ALLNODES, dbdata, &rs);\n\tif (result == ISC_R_NOTIMPLEMENTED)\n\t\treturn (result);\n\n\t/* if we didn't get a result set, log an err msg. */\n\tif (result != ISC_R_SUCCESS) {\n\t\tdb->log(ISC_LOG_ERROR,\n\t\t\t\"MySQL module unable to return \"\n\t\t\t\"result set for all nodes query\");\n\t\tgoto cleanup;\n\t}\n\n\tresult = ISC_R_NOTFOUND;\n\n\tfields = mysql_num_fields(rs);\t/* how many columns in result set */\n\trow = mysql_fetch_row(rs);\t/* get a row from the result set */\n\twhile (row != NULL) {\n\t\tif (fields < 4) {\n\t\t\tdb->log(ISC_LOG_ERROR,\n\t\t\t\t\"MySQL module too few fields returned \"\n\t\t\t\t\"by all nodes query\");\n\t\t\tresult = ISC_R_FAILURE;\n\t\t\tgoto cleanup;\n\t\t}\n\n\t\tttl = strtol(safeGet(row[0]), &endp, 10);\n\t\tif (*endp != '\\0' || ttl < 0) {\n\t\t\tdb->log(ISC_LOG_ERROR,\n\t\t\t\t\"MySQL module ttl must be \"\n\t\t\t\t\"a postive number\");\n\t\t\tresult = ISC_R_FAILURE;\n\t\t\tgoto cleanup;\n\t\t}\n\n\t\tif (fields == 4) {\n\t\t\tresult = db->putnamedrr(allnodes, safeGet(row[2]),\n\t\t\t\t\t\tsafeGet(row[1]), ttl,\n\t\t\t\t\t\tsafeGet(row[3]));\n\t\t} else {\n\t\t\tunsigned int len = 0;\n\n\t\t\t/*\n\t\t\t * more than 4 fields, concatenate the last\n\t\t\t * ones together.\n\t\t\t */\n\t\t\tfor (j = 3; j < fields; j++)\n\t\t\t\tlen += strlen(safeGet(row[j])) + 1;\n\n\t\t\ttmpString = malloc(len + 1);\n\t\t\tif (tmpString == NULL) {\n\t\t\t\tdb->log(ISC_LOG_ERROR,\n\t\t\t\t\t\"MySQL module unable to allocate \"\n\t\t\t\t\t\"memory for temporary string\");\n\t\t\t\tresult = ISC_R_FAILURE;\n\t\t\t\tgoto cleanup;\n\t\t\t}\n\n\t\t\tstrcpy(tmpString, safeGet(row[3]));\n\t\t\tfor (j = 4; j < fields; j++) {\n\t\t\t\tstrcat(tmpString, \" \");\n\t\t\t\tstrcat(tmpString, safeGet(row[j]));\n\t\t\t}\n\n\t\t\tresult = db->putnamedrr(allnodes, safeGet(row[2]),\n\t\t\t\t\t\tsafeGet(row[1]),\n\t\t\t\t\t\tttl, tmpString);\n\t\t\tfree(tmpString);\n\t\t}\n\n\t\tif (result != ISC_R_SUCCESS) {\n\t\t\tdb->log(ISC_LOG_ERROR,\n\t\t\t\t\"putnamedrr returned error: %s\", result);\n\t\t\tresult = ISC_R_FAILURE;\n\t\t\tbreak;\n\t\t}\n\n\t\trow = mysql_fetch_row(rs);\n\t}\n\n cleanup:\n\tif (rs != NULL)\n\t\tmysql_free_result(rs);\n\n\treturn (result);\n}\n\n/*%\n * If the lookup function does not return SOA or NS records for the zone,\n * use this function to get that information for named.\n */\nisc_result_t\ndlz_authority(const char *zone, void *dbdata, dns_sdlzlookup_t *lookup) {\n\tisc_result_t result;\n\tMYSQL_RES *rs = NULL;\n\tmysql_instance_t *db = (mysql_instance_t *)dbdata;\n\n\tresult = mysql_get_resultset(zone, NULL, NULL, AUTHORITY, dbdata, &rs);\n\tif (result == ISC_R_NOTIMPLEMENTED)\n\t\treturn (result);\n\n\tif (result != ISC_R_SUCCESS) {\n\t\tif (rs != NULL)\n\t\t\tmysql_free_result(rs);\n\t\tdb->log(ISC_LOG_ERROR,\n\t\t\t\"MySQL module unable to return \"\n\t\t\t\"result set for authority query\");\n\t\treturn (ISC_R_FAILURE);\n\t}\n\n\t/*\n\t * lookup and authority result sets are processed in the same\n\t * manner: mysql_process_rs does the job for both functions.\n\t */\n\treturn (mysql_process_rs(db, lookup, rs));\n}\n\n/*% If zone is supported, lookup up a (or multiple) record(s) in it */\nisc_result_t\ndlz_lookup(const char *zone, const char *name,\n\t   void *dbdata, dns_sdlzlookup_t *lookup,\n\t   dns_clientinfomethods_t *methods,\n\t   dns_clientinfo_t *clientinfo)\n{\n\tisc_result_t result;\n\tMYSQL_RES *rs = NULL;\n\tmysql_instance_t *db = (mysql_instance_t *)dbdata;\n\n\tUNUSED(methods);\n\tUNUSED(clientinfo);\n\n\tresult = mysql_get_resultset(zone, name, NULL, LOOKUP, dbdata, &rs);\n\n\t/* if we didn't get a result set, log an err msg. */\n\tif (result != ISC_R_SUCCESS) {\n\t\tif (rs != NULL)\n\t\t\tmysql_free_result(rs);\n\t\tdb->log(ISC_LOG_ERROR,\n\t\t\t\"MySQL module unable to return \"\n\t\t\t\"result set for lookup query\");\n\t\treturn (ISC_R_FAILURE);\n\t}\n\n\t/*\n\t * lookup and authority result sets are processed in the same\n\t * manner: mysql_process_rs does the job for both functions.\n\t */\n\treturn (mysql_process_rs(db, lookup, rs));\n}\n\n/*%\n * Create an instance of the module.\n */\nisc_result_t\ndlz_create(const char *dlzname, unsigned int argc, char *argv[],\n\t   void **dbdata, ...)\n{\n\tisc_result_t result = ISC_R_FAILURE;\n\tmysql_instance_t *mysql = NULL;\n\tdbinstance_t *dbi = NULL;\n\tMYSQL *dbc;\n\tchar *tmp = NULL;\n\tchar *endp;\n\tint j;\n\tconst char *helper_name;\n#if MYSQL_VERSION_ID >= 50000\n        my_bool auto_reconnect = 1;\n#endif\n#if PTHREADS\n\tint dbcount;\n\tint i;\n#endif /* PTHREADS */\n\tva_list ap;\n\n\tUNUSED(dlzname);\n\n\t/* allocate memory for MySQL instance */\n\tmysql = calloc(1, sizeof(mysql_instance_t));\n\tif (mysql == NULL)\n\t\treturn (ISC_R_NOMEMORY);\n\tmemset(mysql, 0, sizeof(mysql_instance_t));\n\n\t/* Fill in the helper functions */\n\tva_start(ap, dbdata);\n\twhile ((helper_name = va_arg(ap, const char*)) != NULL)\n\t\tb9_add_helper(mysql, helper_name, va_arg(ap, void*));\n\tva_end(ap);\n\n#if PTHREADS\n\t/* if debugging, let user know we are multithreaded. */\n\tmysql->log(ISC_LOG_DEBUG(1), \"MySQL module running multithreaded\");\n#else /* PTHREADS */\n\t/* if debugging, let user know we are single threaded. */\n\tmysql->log(ISC_LOG_DEBUG(1), \"MySQL module running single threaded\");\n#endif /* PTHREADS */\n\n\t/* verify we have at least 4 arg's passed to the module */\n\tif (argc < 4) {\n\t\tmysql->log(ISC_LOG_ERROR,\n\t\t\t   \"MySQL module requires \"\n\t\t\t   \"at least 4 command line args.\");\n\t\treturn (ISC_R_FAILURE);\n\t}\n\n\t/* no more than 8 arg's should be passed to the module */\n\tif (argc > 8) {\n\t\tmysql->log(ISC_LOG_ERROR,\n\t\t\t   \"MySQL module cannot accept \"\n\t\t\t   \"more than 7 command line args.\");\n\t\treturn (ISC_R_FAILURE);\n\t}\n\n\t/* get db name - required */\n\tmysql->dbname = get_parameter_value(argv[1], \"dbname=\");\n\tif (mysql->dbname == NULL) {\n\t\tmysql->log(ISC_LOG_ERROR,\n\t\t\t   \"MySQL module requires a dbname parameter.\");\n\t\tresult = ISC_R_FAILURE;\n\t\tgoto cleanup;\n\t}\n\n\t/* get db port.  Not required, but must be > 0 if specified */\n\ttmp = get_parameter_value(argv[1], \"port=\");\n\tif (tmp == NULL)\n\t\tmysql->port = 0;\n\telse {\n\t\tmysql->port = strtol(tmp, &endp, 10);\n\t\tif (*endp != '\\0' || mysql->port < 0) {\n\t\t\tmysql->log(ISC_LOG_ERROR,\n\t\t\t\t   \"Mysql module: port \"\n\t\t\t\t   \"must be a positive number.\");\n\t\t\tfree(tmp);\n\t\t\tresult = ISC_R_FAILURE;\n\t\t\tgoto cleanup;\n\t\t}\n\t\tfree(tmp);\n\t}\n\n\tmysql->host = get_parameter_value(argv[1], \"host=\");\n\tmysql->user = get_parameter_value(argv[1], \"user=\");\n\tmysql->pass = get_parameter_value(argv[1], \"pass=\");\n\tmysql->socket = get_parameter_value(argv[1], \"socket=\");\n\n\tmysql->flags = CLIENT_REMEMBER_OPTIONS;\n\n\ttmp = get_parameter_value(argv[1], \"compress=\");\n\tif (tmp != NULL) {\n\t\tif (strcasecmp(tmp, \"true\") == 0)\n\t\t\tmysql->flags |= CLIENT_COMPRESS;\n\t\tfree(tmp);\n\t}\n\n\ttmp = get_parameter_value(argv[1], \"ssl=\");\n\tif (tmp != NULL) {\n\t\tif (strcasecmp(tmp, \"true\") == 0)\n\t\t\tmysql->flags |= CLIENT_SSL;\n\t\tfree(tmp);\n\t}\n\n\ttmp = get_parameter_value(argv[1], \"space=\");\n\tif (tmp != NULL) {\n\t\tif (strcasecmp(tmp, \"ignore\") == 0)\n\t\t\tmysql->flags |= CLIENT_IGNORE_SPACE;\n\t\tfree(tmp);\n\t}\n\n#if PTHREADS\n\t/* multithreaded build can have multiple DB connections */\n\ttmp = get_parameter_value(argv[1], \"threads=\");\n\tif (tmp == NULL)\n\t\tdbcount = 1;\n\telse {\n\t\tdbcount = strtol(tmp, &endp, 10);\n\t\tif (*endp != '\\0' || dbcount < 1) {\n\t\t\tmysql->log(ISC_LOG_ERROR,\n\t\t\t\t   \"MySQL database connection count \"\n\t\t\t\t   \"must be positive.\");\n\t\t\tfree(tmp);\n\t\t\tresult = ISC_R_FAILURE;\n\t\t\tgoto cleanup;\n\t\t}\n\t\tfree(tmp);\n\t}\n\n\t/* allocate memory for database connection list */\n\tmysql->db = calloc(1, sizeof(db_list_t));\n\tif (mysql->db == NULL) {\n\t\tresult = ISC_R_NOMEMORY;\n\t\tgoto cleanup;\n\t}\n\n\t/* initialize DB connection list */\n\tDLZ_LIST_INIT(*(mysql->db));\n\n\t/*\n\t * create the appropriate number of database instances (DBI)\n\t * append each new DBI to the end of the list\n\t */\n\tfor (i = 0; i < dbcount; i++) {\n#endif /* PTHREADS */\n\t\tswitch(argc) {\n\t\tcase 4:\n\t\t\tresult = build_dbinstance(NULL, NULL, NULL,\n\t\t\t\t\t\t  argv[2], argv[3], NULL,\n\t\t\t\t\t\t  &dbi, mysql->log);\n\t\t\tbreak;\n\t\tcase 5:\n\t\t\tresult = build_dbinstance(NULL, NULL, argv[4],\n\t\t\t\t\t\t  argv[2], argv[3], NULL,\n\t\t\t\t\t\t  &dbi, mysql->log);\n\t\t\tbreak;\n\t\tcase 6:\n\t\t\tresult = build_dbinstance(argv[5], NULL, argv[4],\n\t\t\t\t\t\t  argv[2], argv[3], NULL,\n\t\t\t\t\t\t  &dbi, mysql->log);\n\t\t\tbreak;\n\t\tcase 7:\n\t\t\tresult = build_dbinstance(argv[5], argv[6], argv[4],\n\t\t\t\t\t\t  argv[2], argv[3], NULL,\n\t\t\t\t\t\t  &dbi, mysql->log);\n\t\t\tbreak;\n\t\tcase 8:\n\t\t\tresult = build_dbinstance(argv[5], argv[6], argv[4],\n\t\t\t\t\t\t  argv[2], argv[3], argv[7],\n\t\t\t\t\t\t  &dbi, mysql->log);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tresult = ISC_R_FAILURE;\n\t\t}\n\n\n\t\tif (result != ISC_R_SUCCESS) {\n\t\t\tmysql->log(ISC_LOG_ERROR,\n\t\t\t\t   \"MySQL module could not create \"\n\t\t\t\t   \"database instance object.\");\n\t\t\tresult = ISC_R_FAILURE;\n\t\t\tgoto cleanup;\n\t\t}\n\n#if PTHREADS\n\t\t/* when multithreaded, build a list of DBI's */\n\t\tDLZ_LINK_INIT(dbi, link);\n\t\tDLZ_LIST_APPEND(*(mysql->db), dbi, link);\n#else\n\t\t/*\n\t\t * when single threaded, hold onto the one connection\n\t\t * instance.\n\t\t */\n\t\tmysql->db = dbi;\n#endif\n\n\t\t/* create and set db connection */\n\t\tdbi->dbconn = mysql_init(NULL);\n\t\tif (dbi->dbconn == NULL) {\n\t\t\tmysql->log(ISC_LOG_ERROR,\n\t\t\t\t   \"MySQL module could not allocate \"\n\t\t\t\t   \"memory for database connection\");\n\t\t\tresult = ISC_R_FAILURE;\n\t\t\tgoto cleanup;\n\t\t}\n\n\t\tdbc = NULL;\n\n#if MYSQL_VERSION_ID >= 50000\n\t\t/* enable automatic reconnection. */\n\t\tif (mysql_options((MYSQL *) dbi->dbconn, MYSQL_OPT_RECONNECT,\n\t\t\t\t  &auto_reconnect) != 0) {\n\t\t\tmysql->log(ISC_LOG_WARNING,\n\t\t\t\t   \"MySQL module failed to set \"\n\t\t\t\t   \"MYSQL_OPT_RECONNECT option, continuing\");\n\t\t}\n#endif\n\n\t\tfor (j = 0; dbc == NULL && j < 4; j++) {\n\t\t\tdbc = mysql_real_connect((MYSQL *) dbi->dbconn,\n\t\t\t\t\t\t mysql->host, mysql->user,\n\t\t\t\t\t\t mysql->pass, mysql->dbname,\n\t\t\t\t\t\t mysql->port, mysql->socket,\n\t\t\t\t\t\t mysql->flags);\n\t\t\tif (dbc == NULL)\n\t\t\t\tmysql->log(ISC_LOG_ERROR,\n\t\t\t\t\t   \"MySQL connection failed: %s\",\n\t\t\t\t\t   mysql_error((MYSQL *) dbi->dbconn));\n\t\t}\n\n\t\tif (dbc == NULL) {\n\t\t\tmysql->log(ISC_LOG_ERROR,\n\t\t\t\t   \"MySQL module failed to create \"\n\t\t\t\t   \"database connection after 4 attempts\");\n\t\t\tresult = ISC_R_FAILURE;\n\t\t\tgoto cleanup;\n\t\t}\n\n#if PTHREADS\n\t\t/* set DBI = null for next loop through. */\n\t\tdbi = NULL;\n\t}\n#endif /* PTHREADS */\n\n\t*dbdata = mysql;\n\n\treturn (ISC_R_SUCCESS);\n\n cleanup:\n\tdlz_destroy(mysql);\n\n\treturn (result);\n}\n\n/*%\n * Destroy the module.\n */\nvoid\ndlz_destroy(void *dbdata) {\n\tmysql_instance_t *db = (mysql_instance_t *)dbdata;\n#if PTHREADS\n\t/* cleanup the list of DBI's */\n\tif (db->db != NULL)\n\t\tmysql_destroy_dblist((db_list_t *)(db->db));\n#else /* PTHREADS */\n\tmysql_destroy(db);\n#endif /* PTHREADS */\n\n\tif (db->dbname != NULL)\n\t\tfree(db->dbname);\n\tif (db->host != NULL)\n\t\tfree(db->host);\n\tif (db->user != NULL)\n\t\tfree(db->user);\n\tif (db->pass != NULL)\n\t\tfree(db->pass);\n\tif (db->socket != NULL)\n\t\tfree(db->socket);\n}\n\n/*\n * Return the version of the API\n */\nint\ndlz_version(unsigned int *flags) {\n\t*flags |= (DNS_SDLZFLAG_RELATIVEOWNER |\n\t\t   DNS_SDLZFLAG_RELATIVERDATA |\n\t\t   DNS_SDLZFLAG_THREADSAFE);\n\treturn (DLZ_DLOPEN_VERSION);\n}\n\n/*\n * Register a helper function from the bind9 dlz_dlopen driver\n */\nstatic void\nb9_add_helper(mysql_instance_t *db, const char *helper_name, void *ptr) {\n\tif (strcmp(helper_name, \"log\") == 0)\n\t\tdb->log = (log_t *)ptr;\n\tif (strcmp(helper_name, \"putrr\") == 0)\n\t\tdb->putrr = (dns_sdlz_putrr_t *)ptr;\n\tif (strcmp(helper_name, \"putnamedrr\") == 0)\n\t\tdb->putnamedrr = (dns_sdlz_putnamedrr_t *)ptr;\n\tif (strcmp(helper_name, \"writeable_zone\") == 0)\n\t\tdb->writeable_zone = (dns_dlz_writeablezone_t *)ptr;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/contrib/dlz/modules/mysql/testing/named.conf": "/*\n * Copyright (C) 2013  Internet Systems Consortium, Inc. (\"ISC\")\n *\n * Permission to use, copy, modify, and/or distribute this software for any\n * purpose with or without fee is hereby granted, provided that the above\n * copyright notice and this permission notice appear in all copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND ISC DISCLAIMS ALL WARRANTIES WITH\n * REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n * AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,\n * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\n * LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE\n * OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\n * PERFORMANCE OF THIS SOFTWARE.\n */\n\ncontrols { };\n\noptions {\n\tdirectory \".\";\n\tport 5300;\n\tpid-file \"named.pid\";\n\tsession-keyfile \"session.key\";\n\tlisten-on { any; };\n\tlisten-on-v6 { none; };\n\trecursion no;\n};\n\nkey rndc_key {\n\tsecret \"1234abcd8765\";\n\talgorithm hmac-md5;\n};\n\ncontrols {\n\tinet 127.0.0.1 port 9953 allow { any; } keys { rndc_key; };\n};\n\ndlz \"test\" {\n\tdatabase \"dlopen ../dlz_mysql_dynamic.so\n           {\n             host=127.0.0.1 port=3306 socket=/tmp/mysql.sock\n             dbname=BindDB user=USER pass=PASSWORD threads=2\n           }\n           {SELECT zone FROM records WHERE zone = '$zone$'}\n           {SELECT ttl, type, mx_priority, IF(type = 'TXT', CONCAT('\\\"',data,'\\\"'), data) AS data FROM records WHERE zone = '$zone$' AND host = '$record$' AND type <> 'SOA' AND type <> 'NS'}\n           {SELECT ttl, type, data, primary_ns, resp_contact, serial, refresh, retry, expire, minimum FROM records WHERE zone = '$zone$' AND (type = 'SOA' OR type='NS')}\n           {SELECT ttl, type, host, mx_priority, IF(type = 'TXT', CONCAT('\\\"',data,'\\\"'), data) AS data, resp_contact, serial, refresh, retry, expire, minimum FROM records WHERE zone = '$zone$' AND type <> 'SOA' AND type <> 'NS'}\n           {SELECT zone FROM xfr where zone='$zone$' AND client = '$client$'}\";\n};\n",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/contrib/dlz/modules/bdbhpt/dlz_bdbhpt_dynamic.c": "/*\n * Copyright (C) 2002 Stichting NLnet, Netherlands, stichting@nlnet.nl.\n *\n * Permission to use, copy, modify, and distribute this software for any\n * purpose with or without fee is hereby granted, provided that the\n * above copyright notice and this permission notice appear in all\n * copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND STICHTING NLNET\n * DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL\n * STICHTING NLNET BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR\n * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS\n * OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE\n * OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE\n * USE OR PERFORMANCE OF THIS SOFTWARE.\n *\n * The development of Dynamically Loadable Zones (DLZ) for Bind 9 was\n * conceived and contributed by Rob Butler.\n *\n * Permission to use, copy, modify, and distribute this software for any\n * purpose with or without fee is hereby granted, provided that the\n * above copyright notice and this permission notice appear in all\n * copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND ROB BUTLER\n * DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL\n * ROB BUTLER BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR\n * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS\n * OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE\n * OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE\n * USE OR PERFORMANCE OF THIS SOFTWARE.\n */\n\n/*\n * Copyright (C) 2011  Internet Systems Consortium, Inc. (\"ISC\")\n *\n * Permission to use, copy, modify, and/or distribute this software for any\n * purpose with or without fee is hereby granted, provided that the above\n * copyright notice and this permission notice appear in all copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND ISC DISCLAIMS ALL WARRANTIES WITH\n * REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n * AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,\n * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\n * LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE\n * OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\n * PERFORMANCE OF THIS SOFTWARE.\n */\n\n/*\n * This is simply a merge of Andrew Tridgell's dlz_example.c and the\n * original bdb_bdbhpt_driver.c\n *\n * This provides the externally loadable bdbhpt DLZ driver, without\n * update support\n *\n */\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdarg.h>\n\n#include <db.h>\n\n#include \"dlz_minimal.h\"\n\n/* should the bdb driver use threads. */\n#define bdbhpt_threads DB_THREAD\n\n/* bdbhpt database names */\n#define dlz_data   \"dns_data\"\n#define dlz_zone   \"dns_zone\"\n#define dlz_xfr    \"dns_xfr\"\n#define dlz_client \"dns_client\"\n\n#define dlz_bdbhpt_dynamic_version \"0.1\"\n\n/*\n * This structure contains all our DB handles and helper functions we\n * inherit from the dlz_dlopen driver\n *\n */\ntypedef struct bdbhpt_instance {\n\tDB_ENV    *dbenv;       /* bdbhpt environment */\n\tDB        *data;        /* dns_data database handle */\n\tDB        *zone;        /* zone database handle */\n\tDB        *xfr;         /* zone xfr database handle */\n\tDB        *client;      /* client database handle */\n\n\t/* Helper functions from the dlz_dlopen driver */\n\tlog_t *log;\n\tdns_sdlz_putrr_t *putrr;\n\tdns_sdlz_putnamedrr_t *putnamedrr;\n\tdns_dlz_writeablezone_t *writeable_zone;\n} bdbhpt_instance_t;\n\ntypedef struct bdbhpt_parsed_data {\n\tchar *host;\n\tchar *type;\n\tint ttl;\n\tchar *data;\n} bdbhpt_parsed_data_t;\n\nstatic void\nb9_add_helper(struct bdbhpt_instance *db, const char *helper_name, void *ptr);\n\n/*%\n * Reverses a string in place.\n */\nstatic char\n*bdbhpt_strrev(char *str) {\n\tchar *p1, *p2;\n\n\tif (! str || ! *str)\n\t\treturn str;\n\tfor (p1 = str, p2 = str + strlen(str) - 1; p2 > p1; ++p1, --p2) {\n\t\t*p1 ^= *p2;\n\t\t*p2 ^= *p1;\n\t\t*p1 ^= *p2;\n\t}\n\treturn str;\n}\n\n/*%\n * Parses the DBT from the Berkeley DB into a parsed_data record\n * The parsed_data record should be allocated before and passed into the\n * bdbhpt_parse_data function.  The char (type & data) fields should not\n * be \"free\"d as that memory is part of the DBT data field.  It will be\n * \"free\"d when the DBT is freed.\n */\n\nstatic isc_result_t\nbdbhpt_parse_data(log_t *log, char *in, bdbhpt_parsed_data_t *pd) {\n\n\tchar *endp, *ttlStr;\n\tchar *tmp = in;\n\tchar *lastchar = (char *) &tmp[strlen(tmp)];\n  \n\t/*%\n\t * String should be formatted as:\n\t *   replication_id\n\t *   (a space)\n\t *   host_name\n\t *   (a space)\n\t *   ttl\n\t *   (a space)\n\t *   type\n\t *   (a space)\n\t *   remaining data\n\t *\n\t * examples:\n\t *\n\t * 9191 host 10 A 127.0.0.1\n\t * server1_212 host 10 A 127.0.0.2\n\t * {xxxx-xxxx-xxxx-xxxx-xxxx} host 10 MX 20 mail.example.com\n\t */\n  \n\t/*\n\t * we don't need the replication id, so don't\n\t * bother saving a pointer to it.\n\t */\n  \n\t/* find space after replication id */\n\ttmp = strchr(tmp, ' ');\n\t/* verify we found a space */\n\tif (tmp == NULL)\n\t\treturn ISC_R_FAILURE;\n\t/* make sure it is safe to increment pointer */\n\tif (++tmp > lastchar)\n\t\treturn ISC_R_FAILURE;\n\n\t/* save pointer to host */\n\tpd->host = tmp;\n\n\t/* find space after host and change it to a '\\0' */\n\ttmp = strchr(tmp, ' ');\n\t/* verify we found a space */\n\tif (tmp == NULL)\n\t\treturn ISC_R_FAILURE;\n\t/* change the space to a null (string terminator) */\n\ttmp[0] = '\\0';\n\t/* make sure it is safe to increment pointer */\n\tif (++tmp > lastchar)\n\t\treturn ISC_R_FAILURE;\n  \n\t/* save pointer to ttl string */\n\tttlStr = tmp;\n  \n\t/* find space after ttl and change it to a '\\0' */\n\ttmp = strchr(tmp, ' ');\n\t/* verify we found a space */\n\tif (tmp == NULL)\n\t\treturn ISC_R_FAILURE;\n\t/* change the space to a null (string terminator) */\n\ttmp[0] = '\\0';\n\t/* make sure it is safe to increment pointer */\n\tif (++tmp > lastchar)\n\t\treturn ISC_R_FAILURE;\n\t\n\t/* save pointer to dns type */\n\tpd->type = tmp;\n\t\n\t/* find space after type and change it to a '\\0' */\n\ttmp = strchr(tmp, ' ');\n\t/* verify we found a space */\n\tif (tmp == NULL)\n\t\treturn ISC_R_FAILURE;\n\t/* change the space to a null (string terminator) */\n\ttmp[0] = '\\0';\n\t/* make sure it is safe to increment pointer */\n\tif (++tmp > lastchar)\n\t\treturn ISC_R_FAILURE;\n\t\n\t/* save pointer to remainder of DNS data */\n\tpd->data = tmp;\n\t\n\t/* convert ttl string to integer */\n\tpd->ttl = strtol(ttlStr, &endp, 10);\n\tif (*endp != '\\0' || pd->ttl < 0) {\n\t\tlog(ISC_LOG_ERROR,\n\t\t\t\t\"bdbhpt_dynamic: \"\n\t\t\t\t\"ttl must be a positive number\");\n\t\treturn ISC_R_FAILURE;\n\t}\n\t\n\t/* if we get this far everything should have worked. */\n\treturn ISC_R_SUCCESS;\n}\n\n/*\n * See if a zone transfer is allowed\n */\nisc_result_t\ndlz_allowzonexfr(void *dbdata, const char *name, const char *client) {\n\tisc_result_t result;\n\tbdbhpt_instance_t *db = (bdbhpt_instance_t *) dbdata;\n\tDBT key, data;\n\t\n\t/* check to see if we are authoritative for the zone first. */\n#if DLZ_DLOPEN_VERSION >= 3\n\tresult = dlz_findzonedb(dbdata, name, NULL, NULL);\n#else\n\tresult = dlz_findzonedb(dbdata, name);\n#endif\n\tif (result != ISC_R_SUCCESS)\n\t\treturn (ISC_R_NOTFOUND);\n\t\n\tmemset(&key, 0, sizeof(DBT));\n\tkey.flags = DB_DBT_MALLOC;\n\tkey.data = strdup(name);\n\tif (key.data == NULL) {\n\t\tresult = ISC_R_NOMEMORY;\n\t\tgoto xfr_cleanup;\n\t}\n\tkey.size = strlen(key.data);\n\t\n\tmemset(&data, 0, sizeof(DBT));\n\tdata.flags = DB_DBT_MALLOC;\n\tdata.data = strdup(client);\n\tif (data.data == NULL) {\n\t\tresult = ISC_R_NOMEMORY;\n\t\tgoto xfr_cleanup;\n\t}\n\tdata.size = strlen(data.data);\n\t\n\tswitch(db->client->get(db->client, NULL, &key, &data, DB_GET_BOTH)) {\n\tcase DB_NOTFOUND:\n\t\tresult = ISC_R_NOTFOUND;\n\t\tbreak;\n\tcase 0:\n\t\tresult = ISC_R_SUCCESS;\n\t\tbreak;\n\tdefault:\n\t\tresult = ISC_R_FAILURE;\n\t}\n\n xfr_cleanup:\n\t/* free any memory duplicate string in the key field */\n\tif (key.data != NULL)\n\t\tfree(key.data);\n\t\n\t/* free any memory allocated to the data field. */\n\tif (data.data != NULL)\n\t\tfree(data.data);\n\t\n\treturn result;\n}\n\n/*%\n * Perform a zone transfer\n *\n * BDB does not allow a secondary index on a database that allows\n * duplicates.\tWe have a few options:\n *\n * 1) kill speed by having lookup method use a secondary db which\n * is associated to the primary DB with the DNS data.\t Then have\n * another secondary db for zone transfer which also points to\n * the dns_data primary.\tNO - The\tpoint of this driver is\n * lookup performance.\n *\n * 2) Blow up database size by storing DNS data twice.\tOnce for\n * the lookup (dns_data) database, and a second time for the zone\n * transfer (dns_xfr) database. NO - That would probably require\n * a larger cache to provide good performance.\tAlso, that would\n * make the DB larger on disk potentially slowing it as well.\n *\n * 3) Loop through the dns_xfr database with a cursor to get\n * all the different hosts in a zone.\t Then use the zone & host\n * together to lookup the data in the dns_data database. YES -\n * This may slow down zone xfr's a little, but that's ok they\n * don't happen as often and don't need to be as fast. We can\n * also use this table when deleting a zone (The BDB driver\n * is read only - the delete would be used during replication\n * updates by a separate process).\n */\nisc_result_t\ndlz_allnodes(const char *zone, void *dbdata, dns_sdlzallnodes_t *allnodes) {\n\tisc_result_t result = ISC_R_NOTFOUND;\n\tbdbhpt_instance_t *db = (bdbhpt_instance_t *) dbdata;\n\tDBC *xfr_cursor = NULL;\n\tDBC *dns_cursor = NULL;\n\tDBT xfr_key, xfr_data, dns_key, dns_data;\n\tint xfr_flags;\n\tint dns_flags;\n\tint bdbhptres;\n\tbdbhpt_parsed_data_t pd;\n\tchar *tmp = NULL, *tmp_zone, *tmp_zone_host = NULL;\n\t\n\tmemset(&xfr_key, 0, sizeof(DBT));\n\tmemset(&xfr_data, 0, sizeof(DBT));\n\tmemset(&dns_key, 0, sizeof(DBT));\n\tmemset(&dns_data, 0, sizeof(DBT));\n\t\n\txfr_key.data = tmp_zone = strdup(zone);\n\tif (xfr_key.data == NULL)\n\t\treturn (ISC_R_NOMEMORY);\n\t\n\txfr_key.size = strlen(xfr_key.data);\n\t\n\t/* get a cursor to loop through dns_xfr table */\n\tif (db->xfr->cursor(db->xfr, NULL, &xfr_cursor, 0) != 0) {\n\t\tresult = ISC_R_FAILURE;\n\t\tgoto allnodes_cleanup;\n\t}\n\t\n\t/* get a cursor to loop through dns_data table */\n\tif (db->data->cursor(db->data, NULL, &dns_cursor, 0) != 0) {\n\t\tresult = ISC_R_FAILURE;\n\t\tgoto allnodes_cleanup;\n\t}\n\t\n\txfr_flags = DB_SET;\n\t\n\t/* loop through xfr table for specified zone. */\n\twhile ((bdbhptres = xfr_cursor->c_get(xfr_cursor, &xfr_key,\n\t\t\t\t\t      &xfr_data, xfr_flags)) == 0)\n\t{\n\t\txfr_flags = DB_NEXT_DUP;\n\t\t\n\t\t/* +1 to allow for space between zone and host names */\n\t\tdns_key.size = xfr_data.size + xfr_key.size + 1;\n\t\t\n\t\t/* +1 to allow for null term at end of string. */\n\t\tdns_key.data = tmp_zone_host = malloc(dns_key.size + 1);\n\t\tif (dns_key.data == NULL)\n\t\t\tgoto allnodes_cleanup;\n\t\t\n\t\t/*\n\t\t * construct search key for dns_data.\n\t\t * zone_name(a space)host_name\n\t\t */\n\t\tstrcpy(dns_key.data, zone);\n\t\tstrcat(dns_key.data, \" \");\n\t\tstrncat(dns_key.data, xfr_data.data, xfr_data.size);\n\t\t\n\t\tdns_flags = DB_SET;\n\t\t\n\t\twhile ((bdbhptres = dns_cursor->c_get(dns_cursor,\n\t\t\t\t\t\t      &dns_key,\n\t\t\t\t\t\t      &dns_data,\n\t\t\t\t\t\t      dns_flags)) == 0)\n\t\t{\n\t\t\tdns_flags = DB_NEXT_DUP;\n\t\t\t\n\t\t\t/* +1 to allow for null term at end of string. */\n\t\t\ttmp = realloc(tmp, dns_data.size + 1);\n\t\t\tif (tmp == NULL)\n\t\t\t\tgoto allnodes_cleanup;\n\t\t\t\n\t\t\t/* copy data to tmp string, and append null term. */\n\t\t\tstrncpy(tmp, dns_data.data, dns_data.size);\n\t\t\ttmp[dns_data.size] = '\\0';\n\t\t\t\n\t\t\t/* split string into dns data parts. */\n\t\t\tif (bdbhpt_parse_data(db->log,\n\t\t\t\t\t      tmp, &pd) != ISC_R_SUCCESS)\n\t\t\t\tgoto allnodes_cleanup;\n\t\t\tresult = db->putnamedrr(allnodes, pd.host,\n\t\t\t\t\t\tpd.type, pd.ttl, pd.data);\n\t\t\tif (result != ISC_R_SUCCESS)\n\t\t\t\tgoto allnodes_cleanup;\n\t\t\t\n\t\t}\t /* end inner while loop */\n\t\t\n\t\t/* clean up memory */\n\t\tif (tmp_zone_host != NULL) {\n\t\t\tfree(tmp_zone_host);\n\t\t\ttmp_zone_host = NULL;\n\t\t}\n\t} /* end outer while loop */\n\t\n allnodes_cleanup:\n\t/* free any memory */\n\tif (tmp != NULL)\n\t\tfree(tmp);\n\t\n\tif (tmp_zone_host != NULL)\n\t\tfree(tmp_zone_host);\n\t\n\tif (tmp_zone != NULL)\n\t\tfree(tmp_zone);\n\t\n\t/* get rid of cursors */\n\tif (xfr_cursor != NULL)\n\t\txfr_cursor->c_close(xfr_cursor);\n\t\n\tif (dns_cursor != NULL)\n\t\tdns_cursor->c_close(dns_cursor);\n\t\n\treturn result;\n}\n\n/*%\n * Performs bdbhpt cleanup.\n * Used by bdbhpt_create if there is an error starting up.\n * Used by bdbhpt_destroy when the driver is shutting down.\n */\nstatic void\nbdbhpt_cleanup(bdbhpt_instance_t *db) {\n\t/* close databases */\n\tif (db->data != NULL)\n\t\tdb->data->close(db->data, 0);\n\tif (db->xfr != NULL)\n\t\tdb->xfr->close(db->xfr, 0);\n\tif (db->zone != NULL)\n\t\tdb->zone->close(db->zone, 0);\n\tif (db->client != NULL)\n\t\tdb->client->close(db->client, 0);\n\t\n\t/* close environment */\n\tif (db->dbenv != NULL)\n\t\tdb->dbenv->close(db->dbenv, 0);\n}\n\n/*\n * See if we handle a given zone\n */\n#if DLZ_DLOPEN_VERSION < 3\nisc_result_t\ndlz_findzonedb(void *dbdata, const char *name)\n#else\nisc_result_t\ndlz_findzonedb(void *dbdata, const char *name,\n\t\t dns_clientinfomethods_t *methods,\n\t\t dns_clientinfo_t *clientinfo)\n#endif\n{\n\tisc_result_t result;\n\tbdbhpt_instance_t *db = (bdbhpt_instance_t *) dbdata;\n\tDBT key, data;\n\t\n\tmemset(&key, 0, sizeof(DBT));\n\tmemset(&data, 0, sizeof(DBT));\n\tdata.flags = DB_DBT_MALLOC;\n\n#if DLZ_DLOPEN_VERSION >= 3\n\tUNUSED(methods);\n\tUNUSED(clientinfo);\n#endif\n\n\tkey.data = strdup(name);\n\n\tif (key.data == NULL)\n\t\treturn (ISC_R_NOMEMORY);\n\n\t/*\n\t * reverse string to take advantage of BDB locality of reference\n\t * if we need futher lookups because the zone doesn't match the\n\t * first time.\n\t */\n\tkey.data = bdbhpt_strrev(key.data);\n\tkey.size = strlen(key.data);\n\n\tswitch(db->zone->get(db->zone, NULL, &key, &data, 0)) {\n\tcase DB_NOTFOUND:\n\t\tresult = ISC_R_NOTFOUND;\n\t\tbreak;\n\tcase 0:\n\t\tresult = ISC_R_SUCCESS;\n\t\tbreak;\n\tdefault:\n\t\tresult = ISC_R_FAILURE;\n\t}\n\t\n\t/* free any memory duplicate string in the key field */\n\tif (key.data != NULL)\n\t\tfree(key.data);\n\t\n\t/* free any memory allocated to the data field. */\n\tif (data.data != NULL)\n\t\tfree(data.data);\n\t\n\treturn result;\n}\n\n/*\n * Look up one record in the database.\n *\n */\n#if DLZ_DLOPEN_VERSION == 1\nisc_result_t dlz_lookup(const char *zone, const char *name, \n\t\t\tvoid *dbdata, dns_sdlzlookup_t *lookup)\n#else\nisc_result_t dlz_lookup(const char *zone, const char *name, void *dbdata,\n\t\t\tdns_sdlzlookup_t *lookup,\n\t\t\tdns_clientinfomethods_t *methods,\n\t\t\tdns_clientinfo_t *clientinfo)\n#endif\n{\n\tisc_result_t result = ISC_R_NOTFOUND;\n\tbdbhpt_instance_t *db = (bdbhpt_instance_t *) dbdata;\n\tDBC *data_cursor = NULL;\n\tDBT key, data;\n\tint bdbhptres;\n\tint flags;\n\n\tbdbhpt_parsed_data_t pd;\n\tchar *tmp = NULL;\n\tchar *keyStr = NULL;\n\t\n#if DLZ_DLOPEN_VERSION >= 2\n\tUNUSED(methods);\n\tUNUSED(clientinfo);\n#endif\n\n\tmemset(&key, 0, sizeof(DBT));\n\tmemset(&data, 0, sizeof(DBT));\n\t\n\tkey.size = strlen(zone) + strlen(name) + 1;\n\n\t/* allocate mem for key */\n\tkey.data = keyStr = malloc((key.size + 1) * sizeof(char));\n\t\n\tif (keyStr == NULL)\n\t\treturn ISC_R_NOMEMORY;\n\t\n\tstrcpy(keyStr, zone);\n\tstrcat(keyStr, \" \");\n\tstrcat(keyStr, name);\n\t\n\t/* get a cursor to loop through data */\n\tif (db->data->cursor(db->data, NULL, &data_cursor, 0) != 0) {\n\t\tresult = ISC_R_FAILURE;\n\t\tgoto lookup_cleanup;\n\t}\n\n\tresult = ISC_R_NOTFOUND;\n\n\tflags = DB_SET;\n\twhile ((bdbhptres = data_cursor->c_get(data_cursor, &key, &data,\n\t\t\t\t\t       flags)) == 0)\n\t{ \n\t\tflags = DB_NEXT_DUP;\n\t\ttmp = realloc(tmp, data.size + 1);\n\t\tif (tmp == NULL)\n\t\t\tgoto lookup_cleanup;\n\t\t\n\t\tstrncpy(tmp, data.data, data.size);\n\t\ttmp[data.size] = '\\0';\n\t\t\n\t\tif (bdbhpt_parse_data(db->log, tmp, &pd) != ISC_R_SUCCESS)\n\t\t\tgoto lookup_cleanup;\n\t\t\n\t\tresult = db->putrr(lookup, pd.type, pd.ttl, pd.data);\n\t\tif (result != ISC_R_SUCCESS)\n\t\t\tgoto lookup_cleanup;\n\t} /* end while loop */\n\t\n lookup_cleanup:\n\t/* get rid of cursor */\n\tif (data_cursor != NULL)\n\t\tdata_cursor->c_close(data_cursor);\n\t\n\tif (keyStr != NULL)\n\t\tfree(keyStr);\n\tif (tmp != NULL)\n\t\tfree(tmp);\n\t\n\treturn result;\n}\n\n/*%\n * Initialises, sets flags and then opens Berkeley databases.\n */\nstatic isc_result_t\nbdbhpt_opendb(log_t *log, DB_ENV *db_env, DBTYPE db_type, DB **db,\n\t      const char *db_name, char *db_file, int flags)\n{\n\tint result;\n\n\t/* Initialise the database. */\n\tif ((result = db_create(db, db_env, 0)) != 0) {\n\t\tlog(ISC_LOG_ERROR,\n\t\t    \"bdbhpt_dynamic: could not initialize %s database. \"\n\t\t    \"BerkeleyDB error: %s\",\n\t\t    db_name, db_strerror(result));\n\t\treturn ISC_R_FAILURE;\n\t}\n\n\t/* set database flags. */\n\tif ((result = (*db)->set_flags(*db, flags)) != 0) {\n\t\tlog(ISC_LOG_ERROR,\n\t\t    \"bdbhpt_dynamic: could not set flags for %s database. \"\n\t\t    \"BerkeleyDB error: %s\",\n\t\t    db_name, db_strerror(result));\n\t\treturn ISC_R_FAILURE;\n\t}\n\n\t/* open the database. */\n\tif ((result = (*db)->open(*db, NULL, db_file, db_name, db_type,\n\t\t\t\t  DB_RDONLY | bdbhpt_threads, 0)) != 0) {\n\t\tlog(ISC_LOG_ERROR,\n\t\t    \"bdbhpt_dynamic: could not open %s database in %s. \"\n\t\t    \"BerkeleyDB error: %s\",\n\t\t    db_name, db_file, db_strerror(result));\n\t\treturn ISC_R_FAILURE;\n\t}\n\t\n\treturn ISC_R_SUCCESS;\n}\n\n\n/*\n * Called to initialize the driver\n */\nisc_result_t\ndlz_create(const char *dlzname, unsigned int argc, char *argv[],\n\t\t void **dbdata, ...)\n{\n\tisc_result_t result;\n\tint bdbhptres;\n\tint bdbFlags = 0;\n\tbdbhpt_instance_t *db = NULL;\n\t\n\tconst char *helper_name;\n\tva_list ap;\n\n\tUNUSED(dlzname);\n\n\t/* Allocate memory for our db structures and helper functions */\n\tdb = calloc(1, sizeof(struct bdbhpt_instance));\n\tif (db == NULL)\n\t\treturn (ISC_R_NOMEMORY);\n\n\t/* Fill in the helper functions */\n\tva_start(ap, dbdata);\n\twhile ((helper_name = va_arg(ap, const char *)) != NULL)\n\t\tb9_add_helper(db, helper_name, va_arg(ap, void*));\n\tva_end(ap);\n\n\t/* verify we have 4 arg's passed to the driver */\n\tif (argc != 4) {\n\t\tdb->log(ISC_LOG_ERROR,\n\t\t\t\"bdbhpt_dynamic: please supply 3 command line args. \"\n\t\t\t\"You supplied: %s\", argc);\n\t\treturn (ISC_R_FAILURE);\n\t}\n\n\tswitch((char) *argv[1]) {\n\t\t/*\n\t\t * Transactional mode.\tHighest safety - lowest speed.\n\t\t */\n\tcase 'T':\n\tcase 't':\n\t\tbdbFlags = DB_INIT_MPOOL | DB_INIT_LOCK |\n\t\t\tDB_INIT_LOG | DB_INIT_TXN;\n\t\tdb->log(ISC_LOG_INFO,\n\t\t\t\"bdbhpt_dynamic: using transactional mode.\");\n\t\tbreak;\n\n\t\t/*\n\t\t * Concurrent mode.\t Lower safety (no rollback) -\n\t\t * higher speed.\n\t\t */\n\tcase 'C':\n\tcase 'c':\n\t\tbdbFlags = DB_INIT_CDB | DB_INIT_MPOOL;\n\t\tdb->log(ISC_LOG_INFO,\n\t\t\t\"bdbhpt_dynamic: using concurrent mode.\");\n\t\tbreak;\n\n\t\t/*\n\t\t * Private mode. No inter-process communication & no locking.\n\t\t * Lowest saftey - highest speed.\n\t\t */\n\tcase 'P':\n\tcase 'p':\n\t\tbdbFlags = DB_PRIVATE | DB_INIT_MPOOL;\n\t\tdb->log(ISC_LOG_INFO,\n\t\t\t\"bdbhpt_dynamic: using private mode.\");\n\t\tbreak;\n\tdefault:\n\t\tdb->log(ISC_LOG_ERROR,\n\t\t\t\"bdbhpt_dynamic: \"\n\t\t\t\"operating mode must be set to P or C or T. \"\n\t\t\t\"You specified '%s'\", argv[1]);\n\t\treturn (ISC_R_FAILURE);\n\t}\n\t\n\t/*\n\t * create bdbhpt environment\n\t * Basically bdbhpt allocates and assigns memory to db->dbenv\n\t */\n\tbdbhptres = db_env_create(&db->dbenv, 0);\n\tif (bdbhptres != 0) {\n\t\tdb->log(ISC_LOG_ERROR,\n\t\t\t\"bdbhpt_dynamic: db environment could not be created. \"\n\t\t\t\"BerkeleyDB error: %s\", db_strerror(bdbhptres));\n\t\tresult = ISC_R_FAILURE;\n\t\tgoto init_cleanup;\n\t}\n\t\n\t/* open bdbhpt environment */\n\tbdbhptres = db->dbenv->open(db->dbenv, argv[2],\n\t\t\t\t    bdbFlags | bdbhpt_threads | DB_CREATE, 0);\n\tif (bdbhptres != 0) {\n\t\tdb->log(ISC_LOG_ERROR,\n\t\t\t\"bdbhpt_dynamic: \"\n\t\t\t\"db environment at '%s' could not be opened. \"\n\t\t\t\"BerkeleyDB error: %s\",\n\t\t\targv[2], db_strerror(bdbhptres));\n\t\tresult = ISC_R_FAILURE;\n\t\tgoto init_cleanup;\n\t}\n\n\t/* open dlz_data database. */\n\tresult = bdbhpt_opendb(db->log, db->dbenv, DB_UNKNOWN, &db->data,\n\t\t\t       dlz_data, argv[3], DB_DUP | DB_DUPSORT);\n\tif (result != ISC_R_SUCCESS)\n\t\tgoto init_cleanup;\n\n\t/* open dlz_xfr database. */\n\tresult = bdbhpt_opendb(db->log, db->dbenv, DB_UNKNOWN, &db->xfr,\n\t\t\t       dlz_xfr, argv[3], DB_DUP | DB_DUPSORT);\n\tif (result != ISC_R_SUCCESS)\n\t\tgoto init_cleanup;\n\t\n\t/* open dlz_zone database. */\n\tresult = bdbhpt_opendb(db->log, db->dbenv, DB_UNKNOWN, &db->zone,\n\t\t\t       dlz_zone, argv[3], 0);\n\tif (result != ISC_R_SUCCESS)\n\t\tgoto init_cleanup;\n\t\n\t/* open dlz_client database. */\n\tresult = bdbhpt_opendb(db->log, db->dbenv, DB_UNKNOWN, &db->client,\n\t\t\t       dlz_client, argv[3], DB_DUP | DB_DUPSORT);\n\tif (result != ISC_R_SUCCESS)\n\t\tgoto init_cleanup;\n\t\n\t*dbdata = db;\n\n\tdb->log(ISC_LOG_INFO,\n\t\t\"bdbhpt_dynamic: version %s, started\",\n\t\tdlz_bdbhpt_dynamic_version);\n\treturn(ISC_R_SUCCESS);\n\t\n init_cleanup:\n\tbdbhpt_cleanup(db);\n\treturn result;\n}\n\n/*\n * Shut down the backend\n */\nvoid\ndlz_destroy(void *dbdata) {\n\tstruct bdbhpt_instance *db = (struct bdbhpt_instance *)dbdata;\n\t\n\tdb->log(ISC_LOG_INFO,\n\t\t\"dlz_bdbhpt_dynamic (%s): shutting down\",\n\t\tdlz_bdbhpt_dynamic_version);\n\tbdbhpt_cleanup((bdbhpt_instance_t *) dbdata);\n\tfree(db);\n}\n\n/*\n * Return the version of the API\n */\nint\ndlz_version(unsigned int *flags) {\n\tUNUSED(flags);\n\treturn (DLZ_DLOPEN_VERSION);\n}\n\n/*\n * Register a helper function from the bind9 dlz_dlopen driver\n */\nstatic void\nb9_add_helper(struct bdbhpt_instance *db, const char *helper_name, void *ptr) {\n\tif (strcmp(helper_name, \"log\") == 0)\n\t\tdb->log = (log_t *)ptr;\n\tif (strcmp(helper_name, \"putrr\") == 0)\n\t\tdb->putrr = (dns_sdlz_putrr_t *)ptr;\n\tif (strcmp(helper_name, \"putnamedrr\") == 0)\n\t\tdb->putnamedrr = (dns_sdlz_putnamedrr_t *)ptr;\n\tif (strcmp(helper_name, \"writeable_zone\") == 0)\n\t\tdb->writeable_zone = (dns_dlz_writeablezone_t *)ptr;\n}\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/contrib/dlz/modules/bdbhpt/README.md": "dlz-bdbhpt-dynamic\n==================\n\nA Bind 9 Dynamically Loadable BerkeleyDB High Performance Text Driver\n\nSummary\n-------\n\nThis is an attempt to port the original Bind 9 DLZ bdbhpt_driver.c as\nfound in the Bind 9 source tree into the new DLZ dlopen driver API.\nThe goals of this project are as follows:\n\n* Provide DLZ facilities to OEM-supported Bind distributions\n* Support both v1 (Bind 9.8) and v2 (Bind 9.9) of the dlopen() DLZ API\n\nRequirements\n------------\n\nYou will need the following:\n * Bind 9.8 or higher with the DLZ dlopen driver enabled\n * BerkeleyDB libraries and header files\n * A C compiler\n\nThis distribution have been successfully installed and tested on\nUbuntu 12.04.\n\nInstallation\n------------\n\nWith the above requirements satisfied perform the following steps:\n\n1. Ensure the symlink for dlz_minimal.h points at the correct header\n   file matching your Bind version\n2. Run: make\n3. Run: sudo make install # this will install dlz_bdbhpt_dynamic.so\n   into /usr/lib/bind9/\n4. Add a DLZ statement similar to the example below into your\n   Bind configuration\n5. Ensure your BerkeleyDB home-directory exists and can be written to\n   by the bind user\n6. Use the included testing/bdbhpt-populate.pl script to provide some\n   data for initial testing\n\nUsage\n-----\n\nExample usage is as follows:\n\n```\ndlz \"bdbhpt_dynamic\" {\n        database \"dlopen /usr/lib/bind9/dlz_bdbhpt_dynamic.so T /var/cache/bind/dlz dnsdata.db\";\n};\n```\n\nThe arguments for the \"database\" line above are as follows:\n\n1. dlopen - Use the dlopen DLZ driver to dynamically load our compiled\n   driver\n2. The full path to your built dlz_bdbhpt_dynamic.so\n3. Single character specifying the mode to open your BerkeleyDB\n   environment:\n   * T - Transactional Mode - Highest safety, lowest speed.\n   * C - Concurrent Mode - Lower safety (no rollback), higher speed.\n   * P - Private Mode - No interprocess communication & no locking.\n     Lowest safety, highest speed.\n4. Directory containing your BerkeleyDB - this is where the BerkeleyDB\n   environment will be created.\n5. Filename within this directory containing your BerkeleyDB tables.\n\nA copy of the above Bind configuration is included within\nexample/dlz.conf.\n\nAuthor\n------\n\nThe person responsible for this is:\n\n Mark Goldfinch <g@g.org.nz>\n\nThe code is maintained at:\n\n https://github.com/goldie80/dlz-bdbhpt-dynamic\n\nThere is very little in the way of original code in this work,\nhowever, original license conditions from both bdbhpt_driver.c and\ndlz_example.c are maintained in the dlz_bdbhpt_dynamic.c.\n",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/contrib/dlz/modules/bdbhpt/testing/named.conf": "/*\n * Copyright (C) 2013  Internet Systems Consortium, Inc. (\"ISC\")\n *\n * Permission to use, copy, modify, and/or distribute this software for any\n * purpose with or without fee is hereby granted, provided that the above\n * copyright notice and this permission notice appear in all copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND ISC DISCLAIMS ALL WARRANTIES WITH\n * REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n * AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,\n * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\n * LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE\n * OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\n * PERFORMANCE OF THIS SOFTWARE.\n */\n\ncontrols { };\n\noptions {\n\tdirectory \".\";\n\tport 5300;\n\tpid-file \"named.pid\";\n\tsession-keyfile \"session.key\";\n\tlisten-on { any; };\n\tlisten-on-v6 { none; };\n\trecursion no;\n};\n\nkey rndc_key {\n\tsecret \"1234abcd8765\";\n\talgorithm hmac-md5;\n};\n\ncontrols {\n\tinet 127.0.0.1 port 9953 allow { any; } keys { rndc_key; };\n};\n\ndlz \"bdbhpt_dynamic\" {\n        database \"dlopen ../dlz_bdbhpt_dynamic.so T . test.db\";\n};\n",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/doc/arm/dlz.xml": "<!--\n - Copyright (C) Internet Systems Consortium, Inc. (\"ISC\")\n -\n - This Source Code Form is subject to the terms of the Mozilla Public\n - License, v. 2.0. If a copy of the MPL was not distributed with this\n - file, You can obtain one at http://mozilla.org/MPL/2.0/.\n -\n - See the COPYRIGHT file distributed with this work for additional\n - information regarding copyright ownership.\n-->\n\n<!-- Converted by db4-upgrade version 1.0 -->\n<section xmlns:db=\"http://docbook.org/ns/docbook\" version=\"5.0\" xml:id=\"dlz-info\"><info><title>DLZ (Dynamically Loadable Zones)</title></info>\n\n  <para>\n    DLZ (Dynamically Loadable Zones) is an extension to BIND 9 that allows\n    zone data to be retrieved directly from an external database.  There is\n    no required format or schema.  DLZ drivers exist for several different\n    database backends including PostgreSQL, MySQL, and LDAP and can be\n    written for any other.\n  </para>\n  <para>\n    Historically, DLZ drivers had to be statically linked with the <command>named</command>\n    binary and were turned on via a configure option at compile time (for\n    example, <userinput>\"configure --with-dlz-ldap\"</userinput>).\n    Currently, the drivers provided in the BIND 9 tarball in\n    <filename>contrib/dlz/drivers</filename> are still linked this\n    way.\n  </para>\n  <para>\n    In BIND 9.8 and higher, it is possible to link some DLZ modules\n    dynamically at runtime, via the DLZ \"dlopen\" driver, which acts as a\n    generic wrapper around a shared object implementing the DLZ API.  The\n    \"dlopen\" driver is linked into <command>named</command> by default, so configure options\n    are no longer necessary when using these dynamically linkable drivers,\n    but are still needed for the older drivers in\n    <filename>contrib/dlz/drivers</filename>.\n  </para>\n\n  <para>\n    When the DLZ module provides data to <command>named</command>, it does so in text format.\n    The response is converted to DNS wire format by <command>named</command>.  This\n    conversion, and the lack of any internal caching, places significant\n    limits on the query performance of DLZ modules.  Consequently, DLZ is\n    not recommended for use on high-volume servers.  However, it can be\n    used in a hidden master configuration, with slaves retrieving zone\n    updates via AXFR.  (Note, however, that DLZ has no built-in support for\n    DNS notify; slaves are not automatically informed of changes to the\n    zones in the database.)\n  </para>\n\n  <section><info><title>Configuring DLZ</title></info>\n\n    <para>\n      A DLZ database is configured with a <command>dlz</command>\n      statement in <filename>named.conf</filename>:\n    </para>\n    <screen>\n    dlz example {\n\tdatabase \"dlopen driver.so <option>args</option>\";\n\tsearch yes;\n    };\n    </screen>\n    <para>\n      This specifies a DLZ module to search when answering queries; the\n      module is implemented in <filename>driver.so</filename> and is\n      loaded at runtime by the dlopen DLZ driver.  Multiple\n      <command>dlz</command> statements can be specified; when\n      answering a query, all DLZ modules with <option>search</option>\n      set to <literal>yes</literal> will be queried to find out if\n      they contain an answer for the query name; the best available\n      answer will be returned to the client.\n    </para>\n    <para>\n      The <option>search</option> option in the above example can be\n      omitted, because <literal>yes</literal> is the default value.\n    </para>\n    <para>\n      If <option>search</option> is set to <literal>no</literal>, then\n      this DLZ module is <emphasis>not</emphasis> searched for the best\n      match when a query is received.  Instead, zones in this DLZ must be\n      separately specified in a zone statement.  This allows you to\n      configure a zone normally using standard zone option semantics,\n      but specify a different database back-end for storage of the\n      zone's data.  For example, to implement NXDOMAIN redirection using\n      a DLZ module for back-end storage of redirection rules:\n    </para>\n    <screen>\n    dlz other {\n\tdatabase \"dlopen driver.so <option>args</option>\";\n\tsearch no;\n    };\n\n    zone \".\" {\n\ttype redirect;\n\tdlz other;\n    };\n    </screen>\n  </section>\n  <section><info><title>Sample DLZ Driver</title></info>\n\n    <para>\n      For guidance in implementation of DLZ modules, the directory\n      <filename>contrib/dlz/example</filename> contains a basic\n      dynamically-linkable DLZ module--i.e., one which can be\n      loaded at runtime by the \"dlopen\" DLZ driver.\n      The example sets up a single zone, whose name is passed\n      to the module as an argument in the <command>dlz</command>\n      statement:\n    </para>\n    <screen>\n    dlz other {\n\tdatabase \"dlopen driver.so example.nil\";\n    };\n    </screen>\n    <para>\n      In the above example, the module is configured to create a zone\n      \"example.nil\", which can answer queries and AXFR requests, and\n      accept DDNS updates.  At runtime, prior to any updates, the zone\n      contains an SOA, NS, and a single A record at the apex:\n    </para>\n    <screen>\n example.nil.  3600    IN      SOA     example.nil. hostmaster.example.nil. (\n\t\t\t\t\t       123 900 600 86400 3600\n\t\t\t\t       )\n example.nil.  3600    IN      NS      example.nil.\n example.nil.  1800    IN      A       10.53.0.1\n    </screen>\n    <para>\n      The sample driver is capable of retrieving information about the\n      querying client, and altering its response on the basis of this\n      information.  To demonstrate this feature, the example driver\n      responds to queries for \"source-addr.<option>zonename</option>&gt;/TXT\"\n      with the source address of the query.  Note, however, that this\n      record will *not* be included in AXFR or ANY responses.  Normally,\n      this feature would be used to alter responses in some other fashion,\n      e.g., by providing different address records for a particular name\n      depending on the network from which the query arrived.\n    </para>\n    <para>\n      Documentation of the DLZ module API can be found in\n      <filename>contrib/dlz/example/README</filename>.  This directory also\n      contains the header file <filename>dlz_minimal.h</filename>, which\n      defines the API and should be included by any dynamically-linkable\n      DLZ module.\n    </para>\n  </section>\n</section>\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/bin/named/named.conf.html",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/bin/tests/system/checkzone/zones/bad-caa-rr.db",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/bin/tests/system/checkzone/zones/crashzone.db",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/bin/tests/system/nsupdate/ns7/machine.ccache",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/bin/tests/system/nsupdate/ns7/dns.keytab",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/bin/tests/system/nsupdate/ns8/machine.ccache",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/bin/tests/system/nsupdate/ns8/dns.keytab",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/bin/tests/system/nsupdate/ns10/machine.ccache",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/bin/tests/system/nsupdate/ns10/dns.keytab",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/bin/tests/system/nsupdate/ns9/machine.ccache",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/bin/tests/system/nsupdate/ns9/dns.keytab",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/bin/tests/system/tsiggss/ns1/administrator.ccache",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/bin/tests/system/tsiggss/ns1/testdenied.ccache",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/bin/tests/system/tsiggss/ns1/dns.keytab",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/bin/tests/system/geoip2/data/GeoIP2-Country.mmdb",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/bin/tests/system/geoip2/data/GeoIP2-Domain.mmdb",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/bin/tests/system/geoip2/data/GeoIP2-ISP.mmdb",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/bin/tests/system/geoip2/data/GeoLite2-ASN.mmdb",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/bin/tests/system/geoip2/data/GeoIP2-City.mmdb",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/bin/tests/system/geoip/data/GeoIPDomain.dat",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/bin/tests/system/geoip/data/GeoIPOrg.dat",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/bin/tests/system/geoip/data/GeoIPCityv6.dat",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/bin/tests/system/geoip/data/GeoIP.dat",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/bin/tests/system/geoip/data/GeoIPRegion.dat",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/bin/tests/system/geoip/data/GeoIPNetSpeed.dat",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/bin/tests/system/geoip/data/GeoIPISP.dat",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/bin/tests/system/geoip/data/GeoIPASNum.dat",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/bin/tests/system/geoip/data/GeoIPASNumv6.dat",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/bin/tests/system/geoip/data/GeoIPv6.dat",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/bin/tests/system/geoip/data/GeoIPCity.dat",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/bin/tests/system/dnstap/large-answer.fstrm",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/bin/win32/BINDInstall/BINDInstall.rc",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/bin/win32/BINDInstall/res/BINDInstall.ico",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/lib/dns/spnego.c",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/lib/dns/tests/testdata/dstrandom/random.data",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/lib/dns/tests/testdata/dnstap/dnstap.saved",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/doc/arm/Bv9ARM.ch08.html",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/doc/arm/man.dig.html",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/doc/arm/man.pkcs11-tokens.html",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/doc/arm/man.arpaname.html",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/doc/arm/isc-logo.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/doc/arm/man.pkcs11-destroy.html",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/doc/arm/Bv9ARM.ch09.html",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/doc/arm/man.dnssec-signzone.html",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/doc/arm/Bv9ARM.ch01.html",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/doc/arm/man.named.conf.html",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/doc/arm/Bv9ARM.ch12.html",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/doc/arm/man.named.html",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/doc/arm/Bv9ARM.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/doc/arm/man.named-checkconf.html",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/doc/arm/Bv9ARM.ch11.html",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/doc/arm/man.rndc-confgen.html",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/doc/arm/man.dnssec-keyfromlabel.html",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/doc/arm/man.nsupdate.html",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/doc/arm/man.dnssec-importkey.html",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/doc/arm/man.named-rrchecker.html",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/doc/arm/man.named-checkzone.html",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/doc/arm/man.ddns-confgen.html",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/doc/arm/man.rndc.html",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/doc/arm/Bv9ARM.ch06.html",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/doc/arm/man.dnssec-checkds.html",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/doc/arm/man.named-nzd2nzf.html",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/doc/arm/man.dnssec-dsfromkey.html",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/doc/arm/man.dnssec-verify.html",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/doc/arm/Bv9ARM.ch05.html",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/doc/arm/man.host.html",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/doc/arm/man.filter-aaaa.html",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/doc/arm/man.dnssec-settime.html",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/doc/arm/Bv9ARM.ch02.html",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/doc/arm/man.mdig.html",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/doc/arm/man.dnssec-cds.html",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/doc/arm/man.pkcs11-list.html",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/doc/arm/man.rndc.conf.html",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/doc/arm/man.delv.html",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/doc/arm/man.nsec3hash.html",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/doc/arm/man.dnstap-read.html",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/doc/arm/man.dnssec-coverage.html",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/doc/arm/Bv9ARM.ch10.html",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/doc/arm/man.nslookup.html",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/doc/arm/notes.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/doc/arm/man.named-journalprint.html",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/doc/arm/Bv9ARM.ch07.html",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/doc/arm/Bv9ARM.ch04.html",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/doc/arm/Bv9ARM.ch03.html",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/doc/arm/man.pkcs11-keygen.html",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/doc/arm/Bv9ARM.html",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/doc/arm/man.dnssec-keymgr.html",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/doc/arm/man.dnssec-revoke.html",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/doc/arm/man.dnssec-keygen.html",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/doc/xsl/graphics/note.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/doc/xsl/graphics/important.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/doc/xsl/graphics/warning.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/doc/xsl/graphics/tip.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-bind9-9_14_6-da5vzlguphgeommhfl7zpd6slljza5lk/spack-src/doc/xsl/graphics/caution.pdf"
    ],
    "total_files": 3884
}