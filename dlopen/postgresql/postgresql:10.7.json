{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-postgresql-10.7-gyj6nqg7vr5w65ig6ixyhswgwynvijiu/spack-src/configure.in": "dnl Process this file with autoconf to produce a configure script.\ndnl configure.in\ndnl\ndnl Developers, please strive to achieve this order:\ndnl\ndnl 0. Initialization and options processing\ndnl 1. Programs\ndnl 2. Libraries\ndnl 3. Header files\ndnl 4. Types\ndnl 5. Structures\ndnl 6. Compiler characteristics\ndnl 7. Functions, global variables\ndnl 8. System services\ndnl\ndnl Read the Autoconf manual for details.\ndnl\nm4_pattern_forbid(^PGAC_)dnl to catch undefined macros\n\nAC_INIT([PostgreSQL], [10.7], [pgsql-bugs@postgresql.org])\n\nm4_if(m4_defn([m4_PACKAGE_VERSION]), [2.69], [], [m4_fatal([Autoconf version 2.69 is required.\nUntested combinations of 'autoconf' and PostgreSQL versions are not\nrecommended.  You can remove the check from 'configure.in' but it is then\nyour responsibility whether the result works or not.])])\nAC_COPYRIGHT([Copyright (c) 1996-2017, PostgreSQL Global Development Group])\nAC_CONFIG_SRCDIR([src/backend/access/common/heaptuple.c])\nAC_CONFIG_AUX_DIR(config)\nAC_PREFIX_DEFAULT(/usr/local/pgsql)\nAC_SUBST(configure_args, [$ac_configure_args])\n\n[PG_MAJORVERSION=`expr \"$PACKAGE_VERSION\" : '\\([0-9][0-9]*\\)'`]\nAC_SUBST(PG_MAJORVERSION)\nAC_DEFINE_UNQUOTED(PG_MAJORVERSION, \"$PG_MAJORVERSION\", [PostgreSQL major version as a string])\n\nPGAC_ARG_REQ(with, extra-version, [STRING], [append STRING to version],\n             [PG_VERSION=\"$PACKAGE_VERSION$withval\"],\n             [PG_VERSION=\"$PACKAGE_VERSION\"])\nAC_DEFINE_UNQUOTED(PG_VERSION, \"$PG_VERSION\", [PostgreSQL version as a string])\n\nAC_CANONICAL_HOST\n\ntemplate=\nAC_MSG_CHECKING([which template to use])\n\nPGAC_ARG_REQ(with, template, [NAME], [override operating system template],\n[\n  case $withval in\n    list)   echo; ls \"$srcdir/src/template\"; exit;;\n    *)      if test -f \"$srcdir/src/template/$with_template\" ; then\n              template=$withval\n            else\n              AC_MSG_ERROR(['$withval' is not a valid template name. Use 'list' for a list.])\n            fi;;\n  esac\n],\n[\n# --with-template not given\n\ncase $host_os in\n     aix*) template=aix ;;\n  cygwin*) template=cygwin ;;\n  darwin*) template=darwin ;;\ndragonfly*) template=netbsd ;;\n freebsd*) template=freebsd ;;\n    hpux*) template=hpux ;;\n linux*|gnu*|k*bsd*-gnu)\n           template=linux ;;\n   mingw*) template=win32 ;;\n  netbsd*) template=netbsd ;;\n openbsd*) template=openbsd ;;\n solaris*) template=solaris ;;\nesac\n\n  if test x\"$template\" = x\"\" ; then\n    AC_MSG_ERROR([[\n*******************************************************************\nPostgreSQL has apparently not been ported to your platform yet.\nTo try a manual configuration, look into the src/template directory\nfor a similar platform and use the '--with-template=' option.\n\nPlease also contact <pgsql-bugs@postgresql.org> to see about\nrectifying this.  Include the above 'checking host system type...'\nline.\n*******************************************************************\n]])\n  fi\n\n])\n\nAC_MSG_RESULT([$template])\n\nPORTNAME=$template\nAC_SUBST(PORTNAME)\n\n# Initialize default assumption that we do not need separate assembly code\n# for TAS (test-and-set).  This can be overridden by the template file\n# when it's executed.\nneed_tas=no\ntas_file=dummy.s\n\n\n\n##\n## Command line options\n##\n\n#\n# Add non-standard directories to the include path\n#\nPGAC_ARG_REQ(with, includes, [DIRS], [look for additional header files in DIRS])\n\n\n#\n# Add non-standard directories to the library search path\n#\nPGAC_ARG_REQ(with, libraries, [DIRS], [look for additional libraries in DIRS],\n             [LIBRARY_DIRS=$withval])\n\nPGAC_ARG_REQ(with, libs,      [DIRS], [alternative spelling of --with-libraries],\n             [LIBRARY_DIRS=$withval])\n\n\n#\n# 64-bit integer date/time storage is now the only option, but to avoid\n# unnecessary breakage of build scripts, continue to accept an explicit\n# \"--enable-integer-datetimes\" switch.\n#\nPGAC_ARG_BOOL(enable, integer-datetimes, yes, [obsolete option, no longer supported],\n              [],\n              [AC_MSG_ERROR([--disable-integer-datetimes is no longer supported])])\n\n\n#\n# NLS\n#\nAC_MSG_CHECKING([whether NLS is wanted])\nPGAC_ARG_OPTARG(enable, nls,\n                [LANGUAGES], [enable Native Language Support],\n                [],\n                [WANTED_LANGUAGES=$enableval],\n                [AC_DEFINE(ENABLE_NLS, 1,\n                           [Define to 1 if you want National Language Support. (--enable-nls)])])\nAC_MSG_RESULT([$enable_nls])\nAC_SUBST(enable_nls)\nAC_SUBST(WANTED_LANGUAGES)\n\n#\n# Default port number (--with-pgport), default 5432\n#\nAC_MSG_CHECKING([for default port number])\nPGAC_ARG_REQ(with, pgport, [PORTNUM], [set default port number [5432]],\n             [default_port=$withval],\n             [default_port=5432])\nAC_MSG_RESULT([$default_port])\n# Need both of these because some places want an integer and some a string\nAC_DEFINE_UNQUOTED(DEF_PGPORT, ${default_port},\n[Define to the default TCP port number on which the server listens and\nto which clients will try to connect.  This can be overridden at run-time,\nbut it's convenient if your clients have the right default compiled in.\n(--with-pgport=PORTNUM)])\nAC_DEFINE_UNQUOTED(DEF_PGPORT_STR, \"${default_port}\",\n                   [Define to the default TCP port number as a string constant.])\nAC_SUBST(default_port)\n\n# It's worth validating port; you can get very confusing errors otherwise\nif test x\"$default_port\" = x\"\"; then\n  AC_MSG_ERROR([invalid --with-pgport specification: empty string])\nelif test ! x`echo \"$default_port\" | sed -e 's/[[0-9]]*//'` = x\"\"; then\n  AC_MSG_ERROR([invalid --with-pgport specification: must be a number])\nelif test ! x`echo \"$default_port\" | sed -e 's/^0.//'` = x\"$default_port\"; then\n  AC_MSG_ERROR([invalid --with-pgport specification: must not have leading 0])\nelif test \"$default_port\" -lt \"1\" -o \"$default_port\" -gt \"65535\"; then\n  AC_MSG_ERROR([invalid --with-pgport specification: must be between 1 and 65535])\nfi\n\n#\n# '-rpath'-like feature can be disabled\n#\nPGAC_ARG_BOOL(enable, rpath, yes,\n              [do not embed shared library search path in executables])\nAC_SUBST(enable_rpath)\n\n#\n# Spinlocks\n#\nPGAC_ARG_BOOL(enable, spinlocks, yes,\n              [do not use spinlocks])\n\n#\n# Atomic operations\n#\nPGAC_ARG_BOOL(enable, atomics, yes,\n              [do not use atomic operations])\n\n#\n# Random number generation\n#\nPGAC_ARG_BOOL(enable, strong-random, yes,\n              [do not use a strong random number source])\nAC_SUBST(enable_strong_random)\n\n#\n# --enable-debug adds -g to compiler flags\n#\nPGAC_ARG_BOOL(enable, debug, no,\n              [build with debugging symbols (-g)])\nAC_SUBST(enable_debug)\n\n#\n# --enable-profiling enables gcc profiling\n#\nPGAC_ARG_BOOL(enable, profiling, no,\n              [build with profiling enabled ])\n\n#\n# --enable-coverage enables generation of code coverage metrics with gcov\n#\nPGAC_ARG_BOOL(enable, coverage, no,\n              [build with coverage testing instrumentation],\n[PGAC_PATH_PROGS(GCOV, gcov)\nif test -z \"$GCOV\"; then\n  AC_MSG_ERROR([gcov not found])\nfi\nPGAC_PATH_PROGS(LCOV, lcov)\nif test -z \"$LCOV\"; then\n  AC_MSG_ERROR([lcov not found])\nfi\nPGAC_PATH_PROGS(GENHTML, genhtml)\nif test -z \"$GENHTML\"; then\n  AC_MSG_ERROR([genhtml not found])\nfi])\nAC_SUBST(enable_coverage)\n\n#\n# DTrace\n#\nPGAC_ARG_BOOL(enable, dtrace, no,\n              [build with DTrace support],\n[PGAC_PATH_PROGS(DTRACE, dtrace)\nif test -z \"$DTRACE\"; then\n  AC_MSG_ERROR([dtrace not found])\nfi\nAC_SUBST(DTRACEFLAGS)])\nAC_SUBST(enable_dtrace)\n\n#\n# TAP tests\n#\nPGAC_ARG_BOOL(enable, tap-tests, no,\n              [enable TAP tests (requires Perl and IPC::Run)])\nAC_SUBST(enable_tap_tests)\n\n#\n# Block size\n#\nAC_MSG_CHECKING([for block size])\nPGAC_ARG_REQ(with, blocksize, [BLOCKSIZE], [set table block size in kB [8]],\n             [blocksize=$withval],\n             [blocksize=8])\ncase ${blocksize} in\n  1) BLCKSZ=1024;;\n  2) BLCKSZ=2048;;\n  4) BLCKSZ=4096;;\n  8) BLCKSZ=8192;;\n 16) BLCKSZ=16384;;\n 32) BLCKSZ=32768;;\n  *) AC_MSG_ERROR([Invalid block size. Allowed values are 1,2,4,8,16,32.])\nesac\nAC_MSG_RESULT([${blocksize}kB])\n\nAC_DEFINE_UNQUOTED([BLCKSZ], ${BLCKSZ}, [\n Size of a disk block --- this also limits the size of a tuple.  You\n can set it bigger if you need bigger tuples (although TOAST should\n reduce the need to have large tuples, since fields can be spread\n across multiple tuples).\n\n BLCKSZ must be a power of 2.  The maximum possible value of BLCKSZ\n is currently 2^15 (32768).  This is determined by the 15-bit widths\n of the lp_off and lp_len fields in ItemIdData (see\n include/storage/itemid.h).\n\n Changing BLCKSZ requires an initdb.\n])\n\n#\n# Relation segment size\n#\nAC_MSG_CHECKING([for segment size])\nPGAC_ARG_REQ(with, segsize, [SEGSIZE], [set table segment size in GB [1]],\n             [segsize=$withval],\n             [segsize=1])\n# this expression is set up to avoid unnecessary integer overflow\n# blocksize is already guaranteed to be a factor of 1024\nRELSEG_SIZE=`expr '(' 1024 / ${blocksize} ')' '*' ${segsize} '*' 1024`\ntest $? -eq 0 || exit 1\nAC_MSG_RESULT([${segsize}GB])\n\nAC_DEFINE_UNQUOTED([RELSEG_SIZE], ${RELSEG_SIZE}, [\n RELSEG_SIZE is the maximum number of blocks allowed in one disk file.\n Thus, the maximum size of a single file is RELSEG_SIZE * BLCKSZ;\n relations bigger than that are divided into multiple files.\n\n RELSEG_SIZE * BLCKSZ must be less than your OS' limit on file size.\n This is often 2 GB or 4GB in a 32-bit operating system, unless you\n have large file support enabled.  By default, we make the limit 1 GB\n to avoid any possible integer-overflow problems within the OS.\n A limit smaller than necessary only means we divide a large\n relation into more chunks than necessary, so it seems best to err\n in the direction of a small limit.\n\n A power-of-2 value is recommended to save a few cycles in md.c,\n but is not absolutely required.\n\n Changing RELSEG_SIZE requires an initdb.\n])\n\n#\n# WAL block size\n#\nAC_MSG_CHECKING([for WAL block size])\nPGAC_ARG_REQ(with, wal-blocksize, [BLOCKSIZE], [set WAL block size in kB [8]],\n             [wal_blocksize=$withval],\n             [wal_blocksize=8])\ncase ${wal_blocksize} in\n  1) XLOG_BLCKSZ=1024;;\n  2) XLOG_BLCKSZ=2048;;\n  4) XLOG_BLCKSZ=4096;;\n  8) XLOG_BLCKSZ=8192;;\n 16) XLOG_BLCKSZ=16384;;\n 32) XLOG_BLCKSZ=32768;;\n 64) XLOG_BLCKSZ=65536;;\n  *) AC_MSG_ERROR([Invalid WAL block size. Allowed values are 1,2,4,8,16,32,64.])\nesac\nAC_MSG_RESULT([${wal_blocksize}kB])\n\nAC_DEFINE_UNQUOTED([XLOG_BLCKSZ], ${XLOG_BLCKSZ}, [\n Size of a WAL file block.  This need have no particular relation to BLCKSZ.\n XLOG_BLCKSZ must be a power of 2, and if your system supports O_DIRECT I/O,\n XLOG_BLCKSZ must be a multiple of the alignment requirement for direct-I/O\n buffers, else direct I/O may fail.\n\n Changing XLOG_BLCKSZ requires an initdb.\n])\n\n#\n# WAL segment size\n#\nAC_MSG_CHECKING([for WAL segment size])\nPGAC_ARG_REQ(with, wal-segsize, [SEGSIZE], [set WAL segment size in MB [16]],\n             [wal_segsize=$withval],\n             [wal_segsize=16])\ncase ${wal_segsize} in\n  1) ;;\n  2) ;;\n  4) ;;\n  8) ;;\n 16) ;;\n 32) ;;\n 64) ;;\n 128) ;;\n 256) ;;\n 512) ;;\n 1024) ;;\n  *) AC_MSG_ERROR([Invalid WAL segment size. Allowed values are 1,2,4,8,16,32,64,128,256,512,1024.])\nesac\nAC_MSG_RESULT([${wal_segsize}MB])\n\nAC_DEFINE_UNQUOTED([XLOG_SEG_SIZE], [(${wal_segsize} * 1024 * 1024)], [\n XLOG_SEG_SIZE is the size of a single WAL file.  This must be a power of 2\n and larger than XLOG_BLCKSZ (preferably, a great deal larger than\n XLOG_BLCKSZ).\n\n Changing XLOG_SEG_SIZE requires an initdb.\n])\n\n#\n# C compiler\n#\n\n# For historical reasons you can also use --with-CC to specify the C compiler\n# to use, although the standard way to do this is to set the CC environment\n# variable.\nPGAC_ARG_REQ(with, CC, [CMD], [set compiler (deprecated)], [CC=$with_CC])\n\ncase $template in\n  aix) pgac_cc_list=\"gcc xlc\";;\n    *) pgac_cc_list=\"gcc cc\";;\nesac\n\nAC_PROG_CC([$pgac_cc_list])\n\n# Check if it's Intel's compiler, which (usually) pretends to be gcc,\n# but has idiosyncrasies of its own.  We assume icc will define\n# __INTEL_COMPILER regardless of CFLAGS.\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM([], [@%:@ifndef __INTEL_COMPILER\nchoke me\n@%:@endif])], [ICC=yes], [ICC=no])\n\n# Check if it's Sun Studio compiler. We assume that\n# __SUNPRO_C will be defined for Sun Studio compilers\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM([], [@%:@ifndef __SUNPRO_C\nchoke me\n@%:@endif])], [SUN_STUDIO_CC=yes], [SUN_STUDIO_CC=no])\n\nAC_SUBST(SUN_STUDIO_CC)\n\nunset CFLAGS\n\n#\n# Read the template\n#\n. \"$srcdir/src/template/$template\" || exit\n\n# CFLAGS are selected so:\n# If the user specifies something in the environment, that is used.\n# else:  If the template file set something, that is used.\n# else:  If coverage was enabled, don't set anything.\n# else:  If the compiler is GCC, then we use -O2.\n# else:  If the compiler is something else, then we use -O, unless debugging.\n\nif test \"$ac_env_CFLAGS_set\" = set; then\n  CFLAGS=$ac_env_CFLAGS_value\nelif test \"${CFLAGS+set}\" = set; then\n  : # (keep what template set)\nelif test \"$enable_coverage\" = yes; then\n  : # no optimization by default\nelif test \"$GCC\" = yes; then\n  CFLAGS=\"-O2\"\nelse\n  # if the user selected debug mode, don't use -O\n  if test \"$enable_debug\" != yes; then\n    CFLAGS=\"-O\"\n  fi\nfi\n\n# CFLAGS we determined above will be added back at the end\nuser_CFLAGS=$CFLAGS\nCFLAGS=\"\"\n\n# set CFLAGS_VECTOR from the environment, if available\nif test \"$ac_env_CFLAGS_VECTOR_set\" = set; then\n  CFLAGS_VECTOR=$ac_env_CFLAGS_VECTOR_value\nfi\n\n# Some versions of GCC support some additional useful warning flags.\n# Check whether they are supported, and add them to CFLAGS if so.\n# ICC pretends to be GCC but it's lying; it doesn't support these flags,\n# but has its own.  Also check other compiler-specific flags here.\n\nif test \"$GCC\" = yes -a \"$ICC\" = no; then\n  CFLAGS=\"-Wall -Wmissing-prototypes -Wpointer-arith\"\n  # These work in some but not all gcc versions\n  PGAC_PROG_CC_CFLAGS_OPT([-Wdeclaration-after-statement])\n  PGAC_PROG_CC_CFLAGS_OPT([-Wendif-labels])\n  PGAC_PROG_CC_CFLAGS_OPT([-Wmissing-format-attribute])\n  # This was included in -Wall/-Wformat in older GCC versions\n  PGAC_PROG_CC_CFLAGS_OPT([-Wformat-security])\n  # Disable strict-aliasing rules; needed for gcc 3.3+\n  PGAC_PROG_CC_CFLAGS_OPT([-fno-strict-aliasing])\n  # Disable optimizations that assume no overflow; needed for gcc 4.3+\n  PGAC_PROG_CC_CFLAGS_OPT([-fwrapv])\n  # Disable FP optimizations that cause various errors on gcc 4.5+ or maybe 4.6+\n  PGAC_PROG_CC_CFLAGS_OPT([-fexcess-precision=standard])\n  # Optimization flags for specific files that benefit from vectorization\n  PGAC_PROG_CC_VAR_OPT(CFLAGS_VECTOR, [-funroll-loops])\n  PGAC_PROG_CC_VAR_OPT(CFLAGS_VECTOR, [-ftree-vectorize])\n  # We want to suppress clang's unhelpful unused-command-line-argument warnings\n  # but gcc won't complain about unrecognized -Wno-foo switches, so we have to\n  # test for the positive form and if that works, add the negative form\n  NOT_THE_CFLAGS=\"\"\n  PGAC_PROG_CC_VAR_OPT(NOT_THE_CFLAGS, [-Wunused-command-line-argument])\n  if test -n \"$NOT_THE_CFLAGS\"; then\n    CFLAGS=\"$CFLAGS -Wno-unused-command-line-argument\"\n  fi\n  # Similarly disable useless truncation warnings from gcc 8+\n  NOT_THE_CFLAGS=\"\"\n  PGAC_PROG_CC_VAR_OPT(NOT_THE_CFLAGS, [-Wformat-truncation])\n  if test -n \"$NOT_THE_CFLAGS\"; then\n    CFLAGS=\"$CFLAGS -Wno-format-truncation\"\n  fi\n  NOT_THE_CFLAGS=\"\"\n  PGAC_PROG_CC_VAR_OPT(NOT_THE_CFLAGS, [-Wstringop-truncation])\n  if test -n \"$NOT_THE_CFLAGS\"; then\n    CFLAGS=\"$CFLAGS -Wno-stringop-truncation\"\n  fi\nelif test \"$ICC\" = yes; then\n  # Intel's compiler has a bug/misoptimization in checking for\n  # division by NAN (NaN == 0), -mp1 fixes it, so add it to the CFLAGS.\n  PGAC_PROG_CC_CFLAGS_OPT([-mp1])\n  # Make sure strict aliasing is off (though this is said to be the default)\n  PGAC_PROG_CC_CFLAGS_OPT([-fno-strict-aliasing])\nelif test \"$PORTNAME\" = \"aix\"; then\n  # AIX's xlc has to have strict aliasing turned off too\n  PGAC_PROG_CC_CFLAGS_OPT([-qnoansialias])\n  PGAC_PROG_CC_CFLAGS_OPT([-qlonglong])\nelif test \"$PORTNAME\" = \"hpux\"; then\n  # On some versions of HP-UX, libm functions do not set errno by default.\n  # Fix that by using +Olibmerrno if the compiler recognizes it.\n  PGAC_PROG_CC_CFLAGS_OPT([+Olibmerrno])\nfi\n\nAC_SUBST(CFLAGS_VECTOR, $CFLAGS_VECTOR)\n\n# supply -g if --enable-debug\nif test \"$enable_debug\" = yes && test \"$ac_cv_prog_cc_g\" = yes; then\n  CFLAGS=\"$CFLAGS -g\"\nfi\n\n# enable code coverage if --enable-coverage\nif test \"$enable_coverage\" = yes; then\n  if test \"$GCC\" = yes; then\n    CFLAGS=\"$CFLAGS -fprofile-arcs -ftest-coverage\"\n  else\n    AC_MSG_ERROR([--enable-coverage is supported only when using GCC])\n  fi\nfi\n\n# enable profiling if --enable-profiling\nif test \"$enable_profiling\" = yes && test \"$ac_cv_prog_cc_g\" = yes; then\n  if test \"$GCC\" = yes; then\n    AC_DEFINE([PROFILE_PID_DIR], 1,\n           [Define to 1 to allow profiling output to be saved separately for each process.])\n    CFLAGS=\"$CFLAGS -pg $PLATFORM_PROFILE_FLAGS\"\n  else\n    AC_MSG_ERROR([--enable-profiling is supported only when using GCC])\n  fi\nfi\n\n# We already have this in Makefile.win32, but configure needs it too\nif test \"$PORTNAME\" = \"win32\"; then\n  CPPFLAGS=\"$CPPFLAGS -I$srcdir/src/include/port/win32 -DEXEC_BACKEND\"\nfi\n\n# Now that we're done automatically adding stuff to CFLAGS, put back the\n# user-specified flags (if any) at the end.  This lets users override\n# the automatic additions.\nCFLAGS=\"$CFLAGS $user_CFLAGS\"\n\n# Check if the compiler still works with the final flag settings\nAC_MSG_CHECKING([whether the C compiler still works])\nAC_LINK_IFELSE([AC_LANG_PROGRAM([], [return 0;])],\n  [AC_MSG_RESULT(yes)],\n  [AC_MSG_RESULT(no)\n   AC_MSG_ERROR([cannot proceed])])\n\n# Defend against gcc -ffast-math\nif test \"$GCC\" = yes; then\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM([], [@%:@ifdef __FAST_MATH__\nchoke me\n@%:@endif])], [], [AC_MSG_ERROR([do not put -ffast-math in CFLAGS])])\nfi\n\n# Defend against clang being used on x86-32 without SSE2 enabled.  As current\n# versions of clang do not understand -fexcess-precision=standard, the use of\n# x87 floating point operations leads to problems like isinf possibly returning\n# false for a value that is infinite when converted from the 80bit register to\n# the 8byte memory representation.\n#\n# Only perform the test if the compiler doesn't understand\n# -fexcess-precision=standard, that way a potentially fixed compiler will work\n# automatically.\nif test \"$pgac_cv_prog_cc_cflags__fexcess_precision_standard\" = no; then\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM([], [\n@%:@if defined(__clang__) && defined(__i386__) && !defined(__SSE2_MATH__)\nchoke me\n@%:@endif\n])], [],\n[AC_MSG_ERROR([Compiling PostgreSQL with clang, on 32bit x86, requires SSE2 support. Use -msse2 or use gcc.])])\nfi\n\nAC_PROG_CPP\nAC_SUBST(GCC)\n\n\n#\n# Set up TAS assembly code if needed; the template file has now had its\n# chance to request this.\n#\nAC_CONFIG_LINKS([src/backend/port/tas.s:src/backend/port/tas/${tas_file}])\n\nif test \"$need_tas\" = yes ; then\n  TAS=tas.o\nelse\n  TAS=\"\"\nfi\nAC_SUBST(TAS)\n\n\n#\n# Automatic dependency tracking\n#\nPGAC_ARG_BOOL(enable, depend, no, [turn on automatic dependency tracking],\n              [autodepend=yes])\nAC_SUBST(autodepend)\n\n\n#\n# Enable assert checks\n#\nPGAC_ARG_BOOL(enable, cassert, no, [enable assertion checks (for debugging)],\n              [AC_DEFINE([USE_ASSERT_CHECKING], 1,\n                         [Define to 1 to build with assertion checks. (--enable-cassert)])])\n\n\n#\n# Include directories\n#\nac_save_IFS=$IFS\nIFS=\"${IFS}${PATH_SEPARATOR}\"\n# SRCH_INC comes from the template file\nfor dir in $with_includes $SRCH_INC; do\n  if test -d \"$dir\"; then\n    INCLUDES=\"$INCLUDES -I$dir\"\n  else\n    AC_MSG_WARN([*** Include directory $dir does not exist.])\n  fi\ndone\nIFS=$ac_save_IFS\nAC_SUBST(INCLUDES)\n\n\n#\n# Library directories\n#\nac_save_IFS=$IFS\nIFS=\"${IFS}${PATH_SEPARATOR}\"\n# LIBRARY_DIRS comes from command line, SRCH_LIB from template file.\nfor dir in $LIBRARY_DIRS $SRCH_LIB; do\n  if test -d \"$dir\"; then\n    LIBDIRS=\"$LIBDIRS -L$dir\"\n  else\n    AC_MSG_WARN([*** Library directory $dir does not exist.])\n  fi\ndone\nIFS=$ac_save_IFS\n\n#\n# Enable thread-safe client libraries\n#\nAC_MSG_CHECKING([allow thread-safe client libraries])\nPGAC_ARG_BOOL(enable, thread-safety, yes, [disable thread-safety in client libraries])\nif test \"$enable_thread_safety\" = yes; then\n  AC_DEFINE([ENABLE_THREAD_SAFETY], 1,\n          [Define to 1 to build client libraries as thread-safe code. (--enable-thread-safety)])\nfi\nAC_MSG_RESULT([$enable_thread_safety])\nAC_SUBST(enable_thread_safety)\n\n#\n# ICU\n#\nAC_MSG_CHECKING([whether to build with ICU support])\nPGAC_ARG_BOOL(with, icu, no, [build with ICU support],\n              [AC_DEFINE([USE_ICU], 1, [Define to build with ICU support. (--with-icu)])])\nAC_MSG_RESULT([$with_icu])\nAC_SUBST(with_icu)\n\nif test \"$with_icu\" = yes; then\n  PKG_CHECK_MODULES(ICU, icu-uc icu-i18n)\nfi\n\n#\n# Optionally build Tcl modules (PL/Tcl)\n#\nAC_MSG_CHECKING([whether to build with Tcl])\nPGAC_ARG_BOOL(with, tcl, no, [build Tcl modules (PL/Tcl)])\nAC_MSG_RESULT([$with_tcl])\nAC_SUBST([with_tcl])\n\n# We see if the path to the Tcl/Tk configuration scripts is specified.\n# This will override the use of tclsh to find the paths to search.\n\nPGAC_ARG_REQ(with, tclconfig, [DIR], [tclConfig.sh is in DIR])\n\n#\n# Optionally build Perl modules (PL/Perl)\n#\nAC_MSG_CHECKING([whether to build Perl modules])\nPGAC_ARG_BOOL(with, perl, no, [build Perl modules (PL/Perl)])\nAC_MSG_RESULT([$with_perl])\nAC_SUBST(with_perl)\n\n#\n# Optionally build Python modules (PL/Python)\n#\nAC_MSG_CHECKING([whether to build Python modules])\nPGAC_ARG_BOOL(with, python, no, [build Python modules (PL/Python)])\nAC_MSG_RESULT([$with_python])\nAC_SUBST(with_python)\n\n#\n# GSSAPI\n#\nAC_MSG_CHECKING([whether to build with GSSAPI support])\nPGAC_ARG_BOOL(with, gssapi, no, [build with GSSAPI support],\n[\n  AC_DEFINE(ENABLE_GSS, 1, [Define to build with GSSAPI support. (--with-gssapi)])\n  krb_srvtab=\"FILE:\\$(sysconfdir)/krb5.keytab\"\n])\nAC_MSG_RESULT([$with_gssapi])\n\n\nAC_SUBST(krb_srvtab)\n\n\n#\n# Kerberos configuration parameters\n#\nPGAC_ARG_REQ(with, krb-srvnam,\n             [NAME], [default service principal name in Kerberos (GSSAPI) [postgres]],\n             [],\n             [with_krb_srvnam=\"postgres\"])\nAC_DEFINE_UNQUOTED([PG_KRB_SRVNAM], [\"$with_krb_srvnam\"],\n                   [Define to the name of the default PostgreSQL service principal in Kerberos (GSSAPI). (--with-krb-srvnam=NAME)])\n\n\n#\n# PAM\n#\nAC_MSG_CHECKING([whether to build with PAM support])\nPGAC_ARG_BOOL(with, pam, no,\n              [build with PAM support],\n              [AC_DEFINE([USE_PAM], 1, [Define to 1 to build with PAM support. (--with-pam)])])\nAC_MSG_RESULT([$with_pam])\n\n\n#\n# BSD AUTH\n#\nAC_MSG_CHECKING([whether to build with BSD Authentication support])\nPGAC_ARG_BOOL(with, bsd-auth, no,\n              [build with BSD Authentication support],\n              [AC_DEFINE([USE_BSD_AUTH], 1, [Define to 1 to build with BSD Authentication support. (--with-bsd-auth)])])\nAC_MSG_RESULT([$with_bsd_auth])\n\n\n#\n# LDAP\n#\nAC_MSG_CHECKING([whether to build with LDAP support])\nPGAC_ARG_BOOL(with, ldap, no,\n              [build with LDAP support],\n              [AC_DEFINE([USE_LDAP], 1, [Define to 1 to build with LDAP support. (--with-ldap)])])\nAC_MSG_RESULT([$with_ldap])\n\n\n#\n# Bonjour\n#\nAC_MSG_CHECKING([whether to build with Bonjour support])\nPGAC_ARG_BOOL(with, bonjour, no,\n              [build with Bonjour support],\n              [AC_DEFINE([USE_BONJOUR], 1, [Define to 1 to build with Bonjour support. (--with-bonjour)])])\nAC_MSG_RESULT([$with_bonjour])\n\n\n#\n# OpenSSL\n#\nAC_MSG_CHECKING([whether to build with OpenSSL support])\nPGAC_ARG_BOOL(with, openssl, no, [build with OpenSSL support],\n              [AC_DEFINE([USE_OPENSSL], 1, [Define to build with OpenSSL support. (--with-openssl)])])\nAC_MSG_RESULT([$with_openssl])\nAC_SUBST(with_openssl)\n\n#\n# SELinux\n#\nAC_MSG_CHECKING([whether to build with SELinux support])\nPGAC_ARG_BOOL(with, selinux, no, [build with SELinux support])\nAC_SUBST(with_selinux)\nAC_MSG_RESULT([$with_selinux])\n\n#\n# Systemd\n#\nAC_MSG_CHECKING([whether to build with systemd support])\nPGAC_ARG_BOOL(with, systemd, no, [build with systemd support],\n              [AC_DEFINE([USE_SYSTEMD], 1, [Define to build with systemd support. (--with-systemd)])])\nAC_SUBST(with_systemd)\nAC_MSG_RESULT([$with_systemd])\n\n#\n# Readline\n#\nPGAC_ARG_BOOL(with, readline, yes,\n              [do not use GNU Readline nor BSD Libedit for editing])\n# readline on MinGW has problems with backslashes in psql and other bugs.\n# This is particularly a problem with non-US code pages.\n# Therefore disable its use until we understand the cause. 2004-07-20\nif test \"$PORTNAME\" = \"win32\"; then\n  if test \"$with_readline\" = yes; then\n    AC_MSG_WARN([*** Readline does not work on MinGW --- disabling])\n    with_readline=no\n  fi\nfi\n\n\n#\n# Prefer libedit\n#\nPGAC_ARG_BOOL(with, libedit-preferred, no,\n              [prefer BSD Libedit over GNU Readline])\n\n\n#\n# UUID library\n#\n# There are at least three UUID libraries in common use: the FreeBSD/NetBSD\n# library, the e2fsprogs libuuid (now part of util-linux-ng), and the OSSP\n# UUID library.  More than one of these might be present on a given platform,\n# so we make the user say which one she wants.\n#\nPGAC_ARG_REQ(with, uuid, [LIB], [build contrib/uuid-ossp using LIB (bsd,e2fs,ossp)])\nif test x\"$with_uuid\" = x\"\" ; then\n  with_uuid=no\nfi\nPGAC_ARG_BOOL(with, ossp-uuid, no, [obsolete spelling of --with-uuid=ossp])\nif test \"$with_ossp_uuid\" = yes ; then\n  with_uuid=ossp\nfi\n\nif test \"$with_uuid\" = bsd ; then\n  AC_DEFINE([HAVE_UUID_BSD], 1, [Define to 1 if you have BSD UUID support.])\n  UUID_EXTRA_OBJS=\"md5.o sha1.o\"\nelif test \"$with_uuid\" = e2fs ; then\n  AC_DEFINE([HAVE_UUID_E2FS], 1, [Define to 1 if you have E2FS UUID support.])\n  UUID_EXTRA_OBJS=\"md5.o sha1.o\"\nelif test \"$with_uuid\" = ossp ; then\n  AC_DEFINE([HAVE_UUID_OSSP], 1, [Define to 1 if you have OSSP UUID support.])\n  UUID_EXTRA_OBJS=\"\"\nelif test \"$with_uuid\" = no ; then\n  UUID_EXTRA_OBJS=\"\"\nelse\n  AC_MSG_ERROR([--with-uuid must specify one of bsd, e2fs, or ossp])\nfi\nAC_SUBST(with_uuid)\nAC_SUBST(UUID_EXTRA_OBJS)\n\n\n#\n# XML\n#\nPGAC_ARG_BOOL(with, libxml, no, [build with XML support],\n              [AC_DEFINE([USE_LIBXML], 1, [Define to 1 to build with XML support. (--with-libxml)])])\n\nif test \"$with_libxml\" = yes ; then\n  PGAC_PATH_PROGS(XML2_CONFIG, xml2-config)\n  if test -n \"$XML2_CONFIG\"; then\n    for pgac_option in `$XML2_CONFIG --cflags`; do\n      case $pgac_option in\n        -I*|-D*) CPPFLAGS=\"$CPPFLAGS $pgac_option\";;\n      esac\n    done\n    for pgac_option in `$XML2_CONFIG --libs`; do\n      case $pgac_option in\n        -L*) LDFLAGS=\"$LDFLAGS $pgac_option\";;\n      esac\n    done\n  fi\nfi\n\nAC_SUBST(with_libxml)\n\n#\n# XSLT\n#\nPGAC_ARG_BOOL(with, libxslt, no, [use XSLT support when building contrib/xml2],\n              [AC_DEFINE([USE_LIBXSLT], 1, [Define to 1 to use XSLT support when building contrib/xml2. (--with-libxslt)])])\n\n\nAC_SUBST(with_libxslt)\n\n#\n# tzdata\n#\nPGAC_ARG_REQ(with, system-tzdata,\n             [DIR], [use system time zone data in DIR])\nAC_SUBST(with_system_tzdata)\n\n#\n# Zlib\n#\nPGAC_ARG_BOOL(with, zlib, yes,\n              [do not use Zlib])\nAC_SUBST(with_zlib)\n\n#\n# Elf\n#\n\n# Assume system is ELF if it predefines __ELF__ as 1,\n# otherwise believe host_os based default.\ncase $host_os in\n    freebsd1*|freebsd2*) elf=no;;\n    freebsd3*|freebsd4*) elf=yes;;\nesac\n\nAC_EGREP_CPP(yes,\n[#if __ELF__\n  yes\n#endif\n],\n[ELF_SYS=true],\n[if test \"X$elf\" = \"Xyes\" ; then\n  ELF_SYS=true\nelse\n  ELF_SYS=\nfi])\nAC_SUBST(ELF_SYS)\n\n#\n# Assignments\n#\n\nCPPFLAGS=\"$CPPFLAGS $INCLUDES\"\nLDFLAGS=\"$LDFLAGS $LIBDIRS\"\n\nAC_ARG_VAR(LDFLAGS_EX, [extra linker flags for linking executables only])\nAC_ARG_VAR(LDFLAGS_SL, [extra linker flags for linking shared libraries only])\n\nPGAC_PROG_LD\nAC_SUBST(LD)\nAC_SUBST(with_gnu_ld)\nAC_PROG_RANLIB\nPGAC_CHECK_STRIP\nAC_CHECK_TOOL(AR, ar, ar)\nif test \"$PORTNAME\" = \"win32\"; then\n  AC_CHECK_TOOL(DLLTOOL, dlltool, dlltool)\n  AC_CHECK_TOOL(DLLWRAP, dllwrap, dllwrap)\n  AC_CHECK_TOOL(WINDRES, windres, windres)\nfi\n\nAC_PROG_INSTALL\n# When Autoconf chooses install-sh as install program it tries to generate\n# a relative path to it in each makefile where it substitutes it. This clashes\n# with our Makefile.global concept. This workaround helps.\ncase $INSTALL in\n  *install-sh*) install_bin='';;\n  *) install_bin=$INSTALL;;\nesac\nAC_SUBST(install_bin)\n\nPGAC_PATH_PROGS(TAR, tar)\nAC_PROG_LN_S\nAC_PROG_AWK\nAC_PROG_MKDIR_P\n# When Autoconf chooses install-sh as mkdir -p program it tries to generate\n# a relative path to it in each makefile where it substitutes it. This clashes\n# with our Makefile.global concept. This workaround helps.\ncase $MKDIR_P in\n  *install-sh*) MKDIR_P='\\${SHELL} \\${top_srcdir}/config/install-sh -c -d';;\nesac\n\nPGAC_PATH_BISON\nPGAC_PATH_FLEX\n\nPGAC_PATH_PERL\nif test \"$with_perl\" = yes; then\n  if test -z \"$PERL\"; then\n    AC_MSG_ERROR([Perl not found])\n  fi\n  PGAC_CHECK_PERL_CONFIGS([archlibexp,privlibexp,useshrplib])\n  if test \"$perl_useshrplib\" != yes && test \"$perl_useshrplib\" != true; then\n    AC_MSG_ERROR([cannot build PL/Perl because libperl is not a shared library\nYou might have to rebuild your Perl installation.  Refer to the\ndocumentation for details.  Use --without-perl to disable building\nPL/Perl.])\n  fi\n  # On most platforms, archlibexp is also where the Perl include files live ...\n  perl_includespec=\"-I$perl_archlibexp/CORE\"\n  # ... but on newer macOS versions, we must use -iwithsysroot to look\n  # under $PG_SYSROOT\n  if test \\! -f \"$perl_archlibexp/CORE/perl.h\" ; then\n    if test -f \"$PG_SYSROOT$perl_archlibexp/CORE/perl.h\" ; then\n      perl_includespec=\"-iwithsysroot $perl_archlibexp/CORE\"\n    fi\n  fi\n  AC_SUBST(perl_includespec)dnl\n  PGAC_CHECK_PERL_EMBED_CCFLAGS\n  PGAC_CHECK_PERL_EMBED_LDFLAGS\nfi\n\nif test \"$with_python\" = yes; then\n  PGAC_PATH_PYTHON\n  PGAC_CHECK_PYTHON_EMBED_SETUP\nfi\n\nif test \"$cross_compiling\" = yes && test -z \"$with_system_tzdata\"; then\n  PGAC_PATH_PROGS(ZIC, zic)\n  if test -z \"$ZIC\"; then\n    AC_MSG_ERROR([\nWhen cross-compiling, either use the option --with-system-tzdata to use\nexisting time-zone data, or set the environment variable ZIC to a zic\nprogram to use during the build.])\n  fi\nfi\n\n#\n# Pthreads\n#\n# For each platform, we need to know about any special compile and link\n# libraries, and whether the normal C function names are thread-safe.\n# See the comment at the top of src/port/thread.c for more information.\n# WIN32 doesn't need the pthread tests;  it always uses threads\n#\n# These tests are run before the library-tests, because linking with the\n# other libraries can pull in the pthread functions as a side-effect.  We\n# want to use the -pthread or similar flags directly, and not rely on\n# the side-effects of linking with some other library.\n#\n# note: We have to use AS_IF here rather than plain if. The AC_CHECK_HEADER\n# invocation below is the first one in the script, and autoconf generates\n# additional code for that, which must not be inside the if-block. AS_IF\n# knows how to do that.\nAS_IF([test \"$enable_thread_safety\" = yes -a \"$PORTNAME\" != \"win32\"],\n[ # then\nAX_PTHREAD\t# set thread flags\n\n# Some platforms use these, so just define them.  They can't hurt if they\n# are not supported.  For example, on Solaris -D_POSIX_PTHREAD_SEMANTICS\n# enables 5-arg getpwuid_r, among other things.\nPTHREAD_CFLAGS=\"$PTHREAD_CFLAGS -D_REENTRANT -D_THREAD_SAFE -D_POSIX_PTHREAD_SEMANTICS\"\n\n# Check for *_r functions\n_CFLAGS=\"$CFLAGS\"\n_LIBS=\"$LIBS\"\nCFLAGS=\"$CFLAGS $PTHREAD_CFLAGS\"\nLIBS=\"$LIBS $PTHREAD_LIBS\"\n\nAC_CHECK_HEADER(pthread.h, [], [AC_MSG_ERROR([\npthread.h not found;  use --disable-thread-safety to disable thread safety])])\n\nAC_CHECK_FUNCS([strerror_r getpwuid_r gethostbyname_r])\n\n# Do test here with the proper thread flags\nPGAC_FUNC_STRERROR_R_INT\n\nCFLAGS=\"$_CFLAGS\"\nLIBS=\"$_LIBS\"\n\n], [ # else\n# do not use values from template file\nPTHREAD_CFLAGS=\nPTHREAD_LIBS=\n]) # fi\n\nAC_SUBST(PTHREAD_CFLAGS)\nAC_SUBST(PTHREAD_LIBS)\n\n\n##\n## Libraries\n##\n## Most libraries are included only if they demonstrably provide a function\n## we need, but libm is an exception: always include it, because there are\n## too many compilers that play cute optimization games that will break\n## probes for standard functions such as pow().\n##\n\nAC_CHECK_LIB(m, main)\nAC_SEARCH_LIBS(setproctitle, util)\nAC_SEARCH_LIBS(dlopen, dl)\nAC_SEARCH_LIBS(socket, [socket ws2_32])\nAC_SEARCH_LIBS(shl_load, dld)\n# We only use libld in port/dynloader/aix.c\ncase $host_os in\n     aix*)\n\tAC_SEARCH_LIBS(ldopen, ld)\n\t;;\nesac\nAC_SEARCH_LIBS(getopt_long, [getopt gnugetopt])\nAC_SEARCH_LIBS(crypt, crypt)\nAC_SEARCH_LIBS(shm_open, rt)\nAC_SEARCH_LIBS(shm_unlink, rt)\nAC_SEARCH_LIBS(clock_gettime, [rt posix4])\n# Solaris:\nAC_SEARCH_LIBS(fdatasync, [rt posix4])\n# Required for thread_test.c on Solaris\nAC_SEARCH_LIBS(sched_yield, rt)\n# Required for thread_test.c on Solaris 2.5:\n# Other ports use it too (HP-UX) so test unconditionally\nAC_SEARCH_LIBS(gethostbyname_r, nsl)\n# Cygwin:\nAC_SEARCH_LIBS(shmget, cygipc)\n\nif test \"$with_readline\" = yes; then\n  PGAC_CHECK_READLINE\n  if test x\"$pgac_cv_check_readline\" = x\"no\"; then\n    AC_MSG_ERROR([readline library not found\nIf you have readline already installed, see config.log for details on the\nfailure.  It is possible the compiler isn't looking in the proper directory.\nUse --without-readline to disable readline support.])\n  fi\nfi\n\nif test \"$with_zlib\" = yes; then\n  AC_CHECK_LIB(z, inflate, [],\n               [AC_MSG_ERROR([zlib library not found\nIf you have zlib already installed, see config.log for details on the\nfailure.  It is possible the compiler isn't looking in the proper directory.\nUse --without-zlib to disable zlib support.])])\nfi\n\nif test \"$enable_spinlocks\" = yes; then\n  AC_DEFINE(HAVE_SPINLOCKS, 1, [Define to 1 if you have spinlocks.])\nelse\n  AC_MSG_WARN([\n*** Not using spinlocks will cause poor performance.])\nfi\n\nif test \"$enable_atomics\" = yes; then\n  AC_DEFINE(HAVE_ATOMICS, 1, [Define to 1 if you want to use atomics if available.])\nelse\n  AC_MSG_WARN([\n*** Not using atomic operations will cause poor performance.])\nfi\n\nif test \"$with_gssapi\" = yes ; then\n  if test \"$PORTNAME\" != \"win32\"; then\n    AC_SEARCH_LIBS(gss_init_sec_context, [gssapi_krb5 gss 'gssapi -lkrb5 -lcrypto'], [],\n                   [AC_MSG_ERROR([could not find function 'gss_init_sec_context' required for GSSAPI])])\n  else\n    LIBS=\"$LIBS -lgssapi32\"\n  fi\nfi\n\nif test \"$with_openssl\" = yes ; then\n  dnl Order matters!\n  if test \"$PORTNAME\" != \"win32\"; then\n     AC_CHECK_LIB(crypto, CRYPTO_new_ex_data, [], [AC_MSG_ERROR([library 'crypto' is required for OpenSSL])])\n     AC_CHECK_LIB(ssl,    SSL_new, [], [AC_MSG_ERROR([library 'ssl' is required for OpenSSL])])\n  else\n     AC_SEARCH_LIBS(CRYPTO_new_ex_data, [eay32 crypto], [], [AC_MSG_ERROR([library 'eay32' or 'crypto' is required for OpenSSL])])\n     AC_SEARCH_LIBS(SSL_new, [ssleay32 ssl], [], [AC_MSG_ERROR([library 'ssleay32' or 'ssl' is required for OpenSSL])])\n  fi\n  AC_CHECK_FUNCS([SSL_get_current_compression])\n  # Functions introduced in OpenSSL 1.1.0. We used to check for\n  # OPENSSL_VERSION_NUMBER, but that didn't work with 1.1.0, because LibreSSL\n  # defines OPENSSL_VERSION_NUMBER to claim version 2.0.0, even though it\n  # doesn't have these OpenSSL 1.1.0 functions. So check for individual\n  # functions.\n  AC_CHECK_FUNCS([OPENSSL_init_ssl BIO_get_data BIO_meth_new ASN1_STRING_get0_data RAND_OpenSSL])\n  # OpenSSL versions before 1.1.0 required setting callback functions, for\n  # thread-safety. In 1.1.0, it's no longer required, and CRYPTO_lock()\n  # function was removed.\n  AC_CHECK_FUNCS([CRYPTO_lock])\nfi\n\nif test \"$with_pam\" = yes ; then\n  AC_CHECK_LIB(pam,    pam_start, [], [AC_MSG_ERROR([library 'pam' is required for PAM])])\nfi\n\nif test \"$with_libxml\" = yes ; then\n  AC_CHECK_LIB(xml2, xmlSaveToBuffer, [], [AC_MSG_ERROR([library 'xml2' (version >= 2.6.23) is required for XML support])])\nfi\n\nif test \"$with_libxslt\" = yes ; then\n  AC_CHECK_LIB(xslt, xsltCleanupGlobals, [], [AC_MSG_ERROR([library 'xslt' is required for XSLT support])])\nfi\n\n# Note: We can test for libldap_r only after we know PTHREAD_LIBS\nif test \"$with_ldap\" = yes ; then\n  _LIBS=\"$LIBS\"\n  if test \"$PORTNAME\" != \"win32\"; then\n    AC_CHECK_LIB(ldap, ldap_bind, [],\n\t\t [AC_MSG_ERROR([library 'ldap' is required for LDAP])],\n\t\t [$EXTRA_LDAP_LIBS])\n    LDAP_LIBS_BE=\"-lldap $EXTRA_LDAP_LIBS\"\n    if test \"$enable_thread_safety\" = yes; then\n      # on some platforms ldap_r fails to link without PTHREAD_LIBS\n      AC_CHECK_LIB(ldap_r, ldap_simple_bind, [],\n\t\t   [AC_MSG_ERROR([library 'ldap_r' is required for LDAP])],\n\t\t   [$PTHREAD_CFLAGS $PTHREAD_LIBS $EXTRA_LDAP_LIBS])\n      LDAP_LIBS_FE=\"-lldap_r $EXTRA_LDAP_LIBS\"\n    else\n      LDAP_LIBS_FE=\"-lldap $EXTRA_LDAP_LIBS\"\n    fi\n  else\n    AC_CHECK_LIB(wldap32, ldap_bind, [], [AC_MSG_ERROR([library 'wldap32' is required for LDAP])])\n    LDAP_LIBS_FE=\"-lwldap32\"\n    LDAP_LIBS_BE=\"-lwldap32\"\n  fi\n  LIBS=\"$_LIBS\"\nfi\nAC_SUBST(LDAP_LIBS_FE)\nAC_SUBST(LDAP_LIBS_BE)\n\n# for contrib/sepgsql\nif test \"$with_selinux\" = yes; then\n  AC_CHECK_LIB(selinux, security_compute_create_name, [],\n               [AC_MSG_ERROR([library 'libselinux', version 2.1.10 or newer, is required for SELinux support])])\nfi\n\n# for contrib/uuid-ossp\nif test \"$with_uuid\" = bsd ; then\n  # On BSD, the UUID functions are in libc\n  AC_CHECK_FUNC(uuid_to_string,\n    [UUID_LIBS=\"\"],\n    [AC_MSG_ERROR([BSD UUID functions are not present])])\nelif test \"$with_uuid\" = e2fs ; then\n  # On macOS, the UUID functions are in libc\n  AC_CHECK_FUNC(uuid_generate,\n    [UUID_LIBS=\"\"],\n    [AC_CHECK_LIB(uuid, uuid_generate,\n      [UUID_LIBS=\"-luuid\"],\n      [AC_MSG_ERROR([library 'uuid' is required for E2FS UUID])])])\nelif test \"$with_uuid\" = ossp ; then\n  AC_CHECK_LIB(ossp-uuid, uuid_export,\n    [UUID_LIBS=\"-lossp-uuid\"],\n    [AC_CHECK_LIB(uuid, uuid_export,\n      [UUID_LIBS=\"-luuid\"],\n      [AC_MSG_ERROR([library 'ossp-uuid' or 'uuid' is required for OSSP UUID])])])\nfi\nAC_SUBST(UUID_LIBS)\n\n\n##\n## Header files\n##\n\nAC_CHECK_HEADERS([atomic.h crypt.h dld.h fp_class.h getopt.h ieeefp.h ifaddrs.h langinfo.h mbarrier.h poll.h sys/epoll.h sys/ipc.h sys/pstat.h sys/resource.h sys/select.h sys/sem.h sys/shm.h sys/sockio.h sys/tas.h sys/un.h termios.h ucred.h utime.h wchar.h wctype.h])\n\n# On BSD, test for net/if.h will fail unless sys/socket.h\n# is included first.\nAC_CHECK_HEADERS(net/if.h, [], [],\n[AC_INCLUDES_DEFAULT\n#include <sys/socket.h>\n])\n\n# On OpenBSD, test for sys/ucred.h will fail unless sys/param.h\n# is included first.\nAC_CHECK_HEADERS(sys/ucred.h, [], [],\n[AC_INCLUDES_DEFAULT\n#include <sys/param.h>\n])\n\n# At least on IRIX, test for netinet/tcp.h will fail unless\n# netinet/in.h is included first.\nAC_CHECK_HEADERS(netinet/tcp.h, [], [],\n[AC_INCLUDES_DEFAULT\n#include <netinet/in.h>\n])\n\nif expr x\"$pgac_cv_check_readline\" : 'x-lreadline' >/dev/null ; then\n  AC_CHECK_HEADERS(readline/readline.h, [],\n        [AC_CHECK_HEADERS(readline.h, [],\n                [AC_MSG_ERROR([readline header not found\nIf you have readline already installed, see config.log for details on the\nfailure.  It is possible the compiler isn't looking in the proper directory.\nUse --without-readline to disable readline support.])])])\n  AC_CHECK_HEADERS(readline/history.h, [],\n        [AC_CHECK_HEADERS(history.h, [],\n                [AC_MSG_ERROR([history header not found\nIf you have readline already installed, see config.log for details on the\nfailure.  It is possible the compiler isn't looking in the proper directory.\nUse --without-readline to disable readline support.])])])\nfi\n\nif expr x\"$pgac_cv_check_readline\" : 'x-ledit' >/dev/null ; then\n# Some installations of libedit usurp /usr/include/readline/, which seems\n# bad practice, since in combined installations readline will have its headers\n# there.  We might have to resort to AC_EGREP checks to make sure we found\n# the proper header...\n  AC_CHECK_HEADERS(editline/readline.h, [],\n        [AC_CHECK_HEADERS(readline.h, [],\n                [AC_CHECK_HEADERS(readline/readline.h, [],\n                        [AC_MSG_ERROR([readline header not found\nIf you have libedit already installed, see config.log for details on the\nfailure.  It is possible the compiler isn't looking in the proper directory.\nUse --without-readline to disable libedit support.])])])])\n# Note: in a libedit installation, history.h is sometimes a dummy, and may\n# not be there at all.  Hence, don't complain if not found.  We must check\n# though, since in yet other versions it is an independent header.\n  AC_CHECK_HEADERS(editline/history.h, [],\n        [AC_CHECK_HEADERS(history.h, [],\n                [AC_CHECK_HEADERS(readline/history.h)])])\nfi\n\nif test \"$with_zlib\" = yes; then\n  AC_CHECK_HEADER(zlib.h, [], [AC_MSG_ERROR([zlib header not found\nIf you have zlib already installed, see config.log for details on the\nfailure.  It is possible the compiler isn't looking in the proper directory.\nUse --without-zlib to disable zlib support.])])\nfi\n\nif test \"$with_gssapi\" = yes ; then\n  AC_CHECK_HEADERS(gssapi/gssapi.h, [],\n\t[AC_CHECK_HEADERS(gssapi.h, [], [AC_MSG_ERROR([gssapi.h header file is required for GSSAPI])])])\nfi\n\nif test \"$with_openssl\" = yes ; then\n  AC_CHECK_HEADER(openssl/ssl.h, [], [AC_MSG_ERROR([header file <openssl/ssl.h> is required for OpenSSL])])\n  AC_CHECK_HEADER(openssl/err.h, [], [AC_MSG_ERROR([header file <openssl/err.h> is required for OpenSSL])])\nfi\n\nif test \"$with_pam\" = yes ; then\n  AC_CHECK_HEADERS(security/pam_appl.h, [],\n                   [AC_CHECK_HEADERS(pam/pam_appl.h, [],\n                                     [AC_MSG_ERROR([header file <security/pam_appl.h> or <pam/pam_appl.h> is required for PAM.])])])\nfi\n\nif test \"$with_bsd_auth\" = yes ; then\n  AC_CHECK_HEADER(bsd_auth.h, [], [AC_MSG_ERROR([header file <bsd_auth.h> is required for BSD Authentication support])])\nfi\n\nif test \"$with_systemd\" = yes ; then\n  AC_CHECK_HEADER(systemd/sd-daemon.h, [], [AC_MSG_ERROR([header file <systemd/sd-daemon.h> is required for systemd support])])\nfi\n\nif test \"$with_libxml\" = yes ; then\n  AC_CHECK_HEADER(libxml/parser.h, [], [AC_MSG_ERROR([header file <libxml/parser.h> is required for XML support])])\nfi\n\nif test \"$with_libxslt\" = yes ; then\n  AC_CHECK_HEADER(libxslt/xslt.h, [], [AC_MSG_ERROR([header file <libxslt/xslt.h> is required for XSLT support])])\nfi\n\nif test \"$with_ldap\" = yes ; then\n  if test \"$PORTNAME\" != \"win32\"; then\n     AC_CHECK_HEADERS(ldap.h, [],\n                      [AC_MSG_ERROR([header file <ldap.h> is required for LDAP])])\n     PGAC_LDAP_SAFE\n  else\n     AC_CHECK_HEADERS(winldap.h, [],\n                      [AC_MSG_ERROR([header file <winldap.h> is required for LDAP])],\n                      [AC_INCLUDES_DEFAULT\n#include <windows.h>\n                      ])\n  fi\nfi\n\nif test \"$with_bonjour\" = yes ; then\n  AC_CHECK_HEADER(dns_sd.h, [], [AC_MSG_ERROR([header file <dns_sd.h> is required for Bonjour])])\ndnl At some point we might add something like\ndnl AC_SEARCH_LIBS(DNSServiceRegister, dns_sd)\ndnl but right now, what that would mainly accomplish is to encourage\ndnl people to try to use the avahi implementation, which does not work.\ndnl If you want to use Apple's own Bonjour code on another platform,\ndnl just add -ldns_sd to LIBS manually.\nfi\n\n# for contrib/uuid-ossp\nif test \"$with_uuid\" = bsd ; then\n  AC_CHECK_HEADERS(uuid.h,\n    [AC_EGREP_HEADER([uuid_to_string], uuid.h, [],\n      [AC_MSG_ERROR([header file <uuid.h> does not match BSD UUID library])])],\n    [AC_MSG_ERROR([header file <uuid.h> is required for BSD UUID])])\nelif test \"$with_uuid\" = e2fs ; then\n  AC_CHECK_HEADERS(uuid/uuid.h,\n    [AC_EGREP_HEADER([uuid_generate], uuid/uuid.h, [],\n      [AC_MSG_ERROR([header file <uuid/uuid.h> does not match E2FS UUID library])])],\n    [AC_CHECK_HEADERS(uuid.h,\n      [AC_EGREP_HEADER([uuid_generate], uuid.h, [],\n        [AC_MSG_ERROR([header file <uuid.h> does not match E2FS UUID library])])],\n      [AC_MSG_ERROR([header file <uuid/uuid.h> or <uuid.h> is required for E2FS UUID])])])\nelif test \"$with_uuid\" = ossp ; then\n  AC_CHECK_HEADERS(ossp/uuid.h,\n    [AC_EGREP_HEADER([uuid_export], ossp/uuid.h, [],\n      [AC_MSG_ERROR([header file <ossp/uuid.h> does not match OSSP UUID library])])],\n    [AC_CHECK_HEADERS(uuid.h,\n      [AC_EGREP_HEADER([uuid_export], uuid.h, [],\n        [AC_MSG_ERROR([header file <uuid.h> does not match OSSP UUID library])])],\n      [AC_MSG_ERROR([header file <ossp/uuid.h> or <uuid.h> is required for OSSP UUID])])])\nfi\n\nif test \"$PORTNAME\" = \"win32\" ; then\n   AC_CHECK_HEADERS(crtdefs.h)\nfi\n\n##\n## Types, structures, compiler characteristics\n##\n\nm4_defun([AC_PROG_CC_STDC], []) dnl We don't want that.\nAC_C_BIGENDIAN\nAC_C_INLINE\nPGAC_PRINTF_ARCHETYPE\nAC_C_FLEXIBLE_ARRAY_MEMBER\nPGAC_C_SIGNED\nPGAC_C_FUNCNAME_SUPPORT\nPGAC_C_STATIC_ASSERT\nPGAC_C_TYPEOF\nPGAC_C_TYPES_COMPATIBLE\nPGAC_C_BUILTIN_BSWAP32\nPGAC_C_BUILTIN_BSWAP64\nPGAC_C_BUILTIN_CONSTANT_P\nPGAC_C_BUILTIN_UNREACHABLE\nPGAC_C_COMPUTED_GOTO\nPGAC_C_VA_ARGS\nPGAC_STRUCT_TIMEZONE\nPGAC_UNION_SEMUN\nPGAC_STRUCT_SOCKADDR_UN\nPGAC_STRUCT_SOCKADDR_STORAGE\nPGAC_STRUCT_SOCKADDR_STORAGE_MEMBERS\nPGAC_STRUCT_ADDRINFO\nAC_TYPE_INTPTR_T\nAC_TYPE_UINTPTR_T\nAC_TYPE_LONG_LONG_INT\n\nPGAC_TYPE_LOCALE_T\n\nAC_CHECK_TYPES([struct cmsgcred], [], [],\n[#include <sys/socket.h>\n#include <sys/param.h>\n#ifdef HAVE_SYS_UCRED_H\n#include <sys/ucred.h>\n#endif])\n\nAC_CHECK_TYPES([struct option], [], [],\n[#ifdef HAVE_GETOPT_H\n#include <getopt.h>\n#endif])\n\nif test \"$with_zlib\" = yes; then\n  # Check that <zlib.h> defines z_streamp (versions before about 1.0.4\n  # did not).  While we could work around the lack of z_streamp, it\n  # seems unwise to encourage people to use such old zlib versions...\n  AC_CHECK_TYPE(z_streamp, [], [AC_MSG_ERROR([zlib version is too old\nUse --without-zlib to disable zlib support.])],\n                [#include <zlib.h>])\nfi\n\n# On PPC, check if assembler supports LWARX instruction's mutex hint bit\ncase $host_cpu in\n  ppc*|powerpc*)\n    AC_MSG_CHECKING([whether assembler supports lwarx hint bit])\n    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([],\n\t[int a = 0; int *p = &a; int r;\n\t __asm__ __volatile__ (\" lwarx %0,0,%1,1\\n\" : \"=&r\"(r) : \"r\"(p));])],\n\t[pgac_cv_have_ppc_mutex_hint=yes],\n\t[pgac_cv_have_ppc_mutex_hint=no])\n    AC_MSG_RESULT([$pgac_cv_have_ppc_mutex_hint])\n    if test x\"$pgac_cv_have_ppc_mutex_hint\" = xyes ; then\n\tAC_DEFINE(HAVE_PPC_LWARX_MUTEX_HINT, 1, [Define to 1 if the assembler supports PPC's LWARX mutex hint bit.])\n    fi\n  ;;\nesac\n\n# Check largefile support.  You might think this is a system service not a\n# compiler characteristic, but you'd be wrong.  We must check this before\n# probing existence of related functions such as fseeko, since the largefile\n# defines can affect what is generated for that.\nif test \"$PORTNAME\" != \"win32\"; then\n   AC_SYS_LARGEFILE\n   dnl Autoconf 2.69's AC_SYS_LARGEFILE believes it's a good idea to #define\n   dnl _DARWIN_USE_64_BIT_INODE, but it isn't: on macOS 10.5 that activates a\n   dnl bug that causes readdir() to sometimes return EINVAL.  On later macOS\n   dnl versions where the feature actually works, it's on by default anyway.\n   AH_VERBATIM([_DARWIN_USE_64_BIT_INODE],[])\nfi\n\n# Check for largefile support (must be after AC_SYS_LARGEFILE)\nAC_CHECK_SIZEOF([off_t])\n\n# If we don't have largefile support, can't handle segsize >= 2GB.\nif test \"$ac_cv_sizeof_off_t\" -lt 8 -a \"$segsize\" != \"1\"; then\n   AC_MSG_ERROR([Large file support is not enabled. Segment size cannot be larger than 1GB.])\nfi\n\n\n##\n## Functions, global variables\n##\n\nPGAC_VAR_INT_TIMEZONE\nAC_FUNC_ACCEPT_ARGTYPES\nPGAC_FUNC_GETTIMEOFDAY_1ARG\nPGAC_FUNC_WCSTOMBS_L\n\n# Some versions of libedit contain strlcpy(), setproctitle(), and other\n# symbols that that library has no business exposing to the world.  Pending\n# acquisition of a clue by those developers, ignore libedit (including its\n# possible alias of libreadline) while checking for everything else.\nLIBS_including_readline=\"$LIBS\"\nLIBS=`echo \"$LIBS\" | sed -e 's/-ledit//g' -e 's/-lreadline//g'`\n\nAC_CHECK_FUNCS(m4_normalize([\n\tcbrt\n\tclock_gettime\n\tdlopen\n\tfdatasync\n\tgetifaddrs\n\tgetpeerucred\n\tgetrlimit\n\tmbstowcs_l\n\tmemmove\n\tpoll\n\tposix_fallocate\n\tpstat\n\tpthread_is_threaded_np\n\treadlink\n\tsetproctitle\n\tsetsid\n\tshm_open\n\tsymlink\n\tsync_file_range\n\ttowlower\n\tuselocale\n\tutime\n\tutimes\n\twcstombs\n\twcstombs_l\n]))\n\nAC_REPLACE_FUNCS(fseeko)\ncase $host_os in\n\t# NetBSD uses a custom fseeko/ftello built on fsetpos/fgetpos\n\t# Mingw uses macros to access Win32 API calls\n\tnetbsd*|mingw*)\n\t\tAC_DEFINE(HAVE_FSEEKO, 1, [Define to 1 because replacement version used.])\n\t\tac_cv_func_fseeko=yes;;\n\t*)\n\t\tAC_FUNC_FSEEKO;;\nesac\n\n# posix_fadvise() is a no-op on Solaris, so don't incur function overhead\n# by calling it, 2009-04-02\n# http://src.opensolaris.org/source/xref/onnv/onnv-gate/usr/src/lib/libc/port/gen/posix_fadvise.c\ndnl must use AS_IF here, else AC_REQUIRES inside AC_CHECK_DECLS malfunctions\nAS_IF([test \"$PORTNAME\" != \"solaris\"], [\nAC_CHECK_FUNCS(posix_fadvise)\nAC_CHECK_DECLS(posix_fadvise, [], [], [#include <fcntl.h>])\n]) # fi\n\nAC_CHECK_DECLS(fdatasync, [], [], [#include <unistd.h>])\nAC_CHECK_DECLS([strlcat, strlcpy])\n# This is probably only present on macOS, but may as well check always\nAC_CHECK_DECLS(F_FULLFSYNC, [], [], [#include <fcntl.h>])\n\nHAVE_IPV6=no\nAC_CHECK_TYPE([struct sockaddr_in6],\n        [AC_DEFINE(HAVE_IPV6, 1, [Define to 1 if you have support for IPv6.])\n         HAVE_IPV6=yes],\n        [],\n[$ac_includes_default\n#include <netinet/in.h>])\nAC_SUBST(HAVE_IPV6)\n\nAC_CACHE_CHECK([for PS_STRINGS], [pgac_cv_var_PS_STRINGS],\n[AC_LINK_IFELSE([AC_LANG_PROGRAM(\n[#include <machine/vmparam.h>\n#include <sys/exec.h>\n],\n[PS_STRINGS->ps_nargvstr = 1;\nPS_STRINGS->ps_argvstr = \"foo\";])],\n[pgac_cv_var_PS_STRINGS=yes],\n[pgac_cv_var_PS_STRINGS=no])])\nif test \"$pgac_cv_var_PS_STRINGS\" = yes ; then\n  AC_DEFINE([HAVE_PS_STRINGS], 1, [Define to 1 if the PS_STRINGS thing exists.])\nfi\n\n\n# We use our snprintf.c emulation if either snprintf() or vsnprintf()\n# is missing.  Yes, there are machines that have only one.  We may\n# also decide to use snprintf.c if snprintf() is present but does not\n# have all the features we need --- see below.\n\nif test \"$PORTNAME\" = \"win32\"; then\n  # Win32 gets snprintf.c built unconditionally.\n  #\n  # To properly translate all NLS languages strings, we must support the\n  # *printf() %$ format, which allows *printf() arguments to be selected\n  # by position in the translated string.\n  #\n  # libintl versions < 0.13 use the native *printf() functions, and Win32\n  # *printf() doesn't understand %$, so we must use our /port versions,\n  # which do understand %$. libintl versions >= 0.13 include their own\n  # *printf versions on Win32.  The libintl 0.13 release note text is:\n  #\n  #   C format strings with positions, as they arise when a translator\n  #   needs to reorder a sentence, are now supported on all platforms.\n  #   On those few platforms (NetBSD and Woe32) for which the native\n  #   printf()/fprintf()/... functions don't support such format\n  #   strings, replacements are provided through <libintl.h>.\n  #\n  # We could use libintl >= 0.13's *printf() if we were sure that we had\n  # a litint >= 0.13 at runtime, but seeing that there is no clean way\n  # to guarantee that, it is best to just use our own, so we are sure to\n  # get %$ support. In include/port.h we disable the *printf() macros\n  # that might have been defined by libintl.\n  #\n  # We do this unconditionally whether NLS is used or not so we are sure\n  # that all Win32 libraries and binaries behave the same.\n  pgac_need_repl_snprintf=yes\nelse\n  pgac_need_repl_snprintf=no\n  AC_CHECK_FUNCS(snprintf, [], pgac_need_repl_snprintf=yes)\n  AC_CHECK_FUNCS(vsnprintf, [], pgac_need_repl_snprintf=yes)\nfi\n\n\n# Check whether <stdio.h> declares snprintf() and vsnprintf(); if not,\n# include/c.h will provide declarations.  Note this is a separate test\n# from whether the functions exist in the C library --- there are\n# systems that have the functions but don't bother to declare them :-(\n\nAC_CHECK_DECLS([snprintf, vsnprintf])\n\n\ndnl Cannot use AC_CHECK_FUNC because isinf may be a macro\nAC_CACHE_CHECK([for isinf], ac_cv_func_isinf,\n[AC_LINK_IFELSE([AC_LANG_PROGRAM([\n#include <math.h>\ndouble glob_double;\n],\n[return isinf(glob_double) ? 0 : 1;])],\n[ac_cv_func_isinf=yes],\n[ac_cv_func_isinf=no])])\n\nif test $ac_cv_func_isinf = yes ; then\n  AC_DEFINE(HAVE_ISINF, 1, [Define to 1 if you have isinf().])\nelse\n  AC_LIBOBJ(isinf)\n  # Look for a way to implement a substitute for isinf()\n  AC_CHECK_FUNCS([fpclass fp_class fp_class_d class], [break])\nfi\n\nAC_REPLACE_FUNCS([crypt fls getopt getrusage inet_aton mkdtemp random rint srandom strerror strlcat strlcpy])\n\ncase $host_os in\n\n        # Windows uses a specialised env handler\n        # and doesn't need a replacement getpeereid because it doesn't use\n        # Unix sockets.\n        mingw*)\n                AC_DEFINE(HAVE_UNSETENV, 1, [Define to 1 because replacement version used.])\n                AC_DEFINE(HAVE_GETPEEREID, 1, [Define to 1 because function not required.])\n                ac_cv_func_unsetenv=yes\n                ac_cv_func_getpeereid=yes;;\n        *)\n                AC_REPLACE_FUNCS([unsetenv getpeereid])\n\t\t;;\nesac\n\n# System's version of getaddrinfo(), if any, may be used only if we found\n# a definition for struct addrinfo; see notes in src/include/getaddrinfo.h.\n# We use only our own getaddrinfo.c on Windows, but it's time to revisit that.\nif test x\"$ac_cv_type_struct_addrinfo\" = xyes && \\\n   test \"$PORTNAME\" != \"win32\"; then\n  AC_REPLACE_FUNCS([getaddrinfo])\nelse\n  AC_LIBOBJ(getaddrinfo)\nfi\n\n# Similarly, use system's getopt_long() only if system provides struct option.\nif test x\"$ac_cv_type_struct_option\" = xyes ; then\n  AC_REPLACE_FUNCS([getopt_long])\nelse\n  AC_LIBOBJ(getopt_long)\nfi\n\n# On OpenBSD and Solaris, getopt() doesn't do what we want for long options\n# (i.e., allow '-' as a flag character), so use our version on those platforms.\nif test \"$PORTNAME\" = \"openbsd\" -o \"$PORTNAME\" = \"solaris\"; then\n  AC_LIBOBJ(getopt)\nfi\n\n# mingw has adopted a GNU-centric interpretation of optind/optreset,\n# so always use our version on Windows.\nif test \"$PORTNAME\" = \"win32\"; then\n  AC_LIBOBJ(getopt)\n  AC_LIBOBJ(getopt_long)\nfi\n\n# Win32 (really MinGW) support\nif test \"$PORTNAME\" = \"win32\"; then\n  AC_CHECK_FUNCS(_configthreadlocale)\n  AC_REPLACE_FUNCS(gettimeofday)\n  AC_LIBOBJ(dirmod)\n  AC_LIBOBJ(kill)\n  AC_LIBOBJ(open)\n  AC_LIBOBJ(system)\n  AC_LIBOBJ(win32env)\n  AC_LIBOBJ(win32error)\n  AC_LIBOBJ(win32security)\n  AC_LIBOBJ(win32setlocale)\n  AC_DEFINE([HAVE_SYMLINK], 1,\n            [Define to 1 if you have the `symlink' function.])\n  AC_CHECK_TYPES(MINIDUMP_TYPE, [pgac_minidump_type=yes], [pgac_minidump_type=no], [\n#define WIN32_LEAN_AND_MEAN\n#include <windows.h>\n#include <string.h>\n#include <dbghelp.h>])\nfi\nif test x\"$pgac_minidump_type\" = x\"yes\" ; then\n  AC_SUBST(have_win32_dbghelp,yes)\nelse\n  AC_SUBST(have_win32_dbghelp,no)\nfi\n\n# Cygwin needs only a bit of that\nif test \"$PORTNAME\" = \"cygwin\"; then\n  AC_LIBOBJ(dirmod)\nfi\n\nAC_CHECK_DECLS([sys_siglist], [], [],\n[#include <signal.h>\n/* NetBSD declares sys_siglist in unistd.h.  */\n#ifdef HAVE_UNISTD_H\n# include <unistd.h>\n#endif\n])\n\nAC_CHECK_FUNC(syslog,\n              [AC_CHECK_HEADER(syslog.h,\n                               [AC_DEFINE(HAVE_SYSLOG, 1, [Define to 1 if you have the syslog interface.])])])\n\nAC_CACHE_CHECK([for opterr], pgac_cv_var_int_opterr,\n[AC_LINK_IFELSE([AC_LANG_PROGRAM([#include <unistd.h>],\n  [extern int opterr; opterr = 1;])],\n  [pgac_cv_var_int_opterr=yes],\n  [pgac_cv_var_int_opterr=no])])\nif test x\"$pgac_cv_var_int_opterr\" = x\"yes\"; then\n  AC_DEFINE(HAVE_INT_OPTERR, 1, [Define to 1 if you have the global variable 'int opterr'.])\nfi\n\nAC_CACHE_CHECK([for optreset], pgac_cv_var_int_optreset,\n[AC_LINK_IFELSE([AC_LANG_PROGRAM([#include <unistd.h>],\n  [extern int optreset; optreset = 1;])],\n  [pgac_cv_var_int_optreset=yes],\n  [pgac_cv_var_int_optreset=no])])\nif test x\"$pgac_cv_var_int_optreset\" = x\"yes\"; then\n  AC_DEFINE(HAVE_INT_OPTRESET, 1, [Define to 1 if you have the global variable 'int optreset'.])\nfi\n\nAC_CHECK_FUNCS([strtoll __strtoll strtoq], [break])\nAC_CHECK_FUNCS([strtoull __strtoull strtouq], [break])\n# strto[u]ll may exist but not be declared\nAC_CHECK_DECLS([strtoll, strtoull])\n\nif test \"$with_icu\" = yes; then\n  ac_save_CPPFLAGS=$CPPFLAGS\n  CPPFLAGS=\"$ICU_CFLAGS $CPPFLAGS\"\n\n  # Verify we have ICU's header files\n  AC_CHECK_HEADER(unicode/ucol.h, [],\n        [AC_MSG_ERROR([header file <unicode/ucol.h> is required for ICU])])\n\n  CPPFLAGS=$ac_save_CPPFLAGS\nfi\n\n# Lastly, restore full LIBS list and check for readline/libedit symbols\nLIBS=\"$LIBS_including_readline\"\n\nif test \"$with_readline\" = yes; then\n  PGAC_VAR_RL_COMPLETION_APPEND_CHARACTER\n  AC_CHECK_FUNCS([rl_completion_matches rl_filename_completion_function rl_reset_screen_size])\n  AC_CHECK_FUNCS([append_history history_truncate_file])\nfi\n\n\n# This test makes sure that run tests work at all.  Sometimes a shared\n# library is found by the linker, but the runtime linker can't find it.\n# This check should come after all modifications of compiler or linker\n# variables, and before any other run tests.\nAC_MSG_CHECKING([test program])\nAC_RUN_IFELSE([AC_LANG_SOURCE([int main() { return 0; }])],\n[AC_MSG_RESULT(ok)],\n[AC_MSG_RESULT(failed)\nAC_MSG_ERROR([[\nCould not execute a simple test program.  This may be a problem\nrelated to locating shared libraries.  Check the file 'config.log'\nfor the exact reason.]])],\n[AC_MSG_RESULT([cross-compiling])])\n\n# --------------------\n# Run tests below here\n# --------------------\n\n# Force use of our snprintf if system's doesn't do arg control\n# See comment above at snprintf test for details.\nif test \"$enable_nls\" = yes -a \"$pgac_need_repl_snprintf\" = no; then\n  PGAC_FUNC_SNPRINTF_ARG_CONTROL\n  if test $pgac_cv_snprintf_arg_control != yes ; then\n    pgac_need_repl_snprintf=yes\n  fi\nfi\n\n\ndnl Check to see if we have a working 64-bit integer type.\ndnl This breaks down into two steps:\ndnl (1) figure out if the compiler has a 64-bit int type with working\ndnl arithmetic, and if so\ndnl (2) see whether snprintf() can format the type correctly.  (Currently,\ndnl snprintf is the only library routine we really need for int8 support.)\ndnl It's entirely possible to have a compiler that handles a 64-bit type\ndnl when the C library doesn't; this is fairly likely when using gcc on\ndnl an older platform, for example.\ndnl If there is no native snprintf() or it does not handle the 64-bit type,\ndnl we force our own version of snprintf() to be used instead.\ndnl Note this test must be run after our initial check for snprintf/vsnprintf.\n\ndnl As of Postgres 8.4, we no longer support compilers without a working\ndnl 64-bit type.  But we still handle the case of snprintf being broken.\n\nPGAC_TYPE_64BIT_INT([long int])\n\nif test x\"$HAVE_LONG_INT_64\" = x\"yes\" ; then\n  pg_int64_type=\"long int\"\nelse\n  PGAC_TYPE_64BIT_INT([long long int])\n  if test x\"$HAVE_LONG_LONG_INT_64\" = x\"yes\" ; then\n    pg_int64_type=\"long long int\"\n  else\n    AC_MSG_ERROR([Cannot find a working 64-bit integer type.])\n  fi\nfi\n\nAC_DEFINE_UNQUOTED(PG_INT64_TYPE, $pg_int64_type,\n  [Define to the name of a signed 64-bit integer type.])\n\n# If we found \"long int\" is 64 bits, assume snprintf handles it.  If\n# we found we need to use \"long long int\", better check.  We cope with\n# snprintfs that use %lld, %qd, or %I64d as the format.  If none of these\n# work, fall back to our own snprintf emulation (which we know uses %lld).\n\nif test \"$HAVE_LONG_LONG_INT_64\" = yes ; then\n  if test $pgac_need_repl_snprintf = no; then\n    PGAC_FUNC_SNPRINTF_LONG_LONG_INT_MODIFIER\n    if test \"$LONG_LONG_INT_MODIFIER\" = \"\"; then\n      # Force usage of our own snprintf, since system snprintf is broken\n      pgac_need_repl_snprintf=yes\n      LONG_LONG_INT_MODIFIER='ll'\n    fi\n  else\n    # Here if we previously decided we needed to use our own snprintf\n    LONG_LONG_INT_MODIFIER='ll'\n  fi\nelse\n  # Here if we are not using 'long long int' at all\n  LONG_LONG_INT_MODIFIER='l'\nfi\n\nINT64_MODIFIER=\"\\\"$LONG_LONG_INT_MODIFIER\\\"\"\n\nAC_DEFINE_UNQUOTED(INT64_MODIFIER, $INT64_MODIFIER,\n                   [Define to the appropriate snprintf length modifier for 64-bit ints.])\n\n# Also force use of our snprintf if the system's doesn't support the %z flag.\nif test \"$pgac_need_repl_snprintf\" = no; then\n  PGAC_FUNC_SNPRINTF_SIZE_T_SUPPORT\n  if test \"$pgac_cv_snprintf_size_t_support\" != yes; then\n    pgac_need_repl_snprintf=yes\n  fi\nfi\n\n# Now we have checked all the reasons to replace snprintf\nif test $pgac_need_repl_snprintf = yes; then\n  AC_DEFINE(USE_REPL_SNPRINTF, 1, [Use replacement snprintf() functions.])\n  AC_LIBOBJ(snprintf)\nfi\n\n# Check size of void *, size_t (enables tweaks for > 32bit address space)\nAC_CHECK_SIZEOF([void *])\nAC_CHECK_SIZEOF([size_t])\nAC_CHECK_SIZEOF([long])\n\n# Decide whether float4 is passed by value: user-selectable, enabled by default\nAC_MSG_CHECKING([whether to build with float4 passed by value])\nPGAC_ARG_BOOL(enable, float4-byval, yes, [disable float4 passed by value],\n              [AC_DEFINE([USE_FLOAT4_BYVAL], 1,\n                         [Define to 1 if you want float4 values to be passed by value. (--enable-float4-byval)])\n               float4passbyval=true],\n              [float4passbyval=false])\nAC_MSG_RESULT([$enable_float4_byval])\nAC_DEFINE_UNQUOTED([FLOAT4PASSBYVAL], [$float4passbyval], [float4 values are passed by value if 'true', by reference if 'false'])\n\n# Decide whether float8 is passed by value.\n# Note: this setting also controls int8 and related types such as timestamp.\n# If sizeof(Datum) >= 8, this is user-selectable, enabled by default.\n# If not, trying to select it is an error.\nAC_MSG_CHECKING([whether to build with float8 passed by value])\nif test $ac_cv_sizeof_void_p -ge 8 ; then\n  PGAC_ARG_BOOL(enable, float8-byval, yes, [disable float8 passed by value])\nelse\n  PGAC_ARG_BOOL(enable, float8-byval, no, [disable float8 passed by value])\n  if test \"$enable_float8_byval\" = yes ; then\n    AC_MSG_ERROR([--enable-float8-byval is not supported on 32-bit platforms.])\n  fi\nfi\nif test \"$enable_float8_byval\" = yes ; then\n  AC_DEFINE([USE_FLOAT8_BYVAL], 1,\n            [Define to 1 if you want float8, int8, etc values to be passed by value. (--enable-float8-byval)])\n  float8passbyval=true\nelse\n  float8passbyval=false\nfi\nAC_MSG_RESULT([$enable_float8_byval])\nAC_DEFINE_UNQUOTED([FLOAT8PASSBYVAL], [$float8passbyval], [float8, int8, and related values are passed by value if 'true', by reference if 'false'])\n\n# Determine memory alignment requirements for the basic C data types.\n\nAC_CHECK_ALIGNOF(short)\nAC_CHECK_ALIGNOF(int)\nAC_CHECK_ALIGNOF(long)\nif test x\"$HAVE_LONG_LONG_INT_64\" = x\"yes\" ; then\n  AC_CHECK_ALIGNOF(long long int)\nfi\nAC_CHECK_ALIGNOF(double)\n\n# Compute maximum alignment of any basic type.\n# We assume long's alignment is at least as strong as char, short, or int;\n# but we must check long long (if it is being used for int64) and double.\n# Note that we intentionally do not consider any types wider than 64 bits,\n# as allowing MAXIMUM_ALIGNOF to exceed 8 would be too much of a penalty\n# for disk and memory space.\n\nMAX_ALIGNOF=$ac_cv_alignof_long\nif test $MAX_ALIGNOF -lt $ac_cv_alignof_double ; then\n  MAX_ALIGNOF=$ac_cv_alignof_double\nfi\nif test x\"$HAVE_LONG_LONG_INT_64\" = xyes && test $MAX_ALIGNOF -lt $ac_cv_alignof_long_long_int ; then\n  MAX_ALIGNOF=\"$ac_cv_alignof_long_long_int\"\nfi\nAC_DEFINE_UNQUOTED(MAXIMUM_ALIGNOF, $MAX_ALIGNOF, [Define as the maximum alignment requirement of any C data type.])\n\n\n# Some platforms predefine the types int8, int16, etc.  Only check\n# a (hopefully) representative subset.\nAC_CHECK_TYPES([int8, uint8, int64, uint64], [], [],\n[#include <stdio.h>])\n\n# Some compilers offer a 128-bit integer scalar type.\nPGAC_TYPE_128BIT_INT\n\n# Check for various atomic operations now that we have checked how to declare\n# 64bit integers.\nPGAC_HAVE_GCC__SYNC_CHAR_TAS\nPGAC_HAVE_GCC__SYNC_INT32_TAS\nPGAC_HAVE_GCC__SYNC_INT32_CAS\nPGAC_HAVE_GCC__SYNC_INT64_CAS\nPGAC_HAVE_GCC__ATOMIC_INT32_CAS\nPGAC_HAVE_GCC__ATOMIC_INT64_CAS\n\n\n# Check for x86 cpuid instruction\nAC_CACHE_CHECK([for __get_cpuid], [pgac_cv__get_cpuid],\n[AC_LINK_IFELSE([AC_LANG_PROGRAM([#include <cpuid.h>],\n  [[unsigned int exx[4] = {0, 0, 0, 0};\n  __get_cpuid(1, &exx[0], &exx[1], &exx[2], &exx[3]);\n  ]])],\n  [pgac_cv__get_cpuid=\"yes\"],\n  [pgac_cv__get_cpuid=\"no\"])])\nif test x\"$pgac_cv__get_cpuid\" = x\"yes\"; then\n  AC_DEFINE(HAVE__GET_CPUID, 1, [Define to 1 if you have __get_cpuid.])\nfi\n\nAC_CACHE_CHECK([for __cpuid], [pgac_cv__cpuid],\n[AC_LINK_IFELSE([AC_LANG_PROGRAM([#include <intrin.h>],\n  [[unsigned int exx[4] = {0, 0, 0, 0};\n  __get_cpuid(exx[0], 1);\n  ]])],\n  [pgac_cv__cpuid=\"yes\"],\n  [pgac_cv__cpuid=\"no\"])])\nif test x\"$pgac_cv__cpuid\" = x\"yes\"; then\n  AC_DEFINE(HAVE__CPUID, 1, [Define to 1 if you have __cpuid.])\nfi\n\n# Check for Intel SSE 4.2 intrinsics to do CRC calculations.\n#\n# First check if the _mm_crc32_u8 and _mm_crc32_u64 intrinsics can be used\n# with the default compiler flags. If not, check if adding the -msse4.2\n# flag helps. CFLAGS_SSE42 is set to -msse4.2 if that's required.\nPGAC_SSE42_CRC32_INTRINSICS([])\nif test x\"$pgac_sse42_crc32_intrinsics\" != x\"yes\"; then\n  PGAC_SSE42_CRC32_INTRINSICS([-msse4.2])\nfi\nAC_SUBST(CFLAGS_SSE42)\n\n# Are we targeting a processor that supports SSE 4.2? gcc, clang and icc all\n# define __SSE4_2__ in that case.\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM([], [\n#ifndef __SSE4_2__\n#error __SSE4_2__ not defined\n#endif\n])], [SSE4_2_TARGETED=1])\n\n# Select CRC-32C implementation.\n#\n# If we are targeting a processor that has SSE 4.2 instructions, we can use the\n# special CRC instructions for calculating CRC-32C. If we're not targeting such\n# a processor, but we can nevertheless produce code that uses the SSE\n# intrinsics, perhaps with some extra CFLAGS, compile both implementations and\n# select which one to use at runtime, depending on whether SSE 4.2 is supported\n# by the processor we're running on.\n#\n# You can override this logic by setting the appropriate USE_*_CRC32 flag to 1\n# in the template or configure command line.\nif test x\"$USE_SSE42_CRC32C\" = x\"\" && test x\"$USE_SSE42_CRC32C_WITH_RUNTIME_CHECK\" = x\"\" && test x\"$USE_SLICING_BY_8_CRC32C\" = x\"\"; then\n  if test x\"$pgac_sse42_crc32_intrinsics\" = x\"yes\" && test x\"$SSE4_2_TARGETED\" = x\"1\" ; then\n    USE_SSE42_CRC32C=1\n  else\n    # the CPUID instruction is needed for the runtime check.\n    if test x\"$pgac_sse42_crc32_intrinsics\" = x\"yes\" && (test x\"$pgac_cv__get_cpuid\" = x\"yes\" || test x\"$pgac_cv__cpuid\" = x\"yes\"); then\n      USE_SSE42_CRC32C_WITH_RUNTIME_CHECK=1\n    else\n      # fall back to slicing-by-8 algorithm which doesn't require any special\n      # CPU support.\n      USE_SLICING_BY_8_CRC32C=1\n    fi\n  fi\nfi\n\n# Set PG_CRC32C_OBJS appropriately depending on the selected implementation.\nAC_MSG_CHECKING([which CRC-32C implementation to use])\nif test x\"$USE_SSE42_CRC32C\" = x\"1\"; then\n  AC_DEFINE(USE_SSE42_CRC32C, 1, [Define to 1 use Intel SSE 4.2 CRC instructions.])\n  PG_CRC32C_OBJS=\"pg_crc32c_sse42.o\"\n  AC_MSG_RESULT(SSE 4.2)\nelse\n  if test x\"$USE_SSE42_CRC32C_WITH_RUNTIME_CHECK\" = x\"1\"; then\n    AC_DEFINE(USE_SSE42_CRC32C_WITH_RUNTIME_CHECK, 1, [Define to 1 to use Intel SSE 4.2 CRC instructions with a runtime check.])\n    PG_CRC32C_OBJS=\"pg_crc32c_sse42.o pg_crc32c_sb8.o pg_crc32c_choose.o\"\n    AC_MSG_RESULT(SSE 4.2 with runtime check)\n  else\n    AC_DEFINE(USE_SLICING_BY_8_CRC32C, 1, [Define to 1 to use software CRC-32C implementation (slicing-by-8).])\n    PG_CRC32C_OBJS=\"pg_crc32c_sb8.o\"\n    AC_MSG_RESULT(slicing-by-8)\n  fi\nfi\nAC_SUBST(PG_CRC32C_OBJS)\n\n\n# Select semaphore implementation type.\nif test \"$PORTNAME\" != \"win32\"; then\n  if test x\"$PREFERRED_SEMAPHORES\" = x\"NAMED_POSIX\" ; then\n    # Need sem_open for this\n    AC_SEARCH_LIBS(sem_open, [rt pthread], [USE_NAMED_POSIX_SEMAPHORES=1])\n  fi\n  if test x\"$PREFERRED_SEMAPHORES\" = x\"UNNAMED_POSIX\" ; then\n    # Need sem_init for this\n    AC_SEARCH_LIBS(sem_init, [rt pthread], [USE_UNNAMED_POSIX_SEMAPHORES=1])\n  fi\n  AC_MSG_CHECKING([which semaphore API to use])\n  if test x\"$USE_NAMED_POSIX_SEMAPHORES\" = x\"1\" ; then\n    AC_DEFINE(USE_NAMED_POSIX_SEMAPHORES, 1, [Define to select named POSIX semaphores.])\n    SEMA_IMPLEMENTATION=\"src/backend/port/posix_sema.c\"\n    sematype=\"named POSIX\"\n  else\n    if test x\"$USE_UNNAMED_POSIX_SEMAPHORES\" = x\"1\" ; then\n      AC_DEFINE(USE_UNNAMED_POSIX_SEMAPHORES, 1, [Define to select unnamed POSIX semaphores.])\n      SEMA_IMPLEMENTATION=\"src/backend/port/posix_sema.c\"\n      sematype=\"unnamed POSIX\"\n    else\n      AC_DEFINE(USE_SYSV_SEMAPHORES, 1, [Define to select SysV-style semaphores.])\n      SEMA_IMPLEMENTATION=\"src/backend/port/sysv_sema.c\"\n      sematype=\"System V\"\n    fi\n  fi\n  AC_MSG_RESULT([$sematype])\nelse\n  AC_DEFINE(USE_WIN32_SEMAPHORES, 1, [Define to select Win32-style semaphores.])\n  SEMA_IMPLEMENTATION=\"src/backend/port/win32_sema.c\"\nfi\n\n\n# Select shared-memory implementation type.\nif test \"$PORTNAME\" != \"win32\"; then\n  AC_DEFINE(USE_SYSV_SHARED_MEMORY, 1, [Define to select SysV-style shared memory.])\n  SHMEM_IMPLEMENTATION=\"src/backend/port/sysv_shmem.c\"\nelse\n  AC_DEFINE(USE_WIN32_SHARED_MEMORY, 1, [Define to select Win32-style shared memory.])\n  SHMEM_IMPLEMENTATION=\"src/backend/port/win32_shmem.c\"\nfi\n\n# Select random number source\n#\n# You can override this logic by setting the appropriate USE_*RANDOM flag to 1\n# in the template or configure command line.\n\n# If not selected manually, try to select a source automatically.\nif test \"$enable_strong_random\" = \"yes\" && test x\"$USE_OPENSSL_RANDOM\" = x\"\" && test x\"$USE_WIN32_RANDOM\" = x\"\" && test x\"$USE_DEV_URANDOM\" = x\"\" ; then\n  if test x\"$with_openssl\" = x\"yes\" ; then\n    USE_OPENSSL_RANDOM=1\n  elif test \"$PORTNAME\" = \"win32\" ; then\n    USE_WIN32_RANDOM=1\n  else\n    AC_CHECK_FILE([/dev/urandom], [], [])\n\n    if test x\"$ac_cv_file__dev_urandom\" = x\"yes\" ; then\n      USE_DEV_URANDOM=1\n    fi\n  fi\nfi\n\nAC_MSG_CHECKING([which random number source to use])\nif test \"$enable_strong_random\" = yes ; then\n  if test x\"$USE_OPENSSL_RANDOM\" = x\"1\" ; then\n    AC_DEFINE(USE_OPENSSL_RANDOM, 1, [Define to use OpenSSL for random number generation])\n    AC_MSG_RESULT([OpenSSL])\n  elif test x\"$USE_WIN32_RANDOM\" = x\"1\" ; then\n    AC_DEFINE(USE_WIN32_RANDOM, 1, [Define to use native Windows API for random number generation])\n    AC_MSG_RESULT([Windows native])\n  elif test x\"$USE_DEV_URANDOM\" = x\"1\" ; then\n    AC_DEFINE(USE_DEV_URANDOM, 1, [Define to use /dev/urandom for random number generation])\n    AC_MSG_RESULT([/dev/urandom])\n  else\n    AC_MSG_ERROR([\nno source of strong random numbers was found\nPostgreSQL can use OpenSSL or /dev/urandom as a source of random numbers,\nfor authentication protocols. You can use --disable-strong-random to use a\nbuilt-in pseudo random number generator, but that may be insecure.])\n  fi\n  AC_DEFINE(HAVE_STRONG_RANDOM, 1, [Define to use have a strong random number source])\nelse\n    AC_MSG_RESULT([weak builtin PRNG])\n    AC_MSG_WARN([\n*** Not using a strong random number source may be insecure.])\nfi\n\n# If not set in template file, set bytes to use libc memset()\nif test x\"$MEMSET_LOOP_LIMIT\" = x\"\" ; then\n  MEMSET_LOOP_LIMIT=1024\nfi\nAC_DEFINE_UNQUOTED(MEMSET_LOOP_LIMIT, ${MEMSET_LOOP_LIMIT}, [Define bytes to use libc memset().])\n\n\nif test \"$enable_nls\" = yes ; then\n  PGAC_CHECK_GETTEXT\nfi\n\n# Check for Tcl configuration script tclConfig.sh\nif test \"$with_tcl\" = yes; then\n    PGAC_PATH_TCLCONFIGSH([$with_tclconfig])\n    PGAC_EVAL_TCLCONFIGSH([$TCL_CONFIG_SH],\n                          [TCL_INCLUDE_SPEC,TCL_LIBS,TCL_LIB_SPEC,TCL_SHARED_BUILD])\n    AC_SUBST(TCL_SHLIB_LD_LIBS)dnl don't want to double-evaluate that one\n    if test \"$TCL_SHARED_BUILD\" != 1; then\n      AC_MSG_ERROR([cannot build PL/Tcl because Tcl is not a shared library\nUse --without-tcl to disable building PL/Tcl.])\n    fi\n    # now that we have TCL_INCLUDE_SPEC, we can check for <tcl.h>\n    ac_save_CPPFLAGS=$CPPFLAGS\n    CPPFLAGS=\"$TCL_INCLUDE_SPEC $CPPFLAGS\"\n    AC_CHECK_HEADER(tcl.h, [], [AC_MSG_ERROR([header file <tcl.h> is required for Tcl])])\n    CPPFLAGS=$ac_save_CPPFLAGS\nfi\n\n# check for <perl.h>\nif test \"$with_perl\" = yes; then\n  ac_save_CPPFLAGS=$CPPFLAGS\n  CPPFLAGS=\"$CPPFLAGS $perl_includespec\"\n  AC_CHECK_HEADER(perl.h, [], [AC_MSG_ERROR([header file <perl.h> is required for Perl])],\n                  [#include <EXTERN.h>])\n  # While we're at it, check that we can link to libperl.\n  # On most platforms, if perl.h is there then libperl.so will be too, but at\n  # this writing Debian packages them separately.  There is no known reason to\n  # waste cycles on separate probes for the Tcl or Python libraries, though.\n  pgac_save_LIBS=$LIBS\n  LIBS=\"$perl_embed_ldflags\"\n  AC_MSG_CHECKING([for libperl])\n  AC_LINK_IFELSE([AC_LANG_PROGRAM([\n#include <EXTERN.h>\n#include <perl.h>\n],  [perl_alloc();])],\n    [AC_MSG_RESULT(yes)],\n    [AC_MSG_RESULT(no)\n     AC_MSG_ERROR([libperl library is required for Perl])])\n  LIBS=$pgac_save_LIBS\n  CPPFLAGS=$ac_save_CPPFLAGS\nfi\n\n# check for <Python.h>\nif test \"$with_python\" = yes; then\n  ac_save_CPPFLAGS=$CPPFLAGS\n  CPPFLAGS=\"$python_includespec $CPPFLAGS\"\n  AC_CHECK_HEADER(Python.h, [], [AC_MSG_ERROR([header file <Python.h> is required for Python])])\n  CPPFLAGS=$ac_save_CPPFLAGS\nfi\n\n#\n# Check for DocBook and tools\n#\nPGAC_PROG_NSGMLS\nPGAC_CHECK_DOCBOOK(4.2)\nPGAC_PATH_PROGS(DBTOEPUB, dbtoepub)\nPGAC_PATH_PROGS(XMLLINT, xmllint)\nPGAC_PATH_PROGS(XSLTPROC, xsltproc)\nPGAC_PATH_PROGS(OSX, [osx sgml2xml sx])\nPGAC_PATH_PROGS(FOP, fop)\n\n#\n# Check for test tools\n#\nif test \"$enable_tap_tests\" = yes; then\n  # Check for necessary modules, unless user has specified the \"prove\" to use;\n  # in that case it's her responsibility to have a working configuration.\n  # (prove might be part of a different Perl installation than perl, eg on\n  # MSys, so the result of AX_PROG_PERL_MODULES could be irrelevant anyway.)\n  if test -z \"$PROVE\"; then\n    AX_PROG_PERL_MODULES(IPC::Run, ,\n      AC_MSG_ERROR([Perl module IPC::Run is required to run TAP tests]))\n  fi\n  # Now make sure we know where prove is\n  PGAC_PATH_PROGS(PROVE, prove)\n  if test -z \"$PROVE\"; then\n    AC_MSG_ERROR([prove not found])\n  fi\nfi\n\n# Thread testing\n\n# We have to run the thread test near the end so we have all our symbols\n# defined.  Cross compiling throws a warning.\n#\nif test \"$enable_thread_safety\" = yes; then\nif test \"$PORTNAME\" != \"win32\"\nthen\nAC_MSG_CHECKING([thread safety of required library functions])\n\n_CFLAGS=\"$CFLAGS\"\n_LIBS=\"$LIBS\"\nCFLAGS=\"$CFLAGS $PTHREAD_CFLAGS -DIN_CONFIGURE\"\nLIBS=\"$LIBS $PTHREAD_LIBS\"\nAC_RUN_IFELSE(\n  [AC_LANG_SOURCE([[#include \"$srcdir/src/test/thread/thread_test.c\"]])],\n  [AC_MSG_RESULT(yes)],\n  [AC_MSG_RESULT(no)\n  AC_MSG_ERROR([thread test program failed\nThis platform is not thread-safe.  Check the file 'config.log' or compile\nand run src/test/thread/thread_test for the exact reason.\nUse --disable-thread-safety to disable thread safety.])],\n  [AC_MSG_RESULT(maybe)\n  AC_MSG_WARN([\n*** Skipping thread test program because of cross-compile build.\n*** Run the program in src/test/thread on the target machine.\n])])\nCFLAGS=\"$_CFLAGS\"\nLIBS=\"$_LIBS\"\nelse\nAC_MSG_WARN([*** skipping thread test on Win32])\nfi\nfi\n\n# If compiler will take -Wl,--as-needed (or various platform-specific\n# spellings thereof) then add that to LDFLAGS.  This is much easier than\n# trying to filter LIBS to the minimum for each executable.\n# On (at least) some Red-Hat-derived systems, this switch breaks linking to\n# libreadline; therefore we postpone testing it until we know what library\n# dependencies readline has.  The test code will try to link with $LIBS.\nif test \"$with_readline\" = yes; then\n  link_test_func=readline\nelse\n  link_test_func=exit\nfi\n\nif test \"$PORTNAME\" = \"darwin\"; then\n  PGAC_PROG_CC_LDFLAGS_OPT([-Wl,-dead_strip_dylibs], $link_test_func)\nelif test \"$PORTNAME\" = \"openbsd\"; then\n  PGAC_PROG_CC_LDFLAGS_OPT([-Wl,-Bdynamic], $link_test_func)\nelse\n  PGAC_PROG_CC_LDFLAGS_OPT([-Wl,--as-needed], $link_test_func)\nfi\n\n# Create compiler version string\nif test x\"$GCC\" = x\"yes\" ; then\n  cc_string=`${CC} --version | sed q`\n  case $cc_string in [[A-Za-z]]*) ;; *) cc_string=\"GCC $cc_string\";; esac\nelif test x\"$SUN_STUDIO_CC\" = x\"yes\" ; then\n  cc_string=`${CC} -V 2>&1 | sed q`\nelse\n  cc_string=$CC\nfi\n\nAC_DEFINE_UNQUOTED(PG_VERSION_STR,\n                   [\"PostgreSQL $PG_VERSION on $host, compiled by $cc_string, `expr $ac_cv_sizeof_void_p \\* 8`-bit\"],\n                   [A string containing the version number, platform, and C compiler])\n\n# Supply a numeric version string for use by 3rd party add-ons\n# awk -F is a regex on some platforms, and not on others, so make \".\" a tab\n[PG_VERSION_NUM=\"`echo \"$PACKAGE_VERSION\" | sed 's/[A-Za-z].*$//' |\ntr '.' '\t' |\n$AWK '{printf \"%d%04d\", $1, $2}'`\"]\nAC_DEFINE_UNQUOTED(PG_VERSION_NUM, $PG_VERSION_NUM, [PostgreSQL version as a number])\nAC_SUBST(PG_VERSION_NUM)\n\n# If we are inserting PG_SYSROOT into CPPFLAGS, do so symbolically not\n# literally, so that it's possible to override it at build time using\n# a command like \"make ... PG_SYSROOT=path\".  This has to be done after\n# we've finished all configure checks that depend on CPPFLAGS.\nif test x\"$PG_SYSROOT\" != x; then\n  CPPFLAGS=`echo \"$CPPFLAGS\" | sed -e \"s| $PG_SYSROOT | \\\\\\$(PG_SYSROOT) |\"`\nfi\nAC_SUBST(PG_SYSROOT)\n\n\n# Begin output steps\n\nAC_MSG_NOTICE([using compiler=$cc_string])\nAC_MSG_NOTICE([using CFLAGS=$CFLAGS])\nAC_MSG_NOTICE([using CPPFLAGS=$CPPFLAGS])\nAC_MSG_NOTICE([using LDFLAGS=$LDFLAGS])\n\n# prepare build tree if outside source tree\n# Note 1: test -ef might not exist, but it's more reliable than `pwd`.\n# Note 2: /bin/pwd might be better than shell's built-in at getting\n#         a symlink-free name.\nif ( test \"$srcdir\" -ef . ) >/dev/null 2>&1 || test \"`cd $srcdir && /bin/pwd`\" = \"`/bin/pwd`\"; then\n  vpath_build=no\nelse\n  vpath_build=yes\n  if test \"$no_create\" != yes; then\n    _AS_ECHO_N([preparing build tree... ])\n    pgac_abs_top_srcdir=`cd \"$srcdir\" && pwd`\n    $SHELL \"$ac_aux_dir/prep_buildtree\" \"$pgac_abs_top_srcdir\" \".\" \\\n      || AC_MSG_ERROR(failed)\n    AC_MSG_RESULT(done)\n  fi\nfi\nAC_SUBST(vpath_build)\n\n\nAC_CONFIG_FILES([GNUmakefile src/Makefile.global])\n\nAC_CONFIG_LINKS([\n  src/backend/port/dynloader.c:src/backend/port/dynloader/${template}.c\n  src/backend/port/pg_sema.c:${SEMA_IMPLEMENTATION}\n  src/backend/port/pg_shmem.c:${SHMEM_IMPLEMENTATION}\n  src/include/dynloader.h:src/backend/port/dynloader/${template}.h\n  src/include/pg_config_os.h:src/include/port/${template}.h\n  src/Makefile.port:src/makefiles/Makefile.${template}\n])\n\nif test \"$PORTNAME\" = \"win32\"; then\nAC_CONFIG_COMMANDS([check_win32_symlinks],[\n# Links sometimes fail undetected on Mingw -\n# so here we detect it and warn the user\nfor FILE in $CONFIG_LINKS\n do\n\t# test -e works for symlinks in the MinGW console\n\ttest -e `expr \"$FILE\" : '\\([[^:]]*\\)'` || AC_MSG_WARN([*** link for $FILE -- please fix by hand])\n done\n])\nfi\n\nAC_CONFIG_HEADERS([src/include/pg_config.h],\n[\n# Update timestamp for pg_config.h (see Makefile.global)\necho >src/include/stamp-h\n])\n\nAC_CONFIG_HEADERS([src/include/pg_config_ext.h],\n[\n# Update timestamp for pg_config_ext.h (see Makefile.global)\necho >src/include/stamp-ext-h\n])\n\nAC_CONFIG_HEADERS([src/interfaces/ecpg/include/ecpg_config.h],\n                  [echo >src/interfaces/ecpg/include/stamp-h])\n\nAC_OUTPUT\n",
        "/tmp/vanessa/spack-stage/spack-stage-postgresql-10.7-gyj6nqg7vr5w65ig6ixyhswgwynvijiu/spack-src/src/include/pg_config.h.win32": "/* src/include/pg_config.h.  Generated by configure.  */\n/* src/include/pg_config.h.in.  Generated from configure.in by autoheader.  */\n\n/* This file is generated from MingW ./configure, and with the following\n * changes to be valid for Visual C++ (and compatible):\n *\n * HAVE_CBRT, HAVE_FUNCNAME_FUNC, HAVE_GETOPT, HAVE_GETOPT_H, HAVE_INTTYPES_H,\n * HAVE_GETOPT_LONG, HAVE_LOCALE_T, HAVE_RINT, HAVE_STRINGS_H, HAVE_STRTOLL,\n * HAVE_STRTOULL, HAVE_STRUCT_OPTION, ENABLE_THREAD_SAFETY,\n * inline, USE_SSE42_CRC32C_WITH_RUNTIME_CHECK\n */\n\n/* Define to the type of arg 1 of 'accept' */\n#define ACCEPT_TYPE_ARG1 unsigned int\n\n/* Define to the type of arg 2 of 'accept' */\n#define ACCEPT_TYPE_ARG2 struct sockaddr *\n\n/* Define to the type of arg 3 of 'accept' */\n#define ACCEPT_TYPE_ARG3 int\n\n/* Define to the return type of 'accept' */\n#define ACCEPT_TYPE_RETURN unsigned int PASCAL\n\n/* The alignment requirement of a `double'. */\n#define ALIGNOF_DOUBLE 8\n\n/* The alignment requirement of a `int'. */\n#define ALIGNOF_INT 4\n\n/* The alignment requirement of a `long'. */\n#define ALIGNOF_LONG 4\n\n/* The alignment requirement of a `long long int'. */\n#define ALIGNOF_LONG_LONG_INT 8\n\n/* The normal alignment of `PG_INT128_TYPE', in bytes. */\n#undef ALIGNOF_PG_INT128_TYPE\n\n/* The alignment requirement of a `short'. */\n#define ALIGNOF_SHORT 2\n\n/* Define to the default TCP port number on which the server listens and to\n   which clients will try to connect. This can be overridden at run-time, but\n   it's convenient if your clients have the right default compiled in.\n   (--with-pgport=PORTNUM) */\n#define DEF_PGPORT 5432\n\n/* Define to the default TCP port number as a string constant. */\n#define DEF_PGPORT_STR \"5432\"\n\n/* Define to nothing if C supports flexible array members, and to 1 if it does\n   not. That way, with a declaration like `struct s { int n; double\n   d[FLEXIBLE_ARRAY_MEMBER]; };', the struct hack can be used with pre-C99\n   compilers. When computing the size of such an object, don't use 'sizeof\n   (struct s)' as it overestimates the size. Use 'offsetof (struct s, d)'\n   instead. Don't use 'offsetof (struct s, d[0])', as this doesn't work with\n   MSVC and with C++ compilers. */\n#define FLEXIBLE_ARRAY_MEMBER\n\n/* Define to 1 if you want National Language Support. (--enable-nls) */\n/* #undef ENABLE_NLS */\n\n/* Define to 1 to build client libraries as thread-safe code.\n   (--enable-thread-safety) */\n#define ENABLE_THREAD_SAFETY 1\n\n/* Define to 1 if gettimeofday() takes only 1 argument. */\n/* #undef GETTIMEOFDAY_1ARG */\n\n#ifdef GETTIMEOFDAY_1ARG\n# define gettimeofday(a,b) gettimeofday(a)\n#endif\n\n/* Define to 1 if you have the `cbrt' function. */\n//#define HAVE_CBRT 1\n\n/* Define to 1 if you have the `class' function. */\n/* #undef HAVE_CLASS */\n\n/* Define to 1 if you have the `clock_gettime' function. */\n/* #undef HAVE_CLOCK_GETTIME */\n\n/* Define to 1 if your compiler handles computed gotos. */\n/* #undef HAVE_COMPUTED_GOTO */\n\n/* Define to 1 if you have the `crypt' function. */\n/* #undef HAVE_CRYPT */\n\n/* Define to 1 if you have the <crypt.h> header file. */\n/* #undef HAVE_CRYPT_H */\n\n/* Define to 1 if you have the declaration of `fdatasync', and to 0 if you\n   don't. */\n#define HAVE_DECL_FDATASYNC 0\n\n/* Define to 1 if you have the declaration of `F_FULLFSYNC', and to 0 if you\n   don't. */\n#define HAVE_DECL_F_FULLFSYNC 0\n\n/* Define to 1 if you have the declaration of `snprintf', and to 0 if you\n   don't. */\n#define HAVE_DECL_SNPRINTF 1\n\n/* Define to 1 if you have the declaration of `strtoll', and to 0 if you\n   don't. */\n#define HAVE_DECL_STRTOLL 1\n\n/* Define to 1 if you have the declaration of `strtoull', and to 0 if you\n   don't. */\n#define HAVE_DECL_STRTOULL 1\n\n/* Define to 1 if you have the declaration of `vsnprintf', and to 0 if you\n   don't. */\n#define HAVE_DECL_VSNPRINTF 1\n\n/* Define to 1 if you have the <dld.h> header file. */\n/* #undef HAVE_DLD_H */\n\n/* Define to 1 if you have the `dlopen' function. */\n/* #undef HAVE_DLOPEN */\n\n/* Define to 1 if you have the <editline/history.h> header file. */\n/* #undef HAVE_EDITLINE_HISTORY_H */\n\n/* Define to 1 if you have the <editline/readline.h> header file. */\n/* #undef HAVE_EDITLINE_READLINE_H */\n\n/* Define to 1 if you have the `fcvt' function. */\n#define HAVE_FCVT 1\n\n/* Define to 1 if you have the `fdatasync' function. */\n/* #undef HAVE_FDATASYNC */\n\n/* Define to 1 if you have finite(). */\n#define HAVE_FINITE 1\n\n/* Define to 1 if you have the `fpclass' function. */\n/* #undef HAVE_FPCLASS */\n\n/* Define to 1 if you have the `fp_class' function. */\n/* #undef HAVE_FP_CLASS */\n\n/* Define to 1 if you have the `fp_class_d' function. */\n/* #undef HAVE_FP_CLASS_D */\n\n/* Define to 1 if you have the <fp_class.h> header file. */\n/* #undef HAVE_FP_CLASS_H */\n\n/* Define to 1 if fseeko (and presumably ftello) exists and is declared. */\n#define HAVE_FSEEKO 1\n\n/* Define to 1 if your compiler understands __func__. */\n//#define HAVE_FUNCNAME__FUNC 1\n\n/* Define to 1 if your compiler understands __FUNCTION__. */\n#define HAVE_FUNCNAME__FUNCTION 1\n\n/* Define to 1 if you have getaddrinfo(). */\n/* #undef HAVE_GETADDRINFO */\n\n/* Define to 1 if you have the `gethostbyname_r' function. */\n/* #undef HAVE_GETHOSTBYNAME_R */\n\n/* Define to 1 if you have the `getopt' function. */\n//#define HAVE_GETOPT 1\n\n/* Define to 1 if you have the <getopt.h> header file. */\n//#define HAVE_GETOPT_H 1\n\n/* Define to 1 if you have the `getopt_long' function. */\n//#define HAVE_GETOPT_LONG 1\n\n/* Define to 1 if you have the `getpeereid' function. */\n/* #undef HAVE_GETPEEREID */\n\n/* Define to 1 if you have the `getpwuid_r' function. */\n/* #undef HAVE_GETPWUID_R */\n\n/* Define to 1 if you have the `getrusage' function. */\n/* #undef HAVE_GETRUSAGE */\n\n/* Define to 1 if you have the <history.h> header file. */\n/* #undef HAVE_HISTORY_H */\n\n/* Define to 1 if you have the <ieeefp.h> header file. */\n/* #undef HAVE_IEEEFP_H */\n\n/* Define to 1 if you have the `inet_aton' function. */\n/* #undef HAVE_INET_ATON */\n\n/* Define to 1 if the system has the type `int64'. */\n/* #undef HAVE_INT64 */\n\n/* Define to 1 if the system has the type `int8'. */\n/* #undef HAVE_INT8 */\n\n/* Define to 1 if you have the <inttypes.h> header file. */\n//#define HAVE_INTTYPES_H 1\n\n/* Define to 1 if you have the global variable 'int timezone'. */\n#define HAVE_INT_TIMEZONE 1\n\n/* Define to 1 if you have support for IPv6. */\n#define HAVE_IPV6 1\n\n/* Define to 1 if you have isinf(). */\n#define HAVE_ISINF 1\n\n/* Define to 1 if you have the <langinfo.h> header file. */\n/* #undef HAVE_LANGINFO_H */\n\n/* Define to 1 if you have the <ldap.h> header file. */\n/* #undef HAVE_LDAP_H */\n\n/* Define to 1 if you have the `crypto' library (-lcrypto). */\n/* #undef HAVE_LIBCRYPTO */\n\n/* Define to 1 if you have the `ldap' library (-lldap). */\n/* #undef HAVE_LIBLDAP */\n\n/* Define to 1 if you have the `pam' library (-lpam). */\n/* #undef HAVE_LIBPAM */\n\n/* Define if you have a function readline library */\n/* #undef HAVE_LIBREADLINE */\n\n/* Define to 1 if you have the `ssl' library (-lssl). */\n/* #undef HAVE_LIBSSL */\n\n/* Define to 1 if you have the `wldap32' library (-lwldap32). */\n/* #undef HAVE_LIBWLDAP32 */\n\n/* Define to 1 if you have the `z' library (-lz). */\n/* #undef HAVE_LIBZ */\n\n/* Define to 1 if the system has the type `locale_t'. */\n#define HAVE_LOCALE_T 1\n\n/* Define to 1 if `long int' works and is 64 bits. */\n/* #undef HAVE_LONG_INT_64 */\n\n/* Define to 1 if the system has the type `long long int'. */\n#if (_MSC_VER > 1200)\n#define HAVE_LONG_LONG_INT 1\n#endif\n\n/* Define to 1 if `long long int' works and is 64 bits. */\n#if (_MSC_VER > 1200)\n#define HAVE_LONG_LONG_INT_64 1\n#endif\n\n/* Define to 1 if you have the `mbstowcs_l' function. */\n#define HAVE_MBSTOWCS_L 1\n\n/* Define to 1 if you have the `memmove' function. */\n#define HAVE_MEMMOVE 1\n\n/* Define to 1 if you have the <memory.h> header file. */\n#define HAVE_MEMORY_H 1\n\n/* Define to 1 if the system has the type `MINIDUMP_TYPE'. */\n#define HAVE_MINIDUMP_TYPE 1\n\n/* Define to 1 if you have the `mkdtemp' function. */\n/* #undef HAVE_MKDTEMP */\n\n/* Define to 1 if you have the <netinet/tcp.h> header file. */\n/* #undef HAVE_NETINET_TCP_H */\n\n/* Define to 1 if you have the <pam/pam_appl.h> header file. */\n/* #undef HAVE_PAM_PAM_APPL_H */\n\n/* Define to 1 if you have the `poll' function. */\n/* #undef HAVE_POLL */\n\n/* Define to 1 if you have the <poll.h> header file. */\n/* #undef HAVE_POLL_H */\n\n/* Define to 1 if you have the `posix_fallocate' function. */\n/* #undef HAVE_POSIX_FALLOCATE */\n\n/* Define to 1 if you have the `pstat' function. */\n/* #undef HAVE_PSTAT */\n\n/* Define to 1 if the PS_STRINGS thing exists. */\n/* #undef HAVE_PS_STRINGS */\n\n/* Define to 1 if you have the `random' function. */\n/* #undef HAVE_RANDOM */\n\n/* Define to 1 if you have the <readline.h> header file. */\n/* #undef HAVE_READLINE_H */\n\n/* Define to 1 if you have the <readline/history.h> header file. */\n/* #undef HAVE_READLINE_HISTORY_H */\n\n/* Define to 1 if you have the <readline/readline.h> header file. */\n/* #undef HAVE_READLINE_READLINE_H */\n\n/* Define to 1 if you have the `readlink' function. */\n/* #undef HAVE_READLINK */\n\n/* Define to 1 if you have the `rint' function. */\n#if (_MSC_VER >= 1800)\n#define HAVE_RINT 1\n#endif\n\n\n/* Define to 1 if you have the global variable\n   'rl_completion_append_character'. */\n/* #undef HAVE_RL_COMPLETION_APPEND_CHARACTER */\n\n/* Define to 1 if you have the `rl_completion_matches' function. */\n/* #undef HAVE_RL_COMPLETION_MATCHES */\n\n/* Define to 1 if you have the `rl_filename_completion_function' function. */\n/* #undef HAVE_RL_FILENAME_COMPLETION_FUNCTION */\n\n/* Define to 1 if you have the <security/pam_appl.h> header file. */\n/* #undef HAVE_SECURITY_PAM_APPL_H */\n\n/* Define to 1 if you have the `setproctitle' function. */\n/* #undef HAVE_SETPROCTITLE */\n\n/* Define to 1 if you have the `setsid' function. */\n/* #undef HAVE_SETSID */\n\n/* Define to 1 if you have the `snprintf' function. */\n/* #undef HAVE_SNPRINTF */\n\n/* Define to 1 if you have spinlocks. */\n#define HAVE_SPINLOCKS 1\n\n/* Define to 1 if you have atomics. */\n#define HAVE_ATOMICS 1\n\n/* Define to 1 if you have the `srandom' function. */\n/* #undef HAVE_SRANDOM */\n\n/* Define to 1 if you have the `SSL_get_current_compression' function. */\n#define HAVE_SSL_GET_CURRENT_COMPRESSION 1\n\n/* Define to 1 if you have the <stdint.h> header file. */\n/* #undef HAVE_STDINT_H */\n\n/* Define to 1 if you have the <stdlib.h> header file. */\n#define HAVE_STDLIB_H 1\n\n/* Define to 1 if you have the `strerror' function. */\n#ifndef HAVE_STRERROR\n#define HAVE_STRERROR 1\n#endif\n\n/* Define to 1 if you have the `strerror_r' function. */\n/* #undef HAVE_STRERROR_R */\n\n/* Define to 1 if you have the <strings.h> header file. */\n/*#define HAVE_STRINGS_H 1 */\n\n/* Define to 1 if you have the <string.h> header file. */\n#define HAVE_STRING_H 1\n\n/* Define to use have a strong random number source */\n#define HAVE_STRONG_RANDOM 1\n\n/* Define to 1 if you have the `strtoll' function. */\n#ifdef HAVE_LONG_LONG_INT_64\n#define HAVE_STRTOLL 1\n/* Before VS2013, use Microsoft's nonstandard equivalent function */\n#if (_MSC_VER < 1800)\n#define strtoll _strtoi64\n#endif\n#endif\n\n/* Define to 1 if you have the `strtoull' function. */\n#ifdef HAVE_LONG_LONG_INT_64\n#define HAVE_STRTOULL 1\n/* Before VS2013, use Microsoft's nonstandard equivalent function */\n#if (_MSC_VER < 1800)\n#define strtoull _strtoui64\n#endif\n#endif\n\n/* Define to 1 if the system has the type `struct addrinfo'. */\n#if (_MSC_VER > 1200)\n#define HAVE_STRUCT_ADDRINFO 1\n#endif\n\n/* Define to 1 if the system has the type `struct cmsgcred'. */\n/* #undef HAVE_STRUCT_CMSGCRED */\n\n/* Define to 1 if the system has the type `struct option'. */\n//#define HAVE_STRUCT_OPTION 1\n\n/* Define to 1 if `sa_len' is member of `struct sockaddr'. */\n/* #undef HAVE_STRUCT_SOCKADDR_SA_LEN */\n\n/* Define to 1 if the system has the type `struct sockaddr_storage'. */\n#if (_MSC_VER > 1200)\n#define HAVE_STRUCT_SOCKADDR_STORAGE 1\n#endif\n\n/* Define to 1 if `ss_family' is member of `struct sockaddr_storage'. */\n#if (_MSC_VER > 1200)\n#define HAVE_STRUCT_SOCKADDR_STORAGE_SS_FAMILY 1\n#endif\n\n/* Define to 1 if `ss_len' is member of `struct sockaddr_storage'. */\n/* #undef HAVE_STRUCT_SOCKADDR_STORAGE_SS_LEN */\n\n/* Define to 1 if `__ss_family' is member of `struct sockaddr_storage'. */\n/* #undef HAVE_STRUCT_SOCKADDR_STORAGE___SS_FAMILY */\n\n/* Define to 1 if `__ss_len' is member of `struct sockaddr_storage'. */\n/* #undef HAVE_STRUCT_SOCKADDR_STORAGE___SS_LEN */\n\n/* Define to 1 if the system has the type `struct sockaddr_un'. */\n/* #undef HAVE_STRUCT_SOCKADDR_UN */\n\n/* Define to 1 if `tm_zone' is member of `struct tm'. */\n/* #undef HAVE_STRUCT_TM_TM_ZONE */\n\n/* Define to 1 if you have the `symlink' function. */\n#define HAVE_SYMLINK 1\n\n/* Define to 1 if you have the `sync_file_range' function. */\n/* #undef HAVE_SYNC_FILE_RANGE */\n\n/* Define to 1 if you have the `sysconf' function. */\n/* #undef HAVE_SYSCONF */\n\n/* Define to 1 if you have the syslog interface. */\n/* #undef HAVE_SYSLOG */\n\n/* Define to 1 if you have the <sys/ipc.h> header file. */\n/* #undef HAVE_SYS_IPC_H */\n\n/* Define to 1 if you have the <sys/pstat.h> header file. */\n/* #undef HAVE_SYS_PSTAT_H */\n\n/* Define to 1 if you have the <sys/select.h> header file. */\n/* #undef HAVE_SYS_SELECT_H */\n\n/* Define to 1 if you have the <sys/sem.h> header file. */\n/* #undef HAVE_SYS_SEM_H */\n\n/* Define to 1 if you have the <sys/shm.h> header file. */\n/* #undef HAVE_SYS_SHM_H */\n\n/* Define to 1 if you have the <sys/stat.h> header file. */\n#define HAVE_SYS_STAT_H 1\n\n/* Define to 1 if you have the <sys/types.h> header file. */\n#define HAVE_SYS_TYPES_H 1\n\n/* Define to 1 if you have the <sys/ucred.h> header file. */\n/* #undef HAVE_SYS_UCRED_H */\n\n/* Define to 1 if you have the <sys/un.h> header file. */\n/* #undef HAVE_SYS_UN_H */\n\n/* Define to 1 if you have the <termios.h> header file. */\n/* #undef HAVE_TERMIOS_H */\n\n/* Define to 1 if your `struct tm' has `tm_zone'. Deprecated, use\n   `HAVE_STRUCT_TM_TM_ZONE' instead. */\n/* #undef HAVE_TM_ZONE */\n\n/* Define to 1 if you have the `towlower' function. */\n#define HAVE_TOWLOWER 1\n\n/* Define to 1 if your compiler understands `typeof' or something similar. */\n/* #undef HAVE_TYPEOF */\n\n/* Define to 1 if you have the external array `tzname'. */\n/* #undef HAVE_TZNAME */\n\n/* Define to 1 if the system has the type `uint64'. */\n/* #undef HAVE_UINT64 */\n\n/* Define to 1 if the system has the type `uint8'. */\n/* #undef HAVE_UINT8 */\n\n/* Define to 1 if the system has the type `union semun'. */\n/* #undef HAVE_UNION_SEMUN */\n\n/* Define to 1 if you have the <unistd.h> header file. */\n#define HAVE_UNISTD_H 1\n\n/* Define to 1 if you have unix sockets. */\n/* #undef HAVE_UNIX_SOCKETS */\n\n/* Define to 1 if you have the `unsetenv' function. */\n/* #undef HAVE_UNSETENV */\n\n/* Define to 1 if you have the `uselocale' function. */\n/* #undef HAVE_USELOCALE */\n\n/* Define to 1 if you have the `utime' function. */\n#define HAVE_UTIME 1\n\n/* Define to 1 if you have the `utimes' function. */\n/* #undef HAVE_UTIMES */\n\n/* Define to 1 if you have the <utime.h> header file. */\n#define HAVE_UTIME_H 1\n\n/* Define to 1 if you have the `vsnprintf' function. */\n#define HAVE_VSNPRINTF 1\n\n/* Define to 1 if you have the <wchar.h> header file. */\n#define HAVE_WCHAR_H 1\n\n/* Define to 1 if you have the `wcstombs' function. */\n#define HAVE_WCSTOMBS 1\n\n/* Define to 1 if you have the `wcstombs_l' function. */\n#define HAVE_WCSTOMBS_L 1\n\n/* Define to 1 if you have the <wctype.h> header file. */\n#define HAVE_WCTYPE_H 1\n\n/* Define to 1 if you have the <winldap.h> header file. */\n/* #undef HAVE_WINLDAP_H */\n\n/* Define to 1 if your compiler understands __builtin_bswap32. */\n/* #undef HAVE__BUILTIN_BSWAP32 */\n\n/* Define to 1 if your compiler understands __builtin_bswap64. */\n/* #undef HAVE__BUILTIN_BSWAP64 */\n\n/* Define to 1 if your compiler understands __builtin_constant_p. */\n/* #undef HAVE__BUILTIN_CONSTANT_P */\n\n/* Define to 1 if your compiler understands __builtin_types_compatible_p. */\n/* #undef HAVE__BUILTIN_TYPES_COMPATIBLE_P */\n\n/* Define to 1 if your compiler understands __builtin_unreachable. */\n/* #undef HAVE__BUILTIN_UNREACHABLE */\n\n/* Define to 1 if you have the `_configthreadlocale' function. */\n#define HAVE__CONFIGTHREADLOCALE 1\n\n/* Define to 1 if you have __cpuid. */\n#define HAVE__CPUID 1\n\n/* Define to 1 if you have __get_cpuid. */\n#undef HAVE__GET_CPUID\n\n/* Define to 1 if your compiler understands _Static_assert. */\n/* #undef HAVE__STATIC_ASSERT */\n\n/* Define to 1 if your compiler understands __VA_ARGS__ in macros. */\n#define HAVE__VA_ARGS 1\n\n/* Define to the appropriate snprintf length modifier for 64-bit ints. */\n#define INT64_MODIFIER \"ll\"\n\n/* Define to 1 if `locale_t' requires <xlocale.h>. */\n/* #undef LOCALE_T_IN_XLOCALE */\n\n/* Define to the location of locale files. */\n/* #undef LOCALEDIR */\n\n/* Define as the maximum alignment requirement of any C data type. */\n#define MAXIMUM_ALIGNOF 8\n\n/* Define bytes to use libc memset(). */\n#define MEMSET_LOOP_LIMIT 1024\n\n/* Define to the address where bug reports for this package should be sent. */\n#define PACKAGE_BUGREPORT \"pgsql-bugs@postgresql.org\"\n\n/* Define to the full name of this package. */\n#define PACKAGE_NAME \"PostgreSQL\"\n\n/* Define to the full name and version of this package. */\n#define PACKAGE_STRING \"PostgreSQL 10.7\"\n\n/* Define to the version of this package. */\n#define PACKAGE_VERSION \"10.7\"\n\n/* Define to the name of a signed 128-bit integer type. */\n#undef PG_INT128_TYPE\n\n/* Define to the name of a signed 64-bit integer type. */\n#define PG_INT64_TYPE long long int\n\n/* PostgreSQL version as a string */\n#define PG_VERSION \"10.7\"\n\n/* PostgreSQL version as a number */\n#define PG_VERSION_NUM 100007\n\n/* Define to the one symbol short name of this package. */\n#define PACKAGE_TARNAME \"postgresql\"\n\n/* Define to the name of the default PostgreSQL service principal in Kerberos.\n   (--with-krb-srvnam=NAME) */\n#define PG_KRB_SRVNAM \"postgres\"\n\n/* A string containing the version number, platform, and C compiler */\n#define PG_VERSION_STR \"Uninitialized version string (win32)\"\n\n/* The size of `long', as computed by sizeof. */\n#define SIZEOF_LONG 4\n\n/* The size of `size_t', as computed by sizeof. */\n#ifndef _WIN64\n#define SIZEOF_SIZE_T 4\n#else\n#define SIZEOF_SIZE_T 8\n#endif\n\n/* The size of `void *', as computed by sizeof. */\n#ifndef _WIN64\n#define SIZEOF_VOID_P 4\n#else\n#define SIZEOF_VOID_P 8\n#endif\n\n/* Define to 1 if you have the ANSI C header files. */\n#define STDC_HEADERS 1\n\n/* Define to 1 if strerror_r() returns int. */\n/* #undef STRERROR_R_INT */\n\n/* Define to 1 if your <sys/time.h> declares `struct tm'. */\n/* #undef TM_IN_SYS_TIME */\n\n/* Define to 1 to build with assertion checks. (--enable-cassert) */\n/* #undef USE_ASSERT_CHECKING */\n\n/* Define to 1 to build with Bonjour support. (--with-bonjour) */\n/* #undef USE_BONJOUR */\n\n/* Define to 1 to build with BSD Authentication support. (--with-bsd-auth) */\n/* #undef USE_BSD_AUTH */\n\n/* Define to use /dev/urandom for random number generation */\n/* #undef USE_DEV_URANDOM */\n\n/* Define to 1 to build with LDAP support. (--with-ldap) */\n/* #undef USE_LDAP */\n\n/* Define to select named POSIX semaphores. */\n/* #undef USE_NAMED_POSIX_SEMAPHORES */\n\n/* Define to build with OpenSSL support. (--with-openssl) */\n/* #undef USE_OPENSSL */\n\n/* Define to use OpenSSL for random number generation */\n/* #undef USE_OPENSSL_RANDOM */\n\n/* Define to 1 to build with PAM support. (--with-pam) */\n/* #undef USE_PAM */\n\n/* Use replacement snprintf() functions. */\n#define USE_REPL_SNPRINTF 1\n\n/* Define to 1 to use software CRC-32C implementation (slicing-by-8). */\n#if (_MSC_VER < 1500)\n#define USE_SLICING_BY_8_CRC32C 1\n#endif\n\n/* Define to 1 use Intel SSE 4.2 CRC instructions. */\n/* #undef USE_SSE42_CRC32C */\n\n/* Define to 1 to use Intel SSE 4.2 CRC instructions with a runtime check. */\n#if (_MSC_VER >= 1500)\n#define USE_SSE42_CRC32C_WITH_RUNTIME_CHECK\n#endif\n\n/* Define to select SysV-style semaphores. */\n/* #undef USE_SYSV_SEMAPHORES */\n\n/* Define to select SysV-style shared memory. */\n#define USE_SYSV_SHARED_MEMORY 1\n\n/* Define to select unnamed POSIX semaphores. */\n/* #undef USE_UNNAMED_POSIX_SEMAPHORES */\n\n/* Define to use native Windows API for random number generation */\n#define USE_WIN32_RANDOM 1\n\n/* Define to select Win32-style semaphores. */\n#define USE_WIN32_SEMAPHORES 1\n\n/* Define to 1 if `wcstombs_l' requires <xlocale.h>. */\n/* #undef WCSTOMBS_L_IN_XLOCALE */\n\n/* Number of bits in a file offset, on hosts where this is settable. */\n/* #undef _FILE_OFFSET_BITS */\n\n/* Define to 1 to make fseeko visible on some hosts (e.g. glibc 2.2). */\n/* #undef _LARGEFILE_SOURCE */\n\n/* Define for large files, on AIX-style hosts. */\n/* #undef _LARGE_FILES */\n\n/* Define to `__inline__' or `__inline' if that's what the C compiler\n   calls it, or to nothing if 'inline' is not supported under any name.  */\n#ifndef __cplusplus\n#define inline __inline\n#endif\n\n/* Define to empty if the C compiler does not understand signed types. */\n/* #undef signed */\n\n/* Define to how the compiler spells `typeof'. */\n/* #undef typeof */\n",
        "/tmp/vanessa/spack-stage/spack-stage-postgresql-10.7-gyj6nqg7vr5w65ig6ixyhswgwynvijiu/spack-src/src/include/pg_config.h.in": "/* src/include/pg_config.h.in.  Generated from configure.in by autoheader.  */\n\n/* Define to the type of arg 1 of 'accept' */\n#undef ACCEPT_TYPE_ARG1\n\n/* Define to the type of arg 2 of 'accept' */\n#undef ACCEPT_TYPE_ARG2\n\n/* Define to the type of arg 3 of 'accept' */\n#undef ACCEPT_TYPE_ARG3\n\n/* Define to the return type of 'accept' */\n#undef ACCEPT_TYPE_RETURN\n\n/* Define if building universal (internal helper macro) */\n#undef AC_APPLE_UNIVERSAL_BUILD\n\n/* The normal alignment of `double', in bytes. */\n#undef ALIGNOF_DOUBLE\n\n/* The normal alignment of `int', in bytes. */\n#undef ALIGNOF_INT\n\n/* The normal alignment of `long', in bytes. */\n#undef ALIGNOF_LONG\n\n/* The normal alignment of `long long int', in bytes. */\n#undef ALIGNOF_LONG_LONG_INT\n\n/* The normal alignment of `PG_INT128_TYPE', in bytes. */\n#undef ALIGNOF_PG_INT128_TYPE\n\n/* The normal alignment of `short', in bytes. */\n#undef ALIGNOF_SHORT\n\n/* Size of a disk block --- this also limits the size of a tuple. You can set\n   it bigger if you need bigger tuples (although TOAST should reduce the need\n   to have large tuples, since fields can be spread across multiple tuples).\n   BLCKSZ must be a power of 2. The maximum possible value of BLCKSZ is\n   currently 2^15 (32768). This is determined by the 15-bit widths of the\n   lp_off and lp_len fields in ItemIdData (see include/storage/itemid.h).\n   Changing BLCKSZ requires an initdb. */\n#undef BLCKSZ\n\n/* Define to the default TCP port number on which the server listens and to\n   which clients will try to connect. This can be overridden at run-time, but\n   it's convenient if your clients have the right default compiled in.\n   (--with-pgport=PORTNUM) */\n#undef DEF_PGPORT\n\n/* Define to the default TCP port number as a string constant. */\n#undef DEF_PGPORT_STR\n\n/* Define to build with GSSAPI support. (--with-gssapi) */\n#undef ENABLE_GSS\n\n/* Define to 1 if you want National Language Support. (--enable-nls) */\n#undef ENABLE_NLS\n\n/* Define to 1 to build client libraries as thread-safe code.\n   (--enable-thread-safety) */\n#undef ENABLE_THREAD_SAFETY\n\n/* Define to nothing if C supports flexible array members, and to 1 if it does\n   not. That way, with a declaration like `struct s { int n; double\n   d[FLEXIBLE_ARRAY_MEMBER]; };', the struct hack can be used with pre-C99\n   compilers. When computing the size of such an object, don't use 'sizeof\n   (struct s)' as it overestimates the size. Use 'offsetof (struct s, d)'\n   instead. Don't use 'offsetof (struct s, d[0])', as this doesn't work with\n   MSVC and with C++ compilers. */\n#undef FLEXIBLE_ARRAY_MEMBER\n\n/* float4 values are passed by value if 'true', by reference if 'false' */\n#undef FLOAT4PASSBYVAL\n\n/* float8, int8, and related values are passed by value if 'true', by\n   reference if 'false' */\n#undef FLOAT8PASSBYVAL\n\n/* Define to 1 if gettimeofday() takes only 1 argument. */\n#undef GETTIMEOFDAY_1ARG\n\n#ifdef GETTIMEOFDAY_1ARG\n# define gettimeofday(a,b) gettimeofday(a)\n#endif\n\n/* Define to 1 if you have the `append_history' function. */\n#undef HAVE_APPEND_HISTORY\n\n/* Define to 1 if you have the `ASN1_STRING_get0_data' function. */\n#undef HAVE_ASN1_STRING_GET0_DATA\n\n/* Define to 1 if you want to use atomics if available. */\n#undef HAVE_ATOMICS\n\n/* Define to 1 if you have the <atomic.h> header file. */\n#undef HAVE_ATOMIC_H\n\n/* Define to 1 if you have the `BIO_get_data' function. */\n#undef HAVE_BIO_GET_DATA\n\n/* Define to 1 if you have the `BIO_meth_new' function. */\n#undef HAVE_BIO_METH_NEW\n\n/* Define to 1 if you have the `cbrt' function. */\n#undef HAVE_CBRT\n\n/* Define to 1 if you have the `class' function. */\n#undef HAVE_CLASS\n\n/* Define to 1 if you have the `clock_gettime' function. */\n#undef HAVE_CLOCK_GETTIME\n\n/* Define to 1 if your compiler handles computed gotos. */\n#undef HAVE_COMPUTED_GOTO\n\n/* Define to 1 if you have the <crtdefs.h> header file. */\n#undef HAVE_CRTDEFS_H\n\n/* Define to 1 if you have the `crypt' function. */\n#undef HAVE_CRYPT\n\n/* Define to 1 if you have the `CRYPTO_lock' function. */\n#undef HAVE_CRYPTO_LOCK\n\n/* Define to 1 if you have the <crypt.h> header file. */\n#undef HAVE_CRYPT_H\n\n/* Define to 1 if you have the declaration of `fdatasync', and to 0 if you\n   don't. */\n#undef HAVE_DECL_FDATASYNC\n\n/* Define to 1 if you have the declaration of `F_FULLFSYNC', and to 0 if you\n   don't. */\n#undef HAVE_DECL_F_FULLFSYNC\n\n/* Define to 1 if you have the declaration of `posix_fadvise', and to 0 if you\n   don't. */\n#undef HAVE_DECL_POSIX_FADVISE\n\n/* Define to 1 if you have the declaration of `snprintf', and to 0 if you\n   don't. */\n#undef HAVE_DECL_SNPRINTF\n\n/* Define to 1 if you have the declaration of `strlcat', and to 0 if you\n   don't. */\n#undef HAVE_DECL_STRLCAT\n\n/* Define to 1 if you have the declaration of `strlcpy', and to 0 if you\n   don't. */\n#undef HAVE_DECL_STRLCPY\n\n/* Define to 1 if you have the declaration of `strtoll', and to 0 if you\n   don't. */\n#undef HAVE_DECL_STRTOLL\n\n/* Define to 1 if you have the declaration of `strtoull', and to 0 if you\n   don't. */\n#undef HAVE_DECL_STRTOULL\n\n/* Define to 1 if you have the declaration of `sys_siglist', and to 0 if you\n   don't. */\n#undef HAVE_DECL_SYS_SIGLIST\n\n/* Define to 1 if you have the declaration of `vsnprintf', and to 0 if you\n   don't. */\n#undef HAVE_DECL_VSNPRINTF\n\n/* Define to 1 if you have the <dld.h> header file. */\n#undef HAVE_DLD_H\n\n/* Define to 1 if you have the `dlopen' function. */\n#undef HAVE_DLOPEN\n\n/* Define to 1 if you have the <editline/history.h> header file. */\n#undef HAVE_EDITLINE_HISTORY_H\n\n/* Define to 1 if you have the <editline/readline.h> header file. */\n#undef HAVE_EDITLINE_READLINE_H\n\n/* Define to 1 if you have the `fdatasync' function. */\n#undef HAVE_FDATASYNC\n\n/* Define to 1 if you have the `fls' function. */\n#undef HAVE_FLS\n\n/* Define to 1 if you have the `fpclass' function. */\n#undef HAVE_FPCLASS\n\n/* Define to 1 if you have the `fp_class' function. */\n#undef HAVE_FP_CLASS\n\n/* Define to 1 if you have the `fp_class_d' function. */\n#undef HAVE_FP_CLASS_D\n\n/* Define to 1 if you have the <fp_class.h> header file. */\n#undef HAVE_FP_CLASS_H\n\n/* Define to 1 if fseeko (and presumably ftello) exists and is declared. */\n#undef HAVE_FSEEKO\n\n/* Define to 1 if your compiler understands __func__. */\n#undef HAVE_FUNCNAME__FUNC\n\n/* Define to 1 if your compiler understands __FUNCTION__. */\n#undef HAVE_FUNCNAME__FUNCTION\n\n/* Define to 1 if you have __atomic_compare_exchange_n(int *, int *, int). */\n#undef HAVE_GCC__ATOMIC_INT32_CAS\n\n/* Define to 1 if you have __atomic_compare_exchange_n(int64 *, int *, int64).\n   */\n#undef HAVE_GCC__ATOMIC_INT64_CAS\n\n/* Define to 1 if you have __sync_lock_test_and_set(char *) and friends. */\n#undef HAVE_GCC__SYNC_CHAR_TAS\n\n/* Define to 1 if you have __sync_val_compare_and_swap(int *, int, int). */\n#undef HAVE_GCC__SYNC_INT32_CAS\n\n/* Define to 1 if you have __sync_lock_test_and_set(int *) and friends. */\n#undef HAVE_GCC__SYNC_INT32_TAS\n\n/* Define to 1 if you have __sync_val_compare_and_swap(int64 *, int64, int64).\n   */\n#undef HAVE_GCC__SYNC_INT64_CAS\n\n/* Define to 1 if you have the `getaddrinfo' function. */\n#undef HAVE_GETADDRINFO\n\n/* Define to 1 if you have the `gethostbyname_r' function. */\n#undef HAVE_GETHOSTBYNAME_R\n\n/* Define to 1 if you have the `getifaddrs' function. */\n#undef HAVE_GETIFADDRS\n\n/* Define to 1 if you have the `getopt' function. */\n#undef HAVE_GETOPT\n\n/* Define to 1 if you have the <getopt.h> header file. */\n#undef HAVE_GETOPT_H\n\n/* Define to 1 if you have the `getopt_long' function. */\n#undef HAVE_GETOPT_LONG\n\n/* Define to 1 if you have the `getpeereid' function. */\n#undef HAVE_GETPEEREID\n\n/* Define to 1 if you have the `getpeerucred' function. */\n#undef HAVE_GETPEERUCRED\n\n/* Define to 1 if you have the `getpwuid_r' function. */\n#undef HAVE_GETPWUID_R\n\n/* Define to 1 if you have the `getrlimit' function. */\n#undef HAVE_GETRLIMIT\n\n/* Define to 1 if you have the `getrusage' function. */\n#undef HAVE_GETRUSAGE\n\n/* Define to 1 if you have the `gettimeofday' function. */\n#undef HAVE_GETTIMEOFDAY\n\n/* Define to 1 if you have the <gssapi/gssapi.h> header file. */\n#undef HAVE_GSSAPI_GSSAPI_H\n\n/* Define to 1 if you have the <gssapi.h> header file. */\n#undef HAVE_GSSAPI_H\n\n/* Define to 1 if you have the <history.h> header file. */\n#undef HAVE_HISTORY_H\n\n/* Define to 1 if you have the `history_truncate_file' function. */\n#undef HAVE_HISTORY_TRUNCATE_FILE\n\n/* Define to 1 if you have the <ieeefp.h> header file. */\n#undef HAVE_IEEEFP_H\n\n/* Define to 1 if you have the <ifaddrs.h> header file. */\n#undef HAVE_IFADDRS_H\n\n/* Define to 1 if you have the `inet_aton' function. */\n#undef HAVE_INET_ATON\n\n/* Define to 1 if the system has the type `int64'. */\n#undef HAVE_INT64\n\n/* Define to 1 if the system has the type `int8'. */\n#undef HAVE_INT8\n\n/* Define to 1 if the system has the type `intptr_t'. */\n#undef HAVE_INTPTR_T\n\n/* Define to 1 if you have the <inttypes.h> header file. */\n#undef HAVE_INTTYPES_H\n\n/* Define to 1 if you have the global variable 'int opterr'. */\n#undef HAVE_INT_OPTERR\n\n/* Define to 1 if you have the global variable 'int optreset'. */\n#undef HAVE_INT_OPTRESET\n\n/* Define to 1 if you have the global variable 'int timezone'. */\n#undef HAVE_INT_TIMEZONE\n\n/* Define to 1 if you have support for IPv6. */\n#undef HAVE_IPV6\n\n/* Define to 1 if you have isinf(). */\n#undef HAVE_ISINF\n\n/* Define to 1 if you have the <langinfo.h> header file. */\n#undef HAVE_LANGINFO_H\n\n/* Define to 1 if you have the <ldap.h> header file. */\n#undef HAVE_LDAP_H\n\n/* Define to 1 if you have the `crypto' library (-lcrypto). */\n#undef HAVE_LIBCRYPTO\n\n/* Define to 1 if you have the `ldap' library (-lldap). */\n#undef HAVE_LIBLDAP\n\n/* Define to 1 if you have the `ldap_r' library (-lldap_r). */\n#undef HAVE_LIBLDAP_R\n\n/* Define to 1 if you have the `m' library (-lm). */\n#undef HAVE_LIBM\n\n/* Define to 1 if you have the `pam' library (-lpam). */\n#undef HAVE_LIBPAM\n\n/* Define if you have a function readline library */\n#undef HAVE_LIBREADLINE\n\n/* Define to 1 if you have the `selinux' library (-lselinux). */\n#undef HAVE_LIBSELINUX\n\n/* Define to 1 if you have the `ssl' library (-lssl). */\n#undef HAVE_LIBSSL\n\n/* Define to 1 if you have the `wldap32' library (-lwldap32). */\n#undef HAVE_LIBWLDAP32\n\n/* Define to 1 if you have the `xml2' library (-lxml2). */\n#undef HAVE_LIBXML2\n\n/* Define to 1 if you have the `xslt' library (-lxslt). */\n#undef HAVE_LIBXSLT\n\n/* Define to 1 if you have the `z' library (-lz). */\n#undef HAVE_LIBZ\n\n/* Define to 1 if the system has the type `locale_t'. */\n#undef HAVE_LOCALE_T\n\n/* Define to 1 if `long int' works and is 64 bits. */\n#undef HAVE_LONG_INT_64\n\n/* Define to 1 if the system has the type `long long int'. */\n#undef HAVE_LONG_LONG_INT\n\n/* Define to 1 if `long long int' works and is 64 bits. */\n#undef HAVE_LONG_LONG_INT_64\n\n/* Define to 1 if you have the <mbarrier.h> header file. */\n#undef HAVE_MBARRIER_H\n\n/* Define to 1 if you have the `mbstowcs_l' function. */\n#undef HAVE_MBSTOWCS_L\n\n/* Define to 1 if you have the `memmove' function. */\n#undef HAVE_MEMMOVE\n\n/* Define to 1 if you have the <memory.h> header file. */\n#undef HAVE_MEMORY_H\n\n/* Define to 1 if the system has the type `MINIDUMP_TYPE'. */\n#undef HAVE_MINIDUMP_TYPE\n\n/* Define to 1 if you have the `mkdtemp' function. */\n#undef HAVE_MKDTEMP\n\n/* Define to 1 if you have the <netinet/tcp.h> header file. */\n#undef HAVE_NETINET_TCP_H\n\n/* Define to 1 if you have the <net/if.h> header file. */\n#undef HAVE_NET_IF_H\n\n/* Define to 1 if you have the `OPENSSL_init_ssl' function. */\n#undef HAVE_OPENSSL_INIT_SSL\n\n/* Define to 1 if you have the <ossp/uuid.h> header file. */\n#undef HAVE_OSSP_UUID_H\n\n/* Define to 1 if you have the <pam/pam_appl.h> header file. */\n#undef HAVE_PAM_PAM_APPL_H\n\n/* Define to 1 if you have the `poll' function. */\n#undef HAVE_POLL\n\n/* Define to 1 if you have the <poll.h> header file. */\n#undef HAVE_POLL_H\n\n/* Define to 1 if you have the `posix_fadvise' function. */\n#undef HAVE_POSIX_FADVISE\n\n/* Define to 1 if you have the `posix_fallocate' function. */\n#undef HAVE_POSIX_FALLOCATE\n\n/* Define to 1 if the assembler supports PPC's LWARX mutex hint bit. */\n#undef HAVE_PPC_LWARX_MUTEX_HINT\n\n/* Define to 1 if you have the `pstat' function. */\n#undef HAVE_PSTAT\n\n/* Define to 1 if the PS_STRINGS thing exists. */\n#undef HAVE_PS_STRINGS\n\n/* Define if you have POSIX threads libraries and header files. */\n#undef HAVE_PTHREAD\n\n/* Define to 1 if you have the `pthread_is_threaded_np' function. */\n#undef HAVE_PTHREAD_IS_THREADED_NP\n\n/* Have PTHREAD_PRIO_INHERIT. */\n#undef HAVE_PTHREAD_PRIO_INHERIT\n\n/* Define to 1 if you have the `random' function. */\n#undef HAVE_RANDOM\n\n/* Define to 1 if you have the `RAND_OpenSSL' function. */\n#undef HAVE_RAND_OPENSSL\n\n/* Define to 1 if you have the <readline.h> header file. */\n#undef HAVE_READLINE_H\n\n/* Define to 1 if you have the <readline/history.h> header file. */\n#undef HAVE_READLINE_HISTORY_H\n\n/* Define to 1 if you have the <readline/readline.h> header file. */\n#undef HAVE_READLINE_READLINE_H\n\n/* Define to 1 if you have the `readlink' function. */\n#undef HAVE_READLINK\n\n/* Define to 1 if you have the `rint' function. */\n#undef HAVE_RINT\n\n/* Define to 1 if you have the global variable\n   'rl_completion_append_character'. */\n#undef HAVE_RL_COMPLETION_APPEND_CHARACTER\n\n/* Define to 1 if you have the `rl_completion_matches' function. */\n#undef HAVE_RL_COMPLETION_MATCHES\n\n/* Define to 1 if you have the `rl_filename_completion_function' function. */\n#undef HAVE_RL_FILENAME_COMPLETION_FUNCTION\n\n/* Define to 1 if you have the `rl_reset_screen_size' function. */\n#undef HAVE_RL_RESET_SCREEN_SIZE\n\n/* Define to 1 if you have the <security/pam_appl.h> header file. */\n#undef HAVE_SECURITY_PAM_APPL_H\n\n/* Define to 1 if you have the `setproctitle' function. */\n#undef HAVE_SETPROCTITLE\n\n/* Define to 1 if you have the `setsid' function. */\n#undef HAVE_SETSID\n\n/* Define to 1 if you have the `shm_open' function. */\n#undef HAVE_SHM_OPEN\n\n/* Define to 1 if you have the `snprintf' function. */\n#undef HAVE_SNPRINTF\n\n/* Define to 1 if you have spinlocks. */\n#undef HAVE_SPINLOCKS\n\n/* Define to 1 if you have the `srandom' function. */\n#undef HAVE_SRANDOM\n\n/* Define to 1 if you have the `SSL_get_current_compression' function. */\n#undef HAVE_SSL_GET_CURRENT_COMPRESSION\n\n/* Define to 1 if you have the <stdint.h> header file. */\n#undef HAVE_STDINT_H\n\n/* Define to 1 if you have the <stdlib.h> header file. */\n#undef HAVE_STDLIB_H\n\n/* Define to 1 if you have the `strerror' function. */\n#undef HAVE_STRERROR\n\n/* Define to 1 if you have the `strerror_r' function. */\n#undef HAVE_STRERROR_R\n\n/* Define to 1 if you have the <strings.h> header file. */\n#undef HAVE_STRINGS_H\n\n/* Define to 1 if you have the <string.h> header file. */\n#undef HAVE_STRING_H\n\n/* Define to 1 if you have the `strlcat' function. */\n#undef HAVE_STRLCAT\n\n/* Define to 1 if you have the `strlcpy' function. */\n#undef HAVE_STRLCPY\n\n/* Define to use have a strong random number source */\n#undef HAVE_STRONG_RANDOM\n\n/* Define to 1 if you have the `strtoll' function. */\n#undef HAVE_STRTOLL\n\n/* Define to 1 if you have the `strtoq' function. */\n#undef HAVE_STRTOQ\n\n/* Define to 1 if you have the `strtoull' function. */\n#undef HAVE_STRTOULL\n\n/* Define to 1 if you have the `strtouq' function. */\n#undef HAVE_STRTOUQ\n\n/* Define to 1 if the system has the type `struct addrinfo'. */\n#undef HAVE_STRUCT_ADDRINFO\n\n/* Define to 1 if the system has the type `struct cmsgcred'. */\n#undef HAVE_STRUCT_CMSGCRED\n\n/* Define to 1 if the system has the type `struct option'. */\n#undef HAVE_STRUCT_OPTION\n\n/* Define to 1 if `sa_len' is a member of `struct sockaddr'. */\n#undef HAVE_STRUCT_SOCKADDR_SA_LEN\n\n/* Define to 1 if the system has the type `struct sockaddr_storage'. */\n#undef HAVE_STRUCT_SOCKADDR_STORAGE\n\n/* Define to 1 if `ss_family' is a member of `struct sockaddr_storage'. */\n#undef HAVE_STRUCT_SOCKADDR_STORAGE_SS_FAMILY\n\n/* Define to 1 if `ss_len' is a member of `struct sockaddr_storage'. */\n#undef HAVE_STRUCT_SOCKADDR_STORAGE_SS_LEN\n\n/* Define to 1 if `__ss_family' is a member of `struct sockaddr_storage'. */\n#undef HAVE_STRUCT_SOCKADDR_STORAGE___SS_FAMILY\n\n/* Define to 1 if `__ss_len' is a member of `struct sockaddr_storage'. */\n#undef HAVE_STRUCT_SOCKADDR_STORAGE___SS_LEN\n\n/* Define to 1 if `tm_zone' is a member of `struct tm'. */\n#undef HAVE_STRUCT_TM_TM_ZONE\n\n/* Define to 1 if you have the `symlink' function. */\n#undef HAVE_SYMLINK\n\n/* Define to 1 if you have the `sync_file_range' function. */\n#undef HAVE_SYNC_FILE_RANGE\n\n/* Define to 1 if you have the syslog interface. */\n#undef HAVE_SYSLOG\n\n/* Define to 1 if you have the <sys/epoll.h> header file. */\n#undef HAVE_SYS_EPOLL_H\n\n/* Define to 1 if you have the <sys/ipc.h> header file. */\n#undef HAVE_SYS_IPC_H\n\n/* Define to 1 if you have the <sys/pstat.h> header file. */\n#undef HAVE_SYS_PSTAT_H\n\n/* Define to 1 if you have the <sys/resource.h> header file. */\n#undef HAVE_SYS_RESOURCE_H\n\n/* Define to 1 if you have the <sys/select.h> header file. */\n#undef HAVE_SYS_SELECT_H\n\n/* Define to 1 if you have the <sys/sem.h> header file. */\n#undef HAVE_SYS_SEM_H\n\n/* Define to 1 if you have the <sys/shm.h> header file. */\n#undef HAVE_SYS_SHM_H\n\n/* Define to 1 if you have the <sys/sockio.h> header file. */\n#undef HAVE_SYS_SOCKIO_H\n\n/* Define to 1 if you have the <sys/stat.h> header file. */\n#undef HAVE_SYS_STAT_H\n\n/* Define to 1 if you have the <sys/tas.h> header file. */\n#undef HAVE_SYS_TAS_H\n\n/* Define to 1 if you have the <sys/types.h> header file. */\n#undef HAVE_SYS_TYPES_H\n\n/* Define to 1 if you have the <sys/ucred.h> header file. */\n#undef HAVE_SYS_UCRED_H\n\n/* Define to 1 if you have the <sys/un.h> header file. */\n#undef HAVE_SYS_UN_H\n\n/* Define to 1 if you have the <termios.h> header file. */\n#undef HAVE_TERMIOS_H\n\n/* Define to 1 if your `struct tm' has `tm_zone'. Deprecated, use\n   `HAVE_STRUCT_TM_TM_ZONE' instead. */\n#undef HAVE_TM_ZONE\n\n/* Define to 1 if you have the `towlower' function. */\n#undef HAVE_TOWLOWER\n\n/* Define to 1 if your compiler understands `typeof' or something similar. */\n#undef HAVE_TYPEOF\n\n/* Define to 1 if you have the external array `tzname'. */\n#undef HAVE_TZNAME\n\n/* Define to 1 if you have the <ucred.h> header file. */\n#undef HAVE_UCRED_H\n\n/* Define to 1 if the system has the type `uint64'. */\n#undef HAVE_UINT64\n\n/* Define to 1 if the system has the type `uint8'. */\n#undef HAVE_UINT8\n\n/* Define to 1 if the system has the type `uintptr_t'. */\n#undef HAVE_UINTPTR_T\n\n/* Define to 1 if the system has the type `union semun'. */\n#undef HAVE_UNION_SEMUN\n\n/* Define to 1 if you have the <unistd.h> header file. */\n#undef HAVE_UNISTD_H\n\n/* Define to 1 if you have unix sockets. */\n#undef HAVE_UNIX_SOCKETS\n\n/* Define to 1 if you have the `unsetenv' function. */\n#undef HAVE_UNSETENV\n\n/* Define to 1 if the system has the type `unsigned long long int'. */\n#undef HAVE_UNSIGNED_LONG_LONG_INT\n\n/* Define to 1 if you have the `uselocale' function. */\n#undef HAVE_USELOCALE\n\n/* Define to 1 if you have the `utime' function. */\n#undef HAVE_UTIME\n\n/* Define to 1 if you have the `utimes' function. */\n#undef HAVE_UTIMES\n\n/* Define to 1 if you have the <utime.h> header file. */\n#undef HAVE_UTIME_H\n\n/* Define to 1 if you have BSD UUID support. */\n#undef HAVE_UUID_BSD\n\n/* Define to 1 if you have E2FS UUID support. */\n#undef HAVE_UUID_E2FS\n\n/* Define to 1 if you have the <uuid.h> header file. */\n#undef HAVE_UUID_H\n\n/* Define to 1 if you have OSSP UUID support. */\n#undef HAVE_UUID_OSSP\n\n/* Define to 1 if you have the <uuid/uuid.h> header file. */\n#undef HAVE_UUID_UUID_H\n\n/* Define to 1 if you have the `vsnprintf' function. */\n#undef HAVE_VSNPRINTF\n\n/* Define to 1 if you have the <wchar.h> header file. */\n#undef HAVE_WCHAR_H\n\n/* Define to 1 if you have the `wcstombs' function. */\n#undef HAVE_WCSTOMBS\n\n/* Define to 1 if you have the `wcstombs_l' function. */\n#undef HAVE_WCSTOMBS_L\n\n/* Define to 1 if you have the <wctype.h> header file. */\n#undef HAVE_WCTYPE_H\n\n/* Define to 1 if you have the <winldap.h> header file. */\n#undef HAVE_WINLDAP_H\n\n/* Define to 1 if your compiler understands __builtin_bswap32. */\n#undef HAVE__BUILTIN_BSWAP32\n\n/* Define to 1 if your compiler understands __builtin_bswap64. */\n#undef HAVE__BUILTIN_BSWAP64\n\n/* Define to 1 if your compiler understands __builtin_constant_p. */\n#undef HAVE__BUILTIN_CONSTANT_P\n\n/* Define to 1 if your compiler understands __builtin_types_compatible_p. */\n#undef HAVE__BUILTIN_TYPES_COMPATIBLE_P\n\n/* Define to 1 if your compiler understands __builtin_unreachable. */\n#undef HAVE__BUILTIN_UNREACHABLE\n\n/* Define to 1 if you have the `_configthreadlocale' function. */\n#undef HAVE__CONFIGTHREADLOCALE\n\n/* Define to 1 if you have __cpuid. */\n#undef HAVE__CPUID\n\n/* Define to 1 if you have __get_cpuid. */\n#undef HAVE__GET_CPUID\n\n/* Define to 1 if your compiler understands _Static_assert. */\n#undef HAVE__STATIC_ASSERT\n\n/* Define to 1 if your compiler understands __VA_ARGS__ in macros. */\n#undef HAVE__VA_ARGS\n\n/* Define to 1 if you have the `__strtoll' function. */\n#undef HAVE___STRTOLL\n\n/* Define to 1 if you have the `__strtoull' function. */\n#undef HAVE___STRTOULL\n\n/* Define to the appropriate snprintf length modifier for 64-bit ints. */\n#undef INT64_MODIFIER\n\n/* Define to 1 if `locale_t' requires <xlocale.h>. */\n#undef LOCALE_T_IN_XLOCALE\n\n/* Define as the maximum alignment requirement of any C data type. */\n#undef MAXIMUM_ALIGNOF\n\n/* Define bytes to use libc memset(). */\n#undef MEMSET_LOOP_LIMIT\n\n/* Define to the address where bug reports for this package should be sent. */\n#undef PACKAGE_BUGREPORT\n\n/* Define to the full name of this package. */\n#undef PACKAGE_NAME\n\n/* Define to the full name and version of this package. */\n#undef PACKAGE_STRING\n\n/* Define to the one symbol short name of this package. */\n#undef PACKAGE_TARNAME\n\n/* Define to the home page for this package. */\n#undef PACKAGE_URL\n\n/* Define to the version of this package. */\n#undef PACKAGE_VERSION\n\n/* Define to the name of a signed 128-bit integer type. */\n#undef PG_INT128_TYPE\n\n/* Define to the name of a signed 64-bit integer type. */\n#undef PG_INT64_TYPE\n\n/* Define to the name of the default PostgreSQL service principal in Kerberos\n   (GSSAPI). (--with-krb-srvnam=NAME) */\n#undef PG_KRB_SRVNAM\n\n/* PostgreSQL major version as a string */\n#undef PG_MAJORVERSION\n\n/* Define to gnu_printf if compiler supports it, else printf. */\n#undef PG_PRINTF_ATTRIBUTE\n\n/* PostgreSQL version as a string */\n#undef PG_VERSION\n\n/* PostgreSQL version as a number */\n#undef PG_VERSION_NUM\n\n/* A string containing the version number, platform, and C compiler */\n#undef PG_VERSION_STR\n\n/* Define to 1 to allow profiling output to be saved separately for each\n   process. */\n#undef PROFILE_PID_DIR\n\n/* Define to necessary symbol if this constant uses a non-standard name on\n   your system. */\n#undef PTHREAD_CREATE_JOINABLE\n\n/* RELSEG_SIZE is the maximum number of blocks allowed in one disk file. Thus,\n   the maximum size of a single file is RELSEG_SIZE * BLCKSZ; relations bigger\n   than that are divided into multiple files. RELSEG_SIZE * BLCKSZ must be\n   less than your OS' limit on file size. This is often 2 GB or 4GB in a\n   32-bit operating system, unless you have large file support enabled. By\n   default, we make the limit 1 GB to avoid any possible integer-overflow\n   problems within the OS. A limit smaller than necessary only means we divide\n   a large relation into more chunks than necessary, so it seems best to err\n   in the direction of a small limit. A power-of-2 value is recommended to\n   save a few cycles in md.c, but is not absolutely required. Changing\n   RELSEG_SIZE requires an initdb. */\n#undef RELSEG_SIZE\n\n/* The size of `long', as computed by sizeof. */\n#undef SIZEOF_LONG\n\n/* The size of `off_t', as computed by sizeof. */\n#undef SIZEOF_OFF_T\n\n/* The size of `size_t', as computed by sizeof. */\n#undef SIZEOF_SIZE_T\n\n/* The size of `void *', as computed by sizeof. */\n#undef SIZEOF_VOID_P\n\n/* Define to 1 if you have the ANSI C header files. */\n#undef STDC_HEADERS\n\n/* Define to 1 if strerror_r() returns int. */\n#undef STRERROR_R_INT\n\n/* Define to 1 if your <sys/time.h> declares `struct tm'. */\n#undef TM_IN_SYS_TIME\n\n/* Define to 1 to build with assertion checks. (--enable-cassert) */\n#undef USE_ASSERT_CHECKING\n\n/* Define to 1 to build with Bonjour support. (--with-bonjour) */\n#undef USE_BONJOUR\n\n/* Define to 1 to build with BSD Authentication support. (--with-bsd-auth) */\n#undef USE_BSD_AUTH\n\n/* Define to use /dev/urandom for random number generation */\n#undef USE_DEV_URANDOM\n\n/* Define to 1 if you want float4 values to be passed by value.\n   (--enable-float4-byval) */\n#undef USE_FLOAT4_BYVAL\n\n/* Define to 1 if you want float8, int8, etc values to be passed by value.\n   (--enable-float8-byval) */\n#undef USE_FLOAT8_BYVAL\n\n/* Define to build with ICU support. (--with-icu) */\n#undef USE_ICU\n\n/* Define to 1 to build with LDAP support. (--with-ldap) */\n#undef USE_LDAP\n\n/* Define to 1 to build with XML support. (--with-libxml) */\n#undef USE_LIBXML\n\n/* Define to 1 to use XSLT support when building contrib/xml2.\n   (--with-libxslt) */\n#undef USE_LIBXSLT\n\n/* Define to select named POSIX semaphores. */\n#undef USE_NAMED_POSIX_SEMAPHORES\n\n/* Define to build with OpenSSL support. (--with-openssl) */\n#undef USE_OPENSSL\n\n/* Define to use OpenSSL for random number generation */\n#undef USE_OPENSSL_RANDOM\n\n/* Define to 1 to build with PAM support. (--with-pam) */\n#undef USE_PAM\n\n/* Use replacement snprintf() functions. */\n#undef USE_REPL_SNPRINTF\n\n/* Define to 1 to use software CRC-32C implementation (slicing-by-8). */\n#undef USE_SLICING_BY_8_CRC32C\n\n/* Define to 1 use Intel SSE 4.2 CRC instructions. */\n#undef USE_SSE42_CRC32C\n\n/* Define to 1 to use Intel SSE 4.2 CRC instructions with a runtime check. */\n#undef USE_SSE42_CRC32C_WITH_RUNTIME_CHECK\n\n/* Define to build with systemd support. (--with-systemd) */\n#undef USE_SYSTEMD\n\n/* Define to select SysV-style semaphores. */\n#undef USE_SYSV_SEMAPHORES\n\n/* Define to select SysV-style shared memory. */\n#undef USE_SYSV_SHARED_MEMORY\n\n/* Define to select unnamed POSIX semaphores. */\n#undef USE_UNNAMED_POSIX_SEMAPHORES\n\n/* Define to use native Windows API for random number generation */\n#undef USE_WIN32_RANDOM\n\n/* Define to select Win32-style semaphores. */\n#undef USE_WIN32_SEMAPHORES\n\n/* Define to select Win32-style shared memory. */\n#undef USE_WIN32_SHARED_MEMORY\n\n/* Define to 1 if `wcstombs_l' requires <xlocale.h>. */\n#undef WCSTOMBS_L_IN_XLOCALE\n\n/* Define WORDS_BIGENDIAN to 1 if your processor stores words with the most\n   significant byte first (like Motorola and SPARC, unlike Intel). */\n#if defined AC_APPLE_UNIVERSAL_BUILD\n# if defined __BIG_ENDIAN__\n#  define WORDS_BIGENDIAN 1\n# endif\n#else\n# ifndef WORDS_BIGENDIAN\n#  undef WORDS_BIGENDIAN\n# endif\n#endif\n\n/* Size of a WAL file block. This need have no particular relation to BLCKSZ.\n   XLOG_BLCKSZ must be a power of 2, and if your system supports O_DIRECT I/O,\n   XLOG_BLCKSZ must be a multiple of the alignment requirement for direct-I/O\n   buffers, else direct I/O may fail. Changing XLOG_BLCKSZ requires an initdb.\n   */\n#undef XLOG_BLCKSZ\n\n/* XLOG_SEG_SIZE is the size of a single WAL file. This must be a power of 2\n   and larger than XLOG_BLCKSZ (preferably, a great deal larger than\n   XLOG_BLCKSZ). Changing XLOG_SEG_SIZE requires an initdb. */\n#undef XLOG_SEG_SIZE\n\n\n\n/* Number of bits in a file offset, on hosts where this is settable. */\n#undef _FILE_OFFSET_BITS\n\n/* Define to 1 to make fseeko visible on some hosts (e.g. glibc 2.2). */\n#undef _LARGEFILE_SOURCE\n\n/* Define for large files, on AIX-style hosts. */\n#undef _LARGE_FILES\n\n/* Define to `__inline__' or `__inline' if that's what the C compiler\n   calls it, or to nothing if 'inline' is not supported under any name.  */\n#ifndef __cplusplus\n#undef inline\n#endif\n\n/* Define to the type of a signed integer type wide enough to hold a pointer,\n   if such a type exists, and if the system does not define it. */\n#undef intptr_t\n\n/* Define to empty if the C compiler does not understand signed types. */\n#undef signed\n\n/* Define to how the compiler spells `typeof'. */\n#undef typeof\n\n/* Define to the type of an unsigned integer type wide enough to hold a\n   pointer, if such a type exists, and if the system does not define it. */\n#undef uintptr_t\n",
        "/tmp/vanessa/spack-stage/spack-stage-postgresql-10.7-gyj6nqg7vr5w65ig6ixyhswgwynvijiu/spack-src/src/include/utils/dynamic_loader.h": "/*-------------------------------------------------------------------------\n *\n * dynamic_loader.h\n *\n *\n *\n * Portions Copyright (c) 1996-2017, PostgreSQL Global Development Group\n * Portions Copyright (c) 1994, Regents of the University of California\n *\n * src/include/utils/dynamic_loader.h\n *\n *-------------------------------------------------------------------------\n */\n#ifndef DYNAMIC_LOADER_H\n#define DYNAMIC_LOADER_H\n\n#include \"fmgr.h\"\n\n\nextern void *pg_dlopen(char *filename);\nextern PGFunction pg_dlsym(void *handle, char *funcname);\nextern void pg_dlclose(void *handle);\nextern char *pg_dlerror(void);\n\n#endif\t\t\t\t\t\t\t/* DYNAMIC_LOADER_H */\n",
        "/tmp/vanessa/spack-stage/spack-stage-postgresql-10.7-gyj6nqg7vr5w65ig6ixyhswgwynvijiu/spack-src/src/backend/port/dynloader/win32.h": "/*\n * src/backend/port/dynloader/win32.h\n */\n#ifndef PORT_PROTOS_H\n#define PORT_PROTOS_H\n\n#include \"utils/dynamic_loader.h\"\t/* pgrminclude ignore */\n\n#define pg_dlopen(f)\tdlopen((f), 1)\n#define pg_dlsym\t\tdlsym\n#define pg_dlclose\t\tdlclose\n#define pg_dlerror\t\tdlerror\n\nchar\t   *dlerror(void);\nint\t\t\tdlclose(void *handle);\nvoid\t   *dlsym(void *handle, const char *symbol);\nvoid\t   *dlopen(const char *path, int mode);\n\n#endif\t\t\t\t\t\t\t/* PORT_PROTOS_H */\n",
        "/tmp/vanessa/spack-stage/spack-stage-postgresql-10.7-gyj6nqg7vr5w65ig6ixyhswgwynvijiu/spack-src/src/backend/port/dynloader/cygwin.h": "/*-------------------------------------------------------------------------\n *\n * Dynamic loader declarations for Cygwin\n *\n * Portions Copyright (c) 1996-2017, PostgreSQL Global Development Group\n * Portions Copyright (c) 1994, Regents of the University of California\n *\n * src/backend/port/dynloader/cygwin.h\n *\n *-------------------------------------------------------------------------\n  */\n#ifndef PORT_PROTOS_H\n#define PORT_PROTOS_H\n\n#include <dlfcn.h>\n#include \"utils/dynamic_loader.h\"\t/* pgrminclude ignore */\n\n/*\n * In some older systems, the RTLD_NOW flag isn't defined and the mode\n * argument to dlopen must always be 1.  The RTLD_GLOBAL flag is wanted\n * if available, but it doesn't exist everywhere.\n * If it doesn't exist, set it to 0 so it has no effect.\n */\n#ifndef RTLD_NOW\n#define RTLD_NOW 1\n#endif\n#ifndef RTLD_GLOBAL\n#define RTLD_GLOBAL 0\n#endif\n\n#define pg_dlopen(f)\tdlopen((f), RTLD_NOW | RTLD_GLOBAL)\n#define pg_dlsym\t\tdlsym\n#define pg_dlclose\t\tdlclose\n#define pg_dlerror\t\tdlerror\n\n#endif\t\t\t\t\t\t\t/* PORT_PROTOS_H */\n",
        "/tmp/vanessa/spack-stage/spack-stage-postgresql-10.7-gyj6nqg7vr5w65ig6ixyhswgwynvijiu/spack-src/src/backend/port/dynloader/freebsd.h": "/*-------------------------------------------------------------------------\n *\n * freebsd.h\n *\t  port-specific prototypes for FreeBSD\n *\n * Portions Copyright (c) 1996-2017, PostgreSQL Global Development Group\n * Portions Copyright (c) 1994, Regents of the University of California\n *\n * src/backend/port/dynloader/freebsd.h\n *\n *-------------------------------------------------------------------------\n */\n#ifndef PORT_PROTOS_H\n#define PORT_PROTOS_H\n\n#include <nlist.h>\n#include <link.h>\n#include <dlfcn.h>\n\n#include \"utils/dynamic_loader.h\"\t/* pgrminclude ignore */\n\n/*\n * Dynamic Loader on NetBSD 1.0.\n *\n * this dynamic loader uses the system dynamic loading interface for shared\n * libraries (ie. dlopen/dlsym/dlclose). The user must specify a shared\n * library as the file to be dynamically loaded.\n *\n * agc - I know this is all a bit crufty, but it does work, is fairly\n * portable, and works (the stipulation that the d.l. function must\n * begin with an underscore is fairly tricky, and some versions of\n * NetBSD (like 1.0, and 1.0A pre June 1995) have no dlerror.)\n */\n\n/*\n * In some older systems, the RTLD_NOW flag isn't defined and the mode\n * argument to dlopen must always be 1.  The RTLD_GLOBAL flag is wanted\n * if available, but it doesn't exist everywhere.\n * If it doesn't exist, set it to 0 so it has no effect.\n */\n#ifndef RTLD_NOW\n#define RTLD_NOW 1\n#endif\n#ifndef RTLD_GLOBAL\n#define RTLD_GLOBAL 0\n#endif\n\n#define\t\t   pg_dlopen(f)    BSD44_derived_dlopen((f), RTLD_NOW | RTLD_GLOBAL)\n#define\t\t   pg_dlsym\t\t   BSD44_derived_dlsym\n#define\t\t   pg_dlclose\t   BSD44_derived_dlclose\n#define\t\t   pg_dlerror\t   BSD44_derived_dlerror\n\nchar\t   *BSD44_derived_dlerror(void);\nvoid\t   *BSD44_derived_dlopen(const char *filename, int num);\nvoid\t   *BSD44_derived_dlsym(void *handle, const char *name);\nvoid\t\tBSD44_derived_dlclose(void *handle);\n\n#endif\t\t\t\t\t\t\t/* PORT_PROTOS_H */\n",
        "/tmp/vanessa/spack-stage/spack-stage-postgresql-10.7-gyj6nqg7vr5w65ig6ixyhswgwynvijiu/spack-src/src/backend/port/dynloader/darwin.h": "/* src/backend/port/dynloader/darwin.h */\n\n#include \"fmgr.h\"\n\nvoid\t   *pg_dlopen(char *filename);\nPGFunction\tpg_dlsym(void *handle, char *funcname);\nvoid\t\tpg_dlclose(void *handle);\nchar\t   *pg_dlerror(void);\n",
        "/tmp/vanessa/spack-stage/spack-stage-postgresql-10.7-gyj6nqg7vr5w65ig6ixyhswgwynvijiu/spack-src/src/backend/port/dynloader/win32.c": "/* src/backend/port/dynloader/win32.c */\n\n#include \"postgres.h\"\n\nchar\t   *dlerror(void);\nint\t\t\tdlclose(void *handle);\nvoid\t   *dlsym(void *handle, const char *symbol);\nvoid\t   *dlopen(const char *path, int mode);\n\nstatic char last_dyn_error[512];\n\nstatic void\nset_dl_error(void)\n{\n\tDWORD\t\terr = GetLastError();\n\n\tif (FormatMessage(FORMAT_MESSAGE_IGNORE_INSERTS |\n\t\t\t\t\t  FORMAT_MESSAGE_FROM_SYSTEM,\n\t\t\t\t\t  NULL,\n\t\t\t\t\t  err,\n\t\t\t\t\t  MAKELANGID(LANG_ENGLISH, SUBLANG_DEFAULT),\n\t\t\t\t\t  last_dyn_error,\n\t\t\t\t\t  sizeof(last_dyn_error) - 1,\n\t\t\t\t\t  NULL) == 0)\n\t{\n\t\tsnprintf(last_dyn_error, sizeof(last_dyn_error) - 1,\n\t\t\t\t \"unknown error %lu\", err);\n\t}\n}\n\nchar *\ndlerror(void)\n{\n\tif (last_dyn_error[0])\n\t\treturn last_dyn_error;\n\telse\n\t\treturn NULL;\n}\n\nint\ndlclose(void *handle)\n{\n\tif (!FreeLibrary((HMODULE) handle))\n\t{\n\t\tset_dl_error();\n\t\treturn 1;\n\t}\n\tlast_dyn_error[0] = 0;\n\treturn 0;\n}\n\nvoid *\ndlsym(void *handle, const char *symbol)\n{\n\tvoid\t   *ptr;\n\n\tptr = GetProcAddress((HMODULE) handle, symbol);\n\tif (!ptr)\n\t{\n\t\tset_dl_error();\n\t\treturn NULL;\n\t}\n\tlast_dyn_error[0] = 0;\n\treturn ptr;\n}\n\nvoid *\ndlopen(const char *path, int mode)\n{\n\tHMODULE\t\th;\n\tint\t\t\tprevmode;\n\n\t/* Disable popup error messages when loading DLLs */\n\tprevmode = SetErrorMode(SEM_FAILCRITICALERRORS | SEM_NOOPENFILEERRORBOX);\n\th = LoadLibrary(path);\n\tSetErrorMode(prevmode);\n\n\tif (!h)\n\t{\n\t\tset_dl_error();\n\t\treturn NULL;\n\t}\n\tlast_dyn_error[0] = 0;\n\treturn (void *) h;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-postgresql-10.7-gyj6nqg7vr5w65ig6ixyhswgwynvijiu/spack-src/src/backend/port/dynloader/hpux.h": "/*-------------------------------------------------------------------------\n *\n * dynloader.h\n *\t  dynamic loader for HP-UX using the shared library mechanism\n *\n * Portions Copyright (c) 1996-2017, PostgreSQL Global Development Group\n * Portions Copyright (c) 1994, Regents of the University of California\n *\n *\n * IDENTIFICATION\n *\t  src/backend/port/dynloader/hpux.h\n *\n *\tNOTES\n *\t\tall functions are defined here -- it's impossible to trace the\n *\t\tshl_* routines from the bundled HP-UX debugger.\n *\n *-------------------------------------------------------------------------\n */\n/* System includes */\n#include \"fmgr.h\"\n\nextern void *pg_dlopen(char *filename);\nextern PGFunction pg_dlsym(void *handle, char *funcname);\nextern void pg_dlclose(void *handle);\nextern char *pg_dlerror(void);\n",
        "/tmp/vanessa/spack-stage/spack-stage-postgresql-10.7-gyj6nqg7vr5w65ig6ixyhswgwynvijiu/spack-src/src/backend/port/dynloader/solaris.h": "/*-------------------------------------------------------------------------\n *\n * solaris.h\n *\t  port-specific prototypes for Solaris\n *\n *\n * Portions Copyright (c) 1996-2017, PostgreSQL Global Development Group\n * Portions Copyright (c) 1994, Regents of the University of California\n *\n * src/backend/port/dynloader/solaris.h\n *\n *-------------------------------------------------------------------------\n */\n#ifndef PORT_PROTOS_H\n#define PORT_PROTOS_H\n\n#include <dlfcn.h>\n#include \"utils/dynamic_loader.h\"\t/* pgrminclude ignore */\n\n/*\n * In some older systems, the RTLD_NOW flag isn't defined and the mode\n * argument to dlopen must always be 1.  The RTLD_GLOBAL flag is wanted\n * if available, but it doesn't exist everywhere.\n * If it doesn't exist, set it to 0 so it has no effect.\n */\n#ifndef RTLD_NOW\n#define RTLD_NOW 1\n#endif\n#ifndef RTLD_GLOBAL\n#define RTLD_GLOBAL 0\n#endif\n\n#define pg_dlopen(f)\tdlopen((f), RTLD_NOW | RTLD_GLOBAL)\n#define pg_dlsym\t\tdlsym\n#define pg_dlclose\t\tdlclose\n#define pg_dlerror\t\tdlerror\n\n#endif\t\t\t\t\t\t\t/* PORT_PROTOS_H */\n",
        "/tmp/vanessa/spack-stage/spack-stage-postgresql-10.7-gyj6nqg7vr5w65ig6ixyhswgwynvijiu/spack-src/src/backend/port/dynloader/netbsd.c": "/*\n * Portions Copyright (c) 1996-2017, PostgreSQL Global Development Group\n * Portions Copyright (c) 1990 The Regents of the University of California.\n * All rights reserved.\n *\n * src/backend/port/dynloader/netbsd.c\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *\t  notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *\t  notice, this list of conditions and the following disclaimer in the\n *\t  documentation and/or other materials provided with the distribution.\n * 3. Neither the name of the University nor the names of its contributors\n *\t  may be used to endorse or promote products derived from this software\n *\t  without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\n * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\n * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n * SUCH DAMAGE.\n */\n\n#if defined(LIBC_SCCS) && !defined(lint)\nstatic char sccsid[] = \"@(#)dl.c\t5.4 (Berkeley) 2/23/91\";\n#endif\t\t\t\t\t\t\t/* LIBC_SCCS and not lint */\n\n#include \"postgres.h\"\n\n#include <nlist.h>\n#include <link.h>\n#include <dlfcn.h>\n\n#include \"dynloader.h\"\n\nstatic char error_message[BUFSIZ];\n\nchar *\nBSD44_derived_dlerror(void)\n{\n\tstatic char ret[BUFSIZ];\n\n\tstrcpy(ret, error_message);\n\terror_message[0] = 0;\n\treturn (ret[0] == 0) ? NULL : ret;\n}\n\nvoid *\nBSD44_derived_dlopen(const char *file, int num)\n{\n#if !defined(HAVE_DLOPEN)\n\tsnprintf(error_message, sizeof(error_message),\n\t\t\t \"dlopen (%s) not supported\", file);\n\treturn NULL;\n#else\n\tvoid\t   *vp;\n\n\tif ((vp = dlopen((char *) file, num)) == NULL)\n\t\tsnprintf(error_message, sizeof(error_message),\n\t\t\t\t \"dlopen (%s) failed: %s\", file, dlerror());\n\treturn vp;\n#endif\n}\n\nvoid *\nBSD44_derived_dlsym(void *handle, const char *name)\n{\n#if !defined(HAVE_DLOPEN)\n\tsnprintf(error_message, sizeof(error_message),\n\t\t\t \"dlsym (%s) failed\", name);\n\treturn NULL;\n#else\n\tvoid\t   *vp;\n\n#ifndef __ELF__\n\tchar\t\tbuf[BUFSIZ];\n\n\tif (*name != '_')\n\t{\n\t\tsnprintf(buf, sizeof(buf), \"_%s\", name);\n\t\tname = buf;\n\t}\n#endif\t\t\t\t\t\t\t/* !__ELF__ */\n\tif ((vp = dlsym(handle, (char *) name)) == NULL)\n\t\tsnprintf(error_message, sizeof(error_message),\n\t\t\t\t \"dlsym (%s) failed\", name);\n\treturn vp;\n#endif\n}\n\nvoid\nBSD44_derived_dlclose(void *handle)\n{\n#if defined(HAVE_DLOPEN)\n\tdlclose(handle);\n#endif\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-postgresql-10.7-gyj6nqg7vr5w65ig6ixyhswgwynvijiu/spack-src/src/backend/port/dynloader/aix.h": "/*-------------------------------------------------------------------------\n *\n * aix.h\n *\t  prototypes for AIX-specific routines\n *\n *\n * Portions Copyright (c) 1996-2017, PostgreSQL Global Development Group\n * Portions Copyright (c) 1994, Regents of the University of California\n *\n * src/backend/port/dynloader/aix.h\n *\n *-------------------------------------------------------------------------\n */\n\n#ifndef PORT_PROTOS_H\n#define PORT_PROTOS_H\n\n#include <dlfcn.h>\n#include \"utils/dynamic_loader.h\"\t/* pgrminclude ignore */\n\n/*\n * In some older systems, the RTLD_NOW flag isn't defined and the mode\n * argument to dlopen must always be 1.  The RTLD_GLOBAL flag is wanted\n * if available, but it doesn't exist everywhere.\n * If it doesn't exist, set it to 0 so it has no effect.\n */\n#ifndef RTLD_NOW\n#define RTLD_NOW 1\n#endif\n#ifndef RTLD_GLOBAL\n#define RTLD_GLOBAL 0\n#endif\n\n#define  pg_dlopen(f)\tdlopen((f), RTLD_NOW | RTLD_GLOBAL)\n#define  pg_dlsym(h, f) ((PGFunction) dlsym(h, f))\n#define  pg_dlclose(h)\tdlclose(h)\n#define  pg_dlerror()\tdlerror()\n\n#endif\t\t\t\t\t\t\t/* PORT_PROTOS_H */\n",
        "/tmp/vanessa/spack-stage/spack-stage-postgresql-10.7-gyj6nqg7vr5w65ig6ixyhswgwynvijiu/spack-src/src/backend/port/dynloader/netbsd.h": "/*-------------------------------------------------------------------------\n *\n * netbsd.h\n *\t  port-specific prototypes for NetBSD\n *\n *\n * Portions Copyright (c) 1996-2017, PostgreSQL Global Development Group\n * Portions Copyright (c) 1994, Regents of the University of California\n *\n * src/backend/port/dynloader/netbsd.h\n *\n *-------------------------------------------------------------------------\n */\n#ifndef PORT_PROTOS_H\n#define PORT_PROTOS_H\n\n#include <nlist.h>\n#include <link.h>\n#include <dlfcn.h>\n\n#include \"utils/dynamic_loader.h\"\t/* pgrminclude ignore */\n\n/*\n * Dynamic Loader on NetBSD 1.0.\n *\n * this dynamic loader uses the system dynamic loading interface for shared\n * libraries (ie. dlopen/dlsym/dlclose). The user must specify a shared\n * library as the file to be dynamically loaded.\n *\n * agc - I know this is all a bit crufty, but it does work, is fairly\n * portable, and works (the stipulation that the d.l. function must\n * begin with an underscore is fairly tricky, and some versions of\n * NetBSD (like 1.0, and 1.0A pre June 1995) have no dlerror.)\n */\n\n/*\n * In some older systems, the RTLD_NOW flag isn't defined and the mode\n * argument to dlopen must always be 1.  The RTLD_GLOBAL flag is wanted\n * if available, but it doesn't exist everywhere.\n * If it doesn't exist, set it to 0 so it has no effect.\n */\n#ifndef RTLD_NOW\n#define RTLD_NOW 1\n#endif\n#ifndef RTLD_GLOBAL\n#define RTLD_GLOBAL 0\n#endif\n\n#define\t\t   pg_dlopen(f)    BSD44_derived_dlopen((f), RTLD_NOW | RTLD_GLOBAL)\n#define\t\t   pg_dlsym\t\t   BSD44_derived_dlsym\n#define\t\t   pg_dlclose\t   BSD44_derived_dlclose\n#define\t\t   pg_dlerror\t   BSD44_derived_dlerror\n\nchar\t   *BSD44_derived_dlerror(void);\nvoid\t   *BSD44_derived_dlopen(const char *filename, int num);\nvoid\t   *BSD44_derived_dlsym(void *handle, const char *name);\nvoid\t\tBSD44_derived_dlclose(void *handle);\n\n#endif\t\t\t\t\t\t\t/* PORT_PROTOS_H */\n",
        "/tmp/vanessa/spack-stage/spack-stage-postgresql-10.7-gyj6nqg7vr5w65ig6ixyhswgwynvijiu/spack-src/src/backend/port/dynloader/openbsd.h": "/*-------------------------------------------------------------------------\n *\n * openbsd.h\n *\t  port-specific prototypes for OpenBSD\n *\n * Portions Copyright (c) 1996-2017, PostgreSQL Global Development Group\n * Portions Copyright (c) 1994, Regents of the University of California\n *\n * src/backend/port/dynloader/openbsd.h\n *\n *-------------------------------------------------------------------------\n */\n#ifndef PORT_PROTOS_H\n#define PORT_PROTOS_H\n\n#include <nlist.h>\n#include <link.h>\n#include <dlfcn.h>\n\n#include \"utils/dynamic_loader.h\"\t/* pgrminclude ignore */\n\n/*\n * Dynamic Loader on NetBSD 1.0.\n *\n * this dynamic loader uses the system dynamic loading interface for shared\n * libraries (ie. dlopen/dlsym/dlclose). The user must specify a shared\n * library as the file to be dynamically loaded.\n *\n * agc - I know this is all a bit crufty, but it does work, is fairly\n * portable, and works (the stipulation that the d.l. function must\n * begin with an underscore is fairly tricky, and some versions of\n * NetBSD (like 1.0, and 1.0A pre June 1995) have no dlerror.)\n */\n\n/*\n * In some older systems, the RTLD_NOW flag isn't defined and the mode\n * argument to dlopen must always be 1.  The RTLD_GLOBAL flag is wanted\n * if available, but it doesn't exist everywhere.\n * If it doesn't exist, set it to 0 so it has no effect.\n */\n#ifndef RTLD_NOW\n#define RTLD_NOW 1\n#endif\n#ifndef RTLD_GLOBAL\n#define RTLD_GLOBAL 0\n#endif\n\n#define\t\t   pg_dlopen(f)    BSD44_derived_dlopen((f), RTLD_NOW | RTLD_GLOBAL)\n#define\t\t   pg_dlsym\t\t   BSD44_derived_dlsym\n#define\t\t   pg_dlclose\t   BSD44_derived_dlclose\n#define\t\t   pg_dlerror\t   BSD44_derived_dlerror\n\nchar\t   *BSD44_derived_dlerror(void);\nvoid\t   *BSD44_derived_dlopen(const char *filename, int num);\nvoid\t   *BSD44_derived_dlsym(void *handle, const char *name);\nvoid\t\tBSD44_derived_dlclose(void *handle);\n\n#endif\t\t\t\t\t\t\t/* PORT_PROTOS_H */\n",
        "/tmp/vanessa/spack-stage/spack-stage-postgresql-10.7-gyj6nqg7vr5w65ig6ixyhswgwynvijiu/spack-src/src/backend/port/dynloader/linux.c": "/*-------------------------------------------------------------------------\n *\n * linux.c\n *\t  Dynamic Loader for Postgres for Linux, generated from those for\n *\t  Ultrix.\n *\n *\t  You need to install the dld library on your Linux system!\n *\n * Portions Copyright (c) 1996-2017, PostgreSQL Global Development Group\n * Portions Copyright (c) 1994, Regents of the University of California\n *\n *\n * IDENTIFICATION\n *\t  src/backend/port/dynloader/linux.c\n *\n *-------------------------------------------------------------------------\n */\n\n#include \"postgres.h\"\n\n#ifdef HAVE_DLD_H\n#include <dld.h>\n#endif\n\n#include \"dynloader.h\"\n#include \"miscadmin.h\"\n\n\n#ifndef HAVE_DLOPEN\n\nvoid *\npg_dlopen(char *filename)\n{\n#ifndef HAVE_DLD_H\n\telog(ERROR, \"dynamic load not supported\");\n\treturn NULL;\n#else\n\tstatic int\tdl_initialized = 0;\n\n\t/*\n\t * initializes the dynamic loader with the executable's pathname. (only\n\t * needs to do this the first time pg_dlopen is called.)\n\t */\n\tif (!dl_initialized)\n\t{\n\t\tif (dld_init(dld_find_executable(my_exec_path)))\n\t\t\treturn NULL;\n\n\t\t/*\n\t\t * if there are undefined symbols, we want dl to search from the\n\t\t * following libraries also.\n\t\t */\n\t\tdl_initialized = 1;\n\t}\n\n\t/*\n\t * link the file, then check for undefined symbols!\n\t */\n\tif (dld_link(filename))\n\t\treturn NULL;\n\n\t/*\n\t * If undefined symbols: try to link with the C and math libraries! This\n\t * could be smarter, if the dynamic linker was able to handle shared libs!\n\t */\n\tif (dld_undefined_sym_count > 0)\n\t{\n\t\tif (dld_link(\"/usr/lib/libc.a\"))\n\t\t{\n\t\t\telog(WARNING, \"could not link C library\");\n\t\t\treturn NULL;\n\t\t}\n\t\tif (dld_undefined_sym_count > 0)\n\t\t{\n\t\t\tif (dld_link(\"/usr/lib/libm.a\"))\n\t\t\t{\n\t\t\t\telog(WARNING, \"could not link math library\");\n\t\t\t\treturn NULL;\n\t\t\t}\n\t\t\tif (dld_undefined_sym_count > 0)\n\t\t\t{\n\t\t\t\tint\t\t\tcount = dld_undefined_sym_count;\n\t\t\t\tchar\t  **list = dld_list_undefined_sym();\n\n\t\t\t\t/* list the undefined symbols, if any */\n\t\t\t\tdo\n\t\t\t\t{\n\t\t\t\t\telog(WARNING, \"\\\"%s\\\" is undefined\", *list);\n\t\t\t\t\tlist++;\n\t\t\t\t\tcount--;\n\t\t\t\t} while (count > 0);\n\n\t\t\t\tdld_unlink_by_file(filename, 1);\n\t\t\t\treturn NULL;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn (void *) strdup(filename);\n#endif\n}\n\nPGFunction\npg_dlsym(void *handle, char *funcname)\n{\n#ifndef HAVE_DLD_H\n\treturn NULL;\n#else\n\treturn (PGFunction) dld_get_func((funcname));\n#endif\n}\n\nvoid\npg_dlclose(void *handle)\n{\n#ifndef HAVE_DLD_H\n#else\n\tdld_unlink_by_file(handle, 1);\n\tfree(handle);\n#endif\n}\n\nchar *\npg_dlerror(void)\n{\n#ifndef HAVE_DLD_H\n\treturn \"dynaloader unsupported\";\n#else\n\treturn dld_strerror(dld_errno);\n#endif\n}\n\n#endif\t\t\t\t\t\t\t/* !HAVE_DLOPEN */\n",
        "/tmp/vanessa/spack-stage/spack-stage-postgresql-10.7-gyj6nqg7vr5w65ig6ixyhswgwynvijiu/spack-src/src/backend/port/dynloader/freebsd.c": "/*\n * Portions Copyright (c) 1996-2017, PostgreSQL Global Development Group\n * Portions Copyright (c) 1990 The Regents of the University of California.\n * All rights reserved.\n *\n * src/backend/port/dynloader/freebsd.c\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *\t  notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *\t  notice, this list of conditions and the following disclaimer in the\n *\t  documentation and/or other materials provided with the distribution.\n * 3. Neither the name of the University nor the names of its contributors\n *\t  may be used to endorse or promote products derived from this software\n *\t  without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\n * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\n * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n * SUCH DAMAGE.\n */\n\n#if defined(LIBC_SCCS) && !defined(lint)\nstatic char sccsid[] = \"@(#)dl.c\t5.4 (Berkeley) 2/23/91\";\n#endif\t\t\t\t\t\t\t/* LIBC_SCCS and not lint */\n\n#include \"postgres.h\"\n\n#include <nlist.h>\n#include <link.h>\n#include <dlfcn.h>\n\n#include \"dynloader.h\"\n\nstatic char error_message[BUFSIZ];\n\nchar *\nBSD44_derived_dlerror(void)\n{\n\tstatic char ret[BUFSIZ];\n\n\tstrcpy(ret, error_message);\n\terror_message[0] = 0;\n\treturn (ret[0] == 0) ? NULL : ret;\n}\n\nvoid *\nBSD44_derived_dlopen(const char *file, int num)\n{\n#if !defined(HAVE_DLOPEN)\n\tsnprintf(error_message, sizeof(error_message),\n\t\t\t \"dlopen (%s) not supported\", file);\n\treturn NULL;\n#else\n\tvoid\t   *vp;\n\n\tif ((vp = dlopen((char *) file, num)) == NULL)\n\t\tsnprintf(error_message, sizeof(error_message),\n\t\t\t\t \"dlopen (%s) failed: %s\", file, dlerror());\n\treturn vp;\n#endif\n}\n\nvoid *\nBSD44_derived_dlsym(void *handle, const char *name)\n{\n#if !defined(HAVE_DLOPEN)\n\tsnprintf(error_message, sizeof(error_message),\n\t\t\t \"dlsym (%s) failed\", name);\n\treturn NULL;\n#else\n\tvoid\t   *vp;\n\n#ifndef __ELF__\n\tchar\t\tbuf[BUFSIZ];\n\n\tif (*name != '_')\n\t{\n\t\tsnprintf(buf, sizeof(buf), \"_%s\", name);\n\t\tname = buf;\n\t}\n#endif\t\t\t\t\t\t\t/* !__ELF__ */\n\tif ((vp = dlsym(handle, (char *) name)) == NULL)\n\t\tsnprintf(error_message, sizeof(error_message),\n\t\t\t\t \"dlsym (%s) failed\", name);\n\treturn vp;\n#endif\n}\n\nvoid\nBSD44_derived_dlclose(void *handle)\n{\n#if defined(HAVE_DLOPEN)\n\tdlclose(handle);\n#endif\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-postgresql-10.7-gyj6nqg7vr5w65ig6ixyhswgwynvijiu/spack-src/src/backend/port/dynloader/openbsd.c": "/*\n * Portions Copyright (c) 1996-2017, PostgreSQL Global Development Group\n * Portions Copyright (c) 1990 The Regents of the University of California.\n * All rights reserved.\n *\n * src/backend/port/dynloader/openbsd.c\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *\t  notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *\t  notice, this list of conditions and the following disclaimer in the\n *\t  documentation and/or other materials provided with the distribution.\n * 3. Neither the name of the University nor the names of its contributors\n *\t  may be used to endorse or promote products derived from this software\n *\t  without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\n * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\n * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n * SUCH DAMAGE.\n */\n\n#if defined(LIBC_SCCS) && !defined(lint)\nstatic char sccsid[] = \"@(#)dl.c\t5.4 (Berkeley) 2/23/91\";\n#endif\t\t\t\t\t\t\t/* LIBC_SCCS and not lint */\n\n#include \"postgres.h\"\n\n#include <nlist.h>\n#include <link.h>\n#include <dlfcn.h>\n\n#include \"dynloader.h\"\n\nstatic char error_message[BUFSIZ];\n\nchar *\nBSD44_derived_dlerror(void)\n{\n\tstatic char ret[BUFSIZ];\n\n\tstrcpy(ret, error_message);\n\terror_message[0] = 0;\n\treturn (ret[0] == 0) ? NULL : ret;\n}\n\nvoid *\nBSD44_derived_dlopen(const char *file, int num)\n{\n#if !defined(HAVE_DLOPEN)\n\tsnprintf(error_message, sizeof(error_message),\n\t\t\t \"dlopen (%s) not supported\", file);\n\treturn NULL;\n#else\n\tvoid\t   *vp;\n\n\tif ((vp = dlopen((char *) file, num)) == NULL)\n\t\tsnprintf(error_message, sizeof(error_message),\n\t\t\t\t \"dlopen (%s) failed: %s\", file, dlerror());\n\treturn vp;\n#endif\n}\n\nvoid *\nBSD44_derived_dlsym(void *handle, const char *name)\n{\n#if !defined(HAVE_DLOPEN)\n\tsnprintf(error_message, sizeof(error_message),\n\t\t\t \"dlsym (%s) failed\", name);\n\treturn NULL;\n#else\n\tvoid\t   *vp;\n\n#ifndef __ELF__\n\tchar\t\tbuf[BUFSIZ];\n\n\tif (*name != '_')\n\t{\n\t\tsnprintf(buf, sizeof(buf), \"_%s\", name);\n\t\tname = buf;\n\t}\n#endif\t\t\t\t\t\t\t/* !__ELF__ */\n\tif ((vp = dlsym(handle, (char *) name)) == NULL)\n\t\tsnprintf(error_message, sizeof(error_message),\n\t\t\t\t \"dlsym (%s) failed\", name);\n\treturn vp;\n#endif\n}\n\nvoid\nBSD44_derived_dlclose(void *handle)\n{\n#if defined(HAVE_DLOPEN)\n\tdlclose(handle);\n#endif\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-postgresql-10.7-gyj6nqg7vr5w65ig6ixyhswgwynvijiu/spack-src/src/backend/port/dynloader/darwin.c": "/*\n * Dynamic loading support for macOS (Darwin)\n *\n * If dlopen() is available (Darwin 10.3 and later), we just use it.\n * Otherwise we emulate it with the older, now deprecated, NSLinkModule API.\n *\n * src/backend/port/dynloader/darwin.c\n */\n#include \"postgres.h\"\n\n#ifdef HAVE_DLOPEN\n#include <dlfcn.h>\n#else\n#include <mach-o/dyld.h>\n#endif\n\n#include \"dynloader.h\"\n\n\n#ifdef HAVE_DLOPEN\n\nvoid *\npg_dlopen(char *filename)\n{\n\treturn dlopen(filename, RTLD_NOW | RTLD_GLOBAL);\n}\n\nvoid\npg_dlclose(void *handle)\n{\n\tdlclose(handle);\n}\n\nPGFunction\npg_dlsym(void *handle, char *funcname)\n{\n\t/* Do not prepend an underscore: see dlopen(3) */\n\treturn dlsym(handle, funcname);\n}\n\nchar *\npg_dlerror(void)\n{\n\treturn dlerror();\n}\n#else\t\t\t\t\t\t\t/* !HAVE_DLOPEN */\n\n/*\n * These routines were taken from the Apache source, but were made\n * available with a PostgreSQL-compatible license.  Kudos Wilfredo\n * S\u00e1nchez <wsanchez@apple.com>.\n */\n\nstatic NSObjectFileImageReturnCode cofiff_result = NSObjectFileImageFailure;\n\nvoid *\npg_dlopen(char *filename)\n{\n\tNSObjectFileImage image;\n\n\tcofiff_result = NSCreateObjectFileImageFromFile(filename, &image);\n\tif (cofiff_result != NSObjectFileImageSuccess)\n\t\treturn NULL;\n\treturn NSLinkModule(image, filename,\n\t\t\t\t\t\tNSLINKMODULE_OPTION_BINDNOW |\n\t\t\t\t\t\tNSLINKMODULE_OPTION_RETURN_ON_ERROR);\n}\n\nvoid\npg_dlclose(void *handle)\n{\n\tNSUnLinkModule(handle, FALSE);\n}\n\nPGFunction\npg_dlsym(void *handle, char *funcname)\n{\n\tNSSymbol symbol;\n\tchar\t   *symname = (char *) malloc(strlen(funcname) + 2);\n\n\tif (!symname)\n\t\treturn NULL;\n\n\tsprintf(symname, \"_%s\", funcname);\n\tif (NSIsSymbolNameDefined(symname))\n\t{\n\t\tsymbol = NSLookupAndBindSymbol(symname);\n\n\t\tfree(symname);\n\t\treturn (PGFunction) NSAddressOfSymbol(symbol);\n\t}\n\telse\n\t{\n\t\tfree(symname);\n\t\treturn NULL;\n\t}\n}\n\nchar *\npg_dlerror(void)\n{\n\tNSLinkEditErrors c;\n\tint\t\t\terrorNumber;\n\tconst char *fileName;\n\tconst char *errorString = NULL;\n\n\tswitch (cofiff_result)\n\t{\n\t\tcase NSObjectFileImageSuccess:\n\t\t\t/* must have failed in NSLinkModule */\n\t\t\tNSLinkEditError(&c, &errorNumber, &fileName, &errorString);\n\t\t\tif (errorString == NULL || *errorString == '\\0')\n\t\t\t\terrorString = \"unknown link-edit failure\";\n\t\t\tbreak;\n\t\tcase NSObjectFileImageFailure:\n\t\t\terrorString = \"failed to open object file\";\n\t\t\tbreak;\n\t\tcase NSObjectFileImageInappropriateFile:\n\t\t\terrorString = \"inappropriate object file\";\n\t\t\tbreak;\n\t\tcase NSObjectFileImageArch:\n\t\t\terrorString = \"object file is for wrong architecture\";\n\t\t\tbreak;\n\t\tcase NSObjectFileImageFormat:\n\t\t\terrorString = \"object file has wrong format\";\n\t\t\tbreak;\n\t\tcase NSObjectFileImageAccess:\n\t\t\terrorString = \"insufficient permissions for object file\";\n\t\t\tbreak;\n\t\tdefault:\n\t\t\terrorString = \"unknown failure to open object file\";\n\t\t\tbreak;\n\t}\n\n\treturn (char *) errorString;\n}\n\n#endif\t\t\t\t\t\t\t/* HAVE_DLOPEN */\n",
        "/tmp/vanessa/spack-stage/spack-stage-postgresql-10.7-gyj6nqg7vr5w65ig6ixyhswgwynvijiu/spack-src/src/backend/port/dynloader/hpux.c": "/*-------------------------------------------------------------------------\n *\n * dynloader.c\n *\t  dynamic loader for HP-UX using the shared library mechanism\n *\n * Portions Copyright (c) 1996-2017, PostgreSQL Global Development Group\n * Portions Copyright (c) 1994, Regents of the University of California\n *\n *\n * IDENTIFICATION\n *\t  src/backend/port/dynloader/hpux.c\n *\n *\tNOTES\n *\t\tall functions are defined here -- it's impossible to trace the\n *\t\tshl_* routines from the bundled HP-UX debugger.\n *\n *-------------------------------------------------------------------------\n */\n#include \"postgres.h\"\n\n/* System includes */\n#include <a.out.h>\n#include <dl.h>\n\n#include \"dynloader.h\"\n#include \"utils/dynamic_loader.h\"\n\nvoid *\npg_dlopen(char *filename)\n{\n\t/*\n\t * Use BIND_IMMEDIATE so that undefined symbols cause a failure return\n\t * from shl_load(), rather than an abort() later on when we attempt to\n\t * call the library!\n\t */\n\tshl_t\t\thandle = shl_load(filename,\n\t\t\t\t\t\t\t\t  BIND_IMMEDIATE | BIND_VERBOSE | DYNAMIC_PATH,\n\t\t\t\t\t\t\t\t  0L);\n\n\treturn (void *) handle;\n}\n\nPGFunction\npg_dlsym(void *handle, char *funcname)\n{\n\tPGFunction\tf;\n\n\tif (shl_findsym((shl_t *) & handle, funcname, TYPE_PROCEDURE, &f) == -1)\n\t\tf = (PGFunction) NULL;\n\treturn f;\n}\n\nvoid\npg_dlclose(void *handle)\n{\n\tshl_unload((shl_t) handle);\n}\n\nchar *\npg_dlerror(void)\n{\n\tstatic char errmsg[] = \"shl_load failed\";\n\n\tif (errno)\n\t\treturn strerror(errno);\n\n\treturn errmsg;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-postgresql-10.7-gyj6nqg7vr5w65ig6ixyhswgwynvijiu/spack-src/src/backend/port/dynloader/linux.h": "/*-------------------------------------------------------------------------\n *\n * linux.h\n *\t\tPort-specific prototypes for Linux\n *\n *\n * Portions Copyright (c) 1996-2017, PostgreSQL Global Development Group\n * Portions Copyright (c) 1994, Regents of the University of California\n *\n * src/backend/port/dynloader/linux.h\n *\n *-------------------------------------------------------------------------\n */\n#ifndef PORT_PROTOS_H\n#define PORT_PROTOS_H\n\n#include \"utils/dynamic_loader.h\"\t/* pgrminclude ignore */\n#ifdef HAVE_DLOPEN\n#include <dlfcn.h>\n#endif\n\n\n#ifdef HAVE_DLOPEN\n\n/*\n * In some older systems, the RTLD_NOW flag isn't defined and the mode\n * argument to dlopen must always be 1.  The RTLD_GLOBAL flag is wanted\n * if available, but it doesn't exist everywhere.\n * If it doesn't exist, set it to 0 so it has no effect.\n */\n#ifndef RTLD_NOW\n#define RTLD_NOW 1\n#endif\n#ifndef RTLD_GLOBAL\n#define RTLD_GLOBAL 0\n#endif\n\n#define pg_dlopen(f)\tdlopen((f), RTLD_NOW | RTLD_GLOBAL)\n#define pg_dlsym\t\tdlsym\n#define pg_dlclose\t\tdlclose\n#define pg_dlerror\t\tdlerror\n#endif\t\t\t\t\t\t\t/* HAVE_DLOPEN */\n\n#endif\t\t\t\t\t\t\t/* PORT_PROTOS_H */\n",
        "/tmp/vanessa/spack-stage/spack-stage-postgresql-10.7-gyj6nqg7vr5w65ig6ixyhswgwynvijiu/spack-src/src/backend/utils/fmgr/dfmgr.c": "/*-------------------------------------------------------------------------\n *\n * dfmgr.c\n *\t  Dynamic function manager code.\n *\n * Portions Copyright (c) 1996-2017, PostgreSQL Global Development Group\n * Portions Copyright (c) 1994, Regents of the University of California\n *\n *\n * IDENTIFICATION\n *\t  src/backend/utils/fmgr/dfmgr.c\n *\n *-------------------------------------------------------------------------\n */\n#include \"postgres.h\"\n\n#include <sys/stat.h>\n\n#include \"dynloader.h\"\n#include \"lib/stringinfo.h\"\n#include \"miscadmin.h\"\n#include \"storage/shmem.h\"\n#include \"utils/dynamic_loader.h\"\n#include \"utils/hsearch.h\"\n\n\n/* signatures for PostgreSQL-specific library init/fini functions */\ntypedef void (*PG_init_t) (void);\ntypedef void (*PG_fini_t) (void);\n\n/* hashtable entry for rendezvous variables */\ntypedef struct\n{\n\tchar\t\tvarName[NAMEDATALEN];\t/* hash key (must be first) */\n\tvoid\t   *varValue;\n} rendezvousHashEntry;\n\n/*\n * List of dynamically loaded files (kept in malloc'd memory).\n */\n\ntypedef struct df_files\n{\n\tstruct df_files *next;\t\t/* List link */\n\tdev_t\t\tdevice;\t\t\t/* Device file is on */\n#ifndef WIN32\t\t\t\t\t/* ensures we never again depend on this under\n\t\t\t\t\t\t\t\t * win32 */\n\tino_t\t\tinode;\t\t\t/* Inode number of file */\n#endif\n\tvoid\t   *handle;\t\t\t/* a handle for pg_dl* functions */\n\tchar\t\tfilename[FLEXIBLE_ARRAY_MEMBER];\t/* Full pathname of file */\n} DynamicFileList;\n\nstatic DynamicFileList *file_list = NULL;\nstatic DynamicFileList *file_tail = NULL;\n\n/* stat() call under Win32 returns an st_ino field, but it has no meaning */\n#ifndef WIN32\n#define SAME_INODE(A,B) ((A).st_ino == (B).inode && (A).st_dev == (B).device)\n#else\n#define SAME_INODE(A,B) false\n#endif\n\nchar\t   *Dynamic_library_path;\n\nstatic void *internal_load_library(const char *libname);\nstatic void incompatible_module_error(const char *libname,\n\t\t\t\t\t\t  const Pg_magic_struct *module_magic_data) pg_attribute_noreturn();\nstatic void internal_unload_library(const char *libname);\nstatic bool file_exists(const char *name);\nstatic char *expand_dynamic_library_name(const char *name);\nstatic void check_restricted_library_name(const char *name);\nstatic char *substitute_libpath_macro(const char *name);\nstatic char *find_in_dynamic_libpath(const char *basename);\n\n/* Magic structure that module needs to match to be accepted */\nstatic const Pg_magic_struct magic_data = PG_MODULE_MAGIC_DATA;\n\n\n/*\n * Load the specified dynamic-link library file, and look for a function\n * named funcname in it.\n *\n * If the function is not found, we raise an error if signalNotFound is true,\n * else return (PGFunction) NULL.  Note that errors in loading the library\n * will provoke ereport() regardless of signalNotFound.\n *\n * If filehandle is not NULL, then *filehandle will be set to a handle\n * identifying the library file.  The filehandle can be used with\n * lookup_external_function to lookup additional functions in the same file\n * at less cost than repeating load_external_function.\n */\nPGFunction\nload_external_function(const char *filename, const char *funcname,\n\t\t\t\t\t   bool signalNotFound, void **filehandle)\n{\n\tchar\t   *fullname;\n\tvoid\t   *lib_handle;\n\tPGFunction\tretval;\n\n\t/* Expand the possibly-abbreviated filename to an exact path name */\n\tfullname = expand_dynamic_library_name(filename);\n\n\t/* Load the shared library, unless we already did */\n\tlib_handle = internal_load_library(fullname);\n\n\t/* Return handle if caller wants it */\n\tif (filehandle)\n\t\t*filehandle = lib_handle;\n\n\t/*\n\t * Look up the function within the library.  According to POSIX dlsym()\n\t * should declare its second argument as \"const char *\", but older\n\t * platforms might not, so for the time being we just cast away const.\n\t */\n\tretval = (PGFunction) pg_dlsym(lib_handle, (char *) funcname);\n\n\tif (retval == NULL && signalNotFound)\n\t\tereport(ERROR,\n\t\t\t\t(errcode(ERRCODE_UNDEFINED_FUNCTION),\n\t\t\t\t errmsg(\"could not find function \\\"%s\\\" in file \\\"%s\\\"\",\n\t\t\t\t\t\tfuncname, fullname)));\n\n\tpfree(fullname);\n\treturn retval;\n}\n\n/*\n * This function loads a shlib file without looking up any particular\n * function in it.  If the same shlib has previously been loaded,\n * unload and reload it.\n *\n * When 'restricted' is true, only libraries in the presumed-secure\n * directory $libdir/plugins may be referenced.\n */\nvoid\nload_file(const char *filename, bool restricted)\n{\n\tchar\t   *fullname;\n\n\t/* Apply security restriction if requested */\n\tif (restricted)\n\t\tcheck_restricted_library_name(filename);\n\n\t/* Expand the possibly-abbreviated filename to an exact path name */\n\tfullname = expand_dynamic_library_name(filename);\n\n\t/* Unload the library if currently loaded */\n\tinternal_unload_library(fullname);\n\n\t/* Load the shared library */\n\t(void) internal_load_library(fullname);\n\n\tpfree(fullname);\n}\n\n/*\n * Lookup a function whose library file is already loaded.\n * Return (PGFunction) NULL if not found.\n */\nPGFunction\nlookup_external_function(void *filehandle, const char *funcname)\n{\n\t/* as above, cast away const for the time being */\n\treturn (PGFunction) pg_dlsym(filehandle, (char *) funcname);\n}\n\n\n/*\n * Load the specified dynamic-link library file, unless it already is\n * loaded.  Return the pg_dl* handle for the file.\n *\n * Note: libname is expected to be an exact name for the library file.\n */\nstatic void *\ninternal_load_library(const char *libname)\n{\n\tDynamicFileList *file_scanner;\n\tPGModuleMagicFunction magic_func;\n\tchar\t   *load_error;\n\tstruct stat stat_buf;\n\tPG_init_t\tPG_init;\n\n\t/*\n\t * Scan the list of loaded FILES to see if the file has been loaded.\n\t */\n\tfor (file_scanner = file_list;\n\t\t file_scanner != NULL &&\n\t\t strcmp(libname, file_scanner->filename) != 0;\n\t\t file_scanner = file_scanner->next)\n\t\t;\n\n\tif (file_scanner == NULL)\n\t{\n\t\t/*\n\t\t * Check for same files - different paths (ie, symlink or link)\n\t\t */\n\t\tif (stat(libname, &stat_buf) == -1)\n\t\t\tereport(ERROR,\n\t\t\t\t\t(errcode_for_file_access(),\n\t\t\t\t\t errmsg(\"could not access file \\\"%s\\\": %m\",\n\t\t\t\t\t\t\tlibname)));\n\n\t\tfor (file_scanner = file_list;\n\t\t\t file_scanner != NULL &&\n\t\t\t !SAME_INODE(stat_buf, *file_scanner);\n\t\t\t file_scanner = file_scanner->next)\n\t\t\t;\n\t}\n\n\tif (file_scanner == NULL)\n\t{\n\t\t/*\n\t\t * File not loaded yet.\n\t\t */\n\t\tfile_scanner = (DynamicFileList *)\n\t\t\tmalloc(offsetof(DynamicFileList, filename) + strlen(libname) + 1);\n\t\tif (file_scanner == NULL)\n\t\t\tereport(ERROR,\n\t\t\t\t\t(errcode(ERRCODE_OUT_OF_MEMORY),\n\t\t\t\t\t errmsg(\"out of memory\")));\n\n\t\tMemSet(file_scanner, 0, offsetof(DynamicFileList, filename));\n\t\tstrcpy(file_scanner->filename, libname);\n\t\tfile_scanner->device = stat_buf.st_dev;\n#ifndef WIN32\n\t\tfile_scanner->inode = stat_buf.st_ino;\n#endif\n\t\tfile_scanner->next = NULL;\n\n\t\tfile_scanner->handle = pg_dlopen(file_scanner->filename);\n\t\tif (file_scanner->handle == NULL)\n\t\t{\n\t\t\tload_error = (char *) pg_dlerror();\n\t\t\tfree((char *) file_scanner);\n\t\t\t/* errcode_for_file_access might not be appropriate here? */\n\t\t\tereport(ERROR,\n\t\t\t\t\t(errcode_for_file_access(),\n\t\t\t\t\t errmsg(\"could not load library \\\"%s\\\": %s\",\n\t\t\t\t\t\t\tlibname, load_error)));\n\t\t}\n\n\t\t/* Check the magic function to determine compatibility */\n\t\tmagic_func = (PGModuleMagicFunction)\n\t\t\tpg_dlsym(file_scanner->handle, PG_MAGIC_FUNCTION_NAME_STRING);\n\t\tif (magic_func)\n\t\t{\n\t\t\tconst Pg_magic_struct *magic_data_ptr = (*magic_func) ();\n\n\t\t\tif (magic_data_ptr->len != magic_data.len ||\n\t\t\t\tmemcmp(magic_data_ptr, &magic_data, magic_data.len) != 0)\n\t\t\t{\n\t\t\t\t/* copy data block before unlinking library */\n\t\t\t\tPg_magic_struct module_magic_data = *magic_data_ptr;\n\n\t\t\t\t/* try to unlink library */\n\t\t\t\tpg_dlclose(file_scanner->handle);\n\t\t\t\tfree((char *) file_scanner);\n\n\t\t\t\t/* issue suitable complaint */\n\t\t\t\tincompatible_module_error(libname, &module_magic_data);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t/* try to unlink library */\n\t\t\tpg_dlclose(file_scanner->handle);\n\t\t\tfree((char *) file_scanner);\n\t\t\t/* complain */\n\t\t\tereport(ERROR,\n\t\t\t\t\t(errmsg(\"incompatible library \\\"%s\\\": missing magic block\",\n\t\t\t\t\t\t\tlibname),\n\t\t\t\t\t errhint(\"Extension libraries are required to use the PG_MODULE_MAGIC macro.\")));\n\t\t}\n\n\t\t/*\n\t\t * If the library has a _PG_init() function, call it.\n\t\t */\n\t\tPG_init = (PG_init_t) pg_dlsym(file_scanner->handle, \"_PG_init\");\n\t\tif (PG_init)\n\t\t\t(*PG_init) ();\n\n\t\t/* OK to link it into list */\n\t\tif (file_list == NULL)\n\t\t\tfile_list = file_scanner;\n\t\telse\n\t\t\tfile_tail->next = file_scanner;\n\t\tfile_tail = file_scanner;\n\t}\n\n\treturn file_scanner->handle;\n}\n\n/*\n * Report a suitable error for an incompatible magic block.\n */\nstatic void\nincompatible_module_error(const char *libname,\n\t\t\t\t\t\t  const Pg_magic_struct *module_magic_data)\n{\n\tStringInfoData details;\n\n\t/*\n\t * If the version doesn't match, just report that, because the rest of the\n\t * block might not even have the fields we expect.\n\t */\n\tif (magic_data.version != module_magic_data->version)\n\t{\n\t\tchar\t\tlibrary_version[32];\n\n\t\tif (module_magic_data->version >= 1000)\n\t\t\tsnprintf(library_version, sizeof(library_version), \"%d\",\n\t\t\t\t\t module_magic_data->version / 100);\n\t\telse\n\t\t\tsnprintf(library_version, sizeof(library_version), \"%d.%d\",\n\t\t\t\t\t module_magic_data->version / 100,\n\t\t\t\t\t module_magic_data->version % 100);\n\t\tereport(ERROR,\n\t\t\t\t(errmsg(\"incompatible library \\\"%s\\\": version mismatch\",\n\t\t\t\t\t\tlibname),\n\t\t\t\t errdetail(\"Server is version %d, library is version %s.\",\n\t\t\t\t\t\t   magic_data.version / 100, library_version)));\n\t}\n\n\t/*\n\t * Otherwise, spell out which fields don't agree.\n\t *\n\t * XXX this code has to be adjusted any time the set of fields in a magic\n\t * block change!\n\t */\n\tinitStringInfo(&details);\n\n\tif (module_magic_data->funcmaxargs != magic_data.funcmaxargs)\n\t{\n\t\tif (details.len)\n\t\t\tappendStringInfoChar(&details, '\\n');\n\t\tappendStringInfo(&details,\n\t\t\t\t\t\t _(\"Server has FUNC_MAX_ARGS = %d, library has %d.\"),\n\t\t\t\t\t\t magic_data.funcmaxargs,\n\t\t\t\t\t\t module_magic_data->funcmaxargs);\n\t}\n\tif (module_magic_data->indexmaxkeys != magic_data.indexmaxkeys)\n\t{\n\t\tif (details.len)\n\t\t\tappendStringInfoChar(&details, '\\n');\n\t\tappendStringInfo(&details,\n\t\t\t\t\t\t _(\"Server has INDEX_MAX_KEYS = %d, library has %d.\"),\n\t\t\t\t\t\t magic_data.indexmaxkeys,\n\t\t\t\t\t\t module_magic_data->indexmaxkeys);\n\t}\n\tif (module_magic_data->namedatalen != magic_data.namedatalen)\n\t{\n\t\tif (details.len)\n\t\t\tappendStringInfoChar(&details, '\\n');\n\t\tappendStringInfo(&details,\n\t\t\t\t\t\t _(\"Server has NAMEDATALEN = %d, library has %d.\"),\n\t\t\t\t\t\t magic_data.namedatalen,\n\t\t\t\t\t\t module_magic_data->namedatalen);\n\t}\n\tif (module_magic_data->float4byval != magic_data.float4byval)\n\t{\n\t\tif (details.len)\n\t\t\tappendStringInfoChar(&details, '\\n');\n\t\tappendStringInfo(&details,\n\t\t\t\t\t\t _(\"Server has FLOAT4PASSBYVAL = %s, library has %s.\"),\n\t\t\t\t\t\t magic_data.float4byval ? \"true\" : \"false\",\n\t\t\t\t\t\t module_magic_data->float4byval ? \"true\" : \"false\");\n\t}\n\tif (module_magic_data->float8byval != magic_data.float8byval)\n\t{\n\t\tif (details.len)\n\t\t\tappendStringInfoChar(&details, '\\n');\n\t\tappendStringInfo(&details,\n\t\t\t\t\t\t _(\"Server has FLOAT8PASSBYVAL = %s, library has %s.\"),\n\t\t\t\t\t\t magic_data.float8byval ? \"true\" : \"false\",\n\t\t\t\t\t\t module_magic_data->float8byval ? \"true\" : \"false\");\n\t}\n\n\tif (details.len == 0)\n\t\tappendStringInfoString(&details,\n\t\t\t\t\t\t\t   _(\"Magic block has unexpected length or padding difference.\"));\n\n\tereport(ERROR,\n\t\t\t(errmsg(\"incompatible library \\\"%s\\\": magic block mismatch\",\n\t\t\t\t\tlibname),\n\t\t\t errdetail_internal(\"%s\", details.data)));\n}\n\n/*\n * Unload the specified dynamic-link library file, if it is loaded.\n *\n * Note: libname is expected to be an exact name for the library file.\n *\n * XXX for the moment, this is disabled, resulting in LOAD of an already-loaded\n * library always being a no-op.  We might re-enable it someday if we can\n * convince ourselves we have safe protocols for un-hooking from hook function\n * pointers, releasing custom GUC variables, and perhaps other things that\n * are definitely unsafe currently.\n */\nstatic void\ninternal_unload_library(const char *libname)\n{\n#ifdef NOT_USED\n\tDynamicFileList *file_scanner,\n\t\t\t   *prv,\n\t\t\t   *nxt;\n\tstruct stat stat_buf;\n\tPG_fini_t\tPG_fini;\n\n\t/*\n\t * We need to do stat() in order to determine whether this is the same\n\t * file as a previously loaded file; it's also handy so as to give a good\n\t * error message if bogus file name given.\n\t */\n\tif (stat(libname, &stat_buf) == -1)\n\t\tereport(ERROR,\n\t\t\t\t(errcode_for_file_access(),\n\t\t\t\t errmsg(\"could not access file \\\"%s\\\": %m\", libname)));\n\n\t/*\n\t * We have to zap all entries in the list that match on either filename or\n\t * inode, else internal_load_library() will still think it's present.\n\t */\n\tprv = NULL;\n\tfor (file_scanner = file_list; file_scanner != NULL; file_scanner = nxt)\n\t{\n\t\tnxt = file_scanner->next;\n\t\tif (strcmp(libname, file_scanner->filename) == 0 ||\n\t\t\tSAME_INODE(stat_buf, *file_scanner))\n\t\t{\n\t\t\tif (prv)\n\t\t\t\tprv->next = nxt;\n\t\t\telse\n\t\t\t\tfile_list = nxt;\n\n\t\t\t/*\n\t\t\t * If the library has a _PG_fini() function, call it.\n\t\t\t */\n\t\t\tPG_fini = (PG_fini_t) pg_dlsym(file_scanner->handle, \"_PG_fini\");\n\t\t\tif (PG_fini)\n\t\t\t\t(*PG_fini) ();\n\n\t\t\tclear_external_function_hash(file_scanner->handle);\n\t\t\tpg_dlclose(file_scanner->handle);\n\t\t\tfree((char *) file_scanner);\n\t\t\t/* prv does not change */\n\t\t}\n\t\telse\n\t\t\tprv = file_scanner;\n\t}\n#endif\t\t\t\t\t\t\t/* NOT_USED */\n}\n\nstatic bool\nfile_exists(const char *name)\n{\n\tstruct stat st;\n\n\tAssertArg(name != NULL);\n\n\tif (stat(name, &st) == 0)\n\t\treturn S_ISDIR(st.st_mode) ? false : true;\n\telse if (!(errno == ENOENT || errno == ENOTDIR || errno == EACCES))\n\t\tereport(ERROR,\n\t\t\t\t(errcode_for_file_access(),\n\t\t\t\t errmsg(\"could not access file \\\"%s\\\": %m\", name)));\n\n\treturn false;\n}\n\n\n/* Example format: \".so\" */\n#ifndef DLSUFFIX\n#error \"DLSUFFIX must be defined to compile this file.\"\n#endif\n\n/*\n * If name contains a slash, check if the file exists, if so return\n * the name.  Else (no slash) try to expand using search path (see\n * find_in_dynamic_libpath below); if that works, return the fully\n * expanded file name.  If the previous failed, append DLSUFFIX and\n * try again.  If all fails, just return the original name.\n *\n * The result will always be freshly palloc'd.\n */\nstatic char *\nexpand_dynamic_library_name(const char *name)\n{\n\tbool\t\thave_slash;\n\tchar\t   *new;\n\tchar\t   *full;\n\n\tAssertArg(name);\n\n\thave_slash = (first_dir_separator(name) != NULL);\n\n\tif (!have_slash)\n\t{\n\t\tfull = find_in_dynamic_libpath(name);\n\t\tif (full)\n\t\t\treturn full;\n\t}\n\telse\n\t{\n\t\tfull = substitute_libpath_macro(name);\n\t\tif (file_exists(full))\n\t\t\treturn full;\n\t\tpfree(full);\n\t}\n\n\tnew = psprintf(\"%s%s\", name, DLSUFFIX);\n\n\tif (!have_slash)\n\t{\n\t\tfull = find_in_dynamic_libpath(new);\n\t\tpfree(new);\n\t\tif (full)\n\t\t\treturn full;\n\t}\n\telse\n\t{\n\t\tfull = substitute_libpath_macro(new);\n\t\tpfree(new);\n\t\tif (file_exists(full))\n\t\t\treturn full;\n\t\tpfree(full);\n\t}\n\n\t/*\n\t * If we can't find the file, just return the string as-is. The ensuing\n\t * load attempt will fail and report a suitable message.\n\t */\n\treturn pstrdup(name);\n}\n\n/*\n * Check a restricted library name.  It must begin with \"$libdir/plugins/\"\n * and there must not be any directory separators after that (this is\n * sufficient to prevent \"..\" style attacks).\n */\nstatic void\ncheck_restricted_library_name(const char *name)\n{\n\tif (strncmp(name, \"$libdir/plugins/\", 16) != 0 ||\n\t\tfirst_dir_separator(name + 16) != NULL)\n\t\tereport(ERROR,\n\t\t\t\t(errcode(ERRCODE_INSUFFICIENT_PRIVILEGE),\n\t\t\t\t errmsg(\"access to library \\\"%s\\\" is not allowed\",\n\t\t\t\t\t\tname)));\n}\n\n/*\n * Substitute for any macros appearing in the given string.\n * Result is always freshly palloc'd.\n */\nstatic char *\nsubstitute_libpath_macro(const char *name)\n{\n\tconst char *sep_ptr;\n\n\tAssertArg(name != NULL);\n\n\t/* Currently, we only recognize $libdir at the start of the string */\n\tif (name[0] != '$')\n\t\treturn pstrdup(name);\n\n\tif ((sep_ptr = first_dir_separator(name)) == NULL)\n\t\tsep_ptr = name + strlen(name);\n\n\tif (strlen(\"$libdir\") != sep_ptr - name ||\n\t\tstrncmp(name, \"$libdir\", strlen(\"$libdir\")) != 0)\n\t\tereport(ERROR,\n\t\t\t\t(errcode(ERRCODE_INVALID_NAME),\n\t\t\t\t errmsg(\"invalid macro name in dynamic library path: %s\",\n\t\t\t\t\t\tname)));\n\n\treturn psprintf(\"%s%s\", pkglib_path, sep_ptr);\n}\n\n\n/*\n * Search for a file called 'basename' in the colon-separated search\n * path Dynamic_library_path.  If the file is found, the full file name\n * is returned in freshly palloc'd memory.  If the file is not found,\n * return NULL.\n */\nstatic char *\nfind_in_dynamic_libpath(const char *basename)\n{\n\tconst char *p;\n\tsize_t\t\tbaselen;\n\n\tAssertArg(basename != NULL);\n\tAssertArg(first_dir_separator(basename) == NULL);\n\tAssertState(Dynamic_library_path != NULL);\n\n\tp = Dynamic_library_path;\n\tif (strlen(p) == 0)\n\t\treturn NULL;\n\n\tbaselen = strlen(basename);\n\n\tfor (;;)\n\t{\n\t\tsize_t\t\tlen;\n\t\tchar\t   *piece;\n\t\tchar\t   *mangled;\n\t\tchar\t   *full;\n\n\t\tpiece = first_path_var_separator(p);\n\t\tif (piece == p)\n\t\t\tereport(ERROR,\n\t\t\t\t\t(errcode(ERRCODE_INVALID_NAME),\n\t\t\t\t\t errmsg(\"zero-length component in parameter \\\"dynamic_library_path\\\"\")));\n\n\t\tif (piece == NULL)\n\t\t\tlen = strlen(p);\n\t\telse\n\t\t\tlen = piece - p;\n\n\t\tpiece = palloc(len + 1);\n\t\tstrlcpy(piece, p, len + 1);\n\n\t\tmangled = substitute_libpath_macro(piece);\n\t\tpfree(piece);\n\n\t\tcanonicalize_path(mangled);\n\n\t\t/* only absolute paths */\n\t\tif (!is_absolute_path(mangled))\n\t\t\tereport(ERROR,\n\t\t\t\t\t(errcode(ERRCODE_INVALID_NAME),\n\t\t\t\t\t errmsg(\"component in parameter \\\"dynamic_library_path\\\" is not an absolute path\")));\n\n\t\tfull = palloc(strlen(mangled) + 1 + baselen + 1);\n\t\tsprintf(full, \"%s/%s\", mangled, basename);\n\t\tpfree(mangled);\n\n\t\telog(DEBUG3, \"find_in_dynamic_libpath: trying \\\"%s\\\"\", full);\n\n\t\tif (file_exists(full))\n\t\t\treturn full;\n\n\t\tpfree(full);\n\n\t\tif (p[len] == '\\0')\n\t\t\tbreak;\n\t\telse\n\t\t\tp += len + 1;\n\t}\n\n\treturn NULL;\n}\n\n\n/*\n * Find (or create) a rendezvous variable that one dynamically\n * loaded library can use to meet up with another.\n *\n * On the first call of this function for a particular varName,\n * a \"rendezvous variable\" is created with the given name.\n * The value of the variable is a void pointer (initially set to NULL).\n * Subsequent calls with the same varName just return the address of\n * the existing variable.  Once created, a rendezvous variable lasts\n * for the life of the process.\n *\n * Dynamically loaded libraries can use rendezvous variables\n * to find each other and share information: they just need to agree\n * on the variable name and the data it will point to.\n */\nvoid\t  **\nfind_rendezvous_variable(const char *varName)\n{\n\tstatic HTAB *rendezvousHash = NULL;\n\n\trendezvousHashEntry *hentry;\n\tbool\t\tfound;\n\n\t/* Create a hashtable if we haven't already done so in this process */\n\tif (rendezvousHash == NULL)\n\t{\n\t\tHASHCTL\t\tctl;\n\n\t\tMemSet(&ctl, 0, sizeof(ctl));\n\t\tctl.keysize = NAMEDATALEN;\n\t\tctl.entrysize = sizeof(rendezvousHashEntry);\n\t\trendezvousHash = hash_create(\"Rendezvous variable hash\",\n\t\t\t\t\t\t\t\t\t 16,\n\t\t\t\t\t\t\t\t\t &ctl,\n\t\t\t\t\t\t\t\t\t HASH_ELEM);\n\t}\n\n\t/* Find or create the hashtable entry for this varName */\n\thentry = (rendezvousHashEntry *) hash_search(rendezvousHash,\n\t\t\t\t\t\t\t\t\t\t\t\t varName,\n\t\t\t\t\t\t\t\t\t\t\t\t HASH_ENTER,\n\t\t\t\t\t\t\t\t\t\t\t\t &found);\n\n\t/* Initialize to NULL if first time */\n\tif (!found)\n\t\thentry->varValue = NULL;\n\n\treturn &hentry->varValue;\n}\n\n/*\n * Estimate the amount of space needed to serialize the list of libraries\n * we have loaded.\n */\nSize\nEstimateLibraryStateSpace(void)\n{\n\tDynamicFileList *file_scanner;\n\tSize\t\tsize = 1;\n\n\tfor (file_scanner = file_list;\n\t\t file_scanner != NULL;\n\t\t file_scanner = file_scanner->next)\n\t\tsize = add_size(size, strlen(file_scanner->filename) + 1);\n\n\treturn size;\n}\n\n/*\n * Serialize the list of libraries we have loaded to a chunk of memory.\n */\nvoid\nSerializeLibraryState(Size maxsize, char *start_address)\n{\n\tDynamicFileList *file_scanner;\n\n\tfor (file_scanner = file_list;\n\t\t file_scanner != NULL;\n\t\t file_scanner = file_scanner->next)\n\t{\n\t\tSize\t\tlen;\n\n\t\tlen = strlcpy(start_address, file_scanner->filename, maxsize) + 1;\n\t\tAssert(len < maxsize);\n\t\tmaxsize -= len;\n\t\tstart_address += len;\n\t}\n\tstart_address[0] = '\\0';\n}\n\n/*\n * Load every library the serializing backend had loaded.\n */\nvoid\nRestoreLibraryState(char *start_address)\n{\n\twhile (*start_address != '\\0')\n\t{\n\t\tinternal_load_library(start_address);\n\t\tstart_address += strlen(start_address) + 1;\n\t}\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-postgresql-10.7-gyj6nqg7vr5w65ig6ixyhswgwynvijiu/spack-src/src/port/gettimeofday.c": "/*\n * gettimeofday.c\n *\t  Win32 gettimeofday() replacement\n *\n * src/port/gettimeofday.c\n *\n * Copyright (c) 2003 SRA, Inc.\n * Copyright (c) 2003 SKC, Inc.\n *\n * Permission to use, copy, modify, and distribute this software and\n * its documentation for any purpose, without fee, and without a\n * written agreement is hereby granted, provided that the above\n * copyright notice and this paragraph and the following two\n * paragraphs appear in all copies.\n *\n * IN NO EVENT SHALL THE AUTHOR BE LIABLE TO ANY PARTY FOR DIRECT,\n * INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING\n * LOST PROFITS, ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS\n * DOCUMENTATION, EVEN IF THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED\n * OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n * THE AUTHOR SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS ON AN \"AS\n * IS\" BASIS, AND THE AUTHOR HAS NO OBLIGATIONS TO PROVIDE MAINTENANCE,\n * SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.\n */\n\n#include \"c.h\"\n\n#include <sys/time.h>\n\n/* FILETIME of Jan 1 1970 00:00:00, the PostgreSQL epoch */\nstatic const unsigned __int64 epoch = UINT64CONST(116444736000000000);\n\n/*\n * FILETIME represents the number of 100-nanosecond intervals since\n * January 1, 1601 (UTC).\n */\n#define FILETIME_UNITS_PER_SEC\t10000000L\n#define FILETIME_UNITS_PER_USEC 10\n\n/*\n * Both GetSystemTimeAsFileTime and GetSystemTimePreciseAsFileTime share a\n * signature, so we can just store a pointer to whichever we find. This\n * is the pointer's type.\n */\ntypedef VOID(WINAPI * PgGetSystemTimeFn) (LPFILETIME);\n\n/* One-time initializer function, must match that signature. */\nstatic void WINAPI init_gettimeofday(LPFILETIME lpSystemTimeAsFileTime);\n\n/* Storage for the function we pick at runtime */\nstatic PgGetSystemTimeFn pg_get_system_time = &init_gettimeofday;\n\n/*\n * One time initializer.  Determine whether GetSystemTimePreciseAsFileTime\n * is available and if so, plan to use it; if not, fall back to\n * GetSystemTimeAsFileTime.\n */\nstatic void WINAPI\ninit_gettimeofday(LPFILETIME lpSystemTimeAsFileTime)\n{\n\t/*\n\t * Because it's guaranteed that kernel32.dll will be linked into our\n\t * address space already, we don't need to LoadLibrary it and worry about\n\t * closing it afterwards, so we're not using Pg's dlopen/dlsym() wrapper.\n\t *\n\t * We'll just look up the address of GetSystemTimePreciseAsFileTime if\n\t * present.\n\t *\n\t * While we could look up the Windows version and skip this on Windows\n\t * versions below Windows 8 / Windows Server 2012 there isn't much point,\n\t * and determining the windows version is its self somewhat Windows\n\t * version and development SDK specific...\n\t */\n\tpg_get_system_time = (PgGetSystemTimeFn) GetProcAddress(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tGetModuleHandle(TEXT(\"kernel32.dll\")),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"GetSystemTimePreciseAsFileTime\");\n\tif (pg_get_system_time == NULL)\n\t{\n\t\t/*\n\t\t * The expected error from GetLastError() is ERROR_PROC_NOT_FOUND, if\n\t\t * the function isn't present. No other error should occur.\n\t\t *\n\t\t * We can't report an error here because this might be running in\n\t\t * frontend code; and even if we're in the backend, it's too early to\n\t\t * elog(...) if we get some unexpected error.  Also, it's not a\n\t\t * serious problem, so just silently fall back to\n\t\t * GetSystemTimeAsFileTime irrespective of why the failure occurred.\n\t\t */\n\t\tpg_get_system_time = &GetSystemTimeAsFileTime;\n\t}\n\n\t(*pg_get_system_time) (lpSystemTimeAsFileTime);\n}\n\n/*\n * timezone information is stored outside the kernel so tzp isn't used anymore.\n *\n * Note: this function is not for Win32 high precision timing purposes. See\n * elapsed_time().\n */\nint\ngettimeofday(struct timeval *tp, struct timezone *tzp)\n{\n\tFILETIME\tfile_time;\n\tULARGE_INTEGER ularge;\n\n\t(*pg_get_system_time) (&file_time);\n\tularge.LowPart = file_time.dwLowDateTime;\n\tularge.HighPart = file_time.dwHighDateTime;\n\n\ttp->tv_sec = (long) ((ularge.QuadPart - epoch) / FILETIME_UNITS_PER_SEC);\n\ttp->tv_usec = (long) (((ularge.QuadPart - epoch) % FILETIME_UNITS_PER_SEC)\n\t\t\t\t\t\t  / FILETIME_UNITS_PER_USEC);\n\n\treturn 0;\n}\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-postgresql-10.7-gyj6nqg7vr5w65ig6ixyhswgwynvijiu/spack-src/src/bin/pg_config/po/nb.po",
        "/tmp/vanessa/spack-stage/spack-stage-postgresql-10.7-gyj6nqg7vr5w65ig6ixyhswgwynvijiu/spack-src/src/timezone/tznames/Europe.txt",
        "/tmp/vanessa/spack-stage/spack-stage-postgresql-10.7-gyj6nqg7vr5w65ig6ixyhswgwynvijiu/spack-src/src/backend/utils/mb/conversion_procs/README.euc_jp",
        "/tmp/vanessa/spack-stage/spack-stage-postgresql-10.7-gyj6nqg7vr5w65ig6ixyhswgwynvijiu/spack-src/src/port/win32.ico",
        "/tmp/vanessa/spack-stage/spack-stage-postgresql-10.7-gyj6nqg7vr5w65ig6ixyhswgwynvijiu/spack-src/src/test/mb/expected/big5.out",
        "/tmp/vanessa/spack-stage/spack-stage-postgresql-10.7-gyj6nqg7vr5w65ig6ixyhswgwynvijiu/spack-src/src/test/mb/expected/mule_internal.out",
        "/tmp/vanessa/spack-stage/spack-stage-postgresql-10.7-gyj6nqg7vr5w65ig6ixyhswgwynvijiu/spack-src/src/test/mb/expected/euc_kr.out",
        "/tmp/vanessa/spack-stage/spack-stage-postgresql-10.7-gyj6nqg7vr5w65ig6ixyhswgwynvijiu/spack-src/src/test/mb/expected/sjis.out",
        "/tmp/vanessa/spack-stage/spack-stage-postgresql-10.7-gyj6nqg7vr5w65ig6ixyhswgwynvijiu/spack-src/src/test/mb/expected/euc_jp.out",
        "/tmp/vanessa/spack-stage/spack-stage-postgresql-10.7-gyj6nqg7vr5w65ig6ixyhswgwynvijiu/spack-src/src/test/mb/expected/gb18030.out",
        "/tmp/vanessa/spack-stage/spack-stage-postgresql-10.7-gyj6nqg7vr5w65ig6ixyhswgwynvijiu/spack-src/src/test/mb/expected/euc_cn.out",
        "/tmp/vanessa/spack-stage/spack-stage-postgresql-10.7-gyj6nqg7vr5w65ig6ixyhswgwynvijiu/spack-src/src/test/mb/expected/euc_tw.out",
        "/tmp/vanessa/spack-stage/spack-stage-postgresql-10.7-gyj6nqg7vr5w65ig6ixyhswgwynvijiu/spack-src/src/test/mb/sql/big5.sql",
        "/tmp/vanessa/spack-stage/spack-stage-postgresql-10.7-gyj6nqg7vr5w65ig6ixyhswgwynvijiu/spack-src/src/test/mb/sql/euc_cn.sql",
        "/tmp/vanessa/spack-stage/spack-stage-postgresql-10.7-gyj6nqg7vr5w65ig6ixyhswgwynvijiu/spack-src/src/test/mb/sql/gb18030.sql",
        "/tmp/vanessa/spack-stage/spack-stage-postgresql-10.7-gyj6nqg7vr5w65ig6ixyhswgwynvijiu/spack-src/src/test/mb/sql/euc_jp.sql",
        "/tmp/vanessa/spack-stage/spack-stage-postgresql-10.7-gyj6nqg7vr5w65ig6ixyhswgwynvijiu/spack-src/src/test/mb/sql/mule_internal.sql",
        "/tmp/vanessa/spack-stage/spack-stage-postgresql-10.7-gyj6nqg7vr5w65ig6ixyhswgwynvijiu/spack-src/src/test/mb/sql/euc_tw.sql",
        "/tmp/vanessa/spack-stage/spack-stage-postgresql-10.7-gyj6nqg7vr5w65ig6ixyhswgwynvijiu/spack-src/src/test/mb/sql/sjis.sql",
        "/tmp/vanessa/spack-stage/spack-stage-postgresql-10.7-gyj6nqg7vr5w65ig6ixyhswgwynvijiu/spack-src/src/test/mb/sql/euc_kr.sql",
        "/tmp/vanessa/spack-stage/spack-stage-postgresql-10.7-gyj6nqg7vr5w65ig6ixyhswgwynvijiu/spack-src/src/test/locale/gr_GR.ISO8859-7/test-gr-sort.in",
        "/tmp/vanessa/spack-stage/spack-stage-postgresql-10.7-gyj6nqg7vr5w65ig6ixyhswgwynvijiu/spack-src/src/test/locale/gr_GR.ISO8859-7/test-gr-select.sql.in",
        "/tmp/vanessa/spack-stage/spack-stage-postgresql-10.7-gyj6nqg7vr5w65ig6ixyhswgwynvijiu/spack-src/src/test/locale/gr_GR.ISO8859-7/test-gr.sql.in",
        "/tmp/vanessa/spack-stage/spack-stage-postgresql-10.7-gyj6nqg7vr5w65ig6ixyhswgwynvijiu/spack-src/src/test/locale/gr_GR.ISO8859-7/expected/test-gr-sort.out",
        "/tmp/vanessa/spack-stage/spack-stage-postgresql-10.7-gyj6nqg7vr5w65ig6ixyhswgwynvijiu/spack-src/src/test/locale/gr_GR.ISO8859-7/expected/gr-ctype.out",
        "/tmp/vanessa/spack-stage/spack-stage-postgresql-10.7-gyj6nqg7vr5w65ig6ixyhswgwynvijiu/spack-src/src/test/locale/gr_GR.ISO8859-7/expected/test-gr-varchar.sql.out",
        "/tmp/vanessa/spack-stage/spack-stage-postgresql-10.7-gyj6nqg7vr5w65ig6ixyhswgwynvijiu/spack-src/src/test/locale/gr_GR.ISO8859-7/expected/test-gr-char.sql.out",
        "/tmp/vanessa/spack-stage/spack-stage-postgresql-10.7-gyj6nqg7vr5w65ig6ixyhswgwynvijiu/spack-src/src/test/locale/gr_GR.ISO8859-7/expected/test-gr-text.sql.out",
        "/tmp/vanessa/spack-stage/spack-stage-postgresql-10.7-gyj6nqg7vr5w65ig6ixyhswgwynvijiu/spack-src/src/test/locale/gr_GR.ISO8859-7/expected/test-gr-select.sql.out",
        "/tmp/vanessa/spack-stage/spack-stage-postgresql-10.7-gyj6nqg7vr5w65ig6ixyhswgwynvijiu/spack-src/src/test/locale/koi8-to-win1251/test-koi8.sql.in",
        "/tmp/vanessa/spack-stage/spack-stage-postgresql-10.7-gyj6nqg7vr5w65ig6ixyhswgwynvijiu/spack-src/src/test/locale/koi8-to-win1251/test-koi8-sort.in",
        "/tmp/vanessa/spack-stage/spack-stage-postgresql-10.7-gyj6nqg7vr5w65ig6ixyhswgwynvijiu/spack-src/src/test/locale/koi8-to-win1251/test-koi8-select.sql.in",
        "/tmp/vanessa/spack-stage/spack-stage-postgresql-10.7-gyj6nqg7vr5w65ig6ixyhswgwynvijiu/spack-src/src/test/locale/koi8-to-win1251/expected/test-koi8-varchar.sql.out",
        "/tmp/vanessa/spack-stage/spack-stage-postgresql-10.7-gyj6nqg7vr5w65ig6ixyhswgwynvijiu/spack-src/src/test/locale/koi8-to-win1251/expected/test-koi8-sort.out",
        "/tmp/vanessa/spack-stage/spack-stage-postgresql-10.7-gyj6nqg7vr5w65ig6ixyhswgwynvijiu/spack-src/src/test/locale/koi8-to-win1251/expected/test-koi8-text.sql.out",
        "/tmp/vanessa/spack-stage/spack-stage-postgresql-10.7-gyj6nqg7vr5w65ig6ixyhswgwynvijiu/spack-src/src/test/locale/koi8-to-win1251/expected/test-koi8-select.sql.out",
        "/tmp/vanessa/spack-stage/spack-stage-postgresql-10.7-gyj6nqg7vr5w65ig6ixyhswgwynvijiu/spack-src/src/test/locale/koi8-to-win1251/expected/test-koi8-char.sql.out",
        "/tmp/vanessa/spack-stage/spack-stage-postgresql-10.7-gyj6nqg7vr5w65ig6ixyhswgwynvijiu/spack-src/src/test/locale/de_DE.ISO8859-1/test-de-sort.in",
        "/tmp/vanessa/spack-stage/spack-stage-postgresql-10.7-gyj6nqg7vr5w65ig6ixyhswgwynvijiu/spack-src/src/test/locale/de_DE.ISO8859-1/test-de.sql.in",
        "/tmp/vanessa/spack-stage/spack-stage-postgresql-10.7-gyj6nqg7vr5w65ig6ixyhswgwynvijiu/spack-src/src/test/locale/de_DE.ISO8859-1/test-de-upper.sql.in",
        "/tmp/vanessa/spack-stage/spack-stage-postgresql-10.7-gyj6nqg7vr5w65ig6ixyhswgwynvijiu/spack-src/src/test/locale/de_DE.ISO8859-1/test-de-select.sql.in",
        "/tmp/vanessa/spack-stage/spack-stage-postgresql-10.7-gyj6nqg7vr5w65ig6ixyhswgwynvijiu/spack-src/src/test/locale/de_DE.ISO8859-1/expected/test-de-upper-char.sql.out",
        "/tmp/vanessa/spack-stage/spack-stage-postgresql-10.7-gyj6nqg7vr5w65ig6ixyhswgwynvijiu/spack-src/src/test/locale/de_DE.ISO8859-1/expected/test-de-select.sql.out",
        "/tmp/vanessa/spack-stage/spack-stage-postgresql-10.7-gyj6nqg7vr5w65ig6ixyhswgwynvijiu/spack-src/src/test/locale/de_DE.ISO8859-1/expected/test-de-text.sql.out",
        "/tmp/vanessa/spack-stage/spack-stage-postgresql-10.7-gyj6nqg7vr5w65ig6ixyhswgwynvijiu/spack-src/src/test/locale/de_DE.ISO8859-1/expected/de-ctype.out",
        "/tmp/vanessa/spack-stage/spack-stage-postgresql-10.7-gyj6nqg7vr5w65ig6ixyhswgwynvijiu/spack-src/src/test/locale/de_DE.ISO8859-1/expected/test-de-sort.out",
        "/tmp/vanessa/spack-stage/spack-stage-postgresql-10.7-gyj6nqg7vr5w65ig6ixyhswgwynvijiu/spack-src/src/test/locale/de_DE.ISO8859-1/expected/test-de-upper-text.sql.out",
        "/tmp/vanessa/spack-stage/spack-stage-postgresql-10.7-gyj6nqg7vr5w65ig6ixyhswgwynvijiu/spack-src/src/test/locale/de_DE.ISO8859-1/expected/test-de-upper-varchar.sql.out",
        "/tmp/vanessa/spack-stage/spack-stage-postgresql-10.7-gyj6nqg7vr5w65ig6ixyhswgwynvijiu/spack-src/src/test/locale/de_DE.ISO8859-1/expected/test-de-char.sql.out",
        "/tmp/vanessa/spack-stage/spack-stage-postgresql-10.7-gyj6nqg7vr5w65ig6ixyhswgwynvijiu/spack-src/src/test/locale/de_DE.ISO8859-1/expected/test-de-varchar.sql.out",
        "/tmp/vanessa/spack-stage/spack-stage-postgresql-10.7-gyj6nqg7vr5w65ig6ixyhswgwynvijiu/spack-src/src/test/locale/koi8-r/test-koi8.sql.in",
        "/tmp/vanessa/spack-stage/spack-stage-postgresql-10.7-gyj6nqg7vr5w65ig6ixyhswgwynvijiu/spack-src/src/test/locale/koi8-r/test-koi8-sort.in",
        "/tmp/vanessa/spack-stage/spack-stage-postgresql-10.7-gyj6nqg7vr5w65ig6ixyhswgwynvijiu/spack-src/src/test/locale/koi8-r/test-koi8-select.sql.in",
        "/tmp/vanessa/spack-stage/spack-stage-postgresql-10.7-gyj6nqg7vr5w65ig6ixyhswgwynvijiu/spack-src/src/test/locale/koi8-r/expected/test-koi8-varchar.sql.out",
        "/tmp/vanessa/spack-stage/spack-stage-postgresql-10.7-gyj6nqg7vr5w65ig6ixyhswgwynvijiu/spack-src/src/test/locale/koi8-r/expected/koi8-ctype.out",
        "/tmp/vanessa/spack-stage/spack-stage-postgresql-10.7-gyj6nqg7vr5w65ig6ixyhswgwynvijiu/spack-src/src/test/locale/koi8-r/expected/test-koi8-sort.out",
        "/tmp/vanessa/spack-stage/spack-stage-postgresql-10.7-gyj6nqg7vr5w65ig6ixyhswgwynvijiu/spack-src/src/test/locale/koi8-r/expected/test-koi8-text.sql.out",
        "/tmp/vanessa/spack-stage/spack-stage-postgresql-10.7-gyj6nqg7vr5w65ig6ixyhswgwynvijiu/spack-src/src/test/locale/koi8-r/expected/test-koi8-select.sql.out",
        "/tmp/vanessa/spack-stage/spack-stage-postgresql-10.7-gyj6nqg7vr5w65ig6ixyhswgwynvijiu/spack-src/src/test/locale/koi8-r/expected/test-koi8-char.sql.out",
        "/tmp/vanessa/spack-stage/spack-stage-postgresql-10.7-gyj6nqg7vr5w65ig6ixyhswgwynvijiu/spack-src/contrib/unaccent/expected/unaccent.out",
        "/tmp/vanessa/spack-stage/spack-stage-postgresql-10.7-gyj6nqg7vr5w65ig6ixyhswgwynvijiu/spack-src/contrib/unaccent/sql/unaccent.sql"
    ],
    "total_files": 6178
}