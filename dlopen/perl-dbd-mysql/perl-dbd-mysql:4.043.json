{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-perl-dbd-mysql-4.043-c34dte7z7ydfpx2igr577ajbjogcplt4/spack-src/lib/DBD/mysql/INSTALL.pod": "=encoding utf8\n\n=head1 NAME\n\nDBD::mysql::INSTALL - How to install and configure DBD::mysql\n\n=head1 SYNOPSIS\n\n  perl Makefile.PL [options]\n  make\n  make test\n  make install\n\n\n=head1 DESCRIPTION\n\nThis document describes the installation and configuration of\nDBD::mysql, the Perl DBI driver for the MySQL database. Before\nreading on, make sure that you have the prerequisites available:\nPerl, MySQL and DBI. For details see the separate section\nL</PREREQUISITES>.\n\nDepending on your version of Perl, it might be possible to\nuse a binary distribution of DBD::mysql. If possible, this is\nrecommended. Otherwise you need to install from the sources.\nIf so, you will definitely need a C compiler. Installation\nfrom binaries and sources are both described in separate\nsections. L</BINARY INSTALLATION>. L</SOURCE INSTALLATION>.\n\nFinally, if you encounter any problems, do not forget to\nread the section on known problems L</KNOWN PROBLEMS>. If\nthat doesn't help, you should check the section on L</SUPPORT>.\n\n=head1 PREREQUISITES\n\n=over\n\n=item Perl\n\nPreferably a version of Perl, that comes preconfigured with\nyour system. For example, all Linux and FreeBSD distributions\ncome with Perl. For Windows, using ActivePerl or Strawberry Perl\nis recommended, see L<http://www.activestate.com> and\nL<http://www.strawberryperl.com> for details.\n\n=item MySQL\n\nYou need not install the actual MySQL database server, the\nclient files and the development files are sufficient. For\nexample, Fedora Linux distribution comes with RPM files\n(using YUM) B<mysql> and B<mysql-server> (use \"yum search\"\nto find exact package names). These are sufficient, if the MySQL\nserver is located on a foreign machine.  You may also create client\nfiles by compiling from the MySQL source distribution and using\n\n  configure --without-server\n\nIf you are using Windows and need to compile from sources\n(which is only the case if you are not using ActivePerl or\nStrawberry Perl),\nthen you must ensure that the header and library files are\ninstalled. This may require choosing a \"Custom installation\"\nand selecting the appropriate option when running the\nMySQL setup program.\n\n=item DBI\n\nDBD::mysql is a DBI driver, hence you need DBI. It is available\nfrom the same source where you got the DBD::mysql distribution\nfrom.\n\n=item C compiler\n\nA C compiler is only required if you install from source. In\nmost cases there are binary distributions of DBD::mysql\navailable. However, if you need a C compiler, make sure, that\nit is the same C compiler that was used for compiling Perl and\nMySQL! Otherwise you will almost definitely encounter problems\nbecause of differences in the underlying C runtime libraries.\n\nIn the worst case, this might mean to compile Perl and MySQL\nyourself. But believe me, experience shows that a lot of problems\nare fixed this way.\n\n=item Gzip libraries\n\nLate versions of MySQL come with support for compression. Thus\nit B<may> be required that you have install an RPM package like\nlibz-devel, libgz-devel or something similar.\n\n=back\n\n\n=head1 BINARY INSTALLATION\n\nBinary installation is possible in the most cases, depending\non your system.\n\n\n=head2 Windows\n\n=head3 Strawberry Perl\n\nStrawberry Perl comes bundled with DBD::mysql and the needed\nclient libraries.\n\n=head3 ActiveState Perl\n\nActivePerl offers a PPM archive of DBD::mysql. All you need to\ndo is typing in a cmd.exe window:\n\n  ppm install DBD-mysql\n\nThis will fetch the module via HTTP and install them. If you\nneed to use a WWW proxy server, the environment variable\nHTTP_proxy must be set:\n\n  set HTTP_proxy=http://myproxy.example.com:8080/\n  ppm install DBD-mysql\n\nOf course you need to replace the host name C<myproxy.example.com>\nand the port number C<8080> with your local values.\n\nIf the above procedure doesn't work, please upgrade to the latest\nversion of ActivePerl. ActiveState has a policy where it only\nprovides access free-of-charge for the PPM mirrors of the last\nfew stable Perl releases. If you have an older perl, you'd either\nneed to upgrade your perl or contact ActiveState about a subscription.\n\n\n=head2 Red Hat Enterprise Linux (RHEL), CentOS and Fedora\n\nRed Hat Enterprise Linux, its community derivatives such as\nCentOS, and Fedora come with MySQL and DBD::mysql.\n\nUse the following command to install DBD::mysql:\n\n    yum install \"perl(DBD::mysql)\"\n\n\n=head2 Debian and Ubuntu\n\nOn Debian, Ubuntu and derivatives you can install DBD::mysql from\nthe repositories with the following command:\n\n    sudo apt-get install libdbd-mysql-perl\n\n\n=head2 SLES and openSUSE\n\nOn SUSE Linux Enterprise and the community version openSUSE, you\ncan install DBD::mysql from the repositories with the following\ncommand:\n\n    zypper install perl-DBD-mysql\n\n\n=head2 Other systems\n\nIn the case of other Linux or FreeBSD distributions it is very likely\nthat all you need comes with your distribution.\nI just cannot give you names, as I am not using\nthese systems.\n\nPlease let me know if you find the files in your favorite\nLinux or FreeBSD distribution so that I can extend the above list.\n\n\n=head1 SOURCE INSTALLATION\n\nSo you need to install from sources. If you are lucky, the Perl\nmodule C<CPAN> will do all for you, thanks to the excellent work\nof Andreas K\u00f6nig. Otherwise you will need to do a manual\ninstallation.\nAll of these installation types have their own section:\nL</CPAN installation>, L</Manual installation> and L</Configuration>.\n\nThe DBD::mysql Makefile.PL needs to know where to find your MySQL\ninstallation. This may be achieved using command line switches\n(see L</Configuration>) or automatically using the mysql_config binary\nwhich comes with most MySQL distributions. If your MySQL distribution\ncontains mysql_config the easiest method is to ensure this binary\nis on your path.\n\nTypically, this is the case if you've installed the mysql library\nfrom your systems' package manager.\n\ne.g.\n\n  PATH=$PATH:/usr/local/mysql/bin\n  export PATH\n\nAs stated, to compile DBD::mysql you'll need a C compiler. This should\nbe the same compiler as the one used to build perl AND the mysql client\nlibraries. If you're on linux, this is most typically the case and you\nneed not worry. If you're on UNIX systems, you might want to pay\nattention.\n\nAlso you'll need to get the MySQL client and development headers on\nyour system. The easiest is to get these from your package manager.\n\nTo run the tests that ship with the module, you'll need access to a\nrunning MySQL server. This can be running on localhost, but it can also\nbe on a remote machine.\n\nOn Fedora the process is as follows. Please note that Fedora actually\nships with MariaDB but not with MySQL. This is not a problem, it\nwill work just as well.\nIn this example we install and start a local server for running the\ntests against.\n\n    yum -y install make gcc mariadb-devel mariadb-libs mariadb-server\n    yum -y install \"perl(Test::Deep)\" \"perl(Test::More)\"\n    systemctl start mariadb.service\n\n\n=head2 Environment Variables\n\nFor ease of use, you can set environment variables for\nDBD::mysql installation. You can set any or all of the options, and\nexport them by putting them in your .bashrc or the like:\n\n    export DBD_MYSQL_CFLAGS=-I/usr/local/mysql/include/mysql\n    export DBD_MYSQL_LIBS=\"-L/usr/local/mysql/lib/mysql -lmysqlclient\"\n    export DBD_MYSQL_EMBEDDED=\n    export DBD_MYSQL_CONFIG=mysql_config\n    export DBD_MYSQL_NOCATCHSTDERR=0\n    export DBD_MYSQL_NOFOUNDROWS=0\n    export DBD_MYSQL_NOSSL=\n    export DBD_MYSQL_TESTDB=test\n    export DBD_MYSQL_TESTHOST=localhost\n    export DBD_MYSQL_TESTPASSWORD=s3kr1+\n    export DBD_MYSQL_TESTPORT=3306\n    export DBD_MYSQL_TESTUSER=me\n\nThe most useful may be the host, database, port, socket, user, and password.\n\nInstallation will first look to your mysql_config, and then your\nenvironment variables, and then it will guess with intelligent defaults.\n\n=head2 CPAN installation\n\nInstallation of DBD::mysql can be incredibly easy:\n\n  cpan DBD::mysql\n\nPlease note that this will only work if the prerequisites are\nfulfilled, which means you have a C-compiler installed, and you\nhave the development headers and mysql client libraries available\non your system.\n\nIf you are using the CPAN module for the first time, just answer\nthe questions by accepting the defaults which are fine in most\ncases.\n\nIf you cannot get the CPAN module working, you might try manual\ninstallation. If installation with CPAN fails because the your local\nsettings have been guessed wrong, you need to ensure MySQL's\nmysql_config is on your path (see L</SOURCE INSTALLATION>) or\nalternatively create a script called C<mysql_config>. This is\ndescribed in more details later. L</Configuration>.\n\n\n=head2 Manual installation\n\nFor a manual installation you need to fetch the DBD::mysql\nsource distribution. The latest version is always available\nfrom\n\n  https://metacpan.org/module/DBD::mysql\n\nThe name is typically something like\n\n  DBD-mysql-4.025.tar.gz\n\nThe archive needs to be extracted. On Windows you may use a tool\nlike 7-zip, on *nix you type\n\n  tar xf DBD-mysql-4.025.tar.gz\n\nThis will create a subdirectory DBD-mysql-4.025. Enter this\nsubdirectory and type\n\n  perl Makefile.PL\n  make\n  make test\n\n(On Windows you may need to replace \"make\" with \"dmake\" or\n\"nmake\".) If the tests seem to look fine, you may continue with\n\n  make install\n\nIf the compilation (make) or tests fail, you might need to\nconfigure some settings.\n\nFor example you might choose a different database, the C\ncompiler or the linker might need some flags. L</Configuration>.\nL</Compiler flags>. L</Linker flags>.\n\nFor Cygwin there is a special section below.\nL</Cygwin>.\n\n\n=head2 Configuration\n\nThe install script \"Makefile.PL\" can be configured via a lot of\nswitches. All switches can be used on the command line. For\nexample, the test database:\n\n  perl Makefile.PL --testdb=<db>\n\nIf you do not like configuring these switches on the command\nline, you may alternatively create a script called C<mysql_config>.\nThis is described later on.\n\nAvailable switches are:\n\n=over\n\n=item testdb\n\nName of the test database, defaults to B<test>.\n\n=item testuser\n\nName of the test user, defaults to empty. If the name is empty,\nthen the currently logged in users name will be used.\n\n=item testpassword\n\nPassword of the test user, defaults to empty.\n\n=item testhost\n\nHost name or IP number of the test database; defaults to localhost.\n\n=item testport\n\nPort number of the test database\n\n=item ps-protcol=1 or 0\n\nWhether to run the test suite using server prepared statements or driver\nemulated prepared statements. ps-protocol=1 means use server prepare,\nps-protocol=0 means driver emulated.\n\n=item cflags\n\nThis is a list of flags that you want to give to the C compiler.\nThe most important flag is the location of the MySQL header files.\nFor example, on Red Hat Linux the header files are in /usr/include/mysql\nand you might try\n\n  -I/usr/include/mysql\n\nOn Windows the header files may be in C:\\mysql\\include and you might try\n\n  -IC:\\mysql\\include\n\nThe default flags are determined by running\n\n  mysql_config --cflags\n\nMore details on the C compiler flags can be found in the following\nsection. L</Compiler flags>.\n\n=item libs\n\nThis is a list of flags that you want to give to the linker\nor loader. The most important flags are the locations and names\nof additional libraries. For example, on Red Hat Linux your\nMySQL client libraries are in /usr/lib/mysql and you might try\n\n  -L/usr/lib/mysql -lmysqlclient -lz\n\nOn Windows the libraries may be in C:\\mysql\\lib and\n\n  -LC:\\mysql\\lib -lmysqlclient\n\nmight be a good choice. The default flags are determined by running\n\n  mysql_config --libs\n\nMore details on the linker flags can be found in a separate section.\nL<Linker flags>.\n\n=back\n\nIf a switch is not present on the command line, then the\nscript C<mysql_config> will be executed. This script comes\nas part of the MySQL distribution. For example, to determine\nthe C compiler flags, we are executing\n\n  mysql_config --cflags\n  mysql_config --libs\n\nIf you want to configure your own settings for database name,\ndatabase user and so on, then you have to create a script with\nthe same name, that replies\n\n\n=head2 Compiler flags\n\nNote: the following info about compiler and linker flags, you shouldn't have\nto use these options because Makefile.PL is pretty good at utilizing\nmysql_config to get the flags that you need for a successful compile.\n\nIt is typically not so difficult to determine the appropriate\nflags for the C compiler. The linker flags, which you find in\nthe next section, are another story.\n\nThe determination of the C compiler flags is usually left to\na configuration script called F<mysql_config>, which can be\ninvoked with\n\n  mysql_config --cflags\n\nWhen doing so, it will emit a line with suggested C compiler\nflags, for example like this:\n\n  -L/usr/include/mysql\n\nThe C compiler must find some header files. Header files have\nthe extension C<.h>. MySQL header files are, for example,\nF<mysql.h> and F<mysql_version.h>. In most cases the header\nfiles are not installed by default. For example, on Windows\nit is an installation option of the MySQL setup program\n(Custom installation), whether the header files are installed\nor not. On Red Hat Linux, you need to install an RPM archive\nF<mysql-devel> or F<MySQL-devel>.\n\nIf you know the location of the header files, then you will\nneed to add an option\n\n  -L<header directory>\n\nto the C compiler flags, for example C<-L/usr/include/mysql>.\n\n\n=head2 Linker flags\n\nAppropriate linker flags are the most common source of problems\nwhile installing DBD::mysql. I will only give a rough overview,\nyou'll find more details in the troubleshooting section.\nL</KNOWN PROBLEMS>\n\nThe determination of the C compiler flags is usually left to\na configuration script called F<mysql_config>, which can be\ninvoked with\n\n  mysql_config --libs\n\nWhen doing so, it will emit a line with suggested C compiler\nflags, for example like this:\n\n   -L'/usr/lib/mysql' -lmysqlclient -lnsl -lm -lz -lcrypt\n\nThe following items typically need to be configured for the\nlinker:\n\n=over\n\n=item The mysqlclient library\n\nThe MySQL client library comes as part of the MySQL distribution.\nDepending on your system it may be a file called\n\n  F<libmysqlclient.a>   statically linked library, Unix\n  F<libmysqlclient.so>  dynamically linked library, Unix\n  F<mysqlclient.lib>    statically linked library, Windows\n  F<mysqlclient.dll>    dynamically linked library, Windows\n\nor something similar.\n\nAs in the case of the header files, the client library is typically\nnot installed by default. On Windows you will need to select them\nwhile running the MySQL setup program (Custom installation). On\nRed Hat Linux an RPM archive F<mysql-devel> or F<MySQL-devel> must\nbe installed.\n\nThe linker needs to know the location and name of the mysqlclient\nlibrary. This can be done by adding the flags\n\n  -L<lib directory> -lmysqlclient\n\nor by adding the complete path name. Examples:\n\n  -L/usr/lib/mysql -lmysqlclient\n  -LC:\\mysql\\lib -lmysqlclient\n\nIf you would like to use the static libraries (and there are\nexcellent reasons to do so), you need to create a separate\ndirectory, copy the static libraries to that place and use\nthe -L switch above to point to your new directory. For example:\n\n  mkdir /tmp/mysql-static\n  cp /usr/lib/mysql/*.a /tmp/mysql-static\n  perl Makefile.PL --libs=\"-L/tmp/mysql-static -lmysqlclient\"\n  make\n  make test\n  make install\n  rm -rf /tmp/mysql-static\n\n\n=item The gzip library\n\nThe MySQL client can use compression when talking to the MySQL\nserver, a nice feature when sending or receiving large texts over\na slow network.\n\nOn Unix you typically find the appropriate file name by running\n\n  ldconfig -p | grep libz\n  ldconfig -p | grep libgz\n\nOnce you know the name (libz.a or libgz.a is best), just add it\nto the list of linker flags. If this seems to be causing problem\nyou may also try to link without gzip libraries.\n\n=back\n\n=head1 ENCRYPTED CONNECTIONS via SSL\n\nConnecting to your servers over an encrypted connection (SSL) is only possible\nif you enabled this setting at build time. Since version 4.034, this is the\ndefault.\n\nAttempting to connect to a server that requires an encrypted connection without\nfirst having L<DBD::mysql> compiled with the C<--ssl> option will result in\nan error that makes things appear as if your password is incorrect.\n\nIf you want to compile L<DBD::mysql> without SSL support, which you might\nprobably only want if you for some reason can't install libssl headers, you\ncan do this by passing the C<--nossl> option to Makefile.PL or by setting the\nDBD_MYSQL_NOSSL environment variable to '1'.\n\n\n=head1 MARIADB NATIVE CLIENT INSTALLATION\n\nThe MariaDB native client is another option for connecting to a MySQL\u00b7\ndatabase licensed LGPL 2.1. To build DBD::mysql against this client, you\nwill first need to build the client. Generally, this is done with\nthe following:\n\n  cd path/to/src/mariadb-native-client\n  cmake -G \"Unix Makefiles'\n  make\n  sudo make install\n\nOnce the client is built and installed, you can build DBD::mysql against\nit:\n\n  perl Makefile.PL --testuser=xxx --testpassword=xxx --testsocket=/path/to//mysqld.sock --mysql_config=/usr/local/bin/mariadb_config\u00b7\n  make\n  make test\n  make install\n\n=head1 SPECIAL SYSTEMS\n\nBelow you find information on particular systems:\n\n=head2 Mac OS X\n\nPlease see the the post at\nL<https://discussions.apple.com/thread/3932531>\n\n(Thanks to Kris Davey for pointing this out to me). I plan to see if I can get the build process\nto be more intelligent about using build flags that work. It is very difficult as it's\nnot a driver problem per se but a problem in how one builds DBD::mysql with a binary client lib\nbuilt on a different compiler than the one the user is using.\n\nQuite simply, using the binary MySQL installation from Oracle, you will need to first run:\n\n  perl Makefile.PL --mysql_config=/usr/local/mysql-5.6.16-osx10.7-x86_64/bin/mysql_config\n\nThere are some runtime issues you may encounter with OS X. Upon\nrunning make test, you might encounter the error:\n\n  Error:  Can't load '/Users/username/DBD-mysql/blib/arch/auto/DBD/mysql/mysql.bundle' for module DBD::mysql: dlopen(/Users/username/DBD-mysql/blib/arch/auto/DBD/mysql/mysql.bundle, 2): Library not loaded: libmysqlclient.18.dylib\n\nTo solve this issue, you need to set the library path, similar to LD_LIBRARY_PATH on other Unix variants, but on OS X you need to do the following (this is for a binary install of MySQL from Oracle)\n\n  export DYLD_LIBRARY_PATH=$DYLD_LIBRARY_PATH:/usr/local/mysql-5.6.16-osx10.7-x86_64/lib/\n\n\n=head2 Cygwin\n\nIf you are a user of Cygwin you already\nknow, it contains a nicely running perl 5.6.1, installation of\nadditional modules usually works like a charm via the standard\nprocedure of\n\n    perl makefile.PL\n    make\n    make test\n    make install\n\nThe Windows binary distribution of MySQL runs smoothly under Cygwin.\nYou can start/stop the server and use all Windows clients without problem.\nBut to install DBD::mysql you have to take a little special action.\n\nDon't attempt to build DBD::mysql against either the MySQL Windows or\nLinux/Unix BINARY distributions: neither will work!\n\nYou MUST compile the MySQL clients yourself under Cygwin, to get a\n'libmysqlclient.a' compiled under Cygwin. Really! You'll only need\nthat library and the header files, you don't need any other client parts.\nContinue to use the Windows binaries. And don't attempt (currently) to\nbuild the MySQL Server part, it is unnecessary, as MySQL AB does an\nexcellent job to deliver optimized binaries for the mainstream\noperating systems, and it is told, that the server compiled under Cygwin is\nunstable.\n\nInstall a MySQL server for testing against. You can install the regular\nWindows MySQL server package on your Windows machine, or you can also\ntest against a MySQL server on a remote host.\n\n=head3 Build MySQL clients under Cygwin:\n\ndownload the MySQL LINUX source from\nL<http://www.mysql.com/downloads/index.html>,\nunpack mysql-<version>.tar.gz into some tmp location and from this directory\nrun configure:\n\n  ./configure --prefix=/usr/local/mysql --without-server\n\nThis prepares the Makefile with the installed Cygwin features. It\ntakes some time, but should finish without error. The 'prefix', as\ngiven, installs the whole Cygwin/MySQL thingy into a location not\nnormally in your PATH, so that you continue to use already installed\nWindows binaries. The --without-server parameter tells configure to\nonly build the clients.\n\n  make\n\nThis builds all MySQL client parts ... be patient. It should finish\nfinally without any error.\n\n  make install\n\nThis installs the compiled client files under /usr/local/mysql/.\nRemember, you don't need anything except the library under\n/usr/local/mysql/lib and the headers under /usr/local/mysql/include!\n\nEssentially you are now done with this part. If you want, you may try\nyour compiled binaries shortly; for that, do:\n\n  cd /usr/local/mysql/bin\n  ./mysql -h 127.0.0.1\n\nThe host (-h) parameter 127.0.0.1 targets the local host, but forces\nthe mysql client to use a TCP/IP connection. The default would be a\npipe/socket connection (even if you say '-h localhost') and this\ndoesn't work between Cygwin and Windows (as far as I know).\n\nIf you have your MySQL server running on some other box, then please\nsubstitute '127.0.0.1' with the name or IP-number of that box.\n\nPlease note, in my environment the 'mysql' client did not accept a\nsimple RETURN, I had to use CTRL-RETURN to send commands\n... strange,\nbut I didn't attempt to fix that, as we are only interested in the\nbuilt lib and headers.\n\nAt the 'mysql>' prompt do a quick check:\n\n  mysql> use mysql\n  mysql> show tables;\n  mysql> select * from db;\n  mysql> exit\n\nYou are now ready to build DBD::mysql!\n\n=head3 compile DBD::mysql\n\ndownload and extract DBD-mysql-<version>.tar.gz from CPAN\n\ncd into unpacked dir DBD-mysql-<version>\nyou probably did that already, if you are reading this!\n\n  cp /usr/local/mysql/bin/mysql_config .\n\nThis copies the executable script mentioned in the DBD::mysql docs\nfrom your just built Cywin/MySQL client directory; it knows about\nyour Cygwin installation, especially about the right libraries to link\nwith.\n\n  perl Makefile.PL --testhost=127.0.0.1\n\nThe --testhost=127.0.0.1 parameter again forces a TCP/IP connection\nto the MySQL server on the local host instead of a pipe/socket\nconnection for the 'make test' phase.\n\n  make\n\nThis should run without error\n\n  make test\n  make install\n\nThis installs DBD::mysql into the Perl hierarchy.\n\n\n=head1 KNOWN PROBLEMS\n\n=head2 no gzip on your system\n\nSome Linux distributions don't come with a gzip library by default.\nRunning \"make\" terminates with an error message like\n\n  LD_RUN_PATH=\"/usr/lib/mysql:/lib:/usr/lib\" gcc\n    -o blib/arch/auto/DBD/mysql/mysql.so  -shared\n    -L/usr/local/lib dbdimp.o mysql.o -L/usr/lib/mysql\n    -lmysqlclient -lm -L/usr/lib/gcc-lib/i386-redhat-linux/2.96\n    -lgcc -lz\n  /usr/bin/ld: cannot find -lz\n  collect2: ld returned 1 exit status\n  make: *** [blib/arch/auto/DBD/mysql/mysql.so] Error 1\n\nIf this is the case for you, install an RPM archive like\nlibz-devel, libgz-devel, zlib-devel or gzlib-devel or something\nsimilar.\n\n=head2 different compiler for mysql and perl\n\nIf Perl was compiled with gcc or egcs, but MySQL was compiled\nwith another compiler or on another system, an error message like\nthis is very likely when running \"Make test\":\n\n  t/00base............install_driver(mysql) failed: Can't load\n  '../blib/arch/auto/DBD/mysql/mysql.so' for module DBD::mysql:\n  ../blib/arch/auto/DBD/mysql/mysql.so: undefined symbol: _umoddi3\n  at /usr/local/perl-5.005/lib/5.005/i586-linux-thread/DynaLoader.pm\n  line 168.\n\nThis means, that your linker doesn't include libgcc.a. You have\nthe following options:\n\nThe solution is telling the linker to use libgcc. Run\n\n  gcc --print-libgcc-file\n\nto determine the exact location of libgcc.a or for older versions\nof gcc\n\n  gcc -v\n\nto determine the directory. If you know the directory, add a\n\n  -L<directory> -lgcc\n\nto the list of C compiler flags. L</Configuration>. L</Linker flags>.\n\n=head1 SUPPORT\n\nFinally, if everything else fails, you are not alone. First of\nall, for an immediate answer, you should look into the archives\nof the dbi-users mailing list, which is available at\nL<http://groups.google.com/group/perl.dbi.users?hl=en&lr=>\n\nTo subscribe to this list, send and email to\n\n    dbi-users-subscribe@perl.org\n\nIf you don't find an appropriate posting and reply in the\nmailing list, please post a question. Typically a reply will\nbe seen within one or two days.\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-perl-dbd-mysql-4.043-c34dte7z7ydfpx2igr577ajbjogcplt4/spack-src/t/60leaks.t"
    ],
    "total_files": 85
}