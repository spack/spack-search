{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-yambo-4.2.1-dxhh6agznugnsdfrtnew2o7lybyvgfdo/spack-src/config/netcdf_f90.m4": "#\n\n# from http://www.arsc.edu/support/news/HPCnews/HPCnews249.shtml\n#\n#        Copyright (C) 2000-2017 the YAMBO team\n#              http://www.yambo-code.org\n#\n# Authors (see AUTHORS file for details): AM, AF, DS\n#\n# This file is distributed under the terms of the GNU\n# General Public License. You can redistribute it and/or\n# modify it under the terms of the GNU General Public\n# License as published by the Free Software Foundation;\n# either version 2, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will\n# be useful, but WITHOUT ANY WARRANTY; without even the\n# implied warranty of MERCHANTABILITY or FITNESS FOR A\n# PARTICULAR PURPOSE.  See the GNU General Public License\n# for more details.\n#\n# You should have received a copy of the GNU General Public\n# License along with this program; if not, write to the Free\n# Software Foundation, Inc., 59 Temple Place - Suite 330,Boston,\n# MA 02111-1307, USA or visit http://www.gnu.org/copyleft/gpl.txt.\n#\nAC_DEFUN([AC_HAVE_NETCDF_F90],[\n\nAC_ARG_WITH(netcdf_libs,AC_HELP_STRING([--with-netcdf-libs=<libs>],\n            [Use NetCDF libraries <libs>],[32]))\nAC_ARG_WITH(netcdf_path, AC_HELP_STRING([--with-netcdf-path=<path>],\n            [Path to the NetCDF install directory],[32]),[],[])\nAC_ARG_WITH(netcdf_libdir,AC_HELP_STRING([--with-netcdf-libdir=<path>],\n            [Path to the NetCDF lib directory],[32]))\nAC_ARG_WITH(netcdf_includedir,AC_HELP_STRING([--with-netcdf-includedir=<path>],\n            [Path to the NetCDF include directory],[32]))\n#\nAC_ARG_WITH(netcdff_libs,AC_HELP_STRING([--with-netcdff-libs=<libs>],\n            [Use NetCDFF libraries <libs>],[32]))\nAC_ARG_WITH(netcdff_path, AC_HELP_STRING([--with-netcdff-path=<path>],\n            [Path to the NetCDFF install directory],[32]),[],[])\nAC_ARG_WITH(netcdff_libdir,AC_HELP_STRING([--with-netcdff-libdir=<path>],\n            [Path to the NetCDFF lib directory],[32]))\nAC_ARG_WITH(netcdff_includedir,AC_HELP_STRING([--with-netcdff-includedir=<path>],\n            [Path to the NetCDFF include directory],[32]))\n#\nAC_ARG_WITH(hdf5_libs,AC_HELP_STRING([--with-hdf5-libs=<libs>],\n            [Use HDF5 libraries <libs>],[32]))\nAC_ARG_WITH(hdf5_path, AC_HELP_STRING([--with-hdf5-path=<path>],\n            [Path to the HDF5 install directory],[32]),[],[])\nAC_ARG_WITH(hdf5_libdir,AC_HELP_STRING([--with-hdf5-libdir=<path>],\n            [Path to the HDF5 lib directory],[32]))\nAC_ARG_WITH(hdf5_includedir,AC_HELP_STRING([--with-hdf5-includedir=<path>],\n            [Path to the HDF5 include directory],[32]))\n#\n# Large Databases Support (LFS)\n#\nAC_ARG_ENABLE(netcdf-classic, AC_HELP_STRING([--enable-netcdf-classic],\n             [Switch to OLD NetCDF classic. Default is no.]))\n#\n# HDF5 support\n#\nAC_ARG_ENABLE(netcdf_hdf5,AC_HELP_STRING([--enable-netcdf-hdf5],\n             [Activate the HDF5 support. Default is no.]))\n#\n#\n# HDF5 data compression\n#\nAC_ARG_ENABLE(hdf5_compression,AC_HELP_STRING([--enable-hdf5-compression],\n             [Activate the HDF5 data compression. Default is no.]))\n#\nenable_netcdf=\"no\"\nenable_hdf5=\"no\"\ncompile_netcdf=\"no\"\ninternal_netcdf=\"no\"\ncompile_hdf5=\"no\"\ninternal_hdf5=\"no\"\ndef_netcdf=\"\"\nNETCDF_OPT=\"--disable-netcdf-4\"\nNETCDF_VER=\"v3\"\nHDF5_OPT=\"\"\n#\n# Other libs\n#\nAC_LANG_PUSH(C)\nAC_CHECK_LIB(z ,   deflate,      [use_libz=\"yes\";   ],[use_libz=\"no\";   ],[])\nAC_CHECK_LIB(sz,   deflate,      [use_libsz=\"yes\";  ],[use_libsz=\"no\";  ],[])\nAC_CHECK_LIB(dl,   dlopen,       [use_libdl=\"yes\";  ],[use_libdl=\"no\";  ],[])\nAC_CHECK_LIB(curl, curl_version, [use_libcurl=\"yes\";],[use_libcurl=\"no\";],[])\nAC_CHECK_LIB(m,    cos,          [use_libm=\"yes\";   ],[use_libm=\"no\";   ],[])\nAC_LANG_POP(C)\n#\n# global options\n#\n#\nif test -d \"$with_hdf5_libdir\"          ; then enable_hdf5=yes ; fi\nif test -d \"$with_hdf5_path\"            ; then enable_hdf5=yes ; fi\nif test x\"$with_hdf5_libs\" != \"x\"       ; then enable_hdf5=yes ; fi\nif test x\"$enable_netcdf_hdf5\" = \"xyes\" ; then enable_hdf5=yes ; fi\n#\n#\n# Set NETCDF LIBS and FLAGS from INPUT\n#\nif test -d \"$with_netcdf_path\" || test -d \"$with_netcdf_libdir\" ; then\n  #\n  # external netcdf\n  #\n  if test -d \"$with_netcdf_libdir\" ; then  AC_MSG_CHECKING([for NetCDF in $with_netcdf_libdir]) ;\n  elif test -d \"$with_netcdf_path\" ; then  AC_MSG_CHECKING([for NetCDF in $with_netcdf_path]) ;\n  fi\n  #\n  if test -d \"$with_netcdf_path\" ; then \n      try_libdir=\"$with_netcdf_path/lib\" ;\n      try_incdir=\"$with_netcdf_path/include\" ;\n      tryf_libdir=\"$with_netcdf_path/lib\" ;\n      tryf_incdir=\"$with_netcdf_path/include\" ;\n  fi\n  if test -d \"$with_netcdff_path\" ; then \n      tryf_libdir=\"$with_netcdff_path/lib\" ;\n      tryf_incdir=\"$with_netcdff_path/include\" ;\n  fi\n  #\n  if test -d \"$with_netcdf_libdir\"     ; then try_libdir=\"$with_netcdf_libdir\" ; fi\n  if test -d \"$with_netcdf_includedir\" ; then try_incdir=\"$with_netcdf_includedir\" ; fi\n  #\n  if test -d \"$with_netcdff_libdir\"     ; then tryf_libdir=\"$with_netcdff_libdir\" ; fi\n  if test -d \"$with_netcdff_includedir\" ; then tryf_incdir=\"$with_netcdff_includedir\" ; fi\n  #\n  if test -z \"$try_libdir\" ; then AC_MSG_ERROR([No lib-dir specified]) ; fi\n  if test -z \"$try_incdir\" ; then AC_MSG_ERROR([No include-dir specified]) ; fi\n  #\n  AC_LANG([Fortran])\n  #\n  try_NETCDF_INCS=\"$IFLAG$try_incdir\" ;\n  if test -d \"$tryf_incdir\" ; then\n    try_NETCDFF_INCS=\"$IFLAG$tryf_incdir\" ;\n  fi\n  #\n  try_NETCDF_LIBS=\"-L$try_libdir -lnetcdf\" ;\n  if test -r $tryf_libdir/libnetcdff.a ; then\n    try_NETCDFF_LIBS=\"-L$tryf_libdir -lnetcdff\" ;\n  elif test -r $try_libdir/libnetcdff.a ; then\n    try_NETCDFF_LIBS=\"-L$try_libdir -lnetcdff\" ;\n  fi\n  #\nelif test x\"$with_netcdf_libs\" != \"x\" ; then\n  #\n  # directly provided lib\n  #\n  AC_MSG_CHECKING([for NetCDF Library using $with_netcdf_libs])\n  if test -d \"$with_netcdf_includedir\" ; then  try_NETCDF_INCS=\"$IFLAG$with_netcdf_includedir\" ; fi\n  if test -d \"$with_netcdff_includedir\" ; then try_NETCDFF_INCS=\"$IFLAG$with_netcdff_includedir\" ; fi\n  netcdf=\"yes\";\n  try_NETCDF_LIBS=\"$with_netcdf_libs\" ;\n  try_NETCDFF_LIBS=\"$with_netcdff_libs\" ;\n  AC_MSG_RESULT(yes)\n  #\nfi\n#\n# TEST NETCDF LIBS and FLAGS\n#\nif test x\"$enable_hdf5\" = \"xno\"; then\n  #\n  netcdf=no;\n  #\n  if test -d \"$with_netcdf_path\" || test -d \"$with_netcdf_libdir\" || test x\"$with_netcdf_libs\" != \"x\"; then\n    #\n    save_fcflags=\"$FCFLAGS\" ;\n    save_libs=\"$LIBS\" ;\n    #\n    FCFLAGS=\"$try_NETCDFF_INCS $try_NETCDF_INCS $save_fcflags\";\n    LIBS=\"$try_NETCDFF_LIBS $try_NETCDF_LIBS $save_libs\";\n    #\n     AC_COMPILE_IFELSE(AC_LANG_PROGRAM([], [\n       use netcdf\n       implicit none\n       integer nf_err\n       integer ID\n       nf_err = nf90_create('netcdf_test',nf90_share,ID)]),\n       [netcdf=yes], [netcdf=no]);\n    #\n    if test \"x$netcdf\" = \"xyes\"; then\n      AC_MSG_RESULT([yes]) ;\n      NETCDF_INCS=\"$try_NETCDF_INCS\" ;\n      NETCDF_LIBS=\"$try_NETCDF_LIBS\" ;\n      NETCDFF_INCS=\"$try_NETCDFF_INCS\" ;\n      NETCDFF_LIBS=\"$try_NETCDFF_LIBS\" ;\n    else\n      AC_MSG_RESULT([no]) ;\n    fi\n    # \n    FCFLAGS=\"$save_fcflags\" ;\n    LIBS=\"$save_libs\" ;\n    #\n  fi\n  if test \"x$netcdf\" = \"xno\"; then\n    #\n    # internal netcdf\n    #\n    AC_MSG_CHECKING([for internal NetCDF library])\n    #\n    internal_netcdf=\"yes\"\n    # \n    # the following may change if we use a different version\n    # of the netcdf lib\n    #\n    #NETCDF_LIBS=\"-L${extlibs_path}/lib -lnetcdf\" ;\n    NETCDF_LIBS=\"-L${extlibs_path}/${FCKIND}/${FC}/${NETCDF_VER}/lib -lnetcdf\" ;\n    NETCDF_INCS=\"${IFLAG}${extlibs_path}/${FCKIND}/${FC}/${NETCDF_VER}/include\" ;\n    NETCDFF_LIBS=\"-L${extlibs_path}/${FCKIND}/${FC}/${NETCDF_VER}/lib -lnetcdff\" ;\n    NETCDFF_INCS=\"${IFLAG}${extlibs_path}/${FCKIND}/${FC}/${NETCDF_VER}/include\" ;\n    #\n    if test \"$use_libm\"    = \"yes\"; then NETCDF_LIBS=\"$NETCDF_LIBS -lm\"   ; fi\n    if test \"$use_libcurl\" = \"yes\"; then NETCDF_LIBS=\"$NETCDF_LIBS -lcurl\"; fi\n    #\n    netcdf=yes\n    if test -e \"${extlibs_path}/${FCKIND}/${FC}/${NETCDF_VER}/lib/libnetcdf.a\" && test -e \"${extlibs_path}/${FCKIND}/${FC}/${NETCDF_VER}/lib/libnetcdff.a\"; then\n      compile_netcdf=\"no\" ;\n      AC_MSG_RESULT([already compiled]) ;\n    else \n      compile_netcdf=\"yes\" ;\n      AC_MSG_RESULT([to be compiled]) ;\n    fi\n    #\n  fi\n  #\nfi\n#\n#\n# HDF5 support\n#\nhdf5=\"no\"\n#\nif test x\"$enable_hdf5\" = \"xyes\"; then\n  #\n  if   test -d \"$with_hdf5_libdir\"    ; then AC_MSG_CHECKING([for HDF5 in $with_hdf5_libdir]) ;\n  elif test -d \"$with_hdf5_path\"    ;   then AC_MSG_CHECKING([for HDF5 in $with_hdf5_path]) ;\n  elif test x\"$with_hdf5_libs\" != \"x\" ; then AC_MSG_CHECKING([for HDF5 using $with_hdf5_libs]) ;\n  fi\n  #\n  AC_LANG([Fortran])       \n  #\n  # re-define lib and inc dirs\n  #\n  if test -d \"$with_hdf5_path\" ; then \n      try_libdir=$with_hdf5_path/lib\n      try_incdir=$with_hdf5_path/include\n  fi\n  if test -d \"$with_hdf5_libdir\"     ; then try_libdir=$with_hdf5_libdir ; fi\n  if test -d \"$with_hdf5_includedir\" ; then try_incdir=$with_hdf5_includedir ; fi\n  #\n  if test x\"$with_hdf5_libs\" != \"x\" ; then try_HDF5_LIBS=\"$with_hdf5_libs\" ; fi\n  #\n  if test -d \"$try_libdir\" ; then try_HDF5_LIBS=\"-L$try_libdir -lhdf5hl_fortran -lhdf5_fortran -lhdf5_hl -lhdf5\" ; fi\n  #\n  if test -d \"$try_incdir\" ; then try_HDF5_INCS=\"$IFLAG$try_incdir\" ; fi\n  #\n  save_libs=\"$LIBS\" ;\n  save_fcflags=\"$FCFLAGS\" ;\n  #\n  FCFLAGS=\"$try_NETCDFF_INCS $try_NETCDF_INCS $try_HDF5_INCS $save_fcflags\" ;\n  #\n  if test \"$use_libz\"    = \"yes\"; then try_HDF5_LIBS=\"$try_HDF5_LIBS -lz\"   ; fi\n  if test \"$use_libsz\"   = \"yes\"; then try_HDF5_LIBS=\"$try_HDF5_LIBS -lsz\"  ; fi\n  if test \"$use_libm\"    = \"yes\"; then try_HDF5_LIBS=\"$try_HDF5_LIBS -lm\"   ; fi\n  if test \"$use_libdl\"   = \"yes\"; then try_HDF5_LIBS=\"$try_HDF5_LIBS -ldl\"  ; fi\n  if test \"$use_libcurl\" = \"yes\"; then try_HDF5_LIBS=\"$try_HDF5_LIBS -lcurl\"; fi\n  #\n  LIBS=\"$try_HDF5_LIBS\"\n  #\n  AC_LINK_IFELSE(AC_LANG_PROGRAM([], [\n     use hdf5\n     use netcdf\n     implicit none\n     integer cmode\n     cmode = NF90_HDF5\n     !cmode = nf90_abort(1)\n     call h5open_f(cmode)]),\n     [hdf5=yes], [hdf5=no]);\n  netcdf=$hdf5;\n  if test \"x$hdf5\" = xyes; then\n    HDF5_LIBS=\"$try_HDF5_LIBS\" ;\n    HDF5_INCS=\"$try_HDF5_INCS\" ;\n    NETCDF_LIBS=\"$try_NETCDF_LIBS\" ;\n    NETCDF_INCS=\"$try_NETCDF_INCS\" ;\n    NETCDFF_LIBS=\"$try_NETCDFF_LIBS\" ;\n    NETCDFF_INCS=\"$try_NETCDFF_INCS\" ;\n    AC_MSG_RESULT([yes]) ;\n  fi\n  #\n  FCFLAGS=\"$save_fcflags\" ;\n  LIBS=\"$save_libs\" ;\n  #\n  if test \"x$hdf5\" = xno; then\n    if   test -d \"$with_hdf5_libdir\" || test -d \"$with_hdf5_path\"; then AC_MSG_RESULT([no]) ; fi\n    #\n    AC_MSG_CHECKING([for internal NETCDF+HDF5 library]);\n    internal_hdf5=\"yes\" ;\n    internal_netcdf=\"yes\" ;\n    #\n    NETCDF_OPT=\"--enable-netcdf-4\";\n    NETCDF_VER=\"v4\";\n    #\n    HDF5_LIBS=\"-L${extlibs_path}/${FCKIND}/${FC}/lib -lhdf5hl_fortran -lhdf5_fortran -lhdf5_hl -lhdf5\" ;\n    HDF5_INCS=\"${IFLAG}${extlibs_path}/${FCKIND}/${FC}/include\" ;\n    NETCDF_LIBS=\"-L${extlibs_path}/${FCKIND}/${FC}/${NETCDF_VER}/lib -lnetcdf\" ;\n    NETCDF_INCS=\"${IFLAG}${extlibs_path}/${FCKIND}/${FC}/${NETCDF_VER}/include\" ;\n    NETCDFF_LIBS=\"-L${extlibs_path}/${FCKIND}/${FC}/${NETCDF_VER}/lib -lnetcdff\" ;\n    NETCDFF_INCS=\"${IFLAG}${extlibs_path}/${FCKIND}/${FC}/${NETCDF_VER}/include\" ;\n    #\n    if test \"$use_libz\"    = \"yes\"; then HDF5_LIBS=\"$HDF5_LIBS -lz\"   ; fi\n    if test \"$use_libsz\"   = \"yes\"; then HDF5_LIBS=\"$HDF5_LIBS -lsz\"  ; fi\n    if test \"$use_libm\"    = \"yes\"; then HDF5_LIBS=\"$HDF5_LIBS -lm\"   ; fi\n    if test \"$use_libdl\"   = \"yes\"; then HDF5_LIBS=\"$HDF5_LIBS -ldl\"  ; fi\n    if test \"$use_libcurl\" = \"yes\"; then HDF5_LIBS=\"$HDF5_LIBS -lcurl\"; fi\n    #\n    netcdf=yes ;\n    hdf5=yes ;\n    #\n    if test -e ${extlibs_path}/lib/libnetcdf.a && test -e \"${extlibs_path}/lib/libnetcdff.a\" && test -e \"${extlibs_path}/lib/libhdf5.a\"; then\n      compile_netcdf=\"no\" ;\n      compile_hdf5=\"no\" ;\n      AC_MSG_RESULT([already compiled]) ;\n    else  \n      compile_netcdf=\"yes\";\n      compile_hdf5=\"yes\" ;\n      if test \"$mpibuild\" = \"no\"  ; then HDF5_OPT=\"--disable-parallel\"; fi ;\n      if test \"$mpibuild\" = \"yes\" ; then HDF5_OPT=\"--enable-parallel\" ; fi ;\n      AC_MSG_RESULT([to be compiled]) ;\n    fi\n    #\n  fi\nfi\n#\n# Large File Support\n#\nif test x\"$enable_netcdf_classic\" = \"xyes\"; then\n  def_netcdf=\"-D_NC_CLASSIC\";\nfi\n#\n# NETCDF-HDF5 IO\n#\nif test x\"$netcdf\" = \"xyes\" && test x\"$hdf5\" = \"xyes\" && test x\"$enable_netcdf_hdf5\" = \"xyes\" ; then\n  def_netcdf=\"${def_netcdf} -D_HDF5_IO\";\nfi\n#\n# HDF5-DATA COMPRESSION\n#\nif test x\"$netcdf\" = \"xyes\" && test x\"$hdf5\" = \"xyes\" && test x\"$enable_netcdf_hdf5\" = \"xyes\" && test x\"$enable_hdf5_compression\" = \"xyes\" ; then\n    def_netcdf=\"${def_netcdf} -D_HDF5_COMPRESSION\";\nfi\n#\nAC_SUBST(NETCDF_LIBS)\nAC_SUBST(NETCDF_INCS)\nAC_SUBST(NETCDF_OPT)\nAC_SUBST(NETCDF_VER)\nAC_SUBST(NETCDFF_LIBS)\nAC_SUBST(NETCDFF_INCS)\nAC_SUBST(HDF5_LIBS)\nAC_SUBST(HDF5_INCS)\nAC_SUBST(HDF5_OPT)\nAC_SUBST(netcdf)\nAC_SUBST(hdf5)\nAC_SUBST(def_netcdf)\nAC_SUBST(compile_netcdf)\nAC_SUBST(compile_hdf5)\nAC_SUBST(internal_netcdf)\nAC_SUBST(internal_hdf5)\n\n])\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-yambo-4.2.1-dxhh6agznugnsdfrtnew2o7lybyvgfdo/spack-src/src/parser/math.c",
        "/tmp/vanessa/spack-stage/spack-stage-yambo-4.2.1-dxhh6agznugnsdfrtnew2o7lybyvgfdo/spack-src/include/gsl_complex_math.h",
        "/tmp/vanessa/spack-stage/spack-stage-yambo-4.2.1-dxhh6agznugnsdfrtnew2o7lybyvgfdo/spack-src/doc/QuickGuidedTour.pdf"
    ],
    "total_files": 726
}