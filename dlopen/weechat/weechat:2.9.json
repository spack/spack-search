{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-weechat-2.9-6t75c6wcuy372mx22zcrjpzcya3zeyfl/spack-src/configure.ac": "#\n# Copyright (C) 2003-2020 S\u00e9bastien Helleu <flashcode@flashtux.org>\n# Copyright (C) 2005 Benoit Papillault <benoit.papillault@free.fr>\n# Copyright (C) 2005-2006 Julien Louis <ptitlouis@sysif.net>\n# Copyright (C) 2005-2009 Emmanuel Bouthenot <kolter@openics.org>\n#\n# This file is part of WeeChat, the extensible chat client.\n#\n# WeeChat is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 3 of the License, or\n# (at your option) any later version.\n#\n# WeeChat is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with WeeChat.  If not, see <https://www.gnu.org/licenses/>.\n#\n\n#                                               -*- Autoconf -*-\n# Process this file with autoconf to produce a configure script.\n\nAC_PREREQ(2.56)\nAC_INIT(WeeChat, m4_esyscmd([./version.sh devel-full | tr -d '\\n']), flashcode@flashtux.org)\nAC_CONFIG_SRCDIR([configure.ac])\nAM_CONFIG_HEADER(config.h)\nAM_INIT_AUTOMAKE([foreign])\nLICENSE=\"GPL3\"\n\n# Checks for programs\nAC_PROG_CC\nAC_PROG_CXX\nAC_PROG_MAKE_SET\nAC_GNU_SOURCE\nAC_PROG_LN_S\nAM_PROG_LIBTOOL\nPKG_PROG_PKG_CONFIG\n\n# Files to generate\nAC_CONFIG_FILES([weechat.pc])\nAC_CONFIG_FILES([weechat-${VERSION}-1.cygport:weechat.cygport.in])\n\n# Add some flags for some OS\ncase \"$host_os\" in\nfreebsd* | openbsd*)\n        CFLAGS=\"$CFLAGS -I/usr/local/include\"\n        CXXFLAGS=\"$CXXFLAGS -I/usr/local/include\"\n        LDFLAGS=\"$LDFLAGS -L/usr/local/lib\"\n        ;;\nnetbsd*)\n        CFLAGS=\"$CFLAGS -I/usr/pkg/include\"\n        CXXFLAGS=\"$CXXFLAGS -I/usr/pkg/include\"\n        LDFLAGS=\"$LDFLAGS -L/usr/pkg/lib\"\n        ;;\nsolaris*)\n        LDFLAGS=\"$LDFLAGS -lsocket -lxnet\"\n        ;;\ndarwin*)\n        LDFLAGS=\"$LDFLAGS -lresolv\"\n        ;;\nesac\n\n# Gettext\nALL_LINGUAS=\"cs de es fr hu it ja pl pt pt_BR ru tr\"\nAM_GNU_GETTEXT\nAM_GNU_GETTEXT_VERSION([0.18])\n\n# Checks for libraries\nAC_CHECK_LIB(ncurses, initscr, LIBNCURSES_FOUND=1, LIBNCURSES_FOUND=0)\nAC_CHECK_LIB(ncursesw, initscr, LIBNCURSESW_FOUND=1, LIBNCURSESW_FOUND=0)\n\n# Checks for header files\nAC_HEADER_STDC\nAC_CHECK_HEADERS([libintl.h sys/resource.h])\n\n# Checks for typedefs, structures, and compiler characteristics\nAC_HEADER_TIME\nAC_STRUCT_TM\n\nAC_MSG_CHECKING([for socklen_t])\nAC_CACHE_VAL(ac_cv_type_socklen_t,\n[AC_LINK_IFELSE([AC_LANG_PROGRAM(\n[[ #include <sys/types.h>\n#include <sys/socket.h> ]],\n[[ socklen_t t; ]])],\n[ ac_cv_type_socklen_t=yes ],\n[ ac_cv_type_socklen_t=no ],\n)])\nif test $ac_cv_type_socklen_t = no; then\nAC_DEFINE(socklen_t, int, Define to 'int' if <sys/socket.h> doesn't define.)\nfi\nAC_MSG_RESULT($ac_cv_type_socklen_t)\n\n# Checks for library functions.\nAC_FUNC_SELECT_ARGTYPES\nAC_TYPE_SIGNAL\nAC_CHECK_FUNCS([mallinfo])\n\n# Variables in config.h\n\nAH_VERBATIM([PREFIX], [#undef PREFIX])\nAH_VERBATIM([WEECHAT_LIBDIR], [#undef WEECHAT_LIBDIR])\nAH_VERBATIM([WEECHAT_SHAREDIR], [#undef WEECHAT_SHAREDIR])\nAH_VERBATIM([HAVE_FLOCK], [#undef HAVE_FLOCK])\nAH_VERBATIM([HAVE_EAT_NEWLINE_GLITCH], [#undef HAVE_EAT_NEWLINE_GLITCH])\nAH_VERBATIM([HAVE_ASPELL_VERSION_STRING], [#undef HAVE_ASPELL_VERSION_STRING])\nAH_VERBATIM([HAVE_ENCHANT_GET_VERSION], [#undef HAVE_ENCHANT_GET_VERSION])\nAH_VERBATIM([HAVE_GUILE_GMP_MEMORY_FUNCTIONS], [#undef HAVE_GUILE_GMP_MEMORY_FUNCTIONS])\nAH_VERBATIM([PLUGIN_ALIAS], [#undef PLUGIN_ALIAS])\nAH_VERBATIM([PLUGIN_BUFLIST], [#undef PLUGIN_BUFLIST])\nAH_VERBATIM([PLUGIN_CHARSET], [#undef PLUGIN_CHARSET])\nAH_VERBATIM([PLUGIN_EXEC], [#undef PLUGIN_EXEC])\nAH_VERBATIM([PLUGIN_FIFO], [#undef PLUGIN_FIFO])\nAH_VERBATIM([PLUGIN_FSET], [#undef PLUGIN_FSET])\nAH_VERBATIM([PLUGIN_IRC], [#undef PLUGIN_IRC])\nAH_VERBATIM([PLUGIN_LOGGER], [#undef PLUGIN_LOGGER])\nAH_VERBATIM([PLUGIN_RELAY], [#undef PLUGIN_RELAY])\nAH_VERBATIM([PLUGIN_SCRIPT], [#undef PLUGIN_SCRIPT])\nAH_VERBATIM([PLUGIN_PERL], [#undef PLUGIN_PERL])\nAH_VERBATIM([PLUGIN_PYTHON], [#undef PLUGIN_PYTHON])\nAH_VERBATIM([PLUGIN_RUBY], [#undef PLUGIN_RUBY])\nAH_VERBATIM([PLUGIN_LUA], [#undef PLUGIN_LUA])\nAH_VERBATIM([PLUGIN_PHP], [#undef PLUGIN_PHP])\nAH_VERBATIM([PLUGIN_TCL], [#undef PLUGIN_TCL])\nAH_VERBATIM([PLUGIN_GUILE], [#undef PLUGIN_GUILE])\nAH_VERBATIM([PLUGIN_JAVASCRIPT], [#undef PLUGIN_JAVASCRIPT])\nAH_VERBATIM([PLUGIN_SPELL], [#undef PLUGIN_SPELL])\nAH_VERBATIM([PLUGIN_TRIGGER], [#undef PLUGIN_TRIGGER])\nAH_VERBATIM([PLUGIN_XFER], [#undef PLUGIN_XFER])\nAH_VERBATIM([TESTS], [#undef TESTS])\nAH_VERBATIM([MAN], [#undef MAN])\nAH_VERBATIM([DOC], [#undef DOC])\nAH_VERBATIM([WEECHAT_HOME], [#define WEECHAT_HOME \"~/.weechat\"])\nAH_VERBATIM([CA_FILE], [#define CA_FILE \"/etc/ssl/certs/ca-certificates.crt\"])\n\n# Arguments for ./configure\n\nAC_ARG_ENABLE(ncurses,      [  --disable-ncurses       turn off ncurses interface (default=compiled if found)],enable_ncurses=$enableval,enable_ncurses=yes)\nAC_ARG_ENABLE(headless,     [  --disable-headless      turn off headless binary (default=compiled), this is required for tests],enable_headless=$enableval,enable_headless=yes)\nAC_ARG_ENABLE(largefile,    [  --disable-largefile     turn off Large File Support (default=on)],enable_largefile=$enableval,enable_largefile=yes)\nAC_ARG_ENABLE(alias,        [  --disable-alias         turn off Alias plugin (default=compiled)],enable_alias=$enableval,enable_alias=yes)\nAC_ARG_ENABLE(buflist,      [  --disable-buflist       turn off Buflist plugin (default=compiled)],enable_buflist=$enableval,enable_buflist=yes)\nAC_ARG_ENABLE(charset,      [  --disable-charset       turn off Charset plugin (default=compiled)],enable_charset=$enableval,enable_charset=yes)\nAC_ARG_ENABLE(exec,         [  --disable-exec          turn off Exec plugin (default=compiled)],enable_exec=$enableval,enable_exec=yes)\nAC_ARG_ENABLE(fifo,         [  --disable-fifo          turn off Fifo plugin (default=compiled)],enable_fifo=$enableval,enable_fifo=yes)\nAC_ARG_ENABLE(fset,         [  --disable-fset          turn off Fast Set plugin (default=compiled)],enable_fset=$enableval,enable_fset=yes)\nAC_ARG_ENABLE(irc,          [  --disable-irc           turn off IRC plugin (default=compiled)],enable_irc=$enableval,enable_irc=yes)\nAC_ARG_ENABLE(logger,       [  --disable-logger        turn off Logger plugin (default=compiled)],enable_logger=$enableval,enable_logger=yes)\nAC_ARG_ENABLE(relay,        [  --disable-relay         turn off Relay plugin (default=compiled)],enable_relay=$enableval,enable_relay=yes)\nAC_ARG_ENABLE(script,       [  --disable-script        turn off Script plugin (default=compiled)],enable_script=$enableval,enable_script=yes)\nAC_ARG_ENABLE(scripts,      [  --disable-scripts       turn off script plugins (perl, python, ...) (default=compiled if found)],enable_scripts=$enableval,enable_scripts=yes)\nAC_ARG_ENABLE(perl,         [  --disable-perl          turn off Perl script plugin (default=compiled if found)],enable_perl=$enableval,enable_perl=yes)\nAC_ARG_ENABLE(python,       [  --disable-python        turn off Python script plugin (default=compiled if found)],enable_python=$enableval,enable_python=yes)\nAC_ARG_ENABLE(python2,      [  --enable-python2        use Python 2 instead of Python 3 (default=off)],enable_python2=$enableval,enable_python2=no)\nAC_ARG_ENABLE(ruby,         [  --disable-ruby          turn off Ruby script plugin (default=compiled if found)],enable_ruby=$enableval,enable_ruby=yes)\nAC_ARG_ENABLE(lua,          [  --disable-lua           turn off Lua script plugin (default=compiled if found)],enable_lua=$enableval,enable_lua=yes)\nAC_ARG_ENABLE(tcl,          [  --disable-tcl           turn off Tcl script plugin (default=compiled if found)],enable_tcl=$enableval,enable_tcl=yes)\nAC_ARG_ENABLE(guile,        [  --disable-guile         turn off Guile (scheme) script plugin (default=compiled if found)],enable_guile=$enableval,enable_guile=yes)\nAC_ARG_ENABLE(javascript,   [  --enable-javascript     turn on JavaScript script plugin (default=off)],enable_javascript=$enableval,enable_javascript=no)\nAC_ARG_ENABLE(php,          [  --disable-php           turn off PHP script plugin (default=compiled if found)],enable_php=$enableval,enable_php=yes)\nAC_ARG_ENABLE(spell,        [  --disable-spell         turn off Spell checker plugin (default=compiled)],enable_spell=$enableval,enable_spell=yes)\nAC_ARG_ENABLE(enchant,      [  --enable-enchant        turn on Enchant lib for Spell checker plugin (default=off)],enable_enchant=$enableval,enable_enchant=no)\nAC_ARG_ENABLE(trigger,      [  --disable-trigger       turn off Trigger plugin (default=compiled)],enable_trigger=$enableval,enable_trigger=yes)\nAC_ARG_ENABLE(xfer,         [  --disable-xfer          turn off Xfer (file transfer) plugin (default=compiled)],enable_xfer=$enableval,enable_xfer=yes)\nAC_ARG_WITH(tclconfig,      [  --with-tclconfig=DIR    directory containing tcl configuration (tclConfig.sh)],tclconfig=$withval,tclconfig='')\nAC_ARG_WITH(debug,          [  --with-debug            debugging: 0=no debug, 1=debug compilation (default=1)],debug=$withval,debug=1)\nAC_ARG_ENABLE(tests,        [  --enable-tests          turn on build of tests (default=not built)],enable_tests=$enableval,enable_tests=no)\nAC_ARG_ENABLE(man,          [  --enable-man            turn on build of man page (default=not built)],enable_man=$enableval,enable_man=no)\nAC_ARG_ENABLE(doc,          [  --enable-doc            turn on build of documentation (default=not built)],enable_doc=$enableval,enable_doc=no)\n\nAC_ARG_VAR(WEECHAT_HOME, [WeeChat home directory for config, logs, scripts.. (default is \"~/.weechat\")])\nAC_ARG_VAR(CA_FILE, [File containing the certificate authorities (default is \"/etc/ssl/certs/ca-certificates.crt\"). This is the default value of option \"weechat.network.gnutls_ca_file\".])\n\nif test \"x$WEECHAT_HOME\" = \"x\" ; then\n    WEECHAT_HOME=\"~/.weechat\"\nfi\nAC_DEFINE_UNQUOTED(WEECHAT_HOME, \"$WEECHAT_HOME\")\n\nif test \"x$CA_FILE\" = \"x\" ; then\n    CA_FILE=\"/etc/ssl/certs/ca-certificates.crt\"\nfi\nAC_DEFINE_UNQUOTED(CA_FILE, \"$CA_FILE\")\n\nnot_asked=\"\"\nnot_found=\"\"\n\nif test \"x$enable_headless\" != \"xyes\" && test \"x$enable_tests\" = \"xyes\"; then\n    AC_MSG_ERROR([*** Headless mode is required for tests.])\nfi\n\n# ------------------------------------------------------------------------------\n#                                  pkg-config\n# ------------------------------------------------------------------------------\n\nPKGCONFIG=\"\"\nAC_CHECK_PROGS(PKGCONFIG, pkg-config)\nif test \"x$PKGCONFIG\" = \"x\"; then\n    AC_MSG_ERROR([\n*** \"pkg-config\" couldn't be found on your system.\n*** Try to install it with your software package manager.])\nfi\n\n# ------------------------------------------------------------------------------\n#                                dynamic loader\n# ------------------------------------------------------------------------------\n\nPLUGINS_LFLAGS=\n\nAC_CHECK_FUNCS(dlopen, LIBDL_FOUND=yes, LIBDL_FOUND=no)\nif test \"$LIBDL_FOUND\" != \"yes\"; then\n    AC_CHECK_LIB(dl, dlopen, [LIBDL_FOUND=yes; PLUGINS_LFLAGS=-ldl], LIBDL_FOUND=no)\nfi\nif test \"$LIBDL_FOUND\" != \"yes\"; then\n    AC_MSG_ERROR([\n*** \"dl\" library (dynamic library loader) couldn't be found on your system.\n*** Try to install it with your software package manager.])\nfi\nAC_SUBST(PLUGINS_LFLAGS)\n\n# ------------------------------------------------------------------------------\n#                                    gui\n# ------------------------------------------------------------------------------\n\nif test \"x$enable_ncurses\" = \"xyes\" ; then\n    if test \"$LIBNCURSESW_FOUND\" = \"0\" ; then\n        if test \"$LIBNCURSES_FOUND\" = \"0\" ; then\n            AC_MSG_WARN([\n*** ncurses library not found!\n*** WeeChat will be built without ncurses support.])\n            enable_ncurses=\"no\"\n            not_found=\"$not_found ncurses\"\n        else\n            AC_MSG_WARN([\n*** ncursesw library not found! Falling back to \"ncurses\"\n*** Be careful, UTF-8 display may not work properly if your locale is UTF-8.])\n            NCURSES_LFLAGS=\"-lncurses\"\n        fi\n    else\n        NCURSES_LFLAGS=\"-lncursesw\"\n    fi\n    AC_CHECK_HEADERS([ncurses.h ncursesw/curses.h])\n    AC_SUBST(NCURSES_LFLAGS)\nelse\n    not_asked=\"$not_asked ncurses\"\nfi\n\n# ------------------------------------------------------------------------------\n#                                   headless\n# ------------------------------------------------------------------------------\n\nif test \"x$enable_headless\" != \"xyes\" ; then\n    not_asked=\"$not_asked headless\"\nfi\n\n# ------------------------------------------------------------------------------\n#                                    iconv\n# ------------------------------------------------------------------------------\n\nICONV_LFLAGS=\"\"\n\niconv_found=\"no\"\nAC_CHECK_HEADER(iconv.h,ac_found_iconv_header=\"yes\",ac_found_iconv_header=\"no\")\nif test \"x$ac_found_iconv_header\" = \"xyes\" ; then\n   AC_CHECK_LIB(iconv,iconv_open,ac_found_iconv_lib=\"yes\",ac_found_iconv_lib=\"no\")\n   if test \"x$ac_found_iconv_lib\" = \"xno\" ; then\n      AC_CHECK_LIB(iconv,libiconv_open,ac_found_iconv_lib=\"yes\",ac_found_iconv_lib=\"no\")\n   fi\n   if test \"x$ac_found_iconv_lib\" = \"xyes\" ; then\n      ICONV_LFLAGS=\"-liconv\"\n      LIBS=\"$LIBS $ICONV_LFLAGS\"\n   fi\n   AC_MSG_CHECKING(for iconv usability in programs)\n   AC_TRY_RUN([\n        #include <iconv.h>\n        int main(int argc, char **argv) {\n            iconv_t conv = iconv_open(\"ISO8859-1\", \"UTF-8\");\n            if (conv != (iconv_t) -1) {\n                return 0;\n            }\n            return 1;\n      }],iconv_found=\"yes\", iconv_found=\"no\", iconv_found=\"assume-yes\")\n  if test \"x$iconv_found\" = \"xno\" ; then\n     AC_MSG_RESULT(no)\n  else\n     AC_MSG_RESULT(yes)\n  fi\nfi\n\nif test \"x$iconv_found\" = \"xno\" ; then\n   AC_MSG_ERROR([\n*** Iconv headers and/or libraries couldn't be found on your system.\n*** Try to install them with your software package manager.\n*** WeeChat can't be built without Iconv support.])\nfi\n\n# ------------------------------------------------------------------------------\n#                                   plugins\n# ------------------------------------------------------------------------------\n\nif test \"x$enable_scripts\" = \"xno\" ; then\n    enable_perl=\"no\"\n    enable_python=\"no\"\n    enable_ruby=\"no\"\n    enable_lua=\"no\"\n    enable_tcl=\"no\"\n    enable_guile=\"no\"\n    enable_javascript=\"no\"\n    enable_php=\"no\"\nfi\n\n# ---------------------------------- alias -------------------------------------\n\nif test \"x$enable_alias\" = \"xyes\" ; then\n    ALIAS_CFLAGS=\"\"\n    ALIAS_LFLAGS=\"\"\n    AC_SUBST(ALIAS_CFLAGS)\n    AC_SUBST(ALIAS_LFLAGS)\n    AC_DEFINE(PLUGIN_ALIAS)\nelse\n    not_asked=\"$not_asked alias\"\nfi\n\n# --------------------------------- buflist ------------------------------------\n\nif test \"x$enable_buflist\" = \"xyes\" ; then\n    AC_DEFINE(PLUGIN_BUFLIST)\nelse\n    not_asked=\"$not_asked buflist\"\nfi\n\n# --------------------------------- charset ------------------------------------\n\nif test \"x$enable_charset\" = \"xyes\" ; then\n    CHARSET_CFLAGS=\"\"\n    CHARSET_LFLAGS=\"$ICONV_LFLAGS\"\n    AC_SUBST(CHARSET_CFLAGS)\n    AC_SUBST(CHARSET_LFLAGS)\n    AC_DEFINE(PLUGIN_CHARSET)\nelse\n    not_asked=\"$not_asked charset\"\nfi\n\n# ---------------------------------- exec --------------------------------------\n\nif test \"x$enable_exec\" = \"xyes\" ; then\n    EXEC_CFLAGS=\"\"\n    EXEC_LFLAGS=\"\"\n    AC_SUBST(EXEC_CFLAGS)\n    AC_SUBST(EXEC_LFLAGS)\n    AC_DEFINE(PLUGIN_EXEC)\nelse\n    not_asked=\"$not_asked exec\"\nfi\n\n# ---------------------------------- fifo --------------------------------------\n\nif test \"x$enable_fifo\" = \"xyes\" ; then\n    FIFO_CFLAGS=\"\"\n    FIFO_LFLAGS=\"\"\n    AC_SUBST(FIFO_CFLAGS)\n    AC_SUBST(FIFO_LFLAGS)\n    AC_DEFINE(PLUGIN_FIFO)\nelse\n    not_asked=\"$not_asked fifo\"\nfi\n\n# --------------------------------- fset ---------------------------------------\n\nif test \"x$enable_fset\" = \"xyes\" ; then\n    AC_DEFINE(PLUGIN_FSET)\nelse\n    not_asked=\"$not_asked fset\"\nfi\n\n# ----------------------------------- irc --------------------------------------\n\nif test \"x$enable_irc\" = \"xyes\" ; then\n    AC_DEFINE(PLUGIN_IRC)\nelse\n    not_asked=\"$not_asked irc\"\nfi\n\n# --------------------------------- logger -------------------------------------\n\nif test \"x$enable_logger\" = \"xyes\" ; then\n    LOGGER_CFLAGS=\"\"\n    LOGGER_LFLAGS=\"\"\n    AC_SUBST(LOGGER_CFLAGS)\n    AC_SUBST(LOGGER_LFLAGS)\n    AC_DEFINE(PLUGIN_LOGGER)\nelse\n    not_asked=\"$not_asked logger\"\nfi\n\n# --------------------------------- relay --------------------------------------\n\nif test \"x$enable_relay\" = \"xyes\" ; then\n    RELAY_CFLAGS=\"\"\n    RELAY_LFLAGS=\"\"\n    AC_SUBST(RELAY_CFLAGS)\n    AC_SUBST(RELAY_LFLAGS)\n    AC_DEFINE(PLUGIN_RELAY)\nelse\n    not_asked=\"$not_asked relay\"\nfi\n\n# --------------------------------- script -------------------------------------\n\nif test \"x$enable_script\" = \"xyes\" ; then\n    AC_DEFINE(PLUGIN_SCRIPT)\nelse\n    not_asked=\"$not_asked script\"\nfi\n\n# ---------------------------------- perl --------------------------------------\n\nPERL_VERSION=\n\nif test \"x$enable_perl\" = \"xyes\" ; then\n    AC_PATH_PROGS(PERL, perl perl5)\n    if test -z $PERL ; then\n        AC_MSG_WARN([\n*** Perl must be installed on your system but perl interpreter couldn't be found in path.\n*** Please check that perl is in path, or install it with your software package manager.\n*** WeeChat will be built without Perl support.])\n        enable_perl=\"no\"\n        not_found=\"$not_found perl\"\n    else\n        PERL_VERSION=`perl -V:version | sed \"s/version='\\(.*\\)';/\\1/\"`\n        AC_MSG_CHECKING(for Perl headers files)\n\n        PERL_HEADER_TEST=`PT=perltest.c ; echo \"#include <EXTERN.h>\" > $PT;  echo \"#include <perl.h>\" >> $PT;  echo \"#include <XSUB.h>\" >> $PT ;  echo \"int main() { return 0; }\" >> $PT ; $CC -Wall $PT -o $PT.out $($PERL -MExtUtils::Embed -e ccopts -e ldopts) 1>/dev/null 2>&1; echo $?; rm -f $PT $PT.out 1>/dev/null 2>&1`\n\n        if test \"x$PERL_HEADER_TEST\" = \"x0\" ; then\n            PERL_CFLAGS=`$PERL -MExtUtils::Embed -e ccopts`\n            AC_MSG_RESULT(found)\n            AC_MSG_CHECKING(for Perl library)\n            PERL_LIB_TEST=`PT=perltest.c ; echo \"int main() { return 0; }\" > $PT ; $CC -Wall $PT -o $PT.out $($PERL -MExtUtils::Embed -e ldopts) 1>/dev/null 2>&1; echo $?; rm -f $PT $PT.out 1>/dev/null 2>&1`\n            if test \"x$PERL_LIB_TEST\" = \"x0\" ; then\n                PERL_LFLAGS=`$PERL -MExtUtils::Embed -e ldopts`\n                AC_MSG_RESULT(found)\n            else\n                AC_MSG_WARN([\n*** Perl library couldn't be found on your system.\n*** Try to install it with your software package manager.\n*** WeeChat will be built without Perl support.])\n                enable_perl=\"no\"\n                not_found=\"$not_found perl\"\n            fi\n        else\n            AC_MSG_WARN([\n*** Perl headers couldn't be found on your system.\n*** Try to install it with your software package manager.\n*** WeeChat will be built without Perl support.])\n            enable_perl=\"no\"\n            not_found=\"$not_found perl\"\n        fi\n    fi\nelse\n    not_asked=\"$not_asked perl\"\nfi\n\nif test \"x$enable_perl\" = \"xyes\" ; then\n    AC_SUBST(PERL_CFLAGS)\n    AC_SUBST(PERL_LFLAGS)\n    AC_DEFINE(PLUGIN_PERL)\nfi\n\n# --------------------------------- python -------------------------------------\n\nPYTHON_VERSION=\n\nif test \"x$enable_python\" = \"xyes\" ; then\n    if test \"x$enable_python2\" = \"xyes\" ; then\n        PKG_CHECK_MODULES(PYTHON, [python2], [PYTHON_FOUND=yes; PYTHON_VERSION=`$PKGCONFIG --modversion python2`], [PYTHON_FOUND=no])\n    else\n        PKG_CHECK_MODULES(PYTHON, [python3-embed], [PYTHON_FOUND=yes; PYTHON_VERSION=`$PKGCONFIG --modversion python3-embed`], [PYTHON_FOUND=no])\n        if test \"x$PYTHON_FOUND\" != \"xyes\"; then\n            PKG_CHECK_MODULES(PYTHON, [python3], [PYTHON_FOUND=yes; PYTHON_VERSION=`$PKGCONFIG --modversion python3`], [PYTHON_FOUND=no])\n        fi\n    fi\n    if test \"x$PYTHON_FOUND\" != \"xyes\" ; then\n        AC_MSG_WARN([\n*** Python must be installed on your system but python interpreter couldn't be found in path.\n*** Please check that python is in path, or install it with your software package manager.\n*** WeeChat will be built without Python support.])\n        enable_python=\"no\"\n        not_found=\"$not_found python\"\n    fi\nelse\n    not_asked=\"$not_asked python\"\nfi\n\nif test \"x$enable_python\" = \"xyes\" ; then\n    AC_SUBST(PYTHON_CFLAGS)\n    AC_SUBST(PYTHON_LIBS)\n    AC_SUBST(PYTHON_VERSION)\n    AC_DEFINE(PLUGIN_PYTHON)\nfi\n\n# ---------------------------------- ruby --------------------------------------\n\nRUBY_VERSION=\n\nif test \"x$enable_ruby\" = \"xyes\" ; then\n    RUBY_CFLAGS=\"\"\n    RUBY_LFLAGS=\"\"\n    for v in \"2.7\" \"2.6\" \"2.5\" \"2.4\" \"2.3\" \"2.2\" \"2.1\" \"2.0\" \"1.9\" \"1.8\" ; do\n        pkgconfig_ruby_found=`$PKGCONFIG --exists ruby-$v 2>/dev/null`\n        if test \"x$?\" = \"x0\" ; then\n            RUBY_VERSION=`$PKGCONFIG --modversion ruby-$v`\n            RUBY_CFLAGS=`$PKGCONFIG --cflags ruby-$v`\n            RUBY_LFLAGS=`$PKGCONFIG --libs ruby-$v`\n            break\n        fi\n    done\n\n    # detect old Ruby versions\n    if test \"x$RUBY_CFLAGS\" = \"x\" -o \"x$RUBY_LFLAGS\" = \"x\" ; then\n        AC_PATH_PROGS(RUBY, ruby1.9.3 ruby1.9.2 ruby1.9.1 ruby1.9 ruby)\n        if test -z $RUBY ; then\n            AC_MSG_WARN([\n*** Ruby must be installed on your system but ruby interpreter couldn't be found in path.\n*** Please check that ruby is in path, or install it with your software package manager.\n*** WeeChat will be built without Ruby support.])\n            enable_ruby=\"no\"\n            not_found=\"$not_found ruby\"\n        else\n            RUBY_VERSION=`$RUBY -rrbconfig -e \"puts RbConfig::CONFIG[['MAJOR']] + '.' + RbConfig::CONFIG[['MINOR']] + '.' + RbConfig::CONFIG[['TEENY']]\"`\n            RUBY_INCLUDE=`$RUBY -rrbconfig -e \"puts RbConfig::CONFIG[['rubyhdrdir']] || RbConfig::CONFIG[['archdir']]\"`\n            RUBY_ARCH=`$RUBY -rrbconfig -e 'print RbConfig::CONFIG[[\"arch\"]]'`\n            AC_MSG_CHECKING(for Ruby header files)\n            if test -d \"$RUBY_INCLUDE/\"; then\n                RUBY_CFLAGS=\"-I$RUBY_INCLUDE/ -I$RUBY_INCLUDE/$RUBY_ARCH\"\n            else\n                AC_MSG_WARN([\n*** Ruby header files couldn't be found on your system.\n*** Try to install them with your software package manager.\n*** WeeChat will be built without Ruby support.])\n                enable_ruby=\"no\"\n                not_found=\"$not_found ruby\"\n            fi\n            AC_MSG_RESULT(found)\n            RUBY_LFLAGS=`$RUBY -rrbconfig -e \"puts RbConfig::CONFIG[['LIBRUBYARG_SHARED']]\"`\n        fi\n    fi\nelse\n    not_asked=\"$not_asked ruby\"\nfi\n\nif test \"x$enable_ruby\" = \"xyes\" ; then\n    AC_SUBST(RUBY_CFLAGS)\n    AC_SUBST(RUBY_LFLAGS)\n    AC_DEFINE(PLUGIN_RUBY)\nfi\n\n# ---------------------------------- lua --------------------------------------\n\nLUA_VERSION=\n\nif test \"x$enable_lua\" = \"xyes\" ; then\n    ac_save_CXXFLAGS=\"$CXXFLAGS\"\n    ac_save_CFLAGS=\"$CFLAGS\"\n    ac_save_LDFLAGS=\"$LDFLAGS\"\n\n    LUA_CFLAGS=\"\"\n    LUA_LFLAGS=\"\"\n\n    if test -n \"$lua_inc\"; then\n       CFLAGS=\"$CFLAGS -I$lua_inc\"\n       CXXFLAGS=\"$CXXFLAGS -I$lua_inc\"\n    fi\n    if test -n \"$lua_lib\"; then\n       LDFLAGS=\"$LDFLAGS -L$lua_lib\"\n    fi\n\n    if test \"x$LUA_CFLAGS\" = \"x\" -o \"x$LUA_LFLAGS\" = \"x\" ; then\n        AC_MSG_CHECKING(for Lua headers and libraries with pkg-config)\n        echo\n        for l in \"53\" \"5.3\" \"52\" \"5.2\" \"51\" \"5.1\" \"50\" \"5.0\" \"$lua_suffix\" \"\" ; do\n            pkgconfig_lua_found=`$PKGCONFIG --exists lua$l 2>/dev/null`\n            if test \"x$?\" = \"x0\" ; then\n                LUA_VERSION=`$PKGCONFIG --modversion lua$l`\n                LUA_CFLAGS=\"$LUA_CFLAGS \"`$PKGCONFIG --cflags lua$l`\n                LUA_LFLAGS=\"$LUA_LFLAGS \"`$PKGCONFIG --libs lua$l`\n\n                pkgconfig_lualib_found=`$PKGCONFIG --exists lualib$l 2>/dev/null`\n                if test  \"x$?\" = \"x0\"; then\n                    LUA_CFLAGS=\"$LUA_CFLAGS \"`$PKGCONFIG --cflags lualib$l`\n                    LUA_LFLAGS=\"$LUA_LFLAGS \"`$PKGCONFIG --libs lualib$l`\n                fi\n                break\n            fi\n        done\n    fi\n\n    if test \"x$LUA_CFLAGS\" = \"x\" -o \"x$LUA_LFLAGS\" = \"x\" ; then\n        LUACONFIG=\"\"\n        AC_CHECK_PROGS(LUACONFIG, lua-config53 lua-config5.3 lua-config52 lua-config5.2 lua-config51 lua-config5.1 lua-config50 lua-config5.0 lua-config)\n        if test \"x$LUACONFIG\" != \"x\" ; then\n            AC_MSG_CHECKING(for Lua headers and libraries with lua-config)\n            echo\n            LUA_CFLAGS=`$LUACONFIG --include`\n            LUA_LFLAGS=`$LUACONFIG --libs`\n            LUA_VERSION=\"5.0.x\"\n        fi\n    fi\n\n    if test \"x$LUA_CFLAGS\" = \"x\" -o \"x$LUA_LFLAGS\" = \"x\" ; then\n        AC_MSG_CHECKING(for Lua headers and libraries)\n        echo\n        AC_CHECK_HEADER(lua.h,ac_found_lua_header=\"yes\",ac_found_lua_header=\"no\")\n        AC_CHECK_HEADER(lualib.h,ac_found_liblua_header=\"yes\",ac_found_liblua_header=\"no\")\n        if test \"x$ac_found_lua_header\" = \"xyes\" -a \"x$ac_found_liblua_header\" = \"xyes\"; then\n            LUA_CFLAGS=\"$CFLAGS\"\n        fi\n        for l in \"53\" \"5.3\" \"52\" \"5.2\" \"51\" \"5.1\" \"50\" \"5.0\" \"$lua_suffix\" \"\" ; do\n            AC_CHECK_LIB(lua$l,lua_call,ac_found_lua_lib=\"yes\",ac_found_lua_lib=\"no\")\n            if test \"x$ac_found_lua_lib\" = \"xyes\" ; then\n                LUA_VERSION=\">=5.1.0\"\n\n                LUA_LFLAGS=\"$LDFLAGS -llua$l -lm\"\n\n                ac2_save_LDFLAGS=\"$LDFLAGS\"\n                LDFLAGS=\"$LDFLAGS -llua$l -lm\"\n\n                if echo \"$host_os\" | grep \"^linux\" 1>/dev/null 2>&1 ; then\n                    LDFLAGS=\"$LDFLAGS -ldl\"\n                fi\n\n                AC_CHECK_LIB(lualib$l,luaL_openlib,ac_found_liblua_lib=\"yes\",ac_found_liblua_lib=\"no\")\n                if test \"x$ac_found_liblua_lib\" = \"xyes\" ; then\n                    LUA_VERSION=\"5.0.x\"\n\n                    LUA_LFLAGS=\"$LUA_LFLAGS -llualib$l\"\n\n                    if echo \"$host_os\" | grep \"^linux\" 1>/dev/null 2>&1 ; then\n                        LUA_LFLAGS=\"$LUA_LFLAGS -ldl\"\n                    fi\n                fi\n\n                LDFLAGS=\"$ac2_save_LDFLAGS\"\n                break\n            fi\n        done\n    fi\n\n    AC_MSG_CHECKING(for Lua compiling and linking)\n    LUA_TEST=`LT=luatest.c ; echo \"#include <lua.h>\" > $LT;  echo \"#include <lualib.h>\" >> $LT; echo \"int main() { luaopen_base((lua_State *)lua_open()); return 0; }\" >> $LT ; $CC -Wall $LT -o $LT.out $LUA_CFLAGS $LUA_LFLAGS $CFLAGS $LDFLAGS 1>/dev/null 2>&1 ; echo $?; rm -f $LT $LT.out 1>/dev/null 2>&1`\n    if test \"x$LUA_TEST\" != \"x0\" ; then\n        LUA52_TEST=`LT=luatest.c ; echo \"#include <lua.h>\" > $LT;  echo \"#include <lualib.h>\" >> $LT; echo \"int main() { luaopen_base((lua_State *)luaL_newstate()); return 0; }\" >> $LT ; $CC -Wall $LT -o $LT.out $LUA_CFLAGS $LUA_LFLAGS $CFLAGS $LDFLAGS 1>/dev/null 2>&1 ; echo $?; rm -f $LT $LT.out 1>/dev/null 2>&1`\n        if test \"x$LUA52_TEST\" != \"x0\" ; then\n            AC_MSG_RESULT(no)\n            AC_MSG_WARN([\n*** Lua (>=5.0) headers and/or libraries couldn't be found on your system.\n*** Try to install liblua, liblualib and liblua-dev with your software package manager.\n*** WeeChat will be built without Lua support.])\n            enable_lua=\"no\"\n            not_found=\"$not_found lua\"\n        else\n            AC_MSG_RESULT(yes)\n        fi\n    else\n        AC_MSG_RESULT(yes)\n    fi\n\n    CFLAGS=\"$ac_save_CFLAGS\"\n    CXXFLAGS=\"$ac_save_CXXFLAGS\"\n    LDFLAGS=\"$ac_save_LDFLAGS\"\nelse\n    not_asked=\"$not_asked lua\"\nfi\n\nif test \"x$enable_lua\" = \"xyes\" ; then\n    AC_SUBST(LUA_CFLAGS)\n    AC_SUBST(LUA_LFLAGS)\n    AC_DEFINE(PLUGIN_LUA)\nfi\n\n# --------------------------------- tcl -------------------------------------\n\nTCL_VERSION=\n\nif test \"x$enable_tcl\" = \"xyes\" ; then\n    enable_plugins=\"yes\"\n\n    AC_MSG_CHECKING(for tclConfig.sh)\n    tcl_found=\"no\"\n    tcl_dirs=\"/usr/lib/tcl8.6 /usr/lib64/tcl8.6 /usr/lib/tcl8.5 /usr/lib64/tcl8.5 /lib /lib64 /usr/lib /usr/lib64 /usr/tcl/lib /usr/tcl/lib64 /usr/local/tcl-8.6/lib /usr/local/tcl-8.6/lib64 /usr/local/tcl-8.5/lib /usr/local/tcl-8.5/lib64 /usr/local/lib /usr/local/lib64 /usr/local/tcl/lib /usr/local/tcl/lib64 /opt/lib /opt/lib64\"\n    if test \"x$tclconfig\" != \"x\" ; then\n      tcl_dirs=\"${tclconfig} ${tcl_dirs}\"\n    fi\n    for tcl_dir in $tcl_dirs ; do\n        if test -f ${tcl_dir}/tclConfig.sh ; then\n            . ${tcl_dir}/tclConfig.sh\n            TCL_CFLAGS=\"-I${TCL_PREFIX}/include $TCL_INCLUDE_SPEC\"\n            TCL_LFLAGS=\"$TCL_LIB_SPEC $TCL_LIBS\"\n            tcl_found=\"yes\"\n            AC_MSG_RESULT(${tcl_dir}/tclConfig.sh)\n            break\n        fi\n    done\n    if test \"x$tcl_found\" = \"xno\" ; then\n        AC_MSG_WARN([\n*** Script tclConfig.sh couldn't be found on your system.\n*** WeeChat will be built without Tcl support.])\n        enable_tcl=\"no\"\n        not_found=\"$not_found tcl\"\n    fi\nelse\n    not_asked=\"$not_asked tcl\"\nfi\n\nif test \"x$enable_tcl\" = \"xyes\" ; then\n    AC_SUBST(TCL_CFLAGS)\n    AC_SUBST(TCL_LFLAGS)\n    AC_DEFINE(PLUGIN_TCL)\nfi\n\n# --------------------------------- guile -------------------------------------\n\nGUILE_VERSION=\n\nif test \"x$enable_guile\" = \"xyes\" ; then\n    enable_plugins=\"yes\"\n\n    guile_found=\"no\"\n    AC_MSG_CHECKING(for Guile headers and libraries)\n    echo\n    for v in \"3.0\" \"2.2\" \"2.0\" ; do\n        pkgconfig_guile_found=`$PKGCONFIG --exists guile-$v 2>/dev/null`\n        if test \"x$?\" = \"x0\" ; then\n            GUILE_VERSION=`$PKGCONFIG --modversion guile-$v`\n            GUILE_CFLAGS=`$PKGCONFIG --cflags guile-$v`\n            GUILE_LFLAGS=`$PKGCONFIG --libs guile-$v`\n            guile_found=\"yes\"\n            break\n        fi\n    done\n\n    if test \"x$guile_found\" = \"xyes\" ; then\n        # check if variable \"scm_install_gmp_memory_functions\" exists\n        ac_save_CFLAGS=\"$CFLAGS\"\n        ac_save_LDFLAGS=\"$LDFLAGS\"\n        CFLAGS=\"$CFLAGS $GUILE_CFLAGS\"\n        LDFLAGS=\"$LDFLAGS $GUILE_LFLAGS\"\n        AC_CACHE_CHECK([for variable scm_install_gmp_memory_functions], ac_cv_have_guile_gmp_memory_functions, [\n        AC_LINK_IFELSE([AC_LANG_PROGRAM(\n            [[ #include <libguile.h>]],\n            [[ scm_install_gmp_memory_functions = 0; ]])],\n            [ ac_have_guile_gmp_memory_functions=\"yes\" ],\n            [ ac_have_guile_gmp_memory_functions=\"no\" ])])\n        CFLAGS=\"$ac_save_CFLAGS\"\n        LDFLAGS=\"$ac_save_LDFLAGS\"\n        if test \"x$ac_have_guile_gmp_memory_functions\" = \"xyes\"; then\n            AC_DEFINE(HAVE_GUILE_GMP_MEMORY_FUNCTIONS)\n        fi\n    else\n        AC_MSG_WARN([\n*** Guile >= 2.0 couldn't be found on your system.\n*** WeeChat will be built without Guile (scheme) support.])\n        enable_guile=\"no\"\n        not_found=\"$not_found guile\"\n    fi\nelse\n    not_asked=\"$not_asked guile\"\nfi\n\nif test \"x$enable_guile\" = \"xyes\" ; then\n    AC_SUBST(GUILE_CFLAGS)\n    AC_SUBST(GUILE_LFLAGS)\n    AC_DEFINE(PLUGIN_GUILE)\nfi\n\n# ------------------------------ javascript -----------------------------------\n\nAC_LANG_PUSH([C++])\n\nif test \"x$enable_javascript\" = \"xyes\" ; then\n    enable_plugins=\"yes\"\n\n    v8_found=\"no\"\n    AC_CHECK_HEADER(v8.h,ac_found_v8_header=\"yes\",ac_found_v8_header=\"no\")\n    if test \"x$ac_found_v8_header\" = \"xyes\" ; then\n        #AC_CHECK_LIB(v8,v8,ac_found_v8_lib=\"yes\",ac_found_v8_lib=\"no\")\n        ac_save_LIBS=\"$LIBS\"\n        LIBS=\"$LIBS -lv8 -lpthread\"\n        AC_MSG_CHECKING(for v8 usability in programs)\n        AC_TRY_RUN([\n            #include <v8.h>\n            using namespace v8;\n            int main(int argc, char **argv) {\n                const char *version = V8::GetVersion();\n                return 0;\n            }],ac_found_v8_lib=\"yes\", ac_found_v8_lib=\"no\", ac_found_v8_lib=\"assume-yes\")\n        LIBS=\"$ac_save_LIBS\"\n        if test \"x$ac_found_v8_lib\" = \"xyes\" ; then\n            AC_MSG_RESULT(yes)\n            v8_found=\"yes\"\n            V8_CFLAGS=\"\"\n            V8_LFLAGS=\"-lv8 -lpthread\"\n        else\n            AC_MSG_RESULT(no)\n            AC_MSG_WARN([\n*** V8 library couldn't be found on your system.\n*** WeeChat will be built without JavaScript support.])\n            enable_javascript=\"no\"\n            not_found=\"$not_found javascript/v8\"\n        fi\n    else\n        AC_MSG_WARN([\n*** V8 header files couldn't be found on your system.\n*** WeeChat will be built without JavaScript support.])\n        enable_javascript=\"no\"\n        not_found=\"$not_found javascript/v8\"\n    fi\nelse\n    not_asked=\"$not_asked javascript\"\nfi\n\nif test \"x$enable_javascript\" = \"xyes\" ; then\n    AC_SUBST(V8_CFLAGS)\n    AC_SUBST(V8_LFLAGS)\n    AC_DEFINE(PLUGIN_JAVASCRIPT)\nfi\n\nAC_LANG_POP\n\n# ---------------------------------- php --------------------------------------\n\nPHP_VERSION=\n\nif test \"x$enable_php\" = \"xyes\" ; then\n    ac_save_CXXFLAGS=\"$CXXFLAGS\"\n    ac_save_CFLAGS=\"$CFLAGS\"\n    ac_save_LDFLAGS=\"$LDFLAGS\"\n\n    PHP_CFLAGS=\"\"\n    PHP_LFLAGS=\"\"\n\n    if test -n \"$php_inc\"; then\n       CFLAGS=\"$CFLAGS -I$php_inc\"\n       CXXFLAGS=\"$CXXFLAGS -I$php_inc\"\n    fi\n    if test -n \"$php_lib\"; then\n       LDFLAGS=\"$LDFLAGS -L$php_lib\"\n    fi\n\n    if test \"x$PHP_CFLAGS\" = \"x\" -o \"x$PHP_LFLAGS\" = \"x\" ; then\n        AC_MSG_CHECKING(for PHP headers and libraries with pkg-config)\n        echo\n        for l in \"7.4\" \"74\" \"7.3\" \"73\" \"7.2\" \"72\" \"7.1\" \"71\" \"7.0\" \"70\" \"7\" \"$php_suffix\" \"\" ; do\n            pkgconfig_php_found=`$PKGCONFIG --exists php$l 2>/dev/null`\n            if test \"x$?\" = \"x0\" ; then\n                pkgconfig_php_found=`$PKGCONFIG --atleast-version=7 php$l 2>/dev/null`\n                if test \"x$?\" = \"x0\" ; then\n                    PHP_VERSION=`$PKGCONFIG --modversion php$l`\n                    PHP_CFLAGS=\"$PHP_CFLAGS \"`$PKGCONFIG --cflags php$l`\n                    PHP_LFLAGS=\"$PHP_LFLAGS \"`$PKGCONFIG --libs php$l`\n                    break\n                fi\n            fi\n        done\n    fi\n\n    if test \"x$PHP_CFLAGS\" = \"x\" -o \"x$PHP_LFLAGS\" = \"x\" ; then\n        PHPCONFIG=\"\"\n        AC_MSG_CHECKING(for PHP headers and libraries with php-config)\n        for l in \"7.4\" \"74\" \"7.3\" \"73\" \"7.2\" \"72\" \"7.1\" \"71\" \"7.0\" \"70\" \"7\" \"$php_suffix\" \"\" ; do\n            AC_CHECK_PROG(PHPCONFIG, \"php-config$l\", \"php-config$l\")\n            if test \"x$PHPCONFIG\" != \"x\" ; then\n                php_config_version=`$PHPCONFIG --version`\n                if test \"x${php_config_version#7}\" != \"x${php_config_version}\" ; then\n                    PHP_VERSION=$php_config_version\n                    PHP_CFLAGS=`$PHPCONFIG --includes`\n                    PHP_LFLAGS=\"-L$($PHPCONFIG --prefix)/lib/ $($PHPCONFIG --libs) -lphp$l\"\n                    break\n                fi\n            fi\n        done\n    fi\n\n    if test \"x$PHP_CFLAGS\" = \"x\" -o \"x$PHP_LFLAGS\" = \"x\" ; then\n        AC_MSG_CHECKING(for PHP headers and libraries)\n        echo\n        AC_CHECK_HEADER(php.h,ac_found_php_header=\"yes\",ac_found_php_header=\"no\")\n        if test \"x$ac_found_php_header\" = \"xyes\" ; then\n            PHP_CFLAGS=\"$CFLAGS\"\n        fi\n        for l in \"7.4\" \"74\" \"7.3\" \"73\" \"7.2\" \"72\" \"7.1\" \"71\" \"7.0\" \"70\" \"7\" \"$php_suffix\" \"\" ; do\n            AC_CHECK_LIB(php$l,php_execute_script,ac_found_php_lib=\"yes\",ac_found_php_lib=\"no\")\n            if test \"x$ac_found_php_lib\" = \"xyes\" ; then\n                PHP_VERSION=\">=7.0.0\"\n\n                PHP_LFLAGS=\"$LDFLAGS -lphp7 -lm\"\n\n                ac2_save_LDFLAGS=\"$LDFLAGS\"\n                LDFLAGS=\"$LDFLAGS -lphp7 -lm\"\n\n                if echo \"$host_os\" | grep \"^linux\" 1>/dev/null 2>&1 ; then\n                    LDFLAGS=\"$LDFLAGS -ldl\"\n                fi\n\n                LDFLAGS=\"$ac2_save_LDFLAGS\"\n                break\n            fi\n        done\n    fi\n\n    AC_MSG_CHECKING(for PHP compiling and linking)\n    PHP_TEST=`LT=phptest.c ; echo \"#include <sapi/embed/php_embed.h>\" > $LT; echo \"int main() { php_embed_init(0, NULL); php_embed_shutdown(); return 0; }\" >> $LT ; $CC -Wall $LT -o $LT.out $PHP_CFLAGS $PHP_LFLAGS $CFLAGS $LDFLAGS 1>/dev/null 2>&1 ; echo $?; rm -f $LT $LT.out 1>/dev/null 2>&1`\n    if test \"x$PHP_TEST\" != \"x0\" ; then\n        AC_MSG_RESULT(no)\n        AC_MSG_WARN([\n*** PHP (>=7.0) headers and/or libraries couldn't be found on your system.\n*** Try to install libphp-embed with your software package manager.\n*** WeeChat will be built without PHP support.])\n        enable_php=\"no\"\n        not_found=\"$not_found php\"\n    else\n        AC_MSG_RESULT(yes)\n    fi\n\n    CFLAGS=\"$ac_save_CFLAGS\"\n    CXXFLAGS=\"$ac_save_CXXFLAGS\"\n    LDFLAGS=\"$ac_save_LDFLAGS\"\nelse\n    not_asked=\"$not_asked php\"\nfi\n\nif test \"x$enable_php\" = \"xyes\" ; then\n    AC_SUBST(PHP_CFLAGS)\n    AC_SUBST(PHP_LFLAGS)\n    AC_DEFINE(PLUGIN_PHP)\nfi\n\n# ----------------------------------- spell ------------------------------------\n\nif test \"x$enable_spell\" = \"xyes\" ; then\n    ac_found_enchant_lib=\"no\"\n    if test \"x$enable_enchant\" = \"xyes\" ; then\n        PKG_CHECK_MODULES(ENCHANT, [enchant], ac_found_enchant_lib=\"yes\", ac_found_enchant_lib=\"no\")\n    fi\n    if test \"x$ac_found_enchant_lib\" = \"xyes\" ; then\n        CFLAGS=\"$CFLAGS -DUSE_ENCHANT\"\n        SPELL_LIB_USED=\"enchant\"\n\n        # check if function enchant_get_version() exists\n        ac_save_CFLAGS=\"$CFLAGS\"\n        ac_save_LDFLAGS=\"$LDFLAGS\"\n        CFLAGS=\"$CFLAGS $ENCHANT_CFLAGS\"\n        LDFLAGS=\"$LDFLAGS $ENCHANT_LIBS\"\n        AC_CACHE_CHECK([for enchant_get_version() support], ac_cv_have_enchant_get_version, [\n        AC_LINK_IFELSE([AC_LANG_PROGRAM(\n            [[ #include <enchant.h>]],\n            [[ const char *version = enchant_get_version(); ]])],\n            [ ac_have_enchant_get_version=\"yes\" ],\n            [ ac_have_enchant_get_version=\"no\" ])])\n        CFLAGS=\"$ac_save_CFLAGS\"\n        LDFLAGS=\"$ac_save_LDFLAGS\"\n        if test \"x$ac_have_enchant_get_version\" = \"xyes\"; then\n            AC_DEFINE(HAVE_ENCHANT_GET_VERSION)\n        fi\n    else\n        ASPELL_CFLAGS=\"\"\n        ASPELL_LFLAGS=\"\"\n\n        AC_CHECK_HEADER(aspell.h,ac_found_aspell_header=\"yes\",ac_found_aspell_header=\"no\")\n        AC_CHECK_LIB(aspell,new_aspell_speller,ac_found_aspell_lib=\"yes\",ac_found_aspell_lib=\"no\")\n\n        AC_MSG_CHECKING(for aspell headers and libraries)\n        if test \"x$ac_found_aspell_header\" = \"xno\" -o \"x$ac_found_aspell_lib\" = \"xno\" ; then\n            AC_MSG_RESULT(no)\n            AC_MSG_WARN([\n*** Aspell headers and/or libraries couldn't be found on your system.\n*** Try to install them with your software package manager.\n*** WeeChat will be built without Aspell support.])\n            enable_spell=\"no\"\n            not_found=\"$not_found spell\"\n        else\n            AC_MSG_RESULT(yes)\n            ASPELL_LFLAGS=\"$ASPELL_LFLAGS -laspell\"\n            SPELL_LIB_USED=\"aspell\"\n\n            # check if function aspell_version_string() exists\n            ac_save_LDFLAGS=\"$LDFLAGS\"\n            LDFLAGS=\"$LDFLAGS $ASPELL_LFLAGS\"\n            AC_CACHE_CHECK([for aspell_version_string() support], ac_cv_have_aspell_version_string, [\n            AC_LINK_IFELSE([AC_LANG_PROGRAM(\n                [[ #include <aspell.h>]],\n                [[ const char *version = aspell_version_string(); ]])],\n                [ ac_have_aspell_version_string=\"yes\" ],\n                [ ac_have_aspell_version_string=\"no\" ])])\n            LDFLAGS=\"$ac_save_LDFLAGS\"\n            if test \"x$ac_have_aspell_version_string\" = \"xyes\"; then\n                AC_DEFINE(HAVE_ASPELL_VERSION_STRING)\n            fi\n        fi\n    fi\nelse\n    not_asked=\"$not_asked spell\"\nfi\n\nif test \"x$enable_spell\" = \"xyes\" ; then\n    AC_SUBST(ASPELL_CFLAGS)\n    AC_SUBST(ASPELL_LFLAGS)\n    AC_DEFINE(PLUGIN_SPELL)\nfi\n\n# --------------------------------- trigger ------------------------------------\n\nif test \"x$enable_trigger\" = \"xyes\" ; then\n    TRIGGER_CFLAGS=\"\"\n    TRIGGER_LFLAGS=\"\"\n    AC_SUBST(TRIGGER_CFLAGS)\n    AC_SUBST(TRIGGER_LFLAGS)\n    AC_DEFINE(PLUGIN_TRIGGER)\nelse\n    not_asked=\"$not_asked trigger\"\nfi\n\n# ---------------------------------- xfer --------------------------------------\n\nif test \"x$enable_xfer\" = \"xyes\" ; then\n    XFER_CFLAGS=\"\"\n    XFER_LFLAGS=\"\"\n    AC_SUBST(XFER_CFLAGS)\n    AC_SUBST(XFER_LFLAGS)\n    AC_DEFINE(PLUGIN_XFER)\nelse\n    not_asked=\"$not_asked xfer\"\nfi\n\n# ------------------------------------------------------------------------------\n#                                   gcrypt\n# ------------------------------------------------------------------------------\n\nAC_CHECK_HEADER(gcrypt.h,ac_found_gcrypt_header=\"yes\",ac_found_gcrypt_header=\"no\")\nAC_CHECK_LIB(gcrypt,gcry_check_version,ac_found_gcrypt_lib=\"yes\",ac_found_gcrypt_lib=\"no\")\n\nAC_MSG_CHECKING(for gcrypt headers and libraries)\nif test \"x$ac_found_gcrypt_header\" = \"xno\" -o \"x$ac_found_gcrypt_lib\" = \"xno\" ; then\n    AC_MSG_RESULT(no)\n    AC_MSG_ERROR([\n*** libgcrypt was not found. You may want to get it from https://www.gnupg.org/ftp/gcrypt/libgcrypt/\n*** or try to install it with your software package manager.])\nelse\n    AC_MSG_RESULT(yes)\n    GCRYPT_CFLAGS=`libgcrypt-config --cflags`\n    GCRYPT_LFLAGS=`libgcrypt-config --libs`\n    AC_SUBST(GCRYPT_CFLAGS)\n    AC_SUBST(GCRYPT_LFLAGS)\nfi\n\n# ------------------------------------------------------------------------------\n#                                   gnutls\n# ------------------------------------------------------------------------------\n\nAC_CHECK_HEADER(gnutls/gnutls.h,ac_found_gnutls_header=\"yes\",ac_found_gnutls_header=\"no\")\nAC_CHECK_LIB(gnutls,gnutls_global_init,ac_found_gnutls_lib=\"yes\",ac_found_gnutls_lib=\"no\")\n\nAC_MSG_CHECKING(for gnutls headers and libraries)\nif test \"x$ac_found_gnutls_header\" = \"xno\" -o \"x$ac_found_gnutls_lib\" = \"xno\" ; then\n    AC_MSG_RESULT(no)\n    AC_MSG_ERROR([\n*** libgnutls was not found. You may want to get it from https://www.gnupg.org/ftp/gcrypt/gnutls/\n*** or try to install it with your software package manager.])\nelse\n    AC_MSG_RESULT(yes)\n    GNUTLS_CFLAGS=`pkg-config gnutls --cflags`\n    GNUTLS_LFLAGS=`pkg-config gnutls --libs`\n    AC_SUBST(GNUTLS_CFLAGS)\n    AC_SUBST(GNUTLS_LFLAGS)\nfi\n\n# ------------------------------------------------------------------------------\n#                                   flock\n# ------------------------------------------------------------------------------\n\nenable_flock=\"no\"\nAC_CACHE_CHECK([for flock() support], ac_cv_have_flock, [\nAC_LINK_IFELSE([AC_LANG_PROGRAM(\n[[ #include <sys/file.h>]],\n[[ flock(0, LOCK_SH); ]])],\n[ ac_cv_have_flock=\"yes\" ],\n[ ac_cv_have_flock=\"no\" ])])\n\nif test \"x$ac_cv_have_flock\" = \"xyes\"; then\n    enable_flock=\"yes\"\n    AC_DEFINE(HAVE_FLOCK)\nelse\n    not_found=\"$not_found flock\"\nfi\n\n# ------------------------------------------------------------------------------\n#                               large file support\n# ------------------------------------------------------------------------------\n\nif test \"x$enable_largefile\" = \"xyes\" ; then\n   CFLAGS=\"$CFLAGS -D_FILE_OFFSET_BITS=64 -D_LARGEFILE64_SOURCE -D_LARGEFILE_SOURCE -D_LARGE_FILES\"\n   CXXFLAGS=\"$CXXFLAGS -D_FILE_OFFSET_BITS=64 -D_LARGEFILE64_SOURCE -D_LARGEFILE_SOURCE -D_LARGE_FILES\"\nelse\n   not_asked=\"$not_asked largefile\"\nfi\n\n# ------------------------------------------------------------------------------\n#                                  backtrace\n# ------------------------------------------------------------------------------\n\nenable_backtrace=\"no\"\nif test \"x$debug\" != \"x0\" ; then\n    AC_CACHE_CHECK([for execinfo.h and backtrace], ac_cv_have_backtrace, [\n        AC_LINK_IFELSE([AC_LANG_PROGRAM(\n            [[ #include <execinfo.h> ]],\n            [[ void *trace[128]; int n = backtrace(trace, 128); ]])],\n            [ ac_cv_have_backtrace=\"yes\" ],\n            [ ac_cv_have_backtrace=\"no\"  ])])\n    if test \"x$ac_cv_have_backtrace\" = \"xyes\"; then\n        enable_backtrace=\"yes\"\n        AC_DEFINE(HAVE_BACKTRACE,1,[glibc backtrace function])\n    else\n        not_found=\"$not_found backtrace\"\n    fi\nfi\n\n# ------------------------------------------------------------------------------\n#                             eat_newline_glitch\n# ------------------------------------------------------------------------------\n\nenable_eatnewlineglitch=\"no\"\nAC_CACHE_CHECK([for eat_newline_glitch support], ac_cv_have_eatnewlineglitch, [\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM(\n[[ #include <term.h> ]],\n[[ eat_newline_glitch = 0; ]])],\n[ ac_cv_have_eatnewlineglitch=\"yes\" ],\n[ ac_cv_have_eatnewlineglitch=\"no\" ])])\n\nif test \"x$ac_cv_have_eatnewlineglitch\" = \"xyes\"; then\n    enable_eatnewlineglitch=\"yes\"\n    AC_DEFINE(HAVE_EAT_NEWLINE_GLITCH)\nelse\n    not_found=\"$not_found eat_newline_glitch\"\nfi\n\n# ------------------------------------------------------------------------------\n#                                     zlib\n# ------------------------------------------------------------------------------\n\nAC_CHECK_HEADER(zlib.h,ac_found_zlib_header=\"yes\",ac_found_zlib_header=\"no\")\nAC_CHECK_LIB(z,compress2,ac_found_zlib_lib=\"yes\",ac_found_zlib_lib=\"no\")\n\nAC_MSG_CHECKING(for zlib headers and libraries)\nif test \"x$ac_found_zlib_header\" = \"xno\" -o \"x$ac_found_zlib_lib\" = \"xno\" ; then\n    AC_MSG_RESULT(no)\n    AC_MSG_ERROR([\n*** zlib was not found. You may want to get it from https://zlib.net/\n*** or try to install it with your software package manager.])\nelse\n    AC_MSG_RESULT(yes)\n    ZLIB_CFLAGS=`pkg-config zlib --cflags`\n    ZLIB_LFLAGS=`pkg-config zlib --libs`\n    AC_SUBST(ZLIB_CFLAGS)\n    AC_SUBST(ZLIB_LFLAGS)\nfi\n\n# ------------------------------------------------------------------------------\n#                                     curl\n# ------------------------------------------------------------------------------\n\nAC_PATH_PROG(CURL_CONFIG, curl-config)\nif test \"x$CURL_CONFIG\" = \"x\" ; then\n    AC_MSG_ERROR([\n*** \"curl-config\" couldn't be found on your system.\n*** Try to install libcurl-dev with your software package manager.])\nfi\nCURL_CFLAGS=`$CURL_CONFIG --cflags`\nCURL_LFLAGS=`$CURL_CONFIG --libs`\nAC_SUBST(CURL_CFLAGS)\nAC_SUBST(CURL_LFLAGS)\n\n# ------------------------------------------------------------------------------\n#                                    tests\n# ------------------------------------------------------------------------------\n\nif test \"x$enable_tests\" = \"xyes\" ; then\n    cpputest_found=\"no\"\n    AC_MSG_CHECKING(for CppUTest headers and libraries)\n    echo\n    pkgconfig_cpputest_found=`$PKGCONFIG --exists cpputest 2>/dev/null`\n    if test \"x$?\" = \"x0\" ; then\n        CPPUTEST_VERSION=`$PKGCONFIG --modversion cpputest`\n        CPPUTEST_CFLAGS=`$PKGCONFIG --cflags cpputest`\n        CPPUTEST_LFLAGS=`$PKGCONFIG --libs cpputest`\n    else\n        AC_MSG_WARN([\n*** CppUTest couldn't be found on your system.\n*** WeeChat will be built without tests.])\n        enable_tests=\"no\"\n        not_found=\"$not_found tests\"\n    fi\nelse\n    not_asked=\"$not_asked tests\"\nfi\n\nif test \"x$enable_tests\" = \"xyes\" ; then\n    AC_SUBST(CPPUTEST_CFLAGS)\n    AC_SUBST(CPPUTEST_LFLAGS)\n    AC_DEFINE(TESTS)\nfi\n\n# ------------------------------------------------------------------------------\n#                           man page / documentation\n# ------------------------------------------------------------------------------\n\nmsg_man=\"\"\nmsg_doc=\"\"\n\nif test \"x$enable_man\" = \"xno\"; then\n    not_asked=\"$not_asked man\"\nfi\nif test \"x$enable_doc\" = \"xno\"; then\n    not_asked=\"$not_asked doc\"\nfi\n\nif test \"x$enable_man\" = \"xyes\" -o \"x$enable_doc\" = \"xyes\"; then\n    AC_CHECK_PROGS(ASCIIDOCTOR, [asciidoctor])\n    if test -n \"$ASCIIDOCTOR\"; then\n        AC_MSG_CHECKING([for asciidoctor version])\n        asciidoctor_version=`$ASCIIDOCTOR --version 2>/dev/null | head -n 1 | cut -d\" \" -f2`\n        case \"${asciidoctor_version}\" in\n        Asciidoctor' '0.*|Asciidoctor' '1.5.[0-3]*)\n                AC_MSG_RESULT([${asciidoctor_version} (too old)])\n                not_found=\"$not_found asciidoctor\"\n                enable_man=\"no\"\n                enable_doc=\"no\"\n                ;;\n        *)\n                AC_MSG_RESULT([${asciidoctor_version}])\n                if test \"x$enable_man\" = \"xyes\"; then\n                    msg_man=\"asciidoctor(${asciidoctor_version}) $msg_man\"\n                    AC_DEFINE(MAN)\n                fi\n                if test \"x$enable_doc\" = \"xyes\"; then\n                    msg_doc=\"asciidoctor(${asciidoctor_version}) $msg_doc\"\n                    AC_DEFINE(DOC)\n                fi\n                ;;\n        esac\n    else\n        not_found=\"$not_found asciidoctor\"\n        enable_man=\"no\"\n        enable_doc=\"no\"\n    fi\n    ASCIIDOCTOR_ARGS=\"-a experimental -a 'prewrap!' -a icons=font -a sectanchors -a source-highlighter=prettify\"\n    AC_SUBST(ASCIIDOCTOR)\n    AC_SUBST(ASCIIDOCTOR_ARGS)\nfi\n\n# ------------------------------------------------------------------------------\n#                                general vars\n# ------------------------------------------------------------------------------\n\nif test \"x$prefix\" = \"xNONE\" ; then\n    prefix=\"$ac_default_prefix\"\nfi\n\nif test \"x$exec_prefix\" = \"xNONE\" ; then\n    exec_prefix=\"$prefix\"\nfi\n\nAC_DEFINE_UNQUOTED(PREFIX, \"${prefix}\")\n\nWEECHAT_LIBDIR=`eval eval echo ${libdir}/weechat`\nAC_DEFINE_UNQUOTED(WEECHAT_LIBDIR, \"$WEECHAT_LIBDIR\")\n\nWEECHAT_SHAREDIR=`eval eval echo ${datadir}/weechat`\nAC_DEFINE_UNQUOTED(WEECHAT_SHAREDIR, \"$WEECHAT_SHAREDIR\")\n\nweechat_libdir=${libdir}/weechat\nAC_SUBST(weechat_libdir)\n\nCOMMON_CFLAGS=\"-fsigned-char -Wall -Wextra -Werror-implicit-function-declaration\"\nCOMMON_CXXFLAGS=\"-fsigned-char -Wall -Wextra\"\n\nAC_MSG_CHECKING([whether we have GNU assembler])\nGAS=`as --version < /dev/null 2>/dev/null | grep GNU`\nif test \"$GAS\"; then\n    COMMON_CFLAGS=\"${COMMON_CFLAGS} -pipe\"\n    COMMON_CXXFLAGS=\"${COMMON_CXXFLAGS} -pipe\"\n    AC_MSG_RESULT(yes)\nelse\n    AC_MSG_RESULT(no)\nfi\n\nCFLAGS=`echo $CFLAGS | sed 's/ -g / /g'`\nCFLAGS=`echo $CFLAGS | sed 's/^-g //g'`\nCFLAGS=`echo $CFLAGS | sed 's/ -g$//g'`\nCFLAGS=`echo $CFLAGS | sed 's/^-g$//g'`\n\nCXXFLAGS=`echo $CXXFLAGS | sed 's/ -g / /g'`\nCXXFLAGS=`echo $CXXFLAGS | sed 's/^-g //g'`\nCXXFLAGS=`echo $CXXFLAGS | sed 's/ -g$//g'`\nCXXFLAGS=`echo $CXXFLAGS | sed 's/^-g$//g'`\n\nif test \"x$debug\" = \"x0\" ; then\n    CFLAGS=\"$COMMON_CFLAGS $CFLAGS\"\n    CXXFLAGS=\"$COMMON_CXXFLAGS $CXXFLAGS\"\nelse\n    CFLAGS=\"$COMMON_CFLAGS $CFLAGS -g -O0\"\n    CXXFLAGS=\"$COMMON_CXXFLAGS $CXXFLAGS -g -O0\"\nfi\n\nLIBS=\"$LIBS $INTLLIBS\"\n\ncase \"$host_os\" in\nfreebsd*)\n        if test \"x$enable_perl\" = \"xyes\" -o \"x$enable_python\" = \"xyes\" ; then\n            CFLAGS=\"$CFLAGS -pthread\"\n        fi\n        CFLAGS=\"$CFLAGS $CXXFLAGS\"\n        ;;\nopenbsd*)\n        if test \"x$enable_python\" = \"xyes\" ; then\n            CFLAGS=\"$CFLAGS -pthread\"\n        fi\n        ;;\nnetbsd*)\n        if test \"x$enable_perl\" = \"xyes\" -o \"x$enable_python\" = \"xyes\" ; then\n            CFLAGS=\"$CFLAGS -pthread\"\n        fi\n        CFLAGS=\"$CFLAGS $CXXFLAGS\"\n        ;;\ngnu*)\n        LDFLAGS=\"$LDFLAGS -lpthread\"\n        ;;\nhaiku*)\n        LDFLAGS=\"$LDFLAGS -lnetwork\"\n        ;;\n*)\n        ;;\nesac\n\nCFLAGS=\"$CFLAGS -DWEECHAT_VERSION=\\\\\\\"$VERSION\\\\\\\" -DWEECHAT_LICENSE=\\\\\\\"$LICENSE\\\\\\\"\"\nCXXFLAGS=\"$CXXFLAGS -DWEECHAT_VERSION=\\\\\\\"$VERSION\\\\\\\" -DWEECHAT_LICENSE=\\\\\\\"$LICENSE\\\\\\\"\"\n\n# ------------------------------------------------------------------------------\n#                                output Makefiles\n# ------------------------------------------------------------------------------\n\nAM_CONDITIONAL(HAVE_FLOCK,              test \"$enable_flock\" = \"yes\")\nAM_CONDITIONAL(HAVE_EAT_NEWLINE_GLITCH, test \"$enable_eatnewlineglitch\" = \"yes\")\nAM_CONDITIONAL(GUI_NCURSES,             test \"$enable_ncurses\" = \"yes\")\nAM_CONDITIONAL(HEADLESS,                test \"$enable_headless\" = \"yes\")\nAM_CONDITIONAL(PLUGIN_ALIAS,            test \"$enable_alias\" = \"yes\")\nAM_CONDITIONAL(PLUGIN_BUFLIST,          test \"$enable_buflist\" = \"yes\")\nAM_CONDITIONAL(PLUGIN_CHARSET,          test \"$enable_charset\" = \"yes\")\nAM_CONDITIONAL(PLUGIN_EXEC,             test \"$enable_exec\" = \"yes\")\nAM_CONDITIONAL(PLUGIN_FIFO,             test \"$enable_fifo\" = \"yes\")\nAM_CONDITIONAL(PLUGIN_FSET,             test \"$enable_fset\" = \"yes\")\nAM_CONDITIONAL(PLUGIN_IRC,              test \"$enable_irc\" = \"yes\")\nAM_CONDITIONAL(PLUGIN_LOGGER,           test \"$enable_logger\" = \"yes\")\nAM_CONDITIONAL(PLUGIN_RELAY,            test \"$enable_relay\" = \"yes\")\nAM_CONDITIONAL(PLUGIN_SCRIPT,           test \"$enable_script\" = \"yes\")\nAM_CONDITIONAL(PLUGIN_PERL,             test \"$enable_perl\" = \"yes\")\nAM_CONDITIONAL(PLUGIN_PYTHON,           test \"$enable_python\" = \"yes\")\nAM_CONDITIONAL(PLUGIN_RUBY,             test \"$enable_ruby\" = \"yes\")\nAM_CONDITIONAL(PLUGIN_LUA,              test \"$enable_lua\" = \"yes\")\nAM_CONDITIONAL(PLUGIN_TCL,              test \"$enable_tcl\" = \"yes\")\nAM_CONDITIONAL(PLUGIN_GUILE,            test \"$enable_guile\" = \"yes\")\nAM_CONDITIONAL(PLUGIN_JAVASCRIPT,       test \"$enable_javascript\" = \"yes\")\nAM_CONDITIONAL(PLUGIN_PHP,              test \"$enable_php\" = \"yes\")\nAM_CONDITIONAL(PLUGIN_SPELL,            test \"$enable_spell\" = \"yes\")\nAM_CONDITIONAL(PLUGIN_TRIGGER,          test \"$enable_trigger\" = \"yes\")\nAM_CONDITIONAL(PLUGIN_XFER,             test \"$enable_xfer\" = \"yes\")\nAM_CONDITIONAL(TESTS,                   test \"$enable_tests\" = \"yes\")\nAM_CONDITIONAL(MAN,                     test \"$enable_man\" = \"yes\")\nAM_CONDITIONAL(DOC,                     test \"$enable_doc\" = \"yes\")\n\nAC_OUTPUT([Makefile\n           icons/Makefile\n           doc/Makefile\n           doc/en/Makefile\n           doc/fr/Makefile\n           doc/it/Makefile\n           doc/de/Makefile\n           doc/pl/Makefile\n           doc/es/Makefile\n           doc/ru/Makefile\n           doc/ja/Makefile\n           doc/cs/Makefile\n           src/Makefile\n           src/core/Makefile\n           src/plugins/Makefile\n           src/plugins/alias/Makefile\n           src/plugins/buflist/Makefile\n           src/plugins/charset/Makefile\n           src/plugins/exec/Makefile\n           src/plugins/fifo/Makefile\n           src/plugins/fset/Makefile\n           src/plugins/irc/Makefile\n           src/plugins/logger/Makefile\n           src/plugins/relay/Makefile\n           src/plugins/script/Makefile\n           src/plugins/perl/Makefile\n           src/plugins/python/Makefile\n           src/plugins/ruby/Makefile\n           src/plugins/lua/Makefile\n           src/plugins/tcl/Makefile\n           src/plugins/guile/Makefile\n           src/plugins/javascript/Makefile\n           src/plugins/php/Makefile\n           src/plugins/spell/Makefile\n           src/plugins/trigger/Makefile\n           src/plugins/xfer/Makefile\n           src/gui/Makefile\n           src/gui/curses/Makefile\n           src/gui/curses/normal/Makefile\n           src/gui/curses/headless/Makefile\n           tests/Makefile\n           intl/Makefile\n           po/Makefile.in])\n\n# ------------------------------------------------------------------------------\n#                                  end message\n# ------------------------------------------------------------------------------\n\nlistgui=\"\"\nif test \"x$enable_ncurses\" = \"xyes\" ; then\n    listgui=\"$listgui ncurses\"\nfi\nif test \"x$enable_headless\" = \"xyes\" ; then\n    listgui=\"$listgui headless\"\nfi\n\nif test \"x$listgui\" = \"x\" ; then\n    AC_MSG_ERROR([\n*** No interface specified...\n*** Please enable at least ncurses or headless.])\nfi\n\nlistplugins=\"\"\nif test \"x$enable_alias\" = \"xyes\"; then\n    listplugins=\"$listplugins alias\"\nfi\nif test \"x$enable_buflist\" = \"xyes\"; then\n    listplugins=\"$listplugins buflist\"\nfi\nif test \"x$enable_charset\" = \"xyes\"; then\n    listplugins=\"$listplugins charset\"\nfi\nif test \"x$enable_exec\" = \"xyes\"; then\n    listplugins=\"$listplugins exec\"\nfi\nif test \"x$enable_fifo\" = \"xyes\"; then\n    listplugins=\"$listplugins fifo\"\nfi\nif test \"x$enable_fset\" = \"xyes\"; then\n    listplugins=\"$listplugins fset\"\nfi\nif test \"x$enable_irc\" = \"xyes\" ; then\n    listplugins=\"$listplugins irc\"\nfi\nif test \"x$enable_logger\" = \"xyes\"; then\n    listplugins=\"$listplugins logger\"\nfi\nif test \"x$enable_relay\" = \"xyes\"; then\n    listplugins=\"$listplugins relay\"\nfi\nif test \"x$enable_script\" = \"xyes\"; then\n    listplugins=\"$listplugins script\"\nfi\nif test \"x$enable_perl\" = \"xyes\"; then\n    listplugins=\"$listplugins perl($PERL_VERSION)\"\nfi\nif test \"x$enable_python\" = \"xyes\"; then\n    listplugins=\"$listplugins python($PYTHON_VERSION)\"\nfi\nif test \"x$enable_ruby\" = \"xyes\"; then\n    listplugins=\"$listplugins ruby($RUBY_VERSION)\"\nfi\nif test \"x$enable_lua\" = \"xyes\"; then\n    listplugins=\"$listplugins lua($LUA_VERSION)\"\nfi\nif test \"x$enable_tcl\" = \"xyes\"; then\n    listplugins=\"$listplugins tcl($TCL_VERSION)\"\nfi\nif test \"x$enable_guile\" = \"xyes\"; then\n    listplugins=\"$listplugins guile($GUILE_VERSION)\"\nfi\nif test \"x$enable_javascript\" = \"xyes\"; then\n    listplugins=\"$listplugins javascript/v8\"\nfi\nif test \"x$enable_php\" = \"xyes\"; then\n    listplugins=\"$listplugins php($PHP_VERSION)\"\nfi\nif test \"x$enable_spell\" = \"xyes\"; then\n    listplugins=\"$listplugins spell($SPELL_LIB_USED)\"\nfi\nif test \"x$enable_trigger\" = \"xyes\"; then\n    listplugins=\"$listplugins trigger\"\nfi\nif test \"x$enable_xfer\" = \"xyes\"; then\n    listplugins=\"$listplugins xfer\"\nfi\n\nlistoptional=\"\"\nif test \"x$enable_flock\" = \"xyes\"; then\n    listoptional=\"$listoptional flock\"\nfi\nif test \"x$enable_largefile\" = \"xyes\"; then\n    listoptional=\"$listoptional largefile\"\nfi\nif test \"x$enable_backtrace\" = \"xyes\"; then\n    listoptional=\"$listoptional backtrace\"\nfi\n\nmsg_debug=\"no\"\nif test \"x$debug\" != \"x0\"; then\n    msg_debug=\"yes\"\nfi\n\nmsg_tests=\"no\"\nif test \"x$enable_tests\" = \"xyes\"; then\n    msg_tests=\"yes\"\nfi\n\nif test \"x$msg_man\" = \"x\"; then\n    msg_man=\"no\"\nelse\n    msg_man=\"yes: $msg_man\"\nfi\nif test \"x$msg_doc\" = \"x\"; then\n    msg_doc=\"no\"\nelse\n    msg_doc=\"yes: $msg_doc\"\nfi\n\necho \"\"\necho \"Enabled features:\"\necho \"   Interfaces............. :$listgui\"\necho \"   Plugins................ :$listplugins\"\necho \"   Optional features...... :$listoptional\"\necho \"   Compile with debug..... : $msg_debug\"\necho \"   Compile tests.......... : $msg_tests\"\necho \"   Man page............... : $msg_man\"\necho \"   Documentation.......... : $msg_doc\"\necho \"   Certificate authorities : ${CA_FILE}\"\n\nif test \"x$not_asked\" != \"x\" || test \"x$not_found\" != \"x\"; then\n    echo \"\"\n    echo \"Disabled features:\"\n    if test \"x$not_asked\" != \"x\"; then\n        echo \"   - not asked:$not_asked\"\n    fi\n    if test \"x$not_found\" != \"x\"; then\n        echo \"   - not found:$not_found\"\n    fi\nfi\n\necho \"\"\necho \"WeeChat home directory is ${WEECHAT_HOME}\"\necho \"\"\neval echo \"WeeChat will be installed in $bindir\"\necho \"\"\necho \"configure complete, now type 'make' to build WeeChat $VERSION\"\necho \"\"\n",
        "/tmp/vanessa/spack-stage/spack-stage-weechat-2.9-6t75c6wcuy372mx22zcrjpzcya3zeyfl/spack-src/src/plugins/weechat-plugin.h": "/*\n * weechat-plugin.h - header to compile WeeChat plugins\n *\n * Copyright (C) 2003-2020 S\u00e9bastien Helleu <flashcode@flashtux.org>\n *\n * This file is part of WeeChat, the extensible chat client.\n *\n * WeeChat is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 3 of the License, or\n * (at your option) any later version.\n *\n * WeeChat is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with WeeChat.  If not, see <https://www.gnu.org/licenses/>.\n */\n\n#ifndef WEECHAT_WEECHAT_PLUGIN_H\n#define WEECHAT_WEECHAT_PLUGIN_H\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif /* __cplusplus */\n\n#include <stddef.h>\n#include <time.h>\n#include <sys/types.h>\n#include <sys/socket.h>\n\n/* some systems like GNU/Hurd do not define PATH_MAX */\n#ifndef PATH_MAX\n    #define PATH_MAX 4096\n#endif /* PATH_MAX */\n\nstruct t_config_option;\nstruct t_config_section;\nstruct t_config_file;\nstruct t_gui_window;\nstruct t_gui_buffer;\nstruct t_gui_bar;\nstruct t_gui_bar_item;\nstruct t_gui_bar_window;\nstruct t_gui_completion;\nstruct t_gui_nick;\nstruct t_gui_nick_group;\nstruct t_infolist;\nstruct t_infolist_item;\nstruct t_upgrade_file;\nstruct t_weelist;\nstruct t_weelist_item;\nstruct t_arraylist;\nstruct t_hashtable;\nstruct t_hdata;\nstruct timeval;\n\n/*\n * IMPORTANT NOTE for WeeChat developers: if you update, add or remove\n * some functions in this file, then please update API version below.\n */\n\n/*\n * API version (used to check that plugin has same API and can be loaded):\n * please change the date with current one; for a second change at same\n * date, increment the 01, otherwise please keep 01.\n */\n#define WEECHAT_PLUGIN_API_VERSION \"20200621-01\"\n\n/* macros for defining plugin infos */\n#define WEECHAT_PLUGIN_NAME(__name)                                     \\\n    char weechat_plugin_name[] = __name;                                \\\n    char weechat_plugin_api_version[] = WEECHAT_PLUGIN_API_VERSION;\n#define WEECHAT_PLUGIN_AUTHOR(__author)         \\\n    char weechat_plugin_author[] = __author;\n#define WEECHAT_PLUGIN_DESCRIPTION(__desc)      \\\n    char weechat_plugin_description[] = __desc;\n#define WEECHAT_PLUGIN_VERSION(__version)       \\\n    char weechat_plugin_version[] = __version;\n#define WEECHAT_PLUGIN_LICENSE(__license)       \\\n    char weechat_plugin_license[] = __license;\n#define WEECHAT_PLUGIN_PRIORITY(__priority)     \\\n    int weechat_plugin_priority = __priority;\n\n/* return codes for plugin functions */\n#define WEECHAT_RC_OK                               0\n#define WEECHAT_RC_OK_EAT                           1\n#define WEECHAT_RC_ERROR                           -1\n\n/* flags for string_split function */\n#define WEECHAT_STRING_SPLIT_STRIP_LEFT            (1 << 0)\n#define WEECHAT_STRING_SPLIT_STRIP_RIGHT           (1 << 1)\n#define WEECHAT_STRING_SPLIT_COLLAPSE_SEPS         (1 << 2)\n#define WEECHAT_STRING_SPLIT_KEEP_EOL              (1 << 3)\n\n/* return codes for config read functions/callbacks */\n#define WEECHAT_CONFIG_READ_OK                      0\n#define WEECHAT_CONFIG_READ_MEMORY_ERROR           -1\n#define WEECHAT_CONFIG_READ_FILE_NOT_FOUND         -2\n\n/* return codes for config write functions/callbacks */\n#define WEECHAT_CONFIG_WRITE_OK                     0\n#define WEECHAT_CONFIG_WRITE_ERROR                 -1\n#define WEECHAT_CONFIG_WRITE_MEMORY_ERROR          -2\n\n/* null value for option */\n#define WEECHAT_CONFIG_OPTION_NULL                 \"null\"\n\n/* return codes for config option set */\n#define WEECHAT_CONFIG_OPTION_SET_OK_CHANGED        2\n#define WEECHAT_CONFIG_OPTION_SET_OK_SAME_VALUE     1\n#define WEECHAT_CONFIG_OPTION_SET_ERROR             0\n#define WEECHAT_CONFIG_OPTION_SET_OPTION_NOT_FOUND -1\n\n/* return codes for config option unset */\n#define WEECHAT_CONFIG_OPTION_UNSET_OK_NO_RESET     0\n#define WEECHAT_CONFIG_OPTION_UNSET_OK_RESET        1\n#define WEECHAT_CONFIG_OPTION_UNSET_OK_REMOVED      2\n#define WEECHAT_CONFIG_OPTION_UNSET_ERROR          -1\n\n/* list management (order of elements) */\n#define WEECHAT_LIST_POS_SORT                       \"sort\"\n#define WEECHAT_LIST_POS_BEGINNING                  \"beginning\"\n#define WEECHAT_LIST_POS_END                        \"end\"\n\n/* type for keys and values in hashtable */\n#define WEECHAT_HASHTABLE_INTEGER                   \"integer\"\n#define WEECHAT_HASHTABLE_STRING                    \"string\"\n#define WEECHAT_HASHTABLE_POINTER                   \"pointer\"\n#define WEECHAT_HASHTABLE_BUFFER                    \"buffer\"\n#define WEECHAT_HASHTABLE_TIME                      \"time\"\n\n/* types for hdata */\n#define WEECHAT_HDATA_OTHER                         0\n#define WEECHAT_HDATA_CHAR                          1\n#define WEECHAT_HDATA_INTEGER                       2\n#define WEECHAT_HDATA_LONG                          3\n#define WEECHAT_HDATA_STRING                        4\n#define WEECHAT_HDATA_POINTER                       5\n#define WEECHAT_HDATA_TIME                          6\n#define WEECHAT_HDATA_HASHTABLE                     7\n#define WEECHAT_HDATA_SHARED_STRING                 8\n\n/* flags for hdata lists */\n#define WEECHAT_HDATA_LIST_CHECK_POINTERS           1\n\n/* buffer hotlist */\n#define WEECHAT_HOTLIST_LOW                         \"0\"\n#define WEECHAT_HOTLIST_MESSAGE                     \"1\"\n#define WEECHAT_HOTLIST_PRIVATE                     \"2\"\n#define WEECHAT_HOTLIST_HIGHLIGHT                   \"3\"\n\n/*\n * process return code (for callback):\n *   if >= 0, the process ended and it's return code of command\n *   if -1, the process is still running\n *   if -2, the process ended with an error\n *   if -3, the callback is called in the child process (exec of function)\n *          (note: the return code -3 is NEVER sent to script plugins,\n *           it can be used only in C API)\n */\n#define WEECHAT_HOOK_PROCESS_RUNNING                -1\n#define WEECHAT_HOOK_PROCESS_ERROR                  -2\n#define WEECHAT_HOOK_PROCESS_CHILD                  -3\n\n/* connect status for connection hooked */\n#define WEECHAT_HOOK_CONNECT_OK                     0\n#define WEECHAT_HOOK_CONNECT_ADDRESS_NOT_FOUND      1\n#define WEECHAT_HOOK_CONNECT_IP_ADDRESS_NOT_FOUND   2\n#define WEECHAT_HOOK_CONNECT_CONNECTION_REFUSED     3\n#define WEECHAT_HOOK_CONNECT_PROXY_ERROR            4\n#define WEECHAT_HOOK_CONNECT_LOCAL_HOSTNAME_ERROR   5\n#define WEECHAT_HOOK_CONNECT_GNUTLS_INIT_ERROR      6\n#define WEECHAT_HOOK_CONNECT_GNUTLS_HANDSHAKE_ERROR 7\n#define WEECHAT_HOOK_CONNECT_MEMORY_ERROR           8\n#define WEECHAT_HOOK_CONNECT_TIMEOUT                9\n#define WEECHAT_HOOK_CONNECT_SOCKET_ERROR           10\n\n/* action for gnutls callback: verify or set certificate */\n#define WEECHAT_HOOK_CONNECT_GNUTLS_CB_VERIFY_CERT  0\n#define WEECHAT_HOOK_CONNECT_GNUTLS_CB_SET_CERT     1\n\n/* type of data for signal hooked */\n#define WEECHAT_HOOK_SIGNAL_STRING                  \"string\"\n#define WEECHAT_HOOK_SIGNAL_INT                     \"int\"\n#define WEECHAT_HOOK_SIGNAL_POINTER                 \"pointer\"\n\n/* macro to format string with variable args, using dynamic buffer size */\n#define weechat_va_format(__format)                                     \\\n    va_list argptr;                                                     \\\n    int vaa_size, vaa_num;                                              \\\n    char *vbuffer, *vaa_buffer2;                                        \\\n    vaa_size = 1024;                                                    \\\n    vbuffer = malloc (vaa_size);                                        \\\n    if (vbuffer)                                                        \\\n    {                                                                   \\\n        while (1)                                                       \\\n        {                                                               \\\n            va_start (argptr, __format);                                \\\n            vaa_num = vsnprintf (vbuffer, vaa_size, __format, argptr);  \\\n            va_end (argptr);                                            \\\n            if ((vaa_num >= 0) && (vaa_num < vaa_size))                 \\\n                break;                                                  \\\n            vaa_size = (vaa_num >= 0) ? vaa_num + 1 : vaa_size * 2;     \\\n            vaa_buffer2 = realloc (vbuffer, vaa_size);                  \\\n            if (!vaa_buffer2)                                           \\\n            {                                                           \\\n                free (vbuffer);                                         \\\n                vbuffer = NULL;                                         \\\n                break;                                                  \\\n            }                                                           \\\n            vbuffer = vaa_buffer2;                                      \\\n        }                                                               \\\n    }\n\n/*\n * macro to return error in case of missing arguments in callback of\n * hook_command\n */\n#define WEECHAT_COMMAND_MIN_ARGS(__min_args, __option)                  \\\n    if (argc < __min_args)                                              \\\n    {                                                                   \\\n        weechat_printf_date_tags (                                      \\\n            NULL, 0, \"no_filter\",                                       \\\n            _(\"%sToo few arguments for command \\\"%s%s%s\\\" \"             \\\n              \"(help on command: /help %s)\"),                           \\\n            weechat_prefix (\"error\"),                                   \\\n            argv[0],                                                    \\\n            (__option && __option[0]) ? \" \" : \"\",                       \\\n            (__option && __option[0]) ? __option : \"\",                  \\\n            argv[0] + 1);                                               \\\n        return WEECHAT_RC_ERROR;                                        \\\n    }\n\n/* macro to return error in callback of hook_command */\n#define WEECHAT_COMMAND_ERROR                                           \\\n    {                                                                   \\\n        weechat_printf_date_tags (                                      \\\n            NULL, 0, \"no_filter\",                                       \\\n            _(\"%sError with command \\\"%s\\\" \"                            \\\n              \"(help on command: /help %s)\"),                           \\\n            weechat_prefix (\"error\"),                                   \\\n            argv_eol[0],                                                \\\n            argv[0] + 1);                                               \\\n        return WEECHAT_RC_ERROR;                                        \\\n    }\n\nstruct t_weechat_plugin\n{\n    /* plugin variables */\n    char *filename;                    /* name of plugin on disk            */\n    void *handle;                      /* handle of plugin (given by dlopen)*/\n    char *name;                        /* short name                        */\n    char *description;                 /* description                       */\n    char *author;                      /* author                            */\n    char *version;                     /* plugin version                    */\n    char *license;                     /* license                           */\n    char *charset;                     /* charset used by plugin            */\n    int priority;                      /* plugin priority (default is 1000) */\n    int initialized;                   /* plugin initialized? (init called) */\n    int debug;                         /* debug level for plugin (0=off)    */\n    int upgrading;                     /* 1 if the plugin must load upgrade */\n                                       /* info on startup (if weechat is    */\n                                       /* run with --upgrade)               */\n    struct t_hashtable *variables;     /* plugin custom variables           */\n    struct t_weechat_plugin *prev_plugin; /* link to previous plugin        */\n    struct t_weechat_plugin *next_plugin; /* link to next plugin            */\n\n    /*\n     * plugin functions (API)\n     * WeeChat developers: if you add functions in API, update value of\n     * constant WEECHAT_PLUGIN_API_VERSION\n     */\n\n    /* plugins */\n    const char *(*plugin_get_name) (struct t_weechat_plugin *plugin);\n\n    /* strings */\n    void (*charset_set) (struct t_weechat_plugin *plugin, const char *charset);\n    char *(*iconv_to_internal) (const char *charset, const char *string);\n    char *(*iconv_from_internal) (const char *charset, const char *string);\n    const char *(*gettext) (const char *string);\n    const char *(*ngettext) (const char *single, const char *plural, int count);\n    char *(*strndup) (const char *string, int length);\n    void (*string_tolower) (char *string);\n    void (*string_toupper) (char *string);\n    int (*strcasecmp) (const char *string1, const char *string2);\n    int (*strcasecmp_range) (const char *string1, const char *string2,\n                             int range);\n    int (*strncasecmp) (const char *string1, const char *string2, int max);\n    int (*strncasecmp_range) (const char *string1, const char *string2,\n                              int max, int range);\n    int (*strcmp_ignore_chars) (const char *string1, const char *string2,\n                                const char *chars_ignored, int case_sensitive);\n    const char *(*strcasestr) (const char *string, const char *search);\n    int (*strlen_screen) (const char *string);\n    int (*string_match) (const char *string, const char *mask,\n                         int case_sensitive);\n    int (*string_match_list) (const char *string, const char **masks,\n                              int case_sensitive);\n    char *(*string_replace) (const char *string, const char *search,\n                             const char *replace);\n    char *(*string_expand_home) (const char *path);\n    char *(*string_eval_path_home) (const char *path,\n                                    struct t_hashtable *pointers,\n                                    struct t_hashtable *extra_vars,\n                                    struct t_hashtable *options);\n    char *(*string_remove_quotes) (const char *string, const char *quotes);\n    char *(*string_strip) (const char *string, int left, int right,\n                           const char *chars);\n    char *(*string_convert_escaped_chars) (const char *string);\n    char *(*string_mask_to_regex) (const char *mask);\n    const char *(*string_regex_flags) (const char *regex, int default_flags,\n                                       int *flags);\n    int (*string_regcomp) (void *preg, const char *regex, int default_flags);\n    int (*string_has_highlight) (const char *string,\n                                 const char *highlight_words);\n    int (*string_has_highlight_regex) (const char *string, const char *regex);\n    char *(*string_replace_regex) (const char *string, void *regex,\n                                   const char *replace,\n                                   const char reference_char,\n                                   char *(*callback)(void *data,\n                                                     const char *text),\n                                   void *callback_data);\n    char **(*string_split) (const char *string, const char *separators,\n                            const char *strip_items, int flags,\n                            int num_items_max, int *num_items);\n    char **(*string_split_shell) (const char *string, int *num_items);\n    void (*string_free_split) (char **split_string);\n    char *(*string_build_with_split_string) (const char **split_string,\n                                             const char *separator);\n    char **(*string_split_command) (const char *command, char separator);\n    void (*string_free_split_command) (char **split_command);\n    char *(*string_format_size) (unsigned long long size);\n    char *(*string_remove_color) (const char *string, const char *replacement);\n    int (*string_base_encode) (int base, const char *from, int length,\n                               char *to);\n    int (*string_base_decode) (int base, const char *from, char *to);\n    char *(*string_hex_dump) (const char *data, int data_size,\n                              int bytes_per_line, const char *prefix,\n                              const char *suffix);\n    int (*string_is_command_char) (const char *string);\n    const char *(*string_input_for_buffer) (const char *string);\n    char *(*string_eval_expression )(const char *expr,\n                                     struct t_hashtable *pointers,\n                                     struct t_hashtable *extra_vars,\n                                     struct t_hashtable *options);\n    char **(*string_dyn_alloc) (int size_alloc);\n    int (*string_dyn_copy) (char **string, const char *new_string);\n    int (*string_dyn_concat) (char **string, const char *add);\n    char *(*string_dyn_free) (char **string, int free_string);\n\n    /* UTF-8 strings */\n    int (*utf8_has_8bits) (const char *string);\n    int (*utf8_is_valid) (const char *string, int length, char **error);\n    void (*utf8_normalize) (char *string, char replacement);\n    const char *(*utf8_prev_char) (const char *string_start,\n                                   const char *string);\n    const char *(*utf8_next_char) (const char *string);\n    int (*utf8_char_int) (const char *string);\n    int (*utf8_char_size) (const char *string);\n    int (*utf8_strlen) (const char *string);\n    int (*utf8_strnlen) (const char *string, int bytes);\n    int (*utf8_strlen_screen) (const char *string);\n    int (*utf8_charcmp) (const char *string1, const char *string2);\n    int (*utf8_charcasecmp) (const char *string1, const char *string2);\n    int (*utf8_char_size_screen) (const char *string);\n    const char *(*utf8_add_offset) (const char *string, int offset);\n    int (*utf8_real_pos) (const char *string, int pos);\n    int (*utf8_pos) (const char *string, int real_pos);\n    char *(*utf8_strndup) (const char *string, int length);\n\n    /* crypto */\n    int (*crypto_hash) (const void *data, int data_size,\n                        const char *hash_algo, void *hash, int *hash_size);\n    int (*crypto_hash_pbkdf2) (const void *data, int data_size,\n                               const char *hash_algo,\n                               const void *salt, int salt_size,\n                               int iterations,\n                               void *hash, int *hash_size);\n\n    /* directories/files */\n    int (*mkdir_home) (const char *directory, int mode);\n    int (*mkdir) (const char *directory, int mode);\n    int (*mkdir_parents) (const char *directory, int mode);\n    void (*exec_on_files) (const char *directory, int recurse_subdirs,\n                           int hidden_files,\n                           void (*callback)(void *data, const char *filename),\n                           void *callback_data);\n    char *(*file_get_content) (const char *filename);\n\n    /* util */\n    int (*util_timeval_cmp) (struct timeval *tv1, struct timeval *tv2);\n    long long (*util_timeval_diff) (struct timeval *tv1, struct timeval *tv2);\n    void (*util_timeval_add) (struct timeval *tv, long long interval);\n    const char *(*util_get_time_string) (const time_t *date);\n    int (*util_version_number) (const char *version);\n\n    /* sorted lists */\n    struct t_weelist *(*list_new) ();\n    struct t_weelist_item *(*list_add) (struct t_weelist *weelist,\n                                        const char *data,\n                                        const char *where,\n                                        void *user_data);\n    struct t_weelist_item *(*list_search) (struct t_weelist *weelist,\n                                           const char *data);\n    int (*list_search_pos) (struct t_weelist *weelist,\n                            const char *data);\n    struct t_weelist_item *(*list_casesearch) (struct t_weelist *weelist,\n                                               const char *data);\n    int (*list_casesearch_pos) (struct t_weelist *weelist,\n                                const char *data);\n    struct t_weelist_item *(*list_get) (struct t_weelist *weelist,\n                                        int position);\n    void (*list_set) (struct t_weelist_item *item, const char *value);\n    struct t_weelist_item *(*list_next) (struct t_weelist_item *item);\n    struct t_weelist_item *(*list_prev) (struct t_weelist_item *item);\n    const char *(*list_string) (struct t_weelist_item *item);\n    void *(*list_user_data) (struct t_weelist_item *item);\n    int (*list_size) (struct t_weelist *weelist);\n    void (*list_remove) (struct t_weelist *weelist,\n                         struct t_weelist_item *item);\n    void (*list_remove_all) (struct t_weelist *weelist);\n    void (*list_free) (struct t_weelist *weelist);\n\n    /* array lists */\n    struct t_arraylist *(*arraylist_new) (int initial_size,\n                                          int sorted,\n                                          int allow_duplicates,\n                                          int (*callback_cmp)(void *data,\n                                                              struct t_arraylist *arraylist,\n                                                              void *pointer1,\n                                                              void *pointer2),\n                                          void *callback_cmp_data,\n                                          void (*callback_free)(void *data,\n                                                                struct t_arraylist *arraylist,\n                                                                void *pointer),\n                                          void *callback_free_data);\n    int (*arraylist_size) (struct t_arraylist *arraylist);\n    void *(*arraylist_get) (struct t_arraylist *arraylist, int index);\n    void *(*arraylist_search) (struct t_arraylist *arraylist, void *pointer,\n                               int *index, int *index_insert);\n    int (*arraylist_insert) (struct t_arraylist *arraylist, int index,\n                             void *pointer);\n    int (*arraylist_add) (struct t_arraylist *arraylist, void *pointer);\n    int (*arraylist_remove) (struct t_arraylist *arraylist, int index);\n    int (*arraylist_clear) (struct t_arraylist *arraylist);\n    void (*arraylist_free) (struct t_arraylist *arraylist);\n\n    /* hash tables */\n    struct t_hashtable *(*hashtable_new) (int size,\n                                          const char *type_keys,\n                                          const char *type_values,\n                                          unsigned long long (*callback_hash_key)(struct t_hashtable *hashtable,\n                                                                                  const void *key),\n                                          int (*callback_keycmp)(struct t_hashtable *hashtable,\n                                                                 const void *key1,\n                                                                 const void *key2));\n    struct t_hashtable_item *(*hashtable_set_with_size) (struct t_hashtable *hashtable,\n                                                         const void *key,\n                                                         int key_size,\n                                                         const void *value,\n                                                         int value_size);\n    struct t_hashtable_item *(*hashtable_set) (struct t_hashtable *hashtable,\n                                               const void *key,\n                                               const void *value);\n    void *(*hashtable_get) (struct t_hashtable *hashtable, const void *key);\n    int (*hashtable_has_key) (struct t_hashtable *hashtable, const void *key);\n    void (*hashtable_map) (struct t_hashtable *hashtable,\n                           void (*callback_map) (void *data,\n                                                 struct t_hashtable *hashtable,\n                                                 const void *key,\n                                                 const void *value),\n                           void *callback_map_data);\n    void (*hashtable_map_string) (struct t_hashtable *hashtable,\n                                  void (*callback_map) (void *data,\n                                                        struct t_hashtable *hashtable,\n                                                        const char *key,\n                                                        const char *value),\n                                  void *callback_map_data);\n    struct t_hashtable *(*hashtable_dup) (struct t_hashtable *hashtable);\n    int (*hashtable_get_integer) (struct t_hashtable *hashtable,\n                                  const char *property);\n    const char *(*hashtable_get_string) (struct t_hashtable *hashtable,\n                                         const char *property);\n    void (*hashtable_set_pointer) (struct t_hashtable *hashtable,\n                                   const char *property,\n                                   void *pointer);\n    int (*hashtable_add_to_infolist) (struct t_hashtable *hashtable,\n                                      struct t_infolist_item *infolist_item,\n                                      const char *prefix);\n    int (*hashtable_add_from_infolist) (struct t_hashtable *hashtable,\n                                        struct t_infolist *infolist,\n                                        const char *prefix);\n    void (*hashtable_remove) (struct t_hashtable *hashtable, const void *key);\n    void (*hashtable_remove_all) (struct t_hashtable *hashtable);\n    void (*hashtable_free) (struct t_hashtable *hashtable);\n\n    /* config files */\n    struct t_config_file *(*config_new) (struct t_weechat_plugin *plugin,\n                                         const char *name,\n                                         int (*callback_reload)(const void *pointer,\n                                                                void *data,\n                                                                struct t_config_file *config_file),\n                                         const void *callback_reload_pointer,\n                                         void *callback_reload_data);\n    struct t_config_section *(*config_new_section) (struct t_config_file *config_file,\n                                                    const char *name,\n                                                    int user_can_add_options,\n                                                    int user_can_delete_options,\n                                                    int (*callback_read)(const void *pointer,\n                                                                         void *data,\n                                                                         struct t_config_file *config_file,\n                                                                         struct t_config_section *section,\n                                                                         const char *option_name,\n                                                                         const char *value),\n                                                    const void *callback_read_pointer,\n                                                    void *callback_read_data,\n                                                    int (*callback_write)(const void *pointer,\n                                                                          void *data,\n                                                                          struct t_config_file *config_file,\n                                                                          const char *section_name),\n                                                    const void *callback_write_pointer,\n                                                    void *callback_write_data,\n                                                    int (*callback_write_default)(const void *pointer,\n                                                                                  void *data,\n                                                                                  struct t_config_file *config_file,\n                                                                                  const char *section_name),\n                                                    const void *callback_write_default_pointer,\n                                                    void *callback_write_default_data,\n                                                    int (*callback_create_option)(const void *pointer,\n                                                                                  void *data,\n                                                                                  struct t_config_file *config_file,\n                                                                                  struct t_config_section *section,\n                                                                                  const char *option_name,\n                                                                                  const char *value),\n                                                    const void *callback_create_option_pointer,\n                                                    void *callback_create_option_data,\n                                                    int (*callback_delete_option)(const void *pointer,\n                                                                                  void *data,\n                                                                                  struct t_config_file *config_file,\n                                                                                  struct t_config_section *section,\n                                                                                  struct t_config_option *option),\n                                                    const void *callback_delete_option_pointer,\n                                                    void *callback_delete_option_data);\n    struct t_config_section *(*config_search_section) (struct t_config_file *config_file,\n                                                       const char *section_name);\n    struct t_config_option *(*config_new_option) (struct t_config_file *config_file,\n                                                  struct t_config_section *section,\n                                                  const char *name,\n                                                  const char *type,\n                                                  const char *description,\n                                                  const char *string_values,\n                                                  int min,\n                                                  int max,\n                                                  const char *default_value,\n                                                  const char *value,\n                                                  int null_value_allowed,\n                                                  int (*callback_check_value)(const void *pointer,\n                                                                              void *data,\n                                                                              struct t_config_option *option,\n                                                                              const char *value),\n                                                  const void *callback_check_value_pointer,\n                                                  void *callback_check_value_data,\n                                                  void (*callback_change)(const void *pointer,\n                                                                          void *data,\n                                                                          struct t_config_option *option),\n                                                  const void *callback_change_pointer,\n                                                  void *callback_change_data,\n                                                  void (*callback_delete)(const void *pointer,\n                                                                          void *data,\n                                                                          struct t_config_option *option),\n                                                  const void *callback_delete_pointer,\n                                                  void *callback_delete_data);\n    struct t_config_option *(*config_search_option) (struct t_config_file *config_file,\n                                                     struct t_config_section *section,\n                                                     const char *option_name);\n    void (*config_search_section_option) (struct t_config_file *config_file,\n                                          struct t_config_section *section,\n                                          const char *option_name,\n                                          struct t_config_section **section_found,\n                                          struct t_config_option **option_found);\n    void (*config_search_with_string) (const char *option_name,\n                                       struct t_config_file **config_file,\n                                       struct t_config_section **section,\n                                       struct t_config_option **option,\n                                       char **pos_option_name);\n    int (*config_string_to_boolean) (const char *text);\n    int (*config_option_reset) (struct t_config_option *option,\n                                int run_callback);\n    int (*config_option_set) (struct t_config_option *option,\n                              const char *value, int run_callback);\n    int (*config_option_set_null) (struct t_config_option *option,\n                                   int run_callback);\n    int (*config_option_unset) (struct t_config_option *option);\n    void (*config_option_rename) (struct t_config_option *option,\n                                  const char *new_name);\n    const char *(*config_option_get_string) (struct t_config_option *option,\n                                             const char *property);\n    void *(*config_option_get_pointer) (struct t_config_option *option,\n                                        const char *property);\n    int (*config_option_is_null) (struct t_config_option *option);\n    int (*config_option_default_is_null) (struct t_config_option *option);\n    int (*config_boolean) (struct t_config_option *option);\n    int (*config_boolean_default) (struct t_config_option *option);\n    int (*config_integer) (struct t_config_option *option);\n    int (*config_integer_default) (struct t_config_option *option);\n    const char *(*config_string) (struct t_config_option *option);\n    const char *(*config_string_default) (struct t_config_option *option);\n    const char *(*config_color) (struct t_config_option *option);\n    const char *(*config_color_default) (struct t_config_option *option);\n    int (*config_write_option) (struct t_config_file *config_file,\n                                struct t_config_option *option);\n    int (*config_write_line) (struct t_config_file *config_file,\n                              const char *option_name,\n                              const char *value, ...);\n    int (*config_write) (struct t_config_file *config_file);\n    int (*config_read) (struct t_config_file *config_file);\n    int (*config_reload) (struct t_config_file *config_file);\n    void (*config_option_free) (struct t_config_option *option);\n    void (*config_section_free_options) (struct t_config_section *section);\n    void (*config_section_free) (struct t_config_section *section);\n    void (*config_free) (struct t_config_file *config_file);\n    struct t_config_option *(*config_get) (const char *option_name);\n    const char *(*config_get_plugin) (struct t_weechat_plugin *plugin,\n                                      const char *option_name);\n    int (*config_is_set_plugin) (struct t_weechat_plugin *plugin,\n                                 const char *option_name);\n    int (*config_set_plugin) (struct t_weechat_plugin *plugin,\n                              const char *option_name, const char *value);\n    void (*config_set_desc_plugin) (struct t_weechat_plugin *plugin,\n                                    const char *option_name,\n                                    const char *description);\n    int (*config_unset_plugin) (struct t_weechat_plugin *plugin,\n                                const char *option_name);\n\n    /* key bindings */\n    int (*key_bind) (const char *context, struct t_hashtable *keys);\n    int (*key_unbind) (const char *context, const char *key);\n\n    /* display */\n    const char *(*prefix) (const char *prefix);\n    const char *(*color) (const char *color_name);\n    void (*printf_date_tags) (struct t_gui_buffer *buffer, time_t date,\n                              const char *tags, const char *message, ...);\n    void (*printf_y) (struct t_gui_buffer *buffer, int y,\n                      const char *message, ...);\n    void (*log_printf) (const char *message, ...);\n\n    /* hooks */\n    struct t_hook *(*hook_command) (struct t_weechat_plugin *plugin,\n                                    const char *command,\n                                    const char *description,\n                                    const char *args,\n                                    const char *args_description,\n                                    const char *completion,\n                                    int (*callback)(const void *pointer,\n                                                    void *data,\n                                                    struct t_gui_buffer *buffer,\n                                                    int argc, char **argv,\n                                                    char **argv_eol),\n                                    const void *callback_pointer,\n                                    void *callback_data);\n    struct t_hook *(*hook_command_run) (struct t_weechat_plugin *plugin,\n                                        const char *command,\n                                        int (*callback)(const void *pointer,\n                                                        void *data,\n                                                        struct t_gui_buffer *buffer,\n                                                        const char *command),\n                                        const void *callback_pointer,\n                                        void *callback_data);\n    struct t_hook *(*hook_timer) (struct t_weechat_plugin *plugin,\n                                  long interval,\n                                  int align_second,\n                                  int max_calls,\n                                  int (*callback)(const void *pointer,\n                                                  void *data,\n                                                  int remaining_calls),\n                                  const void *callback_pointer,\n                                  void *callback_data);\n    struct t_hook *(*hook_fd) (struct t_weechat_plugin *plugin,\n                               int fd,\n                               int flag_read,\n                               int flag_write,\n                               int flag_exception,\n                               int (*callback)(const void *pointer,\n                                               void *data,\n                                               int fd),\n                               const void *callback_pointer,\n                               void *callback_data);\n    struct t_hook *(*hook_process) (struct t_weechat_plugin *plugin,\n                                    const char *command,\n                                    int timeout,\n                                    int (*callback)(const void *pointer,\n                                                    void *data,\n                                                    const char *command,\n                                                    int return_code,\n                                                    const char *out,\n                                                    const char *err),\n                                    const void *callback_pointer,\n                                    void *callback_data);\n    struct t_hook *(*hook_process_hashtable) (struct t_weechat_plugin *plugin,\n                                              const char *command,\n                                              struct t_hashtable *options,\n                                              int timeout,\n                                              int (*callback)(const void *pointer,\n                                                              void *data,\n                                                              const char *command,\n                                                              int return_code,\n                                                              const char *out,\n                                                              const char *err),\n                                              const void *callback_pointer,\n                                              void *callback_data);\n    struct t_hook *(*hook_connect) (struct t_weechat_plugin *plugin,\n                                    const char *proxy,\n                                    const char *address,\n                                    int port,\n                                    int ipv6,\n                                    int retry,\n                                    void *gnutls_sess, void *gnutls_cb,\n                                    int gnutls_dhkey_size,\n                                    const char *gnutls_priorities,\n                                    const char *local_hostname,\n                                    int (*callback)(const void *pointer,\n                                                    void *data,\n                                                    int status,\n                                                    int gnutls_rc,\n                                                    int sock,\n                                                    const char *error,\n                                                    const char *ip_address),\n                                    const void *callback_pointer,\n                                    void *callback_data);\n    struct t_hook *(*hook_line) (struct t_weechat_plugin *plugin,\n                                 const char *buffer_type,\n                                 const char *buffer_name,\n                                 const char *tags,\n                                 struct t_hashtable *(*callback)(const void *pointer,\n                                                                 void *data,\n                                                                 struct t_hashtable *line),\n                                 const void *callback_pointer,\n                                 void *callback_data);\n    struct t_hook *(*hook_print) (struct t_weechat_plugin *plugin,\n                                  struct t_gui_buffer *buffer,\n                                  const char *tags,\n                                  const char *message,\n                                  int strip_colors,\n                                  int (*callback)(const void *pointer,\n                                                  void *data,\n                                                  struct t_gui_buffer *buffer,\n                                                  time_t date,\n                                                  int tags_count,\n                                                  const char **tags,\n                                                  int displayed,\n                                                  int highlight,\n                                                  const char *prefix,\n                                                  const char *message),\n                                  const void *callback_pointer,\n                                  void *callback_data);\n    struct t_hook *(*hook_signal) (struct t_weechat_plugin *plugin,\n                                   const char *signal,\n                                   int (*callback)(const void *pointer,\n                                                   void *data,\n                                                   const char *signal,\n                                                   const char *type_data,\n                                                   void *signal_data),\n                                   const void *callback_pointer,\n                                   void *callback_data);\n    int (*hook_signal_send) (const char *signal, const char *type_data,\n                             void *signal_data);\n    struct t_hook *(*hook_hsignal) (struct t_weechat_plugin *plugin,\n                                    const char *signal,\n                                    int (*callback)(const void *pointer,\n                                                    void *data,\n                                                    const char *signal,\n                                                    struct t_hashtable *hashtable),\n                                    const void *callback_pointer,\n                                    void *callback_data);\n    int (*hook_hsignal_send) (const char *signal,\n                              struct t_hashtable *hashtable);\n    struct t_hook *(*hook_config) (struct t_weechat_plugin *plugin,\n                                   const char *option,\n                                   int (*callback)(const void *pointer,\n                                                   void *data,\n                                                   const char *option,\n                                                   const char *value),\n                                   const void *callback_pointer,\n                                   void *callback_data);\n    struct t_hook *(*hook_completion) (struct t_weechat_plugin *plugin,\n                                       const char *completion_item,\n                                       const char *description,\n                                       int (*callback)(const void *pointer,\n                                                       void *data,\n                                                       const char *completion_item,\n                                                       struct t_gui_buffer *buffer,\n                                                       struct t_gui_completion *completion),\n                                       const void *callback_pointer,\n                                       void *callback_data);\n    const char *(*hook_completion_get_string) (struct t_gui_completion *completion,\n                                               const char *property);\n    void (*hook_completion_list_add) (struct t_gui_completion *completion,\n                                      const char *word,\n                                      int nick_completion,\n                                      const char *where);\n    struct t_hook *(*hook_modifier) (struct t_weechat_plugin *plugin,\n                                     const char *modifier,\n                                     char *(*callback)(const void *pointer,\n                                                       void *data,\n                                                       const char *modifier,\n                                                       const char *modifier_data,\n                                                       const char *string),\n                                     const void *callback_pointer,\n                                     void *callback_data);\n    char *(*hook_modifier_exec) (struct t_weechat_plugin *plugin,\n                                 const char *modifier,\n                                 const char *modifier_data,\n                                 const char *string);\n    struct t_hook *(*hook_info) (struct t_weechat_plugin *plugin,\n                                 const char *info_name,\n                                 const char *description,\n                                 const char *args_description,\n                                 char *(*callback)(const void *pointer,\n                                                   void *data,\n                                                   const char *info_name,\n                                                   const char *arguments),\n                                 const void *callback_pointer,\n                                 void *callback_data);\n    struct t_hook *(*hook_info_hashtable) (struct t_weechat_plugin *plugin,\n                                           const char *info_name,\n                                           const char *description,\n                                           const char *args_description,\n                                           const char *output_description,\n                                           struct t_hashtable *(*callback)(const void *pointer,\n                                                                           void *data,\n                                                                           const char *info_name,\n                                                                           struct t_hashtable *hashtable),\n                                           const void *callback_pointer,\n                                           void *callback_data);\n    struct t_hook *(*hook_infolist) (struct t_weechat_plugin *plugin,\n                                     const char *infolist_name,\n                                     const char *description,\n                                     const char *pointer_description,\n                                     const char *args_description,\n                                     struct t_infolist *(*callback)(const void *cb_pointer,\n                                                                    void *data,\n                                                                    const char *infolist_name,\n                                                                    void *obj_pointer,\n                                                                    const char *arguments),\n                                     const void *callback_pointer,\n                                     void *callback_data);\n    struct t_hook *(*hook_hdata) (struct t_weechat_plugin *plugin,\n                                  const char *hdata_name,\n                                  const char *description,\n                                  struct t_hdata *(*callback)(const void *pointer,\n                                                              void *data,\n                                                              const char *hdata_name),\n                                  const void *callback_pointer,\n                                  void *callback_data);\n    struct t_hook *(*hook_focus) (struct t_weechat_plugin *plugin,\n                                  const char *area,\n                                  struct t_hashtable *(*callback)(const void *pointer,\n                                                                  void *data,\n                                                                  struct t_hashtable *info),\n                                  const void *callback_pointer,\n                                  void *callback_data);\n    void (*hook_set) (struct t_hook *hook, const char *property,\n                      const char *value);\n    void (*unhook) (struct t_hook *hook);\n    void (*unhook_all) (struct t_weechat_plugin *plugin,\n                        const char *subplugin);\n\n    /* buffers */\n    struct t_gui_buffer *(*buffer_new) (struct t_weechat_plugin *plugin,\n                                        const char *name,\n                                        int (*input_callback)(const void *pointer,\n                                                              void *data,\n                                                              struct t_gui_buffer *buffer,\n                                                              const char *input_data),\n                                        const void *input_callback_pointer,\n                                        void *input_callback_data,\n                                        int (*close_callback)(const void *pointer,\n                                                              void *data,\n                                                              struct t_gui_buffer *buffer),\n                                        const void *close_callback_pointer,\n                                        void *close_callback_data);\n    struct t_gui_buffer *(*buffer_search) (const char *plugin, const char *name);\n    struct t_gui_buffer *(*buffer_search_main) ();\n    void (*buffer_clear) (struct t_gui_buffer *buffer);\n    void (*buffer_close) (struct t_gui_buffer *buffer);\n    void (*buffer_merge) (struct t_gui_buffer *buffer,\n                           struct t_gui_buffer *target_buffer);\n    void (*buffer_unmerge) (struct t_gui_buffer *buffer, int number);\n    int (*buffer_get_integer) (struct t_gui_buffer *buffer,\n                               const char *property);\n    const char *(*buffer_get_string) (struct t_gui_buffer *buffer,\n                                      const char *property);\n    void *(*buffer_get_pointer) (struct t_gui_buffer *buffer,\n                                 const char *property);\n    void (*buffer_set) (struct t_gui_buffer *buffer, const char *property,\n                        const char *value);\n    void (*buffer_set_pointer) (struct t_gui_buffer *buffer,\n                                const char *property, void *pointer);\n    char *(*buffer_string_replace_local_var) (struct t_gui_buffer *buffer,\n                                              const char *string);\n    int (*buffer_match_list) (struct t_gui_buffer *buffer, const char *string);\n\n    /* windows */\n    struct t_gui_window *(*window_search_with_buffer) (struct t_gui_buffer *buffer);\n    int (*window_get_integer) (struct t_gui_window *window,\n                               const char *property);\n    const char *(*window_get_string) (struct t_gui_window *window,\n                                      const char *property);\n    void *(*window_get_pointer) (struct t_gui_window *window,\n                                 const char *property);\n    void (*window_set_title) (const char *title);\n\n    /* nicklist */\n    struct t_gui_nick_group *(*nicklist_add_group) (struct t_gui_buffer *buffer,\n                                                    struct t_gui_nick_group *parent_group,\n                                                    const char *name,\n                                                    const char *color,\n                                                    int visible);\n    struct t_gui_nick_group *(*nicklist_search_group) (struct t_gui_buffer *buffer,\n                                                       struct t_gui_nick_group *from_group,\n                                                       const char *name);\n    struct t_gui_nick *(*nicklist_add_nick) (struct t_gui_buffer *buffer,\n                                             struct t_gui_nick_group *group,\n                                             const char *name,\n                                             const char *color,\n                                             const char *prefix,\n                                             const char *prefix_color,\n                                             int visible);\n    struct t_gui_nick *(*nicklist_search_nick) (struct t_gui_buffer *buffer,\n                                                struct t_gui_nick_group *from_group,\n                                                const char *name);\n    void (*nicklist_remove_group) (struct t_gui_buffer *buffer,\n                                   struct t_gui_nick_group *group);\n    void (*nicklist_remove_nick) (struct t_gui_buffer *buffer,\n                                  struct t_gui_nick *nick);\n    void (*nicklist_remove_all) (struct t_gui_buffer *buffer);\n    void (*nicklist_get_next_item) (struct t_gui_buffer *buffer,\n                                    struct t_gui_nick_group **group,\n                                    struct t_gui_nick **nick);\n    int (*nicklist_group_get_integer) (struct t_gui_buffer *buffer,\n                                       struct t_gui_nick_group *group,\n                                       const char *property);\n    const char *(*nicklist_group_get_string) (struct t_gui_buffer *buffer,\n                                              struct t_gui_nick_group *group,\n                                              const char *property);\n    void *(*nicklist_group_get_pointer) (struct t_gui_buffer *buffer,\n                                         struct t_gui_nick_group *group,\n                                         const char *property);\n    void (*nicklist_group_set) (struct t_gui_buffer *buffer,\n                                struct t_gui_nick_group *group,\n                                const char *property, const char *value);\n    int (*nicklist_nick_get_integer) (struct t_gui_buffer *buffer,\n                                      struct t_gui_nick *nick,\n                                      const char *property);\n    const char *(*nicklist_nick_get_string) (struct t_gui_buffer *buffer,\n                                             struct t_gui_nick *nick,\n                                             const char *property);\n    void *(*nicklist_nick_get_pointer) (struct t_gui_buffer *buffer,\n                                        struct t_gui_nick *nick,\n                                        const char *property);\n    void (*nicklist_nick_set) (struct t_gui_buffer *buffer,\n                               struct t_gui_nick *nick,\n                               const char *property, const char *value);\n\n    /* bars */\n    struct t_gui_bar_item *(*bar_item_search) (const char *name);\n    struct t_gui_bar_item *(*bar_item_new) (struct t_weechat_plugin *plugin,\n                                            const char *name,\n                                            char *(*build_callback)(const void *pointer,\n                                                                    void *data,\n                                                                    struct t_gui_bar_item *item,\n                                                                    struct t_gui_window *window,\n                                                                    struct t_gui_buffer *buffer,\n                                                                    struct t_hashtable *extra_info),\n                                            const void *build_callback_pointer,\n                                            void *build_callback_data);\n    void (*bar_item_update) (const char *name);\n    void (*bar_item_remove) (struct t_gui_bar_item *item);\n    struct t_gui_bar *(*bar_search) (const char *name);\n    struct t_gui_bar *(*bar_new) (const char *name,\n                                  const char *hidden,\n                                  const char *priority,\n                                  const char *type,\n                                  const char *condition,\n                                  const char *position,\n                                  const char *filling_top_bottom,\n                                  const char *filling_left_right,\n                                  const char *size,\n                                  const char *size_max,\n                                  const char *color_fg,\n                                  const char *color_delim,\n                                  const char *color_bg,\n                                  const char *color_bg_inactive,\n                                  const char *separator,\n                                  const char *items);\n    int (*bar_set) (struct t_gui_bar *bar, const char *property,\n                    const char *value);\n    void (*bar_update) (const char *name);\n    void (*bar_remove) (struct t_gui_bar *bar);\n\n    /* command */\n    int (*command) (struct t_weechat_plugin *plugin,\n                    struct t_gui_buffer *buffer, const char *command);\n    int (*command_options) (struct t_weechat_plugin *plugin,\n                            struct t_gui_buffer *buffer, const char *command,\n                            struct t_hashtable *options);\n\n    /* completion */\n    struct t_gui_completion *(*completion_new) (struct t_weechat_plugin *plugin,\n                                                struct t_gui_buffer *buffer);\n    int (*completion_search) (struct t_gui_completion *completion,\n                              const char *data, int position, int direction);\n    const char *(*completion_get_string) (struct t_gui_completion *completion,\n                                          const char *property);\n    void (*completion_list_add) (struct t_gui_completion *completion,\n                                 const char *word,\n                                 int nick_completion,\n                                 const char *where);\n    void (*completion_free) (struct t_gui_completion *completion);\n\n    /* network */\n    int (*network_pass_proxy) (const char *proxy, int sock,\n                               const char *address, int port);\n    int (*network_connect_to) (const char *proxy,\n                               struct sockaddr *address,\n                               socklen_t address_length);\n\n    /* infos */\n    char *(*info_get) (struct t_weechat_plugin *plugin, const char *info_name,\n                       const char *arguments);\n    struct t_hashtable *(*info_get_hashtable) (struct t_weechat_plugin *plugin,\n                                               const char *info_name,\n                                               struct t_hashtable *hashtable);\n\n    /* infolists */\n    struct t_infolist *(*infolist_new) (struct t_weechat_plugin *plugin);\n    struct t_infolist_item *(*infolist_new_item) (struct t_infolist *infolist);\n    struct t_infolist_var *(*infolist_new_var_integer) (struct t_infolist_item *item,\n                                                        const char *name,\n                                                        int value);\n    struct t_infolist_var *(*infolist_new_var_string) (struct t_infolist_item *item,\n                                                       const char *name,\n                                                       const char *value);\n    struct t_infolist_var *(*infolist_new_var_pointer) (struct t_infolist_item *item,\n                                                        const char *name,\n                                                        void *pointer);\n    struct t_infolist_var *(*infolist_new_var_buffer) (struct t_infolist_item *item,\n                                                       const char *name,\n                                                       void *pointer,\n                                                       int size);\n    struct t_infolist_var *(*infolist_new_var_time) (struct t_infolist_item *item,\n                                                     const char *name,\n                                                     time_t time);\n    struct t_infolist_var *(*infolist_search_var) (struct t_infolist *infolist,\n                                                   const char *name);\n    struct t_infolist *(*infolist_get) (struct t_weechat_plugin *plugin,\n                                        const char *infolist_name,\n                                        void *pointer,\n                                        const char *arguments);\n    int (*infolist_next) (struct t_infolist *infolist);\n    int (*infolist_prev) (struct t_infolist *infolist);\n    void (*infolist_reset_item_cursor) (struct t_infolist *infolist);\n    const char *(*infolist_fields) (struct t_infolist *infolist);\n    int (*infolist_integer) (struct t_infolist *infolist, const char *var);\n    const char *(*infolist_string) (struct t_infolist *infolist, const char *var);\n    void *(*infolist_pointer) (struct t_infolist *infolist, const char *var);\n    void *(*infolist_buffer) (struct t_infolist *infolist, const char *var,\n                              int *size);\n    time_t (*infolist_time) (struct t_infolist *infolist, const char *var);\n    void (*infolist_free) (struct t_infolist *infolist);\n\n    /* hdata */\n    struct t_hdata *(*hdata_new) (struct t_weechat_plugin *plugin,\n                                  const char *hdata_name, const char *var_prev,\n                                  const char *var_next,\n                                  int create_allowed, int delete_allowed,\n                                  int (*callback_update)(void *data,\n                                                         struct t_hdata *hdata,\n                                                         void *pointer,\n                                                         struct t_hashtable *hashtable),\n                                  void *callback_update_data);\n    void (*hdata_new_var) (struct t_hdata *hdata, const char *name, int offset,\n                           int type, int update_allowed, const char *array_size,\n                           const char *hdata_name);\n    void (*hdata_new_list) (struct t_hdata *hdata, const char *name,\n                            void *pointer, int flags);\n    struct t_hdata *(*hdata_get) (struct t_weechat_plugin *plugin,\n                                  const char *hdata_name);\n    int (*hdata_get_var_offset) (struct t_hdata *hdata, const char *name);\n    int (*hdata_get_var_type) (struct t_hdata *hdata, const char *name);\n    const char *(*hdata_get_var_type_string) (struct t_hdata *hdata,\n                                              const char *name);\n    int (*hdata_get_var_array_size) (struct t_hdata *hdata, void *pointer,\n                                     const char *name);\n    const char *(*hdata_get_var_array_size_string) (struct t_hdata *hdata,\n                                                    void *pointer,\n                                                    const char *name);\n    const char *(*hdata_get_var_hdata) (struct t_hdata *hdata,\n                                        const char *name);\n    void *(*hdata_get_var) (struct t_hdata *hdata, void *pointer,\n                            const char *name);\n    void *(*hdata_get_var_at_offset) (struct t_hdata *hdata, void *pointer,\n                                      int offset);\n    void *(*hdata_get_list) (struct t_hdata *hdata, const char *name);\n    int (*hdata_check_pointer) (struct t_hdata *hdata, void *list,\n                                void *pointer);\n    void *(*hdata_move) (struct t_hdata *hdata, void *pointer, int count);\n    void *(*hdata_search) (struct t_hdata *hdata, void *pointer,\n                           const char *search, int move);\n    char (*hdata_char) (struct t_hdata *hdata, void *pointer,\n                        const char *name);\n    int (*hdata_integer) (struct t_hdata *hdata, void *pointer,\n                          const char *name);\n    long (*hdata_long) (struct t_hdata *hdata, void *pointer,\n                        const char *name);\n    const char *(*hdata_string) (struct t_hdata *hdata, void *pointer,\n                                 const char *name);\n    void *(*hdata_pointer) (struct t_hdata *hdata, void *pointer,\n                            const char *name);\n    time_t (*hdata_time) (struct t_hdata *hdata, void *pointer,\n                          const char *name);\n    struct t_hashtable *(*hdata_hashtable) (struct t_hdata *hdata,\n                                            void *pointer, const char *name);\n    int (*hdata_compare) (struct t_hdata *hdata,\n                          void *pointer1, void *pointer2, const char *name,\n                          int case_sensitive);\n    int (*hdata_set) (struct t_hdata *hdata, void *pointer, const char *name,\n                      const char *value);\n    int (*hdata_update) (struct t_hdata *hdata, void *pointer,\n                         struct t_hashtable *hashtable);\n    const char *(*hdata_get_string) (struct t_hdata *hdata,\n                                     const char *property);\n\n    /* upgrade */\n    struct t_upgrade_file *(*upgrade_new) (const char *filename,\n                                           int (*callback_read)(const void *pointer,\n                                                                void *data,\n                                                                struct t_upgrade_file *upgrade_file,\n                                                                int object_id,\n                                                                struct t_infolist *infolist),\n                                           const void *callback_read_pointer,\n                                           void *callback_read_data);\n    int (*upgrade_write_object) (struct t_upgrade_file *upgrade_file,\n                                 int object_id,\n                                 struct t_infolist *infolist);\n    int (*upgrade_read) (struct t_upgrade_file *upgrade_file);\n    void (*upgrade_close) (struct t_upgrade_file *upgrade_file);\n};\n\nextern int weechat_plugin_init (struct t_weechat_plugin *plugin,\n                                int argc, char *argv[]);\nextern int weechat_plugin_end (struct t_weechat_plugin *plugin);\n\n/* macros for easy call to plugin API */\n\n/* plugins */\n#define weechat_plugin_get_name(__plugin)                               \\\n    (weechat_plugin->plugin_get_name)(__plugin)\n\n/* strings */\n#define weechat_charset_set(__charset)                                  \\\n    (weechat_plugin->charset_set)(weechat_plugin, __charset)\n#define weechat_iconv_to_internal(__charset, __string)                  \\\n    (weechat_plugin->iconv_to_internal)(__charset, __string)\n#define weechat_iconv_from_internal(__charset, __string)                \\\n    (weechat_plugin->iconv_from_internal)(__charset, __string)\n#ifndef WEECHAT_H\n#ifndef _\n#define _(string) (weechat_plugin->gettext)(string)\n#endif /* _ */\n#ifndef N_\n#define N_(string) (string)\n#endif /* N_ */\n#ifndef NG_\n#define NG_(single,plural,number)                                       \\\n    (weechat_plugin->ngettext)(single, plural, number)\n#endif /* NG_ */\n#endif /* WEECHAT_H */\n#define weechat_gettext(string) (weechat_plugin->gettext)(string)\n#define weechat_ngettext(single,plural,number)                          \\\n    (weechat_plugin->ngettext)(single, plural, number)\n#define weechat_strndup(__string, __length)                             \\\n    (weechat_plugin->strndup)(__string, __length)\n#define weechat_string_tolower(__string)                                \\\n    (weechat_plugin->string_tolower)(__string)\n#define weechat_string_toupper(__string)                                \\\n    (weechat_plugin->string_toupper)(__string)\n#define weechat_strcasecmp(__string1, __string2)                        \\\n    (weechat_plugin->strcasecmp)(__string1, __string2)\n#define weechat_strcasecmp_range(__string1, __string2, __range)         \\\n    (weechat_plugin->strcasecmp_range)(__string1, __string2, __range)\n#define weechat_strncasecmp(__string1, __string2, __max)                \\\n    (weechat_plugin->strncasecmp)(__string1, __string2, __max)\n#define weechat_strncasecmp_range(__string1, __string2, __max, __range) \\\n    (weechat_plugin->strncasecmp_range)(__string1, __string2, __max,    \\\n                                        __range)\n#define weechat_strcmp_ignore_chars(__string1, __string2,               \\\n                                    __chars_ignored, __case_sensitive)  \\\n    (weechat_plugin->strcmp_ignore_chars)(__string1, __string2,         \\\n                                          __chars_ignored,              \\\n                                          __case_sensitive)\n#define weechat_strcasestr(__string, __search)                          \\\n    (weechat_plugin->strcasestr)(__string, __search)\n#define weechat_strlen_screen(__string)                                 \\\n    (weechat_plugin->strlen_screen)(__string)\n#define weechat_string_match(__string, __mask, __case_sensitive)        \\\n    (weechat_plugin->string_match)(__string, __mask, __case_sensitive)\n#define weechat_string_match_list(__string, __masks, __case_sensitive)  \\\n    (weechat_plugin->string_match_list)(__string, __masks,              \\\n                                        __case_sensitive)\n#define weechat_string_replace(__string, __search, __replace)           \\\n    (weechat_plugin->string_replace)(__string, __search, __replace)\n#define weechat_string_expand_home(__path)                              \\\n    (weechat_plugin->string_expand_home)(__path)\n#define weechat_string_eval_path_home(__path, __pointers,               \\\n                                      __extra_vars, __options)          \\\n    (weechat_plugin->string_eval_path_home)(__path, __pointers,         \\\n                                            __extra_vars, __options)\n#define weechat_string_remove_quotes(__string, __quotes)                \\\n    (weechat_plugin->string_remove_quotes)(__string, __quotes)\n#define weechat_string_strip(__string, __left, __right, __chars)        \\\n    (weechat_plugin->string_strip)(__string, __left, __right, __chars)\n#define weechat_string_convert_escaped_chars(__string)                  \\\n    (weechat_plugin->string_convert_escaped_chars)(__string)\n#define weechat_string_mask_to_regex(__mask)                            \\\n    (weechat_plugin->string_mask_to_regex)(__mask)\n#define weechat_string_regex_flags(__regex, __default_flags, __flags)   \\\n    (weechat_plugin->string_regex_flags)(__regex, __default_flags,      \\\n                                         __flags)\n#define weechat_string_regcomp(__preg, __regex, __default_flags)        \\\n    (weechat_plugin->string_regcomp)(__preg, __regex, __default_flags)\n#define weechat_string_has_highlight(__string, __highlight_words)       \\\n    (weechat_plugin->string_has_highlight)(__string, __highlight_words)\n#define weechat_string_has_highlight_regex(__string, __regex)           \\\n    (weechat_plugin->string_has_highlight_regex)(__string, __regex)\n#define weechat_string_replace_regex(__string, __regex, __replace,      \\\n                                     __reference_char, __callback,      \\\n                                     __callback_data)                   \\\n    (weechat_plugin->string_replace_regex)(__string, __regex,           \\\n                                           __replace,                   \\\n                                           __reference_char,            \\\n                                           __callback,                  \\\n                                           __callback_data)\n#define weechat_string_split(__string, __separators, __strip_items,     \\\n                             __flags, __max, __num_items)               \\\n    (weechat_plugin->string_split)(__string, __separators,              \\\n                                   __strip_items, __flags,              \\\n                                   __max, __num_items)\n#define weechat_string_split_shell(__string, __num_items)               \\\n    (weechat_plugin->string_split_shell)(__string, __num_items)\n#define weechat_string_free_split(__split_string)                       \\\n    (weechat_plugin->string_free_split)(__split_string)\n#define weechat_string_build_with_split_string(__split_string,          \\\n                                               __separator)             \\\n    (weechat_plugin->string_build_with_split_string)(__split_string,    \\\n                                                     __separator)\n#define weechat_string_split_command(__command, __separator)            \\\n    (weechat_plugin->string_split_command)(__command, __separator)\n#define weechat_string_free_split_command(__split_command)              \\\n    (weechat_plugin->string_free_split_command)(__split_command)\n#define weechat_string_format_size(__size)                              \\\n    (weechat_plugin->string_format_size)(__size)\n#define weechat_string_remove_color(__string, __replacement)            \\\n    (weechat_plugin->string_remove_color)(__string, __replacement)\n#define weechat_string_base_encode(__base, __from, __length, __to)      \\\n    (weechat_plugin->string_base_encode)(__base, __from, __length,      \\\n                                         __to)\n#define weechat_string_base_decode(__base, __from, __to)                \\\n    (weechat_plugin->string_base_decode)(__base, __from, __to)\n#define weechat_string_hex_dump(__data, __data_size, __bytes_per_line,  \\\n                                __prefix, __suffix)                     \\\n    (weechat_plugin->string_hex_dump)(__data, __data_size,              \\\n                                      __bytes_per_line, __prefix,       \\\n                                      __suffix)\n#define weechat_string_is_command_char(__string)                        \\\n    (weechat_plugin->string_is_command_char)(__string)\n#define weechat_string_input_for_buffer(__string)                       \\\n    (weechat_plugin->string_input_for_buffer)(__string)\n#define weechat_string_eval_expression(__expr, __pointers,              \\\n                                       __extra_vars, __options)         \\\n    (weechat_plugin->string_eval_expression)(__expr, __pointers,        \\\n                                             __extra_vars, __options)\n#define weechat_string_dyn_alloc(__size_alloc)                          \\\n    (weechat_plugin->string_dyn_alloc)(__size_alloc)\n#define weechat_string_dyn_copy(__string, __new_string)                 \\\n    (weechat_plugin->string_dyn_copy)(__string, __new_string)\n#define weechat_string_dyn_concat(__string, __add)                      \\\n    (weechat_plugin->string_dyn_concat)(__string, __add)\n#define weechat_string_dyn_free(__string, __free_string)                \\\n    (weechat_plugin->string_dyn_free)(__string, __free_string)\n\n/* UTF-8 strings */\n#define weechat_utf8_has_8bits(__string)                                \\\n    (weechat_plugin->utf8_has_8bits)(__string)\n#define weechat_utf8_is_valid(__string, __length, __error)              \\\n    (weechat_plugin->utf8_is_valid)(__string, __length, __error)\n#define weechat_utf8_normalize(__string, __char)                        \\\n    (weechat_plugin->utf8_normalize)(__string, __char)\n#define weechat_utf8_prev_char(__start, __string)                       \\\n    (weechat_plugin->utf8_prev_char)(__start, __string)\n#define weechat_utf8_next_char(__string)                                \\\n    (weechat_plugin->utf8_next_char)(__string)\n#define weechat_utf8_char_int(__string)                                 \\\n    (weechat_plugin->utf8_char_int)(__string)\n#define weechat_utf8_char_size(__string)                                \\\n    (weechat_plugin->utf8_char_size)(__string)\n#define weechat_utf8_strlen(__string)                                   \\\n    (weechat_plugin->utf8_strlen)(__string)\n#define weechat_utf8_strnlen(__string, __bytes)                         \\\n    (weechat_plugin->utf8_strnlen)(__string, __bytes)\n#define weechat_utf8_strlen_screen(__string)                            \\\n    (weechat_plugin->utf8_strlen_screen)(__string)\n#define weechat_utf8_charcmp(__string1, __string2)                      \\\n    (weechat_plugin->utf8_charcmp)(__string1, __string2)\n#define weechat_utf8_charcasecmp(__string1, __string2)                  \\\n    (weechat_plugin->utf8_charcasecmp)(__string1, __string2)\n#define weechat_utf8_char_size_screen(__string)                         \\\n    (weechat_plugin->utf8_char_size_screen)(__string)\n#define weechat_utf8_add_offset(__string, __offset)                     \\\n    (weechat_plugin->utf8_add_offset)(__string, __offset)\n#define weechat_utf8_real_pos(__string, __pos)                          \\\n    (weechat_plugin->utf8_real_pos)(__string, __pos)\n#define weechat_utf8_pos(__string, __real_pos)                          \\\n    (weechat_plugin->utf8_pos)(__string, __real_pos)\n#define weechat_utf8_strndup(__string, __length)                        \\\n    (weechat_plugin->utf8_strndup)(__string, __length)\n\n/* crypto */\n#define weechat_crypto_hash(__data, __data_size, __hash_algo,           \\\n                            __hash, __hash_size)                        \\\n    (weechat_plugin->crypto_hash)(__data, __data_size, __hash_algo,     \\\n                                  __hash, __hash_size)\n#define weechat_crypto_hash_pbkdf2(__data, __data_size, __hash_algo,    \\\n                                   __salt, __salt_size, __iterations,   \\\n                                   __hash, __hash_size)                 \\\n    (weechat_plugin->crypto_hash_pbkdf2)(__data, __data_size,           \\\n                                         __hash_algo,                   \\\n                                         __salt, __salt_size,           \\\n                                         __iterations,                  \\\n                                         __hash, __hash_size)\n\n/* directories */\n#define weechat_mkdir_home(__directory, __mode)                         \\\n    (weechat_plugin->mkdir_home)(__directory, __mode)\n#define weechat_mkdir(__directory, __mode)                              \\\n    (weechat_plugin->mkdir)(__directory, __mode)\n#define weechat_mkdir_parents(__directory, __mode)                      \\\n    (weechat_plugin->mkdir_parents)(__directory, __mode)\n#define weechat_exec_on_files(__directory, __recurse_subdirs,           \\\n                              __hidden_files, __callback,               \\\n                              __callback_data)                          \\\n    (weechat_plugin->exec_on_files)(__directory, __recurse_subdirs,     \\\n                                    __hidden_files,                     \\\n                                    __callback, __callback_data)\n#define weechat_file_get_content(__filename)                            \\\n    (weechat_plugin->file_get_content)(__filename)\n\n/* util */\n#define weechat_util_timeval_cmp(__time1, __time2)                      \\\n    (weechat_plugin->util_timeval_cmp)(__time1, __time2)\n#define weechat_util_timeval_diff(__time1, __time2)                     \\\n    (weechat_plugin->util_timeval_diff)(__time1, __time2)\n#define weechat_util_timeval_add(__time, __interval)                    \\\n    (weechat_plugin->util_timeval_add)(__time, __interval)\n#define weechat_util_get_time_string(__date)                            \\\n    (weechat_plugin->util_get_time_string)(__date)\n#define weechat_util_version_number(__version)                          \\\n    (weechat_plugin->util_version_number)(__version)\n\n/* sorted list */\n#define weechat_list_new()                                              \\\n    (weechat_plugin->list_new)()\n#define weechat_list_add(__list, __string, __where, __user_data)        \\\n    (weechat_plugin->list_add)(__list, __string, __where, __user_data)\n#define weechat_list_search(__list, __string)                           \\\n    (weechat_plugin->list_search)(__list, __string)\n#define weechat_list_search_pos(__list, __string)                       \\\n    (weechat_plugin->list_search_pos)(__list, __string)\n#define weechat_list_casesearch(__list, __string)                       \\\n    (weechat_plugin->list_casesearch)(__list, __string)\n#define weechat_list_casesearch_pos(__list, __string)                   \\\n    (weechat_plugin->list_casesearch_pos)(__list, __string)\n#define weechat_list_get(__list, __index)                               \\\n    (weechat_plugin->list_get)(__list, __index)\n#define weechat_list_set(__item, __value)                               \\\n    (weechat_plugin->list_set)(__item, __value)\n#define weechat_list_next(__item)                                       \\\n    (weechat_plugin->list_next)(__item)\n#define weechat_list_prev(__item)                                       \\\n    (weechat_plugin->list_prev)(__item)\n#define weechat_list_string(__item)                                     \\\n    (weechat_plugin->list_string)(__item)\n#define weechat_list_user_data(__item)                                  \\\n    (weechat_plugin->list_user_data)(__item)\n#define weechat_list_size(__list)                                       \\\n    (weechat_plugin->list_size)(__list)\n#define weechat_list_remove(__list, __item)                             \\\n    (weechat_plugin->list_remove)(__list, __item)\n#define weechat_list_remove_all(__list)                                 \\\n    (weechat_plugin->list_remove_all)(__list)\n#define weechat_list_free(__list)                                       \\\n    (weechat_plugin->list_free)(__list)\n\n/* array lists */\n#define weechat_arraylist_new(__initial_size, __sorted,                 \\\n                              __allow_duplicates, __callback_cmp,       \\\n                              __callback_cmp_data, __callback_free,     \\\n                              __callback_free_data)                     \\\n    (weechat_plugin->arraylist_new)(__initial_size, __sorted,           \\\n                              __allow_duplicates, __callback_cmp,       \\\n                              __callback_cmp_data, __callback_free,     \\\n                              __callback_free_data)\n#define weechat_arraylist_size(__arraylist)                             \\\n    (weechat_plugin->arraylist_size)(__arraylist)\n#define weechat_arraylist_get(__arraylist, __index)                     \\\n    (weechat_plugin->arraylist_get)(__arraylist, __index)\n#define weechat_arraylist_search(__arraylist, __pointer, __index,       \\\n                                 __index_insert)                        \\\n    (weechat_plugin->arraylist_search)(__arraylist, __pointer, __index, \\\n                                       __index_insert)\n#define weechat_arraylist_insert(__arraylist, __index, __pointer)       \\\n    (weechat_plugin->arraylist_insert)(__arraylist, __index, __pointer)\n#define weechat_arraylist_add(__arraylist, __pointer)                   \\\n    (weechat_plugin->arraylist_add)(__arraylist, __pointer)\n#define weechat_arraylist_remove(__arraylist, __index)                  \\\n    (weechat_plugin->arraylist_remove)(__arraylist, __index)\n#define weechat_arraylist_clear(__arraylist)                            \\\n    (weechat_plugin->arraylist_clear)(__arraylist)\n#define weechat_arraylist_free(__arraylist)                             \\\n    (weechat_plugin->arraylist_free)(__arraylist)\n\n/* hash tables */\n#define weechat_hashtable_new(__size, __type_keys, __type_values,       \\\n                              __callback_hash_key, __callback_keycmp)   \\\n    (weechat_plugin->hashtable_new)(__size, __type_keys, __type_values, \\\n                                    __callback_hash_key,                \\\n                                    __callback_keycmp)\n#define weechat_hashtable_set_with_size(__hashtable, __key, __key_size, \\\n                                        __value, __value_size)          \\\n    (weechat_plugin->hashtable_set_with_size)(__hashtable, __key,       \\\n                                              __key_size, __value,      \\\n                                              __value_size)\n#define weechat_hashtable_set(__hashtable, __key, __value)              \\\n    (weechat_plugin->hashtable_set)(__hashtable, __key, __value)\n#define weechat_hashtable_get(__hashtable, __key)                       \\\n    (weechat_plugin->hashtable_get)(__hashtable, __key)\n#define weechat_hashtable_has_key(__hashtable, __key)                   \\\n    (weechat_plugin->hashtable_has_key)(__hashtable, __key)\n#define weechat_hashtable_map(__hashtable, __cb_map, __cb_map_data)     \\\n    (weechat_plugin->hashtable_map)(__hashtable, __cb_map,              \\\n                                    __cb_map_data)\n#define weechat_hashtable_map_string(__hashtable, __cb_map,             \\\n                                     __cb_map_data)                     \\\n    (weechat_plugin->hashtable_map_string)(__hashtable, __cb_map,       \\\n                                           __cb_map_data)\n#define weechat_hashtable_dup(__hashtable)                              \\\n    (weechat_plugin->hashtable_dup)(__hashtable)\n#define weechat_hashtable_get_integer(__hashtable, __property)          \\\n    (weechat_plugin->hashtable_get_integer)(__hashtable, __property)\n#define weechat_hashtable_get_string(__hashtable, __property)           \\\n    (weechat_plugin->hashtable_get_string)(__hashtable, __property)\n#define weechat_hashtable_set_pointer(__hashtable, __property,          \\\n                                      __pointer)                        \\\n    (weechat_plugin->hashtable_set_pointer)(__hashtable, __property,    \\\n                                            __pointer)\n#define weechat_hashtable_add_to_infolist(__hashtable, __infolist_item, \\\n                                          __prefix)                     \\\n    (weechat_plugin->hashtable_add_to_infolist)(__hashtable,            \\\n                                                __infolist_item,        \\\n                                                __prefix)\n#define weechat_hashtable_add_from_infolist(__hashtable, __infolist,    \\\n                                            __prefix)                   \\\n    (weechat_plugin->hashtable_add_from_infolist)(__hashtable,          \\\n                                                  __infolist,           \\\n                                                  __prefix)\n#define weechat_hashtable_remove(__hashtable, __key)                    \\\n    (weechat_plugin->hashtable_remove)(__hashtable, __key)\n#define weechat_hashtable_remove_all(__hashtable)                       \\\n    (weechat_plugin->hashtable_remove_all)(__hashtable)\n#define weechat_hashtable_free(__hashtable)                             \\\n    (weechat_plugin->hashtable_free)(__hashtable)\n\n/* config files */\n#define weechat_config_new(__name, __callback_reload,                   \\\n                           __callback_reload_pointer,                   \\\n                           __callback_reload_data)                      \\\n    (weechat_plugin->config_new)(weechat_plugin, __name,                \\\n                                 __callback_reload,                     \\\n                                 __callback_reload_pointer,             \\\n                                 __callback_reload_data)\n#define weechat_config_new_section(__config, __name,                    \\\n                                   __user_can_add_options,              \\\n                                   __user_can_delete_options,           \\\n                                   __cb_read,                           \\\n                                   __cb_read_pointer,                   \\\n                                   __cb_read_data,                      \\\n                                   __cb_write_std,                      \\\n                                   __cb_write_std_pointer,              \\\n                                   __cb_write_std_data,                 \\\n                                   __cb_write_def,                      \\\n                                   __cb_write_def_pointer,              \\\n                                   __cb_write_def_data,                 \\\n                                   __cb_create_option,                  \\\n                                   __cb_create_option_pointer,          \\\n                                   __cb_create_option_data,             \\\n                                   __cb_delete_option,                  \\\n                                   __cb_delete_option_pointer,          \\\n                                   __cb_delete_option_data)             \\\n    (weechat_plugin->config_new_section)(__config, __name,              \\\n                                         __user_can_add_options,        \\\n                                         __user_can_delete_options,     \\\n                                         __cb_read,                     \\\n                                         __cb_read_pointer,             \\\n                                         __cb_read_data,                \\\n                                         __cb_write_std,                \\\n                                         __cb_write_std_pointer,        \\\n                                         __cb_write_std_data,           \\\n                                         __cb_write_def,                \\\n                                         __cb_write_def_pointer,        \\\n                                         __cb_write_def_data,           \\\n                                         __cb_create_option,            \\\n                                         __cb_create_option_pointer,    \\\n                                         __cb_create_option_data,       \\\n                                         __cb_delete_option,            \\\n                                         __cb_delete_option_pointer,    \\\n                                         __cb_delete_option_data)\n#define weechat_config_search_section(__config, __name)                 \\\n    (weechat_plugin->config_search_section)(__config, __name)\n#define weechat_config_new_option(__config, __section, __name, __type,  \\\n                                  __desc, __string_values, __min,       \\\n                                  __max, __default, __value,            \\\n                                  __null_value_allowed,                 \\\n                                  __callback_check,                     \\\n                                  __callback_check_pointer,             \\\n                                  __callback_check_data,                \\\n                                  __callback_change,                    \\\n                                  __callback_change_pointer,            \\\n                                  __callback_change_data,               \\\n                                  __callback_delete,                    \\\n                                  __callback_delete_pointer,            \\\n                                  __callback_delete_data)               \\\n    (weechat_plugin->config_new_option)(__config, __section, __name,    \\\n                                        __type, __desc,                 \\\n                                        __string_values,                \\\n                                        __min, __max, __default,        \\\n                                        __value,                        \\\n                                        __null_value_allowed,           \\\n                                        __callback_check,               \\\n                                        __callback_check_pointer,       \\\n                                        __callback_check_data,          \\\n                                        __callback_change,              \\\n                                        __callback_change_pointer,      \\\n                                        __callback_change_data,         \\\n                                        __callback_delete,              \\\n                                        __callback_delete_pointer,      \\\n                                        __callback_delete_data)\n#define weechat_config_search_option(__config, __section, __name)       \\\n    (weechat_plugin->config_search_option)(__config, __section, __name)\n#define weechat_config_search_section_option(__config, __section,       \\\n                                             __name, __section_found,   \\\n                                             __option_found)            \\\n    (weechat_plugin->config_search_section_option)(__config, __section, \\\n                                                   __name,              \\\n                                                   __section_found,     \\\n                                                   __option_found);\n#define weechat_config_search_with_string(__name, __config, __section,  \\\n                                          __option, __pos_option)       \\\n    (weechat_plugin->config_search_with_string)(__name, __config,       \\\n                                                __section, __option,    \\\n                                                __pos_option);\n#define weechat_config_string_to_boolean(__string)                      \\\n    (weechat_plugin->config_string_to_boolean)(__string)\n#define weechat_config_option_reset(__option, __run_callback)           \\\n    (weechat_plugin->config_option_reset)(__option, __run_callback)\n#define weechat_config_option_set(__option, __value, __run_callback)    \\\n    (weechat_plugin->config_option_set)(__option, __value,              \\\n                                        __run_callback)\n#define weechat_config_option_set_null(__option, __run_callback)        \\\n    (weechat_plugin->config_option_set_null)(__option, __run_callback)\n#define weechat_config_option_unset(__option)                           \\\n    (weechat_plugin->config_option_unset)(__option)\n#define weechat_config_option_rename(__option, __new_name)              \\\n    (weechat_plugin->config_option_rename)(__option, __new_name)\n#define weechat_config_option_get_string(__option, __property)         \\\n    (weechat_plugin->config_option_get_string)(__option, __property)\n#define weechat_config_option_get_pointer(__option, __property)         \\\n    (weechat_plugin->config_option_get_pointer)(__option, __property)\n#define weechat_config_option_is_null(__option)                         \\\n    (weechat_plugin->config_option_is_null)(__option)\n#define weechat_config_option_default_is_null(__option)                 \\\n    (weechat_plugin->config_option_default_is_null)(__option)\n#define weechat_config_boolean(__option)                                \\\n    (weechat_plugin->config_boolean)(__option)\n#define weechat_config_boolean_default(__option)                        \\\n    (weechat_plugin->config_boolean_default)(__option)\n#define weechat_config_integer(__option)                                \\\n    (weechat_plugin->config_integer)(__option)\n#define weechat_config_integer_default(__option)                        \\\n    (weechat_plugin->config_integer_default)(__option)\n#define weechat_config_string(__option)                                 \\\n    (weechat_plugin->config_string)(__option)\n#define weechat_config_string_default(__option)                         \\\n    (weechat_plugin->config_string_default)(__option)\n#define weechat_config_color(__option)                                  \\\n    (weechat_plugin->config_color)(__option)\n#define weechat_config_color_default(__option)                          \\\n    (weechat_plugin->config_color_default)(__option)\n#define weechat_config_write_option(__config, __option)                 \\\n    (weechat_plugin->config_write_option)(__config, __option)\n#define weechat_config_write_line(__config, __option, __value...)       \\\n    (weechat_plugin->config_write_line)(__config, __option, ##__value)\n#define weechat_config_write(__config)                                  \\\n    (weechat_plugin->config_write)(__config)\n#define weechat_config_read(__config)                                   \\\n    (weechat_plugin->config_read)(__config)\n#define weechat_config_reload(__config)                                 \\\n    (weechat_plugin->config_reload)(__config)\n#define weechat_config_option_free(__option)                            \\\n    (weechat_plugin->config_option_free)(__option)\n#define weechat_config_section_free_options(__section)                  \\\n    (weechat_plugin->config_section_free_options)(__section)\n#define weechat_config_section_free(__section)                          \\\n    (weechat_plugin->config_section_free)(__section)\n#define weechat_config_free(__config)                                   \\\n    (weechat_plugin->config_free)(__config)\n#define weechat_config_get(__option)                                    \\\n    (weechat_plugin->config_get)(__option)\n#define weechat_config_get_plugin(__option)                             \\\n    (weechat_plugin->config_get_plugin)(weechat_plugin, __option)\n#define weechat_config_is_set_plugin(__option)                          \\\n    (weechat_plugin->config_is_set_plugin)(weechat_plugin, __option)\n#define weechat_config_set_plugin(__option, __value)                    \\\n    (weechat_plugin->config_set_plugin)(weechat_plugin, __option,       \\\n                                        __value)\n#define weechat_config_set_desc_plugin(__option, __description)         \\\n    (weechat_plugin->config_set_desc_plugin)(weechat_plugin, __option,  \\\n                                             __description)\n#define weechat_config_unset_plugin(__option)                           \\\n    (weechat_plugin->config_unset_plugin)(weechat_plugin, __option)\n\n/* key bindings */\n#define weechat_key_bind(__context, __keys)                             \\\n    (weechat_plugin->key_bind)(__context, __keys)\n#define weechat_key_unbind(__context, __key)                            \\\n    (weechat_plugin->key_unbind)(__context, __key)\n\n/* display */\n#define weechat_prefix(__prefix)                                        \\\n    (weechat_plugin->prefix)(__prefix)\n#define weechat_color(__color_name)                                     \\\n    (weechat_plugin->color)(__color_name)\n#define weechat_printf(__buffer, __message, __argz...)                  \\\n    (weechat_plugin->printf_date_tags)(__buffer, 0, NULL, __message,    \\\n                                       ##__argz)\n#define weechat_printf_date_tags(__buffer, __date, __tags, __message,   \\\n                                 __argz...)                             \\\n    (weechat_plugin->printf_date_tags)(__buffer, __date, __tags,        \\\n                                       __message, ##__argz)\n#define weechat_printf_y(__buffer, __y, __message, __argz...)           \\\n    (weechat_plugin->printf_y)(__buffer, __y, __message, ##__argz)\n#define weechat_log_printf(__message, __argz...)                        \\\n    (weechat_plugin->log_printf)(__message, ##__argz)\n\n/* hooks */\n#define weechat_hook_command(__command, __description, __args,          \\\n                             __args_desc, __completion, __callback,     \\\n                             __pointer, __data)                         \\\n    (weechat_plugin->hook_command)(weechat_plugin, __command,           \\\n                                   __description, __args, __args_desc,  \\\n                                   __completion, __callback, __pointer, \\\n                                   __data)\n#define weechat_hook_command_run(__command, __callback, __pointer,      \\\n                                 __data)                                \\\n    (weechat_plugin->hook_command_run)(weechat_plugin, __command,       \\\n                                       __callback, __pointer, __data)\n#define weechat_hook_timer(__interval, __align_second, __max_calls,     \\\n                           __callback, __pointer, __data)               \\\n    (weechat_plugin->hook_timer)(weechat_plugin, __interval,            \\\n                                 __align_second, __max_calls,           \\\n                                 __callback, __pointer, __data)\n#define weechat_hook_fd(__fd, __flag_read, __flag_write,                \\\n                        __flag_exception, __callback, __pointer,        \\\n                        __data)                                         \\\n    (weechat_plugin->hook_fd)(weechat_plugin, __fd, __flag_read,        \\\n                              __flag_write, __flag_exception,           \\\n                              __callback, __pointer, __data)\n#define weechat_hook_process(__command, __timeout, __callback,          \\\n                             __callback_pointer, __callback_data)       \\\n    (weechat_plugin->hook_process)(weechat_plugin, __command,           \\\n                                   __timeout, __callback,               \\\n                                   __callback_pointer, __callback_data)\n#define weechat_hook_process_hashtable(__command, __options, __timeout, \\\n                                       __callback, __callback_pointer,  \\\n                                       __callback_data)                 \\\n    (weechat_plugin->hook_process_hashtable)(weechat_plugin, __command, \\\n                                             __options, __timeout,      \\\n                                             __callback,                \\\n                                             __callback_pointer,        \\\n                                             __callback_data)\n#define weechat_hook_connect(__proxy, __address, __port, __ipv6,        \\\n                             __retry, __gnutls_sess, __gnutls_cb,       \\\n                             __gnutls_dhkey_size, __gnutls_priorities,  \\\n                             __local_hostname, __callback, __pointer,   \\\n                             __data)                                    \\\n    (weechat_plugin->hook_connect)(weechat_plugin, __proxy, __address,  \\\n                                   __port, __ipv6, __retry,             \\\n                                   __gnutls_sess, __gnutls_cb,          \\\n                                   __gnutls_dhkey_size,                 \\\n                                   __gnutls_priorities,                 \\\n                                   __local_hostname,                    \\\n                                   __callback, __pointer, __data)\n#define weechat_hook_line(_buffer_type, __buffer_name, __tags,          \\\n                          __callback, __pointer, __data)                \\\n    (weechat_plugin->hook_line)(weechat_plugin, _buffer_type,           \\\n                                __buffer_name, __tags, __callback,      \\\n                                __pointer, __data)\n#define weechat_hook_print(__buffer, __tags, __msg, __strip__colors,    \\\n                           __callback, __pointer, __data)               \\\n    (weechat_plugin->hook_print)(weechat_plugin, __buffer, __tags,      \\\n                                 __msg, __strip__colors, __callback,    \\\n                                 __pointer, __data)\n#define weechat_hook_signal(__signal, __callback, __pointer, __data)    \\\n    (weechat_plugin->hook_signal)(weechat_plugin, __signal, __callback, \\\n                                  __pointer, __data)\n#define weechat_hook_signal_send(__signal, __type_data, __signal_data)  \\\n    (weechat_plugin->hook_signal_send)(__signal, __type_data,           \\\n                                       __signal_data)\n#define weechat_hook_hsignal(__signal, __callback, __pointer, __data)   \\\n    (weechat_plugin->hook_hsignal)(weechat_plugin, __signal,            \\\n                                   __callback, __pointer, __data)\n#define weechat_hook_hsignal_send(__signal, __hashtable)                \\\n    (weechat_plugin->hook_hsignal_send)(__signal, __hashtable)\n#define weechat_hook_config(__option, __callback, __pointer, __data)    \\\n    (weechat_plugin->hook_config)(weechat_plugin, __option, __callback, \\\n                                  __pointer, __data)\n#define weechat_hook_completion(__completion, __description,            \\\n                                __callback, __pointer, __data)          \\\n    (weechat_plugin->hook_completion)(weechat_plugin, __completion,     \\\n                                      __description, __callback,        \\\n                                      __pointer, __data)\n#define weechat_hook_completion_get_string(__completion, __property)    \\\n    (weechat_plugin->hook_completion_get_string)(__completion,          \\\n                                                 __property)\n#define weechat_hook_completion_list_add(__completion, __word,          \\\n                                         __nick_completion, __where)    \\\n    (weechat_plugin->hook_completion_list_add)(__completion, __word,    \\\n                                               __nick_completion,       \\\n                                               __where)\n#define weechat_hook_modifier(__modifier, __callback, __pointer,        \\\n                              __data)                                   \\\n    (weechat_plugin->hook_modifier)(weechat_plugin, __modifier,         \\\n                                    __callback, __pointer, __data)\n#define weechat_hook_modifier_exec(__modifier, __modifier_data,         \\\n                                   __string)                            \\\n    (weechat_plugin->hook_modifier_exec)(weechat_plugin, __modifier,    \\\n                                         __modifier_data, __string)\n#define weechat_hook_info(__info_name, __description,                   \\\n                          __args_description, __callback, __pointer,    \\\n                          __data)                                       \\\n    (weechat_plugin->hook_info)(weechat_plugin, __info_name,            \\\n                                __description, __args_description,      \\\n                                __callback, __pointer, __data)\n#define weechat_hook_info_hashtable(__info_name, __description,         \\\n                                    __args_description,                 \\\n                                    __output_description,               \\\n                                    __callback,                         \\\n                                    __pointer,                          \\\n                                    __data)                             \\\n    (weechat_plugin->hook_info_hashtable)(weechat_plugin, __info_name,  \\\n                                          __description,                \\\n                                          __args_description,           \\\n                                          __output_description,         \\\n                                          __callback, __pointer,        \\\n                                          __data)\n#define weechat_hook_infolist(__infolist_name, __description,           \\\n                              __pointer_description,                    \\\n                              __args_description, __callback,           \\\n                              __pointer, __data)                        \\\n    (weechat_plugin->hook_infolist)(weechat_plugin, __infolist_name,    \\\n                                    __description,                      \\\n                                    __pointer_description,              \\\n                                    __args_description, __callback,     \\\n                                    __pointer, __data)\n#define weechat_hook_hdata(__hdata_name, __description, __callback,     \\\n                           __pointer, __data)                           \\\n    (weechat_plugin->hook_hdata)(weechat_plugin, __hdata_name,          \\\n                                 __description, __callback, __pointer,  \\\n                                 __data)\n#define weechat_hook_focus(__area, __callback, __pointer, __data)       \\\n    (weechat_plugin->hook_focus)(weechat_plugin, __area, __callback,    \\\n                                 __pointer, __data)\n#define weechat_hook_set(__hook, __property, __value)                   \\\n    (weechat_plugin->hook_set)(__hook, __property, __value)\n#define weechat_unhook(__hook)                                          \\\n    (weechat_plugin->unhook)( __hook)\n#define weechat_unhook_all(__subplugin)                                 \\\n    (weechat_plugin->unhook_all)(weechat_plugin, __subplugin)\n\n/* buffers */\n#define weechat_buffer_new(__name, __input_callback,                    \\\n                           __input_callback_pointer,                    \\\n                           __input_callback_data,                       \\\n                           __close_callback,                            \\\n                           __close_callback_pointer,                    \\\n                           __close_callback_data)                       \\\n    (weechat_plugin->buffer_new)(weechat_plugin, __name,                \\\n                                 __input_callback,                      \\\n                                 __input_callback_pointer,              \\\n                                 __input_callback_data,                 \\\n                                 __close_callback,                      \\\n                                 __close_callback_pointer,              \\\n                                 __close_callback_data)\n#define weechat_buffer_search(__plugin, __name)                         \\\n    (weechat_plugin->buffer_search)(__plugin, __name)\n#define weechat_buffer_search_main()                                    \\\n    (weechat_plugin->buffer_search_main)()\n#define weechat_current_buffer()                                        \\\n    (weechat_plugin->buffer_search)(NULL, NULL)\n#define weechat_buffer_clear(__buffer)                                  \\\n    (weechat_plugin->buffer_clear)(__buffer)\n#define weechat_buffer_close(__buffer)                                  \\\n    (weechat_plugin->buffer_close)(__buffer)\n#define weechat_buffer_merge(__buffer, __target_buffer)                 \\\n    (weechat_plugin->buffer_merge)(__buffer, __target_buffer)\n#define weechat_buffer_unmerge(__buffer, __number)                      \\\n    (weechat_plugin->buffer_unmerge)(__buffer, __number)\n#define weechat_buffer_get_integer(__buffer, __property)                \\\n    (weechat_plugin->buffer_get_integer)(__buffer, __property)\n#define weechat_buffer_get_string(__buffer, __property)                 \\\n    (weechat_plugin->buffer_get_string)(__buffer, __property)\n#define weechat_buffer_get_pointer(__buffer, __property)                \\\n    (weechat_plugin->buffer_get_pointer)(__buffer, __property)\n#define weechat_buffer_set(__buffer, __property, __value)               \\\n    (weechat_plugin->buffer_set)(__buffer, __property, __value)\n#define weechat_buffer_set_pointer(__buffer, __property, __pointer)     \\\n    (weechat_plugin->buffer_set_pointer)(__buffer, __property,          \\\n                                         __pointer)\n#define weechat_buffer_string_replace_local_var(__buffer, __string)     \\\n    (weechat_plugin->buffer_string_replace_local_var)(__buffer,         \\\n                                                      __string)\n#define weechat_buffer_match_list(__buffer, __string)                   \\\n    (weechat_plugin->buffer_match_list)(__buffer, __string)\n\n/* windows */\n#define weechat_window_search_with_buffer(__buffer)                     \\\n    (weechat_plugin->window_search_with_buffer)(__buffer)\n#define weechat_window_get_integer(__window, __property)                \\\n    (weechat_plugin->window_get_integer)(__window, __property)\n#define weechat_window_get_string(__window, __property)                 \\\n    (weechat_plugin->window_get_string)(__window, __property)\n#define weechat_window_get_pointer(__window, __property)                \\\n    (weechat_plugin->window_get_pointer)(__window, __property)\n#define weechat_current_window()                                        \\\n    (weechat_plugin->window_get_pointer)(NULL, \"current\")\n#define weechat_window_set_title(__title)                               \\\n    (weechat_plugin->window_set_title)(__title)\n\n/* nicklist */\n#define weechat_nicklist_add_group(__buffer, __parent_group, __name,    \\\n                                   __color, __visible)                  \\\n    (weechat_plugin->nicklist_add_group)(__buffer, __parent_group,      \\\n                                         __name, __color, __visible)\n#define weechat_nicklist_search_group(__buffer, __from_group, __name)   \\\n    (weechat_plugin->nicklist_search_group)(__buffer, __from_group,     \\\n                                            __name)\n#define weechat_nicklist_add_nick(__buffer, __group, __name, __color,   \\\n                                  __prefix, __prefix_color, __visible)  \\\n    (weechat_plugin->nicklist_add_nick)(__buffer, __group, __name,      \\\n                                        __color, __prefix,              \\\n                                        __prefix_color, __visible)\n#define weechat_nicklist_search_nick(__buffer, __from_group, __name)    \\\n    (weechat_plugin->nicklist_search_nick)(__buffer, __from_group,      \\\n                                           __name)\n#define weechat_nicklist_remove_group(__buffer, __group)                \\\n    (weechat_plugin->nicklist_remove_group)(__buffer, __group)\n#define weechat_nicklist_remove_nick(__buffer, __nick)                  \\\n    (weechat_plugin->nicklist_remove_nick)(__buffer, __nick)\n#define weechat_nicklist_remove_all(__buffer)                           \\\n    (weechat_plugin->nicklist_remove_all)(__buffer)\n#define weechat_nicklist_get_next_item(__buffer, __group, __nick)       \\\n    (weechat_plugin->nicklist_get_next_item)(__buffer, __group, __nick)\n#define weechat_nicklist_group_get_integer(__buffer, __group,           \\\n                                           __property)                  \\\n    (weechat_plugin->nicklist_group_get_integer)(__buffer, __group,     \\\n                                                 __property)\n#define weechat_nicklist_group_get_string(__buffer, __group,            \\\n                                          __property)                   \\\n    (weechat_plugin->nicklist_group_get_string)(__buffer, __group,      \\\n                                                __property)\n#define weechat_nicklist_group_get_pointer(__buffer, __group,           \\\n                                           __property)                  \\\n    (weechat_plugin->nicklist_group_get_pointer)(__buffer, __group,     \\\n                                                 __property)\n#define weechat_nicklist_group_set(__buffer, __group, __property,       \\\n                                   __value)                             \\\n    (weechat_plugin->nicklist_group_set)(__buffer, __group, __property, \\\n                                         __value)\n#define weechat_nicklist_nick_get_integer(__buffer, __nick, __property) \\\n    (weechat_plugin->nicklist_nick_get_integer)(__buffer, __nick,       \\\n                                                __property)\n#define weechat_nicklist_nick_get_string(__buffer, __nick, __property)  \\\n    (weechat_plugin->nicklist_nick_get_string)(__buffer, __nick,        \\\n                                               __property)\n#define weechat_nicklist_nick_get_pointer(__buffer, __nick, __property) \\\n    (weechat_plugin->nicklist_nick_get_pointer)(__buffer, __nick,       \\\n                                                __property)\n#define weechat_nicklist_nick_set(__buffer, __nick, __property,         \\\n                                  __value)                              \\\n    (weechat_plugin->nicklist_nick_set)(__buffer, __nick, __property,   \\\n                                        __value)\n\n/* bars */\n#define weechat_bar_item_search(__name)                                 \\\n    (weechat_plugin->bar_item_search)(__name)\n#define weechat_bar_item_new(__name, __build_callback,                  \\\n                             __build_callback_pointer,                  \\\n                             __build_callback_data)                     \\\n    (weechat_plugin->bar_item_new)(weechat_plugin, __name,              \\\n                                   __build_callback,                    \\\n                                   __build_callback_pointer,            \\\n                                   __build_callback_data)\n#define weechat_bar_item_update(__name)                                 \\\n    (weechat_plugin->bar_item_update)(__name)\n#define weechat_bar_item_remove(__item)                                 \\\n    (weechat_plugin->bar_item_remove)(__item)\n#define weechat_bar_search(__name)                                      \\\n    (weechat_plugin->bar_search)(__name)\n#define weechat_bar_new(__name, __hidden, __priority, __type,           \\\n                        __condition, __position, __filling_top_bottom,  \\\n                        __filling_left_right, __size, __size_max,       \\\n                        __color_fg, __color_delim, __color_bg,          \\\n                        __color_bg_inactive, __separator, __items)      \\\n    (weechat_plugin->bar_new)(__name, __hidden, __priority, __type,     \\\n                              __condition, __position,                  \\\n                              __filling_top_bottom,                     \\\n                              __filling_left_right,                     \\\n                              __size, __size_max, __color_fg,           \\\n                              __color_delim, __color_bg,                \\\n                              __color_bg_inactive, __separator,         \\\n                              __items)\n#define weechat_bar_set(__bar, __property, __value)                     \\\n    (weechat_plugin->bar_set)(__bar, __property, __value)\n#define weechat_bar_update(__name)                                      \\\n    (weechat_plugin->bar_update)(__name)\n#define weechat_bar_remove(__bar)                                       \\\n    (weechat_plugin->bar_remove)(__bar)\n\n/* command */\n#define weechat_command(__buffer, __command)                            \\\n    (weechat_plugin->command)(weechat_plugin, __buffer, __command)\n#define weechat_command_options(__buffer, __command, __options)         \\\n    (weechat_plugin->command_options)(weechat_plugin, __buffer,         \\\n                                      __command, __options)\n\n/* completion */\n#define weechat_completion_new(__buffer)                                \\\n    (weechat_plugin->completion_new)(weechat_plugin, __buffer)\n#define weechat_completion_search(__completion, __data, __position,     \\\n                                  __direction)                          \\\n    (weechat_plugin->completion_search)(__completion, __data,           \\\n                                        __position, __direction)\n#define weechat_completion_get_string(__completion, __property)         \\\n    (weechat_plugin->completion_get_string)(__completion, __property)\n#define weechat_completion_list_add(__completion, __word,               \\\n                                    __nick_completion, __where)         \\\n    (weechat_plugin->completion_list_add)(__completion, __word,         \\\n                                          __nick_completion, __where)\n#define weechat_completion_free(__completion)                           \\\n    (weechat_plugin->completion_free)(__completion)\n\n/* network */\n#define weechat_network_pass_proxy(__proxy, __sock, __address, __port)  \\\n    (weechat_plugin->network_pass_proxy)(__proxy, __sock, __address,    \\\n                                         __port)\n#define weechat_network_connect_to(__proxy, __address,                  \\\n                                   __address_length)                    \\\n    (weechat_plugin->network_connect_to)(__proxy, __address,            \\\n                                         __address_length)\n\n/* infos */\n#define weechat_info_get(__info_name, __arguments)                      \\\n    (weechat_plugin->info_get)(weechat_plugin, __info_name,             \\\n                               __arguments)\n#define weechat_info_get_hashtable(__info_name, __hashtable)            \\\n    (weechat_plugin->info_get_hashtable)(weechat_plugin, __info_name,   \\\n                                         __hashtable)\n\n/* infolists */\n#define weechat_infolist_new()                                          \\\n    (weechat_plugin->infolist_new)(weechat_plugin)\n#define weechat_infolist_new_item(__list)                               \\\n    (weechat_plugin->infolist_new_item)(__list)\n#define weechat_infolist_new_var_integer(__item, __name, __value)       \\\n    (weechat_plugin->infolist_new_var_integer)(__item, __name, __value)\n#define weechat_infolist_new_var_string(__item, __name, __value)        \\\n    (weechat_plugin->infolist_new_var_string)(__item, __name, __value)\n#define weechat_infolist_new_var_pointer(__item, __name, __pointer)     \\\n    (weechat_plugin->infolist_new_var_pointer)(__item, __name,          \\\n                                               __pointer)\n#define weechat_infolist_new_var_buffer(__item, __name, __buffer,       \\\n                                        __size)                         \\\n    (weechat_plugin->infolist_new_var_buffer)(__item, __name, __buffer, \\\n                                              __size)\n#define weechat_infolist_new_var_time(__item, __name, __time)           \\\n    (weechat_plugin->infolist_new_var_time)(__item, __name, __time)\n#define weechat_infolist_search_var(__list, __name)                     \\\n    (weechat_plugin->infolist_search_var)(__list, __name)\n#define weechat_infolist_get(__infolist_name, __pointer, __arguments)   \\\n    (weechat_plugin->infolist_get)(weechat_plugin, __infolist_name,     \\\n                                   __pointer, __arguments)\n#define weechat_infolist_next(__list)                                   \\\n    (weechat_plugin->infolist_next)(__list)\n#define weechat_infolist_prev(__list)                                   \\\n    (weechat_plugin->infolist_prev)(__list)\n#define weechat_infolist_reset_item_cursor(__list)                      \\\n    (weechat_plugin->infolist_reset_item_cursor)(__list)\n#define weechat_infolist_fields(__list)                                 \\\n    (weechat_plugin->infolist_fields)(__list)\n#define weechat_infolist_integer(__item, __var)                         \\\n    (weechat_plugin->infolist_integer)(__item, __var)\n#define weechat_infolist_string(__item, __var)                          \\\n    (weechat_plugin->infolist_string)(__item, __var)\n#define weechat_infolist_pointer(__item, __var)                         \\\n    (weechat_plugin->infolist_pointer)(__item, __var)\n#define weechat_infolist_buffer(__item, __var, __size)                  \\\n    (weechat_plugin->infolist_buffer)(__item, __var, __size)\n#define weechat_infolist_time(__item, __var)                            \\\n    (weechat_plugin->infolist_time)(__item, __var)\n#define weechat_infolist_free(__list)                                   \\\n    (weechat_plugin->infolist_free)(__list)\n\n/* hdata */\n#define weechat_hdata_new(__hdata_name, __var_prev, __var_next,         \\\n                          __create_allowed, __delete_allowed,           \\\n                          __callback_update, __callback_update_data)    \\\n    (weechat_plugin->hdata_new)(weechat_plugin, __hdata_name,           \\\n                                __var_prev, __var_next,                 \\\n                                __create_allowed, __delete_allowed,     \\\n                                __callback_update,                      \\\n                                __callback_update_data)\n#define weechat_hdata_new_var(__hdata, __name, __offset, __type,        \\\n                              __update_allowed, __array_size,           \\\n                              __hdata_name)                             \\\n    (weechat_plugin->hdata_new_var)(__hdata, __name, __offset, __type,  \\\n                                    __update_allowed, __array_size,     \\\n                                    __hdata_name)\n#define WEECHAT_HDATA_VAR(__struct, __name, __type, __update_allowed,   \\\n                          __array_size, __hdata_name)                   \\\n    weechat_hdata_new_var (hdata, #__name, offsetof (__struct, __name), \\\n                           WEECHAT_HDATA_##__type, __update_allowed,    \\\n                           __array_size, __hdata_name)\n#define weechat_hdata_new_list(__hdata, __name, __pointer, __flags)     \\\n    (weechat_plugin->hdata_new_list)(__hdata, __name, __pointer,        \\\n                                     __flags)\n#define WEECHAT_HDATA_LIST(__name, __flags)                             \\\n    weechat_hdata_new_list (hdata, #__name, &(__name), __flags);\n#define weechat_hdata_get(__hdata_name)                                 \\\n    (weechat_plugin->hdata_get)(weechat_plugin, __hdata_name)\n#define weechat_hdata_get_var_offset(__hdata, __name)                   \\\n    (weechat_plugin->hdata_get_var_offset)(__hdata, __name)\n#define weechat_hdata_get_var_type(__hdata, __name)                     \\\n    (weechat_plugin->hdata_get_var_type)(__hdata, __name)\n#define weechat_hdata_get_var_type_string(__hdata, __name)              \\\n    (weechat_plugin->hdata_get_var_type_string)(__hdata, __name)\n#define weechat_hdata_get_var_array_size(__hdata, __pointer, __name)    \\\n    (weechat_plugin->hdata_get_var_array_size)(__hdata, __pointer,      \\\n                                               __name)\n#define weechat_hdata_get_var_array_size_string(__hdata, __pointer,     \\\n                                                __name)                 \\\n    (weechat_plugin->hdata_get_var_array_size_string)(__hdata,          \\\n                                                      __pointer,        \\\n                                                      __name)\n#define weechat_hdata_get_var_hdata(__hdata, __name)                    \\\n    (weechat_plugin->hdata_get_var_hdata)(__hdata, __name)\n#define weechat_hdata_get_var(__hdata, __pointer, __name)               \\\n    (weechat_plugin->hdata_get_var)(__hdata, __pointer, __name)\n#define weechat_hdata_get_var_at_offset(__hdata, __pointer, __offset)   \\\n    (weechat_plugin->hdata_get_var_at_offset)(__hdata, __pointer,       \\\n                                              __offset)\n#define weechat_hdata_get_list(__hdata, __name)                         \\\n    (weechat_plugin->hdata_get_list)(__hdata, __name)\n#define weechat_hdata_check_pointer(__hdata, __list, __pointer)         \\\n    (weechat_plugin->hdata_check_pointer)(__hdata, __list, __pointer)\n#define weechat_hdata_move(__hdata, __pointer, __count)                 \\\n    (weechat_plugin->hdata_move)(__hdata, __pointer, __count)\n#define weechat_hdata_search(__hdata, __pointer, __search, __move)      \\\n    (weechat_plugin->hdata_search)(__hdata, __pointer, __search,        \\\n                                   __move)\n#define weechat_hdata_char(__hdata, __pointer, __name)                  \\\n    (weechat_plugin->hdata_char)(__hdata, __pointer, __name)\n#define weechat_hdata_integer(__hdata, __pointer, __name)               \\\n    (weechat_plugin->hdata_integer)(__hdata, __pointer, __name)\n#define weechat_hdata_long(__hdata, __pointer, __name)                  \\\n    (weechat_plugin->hdata_long)(__hdata, __pointer, __name)\n#define weechat_hdata_string(__hdata, __pointer, __name)                \\\n    (weechat_plugin->hdata_string)(__hdata, __pointer, __name)\n#define weechat_hdata_pointer(__hdata, __pointer, __name)               \\\n    (weechat_plugin->hdata_pointer)(__hdata, __pointer, __name)\n#define weechat_hdata_time(__hdata, __pointer, __name)                  \\\n    (weechat_plugin->hdata_time)(__hdata, __pointer, __name)\n#define weechat_hdata_hashtable(__hdata, __pointer, __name)             \\\n    (weechat_plugin->hdata_hashtable)(__hdata, __pointer, __name)\n#define weechat_hdata_compare(__hdata, __pointer1, __pointer2, __name,  \\\n                              __case_sensitive)                         \\\n    (weechat_plugin->hdata_compare)(__hdata, __pointer1, __pointer2,    \\\n                                    __name, __case_sensitive)\n#define weechat_hdata_set(__hdata, __pointer, __name, __value)          \\\n    (weechat_plugin->hdata_set)(__hdata, __pointer, __name, __value)\n#define weechat_hdata_update(__hdata, __pointer, __hashtable)           \\\n    (weechat_plugin->hdata_update)(__hdata, __pointer, __hashtable)\n#define weechat_hdata_get_string(__hdata, __property)                   \\\n    (weechat_plugin->hdata_get_string)(__hdata, __property)\n\n/* upgrade */\n#define weechat_upgrade_new(__filename, __callback_read,                \\\n                            __callback_read_pointer,                    \\\n                            __callback_read_data)                       \\\n    (weechat_plugin->upgrade_new)(__filename, __callback_read,          \\\n                                  __callback_read_pointer,              \\\n                                  __callback_read_data)\n#define weechat_upgrade_write_object(__upgrade_file, __object_id,       \\\n                                     __infolist)                        \\\n    (weechat_plugin->upgrade_write_object)(__upgrade_file, __object_id, \\\n                                           __infolist)\n#define weechat_upgrade_read(__upgrade_file)                            \\\n    (weechat_plugin->upgrade_read)(__upgrade_file)\n#define weechat_upgrade_close(__upgrade_file)                           \\\n    (weechat_plugin->upgrade_close)(__upgrade_file)\n\n#ifdef __cplusplus\n}\n#endif /* __cplusplus */\n\n#endif /* WEECHAT_WEECHAT_PLUGIN_H */\n",
        "/tmp/vanessa/spack-stage/spack-stage-weechat-2.9-6t75c6wcuy372mx22zcrjpzcya3zeyfl/spack-src/src/plugins/plugin.c": "/*\n * plugin.c - WeeChat plugins management (load/unload dynamic C libraries)\n *\n * Copyright (C) 2003-2020 S\u00e9bastien Helleu <flashcode@flashtux.org>\n *\n * This file is part of WeeChat, the extensible chat client.\n *\n * WeeChat is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 3 of the License, or\n * (at your option) any later version.\n *\n * WeeChat is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with WeeChat.  If not, see <https://www.gnu.org/licenses/>.\n */\n\n#ifdef HAVE_CONFIG_H\n#include \"config.h\"\n#endif\n\n#include <errno.h>\n#include <stdlib.h>\n#include <stddef.h>\n#include <unistd.h>\n#include <libgen.h>\n#include <stdarg.h>\n#include <string.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <dirent.h>\n#include <dlfcn.h>\n\n#include \"../core/weechat.h\"\n#include \"../core/wee-arraylist.h\"\n#include \"../core/wee-config.h\"\n#include \"../core/wee-eval.h\"\n#include \"../core/wee-hashtable.h\"\n#include \"../core/wee-hdata.h\"\n#include \"../core/wee-hook.h\"\n#include \"../core/wee-infolist.h\"\n#include \"../core/wee-list.h\"\n#include \"../core/wee-log.h\"\n#include \"../core/wee-network.h\"\n#include \"../core/wee-string.h\"\n#include \"../core/wee-upgrade-file.h\"\n#include \"../core/wee-utf8.h\"\n#include \"../core/wee-util.h\"\n#include \"../gui/gui-bar.h\"\n#include \"../gui/gui-bar-item.h\"\n#include \"../gui/gui-buffer.h\"\n#include \"../gui/gui-chat.h\"\n#include \"../gui/gui-color.h\"\n#include \"../gui/gui-completion.h\"\n#include \"../gui/gui-key.h\"\n#include \"../gui/gui-nicklist.h\"\n#include \"../gui/gui-window.h\"\n#include \"plugin.h\"\n#include \"plugin-api.h\"\n#include \"plugin-config.h\"\n\n\nint plugin_quiet = 0;\nstruct t_weechat_plugin *weechat_plugins = NULL;\nstruct t_weechat_plugin *last_weechat_plugin = NULL;\n\n/* structure used to give arguments to callback of ... */\nstruct t_plugin_args\n{\n    int argc;\n    char **argv;\n};\n\nint plugin_autoload_count = 0;         /* number of items in autoload_array */\nchar **plugin_autoload_array = NULL;   /* autoload array, this is split of  */\n                                       /* option \"weechat.plugin.autoload\"  */\n\n\nvoid plugin_remove (struct t_weechat_plugin *plugin);\n\n\n/*\n * Checks if a plugin pointer is valid.\n *\n * Returns:\n *   1: plugin exists\n *   0: plugin does not exist\n */\n\nint\nplugin_valid (struct t_weechat_plugin *plugin)\n{\n    struct t_weechat_plugin *ptr_plugin;\n\n    if (!plugin)\n        return 0;\n\n    for (ptr_plugin = weechat_plugins; ptr_plugin;\n         ptr_plugin = ptr_plugin->next_plugin)\n    {\n        if (ptr_plugin == plugin)\n            return 1;\n    }\n\n    /* plugin not found */\n    return 0;\n}\n\n/*\n * Searches for a plugin by name.\n *\n * Returns pointer to plugin found, NULL if not found.\n */\n\nstruct t_weechat_plugin *\nplugin_search (const char *name)\n{\n    struct t_weechat_plugin *ptr_plugin;\n\n    if (!name)\n        return NULL;\n\n    for (ptr_plugin = weechat_plugins; ptr_plugin;\n         ptr_plugin = ptr_plugin->next_plugin)\n    {\n        if (string_strcasecmp (ptr_plugin->name, name) == 0)\n            return ptr_plugin;\n    }\n\n    /* plugin not found */\n    return NULL;\n}\n\n/*\n * Gets name of a plugin with a pointer.\n */\n\nconst char *\nplugin_get_name (struct t_weechat_plugin *plugin)\n{\n    static char *plugin_core = PLUGIN_CORE;\n\n    return (plugin) ? plugin->name : plugin_core;\n}\n\n/*\n * Checks if extension of filename is allowed by option\n * \"weechat.plugin.extension\".\n *\n * Returns:\n *   1: extension allowed\n *   0: extension not allowed\n */\n\nint\nplugin_check_extension_allowed (const char *filename)\n{\n    int i, length, length_ext;\n\n    /* extension allowed if no extension is defined */\n    if (!config_plugin_extensions)\n        return 1;\n\n    length = strlen (filename);\n    for (i = 0; i < config_num_plugin_extensions; i++)\n    {\n        length_ext = strlen (config_plugin_extensions[i]);\n        if (length >= length_ext)\n        {\n            if (string_strcasecmp (filename + length - length_ext,\n                                   config_plugin_extensions[i]) == 0)\n            {\n                /* extension allowed */\n                return 1;\n            }\n        }\n    }\n\n    /* extension not allowed */\n    return 0;\n}\n\n/*\n * Checks if a plugin can be autoloaded.\n *\n * List of autoloaded plugins is set in option \"weechat.plugin.autoload\".\n *\n * Returns:\n *   1: plugin can be autoloaded\n *   0: plugin can not be autoloaded\n */\n\nint\nplugin_check_autoload (const char *filename)\n{\n    int i, length, length_ext, match;\n    char *full_name, *ptr_base_name, *base_name, *plugin_name;\n\n    /* by default we can auto load all plugins */\n    if (!plugin_autoload_array)\n        return 1;\n\n    full_name = strdup (filename);\n    if (!full_name)\n        return 0;\n\n    /* get short name of plugin (filename without extension) */\n    plugin_name = NULL;\n    ptr_base_name = basename (full_name);\n    if (!ptr_base_name)\n    {\n        free (full_name);\n        return 1;\n    }\n\n    base_name = strdup (ptr_base_name);\n    if (!base_name)\n    {\n        free (full_name);\n        return 1;\n    }\n\n    free (full_name);\n\n    if (config_plugin_extensions)\n    {\n        length = strlen (base_name);\n        for (i = 0; i < config_num_plugin_extensions; i++)\n        {\n            length_ext = strlen (config_plugin_extensions[i]);\n            if (length >= length_ext)\n            {\n                if (string_strcasecmp (base_name + length - length_ext,\n                                       config_plugin_extensions[i]) == 0)\n                {\n                    plugin_name = string_strndup (base_name, length - length_ext);\n                    break;\n                }\n            }\n        }\n    }\n    else\n    {\n        plugin_name = strdup (base_name);\n    }\n\n    free (base_name);\n\n    if (!plugin_name)\n        return 1;\n\n    match = string_match_list (plugin_name,\n                               (const char **)plugin_autoload_array,\n                               0);\n\n    free (plugin_name);\n\n    return match;\n}\n\n/*\n * Returns arguments for plugins (only the relevant arguments for plugins,\n * arguments for WeeChat core not returned).\n *\n * Note: plugin_argv must be freed after use.\n */\n\nvoid\nplugin_get_args (struct t_weechat_plugin *plugin,\n                 int argc, char **argv,\n                 int *plugin_argc, char ***plugin_argv,\n                 int *no_connect)\n{\n    int i, temp_argc, length_plugin_name;\n    char **temp_argv;\n\n    temp_argc = 0;\n    temp_argv = NULL;\n\n    *no_connect = 0;\n\n    length_plugin_name = strlen (plugin->name);\n\n    if (argc > 0)\n    {\n        temp_argv = malloc ((argc + 1) * sizeof (*temp_argv));\n        if (temp_argv)\n        {\n            for (i = 0; i < argc; i++)\n            {\n                if ((strcmp (argv[i], \"-a\") == 0)\n                    || (strcmp (argv[i], \"--no-connect\") == 0))\n                {\n                    *no_connect = 1;\n                }\n                else if ((strcmp (argv[i], \"-s\") == 0)\n                         || (strcmp (argv[i], \"--no-script\") == 0)\n                         || ((strncmp (argv[i], plugin->name,\n                                       length_plugin_name) == 0)\n                             && (argv[i][length_plugin_name] == ':')))\n                {\n                    temp_argv[temp_argc++] = argv[i];\n                }\n            }\n            if (temp_argc == 0)\n            {\n                free (temp_argv);\n                temp_argv = NULL;\n            }\n            else\n                temp_argv[temp_argc] = NULL;\n        }\n    }\n\n    *plugin_argc = temp_argc;\n    *plugin_argv = temp_argv;\n}\n\n/*\n * Initializes a plugin by calling its init() function.\n *\n * Returns:\n *   1: OK\n *   0: error\n */\n\nint\nplugin_call_init (struct t_weechat_plugin *plugin, int argc, char **argv)\n{\n    t_weechat_init_func *init_func;\n    int plugin_argc, no_connect, rc, old_auto_connect;\n    char **plugin_argv;\n\n    if (plugin->initialized)\n        return 1;\n\n    /* look for plugin init function */\n    init_func = dlsym (plugin->handle, \"weechat_plugin_init\");\n    if (!init_func)\n        return 0;\n\n    /* get arguments for the plugin */\n    plugin_get_args (plugin, argc, argv,\n                     &plugin_argc, &plugin_argv, &no_connect);\n\n    old_auto_connect = weechat_auto_connect;\n    weechat_auto_connect = (no_connect) ? 0 : 1;\n\n    /* init plugin */\n    if (weechat_debug_core >= 1)\n    {\n        gui_chat_printf (NULL,\n                         _(\"Initializing plugin \\\"%s\\\" (priority: %d)\"),\n                         plugin->name,\n                         plugin->priority);\n    }\n    rc = ((t_weechat_init_func *)init_func) (plugin,\n                                             plugin_argc, plugin_argv);\n    if (rc == WEECHAT_RC_OK)\n    {\n        plugin->initialized = 1;\n    }\n    else\n    {\n        gui_chat_printf (NULL,\n                         _(\"%sError: unable to initialize plugin \"\n                           \"\\\"%s\\\"\"),\n                         gui_chat_prefix[GUI_CHAT_PREFIX_ERROR],\n                         plugin->filename);\n    }\n\n    weechat_auto_connect = old_auto_connect;\n\n    if (plugin_argv)\n        free (plugin_argv);\n\n    return (rc == WEECHAT_RC_OK) ? 1 : 0;\n}\n\n/*\n * Loads a WeeChat plugin (a dynamic library).\n *\n * If init_plugin == 1, then the init() function in plugin is called\n * (with argc/argv), otherwise the plugin is just loaded but not initialized.\n *\n * Returns a pointer to new WeeChat plugin, NULL if error.\n */\n\nstruct t_weechat_plugin *\nplugin_load (const char *filename, int init_plugin, int argc, char **argv)\n{\n    void *handle;\n    char *name, *api_version, *author, *description, *version;\n    char *license, *charset;\n    t_weechat_init_func *init_func;\n    int *priority;\n    struct t_weechat_plugin *new_plugin;\n    struct t_config_option *ptr_option;\n\n    if (!filename)\n        return NULL;\n\n    /*\n     * if plugin must not be autoloaded, then return immediately\n     * Note: the \"plugin_autoload_array\" variable is set only during auto-load,\n     * ie when WeeChat is starting or when doing /plugin autoload\n     */\n    if (plugin_autoload_array && !plugin_check_autoload (filename))\n        return NULL;\n\n    handle = dlopen (filename, RTLD_GLOBAL | RTLD_NOW);\n    if (!handle)\n    {\n        gui_chat_printf (NULL,\n                         _(\"%sError: unable to load plugin \\\"%s\\\": %s\"),\n                         gui_chat_prefix[GUI_CHAT_PREFIX_ERROR],\n                         filename, dlerror ());\n        gui_chat_printf (NULL,\n                         _(\"%sIf you're trying to load a script and not a C \"\n                           \"plugin, try command to load scripts (/perl, \"\n                           \"/python, ...)\"),\n                         gui_chat_prefix[GUI_CHAT_PREFIX_ERROR]);\n        return NULL;\n    }\n\n    /* look for plugin name */\n    name = dlsym (handle, \"weechat_plugin_name\");\n    if (!name)\n    {\n        gui_chat_printf (NULL,\n                         _(\"%sError: symbol \\\"%s\\\" not found in \"\n                           \"plugin \\\"%s\\\", failed to load\"),\n                         gui_chat_prefix[GUI_CHAT_PREFIX_ERROR],\n                         \"weechat_plugin_name\",\n                         filename);\n        dlclose (handle);\n        return NULL;\n    }\n\n    /* look for API version */\n    api_version = dlsym (handle, \"weechat_plugin_api_version\");\n    if (!api_version)\n    {\n        gui_chat_printf (NULL,\n                         _(\"%sError: symbol \\\"%s\\\" not found in \"\n                           \"plugin \\\"%s\\\", failed to load\"),\n                         gui_chat_prefix[GUI_CHAT_PREFIX_ERROR],\n                         \"weechat_plugin_api_version\",\n                         filename);\n        gui_chat_printf (NULL,\n                         _(\"%sIf plugin \\\"%s\\\" is old/obsolete, you can \"\n                           \"delete this file.\"),\n                         gui_chat_prefix[GUI_CHAT_PREFIX_ERROR],\n                         name);\n        dlclose (handle);\n        return NULL;\n    }\n    if (strcmp (api_version, WEECHAT_PLUGIN_API_VERSION) != 0)\n    {\n        gui_chat_printf (NULL,\n                         _(\"%sError: API mismatch for plugin \\\"%s\\\" (current \"\n                           \"API: \\\"%s\\\", plugin API: \\\"%s\\\"), failed to load\"),\n                         gui_chat_prefix[GUI_CHAT_PREFIX_ERROR],\n                         filename,\n                         WEECHAT_PLUGIN_API_VERSION,\n                         api_version);\n        gui_chat_printf (NULL,\n                         _(\"%sIf plugin \\\"%s\\\" is old/obsolete, you can \"\n                           \"delete this file.\"),\n                         gui_chat_prefix[GUI_CHAT_PREFIX_ERROR],\n                         name);\n        dlclose (handle);\n        return NULL;\n    }\n\n    /* check for plugin with same name */\n    if (plugin_search (name))\n    {\n        gui_chat_printf (NULL,\n                         _(\"%sError: unable to load plugin \\\"%s\\\": a plugin \"\n                           \"with same name already exists\"),\n                         gui_chat_prefix[GUI_CHAT_PREFIX_ERROR],\n                         filename);\n        dlclose (handle);\n        return NULL;\n    }\n\n    /* look for plugin description */\n    description = dlsym (handle, \"weechat_plugin_description\");\n    if (!description)\n    {\n        gui_chat_printf (NULL,\n                         _(\"%sError: symbol \\\"%s\\\" not found \"\n                           \"in plugin \\\"%s\\\", failed to load\"),\n                         gui_chat_prefix[GUI_CHAT_PREFIX_ERROR],\n                         \"weechat_plugin_description\",\n                         filename);\n        dlclose (handle);\n        return NULL;\n    }\n\n    /* look for plugin author */\n    author = dlsym (handle, \"weechat_plugin_author\");\n    if (!author)\n    {\n        gui_chat_printf (NULL,\n                         _(\"%sError: symbol \\\"%s\\\" not found \"\n                           \"in plugin \\\"%s\\\", failed to load\"),\n                         gui_chat_prefix[GUI_CHAT_PREFIX_ERROR],\n                         \"weechat_plugin_author\",\n                         filename);\n        dlclose (handle);\n        return NULL;\n    }\n\n    /* look for plugin version */\n    version = dlsym (handle, \"weechat_plugin_version\");\n    if (!version)\n    {\n        gui_chat_printf (NULL,\n                         _(\"%sError: symbol \\\"%s\\\" not found in \"\n                           \"plugin \\\"%s\\\", failed to load\"),\n                         gui_chat_prefix[GUI_CHAT_PREFIX_ERROR],\n                         \"weechat_plugin_version\",\n                         filename);\n        dlclose (handle);\n        return NULL;\n    }\n\n    /* look for plugin license */\n    license = dlsym (handle, \"weechat_plugin_license\");\n    if (!license)\n    {\n        gui_chat_printf (NULL,\n                         _(\"%sError: symbol \\\"%s\\\" not found in \"\n                           \"plugin \\\"%s\\\", failed to load\"),\n                         gui_chat_prefix[GUI_CHAT_PREFIX_ERROR],\n                         \"weechat_plugin_license\",\n                         filename);\n        dlclose (handle);\n        return NULL;\n    }\n\n    /* look for plugin charset (optional, default is UTF-8) */\n    charset = dlsym (handle, \"weechat_plugin_charset\");\n\n    /* look for plugin init function */\n    init_func = dlsym (handle, \"weechat_plugin_init\");\n    if (!init_func)\n    {\n        gui_chat_printf (NULL,\n                         _(\"%sError: function \\\"%s\\\" not \"\n                           \"found in plugin \\\"%s\\\", failed to load\"),\n                         gui_chat_prefix[GUI_CHAT_PREFIX_ERROR],\n                         \"weechat_plugin_init\",\n                         filename);\n        dlclose (handle);\n        return NULL;\n    }\n\n    /*\n     * look for plugin priority: it is used to initialize plugins in\n     * appropriate order: the important plugins that don't depend on other\n     * plugins are initialized first\n     */\n    priority = dlsym (handle, \"weechat_plugin_priority\");\n\n    /* create new plugin */\n    new_plugin = malloc (sizeof (*new_plugin));\n    if (new_plugin)\n    {\n        /* variables */\n        new_plugin->filename = strdup (filename);\n        new_plugin->handle = handle;\n        new_plugin->name = strdup (name);\n        new_plugin->description = strdup (description);\n        new_plugin->author = strdup (author);\n        new_plugin->version = strdup (version);\n        new_plugin->license = strdup (license);\n        new_plugin->charset = (charset) ? strdup (charset) : NULL;\n        new_plugin->priority = (priority) ?\n            *priority : PLUGIN_PRIORITY_DEFAULT;\n        new_plugin->initialized = 0;\n        ptr_option = config_weechat_debug_get (name);\n        new_plugin->debug = (ptr_option) ? CONFIG_INTEGER(ptr_option) : 0;\n        new_plugin->upgrading = weechat_upgrading;\n        new_plugin->variables = hashtable_new (\n            32,\n            WEECHAT_HASHTABLE_STRING, WEECHAT_HASHTABLE_STRING,\n            NULL, NULL);\n\n        /* functions */\n        new_plugin->plugin_get_name = &plugin_get_name;\n\n        new_plugin->charset_set = &plugin_api_charset_set;\n        new_plugin->iconv_to_internal = &string_iconv_to_internal;\n        new_plugin->iconv_from_internal = &string_iconv_from_internal;\n        new_plugin->gettext = &plugin_api_gettext;\n        new_plugin->ngettext = &plugin_api_ngettext;\n        new_plugin->strndup = &string_strndup;\n        new_plugin->string_tolower = &string_tolower;\n        new_plugin->string_toupper = &string_toupper;\n        new_plugin->strcasecmp = &string_strcasecmp;\n        new_plugin->strcasecmp_range = &string_strcasecmp_range;\n        new_plugin->strncasecmp = &string_strncasecmp;\n        new_plugin->strncasecmp_range = &string_strncasecmp_range;\n        new_plugin->strcmp_ignore_chars = &string_strcmp_ignore_chars;\n        new_plugin->strcasestr = &string_strcasestr;\n        new_plugin->strlen_screen = &gui_chat_strlen_screen;\n        new_plugin->string_match = &string_match;\n        new_plugin->string_match_list = &string_match_list;\n        new_plugin->string_replace = &string_replace;\n        new_plugin->string_expand_home = &string_expand_home;\n        new_plugin->string_eval_path_home = &string_eval_path_home;\n        new_plugin->string_remove_quotes = &string_remove_quotes;\n        new_plugin->string_strip = &string_strip;\n        new_plugin->string_convert_escaped_chars = &string_convert_escaped_chars;\n        new_plugin->string_mask_to_regex = &string_mask_to_regex;\n        new_plugin->string_regex_flags = &string_regex_flags;\n        new_plugin->string_regcomp = &string_regcomp;\n        new_plugin->string_has_highlight = &string_has_highlight;\n        new_plugin->string_has_highlight_regex = &string_has_highlight_regex;\n        new_plugin->string_replace_regex = &string_replace_regex;\n        new_plugin->string_split = &string_split;\n        new_plugin->string_split_shell = &string_split_shell;\n        new_plugin->string_free_split = &string_free_split;\n        new_plugin->string_build_with_split_string = &string_build_with_split_string;\n        new_plugin->string_split_command = &string_split_command;\n        new_plugin->string_free_split_command = &string_free_split_command;\n        new_plugin->string_format_size = &string_format_size;\n        new_plugin->string_remove_color = &gui_color_decode;\n        new_plugin->string_base_encode = &string_base_encode;\n        new_plugin->string_base_decode = &string_base_decode;\n        new_plugin->string_hex_dump = &string_hex_dump;\n        new_plugin->string_is_command_char = &string_is_command_char;\n        new_plugin->string_input_for_buffer = &string_input_for_buffer;\n        new_plugin->string_eval_expression = &eval_expression;\n        new_plugin->string_dyn_alloc = &string_dyn_alloc;\n        new_plugin->string_dyn_copy = &string_dyn_copy;\n        new_plugin->string_dyn_concat = &string_dyn_concat;\n        new_plugin->string_dyn_free = &string_dyn_free;\n\n        new_plugin->utf8_has_8bits = &utf8_has_8bits;\n        new_plugin->utf8_is_valid = &utf8_is_valid;\n        new_plugin->utf8_normalize = &utf8_normalize;\n        new_plugin->utf8_prev_char = &utf8_prev_char;\n        new_plugin->utf8_next_char = &utf8_next_char;\n        new_plugin->utf8_char_int = &utf8_char_int;\n        new_plugin->utf8_char_size = &utf8_char_size;\n        new_plugin->utf8_strlen = &utf8_strlen;\n        new_plugin->utf8_strnlen = &utf8_strnlen;\n        new_plugin->utf8_strlen_screen = &utf8_strlen_screen;\n        new_plugin->utf8_charcmp = &utf8_charcmp;\n        new_plugin->utf8_charcasecmp = &utf8_charcasecmp;\n        new_plugin->utf8_char_size_screen = &utf8_char_size_screen;\n        new_plugin->utf8_add_offset = &utf8_add_offset;\n        new_plugin->utf8_real_pos = &utf8_real_pos;\n        new_plugin->utf8_pos = &utf8_pos;\n        new_plugin->utf8_strndup = &utf8_strndup;\n\n        new_plugin->crypto_hash = &plugin_api_crypto_hash;\n        new_plugin->crypto_hash_pbkdf2 = &plugin_api_crypto_hash_pbkdf2;\n\n        new_plugin->mkdir_home = &util_mkdir_home;\n        new_plugin->mkdir = &util_mkdir;\n        new_plugin->mkdir_parents = &util_mkdir_parents;\n        new_plugin->exec_on_files = &util_exec_on_files;\n        new_plugin->file_get_content = &util_file_get_content;\n\n        new_plugin->util_timeval_cmp = &util_timeval_cmp;\n        new_plugin->util_timeval_diff = &util_timeval_diff;\n        new_plugin->util_timeval_add = &util_timeval_add;\n        new_plugin->util_get_time_string = &util_get_time_string;\n        new_plugin->util_version_number = &util_version_number;\n\n        new_plugin->list_new = &weelist_new;\n        new_plugin->list_add = &weelist_add;\n        new_plugin->list_search = &weelist_search;\n        new_plugin->list_search_pos = &weelist_search_pos;\n        new_plugin->list_casesearch = &weelist_casesearch;\n        new_plugin->list_casesearch_pos = &weelist_casesearch_pos;\n        new_plugin->list_get = &weelist_get;\n        new_plugin->list_set = &weelist_set;\n        new_plugin->list_next = &weelist_next;\n        new_plugin->list_prev = &weelist_prev;\n        new_plugin->list_string = &weelist_string;\n        new_plugin->list_user_data = &weelist_user_data;\n        new_plugin->list_size = &weelist_size;\n        new_plugin->list_remove = &weelist_remove;\n        new_plugin->list_remove_all = &weelist_remove_all;\n        new_plugin->list_free = &weelist_free;\n\n        new_plugin->arraylist_new = arraylist_new;\n        new_plugin->arraylist_size = arraylist_size;\n        new_plugin->arraylist_get = arraylist_get;\n        new_plugin->arraylist_search = arraylist_search;\n        new_plugin->arraylist_insert = arraylist_insert;\n        new_plugin->arraylist_add = arraylist_add;\n        new_plugin->arraylist_remove = arraylist_remove;\n        new_plugin->arraylist_clear = arraylist_clear;\n        new_plugin->arraylist_free = arraylist_free;\n\n        new_plugin->hashtable_new = &hashtable_new;\n        new_plugin->hashtable_set_with_size = &hashtable_set_with_size;\n        new_plugin->hashtable_set = &hashtable_set;\n        new_plugin->hashtable_get = &hashtable_get;\n        new_plugin->hashtable_has_key = &hashtable_has_key;\n        new_plugin->hashtable_map = &hashtable_map;\n        new_plugin->hashtable_map_string = &hashtable_map_string;\n        new_plugin->hashtable_dup = &hashtable_dup;\n        new_plugin->hashtable_get_integer = &hashtable_get_integer;\n        new_plugin->hashtable_get_string = &hashtable_get_string;\n        new_plugin->hashtable_set_pointer = &hashtable_set_pointer;\n        new_plugin->hashtable_add_to_infolist = &hashtable_add_to_infolist;\n        new_plugin->hashtable_add_from_infolist = &hashtable_add_from_infolist;\n        new_plugin->hashtable_remove = &hashtable_remove;\n        new_plugin->hashtable_remove_all = &hashtable_remove_all;\n        new_plugin->hashtable_free = &hashtable_free;\n\n        new_plugin->config_new = &config_file_new;\n        new_plugin->config_new_section = &config_file_new_section;\n        new_plugin->config_search_section = &config_file_search_section;\n        new_plugin->config_new_option = &config_file_new_option;\n        new_plugin->config_search_option = &config_file_search_option;\n        new_plugin->config_search_section_option = &config_file_search_section_option;\n        new_plugin->config_search_with_string = &config_file_search_with_string;\n        new_plugin->config_string_to_boolean = &config_file_string_to_boolean;\n        new_plugin->config_option_reset = &config_file_option_reset;\n        new_plugin->config_option_set = &config_file_option_set;\n        new_plugin->config_option_set_null = &config_file_option_set_null;\n        new_plugin->config_option_unset = &config_file_option_unset;\n        new_plugin->config_option_rename = &config_file_option_rename;\n        new_plugin->config_option_get_string = &config_file_option_get_string;\n        new_plugin->config_option_get_pointer = &config_file_option_get_pointer;\n        new_plugin->config_option_is_null = &config_file_option_is_null;\n        new_plugin->config_option_default_is_null = &config_file_option_default_is_null;\n        new_plugin->config_boolean = &config_file_option_boolean;\n        new_plugin->config_boolean_default = &config_file_option_boolean_default;\n        new_plugin->config_integer = &config_file_option_integer;\n        new_plugin->config_integer_default = &config_file_option_integer_default;\n        new_plugin->config_string = &config_file_option_string;\n        new_plugin->config_string_default = &config_file_option_string_default;\n        new_plugin->config_color = &config_file_option_color;\n        new_plugin->config_color_default = &config_file_option_color_default;\n        new_plugin->config_write_option = &config_file_write_option;\n        new_plugin->config_write_line = &config_file_write_line;\n        new_plugin->config_write = &config_file_write;\n        new_plugin->config_read = &config_file_read;\n        new_plugin->config_reload = &config_file_reload;\n        new_plugin->config_option_free = &plugin_api_config_file_option_free;\n        new_plugin->config_section_free_options = &config_file_section_free_options;\n        new_plugin->config_section_free = &config_file_section_free;\n        new_plugin->config_free = &config_file_free;\n        new_plugin->config_get = &plugin_api_config_get;\n        new_plugin->config_get_plugin = &plugin_api_config_get_plugin;\n        new_plugin->config_is_set_plugin = &plugin_api_config_is_set_plugin;\n        new_plugin->config_set_plugin = &plugin_api_config_set_plugin;\n        new_plugin->config_set_desc_plugin = &plugin_api_config_set_desc_plugin;\n        new_plugin->config_unset_plugin = &plugin_api_config_unset_plugin;\n\n        new_plugin->key_bind = &gui_key_bind_plugin;\n        new_plugin->key_unbind = &gui_key_unbind_plugin;\n\n        new_plugin->prefix = &plugin_api_prefix;\n        new_plugin->color = &plugin_api_color;\n        new_plugin->printf_date_tags = &gui_chat_printf_date_tags;\n        new_plugin->printf_y = &gui_chat_printf_y;\n        new_plugin->log_printf = &log_printf;\n\n        new_plugin->hook_command = &hook_command;\n        new_plugin->hook_command_run = &hook_command_run;\n        new_plugin->hook_timer = &hook_timer;\n        new_plugin->hook_fd = &hook_fd;\n        new_plugin->hook_process = &hook_process;\n        new_plugin->hook_process_hashtable = &hook_process_hashtable;\n        new_plugin->hook_connect = &hook_connect;\n        new_plugin->hook_line = &hook_line;\n        new_plugin->hook_print = &hook_print;\n        new_plugin->hook_signal = &hook_signal;\n        new_plugin->hook_signal_send = &hook_signal_send;\n        new_plugin->hook_hsignal = &hook_hsignal;\n        new_plugin->hook_hsignal_send = &hook_hsignal_send;\n        new_plugin->hook_config = &hook_config;\n        new_plugin->hook_completion = &hook_completion;\n        new_plugin->hook_completion_get_string = &gui_completion_get_string;\n        new_plugin->hook_completion_list_add = &gui_completion_list_add;\n        new_plugin->hook_modifier = &hook_modifier;\n        new_plugin->hook_modifier_exec = &hook_modifier_exec;\n        new_plugin->hook_info = &hook_info;\n        new_plugin->hook_info_hashtable = &hook_info_hashtable;\n        new_plugin->hook_infolist = &hook_infolist;\n        new_plugin->hook_hdata = &hook_hdata;\n        new_plugin->hook_focus = &hook_focus;\n        new_plugin->hook_set = &hook_set;\n        new_plugin->unhook = &unhook;\n        new_plugin->unhook_all = &unhook_all_plugin;\n\n        new_plugin->buffer_new = &gui_buffer_new;\n        new_plugin->buffer_search = &gui_buffer_search_by_name;\n        new_plugin->buffer_search_main = &gui_buffer_search_main;\n        new_plugin->buffer_clear = &gui_buffer_clear;\n        new_plugin->buffer_close = &gui_buffer_close;\n        new_plugin->buffer_merge = &gui_buffer_merge;\n        new_plugin->buffer_unmerge = &gui_buffer_unmerge;\n        new_plugin->buffer_get_integer = &gui_buffer_get_integer;\n        new_plugin->buffer_get_string = &gui_buffer_get_string;\n        new_plugin->buffer_get_pointer = &gui_buffer_get_pointer;\n        new_plugin->buffer_set = &gui_buffer_set;\n        new_plugin->buffer_set_pointer = &gui_buffer_set_pointer;\n        new_plugin->buffer_string_replace_local_var = &gui_buffer_string_replace_local_var;\n        new_plugin->buffer_match_list = &gui_buffer_match_list;\n\n        new_plugin->window_search_with_buffer = &gui_window_search_with_buffer;\n        new_plugin->window_get_integer = &gui_window_get_integer;\n        new_plugin->window_get_string = &gui_window_get_string;\n        new_plugin->window_get_pointer = &gui_window_get_pointer;\n        new_plugin->window_set_title = &gui_window_set_title;\n\n        new_plugin->nicklist_add_group = &gui_nicklist_add_group;\n        new_plugin->nicklist_search_group = &gui_nicklist_search_group;\n        new_plugin->nicklist_add_nick = &gui_nicklist_add_nick;\n        new_plugin->nicklist_search_nick = &gui_nicklist_search_nick;\n        new_plugin->nicklist_remove_group = &gui_nicklist_remove_group;\n        new_plugin->nicklist_remove_nick = &gui_nicklist_remove_nick;\n        new_plugin->nicklist_remove_all = &gui_nicklist_remove_all;\n        new_plugin->nicklist_get_next_item = &gui_nicklist_get_next_item;\n        new_plugin->nicklist_group_get_integer = &gui_nicklist_group_get_integer;\n        new_plugin->nicklist_group_get_string = &gui_nicklist_group_get_string;\n        new_plugin->nicklist_group_get_pointer = &gui_nicklist_group_get_pointer;\n        new_plugin->nicklist_group_set = &gui_nicklist_group_set;\n        new_plugin->nicklist_nick_get_integer = &gui_nicklist_nick_get_integer;\n        new_plugin->nicklist_nick_get_string = &gui_nicklist_nick_get_string;\n        new_plugin->nicklist_nick_get_pointer = &gui_nicklist_nick_get_pointer;\n        new_plugin->nicklist_nick_set = &gui_nicklist_nick_set;\n\n        new_plugin->bar_item_search = &gui_bar_item_search;\n        new_plugin->bar_item_new = &gui_bar_item_new;\n        new_plugin->bar_item_update = &gui_bar_item_update;\n        new_plugin->bar_item_remove = &gui_bar_item_free;\n        new_plugin->bar_search = &gui_bar_search;\n        new_plugin->bar_new = &gui_bar_new;\n        new_plugin->bar_set = &gui_bar_set;\n        new_plugin->bar_update = &gui_bar_update;\n        new_plugin->bar_remove = &gui_bar_free;\n\n        new_plugin->command = &plugin_api_command;\n        new_plugin->command_options = &plugin_api_command_options;\n\n        new_plugin->completion_new = &gui_completion_new;\n        new_plugin->completion_search = &gui_completion_search;\n        new_plugin->completion_get_string = &gui_completion_get_string;\n        new_plugin->completion_list_add = &gui_completion_list_add;\n        new_plugin->completion_free = &gui_completion_free;\n\n        new_plugin->network_pass_proxy = &network_pass_proxy;\n        new_plugin->network_connect_to = &network_connect_to;\n\n        new_plugin->info_get = &hook_info_get;\n        new_plugin->info_get_hashtable = &hook_info_get_hashtable;\n\n        new_plugin->infolist_new = &infolist_new;\n        new_plugin->infolist_new_item = &infolist_new_item;\n        new_plugin->infolist_new_var_integer = &infolist_new_var_integer;\n        new_plugin->infolist_new_var_string = &infolist_new_var_string;\n        new_plugin->infolist_new_var_pointer = &infolist_new_var_pointer;\n        new_plugin->infolist_new_var_buffer = &infolist_new_var_buffer;\n        new_plugin->infolist_new_var_time = &infolist_new_var_time;\n        new_plugin->infolist_search_var = &infolist_search_var;\n        new_plugin->infolist_get = &hook_infolist_get;\n        new_plugin->infolist_next = &plugin_api_infolist_next;\n        new_plugin->infolist_prev = &plugin_api_infolist_prev;\n        new_plugin->infolist_reset_item_cursor = &plugin_api_infolist_reset_item_cursor;\n        new_plugin->infolist_fields = &plugin_api_infolist_fields;\n        new_plugin->infolist_integer = &plugin_api_infolist_integer;\n        new_plugin->infolist_string = &plugin_api_infolist_string;\n        new_plugin->infolist_pointer = &plugin_api_infolist_pointer;\n        new_plugin->infolist_buffer = &plugin_api_infolist_buffer;\n        new_plugin->infolist_time = &plugin_api_infolist_time;\n        new_plugin->infolist_free = &plugin_api_infolist_free;\n\n        new_plugin->hdata_new = &hdata_new;\n        new_plugin->hdata_new_var = &hdata_new_var;\n        new_plugin->hdata_new_list = &hdata_new_list;\n        new_plugin->hdata_get = &hook_hdata_get;\n        new_plugin->hdata_get_var_offset = &hdata_get_var_offset;\n        new_plugin->hdata_get_var_type = &hdata_get_var_type;\n        new_plugin->hdata_get_var_type_string = &hdata_get_var_type_string;\n        new_plugin->hdata_get_var_array_size = &hdata_get_var_array_size;\n        new_plugin->hdata_get_var_array_size_string = &hdata_get_var_array_size_string;\n        new_plugin->hdata_get_var_hdata = &hdata_get_var_hdata;\n        new_plugin->hdata_get_var = &hdata_get_var;\n        new_plugin->hdata_get_var_at_offset = &hdata_get_var_at_offset;\n        new_plugin->hdata_get_list = &hdata_get_list;\n        new_plugin->hdata_check_pointer = &hdata_check_pointer;\n        new_plugin->hdata_move = &hdata_move;\n        new_plugin->hdata_search = &hdata_search;\n        new_plugin->hdata_char = &hdata_char;\n        new_plugin->hdata_integer = &hdata_integer;\n        new_plugin->hdata_long = &hdata_long;\n        new_plugin->hdata_string = &hdata_string;\n        new_plugin->hdata_pointer = &hdata_pointer;\n        new_plugin->hdata_time = &hdata_time;\n        new_plugin->hdata_hashtable = &hdata_hashtable;\n        new_plugin->hdata_compare = &hdata_compare;\n        new_plugin->hdata_set = &hdata_set;\n        new_plugin->hdata_update = &hdata_update;\n        new_plugin->hdata_get_string = &hdata_get_string;\n\n        new_plugin->upgrade_new = &upgrade_file_new;\n        new_plugin->upgrade_write_object = &upgrade_file_write_object;\n        new_plugin->upgrade_read = &upgrade_file_read;\n        new_plugin->upgrade_close = &upgrade_file_close;\n\n        /* add new plugin to list */\n        new_plugin->prev_plugin = last_weechat_plugin;\n        new_plugin->next_plugin = NULL;\n        if (last_weechat_plugin)\n            last_weechat_plugin->next_plugin = new_plugin;\n        else\n            weechat_plugins = new_plugin;\n        last_weechat_plugin = new_plugin;\n\n        /*\n         * associate orphan buffers with this plugin (if asked during upgrade\n         * process)\n         */\n        gui_buffer_set_plugin_for_upgrade (name, new_plugin);\n\n        if (init_plugin)\n        {\n            if (!plugin_call_init (new_plugin, argc, argv))\n            {\n                plugin_remove (new_plugin);\n                return NULL;\n            }\n        }\n    }\n    else\n    {\n        gui_chat_printf (NULL,\n                         _(\"%sError: unable to load plugin \\\"%s\\\" \"\n                           \"(not enough memory)\"),\n                         gui_chat_prefix[GUI_CHAT_PREFIX_ERROR],\n                         filename);\n        dlclose (handle);\n        return NULL;\n    }\n\n    if ((weechat_debug_core >= 1) || !plugin_quiet)\n    {\n        gui_chat_printf (NULL,\n                         _(\"Plugin \\\"%s\\\" loaded\"),\n                         name);\n    }\n\n    (void) hook_signal_send (\"plugin_loaded\",\n                             WEECHAT_HOOK_SIGNAL_STRING, (char *)filename);\n\n    return new_plugin;\n}\n\n/*\n * Loads a file found by function plugin_auto_load, but only if this is really a\n * dynamic library.\n */\n\nvoid\nplugin_auto_load_file (void *data, const char *filename)\n{\n    struct t_plugin_args *plugin_args;\n\n    plugin_args = (struct t_plugin_args *)data;\n\n    if (plugin_check_extension_allowed (filename))\n        plugin_load (filename, 0, plugin_args->argc, plugin_args->argv);\n}\n\n/*\n * Callback used to sort plugins arraylist by priority (high priority first).\n */\n\nint\nplugin_arraylist_cmp_cb (void *data,\n                         struct t_arraylist *arraylist,\n                         void *pointer1, void *pointer2)\n{\n    struct t_weechat_plugin *plugin1, *plugin2;\n\n    /* make C compiler happy */\n    (void) data;\n    (void) arraylist;\n\n    plugin1 = (struct t_weechat_plugin *)pointer1;\n    plugin2 = (struct t_weechat_plugin *)pointer2;\n\n    return (plugin1->priority > plugin2->priority) ?\n        -1 : ((plugin1->priority < plugin2->priority) ? 1 : 0);\n}\n\n/*\n * Auto-loads WeeChat plugins, from user and system directories.\n */\n\nvoid\nplugin_auto_load (char *force_plugin_autoload,\n                  int load_from_plugin_path,\n                  int load_from_extra_lib_dir,\n                  int load_from_lib_dir,\n                  int argc, char **argv)\n{\n    char *dir_name, *plugin_path, *plugin_path2, *extra_libdir;\n    const char *ptr_plugin_autoload;\n    struct t_weechat_plugin *ptr_plugin;\n    struct t_plugin_args plugin_args;\n    struct t_arraylist *arraylist;\n    int length, i;\n\n    plugin_args.argc = argc;\n    plugin_args.argv = argv;\n\n    plugin_autoload_array = NULL;\n    plugin_autoload_count = 0;\n\n    ptr_plugin_autoload = (force_plugin_autoload) ?\n        force_plugin_autoload : CONFIG_STRING(config_plugin_autoload);\n\n    if (ptr_plugin_autoload && ptr_plugin_autoload[0])\n    {\n        plugin_autoload_array = string_split (\n            ptr_plugin_autoload,\n            \",\",\n            NULL,\n            WEECHAT_STRING_SPLIT_STRIP_LEFT\n            | WEECHAT_STRING_SPLIT_STRIP_RIGHT\n            | WEECHAT_STRING_SPLIT_COLLAPSE_SEPS,\n            0,\n            &plugin_autoload_count);\n    }\n\n    /* auto-load plugins in custom path */\n    if (load_from_plugin_path\n        && CONFIG_STRING(config_plugin_path)\n        && CONFIG_STRING(config_plugin_path)[0])\n    {\n        plugin_path = string_expand_home (CONFIG_STRING(config_plugin_path));\n        plugin_path2 = string_replace ((plugin_path) ?\n                                       plugin_path : CONFIG_STRING(config_plugin_path),\n                                       \"%h\", weechat_home);\n        util_exec_on_files ((plugin_path2) ?\n                            plugin_path2 : ((plugin_path) ?\n                                            plugin_path : CONFIG_STRING(config_plugin_path)),\n                            1,\n                            0,\n                            &plugin_auto_load_file, &plugin_args);\n        if (plugin_path)\n            free (plugin_path);\n        if (plugin_path2)\n            free (plugin_path2);\n    }\n\n    /* auto-load plugins in WEECHAT_EXTRA_LIBDIR environment variable */\n    if (load_from_extra_lib_dir)\n    {\n        extra_libdir = getenv (WEECHAT_EXTRA_LIBDIR);\n        if (extra_libdir && extra_libdir[0])\n        {\n            length = strlen (extra_libdir) + 16 + 1;\n            dir_name = malloc (length);\n            snprintf (dir_name, length, \"%s/plugins\", extra_libdir);\n            util_exec_on_files (dir_name, 1, 0,\n                                &plugin_auto_load_file, &plugin_args);\n            free (dir_name);\n        }\n    }\n\n    /* auto-load plugins in WeeChat global lib dir */\n    if (load_from_lib_dir)\n    {\n        length = strlen (WEECHAT_LIBDIR) + 16 + 1;\n        dir_name = malloc (length);\n        if (dir_name)\n        {\n            snprintf (dir_name, length, \"%s/plugins\", WEECHAT_LIBDIR);\n            util_exec_on_files (dir_name, 1, 0,\n                                &plugin_auto_load_file, &plugin_args);\n            free (dir_name);\n        }\n    }\n\n    /* free autoload array */\n    if (plugin_autoload_array)\n    {\n        string_free_split (plugin_autoload_array);\n        plugin_autoload_array = NULL;\n    }\n    plugin_autoload_count = 0;\n\n    /* initialize all uninitialized plugins */\n    arraylist = arraylist_new (10, 1, 1,\n                               &plugin_arraylist_cmp_cb, NULL, NULL, NULL);\n    if (arraylist)\n    {\n        for (ptr_plugin = weechat_plugins; ptr_plugin;\n             ptr_plugin = ptr_plugin->next_plugin)\n        {\n            arraylist_add (arraylist, ptr_plugin);\n        }\n        i = 0;\n        while (i < arraylist_size (arraylist))\n        {\n            ptr_plugin = arraylist_get (arraylist, i);\n            if (!ptr_plugin->initialized)\n            {\n                if (!plugin_call_init (ptr_plugin, argc, argv))\n                {\n                    plugin_remove (ptr_plugin);\n                    arraylist_remove (arraylist, i);\n                }\n                else\n                    i++;\n            }\n            else\n                i++;\n        }\n        arraylist_free (arraylist);\n    }\n}\n\n/*\n * Removes a WeeChat plugin.\n */\n\nvoid\nplugin_remove (struct t_weechat_plugin *plugin)\n{\n    struct t_weechat_plugin *new_weechat_plugins;\n    struct t_gui_buffer *ptr_buffer, *next_buffer;\n\n    /* remove all completions (only those created by API) */\n    gui_completion_free_all_plugin (plugin);\n\n    /* close buffers created by this plugin */\n    ptr_buffer = gui_buffers;\n    while (ptr_buffer)\n    {\n        next_buffer = ptr_buffer->next_buffer;\n\n        if (ptr_buffer->plugin == plugin)\n            gui_buffer_close (ptr_buffer);\n\n        ptr_buffer = next_buffer;\n    }\n\n    /* remove plugin from list */\n    if (last_weechat_plugin == plugin)\n        last_weechat_plugin = plugin->prev_plugin;\n    if (plugin->prev_plugin)\n    {\n        (plugin->prev_plugin)->next_plugin = plugin->next_plugin;\n        new_weechat_plugins = weechat_plugins;\n    }\n    else\n        new_weechat_plugins = plugin->next_plugin;\n\n    if (plugin->next_plugin)\n        (plugin->next_plugin)->prev_plugin = plugin->prev_plugin;\n\n    /* remove all configuration files */\n    config_file_free_all_plugin (plugin);\n\n    /* remove all hooks */\n    unhook_all_plugin (plugin, NULL);\n\n    /* remove all infolists */\n    infolist_free_all_plugin (plugin);\n\n    /* remove all hdata */\n    hdata_free_all_plugin (plugin);\n\n    /* remove all bar items */\n    gui_bar_item_free_all_plugin (plugin);\n\n    /* free data */\n    if (plugin->filename)\n        free (plugin->filename);\n    if (!weechat_plugin_no_dlclose)\n        dlclose (plugin->handle);\n    if (plugin->name)\n        free (plugin->name);\n    if (plugin->description)\n        free (plugin->description);\n    if (plugin->author)\n        free (plugin->author);\n    if (plugin->version)\n        free (plugin->version);\n    if (plugin->license)\n        free (plugin->license);\n    if (plugin->charset)\n        free (plugin->charset);\n    hashtable_free (plugin->variables);\n\n    free (plugin);\n\n    weechat_plugins = new_weechat_plugins;\n}\n\n/*\n * Unloads a WeeChat plugin.\n */\n\nvoid\nplugin_unload (struct t_weechat_plugin *plugin)\n{\n    t_weechat_end_func *end_func;\n    char *name;\n\n    name = (plugin->name) ? strdup (plugin->name) : NULL;\n\n    if (plugin->initialized)\n    {\n        end_func = dlsym (plugin->handle, \"weechat_plugin_end\");\n        if (end_func)\n            (void) (end_func) (plugin);\n    }\n\n    plugin_remove (plugin);\n\n    if ((weechat_debug_core >= 1) || !plugin_quiet)\n    {\n        gui_chat_printf (NULL,\n                         _(\"Plugin \\\"%s\\\" unloaded\"),\n                         (name) ? name : \"???\");\n    }\n    (void) hook_signal_send (\"plugin_unloaded\",\n                             WEECHAT_HOOK_SIGNAL_STRING, name);\n    if (name)\n        free (name);\n}\n\n/*\n * Unloads a WeeChat plugin by name.\n */\n\nvoid\nplugin_unload_name (const char *name)\n{\n    struct t_weechat_plugin *ptr_plugin;\n\n    ptr_plugin = plugin_search (name);\n    if (ptr_plugin)\n        plugin_unload (ptr_plugin);\n    else\n    {\n        gui_chat_printf (NULL,\n                         _(\"%sError: plugin \\\"%s\\\" not found\"),\n                         gui_chat_prefix[GUI_CHAT_PREFIX_ERROR],\n                         name);\n    }\n}\n\n/*\n * Unloads all WeeChat plugins.\n */\n\nvoid\nplugin_unload_all ()\n{\n    int plugins_loaded;\n\n    plugins_loaded = (weechat_plugins) ? 1 : 0;\n\n    plugin_quiet = 1;\n    while (weechat_plugins)\n    {\n        plugin_unload (last_weechat_plugin);\n    }\n    plugin_quiet = 0;\n\n    if (plugins_loaded)\n    {\n        gui_chat_printf (NULL, _(\"Plugins unloaded\"));\n    }\n}\n\n/*\n * Reloads a WeeChat plugin by name.\n */\n\nvoid\nplugin_reload_name (const char *name, int argc, char **argv)\n{\n    struct t_weechat_plugin *ptr_plugin;\n    char *filename;\n\n    ptr_plugin = plugin_search (name);\n    if (ptr_plugin)\n    {\n        filename = strdup (ptr_plugin->filename);\n        if (filename)\n        {\n            plugin_unload (ptr_plugin);\n            plugin_load (filename, 1, argc, argv);\n            free (filename);\n        }\n    }\n    else\n    {\n        gui_chat_printf (NULL,\n                         _(\"%sError: plugin \\\"%s\\\" not found\"),\n                         gui_chat_prefix[GUI_CHAT_PREFIX_ERROR],\n                         name);\n    }\n}\n\n/*\n * Displays list of loaded plugins on one line.\n */\n\nvoid\nplugin_display_short_list ()\n{\n    const char *plugins_loaded;\n    char *buf;\n    int length;\n    struct t_weechat_plugin *ptr_plugin;\n    struct t_weelist *list;\n    struct t_weelist_item *ptr_item;\n\n    if (weechat_plugins)\n    {\n        list = weelist_new ();\n        if (list)\n        {\n            plugins_loaded = _(\"Plugins loaded:\");\n\n            length = strlen (plugins_loaded) + 1;\n\n            for (ptr_plugin = weechat_plugins; ptr_plugin;\n                 ptr_plugin = ptr_plugin->next_plugin)\n            {\n                length += strlen (ptr_plugin->name) + 2;\n                weelist_add (list, ptr_plugin->name, WEECHAT_LIST_POS_SORT, NULL);\n            }\n            length++;\n\n            buf = malloc (length);\n            if (buf)\n            {\n                strcpy (buf, plugins_loaded);\n                strcat (buf, \" \");\n                for (ptr_item = list->items; ptr_item;\n                     ptr_item = ptr_item->next_item)\n                {\n                    strcat (buf, ptr_item->data);\n                    if (ptr_item->next_item)\n                        strcat (buf, \", \");\n                }\n                gui_chat_printf (NULL, \"%s\", buf);\n                free (buf);\n            }\n            weelist_free (list);\n        }\n    }\n}\n\n/*\n * Initializes plugin support.\n */\n\nvoid\nplugin_init (char *force_plugin_autoload, int argc, char *argv[])\n{\n    /* read plugins options on disk */\n    plugin_config_init ();\n    plugin_config_read ();\n\n    /* auto-load plugins */\n    plugin_quiet = 1;\n    plugin_auto_load (force_plugin_autoload, 1, 1, 1, argc, argv);\n    plugin_display_short_list ();\n    plugin_quiet = 0;\n}\n\n/*\n * Ends plugin support.\n */\n\nvoid\nplugin_end ()\n{\n    /* write plugins configuration options */\n    plugin_config_write ();\n\n    /* unload all plugins */\n    plugin_unload_all ();\n\n    /* free all plugin options */\n    plugin_config_end ();\n}\n\n/*\n * Gets hdata for plugin.\n */\n\nstruct t_hdata *\nplugin_hdata_plugin_cb (const void *pointer, void *data,\n                        const char *hdata_name)\n{\n    struct t_hdata *hdata;\n\n    /* make C compiler happy */\n    (void) pointer;\n    (void) data;\n\n    hdata = hdata_new (NULL, hdata_name, \"prev_plugin\", \"next_plugin\",\n                       0, 0, NULL, NULL);\n    if (hdata)\n    {\n        HDATA_VAR(struct t_weechat_plugin, filename, STRING, 0, NULL, NULL);\n        HDATA_VAR(struct t_weechat_plugin, handle, POINTER, 0, NULL, NULL);\n        HDATA_VAR(struct t_weechat_plugin, name, STRING, 0, NULL, NULL);\n        HDATA_VAR(struct t_weechat_plugin, description, STRING, 0, NULL, NULL);\n        HDATA_VAR(struct t_weechat_plugin, author, STRING, 0, NULL, NULL);\n        HDATA_VAR(struct t_weechat_plugin, version, STRING, 0, NULL, NULL);\n        HDATA_VAR(struct t_weechat_plugin, license, STRING, 0, NULL, NULL);\n        HDATA_VAR(struct t_weechat_plugin, charset, STRING, 0, NULL, NULL);\n        HDATA_VAR(struct t_weechat_plugin, priority, INTEGER, 0, NULL, NULL);\n        HDATA_VAR(struct t_weechat_plugin, initialized, INTEGER, 0, NULL, NULL);\n        HDATA_VAR(struct t_weechat_plugin, debug, INTEGER, 0, NULL, NULL);\n        HDATA_VAR(struct t_weechat_plugin, upgrading, INTEGER, 0, NULL, NULL);\n        HDATA_VAR(struct t_weechat_plugin, variables, HASHTABLE, 0, NULL, NULL);\n        HDATA_VAR(struct t_weechat_plugin, prev_plugin, POINTER, 0, NULL, hdata_name);\n        HDATA_VAR(struct t_weechat_plugin, next_plugin, POINTER, 0, NULL, hdata_name);\n        HDATA_LIST(weechat_plugins, WEECHAT_HDATA_LIST_CHECK_POINTERS);\n        HDATA_LIST(last_weechat_plugin, 0);\n    }\n    return hdata;\n}\n\n/*\n * Adds a plugin in an infolist.\n *\n * Returns:\n *   1: OK\n *   0: error\n */\n\nint\nplugin_add_to_infolist (struct t_infolist *infolist,\n                        struct t_weechat_plugin *plugin)\n{\n    struct t_infolist_item *ptr_item;\n\n    if (!infolist || !plugin)\n        return 0;\n\n    ptr_item = infolist_new_item (infolist);\n    if (!ptr_item)\n        return 0;\n\n    if (!infolist_new_var_pointer (ptr_item, \"pointer\", plugin))\n        return 0;\n    if (!infolist_new_var_string (ptr_item, \"filename\", plugin->filename))\n        return 0;\n    if (!infolist_new_var_pointer (ptr_item, \"handle\", plugin->handle))\n        return 0;\n    if (!infolist_new_var_string (ptr_item, \"name\", plugin->name))\n        return 0;\n    if (!infolist_new_var_string (ptr_item, \"description\", plugin->description))\n        return 0;\n    if (!infolist_new_var_string (ptr_item, \"description_nls\",\n                                  (plugin->description && plugin->description[0]) ?\n                                  _(plugin->description) : \"\"))\n        return 0;\n    if (!infolist_new_var_string (ptr_item, \"author\", plugin->author))\n        return 0;\n    if (!infolist_new_var_string (ptr_item, \"version\", plugin->version))\n        return 0;\n    if (!infolist_new_var_string (ptr_item, \"license\", plugin->license))\n        return 0;\n    if (!infolist_new_var_string (ptr_item, \"charset\", plugin->charset))\n        return 0;\n    if (!infolist_new_var_integer (ptr_item, \"priority\", plugin->priority))\n        return 0;\n    if (!infolist_new_var_integer (ptr_item, \"initialized\", plugin->initialized))\n        return 0;\n    if (!infolist_new_var_integer (ptr_item, \"debug\", plugin->debug))\n        return 0;\n    if (!infolist_new_var_integer (ptr_item, \"upgrading\", plugin->upgrading))\n        return 0;\n    if (!hashtable_add_to_infolist (plugin->variables, ptr_item, \"var\"))\n        return 0;\n\n    return 1;\n}\n\n/*\n * Prints plugins in WeeChat log file (usually for crash dump).\n */\n\nvoid\nplugin_print_log ()\n{\n    struct t_weechat_plugin *ptr_plugin;\n\n    for (ptr_plugin = weechat_plugins; ptr_plugin;\n         ptr_plugin = ptr_plugin->next_plugin)\n    {\n        log_printf (\"\");\n        log_printf (\"[plugin (addr:0x%lx)]\", ptr_plugin);\n        log_printf (\"  filename . . . . . . . : '%s'\",  ptr_plugin->filename);\n        log_printf (\"  handle . . . . . . . . : 0x%lx\", ptr_plugin->handle);\n        log_printf (\"  name . . . . . . . . . : '%s'\",  ptr_plugin->name);\n        log_printf (\"  description. . . . . . : '%s'\",  ptr_plugin->description);\n        log_printf (\"  author . . . . . . . . : '%s'\",  ptr_plugin->author);\n        log_printf (\"  version. . . . . . . . : '%s'\",  ptr_plugin->version);\n        log_printf (\"  license. . . . . . . . : '%s'\",  ptr_plugin->license);\n        log_printf (\"  charset. . . . . . . . : '%s'\",  ptr_plugin->charset);\n        log_printf (\"  priority . . . . . . . : %d\",    ptr_plugin->priority);\n        log_printf (\"  initialized. . . . . . : %d\",    ptr_plugin->initialized);\n        log_printf (\"  debug. . . . . . . . . : %d\",    ptr_plugin->debug);\n        log_printf (\"  upgrading. . . . . . . : %d\",    ptr_plugin->upgrading);\n        hashtable_print_log (ptr_plugin->variables, \"variables\");\n        log_printf (\"  prev_plugin. . . . . . : 0x%lx\", ptr_plugin->prev_plugin);\n        log_printf (\"  next_plugin. . . . . . : 0x%lx\", ptr_plugin->next_plugin);\n    }\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-weechat-2.9-6t75c6wcuy372mx22zcrjpzcya3zeyfl/spack-src/tests/tests.cpp": "/*\n * tests.cpp - run WeeChat tests\n *\n * Copyright (C) 2014-2020 S\u00e9bastien Helleu <flashcode@flashtux.org>\n *\n * This file is part of WeeChat, the extensible chat client.\n *\n * WeeChat is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 3 of the License, or\n * (at your option) any later version.\n *\n * WeeChat is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with WeeChat.  If not, see <https://www.gnu.org/licenses/>.\n */\n\n#include <iostream>\n#include <stdlib.h>\n#include <unistd.h>\n#include <stdio.h>\n#include <dlfcn.h>\n#include <string.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n\nextern \"C\"\n{\n#ifndef HAVE_CONFIG_H\n#define HAVE_CONFIG_H\n#endif\n#include \"src/core/weechat.h\"\n#include \"src/core/wee-hook.h\"\n#include \"src/core/wee-input.h\"\n#include \"src/core/wee-string.h\"\n#include \"src/core/wee-util.h\"\n#include \"src/plugins/plugin.h\"\n#include \"src/gui/gui-main.h\"\n#include \"src/gui/gui-buffer.h\"\n#include \"src/gui/gui-chat.h\"\n\n    extern void gui_main_init ();\n    extern void gui_main_loop ();\n}\n\n#include \"CppUTest/CommandLineTestRunner.h\"\n\n#define LOCALE_TESTS \"en_US.UTF-8\"\n\n#define WEECHAT_TESTS_HOME \"./tmp_weechat_test\"\n\n/* lib with tests on plugins when autotools is used to compile */\n#define WEECHAT_TESTS_PLUGINS_LIB_DEFAULT                       \\\n    \"./tests/.libs/lib_weechat_unit_tests_plugins.so.0.0.0\"\n\n/* import tests from libs */\n/* core */\nIMPORT_TEST_GROUP(CoreArraylist);\nIMPORT_TEST_GROUP(CoreCalc);\nIMPORT_TEST_GROUP(CoreCrypto);\nIMPORT_TEST_GROUP(CoreEval);\nIMPORT_TEST_GROUP(CoreHashtable);\nIMPORT_TEST_GROUP(CoreHdata);\nIMPORT_TEST_GROUP(CoreHook);\nIMPORT_TEST_GROUP(CoreInfolist);\nIMPORT_TEST_GROUP(CoreList);\nIMPORT_TEST_GROUP(CoreSecure);\nIMPORT_TEST_GROUP(CoreString);\nIMPORT_TEST_GROUP(CoreUrl);\nIMPORT_TEST_GROUP(CoreUtf8);\nIMPORT_TEST_GROUP(CoreUtil);\n/* GUI */\nIMPORT_TEST_GROUP(GuiColor);\nIMPORT_TEST_GROUP(GuiLine);\nIMPORT_TEST_GROUP(GuiNick);\n/* scripts */\nIMPORT_TEST_GROUP(Scripts);\n\nstruct t_gui_buffer *ptr_core_buffer = NULL;\n\n\n/*\n * Callback for exec_on_files (to remove all files in WeeChat home directory).\n */\n\nvoid\nexec_on_files_cb (void *data, const char *filename)\n{\n    /* make C++ compiler happy */\n    (void) data;\n\n    unlink (filename);\n}\n\n/*\n * Callback for any message displayed by WeeChat or a plugin.\n */\n\nint\ntest_print_cb (const void *pointer, void *data, struct t_gui_buffer *buffer,\n               time_t date, int tags_count, const char **tags, int displayed,\n               int highlight, const char *prefix, const char *message)\n{\n    /* make C++ compiler happy */\n    (void) pointer;\n    (void) data;\n    (void) buffer;\n    (void) date;\n    (void) tags_count;\n    (void) tags;\n    (void) displayed;\n    (void) highlight;\n\n    /* keep only messages displayed on core buffer */\n    if (strcmp (gui_buffer_get_string (buffer, \"full_name\"),\n                \"core.weechat\") != 0)\n    {\n        return WEECHAT_RC_OK;\n    }\n\n    printf (\"%s%s%s\\n\",  /* with color: \"\\33[34m%s%s%s\\33[0m\\n\" */\n            (prefix && prefix[0]) ? prefix : \"\",\n            (prefix && prefix[0]) ? \" \" : \"\",\n            (message && message[0]) ? message : \"\");\n\n    return WEECHAT_RC_OK;\n}\n\n/*\n * Initializes GUI for tests.\n */\n\nvoid\ntest_gui_init ()\n{\n    /*\n     * Catch all messages to display them directly on stdout\n     * (Curses library is not used for tests).\n     */\n    hook_print (NULL,  /* plugin */\n                NULL,  /* buffer */\n                NULL,  /* tags */\n                NULL,  /* message */\n                1,     /* strip colors */\n                &test_print_cb,\n                NULL,\n                NULL);\n\n    /*\n     * Call the function \"gui_main_init\" from Curses sources (all Curses\n     * calls are made with the fake ncurses library).\n     */\n    gui_main_init ();\n}\n\n/*\n * Displays and runs a command on a buffer.\n */\n\nvoid\nrun_cmd (const char *command)\n{\n    printf (\">>> Running command: %s\\n\", command);\n    input_data (ptr_core_buffer, command, NULL);\n}\n\n/*\n * Runs tests in WeeChat environment.\n */\n\nint\nmain (int argc, char *argv[])\n{\n    int rc, length, weechat_argc;\n    char *weechat_tests_args, *args, **weechat_argv, *tests_plugins_lib;\n    const char *tests_plugins_lib_default = WEECHAT_TESTS_PLUGINS_LIB_DEFAULT;\n    const char *ptr_path;\n    void *handle;\n\n    /* setup environment: English language, no specific timezone */\n    setenv (\"LC_ALL\", LOCALE_TESTS, 1);\n    setenv (\"TZ\", \"\", 1);\n\n    /* check if locale exists */\n    if (!setlocale (LC_ALL, \"\"))\n    {\n        fprintf (stderr,\n                 \"ERROR: the locale %s must be installed to run WeeChat \"\n                 \"tests.\\n\",\n                 LOCALE_TESTS);\n        return 1;\n    }\n\n    /* clean WeeChat home */\n    util_exec_on_files (WEECHAT_TESTS_HOME, 1, 1, &exec_on_files_cb, NULL);\n\n    /* build arguments for WeeChat */\n    weechat_tests_args = getenv (\"WEECHAT_TESTS_ARGS\");\n    length = strlen (argv[0]) +\n        64 +  /* --dir ... */\n        ((weechat_tests_args) ? 1 + strlen (weechat_tests_args) : 0) +\n        1;\n    args = (char *)malloc (length);\n    if (!args)\n    {\n        fprintf (stderr, \"Memory error\\n\");\n        return 1;\n    }\n    snprintf (args, length,\n              \"%s --dir %s%s%s\",\n              argv[0],\n              WEECHAT_TESTS_HOME,\n              (weechat_tests_args) ? \" \" : \"\",\n              (weechat_tests_args) ? weechat_tests_args : \"\");\n    weechat_argv = string_split_shell (args, &weechat_argc);\n    printf (\"WeeChat arguments: \\\"%s\\\"\\n\", args);\n\n    /* init WeeChat */\n    weechat_init_gettext ();\n    weechat_init (weechat_argc, weechat_argv, &test_gui_init);\n    if (weechat_argv)\n        string_free_split (weechat_argv);\n    free (args);\n\n    ptr_core_buffer = gui_buffer_search_main ();\n\n    /* auto-load plugins from WEECHAT_EXTRA_LIBDIR if no plugin were loaded */\n    if (!weechat_plugins)\n    {\n        gui_chat_printf (NULL,\n                         \"Auto-loading plugins from path in \"\n                         \"environment variable WEECHAT_EXTRA_LIBDIR (\\\"%s\\\")\",\n                         getenv (\"WEECHAT_EXTRA_LIBDIR\"));\n        plugin_auto_load (NULL, 0, 1, 0, 0, NULL);\n    }\n\n    /* load plugins tests */\n    tests_plugins_lib = getenv (\"WEECHAT_TESTS_PLUGINS_LIB\");\n    ptr_path = (tests_plugins_lib && tests_plugins_lib[0]) ?\n        tests_plugins_lib : tests_plugins_lib_default;\n    printf (\"Loading tests on plugins: \\\"%s\\\"\\n\", ptr_path);\n    handle = dlopen (ptr_path, RTLD_GLOBAL | RTLD_NOW);\n    if (!handle)\n    {\n        fprintf (stderr, \"ERROR: unable to load tests on plugins: %s\\n\",\n                 dlerror ());\n        return 1;\n    }\n\n    /* display WeeChat version and directories */\n    run_cmd (\"/command core version\");\n    run_cmd (\"/debug dirs\");\n    run_cmd (\"/debug libs\");\n\n    /* run all tests */\n    printf (\"\\n\");\n    rc = CommandLineTestRunner::RunAllTests (argc, argv);\n\n    /* end WeeChat */\n    gui_chat_mute = GUI_CHAT_MUTE_ALL_BUFFERS;\n    weechat_end (&gui_main_end);\n\n    dlclose (handle);\n\n    return rc;\n}\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-weechat-2.9-6t75c6wcuy372mx22zcrjpzcya3zeyfl/spack-src/icons/64x64/weechat.png",
        "/tmp/vanessa/spack-stage/spack-stage-weechat-2.9-6t75c6wcuy372mx22zcrjpzcya3zeyfl/spack-src/icons/256x256/weechat.png",
        "/tmp/vanessa/spack-stage/spack-stage-weechat-2.9-6t75c6wcuy372mx22zcrjpzcya3zeyfl/spack-src/icons/16x16/weechat.png",
        "/tmp/vanessa/spack-stage/spack-stage-weechat-2.9-6t75c6wcuy372mx22zcrjpzcya3zeyfl/spack-src/icons/32x32/weechat.png",
        "/tmp/vanessa/spack-stage/spack-stage-weechat-2.9-6t75c6wcuy372mx22zcrjpzcya3zeyfl/spack-src/icons/128x128/weechat.png",
        "/tmp/vanessa/spack-stage/spack-stage-weechat-2.9-6t75c6wcuy372mx22zcrjpzcya3zeyfl/spack-src/icons/512x512/weechat.png"
    ],
    "total_files": 761
}