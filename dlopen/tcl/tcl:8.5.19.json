{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-tcl-8.5.19-76icjut2bqpwmf2fnlt35uiqok46hbar/spack-src/ChangeLog.2002": "2002-12-18  David Gravereaux  <davygrvy@pobox.com>\n\n\t* win/makefile.vc: some uses of xcopy swapped to the @$(CPY) macro.\n\tReported by Joe Mistachkin <joe@mistachkin.com>.\n\n2002-12-17  Jeff Hobbs  <jeffh@ActiveState.com>\n\n\t* generic/tclNotify.c (TclFinalizeNotifier, Tcl_SetServiceMode):\n\t(Tcl_ThreadAlert): Check that the stub functions are non-NULL before\n\tcalling them. They could be set to NULL by Tcl_SetNotifier.\n\n2002-12-16  David Gravereaux  <davygrvy@pobox.com>\n\n\t* generic/tclPipe.c (TclCleanupChildren):\n\t* tests/winPipe.test:\n\t* win/tclWinPipe.c (Tcl_WaitPid):\n\t* win/tclWinTest.c:  Gave Tcl_WaitPid the ability to return a Win32\n\texception code translated into a posix style SIG*. This allows [close]\n\tto report \"CHILDKILLED\" without the meaning getting lost in a\n\ttruncated exit code. In TclCleanupChildren(), TclpGetPid() had to get\n\tmoved to before Tcl_WaitPid() as the the handle is removed from the\n\tlist taking away the ability to get the process id after the wait is\n\tdone. This shouldn't effect the unix implimentaion unless waitpid is\n\tcalled with a pid of zero, meaning \"any\". I don't think it is..\n\n2002-12-13  Don Porter  <dgp@users.sourceforge.net>\n\n\t* unix/configure.in:\tUpdated configure of CVS snapshots to reflect\n\t* win/configure.in:\tthe 8.4.1.1 patchlevel.\n\n\t* unix/configure:\tautoconf\n\t* win/configure\t\tautoconf\n\n2002-12-11  Don Porter  <dgp@users.sourceforge.net>\n\n\t* generic/tclProc.c (ProcessProcResultCode): Fix failure to propagate\n\tnegative return codes up the call stack. [Bug 647307]\n\t* tests/proc.test (proc-6.1): Test for Bug 647307\n\n\t* generic/tclParseExpr.c (TclParseInteger):  Return 1 for the string\n\t\"0x\" (recognize leading \"0\" as an integer). [Bug 648441]\n\t* tests/parseExpr.test (parseExpr-19.1): Test for Bug 648441.\n\n2002-12-09  Jeff Hobbs  <jeffh@ActiveState.com>\n\n\t* win/tclWinThrd.c (TclpMasterUnlock):\n\t* generic/tclThread.c (TclFinalizeThreadData): TclpMasterUnlock must\n\texist and be called unconditional of TCL_THREADS. [Bug 651139]\n\n2002-12-08  David Gravereaux  <davygrvy@pobox.com>\n\n\t* win/tclWinSock.c (SocketThreadExitHandler, InitSockets):  Check\n\tthat the tsdPtr is valid before dereferencing as we call it from the\n\texit handler, too [Bug 650353]. Another WSAStartup() loaded version\n\tcomparison byte swap issue fixed. Although 0x0101 byte swapped is\n\tstill 0x0101, properly claiming which is major/minor is more correct.\n\n2002-12-06  Jeff Hobbs  <jeffh@ActiveState.com>\n\n\t* generic/tclStubInit.c: regen\n\t* generic/tclIntPlatDecls.h: regen\n\t* generic/tclInt.decls: added TclWinResetInterface\n\n\t* win/tclWin32Dll.c (TclWinResetInterfaces):\n\t* win/tclWinInit.c (TclpSetInitialEncodings, WinEncodingsCleanup):\n\tadd exit handler that resets the encoding information to a state where\n\twe can reuse Tcl. Following these changes, it is possible to reuse Tcl\n\t(following Tcl_FindExecutable or Tcl_CreateInterp) following a\n\tTcl_Finalize.\n\n\t* generic/tclIOUtil.c (TclFinalizeFilesystem): reset statics to their\n\toriginal values on finalize to allow reuse of the library.\n\n2002-12-04  David Gravereaux  <davygrvy@pobox.com>\n\n\t* win/tclWinPipe.c: reverted back to -r1.27 due to numerous test\n\tfailures that need to be resolved first. The idea was good, but the\n\tdetails aren't.\n\n2002-12-04  David Gravereaux  <davygrvy@pobox.com>\n\n\t* win/tclWinPipe.c (Tcl_WaitPid):  When a process exits with an\n\texception, pass this notice on to the caller with a SIG* code rather\n\tthan truncating the exit code and missing the meaning. This allows\n\tTclCleanupChildren() to report \"CHILDKILLED\".\n\n\tThis has a different behavior than unix in that closing the read pipe\n\tto a process sends the SIGPIPE signal which is returned as a SIGPIPE\n\texit status. On windows, we send the process a CTRL_BREAK_EVENT and\n\tget back a CONTROL_C_EXIT which is documented to mean a SIGINT which\n\tseems wrong as a system, but is the correct exit status.\n\n2002-12-04  Vince Darley  <vincentdarley@users.sourceforge.net>\n\n\t* generic/tclIOUtil.c: fix to redirected 'load' in virtual filesystem\n\tfor some Unix systems.\n\n\t* generic/tclEvent.c: the filesystem must be cleaned up before the\n\tencoding subsystem because it needs access to encodings. Fixes crash\n\ton exit observed in embedded applications.\n\n\t* generic/tclTestObj.c: patch omitted from previous change of\n\t2002-11-13\n\n2002-12-03  Jeff Hobbs  <jeffh@ActiveState.com>\n\n\t* generic/tclStubLib.c (Tcl_InitStubs): prevent the cached check of\n\ttclStubsPtr to allow for repeated load/unload of the Tcl dll by\n\thosting apps. [Bug 615304]\n\n2002-12-03  David Gravereaux  <davygrvy@pobox.com>\n\n\t* win/tclAppInit.c (sigHandler): Protect from trying to close a NULL\n\thandle.\n\n\t* win/tclWinPipe.c (PipeClose2Proc, TclpCreateProcess): Send a real\n\tWin32 signal (CTRL_C_EVENT) when the read channel is brought down to\n\talert the child to close on its side. Start the process with\n\tCREATE_NEW_PROCESS_GROUP to allow the ability to send these signals.\n\tThe following test case now brings down the child without the use of\n\tan external [kill] command.\n\n\t% set p [open \"|[info name]\" w+]\n\tfile8d5380\n\t% pid $p\n\t2876\n\t% close $p     <- now doesn't block in Tcl_WaitPid()\n\t%\n\n\t* win/tclWinPipe.c (PipeClose2Proc): Changed CTRL_C_EVENT to\n\tCTRL_BREAK_EVENT as it can't be ignored by the child and proved to\n\twork on [open \"|netstat 1\" w+] where CTRL_C_EVENT didn't.\n\n2002-11-27  David Gravereaux  <davygrvy@pobox.com>\n\n\t* win/tclWinPort.h: Don't turn off winsock prototypes!  TclX didn't\n\tlike it. Even though the core doesn't use the prototypes, do offer\n\tthem.\n\n\t* win/tclWinSock.c: Removed shutdown() from the function table as it\n\twasn't referenced anywhere and cleaned-up some casting that that\n\twasn't needed.\n\n\t* win/tclWinSock.c: WSAStartup() loaded version comparison error which\n\tresulted in 2.0 looking less than 1.1.\n\n\t* win/tclWinChan.c (Tcl_MakeFileChannel): return of DuplicateHandle()\n\tincorrectly used. [Bug 618852]\n\n2002-11-26  Jeff Hobbs  <jeffh@ActiveState.com>\n\n\t* generic/tclEncoding.c (TclFinalizeEncodingSubsystem): properly\n\tcleanup all encodings by using Tcl_FirstHashEntry in the while loop.\n\n\t* unix/Makefile.in (valgrind): add simple valgrind target\n\n\t* tests/exec.test: unset path var to allow singleproc testing\n\n\t* generic/tclInterp.c (AliasCreate): preserve/release interps to\n\tprevent possible FMR error in bad alias cases.\n\n2002-11-26  David Gravereaux  <davygrvy@pobox.com>\n\n\t* win/tclWinPort.h:\n\t* win/tclWinSock.c:  This patch does two things:\n\n\t1) Cleans-up the winsock typedefs by using the typedefs provided by\n\twinsock2.h. This has no effect on how winsock is initialized; just\n\tmakes the source code easier to read. [Patch 561305 561301]\n\n\t2) Revamps how the socket message handler thread is brought up and\n\tdown to allow for cleaner exits without the use of TerminateThread().\n\tTerminateThread is evil. No attempt has been made to resolve [Bug\n\t593810] which may need a new channel driver version for adding a\n\tregistering function within the transfered thread to init the handler\n\tthread. IOW, initialization of the TSD structure is getting bypassed\n\tthrough the thread extension's [thread::transfer] command.\n\n2002-11-26  David Gravereaux  <davygrvy@pobox.com>\n\n\t* win/tclWinConsole.c:\n\t* win/tclWinPipe.c:\n\t* win/tclWinSerial.c:\n\t* win/tclWinSock.c:\n\t* win/tclWinThrd.c:\n\t* win/tclWinTime.c:  General cleanup of all worker threads used by the\n\tchannel drivers. Eliminates the normal case where the worker thread is\n\tterminated ('cept the winsock one). Instead, use kernel events to\n\tsignal a clean exit. Only when the worker thread is blocked on an I/O\n\tcall is the thread terminated. Essentially, this makes all other\n\tchannel worker threads behave like the PipeReaderThread() function for\n\tit's cleaner exit behavior. This appears to fix [Bug 597924] but needs\n\t3rd party confirmation to close the issue.\n\n2002-11-26  Mo DeJong  <mdejong@users.sourceforge.net>\n\n\t* win/README: Update msys build env URL. This release #4 build both\n\ttcl and tk without problems.\n\n2002-11-22  Jeff Hobbs  <jeffh@ActiveState.com>\n\n\t* library/init.tcl:         code cleanup to reduce use of\n\t* library/opt/optparse.tcl: string compare\n\n\t* tests/interp.test: interp-14.4\n\t* generic/tclInterp.c (TclPreventAliasLoop): prevent seg fault when\n\tcreating an alias command over the interp name. [Bug 641195]\n\n2002-11-18  Jeff Hobbs  <jeffh@ActiveState.com>\n\n\t* generic/tclUtil.c (SetEndOffsetFromAny): handle integer offset\n\tafter the \"end-\" prefix.\n\n\t* generic/get.test:\n\t* generic/string.test:\n\t* generic/tclObj.c (SetIntFromAny, SetWideIntFromAny):\n\t* generic/tclGet.c (TclGetLong, Tcl_GetInt): simplify sign handling\n\tbefore calling strtoul(l). [Bug 634856]\n\n2002-11-18  David Gravereaux  <davygrvy@pobox.com>\n\n\t* win/tclWinThrd.c (Tcl_CreateThread/TclpThreadExit): Fixed improper\n\tcompiler macros that missed the VC++ compiler. This resulted in VC++\n\tbuilds using CreateThread()/ExitThread() in place of the proper\n\t_beginthreadex()/_endthreadex(). This was a large error and am\n\tsurprised I missed seeing it earlier.\n\n2002-11-13  Jeff Hobbs  <jeffh@ActiveState.com>\n\n\t* generic/regexpComp.test: added tests 22.*\n\t* generic/tclCompCmds.c (TclCompileRegexpCmd): add left and right\n\tanchoring (^ and $) recognition and check starting or ending .* to\n\textend the number of REs that can be compiled to string match or\n\tstring equal.\n\n2002-11-13  Vince Darley  <vincentdarley@users.sourceforge.net>\n\n\t* generic/tclCmdMZ.c:\n\t* tests/trace.test: applied patch from Hemang Levana to fix [Bug\n\t615043] in execution traces with 'return -code error'.\n\n\t* generic/tclTestObj.c:\n\t* tests/stringObj.test: added 'knownBug' test for [Bug 635200]\n\t* generic/tclStringObj.c: corrected typos in comments\n\n\t* generic/tclFileName.c:\n\t* tests/fileName.test: applied patch for bug reported against tclvfs\n\tconcerning handling of Windows serial ports like 'com1', 'lpt3' by the\n\tvirtual filesystem code.\n\n\t* doc/RegExp.3: clarification of the 'extendMatch' return values.\n\n2002-11-11  Jeff Hobbs  <jeffh@ActiveState.com>\n\n\t* generic/tclUtil.c (Tcl_Backslash): use TclUtfToUniChar.\n\t(Tcl_StringCaseMatch): use TclUtfToUniChar and add further\n\toptimizations for the one-byte/char case.\n\n\t* generic/tclUtf.c: make use of TclUtfToUniChar macro throughout the\n\tfunctions, and add extra optimization to Tcl_NumUtfChars for\n\tone-byte/char case.\n\n\t* generic/tclVar.c (DisposeTraceResult, CallVarTraces): add proper\n\tstatic declarations.\n\n\t* generic/tclStringObj.c (Tcl_GetCharLength): optimize for the ascii\n\tchar case.\n\t(Tcl_GetUniChar): remove unnecessary use of Tcl_UtfToUniChar.\n\t(FillUnicodeRep): Use TclUtfToUniChar.\n\n\t* generic/tclHash.c (HashStringKey): move string++ lower to save an\n\tinstruction.\n\n\t* generic/tclExecute.c (TclExecuteByteCode): improve INST_STR_CMP to\n\tuse memcmp in the one-byte/char case, also use direct index for\n\tINST_STR_INDEX in that case.\n\n\t* generic/tclEncoding.c (UtfToUtfProc, UtfToUnicodeProc):\n\t(TableFromUtfProc, EscapeFromUtfProc): Use TclUtfToUniChar.\n\t(UnicodeToUtfProc, TableToUtfProc): add 1-byte char optimizations for\n\tTcl_UniCharToUtf call. These improve encoded channel conversion speeds\n\tby up to 20%.\n\n\t* tests/split.test: added 1-char string split tests\n\t* generic/tclCmdMZ.c (Tcl_SplitObjCmd): Use TclUtfToUniChar. Also\n\tadded a special case for single-ascii-char splits.\n\t(Tcl_StringObjCmd): Use TclUtfToUniChar. For STR_RANGE, support\n\tgetting ranges of ByteArrays (reverts change from 2000-05-26).\n\t(TraceExecutionProc) add proper static declaration.\n\n\t* generic/tclInt.h: add macro version of Tcl_UtfToUniChar\n\t(TclUtfToUniChar) that does the one-byte utf-char check without\n\tcalling Tcl_UtfToUniChar, for use by the core. This brings notable\n\tspeedups for primarily ascii string handling.\n\n\t* generic/tcl.h (TCL_PATCH_LEVEL): bump to 8.4.1.1 for patchlevel\n\tonly. This interim number will only be reflected by [info patchlevel].\n\n2002-11-11  Kevin Kenny  <kennykb@acm.org>\n\n\t* doc/Tcl.n: Corrected indentation of the new language. Oops.\n\n2002-11-10  Kevin Kenny <kennykb@acm.org>\n\n\t* doc/Tcl.n: Added language to the Endekalogue to make it clear that\n\tsubstitutions always take place from left to right. [Bug 635644]\n\n2002-11-06  Mo DeJong  <mdejong@users.sourceforge.net>\n\n\t* changes: Note TclInExit TclInThreadExit changes.\n\t* generic/tclEvent.c (TclInExit, TclInThreadExit): Split out\n\tfunctionality of TclInExit to make it clear which one should be called\n\tin each situation.\n\t* generic/tclInt.decls: Declare TclInThreadExit.\n\t* generic/tclIntDecls.h: Regen.\n\t* generic/tclStubInit.c: Regen.\n\t* mac/tclMacChan.c (StdIOClose):\n\t* unix/tclUnixChan.c (FileCloseProc):\n\t* win/tclWinChan.c (FileCloseProc):\n\t* win/tclWinConsole.c (ConsoleCloseProc):\n\t* win/tclWinPipe.c (TclpCloseFile):\n\t* win/tclWinSerial.c (SerialCloseProc): Invoke the new TclInThreadExit\n\tmethod instead of TclInExit.\n\n2002-11-06  Mo DeJong  <mdejong@users.sourceforge.net>\n\n\t* unix/configure: Regen.\n\t* unix/tcl.m4 (SC_CONFIG_CFLAGS): Generate a fatal configure error if\n\tno ar program can be found on the path. [Bug 582039]\n\t* win/configure: Regen.\n\t* win/configure.in: Check that AR, RANLIB, and RC are found on the\n\tpath when building with gcc.\n\n2002-11-03  David Gravereaux <davygrvy@pobox.com>\n\n\t* win/tclAppInit.c:  Calls Registry_Init() and Dde_Init() when\n\tSTATIC_BUILD and TCL_USE_STATIC_PACKAGES macros are set.\n\n\t* win/makefile.vc:\n\t* win/rules.vc:  linkexten option now sets the TCL_USE_STATIC_PACKAGES\n\tmacro which also adds the registry and dde object files to the link\n\tof the shell. [Patch 479697] Also factored some additional macros that\n\twill be helpful for extension authors. Version grepping of tcl.h will\n\tneed to be added to complete this.\n\n\t* win/buildall.vc.bat: Added more descriptive commentary.\n\n2002-11-01  David Gravereaux <davygrvy@pobox.com>\n\n\t* win/tclWinReg.c:  Changed the Tcl_PkgProvide() line to declare the\n\tregistry extension at version 1.1 from 1.0.\n\n2002-10-31  Andreas Kupries  <andreask@activestate.com>\n\n\t* library/word.tcl: Changed $tcl_platform to $::tcl_platform to avoid\n\tpossible scope trouble.\n\n2002-10-29  Vince Darley  <vincentdarley@users.sourceforge.net>\n\n\t* win/tclWinInt.h:\n\t* win/tclWin32Dll.c: added comments about certain NULL function\n\tpointers which will be filled in when Tcl_FindExecutable is called, so\n\tthat users don't report invalid bugs on this topic. (No code changes\n\tat all).\n\n2002-10-29  Daniel Steffen  <das@users.sourceforge.net>\n\n\t* unix/tclLoadDyld.c (TclpFindSymbol): pass all dyld error messages\n\tupstream [Bug 627546].\n\n2002-10-28  Andreas Kupries  <andreask@activestate.com>\n\n\t* library/dde/pkgIndex.tcl:\n\t* library/reg/pkgIndex.tcl: Changed the hardwired debug suffix (d) to\n\tthe correct suffix (g).\n\n2002-10-28  Don Porter  <dgp@users.sourceforge.net>\n\n\t* library/auto.tcl:\tConverted the Mac-specific [package unknown]\n\t* library/init.tcl:\tbehavior to use a chaining mechanism to extend\n\t* library/package.tcl:\tthe default [tclPkgUnknown]. [Bug 627660]\n\t* library/tclIndex:\t[Patch 624509] (steffen)\n\n2002-10-26  David Gravereaux <davygrvy@pobox.com>\n\n\t* win/makefile.vc: xcopy on NT 4.0 doesn't support the /Y switch\n\t(overwrite). Added logic to handle this. [Bug 618019]\n\n2002-10-23  Donal K. Fellows  <fellowsd@cs.man.ac.uk>\n\n\t* generic/tclInt.h: Removed definitions of obsolete HistoryEvent and\n\tHistoryRev structures (the history mechanism has been written in Tcl\n\tfor some time now.)\n\n2002-10-22  Jeff Hobbs  <jeffh@ActiveState.com>\n\n\t*** 8.4.1 TAGGED FOR RELEASE ***\n\n\t* changes: updated for 8.4.1 release\n\n\t* win/Makefile.in: removed @MEM_DEBUG_FLAGS@ subst.\n\t* win/configure: regen\n\t* win/configure.in: removed SC_ENABLE_MEMDEBUG call\n\t* win/tcl.m4: replaced SC_ENABLE_MEMDEBUG with a more intelligent\n\tSC_ENABLE_SYMBOLS that takes yes|no|mem|compile|all as options now.\n\n2002-10-22  Daniel Steffen  <das@users.sourceforge.net>\n\n\t* library/auto.tcl (tcl_findLibrary):\n\t* library/package.tcl (tclPkgUnknown): on macosx, search inside the\n\tResources/Scripts subdirectory of any potential package directory.\n\t* macosx/Tcl.pbproj/project.pbxproj: add standard Frameworks dirs to\n\tTCL_PACKAGE_PATH make argument.\n\t* unix/tclUnixInit.c (TclpSetVariables): on macosx, add embedded\n\tframework dirs to tcl_pkgPath: @executable_path/../Frameworks and\n\t@executable_path/../PrivateFrameworks (if they exist), as well as the\n\tdirs in DYLD_FRAMEWORK_PATH (if set). [Patch 624509]\n\tuse standard MAXPATHLEN instead of literal 1024\n\n2002-10-22  Donal K. Fellows  <fellowsd@cs.man.ac.uk>\n\n\t* doc/StringObj.3, doc/Object.3: Documented that Tcl_Obj's standard\n\tstring form is a modified UTF-8; apparently, this was not mentioned\n\tanywhere in the main docs, and lead to [Bug 624919].\n\n2002-10-21  Daniel Steffen  <das@users.sourceforge.net>\n\n\t* macosx/Tcl.pbproj/project.pbxproj: bumped version to 8.4.1\n\t* generic/tcl.h: Added reminder comment to edit\n\tmacosx/Tcl.pbproj/project.pbxproj when version number changes.\n\n2002-10-18  Jeff Hobbs  <jeffh@ActiveState.com>\n\n\t* library/reg/pkgIndex.tcl:\n\t* win/configure:\n\t* win/configure.in:\n\t* win/Makefile.in:\n\t* win/makefile.vc:\n\t* win/makefile.bc:    Updated to reg1.1\n\n\t* doc/registry.n:      Added support for broadcasting changes to the\n\t* tests/registry.test: registry Environment. Noted proper code in the\n\t* win/tclWinReg.c:     docs. [Patch 625453]\n\n\t* unix/Makefile.in (dist): add any mac/tcl*.sea.hqx files\n\n2002-10-17  Don Porter  <dgp@users.sourceforge.net>\n\n\t* generic/tclVar.c:\tFixed code that check for proper # of args to\n\t* tests/var.test:\t[array names]. Added test. [Bug 624755]\n\n2002-10-16  Jeff Hobbs  <jeffh@ActiveState.com>\n\n\t* win/configure:                 add workaround for cygwin windres\n\t* win/tcl.m4 (SC_CONFIG_CFLAGS): problem. [Patch 624010] (howell)\n\n2002-10-15  Jeff Hobbs  <jeffh@ActiveState.com>\n\n\t* README: added archives.tcl.tk note\n\n\t* unix/configure:\n\t* unix/tcl.m4: Correct AIX-5 ppc build flags. Correct HP 11 64-bit gcc\n\tbuilding. [Patch 601051] (martin)\n\n2002-10-15  Vince Darley  <vincentdarley@users.sourceforge.net>\n\n\t* generic/tclCmdMZ.c:\n\t* tests/trace.test: applied patch from Hemang Levana to fix [Bug\n\t615043] in execution traces with idle tasks firing.\n\n2002-10-14  Jeff Hobbs  <jeffh@ActiveState.com>\n\n\t* generic/tclEnv.c (Tcl_PutEnv): correct possible mem leak. [Patch\n\t623269] (brouwers)\n\n2002-10-11  Donal K. Fellows  <fellowsd@cs.man.ac.uk>\n\n\t* generic/tcl.h: Need a different strategy through the maze of\n\t#defines to let people building with Cygwin build correctly. Also made\n\tsome comments less misleading...\n\n2002-10-10  Jeff Hobbs  <jeffh@ActiveState.com>\n\n\t* README: fixed minor nits [Bug 607776] (virden)\n\n\t* win/configure:\n\t* win/tcl.m4: enable USE_THREAD_ALLOC (new threaded allocator) by\n\tdefault in cygwin configure on Windows.\n\n2002-10-10  Don Porter  <dgp@users.sourceforge.net>\n\n\t* doc/Tcl.n:\tClarified that namespace separators are legal in the\n\t\t\tvariable names during $-subtitution. [Bug 615139]\n\n\t* doc/regexp.n:\tTypo correction. Thanks Ronnie Brunner. [Bug 606826]\n\n2002-10-10  Vince Darley  <vincentdarley@users.sourceforge.net>\n\n\t* unix/tclLoadAout.c\n\t* unix/tclLoadDl.c\n\t* unix/tclLoadDld.c\n\t* unix/tclLoadDyld.c\n\t* unix/tclLoadNext.c\n\t* unix/tclLoadOSF.c\n\t* unix/tclLoadShl.c\n\t* win/tclWinLoad.c: allow either full paths or simply dll names to be\n\tspecified when loading files (the latter will be looked up by the OS\n\ton your PATH/LD_LIBRARY_PATH as appropriate). Fixes [Bug 611108]\n\n2002-10-09  Jeff Hobbs  <jeffh@ActiveState.com>\n\n\t* unix/README: doc'ed --enable-symbols options.\n\t* unix/Makefile.in: removed @MEM_DEBUG_FLAGS@ subst.\n\t* unix/configure: regen\n\t* unix/configure.in: removed SC_ENABLE_MEMDEBUG call\n\t* unix/tcl.m4: replaced SC_ENABLE_MEMDEBUG with a more intelligent\n\tSC_ENABLE_SYMBOLS that takes yes|no|mem|compile|all as options now.\n\n2002-10-09  Kevin B. Kenny  <kennykb@acm.org>\n\n\t* win/tclWinTime.c: Added code to set an exit handler that terminates\n\tthe thread that calibrates the performance counter, so that the thread\n\twon't outlive unloading the Tcl DLL. [Bug 620735]\n\n2002-10-09  Donal K. Fellows  <fellowsd@cs.man.ac.uk>\n\n\t* doc/binary.n: More clarification of [binary scan]'s behaviour.\n\n2002-10-09  Daniel Steffen  <das@users.sourceforge.net>\n\n\t* generic/tclIntDecls.h: fixed botched regen.\n\n2002-10-09  Daniel Steffen  <das@users.sourceforge.net>\n\n\t* generic/tclInt.decls: made TclSetPreInitScript() declaration\n\tgeneric as it is used on mac & aqua as well.\n\t* generic/tclIntDecls.h:\n\t* generic/tclStubInit.c: regen.\n\t* generic/tclCompile.h: added prototype for TclCompileVariableCmd.\n\n\t* mac/tclMacPort.h: removed incorrect <fcntl.h> definitions and\n\tobsolete <stat.h> definitions.\n\t* mac/tclMacChan.c: removed obsolete GetOpenMode() and replaced\n\tassociated constants with the <fcntl.h> analogues (they existing defs\n\twere inconsistent with <fcntl.h> which was causing havoc when\n\tTcl_GetOpenMode was used instead of private GetOpenMode).\n\n\t* mac/tclMacFCmd.c: removed GenerateUniqueName(), use equivalent (and\n\tidentically named) routine from MoreFiles instead.\n\n\t* mac/tclMacLoad.c: CONSTification, fixes to Vince's last changes.\n\n\t* mac/tclMacFile.c:\n\t* mac/tclMacTest.c:\n\t* mac/tclMacUnix.c: CONSTification.\n\n\t* mac/tclMacOSA.c: CONSTification, sprintf fixes, UH 3.4.x changes;\n\tfix for missing autoname token from TclOSACompileCmd. (bdesgraupes)\n\t* mac/AppleScript.html(AppleScript delete): doc fix. (bdesgraupes)\n\n\t* mac/tcltkMacBuildSupport.sea.hqx: updated MoreFiles to 1.5.3,\n\tupdated build instructions for 8.4.\n\t* mac/tclMacProjects.sea.hqx: rebuilt archive.\n\n2002-10-09  Donal K. Fellows  <fellowsd@cs.man.ac.uk>\n\n\t* doc/Alloc.3: Added a note to mention that attempting to allocate a\n\tzero-length block can return NULL. [Tk Bug 619544]\n\n2002-10-04  Donal K. Fellows  <fellowsd@cs.man.ac.uk>\n\n\t* doc/binary.n: Doc improvements [Patch 616480]\n\n\t* tests/fCmd.test, tests/winFCmd.test:\n\t* tools/eolFix.tcl, tools/genStubs.tcl: [file exist] -> [file exists]\n\tThanks to David Welton.\n\n2002-10-03  Don Porter  <dgp@users.sourceforge.net>\n\n\t* doc/tcltest.n: fixed typo [Bug 618018]. Thanks to \"JJM\".\n\n2002-10-03  Donal K. Fellows  <fellowsd@cs.man.ac.uk>\n\n\t* tools/man2help2.tcl:\n\t* tests/http.test, tests/httpd, tests/httpold.test:\n\t* tests/env.test, tests/binary.test, tests/autoMkindex.test:\n\t* library/init.tcl, library/http/http.tcl: [info exist] should really\n\tbe [info exists]. [Bug 602566]\n\n\t* doc/lsearch.n: Better specification of what happens when -sorted is\n\tmixed with other options. [Bug 617816]\n\n2002-10-01  Jeff Hobbs  <jeffh@ActiveState.com>\n\n\t* generic/tclProc.c (TclCreateProc): mask out VAR_UNDEFINED for\n\tprecompiled locals to support 8.3 precompiled code.\n\t(Tcl_ProcObjCmd): correct 2002-09-26 fix to look for tclProcBodyType.\n\n2002-10-01  Donal K. Fellows  <fellowsd@cs.man.ac.uk>\n\n\t* doc/socket.n: Mentioned that ports may be specified as serivce names\n\tas well as integers. [Bug 616843]\n\n2002-09-30  Jeff Hobbs  <jeffh@ActiveState.com>\n\n\t* generic/tclCompCmds.c (TclCompileRegexpCmd): correct the checking\n\tfor bad re's that didn't terminate the re string. Resultant compiles\n\twere correct, but much slower than necessary.\n\n2002-09-29  David Gravereaux <davygrvy@pobox.com>\n\n\t* win/tclAppInit.c: Added proper exiting conditions using Win32\n\tconsole signals. This handles the existing lack of a Ctrl+C exit to\n\tcall exit handlers when built for thread support. Also, properly\n\thandles exits from other conditions such as CTRL_CLOSE_EVENT,\n\tCTRL_LOGOFF_EVENT, and CTRL_SHUTDOWN_EVENT signals. In all cases,\n\texit handlers will be called. [Bug 219355]\n\n\t* win/makefile.vc: Added missing tclThreadAlloc.c to the build rules\n\tand defines USE_THREAD_ALLOC when TCL_THREADS is defined to get the\n\tnew behavior by default.\n\n2002-09-27  Don Porter  <dgp@users.sourceforge.net>\n\n\t* README:\t\tBumped to version 8.4.1 to avoid confusion of\n\t* generic/tcl.h:\tCVS snapshots with the actual 8.4.0 release.\n\t* tools/tcl.wse.in:\n\t* unix/configure.in:\n\t* unix/tcl.spec:\n\t* win/configure.in:\n\n\t* unix/configure:\tautoconf\n\t* win/configure:\n\n2002-09-26  Jeff Hobbs  <jeffh@ActiveState.com>\n\n\t* unix/configure: regen.\n\t* unix/tcl.m4: improve AIX-4/5 64bit compilation support.\n\n\t* generic/tclProc.c (Tcl_ProcObjCmd): correct overeager optimization\n\tof noop proc to handle the precompiled case. (sofer)\n\n\t* unix/ldAix (nmopts): add -X32_64 to make it work for 32 or 64bit\n\tmode compilation.\n\n\t* library/encoding/koi8-u.enc: removed extraneous spaces that confused\n\tencoding reader. [Bug 615115]\n\n\t* unix/Makefile.in: generate source dists with -src designator and do\n\tnot generate .Z anymore (just .gz and .zip).\n\n2002-09-18  Mumit Khan <khan@nanotech.wisc.edu>\n\n\tAdded basic Cygwin support.\n\n\t* win/tcl.m4 (SC_PATH_TCLCONFIG): Support one-tree build.\n\t(SC_PATH_TKCONFIG): Likewise.\n\t(SC_PROG_TCLSH): Likewise.\n\t(SC_CONFIG_CFLAGS): Assume real Cygwin port and remove -mno-cygwin\n\tflags. Add -mwin32 to extra_cflags and extra_ldflags. Remove ``-e\n\t_WinMain@16'' from LDFLAGS_WINDOW.\n\t* win/configure.in: Allow Cygwin build.\n\t(SEH test): Define to be 1 instead of empty value.\n\t(EXCEPTION_DISPOSITION): Add test.\n\t* win/configure: Regenerate.\n\n\t* generic/tcl.h: Don't explicitly define __WIN32__ for Cygwin, let the\n\tuser decide whether to use Windows or POSIX personality.\n\t(TCL_WIDE_INT_TYPE, TCL_LL_MODIFIER, struct Tcl_StatBuf): Define for\n\tCygwin.\n\t* generic/tclEnv.c (Tcl_CygwinPutenv): putenv replacement for Cygwin.\n\t* generic/tclFileName.c (Tcl_TranslateFileName): Convert POSIX to\n\tnative format.\n\t(TclDoGlob): Likewise.\n\t* generic/tclPlatDecls.h (TCHAR): Define for Cygwin.\n\t* win/tclWinPort.h (putenv, TclpSysAlloc, TclpSysFree,\n\t(TclpSysRealloc): Define for Cygwin.\n\n2002-09-26  Daniel Steffen  <das@users.sourceforge.net>\n\n\t* macosx/Makefile: preserve environment value of INSTALL_ROOT. When\n\tembedding only use deployment build. Force relink before embedded\n\tbuild to ensure new linker flags are picked up.\n\n\t* macosx/Tcl.pbproj/project.pbxproj: add symbolic links to debug lib,\n\tstub libs and tclConfig.sh in framework toplevel. Configure target\n\tdependency fix. Fix to 'clean' action. Added private tcl headers to\n\tframework. Install tclsh symbolic link. Html doc build works when no\n\tinstalled tclsh available. Made html doc structure in framework more\n\tlike in Apple frameworks.\n\n2002-09-24  Donal K. Fellows  <fellowsd@cs.man.ac.uk>\n\n\t* unix/tcl.m4 (SC_TCL_64BIT_FLAGS): Yet more robust 64-bit value\n\tdetection to close [Bug 613117] on more systems.\n\n\t* generic/tclCompile.c (TclPrintSource): More CONSTifying.\n\t* generic/tclExecute.c (EvalStatsCmd): Object-ify to reduce warnings.\n\tThanks to 'CoderX2' on the chat for bringing this to my attention...\n\n\t* unix/tcl.m4: Forgot to define TCL_WIDE_INT_IS_LONG at the\n\tappropriate moment. I believe this is the cause of [Bug 613117]\n\n\t* doc/lset.n: Changed 'list' to 'varName' for consistency with lappend\n\tdocumentation. Thanks to Glenn Jackman [Bug 611719]\n\n2002-09-22  Don Porter  <dgp@users.sourceforge.net>\n\n\t* library/tcltest/tcltest.tcl:  Corrected [puts -nonewline] within\n\ttest bodies. Thanks to Harald Kirsch. [Bug 612786, Patch 612788] Also\n\tcorrected reporting of body return code. Thanks to David Taback [Bug\n\t611922]\n\t* library/tcltest/pkgIndex.tcl: Bump to version 2.2.1.\n\t* tests/tcltest.test: added tests for these bugs.\n\n2002-09-15  Mo DeJong  <mdejong@users.sourceforge.net>\n\n\t* unix/configure: Regen.\n\t* unix/tcl.m4 (SC_CONFIG_CFLAGS): Add PEEK_XCLOSEIM define under\n\tLinux. This is used by Tk to double check that an X input context is\n\tcleaned up before it is closed.\n\n2002-09-12  David Gravereaux <davygrvy@pobox.com>\n\n\t* win/coffbase.txt: Added BLT to the virtual base address listings\n\ttable should BLT's build tools decide to use it.\n\n2002-09-12  Daniel Steffen  <das@users.sourceforge.net>\n\n\t* generic/tcl.h:\n\t* mac/tclMacApplication.r:\n\t* mac/tclMacLibrary.r:\n\t* mac/tclMacResource.r: unified use of the two equivalent resource\n\tcompiler header inclusion defines RC_INVOKED and RESOURCE_INCLUDED,\n\tnow use RC_INVOKED throughout.\n\n2002-09-10  Mo DeJong  <mdejong@users.sourceforge.net>\n\n\t* unix/README: Add note about building extensions with the same\n\tcompiler Tcl was built with. [Tk Bug 592096]\n\n2002-09-10  Daniel Steffen  <das@users.sourceforge.net>\n\n\t* macosx/Tcl.pbproj/project.pbxproj: disabled building html\n\tdocumentation during embedded build.\n\n2002-09-10  Daniel Steffen  <das@users.sourceforge.net>\n\n\t* unix/Makefile.in: added DYLIB_INSTALL_DIR variable for macosx and\n\tset it to default value ${LIB_RUNTIME_DIR}\n\t* unix/tcl.m4 (Darwin): use DYLIB_INSTALL_DIR instead of\n\tLIB_RUNTIME_DIR in the -install_name argument to ld.\n\t* unix/configure: regen.\n\n\t* macosx/Tcl.pbproj/project.pbxproj:\n\t* macosx/Makefile: added support for building Tcl as an embedded\n\tframework, i.e. using an dyld install_name containing\n\t@executable_path/../Frameworks via the new DYLIB_INSTALL_DIR\n\tunix/Makefile variable.\n\n2002-09-10  Jeff Hobbs  <jeffh@ActiveState.com>\n\n\t*** 8.4.0 TAGGED FOR RELEASE ***\n\n2002-09-06  Don Porter  <dgp@users.sourceforge.net>\n\n\t* doc/file.n:  Format correction, and clarified [file normalize]\n\treturns an absolute path.\n\n\t* doc/tcltest.n:  Added examples section, as long promised.\n\n2002-09-06  Reinhard Max  <max@suse.de>\n\n\t* tests/tcltest.test: Added nonRoot flag to tests 8.3, 8.4, and 8.12.\n\n2002-09-05  Don Porter  <dgp@users.sourceforge.net>\n\n\t* doc/tcltest.n:  Clarified phrasing.\n\n\t* generic/tclBasic.c (TclRenameCommand,CallCommandTraces):\n\t* tests/trace.test (trace-27.1): Corrected memory leak when a rename\n\ttrace deleted the command being traced. Test added. Thanks to Hemang\n\tLavana for the fix. [Bug 604609]\n\n\t* generic/tclVar.c (TclDeleteVars):  Corrected logic for setting the\n\tTCL_INTERP_DESTROYED flag when calling variable traces. [Tk Bug 605121]\n\n2002-09-04  Miguel Sofer  <msofer@users.sourceforge.net>\n\n\t* generic/tclVar.c (DeleteArray): leak plug [Bug 604239]. Thanks to\n\tdkf and dgp for the long and difficult discussion in the chat.\n\n2002-09-03  Jeff Hobbs  <jeffh@ActiveState.com>\n\n\t* generic/tclVar.c (Tcl_UpVar2): code cleanup to not use goto\n\n\t* unix/configure: remove -pthread from LIBS on FreeBSD in thread\n\t* unix/tcl.m4:    enabled build. [Bug 602849]\n\n2002-09-03  Miguel Sofer  <msofer@users.sourceforge.net>\n\n\t* generic/tclInterp.c (AliasCreate): a Tcl_Obj was leaked on error\n\treturn from TclPreventAliasLoop.\n\n2002-09-03  Daniel Steffen  <das@users.sourceforge.net>\n\n\t* macosx/Tcl.pbproj/project.pbxproj: Bumped version number to 8.4.0\n\tand updated copyright info.\n\n2002-09-03  Miguel Sofer  <msofer@users.sourceforge.net>\n\n\t* generic/tclVar.c (Tcl_UpVar2): a Tcl_Obj was being leaked on error\n\treturn from TclGetFrame.\n\n2002-09-03  Don Porter  <dgp@users.sourceforge.net>\n\n\t* changes:  Updated changes for 8.4.0 release.\n\n2002-09-02  Jeff Hobbs  <jeffh@ActiveState.com>\n\n\t* unix/tclUnixFile.c (TclpObjLink): removed unnecessary/unfreed extra\n\tnative char*.\n\n\t* unix/tclUnixChan.c (Tcl_MakeTcpClientChannel): make sure to init\n\tflags field of TcpState ptr to 0.\n\n\t* unix/configure:\n\t* unix/tcl.m4: added 64-bit gcc compilation support on HP-11.\n\t[Patch 601051] (martin)\n\n\t* README:\t\tBumped version number to 8.4.0\n\t* generic/tcl.h:\n\t* tools/tcl.wse.in:\n\t* unix/configure:\n\t* unix/configure.in:\n\t* unix/tcl.spec:\n\t* win/README.binary:\n\t* win/configure:\n\t* win/configure.in:\n\n\t* generic/tclInterp.c (SlaveCreate): make sure that the memory and\n\tcheckmem commands are initialized in non-safe slave interpreters when\n\tTCL_MEM_DEBUG is used. [Bug 583445]\n\n\t* win/tclWinConsole.c (ConsoleCloseProc): only wait on writable pipe\n\tif there was something to write. This may prevent infinite wait on\n\texit.\n\n\t* tests/exec.test: marked exec-18.1 unixOnly until the Windows\n\tincompatability (in the test, not the core) can be resolved.\n\n\t* tests/http.test (http-3.11): added close $fp that was causing an\n\terror on Windows because the file was not closed before deleting.\n\n\t* unix/tclUnixInit.c (Tcl_MacOSXGetLibraryPath): made this static\n\tfunction only appear when HAVE_CFBUNDLE is defined.\n\n2002-08-31  Daniel Steffen  <das@users.sourceforge.net>\n\n\t* unix/tcl.m4: added TK_SHLIB_LD_EXTRAS analogue of existing\n\tTCL_SHLIB_LD_EXTRAS for linker settings only used when linking Tk.\n\n\t* unix/configure: regen\n\n2002-08-31  Daniel Steffen  <das@users.sourceforge.net>\n\n\t*** macosx-8-4-branch merged into the mainline [Patch 602770] ***\n\n\t* generic/tcl.decls: added new macosx specific entry to stubs table.\n\n\t* tools/genStubs.tcl: added generation of platform guards for\n\tmacosx. This is a little more complex than it seems, because MacOS X\n\tIS \"unix\" plus a little bit, for the purposes of Tcl. BUT\n\tunfortunately, Tk uses \"unix\" to mean X11. So added platform keys for\n\tmacosx (the little added to \"unix\"), \"aqua\" and \"x11\" to distinguish\n\tthese for Tk.\n\n\t* generic/tcl.h: added a #ifnded RESOURCE_INCLUDED so that tcl.h can\n\tbe passed to the resource compiler.\n\n\t* generic/tcl.h:\n\t* generic/tclNotify.c: added a few Notifier procs, to be able to\n\tmodify more bits of the Tcl notifier dynamically. Required to get Mac\n\tOS X Tk to live on top of the Tcl Unix threaded notifier. Changes the\n\tsize of the Tcl_NotifierProcs structure, but doesn't move any elements\n\taround.\n\n\t* unix/tclUnixNotfy.c: moved the call to Tcl_ConditionNotify till\n\tAFTER we are done mucking with the pointer swap. Fixes cases where the\n\tthread waiting on the condition wakes & accesses the waitingListPtr\n\tbefore it gets reset, causing a hang.\n\n\t* library/auto.tcl (tcl_findLibrary): added checking the directories\n\tin the tcl_pkgPath for library files on macosx to enable support of\n\tthe standard Mac OSX library locations.\n\n\t* unix/Makefile.in:\n\t* unix/configure.in:\n\t* unix/tcl.m4: added MAC_OSX_DIR. Added PLAT_OBJS to the OBJS: there\n\tare some MacOS X specific files now for Tcl, and when I get the\n\tresource & applescript stuff ported over, and restore support for\n\tFindFiles, etc, there will be a few more. Added LD_LIBRARY_PATH_VAR\n\tconfigure variable to avoid having to set all possible LD_LIBRARY_PATH\n\tanalogues on all platforms. LD_LIBRARY_PATH_VAR is \"LD_LIBRARY_PATH\"\n\tby default, \"LIBPATH\" on AIX, \"SHLIB_PATH\" on HPUX and\n\t\"DYLD_LIBRARY_PATH\" on Mac OSX. Added configure option to package Tcl\n\tas a framework on Mac OSX.\n\n\t* macosx/tclMacOSXBundle.c (new): support for finding Tcl extension\n\tpackaged as 'bundles' in the standard Mac OSX library locations.\n\n\t* unix/tclUnixInit.c: added support for findig the tcl script library\n\tinside Tcl packaged as a framework on Mac OSX.\n\n\t* macosx/Tcl.pbproj/jingham.pbxuser (new):\n\t* macosx/Tcl.pbproj/project.pbxproj (new): project for Apple's\n\tProjectBuilder IDE.\n\n\t* macosx/Makefile (new): simple makefile for building the project from\n\tthe command line via the ProjectBuilder tool 'pbxbuild'.\n\n\t* unix/configure:\n\t* generic/tclStubInit.c:\n\t* generic/tclPlatDecls.h: regen\n\n2002-08-29  Andreas Kupries  <andreas_kupries@users.sourceforge.net>\n\n\t* win/tclWinThrd.c (TclpFinalizeThreadData, TclWinFreeAllocCache):\n\tApplied patch for [Bug 599428], provided by Miguel Sofer\n\t<msofer@users.sourceforge.net>.\n\n2002-08-28  David Gravereaux <davygrvy@pobox.com>\n\n\t* generic/tclEnv.c:\n\t* unix/configure.in:\n\t* win/tclWinPort.h:  putenv() on some systems copies the buffer rather\n\tthan taking reference to it. This causes memory leaks and is know to\n\teffect mswindows (msvcrt) and NetBSD 1.5.2 . This patch tests for this\n\tbehavior and turns on -DHAVE_PUTENV_THAT_COPIES=1 when approriate.\n\tThanks to David Welton for assistance. [Bug 414910]\n\n\t* unix/configure: regen'd\n\n2002-08-28  Donal K. Fellows  <fellowsd@cs.man.ac.uk>\n\n\t* doc/eval.n: Added mention of list command and corrected \"SEE ALSO\".\n\n\t* unix/configure.in: Cache handling of ac_cv_type_socklen_t was wrong.\n\t[Bug 600931] reported by John Ellson. Fixed by putting the brackets\n\twhere they belong.\n\n2002-08-26  Miguel Sofer  <msofer@users.sourceforge.net>\n\n\t* generic/tclCompCmds.c: fix for [Bug 599788] (error in element name\n\tcausing segfault), reported by Tom Wilkason. Fixed by copying the\n\ttokens instead of the source string.\n\n2002-08-26  Miguel Sofer  <msofer@users.sourceforge.net>\n\n\t* generic/tclThreadAlloc.c: small optimisation, reducing the new\n\tallocator's overhead.\n\n2002-08-23  Miguel Sofer  <msofer@users.sourceforge.net>\n\n\t* generic/tclObj.c (USE_THREAD_ALLOC): fixed leak [Bug 597936]. Thanks\n\tto Zoran Vasiljevic.\n\n2002-08-23  Miguel Sofer  <msofer@users.sourceforge.net>\n\n\t* generic/tclThreadAlloc.c (USE_THREAD_ALLOC): moving objects between\n\tcaches as a block, instead of one-by-one.\n\n2002-08-22  Miguel Sofer  <msofer@users.sourceforge.net>\n\n\t* generic/tclBasic.c:\n\t* generic/tclCmdMZ.c: fix for freed memory r/w in delete traces [Bug\n\t589863], patch by Hemang Lavana.\n\n2002-08-20  Andreas Kupries  <andreas_kupries@users.sourceforge.net>\n\n\t* win/Makefile.in (CFLAGS):\n\t* unix/Makefile.in (MEM_DEBUG_FLAGS): Added usage of @MEM_DEBUG_FLAGS@.\n\t* win/configure.in:\n\t* unix/configure.in: Added usage of SC_ENABLE_MEMDEBUG.\n\t* win/tcl.m4:\n\t* unix/tcl.m4: Added macro SC_ENABLE_MEMDEBUG. Allows a user of\n\tconfigure to (de)activate memory validation and debugging\n\t(TCL_MEM_DEBUG). No need to modify the makefile anymore.\n\n2002-08-20  Don Porter  <dgp@users.sourceforge.net>\n\n\t* generic/tclCkalloc.c:\tCONSTified MemoryCmd and CheckmemCmd.\n\n\t* README:\t\tBumped version number to 8.4b3 to distinguish\n\t* generic/tcl.h:\tHEAD from the 8.4b2 release.\n\t* tools/tcl.wse.in:\n\t* unix/configure.in:\n\t* unix/tcl.spec:\n\t* win/README.binary:\n\t* win/configure.in:\n\n\t* unix/configure:\tautoconf\n\t* win/configure:\n\n\t* library/http/http.tcl:\tCorrected installation directory of\n\t* library/msgcat/msgcat.tcl:\tthe package tcltest 2.2. Added\n\t* library/opt/optparse.tcl:\tcomments in other packages to remind\n\t* library/tcltest/tcltest.tcl:\tthat installation directories need\n\t* unix/Makefile.in:\t\tupdates to match increasing version\n\t* win/Makefile.in:\t\tnumbers. [Bug 597450]\n\t* win/makefile.bc:\n\t* win/makefile.vc:\n\n2002-08-19  Andreas Kupries  <andreas_kupries@users.sourceforge.net>\n\n\t* unix/tclUnixTest.c (TestfilehandlerCmd): Changed readable/writable\n\tto the more common readable|writable. Fixes [Bug 596034] reported by\n\tLarry Virden <lvirden@users.sourceforge.net>.\n\n2002-08-16  Donal K. Fellows  <fellowsd@cs.man.ac.uk>\n\n\t* tests/fCmd.test: Added test to make sure that the cause of the\n\tproblem is detectable with an unpatched Tcl.\n\t* doc/ObjectType.3: Added note on the root cause of this problem to\n\tthe documentation, since it is possible for user code to trigger this\n\tsort of behaviour too.\n\t* generic/tclIOUtil.c (SetFsPathFromAny): Objects should only have\n\ttheir old representation deleted when we know that we are about to\n\tinstall a new one. This stops a weird TclX bug under Linux with\n\tcertain kinds of memory debugging enabled which essentally came down\n\tto a double-free of a string.\n\n2002-08-14  Miguel Sofer  <msofer@users.sourceforge.net>\n\n\t* generic/tclInt.h:\n\t* generic/tclObj.c: (code cleanup) factored the parts in the macros\n\tTclNewObj() / TclDecrRefCount() into a common part for all\n\tmemory allocators and two new macros TclAllocObjStorage() /\n\tTclFreeObjStorage() that are specific to each allocator and fully\n\tdescribe the differences. Removed allocator-specific code from\n\ttclObj.c by using the macros.\n\n2002-08-12  Miguel Sofer  <msofer@users.sourceforge.net>\n\n\t* generic/tclCmdMZ.c: fixing UMR in delete traces, [Bug 589863].\n\n2002-08-08  David Gravereaux <davygrvy@pobox.com>\n\n\t* tools/man2help.tcl: Fixed $argv handling bug where if -bitmap wasn't\n\tspecified $argc was off by one.\n\n2002-08-08  Miguel Sofer  <msofer@users.sourceforge.net>\n\n\t* tests/uplevel.test: added 6.1 to test [uplevel] with shadowed\n\tcommands [Bug 524383]\n\n\t* tests/subst.test: added 5.8-10 as further tests for [Bug 495207]\n\n2002-08-08  Don Porter  <dgp@users.sourceforge.net>\n\n\t* tests/README: Noted removal of defs.tcl.\n\n2002-08-08  Jeff Hobbs  <jeffh@ActiveState.com>\n\n\t* doc/lsearch.n: corrected lsearch docs to use -inline in examples.\n\n\t*** 8.4b2 TAGGED FOR RELEASE ***\n\n\t* tests/fCmd.test:\n\t* tests/unixFCmd.test: updated tests for new link copy behavior.\n\t* generic/tclFCmd.c (CopyRenameOneFile): changed the behavior to\n\tfollow links to endpoints and copy that file/directory instead of just\n\tcopying the surface link. This means that trying to copy a link that\n\thas no endpoint (danling link) is an error. [Patch 591647] (darley)\n\t(CopyRenameOneFile): this is currently disabled by default until\n\tfurther issues with such behavior (like relative links) can be\n\thandled correctly.\n\n\t* tests/README: slight wording improvements\n\n2002-08-07  Miguel Sofer  <msofer@users.sourceforge.net>\n\n\t* docs/BoolObj.3: added description of valid string reps for a\n\tboolean object. [Bug 584794]\n\t* generic/tclObj.c: optimised Tcl_GetBooleanFromObj and\n\tSetBooleanFromAny to avoid parsing the string rep when it can be\n\tavoided. [Bugs 584650, 472576]\n\n2002-08-07  Miguel Sofer  <msofer@users.sourceforge.net>\n\n\t* generic/tclCompile.h:\n\t* generic/tclObj.c: making tclCmdNameType static ([Bug 584567], Don\n\tPorter).\n\n2002-08-07  Miguel Sofer  <msofer@users.sourceforge.net>\n\n\t* generic/tclObj.c (Tcl_NewObj): added conditional code for\n\tUSE_THREAD_ALLOC; objects allocated through Tcl_NewObj() were\n\totherwise being leaked. [Bug 587488] reported by Sven Sass.\n\n2002-08-06  Daniel Steffen  <das@users.sourceforge.net>\n\n\t* generic/tclInt.decls:\n\t* unix/tclUnixThrd.c: Added stubs and implementations for\n\tnon-threaded build for the tclUnixThrd.c procs TclpReaddir,\n\tTclpLocaltime, TclpGmtime and TclpInetNtoa. Fixes link errors in\n\tstubbed & threaded extensions that include tclUnixPort.h and use any\n\tof the procs readdir, localtime, gmtime or inet_ntoa (e.g. TclX 8.4)\n\t[Bug 589526]\n\t* generic/tclIntPlatDecls.h:\n\t* generic/tclStubInit.c: Regen.\n\n2002-08-05  Don Porter  <dgp@users.sourceforge.net>\n\n\t* library/tcltest/tcltest.tcl:\tThe setup and cleanup scripts are now\n\t* library/tcltest/pkgIndex.tcl:\tskipped when a test is skipped, fixing\n\t* tests/tcltest.test:\t\t[Bug 589859]. Test for bug added, and\n\tcorrected tcltest package bumped to version 2.2.\n\n\t* generic/tcl.decls:\tRestored Tcl_Concat to return (char *). Like\n\t* generic/tclDecls.h:\tTcl_Merge, it transfers ownership of a dynamic\n\t* generic/tclUtil.c:\tallocated string to the caller.\n\n2002-08-04  Don Porter  <dgp@users.sourceforge.net>\n\n\t* doc/CmdCmplt.3:\tApplied Patch 585105 to fully CONST-ify all\n\t* doc/Concat.3:\t\tremaining public interfaces of Tcl. Notably,\n\t* doc/CrtCommand.3:\tthe parser no longer writes on the string it\n\t* doc/CrtSlave.3:\tis parsing, so it is no longer necessary for\n\t* doc/CrtTrace.3:\tTcl_Eval() to be given a writable string. Also\n\t* doc/Eval.3:\t\tthe refactoring of the Tcl_*Var* routines by\n\t* doc/ExprLong.3:\tby Miguel Sofer is included, so that the\n\t* doc/LinkVar.3:\t\"part1\" argument for them no longer needs to\n\t* doc/ParseCmd.3:\tbe writable either.\n\t* doc/SetVar.3:\n\t* doc/TraceVar.3:\n\t* doc/UpVar.3:\t\tCompatibility support has been enhanced so\n\t* generic/tcl.decls:\tthat a #define of USE_NON_CONST will remove\n\t* generic/tcl.h:\tall possible source incompatibilities with the\n\t* generic/tclBasic.c:\t8.3 version of the header file(s). The new\n\t* generic/tclCmdMZ.c:\t#define of USE_COMPAT_CONST now does what\n\t* generic/tclCompCmds.c:USE_NON_CONST used to do -- disable only those\n\t* generic/tclCompExpr.c:new CONST's that introduce irreconcilable\n\t* generic/tclCompile.c:\tincompatibilities.\n\t* generic/tclCompile.h:\n\t* generic/tclDecls.h:\tSeveral bugs are also fixed by this patch.\n\t* generic/tclEnv.c:\t[Bugs 584051,580433] [Patches 585105,582429]\n\t* generic/tclEvent.c:\n\t* generic/tclInt.decls:\n\t* generic/tclInt.h:\n\t* generic/tclIntDecls.h:\n\t* generic/tclInterp.c:\n\t* generic/tclLink.c:\n\t* generic/tclObj.c:\n\t* generic/tclParse.c:\n\t* generic/tclParseExpr.c:\n\t* generic/tclProc.c:\n\t* generic/tclTest.c:\n\t* generic/tclUtf.c:\n\t* generic/tclUtil.c:\n\t* generic/tclVar.c:\n\t* mac/tclMacTest.c:\n\t* tests/expr-old.test:\n\t* tests/parseExpr.test:\n\t* unix/tclUnixTest.c:\n\t* unix/tclXtTest.c:\n\t* win/tclWinTest.c:\n\n2002-08-01  Miguel Sofer  <msofer@users.sourceforge.net>\n\n\t* generic/tclExecute.c: bugfix (reading freed memory). Testsuite\n\tpassed on linux/i386, compile-13.1 hung on linux/alpha.\n\n2002-08-01  Miguel Sofer  <msofer@users.sourceforge.net>\n\n\t* generic/tclExecute.c: added a reference count for the complete\n\texecution stack, instead of Tcl_Preserve/Tcl_Release.\n\n2002-08-01  Mo DeJong  <mdejong@users.sourceforge.net>\n\n\t* generic/tclCkalloc.c (TclFinalizeMemorySubsystem): Don't lock the\n\tckalloc mutex before invoking the Tcl_DumpActiveMemory function since\n\tit also locks the same mutex. This code is only executed when \"memory\n\tonexit filename\" has been executed and Tcl is compiled with\n\t-DTCL_MEM_DEBUG.\n\n2002-08-01  Reinhard Max  <max@suse.de>\n\n\t* win/tclWinPort.h: The windows headers don't provide socklen_t, so we\n\thave to do it.\n\n2002-07-31  Miguel Sofer  <msofer@users.sourceforge.net>\n\n\t* generic/tclInt.h (USE_THREAD_ALLOC): for unshared objects,\n\tTclDecrRefCount now frees the internal rep before the string rep -\n\tjust like the non-macro Tcl_DecrRefCount/TclFreeObj [Bug 524802]. For\n\tthe other allocators the fix was done on 2002-03-06.\n\n2002-07-31  Miguel Sofer  <msofer@users.sourceforge.net>\n\n\t* generic/tclInterp.c: signed/unsigned comparison warning fixed\n\t(Vince Darley).\n\n2002-07-31  Donal K. Fellows  <fellowsd@cs.man.ac.uk>\n\n\t* unix/tcl.m4 (SC_BUGGY_STRTOD): Enabled caching of test results.\n\n\t* unix/tcl.m4 (SC_BUGGY_STRTOD): Solaris 2.8 still has a buggy\n\tstrtod() implementation; make sure we detect it.\n\n\t* tests/expr.test (expr-22.*): Marked as non-portable because it seems\n\tthat these tests have an annoying tendency to fail in unexpected ways.\n\t[Bugs 584825, 584950, 585986]\n\n2002-07-30  Andreas Kupries  <andreas_kupries@users.sourceforge.net>\n\n\t* tests/io.test:\n\t* generic/tclIO.c (WriteChars): Added flag to break out of loop if\n\tnothing of the input is consumed at all, to prevent infinite looping\n\tof called with a non-UTF-8 string. Fixes Bug 584603 (partially). Added\n\tnew test \"io-60.1\". Might need additional changes to Tcl_Main so that\n\tunprintable results are printed as binary data.\n\n2002-07-29  Mo DeJong  <mdejong@users.sourceforge.net>\n\n\t* unix/Makefile.in: Use CC_SEARCH_FLAGS instead of LD_SEARCH_FLAGS\n\twhen linking with ${CC}.\n\t* unix/configure: Regen.\n\t* unix/configure.in: Don't subst CC_SEARCH_FLAGS or LD_SEARCH_FLAGS\n\tsince this is now done in tcl.m4.\n\t* unix/tcl.m4 (SC_CONFIG_CFLAGS): Document and set CC_SEARCH_FLAGS\n\twhenever LD_SEARCH_FLAGS is set. [Patch 588290]\n\n2002-07-29  Reinhard Max  <max@suse.de>\n\n\t* unix/tcl.m4 (SC_SERIAL_PORT): Fixed detection for cases when\n                                        configure's stdin is not a tty.\n\n\t* unix/tclUnixPort.h:\n\t* generic/tclIOSock.c:          Changed size_t to socklen_t in\n                                        socket-related function calls.\n\n\t* unix/configure.in:            Added test and fallback definition\n                                        for socklen_t.\n\n\t* unix/configure:               generated.\n\n2002-07-29  Miguel Sofer  <msofer@users.sourceforge.net>\n\n\t* generic/tclObj.c: fixed a comment\n\n\t* generic/tcl.h:\n\t* generic/tclBasic.c:\n\t* generic/tclInterp.c: added the new flag TCL_EVAL_INVOKE to the\n\tinterface of the Tcl_Eval* functions, removing the\n\tTCL_EVAL_NO_TRACEBACK added yesterday: alias invocations not only\n\trequire no tracebacks, but also look up the command name in the global\n\tscope - see new test interp-9.4\n\t* tests/interp.test: added 9.3 to test for safety of aliases to hidden\n\tcommands, 9.4 to test for correct command lookup scope.\n\n2002-07-29  Donal K. Fellows  <fellowsd@cs.man.ac.uk>\n\n\t* generic/regc_locale.c (cclass): [[:xdigit:]] is only a defined\n\tconcept on western characters, so should not allow any unicode digit,\n\tand hence number of ranges in [[:xdigit:]] is fixed.\n\t* tests/reg.test: Added test to detect the bug.\n\t* generic/regc_cvec.c (newcvec): Corrected initial size value in\n\tcharacter vector structure. [Bug 578363] Many thanks to\n\tpvgoran@users.sf.net for tracking this down.\n\n2002-07-28  Miguel Sofer  <msofer@users.sourceforge.net>\n\n\t* generic/tcl.h:\n\t* generic/tclBasic.c: added the new flag TCL_EVAL_NO_TRACEBACK to the\n\tinterface of the Tcl_Eval* functions. Modified the error message for\n\ttoo many nested evaluations.\n\t* generic/tclInterp.h: changed the Alias struct to be of variable\n\tlength and store the prefix arguments directly (instead of a pointer\n\tto a Tcl_Obj list). Made AliasObjCmd call Tcl_EvalObjv instead of\n\tTclObjInvoke - thus making aliases trigger execution traces [Bug\n\t582522].\n\t* tests/interp.test:\n\t* tests/stack.test: adapted to the new error message.\n\t* tests/trace.test: added tests for aliases firing the exec traces.\n\n2002-07-27  Mo DeJong  <mdejong@users.sourceforge.net>\n\n\t* unix/Makefile.in: Revert fix for Tcl bug 529801 since it was\n\tincorrect and broke the build on other systems. Fix [Bug 587299]. Add\n\tMAJOR_VERSION, MINOR_VERSION, PATCH_LEVEL, SHLIB_LD_FLAGS,\n\tSHLIB_LD_LIBS, CC_SEARCH_FLAGS, LD_SEARCH_FLAGS, and LIB_FILE\n\tvariables to support more generic library build/install rules.\n\t* unix/configure: Regen.\n\t* unix/configure.in: Move AC_PROG_RANLIB into tcl.m4. Move shared\n\tbuild test and setting of MAKE_LIB and MAKE_STUB_LIB into tcl.m4. Move\n\tsubst of a number of variables into tcl.m4 where they are defined.\n\t* unix/tcl.m4 (SC_ENABLE_SYMBOLS, SC_CONFIG_CFLAGS): Subst vars where\n\tthey are defined. Add MAKE_LIB, MAKE_STUB_LIB, INSTALL_LIB, and\n\tINSTALL_STUB_LIB rules to deal with the ugly details of running ranlib\n\ton static libs at build and install time. Replace TCL_SHLIB_LD_EXTRAS\n\twith SHLIB_LD_FLAGS and use it when building a shared library.\n\t* unix/tclConfig.sh.in: Add TCL_CC_SEARCH_FLAGS.\n\n2002-07-26  Miguel Sofer  <msofer@users.sourceforge.net>\n\n\t* generic/tclExecute.c: fixed Tcl_Obj leak in code corresponding to\n\tthe macro NEXT_INST_V(x, 0, 1) [Bug 587495].\n\n2002-07-26  Miguel Sofer  <msofer@users.sourceforge.net>\n\n\t* generic/tclVar.c (TclObjLookupVar): leak fix and improved comments.\n\n2002-07-26  Jeff Hobbs  <jeffh@ActiveState.com>\n\n\t* generic/tclVar.c (TclLookupVar): removed early returns that\n\tprevented the parens from being restored. Also removed goto label as\n\tit was not necessary.\n\n2002-07-24  Miguel Sofer  <msofer@users.sourceforge.net>\n\n\t* generic/tclExecute.c:\n\t* tests/expr-old.test: fix for erroneous error messages in [expr],\n\t[Bug 587140] reported by Martin Lemburg.\n\n2002-07-25  Joe English  <jenglish@users.sourceforge.net>\n\n\t* generic/tclProc.c: fix for [Tk Bug 219218] \"error handling with\n\tbgerror in Tk\"\n\n2002-07-24  Miguel Sofer  <msofer@users.sourceforge.net>\n\n\t* generic/tclExecute.c: restoring full TCL_COMPILE_DEBUG\n\tfunctionality.\n\n2002-07-24  Don Porter  <dgp@users.sourceforge.net>\n\n\t* tests/unixInit.test: relaxed unixInit-3.1 to accept iso8859-15 as a\n\tvalid C encoding. [Bug 575336]\n\n2002-07-24  Miguel Sofer  <msofer@users.sourceforge.net>\n\n\t* generic/tclExecute.c: restoring the tcl_traceCompile functionality\n\twhile I repair tcl_traceExec. The core now compiles and runs also\n\tunder TCL_COMPILE_DEBUG, but execution in the bytecode engine can\n\tstill not be traced.\n\n2002-07-24  Daniel Steffen  <das@users.sourceforge.net>\n\n\t* unix/Makefile.in:\n\t* unix/configure.in: corrected fix for [Bug 529801]: ranlib only\n\tneeded for static builds on Mac OS X.\n\t* unix/configure: Regen.\n\t* unix/tclLoadDyld.c: fixed small bugs introduced by Vince,\n\timplemented library unloading correctly (needs OS X 10.2).\n\n2002-07-23  Joe English  <jenglish@users.sourceforge.net>\n\n\t* doc/OpenFileChnl.3: (Updates from Larry Virden)\n\t* doc/open.n:\n\t* doc/tclsh.1: Fix section numbers in Unix man page references.\n\t* doc/lset.n:  In EXAMPLES section, include command to set the initial\n\tvalue used in subsequent examples.\n\t* doc/http.n: Package version updated to 2.4.\n\n2002-07-23  Mo DeJong  <mdejong@users.sourceforge.net>\n\n\t* unix/configure: Regen.\n\t* unix/tcl.m4 (SC_CONFIG_CFLAGS): Enable 64 bit compilation when using\n\tthe native compiler on a 64 bit version of IRIX. [Bug 219220]\n\n2002-07-23  Mo DeJong  <mdejong@users.sourceforge.net>\n\n\t* unix/Makefile.in: Combine ranlib tests and avoid printing unless\n\tranlib is actually run.\n\n2002-07-23  Mo DeJong  <mdejong@users.sourceforge.net>\n\n\t* unix/tcl.m4 (SC_PATH_X): Set XINCLUDES to \"\" instead of \"# no\n\tspecial path needed\" or \"# no include files found\" when x headers\n\tcannot be located.\n\n2002-07-22  Vince Darley  <vincentdarley@users.sourceforge.net>\n\n\t* generic/tclIOUtil.c: made tclNativeFilesystem static (since 07-19\n\tchanges removed its usage elsewhere), and added comments about its\n\tusage.\n\t* generic/tclLoad.c:\n\t* generic/tcl.h:\n\t* generic/tcl.decls:\n\t* doc/FileSystem.3: converted last load-related ClientData parameter\n\tto Tcl_LoadHandle opaque structure, removing a couple of casts in the\n\tprocess.\n\n\t* generic/tclInt.h: removed tclNativeFilesystem declaration since it\n\tis now static again.\n\n2002-07-22  Donal K. Fellows  <fellowsd@cs.man.ac.uk>\n\n\t* tests/expr.test (expr-22.*): Added tests to help detect the\n\tcorrected handling.\n\t* generic/tclExecute.c (IllegalExprOperandType): Improved error\n\tmessage generated when attempting to manipulate Inf and NaN values.\n\t* generic/tclParseExpr.c (GetLexeme): Allowed parser to recognise\n\t'Inf' as a floating-point number. [Bug 218000]\n\n2002-07-21  Don Porter  <dgp@users.sourceforge.net>\n\n\t* tclIOUtil.c: Silence compiler warning. [Bug 584408].\n\n2002-07-19  Vince Darley  <vincentdarley@users.sourceforge.net>\n\n\t* generic/tclIOUtil.c: fix to GetFilesystemRecord\n\t* win/tclWinFile.c:\n\t* unix/tclUnixFile.c: fix to subtle problem with links shown up by\n\tlatest tclkit builds.\n\n2002-07-19  Mo DeJong  <mdejong@users.sourceforge.net>\n\n\t* unix/configure:\n\t* unix/configure.in:\n\t* win/configure:\n\t* win/configure.in: Add AC_PREREQ(2.13) in an attempt to make it more\n\tclear that the configure scripts must be generated with autoconf\n\tversion 2.13. [Bug 583573]\n\n2002-07-19  Vince Darley  <vincentdarley@users.sourceforge.net>\n\n\t* unix/Makefile.in: fix to build on MacOS X [Bug 529801], bug report\n\tand fix from jcw.\n\n2002-07-19  Donal K. Fellows  <fellowsd@cs.man.ac.uk>\n\n\t* win/tclWinSerial.c (no_timeout): Made this variable static.\n\n\t* generic/tclExecute.c, generic/tclCompile.c, generic/tclBasic.c:\n\t* generic/tclCompile.h (builtinFuncTable, instructionTable): Added\n\tprefix to these symbols because they are visible outside the Tcl\n\tlibrary.\n\n\t* generic/tclCompExpr.c (operatorTable):\n\t* unix/tclUnixTime.c (tmKey):\n\t* generic/tclIOUtil.c (theFilesystemEpoch, filesystemWantToModify,\n\tfilesystemIteratorsInProgress, filesystemOkToModify): Made these\n\tvariables static.\n\n\t* unix/tclUnixFile.c:\t\tRenamed nativeFilesystem to\n\t* win/tclWinFile.c:\t\ttclNativeFilesystem and declared\n\t* generic/tclIOUtil.c:\t\tit properly in tclInt.h\n\t* generic/tclInt.h:\n\n\t* generic/tclUtf.c (totalBytes): Made this array static and const.\n\n\t* generic/tclParse.c (typeTable): Made this array static and const.\n\t(Tcl_ParseBraces): Simplified error handling case so that scans are\n\tonly performed when needed, and flags are simpler too.\n\n\t* license.terms: Added AS to list of copyright holders; it's only\n\tfair for the current gatekeepers to be listed here!\n\n\t* tests/cmdMZ.test: Renamed constraint for clarity. [Bug 583427]\n\tAdded tests for the [time] command, which was previously only\n\tindirectly tested!\n\n2002-07-18  Vince Darley  <vincentdarley@users.sourceforge.net>\n\n\t* generic/tclInt.h:\n\t* generic/tcl.h:\n\t* */*Load*.c: added comments on changes of 07/17 and replaced\n\tclientData with Tcl_LoadHandle in all locations.\n\n\t* generic/tclFCmd.c:\n\t* tests/fileSystem.test: fixed a 'knownBug' with 'file attributes \"\"'\n\t* tests/winFCmd.test:\n\t* tests/winPipe.test:\n\t* tests/fCmd.test:\n\t* tessts/winFile.test: added 'pcOnly' constraint to some tests to make\n\tfor more useful 'tests skipped' log from running all tests on\n\tnon-Windows platforms.\n\n2002-07-17  Miguel Sofer  <msofer@users.sourceforge.net>\n\n\t* generic/tclBasic.c (CallCommandTraces): delete traces now receive\n\tthe FQ old name of the command. [Bug 582532] (Don Porter)\n\n2002-07-18  Vince Darley  <vincentdarley@users.sourceforge.net>\n\n\t* tests/ioUtil.test: added constraints to 1.4,2.4 so they don't run\n\toutside of tcltest. [Bugs 583276, 583277]\n\n2002-07-17  Miguel Sofer  <msofer@users.sourceforge.net>\n\n\t* generic/tclVar.c (DupParsedVarName): nasty bug fixed, reported by\n\tVince Darley.\n\n2002-07-17  Miguel Sofer  <msofer@users.sourceforge.net>\n\n\t* generic/tclVar.c (TclPtrIncrVar): missing CONST in declarations,\n\tinconsistent with tclInt.h. Thanks to Vince Darley for reporting, boo\n\tto gcc for not complaining.\n\n2002-07-17  Vince Darley  <vincentdarley@users.sourceforge.net>\n\n\t* generic/tclInt.h:\n\t* generic/tclIOUtil.c:\n\t* generic/tclLoadNone.c:\n\t* unix/tclLoadAout.c:\n\t* unix/tclLoadDl.c:\n\t* unix/tclLoadDld.c:\n\t* unix/tclLoadDyld.c:\n\t* unix/tclLoadNext.c:\n\t* unix/tclLoadOSF.c:\n\t* unix/tclLoadShl.c:\n\t* mac/tclMacLoad.c:\n\t* win/tclWinLoad.c: modified to move more functionality to the generic\n\tcode and avoid duplication. Partial replacement of internal uses of\n\tclientData with opaque Tcl_LoadHandle. A little further work still\n\tneeded, but significant changes are done.\n\n2002-07-17  D. Richard Hipp    <drh@hwaci.com>\n\n\t* library/msgcat/msgcat.tcl: fix a comment that was causing problems\n\tfor programs (ex: mktclapp) that embed the initialization scripts in\n\tstrings.\n\n2002-07-17  Miguel Sofer  <msofer@users.sourceforge.net>\n\n\t* generic/tclInt.decls:\n\t* generic/tclIntDecls.h:\n\t* generic/tclStubInit.c:\n\t* generic/tclVar.c: removing the now redundant functions to access\n\tindexed variables: Tcl(Get|Set|Incr)IndexedScalar() and\n\tTcl(Get|Set|Incr)ElementOfIndexedArray().\n\n2002-07-17  Donal K. Fellows  <fellowsd@cs.man.ac.uk>\n\n\t* generic/tclExecute.c (TclExecuteByteCode): Minor fixes to make this\n\tfile compile with SunPro CC...\n\n2002-07-17  Miguel Sofer  <msofer@users.sourceforge.net>\n\n\t* generic/tclExecute.c: modified to do variable lookup explicitly, and\n\tthen either inlining the variable access or else calling the new\n\tTclPtr(Set|Get|Incr)Var functions in tclVar.c\n\t* generic/tclInt.h: declare some functions previously local to\n\ttclVar.c for usage by TEBC.\n\t* generic/tclVar.c: removed local declarations; moved all special\n\taccessor functions for indexed variables to the end of the file -\n\tthey are unused and ready for removal, but left there for the time\n\tbeing as they are in the internal stubs table.\n\n\t** WARNING FOR BYTECODE MAINTAINERS **\n\tTCL_COMPILE_DEBUG is currently not functional; will be fixed ASAP.\n\n2002-07-16  Mo DeJong  <mdejong@users.sourceforge.net>\n\n\t* unix/Makefile.in:\n\t* win/Makefile.in: Add a more descriptive warning in the event `make\n\tgenstubs` needs to be rerun.\n\n2002-07-16  Mo DeJong  <mdejong@users.sourceforge.net>\n\n\t* unix/Makefile.in: Use dltest.marker file to keep track of when the\n\tdltest package is up to date. This fixes [Bug 575768] since tcltest is\n\tno longer linked every time.\n\t* unix/dltest/Makefile.in: Create ../dltest.marker after a successful\n\t`make all` run in dltest.\n\n2002-07-16  Mo DeJong  <mdejong@users.sourceforge.net>\n\n\t* unix/configure: Regen.\n\t* unix/configure.in: Remove useless subst of TCL_BIN_DIR.\n\n2002-07-15  Miguel Sofer  <msofer@users.sourceforge.net>\n\n\t* generic/tclVar.c: inaccurate comment fixed\n\n2002-07-15  Miguel Sofer  <msofer@users.sourceforge.net>\n\n\t* generic/tclBasic.c (Tcl_AddObjErrorInfo):\n\t* generic/tclExecute.c (TclUpdateReturnInfo):\n\t* generic/tclInt.h:\n\t* generic/tclProc.c:\n\tAdded two Tcl_Obj to the ExecEnv structure to hold the fully qualified\n\tnames \"::errorInfo\" and \"::errorCode\" to cache the addresses of the\n\tcorresponding variables. The two most frequent setters of these\n\tvariables now profit from the new variable name caching.\n\n2002-07-15  Miguel Sofer  <msofer@users.sourceforge.net>\n\n\t* generic/tclVar.c: refactorisation to reuse already looked-up Var\n\tpointers; definition of three new Tcl_Obj types to cache variable name\n\tparsing and lookup for later reuse; modification of internal functions\n\tto profit from the caching.\n\n\t* generic/tclInt.decls:\n\t* generic/tclInt.h:\n\t* generic/tclIntDecls.h:\n\t* generic/tclNamesp.c: adding CONST qualifiers to variable names\n\tpassed to Tcl_FindNamespaceVar and to variable resolvers; adding CONST\n\tqualifier to the 'msg' argument to TclLookupVar. Needed to avoid code\n\tduplication in the new tclVar.c code.\n\n\t* tests/set-old.test:\n\t* tests/var.test: slight modification of error messages due to the\n\tmodifications in the tclVar.c code.\n\n2002-07-15  Don Porter  <dgp@users.sourceforge.net>\n\n\t* tests/unixInit.test:\tImproved constraints to protect /tmp. [Bug\n\t581403]\n\n2002-07-15  Vince Darley  <vincentdarley@users.sourceforge.net>\n\n\t* tests/winFCmd.test: renamed 'win2000' and 'notWin2000' to more\n\tappropriate constraint names.\n\t* win/tclWinFile.c: updated comments to reflect 07-11 changes.\n\t* win/tclWinFCmd.c: made ConvertFileNameFormat static again, since no\n\tlonger used in tclWinFile.c\n\t* mac/tclMacFile.c: completed TclpObjLink implementation which was\n\tpreviously lacking.\n\t* generic/tclIOUtil.c: comment cleanup and code speedup.\n\n2002-07-14  Don Porter  <dgp@users.sourceforge.net>\n\n\t* generic/tclInt.h:\tRemoved declarations that duplicated entries\n\tin the (internal) stub table.\n\n\t* library/tcltest/tcltest.tcl:  Corrected errors in handling of\n\tconfiguration options -constraints and -limitconstraints.\n\n\t* README:\t\tBumped HEAD to version 8.4b2 so we can\n\t* generic/tcl.h:\tdistinguish it from the 8.4b1 release.\n\t* tools/tcl.wse.in:\n\t* unix/configure*:\n\t* unix/tcl.spec:\n\t* win/README.binary:\n\t* win/configure*:\n\n2002-07-11  Vince Darley  <vincentdarley@users.sourceforge.net>\n\n\t* doc/file.n:\n\t* win/tclWinFile.c: on Win 95/98/ME the long form of the path is used\n\tas a normalized form. This is required because short forms are not a\n\trobust representation. The file normalization function has been sped\n\tup, but more performance gains might be possible, if speed is still an\n\tissue on these platforms.\n\n2002-07-11  Don Porter  <dgp@users.sourceforge.net>\n\n\t* library/tcltest/tcltest.tcl: Corrected reaction to existing but\n\tfalse ::tcl_interactive.\n\n\t* doc/Hash.3: Overlooked CONST documentation update.\n\n2002-07-11  Donal K. Fellows  <fellowsd@cs.man.ac.uk>\n\n\t* generic/tclCkalloc.c: ckalloc() and friends take the block size as\n\tan unsigned, so we should use %ud when reporting it in fprintf() and\n\tpanic().\n\n2002-07-11  Miguel Sofer  <msofer@users.sourceforge.net>\n\n\t* generic/tclCompile.c: now setting local vars undefined at compile\n\ttime, instead of waiting until the proc is initialized.\n\t* generic/tclProc.c: use macro TclSetVarUndefined instead of directly\n\tsetting the flag.\n\n2002-07-11  Donal K. Fellows  <fellowsd@cs.man.ac.uk>\n\n\t* tests/cmdAH.test: [file attr -perm] is Unix-only, so add [catch]\n\twhen not inside a suitably-protected test.\n\n2002-07-10  Donal K. Fellows  <fellowsd@cs.man.ac.uk>\n\n\t* tests/unixFCmd.test, tests/fileName.test:\n\t* tests/fCmd.test: Removed [exec] of Unix utilities that have\n\tequivalents in standard Tcl. [Bug 579268] Also simplified some of\n\tunixFCmd.test while I was at it.\n\n2002-07-10  Don Porter  <dgp@users.sourceforge.net>\n\n\t* tests/tcltest.test:  Greatly reduced the number of [exec]s, using\n\tslave interps instead.\n\t* library/tcltest/tcltest.tcl:  Fixed bug uncovered in the conversion\n\twhere a message was written to stdout instead of [outputChannel].\n\n\t* tests/basic.test:\tCleaned up, constrained, and reduced the\n\t* tests/compile.test:\tamount of [exec] usage in the test suite.\n\t* tests/encoding.test:\n\t* tests/env.test:\n\t* tests/event.test:\n\t* tests/exec.test:\n\t* tests/io.test:\n\t* tests/ioCmd.test:\n\t* tests/regexp.test:\n\t* tests/regexpComp.test:\n\t* tests/socket.test:\n\t* tests/tcltest.test:\n\t* tests/unixInit.test:\n\t* tests/winDde.test:\n\t* tests/winPipe.test:\n\n2002-07-10  Donal K. Fellows  <fellowsd@cs.man.ac.uk>\n\n\t* tests/cmdAH.test: Removed [exec] of Unix utilities. [Bug 579211]\n\n\t* tests/expr.test: Added tests to make sure that this works.\n\t* generic/tclExecute.c (ExprCallMathFunc): Functions should also be\n\table to return wide-ints. [Bug 579284]\n\n2002-07-08  Andreas Kupries  <andreas_kupries@users.sourceforge.net>\n\n\t* tests/socket.test: Fixed [Bug 578164]. The original reason for the\n\twas a DNS outage while running the testsuite. Changed [info hostname]\n\tto 127.0.0.1 to bypass DNS, knowing that we operate on the local host.\n\n2002-07-08  Don Porter  <dgp@users.sourceforge.net>\n\n\t* doc/tcltest.n:\t\tFixed incompatibility in [viewFile].\n\t* library/tcltest/tcltest.tcl:\tCorrected docs. Bumped to 2.2.1.\n\t* library/tcltest/pkgIndex.tcl: [Bug 578163]\n\n2002-07-08  Vince Darley  <vincentdarley@users.sourceforge.net>\n\n\t* tests/cmdAH.test:\n\t* tests/fCmd.test:\n\t* tests/fileName.test: tests which rely on 'file link' need a\n\tconstraint so they don't run on older Windows OS. [Bug 578158]\n\t* generic/tclIOUtil.c:\n\t* generic/tcl.h:\n\t* generic/tclInt.h:\n\t* generic/tclTest.c:\n\t* mac/tclMacChan.c:\n\t* unix/tclUnixChan.c:\n\t* win/tclWinChan.c:\n\t* doc/FileSystem.3: cleaned up internal handling of\n\tTcl_FSOpenFileChannel to remove duplicate code, and make writing\n\texternal vfs's clearer and easier. No functionality change. Also\n\tclarify that objects with refCount zero should not be passed in to the\n\tTcl_FS API, and prevent segfaults from occuring on such user errors.\n\t[Bug 578617]\n\n2002-07-06  Don Porter  <dgp@users.sourceforge.net>\n\n\t* tests/pkgMkIndex.test:  Constrained tests of [load] package indexing\n\tto those platforms where the testing shared libraries have been built.\n\t[Bug 578166]\n\n2002-07-05  Don Porter  <dgp@users.sourceforge.net>\n\n\t* changes: added recent changes\n\n2002-07-05  Reinhard Max  <max@suse.de>\n\n\t* generic/tclClock.c (FormatClock): Convert the format string to UTF8\n\tbefore calling TclpStrftime, so that non-ASCII characters don't get\n\tmangled when the result string is being converted back.\n\t* tests/clock.test: Added a test for that.\n\n2002-07-05  Donal K. Fellows  <fellowsd@cs.man.ac.uk>\n\n\t* unix/Makefile.in (ro-test,ddd,GDB,DDD): Created new targets to\n\tallow running the test suite with a read-only current directory,\n\trunning under ddd instead of gdb, and factored out some executable\n\tnames for broken sites (like mine) where gdb and ddd are installed\n\twith non-standard names...\n\n\t* tests/httpold.test: Altered test names to httpold-* to avoid clashes\n\twith http.test, and stopped tests from failing when the current\n\tdirectory is not writable...\n\n\t* tests/event.test:\t\tStop these tests from failing when the\n\t* tests/ioUtil.test:\t\tcurrent directory is not writable...\n\t* tests/regexp.test:\n\t* tests/regexpComp.test:\n\t* tests/source.test:\n\t* tests/unixFile.test:\n\t* tests/unixNotfy.test:\n\n\t* tests/unixFCmd.test:\t\tTrying to make these test-files not\n\t* tests/macFCmd.test:\t\tbomb out with an error when the\n\t* tests/http.test:\t\tcurrent directory is not writable...\n\t* tests/fileName.test:\n\t* tests/env.test:\n\n2002-07-05  Jeff Hobbs  <jeffh@ActiveState.com>\n\n\t*** 8.4b1 TAGGED FOR RELEASE ***\n\n2002-07-04  Donal K. Fellows  <fellowsd@cs.man.ac.uk>\n\n\t* tests/cmdMZ.test (cmdMZ-1.4):\n\t* tests/cmdAH.test: More fixing of writable-current-dir assumption.\n\t[Bug 575824]\n\n2002-07-04  Miguel Sofer  <msofer@users.sourceforge.net>\n\n\t* tests/basic.test: Same issue as below; fixed [Bug 575817]\n\n2002-07-04  Andreas Kupries  <andreas_kupries@users.sourceforge.net>\n\n\t* tests/socket.test:\n\t* tests/winPipe.test:\n\t* tests/pid.test: Fixed [Bug 575848]. See below for a description the\n\tgeneral problem.\n\n\t* All the bugs below are instances of the same problem: The testsuite\n\tassumes [pwd] = [temporaryDirectory] and writable.\n\n\t* tests/iogt.test: Fixed [Bug 575860].\n\t* tests/io.test:   Fixed [Bug 575862].\n\t* tests/exec.test:\n\t* tests/ioCmd.test: Fixed [Bug 575836].\n\n2002-07-03  Don Porter  <dgp@users.sourceforge.net>\n\n\t* tests/pkg1/direct1.tcl: removed\n\t* tests/pkg1/pkgIndex.tcl: removed\n\t* tests/pkgMkIndex.test:  Imported auxilliary files from tests/pkg1\n\tinto the test file pkgMkIndex.test itself. Formatting fixes.\n\n\t* unix/Makefile.in: removed tests/pkg/* from `make dist`\n\n\t* tests/pkg/circ1.tcl: removed\n\t* tests/pkg/circ2.tcl: removed\n\t* tests/pkg/circ3.tcl: removed\n\t* tests/pkg/global.tcl: removed\n\t* tests/pkg/import.tcl: removed\n\t* tests/pkg/pkg1.tcl: removed\n\t* tests/pkg/pkg2_a.tcl: removed\n\t* tests/pkg/pkg2_b.tcl: removed\n\t* tests/pkg/pkg3.tcl: removed\n\t* tests/pkg/pkg4.tcl: removed\n\t* tests/pkg/pkg5.tcl: removed\n\t* tests/pkg/pkga.tcl: removed\n\t* tests/pkg/samename.tcl: removed\n\t* tests/pkg/simple.tcl: removed\n\t* tests/pkg/spacename.tcl: removed\n\t* tests/pkg/std.tcl: removed\n\t* tests/pkgMkIndex.test: Fixed [Bug 575857] where this test file\n\texpected to be able to write to [file join [testsDirectory] pkg]. Part\n\tof the fix was to import several auxilliary files into the test file\n\titself.\n\n\t* tests/main.test:\tCheap fix for [Bugs 575851, 575858]. Avoid\n\t* tests/tcltest.test:\tnon-writable . by [cd [temporaryDirectory]].\n\n\t* library/auto.tcl: Fix [tcl_findLibrary] to be sure it sets $varName\n\tonly if a successful library script is found. [Bug 577033]\n\n2002-07-03  Miguel Sofer  <msofer@users.sourceforge.net>\n\n\t* generic/tclCompCmds.c (TclCompileCatchCmd): return\n\tTCL_OUT_LINE_COMPILE instead of TCL_ERROR: let the failure happen at\n\truntime so that it can be caught [Bug 577015].\n\n2002-07-02  Joe English  <jenglish@users.sourceforge.net>\n\n\t* doc/tcltest.n: Markup fixes, spellcheck.\n\n2002-07-02  Don Porter  <dgp@users.sourceforge.net>\n\n\t* doc/tcltest.n: more refinements of the documentation.\n\n\t* library/tcltest/tcltest.tcl: Added trace to be sure the stdio\n\tconstraint is updated whenever the [interpreter] changes.\n\n\t* doc/tcltest.n:\t\tReverted [makeFile] and [viewFile] to\n\t* library/tcltest/tcltest.tcl:\ttheir former behavior, and documented\n\t* tests/cmdAH.test:\t\tit. Corrected misspelling of hook\n\t* tests/event.test:\t\tprocedure. Restored tests.\n\t* tests/http.test:\n\t* tests/io.test:\n\n\t* library/tcltest/tcltest.tcl: Simplified logic of [GetMatchingFiles]\n\tand [GetMatchingDirectories], removing special case processing.\n\n\t* doc/tcltest.n: More documentation updates. Reference sections are\n\tcomplete. Only examples need adding.\n\n2002-07-02  Vince Darley  <vincentdarley@users.sourceforge.net>\n\n\t* tests/fCmd.test:\n\t* generic/tclCmdAH.c: clearer error msgs for 'file link', as per the\n\tman page.\n\n2002-07-01  Joe English  <jenglish@users.sourceforge.net>\n\n\t* doc/Access.3:\n\t* doc/AddErrInfo.3:\n\t* doc/Alloc.3:\n\t* doc/Backslash.3:\n\t* doc/CrtChannel.3:\n\t* doc/CrtSlave.3:\n\t* doc/Encoding.3:\n\t* doc/Eval.3:\n\t* doc/FileSystem.3:\n\t* doc/Notifier.3:\n\t* doc/OpenFileChnl.3:\n\t* doc/ParseCmd.3:\n\t* doc/RegExp.3:\n\t* doc/Tcl_Main.3:\n\t* doc/Thread.3:\n\t* doc/TraceCmd.3:\n\t* doc/Utf.3:\n\t* doc/WrongNumArgs.3:\n\t* doc/binary.n:\n\t* doc/clock.n:\n\t* doc/expr.n:\n\t* doc/fconfigure.n:\n\t* doc/glob.n:\n\t* doc/http.n:\n\t* doc/interp.n:\n\t* doc/lsearch.n:\n\t* doc/lset.n:\n\t* doc/msgcat.n:\n\t* doc/packagens.n:\n\t* doc/pkgMkIndex.n:\n\t* doc/registry.n:\n\t* doc/resource.n:\n\t* doc/safe.n:\n\t* doc/scan.n:\n\t* doc/tclvars.n:  Spell-check, fixed typos (Updates from Larry Virden).\n\n2002-07-01  Donal K. Fellows  <fellowsd@cs.man.ac.uk>\n\n\t* unix/tcl.m4 (SC_CONFIG_CFLAGS): Made Solaris use gcc for linking\n\twhen building with gcc to resolve problems with undefined symbols\n\tbeing present when tcl library used with non-gcc linker at later\n\tstage. Symbols were compiler-generated, so it is the compiler's\n\tbusiness to define them. [Bug 541181]\n\n2002-07-01  Don Porter  <dgp@users.sourceforge.net>\n\n\t* doc/tcltest.n: more work in progress updating tcltest docs.\n\n\t* library/tcltest/tcltest.tcl: Change [configure -match] to stop\n\ttreating an empty list as a list of the single pattern \"*\". Changed\n\tthe default value to [list *] so default operation remains the same.\n\n\t* tests/pkg/samename.tcl: restored. needed by pkgMkIndex.test.\n\n\t* library/tcltest/tcltest.tcl: restored writeability testing of\n\t-tmpdir, augmented by a special exception for the deafault value.\n\n2002-07-01  Donal K. Fellows  <fellowsd@cs.man.ac.uk>\n\n\t* doc/concat.n: Documented the *real* behaviour of [concat]!\n\n2002-06-30  Don Porter  <dgp@users.sourceforge.net>\n\n\t* doc/tcltest.n: more work in progress updating tcltest docs.\n\n\t* tests/README:\t\tUpdated the instructions on running and\n\t* tests/cmdMZ.test:\tadding to the test suite. Also updated\n\t* tests/encoding.test:\tseveral tests, mostly to correctly create\n\t* tests/fCmd.test:\tand destroy any temporary files in the\n\t* tests/info.test:\t[temporaryDirectory] of tcltest.\n\t* tests/interp.test:\n\n\t* library/tcltest/tcltest.tcl:\tStopped checking for writeability of\n\t-tmpdir value because no default directory can be guaranteed to be\n\twriteable.\n\n\t* tests/autoMkindex.tcl: removed.\n\t* tests/pkg/samename.tcl: removed.\n\t* tests/pkg/magicchar.tcl: removed.\n\t* tests/pkg/magicchar2.tcl: removed.\n\t* tests/autoMkindex.test: Updated auto_mkIndex tests to use [makeFile]\n\tand [removeFile] so tests are done in [temporaryDirecotry] where write\n\taccess is guaranteed.\n\n\t* library/tcltest/tcltest.tcl:\tFixed [makeFile] and [viewFile] to\n\t* tests/cmdAH.test:\t\taccurately reflect a file's contents.\n\t* tests/event.test:\t\tUpdated tests that depended on buggy\n\t* tests/http.test:\t\tbehavior. Also added warning messages\n\t* tests/io.test:\t\tto \"-debug 1\" operations to debug test\n\t* tests/iogt.test:\t\tcalls to (make|remove)(File|Directory)\n\n\t* unix/mkLinks: `make mklinks` on 6-27 commits.\n\n2002-06-28  Miguel Sofer  <msofer@users.sourceforge.net>\n\n\t* generic/tclCompile.h: modified the macro TclEmitPush to not call its\n\tfirst argument repeatedly or pass it to other macros, [Bug 575194]\n\treported by Peter Spjuth.\n\n2002-06-28  Don Porter  <dgp@users.sourceforge.net>\n\n\t* docs/tcltest.n:\tDoc revisions in progress.\n\t* library/tcltest/tcltest.tcl: Corrected -testdir default value. Was\n\tnot reliable, and disagreed with docs! Thanks to Hemang Lavana. [Bug\n\t575150]\n\n2002-06-28  Donal K. Fellows  <fellowsd@cs.man.ac.uk>\n\n\t* unix/tclUnixThrd.c:\tRenamed the Tcl_Platform* #defines to TclOS*\n\t* unix/tclUnixPipe.c:\tbecause they are only used internally. Also\n\t* unix/tclUnixFile.c:\tstopped double-#def of TclOSlstat [Bug 566099,\n\t* unix/tclUnixFCmd.c:\tpost-rename]\n\t* unix/tclUnixChan.c:\n\t* unix/tclUnixPort.h:\n\n\t* doc/string.n: Improved documentation for [string last] along lines\n\tdescribed in [Bug 574799] so it indicates that the supplied index\n\tmarks the end of the search space.\n\n2002-06-27  Don Porter  <dgp@users.sourceforge.net>\n\n\t* doc/dde.n:\t\tWork in progress updating the documentation\n\t* doc/http.n:\t\tof the packages that come bundled with\n\t* doc/msgcat.n:\t\tthe Tcl source distribution, notably tcltest.\n\t* doc/registry.n:\n\t* doc/tcltest.n:\n\n\t* library/tcltest/tcltest.tcl:  Made sure that the TCLTEST_OPTIONS\n\tenvironment variablle configures tcltest at package load time.\n\n2002-06-26  Vince Darley  <vincentdarley@users.sourceforge.net>\n\n\t* tests/fileSystem.test:\n\t* generic/tclIOUtil.c: fix to handling of empty paths \"\" which are not\n\tclaimed by any filesystem [Bug 573758]. Ensure good error messages\n\tare given in all cases.\n\t* tests/cmdAH.test:\n\t* unix/tclUnixFCmd.c: fix to bug reported as part of [Patch 566669].\n\tThanks to Taguchi, Takeshi for the report.\n\n2002-06-26  Reinhard Max  <max@suse.de>\n\n\t* unix/tclUnixTime.c: Make [clock format] respect locale settings.\n\t* tests/clock.test:   [Bug 565880]. ***POTENTIAL INCOMPATIBILITY***\n\n2002-06-26  Miguel Sofer  <msofer@users.sourceforge.net>\n\n\t* doc/CrtInterp.3:\n\t* doc/StringObj.3: clarifications by Don Porter, [Bug 493995] and [Bug\n\t500930].\n\n2002-06-24  Don Porter  <dgp@users.sourceforge.net>\n\n\t* library/tcltest/tcltest.tcl:\tCorrected suppression of -verbose skip\n\t* tests/tcltest.test:\t\tand start by [test -output]. Also\n\tcorrected test suite errors exposed by corrected code. [Bug 564656]\n\n2002-06-25  Reinhard Max  <max@suse.de>\n\n\t* unix/tcl.m4:       New macro SC_CONFIG_MANPAGES.\n\t* unix/configure.in: Added support for symlinks and compression when\n\t* unix/Makefile.in:  installing the manpages. [Patch 518052]\n\t* unix/mkLinks.tcl:  Default is still hardlinks and no compression.\n\n\t* unix/mkLinks:      generated\n\t* unix/configure:\n\n\t* unix/README:       Added documentation for the new features.\n\n\t* unix/tcl.m4 (SC_PATH_TCLCONFIG): Replaced ${exec_prefix}/lib by\n\t${libdir}.\n\n2002-06-25  Donal K. Fellows  <fellowsd@cs.man.ac.uk>\n\n\t* generic/tclUtil.c (TclGetIntForIndex): Fix of critical [Bug 533364]\n\tgenerated when the index is bad and the result is a shared object. The\n\tT_ASTO(T_GOR, ...) idiom likely exists elsewhere though. Also removed\n\tsome cruft that just complicated things to no advantage.\n\t(SetEndOffsetFromAny): Same fix, though this wasn't on the path\n\texcited by the bug.\n\n2002-06-24  Don Porter  <dgp@users.sourceforge.net>\n\n\t* library/tcltest/tcltest.tcl:\tImplementation of TIP 101. Adds abd\n\t* tests/parseOld.test:\t\texports a [configure] command from\n\t* tests/tcltest.test:\t\ttcltest.\n\n2002-06-22  Don Porter  <dgp@users.sourceforge.net>\n\n\t* changes: updated changes file for 8.4b1 release.\n\n\t* library/tcltest/tcltest.tcl:\tCorrections to tcltest and the Tcl\n\t* tests/basic.test:\t\ttest suite so that a test with options\n\t* tests/cmdInfo.test:\t\t-constraints knownBug\n\t* tests/compile.test:\t\t-limitConstraints 1 only tests the\n\t* tests/encoding.test:\t\tknownBug tests. Mostly involves\n\t* tests/env.test:\t\treplacing direct access to the\n\t* tests/event.test:\t\ttestConstraints array with calls to\n\t* tests/exec.test:\t\tthe testConstraint command (which\n\t* tests/execute.test:\t\trequires tcltest version 2)\n\t* tests/fCmd.test:\n\t* tests/format.test:\n\t* tests/http.test:\n\t* tests/httpold.test:\n\t* tests/ioUtil.test:\n\t* tests/link.test:\n\t* tests/load.test:\n\t* tests/namespace.test:\n\t* tests/pkgMkIndex.test:\n\t* tests/reg.test:\n\t* tests/result.test:\n\t* tests/scan.test:\n\t* tests/stack.test:\n\n2002-06-22  Donal K. Fellows  <fellowsd@cs.man.ac.uk>\n\n\t* tools/tcl.wse.in (Disk Label), unix/tcl.spec (version):\n\t* win/README.binary, README, win/configure.in, unix/configure.in:\n\t* generic/tcl.h (TCL_RELEASE_*, TCL_PATCH_LEVEL): Bump to beta1.\n\n2002-06-21  Joe English  <jenglish@users.sourceforge.net>\n\n\t* generic/tclCompExpr.c:\n\t* generic/tclParseExpr.c: LogSyntaxError() should reset the\n\tinterpreter result [Bug 550142 \"Tcl_ExprObj -> abort\"]\n\n2002-06-21  Don Porter  <dgp@users.sourceforge.net>\n\n\t* unix/Makefile.in:\tUpdated all package install directories\n\t* win/Makefile.in:\tto match current Major.minor versions\n\t* win/makefile.bc:\tof the packages. Added tcltest package\n\t* win/makefile.vc:\tto installation on Windows.\n\n\t* library/init.tcl:  Corrected comments and namespace style issues.\n\tThanks to Bruce Stephens. [Bug 572025]\n\n2002-06-21  Vince Darley  <vincentdarley@users.sourceforge.net>\n\n\t* tests/cmdAH.test:          Added TIP#99 implementation of 'file\n\t* tests/fCmd.test:           link'. Supports creation of symbolic and\n\t* tests/fileName.test:       hard links in the native filesystems and\n\t* tests/fileSystem.test:     in vfs's, when the individual filesystem\n\t* generic/tclTest.c:         supports the concept.\n\t* generic/tclCmdAH.c:\n\t* generic/tclIOUtil.c:\n\t* generic/tcl.h:\n\t* generic/tcl.decls:\n\t* doc/FileSystem.3:\n\t* doc/file.n:\n\t* mac/tclMacFile.c:\n\t* unix/tclUnixFile.c:\n\t* win/tclWinFile.c: Also enhanced speed of 'file normalize' on\n\tWindows.\n\n2002-06-20  Miguel Sofer  <msofer@users.sourceforge.net>\n\n\t* generic/tclBasic.c (TclEvalObjvInternal): fix for [Bug 571385] in\n\tthe implementation of TIP#62 (command tracing). Vince Darley, Hemang\n\tLavana & Don Porter: thanks.\n\n2002-06-20  Miguel Sofer  <msofer@users.sourceforge.net>\n\n\t* generic/tclExecute.c (TclCompEvalObj): clarified and simplified the\n\tlogic for compilation/recompilation.\n\n2002-06-19  Joe English  <jenglish@users.sourceforge.net>\n\n\t* doc/file.n: Fixed indentation. No substantive changes.\n\n2002-06-19  Jeff Hobbs  <jeffh@ActiveState.com>\n\n\t* generic/tclCmdMZ.c (Tcl_RegexpObjCmd): get the resultPtr again as\n\tthe Tcl_ObjSetVar2 may cause the result to change. [Patch 558324]\n\t(watson)\n\n2002-06-19  Miguel Sofer  <msofer@users.sourceforge.net>\n\n\t* generic/tclExecute.c (TEBC): removing unused \"for(;;)\" loop;\n\timproved comments; re-indentation.\n\n2002-06-18  Miguel Sofer  <msofer@users.sourceforge.net>\n\n\t* generic/tclExecute.c (TEBC):\n\t- elimination of duplicated code in the non-immediate INST_INCR\n\t  instructions.\n\t- elimination of 103 (!) TclDecrRefCount macros. The different\n\t  instructions now jump back to a common \"DecrRefCount zone\" at the\n\t  top of the loop. The macro \"ADJUST_PC\" was replaced by two macros\n\t  \"NEXT_INST_F\" and \"NEXT_INST_V\" that take three params\n\t  (pcAdjustment, # of stack objects to discard, resultObjPtr handling\n\t  flag). The only instructions that retain a TclDecrRefCount are\n\t  INST_POP (for speed), the common code for the non-immediate\n\t  INST_INCR, INST_FOREACH_STEP and the two INST_LSET.\n\n\tThe object size of tclExecute.o was reduced by approx 20% since the\n\tstart of the consolidation drive, while making room for some peep-hole\n\toptimisation at runtime.\n\n2002-06-18  Miguel Sofer  <msofer@users.sourceforge.net>\n\n\t* generic/tclExecute.c (TEBC, INST_DONE): small bug in the panic code\n\tfor tcl-stack corruption.\n\n2002-06-17  David Gravereaux <davygrvy@pobox.com>\n\n\tTrims to support the removal of RESOURCE_INCLUDED from rc scripts from\n\t[FRQ 565088].\n\n\t* generic/tcl.h: moved the #ifndef RC_INVOKED start block up in the\n\tfile. rc scripts don't need to know thread mutexes.\n\n\t* win/tcl.rc:\n\t* win/tclsh.rc: removed the #define RESOURCE_INCLUDED to let the\n\tbuilt-in -DRC_INVOKED to the work.\n\n2002-06-17  Jeff Hobbs  <jeffh@ActiveState.com>\n\n\t* doc/CrtTrace.3:        Added TIP#62 implementation of command\n\t* doc/trace.n:           execution tracing [FRQ 462580] (lavana).\n\t* generic/tcl.h:         This includes enter/leave tracing as well\n\t* generic/tclBasic.c:    as inter-procedure stepping.\n\t* generic/tclCmdMZ.c:\n\t* generic/tclCompile.c:\n\t* generic/tclExecute.c:\n\t* generic/tclInt.decls:\n\t* generic/tclInt.h:\n\t* generic/tclIntDecls.h:\n\t* generic/tclStubInit.c:\n\t* generic/tclVar.c:\n\t* tests/trace.test:\n\n2002-06-17  Andreas Kupries  <andreas_kupries@users.sourceforge.net>\n\n\t* win/tclWinPipe.c (BuildCommandLine): Fixed [Bug 554068] ([exec] on\n\twindows did not treat { in filenames well.). Bug reported by Vince\n\tDarley <vincentdarley@users.sourceforge.net>, patch provided by Vince\n\ttoo.\n\n2002-06-17  Joe English  <jenglish@users.sourceforge.net>\n\n\t* generic/tcl.h: #ifdef logic for K&R C backwards compatibility\n\tchanged to assume modern C by default. See [FRQ 565088] for full\n\tdetails.\n\n2002-06-17  Don Porter  <dgp@users.sourceforge.net>\n\n\t* doc/msgcat.n: Corrected en_UK references to en_GB. UK is not a\n\tcountry designation recognized in ISO 3166.\n\n\t* library/msgcat/msgcat.tcl:  More Windows Registry locale codes from\n\tBruno Haible.\n\n\t* doc/msgcat.n:\n\t* library/msgcat/msgcat.tcl:\n\t* library/msgcat/pkgIndex.tcl:\n\t* tests/msgcat.test:  Revised locale initialization to interpret\n\tenvironment variable locale values according to XPG4, and to recognize\n\tthe LC_ALL and LC_MESSAGES values over that of LANG. Also added many\n\tWindows Registry locale values to those recognized by msgcat. Revised\n\ttests and docs. Bumped to version 1.3. Thanks to Bruno Haible for the\n\treport and assistance crafting the solution. [Bug 525522, 525525]\n\n2002-06-16  Miguel Sofer  <msofer@users.sourceforge.net>\n\n\t* generic/tclCompile.c (TclCompileTokens): a better algorithm for the\n\tprevious bug fix.\n\n2002-06-16  Miguel Sofer  <msofer@users.sourceforge.net>\n\n\t* generic/tclCompile.c (TclCompileTokens):\n\t* tests/compile.test: [Bug 569438] in the processing of dollar\n\tvariables; report by Georgios Petasis.\n\n2002-06-16  Miguel Sofer  <msofer@users.sourceforge.net>\n\n\t* generic/tclExecute.c: bug in the consolidation of the INCR_..._STK\n\tinstructions; the bug could not be exercised as the (faulty)\n\tinstruction INST_INCR_ARRAY_STK was never compiled-in (related to [Bug\n\t569438]).\n\n2002-06-14  Miguel Sofer  <msofer@users.sourceforge.net>\n\n\t* generic/tclExecute.c (TclExecuteByteCode): runtime peep-hole\n\toptimisation of variables (INST_STORE, INST_INCR) and commands\n\t(INST_INVOKE); faster check for the existence of a catch.\n\t(TclExecuteByteCode): runtime peep-hole optimisation of comparisons.\n\t(TclExecuteByteCode): runtime peep-hole optimisation of INST_FOREACH -\n\trelies on peculiarities of the code produced by the bytecode compiler.\n\n2002-06-14  David Gravereaux <davygrvy@pobox.com>\n\n\t* win/rules.vc: The test for compiler optimizations was in error.\n\tThanks goes to Roy Terry <royterry@earthlink.net> for his assistance\n\twith this.\n\n2002-06-14  Donal K. Fellows  <fellowsd@cs.man.ac.uk>\n\n\t* doc/trace.n, tests/trace.test:\n\t* generic/tclCmdMZ.c (Tcl_TraceObjCmd,TclTraceCommandObjCmd)\n\t(TclTraceVariableObjCmd): Changed references to \"trace list\" to\n\t\"trace info\" as mandated by TIP#102.\n\n2002-06-13  Miguel Sofer  <msofer@users.sourceforge.net>\n\n\t* generic/tclExecute.c (TclExecuteByteCode): consolidated code for the\n\tconditional branch instructions.\n\n2002-06-13  Miguel Sofer  <msofer@users.sourceforge.net>\n\n\t* generic/tclExecute.c (TclExecuteByteCode): fixed the previous patch;\n\twouldn't compile with TCL_COMPILE_DEBUG set.\n\n2002-06-13  Miguel Sofer  <msofer@users.sourceforge.net>\n\n\t* generic/tclExecute.c (TclExecuteByteCode): consolidated the handling\n\tof exception returns to INST_INVOKE and INST_EVAL, as well as most of\n\tthe code for INST_CONTINUE and INST_BREAK, in the new jump target\n\t\"processExceptionReturn\".\n\n2002-06-13  Miguel Sofer  <msofer@users.sourceforge.net>\n\n\t* generic/tclExecute.c (TclExecuteByteCode): consolidated variable\n\thandling opcodes, replaced redundant code with some 'goto'. All\n\tstore/append/lappend opcodes on the same data type now share the main\n\tcode; same with incr opcodes.\n\t* generic/tclVar.c: added the bit TCL_TRACE_READS to the possible\n\tflags to Tcl_SetVar2Ex - it causes read traces to be fired prior to\n\tsetting the variable. This is used in the core for [lappend].\n\n\t***NOTE*** the usage of TCL_TRACE_READS in Tcl_(Obj)?GetVar.* is not\n\tdocumented; there, it causes the call to create the variable if it\n\tdoes not exist. The new usage in Tcl_(Obj)?SetVar.* remains\n\tundocumented too ...\n\n2002-06-13  Vince Darley  <vincentdarley@users.sourceforge.net>\n\n\t* tests/fCmd.test:\n\t* tests/winFile.test:\n\t* tests/fileSystem.test:\n\t* generic/tclTest.c:\n\t* generic/tclCmdAH.c:\n\t* generic/tclIOUtil.c:\n\t* doc/FileSystem.3:\n\t* mac/tclMacFile.c:\n\t* unix/tclUnixFile.c:\n\t* win/tclWinFile.c: fixed up further so both compiles and actually\n\tworks with VC++ 5 or 6.\n\t* win/tclWinInt.h:\n\t* win/tclWin32Dll.c: cleaned up code and vfs tests and added tests for\n\tthe internal changes of 2002-06-12, to see whether WinTcl on NTFS can\n\tcoexist peacefully with links in the filesystem. Added new test\n\tcommand 'testfilelink' to enable the newer code to be tested.\n\t* tests/fCmd.test: (made certain tests of 'testfilelink' not run on\n\tunix).\n\n2002-06-12  Miguel Sofer  <msofer@users.sourceforge.net>\n\n\t* tclBasic.c (Tcl_DeleteTrace): fixed [Bug 568123] (thanks to Hemang\n\tLavana)\n\n2002-06-12  Jeff Hobbs  <jeffh@ActiveState.com>\n\n\t* win/tclWinFile.c: corrected the symbolic link handling code to allow\n\tit to compile. Added real definition of REPARSE_DATA_BUFFER (found in\n\twinnt.h). Most of the added definitions appear to have correct,\n\tcross-Win-version equivalents in winnt.h and should be removed, but\n\tjust making things \"work\" for now.\n\n2002-06-12  Vince Darley  <vincentdarley@users.sourceforge.net>\n\n\t* generic/tclIOUtil.c:\n\t* generic/tcl.decls:\n\t* generic/tclDecls.h: made code for Tcl_FSNewNativePath agree with man\n\tpages.\n\n\t* doc/FileSystem.3: clarified the circumstances under which certain\n\tfunctions are called in the presence of symlinks.\n\n\t* win/tclWinFile.c:\n\t* win/tclWinPort.h:\n\t* win/tclWinInt.h:\n\t* win/tclWinFCmd.c:  Fix for Windows to allow 'file lstat', 'file\n\ttype', 'glob -type l', 'file copy', 'file delete', 'file normalize',\n\tand all VFS code to work correctly in the presence of symlinks\n\t(previously Tcl's behaviour was not very well defined). This also\n\tfixes possible serious problems in all versions of WinTcl where 'file\n\tdelete' on a NTFS symlink could delete the original, not the symlink.\n\tNote: symlinks cannot yet be created in pure Tcl.\n\n2002-06-11  Miguel Sofer  <msofer@users.sourceforge.net>\n\n\t* generic/tclBasic.c:\n\t* generic/tclCompCmds.c:\n\t* generic/tclInt.h: reverted the new compilation functions; replaced\n\tby a more general approach described below.\n\n\t* generic/tclCompCmds.c:\n\t* generic/tclCompile.c: made *all* compiled variable access attempts\n\tcreate an indexed variable - even get or incr without previous set.\n\tThis allows indexed access to local variables that are created and set\n\tat runtime, for example by [global], [upvar], [variable], [regexp],\n\t[regsub].\n\n2002-06-11  Miguel Sofer  <msofer@users.sourceforge.net>\n\n\t* doc/global.n:\n\t* doc/info.n:\n\t* test/info.test:\n\t* generic/tclCmdIL.c: fix for [Bug 567386], [info locals] was\n\treporting some linked variables.\n\n\t* generic/tclBasic.c:\n\t* generic/tclCompCmds.c:\n\t* generic/tclInt.h: added compile functions for [global], [variable]\n\tand [upvar]. They just declare the new local variables, the commands\n\tthemselves are not compiled-in. This gives a notably faster read\n\taccess to these linked variables.\n\n2002-06-11  Miguel Sofer  <msofer@users.sourceforge.net>\n\n\t* generic/tclExecute.c: optimised algorithm for exception range\n\tlookup; part of [Patch 453709].\n\n2002-06-10  Vince Darley  <vincentdarley@users.sourceforge.net>\n\n\t* unix/tclUnixFCmd.c: fixed [Bug 566669]\n\t* generic/tclIOUtil.c: improved and sped up handling of native paths\n\t(duplication and conversion to normalized paths), particularly on\n\tWindows.\n\t* modified part of above commit, due to problems on Linux. Will\n\tre-examine bug report and evaluate more closely.\n\n2002-06-07  Don Porter  <dgp@users.sourceforge.net>\n\n\t* tests/tcltest.test:  More corrections to test suite so that tests of\n\tfailing [test]s don't show up themselves as failing tests.\n\n2002-06-07  Donal K. Fellows  <fellowsd@cs.man.ac.uk>\n\n\t* generic/tclExecute.c: Tidied up headers in relation to float.h to\n\tcut the cruft and ensure DBL_MAX is defined since doubles seem to be\n\tthe same size everywhere; if the assumption isn't true, the variant\n\tplatforms had better have run configure...\n\n\t* unix/tclUnixPort.h (EOVERFLOW): Added code to define it if it\n\twasn't previously defined. Also some other general tidying and adding\n\tof comments. [Bugs 563122, 564595]\n\t* compat/tclErrno.h: Added definition for EOVERFLOW copied from\n\tSolaris headers; I've been unable to find any uses of EFTYPE, which\n\twas the error code previously occupying the slot, in Tcl, or any\n\tdefinition of it in the Solaris headers.\n\n2002-06-06  Mo DeJong  <mdejong@users.sourceforge.net>\n\n\t* unix/dltest/Makefile.in: Remove hard coded CFLAGS=-g and add\n\tCFLAGS_DEBUG, CFLAGS_OPTIMIZE, and CFLAGS_DEFAULT varaibles. [Bug\n\t565488]\n\n2002-06-06  Don Porter  <dgp@users.sourceforge.net>\n\n\t* tests/tcltest.test:  Corrections to test suite so that tests of\n\tfailing [test]s don't show up themselves as failing tests.\n\n\t* tests/io.test: Fixed up namespace variable resolution issues\n\trevealed by running test suite with \"-singleproc 1\".\n\n\t* doc/tcltest.n:\n\t* library/tcltest/tcltest.tcl:\n\t* tests/tcltest.test: Several updates to tcltest.\n\t  1) changed to lazy initialization of test constraints\n\t  2) deprecated [initConstraintsHook]\n\t  3) repaired badly broken [limitConstraints].\n\t  4) deprecated [threadReap] and [mainThread]\n\t[Patch 512214, Bug 558742, Bug 461000, Bug 534903]\n\n2002-06-06  Daniel Steffen  <das@users.sourceforge.net>\n\n\t* unix/tclUnixThrd.c (TclpReaddir, TclpLocaltime, TclpGmtime): added\n\tmutex wrapped calls to readdir, localtime & gmtime in case their\n\tthread-safe *_r counterparts are not available.\n\t* unix/tcl.m4: added configure check for readdir_r\n\t* unix/tcl.m4 (Darwin): set TCL_DEFAULT_ENCODING to utf-8 on MacOSX\n\t(where posix file apis expect utf-8, not iso8859-1).\n\t* unix/configure: regen\n\t* unix/Makefile.in: set DYLD_LIBRARY_PATH in parallel to\n\tLD_LIBRARY_PATH for MacOSX dynamic linker.\n\t* generic/tclEnv.c (TclSetEnv): fix env var setting on MacOSX (adapted\n\tfrom [Patch 524352] by jkbonfield).\n\n2002-06-05  Don Porter  <dgp@users.sourceforge.net>\n\n\t* doc/Tcl_Main.3: Documented $tcl_rcFileName and added more\n\tclarifications about the intended use of Tcl_Main(). [Bug 505651]\n\n2002-06-05  Daniel Steffen  <das@users.sourceforge.net>\n\n\t* generic/tclFileName.c (TclGlob): mac specific fix to recent changes\n\tin 'glob -tails' handling.\n\t* mac/tclMacPort.h:\n\t* mac/tclMacChan.c: fixed TIP#91 bustage.\n\t* mac/tclMacResource.c (Tcl_MacConvertTextResource): added utf\n\tconversion of text resource contents.\n\t* tests/macFCmd.test (macFCmd-1.2): allow CWIE creator.\n\n2002-06-04  Don Porter  <dgp@users.sourceforge.net>\n\n\t* library/tcltest/tcltest.tcl:\n\t* tests/init.test:\n\t* tests/tcltest.test:\tAdded more TIP 85 tests from Arjen Markus.\n\tConverted tcltest.test to use a private namespace. Fixed bugs in\n\t[tcltest::Eval] revealed by calling [tcltest::test] from a non-global\n\tnamespace, and namespace errors in init.test.\n\n2002-06-04  Mo DeJong  <mdejong@users.sourceforge.net>\n\n\t* win/README: Update msys+mingw URL.\n\n2002-06-03  Don Porter  <dgp@users.sourceforge.net>\n\n\t* doc/tcltest.n:\n\t* library/tcltest/tcltest.tcl:\n\t* library/tcltest/pkgIndex.tcl:\n\t* tests/tcltest.test:  Implementation of TIP 85. Allows tcltest users\n\tto add new legal values of the -match option to [test], associating\n\teach with a Tcl command that does the matching of expected results\n\twith actual results of tests. Thanks to Arjen Markus. => tcltest 2.1\n\t[Patch 521362]\n\n2002-06-03  Miguel Sofer  <msofer@users.sourceforge.net>\n\n\t* doc/namespace.n: added description of [namepace forget] behaviour\n\tfor unqualified patterns. [Bug 559268]\n\n2002-06-03  Miguel Sofer  <msofer@users.sourceforge.net>\n\n\t* generic/tclExecute.c: reverting an accidental modification in the\n\tlast commit.\n\n2002-06-03  Miguel Sofer  <msofer@users.sourceforge.net>\n\n\t* doc/Tcl.n: clarify the empty variable name issue ([Bug 549285]\n\treported by Tom Krehbiel, patch by Don Porter).\n\n2002-05-31  Don Porter  <dgp@users.sourceforge.net>\n\n\t* library/package.tcl:  Fixed leak of slave interp in [pkg_mkIndex].\n\tThanks to Helmut for report. [Bug 550534]\n\n\t* tests/io.test:\n\t* tests/main.test:  Use the \"stdio\" constraint to control whether an\n\t[open \"|[interpreter]\"] is attempted.\n\n\t* generic/tclExecute.c (TclMathInProgress,TclExecuteByteCode\n\t(ExprCallMathFunc):\n\t* generic/tclInt.h (TclMathInProgress):\n\t* unix/Makefile.in (tclMtherr.*):\n\t* unix/configure.in (NEED_MATHERR):\n\t* unix/tclAppInit.c (matherr):\n\t* unix/tclMtherr.c (removed file):\n\t* win/tclWinMtherr.c (_matherr): Removed internal routine\n\tTclMathInProgress and Unix implementation of matherr(). These are now\n\tobsolete, dealing with very old versions of the C math library.\n\tWindows version is retained in case Borland compilers require it, but\n\tit is inactive. Thanks to Joe English. [Bug 474335, Patch 555635]\n\n\t* unix/configure: regen\n\n2002-05-30  Miguel Sofer  <msofer@users.sourceforge.net>\n\n\t* generic/tclCompExpr.c:\n\t* generic/tclCompile.c:\n\t* generic/tclCompile.h: removed exprIsJustVarRef and\n\texprIsComparison from the ExprInfo and CompileEnv structs. These\n\twere set, but not used since dec 1999 [Bug 562383].\n\n2002-05-30  Vince Darley  <vincentdarley@users.sourceforge.net>\n\n\t* generic/tclFileName.c (TclGlob): fix to longstanding 'knownBug' in\n\tfileName tests 15.2-15.4, and fix to a new Tcl 8.4 bug in certain uses\n\tof 'glob -tails'.\n\t* tests/fileName.test: removed 'knownBug' flag from some tests, added\n\tsome new tests for above bugs.\n\n2002-05-29  Jeff Hobbs  <jeffh@ActiveState.com>\n\n\t* unix/configure: regen'ed\n\t* unix/configure.in: replaced bigendian check with autoconf standard\n\tAC_C_BIG_ENDIAN, which defined WORDS_BIGENDIAN on bigendian systems.\n\t* generic/tclUtf.c (Tcl_UniCharNcmp):\n\t* generic/tclInt.h (TclUniCharNcmp): use WORDS_BIGENDIAN instead of\n\tTCL_OPTIMIZE_UNICODE_COMPARE to enable memcmp alternative.\n\n\t* generic/tclExecute.c (TclExecuteByteCode INST_STR_CMP):\n\t* generic/tclCmdMZ.c (Tcl_StringObjCmd): changed the case for choosing\n\tthe Tcl_UniCharNcmp compare to when both objs are of StringType, as\n\tbenchmarks show that is the optimal check (both bigendian and\n\tlittleendian systems).\n\n2002-05-29  Don Porter  <dgp@users.sourceforge.net>\n\n\t* generic/tclMain.c: Removed \"dummy\" reference to Tcl_LinkVar. It is\n\tno longer needed since Tcl_Main() now actually calls Tcl_LinkVar().\n\tThanks to Joe English for pointing that out.\n\n2002-05-29  Donal K. Fellows  <fellowsd@cs.man.ac.uk>\n\n\t* generic/tclExecute.c (TclExecuteByteCode):\n\t* generic/tclCmdMZ.c (Tcl_StringObjCmd): Use the macro version.\n\t* generic/tclInt.h (TclUniCharNcmp): Optimised still further with a\n\tmacro for use in sensitive places like tclExecute.c\n\n\t* generic/tclUtf.c (Tcl_UniCharNcmp): Use new flag to figure out when\n\twe can use an optimal comparison scheme, and default to the old scheme\n\tin other cases which is at least safe.\n\t* unix/configure.in (TCL_OPTIMIZE_UNICODE_COMPARE): New optional flag\n\tthat indicates when we can use memcmp() to compare Unicode strings\n\t(i.e. when the high-byte of a Tcl_UniChar precedes the low-byte.)\n\n2002-05-29  Jeff Hobbs  <jeffh@ActiveState.com>\n\n\t* generic/tclInt.decls:\n\t* generic/tclIntDecls.h:\n\t* generic/tclStubInit.c:\n\t* generic/tclUtf.c: added TclpUtfNcmp2 private command that\n\tmirrors Tcl_UtfNcmp, but takes n in bytes, not utf-8 chars. This\n\tprovides a faster alternative for comparing utf strings\tinternally.\n\t(Tcl_UniCharNcmp, Tcl_UniCharNcasecmp): removed the explicit end of\n\tstring check as it wasn't correct for the function (by doc and logic).\n\n\t* generic/tclCmdMZ.c (Tcl_StringObjCmd): reworked the string equal\n\tcomparison code to use TclpUtfNcmp2 as well as short-circuit for\n\tequal objects or unequal length strings in the equal case.\n\tRemoved the use of goto and streamlined the other parts.\n\n\t* generic/tclExecute.c (TclExecuteByteCode): added check for object\n\tequality in the comparison instructions. Added short-circuit for !=\n\tlength strings in INST_EQ, INST_NEQ and INST_STR_CMP. Reworked\n\tINST_STR_CMP to use TclpUtfNcmp2 where appropriate, and only use\n\tTcl_UniCharNcmp when at least one of the objects is a Unicode obj with\n\tno utf bytes.\n\n\t* generic/tclCompCmds.c (TclCompileStringCmd): removed error creation\n\tin code that no longer throws an error.\n\n\t* tests/string.test:\n\t* tests/stringComp.test: added more string comparison checks.\n\n\t* tests/clock.test: better qualified 9.1 constraint check for %s.\n\n2002-05-28  Jeff Hobbs  <jeffh@ActiveState.com>\n\n\t* generic/tclThreadAlloc.c (TclpRealloc, TclpFree): protect\n\tagainst the case when NULL is based.\n\n\t* tests/clock.test: added clock-9.1\n\t* compat/strftime.c:\n\t* generic/tclClock.c:\n\t* generic/tclInt.decls:\n\t* generic/tclIntDecls.h:\n\t* unix/tclUnixTime.c: fix for Windows msvcrt mem leak caused by using\n\tan env(TZ) setting trick for in clock format -gmt 1. This also makes\n\t%s seem to work correctly with -gmt 1 as well as making it a lot\n\tfaster by avoid the env(TZ) hack. TclpStrftime now takes useGMT as an\n\targ. [Bug 559376]\n\n2002-05-28  Vince Darley  <vincentdarley@users.sourceforge.net>\n\n\t* generic/tclIOUtil.c: fixes to Tcl_FSLoadFile when called on a file\n\tinside a vfs. This should avoid leaving temporary files sitting\n\taround on exit. [Bug 545579]\n\n2002-05-27  Donal K. Fellows  <fellowsd@cs.man.ac.uk>\n\n\t* win/tclWinError.c: Added comment on conversion of\n\tERROR_NEGATIVE_SEEK because that is a mapping that really belongs,\n\tand not a catch-all case.\n\t* win/tclWinPort.h (EOVERFLOW): Should be either EFBIG or EINVAL\n\t* generic/tclPosixStr.c (Tcl_ErrnoId, Tcl_ErrnoMsg): EOVERFLOW can\n\tpotentially be a synonym for EINVAL.\n\n2002-05-24  Donal K. Fellows  <fellowsd@cs.man.ac.uk>\n\n\t=== Changes due to TIP#91 ===\n\n\t* win/tclWinPort.h: Added declaration of EOVERFLOW.\n\t* doc/CrtChannel.3: Added documentation of wideSeekProc.\n\t* generic/tclIOGT.c (TransformSeekProc, TransformWideSeekProc):\n\tAdapted to use the new channel mechanism.\n\t* unix/tclUnixChan.c (FileSeekProc, FileWideSeekProc): Renamed\n\tFileSeekProc to FileWideSeekProc and created new FileSeekProc which\n\thas the old-style interface and which errors out with EOVERFLOW when\n\tthe returned file position can't fit into the return type (int for\n\thistorical reasons).\n\t* win/tclWinChan.c (FileSeekProc, FileWideSeekProc): Renamed\n\tFileSeekProc to FileWideSeekProc and created new FileSeekProc which\n\thas the old-style interface and which errors out with EOVERFLOW when\n\tthe returned file position can't fit into the return type (int for\n\thistorical reasons).\n\t* mac/tclMacChan.c (FileSeek): Reverted to old interface; Macs lack\n\tlarge-file support because I can't see how to add it.\n\t* generic/tclIO.c (Tcl_Seek, Tcl_Tell): Given these functions\n\tknowledge of the new arrangement of channel types.\n\t(Tcl_ChannelVersion): Added recognition of new version code.\n\t(HaveVersion): New function to do version checking.\n\t(Tcl_ChannelBlockModeProc, Tcl_ChannelFlushProc)\n\t(Tcl_ChannelHandlerProc): Made these functions use HaveVersion for\n\tease of future maintainability.\n\t(Tcl_ChannelBlockModeProc): Obvious lookup function.\n\t* generic/tcl.h (Tcl_ChannelType): New wideSeekProc field, and\n\tseekProc type restored to old interpretation.\n\t(TCL_CHANNEL_VERSION_3): New channel version.\n\n2002-05-24  Andreas Kupries  <andreas_kupries@users.sourceforge.net>\n\n\t* tests/winPipe.test: Applied patch for [Bug 549617]. Patch and bug\n\treport by Kevin Kenny <kennykb@users.sourceforge.net>.\n\n\t* win/tclWinSock.c (TcpWatchProc): Fixed [Bug 557878]. We are not\n\tallowed to mess with the watch mask if the socket is a server socket.\n\tI believe that the original reporter is George Peter Staplin.\n\n2002-05-21  Mo DeJong  <mdejong@users.sourceforge.net>\n\n\t* unix/configure: Regen.\n\t* unix/configure.in: Invoke SC_ENABLE_SHARED before calling\n\tSC_CONFIG_CFLAGS so that the SHARED_BUILD variable can be checked\n\tinside SC_CONFIG_CFLAGS.\n\t* unix/tcl.m4 (SC_CONFIG_CFLAGS): Pass -non_shared instead of -shared\n\tto ld when configured with --disable-shared under OSF. [Bug 540390]\n\n2002-05-20  Daniel Steffen  <das@users.sourceforge.net>\n\n\t* generic/tclInt.h: added prototype for TclpFilesystemPathType().\n\t* mac/tclMacChan.c: use MSL provided creator type if available instead\n\tof the default 'MPW '.\n\n2002-05-16  Joe English  <jenglish@users.sf.net>\n\n\t* doc/CrtObjCmd.3: Added Tcl_GetCommandFromObj, Tcl_GetCommandFullName\n\t[Bugs 547987, 414921]\n\n2002-05-14  Donal K. Fellows  <fellowsd@cs.man.ac.uk>\n\n\t* unix/tclUnixChan.c (TtyOutputProc): #if/#endif-ed this function out\n\tto stop compiler warnings. Also much general tidying of comments in\n\tthis file and removal of whitespace from blank lines.\n\n2002-05-13  Donal K. Fellows  <fellowsd@cs.man.ac.uk>\n\n\t* unix/tclUnixChan.c (SETBREAK): Solaris thinks ioctl() takes a signed\n\tsecond argument, and Linux thinks ioctl() takes an unsigned second\n\targument. So need a longer definition of this macro to get neither to\n\tspew warnings...\n\n2002-05-13  Vince Darley  <vincentdarley@users.sourceforge.net>\n\n\t* generic/tclEvent.c:\n\t* generic/tclIOUtil.c:\n\t* generic/tclInt.h: clean up all memory allocated by the filesystem,\n\tvia introduction of 'TclFinalizeFilesystem'.\n\tMove TclFinalizeLoad into TclFinalizeFilesystem so we can be sure it\n\tis called at just the right time.\n\tFix bad comment also. [Bug 555078 and 'fs' part of 543549]\n\t* win/tclWinChan.c: fix comment referring to wrong function.\n\n2002-05-10  Don Porter  <dgp@users.sourceforge.net>\n\n\t* tests/load.test:\n\t* tests/safe.test:\n\t* tests/tcltest.test: Corrected some list-quoting issues and other\n\tmatters that cause tests to fail when the patch includes special\n\tcharacters. Report from Vince Darley. [Bug 554068]\n\n2002-05-08    David Gravereaux <davygrvy@pobox.com>\n\n\t* doc/file.n:\n\t* tools/man2tcl.c:\n\t* tools/man2help2.tcl:  Thanks to Peter Spjuth\n\t<peter.spjuth@space.se>, again. My prior fix for single-quote macro\n\tmis-understanding was wrong. Reverted to reimpliment the 'macro2' proc\n\twhich handles single-quote macros and restored file.n text arrangement\n\tto avoid single-quotes on the first line. Sorry for all the confusion.\n\n2002-05-08  David Gravereaux <davygrvy@pobox.com>\n\n\t* tools/man2tcl.c:\n\t* tools/man2help2.tcl: Proper source of macro error misunderstanding\n\tsingle-quote as the leading macro command found and repaired.\n\n\t* doc/file.n: Reverted to prior state before I messed with it.\n\n2002-05-08  Don Porter  <dgp@users.sourceforge.net>\n\n\t* library/tcltest/tcltest.tcl: Corrected [uplevel] quoting when\n\t[source]-ing test script in subdirectories.\n\t* tests/fileName.test:\n\t* tests/load.test:\n\t* tests/main.test:\n\t* tests/tcltest.test:\n\t* tests/unixInit.test: Fixes to test suite when there's a space in the\n\tworking path. Thanks to Kevin Kenny.\n\n2002-05-07  David Gravereaux <davygrvy@pobox.com>\n\n\t-- Changes from Peter Spjuth <peter.spjuth@space.se>\n\t* tools/man2tcl.c: Increased line buffer size and a bail-out if that\n\tshould ever be over-run.\n\t* tools/man2help.tcl: Include Courier New font in rtf header.\n\t* tools/man2help2.tcl: Improved handling of CS/CE fields. Use Courier\n\tNew for code samples and indent better.\n\n\t* doc/file.n:\n\t* doc/TraceCmd.3:  winhelp conversion tools where understanding\n\ta ' as the first character on a line to be an unknown macro.\n\tNot knowing how to repair tools/man2tcl.c, I decided to rearrange\n\tthe text in the docs instead.\n\n2002-05-07  Vince Darley  <vincentdarley@users.sourceforge.net>\n\n\t* generic/tclFileName.c: fix to similar segfault when using 'glob\n\t-types nonsense -dir dirname -join * *'. [Bug 553320]\n\n\t* doc/FileSystem.3: further documentation on vfs.\n\t* tests/cmdAH.test:\n\t* tests/fileSystem.test:\n\t* tests/pkgMkindex.test: Fix to testsuite bugs when running out of\n\tdirectory whose name contains '{' or '['.\n\n2002-05-07  Miguel Sofer  <msofer@users.sourceforge.net>\n\n\t* tests/basic.test: Fix for [Bug 549607]\n\t* tests/encoding.test: Fix for [Bug 549610]\n\tThese are testsuite bugs that caused failures when the filename\n\tcontained spaces. Report & fix by Kevin Kenny.\n\n2002-05-02  Vince Darley  <vincentdarley@users.sourceforge.net>\n\n\t* generic/tclFileName.c: fix to freeing a bad object (i.e. segfault)\n\twhen using 'glob -types nonsense -dir dirname'.\n\t* generic/tclWinFile.c: fix to [Bug 551306], also wrapped some long\n\tlines.\n\t* tests/fileName.test: added several tests for the above bugs.\n\t* doc/FileSystem.3: clarified documentation on refCount requirements\n\tof the object returned by the path type function.\n\t* generic/tclIOUtil.c:\n\t* win/tclWinFile.c:\n\t* unix/tclUnixFile.c:\n\t* mac/tclMacFile.c: moved TclpFilesystemPathType to the platform-\n\tspecific directories, so we can add missing platform-specific\n\timplementations. On Windows, 'file system' now returns useful results\n\tlike \"native NTFS\", \"native FAT\" for that system. Unix and MacOS still\n\tonly return \"native\".\n\t* doc/file.n: clarified documentation.\n\t* tests/winFile.test: test for 'file system' returning correct values.\n\t* tests/fileSystem.test: test for 'file system' returning correct\n\tvalues. Clean up after failed previous test run.\n\n2002-04-26  Jeff Hobbs  <jeffh@ActiveState.com>\n\n\t* unix/configure:\n\t* unix/tcl.m4: change HP-11 SHLIB_LD_LIBS from \"\" to ${LIBS} so that\n\tthe .sl knows its dependent libs.\n\n2002-04-26  Donal K. Fellows  <fellowsd@cs.man.ac.uk>\n\n\t* tests/obj.test (obj-11.[56]): Test conversion to boolean more\n\tthoroughly.\n\t* generic/tclObj.c (SetBooleanFromAny): Was not calling an integer\n\tparsing function on native 64-bit platforms! [Bug 548686]\n\n2002-04-24  Jeff Hobbs  <jeffh@ActiveState.com>\n\n\t* generic/tclInt.h: corrected TclRememberJoinableThread decl to use\n\tVOID instead of void.\n\t* generic/tclThreadJoin.c: noted that this code isn't needed on Unix.\n\n2002-04-23  Jeff Hobbs  <jeffh@ActiveState.com>\n\n\t* doc/exec.n:\n\t* doc/tclvars.n: doc updates [Patch 509426] (gravereaux)\n\n2002-04-24  Daniel Steffen  <das@users.sourceforge.net>\n\n\t* mac/tclMacResource.r: added check of TCLTK_NO_LIBRARY_TEXT_RESOURCES\n\t#define to allow disabling the inclusion of the tcl library code in\n\tthe resource fork of Tcl executables and shared libraries.\n\n2002-04-23  Donal K. Fellows  <fellowsd@cs.man.ac.uk>\n\n\t* doc/TraceCmd.3: New file that documents Tcl_CommandTraceInfo,\n\tTcl_TraceCommand and Tcl_UntraceCommand [Bug 414927]\n\n2002-04-22  Jeff Hobbs  <jeffh@ActiveState.com>\n\n\t* generic/tclAlloc.c:\n\t* generic/tclInt.h:\n\t* generic/tclThreadAlloc.c (new):\n\t* unix/Makefile.in:\n\t* unix/tclUnixThrd.c:\n\t* win/Makefile.in:\n\t* win/tclWinInt.h:\n\t* win/tclWinThrd.c: added new threaded allocator contributed by AOL\n\tthat significantly reduces lock contention when multiple threads are\n\tin use. Only Windows and Unix implementations are ready, and the\n\tWindows one may need work. It is only used by default on Unix for now,\n\tand requires that USE_THREAD_ALLOC be defined (--enable-threads on\n\tUnix will define this).\n\n\t* generic/tclIOUtil.c (Tcl_FSRegister, Tcl_FSUnregister): corrected\n\tcalling of Tcl_ConditionWait to ensure that there would be a condition\n\tto wait upon.\n\n\t* generic/tclCmdAH.c (Tcl_FileObjCmd): added cast in FILE_SIZE.\n\n\t* win/tclWinFCmd.c (DoDeleteFile): check return of setattr API calls\n\tin file deletion for correct Win32 API handling.\n\n\t* win/Makefile.in: correct dependencies for shell, gdb, runtest\n\ttargets.\n\n\t* doc/clock.n:\n\t* compat/strftime.c (_fmt): change strftime to correctly handle\n\tlocalized %c, %x and %X on Windows. Added some notes about how the\n\tother values could be further localized.\n\n2002-04-19  Don Porter  <dgp@users.sourceforge.net>\n\n\t* generic/tclMain.c (Tcl_Main):  Free the memory allocated for the\n\tstartup script path. [Bug 543549]\n\n\t* library/msgcat/msgcat.tcl:  [mcmax] wasn't using the caller's\n\tnamespace when determining the max translated length. Also made\n\trevisions for better use of namespace variables and more efficient\n\t[uplevel]s.\n\n\t* doc/msgcat.n:\n\t* library/msgcat/msgcat.tcl:\n\t* library/msgcat/pkgIndex.tcl:  Added [mcload] to the export list of\n\tmsgcat; bumped to 1.2.3. [Bug 544727]\n\n2002-04-20  Daniel Steffen  <das@users.sourceforge.net>\n\n\t* generic/tclInt.decls:\n\t* generic/tclIntPlatDecls.h:\n\t* generic/tclStubInit.c:\n\t* mac/tclMacFCmd.c:\n\t* mac/tclMacFile.c:\n\t* mac/tclMacUtil.c: Modified TclpObjNormalizePath to be alias file\n\taware, and replaced various calls to FSpLocationFrom*Path by calls to\n\tnew alias file aware versions FSpLLocationFrom*Path. The alias file\n\taware routines don't resolve the last component of a path if it is an\n\talias. This allows [file copy/delete] etc. to act correctly on alias\n\tfiles. (c.f. discussion in [Bug 511666])\n\n2002-04-19  Donal K. Fellows  <fellowsd@cs.man.ac.uk>\n\n\t* tests/lindex.test (lindex-3.7):\n\t* generic/tclUtil.c (TclGetIntForIndex): Stopped indexes from hitting\n\twide ints. [Bug 526717]\n\n2002-04-18  Miguel Sofer  <msofer@users.sourceforge.net>\n\n\t* generic/tclNamesp.c:\n\t* tests/info.test: [Bug 545325] info level didn't report namespace\n\teval, bug report by Richard Suchenwirth.\n\n2002-04-18  Don Porter  <dgp@users.sourceforge.net>\n\n\t* doc/subst.n:  Clarified documentation on handling unusual return\n\tcodes during substitution, and on variable substitutions implied by\n\tcommand substitution, and vice versa. [Bug 536838]\n\n2002-04-18  Donal K. Fellows  <fellowsd@cs.man.ac.uk>\n\n\t* generic/tclCmdIL.c (InfoBodyCmd):\n\t* tests/info.test (info-2.6): Proc bodies without string reps would\n\treport as empty. [Bug 545644]\n\n\t* generic/tclCmdMZ.c (Tcl_SubstObj): More clarification for comment on\n\tbehaviour when substitutions are not well-formed, prompted by [Bug\n\t536831]; alas, removing the ill-defined behaviour is a lot of work.\n\n2002-04-18  Miguel Sofer  <msofer@users.sourceforge.net>\n\n\t* generic/tclExecute.c:\n\t* tests/expr-old.test: fix for [Bug 542588] (Phil Ehrens), where \"too\n\tlarge integers\" were reported as \"floating-point value\" in [expr]\n\terror messages.\n\n2002-04-17  Jeff Hobbs  <jeffh@ActiveState.com>\n\n\t* generic/tclEncoding.c (EscapeFromUtfProc):\n\t* generic/tclIO.c (WriteChars, Tcl_Close): corrected the handling of\n\toutputting end escapes for escape-based encodings.\n\t[Bug 526524] (yamamoto)\n\n2002-04-17  Don Porter  <dgp@users.sourceforge.net>\n\n\t* doc/tcltest.n:  Removed [saveState] and [restoreState] from tcltest\n\t2 documentation, effectively deprecating them. [Bug 495660]\n\t* library/tcltest/tcltest.tcl: Made separate export for commands kept\n\tonly for tcltest 1 compatibility.\n\n\t* tests/iogt.test: Revised to run tests in a namespace, rather than\n\tuse the useless and buggy [saveState] and [restoreState] commands of\n\ttcltest. Updated to use tcltest 2 as well. [Patch 544911]\n\n2002-04-16  Don Porter  <dgp@users.sourceforge.net>\n\n\t* tests/io.test: Revised to run tests in a namespace, rather than use\n\tthe useless and buggy [saveState] and [restoreState] commands of\n\ttcltest. Updated to use tcltest 2 as well. [Patch 544546]\n\n2002-04-15  Miguel Sofer  <msofer@users.sourceforge.net>\n\n\t* generic/tclProc.c:\n\t* tests/proc-old.test: Improved stack trace for TCL_BREAK and\n\tTCL_CONTINUE returns from procs. Patch by Don Porter [Bug 536955].\n\n\t* generic/tclExecute.c:\n\t* tests/compile.test: made bytecodes check for a catch before\n\treturning; the compiled [return] is otherwise non-catchable. [Bug\n\t542142] reported by Andreas Kupries.\n\n2002-04-15  Don Porter  <dgp@users.sourceforge.net>\n\n\t* tests/socket.test:  Increased timeout values so that tests have\n\ttime to successfully complete even on slow/busy machines. [Bug 523470]\n\n\t* doc/tcltest.n:\n\t* library/tcltest/tcltest.tcl:\n\t* tests/tcltest.test:  Revised [tcltest::test] to return errors when\n\tcalled with invalid syntax and to accept exactly two arguments as\n\tdocumented. Improved error messages. [Bug 497446, Patch 513983]\n\t***POTENTIAL INCOMPATIBILITY***: Incompatible with previous tcltest\n\t2.* releases, found only in alpha releases of Tcl 8.4.\n\n2002-04-11  Jeff Hobbs  <jeffh@ActiveState.com>\n\n\t* generic/tclNotify.c (TclFinalizeNotifier): remove remaining\n\tunserviced events on finalization.\n\n\t* win/tcl.m4: Enabled COFF as well as CV style debug info with\n\t--enable-symbols to allow Dr. Watson users to see function info. More\n\tinfo on debugging levels can be obtained at:\n\thttp://msdn.microsoft.com/library/en-us/dnvc60/html/gendepdebug.asp\n\n\t* tests/ioCmd.test: fixed iocmd-8.15 to have mac and unixPc variants.\n\n\t* generic/tclParse.c (Tcl_ParseVar): conditionally incr obj refcount\n\tto prevent possible mem leak.\n\n2002-04-08  Daniel Steffen  <das@users.sourceforge.net>\n\n\t* generic/tcl.h: no <sys/types.h> on mac.\n\t* mac/tclMacFile.c: minor fixes to Vince's changes from 03-24.\n\t* mac/tclMacOSA.c:\n\t* mac/tclMacResource.c: added missing Tcl_UtfToExternalDString\n\tconversions of resource file names.\n\t* mac/tclMacSock.c (TcpGetOptionProc): fixed bug introduced by Andreas\n\ton 02-25; changed strcmp's to strncmp's so that option comparison\n\tbehaves like on other platforms.\n\t* mac/tcltkMacBuildSupport.sea.hqx (CW Pro6 changes): added support to\n\tallow Tk to hookup C library stderr/stdout to TkConsole.\n\t* tests/basic.test:\n\t* tests/cmdAH.test:\n\t* tests/encoding.test:\n\t* tests/fileSystem.test:\n\t* tests/ioCmd.test: fixed tests failing on mac: check for existence of\n\t[exec], changed some result strings.\n\n2002-04-06  Jeff Hobbs  <jeffh@ActiveState.com>\n\n\t* unix/tclUnixFCmd.c (Realpath): added a little extra code to\n\tinitialize a realpath arg when compiling in PURIFY mode in order to\n\tprevent spurious purify warnings. We should really create our own\n\trealpath implementation, but this will at least quiet purify for now.\n\n2002-04-05  Don Porter  <dgp@users.sourceforge.net>\n\n\t* generic/tclCmdMZ.c (Tcl_SubstObj):\n\t* tests/subst.test:  Corrected [subst] so that return codes TCL_BREAK\n\tand TCL_CONTINUE returned by variable substitution have the same\n\teffect as when those codes are returned by command substitution. [Bug\n\t536879]\n\n2002-04-03  Jeff Hobbs  <jeffh@ActiveState.com>\n\n\t* library/tcltest/tcltest.tcl: added getMatchingFiles back (alias to\n\tGetMatchingFiles), which was a public function in tcltest 1.0.\n\n2002-04-01  Vince Darley  <vincentdarley@users.sourceforge.net>\n\n\t* generic/tclEnv.c:\n\t* generic/tclIOUtil.c: invalidate filesystem cache when the user\n\tchanges env(HOME). Fixes [Bug 535621]. Also cleaned up some of the\n\tdocumentation.\n\t* tests/fileSystem.test: added test for bug just fixed.\n\n2002-04-01  Kevin Kenny  <kennykb@acm.org>\n\n\t* win/tclWinTime.c (Tcl_GetTime): made the checks of clock frequency\n\tmore permissive to cope with the fact that Win98SE is observed to\n\treturn 1.19318 in place of 1.193182 for the performance counter\n\tfrequency.\n\n2002-03-29  Jeff Hobbs  <jeffh@ActiveState.com>\n\n\t* generic/tclCmdMZ.c (Tcl_TraceObjCmd, TraceVarProc)\n\t(TraceCommandProc, TclTraceCommandObjCmd):  corrected potential\n\tdouble-free of traces on variables by flagging in Trace*Proc that it\n\twill free the var in case the eval wants to delete the var trace as\n\twell. [Bug 536937] Also converted Tcl_UntraceVar -> Tcl_UntraceVar2\n\tand Tcl_Eval to Tcl_EvalEx in Trace*Proc for slight efficiency\n\timprovement.\n\n2002-03-29  Don Porter  <dgp@users.sourceforge.net>\n\n\t* doc/AllowExc.3:\n\t* generic/tclBasic.c (Tcl_EvalObjv,Tcl_EvalEx,Tcl_EvalObjEx):\n\t* generic/tclCompile.h (TclCompEvalObj):\n\t* generic/tclExecute.c (TclCompEvalObj,TclExecuteByteCode):\n\t* tests/basic.test: Corrected problems with Tcl_AllowExceptions having\n\tinfluence over the wrong scope of Tcl_*Eval* calls. Patch from Miguel\n\tSofer. Report from Jean-Claude Wippler. [Bug 219181]\n\n2002-03-28  Don Porter  <dgp@users.sourceforge.net>\n\n\t* generic/tclVar.c: Refactored CallTraces to collect repeated handling\n\tof its returned value into CallTraces itself.\n\n2002-03-28  David Gravereaux <davygrvy@pobox.com>\n\n\t* tools/feather.bmp:\n\t* tools/man2help.tcl:\n\t* tools/man2help2.tcl:\n\t* win/makefile.vc: More winhelp target fixups. Added a feather bitmap\n\tto the non-scrollable area and changed the color to be yellow from a\n\tplain white. The colors can be whatever we want them to be, but\n\tthought I would start with something bold. [Bug 527941]\n\n\t* doc/SetVar.3:\n\t* doc/TraceVar.3:\n\t* doc/UpVar.3:  .AP macro syntax repair.\n\n2002-03-27  David Gravereaux <davygrvy@pobox.com>\n\n\t* tools/man2help.tcl:\n\t* win/makefile.vc:  winhelp target now copies all needed files from\n\ttools/ to a workarea under $(OUT_DIR) and builds it from there. No\n\tbuild cruft is left in tools/ anymore. All paths used in man2help.tcl\n\tare now relative to where the script is. [Bug 527941]\n\n2002-03-27  David Gravereaux <davygrvy@pobox.com>\n\n\t* win/.cvsignore:\n\t* win/buildall.vc.bat:\n\t* win/coffbase.txt:\n\t* win/makefile.vc:\n\t* win/nmakehlp.c (new):\n\t* win/rules.vc:  First draft fix for [Bug 527941]. More changes need\n\tto done to the makehelp target to get to stop leaving build files in\n\tthe tools/ directory. This does not address the syntax errors in the\n\tman files. Having the contents of tcl.hpj(.in) inside makefile.vc\n\tallows for version numbers to be replaced with macros.\n\n\tThe new nmakehlp.c is built by rules.vc in preprocessing and removes\n\tthe need to use tricky shell syntax that wasn't compatible on Win9x\n\tsystems. Clean targets made Win9x complient. This is a first draft\n\trepair for [Bug 533862].\n\n2002-03-28  Miguel Sofer  <msofer@users.sourceforge.net>\n\n\t* generic/tclBasic.c (Tcl_EvalEx): passing the correct commandSize to\n\tTclEvalObjvInternal. [Bug 219362], fix by David Knoll.\n\n2002-03-28  Miguel Sofer  <msofer@users.sourceforge.net>\n\n\t* generic/tclBasic.c (Tcl_EvalEx):\n\t* tests/basic.test: avoid exceptional returns at level 0. [Bug 219181]\n\n2002-03-27  Don Porter  <dgp@users.sourceforge.net>\n\n\t* doc/tcltest.n ([mainThread]):\n\t* library/tcltest/tcltest.tcl:\n\t* tests/tcltest.test:  Major code cleanup to deal with whitespace,\n\tcoding conventions, and namespace issues, with several minor bugs\n\tfixed in the process.\n\n\t* tests/main.test: Added missing [after cancel]s.\n\n2002-03-25  Don Porter  <dgp@users.sourceforge.net>\n\n\t* tests/main.test: Removed workarounds for Bug 495977.\n\n\t* library/tcltest/tcltest.tcl:  Keep the value of $::auto_path\n\tunchanged, so that the tcltest package can test code that depends on\n\tauto-loading. If a testing application needs $::auto_path pruned, it\n\tshould do that itself. [Bug 495726]\n\tImprove the processing of the -constraints option to [test] so that\n\tconstraint lists can have arbitrary whitespace, and non-lists don't\n\tblow things up. [Bug 495977]\n\tCorrected faulty variable initialization. [Bug 534845]\n\n2002-03-25  Miguel Sofer  <msofer@users.sourceforge.net>\n\n\t* doc/CrtTrace.3: small doc correction\n\t* generic/tclBasic.c (Tcl_DeleteTrace): Allow NULL callback on trace\n\tdeletions. [Bug 534728] (Hemang Lavana)\n\n2002-03-24  Miguel Sofer  <msofer@users.sourceforge.net>\n\n\t* generic/tclBasic.c (Tcl_EvalObjv): replaced obscure, incorrect code\n\tas described in [Bug 533907] (Don Porter).\n\n2002-03-24  Don Porter  <dgp@users.sourceforge.net>\n\n\t* library/tcltest/tcltest.tcl:  Use [interpreter] to set/query the\n\texecutable currently running the tcltest package. [Bug 454050]\n\n\t* library/tcltest/tcltest.tcl:  Allow non-proc commands to be used as\n\tthe customization hooks. [Bug 495662]\n\n2002-03-24  Vince Darley  <vincentdarley@users.sourceforge.net>\n\n\t* generic/tclFilename.c:\n\t* generic/tclFCmd.c:\n\t* generic/tclTest.c:\n\t* generic/tcl.h:\n\t* generic/tclIOUtil.c:\n\t* win/tclWinFile.c:\n\t* win/tclWinFCmd.c:\n\t* win/tclWinPipe.c:\n\t* unix/tclUnixFile.c:\n\t* unix/tclUnixFCmd.c:\n\t* mac/tclMacFile.c:\n\t* doc/FileSystem.3:\n\t* doc/file.n:\n\t* tests/cmdAH.test:\n\t* tests/fileName.test:\n\t* tests/fileSystem.test: (new file)\n\t* tests/winFCmd.test: fix [Bug 511666] and [Bug 511658], and improved\n\tdocumentation of some aspects of the filesystem, particularly\n\t'Tcl_FSMatchInDirectory' which now might match a single file/directory\n\tonly, and 'file normalize' which wasn't very clear before. Removed\n\tinconsistency betweens docs and the Tcl_Filesystem structure. Also\n\tfixed [Bug 523217] and corrected file normalization on Unix so that\n\tit expands symbolic links. Added some new tests of the filesystem\n\tcode (in the new file 'fileSystem.test'), and some extra tests for\n\tcorrect handling of symbolic links. Fix to [Bug 530960] which shows up\n\ton Win98. Made comparison with \".com\" case insensitive in tclWinPipe.c\n\n\t***POTENTIAL INCOMPATIBILITY***: But only between alpha releases\n\t(users of the new Tcl_Filesystem lookup table in Tcl 8.4a4 need to\n\thandle the new way in which Tcl may call Tcl_FSMatchInDirectory, and\n\t'file normalize' on unix now behaves correctly). Only known impact is\n\twith the 'tclvfs' extension.\n\n2002-03-22  Miguel Sofer  <msofer@users.sourceforge.net>\n\n\t* tests/basic.test (basic-46.1): adding test for [Bug 533758], fixed\n\tearlier today.\n\n2002-03-22  Jeff Hobbs  <jeffh@ActiveState.com>\n\n\t* win/tclWinInt.h: moved undef of TCL_STORAGE_CLASS. [Bug 478579]\n\n2002-03-22  Miguel Sofer  <msofer@users.sourceforge.net>\n\n\t* generic/tclBasic.c (Tcl_EvalObjEx):\n\t* generic/tclExecute.c (TclCompEvalObj): fixed the errorInfo for\n\treturn codes other than (TCL_OK, TCL_ERROR) to runLevel 0.[Bug 533758]\n\tRemoved the static RecordTracebackInfo(), as its functionality is\n\teasily replicated by Tcl_LogCommandInfo. Bug and redundancy noted by\n\tDon Porter.\n\n2002-03-21  Donal K. Fellows  <fellowsd@cs.man.ac.uk>\n\n\t* doc/expr.n: Improved documentation for ceil and floor. [Bug 530535]\n\n2002-03-20  Don Porter  <dgp@users.sourceforge.net>\n\n\t* doc/SetVar.3:\n\t* doc/TraceVar.3:\n\t* doc/UpVar.3:\n\t* generic/tcl.h (Tcl_VarTraceProc):\n\t* generic/tcl.decls (Tcl_GetVar2, Tcl_SetVar2, Tcl_TraceVar2,\n\t(Tcl_UnsetVar2, Tcl_UntraceVar2, Tcl_UpVar2, Tcl_VarTraceInfo2,\n\t(Tcl_GetVar2Ex, TclSetVar2Ex):\n\t* generic/tclCmdMZ.c (TraceVarProc):\n\t* generic/tclEnv.c (EnvTraceProc):\n\t* generic/tclEvent.c (VwaitVarProc):\n\t* generic/tclInt.decls (TclLookupVar,TclPrecTraceProc):\n\t* generic/tclLink.c (LinkTraceProc):\n\t* generic/tclUtil.c (TclPrecTraceProc):\n\t* generic/tclVar.c (CallTraces, MakeUpvar, VarErrMsg, TclLookupVar,\n\t(Tcl_GetVar2, Tcl_SetVar2, Tcl_TraceVar2, Tcl_UnsetVar2,\n\t(Tcl_UntraceVar2, Tcl_UpVar2, Tcl_VarTraceInfo2, Tcl_GetVar2Ex,\n\t(TclSetVar2Ex): Updated interfaces of generic/tclVar.c according to\n\tTIP 27. In particular, the \"part2\" arguments were CONSTified. [Patch\n\t532642]\n\t* generic/tclDecls.h:\n\t* generic/tclIntDecls.h: make genstubs\n\n2002-03-15  Donal K. Fellows  <fellowsd@cs.man.ac.uk>\n\n\t* tests/compile.test (compile-12.3): Test to detect bug 530320.\n\t* generic/tclCompile.c (TclCompileTokens): Fixed buffer overrun\n\treported in bug 530320.\n\n2002-03-14  Mo DeJong  <mdejong@users.sourceforge.net>\n\n\t* win/configure: Regen.\n\t* win/configure.in: Add configure time test for SEH support in the\n\tcompiler.\n\t* win/tclWin32Dll.c (ESP, EBP, TclpCheckStackSpace,\n\t(_except_checkstackspace_handler):\n\t* win/tclWinChan.c (ESP, EBP, Tcl_MakeFileChannel,\n\t(_except_makefilechannel_handler):\n\t* win/tclWinFCmd.c (ESP, EBP, DoRenameFile, DoCopyFile,\n\t(_except_dorenamefile_handler, _except_docopyfile_handler):\n\tImplement SEH support under gcc using inline asm. Tcl and Tk should\n\tnow compile with Mingw 1.1. [Patch 525746]\n\n2002-03-14  Mo DeJong  <mdejong@users.sourceforge.net>\n\n\t* win/tclWinFCmd.c (DoRenameFile, DoCopyFile): Handle an SEH exception\n\twith EXCEPTION_EXECUTE_HANDLER instead of restarting the faulting\n\tinstruction with EXCEPTION_CONTINUE_EXECUTION. [Bug 466102] provides\n\tan example of how restarting could send Tcl into an infinite loop.\n\t[Patch 525746]\n\n2002-03-11  Mo DeJong  <mdejong@users.sourceforge.net>\n\n\t* win/tclWinFCmd.c (DoRenameFile, DoCopyFile, DoDeleteFile,\n\t(DoRemoveJustDirectory): Make sure we don't pass NULL or \"\" as a path\n\tname to Win32 API functions since this was crashing under Windows 98.\n\n2002-03-11  Don Porter  <dgp@users.sourceforge.net>\n\n\t* library/tcltest/tcltest.tcl:\n\t* library/tcltest/pkgIndex.tcl: Bumped tcltest package to 2.0.2.\n\n2002-03-11  Mo DeJong  <mdejong@users.sourceforge.net>\n\n\t* library/tcltest/tcltest.tcl (getMatchingFiles): Pass a proper list\n\tto foreach to avoid munging a Windows patch like D:\\Foo\\Bar into\n\tD:FooBar before the glob.\n\n2002-03-11  Mo DeJong  <mdejong@users.sourceforge.net>\n\n\t* generic/tclEncoding.c: Fix typo in comment.\n\t* generic/tclIO.c (DoReadChars, ReadBytes, ReadChars): Use NULL value\n\tinstead of pointer set to NULL to make things more clear. Reorder\n\targuments so that they match the function signatures. Cleanup little\n\ttypos and add more descriptive comment.\n\n2002-03-08  Mo DeJong  <mdejong@users.sourceforge.net>\n\n\t* win/README: Update to indicate that Mingw 1.1 is required to build\n\tTcl. Add section describing new msys based build process. Update\n\tCygwin build instructions so users know where to find Mingw 1.1.\n\n2002-03-08  Jeff Hobbs  <jeffh@ActiveState.com>\n\n\t* win/tclWinFCmd.c (DoCopyFile): correctly set retval to TCL_OK.\n\n2002-03-07  Mo DeJong  <mdejong@users.sourceforge.net>\n\n\t* win/tclWin32Dll.c (TclpCheckStackSpace):\n\t* win/tclWinFCmd.c (DoRenameFile, DoCopyFile): Replace hard coded\n\tconstants with Win32 symbolic names. Move control flow statements out\n\tof __try blocks since the documentation indicates it is frowned upon.\n\n2002-03-07  Don Porter  <dgp@users.sourceforge.net>\n\n\t* doc/interp.n:\n\t* generic/tclInterp.c (Tcl_InterpObjCmd, SlaveObjCmd,\n\t(SlaveRecursionLimit):\n\t* generic/tclTest.c:\n\t* tests/interp.test: Added the [interp recursionlimit] command to\n\tset/query the recursion limit of an interpreter. Proposal and\n\timplementation from Stephen Trier. [TIP 87, Patch 522849]\n\n2002-03-06  Donal K. Fellows  <fellowsd@cs.man.ac.uk>\n\n\t* generic/tcl.h, tools/tcl.wse.in, unix/configure.in,\n\t* unix/tcl.spec, win/README.binary, win/configure.in, README:\n\tBumped patchlevel; this might need to change in the future, but it\n\twill help us distinguish between the CVS version and the most recent\n\treleased version.\n\n2002-03-06  Miguel Sofer  <msofer@users.sourceforge.net>\n\n\t* generic/tclInt.h: for unshared objects, TclDecrRefCount now frees\n\tthe internal rep before the string rep - just like the non-macro\n\tTcl_DecrRefCount/TclFreeObj. [Bug 524802]\n\n2002-03-06  Donal K. Fellows  <fellowsd@cs.man.ac.uk>\n\n\t* doc/lsearch.n: Documentation of new features, plus examples.\n\t* tests/lsearch.test: Tests of new features.\n\t* generic/tclCmdIL.c (Tcl_LsearchObjCmd): TIP#80 support. See\n\thttp://purl.org/tcl/tip/80 for details.\n\n2002-03-05  Jeff Hobbs  <jeffh@ActiveState.com>\n\n\t*** 8.4a4 TAGGED FOR RELEASE ***\n\n\t* unix/tclUnixChan.c: initial remedy for [Bug 525783] flush problem\n\tintroduced by TIP #35. This may not satisfy true serial channels, but\n\tit restores the correct flushing of std* channels on exit.\n\n\t* unix/README: added --enable-langinfo doc.\n\n\t* unix/tcl.spec:\n\t* tools/tcl.wse.in: fixed URL refs to use www.tcl.tk or SF.\n\n2002-03-04  Jeff Hobbs  <jeffh@ActiveState.com>\n\n\t* README:\n\t* mac/README:\n\t* unix/Makefile.in:\n\t* unix/README:\n\t* win/README:\n\t* win/README.binary: updated to use www.tcl.tk URL.\n\n\t* unix/Makefile.in: added older ChangeLogs to dist target.\n\n\t* tests/io.test:\n\t* tests/encoding.test: corrected iso2022 encoding results.\n\tadded encoding-24.*\n\t* generic/tclEncoding.c (EscapeFromUtfProc): corrected output of\n\tescape codes as per RFC 1468. [Patch 474358] (taguchi)\n\t(TclFinalizeEncodingSubsystem): corrected potential double-free\n\twhen encodings were finalized on exit. [Bugs 219314, 524674]\n\n2002-03-01  Jeff Hobbs  <jeffh@ActiveState.com>\n\n\t* library/encoding/iso2022-jp.enc:\n\t* library/encoding/iso2022.enc:\n\t* tools/encoding/iso2022-jp.esc:\n\t* tools/encoding/iso2022.esc: gave <ESC>$B precedence over <ESC>$@,\n\tbased on comments (point 1) in [Bug 219283] (rfc 1468)\n\n\t* tests/encoding.test: added encoding-23.* tests\n\t* generic/tclIO.c (FilterInputBytes): reset the TCL_ENCODING_START\n\tflags in the ChannelState when using 'gets'. [Bug 523988]\n\tAlso reduced the value of ENCODING_LINESIZE from 30 to 20 as this\n\tseems to improve the performance of 'gets' according to tclbench.\n\n2002-02-28  Jeff Hobbs  <jeffh@ActiveState.com>\n\n\t* generic/tclCmdMZ.c (TraceCommandProc): ensure that TraceCommandInfo\n\tstructure was also deleted when a command was deleted to prevent a\n\tmem leak.\n\n\t* generic/tclBasic.c (Tcl_CreateObjTrace): set tracePtr->flags\n\tcorrectly.\n\n\t* generic/tclTimer.c (TimerExitProc): remove remaining events in\n\ttls on thread exit.\n\n2002-02-28  Miguel Sofer  <msofer@users.sourceforge.net>\n\n\t* generic/tclNamesp.c: allow cached fully-qualified namespace names to\n\tbe usable from different namespaces within the same interpreter\n\twithout forcing a new lookup [Patch 458872].\n\n2002-02-28  Miguel Sofer  <msofer@users.sourceforge.net>\n\n\t* generic/tclExecute.c: Replaced a few direct stack accesses with the\n\tPOP_OBJECT() macro [Bug 507181] (Don Porter).\n\n2002-02-27  Don Porter  <dgp@users.sourceforge.net>\n\n\t* doc/GetIndex.3:\n\t* generic/tcl.decls (Tcl_GetIndexFromObjStruct):\n\t* generic/tclIndexObj.c (Tcl_GetIndexFromObjStruct):  Revised the\n\tprototype of the Tcl_GetIndexFromObjStruct to take its struct table as\n\ta (CONST VOID *) argument, better describing what it is, maintaining\n\tsource compatibility, and adding CONST correctness according to TIP\n\t27. Thanks to Joe English for an elegant solution. [Bug 520304]\n\n\t* generic/tclDecls.h: make genstubs\n\n\t* generic/tclMain.c (Tcl_Main,StdinProc):  Corrected some reference\n\tcount management errors on the interactive command Tcl_Obj found by\n\tPurify. Thanks to Jeff Hobbs for the report and assistance.\n\n2002-02-27  Jeff Hobbs  <jeffh@ActiveState.com>\n\n\t* generic/tclBasic.c (Tcl_EvalTokensStandard): corrected mem leak in\n\terror case.\n\n\t* generic/tclTest.c (TestStatProc[123]): correct harmless UMRs.\n\n\t* generic/tclLink.c (Tcl_LinkVar): correct mem leak in error case.\n\n2002-02-27  Andreas Kupries  <andreas_kupries@users.sourceforge.net>\n\n\t* tests/socket.test (2.7): Accepted and applied patch for [Bug 523470]\n\tprovided by Don Porter <dgp@users.sourceforge.net> to avoid timing\n\tproblems in that test.\n\n\t* unix/tclUnixChan.c (TclpOpenFileChannel): Added code to regonize\n\t\"/dev/tty\" (by name) and to not handle it as tty / serial line. This\n\tis the controlling terminal and is special. Setting it into raw mode\n\tas is done for other tty's is a bad idea. This is a hackish fix for\n\texpect [Bug 520624]. The fix has limitation: Tcl_MakeFileChannel\n\thandles tty's specially too, but is unable to recognize /dev/tty as it\n\tonly gets a file descriptor, and no name for it.\n\n2002-02-26  Jeff Hobbs  <jeffh@ActiveState.com>\n\n\t* generic/tclCmdAH.c (StoreStatData): corrected mem leak.\n\n\t* generic/tclCmdMZ.c (Tcl_RegsubObjCmd): prevent obj leak in\n\tremedial regsub case.\n\n\t* generic/tclFileName.c (Tcl_TranslateFileName): decr refcount for\n\terror case to prevent mem leak.\n\n\t* generic/tclVar.c (Tcl_ArrayObjCmd): removed extra obj allocation.\n\n\t* unix/tclUnixSock.c (Tcl_GetHostName): added an extra\n\tgethostbyname check to guard against failure with truncated\n\tnames returned by uname.\n\n\t* unix/configure:\n\t* unix/tcl.m4 (SC_SERIAL_PORT): added sys/modem.h check and defined\n\t_XOPEN_SOURCE_EXTENDED for HP-11 to get updated header decls.\n\n\t* unix/tclUnixChan.c: added Unix implementation of TIP #35, serial\n\tport support. [Patch 438509] (schroedter)\n\n2002-02-26  Miguel Sofer  <msofer@users.sourceforge.net>\n\n\t* generic/tclCmpCmds.c: (bugfix to the bugfix, hopefully the last)\n\tBugfix to the new [for] compiling code: was setting a exceptArray\n\tparameter using another param which wasn't yet initialised, thus\n\tfilling it with noise.\n\n2002-02-25  Andreas Kupries  <andreas_kupries@users.sourceforge.net>\n\n\t* mac/tclMacSock.c (TcpGetOptionProc): Changed to recognize the option\n\t\"-error\". Essentially ignores the option, always returning an empty\n\tstring.\n\n2002-02-25  Jeff Hobbs  <jeffh@ActiveState.com>\n\n\t* doc/Alloc.3:\n\t* doc/LinkVar.3:\n\t* doc/ObjectType.3:\n\t* doc/PkgRequire.3:\n\t* doc/Preserve.3:\n\t* doc/TCL_MEM_DEBUG.3: Updated documentation to describe the ckalloc,\n\tckfree, ckrealloc, attemptckalloc, and attemptckrealloc macros, and\n\tto accurately describe when and how they are used. [Bug 497459] (dgp)\n\n\t* generic/tclHash.c (AllocArrayEntry, AllocStringEntry):\n\tBefore invoking ckalloc when creating a Tcl_HashEntry,\n\tcheck that the amount of memory being allocated is\n\tat least as large as sizeof(Tcl_HashEntry). The previous\n\tcode was allocating memory regions that were one\n\tor two bytes short. [Bug 521950] (dejong)\n\n2002-02-25  Miguel Sofer  <msofer@users.sourceforge.net>\n\n\t* generic/tclBasic.c (Tcl_EvalEx): avoiding a buffer overrun\n\treported by Joe English, and restoring tcl7.6 behaviour for\n\t[subst]: badly terminated nested scripts will raise an error\n\tand not be evaluated. [Bug 495207]\n\n2002-02-25  Don Porter  <dgp@users.sourceforge.net>\n\n\t* unix/tclUnixPort.h: corrected strtoll prototype mismatch on Tru64.\n\t* compat/strtod.c (strtod): simplified #includes\n\t* compat/strtol.c (strtol): gather result in a long before returning\n\tas a long: necessary on platforms where sizeof(int) != sizeof(long).\n\n2002-02-25  Daniel Steffen  <das@users.sourceforge.net>\n\n\t* unix/tclLoadDyld.c: updated to use Mac OS X 10.1 dyld APIs that\n\thave more libdl-like semantics. [Bug 514392]\n\n2002-02-25  Miguel Sofer  <msofer@users.sourceforge.net>\n\n\t* generic/tclCompCmds: fixing a bug in patch dated 2002-02-22, in the\n\tcode for [for] and [while]. Under certain conditions, for long bodies,\n\tthe exception range parameters were badly computed. Tests forthcoming:\n\tI still can't reproduce the conditions in the testsuite (!), although\n\tthe bug (with assorted segfault or panic!)  can be triggered from the\n\tconsole or with the new parse.bench in tclbench.\n\n2002-02-25  Donal K. Fellows  <fellowsd@cs.man.ac.uk>\n\n\t* compat/strtoul.c, compat/strtol.c, compat/strtod.c: Added UCHAR,\n\tCONST and #includes to clean up GCC output.\n\n2002-02-23  Don Porter  <dgp@users.sourceforge.net>\n\n\t* compat/strtoull.c (strtoull):\n\t* compat/strtoll.c (strtoll):\n\t* compat/strtoul.c (strtoul): Fixed failure to handle leading\n\tsign symbols '+' and '-' and '0X' and raise overflow errors.\n\t[Bug 440916]  Also corrects prototype and errno problems.\n\n2002-02-23  Mo DeJong  <mdejong@users.sourceforge.net>\n\n\t* configure: Regen.\n\t* unix/tcl.m4 (SC_CONFIG_CFLAGS): Link with -n32 instead of -32 when\n\tbuilding on IRIX64-6.* system. [Bug 521707]\n\n2002-02-22  Don Porter <dgp@users.sourceforge.net>\n\n\t* generic/tclInt.h:\n\t* generic/tclObj.c: renamed global variable emptyString ->\n\ttclEmptyString because it is no longer static.\n\t* generic/tclPkg.c: Fix for panic when library is loaded on a\n\tplatform without backlinking without proper use of stubs. [Bug 476537]\n\n2002-02-22  Jeff Hobbs  <jeffh@ActiveState.com>\n\n\t* tests/regexpComp.test: updated regexp-11.[1-4] to match changes in\n\tregexp.test for new regsub syntax\n\n\t* unix/configure:\n\t* unix/tcl.m4: added --enable-64bit support for AIX-4 (using -q64\n\tflag) when using IBM's xlc compiler.\n\n\t* tests/safe.test: updated safe-8.5 and safe-8.7\n\t* library/safe.tcl (CheckFileName): removed the limit on\n\tsourceable file names (was only *.tcl or tclIndex files with no more\n\tthan one dot and 14 chars). There is enough internal protection in a\n\tsafe interpreter already. [Tk Bug 521560]\n\n2002-02-22  Miguel Sofer  <msofer@users.sourceforge.net>\n\n\t* generic/tclCompCmds: [FR 465811]. Optimising [if], [for] and [while]\n\tfor constant conditions; in addition, [for] and [while] are now\n\tcompiled with the \"loop rotation\" optimisation (thanks to Kevin\n\tKenny).\n\n2002-02-22  Donal K. Fellows  <fellowsd@cs.man.ac.uk>\n\n\t--- TIP#76 CHANGES ---\n\t* generic/tclCmdMZ.c (Tcl_RegsubObjCmd): Final-argument-less\n\t[regsub] returns the modified string.\n\t* doc/regsub.n: Updated docs.\n\t* tests/regexp.test: Updated and added tests.\n\n\t* compat/strtoll.c (strtoll):\n\t* compat/strtoull.c (strtoull):\n\t* unix/tclUnixPort.h:\n\t* win/tclWinPort.h: Const-ing 64-bit compatability declarations. Note\n\tthat the return pointer is non-const because it is entirely legal for\n\tthe functions to be called from somewhere that owns the string being\n\tpassed. Fixes problem reported by Larry Virden.\n\n2002-02-21  David Gravereaux <davygrvy@pobox.com>\n\n\t* win/mkd.bat (removed):\n\t* win/coffbase.txt (new):\n\t* win/makefile.bc:\n\t* win/makefile.vc:  Changed the 'setup' target to stop using the\n\tmkd.bat file and just make the directory right in the rule. Same\n\tchange to makefile.bc. Neither configure.in nor Makefile.in use it.\n\n\tcoffbase.txt will be the master list for our \"prefered base addresses\"\n\tset by the linker. This should improve load-time (NT only) by avoiding\n\trelocations. Submissions to the list by extension authors are\n\tencouraged.\n\n\tAdded a 'tidy' target to compliment 'clean' and 'hose' to remove just\n\tthe outputs. Also removed the $(winlibs) macro as it wasn't being\n\tused.\n\n\tStuff left to do:\n\t1) get the winhelp target to stop building in the tools/ directory.\n\t2) stop using rmd.bat\n\t3) add more dependacy rules.\n\n\t* win/tclAppInit.c:  Reverted back to -r1.6, as the header file change\n\tto tclPort.h won't allow for easy embedded support outside of the\n\tsource dist. Thanks to Don Porter for pointing this out to me.\n\n2002-02-21  David Gravereaux <davygrvy@pobox.com>\n\n\t* win/makefile.vc:\n\t* win/rules.vc:  Added a new \"loimpact\" option that sets the\n\t-ws:aggressive linker option. Off by default. It's said to keep the\n\theap use low at the expense of alloc speed.\n\n\t* win/tclAppInit.c: Changed #include \"tcl.h\" to be tclPort.h to remove\n\tthe raw windows.h include. tclPort.h brings in windows.h already and\n\tlessens the pre-compiled-header mush and the randomly useless #pragma\n\tcomment (lib,...) references throughout the big windows.h tree (as\n\tobserved at high linker warning levels).\n\n2002-02-21  Donal K. Fellows  <fellowsd@cs.man.ac.uk>\n\n\t* generic/tcl.h: Better guessing of LP64/ILP32 architecture, but now\n\tsensitive to presence of (suitable) <limits.h>\n\n2002-02-20  Don Porter <dgp@users.sourceforge.net>\n\n\t* generic/tcl.decls (Tcl_RegExpRange,Tcl_GetIndexFromObjStruct):\n\tOverlooked a few source incompatibilities. Now using CONST84.\n\t* generic/tclDecls.h: make genstubs\n\t* generic/tcl.h (Tcl_CmdObjTraceProc): silence warning from Sun\n\tWorkshop compiler.\n\n2002-02-20  David Gravereaux <davygrvy@pobox.com>\n\n\t* win/buildall.vc.bat:\n\t* win/makefile.vc:\n\t* win/rules.vc: General clean-ups. Added compiler and linker tests for\n\ta) the pentium 0x0F errata, b) optimizing (not all have this), and c)\n\tlinker v6 section alignment confusion. All these are tested first to\n\tmake sure any D4002 or LNK1117 warnings aren't displayed. The pentium\n\t0x0F errata is a recommended switch. The v5 linker's section alignment\n\tdefault is 512, but the v6 linker was changed to 4096 in an attempt to\n\tspeed loading on Win98. I changed the default to always be 512 across\n\tboth linkers, unless linking statically, then 4096 is used for the\n\tclaimed speed effect. Using a 512 alignment saves 12k bytes of dead\n\tspace in the DLL.\n\n\tAdded IA64 B-stepping errata switch when the compiler supports it.\n\n\tAdded profiling to $(lflags) when requested and also removed the\n\texplict -entry option as the default works fine as is.\n\n\tRemoved win/tclWinInit.c from the special case section to let it use\n\tthe common implicit rule as the $(EXTFLAGS) macro it had was never\n\treferenced anywhere.\n\n2002-02-20  Donal K. Fellows  <fellowsd@cs.man.ac.uk>\n\n\t* generic/tcl.h: Added code to guess the correct settings for\n\tTCL_WIDE_INT_IS_LONG and TCL_WIDE_INT_TYPE when configure doesn't tell\n\tus them, as can happen with extensions.\n\n2002-02-19  Donal K. Fellows  <fellowsd@cs.man.ac.uk>\n\n\t* doc/format.n: Updated docs to list the specification.\n\t* generic/tclCmdAH.c (Tcl_FormatObjCmd): Made behaviour on 64-bit\n\tplatforms correctly meet the specification, that %d works with the\n\tnative word-sized integer, instead of trying to guess (wrongly)\n\tfrom the value being passed.\n\n2002-02-19  Don Porter <dgp@users.sourceforge.net>\n\n\t* changes: First draft of updated changes for 8.4a4 release.\n\n2002-02-15  Jeff Hobbs  <jeffh@ActiveState.com>\n\n\t* unix/tclUnixPort.h: add strtoll/strtoull declarations for\n\tplatforms that do not define them.\n\n\t* generic/tclIndexObj.c (STRING_AT): removed ptrdiff_t cast and\n\tuse of VOID* in default case (GNU-ism).\n\n2002-02-15  Kevin Kenny  <kennykb@acm.org>\n\n\t* compat/strtoll.c:\n\t* compat/strtoul.c:\n\t* compat/strtoull.c:\n\t* generic/tclIOUtil.c:\n\t* generic/tclPosixStr.c:\n\t* generic/tclTest.c:\n\t* generic/tclTestObj.c:\n\t* tests/get.test:\n\t* win/Makefile.vc: Further tweaks to the TIP 72 patch to make it\n\tcompile under VC++.\n\n2002-02-15  Andreas Kupries  <andreas_kupries@users.sourceforge.net>\n\n\t* tclExecute.c:\n\t* tclIOGT.c:\n\t* tclIndexObj.c: Touchups to the TIP 72 patch to make it compileable\n\tunder Windows again. The changes are not complete, there is one nasty\n\tregarding _stati64\n\n2002-02-15  Donal K. Fellows  <fellowsd@cs.man.ac.uk>\n\n\t+----------------------+\n\t| TIP #72 IMPLEMENTED. |\n\t+----------------------+\n\n\tThere are a lot of changes from this TIP, so please see\n\thttp://purl.org/tcl/tip/72.html for discussion of\n\tbackward-compatability issues, but the main ones modifications are in:\n\n\t* generic/tcl.h: New types.\n\t* generic/tcl.decls: New public functions.\n\t* generic/tclExecute.c: 64-bit aware bytecode engine.\n\t* generic/tclBinary.c: 64-bit handling in [binary] command.\n\t* generic/tclScan.c: 64-bit handling in [scan] command.\n\t* generic/tclCmdAH.c: 64-bit handling in [file] and [format]\n\tcommands.\n\t* generic/tclBasic.c: New \"wordSize\" entry in ::tcl_platform.\n\t* generic/tclFCmd.c: Large-file support (with many consequences.)\n\t* generic/tclIO.c: Large-file support (with many consequences.)\n\t* compat/strtoll.c, compat/strtoull.c: New support functions.\n\t* unix/tcl.m4, unix/configure: 64-bit support and greatly enhanced\n\tcacheing.\n\n\tMost other changes, including all those in doc/* and test/* as well as\n\tthe majority in the platform directories, follow on from these.\n\n\tAlso coming out of the woodwork:\n\t* generic/tclIndex.c: Better support for Cray PVP.\n\t* win/tclWinMtherr.c: Better Borland support.\n\n\tNote that, in a number of places through the Unix part of the platform\n\tsupport, there are Tcl_Platform* references. These are expanded into\n\tthe correct way to call that particular underlying function, i.e. with\n\tor without a '64' suffix, and should be used by people working on the\n\tcore in preference to the API functions they overlay so that the code\n\tremains portable depending on the presence or absence of 64-bit\n\tsupport on the underlying platform.\n\n\t***POTENTIAL INCOMPATIBILITY***: Extracted from the TIP\n\n\tSUMMARY OF INCOMPATIBILITIES AND FIXES\n\t======================================\n\n\tThe behaviour of expressions containing constants that appear positive\n\tbut which have a negative internal representation will change, as\n\tthese will now usually be interpreted as wide integers. This is always\n\tfixable by replacing the constant with int(constant).\n\n\tExtensions creating new channel types will need to be altered as\n\tdifferent types are now in use in those areas. The change to the\n\tdeclaration of Tcl_FSStat and Tcl_FSLstat (which are the new preferred\n\tAPI in any case) are less serious as no non-alpha releases have been\n\tmade yet with those API functions.\n\n\tScripts that are lax about the use of the l modifier in format and\n\tscan will probably need to be rewritten. This should be very uncommon\n\tthough as previously it had absolutely no effect.\n\n\tExtensions that create new math functions that take more than one\n\targument will need to be recompiled (the size of Tcl_Value changes),\n\tand functions that accept arguments of any type (TCL_EITHER) will need\n\tto be rewritten to handle wide integer values. (I do not expect this\n\tto affect many extensions at all.)\n\n2002-02-14  Andreas Kupries  <andreas_kupries@users.sourceforge.net>\n\n\t* generic/tclIOCmd.c (Tcl_GetsObjCmd): Trivial fix for [Bug 517503], a\n\tmemory leak reported by Miguel Sofer <msofer@users.sf.net>. The leak\n\thappens if an error occurs for \"set var [gets $chan]\" and leak one\n\tempty object.\n\n2002-02-12  David Gravereaux <davygrvy@pobox.com>\n\n\t* djgpp/ (new directory)\n\t* djgpp/Makefile (new):\n\t* unix/tclAppInit.c:\n\t* unix/tclMtherr.c:\n\t* unix/tclUnixFCmd.c:\n\t* unix/tclUnixFile.c:\n\t* unix/tclUnixInit.c:\n\t* unix/tclUnixPort.h:  Early stage of DJGPP support for building Tcl\n\ton DOS. Dynamic loading isn't working, yet. Requires watt32 for the\n\tTCP/IP stack. No autoconf, yet. Barely tested, but makes a working exe\n\tthat runs Tcl in protected-mode, flat memory. [exec] and pipes will\n\tneed the most work as multi-tasking on DOS has to be carefully.\n\n2002-02-10  Kevin Kenny  <kennykb@acm.org>\n\n\t* doc/CrtObjCmd.3:\n\t* doc/CrtTrace.3:\n\t* generic/tcl.decls:\n\t* generic/tcl.h:\n\t* generic/tclBasic.c:\n\t* generic/tclInt.h:\n\t* generic/tclTest.c:\n\t* tests/basic.test: Added Tcl_CreateObjTrace,\n\tTcl_GetCommandInfoFromToken and Tcl_SetCommandInfoFromToken.\n\t(TIPs #32 and #79.)\n\n\t* generic/tclDecls.h:\n\t* generic/tclStubInit.c: Regenerated Stubs tables.\n\n2002-02-08  Jeff Hobbs  <jeffh@ActiveState.com>\n\n\t* unix/configure:\n\t* unix/tcl.m4: added -pthread for FreeBSD to EXTRA_CFLAGS and\n\tLDFLAGS. Also triggered nodots only for FreeBSD-3. Added\n\tAC_DEFINE(_POSIX_PTHREAD_SEMANTICS) for Solaris.\n\n\t* unix/tclUnixPort.h:\n\t* unix/tclUnixThrd.c: added thread-safe versions of readdir,\n\tlocaltime, gmtime and inet_ntoa for threaded build. (jgdavidson)\n\n\t* generic/tclScan.c (Tcl_ScanObjCmd): prevented ckfree being called on\n\ta pointer to NULL.\n\n2002-02-07  Don Porter <dgp@users.sourceforge.net>\n\n\t* doc/DString.3:\n\t* doc/Encoding.3:\n\t* doc/GetCwd.3:\n\t* doc/SplitPath.3:\n\t* doc/Translate.3:\n\t* doc/Utf.3:\n\t* generic/tcl.decls:\n\t* generic/tcl.h:\n\t* generic/tclEncoding.c:\n\t* generic/tclEnv.c:\n\t* generic/tclFileName.c:\n\t* generic/tclIOUtil.c:\n\t* generic/tclUtf.c:\n\t* generic/tclUtil.c:\n\t* mac/tclMacInit.c:\n\t* unix/tclUnixFile.c:\n\t* unix/tclUnixInit.c:\n\t* unix/tclUnixPipe.c:\n\t* win/tclWin32Dll.c:\n\t* win/tclWinFCmd.c:\n\t* win/tclWinFile.c:\n\t* win/tclWinInit.c: Partial TIP 27 rollback. Following routines\n\trestored to return (char *): Tcl_DStringAppend,\n\tTcl_DStringAppendElement, Tcl_JoinPath, Tcl_TranslateFileName,\n\tTcl_ExternalToUtfDString, Tcl_UtfToExternalDString,\n\tTcl_UniCharToUtfDString, Tcl_GetCwd, Tcl_WinTCharToUtf. Also restored\n\tTcl_WinUtfToTChar to return (TCHAR *) and Tcl_UtfToUniCharDString to\n\treturn (Tcl_UniChar *). Modified some callers. This change recognizes\n\tthat Tcl_DStrings are de-facto white-box objects.\n\n\t* generic/tclDecls.h:\n\t* generic/tclPlatDecls.h: make genstubs\n\n\t* generic/tclCmdMZ.c: corrected use of C++-style comment.\n\n2002-02-06  Jeff Hobbs  <jeffh@ActiveState.com>\n\n\t* tests/scan.test:\n\t* generic/tclScan.c (Tcl_ScanObjCmd): corrected scan 0x... %x handling\n\tthat didn't accept the 0x as a prelude to a base 16 number. [Bug\n\t495213]\n\n\t* generic/tclCompCmds.c (TclCompileRegexpCmd): made early check for\n\tbad RE to stop checking further.\n\n\t* generic/tclCmdMZ.c (Tcl_RegsubObjCmd): added special case to search\n\tfor simple 'string map' style regsub calls. Delayed creation of\n\tresultPtr object until an initial match is made, as the input string\n\tobject can then be reused for no matches.\n\t(Tcl_StringObjCmd): optimization improvements to the STR_MAP\n\talgorithm for zero-length and nocase cases.\n\n\t* tests/regexp.test:\n\t* tests/regexpComp.test: extra code coverage tests.\n\n\t* tests/string.test: added 10.18 and 10.19 extra tests.\n\n\t* generic/regc_locale.c (casecmp): slight performance improvement.\n\n2002-02-05  Don Porter <dgp@users.sourceforge.net>\n\n\t* library/http/http.tcl:\n\t* library/http/pkgIndex.tcl:  Corrected use of http::error when\n\t::error was intended. Bump to http 2.4.2.\n\n2002-02-04  Andreas Kupries  <andreas_kupries@users.sourceforge.net>\n\n\t* unix/tclUnixChan.c (FileOutputProc): Fixed [bug 465765] reported by\n\tDale Talcott <daletalcott@users.sourceforge.net>. Avoid writing\n\tnothing into a file as STREAM based implementations will consider this\n\ta EOF (if the file is a pipe). Not done in the generic layer as this\n\ttype of writing is actually useful to check the state of a socket.\n\n\t* doc/open.n: Fixed [Bug 511540], added cross-reference to 'pid' as\n\tthe command to use to retrieve the pid of a command pipeline created\n\tvia 'open'.\n\n2002-02-01  Jeff Hobbs  <jeffh@ActiveState.com>\n\n\t* generic/tclCmdMZ.c (Tcl_RegexpObjCmd): handle quirky about case\n\tearlier to avoid shimmering problem.\n\n2002-02-01  Andreas Kupries  <andreas_kupries@users.sourceforge.net>\n\n\t* tests/io.test: io-39.22 split into two tests, one platform\n\tdependent, the other not. -eofchar is not empty on the windows\n\tplatform.\n\n2002-02-01  Vince Darley <vincentdarley@users.sourceforge.net>\n\n\t* generic/tclTest.c: fix to picky windows compiler problem with the\n\t'MainLoop' function declaration.\n\n2002-01-31  Andreas Kupries  <andreas_kupries@users.sourceforge.net>\n\n\t* win/tclWinFCmd.c: TIP 27: Applied patch fixing CONST warnings on\n\tbehalf of Don Porter <dgp@users.sourceforge.net>.\n\n2002-01-30  Don Porter <dgp@users.sourceforge.net>\n\n\t* generic/tcl.decls:\n\t* generic/tcl.h:\n\t* generic/tclInt.h: For each interface identified in the TIP 27\n\tchanges below as a POTENTIAL INCOMPATIBILITY, the source of the\n\tincompatibility has been parameterized so that it can be removed. When\n\tcompiling extension code against the Tcl header files, use the\n\tcompiler flag -DUSE_NON_CONST to remove the irresolvable source\n\tincompatibilities introduced by the TIP 27 changes. Resolvable changes\n\tare left for extension authors to resolve.\n\t* generic/tclDecls.h: make genstubs\n\n2002-01-30  Vince Darley <vincentdarley@users.sourceforge.net>\n\n\t* doc/FileSystem.3: added documentation for 3 public functions which\n\thad been overlooked. [Bug 507701]\n\t* unix/mkLinks: make mklinks\n\n2002-01-29  Jeff Hobbs  <jeffh@ActiveState.com>\n\n\t* tests/regexpComp.test:\n\t* generic/tclCompCmds.c (TclCompileRegexpCmd): enhanced to support\n\t-nocase and -- options.\n\n2002-01-28  Mo DeJong  <mdejong@users.sourceforge.net>\n\n\t* unix/tcl.m4 (SC_LOAD_TCLCONFIG):\n\t* win/tcl.m4 (SC_LOAD_TCLCONFIG): Set TCL_LIB_SPEC, TCL_STUB_LIB_SPEC,\n\tand TCL_STUB_LIB_PATH to the values of TCL_BUILD_LIB_SPEC,\n\tTCL_BUILD_STUB_LIB_SPEC, and TCL_BUILD_STUB_LIB_PATH when tclConfig.sh\n\tis loaded from the build directory. A Tcl extension should make use of\n\tthe non-build versions of these variables since they will work in both\n\tcases. This modification was described in TIP 34.\n\n2002-01-28  Jeff Hobbs  <jeffh@ActiveState.com>\n\n\t* win/tclWinReg.c (regConnectRegistryProc,RecursiveDeleteKey)\n\t(DeleteKey,GetKeyNames,GetType,GetValue,OpenSubKey,SetValue):\n\tredid the CONSTification as previous changes caused failing tests.\n\n\t* tests/regexpComp.test (new):\n\t* generic/tclInt.h:\n\t* generic/tclBasic.c: added TclCompileRegexpCmd entry\n\t* generic/tclCompCmds.c (TclCompileStringCmd): corrected to return\n\tTCL_OUT_LINE_COMPILE instead of TCL_ERROR for parsing errors, so\n\tit only throws the error for runtime compile, in case the user\n\tmodifies 'string'.\n\t(TclCompileRegexpCmd): first try at a byte-compiled regexp command. It\n\thandles static strings and ^$ bounded static strings.\n\t(TclCompileAppendCmd): made TclPushVarName call always use\n\tTCL_CREATE_VAR as numWords is always > 2 at that point.\n\n\t* generic/tclExecute.c (TclExecuteByteCode:INST_LIST): correct\n\tpossibly dangerous decr in macro call.\n\n\t* win/tclWinInit.c (TclpFindVariable): CONSTification touch-up\n\n\t* win/tclWinReg.c (OpenSubKey): corrected bug introduced in\n\tCONSTification that dropped pointer reference.\n\n\t* ChangeLog.2000 (new file):\n\t* ChangeLog: broke changes from 2000 into ChangeLog.2000 to reduce\n\tsize of the main ChangeLog.\n\n2002-01-28  David Gravereaux <davygrvy@pobox.com>\n\n\t* generic/tclPlatDecls.h:  Added preprocessor logic to force a\n\ttypedef of TCHAR when __STDC__ is defined when using the uncommon\n\t-Za compiler switch with the microsoft compiler.\n\n2002-01-27  Don Porter <dgp@users.sourceforge.net>\n\n\t* doc/package.n: Documented global namespace context for script\n\tevaluation by [package require].\n\n2002-01-27  Daniel Steffen  <das@users.sourceforge.net>\n\n\t* generic/tclInt.decls:\n\t* generic/tclIntPlatDecls.h:\n\t* mac/tclMacChan.c:\n\t* mac/tclMacFCmd.c:\n\t* mac/tclMacFile.c:\n\t* mac/tclMacInit.c:\n\t* mac/tclMacLoad.c:\n\t* mac/tclMacResource.c:\n\t* mac/tclMacSock.c: TIP 27 CONSTification induced changes\n\n\t* tests/event.test:\n\t* tests/main.test: added catches/constraints to test that\n\tuse features that don't exist on the mac.\n\n2002-01-25  Mo DeJong  <mdejong@users.sourceforge.net>\n\n\tMake -eofchar and -translation options read only for server sockets.\n\t[Bug 496733]\n\n\t* generic/tclIO.c (Tcl_GetChannelOption, Tcl_SetChannelOption):\n\tInstead of returning nothing for the -translation option on a server\n\tsocket, always return \"auto\". Return the empty string enclosed in\n\tquotes for the -eofchar option on a server socket. Fixup -eofchar\n\tusage message so that it matches the implementation.\n\t* tests/io.test: Add -eofchar tests and -translation tests to ensure\n\toptions are read only on server sockets.\n\t* tests/socket.test: Update tests to account for -eofchar and\n\t-translation option changes.\n\n2002-01-25  Don Porter <dgp@users.sourceforge.net>\n\n\t* compat/strstr.c (strstr):\n\t* generic/tclCmdAH.c (Tcl_FormatObjCmd):\n\t* generic/tclCmdIL.c (InfoNameOfExecutableCmd):\n\t* generic/tclEnv.c (ReplaceString):\n\t* generic/tclFileName.c (ExtractWinRoot):\n\t* generic/tclIO.c (FlushChannel,Tcl_BadChannelOption):\n\t* generic/tclStringObj.c (AppendUnicodeToUtfRep):\n\t* generic/tclThreadTest.c (TclCreateThread):\n\t* generic/tclUtf.c (Tcl_UtfPrev):\n\t* mac/tclMacFCmd.c (TclpObjListVolumes):\n\t* mac/tclMacResource.c (TclMacRegisterResourceFork,\n\t(BuildResourceForkList):\n\t* win/tclWinInit.c (AppendEnvironment):  Sought out and eliminated\n\tinstances of CONST-casting that are no longer needed after the\n\tTIP 27 effort.\n\n\t* Following is [Patch 501006]\n\t* generic/tclInt.decls (Tcl_AddInterpResolvers, Tcl_Export,\n\t(Tcl_FindNamespace, Tcl_GetInterpResolvers, Tcl_ForgetImport,\n\t(Tcl_Import, Tcl_RemoveInterpResolvers):\n\t* generic/tclNamesp.c (Tcl_Export, Tcl_Import, Tcl_ForgetImport,\n\t(Tcl_FindNamespace):\n\t* generic/tclResolve.c (Tcl_AddInterpResolvers,Tcl_GetInterpResolvers,\n\t(Tcl_RemoveInterpResolvers): Updated APIs in generic/tclResolve.c and\n\tgeneric/tclNamesp.c according to the guidelines of TIP 27.\n\t* generic/tclIntDecls.h: make genstubs\n\n\t* Following is [Patch 505630]\n\t* doc/AddErrorInfo.3:\n\t* generic/tcl.decls (Tcl_LogCommandInfo):\n\t* generic/tclBasic.c (Tcl_LogCommandInfo): Updated interfaces\n\tof generic/tclBasic.cc according to TIP 27.\n\t* generic/tclDecls.h: make genstubs\n\n\t* Following is [Patch 506818]\n\t* doc/Hash.3:\n\t* generic/tcl.decls (Tcl_HashStats):\n\t* generic/tclHash.c (Tcl_HashStats):  Updated APIs of generic/tclHash.c\n\taccording to guidelines of TIP 27.\n\t* generic/tclDecls.h: make genstubs\n\t* generic/tclVar.c (Tcl_ArrayObjCmd): Updated callers.\n\n\t* Following is [Patch 506807]\n\t* doc/ObjectType.3:\n\t* generic/tcl.decls (Tcl_GetObjType):\n\t* generic/tclObj.c (Tcl_GetObjType): Updated APIs of generic/tclObj.c\n\taccording to guidelines of TIP 27.\n\t* generic/tclDecls.h: make genstubs\n\n\t* Following is [Patch 507304]\n\t* doc/Encoding.3:\n\t* generic/tcl.decls (Tcl_WinUtfToTChar,Tcl_WinTCharToUtf):\n\t* win/tclWin32Dll.c (Tcl_WinUtfToTChar,Tcl_WinTCharToUtf):\n\tUpdated interfaces in win/tclWin32Dll.c according to TIP 27.\n\t* generic/tclPlatDecls.h: make genstubs\n\t* generic/tclIOUtil.c (TclpNativeToNormalized):\n\t* win/tclWinFCmd.c (TclpObjNormalizePath):\n\t* win/tclWinFile.c (TclpFindExecutable,TclpMatchInDirectory,\n\t(NativeIsExec,NativeStat):\n\t* win/tclWinLoad.c (TclpLoadFile):\n\t* win/tclWinPipe.c (TclpOpenFile,ApplicationType):\n\t* win/tclWinReg.c (regConnectRegistryProc,RecursiveDeleteKey,DeleteKey,\n\t(GetKeyNames,GetType,GetValue,OpenSubKey,SetValue):\n\t* win/tclWinSerial.c (SerialSetOptionProc): Update callers.\n\n\t* Following is [Patch 505072]\n\t* doc/Concat.3:\n\t* doc/Encoding.3:\n\t* doc/Filesystem.3:\n\t* doc/Macintosh.3:\n\t* doc/OpenFileChnl.3\n\t* doc/SetResult.3:\n\t* doc/SetVar.3:\n\t* doc/SplitList.3:\n\t* doc/SplitPath.3:\n\t* doc/Translate.3:\n\t* generic/tcl.h (Tcl_FSMatchInDirectoryProc):\n\t* generic/tclInt.h (TclpMatchInDirectory):\n\t* generic/tcl.decls (Tcl_Concat,Tcl_GetStringResult,Tcl_GetVar,\n\t(Tcl_GetVar2,Tcl_JoinPath,Tcl_Merge,Tcl_OpenCommandChannel,Tcl_SetVar,\n\t(Tcl_SetVar2,Tcl_SplitList,Tcl_SplitPath,Tcl_TranslateFileName,\n\t(Tcl_ExternalToUtfDString,Tcl_GetEncodingName,Tcl_UtfToExternalDString,\n\t(Tcl_GetDefaultEncodingDir,Tcl_SetDefaultEncodingDir,\n\t(Tcl_FSMatchInDirectory,Tcl_MacEvalResource,Tcl_MacFindResource):\n\t* generic/tclInt.decls (TclCreatePipeline,TclGetEnv,TclpGetCwd,\n\t(TclpCreateProcess):\n\t* mac/tclMacFile.c (TclpGetCwd):\n\t* generic/tclEncoding.c (Tcl_GetDefaultEncodingDir,\n\t(Tcl_SetDefaultEncodingDir,Tcl_GetEncodingName,\n\t(Tcl_ExternalToUtfDString,Tcl_UtfToExternalDString, OpenEncodingFile,\n\t(LoadEscapeEncoding):\n\t* generic/tclFileName.c (DoTildeSubst,Tcl_JoinPath,Tcl_SplitPath,\n\t(Tcl_TranslateFileName):\n\t* generic/tclIOUtil.c (Tcl_FSMatchInDirectory):\n\t* generic/tclPipe.c (FileForRedirect,TclCreatePipeline,\n\t(Tcl_OpenCommandChannel):\n\t* generic/tclResult.c (Tcl_GetStringResult):\n\t* generic/tclUtil.c (Tcl_Concat,Tcl_SplitList,Tcl_Merge):\n\t* generic/tclVar.c (Tcl_GetVar,Tcl_GetVar2,Tcl_SetVar,Tcl_SetVar2):\n\t* mac/tclMacResource.c (Tcl_MacEvalResource,Tcl_MacFindResource):\n\tUpdated interfaces of generic/tclEncoding, generic/tclFilename.c,\n\tgeneric/tclIOUtil.c, generic/tclPipe.c, generic/tclResult.c,\n\tgeneric/tclUtil.c, generic/tclVar.c and mac/tclMacResource.c according\n\tto TIP 27. Tcl_TranslateFileName rewritten as wrapper around VFS-aware\n\tversion.\n\t***POTENTIAL INCOMPATIBILITY***\n\tIncludes source incompatibilities: argv arguments of Tcl_Concat,\n\tTcl_JoinPath, Tcl_OpenCommandChannel, Tcl_Merge; argvPtr arguments of\n\tTcl_SplitList and Tcl_SplitPath.\n\t* generic/tclDecls.h:\n\t* generic/tclIntDecls.h: make genstubs\n\n\t* generic/tclCkalloc.c (MemoryCmd):\n\t* generic/tclClock.c (FormatClock):\n\t* generic/tclCmdAH.c (Tcl_CaseObjCmd,Tcl_EncodingObjCmd,Tcl_FileObjCmd):\n\t* generic/tclCmdIL.c (InfoLibraryCmd,InfoPatchLevelCmd,\n\t(InfoTclVersionCmd):\n\t* generic/tclCompCmds.c (TclCompileForeachCmd):\n\t* generic/tclCompCmds.h (TclCompileForeachCmd):\n\t* generic/tclCompile.c (TclFindCompiledLocal):\n\t* generic/tclEnv.c (TclSetupEnv,TclSetEnv,Tcl_PutEnv,TclGetEnv,\n\t(EnvTraceProc):\n\t* generic/tclEvent.c (Tcl_BackgroundError):\n\t* generic/tclIO.c (Tcl_BadChannelOption,Tcl_SetChannelOption):\n\t* generic/tclIOCmd.c (Tcl_ExecObjCmd,Tcl_OpenObjCmd):\n\t* generic/tclIOSock.c (TclSockGetPort):\n\t* generic/tclIOUtil.c (SetFsPathFromAny):\n\t* generic/tclLink.c (LinkTraceProc):\n\t* generic/tclMain.c (Tcl_Main):\n\t* generic/tclNamesp.c (TclTeardownNamespace):\n\t* generic/tclProc.c (TclCreateProc):\n\t* generic/tclTest.c (TestregexpObjCmd,TesttranslatefilenameCmd,\n\t(TestchmodCmd,GetTimesCmd,TestsetCmd,TestOpenFileChannelProc1,\n\t(TestOpenFileChannelProc2,TestOpenFileChannelProc3,AsyncHandlerProc,\n\t(TestpanicCmd):\n\t* generic/tclThreadTest.c (ThreadErrorProc,ThreadEventProc):\n\t* generic/tclUtil.c (TclPrecTraceProc):\n\t* mac/tclMacFCmd.c (GetFileSpecs):\n\t* mac/tclMacFile.c (TclpMatchInDirectory):\n\t* mac/tclMacInit.c (TclpInitLibraryPath,Tcl_SourceRCFile):\n\t* mac/tclMacOSA.c (tclOSAStore,tclOSALoad):\n\t* mac/tclMacResource.c (Tcl_MacEvalResource):\n\t* unix/tclUnixFCmd.c (TclpObjNormalizePath):\n\t* unix/tclUnixFile.c (TclpMatchInDirectory,TclpGetUserHome,TclpGetCwd,\n\t(TclpReadLink):\n\t* unix/tclUnixInit.c (TclpInitLibraryPath,TclpSetVariables,\n\t(Tcl_SourceRCFile):\n\t* unix/tclUnixPipe.c (TclpOpenFile,TclpCreateTempFile,\n\t(TclpCreateProcess):\n\t* win/tclWinFile.c (TclpGetCwd,TclpMatchInDirectory):\n\t* win/tclWinInit.c (TclpInitLibraryPath,Tcl_SourceRCFile,\n\t(TclpSetVariables):\n\t* win/tclWinPipe.c (TclpCreateProcess): Updated callers.\n\n2002-01-24  Don Porter <dgp@users.sourceforge.net>\n\n\t* generic/tclIOUtil.c (SetFsPathFromAny):  Corrected tilde-substitution\n\tof pathnames where > 1 separator follows the ~. [Bug 504950]\n\n2002-01-24  Jeff Hobbs  <jeffh@ActiveState.com>\n\n\t* library/http/pkgIndex.tcl:\n\t* library/http/http.tcl: don't add port in default case to handle\n\tbroken servers. http bumped to 2.4.1  [Bug 504508]\n\n2002-01-23  Andreas Kupries  <andreas_kupries@users.sourceforge.net>\n\n\t* unix/mkLinks: Regenerated.\n\t* doc/CrtChannel.3:\n\t* doc/ChnlStack.3: Moved documentation for 'Tcl_GetTopChannel' from\n\t'CrtChannel' to 'ChnlStack'. Added documentation of\n\t'Tcl_GetStackedChannel'. [Bug 506147] reported by Mark Patton\n\t<msp@users.sourceforge.net>.\n\n2002-01-23  Don Porter <dgp@users.sourceforge.net>\n\n\t* win/tclWinFile.c (NativeAccess,NativeStat,NativeIsExec,\n\t(TclpGetUserHome):\n\t* win/tclWinPort.h (TclWinSerialReopen):\n\t* win/tclWinSerial.c (TclWinSerialReopen):\n\t* win/tclWinSock.c (Tcl_OpenTcpServer):  Corrections to earlier TIP 27\n\tchanges. Thanks to Andreas Kupries for the feedback.\n\t* generic/tclPlatDecls.h: make genstubs\n\n\t* doc/GetHostName.3:\n\t* doc/GetOpnFl.3:\n\t* doc/OpenTcp.3:\n\t* tcl.decls (Tcl_GetHostName,Tcl_GetOpenFile,Tcl_OpenTcpClient,\n\t(Tcl_OpenTclServer):\n\t* mac/tclMacSock.c (CreateSocket,Tcl_OpenTcpClient,Tcl_OpenTcpServer,\n\t(Tcl_GetHostName,GetHostFromString):\n\t* unix/tclUnixChan.c (CreateSocket,CreateSocketAddress,\n\t(Tcl_OpenTcpClient,Tcl_OpenTcpServer,Tcl_GetOpenFile):\n\t* unix/tclUnixSock.c (Tcl_GetHostName):\n\t* win/tclWinSock.c (CreateSocket,CreateSocketAddress,\n\t(Tcl_OpenTcpClient,Tcl_OpenTcpServer,Tcl_GetHostName):\n\tUpdated socket interfaces according to TIP 27.\n\t* generic/tclCmdIL.c (InfoHostnameCmd): Updated callers.\n\t* generic/tclDecls.h: make genstubs\n\n2002-01-21  David Gravereaux <davygrvy@pobox.com>\n\n\t* generic/tclLoadNone.c: TclpLoadFile() didn't match proto of typedef\n\tTcl_FSLoadFileProc. OK'd by vincentdarley. [Patch 502488]\n\n2002-01-21  Andreas Kupries  <andreas_kupries@users.sourceforge.net>\n\n\t* generic/tclIO.c (WriteChars): Fix for [Bug 506297], reported by\n\tMartin Forssen <ruric@users.sourceforge.net>. The encoding chosen in\n\tthe script exposing the bug writes out three intro characters when\n\tTCL_ENCODING_START is set, but does not consume any input as\n\tTCL_ENCODING_END is cleared. As some output was generated the\n\tenclosing loop calls UtfToExternal again, again with START set. Three\n\tmore characters in the out and still no use of input ... To break this\n\tinfinite loop we remove TCL_ENCODING_START from the set of flags after\n\tthe first call (no condition is required, the later calls remove an\n\tunset flag, which is a no-op). This causes the subsequent calls to\n\tUtfToExternal to consume and convert the actual input.\n\n2002-01-21  Don Porter <dgp@users.sourceforge.net>\n\n\t* generic/tclTest.c: Converted declarations of TestReport file system\n\tto more portable form. [Bug 501417]\n\n\t* generic/tcl.decls (Tcl_TraceCommand,Tcl_UntraceCommand,\n\t(Tcl_CommandTraceInfo):\n\t* generic/tclCmdMZ.c (Tcl_TraceCommand,Tcl_UntraceCommand,\n\t(Tcl_CommandTraceInfo): Updated APIs in generic/tclCmdMZ.c according\n\tto the guidelines of TIP 27.\n\t* generic/tclDecls.h: make genstubs\n\n2002-01-18  Don Porter <dgp@users.sourceforge.net>\n\n\t* win/tclWinChan.c:\n\t* win/tclWinFCmd.c:\n\t* win/tclWinFile.c: Overlooked callers of Tcl_FSGetNativePath\n\n\t* win/tclWinDde.c:\n\t* win/tclWinReg.c: Overlooked callers of Tcl_GetIndexFromObj\n\n2002-01-18  Daniel Steffen  <das@users.sourceforge.net>\n\n\t* generic/tclThreadTest.c:\n\t* mac/tclMacChan.c:\n\t* mac/tclMacFCmd.c:\n\t* mac/tclMacFile.c:\n\t* mac/tclMacLoad.c:\n\t* mac/tclMacResource.c: TIP 27 CONSTification broke the mac build in a\n\tnumber of places.\n\n2002-01-17  Andreas Kupries  <andreas_kupries@users.sourceforge.net>\n\n\t* generic/tclIOCmd.c (Tcl_GetsObjCmd): Fixed [Bug 504642] as reported\n\tby Brian Griffin <bgriffin@users.sourceforge.net>, using his\n\tpatch. Before the patch the generic I/O layer held an unannounced\n\treference to the interp result to store the read line into. This\n\tunfortunately has disastrous results if the channel driver executes a\n\ttcl script to perform its operation, this freeing the interp\n\tresult. In that case we are dereferencing essentially a dangling\n\treference. It is not truly dangling because the object is in the free\n\tlist, but this only causes us to smash the free list and have the\n\terror occur later somewhere else. The patch simply creates a new\n\tobject for the line and later sets it into the interp result when we\n\tare done with reading.\n\n2002-01-16  Mo DeJong  <mdejong@users.sourceforge.net>\n\n\t* unix/tcl.m4 (SC_LOAD_TCLCONFIG):\n\t* win/tcl.m4 (SC_LOAD_TCLCONFIG): Subst TCL_DBGX into\n\tTCL_STUB_LIB_FILE and TCL_STUB_LIB_FLAG variables so that an extension\n\tdoes not need to subst TCL_DBGX into its makefile. [Tk Bug 504356]\n\n2002-01-16  Don Porter <dgp@users.sourceforge.net>\n\n\t* doc/FileSystem.3:\n\t* doc/GetCwd.3:\n\t* doc/GetIndex.3:\n\t* generic/tcl.decls (Tcl_GetIndexFromObj, Tcl_GetIndexFromObjStruct,\n\t(Tcl_GetCwd, Tcl_FSFileAttrStrings, Tcl_FSGetNativePath,\n\t(Tcl_FSGetTranslatedStringPath):\n\t* generic/tcl.h (Tcl_FSFileAttrStringsProc):\n\t* generic/tclFCmd.c (TclFileAttrsCmd):\n\t* generic/tclIOUtil.c (Tcl_GetCwd,NativeFileAttrStrings,\n\t(Tcl_FSFileAttrStrings,Tcl_FSGetTranslatedStringPath,\n\t(Tcl_FSGetNativePath):\n\t* generic/tclIndexObj.c (Tcl_GetIndexFromObj,\n\t(Tcl_GetIndexFromObjStruct):\n\tMore TIP 27 updates in tclIOUtil.c and tclIndexObj.c that were\n\toverlooked before. [Patch 504671]\n\t***POTENTIAL INCOMPATIBILITY***\n\tIncludes a source incompatibility in the tablePtr arguments of the\n\tTcl_GetIndexFromObj* routines.\n\t* generic/tclDecls.h: make genstubs\n\n\t* generic/tclBinary.c (Tcl_BinaryObjCmd):\n\t* generic/tclClock.c (Tcl_ClockObjCmd):\n\t* generic/tclCmdAH.c (Tcl_EncodingObjCmd, Tcl_FileObjCmd):\n\t* generic/tclCmdIL.c (Tcl_InfoObjCmd,Tcl_LsearchObjCmd,Tcl_LsortObjCmd):\n\t* generic/tclCmdMZ.c (Tcl_TraceObjCmd,Tcl_RegexpObjCmd,Tcl_RegsubObjCmd,\n\t(Tcl_StringObjCmd,Tcl_SubstObjCmd,Tcl_SwitchObjCmd,\n\t(TclTraceCommandObjCmd,TclTraceVariableObjCmd):\n\t* generic/tclCompCmds.c (TclCompileStringCmd):\n\t* generic/tclEvent.c (Tcl_UpdateObjCmd):\n\t* generic/tclFileName.c (Tcl_GlobObjCmd):\n\t* generic/tclIO.c (Tcl_FileEventObjCmd):\n\t* generic/tclIOCmd.c (Tcl_SeekObjCmd,Tcl_ExecObjCmd,Tcl_SocketObjCmd,\n\t(Tcl_FcopyObjCmd):\n\t* generic/tclInterp.c (Tcl_InterpObjCmd,SlaveObjCmd):\n\t* generic/tclNamesp.c (Tcl_NamespaceObjCmd):\n\t* generic/tclPkg.c (Tcl_PackageObjCmd):\n\t* generic/tclTest.c (Tcltest_Init,TestencodingObjCmd,TestgetplatformCmd,\n\t(TestlocaleCmd,TestregexpObjCmd,TestsaveresultCmd,\n\t(TestGetIndexFromObjStructObjCmd,TestReportFileAttrStrings):\n\t* generic/tclTestObj.c (TestindexObjCmd,TeststringObjCmd):\n\t* generic/tclTimer.c (Tcl_AfterObjCmd):\n\t* generic/tclVar.c (Tcl_ArrayObjCmd):\n\t* mac/tclMacFCmd.c (SetFileFinderAttributes):\n\t* unix/tclUnixChan.c (TclpOpenFileChannel):\n\t* unix/tclUnixFCmd.c (tclpFileAttrStrings):\n\t* unix/tclUnixFile.c (TclpObjAccess,TclpObjChdir,TclpObjStat,\n\t(TclpObjLstat):\n\t* win/tclWinFCmd.c (tclpFileAttrStrings): Updated callers.\n\n\t* doc/RegExp.3:\n\t* doc/Utf.3:\n\t* generic/tcl.decls:\n\t* generic/tclInt.decls:\n\t* generic/tclRegexp.c:\n\t* generic/tclUtf.c:  Updated APIs in generic/tclUtf.c and\n\tgeneric/tclRegexp.c according to the guidelines of TIP 27.\n\t[Patch 471509]\n\n\t* generic/regc_locale.c (element,cclass):\n\t* generic/tclCmdMZ.c (Tcl_StringObjCmd):\n\t* generic/tclFileName.c (TclpGetNativePathType,SplitMacPath):\n\t* generic/tclIO.c (ReadChars):\n\t* mac/tclMacLoad.c (TclpLoadFile):\n\t* win/tclWinFile.c (TclpGetUserHome): Updated callers.\n\n\t* generic/tclDecls.h:\n\t* generic/tclIntDecls.h: make genstubs\n\n\t* doc/ParseCmd.3 (Tcl_ParseVar):\n\t* generic/tcl.decls (Tcl_ParseVar):\n\t* generic/tclParse.c (Tcl_ParseVar):\n\t* generic/tclTest.c (TestparsevarObjCmd): Updated APIs in\n\tgeneric/tclParse.c according to the guidelines of TIP 27. Updated\n\tcallers. [Patch 501046]\n\t* generic/tclDecls.h: make genstubs\n\n\t* generic/tcl.decls (Tcl_RecordAndEval):\n\t* generic/tclDecls.h: make genstubs\n\t* generic/tclHistory.c (Tcl_RecordAndEval): Updated APIs in\n\tgeneric/tclHistory.c according to the guidelines of TIP 27.\n\t[Patch 504091]\n\n\t* doc/CrtSlave.3:\n\t* generic/tcl.decls (Tcl_CreateAlias, Tcl_CreateAliasObj,\n\t(Tcl_CreateSlave, Tcl_GetAlias, Tcl_GetAliasObj, Tcl_GetSlave):\n\t* generic/tclInterp.c (Tcl_CreateAlias, Tcl_CreateAliasObj,\n\t(Tcl_CreateSlave, Tcl_GetAlias, Tcl_GetAliasObj, Tcl_GetSlave):\n\tUpdated APIs in the file generic/tclInterp.c according to the\n\tguidelines of TIP 27. [Patch 501371]\n\t***POTENTIAL INCOMPATIBILITY***\n\tIncludes a source incompatibility in the targetCmdPtr arguments of the\n\tTcl_GetAlias* routines.\n\n\t* generic/tclDecls.h: make genstubs\n\n2002-01-15  Don Porter <dgp@users.sourceforge.net>\n\n\t* doc/SetErrno.3 (Tcl_ErrnoMsg): Corrected documentation for\n\tTcl_ErrnoMsg; it takes an integer argument. Thanks to Georgios\n\tPetasis. [Bug 468183]\n\n\t* doc/AddErrInfo.3 (Tcl_PosixError):\n\t* doc/Eval.3 (Tcl_EvalFile):\n\t* doc/FileSystem.c (Tcl_FSOpenFileChannel,Tcl_FSOpenFileChannelProc):\n\t* doc/OpenFileChnl.3 (Tcl_OpenFileChannel):\n\t* doc/SetErrno.3 (Tcl_ErrnoId,Tcl_ErrnoMsg):\n\t* doc/Signal.3 (Tcl_SignalId,Tcl_SignalMsg):\n\t* generic/tcl.decls (Tcl_ErrnoId,TclErrnoMsg,Tcl_EvalFile,\n\t(Tcl_OpenFileChannel,Tcl_PosixError,Tcl_SignalId,Tcl_SignalMsg,\n\t(Tcl_FSOpenFileChannel):\n\t* generic/tcl.h (Tcl_FSOpenFileChannelProc):\n\t* generic/tclIO.c (FlushChannel):\n\t* generic/tclIOUtil.c (Tcl_OpenFileChannel,Tcl_EvalFile,TclGetOpenMode,\n\t(Tcl_PosixError,Tcl_FSOpenFileChannel):\n\t* generic/tclInt.decls (TclGetOpenMode):\n\t* generic/tclInt.h (TclOpenFileChannelProc_,TclGetOpenMode,\n\t(TclpOpenFileChannel):\n\t* generic/tclPipe.c (TclCleanupChildren):\n\t* generic/tclPosixStr.c (Tcl_ErrnoId,Tcl_ErrnoMsg,Tcl_SignalId,\n\t(Tcl_SignalMsg):\n\t* generic.tclTest.c (PretendTclpOpenFileChannel,\n\t(TestOpenFileChannelProc1,TestOpenFileChannelProc2,\n\t(TestOpenFileChannelProc3,TestReportOpenFileChannel):\n\t* mac/tclMacChan.c (TclpOpenFileChannel):\n\t* unix/tclUnixChan.c (TclpOpenFileChannel):\n\t* win/tclWinChan.c (TclpOpenFileChannel): Updated APIs in\n\tgeneric/tclIOUtil.c and generic/tclPosixStr.c according to the\n\tguidelines of TIP 27. Updated callers. [Patch 499196]\n\n\t* generic/tclDecls.h:\n\t* generic/tclIntDecls.h: make genstubs\n\n\t* doc/CrtChannel.3:\n\t* doc/OpenFileChnl.3:\n\t* generic/tcl.decls:\n\t* generic/tclIO.h:\n\t* generic/tclIO.c (DoWrite, Tcl_RegisterChannel, Tcl_GetChannel,\n\t(Tcl_CreateChannel, Tcl_GetChannelName, CloseChannel, Tcl_Write,\n\t(Tcl_WriteRaw, Tcl_Ungets, Tcl_BadChannelOption, Tcl_GetChannelOption,\n\t(Tcl_SetChannelOption, Tcl_GetChannelNamesEx, Tcl_ChannelName):\n\tUpdated APIs in the file generic/tclIO.c according to the guidelines\n\tof TIP 27. Several minor documentation corrections as well.\n\t[Patch 503565]\n\t* generic/tclDecls.h: make genstubs\n\n\t* generic/tcl.h (Tcl_DriverOutputProc, Tcl_DriverGetOptionProc,\n\t(Tcl_DriverSetOptionProc):\n\t* generic/tclIOGT.c (TransformOutputProc, TransformGetOptionProc,\n\t(TransformSetOptionProc):\n\t* mac/tclMacChan.c (FileOutput, StdIOOutput):\n\t* man/tclMacSock.c (TcpGetOptionProc, TcpOutput):\n\t* unix/tclUnixChan.c (FileOutputProc, TcpGetOptionProc, TcpOutputProc,\n\t(TtyGetOptionProc, TtySetOptionProc):\n\t* unix/tclUnixPipe.c (PipeOuputProc):\n\t* win/tclWinChan.c (FileOutputProc):\n\t* win/tclWinConsole.c (ConsleOutputProc):\n\t* win/tclWinPipe.c (PipeOuputProc):\n\t* win/tclWinSerial.c (SerialOutputProc, SerialGetOptionProc,\n\t(SerialSetOptionProc):\n\t* win/tclWinSock.c (TcpGetOptionProc, TcpOutput): Updated channel\n\tdriver interface according to the guidelines of TIP 27. See also\n\t[Bug 500348].\n\n\t* doc/CrtChannel.3:\n\t* generic/tcl.h:\n\t* generic/tclIO.c:\n\t* generic/tclIO.h:\n\t* generic/tclInt.h:\n\t* tools/checkLibraryDoc.tcl:\n\tMoved Tcl_EolTranslation enum declaration from generic/tcl.h to\n\tgeneric/tclInt.h (renamed to TclEolTranslation). It is not used\n\tanywhere in Tcl's public interface.\n\n2002-01-14  Don Porter <dgp@users.sourceforge.net>\n\n\t* doc/GetIndex.3:\n\t* doc/WrongNumArgs.3:\n\t* generic/tcl.decls (Tcl_GetIndexFromObj, Tcl_GetIndexFromObjStruct,\n\t(Tcl_WrongNumArgs):\n\t* generic/tclIndexObj.c (Tcl_GetIndexFromObj,Tcl_GetIndexFromObjStruct,\n\t(Tcl_WrongNumArgs): Updated APIs in the file generic/tclIndexObj.c\n\taccording to the guidelines of TIP 27. [Patch 501491]\n\t* generic/tclDecls.h: make genstubs\n\n2002-01-11  Mo DeJong  <mdejong@users.sourceforge.net>\n\n\t* unix/configure: Regen.\n\t* unix/configure.in:\n\t* win/configure: Regen.\n\t* win/configure.in: Use ${libdir} instead of ${exec_prefix}/lib\n\tto properly support the --libdir option to configure. [Bug 489370]\n\n2002-01-11  Andreas Kupries  <andreas_kupries@users.sourceforge.net>\n\n\t* win/tclWinSerial.c (SerialSetOptionProc): Applied patch for [Bug\n\t500348] supplied by Rolf Schroedter <schroedter@users.sf.net>. The\n\tfunction modified the contents of the the 'value' string and now does\n\tnot do this anymore. This is a followup to the change made on\n\t2001-12-17.\n\n2002-01-11  David Gravereaux <davygrvy@pobox.com>\n\n\t* win/makefile.vc: Removed -GD compiler option. It was intended for\n\tfuture use, but MS is again changing the future at their whim. The\n\tD4002 warning was harmless though, but someone using VC .NET logged it\n\tas a concern. [Bug 501565]\n\n2002-01-11  Mo DeJong  <mdejong@users.sourceforge.net>\n\n\t* unix/Makefile.in: Burn Tcl build directory into tcltest executable\n\tto avoid crashes caused by ld loading a previously installed version\n\tof the tcl shared library. [Bug 218110]\n\n2002-01-10  Don Porter <dgp@users.sourceforge.net>,\n\tKevin Kenny <kennykb@users.sourceforge.net>\n\n\t* unix/tclLoadDld.c (TclpLoadFile):  syntax error: unbalanced parens.\n\tKevin notes that it's far from clear that this file is ever included\n\tin an actual build; Linux without dlopen appears to be a nonexistent\n\tconfiguration.\n\n2002-01-08  Don Porter <dgp@users.sourceforge.net>,\n\tKevin Kenny <kennykb@users.sourceforge.net>\n\n\t* doc/StaticPkg.3 (Tcl_StaticPackage):\n\t* generic/tcl.decls (Tcl_StaticPackage):\n\t* generic/tclDecls.h (Tcl_StaticPackage):\n\t* generic/tclInt.decls (TclGuessPackageName):\n\t* generic/tclInt.h (TclGuessPackageName):\n\t* generic/tclLoad.c (Tcl_StaticPackage):\n\t* generic/tclLoadNone.c (TclGuessPackageName):\n\t* mac/tclMacLoad.c (TclGuessPackageName):\n\t* unix/tclLoadAout.c (TclGuessPackageName):\n\t* unix/tclLoadDl.c (TclGuessPackageName):\n\t* unix/tclLoadDld.c (TclGuessPackageName):\n\t* unix/tclLoadDyld.c (TclGuessPackageName):\n\t* unix/tclLoadNext.c (TclGuessPackageName):\n\t* unix/tclLoadOSF.c (TclGuessPackageName):\n\t* unix/tclLoadShl.c (TclGuessPackageName):\n\t* win/tclWinLoad.c (TclGuessPackageName):  Updated APIs in the files\n\t*/tcl*Load*.c according to the guidelines of TIP 27. [Patch 501096]\n\n2002-01-09  Don Porter <dgp@users.sourceforge.net>\n\n\t* generic/tclTest.c (MainLoop):\n\t* tests/main.test (Tcl_Main-1.{3,4,5,6}):  Corrected some non-portable\n\ttests from the new Tcl_Main changes. Thanks to Kevin Kenny.\n\n2002-01-07  Don Porter <dgp@users.sourceforge.net>\n\n\t* generic/tclEvent.c (TclInExit):\n\t* generic/tclIOUtil.c (SetFsPathFromAbsoluteNormalized,\n\t(SetFsPathFromAny,Tcl_FSNewNativePath,DupFsPathInternalRep):\n\t* generic/tclListObj.c (TclLsetList,TclLsetFlat):  Added some type\n\tcasts to satisfy picky compilers.\n\n\t* generic/tclMain.c:  Bug fix: neglected the NULL case in\n\tTclGetStartupScriptFileName(). Broke Tk/wish.\n\n2002-01-05  Don Porter <dgp@users.sourceforge.net>\n\n\t* doc/Tcl_Main.3:\n\t* generic/tclMain.c:  Substantial rewrite and expanded documentation\n\tof Tcl_Main to correct a number of bugs and flaws:\n\n\t  - Interactive Tcl_Main can now enter a main loop, exit that loop and\n\t    continue interactive operations. The loop may even exit in the\n\t    midst of interactive command typing without loss of the partial\n\t    command. [Bugs 486453, 474131]\n\t  - Tcl_Main now gracefully handles deletion of its master\n\t    interpreter.\n\t  - Interactive Tcl_Main can now operate with non-blocking stdin\n\t  - Interactive Tcl_Main can now detect EOF on stdin even in\n\t    mid-command. [Bug 491341]\n\t  - Added VFS-aware internal routines for managing the startup script\n\t    selection.\n\t  - Tcl variable 'tcl_interactive' is now linked to C variable 'tty'\n\t    so that one can disable/enable interactive prompts at the script\n\t    level when there is no startup script. This is meant for use by\n\t    the test suite.\n\t  - Consistent use of the Tcl libraries standard channels as returned\n\t    by Tcl_GetStdChannel(); as opposed to the channels named 'stdin',\n\t    'stdout', and 'stderr' in the master interp, which can be\n\t    different or unavailable.\n\t  - Tcl_Main now calls Tcl_Exit() if evaluation of [exit] in the\n\t    master interpreter returns, assuring Tcl_Main does not return.\n\t  - Documented Tcl_Main's absence from public stub table\n\t  - Documented that Tcl_Main does not return.\n\t  - Documented Tcl variables set by Tcl_Main.\n\t  - All prompts are done from a single procedure, Prompt.\n\t  - Use of Tcl_Obj-enabled interfaces everywhere.\n\n\t* generic/tclInt.decls (TclGetStartupScriptPath,\n\t(TclSetStartupScriptPath): New internal VFS-aware routines for\n\tmanaging the startup script of Tcl_Main.\n\t* generic/tclIntDecls.h:\n\t* generic/tclStubInit.c: make genstubs\n\n\t* generic/tclTest.c (TestsetmainloopCmd,TestexitmainloopCmd,\n\t(Tcltest_Init,TestinterpdeleteCmd):\n\t* tests/main.test (new):  Added new file to test suite that thoroughly\n\ttests generic/tclMain.c; added some new test commands for testing\n\tTcl_SetMainLoop().\n\n2002-01-04  Don Porter <dgp@users.sourceforge.net>\n\n\t* doc/Alloc.3:\n\t* doc/Concat.3:\n\t* doc/CrtMathFnc.3:\n\t* doc/Hash.3:\n\t* doc/Interp.3:\n\t* doc/LinkVar.3:\n\t* doc/ObjectType.3:\n\t* doc/PkgRequire.3:\n\t* doc/Preserve.3:\n\t* doc/SetResult.3:\n\t* doc/SplitList.3:\n\t* doc/SplitPath.3:\n\t* doc/TCL_MEM_DEBUG.3: Updated documentation to describe the ckalloc,\n\tckfree, ckrealloc, attemptckalloc, and attemptckrealloc macros, and\n\tto accurately describe when and how they are used. [Bug 497459]\n\n\t* generic/tclThreadJoin.c (TclRememberJoinableThread,TclJoinThread):\n\tReplaced Tcl_Alloc and Tcl_Free calls with ckalloc and ckfree so that\n\tmemory debugging is supported.\n\n2002-01-04  Daniel Steffen <das@users.sourceforge.net>\n\n\t* mac/tclMacTime.c (TclpGetTZName): fix for daylight savings TZName bug\n\n2002-01-03  Don Porter <dgp@users.sourceforge.net>\n\n\t* doc/FileSystem.3:\n\t* generic/tclIOUtil.c: Updated some old uses of \"fileName\" to\n\tnew VFS terminology, \"pathPtr\".\n\n2002-01-03  Donal K. Fellows  <fellowsd@cs.man.ac.uk>\n\n\t* tests/basic.test (basic-39.4): Greatly simplified test while\n\tstill leaving it so that it crashes when run without the fix to\n\tthe [foreach] implementation.\n\t* generic/tclCmdAH.c (Tcl_ForeachObjCmd): Stopped [Bug 494348] from\n\thappening by not trying to be so clever with cacheing; if nothing\n\tuntoward is happening anyway, the less efficient technique will\n\tonly add a few instruction cycles (one function call and a few\n\tderefs/assigns per list per iteration, with no change in the\n\tnumber of tests) and if something odd *is* going on, the code is\n\tnow far more robust.\n\n\t* tests/basic.test (basic-39.4): Reproducable script from [Bug 494348]\n\n2002-01-02  Donal K. Fellows  <fellowsd@cs.man.ac.uk>\n\n\t* tests/util.test (Wrapper_Tcl_StringMatch,util-5.*): Rewrote so the\n\ttest is performed with the right internal function since [string\n\tmatch] no longer uses Tcl_StringCaseMatch internally.\n\n\t* tests/string.test (string-11.51):\n\t* generic/tclUtf.c (Tcl_UniCharCaseMatch):\n\t* generic/tclUtil.c (Tcl_StringCaseMatch): Fault with matching\n\tcase-insensitive non-ASCII patterns containing upper case characters.\n\t[Bug 233257]\n\n\t******************************************************************\n\t*** CHANGELOG ENTRIES FOR 2001 IN \"ChangeLog.2001\"             ***\n\t*** CHANGELOG ENTRIES FOR 2000 IN \"ChangeLog.2000\"             ***\n\t*** CHANGELOG ENTRIES FOR 1999 AND EARLIER IN \"ChangeLog.1999\" ***\n\t******************************************************************\n",
        "/tmp/vanessa/spack-stage/spack-stage-tcl-8.5.19-76icjut2bqpwmf2fnlt35uiqok46hbar/spack-src/compat/dlfcn.h": "/*\n * dlfcn.h --\n *\n *\tThis file provides a replacement for the header file \"dlfcn.h\"\n *\ton systems where dlfcn.h is missing.  It's primary use is for\n *\tAIX, where Tcl emulates the dl library.\n *\n *\tThis file is subject to the following copyright notice, which is\n *\tdifferent from the notice used elsewhere in Tcl but rougly\n *\tequivalent in meaning.\n *\n *\tCopyright (c) 1992,1993,1995,1996, Jens-Uwe Mager, Helios Software GmbH\n *\tNot derived from licensed software.\n *\n *\tPermission is granted to freely use, copy, modify, and redistribute\n *\tthis software, provided that the author is not construed to be liable\n *\tfor any results of using the software, alterations are clearly marked\n *\tas such, and this notice is not modified.\n */\n\n/*\n * This is an unpublished work copyright (c) 1992 HELIOS Software GmbH\n * 30159 Hannover, Germany\n */\n\n#ifndef __dlfcn_h__\n#define __dlfcn_h__\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n/*\n * Mode flags for the dlopen routine.\n */\n#define RTLD_LAZY\t1\t/* lazy function call binding */\n#define RTLD_NOW\t2\t/* immediate function call binding */\n#define RTLD_GLOBAL\t0x100\t/* allow symbols to be global */\n\n/*\n * To be able to intialize, a library may provide a dl_info structure\n * that contains functions to be called to initialize and terminate.\n */\nstruct dl_info {\n\tvoid (*init) (void);\n\tvoid (*fini) (void);\n};\n\nvoid *dlopen (const char *path, int mode);\nvoid *dlsym (void *handle, const char *symbol);\nchar *dlerror (void);\nint dlclose (void *handle);\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif /* __dlfcn_h__ */\n",
        "/tmp/vanessa/spack-stage/spack-stage-tcl-8.5.19-76icjut2bqpwmf2fnlt35uiqok46hbar/spack-src/unix/tclLoadOSF.c": "/*\n * tclLoadOSF.c --\n *\n *\tThis function provides a version of the TclLoadFile that works under\n *\tOSF/1 1.0/1.1/1.2 and related systems, utilizing the old OSF/1\n *\t/sbin/loader and /usr/include/loader.h. OSF/1 versions from 1.3 and on\n *\tuse ELF, rtld, and dlopen()[/usr/include/ldfcn.h].\n *\n *\tThis is useful for:\n *\t\tOSF/1 1.0, 1.1, 1.2 (from OSF)\n *\t\t\tincludes: MK4 and AD1 (from OSF RI)\n *\t\tOSF/1 1.3 (from OSF) using ROSE\n *\t\tHP OSF/1 1.0 (\"Acorn\") using COFF\n *\n *\tThis is likely to be useful for:\n *\t\tParagon OSF/1 (from Intel)\n *\t\tHI-OSF/1 (from Hitachi)\n *\n *\tThis is NOT to be used on:\n *\t\tDigitial Alpha OSF/1 systems\n *\t\tOSF/1 1.3 or later (from OSF) using ELF\n *\t\t\tincludes: MK6, MK7, AD2, AD3 (from OSF RI)\n *\n *\tThis approach to things was utter @&^#; thankfully, OSF/1 eventually\n *\tsupported dlopen().\n *\n *\tJohn Robert LoVerso <loverso@freebsd.osf.org>\n *\n * Copyright (c) 1995-1997 Sun Microsystems, Inc.\n *\n * See the file \"license.terms\" for information on usage and redistribution of\n * this file, and for a DISCLAIMER OF ALL WARRANTIES.\n */\n\n#include \"tclInt.h\"\n#include <sys/types.h>\n#include <loader.h>\n\f\n/*\n *----------------------------------------------------------------------\n *\n * TclpDlopen --\n *\n *\tDynamically loads a binary code file into memory and returns a handle\n *\tto the new code.\n *\n * Results:\n *\tA standard Tcl completion code.  If an error occurs, an error message\n *\tis left in the interp's result.\n *\n * Side effects:\n *\tNew code suddenly appears in memory.\n *\n *----------------------------------------------------------------------\n */\n\nint\nTclpDlopen(\n    Tcl_Interp *interp,\t\t/* Used for error reporting. */\n    Tcl_Obj *pathPtr,\t\t/* Name of the file containing the desired\n\t\t\t\t * code (UTF-8). */\n    Tcl_LoadHandle *loadHandle,\t/* Filled with token for dynamically loaded\n\t\t\t\t * file which will be passed back to\n\t\t\t\t * (*unloadProcPtr)() to unload the file. */\n    Tcl_FSUnloadFileProc **unloadProcPtr)\n\t\t\t\t/* Filled with address of Tcl_FSUnloadFileProc\n\t\t\t\t * function which should be used for this\n\t\t\t\t * file. */\n{\n    ldr_module_t lm;\n    char *pkg;\n    char *fileName = Tcl_GetString(pathPtr);\n    CONST char *native;\n\n    /*\n     * First try the full path the user gave us.  This is particularly\n     * important if the cwd is inside a vfs, and we are trying to load using a\n     * relative path.\n     */\n\n    native = Tcl_FSGetNativePath(pathPtr);\n    lm = (Tcl_PackageInitProc *) load(native, LDR_NOFLAGS);\n\n    if (lm == LDR_NULL_MODULE) {\n\t/*\n\t * Let the OS loader examine the binary search path for whatever\n\t * string the user gave us which hopefully refers to a file on the\n\t * binary path\n\t */\n\n\tTcl_DString ds;\n\n\tnative = Tcl_UtfToExternalDString(NULL, fileName, -1, &ds);\n\tlm = (Tcl_PackageInitProc *) load(native, LDR_NOFLAGS);\n\tTcl_DStringFree(&ds);\n    }\n\n    if (lm == LDR_NULL_MODULE) {\n\tTcl_AppendResult(interp, \"couldn't load file \\\"\", fileName, \"\\\": \",\n\t\tTcl_PosixError(interp), NULL);\n\treturn TCL_ERROR;\n    }\n\n    *clientDataPtr = NULL;\n\n    /*\n     * My convention is to use a [OSF loader] package name the same as shlib,\n     * since the idiots never implemented ldr_lookup() and it is otherwise\n     * impossible to get a package name given a module.\n     *\n     * I build loadable modules with a makefile rule like\n     *\t\tld ... -export $@: -o $@ $(OBJS)\n     */\n\n    if ((pkg = strrchr(fileName, '/')) == NULL) {\n        pkg = fileName;\n    } else {\n\tpkg++;\n    }\n    *loadHandle = pkg;\n    *unloadProcPtr = &TclpUnloadFile;\n    return TCL_OK;\n}\n\f\n/*\n *----------------------------------------------------------------------\n *\n * TclpFindSymbol --\n *\n *\tLooks up a symbol, by name, through a handle associated with a\n *\tpreviously loaded piece of code (shared library).\n *\n * Results:\n *\tReturns a pointer to the function associated with 'symbol' if it is\n *\tfound.  Otherwise returns NULL and may leave an error message in the\n *\tinterp's result.\n *\n *----------------------------------------------------------------------\n */\n\nTcl_PackageInitProc *\nTclpFindSymbol(\n    Tcl_Interp *interp,\n    Tcl_LoadHandle loadHandle,\n    CONST char *symbol)\n{\n    return ldr_lookup_package((char *)loadHandle, symbol);\n}\n\f\n/*\n *----------------------------------------------------------------------\n *\n * TclpUnloadFile --\n *\n *\tUnloads a dynamically loaded binary code file from memory. Code\n *\tpointers in the formerly loaded file are no longer valid after calling\n *\tthis function.\n *\n * Results:\n *\tNone.\n *\n * Side effects:\n *\tDoes nothing.  Can anything be done?\n *\n *----------------------------------------------------------------------\n */\n\nvoid\nTclpUnloadFile(\n    Tcl_LoadHandle loadHandle)\t/* loadHandle returned by a previous call to\n\t\t\t\t * TclpDlopen(). The loadHandle is a token\n\t\t\t\t * that represents the loaded file. */\n{\n}\n\f\n/*\n *----------------------------------------------------------------------\n *\n * TclGuessPackageName --\n *\n *\tIf the \"load\" command is invoked without providing a package name,\n *\tthis function is invoked to try to figure it out.\n *\n * Results:\n *\tAlways returns 0 to indicate that we couldn't figure out a package\n *\tname; generic code will then try to guess the package from the file\n *\tname.  A return value of 1 would have meant that we figured out the\n *\tpackage name and put it in bufPtr.\n *\n * Side effects:\n *\tNone.\n *\n *----------------------------------------------------------------------\n */\n\nint\nTclGuessPackageName(\n    CONST char *fileName,\t/* Name of file containing package (already\n\t\t\t\t * translated to local form if needed). */\n    Tcl_DString *bufPtr)\t/* Initialized empty dstring. Append package\n\t\t\t\t * name to this if possible. */\n{\n    return 0;\n}\n\f\n/*\n * Local Variables:\n * mode: c\n * c-basic-offset: 4\n * fill-column: 78\n * End:\n */\n",
        "/tmp/vanessa/spack-stage/spack-stage-tcl-8.5.19-76icjut2bqpwmf2fnlt35uiqok46hbar/spack-src/unix/tclLoadDyld.c": "/*\n * tclLoadDyld.c --\n *\n *\tThis procedure provides a version of the TclLoadFile that works with\n *\tApple's dyld dynamic loading.\n *\tOriginal version of his file (superseded long ago) provided by\n *\tWilfredo Sanchez (wsanchez@apple.com).\n *\n * Copyright (c) 1995 Apple Computer, Inc.\n * Copyright (c) 2001-2007 Daniel A. Steffen <das@users.sourceforge.net>\n *\n * See the file \"license.terms\" for information on usage and redistribution of\n * this file, and for a DISCLAIMER OF ALL WARRANTIES.\n */\n\n#include \"tclInt.h\"\n\n#ifndef MODULE_SCOPE\n#define MODULE_SCOPE extern\n#endif\n\n#ifndef TCL_DYLD_USE_DLFCN\n/*\n * Use preferred dlfcn API on 10.4 and later\n */\n#   if !defined(NO_DLFCN_H) && MAC_OS_X_VERSION_MAX_ALLOWED >= 1040\n#\tdefine TCL_DYLD_USE_DLFCN 1\n#   else\n#\tdefine TCL_DYLD_USE_DLFCN 0\n#   endif\n#endif\n#ifndef TCL_DYLD_USE_NSMODULE\n/*\n * Use deprecated NSModule API only to support 10.3 and earlier:\n */\n#   if MAC_OS_X_VERSION_MIN_REQUIRED < 1040\n#\tdefine TCL_DYLD_USE_NSMODULE 1\n#   else\n#\tdefine TCL_DYLD_USE_NSMODULE 0\n#   endif\n#endif\n\n#if TCL_DYLD_USE_DLFCN\n#include <dlfcn.h>\n#if defined(HAVE_WEAK_IMPORT) && MAC_OS_X_VERSION_MIN_REQUIRED < 1040\n/*\n * Support for weakly importing dlfcn API.\n */\nextern void *dlopen(const char *path, int mode) WEAK_IMPORT_ATTRIBUTE;\nextern void *dlsym(void *handle, const char *symbol) WEAK_IMPORT_ATTRIBUTE;\nextern int dlclose(void *handle) WEAK_IMPORT_ATTRIBUTE;\nextern char *dlerror(void) WEAK_IMPORT_ATTRIBUTE;\n#endif\n#endif\n\n#if TCL_DYLD_USE_NSMODULE || defined(TCL_LOAD_FROM_MEMORY)\n#include <mach-o/dyld.h>\n#include <mach-o/fat.h>\n#include <mach-o/swap.h>\n#include <mach-o/arch.h>\n#include <libkern/OSByteOrder.h>\n#include <mach/mach.h>\n#include <stdbool.h>\n\ntypedef struct Tcl_DyldModuleHandle {\n    struct Tcl_DyldModuleHandle *nextPtr;\n    NSModule module;\n} Tcl_DyldModuleHandle;\n#endif /* TCL_DYLD_USE_NSMODULE */\n\ntypedef struct Tcl_DyldLoadHandle {\n#if TCL_DYLD_USE_DLFCN\n    void *dlHandle;\n#endif\n#if TCL_DYLD_USE_NSMODULE || defined(TCL_LOAD_FROM_MEMORY)\n    const struct mach_header *dyldLibHeader;\n    Tcl_DyldModuleHandle *modulePtr;\n#endif\n} Tcl_DyldLoadHandle;\n\n#if (TCL_DYLD_USE_DLFCN && MAC_OS_X_VERSION_MIN_REQUIRED < 1040) || \\\n\tdefined(TCL_LOAD_FROM_MEMORY)\nMODULE_SCOPE long tclMacOSXDarwinRelease;\n#endif\n\n#ifdef TCL_DEBUG_LOAD\n#define TclLoadDbgMsg(m, ...) do { \\\n\t    fprintf(stderr, \"%s:%d: %s(): \" m \".\\n\", \\\n\t    strrchr(__FILE__, '/')+1, __LINE__, __func__, ##__VA_ARGS__); \\\n\t} while (0)\n#else\n#define TclLoadDbgMsg(m, ...)\n#endif\n\f\n#if TCL_DYLD_USE_NSMODULE || defined(TCL_LOAD_FROM_MEMORY)\n/*\n *----------------------------------------------------------------------\n *\n * DyldOFIErrorMsg --\n *\n *\tConverts a numerical NSObjectFileImage error into an error message\n *\tstring.\n *\n * Results:\n *\tError message string.\n *\n * Side effects:\n *\tNone.\n *\n *----------------------------------------------------------------------\n */\n\nstatic CONST char*\nDyldOFIErrorMsg(\n    int err)\n{\n    switch(err) {\n    case NSObjectFileImageSuccess:\n\treturn NULL;\n    case NSObjectFileImageFailure:\n\treturn \"object file setup failure\";\n    case NSObjectFileImageInappropriateFile:\n\treturn \"not a Mach-O MH_BUNDLE file\";\n    case NSObjectFileImageArch:\n\treturn \"no object for this architecture\";\n    case NSObjectFileImageFormat:\n\treturn \"bad object file format\";\n    case NSObjectFileImageAccess:\n\treturn \"can't read object file\";\n    default:\n\treturn \"unknown error\";\n    }\n}\n#endif /* TCL_DYLD_USE_NSMODULE */\n\f\n/*\n *----------------------------------------------------------------------\n *\n * TclpDlopen --\n *\n *\tDynamically loads a binary code file into memory and returns a handle\n *\tto the new code.\n *\n * Results:\n *\tA standard Tcl completion code. If an error occurs, an error message\n *\tis left in the interpreter's result.\n *\n * Side effects:\n *\tNew code suddenly appears in memory.\n *\n *----------------------------------------------------------------------\n */\n\nMODULE_SCOPE int\nTclpDlopen(\n    Tcl_Interp *interp,\t\t/* Used for error reporting. */\n    Tcl_Obj *pathPtr,\t\t/* Name of the file containing the desired\n\t\t\t\t * code (UTF-8). */\n    Tcl_LoadHandle *loadHandle, /* Filled with token for dynamically loaded\n\t\t\t\t * file which will be passed back to\n\t\t\t\t * (*unloadProcPtr)() to unload the file. */\n    Tcl_FSUnloadFileProc **unloadProcPtr)\n\t\t\t\t/* Filled with address of Tcl_FSUnloadFileProc\n\t\t\t\t * function which should be used for this\n\t\t\t\t * file. */\n{\n    Tcl_DyldLoadHandle *dyldLoadHandle;\n#if TCL_DYLD_USE_DLFCN\n    void *dlHandle = NULL;\n#endif\n#if TCL_DYLD_USE_NSMODULE || defined(TCL_LOAD_FROM_MEMORY)\n    const struct mach_header *dyldLibHeader = NULL;\n    Tcl_DyldModuleHandle *modulePtr = NULL;\n#endif\n#if TCL_DYLD_USE_NSMODULE\n    NSLinkEditErrors editError;\n    int errorNumber;\n    const char *errorName, *objFileImageErrMsg = NULL;\n#endif\n    const char *errMsg = NULL;\n    int result;\n    Tcl_DString ds;\n    char *fileName = NULL;\n    const char *nativePath, *nativeFileName = NULL;\n\n    /*\n     * First try the full path the user gave us. This is particularly\n     * important if the cwd is inside a vfs, and we are trying to load using a\n     * relative path.\n     */\n\n    nativePath = Tcl_FSGetNativePath(pathPtr);\n\n#if TCL_DYLD_USE_DLFCN\n#if MAC_OS_X_VERSION_MIN_REQUIRED < 1040\n    if (tclMacOSXDarwinRelease >= 8)\n#endif\n    {\n    /*\n     * Use (RTLD_NOW|RTLD_LOCAL) always, see [Bug #3216070]\n     */\n\tdlHandle = dlopen(nativePath, RTLD_NOW | RTLD_LOCAL);\n\tif (!dlHandle) {\n\t    /*\n\t     * Let the OS loader examine the binary search path for whatever\n\t     * string the user gave us which hopefully refers to a file on the\n\t     * binary path.\n\t     */\n\n\t    fileName = Tcl_GetString(pathPtr);\n\t    nativeFileName = Tcl_UtfToExternalDString(NULL, fileName, -1, &ds);\n\t    /*\n\t     * Use (RTLD_NOW|RTLD_LOCAL) always, see [Bug #3216070]\n\t     */\n\t    dlHandle = dlopen(nativeFileName, RTLD_NOW | RTLD_LOCAL);\n\t}\n\tif (dlHandle) {\n\t    TclLoadDbgMsg(\"dlopen() successful\");\n\t} else {\n\t    errMsg = dlerror();\n\t    TclLoadDbgMsg(\"dlopen() failed: %s\", errMsg);\n\t}\n    }\n    if (!dlHandle)\n#endif /* TCL_DYLD_USE_DLFCN */\n    {\n#if TCL_DYLD_USE_NSMODULE\n\tdyldLibHeader = NSAddImage(nativePath,\n\t\tNSADDIMAGE_OPTION_RETURN_ON_ERROR);\n\tif (dyldLibHeader) {\n\t    TclLoadDbgMsg(\"NSAddImage() successful\");\n\t} else {\n\t    NSLinkEditError(&editError, &errorNumber, &errorName, &errMsg);\n\t    if (editError == NSLinkEditFileAccessError) {\n\t\t/*\n\t\t * The requested file was not found. Let the OS loader examine\n\t\t * the binary search path for whatever string the user gave us\n\t\t * which hopefully refers to a file on the binary path.\n\t\t */\n\n\t\tif (!fileName) {\n\t\t    fileName = Tcl_GetString(pathPtr);\n\t\t    nativeFileName = Tcl_UtfToExternalDString(NULL, fileName,\n\t\t\t    -1, &ds);\n\t\t}\n\t\tdyldLibHeader = NSAddImage(nativeFileName,\n\t\t\tNSADDIMAGE_OPTION_WITH_SEARCHING |\n\t\t\tNSADDIMAGE_OPTION_RETURN_ON_ERROR);\n\t\tif (dyldLibHeader) {\n\t\t    TclLoadDbgMsg(\"NSAddImage() successful\");\n\t\t} else {\n\t\t    NSLinkEditError(&editError, &errorNumber, &errorName,\n\t\t\t    &errMsg);\n\t\t    TclLoadDbgMsg(\"NSAddImage() failed: %s\", errMsg);\n\t\t}\n\t    } else if ((editError == NSLinkEditFileFormatError\n\t\t    && errorNumber == EBADMACHO)\n\t\t    || editError == NSLinkEditOtherError){\n\t\tNSObjectFileImageReturnCode err;\n\t\tNSObjectFileImage dyldObjFileImage;\n\t\tNSModule module;\n\n\t\t/*\n\t\t * The requested file was found but was not of type MH_DYLIB,\n\t\t * attempt to load it as a MH_BUNDLE.\n\t\t */\n\n\t\terr = NSCreateObjectFileImageFromFile(nativePath,\n\t\t\t&dyldObjFileImage);\n\t\tif (err == NSObjectFileImageSuccess && dyldObjFileImage) {\n\t\t    TclLoadDbgMsg(\"NSCreateObjectFileImageFromFile() \"\n\t\t\t    \"successful\");\n\t\t    module = NSLinkModule(dyldObjFileImage, nativePath,\n\t\t\t    NSLINKMODULE_OPTION_BINDNOW\n\t\t\t    | NSLINKMODULE_OPTION_RETURN_ON_ERROR);\n\t\t    NSDestroyObjectFileImage(dyldObjFileImage);\n\t\t    if (module) {\n\t\t\tmodulePtr = (Tcl_DyldModuleHandle *)\n\t\t\t\tckalloc(sizeof(Tcl_DyldModuleHandle));\n\t\t\tmodulePtr->module = module;\n\t\t\tmodulePtr->nextPtr = NULL;\n\t\t\tTclLoadDbgMsg(\"NSLinkModule() successful\");\n\t\t    } else {\n\t\t\tNSLinkEditError(&editError, &errorNumber, &errorName,\n\t\t\t\t&errMsg);\n\t\t\tTclLoadDbgMsg(\"NSLinkModule() failed: %s\", errMsg);\n\t\t    }\n\t\t} else {\n\t\t    objFileImageErrMsg = DyldOFIErrorMsg(err);\n\t\t    TclLoadDbgMsg(\"NSCreateObjectFileImageFromFile() failed: \"\n\t\t\t    \"%s\", objFileImageErrMsg);\n\t\t}\n\t    }\n\t}\n#endif /* TCL_DYLD_USE_NSMODULE */\n    }\n    if (0\n#if TCL_DYLD_USE_DLFCN\n\t    || dlHandle\n#endif\n#if TCL_DYLD_USE_NSMODULE\n\t    || dyldLibHeader || modulePtr\n#endif\n    ) {\n\tdyldLoadHandle = (Tcl_DyldLoadHandle *)\n\t\tckalloc(sizeof(Tcl_DyldLoadHandle));\n#if TCL_DYLD_USE_DLFCN\n\tdyldLoadHandle->dlHandle = dlHandle;\n#endif\n#if TCL_DYLD_USE_NSMODULE || defined(TCL_LOAD_FROM_MEMORY)\n\tdyldLoadHandle->dyldLibHeader = dyldLibHeader;\n\tdyldLoadHandle->modulePtr = modulePtr;\n#endif\n\t*loadHandle = (Tcl_LoadHandle) dyldLoadHandle;\n\t*unloadProcPtr = &TclpUnloadFile;\n\tresult = TCL_OK;\n    } else {\n\tTcl_AppendResult(interp, errMsg, NULL);\n#if TCL_DYLD_USE_NSMODULE\n\tif (objFileImageErrMsg) {\n\t    Tcl_AppendResult(interp, \"\\nNSCreateObjectFileImageFromFile() \"\n\t\t    \"error: \", objFileImageErrMsg, NULL);\n\t}\n#endif\n\tresult = TCL_ERROR;\n    }\n    if(fileName) {\n\tTcl_DStringFree(&ds);\n    }\n    return result;\n}\n\f\n/*\n *----------------------------------------------------------------------\n *\n * TclpFindSymbol --\n *\n *\tLooks up a symbol, by name, through a handle associated with a\n *\tpreviously loaded piece of code (shared library).\n *\n * Results:\n *\tReturns a pointer to the function associated with 'symbol' if it is\n *\tfound. Otherwise returns NULL and may leave an error message in the\n *\tinterp's result.\n *\n *----------------------------------------------------------------------\n */\n\nMODULE_SCOPE Tcl_PackageInitProc *\nTclpFindSymbol(\n    Tcl_Interp *interp,\t\t/* For error reporting. */\n    Tcl_LoadHandle loadHandle,\t/* Handle from TclpDlopen. */\n    CONST char *symbol)\t\t/* Symbol name to look up. */\n{\n    Tcl_DyldLoadHandle *dyldLoadHandle = (Tcl_DyldLoadHandle *) loadHandle;\n    Tcl_PackageInitProc *proc = NULL;\n    const char *errMsg = NULL;\n    Tcl_DString ds;\n    const char *native;\n\n    native = Tcl_UtfToExternalDString(NULL, symbol, -1, &ds);\n#if TCL_DYLD_USE_DLFCN\n    if (dyldLoadHandle->dlHandle) {\n\tproc = dlsym(dyldLoadHandle->dlHandle, native);\n\tif (proc) {\n\t    TclLoadDbgMsg(\"dlsym() successful\");\n\t} else {\n\t    errMsg = dlerror();\n\t    TclLoadDbgMsg(\"dlsym() failed: %s\", errMsg);\n\t}\n    } else\n#endif /* TCL_DYLD_USE_DLFCN */\n    {\n#if TCL_DYLD_USE_NSMODULE || defined(TCL_LOAD_FROM_MEMORY)\n\tNSSymbol nsSymbol = NULL;\n\tTcl_DString newName;\n\n\t/*\n\t * dyld adds an underscore to the beginning of symbol names.\n\t */\n\n\tTcl_DStringInit(&newName);\n\tTcl_DStringAppend(&newName, \"_\", 1);\n\tnative = Tcl_DStringAppend(&newName, native, -1);\n\tif (dyldLoadHandle->dyldLibHeader) {\n\t    nsSymbol = NSLookupSymbolInImage(dyldLoadHandle->dyldLibHeader,\n\t\t    native, NSLOOKUPSYMBOLINIMAGE_OPTION_BIND_NOW |\n\t\t    NSLOOKUPSYMBOLINIMAGE_OPTION_RETURN_ON_ERROR);\n\t    if (nsSymbol) {\n\t\tTclLoadDbgMsg(\"NSLookupSymbolInImage() successful\");\n#ifdef DYLD_SUPPORTS_DYLIB_UNLOADING\n\t\t/*\n\t\t * Until dyld supports unloading of MY_DYLIB binaries, the\n\t\t * following is not needed.\n\t\t */\n\n\t\tNSModule module = NSModuleForSymbol(nsSymbol);\n\t\tTcl_DyldModuleHandle *modulePtr = dyldLoadHandle->modulePtr;\n\n\t\twhile (modulePtr != NULL) {\n\t\t    if (module == modulePtr->module) {\n\t\t\tbreak;\n\t\t    }\n\t\t    modulePtr = modulePtr->nextPtr;\n\t\t}\n\t\tif (modulePtr == NULL) {\n\t\t    modulePtr = (Tcl_DyldModuleHandle *)\n\t\t\t    ckalloc(sizeof(Tcl_DyldModuleHandle));\n\t\t    modulePtr->module = module;\n\t\t    modulePtr->nextPtr = dyldLoadHandle->modulePtr;\n\t\t    dyldLoadHandle->modulePtr = modulePtr;\n\t\t}\n#endif /* DYLD_SUPPORTS_DYLIB_UNLOADING */\n\t    } else {\n\t\tNSLinkEditErrors editError;\n\t\tint errorNumber;\n\t\tconst char *errorName;\n\n\t\tNSLinkEditError(&editError, &errorNumber, &errorName, &errMsg);\n\t\tTclLoadDbgMsg(\"NSLookupSymbolInImage() failed: %s\", errMsg);\n\t    }\n\t} else if (dyldLoadHandle->modulePtr) {\n\t    nsSymbol = NSLookupSymbolInModule(\n\t\t    dyldLoadHandle->modulePtr->module, native);\n\t    if (nsSymbol) {\n\t\tTclLoadDbgMsg(\"NSLookupSymbolInModule() successful\");\n\t    } else {\n\t\tTclLoadDbgMsg(\"NSLookupSymbolInModule() failed\");\n\t    }\n\t}\n\tif (nsSymbol) {\n\t    proc = NSAddressOfSymbol(nsSymbol);\n\t    if (proc) {\n\t\tTclLoadDbgMsg(\"NSAddressOfSymbol() successful\");\n\t    } else {\n\t\tTclLoadDbgMsg(\"NSAddressOfSymbol() failed\");\n\t    }\n\t}\n\tTcl_DStringFree(&newName);\n#endif /* TCL_DYLD_USE_NSMODULE */\n    }\n    Tcl_DStringFree(&ds);\n    if (errMsg) {\n\tTcl_AppendResult(interp, errMsg, NULL);\n    }\n    return proc;\n}\n\f\n/*\n *----------------------------------------------------------------------\n *\n * TclpUnloadFile --\n *\n *\tUnloads a dynamically loaded binary code file from memory. Code\n *\tpointers in the formerly loaded file are no longer valid after calling\n *\tthis function.\n *\n * Results:\n *\tNone.\n *\n * Side effects:\n *\tCode dissapears from memory. Note that dyld currently only supports\n *\tunloading of binaries of type MH_BUNDLE loaded with NSLinkModule() in\n *\tTclpDlopen() above.\n *\n *----------------------------------------------------------------------\n */\n\nMODULE_SCOPE void\nTclpUnloadFile(\n    Tcl_LoadHandle loadHandle)\t/* loadHandle returned by a previous call to\n\t\t\t\t * TclpDlopen(). The loadHandle is a token\n\t\t\t\t * that represents the loaded file. */\n{\n    Tcl_DyldLoadHandle *dyldLoadHandle = (Tcl_DyldLoadHandle *) loadHandle;\n\n#if TCL_DYLD_USE_DLFCN\n    if (dyldLoadHandle->dlHandle) {\n\tint result;\n\n\tresult = dlclose(dyldLoadHandle->dlHandle);\n\tif (!result) {\n\t    TclLoadDbgMsg(\"dlclose() successful\");\n\t} else {\n\t    TclLoadDbgMsg(\"dlclose() failed: %s\", dlerror());\n\t}\n    } else\n#endif /* TCL_DYLD_USE_DLFCN */\n    {\n#if TCL_DYLD_USE_NSMODULE || defined(TCL_LOAD_FROM_MEMORY)\n\tTcl_DyldModuleHandle *modulePtr = dyldLoadHandle->modulePtr;\n\n\twhile (modulePtr != NULL) {\n\t    void *ptr;\n\t    bool result;\n\n\t    result = NSUnLinkModule(modulePtr->module,\n\t\t    NSUNLINKMODULE_OPTION_RESET_LAZY_REFERENCES);\n\t    if (result) {\n\t\tTclLoadDbgMsg(\"NSUnLinkModule() successful\");\n\t    } else {\n\t\tTclLoadDbgMsg(\"NSUnLinkModule() failed\");\n\t    }\n\t    ptr = modulePtr;\n\t    modulePtr = modulePtr->nextPtr;\n\t    ckfree(ptr);\n\t}\n#endif /* TCL_DYLD_USE_NSMODULE */\n    }\n    ckfree((char*) dyldLoadHandle);\n}\n\f\n/*\n *----------------------------------------------------------------------\n *\n * TclGuessPackageName --\n *\n *\tIf the \"load\" command is invoked without providing a package name,\n *\tthis procedure is invoked to try to figure it out.\n *\n * Results:\n *\tAlways returns 0 to indicate that we couldn't figure out a package\n *\tname; generic code will then try to guess the package from the file\n *\tname. A return value of 1 would have meant that we figured out the\n *\tpackage name and put it in bufPtr.\n *\n * Side effects:\n *\tNone.\n *\n *----------------------------------------------------------------------\n */\n\nint\nTclGuessPackageName(\n    CONST char *fileName,\t/* Name of file containing package (already\n\t\t\t\t * translated to local form if needed). */\n    Tcl_DString *bufPtr)\t/* Initialized empty dstring. Append package\n\t\t\t\t * name to this if possible. */\n{\n    return 0;\n}\n\f\n#ifdef TCL_LOAD_FROM_MEMORY\n/*\n *----------------------------------------------------------------------\n *\n * TclpLoadMemoryGetBuffer --\n *\n *\tAllocate a buffer that can be used with TclpLoadMemory() below.\n *\n * Results:\n *\tPointer to allocated buffer or NULL if an error occurs.\n *\n * Side effects:\n *\tBuffer is allocated.\n *\n *----------------------------------------------------------------------\n */\n\nMODULE_SCOPE void *\nTclpLoadMemoryGetBuffer(\n    Tcl_Interp *interp,\t\t/* Used for error reporting. */\n    int size)\t\t\t/* Size of desired buffer. */\n{\n    void *buffer = NULL;\n\n    /*\n     * NSCreateObjectFileImageFromMemory is available but always fails\n     * prior to Darwin 7.\n     */\n    if (tclMacOSXDarwinRelease >= 7) {\n\t/*\n\t * We must allocate the buffer using vm_allocate, because\n\t * NSCreateObjectFileImageFromMemory will dispose of it using\n\t * vm_deallocate.\n\t */\n\n\tif (vm_allocate(mach_task_self(), (vm_address_t *) &buffer, size, 1)) {\n\t    buffer = NULL;\n\t}\n    }\n    return buffer;\n}\n\f\n/*\n *----------------------------------------------------------------------\n *\n * TclpLoadMemory --\n *\n *\tDynamically loads binary code file from memory and returns a handle to\n *\tthe new code.\n *\n * Results:\n *\tA standard Tcl completion code. If an error occurs, an error message\n *\tis left in the interpreter's result.\n *\n * Side effects:\n *\tNew code is loaded from memory.\n *\n *----------------------------------------------------------------------\n */\n\nMODULE_SCOPE int\nTclpLoadMemory(\n    Tcl_Interp *interp,\t\t/* Used for error reporting. */\n    void *buffer,\t\t/* Buffer containing the desired code\n\t\t\t\t * (allocated with TclpLoadMemoryGetBuffer). */\n    int size,\t\t\t/* Allocation size of buffer. */\n    int codeSize,\t\t/* Size of code data read into buffer or -1 if\n\t\t\t\t * an error occurred and the buffer should\n\t\t\t\t * just be freed. */\n    Tcl_LoadHandle *loadHandle, /* Filled with token for dynamically loaded\n\t\t\t\t * file which will be passed back to\n\t\t\t\t * (*unloadProcPtr)() to unload the file. */\n    Tcl_FSUnloadFileProc **unloadProcPtr)\n\t\t\t\t/* Filled with address of Tcl_FSUnloadFileProc\n\t\t\t\t * function which should be used for this\n\t\t\t\t * file. */\n{\n    Tcl_DyldLoadHandle *dyldLoadHandle;\n    NSObjectFileImage dyldObjFileImage = NULL;\n    Tcl_DyldModuleHandle *modulePtr;\n    NSModule module;\n    const char *objFileImageErrMsg = NULL;\n\n    /*\n     * Try to create an object file image that we can load from.\n     */\n\n    if (codeSize >= 0) {\n\tNSObjectFileImageReturnCode err = NSObjectFileImageSuccess;\n\tconst struct fat_header *fh = buffer;\n\tuint32_t ms = 0;\n#ifndef __LP64__\n\tconst struct mach_header *mh = NULL;\n\t#define mh_size  sizeof(struct mach_header)\n\t#define mh_magic MH_MAGIC\n\t#define arch_abi 0\n#else\n\tconst struct mach_header_64 *mh = NULL;\n\t#define mh_size  sizeof(struct mach_header_64)\n\t#define mh_magic MH_MAGIC_64\n\t#define arch_abi CPU_ARCH_ABI64\n#endif\n\n\tif ((size_t) codeSize >= sizeof(struct fat_header)\n\t\t&& fh->magic == OSSwapHostToBigInt32(FAT_MAGIC)) {\n\t    uint32_t fh_nfat_arch = OSSwapBigToHostInt32(fh->nfat_arch);\n\n\t    /*\n\t     * Fat binary, try to find mach_header for our architecture\n\t     */\n\n\t    TclLoadDbgMsg(\"Fat binary, %d archs\", fh_nfat_arch);\n\t    if ((size_t) codeSize >= sizeof(struct fat_header) +\n\t\t    fh_nfat_arch * sizeof(struct fat_arch)) {\n\t\tvoid *fatarchs = (char*)buffer + sizeof(struct fat_header);\n\t\tconst NXArchInfo *arch = NXGetLocalArchInfo();\n\t\tstruct fat_arch *fa;\n\n\t\tif (fh->magic != FAT_MAGIC) {\n\t\t    swap_fat_arch(fatarchs, fh_nfat_arch, arch->byteorder);\n\t\t}\n\t\tfa = NXFindBestFatArch(arch->cputype | arch_abi,\n\t\t\tarch->cpusubtype, fatarchs, fh_nfat_arch);\n\t\tif (fa) {\n\t\t    TclLoadDbgMsg(\"NXFindBestFatArch() successful: \"\n\t\t\t    \"local cputype %d subtype %d, \"\n\t\t\t    \"fat cputype %d subtype %d\",\n\t\t\t    arch->cputype | arch_abi, arch->cpusubtype,\n\t\t\t    fa->cputype, fa->cpusubtype);\n\t\t    mh = (void*)((char*)buffer + fa->offset);\n\t\t    ms = fa->size;\n\t\t} else {\n\t\t    TclLoadDbgMsg(\"NXFindBestFatArch() failed\");\n\t\t    err = NSObjectFileImageInappropriateFile;\n\t\t}\n\t\tif (fh->magic != FAT_MAGIC) {\n\t\t    swap_fat_arch(fatarchs, fh_nfat_arch, arch->byteorder);\n\t\t}\n\t    } else {\n\t\tTclLoadDbgMsg(\"Fat binary header failure\");\n\t\terr = NSObjectFileImageInappropriateFile;\n\t    }\n\t} else {\n\t    /*\n\t     * Thin binary\n\t     */\n\n\t    TclLoadDbgMsg(\"Thin binary\");\n\t    mh = buffer;\n\t    ms = codeSize;\n\t}\n\tif (ms && !(ms >= mh_size && mh->magic == mh_magic &&\n\t\t mh->filetype == MH_BUNDLE)) {\n\t    TclLoadDbgMsg(\"Inappropriate file: magic %x filetype %d\",\n\t\t    mh->magic, mh->filetype);\n\t    err = NSObjectFileImageInappropriateFile;\n\t}\n\tif (err == NSObjectFileImageSuccess) {\n\t    err = NSCreateObjectFileImageFromMemory(buffer, codeSize,\n\t\t    &dyldObjFileImage);\n\t    if (err == NSObjectFileImageSuccess) {\n\t\tTclLoadDbgMsg(\"NSCreateObjectFileImageFromMemory() \"\n\t\t\t\"successful\");\n\t    } else {\n\t\tobjFileImageErrMsg = DyldOFIErrorMsg(err);\n\t\tTclLoadDbgMsg(\"NSCreateObjectFileImageFromMemory() failed: %s\",\n\t\t\tobjFileImageErrMsg);\n\t    }\n\t} else {\n\t    objFileImageErrMsg = DyldOFIErrorMsg(err);\n\t}\n    }\n\n    /*\n     * If it went wrong (or we were asked to just deallocate), get rid of the\n     * memory block and create an error message.\n     */\n\n    if (dyldObjFileImage == NULL) {\n\tvm_deallocate(mach_task_self(), (vm_address_t) buffer, size);\n\tif (objFileImageErrMsg != NULL) {\n\t    Tcl_AppendResult(interp, \"NSCreateObjectFileImageFromMemory() \"\n\t\t    \"error: \", objFileImageErrMsg, NULL);\n\t}\n\treturn TCL_ERROR;\n    }\n\n    /*\n     * Extract the module we want from the image of the object file.\n     */\n\n    module = NSLinkModule(dyldObjFileImage, \"[Memory Based Bundle]\",\n\t    NSLINKMODULE_OPTION_BINDNOW | NSLINKMODULE_OPTION_RETURN_ON_ERROR);\n    NSDestroyObjectFileImage(dyldObjFileImage);\n    if (module) {\n\tTclLoadDbgMsg(\"NSLinkModule() successful\");\n    } else {\n\tNSLinkEditErrors editError;\n\tint errorNumber;\n\tconst char *errorName, *errMsg;\n\n\tNSLinkEditError(&editError, &errorNumber, &errorName, &errMsg);\n\tTclLoadDbgMsg(\"NSLinkModule() failed: %s\", errMsg);\n\tTcl_AppendResult(interp, errMsg, NULL);\n\treturn TCL_ERROR;\n    }\n\n    /*\n     * Stash the module reference within the load handle we create and return.\n     */\n\n    modulePtr = (Tcl_DyldModuleHandle *) ckalloc(sizeof(Tcl_DyldModuleHandle));\n    modulePtr->module = module;\n    modulePtr->nextPtr = NULL;\n    dyldLoadHandle = (Tcl_DyldLoadHandle *)\n\t    ckalloc(sizeof(Tcl_DyldLoadHandle));\n#if TCL_DYLD_USE_DLFCN\n    dyldLoadHandle->dlHandle = NULL;\n#endif\n    dyldLoadHandle->dyldLibHeader = NULL;\n    dyldLoadHandle->modulePtr = modulePtr;\n    *loadHandle = (Tcl_LoadHandle) dyldLoadHandle;\n    *unloadProcPtr = &TclpUnloadFile;\n    return TCL_OK;\n}\n#endif /* TCL_LOAD_FROM_MEMORY */\n\f\n/*\n * Local Variables:\n * mode: c\n * c-basic-offset: 4\n * fill-column: 79\n * End:\n */\n",
        "/tmp/vanessa/spack-stage/spack-stage-tcl-8.5.19-76icjut2bqpwmf2fnlt35uiqok46hbar/spack-src/unix/tcl.m4": "#------------------------------------------------------------------------\n# SC_PATH_TCLCONFIG --\n#\n#\tLocate the tclConfig.sh file and perform a sanity check on\n#\tthe Tcl compile flags\n#\n# Arguments:\n#\tnone\n#\n# Results:\n#\n#\tAdds the following arguments to configure:\n#\t\t--with-tcl=...\n#\n#\tDefines the following vars:\n#\t\tTCL_BIN_DIR\tFull path to the directory containing\n#\t\t\t\tthe tclConfig.sh file\n#------------------------------------------------------------------------\n\nAC_DEFUN([SC_PATH_TCLCONFIG], [\n    #\n    # Ok, lets find the tcl configuration\n    # First, look for one uninstalled.\n    # the alternative search directory is invoked by --with-tcl\n    #\n\n    if test x\"${no_tcl}\" = x ; then\n\t# we reset no_tcl in case something fails here\n\tno_tcl=true\n\tAC_ARG_WITH(tcl,\n\t    AC_HELP_STRING([--with-tcl],\n\t\t[directory containing tcl configuration (tclConfig.sh)]),\n\t    with_tclconfig=\"${withval}\")\n\tAC_MSG_CHECKING([for Tcl configuration])\n\tAC_CACHE_VAL(ac_cv_c_tclconfig,[\n\n\t    # First check to see if --with-tcl was specified.\n\t    if test x\"${with_tclconfig}\" != x ; then\n\t\tcase \"${with_tclconfig}\" in\n\t\t    */tclConfig.sh )\n\t\t\tif test -f \"${with_tclconfig}\"; then\n\t\t\t    AC_MSG_WARN([--with-tcl argument should refer to directory containing tclConfig.sh, not to tclConfig.sh itself])\n\t\t\t    with_tclconfig=\"`echo \"${with_tclconfig}\" | sed 's!/tclConfig\\.sh$!!'`\"\n\t\t\tfi ;;\n\t\tesac\n\t\tif test -f \"${with_tclconfig}/tclConfig.sh\" ; then\n\t\t    ac_cv_c_tclconfig=\"`(cd \"${with_tclconfig}\"; pwd)`\"\n\t\telse\n\t\t    AC_MSG_ERROR([${with_tclconfig} directory doesn't contain tclConfig.sh])\n\t\tfi\n\t    fi\n\n\t    # then check for a private Tcl installation\n\t    if test x\"${ac_cv_c_tclconfig}\" = x ; then\n\t\tfor i in \\\n\t\t\t../tcl \\\n\t\t\t`ls -dr ../tcl[[8-9]].[[0-9]].[[0-9]]* 2>/dev/null` \\\n\t\t\t`ls -dr ../tcl[[8-9]].[[0-9]] 2>/dev/null` \\\n\t\t\t`ls -dr ../tcl[[8-9]].[[0-9]]* 2>/dev/null` \\\n\t\t\t../../tcl \\\n\t\t\t`ls -dr ../../tcl[[8-9]].[[0-9]].[[0-9]]* 2>/dev/null` \\\n\t\t\t`ls -dr ../../tcl[[8-9]].[[0-9]] 2>/dev/null` \\\n\t\t\t`ls -dr ../../tcl[[8-9]].[[0-9]]* 2>/dev/null` \\\n\t\t\t../../../tcl \\\n\t\t\t`ls -dr ../../../tcl[[8-9]].[[0-9]].[[0-9]]* 2>/dev/null` \\\n\t\t\t`ls -dr ../../../tcl[[8-9]].[[0-9]] 2>/dev/null` \\\n\t\t\t`ls -dr ../../../tcl[[8-9]].[[0-9]]* 2>/dev/null` ; do\n\t\t    if test -f \"$i/unix/tclConfig.sh\" ; then\n\t\t\tac_cv_c_tclconfig=\"`(cd $i/unix; pwd)`\"\n\t\t\tbreak\n\t\t    fi\n\t\tdone\n\t    fi\n\n\t    # on Darwin, check in Framework installation locations\n\t    if test \"`uname -s`\" = \"Darwin\" -a x\"${ac_cv_c_tclconfig}\" = x ; then\n\t\tfor i in `ls -d ~/Library/Frameworks 2>/dev/null` \\\n\t\t\t`ls -d /Library/Frameworks 2>/dev/null` \\\n\t\t\t`ls -d /Network/Library/Frameworks 2>/dev/null` \\\n\t\t\t`ls -d /System/Library/Frameworks 2>/dev/null` \\\n\t\t\t; do\n\t\t    if test -f \"$i/Tcl.framework/tclConfig.sh\" ; then\n\t\t\tac_cv_c_tclconfig=\"`(cd $i/Tcl.framework; pwd)`\"\n\t\t\tbreak\n\t\t    fi\n\t\tdone\n\t    fi\n\n\t    # check in a few common install locations\n\t    if test x\"${ac_cv_c_tclconfig}\" = x ; then\n\t\tfor i in `ls -d ${libdir} 2>/dev/null` \\\n\t\t\t`ls -d ${exec_prefix}/lib 2>/dev/null` \\\n\t\t\t`ls -d ${prefix}/lib 2>/dev/null` \\\n\t\t\t`ls -d /usr/local/lib 2>/dev/null` \\\n\t\t\t`ls -d /usr/contrib/lib 2>/dev/null` \\\n\t\t\t`ls -d /usr/lib 2>/dev/null` \\\n\t\t\t`ls -d /usr/lib64 2>/dev/null` \\\n\t\t\t; do\n\t\t    if test -f \"$i/tclConfig.sh\" ; then\n\t\t\tac_cv_c_tclconfig=\"`(cd $i; pwd)`\"\n\t\t\tbreak\n\t\t    fi\n\t\tdone\n\t    fi\n\n\t    # check in a few other private locations\n\t    if test x\"${ac_cv_c_tclconfig}\" = x ; then\n\t\tfor i in \\\n\t\t\t${srcdir}/../tcl \\\n\t\t\t`ls -dr ${srcdir}/../tcl[[8-9]].[[0-9]].[[0-9]]* 2>/dev/null` \\\n\t\t\t`ls -dr ${srcdir}/../tcl[[8-9]].[[0-9]] 2>/dev/null` \\\n\t\t\t`ls -dr ${srcdir}/../tcl[[8-9]].[[0-9]]* 2>/dev/null` ; do\n\t\t    if test -f \"$i/unix/tclConfig.sh\" ; then\n\t\t    ac_cv_c_tclconfig=\"`(cd $i/unix; pwd)`\"\n\t\t    break\n\t\tfi\n\t\tdone\n\t    fi\n\t])\n\n\tif test x\"${ac_cv_c_tclconfig}\" = x ; then\n\t    TCL_BIN_DIR=\"# no Tcl configs found\"\n\t    AC_MSG_ERROR([Can't find Tcl configuration definitions. Use --with-tcl to specify a directory containing tclConfig.sh])\n\telse\n\t    no_tcl=\n\t    TCL_BIN_DIR=\"${ac_cv_c_tclconfig}\"\n\t    AC_MSG_RESULT([found ${TCL_BIN_DIR}/tclConfig.sh])\n\tfi\n    fi\n])\n\n#------------------------------------------------------------------------\n# SC_PATH_TKCONFIG --\n#\n#\tLocate the tkConfig.sh file\n#\n# Arguments:\n#\tnone\n#\n# Results:\n#\n#\tAdds the following arguments to configure:\n#\t\t--with-tk=...\n#\n#\tDefines the following vars:\n#\t\tTK_BIN_DIR\tFull path to the directory containing\n#\t\t\t\tthe tkConfig.sh file\n#------------------------------------------------------------------------\n\nAC_DEFUN([SC_PATH_TKCONFIG], [\n    #\n    # Ok, lets find the tk configuration\n    # First, look for one uninstalled.\n    # the alternative search directory is invoked by --with-tk\n    #\n\n    if test x\"${no_tk}\" = x ; then\n\t# we reset no_tk in case something fails here\n\tno_tk=true\n\tAC_ARG_WITH(tk,\n\t    AC_HELP_STRING([--with-tk],\n\t\t[directory containing tk configuration (tkConfig.sh)]),\n\t    with_tkconfig=\"${withval}\")\n\tAC_MSG_CHECKING([for Tk configuration])\n\tAC_CACHE_VAL(ac_cv_c_tkconfig,[\n\n\t    # First check to see if --with-tkconfig was specified.\n\t    if test x\"${with_tkconfig}\" != x ; then\n\t\tcase \"${with_tkconfig}\" in\n\t\t    */tkConfig.sh )\n\t\t\tif test -f \"${with_tkconfig}\"; then\n\t\t\t    AC_MSG_WARN([--with-tk argument should refer to directory containing tkConfig.sh, not to tkConfig.sh itself])\n\t\t\t    with_tkconfig=\"`echo \"${with_tkconfig}\" | sed 's!/tkConfig\\.sh$!!'`\"\n\t\t\tfi ;;\n\t\tesac\n\t\tif test -f \"${with_tkconfig}/tkConfig.sh\" ; then\n\t\t    ac_cv_c_tkconfig=\"`(cd \"${with_tkconfig}\"; pwd)`\"\n\t\telse\n\t\t    AC_MSG_ERROR([${with_tkconfig} directory doesn't contain tkConfig.sh])\n\t\tfi\n\t    fi\n\n\t    # then check for a private Tk library\n\t    if test x\"${ac_cv_c_tkconfig}\" = x ; then\n\t\tfor i in \\\n\t\t\t../tk \\\n\t\t\t`ls -dr ../tk[[8-9]].[[0-9]].[[0-9]]* 2>/dev/null` \\\n\t\t\t`ls -dr ../tk[[8-9]].[[0-9]] 2>/dev/null` \\\n\t\t\t`ls -dr ../tk[[8-9]].[[0-9]]* 2>/dev/null` \\\n\t\t\t../../tk \\\n\t\t\t`ls -dr ../../tk[[8-9]].[[0-9]].[[0-9]]* 2>/dev/null` \\\n\t\t\t`ls -dr ../../tk[[8-9]].[[0-9]] 2>/dev/null` \\\n\t\t\t`ls -dr ../../tk[[8-9]].[[0-9]]* 2>/dev/null` \\\n\t\t\t../../../tk \\\n\t\t\t`ls -dr ../../../tk[[8-9]].[[0-9]].[[0-9]]* 2>/dev/null` \\\n\t\t\t`ls -dr ../../../tk[[8-9]].[[0-9]] 2>/dev/null` \\\n\t\t\t`ls -dr ../../../tk[[8-9]].[[0-9]]* 2>/dev/null` ; do\n\t\t    if test -f \"$i/unix/tkConfig.sh\" ; then\n\t\t\tac_cv_c_tkconfig=\"`(cd $i/unix; pwd)`\"\n\t\t\tbreak\n\t\t    fi\n\t\tdone\n\t    fi\n\n\t    # on Darwin, check in Framework installation locations\n\t    if test \"`uname -s`\" = \"Darwin\" -a x\"${ac_cv_c_tkconfig}\" = x ; then\n\t\tfor i in `ls -d ~/Library/Frameworks 2>/dev/null` \\\n\t\t\t`ls -d /Library/Frameworks 2>/dev/null` \\\n\t\t\t`ls -d /Network/Library/Frameworks 2>/dev/null` \\\n\t\t\t`ls -d /System/Library/Frameworks 2>/dev/null` \\\n\t\t\t; do\n\t\t    if test -f \"$i/Tk.framework/tkConfig.sh\" ; then\n\t\t\tac_cv_c_tkconfig=\"`(cd $i/Tk.framework; pwd)`\"\n\t\t\tbreak\n\t\t    fi\n\t\tdone\n\t    fi\n\n\t    # check in a few common install locations\n\t    if test x\"${ac_cv_c_tkconfig}\" = x ; then\n\t\tfor i in `ls -d ${libdir} 2>/dev/null` \\\n\t\t\t`ls -d ${exec_prefix}/lib 2>/dev/null` \\\n\t\t\t`ls -d ${prefix}/lib 2>/dev/null` \\\n\t\t\t`ls -d /usr/local/lib 2>/dev/null` \\\n\t\t\t`ls -d /usr/contrib/lib 2>/dev/null` \\\n\t\t\t`ls -d /usr/lib 2>/dev/null` \\\n\t\t\t`ls -d /usr/lib64 2>/dev/null` \\\n\t\t\t; do\n\t\t    if test -f \"$i/tkConfig.sh\" ; then\n\t\t\tac_cv_c_tkconfig=\"`(cd $i; pwd)`\"\n\t\t\tbreak\n\t\t    fi\n\t\tdone\n\t    fi\n\n\t    # check in a few other private locations\n\t    if test x\"${ac_cv_c_tkconfig}\" = x ; then\n\t\tfor i in \\\n\t\t\t${srcdir}/../tk \\\n\t\t\t`ls -dr ${srcdir}/../tk[[8-9]].[[0-9]].[[0-9]]* 2>/dev/null` \\\n\t\t\t`ls -dr ${srcdir}/../tk[[8-9]].[[0-9]] 2>/dev/null` \\\n\t\t\t`ls -dr ${srcdir}/../tk[[8-9]].[[0-9]]* 2>/dev/null` ; do\n\t\t    if test -f \"$i/unix/tkConfig.sh\" ; then\n\t\t\tac_cv_c_tkconfig=\"`(cd $i/unix; pwd)`\"\n\t\t\tbreak\n\t\t    fi\n\t\tdone\n\t    fi\n\t])\n\n\tif test x\"${ac_cv_c_tkconfig}\" = x ; then\n\t    TK_BIN_DIR=\"# no Tk configs found\"\n\t    AC_MSG_ERROR([Can't find Tk configuration definitions. Use --with-tk to specify a directory containing tkConfig.sh])\n\telse\n\t    no_tk=\n\t    TK_BIN_DIR=\"${ac_cv_c_tkconfig}\"\n\t    AC_MSG_RESULT([found ${TK_BIN_DIR}/tkConfig.sh])\n\tfi\n    fi\n])\n\n#------------------------------------------------------------------------\n# SC_LOAD_TCLCONFIG --\n#\n#\tLoad the tclConfig.sh file\n#\n# Arguments:\n#\n#\tRequires the following vars to be set:\n#\t\tTCL_BIN_DIR\n#\n# Results:\n#\n#\tSubst the following vars:\n#\t\tTCL_BIN_DIR\n#\t\tTCL_SRC_DIR\n#\t\tTCL_LIB_FILE\n#\n#------------------------------------------------------------------------\n\nAC_DEFUN([SC_LOAD_TCLCONFIG], [\n    AC_MSG_CHECKING([for existence of ${TCL_BIN_DIR}/tclConfig.sh])\n\n    if test -f \"${TCL_BIN_DIR}/tclConfig.sh\" ; then\n        AC_MSG_RESULT([loading])\n\t. \"${TCL_BIN_DIR}/tclConfig.sh\"\n    else\n        AC_MSG_RESULT([could not find ${TCL_BIN_DIR}/tclConfig.sh])\n    fi\n\n    # eval is required to do the TCL_DBGX substitution\n    eval \"TCL_LIB_FILE=\\\"${TCL_LIB_FILE}\\\"\"\n    eval \"TCL_STUB_LIB_FILE=\\\"${TCL_STUB_LIB_FILE}\\\"\"\n\n    # If the TCL_BIN_DIR is the build directory (not the install directory),\n    # then set the common variable name to the value of the build variables.\n    # For example, the variable TCL_LIB_SPEC will be set to the value\n    # of TCL_BUILD_LIB_SPEC. An extension should make use of TCL_LIB_SPEC\n    # instead of TCL_BUILD_LIB_SPEC since it will work with both an\n    # installed and uninstalled version of Tcl.\n    if test -f \"${TCL_BIN_DIR}/Makefile\" ; then\n        TCL_LIB_SPEC=\"${TCL_BUILD_LIB_SPEC}\"\n        TCL_STUB_LIB_SPEC=\"${TCL_BUILD_STUB_LIB_SPEC}\"\n        TCL_STUB_LIB_PATH=\"${TCL_BUILD_STUB_LIB_PATH}\"\n    elif test \"`uname -s`\" = \"Darwin\"; then\n\t# If Tcl was built as a framework, attempt to use the libraries\n\t# from the framework at the given location so that linking works\n\t# against Tcl.framework installed in an arbitrary location.\n\tcase ${TCL_DEFS} in\n\t    *TCL_FRAMEWORK*)\n\t\tif test -f \"${TCL_BIN_DIR}/${TCL_LIB_FILE}\"; then\n\t\t    for i in \"`cd \"${TCL_BIN_DIR}\"; pwd`\" \\\n\t\t\t     \"`cd \"${TCL_BIN_DIR}\"/../..; pwd`\"; do\n\t\t\tif test \"`basename \"$i\"`\" = \"${TCL_LIB_FILE}.framework\"; then\n\t\t\t    TCL_LIB_SPEC=\"-F`dirname \"$i\" | sed -e 's/ /\\\\\\\\ /g'` -framework ${TCL_LIB_FILE}\"\n\t\t\t    break\n\t\t\tfi\n\t\t    done\n\t\tfi\n\t\tif test -f \"${TCL_BIN_DIR}/${TCL_STUB_LIB_FILE}\"; then\n\t\t    TCL_STUB_LIB_SPEC=\"-L`echo \"${TCL_BIN_DIR}\"  | sed -e 's/ /\\\\\\\\ /g'` ${TCL_STUB_LIB_FLAG}\"\n\t\t    TCL_STUB_LIB_PATH=\"${TCL_BIN_DIR}/${TCL_STUB_LIB_FILE}\"\n\t\tfi\n\t\t;;\n\tesac\n    fi\n\n    # eval is required to do the TCL_DBGX substitution\n    eval \"TCL_LIB_FLAG=\\\"${TCL_LIB_FLAG}\\\"\"\n    eval \"TCL_LIB_SPEC=\\\"${TCL_LIB_SPEC}\\\"\"\n    eval \"TCL_STUB_LIB_FLAG=\\\"${TCL_STUB_LIB_FLAG}\\\"\"\n    eval \"TCL_STUB_LIB_SPEC=\\\"${TCL_STUB_LIB_SPEC}\\\"\"\n\n    AC_SUBST(TCL_VERSION)\n    AC_SUBST(TCL_PATCH_LEVEL)\n    AC_SUBST(TCL_BIN_DIR)\n    AC_SUBST(TCL_SRC_DIR)\n\n    AC_SUBST(TCL_LIB_FILE)\n    AC_SUBST(TCL_LIB_FLAG)\n    AC_SUBST(TCL_LIB_SPEC)\n\n    AC_SUBST(TCL_STUB_LIB_FILE)\n    AC_SUBST(TCL_STUB_LIB_FLAG)\n    AC_SUBST(TCL_STUB_LIB_SPEC)\n])\n\n#------------------------------------------------------------------------\n# SC_LOAD_TKCONFIG --\n#\n#\tLoad the tkConfig.sh file\n#\n# Arguments:\n#\n#\tRequires the following vars to be set:\n#\t\tTK_BIN_DIR\n#\n# Results:\n#\n#\tSets the following vars that should be in tkConfig.sh:\n#\t\tTK_BIN_DIR\n#------------------------------------------------------------------------\n\nAC_DEFUN([SC_LOAD_TKCONFIG], [\n    AC_MSG_CHECKING([for existence of ${TK_BIN_DIR}/tkConfig.sh])\n\n    if test -f \"${TK_BIN_DIR}/tkConfig.sh\" ; then\n        AC_MSG_RESULT([loading])\n\t. \"${TK_BIN_DIR}/tkConfig.sh\"\n    else\n        AC_MSG_RESULT([could not find ${TK_BIN_DIR}/tkConfig.sh])\n    fi\n\n    # eval is required to do the TK_DBGX substitution\n    eval \"TK_LIB_FILE=\\\"${TK_LIB_FILE}\\\"\"\n    eval \"TK_STUB_LIB_FILE=\\\"${TK_STUB_LIB_FILE}\\\"\"\n\n    # If the TK_BIN_DIR is the build directory (not the install directory),\n    # then set the common variable name to the value of the build variables.\n    # For example, the variable TK_LIB_SPEC will be set to the value\n    # of TK_BUILD_LIB_SPEC. An extension should make use of TK_LIB_SPEC\n    # instead of TK_BUILD_LIB_SPEC since it will work with both an\n    # installed and uninstalled version of Tcl.\n    if test -f \"${TK_BIN_DIR}/Makefile\" ; then\n        TK_LIB_SPEC=\"${TK_BUILD_LIB_SPEC}\"\n        TK_STUB_LIB_SPEC=\"${TK_BUILD_STUB_LIB_SPEC}\"\n        TK_STUB_LIB_PATH=\"${TK_BUILD_STUB_LIB_PATH}\"\n    elif test \"`uname -s`\" = \"Darwin\"; then\n\t# If Tk was built as a framework, attempt to use the libraries\n\t# from the framework at the given location so that linking works\n\t# against Tk.framework installed in an arbitrary location.\n\tcase ${TK_DEFS} in\n\t    *TK_FRAMEWORK*)\n\t\tif test -f \"${TK_BIN_DIR}/${TK_LIB_FILE}\"; then\n\t\t    for i in \"`cd \"${TK_BIN_DIR}\"; pwd`\" \\\n\t\t\t     \"`cd \"${TK_BIN_DIR}\"/../..; pwd`\"; do\n\t\t\tif test \"`basename \"$i\"`\" = \"${TK_LIB_FILE}.framework\"; then\n\t\t\t    TK_LIB_SPEC=\"-F`dirname \"$i\" | sed -e 's/ /\\\\\\\\ /g'` -framework ${TK_LIB_FILE}\"\n\t\t\t    break\n\t\t\tfi\n\t\t    done\n\t\tfi\n\t\tif test -f \"${TK_BIN_DIR}/${TK_STUB_LIB_FILE}\"; then\n\t\t    TK_STUB_LIB_SPEC=\"-L` echo \"${TK_BIN_DIR}\"  | sed -e 's/ /\\\\\\\\ /g'` ${TK_STUB_LIB_FLAG}\"\n\t\t    TK_STUB_LIB_PATH=\"${TK_BIN_DIR}/${TK_STUB_LIB_FILE}\"\n\t\tfi\n\t\t;;\n\tesac\n    fi\n\n    # eval is required to do the TK_DBGX substitution\n    eval \"TK_LIB_FLAG=\\\"${TK_LIB_FLAG}\\\"\"\n    eval \"TK_LIB_SPEC=\\\"${TK_LIB_SPEC}\\\"\"\n    eval \"TK_STUB_LIB_FLAG=\\\"${TK_STUB_LIB_FLAG}\\\"\"\n    eval \"TK_STUB_LIB_SPEC=\\\"${TK_STUB_LIB_SPEC}\\\"\"\n\n    AC_SUBST(TK_VERSION)\n    AC_SUBST(TK_BIN_DIR)\n    AC_SUBST(TK_SRC_DIR)\n\n    AC_SUBST(TK_LIB_FILE)\n    AC_SUBST(TK_LIB_FLAG)\n    AC_SUBST(TK_LIB_SPEC)\n\n    AC_SUBST(TK_STUB_LIB_FILE)\n    AC_SUBST(TK_STUB_LIB_FLAG)\n    AC_SUBST(TK_STUB_LIB_SPEC)\n])\n\n#------------------------------------------------------------------------\n# SC_PROG_TCLSH\n#\tLocate a tclsh shell installed on the system path. This macro\n#\twill only find a Tcl shell that already exists on the system.\n#\tIt will not find a Tcl shell in the Tcl build directory or\n#\ta Tcl shell that has been installed from the Tcl build directory.\n#\tIf a Tcl shell can't be located on the PATH, then TCLSH_PROG will\n#\tbe set to \"\". Extensions should take care not to create Makefile\n#\trules that are run by default and depend on TCLSH_PROG. An\n#\textension can't assume that an executable Tcl shell exists at\n#\tbuild time.\n#\n# Arguments\n#\tnone\n#\n# Results\n#\tSubst's the following values:\n#\t\tTCLSH_PROG\n#------------------------------------------------------------------------\n\nAC_DEFUN([SC_PROG_TCLSH], [\n    AC_MSG_CHECKING([for tclsh])\n    AC_CACHE_VAL(ac_cv_path_tclsh, [\n\tsearch_path=`echo ${PATH} | sed -e 's/:/ /g'`\n\tfor dir in $search_path ; do\n\t    for j in `ls -r $dir/tclsh[[8-9]]* 2> /dev/null` \\\n\t\t    `ls -r $dir/tclsh* 2> /dev/null` ; do\n\t\tif test x\"$ac_cv_path_tclsh\" = x ; then\n\t\t    if test -f \"$j\" ; then\n\t\t\tac_cv_path_tclsh=$j\n\t\t\tbreak\n\t\t    fi\n\t\tfi\n\t    done\n\tdone\n    ])\n\n    if test -f \"$ac_cv_path_tclsh\" ; then\n\tTCLSH_PROG=\"$ac_cv_path_tclsh\"\n\tAC_MSG_RESULT([$TCLSH_PROG])\n    else\n\t# It is not an error if an installed version of Tcl can't be located.\n\tTCLSH_PROG=\"\"\n\tAC_MSG_RESULT([No tclsh found on PATH])\n    fi\n    AC_SUBST(TCLSH_PROG)\n])\n\n#------------------------------------------------------------------------\n# SC_BUILD_TCLSH\n#\tDetermine the fully qualified path name of the tclsh executable\n#\tin the Tcl build directory. This macro will correctly determine\n#\tthe name of the tclsh executable even if tclsh has not yet\n#\tbeen built in the build directory. The build tclsh must be used\n#\twhen running tests from an extension build directory. It is not\n#\tcorrect to use the TCLSH_PROG in cases like this.\n#\n# Arguments\n#\tnone\n#\n# Results\n#\tSubst's the following values:\n#\t\tBUILD_TCLSH\n#------------------------------------------------------------------------\n\nAC_DEFUN([SC_BUILD_TCLSH], [\n    AC_MSG_CHECKING([for tclsh in Tcl build directory])\n    BUILD_TCLSH=\"${TCL_BIN_DIR}\"/tclsh\n    AC_MSG_RESULT([$BUILD_TCLSH])\n    AC_SUBST(BUILD_TCLSH)\n])\n\n#------------------------------------------------------------------------\n# SC_ENABLE_SHARED --\n#\n#\tAllows the building of shared libraries\n#\n# Arguments:\n#\tnone\n#\n# Results:\n#\n#\tAdds the following arguments to configure:\n#\t\t--enable-shared=yes|no\n#\n#\tDefines the following vars:\n#\t\tSTATIC_BUILD\tUsed for building import/export libraries\n#\t\t\t\ton Windows.\n#\n#\tSets the following vars:\n#\t\tSHARED_BUILD\tValue of 1 or 0\n#------------------------------------------------------------------------\n\nAC_DEFUN([SC_ENABLE_SHARED], [\n    AC_MSG_CHECKING([how to build libraries])\n    AC_ARG_ENABLE(shared,\n\tAC_HELP_STRING([--enable-shared],\n\t    [build and link with shared libraries (default: on)]),\n\t[tcl_ok=$enableval], [tcl_ok=yes])\n\n    if test \"${enable_shared+set}\" = set; then\n\tenableval=\"$enable_shared\"\n\ttcl_ok=$enableval\n    else\n\ttcl_ok=yes\n    fi\n\n    if test \"$tcl_ok\" = \"yes\" ; then\n\tAC_MSG_RESULT([shared])\n\tSHARED_BUILD=1\n    else\n\tAC_MSG_RESULT([static])\n\tSHARED_BUILD=0\n\tAC_DEFINE(STATIC_BUILD, 1, [Is this a static build?])\n    fi\n])\n\n#------------------------------------------------------------------------\n# SC_ENABLE_FRAMEWORK --\n#\n#\tAllows the building of shared libraries into frameworks\n#\n# Arguments:\n#\tnone\n#\n# Results:\n#\n#\tAdds the following arguments to configure:\n#\t\t--enable-framework=yes|no\n#\n#\tSets the following vars:\n#\t\tFRAMEWORK_BUILD\tValue of 1 or 0\n#------------------------------------------------------------------------\n\nAC_DEFUN([SC_ENABLE_FRAMEWORK], [\n    if test \"`uname -s`\" = \"Darwin\" ; then\n\tAC_MSG_CHECKING([how to package libraries])\n\tAC_ARG_ENABLE(framework,\n\t    AC_HELP_STRING([--enable-framework],\n\t\t[package shared libraries in MacOSX frameworks (default: off)]),\n\t    [enable_framework=$enableval], [enable_framework=no])\n\tif test $enable_framework = yes; then\n\t    if test $SHARED_BUILD = 0; then\n\t\tAC_MSG_WARN([Frameworks can only be built if --enable-shared is yes])\n\t\tenable_framework=no\n\t    fi\n\t    if test $tcl_corefoundation = no; then\n\t\tAC_MSG_WARN([Frameworks can only be used when CoreFoundation is available])\n\t\tenable_framework=no\n\t    fi\n\tfi\n\tif test $enable_framework = yes; then\n\t    AC_MSG_RESULT([framework])\n\t    FRAMEWORK_BUILD=1\n\telse\n\t    if test $SHARED_BUILD = 1; then\n\t\tAC_MSG_RESULT([shared library])\n\t    else\n\t\tAC_MSG_RESULT([static library])\n\t    fi\n\t    FRAMEWORK_BUILD=0\n\tfi\n    fi\n])\n\n#------------------------------------------------------------------------\n# SC_ENABLE_THREADS --\n#\n#\tSpecify if thread support should be enabled\n#\n# Arguments:\n#\tnone\n#\n# Results:\n#\n#\tAdds the following arguments to configure:\n#\t\t--enable-threads\n#\n#\tSets the following vars:\n#\t\tTHREADS_LIBS\tThread library(s)\n#\n#\tDefines the following vars:\n#\t\tTCL_THREADS\n#\t\t_REENTRANT\n#\t\t_THREAD_SAFE\n#\n#------------------------------------------------------------------------\n\nAC_DEFUN([SC_ENABLE_THREADS], [\n    AC_ARG_ENABLE(threads,\n\tAC_HELP_STRING([--enable-threads],\n\t    [build with threads (default: off)]),\n\t[tcl_ok=$enableval], [tcl_ok=no])\n\n    if test \"${TCL_THREADS}\" = 1; then\n\ttcl_threaded_core=1;\n    fi\n\n    if test \"$tcl_ok\" = \"yes\" -o \"${TCL_THREADS}\" = 1; then\n\tTCL_THREADS=1\n\t# USE_THREAD_ALLOC tells us to try the special thread-based\n\t# allocator that significantly reduces lock contention\n\tAC_DEFINE(USE_THREAD_ALLOC, 1,\n\t    [Do we want to use the threaded memory allocator?])\n\tAC_DEFINE(_REENTRANT, 1, [Do we want the reentrant OS API?])\n\tif test \"`uname -s`\" = \"SunOS\" ; then\n\t    AC_DEFINE(_POSIX_PTHREAD_SEMANTICS, 1,\n\t\t    [Do we really want to follow the standard? Yes we do!])\n\tfi\n\tAC_DEFINE(_THREAD_SAFE, 1, [Do we want the thread-safe OS API?])\n\tAC_CHECK_LIB(pthread,pthread_mutex_init,tcl_ok=yes,tcl_ok=no)\n\tif test \"$tcl_ok\" = \"no\"; then\n\t    # Check a little harder for __pthread_mutex_init in the same\n\t    # library, as some systems hide it there until pthread.h is\n\t    # defined.  We could alternatively do an AC_TRY_COMPILE with\n\t    # pthread.h, but that will work with libpthread really doesn't\n\t    # exist, like AIX 4.2.  [Bug: 4359]\n\t    AC_CHECK_LIB(pthread, __pthread_mutex_init,\n\t\ttcl_ok=yes, tcl_ok=no)\n\tfi\n\n\tif test \"$tcl_ok\" = \"yes\"; then\n\t    # The space is needed\n\t    THREADS_LIBS=\" -lpthread\"\n\telse\n\t    AC_CHECK_LIB(pthreads, pthread_mutex_init,\n\t\ttcl_ok=yes, tcl_ok=no)\n\t    if test \"$tcl_ok\" = \"yes\"; then\n\t\t# The space is needed\n\t\tTHREADS_LIBS=\" -lpthreads\"\n\t    else\n\t\tAC_CHECK_LIB(c, pthread_mutex_init,\n\t\t    tcl_ok=yes, tcl_ok=no)\n\t\tif test \"$tcl_ok\" = \"no\"; then\n\t\t    AC_CHECK_LIB(c_r, pthread_mutex_init,\n\t\t\ttcl_ok=yes, tcl_ok=no)\n\t\t    if test \"$tcl_ok\" = \"yes\"; then\n\t\t\t# The space is needed\n\t\t\tTHREADS_LIBS=\" -pthread\"\n\t\t    else\n\t\t\tTCL_THREADS=0\n\t\t\tAC_MSG_WARN([Don't know how to find pthread lib on your system - you must disable thread support or edit the LIBS in the Makefile...])\n\t\t    fi\n\t\tfi\n\t    fi\n\tfi\n\n\t# Does the pthread-implementation provide\n\t# 'pthread_attr_setstacksize' ?\n\n\tac_saved_libs=$LIBS\n\tLIBS=\"$LIBS $THREADS_LIBS\"\n\tAC_CHECK_FUNCS(pthread_attr_setstacksize pthread_atfork)\n\tAC_CHECK_FUNC(pthread_attr_get_np,tcl_ok=yes,tcl_ok=no)\n\tif test $tcl_ok = yes ; then\n\t    AC_DEFINE(HAVE_PTHREAD_ATTR_GET_NP, 1,\n\t\t[Do we want a BSD-like thread-attribute interface?])\n\t    AC_CACHE_CHECK([for pthread_attr_get_np declaration],\n\t\ttcl_cv_grep_pthread_attr_get_np, [\n\t\tAC_EGREP_HEADER(pthread_attr_get_np, pthread.h,\n\t\t    tcl_cv_grep_pthread_attr_get_np=present,\n\t\t    tcl_cv_grep_pthread_attr_get_np=missing)])\n\t    if test $tcl_cv_grep_pthread_attr_get_np = missing ; then\n\t\tAC_DEFINE(ATTRGETNP_NOT_DECLARED, 1,\n\t\t    [Is pthread_attr_get_np() declared in <pthread.h>?])\n\t    fi\n\telse\n\t    AC_CHECK_FUNC(pthread_getattr_np,tcl_ok=yes,tcl_ok=no)\n\t    if test $tcl_ok = yes ; then\n\t\tAC_DEFINE(HAVE_PTHREAD_GETATTR_NP, 1,\n\t\t    [Do we want a Linux-like thread-attribute interface?])\n\t\tAC_CACHE_CHECK([for pthread_getattr_np declaration],\n\t\t    tcl_cv_grep_pthread_getattr_np, [\n\t\t    AC_EGREP_HEADER(pthread_getattr_np, pthread.h,\n\t\t\ttcl_cv_grep_pthread_getattr_np=present,\n\t\t\ttcl_cv_grep_pthread_getattr_np=missing)])\n\t\tif test $tcl_cv_grep_pthread_getattr_np = missing ; then\n\t\t    AC_DEFINE(GETATTRNP_NOT_DECLARED, 1,\n\t\t\t[Is pthread_getattr_np declared in <pthread.h>?])\n\t\tfi\n\t    fi\n\tfi\n\tif test $tcl_ok = no; then\n\t    # Darwin thread stacksize API\n\t    AC_CHECK_FUNCS(pthread_get_stacksize_np)\n\tfi\n\tLIBS=$ac_saved_libs\n    else\n\tTCL_THREADS=0\n    fi\n    # Do checking message here to not mess up interleaved configure output\n    AC_MSG_CHECKING([for building with threads])\n    if test \"${TCL_THREADS}\" = 1; then\n\tAC_DEFINE(TCL_THREADS, 1, [Are we building with threads enabled?])\n\tif test \"${tcl_threaded_core}\" = 1; then\n\t    AC_MSG_RESULT([yes (threaded core)])\n\telse\n\t    AC_MSG_RESULT([yes])\n\tfi\n    else\n\tAC_MSG_RESULT([no (default)])\n    fi\n\n    AC_SUBST(TCL_THREADS)\n])\n\n#------------------------------------------------------------------------\n# SC_ENABLE_SYMBOLS --\n#\n#\tSpecify if debugging symbols should be used.\n#\tMemory (TCL_MEM_DEBUG) and compile (TCL_COMPILE_DEBUG) debugging\n#\tcan also be enabled.\n#\n# Arguments:\n#\tnone\n#\n#\tRequires the following vars to be set in the Makefile:\n#\t\tCFLAGS_DEBUG\n#\t\tCFLAGS_OPTIMIZE\n#\t\tLDFLAGS_DEBUG\n#\t\tLDFLAGS_OPTIMIZE\n#\n# Results:\n#\n#\tAdds the following arguments to configure:\n#\t\t--enable-symbols\n#\n#\tDefines the following vars:\n#\t\tCFLAGS_DEFAULT\tSets to $(CFLAGS_DEBUG) if true\n#\t\t\t\tSets to $(CFLAGS_OPTIMIZE) if false\n#\t\tLDFLAGS_DEFAULT\tSets to $(LDFLAGS_DEBUG) if true\n#\t\t\t\tSets to $(LDFLAGS_OPTIMIZE) if false\n#\t\tDBGX\t\tFormerly used as debug library extension;\n#\t\t\t\talways blank now.\n#\n#------------------------------------------------------------------------\n\nAC_DEFUN([SC_ENABLE_SYMBOLS], [\n    AC_MSG_CHECKING([for build with symbols])\n    AC_ARG_ENABLE(symbols,\n\tAC_HELP_STRING([--enable-symbols],\n\t    [build with debugging symbols (default: off)]),\n\t[tcl_ok=$enableval], [tcl_ok=no])\n# FIXME: Currently, LDFLAGS_DEFAULT is not used, it should work like CFLAGS_DEFAULT.\n    DBGX=\"\"\n    if test \"$tcl_ok\" = \"no\"; then\n\tCFLAGS_DEFAULT='$(CFLAGS_OPTIMIZE)'\n\tLDFLAGS_DEFAULT='$(LDFLAGS_OPTIMIZE)'\n\tAC_DEFINE(NDEBUG, 1, [Is no debugging enabled?])\n\tAC_MSG_RESULT([no])\n\tAC_DEFINE(TCL_CFG_OPTIMIZED, 1, [Is this an optimized build?])\n    else\n\tCFLAGS_DEFAULT='$(CFLAGS_DEBUG)'\n\tLDFLAGS_DEFAULT='$(LDFLAGS_DEBUG)'\n\tif test \"$tcl_ok\" = \"yes\"; then\n\t    AC_MSG_RESULT([yes (standard debugging)])\n\tfi\n    fi\n    AC_SUBST(CFLAGS_DEFAULT)\n    AC_SUBST(LDFLAGS_DEFAULT)\n\n    if test \"$tcl_ok\" = \"mem\" -o \"$tcl_ok\" = \"all\"; then\n\tAC_DEFINE(TCL_MEM_DEBUG, 1, [Is memory debugging enabled?])\n    fi\n\n    ifelse($1,bccdebug,dnl Only enable 'compile' for the Tcl core itself\n\tif test \"$tcl_ok\" = \"compile\" -o \"$tcl_ok\" = \"all\"; then\n\t    AC_DEFINE(TCL_COMPILE_DEBUG, 1, [Is bytecode debugging enabled?])\n\t    AC_DEFINE(TCL_COMPILE_STATS, 1, [Are bytecode statistics enabled?])\n\tfi)\n\n    if test \"$tcl_ok\" != \"yes\" -a \"$tcl_ok\" != \"no\"; then\n\tif test \"$tcl_ok\" = \"all\"; then\n\t    AC_MSG_RESULT([enabled symbols mem ]ifelse($1,bccdebug,[compile ])[debugging])\n\telse\n\t    AC_MSG_RESULT([enabled $tcl_ok debugging])\n\tfi\n    fi\n])\n\n#------------------------------------------------------------------------\n# SC_ENABLE_LANGINFO --\n#\n#\tAllows use of modern nl_langinfo check for better l10n.\n#\tThis is only relevant for Unix.\n#\n# Arguments:\n#\tnone\n#\n# Results:\n#\n#\tAdds the following arguments to configure:\n#\t\t--enable-langinfo=yes|no (default is yes)\n#\n#\tDefines the following vars:\n#\t\tHAVE_LANGINFO\tTriggers use of nl_langinfo if defined.\n#\n#------------------------------------------------------------------------\n\nAC_DEFUN([SC_ENABLE_LANGINFO], [\n    AC_ARG_ENABLE(langinfo,\n\tAC_HELP_STRING([--enable-langinfo],\n\t    [use nl_langinfo if possible to determine encoding at startup, otherwise use old heuristic (default: on)]),\n\t[langinfo_ok=$enableval], [langinfo_ok=yes])\n\n    HAVE_LANGINFO=0\n    if test \"$langinfo_ok\" = \"yes\"; then\n\tAC_CHECK_HEADER(langinfo.h,[langinfo_ok=yes],[langinfo_ok=no])\n    fi\n    AC_MSG_CHECKING([whether to use nl_langinfo])\n    if test \"$langinfo_ok\" = \"yes\"; then\n\tAC_CACHE_VAL(tcl_cv_langinfo_h, [\n\t    AC_TRY_COMPILE([#include <langinfo.h>], [nl_langinfo(CODESET);],\n\t\t    [tcl_cv_langinfo_h=yes],[tcl_cv_langinfo_h=no])])\n\tAC_MSG_RESULT([$tcl_cv_langinfo_h])\n\tif test $tcl_cv_langinfo_h = yes; then\n\t    AC_DEFINE(HAVE_LANGINFO, 1, [Do we have nl_langinfo()?])\n\tfi\n    else\n\tAC_MSG_RESULT([$langinfo_ok])\n    fi\n])\n\n#--------------------------------------------------------------------\n# SC_CONFIG_MANPAGES\n#\n#\tDecide whether to use symlinks for linking the manpages,\n#\twhether to compress the manpages after installation, and\n#\twhether to add a package name suffix to the installed\n#\tmanpages to avoidfile name clashes.\n#\tIf compression is enabled also find out what file name suffix\n#\tthe given compression program is using.\n#\n# Arguments:\n#\tnone\n#\n# Results:\n#\n#\tAdds the following arguments to configure:\n#\t\t--enable-man-symlinks\n#\t\t--enable-man-compression=PROG\n#\t\t--enable-man-suffix[=STRING]\n#\n#\tDefines the following variable:\n#\n#\tMAN_FLAGS -\tThe apropriate flags for installManPage\n#\t\t\taccording to the user's selection.\n#\n#--------------------------------------------------------------------\n\nAC_DEFUN([SC_CONFIG_MANPAGES], [\n    AC_MSG_CHECKING([whether to use symlinks for manpages])\n    AC_ARG_ENABLE(man-symlinks,\n\tAC_HELP_STRING([--enable-man-symlinks],\n\t    [use symlinks for the manpages (default: off)]),\n\ttest \"$enableval\" != \"no\" && MAN_FLAGS=\"$MAN_FLAGS --symlinks\",\n\tenableval=\"no\")\n    AC_MSG_RESULT([$enableval])\n\n    AC_MSG_CHECKING([whether to compress the manpages])\n    AC_ARG_ENABLE(man-compression,\n\tAC_HELP_STRING([--enable-man-compression=PROG],\n\t    [compress the manpages with PROG (default: off)]),\n\t[case $enableval in\n\t    yes) AC_MSG_ERROR([missing argument to --enable-man-compression]);;\n\t    no)  ;;\n\t    *)   MAN_FLAGS=\"$MAN_FLAGS --compress $enableval\";;\n\tesac],\n\tenableval=\"no\")\n    AC_MSG_RESULT([$enableval])\n    if test \"$enableval\" != \"no\"; then\n\tAC_MSG_CHECKING([for compressed file suffix])\n\ttouch TeST\n\t$enableval TeST\n\tZ=`ls TeST* | sed 's/^....//'`\n\trm -f TeST*\n\tMAN_FLAGS=\"$MAN_FLAGS --extension $Z\"\n\tAC_MSG_RESULT([$Z])\n    fi\n\n    AC_MSG_CHECKING([whether to add a package name suffix for the manpages])\n    AC_ARG_ENABLE(man-suffix,\n\tAC_HELP_STRING([--enable-man-suffix=STRING],\n\t    [use STRING as a suffix to manpage file names (default: no, AC_PACKAGE_NAME if enabled without specifying STRING)]),\n\t[case $enableval in\n\t    yes) enableval=\"AC_PACKAGE_NAME\" MAN_FLAGS=\"$MAN_FLAGS --suffix $enableval\";;\n\t    no)  ;;\n\t    *)   MAN_FLAGS=\"$MAN_FLAGS --suffix $enableval\";;\n\tesac],\n\tenableval=\"no\")\n    AC_MSG_RESULT([$enableval])\n\n    AC_SUBST(MAN_FLAGS)\n])\n\n#--------------------------------------------------------------------\n# SC_CONFIG_SYSTEM\n#\n#\tDetermine what the system is (some things cannot be easily checked\n#\ton a feature-driven basis, alas). This can usually be done via the\n#\t\"uname\" command, but there are a few systems, like Next, where\n#\tthis doesn't work.\n#\n# Arguments:\n#\tnone\n#\n# Results:\n#\tDefines the following var:\n#\n#\tsystem -\tSystem/platform/version identification code.\n#\n#--------------------------------------------------------------------\n\nAC_DEFUN([SC_CONFIG_SYSTEM], [\n    AC_CACHE_CHECK([system version], tcl_cv_sys_version, [\n\tif test -f /usr/lib/NextStep/software_version; then\n\t    tcl_cv_sys_version=NEXTSTEP-`awk '/3/,/3/' /usr/lib/NextStep/software_version`\n\telse\n\t    tcl_cv_sys_version=`uname -s`-`uname -r`\n\t    if test \"$?\" -ne 0 ; then\n\t\tAC_MSG_WARN([can't find uname command])\n\t\ttcl_cv_sys_version=unknown\n\t    else\n\t\t# Special check for weird MP-RAS system (uname returns weird\n\t\t# results, and the version is kept in special file).\n\n\t\tif test -r /etc/.relid -a \"X`uname -n`\" = \"X`uname -s`\" ; then\n\t\t    tcl_cv_sys_version=MP-RAS-`awk '{print $[3]}' /etc/.relid`\n\t\tfi\n\t\tif test \"`uname -s`\" = \"AIX\" ; then\n\t\t    tcl_cv_sys_version=AIX-`uname -v`.`uname -r`\n\t\tfi\n\t    fi\n\tfi\n    ])\n    system=$tcl_cv_sys_version\n])\n\n#--------------------------------------------------------------------\n# SC_CONFIG_CFLAGS\n#\n#\tTry to determine the proper flags to pass to the compiler\n#\tfor building shared libraries and other such nonsense.\n#\n# Arguments:\n#\tnone\n#\n# Results:\n#\n#\tDefines and substitutes the following vars:\n#\n#       DL_OBJS -       Name of the object file that implements dynamic\n#                       loading for Tcl on this system.\n#       DL_LIBS -       Library file(s) to include in tclsh and other base\n#                       applications in order for the \"load\" command to work.\n#       LDFLAGS -      Flags to pass to the compiler when linking object\n#                       files into an executable application binary such\n#                       as tclsh.\n#       LD_SEARCH_FLAGS-Flags to pass to ld, such as \"-R /usr/local/tcl/lib\",\n#                       that tell the run-time dynamic linker where to look\n#                       for shared libraries such as libtcl.so.  Depends on\n#                       the variable LIB_RUNTIME_DIR in the Makefile. Could\n#                       be the same as CC_SEARCH_FLAGS if ${CC} is used to link.\n#       CC_SEARCH_FLAGS-Flags to pass to ${CC}, such as \"-Wl,-rpath,/usr/local/tcl/lib\",\n#                       that tell the run-time dynamic linker where to look\n#                       for shared libraries such as libtcl.so.  Depends on\n#                       the variable LIB_RUNTIME_DIR in the Makefile.\n#       MAKE_LIB -      Command to execute to build the a library;\n#                       differs when building shared or static.\n#       MAKE_STUB_LIB -\n#                       Command to execute to build a stub library.\n#       INSTALL_LIB -   Command to execute to install a library;\n#                       differs when building shared or static.\n#       INSTALL_STUB_LIB -\n#                       Command to execute to install a stub library.\n#       STLIB_LD -      Base command to use for combining object files\n#                       into a static library.\n#       SHLIB_CFLAGS -  Flags to pass to cc when compiling the components\n#                       of a shared library (may request position-independent\n#                       code, among other things).\n#       SHLIB_LD -      Base command to use for combining object files\n#                       into a shared library.\n#       SHLIB_LD_LIBS - Dependent libraries for the linker to scan when\n#                       creating shared libraries.  This symbol typically\n#                       goes at the end of the \"ld\" commands that build\n#                       shared libraries. The value of the symbol is\n#                       \"${LIBS}\" if all of the dependent libraries should\n#                       be specified when creating a shared library.  If\n#                       dependent libraries should not be specified (as on\n#                       SunOS 4.x, where they cause the link to fail, or in\n#                       general if Tcl and Tk aren't themselves shared\n#                       libraries), then this symbol has an empty string\n#                       as its value.\n#       SHLIB_SUFFIX -  Suffix to use for the names of dynamically loadable\n#                       extensions.  An empty string means we don't know how\n#                       to use shared libraries on this platform.\n# TCL_SHLIB_LD_EXTRAS - Additional element which are added to SHLIB_LD_LIBS\n#  TK_SHLIB_LD_EXTRAS   for the build of Tcl and Tk, but not recorded in the\n#                       tclConfig.sh, since they are only used for the build\n#                       of Tcl and Tk.\n#                       Examples: MacOS X records the library version and\n#                       compatibility version in the shared library.  But\n#                       of course the Tcl version of this is only used for Tcl.\n#       LIB_SUFFIX -    Specifies everything that comes after the \"libfoo\"\n#                       in a static or shared library name, using the $VERSION variable\n#                       to put the version in the right place.  This is used\n#                       by platforms that need non-standard library names.\n#                       Examples:  ${VERSION}.so.1.1 on NetBSD, since it needs\n#                       to have a version after the .so, and ${VERSION}.a\n#                       on AIX, since a shared library needs to have\n#                       a .a extension whereas shared objects for loadable\n#                       extensions have a .so extension.  Defaults to\n#                       ${VERSION}${SHLIB_SUFFIX}.\n#       TCL_LIBS -\n#                       Libs to use when linking Tcl shell or some other\n#                       shell that includes Tcl libs.\n#\tCFLAGS_DEBUG -\n#\t\t\tFlags used when running the compiler in debug mode\n#\tCFLAGS_OPTIMIZE -\n#\t\t\tFlags used when running the compiler in optimize mode\n#\tCFLAGS -\tAdditional CFLAGS added as necessary (usually 64-bit)\n#\n#--------------------------------------------------------------------\n\nAC_DEFUN([SC_CONFIG_CFLAGS], [\n\n    # Step 0.a: Enable 64 bit support?\n\n    AC_MSG_CHECKING([if 64bit support is requested])\n    AC_ARG_ENABLE(64bit,\n\tAC_HELP_STRING([--enable-64bit],\n\t    [enable 64bit support (default: off)]),\n\t[do64bit=$enableval], [do64bit=no])\n    AC_MSG_RESULT([$do64bit])\n\n    # Step 0.b: Enable Solaris 64 bit VIS support?\n\n    AC_MSG_CHECKING([if 64bit Sparc VIS support is requested])\n    AC_ARG_ENABLE(64bit-vis,\n\tAC_HELP_STRING([--enable-64bit-vis],\n\t    [enable 64bit Sparc VIS support (default: off)]),\n\t[do64bitVIS=$enableval], [do64bitVIS=no])\n    AC_MSG_RESULT([$do64bitVIS])\n    # Force 64bit on with VIS\n    AS_IF([test \"$do64bitVIS\" = \"yes\"], [do64bit=yes])\n\n    # Step 0.c: Check if visibility support is available. Do this here so\n    # that platform specific alternatives can be used below if this fails.\n\n    AC_CACHE_CHECK([if compiler supports visibility \"hidden\"],\n\ttcl_cv_cc_visibility_hidden, [\n\thold_cflags=$CFLAGS; CFLAGS=\"$CFLAGS -Werror\"\n\tAC_TRY_LINK([\n\t    extern __attribute__((__visibility__(\"hidden\"))) void f(void);\n\t    void f(void) {}], [f();], tcl_cv_cc_visibility_hidden=yes,\n\t    tcl_cv_cc_visibility_hidden=no)\n\tCFLAGS=$hold_cflags])\n    AS_IF([test $tcl_cv_cc_visibility_hidden = yes], [\n\tAC_DEFINE(MODULE_SCOPE,\n\t    [extern __attribute__((__visibility__(\"hidden\")))],\n\t    [Compiler support for module scope symbols])\n    ])\n\n    # Step 0.d: Disable -rpath support?\n\n    AC_MSG_CHECKING([if rpath support is requested])\n    AC_ARG_ENABLE(rpath,\n\tAC_HELP_STRING([--disable-rpath],\n\t    [disable rpath support (default: on)]),\n\t[doRpath=$enableval], [doRpath=yes])\n    AC_MSG_RESULT([$doRpath])\n\n    # Step 1: set the variable \"system\" to hold the name and version number\n    # for the system.\n\n    SC_CONFIG_SYSTEM\n\n    # Step 2: check for existence of -ldl library.  This is needed because\n    # Linux can use either -ldl or -ldld for dynamic loading.\n\n    AC_CHECK_LIB(dl, dlopen, have_dl=yes, have_dl=no)\n\n    # Require ranlib early so we can override it in special cases below.\n    AS_IF([test x\"${SHLIB_VERSION}\" = x], [SHLIB_VERSION=\"1.0\"])\n\n    AC_REQUIRE([AC_PROG_RANLIB])\n\n    # Step 3: set configuration options based on system name and version.\n\n    do64bit_ok=no\n    # default to '{$LIBS}' and set to \"\" on per-platform necessary basis\n    SHLIB_LD_LIBS='${LIBS}'\n    LDFLAGS_ORIG=\"$LDFLAGS\"\n    # When ld needs options to work in 64-bit mode, put them in\n    # LDFLAGS_ARCH so they eventually end up in LDFLAGS even if [load]\n    # is disabled by the user. [Bug 1016796]\n    LDFLAGS_ARCH=\"\"\n    UNSHARED_LIB_SUFFIX=\"\"\n    TCL_TRIM_DOTS='`echo ${VERSION} | tr -d .`'\n    ECHO_VERSION='`echo ${VERSION}`'\n    TCL_LIB_VERSIONS_OK=ok\n    CFLAGS_DEBUG=-g\n    CFLAGS_OPTIMIZE=-O\n    AS_IF([test \"$GCC\" = yes], [\n\tCFLAGS_WARNING=\"-Wall\"\n    ], [CFLAGS_WARNING=\"\"])\n    AC_CHECK_TOOL(AR, ar)\n    STLIB_LD='${AR} cr'\n    LD_LIBRARY_PATH_VAR=\"LD_LIBRARY_PATH\"\n    PLAT_OBJS=\"\"\n    PLAT_SRCS=\"\"\n    LDAIX_SRC=\"\"\n    case $system in\n\tAIX-*)\n\t    AS_IF([test \"${TCL_THREADS}\" = \"1\" -a \"$GCC\" != \"yes\"], [\n\t\t# AIX requires the _r compiler when gcc isn't being used\n\t\tcase \"${CC}\" in\n\t\t    *_r|*_r\\ *)\n\t\t\t# ok ...\n\t\t\t;;\n\t\t    *)\n\t\t\t# Make sure only first arg gets _r\n\t\t    \tCC=`echo \"$CC\" | sed -e 's/^\\([[^ ]]*\\)/\\1_r/'`\n\t\t\t;;\n\t\tesac\n\t\tAC_MSG_RESULT([Using $CC for compiling with threads])\n\t    ])\n\t    LIBS=\"$LIBS -lc\"\n\t    SHLIB_CFLAGS=\"\"\n\t    SHLIB_SUFFIX=\".so\"\n\n\t    DL_OBJS=\"tclLoadDl.o\"\n\t    LD_LIBRARY_PATH_VAR=\"LIBPATH\"\n\n\t    # ldAix No longer needed with use of -bexpall/-brtl\n\t    # but some extensions may still reference it\n\t    LDAIX_SRC='$(UNIX_DIR)/ldAix'\n\n\t    # Check to enable 64-bit flags for compiler/linker\n\t    AS_IF([test \"$do64bit\" = yes], [\n\t\tAS_IF([test \"$GCC\" = yes], [\n\t\t    AC_MSG_WARN([64bit mode not supported with GCC on $system])\n\t\t], [\n\t\t    do64bit_ok=yes\n\t\t    CFLAGS=\"$CFLAGS -q64\"\n\t\t    LDFLAGS_ARCH=\"-q64\"\n\t\t    RANLIB=\"${RANLIB} -X64\"\n\t\t    AR=\"${AR} -X64\"\n\t\t    SHLIB_LD_FLAGS=\"-b64\"\n\t\t])\n\t    ])\n\n\t    AS_IF([test \"`uname -m`\" = ia64], [\n\t\t# AIX-5 uses ELF style dynamic libraries on IA-64, but not PPC\n\t\tSHLIB_LD=\"/usr/ccs/bin/ld -G -z text\"\n\t\t# AIX-5 has dl* in libc.so\n\t\tDL_LIBS=\"\"\n\t\tAS_IF([test \"$GCC\" = yes], [\n\t\t    CC_SEARCH_FLAGS='-Wl,-R,${LIB_RUNTIME_DIR}'\n\t\t], [\n\t\t    CC_SEARCH_FLAGS='-R${LIB_RUNTIME_DIR}'\n\t\t])\n\t\tLD_SEARCH_FLAGS='-R ${LIB_RUNTIME_DIR}'\n\t    ], [\n\t\tAS_IF([test \"$GCC\" = yes], [\n\t\t    SHLIB_LD='${CC} -shared -Wl,-bexpall'\n\t\t], [\n\t\t    SHLIB_LD=\"/bin/ld -bhalt:4 -bM:SRE -bexpall -H512 -T512 -bnoentry\"\n\t\t    LDFLAGS=\"$LDFLAGS -brtl\"\n\t\t])\n\t\tSHLIB_LD=\"${SHLIB_LD} ${SHLIB_LD_FLAGS}\"\n\t\tDL_LIBS=\"-ldl\"\n\t\tCC_SEARCH_FLAGS='-L${LIB_RUNTIME_DIR}'\n\t\tLD_SEARCH_FLAGS=${CC_SEARCH_FLAGS}\n\t    ])\n\t    ;;\n\tBeOS*)\n\t    SHLIB_CFLAGS=\"-fPIC\"\n\t    SHLIB_LD='${CC} -nostart'\n\t    SHLIB_SUFFIX=\".so\"\n\t    DL_OBJS=\"tclLoadDl.o\"\n\t    DL_LIBS=\"-ldl\"\n\n\t    #-----------------------------------------------------------\n\t    # Check for inet_ntoa in -lbind, for BeOS (which also needs\n\t    # -lsocket, even if the network functions are in -lnet which\n\t    # is always linked to, for compatibility.\n\t    #-----------------------------------------------------------\n\t    AC_CHECK_LIB(bind, inet_ntoa, [LIBS=\"$LIBS -lbind -lsocket\"])\n\t    ;;\n\tBSD/OS-2.1*|BSD/OS-3*)\n\t    SHLIB_CFLAGS=\"\"\n\t    SHLIB_LD=\"shlicc -r\"\n\t    SHLIB_SUFFIX=\".so\"\n\t    DL_OBJS=\"tclLoadDl.o\"\n\t    DL_LIBS=\"-ldl\"\n\t    CC_SEARCH_FLAGS=\"\"\n\t    LD_SEARCH_FLAGS=\"\"\n\t    ;;\n\tBSD/OS-4.*)\n\t    SHLIB_CFLAGS=\"-export-dynamic -fPIC\"\n\t    SHLIB_LD='${CC} -shared'\n\t    SHLIB_SUFFIX=\".so\"\n\t    DL_OBJS=\"tclLoadDl.o\"\n\t    DL_LIBS=\"-ldl\"\n\t    LDFLAGS=\"$LDFLAGS -export-dynamic\"\n\t    CC_SEARCH_FLAGS=\"\"\n\t    LD_SEARCH_FLAGS=\"\"\n\t    ;;\n\tCYGWIN_*|MINGW32*)\n\t    SHLIB_CFLAGS=\"\"\n\t    SHLIB_LD='${CC} -shared'\n\t    SHLIB_SUFFIX=\".dll\"\n\t    DL_OBJS=\"tclLoadDl.o tclWinError.o\"\n\t    DL_LIBS=\"-ldl\"\n\t    CC_SEARCH_FLAGS=\"\"\n\t    LD_SEARCH_FLAGS=\"\"\n\t    TCL_NEEDS_EXP_FILE=1\n\t    TCL_EXPORT_FILE_SUFFIX='${VERSION}\\$\\{DBGX\\}.dll.a'\n\t    SHLIB_LD_LIBS=\"${SHLIB_LD_LIBS} -Wl,--out-implib,\\$[@].a\"\n\t    AC_CACHE_CHECK(for Cygwin version of gcc,\n\t\tac_cv_cygwin,\n\t\tAC_TRY_COMPILE([\n\t\t#ifdef __CYGWIN__\n\t\t    #error cygwin\n\t\t#endif\n\t\t], [],\n\t\tac_cv_cygwin=no,\n\t\tac_cv_cygwin=yes)\n\t    )\n\t    if test \"$ac_cv_cygwin\" = \"no\"; then\n\t\tAC_MSG_ERROR([${CC} is not a cygwin compiler.])\n\t    fi\n\t    if test \"x${TCL_THREADS}\" = \"x0\"; then\n\t\tAC_MSG_ERROR([CYGWIN compile is only supported with --enable-threads])\n\t    fi\n\t    do64bit_ok=yes\n\t    if test \"x${SHARED_BUILD}\" = \"x1\"; then\n\t\techo \"running cd ${TCL_SRC_DIR}/win; ${CONFIG_SHELL-/bin/sh} ./configure $ac_configure_args\"\n\t\t# The eval makes quoting arguments work.\n\t\tif cd ${TCL_SRC_DIR}/win; eval ${CONFIG_SHELL-/bin/sh} ./configure $ac_configure_args; cd ../unix\n\t\tthen :\n\t\telse\n\t\t    { echo \"configure: error: configure failed for ../win\" 1>&2; exit 1; }\n\t\tfi\n\t    fi\n\t    ;;\n\tdgux*)\n\t    SHLIB_CFLAGS=\"-K PIC\"\n\t    SHLIB_LD='${CC} -G'\n\t    SHLIB_LD_LIBS=\"\"\n\t    SHLIB_SUFFIX=\".so\"\n\t    DL_OBJS=\"tclLoadDl.o\"\n\t    DL_LIBS=\"-ldl\"\n\t    CC_SEARCH_FLAGS=\"\"\n\t    LD_SEARCH_FLAGS=\"\"\n\t    ;;\n\tHaiku*)\n\t    LDFLAGS=\"$LDFLAGS -Wl,--export-dynamic\"\n\t    SHLIB_CFLAGS=\"-fPIC\"\n\t    SHLIB_SUFFIX=\".so\"\n\t    SHLIB_LD='${CC} -shared ${CFLAGS} ${LDFLAGS}'\n\t    DL_OBJS=\"tclLoadDl.o\"\n\t    DL_LIBS=\"-lroot\"\n\t    AC_CHECK_LIB(network, inet_ntoa, [LIBS=\"$LIBS -lnetwork\"])\n\t    ;;\n\tHP-UX-*.11.*)\n\t    # Use updated header definitions where possible\n\t    AC_DEFINE(_XOPEN_SOURCE_EXTENDED, 1, [Do we want to use the XOPEN network library?])\n\t    AC_DEFINE(_XOPEN_SOURCE, 1, [Do we want to use the XOPEN network library?])\n\t    LIBS=\"$LIBS -lxnet\"               # Use the XOPEN network library\n\n\t    AS_IF([test \"`uname -m`\" = ia64], [\n\t\tSHLIB_SUFFIX=\".so\"\n\t    ], [\n\t\tSHLIB_SUFFIX=\".sl\"\n\t    ])\n\t    AC_CHECK_LIB(dld, shl_load, tcl_ok=yes, tcl_ok=no)\n\t    AS_IF([test \"$tcl_ok\" = yes], [\n\t\tSHLIB_CFLAGS=\"+z\"\n\t\tSHLIB_LD=\"ld -b\"\n\t\tDL_OBJS=\"tclLoadShl.o\"\n\t\tDL_LIBS=\"-ldld\"\n\t\tLDFLAGS=\"$LDFLAGS -Wl,-E\"\n\t\tCC_SEARCH_FLAGS='-Wl,+s,+b,${LIB_RUNTIME_DIR}:.'\n\t\tLD_SEARCH_FLAGS='+s +b ${LIB_RUNTIME_DIR}:.'\n\t\tLD_LIBRARY_PATH_VAR=\"SHLIB_PATH\"\n\t    ])\n\t    AS_IF([test \"$GCC\" = yes], [\n\t\tSHLIB_LD='${CC} -shared'\n\t\tLD_SEARCH_FLAGS=${CC_SEARCH_FLAGS}\n\t    ])\n\n\t    # Users may want PA-RISC 1.1/2.0 portable code - needs HP cc\n\t    #CFLAGS=\"$CFLAGS +DAportable\"\n\n\t    # Check to enable 64-bit flags for compiler/linker\n\t    AS_IF([test \"$do64bit\" = \"yes\"], [\n\t\tAS_IF([test \"$GCC\" = yes], [\n\t\t    case `${CC} -dumpmachine` in\n\t\t\thppa64*)\n\t\t\t    # 64-bit gcc in use.  Fix flags for GNU ld.\n\t\t\t    do64bit_ok=yes\n\t\t\t    SHLIB_LD='${CC} -shared'\n\t\t\t    AS_IF([test $doRpath = yes], [\n\t\t\t\tCC_SEARCH_FLAGS='-Wl,-rpath,${LIB_RUNTIME_DIR}'])\n\t\t\t    LD_SEARCH_FLAGS=${CC_SEARCH_FLAGS}\n\t\t\t    ;;\n\t\t\t*)\n\t\t\t    AC_MSG_WARN([64bit mode not supported with GCC on $system])\n\t\t\t    ;;\n\t\t    esac\n\t\t], [\n\t\t    do64bit_ok=yes\n\t\t    CFLAGS=\"$CFLAGS +DD64\"\n\t\t    LDFLAGS_ARCH=\"+DD64\"\n\t\t])\n\t    ]) ;;\n\tHP-UX-*.08.*|HP-UX-*.09.*|HP-UX-*.10.*)\n\t    SHLIB_SUFFIX=\".sl\"\n\t    AC_CHECK_LIB(dld, shl_load, tcl_ok=yes, tcl_ok=no)\n\t    AS_IF([test \"$tcl_ok\" = yes], [\n\t\tSHLIB_CFLAGS=\"+z\"\n\t\tSHLIB_LD=\"ld -b\"\n\t\tSHLIB_LD_LIBS=\"\"\n\t\tDL_OBJS=\"tclLoadShl.o\"\n\t\tDL_LIBS=\"-ldld\"\n\t\tLDFLAGS=\"$LDFLAGS -Wl,-E\"\n\t\tCC_SEARCH_FLAGS='-Wl,+s,+b,${LIB_RUNTIME_DIR}:.'\n\t\tLD_SEARCH_FLAGS='+s +b ${LIB_RUNTIME_DIR}:.'\n\t\tLD_LIBRARY_PATH_VAR=\"SHLIB_PATH\"\n\t    ]) ;;\n\tIRIX-5.*)\n\t    SHLIB_CFLAGS=\"\"\n\t    SHLIB_LD=\"ld -shared -rdata_shared\"\n\t    SHLIB_SUFFIX=\".so\"\n\t    DL_OBJS=\"tclLoadDl.o\"\n\t    DL_LIBS=\"\"\n\t    AS_IF([test $doRpath = yes], [\n\t\tCC_SEARCH_FLAGS='-Wl,-rpath,${LIB_RUNTIME_DIR}'\n\t\tLD_SEARCH_FLAGS='-rpath ${LIB_RUNTIME_DIR}'])\n\t    ;;\n\tIRIX-6.*)\n\t    SHLIB_CFLAGS=\"\"\n\t    SHLIB_LD=\"ld -n32 -shared -rdata_shared\"\n\t    SHLIB_SUFFIX=\".so\"\n\t    DL_OBJS=\"tclLoadDl.o\"\n\t    DL_LIBS=\"\"\n\t    AS_IF([test $doRpath = yes], [\n\t\tCC_SEARCH_FLAGS='-Wl,-rpath,${LIB_RUNTIME_DIR}'\n\t\tLD_SEARCH_FLAGS='-rpath ${LIB_RUNTIME_DIR}'])\n\t    AS_IF([test \"$GCC\" = yes], [\n\t\tCFLAGS=\"$CFLAGS -mabi=n32\"\n\t\tLDFLAGS=\"$LDFLAGS -mabi=n32\"\n\t    ], [\n\t\tcase $system in\n\t\t    IRIX-6.3)\n\t\t\t# Use to build 6.2 compatible binaries on 6.3.\n\t\t\tCFLAGS=\"$CFLAGS -n32 -D_OLD_TERMIOS\"\n\t\t\t;;\n\t\t    *)\n\t\t\tCFLAGS=\"$CFLAGS -n32\"\n\t\t\t;;\n\t\tesac\n\t\tLDFLAGS=\"$LDFLAGS -n32\"\n\t    ])\n\t    ;;\n\tIRIX64-6.*)\n\t    SHLIB_CFLAGS=\"\"\n\t    SHLIB_LD=\"ld -n32 -shared -rdata_shared\"\n\t    SHLIB_SUFFIX=\".so\"\n\t    DL_OBJS=\"tclLoadDl.o\"\n\t    DL_LIBS=\"\"\n\t    AS_IF([test $doRpath = yes], [\n\t\tCC_SEARCH_FLAGS='-Wl,-rpath,${LIB_RUNTIME_DIR}'\n\t\tLD_SEARCH_FLAGS='-rpath ${LIB_RUNTIME_DIR}'])\n\n\t    # Check to enable 64-bit flags for compiler/linker\n\n\t    AS_IF([test \"$do64bit\" = yes], [\n\t        AS_IF([test \"$GCC\" = yes], [\n\t            AC_MSG_WARN([64bit mode not supported by gcc])\n\t        ], [\n\t            do64bit_ok=yes\n\t            SHLIB_LD=\"ld -64 -shared -rdata_shared\"\n\t            CFLAGS=\"$CFLAGS -64\"\n\t            LDFLAGS_ARCH=\"-64\"\n\t        ])\n\t    ])\n\t    ;;\n\tLinux*|GNU*|NetBSD-Debian)\n\t    SHLIB_CFLAGS=\"-fPIC\"\n\t    SHLIB_SUFFIX=\".so\"\n\n\t    CFLAGS_OPTIMIZE=\"-O2\"\n\t    # egcs-2.91.66 on Redhat Linux 6.0 generates lots of warnings\n\t    # when you inline the string and math operations.  Turn this off to\n\t    # get rid of the warnings.\n\t    #CFLAGS_OPTIMIZE=\"${CFLAGS_OPTIMIZE} -D__NO_STRING_INLINES -D__NO_MATH_INLINES\"\n\n\t    SHLIB_LD='${CC} -shared ${CFLAGS} ${LDFLAGS}'\n\t    DL_OBJS=\"tclLoadDl.o\"\n\t    DL_LIBS=\"-ldl\"\n\t    LDFLAGS=\"$LDFLAGS -Wl,--export-dynamic\"\n\t    AS_IF([test $doRpath = yes], [\n\t\tCC_SEARCH_FLAGS='-Wl,-rpath,${LIB_RUNTIME_DIR}'])\n\t    LD_SEARCH_FLAGS=${CC_SEARCH_FLAGS}\n\t    AS_IF([test \"`uname -m`\" = \"alpha\"], [CFLAGS=\"$CFLAGS -mieee\"])\n\t    AS_IF([test $do64bit = yes], [\n\t\tAC_CACHE_CHECK([if compiler accepts -m64 flag], tcl_cv_cc_m64, [\n\t\t    hold_cflags=$CFLAGS\n\t\t    CFLAGS=\"$CFLAGS -m64\"\n\t\t    AC_TRY_LINK(,, tcl_cv_cc_m64=yes, tcl_cv_cc_m64=no)\n\t\t    CFLAGS=$hold_cflags])\n\t\tAS_IF([test $tcl_cv_cc_m64 = yes], [\n\t\t    CFLAGS=\"$CFLAGS -m64\"\n\t\t    do64bit_ok=yes\n\t\t])\n\t   ])\n\n\t    # The combo of gcc + glibc has a bug related to inlining of\n\t    # functions like strtod(). The -fno-builtin flag should address\n\t    # this problem but it does not work. The -fno-inline flag is kind\n\t    # of overkill but it works. Disable inlining only when one of the\n\t    # files in compat/*.c is being linked in.\n\n\t    AS_IF([test x\"${USE_COMPAT}\" != x],[CFLAGS=\"$CFLAGS -fno-inline\"])\n\t    ;;\n\tLynx*)\n\t    SHLIB_CFLAGS=\"-fPIC\"\n\t    SHLIB_SUFFIX=\".so\"\n\t    CFLAGS_OPTIMIZE=-02\n\t    SHLIB_LD='${CC} -shared'\n\t    DL_OBJS=\"tclLoadDl.o\"\n\t    DL_LIBS=\"-mshared -ldl\"\n\t    LD_FLAGS=\"-Wl,--export-dynamic\"\n\t    AS_IF([test $doRpath = yes], [\n\t\tCC_SEARCH_FLAGS='-Wl,-rpath,${LIB_RUNTIME_DIR}'\n\t\tLD_SEARCH_FLAGS='-Wl,-rpath,${LIB_RUNTIME_DIR}'])\n\t    ;;\n\tMP-RAS-02*)\n\t    SHLIB_CFLAGS=\"-K PIC\"\n\t    SHLIB_LD='${CC} -G'\n\t    SHLIB_LD_LIBS=\"\"\n\t    SHLIB_SUFFIX=\".so\"\n\t    DL_OBJS=\"tclLoadDl.o\"\n\t    DL_LIBS=\"-ldl\"\n\t    CC_SEARCH_FLAGS=\"\"\n\t    LD_SEARCH_FLAGS=\"\"\n\t    ;;\n\tMP-RAS-*)\n\t    SHLIB_CFLAGS=\"-K PIC\"\n\t    SHLIB_LD='${CC} -G'\n\t    SHLIB_LD_LIBS=\"\"\n\t    SHLIB_SUFFIX=\".so\"\n\t    DL_OBJS=\"tclLoadDl.o\"\n\t    DL_LIBS=\"-ldl\"\n\t    LDFLAGS=\"$LDFLAGS -Wl,-Bexport\"\n\t    CC_SEARCH_FLAGS=\"\"\n\t    LD_SEARCH_FLAGS=\"\"\n\t    ;;\n\tOpenBSD-*)\n\t    arch=`arch -s`\n\t    case \"$arch\" in\n\t    vax)\n\t\t# Equivalent using configure option --disable-load\n\t\t# Step 4 will set the necessary variables\n\t\tDL_OBJS=\"\"\n\t\tSHLIB_LD_LIBS=\"\"\n\t\tLDFLAGS=\"\"\n\t\t;;\n\t    *)\n\t\tcase \"$arch\" in\n\t\talpha|sparc|sparc64)\n\t\t    SHLIB_CFLAGS=\"-fPIC\"\n\t\t    ;;\n\t\t*)\n\t\t    SHLIB_CFLAGS=\"-fpic\"\n\t\t    ;;\n\t\tesac\n\t\tSHLIB_LD='${CC} -shared ${SHLIB_CFLAGS}'\n\t\tSHLIB_SUFFIX=\".so\"\n\t\tDL_OBJS=\"tclLoadDl.o\"\n\t\tDL_LIBS=\"\"\n\t\tAS_IF([test $doRpath = yes], [\n\t\t    CC_SEARCH_FLAGS='-Wl,-rpath,${LIB_RUNTIME_DIR}'])\n\t\tLD_SEARCH_FLAGS=${CC_SEARCH_FLAGS}\n\t\tSHARED_LIB_SUFFIX='${TCL_TRIM_DOTS}.so.${SHLIB_VERSION}'\n\t\tLDFLAGS=\"-Wl,-export-dynamic\"\n\t\t;;\n\t    esac\n\t    case \"$arch\" in\n\t    vax)\n\t\tCFLAGS_OPTIMIZE=\"-O1\"\n\t\t;;\n\t    sh)\n\t\tCFLAGS_OPTIMIZE=\"-O0\"\n\t\t;;\n\t    *)\n\t\tCFLAGS_OPTIMIZE=\"-O2\"\n\t\t;;\n\t    esac\n\t    AS_IF([test \"${TCL_THREADS}\" = \"1\"], [\n\t\t# On OpenBSD:\tCompile with -pthread\n\t\t#\t\tDon't link with -lpthread\n\t\tLIBS=`echo $LIBS | sed s/-lpthread//`\n\t\tCFLAGS=\"$CFLAGS -pthread\"\n\t    ])\n\t    # OpenBSD doesn't do version numbers with dots.\n\t    UNSHARED_LIB_SUFFIX='${TCL_TRIM_DOTS}.a'\n\t    TCL_LIB_VERSIONS_OK=nodots\n\t    ;;\n\tNetBSD-*)\n\t    # NetBSD has ELF and can use 'cc -shared' to build shared libs\n\t    SHLIB_CFLAGS=\"-fPIC\"\n\t    SHLIB_LD='${CC} -shared ${SHLIB_CFLAGS}'\n\t    SHLIB_SUFFIX=\".so\"\n\t    DL_OBJS=\"tclLoadDl.o\"\n\t    DL_LIBS=\"\"\n\t    LDFLAGS=\"$LDFLAGS -export-dynamic\"\n\t    AS_IF([test $doRpath = yes], [\n\t\tCC_SEARCH_FLAGS='-Wl,-rpath,${LIB_RUNTIME_DIR}'])\n\t    LD_SEARCH_FLAGS=${CC_SEARCH_FLAGS}\n\t    AS_IF([test \"${TCL_THREADS}\" = \"1\"], [\n\t\t# The -pthread needs to go in the CFLAGS, not LIBS\n\t\tLIBS=`echo $LIBS | sed s/-pthread//`\n\t\tCFLAGS=\"$CFLAGS -pthread\"\n\t    \tLDFLAGS=\"$LDFLAGS -pthread\"\n\t    ])\n\t    ;;\n\tFreeBSD-*)\n\t    # This configuration from FreeBSD Ports.\n\t    SHLIB_CFLAGS=\"-fPIC\"\n\t    SHLIB_LD=\"${CC} -shared\"\n\t    SHLIB_LD_LIBS=\"${SHLIB_LD_LIBS} -Wl,-soname,\\$[@]\"\n\t    SHLIB_SUFFIX=\".so\"\n\t    DL_OBJS=\"tclLoadDl.o\"\n\t    DL_LIBS=\"\"\n\t    LDFLAGS=\"\"\n\t    AS_IF([test $doRpath = yes], [\n\t\tCC_SEARCH_FLAGS='-Wl,-rpath,${LIB_RUNTIME_DIR}'\n\t\tLD_SEARCH_FLAGS='-Wl,-rpath,${LIB_RUNTIME_DIR}'])\n\t    AS_IF([test \"${TCL_THREADS}\" = \"1\"], [\n\t\t# The -pthread needs to go in the LDFLAGS, not LIBS\n\t\tLIBS=`echo $LIBS | sed s/-pthread//`\n\t\tCFLAGS=\"$CFLAGS $PTHREAD_CFLAGS\"\n\t\tLDFLAGS=\"$LDFLAGS $PTHREAD_LIBS\"])\n\t    case $system in\n\t    FreeBSD-3.*)\n\t\t# Version numbers are dot-stripped by system policy.\n\t\tTCL_TRIM_DOTS=`echo ${VERSION} | tr -d .`\n\t\tUNSHARED_LIB_SUFFIX='${TCL_TRIM_DOTS}.a'\n\t\tSHARED_LIB_SUFFIX='${TCL_TRIM_DOTS}.so'\n\t\tTCL_LIB_VERSIONS_OK=nodots\n\t\t;;\n\t    esac\n\t    ;;\n\tDarwin-*)\n\t    CFLAGS_OPTIMIZE=\"-Os\"\n\t    SHLIB_CFLAGS=\"-fno-common\"\n\t    # To avoid discrepancies between what headers configure sees during\n\t    # preprocessing tests and compiling tests, move any -isysroot and\n\t    # -mmacosx-version-min flags from CFLAGS to CPPFLAGS:\n\t    CPPFLAGS=\"${CPPFLAGS} `echo \" ${CFLAGS}\" | \\\n\t\tawk 'BEGIN {FS=\" +-\";ORS=\" \"}; {for (i=2;i<=NF;i++) \\\n\t\tif ([$]i~/^(isysroot|mmacosx-version-min)/) print \"-\"[$]i}'`\"\n\t    CFLAGS=\"`echo \" ${CFLAGS}\" | \\\n\t\tawk 'BEGIN {FS=\" +-\";ORS=\" \"}; {for (i=2;i<=NF;i++) \\\n\t\tif (!([$]i~/^(isysroot|mmacosx-version-min)/)) print \"-\"[$]i}'`\"\n\t    AS_IF([test $do64bit = yes], [\n\t\tcase `arch` in\n\t\t    ppc)\n\t\t\tAC_CACHE_CHECK([if compiler accepts -arch ppc64 flag],\n\t\t\t\ttcl_cv_cc_arch_ppc64, [\n\t\t\t    hold_cflags=$CFLAGS\n\t\t\t    CFLAGS=\"$CFLAGS -arch ppc64 -mpowerpc64 -mcpu=G5\"\n\t\t\t    AC_TRY_LINK(,, tcl_cv_cc_arch_ppc64=yes,\n\t\t\t\t    tcl_cv_cc_arch_ppc64=no)\n\t\t\t    CFLAGS=$hold_cflags])\n\t\t\tAS_IF([test $tcl_cv_cc_arch_ppc64 = yes], [\n\t\t\t    CFLAGS=\"$CFLAGS -arch ppc64 -mpowerpc64 -mcpu=G5\"\n\t\t\t    do64bit_ok=yes\n\t\t\t]);;\n\t\t    i386)\n\t\t\tAC_CACHE_CHECK([if compiler accepts -arch x86_64 flag],\n\t\t\t\ttcl_cv_cc_arch_x86_64, [\n\t\t\t    hold_cflags=$CFLAGS\n\t\t\t    CFLAGS=\"$CFLAGS -arch x86_64\"\n\t\t\t    AC_TRY_LINK(,, tcl_cv_cc_arch_x86_64=yes,\n\t\t\t\t    tcl_cv_cc_arch_x86_64=no)\n\t\t\t    CFLAGS=$hold_cflags])\n\t\t\tAS_IF([test $tcl_cv_cc_arch_x86_64 = yes], [\n\t\t\t    CFLAGS=\"$CFLAGS -arch x86_64\"\n\t\t\t    do64bit_ok=yes\n\t\t\t]);;\n\t\t    *)\n\t\t\tAC_MSG_WARN([Don't know how enable 64-bit on architecture `arch`]);;\n\t\tesac\n\t    ], [\n\t\t# Check for combined 32-bit and 64-bit fat build\n\t\tAS_IF([echo \"$CFLAGS \" |grep -E -q -- '-arch (ppc64|x86_64) ' \\\n\t\t    && echo \"$CFLAGS \" |grep -E -q -- '-arch (ppc|i386) '], [\n\t\t    fat_32_64=yes])\n\t    ])\n\t    SHLIB_LD='${CC} -dynamiclib ${CFLAGS} ${LDFLAGS}'\n\t    AC_CACHE_CHECK([if ld accepts -single_module flag], tcl_cv_ld_single_module, [\n\t\thold_ldflags=$LDFLAGS\n\t\tLDFLAGS=\"$LDFLAGS -dynamiclib -Wl,-single_module\"\n\t\tAC_TRY_LINK(, [int i;], tcl_cv_ld_single_module=yes, tcl_cv_ld_single_module=no)\n\t\tLDFLAGS=$hold_ldflags])\n\t    AS_IF([test $tcl_cv_ld_single_module = yes], [\n\t\tSHLIB_LD=\"${SHLIB_LD} -Wl,-single_module\"\n\t    ])\n\t    SHLIB_SUFFIX=\".dylib\"\n\t    DL_OBJS=\"tclLoadDyld.o\"\n\t    DL_LIBS=\"\"\n\t    # Don't use -prebind when building for Mac OS X 10.4 or later only:\n\t    AS_IF([test \"`echo \"${MACOSX_DEPLOYMENT_TARGET}\" | awk -F '10\\\\.' '{print int([$]2)}'`\" -lt 4 -a \\\n\t\t\"`echo \"${CPPFLAGS}\" | awk -F '-mmacosx-version-min=10\\\\.' '{print int([$]2)}'`\" -lt 4], [\n\t\tLDFLAGS=\"$LDFLAGS -prebind\"])\n\t    LDFLAGS=\"$LDFLAGS -headerpad_max_install_names\"\n\t    AC_CACHE_CHECK([if ld accepts -search_paths_first flag],\n\t\t    tcl_cv_ld_search_paths_first, [\n\t\thold_ldflags=$LDFLAGS\n\t\tLDFLAGS=\"$LDFLAGS -Wl,-search_paths_first\"\n\t\tAC_TRY_LINK(, [int i;], tcl_cv_ld_search_paths_first=yes,\n\t\t\ttcl_cv_ld_search_paths_first=no)\n\t\tLDFLAGS=$hold_ldflags])\n\t    AS_IF([test $tcl_cv_ld_search_paths_first = yes], [\n\t\tLDFLAGS=\"$LDFLAGS -Wl,-search_paths_first\"\n\t    ])\n\t    AS_IF([test \"$tcl_cv_cc_visibility_hidden\" != yes], [\n\t\tAC_DEFINE(MODULE_SCOPE, [__private_extern__],\n\t\t    [Compiler support for module scope symbols])\n\t    ])\n\t    CC_SEARCH_FLAGS=\"\"\n\t    LD_SEARCH_FLAGS=\"\"\n\t    LD_LIBRARY_PATH_VAR=\"DYLD_LIBRARY_PATH\"\n\t    AC_DEFINE(MAC_OSX_TCL, 1, [Is this a Mac I see before me?])\n\t    PLAT_OBJS='${MAC_OSX_OBJS}'\n\t    PLAT_SRCS='${MAC_OSX_SRCS}'\n\t    AC_MSG_CHECKING([whether to use CoreFoundation])\n\t    AC_ARG_ENABLE(corefoundation,\n\t\tAC_HELP_STRING([--enable-corefoundation],\n\t\t    [use CoreFoundation API on MacOSX (default: on)]),\n\t\t[tcl_corefoundation=$enableval], [tcl_corefoundation=yes])\n\t    AC_MSG_RESULT([$tcl_corefoundation])\n\t    AS_IF([test $tcl_corefoundation = yes], [\n\t\tAC_CACHE_CHECK([for CoreFoundation.framework],\n\t\t\ttcl_cv_lib_corefoundation, [\n\t\t    hold_libs=$LIBS\n\t\t    AS_IF([test \"$fat_32_64\" = yes], [\n\t\t\tfor v in CFLAGS CPPFLAGS LDFLAGS; do\n\t\t\t    # On Tiger there is no 64-bit CF, so remove 64-bit\n\t\t\t    # archs from CFLAGS et al. while testing for\n\t\t\t    # presence of CF. 64-bit CF is disabled in\n\t\t\t    # tclUnixPort.h if necessary.\n\t\t\t    eval 'hold_'$v'=\"$'$v'\";'$v'=\"`echo \"$'$v' \"|sed -e \"s/-arch ppc64 / /g\" -e \"s/-arch x86_64 / /g\"`\"'\n\t\t\tdone])\n\t\t    LIBS=\"$LIBS -framework CoreFoundation\"\n\t\t    AC_TRY_LINK([#include <CoreFoundation/CoreFoundation.h>],\n\t\t\t[CFBundleRef b = CFBundleGetMainBundle();],\n\t\t\ttcl_cv_lib_corefoundation=yes,\n\t\t\ttcl_cv_lib_corefoundation=no)\n\t\t    AS_IF([test \"$fat_32_64\" = yes], [\n\t\t\tfor v in CFLAGS CPPFLAGS LDFLAGS; do\n\t\t\t    eval $v'=\"$hold_'$v'\"'\n\t\t        done])\n\t\t    LIBS=$hold_libs])\n\t\tAS_IF([test $tcl_cv_lib_corefoundation = yes], [\n\t\t    LIBS=\"$LIBS -framework CoreFoundation\"\n\t\t    AC_DEFINE(HAVE_COREFOUNDATION, 1,\n\t\t\t[Do we have access to Darwin CoreFoundation.framework?])\n\t\t], [tcl_corefoundation=no])\n\t\tAS_IF([test \"$fat_32_64\" = yes -a $tcl_corefoundation = yes],[\n\t\t    AC_CACHE_CHECK([for 64-bit CoreFoundation],\n\t\t\t    tcl_cv_lib_corefoundation_64, [\n\t\t\tfor v in CFLAGS CPPFLAGS LDFLAGS; do\n\t\t\t    eval 'hold_'$v'=\"$'$v'\";'$v'=\"`echo \"$'$v' \"|sed -e \"s/-arch ppc / /g\" -e \"s/-arch i386 / /g\"`\"'\n\t\t\tdone\n\t\t\tAC_TRY_LINK([#include <CoreFoundation/CoreFoundation.h>],\n\t\t\t    [CFBundleRef b = CFBundleGetMainBundle();],\n\t\t\t    tcl_cv_lib_corefoundation_64=yes,\n\t\t\t    tcl_cv_lib_corefoundation_64=no)\n\t\t\tfor v in CFLAGS CPPFLAGS LDFLAGS; do\n\t\t\t    eval $v'=\"$hold_'$v'\"'\n\t\t\tdone])\n\t\t    AS_IF([test $tcl_cv_lib_corefoundation_64 = no], [\n\t\t\tAC_DEFINE(NO_COREFOUNDATION_64, 1,\n\t\t\t    [Is Darwin CoreFoundation unavailable for 64-bit?])\n                        LDFLAGS=\"$LDFLAGS -Wl,-no_arch_warnings\"\n\t\t    ])\n\t\t])\n\t    ])\n\t    ;;\n\tNEXTSTEP-*)\n\t    SHLIB_CFLAGS=\"\"\n\t    SHLIB_LD='${CC} -nostdlib -r'\n\t    SHLIB_LD_LIBS=\"\"\n\t    SHLIB_SUFFIX=\".so\"\n\t    DL_OBJS=\"tclLoadNext.o\"\n\t    DL_LIBS=\"\"\n\t    CC_SEARCH_FLAGS=\"\"\n\t    LD_SEARCH_FLAGS=\"\"\n\t    ;;\n\tOS/390-*)\n\t    SHLIB_LD_LIBS=\"\"\n\t    CFLAGS_OPTIMIZE=\"\"\t\t# Optimizer is buggy\n\t    AC_DEFINE(_OE_SOCKETS, 1,\t# needed in sys/socket.h\n\t\t[Should OS/390 do the right thing with sockets?])\n\t    ;;\n\tOSF1-1.0|OSF1-1.1|OSF1-1.2)\n\t    # OSF/1 1.[012] from OSF, and derivatives, including Paragon OSF/1\n\t    SHLIB_CFLAGS=\"\"\n\t    # Hack: make package name same as library name\n\t    SHLIB_LD='ld -R -export $@:'\n\t    SHLIB_LD_LIBS=\"\"\n\t    SHLIB_SUFFIX=\".so\"\n\t    DL_OBJS=\"tclLoadOSF.o\"\n\t    DL_LIBS=\"\"\n\t    CC_SEARCH_FLAGS=\"\"\n\t    LD_SEARCH_FLAGS=\"\"\n\t    ;;\n\tOSF1-1.*)\n\t    # OSF/1 1.3 from OSF using ELF, and derivatives, including AD2\n\t    SHLIB_CFLAGS=\"-fPIC\"\n\t    AS_IF([test \"$SHARED_BUILD\" = 1], [SHLIB_LD=\"ld -shared\"], [\n\t        SHLIB_LD=\"ld -non_shared\"\n\t    ])\n\t    SHLIB_LD_LIBS=\"\"\n\t    SHLIB_SUFFIX=\".so\"\n\t    DL_OBJS=\"tclLoadDl.o\"\n\t    DL_LIBS=\"\"\n\t    CC_SEARCH_FLAGS=\"\"\n\t    LD_SEARCH_FLAGS=\"\"\n\t    ;;\n\tOSF1-V*)\n\t    # Digital OSF/1\n\t    SHLIB_CFLAGS=\"\"\n\t    AS_IF([test \"$SHARED_BUILD\" = 1], [\n\t        SHLIB_LD='ld -shared -expect_unresolved \"*\"'\n\t    ], [\n\t        SHLIB_LD='ld -non_shared -expect_unresolved \"*\"'\n\t    ])\n\t    SHLIB_SUFFIX=\".so\"\n\t    DL_OBJS=\"tclLoadDl.o\"\n\t    DL_LIBS=\"\"\n\t    AS_IF([test $doRpath = yes], [\n\t\tCC_SEARCH_FLAGS='-Wl,-rpath,${LIB_RUNTIME_DIR}'\n\t\tLD_SEARCH_FLAGS='-rpath ${LIB_RUNTIME_DIR}'])\n\t    AS_IF([test \"$GCC\" = yes], [CFLAGS=\"$CFLAGS -mieee\"], [\n\t\tCFLAGS=\"$CFLAGS -DHAVE_TZSET -std1 -ieee\"])\n\t    # see pthread_intro(3) for pthread support on osf1, k.furukawa\n\t    AS_IF([test \"${TCL_THREADS}\" = 1], [\n\t\tCFLAGS=\"$CFLAGS -DHAVE_PTHREAD_ATTR_SETSTACKSIZE\"\n\t\tCFLAGS=\"$CFLAGS -DTCL_THREAD_STACK_MIN=PTHREAD_STACK_MIN*64\"\n\t\tLIBS=`echo $LIBS | sed s/-lpthreads//`\n\t\tAS_IF([test \"$GCC\" = yes], [\n\t\t    LIBS=\"$LIBS -lpthread -lmach -lexc\"\n\t\t], [\n\t\t    CFLAGS=\"$CFLAGS -pthread\"\n\t\t    LDFLAGS=\"$LDFLAGS -pthread\"\n\t\t])\n\t    ])\n\t    ;;\n\tQNX-6*)\n\t    # QNX RTP\n\t    # This may work for all QNX, but it was only reported for v6.\n\t    SHLIB_CFLAGS=\"-fPIC\"\n\t    SHLIB_LD=\"ld -Bshareable -x\"\n\t    SHLIB_LD_LIBS=\"\"\n\t    SHLIB_SUFFIX=\".so\"\n\t    DL_OBJS=\"tclLoadDl.o\"\n\t    # dlopen is in -lc on QNX\n\t    DL_LIBS=\"\"\n\t    CC_SEARCH_FLAGS=\"\"\n\t    LD_SEARCH_FLAGS=\"\"\n\t    ;;\n\tSCO_SV-3.2*)\n\t    # Note, dlopen is available only on SCO 3.2.5 and greater. However,\n\t    # this test works, since \"uname -s\" was non-standard in 3.2.4 and\n\t    # below.\n\t    AS_IF([test \"$GCC\" = yes], [\n\t    \tSHLIB_CFLAGS=\"-fPIC -melf\"\n\t    \tLDFLAGS=\"$LDFLAGS -melf -Wl,-Bexport\"\n\t    ], [\n\t    \tSHLIB_CFLAGS=\"-Kpic -belf\"\n\t    \tLDFLAGS=\"$LDFLAGS -belf -Wl,-Bexport\"\n\t    ])\n\t    SHLIB_LD=\"ld -G\"\n\t    SHLIB_LD_LIBS=\"\"\n\t    SHLIB_SUFFIX=\".so\"\n\t    DL_OBJS=\"tclLoadDl.o\"\n\t    DL_LIBS=\"\"\n\t    CC_SEARCH_FLAGS=\"\"\n\t    LD_SEARCH_FLAGS=\"\"\n\t    ;;\n\tSINIX*5.4*)\n\t    SHLIB_CFLAGS=\"-K PIC\"\n\t    SHLIB_LD='${CC} -G'\n\t    SHLIB_LD_LIBS=\"\"\n\t    SHLIB_SUFFIX=\".so\"\n\t    DL_OBJS=\"tclLoadDl.o\"\n\t    DL_LIBS=\"-ldl\"\n\t    CC_SEARCH_FLAGS=\"\"\n\t    LD_SEARCH_FLAGS=\"\"\n\t    ;;\n\tSunOS-4*)\n\t    SHLIB_CFLAGS=\"-PIC\"\n\t    SHLIB_LD=\"ld\"\n\t    SHLIB_LD_LIBS=\"\"\n\t    SHLIB_SUFFIX=\".so\"\n\t    DL_OBJS=\"tclLoadDl.o\"\n\t    DL_LIBS=\"-ldl\"\n\t    CC_SEARCH_FLAGS='-L${LIB_RUNTIME_DIR}'\n\t    LD_SEARCH_FLAGS=${CC_SEARCH_FLAGS}\n\n\t    # SunOS can't handle version numbers with dots in them in library\n\t    # specs, like -ltcl7.5, so use -ltcl75 instead.  Also, it\n\t    # requires an extra version number at the end of .so file names.\n\t    # So, the library has to have a name like libtcl75.so.1.0\n\n\t    SHARED_LIB_SUFFIX='${TCL_TRIM_DOTS}.so.${SHLIB_VERSION}'\n\t    UNSHARED_LIB_SUFFIX='${TCL_TRIM_DOTS}.a'\n\t    TCL_LIB_VERSIONS_OK=nodots\n\t    ;;\n\tSunOS-5.[[0-6]])\n\t    # Careful to not let 5.10+ fall into this case\n\n\t    # Note: If _REENTRANT isn't defined, then Solaris\n\t    # won't define thread-safe library routines.\n\n\t    AC_DEFINE(_REENTRANT, 1, [Do we want the reentrant OS API?])\n\t    AC_DEFINE(_POSIX_PTHREAD_SEMANTICS, 1,\n\t\t[Do we really want to follow the standard? Yes we do!])\n\n\t    SHLIB_CFLAGS=\"-KPIC\"\n\t    SHLIB_SUFFIX=\".so\"\n\t    DL_OBJS=\"tclLoadDl.o\"\n\t    DL_LIBS=\"-ldl\"\n\t    AS_IF([test \"$GCC\" = yes], [\n\t\tSHLIB_LD='${CC} -shared'\n\t\tCC_SEARCH_FLAGS='-Wl,-R,${LIB_RUNTIME_DIR}'\n\t\tLD_SEARCH_FLAGS=${CC_SEARCH_FLAGS}\n\t    ], [\n\t\tSHLIB_LD=\"/usr/ccs/bin/ld -G -z text\"\n\t\tCC_SEARCH_FLAGS='-R ${LIB_RUNTIME_DIR}'\n\t\tLD_SEARCH_FLAGS=${CC_SEARCH_FLAGS}\n\t    ])\n\t    ;;\n\tSunOS-5*)\n\t    # Note: If _REENTRANT isn't defined, then Solaris\n\t    # won't define thread-safe library routines.\n\n\t    AC_DEFINE(_REENTRANT, 1, [Do we want the reentrant OS API?])\n\t    AC_DEFINE(_POSIX_PTHREAD_SEMANTICS, 1,\n\t\t[Do we really want to follow the standard? Yes we do!])\n\n\t    SHLIB_CFLAGS=\"-KPIC\"\n\n\t    # Check to enable 64-bit flags for compiler/linker\n\t    AS_IF([test \"$do64bit\" = yes], [\n\t\tarch=`isainfo`\n\t\tAS_IF([test \"$arch\" = \"sparcv9 sparc\"], [\n\t\t    AS_IF([test \"$GCC\" = yes], [\n\t\t\tAS_IF([test \"`${CC} -dumpversion | awk -F. '{print [$]1}'`\" -lt 3], [\n\t\t\t    AC_MSG_WARN([64bit mode not supported with GCC < 3.2 on $system])\n\t\t\t], [\n\t\t\t    do64bit_ok=yes\n\t\t\t    CFLAGS=\"$CFLAGS -m64 -mcpu=v9\"\n\t\t\t    LDFLAGS=\"$LDFLAGS -m64 -mcpu=v9\"\n\t\t\t    SHLIB_CFLAGS=\"-fPIC\"\n\t\t\t])\n\t\t    ], [\n\t\t\tdo64bit_ok=yes\n\t\t\tAS_IF([test \"$do64bitVIS\" = yes], [\n\t\t\t    CFLAGS=\"$CFLAGS -xarch=v9a\"\n\t\t\t    LDFLAGS_ARCH=\"-xarch=v9a\"\n\t\t\t], [\n\t\t\t    CFLAGS=\"$CFLAGS -xarch=v9\"\n\t\t\t    LDFLAGS_ARCH=\"-xarch=v9\"\n\t\t\t])\n\t\t\t# Solaris 64 uses this as well\n\t\t\t#LD_LIBRARY_PATH_VAR=\"LD_LIBRARY_PATH_64\"\n\t\t    ])\n\t\t], [AS_IF([test \"$arch\" = \"amd64 i386\"], [\n\t\t    AS_IF([test \"$GCC\" = yes], [\n\t\t\tcase $system in\n\t\t\t    SunOS-5.1[[1-9]]*|SunOS-5.[[2-9]][[0-9]]*)\n\t\t\t\tdo64bit_ok=yes\n\t\t\t\tCFLAGS=\"$CFLAGS -m64\"\n\t\t\t\tLDFLAGS=\"$LDFLAGS -m64\";;\n\t\t\t    *)\n\t\t\t\tAC_MSG_WARN([64bit mode not supported with GCC on $system]);;\n\t\t\tesac\n\t\t    ], [\n\t\t\tdo64bit_ok=yes\n\t\t\tcase $system in\n\t\t\t    SunOS-5.1[[1-9]]*|SunOS-5.[[2-9]][[0-9]]*)\n\t\t\t\tCFLAGS=\"$CFLAGS -m64\"\n\t\t\t\tLDFLAGS=\"$LDFLAGS -m64\";;\n\t\t\t    *)\n\t\t\t\tCFLAGS=\"$CFLAGS -xarch=amd64\"\n\t\t\t\tLDFLAGS=\"$LDFLAGS -xarch=amd64\";;\n\t\t\tesac\n\t\t    ])\n\t\t], [AC_MSG_WARN([64bit mode not supported for $arch])])])\n\t    ])\n\n\t    #--------------------------------------------------------------------\n\t    # On Solaris 5.x i386 with the sunpro compiler we need to link\n\t    # with sunmath to get floating point rounding control\n\t    #--------------------------------------------------------------------\n\t    AS_IF([test \"$GCC\" = yes],[use_sunmath=no],[\n\t\tarch=`isainfo`\n\t\tAC_MSG_CHECKING([whether to use -lsunmath for fp rounding control])\n\t\tAS_IF([test \"$arch\" = \"amd64 i386\"], [\n\t\t\tAC_MSG_RESULT([yes])\n\t\t\tMATH_LIBS=\"-lsunmath $MATH_LIBS\"\n\t\t\tAC_CHECK_HEADER(sunmath.h)\n\t\t\tuse_sunmath=yes\n\t\t\t], [\n\t\t\tAC_MSG_RESULT([no])\n\t\t\tuse_sunmath=no\n\t\t])\n\t    ])\n\t    SHLIB_SUFFIX=\".so\"\n\t    DL_OBJS=\"tclLoadDl.o\"\n\t    DL_LIBS=\"-ldl\"\n\t    AS_IF([test \"$GCC\" = yes], [\n\t\tSHLIB_LD='${CC} -shared'\n\t\tCC_SEARCH_FLAGS='-Wl,-R,${LIB_RUNTIME_DIR}'\n\t\tLD_SEARCH_FLAGS=${CC_SEARCH_FLAGS}\n\t\tAS_IF([test \"$do64bit_ok\" = yes], [\n\t\t    AS_IF([test \"$arch\" = \"sparcv9 sparc\"], [\n\t\t\t# We need to specify -static-libgcc or we need to\n\t\t\t# add the path to the sparv9 libgcc.\n\t\t\tSHLIB_LD=\"$SHLIB_LD -m64 -mcpu=v9 -static-libgcc\"\n\t\t\t# for finding sparcv9 libgcc, get the regular libgcc\n\t\t\t# path, remove so name and append 'sparcv9'\n\t\t\t#v9gcclibdir=\"`gcc -print-file-name=libgcc_s.so` | ...\"\n\t\t\t#CC_SEARCH_FLAGS=\"${CC_SEARCH_FLAGS},-R,$v9gcclibdir\"\n\t\t    ], [AS_IF([test \"$arch\" = \"amd64 i386\"], [\n\t\t\tSHLIB_LD=\"$SHLIB_LD -m64 -static-libgcc\"\n\t\t    ])])\n\t\t])\n\t    ], [\n\t\tAS_IF([test \"$use_sunmath\" = yes], [textmode=textoff],[textmode=text])\n\t\tcase $system in\n\t\t    SunOS-5.[[1-9]][[0-9]]*)\n\t\t\tSHLIB_LD=\"\\${CC} -G -z $textmode \\${LDFLAGS}\";;\n\t\t    *)\n\t\t\tSHLIB_LD=\"/usr/ccs/bin/ld -G -z $textmode\";;\n\t\tesac\n\t\tCC_SEARCH_FLAGS='-Wl,-R,${LIB_RUNTIME_DIR}'\n\t\tLD_SEARCH_FLAGS='-R ${LIB_RUNTIME_DIR}'\n\t    ])\n\t    ;;\n\tUNIX_SV* | UnixWare-5*)\n\t    SHLIB_CFLAGS=\"-KPIC\"\n\t    SHLIB_LD='${CC} -G'\n\t    SHLIB_LD_LIBS=\"\"\n\t    SHLIB_SUFFIX=\".so\"\n\t    DL_OBJS=\"tclLoadDl.o\"\n\t    DL_LIBS=\"-ldl\"\n\t    # Some UNIX_SV* systems (unixware 1.1.2 for example) have linkers\n\t    # that don't grok the -Bexport option.  Test that it does.\n\t    AC_CACHE_CHECK([for ld accepts -Bexport flag], tcl_cv_ld_Bexport, [\n\t\thold_ldflags=$LDFLAGS\n\t\tLDFLAGS=\"$LDFLAGS -Wl,-Bexport\"\n\t\tAC_TRY_LINK(, [int i;], tcl_cv_ld_Bexport=yes, tcl_cv_ld_Bexport=no)\n\t        LDFLAGS=$hold_ldflags])\n\t    AS_IF([test $tcl_cv_ld_Bexport = yes], [\n\t\tLDFLAGS=\"$LDFLAGS -Wl,-Bexport\"\n\t    ])\n\t    CC_SEARCH_FLAGS=\"\"\n\t    LD_SEARCH_FLAGS=\"\"\n\t    ;;\n    esac\n\n    AS_IF([test \"$do64bit\" = yes -a \"$do64bit_ok\" = no], [\n\tAC_MSG_WARN([64bit support being disabled -- don't know magic for this platform])\n    ])\n\n    AS_IF([test \"$do64bit\" = yes -a \"$do64bit_ok\" = yes], [\n\tAC_DEFINE(TCL_CFG_DO64BIT, 1, [Is this a 64-bit build?])\n    ])\n\ndnl # Add any CPPFLAGS set in the environment to our CFLAGS, but delay doing so\ndnl # until the end of configure, as configure's compile and link tests use\ndnl # both CPPFLAGS and CFLAGS (unlike our compile and link) but configure's\ndnl # preprocessing tests use only CPPFLAGS.\n    AC_CONFIG_COMMANDS_PRE([CFLAGS=\"${CFLAGS} ${CPPFLAGS}\"; CPPFLAGS=\"\"])\n\n    # Step 4: disable dynamic loading if requested via a command-line switch.\n\n    AC_ARG_ENABLE(load,\n\tAC_HELP_STRING([--enable-load],\n\t    [allow dynamic loading and \"load\" command (default: on)]),\n\t[tcl_ok=$enableval], [tcl_ok=yes])\n    AS_IF([test \"$tcl_ok\" = no], [DL_OBJS=\"\"])\n\n    AS_IF([test \"x$DL_OBJS\" != x], [BUILD_DLTEST=\"\\$(DLTEST_TARGETS)\"], [\n\tAC_MSG_WARN([Can't figure out how to do dynamic loading or shared libraries on this system.])\n\tSHLIB_CFLAGS=\"\"\n\tSHLIB_LD=\"\"\n\tSHLIB_SUFFIX=\"\"\n\tDL_OBJS=\"tclLoadNone.o\"\n\tDL_LIBS=\"\"\n\tLDFLAGS=\"$LDFLAGS_ORIG\"\n\tCC_SEARCH_FLAGS=\"\"\n\tLD_SEARCH_FLAGS=\"\"\n\tBUILD_DLTEST=\"\"\n    ])\n    LDFLAGS=\"$LDFLAGS $LDFLAGS_ARCH\"\n\n    # If we're running gcc, then change the C flags for compiling shared\n    # libraries to the right flags for gcc, instead of those for the\n    # standard manufacturer compiler.\n\n    AS_IF([test \"$DL_OBJS\" != \"tclLoadNone.o\" -a \"$GCC\" = yes], [\n\tcase $system in\n\t    AIX-*) ;;\n\t    BSD/OS*) ;;\n\t    CYGWIN_*|MINGW32_*) ;;\n\t    IRIX*) ;;\n\t    NetBSD-*|FreeBSD-*|OpenBSD-*) ;;\n\t    Darwin-*) ;;\n\t    SCO_SV-3.2*) ;;\n\t    *) SHLIB_CFLAGS=\"-fPIC\" ;;\n\tesac])\n\n    AS_IF([test \"$SHARED_LIB_SUFFIX\" = \"\"], [\n\tSHARED_LIB_SUFFIX='${VERSION}${SHLIB_SUFFIX}'])\n    AS_IF([test \"$UNSHARED_LIB_SUFFIX\" = \"\"], [\n\tUNSHARED_LIB_SUFFIX='${VERSION}.a'])\n    DLL_INSTALL_DIR=\"\\$(LIB_INSTALL_DIR)\"\n\n    AS_IF([test \"${SHARED_BUILD}\" = 1 -a \"${SHLIB_SUFFIX}\" != \"\"], [\n        LIB_SUFFIX=${SHARED_LIB_SUFFIX}\n        MAKE_LIB='${SHLIB_LD} -o [$]@ ${OBJS} ${SHLIB_LD_LIBS} ${TCL_SHLIB_LD_EXTRAS} ${TK_SHLIB_LD_EXTRAS} ${LD_SEARCH_FLAGS}'\n        AS_IF([test \"${SHLIB_SUFFIX}\" = \".dll\"], [\n            INSTALL_LIB='$(INSTALL_LIBRARY) $(LIB_FILE) \"$(BIN_INSTALL_DIR)/$(LIB_FILE)\";if test -f $(LIB_FILE).a; then $(INSTALL_DATA) $(LIB_FILE).a \"$(LIB_INSTALL_DIR)\"; fi;'\n            DLL_INSTALL_DIR=\"\\$(BIN_INSTALL_DIR)\"\n        ], [\n            INSTALL_LIB='$(INSTALL_LIBRARY) $(LIB_FILE) \"$(LIB_INSTALL_DIR)/$(LIB_FILE)\"'\n        ])\n    ], [\n        LIB_SUFFIX=${UNSHARED_LIB_SUFFIX}\n\n        AS_IF([test \"$RANLIB\" = \"\"], [\n            MAKE_LIB='$(STLIB_LD) [$]@ ${OBJS}'\n            INSTALL_LIB='$(INSTALL_LIBRARY) $(LIB_FILE) \"$(LIB_INSTALL_DIR)/$(LIB_FILE)\"'\n        ], [\n            MAKE_LIB='${STLIB_LD} [$]@ ${OBJS} ; ${RANLIB} [$]@'\n            INSTALL_LIB='$(INSTALL_LIBRARY) $(LIB_FILE) \"$(LIB_INSTALL_DIR)/$(LIB_FILE)\" ; (cd \"$(LIB_INSTALL_DIR)\" ; $(RANLIB) $(LIB_FILE))'\n        ])\n    ])\n\n    # Stub lib does not depend on shared/static configuration\n    AS_IF([test \"$RANLIB\" = \"\"], [\n        MAKE_STUB_LIB='${STLIB_LD} [$]@ ${STUB_LIB_OBJS}'\n        INSTALL_STUB_LIB='$(INSTALL_LIBRARY) $(STUB_LIB_FILE) \"$(LIB_INSTALL_DIR)/$(STUB_LIB_FILE)\"'\n    ], [\n        MAKE_STUB_LIB='${STLIB_LD} [$]@ ${STUB_LIB_OBJS} ; ${RANLIB} [$]@'\n        INSTALL_STUB_LIB='$(INSTALL_LIBRARY) $(STUB_LIB_FILE) \"$(LIB_INSTALL_DIR)/$(STUB_LIB_FILE)\" ; (cd \"$(LIB_INSTALL_DIR)\" ; $(RANLIB) $(STUB_LIB_FILE))'\n    ])\n\n    # Define TCL_LIBS now that we know what DL_LIBS is.\n    # The trick here is that we don't want to change the value of TCL_LIBS if\n    # it is already set when tclConfig.sh had been loaded by Tk.\n    AS_IF([test \"x${TCL_LIBS}\" = x], [\n        TCL_LIBS=\"${DL_LIBS} ${LIBS} ${MATH_LIBS}\"])\n    AC_SUBST(TCL_LIBS)\n\n\t# See if the compiler supports casting to a union type.\n\t# This is used to stop gcc from printing a compiler\n\t# warning when initializing a union member.\n\n\tAC_CACHE_CHECK(for cast to union support,\n\t    tcl_cv_cast_to_union,\n\t    AC_TRY_COMPILE([],\n\t    [\n\t\t  union foo { int i; double d; };\n\t\t  union foo f = (union foo) (int) 0;\n\t    ],\n\t    tcl_cv_cast_to_union=yes,\n\t    tcl_cv_cast_to_union=no)\n\t)\n\tif test \"$tcl_cv_cast_to_union\" = \"yes\"; then\n\t    AC_DEFINE(HAVE_CAST_TO_UNION, 1,\n\t\t    [Defined when compiler supports casting to union type.])\n\tfi\n\n    # FIXME: This subst was left in only because the TCL_DL_LIBS\n    # entry in tclConfig.sh uses it. It is not clear why someone\n    # would use TCL_DL_LIBS instead of TCL_LIBS.\n    AC_SUBST(DL_LIBS)\n\n    AC_SUBST(DL_OBJS)\n    AC_SUBST(PLAT_OBJS)\n    AC_SUBST(PLAT_SRCS)\n    AC_SUBST(LDAIX_SRC)\n    AC_SUBST(CFLAGS)\n    AC_SUBST(CFLAGS_DEBUG)\n    AC_SUBST(CFLAGS_OPTIMIZE)\n    AC_SUBST(CFLAGS_WARNING)\n\n    AC_SUBST(LDFLAGS)\n    AC_SUBST(LDFLAGS_DEBUG)\n    AC_SUBST(LDFLAGS_OPTIMIZE)\n    AC_SUBST(CC_SEARCH_FLAGS)\n    AC_SUBST(LD_SEARCH_FLAGS)\n\n    AC_SUBST(STLIB_LD)\n    AC_SUBST(SHLIB_LD)\n    AC_SUBST(TCL_SHLIB_LD_EXTRAS)\n    AC_SUBST(TK_SHLIB_LD_EXTRAS)\n    AC_SUBST(SHLIB_LD_LIBS)\n    AC_SUBST(SHLIB_CFLAGS)\n    AC_SUBST(SHLIB_SUFFIX)\n    AC_DEFINE_UNQUOTED(TCL_SHLIB_EXT,\"${SHLIB_SUFFIX}\",\n\t[What is the default extension for shared libraries?])\n\n    AC_SUBST(MAKE_LIB)\n    AC_SUBST(MAKE_STUB_LIB)\n    AC_SUBST(INSTALL_LIB)\n    AC_SUBST(DLL_INSTALL_DIR)\n    AC_SUBST(INSTALL_STUB_LIB)\n    AC_SUBST(RANLIB)\n])\n\n#--------------------------------------------------------------------\n# SC_SERIAL_PORT\n#\n#\tDetermine which interface to use to talk to the serial port.\n#\tNote that #include lines must begin in leftmost column for\n#\tsome compilers to recognize them as preprocessor directives,\n#\tand some build environments have stdin not pointing at a\n#\tpseudo-terminal (usually /dev/null instead.)\n#\n# Arguments:\n#\tnone\n#\n# Results:\n#\n#\tDefines only one of the following vars:\n#\t\tHAVE_SYS_MODEM_H\n#\t\tUSE_TERMIOS\n#\t\tUSE_TERMIO\n#\t\tUSE_SGTTY\n#\n#--------------------------------------------------------------------\n\nAC_DEFUN([SC_SERIAL_PORT], [\n    AC_CHECK_HEADERS(sys/modem.h)\n    AC_CACHE_CHECK([termios vs. termio vs. sgtty], tcl_cv_api_serial, [\n    AC_TRY_RUN([\n#include <termios.h>\n\nint main() {\n    struct termios t;\n    if (tcgetattr(0, &t) == 0) {\n\tcfsetospeed(&t, 0);\n\tt.c_cflag |= PARENB | PARODD | CSIZE | CSTOPB;\n\treturn 0;\n    }\n    return 1;\n}], tcl_cv_api_serial=termios, tcl_cv_api_serial=no, tcl_cv_api_serial=no)\n    if test $tcl_cv_api_serial = no ; then\n\tAC_TRY_RUN([\n#include <termio.h>\n\nint main() {\n    struct termio t;\n    if (ioctl(0, TCGETA, &t) == 0) {\n\tt.c_cflag |= CBAUD | PARENB | PARODD | CSIZE | CSTOPB;\n\treturn 0;\n    }\n    return 1;\n}], tcl_cv_api_serial=termio, tcl_cv_api_serial=no, tcl_cv_api_serial=no)\n    fi\n    if test $tcl_cv_api_serial = no ; then\n\tAC_TRY_RUN([\n#include <sgtty.h>\n\nint main() {\n    struct sgttyb t;\n    if (ioctl(0, TIOCGETP, &t) == 0) {\n\tt.sg_ospeed = 0;\n\tt.sg_flags |= ODDP | EVENP | RAW;\n\treturn 0;\n    }\n    return 1;\n}], tcl_cv_api_serial=sgtty, tcl_cv_api_serial=no, tcl_cv_api_serial=no)\n    fi\n    if test $tcl_cv_api_serial = no ; then\n\tAC_TRY_RUN([\n#include <termios.h>\n#include <errno.h>\n\nint main() {\n    struct termios t;\n    if (tcgetattr(0, &t) == 0\n\t|| errno == ENOTTY || errno == ENXIO || errno == EINVAL) {\n\tcfsetospeed(&t, 0);\n\tt.c_cflag |= PARENB | PARODD | CSIZE | CSTOPB;\n\treturn 0;\n    }\n    return 1;\n}], tcl_cv_api_serial=termios, tcl_cv_api_serial=no, tcl_cv_api_serial=no)\n    fi\n    if test $tcl_cv_api_serial = no; then\n\tAC_TRY_RUN([\n#include <termio.h>\n#include <errno.h>\n\nint main() {\n    struct termio t;\n    if (ioctl(0, TCGETA, &t) == 0\n\t|| errno == ENOTTY || errno == ENXIO || errno == EINVAL) {\n\tt.c_cflag |= CBAUD | PARENB | PARODD | CSIZE | CSTOPB;\n\treturn 0;\n    }\n    return 1;\n    }], tcl_cv_api_serial=termio, tcl_cv_api_serial=no, tcl_cv_api_serial=no)\n    fi\n    if test $tcl_cv_api_serial = no; then\n\tAC_TRY_RUN([\n#include <sgtty.h>\n#include <errno.h>\n\nint main() {\n    struct sgttyb t;\n    if (ioctl(0, TIOCGETP, &t) == 0\n\t|| errno == ENOTTY || errno == ENXIO || errno == EINVAL) {\n\tt.sg_ospeed = 0;\n\tt.sg_flags |= ODDP | EVENP | RAW;\n\treturn 0;\n    }\n    return 1;\n}], tcl_cv_api_serial=sgtty, tcl_cv_api_serial=none, tcl_cv_api_serial=none)\n    fi])\n    case $tcl_cv_api_serial in\n\ttermios) AC_DEFINE(USE_TERMIOS, 1, [Use the termios API for serial lines]);;\n\ttermio)  AC_DEFINE(USE_TERMIO, 1, [Use the termio API for serial lines]);;\n\tsgtty)   AC_DEFINE(USE_SGTTY, 1, [Use the sgtty API for serial lines]);;\n    esac\n])\n\n#--------------------------------------------------------------------\n# SC_MISSING_POSIX_HEADERS\n#\n#\tSupply substitutes for missing POSIX header files.  Special\n#\tnotes:\n#\t    - stdlib.h doesn't define strtol, strtoul, or\n#\t      strtod insome versions of SunOS\n#\t    - some versions of string.h don't declare procedures such\n#\t      as strstr\n#\n# Arguments:\n#\tnone\n#\n# Results:\n#\n#\tDefines some of the following vars:\n#\t\tNO_DIRENT_H\n#\t\tNO_VALUES_H\n#\t\tHAVE_LIMITS_H or NO_LIMITS_H\n#\t\tNO_STDLIB_H\n#\t\tNO_STRING_H\n#\t\tNO_SYS_WAIT_H\n#\t\tNO_DLFCN_H\n#\t\tHAVE_SYS_PARAM_H\n#\n#\t\tHAVE_STRING_H ?\n#\n#--------------------------------------------------------------------\n\nAC_DEFUN([SC_MISSING_POSIX_HEADERS], [\n    AC_CACHE_CHECK([dirent.h], tcl_cv_dirent_h, [\n    AC_TRY_LINK([#include <sys/types.h>\n#include <dirent.h>], [\n#ifndef _POSIX_SOURCE\n#   ifdef __Lynx__\n\t/*\n\t * Generate compilation error to make the test fail:  Lynx headers\n\t * are only valid if really in the POSIX environment.\n\t */\n\n\tmissing_procedure();\n#   endif\n#endif\nDIR *d;\nstruct dirent *entryPtr;\nchar *p;\nd = opendir(\"foobar\");\nentryPtr = readdir(d);\np = entryPtr->d_name;\nclosedir(d);\n], tcl_cv_dirent_h=yes, tcl_cv_dirent_h=no)])\n\n    if test $tcl_cv_dirent_h = no; then\n\tAC_DEFINE(NO_DIRENT_H, 1, [Do we have <dirent.h>?])\n    fi\n\n    AC_CHECK_HEADER(float.h, , [AC_DEFINE(NO_FLOAT_H, 1, [Do we have <float.h>?])])\n    AC_CHECK_HEADER(values.h, , [AC_DEFINE(NO_VALUES_H, 1, [Do we have <values.h>?])])\n    AC_CHECK_HEADER(limits.h,\n\t[AC_DEFINE(HAVE_LIMITS_H, 1, [Do we have <limits.h>?])],\n\t[AC_DEFINE(NO_LIMITS_H, 1, [Do we have <limits.h>?])])\n    AC_CHECK_HEADER(stdlib.h, tcl_ok=1, tcl_ok=0)\n    AC_EGREP_HEADER(strtol, stdlib.h, , tcl_ok=0)\n    AC_EGREP_HEADER(strtoul, stdlib.h, , tcl_ok=0)\n    AC_EGREP_HEADER(strtod, stdlib.h, , tcl_ok=0)\n    if test $tcl_ok = 0; then\n\tAC_DEFINE(NO_STDLIB_H, 1, [Do we have <stdlib.h>?])\n    fi\n    AC_CHECK_HEADER(string.h, tcl_ok=1, tcl_ok=0)\n    AC_EGREP_HEADER(strstr, string.h, , tcl_ok=0)\n    AC_EGREP_HEADER(strerror, string.h, , tcl_ok=0)\n\n    # See also memmove check below for a place where NO_STRING_H can be\n    # set and why.\n\n    if test $tcl_ok = 0; then\n\tAC_DEFINE(NO_STRING_H, 1, [Do we have <string.h>?])\n    fi\n\n    AC_CHECK_HEADER(sys/wait.h, , [AC_DEFINE(NO_SYS_WAIT_H, 1, [Do we have <sys/wait.h>?])])\n    AC_CHECK_HEADER(dlfcn.h, , [AC_DEFINE(NO_DLFCN_H, 1, [Do we have <dlfcn.h>?])])\n\n    # OS/390 lacks sys/param.h (and doesn't need it, by chance).\n    AC_HAVE_HEADERS(sys/param.h)\n])\n\n#--------------------------------------------------------------------\n# SC_PATH_X\n#\n#\tLocate the X11 header files and the X11 library archive.  Try\n#\tthe ac_path_x macro first, but if it doesn't find the X stuff\n#\t(e.g. because there's no xmkmf program) then check through\n#\ta list of possible directories.  Under some conditions the\n#\tautoconf macro will return an include directory that contains\n#\tno include files, so double-check its result just to be safe.\n#\n# Arguments:\n#\tnone\n#\n# Results:\n#\n#\tSets the following vars:\n#\t\tXINCLUDES\n#\t\tXLIBSW\n#\n#--------------------------------------------------------------------\n\nAC_DEFUN([SC_PATH_X], [\n    AC_PATH_X\n    not_really_there=\"\"\n    if test \"$no_x\" = \"\"; then\n\tif test \"$x_includes\" = \"\"; then\n\t    AC_TRY_CPP([#include <X11/Xlib.h>], , not_really_there=\"yes\")\n\telse\n\t    if test ! -r $x_includes/X11/Xlib.h; then\n\t\tnot_really_there=\"yes\"\n\t    fi\n\tfi\n    fi\n    if test \"$no_x\" = \"yes\" -o \"$not_really_there\" = \"yes\"; then\n\tAC_MSG_CHECKING([for X11 header files])\n\tfound_xincludes=\"no\"\n\tAC_TRY_CPP([#include <X11/Xlib.h>], found_xincludes=\"yes\", found_xincludes=\"no\")\n\tif test \"$found_xincludes\" = \"no\"; then\n\t    dirs=\"/usr/unsupported/include /usr/local/include /usr/X386/include /usr/X11R6/include /usr/X11R5/include /usr/include/X11R5 /usr/include/X11R4 /usr/openwin/include /usr/X11/include /usr/sww/include\"\n\t    for i in $dirs ; do\n\t\tif test -r $i/X11/Xlib.h; then\n\t\t    AC_MSG_RESULT([$i])\n\t\t    XINCLUDES=\" -I$i\"\n\t\t    found_xincludes=\"yes\"\n\t\t    break\n\t\tfi\n\t    done\n\tfi\n    else\n\tif test \"$x_includes\" != \"\"; then\n\t    XINCLUDES=\"-I$x_includes\"\n\t    found_xincludes=\"yes\"\n\tfi\n    fi\n    if test \"$found_xincludes\" = \"no\"; then\n\tAC_MSG_RESULT([couldn't find any!])\n    fi\n\n    if test \"$no_x\" = yes; then\n\tAC_MSG_CHECKING([for X11 libraries])\n\tXLIBSW=nope\n\tdirs=\"/usr/unsupported/lib /usr/local/lib /usr/X386/lib /usr/X11R6/lib /usr/X11R5/lib /usr/lib/X11R5 /usr/lib/X11R4 /usr/openwin/lib /usr/X11/lib /usr/sww/X11/lib\"\n\tfor i in $dirs ; do\n\t    if test -r $i/libX11.a -o -r $i/libX11.so -o -r $i/libX11.sl -o -r $i/libX11.dylib; then\n\t\tAC_MSG_RESULT([$i])\n\t\tXLIBSW=\"-L$i -lX11\"\n\t\tx_libraries=\"$i\"\n\t\tbreak\n\t    fi\n\tdone\n    else\n\tif test \"$x_libraries\" = \"\"; then\n\t    XLIBSW=-lX11\n\telse\n\t    XLIBSW=\"-L$x_libraries -lX11\"\n\tfi\n    fi\n    if test \"$XLIBSW\" = nope ; then\n\tAC_CHECK_LIB(Xwindow, XCreateWindow, XLIBSW=-lXwindow)\n    fi\n    if test \"$XLIBSW\" = nope ; then\n\tAC_MSG_RESULT([could not find any!  Using -lX11.])\n\tXLIBSW=-lX11\n    fi\n])\n\n#--------------------------------------------------------------------\n# SC_BLOCKING_STYLE\n#\n#\tThe statements below check for systems where POSIX-style\n#\tnon-blocking I/O (O_NONBLOCK) doesn't work or is unimplemented.\n#\tOn these systems (mostly older ones), use the old BSD-style\n#\tFIONBIO approach instead.\n#\n# Arguments:\n#\tnone\n#\n# Results:\n#\n#\tDefines some of the following vars:\n#\t\tHAVE_SYS_IOCTL_H\n#\t\tHAVE_SYS_FILIO_H\n#\t\tUSE_FIONBIO\n#\t\tO_NONBLOCK\n#\n#--------------------------------------------------------------------\n\nAC_DEFUN([SC_BLOCKING_STYLE], [\n    AC_CHECK_HEADERS(sys/ioctl.h)\n    AC_CHECK_HEADERS(sys/filio.h)\n    SC_CONFIG_SYSTEM\n    AC_MSG_CHECKING([FIONBIO vs. O_NONBLOCK for nonblocking I/O])\n    case $system in\n\t# There used to be code here to use FIONBIO under AIX.  However, it\n\t# was reported that FIONBIO doesn't work under AIX 3.2.5.  Since\n\t# using O_NONBLOCK seems fine under AIX 4.*, I removed the FIONBIO\n\t# code (JO, 5/31/97).\n\n\tOSF*)\n\t    AC_DEFINE(USE_FIONBIO, 1, [Should we use FIONBIO?])\n\t    AC_MSG_RESULT([FIONBIO])\n\t    ;;\n\tSunOS-4*)\n\t    AC_DEFINE(USE_FIONBIO, 1, [Should we use FIONBIO?])\n\t    AC_MSG_RESULT([FIONBIO])\n\t    ;;\n\t*)\n\t    AC_MSG_RESULT([O_NONBLOCK])\n\t    ;;\n    esac\n])\n\n#--------------------------------------------------------------------\n# SC_TIME_HANLDER\n#\n#\tChecks how the system deals with time.h, what time structures\n#\tare used on the system, and what fields the structures have.\n#\n# Arguments:\n#\tnone\n#\n# Results:\n#\n#\tDefines some of the following vars:\n#\t\tUSE_DELTA_FOR_TZ\n#\t\tHAVE_TM_GMTOFF\n#\t\tHAVE_TM_TZADJ\n#\t\tHAVE_TIMEZONE_VAR\n#\n#--------------------------------------------------------------------\n\nAC_DEFUN([SC_TIME_HANDLER], [\n    AC_CHECK_HEADERS(sys/time.h)\n    AC_HEADER_TIME\n\n    AC_CHECK_FUNCS(gmtime_r localtime_r mktime)\n\n    AC_CACHE_CHECK([tm_tzadj in struct tm], tcl_cv_member_tm_tzadj, [\n\tAC_TRY_COMPILE([#include <time.h>], [struct tm tm; tm.tm_tzadj;],\n\t    tcl_cv_member_tm_tzadj=yes, tcl_cv_member_tm_tzadj=no)])\n    if test $tcl_cv_member_tm_tzadj = yes ; then\n\tAC_DEFINE(HAVE_TM_TZADJ, 1, [Should we use the tm_tzadj field of struct tm?])\n    fi\n\n    AC_CACHE_CHECK([tm_gmtoff in struct tm], tcl_cv_member_tm_gmtoff, [\n\tAC_TRY_COMPILE([#include <time.h>], [struct tm tm; tm.tm_gmtoff;],\n\t    tcl_cv_member_tm_gmtoff=yes, tcl_cv_member_tm_gmtoff=no)])\n    if test $tcl_cv_member_tm_gmtoff = yes ; then\n\tAC_DEFINE(HAVE_TM_GMTOFF, 1, [Should we use the tm_gmtoff field of struct tm?])\n    fi\n\n    #\n    # Its important to include time.h in this check, as some systems\n    # (like convex) have timezone functions, etc.\n    #\n    AC_CACHE_CHECK([long timezone variable], tcl_cv_timezone_long, [\n\tAC_TRY_COMPILE([#include <time.h>],\n\t    [extern long timezone;\n\t    timezone += 1;\n\t    exit (0);],\n\t    tcl_cv_timezone_long=yes, tcl_cv_timezone_long=no)])\n    if test $tcl_cv_timezone_long = yes ; then\n\tAC_DEFINE(HAVE_TIMEZONE_VAR, 1, [Should we use the global timezone variable?])\n    else\n\t#\n\t# On some systems (eg IRIX 6.2), timezone is a time_t and not a long.\n\t#\n\tAC_CACHE_CHECK([time_t timezone variable], tcl_cv_timezone_time, [\n\t    AC_TRY_COMPILE([#include <time.h>],\n\t\t[extern time_t timezone;\n\t\ttimezone += 1;\n\t\texit (0);],\n\t\ttcl_cv_timezone_time=yes, tcl_cv_timezone_time=no)])\n\tif test $tcl_cv_timezone_time = yes ; then\n\t    AC_DEFINE(HAVE_TIMEZONE_VAR, 1, [Should we use the global timezone variable?])\n\tfi\n    fi\n])\n\n#--------------------------------------------------------------------\n# SC_BUGGY_STRTOD\n#\n#\tUnder Solaris 2.4, strtod returns the wrong value for the\n#\tterminating character under some conditions.  Check for this\n#\tand if the problem exists use a substitute procedure\n#\t\"fixstrtod\" (provided by Tcl) that corrects the error.\n#\tAlso, on Compaq's Tru64 Unix 5.0,\n#\tstrtod(\" \") returns 0.0 instead of a failure to convert.\n#\n# Arguments:\n#\tnone\n#\n# Results:\n#\n#\tMight defines some of the following vars:\n#\t\tstrtod (=fixstrtod)\n#\n#--------------------------------------------------------------------\n\nAC_DEFUN([SC_BUGGY_STRTOD], [\n    AC_CHECK_FUNC(strtod, tcl_strtod=1, tcl_strtod=0)\n    if test \"$tcl_strtod\" = 1; then\n\tAC_CACHE_CHECK([for Solaris2.4/Tru64 strtod bugs], tcl_cv_strtod_buggy,[\n\t    AC_TRY_RUN([\n\t\textern double strtod();\n\t\tint main() {\n\t\t    char *infString=\"Inf\", *nanString=\"NaN\", *spaceString=\" \";\n\t\t    char *term;\n\t\t    double value;\n\t\t    value = strtod(infString, &term);\n\t\t    if ((term != infString) && (term[-1] == 0)) {\n\t\t\texit(1);\n\t\t    }\n\t\t    value = strtod(nanString, &term);\n\t\t    if ((term != nanString) && (term[-1] == 0)) {\n\t\t\texit(1);\n\t\t    }\n\t\t    value = strtod(spaceString, &term);\n\t\t    if (term == (spaceString+1)) {\n\t\t\texit(1);\n\t\t    }\n\t\t    exit(0);\n\t\t}], tcl_cv_strtod_buggy=ok, tcl_cv_strtod_buggy=buggy,\n\t\t    tcl_cv_strtod_buggy=buggy)])\n\tif test \"$tcl_cv_strtod_buggy\" = buggy; then\n\t    AC_LIBOBJ([fixstrtod])\n\t    USE_COMPAT=1\n\t    AC_DEFINE(strtod, fixstrtod, [Do we want to use the strtod() in compat?])\n\tfi\n    fi\n])\n\n#--------------------------------------------------------------------\n# SC_TCL_LINK_LIBS\n#\n#\tSearch for the libraries needed to link the Tcl shell.\n#\tThings like the math library (-lm) and socket stuff (-lsocket vs.\n#\t-lnsl) are dealt with here.\n#\n# Arguments:\n#\tNone.\n#\n# Results:\n#\n#\tMight append to the following vars:\n#\t\tLIBS\n#\t\tMATH_LIBS\n#\n#\tMight define the following vars:\n#\t\tHAVE_NET_ERRNO_H\n#\n#--------------------------------------------------------------------\n\nAC_DEFUN([SC_TCL_LINK_LIBS], [\n    #--------------------------------------------------------------------\n    # On a few very rare systems, all of the libm.a stuff is\n    # already in libc.a.  Set compiler flags accordingly.\n    # Also, Linux requires the \"ieee\" library for math to work\n    # right (and it must appear before \"-lm\").\n    #--------------------------------------------------------------------\n\n    AC_CHECK_FUNC(sin, MATH_LIBS=\"\", MATH_LIBS=\"-lm\")\n    AC_CHECK_LIB(ieee, main, [MATH_LIBS=\"-lieee $MATH_LIBS\"])\n\n    #--------------------------------------------------------------------\n    # Interactive UNIX requires -linet instead of -lsocket, plus it\n    # needs net/errno.h to define the socket-related error codes.\n    #--------------------------------------------------------------------\n\n    AC_CHECK_LIB(inet, main, [LIBS=\"$LIBS -linet\"])\n    AC_CHECK_HEADER(net/errno.h, [\n\tAC_DEFINE(HAVE_NET_ERRNO_H, 1, [Do we have <net/errno.h>?])])\n\n    #--------------------------------------------------------------------\n    #\tCheck for the existence of the -lsocket and -lnsl libraries.\n    #\tThe order here is important, so that they end up in the right\n    #\torder in the command line generated by make.  Here are some\n    #\tspecial considerations:\n    #\t1. Use \"connect\" and \"accept\" to check for -lsocket, and\n    #\t   \"gethostbyname\" to check for -lnsl.\n    #\t2. Use each function name only once:  can't redo a check because\n    #\t   autoconf caches the results of the last check and won't redo it.\n    #\t3. Use -lnsl and -lsocket only if they supply procedures that\n    #\t   aren't already present in the normal libraries.  This is because\n    #\t   IRIX 5.2 has libraries, but they aren't needed and they're\n    #\t   bogus:  they goof up name resolution if used.\n    #\t4. On some SVR4 systems, can't use -lsocket without -lnsl too.\n    #\t   To get around this problem, check for both libraries together\n    #\t   if -lsocket doesn't work by itself.\n    #--------------------------------------------------------------------\n\n    tcl_checkBoth=0\n    AC_CHECK_FUNC(connect, tcl_checkSocket=0, tcl_checkSocket=1)\n    if test \"$tcl_checkSocket\" = 1; then\n\tAC_CHECK_FUNC(setsockopt, , [AC_CHECK_LIB(socket, setsockopt,\n\t    LIBS=\"$LIBS -lsocket\", tcl_checkBoth=1)])\n    fi\n    if test \"$tcl_checkBoth\" = 1; then\n\ttk_oldLibs=$LIBS\n\tLIBS=\"$LIBS -lsocket -lnsl\"\n\tAC_CHECK_FUNC(accept, tcl_checkNsl=0, [LIBS=$tk_oldLibs])\n    fi\n    AC_CHECK_FUNC(gethostbyname, , [AC_CHECK_LIB(nsl, gethostbyname,\n\t    [LIBS=\"$LIBS -lnsl\"])])\n])\n\n#--------------------------------------------------------------------\n# SC_TCL_EARLY_FLAGS\n#\n#\tCheck for what flags are needed to be passed so the correct OS\n#\tfeatures are available.\n#\n# Arguments:\n#\tNone\n#\n# Results:\n#\n#\tMight define the following vars:\n#\t\t_ISOC99_SOURCE\n#\t\t_LARGEFILE64_SOURCE\n#\t\t_LARGEFILE_SOURCE64\n#\n#--------------------------------------------------------------------\n\nAC_DEFUN([SC_TCL_EARLY_FLAG],[\n    AC_CACHE_VAL([tcl_cv_flag_]translit($1,[A-Z],[a-z]),\n\tAC_TRY_COMPILE([$2], $3, [tcl_cv_flag_]translit($1,[A-Z],[a-z])=no,\n\t    AC_TRY_COMPILE([[#define ]$1[ 1\n]$2], $3,\n\t\t[tcl_cv_flag_]translit($1,[A-Z],[a-z])=yes,\n\t\t[tcl_cv_flag_]translit($1,[A-Z],[a-z])=no)))\n    if test [\"x${tcl_cv_flag_]translit($1,[A-Z],[a-z])[}\" = \"xyes\"] ; then\n\tAC_DEFINE($1, 1, [Add the ]$1[ flag when building])\n\ttcl_flags=\"$tcl_flags $1\"\n    fi\n])\n\nAC_DEFUN([SC_TCL_EARLY_FLAGS],[\n    AC_MSG_CHECKING([for required early compiler flags])\n    tcl_flags=\"\"\n    SC_TCL_EARLY_FLAG(_ISOC99_SOURCE,[#include <stdlib.h>],\n\t[char *p = (char *)strtoll; char *q = (char *)strtoull;])\n    SC_TCL_EARLY_FLAG(_LARGEFILE64_SOURCE,[#include <sys/stat.h>],\n\t[struct stat64 buf; int i = stat64(\"/\", &buf);])\n    SC_TCL_EARLY_FLAG(_LARGEFILE_SOURCE64,[#include <sys/stat.h>],\n\t[char *p = (char *)open64;])\n    if test \"x${tcl_flags}\" = \"x\" ; then\n\tAC_MSG_RESULT([none])\n    else\n\tAC_MSG_RESULT([${tcl_flags}])\n    fi\n])\n\n#--------------------------------------------------------------------\n# SC_TCL_64BIT_FLAGS\n#\n#\tCheck for what is defined in the way of 64-bit features.\n#\n# Arguments:\n#\tNone\n#\n# Results:\n#\n#\tMight define the following vars:\n#\t\tTCL_WIDE_INT_IS_LONG\n#\t\tTCL_WIDE_INT_TYPE\n#\t\tHAVE_STRUCT_DIRENT64\n#\t\tHAVE_STRUCT_STAT64\n#\t\tHAVE_TYPE_OFF64_T\n#\n#--------------------------------------------------------------------\n\nAC_DEFUN([SC_TCL_64BIT_FLAGS], [\n    AC_MSG_CHECKING([for 64-bit integer type])\n    AC_CACHE_VAL(tcl_cv_type_64bit,[\n\ttcl_cv_type_64bit=none\n\t# See if the compiler knows natively about __int64\n\tAC_TRY_COMPILE(,[__int64 value = (__int64) 0;],\n\t    tcl_type_64bit=__int64, tcl_type_64bit=\"long long\")\n\t# See if we should use long anyway  Note that we substitute in the\n\t# type that is our current guess for a 64-bit type inside this check\n\t# program, so it should be modified only carefully...\n        AC_TRY_COMPILE(,[switch (0) {\n            case 1: case (sizeof(]${tcl_type_64bit}[)==sizeof(long)): ;\n        }],tcl_cv_type_64bit=${tcl_type_64bit})])\n    if test \"${tcl_cv_type_64bit}\" = none ; then\n\tAC_DEFINE(TCL_WIDE_INT_IS_LONG, 1, [Are wide integers to be implemented with C 'long's?])\n\tAC_MSG_RESULT([using long])\n    else\n\tAC_DEFINE_UNQUOTED(TCL_WIDE_INT_TYPE,${tcl_cv_type_64bit},\n\t    [What type should be used to define wide integers?])\n\tAC_MSG_RESULT([${tcl_cv_type_64bit}])\n\n\t# Now check for auxiliary declarations\n\tAC_CACHE_CHECK([for struct dirent64], tcl_cv_struct_dirent64,[\n\t    AC_TRY_COMPILE([#include <sys/types.h>\n#include <dirent.h>],[struct dirent64 p;],\n\t\ttcl_cv_struct_dirent64=yes,tcl_cv_struct_dirent64=no)])\n\tif test \"x${tcl_cv_struct_dirent64}\" = \"xyes\" ; then\n\t    AC_DEFINE(HAVE_STRUCT_DIRENT64, 1, [Is 'struct dirent64' in <sys/types.h>?])\n\tfi\n\n\tAC_CACHE_CHECK([for struct stat64], tcl_cv_struct_stat64,[\n\t    AC_TRY_COMPILE([#include <sys/stat.h>],[struct stat64 p;\n],\n\t\ttcl_cv_struct_stat64=yes,tcl_cv_struct_stat64=no)])\n\tif test \"x${tcl_cv_struct_stat64}\" = \"xyes\" ; then\n\t    AC_DEFINE(HAVE_STRUCT_STAT64, 1, [Is 'struct stat64' in <sys/stat.h>?])\n\tfi\n\n\tAC_CHECK_FUNCS(open64 lseek64)\n\tAC_MSG_CHECKING([for off64_t])\n\tAC_CACHE_VAL(tcl_cv_type_off64_t,[\n\t    AC_TRY_COMPILE([#include <sys/types.h>],[off64_t offset;\n],\n\t\ttcl_cv_type_off64_t=yes,tcl_cv_type_off64_t=no)])\n\tdnl Define HAVE_TYPE_OFF64_T only when the off64_t type and the\n\tdnl functions lseek64 and open64 are defined.\n\tif test \"x${tcl_cv_type_off64_t}\" = \"xyes\" && \\\n\t        test \"x${ac_cv_func_lseek64}\" = \"xyes\" && \\\n\t        test \"x${ac_cv_func_open64}\" = \"xyes\" ; then\n\t    AC_DEFINE(HAVE_TYPE_OFF64_T, 1, [Is off64_t in <sys/types.h>?])\n\t    AC_MSG_RESULT([yes])\n\telse\n\t    AC_MSG_RESULT([no])\n\tfi\n    fi\n])\n\n#--------------------------------------------------------------------\n# SC_TCL_CFG_ENCODING\tTIP #59\n#\n#\tDeclare the encoding to use for embedded configuration information.\n#\n# Arguments:\n#\tNone.\n#\n# Results:\n#\tMight append to the following vars:\n#\t\tDEFS\t(implicit)\n#\n#\tWill define the following vars:\n#\t\tTCL_CFGVAL_ENCODING\n#\n#--------------------------------------------------------------------\n\nAC_DEFUN([SC_TCL_CFG_ENCODING], [\n    AC_ARG_WITH(encoding,\n\tAC_HELP_STRING([--with-encoding],\n\t    [encoding for configuration values (default: iso8859-1)]),\n\twith_tcencoding=${withval})\n\n    if test x\"${with_tcencoding}\" != x ; then\n\tAC_DEFINE_UNQUOTED(TCL_CFGVAL_ENCODING,\"${with_tcencoding}\",\n\t    [What encoding should be used for embedded configuration info?])\n    else\n\tAC_DEFINE(TCL_CFGVAL_ENCODING,\"iso8859-1\",\n\t    [What encoding should be used for embedded configuration info?])\n    fi\n])\n\n#--------------------------------------------------------------------\n# SC_TCL_CHECK_BROKEN_FUNC\n#\n#\tCheck for broken function.\n#\n# Arguments:\n#\tfuncName - function to test for\n#\tadvancedTest - the advanced test to run if the function is present\n#\n# Results:\n#\tMight cause compatability versions of the function to be used.\n#\tMight affect the following vars:\n#\t\tUSE_COMPAT\t(implicit)\n#\n#--------------------------------------------------------------------\n\nAC_DEFUN([SC_TCL_CHECK_BROKEN_FUNC],[\n    AC_CHECK_FUNC($1, tcl_ok=1, tcl_ok=0)\n    if test [\"$tcl_ok\"] = 1; then\n\tAC_CACHE_CHECK([proper ]$1[ implementation], [tcl_cv_]$1[_unbroken],\n\t    AC_TRY_RUN([[int main() {]$2[}]],[tcl_cv_]$1[_unbroken]=ok,\n\t\t[tcl_cv_]$1[_unbroken]=broken,[tcl_cv_]$1[_unbroken]=unknown))\n\tif test [\"$tcl_cv_]$1[_unbroken\"] = \"ok\"; then\n\t    tcl_ok=1\n\telse\n\t    tcl_ok=0\n\tfi\n    fi\n    if test [\"$tcl_ok\"] = 0; then\n\tAC_LIBOBJ($1)\n\tUSE_COMPAT=1\n    fi\n])\n\n#--------------------------------------------------------------------\n# SC_TCL_GETHOSTBYADDR_R\n#\n#\tCheck if we have MT-safe variant of gethostbyaddr().\n#\n# Arguments:\n#\tNone\n#\n# Results:\n#\n#\tMight define the following vars:\n#\t\tHAVE_GETHOSTBYADDR_R\n#\t\tHAVE_GETHOSTBYADDR_R_7\n#\t\tHAVE_GETHOSTBYADDR_R_8\n#\n#--------------------------------------------------------------------\n\nAC_DEFUN([SC_TCL_GETHOSTBYADDR_R], [AC_CHECK_FUNC(gethostbyaddr_r, [\n    AC_CACHE_CHECK([for gethostbyaddr_r with 7 args], tcl_cv_api_gethostbyaddr_r_7, [\n    AC_TRY_COMPILE([\n\t#include <netdb.h>\n    ], [\n\tchar *addr;\n\tint length;\n\tint type;\n\tstruct hostent *result;\n\tchar buffer[2048];\n\tint buflen = 2048;\n\tint h_errnop;\n\n\t(void) gethostbyaddr_r(addr, length, type, result, buffer, buflen,\n\t\t\t       &h_errnop);\n    ], tcl_cv_api_gethostbyaddr_r_7=yes, tcl_cv_api_gethostbyaddr_r_7=no)])\n    tcl_ok=$tcl_cv_api_gethostbyaddr_r_7\n    if test \"$tcl_ok\" = yes; then\n\tAC_DEFINE(HAVE_GETHOSTBYADDR_R_7, 1,\n\t    [Define to 1 if gethostbyaddr_r takes 7 args.])\n    else\n\tAC_CACHE_CHECK([for gethostbyaddr_r with 8 args], tcl_cv_api_gethostbyaddr_r_8, [\n\tAC_TRY_COMPILE([\n\t    #include <netdb.h>\n\t], [\n\t    char *addr;\n\t    int length;\n\t    int type;\n\t    struct hostent *result, *resultp;\n\t    char buffer[2048];\n\t    int buflen = 2048;\n\t    int h_errnop;\n\n\t    (void) gethostbyaddr_r(addr, length, type, result, buffer, buflen,\n\t\t\t\t   &resultp, &h_errnop);\n\t], tcl_cv_api_gethostbyaddr_r_8=yes, tcl_cv_api_gethostbyaddr_r_8=no)])\n\ttcl_ok=$tcl_cv_api_gethostbyaddr_r_8\n\tif test \"$tcl_ok\" = yes; then\n\t    AC_DEFINE(HAVE_GETHOSTBYADDR_R_8, 1,\n\t\t[Define to 1 if gethostbyaddr_r takes 8 args.])\n\tfi\n    fi\n    if test \"$tcl_ok\" = yes; then\n\tAC_DEFINE(HAVE_GETHOSTBYADDR_R, 1,\n\t    [Define to 1 if gethostbyaddr_r is available.])\n    fi\n])])\n\n#--------------------------------------------------------------------\n# SC_TCL_GETHOSTBYNAME_R\n#\n#\tCheck to see what variant of gethostbyname_r() we have.\n#\tBased on David Arnold's example from the comp.programming.threads\n#\tFAQ Q213\n#\n# Arguments:\n#\tNone\n#\n# Results:\n#\n#\tMight define the following vars:\n#\t\tHAVE_GETHOSTBYADDR_R\n#\t\tHAVE_GETHOSTBYADDR_R_3\n#\t\tHAVE_GETHOSTBYADDR_R_5\n#\t\tHAVE_GETHOSTBYADDR_R_6\n#\n#--------------------------------------------------------------------\n\nAC_DEFUN([SC_TCL_GETHOSTBYNAME_R], [AC_CHECK_FUNC(gethostbyname_r, [\n    AC_CACHE_CHECK([for gethostbyname_r with 6 args], tcl_cv_api_gethostbyname_r_6, [\n    AC_TRY_COMPILE([\n\t#include <netdb.h>\n    ], [\n\tchar *name;\n\tstruct hostent *he, *res;\n\tchar buffer[2048];\n\tint buflen = 2048;\n\tint h_errnop;\n\n\t(void) gethostbyname_r(name, he, buffer, buflen, &res, &h_errnop);\n    ], tcl_cv_api_gethostbyname_r_6=yes, tcl_cv_api_gethostbyname_r_6=no)])\n    tcl_ok=$tcl_cv_api_gethostbyname_r_6\n    if test \"$tcl_ok\" = yes; then\n\tAC_DEFINE(HAVE_GETHOSTBYNAME_R_6, 1,\n\t    [Define to 1 if gethostbyname_r takes 6 args.])\n    else\n\tAC_CACHE_CHECK([for gethostbyname_r with 5 args], tcl_cv_api_gethostbyname_r_5, [\n\tAC_TRY_COMPILE([\n\t    #include <netdb.h>\n\t], [\n\t    char *name;\n\t    struct hostent *he;\n\t    char buffer[2048];\n\t    int buflen = 2048;\n\t    int h_errnop;\n\n\t    (void) gethostbyname_r(name, he, buffer, buflen, &h_errnop);\n\t], tcl_cv_api_gethostbyname_r_5=yes, tcl_cv_api_gethostbyname_r_5=no)])\n\ttcl_ok=$tcl_cv_api_gethostbyname_r_5\n\tif test \"$tcl_ok\" = yes; then\n\t    AC_DEFINE(HAVE_GETHOSTBYNAME_R_5, 1,\n\t\t[Define to 1 if gethostbyname_r takes 5 args.])\n\telse\n\t    AC_CACHE_CHECK([for gethostbyname_r with 3 args], tcl_cv_api_gethostbyname_r_3, [\n\t    AC_TRY_COMPILE([\n\t\t#include <netdb.h>\n\t    ], [\n\t\tchar *name;\n\t\tstruct hostent *he;\n\t\tstruct hostent_data data;\n\n\t\t(void) gethostbyname_r(name, he, &data);\n\t    ], tcl_cv_api_gethostbyname_r_3=yes, tcl_cv_api_gethostbyname_r_3=no)])\n\t    tcl_ok=$tcl_cv_api_gethostbyname_r_3\n\t    if test \"$tcl_ok\" = yes; then\n\t\tAC_DEFINE(HAVE_GETHOSTBYNAME_R_3, 1,\n\t\t    [Define to 1 if gethostbyname_r takes 3 args.])\n\t    fi\n\tfi\n    fi\n    if test \"$tcl_ok\" = yes; then\n\tAC_DEFINE(HAVE_GETHOSTBYNAME_R, 1,\n\t    [Define to 1 if gethostbyname_r is available.])\n    fi\n])])\n\n#--------------------------------------------------------------------\n# SC_TCL_GETADDRINFO\n#\n#\tCheck if we have 'getaddrinfo'\n#\n# Arguments:\n#\tNone\n#\n# Results:\n#\tMight define the following vars:\n#\t\tHAVE_GETADDRINFO\n#\n#--------------------------------------------------------------------\n\nAC_DEFUN([SC_TCL_GETADDRINFO], [AC_CHECK_FUNC(getaddrinfo, [\n    AC_CACHE_CHECK([for working getaddrinfo], tcl_cv_api_getaddrinfo, [\n    AC_TRY_COMPILE([\n\t#include <netdb.h>\n    ], [\n\tconst char *name, *port;\n\tstruct addrinfo *aiPtr, hints;\n\t(void)getaddrinfo(name,port, &hints, &aiPtr);\n\t(void)freeaddrinfo(aiPtr);\n    ], tcl_cv_api_getaddrinfo=yes, tcl_cv_getaddrinfo=no)])\n    tcl_ok=$tcl_cv_api_getaddrinfo\n    if test \"$tcl_ok\" = yes; then\n\tAC_DEFINE(HAVE_GETADDRINFO, 1,\n\t    [Define to 1 if getaddrinfo is available.])\n    fi\n])])\n\n#--------------------------------------------------------------------\n# SC_TCL_GETPWUID_R\n#\n#\tCheck if we have MT-safe variant of getpwuid() and if yes,\n#\twhich one exactly.\n#\n# Arguments:\n#\tNone\n#\n# Results:\n#\n#\tMight define the following vars:\n#\t\tHAVE_GETPWUID_R\n#\t\tHAVE_GETPWUID_R_4\n#\t\tHAVE_GETPWUID_R_5\n#\n#--------------------------------------------------------------------\n\nAC_DEFUN([SC_TCL_GETPWUID_R], [AC_CHECK_FUNC(getpwuid_r, [\n    AC_CACHE_CHECK([for getpwuid_r with 5 args], tcl_cv_api_getpwuid_r_5, [\n    AC_TRY_COMPILE([\n\t#include <sys/types.h>\n\t#include <pwd.h>\n    ], [\n\tuid_t uid;\n\tstruct passwd pw, *pwp;\n\tchar buf[512];\n\tint buflen = 512;\n\n\t(void) getpwuid_r(uid, &pw, buf, buflen, &pwp);\n    ], tcl_cv_api_getpwuid_r_5=yes, tcl_cv_api_getpwuid_r_5=no)])\n    tcl_ok=$tcl_cv_api_getpwuid_r_5\n    if test \"$tcl_ok\" = yes; then\n\tAC_DEFINE(HAVE_GETPWUID_R_5, 1,\n\t    [Define to 1 if getpwuid_r takes 5 args.])\n    else\n\tAC_CACHE_CHECK([for getpwuid_r with 4 args], tcl_cv_api_getpwuid_r_4, [\n\tAC_TRY_COMPILE([\n\t    #include <sys/types.h>\n\t    #include <pwd.h>\n\t], [\n\t    uid_t uid;\n\t    struct passwd pw;\n\t    char buf[512];\n\t    int buflen = 512;\n\n\t    (void)getpwnam_r(uid, &pw, buf, buflen);\n\t], tcl_cv_api_getpwuid_r_4=yes, tcl_cv_api_getpwuid_r_4=no)])\n\ttcl_ok=$tcl_cv_api_getpwuid_r_4\n\tif test \"$tcl_ok\" = yes; then\n\t    AC_DEFINE(HAVE_GETPWUID_R_4, 1,\n\t\t[Define to 1 if getpwuid_r takes 4 args.])\n\tfi\n    fi\n    if test \"$tcl_ok\" = yes; then\n\tAC_DEFINE(HAVE_GETPWUID_R, 1,\n\t    [Define to 1 if getpwuid_r is available.])\n    fi\n])])\n\n#--------------------------------------------------------------------\n# SC_TCL_GETPWNAM_R\n#\n#\tCheck if we have MT-safe variant of getpwnam() and if yes,\n#\twhich one exactly.\n#\n# Arguments:\n#\tNone\n#\n# Results:\n#\n#\tMight define the following vars:\n#\t\tHAVE_GETPWNAM_R\n#\t\tHAVE_GETPWNAM_R_4\n#\t\tHAVE_GETPWNAM_R_5\n#\n#--------------------------------------------------------------------\n\nAC_DEFUN([SC_TCL_GETPWNAM_R], [AC_CHECK_FUNC(getpwnam_r, [\n    AC_CACHE_CHECK([for getpwnam_r with 5 args], tcl_cv_api_getpwnam_r_5, [\n    AC_TRY_COMPILE([\n\t#include <sys/types.h>\n\t#include <pwd.h>\n    ], [\n\tchar *name;\n\tstruct passwd pw, *pwp;\n\tchar buf[512];\n\tint buflen = 512;\n\n\t(void) getpwnam_r(name, &pw, buf, buflen, &pwp);\n    ], tcl_cv_api_getpwnam_r_5=yes, tcl_cv_api_getpwnam_r_5=no)])\n    tcl_ok=$tcl_cv_api_getpwnam_r_5\n    if test \"$tcl_ok\" = yes; then\n\tAC_DEFINE(HAVE_GETPWNAM_R_5, 1,\n\t    [Define to 1 if getpwnam_r takes 5 args.])\n    else\n\tAC_CACHE_CHECK([for getpwnam_r with 4 args], tcl_cv_api_getpwnam_r_4, [\n\tAC_TRY_COMPILE([\n\t    #include <sys/types.h>\n\t    #include <pwd.h>\n\t], [\n\t    char *name;\n\t    struct passwd pw;\n\t    char buf[512];\n\t    int buflen = 512;\n\n\t    (void)getpwnam_r(name, &pw, buf, buflen);\n\t], tcl_cv_api_getpwnam_r_4=yes, tcl_cv_api_getpwnam_r_4=no)])\n\ttcl_ok=$tcl_cv_api_getpwnam_r_4\n\tif test \"$tcl_ok\" = yes; then\n\t    AC_DEFINE(HAVE_GETPWNAM_R_4, 1,\n\t\t[Define to 1 if getpwnam_r takes 4 args.])\n\tfi\n    fi\n    if test \"$tcl_ok\" = yes; then\n\tAC_DEFINE(HAVE_GETPWNAM_R, 1,\n\t    [Define to 1 if getpwnam_r is available.])\n    fi\n])])\n\n#--------------------------------------------------------------------\n# SC_TCL_GETGRGID_R\n#\n#\tCheck if we have MT-safe variant of getgrgid() and if yes,\n#\twhich one exactly.\n#\n# Arguments:\n#\tNone\n#\n# Results:\n#\n#\tMight define the following vars:\n#\t\tHAVE_GETGRGID_R\n#\t\tHAVE_GETGRGID_R_4\n#\t\tHAVE_GETGRGID_R_5\n#\n#--------------------------------------------------------------------\n\nAC_DEFUN([SC_TCL_GETGRGID_R], [AC_CHECK_FUNC(getgrgid_r, [\n    AC_CACHE_CHECK([for getgrgid_r with 5 args], tcl_cv_api_getgrgid_r_5, [\n    AC_TRY_COMPILE([\n\t#include <sys/types.h>\n\t#include <grp.h>\n    ], [\n\tgid_t gid;\n\tstruct group gr, *grp;\n\tchar buf[512];\n\tint buflen = 512;\n\n\t(void) getgrgid_r(gid, &gr, buf, buflen, &grp);\n    ], tcl_cv_api_getgrgid_r_5=yes, tcl_cv_api_getgrgid_r_5=no)])\n    tcl_ok=$tcl_cv_api_getgrgid_r_5\n    if test \"$tcl_ok\" = yes; then\n\tAC_DEFINE(HAVE_GETGRGID_R_5, 1,\n\t    [Define to 1 if getgrgid_r takes 5 args.])\n    else\n\tAC_CACHE_CHECK([for getgrgid_r with 4 args], tcl_cv_api_getgrgid_r_4, [\n\tAC_TRY_COMPILE([\n\t    #include <sys/types.h>\n\t    #include <grp.h>\n\t], [\n\t    gid_t gid;\n\t    struct group gr;\n\t    char buf[512];\n\t    int buflen = 512;\n\n\t    (void)getgrgid_r(gid, &gr, buf, buflen);\n\t], tcl_cv_api_getgrgid_r_4=yes, tcl_cv_api_getgrgid_r_4=no)])\n\ttcl_ok=$tcl_cv_api_getgrgid_r_4\n\tif test \"$tcl_ok\" = yes; then\n\t    AC_DEFINE(HAVE_GETGRGID_R_4, 1,\n\t\t[Define to 1 if getgrgid_r takes 4 args.])\n\tfi\n    fi\n    if test \"$tcl_ok\" = yes; then\n\tAC_DEFINE(HAVE_GETGRGID_R, 1,\n\t    [Define to 1 if getgrgid_r is available.])\n    fi\n])])\n\n#--------------------------------------------------------------------\n# SC_TCL_GETGRNAM_R\n#\n#\tCheck if we have MT-safe variant of getgrnam() and if yes,\n#\twhich one exactly.\n#\n# Arguments:\n#\tNone\n#\n# Results:\n#\n#\tMight define the following vars:\n#\t\tHAVE_GETGRNAM_R\n#\t\tHAVE_GETGRNAM_R_4\n#\t\tHAVE_GETGRNAM_R_5\n#\n#--------------------------------------------------------------------\n\nAC_DEFUN([SC_TCL_GETGRNAM_R], [AC_CHECK_FUNC(getgrnam_r, [\n    AC_CACHE_CHECK([for getgrnam_r with 5 args], tcl_cv_api_getgrnam_r_5, [\n    AC_TRY_COMPILE([\n\t#include <sys/types.h>\n\t#include <grp.h>\n    ], [\n\tchar *name;\n\tstruct group gr, *grp;\n\tchar buf[512];\n\tint buflen = 512;\n\n\t(void) getgrnam_r(name, &gr, buf, buflen, &grp);\n    ], tcl_cv_api_getgrnam_r_5=yes, tcl_cv_api_getgrnam_r_5=no)])\n    tcl_ok=$tcl_cv_api_getgrnam_r_5\n    if test \"$tcl_ok\" = yes; then\n\tAC_DEFINE(HAVE_GETGRNAM_R_5, 1,\n\t    [Define to 1 if getgrnam_r takes 5 args.])\n    else\n\tAC_CACHE_CHECK([for getgrnam_r with 4 args], tcl_cv_api_getgrnam_r_4, [\n\tAC_TRY_COMPILE([\n\t    #include <sys/types.h>\n\t    #include <grp.h>\n\t], [\n\t    char *name;\n\t    struct group gr;\n\t    char buf[512];\n\t    int buflen = 512;\n\n\t    (void)getgrnam_r(name, &gr, buf, buflen);\n\t], tcl_cv_api_getgrnam_r_4=yes, tcl_cv_api_getgrnam_r_4=no)])\n\ttcl_ok=$tcl_cv_api_getgrnam_r_4\n\tif test \"$tcl_ok\" = yes; then\n\t    AC_DEFINE(HAVE_GETGRNAM_R_4, 1,\n\t\t[Define to 1 if getgrnam_r takes 4 args.])\n\tfi\n    fi\n    if test \"$tcl_ok\" = yes; then\n\tAC_DEFINE(HAVE_GETGRNAM_R, 1,\n\t    [Define to 1 if getgrnam_r is available.])\n    fi\n])])\n\n# Local Variables:\n# mode: autoconf\n# End:\n",
        "/tmp/vanessa/spack-stage/spack-stage-tcl-8.5.19-76icjut2bqpwmf2fnlt35uiqok46hbar/spack-src/unix/tclLoadDl.c": "/*\n * tclLoadDl.c --\n *\n *\tThis procedure provides a version of the TclLoadFile that works with\n *\tthe \"dlopen\" and \"dlsym\" library procedures for dynamic loading.\n *\n * Copyright (c) 1995-1997 Sun Microsystems, Inc.\n *\n * See the file \"license.terms\" for information on usage and redistribution of\n * this file, and for a DISCLAIMER OF ALL WARRANTIES.\n */\n\n#include \"tclInt.h\"\n#ifdef NO_DLFCN_H\n#   include \"../compat/dlfcn.h\"\n#else\n#   include <dlfcn.h>\n#endif\n\n/*\n * In some systems, like SunOS 4.1.3, the RTLD_NOW flag isn't defined and this\n * argument to dlopen must always be 1. The RTLD_LOCAL flag doesn't exist on\n * some platforms; if it doesn't exist, set it to 0 so it has no effect.\n * See [Bug #3216070]\n */\n\n#ifndef RTLD_NOW\n#   define RTLD_NOW 1\n#endif\n\n#ifndef RTLD_LOCAL\n#   define RTLD_LOCAL 0\n#endif\n\f\n/*\n *---------------------------------------------------------------------------\n *\n * TclpDlopen --\n *\n *\tDynamically loads a binary code file into memory and returns a handle\n *\tto the new code.\n *\n * Results:\n *\tA standard Tcl completion code. If an error occurs, an error message\n *\tis left in the interp's result.\n *\n * Side effects:\n *\tNew code suddenly appears in memory.\n *\n *---------------------------------------------------------------------------\n */\n\nint\nTclpDlopen(\n    Tcl_Interp *interp,\t\t/* Used for error reporting. */\n    Tcl_Obj *pathPtr,\t\t/* Name of the file containing the desired\n\t\t\t\t * code (UTF-8). */\n    Tcl_LoadHandle *loadHandle,\t/* Filled with token for dynamically loaded\n\t\t\t\t * file which will be passed back to\n\t\t\t\t * (*unloadProcPtr)() to unload the file. */\n    Tcl_FSUnloadFileProc **unloadProcPtr)\n\t\t\t\t/* Filled with address of Tcl_FSUnloadFileProc\n\t\t\t\t * function which should be used for this\n\t\t\t\t * file. */\n{\n    void *handle;\n    CONST char *native;\n\n    /*\n     * First try the full path the user gave us. This is particularly\n     * important if the cwd is inside a vfs, and we are trying to load using a\n     * relative path.\n     */\n\n    native = Tcl_FSGetNativePath(pathPtr);\n    /*\n     * Use (RTLD_NOW|RTLD_LOCAL) always, see [Bug #3216070]\n     */\n    handle = dlopen(native, RTLD_NOW | RTLD_LOCAL);\n    if (handle == NULL) {\n\t/*\n\t * Let the OS loader examine the binary search path for whatever\n\t * string the user gave us which hopefully refers to a file on the\n\t * binary path.\n\t */\n\n\tTcl_DString ds;\n\tchar *fileName = Tcl_GetString(pathPtr);\n\n\tnative = Tcl_UtfToExternalDString(NULL, fileName, -1, &ds);\n\t/*\n\t * Use (RTLD_NOW|RTLD_LOCAL) always, see [Bug #3216070]\n\t */\n\thandle = dlopen(native, RTLD_NOW | RTLD_LOCAL);\n\tTcl_DStringFree(&ds);\n    }\n\n    if (handle == NULL) {\n\t/*\n\t * Write the string to a variable first to work around a compiler bug\n\t * in the Sun Forte 6 compiler. [Bug 1503729]\n\t */\n\n\tconst char *errorStr = dlerror();\n\n\tTcl_AppendResult(interp, \"couldn't load file \\\"\",\n\t\tTcl_GetString(pathPtr), \"\\\": \", errorStr, NULL);\n\treturn TCL_ERROR;\n    }\n\n    *unloadProcPtr = &TclpUnloadFile;\n    *loadHandle = (Tcl_LoadHandle) handle;\n    return TCL_OK;\n}\n\f\n/*\n *----------------------------------------------------------------------\n *\n * TclpFindSymbol --\n *\n *\tLooks up a symbol, by name, through a handle associated with a\n *\tpreviously loaded piece of code (shared library).\n *\n * Results:\n *\tReturns a pointer to the function associated with 'symbol' if it is\n *\tfound. Otherwise returns NULL and may leave an error message in the\n *\tinterp's result.\n *\n *----------------------------------------------------------------------\n */\n\nTcl_PackageInitProc *\nTclpFindSymbol(\n    Tcl_Interp *interp,\t\t/* Place to put error messages. */\n    Tcl_LoadHandle loadHandle,\t/* Value from TcpDlopen(). */\n    CONST char *symbol)\t\t/* Symbol to look up. */\n{\n    CONST char *native;\n    Tcl_DString newName, ds;\n    VOID *handle = (VOID*)loadHandle;\n    Tcl_PackageInitProc *proc;\n\n    /*\n     * Some platforms still add an underscore to the beginning of symbol\n     * names. If we can't find a name without an underscore, try again with\n     * the underscore.\n     */\n\n    native = Tcl_UtfToExternalDString(NULL, symbol, -1, &ds);\n    proc = (Tcl_PackageInitProc *) dlsym(handle,\t/* INTL: Native. */\n\t    native);\n    if (proc == NULL) {\n\tTcl_DStringInit(&newName);\n\tTcl_DStringAppend(&newName, \"_\", 1);\n\tnative = Tcl_DStringAppend(&newName, native, -1);\n\tproc = (Tcl_PackageInitProc *) dlsym(handle,\t/* INTL: Native. */\n\t\tnative);\n\tTcl_DStringFree(&newName);\n    }\n    Tcl_DStringFree(&ds);\n\n    return proc;\n}\n\f\n/*\n *----------------------------------------------------------------------\n *\n * TclpUnloadFile --\n *\n *\tUnloads a dynamically loaded binary code file from memory. Code\n *\tpointers in the formerly loaded file are no longer valid after calling\n *\tthis function.\n *\n * Results:\n *\tNone.\n *\n * Side effects:\n *\tCode removed from memory.\n *\n *----------------------------------------------------------------------\n */\n\nvoid\nTclpUnloadFile(\n    Tcl_LoadHandle loadHandle)\t/* loadHandle returned by a previous call to\n\t\t\t\t * TclpDlopen(). The loadHandle is a token\n\t\t\t\t * that represents the loaded file. */\n{\n    void *handle;\n\n    handle = (void *) loadHandle;\n    dlclose(handle);\n}\n\f\n/*\n *----------------------------------------------------------------------\n *\n * TclGuessPackageName --\n *\n *\tIf the \"load\" command is invoked without providing a package name,\n *\tthis procedure is invoked to try to figure it out.\n *\n * Results:\n *\tAlways returns 0 to indicate that we couldn't figure out a package\n *\tname; generic code will then try to guess the package from the file\n *\tname. A return value of 1 would have meant that we figured out the\n *\tpackage name and put it in bufPtr.\n *\n * Side effects:\n *\tNone.\n *\n *----------------------------------------------------------------------\n */\n\nint\nTclGuessPackageName(\n    CONST char *fileName,\t/* Name of file containing package (already\n\t\t\t\t * translated to local form if needed). */\n    Tcl_DString *bufPtr)\t/* Initialized empty dstring. Append package\n\t\t\t\t * name to this if possible. */\n{\n    return 0;\n}\n\f\n/*\n * Local Variables:\n * mode: c\n * c-basic-offset: 4\n * fill-column: 78\n * End:\n */\n",
        "/tmp/vanessa/spack-stage/spack-stage-tcl-8.5.19-76icjut2bqpwmf2fnlt35uiqok46hbar/spack-src/unix/tclUnixInit.c": "/*\n * tclUnixInit.c --\n *\n *\tContains the Unix-specific interpreter initialization functions.\n *\n * Copyright (c) 1995-1997 Sun Microsystems, Inc.\n * Copyright (c) 1999 by Scriptics Corporation.\n * All rights reserved.\n */\n\n#include \"tclInt.h\"\n#include <stddef.h>\n#include <locale.h>\n#ifdef HAVE_LANGINFO\n#   include <langinfo.h>\n#   ifdef __APPLE__\n#       if defined(HAVE_WEAK_IMPORT) && MAC_OS_X_VERSION_MIN_REQUIRED < 1030\n\t    /* Support for weakly importing nl_langinfo on Darwin. */\n#           define WEAK_IMPORT_NL_LANGINFO\n\t    extern char *nl_langinfo(nl_item) WEAK_IMPORT_ATTRIBUTE;\n#       endif\n#    endif\n#endif\n#include <sys/resource.h>\n#if defined(__FreeBSD__) && defined(__GNUC__)\n#   include <floatingpoint.h>\n#endif\n#if defined(__bsdi__)\n#   include <sys/param.h>\n#   if _BSDI_VERSION > 199501\n#\tinclude <dlfcn.h>\n#   endif\n#endif\n\n#ifdef __CYGWIN__\nDLLIMPORT extern __stdcall unsigned char GetVersionExW(void *);\nDLLIMPORT extern __stdcall void *LoadLibraryW(const void *);\nDLLIMPORT extern __stdcall void FreeLibrary(void *);\nDLLIMPORT extern __stdcall void *GetProcAddress(void *, const char *);\nDLLIMPORT extern __stdcall void GetSystemInfo(void *);\n\n#define NUMPLATFORMS 4\nstatic const char *const platforms[NUMPLATFORMS] = {\n    \"Win32s\", \"Windows 95\", \"Windows NT\", \"Windows CE\"\n};\n\n#define NUMPROCESSORS 11\nstatic const char *const  processors[NUMPROCESSORS] = {\n    \"intel\", \"mips\", \"alpha\", \"ppc\", \"shx\", \"arm\", \"ia64\", \"alpha64\", \"msil\",\n    \"amd64\", \"ia32_on_win64\"\n};\n\ntypedef struct _SYSTEM_INFO {\n  union {\n    DWORD  dwOemId;\n    struct {\n      int wProcessorArchitecture;\n      int wReserved;\n    };\n  };\n  DWORD     dwPageSize;\n  void *lpMinimumApplicationAddress;\n  void *lpMaximumApplicationAddress;\n  void *dwActiveProcessorMask;\n  DWORD     dwNumberOfProcessors;\n  DWORD     dwProcessorType;\n  DWORD     dwAllocationGranularity;\n  int      wProcessorLevel;\n  int      wProcessorRevision;\n} SYSTEM_INFO;\n\ntypedef struct _OSVERSIONINFOW {\n  DWORD dwOSVersionInfoSize;\n  DWORD dwMajorVersion;\n  DWORD dwMinorVersion;\n  DWORD dwBuildNumber;\n  DWORD dwPlatformId;\n  wchar_t szCSDVersion[128];\n} OSVERSIONINFOW;\n#endif\n\n#ifdef HAVE_COREFOUNDATION\n#include <CoreFoundation/CoreFoundation.h>\n#endif\n\n/*\n * Define TCL_NO_STACK_CHECK in the compiler options if you want to revert to\n * the old behavior of never checking the stack.\n */\n\n/*\n * Define this if you want to see a lot of output regarding stack checking.\n */\n\n#undef TCL_DEBUG_STACK_CHECK\n\n/*\n * Values used to compute how much space is really available for Tcl's use for\n * the stack.\n *\n * The getrlimit() function is documented to return the maximum stack size in\n * bytes. However, with threads enabled, the pthread library on some platforms\n * does bad things to the stack size limits. First, the limits cannot be\n * changed. Second, they appear to be sometimes reported incorrectly.\n *\n * The defines below may need to be adjusted if more platforms have this\n * broken behavior with threads enabled.\n */\n\n#ifndef TCL_MAGIC_STACK_DIVISOR\n#define TCL_MAGIC_STACK_DIVISOR\t\t1\n#endif\n#ifndef TCL_RESERVED_STACK_PAGES\n#define TCL_RESERVED_STACK_PAGES\t8\n#endif\n\n/*\n * Thread specific data for stack checking.\n */\n\n#ifndef TCL_NO_STACK_CHECK\ntypedef struct ThreadSpecificData {\n    int *outerVarPtr;\t\t/* The \"outermost\" stack frame pointer for\n\t\t\t\t * this thread. */\n    int *stackBound;            /* The current stack boundary */\n} ThreadSpecificData;\nstatic Tcl_ThreadDataKey dataKey;\n#ifdef TCL_CROSS_COMPILE\nstatic int stackGrowsDown = -1;\nstatic int StackGrowsDown(int *parent);\n#elif defined(TCL_STACK_GROWS_UP)\n#define stackGrowsDown 0\n#else\n#define stackGrowsDown 1\n#endif\n#endif /* TCL_NO_STACK_CHECK */\n\n#ifdef TCL_DEBUG_STACK_CHECK\n#define STACK_DEBUG(args) printf args\n#else\n#define STACK_DEBUG(args) (void)0\n#endif /* TCL_DEBUG_STACK_CHECK */\n\n/*\n * Tcl tries to use standard and homebrew methods to guess the right encoding\n * on the platform. However, there is always a final fallback, and this value\n * is it. Make sure it is a real Tcl encoding.\n */\n\n#ifndef TCL_DEFAULT_ENCODING\n#define TCL_DEFAULT_ENCODING \"iso8859-1\"\n#endif\n\n/*\n * Default directory in which to look for Tcl library scripts. The symbol is\n * defined by Makefile.\n */\n\nstatic char defaultLibraryDir[sizeof(TCL_LIBRARY)+200] = TCL_LIBRARY;\n\n/*\n * Directory in which to look for packages (each package is typically\n * installed as a subdirectory of this directory). The symbol is defined by\n * Makefile.\n */\n\nstatic char pkgPath[sizeof(TCL_PACKAGE_PATH)+200] = TCL_PACKAGE_PATH;\n\n/*\n * The following table is used to map from Unix locale strings to encoding\n * files. If HAVE_LANGINFO is defined, then this is a fallback table when the\n * result from nl_langinfo isn't a recognized encoding. Otherwise this is the\n * first list checked for a mapping from env encoding to Tcl encoding name.\n */\n\ntypedef struct LocaleTable {\n    CONST char *lang;\n    CONST char *encoding;\n} LocaleTable;\n\n/*\n * The table below is sorted for the sake of doing binary searches on it. The\n * indenting reflects different categories of data. The leftmost data\n * represent the encoding names directly implemented by data files in Tcl's\n * default encoding directory. Indented by one TAB are the encoding names that\n * are common alternative spellings. Indented by two TABs are the accumulated\n * \"bug fixes\" that have been added to deal with the wide variability seen\n * among existing platforms.\n */\n\nstatic CONST LocaleTable localeTable[] = {\n\t    {\"\",\t\t\"iso8859-1\"},\n\t\t    {\"ansi-1251\",\t\"cp1251\"},\n\t    {\"ansi_x3.4-1968\",\t\"iso8859-1\"},\n    {\"ascii\",\t\t\"ascii\"},\n    {\"big5\",\t\t\"big5\"},\n    {\"cp1250\",\t\t\"cp1250\"},\n    {\"cp1251\",\t\t\"cp1251\"},\n    {\"cp1252\",\t\t\"cp1252\"},\n    {\"cp1253\",\t\t\"cp1253\"},\n    {\"cp1254\",\t\t\"cp1254\"},\n    {\"cp1255\",\t\t\"cp1255\"},\n    {\"cp1256\",\t\t\"cp1256\"},\n    {\"cp1257\",\t\t\"cp1257\"},\n    {\"cp1258\",\t\t\"cp1258\"},\n    {\"cp437\",\t\t\"cp437\"},\n    {\"cp737\",\t\t\"cp737\"},\n    {\"cp775\",\t\t\"cp775\"},\n    {\"cp850\",\t\t\"cp850\"},\n    {\"cp852\",\t\t\"cp852\"},\n    {\"cp855\",\t\t\"cp855\"},\n    {\"cp857\",\t\t\"cp857\"},\n    {\"cp860\",\t\t\"cp860\"},\n    {\"cp861\",\t\t\"cp861\"},\n    {\"cp862\",\t\t\"cp862\"},\n    {\"cp863\",\t\t\"cp863\"},\n    {\"cp864\",\t\t\"cp864\"},\n    {\"cp865\",\t\t\"cp865\"},\n    {\"cp866\",\t\t\"cp866\"},\n    {\"cp869\",\t\t\"cp869\"},\n    {\"cp874\",\t\t\"cp874\"},\n    {\"cp932\",\t\t\"cp932\"},\n    {\"cp936\",\t\t\"cp936\"},\n    {\"cp949\",\t\t\"cp949\"},\n    {\"cp950\",\t\t\"cp950\"},\n    {\"dingbats\",\t\"dingbats\"},\n    {\"ebcdic\",\t\t\"ebcdic\"},\n    {\"euc-cn\",\t\t\"euc-cn\"},\n    {\"euc-jp\",\t\t\"euc-jp\"},\n    {\"euc-kr\",\t\t\"euc-kr\"},\n\t\t    {\"eucjp\",\t\t\"euc-jp\"},\n\t\t    {\"euckr\",\t\t\"euc-kr\"},\n\t\t    {\"euctw\",\t\t\"euc-cn\"},\n    {\"gb12345\",\t\t\"gb12345\"},\n    {\"gb1988\",\t\t\"gb1988\"},\n    {\"gb2312\",\t\t\"gb2312\"},\n\t\t    {\"gb2312-1980\",\t\"gb2312\"},\n    {\"gb2312-raw\",\t\"gb2312-raw\"},\n\t\t    {\"greek8\",\t\t\"cp869\"},\n\t    {\"ibm1250\",\t\t\"cp1250\"},\n\t    {\"ibm1251\",\t\t\"cp1251\"},\n\t    {\"ibm1252\",\t\t\"cp1252\"},\n\t    {\"ibm1253\",\t\t\"cp1253\"},\n\t    {\"ibm1254\",\t\t\"cp1254\"},\n\t    {\"ibm1255\",\t\t\"cp1255\"},\n\t    {\"ibm1256\",\t\t\"cp1256\"},\n\t    {\"ibm1257\",\t\t\"cp1257\"},\n\t    {\"ibm1258\",\t\t\"cp1258\"},\n\t    {\"ibm437\",\t\t\"cp437\"},\n\t    {\"ibm737\",\t\t\"cp737\"},\n\t    {\"ibm775\",\t\t\"cp775\"},\n\t    {\"ibm850\",\t\t\"cp850\"},\n\t    {\"ibm852\",\t\t\"cp852\"},\n\t    {\"ibm855\",\t\t\"cp855\"},\n\t    {\"ibm857\",\t\t\"cp857\"},\n\t    {\"ibm860\",\t\t\"cp860\"},\n\t    {\"ibm861\",\t\t\"cp861\"},\n\t    {\"ibm862\",\t\t\"cp862\"},\n\t    {\"ibm863\",\t\t\"cp863\"},\n\t    {\"ibm864\",\t\t\"cp864\"},\n\t    {\"ibm865\",\t\t\"cp865\"},\n\t    {\"ibm866\",\t\t\"cp866\"},\n\t    {\"ibm869\",\t\t\"cp869\"},\n\t    {\"ibm874\",\t\t\"cp874\"},\n\t    {\"ibm932\",\t\t\"cp932\"},\n\t    {\"ibm936\",\t\t\"cp936\"},\n\t    {\"ibm949\",\t\t\"cp949\"},\n\t    {\"ibm950\",\t\t\"cp950\"},\n\t    {\"iso-2022\",\t\"iso2022\"},\n\t    {\"iso-2022-jp\",\t\"iso2022-jp\"},\n\t    {\"iso-2022-kr\",\t\"iso2022-kr\"},\n\t    {\"iso-8859-1\",\t\"iso8859-1\"},\n\t    {\"iso-8859-10\",\t\"iso8859-10\"},\n\t    {\"iso-8859-13\",\t\"iso8859-13\"},\n\t    {\"iso-8859-14\",\t\"iso8859-14\"},\n\t    {\"iso-8859-15\",\t\"iso8859-15\"},\n\t    {\"iso-8859-16\",\t\"iso8859-16\"},\n\t    {\"iso-8859-2\",\t\"iso8859-2\"},\n\t    {\"iso-8859-3\",\t\"iso8859-3\"},\n\t    {\"iso-8859-4\",\t\"iso8859-4\"},\n\t    {\"iso-8859-5\",\t\"iso8859-5\"},\n\t    {\"iso-8859-6\",\t\"iso8859-6\"},\n\t    {\"iso-8859-7\",\t\"iso8859-7\"},\n\t    {\"iso-8859-8\",\t\"iso8859-8\"},\n\t    {\"iso-8859-9\",\t\"iso8859-9\"},\n    {\"iso2022\",\t\t\"iso2022\"},\n    {\"iso2022-jp\",\t\"iso2022-jp\"},\n    {\"iso2022-kr\",\t\"iso2022-kr\"},\n    {\"iso8859-1\",\t\"iso8859-1\"},\n    {\"iso8859-10\",\t\"iso8859-10\"},\n    {\"iso8859-13\",\t\"iso8859-13\"},\n    {\"iso8859-14\",\t\"iso8859-14\"},\n    {\"iso8859-15\",\t\"iso8859-15\"},\n    {\"iso8859-16\",\t\"iso8859-16\"},\n    {\"iso8859-2\",\t\"iso8859-2\"},\n    {\"iso8859-3\",\t\"iso8859-3\"},\n    {\"iso8859-4\",\t\"iso8859-4\"},\n    {\"iso8859-5\",\t\"iso8859-5\"},\n    {\"iso8859-6\",\t\"iso8859-6\"},\n    {\"iso8859-7\",\t\"iso8859-7\"},\n    {\"iso8859-8\",\t\"iso8859-8\"},\n    {\"iso8859-9\",\t\"iso8859-9\"},\n\t\t    {\"iso88591\",\t\"iso8859-1\"},\n\t\t    {\"iso885915\",\t\"iso8859-15\"},\n\t\t    {\"iso88592\",\t\"iso8859-2\"},\n\t\t    {\"iso88595\",\t\"iso8859-5\"},\n\t\t    {\"iso88596\",\t\"iso8859-6\"},\n\t\t    {\"iso88597\",\t\"iso8859-7\"},\n\t\t    {\"iso88598\",\t\"iso8859-8\"},\n\t\t    {\"iso88599\",\t\"iso8859-9\"},\n#ifdef hpux\n\t\t    {\"ja\",\t\t\"shiftjis\"},\n#else\n\t\t    {\"ja\",\t\t\"euc-jp\"},\n#endif\n\t\t    {\"ja_jp\",\t\t\"euc-jp\"},\n\t\t    {\"ja_jp.euc\",\t\"euc-jp\"},\n\t\t    {\"ja_jp.eucjp\",\t\"euc-jp\"},\n\t\t    {\"ja_jp.jis\",\t\"iso2022-jp\"},\n\t\t    {\"ja_jp.mscode\",\t\"shiftjis\"},\n\t\t    {\"ja_jp.sjis\",\t\"shiftjis\"},\n\t\t    {\"ja_jp.ujis\",\t\"euc-jp\"},\n\t\t    {\"japan\",\t\t\"euc-jp\"},\n#ifdef hpux\n\t\t    {\"japanese\",\t\"shiftjis\"},\n#else\n\t\t    {\"japanese\",\t\"euc-jp\"},\n#endif\n\t\t    {\"japanese-sjis\",\t\"shiftjis\"},\n\t\t    {\"japanese-ujis\",\t\"euc-jp\"},\n\t\t    {\"japanese.euc\",\t\"euc-jp\"},\n\t\t    {\"japanese.sjis\",\t\"shiftjis\"},\n    {\"jis0201\",\t\t\"jis0201\"},\n    {\"jis0208\",\t\t\"jis0208\"},\n    {\"jis0212\",\t\t\"jis0212\"},\n\t\t    {\"jp_jp\",\t\t\"shiftjis\"},\n\t\t    {\"ko\",\t\t\"euc-kr\"},\n\t\t    {\"ko_kr\",\t\t\"euc-kr\"},\n\t\t    {\"ko_kr.euc\",\t\"euc-kr\"},\n\t\t    {\"ko_kw.euckw\",\t\"euc-kr\"},\n    {\"koi8-r\",\t\t\"koi8-r\"},\n    {\"koi8-u\",\t\t\"koi8-u\"},\n\t\t    {\"korean\",\t\t\"euc-kr\"},\n    {\"ksc5601\",\t\t\"ksc5601\"},\n    {\"maccenteuro\",\t\"macCentEuro\"},\n    {\"maccroatian\",\t\"macCroatian\"},\n    {\"maccyrillic\",\t\"macCyrillic\"},\n    {\"macdingbats\",\t\"macDingbats\"},\n    {\"macgreek\",\t\"macGreek\"},\n    {\"maciceland\",\t\"macIceland\"},\n    {\"macjapan\",\t\"macJapan\"},\n    {\"macroman\",\t\"macRoman\"},\n    {\"macromania\",\t\"macRomania\"},\n    {\"macthai\",\t\t\"macThai\"},\n    {\"macturkish\",\t\"macTurkish\"},\n    {\"macukraine\",\t\"macUkraine\"},\n\t\t    {\"roman8\",\t\t\"iso8859-1\"},\n\t\t    {\"ru\",\t\t\"iso8859-5\"},\n\t\t    {\"ru_ru\",\t\t\"iso8859-5\"},\n\t\t    {\"ru_su\",\t\t\"iso8859-5\"},\n    {\"shiftjis\",\t\"shiftjis\"},\n\t\t    {\"sjis\",\t\t\"shiftjis\"},\n    {\"symbol\",\t\t\"symbol\"},\n    {\"tis-620\",\t\t\"tis-620\"},\n\t\t    {\"tis620\",\t\t\"tis-620\"},\n\t\t    {\"turkish8\",\t\"cp857\"},\n\t\t    {\"utf8\",\t\t\"utf-8\"},\n\t\t    {\"zh\",\t\t\"cp936\"},\n\t\t    {\"zh_cn.gb2312\",\t\"euc-cn\"},\n\t\t    {\"zh_cn.gbk\",\t\"euc-cn\"},\n\t\t    {\"zh_cz.gb2312\",\t\"euc-cn\"},\n\t\t    {\"zh_tw\",\t\t\"euc-tw\"},\n\t\t    {\"zh_tw.big5\",\t\"big5\"},\n};\n\n#ifndef TCL_NO_STACK_CHECK\nstatic int\t\tGetStackSize(size_t *stackSizePtr);\n#endif /* TCL_NO_STACK_CHECK */\n#ifdef HAVE_COREFOUNDATION\nstatic int\t\tMacOSXGetLibraryPath(Tcl_Interp *interp,\n\t\t\t    int maxPathLen, char *tclLibPath);\n#endif /* HAVE_COREFOUNDATION */\n#if defined(__APPLE__) && (defined(TCL_LOAD_FROM_MEMORY) || ( \\\n\tdefined(MAC_OS_X_VERSION_MIN_REQUIRED) && ( \\\n\t(defined(TCL_THREADS) && MAC_OS_X_VERSION_MIN_REQUIRED < 1030) || \\\n\t(defined(__LP64__) && MAC_OS_X_VERSION_MIN_REQUIRED < 1050) || \\\n\t(defined(HAVE_COREFOUNDATION) && MAC_OS_X_VERSION_MIN_REQUIRED < 1050)\\\n\t)))\n/*\n * Need to check Darwin release at runtime in tclUnixFCmd.c and tclLoadDyld.c:\n * initialize release global at startup from uname().\n */\n#define GET_DARWIN_RELEASE 1\nMODULE_SCOPE long tclMacOSXDarwinRelease;\nlong tclMacOSXDarwinRelease = 0;\n#endif\n\n\f\n/*\n *---------------------------------------------------------------------------\n *\n * TclpInitPlatform --\n *\n *\tInitialize all the platform-dependant things like signals and\n *\tfloating-point error handling.\n *\n *\tCalled at process initialization time.\n *\n * Results:\n *\tNone.\n *\n * Side effects:\n *\tNone.\n *\n *---------------------------------------------------------------------------\n */\n\nvoid\nTclpInitPlatform(void)\n{\n#ifdef DJGPP\n    tclPlatform = TCL_PLATFORM_WINDOWS;\n#else\n    tclPlatform = TCL_PLATFORM_UNIX;\n#endif\n\n    /*\n     * Make sure, that the standard FDs exist. [Bug 772288]\n     */\n\n    if (TclOSseek(0, (Tcl_SeekOffset) 0, SEEK_CUR) == -1 && errno == EBADF) {\n\topen(\"/dev/null\", O_RDONLY);\n    }\n    if (TclOSseek(1, (Tcl_SeekOffset) 0, SEEK_CUR) == -1 && errno == EBADF) {\n\topen(\"/dev/null\", O_WRONLY);\n    }\n    if (TclOSseek(2, (Tcl_SeekOffset) 0, SEEK_CUR) == -1 && errno == EBADF) {\n\topen(\"/dev/null\", O_WRONLY);\n    }\n\n    /*\n     * The code below causes SIGPIPE (broken pipe) errors to be ignored. This\n     * is needed so that Tcl processes don't die if they create child\n     * processes (e.g. using \"exec\" or \"open\") that terminate prematurely.\n     * The signal handler is only set up when the first interpreter is\n     * created; after this the application can override the handler with a\n     * different one of its own, if it wants.\n     */\n\n#ifdef SIGPIPE\n    (void) signal(SIGPIPE, SIG_IGN);\n#endif /* SIGPIPE */\n\n#if defined(__FreeBSD__) && defined(__GNUC__)\n    /*\n     * Adjust the rounding mode to be more conventional. Note that FreeBSD\n     * only provides the __fpsetreg() used by the following two for the GNU\n     * Compiler. When using, say, Intel's icc they break. (Partially based on\n     * patch in BSD ports system from root@celsius.bychok.com)\n     */\n\n    fpsetround(FP_RN);\n    (void) fpsetmask(0L);\n#endif\n\n#if defined(__bsdi__) && (_BSDI_VERSION > 199501)\n    /*\n     * Find local symbols. Don't report an error if we fail.\n     */\n\n    (void) dlopen(NULL, RTLD_NOW);\t\t\t/* INTL: Native. */\n#endif\n\n    /*\n     * Initialize the C library's locale subsystem. This is required for input\n     * methods to work properly on X11. We only do this for LC_CTYPE because\n     * that's the necessary one, and we don't want to affect LC_TIME here.\n     * The side effect of setting the default locale should be to load any\n     * locale specific modules that are needed by X. [BUG: 5422 3345 4236 2522\n     * 2521].\n     */\n\n    setlocale(LC_CTYPE, \"\");\n\n    /*\n     * In case the initial locale is not \"C\", ensure that the numeric\n     * processing is done in \"C\" locale regardless. This is needed because Tcl\n     * relies on routines like strtod, but should not have locale dependent\n     * behavior.\n     */\n\n    setlocale(LC_NUMERIC, \"C\");\n\n#ifdef GET_DARWIN_RELEASE\n    {\n\tstruct utsname name;\n\n\tif (!uname(&name)) {\n\t    tclMacOSXDarwinRelease = strtol(name.release, NULL, 10);\n\t}\n    }\n#endif\n}\n\f\n/*\n *---------------------------------------------------------------------------\n *\n * TclpInitLibraryPath --\n *\n *\tThis is the fallback routine that sets the library path if the\n *\tapplication has not set one by the first time it is needed.\n *\n * Results:\n *\tNone.\n *\n * Side effects:\n *\tSets the library path to an initial value.\n *\n *-------------------------------------------------------------------------\n */\n\nvoid\nTclpInitLibraryPath(\n    char **valuePtr,\n    int *lengthPtr,\n    Tcl_Encoding *encodingPtr)\n{\n#define LIBRARY_SIZE\t    32\n    Tcl_Obj *pathPtr, *objPtr;\n    CONST char *str;\n    Tcl_DString buffer;\n\n    pathPtr = Tcl_NewObj();\n\n    /*\n     * Look for the library relative to the TCL_LIBRARY env variable. If the\n     * last dirname in the TCL_LIBRARY path does not match the last dirname in\n     * the installLib variable, use the last dir name of installLib in\n     * addition to the orginal TCL_LIBRARY path.\n     */\n\n    str = getenv(\"TCL_LIBRARY\");\t\t\t/* INTL: Native. */\n    Tcl_ExternalToUtfDString(NULL, str, -1, &buffer);\n    str = Tcl_DStringValue(&buffer);\n\n    if ((str != NULL) && (str[0] != '\\0')) {\n\tTcl_DString ds;\n\tint pathc;\n\tCONST char **pathv;\n\tchar installLib[LIBRARY_SIZE];\n\n\tTcl_DStringInit(&ds);\n\n\t/*\n\t * Initialize the substrings used when locating an executable. The\n\t * installLib variable computes the path as though the executable is\n\t * installed.\n\t */\n\n\tsprintf(installLib, \"lib/tcl%s\", TCL_VERSION);\n\n\t/*\n\t * If TCL_LIBRARY is set, search there.\n\t */\n\n\tobjPtr = Tcl_NewStringObj(str, -1);\n\tTcl_ListObjAppendElement(NULL, pathPtr, objPtr);\n\n\tTcl_SplitPath(str, &pathc, &pathv);\n\tif ((pathc > 0) && (strcasecmp(installLib + 4, pathv[pathc-1]) != 0)) {\n\t    /*\n\t     * If TCL_LIBRARY is set but refers to a different tcl\n\t     * installation than the current version, try fiddling with the\n\t     * specified directory to make it refer to this installation by\n\t     * removing the old \"tclX.Y\" and substituting the current version\n\t     * string.\n\t     */\n\n\t    pathv[pathc - 1] = installLib + 4;\n\t    str = Tcl_JoinPath(pathc, pathv, &ds);\n\t    objPtr = Tcl_NewStringObj(str, Tcl_DStringLength(&ds));\n\t    Tcl_ListObjAppendElement(NULL, pathPtr, objPtr);\n\t    Tcl_DStringFree(&ds);\n\t}\n\tckfree((char *) pathv);\n    }\n\n    /*\n     * Finally, look for the library relative to the compiled-in path. This is\n     * needed when users install Tcl with an exec-prefix that is different\n     * from the prefix.\n     */\n\n    {\n#ifdef HAVE_COREFOUNDATION\n\tchar tclLibPath[MAXPATHLEN + 1];\n\n\tif (MacOSXGetLibraryPath(NULL, MAXPATHLEN, tclLibPath) == TCL_OK) {\n\t    str = tclLibPath;\n\t} else\n#endif /* HAVE_COREFOUNDATION */\n\t{\n\t    /*\n\t     * TODO: Pull this value from the TIP 59 table.\n\t     */\n\n\t    str = defaultLibraryDir;\n\t}\n\tif (str[0] != '\\0') {\n\t    objPtr = Tcl_NewStringObj(str, -1);\n\t    Tcl_ListObjAppendElement(NULL, pathPtr, objPtr);\n\t}\n    }\n    Tcl_DStringFree(&buffer);\n\n    *encodingPtr = Tcl_GetEncoding(NULL, NULL);\n    str = Tcl_GetStringFromObj(pathPtr, lengthPtr);\n    *valuePtr = ckalloc((unsigned int) (*lengthPtr)+1);\n    memcpy(*valuePtr, str, (size_t)(*lengthPtr)+1);\n    Tcl_DecrRefCount(pathPtr);\n}\n\f\n/*\n *---------------------------------------------------------------------------\n *\n * TclpSetInitialEncodings --\n *\n *\tBased on the locale, determine the encoding of the operating system\n *\tand the default encoding for newly opened files.\n *\n *\tCalled at process initialization time, and part way through startup,\n *\twe verify that the initial encodings were correctly setup. Depending\n *\ton Tcl's environment, there may not have been enough information first\n *\ttime through (above).\n *\n * Results:\n *\tNone.\n *\n * Side effects:\n *\tThe Tcl library path is converted from native encoding to UTF-8, on\n *\tthe first call, and the encodings may be changed on first or second\n *\tcall.\n *\n *---------------------------------------------------------------------------\n */\n\nvoid\nTclpSetInitialEncodings(void)\n{\n    Tcl_DString encodingName;\n    Tcl_SetSystemEncoding(NULL,\n\t    Tcl_GetEncodingNameFromEnvironment(&encodingName));\n    Tcl_DStringFree(&encodingName);\n}\n\nvoid\nTclpSetInterfaces(void)\n{\n    /* do nothing */\n}\n\nstatic CONST char *\nSearchKnownEncodings(\n    CONST char *encoding)\n{\n    int left = 0;\n    int right = sizeof(localeTable)/sizeof(LocaleTable);\n\n    while (left <= right) {\n\tint test = (left + right)/2;\n\tint code = strcmp(localeTable[test].lang, encoding);\n\n\tif (code == 0) {\n\t    return localeTable[test].encoding;\n\t}\n\tif (code < 0) {\n\t    left = test+1;\n\t} else {\n\t    right = test-1;\n\t}\n    }\n    return NULL;\n}\n\nCONST char *\nTcl_GetEncodingNameFromEnvironment(\n    Tcl_DString *bufPtr)\n{\n    CONST char *encoding;\n    CONST char *knownEncoding;\n\n    Tcl_DStringInit(bufPtr);\n\n    /*\n     * Determine the current encoding from the LC_* or LANG environment\n     * variables. We previously used setlocale() to determine the locale, but\n     * this does not work on some systems (e.g. Linux/i386 RH 5.0).\n     */\n\n#ifdef HAVE_LANGINFO\n    if (\n#ifdef WEAK_IMPORT_NL_LANGINFO\n\t    nl_langinfo != NULL &&\n#endif\n\t    setlocale(LC_CTYPE, \"\") != NULL) {\n\tTcl_DString ds;\n\n\t/*\n\t * Use a DString so we can modify case.\n\t */\n\n\tTcl_DStringInit(&ds);\n\tencoding = Tcl_DStringAppend(&ds, nl_langinfo(CODESET), -1);\n\tTcl_UtfToLower(Tcl_DStringValue(&ds));\n\tknownEncoding = SearchKnownEncodings(encoding);\n\tif (knownEncoding != NULL) {\n\t    Tcl_DStringAppend(bufPtr, knownEncoding, -1);\n\t} else if (NULL != Tcl_GetEncoding(NULL, encoding)) {\n\t    Tcl_DStringAppend(bufPtr, encoding, -1);\n\t}\n\tTcl_DStringFree(&ds);\n\tif (Tcl_DStringLength(bufPtr)) {\n\t    return Tcl_DStringValue(bufPtr);\n\t}\n    }\n#endif /* HAVE_LANGINFO */\n\n    /*\n     * Classic fallback check. This tries a homebrew algorithm to determine\n     * what encoding should be used based on env vars.\n     */\n\n    encoding = getenv(\"LC_ALL\");\n\n    if (encoding == NULL || encoding[0] == '\\0') {\n\tencoding = getenv(\"LC_CTYPE\");\n    }\n    if (encoding == NULL || encoding[0] == '\\0') {\n\tencoding = getenv(\"LANG\");\n    }\n    if (encoding == NULL || encoding[0] == '\\0') {\n\tencoding = NULL;\n    }\n\n    if (encoding != NULL) {\n\tCONST char *p;\n\tTcl_DString ds;\n\n\tTcl_DStringInit(&ds);\n\tp = encoding;\n\tencoding = Tcl_DStringAppend(&ds, p, -1);\n\tTcl_UtfToLower(Tcl_DStringValue(&ds));\n\n\tknownEncoding = SearchKnownEncodings(encoding);\n\tif (knownEncoding != NULL) {\n\t    Tcl_DStringAppend(bufPtr, knownEncoding, -1);\n\t} else if (NULL != Tcl_GetEncoding(NULL, encoding)) {\n\t    Tcl_DStringAppend(bufPtr, encoding, -1);\n\t}\n\tif (Tcl_DStringLength(bufPtr)) {\n\t    Tcl_DStringFree(&ds);\n\t    return Tcl_DStringValue(bufPtr);\n\t}\n\n\t/*\n\t * We didn't recognize the full value as an encoding name. If there is\n\t * an encoding subfield, we can try to guess from that.\n\t */\n\n\tfor (p = encoding; *p != '\\0'; p++) {\n\t    if (*p == '.') {\n\t\tp++;\n\t\tbreak;\n\t    }\n\t}\n\tif (*p != '\\0') {\n\t    knownEncoding = SearchKnownEncodings(p);\n\t    if (knownEncoding != NULL) {\n\t\tTcl_DStringAppend(bufPtr, knownEncoding, -1);\n\t    } else if (NULL != Tcl_GetEncoding(NULL, p)) {\n\t\tTcl_DStringAppend(bufPtr, p, -1);\n\t    }\n\t}\n\tTcl_DStringFree(&ds);\n\tif (Tcl_DStringLength(bufPtr)) {\n\t    return Tcl_DStringValue(bufPtr);\n\t}\n    }\n    return Tcl_DStringAppend(bufPtr, TCL_DEFAULT_ENCODING, -1);\n}\n\f\n/*\n *---------------------------------------------------------------------------\n *\n * TclpSetVariables --\n *\n *\tPerforms platform-specific interpreter initialization related to the\n *\ttcl_library and tcl_platform variables, and other platform-specific\n *\tthings.\n *\n * Results:\n *\tNone.\n *\n * Side effects:\n *\tSets \"tclDefaultLibrary\", \"tcl_pkgPath\", and \"tcl_platform\" Tcl\n *\tvariables.\n *\n *----------------------------------------------------------------------\n */\n\nvoid\nTclpSetVariables(\n    Tcl_Interp *interp)\n{\n#ifdef __CYGWIN__\n    SYSTEM_INFO sysInfo;\n    static OSVERSIONINFOW osInfo;\n    static int osInfoInitialized = 0;\n    char buffer[TCL_INTEGER_SPACE * 2];\n#elif !defined(NO_UNAME)\n    struct utsname name;\n#endif\n    int unameOK;\n    Tcl_DString ds;\n\n#ifdef HAVE_COREFOUNDATION\n    char tclLibPath[MAXPATHLEN + 1];\n\n#if MAC_OS_X_VERSION_MAX_ALLOWED > 1020\n    /*\n     * Set msgcat fallback locale to current CFLocale identifier.\n     */\n\n    CFLocaleRef localeRef;\n    \n    if (CFLocaleCopyCurrent != NULL && CFLocaleGetIdentifier != NULL &&\n\t    (localeRef = CFLocaleCopyCurrent())) {\n\tCFStringRef locale = CFLocaleGetIdentifier(localeRef);\n\n\tif (locale) {\n\t    char loc[256];\n\n\t    if (CFStringGetCString(locale, loc, 256, kCFStringEncodingUTF8)) {\n\t\tif (!Tcl_CreateNamespace(interp, \"::tcl::mac\", NULL, NULL)) {\n\t\t    Tcl_ResetResult(interp);\n\t\t}\n\t\tTcl_SetVar(interp, \"::tcl::mac::locale\", loc, TCL_GLOBAL_ONLY);\n\t    }\n\t}\n\tCFRelease(localeRef);\n    }\n#endif /* MAC_OS_X_VERSION_MAX_ALLOWED > 1020 */\n\n    if (MacOSXGetLibraryPath(interp, MAXPATHLEN, tclLibPath) == TCL_OK) {\n\tCONST char *str;\n\tCFBundleRef bundleRef;\n\n\tTcl_SetVar(interp, \"tclDefaultLibrary\", tclLibPath, TCL_GLOBAL_ONLY);\n\tTcl_SetVar(interp, \"tcl_pkgPath\", tclLibPath, TCL_GLOBAL_ONLY);\n\tTcl_SetVar(interp, \"tcl_pkgPath\", \" \",\n\t\tTCL_GLOBAL_ONLY | TCL_APPEND_VALUE);\n\n\tstr = TclGetEnv(\"DYLD_FRAMEWORK_PATH\", &ds);\n\tif ((str != NULL) && (str[0] != '\\0')) {\n\t    char *p = Tcl_DStringValue(&ds);\n\n\t    /*\n\t     * Convert DYLD_FRAMEWORK_PATH from colon to space separated.\n\t     */\n\n\t    do {\n\t\tif (*p == ':') {\n\t\t    *p = ' ';\n\t\t}\n\t    } while (*p++);\n\t    Tcl_SetVar(interp, \"tcl_pkgPath\", Tcl_DStringValue(&ds),\n\t\t    TCL_GLOBAL_ONLY | TCL_APPEND_VALUE);\n\t    Tcl_SetVar(interp, \"tcl_pkgPath\", \" \",\n\t\t    TCL_GLOBAL_ONLY | TCL_APPEND_VALUE);\n\t    Tcl_DStringFree(&ds);\n\t}\n\tbundleRef = CFBundleGetMainBundle();\n\tif (bundleRef) {\n\t    CFURLRef frameworksURL;\n\t    Tcl_StatBuf statBuf;\n\n\t    frameworksURL = CFBundleCopyPrivateFrameworksURL(bundleRef);\n\t    if (frameworksURL) {\n\t\tif (CFURLGetFileSystemRepresentation(frameworksURL, TRUE,\n\t\t\t(unsigned char*) tclLibPath, MAXPATHLEN) &&\n\t\t\t! TclOSstat(tclLibPath, &statBuf) &&\n\t\t\tS_ISDIR(statBuf.st_mode)) {\n\t\t    Tcl_SetVar(interp, \"tcl_pkgPath\", tclLibPath,\n\t\t\t    TCL_GLOBAL_ONLY | TCL_APPEND_VALUE);\n\t\t    Tcl_SetVar(interp, \"tcl_pkgPath\", \" \",\n\t\t\t    TCL_GLOBAL_ONLY | TCL_APPEND_VALUE);\n\t\t}\n\t\tCFRelease(frameworksURL);\n\t    }\n\t    frameworksURL = CFBundleCopySharedFrameworksURL(bundleRef);\n\t    if (frameworksURL) {\n\t\tif (CFURLGetFileSystemRepresentation(frameworksURL, TRUE,\n\t\t\t(unsigned char*) tclLibPath, MAXPATHLEN) &&\n\t\t\t! TclOSstat(tclLibPath, &statBuf) &&\n\t\t\tS_ISDIR(statBuf.st_mode)) {\n\t\t    Tcl_SetVar(interp, \"tcl_pkgPath\", tclLibPath,\n\t\t\t    TCL_GLOBAL_ONLY | TCL_APPEND_VALUE);\n\t\t    Tcl_SetVar(interp, \"tcl_pkgPath\", \" \",\n\t\t\t    TCL_GLOBAL_ONLY | TCL_APPEND_VALUE);\n\t\t}\n\t\tCFRelease(frameworksURL);\n\t    }\n\t}\n\tTcl_SetVar(interp, \"tcl_pkgPath\", pkgPath,\n\t\tTCL_GLOBAL_ONLY | TCL_APPEND_VALUE);\n    } else\n#endif /* HAVE_COREFOUNDATION */\n    {\n\tTcl_SetVar(interp, \"tcl_pkgPath\", pkgPath, TCL_GLOBAL_ONLY);\n    }\n\n#ifdef DJGPP\n    Tcl_SetVar2(interp, \"tcl_platform\", \"platform\", \"dos\", TCL_GLOBAL_ONLY);\n#else\n    Tcl_SetVar2(interp, \"tcl_platform\", \"platform\", \"unix\", TCL_GLOBAL_ONLY);\n#endif\n\n    unameOK = 0;\n#ifdef __CYGWIN__\n\tunameOK = 1;\n    if (!osInfoInitialized) {\n\tHANDLE handle = LoadLibraryW(L\"NTDLL\");\n\tint(__stdcall *getversion)(void *) =\n\t\t(int(__stdcall *)(void *))GetProcAddress(handle, \"RtlGetVersion\");\n\tosInfo.dwOSVersionInfoSize = sizeof(OSVERSIONINFOW);\n\tif (!getversion || getversion(&osInfo)) {\n\t    GetVersionExW(&osInfo);\n\t}\n\tif (handle) {\n\t    FreeLibrary(handle);\n\t}\n\tosInfoInitialized = 1;\n    }\n\n    GetSystemInfo(&sysInfo);\n\n    if (osInfo.dwPlatformId < NUMPLATFORMS) {\n\tTcl_SetVar2(interp, \"tcl_platform\", \"os\",\n\t\tplatforms[osInfo.dwPlatformId], TCL_GLOBAL_ONLY);\n    }\n    sprintf(buffer, \"%d.%d\", osInfo.dwMajorVersion, osInfo.dwMinorVersion);\n    Tcl_SetVar2(interp, \"tcl_platform\", \"osVersion\", buffer, TCL_GLOBAL_ONLY);\n    if (sysInfo.wProcessorArchitecture < NUMPROCESSORS) {\n\tTcl_SetVar2(interp, \"tcl_platform\", \"machine\",\n\t\tprocessors[sysInfo.wProcessorArchitecture],\n\t\tTCL_GLOBAL_ONLY);\n    }\n\n#elif !defined NO_UNAME\n    if (uname(&name) >= 0) {\n\tCONST char *native;\n\n\tunameOK = 1;\n\n\tnative = Tcl_ExternalToUtfDString(NULL, name.sysname, -1, &ds);\n\tTcl_SetVar2(interp, \"tcl_platform\", \"os\", native, TCL_GLOBAL_ONLY);\n\tTcl_DStringFree(&ds);\n\n\t/*\n\t * The following code is a special hack to handle differences in the\n\t * way version information is returned by uname. On most systems the\n\t * full version number is available in name.release. However, under\n\t * AIX the major version number is in name.version and the minor\n\t * version number is in name.release.\n\t */\n\n\tif ((strchr(name.release, '.') != NULL)\n\t\t|| !isdigit(UCHAR(name.version[0]))) {\t/* INTL: digit */\n\t    Tcl_SetVar2(interp, \"tcl_platform\", \"osVersion\", name.release,\n\t\t    TCL_GLOBAL_ONLY);\n\t} else {\n#ifdef DJGPP\n\t    /*\n\t     * For some obscure reason DJGPP puts major version into\n\t     * name.release and minor into name.version. As of DJGPP 2.04 this\n\t     * is documented in djgpp libc.info file.\n\t     */\n\n\t    Tcl_SetVar2(interp, \"tcl_platform\", \"osVersion\", name.release,\n\t\t    TCL_GLOBAL_ONLY);\n\t    Tcl_SetVar2(interp, \"tcl_platform\", \"osVersion\", \".\",\n\t\t    TCL_GLOBAL_ONLY|TCL_APPEND_VALUE);\n\t    Tcl_SetVar2(interp, \"tcl_platform\", \"osVersion\", name.version,\n\t\t    TCL_GLOBAL_ONLY|TCL_APPEND_VALUE);\n#else\n\t    Tcl_SetVar2(interp, \"tcl_platform\", \"osVersion\", name.version,\n\t\t    TCL_GLOBAL_ONLY);\n\t    Tcl_SetVar2(interp, \"tcl_platform\", \"osVersion\", \".\",\n\t\t    TCL_GLOBAL_ONLY|TCL_APPEND_VALUE);\n\t    Tcl_SetVar2(interp, \"tcl_platform\", \"osVersion\", name.release,\n\t\t    TCL_GLOBAL_ONLY|TCL_APPEND_VALUE);\n\n#endif /* DJGPP */\n\t}\n\tTcl_SetVar2(interp, \"tcl_platform\", \"machine\", name.machine,\n\t\tTCL_GLOBAL_ONLY);\n    }\n#endif /* !NO_UNAME */\n    if (!unameOK) {\n\tTcl_SetVar2(interp, \"tcl_platform\", \"os\", \"\", TCL_GLOBAL_ONLY);\n\tTcl_SetVar2(interp, \"tcl_platform\", \"osVersion\", \"\", TCL_GLOBAL_ONLY);\n\tTcl_SetVar2(interp, \"tcl_platform\", \"machine\", \"\", TCL_GLOBAL_ONLY);\n    }\n\n    /*\n     * Copy the username of the real user (according to getuid()) into\n     * tcl_platform(user).\n     */\n\n    {\n\tstruct passwd *pwEnt = TclpGetPwUid(getuid());\n\tconst char *user;\n\n\tif (pwEnt == NULL) {\n\t    user = \"\";\n\t    Tcl_DStringInit(&ds);\t/* ensure cleanliness */\n\t} else {\n\t    user = Tcl_ExternalToUtfDString(NULL, pwEnt->pw_name, -1, &ds);\n\t}\n\n\tTcl_SetVar2(interp, \"tcl_platform\", \"user\", user, TCL_GLOBAL_ONLY);\n\tTcl_DStringFree(&ds);\n    }\n}\n\f\n/*\n *----------------------------------------------------------------------\n *\n * TclpFindVariable --\n *\n *\tLocate the entry in environ for a given name. On Unix this routine is\n *\tcase sensetive, on Windows this matches mixed case.\n *\n * Results:\n *\tThe return value is the index in environ of an entry with the name\n *\t\"name\", or -1 if there is no such entry. The integer at *lengthPtr is\n *\tfilled in with the length of name (if a matching entry is found) or\n *\tthe length of the environ array (if no matching entry is found).\n *\n * Side effects:\n *\tNone.\n *\n *----------------------------------------------------------------------\n */\n\nint\nTclpFindVariable(\n    CONST char *name,\t\t/* Name of desired environment variable\n\t\t\t\t * (native). */\n    int *lengthPtr)\t\t/* Used to return length of name (for\n\t\t\t\t * successful searches) or number of non-NULL\n\t\t\t\t * entries in environ (for unsuccessful\n\t\t\t\t * searches). */\n{\n    int i, result = -1;\n    register CONST char *env, *p1, *p2;\n    Tcl_DString envString;\n\n    Tcl_DStringInit(&envString);\n    for (i = 0, env = environ[i]; env != NULL; i++, env = environ[i]) {\n\tp1 = Tcl_ExternalToUtfDString(NULL, env, -1, &envString);\n\tp2 = name;\n\n\tfor (; *p2 == *p1; p1++, p2++) {\n\t    /* NULL loop body. */\n\t}\n\tif ((*p1 == '=') && (*p2 == '\\0')) {\n\t    *lengthPtr = p2 - name;\n\t    result = i;\n\t    goto done;\n\t}\n\n\tTcl_DStringFree(&envString);\n    }\n\n    *lengthPtr = i;\n\n  done:\n    Tcl_DStringFree(&envString);\n    return result;\n}\n\f\n#ifndef TCL_NO_STACK_CHECK\n/*\n *----------------------------------------------------------------------\n *\n * TclpGetCStackParams --\n *\n *\tDetermine the stack params for the current thread: in which\n *\tdirection does the stack grow, and what is the stack lower (resp.\n *\tupper) bound for safe invocation of a new command? This is used to\n *\tcache the values needed for an efficient computation of\n *\tTclpCheckStackSpace() when the interp is known.\n *\n * Results:\n *\tReturns 1 if the stack grows down, in which case a stack lower bound\n *\tis stored at stackBoundPtr. If the stack grows up, 0 is returned and\n *\tan upper bound is stored at stackBoundPtr. If a bound cannot be\n *\tdetermined NULL is stored at stackBoundPtr.\n *\n *----------------------------------------------------------------------\n */\n\nint\nTclpGetCStackParams(\n    int **stackBoundPtr)\n{\n    int result = TCL_OK;\n    size_t stackSize = 0;\t/* The size of the current stack. */\n    ThreadSpecificData *tsdPtr = TCL_TSD_INIT(&dataKey);\n\t\t\t\t/* Most variables are actually in a\n\t\t\t\t * thread-specific data block to minimise the\n\t\t\t\t * impact on the stack. */\n#ifdef TCL_CROSS_COMPILE\n    if (stackGrowsDown == -1) {\n\t/*\n\t * Not initialised!\n\t */\n\n\tstackGrowsDown = StackGrowsDown(NULL);\n    }\n#endif\n    \n    /*\n     * The first time through in a thread: record the \"outermost\" stack\n     * frame and inquire with the OS about the stack size.\n     */\n\n    if (tsdPtr->outerVarPtr == NULL) {\n\ttsdPtr->outerVarPtr = &result;\n\tresult = GetStackSize(&stackSize);\n\tif (result != TCL_OK) {\n\t    /* Can't check, assume it always succeeds */\n#ifdef TCL_CROSS_COMPILE\n\t    stackGrowsDown = 1;\n#endif\n\t    tsdPtr->stackBound = NULL;\n\t    goto done;\n\t}\n    }\n\n    if (stackSize || (tsdPtr->stackBound &&\n\t    ((stackGrowsDown && (&result < tsdPtr->stackBound)) ||\n\t    (!stackGrowsDown && (&result > tsdPtr->stackBound))))) {\n\t/*\n\t * Either the thread's first pass or stack failure: set the params\n\t */\n\n\tif (!stackSize) {\n\t    /*\n\t     * Stack failure: if we didn't already blow up, we are within the\n\t     * safety area. Recheck with the OS in case the stack was grown. \n\t     */\n\t    result = GetStackSize(&stackSize);\n\t    if (result != TCL_OK) {\n\t\t/* Can't check, assume it always succeeds */\n#ifdef TCL_CROSS_COMPILE\n\t\tstackGrowsDown = 1;\n#endif\n\t\ttsdPtr->stackBound = NULL;\n\t\tgoto done;\n\t    }\n\t}\n\n\tif (stackGrowsDown) {\n\t    tsdPtr->stackBound = (int *) ((char *)tsdPtr->outerVarPtr -\n\t\t    stackSize);\n\t    if (tsdPtr->stackBound > tsdPtr->outerVarPtr) {\n\t    \t/* Overflow, that should never happen, just set it to NULL.\n\t    \t * See [Bug #3166410] */\n\t    \ttsdPtr->stackBound = NULL;\n\t    }\n\t} else {\n\t    tsdPtr->stackBound = (int *) ((char *)tsdPtr->outerVarPtr +\n\t\t    stackSize);\n\t    if (tsdPtr->stackBound < tsdPtr->outerVarPtr) {\n\t    \t/* Overflow, that should never happen, just set it to NULL.\n\t    \t * See [Bug #3166410] */\n\t    \ttsdPtr->stackBound = NULL;\n\t    }\n\t}\n    }\n\n    done:\n    *stackBoundPtr = tsdPtr->stackBound;\n    return stackGrowsDown;\n}\n\n#ifdef TCL_CROSS_COMPILE\nint\nStackGrowsDown(\n    int *parent)\n{\n    int here;\n    if (!parent) {\n\treturn StackGrowsDown(&here);\n    }\n    return (&here < parent);\n}\n#endif\n\f\n/*\n *----------------------------------------------------------------------\n *\n * GetStackSize --\n *\n *\tDiscover what the stack size for the current thread/process actually\n *\tis. Expects to only ever be called once per thread and then only at a\n *\tpoint when there is a reasonable amount of space left on the current\n *\tstack; TclpCheckStackSpace is called sufficiently frequently that that\n *\tis true.\n *\n * Results:\n *\tTCL_OK if the stack space was discovered, TCL_BREAK if the stack space\n *\twas undiscoverable in a way that stack checks should fail, and\n *\tTCL_CONTINUE if the stack space was undiscoverable in a way that stack\n *\tchecks should succeed.\n *\n * Side effects:\n *\tNone\n *\n *----------------------------------------------------------------------\n */\n\nstatic int\nGetStackSize(\n    size_t *stackSizePtr)\n{\n    size_t rawStackSize;\n    struct rlimit rLimit;\t/* The result from getrlimit(). */\n\n#ifdef TCL_THREADS\n    rawStackSize = TclpThreadGetStackSize();\n    if (rawStackSize == (size_t) -1) {\n\t/*\n\t * Some kind of confirmed error in TclpThreadGetStackSize?! Fall back\n\t * to whatever getrlimit can determine.\n\t */\n\tSTACK_DEBUG((\"stack checks: TclpThreadGetStackSize failed in \\n\"));\n    }\n    if (rawStackSize > 0) {\n\tgoto finalSanityCheck;\n    }\n\n    /*\n     * If we have zero or an error, try the system limits instead. After all,\n     * the pthread documentation states that threads should always be bound by\n     * the system stack size limit in any case.\n     */\n#endif /* TCL_THREADS */\n\n    if (getrlimit(RLIMIT_STACK, &rLimit) != 0) {\n\t/*\n\t * getrlimit() failed, just fail the whole thing.\n\t */\n\tSTACK_DEBUG((\"skipping stack checks with failure: getrlimit failed\\n\"));\n\treturn TCL_BREAK;\n    }\n    if (rLimit.rlim_cur == RLIM_INFINITY) {\n\t/*\n\t * Limit is \"infinite\"; there is no stack limit.\n\t */\n\tSTACK_DEBUG((\"skipping stack checks with success: infinite limit\\n\"));\n\treturn TCL_CONTINUE;\n    }\n    rawStackSize = rLimit.rlim_cur;\n\n    /*\n     * Final sanity check on the determined stack size. If we fail this,\n     * assume there are bogus values about and that we can't actually figure\n     * out what the stack size really is.\n     */\n\n#ifdef TCL_THREADS /* Stop warning... */\n  finalSanityCheck:\n#endif\n    if (rawStackSize <= 0) {\n\tSTACK_DEBUG((\"skipping stack checks with success\\n\"));\n\treturn TCL_CONTINUE;\n    }\n\n    /*\n     * Calculate a stack size with a safety margin.\n     */\n\n    *stackSizePtr = (rawStackSize / TCL_MAGIC_STACK_DIVISOR)\n\t    - (getpagesize() * TCL_RESERVED_STACK_PAGES);\n\n    return TCL_OK;\n}\n#endif /* TCL_NO_STACK_CHECK */\n\f\n/*\n *----------------------------------------------------------------------\n *\n * MacOSXGetLibraryPath --\n *\n *\tIf we have a bundle structure for the Tcl installation, then check\n *\tthere first to see if we can find the libraries there.\n *\n * Results:\n *\tTCL_OK if we have found the tcl library; TCL_ERROR otherwise.\n *\n * Side effects:\n *\tSame as for Tcl_MacOSXOpenVersionedBundleResources.\n *\n *----------------------------------------------------------------------\n */\n\n#ifdef HAVE_COREFOUNDATION\nstatic int\nMacOSXGetLibraryPath(\n    Tcl_Interp *interp,\n    int maxPathLen,\n    char *tclLibPath)\n{\n    int foundInFramework = TCL_ERROR;\n\n#ifdef TCL_FRAMEWORK\n    foundInFramework = Tcl_MacOSXOpenVersionedBundleResources(interp,\n\t    \"com.tcltk.tcllibrary\", TCL_FRAMEWORK_VERSION, 0, maxPathLen,\n\t    tclLibPath);\n#endif\n\n    return foundInFramework;\n}\n#endif /* HAVE_COREFOUNDATION */\n\f\n/*\n * Local Variables:\n * mode: c\n * c-basic-offset: 4\n * fill-column: 78\n * End:\n */\n",
        "/tmp/vanessa/spack-stage/spack-stage-tcl-8.5.19-76icjut2bqpwmf2fnlt35uiqok46hbar/spack-src/unix/tclLoadAix.c": "/*\n * tclLoadAix.c --\n *\n *\tThis file implements the dlopen and dlsym APIs under the AIX operating\n *\tsystem, to enable the Tcl \"load\" command to work. This code was\n *\tprovided by Jens-Uwe Mager.\n *\n *\tThis file is subject to the following copyright notice, which is\n *\tdifferent from the notice used elsewhere in Tcl. The file has been\n *\tmodified to incorporate the file dlfcn.h in-line.\n *\n *\tCopyright (c) 1992,1993,1995,1996, Jens-Uwe Mager, Helios Software GmbH\n *\tNot derived from licensed software.\n *\n *\tPermission is granted to freely use, copy, modify, and redistribute\n *\tthis software, provided that the author is not construed to be liable\n *\tfor any results of using the software, alterations are clearly marked\n *\tas such, and this notice is not modified.\n *\n * Note: this file has been altered from the original in a few ways in order\n * to work properly with Tcl.\n */\n\n/*\n * @(#)dlfcn.c\t1.7 revision of 95/08/14  19:08:38\n * This is an unpublished work copyright (c) 1992 HELIOS Software GmbH\n * 30159 Hannover, Germany\n */\n\n#include <stdio.h>\n#include <errno.h>\n#include <string.h>\n#include <stdlib.h>\n#include <sys/types.h>\n#include <sys/ldr.h>\n#include <a.out.h>\n#include <ldfcn.h>\n#include \"../compat/dlfcn.h\"\n\n/*\n * We simulate dlopen() et al. through a call to load. Because AIX has no call\n * to find an exported symbol we read the loader section of the loaded module\n * and build a list of exported symbols and their virtual address.\n */\n\ntypedef struct {\n    char *name;\t\t\t/* The symbols's name. */\n    void *addr;\t\t\t/* Its relocated virtual address. */\n} Export, *ExportPtr;\n\n/*\n * xlC uses the following structure to list its constructors and destructors.\n * This is gleaned from the output of munch.\n */\n\ntypedef struct {\n    void (*init)(void);\t\t/* call static constructors */\n    void (*term)(void);\t\t/* call static destructors */\n} Cdtor, *CdtorPtr;\n\n/*\n * The void * handle returned from dlopen is actually a ModulePtr.\n */\n\ntypedef struct Module {\n    struct Module *next;\n    char *name;\t\t\t/* module name for refcounting */\n    int refCnt;\t\t\t/* the number of references */\n    void *entry;\t\t/* entry point from load */\n    struct dl_info *info;\t/* optional init/terminate functions */\n    CdtorPtr cdtors;\t\t/* optional C++ constructors */\n    int nExports;\t\t/* the number of exports found */\n    ExportPtr exports;\t\t/* the array of exports */\n} Module, *ModulePtr;\n\n/*\n * We keep a list of all loaded modules to be able to call the fini handlers\n * and destructors at atexit() time.\n */\n\nstatic ModulePtr modList;\n\n/*\n * The last error from one of the dl* routines is kept in static variables\n * here. Each error is returned only once to the caller.\n */\n\nstatic char errbuf[BUFSIZ];\nstatic int errvalid;\n\nstatic void caterr(char *);\nstatic int readExports(ModulePtr);\nstatic void terminate(void);\nstatic void *findMain(void);\n\f\nvoid *\ndlopen(\n    const char *path,\n    int mode)\n{\n    register ModulePtr mp;\n    static void *mainModule;\n\n    /*\n     * Upon the first call register a terminate handler that will close all\n     * libraries. Also get a reference to the main module for use with\n     * loadbind.\n     */\n\n    if (!mainModule) {\n\tmainModule = findMain();\n\tif (mainModule == NULL) {\n\t    return NULL;\n\t}\n\tatexit(terminate);\n    }\n\n    /*\n     * Scan the list of modules if we have the module already loaded.\n     */\n\n    for (mp = modList; mp; mp = mp->next) {\n\tif (strcmp(mp->name, path) == 0) {\n\t    mp->refCnt++;\n\t    return (void *) mp;\n\t}\n    }\n\n    mp = (ModulePtr) calloc(1, sizeof(*mp));\n    if (mp == NULL) {\n\terrvalid++;\n\tstrcpy(errbuf, \"calloc: \");\n\tstrcat(errbuf, strerror(errno));\n\treturn NULL;\n    }\n\n    mp->name = malloc((unsigned) (strlen(path) + 1));\n    strcpy(mp->name, path);\n\n    /*\n     * load should be declared load(const char *...). Thus we cast the path to\n     * a normal char *. Ugly.\n     */\n\n    mp->entry = (void *) load((char *)path, L_NOAUTODEFER, NULL);\n    if (mp->entry == NULL) {\n\tfree(mp->name);\n\tfree(mp);\n\terrvalid++;\n\tstrcpy(errbuf, \"dlopen: \");\n\tstrcat(errbuf, path);\n\tstrcat(errbuf, \": \");\n\n\t/*\n\t * If AIX says the file is not executable, the error can be further\n\t * described by querying the loader about the last error.\n\t */\n\n\tif (errno == ENOEXEC) {\n\t    char *tmp[BUFSIZ/sizeof(char *)], **p;\n\n\t    if (loadquery(L_GETMESSAGES, tmp, sizeof(tmp)) == -1) {\n\t\tstrcpy(errbuf, strerror(errno));\n\t    } else {\n\t\tfor (p=tmp ; *p ; p++) {\n\t\t    caterr(*p);\n\t\t}\n\t    }\n\t} else {\n\t    strcat(errbuf, strerror(errno));\n\t}\n\treturn NULL;\n    }\n\n    mp->refCnt = 1;\n    mp->next = modList;\n    modList = mp;\n\n    if (loadbind(0, mainModule, mp->entry) == -1) {\n    loadbindFailure:\n\tdlclose(mp);\n\terrvalid++;\n\tstrcpy(errbuf, \"loadbind: \");\n\tstrcat(errbuf, strerror(errno));\n\treturn NULL;\n    }\n\n    /*\n     * If the user wants global binding, loadbind against all other loaded\n     * modules.\n     */\n\n    if (mode & RTLD_GLOBAL) {\n\tregister ModulePtr mp1;\n\n\tfor (mp1 = mp->next; mp1; mp1 = mp1->next) {\n\t    if (loadbind(0, mp1->entry, mp->entry) == -1) {\n\t\tgoto loadbindFailure;\n\t    }\n\t}\n    }\n\n    if (readExports(mp) == -1) {\n\tdlclose(mp);\n\treturn NULL;\n    }\n\n    /*\n     * If there is a dl_info structure, call the init function.\n     */\n\n    if (mp->info = (struct dl_info *)dlsym(mp, \"dl_info\")) {\n\tif (mp->info->init) {\n\t    (*mp->info->init)();\n\t}\n    } else {\n\terrvalid = 0;\n    }\n\n    /*\n     * If the shared object was compiled using xlC we will need to call static\n     * constructors (and later on dlclose destructors).\n     */\n\n    if (mp->cdtors = (CdtorPtr) dlsym(mp, \"__cdtors\")) {\n\twhile (mp->cdtors->init) {\n\t    (*mp->cdtors->init)();\n\t    mp->cdtors++;\n\t}\n    } else {\n\terrvalid = 0;\n    }\n\n    return (void *) mp;\n}\n\f\n/*\n * Attempt to decipher an AIX loader error message and append it to our static\n * error message buffer.\n */\n\nstatic void\ncaterr(\n    char *s)\n{\n    register char *p = s;\n\n    while (*p >= '0' && *p <= '9') {\n\tp++;\n    }\n    switch (atoi(s)) {\t\t/* INTL: \"C\", UTF safe. */\n    case L_ERROR_TOOMANY:\n\tstrcat(errbuf, \"to many errors\");\n\tbreak;\n    case L_ERROR_NOLIB:\n\tstrcat(errbuf, \"can't load library\");\n\tstrcat(errbuf, p);\n\tbreak;\n    case L_ERROR_UNDEF:\n\tstrcat(errbuf, \"can't find symbol\");\n\tstrcat(errbuf, p);\n\tbreak;\n    case L_ERROR_RLDBAD:\n\tstrcat(errbuf, \"bad RLD\");\n\tstrcat(errbuf, p);\n\tbreak;\n    case L_ERROR_FORMAT:\n\tstrcat(errbuf, \"bad exec format in\");\n\tstrcat(errbuf, p);\n\tbreak;\n    case L_ERROR_ERRNO:\n\tstrcat(errbuf, strerror(atoi(++p)));\t/* INTL: \"C\", UTF safe. */\n\tbreak;\n    default:\n\tstrcat(errbuf, s);\n\tbreak;\n    }\n}\n\f\nvoid *\ndlsym(\n    void *handle,\n    const char *symbol)\n{\n    register ModulePtr mp = (ModulePtr)handle;\n    register ExportPtr ep;\n    register int i;\n\n    /*\n     * Could speed up the search, but I assume that one assigns the result to\n     * function pointers anyways.\n     */\n\n    for (ep = mp->exports, i = mp->nExports; i; i--, ep++) {\n\tif (strcmp(ep->name, symbol) == 0) {\n\t    return ep->addr;\n\t}\n    }\n\n    errvalid++;\n    strcpy(errbuf, \"dlsym: undefined symbol \");\n    strcat(errbuf, symbol);\n    return NULL;\n}\n\f\nchar *\ndlerror(void)\n{\n    if (errvalid) {\n\terrvalid = 0;\n\treturn errbuf;\n    }\n    return NULL;\n}\n\f\nint\ndlclose(\n    void *handle)\n{\n    register ModulePtr mp = (ModulePtr)handle;\n    int result;\n    register ModulePtr mp1;\n\n    if (--mp->refCnt > 0) {\n\treturn 0;\n    }\n\n    if (mp->info && mp->info->fini) {\n\t(*mp->info->fini)();\n    }\n\n    if (mp->cdtors) {\n\twhile (mp->cdtors->term) {\n\t    (*mp->cdtors->term)();\n\t    mp->cdtors++;\n\t}\n    }\n\n    result = unload(mp->entry);\n    if (result == -1) {\n\terrvalid++;\n\tstrcpy(errbuf, strerror(errno));\n    }\n\n    if (mp->exports) {\n\tregister ExportPtr ep;\n\tregister int i;\n\tfor (ep = mp->exports, i = mp->nExports; i; i--, ep++) {\n\t    if (ep->name) {\n\t\tfree(ep->name);\n\t    }\n\t}\n\tfree(mp->exports);\n    }\n\n    if (mp == modList) {\n\tmodList = mp->next;\n    } else {\n\tfor (mp1 = modList; mp1; mp1 = mp1->next) {\n\t    if (mp1->next == mp) {\n\t\tmp1->next = mp->next;\n\t\tbreak;\n\t    }\n\t}\n    }\n\n    free(mp->name);\n    free(mp);\n    return result;\n}\n\f\nstatic void\nterminate(void)\n{\n    while (modList) {\n\tdlclose(modList);\n    }\n}\n\f\n/*\n * Build the export table from the XCOFF .loader section.\n */\n\nstatic int\nreadExports(\n    ModulePtr mp)\n{\n    LDFILE *ldp = NULL;\n    SCNHDR sh, shdata;\n    LDHDR *lhp;\n    char *ldbuf;\n    LDSYM *ls;\n    int i;\n    ExportPtr ep;\n    const char *errMsg;\n\n#define Error(msg) do{errMsg=(msg);goto error;}while(0)\n#define SysErr() Error(strerror(errno))\n\n    ldp = ldopen(mp->name, ldp);\n    if (ldp == NULL) {\n\tstruct ld_info *lp;\n\tchar *buf;\n\tint size = 0;\n\n\tif (errno != ENOENT) {\n\t    SysErr();\n\t}\n\n\t/*\n\t * The module might be loaded due to the LIBPATH environment variable.\n\t * Search for the loaded module using L_GETINFO.\n\t */\n\n\twhile (1) {\n\t    size += 4 * 1024;\n\t    buf = malloc(size);\n\t    if (buf == NULL) {\n\t\tSysErr();\n\t    }\n\n\t    i = loadquery(L_GETINFO, buf, size);\n\n\t    if (i != -1) {\n\t\tbreak;\n\t    }\n\t    free(buf);\n\t    if (errno != ENOMEM) {\n\t\tSysErr();\n\t    }\n\t}\n\n\t/*\n\t * Traverse the list of loaded modules. The entry point returned by\n\t * load() does actually point to the data segment origin.\n\t */\n\n\tlp = (struct ld_info *) buf;\n\twhile (lp) {\n\t    if (lp->ldinfo_dataorg == mp->entry) {\n\t\tldp = ldopen(lp->ldinfo_filename, ldp);\n\t\tbreak;\n\t    }\n\t    if (lp->ldinfo_next == 0) {\n\t\tlp = NULL;\n\t    } else {\n\t\tlp = (struct ld_info *)((char *)lp + lp->ldinfo_next);\n\t    }\n\t}\n\n\tfree(buf);\n\n\tif (!ldp) {\n\t    SysErr();\n\t}\n    }\n\n    if (TYPE(ldp) != U802TOCMAGIC) {\n\tError(\"bad magic\");\n    }\n\n    /*\n     * Get the padding for the data section. This is needed for AIX 4.1\n     * compilers. This is used when building the final function pointer to the\n     * exported symbol.\n     */\n\n    if (ldnshread(ldp, _DATA, &shdata) != SUCCESS) {\n\tError(\"cannot read data section header\");\n    }\n\n    if (ldnshread(ldp, _LOADER, &sh) != SUCCESS) {\n\tError(\"cannot read loader section header\");\n    }\n\n    /*\n     * We read the complete loader section in one chunk, this makes finding\n     * long symbol names residing in the string table easier.\n     */\n\n    ldbuf = (char *) malloc(sh.s_size);\n    if (ldbuf == NULL) {\n\tSysErr();\n    }\n\n    if (FSEEK(ldp, sh.s_scnptr, BEGINNING) != OKFSEEK) {\n\tfree(ldbuf);\n\tError(\"cannot seek to loader section\");\n    }\n\n    if (FREAD(ldbuf, sh.s_size, 1, ldp) != 1) {\n\tfree(ldbuf);\n\tError(\"cannot read loader section\");\n    }\n\n    lhp = (LDHDR *) ldbuf;\n    ls = (LDSYM *)(ldbuf + LDHDRSZ);\n\n    /*\n     * Count the number of exports to include in our export table.\n     */\n\n    for (i = lhp->l_nsyms; i; i--, ls++) {\n\tif (!LDR_EXPORT(*ls)) {\n\t    continue;\n\t}\n\tmp->nExports++;\n    }\n\n    mp->exports = (ExportPtr) calloc(mp->nExports, sizeof(*mp->exports));\n    if (mp->exports == NULL) {\n\tfree(ldbuf);\n\tSysErr();\n    }\n\n    /*\n     * Fill in the export table. All entries are relative to the entry point\n     * we got from load.\n     */\n\n    ep = mp->exports;\n    ls = (LDSYM *)(ldbuf + LDHDRSZ);\n    for (i=lhp->l_nsyms ; i!=0 ; i--,ls++) {\n\tchar *symname;\n\tchar tmpsym[SYMNMLEN+1];\n\n\tif (!LDR_EXPORT(*ls)) {\n\t    continue;\n\t}\n\n\tif (ls->l_zeroes == 0) {\n\t    symname = ls->l_offset + lhp->l_stoff + ldbuf;\n\t} else {\n\t    /*\n\t     * The l_name member is not zero terminated, we must copy the\n\t     * first SYMNMLEN chars and make sure we have a zero byte at the\n\t     * end.\n\t     */\n\n\t    strncpy(tmpsym, ls->l_name, SYMNMLEN);\n\t    tmpsym[SYMNMLEN] = '\\0';\n\t    symname = tmpsym;\n\t}\n\tep->name = malloc((unsigned) (strlen(symname) + 1));\n\tstrcpy(ep->name, symname);\n\tep->addr = (void *)((unsigned long)\n\t\tmp->entry + ls->l_value - shdata.s_vaddr);\n\tep++;\n    }\n    free(ldbuf);\n    while (ldclose(ldp) == FAILURE) {\n\t/* Empty body */\n    }\n    return 0;\n\n    /*\n     * This is a factoring out of the error-handling code to make the rest of\n     * the function much simpler to read.\n     */\n\n  error:\n    errvalid++;\n    strcpy(errbuf, \"readExports: \");\n    strcat(errbuf, errMsg);\n\n    if (ldp != NULL) {\n\twhile (ldclose(ldp) == FAILURE) {\n\t    /* Empty body */\n\t}\n    }\n    return -1;\n}\n\f\n/*\n * Find the main modules entry point. This is used as export pointer for\n * loadbind() to be able to resolve references to the main part.\n */\n\nstatic void *\nfindMain(void)\n{\n    struct ld_info *lp;\n    char *buf;\n    int size = 4*1024;\n    int i;\n    void *ret;\n\n    buf = malloc(size);\n    if (buf == NULL) {\n\tgoto error;\n    }\n\n    while ((i = loadquery(L_GETINFO, buf, size)) == -1 && errno == ENOMEM) {\n\tfree(buf);\n\tsize += 4*1024;\n\tbuf = malloc(size);\n\tif (buf == NULL) {\n\t    goto error;\n\t}\n    }\n\n    if (i == -1) {\n\tfree(buf);\n\tgoto error;\n    }\n\n    /*\n     * The first entry is the main module. The entry point returned by load()\n     * does actually point to the data segment origin.\n     */\n\n    lp = (struct ld_info *) buf;\n    ret = lp->ldinfo_dataorg;\n    free(buf);\n    return ret;\n\n  error:\n    errvalid++;\n    strcpy(errbuf, \"findMain: \");\n    strcat(errbuf, strerror(errno));\n    return NULL;\n}\n\f\n/*\n * Local Variables:\n * mode: c\n * c-basic-offset: 4\n * fill-column: 78\n * End:\n */\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-tcl-8.5.19-76icjut2bqpwmf2fnlt35uiqok46hbar/spack-src/tests/stringObj.test",
        "/tmp/vanessa/spack-stage/spack-stage-tcl-8.5.19-76icjut2bqpwmf2fnlt35uiqok46hbar/spack-src/tests/subst.test",
        "/tmp/vanessa/spack-stage/spack-stage-tcl-8.5.19-76icjut2bqpwmf2fnlt35uiqok46hbar/spack-src/win/tclsh.ico",
        "/tmp/vanessa/spack-stage/spack-stage-tcl-8.5.19-76icjut2bqpwmf2fnlt35uiqok46hbar/spack-src/win/tcl.hpj.in",
        "/tmp/vanessa/spack-stage/spack-stage-tcl-8.5.19-76icjut2bqpwmf2fnlt35uiqok46hbar/spack-src/tools/white.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-tcl-8.5.19-76icjut2bqpwmf2fnlt35uiqok46hbar/spack-src/tools/feather.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-tcl-8.5.19-76icjut2bqpwmf2fnlt35uiqok46hbar/spack-src/tools/tcl.hpj.in",
        "/tmp/vanessa/spack-stage/spack-stage-tcl-8.5.19-76icjut2bqpwmf2fnlt35uiqok46hbar/spack-src/tools/tclSplash.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-tcl-8.5.19-76icjut2bqpwmf2fnlt35uiqok46hbar/spack-src/tools/tcl.wse.in"
    ],
    "total_files": 911
}