{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/configure.ac": "# -*- shell-script -*-\n#\n# Copyright \u00a9 2009      CNRS\n# Copyright \u00a9 2009-2020 Inria.  All rights reserved.\n# Copyright \u00a9 2009, 2011-2012      Universit\u00e9 Bordeaux\n# Copyright \u00a9 2009-2014 Cisco Systems, Inc.  All rights reserved.\n#\n# See COPYING in top-level directory.\n#\n# Additional copyrights may follow\n#\n# $HEADER$\n#\n\n####################################################################\n# Autoconf, Automake, and Libtool bootstrapping\n####################################################################\n\nAC_INIT([hwloc],\n        [m4_normalize(esyscmd([sh config/hwloc_get_version.sh VERSION --version]))],\n        [http://github.com/open-mpi/hwloc/issues], [hwloc])\nAC_PREREQ(2.63)\nAC_CONFIG_AUX_DIR(./config)\n# Note that this directory must *exactly* match what was specified via\n# -I in ACLOCAL_AMFLAGS in the top-level Makefile.am.\nAC_CONFIG_MACRO_DIR(./config)\n\ncat <<EOF\n\n###\n### Configuring hwloc distribution tarball\n### Startup tests\n###\nEOF\n\n# This must be before AM_INIT_AUTOMAKE\nAC_CANONICAL_TARGET\n\n# Init automake\nAM_INIT_AUTOMAKE([1.11 dist-bzip2 subdir-objects foreign tar-ustar parallel-tests -Wall -Werror])\nm4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])\n\nAC_LANG([C])\nAC_USE_SYSTEM_EXTENSIONS\n\n####################################################################\n# Setup the configure-results header file\n####################################################################\n\nAH_TOP([/* -*- c -*-\n *\n * Copyright \u00a9 2009, 2011, 2012 CNRS, inria., Universit\u00e9 Bordeaux  All rights reserved.\n * Copyright \u00a9 2009-2014 Cisco Systems, Inc.  All rights reserved.\n * $COPYRIGHT$\n *\n * Additional copyrights may follow\n *\n * $HEADER$\n *\n * This file is automatically generated by configure.  Edits will be lost\n * the next time you run configure!\n */\n\n#ifndef HWLOC_CONFIGURE_H\n#define HWLOC_CONFIGURE_H\n])\nAH_BOTTOM([\n#endif /* HWLOC_CONFIGURE_H */\n])\n\n####################################################################\n# Setup Libtool\n####################################################################\n\n# We want new Libtool.  None of that old stuff.  Pfft.\nm4_ifdef([LT_PREREQ], [],\n         [m4_fatal([libtool version 2.2.6 or higher is required], [63])])\nLT_PREREQ([2.2.6])\n\n# Setup libtool, but disable F77, Java and Windows Resource\n# Compiler support -- we don't need that stuff.\nAM_ENABLE_SHARED\nAM_DISABLE_STATIC\n\n# This did not exist pre AM 1.11.x (where x is somewhere >0 and <3),\n# but it is necessary in AM 1.12.x.\nm4_ifdef([AM_PROG_AR], [AM_PROG_AR])\n\nLT_INIT([dlopen win32-dll])\nLT_LANG([C])\nLT_LANG([C++])\n\n####################################################################\n# Setup C, C++ compilers\n####################################################################\n\nCFLAGS_save=$CFLAGS\nAC_PROG_CC\nAM_PROG_CC_C_O\nAC_PROG_CC_C99\nCFLAGS=$CFLAGS_save\n\nAC_ARG_VAR(CC_FOR_BUILD,[build system C compiler])\nAS_IF([test -z \"$CC_FOR_BUILD\"],[\n    AC_SUBST([CC_FOR_BUILD], [$CC])\n])\n\n####################################################################\n# CLI arguments\n####################################################################\n\n# Define hwloc's configure arguments\nHWLOC_DEFINE_ARGS\n\n# If debug mode, add -g\nAS_IF([test \"$hwloc_debug\" = \"1\"],\n      [CFLAGS=\"$CFLAGS -g\"])\n\n# If the user didn't specifically ask for embedding mode, default to\n# standalone mode\nAS_IF([test \"$enable_embedded_mode\" != \"yes\"],\n      [AS_IF([test ! -d \"$srcdir/doc\"],\n             [AC_MSG_WARN([The hwloc source tree looks incomplete for a standalone])\n              AC_MSG_WARN([build.  Perhaps this hwloc tree is intended for an embedded])\n              AC_MSG_WARN([build?  Try using the --enable-embedded-mode switch.])\n              AC_MSG_ERROR([Cannot build standalone hwloc])],\n             [HWLOC_BUILD_STANDALONE])])\n\n####################################################################\n# Setup for the hwloc API\n####################################################################\n\nAC_SUBST([libhwloc_so_version])\n\n# Setup the hwloc core\nHWLOC_SETUP_CORE([], [], [AC_MSG_ERROR([Cannot build hwloc core])], [1])\n\n####################################################################\n# Setup the netloc API\n####################################################################\n\nAC_SUBST([libnetloc_so_version])\n\nAC_ARG_ENABLE([netloc],\n              [AC_HELP_STRING([--enable-netloc],\n                              [The Netloc functionality is disabled by default. Using --enable-netloc will cause configure to abort if Netloc cannot be build (e.g., not supported on your platform).])\n              ])\n\nAS_IF([test \"$enable_netloc\" = \"yes\" -a \"$hwloc_mode\" = \"standalone\"],\n      [NETLOC_SETUP_CORE([], [],\n           [AS_IF([test \"$enable_netloc\" = \"yes\"],\n                  [AC_MSG_ERROR([Cannot build netloc core])])\n           ],\n           [1])\n      ])\n\n####################################################################\n# Version information\n####################################################################\n\n# HWLOC_VERSION was setup by HWLOC_SETUP_CORE above.\n\n# Make configure depend on the VERSION file, since it's used in AC_INIT\nAC_SUBST([CONFIGURE_DEPENDENCIES], ['$(top_srcdir)/VERSION'])\n\n# Override/fixup the version numbers set by AC_INIT, since on\n# developer builds, there's no good way to know what the version is\n# before running configure :(.  We only use the base version number\n# for the version set in AC_INIT.  This will always match reality\n# because we add the VERSION file (the only way to change the\n# major.minor.release{greek}) into the configure dependencies.\nPACKAGE_VERSION=\"$HWLOC_VERSION\"\nPACKAGE_STRING=\"${PACKAGE_NAME} ${PACKAGE_VERSION}\"\nVERSION=\"${PACKAGE_VERSION}\"\n\n# For standalone configurations, we also include a .so version number.\n\n. $srcdir/VERSION\n\n####################################################################\n# Setup the rest of the infrastructure\n####################################################################\n\n# Setup hwloc's docs, utils, and tests\nAS_IF([test \"$hwloc_mode\" = \"standalone\"],\n      [HWLOC_SETUP_DOCS\n       HWLOC_SETUP_UTILS\n       HWLOC_SETUP_TESTS])\n\ncat <<EOF\n\n###\n### Performing final hwloc configuration\n###\nEOF\n\n# Run the AM_CONDITIONALs\nHWLOC_DO_AM_CONDITIONALS\nNETLOC_DO_AM_CONDITIONALS\n\n####################################################################\n# Final output\n####################################################################\n\n# Set the final flags\nCFLAGS=\"$HWLOC_EMBEDDED_CFLAGS $CFLAGS\"\nCPPFLAGS=\"$HWLOC_EMBEDDED_CPPFLAGS $CPPFLAGS\"\nLIBS=\"$HWLOC_EMBEDDED_LIBS $LIBS\"\n\n# Party on\nAC_OUTPUT\n\n# Warn if we didn't have pkg-config\nif test \"x$PKG_CONFIG\" = x; then\n  cat << EOF\n\n************************************************************************\nCould not detect/enable some features such as libxml2 and Cairo support\nbecause pkg-config isn't available.\n************************************************************************\nEOF\nfi\n\n# Show which optional support we'll be building\nhwloc_xml_status=basic\nAS_IF([test \"$hwloc_libxml2_happy\" = \"yes\"], [hwloc_xml_status=full])\nnetloc_status=no\nAS_IF([test \"$netloc_happy\" = \"yes\"], [\n  netlocscotch_status=without\n  AS_IF([test \"$scotch_found_headers\" = \"yes\"], [netlocscotch_status=with])\n  netloc_status=\"yes ($netlocscotch_status scotch)\"\n])\n\nAS_IF([test \"$enable_embedded_mode\" = \"yes\"],\n      [hwloc_graphical_lstopo_status=\"no (disabled in embedded mode)\"],\n      [AS_IF([test \"$hwloc_windows\" = \"yes\"],\n             [hwloc_graphical_lstopo_status=\"yes (Windows)\"],\n             [AS_IF([test \"$hwloc_cairo_happy\" = \"yes\"],\n                    [AS_IF([test \"$lstopo_have_x11\" = \"yes\"],\n                           [hwloc_graphical_lstopo_status=\"yes (Cairo)\"],\n                           [hwloc_graphical_lstopo_status=\"partial (Cairo, without X11)\"])],\n                    [hwloc_graphical_lstopo_status=\"no\"])\n             ])\n      ])\n\n# Prepare the I/O summary\nhwloc_probeio_list=\nif test \"x$hwloc_pciaccess_happy\" = \"xyes\" -o \"x$hwloc_linuxpci_happy\" = \"xyes\"; then\n  test \"x$hwloc_pciaccess_happy\" = \"xyes\" && hwloc_probepci_list=pciaccess\n  test \"x$hwloc_pciaccess_happy$hwloc_linuxpci_happy\" = \"xyesyes\" && hwloc_probepci_list=\"${hwloc_probepci_list}+\"\n  test \"x$hwloc_linuxio_happy\" = \"xyes\" && hwloc_probepci_list=\"${hwloc_probepci_list}linux\"\n  hwloc_probeio_list=\"$hwloc_probeio_list PCI($hwloc_probepci_list)\"\nfi\ntest \"x$hwloc_linuxio_happy\" = \"xyes\" && hwloc_probeio_list=\"$hwloc_probeio_list LinuxIO\"\ntest \"x$hwloc_opencl_happy\" = \"xyes\" && hwloc_probeio_list=\"$hwloc_probeio_list OpenCL\"\ntest \"x$hwloc_have_cudart\" = \"xyes\" && hwloc_probeio_list=\"$hwloc_probeio_list CUDA\"\ntest \"x$hwloc_nvml_happy\" = \"xyes\" && hwloc_probeio_list=\"$hwloc_probeio_list NVML\"\ntest \"x$hwloc_gl_happy\" = \"xyes\" && hwloc_probeio_list=\"$hwloc_probeio_list GL\"\n# if nothing, say \"no\"\ntest \"x$hwloc_probeio_list\" = \"x\" && hwloc_probeio_list=\" no\"\n\n# Beginning of generic support\ncat <<EOF\n\n-----------------------------------------------------------------------------\nHwloc optional build support status (more details can be found above):\n\nProbe / display I/O devices:$hwloc_probeio_list\nGraphical output:            $hwloc_graphical_lstopo_status\nXML input / output:          $hwloc_xml_status\nNetloc functionality:        $netloc_status\nEOF\n\n# Plugin support\nhwloc_plugin_summary=$hwloc_have_plugins\ntest \"x$hwloc_plugin_components\" != \"x\" && hwloc_plugin_summary=\"$hwloc_plugins_load (\"`echo $hwloc_plugin_components`\")\" # echo removes the starting space\ncat <<EOF\nPlugin support:              $hwloc_plugin_summary\nEOF\n\n# End of generic support\ncat <<EOF\n-----------------------------------------------------------------------------\n\nEOF\n",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/config/libtool.m4": "# libtool.m4 - Configure libtool for the host system. -*-Autoconf-*-\n#\n#   Copyright (C) 1996-2001, 2003-2015 Free Software Foundation, Inc.\n#   Written by Gordon Matzigkeit, 1996\n#\n# This file is free software; the Free Software Foundation gives\n# unlimited permission to copy and/or distribute it, with or without\n# modifications, as long as this notice is preserved.\n\nm4_define([_LT_COPYING], [dnl\n# Copyright (C) 2014 Free Software Foundation, Inc.\n# This is free software; see the source for copying conditions.  There is NO\n# warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# GNU Libtool is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2 of of the License, or\n# (at your option) any later version.\n#\n# As a special exception to the GNU General Public License, if you\n# distribute this file as part of a program or library that is built\n# using GNU Libtool, you may include this file under the  same\n# distribution terms that you use for the rest of that program.\n#\n# GNU Libtool is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n])\n\n# serial 58 LT_INIT\n\n\n# LT_PREREQ(VERSION)\n# ------------------\n# Complain and exit if this libtool version is less that VERSION.\nm4_defun([LT_PREREQ],\n[m4_if(m4_version_compare(m4_defn([LT_PACKAGE_VERSION]), [$1]), -1,\n       [m4_default([$3],\n\t\t   [m4_fatal([Libtool version $1 or higher is required],\n\t\t             63)])],\n       [$2])])\n\n\n# _LT_CHECK_BUILDDIR\n# ------------------\n# Complain if the absolute build directory name contains unusual characters\nm4_defun([_LT_CHECK_BUILDDIR],\n[case `pwd` in\n  *\\ * | *\\\t*)\n    AC_MSG_WARN([Libtool does not cope well with whitespace in `pwd`]) ;;\nesac\n])\n\n\n# LT_INIT([OPTIONS])\n# ------------------\nAC_DEFUN([LT_INIT],\n[AC_PREREQ([2.62])dnl We use AC_PATH_PROGS_FEATURE_CHECK\nAC_REQUIRE([AC_CONFIG_AUX_DIR_DEFAULT])dnl\nAC_BEFORE([$0], [LT_LANG])dnl\nAC_BEFORE([$0], [LT_OUTPUT])dnl\nAC_BEFORE([$0], [LTDL_INIT])dnl\nm4_require([_LT_CHECK_BUILDDIR])dnl\n\ndnl Autoconf doesn't catch unexpanded LT_ macros by default:\nm4_pattern_forbid([^_?LT_[A-Z_]+$])dnl\nm4_pattern_allow([^(_LT_EOF|LT_DLGLOBAL|LT_DLLAZY_OR_NOW|LT_MULTI_MODULE)$])dnl\ndnl aclocal doesn't pull ltoptions.m4, ltsugar.m4, or ltversion.m4\ndnl unless we require an AC_DEFUNed macro:\nAC_REQUIRE([LTOPTIONS_VERSION])dnl\nAC_REQUIRE([LTSUGAR_VERSION])dnl\nAC_REQUIRE([LTVERSION_VERSION])dnl\nAC_REQUIRE([LTOBSOLETE_VERSION])dnl\nm4_require([_LT_PROG_LTMAIN])dnl\n\n_LT_SHELL_INIT([SHELL=${CONFIG_SHELL-/bin/sh}])\n\ndnl Parse OPTIONS\n_LT_SET_OPTIONS([$0], [$1])\n\n# This can be used to rebuild libtool when needed\nLIBTOOL_DEPS=$ltmain\n\n# Always use our own libtool.\nLIBTOOL='$(SHELL) $(top_builddir)/libtool'\nAC_SUBST(LIBTOOL)dnl\n\n_LT_SETUP\n\n# Only expand once:\nm4_define([LT_INIT])\n])# LT_INIT\n\n# Old names:\nAU_ALIAS([AC_PROG_LIBTOOL], [LT_INIT])\nAU_ALIAS([AM_PROG_LIBTOOL], [LT_INIT])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_PROG_LIBTOOL], [])\ndnl AC_DEFUN([AM_PROG_LIBTOOL], [])\n\n\n# _LT_PREPARE_CC_BASENAME\n# -----------------------\nm4_defun([_LT_PREPARE_CC_BASENAME], [\n# Calculate cc_basename.  Skip known compiler wrappers and cross-prefix.\nfunc_cc_basename ()\n{\n    for cc_temp in @S|@*\"\"; do\n      case $cc_temp in\n        compile | *[[\\\\/]]compile | ccache | *[[\\\\/]]ccache ) ;;\n        distcc | *[[\\\\/]]distcc | purify | *[[\\\\/]]purify ) ;;\n        \\-*) ;;\n        *) break;;\n      esac\n    done\n    func_cc_basename_result=`$ECHO \"$cc_temp\" | $SED \"s%.*/%%; s%^$host_alias-%%\"`\n}\n])# _LT_PREPARE_CC_BASENAME\n\n\n# _LT_CC_BASENAME(CC)\n# -------------------\n# It would be clearer to call AC_REQUIREs from _LT_PREPARE_CC_BASENAME,\n# but that macro is also expanded into generated libtool script, which\n# arranges for $SED and $ECHO to be set by different means.\nm4_defun([_LT_CC_BASENAME],\n[m4_require([_LT_PREPARE_CC_BASENAME])dnl\nAC_REQUIRE([_LT_DECL_SED])dnl\nAC_REQUIRE([_LT_PROG_ECHO_BACKSLASH])dnl\nfunc_cc_basename $1\ncc_basename=$func_cc_basename_result\n])\n\n\n# _LT_FILEUTILS_DEFAULTS\n# ----------------------\n# It is okay to use these file commands and assume they have been set\n# sensibly after 'm4_require([_LT_FILEUTILS_DEFAULTS])'.\nm4_defun([_LT_FILEUTILS_DEFAULTS],\n[: ${CP=\"cp -f\"}\n: ${MV=\"mv -f\"}\n: ${RM=\"rm -f\"}\n])# _LT_FILEUTILS_DEFAULTS\n\n\n# _LT_SETUP\n# ---------\nm4_defun([_LT_SETUP],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_CANONICAL_BUILD])dnl\nAC_REQUIRE([_LT_PREPARE_SED_QUOTE_VARS])dnl\nAC_REQUIRE([_LT_PROG_ECHO_BACKSLASH])dnl\n\n_LT_DECL([], [PATH_SEPARATOR], [1], [The PATH separator for the build system])dnl\ndnl\n_LT_DECL([], [host_alias], [0], [The host system])dnl\n_LT_DECL([], [host], [0])dnl\n_LT_DECL([], [host_os], [0])dnl\ndnl\n_LT_DECL([], [build_alias], [0], [The build system])dnl\n_LT_DECL([], [build], [0])dnl\n_LT_DECL([], [build_os], [0])dnl\ndnl\nAC_REQUIRE([AC_PROG_CC])dnl\nAC_REQUIRE([LT_PATH_LD])dnl\nAC_REQUIRE([LT_PATH_NM])dnl\ndnl\nAC_REQUIRE([AC_PROG_LN_S])dnl\ntest -z \"$LN_S\" && LN_S=\"ln -s\"\n_LT_DECL([], [LN_S], [1], [Whether we need soft or hard links])dnl\ndnl\nAC_REQUIRE([LT_CMD_MAX_LEN])dnl\n_LT_DECL([objext], [ac_objext], [0], [Object file suffix (normally \"o\")])dnl\n_LT_DECL([], [exeext], [0], [Executable file suffix (normally \"\")])dnl\ndnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_CHECK_SHELL_FEATURES])dnl\nm4_require([_LT_PATH_CONVERSION_FUNCTIONS])dnl\nm4_require([_LT_CMD_RELOAD])dnl\nm4_require([_LT_CHECK_MAGIC_METHOD])dnl\nm4_require([_LT_CHECK_SHAREDLIB_FROM_LINKLIB])dnl\nm4_require([_LT_CMD_OLD_ARCHIVE])dnl\nm4_require([_LT_CMD_GLOBAL_SYMBOLS])dnl\nm4_require([_LT_WITH_SYSROOT])dnl\nm4_require([_LT_CMD_TRUNCATE])dnl\n\n_LT_CONFIG_LIBTOOL_INIT([\n# See if we are running on zsh, and set the options that allow our\n# commands through without removal of \\ escapes INIT.\nif test -n \"\\${ZSH_VERSION+set}\"; then\n   setopt NO_GLOB_SUBST\nfi\n])\nif test -n \"${ZSH_VERSION+set}\"; then\n   setopt NO_GLOB_SUBST\nfi\n\n_LT_CHECK_OBJDIR\n\nm4_require([_LT_TAG_COMPILER])dnl\n\ncase $host_os in\naix3*)\n  # AIX sometimes has problems with the GCC collect2 program.  For some\n  # reason, if we set the COLLECT_NAMES environment variable, the problems\n  # vanish in a puff of smoke.\n  if test set != \"${COLLECT_NAMES+set}\"; then\n    COLLECT_NAMES=\n    export COLLECT_NAMES\n  fi\n  ;;\nesac\n\n# Global variables:\nofile=libtool\ncan_build_shared=yes\n\n# All known linkers require a '.a' archive for static linking (except MSVC,\n# which needs '.lib').\nlibext=a\n\nwith_gnu_ld=$lt_cv_prog_gnu_ld\n\nold_CC=$CC\nold_CFLAGS=$CFLAGS\n\n# Set sane defaults for various variables\ntest -z \"$CC\" && CC=cc\ntest -z \"$LTCC\" && LTCC=$CC\ntest -z \"$LTCFLAGS\" && LTCFLAGS=$CFLAGS\ntest -z \"$LD\" && LD=ld\ntest -z \"$ac_objext\" && ac_objext=o\n\n_LT_CC_BASENAME([$compiler])\n\n# Only perform the check for file, if the check method requires it\ntest -z \"$MAGIC_CMD\" && MAGIC_CMD=file\ncase $deplibs_check_method in\nfile_magic*)\n  if test \"$file_magic_cmd\" = '$MAGIC_CMD'; then\n    _LT_PATH_MAGIC\n  fi\n  ;;\nesac\n\n# Use C for the default configuration in the libtool script\nLT_SUPPORTED_TAG([CC])\n_LT_LANG_C_CONFIG\n_LT_LANG_DEFAULT_CONFIG\n_LT_CONFIG_COMMANDS\n])# _LT_SETUP\n\n\n# _LT_PREPARE_SED_QUOTE_VARS\n# --------------------------\n# Define a few sed substitution that help us do robust quoting.\nm4_defun([_LT_PREPARE_SED_QUOTE_VARS],\n[# Backslashify metacharacters that are still active within\n# double-quoted strings.\nsed_quote_subst='s/\\([[\"`$\\\\]]\\)/\\\\\\1/g'\n\n# Same as above, but do not quote variable references.\ndouble_quote_subst='s/\\([[\"`\\\\]]\\)/\\\\\\1/g'\n\n# Sed substitution to delay expansion of an escaped shell variable in a\n# double_quote_subst'ed string.\ndelay_variable_subst='s/\\\\\\\\\\\\\\\\\\\\\\$/\\\\\\\\\\\\$/g'\n\n# Sed substitution to delay expansion of an escaped single quote.\ndelay_single_quote_subst='s/'\\''/'\\'\\\\\\\\\\\\\\'\\''/g'\n\n# Sed substitution to avoid accidental globbing in evaled expressions\nno_glob_subst='s/\\*/\\\\\\*/g'\n])\n\n# _LT_PROG_LTMAIN\n# ---------------\n# Note that this code is called both from 'configure', and 'config.status'\n# now that we use AC_CONFIG_COMMANDS to generate libtool.  Notably,\n# 'config.status' has no value for ac_aux_dir unless we are using Automake,\n# so we pass a copy along to make sure it has a sensible value anyway.\nm4_defun([_LT_PROG_LTMAIN],\n[m4_ifdef([AC_REQUIRE_AUX_FILE], [AC_REQUIRE_AUX_FILE([ltmain.sh])])dnl\n_LT_CONFIG_LIBTOOL_INIT([ac_aux_dir='$ac_aux_dir'])\nltmain=$ac_aux_dir/ltmain.sh\n])# _LT_PROG_LTMAIN\n\n\n## ------------------------------------- ##\n## Accumulate code for creating libtool. ##\n## ------------------------------------- ##\n\n# So that we can recreate a full libtool script including additional\n# tags, we accumulate the chunks of code to send to AC_CONFIG_COMMANDS\n# in macros and then make a single call at the end using the 'libtool'\n# label.\n\n\n# _LT_CONFIG_LIBTOOL_INIT([INIT-COMMANDS])\n# ----------------------------------------\n# Register INIT-COMMANDS to be passed to AC_CONFIG_COMMANDS later.\nm4_define([_LT_CONFIG_LIBTOOL_INIT],\n[m4_ifval([$1],\n          [m4_append([_LT_OUTPUT_LIBTOOL_INIT],\n                     [$1\n])])])\n\n# Initialize.\nm4_define([_LT_OUTPUT_LIBTOOL_INIT])\n\n\n# _LT_CONFIG_LIBTOOL([COMMANDS])\n# ------------------------------\n# Register COMMANDS to be passed to AC_CONFIG_COMMANDS later.\nm4_define([_LT_CONFIG_LIBTOOL],\n[m4_ifval([$1],\n          [m4_append([_LT_OUTPUT_LIBTOOL_COMMANDS],\n                     [$1\n])])])\n\n# Initialize.\nm4_define([_LT_OUTPUT_LIBTOOL_COMMANDS])\n\n\n# _LT_CONFIG_SAVE_COMMANDS([COMMANDS], [INIT_COMMANDS])\n# -----------------------------------------------------\nm4_defun([_LT_CONFIG_SAVE_COMMANDS],\n[_LT_CONFIG_LIBTOOL([$1])\n_LT_CONFIG_LIBTOOL_INIT([$2])\n])\n\n\n# _LT_FORMAT_COMMENT([COMMENT])\n# -----------------------------\n# Add leading comment marks to the start of each line, and a trailing\n# full-stop to the whole comment if one is not present already.\nm4_define([_LT_FORMAT_COMMENT],\n[m4_ifval([$1], [\nm4_bpatsubst([m4_bpatsubst([$1], [^ *], [# ])],\n              [['`$\\]], [\\\\\\&])]m4_bmatch([$1], [[!?.]$], [], [.])\n)])\n\n\n\n## ------------------------ ##\n## FIXME: Eliminate VARNAME ##\n## ------------------------ ##\n\n\n# _LT_DECL([CONFIGNAME], VARNAME, VALUE, [DESCRIPTION], [IS-TAGGED?])\n# -------------------------------------------------------------------\n# CONFIGNAME is the name given to the value in the libtool script.\n# VARNAME is the (base) name used in the configure script.\n# VALUE may be 0, 1 or 2 for a computed quote escaped value based on\n# VARNAME.  Any other value will be used directly.\nm4_define([_LT_DECL],\n[lt_if_append_uniq([lt_decl_varnames], [$2], [, ],\n    [lt_dict_add_subkey([lt_decl_dict], [$2], [libtool_name],\n\t[m4_ifval([$1], [$1], [$2])])\n    lt_dict_add_subkey([lt_decl_dict], [$2], [value], [$3])\n    m4_ifval([$4],\n\t[lt_dict_add_subkey([lt_decl_dict], [$2], [description], [$4])])\n    lt_dict_add_subkey([lt_decl_dict], [$2],\n\t[tagged?], [m4_ifval([$5], [yes], [no])])])\n])\n\n\n# _LT_TAGDECL([CONFIGNAME], VARNAME, VALUE, [DESCRIPTION])\n# --------------------------------------------------------\nm4_define([_LT_TAGDECL], [_LT_DECL([$1], [$2], [$3], [$4], [yes])])\n\n\n# lt_decl_tag_varnames([SEPARATOR], [VARNAME1...])\n# ------------------------------------------------\nm4_define([lt_decl_tag_varnames],\n[_lt_decl_filter([tagged?], [yes], $@)])\n\n\n# _lt_decl_filter(SUBKEY, VALUE, [SEPARATOR], [VARNAME1..])\n# ---------------------------------------------------------\nm4_define([_lt_decl_filter],\n[m4_case([$#],\n  [0], [m4_fatal([$0: too few arguments: $#])],\n  [1], [m4_fatal([$0: too few arguments: $#: $1])],\n  [2], [lt_dict_filter([lt_decl_dict], [$1], [$2], [], lt_decl_varnames)],\n  [3], [lt_dict_filter([lt_decl_dict], [$1], [$2], [$3], lt_decl_varnames)],\n  [lt_dict_filter([lt_decl_dict], $@)])[]dnl\n])\n\n\n# lt_decl_quote_varnames([SEPARATOR], [VARNAME1...])\n# --------------------------------------------------\nm4_define([lt_decl_quote_varnames],\n[_lt_decl_filter([value], [1], $@)])\n\n\n# lt_decl_dquote_varnames([SEPARATOR], [VARNAME1...])\n# ---------------------------------------------------\nm4_define([lt_decl_dquote_varnames],\n[_lt_decl_filter([value], [2], $@)])\n\n\n# lt_decl_varnames_tagged([SEPARATOR], [VARNAME1...])\n# ---------------------------------------------------\nm4_define([lt_decl_varnames_tagged],\n[m4_assert([$# <= 2])dnl\n_$0(m4_quote(m4_default([$1], [[, ]])),\n    m4_ifval([$2], [[$2]], [m4_dquote(lt_decl_tag_varnames)]),\n    m4_split(m4_normalize(m4_quote(_LT_TAGS)), [ ]))])\nm4_define([_lt_decl_varnames_tagged],\n[m4_ifval([$3], [lt_combine([$1], [$2], [_], $3)])])\n\n\n# lt_decl_all_varnames([SEPARATOR], [VARNAME1...])\n# ------------------------------------------------\nm4_define([lt_decl_all_varnames],\n[_$0(m4_quote(m4_default([$1], [[, ]])),\n     m4_if([$2], [],\n\t   m4_quote(lt_decl_varnames),\n\tm4_quote(m4_shift($@))))[]dnl\n])\nm4_define([_lt_decl_all_varnames],\n[lt_join($@, lt_decl_varnames_tagged([$1],\n\t\t\tlt_decl_tag_varnames([[, ]], m4_shift($@))))dnl\n])\n\n\n# _LT_CONFIG_STATUS_DECLARE([VARNAME])\n# ------------------------------------\n# Quote a variable value, and forward it to 'config.status' so that its\n# declaration there will have the same value as in 'configure'.  VARNAME\n# must have a single quote delimited value for this to work.\nm4_define([_LT_CONFIG_STATUS_DECLARE],\n[$1='`$ECHO \"$][$1\" | $SED \"$delay_single_quote_subst\"`'])\n\n\n# _LT_CONFIG_STATUS_DECLARATIONS\n# ------------------------------\n# We delimit libtool config variables with single quotes, so when\n# we write them to config.status, we have to be sure to quote all\n# embedded single quotes properly.  In configure, this macro expands\n# each variable declared with _LT_DECL (and _LT_TAGDECL) into:\n#\n#    <var>='`$ECHO \"$<var>\" | $SED \"$delay_single_quote_subst\"`'\nm4_defun([_LT_CONFIG_STATUS_DECLARATIONS],\n[m4_foreach([_lt_var], m4_quote(lt_decl_all_varnames),\n    [m4_n([_LT_CONFIG_STATUS_DECLARE(_lt_var)])])])\n\n\n# _LT_LIBTOOL_TAGS\n# ----------------\n# Output comment and list of tags supported by the script\nm4_defun([_LT_LIBTOOL_TAGS],\n[_LT_FORMAT_COMMENT([The names of the tagged configurations supported by this script])dnl\navailable_tags='_LT_TAGS'dnl\n])\n\n\n# _LT_LIBTOOL_DECLARE(VARNAME, [TAG])\n# -----------------------------------\n# Extract the dictionary values for VARNAME (optionally with TAG) and\n# expand to a commented shell variable setting:\n#\n#    # Some comment about what VAR is for.\n#    visible_name=$lt_internal_name\nm4_define([_LT_LIBTOOL_DECLARE],\n[_LT_FORMAT_COMMENT(m4_quote(lt_dict_fetch([lt_decl_dict], [$1],\n\t\t\t\t\t   [description])))[]dnl\nm4_pushdef([_libtool_name],\n    m4_quote(lt_dict_fetch([lt_decl_dict], [$1], [libtool_name])))[]dnl\nm4_case(m4_quote(lt_dict_fetch([lt_decl_dict], [$1], [value])),\n    [0], [_libtool_name=[$]$1],\n    [1], [_libtool_name=$lt_[]$1],\n    [2], [_libtool_name=$lt_[]$1],\n    [_libtool_name=lt_dict_fetch([lt_decl_dict], [$1], [value])])[]dnl\nm4_ifval([$2], [_$2])[]m4_popdef([_libtool_name])[]dnl\n])\n\n\n# _LT_LIBTOOL_CONFIG_VARS\n# -----------------------\n# Produce commented declarations of non-tagged libtool config variables\n# suitable for insertion in the LIBTOOL CONFIG section of the 'libtool'\n# script.  Tagged libtool config variables (even for the LIBTOOL CONFIG\n# section) are produced by _LT_LIBTOOL_TAG_VARS.\nm4_defun([_LT_LIBTOOL_CONFIG_VARS],\n[m4_foreach([_lt_var],\n    m4_quote(_lt_decl_filter([tagged?], [no], [], lt_decl_varnames)),\n    [m4_n([_LT_LIBTOOL_DECLARE(_lt_var)])])])\n\n\n# _LT_LIBTOOL_TAG_VARS(TAG)\n# -------------------------\nm4_define([_LT_LIBTOOL_TAG_VARS],\n[m4_foreach([_lt_var], m4_quote(lt_decl_tag_varnames),\n    [m4_n([_LT_LIBTOOL_DECLARE(_lt_var, [$1])])])])\n\n\n# _LT_TAGVAR(VARNAME, [TAGNAME])\n# ------------------------------\nm4_define([_LT_TAGVAR], [m4_ifval([$2], [$1_$2], [$1])])\n\n\n# _LT_CONFIG_COMMANDS\n# -------------------\n# Send accumulated output to $CONFIG_STATUS.  Thanks to the lists of\n# variables for single and double quote escaping we saved from calls\n# to _LT_DECL, we can put quote escaped variables declarations\n# into 'config.status', and then the shell code to quote escape them in\n# for loops in 'config.status'.  Finally, any additional code accumulated\n# from calls to _LT_CONFIG_LIBTOOL_INIT is expanded.\nm4_defun([_LT_CONFIG_COMMANDS],\n[AC_PROVIDE_IFELSE([LT_OUTPUT],\n\tdnl If the libtool generation code has been placed in $CONFIG_LT,\n\tdnl instead of duplicating it all over again into config.status,\n\tdnl then we will have config.status run $CONFIG_LT later, so it\n\tdnl needs to know what name is stored there:\n        [AC_CONFIG_COMMANDS([libtool],\n            [$SHELL $CONFIG_LT || AS_EXIT(1)], [CONFIG_LT='$CONFIG_LT'])],\n    dnl If the libtool generation code is destined for config.status,\n    dnl expand the accumulated commands and init code now:\n    [AC_CONFIG_COMMANDS([libtool],\n        [_LT_OUTPUT_LIBTOOL_COMMANDS], [_LT_OUTPUT_LIBTOOL_COMMANDS_INIT])])\n])#_LT_CONFIG_COMMANDS\n\n\n# Initialize.\nm4_define([_LT_OUTPUT_LIBTOOL_COMMANDS_INIT],\n[\n\n# The HP-UX ksh and POSIX shell print the target directory to stdout\n# if CDPATH is set.\n(unset CDPATH) >/dev/null 2>&1 && unset CDPATH\n\nsed_quote_subst='$sed_quote_subst'\ndouble_quote_subst='$double_quote_subst'\ndelay_variable_subst='$delay_variable_subst'\n_LT_CONFIG_STATUS_DECLARATIONS\nLTCC='$LTCC'\nLTCFLAGS='$LTCFLAGS'\ncompiler='$compiler_DEFAULT'\n\n# A function that is used when there is no print builtin or printf.\nfunc_fallback_echo ()\n{\n  eval 'cat <<_LTECHO_EOF\n\\$[]1\n_LTECHO_EOF'\n}\n\n# Quote evaled strings.\nfor var in lt_decl_all_varnames([[ \\\n]], lt_decl_quote_varnames); do\n    case \\`eval \\\\\\\\\\$ECHO \\\\\\\\\"\"\\\\\\\\\\$\\$var\"\\\\\\\\\"\\` in\n    *[[\\\\\\\\\\\\\\`\\\\\"\\\\\\$]]*)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\`\\\\\\$ECHO \\\\\"\\\\\\$\\$var\\\\\" | \\\\\\$SED \\\\\"\\\\\\$sed_quote_subst\\\\\"\\\\\\`\\\\\\\\\\\\\"\" ## exclude from sc_prohibit_nested_quotes\n      ;;\n    *)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\$\\$var\\\\\\\\\\\\\"\"\n      ;;\n    esac\ndone\n\n# Double-quote double-evaled strings.\nfor var in lt_decl_all_varnames([[ \\\n]], lt_decl_dquote_varnames); do\n    case \\`eval \\\\\\\\\\$ECHO \\\\\\\\\"\"\\\\\\\\\\$\\$var\"\\\\\\\\\"\\` in\n    *[[\\\\\\\\\\\\\\`\\\\\"\\\\\\$]]*)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\`\\\\\\$ECHO \\\\\"\\\\\\$\\$var\\\\\" | \\\\\\$SED -e \\\\\"\\\\\\$double_quote_subst\\\\\" -e \\\\\"\\\\\\$sed_quote_subst\\\\\" -e \\\\\"\\\\\\$delay_variable_subst\\\\\"\\\\\\`\\\\\\\\\\\\\"\" ## exclude from sc_prohibit_nested_quotes\n      ;;\n    *)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\$\\$var\\\\\\\\\\\\\"\"\n      ;;\n    esac\ndone\n\n_LT_OUTPUT_LIBTOOL_INIT\n])\n\n# _LT_GENERATED_FILE_INIT(FILE, [COMMENT])\n# ------------------------------------\n# Generate a child script FILE with all initialization necessary to\n# reuse the environment learned by the parent script, and make the\n# file executable.  If COMMENT is supplied, it is inserted after the\n# '#!' sequence but before initialization text begins.  After this\n# macro, additional text can be appended to FILE to form the body of\n# the child script.  The macro ends with non-zero status if the\n# file could not be fully written (such as if the disk is full).\nm4_ifdef([AS_INIT_GENERATED],\n[m4_defun([_LT_GENERATED_FILE_INIT],[AS_INIT_GENERATED($@)])],\n[m4_defun([_LT_GENERATED_FILE_INIT],\n[m4_require([AS_PREPARE])]dnl\n[m4_pushdef([AS_MESSAGE_LOG_FD])]dnl\n[lt_write_fail=0\ncat >$1 <<_ASEOF || lt_write_fail=1\n#! $SHELL\n# Generated by $as_me.\n$2\nSHELL=\\${CONFIG_SHELL-$SHELL}\nexport SHELL\n_ASEOF\ncat >>$1 <<\\_ASEOF || lt_write_fail=1\nAS_SHELL_SANITIZE\n_AS_PREPARE\nexec AS_MESSAGE_FD>&1\n_ASEOF\ntest 0 = \"$lt_write_fail\" && chmod +x $1[]dnl\nm4_popdef([AS_MESSAGE_LOG_FD])])])# _LT_GENERATED_FILE_INIT\n\n# LT_OUTPUT\n# ---------\n# This macro allows early generation of the libtool script (before\n# AC_OUTPUT is called), incase it is used in configure for compilation\n# tests.\nAC_DEFUN([LT_OUTPUT],\n[: ${CONFIG_LT=./config.lt}\nAC_MSG_NOTICE([creating $CONFIG_LT])\n_LT_GENERATED_FILE_INIT([\"$CONFIG_LT\"],\n[# Run this file to recreate a libtool stub with the current configuration.])\n\ncat >>\"$CONFIG_LT\" <<\\_LTEOF\nlt_cl_silent=false\nexec AS_MESSAGE_LOG_FD>>config.log\n{\n  echo\n  AS_BOX([Running $as_me.])\n} >&AS_MESSAGE_LOG_FD\n\nlt_cl_help=\"\\\n'$as_me' creates a local libtool stub from the current configuration,\nfor use in further configure time tests before the real libtool is\ngenerated.\n\nUsage: $[0] [[OPTIONS]]\n\n  -h, --help      print this help, then exit\n  -V, --version   print version number, then exit\n  -q, --quiet     do not print progress messages\n  -d, --debug     don't remove temporary files\n\nReport bugs to <bug-libtool@gnu.org>.\"\n\nlt_cl_version=\"\\\nm4_ifset([AC_PACKAGE_NAME], [AC_PACKAGE_NAME ])config.lt[]dnl\nm4_ifset([AC_PACKAGE_VERSION], [ AC_PACKAGE_VERSION])\nconfigured by $[0], generated by m4_PACKAGE_STRING.\n\nCopyright (C) 2011 Free Software Foundation, Inc.\nThis config.lt script is free software; the Free Software Foundation\ngives unlimited permision to copy, distribute and modify it.\"\n\nwhile test 0 != $[#]\ndo\n  case $[1] in\n    --version | --v* | -V )\n      echo \"$lt_cl_version\"; exit 0 ;;\n    --help | --h* | -h )\n      echo \"$lt_cl_help\"; exit 0 ;;\n    --debug | --d* | -d )\n      debug=: ;;\n    --quiet | --q* | --silent | --s* | -q )\n      lt_cl_silent=: ;;\n\n    -*) AC_MSG_ERROR([unrecognized option: $[1]\nTry '$[0] --help' for more information.]) ;;\n\n    *) AC_MSG_ERROR([unrecognized argument: $[1]\nTry '$[0] --help' for more information.]) ;;\n  esac\n  shift\ndone\n\nif $lt_cl_silent; then\n  exec AS_MESSAGE_FD>/dev/null\nfi\n_LTEOF\n\ncat >>\"$CONFIG_LT\" <<_LTEOF\n_LT_OUTPUT_LIBTOOL_COMMANDS_INIT\n_LTEOF\n\ncat >>\"$CONFIG_LT\" <<\\_LTEOF\nAC_MSG_NOTICE([creating $ofile])\n_LT_OUTPUT_LIBTOOL_COMMANDS\nAS_EXIT(0)\n_LTEOF\nchmod +x \"$CONFIG_LT\"\n\n# configure is writing to config.log, but config.lt does its own redirection,\n# appending to config.log, which fails on DOS, as config.log is still kept\n# open by configure.  Here we exec the FD to /dev/null, effectively closing\n# config.log, so it can be properly (re)opened and appended to by config.lt.\nlt_cl_success=:\ntest yes = \"$silent\" &&\n  lt_config_lt_args=\"$lt_config_lt_args --quiet\"\nexec AS_MESSAGE_LOG_FD>/dev/null\n$SHELL \"$CONFIG_LT\" $lt_config_lt_args || lt_cl_success=false\nexec AS_MESSAGE_LOG_FD>>config.log\n$lt_cl_success || AS_EXIT(1)\n])# LT_OUTPUT\n\n\n# _LT_CONFIG(TAG)\n# ---------------\n# If TAG is the built-in tag, create an initial libtool script with a\n# default configuration from the untagged config vars.  Otherwise add code\n# to config.status for appending the configuration named by TAG from the\n# matching tagged config vars.\nm4_defun([_LT_CONFIG],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\n_LT_CONFIG_SAVE_COMMANDS([\n  m4_define([_LT_TAG], m4_if([$1], [], [C], [$1]))dnl\n  m4_if(_LT_TAG, [C], [\n    # See if we are running on zsh, and set the options that allow our\n    # commands through without removal of \\ escapes.\n    if test -n \"${ZSH_VERSION+set}\"; then\n      setopt NO_GLOB_SUBST\n    fi\n\n    cfgfile=${ofile}T\n    trap \"$RM \\\"$cfgfile\\\"; exit 1\" 1 2 15\n    $RM \"$cfgfile\"\n\n    cat <<_LT_EOF >> \"$cfgfile\"\n#! $SHELL\n# Generated automatically by $as_me ($PACKAGE) $VERSION\n# Libtool was configured on host `(hostname || uname -n) 2>/dev/null | sed 1q`:\n# NOTE: Changes made to this file will be lost: look at ltmain.sh.\n\n# Provide generalized library-building support services.\n# Written by Gordon Matzigkeit, 1996\n\n_LT_COPYING\n_LT_LIBTOOL_TAGS\n\n# Configured defaults for sys_lib_dlsearch_path munging.\n: \\${LT_SYS_LIBRARY_PATH=\"$configure_time_lt_sys_library_path\"}\n\n# ### BEGIN LIBTOOL CONFIG\n_LT_LIBTOOL_CONFIG_VARS\n_LT_LIBTOOL_TAG_VARS\n# ### END LIBTOOL CONFIG\n\n_LT_EOF\n\n    cat <<'_LT_EOF' >> \"$cfgfile\"\n\n# ### BEGIN FUNCTIONS SHARED WITH CONFIGURE\n\n_LT_PREPARE_MUNGE_PATH_LIST\n_LT_PREPARE_CC_BASENAME\n\n# ### END FUNCTIONS SHARED WITH CONFIGURE\n\n_LT_EOF\n\n  case $host_os in\n  aix3*)\n    cat <<\\_LT_EOF >> \"$cfgfile\"\n# AIX sometimes has problems with the GCC collect2 program.  For some\n# reason, if we set the COLLECT_NAMES environment variable, the problems\n# vanish in a puff of smoke.\nif test set != \"${COLLECT_NAMES+set}\"; then\n  COLLECT_NAMES=\n  export COLLECT_NAMES\nfi\n_LT_EOF\n    ;;\n  esac\n\n  _LT_PROG_LTMAIN\n\n  # We use sed instead of cat because bash on DJGPP gets confused if\n  # if finds mixed CR/LF and LF-only lines.  Since sed operates in\n  # text mode, it properly converts lines to CR/LF.  This bash problem\n  # is reportedly fixed, but why not run on old versions too?\n  sed '$q' \"$ltmain\" >> \"$cfgfile\" \\\n     || (rm -f \"$cfgfile\"; exit 1)\n\n   mv -f \"$cfgfile\" \"$ofile\" ||\n    (rm -f \"$ofile\" && cp \"$cfgfile\" \"$ofile\" && rm -f \"$cfgfile\")\n  chmod +x \"$ofile\"\n],\n[cat <<_LT_EOF >> \"$ofile\"\n\ndnl Unfortunately we have to use $1 here, since _LT_TAG is not expanded\ndnl in a comment (ie after a #).\n# ### BEGIN LIBTOOL TAG CONFIG: $1\n_LT_LIBTOOL_TAG_VARS(_LT_TAG)\n# ### END LIBTOOL TAG CONFIG: $1\n_LT_EOF\n])dnl /m4_if\n],\n[m4_if([$1], [], [\n    PACKAGE='$PACKAGE'\n    VERSION='$VERSION'\n    RM='$RM'\n    ofile='$ofile'], [])\n])dnl /_LT_CONFIG_SAVE_COMMANDS\n])# _LT_CONFIG\n\n\n# LT_SUPPORTED_TAG(TAG)\n# ---------------------\n# Trace this macro to discover what tags are supported by the libtool\n# --tag option, using:\n#    autoconf --trace 'LT_SUPPORTED_TAG:$1'\nAC_DEFUN([LT_SUPPORTED_TAG], [])\n\n\n# C support is built-in for now\nm4_define([_LT_LANG_C_enabled], [])\nm4_define([_LT_TAGS], [])\n\n\n# LT_LANG(LANG)\n# -------------\n# Enable libtool support for the given language if not already enabled.\nAC_DEFUN([LT_LANG],\n[AC_BEFORE([$0], [LT_OUTPUT])dnl\nm4_case([$1],\n  [C],\t\t\t[_LT_LANG(C)],\n  [C++],\t\t[_LT_LANG(CXX)],\n  [Go],\t\t\t[_LT_LANG(GO)],\n  [Java],\t\t[_LT_LANG(GCJ)],\n  [Fortran 77],\t\t[_LT_LANG(F77)],\n  [Fortran],\t\t[_LT_LANG(FC)],\n  [Windows Resource],\t[_LT_LANG(RC)],\n  [m4_ifdef([_LT_LANG_]$1[_CONFIG],\n    [_LT_LANG($1)],\n    [m4_fatal([$0: unsupported language: \"$1\"])])])dnl\n])# LT_LANG\n\n\n# _LT_LANG(LANGNAME)\n# ------------------\nm4_defun([_LT_LANG],\n[m4_ifdef([_LT_LANG_]$1[_enabled], [],\n  [LT_SUPPORTED_TAG([$1])dnl\n  m4_append([_LT_TAGS], [$1 ])dnl\n  m4_define([_LT_LANG_]$1[_enabled], [])dnl\n  _LT_LANG_$1_CONFIG($1)])dnl\n])# _LT_LANG\n\n\nm4_ifndef([AC_PROG_GO], [\n############################################################\n# NOTE: This macro has been submitted for inclusion into   #\n#  GNU Autoconf as AC_PROG_GO.  When it is available in    #\n#  a released version of Autoconf we should remove this    #\n#  macro and use it instead.                               #\n############################################################\nm4_defun([AC_PROG_GO],\n[AC_LANG_PUSH(Go)dnl\nAC_ARG_VAR([GOC],     [Go compiler command])dnl\nAC_ARG_VAR([GOFLAGS], [Go compiler flags])dnl\n_AC_ARG_VAR_LDFLAGS()dnl\nAC_CHECK_TOOL(GOC, gccgo)\nif test -z \"$GOC\"; then\n  if test -n \"$ac_tool_prefix\"; then\n    AC_CHECK_PROG(GOC, [${ac_tool_prefix}gccgo], [${ac_tool_prefix}gccgo])\n  fi\nfi\nif test -z \"$GOC\"; then\n  AC_CHECK_PROG(GOC, gccgo, gccgo, false)\nfi\n])#m4_defun\n])#m4_ifndef\n\n\n# _LT_LANG_DEFAULT_CONFIG\n# -----------------------\nm4_defun([_LT_LANG_DEFAULT_CONFIG],\n[AC_PROVIDE_IFELSE([AC_PROG_CXX],\n  [LT_LANG(CXX)],\n  [m4_define([AC_PROG_CXX], defn([AC_PROG_CXX])[LT_LANG(CXX)])])\n\nAC_PROVIDE_IFELSE([AC_PROG_F77],\n  [LT_LANG(F77)],\n  [m4_define([AC_PROG_F77], defn([AC_PROG_F77])[LT_LANG(F77)])])\n\nAC_PROVIDE_IFELSE([AC_PROG_FC],\n  [LT_LANG(FC)],\n  [m4_define([AC_PROG_FC], defn([AC_PROG_FC])[LT_LANG(FC)])])\n\ndnl The call to [A][M_PROG_GCJ] is quoted like that to stop aclocal\ndnl pulling things in needlessly.\nAC_PROVIDE_IFELSE([AC_PROG_GCJ],\n  [LT_LANG(GCJ)],\n  [AC_PROVIDE_IFELSE([A][M_PROG_GCJ],\n    [LT_LANG(GCJ)],\n    [AC_PROVIDE_IFELSE([LT_PROG_GCJ],\n      [LT_LANG(GCJ)],\n      [m4_ifdef([AC_PROG_GCJ],\n\t[m4_define([AC_PROG_GCJ], defn([AC_PROG_GCJ])[LT_LANG(GCJ)])])\n       m4_ifdef([A][M_PROG_GCJ],\n\t[m4_define([A][M_PROG_GCJ], defn([A][M_PROG_GCJ])[LT_LANG(GCJ)])])\n       m4_ifdef([LT_PROG_GCJ],\n\t[m4_define([LT_PROG_GCJ], defn([LT_PROG_GCJ])[LT_LANG(GCJ)])])])])])\n\nAC_PROVIDE_IFELSE([AC_PROG_GO],\n  [LT_LANG(GO)],\n  [m4_define([AC_PROG_GO], defn([AC_PROG_GO])[LT_LANG(GO)])])\n\nAC_PROVIDE_IFELSE([LT_PROG_RC],\n  [LT_LANG(RC)],\n  [m4_define([LT_PROG_RC], defn([LT_PROG_RC])[LT_LANG(RC)])])\n])# _LT_LANG_DEFAULT_CONFIG\n\n# Obsolete macros:\nAU_DEFUN([AC_LIBTOOL_CXX], [LT_LANG(C++)])\nAU_DEFUN([AC_LIBTOOL_F77], [LT_LANG(Fortran 77)])\nAU_DEFUN([AC_LIBTOOL_FC], [LT_LANG(Fortran)])\nAU_DEFUN([AC_LIBTOOL_GCJ], [LT_LANG(Java)])\nAU_DEFUN([AC_LIBTOOL_RC], [LT_LANG(Windows Resource)])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_CXX], [])\ndnl AC_DEFUN([AC_LIBTOOL_F77], [])\ndnl AC_DEFUN([AC_LIBTOOL_FC], [])\ndnl AC_DEFUN([AC_LIBTOOL_GCJ], [])\ndnl AC_DEFUN([AC_LIBTOOL_RC], [])\n\n\n# _LT_TAG_COMPILER\n# ----------------\nm4_defun([_LT_TAG_COMPILER],\n[AC_REQUIRE([AC_PROG_CC])dnl\n\n_LT_DECL([LTCC], [CC], [1], [A C compiler])dnl\n_LT_DECL([LTCFLAGS], [CFLAGS], [1], [LTCC compiler flags])dnl\n_LT_TAGDECL([CC], [compiler], [1], [A language specific compiler])dnl\n_LT_TAGDECL([with_gcc], [GCC], [0], [Is the compiler the GNU compiler?])dnl\n\n# If no C compiler was specified, use CC.\nLTCC=${LTCC-\"$CC\"}\n\n# If no C compiler flags were specified, use CFLAGS.\nLTCFLAGS=${LTCFLAGS-\"$CFLAGS\"}\n\n# Allow CC to be a program name with arguments.\ncompiler=$CC\n])# _LT_TAG_COMPILER\n\n\n# _LT_COMPILER_BOILERPLATE\n# ------------------------\n# Check for compiler boilerplate output or warnings with\n# the simple compiler test code.\nm4_defun([_LT_COMPILER_BOILERPLATE],\n[m4_require([_LT_DECL_SED])dnl\nac_outfile=conftest.$ac_objext\necho \"$lt_simple_compile_test_code\" >conftest.$ac_ext\neval \"$ac_compile\" 2>&1 >/dev/null | $SED '/^$/d; /^ *+/d' >conftest.err\n_lt_compiler_boilerplate=`cat conftest.err`\n$RM conftest*\n])# _LT_COMPILER_BOILERPLATE\n\n\n# _LT_LINKER_BOILERPLATE\n# ----------------------\n# Check for linker boilerplate output or warnings with\n# the simple link test code.\nm4_defun([_LT_LINKER_BOILERPLATE],\n[m4_require([_LT_DECL_SED])dnl\nac_outfile=conftest.$ac_objext\necho \"$lt_simple_link_test_code\" >conftest.$ac_ext\neval \"$ac_link\" 2>&1 >/dev/null | $SED '/^$/d; /^ *+/d' >conftest.err\n_lt_linker_boilerplate=`cat conftest.err`\n$RM -r conftest*\n])# _LT_LINKER_BOILERPLATE\n\n# _LT_REQUIRED_DARWIN_CHECKS\n# -------------------------\nm4_defun_once([_LT_REQUIRED_DARWIN_CHECKS],[\n  case $host_os in\n    rhapsody* | darwin*)\n    AC_CHECK_TOOL([DSYMUTIL], [dsymutil], [:])\n    AC_CHECK_TOOL([NMEDIT], [nmedit], [:])\n    AC_CHECK_TOOL([LIPO], [lipo], [:])\n    AC_CHECK_TOOL([OTOOL], [otool], [:])\n    AC_CHECK_TOOL([OTOOL64], [otool64], [:])\n    _LT_DECL([], [DSYMUTIL], [1],\n      [Tool to manipulate archived DWARF debug symbol files on Mac OS X])\n    _LT_DECL([], [NMEDIT], [1],\n      [Tool to change global to local symbols on Mac OS X])\n    _LT_DECL([], [LIPO], [1],\n      [Tool to manipulate fat objects and archives on Mac OS X])\n    _LT_DECL([], [OTOOL], [1],\n      [ldd/readelf like tool for Mach-O binaries on Mac OS X])\n    _LT_DECL([], [OTOOL64], [1],\n      [ldd/readelf like tool for 64 bit Mach-O binaries on Mac OS X 10.4])\n\n    AC_CACHE_CHECK([for -single_module linker flag],[lt_cv_apple_cc_single_mod],\n      [lt_cv_apple_cc_single_mod=no\n      if test -z \"$LT_MULTI_MODULE\"; then\n\t# By default we will add the -single_module flag. You can override\n\t# by either setting the environment variable LT_MULTI_MODULE\n\t# non-empty at configure time, or by adding -multi_module to the\n\t# link flags.\n\trm -rf libconftest.dylib*\n\techo \"int foo(void){return 1;}\" > conftest.c\n\techo \"$LTCC $LTCFLAGS $LDFLAGS -o libconftest.dylib \\\n-dynamiclib -Wl,-single_module conftest.c\" >&AS_MESSAGE_LOG_FD\n\t$LTCC $LTCFLAGS $LDFLAGS -o libconftest.dylib \\\n\t  -dynamiclib -Wl,-single_module conftest.c 2>conftest.err\n        _lt_result=$?\n\t# If there is a non-empty error log, and \"single_module\"\n\t# appears in it, assume the flag caused a linker warning\n        if test -s conftest.err && $GREP single_module conftest.err; then\n\t  cat conftest.err >&AS_MESSAGE_LOG_FD\n\t# Otherwise, if the output was created with a 0 exit code from\n\t# the compiler, it worked.\n\telif test -f libconftest.dylib && test 0 = \"$_lt_result\"; then\n\t  lt_cv_apple_cc_single_mod=yes\n\telse\n\t  cat conftest.err >&AS_MESSAGE_LOG_FD\n\tfi\n\trm -rf libconftest.dylib*\n\trm -f conftest.*\n      fi])\n\n    AC_CACHE_CHECK([for -exported_symbols_list linker flag],\n      [lt_cv_ld_exported_symbols_list],\n      [lt_cv_ld_exported_symbols_list=no\n      save_LDFLAGS=$LDFLAGS\n      echo \"_main\" > conftest.sym\n      LDFLAGS=\"$LDFLAGS -Wl,-exported_symbols_list,conftest.sym\"\n      AC_LINK_IFELSE([AC_LANG_PROGRAM([],[])],\n\t[lt_cv_ld_exported_symbols_list=yes],\n\t[lt_cv_ld_exported_symbols_list=no])\n\tLDFLAGS=$save_LDFLAGS\n    ])\n\n    AC_CACHE_CHECK([for -force_load linker flag],[lt_cv_ld_force_load],\n      [lt_cv_ld_force_load=no\n      cat > conftest.c << _LT_EOF\nint forced_loaded() { return 2;}\n_LT_EOF\n      echo \"$LTCC $LTCFLAGS -c -o conftest.o conftest.c\" >&AS_MESSAGE_LOG_FD\n      $LTCC $LTCFLAGS -c -o conftest.o conftest.c 2>&AS_MESSAGE_LOG_FD\n      echo \"$AR cru libconftest.a conftest.o\" >&AS_MESSAGE_LOG_FD\n      $AR cru libconftest.a conftest.o 2>&AS_MESSAGE_LOG_FD\n      echo \"$RANLIB libconftest.a\" >&AS_MESSAGE_LOG_FD\n      $RANLIB libconftest.a 2>&AS_MESSAGE_LOG_FD\n      cat > conftest.c << _LT_EOF\nint main() { return 0;}\n_LT_EOF\n      echo \"$LTCC $LTCFLAGS $LDFLAGS -o conftest conftest.c -Wl,-force_load,./libconftest.a\" >&AS_MESSAGE_LOG_FD\n      $LTCC $LTCFLAGS $LDFLAGS -o conftest conftest.c -Wl,-force_load,./libconftest.a 2>conftest.err\n      _lt_result=$?\n      if test -s conftest.err && $GREP force_load conftest.err; then\n\tcat conftest.err >&AS_MESSAGE_LOG_FD\n      elif test -f conftest && test 0 = \"$_lt_result\" && $GREP forced_load conftest >/dev/null 2>&1; then\n\tlt_cv_ld_force_load=yes\n      else\n\tcat conftest.err >&AS_MESSAGE_LOG_FD\n      fi\n        rm -f conftest.err libconftest.a conftest conftest.c\n        rm -rf conftest.dSYM\n    ])\n    case $host_os in\n    rhapsody* | darwin1.[[012]])\n      _lt_dar_allow_undefined='$wl-undefined ${wl}suppress' ;;\n    darwin1.*)\n      _lt_dar_allow_undefined='$wl-flat_namespace $wl-undefined ${wl}suppress' ;;\n    darwin*) # darwin 5.x on\n      # if running on 10.5 or later, the deployment target defaults\n      # to the OS version, if on x86, and 10.4, the deployment\n      # target defaults to 10.4. Don't you love it?\n      case ${MACOSX_DEPLOYMENT_TARGET-10.0},$host in\n\t10.0,*86*-darwin8*|10.0,*-darwin[[91]]*)\n\t  _lt_dar_allow_undefined='$wl-undefined ${wl}dynamic_lookup' ;;\n\t10.[[012]][[,.]]*)\n\t  _lt_dar_allow_undefined='$wl-flat_namespace $wl-undefined ${wl}suppress' ;;\n\t10.*)\n\t  _lt_dar_allow_undefined='$wl-undefined ${wl}dynamic_lookup' ;;\n      esac\n    ;;\n  esac\n    if test yes = \"$lt_cv_apple_cc_single_mod\"; then\n      _lt_dar_single_mod='$single_module'\n    fi\n    if test yes = \"$lt_cv_ld_exported_symbols_list\"; then\n      _lt_dar_export_syms=' $wl-exported_symbols_list,$output_objdir/$libname-symbols.expsym'\n    else\n      _lt_dar_export_syms='~$NMEDIT -s $output_objdir/$libname-symbols.expsym $lib'\n    fi\n    if test : != \"$DSYMUTIL\" && test no = \"$lt_cv_ld_force_load\"; then\n      _lt_dsymutil='~$DSYMUTIL $lib || :'\n    else\n      _lt_dsymutil=\n    fi\n    ;;\n  esac\n])\n\n\n# _LT_DARWIN_LINKER_FEATURES([TAG])\n# ---------------------------------\n# Checks for linker and compiler features on darwin\nm4_defun([_LT_DARWIN_LINKER_FEATURES],\n[\n  m4_require([_LT_REQUIRED_DARWIN_CHECKS])\n  _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n  _LT_TAGVAR(hardcode_direct, $1)=no\n  _LT_TAGVAR(hardcode_automatic, $1)=yes\n  _LT_TAGVAR(hardcode_shlibpath_var, $1)=unsupported\n  if test yes = \"$lt_cv_ld_force_load\"; then\n    _LT_TAGVAR(whole_archive_flag_spec, $1)='`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience $wl-force_load,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"`'\n    m4_case([$1], [F77], [_LT_TAGVAR(compiler_needs_object, $1)=yes],\n                  [FC],  [_LT_TAGVAR(compiler_needs_object, $1)=yes])\n  else\n    _LT_TAGVAR(whole_archive_flag_spec, $1)=''\n  fi\n  _LT_TAGVAR(link_all_deplibs, $1)=yes\n  _LT_TAGVAR(allow_undefined_flag, $1)=$_lt_dar_allow_undefined\n  case $cc_basename in\n     ifort*|nagfor*) _lt_dar_can_shared=yes ;;\n     *) _lt_dar_can_shared=$GCC ;;\n  esac\n  if test yes = \"$_lt_dar_can_shared\"; then\n    output_verbose_link_cmd=func_echo_all\n    _LT_TAGVAR(archive_cmds, $1)=\"\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$libobjs \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring $_lt_dar_single_mod$_lt_dsymutil\"\n    _LT_TAGVAR(module_cmds, $1)=\"\\$CC \\$allow_undefined_flag -o \\$lib -bundle \\$libobjs \\$deplibs \\$compiler_flags$_lt_dsymutil\"\n    _LT_TAGVAR(archive_expsym_cmds, $1)=\"sed 's|^|_|' < \\$export_symbols > \\$output_objdir/\\$libname-symbols.expsym~\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$libobjs \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring $_lt_dar_single_mod$_lt_dar_export_syms$_lt_dsymutil\"\n    _LT_TAGVAR(module_expsym_cmds, $1)=\"sed -e 's|^|_|' < \\$export_symbols > \\$output_objdir/\\$libname-symbols.expsym~\\$CC \\$allow_undefined_flag -o \\$lib -bundle \\$libobjs \\$deplibs \\$compiler_flags$_lt_dar_export_syms$_lt_dsymutil\"\n    m4_if([$1], [CXX],\n[   if test yes != \"$lt_cv_apple_cc_single_mod\"; then\n      _LT_TAGVAR(archive_cmds, $1)=\"\\$CC -r -keep_private_externs -nostdlib -o \\$lib-master.o \\$libobjs~\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$lib-master.o \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring$_lt_dsymutil\"\n      _LT_TAGVAR(archive_expsym_cmds, $1)=\"sed 's|^|_|' < \\$export_symbols > \\$output_objdir/\\$libname-symbols.expsym~\\$CC -r -keep_private_externs -nostdlib -o \\$lib-master.o \\$libobjs~\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$lib-master.o \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring$_lt_dar_export_syms$_lt_dsymutil\"\n    fi\n],[])\n  else\n  _LT_TAGVAR(ld_shlibs, $1)=no\n  fi\n])\n\n# _LT_SYS_MODULE_PATH_AIX([TAGNAME])\n# ----------------------------------\n# Links a minimal program and checks the executable\n# for the system default hardcoded library path. In most cases,\n# this is /usr/lib:/lib, but when the MPI compilers are used\n# the location of the communication and MPI libs are included too.\n# If we don't find anything, use the default library path according\n# to the aix ld manual.\n# Store the results from the different compilers for each TAGNAME.\n# Allow to override them for all tags through lt_cv_aix_libpath.\nm4_defun([_LT_SYS_MODULE_PATH_AIX],\n[m4_require([_LT_DECL_SED])dnl\nif test set = \"${lt_cv_aix_libpath+set}\"; then\n  aix_libpath=$lt_cv_aix_libpath\nelse\n  AC_CACHE_VAL([_LT_TAGVAR([lt_cv_aix_libpath_], [$1])],\n  [AC_LINK_IFELSE([AC_LANG_PROGRAM],[\n  lt_aix_libpath_sed='[\n      /Import File Strings/,/^$/ {\n\t  /^0/ {\n\t      s/^0  *\\([^ ]*\\) *$/\\1/\n\t      p\n\t  }\n      }]'\n  _LT_TAGVAR([lt_cv_aix_libpath_], [$1])=`dump -H conftest$ac_exeext 2>/dev/null | $SED -n -e \"$lt_aix_libpath_sed\"`\n  # Check for a 64-bit object if we didn't find anything.\n  if test -z \"$_LT_TAGVAR([lt_cv_aix_libpath_], [$1])\"; then\n    _LT_TAGVAR([lt_cv_aix_libpath_], [$1])=`dump -HX64 conftest$ac_exeext 2>/dev/null | $SED -n -e \"$lt_aix_libpath_sed\"`\n  fi],[])\n  if test -z \"$_LT_TAGVAR([lt_cv_aix_libpath_], [$1])\"; then\n    _LT_TAGVAR([lt_cv_aix_libpath_], [$1])=/usr/lib:/lib\n  fi\n  ])\n  aix_libpath=$_LT_TAGVAR([lt_cv_aix_libpath_], [$1])\nfi\n])# _LT_SYS_MODULE_PATH_AIX\n\n\n# _LT_SHELL_INIT(ARG)\n# -------------------\nm4_define([_LT_SHELL_INIT],\n[m4_divert_text([M4SH-INIT], [$1\n])])# _LT_SHELL_INIT\n\n\n\n# _LT_PROG_ECHO_BACKSLASH\n# -----------------------\n# Find how we can fake an echo command that does not interpret backslash.\n# In particular, with Autoconf 2.60 or later we add some code to the start\n# of the generated configure script that will find a shell with a builtin\n# printf (that we can use as an echo command).\nm4_defun([_LT_PROG_ECHO_BACKSLASH],\n[ECHO='\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\nECHO=$ECHO$ECHO$ECHO$ECHO$ECHO\nECHO=$ECHO$ECHO$ECHO$ECHO$ECHO$ECHO\n\nAC_MSG_CHECKING([how to print strings])\n# Test print first, because it will be a builtin if present.\nif test \"X`( print -r -- -n ) 2>/dev/null`\" = X-n && \\\n   test \"X`print -r -- $ECHO 2>/dev/null`\" = \"X$ECHO\"; then\n  ECHO='print -r --'\nelif test \"X`printf %s $ECHO 2>/dev/null`\" = \"X$ECHO\"; then\n  ECHO='printf %s\\n'\nelse\n  # Use this function as a fallback that always works.\n  func_fallback_echo ()\n  {\n    eval 'cat <<_LTECHO_EOF\n$[]1\n_LTECHO_EOF'\n  }\n  ECHO='func_fallback_echo'\nfi\n\n# func_echo_all arg...\n# Invoke $ECHO with all args, space-separated.\nfunc_echo_all ()\n{\n    $ECHO \"$*\"\n}\n\ncase $ECHO in\n  printf*) AC_MSG_RESULT([printf]) ;;\n  print*) AC_MSG_RESULT([print -r]) ;;\n  *) AC_MSG_RESULT([cat]) ;;\nesac\n\nm4_ifdef([_AS_DETECT_SUGGESTED],\n[_AS_DETECT_SUGGESTED([\n  test -n \"${ZSH_VERSION+set}${BASH_VERSION+set}\" || (\n    ECHO='\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\n    ECHO=$ECHO$ECHO$ECHO$ECHO$ECHO\n    ECHO=$ECHO$ECHO$ECHO$ECHO$ECHO$ECHO\n    PATH=/empty FPATH=/empty; export PATH FPATH\n    test \"X`printf %s $ECHO`\" = \"X$ECHO\" \\\n      || test \"X`print -r -- $ECHO`\" = \"X$ECHO\" )])])\n\n_LT_DECL([], [SHELL], [1], [Shell to use when invoking shell scripts])\n_LT_DECL([], [ECHO], [1], [An echo program that protects backslashes])\n])# _LT_PROG_ECHO_BACKSLASH\n\n\n# _LT_WITH_SYSROOT\n# ----------------\nAC_DEFUN([_LT_WITH_SYSROOT],\n[AC_MSG_CHECKING([for sysroot])\nAC_ARG_WITH([sysroot],\n[AS_HELP_STRING([--with-sysroot@<:@=DIR@:>@],\n  [Search for dependent libraries within DIR (or the compiler's sysroot\n   if not specified).])],\n[], [with_sysroot=no])\n\ndnl lt_sysroot will always be passed unquoted.  We quote it here\ndnl in case the user passed a directory name.\nlt_sysroot=\ncase $with_sysroot in #(\n yes)\n   if test yes = \"$GCC\"; then\n     lt_sysroot=`$CC --print-sysroot 2>/dev/null`\n   fi\n   ;; #(\n /*)\n   lt_sysroot=`echo \"$with_sysroot\" | sed -e \"$sed_quote_subst\"`\n   ;; #(\n no|'')\n   ;; #(\n *)\n   AC_MSG_RESULT([$with_sysroot])\n   AC_MSG_ERROR([The sysroot must be an absolute path.])\n   ;;\nesac\n\n AC_MSG_RESULT([${lt_sysroot:-no}])\n_LT_DECL([], [lt_sysroot], [0], [The root where to search for ]dnl\n[dependent libraries, and where our libraries should be installed.])])\n\n# _LT_ENABLE_LOCK\n# ---------------\nm4_defun([_LT_ENABLE_LOCK],\n[AC_ARG_ENABLE([libtool-lock],\n  [AS_HELP_STRING([--disable-libtool-lock],\n    [avoid locking (might break parallel builds)])])\ntest no = \"$enable_libtool_lock\" || enable_libtool_lock=yes\n\n# Some flags need to be propagated to the compiler or linker for good\n# libtool support.\ncase $host in\nia64-*-hpux*)\n  # Find out what ABI is being produced by ac_compile, and set mode\n  # options accordingly.\n  echo 'int i;' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    case `/usr/bin/file conftest.$ac_objext` in\n      *ELF-32*)\n\tHPUX_IA64_MODE=32\n\t;;\n      *ELF-64*)\n\tHPUX_IA64_MODE=64\n\t;;\n    esac\n  fi\n  rm -rf conftest*\n  ;;\n*-*-irix6*)\n  # Find out what ABI is being produced by ac_compile, and set linker\n  # options accordingly.\n  echo '[#]line '$LINENO' \"configure\"' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    if test yes = \"$lt_cv_prog_gnu_ld\"; then\n      case `/usr/bin/file conftest.$ac_objext` in\n\t*32-bit*)\n\t  LD=\"${LD-ld} -melf32bsmip\"\n\t  ;;\n\t*N32*)\n\t  LD=\"${LD-ld} -melf32bmipn32\"\n\t  ;;\n\t*64-bit*)\n\t  LD=\"${LD-ld} -melf64bmip\"\n\t;;\n      esac\n    else\n      case `/usr/bin/file conftest.$ac_objext` in\n\t*32-bit*)\n\t  LD=\"${LD-ld} -32\"\n\t  ;;\n\t*N32*)\n\t  LD=\"${LD-ld} -n32\"\n\t  ;;\n\t*64-bit*)\n\t  LD=\"${LD-ld} -64\"\n\t  ;;\n      esac\n    fi\n  fi\n  rm -rf conftest*\n  ;;\n\nmips64*-*linux*)\n  # Find out what ABI is being produced by ac_compile, and set linker\n  # options accordingly.\n  echo '[#]line '$LINENO' \"configure\"' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    emul=elf\n    case `/usr/bin/file conftest.$ac_objext` in\n      *32-bit*)\n\temul=\"${emul}32\"\n\t;;\n      *64-bit*)\n\temul=\"${emul}64\"\n\t;;\n    esac\n    case `/usr/bin/file conftest.$ac_objext` in\n      *MSB*)\n\temul=\"${emul}btsmip\"\n\t;;\n      *LSB*)\n\temul=\"${emul}ltsmip\"\n\t;;\n    esac\n    case `/usr/bin/file conftest.$ac_objext` in\n      *N32*)\n\temul=\"${emul}n32\"\n\t;;\n    esac\n    LD=\"${LD-ld} -m $emul\"\n  fi\n  rm -rf conftest*\n  ;;\n\nx86_64-*kfreebsd*-gnu|x86_64-*linux*|powerpc*-*linux*| \\\ns390*-*linux*|s390*-*tpf*|sparc*-*linux*)\n  # Find out what ABI is being produced by ac_compile, and set linker\n  # options accordingly.  Note that the listed cases only cover the\n  # situations where additional linker options are needed (such as when\n  # doing 32-bit compilation for a host where ld defaults to 64-bit, or\n  # vice versa); the common cases where no linker options are needed do\n  # not appear in the list.\n  echo 'int i;' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    case `/usr/bin/file conftest.o` in\n      *32-bit*)\n\tcase $host in\n\t  x86_64-*kfreebsd*-gnu)\n\t    LD=\"${LD-ld} -m elf_i386_fbsd\"\n\t    ;;\n\t  x86_64-*linux*)\n\t    case `/usr/bin/file conftest.o` in\n\t      *x86-64*)\n\t\tLD=\"${LD-ld} -m elf32_x86_64\"\n\t\t;;\n\t      *)\n\t\tLD=\"${LD-ld} -m elf_i386\"\n\t\t;;\n\t    esac\n\t    ;;\n\t  powerpc64le-*linux*)\n\t    LD=\"${LD-ld} -m elf32lppclinux\"\n\t    ;;\n\t  powerpc64-*linux*)\n\t    LD=\"${LD-ld} -m elf32ppclinux\"\n\t    ;;\n\t  s390x-*linux*)\n\t    LD=\"${LD-ld} -m elf_s390\"\n\t    ;;\n\t  sparc64-*linux*)\n\t    LD=\"${LD-ld} -m elf32_sparc\"\n\t    ;;\n\tesac\n\t;;\n      *64-bit*)\n\tcase $host in\n\t  x86_64-*kfreebsd*-gnu)\n\t    LD=\"${LD-ld} -m elf_x86_64_fbsd\"\n\t    ;;\n\t  x86_64-*linux*)\n\t    LD=\"${LD-ld} -m elf_x86_64\"\n\t    ;;\n\t  powerpcle-*linux*)\n\t    LD=\"${LD-ld} -m elf64lppc\"\n\t    ;;\n\t  powerpc-*linux*)\n\t    LD=\"${LD-ld} -m elf64ppc\"\n\t    ;;\n\t  s390*-*linux*|s390*-*tpf*)\n\t    LD=\"${LD-ld} -m elf64_s390\"\n\t    ;;\n\t  sparc*-*linux*)\n\t    LD=\"${LD-ld} -m elf64_sparc\"\n\t    ;;\n\tesac\n\t;;\n    esac\n  fi\n  rm -rf conftest*\n  ;;\n\n*-*-sco3.2v5*)\n  # On SCO OpenServer 5, we need -belf to get full-featured binaries.\n  SAVE_CFLAGS=$CFLAGS\n  CFLAGS=\"$CFLAGS -belf\"\n  AC_CACHE_CHECK([whether the C compiler needs -belf], lt_cv_cc_needs_belf,\n    [AC_LANG_PUSH(C)\n     AC_LINK_IFELSE([AC_LANG_PROGRAM([[]],[[]])],[lt_cv_cc_needs_belf=yes],[lt_cv_cc_needs_belf=no])\n     AC_LANG_POP])\n  if test yes != \"$lt_cv_cc_needs_belf\"; then\n    # this is probably gcc 2.8.0, egcs 1.0 or newer; no need for -belf\n    CFLAGS=$SAVE_CFLAGS\n  fi\n  ;;\n*-*solaris*)\n  # Find out what ABI is being produced by ac_compile, and set linker\n  # options accordingly.\n  echo 'int i;' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    case `/usr/bin/file conftest.o` in\n    *64-bit*)\n      case $lt_cv_prog_gnu_ld in\n      yes*)\n        case $host in\n        i?86-*-solaris*|x86_64-*-solaris*)\n          LD=\"${LD-ld} -m elf_x86_64\"\n          ;;\n        sparc*-*-solaris*)\n          LD=\"${LD-ld} -m elf64_sparc\"\n          ;;\n        esac\n        # GNU ld 2.21 introduced _sol2 emulations.  Use them if available.\n        if ${LD-ld} -V | grep _sol2 >/dev/null 2>&1; then\n          LD=${LD-ld}_sol2\n        fi\n        ;;\n      *)\n\tif ${LD-ld} -64 -r -o conftest2.o conftest.o >/dev/null 2>&1; then\n\t  LD=\"${LD-ld} -64\"\n\tfi\n\t;;\n      esac\n      ;;\n    esac\n  fi\n  rm -rf conftest*\n  ;;\nesac\n\nneed_locks=$enable_libtool_lock\n])# _LT_ENABLE_LOCK\n\n\n# _LT_PROG_AR\n# -----------\nm4_defun([_LT_PROG_AR],\n[AC_CHECK_TOOLS(AR, [ar], false)\n: ${AR=ar}\n: ${AR_FLAGS=cru}\n_LT_DECL([], [AR], [1], [The archiver])\n_LT_DECL([], [AR_FLAGS], [1], [Flags to create an archive])\n\nAC_CACHE_CHECK([for archiver @FILE support], [lt_cv_ar_at_file],\n  [lt_cv_ar_at_file=no\n   AC_COMPILE_IFELSE([AC_LANG_PROGRAM],\n     [echo conftest.$ac_objext > conftest.lst\n      lt_ar_try='$AR $AR_FLAGS libconftest.a @conftest.lst >&AS_MESSAGE_LOG_FD'\n      AC_TRY_EVAL([lt_ar_try])\n      if test 0 -eq \"$ac_status\"; then\n\t# Ensure the archiver fails upon bogus file names.\n\trm -f conftest.$ac_objext libconftest.a\n\tAC_TRY_EVAL([lt_ar_try])\n\tif test 0 -ne \"$ac_status\"; then\n          lt_cv_ar_at_file=@\n        fi\n      fi\n      rm -f conftest.* libconftest.a\n     ])\n  ])\n\nif test no = \"$lt_cv_ar_at_file\"; then\n  archiver_list_spec=\nelse\n  archiver_list_spec=$lt_cv_ar_at_file\nfi\n_LT_DECL([], [archiver_list_spec], [1],\n  [How to feed a file listing to the archiver])\n])# _LT_PROG_AR\n\n\n# _LT_CMD_OLD_ARCHIVE\n# -------------------\nm4_defun([_LT_CMD_OLD_ARCHIVE],\n[_LT_PROG_AR\n\nAC_CHECK_TOOL(STRIP, strip, :)\ntest -z \"$STRIP\" && STRIP=:\n_LT_DECL([], [STRIP], [1], [A symbol stripping program])\n\nAC_CHECK_TOOL(RANLIB, ranlib, :)\ntest -z \"$RANLIB\" && RANLIB=:\n_LT_DECL([], [RANLIB], [1],\n    [Commands used to install an old-style archive])\n\n# Determine commands to create old-style static archives.\nold_archive_cmds='$AR $AR_FLAGS $oldlib$oldobjs'\nold_postinstall_cmds='chmod 644 $oldlib'\nold_postuninstall_cmds=\n\nif test -n \"$RANLIB\"; then\n  case $host_os in\n  bitrig* | openbsd*)\n    old_postinstall_cmds=\"$old_postinstall_cmds~\\$RANLIB -t \\$tool_oldlib\"\n    ;;\n  *)\n    old_postinstall_cmds=\"$old_postinstall_cmds~\\$RANLIB \\$tool_oldlib\"\n    ;;\n  esac\n  old_archive_cmds=\"$old_archive_cmds~\\$RANLIB \\$tool_oldlib\"\nfi\n\ncase $host_os in\n  darwin*)\n    lock_old_archive_extraction=yes ;;\n  *)\n    lock_old_archive_extraction=no ;;\nesac\n_LT_DECL([], [old_postinstall_cmds], [2])\n_LT_DECL([], [old_postuninstall_cmds], [2])\n_LT_TAGDECL([], [old_archive_cmds], [2],\n    [Commands used to build an old-style archive])\n_LT_DECL([], [lock_old_archive_extraction], [0],\n    [Whether to use a lock for old archive extraction])\n])# _LT_CMD_OLD_ARCHIVE\n\n\n# _LT_COMPILER_OPTION(MESSAGE, VARIABLE-NAME, FLAGS,\n#\t\t[OUTPUT-FILE], [ACTION-SUCCESS], [ACTION-FAILURE])\n# ----------------------------------------------------------------\n# Check whether the given compiler option works\nAC_DEFUN([_LT_COMPILER_OPTION],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_SED])dnl\nAC_CACHE_CHECK([$1], [$2],\n  [$2=no\n   m4_if([$4], , [ac_outfile=conftest.$ac_objext], [ac_outfile=$4])\n   echo \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n   lt_compiler_flag=\"$3\"  ## exclude from sc_useless_quotes_in_assignment\n   # Insert the option either (1) after the last *FLAGS variable, or\n   # (2) before a word containing \"conftest.\", or (3) at the end.\n   # Note that $ac_compile itself does not contain backslashes and begins\n   # with a dollar sign (not a hyphen), so the echo should work correctly.\n   # The option is referenced via a variable to avoid confusing sed.\n   lt_compile=`echo \"$ac_compile\" | $SED \\\n   -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n   -e 's: [[^ ]]*conftest\\.: $lt_compiler_flag&:; t' \\\n   -e 's:$: $lt_compiler_flag:'`\n   (eval echo \"\\\"\\$as_me:$LINENO: $lt_compile\\\"\" >&AS_MESSAGE_LOG_FD)\n   (eval \"$lt_compile\" 2>conftest.err)\n   ac_status=$?\n   cat conftest.err >&AS_MESSAGE_LOG_FD\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&AS_MESSAGE_LOG_FD\n   if (exit $ac_status) && test -s \"$ac_outfile\"; then\n     # The compiler can only warn and ignore the option if not recognized\n     # So say no if there are warnings other than the usual output.\n     $ECHO \"$_lt_compiler_boilerplate\" | $SED '/^$/d' >conftest.exp\n     $SED '/^$/d; /^ *+/d' conftest.err >conftest.er2\n     if test ! -s conftest.er2 || diff conftest.exp conftest.er2 >/dev/null; then\n       $2=yes\n     fi\n   fi\n   $RM conftest*\n])\n\nif test yes = \"[$]$2\"; then\n    m4_if([$5], , :, [$5])\nelse\n    m4_if([$6], , :, [$6])\nfi\n])# _LT_COMPILER_OPTION\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_COMPILER_OPTION], [_LT_COMPILER_OPTION])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_COMPILER_OPTION], [])\n\n\n# _LT_LINKER_OPTION(MESSAGE, VARIABLE-NAME, FLAGS,\n#                  [ACTION-SUCCESS], [ACTION-FAILURE])\n# ----------------------------------------------------\n# Check whether the given linker option works\nAC_DEFUN([_LT_LINKER_OPTION],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_SED])dnl\nAC_CACHE_CHECK([$1], [$2],\n  [$2=no\n   save_LDFLAGS=$LDFLAGS\n   LDFLAGS=\"$LDFLAGS $3\"\n   echo \"$lt_simple_link_test_code\" > conftest.$ac_ext\n   if (eval $ac_link 2>conftest.err) && test -s conftest$ac_exeext; then\n     # The linker can only warn and ignore the option if not recognized\n     # So say no if there are warnings\n     if test -s conftest.err; then\n       # Append any errors to the config.log.\n       cat conftest.err 1>&AS_MESSAGE_LOG_FD\n       $ECHO \"$_lt_linker_boilerplate\" | $SED '/^$/d' > conftest.exp\n       $SED '/^$/d; /^ *+/d' conftest.err >conftest.er2\n       if diff conftest.exp conftest.er2 >/dev/null; then\n         $2=yes\n       fi\n     else\n       $2=yes\n     fi\n   fi\n   $RM -r conftest*\n   LDFLAGS=$save_LDFLAGS\n])\n\nif test yes = \"[$]$2\"; then\n    m4_if([$4], , :, [$4])\nelse\n    m4_if([$5], , :, [$5])\nfi\n])# _LT_LINKER_OPTION\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_LINKER_OPTION], [_LT_LINKER_OPTION])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_LINKER_OPTION], [])\n\n\n# LT_CMD_MAX_LEN\n#---------------\nAC_DEFUN([LT_CMD_MAX_LEN],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\n# find the maximum length of command line arguments\nAC_MSG_CHECKING([the maximum length of command line arguments])\nAC_CACHE_VAL([lt_cv_sys_max_cmd_len], [dnl\n  i=0\n  teststring=ABCD\n\n  case $build_os in\n  msdosdjgpp*)\n    # On DJGPP, this test can blow up pretty badly due to problems in libc\n    # (any single argument exceeding 2000 bytes causes a buffer overrun\n    # during glob expansion).  Even if it were fixed, the result of this\n    # check would be larger than it should be.\n    lt_cv_sys_max_cmd_len=12288;    # 12K is about right\n    ;;\n\n  gnu*)\n    # Under GNU Hurd, this test is not required because there is\n    # no limit to the length of command line arguments.\n    # Libtool will interpret -1 as no limit whatsoever\n    lt_cv_sys_max_cmd_len=-1;\n    ;;\n\n  cygwin* | mingw* | cegcc*)\n    # On Win9x/ME, this test blows up -- it succeeds, but takes\n    # about 5 minutes as the teststring grows exponentially.\n    # Worse, since 9x/ME are not pre-emptively multitasking,\n    # you end up with a \"frozen\" computer, even though with patience\n    # the test eventually succeeds (with a max line length of 256k).\n    # Instead, let's just punt: use the minimum linelength reported by\n    # all of the supported platforms: 8192 (on NT/2K/XP).\n    lt_cv_sys_max_cmd_len=8192;\n    ;;\n\n  mint*)\n    # On MiNT this can take a long time and run out of memory.\n    lt_cv_sys_max_cmd_len=8192;\n    ;;\n\n  amigaos*)\n    # On AmigaOS with pdksh, this test takes hours, literally.\n    # So we just punt and use a minimum line length of 8192.\n    lt_cv_sys_max_cmd_len=8192;\n    ;;\n\n  bitrig* | darwin* | dragonfly* | freebsd* | netbsd* | openbsd*)\n    # This has been around since 386BSD, at least.  Likely further.\n    if test -x /sbin/sysctl; then\n      lt_cv_sys_max_cmd_len=`/sbin/sysctl -n kern.argmax`\n    elif test -x /usr/sbin/sysctl; then\n      lt_cv_sys_max_cmd_len=`/usr/sbin/sysctl -n kern.argmax`\n    else\n      lt_cv_sys_max_cmd_len=65536\t# usable default for all BSDs\n    fi\n    # And add a safety zone\n    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 4`\n    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\* 3`\n    ;;\n\n  interix*)\n    # We know the value 262144 and hardcode it with a safety zone (like BSD)\n    lt_cv_sys_max_cmd_len=196608\n    ;;\n\n  os2*)\n    # The test takes a long time on OS/2.\n    lt_cv_sys_max_cmd_len=8192\n    ;;\n\n  osf*)\n    # Dr. Hans Ekkehard Plesser reports seeing a kernel panic running configure\n    # due to this test when exec_disable_arg_limit is 1 on Tru64. It is not\n    # nice to cause kernel panics so lets avoid the loop below.\n    # First set a reasonable default.\n    lt_cv_sys_max_cmd_len=16384\n    #\n    if test -x /sbin/sysconfig; then\n      case `/sbin/sysconfig -q proc exec_disable_arg_limit` in\n        *1*) lt_cv_sys_max_cmd_len=-1 ;;\n      esac\n    fi\n    ;;\n  sco3.2v5*)\n    lt_cv_sys_max_cmd_len=102400\n    ;;\n  sysv5* | sco5v6* | sysv4.2uw2*)\n    kargmax=`grep ARG_MAX /etc/conf/cf.d/stune 2>/dev/null`\n    if test -n \"$kargmax\"; then\n      lt_cv_sys_max_cmd_len=`echo $kargmax | sed 's/.*[[\t ]]//'`\n    else\n      lt_cv_sys_max_cmd_len=32768\n    fi\n    ;;\n  *)\n    lt_cv_sys_max_cmd_len=`(getconf ARG_MAX) 2> /dev/null`\n    if test -n \"$lt_cv_sys_max_cmd_len\" && \\\n       test undefined != \"$lt_cv_sys_max_cmd_len\"; then\n      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 4`\n      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\* 3`\n    else\n      # Make teststring a little bigger before we do anything with it.\n      # a 1K string should be a reasonable start.\n      for i in 1 2 3 4 5 6 7 8; do\n        teststring=$teststring$teststring\n      done\n      SHELL=${SHELL-${CONFIG_SHELL-/bin/sh}}\n      # If test is not a shell built-in, we'll probably end up computing a\n      # maximum length that is only half of the actual maximum length, but\n      # we can't tell.\n      while { test X`env echo \"$teststring$teststring\" 2>/dev/null` \\\n\t         = \"X$teststring$teststring\"; } >/dev/null 2>&1 &&\n\t      test 17 != \"$i\" # 1/2 MB should be enough\n      do\n        i=`expr $i + 1`\n        teststring=$teststring$teststring\n      done\n      # Only check the string length outside the loop.\n      lt_cv_sys_max_cmd_len=`expr \"X$teststring\" : \".*\" 2>&1`\n      teststring=\n      # Add a significant safety factor because C++ compilers can tack on\n      # massive amounts of additional arguments before passing them to the\n      # linker.  It appears as though 1/2 is a usable value.\n      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 2`\n    fi\n    ;;\n  esac\n])\nif test -n \"$lt_cv_sys_max_cmd_len\"; then\n  AC_MSG_RESULT($lt_cv_sys_max_cmd_len)\nelse\n  AC_MSG_RESULT(none)\nfi\nmax_cmd_len=$lt_cv_sys_max_cmd_len\n_LT_DECL([], [max_cmd_len], [0],\n    [What is the maximum length of a command?])\n])# LT_CMD_MAX_LEN\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_SYS_MAX_CMD_LEN], [LT_CMD_MAX_LEN])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_SYS_MAX_CMD_LEN], [])\n\n\n# _LT_HEADER_DLFCN\n# ----------------\nm4_defun([_LT_HEADER_DLFCN],\n[AC_CHECK_HEADERS([dlfcn.h], [], [], [AC_INCLUDES_DEFAULT])dnl\n])# _LT_HEADER_DLFCN\n\n\n# _LT_TRY_DLOPEN_SELF (ACTION-IF-TRUE, ACTION-IF-TRUE-W-USCORE,\n#                      ACTION-IF-FALSE, ACTION-IF-CROSS-COMPILING)\n# ----------------------------------------------------------------\nm4_defun([_LT_TRY_DLOPEN_SELF],\n[m4_require([_LT_HEADER_DLFCN])dnl\nif test yes = \"$cross_compiling\"; then :\n  [$4]\nelse\n  lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n  lt_status=$lt_dlunknown\n  cat > conftest.$ac_ext <<_LT_EOF\n[#line $LINENO \"configure\"\n#include \"confdefs.h\"\n\n#if HAVE_DLFCN_H\n#include <dlfcn.h>\n#endif\n\n#include <stdio.h>\n\n#ifdef RTLD_GLOBAL\n#  define LT_DLGLOBAL\t\tRTLD_GLOBAL\n#else\n#  ifdef DL_GLOBAL\n#    define LT_DLGLOBAL\t\tDL_GLOBAL\n#  else\n#    define LT_DLGLOBAL\t\t0\n#  endif\n#endif\n\n/* We may have to define LT_DLLAZY_OR_NOW in the command line if we\n   find out it does not work in some platform. */\n#ifndef LT_DLLAZY_OR_NOW\n#  ifdef RTLD_LAZY\n#    define LT_DLLAZY_OR_NOW\t\tRTLD_LAZY\n#  else\n#    ifdef DL_LAZY\n#      define LT_DLLAZY_OR_NOW\t\tDL_LAZY\n#    else\n#      ifdef RTLD_NOW\n#        define LT_DLLAZY_OR_NOW\tRTLD_NOW\n#      else\n#        ifdef DL_NOW\n#          define LT_DLLAZY_OR_NOW\tDL_NOW\n#        else\n#          define LT_DLLAZY_OR_NOW\t0\n#        endif\n#      endif\n#    endif\n#  endif\n#endif\n\n/* When -fvisibility=hidden is used, assume the code has been annotated\n   correspondingly for the symbols needed.  */\n#if defined __GNUC__ && (((__GNUC__ == 3) && (__GNUC_MINOR__ >= 3)) || (__GNUC__ > 3))\nint fnord () __attribute__((visibility(\"default\")));\n#endif\n\nint fnord () { return 42; }\nint main ()\n{\n  void *self = dlopen (0, LT_DLGLOBAL|LT_DLLAZY_OR_NOW);\n  int status = $lt_dlunknown;\n\n  if (self)\n    {\n      if (dlsym (self,\"fnord\"))       status = $lt_dlno_uscore;\n      else\n        {\n\t  if (dlsym( self,\"_fnord\"))  status = $lt_dlneed_uscore;\n          else puts (dlerror ());\n\t}\n      /* dlclose (self); */\n    }\n  else\n    puts (dlerror ());\n\n  return status;\n}]\n_LT_EOF\n  if AC_TRY_EVAL(ac_link) && test -s \"conftest$ac_exeext\" 2>/dev/null; then\n    (./conftest; exit; ) >&AS_MESSAGE_LOG_FD 2>/dev/null\n    lt_status=$?\n    case x$lt_status in\n      x$lt_dlno_uscore) $1 ;;\n      x$lt_dlneed_uscore) $2 ;;\n      x$lt_dlunknown|x*) $3 ;;\n    esac\n  else :\n    # compilation failed\n    $3\n  fi\nfi\nrm -fr conftest*\n])# _LT_TRY_DLOPEN_SELF\n\n\n# LT_SYS_DLOPEN_SELF\n# ------------------\nAC_DEFUN([LT_SYS_DLOPEN_SELF],\n[m4_require([_LT_HEADER_DLFCN])dnl\nif test yes != \"$enable_dlopen\"; then\n  enable_dlopen=unknown\n  enable_dlopen_self=unknown\n  enable_dlopen_self_static=unknown\nelse\n  lt_cv_dlopen=no\n  lt_cv_dlopen_libs=\n\n  case $host_os in\n  beos*)\n    lt_cv_dlopen=load_add_on\n    lt_cv_dlopen_libs=\n    lt_cv_dlopen_self=yes\n    ;;\n\n  mingw* | pw32* | cegcc*)\n    lt_cv_dlopen=LoadLibrary\n    lt_cv_dlopen_libs=\n    ;;\n\n  cygwin*)\n    lt_cv_dlopen=dlopen\n    lt_cv_dlopen_libs=\n    ;;\n\n  darwin*)\n    # if libdl is installed we need to link against it\n    AC_CHECK_LIB([dl], [dlopen],\n\t\t[lt_cv_dlopen=dlopen lt_cv_dlopen_libs=-ldl],[\n    lt_cv_dlopen=dyld\n    lt_cv_dlopen_libs=\n    lt_cv_dlopen_self=yes\n    ])\n    ;;\n\n  tpf*)\n    # Don't try to run any link tests for TPF.  We know it's impossible\n    # because TPF is a cross-compiler, and we know how we open DSOs.\n    lt_cv_dlopen=dlopen\n    lt_cv_dlopen_libs=\n    lt_cv_dlopen_self=no\n    ;;\n\n  *)\n    AC_CHECK_FUNC([shl_load],\n\t  [lt_cv_dlopen=shl_load],\n      [AC_CHECK_LIB([dld], [shl_load],\n\t    [lt_cv_dlopen=shl_load lt_cv_dlopen_libs=-ldld],\n\t[AC_CHECK_FUNC([dlopen],\n\t      [lt_cv_dlopen=dlopen],\n\t  [AC_CHECK_LIB([dl], [dlopen],\n\t\t[lt_cv_dlopen=dlopen lt_cv_dlopen_libs=-ldl],\n\t    [AC_CHECK_LIB([svld], [dlopen],\n\t\t  [lt_cv_dlopen=dlopen lt_cv_dlopen_libs=-lsvld],\n\t      [AC_CHECK_LIB([dld], [dld_link],\n\t\t    [lt_cv_dlopen=dld_link lt_cv_dlopen_libs=-ldld])\n\t      ])\n\t    ])\n\t  ])\n\t])\n      ])\n    ;;\n  esac\n\n  if test no = \"$lt_cv_dlopen\"; then\n    enable_dlopen=no\n  else\n    enable_dlopen=yes\n  fi\n\n  case $lt_cv_dlopen in\n  dlopen)\n    save_CPPFLAGS=$CPPFLAGS\n    test yes = \"$ac_cv_header_dlfcn_h\" && CPPFLAGS=\"$CPPFLAGS -DHAVE_DLFCN_H\"\n\n    save_LDFLAGS=$LDFLAGS\n    wl=$lt_prog_compiler_wl eval LDFLAGS=\\\"\\$LDFLAGS $export_dynamic_flag_spec\\\"\n\n    save_LIBS=$LIBS\n    LIBS=\"$lt_cv_dlopen_libs $LIBS\"\n\n    AC_CACHE_CHECK([whether a program can dlopen itself],\n\t  lt_cv_dlopen_self, [dnl\n\t  _LT_TRY_DLOPEN_SELF(\n\t    lt_cv_dlopen_self=yes, lt_cv_dlopen_self=yes,\n\t    lt_cv_dlopen_self=no, lt_cv_dlopen_self=cross)\n    ])\n\n    if test yes = \"$lt_cv_dlopen_self\"; then\n      wl=$lt_prog_compiler_wl eval LDFLAGS=\\\"\\$LDFLAGS $lt_prog_compiler_static\\\"\n      AC_CACHE_CHECK([whether a statically linked program can dlopen itself],\n\t  lt_cv_dlopen_self_static, [dnl\n\t  _LT_TRY_DLOPEN_SELF(\n\t    lt_cv_dlopen_self_static=yes, lt_cv_dlopen_self_static=yes,\n\t    lt_cv_dlopen_self_static=no,  lt_cv_dlopen_self_static=cross)\n      ])\n    fi\n\n    CPPFLAGS=$save_CPPFLAGS\n    LDFLAGS=$save_LDFLAGS\n    LIBS=$save_LIBS\n    ;;\n  esac\n\n  case $lt_cv_dlopen_self in\n  yes|no) enable_dlopen_self=$lt_cv_dlopen_self ;;\n  *) enable_dlopen_self=unknown ;;\n  esac\n\n  case $lt_cv_dlopen_self_static in\n  yes|no) enable_dlopen_self_static=$lt_cv_dlopen_self_static ;;\n  *) enable_dlopen_self_static=unknown ;;\n  esac\nfi\n_LT_DECL([dlopen_support], [enable_dlopen], [0],\n\t [Whether dlopen is supported])\n_LT_DECL([dlopen_self], [enable_dlopen_self], [0],\n\t [Whether dlopen of programs is supported])\n_LT_DECL([dlopen_self_static], [enable_dlopen_self_static], [0],\n\t [Whether dlopen of statically linked programs is supported])\n])# LT_SYS_DLOPEN_SELF\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_DLOPEN_SELF], [LT_SYS_DLOPEN_SELF])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_DLOPEN_SELF], [])\n\n\n# _LT_COMPILER_C_O([TAGNAME])\n# ---------------------------\n# Check to see if options -c and -o are simultaneously supported by compiler.\n# This macro does not hard code the compiler like AC_PROG_CC_C_O.\nm4_defun([_LT_COMPILER_C_O],\n[m4_require([_LT_DECL_SED])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_TAG_COMPILER])dnl\nAC_CACHE_CHECK([if $compiler supports -c -o file.$ac_objext],\n  [_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)],\n  [_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)=no\n   $RM -r conftest 2>/dev/null\n   mkdir conftest\n   cd conftest\n   mkdir out\n   echo \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n\n   lt_compiler_flag=\"-o out/conftest2.$ac_objext\"\n   # Insert the option either (1) after the last *FLAGS variable, or\n   # (2) before a word containing \"conftest.\", or (3) at the end.\n   # Note that $ac_compile itself does not contain backslashes and begins\n   # with a dollar sign (not a hyphen), so the echo should work correctly.\n   lt_compile=`echo \"$ac_compile\" | $SED \\\n   -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n   -e 's: [[^ ]]*conftest\\.: $lt_compiler_flag&:; t' \\\n   -e 's:$: $lt_compiler_flag:'`\n   (eval echo \"\\\"\\$as_me:$LINENO: $lt_compile\\\"\" >&AS_MESSAGE_LOG_FD)\n   (eval \"$lt_compile\" 2>out/conftest.err)\n   ac_status=$?\n   cat out/conftest.err >&AS_MESSAGE_LOG_FD\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&AS_MESSAGE_LOG_FD\n   if (exit $ac_status) && test -s out/conftest2.$ac_objext\n   then\n     # The compiler can only warn and ignore the option if not recognized\n     # So say no if there are warnings\n     $ECHO \"$_lt_compiler_boilerplate\" | $SED '/^$/d' > out/conftest.exp\n     $SED '/^$/d; /^ *+/d' out/conftest.err >out/conftest.er2\n     if test ! -s out/conftest.er2 || diff out/conftest.exp out/conftest.er2 >/dev/null; then\n       _LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)=yes\n     fi\n   fi\n   chmod u+w . 2>&AS_MESSAGE_LOG_FD\n   $RM conftest*\n   # SGI C++ compiler will create directory out/ii_files/ for\n   # template instantiation\n   test -d out/ii_files && $RM out/ii_files/* && rmdir out/ii_files\n   $RM out/* && rmdir out\n   cd ..\n   $RM -r conftest\n   $RM conftest*\n])\n_LT_TAGDECL([compiler_c_o], [lt_cv_prog_compiler_c_o], [1],\n\t[Does compiler simultaneously support -c and -o options?])\n])# _LT_COMPILER_C_O\n\n\n# _LT_COMPILER_FILE_LOCKS([TAGNAME])\n# ----------------------------------\n# Check to see if we can do hard links to lock some files if needed\nm4_defun([_LT_COMPILER_FILE_LOCKS],\n[m4_require([_LT_ENABLE_LOCK])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\n_LT_COMPILER_C_O([$1])\n\nhard_links=nottested\nif test no = \"$_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)\" && test no != \"$need_locks\"; then\n  # do not overwrite the value of need_locks provided by the user\n  AC_MSG_CHECKING([if we can lock with hard links])\n  hard_links=yes\n  $RM conftest*\n  ln conftest.a conftest.b 2>/dev/null && hard_links=no\n  touch conftest.a\n  ln conftest.a conftest.b 2>&5 || hard_links=no\n  ln conftest.a conftest.b 2>/dev/null && hard_links=no\n  AC_MSG_RESULT([$hard_links])\n  if test no = \"$hard_links\"; then\n    AC_MSG_WARN(['$CC' does not support '-c -o', so 'make -j' may be unsafe])\n    need_locks=warn\n  fi\nelse\n  need_locks=no\nfi\n_LT_DECL([], [need_locks], [1], [Must we lock files when doing compilation?])\n])# _LT_COMPILER_FILE_LOCKS\n\n\n# _LT_CHECK_OBJDIR\n# ----------------\nm4_defun([_LT_CHECK_OBJDIR],\n[AC_CACHE_CHECK([for objdir], [lt_cv_objdir],\n[rm -f .libs 2>/dev/null\nmkdir .libs 2>/dev/null\nif test -d .libs; then\n  lt_cv_objdir=.libs\nelse\n  # MS-DOS does not allow filenames that begin with a dot.\n  lt_cv_objdir=_libs\nfi\nrmdir .libs 2>/dev/null])\nobjdir=$lt_cv_objdir\n_LT_DECL([], [objdir], [0],\n         [The name of the directory that contains temporary libtool files])dnl\nm4_pattern_allow([LT_OBJDIR])dnl\nAC_DEFINE_UNQUOTED([LT_OBJDIR], \"$lt_cv_objdir/\",\n  [Define to the sub-directory where libtool stores uninstalled libraries.])\n])# _LT_CHECK_OBJDIR\n\n\n# _LT_LINKER_HARDCODE_LIBPATH([TAGNAME])\n# --------------------------------------\n# Check hardcoding attributes.\nm4_defun([_LT_LINKER_HARDCODE_LIBPATH],\n[AC_MSG_CHECKING([how to hardcode library paths into programs])\n_LT_TAGVAR(hardcode_action, $1)=\nif test -n \"$_LT_TAGVAR(hardcode_libdir_flag_spec, $1)\" ||\n   test -n \"$_LT_TAGVAR(runpath_var, $1)\" ||\n   test yes = \"$_LT_TAGVAR(hardcode_automatic, $1)\"; then\n\n  # We can hardcode non-existent directories.\n  if test no != \"$_LT_TAGVAR(hardcode_direct, $1)\" &&\n     # If the only mechanism to avoid hardcoding is shlibpath_var, we\n     # have to relink, otherwise we might link with an installed library\n     # when we should be linking with a yet-to-be-installed one\n     ## test no != \"$_LT_TAGVAR(hardcode_shlibpath_var, $1)\" &&\n     test no != \"$_LT_TAGVAR(hardcode_minus_L, $1)\"; then\n    # Linking always hardcodes the temporary library directory.\n    _LT_TAGVAR(hardcode_action, $1)=relink\n  else\n    # We can link without hardcoding, and we can hardcode nonexisting dirs.\n    _LT_TAGVAR(hardcode_action, $1)=immediate\n  fi\nelse\n  # We cannot hardcode anything, or else we can only hardcode existing\n  # directories.\n  _LT_TAGVAR(hardcode_action, $1)=unsupported\nfi\nAC_MSG_RESULT([$_LT_TAGVAR(hardcode_action, $1)])\n\nif test relink = \"$_LT_TAGVAR(hardcode_action, $1)\" ||\n   test yes = \"$_LT_TAGVAR(inherit_rpath, $1)\"; then\n  # Fast installation is not supported\n  enable_fast_install=no\nelif test yes = \"$shlibpath_overrides_runpath\" ||\n     test no = \"$enable_shared\"; then\n  # Fast installation is not necessary\n  enable_fast_install=needless\nfi\n_LT_TAGDECL([], [hardcode_action], [0],\n    [How to hardcode a shared library path into an executable])\n])# _LT_LINKER_HARDCODE_LIBPATH\n\n\n# _LT_CMD_STRIPLIB\n# ----------------\nm4_defun([_LT_CMD_STRIPLIB],\n[m4_require([_LT_DECL_EGREP])\nstriplib=\nold_striplib=\nAC_MSG_CHECKING([whether stripping libraries is possible])\nif test -n \"$STRIP\" && $STRIP -V 2>&1 | $GREP \"GNU strip\" >/dev/null; then\n  test -z \"$old_striplib\" && old_striplib=\"$STRIP --strip-debug\"\n  test -z \"$striplib\" && striplib=\"$STRIP --strip-unneeded\"\n  AC_MSG_RESULT([yes])\nelse\n# FIXME - insert some real tests, host_os isn't really good enough\n  case $host_os in\n  darwin*)\n    if test -n \"$STRIP\"; then\n      striplib=\"$STRIP -x\"\n      old_striplib=\"$STRIP -S\"\n      AC_MSG_RESULT([yes])\n    else\n      AC_MSG_RESULT([no])\n    fi\n    ;;\n  *)\n    AC_MSG_RESULT([no])\n    ;;\n  esac\nfi\n_LT_DECL([], [old_striplib], [1], [Commands to strip libraries])\n_LT_DECL([], [striplib], [1])\n])# _LT_CMD_STRIPLIB\n\n\n# _LT_PREPARE_MUNGE_PATH_LIST\n# ---------------------------\n# Make sure func_munge_path_list() is defined correctly.\nm4_defun([_LT_PREPARE_MUNGE_PATH_LIST],\n[[# func_munge_path_list VARIABLE PATH\n# -----------------------------------\n# VARIABLE is name of variable containing _space_ separated list of\n# directories to be munged by the contents of PATH, which is string\n# having a format:\n# \"DIR[:DIR]:\"\n#       string \"DIR[ DIR]\" will be prepended to VARIABLE\n# \":DIR[:DIR]\"\n#       string \"DIR[ DIR]\" will be appended to VARIABLE\n# \"DIRP[:DIRP]::[DIRA:]DIRA\"\n#       string \"DIRP[ DIRP]\" will be prepended to VARIABLE and string\n#       \"DIRA[ DIRA]\" will be appended to VARIABLE\n# \"DIR[:DIR]\"\n#       VARIABLE will be replaced by \"DIR[ DIR]\"\nfunc_munge_path_list ()\n{\n    case x@S|@2 in\n    x)\n        ;;\n    *:)\n        eval @S|@1=\\\"`$ECHO @S|@2 | $SED 's/:/ /g'` \\@S|@@S|@1\\\"\n        ;;\n    x:*)\n        eval @S|@1=\\\"\\@S|@@S|@1 `$ECHO @S|@2 | $SED 's/:/ /g'`\\\"\n        ;;\n    *::*)\n        eval @S|@1=\\\"\\@S|@@S|@1\\ `$ECHO @S|@2 | $SED -e 's/.*:://' -e 's/:/ /g'`\\\"\n        eval @S|@1=\\\"`$ECHO @S|@2 | $SED -e 's/::.*//' -e 's/:/ /g'`\\ \\@S|@@S|@1\\\"\n        ;;\n    *)\n        eval @S|@1=\\\"`$ECHO @S|@2 | $SED 's/:/ /g'`\\\"\n        ;;\n    esac\n}\n]])# _LT_PREPARE_PATH_LIST\n\n\n# _LT_SYS_DYNAMIC_LINKER([TAG])\n# -----------------------------\n# PORTME Fill in your ld.so characteristics\nm4_defun([_LT_SYS_DYNAMIC_LINKER],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_OBJDUMP])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_CHECK_SHELL_FEATURES])dnl\nm4_require([_LT_PREPARE_MUNGE_PATH_LIST])dnl\nAC_MSG_CHECKING([dynamic linker characteristics])\nm4_if([$1],\n\t[], [\nif test yes = \"$GCC\"; then\n  case $host_os in\n    darwin*) lt_awk_arg='/^libraries:/,/LR/' ;;\n    *) lt_awk_arg='/^libraries:/' ;;\n  esac\n  case $host_os in\n    mingw* | cegcc*) lt_sed_strip_eq='s|=\\([[A-Za-z]]:\\)|\\1|g' ;;\n    *) lt_sed_strip_eq='s|=/|/|g' ;;\n  esac\n  lt_search_path_spec=`$CC -print-search-dirs | awk $lt_awk_arg | $SED -e \"s/^libraries://\" -e $lt_sed_strip_eq`\n  case $lt_search_path_spec in\n  *\\;*)\n    # if the path contains \";\" then we assume it to be the separator\n    # otherwise default to the standard path separator (i.e. \":\") - it is\n    # assumed that no part of a normal pathname contains \";\" but that should\n    # okay in the real world where \";\" in dirpaths is itself problematic.\n    lt_search_path_spec=`$ECHO \"$lt_search_path_spec\" | $SED 's/;/ /g'`\n    ;;\n  *)\n    lt_search_path_spec=`$ECHO \"$lt_search_path_spec\" | $SED \"s/$PATH_SEPARATOR/ /g\"`\n    ;;\n  esac\n  # Ok, now we have the path, separated by spaces, we can step through it\n  # and add multilib dir if necessary...\n  lt_tmp_lt_search_path_spec=\n  lt_multi_os_dir=/`$CC $CPPFLAGS $CFLAGS $LDFLAGS -print-multi-os-directory 2>/dev/null`\n  # ...but if some path component already ends with the multilib dir we assume\n  # that all is fine and trust -print-search-dirs as is (GCC 4.2? or newer).\n  case \"$lt_multi_os_dir; $lt_search_path_spec \" in\n  \"/; \"* | \"/.; \"* | \"/./; \"* | *\"$lt_multi_os_dir \"* | *\"$lt_multi_os_dir/ \"*)\n    lt_multi_os_dir=\n    ;;\n  esac\n  for lt_sys_path in $lt_search_path_spec; do\n    if test -d \"$lt_sys_path$lt_multi_os_dir\"; then\n      lt_tmp_lt_search_path_spec=\"$lt_tmp_lt_search_path_spec $lt_sys_path$lt_multi_os_dir\"\n    elif test -n \"$lt_multi_os_dir\"; then\n      test -d \"$lt_sys_path\" && \\\n\tlt_tmp_lt_search_path_spec=\"$lt_tmp_lt_search_path_spec $lt_sys_path\"\n    fi\n  done\n  lt_search_path_spec=`$ECHO \"$lt_tmp_lt_search_path_spec\" | awk '\nBEGIN {RS = \" \"; FS = \"/|\\n\";} {\n  lt_foo = \"\";\n  lt_count = 0;\n  for (lt_i = NF; lt_i > 0; lt_i--) {\n    if ($lt_i != \"\" && $lt_i != \".\") {\n      if ($lt_i == \"..\") {\n        lt_count++;\n      } else {\n        if (lt_count == 0) {\n          lt_foo = \"/\" $lt_i lt_foo;\n        } else {\n          lt_count--;\n        }\n      }\n    }\n  }\n  if (lt_foo != \"\") { lt_freq[[lt_foo]]++; }\n  if (lt_freq[[lt_foo]] == 1) { print lt_foo; }\n}'`\n  # AWK program above erroneously prepends '/' to C:/dos/paths\n  # for these hosts.\n  case $host_os in\n    mingw* | cegcc*) lt_search_path_spec=`$ECHO \"$lt_search_path_spec\" |\\\n      $SED 's|/\\([[A-Za-z]]:\\)|\\1|g'` ;;\n  esac\n  sys_lib_search_path_spec=`$ECHO \"$lt_search_path_spec\" | $lt_NL2SP`\nelse\n  sys_lib_search_path_spec=\"/lib /usr/lib /usr/local/lib\"\nfi])\nlibrary_names_spec=\nlibname_spec='lib$name'\nsoname_spec=\nshrext_cmds=.so\npostinstall_cmds=\npostuninstall_cmds=\nfinish_cmds=\nfinish_eval=\nshlibpath_var=\nshlibpath_overrides_runpath=unknown\nversion_type=none\ndynamic_linker=\"$host_os ld.so\"\nsys_lib_dlsearch_path_spec=\"/lib /usr/lib\"\nneed_lib_prefix=unknown\nhardcode_into_libs=no\n\n# when you set need_version to no, make sure it does not cause -set_version\n# flags to be left without arguments\nneed_version=unknown\n\nAC_ARG_VAR([LT_SYS_LIBRARY_PATH],\n[User-defined run-time library search path.])\n\ncase $host_os in\naix3*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='$libname$release$shared_ext$versuffix $libname.a'\n  shlibpath_var=LIBPATH\n\n  # AIX 3 has no versioning support, so we append a major version to the name.\n  soname_spec='$libname$release$shared_ext$major'\n  ;;\n\naix[[4-9]]*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  hardcode_into_libs=yes\n  if test ia64 = \"$host_cpu\"; then\n    # AIX 5 supports IA64\n    library_names_spec='$libname$release$shared_ext$major $libname$release$shared_ext$versuffix $libname$shared_ext'\n    shlibpath_var=LD_LIBRARY_PATH\n  else\n    # With GCC up to 2.95.x, collect2 would create an import file\n    # for dependence libraries.  The import file would start with\n    # the line '#! .'.  This would cause the generated library to\n    # depend on '.', always an invalid library.  This was fixed in\n    # development snapshots of GCC prior to 3.0.\n    case $host_os in\n      aix4 | aix4.[[01]] | aix4.[[01]].*)\n      if { echo '#if __GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ >= 97)'\n\t   echo ' yes '\n\t   echo '#endif'; } | $CC -E - | $GREP yes > /dev/null; then\n\t:\n      else\n\tcan_build_shared=no\n      fi\n      ;;\n    esac\n    # Using Import Files as archive members, it is possible to support\n    # filename-based versioning of shared library archives on AIX. While\n    # this would work for both with and without runtime linking, it will\n    # prevent static linking of such archives. So we do filename-based\n    # shared library versioning with .so extension only, which is used\n    # when both runtime linking and shared linking is enabled.\n    # Unfortunately, runtime linking may impact performance, so we do\n    # not want this to be the default eventually. Also, we use the\n    # versioned .so libs for executables only if there is the -brtl\n    # linker flag in LDFLAGS as well, or --with-aix-soname=svr4 only.\n    # To allow for filename-based versioning support, we need to create\n    # libNAME.so.V as an archive file, containing:\n    # *) an Import File, referring to the versioned filename of the\n    #    archive as well as the shared archive member, telling the\n    #    bitwidth (32 or 64) of that shared object, and providing the\n    #    list of exported symbols of that shared object, eventually\n    #    decorated with the 'weak' keyword\n    # *) the shared object with the F_LOADONLY flag set, to really avoid\n    #    it being seen by the linker.\n    # At run time we better use the real file rather than another symlink,\n    # but for link time we create the symlink libNAME.so -> libNAME.so.V\n\n    case $with_aix_soname,$aix_use_runtimelinking in\n    # AIX (on Power*) has no versioning support, so currently we cannot hardcode correct\n    # soname into executable. Probably we can add versioning support to\n    # collect2, so additional links can be useful in future.\n    aix,yes) # traditional libtool\n      dynamic_linker='AIX unversionable lib.so'\n      # If using run time linking (on AIX 4.2 or later) use lib<name>.so\n      # instead of lib<name>.a to let people know that these are not\n      # typical AIX shared libraries.\n      library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n      ;;\n    aix,no) # traditional AIX only\n      dynamic_linker='AIX lib.a[(]lib.so.V[)]'\n      # We preserve .a as extension for shared libraries through AIX4.2\n      # and later when we are not doing run time linking.\n      library_names_spec='$libname$release.a $libname.a'\n      soname_spec='$libname$release$shared_ext$major'\n      ;;\n    svr4,*) # full svr4 only\n      dynamic_linker=\"AIX lib.so.V[(]$shared_archive_member_spec.o[)]\"\n      library_names_spec='$libname$release$shared_ext$major $libname$shared_ext'\n      # We do not specify a path in Import Files, so LIBPATH fires.\n      shlibpath_overrides_runpath=yes\n      ;;\n    *,yes) # both, prefer svr4\n      dynamic_linker=\"AIX lib.so.V[(]$shared_archive_member_spec.o[)], lib.a[(]lib.so.V[)]\"\n      library_names_spec='$libname$release$shared_ext$major $libname$shared_ext'\n      # unpreferred sharedlib libNAME.a needs extra handling\n      postinstall_cmds='test -n \"$linkname\" || linkname=\"$realname\"~func_stripname \"\" \".so\" \"$linkname\"~$install_shared_prog \"$dir/$func_stripname_result.$libext\" \"$destdir/$func_stripname_result.$libext\"~test -z \"$tstripme\" || test -z \"$striplib\" || $striplib \"$destdir/$func_stripname_result.$libext\"'\n      postuninstall_cmds='for n in $library_names $old_library; do :; done~func_stripname \"\" \".so\" \"$n\"~test \"$func_stripname_result\" = \"$n\" || func_append rmfiles \" $odir/$func_stripname_result.$libext\"'\n      # We do not specify a path in Import Files, so LIBPATH fires.\n      shlibpath_overrides_runpath=yes\n      ;;\n    *,no) # both, prefer aix\n      dynamic_linker=\"AIX lib.a[(]lib.so.V[)], lib.so.V[(]$shared_archive_member_spec.o[)]\"\n      library_names_spec='$libname$release.a $libname.a'\n      soname_spec='$libname$release$shared_ext$major'\n      # unpreferred sharedlib libNAME.so.V and symlink libNAME.so need extra handling\n      postinstall_cmds='test -z \"$dlname\" || $install_shared_prog $dir/$dlname $destdir/$dlname~test -z \"$tstripme\" || test -z \"$striplib\" || $striplib $destdir/$dlname~test -n \"$linkname\" || linkname=$realname~func_stripname \"\" \".a\" \"$linkname\"~(cd \"$destdir\" && $LN_S -f $dlname $func_stripname_result.so)'\n      postuninstall_cmds='test -z \"$dlname\" || func_append rmfiles \" $odir/$dlname\"~for n in $old_library $library_names; do :; done~func_stripname \"\" \".a\" \"$n\"~func_append rmfiles \" $odir/$func_stripname_result.so\"'\n      ;;\n    esac\n    shlibpath_var=LIBPATH\n  fi\n  ;;\n\namigaos*)\n  case $host_cpu in\n  powerpc)\n    # Since July 2007 AmigaOS4 officially supports .so libraries.\n    # When compiling the executable, add -use-dynld -Lsobjs: to the compileline.\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n    ;;\n  m68k)\n    library_names_spec='$libname.ixlibrary $libname.a'\n    # Create ${libname}_ixlibrary.a entries in /sys/libs.\n    finish_eval='for lib in `ls $libdir/*.ixlibrary 2>/dev/null`; do libname=`func_echo_all \"$lib\" | $SED '\\''s%^.*/\\([[^/]]*\\)\\.ixlibrary$%\\1%'\\''`; $RM /sys/libs/${libname}_ixlibrary.a; $show \"cd /sys/libs && $LN_S $lib ${libname}_ixlibrary.a\"; cd /sys/libs && $LN_S $lib ${libname}_ixlibrary.a || exit 1; done'\n    ;;\n  esac\n  ;;\n\nbeos*)\n  library_names_spec='$libname$shared_ext'\n  dynamic_linker=\"$host_os ld.so\"\n  shlibpath_var=LIBRARY_PATH\n  ;;\n\nbsdi[[45]]*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  sys_lib_search_path_spec=\"/shlib /usr/lib /usr/X11/lib /usr/contrib/lib /lib /usr/local/lib\"\n  sys_lib_dlsearch_path_spec=\"/shlib /usr/lib /usr/local/lib\"\n  # the default ld.so.conf also contains /usr/contrib/lib and\n  # /usr/X11R6/lib (/usr/X11 is a link to /usr/X11R6), but let us allow\n  # libtool to hard-code these into programs\n  ;;\n\ncygwin* | mingw* | pw32* | cegcc*)\n  version_type=windows\n  shrext_cmds=.dll\n  need_version=no\n  need_lib_prefix=no\n\n  case $GCC,$cc_basename in\n  yes,*)\n    # gcc\n    library_names_spec='$libname.dll.a'\n    # DLL is installed to $(libdir)/../bin by postinstall_cmds\n    postinstall_cmds='base_file=`basename \\$file`~\n      dlpath=`$SHELL 2>&1 -c '\\''. $dir/'\\''\\$base_file'\\''i; echo \\$dlname'\\''`~\n      dldir=$destdir/`dirname \\$dlpath`~\n      test -d \\$dldir || mkdir -p \\$dldir~\n      $install_prog $dir/$dlname \\$dldir/$dlname~\n      chmod a+x \\$dldir/$dlname~\n      if test -n '\\''$stripme'\\'' && test -n '\\''$striplib'\\''; then\n        eval '\\''$striplib \\$dldir/$dlname'\\'' || exit \\$?;\n      fi'\n    postuninstall_cmds='dldll=`$SHELL 2>&1 -c '\\''. $file; echo \\$dlname'\\''`~\n      dlpath=$dir/\\$dldll~\n       $RM \\$dlpath'\n    shlibpath_overrides_runpath=yes\n\n    case $host_os in\n    cygwin*)\n      # Cygwin DLLs use 'cyg' prefix rather than 'lib'\n      soname_spec='`echo $libname | sed -e 's/^lib/cyg/'``echo $release | $SED -e 's/[[.]]/-/g'`$versuffix$shared_ext'\nm4_if([$1], [],[\n      sys_lib_search_path_spec=\"$sys_lib_search_path_spec /usr/lib/w32api\"])\n      ;;\n    mingw* | cegcc*)\n      # MinGW DLLs use traditional 'lib' prefix\n      soname_spec='$libname`echo $release | $SED -e 's/[[.]]/-/g'`$versuffix$shared_ext'\n      ;;\n    pw32*)\n      # pw32 DLLs use 'pw' prefix rather than 'lib'\n      library_names_spec='`echo $libname | sed -e 's/^lib/pw/'``echo $release | $SED -e 's/[[.]]/-/g'`$versuffix$shared_ext'\n      ;;\n    esac\n    dynamic_linker='Win32 ld.exe'\n    ;;\n\n  *,cl*)\n    # Native MSVC\n    libname_spec='$name'\n    soname_spec='$libname`echo $release | $SED -e 's/[[.]]/-/g'`$versuffix$shared_ext'\n    library_names_spec='$libname.dll.lib'\n\n    case $build_os in\n    mingw*)\n      sys_lib_search_path_spec=\n      lt_save_ifs=$IFS\n      IFS=';'\n      for lt_path in $LIB\n      do\n        IFS=$lt_save_ifs\n        # Let DOS variable expansion print the short 8.3 style file name.\n        lt_path=`cd \"$lt_path\" 2>/dev/null && cmd //C \"for %i in (\".\") do @echo %~si\"`\n        sys_lib_search_path_spec=\"$sys_lib_search_path_spec $lt_path\"\n      done\n      IFS=$lt_save_ifs\n      # Convert to MSYS style.\n      sys_lib_search_path_spec=`$ECHO \"$sys_lib_search_path_spec\" | sed -e 's|\\\\\\\\|/|g' -e 's| \\\\([[a-zA-Z]]\\\\):| /\\\\1|g' -e 's|^ ||'`\n      ;;\n    cygwin*)\n      # Convert to unix form, then to dos form, then back to unix form\n      # but this time dos style (no spaces!) so that the unix form looks\n      # like /cygdrive/c/PROGRA~1:/cygdr...\n      sys_lib_search_path_spec=`cygpath --path --unix \"$LIB\"`\n      sys_lib_search_path_spec=`cygpath --path --dos \"$sys_lib_search_path_spec\" 2>/dev/null`\n      sys_lib_search_path_spec=`cygpath --path --unix \"$sys_lib_search_path_spec\" | $SED -e \"s/$PATH_SEPARATOR/ /g\"`\n      ;;\n    *)\n      sys_lib_search_path_spec=$LIB\n      if $ECHO \"$sys_lib_search_path_spec\" | [$GREP ';[c-zC-Z]:/' >/dev/null]; then\n        # It is most probably a Windows format PATH.\n        sys_lib_search_path_spec=`$ECHO \"$sys_lib_search_path_spec\" | $SED -e 's/;/ /g'`\n      else\n        sys_lib_search_path_spec=`$ECHO \"$sys_lib_search_path_spec\" | $SED -e \"s/$PATH_SEPARATOR/ /g\"`\n      fi\n      # FIXME: find the short name or the path components, as spaces are\n      # common. (e.g. \"Program Files\" -> \"PROGRA~1\")\n      ;;\n    esac\n\n    # DLL is installed to $(libdir)/../bin by postinstall_cmds\n    postinstall_cmds='base_file=`basename \\$file`~\n      dlpath=`$SHELL 2>&1 -c '\\''. $dir/'\\''\\$base_file'\\''i; echo \\$dlname'\\''`~\n      dldir=$destdir/`dirname \\$dlpath`~\n      test -d \\$dldir || mkdir -p \\$dldir~\n      $install_prog $dir/$dlname \\$dldir/$dlname'\n    postuninstall_cmds='dldll=`$SHELL 2>&1 -c '\\''. $file; echo \\$dlname'\\''`~\n      dlpath=$dir/\\$dldll~\n       $RM \\$dlpath'\n    shlibpath_overrides_runpath=yes\n    dynamic_linker='Win32 link.exe'\n    ;;\n\n  *)\n    # Assume MSVC wrapper\n    library_names_spec='$libname`echo $release | $SED -e 's/[[.]]/-/g'`$versuffix$shared_ext $libname.lib'\n    dynamic_linker='Win32 ld.exe'\n    ;;\n  esac\n  # FIXME: first we should search . and the directory the executable is in\n  shlibpath_var=PATH\n  ;;\n\ndarwin* | rhapsody*)\n  dynamic_linker=\"$host_os dyld\"\n  version_type=darwin\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$major$shared_ext $libname$shared_ext'\n  soname_spec='$libname$release$major$shared_ext'\n  shlibpath_overrides_runpath=yes\n  shlibpath_var=DYLD_LIBRARY_PATH\n  shrext_cmds='`test .$module = .yes && echo .so || echo .dylib`'\nm4_if([$1], [],[\n  sys_lib_search_path_spec=\"$sys_lib_search_path_spec /usr/local/lib\"])\n  sys_lib_dlsearch_path_spec='/usr/local/lib /lib /usr/lib'\n  ;;\n\ndgux*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  ;;\n\nfreebsd* | dragonfly*)\n  # DragonFly does not have aout.  When/if they implement a new\n  # versioning mechanism, adjust this.\n  if test -x /usr/bin/objformat; then\n    objformat=`/usr/bin/objformat`\n  else\n    case $host_os in\n    freebsd[[23]].*) objformat=aout ;;\n    *) objformat=elf ;;\n    esac\n  fi\n  version_type=freebsd-$objformat\n  case $version_type in\n    freebsd-elf*)\n      library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n      soname_spec='$libname$release$shared_ext$major'\n      need_version=no\n      need_lib_prefix=no\n      ;;\n    freebsd-*)\n      library_names_spec='$libname$release$shared_ext$versuffix $libname$shared_ext$versuffix'\n      need_version=yes\n      ;;\n  esac\n  shlibpath_var=LD_LIBRARY_PATH\n  case $host_os in\n  freebsd2.*)\n    shlibpath_overrides_runpath=yes\n    ;;\n  freebsd3.[[01]]* | freebsdelf3.[[01]]*)\n    shlibpath_overrides_runpath=yes\n    hardcode_into_libs=yes\n    ;;\n  freebsd3.[[2-9]]* | freebsdelf3.[[2-9]]* | \\\n  freebsd4.[[0-5]] | freebsdelf4.[[0-5]] | freebsd4.1.1 | freebsdelf4.1.1)\n    shlibpath_overrides_runpath=no\n    hardcode_into_libs=yes\n    ;;\n  *) # from 4.6 on, and DragonFly\n    shlibpath_overrides_runpath=yes\n    hardcode_into_libs=yes\n    ;;\n  esac\n  ;;\n\nhaiku*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  dynamic_linker=\"$host_os runtime_loader\"\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  sys_lib_dlsearch_path_spec='/boot/home/config/lib /boot/common/lib /boot/system/lib'\n  hardcode_into_libs=yes\n  ;;\n\nhpux9* | hpux10* | hpux11*)\n  # Give a soname corresponding to the major version so that dld.sl refuses to\n  # link against other versions.\n  version_type=sunos\n  need_lib_prefix=no\n  need_version=no\n  case $host_cpu in\n  ia64*)\n    shrext_cmds='.so'\n    hardcode_into_libs=yes\n    dynamic_linker=\"$host_os dld.so\"\n    shlibpath_var=LD_LIBRARY_PATH\n    shlibpath_overrides_runpath=yes # Unless +noenvvar is specified.\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n    soname_spec='$libname$release$shared_ext$major'\n    if test 32 = \"$HPUX_IA64_MODE\"; then\n      sys_lib_search_path_spec=\"/usr/lib/hpux32 /usr/local/lib/hpux32 /usr/local/lib\"\n      sys_lib_dlsearch_path_spec=/usr/lib/hpux32\n    else\n      sys_lib_search_path_spec=\"/usr/lib/hpux64 /usr/local/lib/hpux64\"\n      sys_lib_dlsearch_path_spec=/usr/lib/hpux64\n    fi\n    ;;\n  hppa*64*)\n    shrext_cmds='.sl'\n    hardcode_into_libs=yes\n    dynamic_linker=\"$host_os dld.sl\"\n    shlibpath_var=LD_LIBRARY_PATH # How should we handle SHLIB_PATH\n    shlibpath_overrides_runpath=yes # Unless +noenvvar is specified.\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n    soname_spec='$libname$release$shared_ext$major'\n    sys_lib_search_path_spec=\"/usr/lib/pa20_64 /usr/ccs/lib/pa20_64\"\n    sys_lib_dlsearch_path_spec=$sys_lib_search_path_spec\n    ;;\n  *)\n    shrext_cmds='.sl'\n    dynamic_linker=\"$host_os dld.sl\"\n    shlibpath_var=SHLIB_PATH\n    shlibpath_overrides_runpath=no # +s is required to enable SHLIB_PATH\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n    soname_spec='$libname$release$shared_ext$major'\n    ;;\n  esac\n  # HP-UX runs *really* slowly unless shared libraries are mode 555, ...\n  postinstall_cmds='chmod 555 $lib'\n  # or fails outright, so override atomically:\n  install_override_mode=555\n  ;;\n\ninterix[[3-9]]*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  dynamic_linker='Interix 3.x ld.so.1 (PE, like ELF)'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  ;;\n\nirix5* | irix6* | nonstopux*)\n  case $host_os in\n    nonstopux*) version_type=nonstopux ;;\n    *)\n\tif test yes = \"$lt_cv_prog_gnu_ld\"; then\n\t\tversion_type=linux # correct to gnu/linux during the next big refactor\n\telse\n\t\tversion_type=irix\n\tfi ;;\n  esac\n  need_lib_prefix=no\n  need_version=no\n  soname_spec='$libname$release$shared_ext$major'\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$release$shared_ext $libname$shared_ext'\n  case $host_os in\n  irix5* | nonstopux*)\n    libsuff= shlibsuff=\n    ;;\n  *)\n    case $LD in # libtool.m4 will add one of these switches to LD\n    *-32|*\"-32 \"|*-melf32bsmip|*\"-melf32bsmip \")\n      libsuff= shlibsuff= libmagic=32-bit;;\n    *-n32|*\"-n32 \"|*-melf32bmipn32|*\"-melf32bmipn32 \")\n      libsuff=32 shlibsuff=N32 libmagic=N32;;\n    *-64|*\"-64 \"|*-melf64bmip|*\"-melf64bmip \")\n      libsuff=64 shlibsuff=64 libmagic=64-bit;;\n    *) libsuff= shlibsuff= libmagic=never-match;;\n    esac\n    ;;\n  esac\n  shlibpath_var=LD_LIBRARY${shlibsuff}_PATH\n  shlibpath_overrides_runpath=no\n  sys_lib_search_path_spec=\"/usr/lib$libsuff /lib$libsuff /usr/local/lib$libsuff\"\n  sys_lib_dlsearch_path_spec=\"/usr/lib$libsuff /lib$libsuff\"\n  hardcode_into_libs=yes\n  ;;\n\n# No shared lib support for Linux oldld, aout, or coff.\nlinux*oldld* | linux*aout* | linux*coff*)\n  dynamic_linker=no\n  ;;\n\nlinux*android*)\n  version_type=none # Android doesn't support versioned libraries.\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext'\n  soname_spec='$libname$release$shared_ext'\n  finish_cmds=\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n\n  # This implies no fast_install, which is unacceptable.\n  # Some rework will be needed to allow for fast_install\n  # before this can be enabled.\n  hardcode_into_libs=yes\n\n  dynamic_linker='Android linker'\n  # Don't embed -rpath directories since the linker doesn't support them.\n  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n  ;;\n\n# This must be glibc/ELF.\nlinux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig -n $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n\n  # Some binutils ld are patched to set DT_RUNPATH\n  AC_CACHE_VAL([lt_cv_shlibpath_overrides_runpath],\n    [lt_cv_shlibpath_overrides_runpath=no\n    save_LDFLAGS=$LDFLAGS\n    save_libdir=$libdir\n    eval \"libdir=/foo; wl=\\\"$_LT_TAGVAR(lt_prog_compiler_wl, $1)\\\"; \\\n\t LDFLAGS=\\\"\\$LDFLAGS $_LT_TAGVAR(hardcode_libdir_flag_spec, $1)\\\"\"\n    AC_LINK_IFELSE([AC_LANG_PROGRAM([],[])],\n      [AS_IF([ ($OBJDUMP -p conftest$ac_exeext) 2>/dev/null | grep \"RUNPATH.*$libdir\" >/dev/null],\n\t [lt_cv_shlibpath_overrides_runpath=yes])])\n    LDFLAGS=$save_LDFLAGS\n    libdir=$save_libdir\n    ])\n  shlibpath_overrides_runpath=$lt_cv_shlibpath_overrides_runpath\n\n  # This implies no fast_install, which is unacceptable.\n  # Some rework will be needed to allow for fast_install\n  # before this can be enabled.\n  hardcode_into_libs=yes\n\n  # Ideally, we could use ldconfig to report *all* directores which are\n  # searched for libraries, however this is still not possible.  Aside from not\n  # being certain /sbin/ldconfig is available, command\n  # 'ldconfig -N -X -v | grep ^/' on 64bit Fedora does not report /usr/lib64,\n  # even though it is searched at run-time.  Try to do the best guess by\n  # appending ld.so.conf contents (and includes) to the search path.\n  if test -f /etc/ld.so.conf; then\n    lt_ld_extra=`awk '/^include / { system(sprintf(\"cd /etc; cat %s 2>/dev/null\", \\[$]2)); skip = 1; } { if (!skip) print \\[$]0; skip = 0; }' < /etc/ld.so.conf | $SED -e 's/#.*//;/^[\t ]*hwcap[\t ]/d;s/[:,\t]/ /g;s/=[^=]*$//;s/=[^= ]* / /g;s/\"//g;/^$/d' | tr '\\n' ' '`\n    sys_lib_dlsearch_path_spec=\"/lib /usr/lib $lt_ld_extra\"\n  fi\n\n  # We used to test for /lib/ld.so.1 and disable shared libraries on\n  # powerpc, because MkLinux only supported shared libraries with the\n  # GNU dynamic linker.  Since this was broken with cross compilers,\n  # most powerpc-linux boxes support dynamic linking these days and\n  # people can always --disable-shared, the test was removed, and we\n  # assume the GNU/Linux dynamic linker is in use.\n  dynamic_linker='GNU/Linux ld.so'\n  ;;\n\nnetbsd*)\n  version_type=sunos\n  need_lib_prefix=no\n  need_version=no\n  if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$shared_ext$versuffix'\n    finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig -m $libdir'\n    dynamic_linker='NetBSD (a.out) ld.so'\n  else\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n    soname_spec='$libname$release$shared_ext$major'\n    dynamic_linker='NetBSD ld.elf_so'\n  fi\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  hardcode_into_libs=yes\n  ;;\n\nnewsos6)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  ;;\n\n*nto* | *qnx*)\n  version_type=qnx\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  dynamic_linker='ldqnx.so'\n  ;;\n\nopenbsd* | bitrig*)\n  version_type=sunos\n  sys_lib_dlsearch_path_spec=/usr/lib\n  need_lib_prefix=no\n  if test -z \"`echo __ELF__ | $CC -E - | $GREP __ELF__`\"; then\n    need_version=no\n  else\n    need_version=yes\n  fi\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$shared_ext$versuffix'\n  finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig -m $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  ;;\n\nos2*)\n  libname_spec='$name'\n  version_type=windows\n  shrext_cmds=.dll\n  need_version=no\n  need_lib_prefix=no\n  # OS/2 can only load a DLL with a base name of 8 characters or less.\n  soname_spec='`test -n \"$os2dllname\" && libname=\"$os2dllname\";\n    v=$($ECHO $release$versuffix | tr -d .-);\n    n=$($ECHO $libname | cut -b -$((8 - ${#v})) | tr . _);\n    $ECHO $n$v`$shared_ext'\n  library_names_spec='${libname}_dll.$libext'\n  dynamic_linker='OS/2 ld.exe'\n  shlibpath_var=BEGINLIBPATH\n  sys_lib_search_path_spec=\"/lib /usr/lib /usr/local/lib\"\n  sys_lib_dlsearch_path_spec=$sys_lib_search_path_spec\n  postinstall_cmds='base_file=`basename \\$file`~\n    dlpath=`$SHELL 2>&1 -c '\\''. $dir/'\\''\\$base_file'\\''i; $ECHO \\$dlname'\\''`~\n    dldir=$destdir/`dirname \\$dlpath`~\n    test -d \\$dldir || mkdir -p \\$dldir~\n    $install_prog $dir/$dlname \\$dldir/$dlname~\n    chmod a+x \\$dldir/$dlname~\n    if test -n '\\''$stripme'\\'' && test -n '\\''$striplib'\\''; then\n      eval '\\''$striplib \\$dldir/$dlname'\\'' || exit \\$?;\n    fi'\n  postuninstall_cmds='dldll=`$SHELL 2>&1 -c '\\''. $file; $ECHO \\$dlname'\\''`~\n    dlpath=$dir/\\$dldll~\n    $RM \\$dlpath'\n  ;;\n\nosf3* | osf4* | osf5*)\n  version_type=osf\n  need_lib_prefix=no\n  need_version=no\n  soname_spec='$libname$release$shared_ext$major'\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  shlibpath_var=LD_LIBRARY_PATH\n  sys_lib_search_path_spec=\"/usr/shlib /usr/ccs/lib /usr/lib/cmplrs/cc /usr/lib /usr/local/lib /var/shlib\"\n  sys_lib_dlsearch_path_spec=$sys_lib_search_path_spec\n  ;;\n\nrdos*)\n  dynamic_linker=no\n  ;;\n\nsolaris*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  hardcode_into_libs=yes\n  # ldd complains unless libraries are executable\n  postinstall_cmds='chmod +x $lib'\n  ;;\n\nsunos4*)\n  version_type=sunos\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$shared_ext$versuffix'\n  finish_cmds='PATH=\"\\$PATH:/usr/etc\" ldconfig $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  if test yes = \"$with_gnu_ld\"; then\n    need_lib_prefix=no\n  fi\n  need_version=yes\n  ;;\n\nsysv4 | sysv4.3*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  case $host_vendor in\n    sni)\n      shlibpath_overrides_runpath=no\n      need_lib_prefix=no\n      runpath_var=LD_RUN_PATH\n      ;;\n    siemens)\n      need_lib_prefix=no\n      ;;\n    motorola)\n      need_lib_prefix=no\n      need_version=no\n      shlibpath_overrides_runpath=no\n      sys_lib_search_path_spec='/lib /usr/lib /usr/ccs/lib'\n      ;;\n  esac\n  ;;\n\nsysv4*MP*)\n  if test -d /usr/nec; then\n    version_type=linux # correct to gnu/linux during the next big refactor\n    library_names_spec='$libname$shared_ext.$versuffix $libname$shared_ext.$major $libname$shared_ext'\n    soname_spec='$libname$shared_ext.$major'\n    shlibpath_var=LD_LIBRARY_PATH\n  fi\n  ;;\n\nsysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX* | sysv4*uw2*)\n  version_type=sco\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  hardcode_into_libs=yes\n  if test yes = \"$with_gnu_ld\"; then\n    sys_lib_search_path_spec='/usr/local/lib /usr/gnu/lib /usr/ccs/lib /usr/lib /lib'\n  else\n    sys_lib_search_path_spec='/usr/ccs/lib /usr/lib'\n    case $host_os in\n      sco3.2v5*)\n        sys_lib_search_path_spec=\"$sys_lib_search_path_spec /lib\"\n\t;;\n    esac\n  fi\n  sys_lib_dlsearch_path_spec='/usr/lib'\n  ;;\n\ntpf*)\n  # TPF is a cross-target only.  Preferred cross-host = GNU/Linux.\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  ;;\n\nuts4*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  ;;\n\n*)\n  dynamic_linker=no\n  ;;\nesac\nAC_MSG_RESULT([$dynamic_linker])\ntest no = \"$dynamic_linker\" && can_build_shared=no\n\nvariables_saved_for_relink=\"PATH $shlibpath_var $runpath_var\"\nif test yes = \"$GCC\"; then\n  variables_saved_for_relink=\"$variables_saved_for_relink GCC_EXEC_PREFIX COMPILER_PATH LIBRARY_PATH\"\nfi\n\nif test set = \"${lt_cv_sys_lib_search_path_spec+set}\"; then\n  sys_lib_search_path_spec=$lt_cv_sys_lib_search_path_spec\nfi\n\nif test set = \"${lt_cv_sys_lib_dlsearch_path_spec+set}\"; then\n  sys_lib_dlsearch_path_spec=$lt_cv_sys_lib_dlsearch_path_spec\nfi\n\n# remember unaugmented sys_lib_dlsearch_path content for libtool script decls...\nconfigure_time_dlsearch_path=$sys_lib_dlsearch_path_spec\n\n# ... but it needs LT_SYS_LIBRARY_PATH munging for other configure-time code\nfunc_munge_path_list sys_lib_dlsearch_path_spec \"$LT_SYS_LIBRARY_PATH\"\n\n# to be used as default LT_SYS_LIBRARY_PATH value in generated libtool\nconfigure_time_lt_sys_library_path=$LT_SYS_LIBRARY_PATH\n\n_LT_DECL([], [variables_saved_for_relink], [1],\n    [Variables whose values should be saved in libtool wrapper scripts and\n    restored at link time])\n_LT_DECL([], [need_lib_prefix], [0],\n    [Do we need the \"lib\" prefix for modules?])\n_LT_DECL([], [need_version], [0], [Do we need a version for libraries?])\n_LT_DECL([], [version_type], [0], [Library versioning type])\n_LT_DECL([], [runpath_var], [0],  [Shared library runtime path variable])\n_LT_DECL([], [shlibpath_var], [0],[Shared library path variable])\n_LT_DECL([], [shlibpath_overrides_runpath], [0],\n    [Is shlibpath searched before the hard-coded library search path?])\n_LT_DECL([], [libname_spec], [1], [Format of library name prefix])\n_LT_DECL([], [library_names_spec], [1],\n    [[List of archive names.  First name is the real one, the rest are links.\n    The last name is the one that the linker finds with -lNAME]])\n_LT_DECL([], [soname_spec], [1],\n    [[The coded name of the library, if different from the real name]])\n_LT_DECL([], [install_override_mode], [1],\n    [Permission mode override for installation of shared libraries])\n_LT_DECL([], [postinstall_cmds], [2],\n    [Command to use after installation of a shared archive])\n_LT_DECL([], [postuninstall_cmds], [2],\n    [Command to use after uninstallation of a shared archive])\n_LT_DECL([], [finish_cmds], [2],\n    [Commands used to finish a libtool library installation in a directory])\n_LT_DECL([], [finish_eval], [1],\n    [[As \"finish_cmds\", except a single script fragment to be evaled but\n    not shown]])\n_LT_DECL([], [hardcode_into_libs], [0],\n    [Whether we should hardcode library paths into libraries])\n_LT_DECL([], [sys_lib_search_path_spec], [2],\n    [Compile-time system search path for libraries])\n_LT_DECL([sys_lib_dlsearch_path_spec], [configure_time_dlsearch_path], [2],\n    [Detected run-time system search path for libraries])\n_LT_DECL([], [configure_time_lt_sys_library_path], [2],\n    [Explicit LT_SYS_LIBRARY_PATH set during ./configure time])\n])# _LT_SYS_DYNAMIC_LINKER\n\n\n# _LT_PATH_TOOL_PREFIX(TOOL)\n# --------------------------\n# find a file program that can recognize shared library\nAC_DEFUN([_LT_PATH_TOOL_PREFIX],\n[m4_require([_LT_DECL_EGREP])dnl\nAC_MSG_CHECKING([for $1])\nAC_CACHE_VAL(lt_cv_path_MAGIC_CMD,\n[case $MAGIC_CMD in\n[[\\\\/*] |  ?:[\\\\/]*])\n  lt_cv_path_MAGIC_CMD=$MAGIC_CMD # Let the user override the test with a path.\n  ;;\n*)\n  lt_save_MAGIC_CMD=$MAGIC_CMD\n  lt_save_ifs=$IFS; IFS=$PATH_SEPARATOR\ndnl $ac_dummy forces splitting on constant user-supplied paths.\ndnl POSIX.2 word splitting is done only on the output of word expansions,\ndnl not every word.  This closes a longstanding sh security hole.\n  ac_dummy=\"m4_if([$2], , $PATH, [$2])\"\n  for ac_dir in $ac_dummy; do\n    IFS=$lt_save_ifs\n    test -z \"$ac_dir\" && ac_dir=.\n    if test -f \"$ac_dir/$1\"; then\n      lt_cv_path_MAGIC_CMD=$ac_dir/\"$1\"\n      if test -n \"$file_magic_test_file\"; then\n\tcase $deplibs_check_method in\n\t\"file_magic \"*)\n\t  file_magic_regex=`expr \"$deplibs_check_method\" : \"file_magic \\(.*\\)\"`\n\t  MAGIC_CMD=$lt_cv_path_MAGIC_CMD\n\t  if eval $file_magic_cmd \\$file_magic_test_file 2> /dev/null |\n\t    $EGREP \"$file_magic_regex\" > /dev/null; then\n\t    :\n\t  else\n\t    cat <<_LT_EOF 1>&2\n\n*** Warning: the command libtool uses to detect shared libraries,\n*** $file_magic_cmd, produces output that libtool cannot recognize.\n*** The result is that libtool may fail to recognize shared libraries\n*** as such.  This will affect the creation of libtool libraries that\n*** depend on shared libraries, but programs linked with such libtool\n*** libraries will work regardless of this problem.  Nevertheless, you\n*** may want to report the problem to your system manager and/or to\n*** bug-libtool@gnu.org\n\n_LT_EOF\n\t  fi ;;\n\tesac\n      fi\n      break\n    fi\n  done\n  IFS=$lt_save_ifs\n  MAGIC_CMD=$lt_save_MAGIC_CMD\n  ;;\nesac])\nMAGIC_CMD=$lt_cv_path_MAGIC_CMD\nif test -n \"$MAGIC_CMD\"; then\n  AC_MSG_RESULT($MAGIC_CMD)\nelse\n  AC_MSG_RESULT(no)\nfi\n_LT_DECL([], [MAGIC_CMD], [0],\n\t [Used to examine libraries when file_magic_cmd begins with \"file\"])dnl\n])# _LT_PATH_TOOL_PREFIX\n\n# Old name:\nAU_ALIAS([AC_PATH_TOOL_PREFIX], [_LT_PATH_TOOL_PREFIX])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_PATH_TOOL_PREFIX], [])\n\n\n# _LT_PATH_MAGIC\n# --------------\n# find a file program that can recognize a shared library\nm4_defun([_LT_PATH_MAGIC],\n[_LT_PATH_TOOL_PREFIX(${ac_tool_prefix}file, /usr/bin$PATH_SEPARATOR$PATH)\nif test -z \"$lt_cv_path_MAGIC_CMD\"; then\n  if test -n \"$ac_tool_prefix\"; then\n    _LT_PATH_TOOL_PREFIX(file, /usr/bin$PATH_SEPARATOR$PATH)\n  else\n    MAGIC_CMD=:\n  fi\nfi\n])# _LT_PATH_MAGIC\n\n\n# LT_PATH_LD\n# ----------\n# find the pathname to the GNU or non-GNU linker\nAC_DEFUN([LT_PATH_LD],\n[AC_REQUIRE([AC_PROG_CC])dnl\nAC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_CANONICAL_BUILD])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_PROG_ECHO_BACKSLASH])dnl\n\nAC_ARG_WITH([gnu-ld],\n    [AS_HELP_STRING([--with-gnu-ld],\n\t[assume the C compiler uses GNU ld @<:@default=no@:>@])],\n    [test no = \"$withval\" || with_gnu_ld=yes],\n    [with_gnu_ld=no])dnl\n\nac_prog=ld\nif test yes = \"$GCC\"; then\n  # Check if gcc -print-prog-name=ld gives a path.\n  AC_MSG_CHECKING([for ld used by $CC])\n  case $host in\n  *-*-mingw*)\n    # gcc leaves a trailing carriage return, which upsets mingw\n    ac_prog=`($CC -print-prog-name=ld) 2>&5 | tr -d '\\015'` ;;\n  *)\n    ac_prog=`($CC -print-prog-name=ld) 2>&5` ;;\n  esac\n  case $ac_prog in\n    # Accept absolute paths.\n    [[\\\\/]]* | ?:[[\\\\/]]*)\n      re_direlt='/[[^/]][[^/]]*/\\.\\./'\n      # Canonicalize the pathname of ld\n      ac_prog=`$ECHO \"$ac_prog\"| $SED 's%\\\\\\\\%/%g'`\n      while $ECHO \"$ac_prog\" | $GREP \"$re_direlt\" > /dev/null 2>&1; do\n\tac_prog=`$ECHO $ac_prog| $SED \"s%$re_direlt%/%\"`\n      done\n      test -z \"$LD\" && LD=$ac_prog\n      ;;\n  \"\")\n    # If it fails, then pretend we aren't using GCC.\n    ac_prog=ld\n    ;;\n  *)\n    # If it is relative, then search for the first ld in PATH.\n    with_gnu_ld=unknown\n    ;;\n  esac\nelif test yes = \"$with_gnu_ld\"; then\n  AC_MSG_CHECKING([for GNU ld])\nelse\n  AC_MSG_CHECKING([for non-GNU ld])\nfi\nAC_CACHE_VAL(lt_cv_path_LD,\n[if test -z \"$LD\"; then\n  lt_save_ifs=$IFS; IFS=$PATH_SEPARATOR\n  for ac_dir in $PATH; do\n    IFS=$lt_save_ifs\n    test -z \"$ac_dir\" && ac_dir=.\n    if test -f \"$ac_dir/$ac_prog\" || test -f \"$ac_dir/$ac_prog$ac_exeext\"; then\n      lt_cv_path_LD=$ac_dir/$ac_prog\n      # Check to see if the program is GNU ld.  I'd rather use --version,\n      # but apparently some variants of GNU ld only accept -v.\n      # Break only if it was the GNU/non-GNU ld that we prefer.\n      case `\"$lt_cv_path_LD\" -v 2>&1 </dev/null` in\n      *GNU* | *'with BFD'*)\n\ttest no != \"$with_gnu_ld\" && break\n\t;;\n      *)\n\ttest yes != \"$with_gnu_ld\" && break\n\t;;\n      esac\n    fi\n  done\n  IFS=$lt_save_ifs\nelse\n  lt_cv_path_LD=$LD # Let the user override the test with a path.\nfi])\nLD=$lt_cv_path_LD\nif test -n \"$LD\"; then\n  AC_MSG_RESULT($LD)\nelse\n  AC_MSG_RESULT(no)\nfi\ntest -z \"$LD\" && AC_MSG_ERROR([no acceptable ld found in \\$PATH])\n_LT_PATH_LD_GNU\nAC_SUBST([LD])\n\n_LT_TAGDECL([], [LD], [1], [The linker used to build libraries])\n])# LT_PATH_LD\n\n# Old names:\nAU_ALIAS([AM_PROG_LD], [LT_PATH_LD])\nAU_ALIAS([AC_PROG_LD], [LT_PATH_LD])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AM_PROG_LD], [])\ndnl AC_DEFUN([AC_PROG_LD], [])\n\n\n# _LT_PATH_LD_GNU\n#- --------------\nm4_defun([_LT_PATH_LD_GNU],\n[AC_CACHE_CHECK([if the linker ($LD) is GNU ld], lt_cv_prog_gnu_ld,\n[# I'd rather use --version here, but apparently some GNU lds only accept -v.\ncase `$LD -v 2>&1 </dev/null` in\n*GNU* | *'with BFD'*)\n  lt_cv_prog_gnu_ld=yes\n  ;;\n*)\n  lt_cv_prog_gnu_ld=no\n  ;;\nesac])\nwith_gnu_ld=$lt_cv_prog_gnu_ld\n])# _LT_PATH_LD_GNU\n\n\n# _LT_CMD_RELOAD\n# --------------\n# find reload flag for linker\n#   -- PORTME Some linkers may need a different reload flag.\nm4_defun([_LT_CMD_RELOAD],\n[AC_CACHE_CHECK([for $LD option to reload object files],\n  lt_cv_ld_reload_flag,\n  [lt_cv_ld_reload_flag='-r'])\nreload_flag=$lt_cv_ld_reload_flag\ncase $reload_flag in\n\"\" | \" \"*) ;;\n*) reload_flag=\" $reload_flag\" ;;\nesac\nreload_cmds='$LD$reload_flag -o $output$reload_objs'\ncase $host_os in\n  cygwin* | mingw* | pw32* | cegcc*)\n    if test yes != \"$GCC\"; then\n      reload_cmds=false\n    fi\n    ;;\n  darwin*)\n    if test yes = \"$GCC\"; then\n      reload_cmds='$LTCC $LTCFLAGS -nostdlib $wl-r -o $output$reload_objs'\n    else\n      reload_cmds='$LD$reload_flag -o $output$reload_objs'\n    fi\n    ;;\nesac\n_LT_TAGDECL([], [reload_flag], [1], [How to create reloadable object files])dnl\n_LT_TAGDECL([], [reload_cmds], [2])dnl\n])# _LT_CMD_RELOAD\n\n\n# _LT_PATH_DD\n# -----------\n# find a working dd\nm4_defun([_LT_PATH_DD],\n[AC_CACHE_CHECK([for a working dd], [ac_cv_path_lt_DD],\n[printf 0123456789abcdef0123456789abcdef >conftest.i\ncat conftest.i conftest.i >conftest2.i\n: ${lt_DD:=$DD}\nAC_PATH_PROGS_FEATURE_CHECK([lt_DD], [dd],\n[if \"$ac_path_lt_DD\" bs=32 count=1 <conftest2.i >conftest.out 2>/dev/null; then\n  cmp -s conftest.i conftest.out \\\n  && ac_cv_path_lt_DD=\"$ac_path_lt_DD\" ac_path_lt_DD_found=:\nfi])\nrm -f conftest.i conftest2.i conftest.out])\n])# _LT_PATH_DD\n\n\n# _LT_CMD_TRUNCATE\n# ----------------\n# find command to truncate a binary pipe\nm4_defun([_LT_CMD_TRUNCATE],\n[m4_require([_LT_PATH_DD])\nAC_CACHE_CHECK([how to truncate binary pipes], [lt_cv_truncate_bin],\n[printf 0123456789abcdef0123456789abcdef >conftest.i\ncat conftest.i conftest.i >conftest2.i\nlt_cv_truncate_bin=\nif \"$ac_cv_path_lt_DD\" bs=32 count=1 <conftest2.i >conftest.out 2>/dev/null; then\n  cmp -s conftest.i conftest.out \\\n  && lt_cv_truncate_bin=\"$ac_cv_path_lt_DD bs=4096 count=1\"\nfi\nrm -f conftest.i conftest2.i conftest.out\ntest -z \"$lt_cv_truncate_bin\" && lt_cv_truncate_bin=\"$SED -e 4q\"])\n_LT_DECL([lt_truncate_bin], [lt_cv_truncate_bin], [1],\n  [Command to truncate a binary pipe])\n])# _LT_CMD_TRUNCATE\n\n\n# _LT_CHECK_MAGIC_METHOD\n# ----------------------\n# how to check for library dependencies\n#  -- PORTME fill in with the dynamic library characteristics\nm4_defun([_LT_CHECK_MAGIC_METHOD],\n[m4_require([_LT_DECL_EGREP])\nm4_require([_LT_DECL_OBJDUMP])\nAC_CACHE_CHECK([how to recognize dependent libraries],\nlt_cv_deplibs_check_method,\n[lt_cv_file_magic_cmd='$MAGIC_CMD'\nlt_cv_file_magic_test_file=\nlt_cv_deplibs_check_method='unknown'\n# Need to set the preceding variable on all platforms that support\n# interlibrary dependencies.\n# 'none' -- dependencies not supported.\n# 'unknown' -- same as none, but documents that we really don't know.\n# 'pass_all' -- all dependencies passed with no checks.\n# 'test_compile' -- check by making test program.\n# 'file_magic [[regex]]' -- check by looking for files in library path\n# that responds to the $file_magic_cmd with a given extended regex.\n# If you have 'file' or equivalent on your system and you're not sure\n# whether 'pass_all' will *always* work, you probably want this one.\n\ncase $host_os in\naix[[4-9]]*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nbeos*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nbsdi[[45]]*)\n  lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (shared object|dynamic lib)'\n  lt_cv_file_magic_cmd='/usr/bin/file -L'\n  lt_cv_file_magic_test_file=/shlib/libc.so\n  ;;\n\ncygwin*)\n  # func_win32_libid is a shell function defined in ltmain.sh\n  lt_cv_deplibs_check_method='file_magic ^x86 archive import|^x86 DLL'\n  lt_cv_file_magic_cmd='func_win32_libid'\n  ;;\n\nmingw* | pw32*)\n  # Base MSYS/MinGW do not provide the 'file' command needed by\n  # func_win32_libid shell function, so use a weaker test based on 'objdump',\n  # unless we find 'file', for example because we are cross-compiling.\n  if ( file / ) >/dev/null 2>&1; then\n    lt_cv_deplibs_check_method='file_magic ^x86 archive import|^x86 DLL'\n    lt_cv_file_magic_cmd='func_win32_libid'\n  else\n    # Keep this pattern in sync with the one in func_win32_libid.\n    lt_cv_deplibs_check_method='file_magic file format (pei*-i386(.*architecture: i386)?|pe-arm-wince|pe-x86-64)'\n    lt_cv_file_magic_cmd='$OBJDUMP -f'\n  fi\n  ;;\n\ncegcc*)\n  # use the weaker test based on 'objdump'. See mingw*.\n  lt_cv_deplibs_check_method='file_magic file format pe-arm-.*little(.*architecture: arm)?'\n  lt_cv_file_magic_cmd='$OBJDUMP -f'\n  ;;\n\ndarwin* | rhapsody*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nfreebsd* | dragonfly*)\n  if echo __ELF__ | $CC -E - | $GREP __ELF__ > /dev/null; then\n    case $host_cpu in\n    i*86 )\n      # Not sure whether the presence of OpenBSD here was a mistake.\n      # Let's accept both of them until this is cleared up.\n      lt_cv_deplibs_check_method='file_magic (FreeBSD|OpenBSD|DragonFly)/i[[3-9]]86 (compact )?demand paged shared library'\n      lt_cv_file_magic_cmd=/usr/bin/file\n      lt_cv_file_magic_test_file=`echo /usr/lib/libc.so.*`\n      ;;\n    esac\n  else\n    lt_cv_deplibs_check_method=pass_all\n  fi\n  ;;\n\nhaiku*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nhpux10.20* | hpux11*)\n  lt_cv_file_magic_cmd=/usr/bin/file\n  case $host_cpu in\n  ia64*)\n    lt_cv_deplibs_check_method='file_magic (s[[0-9]][[0-9]][[0-9]]|ELF-[[0-9]][[0-9]]) shared object file - IA64'\n    lt_cv_file_magic_test_file=/usr/lib/hpux32/libc.so\n    ;;\n  hppa*64*)\n    [lt_cv_deplibs_check_method='file_magic (s[0-9][0-9][0-9]|ELF[ -][0-9][0-9])(-bit)?( [LM]SB)? shared object( file)?[, -]* PA-RISC [0-9]\\.[0-9]']\n    lt_cv_file_magic_test_file=/usr/lib/pa20_64/libc.sl\n    ;;\n  *)\n    lt_cv_deplibs_check_method='file_magic (s[[0-9]][[0-9]][[0-9]]|PA-RISC[[0-9]]\\.[[0-9]]) shared library'\n    lt_cv_file_magic_test_file=/usr/lib/libc.sl\n    ;;\n  esac\n  ;;\n\ninterix[[3-9]]*)\n  # PIC code is broken on Interix 3.x, that's why |\\.a not |_pic\\.a here\n  lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so|\\.a)$'\n  ;;\n\nirix5* | irix6* | nonstopux*)\n  case $LD in\n  *-32|*\"-32 \") libmagic=32-bit;;\n  *-n32|*\"-n32 \") libmagic=N32;;\n  *-64|*\"-64 \") libmagic=64-bit;;\n  *) libmagic=never-match;;\n  esac\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\n# This must be glibc/ELF.\nlinux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nnetbsd*)\n  if echo __ELF__ | $CC -E - | $GREP __ELF__ > /dev/null; then\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so\\.[[0-9]]+\\.[[0-9]]+|_pic\\.a)$'\n  else\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so|_pic\\.a)$'\n  fi\n  ;;\n\nnewos6*)\n  lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (executable|dynamic lib)'\n  lt_cv_file_magic_cmd=/usr/bin/file\n  lt_cv_file_magic_test_file=/usr/lib/libnls.so\n  ;;\n\n*nto* | *qnx*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nopenbsd* | bitrig*)\n  if test -z \"`echo __ELF__ | $CC -E - | $GREP __ELF__`\"; then\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so\\.[[0-9]]+\\.[[0-9]]+|\\.so|_pic\\.a)$'\n  else\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so\\.[[0-9]]+\\.[[0-9]]+|_pic\\.a)$'\n  fi\n  ;;\n\nosf3* | osf4* | osf5*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nrdos*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nsolaris*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nsysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX* | sysv4*uw2*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nsysv4 | sysv4.3*)\n  case $host_vendor in\n  motorola)\n    lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (shared object|dynamic lib) M[[0-9]][[0-9]]* Version [[0-9]]'\n    lt_cv_file_magic_test_file=`echo /usr/lib/libc.so*`\n    ;;\n  ncr)\n    lt_cv_deplibs_check_method=pass_all\n    ;;\n  sequent)\n    lt_cv_file_magic_cmd='/bin/file'\n    lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[LM]]SB (shared object|dynamic lib )'\n    ;;\n  sni)\n    lt_cv_file_magic_cmd='/bin/file'\n    lt_cv_deplibs_check_method=\"file_magic ELF [[0-9]][[0-9]]*-bit [[LM]]SB dynamic lib\"\n    lt_cv_file_magic_test_file=/lib/libc.so\n    ;;\n  siemens)\n    lt_cv_deplibs_check_method=pass_all\n    ;;\n  pc)\n    lt_cv_deplibs_check_method=pass_all\n    ;;\n  esac\n  ;;\n\ntpf*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\nos2*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\nesac\n])\n\nfile_magic_glob=\nwant_nocaseglob=no\nif test \"$build\" = \"$host\"; then\n  case $host_os in\n  mingw* | pw32*)\n    if ( shopt | grep nocaseglob ) >/dev/null 2>&1; then\n      want_nocaseglob=yes\n    else\n      file_magic_glob=`echo aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ | $SED -e \"s/\\(..\\)/s\\/[[\\1]]\\/[[\\1]]\\/g;/g\"`\n    fi\n    ;;\n  esac\nfi\n\nfile_magic_cmd=$lt_cv_file_magic_cmd\ndeplibs_check_method=$lt_cv_deplibs_check_method\ntest -z \"$deplibs_check_method\" && deplibs_check_method=unknown\n\n_LT_DECL([], [deplibs_check_method], [1],\n    [Method to check whether dependent libraries are shared objects])\n_LT_DECL([], [file_magic_cmd], [1],\n    [Command to use when deplibs_check_method = \"file_magic\"])\n_LT_DECL([], [file_magic_glob], [1],\n    [How to find potential files when deplibs_check_method = \"file_magic\"])\n_LT_DECL([], [want_nocaseglob], [1],\n    [Find potential files using nocaseglob when deplibs_check_method = \"file_magic\"])\n])# _LT_CHECK_MAGIC_METHOD\n\n\n# LT_PATH_NM\n# ----------\n# find the pathname to a BSD- or MS-compatible name lister\nAC_DEFUN([LT_PATH_NM],\n[AC_REQUIRE([AC_PROG_CC])dnl\nAC_CACHE_CHECK([for BSD- or MS-compatible name lister (nm)], lt_cv_path_NM,\n[if test -n \"$NM\"; then\n  # Let the user override the test.\n  lt_cv_path_NM=$NM\nelse\n  lt_nm_to_check=${ac_tool_prefix}nm\n  if test -n \"$ac_tool_prefix\" && test \"$build\" = \"$host\"; then\n    lt_nm_to_check=\"$lt_nm_to_check nm\"\n  fi\n  for lt_tmp_nm in $lt_nm_to_check; do\n    lt_save_ifs=$IFS; IFS=$PATH_SEPARATOR\n    for ac_dir in $PATH /usr/ccs/bin/elf /usr/ccs/bin /usr/ucb /bin; do\n      IFS=$lt_save_ifs\n      test -z \"$ac_dir\" && ac_dir=.\n      tmp_nm=$ac_dir/$lt_tmp_nm\n      if test -f \"$tmp_nm\" || test -f \"$tmp_nm$ac_exeext\"; then\n\t# Check to see if the nm accepts a BSD-compat flag.\n\t# Adding the 'sed 1q' prevents false positives on HP-UX, which says:\n\t#   nm: unknown option \"B\" ignored\n\t# Tru64's nm complains that /dev/null is an invalid object file\n\t# MSYS converts /dev/null to NUL, MinGW nm treats NUL as empty\n\tcase $build_os in\n\tmingw*) lt_bad_file=conftest.nm/nofile ;;\n\t*) lt_bad_file=/dev/null ;;\n\tesac\n\tcase `\"$tmp_nm\" -B $lt_bad_file 2>&1 | sed '1q'` in\n\t*$lt_bad_file* | *'Invalid file or object type'*)\n\t  lt_cv_path_NM=\"$tmp_nm -B\"\n\t  break 2\n\t  ;;\n\t*)\n\t  case `\"$tmp_nm\" -p /dev/null 2>&1 | sed '1q'` in\n\t  */dev/null*)\n\t    lt_cv_path_NM=\"$tmp_nm -p\"\n\t    break 2\n\t    ;;\n\t  *)\n\t    lt_cv_path_NM=${lt_cv_path_NM=\"$tmp_nm\"} # keep the first match, but\n\t    continue # so that we can try to find one that supports BSD flags\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n      fi\n    done\n    IFS=$lt_save_ifs\n  done\n  : ${lt_cv_path_NM=no}\nfi])\nif test no != \"$lt_cv_path_NM\"; then\n  NM=$lt_cv_path_NM\nelse\n  # Didn't find any BSD compatible name lister, look for dumpbin.\n  if test -n \"$DUMPBIN\"; then :\n    # Let the user override the test.\n  else\n    AC_CHECK_TOOLS(DUMPBIN, [dumpbin \"link -dump\"], :)\n    case `$DUMPBIN -symbols -headers /dev/null 2>&1 | sed '1q'` in\n    *COFF*)\n      DUMPBIN=\"$DUMPBIN -symbols -headers\"\n      ;;\n    *)\n      DUMPBIN=:\n      ;;\n    esac\n  fi\n  AC_SUBST([DUMPBIN])\n  if test : != \"$DUMPBIN\"; then\n    NM=$DUMPBIN\n  fi\nfi\ntest -z \"$NM\" && NM=nm\nAC_SUBST([NM])\n_LT_DECL([], [NM], [1], [A BSD- or MS-compatible name lister])dnl\n\nAC_CACHE_CHECK([the name lister ($NM) interface], [lt_cv_nm_interface],\n  [lt_cv_nm_interface=\"BSD nm\"\n  echo \"int some_variable = 0;\" > conftest.$ac_ext\n  (eval echo \"\\\"\\$as_me:$LINENO: $ac_compile\\\"\" >&AS_MESSAGE_LOG_FD)\n  (eval \"$ac_compile\" 2>conftest.err)\n  cat conftest.err >&AS_MESSAGE_LOG_FD\n  (eval echo \"\\\"\\$as_me:$LINENO: $NM \\\\\\\"conftest.$ac_objext\\\\\\\"\\\"\" >&AS_MESSAGE_LOG_FD)\n  (eval \"$NM \\\"conftest.$ac_objext\\\"\" 2>conftest.err > conftest.out)\n  cat conftest.err >&AS_MESSAGE_LOG_FD\n  (eval echo \"\\\"\\$as_me:$LINENO: output\\\"\" >&AS_MESSAGE_LOG_FD)\n  cat conftest.out >&AS_MESSAGE_LOG_FD\n  if $GREP 'External.*some_variable' conftest.out > /dev/null; then\n    lt_cv_nm_interface=\"MS dumpbin\"\n  fi\n  rm -f conftest*])\n])# LT_PATH_NM\n\n# Old names:\nAU_ALIAS([AM_PROG_NM], [LT_PATH_NM])\nAU_ALIAS([AC_PROG_NM], [LT_PATH_NM])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AM_PROG_NM], [])\ndnl AC_DEFUN([AC_PROG_NM], [])\n\n# _LT_CHECK_SHAREDLIB_FROM_LINKLIB\n# --------------------------------\n# how to determine the name of the shared library\n# associated with a specific link library.\n#  -- PORTME fill in with the dynamic library characteristics\nm4_defun([_LT_CHECK_SHAREDLIB_FROM_LINKLIB],\n[m4_require([_LT_DECL_EGREP])\nm4_require([_LT_DECL_OBJDUMP])\nm4_require([_LT_DECL_DLLTOOL])\nAC_CACHE_CHECK([how to associate runtime and link libraries],\nlt_cv_sharedlib_from_linklib_cmd,\n[lt_cv_sharedlib_from_linklib_cmd='unknown'\n\ncase $host_os in\ncygwin* | mingw* | pw32* | cegcc*)\n  # two different shell functions defined in ltmain.sh;\n  # decide which one to use based on capabilities of $DLLTOOL\n  case `$DLLTOOL --help 2>&1` in\n  *--identify-strict*)\n    lt_cv_sharedlib_from_linklib_cmd=func_cygming_dll_for_implib\n    ;;\n  *)\n    lt_cv_sharedlib_from_linklib_cmd=func_cygming_dll_for_implib_fallback\n    ;;\n  esac\n  ;;\n*)\n  # fallback: assume linklib IS sharedlib\n  lt_cv_sharedlib_from_linklib_cmd=$ECHO\n  ;;\nesac\n])\nsharedlib_from_linklib_cmd=$lt_cv_sharedlib_from_linklib_cmd\ntest -z \"$sharedlib_from_linklib_cmd\" && sharedlib_from_linklib_cmd=$ECHO\n\n_LT_DECL([], [sharedlib_from_linklib_cmd], [1],\n    [Command to associate shared and link libraries])\n])# _LT_CHECK_SHAREDLIB_FROM_LINKLIB\n\n\n# _LT_PATH_MANIFEST_TOOL\n# ----------------------\n# locate the manifest tool\nm4_defun([_LT_PATH_MANIFEST_TOOL],\n[AC_CHECK_TOOL(MANIFEST_TOOL, mt, :)\ntest -z \"$MANIFEST_TOOL\" && MANIFEST_TOOL=mt\nAC_CACHE_CHECK([if $MANIFEST_TOOL is a manifest tool], [lt_cv_path_mainfest_tool],\n  [lt_cv_path_mainfest_tool=no\n  echo \"$as_me:$LINENO: $MANIFEST_TOOL '-?'\" >&AS_MESSAGE_LOG_FD\n  $MANIFEST_TOOL '-?' 2>conftest.err > conftest.out\n  cat conftest.err >&AS_MESSAGE_LOG_FD\n  if $GREP 'Manifest Tool' conftest.out > /dev/null; then\n    lt_cv_path_mainfest_tool=yes\n  fi\n  rm -f conftest*])\nif test yes != \"$lt_cv_path_mainfest_tool\"; then\n  MANIFEST_TOOL=:\nfi\n_LT_DECL([], [MANIFEST_TOOL], [1], [Manifest tool])dnl\n])# _LT_PATH_MANIFEST_TOOL\n\n\n# _LT_DLL_DEF_P([FILE])\n# ---------------------\n# True iff FILE is a Windows DLL '.def' file.\n# Keep in sync with func_dll_def_p in the libtool script\nAC_DEFUN([_LT_DLL_DEF_P],\n[dnl\n  test DEF = \"`$SED -n dnl\n    -e '\\''s/^[[\t ]]*//'\\'' dnl Strip leading whitespace\n    -e '\\''/^\\(;.*\\)*$/d'\\'' dnl      Delete empty lines and comments\n    -e '\\''s/^\\(EXPORTS\\|LIBRARY\\)\\([[\t ]].*\\)*$/DEF/p'\\'' dnl\n    -e q dnl                          Only consider the first \"real\" line\n    $1`\" dnl\n])# _LT_DLL_DEF_P\n\n\n# LT_LIB_M\n# --------\n# check for math library\nAC_DEFUN([LT_LIB_M],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nLIBM=\ncase $host in\n*-*-beos* | *-*-cegcc* | *-*-cygwin* | *-*-haiku* | *-*-pw32* | *-*-darwin*)\n  # These system don't have libm, or don't need it\n  ;;\n*-ncr-sysv4.3*)\n  AC_CHECK_LIB(mw, _mwvalidcheckl, LIBM=-lmw)\n  AC_CHECK_LIB(m, cos, LIBM=\"$LIBM -lm\")\n  ;;\n*)\n  AC_CHECK_LIB(m, cos, LIBM=-lm)\n  ;;\nesac\nAC_SUBST([LIBM])\n])# LT_LIB_M\n\n# Old name:\nAU_ALIAS([AC_CHECK_LIBM], [LT_LIB_M])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_CHECK_LIBM], [])\n\n\n# _LT_COMPILER_NO_RTTI([TAGNAME])\n# -------------------------------\nm4_defun([_LT_COMPILER_NO_RTTI],\n[m4_require([_LT_TAG_COMPILER])dnl\n\n_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=\n\nif test yes = \"$GCC\"; then\n  case $cc_basename in\n  nvcc*)\n    _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=' -Xcompiler -fno-builtin' ;;\n  *)\n    _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=' -fno-builtin' ;;\n  esac\n\n  _LT_COMPILER_OPTION([if $compiler supports -fno-rtti -fno-exceptions],\n    lt_cv_prog_compiler_rtti_exceptions,\n    [-fno-rtti -fno-exceptions], [],\n    [_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=\"$_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1) -fno-rtti -fno-exceptions\"])\nfi\n_LT_TAGDECL([no_builtin_flag], [lt_prog_compiler_no_builtin_flag], [1],\n\t[Compiler flag to turn off builtin functions])\n])# _LT_COMPILER_NO_RTTI\n\n\n# _LT_CMD_GLOBAL_SYMBOLS\n# ----------------------\nm4_defun([_LT_CMD_GLOBAL_SYMBOLS],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_PROG_CC])dnl\nAC_REQUIRE([AC_PROG_AWK])dnl\nAC_REQUIRE([LT_PATH_NM])dnl\nAC_REQUIRE([LT_PATH_LD])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_TAG_COMPILER])dnl\n\n# Check for command to grab the raw symbol name followed by C symbol from nm.\nAC_MSG_CHECKING([command to parse $NM output from $compiler object])\nAC_CACHE_VAL([lt_cv_sys_global_symbol_pipe],\n[\n# These are sane defaults that work on at least a few old systems.\n# [They come from Ultrix.  What could be older than Ultrix?!! ;)]\n\n# Character class describing NM global symbol codes.\nsymcode='[[BCDEGRST]]'\n\n# Regexp to match symbols that can be accessed directly from C.\nsympat='\\([[_A-Za-z]][[_A-Za-z0-9]]*\\)'\n\n# Define system-specific variables.\ncase $host_os in\naix*)\n  symcode='[[BCDT]]'\n  ;;\ncygwin* | mingw* | pw32* | cegcc*)\n  symcode='[[ABCDGISTW]]'\n  ;;\nhpux*)\n  if test ia64 = \"$host_cpu\"; then\n    symcode='[[ABCDEGRST]]'\n  fi\n  ;;\nirix* | nonstopux*)\n  symcode='[[BCDEGRST]]'\n  ;;\nosf*)\n  symcode='[[BCDEGQRST]]'\n  ;;\nsolaris*)\n  symcode='[[BDRT]]'\n  ;;\nsco3.2v5*)\n  symcode='[[DT]]'\n  ;;\nsysv4.2uw2*)\n  symcode='[[DT]]'\n  ;;\nsysv5* | sco5v6* | unixware* | OpenUNIX*)\n  symcode='[[ABDT]]'\n  ;;\nsysv4)\n  symcode='[[DFNSTU]]'\n  ;;\nesac\n\n# If we're using GNU nm, then use its standard symbol codes.\ncase `$NM -V 2>&1` in\n*GNU* | *'with BFD'*)\n  symcode='[[ABCDGIRSTW]]' ;;\nesac\n\nif test \"$lt_cv_nm_interface\" = \"MS dumpbin\"; then\n  # Gets list of data symbols to import.\n  lt_cv_sys_global_symbol_to_import=\"sed -n -e 's/^I .* \\(.*\\)$/\\1/p'\"\n  # Adjust the below global symbol transforms to fixup imported variables.\n  lt_cdecl_hook=\" -e 's/^I .* \\(.*\\)$/extern __declspec(dllimport) char \\1;/p'\"\n  lt_c_name_hook=\" -e 's/^I .* \\(.*\\)$/  {\\\"\\1\\\", (void *) 0},/p'\"\n  lt_c_name_lib_hook=\"\\\n  -e 's/^I .* \\(lib.*\\)$/  {\\\"\\1\\\", (void *) 0},/p'\\\n  -e 's/^I .* \\(.*\\)$/  {\\\"lib\\1\\\", (void *) 0},/p'\"\nelse\n  # Disable hooks by default.\n  lt_cv_sys_global_symbol_to_import=\n  lt_cdecl_hook=\n  lt_c_name_hook=\n  lt_c_name_lib_hook=\nfi\n\n# Transform an extracted symbol line into a proper C declaration.\n# Some systems (esp. on ia64) link data and code symbols differently,\n# so use this general approach.\nlt_cv_sys_global_symbol_to_cdecl=\"sed -n\"\\\n$lt_cdecl_hook\\\n\" -e 's/^T .* \\(.*\\)$/extern int \\1();/p'\"\\\n\" -e 's/^$symcode$symcode* .* \\(.*\\)$/extern char \\1;/p'\"\n\n# Transform an extracted symbol line into symbol name and symbol address\nlt_cv_sys_global_symbol_to_c_name_address=\"sed -n\"\\\n$lt_c_name_hook\\\n\" -e 's/^: \\(.*\\) .*$/  {\\\"\\1\\\", (void *) 0},/p'\"\\\n\" -e 's/^$symcode$symcode* .* \\(.*\\)$/  {\\\"\\1\\\", (void *) \\&\\1},/p'\"\n\n# Transform an extracted symbol line into symbol name with lib prefix and\n# symbol address.\nlt_cv_sys_global_symbol_to_c_name_address_lib_prefix=\"sed -n\"\\\n$lt_c_name_lib_hook\\\n\" -e 's/^: \\(.*\\) .*$/  {\\\"\\1\\\", (void *) 0},/p'\"\\\n\" -e 's/^$symcode$symcode* .* \\(lib.*\\)$/  {\\\"\\1\\\", (void *) \\&\\1},/p'\"\\\n\" -e 's/^$symcode$symcode* .* \\(.*\\)$/  {\\\"lib\\1\\\", (void *) \\&\\1},/p'\"\n\n# Handle CRLF in mingw tool chain\nopt_cr=\ncase $build_os in\nmingw*)\n  opt_cr=`$ECHO 'x\\{0,1\\}' | tr x '\\015'` # option cr in regexp\n  ;;\nesac\n\n# Try without a prefix underscore, then with it.\nfor ac_symprfx in \"\" \"_\"; do\n\n  # Transform symcode, sympat, and symprfx into a raw symbol and a C symbol.\n  symxfrm=\"\\\\1 $ac_symprfx\\\\2 \\\\2\"\n\n  # Write the raw and C identifiers.\n  if test \"$lt_cv_nm_interface\" = \"MS dumpbin\"; then\n    # Fake it for dumpbin and say T for any non-static function,\n    # D for any global variable and I for any imported variable.\n    # Also find C++ and __fastcall symbols from MSVC++,\n    # which start with @ or ?.\n    lt_cv_sys_global_symbol_pipe=\"$AWK ['\"\\\n\"     {last_section=section; section=\\$ 3};\"\\\n\"     /^COFF SYMBOL TABLE/{for(i in hide) delete hide[i]};\"\\\n\"     /Section length .*#relocs.*(pick any)/{hide[last_section]=1};\"\\\n\"     /^ *Symbol name *: /{split(\\$ 0,sn,\\\":\\\"); si=substr(sn[2],2)};\"\\\n\"     /^ *Type *: code/{print \\\"T\\\",si,substr(si,length(prfx))};\"\\\n\"     /^ *Type *: data/{print \\\"I\\\",si,substr(si,length(prfx))};\"\\\n\"     \\$ 0!~/External *\\|/{next};\"\\\n\"     / 0+ UNDEF /{next}; / UNDEF \\([^|]\\)*()/{next};\"\\\n\"     {if(hide[section]) next};\"\\\n\"     {f=\\\"D\\\"}; \\$ 0~/\\(\\).*\\|/{f=\\\"T\\\"};\"\\\n\"     {split(\\$ 0,a,/\\||\\r/); split(a[2],s)};\"\\\n\"     s[1]~/^[@?]/{print f,s[1],s[1]; next};\"\\\n\"     s[1]~prfx {split(s[1],t,\\\"@\\\"); print f,t[1],substr(t[1],length(prfx))}\"\\\n\"     ' prfx=^$ac_symprfx]\"\n  else\n    lt_cv_sys_global_symbol_pipe=\"sed -n -e 's/^.*[[\t ]]\\($symcode$symcode*\\)[[\t ]][[\t ]]*$ac_symprfx$sympat$opt_cr$/$symxfrm/p'\"\n  fi\n  lt_cv_sys_global_symbol_pipe=\"$lt_cv_sys_global_symbol_pipe | sed '/ __gnu_lto/d'\"\n\n  # Check to see that the pipe works correctly.\n  pipe_works=no\n\n  rm -f conftest*\n  cat > conftest.$ac_ext <<_LT_EOF\n#ifdef __cplusplus\nextern \"C\" {\n#endif\nchar nm_test_var;\nvoid nm_test_func(void);\nvoid nm_test_func(void){}\n#ifdef __cplusplus\n}\n#endif\nint main(){nm_test_var='a';nm_test_func();return(0);}\n_LT_EOF\n\n  if AC_TRY_EVAL(ac_compile); then\n    # Now try to grab the symbols.\n    nlist=conftest.nm\n    if AC_TRY_EVAL(NM conftest.$ac_objext \\| \"$lt_cv_sys_global_symbol_pipe\" \\> $nlist) && test -s \"$nlist\"; then\n      # Try sorting and uniquifying the output.\n      if sort \"$nlist\" | uniq > \"$nlist\"T; then\n\tmv -f \"$nlist\"T \"$nlist\"\n      else\n\trm -f \"$nlist\"T\n      fi\n\n      # Make sure that we snagged all the symbols we need.\n      if $GREP ' nm_test_var$' \"$nlist\" >/dev/null; then\n\tif $GREP ' nm_test_func$' \"$nlist\" >/dev/null; then\n\t  cat <<_LT_EOF > conftest.$ac_ext\n/* Keep this code in sync between libtool.m4, ltmain, lt_system.h, and tests.  */\n#if defined _WIN32 || defined __CYGWIN__ || defined _WIN32_WCE\n/* DATA imports from DLLs on WIN32 can't be const, because runtime\n   relocations are performed -- see ld's documentation on pseudo-relocs.  */\n# define LT@&t@_DLSYM_CONST\n#elif defined __osf__\n/* This system does not cope well with relocations in const data.  */\n# define LT@&t@_DLSYM_CONST\n#else\n# define LT@&t@_DLSYM_CONST const\n#endif\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n_LT_EOF\n\t  # Now generate the symbol file.\n\t  eval \"$lt_cv_sys_global_symbol_to_cdecl\"' < \"$nlist\" | $GREP -v main >> conftest.$ac_ext'\n\n\t  cat <<_LT_EOF >> conftest.$ac_ext\n\n/* The mapping between symbol names and symbols.  */\nLT@&t@_DLSYM_CONST struct {\n  const char *name;\n  void       *address;\n}\nlt__PROGRAM__LTX_preloaded_symbols[[]] =\n{\n  { \"@PROGRAM@\", (void *) 0 },\n_LT_EOF\n\t  $SED \"s/^$symcode$symcode* .* \\(.*\\)$/  {\\\"\\1\\\", (void *) \\&\\1},/\" < \"$nlist\" | $GREP -v main >> conftest.$ac_ext\n\t  cat <<\\_LT_EOF >> conftest.$ac_ext\n  {0, (void *) 0}\n};\n\n/* This works around a problem in FreeBSD linker */\n#ifdef FREEBSD_WORKAROUND\nstatic const void *lt_preloaded_setup() {\n  return lt__PROGRAM__LTX_preloaded_symbols;\n}\n#endif\n\n#ifdef __cplusplus\n}\n#endif\n_LT_EOF\n\t  # Now try linking the two files.\n\t  mv conftest.$ac_objext conftstm.$ac_objext\n\t  lt_globsym_save_LIBS=$LIBS\n\t  lt_globsym_save_CFLAGS=$CFLAGS\n\t  LIBS=conftstm.$ac_objext\n\t  CFLAGS=\"$CFLAGS$_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)\"\n\t  if AC_TRY_EVAL(ac_link) && test -s conftest$ac_exeext; then\n\t    pipe_works=yes\n\t  fi\n\t  LIBS=$lt_globsym_save_LIBS\n\t  CFLAGS=$lt_globsym_save_CFLAGS\n\telse\n\t  echo \"cannot find nm_test_func in $nlist\" >&AS_MESSAGE_LOG_FD\n\tfi\n      else\n\techo \"cannot find nm_test_var in $nlist\" >&AS_MESSAGE_LOG_FD\n      fi\n    else\n      echo \"cannot run $lt_cv_sys_global_symbol_pipe\" >&AS_MESSAGE_LOG_FD\n    fi\n  else\n    echo \"$progname: failed program was:\" >&AS_MESSAGE_LOG_FD\n    cat conftest.$ac_ext >&5\n  fi\n  rm -rf conftest* conftst*\n\n  # Do not use the global_symbol_pipe unless it works.\n  if test yes = \"$pipe_works\"; then\n    break\n  else\n    lt_cv_sys_global_symbol_pipe=\n  fi\ndone\n])\nif test -z \"$lt_cv_sys_global_symbol_pipe\"; then\n  lt_cv_sys_global_symbol_to_cdecl=\nfi\nif test -z \"$lt_cv_sys_global_symbol_pipe$lt_cv_sys_global_symbol_to_cdecl\"; then\n  AC_MSG_RESULT(failed)\nelse\n  AC_MSG_RESULT(ok)\nfi\n\n# Response file support.\nif test \"$lt_cv_nm_interface\" = \"MS dumpbin\"; then\n  nm_file_list_spec='@'\nelif $NM --help 2>/dev/null | grep '[[@]]FILE' >/dev/null; then\n  nm_file_list_spec='@'\nfi\n\n_LT_DECL([global_symbol_pipe], [lt_cv_sys_global_symbol_pipe], [1],\n    [Take the output of nm and produce a listing of raw symbols and C names])\n_LT_DECL([global_symbol_to_cdecl], [lt_cv_sys_global_symbol_to_cdecl], [1],\n    [Transform the output of nm in a proper C declaration])\n_LT_DECL([global_symbol_to_import], [lt_cv_sys_global_symbol_to_import], [1],\n    [Transform the output of nm into a list of symbols to manually relocate])\n_LT_DECL([global_symbol_to_c_name_address],\n    [lt_cv_sys_global_symbol_to_c_name_address], [1],\n    [Transform the output of nm in a C name address pair])\n_LT_DECL([global_symbol_to_c_name_address_lib_prefix],\n    [lt_cv_sys_global_symbol_to_c_name_address_lib_prefix], [1],\n    [Transform the output of nm in a C name address pair when lib prefix is needed])\n_LT_DECL([nm_interface], [lt_cv_nm_interface], [1],\n    [The name lister interface])\n_LT_DECL([], [nm_file_list_spec], [1],\n    [Specify filename containing input files for $NM])\n]) # _LT_CMD_GLOBAL_SYMBOLS\n\n\n# _LT_COMPILER_PIC([TAGNAME])\n# ---------------------------\nm4_defun([_LT_COMPILER_PIC],\n[m4_require([_LT_TAG_COMPILER])dnl\n_LT_TAGVAR(lt_prog_compiler_wl, $1)=\n_LT_TAGVAR(lt_prog_compiler_pic, $1)=\n_LT_TAGVAR(lt_prog_compiler_static, $1)=\n\nm4_if([$1], [CXX], [\n  # C++ specific cases for pic, static, wl, etc.\n  if test yes = \"$GXX\"; then\n    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\n    case $host_os in\n    aix*)\n      # All AIX code is PIC.\n      if test ia64 = \"$host_cpu\"; then\n\t# AIX 5 now supports IA64 processor\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      fi\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n        ;;\n      m68k)\n            # FIXME: we need at least 68020 code to build shared libraries, but\n            # adding the '-m68020' flag to GCC prevents building anything better,\n            # like '-m68040'.\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-m68020 -resident32 -malways-restore-a4'\n        ;;\n      esac\n      ;;\n\n    beos* | irix5* | irix6* | nonstopux* | osf3* | osf4* | osf5*)\n      # PIC is the default for these OSes.\n      ;;\n    mingw* | cygwin* | os2* | pw32* | cegcc*)\n      # This hack is so that the source file can tell whether it is being\n      # built for inclusion in a dll (and should export symbols for example).\n      # Although the cygwin gcc ignores -fPIC, still need this for old-style\n      # (--disable-auto-import) libraries\n      m4_if([$1], [GCJ], [],\n\t[_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n      case $host_os in\n      os2*)\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-static'\n\t;;\n      esac\n      ;;\n    darwin* | rhapsody*)\n      # PIC is the default on this platform\n      # Common symbols not allowed in MH_DYLIB files\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fno-common'\n      ;;\n    *djgpp*)\n      # DJGPP does not support shared libraries at all\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n      ;;\n    haiku*)\n      # PIC is the default for Haiku.\n      # The \"-static\" flag exists, but is broken.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)=\n      ;;\n    interix[[3-9]]*)\n      # Interix 3.x gcc -fpic/-fPIC options generate broken code.\n      # Instead, we relocate shared libraries at runtime.\n      ;;\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)=-Kconform_pic\n      fi\n      ;;\n    hpux*)\n      # PIC is the default for 64-bit PA HP-UX, but not for 32-bit\n      # PA HP-UX.  On IA64 HP-UX, PIC is the default but the pic flag\n      # sets the default TLS model and affects inlining.\n      case $host_cpu in\n      hppa*64*)\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t;;\n      esac\n      ;;\n    *qnx* | *nto*)\n      # QNX uses GNU C++, but need to define -shared option too, otherwise\n      # it will coredump.\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n      ;;\n    *)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n    esac\n  else\n    case $host_os in\n      aix[[4-9]]*)\n\t# All AIX code is PIC.\n\tif test ia64 = \"$host_cpu\"; then\n\t  # AIX 5 now supports IA64 processor\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\telse\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-bnso -bI:/lib/syscalls.exp'\n\tfi\n\t;;\n      chorus*)\n\tcase $cc_basename in\n\tcxch68*)\n\t  # Green Hills C++ Compiler\n\t  # _LT_TAGVAR(lt_prog_compiler_static, $1)=\"--no_auto_instantiation -u __main -u __premain -u _abort -r $COOL_DIR/lib/libOrb.a $MVME_DIR/lib/CC/libC.a $MVME_DIR/lib/classix/libcx.s.a\"\n\t  ;;\n\tesac\n\t;;\n      mingw* | cygwin* | os2* | pw32* | cegcc*)\n\t# This hack is so that the source file can tell whether it is being\n\t# built for inclusion in a dll (and should export symbols for example).\n\tm4_if([$1], [GCJ], [],\n\t  [_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n\t;;\n      dgux*)\n\tcase $cc_basename in\n\t  ec++*)\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    ;;\n\t  ghcx*)\n\t    # Green Hills C++ Compiler\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      freebsd* | dragonfly*)\n\t# FreeBSD uses GNU C++\n\t;;\n      hpux9* | hpux10* | hpux11*)\n\tcase $cc_basename in\n\t  CC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-a ${wl}archive'\n\t    if test ia64 != \"$host_cpu\"; then\n\t      _LT_TAGVAR(lt_prog_compiler_pic, $1)='+Z'\n\t    fi\n\t    ;;\n\t  aCC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-a ${wl}archive'\n\t    case $host_cpu in\n\t    hppa*64*|ia64*)\n\t      # +Z the default\n\t      ;;\n\t    *)\n\t      _LT_TAGVAR(lt_prog_compiler_pic, $1)='+Z'\n\t      ;;\n\t    esac\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      interix*)\n\t# This is c89, which is MS Visual C++ (no shared libs)\n\t# Anyone wants to do a port?\n\t;;\n      irix5* | irix6* | nonstopux*)\n\tcase $cc_basename in\n\t  CC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n\t    # CC pic flag -KPIC is the default.\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      linux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n\tcase $cc_basename in\n\t  KCC*)\n\t    # KAI C++ Compiler\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='--backend -Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t    ;;\n\t  ecpc* )\n\t    # old Intel C++ for x86_64, which still supported -KPIC.\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t    ;;\n\t  icpc* )\n\t    # Intel C++, used to be incompatible with GCC.\n\t    # ICC 10 doesn't accept -KPIC any more.\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t    ;;\n\t  pgCC* | pgcpp*)\n\t    # Portland Group C++ compiler\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fpic'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    ;;\n\t  cxx*)\n\t    # Compaq C++\n\t    # Make sure the PIC flag is empty.  It appears that all Alpha\n\t    # Linux and Compaq Tru64 Unix objects are PIC.\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n\t    ;;\n\t  xlc* | xlC* | bgxl[[cC]]* | mpixl[[cC]]*)\n\t    # IBM XL 8.0, 9.0 on PPC and BlueGene\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-qpic'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-qstaticlink'\n\t    ;;\n\t  *)\n\t    case `$CC -V 2>&1 | sed 5q` in\n\t    *Sun\\ C*)\n\t      # Sun C++ 5.9\n\t      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n\t      ;;\n\t    esac\n\t    ;;\n\tesac\n\t;;\n      lynxos*)\n\t;;\n      m88k*)\n\t;;\n      mvs*)\n\tcase $cc_basename in\n\t  cxx*)\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-W c,exportall'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      netbsd*)\n\t;;\n      *qnx* | *nto*)\n        # QNX uses GNU C++, but need to define -shared option too, otherwise\n        # it will coredump.\n        _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n        ;;\n      osf3* | osf4* | osf5*)\n\tcase $cc_basename in\n\t  KCC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='--backend -Wl,'\n\t    ;;\n\t  RCC*)\n\t    # Rational C++ 2.4.1\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    ;;\n\t  cxx*)\n\t    # Digital/Compaq C++\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    # Make sure the PIC flag is empty.  It appears that all Alpha\n\t    # Linux and Compaq Tru64 Unix objects are PIC.\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      psos*)\n\t;;\n      solaris*)\n\tcase $cc_basename in\n\t  CC* | sunCC*)\n\t    # Sun C++ 4.2, 5.x and Centerline C++\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n\t    ;;\n\t  gcx*)\n\t    # Green Hills C++ Compiler\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      sunos4*)\n\tcase $cc_basename in\n\t  CC*)\n\t    # Sun C++ 4.x\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    ;;\n\t  lcc*)\n\t    # Lucid\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      sysv5* | unixware* | sco3.2v5* | sco5v6* | OpenUNIX*)\n\tcase $cc_basename in\n\t  CC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    ;;\n\tesac\n\t;;\n      tandem*)\n\tcase $cc_basename in\n\t  NCC*)\n\t    # NonStop-UX NCC 3.20\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      vxworks*)\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n\t;;\n    esac\n  fi\n],\n[\n  if test yes = \"$GCC\"; then\n    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\n    case $host_os in\n      aix*)\n      # All AIX code is PIC.\n      if test ia64 = \"$host_cpu\"; then\n\t# AIX 5 now supports IA64 processor\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      fi\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n        ;;\n      m68k)\n            # FIXME: we need at least 68020 code to build shared libraries, but\n            # adding the '-m68020' flag to GCC prevents building anything better,\n            # like '-m68040'.\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-m68020 -resident32 -malways-restore-a4'\n        ;;\n      esac\n      ;;\n\n    beos* | irix5* | irix6* | nonstopux* | osf3* | osf4* | osf5*)\n      # PIC is the default for these OSes.\n      ;;\n\n    mingw* | cygwin* | pw32* | os2* | cegcc*)\n      # This hack is so that the source file can tell whether it is being\n      # built for inclusion in a dll (and should export symbols for example).\n      # Although the cygwin gcc ignores -fPIC, still need this for old-style\n      # (--disable-auto-import) libraries\n      m4_if([$1], [GCJ], [],\n\t[_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n      case $host_os in\n      os2*)\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-static'\n\t;;\n      esac\n      ;;\n\n    darwin* | rhapsody*)\n      # PIC is the default on this platform\n      # Common symbols not allowed in MH_DYLIB files\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fno-common'\n      ;;\n\n    haiku*)\n      # PIC is the default for Haiku.\n      # The \"-static\" flag exists, but is broken.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)=\n      ;;\n\n    hpux*)\n      # PIC is the default for 64-bit PA HP-UX, but not for 32-bit\n      # PA HP-UX.  On IA64 HP-UX, PIC is the default but the pic flag\n      # sets the default TLS model and affects inlining.\n      case $host_cpu in\n      hppa*64*)\n\t# +Z the default\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t;;\n      esac\n      ;;\n\n    interix[[3-9]]*)\n      # Interix 3.x gcc -fpic/-fPIC options generate broken code.\n      # Instead, we relocate shared libraries at runtime.\n      ;;\n\n    msdosdjgpp*)\n      # Just because we use GCC doesn't mean we suddenly get shared libraries\n      # on systems that don't support them.\n      _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n      enable_shared=no\n      ;;\n\n    *nto* | *qnx*)\n      # QNX uses GNU C++, but need to define -shared option too, otherwise\n      # it will coredump.\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n      ;;\n\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)=-Kconform_pic\n      fi\n      ;;\n\n    *)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n    esac\n\n    case $cc_basename in\n    nvcc*) # Cuda Compiler Driver 2.2\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Xlinker '\n      if test -n \"$_LT_TAGVAR(lt_prog_compiler_pic, $1)\"; then\n        _LT_TAGVAR(lt_prog_compiler_pic, $1)=\"-Xcompiler $_LT_TAGVAR(lt_prog_compiler_pic, $1)\"\n      fi\n      ;;\n    esac\n  else\n    # PORTME Check for flag to pass linker flags through the system compiler.\n    case $host_os in\n    aix*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      if test ia64 = \"$host_cpu\"; then\n\t# AIX 5 now supports IA64 processor\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      else\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-bnso -bI:/lib/syscalls.exp'\n      fi\n      ;;\n\n    darwin* | rhapsody*)\n      # PIC is the default on this platform\n      # Common symbols not allowed in MH_DYLIB files\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fno-common'\n      case $cc_basename in\n      nagfor*)\n        # NAG Fortran compiler\n        _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,-Wl,,'\n        _LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n        _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n        ;;\n      esac\n      ;;\n\n    mingw* | cygwin* | pw32* | os2* | cegcc*)\n      # This hack is so that the source file can tell whether it is being\n      # built for inclusion in a dll (and should export symbols for example).\n      m4_if([$1], [GCJ], [],\n\t[_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n      case $host_os in\n      os2*)\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-static'\n\t;;\n      esac\n      ;;\n\n    hpux9* | hpux10* | hpux11*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      # PIC is the default for IA64 HP-UX and 64-bit HP-UX, but\n      # not for PA HP-UX.\n      case $host_cpu in\n      hppa*64*|ia64*)\n\t# +Z the default\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='+Z'\n\t;;\n      esac\n      # Is there a better lt_prog_compiler_static that works with the bundled CC?\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-a ${wl}archive'\n      ;;\n\n    irix5* | irix6* | nonstopux*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      # PIC (with -KPIC) is the default.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n      ;;\n\n    linux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n      case $cc_basename in\n      # old Intel for x86_64, which still supported -KPIC.\n      ecc*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n        ;;\n      # icc used to be incompatible with GCC.\n      # ICC 10 doesn't accept -KPIC any more.\n      icc* | ifort*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n        ;;\n      # Lahey Fortran 8.1.\n      lf95*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='--shared'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='--static'\n\t;;\n      nagfor*)\n\t# NAG Fortran compiler\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,-Wl,,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t;;\n      tcc*)\n\t# Fabrice Bellard et al's Tiny C Compiler\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t;;\n      pgcc* | pgf77* | pgf90* | pgf95* | pgfortran*)\n        # Portland Group compilers (*not* the Pentium gcc compiler,\n\t# which looks to be a dead project)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fpic'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n        ;;\n      ccc*)\n        _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n        # All Alpha code is PIC.\n        _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n        ;;\n      xl* | bgxl* | bgf* | mpixl*)\n\t# IBM XL C 8.0/Fortran 10.1, 11.1 on PPC and BlueGene\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-qpic'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-qstaticlink'\n\t;;\n      *)\n\tcase `$CC -V 2>&1 | sed 5q` in\n\t*Sun\\ Ceres\\ Fortran* | *Sun*Fortran*\\ [[1-7]].* | *Sun*Fortran*\\ 8.[[0-3]]*)\n\t  # Sun Fortran 8.3 passes all unrecognized flags to the linker\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)=''\n\t  ;;\n\t*Sun\\ F* | *Sun*Fortran*)\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n\t  ;;\n\t*Sun\\ C*)\n\t  # Sun C 5.9\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t  ;;\n        *Intel*\\ [[CF]]*Compiler*)\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t  ;;\n\t*Portland\\ Group*)\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fpic'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  ;;\n\tesac\n\t;;\n      esac\n      ;;\n\n    newsos6)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    *nto* | *qnx*)\n      # QNX uses GNU C++, but need to define -shared option too, otherwise\n      # it will coredump.\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n      ;;\n\n    osf3* | osf4* | osf5*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      # All OSF/1 code is PIC.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n      ;;\n\n    rdos*)\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n      ;;\n\n    solaris*)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      case $cc_basename in\n      f77* | f90* | f95* | sunf77* | sunf90* | sunf95*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld ';;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,';;\n      esac\n      ;;\n\n    sunos4*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    sysv4 | sysv4.2uw2* | sysv4.3*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-Kconform_pic'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      fi\n      ;;\n\n    sysv5* | unixware* | sco3.2v5* | sco5v6* | OpenUNIX*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    unicos*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n      ;;\n\n    uts4*)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    *)\n      _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n      ;;\n    esac\n  fi\n])\ncase $host_os in\n  # For platforms that do not support PIC, -DPIC is meaningless:\n  *djgpp*)\n    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n    ;;\n  *)\n    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\"$_LT_TAGVAR(lt_prog_compiler_pic, $1)@&t@m4_if([$1],[],[ -DPIC],[m4_if([$1],[CXX],[ -DPIC],[])])\"\n    ;;\nesac\n\nAC_CACHE_CHECK([for $compiler option to produce PIC],\n  [_LT_TAGVAR(lt_cv_prog_compiler_pic, $1)],\n  [_LT_TAGVAR(lt_cv_prog_compiler_pic, $1)=$_LT_TAGVAR(lt_prog_compiler_pic, $1)])\n_LT_TAGVAR(lt_prog_compiler_pic, $1)=$_LT_TAGVAR(lt_cv_prog_compiler_pic, $1)\n\n#\n# Check to make sure the PIC flag actually works.\n#\nif test -n \"$_LT_TAGVAR(lt_prog_compiler_pic, $1)\"; then\n  _LT_COMPILER_OPTION([if $compiler PIC flag $_LT_TAGVAR(lt_prog_compiler_pic, $1) works],\n    [_LT_TAGVAR(lt_cv_prog_compiler_pic_works, $1)],\n    [$_LT_TAGVAR(lt_prog_compiler_pic, $1)@&t@m4_if([$1],[],[ -DPIC],[m4_if([$1],[CXX],[ -DPIC],[])])], [],\n    [case $_LT_TAGVAR(lt_prog_compiler_pic, $1) in\n     \"\" | \" \"*) ;;\n     *) _LT_TAGVAR(lt_prog_compiler_pic, $1)=\" $_LT_TAGVAR(lt_prog_compiler_pic, $1)\" ;;\n     esac],\n    [_LT_TAGVAR(lt_prog_compiler_pic, $1)=\n     _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no])\nfi\n_LT_TAGDECL([pic_flag], [lt_prog_compiler_pic], [1],\n\t[Additional compiler flags for building library objects])\n\n_LT_TAGDECL([wl], [lt_prog_compiler_wl], [1],\n\t[How to pass a linker flag through the compiler])\n#\n# Check to make sure the static flag actually works.\n#\nwl=$_LT_TAGVAR(lt_prog_compiler_wl, $1) eval lt_tmp_static_flag=\\\"$_LT_TAGVAR(lt_prog_compiler_static, $1)\\\"\n_LT_LINKER_OPTION([if $compiler static flag $lt_tmp_static_flag works],\n  _LT_TAGVAR(lt_cv_prog_compiler_static_works, $1),\n  $lt_tmp_static_flag,\n  [],\n  [_LT_TAGVAR(lt_prog_compiler_static, $1)=])\n_LT_TAGDECL([link_static_flag], [lt_prog_compiler_static], [1],\n\t[Compiler flag to prevent dynamic linking])\n])# _LT_COMPILER_PIC\n\n\n# _LT_LINKER_SHLIBS([TAGNAME])\n# ----------------------------\n# See if the linker supports building shared libraries.\nm4_defun([_LT_LINKER_SHLIBS],\n[AC_REQUIRE([LT_PATH_LD])dnl\nAC_REQUIRE([LT_PATH_NM])dnl\nm4_require([_LT_PATH_MANIFEST_TOOL])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_CMD_GLOBAL_SYMBOLS])dnl\nm4_require([_LT_TAG_COMPILER])dnl\nAC_MSG_CHECKING([whether the $compiler linker ($LD) supports shared libraries])\nm4_if([$1], [CXX], [\n  _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\\''s/.* //'\\'' | sort | uniq > $export_symbols'\n  _LT_TAGVAR(exclude_expsyms, $1)=['_GLOBAL_OFFSET_TABLE_|_GLOBAL__F[ID]_.*']\n  case $host_os in\n  aix[[4-9]]*)\n    # If we're using GNU nm, then we don't want the \"-C\" option.\n    # -C means demangle to GNU nm, but means don't demangle to AIX nm.\n    # Without the \"-l\" option, or with the \"-B\" option, AIX nm treats\n    # weak defined symbols like other global defined symbols, whereas\n    # GNU nm marks them as \"W\".\n    # While the 'weak' keyword is ignored in the Export File, we need\n    # it in the Import File for the 'aix-soname' feature, so we have\n    # to replace the \"-B\" option with \"-P\" for AIX nm.\n    if $NM -V 2>&1 | $GREP 'GNU' > /dev/null; then\n      _LT_TAGVAR(export_symbols_cmds, $1)='$NM -Bpg $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\") || (\\$ 2 == \"W\")) && ([substr](\\$ 3,1,1) != \".\")) { if (\\$ 2 == \"W\") { print \\$ 3 \" weak\" } else { print \\$ 3 } } }'\\'' | sort -u > $export_symbols'\n    else\n      _LT_TAGVAR(export_symbols_cmds, $1)='`func_echo_all $NM | $SED -e '\\''s/B\\([[^B]]*\\)$/P\\1/'\\''` -PCpgl $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\") || (\\$ 2 == \"W\") || (\\$ 2 == \"V\") || (\\$ 2 == \"Z\")) && ([substr](\\$ 1,1,1) != \".\")) { if ((\\$ 2 == \"W\") || (\\$ 2 == \"V\") || (\\$ 2 == \"Z\")) { print \\$ 1 \" weak\" } else { print \\$ 1 } } }'\\'' | sort -u > $export_symbols'\n    fi\n    ;;\n  pw32*)\n    _LT_TAGVAR(export_symbols_cmds, $1)=$ltdll_cmds\n    ;;\n  cygwin* | mingw* | cegcc*)\n    case $cc_basename in\n    cl*)\n      _LT_TAGVAR(exclude_expsyms, $1)='_NULL_IMPORT_DESCRIPTOR|_IMPORT_DESCRIPTOR_.*'\n      ;;\n    *)\n      _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED -e '\\''/^[[BCDGRS]][[ ]]/s/.*[[ ]]\\([[^ ]]*\\)/\\1 DATA/;s/^.*[[ ]]__nm__\\([[^ ]]*\\)[[ ]][[^ ]]*/\\1 DATA/;/^I[[ ]]/d;/^[[AITW]][[ ]]/s/.* //'\\'' | sort | uniq > $export_symbols'\n      _LT_TAGVAR(exclude_expsyms, $1)=['[_]+GLOBAL_OFFSET_TABLE_|[_]+GLOBAL__[FID]_.*|[_]+head_[A-Za-z0-9_]+_dll|[A-Za-z0-9_]+_dll_iname']\n      ;;\n    esac\n    ;;\n  *)\n    _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\\''s/.* //'\\'' | sort | uniq > $export_symbols'\n    ;;\n  esac\n], [\n  runpath_var=\n  _LT_TAGVAR(allow_undefined_flag, $1)=\n  _LT_TAGVAR(always_export_symbols, $1)=no\n  _LT_TAGVAR(archive_cmds, $1)=\n  _LT_TAGVAR(archive_expsym_cmds, $1)=\n  _LT_TAGVAR(compiler_needs_object, $1)=no\n  _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n  _LT_TAGVAR(export_dynamic_flag_spec, $1)=\n  _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\\''s/.* //'\\'' | sort | uniq > $export_symbols'\n  _LT_TAGVAR(hardcode_automatic, $1)=no\n  _LT_TAGVAR(hardcode_direct, $1)=no\n  _LT_TAGVAR(hardcode_direct_absolute, $1)=no\n  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n  _LT_TAGVAR(hardcode_libdir_separator, $1)=\n  _LT_TAGVAR(hardcode_minus_L, $1)=no\n  _LT_TAGVAR(hardcode_shlibpath_var, $1)=unsupported\n  _LT_TAGVAR(inherit_rpath, $1)=no\n  _LT_TAGVAR(link_all_deplibs, $1)=unknown\n  _LT_TAGVAR(module_cmds, $1)=\n  _LT_TAGVAR(module_expsym_cmds, $1)=\n  _LT_TAGVAR(old_archive_from_new_cmds, $1)=\n  _LT_TAGVAR(old_archive_from_expsyms_cmds, $1)=\n  _LT_TAGVAR(thread_safe_flag_spec, $1)=\n  _LT_TAGVAR(whole_archive_flag_spec, $1)=\n  # include_expsyms should be a list of space-separated symbols to be *always*\n  # included in the symbol list\n  _LT_TAGVAR(include_expsyms, $1)=\n  # exclude_expsyms can be an extended regexp of symbols to exclude\n  # it will be wrapped by ' (' and ')$', so one must not match beginning or\n  # end of line.  Example: 'a|bc|.*d.*' will exclude the symbols 'a' and 'bc',\n  # as well as any symbol that contains 'd'.\n  _LT_TAGVAR(exclude_expsyms, $1)=['_GLOBAL_OFFSET_TABLE_|_GLOBAL__F[ID]_.*']\n  # Although _GLOBAL_OFFSET_TABLE_ is a valid symbol C name, most a.out\n  # platforms (ab)use it in PIC code, but their linkers get confused if\n  # the symbol is explicitly referenced.  Since portable code cannot\n  # rely on this symbol name, it's probably fine to never include it in\n  # preloaded symbol tables.\n  # Exclude shared library initialization/finalization symbols.\ndnl Note also adjust exclude_expsyms for C++ above.\n  extract_expsyms_cmds=\n\n  case $host_os in\n  cygwin* | mingw* | pw32* | cegcc*)\n    # FIXME: the MSVC++ port hasn't been tested in a loooong time\n    # When not using gcc, we currently assume that we are using\n    # Microsoft Visual C++.\n    if test yes != \"$GCC\"; then\n      with_gnu_ld=no\n    fi\n    ;;\n  interix*)\n    # we just hope/assume this is gcc and not c89 (= MSVC++)\n    with_gnu_ld=yes\n    ;;\n  openbsd* | bitrig*)\n    with_gnu_ld=no\n    ;;\n  esac\n\n  _LT_TAGVAR(ld_shlibs, $1)=yes\n\n  # On some targets, GNU ld is compatible enough with the native linker\n  # that we're better off using the native interface for both.\n  lt_use_gnu_ld_interface=no\n  if test yes = \"$with_gnu_ld\"; then\n    case $host_os in\n      aix*)\n\t# The AIX port of GNU ld has always aspired to compatibility\n\t# with the native linker.  However, as the warning in the GNU ld\n\t# block says, versions before 2.19.5* couldn't really create working\n\t# shared libraries, regardless of the interface used.\n\tcase `$LD -v 2>&1` in\n\t  *\\ \\(GNU\\ Binutils\\)\\ 2.19.5*) ;;\n\t  *\\ \\(GNU\\ Binutils\\)\\ 2.[[2-9]]*) ;;\n\t  *\\ \\(GNU\\ Binutils\\)\\ [[3-9]]*) ;;\n\t  *)\n\t    lt_use_gnu_ld_interface=yes\n\t    ;;\n\tesac\n\t;;\n      *)\n\tlt_use_gnu_ld_interface=yes\n\t;;\n    esac\n  fi\n\n  if test yes = \"$lt_use_gnu_ld_interface\"; then\n    # If archive_cmds runs LD, not CC, wlarc should be empty\n    wlarc='$wl'\n\n    # Set some defaults for GNU ld with shared library support. These\n    # are reset later if shared libraries are not supported. Putting them\n    # here allows them to be overridden if necessary.\n    runpath_var=LD_RUN_PATH\n    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n    # ancient GNU ld didn't support --whole-archive et. al.\n    if $LD --help 2>&1 | $GREP 'no-whole-archive' > /dev/null; then\n      _LT_TAGVAR(whole_archive_flag_spec, $1)=$wlarc'--whole-archive$convenience '$wlarc'--no-whole-archive'\n    else\n      _LT_TAGVAR(whole_archive_flag_spec, $1)=\n    fi\n    supports_anon_versioning=no\n    case `$LD -v | $SED -e 's/([^)]\\+)\\s\\+//' 2>&1` in\n      *GNU\\ gold*) supports_anon_versioning=yes ;;\n      *\\ [[01]].* | *\\ 2.[[0-9]].* | *\\ 2.10.*) ;; # catch versions < 2.11\n      *\\ 2.11.93.0.2\\ *) supports_anon_versioning=yes ;; # RH7.3 ...\n      *\\ 2.11.92.0.12\\ *) supports_anon_versioning=yes ;; # Mandrake 8.2 ...\n      *\\ 2.11.*) ;; # other 2.11 versions\n      *) supports_anon_versioning=yes ;;\n    esac\n\n    # See if GNU ld supports shared libraries.\n    case $host_os in\n    aix[[3-9]]*)\n      # On AIX/PPC, the GNU linker is very broken\n      if test ia64 != \"$host_cpu\"; then\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\tcat <<_LT_EOF 1>&2\n\n*** Warning: the GNU linker, at least up to release 2.19, is reported\n*** to be unable to reliably create shared libraries on AIX.\n*** Therefore, libtool is disabling shared libraries support.  If you\n*** really care for shared libraries, you may want to install binutils\n*** 2.20 or above, or modify your PATH so that a non-GNU linker is found.\n*** You will then need to restart the configuration process.\n\n_LT_EOF\n      fi\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n            _LT_TAGVAR(archive_expsym_cmds, $1)=''\n        ;;\n      m68k)\n            _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/a2ixlibrary.data~$ECHO \"#define NAME $libname\" > $output_objdir/a2ixlibrary.data~$ECHO \"#define LIBRARY_ID 1\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define VERSION $major\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define REVISION $revision\" >> $output_objdir/a2ixlibrary.data~$AR $AR_FLAGS $lib $libobjs~$RANLIB $lib~(cd $output_objdir && a2ixlibrary -32)'\n            _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n            _LT_TAGVAR(hardcode_minus_L, $1)=yes\n        ;;\n      esac\n      ;;\n\n    beos*)\n      if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t_LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t# Joseph Beckenbach <jrb3@best.com> says some releases of gcc\n\t# support --undefined.  This deserves some investigation.  FIXME\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -nostart $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    cygwin* | mingw* | pw32* | cegcc*)\n      # _LT_TAGVAR(hardcode_libdir_flag_spec, $1) is actually meaningless,\n      # as there is no search path for DLLs.\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-all-symbols'\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      _LT_TAGVAR(always_export_symbols, $1)=no\n      _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n      _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED -e '\\''/^[[BCDGRS]][[ ]]/s/.*[[ ]]\\([[^ ]]*\\)/\\1 DATA/;s/^.*[[ ]]__nm__\\([[^ ]]*\\)[[ ]][[^ ]]*/\\1 DATA/;/^I[[ ]]/d;/^[[AITW]][[ ]]/s/.* //'\\'' | sort | uniq > $export_symbols'\n      _LT_TAGVAR(exclude_expsyms, $1)=['[_]+GLOBAL_OFFSET_TABLE_|[_]+GLOBAL__[FID]_.*|[_]+head_[A-Za-z0-9_]+_dll|[A-Za-z0-9_]+_dll_iname']\n\n      if $LD --help 2>&1 | $GREP 'auto-import' > /dev/null; then\n        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags -o $output_objdir/$soname $wl--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n\t# If the export-symbols file already is a .def file, use it as\n\t# is; otherwise, prepend EXPORTS...\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='if _LT_DLL_DEF_P([$export_symbols]); then\n          cp $export_symbols $output_objdir/$soname.def;\n        else\n          echo EXPORTS > $output_objdir/$soname.def;\n          cat $export_symbols >> $output_objdir/$soname.def;\n        fi~\n        $CC -shared $output_objdir/$soname.def $libobjs $deplibs $compiler_flags -o $output_objdir/$soname $wl--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    haiku*)\n      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      ;;\n\n    os2*)\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      shrext_cmds=.dll\n      _LT_TAGVAR(archive_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t$ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t$ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t$ECHO EXPORTS >> $output_objdir/$libname.def~\n\temxexp $libobjs | $SED /\"_DLL_InitTerm\"/d >> $output_objdir/$libname.def~\n\t$CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\temximp -o $lib $output_objdir/$libname.def'\n      _LT_TAGVAR(archive_expsym_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t$ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t$ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t$ECHO EXPORTS >> $output_objdir/$libname.def~\n\tprefix_cmds=\"$SED\"~\n\tif test EXPORTS = \"`$SED 1q $export_symbols`\"; then\n\t  prefix_cmds=\"$prefix_cmds -e 1d\";\n\tfi~\n\tprefix_cmds=\"$prefix_cmds -e \\\"s/^\\(.*\\)$/_\\1/g\\\"\"~\n\tcat $export_symbols | $prefix_cmds >> $output_objdir/$libname.def~\n\t$CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\temximp -o $lib $output_objdir/$libname.def'\n      _LT_TAGVAR(old_archive_From_new_cmds, $1)='emximp -o $output_objdir/${libname}_dll.a $output_objdir/$libname.def'\n      _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n      ;;\n\n    interix[[3-9]]*)\n      _LT_TAGVAR(hardcode_direct, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n      # Hack: On Interix 3.x, we cannot compile PIC because of a broken gcc.\n      # Instead, shared libraries are loaded at an image base (0x10000000 by\n      # default) and relocated if they conflict, which is a slow very memory\n      # consuming and fragmenting process.  To avoid this, we pick a random,\n      # 256 KiB-aligned image base between 0x50000000 and 0x6FFC0000 at link\n      # time.  Moving up from 0x10000000 also allows more sbrk(2) space.\n      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-h,$soname $wl--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n      _LT_TAGVAR(archive_expsym_cmds, $1)='sed \"s|^|_|\" $export_symbols >$output_objdir/$soname.expsym~$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-h,$soname $wl--retain-symbols-file,$output_objdir/$soname.expsym $wl--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n      ;;\n\n    gnu* | linux* | tpf* | k*bsd*-gnu | kopensolaris*-gnu)\n      tmp_diet=no\n      if test linux-dietlibc = \"$host_os\"; then\n\tcase $cc_basename in\n\t  diet\\ *) tmp_diet=yes;;\t# linux-dietlibc with static linking (!diet-dyn)\n\tesac\n      fi\n      if $LD --help 2>&1 | $EGREP ': supported targets:.* elf' > /dev/null \\\n\t && test no = \"$tmp_diet\"\n      then\n\ttmp_addflag=' $pic_flag'\n\ttmp_sharedflag='-shared'\n\tcase $cc_basename,$host_cpu in\n        pgcc*)\t\t\t\t# Portland Group C compiler\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t  tmp_addflag=' $pic_flag'\n\t  ;;\n\tpgf77* | pgf90* | pgf95* | pgfortran*)\n\t\t\t\t\t# Portland Group f77 and f90 compilers\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t  tmp_addflag=' $pic_flag -Mnomain' ;;\n\tecc*,ia64* | icc*,ia64*)\t# Intel C compiler on ia64\n\t  tmp_addflag=' -i_dynamic' ;;\n\tefc*,ia64* | ifort*,ia64*)\t# Intel Fortran compiler on ia64\n\t  tmp_addflag=' -i_dynamic -nofor_main' ;;\n\tifc* | ifort*)\t\t\t# Intel Fortran compiler\n\t  tmp_addflag=' -nofor_main' ;;\n\tlf95*)\t\t\t\t# Lahey Fortran 8.1\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)=\n\t  tmp_sharedflag='--shared' ;;\n        nagfor*)                        # NAGFOR 5.3\n          tmp_sharedflag='-Wl,-shared' ;;\n\txl[[cC]]* | bgxl[[cC]]* | mpixl[[cC]]*) # IBM XL C 8.0 on PPC (deal with xlf below)\n\t  tmp_sharedflag='-qmkshrobj'\n\t  tmp_addflag= ;;\n\tnvcc*)\t# Cuda Compiler Driver 2.2\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t  _LT_TAGVAR(compiler_needs_object, $1)=yes\n\t  ;;\n\tesac\n\tcase `$CC -V 2>&1 | sed 5q` in\n\t*Sun\\ C*)\t\t\t# Sun C 5.9\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`new_convenience=; for conv in $convenience\\\"\\\"; do test -z \\\"$conv\\\" || new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t  _LT_TAGVAR(compiler_needs_object, $1)=yes\n\t  tmp_sharedflag='-G' ;;\n\t*Sun\\ F*)\t\t\t# Sun Fortran 8.3\n\t  tmp_sharedflag='-G' ;;\n\tesac\n\t_LT_TAGVAR(archive_cmds, $1)='$CC '\"$tmp_sharedflag\"\"$tmp_addflag\"' $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\n        if test yes = \"$supports_anon_versioning\"; then\n          _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $output_objdir/$libname.ver~\n            cat $export_symbols | sed -e \"s/\\(.*\\)/\\1;/\" >> $output_objdir/$libname.ver~\n            echo \"local: *; };\" >> $output_objdir/$libname.ver~\n            $CC '\"$tmp_sharedflag\"\"$tmp_addflag\"' $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-version-script $wl$output_objdir/$libname.ver -o $lib'\n        fi\n\n\tcase $cc_basename in\n\ttcc*)\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='-rdynamic'\n\t  ;;\n\txlf* | bgf* | bgxlf* | mpixlf*)\n\t  # IBM XL Fortran 10.1 on PPC cannot create shared libs itself\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='--whole-archive$convenience --no-whole-archive'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -shared $libobjs $deplibs $linker_flags -soname $soname -o $lib'\n\t  if test yes = \"$supports_anon_versioning\"; then\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $output_objdir/$libname.ver~\n              cat $export_symbols | sed -e \"s/\\(.*\\)/\\1;/\" >> $output_objdir/$libname.ver~\n              echo \"local: *; };\" >> $output_objdir/$libname.ver~\n              $LD -shared $libobjs $deplibs $linker_flags -soname $soname -version-script $output_objdir/$libname.ver -o $lib'\n\t  fi\n\t  ;;\n\tesac\n      else\n        _LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    netbsd*)\n      if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable $libobjs $deplibs $linker_flags -o $lib'\n\twlarc=\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n      fi\n      ;;\n\n    solaris*)\n      if $LD -v 2>&1 | $GREP 'BFD 2\\.8' > /dev/null; then\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\tcat <<_LT_EOF 1>&2\n\n*** Warning: The releases 2.8.* of the GNU linker cannot reliably\n*** create shared libraries on Solaris systems.  Therefore, libtool\n*** is disabling shared libraries support.  We urge you to upgrade GNU\n*** binutils to release 2.9.1 or newer.  Another option is to modify\n*** your PATH or compiler configuration so that the native linker is\n*** used, and then restart.\n\n_LT_EOF\n      elif $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    sysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX*)\n      case `$LD -v 2>&1` in\n        *\\ [[01]].* | *\\ 2.[[0-9]].* | *\\ 2.1[[0-5]].*)\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\tcat <<_LT_EOF 1>&2\n\n*** Warning: Releases of the GNU linker prior to 2.16.91.0.3 cannot\n*** reliably create shared libraries on SCO systems.  Therefore, libtool\n*** is disabling shared libraries support.  We urge you to upgrade GNU\n*** binutils to release 2.16.91.0.3 or newer.  Another option is to modify\n*** your PATH or compiler configuration so that the native linker is\n*** used, and then restart.\n\n_LT_EOF\n\t;;\n\t*)\n\t  # For security reasons, it is highly recommended that you always\n\t  # use absolute paths for naming shared libraries, and exclude the\n\t  # DT_RUNPATH tag from executables and libraries.  But doing so\n\t  # requires that you compile everything twice, which is a pain.\n\t  if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\t  else\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t  fi\n\t;;\n      esac\n      ;;\n\n    sunos4*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -assert pure-text -Bshareable -o $lib $libobjs $deplibs $linker_flags'\n      wlarc=\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    *)\n      if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n    esac\n\n    if test no = \"$_LT_TAGVAR(ld_shlibs, $1)\"; then\n      runpath_var=\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)=\n      _LT_TAGVAR(whole_archive_flag_spec, $1)=\n    fi\n  else\n    # PORTME fill in a description of your system's linker (not GNU ld)\n    case $host_os in\n    aix3*)\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      _LT_TAGVAR(always_export_symbols, $1)=yes\n      _LT_TAGVAR(archive_expsym_cmds, $1)='$LD -o $output_objdir/$soname $libobjs $deplibs $linker_flags -bE:$export_symbols -T512 -H512 -bM:SRE~$AR $AR_FLAGS $lib $output_objdir/$soname'\n      # Note: this linker hardcodes the directories in LIBPATH if there\n      # are no directories specified by -L.\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      if test yes = \"$GCC\" && test -z \"$lt_prog_compiler_static\"; then\n\t# Neither direct hardcoding nor static linking is supported with a\n\t# broken collect2.\n\t_LT_TAGVAR(hardcode_direct, $1)=unsupported\n      fi\n      ;;\n\n    aix[[4-9]]*)\n      if test ia64 = \"$host_cpu\"; then\n\t# On IA64, the linker does run time linking by default, so we don't\n\t# have to do anything special.\n\taix_use_runtimelinking=no\n\texp_sym_flag='-Bexport'\n\tno_entry_flag=\n      else\n\t# If we're using GNU nm, then we don't want the \"-C\" option.\n\t# -C means demangle to GNU nm, but means don't demangle to AIX nm.\n\t# Without the \"-l\" option, or with the \"-B\" option, AIX nm treats\n\t# weak defined symbols like other global defined symbols, whereas\n\t# GNU nm marks them as \"W\".\n\t# While the 'weak' keyword is ignored in the Export File, we need\n\t# it in the Import File for the 'aix-soname' feature, so we have\n\t# to replace the \"-B\" option with \"-P\" for AIX nm.\n\tif $NM -V 2>&1 | $GREP 'GNU' > /dev/null; then\n\t  _LT_TAGVAR(export_symbols_cmds, $1)='$NM -Bpg $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\") || (\\$ 2 == \"W\")) && ([substr](\\$ 3,1,1) != \".\")) { if (\\$ 2 == \"W\") { print \\$ 3 \" weak\" } else { print \\$ 3 } } }'\\'' | sort -u > $export_symbols'\n\telse\n\t  _LT_TAGVAR(export_symbols_cmds, $1)='`func_echo_all $NM | $SED -e '\\''s/B\\([[^B]]*\\)$/P\\1/'\\''` -PCpgl $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\") || (\\$ 2 == \"W\") || (\\$ 2 == \"V\") || (\\$ 2 == \"Z\")) && ([substr](\\$ 1,1,1) != \".\")) { if ((\\$ 2 == \"W\") || (\\$ 2 == \"V\") || (\\$ 2 == \"Z\")) { print \\$ 1 \" weak\" } else { print \\$ 1 } } }'\\'' | sort -u > $export_symbols'\n\tfi\n\taix_use_runtimelinking=no\n\n\t# Test if we are trying to use run time linking or normal\n\t# AIX style linking. If -brtl is somewhere in LDFLAGS, we\n\t# have runtime linking enabled, and use it for executables.\n\t# For shared libraries, we enable/disable runtime linking\n\t# depending on the kind of the shared library created -\n\t# when \"with_aix_soname,aix_use_runtimelinking\" is:\n\t# \"aix,no\"   lib.a(lib.so.V) shared, rtl:no,  for executables\n\t# \"aix,yes\"  lib.so          shared, rtl:yes, for executables\n\t#            lib.a           static archive\n\t# \"both,no\"  lib.so.V(shr.o) shared, rtl:yes\n\t#            lib.a(lib.so.V) shared, rtl:no,  for executables\n\t# \"both,yes\" lib.so.V(shr.o) shared, rtl:yes, for executables\n\t#            lib.a(lib.so.V) shared, rtl:no\n\t# \"svr4,*\"   lib.so.V(shr.o) shared, rtl:yes, for executables\n\t#            lib.a           static archive\n\tcase $host_os in aix4.[[23]]|aix4.[[23]].*|aix[[5-9]]*)\n\t  for ld_flag in $LDFLAGS; do\n\t  if (test x-brtl = \"x$ld_flag\" || test x-Wl,-brtl = \"x$ld_flag\"); then\n\t    aix_use_runtimelinking=yes\n\t    break\n\t  fi\n\t  done\n\t  if test svr4,no = \"$with_aix_soname,$aix_use_runtimelinking\"; then\n\t    # With aix-soname=svr4, we create the lib.so.V shared archives only,\n\t    # so we don't have lib.a shared libs to link our executables.\n\t    # We have to force runtime linking in this case.\n\t    aix_use_runtimelinking=yes\n\t    LDFLAGS=\"$LDFLAGS -Wl,-brtl\"\n\t  fi\n\t  ;;\n\tesac\n\n\texp_sym_flag='-bexport'\n\tno_entry_flag='-bnoentry'\n      fi\n\n      # When large executables or shared objects are built, AIX ld can\n      # have problems creating the table of contents.  If linking a library\n      # or program results in \"error TOC overflow\" add -mminimal-toc to\n      # CXXFLAGS/CFLAGS for g++/gcc.  In the cases where that is not\n      # enough to fix the problem, add -Wl,-bbigtoc to LDFLAGS.\n\n      _LT_TAGVAR(archive_cmds, $1)=''\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      _LT_TAGVAR(file_list_spec, $1)='$wl-f,'\n      case $with_aix_soname,$aix_use_runtimelinking in\n      aix,*) ;; # traditional, no import file\n      svr4,* | *,yes) # use import file\n\t# The Import File defines what to hardcode.\n\t_LT_TAGVAR(hardcode_direct, $1)=no\n\t_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n\t;;\n      esac\n\n      if test yes = \"$GCC\"; then\n\tcase $host_os in aix4.[[012]]|aix4.[[012]].*)\n\t# We only want to do this on AIX 4.2 and lower, the check\n\t# below for broken collect2 doesn't work under 4.3+\n\t  collect2name=`$CC -print-prog-name=collect2`\n\t  if test -f \"$collect2name\" &&\n\t   strings \"$collect2name\" | $GREP resolve_lib_name >/dev/null\n\t  then\n\t  # We have reworked collect2\n\t  :\n\t  else\n\t  # We have old collect2\n\t  _LT_TAGVAR(hardcode_direct, $1)=unsupported\n\t  # It fails to find uninstalled libraries when the uninstalled\n\t  # path is not listed in the libpath.  Setting hardcode_minus_L\n\t  # to unsupported forces relinking\n\t  _LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t  _LT_TAGVAR(hardcode_libdir_separator, $1)=\n\t  fi\n\t  ;;\n\tesac\n\tshared_flag='-shared'\n\tif test yes = \"$aix_use_runtimelinking\"; then\n\t  shared_flag=\"$shared_flag \"'$wl-G'\n\tfi\n\t# Need to ensure runtime linking is disabled for the traditional\n\t# shared library, or the linker may eventually find shared libraries\n\t# /with/ Import File - we do not want to mix them.\n\tshared_flag_aix='-shared'\n\tshared_flag_svr4='-shared $wl-G'\n      else\n\t# not using gcc\n\tif test ia64 = \"$host_cpu\"; then\n\t# VisualAge C++, Version 5.5 for AIX 5L for IA-64, Beta 3 Release\n\t# chokes on -Wl,-G. The following line is correct:\n\t  shared_flag='-G'\n\telse\n\t  if test yes = \"$aix_use_runtimelinking\"; then\n\t    shared_flag='$wl-G'\n\t  else\n\t    shared_flag='$wl-bM:SRE'\n\t  fi\n\t  shared_flag_aix='$wl-bM:SRE'\n\t  shared_flag_svr4='$wl-G'\n\tfi\n      fi\n\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-bexpall'\n      # It seems that -bexpall does not export symbols beginning with\n      # underscore (_), so it is better to generate a list of symbols to export.\n      _LT_TAGVAR(always_export_symbols, $1)=yes\n      if test aix,yes = \"$with_aix_soname,$aix_use_runtimelinking\"; then\n\t# Warning - without using the other runtime loading flags (-brtl),\n\t# -berok will link without error, but may produce a broken library.\n\t_LT_TAGVAR(allow_undefined_flag, $1)='-berok'\n        # Determine the default libpath from the value encoded in an\n        # empty executable.\n        _LT_SYS_MODULE_PATH_AIX([$1])\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-blibpath:$libdir:'\"$aix_libpath\"\n        _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $deplibs $wl'$no_entry_flag' $compiler_flags `if test -n \"$allow_undefined_flag\"; then func_echo_all \"$wl$allow_undefined_flag\"; else :; fi` $wl'$exp_sym_flag:\\$export_symbols' '$shared_flag\n      else\n\tif test ia64 = \"$host_cpu\"; then\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-R $libdir:/usr/lib:/lib'\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=\"-z nodefs\"\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)=\"\\$CC $shared_flag\"' -o $output_objdir/$soname $libobjs $deplibs '\"\\$wl$no_entry_flag\"' $compiler_flags $wl$allow_undefined_flag '\"\\$wl$exp_sym_flag:\\$export_symbols\"\n\telse\n\t # Determine the default libpath from the value encoded in an\n\t # empty executable.\n\t _LT_SYS_MODULE_PATH_AIX([$1])\n\t _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-blibpath:$libdir:'\"$aix_libpath\"\n\t  # Warning - without using the other run time loading flags,\n\t  # -berok will link without error, but may produce a broken library.\n\t  _LT_TAGVAR(no_undefined_flag, $1)=' $wl-bernotok'\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=' $wl-berok'\n\t  if test yes = \"$with_gnu_ld\"; then\n\t    # We only use this code for GNU lds that support --whole-archive.\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive$convenience $wl--no-whole-archive'\n\t  else\n\t    # Exported symbols can be pulled into shared objects from archives\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='$convenience'\n\t  fi\n\t  _LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$RM -r $output_objdir/$realname.d~$MKDIR $output_objdir/$realname.d'\n\t  # -brtl affects multiple linker settings, -berok does not and is overridden later\n\t  compiler_flags_filtered='`func_echo_all \"$compiler_flags \" | $SED -e \"s%-brtl\\\\([[, ]]\\\\)%-berok\\\\1%g\"`'\n\t  if test svr4 != \"$with_aix_soname\"; then\n\t    # This is similar to how AIX traditionally builds its shared libraries.\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$CC '$shared_flag_aix' -o $output_objdir/$realname.d/$soname $libobjs $deplibs $wl-bnoentry '$compiler_flags_filtered'$wl-bE:$export_symbols$allow_undefined_flag~$AR $AR_FLAGS $output_objdir/$libname$release.a $output_objdir/$realname.d/$soname'\n\t  fi\n\t  if test aix != \"$with_aix_soname\"; then\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$CC '$shared_flag_svr4' -o $output_objdir/$realname.d/$shared_archive_member_spec.o $libobjs $deplibs $wl-bnoentry '$compiler_flags_filtered'$wl-bE:$export_symbols$allow_undefined_flag~$STRIP -e $output_objdir/$realname.d/$shared_archive_member_spec.o~( func_echo_all \"#! $soname($shared_archive_member_spec.o)\"; if test shr_64 = \"$shared_archive_member_spec\"; then func_echo_all \"# 64\"; else func_echo_all \"# 32\"; fi; cat $export_symbols ) > $output_objdir/$realname.d/$shared_archive_member_spec.imp~$AR $AR_FLAGS $output_objdir/$soname $output_objdir/$realname.d/$shared_archive_member_spec.o $output_objdir/$realname.d/$shared_archive_member_spec.imp'\n\t  else\n\t    # used by -dlpreopen to get the symbols\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$MV  $output_objdir/$realname.d/$soname $output_objdir'\n\t  fi\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$RM -r $output_objdir/$realname.d'\n\tfi\n      fi\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n            _LT_TAGVAR(archive_expsym_cmds, $1)=''\n        ;;\n      m68k)\n            _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/a2ixlibrary.data~$ECHO \"#define NAME $libname\" > $output_objdir/a2ixlibrary.data~$ECHO \"#define LIBRARY_ID 1\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define VERSION $major\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define REVISION $revision\" >> $output_objdir/a2ixlibrary.data~$AR $AR_FLAGS $lib $libobjs~$RANLIB $lib~(cd $output_objdir && a2ixlibrary -32)'\n            _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n            _LT_TAGVAR(hardcode_minus_L, $1)=yes\n        ;;\n      esac\n      ;;\n\n    bsdi[[45]]*)\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)=-rdynamic\n      ;;\n\n    cygwin* | mingw* | pw32* | cegcc*)\n      # When not using gcc, we currently assume that we are using\n      # Microsoft Visual C++.\n      # hardcode_libdir_flag_spec is actually meaningless, as there is\n      # no search path for DLLs.\n      case $cc_basename in\n      cl*)\n\t# Native MSVC\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=' '\n\t_LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t_LT_TAGVAR(always_export_symbols, $1)=yes\n\t_LT_TAGVAR(file_list_spec, $1)='@'\n\t# Tell ltmain to make .lib files, not .a files.\n\tlibext=lib\n\t# Tell ltmain to make .dll files, not .so files.\n\tshrext_cmds=.dll\n\t# FIXME: Setting linknames here is a bad hack.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $compiler_flags $deplibs -Wl,-DLL,-IMPLIB:\"$tool_output_objdir$libname.dll.lib\"~linknames='\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='if _LT_DLL_DEF_P([$export_symbols]); then\n            cp \"$export_symbols\" \"$output_objdir/$soname.def\";\n            echo \"$tool_output_objdir$soname.def\" > \"$output_objdir/$soname.exp\";\n          else\n            $SED -e '\\''s/^/-link -EXPORT:/'\\'' < $export_symbols > $output_objdir/$soname.exp;\n          fi~\n          $CC -o $tool_output_objdir$soname $libobjs $compiler_flags $deplibs \"@$tool_output_objdir$soname.exp\" -Wl,-DLL,-IMPLIB:\"$tool_output_objdir$libname.dll.lib\"~\n          linknames='\n\t# The linker will not automatically build a static lib if we build a DLL.\n\t# _LT_TAGVAR(old_archive_from_new_cmds, $1)='true'\n\t_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\t_LT_TAGVAR(exclude_expsyms, $1)='_NULL_IMPORT_DESCRIPTOR|_IMPORT_DESCRIPTOR_.*'\n\t_LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED -e '\\''/^[[BCDGRS]][[ ]]/s/.*[[ ]]\\([[^ ]]*\\)/\\1,DATA/'\\'' | $SED -e '\\''/^[[AITW]][[ ]]/s/.*[[ ]]//'\\'' | sort | uniq > $export_symbols'\n\t# Don't use ranlib\n\t_LT_TAGVAR(old_postinstall_cmds, $1)='chmod 644 $oldlib'\n\t_LT_TAGVAR(postlink_cmds, $1)='lt_outputfile=\"@OUTPUT@\"~\n          lt_tool_outputfile=\"@TOOL_OUTPUT@\"~\n          case $lt_outputfile in\n            *.exe|*.EXE) ;;\n            *)\n              lt_outputfile=$lt_outputfile.exe\n              lt_tool_outputfile=$lt_tool_outputfile.exe\n              ;;\n          esac~\n          if test : != \"$MANIFEST_TOOL\" && test -f \"$lt_outputfile.manifest\"; then\n            $MANIFEST_TOOL -manifest \"$lt_tool_outputfile.manifest\" -outputresource:\"$lt_tool_outputfile\" || exit 1;\n            $RM \"$lt_outputfile.manifest\";\n          fi'\n\t;;\n      *)\n\t# Assume MSVC wrapper\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=' '\n\t_LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t# Tell ltmain to make .lib files, not .a files.\n\tlibext=lib\n\t# Tell ltmain to make .dll files, not .so files.\n\tshrext_cmds=.dll\n\t# FIXME: Setting linknames here is a bad hack.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -o $lib $libobjs $compiler_flags `func_echo_all \"$deplibs\" | $SED '\\''s/ -lc$//'\\''` -link -dll~linknames='\n\t# The linker will automatically build a .lib file if we build a DLL.\n\t_LT_TAGVAR(old_archive_from_new_cmds, $1)='true'\n\t# FIXME: Should let the user specify the lib program.\n\t_LT_TAGVAR(old_archive_cmds, $1)='lib -OUT:$oldlib$oldobjs$old_deplibs'\n\t_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\t;;\n      esac\n      ;;\n\n    darwin* | rhapsody*)\n      _LT_DARWIN_LINKER_FEATURES($1)\n      ;;\n\n    dgux*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    # FreeBSD 2.2.[012] allows us to include c++rt0.o to get C++ constructor\n    # support.  Future versions do this automatically, but an explicit c++rt0.o\n    # does not break anything, and helps significantly (at the cost of a little\n    # extra space).\n    freebsd2.2*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags /usr/lib/c++rt0.o'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    # Unfortunately, older versions of FreeBSD 2 do not have this feature.\n    freebsd2.*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    # FreeBSD 3 and greater uses gcc -shared to do shared libraries.\n    freebsd* | dragonfly*)\n      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    hpux9*)\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$CC -shared $pic_flag $wl+b $wl$install_libdir -o $output_objdir/$soname $libobjs $deplibs $compiler_flags~test \"x$output_objdir/$soname\" = \"x$lib\" || mv $output_objdir/$soname $lib'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$LD -b +b $install_libdir -o $output_objdir/$soname $libobjs $deplibs $linker_flags~test \"x$output_objdir/$soname\" = \"x$lib\" || mv $output_objdir/$soname $lib'\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl+b $wl$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n\n      # hardcode_minus_L: Not really in the search PATH,\n      # but as the default location of the library.\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n      ;;\n\n    hpux10*)\n      if test yes,no = \"$GCC,$with_gnu_ld\"; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -b +h $soname +b $install_libdir -o $lib $libobjs $deplibs $linker_flags'\n      fi\n      if test no = \"$with_gnu_ld\"; then\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl+b $wl$libdir'\n\t_LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\t_LT_TAGVAR(hardcode_direct, $1)=yes\n\t_LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n\t# hardcode_minus_L: Not really in the search PATH,\n\t# but as the default location of the library.\n\t_LT_TAGVAR(hardcode_minus_L, $1)=yes\n      fi\n      ;;\n\n    hpux11*)\n      if test yes,no = \"$GCC,$with_gnu_ld\"; then\n\tcase $host_cpu in\n\thppa*64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $wl+h $wl$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tia64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $wl+h $wl$soname $wl+nodefaultrpath -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\t*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tesac\n      else\n\tcase $host_cpu in\n\thppa*64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tia64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname $wl+nodefaultrpath -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\t*)\n\tm4_if($1, [], [\n\t  # Older versions of the 11.00 compiler do not understand -b yet\n\t  # (HP92453-01 A.11.01.20 doesn't, HP92453-01 B.11.X.35175-35176.GP does)\n\t  _LT_LINKER_OPTION([if $CC understands -b],\n\t    _LT_TAGVAR(lt_cv_prog_compiler__b, $1), [-b],\n\t    [_LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $libobjs $deplibs $compiler_flags'],\n\t    [_LT_TAGVAR(archive_cmds, $1)='$LD -b +h $soname +b $install_libdir -o $lib $libobjs $deplibs $linker_flags'])],\n\t  [_LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $libobjs $deplibs $compiler_flags'])\n\t  ;;\n\tesac\n      fi\n      if test no = \"$with_gnu_ld\"; then\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl+b $wl$libdir'\n\t_LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\tcase $host_cpu in\n\thppa*64*|ia64*)\n\t  _LT_TAGVAR(hardcode_direct, $1)=no\n\t  _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t  ;;\n\t*)\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes\n\t  _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n\n\t  # hardcode_minus_L: Not really in the search PATH,\n\t  # but as the default location of the library.\n\t  _LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t  ;;\n\tesac\n      fi\n      ;;\n\n    irix5* | irix6* | nonstopux*)\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n\t# Try to use the -exported_symbol ld option, if it does not\n\t# work, assume that -exports_file does not work either and\n\t# implicitly export all symbols.\n\t# This should be the same for all languages, so no per-tag cache variable.\n\tAC_CACHE_CHECK([whether the $host_os linker accepts -exported_symbol],\n\t  [lt_cv_irix_exported_symbol],\n\t  [save_LDFLAGS=$LDFLAGS\n\t   LDFLAGS=\"$LDFLAGS -shared $wl-exported_symbol ${wl}foo $wl-update_registry $wl/dev/null\"\n\t   AC_LINK_IFELSE(\n\t     [AC_LANG_SOURCE(\n\t        [AC_LANG_CASE([C], [[int foo (void) { return 0; }]],\n\t\t\t      [C++], [[int foo (void) { return 0; }]],\n\t\t\t      [Fortran 77], [[\n      subroutine foo\n      end]],\n\t\t\t      [Fortran], [[\n      subroutine foo\n      end]])])],\n\t      [lt_cv_irix_exported_symbol=yes],\n\t      [lt_cv_irix_exported_symbol=no])\n           LDFLAGS=$save_LDFLAGS])\n\tif test yes = \"$lt_cv_irix_exported_symbol\"; then\n          _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations $wl-exports_file $wl$export_symbols -o $lib'\n\tfi\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -exports_file $export_symbols -o $lib'\n      fi\n      _LT_TAGVAR(archive_cmds_need_lc, $1)='no'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      _LT_TAGVAR(inherit_rpath, $1)=yes\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      ;;\n\n    linux*)\n      case $cc_basename in\n      tcc*)\n\t# Fabrice Bellard et al's Tiny C Compiler\n\t_LT_TAGVAR(ld_shlibs, $1)=yes\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n\t;;\n      esac\n      ;;\n\n    netbsd*)\n      if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags'  # a.out\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -shared -o $lib $libobjs $deplibs $linker_flags'      # ELF\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    newsos6)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    *nto* | *qnx*)\n      ;;\n\n    openbsd* | bitrig*)\n      if test -f /usr/libexec/ld.so; then\n\t_LT_TAGVAR(hardcode_direct, $1)=yes\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t_LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\tif test -z \"`echo __ELF__ | $CC -E - | $GREP __ELF__`\"; then\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags $wl-retain-symbols-file,$export_symbols'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n\telse\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\tfi\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    os2*)\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      shrext_cmds=.dll\n      _LT_TAGVAR(archive_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t$ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t$ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t$ECHO EXPORTS >> $output_objdir/$libname.def~\n\temxexp $libobjs | $SED /\"_DLL_InitTerm\"/d >> $output_objdir/$libname.def~\n\t$CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\temximp -o $lib $output_objdir/$libname.def'\n      _LT_TAGVAR(archive_expsym_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t$ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t$ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t$ECHO EXPORTS >> $output_objdir/$libname.def~\n\tprefix_cmds=\"$SED\"~\n\tif test EXPORTS = \"`$SED 1q $export_symbols`\"; then\n\t  prefix_cmds=\"$prefix_cmds -e 1d\";\n\tfi~\n\tprefix_cmds=\"$prefix_cmds -e \\\"s/^\\(.*\\)$/_\\1/g\\\"\"~\n\tcat $export_symbols | $prefix_cmds >> $output_objdir/$libname.def~\n\t$CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\temximp -o $lib $output_objdir/$libname.def'\n      _LT_TAGVAR(old_archive_From_new_cmds, $1)='emximp -o $output_objdir/${libname}_dll.a $output_objdir/$libname.def'\n      _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n      ;;\n\n    osf3*)\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' $wl-expect_unresolved $wl\\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n      else\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' -expect_unresolved \\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $libobjs $deplibs $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n      fi\n      _LT_TAGVAR(archive_cmds_need_lc, $1)='no'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      ;;\n\n    osf4* | osf5*)\t# as osf3* with the addition of -msym flag\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' $wl-expect_unresolved $wl\\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $pic_flag $libobjs $deplibs $compiler_flags $wl-msym $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n      else\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' -expect_unresolved \\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $libobjs $deplibs $compiler_flags -msym -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='for i in `cat $export_symbols`; do printf \"%s %s\\\\n\" -exported_symbol \"\\$i\" >> $lib.exp; done; printf \"%s\\\\n\" \"-hidden\">> $lib.exp~\n          $CC -shared$allow_undefined_flag $wl-input $wl$lib.exp $compiler_flags $libobjs $deplibs -soname $soname `test -n \"$verstring\" && $ECHO \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib~$RM $lib.exp'\n\n\t# Both c and cxx compiler support -rpath directly\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-rpath $libdir'\n      fi\n      _LT_TAGVAR(archive_cmds_need_lc, $1)='no'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      ;;\n\n    solaris*)\n      _LT_TAGVAR(no_undefined_flag, $1)=' -z defs'\n      if test yes = \"$GCC\"; then\n\twlarc='$wl'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $wl-z ${wl}text $wl-h $wl$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n          $CC -shared $pic_flag $wl-z ${wl}text $wl-M $wl$lib.exp $wl-h $wl$soname -o $lib $libobjs $deplibs $compiler_flags~$RM $lib.exp'\n      else\n\tcase `$CC -V 2>&1` in\n\t*\"Compilers 5.0\"*)\n\t  wlarc=''\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G$allow_undefined_flag -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n            $LD -G$allow_undefined_flag -M $lib.exp -h $soname -o $lib $libobjs $deplibs $linker_flags~$RM $lib.exp'\n\t  ;;\n\t*)\n\t  wlarc='$wl'\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -G$allow_undefined_flag -h $soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n            $CC -G$allow_undefined_flag -M $lib.exp -h $soname -o $lib $libobjs $deplibs $compiler_flags~$RM $lib.exp'\n\t  ;;\n\tesac\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      case $host_os in\n      solaris2.[[0-5]] | solaris2.[[0-5]].*) ;;\n      *)\n\t# The compiler driver will combine and reorder linker options,\n\t# but understands '-z linker_flag'.  GCC discards it without '$wl',\n\t# but is careful enough not to reorder.\n\t# Supported since Solaris 2.6 (maybe 2.5.1?)\n\tif test yes = \"$GCC\"; then\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl-z ${wl}allextract$convenience $wl-z ${wl}defaultextract'\n\telse\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='-z allextract$convenience -z defaultextract'\n\tfi\n\t;;\n      esac\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      ;;\n\n    sunos4*)\n      if test sequent = \"$host_vendor\"; then\n\t# Use $CC to link under sequent, because it throws in some extra .o\n\t# files that make .init and .fini sections work.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -G $wl-h $soname -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -assert pure-text -Bstatic -o $lib $libobjs $deplibs $linker_flags'\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    sysv4)\n      case $host_vendor in\n\tsni)\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes # is this really true???\n\t;;\n\tsiemens)\n\t  ## LD is ld it makes a PLAMLIB\n\t  ## CC just makes a GrossModule.\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(reload_cmds, $1)='$CC -r -o $output$reload_objs'\n\t  _LT_TAGVAR(hardcode_direct, $1)=no\n        ;;\n\tmotorola)\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(hardcode_direct, $1)=no #Motorola manual says yes, but my tests say they lie\n\t;;\n      esac\n      runpath_var='LD_RUN_PATH'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    sysv4.3*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='-Bexport'\n      ;;\n\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\trunpath_var=LD_RUN_PATH\n\thardcode_runpath_var=yes\n\t_LT_TAGVAR(ld_shlibs, $1)=yes\n      fi\n      ;;\n\n    sysv4*uw2* | sysv5OpenUNIX* | sysv5UnixWare7.[[01]].[[10]]* | unixware7* | sco3.2v5.0.[[024]]*)\n      _LT_TAGVAR(no_undefined_flag, $1)='$wl-z,text'\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      runpath_var='LD_RUN_PATH'\n\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -G $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      fi\n      ;;\n\n    sysv5* | sco3.2v5* | sco5v6*)\n      # Note: We CANNOT use -z defs as we might desire, because we do not\n      # link with -lc, and that would cause any symbols used from libc to\n      # always be unresolved, which means just about no library would\n      # ever link correctly.  If we're not using GNU ld we use -z text\n      # though, which does catch some bad symbols but isn't as heavy-handed\n      # as -z defs.\n      _LT_TAGVAR(no_undefined_flag, $1)='$wl-z,text'\n      _LT_TAGVAR(allow_undefined_flag, $1)='$wl-z,nodefs'\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-R,$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-Bexport'\n      runpath_var='LD_RUN_PATH'\n\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -G $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      fi\n      ;;\n\n    uts4*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    *)\n      _LT_TAGVAR(ld_shlibs, $1)=no\n      ;;\n    esac\n\n    if test sni = \"$host_vendor\"; then\n      case $host in\n      sysv4 | sysv4.2uw2* | sysv4.3* | sysv5*)\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-Blargedynsym'\n\t;;\n      esac\n    fi\n  fi\n])\nAC_MSG_RESULT([$_LT_TAGVAR(ld_shlibs, $1)])\ntest no = \"$_LT_TAGVAR(ld_shlibs, $1)\" && can_build_shared=no\n\n_LT_TAGVAR(with_gnu_ld, $1)=$with_gnu_ld\n\n_LT_DECL([], [libext], [0], [Old archive suffix (normally \"a\")])dnl\n_LT_DECL([], [shrext_cmds], [1], [Shared library suffix (normally \".so\")])dnl\n_LT_DECL([], [extract_expsyms_cmds], [2],\n    [The commands to extract the exported symbol list from a shared archive])\n\n#\n# Do we need to explicitly link libc?\n#\ncase \"x$_LT_TAGVAR(archive_cmds_need_lc, $1)\" in\nx|xyes)\n  # Assume -lc should be added\n  _LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\n  if test yes,yes = \"$GCC,$enable_shared\"; then\n    case $_LT_TAGVAR(archive_cmds, $1) in\n    *'~'*)\n      # FIXME: we may have to deal with multi-command sequences.\n      ;;\n    '$CC '*)\n      # Test whether the compiler implicitly links with -lc since on some\n      # systems, -lgcc has to come before -lc. If gcc already passes -lc\n      # to ld, don't add -lc before -lgcc.\n      AC_CACHE_CHECK([whether -lc should be explicitly linked in],\n\t[lt_cv_]_LT_TAGVAR(archive_cmds_need_lc, $1),\n\t[$RM conftest*\n\techo \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n\n\tif AC_TRY_EVAL(ac_compile) 2>conftest.err; then\n\t  soname=conftest\n\t  lib=conftest\n\t  libobjs=conftest.$ac_objext\n\t  deplibs=\n\t  wl=$_LT_TAGVAR(lt_prog_compiler_wl, $1)\n\t  pic_flag=$_LT_TAGVAR(lt_prog_compiler_pic, $1)\n\t  compiler_flags=-v\n\t  linker_flags=-v\n\t  verstring=\n\t  output_objdir=.\n\t  libname=conftest\n\t  lt_save_allow_undefined_flag=$_LT_TAGVAR(allow_undefined_flag, $1)\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=\n\t  if AC_TRY_EVAL(_LT_TAGVAR(archive_cmds, $1) 2\\>\\&1 \\| $GREP \\\" -lc \\\" \\>/dev/null 2\\>\\&1)\n\t  then\n\t    lt_cv_[]_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\t  else\n\t    lt_cv_[]_LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\t  fi\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=$lt_save_allow_undefined_flag\n\telse\n\t  cat conftest.err 1>&5\n\tfi\n\t$RM conftest*\n\t])\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=$lt_cv_[]_LT_TAGVAR(archive_cmds_need_lc, $1)\n      ;;\n    esac\n  fi\n  ;;\nesac\n\n_LT_TAGDECL([build_libtool_need_lc], [archive_cmds_need_lc], [0],\n    [Whether or not to add -lc for building shared libraries])\n_LT_TAGDECL([allow_libtool_libs_with_static_runtimes],\n    [enable_shared_with_static_runtimes], [0],\n    [Whether or not to disallow shared libs when runtime libs are static])\n_LT_TAGDECL([], [export_dynamic_flag_spec], [1],\n    [Compiler flag to allow reflexive dlopens])\n_LT_TAGDECL([], [whole_archive_flag_spec], [1],\n    [Compiler flag to generate shared objects directly from archives])\n_LT_TAGDECL([], [compiler_needs_object], [1],\n    [Whether the compiler copes with passing no objects directly])\n_LT_TAGDECL([], [old_archive_from_new_cmds], [2],\n    [Create an old-style archive from a shared archive])\n_LT_TAGDECL([], [old_archive_from_expsyms_cmds], [2],\n    [Create a temporary old-style archive to link instead of a shared archive])\n_LT_TAGDECL([], [archive_cmds], [2], [Commands used to build a shared archive])\n_LT_TAGDECL([], [archive_expsym_cmds], [2])\n_LT_TAGDECL([], [module_cmds], [2],\n    [Commands used to build a loadable module if different from building\n    a shared archive.])\n_LT_TAGDECL([], [module_expsym_cmds], [2])\n_LT_TAGDECL([], [with_gnu_ld], [1],\n    [Whether we are building with GNU ld or not])\n_LT_TAGDECL([], [allow_undefined_flag], [1],\n    [Flag that allows shared libraries with undefined symbols to be built])\n_LT_TAGDECL([], [no_undefined_flag], [1],\n    [Flag that enforces no undefined symbols])\n_LT_TAGDECL([], [hardcode_libdir_flag_spec], [1],\n    [Flag to hardcode $libdir into a binary during linking.\n    This must work even if $libdir does not exist])\n_LT_TAGDECL([], [hardcode_libdir_separator], [1],\n    [Whether we need a single \"-rpath\" flag with a separated argument])\n_LT_TAGDECL([], [hardcode_direct], [0],\n    [Set to \"yes\" if using DIR/libNAME$shared_ext during linking hardcodes\n    DIR into the resulting binary])\n_LT_TAGDECL([], [hardcode_direct_absolute], [0],\n    [Set to \"yes\" if using DIR/libNAME$shared_ext during linking hardcodes\n    DIR into the resulting binary and the resulting library dependency is\n    \"absolute\", i.e impossible to change by setting $shlibpath_var if the\n    library is relocated])\n_LT_TAGDECL([], [hardcode_minus_L], [0],\n    [Set to \"yes\" if using the -LDIR flag during linking hardcodes DIR\n    into the resulting binary])\n_LT_TAGDECL([], [hardcode_shlibpath_var], [0],\n    [Set to \"yes\" if using SHLIBPATH_VAR=DIR during linking hardcodes DIR\n    into the resulting binary])\n_LT_TAGDECL([], [hardcode_automatic], [0],\n    [Set to \"yes\" if building a shared library automatically hardcodes DIR\n    into the library and all subsequent libraries and executables linked\n    against it])\n_LT_TAGDECL([], [inherit_rpath], [0],\n    [Set to yes if linker adds runtime paths of dependent libraries\n    to runtime path list])\n_LT_TAGDECL([], [link_all_deplibs], [0],\n    [Whether libtool must link a program against all its dependency libraries])\n_LT_TAGDECL([], [always_export_symbols], [0],\n    [Set to \"yes\" if exported symbols are required])\n_LT_TAGDECL([], [export_symbols_cmds], [2],\n    [The commands to list exported symbols])\n_LT_TAGDECL([], [exclude_expsyms], [1],\n    [Symbols that should not be listed in the preloaded symbols])\n_LT_TAGDECL([], [include_expsyms], [1],\n    [Symbols that must always be exported])\n_LT_TAGDECL([], [prelink_cmds], [2],\n    [Commands necessary for linking programs (against libraries) with templates])\n_LT_TAGDECL([], [postlink_cmds], [2],\n    [Commands necessary for finishing linking programs])\n_LT_TAGDECL([], [file_list_spec], [1],\n    [Specify filename containing input files])\ndnl FIXME: Not yet implemented\ndnl _LT_TAGDECL([], [thread_safe_flag_spec], [1],\ndnl    [Compiler flag to generate thread safe objects])\n])# _LT_LINKER_SHLIBS\n\n\n# _LT_LANG_C_CONFIG([TAG])\n# ------------------------\n# Ensure that the configuration variables for a C compiler are suitably\n# defined.  These variables are subsequently used by _LT_CONFIG to write\n# the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_C_CONFIG],\n[m4_require([_LT_DECL_EGREP])dnl\nlt_save_CC=$CC\nAC_LANG_PUSH(C)\n\n# Source file extension for C test sources.\nac_ext=c\n\n# Object file extension for compiled C test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code=\"int some_variable = 0;\"\n\n# Code to be used in simple link tests\nlt_simple_link_test_code='int main(){return(0);}'\n\n_LT_TAG_COMPILER\n# Save the default compiler, since it gets overwritten when the other\n# tags are being tested, and _LT_TAGVAR(compiler, []) is a NOP.\ncompiler_DEFAULT=$CC\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n## CAVEAT EMPTOR:\n## There is no encapsulation within the following macros, do not change\n## the running order or otherwise move them around unless you know exactly\n## what you are doing...\nif test -n \"$compiler\"; then\n  _LT_COMPILER_NO_RTTI($1)\n  _LT_COMPILER_PIC($1)\n  _LT_COMPILER_C_O($1)\n  _LT_COMPILER_FILE_LOCKS($1)\n  _LT_LINKER_SHLIBS($1)\n  _LT_SYS_DYNAMIC_LINKER($1)\n  _LT_LINKER_HARDCODE_LIBPATH($1)\n  LT_SYS_DLOPEN_SELF\n  _LT_CMD_STRIPLIB\n\n  # Report what library types will actually be built\n  AC_MSG_CHECKING([if libtool supports shared libraries])\n  AC_MSG_RESULT([$can_build_shared])\n\n  AC_MSG_CHECKING([whether to build shared libraries])\n  test no = \"$can_build_shared\" && enable_shared=no\n\n  # On AIX, shared libraries and static libraries use the same namespace, and\n  # are all built from PIC.\n  case $host_os in\n  aix3*)\n    test yes = \"$enable_shared\" && enable_static=no\n    if test -n \"$RANLIB\"; then\n      archive_cmds=\"$archive_cmds~\\$RANLIB \\$lib\"\n      postinstall_cmds='$RANLIB $lib'\n    fi\n    ;;\n\n  aix[[4-9]]*)\n    if test ia64 != \"$host_cpu\"; then\n      case $enable_shared,$with_aix_soname,$aix_use_runtimelinking in\n      yes,aix,yes) ;;\t\t\t# shared object as lib.so file only\n      yes,svr4,*) ;;\t\t\t# shared object as lib.so archive member only\n      yes,*) enable_static=no ;;\t# shared object in lib.a archive as well\n      esac\n    fi\n    ;;\n  esac\n  AC_MSG_RESULT([$enable_shared])\n\n  AC_MSG_CHECKING([whether to build static libraries])\n  # Make sure either enable_shared or enable_static is yes.\n  test yes = \"$enable_shared\" || enable_static=yes\n  AC_MSG_RESULT([$enable_static])\n\n  _LT_CONFIG($1)\nfi\nAC_LANG_POP\nCC=$lt_save_CC\n])# _LT_LANG_C_CONFIG\n\n\n# _LT_LANG_CXX_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for a C++ compiler are suitably\n# defined.  These variables are subsequently used by _LT_CONFIG to write\n# the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_CXX_CONFIG],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_PATH_MANIFEST_TOOL])dnl\nif test -n \"$CXX\" && ( test no != \"$CXX\" &&\n    ( (test g++ = \"$CXX\" && `g++ -v >/dev/null 2>&1` ) ||\n    (test g++ != \"$CXX\"))); then\n  AC_PROG_CXXCPP\nelse\n  _lt_caught_CXX_error=yes\nfi\n\nAC_LANG_PUSH(C++)\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n_LT_TAGVAR(allow_undefined_flag, $1)=\n_LT_TAGVAR(always_export_symbols, $1)=no\n_LT_TAGVAR(archive_expsym_cmds, $1)=\n_LT_TAGVAR(compiler_needs_object, $1)=no\n_LT_TAGVAR(export_dynamic_flag_spec, $1)=\n_LT_TAGVAR(hardcode_direct, $1)=no\n_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n_LT_TAGVAR(hardcode_libdir_separator, $1)=\n_LT_TAGVAR(hardcode_minus_L, $1)=no\n_LT_TAGVAR(hardcode_shlibpath_var, $1)=unsupported\n_LT_TAGVAR(hardcode_automatic, $1)=no\n_LT_TAGVAR(inherit_rpath, $1)=no\n_LT_TAGVAR(module_cmds, $1)=\n_LT_TAGVAR(module_expsym_cmds, $1)=\n_LT_TAGVAR(link_all_deplibs, $1)=unknown\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n_LT_TAGVAR(no_undefined_flag, $1)=\n_LT_TAGVAR(whole_archive_flag_spec, $1)=\n_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n\n# Source file extension for C++ test sources.\nac_ext=cpp\n\n# Object file extension for compiled C++ test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# No sense in running all these tests if we already determined that\n# the CXX compiler isn't working.  Some variables (like enable_shared)\n# are currently assumed to apply to all compilers on this platform,\n# and will be corrupted by setting them based on a non-working compiler.\nif test yes != \"$_lt_caught_CXX_error\"; then\n  # Code to be used in simple compile tests\n  lt_simple_compile_test_code=\"int some_variable = 0;\"\n\n  # Code to be used in simple link tests\n  lt_simple_link_test_code='int main(int, char *[[]]) { return(0); }'\n\n  # ltmain only uses $CC for tagged configurations so make sure $CC is set.\n  _LT_TAG_COMPILER\n\n  # save warnings/boilerplate of simple test code\n  _LT_COMPILER_BOILERPLATE\n  _LT_LINKER_BOILERPLATE\n\n  # Allow CC to be a program name with arguments.\n  lt_save_CC=$CC\n  lt_save_CFLAGS=$CFLAGS\n  lt_save_LD=$LD\n  lt_save_GCC=$GCC\n  GCC=$GXX\n  lt_save_with_gnu_ld=$with_gnu_ld\n  lt_save_path_LD=$lt_cv_path_LD\n  if test -n \"${lt_cv_prog_gnu_ldcxx+set}\"; then\n    lt_cv_prog_gnu_ld=$lt_cv_prog_gnu_ldcxx\n  else\n    $as_unset lt_cv_prog_gnu_ld\n  fi\n  if test -n \"${lt_cv_path_LDCXX+set}\"; then\n    lt_cv_path_LD=$lt_cv_path_LDCXX\n  else\n    $as_unset lt_cv_path_LD\n  fi\n  test -z \"${LDCXX+set}\" || LD=$LDCXX\n  CC=${CXX-\"c++\"}\n  CFLAGS=$CXXFLAGS\n  compiler=$CC\n  _LT_TAGVAR(compiler, $1)=$CC\n  _LT_CC_BASENAME([$compiler])\n\n  if test -n \"$compiler\"; then\n    # We don't want -fno-exception when compiling C++ code, so set the\n    # no_builtin_flag separately\n    if test yes = \"$GXX\"; then\n      _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=' -fno-builtin'\n    else\n      _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=\n    fi\n\n    if test yes = \"$GXX\"; then\n      # Set up default GNU C++ configuration\n\n      LT_PATH_LD\n\n      # Check if GNU C++ uses GNU ld as the underlying linker, since the\n      # archiving commands below assume that GNU ld is being used.\n      if test yes = \"$with_gnu_ld\"; then\n        _LT_TAGVAR(archive_cmds, $1)='$CC $pic_flag -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname -o $lib'\n        _LT_TAGVAR(archive_expsym_cmds, $1)='$CC $pic_flag -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n        _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n\n        # If archive_cmds runs LD, not CC, wlarc should be empty\n        # XXX I think wlarc can be eliminated in ltcf-cxx, but I need to\n        #     investigate it a little bit more. (MM)\n        wlarc='$wl'\n\n        # ancient GNU ld didn't support --whole-archive et. al.\n        if eval \"`$CC -print-prog-name=ld` --help 2>&1\" |\n\t  $GREP 'no-whole-archive' > /dev/null; then\n          _LT_TAGVAR(whole_archive_flag_spec, $1)=$wlarc'--whole-archive$convenience '$wlarc'--no-whole-archive'\n        else\n          _LT_TAGVAR(whole_archive_flag_spec, $1)=\n        fi\n      else\n        with_gnu_ld=no\n        wlarc=\n\n        # A generic and very simple default shared library creation\n        # command for GNU C++ for the case where it uses the native\n        # linker, instead of GNU ld.  If possible, this setting should\n        # overridden to take advantage of the native linker features on\n        # the platform it is being used on.\n        _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $lib'\n      fi\n\n      # Commands to make compiler produce verbose output that lists\n      # what \"hidden\" libraries, object files and flags are used when\n      # linking a shared library.\n      output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\n    else\n      GXX=no\n      with_gnu_ld=no\n      wlarc=\n    fi\n\n    # PORTME: fill in a description of your system's C++ link characteristics\n    AC_MSG_CHECKING([whether the $compiler linker ($LD) supports shared libraries])\n    _LT_TAGVAR(ld_shlibs, $1)=yes\n    case $host_os in\n      aix3*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n      aix[[4-9]]*)\n        if test ia64 = \"$host_cpu\"; then\n          # On IA64, the linker does run time linking by default, so we don't\n          # have to do anything special.\n          aix_use_runtimelinking=no\n          exp_sym_flag='-Bexport'\n          no_entry_flag=\n        else\n          aix_use_runtimelinking=no\n\n          # Test if we are trying to use run time linking or normal\n          # AIX style linking. If -brtl is somewhere in LDFLAGS, we\n          # have runtime linking enabled, and use it for executables.\n          # For shared libraries, we enable/disable runtime linking\n          # depending on the kind of the shared library created -\n          # when \"with_aix_soname,aix_use_runtimelinking\" is:\n          # \"aix,no\"   lib.a(lib.so.V) shared, rtl:no,  for executables\n          # \"aix,yes\"  lib.so          shared, rtl:yes, for executables\n          #            lib.a           static archive\n          # \"both,no\"  lib.so.V(shr.o) shared, rtl:yes\n          #            lib.a(lib.so.V) shared, rtl:no,  for executables\n          # \"both,yes\" lib.so.V(shr.o) shared, rtl:yes, for executables\n          #            lib.a(lib.so.V) shared, rtl:no\n          # \"svr4,*\"   lib.so.V(shr.o) shared, rtl:yes, for executables\n          #            lib.a           static archive\n          case $host_os in aix4.[[23]]|aix4.[[23]].*|aix[[5-9]]*)\n\t    for ld_flag in $LDFLAGS; do\n\t      case $ld_flag in\n\t      *-brtl*)\n\t        aix_use_runtimelinking=yes\n\t        break\n\t        ;;\n\t      esac\n\t    done\n\t    if test svr4,no = \"$with_aix_soname,$aix_use_runtimelinking\"; then\n\t      # With aix-soname=svr4, we create the lib.so.V shared archives only,\n\t      # so we don't have lib.a shared libs to link our executables.\n\t      # We have to force runtime linking in this case.\n\t      aix_use_runtimelinking=yes\n\t      LDFLAGS=\"$LDFLAGS -Wl,-brtl\"\n\t    fi\n\t    ;;\n          esac\n\n          exp_sym_flag='-bexport'\n          no_entry_flag='-bnoentry'\n        fi\n\n        # When large executables or shared objects are built, AIX ld can\n        # have problems creating the table of contents.  If linking a library\n        # or program results in \"error TOC overflow\" add -mminimal-toc to\n        # CXXFLAGS/CFLAGS for g++/gcc.  In the cases where that is not\n        # enough to fix the problem, add -Wl,-bbigtoc to LDFLAGS.\n\n        _LT_TAGVAR(archive_cmds, $1)=''\n        _LT_TAGVAR(hardcode_direct, $1)=yes\n        _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n        _LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n        _LT_TAGVAR(link_all_deplibs, $1)=yes\n        _LT_TAGVAR(file_list_spec, $1)='$wl-f,'\n        case $with_aix_soname,$aix_use_runtimelinking in\n        aix,*) ;;\t# no import file\n        svr4,* | *,yes) # use import file\n          # The Import File defines what to hardcode.\n          _LT_TAGVAR(hardcode_direct, $1)=no\n          _LT_TAGVAR(hardcode_direct_absolute, $1)=no\n          ;;\n        esac\n\n        if test yes = \"$GXX\"; then\n          case $host_os in aix4.[[012]]|aix4.[[012]].*)\n          # We only want to do this on AIX 4.2 and lower, the check\n          # below for broken collect2 doesn't work under 4.3+\n\t  collect2name=`$CC -print-prog-name=collect2`\n\t  if test -f \"$collect2name\" &&\n\t     strings \"$collect2name\" | $GREP resolve_lib_name >/dev/null\n\t  then\n\t    # We have reworked collect2\n\t    :\n\t  else\n\t    # We have old collect2\n\t    _LT_TAGVAR(hardcode_direct, $1)=unsupported\n\t    # It fails to find uninstalled libraries when the uninstalled\n\t    # path is not listed in the libpath.  Setting hardcode_minus_L\n\t    # to unsupported forces relinking\n\t    _LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=\n\t  fi\n          esac\n          shared_flag='-shared'\n\t  if test yes = \"$aix_use_runtimelinking\"; then\n\t    shared_flag=$shared_flag' $wl-G'\n\t  fi\n\t  # Need to ensure runtime linking is disabled for the traditional\n\t  # shared library, or the linker may eventually find shared libraries\n\t  # /with/ Import File - we do not want to mix them.\n\t  shared_flag_aix='-shared'\n\t  shared_flag_svr4='-shared $wl-G'\n        else\n          # not using gcc\n          if test ia64 = \"$host_cpu\"; then\n\t  # VisualAge C++, Version 5.5 for AIX 5L for IA-64, Beta 3 Release\n\t  # chokes on -Wl,-G. The following line is correct:\n\t  shared_flag='-G'\n          else\n\t    if test yes = \"$aix_use_runtimelinking\"; then\n\t      shared_flag='$wl-G'\n\t    else\n\t      shared_flag='$wl-bM:SRE'\n\t    fi\n\t    shared_flag_aix='$wl-bM:SRE'\n\t    shared_flag_svr4='$wl-G'\n          fi\n        fi\n\n        _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-bexpall'\n        # It seems that -bexpall does not export symbols beginning with\n        # underscore (_), so it is better to generate a list of symbols to\n\t# export.\n        _LT_TAGVAR(always_export_symbols, $1)=yes\n\tif test aix,yes = \"$with_aix_soname,$aix_use_runtimelinking\"; then\n          # Warning - without using the other runtime loading flags (-brtl),\n          # -berok will link without error, but may produce a broken library.\n          # The \"-G\" linker flag allows undefined symbols.\n          _LT_TAGVAR(no_undefined_flag, $1)='-bernotok'\n          # Determine the default libpath from the value encoded in an empty\n          # executable.\n          _LT_SYS_MODULE_PATH_AIX([$1])\n          _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-blibpath:$libdir:'\"$aix_libpath\"\n\n          _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $deplibs $wl'$no_entry_flag' $compiler_flags `if test -n \"$allow_undefined_flag\"; then func_echo_all \"$wl$allow_undefined_flag\"; else :; fi` $wl'$exp_sym_flag:\\$export_symbols' '$shared_flag\n        else\n          if test ia64 = \"$host_cpu\"; then\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-R $libdir:/usr/lib:/lib'\n\t    _LT_TAGVAR(allow_undefined_flag, $1)=\"-z nodefs\"\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"\\$CC $shared_flag\"' -o $output_objdir/$soname $libobjs $deplibs '\"\\$wl$no_entry_flag\"' $compiler_flags $wl$allow_undefined_flag '\"\\$wl$exp_sym_flag:\\$export_symbols\"\n          else\n\t    # Determine the default libpath from the value encoded in an\n\t    # empty executable.\n\t    _LT_SYS_MODULE_PATH_AIX([$1])\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-blibpath:$libdir:'\"$aix_libpath\"\n\t    # Warning - without using the other run time loading flags,\n\t    # -berok will link without error, but may produce a broken library.\n\t    _LT_TAGVAR(no_undefined_flag, $1)=' $wl-bernotok'\n\t    _LT_TAGVAR(allow_undefined_flag, $1)=' $wl-berok'\n\t    if test yes = \"$with_gnu_ld\"; then\n\t      # We only use this code for GNU lds that support --whole-archive.\n\t      _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive$convenience $wl--no-whole-archive'\n\t    else\n\t      # Exported symbols can be pulled into shared objects from archives\n\t      _LT_TAGVAR(whole_archive_flag_spec, $1)='$convenience'\n\t    fi\n\t    _LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$RM -r $output_objdir/$realname.d~$MKDIR $output_objdir/$realname.d'\n\t    # -brtl affects multiple linker settings, -berok does not and is overridden later\n\t    compiler_flags_filtered='`func_echo_all \"$compiler_flags \" | $SED -e \"s%-brtl\\\\([[, ]]\\\\)%-berok\\\\1%g\"`'\n\t    if test svr4 != \"$with_aix_soname\"; then\n\t      # This is similar to how AIX traditionally builds its shared\n\t      # libraries. Need -bnortl late, we may have -brtl in LDFLAGS.\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$CC '$shared_flag_aix' -o $output_objdir/$realname.d/$soname $libobjs $deplibs $wl-bnoentry '$compiler_flags_filtered'$wl-bE:$export_symbols$allow_undefined_flag~$AR $AR_FLAGS $output_objdir/$libname$release.a $output_objdir/$realname.d/$soname'\n\t    fi\n\t    if test aix != \"$with_aix_soname\"; then\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$CC '$shared_flag_svr4' -o $output_objdir/$realname.d/$shared_archive_member_spec.o $libobjs $deplibs $wl-bnoentry '$compiler_flags_filtered'$wl-bE:$export_symbols$allow_undefined_flag~$STRIP -e $output_objdir/$realname.d/$shared_archive_member_spec.o~( func_echo_all \"#! $soname($shared_archive_member_spec.o)\"; if test shr_64 = \"$shared_archive_member_spec\"; then func_echo_all \"# 64\"; else func_echo_all \"# 32\"; fi; cat $export_symbols ) > $output_objdir/$realname.d/$shared_archive_member_spec.imp~$AR $AR_FLAGS $output_objdir/$soname $output_objdir/$realname.d/$shared_archive_member_spec.o $output_objdir/$realname.d/$shared_archive_member_spec.imp'\n\t    else\n\t      # used by -dlpreopen to get the symbols\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$MV  $output_objdir/$realname.d/$soname $output_objdir'\n\t    fi\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$RM -r $output_objdir/$realname.d'\n          fi\n        fi\n        ;;\n\n      beos*)\n\tif $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t  # Joseph Beckenbach <jrb3@best.com> says some releases of gcc\n\t  # support --undefined.  This deserves some investigation.  FIXME\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -nostart $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\telse\n\t  _LT_TAGVAR(ld_shlibs, $1)=no\n\tfi\n\t;;\n\n      chorus*)\n        case $cc_basename in\n          *)\n\t  # FIXME: insert proper C++ library support\n\t  _LT_TAGVAR(ld_shlibs, $1)=no\n\t  ;;\n        esac\n        ;;\n\n      cygwin* | mingw* | pw32* | cegcc*)\n\tcase $GXX,$cc_basename in\n\t,cl* | no,cl*)\n\t  # Native MSVC\n\t  # hardcode_libdir_flag_spec is actually meaningless, as there is\n\t  # no search path for DLLs.\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)=' '\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t  _LT_TAGVAR(always_export_symbols, $1)=yes\n\t  _LT_TAGVAR(file_list_spec, $1)='@'\n\t  # Tell ltmain to make .lib files, not .a files.\n\t  libext=lib\n\t  # Tell ltmain to make .dll files, not .so files.\n\t  shrext_cmds=.dll\n\t  # FIXME: Setting linknames here is a bad hack.\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $compiler_flags $deplibs -Wl,-DLL,-IMPLIB:\"$tool_output_objdir$libname.dll.lib\"~linknames='\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='if _LT_DLL_DEF_P([$export_symbols]); then\n              cp \"$export_symbols\" \"$output_objdir/$soname.def\";\n              echo \"$tool_output_objdir$soname.def\" > \"$output_objdir/$soname.exp\";\n            else\n              $SED -e '\\''s/^/-link -EXPORT:/'\\'' < $export_symbols > $output_objdir/$soname.exp;\n            fi~\n            $CC -o $tool_output_objdir$soname $libobjs $compiler_flags $deplibs \"@$tool_output_objdir$soname.exp\" -Wl,-DLL,-IMPLIB:\"$tool_output_objdir$libname.dll.lib\"~\n            linknames='\n\t  # The linker will not automatically build a static lib if we build a DLL.\n\t  # _LT_TAGVAR(old_archive_from_new_cmds, $1)='true'\n\t  _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\t  # Don't use ranlib\n\t  _LT_TAGVAR(old_postinstall_cmds, $1)='chmod 644 $oldlib'\n\t  _LT_TAGVAR(postlink_cmds, $1)='lt_outputfile=\"@OUTPUT@\"~\n            lt_tool_outputfile=\"@TOOL_OUTPUT@\"~\n            case $lt_outputfile in\n              *.exe|*.EXE) ;;\n              *)\n                lt_outputfile=$lt_outputfile.exe\n                lt_tool_outputfile=$lt_tool_outputfile.exe\n                ;;\n            esac~\n            func_to_tool_file \"$lt_outputfile\"~\n            if test : != \"$MANIFEST_TOOL\" && test -f \"$lt_outputfile.manifest\"; then\n              $MANIFEST_TOOL -manifest \"$lt_tool_outputfile.manifest\" -outputresource:\"$lt_tool_outputfile\" || exit 1;\n              $RM \"$lt_outputfile.manifest\";\n            fi'\n\t  ;;\n\t*)\n\t  # g++\n\t  # _LT_TAGVAR(hardcode_libdir_flag_spec, $1) is actually meaningless,\n\t  # as there is no search path for DLLs.\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-all-symbols'\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t  _LT_TAGVAR(always_export_symbols, $1)=no\n\t  _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\n\t  if $LD --help 2>&1 | $GREP 'auto-import' > /dev/null; then\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $output_objdir/$soname $wl--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n\t    # If the export-symbols file already is a .def file, use it as\n\t    # is; otherwise, prepend EXPORTS...\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='if _LT_DLL_DEF_P([$export_symbols]); then\n              cp $export_symbols $output_objdir/$soname.def;\n            else\n              echo EXPORTS > $output_objdir/$soname.def;\n              cat $export_symbols >> $output_objdir/$soname.def;\n            fi~\n            $CC -shared -nostdlib $output_objdir/$soname.def $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $output_objdir/$soname $wl--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n\t  else\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t  fi\n\t  ;;\n\tesac\n\t;;\n      darwin* | rhapsody*)\n        _LT_DARWIN_LINKER_FEATURES($1)\n\t;;\n\n      os2*)\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t_LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t_LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\tshrext_cmds=.dll\n\t_LT_TAGVAR(archive_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t  $ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t  $ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t  $ECHO EXPORTS >> $output_objdir/$libname.def~\n\t  emxexp $libobjs | $SED /\"_DLL_InitTerm\"/d >> $output_objdir/$libname.def~\n\t  $CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\t  emximp -o $lib $output_objdir/$libname.def'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t  $ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t  $ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t  $ECHO EXPORTS >> $output_objdir/$libname.def~\n\t  prefix_cmds=\"$SED\"~\n\t  if test EXPORTS = \"`$SED 1q $export_symbols`\"; then\n\t    prefix_cmds=\"$prefix_cmds -e 1d\";\n\t  fi~\n\t  prefix_cmds=\"$prefix_cmds -e \\\"s/^\\(.*\\)$/_\\1/g\\\"\"~\n\t  cat $export_symbols | $prefix_cmds >> $output_objdir/$libname.def~\n\t  $CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\t  emximp -o $lib $output_objdir/$libname.def'\n\t_LT_TAGVAR(old_archive_From_new_cmds, $1)='emximp -o $output_objdir/${libname}_dll.a $output_objdir/$libname.def'\n\t_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\t;;\n\n      dgux*)\n        case $cc_basename in\n          ec++*)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          ghcx*)\n\t    # Green Hills C++ Compiler\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n        esac\n        ;;\n\n      freebsd2.*)\n        # C++ shared libraries reported to be fairly broken before\n\t# switch to ELF\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n\n      freebsd-elf*)\n        _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n        ;;\n\n      freebsd* | dragonfly*)\n        # FreeBSD 3 and later use GNU C++ and GNU ld with standard ELF\n        # conventions\n        _LT_TAGVAR(ld_shlibs, $1)=yes\n        ;;\n\n      haiku*)\n        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n        _LT_TAGVAR(link_all_deplibs, $1)=yes\n        ;;\n\n      hpux9*)\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl+b $wl$libdir'\n        _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n        _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n        _LT_TAGVAR(hardcode_direct, $1)=yes\n        _LT_TAGVAR(hardcode_minus_L, $1)=yes # Not in the search PATH,\n\t\t\t\t             # but as the default\n\t\t\t\t             # location of the library.\n\n        case $cc_basename in\n          CC*)\n            # FIXME: insert proper C++ library support\n            _LT_TAGVAR(ld_shlibs, $1)=no\n            ;;\n          aCC*)\n            _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$CC -b $wl+b $wl$install_libdir -o $output_objdir/$soname $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~test \"x$output_objdir/$soname\" = \"x$lib\" || mv $output_objdir/$soname $lib'\n            # Commands to make compiler produce verbose output that lists\n            # what \"hidden\" libraries, object files and flags are used when\n            # linking a shared library.\n            #\n            # There doesn't appear to be a way to prevent this compiler from\n            # explicitly linking system object files so we need to strip them\n            # from the output so that they don't get included in the library\n            # dependencies.\n            output_verbose_link_cmd='templist=`($CC -b $CFLAGS -v conftest.$objext 2>&1) | $EGREP \"\\-L\"`; list= ; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n            ;;\n          *)\n            if test yes = \"$GXX\"; then\n              _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$CC -shared -nostdlib $pic_flag $wl+b $wl$install_libdir -o $output_objdir/$soname $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~test \"x$output_objdir/$soname\" = \"x$lib\" || mv $output_objdir/$soname $lib'\n            else\n              # FIXME: insert proper C++ library support\n              _LT_TAGVAR(ld_shlibs, $1)=no\n            fi\n            ;;\n        esac\n        ;;\n\n      hpux10*|hpux11*)\n        if test no = \"$with_gnu_ld\"; then\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl+b $wl$libdir'\n\t  _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n          case $host_cpu in\n            hppa*64*|ia64*)\n              ;;\n            *)\n\t      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n              ;;\n          esac\n        fi\n        case $host_cpu in\n          hppa*64*|ia64*)\n            _LT_TAGVAR(hardcode_direct, $1)=no\n            _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n            ;;\n          *)\n            _LT_TAGVAR(hardcode_direct, $1)=yes\n            _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n            _LT_TAGVAR(hardcode_minus_L, $1)=yes # Not in the search PATH,\n\t\t\t\t\t         # but as the default\n\t\t\t\t\t         # location of the library.\n            ;;\n        esac\n\n        case $cc_basename in\n          CC*)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          aCC*)\n\t    case $host_cpu in\n\t      hppa*64*)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t        ;;\n\t      ia64*)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname $wl+nodefaultrpath -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t        ;;\n\t      *)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t        ;;\n\t    esac\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`($CC -b $CFLAGS -v conftest.$objext 2>&1) | $GREP \"\\-L\"`; list= ; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n\t    ;;\n          *)\n\t    if test yes = \"$GXX\"; then\n\t      if test no = \"$with_gnu_ld\"; then\n\t        case $host_cpu in\n\t          hppa*64*)\n\t            _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib -fPIC $wl+h $wl$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t            ;;\n\t          ia64*)\n\t            _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $pic_flag $wl+h $wl$soname $wl+nodefaultrpath -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t            ;;\n\t          *)\n\t            _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $pic_flag $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t            ;;\n\t        esac\n\t      fi\n\t    else\n\t      # FIXME: insert proper C++ library support\n\t      _LT_TAGVAR(ld_shlibs, $1)=no\n\t    fi\n\t    ;;\n        esac\n        ;;\n\n      interix[[3-9]]*)\n\t_LT_TAGVAR(hardcode_direct, $1)=no\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n\t# Hack: On Interix 3.x, we cannot compile PIC because of a broken gcc.\n\t# Instead, shared libraries are loaded at an image base (0x10000000 by\n\t# default) and relocated if they conflict, which is a slow very memory\n\t# consuming and fragmenting process.  To avoid this, we pick a random,\n\t# 256 KiB-aligned image base between 0x50000000 and 0x6FFC0000 at link\n\t# time.  Moving up from 0x10000000 also allows more sbrk(2) space.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-h,$soname $wl--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='sed \"s|^|_|\" $export_symbols >$output_objdir/$soname.expsym~$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-h,$soname $wl--retain-symbols-file,$output_objdir/$soname.expsym $wl--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n\t;;\n      irix5* | irix6*)\n        case $cc_basename in\n          CC*)\n\t    # SGI C++\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared -all -multigot $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n\n\t    # Archives containing C++ object files must be created using\n\t    # \"CC -ar\", where \"CC\" is the IRIX C++ compiler.  This is\n\t    # necessary to make sure instantiated templates are included\n\t    # in the archive.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -ar -WR,-u -o $oldlib $oldobjs'\n\t    ;;\n          *)\n\t    if test yes = \"$GXX\"; then\n\t      if test no = \"$with_gnu_ld\"; then\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n\t      else\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` -o $lib'\n\t      fi\n\t    fi\n\t    _LT_TAGVAR(link_all_deplibs, $1)=yes\n\t    ;;\n        esac\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n        _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n        _LT_TAGVAR(inherit_rpath, $1)=yes\n        ;;\n\n      linux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n        case $cc_basename in\n          KCC*)\n\t    # Kuck and Associates, Inc. (KAI) C++ Compiler\n\n\t    # KCC will only create a shared library if the output file\n\t    # ends with \".so\" (or \".sl\" for HP-UX), so rename the library\n\t    # to its proper name (with version) after linking.\n\t    _LT_TAGVAR(archive_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\\''s/\\([[^()0-9A-Za-z{}]]\\)/\\\\\\\\\\1/g'\\''`; templib=`echo $lib | $SED -e \"s/\\$tempext\\..*/.so/\"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \\$templib; mv \\$templib $lib'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\\''s/\\([[^()0-9A-Za-z{}]]\\)/\\\\\\\\\\1/g'\\''`; templib=`echo $lib | $SED -e \"s/\\$tempext\\..*/.so/\"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \\$templib $wl-retain-symbols-file,$export_symbols; mv \\$templib $lib'\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`$CC $CFLAGS -v conftest.$objext -o libconftest$shared_ext 2>&1 | $GREP \"ld\"`; rm -f libconftest$shared_ext; list= ; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n\n\t    # Archives containing C++ object files must be created using\n\t    # \"CC -Bstatic\", where \"CC\" is the KAI C++ compiler.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -Bstatic -o $oldlib $oldobjs'\n\t    ;;\n\t  icpc* | ecpc* )\n\t    # Intel C++\n\t    with_gnu_ld=yes\n\t    # version 8.0 and above of icpc choke on multiply defined symbols\n\t    # if we add $predep_objects and $postdep_objects, however 7.1 and\n\t    # earlier do not add the objects themselves.\n\t    case `$CC -V 2>&1` in\n\t      *\"Version 7.\"*)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname -o $lib'\n\t\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\t\t;;\n\t      *)  # Version 8.0 or newer\n\t        tmp_idyn=\n\t        case $host_cpu in\n\t\t  ia64*) tmp_idyn=' -i_dynamic';;\n\t\tesac\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared'\"$tmp_idyn\"' $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared'\"$tmp_idyn\"' $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\t\t;;\n\t    esac\n\t    _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive$convenience $wl--no-whole-archive'\n\t    ;;\n          pgCC* | pgcpp*)\n            # Portland Group C++ compiler\n\t    case `$CC -V` in\n\t    *pgCC\\ [[1-5]].* | *pgcpp\\ [[1-5]].*)\n\t      _LT_TAGVAR(prelink_cmds, $1)='tpldir=Template.dir~\n               rm -rf $tpldir~\n               $CC --prelink_objects --instantiation_dir $tpldir $objs $libobjs $compile_deplibs~\n               compile_command=\"$compile_command `find $tpldir -name \\*.o | sort | $NL2SP`\"'\n\t      _LT_TAGVAR(old_archive_cmds, $1)='tpldir=Template.dir~\n                rm -rf $tpldir~\n                $CC --prelink_objects --instantiation_dir $tpldir $oldobjs$old_deplibs~\n                $AR $AR_FLAGS $oldlib$oldobjs$old_deplibs `find $tpldir -name \\*.o | sort | $NL2SP`~\n                $RANLIB $oldlib'\n\t      _LT_TAGVAR(archive_cmds, $1)='tpldir=Template.dir~\n                rm -rf $tpldir~\n                $CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n                $CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags $wl-soname $wl$soname -o $lib'\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='tpldir=Template.dir~\n                rm -rf $tpldir~\n                $CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n                $CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\t      ;;\n\t    *) # Version 6 and above use weak symbols\n\t      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname -o $lib'\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\t      ;;\n\t    esac\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl--rpath $wl$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n            ;;\n\t  cxx*)\n\t    # Compaq C++\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname -o $lib'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname  -o $lib $wl-retain-symbols-file $wl$export_symbols'\n\n\t    runpath_var=LD_RUN_PATH\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-rpath $libdir'\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP \"ld\"`; templist=`func_echo_all \"$templist\" | $SED \"s/\\(^.*ld.*\\)\\( .*ld .*$\\)/\\1/\"`; list= ; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"X$list\" | $Xsed'\n\t    ;;\n\t  xl* | mpixl* | bgxl*)\n\t    # IBM XL 8.0 on PPC, with GNU ld\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -qmkshrobj $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t    if test yes = \"$supports_anon_versioning\"; then\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $output_objdir/$libname.ver~\n                cat $export_symbols | sed -e \"s/\\(.*\\)/\\1;/\" >> $output_objdir/$libname.ver~\n                echo \"local: *; };\" >> $output_objdir/$libname.ver~\n                $CC -qmkshrobj $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-version-script $wl$output_objdir/$libname.ver -o $lib'\n\t    fi\n\t    ;;\n\t  *)\n\t    case `$CC -V 2>&1 | sed 5q` in\n\t    *Sun\\ C*)\n\t      # Sun C++ 5.9\n\t      _LT_TAGVAR(no_undefined_flag, $1)=' -zdefs'\n\t      _LT_TAGVAR(archive_cmds, $1)='$CC -G$allow_undefined_flag -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G$allow_undefined_flag -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-retain-symbols-file $wl$export_symbols'\n\t      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t      _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`new_convenience=; for conv in $convenience\\\"\\\"; do test -z \\\"$conv\\\" || new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t      _LT_TAGVAR(compiler_needs_object, $1)=yes\n\n\t      # Not sure whether something based on\n\t      # $CC $CFLAGS -v conftest.$objext -o libconftest$shared_ext 2>&1\n\t      # would be better.\n\t      output_verbose_link_cmd='func_echo_all'\n\n\t      # Archives containing C++ object files must be created using\n\t      # \"CC -xar\", where \"CC\" is the Sun C++ compiler.  This is\n\t      # necessary to make sure instantiated templates are included\n\t      # in the archive.\n\t      _LT_TAGVAR(old_archive_cmds, $1)='$CC -xar -o $oldlib $oldobjs'\n\t      ;;\n\t    esac\n\t    ;;\n\tesac\n\t;;\n\n      lynxos*)\n        # FIXME: insert proper C++ library support\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\t;;\n\n      m88k*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n\t;;\n\n      mvs*)\n        case $cc_basename in\n          cxx*)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n\t  *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n\tesac\n\t;;\n\n      netbsd*)\n        if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable  -o $lib $predep_objects $libobjs $deplibs $postdep_objects $linker_flags'\n\t  wlarc=\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes\n\t  _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\tfi\n\t# Workaround some broken pre-1.5 toolchains\n\toutput_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP conftest.$objext | $SED -e \"s:-lgcc -lc -lgcc::\"'\n\t;;\n\n      *nto* | *qnx*)\n        _LT_TAGVAR(ld_shlibs, $1)=yes\n\t;;\n\n      openbsd* | bitrig*)\n\tif test -f /usr/libexec/ld.so; then\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes\n\t  _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t  _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $lib'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t  if test -z \"`echo __ELF__ | $CC -E - | grep __ELF__`\"; then\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-retain-symbols-file,$export_symbols -o $lib'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)=$wlarc'--whole-archive$convenience '$wlarc'--no-whole-archive'\n\t  fi\n\t  output_verbose_link_cmd=func_echo_all\n\telse\n\t  _LT_TAGVAR(ld_shlibs, $1)=no\n\tfi\n\t;;\n\n      osf3* | osf4* | osf5*)\n        case $cc_basename in\n          KCC*)\n\t    # Kuck and Associates, Inc. (KAI) C++ Compiler\n\n\t    # KCC will only create a shared library if the output file\n\t    # ends with \".so\" (or \".sl\" for HP-UX), so rename the library\n\t    # to its proper name (with version) after linking.\n\t    _LT_TAGVAR(archive_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\\''s/\\([[^()0-9A-Za-z{}]]\\)/\\\\\\\\\\1/g'\\''`; templib=`echo \"$lib\" | $SED -e \"s/\\$tempext\\..*/.so/\"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \\$templib; mv \\$templib $lib'\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t    # Archives containing C++ object files must be created using\n\t    # the KAI C++ compiler.\n\t    case $host in\n\t      osf3*) _LT_TAGVAR(old_archive_cmds, $1)='$CC -Bstatic -o $oldlib $oldobjs' ;;\n\t      *) _LT_TAGVAR(old_archive_cmds, $1)='$CC -o $oldlib $oldobjs' ;;\n\t    esac\n\t    ;;\n          RCC*)\n\t    # Rational C++ 2.4.1\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          cxx*)\n\t    case $host in\n\t      osf3*)\n\t        _LT_TAGVAR(allow_undefined_flag, $1)=' $wl-expect_unresolved $wl\\*'\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n\t        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t\t;;\n\t      *)\n\t        _LT_TAGVAR(allow_undefined_flag, $1)=' -expect_unresolved \\*'\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -msym -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n\t        _LT_TAGVAR(archive_expsym_cmds, $1)='for i in `cat $export_symbols`; do printf \"%s %s\\\\n\" -exported_symbol \"\\$i\" >> $lib.exp; done~\n                  echo \"-hidden\">> $lib.exp~\n                  $CC -shared$allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -msym -soname $soname $wl-input $wl$lib.exp  `test -n \"$verstring\" && $ECHO \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib~\n                  $RM $lib.exp'\n\t        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-rpath $libdir'\n\t\t;;\n\t    esac\n\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP \"ld\" | $GREP -v \"ld:\"`; templist=`func_echo_all \"$templist\" | $SED \"s/\\(^.*ld.*\\)\\( .*ld.*$\\)/\\1/\"`; list= ; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n\t    ;;\n\t  *)\n\t    if test yes,no = \"$GXX,$with_gnu_ld\"; then\n\t      _LT_TAGVAR(allow_undefined_flag, $1)=' $wl-expect_unresolved $wl\\*'\n\t      case $host in\n\t        osf3*)\n\t          _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n\t\t  ;;\n\t        *)\n\t          _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib $allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-msym $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n\t\t  ;;\n\t      esac\n\n\t      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t      # Commands to make compiler produce verbose output that lists\n\t      # what \"hidden\" libraries, object files and flags are used when\n\t      # linking a shared library.\n\t      output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\n\t    else\n\t      # FIXME: insert proper C++ library support\n\t      _LT_TAGVAR(ld_shlibs, $1)=no\n\t    fi\n\t    ;;\n        esac\n        ;;\n\n      psos*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n\n      sunos4*)\n        case $cc_basename in\n          CC*)\n\t    # Sun C++ 4.x\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          lcc*)\n\t    # Lucid\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n        esac\n        ;;\n\n      solaris*)\n        case $cc_basename in\n          CC* | sunCC*)\n\t    # Sun C++ 4.2, 5.x and Centerline C++\n            _LT_TAGVAR(archive_cmds_need_lc,$1)=yes\n\t    _LT_TAGVAR(no_undefined_flag, $1)=' -zdefs'\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -G$allow_undefined_flag -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n              $CC -G$allow_undefined_flag $wl-M $wl$lib.exp -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$RM $lib.exp'\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t    _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t    case $host_os in\n\t      solaris2.[[0-5]] | solaris2.[[0-5]].*) ;;\n\t      *)\n\t\t# The compiler driver will combine and reorder linker options,\n\t\t# but understands '-z linker_flag'.\n\t        # Supported since Solaris 2.6 (maybe 2.5.1?)\n\t\t_LT_TAGVAR(whole_archive_flag_spec, $1)='-z allextract$convenience -z defaultextract'\n\t        ;;\n\t    esac\n\t    _LT_TAGVAR(link_all_deplibs, $1)=yes\n\n\t    output_verbose_link_cmd='func_echo_all'\n\n\t    # Archives containing C++ object files must be created using\n\t    # \"CC -xar\", where \"CC\" is the Sun C++ compiler.  This is\n\t    # necessary to make sure instantiated templates are included\n\t    # in the archive.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -xar -o $oldlib $oldobjs'\n\t    ;;\n          gcx*)\n\t    # Green Hills C++ Compiler\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-h $wl$soname -o $lib'\n\n\t    # The C++ compiler must be used to create the archive.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC $LDFLAGS -archive -o $oldlib $oldobjs'\n\t    ;;\n          *)\n\t    # GNU C++ compiler with Solaris linker\n\t    if test yes,no = \"$GXX,$with_gnu_ld\"; then\n\t      _LT_TAGVAR(no_undefined_flag, $1)=' $wl-z ${wl}defs'\n\t      if $CC --version | $GREP -v '^2\\.7' > /dev/null; then\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-h $wl$soname -o $lib'\n\t        _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n                  $CC -shared $pic_flag -nostdlib $wl-M $wl$lib.exp $wl-h $wl$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$RM $lib.exp'\n\n\t        # Commands to make compiler produce verbose output that lists\n\t        # what \"hidden\" libraries, object files and flags are used when\n\t        # linking a shared library.\n\t        output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\t      else\n\t        # g++ 2.7 appears to require '-G' NOT '-shared' on this\n\t        # platform.\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -G -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-h $wl$soname -o $lib'\n\t        _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n                  $CC -G -nostdlib $wl-M $wl$lib.exp $wl-h $wl$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$RM $lib.exp'\n\n\t        # Commands to make compiler produce verbose output that lists\n\t        # what \"hidden\" libraries, object files and flags are used when\n\t        # linking a shared library.\n\t        output_verbose_link_cmd='$CC -G $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\t      fi\n\n\t      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-R $wl$libdir'\n\t      case $host_os in\n\t\tsolaris2.[[0-5]] | solaris2.[[0-5]].*) ;;\n\t\t*)\n\t\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl-z ${wl}allextract$convenience $wl-z ${wl}defaultextract'\n\t\t  ;;\n\t      esac\n\t    fi\n\t    ;;\n        esac\n        ;;\n\n    sysv4*uw2* | sysv5OpenUNIX* | sysv5UnixWare7.[[01]].[[10]]* | unixware7* | sco3.2v5.0.[[024]]*)\n      _LT_TAGVAR(no_undefined_flag, $1)='$wl-z,text'\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      runpath_var='LD_RUN_PATH'\n\n      case $cc_basename in\n        CC*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -G $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\t*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n      esac\n      ;;\n\n      sysv5* | sco3.2v5* | sco5v6*)\n\t# Note: We CANNOT use -z defs as we might desire, because we do not\n\t# link with -lc, and that would cause any symbols used from libc to\n\t# always be unresolved, which means just about no library would\n\t# ever link correctly.  If we're not using GNU ld we use -z text\n\t# though, which does catch some bad symbols but isn't as heavy-handed\n\t# as -z defs.\n\t_LT_TAGVAR(no_undefined_flag, $1)='$wl-z,text'\n\t_LT_TAGVAR(allow_undefined_flag, $1)='$wl-z,nodefs'\n\t_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-R,$libdir'\n\t_LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n\t_LT_TAGVAR(link_all_deplibs, $1)=yes\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-Bexport'\n\trunpath_var='LD_RUN_PATH'\n\n\tcase $cc_basename in\n          CC*)\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -G $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -Tprelink_objects $oldobjs~\n              '\"$_LT_TAGVAR(old_archive_cmds, $1)\"\n\t    _LT_TAGVAR(reload_cmds, $1)='$CC -Tprelink_objects $reload_objs~\n              '\"$_LT_TAGVAR(reload_cmds, $1)\"\n\t    ;;\n\t  *)\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    ;;\n\tesac\n      ;;\n\n      tandem*)\n        case $cc_basename in\n          NCC*)\n\t    # NonStop-UX NCC 3.20\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n        esac\n        ;;\n\n      vxworks*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n\n      *)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n    esac\n\n    AC_MSG_RESULT([$_LT_TAGVAR(ld_shlibs, $1)])\n    test no = \"$_LT_TAGVAR(ld_shlibs, $1)\" && can_build_shared=no\n\n    _LT_TAGVAR(GCC, $1)=$GXX\n    _LT_TAGVAR(LD, $1)=$LD\n\n    ## CAVEAT EMPTOR:\n    ## There is no encapsulation within the following macros, do not change\n    ## the running order or otherwise move them around unless you know exactly\n    ## what you are doing...\n    _LT_SYS_HIDDEN_LIBDEPS($1)\n    _LT_COMPILER_PIC($1)\n    _LT_COMPILER_C_O($1)\n    _LT_COMPILER_FILE_LOCKS($1)\n    _LT_LINKER_SHLIBS($1)\n    _LT_SYS_DYNAMIC_LINKER($1)\n    _LT_LINKER_HARDCODE_LIBPATH($1)\n\n    _LT_CONFIG($1)\n  fi # test -n \"$compiler\"\n\n  CC=$lt_save_CC\n  CFLAGS=$lt_save_CFLAGS\n  LDCXX=$LD\n  LD=$lt_save_LD\n  GCC=$lt_save_GCC\n  with_gnu_ld=$lt_save_with_gnu_ld\n  lt_cv_path_LDCXX=$lt_cv_path_LD\n  lt_cv_path_LD=$lt_save_path_LD\n  lt_cv_prog_gnu_ldcxx=$lt_cv_prog_gnu_ld\n  lt_cv_prog_gnu_ld=$lt_save_with_gnu_ld\nfi # test yes != \"$_lt_caught_CXX_error\"\n\nAC_LANG_POP\n])# _LT_LANG_CXX_CONFIG\n\n\n# _LT_FUNC_STRIPNAME_CNF\n# ----------------------\n# func_stripname_cnf prefix suffix name\n# strip PREFIX and SUFFIX off of NAME.\n# PREFIX and SUFFIX must not contain globbing or regex special\n# characters, hashes, percent signs, but SUFFIX may contain a leading\n# dot (in which case that matches only a dot).\n#\n# This function is identical to the (non-XSI) version of func_stripname,\n# except this one can be used by m4 code that may be executed by configure,\n# rather than the libtool script.\nm4_defun([_LT_FUNC_STRIPNAME_CNF],[dnl\nAC_REQUIRE([_LT_DECL_SED])\nAC_REQUIRE([_LT_PROG_ECHO_BACKSLASH])\nfunc_stripname_cnf ()\n{\n  case @S|@2 in\n  .*) func_stripname_result=`$ECHO \"@S|@3\" | $SED \"s%^@S|@1%%; s%\\\\\\\\@S|@2\\$%%\"`;;\n  *)  func_stripname_result=`$ECHO \"@S|@3\" | $SED \"s%^@S|@1%%; s%@S|@2\\$%%\"`;;\n  esac\n} # func_stripname_cnf\n])# _LT_FUNC_STRIPNAME_CNF\n\n\n# _LT_SYS_HIDDEN_LIBDEPS([TAGNAME])\n# ---------------------------------\n# Figure out \"hidden\" library dependencies from verbose\n# compiler output when linking a shared library.\n# Parse the compiler output and extract the necessary\n# objects, libraries and library flags.\nm4_defun([_LT_SYS_HIDDEN_LIBDEPS],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nAC_REQUIRE([_LT_FUNC_STRIPNAME_CNF])dnl\n# Dependencies to place before and after the object being linked:\n_LT_TAGVAR(predep_objects, $1)=\n_LT_TAGVAR(postdep_objects, $1)=\n_LT_TAGVAR(predeps, $1)=\n_LT_TAGVAR(postdeps, $1)=\n_LT_TAGVAR(compiler_lib_search_path, $1)=\n\ndnl we can't use the lt_simple_compile_test_code here,\ndnl because it contains code intended for an executable,\ndnl not a library.  It's possible we should let each\ndnl tag define a new lt_????_link_test_code variable,\ndnl but it's only used here...\nm4_if([$1], [], [cat > conftest.$ac_ext <<_LT_EOF\nint a;\nvoid foo (void) { a = 0; }\n_LT_EOF\n], [$1], [CXX], [cat > conftest.$ac_ext <<_LT_EOF\nclass Foo\n{\npublic:\n  Foo (void) { a = 0; }\nprivate:\n  int a;\n};\n_LT_EOF\n], [$1], [F77], [cat > conftest.$ac_ext <<_LT_EOF\n      subroutine foo\n      implicit none\n      integer*4 a\n      a=0\n      return\n      end\n_LT_EOF\n], [$1], [FC], [cat > conftest.$ac_ext <<_LT_EOF\n      subroutine foo\n      implicit none\n      integer a\n      a=0\n      return\n      end\n_LT_EOF\n], [$1], [GCJ], [cat > conftest.$ac_ext <<_LT_EOF\npublic class foo {\n  private int a;\n  public void bar (void) {\n    a = 0;\n  }\n};\n_LT_EOF\n], [$1], [GO], [cat > conftest.$ac_ext <<_LT_EOF\npackage foo\nfunc foo() {\n}\n_LT_EOF\n])\n\n_lt_libdeps_save_CFLAGS=$CFLAGS\ncase \"$CC $CFLAGS \" in #(\n*\\ -flto*\\ *) CFLAGS=\"$CFLAGS -fno-lto\" ;;\n*\\ -fwhopr*\\ *) CFLAGS=\"$CFLAGS -fno-whopr\" ;;\n*\\ -fuse-linker-plugin*\\ *) CFLAGS=\"$CFLAGS -fno-use-linker-plugin\" ;;\nesac\n\ndnl Parse the compiler output and extract the necessary\ndnl objects, libraries and library flags.\nif AC_TRY_EVAL(ac_compile); then\n  # Parse the compiler output and extract the necessary\n  # objects, libraries and library flags.\n\n  # Sentinel used to keep track of whether or not we are before\n  # the conftest object file.\n  pre_test_object_deps_done=no\n\n  for p in `eval \"$output_verbose_link_cmd\"`; do\n    case $prev$p in\n\n    -L* | -R* | -l*)\n       # Some compilers place space between \"-{L,R}\" and the path.\n       # Remove the space.\n       if test x-L = \"$p\" ||\n          test x-R = \"$p\"; then\n\t prev=$p\n\t continue\n       fi\n\n       # Expand the sysroot to ease extracting the directories later.\n       if test -z \"$prev\"; then\n         case $p in\n         -L*) func_stripname_cnf '-L' '' \"$p\"; prev=-L; p=$func_stripname_result ;;\n         -R*) func_stripname_cnf '-R' '' \"$p\"; prev=-R; p=$func_stripname_result ;;\n         -l*) func_stripname_cnf '-l' '' \"$p\"; prev=-l; p=$func_stripname_result ;;\n         esac\n       fi\n       case $p in\n       =*) func_stripname_cnf '=' '' \"$p\"; p=$lt_sysroot$func_stripname_result ;;\n       esac\n       if test no = \"$pre_test_object_deps_done\"; then\n\t case $prev in\n\t -L | -R)\n\t   # Internal compiler library paths should come after those\n\t   # provided the user.  The postdeps already come after the\n\t   # user supplied libs so there is no need to process them.\n\t   if test -z \"$_LT_TAGVAR(compiler_lib_search_path, $1)\"; then\n\t     _LT_TAGVAR(compiler_lib_search_path, $1)=$prev$p\n\t   else\n\t     _LT_TAGVAR(compiler_lib_search_path, $1)=\"${_LT_TAGVAR(compiler_lib_search_path, $1)} $prev$p\"\n\t   fi\n\t   ;;\n\t # The \"-l\" case would never come before the object being\n\t # linked, so don't bother handling this case.\n\t esac\n       else\n\t if test -z \"$_LT_TAGVAR(postdeps, $1)\"; then\n\t   _LT_TAGVAR(postdeps, $1)=$prev$p\n\t else\n\t   _LT_TAGVAR(postdeps, $1)=\"${_LT_TAGVAR(postdeps, $1)} $prev$p\"\n\t fi\n       fi\n       prev=\n       ;;\n\n    *.lto.$objext) ;; # Ignore GCC LTO objects\n    *.$objext)\n       # This assumes that the test object file only shows up\n       # once in the compiler output.\n       if test \"$p\" = \"conftest.$objext\"; then\n\t pre_test_object_deps_done=yes\n\t continue\n       fi\n\n       if test no = \"$pre_test_object_deps_done\"; then\n\t if test -z \"$_LT_TAGVAR(predep_objects, $1)\"; then\n\t   _LT_TAGVAR(predep_objects, $1)=$p\n\t else\n\t   _LT_TAGVAR(predep_objects, $1)=\"$_LT_TAGVAR(predep_objects, $1) $p\"\n\t fi\n       else\n\t if test -z \"$_LT_TAGVAR(postdep_objects, $1)\"; then\n\t   _LT_TAGVAR(postdep_objects, $1)=$p\n\t else\n\t   _LT_TAGVAR(postdep_objects, $1)=\"$_LT_TAGVAR(postdep_objects, $1) $p\"\n\t fi\n       fi\n       ;;\n\n    *) ;; # Ignore the rest.\n\n    esac\n  done\n\n  # Clean up.\n  rm -f a.out a.exe\nelse\n  echo \"libtool.m4: error: problem compiling $1 test program\"\nfi\n\n$RM -f confest.$objext\nCFLAGS=$_lt_libdeps_save_CFLAGS\n\n# PORTME: override above test on systems where it is broken\nm4_if([$1], [CXX],\n[case $host_os in\ninterix[[3-9]]*)\n  # Interix 3.5 installs completely hosed .la files for C++, so rather than\n  # hack all around it, let's just trust \"g++\" to DTRT.\n  _LT_TAGVAR(predep_objects,$1)=\n  _LT_TAGVAR(postdep_objects,$1)=\n  _LT_TAGVAR(postdeps,$1)=\n  ;;\nesac\n])\n\ncase \" $_LT_TAGVAR(postdeps, $1) \" in\n*\" -lc \"*) _LT_TAGVAR(archive_cmds_need_lc, $1)=no ;;\nesac\n _LT_TAGVAR(compiler_lib_search_dirs, $1)=\nif test -n \"${_LT_TAGVAR(compiler_lib_search_path, $1)}\"; then\n _LT_TAGVAR(compiler_lib_search_dirs, $1)=`echo \" ${_LT_TAGVAR(compiler_lib_search_path, $1)}\" | $SED -e 's! -L! !g' -e 's!^ !!'`\nfi\n_LT_TAGDECL([], [compiler_lib_search_dirs], [1],\n    [The directories searched by this compiler when creating a shared library])\n_LT_TAGDECL([], [predep_objects], [1],\n    [Dependencies to place before and after the objects being linked to\n    create a shared library])\n_LT_TAGDECL([], [postdep_objects], [1])\n_LT_TAGDECL([], [predeps], [1])\n_LT_TAGDECL([], [postdeps], [1])\n_LT_TAGDECL([], [compiler_lib_search_path], [1],\n    [The library search path used internally by the compiler when linking\n    a shared library])\n])# _LT_SYS_HIDDEN_LIBDEPS\n\n\n# _LT_LANG_F77_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for a Fortran 77 compiler are\n# suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_F77_CONFIG],\n[AC_LANG_PUSH(Fortran 77)\nif test -z \"$F77\" || test no = \"$F77\"; then\n  _lt_disable_F77=yes\nfi\n\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n_LT_TAGVAR(allow_undefined_flag, $1)=\n_LT_TAGVAR(always_export_symbols, $1)=no\n_LT_TAGVAR(archive_expsym_cmds, $1)=\n_LT_TAGVAR(export_dynamic_flag_spec, $1)=\n_LT_TAGVAR(hardcode_direct, $1)=no\n_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n_LT_TAGVAR(hardcode_libdir_separator, $1)=\n_LT_TAGVAR(hardcode_minus_L, $1)=no\n_LT_TAGVAR(hardcode_automatic, $1)=no\n_LT_TAGVAR(inherit_rpath, $1)=no\n_LT_TAGVAR(module_cmds, $1)=\n_LT_TAGVAR(module_expsym_cmds, $1)=\n_LT_TAGVAR(link_all_deplibs, $1)=unknown\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n_LT_TAGVAR(no_undefined_flag, $1)=\n_LT_TAGVAR(whole_archive_flag_spec, $1)=\n_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n\n# Source file extension for f77 test sources.\nac_ext=f\n\n# Object file extension for compiled f77 test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# No sense in running all these tests if we already determined that\n# the F77 compiler isn't working.  Some variables (like enable_shared)\n# are currently assumed to apply to all compilers on this platform,\n# and will be corrupted by setting them based on a non-working compiler.\nif test yes != \"$_lt_disable_F77\"; then\n  # Code to be used in simple compile tests\n  lt_simple_compile_test_code=\"\\\n      subroutine t\n      return\n      end\n\"\n\n  # Code to be used in simple link tests\n  lt_simple_link_test_code=\"\\\n      program t\n      end\n\"\n\n  # ltmain only uses $CC for tagged configurations so make sure $CC is set.\n  _LT_TAG_COMPILER\n\n  # save warnings/boilerplate of simple test code\n  _LT_COMPILER_BOILERPLATE\n  _LT_LINKER_BOILERPLATE\n\n  # Allow CC to be a program name with arguments.\n  lt_save_CC=$CC\n  lt_save_GCC=$GCC\n  lt_save_CFLAGS=$CFLAGS\n  CC=${F77-\"f77\"}\n  CFLAGS=$FFLAGS\n  compiler=$CC\n  _LT_TAGVAR(compiler, $1)=$CC\n  _LT_CC_BASENAME([$compiler])\n  GCC=$G77\n  if test -n \"$compiler\"; then\n    AC_MSG_CHECKING([if libtool supports shared libraries])\n    AC_MSG_RESULT([$can_build_shared])\n\n    AC_MSG_CHECKING([whether to build shared libraries])\n    test no = \"$can_build_shared\" && enable_shared=no\n\n    # On AIX, shared libraries and static libraries use the same namespace, and\n    # are all built from PIC.\n    case $host_os in\n      aix3*)\n        test yes = \"$enable_shared\" && enable_static=no\n        if test -n \"$RANLIB\"; then\n          archive_cmds=\"$archive_cmds~\\$RANLIB \\$lib\"\n          postinstall_cmds='$RANLIB $lib'\n        fi\n        ;;\n      aix[[4-9]]*)\n\tif test ia64 != \"$host_cpu\"; then\n\t  case $enable_shared,$with_aix_soname,$aix_use_runtimelinking in\n\t  yes,aix,yes) ;;\t\t# shared object as lib.so file only\n\t  yes,svr4,*) ;;\t\t# shared object as lib.so archive member only\n\t  yes,*) enable_static=no ;;\t# shared object in lib.a archive as well\n\t  esac\n\tfi\n        ;;\n    esac\n    AC_MSG_RESULT([$enable_shared])\n\n    AC_MSG_CHECKING([whether to build static libraries])\n    # Make sure either enable_shared or enable_static is yes.\n    test yes = \"$enable_shared\" || enable_static=yes\n    AC_MSG_RESULT([$enable_static])\n\n    _LT_TAGVAR(GCC, $1)=$G77\n    _LT_TAGVAR(LD, $1)=$LD\n\n    ## CAVEAT EMPTOR:\n    ## There is no encapsulation within the following macros, do not change\n    ## the running order or otherwise move them around unless you know exactly\n    ## what you are doing...\n    _LT_COMPILER_PIC($1)\n    _LT_COMPILER_C_O($1)\n    _LT_COMPILER_FILE_LOCKS($1)\n    _LT_LINKER_SHLIBS($1)\n    _LT_SYS_DYNAMIC_LINKER($1)\n    _LT_LINKER_HARDCODE_LIBPATH($1)\n\n    _LT_CONFIG($1)\n  fi # test -n \"$compiler\"\n\n  GCC=$lt_save_GCC\n  CC=$lt_save_CC\n  CFLAGS=$lt_save_CFLAGS\nfi # test yes != \"$_lt_disable_F77\"\n\nAC_LANG_POP\n])# _LT_LANG_F77_CONFIG\n\n\n# _LT_LANG_FC_CONFIG([TAG])\n# -------------------------\n# Ensure that the configuration variables for a Fortran compiler are\n# suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_FC_CONFIG],\n[AC_LANG_PUSH(Fortran)\n\nif test -z \"$FC\" || test no = \"$FC\"; then\n  _lt_disable_FC=yes\nfi\n\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n_LT_TAGVAR(allow_undefined_flag, $1)=\n_LT_TAGVAR(always_export_symbols, $1)=no\n_LT_TAGVAR(archive_expsym_cmds, $1)=\n_LT_TAGVAR(export_dynamic_flag_spec, $1)=\n_LT_TAGVAR(hardcode_direct, $1)=no\n_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n_LT_TAGVAR(hardcode_libdir_separator, $1)=\n_LT_TAGVAR(hardcode_minus_L, $1)=no\n_LT_TAGVAR(hardcode_automatic, $1)=no\n_LT_TAGVAR(inherit_rpath, $1)=no\n_LT_TAGVAR(module_cmds, $1)=\n_LT_TAGVAR(module_expsym_cmds, $1)=\n_LT_TAGVAR(link_all_deplibs, $1)=unknown\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n_LT_TAGVAR(no_undefined_flag, $1)=\n_LT_TAGVAR(whole_archive_flag_spec, $1)=\n_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n\n# Source file extension for fc test sources.\nac_ext=${ac_fc_srcext-f}\n\n# Object file extension for compiled fc test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# No sense in running all these tests if we already determined that\n# the FC compiler isn't working.  Some variables (like enable_shared)\n# are currently assumed to apply to all compilers on this platform,\n# and will be corrupted by setting them based on a non-working compiler.\nif test yes != \"$_lt_disable_FC\"; then\n  # Code to be used in simple compile tests\n  lt_simple_compile_test_code=\"\\\n      subroutine t\n      return\n      end\n\"\n\n  # Code to be used in simple link tests\n  lt_simple_link_test_code=\"\\\n      program t\n      end\n\"\n\n  # ltmain only uses $CC for tagged configurations so make sure $CC is set.\n  _LT_TAG_COMPILER\n\n  # save warnings/boilerplate of simple test code\n  _LT_COMPILER_BOILERPLATE\n  _LT_LINKER_BOILERPLATE\n\n  # Allow CC to be a program name with arguments.\n  lt_save_CC=$CC\n  lt_save_GCC=$GCC\n  lt_save_CFLAGS=$CFLAGS\n  CC=${FC-\"f95\"}\n  CFLAGS=$FCFLAGS\n  compiler=$CC\n  GCC=$ac_cv_fc_compiler_gnu\n\n  _LT_TAGVAR(compiler, $1)=$CC\n  _LT_CC_BASENAME([$compiler])\n\n  if test -n \"$compiler\"; then\n    AC_MSG_CHECKING([if libtool supports shared libraries])\n    AC_MSG_RESULT([$can_build_shared])\n\n    AC_MSG_CHECKING([whether to build shared libraries])\n    test no = \"$can_build_shared\" && enable_shared=no\n\n    # On AIX, shared libraries and static libraries use the same namespace, and\n    # are all built from PIC.\n    case $host_os in\n      aix3*)\n        test yes = \"$enable_shared\" && enable_static=no\n        if test -n \"$RANLIB\"; then\n          archive_cmds=\"$archive_cmds~\\$RANLIB \\$lib\"\n          postinstall_cmds='$RANLIB $lib'\n        fi\n        ;;\n      aix[[4-9]]*)\n\tif test ia64 != \"$host_cpu\"; then\n\t  case $enable_shared,$with_aix_soname,$aix_use_runtimelinking in\n\t  yes,aix,yes) ;;\t\t# shared object as lib.so file only\n\t  yes,svr4,*) ;;\t\t# shared object as lib.so archive member only\n\t  yes,*) enable_static=no ;;\t# shared object in lib.a archive as well\n\t  esac\n\tfi\n        ;;\n    esac\n    AC_MSG_RESULT([$enable_shared])\n\n    AC_MSG_CHECKING([whether to build static libraries])\n    # Make sure either enable_shared or enable_static is yes.\n    test yes = \"$enable_shared\" || enable_static=yes\n    AC_MSG_RESULT([$enable_static])\n\n    _LT_TAGVAR(GCC, $1)=$ac_cv_fc_compiler_gnu\n    _LT_TAGVAR(LD, $1)=$LD\n\n    ## CAVEAT EMPTOR:\n    ## There is no encapsulation within the following macros, do not change\n    ## the running order or otherwise move them around unless you know exactly\n    ## what you are doing...\n    _LT_SYS_HIDDEN_LIBDEPS($1)\n    _LT_COMPILER_PIC($1)\n    _LT_COMPILER_C_O($1)\n    _LT_COMPILER_FILE_LOCKS($1)\n    _LT_LINKER_SHLIBS($1)\n    _LT_SYS_DYNAMIC_LINKER($1)\n    _LT_LINKER_HARDCODE_LIBPATH($1)\n\n    _LT_CONFIG($1)\n  fi # test -n \"$compiler\"\n\n  GCC=$lt_save_GCC\n  CC=$lt_save_CC\n  CFLAGS=$lt_save_CFLAGS\nfi # test yes != \"$_lt_disable_FC\"\n\nAC_LANG_POP\n])# _LT_LANG_FC_CONFIG\n\n\n# _LT_LANG_GCJ_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for the GNU Java Compiler compiler\n# are suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_GCJ_CONFIG],\n[AC_REQUIRE([LT_PROG_GCJ])dnl\nAC_LANG_SAVE\n\n# Source file extension for Java test sources.\nac_ext=java\n\n# Object file extension for compiled Java test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code=\"class foo {}\"\n\n# Code to be used in simple link tests\nlt_simple_link_test_code='public class conftest { public static void main(String[[]] argv) {}; }'\n\n# ltmain only uses $CC for tagged configurations so make sure $CC is set.\n_LT_TAG_COMPILER\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n# Allow CC to be a program name with arguments.\nlt_save_CC=$CC\nlt_save_CFLAGS=$CFLAGS\nlt_save_GCC=$GCC\nGCC=yes\nCC=${GCJ-\"gcj\"}\nCFLAGS=$GCJFLAGS\ncompiler=$CC\n_LT_TAGVAR(compiler, $1)=$CC\n_LT_TAGVAR(LD, $1)=$LD\n_LT_CC_BASENAME([$compiler])\n\n# GCJ did not exist at the time GCC didn't implicitly link libc in.\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n\n## CAVEAT EMPTOR:\n## There is no encapsulation within the following macros, do not change\n## the running order or otherwise move them around unless you know exactly\n## what you are doing...\nif test -n \"$compiler\"; then\n  _LT_COMPILER_NO_RTTI($1)\n  _LT_COMPILER_PIC($1)\n  _LT_COMPILER_C_O($1)\n  _LT_COMPILER_FILE_LOCKS($1)\n  _LT_LINKER_SHLIBS($1)\n  _LT_LINKER_HARDCODE_LIBPATH($1)\n\n  _LT_CONFIG($1)\nfi\n\nAC_LANG_RESTORE\n\nGCC=$lt_save_GCC\nCC=$lt_save_CC\nCFLAGS=$lt_save_CFLAGS\n])# _LT_LANG_GCJ_CONFIG\n\n\n# _LT_LANG_GO_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for the GNU Go compiler\n# are suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_GO_CONFIG],\n[AC_REQUIRE([LT_PROG_GO])dnl\nAC_LANG_SAVE\n\n# Source file extension for Go test sources.\nac_ext=go\n\n# Object file extension for compiled Go test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code=\"package main; func main() { }\"\n\n# Code to be used in simple link tests\nlt_simple_link_test_code='package main; func main() { }'\n\n# ltmain only uses $CC for tagged configurations so make sure $CC is set.\n_LT_TAG_COMPILER\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n# Allow CC to be a program name with arguments.\nlt_save_CC=$CC\nlt_save_CFLAGS=$CFLAGS\nlt_save_GCC=$GCC\nGCC=yes\nCC=${GOC-\"gccgo\"}\nCFLAGS=$GOFLAGS\ncompiler=$CC\n_LT_TAGVAR(compiler, $1)=$CC\n_LT_TAGVAR(LD, $1)=$LD\n_LT_CC_BASENAME([$compiler])\n\n# Go did not exist at the time GCC didn't implicitly link libc in.\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n\n## CAVEAT EMPTOR:\n## There is no encapsulation within the following macros, do not change\n## the running order or otherwise move them around unless you know exactly\n## what you are doing...\nif test -n \"$compiler\"; then\n  _LT_COMPILER_NO_RTTI($1)\n  _LT_COMPILER_PIC($1)\n  _LT_COMPILER_C_O($1)\n  _LT_COMPILER_FILE_LOCKS($1)\n  _LT_LINKER_SHLIBS($1)\n  _LT_LINKER_HARDCODE_LIBPATH($1)\n\n  _LT_CONFIG($1)\nfi\n\nAC_LANG_RESTORE\n\nGCC=$lt_save_GCC\nCC=$lt_save_CC\nCFLAGS=$lt_save_CFLAGS\n])# _LT_LANG_GO_CONFIG\n\n\n# _LT_LANG_RC_CONFIG([TAG])\n# -------------------------\n# Ensure that the configuration variables for the Windows resource compiler\n# are suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_RC_CONFIG],\n[AC_REQUIRE([LT_PROG_RC])dnl\nAC_LANG_SAVE\n\n# Source file extension for RC test sources.\nac_ext=rc\n\n# Object file extension for compiled RC test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code='sample MENU { MENUITEM \"&Soup\", 100, CHECKED }'\n\n# Code to be used in simple link tests\nlt_simple_link_test_code=$lt_simple_compile_test_code\n\n# ltmain only uses $CC for tagged configurations so make sure $CC is set.\n_LT_TAG_COMPILER\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n# Allow CC to be a program name with arguments.\nlt_save_CC=$CC\nlt_save_CFLAGS=$CFLAGS\nlt_save_GCC=$GCC\nGCC=\nCC=${RC-\"windres\"}\nCFLAGS=\ncompiler=$CC\n_LT_TAGVAR(compiler, $1)=$CC\n_LT_CC_BASENAME([$compiler])\n_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)=yes\n\nif test -n \"$compiler\"; then\n  :\n  _LT_CONFIG($1)\nfi\n\nGCC=$lt_save_GCC\nAC_LANG_RESTORE\nCC=$lt_save_CC\nCFLAGS=$lt_save_CFLAGS\n])# _LT_LANG_RC_CONFIG\n\n\n# LT_PROG_GCJ\n# -----------\nAC_DEFUN([LT_PROG_GCJ],\n[m4_ifdef([AC_PROG_GCJ], [AC_PROG_GCJ],\n  [m4_ifdef([A][M_PROG_GCJ], [A][M_PROG_GCJ],\n    [AC_CHECK_TOOL(GCJ, gcj,)\n      test set = \"${GCJFLAGS+set}\" || GCJFLAGS=\"-g -O2\"\n      AC_SUBST(GCJFLAGS)])])[]dnl\n])\n\n# Old name:\nAU_ALIAS([LT_AC_PROG_GCJ], [LT_PROG_GCJ])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([LT_AC_PROG_GCJ], [])\n\n\n# LT_PROG_GO\n# ----------\nAC_DEFUN([LT_PROG_GO],\n[AC_CHECK_TOOL(GOC, gccgo,)\n])\n\n\n# LT_PROG_RC\n# ----------\nAC_DEFUN([LT_PROG_RC],\n[AC_CHECK_TOOL(RC, windres,)\n])\n\n# Old name:\nAU_ALIAS([LT_AC_PROG_RC], [LT_PROG_RC])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([LT_AC_PROG_RC], [])\n\n\n# _LT_DECL_EGREP\n# --------------\n# If we don't have a new enough Autoconf to choose the best grep\n# available, choose the one first in the user's PATH.\nm4_defun([_LT_DECL_EGREP],\n[AC_REQUIRE([AC_PROG_EGREP])dnl\nAC_REQUIRE([AC_PROG_FGREP])dnl\ntest -z \"$GREP\" && GREP=grep\n_LT_DECL([], [GREP], [1], [A grep program that handles long lines])\n_LT_DECL([], [EGREP], [1], [An ERE matcher])\n_LT_DECL([], [FGREP], [1], [A literal string matcher])\ndnl Non-bleeding-edge autoconf doesn't subst GREP, so do it here too\nAC_SUBST([GREP])\n])\n\n\n# _LT_DECL_OBJDUMP\n# --------------\n# If we don't have a new enough Autoconf to choose the best objdump\n# available, choose the one first in the user's PATH.\nm4_defun([_LT_DECL_OBJDUMP],\n[AC_CHECK_TOOL(OBJDUMP, objdump, false)\ntest -z \"$OBJDUMP\" && OBJDUMP=objdump\n_LT_DECL([], [OBJDUMP], [1], [An object symbol dumper])\nAC_SUBST([OBJDUMP])\n])\n\n# _LT_DECL_DLLTOOL\n# ----------------\n# Ensure DLLTOOL variable is set.\nm4_defun([_LT_DECL_DLLTOOL],\n[AC_CHECK_TOOL(DLLTOOL, dlltool, false)\ntest -z \"$DLLTOOL\" && DLLTOOL=dlltool\n_LT_DECL([], [DLLTOOL], [1], [DLL creation program])\nAC_SUBST([DLLTOOL])\n])\n\n# _LT_DECL_SED\n# ------------\n# Check for a fully-functional sed program, that truncates\n# as few characters as possible.  Prefer GNU sed if found.\nm4_defun([_LT_DECL_SED],\n[AC_PROG_SED\ntest -z \"$SED\" && SED=sed\nXsed=\"$SED -e 1s/^X//\"\n_LT_DECL([], [SED], [1], [A sed program that does not truncate output])\n_LT_DECL([], [Xsed], [\"\\$SED -e 1s/^X//\"],\n    [Sed that helps us avoid accidentally triggering echo(1) options like -n])\n])# _LT_DECL_SED\n\nm4_ifndef([AC_PROG_SED], [\n############################################################\n# NOTE: This macro has been submitted for inclusion into   #\n#  GNU Autoconf as AC_PROG_SED.  When it is available in   #\n#  a released version of Autoconf we should remove this    #\n#  macro and use it instead.                               #\n############################################################\n\nm4_defun([AC_PROG_SED],\n[AC_MSG_CHECKING([for a sed that does not truncate output])\nAC_CACHE_VAL(lt_cv_path_SED,\n[# Loop through the user's path and test for sed and gsed.\n# Then use that list of sed's as ones to test for truncation.\nas_save_IFS=$IFS; IFS=$PATH_SEPARATOR\nfor as_dir in $PATH\ndo\n  IFS=$as_save_IFS\n  test -z \"$as_dir\" && as_dir=.\n  for lt_ac_prog in sed gsed; do\n    for ac_exec_ext in '' $ac_executable_extensions; do\n      if $as_executable_p \"$as_dir/$lt_ac_prog$ac_exec_ext\"; then\n        lt_ac_sed_list=\"$lt_ac_sed_list $as_dir/$lt_ac_prog$ac_exec_ext\"\n      fi\n    done\n  done\ndone\nIFS=$as_save_IFS\nlt_ac_max=0\nlt_ac_count=0\n# Add /usr/xpg4/bin/sed as it is typically found on Solaris\n# along with /bin/sed that truncates output.\nfor lt_ac_sed in $lt_ac_sed_list /usr/xpg4/bin/sed; do\n  test ! -f \"$lt_ac_sed\" && continue\n  cat /dev/null > conftest.in\n  lt_ac_count=0\n  echo $ECHO_N \"0123456789$ECHO_C\" >conftest.in\n  # Check for GNU sed and select it if it is found.\n  if \"$lt_ac_sed\" --version 2>&1 < /dev/null | grep 'GNU' > /dev/null; then\n    lt_cv_path_SED=$lt_ac_sed\n    break\n  fi\n  while true; do\n    cat conftest.in conftest.in >conftest.tmp\n    mv conftest.tmp conftest.in\n    cp conftest.in conftest.nl\n    echo >>conftest.nl\n    $lt_ac_sed -e 's/a$//' < conftest.nl >conftest.out || break\n    cmp -s conftest.out conftest.nl || break\n    # 10000 chars as input seems more than enough\n    test 10 -lt \"$lt_ac_count\" && break\n    lt_ac_count=`expr $lt_ac_count + 1`\n    if test \"$lt_ac_count\" -gt \"$lt_ac_max\"; then\n      lt_ac_max=$lt_ac_count\n      lt_cv_path_SED=$lt_ac_sed\n    fi\n  done\ndone\n])\nSED=$lt_cv_path_SED\nAC_SUBST([SED])\nAC_MSG_RESULT([$SED])\n])#AC_PROG_SED\n])#m4_ifndef\n\n# Old name:\nAU_ALIAS([LT_AC_PROG_SED], [AC_PROG_SED])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([LT_AC_PROG_SED], [])\n\n\n# _LT_CHECK_SHELL_FEATURES\n# ------------------------\n# Find out whether the shell is Bourne or XSI compatible,\n# or has some other useful features.\nm4_defun([_LT_CHECK_SHELL_FEATURES],\n[if ( (MAIL=60; unset MAIL) || exit) >/dev/null 2>&1; then\n  lt_unset=unset\nelse\n  lt_unset=false\nfi\n_LT_DECL([], [lt_unset], [0], [whether the shell understands \"unset\"])dnl\n\n# test EBCDIC or ASCII\ncase `echo X|tr X '\\101'` in\n A) # ASCII based system\n    # \\n is not interpreted correctly by Solaris 8 /usr/ucb/tr\n  lt_SP2NL='tr \\040 \\012'\n  lt_NL2SP='tr \\015\\012 \\040\\040'\n  ;;\n *) # EBCDIC based system\n  lt_SP2NL='tr \\100 \\n'\n  lt_NL2SP='tr \\r\\n \\100\\100'\n  ;;\nesac\n_LT_DECL([SP2NL], [lt_SP2NL], [1], [turn spaces into newlines])dnl\n_LT_DECL([NL2SP], [lt_NL2SP], [1], [turn newlines into spaces])dnl\n])# _LT_CHECK_SHELL_FEATURES\n\n\n# _LT_PATH_CONVERSION_FUNCTIONS\n# -----------------------------\n# Determine what file name conversion functions should be used by\n# func_to_host_file (and, implicitly, by func_to_host_path).  These are needed\n# for certain cross-compile configurations and native mingw.\nm4_defun([_LT_PATH_CONVERSION_FUNCTIONS],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_CANONICAL_BUILD])dnl\nAC_MSG_CHECKING([how to convert $build file names to $host format])\nAC_CACHE_VAL(lt_cv_to_host_file_cmd,\n[case $host in\n  *-*-mingw* )\n    case $build in\n      *-*-mingw* ) # actually msys\n        lt_cv_to_host_file_cmd=func_convert_file_msys_to_w32\n        ;;\n      *-*-cygwin* )\n        lt_cv_to_host_file_cmd=func_convert_file_cygwin_to_w32\n        ;;\n      * ) # otherwise, assume *nix\n        lt_cv_to_host_file_cmd=func_convert_file_nix_to_w32\n        ;;\n    esac\n    ;;\n  *-*-cygwin* )\n    case $build in\n      *-*-mingw* ) # actually msys\n        lt_cv_to_host_file_cmd=func_convert_file_msys_to_cygwin\n        ;;\n      *-*-cygwin* )\n        lt_cv_to_host_file_cmd=func_convert_file_noop\n        ;;\n      * ) # otherwise, assume *nix\n        lt_cv_to_host_file_cmd=func_convert_file_nix_to_cygwin\n        ;;\n    esac\n    ;;\n  * ) # unhandled hosts (and \"normal\" native builds)\n    lt_cv_to_host_file_cmd=func_convert_file_noop\n    ;;\nesac\n])\nto_host_file_cmd=$lt_cv_to_host_file_cmd\nAC_MSG_RESULT([$lt_cv_to_host_file_cmd])\n_LT_DECL([to_host_file_cmd], [lt_cv_to_host_file_cmd],\n         [0], [convert $build file names to $host format])dnl\n\nAC_MSG_CHECKING([how to convert $build file names to toolchain format])\nAC_CACHE_VAL(lt_cv_to_tool_file_cmd,\n[#assume ordinary cross tools, or native build.\nlt_cv_to_tool_file_cmd=func_convert_file_noop\ncase $host in\n  *-*-mingw* )\n    case $build in\n      *-*-mingw* ) # actually msys\n        lt_cv_to_tool_file_cmd=func_convert_file_msys_to_w32\n        ;;\n    esac\n    ;;\nesac\n])\nto_tool_file_cmd=$lt_cv_to_tool_file_cmd\nAC_MSG_RESULT([$lt_cv_to_tool_file_cmd])\n_LT_DECL([to_tool_file_cmd], [lt_cv_to_tool_file_cmd],\n         [0], [convert $build files to toolchain format])dnl\n])# _LT_PATH_CONVERSION_FUNCTIONS\n",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/config/ltoptions.m4": "# Helper functions for option handling.                    -*- Autoconf -*-\n#\n#   Copyright (C) 2004-2005, 2007-2009, 2011-2015 Free Software\n#   Foundation, Inc.\n#   Written by Gary V. Vaughan, 2004\n#\n# This file is free software; the Free Software Foundation gives\n# unlimited permission to copy and/or distribute it, with or without\n# modifications, as long as this notice is preserved.\n\n# serial 8 ltoptions.m4\n\n# This is to help aclocal find these macros, as it can't see m4_define.\nAC_DEFUN([LTOPTIONS_VERSION], [m4_if([1])])\n\n\n# _LT_MANGLE_OPTION(MACRO-NAME, OPTION-NAME)\n# ------------------------------------------\nm4_define([_LT_MANGLE_OPTION],\n[[_LT_OPTION_]m4_bpatsubst($1__$2, [[^a-zA-Z0-9_]], [_])])\n\n\n# _LT_SET_OPTION(MACRO-NAME, OPTION-NAME)\n# ---------------------------------------\n# Set option OPTION-NAME for macro MACRO-NAME, and if there is a\n# matching handler defined, dispatch to it.  Other OPTION-NAMEs are\n# saved as a flag.\nm4_define([_LT_SET_OPTION],\n[m4_define(_LT_MANGLE_OPTION([$1], [$2]))dnl\nm4_ifdef(_LT_MANGLE_DEFUN([$1], [$2]),\n        _LT_MANGLE_DEFUN([$1], [$2]),\n    [m4_warning([Unknown $1 option '$2'])])[]dnl\n])\n\n\n# _LT_IF_OPTION(MACRO-NAME, OPTION-NAME, IF-SET, [IF-NOT-SET])\n# ------------------------------------------------------------\n# Execute IF-SET if OPTION is set, IF-NOT-SET otherwise.\nm4_define([_LT_IF_OPTION],\n[m4_ifdef(_LT_MANGLE_OPTION([$1], [$2]), [$3], [$4])])\n\n\n# _LT_UNLESS_OPTIONS(MACRO-NAME, OPTION-LIST, IF-NOT-SET)\n# -------------------------------------------------------\n# Execute IF-NOT-SET unless all options in OPTION-LIST for MACRO-NAME\n# are set.\nm4_define([_LT_UNLESS_OPTIONS],\n[m4_foreach([_LT_Option], m4_split(m4_normalize([$2])),\n\t    [m4_ifdef(_LT_MANGLE_OPTION([$1], _LT_Option),\n\t\t      [m4_define([$0_found])])])[]dnl\nm4_ifdef([$0_found], [m4_undefine([$0_found])], [$3\n])[]dnl\n])\n\n\n# _LT_SET_OPTIONS(MACRO-NAME, OPTION-LIST)\n# ----------------------------------------\n# OPTION-LIST is a space-separated list of Libtool options associated\n# with MACRO-NAME.  If any OPTION has a matching handler declared with\n# LT_OPTION_DEFINE, dispatch to that macro; otherwise complain about\n# the unknown option and exit.\nm4_defun([_LT_SET_OPTIONS],\n[# Set options\nm4_foreach([_LT_Option], m4_split(m4_normalize([$2])),\n    [_LT_SET_OPTION([$1], _LT_Option)])\n\nm4_if([$1],[LT_INIT],[\n  dnl\n  dnl Simply set some default values (i.e off) if boolean options were not\n  dnl specified:\n  _LT_UNLESS_OPTIONS([LT_INIT], [dlopen], [enable_dlopen=no\n  ])\n  _LT_UNLESS_OPTIONS([LT_INIT], [win32-dll], [enable_win32_dll=no\n  ])\n  dnl\n  dnl If no reference was made to various pairs of opposing options, then\n  dnl we run the default mode handler for the pair.  For example, if neither\n  dnl 'shared' nor 'disable-shared' was passed, we enable building of shared\n  dnl archives by default:\n  _LT_UNLESS_OPTIONS([LT_INIT], [shared disable-shared], [_LT_ENABLE_SHARED])\n  _LT_UNLESS_OPTIONS([LT_INIT], [static disable-static], [_LT_ENABLE_STATIC])\n  _LT_UNLESS_OPTIONS([LT_INIT], [pic-only no-pic], [_LT_WITH_PIC])\n  _LT_UNLESS_OPTIONS([LT_INIT], [fast-install disable-fast-install],\n\t\t   [_LT_ENABLE_FAST_INSTALL])\n  _LT_UNLESS_OPTIONS([LT_INIT], [aix-soname=aix aix-soname=both aix-soname=svr4],\n\t\t   [_LT_WITH_AIX_SONAME([aix])])\n  ])\n])# _LT_SET_OPTIONS\n\n\n## --------------------------------- ##\n## Macros to handle LT_INIT options. ##\n## --------------------------------- ##\n\n# _LT_MANGLE_DEFUN(MACRO-NAME, OPTION-NAME)\n# -----------------------------------------\nm4_define([_LT_MANGLE_DEFUN],\n[[_LT_OPTION_DEFUN_]m4_bpatsubst(m4_toupper([$1__$2]), [[^A-Z0-9_]], [_])])\n\n\n# LT_OPTION_DEFINE(MACRO-NAME, OPTION-NAME, CODE)\n# -----------------------------------------------\nm4_define([LT_OPTION_DEFINE],\n[m4_define(_LT_MANGLE_DEFUN([$1], [$2]), [$3])[]dnl\n])# LT_OPTION_DEFINE\n\n\n# dlopen\n# ------\nLT_OPTION_DEFINE([LT_INIT], [dlopen], [enable_dlopen=yes\n])\n\nAU_DEFUN([AC_LIBTOOL_DLOPEN],\n[_LT_SET_OPTION([LT_INIT], [dlopen])\nAC_DIAGNOSE([obsolete],\n[$0: Remove this warning and the call to _LT_SET_OPTION when you\nput the 'dlopen' option into LT_INIT's first parameter.])\n])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_DLOPEN], [])\n\n\n# win32-dll\n# ---------\n# Declare package support for building win32 dll's.\nLT_OPTION_DEFINE([LT_INIT], [win32-dll],\n[enable_win32_dll=yes\n\ncase $host in\n*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-cegcc*)\n  AC_CHECK_TOOL(AS, as, false)\n  AC_CHECK_TOOL(DLLTOOL, dlltool, false)\n  AC_CHECK_TOOL(OBJDUMP, objdump, false)\n  ;;\nesac\n\ntest -z \"$AS\" && AS=as\n_LT_DECL([], [AS],      [1], [Assembler program])dnl\n\ntest -z \"$DLLTOOL\" && DLLTOOL=dlltool\n_LT_DECL([], [DLLTOOL], [1], [DLL creation program])dnl\n\ntest -z \"$OBJDUMP\" && OBJDUMP=objdump\n_LT_DECL([], [OBJDUMP], [1], [Object dumper program])dnl\n])# win32-dll\n\nAU_DEFUN([AC_LIBTOOL_WIN32_DLL],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\n_LT_SET_OPTION([LT_INIT], [win32-dll])\nAC_DIAGNOSE([obsolete],\n[$0: Remove this warning and the call to _LT_SET_OPTION when you\nput the 'win32-dll' option into LT_INIT's first parameter.])\n])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_WIN32_DLL], [])\n\n\n# _LT_ENABLE_SHARED([DEFAULT])\n# ----------------------------\n# implement the --enable-shared flag, and supports the 'shared' and\n# 'disable-shared' LT_INIT options.\n# DEFAULT is either 'yes' or 'no'.  If omitted, it defaults to 'yes'.\nm4_define([_LT_ENABLE_SHARED],\n[m4_define([_LT_ENABLE_SHARED_DEFAULT], [m4_if($1, no, no, yes)])dnl\nAC_ARG_ENABLE([shared],\n    [AS_HELP_STRING([--enable-shared@<:@=PKGS@:>@],\n\t[build shared libraries @<:@default=]_LT_ENABLE_SHARED_DEFAULT[@:>@])],\n    [p=${PACKAGE-default}\n    case $enableval in\n    yes) enable_shared=yes ;;\n    no) enable_shared=no ;;\n    *)\n      enable_shared=no\n      # Look at the argument we got.  We use all the common list separators.\n      lt_save_ifs=$IFS; IFS=$IFS$PATH_SEPARATOR,\n      for pkg in $enableval; do\n\tIFS=$lt_save_ifs\n\tif test \"X$pkg\" = \"X$p\"; then\n\t  enable_shared=yes\n\tfi\n      done\n      IFS=$lt_save_ifs\n      ;;\n    esac],\n    [enable_shared=]_LT_ENABLE_SHARED_DEFAULT)\n\n    _LT_DECL([build_libtool_libs], [enable_shared], [0],\n\t[Whether or not to build shared libraries])\n])# _LT_ENABLE_SHARED\n\nLT_OPTION_DEFINE([LT_INIT], [shared], [_LT_ENABLE_SHARED([yes])])\nLT_OPTION_DEFINE([LT_INIT], [disable-shared], [_LT_ENABLE_SHARED([no])])\n\n# Old names:\nAC_DEFUN([AC_ENABLE_SHARED],\n[_LT_SET_OPTION([LT_INIT], m4_if([$1], [no], [disable-])[shared])\n])\n\nAC_DEFUN([AC_DISABLE_SHARED],\n[_LT_SET_OPTION([LT_INIT], [disable-shared])\n])\n\nAU_DEFUN([AM_ENABLE_SHARED], [AC_ENABLE_SHARED($@)])\nAU_DEFUN([AM_DISABLE_SHARED], [AC_DISABLE_SHARED($@)])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AM_ENABLE_SHARED], [])\ndnl AC_DEFUN([AM_DISABLE_SHARED], [])\n\n\n\n# _LT_ENABLE_STATIC([DEFAULT])\n# ----------------------------\n# implement the --enable-static flag, and support the 'static' and\n# 'disable-static' LT_INIT options.\n# DEFAULT is either 'yes' or 'no'.  If omitted, it defaults to 'yes'.\nm4_define([_LT_ENABLE_STATIC],\n[m4_define([_LT_ENABLE_STATIC_DEFAULT], [m4_if($1, no, no, yes)])dnl\nAC_ARG_ENABLE([static],\n    [AS_HELP_STRING([--enable-static@<:@=PKGS@:>@],\n\t[build static libraries @<:@default=]_LT_ENABLE_STATIC_DEFAULT[@:>@])],\n    [p=${PACKAGE-default}\n    case $enableval in\n    yes) enable_static=yes ;;\n    no) enable_static=no ;;\n    *)\n     enable_static=no\n      # Look at the argument we got.  We use all the common list separators.\n      lt_save_ifs=$IFS; IFS=$IFS$PATH_SEPARATOR,\n      for pkg in $enableval; do\n\tIFS=$lt_save_ifs\n\tif test \"X$pkg\" = \"X$p\"; then\n\t  enable_static=yes\n\tfi\n      done\n      IFS=$lt_save_ifs\n      ;;\n    esac],\n    [enable_static=]_LT_ENABLE_STATIC_DEFAULT)\n\n    _LT_DECL([build_old_libs], [enable_static], [0],\n\t[Whether or not to build static libraries])\n])# _LT_ENABLE_STATIC\n\nLT_OPTION_DEFINE([LT_INIT], [static], [_LT_ENABLE_STATIC([yes])])\nLT_OPTION_DEFINE([LT_INIT], [disable-static], [_LT_ENABLE_STATIC([no])])\n\n# Old names:\nAC_DEFUN([AC_ENABLE_STATIC],\n[_LT_SET_OPTION([LT_INIT], m4_if([$1], [no], [disable-])[static])\n])\n\nAC_DEFUN([AC_DISABLE_STATIC],\n[_LT_SET_OPTION([LT_INIT], [disable-static])\n])\n\nAU_DEFUN([AM_ENABLE_STATIC], [AC_ENABLE_STATIC($@)])\nAU_DEFUN([AM_DISABLE_STATIC], [AC_DISABLE_STATIC($@)])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AM_ENABLE_STATIC], [])\ndnl AC_DEFUN([AM_DISABLE_STATIC], [])\n\n\n\n# _LT_ENABLE_FAST_INSTALL([DEFAULT])\n# ----------------------------------\n# implement the --enable-fast-install flag, and support the 'fast-install'\n# and 'disable-fast-install' LT_INIT options.\n# DEFAULT is either 'yes' or 'no'.  If omitted, it defaults to 'yes'.\nm4_define([_LT_ENABLE_FAST_INSTALL],\n[m4_define([_LT_ENABLE_FAST_INSTALL_DEFAULT], [m4_if($1, no, no, yes)])dnl\nAC_ARG_ENABLE([fast-install],\n    [AS_HELP_STRING([--enable-fast-install@<:@=PKGS@:>@],\n    [optimize for fast installation @<:@default=]_LT_ENABLE_FAST_INSTALL_DEFAULT[@:>@])],\n    [p=${PACKAGE-default}\n    case $enableval in\n    yes) enable_fast_install=yes ;;\n    no) enable_fast_install=no ;;\n    *)\n      enable_fast_install=no\n      # Look at the argument we got.  We use all the common list separators.\n      lt_save_ifs=$IFS; IFS=$IFS$PATH_SEPARATOR,\n      for pkg in $enableval; do\n\tIFS=$lt_save_ifs\n\tif test \"X$pkg\" = \"X$p\"; then\n\t  enable_fast_install=yes\n\tfi\n      done\n      IFS=$lt_save_ifs\n      ;;\n    esac],\n    [enable_fast_install=]_LT_ENABLE_FAST_INSTALL_DEFAULT)\n\n_LT_DECL([fast_install], [enable_fast_install], [0],\n\t [Whether or not to optimize for fast installation])dnl\n])# _LT_ENABLE_FAST_INSTALL\n\nLT_OPTION_DEFINE([LT_INIT], [fast-install], [_LT_ENABLE_FAST_INSTALL([yes])])\nLT_OPTION_DEFINE([LT_INIT], [disable-fast-install], [_LT_ENABLE_FAST_INSTALL([no])])\n\n# Old names:\nAU_DEFUN([AC_ENABLE_FAST_INSTALL],\n[_LT_SET_OPTION([LT_INIT], m4_if([$1], [no], [disable-])[fast-install])\nAC_DIAGNOSE([obsolete],\n[$0: Remove this warning and the call to _LT_SET_OPTION when you put\nthe 'fast-install' option into LT_INIT's first parameter.])\n])\n\nAU_DEFUN([AC_DISABLE_FAST_INSTALL],\n[_LT_SET_OPTION([LT_INIT], [disable-fast-install])\nAC_DIAGNOSE([obsolete],\n[$0: Remove this warning and the call to _LT_SET_OPTION when you put\nthe 'disable-fast-install' option into LT_INIT's first parameter.])\n])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_ENABLE_FAST_INSTALL], [])\ndnl AC_DEFUN([AM_DISABLE_FAST_INSTALL], [])\n\n\n# _LT_WITH_AIX_SONAME([DEFAULT])\n# ----------------------------------\n# implement the --with-aix-soname flag, and support the `aix-soname=aix'\n# and `aix-soname=both' and `aix-soname=svr4' LT_INIT options. DEFAULT\n# is either `aix', `both' or `svr4'.  If omitted, it defaults to `aix'.\nm4_define([_LT_WITH_AIX_SONAME],\n[m4_define([_LT_WITH_AIX_SONAME_DEFAULT], [m4_if($1, svr4, svr4, m4_if($1, both, both, aix))])dnl\nshared_archive_member_spec=\ncase $host,$enable_shared in\npower*-*-aix[[5-9]]*,yes)\n  AC_MSG_CHECKING([which variant of shared library versioning to provide])\n  AC_ARG_WITH([aix-soname],\n    [AS_HELP_STRING([--with-aix-soname=aix|svr4|both],\n      [shared library versioning (aka \"SONAME\") variant to provide on AIX, @<:@default=]_LT_WITH_AIX_SONAME_DEFAULT[@:>@.])],\n    [case $withval in\n    aix|svr4|both)\n      ;;\n    *)\n      AC_MSG_ERROR([Unknown argument to --with-aix-soname])\n      ;;\n    esac\n    lt_cv_with_aix_soname=$with_aix_soname],\n    [AC_CACHE_VAL([lt_cv_with_aix_soname],\n      [lt_cv_with_aix_soname=]_LT_WITH_AIX_SONAME_DEFAULT)\n    with_aix_soname=$lt_cv_with_aix_soname])\n  AC_MSG_RESULT([$with_aix_soname])\n  if test aix != \"$with_aix_soname\"; then\n    # For the AIX way of multilib, we name the shared archive member\n    # based on the bitwidth used, traditionally 'shr.o' or 'shr_64.o',\n    # and 'shr.imp' or 'shr_64.imp', respectively, for the Import File.\n    # Even when GNU compilers ignore OBJECT_MODE but need '-maix64' flag,\n    # the AIX toolchain works better with OBJECT_MODE set (default 32).\n    if test 64 = \"${OBJECT_MODE-32}\"; then\n      shared_archive_member_spec=shr_64\n    else\n      shared_archive_member_spec=shr\n    fi\n  fi\n  ;;\n*)\n  with_aix_soname=aix\n  ;;\nesac\n\n_LT_DECL([], [shared_archive_member_spec], [0],\n    [Shared archive member basename, for filename based shared library versioning on AIX])dnl\n])# _LT_WITH_AIX_SONAME\n\nLT_OPTION_DEFINE([LT_INIT], [aix-soname=aix], [_LT_WITH_AIX_SONAME([aix])])\nLT_OPTION_DEFINE([LT_INIT], [aix-soname=both], [_LT_WITH_AIX_SONAME([both])])\nLT_OPTION_DEFINE([LT_INIT], [aix-soname=svr4], [_LT_WITH_AIX_SONAME([svr4])])\n\n\n# _LT_WITH_PIC([MODE])\n# --------------------\n# implement the --with-pic flag, and support the 'pic-only' and 'no-pic'\n# LT_INIT options.\n# MODE is either 'yes' or 'no'.  If omitted, it defaults to 'both'.\nm4_define([_LT_WITH_PIC],\n[AC_ARG_WITH([pic],\n    [AS_HELP_STRING([--with-pic@<:@=PKGS@:>@],\n\t[try to use only PIC/non-PIC objects @<:@default=use both@:>@])],\n    [lt_p=${PACKAGE-default}\n    case $withval in\n    yes|no) pic_mode=$withval ;;\n    *)\n      pic_mode=default\n      # Look at the argument we got.  We use all the common list separators.\n      lt_save_ifs=$IFS; IFS=$IFS$PATH_SEPARATOR,\n      for lt_pkg in $withval; do\n\tIFS=$lt_save_ifs\n\tif test \"X$lt_pkg\" = \"X$lt_p\"; then\n\t  pic_mode=yes\n\tfi\n      done\n      IFS=$lt_save_ifs\n      ;;\n    esac],\n    [pic_mode=m4_default([$1], [default])])\n\n_LT_DECL([], [pic_mode], [0], [What type of objects to build])dnl\n])# _LT_WITH_PIC\n\nLT_OPTION_DEFINE([LT_INIT], [pic-only], [_LT_WITH_PIC([yes])])\nLT_OPTION_DEFINE([LT_INIT], [no-pic], [_LT_WITH_PIC([no])])\n\n# Old name:\nAU_DEFUN([AC_LIBTOOL_PICMODE],\n[_LT_SET_OPTION([LT_INIT], [pic-only])\nAC_DIAGNOSE([obsolete],\n[$0: Remove this warning and the call to _LT_SET_OPTION when you\nput the 'pic-only' option into LT_INIT's first parameter.])\n])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_PICMODE], [])\n\n## ----------------- ##\n## LTDL_INIT Options ##\n## ----------------- ##\n\nm4_define([_LTDL_MODE], [])\nLT_OPTION_DEFINE([LTDL_INIT], [nonrecursive],\n\t\t [m4_define([_LTDL_MODE], [nonrecursive])])\nLT_OPTION_DEFINE([LTDL_INIT], [recursive],\n\t\t [m4_define([_LTDL_MODE], [recursive])])\nLT_OPTION_DEFINE([LTDL_INIT], [subproject],\n\t\t [m4_define([_LTDL_MODE], [subproject])])\n\nm4_define([_LTDL_TYPE], [])\nLT_OPTION_DEFINE([LTDL_INIT], [installable],\n\t\t [m4_define([_LTDL_TYPE], [installable])])\nLT_OPTION_DEFINE([LTDL_INIT], [convenience],\n\t\t [m4_define([_LTDL_TYPE], [convenience])])\n",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/config/hwloc.m4": "dnl -*- Autoconf -*-\ndnl\ndnl Copyright \u00a9 2009-2020 Inria.  All rights reserved.\ndnl Copyright \u00a9 2009-2012, 2015-2017, 2020 Universit\u00e9 Bordeaux\ndnl Copyright \u00a9 2004-2005 The Trustees of Indiana University and Indiana\ndnl                         University Research and Technology\ndnl                         Corporation.  All rights reserved.\ndnl Copyright \u00a9 2004-2012 The Regents of the University of California.\ndnl                         All rights reserved.\ndnl Copyright \u00a9 2004-2008 High Performance Computing Center Stuttgart,\ndnl                         University of Stuttgart.  All rights reserved.\ndnl Copyright \u00a9 2006-2017 Cisco Systems, Inc.  All rights reserved.\ndnl Copyright \u00a9 2012  Blue Brain Project, BBP/EPFL. All rights reserved.\ndnl Copyright \u00a9 2012       Oracle and/or its affiliates.  All rights reserved.\ndnl Copyright \u00a9 2012  Los Alamos National Security, LLC. All rights reserved.\ndnl See COPYING in top-level directory.\n\n# Main hwloc m4 macro, to be invoked by the user\n#\n# Expects two or three paramters:\n# 1. Configuration prefix\n# 2. What to do upon success\n# 3. What to do upon failure\n# 4. If non-empty, print the announcement banner\n#\nAC_DEFUN([HWLOC_SETUP_CORE],[\n    AC_REQUIRE([AC_USE_SYSTEM_EXTENSIONS])\n    AC_REQUIRE([AC_CANONICAL_TARGET])\n    AC_REQUIRE([AC_PROG_CC])\n\n    AS_IF([test \"x$4\" != \"x\"],\n          [cat <<EOF\n\n###\n### Configuring hwloc core\n###\nEOF])\n\n    # If no prefix was defined, set a good value\n    m4_ifval([$1],\n             [m4_define([hwloc_config_prefix],[$1/])],\n             [m4_define([hwloc_config_prefix], [])])\n\n    # Unless previously set to \"standalone\" mode, default to embedded\n    # mode\n    AS_IF([test \"$hwloc_mode\" = \"\"], [hwloc_mode=embedded])\n    AC_MSG_CHECKING([hwloc building mode])\n    AC_MSG_RESULT([$hwloc_mode])\n\n    # Get hwloc's absolute top builddir (which may not be the same as\n    # the real $top_builddir, because we may be building in embedded\n    # mode).\n    HWLOC_startdir=`pwd`\n    if test x\"hwloc_config_prefix\" != \"x\" -a ! -d \"hwloc_config_prefix\"; then\n        mkdir -p \"hwloc_config_prefix\"\n    fi\n    if test x\"hwloc_config_prefix\" != \"x\"; then\n        cd \"hwloc_config_prefix\"\n    fi\n    HWLOC_top_builddir=`pwd`\n    AC_SUBST(HWLOC_top_builddir)\n\n    # Get hwloc's absolute top srcdir (which may not be the same as\n    # the real $top_srcdir, because we may be building in embedded\n    # mode).  First, go back to the startdir incase the $srcdir is\n    # relative.\n\n    cd \"$HWLOC_startdir\"\n    cd \"$srcdir\"/hwloc_config_prefix\n    HWLOC_top_srcdir=\"`pwd`\"\n    AC_SUBST(HWLOC_top_srcdir)\n\n    # Go back to where we started\n    cd \"$HWLOC_startdir\"\n\n    AC_MSG_NOTICE([hwloc builddir: $HWLOC_top_builddir])\n    AC_MSG_NOTICE([hwloc srcdir: $HWLOC_top_srcdir])\n    if test \"$HWLOC_top_builddir\" != \"$HWLOC_top_srcdir\"; then\n        AC_MSG_NOTICE([Detected VPATH build])\n    fi\n\n    # Get the version of hwloc that we are installing\n    AC_MSG_CHECKING([for hwloc version])\n    HWLOC_VERSION=\"`sh $HWLOC_top_srcdir/config/hwloc_get_version.sh $HWLOC_top_srcdir/VERSION`\"\n    if test \"$?\" != \"0\"; then\n        AC_MSG_ERROR([Cannot continue])\n    fi\n    AC_MSG_RESULT([$HWLOC_VERSION])\n    AC_SUBST(HWLOC_VERSION)\n    AC_DEFINE_UNQUOTED([HWLOC_VERSION], [\"$HWLOC_VERSION\"],\n                       [The library version, always available, even in embedded mode, contrary to VERSION])\n\n    HWLOC_VERSION_MAJOR=\"`sh $HWLOC_top_srcdir/config/hwloc_get_version.sh $HWLOC_top_srcdir/VERSION --major`\"\n    AC_DEFINE_UNQUOTED([HWLOC_VERSION_MAJOR], [$HWLOC_VERSION_MAJOR], [The library version major number])\n    HWLOC_VERSION_MINOR=\"`sh $HWLOC_top_srcdir/config/hwloc_get_version.sh $HWLOC_top_srcdir/VERSION --minor`\"\n    AC_DEFINE_UNQUOTED([HWLOC_VERSION_MINOR], [$HWLOC_VERSION_MINOR], [The library version minor number])\n    HWLOC_VERSION_RELEASE=\"`sh $HWLOC_top_srcdir/config/hwloc_get_version.sh $HWLOC_top_srcdir/VERSION --release`\"\n    AC_DEFINE_UNQUOTED([HWLOC_VERSION_RELEASE], [$HWLOC_VERSION_RELEASE], [The library version release number])\n    HWLOC_VERSION_GREEK=\"`sh $HWLOC_top_srcdir/config/hwloc_get_version.sh $HWLOC_top_srcdir/VERSION --greek`\"\n    AC_DEFINE_UNQUOTED([HWLOC_VERSION_GREEK], [\"$HWLOC_VERSION_GREEK\"], [The library version optional greek suffix string])\n\n    HWLOC_RELEASE_DATE=\"`sh $HWLOC_top_srcdir/config/hwloc_get_version.sh $HWLOC_top_srcdir/VERSION --release-date`\"\n    AC_SUBST(HWLOC_RELEASE_DATE)\n\n    # Debug mode?\n    AC_MSG_CHECKING([if want hwloc maintainer support])\n    hwloc_debug=\n\n    # Unconditionally disable debug mode in embedded mode; if someone\n    # asks, we can add a configure-time option for it.  Disable it\n    # now, however, because --enable-debug is not even added as an\n    # option when configuring in embedded mode, and we wouldn't want\n    # to hijack the enclosing application's --enable-debug configure\n    # switch.\n    AS_IF([test \"$hwloc_mode\" = \"embedded\"],\n          [hwloc_debug=0\n           hwloc_debug_msg=\"disabled (embedded mode)\"])\n    AS_IF([test \"$hwloc_debug\" = \"\" -a \"$enable_debug\" = \"yes\"],\n          [hwloc_debug=1\n           hwloc_debug_msg=\"enabled\"])\n    AS_IF([test \"$hwloc_debug\" = \"\"],\n          [hwloc_debug=0\n           hwloc_debug_msg=\"disabled\"])\n    # Grr; we use #ifndef for HWLOC_DEBUG!  :-(\n    AH_TEMPLATE(HWLOC_DEBUG, [Whether we are in debugging mode or not])\n    AS_IF([test \"$hwloc_debug\" = \"1\"], [AC_DEFINE([HWLOC_DEBUG])])\n    AC_MSG_RESULT([$hwloc_debug_msg])\n\n    # We need to set a path for header, etc files depending on whether\n    # we're standalone or embedded. this is taken care of by HWLOC_EMBEDDED.\n\n    AC_MSG_CHECKING([for hwloc directory prefix])\n    AC_MSG_RESULT(m4_ifval([$1], hwloc_config_prefix, [(none)]))\n\n    # Note that private/config.h *MUST* be listed first so that it\n    # becomes the \"main\" config header file.  Any AC-CONFIG-HEADERS\n    # after that (hwloc/config.h) will only have selective #defines\n    # replaced, not the entire file.\n    AC_CONFIG_HEADERS(hwloc_config_prefix[include/private/autogen/config.h])\n    AC_CONFIG_HEADERS(hwloc_config_prefix[include/hwloc/autogen/config.h])\n\n    # What prefix are we using?\n    AC_MSG_CHECKING([for hwloc symbol prefix])\n    AS_IF([test \"$hwloc_symbol_prefix_value\" = \"\"],\n          [AS_IF([test \"$with_hwloc_symbol_prefix\" = \"\"],\n                 [hwloc_symbol_prefix_value=hwloc_],\n                 [hwloc_symbol_prefix_value=$with_hwloc_symbol_prefix])])\n    AC_DEFINE_UNQUOTED(HWLOC_SYM_PREFIX, [$hwloc_symbol_prefix_value],\n                       [The hwloc symbol prefix])\n    # Ensure to [] escape the whole next line so that we can get the\n    # proper tr tokens\n    [hwloc_symbol_prefix_value_caps=\"`echo $hwloc_symbol_prefix_value | tr '[:lower:]' '[:upper:]'`\"]\n    AC_DEFINE_UNQUOTED(HWLOC_SYM_PREFIX_CAPS, [$hwloc_symbol_prefix_value_caps],\n                       [The hwloc symbol prefix in all caps])\n    AC_MSG_RESULT([$hwloc_symbol_prefix_value])\n\n    # Give an easy #define to know if we need to transform all the\n    # hwloc names\n    AH_TEMPLATE([HWLOC_SYM_TRANSFORM], [Whether we need to re-define all the hwloc public symbols or not])\n    AS_IF([test \"$hwloc_symbol_prefix_value\" = \"hwloc_\"],\n          [AC_DEFINE([HWLOC_SYM_TRANSFORM], [0])],\n          [AC_DEFINE([HWLOC_SYM_TRANSFORM], [1])])\n\n    # hwloc 2.0+ requires a C99 compliant compiler\n    AC_PROG_CC_C99\n    # The result of AC_PROG_CC_C99 is stored in ac_cv_prog_cc_c99\n    if test \"x$ac_cv_prog_cc_c99\" = xno ; then\n        AC_MSG_WARN([hwloc requires a C99 compiler])\n        AC_MSG_ERROR([Aborting.])\n    fi\n\n    # GCC specifics.\n    if test \"x$GCC\" = \"xyes\"; then\n        HWLOC_GCC_CFLAGS=\"-Wall -Wmissing-prototypes -Wundef\"\n        HWLOC_GCC_CFLAGS=\"$HWLOC_GCC_CFLAGS -Wpointer-arith -Wcast-align\"\n    fi\n\n    # Enample system extensions for O_DIRECTORY, fdopen, fssl, etc.\n    AH_VERBATIM([USE_HPUX_SYSTEM_EXTENSIONS],\n[/* Enable extensions on HP-UX. */\n#ifndef _HPUX_SOURCE\n# undef _HPUX_SOURCE\n#endif\n])\n    AC_DEFINE([_HPUX_SOURCE], [1], [Are we building for HP-UX?])\n\n    AC_LANG_PUSH([C])\n\n    # Check to see if we're producing a 32 or 64 bit executable by\n    # checking the sizeof void*.  Note that AC CHECK_SIZEOF even works\n    # when cross compiling (!), according to the AC 2.64 docs.  This\n    # check is needed because on some systems, you can instruct the\n    # compiler to specifically build 32 or 64 bit executables -- even\n    # though the $target may indicate something different.\n    AC_CHECK_SIZEOF([void *])\n\n    #\n    # List of components to be built, either statically or dynamically.\n    # To be enlarged below.\n    #\n    hwloc_components=\"noos xml synthetic xml_nolibxml\"\n\n    #\n    # Check OS support\n    #\n    AC_MSG_CHECKING([which OS support to include])\n    case ${target} in\n      powerpc64-bgq-linux*) # must be before Linux\n\tAC_DEFINE(HWLOC_BGQ_SYS, 1, [Define to 1 on BlueGene/Q])\n\thwloc_bgq=yes\n\tAC_MSG_RESULT([bgq])\n\thwloc_components=\"$hwloc_components bgq\"\n\t;;\n      *-*-linux*)\n        AC_DEFINE(HWLOC_LINUX_SYS, 1, [Define to 1 on Linux])\n        hwloc_linux=yes\n        AC_MSG_RESULT([Linux])\n        hwloc_components=\"$hwloc_components linux\"\n        if test \"x$enable_io\" != xno; then\n\t  AC_DEFINE(HWLOC_HAVE_LINUXIO, 1, [Define to 1 for I/O discovery in the Linux component])\n\t  hwloc_linuxio_happy=yes\n\t  if test x$enable_pci != xno; then\n\t    AC_DEFINE(HWLOC_HAVE_LINUXPCI, 1, [Define to 1 if enabling Linux-specific PCI discovery in the Linux I/O component])\n\t    hwloc_linuxpci_happy=yes\n\t  fi\n\tfi\n        ;;\n      *-*-irix*)\n        AC_DEFINE(HWLOC_IRIX_SYS, 1, [Define to 1 on Irix])\n        hwloc_irix=yes\n        AC_MSG_RESULT([IRIX])\n        # no irix component yet\n        ;;\n      *-*-darwin*)\n        AC_DEFINE(HWLOC_DARWIN_SYS, 1, [Define to 1 on Darwin])\n        hwloc_darwin=yes\n        AC_MSG_RESULT([Darwin])\n        hwloc_components=\"$hwloc_components darwin\"\n        ;;\n      *-*-solaris*)\n        AC_DEFINE(HWLOC_SOLARIS_SYS, 1, [Define to 1 on Solaris])\n        hwloc_solaris=yes\n        AC_MSG_RESULT([Solaris])\n        hwloc_components=\"$hwloc_components solaris\"\n        ;;\n      *-*-aix*)\n        AC_DEFINE(HWLOC_AIX_SYS, 1, [Define to 1 on AIX])\n        hwloc_aix=yes\n        AC_MSG_RESULT([AIX])\n        hwloc_components=\"$hwloc_components aix\"\n        ;;\n      *-*-hpux*)\n        AC_DEFINE(HWLOC_HPUX_SYS, 1, [Define to 1 on HP-UX])\n        hwloc_hpux=yes\n        AC_MSG_RESULT([HP-UX])\n        hwloc_components=\"$hwloc_components hpux\"\n        ;;\n      *-*-mingw*|*-*-cygwin*)\n        AC_DEFINE(HWLOC_WIN_SYS, 1, [Define to 1 on WINDOWS])\n        hwloc_windows=yes\n        AC_MSG_RESULT([Windows])\n        hwloc_components=\"$hwloc_components windows\"\n        ;;\n      *-*-*freebsd*)\n        AC_DEFINE(HWLOC_FREEBSD_SYS, 1, [Define to 1 on *FREEBSD])\n        hwloc_freebsd=yes\n        AC_MSG_RESULT([FreeBSD])\n        hwloc_components=\"$hwloc_components freebsd\"\n        ;;\n      *-*-*netbsd*)\n        AC_DEFINE(HWLOC_NETBSD_SYS, 1, [Define to 1 on *NETBSD])\n        hwloc_netbsd=yes\n        AC_MSG_RESULT([NetBSD])\n        hwloc_components=\"$hwloc_components netbsd\"\n        ;;\n      *)\n        AC_MSG_RESULT([Unsupported! ($target)])\n        AC_DEFINE(HWLOC_UNSUPPORTED_SYS, 1, [Define to 1 on unsupported systems])\n        AC_MSG_WARN([***********************************************************])\n        AC_MSG_WARN([*** hwloc does not support this system.])\n        AC_MSG_WARN([*** hwloc will *attempt* to build (but it may not work).])\n        AC_MSG_WARN([*** hwloc run-time results may be reduced to showing just one processor,])\n        AC_MSG_WARN([*** and binding will not be supported.])\n        AC_MSG_WARN([*** You have been warned.])\n        AC_MSG_WARN([*** Pausing to give you time to read this message...])\n        AC_MSG_WARN([***********************************************************])\n        sleep 10\n        ;;\n    esac\n\n    #\n    # Check CPU support\n    #\n    AC_MSG_CHECKING([which CPU support to include])\n    case ${target} in\n      i*86-*-*|x86_64-*-*|amd64-*-*)\n        case ${ac_cv_sizeof_void_p} in\n          4)\n            AC_DEFINE(HWLOC_X86_32_ARCH, 1, [Define to 1 on x86_32])\n            hwloc_x86_32=yes\n\t    HWLOC_MS_LIB_ARCH=X86\n            AC_MSG_RESULT([x86_32])\n            ;;\n          8)\n            AC_DEFINE(HWLOC_X86_64_ARCH, 1, [Define to 1 on x86_64])\n            hwloc_x86_64=yes\n\t    HWLOC_MS_LIB_ARCH=X64\n            AC_MSG_RESULT([x86_64])\n            ;;\n          *)\n            AC_DEFINE(HWLOC_X86_64_ARCH, 1, [Define to 1 on x86_64])\n            hwloc_x86_64=yes\n\t    HWLOC_MS_LIB_ARCH=X64\n            AC_MSG_RESULT([unknown -- assuming x86_64])\n            ;;\n        esac\n        ;;\n      *)\n        AC_MSG_RESULT([unknown])\n        ;;\n    esac\n    AC_SUBST(HWLOC_MS_LIB_ARCH)\n\n    AC_CHECK_SIZEOF([unsigned long])\n    AC_DEFINE_UNQUOTED([HWLOC_SIZEOF_UNSIGNED_LONG], $ac_cv_sizeof_unsigned_long, [The size of `unsigned long', as computed by sizeof])\n    AC_CHECK_SIZEOF([unsigned int])\n    AC_DEFINE_UNQUOTED([HWLOC_SIZEOF_UNSIGNED_INT], $ac_cv_sizeof_unsigned_int, [The size of `unsigned int', as computed by sizeof])\n\n    #\n    # Check for compiler attributes and visibility\n    #\n    _HWLOC_C_COMPILER_VENDOR([hwloc_c_vendor])\n    _HWLOC_CHECK_ATTRIBUTES\n    _HWLOC_CHECK_VISIBILITY\n    HWLOC_CFLAGS=\"$HWLOC_FLAGS $HWLOC_VISIBILITY_CFLAGS\"\n    AS_IF([test \"$HWLOC_VISIBILITY_CFLAGS\" != \"\"],\n          [AC_MSG_WARN([\"$HWLOC_VISIBILITY_CFLAGS\" has been added to the hwloc CFLAGS])])\n\n    # Make sure the compiler returns an error code when function arg\n    # count is wrong, otherwise sched_setaffinity checks may fail.\n    HWLOC_STRICT_ARGS_CFLAGS=\n    hwloc_args_check=0\n    AC_MSG_CHECKING([whether the C compiler rejects function calls with too many arguments])\n    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n        extern int one_arg(int x);\n        int foo(void) { return one_arg(1, 2); }\n      ]])],\n      [AC_MSG_RESULT([no])],\n      [hwloc_args_check=1\n       AC_MSG_RESULT([yes])])\n    AC_MSG_CHECKING([whether the C compiler rejects function calls with too few arguments])\n    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n        extern int two_arg(int x, int y);\n        int foo(void) { return two_arg(3); }\n      ]])],\n      [AC_MSG_RESULT([no])],\n      [hwloc_args_check=`expr $hwloc_args_check + 1`\n       AC_MSG_RESULT([yes])])\n    AS_IF([test \"$hwloc_args_check\" != \"2\"],[\n         AC_MSG_WARN([Your C compiler does not consider incorrect argument counts to be a fatal error.])\n        case \"$hwloc_c_vendor\" in\n        ibm)\n            HWLOC_STRICT_ARGS_CFLAGS=\"-qhalt=e\"\n            ;;\n        intel)\n            HWLOC_STRICT_ARGS_CFLAGS=\"-we140\"\n            ;;\n        *)\n            HWLOC_STRICT_ARGS_CFLAGS=FAIL\n            AC_MSG_WARN([Please report this warning and configure using a different C compiler if possible.])\n            ;;\n        esac\n        AS_IF([test \"$HWLOC_STRICT_ARGS_CFLAGS\" != \"FAIL\"],[\n            AC_MSG_WARN([Configure will append '$HWLOC_STRICT_ARGS_CFLAGS' to the value of CFLAGS when needed.])\n             AC_MSG_WARN([Alternatively you may configure with a different compiler.])\n        ])\n    ])\n\n    AS_IF([test \"$hwloc_mode\" = \"standalone\"],[\n        # For the common developer case, if we're in a developer checkout and\n        # using the GNU compilers, turn on maximum warnings unless\n        # specifically disabled by the user.\n        AC_MSG_CHECKING([whether to enable \"picky\" compiler mode])\n        hwloc_want_picky=0\n        AS_IF([test \"$hwloc_c_vendor\" = \"gnu\"],\n              [AS_IF([test -e \"$srcdir/.git\"],\n                     [hwloc_want_picky=1])])\n        if test \"$enable_picky\" = \"yes\"; then\n            if test \"$GCC\" = \"yes\"; then\n                AC_MSG_RESULT([yes])\n                hwloc_want_picky=1\n            else\n                AC_MSG_RESULT([no])\n                AC_MSG_WARN([Warning: --enable-picky used, but is currently only defined for the GCC compiler set -- automatically disabled])\n                hwloc_want_picky=0\n            fi\n        elif test \"$enable_picky\" = \"no\"; then\n            AC_MSG_RESULT([no])\n            hwloc_want_picky=0\n        else\n            if test \"$hwloc_want_picky\" = 1; then\n                AC_MSG_RESULT([yes (default)])\n            else\n                AC_MSG_RESULT([no (default)])\n            fi\n        fi\n        if test \"$hwloc_want_picky\" = 1; then\n            add=\"-Wall -Wextra -Wunused-parameter -Wundef -Wno-long-long -Wsign-compare\"\n            add=\"$add -Wmissing-declarations -Wmissing-prototypes -Wstrict-prototypes\"\n            add=\"$add -Wcomment -pedantic -Wshadow -Wwrite-strings -Wnested-externs\"\n            add=\"$add -Wpointer-arith -Wbad-function-cast -Wold-style-definition\"\n            add=\"$add -Werror-implicit-function-declaration\"\n\n\t    _HWLOC_CHECK_GCC_OPTION([-Wdiscarded-qualifiers], [add])\n\t    _HWLOC_CHECK_GCC_OPTION([-Wvariadic-macros], [add])\n\t    _HWLOC_CHECK_GCC_OPTION([-Wtype-limits], [add])\n\t    _HWLOC_CHECK_GCC_OPTION([-Wstack-usage=262144], [add])\n\n\t    # -Wextra enables some -Wfoo that we want to disable it at some place\n\t    _HWLOC_CHECK_GCC_OPTION([-Wmissing-field-initializers], [add], [AC_DEFINE(HWLOC_HAVE_GCC_W_MISSING_FIELD_INITIALIZERS, 1, [Define to 1 if gcc -Wmissing-field-initializers is supported and enabled])])\n\t    _HWLOC_CHECK_GCC_OPTION([-Wcast-function-type], [add], [AC_DEFINE(HWLOC_HAVE_GCC_W_CAST_FUNCTION_TYPE, 1, [Define to 1 if gcc -Wcast-function-type is supported and enabled])])\n\n            HWLOC_CFLAGS=\"$HWLOC_CFLAGS $add\"\n        fi\n    ])\n\n    #\n    # Now detect support\n    #\n\n    AC_CHECK_HEADERS([unistd.h])\n    AC_CHECK_HEADERS([dirent.h])\n    AC_CHECK_HEADERS([strings.h])\n    AC_CHECK_HEADERS([ctype.h])\n\n    if test x$hwloc_freebsd = xyes; then\n\n      AC_CHECK_HEADERS([sys/domainset.h])\n\n    fi\n\n\n    AC_CHECK_FUNCS([strcasecmp], [\n      _HWLOC_CHECK_DECL([strcasecmp], [\n\tAC_DEFINE([HWLOC_HAVE_DECL_STRCASECMP], [1], [Define to 1 if function `strcasecmp' is declared by system headers])\n      ])\n    ])\n    AC_CHECK_FUNCS([strncasecmp], [\n      _HWLOC_CHECK_DECL([strncasecmp], [\n\tAC_DEFINE([HWLOC_HAVE_DECL_STRNCASECMP], [1], [Define to 1 if function `strncasecmp' is declared by system headers])\n      ])\n    ])\n\n    AC_CHECK_FUNCS([strftime])\n    AC_CHECK_FUNCS([setlocale])\n\n    AC_CHECK_HEADER([stdint.h], [\n      AC_DEFINE([HWLOC_HAVE_STDINT_H], [1], [Define to 1 if you have the <stdint.h> header file.])\n    ])\n    AC_CHECK_HEADERS([sys/mman.h])\n\n    old_CPPFLAGS=\"$CPPFLAGS\"\n    CPPFLAGS=\"$CPPFLAGS -D_WIN32_WINNT=0x0601\"\n    AC_CHECK_TYPES([KAFFINITY,\n                    PROCESSOR_CACHE_TYPE,\n                    CACHE_DESCRIPTOR,\n                    LOGICAL_PROCESSOR_RELATIONSHIP,\n                    RelationProcessorPackage,\n                    SYSTEM_LOGICAL_PROCESSOR_INFORMATION,\n                    GROUP_AFFINITY,\n                    PROCESSOR_RELATIONSHIP,\n                    NUMA_NODE_RELATIONSHIP,\n                    CACHE_RELATIONSHIP,\n                    PROCESSOR_GROUP_INFO,\n                    GROUP_RELATIONSHIP,\n                    SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX,\n\t\t    PSAPI_WORKING_SET_EX_BLOCK,\n\t\t    PSAPI_WORKING_SET_EX_INFORMATION,\n\t\t    PROCESSOR_NUMBER],\n                    [],[],[[#include <windows.h>]])\n    CPPFLAGS=\"$old_CPPFLAGS\"\n    AC_CHECK_LIB([gdi32], [main],\n                 [HWLOC_LIBS=\"-lgdi32 $HWLOC_LIBS\"\n                  AC_DEFINE([HAVE_LIBGDI32], 1, [Define to 1 if we have -lgdi32])])\n    AC_CHECK_LIB([user32], [PostQuitMessage], [hwloc_have_user32=\"yes\"])\n\n    AC_CHECK_HEADER([windows.h], [\n      AC_DEFINE([HWLOC_HAVE_WINDOWS_H], [1], [Define to 1 if you have the `windows.h' header.])\n    ])\n\n    AC_CHECK_HEADERS([sys/lgrp_user.h], [\n      AC_CHECK_LIB([lgrp], [lgrp_init],\n                   [HWLOC_LIBS=\"-llgrp $HWLOC_LIBS\"\n                    AC_DEFINE([HAVE_LIBLGRP], 1, [Define to 1 if we have -llgrp])\n                    AC_CHECK_DECLS([lgrp_latency_cookie],,,[[#include <sys/lgrp_user.h>]])\n      ])\n    ])\n    AC_CHECK_HEADERS([kstat.h], [\n      AC_CHECK_LIB([kstat], [main],\n                   [HWLOC_LIBS=\"-lkstat $HWLOC_LIBS\"\n                    AC_DEFINE([HAVE_LIBKSTAT], 1, [Define to 1 if we have -lkstat])])\n    ])\n\n    AC_CHECK_DECLS([fabsf], [\n      AC_CHECK_LIB([m], [fabsf],\n                   [need_libm=yes])\n    ], [], [[#include <math.h>]])\n    AC_CHECK_DECLS([modff], [\n      AC_CHECK_LIB([m], [modff],\n                   [need_libm=yes])\n    ], [], [[#include <math.h>]])\n    if test x$need_libm = xyes; then\n      HWLOC_LIBS=\"-lm $HWLOC_LIBS\"\n    fi\n\n    AC_CHECK_HEADERS([picl.h], [\n      AC_CHECK_LIB([picl], [picl_initialize],\n                   [HWLOC_LIBS=\"-lpicl $HWLOC_LIBS\"])])\n\n    AC_CHECK_DECLS([_SC_NPROCESSORS_ONLN,\n    \t\t_SC_NPROCESSORS_CONF,\n    \t\t_SC_NPROC_ONLN,\n    \t\t_SC_NPROC_CONF,\n    \t\t_SC_PAGESIZE,\n    \t\t_SC_PAGE_SIZE,\n    \t\t_SC_LARGE_PAGESIZE],,[:],[[#include <unistd.h>]])\n\n    AC_HAVE_HEADERS([mach/mach_init.h])\n    AC_HAVE_HEADERS([mach_init.h])\n    AC_HAVE_HEADERS([mach/mach_host.h], [\n      AC_CHECK_FUNCS([host_info])\n    ])\n\n    AC_CHECK_DECLS([strtoull], [], [AC_CHECK_FUNCS([strtoull])], [AC_INCLUDES_DEFAULT])\n\n    # Needed for Windows in private/misc.h\n    AC_CHECK_TYPES([ssize_t])\n    AC_CHECK_DECLS([snprintf], [], [], [AC_INCLUDES_DEFAULT])\n    # strdup and putenv are declared in windows headers but marked deprecated\n    AC_CHECK_DECLS([_strdup], [], [], [AC_INCLUDES_DEFAULT])\n    AC_CHECK_DECLS([_putenv], [], [], [AC_INCLUDES_DEFAULT])\n    # Could add mkdir and access for hwloc-gather-cpuid.c on Windows\n\n    broken_snprintf=no\n    AC_MSG_CHECKING([whether snprintf is correct])\n    AC_RUN_IFELSE([\n      AC_LANG_PROGRAM([[\n#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n        ]], [[\nchar buf[7];\nassert(snprintf(buf, 7, \"abcdef\") == 6);\nassert(snprintf(buf, 6, \"abcdef\") == 6);\nassert(snprintf(buf, 5, \"abcdef\") == 6);\nassert(snprintf(buf, 0, \"abcdef\") == 6);\nassert(snprintf(NULL, 0, \"abcdef\") == 6);\nreturn 0;\n        ]])],\n\tAC_MSG_RESULT([yes]),\n\t[\n\t  AC_MSG_RESULT([no])\n\t  broken_snprintf=yes\n\t], [\n\t  AC_MSG_RESULT([don't know (cross-compiling)])\n\t  broken_snprintf=maybe\n\t])\n\n    if test x$broken_snprintf = xno; then\n      AC_DEFINE([HWLOC_HAVE_CORRECT_SNPRINTF], 1, [Define to 1 if snprintf supports NULL output buffer and returns the correct length on truncation])\n    fi\n\n    if test \"x$hwloc_linux\" != \"xyes\" ; then\n      # Don't look for sys/sysctl.h on Linux because it's deprecated and\n      # generates a warning in GCC10. Also it's unneeded.\n      AC_CHECK_HEADERS([sys/param.h])\n      AC_CHECK_HEADERS([sys/sysctl.h], [\n        AC_CHECK_DECLS([CTL_HW, HW_NCPU, HW_REALMEM64, HW_MEMSIZE64, HW_PHYSMEM64, HW_USERMEM64, HW_REALMEM, HW_MEMSIZE, HW_PHYSMEM, HW_USERMEM],,,[[\n        #if HAVE_SYS_PARAM_H\n        #include <sys/param.h>\n        #endif\n        #include <sys/sysctl.h>\n        ]])\n      ],,[\n        AC_INCLUDES_DEFAULT\n        #if HAVE_SYS_PARAM_H\n        #include <sys/param.h>\n        #endif\n      ])\n\n      # Don't detect sysctl* on Linux because its sysctl() syscall is\n      # long deprecated and unneeded. Some libc still expose the symbol\n      # and raise a big warning at link time.\n\n      # Do a full link test instead of just using AC_CHECK_FUNCS, which\n      # just checks to see if the symbol exists or not.  For example,\n      # the prototype of sysctl uses u_int, which on some platforms\n      # (such as FreeBSD) is only defined under __BSD_VISIBLE, __USE_BSD\n      # or other similar definitions.  So while the symbols \"sysctl\" and\n      # \"sysctlbyname\" might still be available in libc (which autoconf\n      # checks for), they might not be actually usable.\n      AC_MSG_CHECKING([for sysctl])\n      AC_TRY_LINK([\n                 #include <stdio.h>\n                 #include <sys/types.h>\n                 #include <sys/sysctl.h>\n                 ],\n                  [return sysctl(NULL,0,NULL,NULL,NULL,0);],\n                  [AC_DEFINE([HAVE_SYSCTL],[1],[Define to '1' if sysctl is present and usable])\n                   AC_MSG_RESULT(yes)],\n                  [AC_MSG_RESULT(no)])\n      AC_MSG_CHECKING([for sysctlbyname])\n      AC_TRY_LINK([\n                 #include <stdio.h>\n                 #include <sys/types.h>\n                 #include <sys/sysctl.h>\n                 ],\n                  [return sysctlbyname(NULL,NULL,NULL,NULL,0);],\n                  [AC_DEFINE([HAVE_SYSCTLBYNAME],[1],[Define to '1' if sysctlbyname is present and usable])\n                   AC_MSG_RESULT(yes)],\n                  [AC_MSG_RESULT(no)])\n    fi\n\n    AC_CHECK_DECLS([getprogname], [], [], [AC_INCLUDES_DEFAULT])\n    AC_CHECK_DECLS([getexecname], [], [], [AC_INCLUDES_DEFAULT])\n    AC_CHECK_DECLS([GetModuleFileName], [], [], [#include <windows.h>])\n    # program_invocation_name and __progname may be available but not exported in headers\n    AC_MSG_CHECKING([for program_invocation_name])\n    AC_TRY_LINK([\n\t\t#ifndef _GNU_SOURCE\n\t\t# define _GNU_SOURCE\n\t\t#endif\n\t\t#include <errno.h>\n\t\t#include <stdio.h>\n\t\textern char *program_invocation_name;\n\t\t],[\n\t\treturn printf(\"%s\\n\", program_invocation_name);\n\t\t],\n\t\t[AC_DEFINE([HAVE_PROGRAM_INVOCATION_NAME], [1], [Define to '1' if program_invocation_name is present and usable])\n\t\t AC_MSG_RESULT([yes])\n\t\t],[AC_MSG_RESULT([no])])\n    AC_MSG_CHECKING([for __progname])\n    AC_TRY_LINK([\n\t\t#include <stdio.h>\n\t\textern char *__progname;\n\t\t],[\n\t\treturn printf(\"%s\\n\", __progname);\n\t\t],\n\t\t[AC_DEFINE([HAVE___PROGNAME], [1], [Define to '1' if __progname is present and usable])\n\t\t AC_MSG_RESULT([yes])\n\t\t],[AC_MSG_RESULT([no])])\n\n    case ${target} in\n      *-*-mingw*|*-*-cygwin*)\n        hwloc_pid_t=HANDLE\n        hwloc_thread_t=HANDLE\n        ;;\n      *)\n        hwloc_pid_t=pid_t\n        AC_CHECK_TYPES([pthread_t], [hwloc_thread_t=pthread_t], [:], [[#include <pthread.h>]])\n        ;;\n    esac\n    AC_DEFINE_UNQUOTED(hwloc_pid_t, $hwloc_pid_t, [Define this to the process ID type])\n    if test \"x$hwloc_thread_t\" != \"x\" ; then\n      AC_DEFINE_UNQUOTED(hwloc_thread_t, $hwloc_thread_t, [Define this to the thread ID type])\n    fi\n\n    AC_CHECK_DECLS([sched_getcpu],,[:],[[\n      #ifndef _GNU_SOURCE\n      # define _GNU_SOURCE\n      #endif\n      #include <sched.h>\n    ]])\n\n    _HWLOC_CHECK_DECL([sched_setaffinity], [\n      AC_DEFINE([HWLOC_HAVE_SCHED_SETAFFINITY], [1], [Define to 1 if glibc provides a prototype of sched_setaffinity()])\n      AS_IF([test \"$HWLOC_STRICT_ARGS_CFLAGS\" = \"FAIL\"],[\n        AC_MSG_WARN([Support for sched_setaffinity() requires a C compiler which])\n        AC_MSG_WARN([considers incorrect argument counts to be a fatal error.])\n        AC_MSG_ERROR([Cannot continue.])\n      ])\n      AC_MSG_CHECKING([for old prototype of sched_setaffinity])\n      hwloc_save_CFLAGS=$CFLAGS\n      CFLAGS=\"$CFLAGS $HWLOC_STRICT_ARGS_CFLAGS\"\n      AC_COMPILE_IFELSE([\n          AC_LANG_PROGRAM([[\n              #ifndef _GNU_SOURCE\n              # define _GNU_SOURCE\n              #endif\n              #include <sched.h>\n              static unsigned long mask;\n              ]], [[ sched_setaffinity(0, (void*) &mask); ]])],\n          [AC_DEFINE([HWLOC_HAVE_OLD_SCHED_SETAFFINITY], [1], [Define to 1 if glibc provides the old prototype (without length) of sched_setaffinity()])\n           AC_MSG_RESULT([yes])],\n          [AC_MSG_RESULT([no])])\n      CFLAGS=$hwloc_save_CFLAGS\n    ], , [[\n#ifndef _GNU_SOURCE\n# define _GNU_SOURCE\n#endif\n#include <sched.h>\n]])\n\n    AC_MSG_CHECKING([for working CPU_SET])\n    AC_LINK_IFELSE([\n      AC_LANG_PROGRAM([[\n        #include <sched.h>\n        cpu_set_t set;\n        ]], [[ CPU_ZERO(&set); CPU_SET(0, &set);]])],\n\t[AC_DEFINE([HWLOC_HAVE_CPU_SET], [1], [Define to 1 if the CPU_SET macro works])\n         AC_MSG_RESULT([yes])],\n        [AC_MSG_RESULT([no])])\n\n    AC_MSG_CHECKING([for working CPU_SET_S])\n    AC_LINK_IFELSE([\n      AC_LANG_PROGRAM([[\n          #include <sched.h>\n          cpu_set_t *set;\n        ]], [[\n          set = CPU_ALLOC(1024);\n          CPU_ZERO_S(CPU_ALLOC_SIZE(1024), set);\n          CPU_SET_S(CPU_ALLOC_SIZE(1024), 0, set);\n          CPU_FREE(set);\n        ]])],\n        [AC_DEFINE([HWLOC_HAVE_CPU_SET_S], [1], [Define to 1 if the CPU_SET_S macro works])\n         AC_MSG_RESULT([yes])],\n        [AC_MSG_RESULT([no])])\n\n    AC_MSG_CHECKING([for working syscall with 6 parameters])\n    AC_LINK_IFELSE([\n      AC_LANG_PROGRAM([[\n          #include <unistd.h>\n          #include <sys/syscall.h>\n          ]], [[syscall(0, 1, 2, 3, 4, 5, 6);]])],\n        [AC_DEFINE([HWLOC_HAVE_SYSCALL], [1], [Define to 1 if function `syscall' is available with 6 parameters])\n         AC_MSG_RESULT([yes])],\n        [AC_MSG_RESULT([no])])\n\n    AC_PATH_PROGS([HWLOC_MS_LIB], [lib])\n    AC_ARG_VAR([HWLOC_MS_LIB], [Path to Microsoft's Visual Studio `lib' tool])\n\n    AC_PATH_PROG([BASH], [bash])\n\n    AC_CHECK_FUNCS([ffs], [\n      _HWLOC_CHECK_DECL([ffs],[\n        AC_DEFINE([HWLOC_HAVE_DECL_FFS], [1], [Define to 1 if function `ffs' is declared by system headers])\n      ])\n      AC_DEFINE([HWLOC_HAVE_FFS], [1], [Define to 1 if you have the `ffs' function.])\n      if ( $CC --version | grep gccfss ) >/dev/null 2>&1 ; then\n        dnl May be broken due to\n        dnl    https://forums.oracle.com/forums/thread.jspa?threadID=1997328\n        dnl TODO: a more selective test, since bug may be version dependent.\n        dnl We can't use AC_TRY_LINK because the failure does not appear until\n        dnl run/load time and there is currently no precedent for AC_TRY_RUN\n        dnl use in hwloc.  --PHH\n        dnl For now, we're going with \"all gccfss compilers are broken\".\n        dnl Better to be safe and correct; it's not like this is\n        dnl performance-critical code, after all.\n        AC_DEFINE([HWLOC_HAVE_BROKEN_FFS], [1],\n                  [Define to 1 if your `ffs' function is known to be broken.])\n      fi\n    ])\n    AC_CHECK_FUNCS([ffsl], [\n      _HWLOC_CHECK_DECL([ffsl],[\n        AC_DEFINE([HWLOC_HAVE_DECL_FFSL], [1], [Define to 1 if function `ffsl' is declared by system headers])\n      ])\n      AC_DEFINE([HWLOC_HAVE_FFSL], [1], [Define to 1 if you have the `ffsl' function.])\n    ])\n\n    AC_CHECK_FUNCS([fls], [\n      _HWLOC_CHECK_DECL([fls],[\n        AC_DEFINE([HWLOC_HAVE_DECL_FLS], [1], [Define to 1 if function `fls' is declared by system headers])\n      ])\n      AC_DEFINE([HWLOC_HAVE_FLS], [1], [Define to 1 if you have the `fls' function.])\n    ])\n    AC_CHECK_FUNCS([flsl], [\n      _HWLOC_CHECK_DECL([flsl],[\n        AC_DEFINE([HWLOC_HAVE_DECL_FLSL], [1], [Define to 1 if function `flsl' is declared by system headers])\n      ])\n      AC_DEFINE([HWLOC_HAVE_FLSL], [1], [Define to 1 if you have the `flsl' function.])\n    ])\n\n    AC_CHECK_FUNCS([clz], [\n      _HWLOC_CHECK_DECL([clz],[\n        AC_DEFINE([HWLOC_HAVE_DECL_CLZ], [1], [Define to 1 if function `clz' is declared by system headers])\n      ])\n      AC_DEFINE([HWLOC_HAVE_CLZ], [1], [Define to 1 if you have the `clz' function.])\n    ])\n    AC_CHECK_FUNCS([clzl], [\n      _HWLOC_CHECK_DECL([clzl],[\n        AC_DEFINE([HWLOC_HAVE_DECL_CLZL], [1], [Define to 1 if function `clzl' is declared by system headers])\n      ])\n      AC_DEFINE([HWLOC_HAVE_CLZL], [1], [Define to 1 if you have the `clzl' function.])\n    ])\n\n    AS_IF([test \"$hwloc_c_vendor\" != \"android\"], [AC_CHECK_FUNCS([openat], [hwloc_have_openat=yes])])\n\n\n    AC_CHECK_HEADERS([malloc.h])\n    AC_CHECK_FUNCS([getpagesize memalign posix_memalign])\n\n    AC_CHECK_HEADERS([sys/utsname.h])\n    AC_CHECK_FUNCS([uname])\n\n    dnl Don't check for valgrind in embedded mode because this may conflict\n    dnl with the embedder projects also checking for it.\n    dnl We only use Valgrind to nicely disable the x86 backend with a warning,\n    dnl but we can live without it in embedded mode (it auto-disables itself\n    dnl because of invalid CPUID outputs).\n    dnl Non-embedded checks usually go to hwloc_internal.m4 but this one is\n    dnl is really for the core library.\n    AS_IF([test \"$hwloc_mode\" != \"embedded\"],\n        [AC_CHECK_HEADERS([valgrind/valgrind.h])\n         AC_CHECK_DECLS([RUNNING_ON_VALGRIND],,[:],[[#include <valgrind/valgrind.h>]])\n\t],[\n\t AC_DEFINE([HAVE_DECL_RUNNING_ON_VALGRIND], [0], [Embedded mode; just assume we do not have Valgrind support])\n\t])\n\n    AC_CHECK_HEADERS([pthread_np.h])\n    AC_CHECK_DECLS([pthread_setaffinity_np],,[:],[[\n      #include <pthread.h>\n      #ifdef HAVE_PTHREAD_NP_H\n      #  include <pthread_np.h>\n      #endif\n    ]])\n    AC_CHECK_DECLS([pthread_getaffinity_np],,[:],[[\n      #include <pthread.h>\n      #ifdef HAVE_PTHREAD_NP_H\n      #  include <pthread_np.h>\n      #endif\n    ]])\n    AC_CHECK_FUNC([sched_setaffinity], [hwloc_have_sched_setaffinity=yes])\n    AC_CHECK_HEADERS([sys/cpuset.h],,,[[#include <sys/param.h>]])\n    AC_CHECK_FUNCS([cpuset_setaffinity])\n    AC_SEARCH_LIBS([pthread_getthrds_np], [pthread],\n      AC_DEFINE([HWLOC_HAVE_PTHREAD_GETTHRDS_NP], 1, `Define to 1 if you have pthread_getthrds_np')\n    )\n    AC_CHECK_FUNCS([cpuset_setid])\n\n    # Linux libudev support\n    if test \"x$enable_libudev\" != xno; then\n      AC_CHECK_HEADERS([libudev.h], [\n\tAC_CHECK_LIB([udev], [udev_device_new_from_subsystem_sysname], [\n\t  HWLOC_LIBS=\"$HWLOC_LIBS -ludev\"\n\t  AC_DEFINE([HWLOC_HAVE_LIBUDEV], [1], [Define to 1 if you have libudev.])\n\t])\n      ])\n    fi\n\n    AS_IF([test \"x$enable_32bits_pci_domain\" = \"xyes\"], [\n      AC_DEFINE([HWLOC_HAVE_32BITS_PCI_DOMAIN], 1,\n        [Define to 1 if --enable-32bits-pci-domain is called.])\n    ])\n\n    # PCI support via libpciaccess.  NOTE: we do not support\n    # libpci/pciutils because that library is GPL and is incompatible\n    # with our BSD license.\n    hwloc_pciaccess_happy=no\n    if test \"x$enable_io\" != xno && test \"x$enable_pci\" != xno; then\n      hwloc_pciaccess_happy=yes\n      HWLOC_PKG_CHECK_MODULES([PCIACCESS], [pciaccess], [pci_slot_match_iterator_create], [pciaccess.h], [:], [hwloc_pciaccess_happy=no])\n\n      # Only add the REQUIRES if we got pciaccess through pkg-config.\n      # Otherwise we don't know if pciaccess.pc is installed\n      AS_IF([test \"$hwloc_pciaccess_happy\" = \"yes\"], [HWLOC_PCIACCESS_REQUIRES=pciaccess])\n\n      # Just for giggles, if we didn't find a pciaccess pkg-config,\n      # just try looking for its header file and library.\n      AS_IF([test \"$hwloc_pciaccess_happy\" != \"yes\"],\n         [AC_CHECK_HEADER([pciaccess.h],\n              [AC_CHECK_LIB([pciaccess], [pci_slot_match_iterator_create],\n                   [hwloc_pciaccess_happy=yes\n                    HWLOC_PCIACCESS_LIBS=\"-lpciaccess\"])\n              ])\n         ])\n\n      AS_IF([test \"$hwloc_pciaccess_happy\" = \"yes\"],\n         [hwloc_components=\"$hwloc_components pci\"\n          hwloc_pci_component_maybeplugin=1])\n    fi\n    # If we asked for pci support but couldn't deliver, fail\n    AS_IF([test \"$enable_pci\" = \"yes\" -a \"$hwloc_pciaccess_happy\" = \"no\"],\n          [AC_MSG_WARN([Specified --enable-pci switch, but could not])\n           AC_MSG_WARN([find appropriate support])\n           AC_MSG_ERROR([Cannot continue])])\n    # don't add LIBS/CFLAGS/REQUIRES yet, depends on plugins\n\n    # OpenCL support\n    hwloc_opencl_happy=no\n    if test \"x$enable_io\" != xno && test \"x$enable_opencl\" != \"xno\"; then\n      hwloc_opencl_happy=yes\n      case ${target} in\n      *-*-darwin*)\n        # On Darwin, only use the OpenCL framework\n        AC_CHECK_HEADERS([OpenCL/cl_ext.h], [\n\t  AC_MSG_CHECKING([for the OpenCL framework])\n          tmp_save_LDFLAGS=\"$LDFLAGS\"\n          LDFLAGS=\"$LDFLAGS -framework OpenCL\"\n\t  AC_LINK_IFELSE([\n            AC_LANG_PROGRAM([[\n#include <OpenCL/opencl.h>\n            ]], [[\nreturn clGetDeviceIDs(0, 0, 0, NULL, NULL);\n            ]])],\n          [AC_MSG_RESULT(yes)\n\t   HWLOC_OPENCL_LDFLAGS=\"-framework OpenCL\"],\n\t  [AC_MSG_RESULT(no)\n\t   hwloc_opencl_happy=no])\n          LDFLAGS=\"$tmp_save_LDFLAGS\"\n        ], [hwloc_opencl_happy=no])\n      ;;\n      *)\n        # On Others, look for OpenCL at normal locations\n        AC_CHECK_HEADERS([CL/cl_ext.h], [\n\t  AC_CHECK_LIB([OpenCL], [clGetDeviceIDs], [HWLOC_OPENCL_LIBS=\"-lOpenCL\"], [hwloc_opencl_happy=no])\n        ], [hwloc_opencl_happy=no])\n      ;;\n      esac\n    fi\n    AC_SUBST(HWLOC_OPENCL_CFLAGS)\n    AC_SUBST(HWLOC_OPENCL_LIBS)\n    AC_SUBST(HWLOC_OPENCL_LDFLAGS)\n    # If we asked for opencl support but couldn't deliver, fail\n    AS_IF([test \"$enable_opencl\" = \"yes\" -a \"$hwloc_opencl_happy\" = \"no\"],\n          [AC_MSG_WARN([Specified --enable-opencl switch, but could not])\n           AC_MSG_WARN([find appropriate support])\n           AC_MSG_ERROR([Cannot continue])])\n    if test \"x$hwloc_opencl_happy\" = \"xyes\"; then\n      AC_DEFINE([HWLOC_HAVE_OPENCL], [1], [Define to 1 if you have the `OpenCL' library.])\n      AC_SUBST([HWLOC_HAVE_OPENCL], [1])\n      hwloc_components=\"$hwloc_components opencl\"\n      hwloc_opencl_component_maybeplugin=1\n    else\n      AC_SUBST([HWLOC_HAVE_OPENCL], [0])\n    fi\n    # don't add LIBS/CFLAGS/REQUIRES yet, depends on plugins\n\n    # CUDA support\n    hwloc_have_cuda=no\n    hwloc_have_cudart=no\n    if test \"x$enable_io\" != xno && test \"x$enable_cuda\" != \"xno\"; then\n      AC_CHECK_HEADERS([cuda.h], [\n        AC_MSG_CHECKING(if CUDA_VERSION >= 3020)\n        AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n#include <cuda.h>\n#ifndef CUDA_VERSION\n#error CUDA_VERSION undefined\n#elif CUDA_VERSION < 3020\n#error CUDA_VERSION too old\n#endif]], [[int i = 3;]])],\n         [AC_MSG_RESULT(yes)\n          AC_CHECK_LIB([cuda], [cuInit],\n                       [AC_DEFINE([HAVE_CUDA], 1, [Define to 1 if we have -lcuda])\n                        hwloc_have_cuda=yes])],\n         [AC_MSG_RESULT(no)])])\n\n      AC_CHECK_HEADERS([cuda_runtime_api.h], [\n        AC_MSG_CHECKING(if CUDART_VERSION >= 3020)\n        AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n#include <cuda_runtime_api.h>\n#ifndef CUDART_VERSION\n#error CUDART_VERSION undefined\n#elif CUDART_VERSION < 3020\n#error CUDART_VERSION too old\n#endif]], [[int i = 3;]])],\n         [AC_MSG_RESULT(yes)\n          AC_CHECK_LIB([cudart], [cudaGetDeviceProperties], [\n            HWLOC_CUDA_LIBS=\"-lcudart\"\n            AC_SUBST(HWLOC_CUDA_LIBS)\n            hwloc_have_cudart=yes\n            AC_DEFINE([HWLOC_HAVE_CUDART], [1], [Define to 1 if you have the `cudart' SDK.])\n          ])\n        ])\n      ])\n\n      AS_IF([test \"$enable_cuda\" = \"yes\" -a \"$hwloc_have_cudart\" = \"no\"],\n            [AC_MSG_WARN([Specified --enable-cuda switch, but could not])\n             AC_MSG_WARN([find appropriate support])\n             AC_MSG_ERROR([Cannot continue])])\n\n      if test \"x$hwloc_have_cudart\" = \"xyes\"; then\n\thwloc_components=\"$hwloc_components cuda\"\n        hwloc_cuda_component_maybeplugin=1\n      fi\n    fi\n    # don't add LIBS/CFLAGS yet, depends on plugins\n\n    # NVML support\n    hwloc_nvml_happy=no\n    if test \"x$enable_io\" != xno && test \"x$enable_nvml\" != \"xno\"; then\n\thwloc_nvml_happy=yes\n\tAC_CHECK_HEADERS([nvml.h], [\n\t  AC_CHECK_LIB([nvidia-ml], [nvmlInit], [HWLOC_NVML_LIBS=\"-lnvidia-ml\"], [hwloc_nvml_happy=no])\n        ], [hwloc_nvml_happy=no])\n    fi\n    if test \"x$hwloc_nvml_happy\" = \"xyes\"; then\n      tmp_save_CFLAGS=\"$CFLAGS\"\n      CFLAGS=\"$CFLAGS $HWLOC_NVML_CFLAGS\"\n      tmp_save_LIBS=\"$LIBS\"\n      LIBS=\"$LIBS $HWLOC_NVML_LIBS\"\n      AC_CHECK_DECLS([nvmlDeviceGetMaxPcieLinkGeneration],,[:],[[#include <nvml.h>]])\n      CFLAGS=\"$tmp_save_CFLAGS\"\n      LIBS=\"$tmp_save_LIBS\"\n    fi\n    AC_SUBST(HWLOC_NVML_LIBS)\n    # If we asked for nvml support but couldn't deliver, fail\n    AS_IF([test \"$enable_nvml\" = \"yes\" -a \"$hwloc_nvml_happy\" = \"no\"],\n\t  [AC_MSG_WARN([Specified --enable-nvml switch, but could not])\n\t   AC_MSG_WARN([find appropriate support])\n\t   AC_MSG_ERROR([Cannot continue])])\n    if test \"x$hwloc_nvml_happy\" = \"xyes\"; then\n      AC_DEFINE([HWLOC_HAVE_NVML], [1], [Define to 1 if you have the `NVML' library.])\n      AC_SUBST([HWLOC_HAVE_NVML], [1])\n      hwloc_components=\"$hwloc_components nvml\"\n      hwloc_nvml_component_maybeplugin=1\n    else\n      AC_SUBST([HWLOC_HAVE_NVML], [0])\n    fi\n    # don't add LIBS/CFLAGS/REQUIRES yet, depends on plugins\n\n    # X11 support\n    AC_PATH_XTRA\n\n    CPPFLAGS_save=$CPPFLAGS\n    LIBS_save=$LIBS\n\n    CPPFLAGS=\"$CPPFLAGS $X_CFLAGS\"\n    LIBS=\"$LIBS $X_PRE_LIBS $X_LIBS $X_EXTRA_LIBS\"\n    AC_CHECK_HEADERS([X11/Xlib.h],\n        [AC_CHECK_LIB([X11], [XOpenDisplay],\n            [\n             # the GL backend just needs XOpenDisplay\n             hwloc_enable_X11=yes\n             # lstopo needs more\n             AC_CHECK_HEADERS([X11/Xutil.h],\n                [AC_CHECK_HEADERS([X11/keysym.h],\n                    [AC_DEFINE([HWLOC_HAVE_X11_KEYSYM], [1], [Define to 1 if X11 headers including Xutil.h and keysym.h are available.])\n                     hwloc_x11_keysym_happy=yes\n                     HWLOC_X11_CPPFLAGS=\"$X_CFLAGS\"\n                     AC_SUBST([HWLOC_X11_CPPFLAGS])\n                     HWLOC_X11_LIBS=\"$X_PRE_LIBS $X_LIBS -lX11 $X_EXTRA_LIBS\"\n                     AC_SUBST([HWLOC_X11_LIBS])])\n                ], [], [#include <X11/Xlib.h>])\n            ])\n         ])\n    CPPFLAGS=$CPPFLAGS_save\n    LIBS=$LIBS_save\n\n    # GL Support\n    hwloc_gl_happy=no\n    if test \"x$enable_io\" != xno && test \"x$enable_gl\" != \"xno\"; then\n\thwloc_gl_happy=yes\n\n\tAS_IF([test \"$hwloc_enable_X11\" != \"yes\"],\n              [AC_MSG_WARN([X11 not found; GL disabled])\n               hwloc_gl_happy=no])\n\n        AC_CHECK_HEADERS([NVCtrl/NVCtrl.h], [\n          AC_CHECK_LIB([XNVCtrl], [XNVCTRLQueryTargetAttribute], [:], [hwloc_gl_happy=no], [-lXext])\n        ], [hwloc_gl_happy=no])\n\n        if test \"x$hwloc_gl_happy\" = \"xyes\"; then\n            AC_DEFINE([HWLOC_HAVE_GL], [1], [Define to 1 if you have the GL module components.])\n\t    HWLOC_GL_LIBS=\"-lXNVCtrl -lXext -lX11\"\n\t    AC_SUBST(HWLOC_GL_LIBS)\n\t    # FIXME we actually don't know if xext.pc and x11.pc are installed\n\t    # since we didn't look for Xext and X11 using pkg-config\n\t    HWLOC_GL_REQUIRES=\"xext x11\"\n            hwloc_have_gl=yes\n\t    hwloc_components=\"$hwloc_components gl\"\n\t    hwloc_gl_component_maybeplugin=1\n\telse\n            AS_IF([test \"$enable_gl\" = \"yes\"], [\n                AC_MSG_WARN([Specified --enable-gl switch, but could not])\n                AC_MSG_WARN([find appropriate support])\n                AC_MSG_ERROR([Cannot continue])\n            ])\n        fi\n    fi\n    # don't add LIBS/CFLAGS yet, depends on plugins\n\n    # libxml2 support\n    hwloc_libxml2_happy=\n    if test \"x$enable_libxml2\" != \"xno\"; then\n        HWLOC_PKG_CHECK_MODULES([LIBXML2], [libxml-2.0], [xmlNewDoc], [libxml/parser.h],\n                                [hwloc_libxml2_happy=yes],\n                                [hwloc_libxml2_happy=no])\n    fi\n    if test \"x$hwloc_libxml2_happy\" = \"xyes\"; then\n        HWLOC_LIBXML2_REQUIRES=\"libxml-2.0\"\n        AC_DEFINE([HWLOC_HAVE_LIBXML2], [1], [Define to 1 if you have the `libxml2' library.])\n        AC_SUBST([HWLOC_HAVE_LIBXML2], [1])\n\n        hwloc_components=\"$hwloc_components xml_libxml\"\n        hwloc_xml_libxml_component_maybeplugin=1\n    else\n        AC_SUBST([HWLOC_HAVE_LIBXML2], [0])\n\tAS_IF([test \"$enable_libxml2\" = \"yes\"],\n              [AC_MSG_WARN([--enable-libxml2 requested, but libxml2 was not found])\n               AC_MSG_ERROR([Cannot continue])])\n    fi\n    # don't add LIBS/CFLAGS/REQUIRES yet, depends on plugins\n\n    # Try to compile the x86 cpuid inlines\n    if test \"x$enable_cpuid\" != \"xno\"; then\n\tAC_MSG_CHECKING([for x86 cpuid])\n\told_CPPFLAGS=\"$CPPFLAGS\"\n\tCPPFLAGS=\"$CPPFLAGS -I$HWLOC_top_srcdir/include\"\n\t# We need hwloc_uint64_t but we can't use autogen/config.h before configure ends.\n\t# So pass #include/#define manually here for now.\n\tCPUID_CHECK_HEADERS=\n\tCPUID_CHECK_DEFINE=\n\tif test \"x$hwloc_windows\" = xyes; then\n\t    X86_CPUID_CHECK_HEADERS=\"#include <windows.h>\"\n\t    X86_CPUID_CHECK_DEFINE=\"#define hwloc_uint64_t DWORDLONG\"\n\telse\n\t    X86_CPUID_CHECK_DEFINE=\"#define hwloc_uint64_t uint64_t\"\n\t    if test \"x$ac_cv_header_stdint_h\" = xyes; then\n\t        X86_CPUID_CHECK_HEADERS=\"#include <stdint.h>\"\n\t    fi\n\tfi\n\tAC_LINK_IFELSE([AC_LANG_PROGRAM([[\n\t    #include <stdio.h>\n\t    $X86_CPUID_CHECK_HEADERS\n\t    $X86_CPUID_CHECK_DEFINE\n\t    #define __hwloc_inline\n\t    #include <private/cpuid-x86.h>\n\t]], [[\n\t    if (hwloc_have_x86_cpuid()) {\n\t\tunsigned eax = 0, ebx, ecx = 0, edx;\n\t\thwloc_x86_cpuid(&eax, &ebx, &ecx, &edx);\n\t\tprintf(\"highest x86 cpuid %x\\n\", eax);\n\t\treturn 0;\n\t    }\n\t]])],\n\t[AC_MSG_RESULT([yes])\n\t AC_DEFINE(HWLOC_HAVE_X86_CPUID, 1, [Define to 1 if you have x86 cpuid])\n\t hwloc_have_x86_cpuid=yes],\n\t[AC_MSG_RESULT([no])])\n\tif test \"x$hwloc_have_x86_cpuid\" = xyes; then\n\t    hwloc_components=\"$hwloc_components x86\"\n\tfi\n\tCPPFLAGS=\"$old_CPPFLAGS\"\n    fi\n\n    # Components require pthread_mutex, see if it needs -lpthread\n    hwloc_pthread_mutex_happy=no\n    # Try without explicit -lpthread first\n    AC_CHECK_FUNC([pthread_mutex_lock],\n      [hwloc_pthread_mutex_happy=yes\n       HWLOC_LIBS_PRIVATE=\"$HWLOC_LIBS_PRIVATE -lpthread\"\n      ],\n      [AC_MSG_CHECKING([for pthread_mutex_lock with -lpthread])\n       # Try again with explicit -lpthread, but don't use AC_CHECK_FUNC to avoid the cache\n       tmp_save_LIBS=$LIBS\n       LIBS=\"$LIBS -lpthread\"\n       AC_LINK_IFELSE([AC_LANG_CALL([], [pthread_mutex_lock])],\n         [hwloc_pthread_mutex_happy=yes\n          HWLOC_LIBS=\"$HWLOC_LIBS -lpthread\"\n         ])\n       AC_MSG_RESULT([$hwloc_pthread_mutex_happy])\n       LIBS=\"$tmp_save_LIBS\"\n      ])\n    AS_IF([test \"x$hwloc_pthread_mutex_happy\" = \"xyes\"],\n      [AC_DEFINE([HWLOC_HAVE_PTHREAD_MUTEX], 1, [Define to 1 if pthread mutexes are available])])\n\n    AS_IF([test \"x$hwloc_pthread_mutex_happy\" != xyes -a \"x$hwloc_windows\" != xyes],\n      [AC_MSG_WARN([pthread_mutex_lock not available, required for thread-safe initialization on non-Windows platforms.])\n       AC_MSG_WARN([Please report this to the hwloc-devel mailing list.])\n       AC_MSG_ERROR([Cannot continue])])\n\n    #\n    # Now enable registration of listed components\n    #\n\n    # Plugin support\n    AC_MSG_CHECKING([if plugin support is enabled])\n    # Plugins (even core support) are totally disabled by default.\n    # Pass --enable-plugins=foo (with \"foo\" NOT an existing component) to enable plugins but build none of them.\n    if test \"x$enable_plugins\" = xyes; then\n      hwloc_have_plugins=yes\n      requested_plugins=\"$hwloc_components\"\n    else if test \"x$enable_plugins\" != xno -a \"x$enable_plugins\" != x; then\n      hwloc_have_plugins=yes\n      requested_plugins=`echo $enable_plugins | sed -e 's/,/ /g'`\n    else\n      hwloc_have_plugins=no\n    fi fi\n    AC_MSG_RESULT($hwloc_have_plugins)\n\n    if test \"x$hwloc_have_plugins\" = xyes; then\n      # dlopen and ltdl (at least 2.4.2) doesn't work on AIX\n      # posix linkers don't work well with plugins and windows dll constraints\n      if test \"x$enable_plugin_dlopen\" = x; then\n        if test \"x$hwloc_aix\" = \"xyes\"; then\n          AC_MSG_WARN([dlopen does not work on AIX, disabled by default.])\n          enable_plugin_dlopen=no\n        else if test \"x$hwloc_windows\" = \"xyes\"; then\n          AC_MSG_WARN([dlopen not supported on non-native Windows build, disabled by default.])\n          enable_plugin_dlopen=no\n        fi fi\n      fi\n      if test \"x$enable_plugin_ltdl\" = x; then\n        if test \"x$hwloc_aix\" = \"xyes\"; then\n          AC_MSG_WARN([ltdl does not work on AIX, disabled by default.])\n          enable_plugin_dlopen=no\n        else if test \"x$hwloc_windows\" = \"xyes\"; then\n          AC_MSG_WARN([ltdl not supported on non-native Windows build, disabled by default.])\n          enable_plugin_dlopen=no\n        fi fi\n      fi\n\n      # Look for dlopen\n      if test \"x$enable_plugin_dlopen\" != xno; then\n        HWLOC_CHECK_DLOPEN([hwloc_dlopen_ready], [hwloc_dlopen_libs])\n      fi\n      # Look for ltdl\n      if test \"x$enable_plugin_ltdl\" != xno; then\n        HWLOC_CHECK_LTDL([hwloc_ltdl_ready], [hwloc_ltdl_libs])\n      fi\n\n      # Now use dlopen by default, or ltdl, or just fail to enable plugins\n      AC_MSG_CHECKING([which library to use for loading plugins])\n      if test \"x$hwloc_dlopen_ready\" = xyes; then\n        AC_MSG_RESULT([dlopen])\n\thwloc_plugins_load=dlopen\n        # Now enable dlopen libs\n        HWLOC_DL_LIBS=\"$hwloc_dlopen_libs\"\n        AC_SUBST(HWLOC_DL_LIBS)\n      else if test x$hwloc_ltdl_ready = xyes; then\n        AC_MSG_RESULT([ltdl])\n        hwloc_plugins_load=ltdl\n        # Now enable ltdl libs\n        AC_DEFINE([HWLOC_HAVE_LTDL], 1, [Define to 1 if the hwloc library should use ltdl for loading plugins])\n        HWLOC_LTDL_LIBS=\"$hwloc_ltdl_libs\"\n        AC_SUBST(HWLOC_LTDL_LIBS)\n        # Add ltdl static-build dependencies to hwloc.pc\n        HWLOC_CHECK_LTDL_DEPS\n      else\n        AC_MSG_RESULT([none])\n        AC_MSG_WARN([Plugin support requested, but could not enable dlopen or ltdl])\n        AC_MSG_ERROR([Cannot continue])\n      fi fi\n\n      AC_DEFINE([HWLOC_HAVE_PLUGINS], 1, [Define to 1 if the hwloc library should support dynamically-loaded plugins])\n    fi\n\n    AC_ARG_WITH([hwloc-plugins-path],\n\t\tAC_HELP_STRING([--with-hwloc-plugins-path=dir:...],\n                               [Colon-separated list of plugin directories. Default: \"$prefix/lib/hwloc\". Plugins will be installed in the first directory. They will be loaded from all of them, in order.]),\n\t\t[HWLOC_PLUGINS_PATH=\"$with_hwloc_plugins_path\"],\n\t\t[HWLOC_PLUGINS_PATH=\"\\$(libdir)/hwloc\"])\n    AC_SUBST(HWLOC_PLUGINS_PATH)\n    HWLOC_PLUGINS_DIR=`echo \"$HWLOC_PLUGINS_PATH\" | cut -d: -f1`\n    AC_SUBST(HWLOC_PLUGINS_DIR)\n\n    # Static components output file\n    hwloc_static_components_dir=${HWLOC_top_builddir}/hwloc\n    mkdir -p ${hwloc_static_components_dir}\n    hwloc_static_components_file=${hwloc_static_components_dir}/static-components.h\n    rm -f ${hwloc_static_components_file}\n\n    HWLOC_PREPARE_FILTER_COMPONENTS([$requested_plugins])\n    # Now we have some hwloc_<name>_component_wantplugin=1\n\n    # See which core components want plugin and support it\n    HWLOC_FILTER_COMPONENTS\n    # Now we have some hwloc_<name>_component=plugin/static\n    # and hwloc_static/plugin_components=list (space separated)\n    AC_MSG_CHECKING([components to build statically])\n    AC_MSG_RESULT($hwloc_static_components)\n    HWLOC_LIST_STATIC_COMPONENTS([$hwloc_static_components_file], [$hwloc_static_components])\n    AC_MSG_CHECKING([components to build as plugins])\n    AC_MSG_RESULT([$hwloc_plugin_components])\n\n    AS_IF([test \"$hwloc_pci_component\" = \"static\"],\n          [HWLOC_LIBS=\"$HWLOC_LIBS $HWLOC_PCIACCESS_LIBS\"\n           HWLOC_CFLAGS=\"$HWLOC_CFLAGS $HWLOC_PCIACCESS_CFLAGS\"\n           HWLOC_REQUIRES=\"$HWLOC_PCIACCESS_REQUIRES $HWLOC_REQUIRES\"])\n    AS_IF([test \"$hwloc_opencl_component\" = \"static\"],\n          [HWLOC_LIBS=\"$HWLOC_LIBS $HWLOC_OPENCL_LIBS\"\n           HWLOC_LDFLAGS=\"$HWLOC_LDFLAGS $HWLOC_OPENCL_LDFLAGS\"\n           HWLOC_CFLAGS=\"$HWLOC_CFLAGS $HWLOC_OPENCL_CFLAGS\"\n           HWLOC_REQUIRES=\"$HWLOC_OPENCL_REQUIRES $HWLOC_REQUIRES\"])\n    AS_IF([test \"$hwloc_cuda_component\" = \"static\"],\n          [HWLOC_LIBS=\"$HWLOC_LIBS $HWLOC_CUDA_LIBS\"\n           HWLOC_CFLAGS=\"$HWLOC_CFLAGS $HWLOC_CUDA_CFLAGS\"\n           HWLOC_REQUIRES=\"$HWLOC_CUDA_REQUIRES $HWLOC_REQUIRES\"])\n    AS_IF([test \"$hwloc_nvml_component\" = \"static\"],\n          [HWLOC_LIBS=\"$HWLOC_LIBS $HWLOC_NVML_LIBS\"\n           HWLOC_CFLAGS=\"$HWLOC_CFLAGS $HWLOC_NVML_CFLAGS\"\n           HWLOC_REQUIRES=\"$HWLOC_NVML_REQUIRES $HWLOC_REQUIRES\"])\n    AS_IF([test \"$hwloc_gl_component\" = \"static\"],\n          [HWLOC_LIBS=\"$HWLOC_LIBS $HWLOC_GL_LIBS\"\n           HWLOC_CFLAGS=\"$HWLOC_CFLAGS $HWLOC_GL_CFLAGS\"\n           HWLOC_REQUIRES=\"$HWLOC_GL_REQUIRES $HWLOC_REQUIRES\"])\n    AS_IF([test \"$hwloc_xml_libxml_component\" = \"static\"],\n          [HWLOC_LIBS=\"$HWLOC_LIBS $HWLOC_LIBXML2_LIBS\"\n           HWLOC_CFLAGS=\"$HWLOC_CFLAGS $HWLOC_LIBXML2_CFLAGS\"\n           HWLOC_REQUIRES=\"$HWLOC_LIBXML2_REQUIRES $HWLOC_REQUIRES\"])\n\n    #\n    # Setup HWLOC's C, CPP, and LD flags, and LIBS\n    #\n    AC_SUBST(HWLOC_REQUIRES)\n    AC_SUBST(HWLOC_CFLAGS)\n    HWLOC_CPPFLAGS='-I$(HWLOC_top_builddir)/include -I$(HWLOC_top_srcdir)/include'\n    AC_SUBST(HWLOC_CPPFLAGS)\n    AC_SUBST(HWLOC_LDFLAGS)\n    AC_SUBST(HWLOC_LIBS)\n    AC_SUBST(HWLOC_LIBS_PRIVATE)\n\n    # Set these values explicitly for embedded builds.  Exporting\n    # these values through *_EMBEDDED_* values gives us the freedom to\n    # do something different someday if we ever need to.  There's no\n    # need to fill these values in unless we're in embedded mode.\n    # Indeed, if we're building in embedded mode, we want HWLOC_LIBS\n    # to be empty so that nothing is linked into libhwloc_embedded.la\n    # itself -- only the upper-layer will link in anything required.\n\n    AS_IF([test \"$hwloc_mode\" = \"embedded\"],\n          [HWLOC_EMBEDDED_CFLAGS=$HWLOC_CFLAGS\n           HWLOC_EMBEDDED_CPPFLAGS=$HWLOC_CPPFLAGS\n           HWLOC_EMBEDDED_LDFLAGS=$HWLOC_LDFLAGS\n           HWLOC_EMBEDDED_LDADD='$(HWLOC_top_builddir)/hwloc/libhwloc_embedded.la'\n           HWLOC_EMBEDDED_LIBS=$HWLOC_LIBS\n           HWLOC_LIBS=])\n    AC_SUBST(HWLOC_EMBEDDED_CFLAGS)\n    AC_SUBST(HWLOC_EMBEDDED_CPPFLAGS)\n    AC_SUBST(HWLOC_EMBEDDED_LDFLAGS)\n    AC_SUBST(HWLOC_EMBEDDED_LDADD)\n    AC_SUBST(HWLOC_EMBEDDED_LIBS)\n\n    # Always generate these files\n    AC_CONFIG_FILES(\n        hwloc_config_prefix[Makefile]\n        hwloc_config_prefix[include/Makefile]\n        hwloc_config_prefix[hwloc/Makefile]\n    )\n\n    # Cleanup\n    AC_LANG_POP\n\n    # Success\n    $2\n])dnl\n\n#-----------------------------------------------------------------------\n\n# Specify the symbol prefix\nAC_DEFUN([HWLOC_SET_SYMBOL_PREFIX],[\n    hwloc_symbol_prefix_value=$1\n])dnl\n\n#-----------------------------------------------------------------------\n\n# This must be a standalone routine so that it can be called both by\n# HWLOC_INIT and an external caller (if HWLOC_INIT is not invoked).\nAC_DEFUN([HWLOC_DO_AM_CONDITIONALS],[\n    AS_IF([test \"$hwloc_did_am_conditionals\" != \"yes\"],[\n        AM_CONDITIONAL([HWLOC_BUILD_STANDALONE], [test \"$hwloc_mode\" = \"standalone\"])\n\n        AM_CONDITIONAL([HWLOC_HAVE_GCC], [test \"x$GCC\" = \"xyes\"])\n        AM_CONDITIONAL([HWLOC_HAVE_MS_LIB], [test \"x$HWLOC_MS_LIB\" != \"x\"])\n        AM_CONDITIONAL([HWLOC_HAVE_OPENAT], [test \"x$hwloc_have_openat\" = \"xyes\"])\n        AM_CONDITIONAL([HWLOC_HAVE_SCHED_SETAFFINITY],\n                       [test \"x$hwloc_have_sched_setaffinity\" = \"xyes\"])\n        AM_CONDITIONAL([HWLOC_HAVE_PTHREAD],\n                       [test \"x$hwloc_have_pthread\" = \"xyes\"])\n        AM_CONDITIONAL([HWLOC_HAVE_LINUX_LIBNUMA],\n                       [test \"x$hwloc_have_linux_libnuma\" = \"xyes\"])\n        AM_CONDITIONAL([HWLOC_HAVE_LIBIBVERBS],\n                       [test \"x$hwloc_have_libibverbs\" = \"xyes\"])\n\tAM_CONDITIONAL([HWLOC_HAVE_CUDA],\n\t\t       [test \"x$hwloc_have_cuda\" = \"xyes\"])\n\tAM_CONDITIONAL([HWLOC_HAVE_GL],\n\t\t       [test \"x$hwloc_have_gl\" = \"xyes\"])\n\tAM_CONDITIONAL([HWLOC_HAVE_CUDART],\n\t\t       [test \"x$hwloc_have_cudart\" = \"xyes\"])\n        AM_CONDITIONAL([HWLOC_HAVE_LIBXML2], [test \"$hwloc_libxml2_happy\" = \"yes\"])\n        AM_CONDITIONAL([HWLOC_HAVE_CAIRO], [test \"$hwloc_cairo_happy\" = \"yes\"])\n        AM_CONDITIONAL([HWLOC_HAVE_PCIACCESS], [test \"$hwloc_pciaccess_happy\" = \"yes\"])\n        AM_CONDITIONAL([HWLOC_HAVE_OPENCL], [test \"$hwloc_opencl_happy\" = \"yes\"])\n        AM_CONDITIONAL([HWLOC_HAVE_NVML], [test \"$hwloc_nvml_happy\" = \"yes\"])\n        AM_CONDITIONAL([HWLOC_HAVE_BUNZIPP], [test \"x$BUNZIPP\" != \"xfalse\"])\n        AM_CONDITIONAL([HWLOC_HAVE_USER32], [test \"x$hwloc_have_user32\" = \"xyes\"])\n\n        AM_CONDITIONAL([HWLOC_BUILD_DOXYGEN],\n                       [test \"x$hwloc_generate_doxs\" = \"xyes\"])\n        AM_CONDITIONAL([HWLOC_BUILD_README],\n                       [test \"x$hwloc_generate_readme\" = \"xyes\" -a \\( \"x$hwloc_install_doxs\" = \"xyes\" -o \"x$hwloc_generate_doxs\" = \"xyes\" \\) ])\n        AM_CONDITIONAL([HWLOC_INSTALL_DOXYGEN],\n                       [test \"x$hwloc_install_doxs\" = \"xyes\"])\n\n        AM_CONDITIONAL([HWLOC_HAVE_LINUX], [test \"x$hwloc_linux\" = \"xyes\"])\n        AM_CONDITIONAL([HWLOC_HAVE_BGQ], [test \"x$hwloc_bgq\" = \"xyes\"])\n        AM_CONDITIONAL([HWLOC_HAVE_IRIX], [test \"x$hwloc_irix\" = \"xyes\"])\n        AM_CONDITIONAL([HWLOC_HAVE_DARWIN], [test \"x$hwloc_darwin\" = \"xyes\"])\n        AM_CONDITIONAL([HWLOC_HAVE_FREEBSD], [test \"x$hwloc_freebsd\" = \"xyes\"])\n        AM_CONDITIONAL([HWLOC_HAVE_NETBSD], [test \"x$hwloc_netbsd\" = \"xyes\"])\n        AM_CONDITIONAL([HWLOC_HAVE_SOLARIS], [test \"x$hwloc_solaris\" = \"xyes\"])\n        AM_CONDITIONAL([HWLOC_HAVE_AIX], [test \"x$hwloc_aix\" = \"xyes\"])\n        AM_CONDITIONAL([HWLOC_HAVE_HPUX], [test \"x$hwloc_hpux\" = \"xyes\"])\n        AM_CONDITIONAL([HWLOC_HAVE_WINDOWS], [test \"x$hwloc_windows\" = \"xyes\"])\n        AM_CONDITIONAL([HWLOC_HAVE_MINGW32], [test \"x$target_os\" = \"xmingw32\"])\n\n        AM_CONDITIONAL([HWLOC_HAVE_X86], [test \"x$hwloc_x86_32\" = \"xyes\" -o \"x$hwloc_x86_64\" = \"xyes\"])\n        AM_CONDITIONAL([HWLOC_HAVE_X86_32], [test \"x$hwloc_x86_32\" = \"xyes\"])\n        AM_CONDITIONAL([HWLOC_HAVE_X86_64], [test \"x$hwloc_x86_64\" = \"xyes\"])\n        AM_CONDITIONAL([HWLOC_HAVE_X86_CPUID], [test \"x$hwloc_have_x86_cpuid\" = \"xyes\"])\n\n        AM_CONDITIONAL([HWLOC_HAVE_32BITS_PCI_DOMAIN], [test \"x$enable_32bits_pci_domain\" = \"xyes\"])\n\n        AM_CONDITIONAL([HWLOC_HAVE_PLUGINS], [test \"x$hwloc_have_plugins\" = \"xyes\"])\n        AM_CONDITIONAL([HWLOC_PCI_BUILD_STATIC], [test \"x$hwloc_pci_component\" = \"xstatic\"])\n        AM_CONDITIONAL([HWLOC_OPENCL_BUILD_STATIC], [test \"x$hwloc_opencl_component\" = \"xstatic\"])\n        AM_CONDITIONAL([HWLOC_CUDA_BUILD_STATIC], [test \"x$hwloc_cuda_component\" = \"xstatic\"])\n        AM_CONDITIONAL([HWLOC_NVML_BUILD_STATIC], [test \"x$hwloc_nvml_component\" = \"xstatic\"])\n        AM_CONDITIONAL([HWLOC_GL_BUILD_STATIC], [test \"x$hwloc_gl_component\" = \"xstatic\"])\n        AM_CONDITIONAL([HWLOC_XML_LIBXML_BUILD_STATIC], [test \"x$hwloc_xml_libxml_component\" = \"xstatic\"])\n\n        AM_CONDITIONAL([HWLOC_HAVE_CXX], [test \"x$hwloc_have_cxx\" = \"xyes\"])\n    ])\n    hwloc_did_am_conditionals=yes\n\n    # For backwards compatibility (i.e., packages that only call\n    # HWLOC_DO_AM_CONDITIONS, not NETLOC DO_AM_CONDITIONALS), we also have to\n    # do the netloc AM conditionals here\n    NETLOC_DO_AM_CONDITIONALS\n])dnl\n\n#-----------------------------------------------------------------------\n\ndnl HWLOC_CHECK_DECL\ndnl\ndnl Check that the declaration of the given function has a complete prototype\ndnl with argument list by trying to call it with an insane dnl number of\ndnl arguments (10). Success means the compiler couldn't really check.\nAC_DEFUN([_HWLOC_CHECK_DECL], [\n  AC_CHECK_DECL([$1], [\n    AC_MSG_CHECKING([whether function $1 has a complete prototype])\n    AC_REQUIRE([AC_PROG_CC])\n    AC_COMPILE_IFELSE([AC_LANG_PROGRAM(\n         [AC_INCLUDES_DEFAULT([$4])],\n         [$1(1,2,3,4,5,6,7,8,9,10);]\n      )],\n      [AC_MSG_RESULT([no])\n       $3],\n      [AC_MSG_RESULT([yes])\n       $2]\n    )], [$3], $4\n  )\n])\n\n#-----------------------------------------------------------------------\n\ndnl HWLOC_CHECK_DECLS\ndnl\ndnl Same as HWLOCK_CHECK_DECL, but defines HAVE_DECL_foo to 1 or 0 depending on\ndnl the result.\nAC_DEFUN([_HWLOC_CHECK_DECLS], [\n  HWLOC_CHECK_DECL([$1], [ac_have_decl=1], [ac_have_decl=0], [$4])\n  AC_DEFINE_UNQUOTED(AS_TR_CPP([HAVE_DECL_$1]), [$ac_have_decl],\n    [Define to 1 if you have the declaration of `$1', and to 0 if you don't])\n])\n\n#-----------------------------------------------------------------------\n\ndnl HWLOC_CHECK_DLOPEN\ndnl\ndnl set $1 to yes or not\ndnl set $2 to -ldl or so\nAC_DEFUN([HWLOC_CHECK_DLOPEN], [\n  [$1]=no\n  AC_MSG_CHECKING([for dlopen])\n  AC_LINK_IFELSE([\n    AC_LANG_PROGRAM([[\n      #include <dlfcn.h>\n      #include <stdlib.h>\n      void *handle;\n    ]], [[\n      handle = dlopen(NULL, RTLD_NOW|RTLD_LOCAL);\n    ]])],\n    [AC_MSG_RESULT([yes])\n     [$1]=yes],\n    [AC_MSG_RESULT([no])\n     AC_CHECK_HEADER([dlfcn.h],\n       [AC_CHECK_LIB([dl], [dlopen],\n                     [[$1]=yes\n\t             [$2]=-ldl])\n        ])\n    ])\n])\n\n#-----------------------------------------------------------------------\n\ndnl HWLOC_CHECK_LTDL\ndnl\ndnl set $1 to yes or not\ndnl set $2 to -lltdl or so\nAC_DEFUN([HWLOC_CHECK_LTDL], [\n  [$1]=no\n  AC_CHECK_HEADER([ltdl.h],\n    [AC_CHECK_LIB([ltdl], [lt_dlopenext],\n                  [[$1]=yes\n\t\t   [$2]=-lltdl])\n     ])\n])\n\n#-----------------------------------------------------------------------\n\ndnl HWLOC_CHECK_LTDL_DEPS\ndnl\ndnl Add ltdl dependencies to HWLOC_LIBS_PRIVATE\nAC_DEFUN([HWLOC_CHECK_LTDL_DEPS], [\n  # save variables that we'll modify below\n  save_lt_cv_dlopen=\"$lt_cv_dlopen\"\n  save_lt_cv_dlopen_libs=\"$lt_cv_dlopen_libs\"\n  save_lt_cv_dlopen_self=\"$lt_cv_dlopen_self\"\n  ###########################################################\n  # code stolen from LT_SYS_DLOPEN_SELF in libtool.m4\n  case $host_os in\n  beos*)\n    lt_cv_dlopen=\"load_add_on\"\n    lt_cv_dlopen_libs=\n    lt_cv_dlopen_self=yes\n    ;;\n\n  mingw* | pw32* | cegcc*)\n    lt_cv_dlopen=\"LoadLibrary\"\n    lt_cv_dlopen_libs=\n    ;;\n\n  cygwin*)\n    lt_cv_dlopen=\"dlopen\"\n    lt_cv_dlopen_libs=\n    ;;\n\n  darwin*)\n  # if libdl is installed we need to link against it\n    AC_CHECK_LIB([dl], [dlopen],\n                [lt_cv_dlopen=\"dlopen\" lt_cv_dlopen_libs=\"-ldl\"],[\n    lt_cv_dlopen=\"dyld\"\n    lt_cv_dlopen_libs=\n    lt_cv_dlopen_self=yes\n    ])\n    ;;\n\n  *)\n    AC_CHECK_FUNC([shl_load],\n          [lt_cv_dlopen=\"shl_load\"],\n      [AC_CHECK_LIB([dld], [shl_load],\n            [lt_cv_dlopen=\"shl_load\" lt_cv_dlopen_libs=\"-ldld\"],\n        [AC_CHECK_FUNC([dlopen],\n              [lt_cv_dlopen=\"dlopen\"],\n          [AC_CHECK_LIB([dl], [dlopen],\n                [lt_cv_dlopen=\"dlopen\" lt_cv_dlopen_libs=\"-ldl\"],\n            [AC_CHECK_LIB([svld], [dlopen],\n                  [lt_cv_dlopen=\"dlopen\" lt_cv_dlopen_libs=\"-lsvld\"],\n              [AC_CHECK_LIB([dld], [dld_link],\n                    [lt_cv_dlopen=\"dld_link\" lt_cv_dlopen_libs=\"-ldld\"])\n              ])\n            ])\n          ])\n        ])\n      ])\n    ;;\n  esac\n  # end of code stolen from LT_SYS_DLOPEN_SELF in libtool.m4\n  ###########################################################\n\n  HWLOC_LIBS_PRIVATE=\"$HWLOC_LIBS_PRIVATE $lt_cv_dlopen_libs\"\n\n  # restore modified variable in case the actual libtool code uses them\n  lt_cv_dlopen=\"$save_lt_cv_dlopen\"\n  lt_cv_dlopen_libs=\"$save_lt_cv_dlopen_libs\"\n  lt_cv_dlopen_self=\"$save_lt_cv_dlopen_self\"\n])\n",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/config/hwloc_internal.m4": "dnl -*- Autoconf -*-\ndnl\ndnl Copyright \u00a9 2010-2020 Inria.  All rights reserved.\ndnl Copyright \u00a9 2009, 2011 Universit\u00e9 Bordeaux\ndnl Copyright \u00a9 2004-2005 The Trustees of Indiana University and Indiana\ndnl                         University Research and Technology\ndnl                         Corporation.  All rights reserved.\ndnl Copyright \u00a9 2004-2005 The Regents of the University of California.\ndnl                         All rights reserved.\ndnl Copyright \u00a9 2004-2008 High Performance Computing Center Stuttgart,\ndnl                         University of Stuttgart.  All rights reserved.\ndnl Copyright \u00a9 2006-2014 Cisco Systems, Inc.  All rights reserved.\ndnl\ndnl See COPYING in top-level directory.\n\n#-----------------------------------------------------------------------\n\n# Probably only ever invoked by hwloc's configure.ac\nAC_DEFUN([HWLOC_BUILD_STANDALONE],[\n    hwloc_mode=standalone\n])dnl\n\n#-----------------------------------------------------------------------\n\n# Probably only ever invoked by hwloc's configure.ac\nAC_DEFUN([HWLOC_DEFINE_ARGS],[\n    # Embedded mode, or standalone?\n    AC_ARG_ENABLE([embedded-mode],\n                    AC_HELP_STRING([--enable-embedded-mode],\n                                   [Using --enable-embedded-mode puts the HWLOC into \"embedded\" mode.  The default is --disable-embedded-mode, meaning that the HWLOC is in \"standalone\" mode.]))\n\n    # Change the symbol prefix?\n    AC_ARG_WITH([hwloc-symbol-prefix],\n                AC_HELP_STRING([--with-hwloc-symbol-prefix=STRING],\n                               [STRING can be any valid C symbol name.  It will be prefixed to all public HWLOC symbols.  Default: \"hwloc_\"]))\n\n    # Debug mode?\n    AC_ARG_ENABLE([debug],\n                  AC_HELP_STRING([--enable-debug],\n                                 [Using --enable-debug enables various hwloc maintainer-level debugging controls.  This option is not recomended for end users.]))\n\n    # Doxygen?\n    AC_ARG_ENABLE([doxygen],\n        [AC_HELP_STRING([--enable-doxygen],\n                        [enable support for building Doxygen documentation (note that this option is ONLY relevant in developer builds; Doxygen documentation is pre-built for tarball builds and this option is therefore ignored)])])\n\n    # Picky?\n    AC_ARG_ENABLE(picky,\n                  AC_HELP_STRING([--disable-picky],\n                                 [When in developer checkouts of hwloc and compiling with gcc, the default is to enable maximum compiler pickyness.  Using --disable-picky or --enable-picky overrides any default setting]))\n\n    # Cairo?\n    AC_ARG_ENABLE([cairo],\n                  AS_HELP_STRING([--disable-cairo],\n                                 [Disable the Cairo back-end of hwloc's lstopo command]))\n\n    # CPUID\n    AC_ARG_ENABLE([cpuid],\n\t\t  AS_HELP_STRING([--disable-cpuid],\n\t\t\t\t [Disable the cpuid-based architecture specific support (x86 component)]))\n\n    # XML using libxml2?\n    AC_ARG_ENABLE([libxml2],\n                  AS_HELP_STRING([--disable-libxml2],\n\t\t                 [Do not use libxml2 for XML support, use a custom minimalistic support]))\n\n    # I/O?\n    AC_ARG_ENABLE([io],\n                  AS_HELP_STRING([--disable-io],\n                                 [Disable I/O discovery entirely (PCI, LinuxIO, CUDA, OpenCL, NVML, GL)]))\n\n    # PCI?\n    AC_ARG_ENABLE([pci],\n                  AS_HELP_STRING([--disable-pci],\n                                 [Disable the PCI device discovery]))\n\n    # OpenCL?\n    AC_ARG_ENABLE([opencl],\n                  AS_HELP_STRING([--disable-opencl],\n                                 [Disable the OpenCL device discovery]))\n\n    # CUDA?\n    AC_ARG_ENABLE([cuda],\n                  AS_HELP_STRING([--disable-cuda],\n                                 [Disable the CUDA device discovery using libcudart]))\n\n    # NVML?\n    AC_ARG_ENABLE([nvml],\n                  AS_HELP_STRING([--disable-nvml],\n                                 [Disable the NVML device discovery]))\n\n    # 32bits_pci_domain?\n    AC_ARG_ENABLE([32bits-pci-domain],\n                  AS_HELP_STRING([--enable-32bits-pci-domain],\n                                 [Enable 32 bits PCI domains (domains > 16bits are ignored by default). WARNING: This breaks the library ABI, don't enable unless really needed.]))\n\n    # GL/Display\n    AC_ARG_ENABLE([gl],\n\t\t  AS_HELP_STRING([--disable-gl],\n\t\t\t\t [Disable the GL display device discovery]))\n\n    # LibUdev\n    AC_ARG_ENABLE([libudev],\n                  AS_HELP_STRING([--disable-libudev],\n                                 [Disable the Linux libudev]))\n\n    # Plugins\n    AC_ARG_ENABLE([plugins],\n                  AS_HELP_STRING([--enable-plugins=name,...],\n                                 [Build the given components as dynamically-loaded plugins]))\n\n    # Look for dlopen\n    # Not --disable-dlopen because $enable_dlopen is already used/set\n    AC_ARG_ENABLE([plugin-dlopen],\n                  AC_HELP_STRING([--disable-plugin-dlopen],\n                                 [Do not use dlopen for loading plugins.]))\n    # Look for ltdl\n    # Not --disable-ltdl for consistency wrt dlopen above\n    AC_ARG_ENABLE([plugin-ltdl],\n                  AC_HELP_STRING([--disable-plugin-ltdl],\n                                 [Do not use ltdl for loading plugins.]))\n\n])dnl\n\n#-----------------------------------------------------------------------\n\ndnl We only build documentation if this is a developer checkout.\ndnl Distribution tarballs just install pre-built docuemntation that was\ndnl included in the tarball.\n\n# Probably only ever invoked by hwloc's configure.ac\nAC_DEFUN([HWLOC_SETUP_DOCS],[\n    cat <<EOF\n\n###\n### Configuring hwloc documentation\n###\nEOF\n\n    AC_MSG_CHECKING([if this is a developer build])\n    AS_IF([test ! -e \"$srcdir/.git\"],\n          [AC_MSG_RESULT([no (doxygen generation is optional)])\n\t   test \"x$enable_doxygen\" = x && enable_doxygen=no],\n          [AC_MSG_RESULT([yes])\n\t   test \"x$enable_doxygen\" = x && enable_doxygen=yes])\n\n    # Generating the doxygen output requires a few tools.  If we\n    # don't have all of them, refuse the build the docs.\n    AC_ARG_VAR([DOXYGEN], [Location of the doxygen program (required for building the hwloc doxygen documentation)])\n    AC_PATH_TOOL([DOXYGEN], [doxygen])\n    HWLOC_DOXYGEN_VERSION=`doxygen --version 2> /dev/null`\n\n    AC_ARG_VAR([PDFLATEX], [Location of the pdflatex program (required for building the hwloc doxygen documentation)])\n    AC_PATH_TOOL([PDFLATEX], [pdflatex])\n\n    AC_ARG_VAR([MAKEINDEX], [Location of the makeindex program (required for building the hwloc doxygen documentation)])\n    AC_PATH_TOOL([MAKEINDEX], [makeindex])\n\n    AC_ARG_VAR([FIG2DEV], [Location of the fig2dev program (required for building the hwloc doxygen documentation)])\n    AC_PATH_TOOL([FIG2DEV], [fig2dev])\n\n    AC_ARG_VAR([GS], [Location of the gs program (required for building the hwloc doxygen documentation)])\n    AC_PATH_TOOL([GS], [gs])\n\n    AC_ARG_VAR([EPSTOPDF], [Location of the epstopdf program (required for building the hwloc doxygen documentation)])\n    AC_PATH_TOOL([EPSTOPDF], [epstopdf])\n\n    AC_MSG_CHECKING([if can build doxygen docs])\n    AS_IF([test \"x$DOXYGEN\" != \"x\" -a \"x$PDFLATEX\" != \"x\" -a \"x$MAKEINDEX\" != \"x\" -a \"x$FIG2DEV\" != \"x\" -a \"x$GS\" != \"x\" -a \"x$EPSTOPDF\" != \"x\"],\n                 [hwloc_generate_doxs=yes], [hwloc_generate_doxs=no])\n    AC_MSG_RESULT([$hwloc_generate_doxs])\n    AS_IF([test \"x$hwloc_generate_doxs\" = xyes -a \"x$HWLOC_DOXYGEN_VERSION\" = x1.6.2],\n                 [hwloc_generate_doxs=\"no\"; AC_MSG_WARN([doxygen 1.6.2 has broken short name support, disabling])])\n    AS_IF([test \"x$hwloc_generate_doxs\" = xyes -a \"x$HWLOC_DOXYGEN_VERSION\" = x1.8.16 -a \"$HWLOC_top_builddir\" = \"$HWLOC_top_srcdir\"],\n                 [hwloc_generate_doxs=\"no\"; AC_MSG_WARN([doxygen 1.8.16 fails when building inside the source-tree, disabling])])\n\n    AC_REQUIRE([AC_PROG_SED])\n\n    # Making the top-level README requires w3m or lynx.\n    AC_ARG_VAR([W3M], [Location of the w3m program (required to building the top-level hwloc README file)])\n    AC_PATH_TOOL([W3M], [w3m])\n    AC_ARG_VAR([LYNX], [Location of the lynx program (required to building the top-level hwloc README file)])\n    AC_PATH_TOOL([LYNX], [lynx])\n\n    AC_MSG_CHECKING([if can build top-level README])\n    AS_IF([test \"x$W3M\" != \"x\"],\n          [hwloc_generate_readme=yes\n           HWLOC_W3_GENERATOR=$W3M],\n          [AS_IF([test \"x$LYNX\" != \"x\"],\n                 [hwloc_generate_readme=yes\n                  HWLOC_W3_GENERATOR=\"$LYNX -dump -nolist\"],\n                 [hwloc_generate_readme=no])])\n    AC_SUBST(HWLOC_W3_GENERATOR)\n    AC_MSG_RESULT([$hwloc_generate_readme])\n\n    # If any one of the above tools is missing, we will refuse to make dist.\n    AC_MSG_CHECKING([if will build doxygen docs])\n    AS_IF([test \"x$hwloc_generate_doxs\" = \"xyes\" -a \"x$enable_doxygen\" != \"xno\"],\n          [], [hwloc_generate_doxs=no])\n    AC_MSG_RESULT([$hwloc_generate_doxs])\n\n    # See if we want to install the doxygen docs\n    AC_MSG_CHECKING([if will install doxygen docs])\n    AS_IF([test \"x$hwloc_generate_doxs\" = \"xyes\" -o \\\n\t    -f \"$srcdir/doc/doxygen-doc/man/man3/hwloc_distrib.3\" -a \\\n    \t    -f \"$srcdir/doc/doxygen-doc/hwloc-a4.pdf\" -a \\\n    \t    -f \"$srcdir/doc/doxygen-doc/hwloc-letter.pdf\"],\n          [hwloc_install_doxs=yes],\n          [hwloc_install_doxs=no])\n    AC_MSG_RESULT([$hwloc_install_doxs])\n\n    # Generate some files for the docs\n    AC_CONFIG_FILES(\n        hwloc_config_prefix[doc/Makefile]\n        hwloc_config_prefix[doc/examples/Makefile]\n        hwloc_config_prefix[doc/doxygen-config.cfg])\n])\n\n#-----------------------------------------------------------------------\n\n# Probably only ever invoked by hwloc's configure.ac\nAC_DEFUN([HWLOC_SETUP_UTILS],[\n    cat <<EOF\n\n###\n### Configuring hwloc command line utilities\n###\nEOF\n\n    AC_REQUIRE([AC_PROG_SED])\n\n    # runstatedir only supported in autoconf >= 2.70 and in some backports\n    if test \"x${runstatedir}\" != \"x\"; then\n      HWLOC_runstatedir=${runstatedir}\n    else\n      HWLOC_runstatedir='${localstatedir}/run'\n    fi\n    AC_SUBST([HWLOC_runstatedir])\n\n    # Cairo support\n    hwloc_cairo_happy=no\n    if test \"x$enable_cairo\" != \"xno\"; then\n      HWLOC_PKG_CHECK_MODULES([CAIRO], [cairo], [cairo_fill], [cairo.h],\n                              [hwloc_cairo_happy=yes],\n                              [hwloc_cairo_happy=no])\n    fi\n\n    if test \"x$hwloc_cairo_happy\" = \"xyes\"; then\n        AC_DEFINE([HWLOC_HAVE_CAIRO], [1], [Define to 1 if you have the `cairo' library.])\n        AC_MSG_CHECKING([whether lstopo Cairo/X11 interactive graphical output is supported])\n        if test \"x$hwloc_x11_keysym_happy\" = xyes; then\n          save_CPPFLAGS=\"$CPPFLAGS\"\n          CPPFLAGS=\"$CPPFLAGS $HWLOC_CAIRO_CFLAGS $HWLOC_X11_CPPFLAGS\"\n          AC_PREPROC_IFELSE([\n            AC_LANG_PROGRAM([[\n              #include <cairo.h>\n            ]], [[\n              #ifndef CAIRO_HAS_XLIB_SURFACE\n              #error\n              #endif\n            ]])\n          ], [\n            AC_MSG_RESULT([yes])\n            lstopo_have_x11=yes\n            AC_DEFINE([LSTOPO_HAVE_X11], 1, [Define if lstopo Cairo/X11 interactive graphical output is supported])\n          ], [\n            AC_MSG_RESULT([no (missing CAIRO_HAS_XLIB_SURFACE)])\n          ])\n          CPPFLAGS=\"$save_CPPFLAGS\"\n        else\n          AC_MSG_RESULT([no (missing X11)])\n        fi\n    else\n        AS_IF([test \"$enable_cairo\" = \"yes\"],\n              [AC_MSG_WARN([--enable-cairo requested, but Cairo/X11 support was not found])\n               AC_MSG_ERROR([Cannot continue])])\n    fi\n\n    AC_CHECK_TYPES([wchar_t], [\n      AC_CHECK_FUNCS([putwc])\n    ], [], [[#include <wchar.h>]])\n\n    HWLOC_XML_LOCALIZED=1\n    AC_CHECK_HEADERS([locale.h xlocale.h], [\n      AC_CHECK_FUNCS([setlocale])\n      AC_CHECK_FUNCS([uselocale], [HWLOC_XML_LOCALIZED=0])\n    ])\n    AC_SUBST([HWLOC_XML_LOCALIZED])\n    AC_CHECK_HEADERS([langinfo.h], [\n      AC_CHECK_FUNCS([nl_langinfo])\n    ])\n    hwloc_old_LIBS=\"$LIBS\"\n    chosen_curses=\"\"\n    for curses in ncurses curses\n    do\n      for lib in \"\" -ltermcap -l${curses}w -l$curses\n      do\n        AC_MSG_CHECKING(termcap support using $curses and $lib)\n        LIBS=\"$hwloc_old_LIBS $lib\"\n        AC_LINK_IFELSE([AC_LANG_PROGRAM([[\n#include <$curses.h>\n#include <term.h>\n]], [[tparm(NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0)]])], [\n          AC_MSG_RESULT(yes)\n          AC_SUBST([HWLOC_TERMCAP_LIBS], [\"$LIBS\"])\n          AC_DEFINE([HWLOC_HAVE_LIBTERMCAP], [1],\n                    [Define to 1 if you have a library providing the termcap interface])\n          chosen_curses=$curses\n        ], [\n          AC_MSG_RESULT(no)\n        ])\n        test \"x$chosen_curses\" != \"x\" && break\n      done\n      test \"x$chosen_curses\" != \"x\" && break\n    done\n    if test \"$chosen_curses\" = ncurses\n    then\n      AC_DEFINE([HWLOC_USE_NCURSES], [1], [Define to 1 if ncurses works, preferred over curses])\n    fi\n    LIBS=\"$hwloc_old_LIBS\"\n    unset hwloc_old_LIBS\n\n    _HWLOC_CHECK_DIFF_U\n    _HWLOC_CHECK_DIFF_W\n\n    # Solaris needs -lsocket for socket/bind/... in hwloc-ps\n    AC_CHECK_DECLS([bind], [\n      AC_CHECK_LIB([socket], [bind],\n                   [need_libsocket=yes])\n    ], [], [[#include <sys/socket.h>]])\n    if test x$need_libsocket = xyes; then\n      # keep -lsocket first in case there's also -lnsl which cannot be before -lsocket\n      HWLOC_PS_LIBS=\"-lsocket $HWLOC_PS_LIBS\"\n    fi\n    AC_SUBST(HWLOC_PS_LIBS)\n\n    AC_CHECK_HEADERS([time.h], [\n      AC_CHECK_FUNCS([clock_gettime])\n    ])\n\n    # Only generate this if we're building the utilities\n    # Even the netloc library Makefile is here because\n    # we don't embed libnetloc yet, it's useless without tools\n    AC_CONFIG_FILES(\n        hwloc_config_prefix[utils/Makefile]\n        hwloc_config_prefix[utils/hwloc/Makefile]\n        hwloc_config_prefix[utils/lstopo/Makefile]\n        hwloc_config_prefix[hwloc.pc]\n\n        hwloc_config_prefix[netloc/Makefile]\n        hwloc_config_prefix[utils/netloc/infiniband/Makefile]\n        hwloc_config_prefix[utils/netloc/draw/Makefile]\n        hwloc_config_prefix[utils/netloc/scotch/Makefile]\n        hwloc_config_prefix[utils/netloc/mpi/Makefile]\n        hwloc_config_prefix[netloc.pc]\n        hwloc_config_prefix[netlocscotch.pc]\n   )\n])dnl\n\n#-----------------------------------------------------------------------\n\n# Probably only ever invoked by hwloc's configure.ac\nAC_DEFUN([HWLOC_SETUP_TESTS],[\n    cat <<EOF\n\n###\n### Configuring tests\n###\nEOF\n\n    AC_CHECK_LIB([pthread], [pthread_self], [hwloc_have_pthread=yes])\n\n    HWLOC_PKG_CHECK_MODULES([NUMA], [numa], [numa_available], [numa.h],\n                            [hwloc_have_linux_libnuma=yes],\n\t\t\t    [\n\t\t\t     # libnuma didn't have a .pc before 2.0.12, look for it manually.\n\t\t\t     AC_CHECK_LIB([numa], [numa_available], [\n\t\t\t\t# and make sure this old release has at least numa_bitmask_alloc() for our tests\n\t\t\t        AC_CHECK_DECL([numa_bitmask_alloc],\n\t\t\t\t              [hwloc_have_linux_libnuma=yes\n\t\t\t\t\t       HWLOC_NUMA_LIBS=-lnuma\n\t\t\t\t\t      ],\n\t\t\t\t\t      [],\n\t\t\t\t\t      [#include <numa.h>])\n\t\t\t     ])])\n\n    AC_CHECK_HEADERS([stdlib.h], [\n      AC_CHECK_FUNCS([mkstemp])\n    ])\n\n    AC_CHECK_HEADERS([infiniband/verbs.h], [\n      AC_CHECK_LIB([ibverbs], [ibv_open_device],\n                   [AC_DEFINE([HAVE_LIBIBVERBS], 1, [Define to 1 if we have -libverbs])\n                    hwloc_have_libibverbs=yes])\n    ])\n\n    AC_CHECK_PROGS(XMLLINT, [xmllint])\n\n    AC_CHECK_PROGS(BUNZIPP, bunzip2, false)\n\n    AC_MSG_CHECKING(if CXX works)\n    AC_LANG_PUSH([C++])\n    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n#include <iostream>\nusing namespace std;\nint foo(void) {\n  cout << \"test\" << endl;\n  return 0;\n}\n\t]])], [hwloc_have_cxx=yes], [hwloc_have_cxx=no])\n    AC_LANG_POP([C++])\n    AC_MSG_RESULT([$hwloc_have_cxx])\n\n    _HWLOC_CHECK_DIFF_U\n\n    # Only generate these files if we're making the tests\n    AC_CONFIG_FILES(\n        hwloc_config_prefix[tests/Makefile]\n        hwloc_config_prefix[tests/hwloc/Makefile]\n        hwloc_config_prefix[tests/hwloc/linux/Makefile]\n        hwloc_config_prefix[tests/hwloc/linux/allowed/Makefile]\n        hwloc_config_prefix[tests/hwloc/linux/gather/Makefile]\n        hwloc_config_prefix[tests/hwloc/x86/Makefile]\n        hwloc_config_prefix[tests/hwloc/x86+linux/Makefile]\n        hwloc_config_prefix[tests/hwloc/xml/Makefile]\n        hwloc_config_prefix[tests/hwloc/ports/Makefile]\n        hwloc_config_prefix[tests/hwloc/rename/Makefile]\n        hwloc_config_prefix[tests/hwloc/linux/allowed/test-topology.sh]\n        hwloc_config_prefix[tests/hwloc/linux/gather/test-gather-topology.sh]\n        hwloc_config_prefix[tests/hwloc/linux/test-topology.sh]\n        hwloc_config_prefix[tests/hwloc/x86/test-topology.sh]\n        hwloc_config_prefix[tests/hwloc/x86+linux/test-topology.sh]\n        hwloc_config_prefix[tests/hwloc/xml/test-topology.sh]\n        hwloc_config_prefix[tests/hwloc/wrapper.sh]\n        hwloc_config_prefix[utils/hwloc/hwloc-compress-dir]\n        hwloc_config_prefix[utils/hwloc/hwloc-gather-topology]\n        hwloc_config_prefix[utils/hwloc/test-hwloc-annotate.sh]\n        hwloc_config_prefix[utils/hwloc/test-hwloc-calc.sh]\n        hwloc_config_prefix[utils/hwloc/test-hwloc-compress-dir.sh]\n        hwloc_config_prefix[utils/hwloc/test-hwloc-diffpatch.sh]\n        hwloc_config_prefix[utils/hwloc/test-hwloc-distrib.sh]\n        hwloc_config_prefix[utils/hwloc/test-hwloc-info.sh]\n        hwloc_config_prefix[utils/hwloc/test-fake-plugin.sh]\n        hwloc_config_prefix[utils/hwloc/test-hwloc-dump-hwdata/Makefile]\n        hwloc_config_prefix[utils/hwloc/test-hwloc-dump-hwdata/test-hwloc-dump-hwdata.sh]\n        hwloc_config_prefix[utils/lstopo/test-lstopo.sh]\n        hwloc_config_prefix[utils/lstopo/test-lstopo-shmem.sh]\n        hwloc_config_prefix[utils/netloc/infiniband/netloc_ib_gather_raw]\n        hwloc_config_prefix[contrib/hwloc-ps.www/Makefile]\n        hwloc_config_prefix[contrib/systemd/Makefile]\n        hwloc_config_prefix[contrib/completion/Makefile]\n        hwloc_config_prefix[contrib/misc/Makefile]\n        hwloc_config_prefix[contrib/windows/Makefile]\n        hwloc_config_prefix[contrib/windows/test-windows-version.sh]\n        hwloc_config_prefix[tests/netloc/Makefile]\n        hwloc_config_prefix[tests/netloc/tests.sh]\n    )\n\n    AC_CONFIG_COMMANDS([chmoding-scripts], [chmod +x] \\\n      hwloc_config_prefix[tests/hwloc/linux/test-topology.sh] \\\n      hwloc_config_prefix[tests/hwloc/x86/test-topology.sh] \\\n      hwloc_config_prefix[tests/hwloc/x86+linux/test-topology.sh] \\\n      hwloc_config_prefix[tests/hwloc/xml/test-topology.sh] \\\n      hwloc_config_prefix[tests/hwloc/linux/allowed/test-topology.sh] \\\n      hwloc_config_prefix[tests/hwloc/linux/gather/test-gather-topology.sh] \\\n      hwloc_config_prefix[tests/hwloc/wrapper.sh] \\\n      hwloc_config_prefix[utils/hwloc/hwloc-compress-dir] \\\n      hwloc_config_prefix[utils/hwloc/hwloc-gather-topology] \\\n      hwloc_config_prefix[utils/hwloc/test-hwloc-annotate.sh] \\\n      hwloc_config_prefix[utils/hwloc/test-hwloc-calc.sh] \\\n      hwloc_config_prefix[utils/hwloc/test-hwloc-compress-dir.sh] \\\n      hwloc_config_prefix[utils/hwloc/test-hwloc-diffpatch.sh] \\\n      hwloc_config_prefix[utils/hwloc/test-hwloc-distrib.sh] \\\n      hwloc_config_prefix[utils/hwloc/test-hwloc-info.sh] \\\n      hwloc_config_prefix[utils/hwloc/test-fake-plugin.sh] \\\n      hwloc_config_prefix[utils/hwloc/test-hwloc-dump-hwdata/test-hwloc-dump-hwdata.sh] \\\n      hwloc_config_prefix[utils/lstopo/test-lstopo.sh] \\\n      hwloc_config_prefix[utils/lstopo/test-lstopo-shmem.sh] \\\n      hwloc_config_prefix[utils/netloc/infiniband/netloc_ib_gather_raw] \\\n      hwloc_config_prefix[contrib/windows/test-windows-version.sh] \\\n      hwloc_config_prefix[tests/netloc/tests.sh])\n\n    # These links are only needed in standalone mode.  It would\n    # be nice to m4 foreach this somehow, but whenever I tried\n    # it, I got obscure \"invalid tag\" errors from\n    # AC_CONFIG_LINKS.  :-\\ Since these tests are only run when\n    # built in standalone mode, only generate them in\n    # standalone mode.\n    AC_CONFIG_LINKS(\n\thwloc_config_prefix[tests/hwloc/ports/topology-solaris.c]:hwloc_config_prefix[hwloc/topology-solaris.c]\n\thwloc_config_prefix[tests/hwloc/ports/topology-solaris-chiptype.c]:hwloc_config_prefix[hwloc/topology-solaris-chiptype.c]\n\thwloc_config_prefix[tests/hwloc/ports/topology-aix.c]:hwloc_config_prefix[hwloc/topology-aix.c]\n\thwloc_config_prefix[tests/hwloc/ports/topology-windows.c]:hwloc_config_prefix[hwloc/topology-windows.c]\n\thwloc_config_prefix[tests/hwloc/ports/topology-darwin.c]:hwloc_config_prefix[hwloc/topology-darwin.c]\n\thwloc_config_prefix[tests/hwloc/ports/topology-freebsd.c]:hwloc_config_prefix[hwloc/topology-freebsd.c]\n\thwloc_config_prefix[tests/hwloc/ports/topology-netbsd.c]:hwloc_config_prefix[hwloc/topology-netbsd.c]\n\thwloc_config_prefix[tests/hwloc/ports/topology-hpux.c]:hwloc_config_prefix[hwloc/topology-hpux.c]\n\thwloc_config_prefix[tests/hwloc/ports/topology-bgq.c]:hwloc_config_prefix[hwloc/topology-bgq.c]\n\thwloc_config_prefix[tests/hwloc/ports/topology-opencl.c]:hwloc_config_prefix[hwloc/topology-opencl.c]\n\thwloc_config_prefix[tests/hwloc/ports/topology-cuda.c]:hwloc_config_prefix[hwloc/topology-cuda.c]\n\thwloc_config_prefix[tests/hwloc/ports/topology-nvml.c]:hwloc_config_prefix[hwloc/topology-nvml.c]\n\thwloc_config_prefix[tests/hwloc/ports/topology-gl.c]:hwloc_config_prefix[hwloc/topology-gl.c]\n\thwloc_config_prefix[tests/hwloc/ports/lstopo-windows.c]:hwloc_config_prefix[utils/lstopo/lstopo-windows.c])\n    ])\n])dnl\n\n#-----------------------------------------------------------------------\n\nAC_DEFUN([_HWLOC_PROG_DIFF], [\n  AC_ARG_VAR(DIFF, [diff tool])\n  AC_PATH_PROG([DIFF], [diff])\n])\n\nAC_DEFUN([_HWLOC_CHECK_DIFF_U], [\n  AC_REQUIRE([_HWLOC_PROG_DIFF])\n  AC_MSG_CHECKING([whether diff accepts -u])\n  if $DIFF -u /dev/null /dev/null 2> /dev/null\n  then\n    AC_MSG_RESULT([yes])\n    HWLOC_DIFF_U=\"-u\"\n  else\n    AC_MSG_RESULT([no])\n    HWLOC_DIFF_U=\"\"\n  fi\n  AC_SUBST([HWLOC_DIFF_U])\n])\n\nAC_DEFUN([_HWLOC_CHECK_DIFF_W], [\n  AC_REQUIRE([_HWLOC_PROG_DIFF])\n  AC_MSG_CHECKING([whether diff accepts -w])\n  if $DIFF -w /dev/null /dev/null 2> /dev/null\n  then\n    AC_MSG_RESULT([yes])\n    HWLOC_DIFF_W=\"-w\"\n  else\n    AC_MSG_RESULT([no])\n    HWLOC_DIFF_W=\"\"\n  fi\n  AC_SUBST([HWLOC_DIFF_W])\n])\n",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/config/ltmain.sh": "#! /bin/sh\n## DO NOT EDIT - This file generated from ./build-aux/ltmain.in\n##               by inline-source v2014-01-03.01\n\n# libtool (GNU libtool) 2.4.6\n# Provide generalized library-building support services.\n# Written by Gordon Matzigkeit <gord@gnu.ai.mit.edu>, 1996\n\n# Copyright (C) 1996-2015 Free Software Foundation, Inc.\n# This is free software; see the source for copying conditions.  There is NO\n# warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# GNU Libtool is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2 of the License, or\n# (at your option) any later version.\n#\n# As a special exception to the GNU General Public License,\n# if you distribute this file as part of a program or library that\n# is built using GNU Libtool, you may include this file under the\n# same distribution terms that you use for the rest of that program.\n#\n# GNU Libtool is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n# General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n\nPROGRAM=libtool\nPACKAGE=libtool\nVERSION=2.4.6\npackage_revision=2.4.6\n\n\n## ------ ##\n## Usage. ##\n## ------ ##\n\n# Run './libtool --help' for help with using this script from the\n# command line.\n\n\n## ------------------------------- ##\n## User overridable command paths. ##\n## ------------------------------- ##\n\n# After configure completes, it has a better idea of some of the\n# shell tools we need than the defaults used by the functions shared\n# with bootstrap, so set those here where they can still be over-\n# ridden by the user, but otherwise take precedence.\n\n: ${AUTOCONF=\"autoconf\"}\n: ${AUTOMAKE=\"automake\"}\n\n\n## -------------------------- ##\n## Source external libraries. ##\n## -------------------------- ##\n\n# Much of our low-level functionality needs to be sourced from external\n# libraries, which are installed to $pkgauxdir.\n\n# Set a version string for this script.\nscriptversion=2015-01-20.17; # UTC\n\n# General shell script boiler plate, and helper functions.\n# Written by Gary V. Vaughan, 2004\n\n# Copyright (C) 2004-2015 Free Software Foundation, Inc.\n# This is free software; see the source for copying conditions.  There is NO\n# warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# This program is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 3 of the License, or\n# (at your option) any later version.\n\n# As a special exception to the GNU General Public License, if you distribute\n# this file as part of a program or library that is built using GNU Libtool,\n# you may include this file under the same distribution terms that you use\n# for the rest of that program.\n\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNES FOR A PARTICULAR PURPOSE. See the GNU\n# General Public License for more details.\n\n# You should have received a copy of the GNU General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n\n# Please report bugs or propose patches to gary@gnu.org.\n\n\n## ------ ##\n## Usage. ##\n## ------ ##\n\n# Evaluate this file near the top of your script to gain access to\n# the functions and variables defined here:\n#\n#   . `echo \"$0\" | ${SED-sed} 's|[^/]*$||'`/build-aux/funclib.sh\n#\n# If you need to override any of the default environment variable\n# settings, do that before evaluating this file.\n\n\n## -------------------- ##\n## Shell normalisation. ##\n## -------------------- ##\n\n# Some shells need a little help to be as Bourne compatible as possible.\n# Before doing anything else, make sure all that help has been provided!\n\nDUALCASE=1; export DUALCASE # for MKS sh\nif test -n \"${ZSH_VERSION+set}\" && (emulate sh) >/dev/null 2>&1; then :\n  emulate sh\n  NULLCMD=:\n  # Pre-4.2 versions of Zsh do word splitting on ${1+\"$@\"}, which\n  # is contrary to our usage.  Disable this feature.\n  alias -g '${1+\"$@\"}'='\"$@\"'\n  setopt NO_GLOB_SUBST\nelse\n  case `(set -o) 2>/dev/null` in *posix*) set -o posix ;; esac\nfi\n\n# NLS nuisances: We save the old values in case they are required later.\n_G_user_locale=\n_G_safe_locale=\nfor _G_var in LANG LANGUAGE LC_ALL LC_CTYPE LC_COLLATE LC_MESSAGES\ndo\n  eval \"if test set = \\\"\\${$_G_var+set}\\\"; then\n          save_$_G_var=\\$$_G_var\n          $_G_var=C\n\t  export $_G_var\n\t  _G_user_locale=\\\"$_G_var=\\\\\\$save_\\$_G_var; \\$_G_user_locale\\\"\n\t  _G_safe_locale=\\\"$_G_var=C; \\$_G_safe_locale\\\"\n\tfi\"\ndone\n\n# CDPATH.\n(unset CDPATH) >/dev/null 2>&1 && unset CDPATH\n\n# Make sure IFS has a sensible default\nsp=' '\nnl='\n'\nIFS=\"$sp\t$nl\"\n\n# There are apparently some retarded systems that use ';' as a PATH separator!\nif test \"${PATH_SEPARATOR+set}\" != set; then\n  PATH_SEPARATOR=:\n  (PATH='/bin;/bin'; FPATH=$PATH; sh -c :) >/dev/null 2>&1 && {\n    (PATH='/bin:/bin'; FPATH=$PATH; sh -c :) >/dev/null 2>&1 ||\n      PATH_SEPARATOR=';'\n  }\nfi\n\n\n\n## ------------------------- ##\n## Locate command utilities. ##\n## ------------------------- ##\n\n\n# func_executable_p FILE\n# ----------------------\n# Check that FILE is an executable regular file.\nfunc_executable_p ()\n{\n    test -f \"$1\" && test -x \"$1\"\n}\n\n\n# func_path_progs PROGS_LIST CHECK_FUNC [PATH]\n# --------------------------------------------\n# Search for either a program that responds to --version with output\n# containing \"GNU\", or else returned by CHECK_FUNC otherwise, by\n# trying all the directories in PATH with each of the elements of\n# PROGS_LIST.\n#\n# CHECK_FUNC should accept the path to a candidate program, and\n# set $func_check_prog_result if it truncates its output less than\n# $_G_path_prog_max characters.\nfunc_path_progs ()\n{\n    _G_progs_list=$1\n    _G_check_func=$2\n    _G_PATH=${3-\"$PATH\"}\n\n    _G_path_prog_max=0\n    _G_path_prog_found=false\n    _G_save_IFS=$IFS; IFS=${PATH_SEPARATOR-:}\n    for _G_dir in $_G_PATH; do\n      IFS=$_G_save_IFS\n      test -z \"$_G_dir\" && _G_dir=.\n      for _G_prog_name in $_G_progs_list; do\n        for _exeext in '' .EXE; do\n          _G_path_prog=$_G_dir/$_G_prog_name$_exeext\n          func_executable_p \"$_G_path_prog\" || continue\n          case `\"$_G_path_prog\" --version 2>&1` in\n            *GNU*) func_path_progs_result=$_G_path_prog _G_path_prog_found=: ;;\n            *)     $_G_check_func $_G_path_prog\n\t\t   func_path_progs_result=$func_check_prog_result\n\t\t   ;;\n          esac\n          $_G_path_prog_found && break 3\n        done\n      done\n    done\n    IFS=$_G_save_IFS\n    test -z \"$func_path_progs_result\" && {\n      echo \"no acceptable sed could be found in \\$PATH\" >&2\n      exit 1\n    }\n}\n\n\n# We want to be able to use the functions in this file before configure\n# has figured out where the best binaries are kept, which means we have\n# to search for them ourselves - except when the results are already set\n# where we skip the searches.\n\n# Unless the user overrides by setting SED, search the path for either GNU\n# sed, or the sed that truncates its output the least.\ntest -z \"$SED\" && {\n  _G_sed_script=s/aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb/\n  for _G_i in 1 2 3 4 5 6 7; do\n    _G_sed_script=$_G_sed_script$nl$_G_sed_script\n  done\n  echo \"$_G_sed_script\" 2>/dev/null | sed 99q >conftest.sed\n  _G_sed_script=\n\n  func_check_prog_sed ()\n  {\n    _G_path_prog=$1\n\n    _G_count=0\n    printf 0123456789 >conftest.in\n    while :\n    do\n      cat conftest.in conftest.in >conftest.tmp\n      mv conftest.tmp conftest.in\n      cp conftest.in conftest.nl\n      echo '' >> conftest.nl\n      \"$_G_path_prog\" -f conftest.sed <conftest.nl >conftest.out 2>/dev/null || break\n      diff conftest.out conftest.nl >/dev/null 2>&1 || break\n      _G_count=`expr $_G_count + 1`\n      if test \"$_G_count\" -gt \"$_G_path_prog_max\"; then\n        # Best one so far, save it but keep looking for a better one\n        func_check_prog_result=$_G_path_prog\n        _G_path_prog_max=$_G_count\n      fi\n      # 10*(2^10) chars as input seems more than enough\n      test 10 -lt \"$_G_count\" && break\n    done\n    rm -f conftest.in conftest.tmp conftest.nl conftest.out\n  }\n\n  func_path_progs \"sed gsed\" func_check_prog_sed $PATH:/usr/xpg4/bin\n  rm -f conftest.sed\n  SED=$func_path_progs_result\n}\n\n\n# Unless the user overrides by setting GREP, search the path for either GNU\n# grep, or the grep that truncates its output the least.\ntest -z \"$GREP\" && {\n  func_check_prog_grep ()\n  {\n    _G_path_prog=$1\n\n    _G_count=0\n    _G_path_prog_max=0\n    printf 0123456789 >conftest.in\n    while :\n    do\n      cat conftest.in conftest.in >conftest.tmp\n      mv conftest.tmp conftest.in\n      cp conftest.in conftest.nl\n      echo 'GREP' >> conftest.nl\n      \"$_G_path_prog\" -e 'GREP$' -e '-(cannot match)-' <conftest.nl >conftest.out 2>/dev/null || break\n      diff conftest.out conftest.nl >/dev/null 2>&1 || break\n      _G_count=`expr $_G_count + 1`\n      if test \"$_G_count\" -gt \"$_G_path_prog_max\"; then\n        # Best one so far, save it but keep looking for a better one\n        func_check_prog_result=$_G_path_prog\n        _G_path_prog_max=$_G_count\n      fi\n      # 10*(2^10) chars as input seems more than enough\n      test 10 -lt \"$_G_count\" && break\n    done\n    rm -f conftest.in conftest.tmp conftest.nl conftest.out\n  }\n\n  func_path_progs \"grep ggrep\" func_check_prog_grep $PATH:/usr/xpg4/bin\n  GREP=$func_path_progs_result\n}\n\n\n## ------------------------------- ##\n## User overridable command paths. ##\n## ------------------------------- ##\n\n# All uppercase variable names are used for environment variables.  These\n# variables can be overridden by the user before calling a script that\n# uses them if a suitable command of that name is not already available\n# in the command search PATH.\n\n: ${CP=\"cp -f\"}\n: ${ECHO=\"printf %s\\n\"}\n: ${EGREP=\"$GREP -E\"}\n: ${FGREP=\"$GREP -F\"}\n: ${LN_S=\"ln -s\"}\n: ${MAKE=\"make\"}\n: ${MKDIR=\"mkdir\"}\n: ${MV=\"mv -f\"}\n: ${RM=\"rm -f\"}\n: ${SHELL=\"${CONFIG_SHELL-/bin/sh}\"}\n\n\n## -------------------- ##\n## Useful sed snippets. ##\n## -------------------- ##\n\nsed_dirname='s|/[^/]*$||'\nsed_basename='s|^.*/||'\n\n# Sed substitution that helps us do robust quoting.  It backslashifies\n# metacharacters that are still active within double-quoted strings.\nsed_quote_subst='s|\\([`\"$\\\\]\\)|\\\\\\1|g'\n\n# Same as above, but do not quote variable references.\nsed_double_quote_subst='s/\\([\"`\\\\]\\)/\\\\\\1/g'\n\n# Sed substitution that turns a string into a regex matching for the\n# string literally.\nsed_make_literal_regex='s|[].[^$\\\\*\\/]|\\\\&|g'\n\n# Sed substitution that converts a w32 file name or path\n# that contains forward slashes, into one that contains\n# (escaped) backslashes.  A very naive implementation.\nsed_naive_backslashify='s|\\\\\\\\*|\\\\|g;s|/|\\\\|g;s|\\\\|\\\\\\\\|g'\n\n# Re-'\\' parameter expansions in output of sed_double_quote_subst that\n# were '\\'-ed in input to the same.  If an odd number of '\\' preceded a\n# '$' in input to sed_double_quote_subst, that '$' was protected from\n# expansion.  Since each input '\\' is now two '\\'s, look for any number\n# of runs of four '\\'s followed by two '\\'s and then a '$'.  '\\' that '$'.\n_G_bs='\\\\'\n_G_bs2='\\\\\\\\'\n_G_bs4='\\\\\\\\\\\\\\\\'\n_G_dollar='\\$'\nsed_double_backslash=\"\\\n  s/$_G_bs4/&\\\\\n/g\n  s/^$_G_bs2$_G_dollar/$_G_bs&/\n  s/\\\\([^$_G_bs]\\\\)$_G_bs2$_G_dollar/\\\\1$_G_bs2$_G_bs$_G_dollar/g\n  s/\\n//g\"\n\n\n## ----------------- ##\n## Global variables. ##\n## ----------------- ##\n\n# Except for the global variables explicitly listed below, the following\n# functions in the '^func_' namespace, and the '^require_' namespace\n# variables initialised in the 'Resource management' section, sourcing\n# this file will not pollute your global namespace with anything\n# else. There's no portable way to scope variables in Bourne shell\n# though, so actually running these functions will sometimes place\n# results into a variable named after the function, and often use\n# temporary variables in the '^_G_' namespace. If you are careful to\n# avoid using those namespaces casually in your sourcing script, things\n# should continue to work as you expect. And, of course, you can freely\n# overwrite any of the functions or variables defined here before\n# calling anything to customize them.\n\nEXIT_SUCCESS=0\nEXIT_FAILURE=1\nEXIT_MISMATCH=63  # $? = 63 is used to indicate version mismatch to missing.\nEXIT_SKIP=77\t  # $? = 77 is used to indicate a skipped test to automake.\n\n# Allow overriding, eg assuming that you follow the convention of\n# putting '$debug_cmd' at the start of all your functions, you can get\n# bash to show function call trace with:\n#\n#    debug_cmd='eval echo \"${FUNCNAME[0]} $*\" >&2' bash your-script-name\ndebug_cmd=${debug_cmd-\":\"}\nexit_cmd=:\n\n# By convention, finish your script with:\n#\n#    exit $exit_status\n#\n# so that you can set exit_status to non-zero if you want to indicate\n# something went wrong during execution without actually bailing out at\n# the point of failure.\nexit_status=$EXIT_SUCCESS\n\n# Work around backward compatibility issue on IRIX 6.5. On IRIX 6.4+, sh\n# is ksh but when the shell is invoked as \"sh\" and the current value of\n# the _XPG environment variable is not equal to 1 (one), the special\n# positional parameter $0, within a function call, is the name of the\n# function.\nprogpath=$0\n\n# The name of this program.\nprogname=`$ECHO \"$progpath\" |$SED \"$sed_basename\"`\n\n# Make sure we have an absolute progpath for reexecution:\ncase $progpath in\n  [\\\\/]*|[A-Za-z]:\\\\*) ;;\n  *[\\\\/]*)\n     progdir=`$ECHO \"$progpath\" |$SED \"$sed_dirname\"`\n     progdir=`cd \"$progdir\" && pwd`\n     progpath=$progdir/$progname\n     ;;\n  *)\n     _G_IFS=$IFS\n     IFS=${PATH_SEPARATOR-:}\n     for progdir in $PATH; do\n       IFS=$_G_IFS\n       test -x \"$progdir/$progname\" && break\n     done\n     IFS=$_G_IFS\n     test -n \"$progdir\" || progdir=`pwd`\n     progpath=$progdir/$progname\n     ;;\nesac\n\n\n## ----------------- ##\n## Standard options. ##\n## ----------------- ##\n\n# The following options affect the operation of the functions defined\n# below, and should be set appropriately depending on run-time para-\n# meters passed on the command line.\n\nopt_dry_run=false\nopt_quiet=false\nopt_verbose=false\n\n# Categories 'all' and 'none' are always available.  Append any others\n# you will pass as the first argument to func_warning from your own\n# code.\nwarning_categories=\n\n# By default, display warnings according to 'opt_warning_types'.  Set\n# 'warning_func'  to ':' to elide all warnings, or func_fatal_error to\n# treat the next displayed warning as a fatal error.\nwarning_func=func_warn_and_continue\n\n# Set to 'all' to display all warnings, 'none' to suppress all\n# warnings, or a space delimited list of some subset of\n# 'warning_categories' to display only the listed warnings.\nopt_warning_types=all\n\n\n## -------------------- ##\n## Resource management. ##\n## -------------------- ##\n\n# This section contains definitions for functions that each ensure a\n# particular resource (a file, or a non-empty configuration variable for\n# example) is available, and if appropriate to extract default values\n# from pertinent package files. Call them using their associated\n# 'require_*' variable to ensure that they are executed, at most, once.\n#\n# It's entirely deliberate that calling these functions can set\n# variables that don't obey the namespace limitations obeyed by the rest\n# of this file, in order that that they be as useful as possible to\n# callers.\n\n\n# require_term_colors\n# -------------------\n# Allow display of bold text on terminals that support it.\nrequire_term_colors=func_require_term_colors\nfunc_require_term_colors ()\n{\n    $debug_cmd\n\n    test -t 1 && {\n      # COLORTERM and USE_ANSI_COLORS environment variables take\n      # precedence, because most terminfo databases neglect to describe\n      # whether color sequences are supported.\n      test -n \"${COLORTERM+set}\" && : ${USE_ANSI_COLORS=\"1\"}\n\n      if test 1 = \"$USE_ANSI_COLORS\"; then\n        # Standard ANSI escape sequences\n        tc_reset='\u001b[0m'\n        tc_bold='\u001b[1m';   tc_standout='\u001b[7m'\n        tc_red='\u001b[31m';   tc_green='\u001b[32m'\n        tc_blue='\u001b[34m';  tc_cyan='\u001b[36m'\n      else\n        # Otherwise trust the terminfo database after all.\n        test -n \"`tput sgr0 2>/dev/null`\" && {\n          tc_reset=`tput sgr0`\n          test -n \"`tput bold 2>/dev/null`\" && tc_bold=`tput bold`\n          tc_standout=$tc_bold\n          test -n \"`tput smso 2>/dev/null`\" && tc_standout=`tput smso`\n          test -n \"`tput setaf 1 2>/dev/null`\" && tc_red=`tput setaf 1`\n          test -n \"`tput setaf 2 2>/dev/null`\" && tc_green=`tput setaf 2`\n          test -n \"`tput setaf 4 2>/dev/null`\" && tc_blue=`tput setaf 4`\n          test -n \"`tput setaf 5 2>/dev/null`\" && tc_cyan=`tput setaf 5`\n        }\n      fi\n    }\n\n    require_term_colors=:\n}\n\n\n## ----------------- ##\n## Function library. ##\n## ----------------- ##\n\n# This section contains a variety of useful functions to call in your\n# scripts. Take note of the portable wrappers for features provided by\n# some modern shells, which will fall back to slower equivalents on\n# less featureful shells.\n\n\n# func_append VAR VALUE\n# ---------------------\n# Append VALUE onto the existing contents of VAR.\n\n  # We should try to minimise forks, especially on Windows where they are\n  # unreasonably slow, so skip the feature probes when bash or zsh are\n  # being used:\n  if test set = \"${BASH_VERSION+set}${ZSH_VERSION+set}\"; then\n    : ${_G_HAVE_ARITH_OP=\"yes\"}\n    : ${_G_HAVE_XSI_OPS=\"yes\"}\n    # The += operator was introduced in bash 3.1\n    case $BASH_VERSION in\n      [12].* | 3.0 | 3.0*) ;;\n      *)\n        : ${_G_HAVE_PLUSEQ_OP=\"yes\"}\n        ;;\n    esac\n  fi\n\n  # _G_HAVE_PLUSEQ_OP\n  # Can be empty, in which case the shell is probed, \"yes\" if += is\n  # useable or anything else if it does not work.\n  test -z \"$_G_HAVE_PLUSEQ_OP\" \\\n    && (eval 'x=a; x+=\" b\"; test \"a b\" = \"$x\"') 2>/dev/null \\\n    && _G_HAVE_PLUSEQ_OP=yes\n\nif test yes = \"$_G_HAVE_PLUSEQ_OP\"\nthen\n  # This is an XSI compatible shell, allowing a faster implementation...\n  eval 'func_append ()\n  {\n    $debug_cmd\n\n    eval \"$1+=\\$2\"\n  }'\nelse\n  # ...otherwise fall back to using expr, which is often a shell builtin.\n  func_append ()\n  {\n    $debug_cmd\n\n    eval \"$1=\\$$1\\$2\"\n  }\nfi\n\n\n# func_append_quoted VAR VALUE\n# ----------------------------\n# Quote VALUE and append to the end of shell variable VAR, separated\n# by a space.\nif test yes = \"$_G_HAVE_PLUSEQ_OP\"; then\n  eval 'func_append_quoted ()\n  {\n    $debug_cmd\n\n    func_quote_for_eval \"$2\"\n    eval \"$1+=\\\\ \\$func_quote_for_eval_result\"\n  }'\nelse\n  func_append_quoted ()\n  {\n    $debug_cmd\n\n    func_quote_for_eval \"$2\"\n    eval \"$1=\\$$1\\\\ \\$func_quote_for_eval_result\"\n  }\nfi\n\n\n# func_append_uniq VAR VALUE\n# --------------------------\n# Append unique VALUE onto the existing contents of VAR, assuming\n# entries are delimited by the first character of VALUE.  For example:\n#\n#   func_append_uniq options \" --another-option option-argument\"\n#\n# will only append to $options if \" --another-option option-argument \"\n# is not already present somewhere in $options already (note spaces at\n# each end implied by leading space in second argument).\nfunc_append_uniq ()\n{\n    $debug_cmd\n\n    eval _G_current_value='`$ECHO $'$1'`'\n    _G_delim=`expr \"$2\" : '\\(.\\)'`\n\n    case $_G_delim$_G_current_value$_G_delim in\n      *\"$2$_G_delim\"*) ;;\n      *) func_append \"$@\" ;;\n    esac\n}\n\n\n# func_arith TERM...\n# ------------------\n# Set func_arith_result to the result of evaluating TERMs.\n  test -z \"$_G_HAVE_ARITH_OP\" \\\n    && (eval 'test 2 = $(( 1 + 1 ))') 2>/dev/null \\\n    && _G_HAVE_ARITH_OP=yes\n\nif test yes = \"$_G_HAVE_ARITH_OP\"; then\n  eval 'func_arith ()\n  {\n    $debug_cmd\n\n    func_arith_result=$(( $* ))\n  }'\nelse\n  func_arith ()\n  {\n    $debug_cmd\n\n    func_arith_result=`expr \"$@\"`\n  }\nfi\n\n\n# func_basename FILE\n# ------------------\n# Set func_basename_result to FILE with everything up to and including\n# the last / stripped.\nif test yes = \"$_G_HAVE_XSI_OPS\"; then\n  # If this shell supports suffix pattern removal, then use it to avoid\n  # forking. Hide the definitions single quotes in case the shell chokes\n  # on unsupported syntax...\n  _b='func_basename_result=${1##*/}'\n  _d='case $1 in\n        */*) func_dirname_result=${1%/*}$2 ;;\n        *  ) func_dirname_result=$3        ;;\n      esac'\n\nelse\n  # ...otherwise fall back to using sed.\n  _b='func_basename_result=`$ECHO \"$1\" |$SED \"$sed_basename\"`'\n  _d='func_dirname_result=`$ECHO \"$1\"  |$SED \"$sed_dirname\"`\n      if test \"X$func_dirname_result\" = \"X$1\"; then\n        func_dirname_result=$3\n      else\n        func_append func_dirname_result \"$2\"\n      fi'\nfi\n\neval 'func_basename ()\n{\n    $debug_cmd\n\n    '\"$_b\"'\n}'\n\n\n# func_dirname FILE APPEND NONDIR_REPLACEMENT\n# -------------------------------------------\n# Compute the dirname of FILE.  If nonempty, add APPEND to the result,\n# otherwise set result to NONDIR_REPLACEMENT.\neval 'func_dirname ()\n{\n    $debug_cmd\n\n    '\"$_d\"'\n}'\n\n\n# func_dirname_and_basename FILE APPEND NONDIR_REPLACEMENT\n# --------------------------------------------------------\n# Perform func_basename and func_dirname in a single function\n# call:\n#   dirname:  Compute the dirname of FILE.  If nonempty,\n#             add APPEND to the result, otherwise set result\n#             to NONDIR_REPLACEMENT.\n#             value returned in \"$func_dirname_result\"\n#   basename: Compute filename of FILE.\n#             value retuned in \"$func_basename_result\"\n# For efficiency, we do not delegate to the functions above but instead\n# duplicate the functionality here.\neval 'func_dirname_and_basename ()\n{\n    $debug_cmd\n\n    '\"$_b\"'\n    '\"$_d\"'\n}'\n\n\n# func_echo ARG...\n# ----------------\n# Echo program name prefixed message.\nfunc_echo ()\n{\n    $debug_cmd\n\n    _G_message=$*\n\n    func_echo_IFS=$IFS\n    IFS=$nl\n    for _G_line in $_G_message; do\n      IFS=$func_echo_IFS\n      $ECHO \"$progname: $_G_line\"\n    done\n    IFS=$func_echo_IFS\n}\n\n\n# func_echo_all ARG...\n# --------------------\n# Invoke $ECHO with all args, space-separated.\nfunc_echo_all ()\n{\n    $ECHO \"$*\"\n}\n\n\n# func_echo_infix_1 INFIX ARG...\n# ------------------------------\n# Echo program name, followed by INFIX on the first line, with any\n# additional lines not showing INFIX.\nfunc_echo_infix_1 ()\n{\n    $debug_cmd\n\n    $require_term_colors\n\n    _G_infix=$1; shift\n    _G_indent=$_G_infix\n    _G_prefix=\"$progname: $_G_infix: \"\n    _G_message=$*\n\n    # Strip color escape sequences before counting printable length\n    for _G_tc in \"$tc_reset\" \"$tc_bold\" \"$tc_standout\" \"$tc_red\" \"$tc_green\" \"$tc_blue\" \"$tc_cyan\"\n    do\n      test -n \"$_G_tc\" && {\n        _G_esc_tc=`$ECHO \"$_G_tc\" | $SED \"$sed_make_literal_regex\"`\n        _G_indent=`$ECHO \"$_G_indent\" | $SED \"s|$_G_esc_tc||g\"`\n      }\n    done\n    _G_indent=\"$progname: \"`echo \"$_G_indent\" | $SED 's|.| |g'`\"  \" ## exclude from sc_prohibit_nested_quotes\n\n    func_echo_infix_1_IFS=$IFS\n    IFS=$nl\n    for _G_line in $_G_message; do\n      IFS=$func_echo_infix_1_IFS\n      $ECHO \"$_G_prefix$tc_bold$_G_line$tc_reset\" >&2\n      _G_prefix=$_G_indent\n    done\n    IFS=$func_echo_infix_1_IFS\n}\n\n\n# func_error ARG...\n# -----------------\n# Echo program name prefixed message to standard error.\nfunc_error ()\n{\n    $debug_cmd\n\n    $require_term_colors\n\n    func_echo_infix_1 \"  $tc_standout${tc_red}error$tc_reset\" \"$*\" >&2\n}\n\n\n# func_fatal_error ARG...\n# -----------------------\n# Echo program name prefixed message to standard error, and exit.\nfunc_fatal_error ()\n{\n    $debug_cmd\n\n    func_error \"$*\"\n    exit $EXIT_FAILURE\n}\n\n\n# func_grep EXPRESSION FILENAME\n# -----------------------------\n# Check whether EXPRESSION matches any line of FILENAME, without output.\nfunc_grep ()\n{\n    $debug_cmd\n\n    $GREP \"$1\" \"$2\" >/dev/null 2>&1\n}\n\n\n# func_len STRING\n# ---------------\n# Set func_len_result to the length of STRING. STRING may not\n# start with a hyphen.\n  test -z \"$_G_HAVE_XSI_OPS\" \\\n    && (eval 'x=a/b/c;\n      test 5aa/bb/cc = \"${#x}${x%%/*}${x%/*}${x#*/}${x##*/}\"') 2>/dev/null \\\n    && _G_HAVE_XSI_OPS=yes\n\nif test yes = \"$_G_HAVE_XSI_OPS\"; then\n  eval 'func_len ()\n  {\n    $debug_cmd\n\n    func_len_result=${#1}\n  }'\nelse\n  func_len ()\n  {\n    $debug_cmd\n\n    func_len_result=`expr \"$1\" : \".*\" 2>/dev/null || echo $max_cmd_len`\n  }\nfi\n\n\n# func_mkdir_p DIRECTORY-PATH\n# ---------------------------\n# Make sure the entire path to DIRECTORY-PATH is available.\nfunc_mkdir_p ()\n{\n    $debug_cmd\n\n    _G_directory_path=$1\n    _G_dir_list=\n\n    if test -n \"$_G_directory_path\" && test : != \"$opt_dry_run\"; then\n\n      # Protect directory names starting with '-'\n      case $_G_directory_path in\n        -*) _G_directory_path=./$_G_directory_path ;;\n      esac\n\n      # While some portion of DIR does not yet exist...\n      while test ! -d \"$_G_directory_path\"; do\n        # ...make a list in topmost first order.  Use a colon delimited\n\t# list incase some portion of path contains whitespace.\n        _G_dir_list=$_G_directory_path:$_G_dir_list\n\n        # If the last portion added has no slash in it, the list is done\n        case $_G_directory_path in */*) ;; *) break ;; esac\n\n        # ...otherwise throw away the child directory and loop\n        _G_directory_path=`$ECHO \"$_G_directory_path\" | $SED -e \"$sed_dirname\"`\n      done\n      _G_dir_list=`$ECHO \"$_G_dir_list\" | $SED 's|:*$||'`\n\n      func_mkdir_p_IFS=$IFS; IFS=:\n      for _G_dir in $_G_dir_list; do\n\tIFS=$func_mkdir_p_IFS\n        # mkdir can fail with a 'File exist' error if two processes\n        # try to create one of the directories concurrently.  Don't\n        # stop in that case!\n        $MKDIR \"$_G_dir\" 2>/dev/null || :\n      done\n      IFS=$func_mkdir_p_IFS\n\n      # Bail out if we (or some other process) failed to create a directory.\n      test -d \"$_G_directory_path\" || \\\n        func_fatal_error \"Failed to create '$1'\"\n    fi\n}\n\n\n# func_mktempdir [BASENAME]\n# -------------------------\n# Make a temporary directory that won't clash with other running\n# libtool processes, and avoids race conditions if possible.  If\n# given, BASENAME is the basename for that directory.\nfunc_mktempdir ()\n{\n    $debug_cmd\n\n    _G_template=${TMPDIR-/tmp}/${1-$progname}\n\n    if test : = \"$opt_dry_run\"; then\n      # Return a directory name, but don't create it in dry-run mode\n      _G_tmpdir=$_G_template-$$\n    else\n\n      # If mktemp works, use that first and foremost\n      _G_tmpdir=`mktemp -d \"$_G_template-XXXXXXXX\" 2>/dev/null`\n\n      if test ! -d \"$_G_tmpdir\"; then\n        # Failing that, at least try and use $RANDOM to avoid a race\n        _G_tmpdir=$_G_template-${RANDOM-0}$$\n\n        func_mktempdir_umask=`umask`\n        umask 0077\n        $MKDIR \"$_G_tmpdir\"\n        umask $func_mktempdir_umask\n      fi\n\n      # If we're not in dry-run mode, bomb out on failure\n      test -d \"$_G_tmpdir\" || \\\n        func_fatal_error \"cannot create temporary directory '$_G_tmpdir'\"\n    fi\n\n    $ECHO \"$_G_tmpdir\"\n}\n\n\n# func_normal_abspath PATH\n# ------------------------\n# Remove doubled-up and trailing slashes, \".\" path components,\n# and cancel out any \"..\" path components in PATH after making\n# it an absolute path.\nfunc_normal_abspath ()\n{\n    $debug_cmd\n\n    # These SED scripts presuppose an absolute path with a trailing slash.\n    _G_pathcar='s|^/\\([^/]*\\).*$|\\1|'\n    _G_pathcdr='s|^/[^/]*||'\n    _G_removedotparts=':dotsl\n\t\ts|/\\./|/|g\n\t\tt dotsl\n\t\ts|/\\.$|/|'\n    _G_collapseslashes='s|/\\{1,\\}|/|g'\n    _G_finalslash='s|/*$|/|'\n\n    # Start from root dir and reassemble the path.\n    func_normal_abspath_result=\n    func_normal_abspath_tpath=$1\n    func_normal_abspath_altnamespace=\n    case $func_normal_abspath_tpath in\n      \"\")\n        # Empty path, that just means $cwd.\n        func_stripname '' '/' \"`pwd`\"\n        func_normal_abspath_result=$func_stripname_result\n        return\n        ;;\n      # The next three entries are used to spot a run of precisely\n      # two leading slashes without using negated character classes;\n      # we take advantage of case's first-match behaviour.\n      ///*)\n        # Unusual form of absolute path, do nothing.\n        ;;\n      //*)\n        # Not necessarily an ordinary path; POSIX reserves leading '//'\n        # and for example Cygwin uses it to access remote file shares\n        # over CIFS/SMB, so we conserve a leading double slash if found.\n        func_normal_abspath_altnamespace=/\n        ;;\n      /*)\n        # Absolute path, do nothing.\n        ;;\n      *)\n        # Relative path, prepend $cwd.\n        func_normal_abspath_tpath=`pwd`/$func_normal_abspath_tpath\n        ;;\n    esac\n\n    # Cancel out all the simple stuff to save iterations.  We also want\n    # the path to end with a slash for ease of parsing, so make sure\n    # there is one (and only one) here.\n    func_normal_abspath_tpath=`$ECHO \"$func_normal_abspath_tpath\" | $SED \\\n          -e \"$_G_removedotparts\" -e \"$_G_collapseslashes\" -e \"$_G_finalslash\"`\n    while :; do\n      # Processed it all yet?\n      if test / = \"$func_normal_abspath_tpath\"; then\n        # If we ascended to the root using \"..\" the result may be empty now.\n        if test -z \"$func_normal_abspath_result\"; then\n          func_normal_abspath_result=/\n        fi\n        break\n      fi\n      func_normal_abspath_tcomponent=`$ECHO \"$func_normal_abspath_tpath\" | $SED \\\n          -e \"$_G_pathcar\"`\n      func_normal_abspath_tpath=`$ECHO \"$func_normal_abspath_tpath\" | $SED \\\n          -e \"$_G_pathcdr\"`\n      # Figure out what to do with it\n      case $func_normal_abspath_tcomponent in\n        \"\")\n          # Trailing empty path component, ignore it.\n          ;;\n        ..)\n          # Parent dir; strip last assembled component from result.\n          func_dirname \"$func_normal_abspath_result\"\n          func_normal_abspath_result=$func_dirname_result\n          ;;\n        *)\n          # Actual path component, append it.\n          func_append func_normal_abspath_result \"/$func_normal_abspath_tcomponent\"\n          ;;\n      esac\n    done\n    # Restore leading double-slash if one was found on entry.\n    func_normal_abspath_result=$func_normal_abspath_altnamespace$func_normal_abspath_result\n}\n\n\n# func_notquiet ARG...\n# --------------------\n# Echo program name prefixed message only when not in quiet mode.\nfunc_notquiet ()\n{\n    $debug_cmd\n\n    $opt_quiet || func_echo ${1+\"$@\"}\n\n    # A bug in bash halts the script if the last line of a function\n    # fails when set -e is in force, so we need another command to\n    # work around that:\n    :\n}\n\n\n# func_relative_path SRCDIR DSTDIR\n# --------------------------------\n# Set func_relative_path_result to the relative path from SRCDIR to DSTDIR.\nfunc_relative_path ()\n{\n    $debug_cmd\n\n    func_relative_path_result=\n    func_normal_abspath \"$1\"\n    func_relative_path_tlibdir=$func_normal_abspath_result\n    func_normal_abspath \"$2\"\n    func_relative_path_tbindir=$func_normal_abspath_result\n\n    # Ascend the tree starting from libdir\n    while :; do\n      # check if we have found a prefix of bindir\n      case $func_relative_path_tbindir in\n        $func_relative_path_tlibdir)\n          # found an exact match\n          func_relative_path_tcancelled=\n          break\n          ;;\n        $func_relative_path_tlibdir*)\n          # found a matching prefix\n          func_stripname \"$func_relative_path_tlibdir\" '' \"$func_relative_path_tbindir\"\n          func_relative_path_tcancelled=$func_stripname_result\n          if test -z \"$func_relative_path_result\"; then\n            func_relative_path_result=.\n          fi\n          break\n          ;;\n        *)\n          func_dirname $func_relative_path_tlibdir\n          func_relative_path_tlibdir=$func_dirname_result\n          if test -z \"$func_relative_path_tlibdir\"; then\n            # Have to descend all the way to the root!\n            func_relative_path_result=../$func_relative_path_result\n            func_relative_path_tcancelled=$func_relative_path_tbindir\n            break\n          fi\n          func_relative_path_result=../$func_relative_path_result\n          ;;\n      esac\n    done\n\n    # Now calculate path; take care to avoid doubling-up slashes.\n    func_stripname '' '/' \"$func_relative_path_result\"\n    func_relative_path_result=$func_stripname_result\n    func_stripname '/' '/' \"$func_relative_path_tcancelled\"\n    if test -n \"$func_stripname_result\"; then\n      func_append func_relative_path_result \"/$func_stripname_result\"\n    fi\n\n    # Normalisation. If bindir is libdir, return '.' else relative path.\n    if test -n \"$func_relative_path_result\"; then\n      func_stripname './' '' \"$func_relative_path_result\"\n      func_relative_path_result=$func_stripname_result\n    fi\n\n    test -n \"$func_relative_path_result\" || func_relative_path_result=.\n\n    :\n}\n\n\n# func_quote_for_eval ARG...\n# --------------------------\n# Aesthetically quote ARGs to be evaled later.\n# This function returns two values:\n#   i) func_quote_for_eval_result\n#      double-quoted, suitable for a subsequent eval\n#  ii) func_quote_for_eval_unquoted_result\n#      has all characters that are still active within double\n#      quotes backslashified.\nfunc_quote_for_eval ()\n{\n    $debug_cmd\n\n    func_quote_for_eval_unquoted_result=\n    func_quote_for_eval_result=\n    while test 0 -lt $#; do\n      case $1 in\n        *[\\\\\\`\\\"\\$]*)\n\t  _G_unquoted_arg=`printf '%s\\n' \"$1\" |$SED \"$sed_quote_subst\"` ;;\n        *)\n          _G_unquoted_arg=$1 ;;\n      esac\n      if test -n \"$func_quote_for_eval_unquoted_result\"; then\n\tfunc_append func_quote_for_eval_unquoted_result \" $_G_unquoted_arg\"\n      else\n        func_append func_quote_for_eval_unquoted_result \"$_G_unquoted_arg\"\n      fi\n\n      case $_G_unquoted_arg in\n        # Double-quote args containing shell metacharacters to delay\n        # word splitting, command substitution and variable expansion\n        # for a subsequent eval.\n        # Many Bourne shells cannot handle close brackets correctly\n        # in scan sets, so we specify it separately.\n        *[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t]*|*]*|\"\")\n          _G_quoted_arg=\\\"$_G_unquoted_arg\\\"\n          ;;\n        *)\n          _G_quoted_arg=$_G_unquoted_arg\n\t  ;;\n      esac\n\n      if test -n \"$func_quote_for_eval_result\"; then\n\tfunc_append func_quote_for_eval_result \" $_G_quoted_arg\"\n      else\n        func_append func_quote_for_eval_result \"$_G_quoted_arg\"\n      fi\n      shift\n    done\n}\n\n\n# func_quote_for_expand ARG\n# -------------------------\n# Aesthetically quote ARG to be evaled later; same as above,\n# but do not quote variable references.\nfunc_quote_for_expand ()\n{\n    $debug_cmd\n\n    case $1 in\n      *[\\\\\\`\\\"]*)\n\t_G_arg=`$ECHO \"$1\" | $SED \\\n\t    -e \"$sed_double_quote_subst\" -e \"$sed_double_backslash\"` ;;\n      *)\n        _G_arg=$1 ;;\n    esac\n\n    case $_G_arg in\n      # Double-quote args containing shell metacharacters to delay\n      # word splitting and command substitution for a subsequent eval.\n      # Many Bourne shells cannot handle close brackets correctly\n      # in scan sets, so we specify it separately.\n      *[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t]*|*]*|\"\")\n        _G_arg=\\\"$_G_arg\\\"\n        ;;\n    esac\n\n    func_quote_for_expand_result=$_G_arg\n}\n\n\n# func_stripname PREFIX SUFFIX NAME\n# ---------------------------------\n# strip PREFIX and SUFFIX from NAME, and store in func_stripname_result.\n# PREFIX and SUFFIX must not contain globbing or regex special\n# characters, hashes, percent signs, but SUFFIX may contain a leading\n# dot (in which case that matches only a dot).\nif test yes = \"$_G_HAVE_XSI_OPS\"; then\n  eval 'func_stripname ()\n  {\n    $debug_cmd\n\n    # pdksh 5.2.14 does not do ${X%$Y} correctly if both X and Y are\n    # positional parameters, so assign one to ordinary variable first.\n    func_stripname_result=$3\n    func_stripname_result=${func_stripname_result#\"$1\"}\n    func_stripname_result=${func_stripname_result%\"$2\"}\n  }'\nelse\n  func_stripname ()\n  {\n    $debug_cmd\n\n    case $2 in\n      .*) func_stripname_result=`$ECHO \"$3\" | $SED -e \"s%^$1%%\" -e \"s%\\\\\\\\$2\\$%%\"`;;\n      *)  func_stripname_result=`$ECHO \"$3\" | $SED -e \"s%^$1%%\" -e \"s%$2\\$%%\"`;;\n    esac\n  }\nfi\n\n\n# func_show_eval CMD [FAIL_EXP]\n# -----------------------------\n# Unless opt_quiet is true, then output CMD.  Then, if opt_dryrun is\n# not true, evaluate CMD.  If the evaluation of CMD fails, and FAIL_EXP\n# is given, then evaluate it.\nfunc_show_eval ()\n{\n    $debug_cmd\n\n    _G_cmd=$1\n    _G_fail_exp=${2-':'}\n\n    func_quote_for_expand \"$_G_cmd\"\n    eval \"func_notquiet $func_quote_for_expand_result\"\n\n    $opt_dry_run || {\n      eval \"$_G_cmd\"\n      _G_status=$?\n      if test 0 -ne \"$_G_status\"; then\n\teval \"(exit $_G_status); $_G_fail_exp\"\n      fi\n    }\n}\n\n\n# func_show_eval_locale CMD [FAIL_EXP]\n# ------------------------------------\n# Unless opt_quiet is true, then output CMD.  Then, if opt_dryrun is\n# not true, evaluate CMD.  If the evaluation of CMD fails, and FAIL_EXP\n# is given, then evaluate it.  Use the saved locale for evaluation.\nfunc_show_eval_locale ()\n{\n    $debug_cmd\n\n    _G_cmd=$1\n    _G_fail_exp=${2-':'}\n\n    $opt_quiet || {\n      func_quote_for_expand \"$_G_cmd\"\n      eval \"func_echo $func_quote_for_expand_result\"\n    }\n\n    $opt_dry_run || {\n      eval \"$_G_user_locale\n\t    $_G_cmd\"\n      _G_status=$?\n      eval \"$_G_safe_locale\"\n      if test 0 -ne \"$_G_status\"; then\n\teval \"(exit $_G_status); $_G_fail_exp\"\n      fi\n    }\n}\n\n\n# func_tr_sh\n# ----------\n# Turn $1 into a string suitable for a shell variable name.\n# Result is stored in $func_tr_sh_result.  All characters\n# not in the set a-zA-Z0-9_ are replaced with '_'. Further,\n# if $1 begins with a digit, a '_' is prepended as well.\nfunc_tr_sh ()\n{\n    $debug_cmd\n\n    case $1 in\n    [0-9]* | *[!a-zA-Z0-9_]*)\n      func_tr_sh_result=`$ECHO \"$1\" | $SED -e 's/^\\([0-9]\\)/_\\1/' -e 's/[^a-zA-Z0-9_]/_/g'`\n      ;;\n    * )\n      func_tr_sh_result=$1\n      ;;\n    esac\n}\n\n\n# func_verbose ARG...\n# -------------------\n# Echo program name prefixed message in verbose mode only.\nfunc_verbose ()\n{\n    $debug_cmd\n\n    $opt_verbose && func_echo \"$*\"\n\n    :\n}\n\n\n# func_warn_and_continue ARG...\n# -----------------------------\n# Echo program name prefixed warning message to standard error.\nfunc_warn_and_continue ()\n{\n    $debug_cmd\n\n    $require_term_colors\n\n    func_echo_infix_1 \"${tc_red}warning$tc_reset\" \"$*\" >&2\n}\n\n\n# func_warning CATEGORY ARG...\n# ----------------------------\n# Echo program name prefixed warning message to standard error. Warning\n# messages can be filtered according to CATEGORY, where this function\n# elides messages where CATEGORY is not listed in the global variable\n# 'opt_warning_types'.\nfunc_warning ()\n{\n    $debug_cmd\n\n    # CATEGORY must be in the warning_categories list!\n    case \" $warning_categories \" in\n      *\" $1 \"*) ;;\n      *) func_internal_error \"invalid warning category '$1'\" ;;\n    esac\n\n    _G_category=$1\n    shift\n\n    case \" $opt_warning_types \" in\n      *\" $_G_category \"*) $warning_func ${1+\"$@\"} ;;\n    esac\n}\n\n\n# func_sort_ver VER1 VER2\n# -----------------------\n# 'sort -V' is not generally available.\n# Note this deviates from the version comparison in automake\n# in that it treats 1.5 < 1.5.0, and treats 1.4.4a < 1.4-p3a\n# but this should suffice as we won't be specifying old\n# version formats or redundant trailing .0 in bootstrap.conf.\n# If we did want full compatibility then we should probably\n# use m4_version_compare from autoconf.\nfunc_sort_ver ()\n{\n    $debug_cmd\n\n    printf '%s\\n%s\\n' \"$1\" \"$2\" \\\n      | sort -t. -k 1,1n -k 2,2n -k 3,3n -k 4,4n -k 5,5n -k 6,6n -k 7,7n -k 8,8n -k 9,9n\n}\n\n# func_lt_ver PREV CURR\n# ---------------------\n# Return true if PREV and CURR are in the correct order according to\n# func_sort_ver, otherwise false.  Use it like this:\n#\n#  func_lt_ver \"$prev_ver\" \"$proposed_ver\" || func_fatal_error \"...\"\nfunc_lt_ver ()\n{\n    $debug_cmd\n\n    test \"x$1\" = x`func_sort_ver \"$1\" \"$2\" | $SED 1q`\n}\n\n\n# Local variables:\n# mode: shell-script\n# sh-indentation: 2\n# eval: (add-hook 'before-save-hook 'time-stamp)\n# time-stamp-pattern: \"10/scriptversion=%:y-%02m-%02d.%02H; # UTC\"\n# time-stamp-time-zone: \"UTC\"\n# End:\n#! /bin/sh\n\n# Set a version string for this script.\nscriptversion=2014-01-07.03; # UTC\n\n# A portable, pluggable option parser for Bourne shell.\n# Written by Gary V. Vaughan, 2010\n\n# Copyright (C) 2010-2015 Free Software Foundation, Inc.\n# This is free software; see the source for copying conditions.  There is NO\n# warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n# Please report bugs or propose patches to gary@gnu.org.\n\n\n## ------ ##\n## Usage. ##\n## ------ ##\n\n# This file is a library for parsing options in your shell scripts along\n# with assorted other useful supporting features that you can make use\n# of too.\n#\n# For the simplest scripts you might need only:\n#\n#   #!/bin/sh\n#   . relative/path/to/funclib.sh\n#   . relative/path/to/options-parser\n#   scriptversion=1.0\n#   func_options ${1+\"$@\"}\n#   eval set dummy \"$func_options_result\"; shift\n#   ...rest of your script...\n#\n# In order for the '--version' option to work, you will need to have a\n# suitably formatted comment like the one at the top of this file\n# starting with '# Written by ' and ending with '# warranty; '.\n#\n# For '-h' and '--help' to work, you will also need a one line\n# description of your script's purpose in a comment directly above the\n# '# Written by ' line, like the one at the top of this file.\n#\n# The default options also support '--debug', which will turn on shell\n# execution tracing (see the comment above debug_cmd below for another\n# use), and '--verbose' and the func_verbose function to allow your script\n# to display verbose messages only when your user has specified\n# '--verbose'.\n#\n# After sourcing this file, you can plug processing for additional\n# options by amending the variables from the 'Configuration' section\n# below, and following the instructions in the 'Option parsing'\n# section further down.\n\n## -------------- ##\n## Configuration. ##\n## -------------- ##\n\n# You should override these variables in your script after sourcing this\n# file so that they reflect the customisations you have added to the\n# option parser.\n\n# The usage line for option parsing errors and the start of '-h' and\n# '--help' output messages. You can embed shell variables for delayed\n# expansion at the time the message is displayed, but you will need to\n# quote other shell meta-characters carefully to prevent them being\n# expanded when the contents are evaled.\nusage='$progpath [OPTION]...'\n\n# Short help message in response to '-h' and '--help'.  Add to this or\n# override it after sourcing this library to reflect the full set of\n# options your script accepts.\nusage_message=\"\\\n       --debug        enable verbose shell tracing\n   -W, --warnings=CATEGORY\n                      report the warnings falling in CATEGORY [all]\n   -v, --verbose      verbosely report processing\n       --version      print version information and exit\n   -h, --help         print short or long help message and exit\n\"\n\n# Additional text appended to 'usage_message' in response to '--help'.\nlong_help_message=\"\nWarning categories include:\n       'all'          show all warnings\n       'none'         turn off all the warnings\n       'error'        warnings are treated as fatal errors\"\n\n# Help message printed before fatal option parsing errors.\nfatal_help=\"Try '\\$progname --help' for more information.\"\n\n\n\n## ------------------------- ##\n## Hook function management. ##\n## ------------------------- ##\n\n# This section contains functions for adding, removing, and running hooks\n# to the main code.  A hook is just a named list of of function, that can\n# be run in order later on.\n\n# func_hookable FUNC_NAME\n# -----------------------\n# Declare that FUNC_NAME will run hooks added with\n# 'func_add_hook FUNC_NAME ...'.\nfunc_hookable ()\n{\n    $debug_cmd\n\n    func_append hookable_fns \" $1\"\n}\n\n\n# func_add_hook FUNC_NAME HOOK_FUNC\n# ---------------------------------\n# Request that FUNC_NAME call HOOK_FUNC before it returns.  FUNC_NAME must\n# first have been declared \"hookable\" by a call to 'func_hookable'.\nfunc_add_hook ()\n{\n    $debug_cmd\n\n    case \" $hookable_fns \" in\n      *\" $1 \"*) ;;\n      *) func_fatal_error \"'$1' does not accept hook functions.\" ;;\n    esac\n\n    eval func_append ${1}_hooks '\" $2\"'\n}\n\n\n# func_remove_hook FUNC_NAME HOOK_FUNC\n# ------------------------------------\n# Remove HOOK_FUNC from the list of functions called by FUNC_NAME.\nfunc_remove_hook ()\n{\n    $debug_cmd\n\n    eval ${1}_hooks='`$ECHO \"\\$'$1'_hooks\" |$SED \"s| '$2'||\"`'\n}\n\n\n# func_run_hooks FUNC_NAME [ARG]...\n# ---------------------------------\n# Run all hook functions registered to FUNC_NAME.\n# It is assumed that the list of hook functions contains nothing more\n# than a whitespace-delimited list of legal shell function names, and\n# no effort is wasted trying to catch shell meta-characters or preserve\n# whitespace.\nfunc_run_hooks ()\n{\n    $debug_cmd\n\n    case \" $hookable_fns \" in\n      *\" $1 \"*) ;;\n      *) func_fatal_error \"'$1' does not support hook funcions.n\" ;;\n    esac\n\n    eval _G_hook_fns=\\$$1_hooks; shift\n\n    for _G_hook in $_G_hook_fns; do\n      eval $_G_hook '\"$@\"'\n\n      # store returned options list back into positional\n      # parameters for next 'cmd' execution.\n      eval _G_hook_result=\\$${_G_hook}_result\n      eval set dummy \"$_G_hook_result\"; shift\n    done\n\n    func_quote_for_eval ${1+\"$@\"}\n    func_run_hooks_result=$func_quote_for_eval_result\n}\n\n\n\n## --------------- ##\n## Option parsing. ##\n## --------------- ##\n\n# In order to add your own option parsing hooks, you must accept the\n# full positional parameter list in your hook function, remove any\n# options that you action, and then pass back the remaining unprocessed\n# options in '<hooked_function_name>_result', escaped suitably for\n# 'eval'.  Like this:\n#\n#    my_options_prep ()\n#    {\n#        $debug_cmd\n#\n#        # Extend the existing usage message.\n#        usage_message=$usage_message'\n#      -s, --silent       don'\\''t print informational messages\n#    '\n#\n#        func_quote_for_eval ${1+\"$@\"}\n#        my_options_prep_result=$func_quote_for_eval_result\n#    }\n#    func_add_hook func_options_prep my_options_prep\n#\n#\n#    my_silent_option ()\n#    {\n#        $debug_cmd\n#\n#        # Note that for efficiency, we parse as many options as we can\n#        # recognise in a loop before passing the remainder back to the\n#        # caller on the first unrecognised argument we encounter.\n#        while test $# -gt 0; do\n#          opt=$1; shift\n#          case $opt in\n#            --silent|-s) opt_silent=: ;;\n#            # Separate non-argument short options:\n#            -s*)         func_split_short_opt \"$_G_opt\"\n#                         set dummy \"$func_split_short_opt_name\" \\\n#                             \"-$func_split_short_opt_arg\" ${1+\"$@\"}\n#                         shift\n#                         ;;\n#            *)            set dummy \"$_G_opt\" \"$*\"; shift; break ;;\n#          esac\n#        done\n#\n#        func_quote_for_eval ${1+\"$@\"}\n#        my_silent_option_result=$func_quote_for_eval_result\n#    }\n#    func_add_hook func_parse_options my_silent_option\n#\n#\n#    my_option_validation ()\n#    {\n#        $debug_cmd\n#\n#        $opt_silent && $opt_verbose && func_fatal_help \"\\\n#    '--silent' and '--verbose' options are mutually exclusive.\"\n#\n#        func_quote_for_eval ${1+\"$@\"}\n#        my_option_validation_result=$func_quote_for_eval_result\n#    }\n#    func_add_hook func_validate_options my_option_validation\n#\n# You'll alse need to manually amend $usage_message to reflect the extra\n# options you parse.  It's preferable to append if you can, so that\n# multiple option parsing hooks can be added safely.\n\n\n# func_options [ARG]...\n# ---------------------\n# All the functions called inside func_options are hookable. See the\n# individual implementations for details.\nfunc_hookable func_options\nfunc_options ()\n{\n    $debug_cmd\n\n    func_options_prep ${1+\"$@\"}\n    eval func_parse_options \\\n        ${func_options_prep_result+\"$func_options_prep_result\"}\n    eval func_validate_options \\\n        ${func_parse_options_result+\"$func_parse_options_result\"}\n\n    eval func_run_hooks func_options \\\n        ${func_validate_options_result+\"$func_validate_options_result\"}\n\n    # save modified positional parameters for caller\n    func_options_result=$func_run_hooks_result\n}\n\n\n# func_options_prep [ARG]...\n# --------------------------\n# All initialisations required before starting the option parse loop.\n# Note that when calling hook functions, we pass through the list of\n# positional parameters.  If a hook function modifies that list, and\n# needs to propogate that back to rest of this script, then the complete\n# modified list must be put in 'func_run_hooks_result' before\n# returning.\nfunc_hookable func_options_prep\nfunc_options_prep ()\n{\n    $debug_cmd\n\n    # Option defaults:\n    opt_verbose=false\n    opt_warning_types=\n\n    func_run_hooks func_options_prep ${1+\"$@\"}\n\n    # save modified positional parameters for caller\n    func_options_prep_result=$func_run_hooks_result\n}\n\n\n# func_parse_options [ARG]...\n# ---------------------------\n# The main option parsing loop.\nfunc_hookable func_parse_options\nfunc_parse_options ()\n{\n    $debug_cmd\n\n    func_parse_options_result=\n\n    # this just eases exit handling\n    while test $# -gt 0; do\n      # Defer to hook functions for initial option parsing, so they\n      # get priority in the event of reusing an option name.\n      func_run_hooks func_parse_options ${1+\"$@\"}\n\n      # Adjust func_parse_options positional parameters to match\n      eval set dummy \"$func_run_hooks_result\"; shift\n\n      # Break out of the loop if we already parsed every option.\n      test $# -gt 0 || break\n\n      _G_opt=$1\n      shift\n      case $_G_opt in\n        --debug|-x)   debug_cmd='set -x'\n                      func_echo \"enabling shell trace mode\"\n                      $debug_cmd\n                      ;;\n\n        --no-warnings|--no-warning|--no-warn)\n                      set dummy --warnings none ${1+\"$@\"}\n                      shift\n\t\t      ;;\n\n        --warnings|--warning|-W)\n                      test $# = 0 && func_missing_arg $_G_opt && break\n                      case \" $warning_categories $1\" in\n                        *\" $1 \"*)\n                          # trailing space prevents matching last $1 above\n                          func_append_uniq opt_warning_types \" $1\"\n                          ;;\n                        *all)\n                          opt_warning_types=$warning_categories\n                          ;;\n                        *none)\n                          opt_warning_types=none\n                          warning_func=:\n                          ;;\n                        *error)\n                          opt_warning_types=$warning_categories\n                          warning_func=func_fatal_error\n                          ;;\n                        *)\n                          func_fatal_error \\\n                             \"unsupported warning category: '$1'\"\n                          ;;\n                      esac\n                      shift\n                      ;;\n\n        --verbose|-v) opt_verbose=: ;;\n        --version)    func_version ;;\n        -\\?|-h)       func_usage ;;\n        --help)       func_help ;;\n\n\t# Separate optargs to long options (plugins may need this):\n\t--*=*)        func_split_equals \"$_G_opt\"\n\t              set dummy \"$func_split_equals_lhs\" \\\n                          \"$func_split_equals_rhs\" ${1+\"$@\"}\n                      shift\n                      ;;\n\n       # Separate optargs to short options:\n        -W*)\n                      func_split_short_opt \"$_G_opt\"\n                      set dummy \"$func_split_short_opt_name\" \\\n                          \"$func_split_short_opt_arg\" ${1+\"$@\"}\n                      shift\n                      ;;\n\n        # Separate non-argument short options:\n        -\\?*|-h*|-v*|-x*)\n                      func_split_short_opt \"$_G_opt\"\n                      set dummy \"$func_split_short_opt_name\" \\\n                          \"-$func_split_short_opt_arg\" ${1+\"$@\"}\n                      shift\n                      ;;\n\n        --)           break ;;\n        -*)           func_fatal_help \"unrecognised option: '$_G_opt'\" ;;\n        *)            set dummy \"$_G_opt\" ${1+\"$@\"}; shift; break ;;\n      esac\n    done\n\n    # save modified positional parameters for caller\n    func_quote_for_eval ${1+\"$@\"}\n    func_parse_options_result=$func_quote_for_eval_result\n}\n\n\n# func_validate_options [ARG]...\n# ------------------------------\n# Perform any sanity checks on option settings and/or unconsumed\n# arguments.\nfunc_hookable func_validate_options\nfunc_validate_options ()\n{\n    $debug_cmd\n\n    # Display all warnings if -W was not given.\n    test -n \"$opt_warning_types\" || opt_warning_types=\" $warning_categories\"\n\n    func_run_hooks func_validate_options ${1+\"$@\"}\n\n    # Bail if the options were screwed!\n    $exit_cmd $EXIT_FAILURE\n\n    # save modified positional parameters for caller\n    func_validate_options_result=$func_run_hooks_result\n}\n\n\n\n## ----------------- ##\n## Helper functions. ##\n## ----------------- ##\n\n# This section contains the helper functions used by the rest of the\n# hookable option parser framework in ascii-betical order.\n\n\n# func_fatal_help ARG...\n# ----------------------\n# Echo program name prefixed message to standard error, followed by\n# a help hint, and exit.\nfunc_fatal_help ()\n{\n    $debug_cmd\n\n    eval \\$ECHO \\\"\"Usage: $usage\"\\\"\n    eval \\$ECHO \\\"\"$fatal_help\"\\\"\n    func_error ${1+\"$@\"}\n    exit $EXIT_FAILURE\n}\n\n\n# func_help\n# ---------\n# Echo long help message to standard output and exit.\nfunc_help ()\n{\n    $debug_cmd\n\n    func_usage_message\n    $ECHO \"$long_help_message\"\n    exit 0\n}\n\n\n# func_missing_arg ARGNAME\n# ------------------------\n# Echo program name prefixed message to standard error and set global\n# exit_cmd.\nfunc_missing_arg ()\n{\n    $debug_cmd\n\n    func_error \"Missing argument for '$1'.\"\n    exit_cmd=exit\n}\n\n\n# func_split_equals STRING\n# ------------------------\n# Set func_split_equals_lhs and func_split_equals_rhs shell variables after\n# splitting STRING at the '=' sign.\ntest -z \"$_G_HAVE_XSI_OPS\" \\\n    && (eval 'x=a/b/c;\n      test 5aa/bb/cc = \"${#x}${x%%/*}${x%/*}${x#*/}${x##*/}\"') 2>/dev/null \\\n    && _G_HAVE_XSI_OPS=yes\n\nif test yes = \"$_G_HAVE_XSI_OPS\"\nthen\n  # This is an XSI compatible shell, allowing a faster implementation...\n  eval 'func_split_equals ()\n  {\n      $debug_cmd\n\n      func_split_equals_lhs=${1%%=*}\n      func_split_equals_rhs=${1#*=}\n      test \"x$func_split_equals_lhs\" = \"x$1\" \\\n        && func_split_equals_rhs=\n  }'\nelse\n  # ...otherwise fall back to using expr, which is often a shell builtin.\n  func_split_equals ()\n  {\n      $debug_cmd\n\n      func_split_equals_lhs=`expr \"x$1\" : 'x\\([^=]*\\)'`\n      func_split_equals_rhs=\n      test \"x$func_split_equals_lhs\" = \"x$1\" \\\n        || func_split_equals_rhs=`expr \"x$1\" : 'x[^=]*=\\(.*\\)$'`\n  }\nfi #func_split_equals\n\n\n# func_split_short_opt SHORTOPT\n# -----------------------------\n# Set func_split_short_opt_name and func_split_short_opt_arg shell\n# variables after splitting SHORTOPT after the 2nd character.\nif test yes = \"$_G_HAVE_XSI_OPS\"\nthen\n  # This is an XSI compatible shell, allowing a faster implementation...\n  eval 'func_split_short_opt ()\n  {\n      $debug_cmd\n\n      func_split_short_opt_arg=${1#??}\n      func_split_short_opt_name=${1%\"$func_split_short_opt_arg\"}\n  }'\nelse\n  # ...otherwise fall back to using expr, which is often a shell builtin.\n  func_split_short_opt ()\n  {\n      $debug_cmd\n\n      func_split_short_opt_name=`expr \"x$1\" : 'x-\\(.\\)'`\n      func_split_short_opt_arg=`expr \"x$1\" : 'x-.\\(.*\\)$'`\n  }\nfi #func_split_short_opt\n\n\n# func_usage\n# ----------\n# Echo short help message to standard output and exit.\nfunc_usage ()\n{\n    $debug_cmd\n\n    func_usage_message\n    $ECHO \"Run '$progname --help |${PAGER-more}' for full usage\"\n    exit 0\n}\n\n\n# func_usage_message\n# ------------------\n# Echo short help message to standard output.\nfunc_usage_message ()\n{\n    $debug_cmd\n\n    eval \\$ECHO \\\"\"Usage: $usage\"\\\"\n    echo\n    $SED -n 's|^# ||\n        /^Written by/{\n          x;p;x\n        }\n\th\n\t/^Written by/q' < \"$progpath\"\n    echo\n    eval \\$ECHO \\\"\"$usage_message\"\\\"\n}\n\n\n# func_version\n# ------------\n# Echo version message to standard output and exit.\nfunc_version ()\n{\n    $debug_cmd\n\n    printf '%s\\n' \"$progname $scriptversion\"\n    $SED -n '\n        /(C)/!b go\n        :more\n        /\\./!{\n          N\n          s|\\n# | |\n          b more\n        }\n        :go\n        /^# Written by /,/# warranty; / {\n          s|^# ||\n          s|^# *$||\n          s|\\((C)\\)[ 0-9,-]*[ ,-]\\([1-9][0-9]* \\)|\\1 \\2|\n          p\n        }\n        /^# Written by / {\n          s|^# ||\n          p\n        }\n        /^warranty; /q' < \"$progpath\"\n\n    exit $?\n}\n\n\n# Local variables:\n# mode: shell-script\n# sh-indentation: 2\n# eval: (add-hook 'before-save-hook 'time-stamp)\n# time-stamp-pattern: \"10/scriptversion=%:y-%02m-%02d.%02H; # UTC\"\n# time-stamp-time-zone: \"UTC\"\n# End:\n\n# Set a version string.\nscriptversion='(GNU libtool) 2.4.6'\n\n\n# func_echo ARG...\n# ----------------\n# Libtool also displays the current mode in messages, so override\n# funclib.sh func_echo with this custom definition.\nfunc_echo ()\n{\n    $debug_cmd\n\n    _G_message=$*\n\n    func_echo_IFS=$IFS\n    IFS=$nl\n    for _G_line in $_G_message; do\n      IFS=$func_echo_IFS\n      $ECHO \"$progname${opt_mode+: $opt_mode}: $_G_line\"\n    done\n    IFS=$func_echo_IFS\n}\n\n\n# func_warning ARG...\n# -------------------\n# Libtool warnings are not categorized, so override funclib.sh\n# func_warning with this simpler definition.\nfunc_warning ()\n{\n    $debug_cmd\n\n    $warning_func ${1+\"$@\"}\n}\n\n\n## ---------------- ##\n## Options parsing. ##\n## ---------------- ##\n\n# Hook in the functions to make sure our own options are parsed during\n# the option parsing loop.\n\nusage='$progpath [OPTION]... [MODE-ARG]...'\n\n# Short help message in response to '-h'.\nusage_message=\"Options:\n       --config             show all configuration variables\n       --debug              enable verbose shell tracing\n   -n, --dry-run            display commands without modifying any files\n       --features           display basic configuration information and exit\n       --mode=MODE          use operation mode MODE\n       --no-warnings        equivalent to '-Wnone'\n       --preserve-dup-deps  don't remove duplicate dependency libraries\n       --quiet, --silent    don't print informational messages\n       --tag=TAG            use configuration variables from tag TAG\n   -v, --verbose            print more informational messages than default\n       --version            print version information\n   -W, --warnings=CATEGORY  report the warnings falling in CATEGORY [all]\n   -h, --help, --help-all   print short, long, or detailed help message\n\"\n\n# Additional text appended to 'usage_message' in response to '--help'.\nfunc_help ()\n{\n    $debug_cmd\n\n    func_usage_message\n    $ECHO \"$long_help_message\n\nMODE must be one of the following:\n\n       clean           remove files from the build directory\n       compile         compile a source file into a libtool object\n       execute         automatically set library path, then run a program\n       finish          complete the installation of libtool libraries\n       install         install libraries or executables\n       link            create a library or an executable\n       uninstall       remove libraries from an installed directory\n\nMODE-ARGS vary depending on the MODE.  When passed as first option,\n'--mode=MODE' may be abbreviated as 'MODE' or a unique abbreviation of that.\nTry '$progname --help --mode=MODE' for a more detailed description of MODE.\n\nWhen reporting a bug, please describe a test case to reproduce it and\ninclude the following information:\n\n       host-triplet:   $host\n       shell:          $SHELL\n       compiler:       $LTCC\n       compiler flags: $LTCFLAGS\n       linker:         $LD (gnu? $with_gnu_ld)\n       version:        $progname (GNU libtool) 2.4.6\n       automake:       `($AUTOMAKE --version) 2>/dev/null |$SED 1q`\n       autoconf:       `($AUTOCONF --version) 2>/dev/null |$SED 1q`\n\nReport bugs to <bug-libtool@gnu.org>.\nGNU libtool home page: <http://www.gnu.org/software/libtool/>.\nGeneral help using GNU software: <http://www.gnu.org/gethelp/>.\"\n    exit 0\n}\n\n\n# func_lo2o OBJECT-NAME\n# ---------------------\n# Transform OBJECT-NAME from a '.lo' suffix to the platform specific\n# object suffix.\n\nlo2o=s/\\\\.lo\\$/.$objext/\no2lo=s/\\\\.$objext\\$/.lo/\n\nif test yes = \"$_G_HAVE_XSI_OPS\"; then\n  eval 'func_lo2o ()\n  {\n    case $1 in\n      *.lo) func_lo2o_result=${1%.lo}.$objext ;;\n      *   ) func_lo2o_result=$1               ;;\n    esac\n  }'\n\n  # func_xform LIBOBJ-OR-SOURCE\n  # ---------------------------\n  # Transform LIBOBJ-OR-SOURCE from a '.o' or '.c' (or otherwise)\n  # suffix to a '.lo' libtool-object suffix.\n  eval 'func_xform ()\n  {\n    func_xform_result=${1%.*}.lo\n  }'\nelse\n  # ...otherwise fall back to using sed.\n  func_lo2o ()\n  {\n    func_lo2o_result=`$ECHO \"$1\" | $SED \"$lo2o\"`\n  }\n\n  func_xform ()\n  {\n    func_xform_result=`$ECHO \"$1\" | $SED 's|\\.[^.]*$|.lo|'`\n  }\nfi\n\n\n# func_fatal_configuration ARG...\n# -------------------------------\n# Echo program name prefixed message to standard error, followed by\n# a configuration failure hint, and exit.\nfunc_fatal_configuration ()\n{\n    func__fatal_error ${1+\"$@\"} \\\n      \"See the $PACKAGE documentation for more information.\" \\\n      \"Fatal configuration error.\"\n}\n\n\n# func_config\n# -----------\n# Display the configuration for all the tags in this script.\nfunc_config ()\n{\n    re_begincf='^# ### BEGIN LIBTOOL'\n    re_endcf='^# ### END LIBTOOL'\n\n    # Default configuration.\n    $SED \"1,/$re_begincf CONFIG/d;/$re_endcf CONFIG/,\\$d\" < \"$progpath\"\n\n    # Now print the configurations for the tags.\n    for tagname in $taglist; do\n      $SED -n \"/$re_begincf TAG CONFIG: $tagname\\$/,/$re_endcf TAG CONFIG: $tagname\\$/p\" < \"$progpath\"\n    done\n\n    exit $?\n}\n\n\n# func_features\n# -------------\n# Display the features supported by this script.\nfunc_features ()\n{\n    echo \"host: $host\"\n    if test yes = \"$build_libtool_libs\"; then\n      echo \"enable shared libraries\"\n    else\n      echo \"disable shared libraries\"\n    fi\n    if test yes = \"$build_old_libs\"; then\n      echo \"enable static libraries\"\n    else\n      echo \"disable static libraries\"\n    fi\n\n    exit $?\n}\n\n\n# func_enable_tag TAGNAME\n# -----------------------\n# Verify that TAGNAME is valid, and either flag an error and exit, or\n# enable the TAGNAME tag.  We also add TAGNAME to the global $taglist\n# variable here.\nfunc_enable_tag ()\n{\n    # Global variable:\n    tagname=$1\n\n    re_begincf=\"^# ### BEGIN LIBTOOL TAG CONFIG: $tagname\\$\"\n    re_endcf=\"^# ### END LIBTOOL TAG CONFIG: $tagname\\$\"\n    sed_extractcf=/$re_begincf/,/$re_endcf/p\n\n    # Validate tagname.\n    case $tagname in\n      *[!-_A-Za-z0-9,/]*)\n        func_fatal_error \"invalid tag name: $tagname\"\n        ;;\n    esac\n\n    # Don't test for the \"default\" C tag, as we know it's\n    # there but not specially marked.\n    case $tagname in\n        CC) ;;\n    *)\n        if $GREP \"$re_begincf\" \"$progpath\" >/dev/null 2>&1; then\n\t  taglist=\"$taglist $tagname\"\n\n\t  # Evaluate the configuration.  Be careful to quote the path\n\t  # and the sed script, to avoid splitting on whitespace, but\n\t  # also don't use non-portable quotes within backquotes within\n\t  # quotes we have to do it in 2 steps:\n\t  extractedcf=`$SED -n -e \"$sed_extractcf\" < \"$progpath\"`\n\t  eval \"$extractedcf\"\n        else\n\t  func_error \"ignoring unknown tag $tagname\"\n        fi\n        ;;\n    esac\n}\n\n\n# func_check_version_match\n# ------------------------\n# Ensure that we are using m4 macros, and libtool script from the same\n# release of libtool.\nfunc_check_version_match ()\n{\n    if test \"$package_revision\" != \"$macro_revision\"; then\n      if test \"$VERSION\" != \"$macro_version\"; then\n        if test -z \"$macro_version\"; then\n          cat >&2 <<_LT_EOF\n$progname: Version mismatch error.  This is $PACKAGE $VERSION, but the\n$progname: definition of this LT_INIT comes from an older release.\n$progname: You should recreate aclocal.m4 with macros from $PACKAGE $VERSION\n$progname: and run autoconf again.\n_LT_EOF\n        else\n          cat >&2 <<_LT_EOF\n$progname: Version mismatch error.  This is $PACKAGE $VERSION, but the\n$progname: definition of this LT_INIT comes from $PACKAGE $macro_version.\n$progname: You should recreate aclocal.m4 with macros from $PACKAGE $VERSION\n$progname: and run autoconf again.\n_LT_EOF\n        fi\n      else\n        cat >&2 <<_LT_EOF\n$progname: Version mismatch error.  This is $PACKAGE $VERSION, revision $package_revision,\n$progname: but the definition of this LT_INIT comes from revision $macro_revision.\n$progname: You should recreate aclocal.m4 with macros from revision $package_revision\n$progname: of $PACKAGE $VERSION and run autoconf again.\n_LT_EOF\n      fi\n\n      exit $EXIT_MISMATCH\n    fi\n}\n\n\n# libtool_options_prep [ARG]...\n# -----------------------------\n# Preparation for options parsed by libtool.\nlibtool_options_prep ()\n{\n    $debug_mode\n\n    # Option defaults:\n    opt_config=false\n    opt_dlopen=\n    opt_dry_run=false\n    opt_help=false\n    opt_mode=\n    opt_preserve_dup_deps=false\n    opt_quiet=false\n\n    nonopt=\n    preserve_args=\n\n    # Shorthand for --mode=foo, only valid as the first argument\n    case $1 in\n    clean|clea|cle|cl)\n      shift; set dummy --mode clean ${1+\"$@\"}; shift\n      ;;\n    compile|compil|compi|comp|com|co|c)\n      shift; set dummy --mode compile ${1+\"$@\"}; shift\n      ;;\n    execute|execut|execu|exec|exe|ex|e)\n      shift; set dummy --mode execute ${1+\"$@\"}; shift\n      ;;\n    finish|finis|fini|fin|fi|f)\n      shift; set dummy --mode finish ${1+\"$@\"}; shift\n      ;;\n    install|instal|insta|inst|ins|in|i)\n      shift; set dummy --mode install ${1+\"$@\"}; shift\n      ;;\n    link|lin|li|l)\n      shift; set dummy --mode link ${1+\"$@\"}; shift\n      ;;\n    uninstall|uninstal|uninsta|uninst|unins|unin|uni|un|u)\n      shift; set dummy --mode uninstall ${1+\"$@\"}; shift\n      ;;\n    esac\n\n    # Pass back the list of options.\n    func_quote_for_eval ${1+\"$@\"}\n    libtool_options_prep_result=$func_quote_for_eval_result\n}\nfunc_add_hook func_options_prep libtool_options_prep\n\n\n# libtool_parse_options [ARG]...\n# ---------------------------------\n# Provide handling for libtool specific options.\nlibtool_parse_options ()\n{\n    $debug_cmd\n\n    # Perform our own loop to consume as many options as possible in\n    # each iteration.\n    while test $# -gt 0; do\n      _G_opt=$1\n      shift\n      case $_G_opt in\n        --dry-run|--dryrun|-n)\n                        opt_dry_run=:\n                        ;;\n\n        --config)       func_config ;;\n\n        --dlopen|-dlopen)\n                        opt_dlopen=\"${opt_dlopen+$opt_dlopen\n}$1\"\n                        shift\n                        ;;\n\n        --preserve-dup-deps)\n                        opt_preserve_dup_deps=: ;;\n\n        --features)     func_features ;;\n\n        --finish)       set dummy --mode finish ${1+\"$@\"}; shift ;;\n\n        --help)         opt_help=: ;;\n\n        --help-all)     opt_help=': help-all' ;;\n\n        --mode)         test $# = 0 && func_missing_arg $_G_opt && break\n                        opt_mode=$1\n                        case $1 in\n                          # Valid mode arguments:\n                          clean|compile|execute|finish|install|link|relink|uninstall) ;;\n\n                          # Catch anything else as an error\n                          *) func_error \"invalid argument for $_G_opt\"\n                             exit_cmd=exit\n                             break\n                             ;;\n                        esac\n                        shift\n                        ;;\n\n        --no-silent|--no-quiet)\n                        opt_quiet=false\n                        func_append preserve_args \" $_G_opt\"\n                        ;;\n\n        --no-warnings|--no-warning|--no-warn)\n                        opt_warning=false\n                        func_append preserve_args \" $_G_opt\"\n                        ;;\n\n        --no-verbose)\n                        opt_verbose=false\n                        func_append preserve_args \" $_G_opt\"\n                        ;;\n\n        --silent|--quiet)\n                        opt_quiet=:\n                        opt_verbose=false\n                        func_append preserve_args \" $_G_opt\"\n                        ;;\n\n        --tag)          test $# = 0 && func_missing_arg $_G_opt && break\n                        opt_tag=$1\n                        func_append preserve_args \" $_G_opt $1\"\n                        func_enable_tag \"$1\"\n                        shift\n                        ;;\n\n        --verbose|-v)   opt_quiet=false\n                        opt_verbose=:\n                        func_append preserve_args \" $_G_opt\"\n                        ;;\n\n\t# An option not handled by this hook function:\n        *)\t\tset dummy \"$_G_opt\" ${1+\"$@\"};\tshift; break  ;;\n      esac\n    done\n\n\n    # save modified positional parameters for caller\n    func_quote_for_eval ${1+\"$@\"}\n    libtool_parse_options_result=$func_quote_for_eval_result\n}\nfunc_add_hook func_parse_options libtool_parse_options\n\n\n\n# libtool_validate_options [ARG]...\n# ---------------------------------\n# Perform any sanity checks on option settings and/or unconsumed\n# arguments.\nlibtool_validate_options ()\n{\n    # save first non-option argument\n    if test 0 -lt $#; then\n      nonopt=$1\n      shift\n    fi\n\n    # preserve --debug\n    test : = \"$debug_cmd\" || func_append preserve_args \" --debug\"\n\n    case $host in\n      # Solaris2 added to fix http://debbugs.gnu.org/cgi/bugreport.cgi?bug=16452\n      # see also: http://gcc.gnu.org/bugzilla/show_bug.cgi?id=59788\n      *cygwin* | *mingw* | *pw32* | *cegcc* | *solaris2* | *os2*)\n        # don't eliminate duplications in $postdeps and $predeps\n        opt_duplicate_compiler_generated_deps=:\n        ;;\n      *)\n        opt_duplicate_compiler_generated_deps=$opt_preserve_dup_deps\n        ;;\n    esac\n\n    $opt_help || {\n      # Sanity checks first:\n      func_check_version_match\n\n      test yes != \"$build_libtool_libs\" \\\n        && test yes != \"$build_old_libs\" \\\n        && func_fatal_configuration \"not configured to build any kind of library\"\n\n      # Darwin sucks\n      eval std_shrext=\\\"$shrext_cmds\\\"\n\n      # Only execute mode is allowed to have -dlopen flags.\n      if test -n \"$opt_dlopen\" && test execute != \"$opt_mode\"; then\n        func_error \"unrecognized option '-dlopen'\"\n        $ECHO \"$help\" 1>&2\n        exit $EXIT_FAILURE\n      fi\n\n      # Change the help message to a mode-specific one.\n      generic_help=$help\n      help=\"Try '$progname --help --mode=$opt_mode' for more information.\"\n    }\n\n    # Pass back the unparsed argument list\n    func_quote_for_eval ${1+\"$@\"}\n    libtool_validate_options_result=$func_quote_for_eval_result\n}\nfunc_add_hook func_validate_options libtool_validate_options\n\n\n# Process options as early as possible so that --help and --version\n# can return quickly.\nfunc_options ${1+\"$@\"}\neval set dummy \"$func_options_result\"; shift\n\n\n\n## ----------- ##\n##    Main.    ##\n## ----------- ##\n\nmagic='%%%MAGIC variable%%%'\nmagic_exe='%%%MAGIC EXE variable%%%'\n\n# Global variables.\nextracted_archives=\nextracted_serial=0\n\n# If this variable is set in any of the actions, the command in it\n# will be execed at the end.  This prevents here-documents from being\n# left over by shells.\nexec_cmd=\n\n\n# A function that is used when there is no print builtin or printf.\nfunc_fallback_echo ()\n{\n  eval 'cat <<_LTECHO_EOF\n$1\n_LTECHO_EOF'\n}\n\n# func_generated_by_libtool\n# True iff stdin has been generated by Libtool. This function is only\n# a basic sanity check; it will hardly flush out determined imposters.\nfunc_generated_by_libtool_p ()\n{\n  $GREP \"^# Generated by .*$PACKAGE\" > /dev/null 2>&1\n}\n\n# func_lalib_p file\n# True iff FILE is a libtool '.la' library or '.lo' object file.\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_lalib_p ()\n{\n    test -f \"$1\" &&\n      $SED -e 4q \"$1\" 2>/dev/null | func_generated_by_libtool_p\n}\n\n# func_lalib_unsafe_p file\n# True iff FILE is a libtool '.la' library or '.lo' object file.\n# This function implements the same check as func_lalib_p without\n# resorting to external programs.  To this end, it redirects stdin and\n# closes it afterwards, without saving the original file descriptor.\n# As a safety measure, use it only where a negative result would be\n# fatal anyway.  Works if 'file' does not exist.\nfunc_lalib_unsafe_p ()\n{\n    lalib_p=no\n    if test -f \"$1\" && test -r \"$1\" && exec 5<&0 <\"$1\"; then\n\tfor lalib_p_l in 1 2 3 4\n\tdo\n\t    read lalib_p_line\n\t    case $lalib_p_line in\n\t\t\\#\\ Generated\\ by\\ *$PACKAGE* ) lalib_p=yes; break;;\n\t    esac\n\tdone\n\texec 0<&5 5<&-\n    fi\n    test yes = \"$lalib_p\"\n}\n\n# func_ltwrapper_script_p file\n# True iff FILE is a libtool wrapper script\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_ltwrapper_script_p ()\n{\n    test -f \"$1\" &&\n      $lt_truncate_bin < \"$1\" 2>/dev/null | func_generated_by_libtool_p\n}\n\n# func_ltwrapper_executable_p file\n# True iff FILE is a libtool wrapper executable\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_ltwrapper_executable_p ()\n{\n    func_ltwrapper_exec_suffix=\n    case $1 in\n    *.exe) ;;\n    *) func_ltwrapper_exec_suffix=.exe ;;\n    esac\n    $GREP \"$magic_exe\" \"$1$func_ltwrapper_exec_suffix\" >/dev/null 2>&1\n}\n\n# func_ltwrapper_scriptname file\n# Assumes file is an ltwrapper_executable\n# uses $file to determine the appropriate filename for a\n# temporary ltwrapper_script.\nfunc_ltwrapper_scriptname ()\n{\n    func_dirname_and_basename \"$1\" \"\" \".\"\n    func_stripname '' '.exe' \"$func_basename_result\"\n    func_ltwrapper_scriptname_result=$func_dirname_result/$objdir/${func_stripname_result}_ltshwrapper\n}\n\n# func_ltwrapper_p file\n# True iff FILE is a libtool wrapper script or wrapper executable\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_ltwrapper_p ()\n{\n    func_ltwrapper_script_p \"$1\" || func_ltwrapper_executable_p \"$1\"\n}\n\n\n# func_execute_cmds commands fail_cmd\n# Execute tilde-delimited COMMANDS.\n# If FAIL_CMD is given, eval that upon failure.\n# FAIL_CMD may read-access the current command in variable CMD!\nfunc_execute_cmds ()\n{\n    $debug_cmd\n\n    save_ifs=$IFS; IFS='~'\n    for cmd in $1; do\n      IFS=$sp$nl\n      eval cmd=\\\"$cmd\\\"\n      IFS=$save_ifs\n      func_show_eval \"$cmd\" \"${2-:}\"\n    done\n    IFS=$save_ifs\n}\n\n\n# func_source file\n# Source FILE, adding directory component if necessary.\n# Note that it is not necessary on cygwin/mingw to append a dot to\n# FILE even if both FILE and FILE.exe exist: automatic-append-.exe\n# behavior happens only for exec(3), not for open(2)!  Also, sourcing\n# 'FILE.' does not work on cygwin managed mounts.\nfunc_source ()\n{\n    $debug_cmd\n\n    case $1 in\n    */* | *\\\\*)\t. \"$1\" ;;\n    *)\t\t. \"./$1\" ;;\n    esac\n}\n\n\n# func_resolve_sysroot PATH\n# Replace a leading = in PATH with a sysroot.  Store the result into\n# func_resolve_sysroot_result\nfunc_resolve_sysroot ()\n{\n  func_resolve_sysroot_result=$1\n  case $func_resolve_sysroot_result in\n  =*)\n    func_stripname '=' '' \"$func_resolve_sysroot_result\"\n    func_resolve_sysroot_result=$lt_sysroot$func_stripname_result\n    ;;\n  esac\n}\n\n# func_replace_sysroot PATH\n# If PATH begins with the sysroot, replace it with = and\n# store the result into func_replace_sysroot_result.\nfunc_replace_sysroot ()\n{\n  case $lt_sysroot:$1 in\n  ?*:\"$lt_sysroot\"*)\n    func_stripname \"$lt_sysroot\" '' \"$1\"\n    func_replace_sysroot_result='='$func_stripname_result\n    ;;\n  *)\n    # Including no sysroot.\n    func_replace_sysroot_result=$1\n    ;;\n  esac\n}\n\n# func_infer_tag arg\n# Infer tagged configuration to use if any are available and\n# if one wasn't chosen via the \"--tag\" command line option.\n# Only attempt this if the compiler in the base compile\n# command doesn't match the default compiler.\n# arg is usually of the form 'gcc ...'\nfunc_infer_tag ()\n{\n    $debug_cmd\n\n    if test -n \"$available_tags\" && test -z \"$tagname\"; then\n      CC_quoted=\n      for arg in $CC; do\n\tfunc_append_quoted CC_quoted \"$arg\"\n      done\n      CC_expanded=`func_echo_all $CC`\n      CC_quoted_expanded=`func_echo_all $CC_quoted`\n      case $@ in\n      # Blanks in the command may have been stripped by the calling shell,\n      # but not from the CC environment variable when configure was run.\n      \" $CC \"* | \"$CC \"* | \" $CC_expanded \"* | \"$CC_expanded \"* | \\\n      \" $CC_quoted\"* | \"$CC_quoted \"* | \" $CC_quoted_expanded \"* | \"$CC_quoted_expanded \"*) ;;\n      # Blanks at the start of $base_compile will cause this to fail\n      # if we don't check for them as well.\n      *)\n\tfor z in $available_tags; do\n\t  if $GREP \"^# ### BEGIN LIBTOOL TAG CONFIG: $z$\" < \"$progpath\" > /dev/null; then\n\t    # Evaluate the configuration.\n\t    eval \"`$SED -n -e '/^# ### BEGIN LIBTOOL TAG CONFIG: '$z'$/,/^# ### END LIBTOOL TAG CONFIG: '$z'$/p' < $progpath`\"\n\t    CC_quoted=\n\t    for arg in $CC; do\n\t      # Double-quote args containing other shell metacharacters.\n\t      func_append_quoted CC_quoted \"$arg\"\n\t    done\n\t    CC_expanded=`func_echo_all $CC`\n\t    CC_quoted_expanded=`func_echo_all $CC_quoted`\n\t    case \"$@ \" in\n\t    \" $CC \"* | \"$CC \"* | \" $CC_expanded \"* | \"$CC_expanded \"* | \\\n\t    \" $CC_quoted\"* | \"$CC_quoted \"* | \" $CC_quoted_expanded \"* | \"$CC_quoted_expanded \"*)\n\t      # The compiler in the base compile command matches\n\t      # the one in the tagged configuration.\n\t      # Assume this is the tagged configuration we want.\n\t      tagname=$z\n\t      break\n\t      ;;\n\t    esac\n\t  fi\n\tdone\n\t# If $tagname still isn't set, then no tagged configuration\n\t# was found and let the user know that the \"--tag\" command\n\t# line option must be used.\n\tif test -z \"$tagname\"; then\n\t  func_echo \"unable to infer tagged configuration\"\n\t  func_fatal_error \"specify a tag with '--tag'\"\n#\telse\n#\t  func_verbose \"using $tagname tagged configuration\"\n\tfi\n\t;;\n      esac\n    fi\n}\n\n\n\n# func_write_libtool_object output_name pic_name nonpic_name\n# Create a libtool object file (analogous to a \".la\" file),\n# but don't create it if we're doing a dry run.\nfunc_write_libtool_object ()\n{\n    write_libobj=$1\n    if test yes = \"$build_libtool_libs\"; then\n      write_lobj=\\'$2\\'\n    else\n      write_lobj=none\n    fi\n\n    if test yes = \"$build_old_libs\"; then\n      write_oldobj=\\'$3\\'\n    else\n      write_oldobj=none\n    fi\n\n    $opt_dry_run || {\n      cat >${write_libobj}T <<EOF\n# $write_libobj - a libtool object file\n# Generated by $PROGRAM (GNU $PACKAGE) $VERSION\n#\n# Please DO NOT delete this file!\n# It is necessary for linking the library.\n\n# Name of the PIC object.\npic_object=$write_lobj\n\n# Name of the non-PIC object\nnon_pic_object=$write_oldobj\n\nEOF\n      $MV \"${write_libobj}T\" \"$write_libobj\"\n    }\n}\n\n\n##################################################\n# FILE NAME AND PATH CONVERSION HELPER FUNCTIONS #\n##################################################\n\n# func_convert_core_file_wine_to_w32 ARG\n# Helper function used by file name conversion functions when $build is *nix,\n# and $host is mingw, cygwin, or some other w32 environment. Relies on a\n# correctly configured wine environment available, with the winepath program\n# in $build's $PATH.\n#\n# ARG is the $build file name to be converted to w32 format.\n# Result is available in $func_convert_core_file_wine_to_w32_result, and will\n# be empty on error (or when ARG is empty)\nfunc_convert_core_file_wine_to_w32 ()\n{\n  $debug_cmd\n\n  func_convert_core_file_wine_to_w32_result=$1\n  if test -n \"$1\"; then\n    # Unfortunately, winepath does not exit with a non-zero error code, so we\n    # are forced to check the contents of stdout. On the other hand, if the\n    # command is not found, the shell will set an exit code of 127 and print\n    # *an error message* to stdout. So we must check for both error code of\n    # zero AND non-empty stdout, which explains the odd construction:\n    func_convert_core_file_wine_to_w32_tmp=`winepath -w \"$1\" 2>/dev/null`\n    if test \"$?\" -eq 0 && test -n \"$func_convert_core_file_wine_to_w32_tmp\"; then\n      func_convert_core_file_wine_to_w32_result=`$ECHO \"$func_convert_core_file_wine_to_w32_tmp\" |\n        $SED -e \"$sed_naive_backslashify\"`\n    else\n      func_convert_core_file_wine_to_w32_result=\n    fi\n  fi\n}\n# end: func_convert_core_file_wine_to_w32\n\n\n# func_convert_core_path_wine_to_w32 ARG\n# Helper function used by path conversion functions when $build is *nix, and\n# $host is mingw, cygwin, or some other w32 environment. Relies on a correctly\n# configured wine environment available, with the winepath program in $build's\n# $PATH. Assumes ARG has no leading or trailing path separator characters.\n#\n# ARG is path to be converted from $build format to win32.\n# Result is available in $func_convert_core_path_wine_to_w32_result.\n# Unconvertible file (directory) names in ARG are skipped; if no directory names\n# are convertible, then the result may be empty.\nfunc_convert_core_path_wine_to_w32 ()\n{\n  $debug_cmd\n\n  # unfortunately, winepath doesn't convert paths, only file names\n  func_convert_core_path_wine_to_w32_result=\n  if test -n \"$1\"; then\n    oldIFS=$IFS\n    IFS=:\n    for func_convert_core_path_wine_to_w32_f in $1; do\n      IFS=$oldIFS\n      func_convert_core_file_wine_to_w32 \"$func_convert_core_path_wine_to_w32_f\"\n      if test -n \"$func_convert_core_file_wine_to_w32_result\"; then\n        if test -z \"$func_convert_core_path_wine_to_w32_result\"; then\n          func_convert_core_path_wine_to_w32_result=$func_convert_core_file_wine_to_w32_result\n        else\n          func_append func_convert_core_path_wine_to_w32_result \";$func_convert_core_file_wine_to_w32_result\"\n        fi\n      fi\n    done\n    IFS=$oldIFS\n  fi\n}\n# end: func_convert_core_path_wine_to_w32\n\n\n# func_cygpath ARGS...\n# Wrapper around calling the cygpath program via LT_CYGPATH. This is used when\n# when (1) $build is *nix and Cygwin is hosted via a wine environment; or (2)\n# $build is MSYS and $host is Cygwin, or (3) $build is Cygwin. In case (1) or\n# (2), returns the Cygwin file name or path in func_cygpath_result (input\n# file name or path is assumed to be in w32 format, as previously converted\n# from $build's *nix or MSYS format). In case (3), returns the w32 file name\n# or path in func_cygpath_result (input file name or path is assumed to be in\n# Cygwin format). Returns an empty string on error.\n#\n# ARGS are passed to cygpath, with the last one being the file name or path to\n# be converted.\n#\n# Specify the absolute *nix (or w32) name to cygpath in the LT_CYGPATH\n# environment variable; do not put it in $PATH.\nfunc_cygpath ()\n{\n  $debug_cmd\n\n  if test -n \"$LT_CYGPATH\" && test -f \"$LT_CYGPATH\"; then\n    func_cygpath_result=`$LT_CYGPATH \"$@\" 2>/dev/null`\n    if test \"$?\" -ne 0; then\n      # on failure, ensure result is empty\n      func_cygpath_result=\n    fi\n  else\n    func_cygpath_result=\n    func_error \"LT_CYGPATH is empty or specifies non-existent file: '$LT_CYGPATH'\"\n  fi\n}\n#end: func_cygpath\n\n\n# func_convert_core_msys_to_w32 ARG\n# Convert file name or path ARG from MSYS format to w32 format.  Return\n# result in func_convert_core_msys_to_w32_result.\nfunc_convert_core_msys_to_w32 ()\n{\n  $debug_cmd\n\n  # awkward: cmd appends spaces to result\n  func_convert_core_msys_to_w32_result=`( cmd //c echo \"$1\" ) 2>/dev/null |\n    $SED -e 's/[ ]*$//' -e \"$sed_naive_backslashify\"`\n}\n#end: func_convert_core_msys_to_w32\n\n\n# func_convert_file_check ARG1 ARG2\n# Verify that ARG1 (a file name in $build format) was converted to $host\n# format in ARG2. Otherwise, emit an error message, but continue (resetting\n# func_to_host_file_result to ARG1).\nfunc_convert_file_check ()\n{\n  $debug_cmd\n\n  if test -z \"$2\" && test -n \"$1\"; then\n    func_error \"Could not determine host file name corresponding to\"\n    func_error \"  '$1'\"\n    func_error \"Continuing, but uninstalled executables may not work.\"\n    # Fallback:\n    func_to_host_file_result=$1\n  fi\n}\n# end func_convert_file_check\n\n\n# func_convert_path_check FROM_PATHSEP TO_PATHSEP FROM_PATH TO_PATH\n# Verify that FROM_PATH (a path in $build format) was converted to $host\n# format in TO_PATH. Otherwise, emit an error message, but continue, resetting\n# func_to_host_file_result to a simplistic fallback value (see below).\nfunc_convert_path_check ()\n{\n  $debug_cmd\n\n  if test -z \"$4\" && test -n \"$3\"; then\n    func_error \"Could not determine the host path corresponding to\"\n    func_error \"  '$3'\"\n    func_error \"Continuing, but uninstalled executables may not work.\"\n    # Fallback.  This is a deliberately simplistic \"conversion\" and\n    # should not be \"improved\".  See libtool.info.\n    if test \"x$1\" != \"x$2\"; then\n      lt_replace_pathsep_chars=\"s|$1|$2|g\"\n      func_to_host_path_result=`echo \"$3\" |\n        $SED -e \"$lt_replace_pathsep_chars\"`\n    else\n      func_to_host_path_result=$3\n    fi\n  fi\n}\n# end func_convert_path_check\n\n\n# func_convert_path_front_back_pathsep FRONTPAT BACKPAT REPL ORIG\n# Modifies func_to_host_path_result by prepending REPL if ORIG matches FRONTPAT\n# and appending REPL if ORIG matches BACKPAT.\nfunc_convert_path_front_back_pathsep ()\n{\n  $debug_cmd\n\n  case $4 in\n  $1 ) func_to_host_path_result=$3$func_to_host_path_result\n    ;;\n  esac\n  case $4 in\n  $2 ) func_append func_to_host_path_result \"$3\"\n    ;;\n  esac\n}\n# end func_convert_path_front_back_pathsep\n\n\n##################################################\n# $build to $host FILE NAME CONVERSION FUNCTIONS #\n##################################################\n# invoked via '$to_host_file_cmd ARG'\n#\n# In each case, ARG is the path to be converted from $build to $host format.\n# Result will be available in $func_to_host_file_result.\n\n\n# func_to_host_file ARG\n# Converts the file name ARG from $build format to $host format. Return result\n# in func_to_host_file_result.\nfunc_to_host_file ()\n{\n  $debug_cmd\n\n  $to_host_file_cmd \"$1\"\n}\n# end func_to_host_file\n\n\n# func_to_tool_file ARG LAZY\n# converts the file name ARG from $build format to toolchain format. Return\n# result in func_to_tool_file_result.  If the conversion in use is listed\n# in (the comma separated) LAZY, no conversion takes place.\nfunc_to_tool_file ()\n{\n  $debug_cmd\n\n  case ,$2, in\n    *,\"$to_tool_file_cmd\",*)\n      func_to_tool_file_result=$1\n      ;;\n    *)\n      $to_tool_file_cmd \"$1\"\n      func_to_tool_file_result=$func_to_host_file_result\n      ;;\n  esac\n}\n# end func_to_tool_file\n\n\n# func_convert_file_noop ARG\n# Copy ARG to func_to_host_file_result.\nfunc_convert_file_noop ()\n{\n  func_to_host_file_result=$1\n}\n# end func_convert_file_noop\n\n\n# func_convert_file_msys_to_w32 ARG\n# Convert file name ARG from (mingw) MSYS to (mingw) w32 format; automatic\n# conversion to w32 is not available inside the cwrapper.  Returns result in\n# func_to_host_file_result.\nfunc_convert_file_msys_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_file_result=$1\n  if test -n \"$1\"; then\n    func_convert_core_msys_to_w32 \"$1\"\n    func_to_host_file_result=$func_convert_core_msys_to_w32_result\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_msys_to_w32\n\n\n# func_convert_file_cygwin_to_w32 ARG\n# Convert file name ARG from Cygwin to w32 format.  Returns result in\n# func_to_host_file_result.\nfunc_convert_file_cygwin_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_file_result=$1\n  if test -n \"$1\"; then\n    # because $build is cygwin, we call \"the\" cygpath in $PATH; no need to use\n    # LT_CYGPATH in this case.\n    func_to_host_file_result=`cygpath -m \"$1\"`\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_cygwin_to_w32\n\n\n# func_convert_file_nix_to_w32 ARG\n# Convert file name ARG from *nix to w32 format.  Requires a wine environment\n# and a working winepath. Returns result in func_to_host_file_result.\nfunc_convert_file_nix_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_file_result=$1\n  if test -n \"$1\"; then\n    func_convert_core_file_wine_to_w32 \"$1\"\n    func_to_host_file_result=$func_convert_core_file_wine_to_w32_result\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_nix_to_w32\n\n\n# func_convert_file_msys_to_cygwin ARG\n# Convert file name ARG from MSYS to Cygwin format.  Requires LT_CYGPATH set.\n# Returns result in func_to_host_file_result.\nfunc_convert_file_msys_to_cygwin ()\n{\n  $debug_cmd\n\n  func_to_host_file_result=$1\n  if test -n \"$1\"; then\n    func_convert_core_msys_to_w32 \"$1\"\n    func_cygpath -u \"$func_convert_core_msys_to_w32_result\"\n    func_to_host_file_result=$func_cygpath_result\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_msys_to_cygwin\n\n\n# func_convert_file_nix_to_cygwin ARG\n# Convert file name ARG from *nix to Cygwin format.  Requires Cygwin installed\n# in a wine environment, working winepath, and LT_CYGPATH set.  Returns result\n# in func_to_host_file_result.\nfunc_convert_file_nix_to_cygwin ()\n{\n  $debug_cmd\n\n  func_to_host_file_result=$1\n  if test -n \"$1\"; then\n    # convert from *nix to w32, then use cygpath to convert from w32 to cygwin.\n    func_convert_core_file_wine_to_w32 \"$1\"\n    func_cygpath -u \"$func_convert_core_file_wine_to_w32_result\"\n    func_to_host_file_result=$func_cygpath_result\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_nix_to_cygwin\n\n\n#############################################\n# $build to $host PATH CONVERSION FUNCTIONS #\n#############################################\n# invoked via '$to_host_path_cmd ARG'\n#\n# In each case, ARG is the path to be converted from $build to $host format.\n# The result will be available in $func_to_host_path_result.\n#\n# Path separators are also converted from $build format to $host format.  If\n# ARG begins or ends with a path separator character, it is preserved (but\n# converted to $host format) on output.\n#\n# All path conversion functions are named using the following convention:\n#   file name conversion function    : func_convert_file_X_to_Y ()\n#   path conversion function         : func_convert_path_X_to_Y ()\n# where, for any given $build/$host combination the 'X_to_Y' value is the\n# same.  If conversion functions are added for new $build/$host combinations,\n# the two new functions must follow this pattern, or func_init_to_host_path_cmd\n# will break.\n\n\n# func_init_to_host_path_cmd\n# Ensures that function \"pointer\" variable $to_host_path_cmd is set to the\n# appropriate value, based on the value of $to_host_file_cmd.\nto_host_path_cmd=\nfunc_init_to_host_path_cmd ()\n{\n  $debug_cmd\n\n  if test -z \"$to_host_path_cmd\"; then\n    func_stripname 'func_convert_file_' '' \"$to_host_file_cmd\"\n    to_host_path_cmd=func_convert_path_$func_stripname_result\n  fi\n}\n\n\n# func_to_host_path ARG\n# Converts the path ARG from $build format to $host format. Return result\n# in func_to_host_path_result.\nfunc_to_host_path ()\n{\n  $debug_cmd\n\n  func_init_to_host_path_cmd\n  $to_host_path_cmd \"$1\"\n}\n# end func_to_host_path\n\n\n# func_convert_path_noop ARG\n# Copy ARG to func_to_host_path_result.\nfunc_convert_path_noop ()\n{\n  func_to_host_path_result=$1\n}\n# end func_convert_path_noop\n\n\n# func_convert_path_msys_to_w32 ARG\n# Convert path ARG from (mingw) MSYS to (mingw) w32 format; automatic\n# conversion to w32 is not available inside the cwrapper.  Returns result in\n# func_to_host_path_result.\nfunc_convert_path_msys_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_path_result=$1\n  if test -n \"$1\"; then\n    # Remove leading and trailing path separator characters from ARG.  MSYS\n    # behavior is inconsistent here; cygpath turns them into '.;' and ';.';\n    # and winepath ignores them completely.\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_msys_to_w32 \"$func_to_host_path_tmp1\"\n    func_to_host_path_result=$func_convert_core_msys_to_w32_result\n    func_convert_path_check : \";\" \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" \";\" \"$1\"\n  fi\n}\n# end func_convert_path_msys_to_w32\n\n\n# func_convert_path_cygwin_to_w32 ARG\n# Convert path ARG from Cygwin to w32 format.  Returns result in\n# func_to_host_file_result.\nfunc_convert_path_cygwin_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_path_result=$1\n  if test -n \"$1\"; then\n    # See func_convert_path_msys_to_w32:\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_to_host_path_result=`cygpath -m -p \"$func_to_host_path_tmp1\"`\n    func_convert_path_check : \";\" \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" \";\" \"$1\"\n  fi\n}\n# end func_convert_path_cygwin_to_w32\n\n\n# func_convert_path_nix_to_w32 ARG\n# Convert path ARG from *nix to w32 format.  Requires a wine environment and\n# a working winepath.  Returns result in func_to_host_file_result.\nfunc_convert_path_nix_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_path_result=$1\n  if test -n \"$1\"; then\n    # See func_convert_path_msys_to_w32:\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_path_wine_to_w32 \"$func_to_host_path_tmp1\"\n    func_to_host_path_result=$func_convert_core_path_wine_to_w32_result\n    func_convert_path_check : \";\" \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" \";\" \"$1\"\n  fi\n}\n# end func_convert_path_nix_to_w32\n\n\n# func_convert_path_msys_to_cygwin ARG\n# Convert path ARG from MSYS to Cygwin format.  Requires LT_CYGPATH set.\n# Returns result in func_to_host_file_result.\nfunc_convert_path_msys_to_cygwin ()\n{\n  $debug_cmd\n\n  func_to_host_path_result=$1\n  if test -n \"$1\"; then\n    # See func_convert_path_msys_to_w32:\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_msys_to_w32 \"$func_to_host_path_tmp1\"\n    func_cygpath -u -p \"$func_convert_core_msys_to_w32_result\"\n    func_to_host_path_result=$func_cygpath_result\n    func_convert_path_check : : \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" : \"$1\"\n  fi\n}\n# end func_convert_path_msys_to_cygwin\n\n\n# func_convert_path_nix_to_cygwin ARG\n# Convert path ARG from *nix to Cygwin format.  Requires Cygwin installed in a\n# a wine environment, working winepath, and LT_CYGPATH set.  Returns result in\n# func_to_host_file_result.\nfunc_convert_path_nix_to_cygwin ()\n{\n  $debug_cmd\n\n  func_to_host_path_result=$1\n  if test -n \"$1\"; then\n    # Remove leading and trailing path separator characters from\n    # ARG. msys behavior is inconsistent here, cygpath turns them\n    # into '.;' and ';.', and winepath ignores them completely.\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_path_wine_to_w32 \"$func_to_host_path_tmp1\"\n    func_cygpath -u -p \"$func_convert_core_path_wine_to_w32_result\"\n    func_to_host_path_result=$func_cygpath_result\n    func_convert_path_check : : \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" : \"$1\"\n  fi\n}\n# end func_convert_path_nix_to_cygwin\n\n\n# func_dll_def_p FILE\n# True iff FILE is a Windows DLL '.def' file.\n# Keep in sync with _LT_DLL_DEF_P in libtool.m4\nfunc_dll_def_p ()\n{\n  $debug_cmd\n\n  func_dll_def_p_tmp=`$SED -n \\\n    -e 's/^[\t ]*//' \\\n    -e '/^\\(;.*\\)*$/d' \\\n    -e 's/^\\(EXPORTS\\|LIBRARY\\)\\([\t ].*\\)*$/DEF/p' \\\n    -e q \\\n    \"$1\"`\n  test DEF = \"$func_dll_def_p_tmp\"\n}\n\n\n# func_mode_compile arg...\nfunc_mode_compile ()\n{\n    $debug_cmd\n\n    # Get the compilation command and the source file.\n    base_compile=\n    srcfile=$nonopt  #  always keep a non-empty value in \"srcfile\"\n    suppress_opt=yes\n    suppress_output=\n    arg_mode=normal\n    libobj=\n    later=\n    pie_flag=\n\n    for arg\n    do\n      case $arg_mode in\n      arg  )\n\t# do not \"continue\".  Instead, add this to base_compile\n\tlastarg=$arg\n\targ_mode=normal\n\t;;\n\n      target )\n\tlibobj=$arg\n\targ_mode=normal\n\tcontinue\n\t;;\n\n      normal )\n\t# Accept any command-line options.\n\tcase $arg in\n\t-o)\n\t  test -n \"$libobj\" && \\\n\t    func_fatal_error \"you cannot specify '-o' more than once\"\n\t  arg_mode=target\n\t  continue\n\t  ;;\n\n\t-pie | -fpie | -fPIE)\n          func_append pie_flag \" $arg\"\n\t  continue\n\t  ;;\n\n\t-shared | -static | -prefer-pic | -prefer-non-pic)\n\t  func_append later \" $arg\"\n\t  continue\n\t  ;;\n\n\t-no-suppress)\n\t  suppress_opt=no\n\t  continue\n\t  ;;\n\n\t-Xcompiler)\n\t  arg_mode=arg  #  the next one goes into the \"base_compile\" arg list\n\t  continue      #  The current \"srcfile\" will either be retained or\n\t  ;;            #  replaced later.  I would guess that would be a bug.\n\n\t-Wc,*)\n\t  func_stripname '-Wc,' '' \"$arg\"\n\t  args=$func_stripname_result\n\t  lastarg=\n\t  save_ifs=$IFS; IFS=,\n\t  for arg in $args; do\n\t    IFS=$save_ifs\n\t    func_append_quoted lastarg \"$arg\"\n\t  done\n\t  IFS=$save_ifs\n\t  func_stripname ' ' '' \"$lastarg\"\n\t  lastarg=$func_stripname_result\n\n\t  # Add the arguments to base_compile.\n\t  func_append base_compile \" $lastarg\"\n\t  continue\n\t  ;;\n\n\t*)\n\t  # Accept the current argument as the source file.\n\t  # The previous \"srcfile\" becomes the current argument.\n\t  #\n\t  lastarg=$srcfile\n\t  srcfile=$arg\n\t  ;;\n\tesac  #  case $arg\n\t;;\n      esac    #  case $arg_mode\n\n      # Aesthetically quote the previous argument.\n      func_append_quoted base_compile \"$lastarg\"\n    done # for arg\n\n    case $arg_mode in\n    arg)\n      func_fatal_error \"you must specify an argument for -Xcompile\"\n      ;;\n    target)\n      func_fatal_error \"you must specify a target with '-o'\"\n      ;;\n    *)\n      # Get the name of the library object.\n      test -z \"$libobj\" && {\n\tfunc_basename \"$srcfile\"\n\tlibobj=$func_basename_result\n      }\n      ;;\n    esac\n\n    # Recognize several different file suffixes.\n    # If the user specifies -o file.o, it is replaced with file.lo\n    case $libobj in\n    *.[cCFSifmso] | \\\n    *.ada | *.adb | *.ads | *.asm | \\\n    *.c++ | *.cc | *.ii | *.class | *.cpp | *.cxx | \\\n    *.[fF][09]? | *.for | *.java | *.go | *.obj | *.sx | *.cu | *.cup)\n      func_xform \"$libobj\"\n      libobj=$func_xform_result\n      ;;\n    esac\n\n    case $libobj in\n    *.lo) func_lo2o \"$libobj\"; obj=$func_lo2o_result ;;\n    *)\n      func_fatal_error \"cannot determine name of library object from '$libobj'\"\n      ;;\n    esac\n\n    func_infer_tag $base_compile\n\n    for arg in $later; do\n      case $arg in\n      -shared)\n\ttest yes = \"$build_libtool_libs\" \\\n\t  || func_fatal_configuration \"cannot build a shared library\"\n\tbuild_old_libs=no\n\tcontinue\n\t;;\n\n      -static)\n\tbuild_libtool_libs=no\n\tbuild_old_libs=yes\n\tcontinue\n\t;;\n\n      -prefer-pic)\n\tpic_mode=yes\n\tcontinue\n\t;;\n\n      -prefer-non-pic)\n\tpic_mode=no\n\tcontinue\n\t;;\n      esac\n    done\n\n    func_quote_for_eval \"$libobj\"\n    test \"X$libobj\" != \"X$func_quote_for_eval_result\" \\\n      && $ECHO \"X$libobj\" | $GREP '[]~#^*{};<>?\"'\"'\"'\t &()|`$[]' \\\n      && func_warning \"libobj name '$libobj' may not contain shell special characters.\"\n    func_dirname_and_basename \"$obj\" \"/\" \"\"\n    objname=$func_basename_result\n    xdir=$func_dirname_result\n    lobj=$xdir$objdir/$objname\n\n    test -z \"$base_compile\" && \\\n      func_fatal_help \"you must specify a compilation command\"\n\n    # Delete any leftover library objects.\n    if test yes = \"$build_old_libs\"; then\n      removelist=\"$obj $lobj $libobj ${libobj}T\"\n    else\n      removelist=\"$lobj $libobj ${libobj}T\"\n    fi\n\n    # On Cygwin there's no \"real\" PIC flag so we must build both object types\n    case $host_os in\n    cygwin* | mingw* | pw32* | os2* | cegcc*)\n      pic_mode=default\n      ;;\n    esac\n    if test no = \"$pic_mode\" && test pass_all != \"$deplibs_check_method\"; then\n      # non-PIC code in shared libraries is not supported\n      pic_mode=default\n    fi\n\n    # Calculate the filename of the output object if compiler does\n    # not support -o with -c\n    if test no = \"$compiler_c_o\"; then\n      output_obj=`$ECHO \"$srcfile\" | $SED 's%^.*/%%; s%\\.[^.]*$%%'`.$objext\n      lockfile=$output_obj.lock\n    else\n      output_obj=\n      need_locks=no\n      lockfile=\n    fi\n\n    # Lock this critical section if it is needed\n    # We use this script file to make the link, it avoids creating a new file\n    if test yes = \"$need_locks\"; then\n      until $opt_dry_run || ln \"$progpath\" \"$lockfile\" 2>/dev/null; do\n\tfunc_echo \"Waiting for $lockfile to be removed\"\n\tsleep 2\n      done\n    elif test warn = \"$need_locks\"; then\n      if test -f \"$lockfile\"; then\n\t$ECHO \"\\\n*** ERROR, $lockfile exists and contains:\n`cat $lockfile 2>/dev/null`\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support '-c' and '-o' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler.\"\n\n\t$opt_dry_run || $RM $removelist\n\texit $EXIT_FAILURE\n      fi\n      func_append removelist \" $output_obj\"\n      $ECHO \"$srcfile\" > \"$lockfile\"\n    fi\n\n    $opt_dry_run || $RM $removelist\n    func_append removelist \" $lockfile\"\n    trap '$opt_dry_run || $RM $removelist; exit $EXIT_FAILURE' 1 2 15\n\n    func_to_tool_file \"$srcfile\" func_convert_file_msys_to_w32\n    srcfile=$func_to_tool_file_result\n    func_quote_for_eval \"$srcfile\"\n    qsrcfile=$func_quote_for_eval_result\n\n    # Only build a PIC object if we are building libtool libraries.\n    if test yes = \"$build_libtool_libs\"; then\n      # Without this assignment, base_compile gets emptied.\n      fbsd_hideous_sh_bug=$base_compile\n\n      if test no != \"$pic_mode\"; then\n\tcommand=\"$base_compile $qsrcfile $pic_flag\"\n      else\n\t# Don't build PIC code\n\tcommand=\"$base_compile $qsrcfile\"\n      fi\n\n      func_mkdir_p \"$xdir$objdir\"\n\n      if test -z \"$output_obj\"; then\n\t# Place PIC objects in $objdir\n\tfunc_append command \" -o $lobj\"\n      fi\n\n      func_show_eval_locale \"$command\"\t\\\n          'test -n \"$output_obj\" && $RM $removelist; exit $EXIT_FAILURE'\n\n      if test warn = \"$need_locks\" &&\n\t test \"X`cat $lockfile 2>/dev/null`\" != \"X$srcfile\"; then\n\t$ECHO \"\\\n*** ERROR, $lockfile contains:\n`cat $lockfile 2>/dev/null`\n\nbut it should contain:\n$srcfile\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support '-c' and '-o' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler.\"\n\n\t$opt_dry_run || $RM $removelist\n\texit $EXIT_FAILURE\n      fi\n\n      # Just move the object if needed, then go on to compile the next one\n      if test -n \"$output_obj\" && test \"X$output_obj\" != \"X$lobj\"; then\n\tfunc_show_eval '$MV \"$output_obj\" \"$lobj\"' \\\n\t  'error=$?; $opt_dry_run || $RM $removelist; exit $error'\n      fi\n\n      # Allow error messages only from the first compilation.\n      if test yes = \"$suppress_opt\"; then\n\tsuppress_output=' >/dev/null 2>&1'\n      fi\n    fi\n\n    # Only build a position-dependent object if we build old libraries.\n    if test yes = \"$build_old_libs\"; then\n      if test yes != \"$pic_mode\"; then\n\t# Don't build PIC code\n\tcommand=\"$base_compile $qsrcfile$pie_flag\"\n      else\n\tcommand=\"$base_compile $qsrcfile $pic_flag\"\n      fi\n      if test yes = \"$compiler_c_o\"; then\n\tfunc_append command \" -o $obj\"\n      fi\n\n      # Suppress compiler output if we already did a PIC compilation.\n      func_append command \"$suppress_output\"\n      func_show_eval_locale \"$command\" \\\n        '$opt_dry_run || $RM $removelist; exit $EXIT_FAILURE'\n\n      if test warn = \"$need_locks\" &&\n\t test \"X`cat $lockfile 2>/dev/null`\" != \"X$srcfile\"; then\n\t$ECHO \"\\\n*** ERROR, $lockfile contains:\n`cat $lockfile 2>/dev/null`\n\nbut it should contain:\n$srcfile\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support '-c' and '-o' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler.\"\n\n\t$opt_dry_run || $RM $removelist\n\texit $EXIT_FAILURE\n      fi\n\n      # Just move the object if needed\n      if test -n \"$output_obj\" && test \"X$output_obj\" != \"X$obj\"; then\n\tfunc_show_eval '$MV \"$output_obj\" \"$obj\"' \\\n\t  'error=$?; $opt_dry_run || $RM $removelist; exit $error'\n      fi\n    fi\n\n    $opt_dry_run || {\n      func_write_libtool_object \"$libobj\" \"$objdir/$objname\" \"$objname\"\n\n      # Unlock the critical section if it was locked\n      if test no != \"$need_locks\"; then\n\tremovelist=$lockfile\n        $RM \"$lockfile\"\n      fi\n    }\n\n    exit $EXIT_SUCCESS\n}\n\n$opt_help || {\n  test compile = \"$opt_mode\" && func_mode_compile ${1+\"$@\"}\n}\n\nfunc_mode_help ()\n{\n    # We need to display help for each of the modes.\n    case $opt_mode in\n      \"\")\n        # Generic help is extracted from the usage comments\n        # at the start of this file.\n        func_help\n        ;;\n\n      clean)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=clean RM [RM-OPTION]... FILE...\n\nRemove files from the build directory.\n\nRM is the name of the program to use to delete files associated with each FILE\n(typically '/bin/rm').  RM-OPTIONS are options (such as '-f') to be passed\nto RM.\n\nIf FILE is a libtool library, object or program, all the files associated\nwith it are deleted. Otherwise, only FILE itself is deleted using RM.\"\n        ;;\n\n      compile)\n      $ECHO \\\n\"Usage: $progname [OPTION]... --mode=compile COMPILE-COMMAND... SOURCEFILE\n\nCompile a source file into a libtool library object.\n\nThis mode accepts the following additional options:\n\n  -o OUTPUT-FILE    set the output file name to OUTPUT-FILE\n  -no-suppress      do not suppress compiler output for multiple passes\n  -prefer-pic       try to build PIC objects only\n  -prefer-non-pic   try to build non-PIC objects only\n  -shared           do not build a '.o' file suitable for static linking\n  -static           only build a '.o' file suitable for static linking\n  -Wc,FLAG          pass FLAG directly to the compiler\n\nCOMPILE-COMMAND is a command to be used in creating a 'standard' object file\nfrom the given SOURCEFILE.\n\nThe output file name is determined by removing the directory component from\nSOURCEFILE, then substituting the C source code suffix '.c' with the\nlibrary object suffix, '.lo'.\"\n        ;;\n\n      execute)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=execute COMMAND [ARGS]...\n\nAutomatically set library path, then run a program.\n\nThis mode accepts the following additional options:\n\n  -dlopen FILE      add the directory containing FILE to the library path\n\nThis mode sets the library path environment variable according to '-dlopen'\nflags.\n\nIf any of the ARGS are libtool executable wrappers, then they are translated\ninto their corresponding uninstalled binary, and any of their required library\ndirectories are added to the library path.\n\nThen, COMMAND is executed, with ARGS as arguments.\"\n        ;;\n\n      finish)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=finish [LIBDIR]...\n\nComplete the installation of libtool libraries.\n\nEach LIBDIR is a directory that contains libtool libraries.\n\nThe commands that this mode executes may require superuser privileges.  Use\nthe '--dry-run' option if you just want to see what would be executed.\"\n        ;;\n\n      install)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=install INSTALL-COMMAND...\n\nInstall executables or libraries.\n\nINSTALL-COMMAND is the installation command.  The first component should be\neither the 'install' or 'cp' program.\n\nThe following components of INSTALL-COMMAND are treated specially:\n\n  -inst-prefix-dir PREFIX-DIR  Use PREFIX-DIR as a staging area for installation\n\nThe rest of the components are interpreted as arguments to that command (only\nBSD-compatible install options are recognized).\"\n        ;;\n\n      link)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=link LINK-COMMAND...\n\nLink object files or libraries together to form another library, or to\ncreate an executable program.\n\nLINK-COMMAND is a command using the C compiler that you would use to create\na program from several object files.\n\nThe following components of LINK-COMMAND are treated specially:\n\n  -all-static       do not do any dynamic linking at all\n  -avoid-version    do not add a version suffix if possible\n  -bindir BINDIR    specify path to binaries directory (for systems where\n                    libraries must be found in the PATH setting at runtime)\n  -dlopen FILE      '-dlpreopen' FILE if it cannot be dlopened at runtime\n  -dlpreopen FILE   link in FILE and add its symbols to lt_preloaded_symbols\n  -export-dynamic   allow symbols from OUTPUT-FILE to be resolved with dlsym(3)\n  -export-symbols SYMFILE\n                    try to export only the symbols listed in SYMFILE\n  -export-symbols-regex REGEX\n                    try to export only the symbols matching REGEX\n  -LLIBDIR          search LIBDIR for required installed libraries\n  -lNAME            OUTPUT-FILE requires the installed library libNAME\n  -module           build a library that can dlopened\n  -no-fast-install  disable the fast-install mode\n  -no-install       link a not-installable executable\n  -no-undefined     declare that a library does not refer to external symbols\n  -o OUTPUT-FILE    create OUTPUT-FILE from the specified objects\n  -objectlist FILE  use a list of object files found in FILE to specify objects\n  -os2dllname NAME  force a short DLL name on OS/2 (no effect on other OSes)\n  -precious-files-regex REGEX\n                    don't remove output files matching REGEX\n  -release RELEASE  specify package release information\n  -rpath LIBDIR     the created library will eventually be installed in LIBDIR\n  -R[ ]LIBDIR       add LIBDIR to the runtime path of programs and libraries\n  -shared           only do dynamic linking of libtool libraries\n  -shrext SUFFIX    override the standard shared library file extension\n  -static           do not do any dynamic linking of uninstalled libtool libraries\n  -static-libtool-libs\n                    do not do any dynamic linking of libtool libraries\n  -version-info CURRENT[:REVISION[:AGE]]\n                    specify library version info [each variable defaults to 0]\n  -weak LIBNAME     declare that the target provides the LIBNAME interface\n  -Wc,FLAG\n  -Xcompiler FLAG   pass linker-specific FLAG directly to the compiler\n  -Wl,FLAG\n  -Xlinker FLAG     pass linker-specific FLAG directly to the linker\n  -XCClinker FLAG   pass link-specific FLAG to the compiler driver (CC)\n\nAll other options (arguments beginning with '-') are ignored.\n\nEvery other argument is treated as a filename.  Files ending in '.la' are\ntreated as uninstalled libtool libraries, other files are standard or library\nobject files.\n\nIf the OUTPUT-FILE ends in '.la', then a libtool library is created,\nonly library objects ('.lo' files) may be specified, and '-rpath' is\nrequired, except when creating a convenience library.\n\nIf OUTPUT-FILE ends in '.a' or '.lib', then a standard library is created\nusing 'ar' and 'ranlib', or on Windows using 'lib'.\n\nIf OUTPUT-FILE ends in '.lo' or '.$objext', then a reloadable object file\nis created, otherwise an executable program is created.\"\n        ;;\n\n      uninstall)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=uninstall RM [RM-OPTION]... FILE...\n\nRemove libraries from an installation directory.\n\nRM is the name of the program to use to delete files associated with each FILE\n(typically '/bin/rm').  RM-OPTIONS are options (such as '-f') to be passed\nto RM.\n\nIf FILE is a libtool library, all the files associated with it are deleted.\nOtherwise, only FILE itself is deleted using RM.\"\n        ;;\n\n      *)\n        func_fatal_help \"invalid operation mode '$opt_mode'\"\n        ;;\n    esac\n\n    echo\n    $ECHO \"Try '$progname --help' for more information about other modes.\"\n}\n\n# Now that we've collected a possible --mode arg, show help if necessary\nif $opt_help; then\n  if test : = \"$opt_help\"; then\n    func_mode_help\n  else\n    {\n      func_help noexit\n      for opt_mode in compile link execute install finish uninstall clean; do\n\tfunc_mode_help\n      done\n    } | $SED -n '1p; 2,$s/^Usage:/  or: /p'\n    {\n      func_help noexit\n      for opt_mode in compile link execute install finish uninstall clean; do\n\techo\n\tfunc_mode_help\n      done\n    } |\n    $SED '1d\n      /^When reporting/,/^Report/{\n\tH\n\td\n      }\n      $x\n      /information about other modes/d\n      /more detailed .*MODE/d\n      s/^Usage:.*--mode=\\([^ ]*\\) .*/Description of \\1 mode:/'\n  fi\n  exit $?\nfi\n\n\n# func_mode_execute arg...\nfunc_mode_execute ()\n{\n    $debug_cmd\n\n    # The first argument is the command name.\n    cmd=$nonopt\n    test -z \"$cmd\" && \\\n      func_fatal_help \"you must specify a COMMAND\"\n\n    # Handle -dlopen flags immediately.\n    for file in $opt_dlopen; do\n      test -f \"$file\" \\\n\t|| func_fatal_help \"'$file' is not a file\"\n\n      dir=\n      case $file in\n      *.la)\n\tfunc_resolve_sysroot \"$file\"\n\tfile=$func_resolve_sysroot_result\n\n\t# Check to see that this really is a libtool archive.\n\tfunc_lalib_unsafe_p \"$file\" \\\n\t  || func_fatal_help \"'$lib' is not a valid libtool archive\"\n\n\t# Read the libtool library.\n\tdlname=\n\tlibrary_names=\n\tfunc_source \"$file\"\n\n\t# Skip this library if it cannot be dlopened.\n\tif test -z \"$dlname\"; then\n\t  # Warn if it was a shared library.\n\t  test -n \"$library_names\" && \\\n\t    func_warning \"'$file' was not linked with '-export-dynamic'\"\n\t  continue\n\tfi\n\n\tfunc_dirname \"$file\" \"\" \".\"\n\tdir=$func_dirname_result\n\n\tif test -f \"$dir/$objdir/$dlname\"; then\n\t  func_append dir \"/$objdir\"\n\telse\n\t  if test ! -f \"$dir/$dlname\"; then\n\t    func_fatal_error \"cannot find '$dlname' in '$dir' or '$dir/$objdir'\"\n\t  fi\n\tfi\n\t;;\n\n      *.lo)\n\t# Just add the directory containing the .lo file.\n\tfunc_dirname \"$file\" \"\" \".\"\n\tdir=$func_dirname_result\n\t;;\n\n      *)\n\tfunc_warning \"'-dlopen' is ignored for non-libtool libraries and objects\"\n\tcontinue\n\t;;\n      esac\n\n      # Get the absolute pathname.\n      absdir=`cd \"$dir\" && pwd`\n      test -n \"$absdir\" && dir=$absdir\n\n      # Now add the directory to shlibpath_var.\n      if eval \"test -z \\\"\\$$shlibpath_var\\\"\"; then\n\teval \"$shlibpath_var=\\\"\\$dir\\\"\"\n      else\n\teval \"$shlibpath_var=\\\"\\$dir:\\$$shlibpath_var\\\"\"\n      fi\n    done\n\n    # This variable tells wrapper scripts just to set shlibpath_var\n    # rather than running their programs.\n    libtool_execute_magic=$magic\n\n    # Check if any of the arguments is a wrapper script.\n    args=\n    for file\n    do\n      case $file in\n      -* | *.la | *.lo ) ;;\n      *)\n\t# Do a test to see if this is really a libtool program.\n\tif func_ltwrapper_script_p \"$file\"; then\n\t  func_source \"$file\"\n\t  # Transform arg to wrapped name.\n\t  file=$progdir/$program\n\telif func_ltwrapper_executable_p \"$file\"; then\n\t  func_ltwrapper_scriptname \"$file\"\n\t  func_source \"$func_ltwrapper_scriptname_result\"\n\t  # Transform arg to wrapped name.\n\t  file=$progdir/$program\n\tfi\n\t;;\n      esac\n      # Quote arguments (to preserve shell metacharacters).\n      func_append_quoted args \"$file\"\n    done\n\n    if $opt_dry_run; then\n      # Display what would be done.\n      if test -n \"$shlibpath_var\"; then\n\teval \"\\$ECHO \\\"\\$shlibpath_var=\\$$shlibpath_var\\\"\"\n\techo \"export $shlibpath_var\"\n      fi\n      $ECHO \"$cmd$args\"\n      exit $EXIT_SUCCESS\n    else\n      if test -n \"$shlibpath_var\"; then\n\t# Export the shlibpath_var.\n\teval \"export $shlibpath_var\"\n      fi\n\n      # Restore saved environment variables\n      for lt_var in LANG LANGUAGE LC_ALL LC_CTYPE LC_COLLATE LC_MESSAGES\n      do\n\teval \"if test \\\"\\${save_$lt_var+set}\\\" = set; then\n                $lt_var=\\$save_$lt_var; export $lt_var\n\t      else\n\t\t$lt_unset $lt_var\n\t      fi\"\n      done\n\n      # Now prepare to actually exec the command.\n      exec_cmd=\\$cmd$args\n    fi\n}\n\ntest execute = \"$opt_mode\" && func_mode_execute ${1+\"$@\"}\n\n\n# func_mode_finish arg...\nfunc_mode_finish ()\n{\n    $debug_cmd\n\n    libs=\n    libdirs=\n    admincmds=\n\n    for opt in \"$nonopt\" ${1+\"$@\"}\n    do\n      if test -d \"$opt\"; then\n\tfunc_append libdirs \" $opt\"\n\n      elif test -f \"$opt\"; then\n\tif func_lalib_unsafe_p \"$opt\"; then\n\t  func_append libs \" $opt\"\n\telse\n\t  func_warning \"'$opt' is not a valid libtool archive\"\n\tfi\n\n      else\n\tfunc_fatal_error \"invalid argument '$opt'\"\n      fi\n    done\n\n    if test -n \"$libs\"; then\n      if test -n \"$lt_sysroot\"; then\n        sysroot_regex=`$ECHO \"$lt_sysroot\" | $SED \"$sed_make_literal_regex\"`\n        sysroot_cmd=\"s/\\([ ']\\)$sysroot_regex/\\1/g;\"\n      else\n        sysroot_cmd=\n      fi\n\n      # Remove sysroot references\n      if $opt_dry_run; then\n        for lib in $libs; do\n          echo \"removing references to $lt_sysroot and '=' prefixes from $lib\"\n        done\n      else\n        tmpdir=`func_mktempdir`\n        for lib in $libs; do\n\t  $SED -e \"$sysroot_cmd s/\\([ ']-[LR]\\)=/\\1/g; s/\\([ ']\\)=/\\1/g\" $lib \\\n\t    > $tmpdir/tmp-la\n\t  mv -f $tmpdir/tmp-la $lib\n\tdone\n        ${RM}r \"$tmpdir\"\n      fi\n    fi\n\n    if test -n \"$finish_cmds$finish_eval\" && test -n \"$libdirs\"; then\n      for libdir in $libdirs; do\n\tif test -n \"$finish_cmds\"; then\n\t  # Do each command in the finish commands.\n\t  func_execute_cmds \"$finish_cmds\" 'admincmds=\"$admincmds\n'\"$cmd\"'\"'\n\tfi\n\tif test -n \"$finish_eval\"; then\n\t  # Do the single finish_eval.\n\t  eval cmds=\\\"$finish_eval\\\"\n\t  $opt_dry_run || eval \"$cmds\" || func_append admincmds \"\n       $cmds\"\n\tfi\n      done\n    fi\n\n    # Exit here if they wanted silent mode.\n    $opt_quiet && exit $EXIT_SUCCESS\n\n    if test -n \"$finish_cmds$finish_eval\" && test -n \"$libdirs\"; then\n      echo \"----------------------------------------------------------------------\"\n      echo \"Libraries have been installed in:\"\n      for libdir in $libdirs; do\n\t$ECHO \"   $libdir\"\n      done\n      echo\n      echo \"If you ever happen to want to link against installed libraries\"\n      echo \"in a given directory, LIBDIR, you must either use libtool, and\"\n      echo \"specify the full pathname of the library, or use the '-LLIBDIR'\"\n      echo \"flag during linking and do at least one of the following:\"\n      if test -n \"$shlibpath_var\"; then\n\techo \"   - add LIBDIR to the '$shlibpath_var' environment variable\"\n\techo \"     during execution\"\n      fi\n      if test -n \"$runpath_var\"; then\n\techo \"   - add LIBDIR to the '$runpath_var' environment variable\"\n\techo \"     during linking\"\n      fi\n      if test -n \"$hardcode_libdir_flag_spec\"; then\n\tlibdir=LIBDIR\n\teval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\n\t$ECHO \"   - use the '$flag' linker flag\"\n      fi\n      if test -n \"$admincmds\"; then\n\t$ECHO \"   - have your system administrator run these commands:$admincmds\"\n      fi\n      if test -f /etc/ld.so.conf; then\n\techo \"   - have your system administrator add LIBDIR to '/etc/ld.so.conf'\"\n      fi\n      echo\n\n      echo \"See any operating system documentation about shared libraries for\"\n      case $host in\n\tsolaris2.[6789]|solaris2.1[0-9])\n\t  echo \"more information, such as the ld(1), crle(1) and ld.so(8) manual\"\n\t  echo \"pages.\"\n\t  ;;\n\t*)\n\t  echo \"more information, such as the ld(1) and ld.so(8) manual pages.\"\n\t  ;;\n      esac\n      echo \"----------------------------------------------------------------------\"\n    fi\n    exit $EXIT_SUCCESS\n}\n\ntest finish = \"$opt_mode\" && func_mode_finish ${1+\"$@\"}\n\n\n# func_mode_install arg...\nfunc_mode_install ()\n{\n    $debug_cmd\n\n    # There may be an optional sh(1) argument at the beginning of\n    # install_prog (especially on Windows NT).\n    if test \"$SHELL\" = \"$nonopt\" || test /bin/sh = \"$nonopt\" ||\n       # Allow the use of GNU shtool's install command.\n       case $nonopt in *shtool*) :;; *) false;; esac\n    then\n      # Aesthetically quote it.\n      func_quote_for_eval \"$nonopt\"\n      install_prog=\"$func_quote_for_eval_result \"\n      arg=$1\n      shift\n    else\n      install_prog=\n      arg=$nonopt\n    fi\n\n    # The real first argument should be the name of the installation program.\n    # Aesthetically quote it.\n    func_quote_for_eval \"$arg\"\n    func_append install_prog \"$func_quote_for_eval_result\"\n    install_shared_prog=$install_prog\n    case \" $install_prog \" in\n      *[\\\\\\ /]cp\\ *) install_cp=: ;;\n      *) install_cp=false ;;\n    esac\n\n    # We need to accept at least all the BSD install flags.\n    dest=\n    files=\n    opts=\n    prev=\n    install_type=\n    isdir=false\n    stripme=\n    no_mode=:\n    for arg\n    do\n      arg2=\n      if test -n \"$dest\"; then\n\tfunc_append files \" $dest\"\n\tdest=$arg\n\tcontinue\n      fi\n\n      case $arg in\n      -d) isdir=: ;;\n      -f)\n\tif $install_cp; then :; else\n\t  prev=$arg\n\tfi\n\t;;\n      -g | -m | -o)\n\tprev=$arg\n\t;;\n      -s)\n\tstripme=\" -s\"\n\tcontinue\n\t;;\n      -*)\n\t;;\n      *)\n\t# If the previous option needed an argument, then skip it.\n\tif test -n \"$prev\"; then\n\t  if test X-m = \"X$prev\" && test -n \"$install_override_mode\"; then\n\t    arg2=$install_override_mode\n\t    no_mode=false\n\t  fi\n\t  prev=\n\telse\n\t  dest=$arg\n\t  continue\n\tfi\n\t;;\n      esac\n\n      # Aesthetically quote the argument.\n      func_quote_for_eval \"$arg\"\n      func_append install_prog \" $func_quote_for_eval_result\"\n      if test -n \"$arg2\"; then\n\tfunc_quote_for_eval \"$arg2\"\n      fi\n      func_append install_shared_prog \" $func_quote_for_eval_result\"\n    done\n\n    test -z \"$install_prog\" && \\\n      func_fatal_help \"you must specify an install program\"\n\n    test -n \"$prev\" && \\\n      func_fatal_help \"the '$prev' option requires an argument\"\n\n    if test -n \"$install_override_mode\" && $no_mode; then\n      if $install_cp; then :; else\n\tfunc_quote_for_eval \"$install_override_mode\"\n\tfunc_append install_shared_prog \" -m $func_quote_for_eval_result\"\n      fi\n    fi\n\n    if test -z \"$files\"; then\n      if test -z \"$dest\"; then\n\tfunc_fatal_help \"no file or destination specified\"\n      else\n\tfunc_fatal_help \"you must specify a destination\"\n      fi\n    fi\n\n    # Strip any trailing slash from the destination.\n    func_stripname '' '/' \"$dest\"\n    dest=$func_stripname_result\n\n    # Check to see that the destination is a directory.\n    test -d \"$dest\" && isdir=:\n    if $isdir; then\n      destdir=$dest\n      destname=\n    else\n      func_dirname_and_basename \"$dest\" \"\" \".\"\n      destdir=$func_dirname_result\n      destname=$func_basename_result\n\n      # Not a directory, so check to see that there is only one file specified.\n      set dummy $files; shift\n      test \"$#\" -gt 1 && \\\n\tfunc_fatal_help \"'$dest' is not a directory\"\n    fi\n    case $destdir in\n    [\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n    *)\n      for file in $files; do\n\tcase $file in\n\t*.lo) ;;\n\t*)\n\t  func_fatal_help \"'$destdir' must be an absolute directory name\"\n\t  ;;\n\tesac\n      done\n      ;;\n    esac\n\n    # This variable tells wrapper scripts just to set variables rather\n    # than running their programs.\n    libtool_install_magic=$magic\n\n    staticlibs=\n    future_libdirs=\n    current_libdirs=\n    for file in $files; do\n\n      # Do each installation.\n      case $file in\n      *.$libext)\n\t# Do the static libraries later.\n\tfunc_append staticlibs \" $file\"\n\t;;\n\n      *.la)\n\tfunc_resolve_sysroot \"$file\"\n\tfile=$func_resolve_sysroot_result\n\n\t# Check to see that this really is a libtool archive.\n\tfunc_lalib_unsafe_p \"$file\" \\\n\t  || func_fatal_help \"'$file' is not a valid libtool archive\"\n\n\tlibrary_names=\n\told_library=\n\trelink_command=\n\tfunc_source \"$file\"\n\n\t# Add the libdir to current_libdirs if it is the destination.\n\tif test \"X$destdir\" = \"X$libdir\"; then\n\t  case \"$current_libdirs \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append current_libdirs \" $libdir\" ;;\n\t  esac\n\telse\n\t  # Note the libdir as a future libdir.\n\t  case \"$future_libdirs \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append future_libdirs \" $libdir\" ;;\n\t  esac\n\tfi\n\n\tfunc_dirname \"$file\" \"/\" \"\"\n\tdir=$func_dirname_result\n\tfunc_append dir \"$objdir\"\n\n\tif test -n \"$relink_command\"; then\n\t  # Determine the prefix the user has applied to our future dir.\n\t  inst_prefix_dir=`$ECHO \"$destdir\" | $SED -e \"s%$libdir\\$%%\"`\n\n\t  # Don't allow the user to place us outside of our expected\n\t  # location b/c this prevents finding dependent libraries that\n\t  # are installed to the same prefix.\n\t  # At present, this check doesn't affect windows .dll's that\n\t  # are installed into $libdir/../bin (currently, that works fine)\n\t  # but it's something to keep an eye on.\n\t  test \"$inst_prefix_dir\" = \"$destdir\" && \\\n\t    func_fatal_error \"error: cannot install '$file' to a directory not ending in $libdir\"\n\n\t  if test -n \"$inst_prefix_dir\"; then\n\t    # Stick the inst_prefix_dir data into the link command.\n\t    relink_command=`$ECHO \"$relink_command\" | $SED \"s%@inst_prefix_dir@%-inst-prefix-dir $inst_prefix_dir%\"`\n\t  else\n\t    relink_command=`$ECHO \"$relink_command\" | $SED \"s%@inst_prefix_dir@%%\"`\n\t  fi\n\n\t  func_warning \"relinking '$file'\"\n\t  func_show_eval \"$relink_command\" \\\n\t    'func_fatal_error \"error: relink '\\''$file'\\'' with the above command before installing it\"'\n\tfi\n\n\t# See the names of the shared library.\n\tset dummy $library_names; shift\n\tif test -n \"$1\"; then\n\t  realname=$1\n\t  shift\n\n\t  srcname=$realname\n\t  test -n \"$relink_command\" && srcname=${realname}T\n\n\t  # Install the shared library and build the symlinks.\n\t  func_show_eval \"$install_shared_prog $dir/$srcname $destdir/$realname\" \\\n\t      'exit $?'\n\t  tstripme=$stripme\n\t  case $host_os in\n\t  cygwin* | mingw* | pw32* | cegcc*)\n\t    case $realname in\n\t    *.dll.a)\n\t      tstripme=\n\t      ;;\n\t    esac\n\t    ;;\n\t  os2*)\n\t    case $realname in\n\t    *_dll.a)\n\t      tstripme=\n\t      ;;\n\t    esac\n\t    ;;\n\t  esac\n\t  if test -n \"$tstripme\" && test -n \"$striplib\"; then\n\t    func_show_eval \"$striplib $destdir/$realname\" 'exit $?'\n\t  fi\n\n\t  if test \"$#\" -gt 0; then\n\t    # Delete the old symlinks, and create new ones.\n\t    # Try 'ln -sf' first, because the 'ln' binary might depend on\n\t    # the symlink we replace!  Solaris /bin/ln does not understand -f,\n\t    # so we also need to try rm && ln -s.\n\t    for linkname\n\t    do\n\t      test \"$linkname\" != \"$realname\" \\\n\t\t&& func_show_eval \"(cd $destdir && { $LN_S -f $realname $linkname || { $RM $linkname && $LN_S $realname $linkname; }; })\"\n\t    done\n\t  fi\n\n\t  # Do each command in the postinstall commands.\n\t  lib=$destdir/$realname\n\t  func_execute_cmds \"$postinstall_cmds\" 'exit $?'\n\tfi\n\n\t# Install the pseudo-library for information purposes.\n\tfunc_basename \"$file\"\n\tname=$func_basename_result\n\tinstname=$dir/${name}i\n\tfunc_show_eval \"$install_prog $instname $destdir/$name\" 'exit $?'\n\n\t# Maybe install the static library, too.\n\ttest -n \"$old_library\" && func_append staticlibs \" $dir/$old_library\"\n\t;;\n\n      *.lo)\n\t# Install (i.e. copy) a libtool object.\n\n\t# Figure out destination file name, if it wasn't already specified.\n\tif test -n \"$destname\"; then\n\t  destfile=$destdir/$destname\n\telse\n\t  func_basename \"$file\"\n\t  destfile=$func_basename_result\n\t  destfile=$destdir/$destfile\n\tfi\n\n\t# Deduce the name of the destination old-style object file.\n\tcase $destfile in\n\t*.lo)\n\t  func_lo2o \"$destfile\"\n\t  staticdest=$func_lo2o_result\n\t  ;;\n\t*.$objext)\n\t  staticdest=$destfile\n\t  destfile=\n\t  ;;\n\t*)\n\t  func_fatal_help \"cannot copy a libtool object to '$destfile'\"\n\t  ;;\n\tesac\n\n\t# Install the libtool object if requested.\n\ttest -n \"$destfile\" && \\\n\t  func_show_eval \"$install_prog $file $destfile\" 'exit $?'\n\n\t# Install the old object if enabled.\n\tif test yes = \"$build_old_libs\"; then\n\t  # Deduce the name of the old-style object file.\n\t  func_lo2o \"$file\"\n\t  staticobj=$func_lo2o_result\n\t  func_show_eval \"$install_prog \\$staticobj \\$staticdest\" 'exit $?'\n\tfi\n\texit $EXIT_SUCCESS\n\t;;\n\n      *)\n\t# Figure out destination file name, if it wasn't already specified.\n\tif test -n \"$destname\"; then\n\t  destfile=$destdir/$destname\n\telse\n\t  func_basename \"$file\"\n\t  destfile=$func_basename_result\n\t  destfile=$destdir/$destfile\n\tfi\n\n\t# If the file is missing, and there is a .exe on the end, strip it\n\t# because it is most likely a libtool script we actually want to\n\t# install\n\tstripped_ext=\n\tcase $file in\n\t  *.exe)\n\t    if test ! -f \"$file\"; then\n\t      func_stripname '' '.exe' \"$file\"\n\t      file=$func_stripname_result\n\t      stripped_ext=.exe\n\t    fi\n\t    ;;\n\tesac\n\n\t# Do a test to see if this is really a libtool program.\n\tcase $host in\n\t*cygwin* | *mingw*)\n\t    if func_ltwrapper_executable_p \"$file\"; then\n\t      func_ltwrapper_scriptname \"$file\"\n\t      wrapper=$func_ltwrapper_scriptname_result\n\t    else\n\t      func_stripname '' '.exe' \"$file\"\n\t      wrapper=$func_stripname_result\n\t    fi\n\t    ;;\n\t*)\n\t    wrapper=$file\n\t    ;;\n\tesac\n\tif func_ltwrapper_script_p \"$wrapper\"; then\n\t  notinst_deplibs=\n\t  relink_command=\n\n\t  func_source \"$wrapper\"\n\n\t  # Check the variables that should have been set.\n\t  test -z \"$generated_by_libtool_version\" && \\\n\t    func_fatal_error \"invalid libtool wrapper script '$wrapper'\"\n\n\t  finalize=:\n\t  for lib in $notinst_deplibs; do\n\t    # Check to see that each library is installed.\n\t    libdir=\n\t    if test -f \"$lib\"; then\n\t      func_source \"$lib\"\n\t    fi\n\t    libfile=$libdir/`$ECHO \"$lib\" | $SED 's%^.*/%%g'`\n\t    if test -n \"$libdir\" && test ! -f \"$libfile\"; then\n\t      func_warning \"'$lib' has not been installed in '$libdir'\"\n\t      finalize=false\n\t    fi\n\t  done\n\n\t  relink_command=\n\t  func_source \"$wrapper\"\n\n\t  outputname=\n\t  if test no = \"$fast_install\" && test -n \"$relink_command\"; then\n\t    $opt_dry_run || {\n\t      if $finalize; then\n\t        tmpdir=`func_mktempdir`\n\t\tfunc_basename \"$file$stripped_ext\"\n\t\tfile=$func_basename_result\n\t        outputname=$tmpdir/$file\n\t        # Replace the output file specification.\n\t        relink_command=`$ECHO \"$relink_command\" | $SED 's%@OUTPUT@%'\"$outputname\"'%g'`\n\n\t        $opt_quiet || {\n\t          func_quote_for_expand \"$relink_command\"\n\t\t  eval \"func_echo $func_quote_for_expand_result\"\n\t        }\n\t        if eval \"$relink_command\"; then :\n\t          else\n\t\t  func_error \"error: relink '$file' with the above command before installing it\"\n\t\t  $opt_dry_run || ${RM}r \"$tmpdir\"\n\t\t  continue\n\t        fi\n\t        file=$outputname\n\t      else\n\t        func_warning \"cannot relink '$file'\"\n\t      fi\n\t    }\n\t  else\n\t    # Install the binary that we compiled earlier.\n\t    file=`$ECHO \"$file$stripped_ext\" | $SED \"s%\\([^/]*\\)$%$objdir/\\1%\"`\n\t  fi\n\tfi\n\n\t# remove .exe since cygwin /usr/bin/install will append another\n\t# one anyway\n\tcase $install_prog,$host in\n\t*/usr/bin/install*,*cygwin*)\n\t  case $file:$destfile in\n\t  *.exe:*.exe)\n\t    # this is ok\n\t    ;;\n\t  *.exe:*)\n\t    destfile=$destfile.exe\n\t    ;;\n\t  *:*.exe)\n\t    func_stripname '' '.exe' \"$destfile\"\n\t    destfile=$func_stripname_result\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n\tfunc_show_eval \"$install_prog\\$stripme \\$file \\$destfile\" 'exit $?'\n\t$opt_dry_run || if test -n \"$outputname\"; then\n\t  ${RM}r \"$tmpdir\"\n\tfi\n\t;;\n      esac\n    done\n\n    for file in $staticlibs; do\n      func_basename \"$file\"\n      name=$func_basename_result\n\n      # Set up the ranlib parameters.\n      oldlib=$destdir/$name\n      func_to_tool_file \"$oldlib\" func_convert_file_msys_to_w32\n      tool_oldlib=$func_to_tool_file_result\n\n      func_show_eval \"$install_prog \\$file \\$oldlib\" 'exit $?'\n\n      if test -n \"$stripme\" && test -n \"$old_striplib\"; then\n\tfunc_show_eval \"$old_striplib $tool_oldlib\" 'exit $?'\n      fi\n\n      # Do each command in the postinstall commands.\n      func_execute_cmds \"$old_postinstall_cmds\" 'exit $?'\n    done\n\n    test -n \"$future_libdirs\" && \\\n      func_warning \"remember to run '$progname --finish$future_libdirs'\"\n\n    if test -n \"$current_libdirs\"; then\n      # Maybe just do a dry run.\n      $opt_dry_run && current_libdirs=\" -n$current_libdirs\"\n      exec_cmd='$SHELL \"$progpath\" $preserve_args --finish$current_libdirs'\n    else\n      exit $EXIT_SUCCESS\n    fi\n}\n\ntest install = \"$opt_mode\" && func_mode_install ${1+\"$@\"}\n\n\n# func_generate_dlsyms outputname originator pic_p\n# Extract symbols from dlprefiles and create ${outputname}S.o with\n# a dlpreopen symbol table.\nfunc_generate_dlsyms ()\n{\n    $debug_cmd\n\n    my_outputname=$1\n    my_originator=$2\n    my_pic_p=${3-false}\n    my_prefix=`$ECHO \"$my_originator\" | $SED 's%[^a-zA-Z0-9]%_%g'`\n    my_dlsyms=\n\n    if test -n \"$dlfiles$dlprefiles\" || test no != \"$dlself\"; then\n      if test -n \"$NM\" && test -n \"$global_symbol_pipe\"; then\n\tmy_dlsyms=${my_outputname}S.c\n      else\n\tfunc_error \"not configured to extract global symbols from dlpreopened files\"\n      fi\n    fi\n\n    if test -n \"$my_dlsyms\"; then\n      case $my_dlsyms in\n      \"\") ;;\n      *.c)\n\t# Discover the nlist of each of the dlfiles.\n\tnlist=$output_objdir/$my_outputname.nm\n\n\tfunc_show_eval \"$RM $nlist ${nlist}S ${nlist}T\"\n\n\t# Parse the name list into a source file.\n\tfunc_verbose \"creating $output_objdir/$my_dlsyms\"\n\n\t$opt_dry_run || $ECHO > \"$output_objdir/$my_dlsyms\" \"\\\n/* $my_dlsyms - symbol resolution table for '$my_outputname' dlsym emulation. */\n/* Generated by $PROGRAM (GNU $PACKAGE) $VERSION */\n\n#ifdef __cplusplus\nextern \\\"C\\\" {\n#endif\n\n#if defined __GNUC__ && (((__GNUC__ == 4) && (__GNUC_MINOR__ >= 4)) || (__GNUC__ > 4))\n#pragma GCC diagnostic ignored \\\"-Wstrict-prototypes\\\"\n#endif\n\n/* Keep this code in sync between libtool.m4, ltmain, lt_system.h, and tests.  */\n#if defined _WIN32 || defined __CYGWIN__ || defined _WIN32_WCE\n/* DATA imports from DLLs on WIN32 can't be const, because runtime\n   relocations are performed -- see ld's documentation on pseudo-relocs.  */\n# define LT_DLSYM_CONST\n#elif defined __osf__\n/* This system does not cope well with relocations in const data.  */\n# define LT_DLSYM_CONST\n#else\n# define LT_DLSYM_CONST const\n#endif\n\n#define STREQ(s1, s2) (strcmp ((s1), (s2)) == 0)\n\n/* External symbol declarations for the compiler. */\\\n\"\n\n\tif test yes = \"$dlself\"; then\n\t  func_verbose \"generating symbol list for '$output'\"\n\n\t  $opt_dry_run || echo ': @PROGRAM@ ' > \"$nlist\"\n\n\t  # Add our own program objects to the symbol list.\n\t  progfiles=`$ECHO \"$objs$old_deplibs\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n\t  for progfile in $progfiles; do\n\t    func_to_tool_file \"$progfile\" func_convert_file_msys_to_w32\n\t    func_verbose \"extracting global C symbols from '$func_to_tool_file_result'\"\n\t    $opt_dry_run || eval \"$NM $func_to_tool_file_result | $global_symbol_pipe >> '$nlist'\"\n\t  done\n\n\t  if test -n \"$exclude_expsyms\"; then\n\t    $opt_dry_run || {\n\t      eval '$EGREP -v \" ($exclude_expsyms)$\" \"$nlist\" > \"$nlist\"T'\n\t      eval '$MV \"$nlist\"T \"$nlist\"'\n\t    }\n\t  fi\n\n\t  if test -n \"$export_symbols_regex\"; then\n\t    $opt_dry_run || {\n\t      eval '$EGREP -e \"$export_symbols_regex\" \"$nlist\" > \"$nlist\"T'\n\t      eval '$MV \"$nlist\"T \"$nlist\"'\n\t    }\n\t  fi\n\n\t  # Prepare the list of exported symbols\n\t  if test -z \"$export_symbols\"; then\n\t    export_symbols=$output_objdir/$outputname.exp\n\t    $opt_dry_run || {\n\t      $RM $export_symbols\n\t      eval \"$SED -n -e '/^: @PROGRAM@ $/d' -e 's/^.* \\(.*\\)$/\\1/p' \"'< \"$nlist\" > \"$export_symbols\"'\n\t      case $host in\n\t      *cygwin* | *mingw* | *cegcc* )\n                eval \"echo EXPORTS \"'> \"$output_objdir/$outputname.def\"'\n                eval 'cat \"$export_symbols\" >> \"$output_objdir/$outputname.def\"'\n\t        ;;\n\t      esac\n\t    }\n\t  else\n\t    $opt_dry_run || {\n\t      eval \"$SED -e 's/\\([].[*^$]\\)/\\\\\\\\\\1/g' -e 's/^/ /' -e 's/$/$/'\"' < \"$export_symbols\" > \"$output_objdir/$outputname.exp\"'\n\t      eval '$GREP -f \"$output_objdir/$outputname.exp\" < \"$nlist\" > \"$nlist\"T'\n\t      eval '$MV \"$nlist\"T \"$nlist\"'\n\t      case $host in\n\t        *cygwin* | *mingw* | *cegcc* )\n\t          eval \"echo EXPORTS \"'> \"$output_objdir/$outputname.def\"'\n\t          eval 'cat \"$nlist\" >> \"$output_objdir/$outputname.def\"'\n\t          ;;\n\t      esac\n\t    }\n\t  fi\n\tfi\n\n\tfor dlprefile in $dlprefiles; do\n\t  func_verbose \"extracting global C symbols from '$dlprefile'\"\n\t  func_basename \"$dlprefile\"\n\t  name=$func_basename_result\n          case $host in\n\t    *cygwin* | *mingw* | *cegcc* )\n\t      # if an import library, we need to obtain dlname\n\t      if func_win32_import_lib_p \"$dlprefile\"; then\n\t        func_tr_sh \"$dlprefile\"\n\t        eval \"curr_lafile=\\$libfile_$func_tr_sh_result\"\n\t        dlprefile_dlbasename=\n\t        if test -n \"$curr_lafile\" && func_lalib_p \"$curr_lafile\"; then\n\t          # Use subshell, to avoid clobbering current variable values\n\t          dlprefile_dlname=`source \"$curr_lafile\" && echo \"$dlname\"`\n\t          if test -n \"$dlprefile_dlname\"; then\n\t            func_basename \"$dlprefile_dlname\"\n\t            dlprefile_dlbasename=$func_basename_result\n\t          else\n\t            # no lafile. user explicitly requested -dlpreopen <import library>.\n\t            $sharedlib_from_linklib_cmd \"$dlprefile\"\n\t            dlprefile_dlbasename=$sharedlib_from_linklib_result\n\t          fi\n\t        fi\n\t        $opt_dry_run || {\n\t          if test -n \"$dlprefile_dlbasename\"; then\n\t            eval '$ECHO \": $dlprefile_dlbasename\" >> \"$nlist\"'\n\t          else\n\t            func_warning \"Could not compute DLL name from $name\"\n\t            eval '$ECHO \": $name \" >> \"$nlist\"'\n\t          fi\n\t          func_to_tool_file \"$dlprefile\" func_convert_file_msys_to_w32\n\t          eval \"$NM \\\"$func_to_tool_file_result\\\" 2>/dev/null | $global_symbol_pipe |\n\t            $SED -e '/I __imp/d' -e 's/I __nm_/D /;s/_nm__//' >> '$nlist'\"\n\t        }\n\t      else # not an import lib\n\t        $opt_dry_run || {\n\t          eval '$ECHO \": $name \" >> \"$nlist\"'\n\t          func_to_tool_file \"$dlprefile\" func_convert_file_msys_to_w32\n\t          eval \"$NM \\\"$func_to_tool_file_result\\\" 2>/dev/null | $global_symbol_pipe >> '$nlist'\"\n\t        }\n\t      fi\n\t    ;;\n\t    *)\n\t      $opt_dry_run || {\n\t        eval '$ECHO \": $name \" >> \"$nlist\"'\n\t        func_to_tool_file \"$dlprefile\" func_convert_file_msys_to_w32\n\t        eval \"$NM \\\"$func_to_tool_file_result\\\" 2>/dev/null | $global_symbol_pipe >> '$nlist'\"\n\t      }\n\t    ;;\n          esac\n\tdone\n\n\t$opt_dry_run || {\n\t  # Make sure we have at least an empty file.\n\t  test -f \"$nlist\" || : > \"$nlist\"\n\n\t  if test -n \"$exclude_expsyms\"; then\n\t    $EGREP -v \" ($exclude_expsyms)$\" \"$nlist\" > \"$nlist\"T\n\t    $MV \"$nlist\"T \"$nlist\"\n\t  fi\n\n\t  # Try sorting and uniquifying the output.\n\t  if $GREP -v \"^: \" < \"$nlist\" |\n\t      if sort -k 3 </dev/null >/dev/null 2>&1; then\n\t\tsort -k 3\n\t      else\n\t\tsort +2\n\t      fi |\n\t      uniq > \"$nlist\"S; then\n\t    :\n\t  else\n\t    $GREP -v \"^: \" < \"$nlist\" > \"$nlist\"S\n\t  fi\n\n\t  if test -f \"$nlist\"S; then\n\t    eval \"$global_symbol_to_cdecl\"' < \"$nlist\"S >> \"$output_objdir/$my_dlsyms\"'\n\t  else\n\t    echo '/* NONE */' >> \"$output_objdir/$my_dlsyms\"\n\t  fi\n\n\t  func_show_eval '$RM \"${nlist}I\"'\n\t  if test -n \"$global_symbol_to_import\"; then\n\t    eval \"$global_symbol_to_import\"' < \"$nlist\"S > \"$nlist\"I'\n\t  fi\n\n\t  echo >> \"$output_objdir/$my_dlsyms\" \"\\\n\n/* The mapping between symbol names and symbols.  */\ntypedef struct {\n  const char *name;\n  void *address;\n} lt_dlsymlist;\nextern LT_DLSYM_CONST lt_dlsymlist\nlt_${my_prefix}_LTX_preloaded_symbols[];\\\n\"\n\n\t  if test -s \"$nlist\"I; then\n\t    echo >> \"$output_objdir/$my_dlsyms\" \"\\\nstatic void lt_syminit(void)\n{\n  LT_DLSYM_CONST lt_dlsymlist *symbol = lt_${my_prefix}_LTX_preloaded_symbols;\n  for (; symbol->name; ++symbol)\n    {\"\n\t    $SED 's/.*/      if (STREQ (symbol->name, \\\"&\\\")) symbol->address = (void *) \\&&;/' < \"$nlist\"I >> \"$output_objdir/$my_dlsyms\"\n\t    echo >> \"$output_objdir/$my_dlsyms\" \"\\\n    }\n}\"\n\t  fi\n\t  echo >> \"$output_objdir/$my_dlsyms\" \"\\\nLT_DLSYM_CONST lt_dlsymlist\nlt_${my_prefix}_LTX_preloaded_symbols[] =\n{ {\\\"$my_originator\\\", (void *) 0},\"\n\n\t  if test -s \"$nlist\"I; then\n\t    echo >> \"$output_objdir/$my_dlsyms\" \"\\\n  {\\\"@INIT@\\\", (void *) &lt_syminit},\"\n\t  fi\n\n\t  case $need_lib_prefix in\n\t  no)\n\t    eval \"$global_symbol_to_c_name_address\" < \"$nlist\" >> \"$output_objdir/$my_dlsyms\"\n\t    ;;\n\t  *)\n\t    eval \"$global_symbol_to_c_name_address_lib_prefix\" < \"$nlist\" >> \"$output_objdir/$my_dlsyms\"\n\t    ;;\n\t  esac\n\t  echo >> \"$output_objdir/$my_dlsyms\" \"\\\n  {0, (void *) 0}\n};\n\n/* This works around a problem in FreeBSD linker */\n#ifdef FREEBSD_WORKAROUND\nstatic const void *lt_preloaded_setup() {\n  return lt_${my_prefix}_LTX_preloaded_symbols;\n}\n#endif\n\n#ifdef __cplusplus\n}\n#endif\\\n\"\n\t} # !$opt_dry_run\n\n\tpic_flag_for_symtable=\n\tcase \"$compile_command \" in\n\t*\" -static \"*) ;;\n\t*)\n\t  case $host in\n\t  # compiling the symbol table file with pic_flag works around\n\t  # a FreeBSD bug that causes programs to crash when -lm is\n\t  # linked before any other PIC object.  But we must not use\n\t  # pic_flag when linking with -static.  The problem exists in\n\t  # FreeBSD 2.2.6 and is fixed in FreeBSD 3.1.\n\t  *-*-freebsd2.*|*-*-freebsd3.0*|*-*-freebsdelf3.0*)\n\t    pic_flag_for_symtable=\" $pic_flag -DFREEBSD_WORKAROUND\" ;;\n\t  *-*-hpux*)\n\t    pic_flag_for_symtable=\" $pic_flag\"  ;;\n\t  *)\n\t    $my_pic_p && pic_flag_for_symtable=\" $pic_flag\"\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n\tsymtab_cflags=\n\tfor arg in $LTCFLAGS; do\n\t  case $arg in\n\t  -pie | -fpie | -fPIE) ;;\n\t  *) func_append symtab_cflags \" $arg\" ;;\n\t  esac\n\tdone\n\n\t# Now compile the dynamic symbol file.\n\tfunc_show_eval '(cd $output_objdir && $LTCC$symtab_cflags -c$no_builtin_flag$pic_flag_for_symtable \"$my_dlsyms\")' 'exit $?'\n\n\t# Clean up the generated files.\n\tfunc_show_eval '$RM \"$output_objdir/$my_dlsyms\" \"$nlist\" \"${nlist}S\" \"${nlist}T\" \"${nlist}I\"'\n\n\t# Transform the symbol file into the correct name.\n\tsymfileobj=$output_objdir/${my_outputname}S.$objext\n\tcase $host in\n\t*cygwin* | *mingw* | *cegcc* )\n\t  if test -f \"$output_objdir/$my_outputname.def\"; then\n\t    compile_command=`$ECHO \"$compile_command\" | $SED \"s%@SYMFILE@%$output_objdir/$my_outputname.def $symfileobj%\"`\n\t    finalize_command=`$ECHO \"$finalize_command\" | $SED \"s%@SYMFILE@%$output_objdir/$my_outputname.def $symfileobj%\"`\n\t  else\n\t    compile_command=`$ECHO \"$compile_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t    finalize_command=`$ECHO \"$finalize_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t  fi\n\t  ;;\n\t*)\n\t  compile_command=`$ECHO \"$compile_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t  finalize_command=`$ECHO \"$finalize_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t  ;;\n\tesac\n\t;;\n      *)\n\tfunc_fatal_error \"unknown suffix for '$my_dlsyms'\"\n\t;;\n      esac\n    else\n      # We keep going just in case the user didn't refer to\n      # lt_preloaded_symbols.  The linker will fail if global_symbol_pipe\n      # really was required.\n\n      # Nullify the symbol file.\n      compile_command=`$ECHO \"$compile_command\" | $SED \"s% @SYMFILE@%%\"`\n      finalize_command=`$ECHO \"$finalize_command\" | $SED \"s% @SYMFILE@%%\"`\n    fi\n}\n\n# func_cygming_gnu_implib_p ARG\n# This predicate returns with zero status (TRUE) if\n# ARG is a GNU/binutils-style import library. Returns\n# with nonzero status (FALSE) otherwise.\nfunc_cygming_gnu_implib_p ()\n{\n  $debug_cmd\n\n  func_to_tool_file \"$1\" func_convert_file_msys_to_w32\n  func_cygming_gnu_implib_tmp=`$NM \"$func_to_tool_file_result\" | eval \"$global_symbol_pipe\" | $EGREP ' (_head_[A-Za-z0-9_]+_[ad]l*|[A-Za-z0-9_]+_[ad]l*_iname)$'`\n  test -n \"$func_cygming_gnu_implib_tmp\"\n}\n\n# func_cygming_ms_implib_p ARG\n# This predicate returns with zero status (TRUE) if\n# ARG is an MS-style import library. Returns\n# with nonzero status (FALSE) otherwise.\nfunc_cygming_ms_implib_p ()\n{\n  $debug_cmd\n\n  func_to_tool_file \"$1\" func_convert_file_msys_to_w32\n  func_cygming_ms_implib_tmp=`$NM \"$func_to_tool_file_result\" | eval \"$global_symbol_pipe\" | $GREP '_NULL_IMPORT_DESCRIPTOR'`\n  test -n \"$func_cygming_ms_implib_tmp\"\n}\n\n# func_win32_libid arg\n# return the library type of file 'arg'\n#\n# Need a lot of goo to handle *both* DLLs and import libs\n# Has to be a shell function in order to 'eat' the argument\n# that is supplied when $file_magic_command is called.\n# Despite the name, also deal with 64 bit binaries.\nfunc_win32_libid ()\n{\n  $debug_cmd\n\n  win32_libid_type=unknown\n  win32_fileres=`file -L $1 2>/dev/null`\n  case $win32_fileres in\n  *ar\\ archive\\ import\\ library*) # definitely import\n    win32_libid_type=\"x86 archive import\"\n    ;;\n  *ar\\ archive*) # could be an import, or static\n    # Keep the egrep pattern in sync with the one in _LT_CHECK_MAGIC_METHOD.\n    if eval $OBJDUMP -f $1 | $SED -e '10q' 2>/dev/null |\n       $EGREP 'file format (pei*-i386(.*architecture: i386)?|pe-arm-wince|pe-x86-64)' >/dev/null; then\n      case $nm_interface in\n      \"MS dumpbin\")\n\tif func_cygming_ms_implib_p \"$1\" ||\n\t   func_cygming_gnu_implib_p \"$1\"\n\tthen\n\t  win32_nmres=import\n\telse\n\t  win32_nmres=\n\tfi\n\t;;\n      *)\n\tfunc_to_tool_file \"$1\" func_convert_file_msys_to_w32\n\twin32_nmres=`eval $NM -f posix -A \\\"$func_to_tool_file_result\\\" |\n\t  $SED -n -e '\n\t    1,100{\n\t\t/ I /{\n\t\t    s|.*|import|\n\t\t    p\n\t\t    q\n\t\t}\n\t    }'`\n\t;;\n      esac\n      case $win32_nmres in\n      import*)  win32_libid_type=\"x86 archive import\";;\n      *)        win32_libid_type=\"x86 archive static\";;\n      esac\n    fi\n    ;;\n  *DLL*)\n    win32_libid_type=\"x86 DLL\"\n    ;;\n  *executable*) # but shell scripts are \"executable\" too...\n    case $win32_fileres in\n    *MS\\ Windows\\ PE\\ Intel*)\n      win32_libid_type=\"x86 DLL\"\n      ;;\n    esac\n    ;;\n  esac\n  $ECHO \"$win32_libid_type\"\n}\n\n# func_cygming_dll_for_implib ARG\n#\n# Platform-specific function to extract the\n# name of the DLL associated with the specified\n# import library ARG.\n# Invoked by eval'ing the libtool variable\n#    $sharedlib_from_linklib_cmd\n# Result is available in the variable\n#    $sharedlib_from_linklib_result\nfunc_cygming_dll_for_implib ()\n{\n  $debug_cmd\n\n  sharedlib_from_linklib_result=`$DLLTOOL --identify-strict --identify \"$1\"`\n}\n\n# func_cygming_dll_for_implib_fallback_core SECTION_NAME LIBNAMEs\n#\n# The is the core of a fallback implementation of a\n# platform-specific function to extract the name of the\n# DLL associated with the specified import library LIBNAME.\n#\n# SECTION_NAME is either .idata$6 or .idata$7, depending\n# on the platform and compiler that created the implib.\n#\n# Echos the name of the DLL associated with the\n# specified import library.\nfunc_cygming_dll_for_implib_fallback_core ()\n{\n  $debug_cmd\n\n  match_literal=`$ECHO \"$1\" | $SED \"$sed_make_literal_regex\"`\n  $OBJDUMP -s --section \"$1\" \"$2\" 2>/dev/null |\n    $SED '/^Contents of section '\"$match_literal\"':/{\n      # Place marker at beginning of archive member dllname section\n      s/.*/====MARK====/\n      p\n      d\n    }\n    # These lines can sometimes be longer than 43 characters, but\n    # are always uninteresting\n    /:[\t ]*file format pe[i]\\{,1\\}-/d\n    /^In archive [^:]*:/d\n    # Ensure marker is printed\n    /^====MARK====/p\n    # Remove all lines with less than 43 characters\n    /^.\\{43\\}/!d\n    # From remaining lines, remove first 43 characters\n    s/^.\\{43\\}//' |\n    $SED -n '\n      # Join marker and all lines until next marker into a single line\n      /^====MARK====/ b para\n      H\n      $ b para\n      b\n      :para\n      x\n      s/\\n//g\n      # Remove the marker\n      s/^====MARK====//\n      # Remove trailing dots and whitespace\n      s/[\\. \\t]*$//\n      # Print\n      /./p' |\n    # we now have a list, one entry per line, of the stringified\n    # contents of the appropriate section of all members of the\n    # archive that possess that section. Heuristic: eliminate\n    # all those that have a first or second character that is\n    # a '.' (that is, objdump's representation of an unprintable\n    # character.) This should work for all archives with less than\n    # 0x302f exports -- but will fail for DLLs whose name actually\n    # begins with a literal '.' or a single character followed by\n    # a '.'.\n    #\n    # Of those that remain, print the first one.\n    $SED -e '/^\\./d;/^.\\./d;q'\n}\n\n# func_cygming_dll_for_implib_fallback ARG\n# Platform-specific function to extract the\n# name of the DLL associated with the specified\n# import library ARG.\n#\n# This fallback implementation is for use when $DLLTOOL\n# does not support the --identify-strict option.\n# Invoked by eval'ing the libtool variable\n#    $sharedlib_from_linklib_cmd\n# Result is available in the variable\n#    $sharedlib_from_linklib_result\nfunc_cygming_dll_for_implib_fallback ()\n{\n  $debug_cmd\n\n  if func_cygming_gnu_implib_p \"$1\"; then\n    # binutils import library\n    sharedlib_from_linklib_result=`func_cygming_dll_for_implib_fallback_core '.idata$7' \"$1\"`\n  elif func_cygming_ms_implib_p \"$1\"; then\n    # ms-generated import library\n    sharedlib_from_linklib_result=`func_cygming_dll_for_implib_fallback_core '.idata$6' \"$1\"`\n  else\n    # unknown\n    sharedlib_from_linklib_result=\n  fi\n}\n\n\n# func_extract_an_archive dir oldlib\nfunc_extract_an_archive ()\n{\n    $debug_cmd\n\n    f_ex_an_ar_dir=$1; shift\n    f_ex_an_ar_oldlib=$1\n    if test yes = \"$lock_old_archive_extraction\"; then\n      lockfile=$f_ex_an_ar_oldlib.lock\n      until $opt_dry_run || ln \"$progpath\" \"$lockfile\" 2>/dev/null; do\n\tfunc_echo \"Waiting for $lockfile to be removed\"\n\tsleep 2\n      done\n    fi\n    func_show_eval \"(cd \\$f_ex_an_ar_dir && $AR x \\\"\\$f_ex_an_ar_oldlib\\\")\" \\\n\t\t   'stat=$?; rm -f \"$lockfile\"; exit $stat'\n    if test yes = \"$lock_old_archive_extraction\"; then\n      $opt_dry_run || rm -f \"$lockfile\"\n    fi\n    if ($AR t \"$f_ex_an_ar_oldlib\" | sort | sort -uc >/dev/null 2>&1); then\n     :\n    else\n      func_fatal_error \"object name conflicts in archive: $f_ex_an_ar_dir/$f_ex_an_ar_oldlib\"\n    fi\n}\n\n\n# func_extract_archives gentop oldlib ...\nfunc_extract_archives ()\n{\n    $debug_cmd\n\n    my_gentop=$1; shift\n    my_oldlibs=${1+\"$@\"}\n    my_oldobjs=\n    my_xlib=\n    my_xabs=\n    my_xdir=\n\n    for my_xlib in $my_oldlibs; do\n      # Extract the objects.\n      case $my_xlib in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) my_xabs=$my_xlib ;;\n\t*) my_xabs=`pwd`\"/$my_xlib\" ;;\n      esac\n      func_basename \"$my_xlib\"\n      my_xlib=$func_basename_result\n      my_xlib_u=$my_xlib\n      while :; do\n        case \" $extracted_archives \" in\n\t*\" $my_xlib_u \"*)\n\t  func_arith $extracted_serial + 1\n\t  extracted_serial=$func_arith_result\n\t  my_xlib_u=lt$extracted_serial-$my_xlib ;;\n\t*) break ;;\n\tesac\n      done\n      extracted_archives=\"$extracted_archives $my_xlib_u\"\n      my_xdir=$my_gentop/$my_xlib_u\n\n      func_mkdir_p \"$my_xdir\"\n\n      case $host in\n      *-darwin*)\n\tfunc_verbose \"Extracting $my_xabs\"\n\t# Do not bother doing anything if just a dry run\n\t$opt_dry_run || {\n\t  darwin_orig_dir=`pwd`\n\t  cd $my_xdir || exit $?\n\t  darwin_archive=$my_xabs\n\t  darwin_curdir=`pwd`\n\t  func_basename \"$darwin_archive\"\n\t  darwin_base_archive=$func_basename_result\n\t  darwin_arches=`$LIPO -info \"$darwin_archive\" 2>/dev/null | $GREP Architectures 2>/dev/null || true`\n\t  if test -n \"$darwin_arches\"; then\n\t    darwin_arches=`$ECHO \"$darwin_arches\" | $SED -e 's/.*are://'`\n\t    darwin_arch=\n\t    func_verbose \"$darwin_base_archive has multiple architectures $darwin_arches\"\n\t    for darwin_arch in  $darwin_arches; do\n\t      func_mkdir_p \"unfat-$$/$darwin_base_archive-$darwin_arch\"\n\t      $LIPO -thin $darwin_arch -output \"unfat-$$/$darwin_base_archive-$darwin_arch/$darwin_base_archive\" \"$darwin_archive\"\n\t      cd \"unfat-$$/$darwin_base_archive-$darwin_arch\"\n\t      func_extract_an_archive \"`pwd`\" \"$darwin_base_archive\"\n\t      cd \"$darwin_curdir\"\n\t      $RM \"unfat-$$/$darwin_base_archive-$darwin_arch/$darwin_base_archive\"\n\t    done # $darwin_arches\n            ## Okay now we've a bunch of thin objects, gotta fatten them up :)\n\t    darwin_filelist=`find unfat-$$ -type f -name \\*.o -print -o -name \\*.lo -print | $SED -e \"$sed_basename\" | sort -u`\n\t    darwin_file=\n\t    darwin_files=\n\t    for darwin_file in $darwin_filelist; do\n\t      darwin_files=`find unfat-$$ -name $darwin_file -print | sort | $NL2SP`\n\t      $LIPO -create -output \"$darwin_file\" $darwin_files\n\t    done # $darwin_filelist\n\t    $RM -rf unfat-$$\n\t    cd \"$darwin_orig_dir\"\n\t  else\n\t    cd $darwin_orig_dir\n\t    func_extract_an_archive \"$my_xdir\" \"$my_xabs\"\n\t  fi # $darwin_arches\n\t} # !$opt_dry_run\n\t;;\n      *)\n        func_extract_an_archive \"$my_xdir\" \"$my_xabs\"\n\t;;\n      esac\n      my_oldobjs=\"$my_oldobjs \"`find $my_xdir -name \\*.$objext -print -o -name \\*.lo -print | sort | $NL2SP`\n    done\n\n    func_extract_archives_result=$my_oldobjs\n}\n\n\n# func_emit_wrapper [arg=no]\n#\n# Emit a libtool wrapper script on stdout.\n# Don't directly open a file because we may want to\n# incorporate the script contents within a cygwin/mingw\n# wrapper executable.  Must ONLY be called from within\n# func_mode_link because it depends on a number of variables\n# set therein.\n#\n# ARG is the value that the WRAPPER_SCRIPT_BELONGS_IN_OBJDIR\n# variable will take.  If 'yes', then the emitted script\n# will assume that the directory where it is stored is\n# the $objdir directory.  This is a cygwin/mingw-specific\n# behavior.\nfunc_emit_wrapper ()\n{\n\tfunc_emit_wrapper_arg1=${1-no}\n\n\t$ECHO \"\\\n#! $SHELL\n\n# $output - temporary wrapper script for $objdir/$outputname\n# Generated by $PROGRAM (GNU $PACKAGE) $VERSION\n#\n# The $output program cannot be directly executed until all the libtool\n# libraries that it depends on are installed.\n#\n# This wrapper script should never be moved out of the build directory.\n# If it is, it will not operate correctly.\n\n# Sed substitution that helps us do robust quoting.  It backslashifies\n# metacharacters that are still active within double-quoted strings.\nsed_quote_subst='$sed_quote_subst'\n\n# Be Bourne compatible\nif test -n \\\"\\${ZSH_VERSION+set}\\\" && (emulate sh) >/dev/null 2>&1; then\n  emulate sh\n  NULLCMD=:\n  # Zsh 3.x and 4.x performs word splitting on \\${1+\\\"\\$@\\\"}, which\n  # is contrary to our usage.  Disable this feature.\n  alias -g '\\${1+\\\"\\$@\\\"}'='\\\"\\$@\\\"'\n  setopt NO_GLOB_SUBST\nelse\n  case \\`(set -o) 2>/dev/null\\` in *posix*) set -o posix;; esac\nfi\nBIN_SH=xpg4; export BIN_SH # for Tru64\nDUALCASE=1; export DUALCASE # for MKS sh\n\n# The HP-UX ksh and POSIX shell print the target directory to stdout\n# if CDPATH is set.\n(unset CDPATH) >/dev/null 2>&1 && unset CDPATH\n\nrelink_command=\\\"$relink_command\\\"\n\n# This environment variable determines our operation mode.\nif test \\\"\\$libtool_install_magic\\\" = \\\"$magic\\\"; then\n  # install mode needs the following variables:\n  generated_by_libtool_version='$macro_version'\n  notinst_deplibs='$notinst_deplibs'\nelse\n  # When we are sourced in execute mode, \\$file and \\$ECHO are already set.\n  if test \\\"\\$libtool_execute_magic\\\" != \\\"$magic\\\"; then\n    file=\\\"\\$0\\\"\"\n\n    qECHO=`$ECHO \"$ECHO\" | $SED \"$sed_quote_subst\"`\n    $ECHO \"\\\n\n# A function that is used when there is no print builtin or printf.\nfunc_fallback_echo ()\n{\n  eval 'cat <<_LTECHO_EOF\n\\$1\n_LTECHO_EOF'\n}\n    ECHO=\\\"$qECHO\\\"\n  fi\n\n# Very basic option parsing. These options are (a) specific to\n# the libtool wrapper, (b) are identical between the wrapper\n# /script/ and the wrapper /executable/ that is used only on\n# windows platforms, and (c) all begin with the string \"--lt-\"\n# (application programs are unlikely to have options that match\n# this pattern).\n#\n# There are only two supported options: --lt-debug and\n# --lt-dump-script. There is, deliberately, no --lt-help.\n#\n# The first argument to this parsing function should be the\n# script's $0 value, followed by \"$@\".\nlt_option_debug=\nfunc_parse_lt_options ()\n{\n  lt_script_arg0=\\$0\n  shift\n  for lt_opt\n  do\n    case \\\"\\$lt_opt\\\" in\n    --lt-debug) lt_option_debug=1 ;;\n    --lt-dump-script)\n        lt_dump_D=\\`\\$ECHO \\\"X\\$lt_script_arg0\\\" | $SED -e 's/^X//' -e 's%/[^/]*$%%'\\`\n        test \\\"X\\$lt_dump_D\\\" = \\\"X\\$lt_script_arg0\\\" && lt_dump_D=.\n        lt_dump_F=\\`\\$ECHO \\\"X\\$lt_script_arg0\\\" | $SED -e 's/^X//' -e 's%^.*/%%'\\`\n        cat \\\"\\$lt_dump_D/\\$lt_dump_F\\\"\n        exit 0\n      ;;\n    --lt-*)\n        \\$ECHO \\\"Unrecognized --lt- option: '\\$lt_opt'\\\" 1>&2\n        exit 1\n      ;;\n    esac\n  done\n\n  # Print the debug banner immediately:\n  if test -n \\\"\\$lt_option_debug\\\"; then\n    echo \\\"$outputname:$output:\\$LINENO: libtool wrapper (GNU $PACKAGE) $VERSION\\\" 1>&2\n  fi\n}\n\n# Used when --lt-debug. Prints its arguments to stdout\n# (redirection is the responsibility of the caller)\nfunc_lt_dump_args ()\n{\n  lt_dump_args_N=1;\n  for lt_arg\n  do\n    \\$ECHO \\\"$outputname:$output:\\$LINENO: newargv[\\$lt_dump_args_N]: \\$lt_arg\\\"\n    lt_dump_args_N=\\`expr \\$lt_dump_args_N + 1\\`\n  done\n}\n\n# Core function for launching the target application\nfunc_exec_program_core ()\n{\n\"\n  case $host in\n  # Backslashes separate directories on plain windows\n  *-*-mingw | *-*-os2* | *-cegcc*)\n    $ECHO \"\\\n      if test -n \\\"\\$lt_option_debug\\\"; then\n        \\$ECHO \\\"$outputname:$output:\\$LINENO: newargv[0]: \\$progdir\\\\\\\\\\$program\\\" 1>&2\n        func_lt_dump_args \\${1+\\\"\\$@\\\"} 1>&2\n      fi\n      exec \\\"\\$progdir\\\\\\\\\\$program\\\" \\${1+\\\"\\$@\\\"}\n\"\n    ;;\n\n  *)\n    $ECHO \"\\\n      if test -n \\\"\\$lt_option_debug\\\"; then\n        \\$ECHO \\\"$outputname:$output:\\$LINENO: newargv[0]: \\$progdir/\\$program\\\" 1>&2\n        func_lt_dump_args \\${1+\\\"\\$@\\\"} 1>&2\n      fi\n      exec \\\"\\$progdir/\\$program\\\" \\${1+\\\"\\$@\\\"}\n\"\n    ;;\n  esac\n  $ECHO \"\\\n      \\$ECHO \\\"\\$0: cannot exec \\$program \\$*\\\" 1>&2\n      exit 1\n}\n\n# A function to encapsulate launching the target application\n# Strips options in the --lt-* namespace from \\$@ and\n# launches target application with the remaining arguments.\nfunc_exec_program ()\n{\n  case \\\" \\$* \\\" in\n  *\\\\ --lt-*)\n    for lt_wr_arg\n    do\n      case \\$lt_wr_arg in\n      --lt-*) ;;\n      *) set x \\\"\\$@\\\" \\\"\\$lt_wr_arg\\\"; shift;;\n      esac\n      shift\n    done ;;\n  esac\n  func_exec_program_core \\${1+\\\"\\$@\\\"}\n}\n\n  # Parse options\n  func_parse_lt_options \\\"\\$0\\\" \\${1+\\\"\\$@\\\"}\n\n  # Find the directory that this script lives in.\n  thisdir=\\`\\$ECHO \\\"\\$file\\\" | $SED 's%/[^/]*$%%'\\`\n  test \\\"x\\$thisdir\\\" = \\\"x\\$file\\\" && thisdir=.\n\n  # Follow symbolic links until we get to the real thisdir.\n  file=\\`ls -ld \\\"\\$file\\\" | $SED -n 's/.*-> //p'\\`\n  while test -n \\\"\\$file\\\"; do\n    destdir=\\`\\$ECHO \\\"\\$file\\\" | $SED 's%/[^/]*\\$%%'\\`\n\n    # If there was a directory component, then change thisdir.\n    if test \\\"x\\$destdir\\\" != \\\"x\\$file\\\"; then\n      case \\\"\\$destdir\\\" in\n      [\\\\\\\\/]* | [A-Za-z]:[\\\\\\\\/]*) thisdir=\\\"\\$destdir\\\" ;;\n      *) thisdir=\\\"\\$thisdir/\\$destdir\\\" ;;\n      esac\n    fi\n\n    file=\\`\\$ECHO \\\"\\$file\\\" | $SED 's%^.*/%%'\\`\n    file=\\`ls -ld \\\"\\$thisdir/\\$file\\\" | $SED -n 's/.*-> //p'\\`\n  done\n\n  # Usually 'no', except on cygwin/mingw when embedded into\n  # the cwrapper.\n  WRAPPER_SCRIPT_BELONGS_IN_OBJDIR=$func_emit_wrapper_arg1\n  if test \\\"\\$WRAPPER_SCRIPT_BELONGS_IN_OBJDIR\\\" = \\\"yes\\\"; then\n    # special case for '.'\n    if test \\\"\\$thisdir\\\" = \\\".\\\"; then\n      thisdir=\\`pwd\\`\n    fi\n    # remove .libs from thisdir\n    case \\\"\\$thisdir\\\" in\n    *[\\\\\\\\/]$objdir ) thisdir=\\`\\$ECHO \\\"\\$thisdir\\\" | $SED 's%[\\\\\\\\/][^\\\\\\\\/]*$%%'\\` ;;\n    $objdir )   thisdir=. ;;\n    esac\n  fi\n\n  # Try to get the absolute directory name.\n  absdir=\\`cd \\\"\\$thisdir\\\" && pwd\\`\n  test -n \\\"\\$absdir\\\" && thisdir=\\\"\\$absdir\\\"\n\"\n\n\tif test yes = \"$fast_install\"; then\n\t  $ECHO \"\\\n  program=lt-'$outputname'$exeext\n  progdir=\\\"\\$thisdir/$objdir\\\"\n\n  if test ! -f \\\"\\$progdir/\\$program\\\" ||\n     { file=\\`ls -1dt \\\"\\$progdir/\\$program\\\" \\\"\\$progdir/../\\$program\\\" 2>/dev/null | $SED 1q\\`; \\\\\n       test \\\"X\\$file\\\" != \\\"X\\$progdir/\\$program\\\"; }; then\n\n    file=\\\"\\$\\$-\\$program\\\"\n\n    if test ! -d \\\"\\$progdir\\\"; then\n      $MKDIR \\\"\\$progdir\\\"\n    else\n      $RM \\\"\\$progdir/\\$file\\\"\n    fi\"\n\n\t  $ECHO \"\\\n\n    # relink executable if necessary\n    if test -n \\\"\\$relink_command\\\"; then\n      if relink_command_output=\\`eval \\$relink_command 2>&1\\`; then :\n      else\n\t\\$ECHO \\\"\\$relink_command_output\\\" >&2\n\t$RM \\\"\\$progdir/\\$file\\\"\n\texit 1\n      fi\n    fi\n\n    $MV \\\"\\$progdir/\\$file\\\" \\\"\\$progdir/\\$program\\\" 2>/dev/null ||\n    { $RM \\\"\\$progdir/\\$program\\\";\n      $MV \\\"\\$progdir/\\$file\\\" \\\"\\$progdir/\\$program\\\"; }\n    $RM \\\"\\$progdir/\\$file\\\"\n  fi\"\n\telse\n\t  $ECHO \"\\\n  program='$outputname'\n  progdir=\\\"\\$thisdir/$objdir\\\"\n\"\n\tfi\n\n\t$ECHO \"\\\n\n  if test -f \\\"\\$progdir/\\$program\\\"; then\"\n\n\t# fixup the dll searchpath if we need to.\n\t#\n\t# Fix the DLL searchpath if we need to.  Do this before prepending\n\t# to shlibpath, because on Windows, both are PATH and uninstalled\n\t# libraries must come first.\n\tif test -n \"$dllsearchpath\"; then\n\t  $ECHO \"\\\n    # Add the dll search path components to the executable PATH\n    PATH=$dllsearchpath:\\$PATH\n\"\n\tfi\n\n\t# Export our shlibpath_var if we have one.\n\tif test yes = \"$shlibpath_overrides_runpath\" && test -n \"$shlibpath_var\" && test -n \"$temp_rpath\"; then\n\t  $ECHO \"\\\n    # Add our own library path to $shlibpath_var\n    $shlibpath_var=\\\"$temp_rpath\\$$shlibpath_var\\\"\n\n    # Some systems cannot cope with colon-terminated $shlibpath_var\n    # The second colon is a workaround for a bug in BeOS R4 sed\n    $shlibpath_var=\\`\\$ECHO \\\"\\$$shlibpath_var\\\" | $SED 's/::*\\$//'\\`\n\n    export $shlibpath_var\n\"\n\tfi\n\n\t$ECHO \"\\\n    if test \\\"\\$libtool_execute_magic\\\" != \\\"$magic\\\"; then\n      # Run the actual program with our arguments.\n      func_exec_program \\${1+\\\"\\$@\\\"}\n    fi\n  else\n    # The program doesn't exist.\n    \\$ECHO \\\"\\$0: error: '\\$progdir/\\$program' does not exist\\\" 1>&2\n    \\$ECHO \\\"This script is just a wrapper for \\$program.\\\" 1>&2\n    \\$ECHO \\\"See the $PACKAGE documentation for more information.\\\" 1>&2\n    exit 1\n  fi\nfi\\\n\"\n}\n\n\n# func_emit_cwrapperexe_src\n# emit the source code for a wrapper executable on stdout\n# Must ONLY be called from within func_mode_link because\n# it depends on a number of variable set therein.\nfunc_emit_cwrapperexe_src ()\n{\n\tcat <<EOF\n\n/* $cwrappersource - temporary wrapper executable for $objdir/$outputname\n   Generated by $PROGRAM (GNU $PACKAGE) $VERSION\n\n   The $output program cannot be directly executed until all the libtool\n   libraries that it depends on are installed.\n\n   This wrapper executable should never be moved out of the build directory.\n   If it is, it will not operate correctly.\n*/\nEOF\n\t    cat <<\"EOF\"\n#ifdef _MSC_VER\n# define _CRT_SECURE_NO_DEPRECATE 1\n#endif\n#include <stdio.h>\n#include <stdlib.h>\n#ifdef _MSC_VER\n# include <direct.h>\n# include <process.h>\n# include <io.h>\n#else\n# include <unistd.h>\n# include <stdint.h>\n# ifdef __CYGWIN__\n#  include <io.h>\n# endif\n#endif\n#include <malloc.h>\n#include <stdarg.h>\n#include <assert.h>\n#include <string.h>\n#include <ctype.h>\n#include <errno.h>\n#include <fcntl.h>\n#include <sys/stat.h>\n\n#define STREQ(s1, s2) (strcmp ((s1), (s2)) == 0)\n\n/* declarations of non-ANSI functions */\n#if defined __MINGW32__\n# ifdef __STRICT_ANSI__\nint _putenv (const char *);\n# endif\n#elif defined __CYGWIN__\n# ifdef __STRICT_ANSI__\nchar *realpath (const char *, char *);\nint putenv (char *);\nint setenv (const char *, const char *, int);\n# endif\n/* #elif defined other_platform || defined ... */\n#endif\n\n/* portability defines, excluding path handling macros */\n#if defined _MSC_VER\n# define setmode _setmode\n# define stat    _stat\n# define chmod   _chmod\n# define getcwd  _getcwd\n# define putenv  _putenv\n# define S_IXUSR _S_IEXEC\n#elif defined __MINGW32__\n# define setmode _setmode\n# define stat    _stat\n# define chmod   _chmod\n# define getcwd  _getcwd\n# define putenv  _putenv\n#elif defined __CYGWIN__\n# define HAVE_SETENV\n# define FOPEN_WB \"wb\"\n/* #elif defined other platforms ... */\n#endif\n\n#if defined PATH_MAX\n# define LT_PATHMAX PATH_MAX\n#elif defined MAXPATHLEN\n# define LT_PATHMAX MAXPATHLEN\n#else\n# define LT_PATHMAX 1024\n#endif\n\n#ifndef S_IXOTH\n# define S_IXOTH 0\n#endif\n#ifndef S_IXGRP\n# define S_IXGRP 0\n#endif\n\n/* path handling portability macros */\n#ifndef DIR_SEPARATOR\n# define DIR_SEPARATOR '/'\n# define PATH_SEPARATOR ':'\n#endif\n\n#if defined _WIN32 || defined __MSDOS__ || defined __DJGPP__ || \\\n  defined __OS2__\n# define HAVE_DOS_BASED_FILE_SYSTEM\n# define FOPEN_WB \"wb\"\n# ifndef DIR_SEPARATOR_2\n#  define DIR_SEPARATOR_2 '\\\\'\n# endif\n# ifndef PATH_SEPARATOR_2\n#  define PATH_SEPARATOR_2 ';'\n# endif\n#endif\n\n#ifndef DIR_SEPARATOR_2\n# define IS_DIR_SEPARATOR(ch) ((ch) == DIR_SEPARATOR)\n#else /* DIR_SEPARATOR_2 */\n# define IS_DIR_SEPARATOR(ch) \\\n\t(((ch) == DIR_SEPARATOR) || ((ch) == DIR_SEPARATOR_2))\n#endif /* DIR_SEPARATOR_2 */\n\n#ifndef PATH_SEPARATOR_2\n# define IS_PATH_SEPARATOR(ch) ((ch) == PATH_SEPARATOR)\n#else /* PATH_SEPARATOR_2 */\n# define IS_PATH_SEPARATOR(ch) ((ch) == PATH_SEPARATOR_2)\n#endif /* PATH_SEPARATOR_2 */\n\n#ifndef FOPEN_WB\n# define FOPEN_WB \"w\"\n#endif\n#ifndef _O_BINARY\n# define _O_BINARY 0\n#endif\n\n#define XMALLOC(type, num)      ((type *) xmalloc ((num) * sizeof(type)))\n#define XFREE(stale) do { \\\n  if (stale) { free (stale); stale = 0; } \\\n} while (0)\n\n#if defined LT_DEBUGWRAPPER\nstatic int lt_debug = 1;\n#else\nstatic int lt_debug = 0;\n#endif\n\nconst char *program_name = \"libtool-wrapper\"; /* in case xstrdup fails */\n\nvoid *xmalloc (size_t num);\nchar *xstrdup (const char *string);\nconst char *base_name (const char *name);\nchar *find_executable (const char *wrapper);\nchar *chase_symlinks (const char *pathspec);\nint make_executable (const char *path);\nint check_executable (const char *path);\nchar *strendzap (char *str, const char *pat);\nvoid lt_debugprintf (const char *file, int line, const char *fmt, ...);\nvoid lt_fatal (const char *file, int line, const char *message, ...);\nstatic const char *nonnull (const char *s);\nstatic const char *nonempty (const char *s);\nvoid lt_setenv (const char *name, const char *value);\nchar *lt_extend_str (const char *orig_value, const char *add, int to_end);\nvoid lt_update_exe_path (const char *name, const char *value);\nvoid lt_update_lib_path (const char *name, const char *value);\nchar **prepare_spawn (char **argv);\nvoid lt_dump_script (FILE *f);\nEOF\n\n\t    cat <<EOF\n#if __GNUC__ < 4 || (__GNUC__ == 4 && __GNUC_MINOR__ < 5)\n# define externally_visible volatile\n#else\n# define externally_visible __attribute__((externally_visible)) volatile\n#endif\nexternally_visible const char * MAGIC_EXE = \"$magic_exe\";\nconst char * LIB_PATH_VARNAME = \"$shlibpath_var\";\nEOF\n\n\t    if test yes = \"$shlibpath_overrides_runpath\" && test -n \"$shlibpath_var\" && test -n \"$temp_rpath\"; then\n              func_to_host_path \"$temp_rpath\"\n\t      cat <<EOF\nconst char * LIB_PATH_VALUE   = \"$func_to_host_path_result\";\nEOF\n\t    else\n\t      cat <<\"EOF\"\nconst char * LIB_PATH_VALUE   = \"\";\nEOF\n\t    fi\n\n\t    if test -n \"$dllsearchpath\"; then\n              func_to_host_path \"$dllsearchpath:\"\n\t      cat <<EOF\nconst char * EXE_PATH_VARNAME = \"PATH\";\nconst char * EXE_PATH_VALUE   = \"$func_to_host_path_result\";\nEOF\n\t    else\n\t      cat <<\"EOF\"\nconst char * EXE_PATH_VARNAME = \"\";\nconst char * EXE_PATH_VALUE   = \"\";\nEOF\n\t    fi\n\n\t    if test yes = \"$fast_install\"; then\n\t      cat <<EOF\nconst char * TARGET_PROGRAM_NAME = \"lt-$outputname\"; /* hopefully, no .exe */\nEOF\n\t    else\n\t      cat <<EOF\nconst char * TARGET_PROGRAM_NAME = \"$outputname\"; /* hopefully, no .exe */\nEOF\n\t    fi\n\n\n\t    cat <<\"EOF\"\n\n#define LTWRAPPER_OPTION_PREFIX         \"--lt-\"\n\nstatic const char *ltwrapper_option_prefix = LTWRAPPER_OPTION_PREFIX;\nstatic const char *dumpscript_opt       = LTWRAPPER_OPTION_PREFIX \"dump-script\";\nstatic const char *debug_opt            = LTWRAPPER_OPTION_PREFIX \"debug\";\n\nint\nmain (int argc, char *argv[])\n{\n  char **newargz;\n  int  newargc;\n  char *tmp_pathspec;\n  char *actual_cwrapper_path;\n  char *actual_cwrapper_name;\n  char *target_name;\n  char *lt_argv_zero;\n  int rval = 127;\n\n  int i;\n\n  program_name = (char *) xstrdup (base_name (argv[0]));\n  newargz = XMALLOC (char *, (size_t) argc + 1);\n\n  /* very simple arg parsing; don't want to rely on getopt\n   * also, copy all non cwrapper options to newargz, except\n   * argz[0], which is handled differently\n   */\n  newargc=0;\n  for (i = 1; i < argc; i++)\n    {\n      if (STREQ (argv[i], dumpscript_opt))\n\t{\nEOF\n\t    case $host in\n\t      *mingw* | *cygwin* )\n\t\t# make stdout use \"unix\" line endings\n\t\techo \"          setmode(1,_O_BINARY);\"\n\t\t;;\n\t      esac\n\n\t    cat <<\"EOF\"\n\t  lt_dump_script (stdout);\n\t  return 0;\n\t}\n      if (STREQ (argv[i], debug_opt))\n\t{\n          lt_debug = 1;\n          continue;\n\t}\n      if (STREQ (argv[i], ltwrapper_option_prefix))\n        {\n          /* however, if there is an option in the LTWRAPPER_OPTION_PREFIX\n             namespace, but it is not one of the ones we know about and\n             have already dealt with, above (inluding dump-script), then\n             report an error. Otherwise, targets might begin to believe\n             they are allowed to use options in the LTWRAPPER_OPTION_PREFIX\n             namespace. The first time any user complains about this, we'll\n             need to make LTWRAPPER_OPTION_PREFIX a configure-time option\n             or a configure.ac-settable value.\n           */\n          lt_fatal (__FILE__, __LINE__,\n\t\t    \"unrecognized %s option: '%s'\",\n                    ltwrapper_option_prefix, argv[i]);\n        }\n      /* otherwise ... */\n      newargz[++newargc] = xstrdup (argv[i]);\n    }\n  newargz[++newargc] = NULL;\n\nEOF\n\t    cat <<EOF\n  /* The GNU banner must be the first non-error debug message */\n  lt_debugprintf (__FILE__, __LINE__, \"libtool wrapper (GNU $PACKAGE) $VERSION\\n\");\nEOF\n\t    cat <<\"EOF\"\n  lt_debugprintf (__FILE__, __LINE__, \"(main) argv[0]: %s\\n\", argv[0]);\n  lt_debugprintf (__FILE__, __LINE__, \"(main) program_name: %s\\n\", program_name);\n\n  tmp_pathspec = find_executable (argv[0]);\n  if (tmp_pathspec == NULL)\n    lt_fatal (__FILE__, __LINE__, \"couldn't find %s\", argv[0]);\n  lt_debugprintf (__FILE__, __LINE__,\n                  \"(main) found exe (before symlink chase) at: %s\\n\",\n\t\t  tmp_pathspec);\n\n  actual_cwrapper_path = chase_symlinks (tmp_pathspec);\n  lt_debugprintf (__FILE__, __LINE__,\n                  \"(main) found exe (after symlink chase) at: %s\\n\",\n\t\t  actual_cwrapper_path);\n  XFREE (tmp_pathspec);\n\n  actual_cwrapper_name = xstrdup (base_name (actual_cwrapper_path));\n  strendzap (actual_cwrapper_path, actual_cwrapper_name);\n\n  /* wrapper name transforms */\n  strendzap (actual_cwrapper_name, \".exe\");\n  tmp_pathspec = lt_extend_str (actual_cwrapper_name, \".exe\", 1);\n  XFREE (actual_cwrapper_name);\n  actual_cwrapper_name = tmp_pathspec;\n  tmp_pathspec = 0;\n\n  /* target_name transforms -- use actual target program name; might have lt- prefix */\n  target_name = xstrdup (base_name (TARGET_PROGRAM_NAME));\n  strendzap (target_name, \".exe\");\n  tmp_pathspec = lt_extend_str (target_name, \".exe\", 1);\n  XFREE (target_name);\n  target_name = tmp_pathspec;\n  tmp_pathspec = 0;\n\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(main) libtool target name: %s\\n\",\n\t\t  target_name);\nEOF\n\n\t    cat <<EOF\n  newargz[0] =\n    XMALLOC (char, (strlen (actual_cwrapper_path) +\n\t\t    strlen (\"$objdir\") + 1 + strlen (actual_cwrapper_name) + 1));\n  strcpy (newargz[0], actual_cwrapper_path);\n  strcat (newargz[0], \"$objdir\");\n  strcat (newargz[0], \"/\");\nEOF\n\n\t    cat <<\"EOF\"\n  /* stop here, and copy so we don't have to do this twice */\n  tmp_pathspec = xstrdup (newargz[0]);\n\n  /* do NOT want the lt- prefix here, so use actual_cwrapper_name */\n  strcat (newargz[0], actual_cwrapper_name);\n\n  /* DO want the lt- prefix here if it exists, so use target_name */\n  lt_argv_zero = lt_extend_str (tmp_pathspec, target_name, 1);\n  XFREE (tmp_pathspec);\n  tmp_pathspec = NULL;\nEOF\n\n\t    case $host_os in\n\t      mingw*)\n\t    cat <<\"EOF\"\n  {\n    char* p;\n    while ((p = strchr (newargz[0], '\\\\')) != NULL)\n      {\n\t*p = '/';\n      }\n    while ((p = strchr (lt_argv_zero, '\\\\')) != NULL)\n      {\n\t*p = '/';\n      }\n  }\nEOF\n\t    ;;\n\t    esac\n\n\t    cat <<\"EOF\"\n  XFREE (target_name);\n  XFREE (actual_cwrapper_path);\n  XFREE (actual_cwrapper_name);\n\n  lt_setenv (\"BIN_SH\", \"xpg4\"); /* for Tru64 */\n  lt_setenv (\"DUALCASE\", \"1\");  /* for MSK sh */\n  /* Update the DLL searchpath.  EXE_PATH_VALUE ($dllsearchpath) must\n     be prepended before (that is, appear after) LIB_PATH_VALUE ($temp_rpath)\n     because on Windows, both *_VARNAMEs are PATH but uninstalled\n     libraries must come first. */\n  lt_update_exe_path (EXE_PATH_VARNAME, EXE_PATH_VALUE);\n  lt_update_lib_path (LIB_PATH_VARNAME, LIB_PATH_VALUE);\n\n  lt_debugprintf (__FILE__, __LINE__, \"(main) lt_argv_zero: %s\\n\",\n\t\t  nonnull (lt_argv_zero));\n  for (i = 0; i < newargc; i++)\n    {\n      lt_debugprintf (__FILE__, __LINE__, \"(main) newargz[%d]: %s\\n\",\n\t\t      i, nonnull (newargz[i]));\n    }\n\nEOF\n\n\t    case $host_os in\n\t      mingw*)\n\t\tcat <<\"EOF\"\n  /* execv doesn't actually work on mingw as expected on unix */\n  newargz = prepare_spawn (newargz);\n  rval = (int) _spawnv (_P_WAIT, lt_argv_zero, (const char * const *) newargz);\n  if (rval == -1)\n    {\n      /* failed to start process */\n      lt_debugprintf (__FILE__, __LINE__,\n\t\t      \"(main) failed to launch target \\\"%s\\\": %s\\n\",\n\t\t      lt_argv_zero, nonnull (strerror (errno)));\n      return 127;\n    }\n  return rval;\nEOF\n\t\t;;\n\t      *)\n\t\tcat <<\"EOF\"\n  execv (lt_argv_zero, newargz);\n  return rval; /* =127, but avoids unused variable warning */\nEOF\n\t\t;;\n\t    esac\n\n\t    cat <<\"EOF\"\n}\n\nvoid *\nxmalloc (size_t num)\n{\n  void *p = (void *) malloc (num);\n  if (!p)\n    lt_fatal (__FILE__, __LINE__, \"memory exhausted\");\n\n  return p;\n}\n\nchar *\nxstrdup (const char *string)\n{\n  return string ? strcpy ((char *) xmalloc (strlen (string) + 1),\n\t\t\t  string) : NULL;\n}\n\nconst char *\nbase_name (const char *name)\n{\n  const char *base;\n\n#if defined HAVE_DOS_BASED_FILE_SYSTEM\n  /* Skip over the disk name in MSDOS pathnames. */\n  if (isalpha ((unsigned char) name[0]) && name[1] == ':')\n    name += 2;\n#endif\n\n  for (base = name; *name; name++)\n    if (IS_DIR_SEPARATOR (*name))\n      base = name + 1;\n  return base;\n}\n\nint\ncheck_executable (const char *path)\n{\n  struct stat st;\n\n  lt_debugprintf (__FILE__, __LINE__, \"(check_executable): %s\\n\",\n                  nonempty (path));\n  if ((!path) || (!*path))\n    return 0;\n\n  if ((stat (path, &st) >= 0)\n      && (st.st_mode & (S_IXUSR | S_IXGRP | S_IXOTH)))\n    return 1;\n  else\n    return 0;\n}\n\nint\nmake_executable (const char *path)\n{\n  int rval = 0;\n  struct stat st;\n\n  lt_debugprintf (__FILE__, __LINE__, \"(make_executable): %s\\n\",\n                  nonempty (path));\n  if ((!path) || (!*path))\n    return 0;\n\n  if (stat (path, &st) >= 0)\n    {\n      rval = chmod (path, st.st_mode | S_IXOTH | S_IXGRP | S_IXUSR);\n    }\n  return rval;\n}\n\n/* Searches for the full path of the wrapper.  Returns\n   newly allocated full path name if found, NULL otherwise\n   Does not chase symlinks, even on platforms that support them.\n*/\nchar *\nfind_executable (const char *wrapper)\n{\n  int has_slash = 0;\n  const char *p;\n  const char *p_next;\n  /* static buffer for getcwd */\n  char tmp[LT_PATHMAX + 1];\n  size_t tmp_len;\n  char *concat_name;\n\n  lt_debugprintf (__FILE__, __LINE__, \"(find_executable): %s\\n\",\n                  nonempty (wrapper));\n\n  if ((wrapper == NULL) || (*wrapper == '\\0'))\n    return NULL;\n\n  /* Absolute path? */\n#if defined HAVE_DOS_BASED_FILE_SYSTEM\n  if (isalpha ((unsigned char) wrapper[0]) && wrapper[1] == ':')\n    {\n      concat_name = xstrdup (wrapper);\n      if (check_executable (concat_name))\n\treturn concat_name;\n      XFREE (concat_name);\n    }\n  else\n    {\n#endif\n      if (IS_DIR_SEPARATOR (wrapper[0]))\n\t{\n\t  concat_name = xstrdup (wrapper);\n\t  if (check_executable (concat_name))\n\t    return concat_name;\n\t  XFREE (concat_name);\n\t}\n#if defined HAVE_DOS_BASED_FILE_SYSTEM\n    }\n#endif\n\n  for (p = wrapper; *p; p++)\n    if (*p == '/')\n      {\n\thas_slash = 1;\n\tbreak;\n      }\n  if (!has_slash)\n    {\n      /* no slashes; search PATH */\n      const char *path = getenv (\"PATH\");\n      if (path != NULL)\n\t{\n\t  for (p = path; *p; p = p_next)\n\t    {\n\t      const char *q;\n\t      size_t p_len;\n\t      for (q = p; *q; q++)\n\t\tif (IS_PATH_SEPARATOR (*q))\n\t\t  break;\n\t      p_len = (size_t) (q - p);\n\t      p_next = (*q == '\\0' ? q : q + 1);\n\t      if (p_len == 0)\n\t\t{\n\t\t  /* empty path: current directory */\n\t\t  if (getcwd (tmp, LT_PATHMAX) == NULL)\n\t\t    lt_fatal (__FILE__, __LINE__, \"getcwd failed: %s\",\n                              nonnull (strerror (errno)));\n\t\t  tmp_len = strlen (tmp);\n\t\t  concat_name =\n\t\t    XMALLOC (char, tmp_len + 1 + strlen (wrapper) + 1);\n\t\t  memcpy (concat_name, tmp, tmp_len);\n\t\t  concat_name[tmp_len] = '/';\n\t\t  strcpy (concat_name + tmp_len + 1, wrapper);\n\t\t}\n\t      else\n\t\t{\n\t\t  concat_name =\n\t\t    XMALLOC (char, p_len + 1 + strlen (wrapper) + 1);\n\t\t  memcpy (concat_name, p, p_len);\n\t\t  concat_name[p_len] = '/';\n\t\t  strcpy (concat_name + p_len + 1, wrapper);\n\t\t}\n\t      if (check_executable (concat_name))\n\t\treturn concat_name;\n\t      XFREE (concat_name);\n\t    }\n\t}\n      /* not found in PATH; assume curdir */\n    }\n  /* Relative path | not found in path: prepend cwd */\n  if (getcwd (tmp, LT_PATHMAX) == NULL)\n    lt_fatal (__FILE__, __LINE__, \"getcwd failed: %s\",\n              nonnull (strerror (errno)));\n  tmp_len = strlen (tmp);\n  concat_name = XMALLOC (char, tmp_len + 1 + strlen (wrapper) + 1);\n  memcpy (concat_name, tmp, tmp_len);\n  concat_name[tmp_len] = '/';\n  strcpy (concat_name + tmp_len + 1, wrapper);\n\n  if (check_executable (concat_name))\n    return concat_name;\n  XFREE (concat_name);\n  return NULL;\n}\n\nchar *\nchase_symlinks (const char *pathspec)\n{\n#ifndef S_ISLNK\n  return xstrdup (pathspec);\n#else\n  char buf[LT_PATHMAX];\n  struct stat s;\n  char *tmp_pathspec = xstrdup (pathspec);\n  char *p;\n  int has_symlinks = 0;\n  while (strlen (tmp_pathspec) && !has_symlinks)\n    {\n      lt_debugprintf (__FILE__, __LINE__,\n\t\t      \"checking path component for symlinks: %s\\n\",\n\t\t      tmp_pathspec);\n      if (lstat (tmp_pathspec, &s) == 0)\n\t{\n\t  if (S_ISLNK (s.st_mode) != 0)\n\t    {\n\t      has_symlinks = 1;\n\t      break;\n\t    }\n\n\t  /* search backwards for last DIR_SEPARATOR */\n\t  p = tmp_pathspec + strlen (tmp_pathspec) - 1;\n\t  while ((p > tmp_pathspec) && (!IS_DIR_SEPARATOR (*p)))\n\t    p--;\n\t  if ((p == tmp_pathspec) && (!IS_DIR_SEPARATOR (*p)))\n\t    {\n\t      /* no more DIR_SEPARATORS left */\n\t      break;\n\t    }\n\t  *p = '\\0';\n\t}\n      else\n\t{\n\t  lt_fatal (__FILE__, __LINE__,\n\t\t    \"error accessing file \\\"%s\\\": %s\",\n\t\t    tmp_pathspec, nonnull (strerror (errno)));\n\t}\n    }\n  XFREE (tmp_pathspec);\n\n  if (!has_symlinks)\n    {\n      return xstrdup (pathspec);\n    }\n\n  tmp_pathspec = realpath (pathspec, buf);\n  if (tmp_pathspec == 0)\n    {\n      lt_fatal (__FILE__, __LINE__,\n\t\t\"could not follow symlinks for %s\", pathspec);\n    }\n  return xstrdup (tmp_pathspec);\n#endif\n}\n\nchar *\nstrendzap (char *str, const char *pat)\n{\n  size_t len, patlen;\n\n  assert (str != NULL);\n  assert (pat != NULL);\n\n  len = strlen (str);\n  patlen = strlen (pat);\n\n  if (patlen <= len)\n    {\n      str += len - patlen;\n      if (STREQ (str, pat))\n\t*str = '\\0';\n    }\n  return str;\n}\n\nvoid\nlt_debugprintf (const char *file, int line, const char *fmt, ...)\n{\n  va_list args;\n  if (lt_debug)\n    {\n      (void) fprintf (stderr, \"%s:%s:%d: \", program_name, file, line);\n      va_start (args, fmt);\n      (void) vfprintf (stderr, fmt, args);\n      va_end (args);\n    }\n}\n\nstatic void\nlt_error_core (int exit_status, const char *file,\n\t       int line, const char *mode,\n\t       const char *message, va_list ap)\n{\n  fprintf (stderr, \"%s:%s:%d: %s: \", program_name, file, line, mode);\n  vfprintf (stderr, message, ap);\n  fprintf (stderr, \".\\n\");\n\n  if (exit_status >= 0)\n    exit (exit_status);\n}\n\nvoid\nlt_fatal (const char *file, int line, const char *message, ...)\n{\n  va_list ap;\n  va_start (ap, message);\n  lt_error_core (EXIT_FAILURE, file, line, \"FATAL\", message, ap);\n  va_end (ap);\n}\n\nstatic const char *\nnonnull (const char *s)\n{\n  return s ? s : \"(null)\";\n}\n\nstatic const char *\nnonempty (const char *s)\n{\n  return (s && !*s) ? \"(empty)\" : nonnull (s);\n}\n\nvoid\nlt_setenv (const char *name, const char *value)\n{\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(lt_setenv) setting '%s' to '%s'\\n\",\n                  nonnull (name), nonnull (value));\n  {\n#ifdef HAVE_SETENV\n    /* always make a copy, for consistency with !HAVE_SETENV */\n    char *str = xstrdup (value);\n    setenv (name, str, 1);\n#else\n    size_t len = strlen (name) + 1 + strlen (value) + 1;\n    char *str = XMALLOC (char, len);\n    sprintf (str, \"%s=%s\", name, value);\n    if (putenv (str) != EXIT_SUCCESS)\n      {\n        XFREE (str);\n      }\n#endif\n  }\n}\n\nchar *\nlt_extend_str (const char *orig_value, const char *add, int to_end)\n{\n  char *new_value;\n  if (orig_value && *orig_value)\n    {\n      size_t orig_value_len = strlen (orig_value);\n      size_t add_len = strlen (add);\n      new_value = XMALLOC (char, add_len + orig_value_len + 1);\n      if (to_end)\n        {\n          strcpy (new_value, orig_value);\n          strcpy (new_value + orig_value_len, add);\n        }\n      else\n        {\n          strcpy (new_value, add);\n          strcpy (new_value + add_len, orig_value);\n        }\n    }\n  else\n    {\n      new_value = xstrdup (add);\n    }\n  return new_value;\n}\n\nvoid\nlt_update_exe_path (const char *name, const char *value)\n{\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(lt_update_exe_path) modifying '%s' by prepending '%s'\\n\",\n                  nonnull (name), nonnull (value));\n\n  if (name && *name && value && *value)\n    {\n      char *new_value = lt_extend_str (getenv (name), value, 0);\n      /* some systems can't cope with a ':'-terminated path #' */\n      size_t len = strlen (new_value);\n      while ((len > 0) && IS_PATH_SEPARATOR (new_value[len-1]))\n        {\n          new_value[--len] = '\\0';\n        }\n      lt_setenv (name, new_value);\n      XFREE (new_value);\n    }\n}\n\nvoid\nlt_update_lib_path (const char *name, const char *value)\n{\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(lt_update_lib_path) modifying '%s' by prepending '%s'\\n\",\n                  nonnull (name), nonnull (value));\n\n  if (name && *name && value && *value)\n    {\n      char *new_value = lt_extend_str (getenv (name), value, 0);\n      lt_setenv (name, new_value);\n      XFREE (new_value);\n    }\n}\n\nEOF\n\t    case $host_os in\n\t      mingw*)\n\t\tcat <<\"EOF\"\n\n/* Prepares an argument vector before calling spawn().\n   Note that spawn() does not by itself call the command interpreter\n     (getenv (\"COMSPEC\") != NULL ? getenv (\"COMSPEC\") :\n      ({ OSVERSIONINFO v; v.dwOSVersionInfoSize = sizeof(OSVERSIONINFO);\n         GetVersionEx(&v);\n         v.dwPlatformId == VER_PLATFORM_WIN32_NT;\n      }) ? \"cmd.exe\" : \"command.com\").\n   Instead it simply concatenates the arguments, separated by ' ', and calls\n   CreateProcess().  We must quote the arguments since Win32 CreateProcess()\n   interprets characters like ' ', '\\t', '\\\\', '\"' (but not '<' and '>') in a\n   special way:\n   - Space and tab are interpreted as delimiters. They are not treated as\n     delimiters if they are surrounded by double quotes: \"...\".\n   - Unescaped double quotes are removed from the input. Their only effect is\n     that within double quotes, space and tab are treated like normal\n     characters.\n   - Backslashes not followed by double quotes are not special.\n   - But 2*n+1 backslashes followed by a double quote become\n     n backslashes followed by a double quote (n >= 0):\n       \\\" -> \"\n       \\\\\\\" -> \\\"\n       \\\\\\\\\\\" -> \\\\\"\n */\n#define SHELL_SPECIAL_CHARS \"\\\"\\\\ \\001\\002\\003\\004\\005\\006\\007\\010\\011\\012\\013\\014\\015\\016\\017\\020\\021\\022\\023\\024\\025\\026\\027\\030\\031\\032\\033\\034\\035\\036\\037\"\n#define SHELL_SPACE_CHARS \" \\001\\002\\003\\004\\005\\006\\007\\010\\011\\012\\013\\014\\015\\016\\017\\020\\021\\022\\023\\024\\025\\026\\027\\030\\031\\032\\033\\034\\035\\036\\037\"\nchar **\nprepare_spawn (char **argv)\n{\n  size_t argc;\n  char **new_argv;\n  size_t i;\n\n  /* Count number of arguments.  */\n  for (argc = 0; argv[argc] != NULL; argc++)\n    ;\n\n  /* Allocate new argument vector.  */\n  new_argv = XMALLOC (char *, argc + 1);\n\n  /* Put quoted arguments into the new argument vector.  */\n  for (i = 0; i < argc; i++)\n    {\n      const char *string = argv[i];\n\n      if (string[0] == '\\0')\n\tnew_argv[i] = xstrdup (\"\\\"\\\"\");\n      else if (strpbrk (string, SHELL_SPECIAL_CHARS) != NULL)\n\t{\n\t  int quote_around = (strpbrk (string, SHELL_SPACE_CHARS) != NULL);\n\t  size_t length;\n\t  unsigned int backslashes;\n\t  const char *s;\n\t  char *quoted_string;\n\t  char *p;\n\n\t  length = 0;\n\t  backslashes = 0;\n\t  if (quote_around)\n\t    length++;\n\t  for (s = string; *s != '\\0'; s++)\n\t    {\n\t      char c = *s;\n\t      if (c == '\"')\n\t\tlength += backslashes + 1;\n\t      length++;\n\t      if (c == '\\\\')\n\t\tbackslashes++;\n\t      else\n\t\tbackslashes = 0;\n\t    }\n\t  if (quote_around)\n\t    length += backslashes + 1;\n\n\t  quoted_string = XMALLOC (char, length + 1);\n\n\t  p = quoted_string;\n\t  backslashes = 0;\n\t  if (quote_around)\n\t    *p++ = '\"';\n\t  for (s = string; *s != '\\0'; s++)\n\t    {\n\t      char c = *s;\n\t      if (c == '\"')\n\t\t{\n\t\t  unsigned int j;\n\t\t  for (j = backslashes + 1; j > 0; j--)\n\t\t    *p++ = '\\\\';\n\t\t}\n\t      *p++ = c;\n\t      if (c == '\\\\')\n\t\tbackslashes++;\n\t      else\n\t\tbackslashes = 0;\n\t    }\n\t  if (quote_around)\n\t    {\n\t      unsigned int j;\n\t      for (j = backslashes; j > 0; j--)\n\t\t*p++ = '\\\\';\n\t      *p++ = '\"';\n\t    }\n\t  *p = '\\0';\n\n\t  new_argv[i] = quoted_string;\n\t}\n      else\n\tnew_argv[i] = (char *) string;\n    }\n  new_argv[argc] = NULL;\n\n  return new_argv;\n}\nEOF\n\t\t;;\n\t    esac\n\n            cat <<\"EOF\"\nvoid lt_dump_script (FILE* f)\n{\nEOF\n\t    func_emit_wrapper yes |\n\t      $SED -n -e '\ns/^\\(.\\{79\\}\\)\\(..*\\)/\\1\\\n\\2/\nh\ns/\\([\\\\\"]\\)/\\\\\\1/g\ns/$/\\\\n/\ns/\\([^\\n]*\\).*/  fputs (\"\\1\", f);/p\ng\nD'\n            cat <<\"EOF\"\n}\nEOF\n}\n# end: func_emit_cwrapperexe_src\n\n# func_win32_import_lib_p ARG\n# True if ARG is an import lib, as indicated by $file_magic_cmd\nfunc_win32_import_lib_p ()\n{\n    $debug_cmd\n\n    case `eval $file_magic_cmd \\\"\\$1\\\" 2>/dev/null | $SED -e 10q` in\n    *import*) : ;;\n    *) false ;;\n    esac\n}\n\n# func_suncc_cstd_abi\n# !!ONLY CALL THIS FOR SUN CC AFTER $compile_command IS FULLY EXPANDED!!\n# Several compiler flags select an ABI that is incompatible with the\n# Cstd library. Avoid specifying it if any are in CXXFLAGS.\nfunc_suncc_cstd_abi ()\n{\n    $debug_cmd\n\n    case \" $compile_command \" in\n    *\" -compat=g \"*|*\\ -std=c++[0-9][0-9]\\ *|*\" -library=stdcxx4 \"*|*\" -library=stlport4 \"*)\n      suncc_use_cstd_abi=no\n      ;;\n    *)\n      suncc_use_cstd_abi=yes\n      ;;\n    esac\n}\n\n# func_mode_link arg...\nfunc_mode_link ()\n{\n    $debug_cmd\n\n    case $host in\n    *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-cegcc*)\n      # It is impossible to link a dll without this setting, and\n      # we shouldn't force the makefile maintainer to figure out\n      # what system we are compiling for in order to pass an extra\n      # flag for every libtool invocation.\n      # allow_undefined=no\n\n      # FIXME: Unfortunately, there are problems with the above when trying\n      # to make a dll that has undefined symbols, in which case not\n      # even a static library is built.  For now, we need to specify\n      # -no-undefined on the libtool link line when we can be certain\n      # that all symbols are satisfied, otherwise we get a static library.\n      allow_undefined=yes\n      ;;\n    *)\n      allow_undefined=yes\n      ;;\n    esac\n    libtool_args=$nonopt\n    base_compile=\"$nonopt $@\"\n    compile_command=$nonopt\n    finalize_command=$nonopt\n\n    compile_rpath=\n    finalize_rpath=\n    compile_shlibpath=\n    finalize_shlibpath=\n    convenience=\n    old_convenience=\n    deplibs=\n    old_deplibs=\n    compiler_flags=\n    linker_flags=\n    dllsearchpath=\n    lib_search_path=`pwd`\n    inst_prefix_dir=\n    new_inherited_linker_flags=\n\n    avoid_version=no\n    bindir=\n    dlfiles=\n    dlprefiles=\n    dlself=no\n    export_dynamic=no\n    export_symbols=\n    export_symbols_regex=\n    generated=\n    libobjs=\n    ltlibs=\n    module=no\n    no_install=no\n    objs=\n    os2dllname=\n    non_pic_objects=\n    precious_files_regex=\n    prefer_static_libs=no\n    preload=false\n    prev=\n    prevarg=\n    release=\n    rpath=\n    xrpath=\n    perm_rpath=\n    temp_rpath=\n    thread_safe=no\n    vinfo=\n    vinfo_number=no\n    weak_libs=\n    single_module=$wl-single_module\n    func_infer_tag $base_compile\n\n    # We need to know -static, to get the right output filenames.\n    for arg\n    do\n      case $arg in\n      -shared)\n\ttest yes != \"$build_libtool_libs\" \\\n\t  && func_fatal_configuration \"cannot build a shared library\"\n\tbuild_old_libs=no\n\tbreak\n\t;;\n      -all-static | -static | -static-libtool-libs)\n\tcase $arg in\n\t-all-static)\n\t  if test yes = \"$build_libtool_libs\" && test -z \"$link_static_flag\"; then\n\t    func_warning \"complete static linking is impossible in this configuration\"\n\t  fi\n\t  if test -n \"$link_static_flag\"; then\n\t    dlopen_self=$dlopen_self_static\n\t  fi\n\t  prefer_static_libs=yes\n\t  ;;\n\t-static)\n\t  if test -z \"$pic_flag\" && test -n \"$link_static_flag\"; then\n\t    dlopen_self=$dlopen_self_static\n\t  fi\n\t  prefer_static_libs=built\n\t  ;;\n\t-static-libtool-libs)\n\t  if test -z \"$pic_flag\" && test -n \"$link_static_flag\"; then\n\t    dlopen_self=$dlopen_self_static\n\t  fi\n\t  prefer_static_libs=yes\n\t  ;;\n\tesac\n\tbuild_libtool_libs=no\n\tbuild_old_libs=yes\n\tbreak\n\t;;\n      esac\n    done\n\n    # See if our shared archives depend on static archives.\n    test -n \"$old_archive_from_new_cmds\" && build_old_libs=yes\n\n    # Go through the arguments, transforming them on the way.\n    while test \"$#\" -gt 0; do\n      arg=$1\n      shift\n      func_quote_for_eval \"$arg\"\n      qarg=$func_quote_for_eval_unquoted_result\n      func_append libtool_args \" $func_quote_for_eval_result\"\n\n      # If the previous option needs an argument, assign it.\n      if test -n \"$prev\"; then\n\tcase $prev in\n\toutput)\n\t  func_append compile_command \" @OUTPUT@\"\n\t  func_append finalize_command \" @OUTPUT@\"\n\t  ;;\n\tesac\n\n\tcase $prev in\n\tbindir)\n\t  bindir=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\tdlfiles|dlprefiles)\n\t  $preload || {\n\t    # Add the symbol object into the linking commands.\n\t    func_append compile_command \" @SYMFILE@\"\n\t    func_append finalize_command \" @SYMFILE@\"\n\t    preload=:\n\t  }\n\t  case $arg in\n\t  *.la | *.lo) ;;  # We handle these cases below.\n\t  force)\n\t    if test no = \"$dlself\"; then\n\t      dlself=needless\n\t      export_dynamic=yes\n\t    fi\n\t    prev=\n\t    continue\n\t    ;;\n\t  self)\n\t    if test dlprefiles = \"$prev\"; then\n\t      dlself=yes\n\t    elif test dlfiles = \"$prev\" && test yes != \"$dlopen_self\"; then\n\t      dlself=yes\n\t    else\n\t      dlself=needless\n\t      export_dynamic=yes\n\t    fi\n\t    prev=\n\t    continue\n\t    ;;\n\t  *)\n\t    if test dlfiles = \"$prev\"; then\n\t      func_append dlfiles \" $arg\"\n\t    else\n\t      func_append dlprefiles \" $arg\"\n\t    fi\n\t    prev=\n\t    continue\n\t    ;;\n\t  esac\n\t  ;;\n\texpsyms)\n\t  export_symbols=$arg\n\t  test -f \"$arg\" \\\n\t    || func_fatal_error \"symbol file '$arg' does not exist\"\n\t  prev=\n\t  continue\n\t  ;;\n\texpsyms_regex)\n\t  export_symbols_regex=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\tframework)\n\t  case $host in\n\t    *-*-darwin*)\n\t      case \"$deplibs \" in\n\t\t*\" $qarg.ltframework \"*) ;;\n\t\t*) func_append deplibs \" $qarg.ltframework\" # this is fixed later\n\t\t   ;;\n\t      esac\n\t      ;;\n\t  esac\n\t  prev=\n\t  continue\n\t  ;;\n\tinst_prefix)\n\t  inst_prefix_dir=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\tmllvm)\n\t  # Clang does not use LLVM to link, so we can simply discard any\n\t  # '-mllvm $arg' options when doing the link step.\n\t  prev=\n\t  continue\n\t  ;;\n\tobjectlist)\n\t  if test -f \"$arg\"; then\n\t    save_arg=$arg\n\t    moreargs=\n\t    for fil in `cat \"$save_arg\"`\n\t    do\n#\t      func_append moreargs \" $fil\"\n\t      arg=$fil\n\t      # A libtool-controlled object.\n\n\t      # Check to see that this really is a libtool object.\n\t      if func_lalib_unsafe_p \"$arg\"; then\n\t\tpic_object=\n\t\tnon_pic_object=\n\n\t\t# Read the .lo file\n\t\tfunc_source \"$arg\"\n\n\t\tif test -z \"$pic_object\" ||\n\t\t   test -z \"$non_pic_object\" ||\n\t\t   test none = \"$pic_object\" &&\n\t\t   test none = \"$non_pic_object\"; then\n\t\t  func_fatal_error \"cannot find name of object for '$arg'\"\n\t\tfi\n\n\t\t# Extract subdirectory from the argument.\n\t\tfunc_dirname \"$arg\" \"/\" \"\"\n\t\txdir=$func_dirname_result\n\n\t\tif test none != \"$pic_object\"; then\n\t\t  # Prepend the subdirectory the object is found in.\n\t\t  pic_object=$xdir$pic_object\n\n\t\t  if test dlfiles = \"$prev\"; then\n\t\t    if test yes = \"$build_libtool_libs\" && test yes = \"$dlopen_support\"; then\n\t\t      func_append dlfiles \" $pic_object\"\n\t\t      prev=\n\t\t      continue\n\t\t    else\n\t\t      # If libtool objects are unsupported, then we need to preload.\n\t\t      prev=dlprefiles\n\t\t    fi\n\t\t  fi\n\n\t\t  # CHECK ME:  I think I busted this.  -Ossama\n\t\t  if test dlprefiles = \"$prev\"; then\n\t\t    # Preload the old-style object.\n\t\t    func_append dlprefiles \" $pic_object\"\n\t\t    prev=\n\t\t  fi\n\n\t\t  # A PIC object.\n\t\t  func_append libobjs \" $pic_object\"\n\t\t  arg=$pic_object\n\t\tfi\n\n\t\t# Non-PIC object.\n\t\tif test none != \"$non_pic_object\"; then\n\t\t  # Prepend the subdirectory the object is found in.\n\t\t  non_pic_object=$xdir$non_pic_object\n\n\t\t  # A standard non-PIC object\n\t\t  func_append non_pic_objects \" $non_pic_object\"\n\t\t  if test -z \"$pic_object\" || test none = \"$pic_object\"; then\n\t\t    arg=$non_pic_object\n\t\t  fi\n\t\telse\n\t\t  # If the PIC object exists, use it instead.\n\t\t  # $xdir was prepended to $pic_object above.\n\t\t  non_pic_object=$pic_object\n\t\t  func_append non_pic_objects \" $non_pic_object\"\n\t\tfi\n\t      else\n\t\t# Only an error if not doing a dry-run.\n\t\tif $opt_dry_run; then\n\t\t  # Extract subdirectory from the argument.\n\t\t  func_dirname \"$arg\" \"/\" \"\"\n\t\t  xdir=$func_dirname_result\n\n\t\t  func_lo2o \"$arg\"\n\t\t  pic_object=$xdir$objdir/$func_lo2o_result\n\t\t  non_pic_object=$xdir$func_lo2o_result\n\t\t  func_append libobjs \" $pic_object\"\n\t\t  func_append non_pic_objects \" $non_pic_object\"\n\t        else\n\t\t  func_fatal_error \"'$arg' is not a valid libtool object\"\n\t\tfi\n\t      fi\n\t    done\n\t  else\n\t    func_fatal_error \"link input file '$arg' does not exist\"\n\t  fi\n\t  arg=$save_arg\n\t  prev=\n\t  continue\n\t  ;;\n\tos2dllname)\n\t  os2dllname=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\tprecious_regex)\n\t  precious_files_regex=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\trelease)\n\t  release=-$arg\n\t  prev=\n\t  continue\n\t  ;;\n\trpath | xrpath)\n\t  # We need an absolute path.\n\t  case $arg in\n\t  [\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n\t  *)\n\t    func_fatal_error \"only absolute run-paths are allowed\"\n\t    ;;\n\t  esac\n\t  if test rpath = \"$prev\"; then\n\t    case \"$rpath \" in\n\t    *\" $arg \"*) ;;\n\t    *) func_append rpath \" $arg\" ;;\n\t    esac\n\t  else\n\t    case \"$xrpath \" in\n\t    *\" $arg \"*) ;;\n\t    *) func_append xrpath \" $arg\" ;;\n\t    esac\n\t  fi\n\t  prev=\n\t  continue\n\t  ;;\n\tshrext)\n\t  shrext_cmds=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\tweak)\n\t  func_append weak_libs \" $arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\txcclinker)\n\t  func_append linker_flags \" $qarg\"\n\t  func_append compiler_flags \" $qarg\"\n\t  prev=\n\t  func_append compile_command \" $qarg\"\n\t  func_append finalize_command \" $qarg\"\n\t  continue\n\t  ;;\n\txcompiler)\n\t  func_append compiler_flags \" $qarg\"\n\t  prev=\n\t  func_append compile_command \" $qarg\"\n\t  func_append finalize_command \" $qarg\"\n\t  continue\n\t  ;;\n\txlinker)\n\t  func_append linker_flags \" $qarg\"\n\t  func_append compiler_flags \" $wl$qarg\"\n\t  prev=\n\t  func_append compile_command \" $wl$qarg\"\n\t  func_append finalize_command \" $wl$qarg\"\n\t  continue\n\t  ;;\n\t*)\n\t  eval \"$prev=\\\"\\$arg\\\"\"\n\t  prev=\n\t  continue\n\t  ;;\n\tesac\n      fi # test -n \"$prev\"\n\n      prevarg=$arg\n\n      case $arg in\n      -all-static)\n\tif test -n \"$link_static_flag\"; then\n\t  # See comment for -static flag below, for more details.\n\t  func_append compile_command \" $link_static_flag\"\n\t  func_append finalize_command \" $link_static_flag\"\n\tfi\n\tcontinue\n\t;;\n\n      -allow-undefined)\n\t# FIXME: remove this flag sometime in the future.\n\tfunc_fatal_error \"'-allow-undefined' must not be used because it is the default\"\n\t;;\n\n      -avoid-version)\n\tavoid_version=yes\n\tcontinue\n\t;;\n\n      -bindir)\n\tprev=bindir\n\tcontinue\n\t;;\n\n      -dlopen)\n\tprev=dlfiles\n\tcontinue\n\t;;\n\n      -dlpreopen)\n\tprev=dlprefiles\n\tcontinue\n\t;;\n\n      -export-dynamic)\n\texport_dynamic=yes\n\tcontinue\n\t;;\n\n      -export-symbols | -export-symbols-regex)\n\tif test -n \"$export_symbols\" || test -n \"$export_symbols_regex\"; then\n\t  func_fatal_error \"more than one -exported-symbols argument is not allowed\"\n\tfi\n\tif test X-export-symbols = \"X$arg\"; then\n\t  prev=expsyms\n\telse\n\t  prev=expsyms_regex\n\tfi\n\tcontinue\n\t;;\n\n      -framework)\n\tprev=framework\n\tcontinue\n\t;;\n\n      -inst-prefix-dir)\n\tprev=inst_prefix\n\tcontinue\n\t;;\n\n      # The native IRIX linker understands -LANG:*, -LIST:* and -LNO:*\n      # so, if we see these flags be careful not to treat them like -L\n      -L[A-Z][A-Z]*:*)\n\tcase $with_gcc/$host in\n\tno/*-*-irix* | /*-*-irix*)\n\t  func_append compile_command \" $arg\"\n\t  func_append finalize_command \" $arg\"\n\t  ;;\n\tesac\n\tcontinue\n\t;;\n\n      -L*)\n\tfunc_stripname \"-L\" '' \"$arg\"\n\tif test -z \"$func_stripname_result\"; then\n\t  if test \"$#\" -gt 0; then\n\t    func_fatal_error \"require no space between '-L' and '$1'\"\n\t  else\n\t    func_fatal_error \"need path for '-L' option\"\n\t  fi\n\tfi\n\tfunc_resolve_sysroot \"$func_stripname_result\"\n\tdir=$func_resolve_sysroot_result\n\t# We need an absolute path.\n\tcase $dir in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n\t*)\n\t  absdir=`cd \"$dir\" && pwd`\n\t  test -z \"$absdir\" && \\\n\t    func_fatal_error \"cannot determine absolute directory name of '$dir'\"\n\t  dir=$absdir\n\t  ;;\n\tesac\n\tcase \"$deplibs \" in\n\t*\" -L$dir \"* | *\" $arg \"*)\n\t  # Will only happen for absolute or sysroot arguments\n\t  ;;\n\t*)\n\t  # Preserve sysroot, but never include relative directories\n\t  case $dir in\n\t    [\\\\/]* | [A-Za-z]:[\\\\/]* | =*) func_append deplibs \" $arg\" ;;\n\t    *) func_append deplibs \" -L$dir\" ;;\n\t  esac\n\t  func_append lib_search_path \" $dir\"\n\t  ;;\n\tesac\n\tcase $host in\n\t*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-cegcc*)\n\t  testbindir=`$ECHO \"$dir\" | $SED 's*/lib$*/bin*'`\n\t  case :$dllsearchpath: in\n\t  *\":$dir:\"*) ;;\n\t  ::) dllsearchpath=$dir;;\n\t  *) func_append dllsearchpath \":$dir\";;\n\t  esac\n\t  case :$dllsearchpath: in\n\t  *\":$testbindir:\"*) ;;\n\t  ::) dllsearchpath=$testbindir;;\n\t  *) func_append dllsearchpath \":$testbindir\";;\n\t  esac\n\t  ;;\n\tesac\n\tcontinue\n\t;;\n\n      -l*)\n\tif test X-lc = \"X$arg\" || test X-lm = \"X$arg\"; then\n\t  case $host in\n\t  *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-beos* | *-cegcc* | *-*-haiku*)\n\t    # These systems don't actually have a C or math library (as such)\n\t    continue\n\t    ;;\n\t  *-*-os2*)\n\t    # These systems don't actually have a C library (as such)\n\t    test X-lc = \"X$arg\" && continue\n\t    ;;\n\t  *-*-openbsd* | *-*-freebsd* | *-*-dragonfly* | *-*-bitrig*)\n\t    # Do not include libc due to us having libc/libc_r.\n\t    test X-lc = \"X$arg\" && continue\n\t    ;;\n\t  *-*-rhapsody* | *-*-darwin1.[012])\n\t    # Rhapsody C and math libraries are in the System framework\n\t    func_append deplibs \" System.ltframework\"\n\t    continue\n\t    ;;\n\t  *-*-sco3.2v5* | *-*-sco5v6*)\n\t    # Causes problems with __ctype\n\t    test X-lc = \"X$arg\" && continue\n\t    ;;\n\t  *-*-sysv4.2uw2* | *-*-sysv5* | *-*-unixware* | *-*-OpenUNIX*)\n\t    # Compiler inserts libc in the correct place for threads to work\n\t    test X-lc = \"X$arg\" && continue\n\t    ;;\n\t  esac\n\telif test X-lc_r = \"X$arg\"; then\n\t case $host in\n\t *-*-openbsd* | *-*-freebsd* | *-*-dragonfly* | *-*-bitrig*)\n\t   # Do not include libc_r directly, use -pthread flag.\n\t   continue\n\t   ;;\n\t esac\n\tfi\n\tfunc_append deplibs \" $arg\"\n\tcontinue\n\t;;\n\n      -mllvm)\n\tprev=mllvm\n\tcontinue\n\t;;\n\n      -module)\n\tmodule=yes\n\tcontinue\n\t;;\n\n      # Tru64 UNIX uses -model [arg] to determine the layout of C++\n      # classes, name mangling, and exception handling.\n      # Darwin uses the -arch flag to determine output architecture.\n      -model|-arch|-isysroot|--sysroot)\n\tfunc_append compiler_flags \" $arg\"\n\tfunc_append compile_command \" $arg\"\n\tfunc_append finalize_command \" $arg\"\n\tprev=xcompiler\n\tcontinue\n\t;;\n\n      -mt|-mthreads|-kthread|-Kthread|-pthread|-pthreads|--thread-safe \\\n      |-threads|-fopenmp|-openmp|-mp|-xopenmp|-omp|-qsmp=*)\n\tfunc_append compiler_flags \" $arg\"\n\tfunc_append compile_command \" $arg\"\n\tfunc_append finalize_command \" $arg\"\n\tcase \"$new_inherited_linker_flags \" in\n\t    *\" $arg \"*) ;;\n\t    * ) func_append new_inherited_linker_flags \" $arg\" ;;\n\tesac\n\tcontinue\n\t;;\n\n      -multi_module)\n\tsingle_module=$wl-multi_module\n\tcontinue\n\t;;\n\n      -no-fast-install)\n\tfast_install=no\n\tcontinue\n\t;;\n\n      -no-install)\n\tcase $host in\n\t*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-*-darwin* | *-cegcc*)\n\t  # The PATH hackery in wrapper scripts is required on Windows\n\t  # and Darwin in order for the loader to find any dlls it needs.\n\t  func_warning \"'-no-install' is ignored for $host\"\n\t  func_warning \"assuming '-no-fast-install' instead\"\n\t  fast_install=no\n\t  ;;\n\t*) no_install=yes ;;\n\tesac\n\tcontinue\n\t;;\n\n      -no-undefined)\n\tallow_undefined=no\n\tcontinue\n\t;;\n\n      -objectlist)\n\tprev=objectlist\n\tcontinue\n\t;;\n\n      -os2dllname)\n\tprev=os2dllname\n\tcontinue\n\t;;\n\n      -o) prev=output ;;\n\n      -precious-files-regex)\n\tprev=precious_regex\n\tcontinue\n\t;;\n\n      -release)\n\tprev=release\n\tcontinue\n\t;;\n\n      -rpath)\n\tprev=rpath\n\tcontinue\n\t;;\n\n      -R)\n\tprev=xrpath\n\tcontinue\n\t;;\n\n      -R*)\n\tfunc_stripname '-R' '' \"$arg\"\n\tdir=$func_stripname_result\n\t# We need an absolute path.\n\tcase $dir in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n\t=*)\n\t  func_stripname '=' '' \"$dir\"\n\t  dir=$lt_sysroot$func_stripname_result\n\t  ;;\n\t*)\n\t  func_fatal_error \"only absolute run-paths are allowed\"\n\t  ;;\n\tesac\n\tcase \"$xrpath \" in\n\t*\" $dir \"*) ;;\n\t*) func_append xrpath \" $dir\" ;;\n\tesac\n\tcontinue\n\t;;\n\n      -shared)\n\t# The effects of -shared are defined in a previous loop.\n\tcontinue\n\t;;\n\n      -shrext)\n\tprev=shrext\n\tcontinue\n\t;;\n\n      -static | -static-libtool-libs)\n\t# The effects of -static are defined in a previous loop.\n\t# We used to do the same as -all-static on platforms that\n\t# didn't have a PIC flag, but the assumption that the effects\n\t# would be equivalent was wrong.  It would break on at least\n\t# Digital Unix and AIX.\n\tcontinue\n\t;;\n\n      -thread-safe)\n\tthread_safe=yes\n\tcontinue\n\t;;\n\n      -version-info)\n\tprev=vinfo\n\tcontinue\n\t;;\n\n      -version-number)\n\tprev=vinfo\n\tvinfo_number=yes\n\tcontinue\n\t;;\n\n      -weak)\n        prev=weak\n\tcontinue\n\t;;\n\n      -Wc,*)\n\tfunc_stripname '-Wc,' '' \"$arg\"\n\targs=$func_stripname_result\n\targ=\n\tsave_ifs=$IFS; IFS=,\n\tfor flag in $args; do\n\t  IFS=$save_ifs\n          func_quote_for_eval \"$flag\"\n\t  func_append arg \" $func_quote_for_eval_result\"\n\t  func_append compiler_flags \" $func_quote_for_eval_result\"\n\tdone\n\tIFS=$save_ifs\n\tfunc_stripname ' ' '' \"$arg\"\n\targ=$func_stripname_result\n\t;;\n\n      -Wl,*)\n\tfunc_stripname '-Wl,' '' \"$arg\"\n\targs=$func_stripname_result\n\targ=\n\tsave_ifs=$IFS; IFS=,\n\tfor flag in $args; do\n\t  IFS=$save_ifs\n          func_quote_for_eval \"$flag\"\n\t  func_append arg \" $wl$func_quote_for_eval_result\"\n\t  func_append compiler_flags \" $wl$func_quote_for_eval_result\"\n\t  func_append linker_flags \" $func_quote_for_eval_result\"\n\tdone\n\tIFS=$save_ifs\n\tfunc_stripname ' ' '' \"$arg\"\n\targ=$func_stripname_result\n\t;;\n\n      -Xcompiler)\n\tprev=xcompiler\n\tcontinue\n\t;;\n\n      -Xlinker)\n\tprev=xlinker\n\tcontinue\n\t;;\n\n      -XCClinker)\n\tprev=xcclinker\n\tcontinue\n\t;;\n\n      # -msg_* for osf cc\n      -msg_*)\n\tfunc_quote_for_eval \"$arg\"\n\targ=$func_quote_for_eval_result\n\t;;\n\n      # Flags to be passed through unchanged, with rationale:\n      # -64, -mips[0-9]      enable 64-bit mode for the SGI compiler\n      # -r[0-9][0-9]*        specify processor for the SGI compiler\n      # -xarch=*, -xtarget=* enable 64-bit mode for the Sun compiler\n      # +DA*, +DD*           enable 64-bit mode for the HP compiler\n      # -q*                  compiler args for the IBM compiler\n      # -m*, -t[45]*, -txscale* architecture-specific flags for GCC\n      # -F/path              path to uninstalled frameworks, gcc on darwin\n      # -p, -pg, --coverage, -fprofile-*  profiling flags for GCC\n      # -fstack-protector*   stack protector flags for GCC\n      # @file                GCC response files\n      # -tp=*                Portland pgcc target processor selection\n      # --sysroot=*          for sysroot support\n      # -O*, -g*, -flto*, -fwhopr*, -fuse-linker-plugin GCC link-time optimization\n      # -stdlib=*            select c++ std lib with clang\n      -64|-mips[0-9]|-r[0-9][0-9]*|-xarch=*|-xtarget=*|+DA*|+DD*|-q*|-m*| \\\n      -t[45]*|-txscale*|-p|-pg|--coverage|-fprofile-*|-F*|@*|-tp=*|--sysroot=*| \\\n      -O*|-g*|-flto*|-fwhopr*|-fuse-linker-plugin|-fstack-protector*|-stdlib=*)\n        func_quote_for_eval \"$arg\"\n\targ=$func_quote_for_eval_result\n        func_append compile_command \" $arg\"\n        func_append finalize_command \" $arg\"\n        func_append compiler_flags \" $arg\"\n        continue\n        ;;\n\n      -Z*)\n        if test os2 = \"`expr $host : '.*\\(os2\\)'`\"; then\n          # OS/2 uses -Zxxx to specify OS/2-specific options\n\t  compiler_flags=\"$compiler_flags $arg\"\n\t  func_append compile_command \" $arg\"\n\t  func_append finalize_command \" $arg\"\n\t  case $arg in\n\t  -Zlinker | -Zstack)\n\t    prev=xcompiler\n\t    ;;\n\t  esac\n\t  continue\n        else\n\t  # Otherwise treat like 'Some other compiler flag' below\n\t  func_quote_for_eval \"$arg\"\n\t  arg=$func_quote_for_eval_result\n        fi\n\t;;\n\n      # Some other compiler flag.\n      -* | +*)\n        func_quote_for_eval \"$arg\"\n\targ=$func_quote_for_eval_result\n\t;;\n\n      *.$objext)\n\t# A standard object.\n\tfunc_append objs \" $arg\"\n\t;;\n\n      *.lo)\n\t# A libtool-controlled object.\n\n\t# Check to see that this really is a libtool object.\n\tif func_lalib_unsafe_p \"$arg\"; then\n\t  pic_object=\n\t  non_pic_object=\n\n\t  # Read the .lo file\n\t  func_source \"$arg\"\n\n\t  if test -z \"$pic_object\" ||\n\t     test -z \"$non_pic_object\" ||\n\t     test none = \"$pic_object\" &&\n\t     test none = \"$non_pic_object\"; then\n\t    func_fatal_error \"cannot find name of object for '$arg'\"\n\t  fi\n\n\t  # Extract subdirectory from the argument.\n\t  func_dirname \"$arg\" \"/\" \"\"\n\t  xdir=$func_dirname_result\n\n\t  test none = \"$pic_object\" || {\n\t    # Prepend the subdirectory the object is found in.\n\t    pic_object=$xdir$pic_object\n\n\t    if test dlfiles = \"$prev\"; then\n\t      if test yes = \"$build_libtool_libs\" && test yes = \"$dlopen_support\"; then\n\t\tfunc_append dlfiles \" $pic_object\"\n\t\tprev=\n\t\tcontinue\n\t      else\n\t\t# If libtool objects are unsupported, then we need to preload.\n\t\tprev=dlprefiles\n\t      fi\n\t    fi\n\n\t    # CHECK ME:  I think I busted this.  -Ossama\n\t    if test dlprefiles = \"$prev\"; then\n\t      # Preload the old-style object.\n\t      func_append dlprefiles \" $pic_object\"\n\t      prev=\n\t    fi\n\n\t    # A PIC object.\n\t    func_append libobjs \" $pic_object\"\n\t    arg=$pic_object\n\t  }\n\n\t  # Non-PIC object.\n\t  if test none != \"$non_pic_object\"; then\n\t    # Prepend the subdirectory the object is found in.\n\t    non_pic_object=$xdir$non_pic_object\n\n\t    # A standard non-PIC object\n\t    func_append non_pic_objects \" $non_pic_object\"\n\t    if test -z \"$pic_object\" || test none = \"$pic_object\"; then\n\t      arg=$non_pic_object\n\t    fi\n\t  else\n\t    # If the PIC object exists, use it instead.\n\t    # $xdir was prepended to $pic_object above.\n\t    non_pic_object=$pic_object\n\t    func_append non_pic_objects \" $non_pic_object\"\n\t  fi\n\telse\n\t  # Only an error if not doing a dry-run.\n\t  if $opt_dry_run; then\n\t    # Extract subdirectory from the argument.\n\t    func_dirname \"$arg\" \"/\" \"\"\n\t    xdir=$func_dirname_result\n\n\t    func_lo2o \"$arg\"\n\t    pic_object=$xdir$objdir/$func_lo2o_result\n\t    non_pic_object=$xdir$func_lo2o_result\n\t    func_append libobjs \" $pic_object\"\n\t    func_append non_pic_objects \" $non_pic_object\"\n\t  else\n\t    func_fatal_error \"'$arg' is not a valid libtool object\"\n\t  fi\n\tfi\n\t;;\n\n      *.$libext)\n\t# An archive.\n\tfunc_append deplibs \" $arg\"\n\tfunc_append old_deplibs \" $arg\"\n\tcontinue\n\t;;\n\n      *.la)\n\t# A libtool-controlled library.\n\n\tfunc_resolve_sysroot \"$arg\"\n\tif test dlfiles = \"$prev\"; then\n\t  # This library was specified with -dlopen.\n\t  func_append dlfiles \" $func_resolve_sysroot_result\"\n\t  prev=\n\telif test dlprefiles = \"$prev\"; then\n\t  # The library was specified with -dlpreopen.\n\t  func_append dlprefiles \" $func_resolve_sysroot_result\"\n\t  prev=\n\telse\n\t  func_append deplibs \" $func_resolve_sysroot_result\"\n\tfi\n\tcontinue\n\t;;\n\n      # Some other compiler argument.\n      *)\n\t# Unknown arguments in both finalize_command and compile_command need\n\t# to be aesthetically quoted because they are evaled later.\n\tfunc_quote_for_eval \"$arg\"\n\targ=$func_quote_for_eval_result\n\t;;\n      esac # arg\n\n      # Now actually substitute the argument into the commands.\n      if test -n \"$arg\"; then\n\tfunc_append compile_command \" $arg\"\n\tfunc_append finalize_command \" $arg\"\n      fi\n    done # argument parsing loop\n\n    test -n \"$prev\" && \\\n      func_fatal_help \"the '$prevarg' option requires an argument\"\n\n    if test yes = \"$export_dynamic\" && test -n \"$export_dynamic_flag_spec\"; then\n      eval arg=\\\"$export_dynamic_flag_spec\\\"\n      func_append compile_command \" $arg\"\n      func_append finalize_command \" $arg\"\n    fi\n\n    oldlibs=\n    # calculate the name of the file, without its directory\n    func_basename \"$output\"\n    outputname=$func_basename_result\n    libobjs_save=$libobjs\n\n    if test -n \"$shlibpath_var\"; then\n      # get the directories listed in $shlibpath_var\n      eval shlib_search_path=\\`\\$ECHO \\\"\\$$shlibpath_var\\\" \\| \\$SED \\'s/:/ /g\\'\\`\n    else\n      shlib_search_path=\n    fi\n    eval sys_lib_search_path=\\\"$sys_lib_search_path_spec\\\"\n    eval sys_lib_dlsearch_path=\\\"$sys_lib_dlsearch_path_spec\\\"\n\n    # Definition is injected by LT_CONFIG during libtool generation.\n    func_munge_path_list sys_lib_dlsearch_path \"$LT_SYS_LIBRARY_PATH\"\n\n    func_dirname \"$output\" \"/\" \"\"\n    output_objdir=$func_dirname_result$objdir\n    func_to_tool_file \"$output_objdir/\"\n    tool_output_objdir=$func_to_tool_file_result\n    # Create the object directory.\n    func_mkdir_p \"$output_objdir\"\n\n    # Determine the type of output\n    case $output in\n    \"\")\n      func_fatal_help \"you must specify an output file\"\n      ;;\n    *.$libext) linkmode=oldlib ;;\n    *.lo | *.$objext) linkmode=obj ;;\n    *.la) linkmode=lib ;;\n    *) linkmode=prog ;; # Anything else should be a program.\n    esac\n\n    specialdeplibs=\n\n    libs=\n    # Find all interdependent deplibs by searching for libraries\n    # that are linked more than once (e.g. -la -lb -la)\n    for deplib in $deplibs; do\n      if $opt_preserve_dup_deps; then\n\tcase \"$libs \" in\n\t*\" $deplib \"*) func_append specialdeplibs \" $deplib\" ;;\n\tesac\n      fi\n      func_append libs \" $deplib\"\n    done\n\n    if test lib = \"$linkmode\"; then\n      libs=\"$predeps $libs $compiler_lib_search_path $postdeps\"\n\n      # Compute libraries that are listed more than once in $predeps\n      # $postdeps and mark them as special (i.e., whose duplicates are\n      # not to be eliminated).\n      pre_post_deps=\n      if $opt_duplicate_compiler_generated_deps; then\n\tfor pre_post_dep in $predeps $postdeps; do\n\t  case \"$pre_post_deps \" in\n\t  *\" $pre_post_dep \"*) func_append specialdeplibs \" $pre_post_deps\" ;;\n\t  esac\n\t  func_append pre_post_deps \" $pre_post_dep\"\n\tdone\n      fi\n      pre_post_deps=\n    fi\n\n    deplibs=\n    newdependency_libs=\n    newlib_search_path=\n    need_relink=no # whether we're linking any uninstalled libtool libraries\n    notinst_deplibs= # not-installed libtool libraries\n    notinst_path= # paths that contain not-installed libtool libraries\n\n    case $linkmode in\n    lib)\n\tpasses=\"conv dlpreopen link\"\n\tfor file in $dlfiles $dlprefiles; do\n\t  case $file in\n\t  *.la) ;;\n\t  *)\n\t    func_fatal_help \"libraries can '-dlopen' only libtool libraries: $file\"\n\t    ;;\n\t  esac\n\tdone\n\t;;\n    prog)\n\tcompile_deplibs=\n\tfinalize_deplibs=\n\talldeplibs=false\n\tnewdlfiles=\n\tnewdlprefiles=\n\tpasses=\"conv scan dlopen dlpreopen link\"\n\t;;\n    *)  passes=\"conv\"\n\t;;\n    esac\n\n    for pass in $passes; do\n      # The preopen pass in lib mode reverses $deplibs; put it back here\n      # so that -L comes before libs that need it for instance...\n      if test lib,link = \"$linkmode,$pass\"; then\n\t## FIXME: Find the place where the list is rebuilt in the wrong\n\t##        order, and fix it there properly\n        tmp_deplibs=\n\tfor deplib in $deplibs; do\n\t  tmp_deplibs=\"$deplib $tmp_deplibs\"\n\tdone\n\tdeplibs=$tmp_deplibs\n      fi\n\n      if test lib,link = \"$linkmode,$pass\" ||\n\t test prog,scan = \"$linkmode,$pass\"; then\n\tlibs=$deplibs\n\tdeplibs=\n      fi\n      if test prog = \"$linkmode\"; then\n\tcase $pass in\n\tdlopen) libs=$dlfiles ;;\n\tdlpreopen) libs=$dlprefiles ;;\n\tlink) libs=\"$deplibs %DEPLIBS% $dependency_libs\" ;;\n\tesac\n      fi\n      if test lib,dlpreopen = \"$linkmode,$pass\"; then\n\t# Collect and forward deplibs of preopened libtool libs\n\tfor lib in $dlprefiles; do\n\t  # Ignore non-libtool-libs\n\t  dependency_libs=\n\t  func_resolve_sysroot \"$lib\"\n\t  case $lib in\n\t  *.la)\tfunc_source \"$func_resolve_sysroot_result\" ;;\n\t  esac\n\n\t  # Collect preopened libtool deplibs, except any this library\n\t  # has declared as weak libs\n\t  for deplib in $dependency_libs; do\n\t    func_basename \"$deplib\"\n            deplib_base=$func_basename_result\n\t    case \" $weak_libs \" in\n\t    *\" $deplib_base \"*) ;;\n\t    *) func_append deplibs \" $deplib\" ;;\n\t    esac\n\t  done\n\tdone\n\tlibs=$dlprefiles\n      fi\n      if test dlopen = \"$pass\"; then\n\t# Collect dlpreopened libraries\n\tsave_deplibs=$deplibs\n\tdeplibs=\n      fi\n\n      for deplib in $libs; do\n\tlib=\n\tfound=false\n\tcase $deplib in\n\t-mt|-mthreads|-kthread|-Kthread|-pthread|-pthreads|--thread-safe \\\n        |-threads|-fopenmp|-openmp|-mp|-xopenmp|-omp|-qsmp=*)\n\t  if test prog,link = \"$linkmode,$pass\"; then\n\t    compile_deplibs=\"$deplib $compile_deplibs\"\n\t    finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t  else\n\t    func_append compiler_flags \" $deplib\"\n\t    if test lib = \"$linkmode\"; then\n\t\tcase \"$new_inherited_linker_flags \" in\n\t\t    *\" $deplib \"*) ;;\n\t\t    * ) func_append new_inherited_linker_flags \" $deplib\" ;;\n\t\tesac\n\t    fi\n\t  fi\n\t  continue\n\t  ;;\n\t-l*)\n\t  if test lib != \"$linkmode\" && test prog != \"$linkmode\"; then\n\t    func_warning \"'-l' is ignored for archives/objects\"\n\t    continue\n\t  fi\n\t  func_stripname '-l' '' \"$deplib\"\n\t  name=$func_stripname_result\n\t  if test lib = \"$linkmode\"; then\n\t    searchdirs=\"$newlib_search_path $lib_search_path $compiler_lib_search_dirs $sys_lib_search_path $shlib_search_path\"\n\t  else\n\t    searchdirs=\"$newlib_search_path $lib_search_path $sys_lib_search_path $shlib_search_path\"\n\t  fi\n\t  for searchdir in $searchdirs; do\n\t    for search_ext in .la $std_shrext .so .a; do\n\t      # Search the libtool library\n\t      lib=$searchdir/lib$name$search_ext\n\t      if test -f \"$lib\"; then\n\t\tif test .la = \"$search_ext\"; then\n\t\t  found=:\n\t\telse\n\t\t  found=false\n\t\tfi\n\t\tbreak 2\n\t      fi\n\t    done\n\t  done\n\t  if $found; then\n\t    # deplib is a libtool library\n\t    # If $allow_libtool_libs_with_static_runtimes && $deplib is a stdlib,\n\t    # We need to do some special things here, and not later.\n\t    if test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t      case \" $predeps $postdeps \" in\n\t      *\" $deplib \"*)\n\t\tif func_lalib_p \"$lib\"; then\n\t\t  library_names=\n\t\t  old_library=\n\t\t  func_source \"$lib\"\n\t\t  for l in $old_library $library_names; do\n\t\t    ll=$l\n\t\t  done\n\t\t  if test \"X$ll\" = \"X$old_library\"; then # only static version available\n\t\t    found=false\n\t\t    func_dirname \"$lib\" \"\" \".\"\n\t\t    ladir=$func_dirname_result\n\t\t    lib=$ladir/$old_library\n\t\t    if test prog,link = \"$linkmode,$pass\"; then\n\t\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t\t    else\n\t\t      deplibs=\"$deplib $deplibs\"\n\t\t      test lib = \"$linkmode\" && newdependency_libs=\"$deplib $newdependency_libs\"\n\t\t    fi\n\t\t    continue\n\t\t  fi\n\t\tfi\n\t\t;;\n\t      *) ;;\n\t      esac\n\t    fi\n\t  else\n\t    # deplib doesn't seem to be a libtool library\n\t    if test prog,link = \"$linkmode,$pass\"; then\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    else\n\t      deplibs=\"$deplib $deplibs\"\n\t      test lib = \"$linkmode\" && newdependency_libs=\"$deplib $newdependency_libs\"\n\t    fi\n\t    continue\n\t  fi\n\t  ;; # -l\n\t*.ltframework)\n\t  if test prog,link = \"$linkmode,$pass\"; then\n\t    compile_deplibs=\"$deplib $compile_deplibs\"\n\t    finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t  else\n\t    deplibs=\"$deplib $deplibs\"\n\t    if test lib = \"$linkmode\"; then\n\t\tcase \"$new_inherited_linker_flags \" in\n\t\t    *\" $deplib \"*) ;;\n\t\t    * ) func_append new_inherited_linker_flags \" $deplib\" ;;\n\t\tesac\n\t    fi\n\t  fi\n\t  continue\n\t  ;;\n\t-L*)\n\t  case $linkmode in\n\t  lib)\n\t    deplibs=\"$deplib $deplibs\"\n\t    test conv = \"$pass\" && continue\n\t    newdependency_libs=\"$deplib $newdependency_libs\"\n\t    func_stripname '-L' '' \"$deplib\"\n\t    func_resolve_sysroot \"$func_stripname_result\"\n\t    func_append newlib_search_path \" $func_resolve_sysroot_result\"\n\t    ;;\n\t  prog)\n\t    if test conv = \"$pass\"; then\n\t      deplibs=\"$deplib $deplibs\"\n\t      continue\n\t    fi\n\t    if test scan = \"$pass\"; then\n\t      deplibs=\"$deplib $deplibs\"\n\t    else\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    fi\n\t    func_stripname '-L' '' \"$deplib\"\n\t    func_resolve_sysroot \"$func_stripname_result\"\n\t    func_append newlib_search_path \" $func_resolve_sysroot_result\"\n\t    ;;\n\t  *)\n\t    func_warning \"'-L' is ignored for archives/objects\"\n\t    ;;\n\t  esac # linkmode\n\t  continue\n\t  ;; # -L\n\t-R*)\n\t  if test link = \"$pass\"; then\n\t    func_stripname '-R' '' \"$deplib\"\n\t    func_resolve_sysroot \"$func_stripname_result\"\n\t    dir=$func_resolve_sysroot_result\n\t    # Make sure the xrpath contains only unique directories.\n\t    case \"$xrpath \" in\n\t    *\" $dir \"*) ;;\n\t    *) func_append xrpath \" $dir\" ;;\n\t    esac\n\t  fi\n\t  deplibs=\"$deplib $deplibs\"\n\t  continue\n\t  ;;\n\t*.la)\n\t  func_resolve_sysroot \"$deplib\"\n\t  lib=$func_resolve_sysroot_result\n\t  ;;\n\t*.$libext)\n\t  if test conv = \"$pass\"; then\n\t    deplibs=\"$deplib $deplibs\"\n\t    continue\n\t  fi\n\t  case $linkmode in\n\t  lib)\n\t    # Linking convenience modules into shared libraries is allowed,\n\t    # but linking other static libraries is non-portable.\n\t    case \" $dlpreconveniencelibs \" in\n\t    *\" $deplib \"*) ;;\n\t    *)\n\t      valid_a_lib=false\n\t      case $deplibs_check_method in\n\t\tmatch_pattern*)\n\t\t  set dummy $deplibs_check_method; shift\n\t\t  match_pattern_regex=`expr \"$deplibs_check_method\" : \"$1 \\(.*\\)\"`\n\t\t  if eval \"\\$ECHO \\\"$deplib\\\"\" 2>/dev/null | $SED 10q \\\n\t\t    | $EGREP \"$match_pattern_regex\" > /dev/null; then\n\t\t    valid_a_lib=:\n\t\t  fi\n\t\t;;\n\t\tpass_all)\n\t\t  valid_a_lib=:\n\t\t;;\n\t      esac\n\t      if $valid_a_lib; then\n\t\techo\n\t\t$ECHO \"*** Warning: Linking the shared library $output against the\"\n\t\t$ECHO \"*** static library $deplib is not portable!\"\n\t\tdeplibs=\"$deplib $deplibs\"\n\t      else\n\t\techo\n\t\t$ECHO \"*** Warning: Trying to link with static lib archive $deplib.\"\n\t\techo \"*** I have the capability to make that library automatically link in when\"\n\t\techo \"*** you link to this library.  But I can only do this if you have a\"\n\t\techo \"*** shared version of the library, which you do not appear to have\"\n\t\techo \"*** because the file extensions .$libext of this argument makes me believe\"\n\t\techo \"*** that it is just a static archive that I should not use here.\"\n\t      fi\n\t      ;;\n\t    esac\n\t    continue\n\t    ;;\n\t  prog)\n\t    if test link != \"$pass\"; then\n\t      deplibs=\"$deplib $deplibs\"\n\t    else\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    fi\n\t    continue\n\t    ;;\n\t  esac # linkmode\n\t  ;; # *.$libext\n\t*.lo | *.$objext)\n\t  if test conv = \"$pass\"; then\n\t    deplibs=\"$deplib $deplibs\"\n\t  elif test prog = \"$linkmode\"; then\n\t    if test dlpreopen = \"$pass\" || test yes != \"$dlopen_support\" || test no = \"$build_libtool_libs\"; then\n\t      # If there is no dlopen support or we're linking statically,\n\t      # we need to preload.\n\t      func_append newdlprefiles \" $deplib\"\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    else\n\t      func_append newdlfiles \" $deplib\"\n\t    fi\n\t  fi\n\t  continue\n\t  ;;\n\t%DEPLIBS%)\n\t  alldeplibs=:\n\t  continue\n\t  ;;\n\tesac # case $deplib\n\n\t$found || test -f \"$lib\" \\\n\t  || func_fatal_error \"cannot find the library '$lib' or unhandled argument '$deplib'\"\n\n\t# Check to see that this really is a libtool archive.\n\tfunc_lalib_unsafe_p \"$lib\" \\\n\t  || func_fatal_error \"'$lib' is not a valid libtool archive\"\n\n\tfunc_dirname \"$lib\" \"\" \".\"\n\tladir=$func_dirname_result\n\n\tdlname=\n\tdlopen=\n\tdlpreopen=\n\tlibdir=\n\tlibrary_names=\n\told_library=\n\tinherited_linker_flags=\n\t# If the library was installed with an old release of libtool,\n\t# it will not redefine variables installed, or shouldnotlink\n\tinstalled=yes\n\tshouldnotlink=no\n\tavoidtemprpath=\n\n\n\t# Read the .la file\n\tfunc_source \"$lib\"\n\n\t# Convert \"-framework foo\" to \"foo.ltframework\"\n\tif test -n \"$inherited_linker_flags\"; then\n\t  tmp_inherited_linker_flags=`$ECHO \"$inherited_linker_flags\" | $SED 's/-framework \\([^ $]*\\)/\\1.ltframework/g'`\n\t  for tmp_inherited_linker_flag in $tmp_inherited_linker_flags; do\n\t    case \" $new_inherited_linker_flags \" in\n\t      *\" $tmp_inherited_linker_flag \"*) ;;\n\t      *) func_append new_inherited_linker_flags \" $tmp_inherited_linker_flag\";;\n\t    esac\n\t  done\n\tfi\n\tdependency_libs=`$ECHO \" $dependency_libs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\tif test lib,link = \"$linkmode,$pass\" ||\n\t   test prog,scan = \"$linkmode,$pass\" ||\n\t   { test prog != \"$linkmode\" && test lib != \"$linkmode\"; }; then\n\t  test -n \"$dlopen\" && func_append dlfiles \" $dlopen\"\n\t  test -n \"$dlpreopen\" && func_append dlprefiles \" $dlpreopen\"\n\tfi\n\n\tif test conv = \"$pass\"; then\n\t  # Only check for convenience libraries\n\t  deplibs=\"$lib $deplibs\"\n\t  if test -z \"$libdir\"; then\n\t    if test -z \"$old_library\"; then\n\t      func_fatal_error \"cannot find name of link library for '$lib'\"\n\t    fi\n\t    # It is a libtool convenience library, so add in its objects.\n\t    func_append convenience \" $ladir/$objdir/$old_library\"\n\t    func_append old_convenience \" $ladir/$objdir/$old_library\"\n\t  elif test prog != \"$linkmode\" && test lib != \"$linkmode\"; then\n\t    func_fatal_error \"'$lib' is not a convenience library\"\n\t  fi\n\t  tmp_libs=\n\t  for deplib in $dependency_libs; do\n\t    deplibs=\"$deplib $deplibs\"\n\t    if $opt_preserve_dup_deps; then\n\t      case \"$tmp_libs \" in\n\t      *\" $deplib \"*) func_append specialdeplibs \" $deplib\" ;;\n\t      esac\n\t    fi\n\t    func_append tmp_libs \" $deplib\"\n\t  done\n\t  continue\n\tfi # $pass = conv\n\n\n\t# Get the name of the library we link against.\n\tlinklib=\n\tif test -n \"$old_library\" &&\n\t   { test yes = \"$prefer_static_libs\" ||\n\t     test built,no = \"$prefer_static_libs,$installed\"; }; then\n\t  linklib=$old_library\n\telse\n\t  for l in $old_library $library_names; do\n\t    linklib=$l\n\t  done\n\tfi\n\tif test -z \"$linklib\"; then\n\t  func_fatal_error \"cannot find name of link library for '$lib'\"\n\tfi\n\n\t# This library was specified with -dlopen.\n\tif test dlopen = \"$pass\"; then\n\t  test -z \"$libdir\" \\\n\t    && func_fatal_error \"cannot -dlopen a convenience library: '$lib'\"\n\t  if test -z \"$dlname\" ||\n\t     test yes != \"$dlopen_support\" ||\n\t     test no = \"$build_libtool_libs\"\n\t  then\n\t    # If there is no dlname, no dlopen support or we're linking\n\t    # statically, we need to preload.  We also need to preload any\n\t    # dependent libraries so libltdl's deplib preloader doesn't\n\t    # bomb out in the load deplibs phase.\n\t    func_append dlprefiles \" $lib $dependency_libs\"\n\t  else\n\t    func_append newdlfiles \" $lib\"\n\t  fi\n\t  continue\n\tfi # $pass = dlopen\n\n\t# We need an absolute path.\n\tcase $ladir in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) abs_ladir=$ladir ;;\n\t*)\n\t  abs_ladir=`cd \"$ladir\" && pwd`\n\t  if test -z \"$abs_ladir\"; then\n\t    func_warning \"cannot determine absolute directory name of '$ladir'\"\n\t    func_warning \"passing it literally to the linker, although it might fail\"\n\t    abs_ladir=$ladir\n\t  fi\n\t  ;;\n\tesac\n\tfunc_basename \"$lib\"\n\tlaname=$func_basename_result\n\n\t# Find the relevant object directory and library name.\n\tif test yes = \"$installed\"; then\n\t  if test ! -f \"$lt_sysroot$libdir/$linklib\" && test -f \"$abs_ladir/$linklib\"; then\n\t    func_warning \"library '$lib' was moved.\"\n\t    dir=$ladir\n\t    absdir=$abs_ladir\n\t    libdir=$abs_ladir\n\t  else\n\t    dir=$lt_sysroot$libdir\n\t    absdir=$lt_sysroot$libdir\n\t  fi\n\t  test yes = \"$hardcode_automatic\" && avoidtemprpath=yes\n\telse\n\t  if test ! -f \"$ladir/$objdir/$linklib\" && test -f \"$abs_ladir/$linklib\"; then\n\t    dir=$ladir\n\t    absdir=$abs_ladir\n\t    # Remove this search path later\n\t    func_append notinst_path \" $abs_ladir\"\n\t  else\n\t    dir=$ladir/$objdir\n\t    absdir=$abs_ladir/$objdir\n\t    # Remove this search path later\n\t    func_append notinst_path \" $abs_ladir\"\n\t  fi\n\tfi # $installed = yes\n\tfunc_stripname 'lib' '.la' \"$laname\"\n\tname=$func_stripname_result\n\n\t# This library was specified with -dlpreopen.\n\tif test dlpreopen = \"$pass\"; then\n\t  if test -z \"$libdir\" && test prog = \"$linkmode\"; then\n\t    func_fatal_error \"only libraries may -dlpreopen a convenience library: '$lib'\"\n\t  fi\n\t  case $host in\n\t    # special handling for platforms with PE-DLLs.\n\t    *cygwin* | *mingw* | *cegcc* )\n\t      # Linker will automatically link against shared library if both\n\t      # static and shared are present.  Therefore, ensure we extract\n\t      # symbols from the import library if a shared library is present\n\t      # (otherwise, the dlopen module name will be incorrect).  We do\n\t      # this by putting the import library name into $newdlprefiles.\n\t      # We recover the dlopen module name by 'saving' the la file\n\t      # name in a special purpose variable, and (later) extracting the\n\t      # dlname from the la file.\n\t      if test -n \"$dlname\"; then\n\t        func_tr_sh \"$dir/$linklib\"\n\t        eval \"libfile_$func_tr_sh_result=\\$abs_ladir/\\$laname\"\n\t        func_append newdlprefiles \" $dir/$linklib\"\n\t      else\n\t        func_append newdlprefiles \" $dir/$old_library\"\n\t        # Keep a list of preopened convenience libraries to check\n\t        # that they are being used correctly in the link pass.\n\t        test -z \"$libdir\" && \\\n\t          func_append dlpreconveniencelibs \" $dir/$old_library\"\n\t      fi\n\t    ;;\n\t    * )\n\t      # Prefer using a static library (so that no silly _DYNAMIC symbols\n\t      # are required to link).\n\t      if test -n \"$old_library\"; then\n\t        func_append newdlprefiles \" $dir/$old_library\"\n\t        # Keep a list of preopened convenience libraries to check\n\t        # that they are being used correctly in the link pass.\n\t        test -z \"$libdir\" && \\\n\t          func_append dlpreconveniencelibs \" $dir/$old_library\"\n\t      # Otherwise, use the dlname, so that lt_dlopen finds it.\n\t      elif test -n \"$dlname\"; then\n\t        func_append newdlprefiles \" $dir/$dlname\"\n\t      else\n\t        func_append newdlprefiles \" $dir/$linklib\"\n\t      fi\n\t    ;;\n\t  esac\n\tfi # $pass = dlpreopen\n\n\tif test -z \"$libdir\"; then\n\t  # Link the convenience library\n\t  if test lib = \"$linkmode\"; then\n\t    deplibs=\"$dir/$old_library $deplibs\"\n\t  elif test prog,link = \"$linkmode,$pass\"; then\n\t    compile_deplibs=\"$dir/$old_library $compile_deplibs\"\n\t    finalize_deplibs=\"$dir/$old_library $finalize_deplibs\"\n\t  else\n\t    deplibs=\"$lib $deplibs\" # used for prog,scan pass\n\t  fi\n\t  continue\n\tfi\n\n\n\tif test prog = \"$linkmode\" && test link != \"$pass\"; then\n\t  func_append newlib_search_path \" $ladir\"\n\t  deplibs=\"$lib $deplibs\"\n\n\t  linkalldeplibs=false\n\t  if test no != \"$link_all_deplibs\" || test -z \"$library_names\" ||\n\t     test no = \"$build_libtool_libs\"; then\n\t    linkalldeplibs=:\n\t  fi\n\n\t  tmp_libs=\n\t  for deplib in $dependency_libs; do\n\t    case $deplib in\n\t    -L*) func_stripname '-L' '' \"$deplib\"\n\t         func_resolve_sysroot \"$func_stripname_result\"\n\t         func_append newlib_search_path \" $func_resolve_sysroot_result\"\n\t\t ;;\n\t    esac\n\t    # Need to link against all dependency_libs?\n\t    if $linkalldeplibs; then\n\t      deplibs=\"$deplib $deplibs\"\n\t    else\n\t      # Need to hardcode shared library paths\n\t      # or/and link against static libraries\n\t      newdependency_libs=\"$deplib $newdependency_libs\"\n\t    fi\n\t    if $opt_preserve_dup_deps; then\n\t      case \"$tmp_libs \" in\n\t      *\" $deplib \"*) func_append specialdeplibs \" $deplib\" ;;\n\t      esac\n\t    fi\n\t    func_append tmp_libs \" $deplib\"\n\t  done # for deplib\n\t  continue\n\tfi # $linkmode = prog...\n\n\tif test prog,link = \"$linkmode,$pass\"; then\n\t  if test -n \"$library_names\" &&\n\t     { { test no = \"$prefer_static_libs\" ||\n\t         test built,yes = \"$prefer_static_libs,$installed\"; } ||\n\t       test -z \"$old_library\"; }; then\n\t    # We need to hardcode the library path\n\t    if test -n \"$shlibpath_var\" && test -z \"$avoidtemprpath\"; then\n\t      # Make sure the rpath contains only unique directories.\n\t      case $temp_rpath: in\n\t      *\"$absdir:\"*) ;;\n\t      *) func_append temp_rpath \"$absdir:\" ;;\n\t      esac\n\t    fi\n\n\t    # Hardcode the library path.\n\t    # Skip directories that are in the system default run-time\n\t    # search path.\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $absdir \"*) ;;\n\t    *)\n\t      case \"$compile_rpath \" in\n\t      *\" $absdir \"*) ;;\n\t      *) func_append compile_rpath \" $absdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $libdir \"*) ;;\n\t    *)\n\t      case \"$finalize_rpath \" in\n\t      *\" $libdir \"*) ;;\n\t      *) func_append finalize_rpath \" $libdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t  fi # $linkmode,$pass = prog,link...\n\n\t  if $alldeplibs &&\n\t     { test pass_all = \"$deplibs_check_method\" ||\n\t       { test yes = \"$build_libtool_libs\" &&\n\t\t test -n \"$library_names\"; }; }; then\n\t    # We only need to search for static libraries\n\t    continue\n\t  fi\n\tfi\n\n\tlink_static=no # Whether the deplib will be linked statically\n\tuse_static_libs=$prefer_static_libs\n\tif test built = \"$use_static_libs\" && test yes = \"$installed\"; then\n\t  use_static_libs=no\n\tfi\n\tif test -n \"$library_names\" &&\n\t   { test no = \"$use_static_libs\" || test -z \"$old_library\"; }; then\n\t  case $host in\n\t  *cygwin* | *mingw* | *cegcc* | *os2*)\n\t      # No point in relinking DLLs because paths are not encoded\n\t      func_append notinst_deplibs \" $lib\"\n\t      need_relink=no\n\t    ;;\n\t  *)\n\t    if test no = \"$installed\"; then\n\t      func_append notinst_deplibs \" $lib\"\n\t      need_relink=yes\n\t    fi\n\t    ;;\n\t  esac\n\t  # This is a shared library\n\n\t  # Warn about portability, can't link against -module's on some\n\t  # systems (darwin).  Don't bleat about dlopened modules though!\n\t  dlopenmodule=\n\t  for dlpremoduletest in $dlprefiles; do\n\t    if test \"X$dlpremoduletest\" = \"X$lib\"; then\n\t      dlopenmodule=$dlpremoduletest\n\t      break\n\t    fi\n\t  done\n\t  if test -z \"$dlopenmodule\" && test yes = \"$shouldnotlink\" && test link = \"$pass\"; then\n\t    echo\n\t    if test prog = \"$linkmode\"; then\n\t      $ECHO \"*** Warning: Linking the executable $output against the loadable module\"\n\t    else\n\t      $ECHO \"*** Warning: Linking the shared library $output against the loadable module\"\n\t    fi\n\t    $ECHO \"*** $linklib is not portable!\"\n\t  fi\n\t  if test lib = \"$linkmode\" &&\n\t     test yes = \"$hardcode_into_libs\"; then\n\t    # Hardcode the library path.\n\t    # Skip directories that are in the system default run-time\n\t    # search path.\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $absdir \"*) ;;\n\t    *)\n\t      case \"$compile_rpath \" in\n\t      *\" $absdir \"*) ;;\n\t      *) func_append compile_rpath \" $absdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $libdir \"*) ;;\n\t    *)\n\t      case \"$finalize_rpath \" in\n\t      *\" $libdir \"*) ;;\n\t      *) func_append finalize_rpath \" $libdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t  fi\n\n\t  if test -n \"$old_archive_from_expsyms_cmds\"; then\n\t    # figure out the soname\n\t    set dummy $library_names\n\t    shift\n\t    realname=$1\n\t    shift\n\t    libname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t    # use dlname if we got it. it's perfectly good, no?\n\t    if test -n \"$dlname\"; then\n\t      soname=$dlname\n\t    elif test -n \"$soname_spec\"; then\n\t      # bleh windows\n\t      case $host in\n\t      *cygwin* | mingw* | *cegcc* | *os2*)\n\t        func_arith $current - $age\n\t\tmajor=$func_arith_result\n\t\tversuffix=-$major\n\t\t;;\n\t      esac\n\t      eval soname=\\\"$soname_spec\\\"\n\t    else\n\t      soname=$realname\n\t    fi\n\n\t    # Make a new name for the extract_expsyms_cmds to use\n\t    soroot=$soname\n\t    func_basename \"$soroot\"\n\t    soname=$func_basename_result\n\t    func_stripname 'lib' '.dll' \"$soname\"\n\t    newlib=libimp-$func_stripname_result.a\n\n\t    # If the library has no export list, then create one now\n\t    if test -f \"$output_objdir/$soname-def\"; then :\n\t    else\n\t      func_verbose \"extracting exported symbol list from '$soname'\"\n\t      func_execute_cmds \"$extract_expsyms_cmds\" 'exit $?'\n\t    fi\n\n\t    # Create $newlib\n\t    if test -f \"$output_objdir/$newlib\"; then :; else\n\t      func_verbose \"generating import library for '$soname'\"\n\t      func_execute_cmds \"$old_archive_from_expsyms_cmds\" 'exit $?'\n\t    fi\n\t    # make sure the library variables are pointing to the new library\n\t    dir=$output_objdir\n\t    linklib=$newlib\n\t  fi # test -n \"$old_archive_from_expsyms_cmds\"\n\n\t  if test prog = \"$linkmode\" || test relink != \"$opt_mode\"; then\n\t    add_shlibpath=\n\t    add_dir=\n\t    add=\n\t    lib_linked=yes\n\t    case $hardcode_action in\n\t    immediate | unsupported)\n\t      if test no = \"$hardcode_direct\"; then\n\t\tadd=$dir/$linklib\n\t\tcase $host in\n\t\t  *-*-sco3.2v5.0.[024]*) add_dir=-L$dir ;;\n\t\t  *-*-sysv4*uw2*) add_dir=-L$dir ;;\n\t\t  *-*-sysv5OpenUNIX* | *-*-sysv5UnixWare7.[01].[10]* | \\\n\t\t    *-*-unixware7*) add_dir=-L$dir ;;\n\t\t  *-*-darwin* )\n\t\t    # if the lib is a (non-dlopened) module then we cannot\n\t\t    # link against it, someone is ignoring the earlier warnings\n\t\t    if /usr/bin/file -L $add 2> /dev/null |\n\t\t\t $GREP \": [^:]* bundle\" >/dev/null; then\n\t\t      if test \"X$dlopenmodule\" != \"X$lib\"; then\n\t\t\t$ECHO \"*** Warning: lib $linklib is a module, not a shared library\"\n\t\t\tif test -z \"$old_library\"; then\n\t\t\t  echo\n\t\t\t  echo \"*** And there doesn't seem to be a static archive available\"\n\t\t\t  echo \"*** The link will probably fail, sorry\"\n\t\t\telse\n\t\t\t  add=$dir/$old_library\n\t\t\tfi\n\t\t      elif test -n \"$old_library\"; then\n\t\t\tadd=$dir/$old_library\n\t\t      fi\n\t\t    fi\n\t\tesac\n\t      elif test no = \"$hardcode_minus_L\"; then\n\t\tcase $host in\n\t\t*-*-sunos*) add_shlibpath=$dir ;;\n\t\tesac\n\t\tadd_dir=-L$dir\n\t\tadd=-l$name\n\t      elif test no = \"$hardcode_shlibpath_var\"; then\n\t\tadd_shlibpath=$dir\n\t\tadd=-l$name\n\t      else\n\t\tlib_linked=no\n\t      fi\n\t      ;;\n\t    relink)\n\t      if test yes = \"$hardcode_direct\" &&\n\t         test no = \"$hardcode_direct_absolute\"; then\n\t\tadd=$dir/$linklib\n\t      elif test yes = \"$hardcode_minus_L\"; then\n\t\tadd_dir=-L$absdir\n\t\t# Try looking first in the location we're being installed to.\n\t\tif test -n \"$inst_prefix_dir\"; then\n\t\t  case $libdir in\n\t\t    [\\\\/]*)\n\t\t      func_append add_dir \" -L$inst_prefix_dir$libdir\"\n\t\t      ;;\n\t\t  esac\n\t\tfi\n\t\tadd=-l$name\n\t      elif test yes = \"$hardcode_shlibpath_var\"; then\n\t\tadd_shlibpath=$dir\n\t\tadd=-l$name\n\t      else\n\t\tlib_linked=no\n\t      fi\n\t      ;;\n\t    *) lib_linked=no ;;\n\t    esac\n\n\t    if test yes != \"$lib_linked\"; then\n\t      func_fatal_configuration \"unsupported hardcode properties\"\n\t    fi\n\n\t    if test -n \"$add_shlibpath\"; then\n\t      case :$compile_shlibpath: in\n\t      *\":$add_shlibpath:\"*) ;;\n\t      *) func_append compile_shlibpath \"$add_shlibpath:\" ;;\n\t      esac\n\t    fi\n\t    if test prog = \"$linkmode\"; then\n\t      test -n \"$add_dir\" && compile_deplibs=\"$add_dir $compile_deplibs\"\n\t      test -n \"$add\" && compile_deplibs=\"$add $compile_deplibs\"\n\t    else\n\t      test -n \"$add_dir\" && deplibs=\"$add_dir $deplibs\"\n\t      test -n \"$add\" && deplibs=\"$add $deplibs\"\n\t      if test yes != \"$hardcode_direct\" &&\n\t\t test yes != \"$hardcode_minus_L\" &&\n\t\t test yes = \"$hardcode_shlibpath_var\"; then\n\t\tcase :$finalize_shlibpath: in\n\t\t*\":$libdir:\"*) ;;\n\t\t*) func_append finalize_shlibpath \"$libdir:\" ;;\n\t\tesac\n\t      fi\n\t    fi\n\t  fi\n\n\t  if test prog = \"$linkmode\" || test relink = \"$opt_mode\"; then\n\t    add_shlibpath=\n\t    add_dir=\n\t    add=\n\t    # Finalize command for both is simple: just hardcode it.\n\t    if test yes = \"$hardcode_direct\" &&\n\t       test no = \"$hardcode_direct_absolute\"; then\n\t      add=$libdir/$linklib\n\t    elif test yes = \"$hardcode_minus_L\"; then\n\t      add_dir=-L$libdir\n\t      add=-l$name\n\t    elif test yes = \"$hardcode_shlibpath_var\"; then\n\t      case :$finalize_shlibpath: in\n\t      *\":$libdir:\"*) ;;\n\t      *) func_append finalize_shlibpath \"$libdir:\" ;;\n\t      esac\n\t      add=-l$name\n\t    elif test yes = \"$hardcode_automatic\"; then\n\t      if test -n \"$inst_prefix_dir\" &&\n\t\t test -f \"$inst_prefix_dir$libdir/$linklib\"; then\n\t\tadd=$inst_prefix_dir$libdir/$linklib\n\t      else\n\t\tadd=$libdir/$linklib\n\t      fi\n\t    else\n\t      # We cannot seem to hardcode it, guess we'll fake it.\n\t      add_dir=-L$libdir\n\t      # Try looking first in the location we're being installed to.\n\t      if test -n \"$inst_prefix_dir\"; then\n\t\tcase $libdir in\n\t\t  [\\\\/]*)\n\t\t    func_append add_dir \" -L$inst_prefix_dir$libdir\"\n\t\t    ;;\n\t\tesac\n\t      fi\n\t      add=-l$name\n\t    fi\n\n\t    if test prog = \"$linkmode\"; then\n\t      test -n \"$add_dir\" && finalize_deplibs=\"$add_dir $finalize_deplibs\"\n\t      test -n \"$add\" && finalize_deplibs=\"$add $finalize_deplibs\"\n\t    else\n\t      test -n \"$add_dir\" && deplibs=\"$add_dir $deplibs\"\n\t      test -n \"$add\" && deplibs=\"$add $deplibs\"\n\t    fi\n\t  fi\n\telif test prog = \"$linkmode\"; then\n\t  # Here we assume that one of hardcode_direct or hardcode_minus_L\n\t  # is not unsupported.  This is valid on all known static and\n\t  # shared platforms.\n\t  if test unsupported != \"$hardcode_direct\"; then\n\t    test -n \"$old_library\" && linklib=$old_library\n\t    compile_deplibs=\"$dir/$linklib $compile_deplibs\"\n\t    finalize_deplibs=\"$dir/$linklib $finalize_deplibs\"\n\t  else\n\t    compile_deplibs=\"-l$name -L$dir $compile_deplibs\"\n\t    finalize_deplibs=\"-l$name -L$dir $finalize_deplibs\"\n\t  fi\n\telif test yes = \"$build_libtool_libs\"; then\n\t  # Not a shared library\n\t  if test pass_all != \"$deplibs_check_method\"; then\n\t    # We're trying link a shared library against a static one\n\t    # but the system doesn't support it.\n\n\t    # Just print a warning and add the library to dependency_libs so\n\t    # that the program can be linked against the static library.\n\t    echo\n\t    $ECHO \"*** Warning: This system cannot link to static lib archive $lib.\"\n\t    echo \"*** I have the capability to make that library automatically link in when\"\n\t    echo \"*** you link to this library.  But I can only do this if you have a\"\n\t    echo \"*** shared version of the library, which you do not appear to have.\"\n\t    if test yes = \"$module\"; then\n\t      echo \"*** But as you try to build a module library, libtool will still create \"\n\t      echo \"*** a static module, that should work as long as the dlopening application\"\n\t      echo \"*** is linked with the -dlopen flag to resolve symbols at runtime.\"\n\t      if test -z \"$global_symbol_pipe\"; then\n\t\techo\n\t\techo \"*** However, this would only work if libtool was able to extract symbol\"\n\t\techo \"*** lists from a program, using 'nm' or equivalent, but libtool could\"\n\t\techo \"*** not find such a program.  So, this module is probably useless.\"\n\t\techo \"*** 'nm' from GNU binutils and a full rebuild may help.\"\n\t      fi\n\t      if test no = \"$build_old_libs\"; then\n\t\tbuild_libtool_libs=module\n\t\tbuild_old_libs=yes\n\t      else\n\t\tbuild_libtool_libs=no\n\t      fi\n\t    fi\n\t  else\n\t    deplibs=\"$dir/$old_library $deplibs\"\n\t    link_static=yes\n\t  fi\n\tfi # link shared/static library?\n\n\tif test lib = \"$linkmode\"; then\n\t  if test -n \"$dependency_libs\" &&\n\t     { test yes != \"$hardcode_into_libs\" ||\n\t       test yes = \"$build_old_libs\" ||\n\t       test yes = \"$link_static\"; }; then\n\t    # Extract -R from dependency_libs\n\t    temp_deplibs=\n\t    for libdir in $dependency_libs; do\n\t      case $libdir in\n\t      -R*) func_stripname '-R' '' \"$libdir\"\n\t           temp_xrpath=$func_stripname_result\n\t\t   case \" $xrpath \" in\n\t\t   *\" $temp_xrpath \"*) ;;\n\t\t   *) func_append xrpath \" $temp_xrpath\";;\n\t\t   esac;;\n\t      *) func_append temp_deplibs \" $libdir\";;\n\t      esac\n\t    done\n\t    dependency_libs=$temp_deplibs\n\t  fi\n\n\t  func_append newlib_search_path \" $absdir\"\n\t  # Link against this library\n\t  test no = \"$link_static\" && newdependency_libs=\"$abs_ladir/$laname $newdependency_libs\"\n\t  # ... and its dependency_libs\n\t  tmp_libs=\n\t  for deplib in $dependency_libs; do\n\t    newdependency_libs=\"$deplib $newdependency_libs\"\n\t    case $deplib in\n              -L*) func_stripname '-L' '' \"$deplib\"\n                   func_resolve_sysroot \"$func_stripname_result\";;\n              *) func_resolve_sysroot \"$deplib\" ;;\n            esac\n\t    if $opt_preserve_dup_deps; then\n\t      case \"$tmp_libs \" in\n\t      *\" $func_resolve_sysroot_result \"*)\n                func_append specialdeplibs \" $func_resolve_sysroot_result\" ;;\n\t      esac\n\t    fi\n\t    func_append tmp_libs \" $func_resolve_sysroot_result\"\n\t  done\n\n\t  if test no != \"$link_all_deplibs\"; then\n\t    # Add the search paths of all dependency libraries\n\t    for deplib in $dependency_libs; do\n\t      path=\n\t      case $deplib in\n\t      -L*) path=$deplib ;;\n\t      *.la)\n\t        func_resolve_sysroot \"$deplib\"\n\t        deplib=$func_resolve_sysroot_result\n\t        func_dirname \"$deplib\" \"\" \".\"\n\t\tdir=$func_dirname_result\n\t\t# We need an absolute path.\n\t\tcase $dir in\n\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) absdir=$dir ;;\n\t\t*)\n\t\t  absdir=`cd \"$dir\" && pwd`\n\t\t  if test -z \"$absdir\"; then\n\t\t    func_warning \"cannot determine absolute directory name of '$dir'\"\n\t\t    absdir=$dir\n\t\t  fi\n\t\t  ;;\n\t\tesac\n\t\tif $GREP \"^installed=no\" $deplib > /dev/null; then\n\t\tcase $host in\n\t\t*-*-darwin*)\n\t\t  depdepl=\n\t\t  eval deplibrary_names=`$SED -n -e 's/^library_names=\\(.*\\)$/\\1/p' $deplib`\n\t\t  if test -n \"$deplibrary_names\"; then\n\t\t    for tmp in $deplibrary_names; do\n\t\t      depdepl=$tmp\n\t\t    done\n\t\t    if test -f \"$absdir/$objdir/$depdepl\"; then\n\t\t      depdepl=$absdir/$objdir/$depdepl\n\t\t      darwin_install_name=`$OTOOL -L $depdepl | awk '{if (NR == 2) {print $1;exit}}'`\n                      if test -z \"$darwin_install_name\"; then\n                          darwin_install_name=`$OTOOL64 -L $depdepl  | awk '{if (NR == 2) {print $1;exit}}'`\n                      fi\n\t\t      func_append compiler_flags \" $wl-dylib_file $wl$darwin_install_name:$depdepl\"\n\t\t      func_append linker_flags \" -dylib_file $darwin_install_name:$depdepl\"\n\t\t      path=\n\t\t    fi\n\t\t  fi\n\t\t  ;;\n\t\t*)\n\t\t  path=-L$absdir/$objdir\n\t\t  ;;\n\t\tesac\n\t\telse\n\t\t  eval libdir=`$SED -n -e 's/^libdir=\\(.*\\)$/\\1/p' $deplib`\n\t\t  test -z \"$libdir\" && \\\n\t\t    func_fatal_error \"'$deplib' is not a valid libtool archive\"\n\t\t  test \"$absdir\" != \"$libdir\" && \\\n\t\t    func_warning \"'$deplib' seems to be moved\"\n\n\t\t  path=-L$absdir\n\t\tfi\n\t\t;;\n\t      esac\n\t      case \" $deplibs \" in\n\t      *\" $path \"*) ;;\n\t      *) deplibs=\"$path $deplibs\" ;;\n\t      esac\n\t    done\n\t  fi # link_all_deplibs != no\n\tfi # linkmode = lib\n      done # for deplib in $libs\n      if test link = \"$pass\"; then\n\tif test prog = \"$linkmode\"; then\n\t  compile_deplibs=\"$new_inherited_linker_flags $compile_deplibs\"\n\t  finalize_deplibs=\"$new_inherited_linker_flags $finalize_deplibs\"\n\telse\n\t  compiler_flags=\"$compiler_flags \"`$ECHO \" $new_inherited_linker_flags\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\tfi\n      fi\n      dependency_libs=$newdependency_libs\n      if test dlpreopen = \"$pass\"; then\n\t# Link the dlpreopened libraries before other libraries\n\tfor deplib in $save_deplibs; do\n\t  deplibs=\"$deplib $deplibs\"\n\tdone\n      fi\n      if test dlopen != \"$pass\"; then\n\ttest conv = \"$pass\" || {\n\t  # Make sure lib_search_path contains only unique directories.\n\t  lib_search_path=\n\t  for dir in $newlib_search_path; do\n\t    case \"$lib_search_path \" in\n\t    *\" $dir \"*) ;;\n\t    *) func_append lib_search_path \" $dir\" ;;\n\t    esac\n\t  done\n\t  newlib_search_path=\n\t}\n\n\tif test prog,link = \"$linkmode,$pass\"; then\n\t  vars=\"compile_deplibs finalize_deplibs\"\n\telse\n\t  vars=deplibs\n\tfi\n\tfor var in $vars dependency_libs; do\n\t  # Add libraries to $var in reverse order\n\t  eval tmp_libs=\\\"\\$$var\\\"\n\t  new_libs=\n\t  for deplib in $tmp_libs; do\n\t    # FIXME: Pedantically, this is the right thing to do, so\n\t    #        that some nasty dependency loop isn't accidentally\n\t    #        broken:\n\t    #new_libs=\"$deplib $new_libs\"\n\t    # Pragmatically, this seems to cause very few problems in\n\t    # practice:\n\t    case $deplib in\n\t    -L*) new_libs=\"$deplib $new_libs\" ;;\n\t    -R*) ;;\n\t    *)\n\t      # And here is the reason: when a library appears more\n\t      # than once as an explicit dependence of a library, or\n\t      # is implicitly linked in more than once by the\n\t      # compiler, it is considered special, and multiple\n\t      # occurrences thereof are not removed.  Compare this\n\t      # with having the same library being listed as a\n\t      # dependency of multiple other libraries: in this case,\n\t      # we know (pedantically, we assume) the library does not\n\t      # need to be listed more than once, so we keep only the\n\t      # last copy.  This is not always right, but it is rare\n\t      # enough that we require users that really mean to play\n\t      # such unportable linking tricks to link the library\n\t      # using -Wl,-lname, so that libtool does not consider it\n\t      # for duplicate removal.\n\t      case \" $specialdeplibs \" in\n\t      *\" $deplib \"*) new_libs=\"$deplib $new_libs\" ;;\n\t      *)\n\t\tcase \" $new_libs \" in\n\t\t*\" $deplib \"*) ;;\n\t\t*) new_libs=\"$deplib $new_libs\" ;;\n\t\tesac\n\t\t;;\n\t      esac\n\t      ;;\n\t    esac\n\t  done\n\t  tmp_libs=\n\t  for deplib in $new_libs; do\n\t    case $deplib in\n\t    -L*)\n\t      case \" $tmp_libs \" in\n\t      *\" $deplib \"*) ;;\n\t      *) func_append tmp_libs \" $deplib\" ;;\n\t      esac\n\t      ;;\n\t    *) func_append tmp_libs \" $deplib\" ;;\n\t    esac\n\t  done\n\t  eval $var=\\\"$tmp_libs\\\"\n\tdone # for var\n      fi\n\n      # Add Sun CC postdeps if required:\n      test CXX = \"$tagname\" && {\n        case $host_os in\n        linux*)\n          case `$CC -V 2>&1 | sed 5q` in\n          *Sun\\ C*) # Sun C++ 5.9\n            func_suncc_cstd_abi\n\n            if test no != \"$suncc_use_cstd_abi\"; then\n              func_append postdeps ' -library=Cstd -library=Crun'\n            fi\n            ;;\n          esac\n          ;;\n\n        solaris*)\n          func_cc_basename \"$CC\"\n          case $func_cc_basename_result in\n          CC* | sunCC*)\n            func_suncc_cstd_abi\n\n            if test no != \"$suncc_use_cstd_abi\"; then\n              func_append postdeps ' -library=Cstd -library=Crun'\n            fi\n            ;;\n          esac\n          ;;\n        esac\n      }\n\n      # Last step: remove runtime libs from dependency_libs\n      # (they stay in deplibs)\n      tmp_libs=\n      for i in $dependency_libs; do\n\tcase \" $predeps $postdeps $compiler_lib_search_path \" in\n\t*\" $i \"*)\n\t  i=\n\t  ;;\n\tesac\n\tif test -n \"$i\"; then\n\t  func_append tmp_libs \" $i\"\n\tfi\n      done\n      dependency_libs=$tmp_libs\n    done # for pass\n    if test prog = \"$linkmode\"; then\n      dlfiles=$newdlfiles\n    fi\n    if test prog = \"$linkmode\" || test lib = \"$linkmode\"; then\n      dlprefiles=$newdlprefiles\n    fi\n\n    case $linkmode in\n    oldlib)\n      if test -n \"$dlfiles$dlprefiles\" || test no != \"$dlself\"; then\n\tfunc_warning \"'-dlopen' is ignored for archives\"\n      fi\n\n      case \" $deplibs\" in\n      *\\ -l* | *\\ -L*)\n\tfunc_warning \"'-l' and '-L' are ignored for archives\" ;;\n      esac\n\n      test -n \"$rpath\" && \\\n\tfunc_warning \"'-rpath' is ignored for archives\"\n\n      test -n \"$xrpath\" && \\\n\tfunc_warning \"'-R' is ignored for archives\"\n\n      test -n \"$vinfo\" && \\\n\tfunc_warning \"'-version-info/-version-number' is ignored for archives\"\n\n      test -n \"$release\" && \\\n\tfunc_warning \"'-release' is ignored for archives\"\n\n      test -n \"$export_symbols$export_symbols_regex\" && \\\n\tfunc_warning \"'-export-symbols' is ignored for archives\"\n\n      # Now set the variables for building old libraries.\n      build_libtool_libs=no\n      oldlibs=$output\n      func_append objs \"$old_deplibs\"\n      ;;\n\n    lib)\n      # Make sure we only generate libraries of the form 'libNAME.la'.\n      case $outputname in\n      lib*)\n\tfunc_stripname 'lib' '.la' \"$outputname\"\n\tname=$func_stripname_result\n\teval shared_ext=\\\"$shrext_cmds\\\"\n\teval libname=\\\"$libname_spec\\\"\n\t;;\n      *)\n\ttest no = \"$module\" \\\n\t  && func_fatal_help \"libtool library '$output' must begin with 'lib'\"\n\n\tif test no != \"$need_lib_prefix\"; then\n\t  # Add the \"lib\" prefix for modules if required\n\t  func_stripname '' '.la' \"$outputname\"\n\t  name=$func_stripname_result\n\t  eval shared_ext=\\\"$shrext_cmds\\\"\n\t  eval libname=\\\"$libname_spec\\\"\n\telse\n\t  func_stripname '' '.la' \"$outputname\"\n\t  libname=$func_stripname_result\n\tfi\n\t;;\n      esac\n\n      if test -n \"$objs\"; then\n\tif test pass_all != \"$deplibs_check_method\"; then\n\t  func_fatal_error \"cannot build libtool library '$output' from non-libtool objects on this host:$objs\"\n\telse\n\t  echo\n\t  $ECHO \"*** Warning: Linking the shared library $output against the non-libtool\"\n\t  $ECHO \"*** objects $objs is not portable!\"\n\t  func_append libobjs \" $objs\"\n\tfi\n      fi\n\n      test no = \"$dlself\" \\\n\t|| func_warning \"'-dlopen self' is ignored for libtool libraries\"\n\n      set dummy $rpath\n      shift\n      test 1 -lt \"$#\" \\\n\t&& func_warning \"ignoring multiple '-rpath's for a libtool library\"\n\n      install_libdir=$1\n\n      oldlibs=\n      if test -z \"$rpath\"; then\n\tif test yes = \"$build_libtool_libs\"; then\n\t  # Building a libtool convenience library.\n\t  # Some compilers have problems with a '.al' extension so\n\t  # convenience libraries should have the same extension an\n\t  # archive normally would.\n\t  oldlibs=\"$output_objdir/$libname.$libext $oldlibs\"\n\t  build_libtool_libs=convenience\n\t  build_old_libs=yes\n\tfi\n\n\ttest -n \"$vinfo\" && \\\n\t  func_warning \"'-version-info/-version-number' is ignored for convenience libraries\"\n\n\ttest -n \"$release\" && \\\n\t  func_warning \"'-release' is ignored for convenience libraries\"\n      else\n\n\t# Parse the version information argument.\n\tsave_ifs=$IFS; IFS=:\n\tset dummy $vinfo 0 0 0\n\tshift\n\tIFS=$save_ifs\n\n\ttest -n \"$7\" && \\\n\t  func_fatal_help \"too many parameters to '-version-info'\"\n\n\t# convert absolute version numbers to libtool ages\n\t# this retains compatibility with .la files and attempts\n\t# to make the code below a bit more comprehensible\n\n\tcase $vinfo_number in\n\tyes)\n\t  number_major=$1\n\t  number_minor=$2\n\t  number_revision=$3\n\t  #\n\t  # There are really only two kinds -- those that\n\t  # use the current revision as the major version\n\t  # and those that subtract age and use age as\n\t  # a minor version.  But, then there is irix\n\t  # that has an extra 1 added just for fun\n\t  #\n\t  case $version_type in\n\t  # correct linux to gnu/linux during the next big refactor\n\t  darwin|freebsd-elf|linux|osf|windows|none)\n\t    func_arith $number_major + $number_minor\n\t    current=$func_arith_result\n\t    age=$number_minor\n\t    revision=$number_revision\n\t    ;;\n\t  freebsd-aout|qnx|sunos)\n\t    current=$number_major\n\t    revision=$number_minor\n\t    age=0\n\t    ;;\n\t  irix|nonstopux)\n\t    func_arith $number_major + $number_minor\n\t    current=$func_arith_result\n\t    age=$number_minor\n\t    revision=$number_minor\n\t    lt_irix_increment=no\n\t    ;;\n\t  esac\n\t  ;;\n\tno)\n\t  current=$1\n\t  revision=$2\n\t  age=$3\n\t  ;;\n\tesac\n\n\t# Check that each of the things are valid numbers.\n\tcase $current in\n\t0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]) ;;\n\t*)\n\t  func_error \"CURRENT '$current' must be a nonnegative integer\"\n\t  func_fatal_error \"'$vinfo' is not valid version information\"\n\t  ;;\n\tesac\n\n\tcase $revision in\n\t0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]) ;;\n\t*)\n\t  func_error \"REVISION '$revision' must be a nonnegative integer\"\n\t  func_fatal_error \"'$vinfo' is not valid version information\"\n\t  ;;\n\tesac\n\n\tcase $age in\n\t0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]) ;;\n\t*)\n\t  func_error \"AGE '$age' must be a nonnegative integer\"\n\t  func_fatal_error \"'$vinfo' is not valid version information\"\n\t  ;;\n\tesac\n\n\tif test \"$age\" -gt \"$current\"; then\n\t  func_error \"AGE '$age' is greater than the current interface number '$current'\"\n\t  func_fatal_error \"'$vinfo' is not valid version information\"\n\tfi\n\n\t# Calculate the version variables.\n\tmajor=\n\tversuffix=\n\tverstring=\n\tcase $version_type in\n\tnone) ;;\n\n\tdarwin)\n\t  # Like Linux, but with the current version available in\n\t  # verstring for coding it into the library header\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=$major.$age.$revision\n\t  # Darwin ld doesn't like 0 for these options...\n\t  func_arith $current + 1\n\t  minor_current=$func_arith_result\n\t  xlcverstring=\"$wl-compatibility_version $wl$minor_current $wl-current_version $wl$minor_current.$revision\"\n\t  verstring=\"-compatibility_version $minor_current -current_version $minor_current.$revision\"\n          # On Darwin other compilers\n          case $CC in\n              nagfor*)\n                  verstring=\"$wl-compatibility_version $wl$minor_current $wl-current_version $wl$minor_current.$revision\"\n                  ;;\n              *)\n                  verstring=\"-compatibility_version $minor_current -current_version $minor_current.$revision\"\n                  ;;\n          esac\n\t  ;;\n\n\tfreebsd-aout)\n\t  major=.$current\n\t  versuffix=.$current.$revision\n\t  ;;\n\n\tfreebsd-elf)\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=$major.$age.$revision\n\t  ;;\n\n\tirix | nonstopux)\n\t  if test no = \"$lt_irix_increment\"; then\n\t    func_arith $current - $age\n\t  else\n\t    func_arith $current - $age + 1\n\t  fi\n\t  major=$func_arith_result\n\n\t  case $version_type in\n\t    nonstopux) verstring_prefix=nonstopux ;;\n\t    *)         verstring_prefix=sgi ;;\n\t  esac\n\t  verstring=$verstring_prefix$major.$revision\n\n\t  # Add in all the interfaces that we are compatible with.\n\t  loop=$revision\n\t  while test 0 -ne \"$loop\"; do\n\t    func_arith $revision - $loop\n\t    iface=$func_arith_result\n\t    func_arith $loop - 1\n\t    loop=$func_arith_result\n\t    verstring=$verstring_prefix$major.$iface:$verstring\n\t  done\n\n\t  # Before this point, $major must not contain '.'.\n\t  major=.$major\n\t  versuffix=$major.$revision\n\t  ;;\n\n\tlinux) # correct to gnu/linux during the next big refactor\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=$major.$age.$revision\n\t  ;;\n\n\tosf)\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=.$current.$age.$revision\n\t  verstring=$current.$age.$revision\n\n\t  # Add in all the interfaces that we are compatible with.\n\t  loop=$age\n\t  while test 0 -ne \"$loop\"; do\n\t    func_arith $current - $loop\n\t    iface=$func_arith_result\n\t    func_arith $loop - 1\n\t    loop=$func_arith_result\n\t    verstring=$verstring:$iface.0\n\t  done\n\n\t  # Make executables depend on our current version.\n\t  func_append verstring \":$current.0\"\n\t  ;;\n\n\tqnx)\n\t  major=.$current\n\t  versuffix=.$current\n\t  ;;\n\n\tsco)\n\t  major=.$current\n\t  versuffix=.$current\n\t  ;;\n\n\tsunos)\n\t  major=.$current\n\t  versuffix=.$current.$revision\n\t  ;;\n\n\twindows)\n\t  # Use '-' rather than '.', since we only want one\n\t  # extension on DOS 8.3 file systems.\n\t  func_arith $current - $age\n\t  major=$func_arith_result\n\t  versuffix=-$major\n\t  ;;\n\n\t*)\n\t  func_fatal_configuration \"unknown library version type '$version_type'\"\n\t  ;;\n\tesac\n\n\t# Clear the version info if we defaulted, and they specified a release.\n\tif test -z \"$vinfo\" && test -n \"$release\"; then\n\t  major=\n\t  case $version_type in\n\t  darwin)\n\t    # we can't check for \"0.0\" in archive_cmds due to quoting\n\t    # problems, so we reset it completely\n\t    verstring=\n\t    ;;\n\t  *)\n\t    verstring=0.0\n\t    ;;\n\t  esac\n\t  if test no = \"$need_version\"; then\n\t    versuffix=\n\t  else\n\t    versuffix=.0.0\n\t  fi\n\tfi\n\n\t# Remove version info from name if versioning should be avoided\n\tif test yes,no = \"$avoid_version,$need_version\"; then\n\t  major=\n\t  versuffix=\n\t  verstring=\n\tfi\n\n\t# Check to see if the archive will have undefined symbols.\n\tif test yes = \"$allow_undefined\"; then\n\t  if test unsupported = \"$allow_undefined_flag\"; then\n\t    if test yes = \"$build_old_libs\"; then\n\t      func_warning \"undefined symbols not allowed in $host shared libraries; building static only\"\n\t      build_libtool_libs=no\n\t    else\n\t      func_fatal_error \"can't build $host shared library unless -no-undefined is specified\"\n\t    fi\n\t  fi\n\telse\n\t  # Don't allow undefined symbols.\n\t  allow_undefined_flag=$no_undefined_flag\n\tfi\n\n      fi\n\n      func_generate_dlsyms \"$libname\" \"$libname\" :\n      func_append libobjs \" $symfileobj\"\n      test \" \" = \"$libobjs\" && libobjs=\n\n      if test relink != \"$opt_mode\"; then\n\t# Remove our outputs, but don't remove object files since they\n\t# may have been created when compiling PIC objects.\n\tremovelist=\n\ttempremovelist=`$ECHO \"$output_objdir/*\"`\n\tfor p in $tempremovelist; do\n\t  case $p in\n\t    *.$objext | *.gcno)\n\t       ;;\n\t    $output_objdir/$outputname | $output_objdir/$libname.* | $output_objdir/$libname$release.*)\n\t       if test -n \"$precious_files_regex\"; then\n\t\t if $ECHO \"$p\" | $EGREP -e \"$precious_files_regex\" >/dev/null 2>&1\n\t\t then\n\t\t   continue\n\t\t fi\n\t       fi\n\t       func_append removelist \" $p\"\n\t       ;;\n\t    *) ;;\n\t  esac\n\tdone\n\ttest -n \"$removelist\" && \\\n\t  func_show_eval \"${RM}r \\$removelist\"\n      fi\n\n      # Now set the variables for building old libraries.\n      if test yes = \"$build_old_libs\" && test convenience != \"$build_libtool_libs\"; then\n\tfunc_append oldlibs \" $output_objdir/$libname.$libext\"\n\n\t# Transform .lo files to .o files.\n\toldobjs=\"$objs \"`$ECHO \"$libobjs\" | $SP2NL | $SED \"/\\.$libext$/d; $lo2o\" | $NL2SP`\n      fi\n\n      # Eliminate all temporary directories.\n      #for path in $notinst_path; do\n      #\tlib_search_path=`$ECHO \"$lib_search_path \" | $SED \"s% $path % %g\"`\n      #\tdeplibs=`$ECHO \"$deplibs \" | $SED \"s% -L$path % %g\"`\n      #\tdependency_libs=`$ECHO \"$dependency_libs \" | $SED \"s% -L$path % %g\"`\n      #done\n\n      if test -n \"$xrpath\"; then\n\t# If the user specified any rpath flags, then add them.\n\ttemp_xrpath=\n\tfor libdir in $xrpath; do\n\t  func_replace_sysroot \"$libdir\"\n\t  func_append temp_xrpath \" -R$func_replace_sysroot_result\"\n\t  case \"$finalize_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append finalize_rpath \" $libdir\" ;;\n\t  esac\n\tdone\n\tif test yes != \"$hardcode_into_libs\" || test yes = \"$build_old_libs\"; then\n\t  dependency_libs=\"$temp_xrpath $dependency_libs\"\n\tfi\n      fi\n\n      # Make sure dlfiles contains only unique files that won't be dlpreopened\n      old_dlfiles=$dlfiles\n      dlfiles=\n      for lib in $old_dlfiles; do\n\tcase \" $dlprefiles $dlfiles \" in\n\t*\" $lib \"*) ;;\n\t*) func_append dlfiles \" $lib\" ;;\n\tesac\n      done\n\n      # Make sure dlprefiles contains only unique files\n      old_dlprefiles=$dlprefiles\n      dlprefiles=\n      for lib in $old_dlprefiles; do\n\tcase \"$dlprefiles \" in\n\t*\" $lib \"*) ;;\n\t*) func_append dlprefiles \" $lib\" ;;\n\tesac\n      done\n\n      if test yes = \"$build_libtool_libs\"; then\n\tif test -n \"$rpath\"; then\n\t  case $host in\n\t  *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-*-beos* | *-cegcc* | *-*-haiku*)\n\t    # these systems don't actually have a c library (as such)!\n\t    ;;\n\t  *-*-rhapsody* | *-*-darwin1.[012])\n\t    # Rhapsody C library is in the System framework\n\t    func_append deplibs \" System.ltframework\"\n\t    ;;\n\t  *-*-netbsd*)\n\t    # Don't link with libc until the a.out ld.so is fixed.\n\t    ;;\n\t  *-*-openbsd* | *-*-freebsd* | *-*-dragonfly*)\n\t    # Do not include libc due to us having libc/libc_r.\n\t    ;;\n\t  *-*-sco3.2v5* | *-*-sco5v6*)\n\t    # Causes problems with __ctype\n\t    ;;\n\t  *-*-sysv4.2uw2* | *-*-sysv5* | *-*-unixware* | *-*-OpenUNIX*)\n\t    # Compiler inserts libc in the correct place for threads to work\n\t    ;;\n\t  *)\n\t    # Add libc to deplibs on all other systems if necessary.\n\t    if test yes = \"$build_libtool_need_lc\"; then\n\t      func_append deplibs \" -lc\"\n\t    fi\n\t    ;;\n\t  esac\n\tfi\n\n\t# Transform deplibs into only deplibs that can be linked in shared.\n\tname_save=$name\n\tlibname_save=$libname\n\trelease_save=$release\n\tversuffix_save=$versuffix\n\tmajor_save=$major\n\t# I'm not sure if I'm treating the release correctly.  I think\n\t# release should show up in the -l (ie -lgmp5) so we don't want to\n\t# add it in twice.  Is that correct?\n\trelease=\n\tversuffix=\n\tmajor=\n\tnewdeplibs=\n\tdroppeddeps=no\n\tcase $deplibs_check_method in\n\tpass_all)\n\t  # Don't check for shared/static.  Everything works.\n\t  # This might be a little naive.  We might want to check\n\t  # whether the library exists or not.  But this is on\n\t  # osf3 & osf4 and I'm not really sure... Just\n\t  # implementing what was already the behavior.\n\t  newdeplibs=$deplibs\n\t  ;;\n\ttest_compile)\n\t  # This code stresses the \"libraries are programs\" paradigm to its\n\t  # limits. Maybe even breaks it.  We compile a program, linking it\n\t  # against the deplibs as a proxy for the library.  Then we can check\n\t  # whether they linked in statically or dynamically with ldd.\n\t  $opt_dry_run || $RM conftest.c\n\t  cat > conftest.c <<EOF\n\t  int main() { return 0; }\nEOF\n\t  $opt_dry_run || $RM conftest\n\t  if $LTCC $LTCFLAGS -o conftest conftest.c $deplibs; then\n\t    ldd_output=`ldd conftest`\n\t    for i in $deplibs; do\n\t      case $i in\n\t      -l*)\n\t\tfunc_stripname -l '' \"$i\"\n\t\tname=$func_stripname_result\n\t\tif test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t\t  case \" $predeps $postdeps \" in\n\t\t  *\" $i \"*)\n\t\t    func_append newdeplibs \" $i\"\n\t\t    i=\n\t\t    ;;\n\t\t  esac\n\t\tfi\n\t\tif test -n \"$i\"; then\n\t\t  libname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\t  deplib_matches=`eval \"\\\\$ECHO \\\"$library_names_spec\\\"\"`\n\t\t  set dummy $deplib_matches; shift\n\t\t  deplib_match=$1\n\t\t  if test `expr \"$ldd_output\" : \".*$deplib_match\"` -ne 0; then\n\t\t    func_append newdeplibs \" $i\"\n\t\t  else\n\t\t    droppeddeps=yes\n\t\t    echo\n\t\t    $ECHO \"*** Warning: dynamic linker does not accept needed library $i.\"\n\t\t    echo \"*** I have the capability to make that library automatically link in when\"\n\t\t    echo \"*** you link to this library.  But I can only do this if you have a\"\n\t\t    echo \"*** shared version of the library, which I believe you do not have\"\n\t\t    echo \"*** because a test_compile did reveal that the linker did not use it for\"\n\t\t    echo \"*** its dynamic dependency list that programs get resolved with at runtime.\"\n\t\t  fi\n\t\tfi\n\t\t;;\n\t      *)\n\t\tfunc_append newdeplibs \" $i\"\n\t\t;;\n\t      esac\n\t    done\n\t  else\n\t    # Error occurred in the first compile.  Let's try to salvage\n\t    # the situation: Compile a separate program for each library.\n\t    for i in $deplibs; do\n\t      case $i in\n\t      -l*)\n\t\tfunc_stripname -l '' \"$i\"\n\t\tname=$func_stripname_result\n\t\t$opt_dry_run || $RM conftest\n\t\tif $LTCC $LTCFLAGS -o conftest conftest.c $i; then\n\t\t  ldd_output=`ldd conftest`\n\t\t  if test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t\t    case \" $predeps $postdeps \" in\n\t\t    *\" $i \"*)\n\t\t      func_append newdeplibs \" $i\"\n\t\t      i=\n\t\t      ;;\n\t\t    esac\n\t\t  fi\n\t\t  if test -n \"$i\"; then\n\t\t    libname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\t    deplib_matches=`eval \"\\\\$ECHO \\\"$library_names_spec\\\"\"`\n\t\t    set dummy $deplib_matches; shift\n\t\t    deplib_match=$1\n\t\t    if test `expr \"$ldd_output\" : \".*$deplib_match\"` -ne 0; then\n\t\t      func_append newdeplibs \" $i\"\n\t\t    else\n\t\t      droppeddeps=yes\n\t\t      echo\n\t\t      $ECHO \"*** Warning: dynamic linker does not accept needed library $i.\"\n\t\t      echo \"*** I have the capability to make that library automatically link in when\"\n\t\t      echo \"*** you link to this library.  But I can only do this if you have a\"\n\t\t      echo \"*** shared version of the library, which you do not appear to have\"\n\t\t      echo \"*** because a test_compile did reveal that the linker did not use this one\"\n\t\t      echo \"*** as a dynamic dependency that programs can get resolved with at runtime.\"\n\t\t    fi\n\t\t  fi\n\t\telse\n\t\t  droppeddeps=yes\n\t\t  echo\n\t\t  $ECHO \"*** Warning!  Library $i is needed by this library but I was not able to\"\n\t\t  echo \"*** make it link in!  You will probably need to install it or some\"\n\t\t  echo \"*** library that it depends on before this library will be fully\"\n\t\t  echo \"*** functional.  Installing it before continuing would be even better.\"\n\t\tfi\n\t\t;;\n\t      *)\n\t\tfunc_append newdeplibs \" $i\"\n\t\t;;\n\t      esac\n\t    done\n\t  fi\n\t  ;;\n\tfile_magic*)\n\t  set dummy $deplibs_check_method; shift\n\t  file_magic_regex=`expr \"$deplibs_check_method\" : \"$1 \\(.*\\)\"`\n\t  for a_deplib in $deplibs; do\n\t    case $a_deplib in\n\t    -l*)\n\t      func_stripname -l '' \"$a_deplib\"\n\t      name=$func_stripname_result\n\t      if test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t\tcase \" $predeps $postdeps \" in\n\t\t*\" $a_deplib \"*)\n\t\t  func_append newdeplibs \" $a_deplib\"\n\t\t  a_deplib=\n\t\t  ;;\n\t\tesac\n\t      fi\n\t      if test -n \"$a_deplib\"; then\n\t\tlibname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\tif test -n \"$file_magic_glob\"; then\n\t\t  libnameglob=`func_echo_all \"$libname\" | $SED -e $file_magic_glob`\n\t\telse\n\t\t  libnameglob=$libname\n\t\tfi\n\t\ttest yes = \"$want_nocaseglob\" && nocaseglob=`shopt -p nocaseglob`\n\t\tfor i in $lib_search_path $sys_lib_search_path $shlib_search_path; do\n\t\t  if test yes = \"$want_nocaseglob\"; then\n\t\t    shopt -s nocaseglob\n\t\t    potential_libs=`ls $i/$libnameglob[.-]* 2>/dev/null`\n\t\t    $nocaseglob\n\t\t  else\n\t\t    potential_libs=`ls $i/$libnameglob[.-]* 2>/dev/null`\n\t\t  fi\n\t\t  for potent_lib in $potential_libs; do\n\t\t      # Follow soft links.\n\t\t      if ls -lLd \"$potent_lib\" 2>/dev/null |\n\t\t\t $GREP \" -> \" >/dev/null; then\n\t\t\tcontinue\n\t\t      fi\n\t\t      # The statement above tries to avoid entering an\n\t\t      # endless loop below, in case of cyclic links.\n\t\t      # We might still enter an endless loop, since a link\n\t\t      # loop can be closed while we follow links,\n\t\t      # but so what?\n\t\t      potlib=$potent_lib\n\t\t      while test -h \"$potlib\" 2>/dev/null; do\n\t\t\tpotliblink=`ls -ld $potlib | $SED 's/.* -> //'`\n\t\t\tcase $potliblink in\n\t\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) potlib=$potliblink;;\n\t\t\t*) potlib=`$ECHO \"$potlib\" | $SED 's|[^/]*$||'`\"$potliblink\";;\n\t\t\tesac\n\t\t      done\n\t\t      if eval $file_magic_cmd \\\"\\$potlib\\\" 2>/dev/null |\n\t\t\t $SED -e 10q |\n\t\t\t $EGREP \"$file_magic_regex\" > /dev/null; then\n\t\t\tfunc_append newdeplibs \" $a_deplib\"\n\t\t\ta_deplib=\n\t\t\tbreak 2\n\t\t      fi\n\t\t  done\n\t\tdone\n\t      fi\n\t      if test -n \"$a_deplib\"; then\n\t\tdroppeddeps=yes\n\t\techo\n\t\t$ECHO \"*** Warning: linker path does not have real file for library $a_deplib.\"\n\t\techo \"*** I have the capability to make that library automatically link in when\"\n\t\techo \"*** you link to this library.  But I can only do this if you have a\"\n\t\techo \"*** shared version of the library, which you do not appear to have\"\n\t\techo \"*** because I did check the linker path looking for a file starting\"\n\t\tif test -z \"$potlib\"; then\n\t\t  $ECHO \"*** with $libname but no candidates were found. (...for file magic test)\"\n\t\telse\n\t\t  $ECHO \"*** with $libname and none of the candidates passed a file format test\"\n\t\t  $ECHO \"*** using a file magic. Last file checked: $potlib\"\n\t\tfi\n\t      fi\n\t      ;;\n\t    *)\n\t      # Add a -L argument.\n\t      func_append newdeplibs \" $a_deplib\"\n\t      ;;\n\t    esac\n\t  done # Gone through all deplibs.\n\t  ;;\n\tmatch_pattern*)\n\t  set dummy $deplibs_check_method; shift\n\t  match_pattern_regex=`expr \"$deplibs_check_method\" : \"$1 \\(.*\\)\"`\n\t  for a_deplib in $deplibs; do\n\t    case $a_deplib in\n\t    -l*)\n\t      func_stripname -l '' \"$a_deplib\"\n\t      name=$func_stripname_result\n\t      if test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t\tcase \" $predeps $postdeps \" in\n\t\t*\" $a_deplib \"*)\n\t\t  func_append newdeplibs \" $a_deplib\"\n\t\t  a_deplib=\n\t\t  ;;\n\t\tesac\n\t      fi\n\t      if test -n \"$a_deplib\"; then\n\t\tlibname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\tfor i in $lib_search_path $sys_lib_search_path $shlib_search_path; do\n\t\t  potential_libs=`ls $i/$libname[.-]* 2>/dev/null`\n\t\t  for potent_lib in $potential_libs; do\n\t\t    potlib=$potent_lib # see symlink-check above in file_magic test\n\t\t    if eval \"\\$ECHO \\\"$potent_lib\\\"\" 2>/dev/null | $SED 10q | \\\n\t\t       $EGREP \"$match_pattern_regex\" > /dev/null; then\n\t\t      func_append newdeplibs \" $a_deplib\"\n\t\t      a_deplib=\n\t\t      break 2\n\t\t    fi\n\t\t  done\n\t\tdone\n\t      fi\n\t      if test -n \"$a_deplib\"; then\n\t\tdroppeddeps=yes\n\t\techo\n\t\t$ECHO \"*** Warning: linker path does not have real file for library $a_deplib.\"\n\t\techo \"*** I have the capability to make that library automatically link in when\"\n\t\techo \"*** you link to this library.  But I can only do this if you have a\"\n\t\techo \"*** shared version of the library, which you do not appear to have\"\n\t\techo \"*** because I did check the linker path looking for a file starting\"\n\t\tif test -z \"$potlib\"; then\n\t\t  $ECHO \"*** with $libname but no candidates were found. (...for regex pattern test)\"\n\t\telse\n\t\t  $ECHO \"*** with $libname and none of the candidates passed a file format test\"\n\t\t  $ECHO \"*** using a regex pattern. Last file checked: $potlib\"\n\t\tfi\n\t      fi\n\t      ;;\n\t    *)\n\t      # Add a -L argument.\n\t      func_append newdeplibs \" $a_deplib\"\n\t      ;;\n\t    esac\n\t  done # Gone through all deplibs.\n\t  ;;\n\tnone | unknown | *)\n\t  newdeplibs=\n\t  tmp_deplibs=`$ECHO \" $deplibs\" | $SED 's/ -lc$//; s/ -[LR][^ ]*//g'`\n\t  if test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t    for i in $predeps $postdeps; do\n\t      # can't use Xsed below, because $i might contain '/'\n\t      tmp_deplibs=`$ECHO \" $tmp_deplibs\" | $SED \"s|$i||\"`\n\t    done\n\t  fi\n\t  case $tmp_deplibs in\n\t  *[!\\\t\\ ]*)\n\t    echo\n\t    if test none = \"$deplibs_check_method\"; then\n\t      echo \"*** Warning: inter-library dependencies are not supported in this platform.\"\n\t    else\n\t      echo \"*** Warning: inter-library dependencies are not known to be supported.\"\n\t    fi\n\t    echo \"*** All declared inter-library dependencies are being dropped.\"\n\t    droppeddeps=yes\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n\tversuffix=$versuffix_save\n\tmajor=$major_save\n\trelease=$release_save\n\tlibname=$libname_save\n\tname=$name_save\n\n\tcase $host in\n\t*-*-rhapsody* | *-*-darwin1.[012])\n\t  # On Rhapsody replace the C library with the System framework\n\t  newdeplibs=`$ECHO \" $newdeplibs\" | $SED 's/ -lc / System.ltframework /'`\n\t  ;;\n\tesac\n\n\tif test yes = \"$droppeddeps\"; then\n\t  if test yes = \"$module\"; then\n\t    echo\n\t    echo \"*** Warning: libtool could not satisfy all declared inter-library\"\n\t    $ECHO \"*** dependencies of module $libname.  Therefore, libtool will create\"\n\t    echo \"*** a static module, that should work as long as the dlopening\"\n\t    echo \"*** application is linked with the -dlopen flag.\"\n\t    if test -z \"$global_symbol_pipe\"; then\n\t      echo\n\t      echo \"*** However, this would only work if libtool was able to extract symbol\"\n\t      echo \"*** lists from a program, using 'nm' or equivalent, but libtool could\"\n\t      echo \"*** not find such a program.  So, this module is probably useless.\"\n\t      echo \"*** 'nm' from GNU binutils and a full rebuild may help.\"\n\t    fi\n\t    if test no = \"$build_old_libs\"; then\n\t      oldlibs=$output_objdir/$libname.$libext\n\t      build_libtool_libs=module\n\t      build_old_libs=yes\n\t    else\n\t      build_libtool_libs=no\n\t    fi\n\t  else\n\t    echo \"*** The inter-library dependencies that have been dropped here will be\"\n\t    echo \"*** automatically added whenever a program is linked with this library\"\n\t    echo \"*** or is declared to -dlopen it.\"\n\n\t    if test no = \"$allow_undefined\"; then\n\t      echo\n\t      echo \"*** Since this library must not contain undefined symbols,\"\n\t      echo \"*** because either the platform does not support them or\"\n\t      echo \"*** it was explicitly requested with -no-undefined,\"\n\t      echo \"*** libtool will only create a static version of it.\"\n\t      if test no = \"$build_old_libs\"; then\n\t\toldlibs=$output_objdir/$libname.$libext\n\t\tbuild_libtool_libs=module\n\t\tbuild_old_libs=yes\n\t      else\n\t\tbuild_libtool_libs=no\n\t      fi\n\t    fi\n\t  fi\n\tfi\n\t# Done checking deplibs!\n\tdeplibs=$newdeplibs\n      fi\n      # Time to change all our \"foo.ltframework\" stuff back to \"-framework foo\"\n      case $host in\n\t*-*-darwin*)\n\t  newdeplibs=`$ECHO \" $newdeplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t  new_inherited_linker_flags=`$ECHO \" $new_inherited_linker_flags\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t  deplibs=`$ECHO \" $deplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t  ;;\n      esac\n\n      # move library search paths that coincide with paths to not yet\n      # installed libraries to the beginning of the library search list\n      new_libs=\n      for path in $notinst_path; do\n\tcase \" $new_libs \" in\n\t*\" -L$path/$objdir \"*) ;;\n\t*)\n\t  case \" $deplibs \" in\n\t  *\" -L$path/$objdir \"*)\n\t    func_append new_libs \" -L$path/$objdir\" ;;\n\t  esac\n\t  ;;\n\tesac\n      done\n      for deplib in $deplibs; do\n\tcase $deplib in\n\t-L*)\n\t  case \" $new_libs \" in\n\t  *\" $deplib \"*) ;;\n\t  *) func_append new_libs \" $deplib\" ;;\n\t  esac\n\t  ;;\n\t*) func_append new_libs \" $deplib\" ;;\n\tesac\n      done\n      deplibs=$new_libs\n\n      # All the library-specific variables (install_libdir is set above).\n      library_names=\n      old_library=\n      dlname=\n\n      # Test again, we may have decided not to build it any more\n      if test yes = \"$build_libtool_libs\"; then\n\t# Remove $wl instances when linking with ld.\n\t# FIXME: should test the right _cmds variable.\n\tcase $archive_cmds in\n\t  *\\$LD\\ *) wl= ;;\n        esac\n\tif test yes = \"$hardcode_into_libs\"; then\n\t  # Hardcode the library paths\n\t  hardcode_libdirs=\n\t  dep_rpath=\n\t  rpath=$finalize_rpath\n\t  test relink = \"$opt_mode\" || rpath=$compile_rpath$rpath\n\t  for libdir in $rpath; do\n\t    if test -n \"$hardcode_libdir_flag_spec\"; then\n\t      if test -n \"$hardcode_libdir_separator\"; then\n\t\tfunc_replace_sysroot \"$libdir\"\n\t\tlibdir=$func_replace_sysroot_result\n\t\tif test -z \"$hardcode_libdirs\"; then\n\t\t  hardcode_libdirs=$libdir\n\t\telse\n\t\t  # Just accumulate the unique libdirs.\n\t\t  case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in\n\t\t  *\"$hardcode_libdir_separator$libdir$hardcode_libdir_separator\"*)\n\t\t    ;;\n\t\t  *)\n\t\t    func_append hardcode_libdirs \"$hardcode_libdir_separator$libdir\"\n\t\t    ;;\n\t\t  esac\n\t\tfi\n\t      else\n\t\teval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\t\tfunc_append dep_rpath \" $flag\"\n\t      fi\n\t    elif test -n \"$runpath_var\"; then\n\t      case \"$perm_rpath \" in\n\t      *\" $libdir \"*) ;;\n\t      *) func_append perm_rpath \" $libdir\" ;;\n\t      esac\n\t    fi\n\t  done\n\t  # Substitute the hardcoded libdirs into the rpath.\n\t  if test -n \"$hardcode_libdir_separator\" &&\n\t     test -n \"$hardcode_libdirs\"; then\n\t    libdir=$hardcode_libdirs\n\t    eval \"dep_rpath=\\\"$hardcode_libdir_flag_spec\\\"\"\n\t  fi\n\t  if test -n \"$runpath_var\" && test -n \"$perm_rpath\"; then\n\t    # We should set the runpath_var.\n\t    rpath=\n\t    for dir in $perm_rpath; do\n\t      func_append rpath \"$dir:\"\n\t    done\n\t    eval \"$runpath_var='$rpath\\$$runpath_var'; export $runpath_var\"\n\t  fi\n\t  test -n \"$dep_rpath\" && deplibs=\"$dep_rpath $deplibs\"\n\tfi\n\n\tshlibpath=$finalize_shlibpath\n\ttest relink = \"$opt_mode\" || shlibpath=$compile_shlibpath$shlibpath\n\tif test -n \"$shlibpath\"; then\n\t  eval \"$shlibpath_var='$shlibpath\\$$shlibpath_var'; export $shlibpath_var\"\n\tfi\n\n\t# Get the real and link names of the library.\n\teval shared_ext=\\\"$shrext_cmds\\\"\n\teval library_names=\\\"$library_names_spec\\\"\n\tset dummy $library_names\n\tshift\n\trealname=$1\n\tshift\n\n\tif test -n \"$soname_spec\"; then\n\t  eval soname=\\\"$soname_spec\\\"\n\telse\n\t  soname=$realname\n\tfi\n\tif test -z \"$dlname\"; then\n\t  dlname=$soname\n\tfi\n\n\tlib=$output_objdir/$realname\n\tlinknames=\n\tfor link\n\tdo\n\t  func_append linknames \" $link\"\n\tdone\n\n\t# Use standard objects if they are pic\n\ttest -z \"$pic_flag\" && libobjs=`$ECHO \"$libobjs\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n\ttest \"X$libobjs\" = \"X \" && libobjs=\n\n\tdelfiles=\n\tif test -n \"$export_symbols\" && test -n \"$include_expsyms\"; then\n\t  $opt_dry_run || cp \"$export_symbols\" \"$output_objdir/$libname.uexp\"\n\t  export_symbols=$output_objdir/$libname.uexp\n\t  func_append delfiles \" $export_symbols\"\n\tfi\n\n\torig_export_symbols=\n\tcase $host_os in\n\tcygwin* | mingw* | cegcc*)\n\t  if test -n \"$export_symbols\" && test -z \"$export_symbols_regex\"; then\n\t    # exporting using user supplied symfile\n\t    func_dll_def_p \"$export_symbols\" || {\n\t      # and it's NOT already a .def file. Must figure out\n\t      # which of the given symbols are data symbols and tag\n\t      # them as such. So, trigger use of export_symbols_cmds.\n\t      # export_symbols gets reassigned inside the \"prepare\n\t      # the list of exported symbols\" if statement, so the\n\t      # include_expsyms logic still works.\n\t      orig_export_symbols=$export_symbols\n\t      export_symbols=\n\t      always_export_symbols=yes\n\t    }\n\t  fi\n\t  ;;\n\tesac\n\n\t# Prepare the list of exported symbols\n\tif test -z \"$export_symbols\"; then\n\t  if test yes = \"$always_export_symbols\" || test -n \"$export_symbols_regex\"; then\n\t    func_verbose \"generating symbol list for '$libname.la'\"\n\t    export_symbols=$output_objdir/$libname.exp\n\t    $opt_dry_run || $RM $export_symbols\n\t    cmds=$export_symbols_cmds\n\t    save_ifs=$IFS; IFS='~'\n\t    for cmd1 in $cmds; do\n\t      IFS=$save_ifs\n\t      # Take the normal branch if the nm_file_list_spec branch\n\t      # doesn't work or if tool conversion is not needed.\n\t      case $nm_file_list_spec~$to_tool_file_cmd in\n\t\t*~func_convert_file_noop | *~func_convert_file_msys_to_w32 | ~*)\n\t\t  try_normal_branch=yes\n\t\t  eval cmd=\\\"$cmd1\\\"\n\t\t  func_len \" $cmd\"\n\t\t  len=$func_len_result\n\t\t  ;;\n\t\t*)\n\t\t  try_normal_branch=no\n\t\t  ;;\n\t      esac\n\t      if test yes = \"$try_normal_branch\" \\\n\t\t && { test \"$len\" -lt \"$max_cmd_len\" \\\n\t\t      || test \"$max_cmd_len\" -le -1; }\n\t      then\n\t\tfunc_show_eval \"$cmd\" 'exit $?'\n\t\tskipped_export=false\n\t      elif test -n \"$nm_file_list_spec\"; then\n\t\tfunc_basename \"$output\"\n\t\toutput_la=$func_basename_result\n\t\tsave_libobjs=$libobjs\n\t\tsave_output=$output\n\t\toutput=$output_objdir/$output_la.nm\n\t\tfunc_to_tool_file \"$output\"\n\t\tlibobjs=$nm_file_list_spec$func_to_tool_file_result\n\t\tfunc_append delfiles \" $output\"\n\t\tfunc_verbose \"creating $NM input file list: $output\"\n\t\tfor obj in $save_libobjs; do\n\t\t  func_to_tool_file \"$obj\"\n\t\t  $ECHO \"$func_to_tool_file_result\"\n\t\tdone > \"$output\"\n\t\teval cmd=\\\"$cmd1\\\"\n\t\tfunc_show_eval \"$cmd\" 'exit $?'\n\t\toutput=$save_output\n\t\tlibobjs=$save_libobjs\n\t\tskipped_export=false\n\t      else\n\t\t# The command line is too long to execute in one step.\n\t\tfunc_verbose \"using reloadable object file for export list...\"\n\t\tskipped_export=:\n\t\t# Break out early, otherwise skipped_export may be\n\t\t# set to false by a later but shorter cmd.\n\t\tbreak\n\t      fi\n\t    done\n\t    IFS=$save_ifs\n\t    if test -n \"$export_symbols_regex\" && test : != \"$skipped_export\"; then\n\t      func_show_eval '$EGREP -e \"$export_symbols_regex\" \"$export_symbols\" > \"${export_symbols}T\"'\n\t      func_show_eval '$MV \"${export_symbols}T\" \"$export_symbols\"'\n\t    fi\n\t  fi\n\tfi\n\n\tif test -n \"$export_symbols\" && test -n \"$include_expsyms\"; then\n\t  tmp_export_symbols=$export_symbols\n\t  test -n \"$orig_export_symbols\" && tmp_export_symbols=$orig_export_symbols\n\t  $opt_dry_run || eval '$ECHO \"$include_expsyms\" | $SP2NL >> \"$tmp_export_symbols\"'\n\tfi\n\n\tif test : != \"$skipped_export\" && test -n \"$orig_export_symbols\"; then\n\t  # The given exports_symbols file has to be filtered, so filter it.\n\t  func_verbose \"filter symbol list for '$libname.la' to tag DATA exports\"\n\t  # FIXME: $output_objdir/$libname.filter potentially contains lots of\n\t  # 's' commands, which not all seds can handle. GNU sed should be fine\n\t  # though. Also, the filter scales superlinearly with the number of\n\t  # global variables. join(1) would be nice here, but unfortunately\n\t  # isn't a blessed tool.\n\t  $opt_dry_run || $SED -e '/[ ,]DATA/!d;s,\\(.*\\)\\([ \\,].*\\),s|^\\1$|\\1\\2|,' < $export_symbols > $output_objdir/$libname.filter\n\t  func_append delfiles \" $export_symbols $output_objdir/$libname.filter\"\n\t  export_symbols=$output_objdir/$libname.def\n\t  $opt_dry_run || $SED -f $output_objdir/$libname.filter < $orig_export_symbols > $export_symbols\n\tfi\n\n\ttmp_deplibs=\n\tfor test_deplib in $deplibs; do\n\t  case \" $convenience \" in\n\t  *\" $test_deplib \"*) ;;\n\t  *)\n\t    func_append tmp_deplibs \" $test_deplib\"\n\t    ;;\n\t  esac\n\tdone\n\tdeplibs=$tmp_deplibs\n\n\tif test -n \"$convenience\"; then\n\t  if test -n \"$whole_archive_flag_spec\" &&\n\t    test yes = \"$compiler_needs_object\" &&\n\t    test -z \"$libobjs\"; then\n\t    # extract the archives, so we have objects to list.\n\t    # TODO: could optimize this to just extract one archive.\n\t    whole_archive_flag_spec=\n\t  fi\n\t  if test -n \"$whole_archive_flag_spec\"; then\n\t    save_libobjs=$libobjs\n\t    eval libobjs=\\\"\\$libobjs $whole_archive_flag_spec\\\"\n\t    test \"X$libobjs\" = \"X \" && libobjs=\n\t  else\n\t    gentop=$output_objdir/${outputname}x\n\t    func_append generated \" $gentop\"\n\n\t    func_extract_archives $gentop $convenience\n\t    func_append libobjs \" $func_extract_archives_result\"\n\t    test \"X$libobjs\" = \"X \" && libobjs=\n\t  fi\n\tfi\n\n\tif test yes = \"$thread_safe\" && test -n \"$thread_safe_flag_spec\"; then\n\t  eval flag=\\\"$thread_safe_flag_spec\\\"\n\t  func_append linker_flags \" $flag\"\n\tfi\n\n\t# Make a backup of the uninstalled library when relinking\n\tif test relink = \"$opt_mode\"; then\n\t  $opt_dry_run || eval '(cd $output_objdir && $RM ${realname}U && $MV $realname ${realname}U)' || exit $?\n\tfi\n\n\t# Do each of the archive commands.\n\tif test yes = \"$module\" && test -n \"$module_cmds\"; then\n\t  if test -n \"$export_symbols\" && test -n \"$module_expsym_cmds\"; then\n\t    eval test_cmds=\\\"$module_expsym_cmds\\\"\n\t    cmds=$module_expsym_cmds\n\t  else\n\t    eval test_cmds=\\\"$module_cmds\\\"\n\t    cmds=$module_cmds\n\t  fi\n\telse\n\t  if test -n \"$export_symbols\" && test -n \"$archive_expsym_cmds\"; then\n\t    eval test_cmds=\\\"$archive_expsym_cmds\\\"\n\t    cmds=$archive_expsym_cmds\n\t  else\n\t    eval test_cmds=\\\"$archive_cmds\\\"\n\t    cmds=$archive_cmds\n\t  fi\n\tfi\n\n\tif test : != \"$skipped_export\" &&\n\t   func_len \" $test_cmds\" &&\n\t   len=$func_len_result &&\n\t   test \"$len\" -lt \"$max_cmd_len\" || test \"$max_cmd_len\" -le -1; then\n\t  :\n\telse\n\t  # The command line is too long to link in one step, link piecewise\n\t  # or, if using GNU ld and skipped_export is not :, use a linker\n\t  # script.\n\n\t  # Save the value of $output and $libobjs because we want to\n\t  # use them later.  If we have whole_archive_flag_spec, we\n\t  # want to use save_libobjs as it was before\n\t  # whole_archive_flag_spec was expanded, because we can't\n\t  # assume the linker understands whole_archive_flag_spec.\n\t  # This may have to be revisited, in case too many\n\t  # convenience libraries get linked in and end up exceeding\n\t  # the spec.\n\t  if test -z \"$convenience\" || test -z \"$whole_archive_flag_spec\"; then\n\t    save_libobjs=$libobjs\n\t  fi\n\t  save_output=$output\n\t  func_basename \"$output\"\n\t  output_la=$func_basename_result\n\n\t  # Clear the reloadable object creation command queue and\n\t  # initialize k to one.\n\t  test_cmds=\n\t  concat_cmds=\n\t  objlist=\n\t  last_robj=\n\t  k=1\n\n\t  if test -n \"$save_libobjs\" && test : != \"$skipped_export\" && test yes = \"$with_gnu_ld\"; then\n\t    output=$output_objdir/$output_la.lnkscript\n\t    func_verbose \"creating GNU ld script: $output\"\n\t    echo 'INPUT (' > $output\n\t    for obj in $save_libobjs\n\t    do\n\t      func_to_tool_file \"$obj\"\n\t      $ECHO \"$func_to_tool_file_result\" >> $output\n\t    done\n\t    echo ')' >> $output\n\t    func_append delfiles \" $output\"\n\t    func_to_tool_file \"$output\"\n\t    output=$func_to_tool_file_result\n\t  elif test -n \"$save_libobjs\" && test : != \"$skipped_export\" && test -n \"$file_list_spec\"; then\n\t    output=$output_objdir/$output_la.lnk\n\t    func_verbose \"creating linker input file list: $output\"\n\t    : > $output\n\t    set x $save_libobjs\n\t    shift\n\t    firstobj=\n\t    if test yes = \"$compiler_needs_object\"; then\n\t      firstobj=\"$1 \"\n\t      shift\n\t    fi\n\t    for obj\n\t    do\n\t      func_to_tool_file \"$obj\"\n\t      $ECHO \"$func_to_tool_file_result\" >> $output\n\t    done\n\t    func_append delfiles \" $output\"\n\t    func_to_tool_file \"$output\"\n\t    output=$firstobj\\\"$file_list_spec$func_to_tool_file_result\\\"\n\t  else\n\t    if test -n \"$save_libobjs\"; then\n\t      func_verbose \"creating reloadable object files...\"\n\t      output=$output_objdir/$output_la-$k.$objext\n\t      eval test_cmds=\\\"$reload_cmds\\\"\n\t      func_len \" $test_cmds\"\n\t      len0=$func_len_result\n\t      len=$len0\n\n\t      # Loop over the list of objects to be linked.\n\t      for obj in $save_libobjs\n\t      do\n\t\tfunc_len \" $obj\"\n\t\tfunc_arith $len + $func_len_result\n\t\tlen=$func_arith_result\n\t\tif test -z \"$objlist\" ||\n\t\t   test \"$len\" -lt \"$max_cmd_len\"; then\n\t\t  func_append objlist \" $obj\"\n\t\telse\n\t\t  # The command $test_cmds is almost too long, add a\n\t\t  # command to the queue.\n\t\t  if test 1 -eq \"$k\"; then\n\t\t    # The first file doesn't have a previous command to add.\n\t\t    reload_objs=$objlist\n\t\t    eval concat_cmds=\\\"$reload_cmds\\\"\n\t\t  else\n\t\t    # All subsequent reloadable object files will link in\n\t\t    # the last one created.\n\t\t    reload_objs=\"$objlist $last_robj\"\n\t\t    eval concat_cmds=\\\"\\$concat_cmds~$reload_cmds~\\$RM $last_robj\\\"\n\t\t  fi\n\t\t  last_robj=$output_objdir/$output_la-$k.$objext\n\t\t  func_arith $k + 1\n\t\t  k=$func_arith_result\n\t\t  output=$output_objdir/$output_la-$k.$objext\n\t\t  objlist=\" $obj\"\n\t\t  func_len \" $last_robj\"\n\t\t  func_arith $len0 + $func_len_result\n\t\t  len=$func_arith_result\n\t\tfi\n\t      done\n\t      # Handle the remaining objects by creating one last\n\t      # reloadable object file.  All subsequent reloadable object\n\t      # files will link in the last one created.\n\t      test -z \"$concat_cmds\" || concat_cmds=$concat_cmds~\n\t      reload_objs=\"$objlist $last_robj\"\n\t      eval concat_cmds=\\\"\\$concat_cmds$reload_cmds\\\"\n\t      if test -n \"$last_robj\"; then\n\t        eval concat_cmds=\\\"\\$concat_cmds~\\$RM $last_robj\\\"\n\t      fi\n\t      func_append delfiles \" $output\"\n\n\t    else\n\t      output=\n\t    fi\n\n\t    ${skipped_export-false} && {\n\t      func_verbose \"generating symbol list for '$libname.la'\"\n\t      export_symbols=$output_objdir/$libname.exp\n\t      $opt_dry_run || $RM $export_symbols\n\t      libobjs=$output\n\t      # Append the command to create the export file.\n\t      test -z \"$concat_cmds\" || concat_cmds=$concat_cmds~\n\t      eval concat_cmds=\\\"\\$concat_cmds$export_symbols_cmds\\\"\n\t      if test -n \"$last_robj\"; then\n\t\teval concat_cmds=\\\"\\$concat_cmds~\\$RM $last_robj\\\"\n\t      fi\n\t    }\n\n\t    test -n \"$save_libobjs\" &&\n\t      func_verbose \"creating a temporary reloadable object file: $output\"\n\n\t    # Loop through the commands generated above and execute them.\n\t    save_ifs=$IFS; IFS='~'\n\t    for cmd in $concat_cmds; do\n\t      IFS=$save_ifs\n\t      $opt_quiet || {\n\t\t  func_quote_for_expand \"$cmd\"\n\t\t  eval \"func_echo $func_quote_for_expand_result\"\n\t      }\n\t      $opt_dry_run || eval \"$cmd\" || {\n\t\tlt_exit=$?\n\n\t\t# Restore the uninstalled library and exit\n\t\tif test relink = \"$opt_mode\"; then\n\t\t  ( cd \"$output_objdir\" && \\\n\t\t    $RM \"${realname}T\" && \\\n\t\t    $MV \"${realname}U\" \"$realname\" )\n\t\tfi\n\n\t\texit $lt_exit\n\t      }\n\t    done\n\t    IFS=$save_ifs\n\n\t    if test -n \"$export_symbols_regex\" && ${skipped_export-false}; then\n\t      func_show_eval '$EGREP -e \"$export_symbols_regex\" \"$export_symbols\" > \"${export_symbols}T\"'\n\t      func_show_eval '$MV \"${export_symbols}T\" \"$export_symbols\"'\n\t    fi\n\t  fi\n\n          ${skipped_export-false} && {\n\t    if test -n \"$export_symbols\" && test -n \"$include_expsyms\"; then\n\t      tmp_export_symbols=$export_symbols\n\t      test -n \"$orig_export_symbols\" && tmp_export_symbols=$orig_export_symbols\n\t      $opt_dry_run || eval '$ECHO \"$include_expsyms\" | $SP2NL >> \"$tmp_export_symbols\"'\n\t    fi\n\n\t    if test -n \"$orig_export_symbols\"; then\n\t      # The given exports_symbols file has to be filtered, so filter it.\n\t      func_verbose \"filter symbol list for '$libname.la' to tag DATA exports\"\n\t      # FIXME: $output_objdir/$libname.filter potentially contains lots of\n\t      # 's' commands, which not all seds can handle. GNU sed should be fine\n\t      # though. Also, the filter scales superlinearly with the number of\n\t      # global variables. join(1) would be nice here, but unfortunately\n\t      # isn't a blessed tool.\n\t      $opt_dry_run || $SED -e '/[ ,]DATA/!d;s,\\(.*\\)\\([ \\,].*\\),s|^\\1$|\\1\\2|,' < $export_symbols > $output_objdir/$libname.filter\n\t      func_append delfiles \" $export_symbols $output_objdir/$libname.filter\"\n\t      export_symbols=$output_objdir/$libname.def\n\t      $opt_dry_run || $SED -f $output_objdir/$libname.filter < $orig_export_symbols > $export_symbols\n\t    fi\n\t  }\n\n\t  libobjs=$output\n\t  # Restore the value of output.\n\t  output=$save_output\n\n\t  if test -n \"$convenience\" && test -n \"$whole_archive_flag_spec\"; then\n\t    eval libobjs=\\\"\\$libobjs $whole_archive_flag_spec\\\"\n\t    test \"X$libobjs\" = \"X \" && libobjs=\n\t  fi\n\t  # Expand the library linking commands again to reset the\n\t  # value of $libobjs for piecewise linking.\n\n\t  # Do each of the archive commands.\n\t  if test yes = \"$module\" && test -n \"$module_cmds\"; then\n\t    if test -n \"$export_symbols\" && test -n \"$module_expsym_cmds\"; then\n\t      cmds=$module_expsym_cmds\n\t    else\n\t      cmds=$module_cmds\n\t    fi\n\t  else\n\t    if test -n \"$export_symbols\" && test -n \"$archive_expsym_cmds\"; then\n\t      cmds=$archive_expsym_cmds\n\t    else\n\t      cmds=$archive_cmds\n\t    fi\n\t  fi\n\tfi\n\n\tif test -n \"$delfiles\"; then\n\t  # Append the command to remove temporary files to $cmds.\n\t  eval cmds=\\\"\\$cmds~\\$RM $delfiles\\\"\n\tfi\n\n\t# Add any objects from preloaded convenience libraries\n\tif test -n \"$dlprefiles\"; then\n\t  gentop=$output_objdir/${outputname}x\n\t  func_append generated \" $gentop\"\n\n\t  func_extract_archives $gentop $dlprefiles\n\t  func_append libobjs \" $func_extract_archives_result\"\n\t  test \"X$libobjs\" = \"X \" && libobjs=\n\tfi\n\n\tsave_ifs=$IFS; IFS='~'\n\tfor cmd in $cmds; do\n\t  IFS=$sp$nl\n\t  eval cmd=\\\"$cmd\\\"\n\t  IFS=$save_ifs\n\t  $opt_quiet || {\n\t    func_quote_for_expand \"$cmd\"\n\t    eval \"func_echo $func_quote_for_expand_result\"\n\t  }\n\t  $opt_dry_run || eval \"$cmd\" || {\n\t    lt_exit=$?\n\n\t    # Restore the uninstalled library and exit\n\t    if test relink = \"$opt_mode\"; then\n\t      ( cd \"$output_objdir\" && \\\n\t        $RM \"${realname}T\" && \\\n\t\t$MV \"${realname}U\" \"$realname\" )\n\t    fi\n\n\t    exit $lt_exit\n\t  }\n\tdone\n\tIFS=$save_ifs\n\n\t# Restore the uninstalled library and exit\n\tif test relink = \"$opt_mode\"; then\n\t  $opt_dry_run || eval '(cd $output_objdir && $RM ${realname}T && $MV $realname ${realname}T && $MV ${realname}U $realname)' || exit $?\n\n\t  if test -n \"$convenience\"; then\n\t    if test -z \"$whole_archive_flag_spec\"; then\n\t      func_show_eval '${RM}r \"$gentop\"'\n\t    fi\n\t  fi\n\n\t  exit $EXIT_SUCCESS\n\tfi\n\n\t# Create links to the real library.\n\tfor linkname in $linknames; do\n\t  if test \"$realname\" != \"$linkname\"; then\n\t    func_show_eval '(cd \"$output_objdir\" && $RM \"$linkname\" && $LN_S \"$realname\" \"$linkname\")' 'exit $?'\n\t  fi\n\tdone\n\n\t# If -module or -export-dynamic was specified, set the dlname.\n\tif test yes = \"$module\" || test yes = \"$export_dynamic\"; then\n\t  # On all known operating systems, these are identical.\n\t  dlname=$soname\n\tfi\n      fi\n      ;;\n\n    obj)\n      if test -n \"$dlfiles$dlprefiles\" || test no != \"$dlself\"; then\n\tfunc_warning \"'-dlopen' is ignored for objects\"\n      fi\n\n      case \" $deplibs\" in\n      *\\ -l* | *\\ -L*)\n\tfunc_warning \"'-l' and '-L' are ignored for objects\" ;;\n      esac\n\n      test -n \"$rpath\" && \\\n\tfunc_warning \"'-rpath' is ignored for objects\"\n\n      test -n \"$xrpath\" && \\\n\tfunc_warning \"'-R' is ignored for objects\"\n\n      test -n \"$vinfo\" && \\\n\tfunc_warning \"'-version-info' is ignored for objects\"\n\n      test -n \"$release\" && \\\n\tfunc_warning \"'-release' is ignored for objects\"\n\n      case $output in\n      *.lo)\n\ttest -n \"$objs$old_deplibs\" && \\\n\t  func_fatal_error \"cannot build library object '$output' from non-libtool objects\"\n\n\tlibobj=$output\n\tfunc_lo2o \"$libobj\"\n\tobj=$func_lo2o_result\n\t;;\n      *)\n\tlibobj=\n\tobj=$output\n\t;;\n      esac\n\n      # Delete the old objects.\n      $opt_dry_run || $RM $obj $libobj\n\n      # Objects from convenience libraries.  This assumes\n      # single-version convenience libraries.  Whenever we create\n      # different ones for PIC/non-PIC, this we'll have to duplicate\n      # the extraction.\n      reload_conv_objs=\n      gentop=\n      # if reload_cmds runs $LD directly, get rid of -Wl from\n      # whole_archive_flag_spec and hope we can get by with turning comma\n      # into space.\n      case $reload_cmds in\n        *\\$LD[\\ \\$]*) wl= ;;\n      esac\n      if test -n \"$convenience\"; then\n\tif test -n \"$whole_archive_flag_spec\"; then\n\t  eval tmp_whole_archive_flags=\\\"$whole_archive_flag_spec\\\"\n\t  test -n \"$wl\" || tmp_whole_archive_flags=`$ECHO \"$tmp_whole_archive_flags\" | $SED 's|,| |g'`\n\t  reload_conv_objs=$reload_objs\\ $tmp_whole_archive_flags\n\telse\n\t  gentop=$output_objdir/${obj}x\n\t  func_append generated \" $gentop\"\n\n\t  func_extract_archives $gentop $convenience\n\t  reload_conv_objs=\"$reload_objs $func_extract_archives_result\"\n\tfi\n      fi\n\n      # If we're not building shared, we need to use non_pic_objs\n      test yes = \"$build_libtool_libs\" || libobjs=$non_pic_objects\n\n      # Create the old-style object.\n      reload_objs=$objs$old_deplibs' '`$ECHO \"$libobjs\" | $SP2NL | $SED \"/\\.$libext$/d; /\\.lib$/d; $lo2o\" | $NL2SP`' '$reload_conv_objs\n\n      output=$obj\n      func_execute_cmds \"$reload_cmds\" 'exit $?'\n\n      # Exit if we aren't doing a library object file.\n      if test -z \"$libobj\"; then\n\tif test -n \"$gentop\"; then\n\t  func_show_eval '${RM}r \"$gentop\"'\n\tfi\n\n\texit $EXIT_SUCCESS\n      fi\n\n      test yes = \"$build_libtool_libs\" || {\n\tif test -n \"$gentop\"; then\n\t  func_show_eval '${RM}r \"$gentop\"'\n\tfi\n\n\t# Create an invalid libtool object if no PIC, so that we don't\n\t# accidentally link it into a program.\n\t# $show \"echo timestamp > $libobj\"\n\t# $opt_dry_run || eval \"echo timestamp > $libobj\" || exit $?\n\texit $EXIT_SUCCESS\n      }\n\n      if test -n \"$pic_flag\" || test default != \"$pic_mode\"; then\n\t# Only do commands if we really have different PIC objects.\n\treload_objs=\"$libobjs $reload_conv_objs\"\n\toutput=$libobj\n\tfunc_execute_cmds \"$reload_cmds\" 'exit $?'\n      fi\n\n      if test -n \"$gentop\"; then\n\tfunc_show_eval '${RM}r \"$gentop\"'\n      fi\n\n      exit $EXIT_SUCCESS\n      ;;\n\n    prog)\n      case $host in\n\t*cygwin*) func_stripname '' '.exe' \"$output\"\n\t          output=$func_stripname_result.exe;;\n      esac\n      test -n \"$vinfo\" && \\\n\tfunc_warning \"'-version-info' is ignored for programs\"\n\n      test -n \"$release\" && \\\n\tfunc_warning \"'-release' is ignored for programs\"\n\n      $preload \\\n\t&& test unknown,unknown,unknown = \"$dlopen_support,$dlopen_self,$dlopen_self_static\" \\\n\t&& func_warning \"'LT_INIT([dlopen])' not used. Assuming no dlopen support.\"\n\n      case $host in\n      *-*-rhapsody* | *-*-darwin1.[012])\n\t# On Rhapsody replace the C library is the System framework\n\tcompile_deplibs=`$ECHO \" $compile_deplibs\" | $SED 's/ -lc / System.ltframework /'`\n\tfinalize_deplibs=`$ECHO \" $finalize_deplibs\" | $SED 's/ -lc / System.ltframework /'`\n\t;;\n      esac\n\n      case $host in\n      *-*-darwin*)\n\t# Don't allow lazy linking, it breaks C++ global constructors\n\t# But is supposedly fixed on 10.4 or later (yay!).\n\tif test CXX = \"$tagname\"; then\n\t  case ${MACOSX_DEPLOYMENT_TARGET-10.0} in\n\t    10.[0123])\n\t      func_append compile_command \" $wl-bind_at_load\"\n\t      func_append finalize_command \" $wl-bind_at_load\"\n\t    ;;\n\t  esac\n\tfi\n\t# Time to change all our \"foo.ltframework\" stuff back to \"-framework foo\"\n\tcompile_deplibs=`$ECHO \" $compile_deplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\tfinalize_deplibs=`$ECHO \" $finalize_deplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t;;\n      esac\n\n\n      # move library search paths that coincide with paths to not yet\n      # installed libraries to the beginning of the library search list\n      new_libs=\n      for path in $notinst_path; do\n\tcase \" $new_libs \" in\n\t*\" -L$path/$objdir \"*) ;;\n\t*)\n\t  case \" $compile_deplibs \" in\n\t  *\" -L$path/$objdir \"*)\n\t    func_append new_libs \" -L$path/$objdir\" ;;\n\t  esac\n\t  ;;\n\tesac\n      done\n      for deplib in $compile_deplibs; do\n\tcase $deplib in\n\t-L*)\n\t  case \" $new_libs \" in\n\t  *\" $deplib \"*) ;;\n\t  *) func_append new_libs \" $deplib\" ;;\n\t  esac\n\t  ;;\n\t*) func_append new_libs \" $deplib\" ;;\n\tesac\n      done\n      compile_deplibs=$new_libs\n\n\n      func_append compile_command \" $compile_deplibs\"\n      func_append finalize_command \" $finalize_deplibs\"\n\n      if test -n \"$rpath$xrpath\"; then\n\t# If the user specified any rpath flags, then add them.\n\tfor libdir in $rpath $xrpath; do\n\t  # This is the magic to use -rpath.\n\t  case \"$finalize_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append finalize_rpath \" $libdir\" ;;\n\t  esac\n\tdone\n      fi\n\n      # Now hardcode the library paths\n      rpath=\n      hardcode_libdirs=\n      for libdir in $compile_rpath $finalize_rpath; do\n\tif test -n \"$hardcode_libdir_flag_spec\"; then\n\t  if test -n \"$hardcode_libdir_separator\"; then\n\t    if test -z \"$hardcode_libdirs\"; then\n\t      hardcode_libdirs=$libdir\n\t    else\n\t      # Just accumulate the unique libdirs.\n\t      case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in\n\t      *\"$hardcode_libdir_separator$libdir$hardcode_libdir_separator\"*)\n\t\t;;\n\t      *)\n\t\tfunc_append hardcode_libdirs \"$hardcode_libdir_separator$libdir\"\n\t\t;;\n\t      esac\n\t    fi\n\t  else\n\t    eval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\t    func_append rpath \" $flag\"\n\t  fi\n\telif test -n \"$runpath_var\"; then\n\t  case \"$perm_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append perm_rpath \" $libdir\" ;;\n\t  esac\n\tfi\n\tcase $host in\n\t*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-cegcc*)\n\t  testbindir=`$ECHO \"$libdir\" | $SED -e 's*/lib$*/bin*'`\n\t  case :$dllsearchpath: in\n\t  *\":$libdir:\"*) ;;\n\t  ::) dllsearchpath=$libdir;;\n\t  *) func_append dllsearchpath \":$libdir\";;\n\t  esac\n\t  case :$dllsearchpath: in\n\t  *\":$testbindir:\"*) ;;\n\t  ::) dllsearchpath=$testbindir;;\n\t  *) func_append dllsearchpath \":$testbindir\";;\n\t  esac\n\t  ;;\n\tesac\n      done\n      # Substitute the hardcoded libdirs into the rpath.\n      if test -n \"$hardcode_libdir_separator\" &&\n\t test -n \"$hardcode_libdirs\"; then\n\tlibdir=$hardcode_libdirs\n\teval rpath=\\\" $hardcode_libdir_flag_spec\\\"\n      fi\n      compile_rpath=$rpath\n\n      rpath=\n      hardcode_libdirs=\n      for libdir in $finalize_rpath; do\n\tif test -n \"$hardcode_libdir_flag_spec\"; then\n\t  if test -n \"$hardcode_libdir_separator\"; then\n\t    if test -z \"$hardcode_libdirs\"; then\n\t      hardcode_libdirs=$libdir\n\t    else\n\t      # Just accumulate the unique libdirs.\n\t      case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in\n\t      *\"$hardcode_libdir_separator$libdir$hardcode_libdir_separator\"*)\n\t\t;;\n\t      *)\n\t\tfunc_append hardcode_libdirs \"$hardcode_libdir_separator$libdir\"\n\t\t;;\n\t      esac\n\t    fi\n\t  else\n\t    eval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\t    func_append rpath \" $flag\"\n\t  fi\n\telif test -n \"$runpath_var\"; then\n\t  case \"$finalize_perm_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append finalize_perm_rpath \" $libdir\" ;;\n\t  esac\n\tfi\n      done\n      # Substitute the hardcoded libdirs into the rpath.\n      if test -n \"$hardcode_libdir_separator\" &&\n\t test -n \"$hardcode_libdirs\"; then\n\tlibdir=$hardcode_libdirs\n\teval rpath=\\\" $hardcode_libdir_flag_spec\\\"\n      fi\n      finalize_rpath=$rpath\n\n      if test -n \"$libobjs\" && test yes = \"$build_old_libs\"; then\n\t# Transform all the library objects into standard objects.\n\tcompile_command=`$ECHO \"$compile_command\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n\tfinalize_command=`$ECHO \"$finalize_command\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n      fi\n\n      func_generate_dlsyms \"$outputname\" \"@PROGRAM@\" false\n\n      # template prelinking step\n      if test -n \"$prelink_cmds\"; then\n\tfunc_execute_cmds \"$prelink_cmds\" 'exit $?'\n      fi\n\n      wrappers_required=:\n      case $host in\n      *cegcc* | *mingw32ce*)\n        # Disable wrappers for cegcc and mingw32ce hosts, we are cross compiling anyway.\n        wrappers_required=false\n        ;;\n      *cygwin* | *mingw* )\n        test yes = \"$build_libtool_libs\" || wrappers_required=false\n        ;;\n      *)\n        if test no = \"$need_relink\" || test yes != \"$build_libtool_libs\"; then\n          wrappers_required=false\n        fi\n        ;;\n      esac\n      $wrappers_required || {\n\t# Replace the output file specification.\n\tcompile_command=`$ECHO \"$compile_command\" | $SED 's%@OUTPUT@%'\"$output\"'%g'`\n\tlink_command=$compile_command$compile_rpath\n\n\t# We have no uninstalled library dependencies, so finalize right now.\n\texit_status=0\n\tfunc_show_eval \"$link_command\" 'exit_status=$?'\n\n\tif test -n \"$postlink_cmds\"; then\n\t  func_to_tool_file \"$output\"\n\t  postlink_cmds=`func_echo_all \"$postlink_cmds\" | $SED -e 's%@OUTPUT@%'\"$output\"'%g' -e 's%@TOOL_OUTPUT@%'\"$func_to_tool_file_result\"'%g'`\n\t  func_execute_cmds \"$postlink_cmds\" 'exit $?'\n\tfi\n\n\t# Delete the generated files.\n\tif test -f \"$output_objdir/${outputname}S.$objext\"; then\n\t  func_show_eval '$RM \"$output_objdir/${outputname}S.$objext\"'\n\tfi\n\n\texit $exit_status\n      }\n\n      if test -n \"$compile_shlibpath$finalize_shlibpath\"; then\n\tcompile_command=\"$shlibpath_var=\\\"$compile_shlibpath$finalize_shlibpath\\$$shlibpath_var\\\" $compile_command\"\n      fi\n      if test -n \"$finalize_shlibpath\"; then\n\tfinalize_command=\"$shlibpath_var=\\\"$finalize_shlibpath\\$$shlibpath_var\\\" $finalize_command\"\n      fi\n\n      compile_var=\n      finalize_var=\n      if test -n \"$runpath_var\"; then\n\tif test -n \"$perm_rpath\"; then\n\t  # We should set the runpath_var.\n\t  rpath=\n\t  for dir in $perm_rpath; do\n\t    func_append rpath \"$dir:\"\n\t  done\n\t  compile_var=\"$runpath_var=\\\"$rpath\\$$runpath_var\\\" \"\n\tfi\n\tif test -n \"$finalize_perm_rpath\"; then\n\t  # We should set the runpath_var.\n\t  rpath=\n\t  for dir in $finalize_perm_rpath; do\n\t    func_append rpath \"$dir:\"\n\t  done\n\t  finalize_var=\"$runpath_var=\\\"$rpath\\$$runpath_var\\\" \"\n\tfi\n      fi\n\n      if test yes = \"$no_install\"; then\n\t# We don't need to create a wrapper script.\n\tlink_command=$compile_var$compile_command$compile_rpath\n\t# Replace the output file specification.\n\tlink_command=`$ECHO \"$link_command\" | $SED 's%@OUTPUT@%'\"$output\"'%g'`\n\t# Delete the old output file.\n\t$opt_dry_run || $RM $output\n\t# Link the executable and exit\n\tfunc_show_eval \"$link_command\" 'exit $?'\n\n\tif test -n \"$postlink_cmds\"; then\n\t  func_to_tool_file \"$output\"\n\t  postlink_cmds=`func_echo_all \"$postlink_cmds\" | $SED -e 's%@OUTPUT@%'\"$output\"'%g' -e 's%@TOOL_OUTPUT@%'\"$func_to_tool_file_result\"'%g'`\n\t  func_execute_cmds \"$postlink_cmds\" 'exit $?'\n\tfi\n\n\texit $EXIT_SUCCESS\n      fi\n\n      case $hardcode_action,$fast_install in\n        relink,*)\n\t  # Fast installation is not supported\n\t  link_command=$compile_var$compile_command$compile_rpath\n\t  relink_command=$finalize_var$finalize_command$finalize_rpath\n\n\t  func_warning \"this platform does not like uninstalled shared libraries\"\n\t  func_warning \"'$output' will be relinked during installation\"\n\t  ;;\n        *,yes)\n\t  link_command=$finalize_var$compile_command$finalize_rpath\n\t  relink_command=`$ECHO \"$compile_var$compile_command$compile_rpath\" | $SED 's%@OUTPUT@%\\$progdir/\\$file%g'`\n          ;;\n\t*,no)\n\t  link_command=$compile_var$compile_command$compile_rpath\n\t  relink_command=$finalize_var$finalize_command$finalize_rpath\n          ;;\n\t*,needless)\n\t  link_command=$finalize_var$compile_command$finalize_rpath\n\t  relink_command=\n          ;;\n      esac\n\n      # Replace the output file specification.\n      link_command=`$ECHO \"$link_command\" | $SED 's%@OUTPUT@%'\"$output_objdir/$outputname\"'%g'`\n\n      # Delete the old output files.\n      $opt_dry_run || $RM $output $output_objdir/$outputname $output_objdir/lt-$outputname\n\n      func_show_eval \"$link_command\" 'exit $?'\n\n      if test -n \"$postlink_cmds\"; then\n\tfunc_to_tool_file \"$output_objdir/$outputname\"\n\tpostlink_cmds=`func_echo_all \"$postlink_cmds\" | $SED -e 's%@OUTPUT@%'\"$output_objdir/$outputname\"'%g' -e 's%@TOOL_OUTPUT@%'\"$func_to_tool_file_result\"'%g'`\n\tfunc_execute_cmds \"$postlink_cmds\" 'exit $?'\n      fi\n\n      # Now create the wrapper script.\n      func_verbose \"creating $output\"\n\n      # Quote the relink command for shipping.\n      if test -n \"$relink_command\"; then\n\t# Preserve any variables that may affect compiler behavior\n\tfor var in $variables_saved_for_relink; do\n\t  if eval test -z \\\"\\${$var+set}\\\"; then\n\t    relink_command=\"{ test -z \\\"\\${$var+set}\\\" || $lt_unset $var || { $var=; export $var; }; }; $relink_command\"\n\t  elif eval var_value=\\$$var; test -z \"$var_value\"; then\n\t    relink_command=\"$var=; export $var; $relink_command\"\n\t  else\n\t    func_quote_for_eval \"$var_value\"\n\t    relink_command=\"$var=$func_quote_for_eval_result; export $var; $relink_command\"\n\t  fi\n\tdone\n\trelink_command=\"(cd `pwd`; $relink_command)\"\n\trelink_command=`$ECHO \"$relink_command\" | $SED \"$sed_quote_subst\"`\n      fi\n\n      # Only actually do things if not in dry run mode.\n      $opt_dry_run || {\n\t# win32 will think the script is a binary if it has\n\t# a .exe suffix, so we strip it off here.\n\tcase $output in\n\t  *.exe) func_stripname '' '.exe' \"$output\"\n\t         output=$func_stripname_result ;;\n\tesac\n\t# test for cygwin because mv fails w/o .exe extensions\n\tcase $host in\n\t  *cygwin*)\n\t    exeext=.exe\n\t    func_stripname '' '.exe' \"$outputname\"\n\t    outputname=$func_stripname_result ;;\n\t  *) exeext= ;;\n\tesac\n\tcase $host in\n\t  *cygwin* | *mingw* )\n\t    func_dirname_and_basename \"$output\" \"\" \".\"\n\t    output_name=$func_basename_result\n\t    output_path=$func_dirname_result\n\t    cwrappersource=$output_path/$objdir/lt-$output_name.c\n\t    cwrapper=$output_path/$output_name.exe\n\t    $RM $cwrappersource $cwrapper\n\t    trap \"$RM $cwrappersource $cwrapper; exit $EXIT_FAILURE\" 1 2 15\n\n\t    func_emit_cwrapperexe_src > $cwrappersource\n\n\t    # The wrapper executable is built using the $host compiler,\n\t    # because it contains $host paths and files. If cross-\n\t    # compiling, it, like the target executable, must be\n\t    # executed on the $host or under an emulation environment.\n\t    $opt_dry_run || {\n\t      $LTCC $LTCFLAGS -o $cwrapper $cwrappersource\n\t      $STRIP $cwrapper\n\t    }\n\n\t    # Now, create the wrapper script for func_source use:\n\t    func_ltwrapper_scriptname $cwrapper\n\t    $RM $func_ltwrapper_scriptname_result\n\t    trap \"$RM $func_ltwrapper_scriptname_result; exit $EXIT_FAILURE\" 1 2 15\n\t    $opt_dry_run || {\n\t      # note: this script will not be executed, so do not chmod.\n\t      if test \"x$build\" = \"x$host\"; then\n\t\t$cwrapper --lt-dump-script > $func_ltwrapper_scriptname_result\n\t      else\n\t\tfunc_emit_wrapper no > $func_ltwrapper_scriptname_result\n\t      fi\n\t    }\n\t  ;;\n\t  * )\n\t    $RM $output\n\t    trap \"$RM $output; exit $EXIT_FAILURE\" 1 2 15\n\n\t    func_emit_wrapper no > $output\n\t    chmod +x $output\n\t  ;;\n\tesac\n      }\n      exit $EXIT_SUCCESS\n      ;;\n    esac\n\n    # See if we need to build an old-fashioned archive.\n    for oldlib in $oldlibs; do\n\n      case $build_libtool_libs in\n        convenience)\n\t  oldobjs=\"$libobjs_save $symfileobj\"\n\t  addlibs=$convenience\n\t  build_libtool_libs=no\n\t  ;;\n\tmodule)\n\t  oldobjs=$libobjs_save\n\t  addlibs=$old_convenience\n\t  build_libtool_libs=no\n          ;;\n\t*)\n\t  oldobjs=\"$old_deplibs $non_pic_objects\"\n\t  $preload && test -f \"$symfileobj\" \\\n\t    && func_append oldobjs \" $symfileobj\"\n\t  addlibs=$old_convenience\n\t  ;;\n      esac\n\n      if test -n \"$addlibs\"; then\n\tgentop=$output_objdir/${outputname}x\n\tfunc_append generated \" $gentop\"\n\n\tfunc_extract_archives $gentop $addlibs\n\tfunc_append oldobjs \" $func_extract_archives_result\"\n      fi\n\n      # Do each command in the archive commands.\n      if test -n \"$old_archive_from_new_cmds\" && test yes = \"$build_libtool_libs\"; then\n\tcmds=$old_archive_from_new_cmds\n      else\n\n\t# Add any objects from preloaded convenience libraries\n\tif test -n \"$dlprefiles\"; then\n\t  gentop=$output_objdir/${outputname}x\n\t  func_append generated \" $gentop\"\n\n\t  func_extract_archives $gentop $dlprefiles\n\t  func_append oldobjs \" $func_extract_archives_result\"\n\tfi\n\n\t# POSIX demands no paths to be encoded in archives.  We have\n\t# to avoid creating archives with duplicate basenames if we\n\t# might have to extract them afterwards, e.g., when creating a\n\t# static archive out of a convenience library, or when linking\n\t# the entirety of a libtool archive into another (currently\n\t# not supported by libtool).\n\tif (for obj in $oldobjs\n\t    do\n\t      func_basename \"$obj\"\n\t      $ECHO \"$func_basename_result\"\n\t    done | sort | sort -uc >/dev/null 2>&1); then\n\t  :\n\telse\n\t  echo \"copying selected object files to avoid basename conflicts...\"\n\t  gentop=$output_objdir/${outputname}x\n\t  func_append generated \" $gentop\"\n\t  func_mkdir_p \"$gentop\"\n\t  save_oldobjs=$oldobjs\n\t  oldobjs=\n\t  counter=1\n\t  for obj in $save_oldobjs\n\t  do\n\t    func_basename \"$obj\"\n\t    objbase=$func_basename_result\n\t    case \" $oldobjs \" in\n\t    \" \") oldobjs=$obj ;;\n\t    *[\\ /]\"$objbase \"*)\n\t      while :; do\n\t\t# Make sure we don't pick an alternate name that also\n\t\t# overlaps.\n\t\tnewobj=lt$counter-$objbase\n\t\tfunc_arith $counter + 1\n\t\tcounter=$func_arith_result\n\t\tcase \" $oldobjs \" in\n\t\t*[\\ /]\"$newobj \"*) ;;\n\t\t*) if test ! -f \"$gentop/$newobj\"; then break; fi ;;\n\t\tesac\n\t      done\n\t      func_show_eval \"ln $obj $gentop/$newobj || cp $obj $gentop/$newobj\"\n\t      func_append oldobjs \" $gentop/$newobj\"\n\t      ;;\n\t    *) func_append oldobjs \" $obj\" ;;\n\t    esac\n\t  done\n\tfi\n\tfunc_to_tool_file \"$oldlib\" func_convert_file_msys_to_w32\n\ttool_oldlib=$func_to_tool_file_result\n\teval cmds=\\\"$old_archive_cmds\\\"\n\n\tfunc_len \" $cmds\"\n\tlen=$func_len_result\n\tif test \"$len\" -lt \"$max_cmd_len\" || test \"$max_cmd_len\" -le -1; then\n\t  cmds=$old_archive_cmds\n\telif test -n \"$archiver_list_spec\"; then\n\t  func_verbose \"using command file archive linking...\"\n\t  for obj in $oldobjs\n\t  do\n\t    func_to_tool_file \"$obj\"\n\t    $ECHO \"$func_to_tool_file_result\"\n\t  done > $output_objdir/$libname.libcmd\n\t  func_to_tool_file \"$output_objdir/$libname.libcmd\"\n\t  oldobjs=\" $archiver_list_spec$func_to_tool_file_result\"\n\t  cmds=$old_archive_cmds\n\telse\n\t  # the command line is too long to link in one step, link in parts\n\t  func_verbose \"using piecewise archive linking...\"\n\t  save_RANLIB=$RANLIB\n\t  RANLIB=:\n\t  objlist=\n\t  concat_cmds=\n\t  save_oldobjs=$oldobjs\n\t  oldobjs=\n\t  # Is there a better way of finding the last object in the list?\n\t  for obj in $save_oldobjs\n\t  do\n\t    last_oldobj=$obj\n\t  done\n\t  eval test_cmds=\\\"$old_archive_cmds\\\"\n\t  func_len \" $test_cmds\"\n\t  len0=$func_len_result\n\t  len=$len0\n\t  for obj in $save_oldobjs\n\t  do\n\t    func_len \" $obj\"\n\t    func_arith $len + $func_len_result\n\t    len=$func_arith_result\n\t    func_append objlist \" $obj\"\n\t    if test \"$len\" -lt \"$max_cmd_len\"; then\n\t      :\n\t    else\n\t      # the above command should be used before it gets too long\n\t      oldobjs=$objlist\n\t      if test \"$obj\" = \"$last_oldobj\"; then\n\t\tRANLIB=$save_RANLIB\n\t      fi\n\t      test -z \"$concat_cmds\" || concat_cmds=$concat_cmds~\n\t      eval concat_cmds=\\\"\\$concat_cmds$old_archive_cmds\\\"\n\t      objlist=\n\t      len=$len0\n\t    fi\n\t  done\n\t  RANLIB=$save_RANLIB\n\t  oldobjs=$objlist\n\t  if test -z \"$oldobjs\"; then\n\t    eval cmds=\\\"\\$concat_cmds\\\"\n\t  else\n\t    eval cmds=\\\"\\$concat_cmds~\\$old_archive_cmds\\\"\n\t  fi\n\tfi\n      fi\n      func_execute_cmds \"$cmds\" 'exit $?'\n    done\n\n    test -n \"$generated\" && \\\n      func_show_eval \"${RM}r$generated\"\n\n    # Now create the libtool archive.\n    case $output in\n    *.la)\n      old_library=\n      test yes = \"$build_old_libs\" && old_library=$libname.$libext\n      func_verbose \"creating $output\"\n\n      # Preserve any variables that may affect compiler behavior\n      for var in $variables_saved_for_relink; do\n\tif eval test -z \\\"\\${$var+set}\\\"; then\n\t  relink_command=\"{ test -z \\\"\\${$var+set}\\\" || $lt_unset $var || { $var=; export $var; }; }; $relink_command\"\n\telif eval var_value=\\$$var; test -z \"$var_value\"; then\n\t  relink_command=\"$var=; export $var; $relink_command\"\n\telse\n\t  func_quote_for_eval \"$var_value\"\n\t  relink_command=\"$var=$func_quote_for_eval_result; export $var; $relink_command\"\n\tfi\n      done\n      # Quote the link command for shipping.\n      relink_command=\"(cd `pwd`; $SHELL \\\"$progpath\\\" $preserve_args --mode=relink $libtool_args @inst_prefix_dir@)\"\n      relink_command=`$ECHO \"$relink_command\" | $SED \"$sed_quote_subst\"`\n      if test yes = \"$hardcode_automatic\"; then\n\trelink_command=\n      fi\n\n      # Only create the output if not a dry run.\n      $opt_dry_run || {\n\tfor installed in no yes; do\n\t  if test yes = \"$installed\"; then\n\t    if test -z \"$install_libdir\"; then\n\t      break\n\t    fi\n\t    output=$output_objdir/${outputname}i\n\t    # Replace all uninstalled libtool libraries with the installed ones\n\t    newdependency_libs=\n\t    for deplib in $dependency_libs; do\n\t      case $deplib in\n\t      *.la)\n\t\tfunc_basename \"$deplib\"\n\t\tname=$func_basename_result\n\t\tfunc_resolve_sysroot \"$deplib\"\n\t\teval libdir=`$SED -n -e 's/^libdir=\\(.*\\)$/\\1/p' $func_resolve_sysroot_result`\n\t\ttest -z \"$libdir\" && \\\n\t\t  func_fatal_error \"'$deplib' is not a valid libtool archive\"\n\t\tfunc_append newdependency_libs \" ${lt_sysroot:+=}$libdir/$name\"\n\t\t;;\n\t      -L*)\n\t\tfunc_stripname -L '' \"$deplib\"\n\t\tfunc_replace_sysroot \"$func_stripname_result\"\n\t\tfunc_append newdependency_libs \" -L$func_replace_sysroot_result\"\n\t\t;;\n\t      -R*)\n\t\tfunc_stripname -R '' \"$deplib\"\n\t\tfunc_replace_sysroot \"$func_stripname_result\"\n\t\tfunc_append newdependency_libs \" -R$func_replace_sysroot_result\"\n\t\t;;\n\t      *) func_append newdependency_libs \" $deplib\" ;;\n\t      esac\n\t    done\n\t    dependency_libs=$newdependency_libs\n\t    newdlfiles=\n\n\t    for lib in $dlfiles; do\n\t      case $lib in\n\t      *.la)\n\t        func_basename \"$lib\"\n\t\tname=$func_basename_result\n\t\teval libdir=`$SED -n -e 's/^libdir=\\(.*\\)$/\\1/p' $lib`\n\t\ttest -z \"$libdir\" && \\\n\t\t  func_fatal_error \"'$lib' is not a valid libtool archive\"\n\t\tfunc_append newdlfiles \" ${lt_sysroot:+=}$libdir/$name\"\n\t\t;;\n\t      *) func_append newdlfiles \" $lib\" ;;\n\t      esac\n\t    done\n\t    dlfiles=$newdlfiles\n\t    newdlprefiles=\n\t    for lib in $dlprefiles; do\n\t      case $lib in\n\t      *.la)\n\t\t# Only pass preopened files to the pseudo-archive (for\n\t\t# eventual linking with the app. that links it) if we\n\t\t# didn't already link the preopened objects directly into\n\t\t# the library:\n\t\tfunc_basename \"$lib\"\n\t\tname=$func_basename_result\n\t\teval libdir=`$SED -n -e 's/^libdir=\\(.*\\)$/\\1/p' $lib`\n\t\ttest -z \"$libdir\" && \\\n\t\t  func_fatal_error \"'$lib' is not a valid libtool archive\"\n\t\tfunc_append newdlprefiles \" ${lt_sysroot:+=}$libdir/$name\"\n\t\t;;\n\t      esac\n\t    done\n\t    dlprefiles=$newdlprefiles\n\t  else\n\t    newdlfiles=\n\t    for lib in $dlfiles; do\n\t      case $lib in\n\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) abs=$lib ;;\n\t\t*) abs=`pwd`\"/$lib\" ;;\n\t      esac\n\t      func_append newdlfiles \" $abs\"\n\t    done\n\t    dlfiles=$newdlfiles\n\t    newdlprefiles=\n\t    for lib in $dlprefiles; do\n\t      case $lib in\n\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) abs=$lib ;;\n\t\t*) abs=`pwd`\"/$lib\" ;;\n\t      esac\n\t      func_append newdlprefiles \" $abs\"\n\t    done\n\t    dlprefiles=$newdlprefiles\n\t  fi\n\t  $RM $output\n\t  # place dlname in correct position for cygwin\n\t  # In fact, it would be nice if we could use this code for all target\n\t  # systems that can't hard-code library paths into their executables\n\t  # and that have no shared library path variable independent of PATH,\n\t  # but it turns out we can't easily determine that from inspecting\n\t  # libtool variables, so we have to hard-code the OSs to which it\n\t  # applies here; at the moment, that means platforms that use the PE\n\t  # object format with DLL files.  See the long comment at the top of\n\t  # tests/bindir.at for full details.\n\t  tdlname=$dlname\n\t  case $host,$output,$installed,$module,$dlname in\n\t    *cygwin*,*lai,yes,no,*.dll | *mingw*,*lai,yes,no,*.dll | *cegcc*,*lai,yes,no,*.dll)\n\t      # If a -bindir argument was supplied, place the dll there.\n\t      if test -n \"$bindir\"; then\n\t\tfunc_relative_path \"$install_libdir\" \"$bindir\"\n\t\ttdlname=$func_relative_path_result/$dlname\n\t      else\n\t\t# Otherwise fall back on heuristic.\n\t\ttdlname=../bin/$dlname\n\t      fi\n\t      ;;\n\t  esac\n\t  $ECHO > $output \"\\\n# $outputname - a libtool library file\n# Generated by $PROGRAM (GNU $PACKAGE) $VERSION\n#\n# Please DO NOT delete this file!\n# It is necessary for linking the library.\n\n# The name that we can dlopen(3).\ndlname='$tdlname'\n\n# Names of this library.\nlibrary_names='$library_names'\n\n# The name of the static archive.\nold_library='$old_library'\n\n# Linker flags that cannot go in dependency_libs.\ninherited_linker_flags='$new_inherited_linker_flags'\n\n# Libraries that this one depends upon.\ndependency_libs='$dependency_libs'\n\n# Names of additional weak libraries provided by this library\nweak_library_names='$weak_libs'\n\n# Version information for $libname.\ncurrent=$current\nage=$age\nrevision=$revision\n\n# Is this an already installed library?\ninstalled=$installed\n\n# Should we warn about portability when linking against -modules?\nshouldnotlink=$module\n\n# Files to dlopen/dlpreopen\ndlopen='$dlfiles'\ndlpreopen='$dlprefiles'\n\n# Directory that this library needs to be installed in:\nlibdir='$install_libdir'\"\n\t  if test no,yes = \"$installed,$need_relink\"; then\n\t    $ECHO >> $output \"\\\nrelink_command=\\\"$relink_command\\\"\"\n\t  fi\n\tdone\n      }\n\n      # Do a symbolic link so that the libtool archive can be found in\n      # LD_LIBRARY_PATH before the program is installed.\n      func_show_eval '( cd \"$output_objdir\" && $RM \"$outputname\" && $LN_S \"../$outputname\" \"$outputname\" )' 'exit $?'\n      ;;\n    esac\n    exit $EXIT_SUCCESS\n}\n\nif test link = \"$opt_mode\" || test relink = \"$opt_mode\"; then\n  func_mode_link ${1+\"$@\"}\nfi\n\n\n# func_mode_uninstall arg...\nfunc_mode_uninstall ()\n{\n    $debug_cmd\n\n    RM=$nonopt\n    files=\n    rmforce=false\n    exit_status=0\n\n    # This variable tells wrapper scripts just to set variables rather\n    # than running their programs.\n    libtool_install_magic=$magic\n\n    for arg\n    do\n      case $arg in\n      -f) func_append RM \" $arg\"; rmforce=: ;;\n      -*) func_append RM \" $arg\" ;;\n      *) func_append files \" $arg\" ;;\n      esac\n    done\n\n    test -z \"$RM\" && \\\n      func_fatal_help \"you must specify an RM program\"\n\n    rmdirs=\n\n    for file in $files; do\n      func_dirname \"$file\" \"\" \".\"\n      dir=$func_dirname_result\n      if test . = \"$dir\"; then\n\todir=$objdir\n      else\n\todir=$dir/$objdir\n      fi\n      func_basename \"$file\"\n      name=$func_basename_result\n      test uninstall = \"$opt_mode\" && odir=$dir\n\n      # Remember odir for removal later, being careful to avoid duplicates\n      if test clean = \"$opt_mode\"; then\n\tcase \" $rmdirs \" in\n\t  *\" $odir \"*) ;;\n\t  *) func_append rmdirs \" $odir\" ;;\n\tesac\n      fi\n\n      # Don't error if the file doesn't exist and rm -f was used.\n      if { test -L \"$file\"; } >/dev/null 2>&1 ||\n\t { test -h \"$file\"; } >/dev/null 2>&1 ||\n\t test -f \"$file\"; then\n\t:\n      elif test -d \"$file\"; then\n\texit_status=1\n\tcontinue\n      elif $rmforce; then\n\tcontinue\n      fi\n\n      rmfiles=$file\n\n      case $name in\n      *.la)\n\t# Possibly a libtool archive, so verify it.\n\tif func_lalib_p \"$file\"; then\n\t  func_source $dir/$name\n\n\t  # Delete the libtool libraries and symlinks.\n\t  for n in $library_names; do\n\t    func_append rmfiles \" $odir/$n\"\n\t  done\n\t  test -n \"$old_library\" && func_append rmfiles \" $odir/$old_library\"\n\n\t  case $opt_mode in\n\t  clean)\n\t    case \" $library_names \" in\n\t    *\" $dlname \"*) ;;\n\t    *) test -n \"$dlname\" && func_append rmfiles \" $odir/$dlname\" ;;\n\t    esac\n\t    test -n \"$libdir\" && func_append rmfiles \" $odir/$name $odir/${name}i\"\n\t    ;;\n\t  uninstall)\n\t    if test -n \"$library_names\"; then\n\t      # Do each command in the postuninstall commands.\n\t      func_execute_cmds \"$postuninstall_cmds\" '$rmforce || exit_status=1'\n\t    fi\n\n\t    if test -n \"$old_library\"; then\n\t      # Do each command in the old_postuninstall commands.\n\t      func_execute_cmds \"$old_postuninstall_cmds\" '$rmforce || exit_status=1'\n\t    fi\n\t    # FIXME: should reinstall the best remaining shared library.\n\t    ;;\n\t  esac\n\tfi\n\t;;\n\n      *.lo)\n\t# Possibly a libtool object, so verify it.\n\tif func_lalib_p \"$file\"; then\n\n\t  # Read the .lo file\n\t  func_source $dir/$name\n\n\t  # Add PIC object to the list of files to remove.\n\t  if test -n \"$pic_object\" && test none != \"$pic_object\"; then\n\t    func_append rmfiles \" $dir/$pic_object\"\n\t  fi\n\n\t  # Add non-PIC object to the list of files to remove.\n\t  if test -n \"$non_pic_object\" && test none != \"$non_pic_object\"; then\n\t    func_append rmfiles \" $dir/$non_pic_object\"\n\t  fi\n\tfi\n\t;;\n\n      *)\n\tif test clean = \"$opt_mode\"; then\n\t  noexename=$name\n\t  case $file in\n\t  *.exe)\n\t    func_stripname '' '.exe' \"$file\"\n\t    file=$func_stripname_result\n\t    func_stripname '' '.exe' \"$name\"\n\t    noexename=$func_stripname_result\n\t    # $file with .exe has already been added to rmfiles,\n\t    # add $file without .exe\n\t    func_append rmfiles \" $file\"\n\t    ;;\n\t  esac\n\t  # Do a test to see if this is a libtool program.\n\t  if func_ltwrapper_p \"$file\"; then\n\t    if func_ltwrapper_executable_p \"$file\"; then\n\t      func_ltwrapper_scriptname \"$file\"\n\t      relink_command=\n\t      func_source $func_ltwrapper_scriptname_result\n\t      func_append rmfiles \" $func_ltwrapper_scriptname_result\"\n\t    else\n\t      relink_command=\n\t      func_source $dir/$noexename\n\t    fi\n\n\t    # note $name still contains .exe if it was in $file originally\n\t    # as does the version of $file that was added into $rmfiles\n\t    func_append rmfiles \" $odir/$name $odir/${name}S.$objext\"\n\t    if test yes = \"$fast_install\" && test -n \"$relink_command\"; then\n\t      func_append rmfiles \" $odir/lt-$name\"\n\t    fi\n\t    if test \"X$noexename\" != \"X$name\"; then\n\t      func_append rmfiles \" $odir/lt-$noexename.c\"\n\t    fi\n\t  fi\n\tfi\n\t;;\n      esac\n      func_show_eval \"$RM $rmfiles\" 'exit_status=1'\n    done\n\n    # Try to remove the $objdir's in the directories where we deleted files\n    for dir in $rmdirs; do\n      if test -d \"$dir\"; then\n\tfunc_show_eval \"rmdir $dir >/dev/null 2>&1\"\n      fi\n    done\n\n    exit $exit_status\n}\n\nif test uninstall = \"$opt_mode\" || test clean = \"$opt_mode\"; then\n  func_mode_uninstall ${1+\"$@\"}\nfi\n\ntest -z \"$opt_mode\" && {\n  help=$generic_help\n  func_fatal_help \"you must specify a MODE\"\n}\n\ntest -z \"$exec_cmd\" && \\\n  func_fatal_help \"invalid operation mode '$opt_mode'\"\n\nif test -n \"$exec_cmd\"; then\n  eval exec \"$exec_cmd\"\n  exit $EXIT_FAILURE\nfi\n\nexit $exit_status\n\n\n# The TAGs below are defined such that we never get into a situation\n# where we disable both kinds of libraries.  Given conflicting\n# choices, we go for a static library, that is the most portable,\n# since we can't tell whether shared libraries were disabled because\n# the user asked for that or because the platform doesn't support\n# them.  This is particularly important on AIX, because we don't\n# support having both static and shared libraries enabled at the same\n# time on that platform, so we default to a shared-only configuration.\n# If a disable-shared tag is given, we'll fallback to a static-only\n# configuration.  But we'll never go from static-only to shared-only.\n\n# ### BEGIN LIBTOOL TAG CONFIG: disable-shared\nbuild_libtool_libs=no\nbuild_old_libs=yes\n# ### END LIBTOOL TAG CONFIG: disable-shared\n\n# ### BEGIN LIBTOOL TAG CONFIG: disable-static\nbuild_old_libs=`case $build_libtool_libs in yes) echo no;; *) echo yes;; esac`\n# ### END LIBTOOL TAG CONFIG: disable-static\n\n# Local Variables:\n# mode:shell-script\n# sh-indentation:2\n# End:\n",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/include/hwloc/plugins.h": "/*\n * Copyright \u00a9 2013-2020 Inria.  All rights reserved.\n * Copyright \u00a9 2016 Cisco Systems, Inc.  All rights reserved.\n * See COPYING in top-level directory.\n */\n\n#ifndef HWLOC_PLUGINS_H\n#define HWLOC_PLUGINS_H\n\n/** \\file\n * \\brief Public interface for building hwloc plugins.\n */\n\nstruct hwloc_backend;\n\n#include \"hwloc.h\"\n\n#ifdef HWLOC_INSIDE_PLUGIN\n/* needed for hwloc_plugin_check_namespace() */\n#ifdef HWLOC_HAVE_LTDL\n#include <ltdl.h>\n#else\n#include <dlfcn.h>\n#endif\n#endif\n\n\n\n/** \\defgroup hwlocality_disc_components Components and Plugins: Discovery components\n * @{\n */\n\n/** \\brief Discovery component structure\n *\n * This is the major kind of components, taking care of the discovery.\n * They are registered by generic components, either statically-built or as plugins.\n */\nstruct hwloc_disc_component {\n  /** \\brief Name.\n   * If this component is built as a plugin, this name does not have to match the plugin filename.\n   */\n  const char *name;\n\n  /** \\brief Discovery phases performed by this component.\n   * OR'ed set of ::hwloc_disc_phase_t\n   */\n  unsigned phases;\n\n  /** \\brief Component phases to exclude, as an OR'ed set of ::hwloc_disc_phase_t.\n   *\n   * For a GLOBAL component, this usually includes all other phases (\\c ~UL).\n   *\n   * Other components only exclude types that may bring conflicting\n   * topology information. MISC components should likely not be excluded\n   * since they usually bring non-primary additional information.\n   */\n  unsigned excluded_phases;\n\n  /** \\brief Instantiate callback to create a backend from the component.\n   * Parameters data1, data2, data3 are NULL except for components\n   * that have special enabling routines such as hwloc_topology_set_xml(). */\n  struct hwloc_backend * (*instantiate)(struct hwloc_topology *topology, struct hwloc_disc_component *component, unsigned excluded_phases, const void *data1, const void *data2, const void *data3);\n\n  /** \\brief Component priority.\n   * Used to sort topology->components, higher priority first.\n   * Also used to decide between two components with the same name.\n   *\n   * Usual values are\n   * 50 for native OS (or platform) components,\n   * 45 for x86,\n   * 40 for no-OS fallback,\n   * 30 for global components (xml, synthetic),\n   * 20 for pci,\n   * 10 for other misc components (opencl etc.).\n   */\n  unsigned priority;\n\n  /** \\brief Enabled by default.\n   * If unset, if will be disabled unless explicitly requested.\n   */\n  unsigned enabled_by_default;\n\n  /** \\private Used internally to list components by priority on topology->components\n   * (the component structure is usually read-only,\n   *  the core copies it before using this field for queueing)\n   */\n  struct hwloc_disc_component * next;\n};\n\n/** @} */\n\n\n\n\n/** \\defgroup hwlocality_disc_backends Components and Plugins: Discovery backends\n * @{\n */\n\n/** \\brief Discovery phase */\ntypedef enum hwloc_disc_phase_e {\n  /** \\brief xml or synthetic, platform-specific components such as bgq.\n   * Discovers everything including CPU, memory, I/O and everything else.\n   * A component with a Global phase usually excludes all other phases.\n   * \\hideinitializer */\n  HWLOC_DISC_PHASE_GLOBAL = (1U<<0),\n\n  /** \\brief CPU discovery.\n   * \\hideinitializer */\n  HWLOC_DISC_PHASE_CPU = (1U<<1),\n\n  /** \\brief Attach memory to existing CPU objects.\n   * \\hideinitializer */\n  HWLOC_DISC_PHASE_MEMORY = (1U<<2),\n\n  /** \\brief Attach PCI devices and bridges to existing CPU objects.\n   * \\hideinitializer */\n  HWLOC_DISC_PHASE_PCI = (1U<<3),\n\n  /** \\brief I/O discovery that requires PCI devices (OS devices such as OpenCL, CUDA, etc.).\n   * \\hideinitializer */\n  HWLOC_DISC_PHASE_IO = (1U<<4),\n\n  /** \\brief Misc objects that gets added below anything else.\n   * \\hideinitializer */\n  HWLOC_DISC_PHASE_MISC = (1U<<5),\n\n  /** \\brief Annotating existing objects, adding distances, etc.\n   * \\hideinitializer */\n  HWLOC_DISC_PHASE_ANNOTATE = (1U<<6),\n\n  /** \\brief Final tweaks to a ready-to-use topology.\n   * This phase runs once the topology is loaded, before it is returned to the topology.\n   * Hence it may only use the main hwloc API for modifying the topology,\n   * for instance by restricting it, adding info attributes, etc.\n   * \\hideinitializer */\n  HWLOC_DISC_PHASE_TWEAK = (1U<<7)\n} hwloc_disc_phase_t;\n\n/** \\brief Discovery status flags */\nenum hwloc_disc_status_flag_e {\n  /** \\brief The sets of allowed resources were already retrieved \\hideinitializer */\n  HWLOC_DISC_STATUS_FLAG_GOT_ALLOWED_RESOURCES = (1UL<<1)\n};\n\n/** \\brief Discovery status structure\n *\n * Used by the core and backends to inform about what has been/is being done\n * during the discovery process.\n */\nstruct hwloc_disc_status {\n  /** \\brief The current discovery phase that is performed.\n   * Must match one of the phases in the component phases field.\n   */\n  hwloc_disc_phase_t phase;\n\n  /** \\brief Dynamically excluded phases.\n   * If a component decides during discovery that some phases are no longer needed.\n   */\n  unsigned excluded_phases;\n\n  /** \\brief OR'ed set of hwloc_disc_status_flag_e */\n  unsigned long flags;\n};\n\n/** \\brief Discovery backend structure\n *\n * A backend is the instantiation of a discovery component.\n * When a component gets enabled for a topology,\n * its instantiate() callback creates a backend.\n *\n * hwloc_backend_alloc() initializes all fields to default values\n * that the component may change (except \"component\" and \"next\")\n * before enabling the backend with hwloc_backend_enable().\n *\n * Most backends assume that the topology is_thissystem flag is\n * set because they talk to the underlying operating system.\n * However they may still be used in topologies without the\n * is_thissystem flag for debugging reasons.\n * In practice, they are usually auto-disabled in such cases\n * (excluded by xml or synthetic backends, or by environment\n *  variables when changing the Linux fsroot or the x86 cpuid path).\n */\nstruct hwloc_backend {\n  /** \\private Reserved for the core, set by hwloc_backend_alloc() */\n  struct hwloc_disc_component * component;\n  /** \\private Reserved for the core, set by hwloc_backend_enable() */\n  struct hwloc_topology * topology;\n  /** \\private Reserved for the core. Set to 1 if forced through envvar, 0 otherwise. */\n  int envvar_forced;\n  /** \\private Reserved for the core. Used internally to list backends topology->backends. */\n  struct hwloc_backend * next;\n\n  /** \\brief Discovery phases performed by this component, possibly without some of them if excluded by other components.\n   * OR'ed set of ::hwloc_disc_phase_t\n   */\n  unsigned phases;\n\n  /** \\brief Backend flags, currently always 0. */\n  unsigned long flags;\n\n  /** \\brief Backend-specific 'is_thissystem' property.\n   * Set to 0 if the backend disables the thissystem flag for this topology\n   * (e.g. loading from xml or synthetic string,\n   *  or using a different fsroot on Linux, or a x86 CPUID dump).\n   * Set to -1 if the backend doesn't care (default).\n   */\n  int is_thissystem;\n\n  /** \\brief Backend private data, or NULL if none. */\n  void * private_data;\n  /** \\brief Callback for freeing the private_data.\n   * May be NULL.\n   */\n  void (*disable)(struct hwloc_backend *backend);\n\n  /** \\brief Main discovery callback.\n   * returns -1 on error, either because it couldn't add its objects ot the existing topology,\n   * or because of an actual discovery/gathering failure.\n   * May be NULL.\n   */\n  int (*discover)(struct hwloc_backend *backend, struct hwloc_disc_status *status);\n\n  /** \\brief Callback to retrieve the locality of a PCI object.\n   * Called by the PCI core when attaching PCI hierarchy to CPU objects.\n   * May be NULL.\n   */\n  int (*get_pci_busid_cpuset)(struct hwloc_backend *backend, struct hwloc_pcidev_attr_s *busid, hwloc_bitmap_t cpuset);\n};\n\n/** \\brief Allocate a backend structure, set good default values, initialize backend->component and topology, etc.\n * The caller will then modify whatever needed, and call hwloc_backend_enable().\n */\nHWLOC_DECLSPEC struct hwloc_backend * hwloc_backend_alloc(struct hwloc_topology *topology, struct hwloc_disc_component *component);\n\n/** \\brief Enable a previously allocated and setup backend. */\nHWLOC_DECLSPEC int hwloc_backend_enable(struct hwloc_backend *backend);\n\n/** @} */\n\n\n\n\n/** \\defgroup hwlocality_generic_components Components and Plugins: Generic components\n * @{\n */\n\n/** \\brief Generic component type */\ntypedef enum hwloc_component_type_e {\n  /** \\brief The data field must point to a struct hwloc_disc_component. */\n  HWLOC_COMPONENT_TYPE_DISC,\n\n  /** \\brief The data field must point to a struct hwloc_xml_component. */\n  HWLOC_COMPONENT_TYPE_XML\n} hwloc_component_type_t;\n\n/** \\brief Generic component structure\n *\n * Generic components structure, either statically listed by configure in static-components.h\n * or dynamically loaded as a plugin.\n */\nstruct hwloc_component {\n  /** \\brief Component ABI version, set to ::HWLOC_COMPONENT_ABI */\n  unsigned abi;\n\n  /** \\brief Process-wide component initialization callback.\n   *\n   * This optional callback is called when the component is registered\n   * to the hwloc core (after loading the plugin).\n   *\n   * When the component is built as a plugin, this callback\n   * should call hwloc_check_plugin_namespace()\n   * and return an negative error code on error.\n   *\n   * \\p flags is always 0 for now.\n   *\n   * \\return 0 on success, or a negative code on error.\n   *\n   * \\note If the component uses ltdl for loading its own plugins,\n   * it should load/unload them only in init() and finalize(),\n   * to avoid race conditions with hwloc's use of ltdl.\n   */\n  int (*init)(unsigned long flags);\n\n  /** \\brief Process-wide component termination callback.\n   *\n   * This optional callback is called after unregistering the component\n   * from the hwloc core (before unloading the plugin).\n   *\n   * \\p flags is always 0 for now.\n   *\n   * \\note If the component uses ltdl for loading its own plugins,\n   * it should load/unload them only in init() and finalize(),\n   * to avoid race conditions with hwloc's use of ltdl.\n   */\n  void (*finalize)(unsigned long flags);\n\n  /** \\brief Component type */\n  hwloc_component_type_t type;\n\n  /** \\brief Component flags, unused for now */\n  unsigned long flags;\n\n  /** \\brief Component data, pointing to a struct hwloc_disc_component or struct hwloc_xml_component. */\n  void * data;\n};\n\n/** @} */\n\n\n\n\n/** \\defgroup hwlocality_components_core_funcs Components and Plugins: Core functions to be used by components\n * @{\n */\n\n/** \\brief Add an object to the topology.\n *\n * It is sorted along the tree of other objects according to the inclusion of\n * cpusets, to eventually be added as a child of the smallest object including\n * this object.\n *\n * If the cpuset is empty, the type of the object (and maybe some attributes)\n * must be enough to find where to insert the object. This is especially true\n * for NUMA nodes with memory and no CPUs.\n *\n * The given object should not have children.\n *\n * This shall only be called before levels are built.\n *\n * In case of error, hwloc_report_os_error() is called.\n *\n * The caller should check whether the object type is filtered-out before calling this function.\n *\n * The topology cpuset/nodesets will be enlarged to include the object sets.\n *\n * Returns the object on success.\n * Returns NULL and frees obj on error.\n * Returns another object and frees obj if it was merged with an identical pre-existing object.\n */\nHWLOC_DECLSPEC struct hwloc_obj *hwloc_insert_object_by_cpuset(struct hwloc_topology *topology, hwloc_obj_t obj);\n\n/** \\brief Type of error callbacks during object insertion */\ntypedef void (*hwloc_report_error_t)(const char * msg, int line);\n/** \\brief Report an insertion error from a backend */\nHWLOC_DECLSPEC void hwloc_report_os_error(const char * msg, int line);\n/** \\brief Check whether insertion errors are hidden */\nHWLOC_DECLSPEC int hwloc_hide_errors(void);\n\n/** \\brief Add an object to the topology and specify which error callback to use.\n *\n * This function is similar to hwloc_insert_object_by_cpuset() but it allows specifying\n * where to start insertion from (if \\p root is NULL, the topology root object is used),\n * and specifying the error callback.\n */\nHWLOC_DECLSPEC struct hwloc_obj *hwloc__insert_object_by_cpuset(struct hwloc_topology *topology, hwloc_obj_t root, hwloc_obj_t obj, hwloc_report_error_t report_error);\n\n/** \\brief Insert an object somewhere in the topology.\n *\n * It is added as the last child of the given parent.\n * The cpuset is completely ignored, so strange objects such as I/O devices should\n * preferably be inserted with this.\n *\n * When used for \"normal\" children with cpusets (when importing from XML\n * when duplicating a topology), the caller should make sure that:\n * - children are inserted in order,\n * - children cpusets do not intersect.\n *\n * The given object may have normal, I/O or Misc children, as long as they are in order as well.\n * These children must have valid parent and next_sibling pointers.\n *\n * The caller should check whether the object type is filtered-out before calling this function.\n */\nHWLOC_DECLSPEC void hwloc_insert_object_by_parent(struct hwloc_topology *topology, hwloc_obj_t parent, hwloc_obj_t obj);\n\n/** \\brief Allocate and initialize an object of the given type and physical index.\n *\n * If \\p os_index is unknown or irrelevant, use \\c HWLOC_UNKNOWN_INDEX.\n */\nHWLOC_DECLSPEC hwloc_obj_t hwloc_alloc_setup_object(hwloc_topology_t topology, hwloc_obj_type_t type, unsigned os_index);\n\n/** \\brief Setup object cpusets/nodesets by OR'ing its children.\n *\n * Used when adding an object late in the topology.\n * Will update the new object by OR'ing all its new children sets.\n *\n * Used when PCI backend adds a hostbridge parent, when distances\n * add a new Group, etc.\n */\nHWLOC_DECLSPEC int hwloc_obj_add_children_sets(hwloc_obj_t obj);\n\n/** \\brief Request a reconnection of children and levels in the topology.\n *\n * May be used by backends during discovery if they need arrays or lists\n * of object within levels or children to be fully connected.\n *\n * \\p flags is currently unused, must 0.\n */\nHWLOC_DECLSPEC int hwloc_topology_reconnect(hwloc_topology_t topology, unsigned long flags __hwloc_attribute_unused);\n\n/** \\brief Make sure that plugins can lookup core symbols.\n *\n * This is a sanity check to avoid lazy-lookup failures when libhwloc\n * is loaded within a plugin, and later tries to load its own plugins.\n * This may fail (and abort the program) if libhwloc symbols are in a\n * private namespace.\n *\n * \\return 0 on success.\n * \\return -1 if the plugin cannot be successfully loaded. The caller\n * plugin init() callback should return a negative error code as well.\n *\n * Plugins should call this function in their init() callback to avoid\n * later crashes if lazy symbol resolution is used by the upper layer that\n * loaded hwloc (e.g. OpenCL implementations using dlopen with RTLD_LAZY).\n *\n * \\note The build system must define HWLOC_INSIDE_PLUGIN if and only if\n * building the caller as a plugin.\n *\n * \\note This function should remain inline so plugins can call it even\n * when they cannot find libhwloc symbols.\n */\nstatic __hwloc_inline int\nhwloc_plugin_check_namespace(const char *pluginname __hwloc_attribute_unused, const char *symbol __hwloc_attribute_unused)\n{\n#ifdef HWLOC_INSIDE_PLUGIN\n  void *sym;\n#ifdef HWLOC_HAVE_LTDL\n  lt_dlhandle handle = lt_dlopen(NULL);\n#else\n  void *handle = dlopen(NULL, RTLD_NOW|RTLD_LOCAL);\n#endif\n  if (!handle)\n    /* cannot check, assume things will work */\n    return 0;\n#ifdef HWLOC_HAVE_LTDL\n  sym = lt_dlsym(handle, symbol);\n  lt_dlclose(handle);\n#else\n  sym = dlsym(handle, symbol);\n  dlclose(handle);\n#endif\n  if (!sym) {\n    static int verboseenv_checked = 0;\n    static int verboseenv_value = 0;\n    if (!verboseenv_checked) {\n      const char *verboseenv = getenv(\"HWLOC_PLUGINS_VERBOSE\");\n      verboseenv_value = verboseenv ? atoi(verboseenv) : 0;\n      verboseenv_checked = 1;\n    }\n    if (verboseenv_value)\n      fprintf(stderr, \"Plugin `%s' disabling itself because it cannot find the `%s' core symbol.\\n\",\n\t      pluginname, symbol);\n    return -1;\n  }\n#endif /* HWLOC_INSIDE_PLUGIN */\n  return 0;\n}\n\n/** @} */\n\n\n\n\n/** \\defgroup hwlocality_components_filtering Components and Plugins: Filtering objects\n * @{\n */\n\n/** \\brief Check whether the given PCI device classid is important.\n *\n * \\return 1 if important, 0 otherwise.\n */\nstatic __hwloc_inline int\nhwloc_filter_check_pcidev_subtype_important(unsigned classid)\n{\n  unsigned baseclass = classid >> 8;\n  return (baseclass == 0x03 /* PCI_BASE_CLASS_DISPLAY */\n\t  || baseclass == 0x02 /* PCI_BASE_CLASS_NETWORK */\n\t  || baseclass == 0x01 /* PCI_BASE_CLASS_STORAGE */\n\t  || baseclass == 0x0b /* PCI_BASE_CLASS_PROCESSOR */\n\t  || classid == 0x0c04 /* PCI_CLASS_SERIAL_FIBER */\n\t  || classid == 0x0c06 /* PCI_CLASS_SERIAL_INFINIBAND */\n\t  || baseclass == 0x12 /* Processing Accelerators */);\n}\n\n/** \\brief Check whether the given OS device subtype is important.\n *\n * \\return 1 if important, 0 otherwise.\n */\nstatic __hwloc_inline int\nhwloc_filter_check_osdev_subtype_important(hwloc_obj_osdev_type_t subtype)\n{\n  return (subtype != HWLOC_OBJ_OSDEV_DMA);\n}\n\n/** \\brief Check whether a non-I/O object type should be filtered-out.\n *\n * Cannot be used for I/O objects.\n *\n * \\return 1 if the object type should be kept, 0 otherwise.\n */\nstatic __hwloc_inline int\nhwloc_filter_check_keep_object_type(hwloc_topology_t topology, hwloc_obj_type_t type)\n{\n  enum hwloc_type_filter_e filter = HWLOC_TYPE_FILTER_KEEP_NONE;\n  hwloc_topology_get_type_filter(topology, type, &filter);\n  assert(filter != HWLOC_TYPE_FILTER_KEEP_IMPORTANT); /* IMPORTANT only used for I/O */\n  return filter == HWLOC_TYPE_FILTER_KEEP_NONE ? 0 : 1;\n}\n\n/** \\brief Check whether the given object should be filtered-out.\n *\n * \\return 1 if the object type should be kept, 0 otherwise.\n */\nstatic __hwloc_inline int\nhwloc_filter_check_keep_object(hwloc_topology_t topology, hwloc_obj_t obj)\n{\n  hwloc_obj_type_t type = obj->type;\n  enum hwloc_type_filter_e filter = HWLOC_TYPE_FILTER_KEEP_NONE;\n  hwloc_topology_get_type_filter(topology, type, &filter);\n  if (filter == HWLOC_TYPE_FILTER_KEEP_NONE)\n    return 0;\n  if (filter == HWLOC_TYPE_FILTER_KEEP_IMPORTANT) {\n    if (type == HWLOC_OBJ_PCI_DEVICE)\n      return hwloc_filter_check_pcidev_subtype_important(obj->attr->pcidev.class_id);\n    if (type == HWLOC_OBJ_OS_DEVICE)\n      return hwloc_filter_check_osdev_subtype_important(obj->attr->osdev.type);\n  }\n  return 1;\n}\n\n/** @} */\n\n\n\n\n/** \\defgroup hwlocality_components_pcidisc Components and Plugins: helpers for PCI discovery\n * @{\n */\n\n/** \\brief Return the offset of the given capability in the PCI config space buffer\n *\n * This function requires a 256-bytes config space. Unknown/unavailable bytes should be set to 0xff.\n */\nHWLOC_DECLSPEC unsigned hwloc_pcidisc_find_cap(const unsigned char *config, unsigned cap);\n\n/** \\brief Fill linkspeed by reading the PCI config space where PCI_CAP_ID_EXP is at position offset.\n *\n * Needs 20 bytes of EXP capability block starting at offset in the config space\n * for registers up to link status.\n */\nHWLOC_DECLSPEC int hwloc_pcidisc_find_linkspeed(const unsigned char *config, unsigned offset, float *linkspeed);\n\n/** \\brief Return the hwloc object type (PCI device or Bridge) for the given class and configuration space.\n *\n * This function requires 16 bytes of common configuration header at the beginning of config.\n */\nHWLOC_DECLSPEC hwloc_obj_type_t hwloc_pcidisc_check_bridge_type(unsigned device_class, const unsigned char *config);\n\n/** \\brief Fills the attributes of the given PCI bridge using the given PCI config space.\n *\n * This function requires 32 bytes of common configuration header at the beginning of config.\n *\n * Returns -1 and destroys /p obj if bridge fields are invalid.\n */\nHWLOC_DECLSPEC int hwloc_pcidisc_find_bridge_buses(unsigned domain, unsigned bus, unsigned dev, unsigned func,\n\t\t\t\t\t\t   unsigned *secondary_busp, unsigned *subordinate_busp,\n\t\t\t\t\t\t   const unsigned char *config);\n\n/** \\brief Insert a PCI object in the given PCI tree by looking at PCI bus IDs.\n *\n * If \\p treep points to \\c NULL, the new object is inserted there.\n */\nHWLOC_DECLSPEC void hwloc_pcidisc_tree_insert_by_busid(struct hwloc_obj **treep, struct hwloc_obj *obj);\n\n/** \\brief Add some hostbridges on top of the given tree of PCI objects and attach them to the topology.\n *\n * Other backends may lookup PCI objects or localities (for instance to attach OS devices)\n * by using hwloc_pcidisc_find_by_busid() or hwloc_pcidisc_find_busid_parent().\n */\nHWLOC_DECLSPEC int hwloc_pcidisc_tree_attach(struct hwloc_topology *topology, struct hwloc_obj *tree);\n\n/** @} */\n\n\n\n\n/** \\defgroup hwlocality_components_pcifind Components and Plugins: finding PCI objects during other discoveries\n * @{\n */\n\n/** \\brief Find the normal parent of a PCI bus ID.\n *\n * Look at PCI affinity to find out where the given PCI bus ID should be attached.\n *\n * This function should be used to attach an I/O device under the corresponding\n * PCI object (if any), or under a normal (non-I/O) object with same locality.\n */\nHWLOC_DECLSPEC struct hwloc_obj * hwloc_pci_find_parent_by_busid(struct hwloc_topology *topology, unsigned domain, unsigned bus, unsigned dev, unsigned func);\n\n/** @} */\n\n\n\n\n#endif /* HWLOC_PLUGINS_H */\n",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/hwloc/components.c": "/*\n * Copyright \u00a9 2009-2020 Inria.  All rights reserved.\n * Copyright \u00a9 2012 Universit\u00e9 Bordeaux\n * See COPYING in top-level directory.\n */\n\n#include \"private/autogen/config.h\"\n#include \"hwloc.h\"\n#include \"private/private.h\"\n#include \"private/xml.h\"\n#include \"private/misc.h\"\n\n#define HWLOC_COMPONENT_STOP_NAME \"stop\"\n#define HWLOC_COMPONENT_EXCLUDE_CHAR '-'\n#define HWLOC_COMPONENT_SEPS \",\"\n#define HWLOC_COMPONENT_PHASESEP_CHAR ':'\n\n/* list of all registered discovery components, sorted by priority, higher priority first.\n * noos is last because its priority is 0.\n * others' priority is 10.\n */\nstatic struct hwloc_disc_component * hwloc_disc_components = NULL;\n\nstatic unsigned hwloc_components_users = 0; /* first one initializes, last ones destroys */\n\nstatic int hwloc_components_verbose = 0;\n#ifdef HWLOC_HAVE_PLUGINS\nstatic int hwloc_plugins_verbose = 0;\nstatic const char * hwloc_plugins_blacklist = NULL;\n#endif\n\n/* hwloc_components_mutex serializes:\n * - loading/unloading plugins, and modifications of the hwloc_plugins list\n * - calls to ltdl, including in hwloc_check_plugin_namespace()\n * - registration of components with hwloc_disc_component_register()\n *   and hwloc_xml_callbacks_register()\n */\n#ifdef HWLOC_WIN_SYS\n/* Basic mutex on top of InterlockedCompareExchange() on windows,\n * Far from perfect, but easy to maintain, and way enough given that this code will never be needed for real. */\n#include <windows.h>\nstatic LONG hwloc_components_mutex = 0;\n#define HWLOC_COMPONENTS_LOCK() do {\t\t\t\t\t\t\\\n  while (InterlockedCompareExchange(&hwloc_components_mutex, 1, 0) != 0)\t\\\n    SwitchToThread();\t\t\t\t\t\t\t\t\\\n} while (0)\n#define HWLOC_COMPONENTS_UNLOCK() do {\t\t\t\t\t\t\\\n  assert(hwloc_components_mutex == 1);\t\t\t\t\t\t\\\n  hwloc_components_mutex = 0;\t\t\t\t\t\t\t\\\n} while (0)\n\n#elif defined HWLOC_HAVE_PTHREAD_MUTEX\n/* pthread mutex if available (except on windows) */\n#include <pthread.h>\nstatic pthread_mutex_t hwloc_components_mutex = PTHREAD_MUTEX_INITIALIZER;\n#define HWLOC_COMPONENTS_LOCK() pthread_mutex_lock(&hwloc_components_mutex)\n#define HWLOC_COMPONENTS_UNLOCK() pthread_mutex_unlock(&hwloc_components_mutex)\n\n#else /* HWLOC_WIN_SYS || HWLOC_HAVE_PTHREAD_MUTEX */\n#error No mutex implementation available\n#endif\n\n\n#ifdef HWLOC_HAVE_PLUGINS\n\n#ifdef HWLOC_HAVE_LTDL\n/* ltdl-based plugin load */\n#include <ltdl.h>\ntypedef lt_dlhandle hwloc_dlhandle;\n#define hwloc_dlinit lt_dlinit\n#define hwloc_dlexit lt_dlexit\n#define hwloc_dlopenext lt_dlopenext\n#define hwloc_dlclose lt_dlclose\n#define hwloc_dlerror lt_dlerror\n#define hwloc_dlsym lt_dlsym\n#define hwloc_dlforeachfile lt_dlforeachfile\n\n#else /* !HWLOC_HAVE_LTDL */\n/* no-ltdl plugin load relies on less portable libdl */\n#include <dlfcn.h>\ntypedef void * hwloc_dlhandle;\nstatic __hwloc_inline int hwloc_dlinit(void) { return 0; }\nstatic __hwloc_inline int hwloc_dlexit(void) { return 0; }\n#define hwloc_dlclose dlclose\n#define hwloc_dlerror dlerror\n#define hwloc_dlsym dlsym\n\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <dirent.h>\n#include <unistd.h>\n\nstatic hwloc_dlhandle hwloc_dlopenext(const char *_filename)\n{\n  hwloc_dlhandle handle;\n  char *filename = NULL;\n  (void) asprintf(&filename, \"%s.so\", _filename);\n  if (!filename)\n    return NULL;\n  handle = dlopen(filename, RTLD_NOW|RTLD_LOCAL);\n  free(filename);\n  return handle;\n}\n\nstatic int\nhwloc_dlforeachfile(const char *_paths,\n\t\t    int (*func)(const char *filename, void *data),\n\t\t    void *data)\n{\n  char *paths = NULL, *path;\n\n  paths = strdup(_paths);\n  if (!paths)\n    return -1;\n\n  path = paths;\n  while (*path) {\n    char *colon;\n    DIR *dir;\n    struct dirent *dirent;\n\n    colon = strchr(path, ':');\n    if (colon)\n      *colon = '\\0';\n\n    if (hwloc_plugins_verbose)\n      fprintf(stderr, \" Looking under %s\\n\", path);\n\n    dir = opendir(path);\n    if (!dir)\n      goto next;\n\n    while ((dirent = readdir(dir)) != NULL) {\n      char *abs_name, *suffix;\n      struct stat stbuf;\n      int err;\n\n      err = asprintf(&abs_name, \"%s/%s\", path, dirent->d_name);\n      if (err < 0)\n\tcontinue;\n\n      err = stat(abs_name, &stbuf);\n      if (err < 0) {\n\tfree(abs_name);\n        continue;\n      }\n      if (!S_ISREG(stbuf.st_mode)) {\n\tfree(abs_name);\n\tcontinue;\n      }\n\n      /* Only keep .so files, and remove that suffix to get the component basename */\n      suffix = strrchr(abs_name, '.');\n      if (!suffix || strcmp(suffix, \".so\")) {\n\tfree(abs_name);\n\tcontinue;\n      }\n      *suffix = '\\0';\n\n      err = func(abs_name, data);\n      if (err) {\n\tfree(abs_name);\n\tcontinue;\n      }\n\n      free(abs_name);\n    }\n\n    closedir(dir);\n\n  next:\n    if (!colon)\n      break;\n    path = colon+1;\n  }\n\n  free(paths);\n  return 0;\n}\n#endif /* !HWLOC_HAVE_LTDL */\n\n/* array of pointers to dynamically loaded plugins */\nstatic struct hwloc__plugin_desc {\n  char *name;\n  struct hwloc_component *component;\n  char *filename;\n  hwloc_dlhandle handle;\n  struct hwloc__plugin_desc *next;\n} *hwloc_plugins = NULL;\n\nstatic int\nhwloc__dlforeach_cb(const char *filename, void *_data __hwloc_attribute_unused)\n{\n  const char *basename;\n  hwloc_dlhandle handle;\n  struct hwloc_component *component;\n  struct hwloc__plugin_desc *desc, **prevdesc;\n  char *componentsymbolname;\n\n  if (hwloc_plugins_verbose)\n    fprintf(stderr, \"Plugin dlforeach found `%s'\\n\", filename);\n\n  basename = strrchr(filename, '/');\n  if (!basename)\n    basename = filename;\n  else\n    basename++;\n\n  if (hwloc_plugins_blacklist && strstr(hwloc_plugins_blacklist, basename)) {\n    if (hwloc_plugins_verbose)\n      fprintf(stderr, \"Plugin `%s' is blacklisted in the environment\\n\", basename);\n    goto out;\n  }\n\n  /* dlopen and get the component structure */\n  handle = hwloc_dlopenext(filename);\n  if (!handle) {\n    if (hwloc_plugins_verbose)\n      fprintf(stderr, \"Failed to load plugin: %s\\n\", hwloc_dlerror());\n    goto out;\n  }\n\n  componentsymbolname = malloc(strlen(basename)+10+1);\n  if (!componentsymbolname) {\n    if (hwloc_plugins_verbose)\n      fprintf(stderr, \"Failed to allocation component `%s' symbol\\n\",\n\t      basename);\n    goto out_with_handle;\n  }\n  sprintf(componentsymbolname, \"%s_component\", basename);\n  component = hwloc_dlsym(handle, componentsymbolname);\n  if (!component) {\n    if (hwloc_plugins_verbose)\n      fprintf(stderr, \"Failed to find component symbol `%s'\\n\",\n\t      componentsymbolname);\n    free(componentsymbolname);\n    goto out_with_handle;\n  }\n  if (component->abi != HWLOC_COMPONENT_ABI) {\n    if (hwloc_plugins_verbose)\n      fprintf(stderr, \"Plugin symbol ABI %u instead of %d\\n\",\n\t      component->abi, HWLOC_COMPONENT_ABI);\n    free(componentsymbolname);\n    goto out_with_handle;\n  }\n  if (hwloc_plugins_verbose)\n    fprintf(stderr, \"Plugin contains expected symbol `%s'\\n\",\n\t    componentsymbolname);\n  free(componentsymbolname);\n\n  if (HWLOC_COMPONENT_TYPE_DISC == component->type) {\n    if (strncmp(basename, \"hwloc_\", 6)) {\n      if (hwloc_plugins_verbose)\n\tfprintf(stderr, \"Plugin name `%s' doesn't match its type DISCOVERY\\n\", basename);\n      goto out_with_handle;\n    }\n  } else if (HWLOC_COMPONENT_TYPE_XML == component->type) {\n    if (strncmp(basename, \"hwloc_xml_\", 10)) {\n      if (hwloc_plugins_verbose)\n\tfprintf(stderr, \"Plugin name `%s' doesn't match its type XML\\n\", basename);\n      goto out_with_handle;\n    }\n  } else {\n    if (hwloc_plugins_verbose)\n      fprintf(stderr, \"Plugin name `%s' has invalid type %u\\n\",\n\t      basename, (unsigned) component->type);\n    goto out_with_handle;\n  }\n\n  /* allocate a plugin_desc and queue it */\n  desc = malloc(sizeof(*desc));\n  if (!desc)\n    goto out_with_handle;\n  desc->name = strdup(basename);\n  desc->filename = strdup(filename);\n  desc->component = component;\n  desc->handle = handle;\n  desc->next = NULL;\n  if (hwloc_plugins_verbose)\n    fprintf(stderr, \"Plugin descriptor `%s' ready\\n\", basename);\n\n  /* append to the list */\n  prevdesc = &hwloc_plugins;\n  while (*prevdesc)\n    prevdesc = &((*prevdesc)->next);\n  *prevdesc = desc;\n  if (hwloc_plugins_verbose)\n    fprintf(stderr, \"Plugin descriptor `%s' queued\\n\", basename);\n  return 0;\n\n out_with_handle:\n  hwloc_dlclose(handle);\n out:\n  return 0;\n}\n\nstatic void\nhwloc_plugins_exit(void)\n{\n  struct hwloc__plugin_desc *desc, *next;\n\n  if (hwloc_plugins_verbose)\n    fprintf(stderr, \"Closing all plugins\\n\");\n\n  desc = hwloc_plugins;\n  while (desc) {\n    next = desc->next;\n    hwloc_dlclose(desc->handle);\n    free(desc->name);\n    free(desc->filename);\n    free(desc);\n    desc = next;\n  }\n  hwloc_plugins = NULL;\n\n  hwloc_dlexit();\n}\n\nstatic int\nhwloc_plugins_init(void)\n{\n  const char *verboseenv;\n  const char *path = HWLOC_PLUGINS_PATH;\n  const char *env;\n  int err;\n\n  verboseenv = getenv(\"HWLOC_PLUGINS_VERBOSE\");\n  hwloc_plugins_verbose = verboseenv ? atoi(verboseenv) : 0;\n\n  hwloc_plugins_blacklist = getenv(\"HWLOC_PLUGINS_BLACKLIST\");\n\n  err = hwloc_dlinit();\n  if (err)\n    goto out;\n\n  env = getenv(\"HWLOC_PLUGINS_PATH\");\n  if (env)\n    path = env;\n\n  hwloc_plugins = NULL;\n\n  if (hwloc_plugins_verbose)\n    fprintf(stderr, \"Starting plugin dlforeach in %s\\n\", path);\n  err = hwloc_dlforeachfile(path, hwloc__dlforeach_cb, NULL);\n  if (err)\n    goto out_with_init;\n\n  return 0;\n\n out_with_init:\n  hwloc_plugins_exit();\n out:\n  return -1;\n}\n\n#endif /* HWLOC_HAVE_PLUGINS */\n\nstatic int\nhwloc_disc_component_register(struct hwloc_disc_component *component,\n\t\t\t      const char *filename)\n{\n  struct hwloc_disc_component **prev;\n\n  /* check that the component name is valid */\n  if (!strcmp(component->name, HWLOC_COMPONENT_STOP_NAME)) {\n    if (hwloc_components_verbose)\n      fprintf(stderr, \"Cannot register discovery component with reserved name `\" HWLOC_COMPONENT_STOP_NAME \"'\\n\");\n    return -1;\n  }\n  if (strchr(component->name, HWLOC_COMPONENT_EXCLUDE_CHAR)\n      || strchr(component->name, HWLOC_COMPONENT_PHASESEP_CHAR)\n      || strcspn(component->name, HWLOC_COMPONENT_SEPS) != strlen(component->name)) {\n    if (hwloc_components_verbose)\n      fprintf(stderr, \"Cannot register discovery component with name `%s' containing reserved characters `%c\" HWLOC_COMPONENT_SEPS \"'\\n\",\n\t      component->name, HWLOC_COMPONENT_EXCLUDE_CHAR);\n    return -1;\n  }\n\n  /* check that the component phases are valid */\n  if (!component->phases\n      || (component->phases != HWLOC_DISC_PHASE_GLOBAL\n\t  && component->phases & ~(HWLOC_DISC_PHASE_CPU\n\t\t\t\t   |HWLOC_DISC_PHASE_MEMORY\n\t\t\t\t   |HWLOC_DISC_PHASE_PCI\n\t\t\t\t   |HWLOC_DISC_PHASE_IO\n\t\t\t\t   |HWLOC_DISC_PHASE_MISC\n\t\t\t\t   |HWLOC_DISC_PHASE_ANNOTATE\n\t\t\t\t   |HWLOC_DISC_PHASE_TWEAK))) {\n    fprintf(stderr, \"Cannot register discovery component `%s' with invalid phases 0x%x\\n\",\n\t    component->name, component->phases);\n    return -1;\n  }\n\n  prev = &hwloc_disc_components;\n  while (NULL != *prev) {\n    if (!strcmp((*prev)->name, component->name)) {\n      /* if two components have the same name, only keep the highest priority one */\n      if ((*prev)->priority < component->priority) {\n\t/* drop the existing component */\n\tif (hwloc_components_verbose)\n\t  fprintf(stderr, \"Dropping previously registered discovery component `%s', priority %u lower than new one %u\\n\",\n\t\t  (*prev)->name, (*prev)->priority, component->priority);\n\t*prev = (*prev)->next;\n      } else {\n\t/* drop the new one */\n\tif (hwloc_components_verbose)\n\t  fprintf(stderr, \"Ignoring new discovery component `%s', priority %u lower than previously registered one %u\\n\",\n\t\t  component->name, component->priority, (*prev)->priority);\n\treturn -1;\n      }\n    }\n    prev = &((*prev)->next);\n  }\n  if (hwloc_components_verbose)\n    fprintf(stderr, \"Registered discovery component `%s' phases 0x%x with priority %u (%s%s)\\n\",\n\t    component->name, component->phases, component->priority,\n\t    filename ? \"from plugin \" : \"statically build\", filename ? filename : \"\");\n\n  prev = &hwloc_disc_components;\n  while (NULL != *prev) {\n    if ((*prev)->priority < component->priority)\n      break;\n    prev = &((*prev)->next);\n  }\n  component->next = *prev;\n  *prev = component;\n  return 0;\n}\n\n#include \"static-components.h\"\n\nstatic void (**hwloc_component_finalize_cbs)(unsigned long);\nstatic unsigned hwloc_component_finalize_cb_count;\n\nvoid\nhwloc_components_init(void)\n{\n#ifdef HWLOC_HAVE_PLUGINS\n  struct hwloc__plugin_desc *desc;\n#endif\n  const char *verboseenv;\n  unsigned i;\n\n  HWLOC_COMPONENTS_LOCK();\n  assert((unsigned) -1 != hwloc_components_users);\n  if (0 != hwloc_components_users++) {\n    HWLOC_COMPONENTS_UNLOCK();\n    return;\n  }\n\n  verboseenv = getenv(\"HWLOC_COMPONENTS_VERBOSE\");\n  hwloc_components_verbose = verboseenv ? atoi(verboseenv) : 0;\n\n#ifdef HWLOC_HAVE_PLUGINS\n  hwloc_plugins_init();\n#endif\n\n  hwloc_component_finalize_cbs = NULL;\n  hwloc_component_finalize_cb_count = 0;\n  /* count the max number of finalize callbacks */\n  for(i=0; NULL != hwloc_static_components[i]; i++)\n    hwloc_component_finalize_cb_count++;\n#ifdef HWLOC_HAVE_PLUGINS\n  for(desc = hwloc_plugins; NULL != desc; desc = desc->next)\n    hwloc_component_finalize_cb_count++;\n#endif\n  if (hwloc_component_finalize_cb_count) {\n    hwloc_component_finalize_cbs = calloc(hwloc_component_finalize_cb_count,\n\t\t\t\t\t  sizeof(*hwloc_component_finalize_cbs));\n    assert(hwloc_component_finalize_cbs);\n    /* forget that max number and recompute the real one below */\n    hwloc_component_finalize_cb_count = 0;\n  }\n\n  /* hwloc_static_components is created by configure in static-components.h */\n  for(i=0; NULL != hwloc_static_components[i]; i++) {\n    if (hwloc_static_components[i]->flags) {\n      fprintf(stderr, \"Ignoring static component with invalid flags %lx\\n\",\n\t      hwloc_static_components[i]->flags);\n      continue;\n    }\n\n    /* initialize the component */\n    if (hwloc_static_components[i]->init && hwloc_static_components[i]->init(0) < 0) {\n      if (hwloc_components_verbose)\n\tfprintf(stderr, \"Ignoring static component, failed to initialize\\n\");\n      continue;\n    }\n    /* queue ->finalize() callback if any */\n    if (hwloc_static_components[i]->finalize)\n      hwloc_component_finalize_cbs[hwloc_component_finalize_cb_count++] = hwloc_static_components[i]->finalize;\n\n    /* register for real now */\n    if (HWLOC_COMPONENT_TYPE_DISC == hwloc_static_components[i]->type)\n      hwloc_disc_component_register(hwloc_static_components[i]->data, NULL);\n    else if (HWLOC_COMPONENT_TYPE_XML == hwloc_static_components[i]->type)\n      hwloc_xml_callbacks_register(hwloc_static_components[i]->data);\n    else\n      assert(0);\n  }\n\n  /* dynamic plugins */\n#ifdef HWLOC_HAVE_PLUGINS\n  for(desc = hwloc_plugins; NULL != desc; desc = desc->next) {\n    if (desc->component->flags) {\n      fprintf(stderr, \"Ignoring plugin `%s' component with invalid flags %lx\\n\",\n\t      desc->name, desc->component->flags);\n      continue;\n    }\n\n    /* initialize the component */\n    if (desc->component->init && desc->component->init(0) < 0) {\n      if (hwloc_components_verbose)\n\tfprintf(stderr, \"Ignoring plugin `%s', failed to initialize\\n\", desc->name);\n      continue;\n    }\n    /* queue ->finalize() callback if any */\n    if (desc->component->finalize)\n      hwloc_component_finalize_cbs[hwloc_component_finalize_cb_count++] = desc->component->finalize;\n\n    /* register for real now */\n    if (HWLOC_COMPONENT_TYPE_DISC == desc->component->type)\n      hwloc_disc_component_register(desc->component->data, desc->filename);\n    else if (HWLOC_COMPONENT_TYPE_XML == desc->component->type)\n      hwloc_xml_callbacks_register(desc->component->data);\n    else\n      assert(0);\n  }\n#endif\n\n  HWLOC_COMPONENTS_UNLOCK();\n}\n\nvoid\nhwloc_topology_components_init(struct hwloc_topology *topology)\n{\n  topology->nr_blacklisted_components = 0;\n  topology->blacklisted_components = NULL;\n\n  topology->backends = NULL;\n  topology->backend_phases = 0;\n  topology->backend_excluded_phases = 0;\n}\n\n/* look for name among components, ignoring things after `:' */\nstatic struct hwloc_disc_component *\nhwloc_disc_component_find(const char *name, const char **endp)\n{\n  struct hwloc_disc_component *comp;\n  size_t length;\n  const char *end = strchr(name, HWLOC_COMPONENT_PHASESEP_CHAR);\n  if (end) {\n    length = end-name;\n    if (endp)\n      *endp = end+1;\n  } else {\n    length = strlen(name);\n    if (endp)\n      *endp = NULL;\n  }\n\n  comp = hwloc_disc_components;\n  while (NULL != comp) {\n    if (!strncmp(name, comp->name, length))\n      return comp;\n    comp = comp->next;\n  }\n  return NULL;\n}\n\nstatic unsigned\nhwloc_phases_from_string(const char *s)\n{\n  if (!s)\n    return ~0U;\n  if (s[0]<'0' || s[0]>'9') {\n    if (!strcasecmp(s, \"global\"))\n      return HWLOC_DISC_PHASE_GLOBAL;\n    else if (!strcasecmp(s, \"cpu\"))\n      return HWLOC_DISC_PHASE_CPU;\n    if (!strcasecmp(s, \"memory\"))\n      return HWLOC_DISC_PHASE_MEMORY;\n    if (!strcasecmp(s, \"pci\"))\n      return HWLOC_DISC_PHASE_PCI;\n    if (!strcasecmp(s, \"io\"))\n      return HWLOC_DISC_PHASE_IO;\n    if (!strcasecmp(s, \"misc\"))\n      return HWLOC_DISC_PHASE_MISC;\n    if (!strcasecmp(s, \"annotate\"))\n      return HWLOC_DISC_PHASE_ANNOTATE;\n    if (!strcasecmp(s, \"tweak\"))\n      return HWLOC_DISC_PHASE_TWEAK;\n    return 0;\n  }\n  return (unsigned) strtoul(s, NULL, 0);\n}\n\nstatic int\nhwloc_disc_component_blacklist_one(struct hwloc_topology *topology,\n\t\t\t\t   const char *name)\n{\n  struct hwloc_topology_forced_component_s *blacklisted;\n  struct hwloc_disc_component *comp;\n  unsigned phases;\n  unsigned i;\n\n  if (!strcmp(name, \"linuxpci\") || !strcmp(name, \"linuxio\")) {\n    /* replace linuxpci and linuxio with linux (with IO phases)\n     * for backward compatibility with pre-v2.0 and v2.0 respectively */\n    if (hwloc_components_verbose)\n      fprintf(stderr, \"Replacing deprecated component `%s' with `linux' IO phases in blacklisting\\n\", name);\n    comp = hwloc_disc_component_find(\"linux\", NULL);\n    phases = HWLOC_DISC_PHASE_PCI | HWLOC_DISC_PHASE_IO | HWLOC_DISC_PHASE_MISC | HWLOC_DISC_PHASE_ANNOTATE;\n\n  } else {\n    /* normal lookup */\n    const char *end;\n    comp = hwloc_disc_component_find(name, &end);\n    phases = hwloc_phases_from_string(end);\n  }\n  if (!comp) {\n    errno = EINVAL;\n    return -1;\n  }\n\n  if (hwloc_components_verbose)\n    fprintf(stderr, \"Blacklisting component `%s` phases 0x%x\\n\", comp->name, phases);\n\n  for(i=0; i<topology->nr_blacklisted_components; i++) {\n    if (topology->blacklisted_components[i].component == comp) {\n      topology->blacklisted_components[i].phases |= phases;\n      return 0;\n    }\n  }\n\n  blacklisted = realloc(topology->blacklisted_components, (topology->nr_blacklisted_components+1)*sizeof(*blacklisted));\n  if (!blacklisted)\n    return -1;\n\n  blacklisted[topology->nr_blacklisted_components].component = comp;\n  blacklisted[topology->nr_blacklisted_components].phases = phases;\n  topology->blacklisted_components = blacklisted;\n  topology->nr_blacklisted_components++;\n  return 0;\n}\n\nint\nhwloc_topology_set_components(struct hwloc_topology *topology,\n\t\t\t      unsigned long flags,\n\t\t\t      const char *name)\n{\n  if (topology->is_loaded) {\n    errno = EBUSY;\n    return -1;\n  }\n\n  if (flags & ~HWLOC_TOPOLOGY_COMPONENTS_FLAG_BLACKLIST) {\n    errno = EINVAL;\n    return -1;\n  }\n\n  /* this flag is strictly required for now */\n  if (flags != HWLOC_TOPOLOGY_COMPONENTS_FLAG_BLACKLIST) {\n    errno = EINVAL;\n    return -1;\n  }\n\n  if (!strncmp(name, \"all\", 3) && name[3] == HWLOC_COMPONENT_PHASESEP_CHAR) {\n    topology->backend_excluded_phases = hwloc_phases_from_string(name+4);\n    return 0;\n  }\n\n  return hwloc_disc_component_blacklist_one(topology, name);\n}\n\n/* used by set_xml(), set_synthetic(), ... environment variables, ... to force the first backend */\nint\nhwloc_disc_component_force_enable(struct hwloc_topology *topology,\n\t\t\t\t  int envvar_forced,\n\t\t\t\t  const char *name,\n\t\t\t\t  const void *data1, const void *data2, const void *data3)\n{\n  struct hwloc_disc_component *comp;\n  struct hwloc_backend *backend;\n\n  if (topology->is_loaded) {\n    errno = EBUSY;\n    return -1;\n  }\n\n  comp = hwloc_disc_component_find(name, NULL);\n  if (!comp) {\n    errno = ENOSYS;\n    return -1;\n  }\n\n  backend = comp->instantiate(topology, comp, 0U /* force-enabled don't get any phase blacklisting */,\n\t\t\t      data1, data2, data3);\n  if (backend) {\n    int err;\n    backend->envvar_forced = envvar_forced;\n    if (topology->backends)\n      hwloc_backends_disable_all(topology);\n    err = hwloc_backend_enable(backend);\n\n    if (comp->phases == HWLOC_DISC_PHASE_GLOBAL) {\n      char *env = getenv(\"HWLOC_ANNOTATE_GLOBAL_COMPONENTS\");\n      if (env && atoi(env))\n\ttopology->backend_excluded_phases &= ~HWLOC_DISC_PHASE_ANNOTATE;\n    }\n\n    return err;\n  } else\n    return -1;\n}\n\nstatic int\nhwloc_disc_component_try_enable(struct hwloc_topology *topology,\n\t\t\t\tstruct hwloc_disc_component *comp,\n\t\t\t\tint envvar_forced,\n\t\t\t\tunsigned blacklisted_phases)\n{\n  struct hwloc_backend *backend;\n\n  if (!(comp->phases & ~(topology->backend_excluded_phases | blacklisted_phases))) {\n    /* all this backend phases are already excluded, exclude the backend entirely */\n    if (hwloc_components_verbose)\n      /* do not warn if envvar_forced since system-wide HWLOC_COMPONENTS must be silently ignored after set_xml() etc.\n       */\n      fprintf(stderr, \"Excluding discovery component `%s' phases 0x%x, conflicts with excludes 0x%x\\n\",\n\t      comp->name, comp->phases, topology->backend_excluded_phases);\n    return -1;\n  }\n\n  backend = comp->instantiate(topology, comp, topology->backend_excluded_phases | blacklisted_phases,\n\t\t\t      NULL, NULL, NULL);\n  if (!backend) {\n    if (hwloc_components_verbose || envvar_forced)\n      fprintf(stderr, \"Failed to instantiate discovery component `%s'\\n\", comp->name);\n    return -1;\n  }\n\n  backend->phases &= ~blacklisted_phases;\n  backend->envvar_forced = envvar_forced;\n  return hwloc_backend_enable(backend);\n}\n\nvoid\nhwloc_disc_components_enable_others(struct hwloc_topology *topology)\n{\n  struct hwloc_disc_component *comp;\n  struct hwloc_backend *backend;\n  int tryall = 1;\n  const char *_env;\n  char *env; /* we'll to modify the env value, so duplicate it */\n  unsigned i;\n\n  _env = getenv(\"HWLOC_COMPONENTS\");\n  env = _env ? strdup(_env) : NULL;\n\n  /* blacklist disabled components */\n  if (env) {\n    char *curenv = env;\n    size_t s;\n\n    while (*curenv) {\n      s = strcspn(curenv, HWLOC_COMPONENT_SEPS);\n      if (s) {\n\tchar c;\n\n\tif (curenv[0] != HWLOC_COMPONENT_EXCLUDE_CHAR)\n\t  goto nextname;\n\n\t/* save the last char and replace with \\0 */\n\tc = curenv[s];\n\tcurenv[s] = '\\0';\n\n\t/* blacklist it, and just ignore failures to allocate */\n\thwloc_disc_component_blacklist_one(topology, curenv+1);\n\n\t/* remove that blacklisted name from the string */\n\tfor(i=0; i<s; i++)\n\t  curenv[i] = *HWLOC_COMPONENT_SEPS;\n\n\t/* restore chars (the second loop below needs env to be unmodified) */\n\tcurenv[s] = c;\n      }\n\n    nextname:\n      curenv += s;\n      if (*curenv)\n\t/* Skip comma */\n\tcurenv++;\n    }\n  }\n\n  /* enable explicitly listed components */\n  if (env) {\n    char *curenv = env;\n    size_t s;\n\n    while (*curenv) {\n      s = strcspn(curenv, HWLOC_COMPONENT_SEPS);\n      if (s) {\n\tchar c;\n\tconst char *name;\n\n\tif (!strncmp(curenv, HWLOC_COMPONENT_STOP_NAME, s)) {\n\t  tryall = 0;\n\t  break;\n\t}\n\n\t/* save the last char and replace with \\0 */\n\tc = curenv[s];\n\tcurenv[s] = '\\0';\n\n\tname = curenv;\n\tif (!strcmp(name, \"linuxpci\") || !strcmp(name, \"linuxio\")) {\n\t  if (hwloc_components_verbose)\n\t    fprintf(stderr, \"Replacing deprecated component `%s' with `linux' in envvar forcing\\n\", name);\n\t  name = \"linux\";\n\t}\n\n\tcomp = hwloc_disc_component_find(name, NULL /* we enable the entire component, phases must be blacklisted separately */);\n\tif (comp) {\n\t  unsigned blacklisted_phases = 0U;\n\t  for(i=0; i<topology->nr_blacklisted_components; i++)\n\t    if (comp == topology->blacklisted_components[i].component) {\n\t      blacklisted_phases = topology->blacklisted_components[i].phases;\n\t      break;\n\t    }\n\t  if (comp->phases & ~blacklisted_phases)\n\t    hwloc_disc_component_try_enable(topology, comp, 1 /* envvar forced */, blacklisted_phases);\n\t} else {\n\t  fprintf(stderr, \"Cannot find discovery component `%s'\\n\", name);\n\t}\n\n\t/* restore chars (the second loop below needs env to be unmodified) */\n\tcurenv[s] = c;\n      }\n\n      curenv += s;\n      if (*curenv)\n\t/* Skip comma */\n\tcurenv++;\n    }\n  }\n\n  /* env is still the same, the above loop didn't modify it */\n\n  /* now enable remaining components (except the explicitly '-'-listed ones) */\n  if (tryall) {\n    comp = hwloc_disc_components;\n    while (NULL != comp) {\n      unsigned blacklisted_phases = 0U;\n      if (!comp->enabled_by_default)\n\tgoto nextcomp;\n      /* check if this component was blacklisted by the application */\n      for(i=0; i<topology->nr_blacklisted_components; i++)\n\tif (comp == topology->blacklisted_components[i].component) {\n\t  blacklisted_phases = topology->blacklisted_components[i].phases;\n\t  break;\n\t}\n\n      if (!(comp->phases & ~blacklisted_phases)) {\n\tif (hwloc_components_verbose)\n\t  fprintf(stderr, \"Excluding blacklisted discovery component `%s' phases 0x%x\\n\",\n\t\t  comp->name, comp->phases);\n\tgoto nextcomp;\n      }\n\n      hwloc_disc_component_try_enable(topology, comp, 0 /* defaults, not envvar forced */, blacklisted_phases);\nnextcomp:\n      comp = comp->next;\n    }\n  }\n\n  if (hwloc_components_verbose) {\n    /* print a summary */\n    int first = 1;\n    backend = topology->backends;\n    fprintf(stderr, \"Final list of enabled discovery components: \");\n    while (backend != NULL) {\n      fprintf(stderr, \"%s%s(0x%x)\", first ? \"\" : \",\", backend->component->name, backend->phases);\n      backend = backend->next;\n      first = 0;\n    }\n    fprintf(stderr, \"\\n\");\n  }\n\n  free(env);\n}\n\nvoid\nhwloc_components_fini(void)\n{\n  unsigned i;\n\n  HWLOC_COMPONENTS_LOCK();\n  assert(0 != hwloc_components_users);\n  if (0 != --hwloc_components_users) {\n    HWLOC_COMPONENTS_UNLOCK();\n    return;\n  }\n\n  for(i=0; i<hwloc_component_finalize_cb_count; i++)\n    hwloc_component_finalize_cbs[hwloc_component_finalize_cb_count-i-1](0);\n  free(hwloc_component_finalize_cbs);\n  hwloc_component_finalize_cbs = NULL;\n  hwloc_component_finalize_cb_count = 0;\n\n  /* no need to unlink/free the list of components, they'll be unloaded below */\n\n  hwloc_disc_components = NULL;\n  hwloc_xml_callbacks_reset();\n\n#ifdef HWLOC_HAVE_PLUGINS\n  hwloc_plugins_exit();\n#endif\n\n  HWLOC_COMPONENTS_UNLOCK();\n}\n\nstruct hwloc_backend *\nhwloc_backend_alloc(struct hwloc_topology *topology,\n\t\t    struct hwloc_disc_component *component)\n{\n  struct hwloc_backend * backend = malloc(sizeof(*backend));\n  if (!backend) {\n    errno = ENOMEM;\n    return NULL;\n  }\n  backend->component = component;\n  backend->topology = topology;\n  /* filter-out component phases that are excluded */\n  backend->phases = component->phases & ~topology->backend_excluded_phases;\n  if (backend->phases != component->phases && hwloc_components_verbose)\n    fprintf(stderr, \"Trying discovery component `%s' with phases 0x%x instead of 0x%x\\n\",\n\t    component->name, backend->phases, component->phases);\n  backend->flags = 0;\n  backend->discover = NULL;\n  backend->get_pci_busid_cpuset = NULL;\n  backend->disable = NULL;\n  backend->is_thissystem = -1;\n  backend->next = NULL;\n  backend->envvar_forced = 0;\n  return backend;\n}\n\nstatic void\nhwloc_backend_disable(struct hwloc_backend *backend)\n{\n  if (backend->disable)\n    backend->disable(backend);\n  free(backend);\n}\n\nint\nhwloc_backend_enable(struct hwloc_backend *backend)\n{\n  struct hwloc_topology *topology = backend->topology;\n  struct hwloc_backend **pprev;\n\n  /* check backend flags */\n  if (backend->flags) {\n    fprintf(stderr, \"Cannot enable discovery component `%s' phases 0x%x with unknown flags %lx\\n\",\n\t    backend->component->name, backend->component->phases, backend->flags);\n    return -1;\n  }\n\n  /* make sure we didn't already enable this backend, we don't want duplicates */\n  pprev = &topology->backends;\n  while (NULL != *pprev) {\n    if ((*pprev)->component == backend->component) {\n      if (hwloc_components_verbose)\n\tfprintf(stderr, \"Cannot enable  discovery component `%s' phases 0x%x twice\\n\",\n\t\tbackend->component->name, backend->component->phases);\n      hwloc_backend_disable(backend);\n      errno = EBUSY;\n      return -1;\n    }\n    pprev = &((*pprev)->next);\n  }\n\n  if (hwloc_components_verbose)\n    fprintf(stderr, \"Enabling discovery component `%s' with phases 0x%x (among 0x%x)\\n\",\n\t    backend->component->name, backend->phases, backend->component->phases);\n\n  /* enqueue at the end */\n  pprev = &topology->backends;\n  while (NULL != *pprev)\n    pprev = &((*pprev)->next);\n  backend->next = *pprev;\n  *pprev = backend;\n\n  topology->backend_phases |= backend->component->phases;\n  topology->backend_excluded_phases |= backend->component->excluded_phases;\n  return 0;\n}\n\nvoid\nhwloc_backends_is_thissystem(struct hwloc_topology *topology)\n{\n  struct hwloc_backend *backend;\n  const char *local_env;\n\n  /*\n   * If the application changed the backend with set_foo(),\n   * it may use set_flags() update the is_thissystem flag here.\n   * If it changes the backend with environment variables below,\n   * it may use HWLOC_THISSYSTEM envvar below as well.\n   */\n\n  topology->is_thissystem = 1;\n\n  /* apply thissystem from normally-given backends (envvar_forced=0, either set_foo() or defaults) */\n  backend = topology->backends;\n  while (backend != NULL) {\n    if (backend->envvar_forced == 0 && backend->is_thissystem != -1) {\n      assert(backend->is_thissystem == 0);\n      topology->is_thissystem = 0;\n    }\n    backend = backend->next;\n  }\n\n  /* override set_foo() with flags */\n  if (topology->flags & HWLOC_TOPOLOGY_FLAG_IS_THISSYSTEM)\n    topology->is_thissystem = 1;\n\n  /* now apply envvar-forced backend (envvar_forced=1) */\n  backend = topology->backends;\n  while (backend != NULL) {\n    if (backend->envvar_forced == 1 && backend->is_thissystem != -1) {\n      assert(backend->is_thissystem == 0);\n      topology->is_thissystem = 0;\n    }\n    backend = backend->next;\n  }\n\n  /* override with envvar-given flag */\n  local_env = getenv(\"HWLOC_THISSYSTEM\");\n  if (local_env)\n    topology->is_thissystem = atoi(local_env);\n}\n\nvoid\nhwloc_backends_find_callbacks(struct hwloc_topology *topology)\n{\n  struct hwloc_backend *backend = topology->backends;\n  /* use the first backend's get_pci_busid_cpuset callback */\n  topology->get_pci_busid_cpuset_backend = NULL;\n  while (backend != NULL) {\n    if (backend->get_pci_busid_cpuset) {\n      topology->get_pci_busid_cpuset_backend = backend;\n      return;\n    }\n    backend = backend->next;\n  }\n  return;\n}\n\nvoid\nhwloc_backends_disable_all(struct hwloc_topology *topology)\n{\n  struct hwloc_backend *backend;\n\n  while (NULL != (backend = topology->backends)) {\n    struct hwloc_backend *next = backend->next;\n    if (hwloc_components_verbose)\n      fprintf(stderr, \"Disabling discovery component `%s'\\n\",\n\t      backend->component->name);\n    hwloc_backend_disable(backend);\n    topology->backends = next;\n  }\n  topology->backends = NULL;\n  topology->backend_excluded_phases = 0;\n}\n\nvoid\nhwloc_topology_components_fini(struct hwloc_topology *topology)\n{\n  /* hwloc_backends_disable_all() must have been called earlier */\n  assert(!topology->backends);\n\n  free(topology->blacklisted_components);\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/contrib/hwloc-valgrind.supp": "# Copyright \u00a9 2012-2018 Inria.  All rights reserved.\n# See COPYING in top-level directory.\n\n# suppressions file to be passed to valgrind with\n#   --suppressions=/path/to/hwloc-valgrind.supp\n\n# zlib (brought by libpci or libxml2) doesn't cleanup its global state\n{\n   inflate_init\n   Memcheck:Cond\n   fun:inflateReset2\n   fun:inflateInit2_\n}\n\n# hwloc cannot free the global parser (with xmlCleanupParser()) because other threads may be using it\n{\n   xml_init_parser\n   Memcheck:Leak\n   ...\n   fun:xmlInitParser\n}\n\n# hwloc cannot free the global xml dict RMutex because it cannot call xmlCleanupParser() as explained above\n{\n   xml_dict_create_new_rmutex\n   Memcheck:Leak\n   fun:malloc\n   fun:xmlNewRMutex\n   ...\n   fun:xmlDictCreate\n}\n\n# ltdl dlopen global state?\n{\n   ltdl_dlopen_doit_leak\n   Memcheck:Leak\n   ...\n   fun:dl_open_worker\n   fun:_dl_catch_error\n   fun:_dl_open\n   fun:dlopen_doit\n}\n\n# ltdl_dlclose_leak\n{\n   ltdl_dlclose_leak\n   Memcheck:Leak\n   ...\n   fun:_dl_close_worker\n   fun:_dl_close\n   ...\n   fun:dlclose\n}\n\n# lt_dlforeachfile abusing paths\n{\n   lt_dlforeachfile_addr8\n   Memcheck:Addr8\n   fun:_wordcopy_fwd_dest_aligned\n   fun:__GI_memmove\n   fun:argz_insert\n   ...\n   fun:lt_dlforeachfile\n}\n\n# cuda\n{\n   cuda_leak\n   Memcheck:Leak\n   ...\n   obj:*libcuda*\n}\n\n# nvml\n{\n   nvmlInit_cond\n   Memcheck:Cond\n   ...\n   obj:*nvidia-ml*\n   ...\n   fun:nvmlInit\n}\n\n# amd opencl\n{\n   atical_leak\n   Memcheck:Leak\n   ...\n   obj:*libatical*\n}\n{\n   atical_cond\n   Memcheck:Cond\n   ...\n   obj:*libatical*\n}\n{\n   amdocl_leak\n   Memcheck:Leak\n   ...\n   obj:*libamdocl*\n}\n{\n   amdocl_param\n   Memcheck:Param\n   write(buf)\n   fun:*write*\n   obj:*libamdocl*\n}\n{\n   opencl_leak\n   Memcheck:Leak\n   ...\n   obj:*libOpenCL*\n   ...\n   fun:clGetPlatformIDs\n}\n{\n   libatiadl_xcb_leak\n   Memcheck:Leak\n   ...\n   obj:*libxcb*\n   ...\n   fun:XOpenDisplay\n   ...\n   obj:*libatiadl*\n}\n\n#  libpciaccess global state leak\n{\n   libpciaccess_device_name_leak\n   Memcheck:Leak\n   ...\n   fun:pci_device_get_device_name\n   fun:hwloc_look_pci\n}\n{\n   libpciaccess_leak\n   Memcheck:Leak\n   ...\n   obj:*libpciaccess*\n   ...\n   fun:hwloc_look_pci\n}\n\n# libudev global hashes\n{\n   libudev_hashmap_property\n   Memcheck:Leak\n   fun:malloc\n   ...\n   fun:udev_device_get_property_value\n}\n{\n   libudev_hashmap_sysname\n   Memcheck:Leak\n   fun:malloc\n   ...\n   fun:udev_device_new_from_subsystem_sysname\n}\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/doc/hwloc.doxy": "/*\n * Copyright \u00a9 2009 CNRS\n * Copyright \u00a9 2009-2020 Inria.  All rights reserved.\n * Copyright \u00a9 2009-2013 Universit\u00e9 Bordeaux\n * Copyright \u00a9 2009-2014 Cisco Systems, Inc.  All rights reserved.\n * See COPYING in top-level directory.\n */\n\n/*! \\page hwloc_intro Hardware Locality (hwloc) Introduction\n\n<h1 class=\"sub\">Portable abstraction of hierarchical architectures for high-performance computing</h1>\n\n<hr>\n\n\\htmlonly\n<div class=\"section\">\n\\endhtmlonly\nSee also \\ref further_reading\n\\htmlonly\nor the Related pages tab above\n\\endhtmlonly\nfor links to more sections about hwloc concepts.\n\\htmlonly\n</div>\n\\endhtmlonly\n\n\\htmlonly\n<div class=\"section\" id=\"hwloc_summary\">\n\\endhtmlonly\n\\section hwloc_summary hwloc Summary\n\nhwloc provides command line tools and a C API to obtain the\nhierarchical map of key computing elements within a node, such as: NUMA memory\nnodes, shared caches, processor packages, dies and cores,\nprocessing units (logical processors or \"threads\")\nand even I/O devices.\nhwloc also gathers various attributes such as\ncache and memory information, and is portable across a variety of\ndifferent operating systems and platforms.\n\nhwloc primarily aims at helping high-performance computing (HPC)\napplications, but is also applicable to any project seeking to exploit\ncode and/or data locality on modern computing platforms.\n\nhwloc supports the following operating systems:\n\n<ul>\n<li>Linux (including old kernels not having sysfs topology\ninformation, with knowledge of cpusets, ScaleMP vSMP support, etc.)\non all supported hardware, including Intel Xeon Phi\nand NumaScale NumaConnect.</li>\n<li>Solaris (with support for processor sets and logical domains)</li>\n<li>AIX</li>\n<li>Darwin / OS X</li>\n<li>FreeBSD and its variants (such as kFreeBSD/GNU)</li>\n<li>NetBSD</li>\n<li>HP-UX</li>\n<li>Microsoft Windows</li>\n<li>IBM BlueGene/Q Compute Node Kernel (CNK)</li>\n</ul>\n\nSince it uses standard Operating System information, hwloc's support is mostly\nindependant from the processor type (x86, powerpc, ...) and just relies on the\nOperating System support. The main exception is BSD operating systems (NetBSD, FreeBSD, etc.)\nbecause they do not provide support topology information, hence hwloc uses an x86-only CPUID-based\nbackend (which can be used for other OSes too, see the \\ref plugins section).\n\nTo check whether hwloc works on a particular machine, just try to build it\nand run <tt>lstopo</tt> or <tt>lstopo-no-graphics</tt>. If some things do not look right\n(e.g. bogus or missing cache information), see \\ref bugs.\n\nhwloc only reports the number of processors on unsupported operating\nsystems; no topology information is available.\n\nFor development and debugging purposes, hwloc also offers the ability to\nwork on \"fake\" topologies:\n\n<ul>\n  <li> Symmetrical tree of resources generated from a list of level arities,\n  see \\ref synthetic.</li>\n  <li> Remote machine simulation through the gathering of topology as XML files,\n  see \\ref xml.</li>\n</ul>\n\nhwloc can display the topology in a human-readable format, either in\ngraphical mode (X11), or by exporting in one of several different\nformats, including: plain text, PDF, PNG, and FIG (see \\ref cli_examples\nbelow).  Note that some of the export formats require additional\nsupport libraries.\n\nhwloc offers a programming interface for manipulating topologies and\nobjects. It also brings a powerful CPU bitmap API that is used to\ndescribe topology objects location on physical/logical processors. See\nthe \\ref interface below. It may also be used to binding applications\nonto certain cores or memory nodes. Several utility programs are also\nprovided to ease command-line manipulation of topology objects,\nbinding of processes, and so on.\n\nPerl bindings are available from Bernd Kallies on\n<a href=http://search.cpan.org/~bka/Sys-Hwloc-0.10/>CPAN</a>.\n\nPython bindings are available from Guy Streeter:\n<ul>\n<li><a href=http://people.redhat.com/streeter/>Fedora RPM and tarball</a>.</li>\n<li><a href=git://git.fedorahosted.org/python-hwloc.git>git tree</a>\n(<a href=http://git.fedorahosted.org/git/python-hwloc.git>html</a>).</li>\n</ul>\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"hwloc_installation\">\n\\endhtmlonly\n\\section hwloc_installation hwloc Installation\n\nThe generic installation procedure for both hwloc and netloc\nis described in \\ref common_installation.\n\nThe hwloc command-line tool \"lstopo\" produces human-readable topology\nmaps, as mentioned above.  It can also export maps to the \"fig\" file\nformat.  Support for PDF, Postscript, and PNG exporting is provided if\nthe \"Cairo\" development package (usually <tt>cairo-devel</tt> or\n<tt>libcairo2-dev</tt>) can be found in \"lstopo\" when hwloc\nis configured and build.\n\nThe hwloc core may also benefit from the following development packages:\n<ul>\n<li>libpciaccess for full I/O device discovery\n    (<tt>libpciaccess-devel</tt> or <tt>libpciaccess-dev</tt> package).\n    On Linux, PCI discovery may still be performed (without vendor/device names)\n    even if libpciaccess cannot be used.\n</li>\n\n<li>AMD or NVIDIA OpenCL implementations for OpenCL device discovery.\n</li>\n<li>the NVIDIA CUDA Toolkit for CUDA device discovery.\n</li>\n<li>the NVIDIA Management Library (NVML) for NVML device discovery.\n  It is included in CUDA since version 8.0.\n  Older NVML releases were available within the NVIDIA GPU Deployment Kit\n  from https://developer.nvidia.com/gpu-deployment-kit .\n</li>\n<li>the NV-CONTROL X extension library (NVCtrl) for NVIDIA display discovery.\n  The relevant development package is usually <tt>libXNVCtrl-devel</tt>\n  or <tt>libxnvctrl-dev</tt>.\n  It is also available within nvidia-settings from ftp://download.nvidia.com/XFree86/nvidia-settings/\n  and https://github.com/NVIDIA/nvidia-settings/ .\n</li>\n<li>libxml2 for full XML import/export support (otherwise, the\n    internal minimalistic parser will only be able to import\n    XML files that were exported by the same hwloc release).\n    See \\ref xml for details.\n    The relevant development package is usually <tt>libxml2-devel</tt>\n    or <tt>libxml2-dev</tt>.\n</li>\n<li>libudev on Linux for easier discovery of OS device information\n    (otherwise hwloc will try to manually parse udev raw files).\n    The relevant development package is usually <tt>libudev-devel</tt>\n    or <tt>libudev-dev</tt>.\n</li>\n<li>libtool's ltdl library for dynamic plugin loading if the native dlopen cannot be used.\n  The relevant development package is usually <tt>libtool-ltdl-devel</tt>\n  or <tt>libltdl-dev</tt>.\n</li>\n</ul>\n\nPCI and XML support may be statically built inside the main hwloc\nlibrary, or as separate dynamically-loaded plugins (see the\n\\ref plugins section).\n\nNote that because of the possibility of GPL taint, the\n<tt>pciutils</tt> library <tt>libpci</tt> will not be used (remember\nthat hwloc is BSD-licensed).\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"cli_examples\">\n\\endhtmlonly\n\\section cli_examples Command-line Examples\n\nOn a 4-package 2-core machine with hyper-threading, the \\c lstopo tool\nmay show the following graphical output:\n\n\\image html dudley.png\n\\image latex dudley.png \"\" width=\\textwidth\n\nHere's the equivalent output in textual form:\n\n\\verbatim\nMachine\n  NUMANode L#0 (P#0)\n  Package L#0 + L3 L#0 (4096KB)\n    L2 L#0 (1024KB) + L1 L#0 (16KB) + Core L#0\n      PU L#0 (P#0)\n      PU L#1 (P#8)\n    L2 L#1 (1024KB) + L1 L#1 (16KB) + Core L#1\n      PU L#2 (P#4)\n      PU L#3 (P#12)\n  Package L#1 + L3 L#1 (4096KB)\n    L2 L#2 (1024KB) + L1 L#2 (16KB) + Core L#2\n      PU L#4 (P#1)\n      PU L#5 (P#9)\n    L2 L#3 (1024KB) + L1 L#3 (16KB) + Core L#3\n      PU L#6 (P#5)\n      PU L#7 (P#13)\n  Package L#2 + L3 L#2 (4096KB)\n    L2 L#4 (1024KB) + L1 L#4 (16KB) + Core L#4\n      PU L#8 (P#2)\n      PU L#9 (P#10)\n    L2 L#5 (1024KB) + L1 L#5 (16KB) + Core L#5\n      PU L#10 (P#6)\n      PU L#11 (P#14)\n  Package L#3 + L3 L#3 (4096KB)\n    L2 L#6 (1024KB) + L1 L#6 (16KB) + Core L#6\n      PU L#12 (P#3)\n      PU L#13 (P#11)\n    L2 L#7 (1024KB) + L1 L#7 (16KB) + Core L#7\n      PU L#14 (P#7)\n      PU L#15 (P#15)\n\\endverbatim\n\nNote that there is also an equivalent output in XML that is meant for\nexporting/importing topologies but it is hardly readable to human-beings\n(see \\ref xml for details).\n\nOn a 4-package 2-core Opteron NUMA machine\n(with two core cores disallowed by the administrator),\nthe \\c lstopo tool may show the following graphical output\n(with <tt>\\--disallowed</tt> for displaying disallowed objects):\n\n\\image html hagrid.png\n\\image latex hagrid.png \"\" width=\\textwidth\n\nHere's the equivalent output in textual form:\n\n\\verbatim\nMachine (32GB total)\n  Package L#0\n    NUMANode L#0 (P#0 8190MB)\n    L2 L#0 (1024KB) + L1 L#0 (64KB) + Core L#0 + PU L#0 (P#0)\n    L2 L#1 (1024KB) + L1 L#1 (64KB) + Core L#1 + PU L#1 (P#1)\n  Package L#1\n    NUMANode L#1 (P#1 8192MB)\n    L2 L#2 (1024KB) + L1 L#2 (64KB) + Core L#2 + PU L#2 (P#2)\n    L2 L#3 (1024KB) + L1 L#3 (64KB) + Core L#3 + PU L#3 (P#3)\n  Package L#2\n    NUMANode L#2 (P#2 8192MB)\n    L2 L#4 (1024KB) + L1 L#4 (64KB) + Core L#4 + PU L#4 (P#4)\n    L2 L#5 (1024KB) + L1 L#5 (64KB) + Core L#5 + PU L#5 (P#5)\n  Package L#3\n    NUMANode L#3 (P#3 8192MB)\n    L2 L#6 (1024KB) + L1 L#6 (64KB) + Core L#6 + PU L#6 (P#6)\n    L2 L#7 (1024KB) + L1 L#7 (64KB) + Core L#7 + PU L#7 (P#7)\n\\endverbatim\n\nOn a 2-package quad-core Xeon (pre-Nehalem, with 2 dual-core dies into\neach package):\n\n\\image html emmett.png\n\\image latex emmett.png \"\" width=\\textwidth\n\nHere's the same output in textual form:\n\n\\verbatim\nMachine (total 16GB)\n  NUMANode L#0 (P#0 16GB)\n  Package L#0\n    L2 L#0 (4096KB)\n      L1 L#0 (32KB) + Core L#0 + PU L#0 (P#0)\n      L1 L#1 (32KB) + Core L#1 + PU L#1 (P#4)\n    L2 L#1 (4096KB)\n      L1 L#2 (32KB) + Core L#2 + PU L#2 (P#2)\n      L1 L#3 (32KB) + Core L#3 + PU L#3 (P#6)\n  Package L#1\n    L2 L#2 (4096KB)\n      L1 L#4 (32KB) + Core L#4 + PU L#4 (P#1)\n      L1 L#5 (32KB) + Core L#5 + PU L#5 (P#5)\n    L2 L#3 (4096KB)\n      L1 L#6 (32KB) + Core L#6 + PU L#6 (P#3)\n      L1 L#7 (32KB) + Core L#7 + PU L#7 (P#7)\n\\endverbatim\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"interface\">\n\\endhtmlonly\n\\section interface Programming Interface\n\nThe basic interface is available in hwloc.h.\nSome higher-level functions are available in hwloc/helper.h to reduce\nthe need to manually manipulate objects and follow links between them.\nDocumentation for all these is provided later in this document.\nDevelopers may also want to look at hwloc/inlines.h which contains the\nactual inline code of some hwloc.h routines, and at this document,\nwhich provides good higher-level topology traversal examples.\n\nTo precisely define the vocabulary used by hwloc, a \\ref termsanddefs\nsection is available and should probably be read first.  \n\nEach hwloc object contains a cpuset describing the list of processing\nunits that it contains.  These bitmaps may be used for\n\\ref hwlocality_cpubinding and \\ref hwlocality_membinding.\nhwloc offers an extensive\nbitmap manipulation interface in hwloc/bitmap.h.\n\nMoreover, hwloc also comes with additional helpers for\ninteroperability with several commonly used environments.\nSee the \\ref interoperability section for details.\n\nThe complete API documentation is available in a full set of HTML\npages, man pages, and self-contained PDF files (formatted for both\nboth US letter and A4 formats) in the source tarball in\ndoc/doxygen-doc/.  \n\n<strong>NOTE:</strong> If you are building the documentation from a\nGit clone, you will need to have Doxygen and pdflatex\ninstalled -- the documentation will be built during the normal \"make\"\nprocess.  The documentation is installed during \"make install\" to\n$prefix/share/doc/hwloc/ and your systems default man page tree (under\n$prefix, of course).\n\n\\subsection portability Portability\n\nOperating System have varying support for CPU and memory binding,\ne.g. while some Operating Systems provide interfaces for all kinds of CPU and\nmemory bindings, some others provide only interfaces for a limited number of\nkinds of CPU and memory binding, and some do not provide any binding interface\nat all.  Hwloc's binding functions would then simply return the ENOSYS error\n(Function not implemented), meaning that the underlying Operating System\ndoes not provide any interface for them. \\ref hwlocality_cpubinding and\n\\ref hwlocality_membinding provide more information on which hwloc binding functions\nshould be preferred because interfaces for them are usually available on the\nsupported Operating Systems.\n\nSimilarly, the ability of reporting topology information varies from\none platform to another.\nAs shown in \\ref cli_examples, hwloc can obtain information on a wide\nvariety of hardware topologies.  However, some platforms and/or\noperating system versions will only report a subset of this\ninformation.  For example, on an PPC64-based system with 8 cores\n(each with 2 hardware threads) running a default 2.6.18-based kernel\nfrom RHEL 5.4, hwloc is only able to glean information about NUMA\nnodes and processor units (PUs).  No information about caches,\npackages, or cores is available.\n\nHere's the graphical output from lstopo on this platform when\nSimultaneous Multi-Threading (SMT) is enabled:\n\n\\image html ppc64-with-smt.png\n\\image latex ppc64-with-smt.png \"\" width=\\textwidth\n\nAnd here's the graphical output from lstopo on this platform when SMT is\ndisabled:\n\n\\image html ppc64-without-smt.png\n\\image latex ppc64-without-smt.png \"\" width=.5\\textwidth\n\nNotice that hwloc only sees half the PUs when SMT is disabled.\nPU L#6, for example, seems to change location from NUMA node #0 to #1.\nIn reality, no PUs \"moved\" -- they were simply re-numbered when hwloc\nonly saw half as many (see also Logical index in \\ref termsanddefs_indexes).\nHence, PU L#6 in the SMT-disabled picture probably corresponds to\nPU L#12 in the SMT-enabled picture.\n\nThis same \"PUs have disappeared\" effect can be seen on other platforms\n-- even platforms / OSs that provide much more information than the\nabove PPC64 system.  This is an unfortunate side-effect of how\noperating systems report information to hwloc.\n\nNote that upgrading the Linux kernel on the same PPC64 system\nmentioned above to 2.6.34, hwloc is able to discover all the topology\ninformation.  The following picture shows the entire topology layout\nwhen SMT is enabled:\n\n\\image html ppc64-full-with-smt.png\n\\image latex ppc64-full-with-smt.png \"\" width=\\textwidth\n\nDevelopers using the hwloc API or XML output for portable applications\nshould therefore be extremely careful to not make any assumptions\nabout the structure of data that is returned.  For example, per the\nabove reported PPC topology, it is not safe to assume that PUs will\nalways be descendants of cores.\n\nAdditionally, future hardware may insert new topology elements that\nare not available in this version of hwloc.  Long-lived applications\nthat are meant to span multiple different hardware platforms should\nalso be careful about making structure assumptions.  For example,\na new element may someday exist between a core and a PU.\n\n\n\\subsection interface_example API Example\n\nThe following small C example (available in the source tree as ``doc/examples/hwloc-hello.c'')\nprints the topology of the machine and performs some thread and memory binding.\nMore examples are available in the doc/examples/ directory of the source\ntree.\n\n\\include examples/hwloc-hello.c\n\nhwloc provides a \\c pkg-config executable to obtain relevant compiler\nand linker flags.  For example, it can be used thusly to compile\napplications that utilize the hwloc library (assuming GNU Make):\n\n\\verbatim\nCFLAGS += $(shell pkg-config --cflags hwloc)\nLDLIBS += $(shell pkg-config --libs hwloc)\n\nhwloc-hello: hwloc-hello.c\n        $(CC) hwloc-hello.c $(CFLAGS) -o hwloc-hello $(LDLIBS)\n\\endverbatim\n\nOn a machine 2 processor packages -- each package of\nwhich has two processing cores -- the output from running \\c\nhwloc-hello could be something like the following:\n\n\\verbatim\nshell$ ./hwloc-hello\n*** Objects at level 0\nIndex 0: Machine\n*** Objects at level 1\nIndex 0: Package#0\nIndex 1: Package#1\n*** Objects at level 2\nIndex 0: Core#0\nIndex 1: Core#1\nIndex 2: Core#3\nIndex 3: Core#2\n*** Objects at level 3\nIndex 0: PU#0\nIndex 1: PU#1\nIndex 2: PU#2\nIndex 3: PU#3\n*** Printing overall tree\nMachine\n  Package#0\n    Core#0\n      PU#0\n    Core#1\n      PU#1\n  Package#1\n    Core#3\n      PU#2\n    Core#2\n      PU#3\n*** 2 package(s)\n*** Logical processor 0 has 0 caches totaling 0KB\nshell$ \n\\endverbatim\n\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"history\">\n\\endhtmlonly\n\\section history History / Credits\n\nhwloc is the evolution and merger of the libtopology\n(http://runtime.bordeaux.inria.fr/libtopology/) project and the Portable\nLinux Processor Affinity (PLPA) (http://www.open-mpi.org/projects/plpa/)\nproject. Because of functional and ideological overlap, these two code bases\nand ideas were merged and released under the name \"hwloc\" as an Open MPI\nsub-project.\n\nlibtopology was initially developed by the inria Runtime Team-Project\n(http://runtime.bordeaux.inria.fr/) (headed by Raymond Namyst\n(http://dept-info.labri.fr/~namyst/). PLPA was initially developed by\nthe Open MPI development team as a sub-project. Both are now deprecated\nin favor of hwloc, which is distributed as an Open MPI sub-project.\n\n\\htmlonly\n</div><div class=\"section\" id=\"further_reading\">\n\\endhtmlonly\n\\section further_reading Further Reading\n\nThe documentation chapters include\n\n<ul>\n<li> \\ref termsanddefs \n<li> \\ref tools\n<li> \\ref envvar\n<li> \\ref cpu_mem_bind\n<li> \\ref iodevices\n<li> \\ref miscobjs\n<li> \\ref attributes\n<li> \\ref xml\n<li> \\ref synthetic\n<li> \\ref interoperability\n<li> \\ref threadsafety\n<li> \\ref plugins\n<li> \\ref embed\n<li> \\ref faq\n<li> \\ref upgrade_to_api_2x\n</ul>\n\nMake sure to have had a look at those too!\n\n\\htmlonly\n</div>\n\\endhtmlonly\n\n\n\n\\page termsanddefs Terms and Definitions \n\n \n\\htmlonly\n<div class=\"section\" id=\"termsanddefs_objects\">\n\\endhtmlonly\n\\section termsanddefs_objects Objects\n\n<dl>\n\n<dt>Object</dt>\n  <dd>Interesting kind of part of the system, such as a Core, a L2Cache,\n  a NUMA memory node, etc. The different types detected by hwloc are\n  detailed in the ::hwloc_obj_type_t enumeration.\n\n  There are four kinds of Objects: Memory (NUMA nodes and Memory-side caches), I/O (Bridges, PCI and OS devices),\n  Misc, and Normal (everything else, including Machine, Package, Die, Core, PU, CPU Caches, etc.).\n  Normal and Memory objects have (non-NULL) CPU sets and nodesets, while I/O and Misc don't.\n\n  Objects are topologically sorted by locality (CPU and node sets)\n  into a tree (see \\ref termsanddefs_tree).\n  </dd>\n\n<dt>Processing Unit (or Logical Processor)</dt>\n  <dd>The smallest processing element that can be represented by a hwloc\n  object. It may be a single-core processor, a core of a multicore\n  processor, or a single thread in a SMT processor.\n  hwloc's PU acronym stands for Processing Unit.\n\n  \"Logical processor\" should not be confused with \"Logical index of a\n  processor\".\n  </dd>\n\n<dt>Package</dt>\n  <dd>A processor Package is the physical package that usually gets\n  inserted into a socket on the motherboard.\n  It is also often called a physical processor or a CPU even if these\n  names bring confusion with respect to cores and processing units.\n  A processor package usually contains multiple cores\n  (and may also be composed of multiple dies).\n  hwloc Package objects were called Sockets up to hwloc 1.10.\n  </dd>\n\n<dt>NUMA Node</dt>\n  <dd>\n  An object that contains memory that is directly and byte-accessible\n  to the host processors.\n  It is usually close to some cores as specified by its CPU set.\n  Hence it is attached as a memory child of the object that groups\n  those cores together, for instance a Package objects with 4 Core children\n  (see \\ref termsanddefs_tree).\n  </dd>\n\n<dt>Memory-side Cache</dt>\n  <dd>\n  A cache in front of a specific memory region (e.g. a range of physical addresses).\n  It caches all accesses to that region without caring about which core issued the request.\n  This is the opposite of usual CPU caches where only accesses from the local cores\n  are cached, without caring about the target memory.\n\n  In hwloc, memory-side caches are memory objects placed between their local CPU objects\n  (parent) and the target NUMA node memory (child).\n  </dd>\n</dl>\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"termsanddefs_indexes\">\n\\endhtmlonly\n\\section termsanddefs_indexes Indexes and Sets\n\n<dl>\n\n<dt>OS or physical index</dt>\n  <dd>The index that the operating system (OS) uses to identify the\n  object.  This may be completely arbitrary, non-unique, non-contiguous, not\n  representative of logical proximity, and may depend on the BIOS\n  configuration. That is why hwloc almost never uses them, only in the default\n  lstopo output (<tt>P\\#x</tt>) and cpuset masks.\n  See also \\ref faq_indexes.</dd>\n\n<dt>Logical index</dt>\n  <dd>Index to uniquely identify objects of the same type and depth,\n  automatically computed by hwloc according to the topology.  It expresses\n  logical proximity in a generic way, i.e. objects which have adjacent logical\n  indexes are adjacent in the topology. That is why hwloc almost always uses\n  it in its API, since it expresses logical proximity. They can be shown (as\n  <tt>L\\#x</tt>) by <tt>lstopo</tt> thanks to the <tt>-l</tt> option.  This index\n  is always linear and in\n  the range [0, num_objs_same_type_same_level-1].  Think of it as ``cousin\n  rank.'' The ordering is based on topology first, and then on OS CPU numbers,\n  so it is stable across everything except firmware CPU renumbering.\n  \"Logical index\" should not be confused with \"Logical processor\". A \"Logical\n  processor\" (which in hwloc we rather call \"processing unit\" to avoid the\n  confusion) has both a physical index (as chosen arbitrarily by BIOS/OS) and a logical\n  index (as computed according to logical proximity by hwloc).\n  See also \\ref faq_indexes.</dd>\n\n<dt>CPU set</dt>\n  <dd>The set of logical processors (or processing units) logically included in an object\n  (if it makes sense).  They are always expressed using physical logical\n  processor numbers (as announced by the OS).  They are implemented as the\n  ::hwloc_bitmap_t opaque structure.  hwloc CPU sets are just masks, they\n  do \\em not have any relation with an operating system actual binding notion like\n  Linux' cpusets.\n  I/O and Misc objects do not have CPU sets while all Normal and Memory objects have non-NULL CPU sets.</dd>\n\n<dt>Node set</dt>\n  <dd>The set of NUMA memory nodes logically included in an object\n  (if it makes sense).  They are always expressed using physical node\n  numbers (as announced by the OS).  They are implemented with the\n  ::hwloc_bitmap_t opaque structure.\n  as bitmaps.\n  I/O and Misc objects do not have Node sets while all Normal and Memory objects have non-NULL nodesets.</dd>\n\n<dt>Bitmap</dt>\n  <dd>A possibly-infinite set of bits used for describing sets of objects\n  such as CPUs (CPU sets) or memory nodes (Node sets). They are implemented\n  with the ::hwloc_bitmap_t opaque structure.\n</dd>\n\n</dl>\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"termsanddefs_tree\">\n\\endhtmlonly\n\\section termsanddefs_tree Hierarchy, Tree and Levels\n\n<dl>\n\n<dt>Parent object</dt>\n  <dd>The object logically containing the current object, for example\n  because its CPU set includes the CPU set of the current object.\n  All objects have a non-NULL parent, except the root of the topology (Machine object).\n  </dd>\n\n<dt>Ancestor object</dt>\n  <dd>The parent object, or its own parent, and so on.</dd>\n\n<dt>Children object(s)</dt>\n  <dd>The object (or objects) contained in the current object because\n  their CPU set is included in the CPU set of the current object.\n  Each object may also contain separated lists for Memory, I/O and Misc object children.\n  </dd>\n\n<dt>Arity</dt>\n  <dd>The number of normal children of an object.\n  There are also specific arities for Memory, I/O and Misc children.\n  </dd>\n\n<dt>Sibling objects</dt>\n  <dd>Objects in the same children list, which all of them are normal\n  children of the same parent, or all of them are Memory children of\n  the same parent, or I/O children, or Misc.\n  They usually have the same type (and hence are cousins, as well).\n  But they may not if the topology is asymmetric.\n  </dd>\n\n<dt>Sibling rank</dt>\n  <dd>Index to uniquely identify objects which have\n  the same parent, and is always in the range [0, arity-1]\n  (respectively memory_arity, io_arity or misc_arity for Memory, I/O\n  and Misc children of a parent).</dd>\n\n<dt>Cousin objects</dt>\n  <dd>Objects of the same type (and depth) as the current object,\n  even if they do not have the same parent.</dd>\n\n<dt>Level</dt>\n  <dd>Set of objects of the same type and depth. All these objects\n  are cousins.\n\n  Memory, I/O and Misc objects also have their own specific levels and (virtual) depth.\n  </dd>\n\n<dt>Depth</dt>\n  <dd>Nesting level in the object tree, starting from the root object.\n  If the topology is symmetric, the depth of a child is equal to the\n  parent depth plus one, and an object depth is also equal to the number\n  of parent/child links between the root object and the given object.\n  If the topology is asymmetric, the difference between some parent\n  and child depths may be larger than one when some intermediate levels\n  (for instance groups) are missing in only some parts of the machine.\n\n  The depth of the Machine object is always 0 since it is always the\n  root of the topology.\n  The depth of PU objects is equal to the number of levels in the topology\n  minus one.\n\n  Memory, I/O and Misc objects also have their own specific levels and depth.\n  </dd>\n\n</dl>\n\nThe following diagram can help to understand the vocabulary of the relationships\nby showing the example of a machine with two dual core packages (with no\nhardware threads); thus, a topology with 5 levels. Each box with rounded corner\ncorresponds to one ::hwloc_obj_t, containing the values of the different integer\nfields (depth, logical_index, etc.), and arrows show to which other ::hwloc_obj_t\npointers point to (first_child, parent, etc.).\n\nThe topology always starts with a Machine object as root (depth 0)\nand ends with PU objects at the bottom (depth 4 here).\n\nObjects of the same level (cousins) are listed in red boxes and linked\nwith red arrows.\nChildren of the same parent (siblings) are linked with blue arrows.\n\nThe L2 cache of the last core is intentionally missing to show how asymmetric topologies are handled.\nSee \\ref faq_asymmetric for more information about such strange topologies.\n\n\\image html diagram.png\n\\image latex diagram.eps \"\" width=\\textwidth\n\nIt should be noted that for PU objects, the logical index -- as\ncomputed linearly by hwloc -- is not the same as the OS index.\n\nThe NUMA node is on the side because it is not part of the main tree\nbut rather attached to the object that corresponds to its locality\n(the entire machine here, hence the root object).\nIt is attached as a <i>Memory</i> child (in green) and has a virtual depth (negative).\nIt could also have siblings if there were multiple local NUMA nodes,\nor cousins if other NUMA nodes were attached somewhere else in the machine.\n\nI/O or Misc objects could be attached in a similar manner.\n\n\n\n\\page tools Command-Line Tools \n\n\\htmlonly\n<div class=\"section\">\n\\endhtmlonly\n\nhwloc comes with an extensive C programming interface and several\ncommand line utilities. Each of them is fully documented in its own\nmanual page; the following is a summary of the available command line\ntools.\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"cli_lstopo\">\n\\endhtmlonly\n\\section cli_lstopo lstopo and lstopo-no-graphics\n\nlstopo (also known as hwloc-ls) displays the\nhierarchical topology map of the current system.  The output may be\ngraphical, ascii-art or textual, and can also be exported to numerous file\nformats such as PDF, PNG, XML, and others.\nAdvanced graphical outputs require the \"Cairo\" development package\n(usually <tt>cairo-devel</tt> or <tt>libcairo2-dev</tt>).\n\nlstopo and lstopo-no-graphics accept the same command-line options.\nHowever, graphical outputs are only available in lstopo.\nTextual outputs (those that do not depend on heavy external libraries\nsuch as Cairo) are supported in both lstopo and lstopo-no-graphics.\n\nThis command can also display the processes currently bound to a part\nof the machine (via the <tt>\\--ps</tt> option).\n\nNote that lstopo can read XML files and/or alternate chroot\nfilesystems and display topological maps representing those systems\n(e.g., use lstopo to output an XML file on one system, and then use\nlstopo to read in that XML file and display it on a different system).\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"cli_hwloc_bind\">\n\\endhtmlonly\n\\section cli_hwloc_bind hwloc-bind\n\nhwloc-bind binds processes to specific hardware objects through a\nflexible syntax.  A simple example is binding an executable to\nspecific cores (or packages or bitmaps or ...).  The hwloc-bind(1) man\npage provides much more detail on what is possible.\n\nhwloc-bind can also be used to retrieve the current process' binding,\nor retrieve the last CPU(s) where a process ran,\nor operate on memory binding.\n\nJust like hwloc-calc, the input locations given to hwloc-bind may be\neither objects or cpusets (bitmaps as reported by hwloc-calc or hwloc-distrib).\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"cli_hwloc_calc\">\n\\endhtmlonly\n\\section cli_hwloc_calc hwloc-calc\n\nhwloc-calc is hwloc's Swiss Army Knife command-line tool for converting things.\nThe input may be either objects or cpusets (bitmaps as reported by another hwloc-calc instance or by hwloc-distrib),\nthat may be combined by addition, intersection or subtraction.\nThe output kinds include:\n<ul>\n<li>a cpuset bitmap: This compact opaque representation of objects is useful for shell scripts etc.\nIt may passed to hwloc command-line tools such as hwloc-calc or hwloc-bind,\nor to hwloc command-line options such as <tt>lstopo \\--restrict</tt>.</li>\n<li>the amount of the equivalent hwloc objects from a specific type, or the list of their indexes.\nThis is useful for iterating over all similar objects (for instance all cores) within a given\npart of a platform.</li>\n<li>a hierarchical description of objects,\nfor instance a thread index within a core within a package.\nThis gives a better view of the actual location of an object.</li>\n</ul>\n\nMoreover, input and/or output may be use either physical/OS object\nindexes or as hwloc's logical object indexes.\nIt eases cooperation with external tools such as taskset or numactl\nby exporting hwloc specifications into list of processor or NUMA node\nphysical indexes.\nSee also \\ref faq_indexes.\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"cli_hwloc_info\">\n\\endhtmlonly\n\\section cli_hwloc_info hwloc-info\n\nhwloc-info dumps information about the given objects, as well as all its specific attributes.\nIt is intended to be used with tools such as grep for filtering\ncertain attribute lines.\nWhen no object is specified, or when <tt>\\--topology</tt> is passed,\nhwloc-info prints a summary of the topology.\nWhen <tt>\\--support</tt> is passed, hwloc-info lists the supported\nfeatures for the topology.\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"cli_hwloc_distrib\">\n\\endhtmlonly\n\\section cli_hwloc_distrib hwloc-distrib\n\nhwloc-distrib generates a set of cpuset bitmaps that are uniformly\ndistributed across the machine for the given number of processes.\nThese strings may be used with hwloc-bind to run processes to maximize\ntheir memory bandwidth by properly distributing them across the\nmachine.\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"cli_hwloc_ps\">\n\\endhtmlonly\n\\section cli_hwloc_ps hwloc-ps\n\nhwloc-ps is a tool to display the bindings of processes that are\ncurrently running on the local machine.  By default, hwloc-ps only\nlists processes that are bound; unbound process (and Linux kernel\nthreads) are not displayed.\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"cli_hwloc_annotate\">\n\\endhtmlonly\n\\section cli_hwloc_annotate hwloc-annotate\n\nhwloc-annotate may modify object (and topology) attributes such as string information\n(see \\ref attributes_info for details) or Misc children objects.\nIt reads an input topology from a XML file and outputs\nthe annotated topology as another XML file.\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"cli_hwloc_diffpatchcompress\">\n\\endhtmlonly\n\\section cli_hwloc_diffpatchcompress hwloc-diff, hwloc-patch and hwloc-compress-dir\n\nhwloc-diff computes the difference between two topologies\nand outputs it to another XML file.\n\nhwloc-patch reads such a difference file and applies to\nanother topology.\n\nhwloc-compress-dir compresses an entire directory of XML\nfiles by using hwloc-diff to save the differences between\ntopologies instead of entire topologies.\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"cli_hwloc_dump_hwdata\">\n\\endhtmlonly\n\\section cli_hwloc_dump_hwdata hwloc-dump-hwdata\n\nhwloc-dump-hwdata is a Linux and x86-specific tool that dumps\n(during boot, privileged) some topology and locality information\nfrom raw hardware files (SMBIOS and ACPI tables) to human-readable\nand world-accessible files that the hwloc library will later reuse.\n\nCurrently only used on Intel Xeon Phi processor platforms.\nSee \\ref faq_knl_dump.\n\nSee <tt>HWLOC_DUMPED_HWDATA_DIR</tt> in \\ref envvar for details\nabout the location of dumped files.\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"cli_hwloc_gather\">\n\\endhtmlonly\n\\section cli_hwloc_gather hwloc-gather-topology and hwloc-gather-cpuid\n\nhwloc-gather-topology is a Linux-specific tool that saves the\nrelevant topology files of the current machine into a tarball\n(and the corresponding lstopo outputs).\n\nhwloc-gather-cpuid is a x86-specific tool that dumps the\nresult of CPUID instructions on the current machine into\na directory.\n\nThe output of hwloc-gather-cpuid is included in the tarball\nsaved by hwloc-gather-topology when running on Linux/x86.\n\nThese files may be used later (possibly offline) for simulating\nor debugging a machine without actually running on it.\n\n\n\n\n\\page envvar Environment Variables\n\n\\htmlonly\n<div class=\"section\">\n\\endhtmlonly\n\nThe behavior of the hwloc library and tools may be tuned thanks to the\nfollowing environment variables.\n\n<dl>\n\n<dt>HWLOC_XMLFILE=/path/to/file.xml</dt>\n  <dd>enforces the discovery from the given XML file as if\n  hwloc_topology_set_xml() had been called.\n  This file may have been generated earlier with lstopo file.xml.\n  For convenience, this backend provides empty binding hooks which just\n  return success.  To have hwloc still actually call OS-specific hooks,\n  HWLOC_THISSYSTEM should be set 1 in the environment too, to assert that\n  the loaded file is really the underlying system.\n  See also \\ref xml.\n  </dd>\n\n<dt>HWLOC_SYNTHETIC=synthetic_description</dt>\n  <dd>enforces the discovery through a synthetic description string\n  as if hwloc_topology_set_synthetic() had been called.\n  For convenience, this backend provides empty binding hooks which just\n  return success.\n  See also \\ref synthetic.\n  </dd>\n\n<dt>HWLOC_XML_VERBOSE=1</dt>\n<dt>HWLOC_SYNTHETIC_VERBOSE=1</dt>\n  <dd>enables verbose messages in the XML or synthetic topology backends.\n  hwloc XML backends (see \\ref xml) can emit some error messages to\n  the error output stream.\n  Enabling these verbose messages within hwloc can be useful for\n  understanding failures to parse input XML topologies.\n  Similarly, enabling verbose messages in the synthetic topology\n  backend can help understand why the description string is invalid.\n  See also \\ref synthetic.\n  </dd>\n\n<dt>HWLOC_THISSYSTEM=1</dt>\n  <dd>enforces the return value of hwloc_topology_is_thissystem(), as if\n  ::HWLOC_TOPOLOGY_FLAG_IS_THISSYSTEM was set with hwloc_topology_set_flags().\n  It means that it makes hwloc assume that the selected backend provides the\n  topology for the system on which we are running, even if it is not the\n  OS-specific backend but the XML backend for instance.\n  This means making the binding functions actually call the OS-specific\n  system calls and really do binding, while the XML backend would otherwise\n  provide empty hooks just returning success.\n  This can be used for efficiency reasons to first detect the topology once,\n  save it to an XML file, and quickly reload it later through the XML\n  backend, but still having binding functions actually do bind.\n  This also enables support for the variable HWLOC_THISSYSTEM_ALLOWED_RESOURCES.\n  </dd>\n\n<dt>HWLOC_THISSYSTEM_ALLOWED_RESOURCES=1</dt>\n  <dd>Get the set of allowed resources from the native operating system\n  even if the topology was loaded from XML or synthetic description,\n  as if ::HWLOC_TOPOLOGY_FLAG_THISSYSTEM_ALLOWED_RESOURCES was set\n  with hwloc_topology_set_flags().\n  This variable requires the topology to match the current system\n  (see the variable HWLOC_THISSYSTEM).\n  This is useful when the topology is not loaded directly from the\n  local machine (e.g. for performance reason) and it comes with all\n  resources, but the running process is restricted to only a part\n  of the machine (for instance because of Linux Cgroup/Cpuset).\n  </dd>\n\n<dt>HWLOC_ALLOW=all</dt>\n  <dd>Totally ignore administrative restrictions such as Linux Cgroups\n  and consider all resources (PUs and NUMA nodes) as allowed.\n  This is different from setting HWLOC_TOPOLOGY_FLAG_INCLUDE_DISALLOWED\n  which gathers all resources but marks the unavailable ones as disallowed.\n  </dt>\n\n<dt>HWLOC_HIDE_ERRORS=0</dt>\n  <dd>enables or disables verbose reporting of errors.\n  The hwloc library may issue warnings to the standard error stream\n  when it detects a problem during topology discovery, for instance\n  if the operating system (or user) gives contradictory topology\n  information.   Setting this environment variable to 1 removes the\n  actual displaying of these error messages.\n  </dd>\n\n<dt>HWLOC_USE_NUMA_DISTANCES=7</dt>\n  <dd>enables or disables the use of NUMA distances.\n  NUMA distances and memory target/initiator information may be used\n  to improve the locality of NUMA nodes, especially CPU-less nodes.\n  Bits in the value of this environment variable enable different features:\n  Bit 0 enables the gathering of NUMA distances from the operating system.\n  Bit 1 further enables the use of NUMA distances to improve the\n  locality of CPU-less nodes.\n  Bit 2 enables the use of target/initiator information.\n  </dd>\n\n<dt>HWLOC_GROUPING=1</dt>\n  <dd>enables or disables objects grouping based on distances.\n  By default, hwloc uses distance matrices between objects (either read\n  from the OS or given by the user) to find groups of close objects.\n  These groups are described by adding intermediate Group objects in the topology.\n  Setting this environment variable to 0 will disable this grouping.\n  This variable supersedes the obsolete HWLOC_IGNORE_DISTANCES variable.\n  </dd>\n\n<dt>HWLOC_GROUPING_ACCURACY=0.05</dt>\n  <dd>relaxes distance comparison during grouping.\n  By default, objects may be grouped if their distances form a minimal\n  distance graph. When setting this variable to 0.02, and when\n  ::HWLOC_DISTANCES_ADD_FLAG_GROUP_INACCURATE is given, these distances\n  do not have to be strictly equal anymore, they may just be equal\n  with a 2% error.\n  If set to <tt>try</tt> instead of a numerical value, hwloc will try\n  to group with perfect accuracy (0, the default), then with 0.01, 0.02,\n  0.05 and finally 0.1.\n  Numbers given in this environment variable should always use a dot\n  as a decimal mark (for instance 0.01 instead of 0,01).</dd>\n\n<dt>HWLOC_GROUPING_VERBOSE=0</dt>\n  <dd>enables or disables some verbose messages during grouping.\n  If this variable is set to 1, some debug messages will be displayed\n  during distance-based grouping of objects even if debug was not specific\n  at configure time.\n  This is useful when trying to find an interesting distance grouping\n  accuracy.</dd>\n\n<dt>HWLOC_PCI_LOCALITY=&lt;domain/bus&gt; &lt;cpuset&gt;;...</dt>\n<dt>HWLOC_PCI_LOCALITY=/path/to/pci/locality/file</dt>\n<dd>changes the locality of I/O devices behing the specified PCI buses.\n  If no I/O locality information is available or if the BIOS reports\n  incorrect information, it is possible to move a I/O device tree\n  (OS and/or PCI devices with optional bridges)\n  near a custom set of processors.\n  <br/>\n  Localities are given either inside the environment variable itself,\n  or in the pointed file.\n  They may be separated either by semi-colons or by line-breaks.\n  <br/>\n  Each locality contains a domain/bus specification (in hexadecimal numbers as usual)\n  followed by a whitespace and a cpuset:\n  <ul>\n  <li><tt>0001 &lt;cpuset&gt;</tt> specifies the locality of all buses in PCI domain 0000.</li>\n  <li><tt>0000:0f &lt;cpuset&gt;</tt> specifies only PCI bus 0f in domain 0000.</li>\n  <li><tt>0002:04-0a &lt;cpuset&gt;</tt> specifies a range of buses (from 04 to 0a) within domain 0002.</li>\n  </ul>\n  Domain/bus specifications should usually match entire hierarchies of buses\n  behind a bridge (including primary, secondary and subordinate buses).\n  For instance, if hostbridge 0000:00 is above other bridges/switches with buses 0000:01 to 0000:09,\n  the variable should be HWLOC_PCI_LOCALITY=\"0000:00-09 <cpuset>\".\n  It supersedes the old HWLOC_PCI_0000_00_LOCALCPUS=&lt;cpuset&gt;\n  which only works when hostbridges exist in the topology.\n  <br/>\n  If the variable is defined to empty or invalid, no forced PCI locality is applied\n  but hwloc's internal automatic locality quirks are disabled, which means the exact\n  PCI locality reported by the platform is used.\n  </dd>\n\n<dt>HWLOC_X86_TOPOEXT_NUMANODES=0</dt>\n  <dd>use AMD topoext CPUID leaf in the x86 backend to detect NUMA nodes.\n  When using the x86 backend, setting this variable to 1 enables the building\n  of NUMA nodes from AMD processor CPUID instructions.\n  However this strategy does not always reflect BIOS configuration such as NUMA interleaving.\n  And node indexes may be different from those of the operating system.\n  Hence this should only be used when OS backends are wrong\n  and the user is sure that CPUID returns correct NUMA information.\n  </dd>\n\n<dt>HWLOC_KEEP_NVIDIA_GPU_NUMA_NODES=0</dt>\n  <dd>show or hide NUMA nodes that correspond to NVIDIA GPU memory.\n  By default they are ignored to avoid interleaved memory being allocated\n  on GPU by mistake.\n  Setting this environment variable to 1 exposes these NUMA nodes.\n  They may be recognized by the <em>GPUMemory</em> subtype.\n  They also have a <em>PCIBusID</em> info attribute to identify the\n  corresponding GPU.\n  </dd>\n\n<dt>HWLOC_KNL_MSCACHE_L3=0</dt>\n  <dd>Expose the KNL MCDRAM in cache mode as a Memory-side Cache instead of a L3.\n  hwloc releases prior to 2.1 exposed the MCDRAM cache as a CPU-side L3 cache.\n  Now that Memory-side caches are supported by hwloc, it is still exposed\n  as a L3 by default to avoid breaking existing applications.\n  Setting this environment variable to 1 will expose it as a proper Memory-side cache.\n  </dd>\n\n<dt>HWLOC_ANNOTATE_GLOBAL_COMPONENTS=0</dt>\n  <dd>Allow components to annotate the topology even if they are\n  usually excluded by global components by default.\n  Setting this variable to 1 and also setting <tt>HWLOC_COMPONENTS=xml,pci,stop</tt>\n  enables the addition of PCI vendor and model info attributes to a XML topology\n  that was generated without those names (if pciaccess was missing).\n  </dd>\n\n<dt>HWLOC_FSROOT=/path/to/linux/filesystem-root/</dt>\n  <dd>switches to reading the topology from the specified\n  Linux filesystem root instead of the main file-system root.\n  This directory may have been saved previously from another machine\n  with <tt>hwloc-gather-topology</tt>.\n  <br/>\n  One should likely also set <tt>HWLOC_COMPONENTS=linux,stop</tt>\n  so that non-Linux backends are disabled\n  (the <tt>-i</tt> option of command-line tools takes care of both).\n  <br/>\n  Not using the main file-system root causes hwloc_topology_is_thissystem()\n  to return 0.\n  For convenience, this backend provides empty binding hooks which just\n  return success.  To have hwloc still actually call OS-specific hooks,\n  HWLOC_THISSYSTEM should be set 1 in the environment too, to assert that\n  the loaded file is really the underlying system.\n  </dd>\n\n<dt>HWLOC_CPUID_PATH=/path/to/cpuid/</dt>\n  <dd>forces the x86 backend to read dumped CPUIDs from the given directory\n  instead of executing actual x86 CPUID instructions.\n  This directory may have been saved previously from another machine\n  with <tt>hwloc-gather-cpuid</tt>.\n  <br/>\n  One should likely also set <tt>HWLOC_COMPONENTS=x86,stop</tt>\n  so that non-x86 backends are disabled\n  (the <tt>-i</tt> option of command-line tools takes care of both).\n  <br/>\n  It causes hwloc_topology_is_thissystem() to return 0.\n  For convenience, this backend provides empty binding hooks which just\n  return success.  To have hwloc still actually call OS-specific hooks,\n  HWLOC_THISSYSTEM should be set 1 in the environment too, to assert that\n  the loaded CPUID dump is really the underlying system.\n  </dd>\n\n<dt>HWLOC_DUMPED_HWDATA_DIR=/path/to/dumped/files/</dt>\n  <dd>loads files dumped by <tt>hwloc-dump-hwdata</tt> (on Linux)\n  from the given directory.\n  The default dump/load directory is configured during build based\n  on \\--runstatedir, \\--localstatedir, and \\--prefix options.\n  It usually points to <tt>/var/run/hwloc/</tt> in Linux distribution\n  packages, but it may also point to <tt>$prefix/var/run/hwloc/</tt>\n  when manually installing and only specifying \\--prefix.\n  </dd>\n\n<dt>HWLOC_COMPONENTS=list,of,components</dt>\n  <dd>forces a list of components to enable or disable.\n  Enable or disable the given comma-separated list of components\n  (if they do not conflict with each other). Component names prefixed with\n  <tt>-</tt> are disabled (a single phase may also be disabled).\n\n  Once the end of the list is reached, hwloc falls back to\n  enabling the remaining components (sorted by priority) that do not\n  conflict with the already enabled ones, and unless explicitly disabled in the\n  list.\n  If <tt>stop</tt> is met, the enabling loop immediately stops, no\n  more component is enabled.\n\n  If <tt>xml</tt> or <tt>synthetic</tt> components are selected,\n  the corresponding XML filename or synthetic description string\n  should be pass in <tt>HWLOC_XMLFILE</tt> or <tt>HWLOC_SYNTHETIC</tt>\n  respectively.\n\n  Since this variable is the low-level and more generic way to\n  select components, it takes precedence over environment variables\n  for selecting components.\n\n  If the variable is set to an empty string (or set to a single comma),\n  no specific component is loaded first, all components are loaded\n  in priority order.\n\n  See \\ref plugins_select for details.\n  </dd>\n\n<dt>HWLOC_COMPONENTS_VERBOSE=1</dt>\n  <dd>displays verbose information about components.\n  Display messages when components are registered or enabled.\n  This is the recommended way to list the available components\n  with their priority\n  (all of them are <em>registered</em> at startup).\n  </dd>\n\n<dt>HWLOC_PLUGINS_PATH=/path/to/hwloc/plugins/:...</dt>\n  <dd>changes the default search directory for plugins.\n  By default, <tt>$libdir/hwloc</tt> is used.\n  The variable may contain several colon-separated directories.\n  </dd>\n\n<dt>HWLOC_PLUGINS_VERBOSE=1</dt>\n  <dd>displays verbose information about plugins.\n  List which directories are scanned, which files are loaded,\n  and which components are successfully loaded.\n  </dd>\n\n<dt>HWLOC_PLUGINS_BLACKLIST=filename1,filename2,...</dt>\n  <dd>prevents plugins from being loaded if their filename\n  (without path) is listed.\n  Plugin filenames may be found in verbose messages outputted\n  when HWLOC_PLUGINS_VERBOSE=1.\n  </dd>\n\n<dt>HWLOC_DEBUG_VERBOSE=0</dt>\n  <dd>disables all verbose messages that are enabled by default\n  when <tt>--enable-debug</tt> is passed to configure.\n  </dd>\n\n</dl>\n\n<!-- not documented:\n HWLOC_USE_DT\n  enables the use of the POWER Device-Tree on Linux (disabled by default since 2.1)\n HWLOC_KNL_NUMA_QUIRK\n  disables the KNL NUMA Cluster quirk in the linux backend\n HWLOC_KNL_HDH_FALLBACK\n  if 1, ignore KNL info from hwloc-dump-hwdata and fallback to heuristic\n  if 0, never fallback to the hardwired heuristic, useful if the heuristic is wrong\n HWLOC_DEBUG_ALLOW_OVERLAPPING_NODE_CPUSETS\n  don't ignore linux numa nodes with overlapping cpusets\n HWLOC_DEBUG_SORT_CHILDREN\n  sort osdev I/O children by name to make sure the topology doesn't depend\n  on the ordering of dentries in the local filesystem (for Linux fsroot tests)\n HWLOC_DEBUG_CHECK\n  runs sanity checks during discovery, as if \\--enable-debug was passed but\n  without debug messages\n  may be useful in the doc for debugging?\n HWLOC_HIDE_DEPRECATED\n  hides some warnings about deprecated features.\n  listed in those warnings so no need to document it\n HWLOC_TEST_GATHER_TOPOLOGY=0\n  disable the hwloc-gather-topology test when too long on large servers\n HWLOC_FORCE_BGQ\n  makes the bgq component run even if it doesn't recognize the running platform as a BGQ/CNK\n HWLOC_PICL_HETEROGENEOUS\n  don't apply PICL info from a single CPU to all CPUs since the machine isn't homogeneous\n HWLOC_DEBUG_FAKE_COMPONENT\n  enables debugging message to check that the fake component gets loaded\n HWLOC_DONT_ADD_VERSION_INFO\n  do not add hwlocVersion and processName info attributes (to facilitate comparing outputs)\n HWLOC_LIBXML=0\n HWLOC_LIBXML_EXPORT=0\n HWLOC_LIBXML_IMPORT=0\n  forces the use of the nolibxml XML backend instead of libxml2 if available,\n  for both import and export, or only one\n HWLOC_LIBXML_CLEANUP\n  cleanup libxml when ending import, to make valgrind happy\n  not enabled by default because somebody else may be using libxml\n HWLOC_XML_USERDATA_NOT_DECODED\n  do not decode base64 userdata on import,\n  and reexport it the same (used by tools for leaving userdata untouched)\n-->\n\n\n\n\n\\page cpu_mem_bind CPU and Memory Binding Overview\n\n\\htmlonly\n<div class=\"section\">\n\\endhtmlonly\n\nSome operating systems do not systematically provide separate\nfunctions for CPU and memory binding.  This means that CPU binding\nfunctions may have have effects on the memory binding policy.\nLikewise, changing the memory binding policy may change the CPU\nbinding of the current thread.  This is often not a problem for\napplications, so by default hwloc will make use of these functions\nwhen they provide better binding support.\n\nIf the application does not want the CPU binding to change when\nchanging the memory policy, it needs to use the\n::HWLOC_MEMBIND_NOCPUBIND flag to prevent hwloc from using OS functions\nwhich would change the CPU binding.  Additionally,\n::HWLOC_CPUBIND_NOMEMBIND can be passed to CPU binding function to\nprevent hwloc from using OS functions would change the memory binding\npolicy.  Of course, using these flags will reduce hwloc's overall support for\nbinding, so their use is discouraged.\n\nOne can avoid using these flags but still closely control both memory\nand CPU binding by allocating memory, touching each page in the\nallocated memory, and then changing the CPU binding.  The\nalready-really-allocated memory will then be \"locked\" to physical\nmemory and will not be migrated.  Thus, even if the memory binding\npolicy gets changed by the CPU binding order, the already-allocated\nmemory will not change with it.  When binding and allocating further\nmemory, the CPU binding should be performed again in case the memory\nbinding altered the previously-selected CPU binding.\n\nNot all operating systems support the notion of a \"current\" memory\nbinding policy for the current process, but such operating systems often still\nprovide a way to allocate data on a given node set.  Conversely, some\noperating systems support the notion of a \"current\" memory binding policy and do\nnot permit allocating data on a specific node set without changing the\ncurrent policy and allocate the data. To provide the most powerful coverage of\nthese facilities, hwloc provides:\n\n<ul>\n<li>functions that set/get the current memory binding policies (if supported):\nhwloc_set/get_membind() and hwloc_set/get_proc_membind()\n<li>a function that allocates memory bound to specific node set without changing\nthe current memory binding policy (if supported): hwloc_alloc_membind().\n<li>a helper which, if needed, changes the current memory binding policy of the\nprocess in order to obtain memory binding: hwloc_alloc_membind_policy().\n</ul>\n\nAn application can thus use the two first sets of functions if it wants to\nmanage separately the global process binding policy and directed allocation,\nor use the third set of functions if it does not care about the process memory\nbinding policy.\n\nSee \\ref hwlocality_cpubinding and \\ref hwlocality_membinding for\nhwloc's API functions regarding CPU and memory binding, respectively.\nThere are some examples under doc/examples/ in the source tree.\n\n\n\n\\page iodevices I/O Devices\n\n\\htmlonly\n<div class=\"section\">\n\\endhtmlonly\n\nhwloc usually manipulates processing units and memory but it can also\ndiscover I/O devices and report their locality as well.\nThis is useful for placing I/O intensive applications on cores near the\nI/O devices they use, or for gathering information about all platform\ncomponents.\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"iodevices_enabling\">\n\\endhtmlonly\n\\section iodevices_enabling Enabling and requirements\n\nI/O discovery is disabled by default (except in lstopo) for performance\nreasons.\nIt can be enabled by changing the filtering of I/O object types to\n<tt>::HWLOC_TYPE_FILTER_KEEP_IMPORTANT</tt> or <tt>::HWLOC_TYPE_FILTER_KEEP_ALL</tt>\nbefore loading the topology, for instance with <tt>hwloc_topology_set_io_types_filter()</tt>.\n\nNote that I/O discovery requires significant help from the operating system.\nThe pciaccess library (the development package is usually <tt>libpciaccess-devel</tt>\nor <tt>libpciaccess-dev</tt>) is needed to fully detect PCI devices and bridges/switches.\nOn Linux, PCI discovery may still be performed even if <tt>libpciaccess</tt> cannot\nbe used. But it misses PCI device names.\nMoreover, some operating systems require privileges for probing PCI devices,\nsee \\ref faq_privileged for details.\n\nThe actual locality of I/O devices is only currently detected on Linux.\nOther operating system will just report I/O devices as being attached\nto the topology root object.\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"iodevices_objects\">\n\\endhtmlonly\n\\section iodevices_objects I/O objects\n\nWhen I/O discovery is enabled and supported, some additional objects\nare added to the topology.\nThe corresponding I/O object types are:\n<ul><li>\n<tt>::HWLOC_OBJ_OS_DEVICE</tt> describes an operating-system-specific\nhandle such as the <em>sda</em> drive or the <em>eth0</em> network interface.\nSee \\ref iodevices_osdev.\n</li><li>\n<tt>::HWLOC_OBJ_PCI_DEVICE</tt> and <tt>::HWLOC_OBJ_BRIDGE</tt> build up\na PCI hierarchy made of bridges (that may be actually be switches) and devices.\nSee \\ref iodevices_pci.\n</li></ul>\nAny of these types may be filtered individually with <tt>hwloc_topology_set_type_filter()</tt>.\n\nhwloc tries to attach these new objects to normal objects\n(usually NUMA nodes) to match their actual physical location.\nFor instance, if a I/O hub (or root complex) is physically connected to a package,\nthe corresponding hwloc bridge object (and its PCI bridges and devices children)\nis inserted as a child of the corresponding hwloc Package object.\n<b>These children are not in the normal children list but rather in the I/O-specific\nchildren list.</b>\n\nI/O objects also have neither CPU sets nor node sets (NULL pointers) because\nthey are not directly usable by the user applications for binding.\nMoreover I/O hierarchies may be highly complex (asymmetric trees of bridges).\nSo I/O objects are placed in specific levels with custom depths.\nTheir lists may still be traversed with regular helpers such as\nhwloc_get_next_obj_by_type().\nHowever, hwloc offers some dedicated helpers such as hwloc_get_next_pcidev()\nand hwloc_get_next_osdev() for convenience (see \\ref hwlocality_advanced_io).\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"iodevices_osdev\">\n\\endhtmlonly\n\\section iodevices_osdev OS devices\n\nAlthough each PCI device is uniquely identified by its bus ID\n(e.g. 0000:01:02.3), a user-space application can hardly find out which\nPCI device it is actually using.\nApplications rather use software handles\n(such as the <em>eth0</em> network interface,\n the <em>sda</em> hard drive,\n or the <em>mlx4_0</em> OpenFabrics HCA).\nTherefore hwloc tries to add software devices\n(<tt>::HWLOC_OBJ_OS_DEVICE</tt>, also known as OS devices).\n\nOS devices may be attached below PCI devices, but they may also be\nattached directly to normal objects.\nIndeed some OS devices are not related to PCI.\nFor instance, NVDIMM block devices (such as <em>pmem0s</em> on Linux)\nare directly attached near their NUMA node\n(I/O child of the parent whose memory child is the NUMA node).\nAlso, if hwloc could not discover PCI for some reason, PCI-related\nOS devices may also be attached directly to normal objects.\n\nhwloc first tries to discover OS devices from the operating system,\ne.g. <em>eth0</em>, <em>sda</em> or <em>mlx4_0</em>.\nHowever, this ability is currently only available on Linux for some\nclasses of devices.\n\nhwloc then tries to discover software devices through additional\nI/O components using external libraries.\nFor instance proprietary graphics drivers do not expose any named OS device,\nbut hwloc may still create one OS object per software handle when\nsupported.\nFor instance the <tt>opencl</tt> and <tt>cuda</tt> components may\nadd some <em>opencl0d0</em> and <em>cuda0</em> OS device objects.\n\nHere is a list of OS device objects commonly created by hwloc\ncomponents when I/O discovery is enabled and supported.\n\n<ul>\n<li>Hard disks or non-volatile memory devices (::HWLOC_OBJ_OSDEV_BLOCK)\n <ul>\n <li><em>sda</em> or <em>dax2.0</em> (Linux component)</li>\n </ul>\n</li>\n<li>Network interfaces (::HWLOC_OBJ_OSDEV_NETWORK)\n <ul>\n <li><em>eth0</em>, <em>wlan0</em>, <em>ib0</em> (Linux component)</li>\n </ul>\n</li>\n<li>OpenFabrics (InfiniBand, Omni-Path, usNIC, etc) HCAs (::HWLOC_OBJ_OSDEV_OPENFABRICS)\n <ul>\n <li><em>mlx5_0</em>, <em>hfi1_0</em>, <em>qib0</em>, <em>usnic_0</em> (Linux component)</li>\n </ul>\n</li>\n<li>GPUs (::HWLOC_OBJ_OSDEV_GPU)\n <ul>\n <li><em>nvml0</em> for the first NVML device\n  (NVML component, using the NVIDIA Management Library)</li>\n <li><em>:0.0</em> for the first display\n  (GL component, using the NV-CONTROL X extension library, NVCtrl)</li>\n </ul>\n</li>\n<li>Co-Processors (::HWLOC_OBJ_OSDEV_COPROC)\n <ul>\n <li><em>opencl0d0</em> for the first device of the first OpenCL platform,\n  <em>opencl1d3</em> for the fourth device of the second OpenCL platform\n  (OpenCL component)</li>\n <li><em>cuda0</em> for the first NVIDIA CUDA device\n  (CUDA component, using the NVIDIA CUDA Library)</li>\n</li>\n<li>DMA engine channel (::HWLOC_OBJ_OSDEV_DMA)\n <ul>\n <li><em>dma0chan0</em> (Linux component) when all OS devices are enabled (::HWLOC_TYPE_FILTER_KEEP_ALL)</li>\n </ul>\n</li>\n</ul>\n\nNote that some PCI devices may contain multiple software devices\n(see the example below).\n\nSee also \\ref interoperability for managing these devices without\nconsidering them as hwloc objects.\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"iodevices_pci\">\n\\endhtmlonly\n\\section iodevices_pci PCI devices and bridges\n\nA PCI hierarchy is usually organized as follows:\nA hostbridge object ( <tt>::HWLOC_OBJ_BRIDGE</tt> object with upstream\ntype <em>Host</em> and downstream type <em>PCI</em>) is attached below\na normal object (usually the entire machine or a NUMA node).\nThere may be multiple hostbridges in the machine, attached to\ndifferent places, but all PCI devices are below one of them\n(unless the Bridge object type is filtered-out).\n\nEach hostbridge contains one or several children, either other bridges\n(usually PCI to PCI switches) or PCI devices (<tt>::HWLOC_OBJ_PCI_DEVICE</tt>).\nThe number of bridges between the hostbridge and a PCI device depends\non the machine.\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"iodevices_consult\">\n\\endhtmlonly\n\\section iodevices_consult Consulting I/O devices and binding\n\nI/O devices may be consulted by traversing the topology manually\n(with usual routines such as hwloc_get_obj_by_type()) or by using\ndedicated helpers (such as hwloc_get_pcidev_by_busid(), see\n\\ref hwlocality_advanced_io).\n\nI/O objects do not actually contain any locality information because\ntheir CPU sets and node sets are NULL.\nTheir locality must be retrieved by walking up the object tree\n(through the <tt>parent</tt> link) until an non-I/O object is found\n(see hwloc_get_non_io_ancestor_obj()).\nThis normal object should have non-NULL CPU sets and node sets\nwhich describe the processing units and memory that are immediately\nclose to the I/O device.\nFor instance the path from a OS device to its locality may go\nacross a PCI device parent, one or several bridges, up to\na Package node with the same locality.\n\nCommand-line tools are also aware of I/O devices.\nlstopo displays the interesting ones by default\n(passing <tt>\\--no-io</tt> disables it).\n\nhwloc-calc and hwloc-bind may manipulate I/O devices specified\nby PCI bus ID or by OS device name.\n<ul>\n<li>\n <tt>pci=0000:02:03.0</tt> is replaced by the set\n of CPUs that are close to the PCI device whose bus ID is given.\n</li>\n<li>\n <tt>os=eth0</tt> is replaced by CPUs that are close to the I/O\n device whose software handle is called <tt>eth0</tt>.\n</li>\n</ul>\nThis enables easy binding of I/O-intensive applications near the\ndevice they use.\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"iodevices_examples\">\n\\endhtmlonly\n\\section iodevices_examples Examples\n\nThe following picture shows a dual-package dual-core host whose\nPCI bus is connected to the first package and NUMA node.\n\n\\image html devel09-pci.png\n\\image latex devel09-pci.png \"\" width=\\textwidth\n\nSix interesting PCI devices were discovered.\nHowever, hwloc found some corresponding software devices\n(<em>eth0</em>, <em>eth1</em>, <em>sda</em>, <em>mlx4_0</em>,\n<em>ib0</em>, and <em>ib1</em>) for only four of these physical\ndevices.\nThe other ones (<em>PCI 102b:0532</em> and <em>PCI 8086:3a20</em>)\nare an unused IDE controller (no disk attached)\nand a graphic card (no corresponding software device reported\nto the user by the operating system).\n\nOn the contrary, it should be noted that three different software\ndevices were found for the last PCI device (<em>PCI 15b3:634a</em>).\nIndeed this OpenFabrics HCA PCI device object contains one\none OpenFabrics software device (<em>mlx4_0</em>) and two virtual\nnetwork interface software devices (<em>ib0</em> and <em>ib1</em>).\n\n\nHere is the corresponding textual output:\n\n\\verbatim\nMachine (24GB total)\n  Package L#0\n    NUMANode L#0 (P#0 12GB)\n    L3 L#0 (8192KB)\n      L2 L#0 (256KB) + L1 L#0 (32KB) + Core L#0 + PU L#0 (P#0)\n      L2 L#1 (256KB) + L1 L#1 (32KB) + Core L#1 + PU L#1 (P#2)\n    HostBridge\n      PCIBridge\n        PCI 01:00.0 (Ethernet)\n          Net \"eth0\"\n        PCI 01:00.1 (Ethernet)\n          Net \"eth1\"\n      PCIBridge\n        PCI 03:00.0 (RAID)\n          Block \"sda\"\n      PCIBridge\n        PCI 04:03.0 (VGA)\n      PCI 00:1f.2 (IDE)\n      PCI 51:00.0 (InfiniBand)\n        Net \"ib0\"\n        Net \"ib1\"\n        Net \"mlx4_0\"\n  Package L#1\n    NUMANode L#1 (P#1 12GB)\n    L3 L#1 (8192KB)\n      L2 L#2 (256KB) + L1 L#2 (32KB) + Core L#2 + PU L#2 (P#1)\n      L2 L#3 (256KB) + L1 L#3 (32KB) + Core L#3 + PU L#3 (P#3)\n\\endverbatim\n\n\n\n\n\\page miscobjs Miscellaneous objects\n\n\\htmlonly\n<div class=\"section\">\n\\endhtmlonly\n\nhwloc topologies may be annotated with Misc objects\n(of type <tt>::HWLOC_OBJ_MISC</tt>)\neither automatically or by the user.\nThis is an flexible way to annotate topologies with\nlarge sets of information since Misc objects may be inserted\nanywhere in the topology (to annotate specific objects or\nparts of the topology), even below other Misc objects, and each\nof them may contain multiple attributes (see also \\ref faq_annotate).\n\nThese Misc objects may have a <tt>subtype</tt> field\nto replace <tt>Misc</tt> with something else in the lstopo\noutput.\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"miscobjs_auto\">\n\\endhtmlonly\n\\section miscobjs_auto Misc objects added by hwloc\n\nhwloc only uses Misc objects when other object types are not sufficient,\nand when the Misc object type is not filtered-out anymore.\nThis currently includes:\n<ul>\n<li>\nMemory modules (DIMMs), on Linux when privileged and when\n<tt>dmi-sysfs</tt> is supported by the kernel.\nThese objects have a <tt>subtype</tt> field of value <tt>MemoryModule</tt>.\nThey are currently always attached to the root object.\nTheir attributes describe the DIMM vendor, model, etc.\n<tt>lstopo -v</tt> displays them as:\n\\code\nMisc(MemoryModule) (P#1 DeviceLocation=\"Bottom-Slot 2(right)\" BankLocation=\"BANK 2\" Vendor=Elpida SerialNumber=21733667 AssetTag=9876543210 PartNumber=\"EBJ81UG8EFU0-GN-F \")\n\\endcode\n</li>\n<li>\nDisplaying process binding in <tt>lstopo \\--top</tt>.\nThese objects have a <tt>subtype</tt> field of value <tt>Process</tt>\nand a name attribute made of their PID and program name.\nThey are attached below the object they are bound to.\nThe textual <tt>lstopo</tt> displays them as:\n\\code\n  PU L#0 (P#0)\n    Misc(Process) 4445 myprogram\n\\endcode\n</li>\n</ul>\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"miscobjs_annotate\">\n\\endhtmlonly\n\\section miscobjs_annotate Annotating topologies with Misc objects\n\nThe user may annotate hwloc topologies with its own Misc objects.\nThis can be achieved with <tt>hwloc_topology_insert_misc_object()</tt>\nas well as hwloc-annotate command-line tool.\n\n\n\n\n\\page attributes Object attributes\n\n\\htmlonly\n<div class=\"section\" id=\"attributes_normal\">\n\\endhtmlonly\n\\section attributes_normal Normal attributes\n\nhwloc objects have many generic attributes in the ::hwloc_obj structure,\nfor instance their <tt>logical_index</tt> or <tt>os_index</tt>\n(see \\ref faq_indexes), <tt>depth</tt> or <tt>name</tt>.\n\nThe kind of object is first described by the <tt>obj->type</tt>\ngeneric attribute (an integer).\nOS devices also have a specific <tt>obj->attr->osdev.type</tt> integer\nfor distinguishing between NICs, GPUs, etc.\nObjects may also have an optional <tt>obj->subtype</tt> pointing\nto a better description string.\nFor instance subtype is useful to say what Group objects are actually\nmade of (e.g. <em>Book</em> for Linux S/390 books).\nIt may also specify that a Block OS device is a <em>Disk</em>,\nor that a CoProcessor OS device is a <em>CUDA</em> device.\nThis subtype is displayed by lstopo either in place or after the\nmain <tt>obj->type</tt> attribute.\nNUMA nodes that correspond GPU memory may also have <em>GPUMemory</em>\nas subtype.\n\nEach object also contains an <tt>attr</tt> field that, if non NULL,\npoints to a union ::hwloc_obj_attr_u of type-specific attribute\nstructures.\nFor instance, a L2Cache object <tt>obj</tt> contains cache-specific\ninformation in <tt>obj->attr->cache</tt>, such as its size and\nassociativity, cache type.\nSee ::hwloc_obj_attr_u for details.\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"attributes_info\">\n\\endhtmlonly\n\\section attributes_info Custom string infos\n\nAside os these generic attribute fields, hwloc annotates\nmany objects with string attributes that are made of a key and a\nvalue.\nEach object contains a list of such pairs that may be consulted\nmanually (looking at the object <tt>infos</tt> array field)\nor using the hwloc_obj_get_info_by_name().\nThe user may additionally add new key-value pairs to any object using\nhwloc_obj_add_info() or the \\ref cli_hwloc_annotate program.\n\nHere is a non-exhaustive list of attributes that may be automatically\nadded by hwloc.\nNote that these attributes heavily depend on the ability of the\noperating system to report them.\nMany of them will therefore be missing on some OS.\n\n\\htmlonly\n</div><div class=\"subsection\" id=\"attributes_info_platform\">\n\\endhtmlonly\n\\subsection attributes_info_platform Hardware Platform Information\n\nThese info attributes are attached to the root object (Machine).\n\n<dl>\n<dt>PlatformName, PlatformModel, PlatformVendor, PlatformBoardID, PlatformRevision,</dt>\n<dt> SystemVersionRegister, ProcessorVersionRegister (Machine)</dt>\n<dd>Some POWER/PowerPC-specific attributes describing the platform\nand processor.\nCurrently only available on Linux.\nUsually added to Package objects, but can be in Machine instead if\nhwloc failed to discover any package.\n</dd>\n<dt>DMIBoardVendor, DMIBoardName, etc.</dt>\n<dd>DMI hardware information such as the motherboard and chassis\nmodels and vendors, the BIOS revision, etc.,\nas reported by Linux under <tt>/sys/class/dmi/id/</tt>.\n</dd>\n<dt>MemoryMode, ClusterMode</dt>\n<dd>\nIntel Xeon Phi processor configuration modes.\nAvailable if hwloc-dump-hwdata was used (see \\ref faq_knl_dump)\nor if hwloc managed to guess them from the NUMA configuration.\n\nThe memory mode may be <em>Cache</em>, <em>Flat</em>,\n<em>Hybrid50</em> (half the MCDRAM is used as a cache)\nor <em>Hybrid25</em> (25% of MCDRAM as cache).\nThe cluster mode may be <em>Quadrant</em>, <em>Hemisphere</em>, <em>All2All</em>,\n<em>SNC2</em> or <em>SNC4</em>.\nSee doc/examples/get-knl-modes.c in the source directory for an example of retrieving these attributes.\n</dd>\n</dl>\n\n\n\\htmlonly\n</div><div class=\"subsection\" id=\"attributes_info_os\">\n\\endhtmlonly\n\\subsection attributes_info_os Operating System Information\n\nThese info attributes are attached to the root object (Machine).\n\n<dl>\n<dt>OSName, OSRelease, OSVersion, HostName, Architecture</dt>\n<dd>The operating system name, release, version, the hostname and the\narchitecture name, as reported by the Unix <tt>uname</tt> command.\n</dd>\n<dt>LinuxCgroup</dt>\n<dd>The name the Linux control group where the calling process is\nplaced.\n</dd>\n</dl>\n\n\n\\htmlonly\n</div><div class=\"subsection\" id=\"attributes_info_hwloc\">\n\\endhtmlonly\n\\subsection attributes_info_hwloc hwloc Information\n\nUnless specified, these info attributes are attached to the root object (Machine).\n\n<dl>\n<dt>Backend (topology root, or specific object added by that backend)</dt>\n<dd>The name of the hwloc backend/component that filled the topology.\nIf several components were combined, multiple Backend keys may exist,\nwith different values, for instance <tt>x86</tt> and <tt>Linux</tt> in the root\nobject and <tt>CUDA</tt> in CUDA OS device objects.\n</dd>\n<dt>SyntheticDescription</dt>\n<dd>The description string that was given to hwloc to build this\nsynthetic topology.\n</dd>\n<dt>hwlocVersion</dt>\n<dd>The version number of the hwloc library that was used to generate\nthe topology. If the topology was loaded from XML, this is not the hwloc\nversion that loaded it, but rather the first hwloc instance that exported\nthe topology to XML earlier.\n</dd>\n<dt>ProcessName</dt>\n<dd>The name of the process that contains the hwloc library that was used\nto generate the topology. If the topology was from XML, this is not the\nhwloc process that loaded it, but rather the first process that exported\nthe topology to XML earlier.\n</dd>\n</dl>\n\n\n\\htmlonly\n</div><div class=\"subsection\" id=\"attributes_info_cpu\">\n\\endhtmlonly\n\\subsection attributes_info_cpu CPU Information\n\nThese info attributes are attached to Package objects,\nor to the root object (Machine) if package locality information is missing.\n\n<dl>\n<dt>CPUModel</dt>\n<dd>The processor model name.</dd>\n<dt>CPUVendor, CPUModelNumber, CPUFamilyNumber, CPUStepping</dt>\n<dd>The processor vendor name, model number, family number, and stepping number.\nCurrently available for x86 and Xeon Phi processors on most systems,\nand for ia64 processors on Linux (except CPUStepping).\n</dd>\n<dt>CPURevision</dt>\n<dd>\nA POWER/PowerPC-specific general processor revision number,\ncurrently only available on Linux.\n</dd>\n<dt>CPUType</dt>\n<dd>\nA Solaris-specific general processor type name, such as \"i86pc\".\n</dd>\n</dl>\n\n\n\\htmlonly\n</div><div class=\"subsection\" id=\"attributes_info_osdev\">\n\\endhtmlonly\n\\subsection attributes_info_osdev OS Device Information\n\nThese info attributes are attached to OS device objects specified in parentheses.\n\n<dl>\n<dt>Vendor, Model, Revision, SerialNumber, Size, SectorSize (Block OS devices)</dt>\n<dd>The vendor and model names, revision, serial number, size (in kB)\nand SectorSize (in bytes).\n</dd>\n<dt>LinuxDeviceID (Block OS devices)</dt>\n<dd>The major/minor device number such as 8:0 of Linux device.\n</dd>\n<dt>GPUVendor, GPUModel (GPU or Co-Processor OS devices)</dt>\n<dd>The vendor and model names of the GPU device.\n</dd>\n<dt>OpenCLDeviceType, OpenCLPlatformIndex,</dt>\n<dt>OpenCLPlatformName, OpenCLPlatformDeviceIndex (OpenCL OS devices)</dt>\n<dd>The type of OpenCL device,\n the OpenCL platform index and name,\n and the index of the device within the platform.\n</dd>\n<dt>OpenCLComputeUnits, OpenCLGlobalMemorySize (OpenCL OS devices)</dt>\n<dd>The number of compute units and global memory size (in kB) of an OpenCL device.\n</dd>\n<dt>NVIDIAUUID, NVIDIASerial (NVML GPU OS devices)</dt>\n<dd>The UUID and Serial of NVIDIA GPUs.\n</dd>\n<dt>CUDAMultiProcessors, CUDACoresPerMP,</dt>\n<dt>CUDAGlobalMemorySize, CUDAL2CacheSize, CUDASharedMemorySizePerMP (CUDA OS devices)</dt>\n<dd>\n The number of shared multiprocessors, the number of cores per\n multiprocessor, the global memory size, the (global) L2 cache size,\n and size of the shared memory in each multiprocessor of a CUDA device.\n Sizes are in kB.\n</dd>\n<dt>Address, Port (Network interface OS devices)</dt>\n<dd>The MAC address and the port number of a software network\ninterface, such as <tt>eth4</tt> on Linux.\n</dd>\n<dt>NodeGUID, SysImageGUID, Port1State, Port2LID, Port2LMC, Port3GID1\n(OpenFabrics OS devices)</dt>\n<dd>The node GUID and GUID mask,\nthe state of a port #1 (value is 4 when active),\nthe LID and LID mask count of port #2,\nand GID #1 of port #3.\n</dd>\n</dl>\n\n\n\\htmlonly\n</div><div class=\"subsection\" id=\"attributes_info_otherobjs\">\n\\endhtmlonly\n\\subsection attributes_info_otherobjs Other Object-specific Information\n\nThese info attributes are attached to objects specified in parentheses.\n\n<dl>\n<dt>DAXDevice (NUMA Nodes)</dt>\n<dd>The name of the Linux DAX device that was used to expose a non-volatile\nmemory region as a volatile NUMA node.\n</dd>\n<dt>PCIBusID (GPUMemory NUMA Nodes)</dt>\n<dd>The PCI bus ID of the GPU whose memory is exposed in this NUMA node.\n</dd>\n<dt>Inclusive (Caches)</dt>\n<dd>The inclusiveness of a cache (1 if inclusive, 0 otherwise).\nCurrently only available on x86 processors.\n</dd>\n<dt>SolarisProcessorGroup (Group)</dt>\n<dd>\nThe Solaris kstat processor group name that was used to build this Group object.\n</dd>\n<dt>PCIVendor, PCIDevice (PCI devices and bridges)</dt>\n<dd>The vendor and device names of the PCI device.\n</dd>\n<dt>PCISlot (PCI devices or Bridges)</dt>\n<dd>The name/number of the physical slot where the device is plugged.\n If the physical device contains PCI bridges above the actual PCI device,\n the attribute may be attached to the highest bridge\n (i.e. the first object that actually appears below the physical slot).\n</dd>\n<dt>Vendor, AssetTag, PartNumber, DeviceLocation, BankLocation (MemoryModule Misc objects)</dt>\n<dd>\nInformation about memory modules (DIMMs) extracted from SMBIOS.\n</dd>\n</dl>\n\n\n\\htmlonly\n</div><div class=\"subsection\" id=\"attributes_info_user\">\n\\endhtmlonly\n\\subsection attributes_info_user User-Given Information\n\nHere is a non-exhaustive list of user-provided info attributes\nthat have a special meaning:\n<dl>\n<dt>lstopoStyle</dt>\n<dd>Enforces the style of an object (background and text colors)\n in the graphical output of lstopo.\n See CUSTOM COLORS in the lstopo(1) manpage for details.\n</dd>\n</dl>\n\n\n\n\n\\page xml Importing and exporting topologies from/to XML files\n\n\\htmlonly\n<div class=\"section\">\n\\endhtmlonly\n\nhwloc offers the ability to export topologies to XML files and reload\nthem later. This is for instance useful for loading topologies faster\n(see \\ref faq_xml), manipulating other nodes' topology, or avoiding\nthe need for privileged processes (see \\ref faq_privileged).\n\nTopologies may be exported to XML files thanks to hwloc_topology_export_xml(),\nor to a XML memory buffer with hwloc_topology_export_xmlbuffer().\nThe lstopo program can also serve as a XML topology export tool.\n\nXML topologies may then be reloaded later with hwloc_topology_set_xml()\nand hwloc_topology_set_xmlbuffer().\nThe HWLOC_XMLFILE environment variable also tells hwloc to load the topology\nfrom the given XML file (see \\ref envvar).\n\n\\note Loading XML topologies disables binding because the loaded\ntopology may not correspond to the physical machine that loads it.\nThis behavior may be reverted by asserting that loaded file really\nmatches the underlying system with the HWLOC_THISSYSTEM environment\nvariable or the ::HWLOC_TOPOLOGY_FLAG_IS_THISSYSTEM topology flag.\n\n\\note The topology flag ::HWLOC_TOPOLOGY_FLAG_THISSYSTEM_ALLOWED_RESOURCES\nmay be used to load a XML topology that contains the entire machine\nand restrict it to the part that is actually available to the current\nprocess (e.g. when Linux Cgroup/Cpuset are used to restrict the set\nof resources).\n\n\\note hwloc also offers the ability to export/import \\ref hwlocality_diff.\n\n\\note XML topology files are not localized. They use a dot as a\ndecimal separator. Therefore any exported topology can be\nreloaded on any other machine without requiring to change the\nlocale.\n\n\\note XML exports contain all details about the platform. It means\nthat two very similar nodes still have different XML exports\n(e.g. some serial numbers or MAC addresses are different).\nIf a less precise exporting/importing is required, one may want to\nlook at \\ref synthetic instead.\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"xml_backends\">\n\\endhtmlonly\n\\section xml_backends libxml2 and minimalistic XML backends\n\nhwloc offers two backends for importing/exporting XML.\n\nFirst, it can use the libxml2 library for importing/exporting XML\nfiles. It features full XML support, for instance when those files\nhave to be manipulated by non-hwloc software (e.g. a XSLT parser).\nThe libxml2 backend is enabled by default if libxml2 development\nheaders are available (the relevant development package is usually\n<tt>libxml2-devel</tt> or <tt>libxml2-dev</tt>).\n\nIf libxml2 is not available at configure time,\nor if <tt>\\--disable-libxml2</tt> is passed, hwloc falls back to a\ncustom backend.\nContrary to the aforementioned full XML backend with libxml2, this\nminimalistic XML backend cannot be guaranteed to work with external\nprograms.\nIt should only be assumed to be compatible with the same hwloc\nrelease (even if using the libxml2 backend).\nIts advantage is, however, to always be available without requiring\nany external dependency.\n\nIf libxml2 is available but the core hwloc library should not directly\ndepend on it, the libxml2 support may be built as a dynamicall-loaded\nplugin.\nOne should pass <tt>\\--enable-plugins</tt> to enable plugin support\n(when supported) and build as plugins all component that support it.\nOr pass <tt>\\--enable-plugins=xml_libxml</tt> to only build this\nlibxml2 support as a plugin.\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"xml_errors\">\n\\endhtmlonly\n\\section xml_errors XML import error management\n\nImporting XML files can fail at least because of file access errors,\ninvalid XML syntax, non-hwloc-valid XML contents,\nor incompatibilities between hwloc releases (see \\ref faq_version_xml).\n\nBoth backend cannot detect all these errors when the input XML\nfile or buffer is selected (when hwloc_topology_set_xml() or\nhwloc_topology_set_xmlbuffer() is called).\nSome errors such non-hwloc-valid contents can only be detected\nlater when loading the topology with hwloc_topology_load().\n\nIt is therefore strongly recommended to check the return value of\nboth hwloc_topology_set_xml() (or hwloc_topology_set_xmlbuffer())\nand hwloc_topology_load() to handle all these errors.\n\n\n\n\n\\page synthetic Synthetic topologies\n\n\\htmlonly\n<div class=\"section\">\n\\endhtmlonly\n\nhwloc may load fake or remote topologies so as to consult them\nwithout having the underlying hardware available.\nAside from loading XML topologies, hwloc also enables the building of\n<em>synthetic</em> topologies that are described by a single string\nlisting the arity of each levels.\n\nFor instance, lstopo may create a topology made of 2 packages,\ncontaining a single NUMA node and a L2 cache above two\nsingle-threaded cores:\n\n\\verbatim\n$ lstopo -i \"pack:2 node:1 l2:1 core:2 pu:1\" -\nMachine (2048MB)\n  Package L#0\n    NUMANode L#0 (P#0 1024MB)\n    L2 L#0 (4096KB)\n      Core L#0 + PU L#0 (P#0)\n      Core L#1 + PU L#1 (P#1)\n  Package L#1\n    NUMANode L#1 (P#1 1024MB)\n    L2 L#1 (4096KB)\n      Core L#2 + PU L#2 (P#2)\n      Core L#3 + PU L#3 (P#3)\n\\endverbatim\n\nReplacing <tt>-</tt> with <tt>file.xml</tt> in this command line\nwill export this topology to XML as usual.\n\n\\note Synthetic topologies offer a very basic way to export a\ntopology and reimport it on another machine. It is a lot less\nprecise than XML but may still be enough when only the hierarchy\nof resources matters.\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"synthetic_string\">\n\\endhtmlonly\n\\section synthetic_string Synthetic description string\n\nEach item in the description string gives the type of the level and\nthe number of such children under each object of the previous level.\nThat is why the above topology contains 4 cores (2 cores times 2 nodes).\n\nThese type names must be written as\n<tt>numanode</tt>, <tt>package</tt>, <tt>core</tt>,\n<tt>l2u</tt>, <tt>l1i</tt>, <tt>pu</tt>, <tt>group</tt>\n(hwloc_obj_type_sscanf() is used for parsing the type names).\nThey do not need to be written case-sensitively, nor entirely\n(as long as there is no ambiguity, 2 characters such as <tt>ma</tt>\n select a Machine level).\nNote that I/O and Misc objects are not available.\n\nInstead of specifying the type of each level, it is possible to\njust specify the arities and let hwloc choose all types\naccording to usual topologies. The following examples are therefore\nequivalent:\n\\verbatim\n$ lstopo -i \"2 3 4 5 6\"\n$ lstopo -i \"Package:2 NUMANode:3 L2Cache:4 Core:5 PU:6\"\n\\endverbatim\n\nNUMA nodes are handled in a special way since they are not part of the\nmain CPU hierarchy but rather attached below it as memory children.\nThus, <tt>NUMANode:3</tt> actually means <tt>Group:3</tt> where one\nNUMA node is attached below each group.\nThese groups are merged back into the parent when possible\n(typically when a single NUMA node is requested below each parent).\n\nIt is also possible the explicitly attach NUMA nodes to specific levels.\nFor instance, a topology similar to a Intel Xeon Phi processor\n(with 2 NUMA nodes per 16-core group) may be created with:\n\\verbatim\n$ lstopo -i \"package:1 group:4 [numa] [numa] core:16 pu:4\"\n\\endverbatim\n\nThe root object does not appear in the synthetic description string\nsince it is always a Machine object.\nTherefore the Machine type is disallowed in the description as well.\n\nA NUMA level (with a single NUMA node) is automatically added if needed.\n\nEach item may be followed parentheses containing a list of\nspace-separated attributes. For instance:\n<ul>\n<li>\n <tt>L2iCache:2(size=32kB)</tt> specifies 2 children\n of 32kB level-2 instruction caches.\n The size may be specified in bytes (without any unit suffix) or as TB, GB, MB or kB.\n</li>\n<li>\n <tt>NUMANode:3(memory=16MB)</tt> specifies 3 NUMA nodes with 16MB each.\n The size may be specified in bytes (without any unit suffix) or as TB, GB, MB or kB.\n</li>\n<li>\n <tt>PU:2(indexes=0,2,1,3)</tt> specifies 2 PU children and the\n full list of OS indexes among the entire set of 4 PU objects.\n</li>\n<li>\n <tt>PU:2(indexes=numa:core)</tt> specifies 2 PU children whose\n OS indexes are interleaved by NUMA node first and then by package.\n</li>\n<li>\n Attributes in parentheses at the very beginning of the description\n apply to the root object.\n</li>\n</ul>\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"synthetic_use\">\n\\endhtmlonly\n\\section synthetic_use Loading a synthetic topology\n\nAside from lstopo, the hwloc programming interface offers the same\nability by passing the synthetic description string to\nhwloc_topology_set_synthetic() before hwloc_topology_load().\n\nSynthetic topologies are created by the <tt>synthetic</tt> component.\nThis component may be enabled by force by setting the HWLOC_SYNTHETIC\nenvironment variable to something such as\n<tt>node:2 core:3 pu:4</tt>.\n\nLoading a synthetic topology disables binding support since the\ntopology usually does not match the underlying hardware.\nBinding may be reenabled as usual by setting HWLOC_THISSYSTEM=1 in the\nenvironment or by setting the ::HWLOC_TOPOLOGY_FLAG_IS_THISSYSTEM\ntopology flag.\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"synthetic_export\">\n\\endhtmlonly\n\\section synthetic_export Exporting a topology as a synthetic string\n\nThe function hwloc_topology_export_synthetic() may export\na topology as a synthetic string.\nIt offers a convenient way to quickly describe the contents of a machine.\nThe lstopo tool may also perform such an export by forcing the output format.\n\n\\verbatim\n$ lstopo --of synthetic --no-io\nPackage:1 L3Cache:1 L2Cache:2 L1dCache:1 L1iCache:1 Core:1 PU:2\n\\endverbatim\n\nThe exported string may be passed back to hwloc for recreating\nanother similar topology (see also \\ref faq_version_synthetic).\nThe entire tree will be similar, but some attributes such as\nthe processor model will be missing.\n\nSuch an export is only possible if the topology is totally symmetric.\nIt means that the <tt>symmetric_subtree</tt> field of the root object\nis set.\nAlso memory children should be attached in a symmetric way\n(e.g. the same number of memory children below each Package object, etc.).\nHowever, I/O devices and Misc objects are ignored when looking at\nsymmetry and exporting the string.\n\n\n\n\n\\page interoperability Interoperability With Other Software\n\n\\htmlonly\n<div class=\"section\">\n\\endhtmlonly\n\nAlthough hwloc offers its own portable interface, it still may have to\ninteroperate with specific or non-portable libraries that manipulate\nsimilar kinds of objects.  hwloc therefore offers several specific\n\"helpers\" to assist converting between those specific interfaces and\nhwloc.\n\nSome external libraries may be specific to a particular OS; others may\nnot always be available.  The hwloc core therefore generally does not\nexplicitly depend on these types of libraries.  However, when a custom\napplication uses or otherwise depends on such a library, it may\noptionally include the corresponding hwloc helper to extend the hwloc\ninterface with dedicated helpers.\n\nMost of these helpers use structures that are specific to these external\nlibraries and only meaningful on the local machine. If so, the helper\nrequires the input topology to match the current machine.\nSome helpers also require I/O device discovery to be supported and\nenabled for the current topology.\n\n<dl>\n\n<dt>Linux specific features</dt>\n <dd>\n  hwloc/linux.h offers Linux-specific helpers that utilize some\n  non-portable features of the Linux system, such as binding threads\n  through their thread ID (\"tid\") or parsing kernel CPU mask files.\n </dd>\n\n<dt>Linux libnuma</dt>\n <dd>\n  hwloc/linux-libnuma.h provides conversion helpers between hwloc CPU\n  sets and libnuma-specific types, such as  bitmasks.  It\n  helps you use libnuma memory-binding functions with hwloc CPU sets.\n </dd>\n\n<dt>Glibc</dt>\n <dd>\n  hwloc/glibc-sched.h offers conversion routines between Glibc and\n  hwloc CPU sets in order to use hwloc with functions such as\n  sched_getaffinity() or pthread_attr_setaffinity_np().\n </dd>\n\n<dt>OpenFabrics Verbs</dt>\n <dd>\n  hwloc/openfabrics-verbs.h helps interoperability with the\n  OpenFabrics Verbs interface.  For example, it can return a list of\n  processors near an OpenFabrics device.\n  It may also return the corresponding OS device hwloc object for further\n  information (if I/O device discovery is enabled).\n </dd>\n\n<dt>OpenCL</dt>\n <dd>\n  hwloc/opencl.h enables interoperability with the OpenCL interface.\n  Only the AMD and NVIDIA implementations currently offer locality information.\n  It may return the list of processors near a GPU given as\n  a <tt>cl_device_id</tt>.\n  It may also return the corresponding OS device hwloc object for further\n  information (if I/O device discovery is enabled).\n </dd>\n\n<dt>NVIDIA CUDA</dt>\n <dd>\n  hwloc/cuda.h and hwloc/cudart.h enable interoperability with\n  NVIDIA CUDA Driver and Runtime interfaces. For instance, it may\n  return the list of processors near NVIDIA GPUs.\n  It may also return the corresponding OS device hwloc object for further\n  information (if I/O device discovery is enabled).\n </dd>\n\n<dt>NVIDIA Management Library (NVML)</dt>\n <dd>\n  hwloc/nvml.h enables interoperability with the NVIDIA NVML interface.\n  It may return the list of processors near a NVIDIA GPU given as\n  a <tt>nvmlDevice_t</tt>.\n  It may also return the corresponding OS device hwloc object for further\n  information (if I/O device discovery is enabled).\n </dd>\n\n<dt>NVIDIA displays</dt>\n <dd>\n  hwloc/gl.h enables interoperability with NVIDIA displays\n  using the NV-CONTROL X extension (NVCtrl library).\n  If I/O device discovery is enabled, it may return the OS device\n  hwloc object that corresponds to a display\n  given as a name such as <em>:0.0</em>\n  or given as a port/device pair (server/screen).\n </dd>\n\n<dt>Taskset command-line tool</dt>\n <dd>\n  The taskset command-line tool is widely used for binding\n  processes. It manipulates CPU set strings in a format that\n  is slightly different from hwloc's one (it does not divide the\n  string in fixed-size subsets and separates them with commas).\n  To ease interoperability, hwloc offers routines to convert\n  hwloc CPU sets from/to taskset-specific string format.\n  Most hwloc command-line tools also support the <tt>\\--taskset</tt>\n  option to manipulate taskset-specific strings.\n </dd>\n\n</dl>\n\n\n\n\\page threadsafety Thread Safety\n\n\\htmlonly\n<div class=\"section\">\n\\endhtmlonly\n\nLike most libraries that mainly fill data structures, hwloc is not\nthread safe but rather reentrant: all state is held in a\n::hwloc_topology_t instance without mutex protection.  That means, for\nexample, that two threads can safely operate on and modify two\ndifferent ::hwloc_topology_t instances, but they should not\nsimultaneously invoke functions that modify the <em>same</em>\ninstance.  Similarly, one thread should not modify a\n::hwloc_topology_t instance while another thread is reading or\ntraversing it.  However, two threads can safely read or traverse the\nsame ::hwloc_topology_t instance concurrently.\n\nWhen running in multiprocessor environments, be aware that proper thread\nsynchronization and/or memory coherency protection is needed to pass hwloc\ndata (such as ::hwloc_topology_t pointers) from one processor\nto another (e.g., a mutex, semaphore, or a memory barrier).\nNote that this is not a hwloc-specific requirement, but it is worth\nmentioning.\n\nFor reference, ::hwloc_topology_t modification operations include\n(but may not be limited to):\n\n<dl>\n\n<dt>Creation and destruction</dt>\n  <dd><tt>hwloc_topology_init(), hwloc_topology_load(),\n  hwloc_topology_destroy()</tt> (see \\ref hwlocality_creation) imply\n  major modifications of the structure, including freeing some\n  objects.  No other thread cannot access the topology or any of its\n  objects at the same time.\n\n  Also references to objects inside the topology are not valid anymore\n  after these functions return.  </dd>\n\n<dt>Runtime topology modifications</dt>\n  <dd><tt>hwloc_topology_insert_misc_object()</tt>,\n  <tt>hwloc_topology_alloc_group_object()</tt>,\n  and <tt>hwloc_topology_insert_group_object()</tt>\n  (see \\ref hwlocality_tinker) may modify the topology significantly by adding\n  objects inside the tree, changing the topology depth, etc.\n\n  <tt>hwloc_distances_add()</tt> and <tt>hwloc_distances_remove()</tt>\n  (see \\ref hwlocality_distances_add) modify the list of distance structures\n  in the topology, and the former may even insert new Group objects.\n\n  <tt>hwloc_topology_restrict()</tt> modifies the topology even more\n  dramatically by removing some objects.\n\n  Although references to former objects <em>may</em> still be valid\n  after insertion or restriction, it is strongly advised to not rely on any such\n  guarantee and always re-consult the topology to reacquire new\n  instances of objects.  </dd>\n\n<dt>Consulting distances</dt>\n  <dd>\n  <tt>hwloc_distances_get()</tt> and its variants are thread-safe\n  except if the topology was recently modified\n  (because distances may involve objects that were removed).\n\n  Whenever the topology is modified (see above), one dummy (but valid)\n  <tt>hwloc_distances_get()</tt> call should be performed in the same\n  thread-safe context to force the refresh of internal distances structures.\n\n  Once this refresh has been performed, multiple <tt>hwloc_distances_get()</tt>\n  may then be performed concurrently by multiple threads.\n  </dd>\n\n<dt>Locating topologies</dt>\n\n  <dd><tt>hwloc_topology_set_*</tt>\n  (see \\ref hwlocality_configuration) do not modify the topology\n  directly, but they do modify internal structures describing the\n  behavior of the upcoming invocation of <tt>hwloc_topology_load()</tt>.\n  Hence, all of these functions should not be used concurrently.\n  </dd>\n\n</dl>\n\n\n\n\\page plugins Components and plugins\n\n\\htmlonly\n<div class=\"section\">\n\\endhtmlonly\n\nhwloc is organized in components that are responsible for discovering\nobjects.\nDepending on the topology configuration, some components will be used,\nsome will be ignored.\nThe usual default is to enable the native operating system component,\n(e.g. <tt>linux</tt> or <tt>solaris</tt>) and the\n<tt>pci</tt> miscellaneous component.\nIf available, an architecture-specific component (such as <tt>x86</tt>)\nmay also improve the topology detection.\n\nIf a XML topology is loaded, the <tt>xml</tt> discovery  component\nwill be used instead of all other components.\nIt internally uses a specific class of components for the actual XML\nimport/export routines (<tt>xml_libxml</tt> and <tt>xml_nolibxml</tt>)\nbut these will not be discussed here (see \\ref xml_backends).\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"plugins_default\">\n\\endhtmlonly\n\\section plugins_default Components enabled by default\n\nThe hwloc core contains a list of components sorted by priority.\nEach one is enabled as long as it does not conflict with the\npreviously enabled ones.\nThis includes native operating system components,\narchitecture-specific ones, and if available, I/O components\nsuch as <tt>pci</tt>.\n\nUsually the native operating system component\n(when it exists, e.g. <tt>linux</tt> or <tt>aix</tt>)\nis enabled first.\nThen hwloc looks for an architecture specific component\n(e.g. <tt>x86</tt>).\nFinally there also exist a basic component (<tt>no_os</tt>)\nthat just tries to discover the number of PUs in the system.\n\nEach component discovers as much topology information as possible.\nMost of them, including most native OS components, do nothing\nunless the topology is still empty.\nSome others, such as <tt>x86</tt> and <tt>pci</tt>,\ncan complete and annotate what other backends found earlier.\nDiscovery is performed by phases: CPUs are first discovered,\nthen memory is attached, then PCI, etc.\n\nDefault priorities ensure that clever components are invoked first.\nNative operating system components have higher priorities,\nand are therefore invoked first, because they likely offer\nvery detailed topology information.\nIf needed, it will be later extended by architecture-specific\ninformation (e.g. from the <tt>x86</tt> component).\n\nIf any configuration function such as hwloc_topology_set_xml()\nis used before loading the topology, the corresponding component\nis enabled first.\nThen, as usual, hwloc enables any other component (based on\npriorities) that does not conflict.\n\nCertain components that manage a virtual topology, for instance XML\ntopology import or synthetic topology description,\nconflict with all other components.\nTherefore, one of them may only be loaded\n(e.g. with <tt>hwloc_topology_set_xml()</tt>)\nif no other component is enabled.\n\nThe environment variable <tt>HWLOC_COMPONENTS_VERBOSE</tt>\nmay be set to get verbose messages about component registration\n(including their priority) and enabling.\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"plugins_select\">\n\\endhtmlonly\n\\section plugins_select Selecting which components to use\n\nIf no topology configuration functions such as\n<tt>hwloc_topology_set_synthetic()</tt> have been called,\nplugins may be selected with environment variables such as\n<tt>HWLOC_XMLFILE</tt>, <tt>HWLOC_SYNTHETIC</tt>,\n<tt>HWLOC_FSROOT</tt>, or <tt>HWLOC_CPUID_PATH</tt> (see \\ref envvar).\n\nFinally, the environment variable <tt>HWLOC_COMPONENTS</tt>\nresets the list of selected components.\nIf the variable is set and empty (or set to a single comma separating nothing,\nsince some operating systems do not accept empty variables),\nthe normal plugin priority order is used.\n\nIf the variable is set to <tt>x86</tt> in this variable will cause\nthe <tt>x86</tt> component to take precedence over any other component,\nincluding the native operating system component.\nIt is therefore loaded first, before hwloc tries to load all remaining\nnon-conflicting components.\nIn this case, <tt>x86</tt> would take care of discovering everything\nit supports, instead of only completing what the native OS information.\nThis may be useful if the native component is buggy on some platforms.\n\nIt is possible to prevent some components from being loaded by prefixing their\nname with <tt>-</tt> in the list. For instance <tt>x86,-pci</tt> will load the\n<tt>x86</tt> component, then let hwloc load all the usual components except\n<tt>pci</tt>.\nA single component phase may also be blacklisted, for instance with <tt>-linux:io</tt>.\nhwloc_topology_set_components() may also be used inside the program\nto prevent the loading of a specific component (or phases) for the target topology.\n\nIt is possible to prevent all remaining components from being loaded\nby placing <tt>stop</tt> in the environment variable.\nOnly the components listed before this keyword will be enabled.\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"plugins_load\">\n\\endhtmlonly\n\\section plugins_load Loading components from plugins\n\nComponents may optionally be built as plugins so that the hwloc core\nlibrary does not directly depend on their dependencies (for instance\nthe <tt>libpciaccess</tt> library).\nPlugin support may be enabled with the <tt>\\--enable-plugins</tt>\nconfigure option.\nAll components buildable as plugins will then be built as plugins.\nThe configure option may be given a comma-separated list of component\nnames to specify the exact list of components to build as plugins.\n\nPlugins are built as independent dynamic libraries that are installed\nin <tt>$libdir/hwloc</tt>.\nAll plugins found in this directory are loaded during\n<tt>topology_init()</tt>\n(unless blacklisted in <tt>HWLOC_PLUGINS_BLACKLIST</tt>, see \\ref envvar).\nA specific list of directories (colon-separated) to scan may be\nspecified in the <tt>HWLOC_PLUGINS_PATH</tt> environment variable.\n\nNote that loading a plugin just means that the corresponding component\nis registered to the hwloc core.\nComponents are then only enabled if the topology configuration\nrequests it, as explained in the previous sections.\n\nAlso note that plugins should carefully be enabled and used when\nembedding hwloc in another project, see \\ref embed for details.\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"plugins_list\">\n\\endhtmlonly\n\\section plugins_list Existing components and plugins\n\nAll components distributed within hwloc are listed below.\nThe list of actually available components may be listed\nat running with the <tt>HWLOC_COMPONENTS_VERBOSE</tt>\nenvironment variable (see \\ref envvar).\n\n<dl>\n\n<dt>linux</dt>\n<dd>\n The official component for discovering CPU, memory and I/O devices on Linux.\n It discovers PCI devices without the help of external libraries such as libpciaccess,\n but requires the pci component for adding vendor/device names to PCI objects.\n It also discovers many kinds of Linux-specific OS devices.\n</dd>\n<dt>aix, darwin, freebsd, hpux, netbsd, solaris, windows</dt>\n<dd>\n Each officially supported operating system has its own native component,\n which is statically built when supported, and which is used by default.\n</dd>\n<dt>x86</dt>\n<dd>\n The x86 architecture (either 32 or 64 bits) has its own component\n that may complete or replace the previously-found CPU information.\n It is statically built when supported.\n</dd>\n<dt>bgq</dt>\n<dd>\n This component is specific to IBM BlueGene/Q compute node (running CNK).\n It is built and enabled by default when <tt>\\--host=powerpc64-bgq-linux</tt>\n is passed to configure (see \\ref faq_bgq).\n</dd>\n<dt>no_os</dt>\n<dd>\n A basic component that just tries to detect the number of processing\n units in the system. It mostly serves on operating systems that are\n not natively supported.\n It is always statically built.\n</dd>\n<dt>pci</dt>\n<dd>\n PCI object discovery uses the external pciaccess library (aka libpciaccess);\n see \\ref iodevices. It may also annotate existing PCI devices with vendor\n and device names.\n <b>It may be built as a plugin</b>.\n</dd>\n<dt>opencl</dt>\n<dd>\n The OpenCL component creates co-processor OS device objects such as\n <em>opencl0d0</em> (first device of the first OpenCL platform)\n or <em>opencl1d3</em> (fourth device of the second platform).\n Only the AMD OpenCL implementation currently offers locality\n information.\n <b>It may be built as a plugin</b>.\n</dd>\n<dt>cuda</dt>\n<dd>\n This component creates co-processor OS device objects such as <em>cuda0</em>\n that correspond to NVIDIA GPUs used with CUDA library.\n <b>It may be built as a plugin</b>.\n</dd>\n<dt>nvml</dt>\n<dd>\n Probing the NVIDIA Management Library creates OS device objects\n such as <em>nvml0</em> that are useful for batch schedulers.\n It also detects the actual PCIe link bandwidth without depending\n on power management state and without requiring administrator\n privileges.\n <b>It may be built as a plugin</b>.\n</dd>\n<dt>gl</dt>\n<dd>\n Probing the NV-CONTROL X extension (NVCtrl library) creates OS\n device objects such as <em>:0.0</em> corresponding to NVIDIA\n displays.\n They are useful for graphical applications that need to place\n computation and/or data near a rendering GPU.\n <b>It may be built as a plugin</b>.\n</dd>\n<dt>synthetic</dt>\n<dd>\n Synthetic topology support (see \\ref synthetic) is always built statically.\n</dd>\n<dt>xml</dt>\n<dd>\n XML topology import (see \\ref xml) is always built statically.\n It internally uses one of the XML backends (see \\ref xml_backends).\n <ul>\n <li><b>xml_nolibxml</b> is a basic and hwloc-specific XML import/export.\n  It is always statically built.\n </li>\n <li><b>xml_libxml</b> relies on the external libxml2 library for\n  provinding a feature-complete XML import/export.\n  <b>It may be built as a plugin</b>.\n </li>\n</dd>\n<dt>fake</dt>\n<dd>\n A dummy plugin that does nothing but is used for debugging plugin support.\n</dd>\n</dl>\n\n\n\n\n\\page embed Embedding hwloc in Other Software\n\n\\htmlonly\n<div class=\"section\">\n\\endhtmlonly\n\nIt can be desirable to include hwloc in a larger software package (be\nsure to check out the LICENSE file) so that users don't have to\nseparately download and install it before installing your software.\nThis can be advantageous to ensure that your software uses a\nknown-tested/good version of hwloc, or for use on systems that do not\nhave hwloc pre-installed.\n\nWhen used in \"embedded\" mode, hwloc will:\n\n- not install any header files\n- not build any documentation files\n- not build or install any executables or tests\n- not build <tt>libhwloc.*</tt> -- instead, it will build\n  <tt>libhwloc_embedded.*</tt>\n\nThere are two ways to put hwloc into \"embedded\" mode.  The first is\ndirectly from the configure command line:\n\n\\verbatim\nshell$ ./configure --enable-embedded-mode ...\n\\endverbatim\n\nThe second requires that your software project uses the GNU Autoconf /\nAutomake / Libtool tool chain to build your software.  If you do this,\nyou can directly integrate hwloc's m4 configure macro into your\nconfigure script.  You can then invoke hwloc's configuration tests and\nbuild setup by calling an m4 macro (see below).\n\nAlthough hwloc dynamic shared object plugins may be used in embedded\nmode, the embedder project will have to manually setup dlopen or libltdl in its\nbuild system so that hwloc can load its plugins at run time.\nAlso, embedders should be aware of complications that can arise due to\npublic and private linker namespaces (e.g., if the embedder project is\nloaded into a private namespace and then hwloc tries to dynamically\nload its plugins, such loading may fail since the hwloc plugins can't\nfind the hwloc symbols they need).\nThe embedder project is <b>strongly</b> advised not to use hwloc's\ndynamically loading plugins / dlopen / libltdl capability.\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"embedding_m4\">\n\\endhtmlonly\n\\section embedding_m4 Using hwloc's M4 Embedding Capabilities\n\nEvery project is different, and there are many different ways of\nintegrating hwloc into yours.  What follows is <em>one</em> example of\nhow to do it.\n\nIf your project uses recent versions Autoconf, Automake, and Libtool\nto build, you can use hwloc's embedded m4 capabilities.  We have\ntested the embedded m4 with projects that use Autoconf 2.65, Automake\n1.11.1, and Libtool 2.2.6b.  Slightly earlier versions of may also\nwork but are untested.  Autoconf versions prior to 2.65 are almost\ncertain to not work.\n\nYou can either copy all the config/hwloc*m4 files from the hwloc\nsource tree to the directory where your project's m4 files reside, or\nyou can tell aclocal to find more m4 files in the embedded hwloc's\n\"config\" subdirectory (e.g., add \"-Ipath/to/embedded/hwloc/config\" to\nyour Makefile.am's ACLOCAL_AMFLAGS).\n\nThe following macros can then be used from your configure script (only\nHWLOC_SETUP_CORE <em>must</em> be invoked if using the m4 macros):\n\n- HWLOC_SETUP_CORE(config-dir-prefix, action-upon-success,\n  action-upon-failure, print_banner_or_not): Invoke the hwloc\n  configuration tests and setup the hwloc tree to build.  The first\n  argument is the prefix to use for AC_OUTPUT files -- it's where the\n  hwloc tree is located relative to <tt>$top_srcdir</tt>.  Hence, if\n  your embedded hwloc is located in the source tree at contrib/hwloc,\n  you should pass <tt>[contrib/hwloc]</tt> as the first argument.  If\n  HWLOC_SETUP_CORE and the rest of <tt>configure</tt> completes\n  successfully, then \"make\" traversals of the hwloc tree with standard\n  Automake targets (all, clean, install, etc.) should behave as\n  expected.  For example, it is safe to list the hwloc directory in\n  the SUBDIRS of a higher-level Makefile.am.  The last argument, if\n  not empty, will cause the macro to display an announcement banner\n  that it is starting the hwloc core configuration tests.\n\n  HWLOC_SETUP_CORE will set the following environment variables and\n  AC_SUBST them: HWLOC_EMBEDDED_CFLAGS, HWLOC_EMBEDDED_CPPFLAGS, and\n  HWLOC_EMBEDDED_LIBS.  These flags are filled with the values\n  discovered in the hwloc-specific m4 tests, and can be used in your\n  build process as relevant.  The _CFLAGS, _CPPFLAGS, and _LIBS\n  variables are necessary to build libhwloc (or libhwloc_embedded)\n  itself.  \n\n  HWLOC_SETUP_CORE also sets HWLOC_EMBEDDED_LDADD environment variable\n  (and AC_SUBSTs it) to contain the location of the\n  libhwloc_embedded.la convenience Libtool archive.  It can be used in\n  your build process to link an application or other library against\n  the embedded hwloc library.\n\n  <strong>NOTE: If the HWLOC_SET_SYMBOL_PREFIX macro is used, it must\n  be invoked <em>before</em> HWLOC_SETUP_CORE.</strong>\n\n- HWLOC_BUILD_STANDALONE: HWLOC_SETUP_CORE defaults to building hwloc\n  in an \"embedded\" mode (described above).  If HWLOC_BUILD_STANDALONE\n  is invoked *before* HWLOC_SETUP_CORE, the embedded definitions will\n  not apply (e.g., libhwloc.la will be built, not\n  libhwloc_embedded.la).\n\n- HWLOC_SET_SYMBOL_PREFIX(foo_): Tells the hwloc to prefix all of\n  hwloc's types and public symbols with \"foo_\"; meaning that function\n  hwloc_init() becomes foo_hwloc_init().  Enum values are prefixed\n  with an upper-case translation if the prefix supplied;\n  HWLOC_OBJ_CORE becomes FOO_hwloc_OBJ_CORE.  This is recommended\n  behavior if you are including hwloc in middleware -- it is possible\n  that your software will be combined with other software that links\n  to another copy of hwloc.  If both uses of hwloc utilize different\n  symbol prefixes, there will be no type/symbol clashes, and\n  everything will compile, link, and run successfully.  If you both\n  embed hwloc without changing the symbol prefix and also link against\n  an external hwloc, you may get multiple symbol definitions when\n  linking your final library or application.\n\n- HWLOC_SETUP_DOCS, HWLOC_SETUP_UTILS, HWLOC_SETUP_TESTS: These three\n  macros only apply when hwloc is built in \"standalone\" mode (i.e.,\n  they should NOT be invoked unless HWLOC_BUILD_STANDALONE has already\n  been invoked).\n\n- HWLOC_DO_AM_CONDITIONALS: If you embed hwloc in a larger project and\n  build it conditionally with Automake (e.g., if HWLOC_SETUP_CORE is\n  invoked conditionally), you must unconditionally invoke\n  HWLOC_DO_AM_CONDITIONALS to avoid warnings from Automake (for the\n  cases where hwloc is not selected to be built).  This macro is\n  necessary because hwloc uses some AM_CONDITIONALs to build itself,\n  and AM_CONDITIONALs cannot be defined conditionally.  Note that it\n  is safe (but unnecessary) to call HWLOC_DO_AM_CONDITIONALS even if\n  HWLOC_SETUP_CORE is invoked unconditionally.  If you are not using\n  Automake to build hwloc, this macro is unnecessary (and will actually\n  cause errors because it invoked AM_* macros that will be undefined).\n\n<strong>NOTE:</strong> When using the HWLOC_SETUP_CORE m4 macro, it may\nbe necessary to explicitly invoke AC_CANONICAL_TARGET (which requires\nconfig.sub and config.guess) and/or AC_USE_SYSTEM_EXTENSIONS macros\nearly in the configure script (e.g., after AC_INIT but before\nAM_INIT_AUTOMAKE).  See the Autoconf documentation for further\ninformation.\n\nAlso note that hwloc's top-level configure.ac script uses exactly the\nmacros described above to build hwloc in a standalone mode (by\ndefault).  You may want to examine it for one example of how these\nmacros are used.\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"embedding_example\">\n\\endhtmlonly\n\\section embedding_example Example Embedding hwloc\n\nHere's an example of integrating with a larger project named sandbox\nthat already uses Autoconf, Automake, and Libtool to build itself:\n\n\\verbatim\n# First, cd into the sandbox project source tree\nshell$ cd sandbox\nshell$ cp -r /somewhere/else/hwloc-<version> my-embedded-hwloc\nshell$ edit Makefile.am\n  1. Add \"-Imy-embedded-hwloc/config\" to ACLOCAL_AMFLAGS\n  2. Add \"my-embedded-hwloc\" to SUBDIRS\n  3. Add \"$(HWLOC_EMBEDDED_LDADD)\" and \"$(HWLOC_EMBEDDED_LIBS)\" to \n     sandbox's executable's LDADD line.  The former is the name of the \n     Libtool convenience library that hwloc will generate.  The latter \n     is any dependent support libraries that may be needed by \n     $(HWLOC_EMBEDDED_LDADD).\n  4. Add \"$(HWLOC_EMBEDDED_CFLAGS)\" to AM_CFLAGS\n  5. Add \"$(HWLOC_EMBEDDED_CPPFLAGS)\" to AM_CPPFLAGS\nshell$ edit configure.ac\n  1. Add \"HWLOC_SET_SYMBOL_PREFIX(sandbox_hwloc_)\" line\n  2. Add \"HWLOC_SETUP_CORE([my-embedded-hwloc], [happy=yes], [happy=no])\" line\n  3. Add error checking for happy=no case\nshell$ edit sandbox.c\n  1. Add #include <hwloc.h>\n  2. Add calls to sandbox_hwloc_init() and other hwloc API functions\n\\endverbatim\n\nNow you can bootstrap, configure, build, and run the sandbox as normal\n-- all calls to \"sandbox_hwloc_*\" will use the embedded hwloc rather\nthan any system-provided copy of hwloc.\n\n\n\n\n\n\n\\page faq Frequently Asked Questions\n\n\n\\htmlonly\n<div class=\"section\" id=\"faq1\">\n\\endhtmlonly\n\\section faq1 Concepts\n\n\n\\subsection faq_why I only need binding, why should I use hwloc ?\n\nhwloc is its portable API that works on a variety of operating\nsystems.\nIt supports binding of threads, processes and memory buffers\n(see \\ref hwlocality_cpubinding and \\ref hwlocality_membinding).\nEven if some features are not supported on some systems,\nusing hwloc is much easier than reimplementing your own portability layer.\n\nMoreover, hwloc provides knowledge of cores and hardware threads.\nIt offers easy ways to bind tasks to individual hardware threads,\nor to entire multithreaded cores, etc.\nSee \\ref faq_smt.\nMost alternative software for binding do not even know whether each\ncore is single-threaded, multithreaded or hyper-threaded.\nThey would bind to individual threads without any way to know whether\nmultiple tasks are in the same physical core.\n\nHowever, using hwloc comes with an overhead since a topology must\nbe loaded before gathering information and binding tasks or memory.\nFortunately this overhead may be significantly reduced by filtering\nnon-interesting information out of the topology.\nFor instance the following code builds a topology that only contains\nCores (explicitly filtered-in below),\nhardware threads (PUs, cannot be filtered-out),\nNUMA nodes (cannot be filtered-out),\nand the root object (usually a Machine; the root cannot be removed without breaking the tree).\n\n\\verbatim\nhwloc_topology_t topology;\nhwloc_topology_init(&topology);\n/* filter everything out */\nhwloc_topology_set_all_types_filter(topology, HWLOC_TYPE_FILTER_KEEP_NONE);\n/* filter Cores back in */\nhwloc_topology_set_type_filter(topology, HWLOC_OBJ_CORE, HWLOC_TYPE_FILTER_KEEP_ALL);\nhwloc_topology_load(topology);\n\\endverbatim\n\nHowever, one should remember that filtering such objects out removes\nlocality information from the hwloc tree.\nFor instance, we do not know anymore which PU is close to which NUMA\nnode.\nThis would be useful to applications that explicitly want to\nplace specific memory buffers close to specific tasks.\nThose applications just need to tell hwloc to keep Group objects that\nbring structure information:\n\\verbatim\nhwloc_topology_set_type_filter(topology, HWLOC_OBJ_GROUP, HWLOC_TYPE_FILTER_KEEP_STRUCTURE);\n\\endverbatim\n\nNote that the default configuration is to keep all objects enabled,\nexcept I/Os and instruction caches.\n\n\n\\subsection faq_indexes Should I use logical or physical/OS indexes? and how?\n\nOne of the original reasons why hwloc was created is that <b>physical/OS indexes</b>\n(<tt>obj->os_index</tt>) are often crazy and unpredictable:\nlogical processors numbers are usually\nnon-contiguous (processors 0 and 1 are not physically close), they vary from\none machine to another, and may even change after a BIOS or system update.\nThis numbers make task placement hardly portable.\nMoreover some objects have no physical/OS numbers (caches), and some objects\nhave non-unique numbers (core numbers are only unique within a socket).\nPhysical/OS indexes are only guaranteed to exist and be unique for PU\nand NUMA nodes.\n\nhwloc therefore introduces <b>logical indexes</b> (<tt>obj->logical_index</tt>)\nwhich are portable, contiguous and logically ordered\n(based on the resource organization in the locality tree).\nIn general, one should only use logical indexes and just let hwloc do the\ninternal conversion when really needed (when talking to the OS and hardware).\n\nhwloc developers recommends that users do not use physical/OS indexes\nunless they really know what they are doing.\nThe main reason for still using physical/OS indexes is when interacting with\nnon-hwloc tools such as numactl or taskset, or when reading hardware information\nfrom raw sources such as /proc/cpuinfo.\n\nlstopo options <tt>-l</tt> and <tt>-p</tt> may be used to switch between\nlogical indexes (prefixed with <tt>L#</tt>) and physical/OS indexes (<tt>P#</tt>).\nConverting one into the other may also be achieved with hwloc-calc which may\nmanipulate either logical or physical indexes as input or output.\nSee also \\ref cli_hwloc_calc.\n\n\\verbatim\n# Convert PU with physical number 3 into logical number\n$ hwloc-calc -I pu --physical-input --logical-output pu:3\n5\n\n# Convert a set of NUMA nodes from logical to physical\n# (beware that the output order may not match the input order)\n$ hwloc-calc -I numa --logical-input --physical-output numa:2-3 numa:7\n0,2,5\n\\endverbatim\n\n\n\\subsection faq_structural hwloc is only a structural model, it ignores performance models, memory bandwidth, etc.?\n\nhwloc is indeed designed to provide applications with a structural model\nof the platform. This is an orthogonal approach to describing the\nmachine with performance models, for instance using memory bandwidth\nor latencies measured by benchmarks.\nWe believe that both approaches are important for helping application\nmake the most of the hardware.\n\nFor instance, on a dual-processor host with four cores each, hwloc\nclearly shows which four cores are together.\nLatencies between all pairs of cores of the same processor are likely\nidentical, and also likely lower than the latency between cores of\ndifferent processors.\nHowever, the structural model cannot guarantee such implementation\ndetails.\nOn the other side, performance models would reveal such details\nwithout always clearly identifying which cores are in the same\nprocessor.\n\nThe focus of hwloc is mainly of the structural modeling side.\nHowever, hwloc lets user adds performance information to the topology\nthrough distances\n(see \\ref hwlocality_distances_get and \\ref hwlocality_distances_add)\nor even custom annotations (see \\ref faq_annotate).\nhwloc may also use such distance information for grouping objects\ntogether (see \\ref faq_onedim and \\ref faq_groups).\n\n\n\\subsection faq_onedim hwloc only has a one-dimensional view of the architecture, it ignores distances?\n\nhwloc places all objects in a tree. Each level is a one-dimensional\nview of a set of similar objects. All children of the same object (siblings)\nare assumed to be equally interconnected (same distance between any of them),\nwhile the distance between children of different objects (cousins) is supposed\nto be larger.\n\nModern machines exhibit complex hardware interconnects, so this tree\nmay miss some information about the actual physical distances between objects.\nThe hwloc topology may therefore be annotated with distance information that\nmay be used to build a more realistic representation (multi-dimensional)\nof each level.\nFor instance, there can be a distance matrix that representing the latencies\nbetween any pair of NUMA nodes if the BIOS and/or operating system reports them.\n\nFor more information about the distance API, see \\ref\nhwlocality_distances_get and \\ref hwlocality_distances_add.\n\n\n\\subsection faq_groups What are these Group objects in my topology?\n\nhwloc comes with a set of predefined object types (Core, Package, NUMA node, Caches)\nthat match the vast majority of hardware platforms.\nThe ::HWLOC_OBJ_GROUP type was designed for cases where this set is not sufficient.\nGroups may be used anywhere to add more structure information to the topology,\nfor instance to show that 2 out of 4 NUMA nodes are actually closer than the others.\nWhen applicable, the <tt>subtype</tt> field describes why a Group\nwas actually added (see also \\ref attributes_normal).\n\nhwloc currently uses Groups for the following reasons:\n<ul>\n<li>NUMA parents when memory locality does not match any existing object.</li>\n<li>I/O parents when I/O locality does not match any existing object.</li>\n<li>Distance-based groups made of close objects.</li>\n<li>AMD Bulldozer dual-core compute units (<tt>subtype</tt> is <tt>ComputeUnit</tt>, in the x86 backend),\n but these objects are usually merged with the L2 caches.</li>\n<li>Intel Extended Topology Enumeration levels (in the x86 backend).</li>\n<li>Windows processor groups (unless they contain a single NUMA node, or a single Package, etc.).</li>\n<li>IBM S/390 \"Books\" on Linux (<tt>subtype</tt> is <tt>Book</tt>).</li>\n<li>AIX unknown hierarchy levels.</li>\n</ul>\n\nhwloc Groups are only kept if no other object has the same\nlocality information.\nIt means that a Group containing a single child is merged\ninto that child.\nAnd a Group is merged into its parent if it is its only child.\nFor instance a Windows processor group containing a single NUMA node\nwould be merged with that NUMA node since it already contains the\nrelevant hierarchy information.\n\nWhen inserting a custom Group with hwloc_hwloc_topology_insert_group_object(),\nthis merging may be disabled by setting its <tt>dont_merge</tt> attribute.\n\n\n\\subsection faq_asymmetric What happens if my topology is asymmetric?\n\nhwloc supports asymmetric topologies even if most platforms are usually\nsymmetric. For example, there could be different types of processors\nin a single machine, each with different numbers of cores, symmetric\nmultithreading, or levels of caches.\n\nIn practice, asymmetric topologies mostly appear when intermediate groups\nare added for I/O affinity: on a 4-package machine, an I/O bus may be\nconnected to 2 packages. These packages are below an additional Group\nobject, while the other packages are not (see also \\ref faq_groups).\n\nTo understand how hwloc manages such cases, one should first remember\nthe meaning of levels and cousin objects. All objects of the same type\nare gathered as horizontal levels with a given depth. They are also\nconnected through the cousin pointers of the ::hwloc_obj structure.\nObject attribute (cache depth and type, group depth) are also taken\nin account when gathering objects as horizontal levels.\nTo be clear: there will be one level for L1i\ncaches, another level for L1d caches, another one for L2, etc.\n\nIf the topology is asymmetric (e.g., if a group is missing above some\nprocessors), a given horizontal level will still exist if there\nexist any objects of that type.  However, some branches of the overall\ntree may not have an object located in that horizontal level.  Note\nthat this specific hole within one horizontal level does not imply\nanything for other levels.  All objects of the same type are gathered\nin horizontal levels even if their parents or children have different\ndepths and types.\n\nSee the diagram in \\ref termsanddefs for a graphical representation\nof such topologies.\n\nMoreover, it is important to understand that a same parent object may\nhave children of different types (and therefore, different\ndepths). <strong>These children are therefore siblings (because they\nhave the same parent), but they are <em>not</em> cousins (because they\ndo not belong to the same horizontal level).</strong>\n\n\n\\subsection faq_nosmt What happens to my topology if I disable symmetric multithreading, hyper-threading, etc. in the system?\n\nhwloc creates one PU (processing unit) object per hardware thread.\nIf your machine supports symmetric multithreading, for instance Hyper-Threading,\neach Core object may contain multiple PU objects:\n\\verbatim\n$ lstopo -\n...\n  Core L#0\n    PU L#0 (P#0)\n    PU L#1 (P#2)\n  Core L#1\n    PU L#2 (P#1)\n    PU L#3 (P#3)\n\\endverbatim\n\nx86 machines usually offer the ability to disable hyper-threading in the BIOS.\nOr it can be disabled on the Linux kernel command-line at boot time,\nor later by writing in sysfs virtual files.\n\nIf you do so, the hwloc topology structure does not significantly change,\nbut some PU objects will not appear anymore.\nNo level will disappear, you will see the same number of Core objects,\nbut each of them will contain a single PU now.\nThe PU level does not disappear either\n(remember that hwloc topologies always contain a PU level at the bottom of the topology)\neven if there is a single PU object per Core parent.\n\\verbatim\n$ lstopo -\n...\n  Core L#0\n    PU L#0 (P#0)\n  Core L#1\n    PU L#1 (P#1)\n\\endverbatim\n\n\n\\subsection faq_smt How may I ignore symmetric multithreading, hyper-threading, etc. in hwloc?\n\nFirst, see \\ref faq_nosmt for more information about multithreading.\n\nIf you need to ignore symmetric multithreading in software,\nyou should likely manipulate hwloc Core objects directly:\n\\verbatim\n/* get the number of cores */\nunsigned nbcores = hwloc_get_nbobjs_by_type(topology, HWLOC_OBJ_CORE);\n...\n/* get the third core below the first package */\nhwloc_obj_t package, core;\npackage = hwloc_get_obj_by_type(topology, HWLOC_OBJ_PACKAGE, 0);\ncore = hwloc_get_obj_inside_cpuset_by_type(topology, package->cpuset,\n                                           HWLOC_OBJ_CORE, 2);\n\\endverbatim\n\nWhenever you want to bind a process or thread to a core, make sure you\nsinglify its cpuset first, so that the task is actually bound to a single\nthread within this core (to avoid useless migrations).\n\\verbatim\n/* bind on the second core */\nhwloc_obj_t core = hwloc_get_obj_by_type(topology, HWLOC_OBJ_CORE, 1);\nhwloc_cpuset_t set = hwloc_bitmap_dup(core->cpuset);\nhwloc_bitmap_singlify(set);\nhwloc_set_cpubind(topology, set, 0);\nhwloc_bitmap_free(set);\n\\endverbatim\n\nWith hwloc-calc or hwloc-bind command-line tools, you may specify that\nyou only want a single-thread within each core by asking for their first\nPU object:\n\\verbatim\n$ hwloc-calc core:4-7\n0x0000ff00\n$ hwloc-calc core:4-7.pu:0\n0x00005500\n\\endverbatim\n\nWhen binding a process on the command-line, you may either specify\nthe exact thread that you want to use, or ask hwloc-bind to singlify\nthe cpuset before binding\n\\verbatim\n$ hwloc-bind core:3.pu:0 -- echo \"hello from first thread on core #3\"\nhello from first thread on core #3\n...\n$ hwloc-bind core:3 --single -- echo \"hello from a single thread on core #3\"\nhello from a single thread on core #3\n\\endverbatim\n\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"faq2\">\n\\endhtmlonly\n\\section faq2 Advanced\n\n\n\n\\subsection faq_xml I do not want hwloc to rediscover my enormous machine topology every time I rerun a process\n\nAlthough the topology discovery is not expensive on common machines,\nits overhead may become significant when multiple processes repeat\nthe discovery on large machines (for instance when starting one process\nper core in a parallel application).\nThe machine topology usually does not vary much, except if some cores\nare stopped/restarted or if the administrator restrictions are modified.\nThus rediscovering the whole topology again and again may look useless.\n\nFor this purpose, hwloc offers XML import/export and shared memory features.\n\nXML lets you\nsave the discovered topology to a file (for instance with the lstopo program)\nand reload it later by setting the HWLOC_XMLFILE environment variable.\nThe HWLOC_THISSYSTEM environment variable should also be set to 1 to\nassert that loaded file is really the underlying system.\n\nLoading a XML topology is usually much faster than querying multiple\nfiles or calling multiple functions of the operating system.\nIt is also possible to manipulate such XML files with the C programming\ninterface, and the import/export may also be directed to memory buffer\n(that may for instance be transmitted between applications through a package).\nSee also \\ref xml.\n\n\\note The environment variable HWLOC_THISSYSTEM_ALLOWED_RESOURCES\nmay be used to load a XML topology that contains the entire machine\nand restrict it to the part that is actually available to the current\nprocess (e.g. when Linux Cgroup/Cpuset are used to restrict the set\nof resources). See \\ref envvar.\n\nShared-memory topologies consist in one process exposing its topology\nin a shared-memory buffer so that other processes (running on the same machine)\nmay use it directly.\nThis has the advantage of reducing the memory footprint since a single\ntopology is stored in physical memory for multiple processes.\nHowever, it requires all processes to map this shared-memory buffer\nat the same virtual address, which may be difficult in some cases.\nThis API is described in \\ref hwlocality_shmem.\n\n\n\\subsection faq_multitopo How many topologies may I use in my program?\n\nhwloc lets you manipulate multiple topologies at the same time.\nHowever, these topologies consume memory and system resources\n(for instance file descriptors) until they are destroyed.\nIt is therefore discouraged to open the same topology multiple\ntimes.\n\nSharing a single topology between threads is easy (see \\ref threadsafety)\nsince the vast majority of accesses are read-only.\n\nIf multiple topologies of different (but similar) nodes are needed\nin your program, have a look at \\ref faq_diff.\n\n\n\\subsection faq_diff How to avoid memory waste when manipulating multiple similar topologies?\n\nhwloc does not share information between topologies.\nIf multiple similar topologies are loaded in memory, for instance\nthe topologies of different identical nodes of a cluster,\nlots of information will be duplicated.\n\nhwloc/diff.h (see also \\ref hwlocality_diff) offers the ability to\ncompute topology differences, apply or unapply them, or export/import\nto/from XML.\nHowever, this feature is limited to basic differences such as attribute changes.\nIt does not support complex modifications such as adding or removing some objects.\n\n\n\\subsection faq_annotate How do I annotate the topology with private notes?\n\nEach hwloc object contains a <tt>userdata</tt> field that may be used by\napplications to store private pointers. This field is only valid\nduring the lifetime of these container object and topology.\nIt becomes invalid as soon the topology is destroyed,\nor as soon as the object disappears, for instance when restricting\nthe topology.\nThe userdata field is not exported/imported to/from XML by default since\nhwloc does not know what it contains.\nThis behavior may be changed by specifying application-specific callbacks\nwith <tt>hwloc_topology_set_userdata_export_callback()</tt>\nand <tt>hwloc_topology_set_userdata_import_callback()</tt>.\n\nEach object may also contain some <em>info</em> attributes\n(key name and value) that are setup by hwloc during discovery\nand that may be extended by the user with\n<tt>hwloc_obj_add_info()</tt> (see also \\ref attributes).\nContrary to the <tt>userdata</tt> field which is unique, multiple info\nattributes may exist for each object, even with the same name.\nThese attributes are always exported to XML.\nHowever, only character strings may be used as key names and values.\n\nIt is also possible to insert Misc objects with a custom name\nanywhere as a leaf of the topology (see \\ref miscobjs).\nAnd Misc objects may have their own userdata and info attributes\njust like any other object.\n\nThe hwloc-annotate command-line tool may be used for adding\nMisc objects and info attributes.\n\nThere is also a topology-specific userdata pointer that can be used\nto recognize different topologies by storing a custom pointer.\nIt may be manipulated with <tt>hwloc_topology_set_userdata()</tt>\nand <tt>hwloc_topology_get_userdata()</tt>.\n\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"faq3\">\n\\endhtmlonly\n\\section faq3 Caveats\n\n\n\n\\subsection faq_slow_lstopo Why is hwloc slow?\n\nBuilding a hwloc topology on a large machine may be slow because\nthe discovery of hundreds of hardware cores or threads takes time\n(especially when reading thousands of sysfs files on Linux).\nIgnoring some objects (for instance caches) that aren't useful\nto the current application may improve this overhead (see \\ref faq_why).\nOne should also consider using XML (see \\ref faq_xml) to work\naround such issues.\n\nAdditionally, lstopo enables most hwloc objects and discovery flags\nby default so that the output topology is as precise as possible\n(while hwloc disables many of them by default).\nThis includes I/O device discovery through PCI libraries as well as external\nlibraries such as NVML.\nTo speed up lstopo, you may disable such features with command-line\noptions such as <tt>\\--no-io</tt>.\n\nWhen NVIDIA GPU probing is enabled with CUDA or NVML, one should make sure that\nthe <em>Persistent</em> mode is enabled (with <tt>nvidia-smi -pm 1</tt>)\nto avoid significant GPU initialization overhead.\n\nWhen AMD GPU discovery is enabled with OpenCL and hwloc is used remotely\nover ssh, some spurious round-trips on the network may significantly\nincrease the discovery time.\nForcing the <tt>DISPLAY</tt> environment variable to the remote X server\ndisplay (usually <tt>:0</tt>) instead of only setting the <tt>COMPUTE</tt>\nvariable may avoid this.\n\nAlso remember that these components may be disabled at build-time with\nconfigure flags such as <tt>\\--disable-opencl</tt>, <tt>\\--disable-cuda</tt> or <tt>\\--disable-nvml</tt>,\nand at runtime with the environment variable\n<tt>HWLOC_COMPONENTS=-opencl,-cuda,-nvml</tt>\nor with hwloc_topology_set_components().\n\n\n\\subsection faq_privileged Does hwloc require privileged access?\n\nhwloc discovers the topology by querying the operating system.\nSome minor features may require privileged access to the operation\nsystem.\nFor instance memory module discovery on Linux is reserved to root,\nand the entire PCI discovery on Solaris and BSDs requires access to\nsome special files that are usually restricted to root\n(/dev/pci* or /devices/pci*).\n\nTo workaround this limitation, it is recommended to export the\ntopology as a XML file generated by the administrator (with the\nlstopo program) and make it available to all users\n(see \\ref xml).\nIt will offer all discovery information to any application without\nrequiring any privileged access anymore.\nOnly the necessary hardware characteristics will be exported, no\nsensitive information will be disclosed through this XML export.\n\nThis XML-based model also has the advantage of speeding up the\ndiscovery because reading a XML topology is usually much faster\nthan querying the operating system again.\n\nThe utility <tt>hwloc-dump-hwdata</tt> is also involved in gathering\nprivileged information at boot time and making it available to\nnon-privileged users (note that this may require a specific SELinux\nMLS policy module). However, it only applies to Intel Xeon Phi processors\nfor now (see \\ref faq_knl_dump).\nSee also <tt>HWLOC_DUMPED_HWDATA_DIR</tt> in \\ref envvar for details\nabout the location of dumped files.\n\n\n\\subsection faq_os_error What should I do when hwloc reports \"operating system\" warnings?\n\nWhen the operating system reports invalid locality information (because\nof either software or hardware bugs), hwloc may fail to insert some objects\nin the topology because they cannot fit in the already built tree of resources.\nIf so, hwloc will report a warning like the following.\nThe object causing this error is ignored, the discovery continues but the\nresulting topology will miss some objects and may be asymmetric\n(see also \\ref faq_asymmetric).\n\n\\verbatim\n****************************************************************************\n* hwloc received invalid information from the operating system.\n*\n* L3 (cpuset 0x000003f0) intersects with NUMANode (P#0 cpuset 0x0000003f) without inclusion!\n* Error occurred in topology.c line 940\n*\n* Please report this error message to the hwloc user's mailing list,\n* along with the files generated by the hwloc-gather-topology script.\n*\n* hwloc will now ignore this invalid topology information and continue.\n****************************************************************************\n\\endverbatim\n\nThese errors are common on large AMD platforms because of BIOS and/or Linux\nkernel bugs causing invalid L3 cache information.\nIn the above example, the hardware reports\na L3 cache that is shared by 2 cores in the first NUMA node and 4 cores\nin the second NUMA node. That's wrong, it should actually be shared by all 6\ncores in a single NUMA node.\nThe resulting topology will miss some L3 caches.\n\nIf your application does not care about cache sharing, or if you do not plan to\nrequest cache-aware binding in your process launcher, you may likely ignore\nthis error (and hide it by setting HWLOC_HIDE_ERRORS=1 in your environment).\n\nSome platforms report similar warnings about conflicting Packages and NUMANodes.\n\nOn x86 hosts, passing <tt>HWLOC_COMPONENTS=x86</tt> in the environment may\nworkaround some of these issues by switching to a different way to discover the topology.\n\nUpgrading the BIOS and/or the operating system may help.\nOtherwise, as explained in the message, reporting this issue to the hwloc developers\n(by sending the tarball that is generated by the hwloc-gather-topology script\n on this platform) is a good way to make sure that this is a software\n(operating system) or hardware bug (BIOS, etc).\n\nSee also \\ref bugs. Opening an issue on GitHub automatically displays hints\non what information you should provide when reporting such bugs.\n\n\n\\subsection faq_valgrind Why does Valgrind complain about hwloc memory leaks?\n\nIf you are debugging your application with Valgrind, you want to\navoid memory leak reports that are caused by hwloc and not by your\nprogram.\n\nhwloc itself is often checked with Valgrind to make sure it does\nnot leak memory.\nHowever, some global variables in hwloc dependencies are never freed.\nFor instance libz allocates its global state once at startup and\nnever frees it so that it may be reused later.\nSome libxml2 global state is also never freed because hwloc does not\nknow whether it can safely ask libxml2 to free it (the application may\nalso be using libxml2 outside of hwloc).\n\nThese unfreed variables cause leak reports in Valgrind.\nhwloc installs a Valgrind <em>suppressions</em> file to hide them.\nYou should pass the following command-line option to Valgrind to use it:\n\\verbatim\n  --suppressions=/path/to/hwloc-valgrind.supp\n\\endverbatim\n\n\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"faq4\">\n\\endhtmlonly\n\\section faq4 Platform-specific\n\n\n\\subsection faq_knl_numa How do I find the local MCDRAM NUMA node on Intel Xeon Phi processor?\n\nIntel Xeon Phi processors introduced a new memory architecture by\npossibly having two distinct local memories:\nsome normal memory (DDR) and some high-bandwidth on-package memory (MCDRAM).\nProcessors can be configured in various clustering modes to have up to 4 <em>Clusters</em>.\nMoreover, each <em>Cluster</em> (quarter, half or whole processor) of the processor may have its own local\nparts of the DDR and of the MCDRAM.\nThis memory and clustering configuration may be probed by looking at MemoryMode\nand ClusterMode attributes, see \\ref attributes_info_platform and doc/examples/get-knl-modes.c\nin the source directory.\n\nStarting with version 2.0, hwloc properly exposes this memory\nconfiguration.\nDDR and MCDRAM are attached as two memory children of the same parent,\nDDR first, and MCDRAM second if any.\nDepending on the processor configuration, that parent may be a Package,\na Cache, or a Group object of type <tt>Cluster</tt>.\n\nHence cores may have one or two local NUMA nodes, listed by the core nodeset.\nAn application may allocate local memory from a core by using that nodeset.\nThe operating system will actually allocate from the DDR when\npossible, or fallback to the MCDRAM.\n\nTo allocate specifically on one of these memories,\none should walk up the parent pointers until finding an object with\nsome memory children.\nLooking at these memory children will give the DDR first,\nthen the MCDRAM if any.\nTheir nodeset may then be used for allocating or binding memory buffers.\n\nOne may also traverse the list of NUMA nodes until finding some whose\ncpuset matches the target core or PUs.\nThe MCDRAM NUMA nodes may be identified thanks to the <tt>subtype</tt> field\nwhich is set to <tt>MCDRAM</tt>.\n\nCommand-line tools such as <tt>hwloc-bind</tt> may bind memory on the MCDRAM by\nusing the <i>hbm</i> keyword. For instance, to bind on the first MCDRAM NUMA node:\n\n\\verbatim\n$ hwloc-bind --membind --hbm numa:0 -- myprogram\n$ hwloc-bind --membind numa:0 -- myprogram\n\\endverbatim\n\n\n\\subsection faq_knl_dump Why do I need hwloc-dump-hwdata for memory on Intel Xeon Phi processor?\n\nIntel Xeon Phi processors may use the on-package memory (MCDRAM)\nas either memory or a memory-side cache\n(reported as a L3 cache by hwloc by default,\nsee <tt>HWLOC_KNL_MSCACHE_L3</tt> in \\ref envvar).\nThere are also several clustering modes that significantly affect the memory organization\n(see \\ref faq_knl_numa for more information about these modes).\nDetails about these are currently only available to privileged users.\nWithout them, hwloc relies on a heuristic for guessing the modes.\n\nThe hwloc-dump-hwdata utility may be used to dump this privileged binary information\ninto human-readable and world-accessible files that the hwloc library will later load.\nThe utility should usually run as root once during boot, in order to update dumped\ninformation (stored under /var/run/hwloc by default) in case the MCDRAM or clustering configuration\nchanged between reboots.\n\nWhen SELinux MLS policy is enabled, a specific hwloc policy module may be required\nso that all users get access to the dumped files (in /var/run/hwloc by default).\nOne may use hwloc policy files from the SELinux Reference Policy at\nhttps://github.com/TresysTechnology/refpolicy-contrib\n(see also the documentation at https://github.com/TresysTechnology/refpolicy/wiki/GettingStarted).\n\nhwloc-dump-hwdata requires <tt>dmi-sysfs</tt> kernel module loaded.\n\nThe utility is currently unneeded on platforms without Intel Xeon Phi processors.\n\nSee <tt>HWLOC_DUMPED_HWDATA_DIR</tt> in \\ref envvar for details\nabout the location of dumped files.\n\n\n\\subsection faq_bgq How do I build hwloc for BlueGene/Q?\n\nIBM BlueGene/Q machines run a standard Linux on the login/frontend nodes\nand a custom CNK (<em>Compute Node Kernel</em>) on the compute nodes.\n\nTo discover the topology of a login/frontend node, hwloc should be\nconfigured as usual, without any BlueGene/Q-specific option.\n\nHowever, one would likely rather discover the topology of the compute nodes\nwhere parallel jobs are actually running.\nIf so, hwloc must be cross-compiled with the following configuration line:\n\\verbatim\n./configure --host=powerpc64-bgq-linux --disable-shared --enable-static \\\n  CPPFLAGS='-I/bgsys/drivers/ppcfloor -I/bgsys/drivers/ppcfloor/spi/include/kernel/cnk/'\n\\endverbatim\n\nCPPFLAGS may have to be updated if your platform headers are installed\nin a different directory.\n\n\n\\subsection faq_windows How do I build hwloc for Windows?\n\nhwloc releases are available as pre-built ZIPs for Windows on both 32bits and\n64bits x86 platforms.\nThey are built using MSYS2 and MinGW on a Windows host.\nSuch an environment allows using the Unix-like <tt>configure</tt>, <tt>make</tt>\nand <tt>make install</tt> steps without having to tweak too many variables or options.\nOne may look at <tt>contrib/ci.inria.fr/job-3-mingw.sh</tt> in the hwloc\nrepository for an example used for nightly testing.\n\nhwloc releases also contain a basic Microsoft Visual Studio solution\nunder <tt>contrib/windows/</tt>.\n\n\n\\subsection faq_netbsd_bind How to get useful topology information on NetBSD?\n\nThe NetBSD (and FreeBSD) backend uses x86-specific topology discovery\n(through the x86 component).\nThis implementation requires CPU binding so as to query topology\ninformation from each individual logical processor.\nThis means that hwloc cannot find any useful topology information\nunless user-level process binding is allowed by the NetBSD kernel.\nThe <tt>security.models.extensions.user_set_cpu_affinity</tt>\nsysctl variable must be set to 1 to do so.\nOtherwise, only the number of logical processors will be detected.\n\n\n\\subsection faq_aix_bind Why does binding fail on AIX?\n\nThe AIX operating system requires specific user capabilities for\nattaching processes to resource sets (CAP_NUMA_ATTACH).\nOtherwise functions such as hwloc_set_cpubind() fail (return -1 with errno set to EPERM).\n\nThis capability must also be inherited (through the additional CAP_PROPAGATE capability)\nif you plan to bind a process before forking another process,\nfor instance with <tt>hwloc-bind</tt>.\n\nThese capabilities may be given by the administrator with:\n\\verbatim\nchuser \"capabilities=CAP_PROPAGATE,CAP_NUMA_ATTACH\" <username>\n\\endverbatim\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"faq5\">\n\\endhtmlonly\n\\section faq5 Compatibility between hwloc versions\n\n\\subsection faq_version_api How do I handle API changes?\n\nThe hwloc interface is extended with every new major release.\nAny application using the hwloc API should be prepared to check at\ncompile-time whether some features are available in the currently\ninstalled hwloc distribution.\n\nFor instance, to check whether the hwloc version is at least 2.0, you should use:\n\\verbatim\n#include <hwloc.h>\n#if HWLOC_API_VERSION >= 0x00020000\n...\n#endif\n\\endverbatim\n\nTo check for the API of release X.Y.Z at build time,\nyou may compare ::HWLOC_API_VERSION with <tt>(X<<16)+(Y<<8)+Z</tt>.\n\nFor supporting older releases that do not have <tt>HWLOC_OBJ_NUMANODE</tt>\nand <tt>HWLOC_OBJ_PACKAGE</tt> yet, you may use:\n\n\\verbatim\n#include <hwloc.h>\n#if HWLOC_API_VERSION < 0x00010b00\n#define HWLOC_OBJ_NUMANODE HWLOC_OBJ_NODE\n#define HWLOC_OBJ_PACKAGE HWLOC_OBJ_SOCKET\n#endif\n\\endverbatim\n\nOnce a program is built against a hwloc library, it may also dynamically\nlink with compatible libraries from other hwloc releases.\nThe version of that runtime library may be queried with hwloc_get_api_version().\nSee \\ref faq_version_abi for using this function for testing ABI compatibility.\n\n\n\n\\subsection faq_version What is the difference between API and library version numbers?\n\n::HWLOC_API_VERSION is the version of the API.\nIt changes when functions are added, modified, etc.\nHowever it does not necessarily change from one release to another.\nFor instance, two releases of the same series (e.g. 2.0.3 and 2.0.4)\nusually have the same ::HWLOC_API_VERSION (<tt>0x00020000</tt>).\nHowever their HWLOC_VERSION strings are different\n(<tt>\\\"2.0.3\\\"</tt> and <tt>\\\"2.0.4\\\"</tt> respectively).\n\n\n\n\\subsection faq_version_abi How do I handle ABI breaks?\n\nThe hwloc interface was deeply modified in release 2.0\nto fix several issues of the 1.x interface\n(see \\ref upgrade_to_api_2x and the NEWS file in the source directory for details).\nThe ABI was broken, which means\n<b>applications must be recompiled against the new 2.0 interface</b>.\n\nTo check that you are not mixing old/recent headers with a recent/old runtime library,\ncheck the major revision number in the API version:\n\\verbatim\n#include <hwloc.h>\n  unsigned version = hwloc_get_api_version();\n  if ((version >> 16) != (HWLOC_API_VERSION >> 16)) {\n    fprintf(stderr,\n           \"%s compiled for hwloc API 0x%x but running on library API 0x%x.\\n\"\n           \"You may need to point LD_LIBRARY_PATH to the right hwloc library.\\n\"\n           \"Aborting since the new ABI is not backward compatible.\\n\",\n           callname, HWLOC_API_VERSION, version);\n    exit(EXIT_FAILURE);\n  }\n\\endverbatim\nTo specifically detect v2.0 issues:\n\\verbatim\n#include <hwloc.h>\n#if HWLOC_API_VERSION >= 0x00020000\n  /* headers are recent */\n  if (hwloc_get_api_version() < 0x20000)\n    ... error out, the hwloc runtime library is older than 2.0 ...\n#else\n  /* headers are pre-2.0 */\n  if (hwloc_get_api_version() >= 0x20000)\n    ... error out, the hwloc runtime library is more recent than 2.0 ...\n#endif\n\\endverbatim\n\nIn theory, library sonames prevent linking with incompatible libraries.\nHowever custom hwloc installations or improperly configured build environments\nmay still lead to such issues.\nHence running one of the above (cheap) checks before initializing hwloc topology\nmay be useful.\n\n\n\n\\subsection faq_version_xml Are XML topology files compatible between hwloc releases?\n\nXML topology files are forward-compatible:\na XML file may be loaded by a hwloc library that is more recent\nthan the hwloc release that exported that file.\n\nHowever, hwloc XMLs are not always backward-compatible:\nTopologies exported by hwloc 2.x cannot be imported by 1.x by default\n(see \\ref upgrade_to_api_2x_xml for working around such issues).\nThere are also some corner cases where backward compatibility\nis not guaranteed because of changes between major releases\n(for instance 1.11 XMLs could not be imported in 1.10).\n\nXMLs are exchanged at runtime between some components of the HPC software stack\n(for instance the resource managers and MPI processes).\nBuilding all these components on the same (cluster-wide)\nhwloc installation is a good way to avoid such incompatibilities.\n\n\n\n\\subsection faq_version_synthetic Are synthetic strings compatible between hwloc releases?\n\nSynthetic strings (see \\ref synthetic) are forward-compatible:\na synthetic string generated by a release may be imported by future hwloc libraries.\n\nHowever they are often not backward-compatible because new details may have been\nadded to synthetic descriptions in recent releases.\nSome flags may be given to hwloc_topology_export_synthetic() to avoid such details\nand stay backward compatible.\n\n\n\n\\subsection faq_version_shmem Is it possible to share a shared-memory topology between different hwloc releases?\n\nShared-memory topologies (see \\ref hwlocality_shmem) have strong\nrequirements on compatibility between hwloc libraries.\nAdopting a shared-memory topology fails\nif it was exported by a non-compatible hwloc release.\nReleases with same major revision are usually compatible\n(e.g. hwloc 2.0.4 may adopt a topology exported by 2.0.3)\nbut different major revisions may be incompatible\n(e.g. hwloc 2.1.0 cannot adopt from 2.0.x).\n\nTopologies are shared at runtime between some components of the HPC software stack\n(for instance the resource managers and MPI processes).\nBuilding all these components on the same (system-wide) hwloc installation\nis a good way to avoid such incompatibilities.\n\n\n\n\\page upgrade_to_api_2x Upgrading to the hwloc 2.0 API\n\n\\htmlonly\n<div class=\"section\">\n\\endhtmlonly\n\nSee \\ref faq5 for detecting the hwloc version that you are compiling\nand/or running against.\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"upgrade_to_api_2x_memory\">\n\\endhtmlonly\n\\section upgrade_to_api_2x_memory New Organization of NUMA nodes and Memory\n\n\\subsection upgrade_to_api_2x_memory_children Memory children\n\nIn hwloc v1.x, NUMA nodes were inside the tree, for instance Packages\ncontained 2 NUMA nodes which contained a L3 and several cache.\n\nStarting with hwloc v2.0, NUMA nodes are not in the main tree anymore.\nThey are attached under objects as <i>Memory Children</i> on the side\nof normal children.\nThis memory children list starts at <code>obj->memory_first_child</code>\nand its size is <code>obj->memory_arity</code>.\nHence there can now exist two local NUMA nodes,\nfor instance on Intel Xeon Phi processors.\n\nThe normal list of children (starting at <code>obj->first_child</code>,\nending at <code>obj->last_child</code>, of size <code>obj->arity</code>,\nand available as the array <code>obj->children</code>)\nnow only contains CPU-side objects:\nPUs, Cores, Packages, Caches, Groups, Machine and System.\nhwloc_get_next_child() may still be used to iterate over all children of all lists.\n\nHence the CPU-side hierarchy is built using normal children,\nwhile memory is attached to that hierarchy depending on its affinity.\n\n\\subsection upgrade_to_api_2x_memory_examples Examples\n\n<ul>\n<li>a UMA machine with 2 packages and a single NUMA node is now modeled\n as a \"Machine\" object with two \"Package\" children\n and one \"NUMANode\" memory children (displayed first in lstopo below):\n\\verbatim\nMachine (1024MB total)\n  NUMANode L#0 (P#0 1024MB)\n  Package L#0\n    Core L#0 + PU L#0 (P#0)\n    Core L#1 + PU L#1 (P#1)\n  Package L#1\n    Core L#2 + PU L#2 (P#2)\n    Core L#3 + PU L#3 (P#3)\n\\endverbatim\n</li>\n\n<li>a machine with 2 packages with one NUMA node and 2 cores in each is now:\n\\verbatim\nMachine (2048MB total)\n  Package L#0\n    NUMANode L#0 (P#0 1024MB)\n    Core L#0 + PU L#0 (P#0)\n    Core L#1 + PU L#1 (P#1)\n  Package L#1\n    NUMANode L#1 (P#1 1024MB)\n    Core L#2 + PU L#2 (P#2)\n    Core L#3 + PU L#3 (P#3)\n\\endverbatim\n</li>\n\n<li>if there are two NUMA nodes per package, a Group object may be added to keep\ncores together with their local NUMA node:\n\\verbatim\nMachine (4096MB total)\n  Package L#0\n    Group0 L#0\n      NUMANode L#0 (P#0 1024MB)\n      Core L#0 + PU L#0 (P#0)\n      Core L#1 + PU L#1 (P#1)\n    Group0 L#1\n      NUMANode L#1 (P#1 1024MB)\n      Core L#2 + PU L#2 (P#2)\n      Core L#3 + PU L#3 (P#3)\n  Package L#1\n    [...]\n\\endverbatim\n</li>\n\n<li>if the platform has L3 caches whose localities are identical to NUMA nodes, Groups aren't needed:\n\\verbatim\nMachine (4096MB total)\n  Package L#0\n    L3 L#0 (16MB)\n      NUMANode L#0 (P#0 1024MB)\n      Core L#0 + PU L#0 (P#0)\n      Core L#1 + PU L#1 (P#1)\n    L3 L#1 (16MB)\n      NUMANode L#1 (P#1 1024MB)\n      Core L#2 + PU L#2 (P#2)\n      Core L#3 + PU L#3 (P#3)\n  Package L#1\n    [...]\n\\endverbatim\n</li>\n</ul>\n\n\n\\subsection upgrade_to_api_2x_numa_level NUMA level and depth\n\nNUMA nodes are not in \"main\" tree of normal objects anymore.\nHence, they don't have a meaningful depth anymore (like I/O and Misc objects).\nThey have a virtual (negative) depth (::HWLOC_TYPE_DEPTH_NUMANODE)\nso that functions manipulating depths and level still work,\nand so that we can still iterate over the level of NUMA nodes just like for any other level.\n\nFor instance we can still use lines such as\n\\verbatim\nint depth = hwloc_get_type_depth(topology, HWLOC_OBJ_NUMANODE);\nhwloc_obj_t obj = hwloc_get_obj_by_type(topology, HWLOC_OBJ_NUMANODE, 4);\nhwloc_obj_t node = hwloc_get_next_obj_by_depth(topology, HWLOC_TYPE_DEPTH_NUMANODE, prev);\n\\endverbatim\n\nThe NUMA depth should not be compared with others.\nAn unmodified code that still compares NUMA and Package depths\n(to find out whether Packages contain NUMA or the contrary)\nwould now always assume Packages contain NUMA (because the NUMA depth is negative).\n\nHowever, the depth of the Normal parents of NUMA nodes may be used instead.\nIn the last example above, NUMA nodes are attached to L3 caches,\nhence one may compare the depth of Packages and L3 to find out\nthat NUMA nodes are contained in Packages.\nThis depth of parents may be retrieved with hwloc_get_memory_parents_depth().\nHowever, this function may return ::HWLOC_TYPE_DEPTH_MULTIPLE\non future platforms if NUMA nodes are attached to different levels.\n\n\n\\subsection upgrade_to_api_2x_memory_find Finding Local NUMA nodes and looking at Children and Parents\n\nApplications that walked up/down to find NUMANode parent/children must\nnow be updated.\nInstead of looking directly for a NUMA node, one should now look for\nan object that has some memory children.\nNUMA node(s) will be be attached there.\nFor instance, when looking for a NUMA node above a given core <tt>core</tt>:\n\\verbatim\nhwloc_obj_t parent = core->parent;\nwhile (parent && !parent->memory_arity)\n  parent = parent->parent; /* no memory child, walk up */\nif (parent)\n  /* use parent->memory_first_child (and its siblings if there are multiple local NUMA nodes) */\n\\endverbatim\n\nThe list of local NUMA nodes (usually a single one) is also described\nby the <tt>nodeset</tt> attribute of each object (which contains the\nphysical indexes of these nodes).\nIterating over the NUMA level is also an easy way to find local NUMA nodes:\n\\verbatim\nhwloc_obj_t tmp = NULL;\nwhile ((tmp = hwloc_get_next_obj_by_type(topology, HWLOC_OBJ_NUMANODE, tmp)) != NULL) {\n  if (hwloc_bitmap_isset(obj->nodeset, tmp->os_index))\n    /* tmp is a NUMA node local to obj, use it */\n}\n\\endverbatim\n\nSimilarly finding objects that are close to a given NUMA nodes\nshould be updated too.\nInstead of looking at the NUMA node parents/children, one should\nnow find a Normal parent above that NUMA node, and then look\nat its parents/children as usual:\n\\verbatim\nhwloc_obj_t tmp = obj->parent;\nwhile (hwloc_obj_type_is_memory(tmp))\n  tmp = tmp->parent;\n/* now use tmp instead of obj */\n\\endverbatim\n\nTo avoid such hwloc v2.x-specific and NUMA-specific cases in the code,\na <b>generic lookup for any kind of object, including NUMA nodes</b>,\nmight also be implemented by iterating over a level.\nFor instance finding an object of type <tt>type</tt> which either\ncontains or is included in object <tt>obj</tt> can be\nperformed by traversing the level of that type and comparing CPU sets:\n\\verbatim\nhwloc_obj_t tmp = NULL;\nwhile ((tmp = hwloc_get_next_obj_by_type(topology, type, tmp)) != NULL) {\n  if (hwloc_bitmap_intersects(tmp->cpuset, obj->cpuset))\n    /* tmp matches, use it */\n}\n\\endverbatim\n<b>\nThis generic lookup works whenever <tt>type</tt> or <tt>obj</tt>\nare Normal or Memory objects since both have CPU sets.\nMoreover, it is compatible with the hwloc v1.x API.\n</b>\n\n\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"upgrade_to_api_2x_children\">\n\\endhtmlonly\n\\section upgrade_to_api_2x_children 4 Kinds of Objects and Children\n\n\\subsection upgrade_to_api_2x_io_misc_children I/O and Misc children\n\nI/O children are not in the main object children list anymore either.\nThey are in the list starting at <code>obj->io_first_child</code>\nand whose size if <code>obj->io_arity</code>.\n\nMisc children are not in the main object children list anymore.\nThey are in the list starting at <code>obj->misc_first_child</code>\nnd whose size if <code>obj->misc_arity</code>.\n\nSee hwloc_obj for details about children lists.\n\nhwloc_get_next_child() may still be used to iterate over all children of all lists.\n\n\n\\subsection upgrade_to_api_2x_kinds_subsec Kinds of objects\n\nGiven the above, objects may now be of 4 kinds:\n<ul>\n<li>Normal (everything not listed below, including Machine, Package, Core, PU, CPU Caches, etc);</li>\n<li>Memory (currently NUMA nodes or Memory-side Caches), attached to parents as Memory children;</li>\n<li>I/O (Bridges, PCI and OS devices), attached to parents as I/O children;</li>\n<li>Misc objects, attached to parents as Misc children.</li>\n</ul>\nSee hwloc_obj for details about children lists.\n\nFor a given object type, the kind may be found with hwloc_obj_type_is_normal(),\nhwloc_obj_type_is_memory(), hwloc_obj_type_is_normal(),\nor comparing with ::HWLOC_OBJ_MISC.\n\nNormal and Memory objects have (non-NULL) CPU sets and nodesets,\nwhile I/O and Misc objects don't have any sets (they are NULL).\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"upgrade_to_api_2x_cache\">\n\\endhtmlonly\n\\section upgrade_to_api_2x_cache HWLOC_OBJ_CACHE replaced\n\nInstead of a single HWLOC_OBJ_CACHE, there are now 8 types\n::HWLOC_OBJ_L1CACHE, ..., ::HWLOC_OBJ_L5CACHE,\n::HWLOC_OBJ_L1ICACHE, ..., ::HWLOC_OBJ_L3ICACHE.\n\nCache object attributes are unchanged.\n\nhwloc_get_cache_type_depth() is not needed to disambiguate cache types anymore\nsince new types can be passed to hwloc_get_type_depth()\nwithout ever getting ::HWLOC_TYPE_DEPTH_MULTIPLE anymore.\n\nhwloc_obj_type_is_cache(), hwloc_obj_type_is_dcache() and hwloc_obj_type_is_icache()\nmay be used to check whether a given type is a cache, data/unified cache or instruction cache.\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"upgrade_to_api_2x_allowed\">\n\\endhtmlonly\n\\section upgrade_to_api_2x_allowed allowed_cpuset and allowed_nodeset only in the main topology\n\nObjects do not have <code>allowed_cpuset</code> and <code>allowed_nodeset</code> anymore.\nThey are only available for the entire topology using\nhwloc_topology_get_allowed_cpuset() and hwloc_topology_get_allowed_nodeset().\n\nAs usual, those are only needed when the INCLUDE_DISALLOWED topology flag is given,\nwhich means disallowed objects are kept in the topology.\nIf so, one may find out whether some PUs inside an object is allowed by checking\n\\verbatim\nhwloc_bitmap_intersects(obj->cpuset, hwloc_topology_get_allowed_cpuset(topology))\n\\endverbatim\nReplace cpusets with nodesets for NUMA nodes.\nTo find out which ones, replace intersects() with and() to get the actual intersection.\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"upgrade_to_api_2x_depth\">\n\\endhtmlonly\n\\section upgrade_to_api_2x_depth Object depths are now signed int\n\n<code>obj->depth</code> as well as depths given to functions\nsuch as hwloc_get_obj_by_depth() or returned by hwloc_topology_get_depth() are now\n<b>signed int</b>.\n\nOther depth such as cache-specific depth attribute are still unsigned.\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"upgrade_to_api_2x_memory_attrs\">\n\\endhtmlonly\n\\section upgrade_to_api_2x_memory_attrs Memory attributes become NUMANode-specific\n\nMemory attributes such as <code>obj->memory.local_memory</code>\nare now only available in NUMANode-specific attributes\nin <code>obj->attr->numanode.local_memory</code>.\n\n<code>obj->memory.total_memory</code> is available\nin all objects as <code>obj->total_memory</code>.\n\nSee hwloc_obj_attr_u::hwloc_numanode_attr_s and hwloc_obj for details.\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"upgrade_to_api_2x_config\">\n\\endhtmlonly\n\\section upgrade_to_api_2x_config Topology configuration changes\n\nThe old ignoring API as well as several configuration flags\nare replaced with the new filtering API,\nsee hwloc_topology_set_type_filter() and its variants,\nand ::hwloc_type_filter_e for details.\n\n<ul>\n\n<li>\nhwloc_topology_ignore_type(), hwloc_topology_ignore_type_keep_structure()\nand hwloc_topology_ignore_all_keep_structure() are respectively superseded by\n\\verbatim\nhwloc_topology_set_type_filter(topology, type, HWLOC_TYPE_FILTER_KEEP_NONE);\nhwloc_topology_set_type_filter(topology, type, HWLOC_TYPE_FILTER_KEEP_STRUCTURE);\nhwloc_topology_set_all_types_filter(topology, HWLOC_TYPE_FILTER_KEEP_STRUCTURE);\n\\endverbatim\n\nAlso, the meaning of KEEP_STRUCTURE has changed (only entire levels may be ignored, instead of single objects), the old behavior is not available anymore.\n</li>\n\n<li>\nHWLOC_TOPOLOGY_FLAG_ICACHES is superseded by\n\\verbatim\nhwloc_topology_set_icache_types_filter(topology, HWLOC_TYPE_FILTER_KEEP_ALL);\n\\endverbatim\n</li>\n\n<li>\nHWLOC_TOPOLOGY_FLAG_WHOLE_IO, HWLOC_TOPOLOGY_FLAG_IO_DEVICES and HWLOC_TOPOLOGY_FLAG_IO_BRIDGES replaced.\n\nTo keep all I/O devices (PCI, Bridges, and OS devices), use:\n\\verbatim\nhwloc_topology_set_io_types_filter(topology, HWLOC_TYPE_FILTER_KEEP_ALL);\n\\endverbatim\n\nTo only keep important devices (Bridges with children, common PCI devices and OS devices):\n\\verbatim\nhwloc_topology_set_io_types_filter(topology, HWLOC_TYPE_FILTER_KEEP_IMPORTANT);\n\\endverbatim\n</li>\n\n</ul>\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"upgrade_to_api_2x_xml\">\n\\endhtmlonly\n\\section upgrade_to_api_2x_xml XML changes\n\n2.0 XML files are not compatible with 1.x\n\n2.0 can load 1.x files, but only NUMA distances are imported. Other distance matrices are ignored\n (they were never used by default anyway).\n\n2.0 can export 1.x-compatible files, but only distances attached to the root object are exported\n(i.e. distances that cover the entire machine).\nOther distance matrices are dropped (they were never used by default anyway).\n\n<b>Users are advised to negociate hwloc versions between exporter and importer:</b>\nIf the importer isn't 2.x, the exporter should export to 1.x.\nOtherwise, things should work by default.\n\nHence hwloc_topology_export_xml() and hwloc_topology_export_xmlbuffer() have a new flags argument.\nto force a hwloc-1.x-compatible XML export.\n<ul>\n<li>\n If both always support 2.0, don't pass any flag.\n</li>\n<li>\n When the importer uses hwloc 1.x, export with ::HWLOC_TOPOLOGY_EXPORT_XML_FLAG_V1.\n Otherwise the importer will fail to import.\n</li>\n<li>\n When the exporter uses hwloc 1.x, it cannot pass any flag,\n and a 2.0 importer can import without problem.\n</li>\n</ul>\n\n\\verbatim\n#if HWLOC_API_VERSION >= 0x20000\n   if (need 1.x compatible XML export)\n      hwloc_topology_export_xml(...., HWLOC_TOPOLOGY_EXPORT_XML_FLAG_V1);\n   else /* need 2.x compatible XML export */\n      hwloc_topology_export_xml(...., 0);\n#else\n   hwloc_topology_export_xml(....);\n#endif\n\\endverbatim\n\nAdditionally, hwloc_topology_diff_load_xml(), hwloc_topology_diff_load_xmlbuffer(),\nhwloc_topology_diff_export_xml(), hwloc_topology_diff_export_xmlbuffer()\nand hwloc_topology_diff_destroy() lost the topology argument:\nThe first argument (topology) isn't needed anymore.\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"upgrade_to_api_2x_distances\">\n\\endhtmlonly\n\\section upgrade_to_api_2x_distances Distances API totally rewritten\n\nThe new distances API is in hwloc/distances.h.\n\nDistances are not accessible directly from objects anymore.\nOne should first call hwloc_distances_get() (or a variant)\nto retrieve distances (possibly with one call to get the\nnumber of available distances structures, and another call\nto actually get them).\nThen it may consult these structures, and finally release them.\n\nThe set of object involved in a distances structure is specified\nby an array of objects, it may not always cover the entire machine or so.\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"upgrade_to_api_2x_return\">\n\\endhtmlonly\n\\section upgrade_to_api_2x_return Return values of functions\n\nBitmap functions (and a couple other functions) can return errors (in theory).\n\nMost bitmap functions may have to reallocate the internal bitmap storage.\nIn v1.x, they would silently crash if realloc failed.\nIn v2.0, they now return an int that can be negative on error.\nHowever, the preallocated storage is 512 bits,\nhence realloc will not even be used unless you run\nhwloc on machines with larger PU or NUMAnode indexes.\n\nhwloc_obj_add_info(), hwloc_cpuset_from_nodeset() and hwloc_cpuset_from_nodeset()\nalso return an int, which would be -1 in case of allocation errors.\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"upgrade_to_api_2x_misc\">\n\\endhtmlonly\n\\section upgrade_to_api_2x_misc Misc API changes\n\n<ul>\n\n<li>\nhwloc_type_sscanf() extends hwloc_obj_type_sscanf()\nby passing a union hwloc_obj_attr_u which may receive\nCache, Group, Bridge or OS device attributes.\n</li>\n\n<li>\nhwloc_type_sscanf_as_depth() is also added to\ndirectly return the corresponding level depth within a topology.\n</li>\n\n<li>\nhwloc_topology_insert_misc_object_by_cpuset() is replaced\nwith hwloc_topology_alloc_group_object() and hwloc_topology_insert_group_object().\n</li>\n\n<li>\nhwloc_topology_insert_misc_object_by_parent() is replaced\nwith hwloc_topology_insert_misc_object().\n</li>\n\n</ul>\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"upgrade_to_api_2x_removals\">\n\\endhtmlonly\n\\section upgrade_to_api_2x_removals API removals and deprecations\n\n<ul>\n\n<li>\nHWLOC_OBJ_SYSTEM removed:\nThe root object is always ::HWLOC_OBJ_MACHINE\n</li>\n\n<li>\n*_membind_nodeset() memory binding interfaces deprecated:\nOne should use the variant without _nodeset suffix and pass the ::HWLOC_MEMBIND_BYNODESET flag.\n</li>\n\n<li>\nHWLOC_MEMBIND_REPLICATE removed:\nno supported operating system supports it anymore.\n</li>\n\n<li>\nhwloc_obj_snprintf() removed because it was long-deprecated\nby hwloc_obj_type_snprintf() and hwloc_obj_attr_snprintf().\n</li>\n\n<li>\nhwloc_obj_type_sscanf() deprecated, hwloc_obj_type_of_string() removed.\n</li>\n\n<li>\nhwloc_cpuset_from/to_nodeset_strict() deprecated:\nNow useless since all topologies are NUMA. Use the variant without the _strict suffix\n</li>\n\n<li>\nhwloc_distribute() and hwloc_distributev() removed,\ndeprecated by hwloc_distrib().\n</li>\n\n<li>\nThe Custom interface (hwloc_topology_set_custom(), etc.)\nwas removed, as well as the corresponding command-line tools (hwloc-assembler, etc.).\nTopologies always start with object with valid cpusets and nodesets.\n</li>\n\n<li>\n<code>obj->online_cpuset</code> removed:\nOffline PUs are simply listed in the <code>complete_cpuset</code> as previously.\n</li>\n\n<li>\n<code>obj->os_level</code> removed.\n</li>\n\n</ul>\n\n\n\n*/\n",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/doc/doxygen-doc/html/a00173_source.html": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/xhtml;charset=UTF-8\"/>\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=9\"/>\n<meta name=\"generator\" content=\"Doxygen 1.8.17\"/>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"/>\n<title>Hardware Locality (hwloc): plugins.h Source File</title>\n<link href=\"tabs.css\" rel=\"stylesheet\" type=\"text/css\"/>\n<script type=\"text/javascript\" src=\"jquery.js\"></script>\n<script type=\"text/javascript\" src=\"dynsections.js\"></script>\n<link href=\"doxygen.css\" rel=\"stylesheet\" type=\"text/css\" />\n</head>\n<body>\n<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n<div id=\"titlearea\">\n<table cellspacing=\"0\" cellpadding=\"0\">\n <tbody>\n <tr style=\"height: 56px;\">\n  <td id=\"projectalign\" style=\"padding-left: 0.5em;\">\n   <div id=\"projectname\">Hardware Locality (hwloc)\n   &#160;<span id=\"projectnumber\">2.2.0</span>\n   </div>\n  </td>\n </tr>\n </tbody>\n</table>\n</div>\n<!-- end header part -->\n<!-- Generated by Doxygen 1.8.17 -->\n<script type=\"text/javascript\" src=\"menudata.js\"></script>\n<script type=\"text/javascript\" src=\"menu.js\"></script>\n<script type=\"text/javascript\">\n/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */\n$(function() {\n  initMenu('',false,false,'search.php','Search');\n});\n/* @license-end */</script>\n<div id=\"main-nav\"></div>\n<div id=\"nav-path\" class=\"navpath\">\n  <ul>\n<li class=\"navelem\"><a class=\"el\" href=\"dir_d44c64559bbebec7f509842c48db8b23.html\">include</a></li><li class=\"navelem\"><a class=\"el\" href=\"dir_5cb306d949c7931a3b6c77517393dd34.html\">hwloc</a></li>  </ul>\n</div>\n</div><!-- top -->\n<div class=\"header\">\n  <div class=\"headertitle\">\n<div class=\"title\">plugins.h</div>  </div>\n</div><!--header-->\n<div class=\"contents\">\n<div class=\"fragment\"><div class=\"line\"><a name=\"l00001\"></a><span class=\"lineno\">    1</span>&#160;<span class=\"comment\">/*</span></div>\n<div class=\"line\"><a name=\"l00002\"></a><span class=\"lineno\">    2</span>&#160;<span class=\"comment\"> * Copyright \u00a9 2013-2020 Inria.  All rights reserved.</span></div>\n<div class=\"line\"><a name=\"l00003\"></a><span class=\"lineno\">    3</span>&#160;<span class=\"comment\"> * Copyright \u00a9 2016 Cisco Systems, Inc.  All rights reserved.</span></div>\n<div class=\"line\"><a name=\"l00004\"></a><span class=\"lineno\">    4</span>&#160;<span class=\"comment\"> * See COPYING in top-level directory.</span></div>\n<div class=\"line\"><a name=\"l00005\"></a><span class=\"lineno\">    5</span>&#160;<span class=\"comment\"> */</span></div>\n<div class=\"line\"><a name=\"l00006\"></a><span class=\"lineno\">    6</span>&#160; </div>\n<div class=\"line\"><a name=\"l00007\"></a><span class=\"lineno\">    7</span>&#160;<span class=\"preprocessor\">#ifndef HWLOC_PLUGINS_H</span></div>\n<div class=\"line\"><a name=\"l00008\"></a><span class=\"lineno\">    8</span>&#160;<span class=\"preprocessor\">#define HWLOC_PLUGINS_H</span></div>\n<div class=\"line\"><a name=\"l00009\"></a><span class=\"lineno\">    9</span>&#160; </div>\n<div class=\"line\"><a name=\"l00014\"></a><span class=\"lineno\">   14</span>&#160;<span class=\"keyword\">struct </span><a class=\"code\" href=\"a00355.html\">hwloc_backend</a>;</div>\n<div class=\"line\"><a name=\"l00015\"></a><span class=\"lineno\">   15</span>&#160; </div>\n<div class=\"line\"><a name=\"l00016\"></a><span class=\"lineno\">   16</span>&#160;<span class=\"preprocessor\">#include &quot;hwloc.h&quot;</span></div>\n<div class=\"line\"><a name=\"l00017\"></a><span class=\"lineno\">   17</span>&#160; </div>\n<div class=\"line\"><a name=\"l00018\"></a><span class=\"lineno\">   18</span>&#160;<span class=\"preprocessor\">#ifdef HWLOC_INSIDE_PLUGIN</span></div>\n<div class=\"line\"><a name=\"l00019\"></a><span class=\"lineno\">   19</span>&#160;<span class=\"comment\">/* needed for hwloc_plugin_check_namespace() */</span></div>\n<div class=\"line\"><a name=\"l00020\"></a><span class=\"lineno\">   20</span>&#160;<span class=\"preprocessor\">#ifdef HWLOC_HAVE_LTDL</span></div>\n<div class=\"line\"><a name=\"l00021\"></a><span class=\"lineno\">   21</span>&#160;<span class=\"preprocessor\">#include &lt;ltdl.h&gt;</span></div>\n<div class=\"line\"><a name=\"l00022\"></a><span class=\"lineno\">   22</span>&#160;<span class=\"preprocessor\">#else</span></div>\n<div class=\"line\"><a name=\"l00023\"></a><span class=\"lineno\">   23</span>&#160;<span class=\"preprocessor\">#include &lt;dlfcn.h&gt;</span></div>\n<div class=\"line\"><a name=\"l00024\"></a><span class=\"lineno\">   24</span>&#160;<span class=\"preprocessor\">#endif</span></div>\n<div class=\"line\"><a name=\"l00025\"></a><span class=\"lineno\">   25</span>&#160;<span class=\"preprocessor\">#endif</span></div>\n<div class=\"line\"><a name=\"l00026\"></a><span class=\"lineno\">   26</span>&#160; </div>\n<div class=\"line\"><a name=\"l00027\"></a><span class=\"lineno\">   27</span>&#160; </div>\n<div class=\"line\"><a name=\"l00028\"></a><span class=\"lineno\">   28</span>&#160; </div>\n<div class=\"line\"><a name=\"l00038\"></a><span class=\"lineno\"><a class=\"line\" href=\"a00347.html\">   38</a></span>&#160;<span class=\"keyword\">struct </span><a class=\"code\" href=\"a00347.html\">hwloc_disc_component</a> {</div>\n<div class=\"line\"><a name=\"l00042\"></a><span class=\"lineno\"><a class=\"line\" href=\"a00347.html#a4064c3b5d9213027e87caebef380a840\">   42</a></span>&#160;  <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> *<a class=\"code\" href=\"a00347.html#a4064c3b5d9213027e87caebef380a840\">name</a>;</div>\n<div class=\"line\"><a name=\"l00043\"></a><span class=\"lineno\">   43</span>&#160; </div>\n<div class=\"line\"><a name=\"l00047\"></a><span class=\"lineno\"><a class=\"line\" href=\"a00347.html#a61ad3151efa02e3dbad5d919758f9c90\">   47</a></span>&#160;  <span class=\"keywordtype\">unsigned</span> <a class=\"code\" href=\"a00347.html#a61ad3151efa02e3dbad5d919758f9c90\">phases</a>;</div>\n<div class=\"line\"><a name=\"l00048\"></a><span class=\"lineno\">   48</span>&#160; </div>\n<div class=\"line\"><a name=\"l00057\"></a><span class=\"lineno\"><a class=\"line\" href=\"a00347.html#acbb9957914dbf7b8f504215aa0c8d3fe\">   57</a></span>&#160;  <span class=\"keywordtype\">unsigned</span> <a class=\"code\" href=\"a00347.html#acbb9957914dbf7b8f504215aa0c8d3fe\">excluded_phases</a>;</div>\n<div class=\"line\"><a name=\"l00058\"></a><span class=\"lineno\">   58</span>&#160; </div>\n<div class=\"line\"><a name=\"l00062\"></a><span class=\"lineno\"><a class=\"line\" href=\"a00347.html#ab133956219739a1032a17131757d1961\">   62</a></span>&#160;  <span class=\"keyword\">struct </span><a class=\"code\" href=\"a00355.html\">hwloc_backend</a> * (*instantiate)(<span class=\"keyword\">struct </span>hwloc_topology *topology, <span class=\"keyword\">struct </span><a class=\"code\" href=\"a00347.html\">hwloc_disc_component</a> *component, <span class=\"keywordtype\">unsigned</span> <a class=\"code\" href=\"a00347.html#acbb9957914dbf7b8f504215aa0c8d3fe\">excluded_phases</a>, <span class=\"keyword\">const</span> <span class=\"keywordtype\">void</span> *data1, <span class=\"keyword\">const</span> <span class=\"keywordtype\">void</span> *data2, <span class=\"keyword\">const</span> <span class=\"keywordtype\">void</span> *data3);</div>\n<div class=\"line\"><a name=\"l00063\"></a><span class=\"lineno\">   63</span>&#160; </div>\n<div class=\"line\"><a name=\"l00076\"></a><span class=\"lineno\"><a class=\"line\" href=\"a00347.html#ae86d283c272c5ae24073a235efbf6b59\">   76</a></span>&#160;  <span class=\"keywordtype\">unsigned</span> <a class=\"code\" href=\"a00347.html#ae86d283c272c5ae24073a235efbf6b59\">priority</a>;</div>\n<div class=\"line\"><a name=\"l00077\"></a><span class=\"lineno\">   77</span>&#160; </div>\n<div class=\"line\"><a name=\"l00081\"></a><span class=\"lineno\"><a class=\"line\" href=\"a00347.html#ace80cafe2b1732b047b3fc3da47e6517\">   81</a></span>&#160;  <span class=\"keywordtype\">unsigned</span> <a class=\"code\" href=\"a00347.html#ace80cafe2b1732b047b3fc3da47e6517\">enabled_by_default</a>;</div>\n<div class=\"line\"><a name=\"l00082\"></a><span class=\"lineno\">   82</span>&#160; </div>\n<div class=\"line\"><a name=\"l00087\"></a><span class=\"lineno\">   87</span>&#160;  <span class=\"keyword\">struct </span><a class=\"code\" href=\"a00347.html\">hwloc_disc_component</a> * next;</div>\n<div class=\"line\"><a name=\"l00088\"></a><span class=\"lineno\">   88</span>&#160;};</div>\n<div class=\"line\"><a name=\"l00089\"></a><span class=\"lineno\">   89</span>&#160; </div>\n<div class=\"line\"><a name=\"l00100\"></a><span class=\"lineno\"><a class=\"line\" href=\"a00221.html#ga8c314121c2fc478161bcce758688b9a1\">  100</a></span>&#160;<span class=\"keyword\">typedef</span> <span class=\"keyword\">enum</span> <a class=\"code\" href=\"a00221.html#ga8c314121c2fc478161bcce758688b9a1\">hwloc_disc_phase_e</a> {</div>\n<div class=\"line\"><a name=\"l00105\"></a><span class=\"lineno\"><a class=\"line\" href=\"a00221.html#gga8c314121c2fc478161bcce758688b9a1ab41c626c79e9ccb1e7d41e7076972283\">  105</a></span>&#160;  <a class=\"code\" href=\"a00221.html#gga8c314121c2fc478161bcce758688b9a1ab41c626c79e9ccb1e7d41e7076972283\">HWLOC_DISC_PHASE_GLOBAL</a> = (1U&lt;&lt;0),</div>\n<div class=\"line\"><a name=\"l00106\"></a><span class=\"lineno\">  106</span>&#160; </div>\n<div class=\"line\"><a name=\"l00109\"></a><span class=\"lineno\"><a class=\"line\" href=\"a00221.html#gga8c314121c2fc478161bcce758688b9a1a6360474df197027761a69bd5fc620250\">  109</a></span>&#160;  <a class=\"code\" href=\"a00221.html#gga8c314121c2fc478161bcce758688b9a1a6360474df197027761a69bd5fc620250\">HWLOC_DISC_PHASE_CPU</a> = (1U&lt;&lt;1),</div>\n<div class=\"line\"><a name=\"l00110\"></a><span class=\"lineno\">  110</span>&#160; </div>\n<div class=\"line\"><a name=\"l00113\"></a><span class=\"lineno\"><a class=\"line\" href=\"a00221.html#gga8c314121c2fc478161bcce758688b9a1ac4264a243844c5fbbff495cdb1b4d51d\">  113</a></span>&#160;  <a class=\"code\" href=\"a00221.html#gga8c314121c2fc478161bcce758688b9a1ac4264a243844c5fbbff495cdb1b4d51d\">HWLOC_DISC_PHASE_MEMORY</a> = (1U&lt;&lt;2),</div>\n<div class=\"line\"><a name=\"l00114\"></a><span class=\"lineno\">  114</span>&#160; </div>\n<div class=\"line\"><a name=\"l00117\"></a><span class=\"lineno\"><a class=\"line\" href=\"a00221.html#gga8c314121c2fc478161bcce758688b9a1a677c52064dd987af4988346319b3675a\">  117</a></span>&#160;  <a class=\"code\" href=\"a00221.html#gga8c314121c2fc478161bcce758688b9a1a677c52064dd987af4988346319b3675a\">HWLOC_DISC_PHASE_PCI</a> = (1U&lt;&lt;3),</div>\n<div class=\"line\"><a name=\"l00118\"></a><span class=\"lineno\">  118</span>&#160; </div>\n<div class=\"line\"><a name=\"l00121\"></a><span class=\"lineno\"><a class=\"line\" href=\"a00221.html#gga8c314121c2fc478161bcce758688b9a1aa8e10626cba9af72f5605a1acbdc0015\">  121</a></span>&#160;  <a class=\"code\" href=\"a00221.html#gga8c314121c2fc478161bcce758688b9a1aa8e10626cba9af72f5605a1acbdc0015\">HWLOC_DISC_PHASE_IO</a> = (1U&lt;&lt;4),</div>\n<div class=\"line\"><a name=\"l00122\"></a><span class=\"lineno\">  122</span>&#160; </div>\n<div class=\"line\"><a name=\"l00125\"></a><span class=\"lineno\"><a class=\"line\" href=\"a00221.html#gga8c314121c2fc478161bcce758688b9a1a8a7cde9bff0ab0d085b102a3e934939b\">  125</a></span>&#160;  <a class=\"code\" href=\"a00221.html#gga8c314121c2fc478161bcce758688b9a1a8a7cde9bff0ab0d085b102a3e934939b\">HWLOC_DISC_PHASE_MISC</a> = (1U&lt;&lt;5),</div>\n<div class=\"line\"><a name=\"l00126\"></a><span class=\"lineno\">  126</span>&#160; </div>\n<div class=\"line\"><a name=\"l00129\"></a><span class=\"lineno\"><a class=\"line\" href=\"a00221.html#gga8c314121c2fc478161bcce758688b9a1a68ca5c7ad75a6d9e5355689411621773\">  129</a></span>&#160;  <a class=\"code\" href=\"a00221.html#gga8c314121c2fc478161bcce758688b9a1a68ca5c7ad75a6d9e5355689411621773\">HWLOC_DISC_PHASE_ANNOTATE</a> = (1U&lt;&lt;6),</div>\n<div class=\"line\"><a name=\"l00130\"></a><span class=\"lineno\">  130</span>&#160; </div>\n<div class=\"line\"><a name=\"l00136\"></a><span class=\"lineno\"><a class=\"line\" href=\"a00221.html#gga8c314121c2fc478161bcce758688b9a1ada3ed3f00e74909353d6ea4a96cde5ad\">  136</a></span>&#160;  <a class=\"code\" href=\"a00221.html#gga8c314121c2fc478161bcce758688b9a1ada3ed3f00e74909353d6ea4a96cde5ad\">HWLOC_DISC_PHASE_TWEAK</a> = (1U&lt;&lt;7)</div>\n<div class=\"line\"><a name=\"l00137\"></a><span class=\"lineno\">  137</span>&#160;} <a class=\"code\" href=\"a00221.html#ga600bba1a62022d5f516800649b1edb61\">hwloc_disc_phase_t</a>;</div>\n<div class=\"line\"><a name=\"l00138\"></a><span class=\"lineno\">  138</span>&#160; </div>\n<div class=\"line\"><a name=\"l00140\"></a><span class=\"lineno\"><a class=\"line\" href=\"a00221.html#gaae1b38cf9b12e489884ce2a07275964b\">  140</a></span>&#160;<span class=\"keyword\">enum</span> <a class=\"code\" href=\"a00221.html#gaae1b38cf9b12e489884ce2a07275964b\">hwloc_disc_status_flag_e</a> {</div>\n<div class=\"line\"><a name=\"l00142\"></a><span class=\"lineno\"><a class=\"line\" href=\"a00221.html#ggaae1b38cf9b12e489884ce2a07275964ba205d644d54a0840bd9165fce7d19e6b1\">  142</a></span>&#160;  <a class=\"code\" href=\"a00221.html#ggaae1b38cf9b12e489884ce2a07275964ba205d644d54a0840bd9165fce7d19e6b1\">HWLOC_DISC_STATUS_FLAG_GOT_ALLOWED_RESOURCES</a> = (1UL&lt;&lt;1)</div>\n<div class=\"line\"><a name=\"l00143\"></a><span class=\"lineno\">  143</span>&#160;};</div>\n<div class=\"line\"><a name=\"l00144\"></a><span class=\"lineno\">  144</span>&#160; </div>\n<div class=\"line\"><a name=\"l00150\"></a><span class=\"lineno\"><a class=\"line\" href=\"a00351.html\">  150</a></span>&#160;<span class=\"keyword\">struct </span><a class=\"code\" href=\"a00351.html\">hwloc_disc_status</a> {</div>\n<div class=\"line\"><a name=\"l00154\"></a><span class=\"lineno\"><a class=\"line\" href=\"a00351.html#abaf7c8c082d43e133171f0723dbf824b\">  154</a></span>&#160;  <a class=\"code\" href=\"a00221.html#ga600bba1a62022d5f516800649b1edb61\">hwloc_disc_phase_t</a> <a class=\"code\" href=\"a00351.html#abaf7c8c082d43e133171f0723dbf824b\">phase</a>;</div>\n<div class=\"line\"><a name=\"l00155\"></a><span class=\"lineno\">  155</span>&#160; </div>\n<div class=\"line\"><a name=\"l00159\"></a><span class=\"lineno\"><a class=\"line\" href=\"a00351.html#a0f95fa42d46a6e7cf8dee8af12afee3a\">  159</a></span>&#160;  <span class=\"keywordtype\">unsigned</span> <a class=\"code\" href=\"a00351.html#a0f95fa42d46a6e7cf8dee8af12afee3a\">excluded_phases</a>;</div>\n<div class=\"line\"><a name=\"l00160\"></a><span class=\"lineno\">  160</span>&#160; </div>\n<div class=\"line\"><a name=\"l00162\"></a><span class=\"lineno\"><a class=\"line\" href=\"a00351.html#ad8b123cecb945a9182eb824ccf8ef9d7\">  162</a></span>&#160;  <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">long</span> <a class=\"code\" href=\"a00351.html#ad8b123cecb945a9182eb824ccf8ef9d7\">flags</a>;</div>\n<div class=\"line\"><a name=\"l00163\"></a><span class=\"lineno\">  163</span>&#160;};</div>\n<div class=\"line\"><a name=\"l00164\"></a><span class=\"lineno\">  164</span>&#160; </div>\n<div class=\"line\"><a name=\"l00183\"></a><span class=\"lineno\"><a class=\"line\" href=\"a00355.html\">  183</a></span>&#160;<span class=\"keyword\">struct </span><a class=\"code\" href=\"a00355.html\">hwloc_backend</a> {</div>\n<div class=\"line\"><a name=\"l00185\"></a><span class=\"lineno\">  185</span>&#160;  <span class=\"keyword\">struct </span><a class=\"code\" href=\"a00347.html\">hwloc_disc_component</a> * component;</div>\n<div class=\"line\"><a name=\"l00187\"></a><span class=\"lineno\">  187</span>&#160;  <span class=\"keyword\">struct </span>hwloc_topology * topology;</div>\n<div class=\"line\"><a name=\"l00189\"></a><span class=\"lineno\">  189</span>&#160;  <span class=\"keywordtype\">int</span> envvar_forced;</div>\n<div class=\"line\"><a name=\"l00191\"></a><span class=\"lineno\">  191</span>&#160;  <span class=\"keyword\">struct </span><a class=\"code\" href=\"a00355.html\">hwloc_backend</a> * next;</div>\n<div class=\"line\"><a name=\"l00192\"></a><span class=\"lineno\">  192</span>&#160; </div>\n<div class=\"line\"><a name=\"l00196\"></a><span class=\"lineno\"><a class=\"line\" href=\"a00355.html#aeca769840a6ff03e96462a9533adbccd\">  196</a></span>&#160;  <span class=\"keywordtype\">unsigned</span> <a class=\"code\" href=\"a00355.html#aeca769840a6ff03e96462a9533adbccd\">phases</a>;</div>\n<div class=\"line\"><a name=\"l00197\"></a><span class=\"lineno\">  197</span>&#160; </div>\n<div class=\"line\"><a name=\"l00199\"></a><span class=\"lineno\"><a class=\"line\" href=\"a00355.html#aaa8eafe495aadd81c2e3c4ec527c10ba\">  199</a></span>&#160;  <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">long</span> <a class=\"code\" href=\"a00355.html#aaa8eafe495aadd81c2e3c4ec527c10ba\">flags</a>;</div>\n<div class=\"line\"><a name=\"l00200\"></a><span class=\"lineno\">  200</span>&#160; </div>\n<div class=\"line\"><a name=\"l00207\"></a><span class=\"lineno\"><a class=\"line\" href=\"a00355.html#ab8806f6db077f1bb2e9d63ec99223f7a\">  207</a></span>&#160;  <span class=\"keywordtype\">int</span> <a class=\"code\" href=\"a00355.html#ab8806f6db077f1bb2e9d63ec99223f7a\">is_thissystem</a>;</div>\n<div class=\"line\"><a name=\"l00208\"></a><span class=\"lineno\">  208</span>&#160; </div>\n<div class=\"line\"><a name=\"l00210\"></a><span class=\"lineno\"><a class=\"line\" href=\"a00355.html#a2ea5bd36b7f06efdb65b98b32af16c68\">  210</a></span>&#160;  <span class=\"keywordtype\">void</span> * <a class=\"code\" href=\"a00355.html#a2ea5bd36b7f06efdb65b98b32af16c68\">private_data</a>;</div>\n<div class=\"line\"><a name=\"l00214\"></a><span class=\"lineno\"><a class=\"line\" href=\"a00355.html#a36c4fa86350525b46340c67b802c69c7\">  214</a></span>&#160;  void (*<a class=\"code\" href=\"a00355.html#a36c4fa86350525b46340c67b802c69c7\">disable</a>)(<span class=\"keyword\">struct </span><a class=\"code\" href=\"a00355.html\">hwloc_backend</a> *backend);</div>\n<div class=\"line\"><a name=\"l00215\"></a><span class=\"lineno\">  215</span>&#160; </div>\n<div class=\"line\"><a name=\"l00221\"></a><span class=\"lineno\"><a class=\"line\" href=\"a00355.html#accff2cd8404be43c3b44cec05e6f609b\">  221</a></span>&#160;  int (*<a class=\"code\" href=\"a00355.html#accff2cd8404be43c3b44cec05e6f609b\">discover</a>)(<span class=\"keyword\">struct </span><a class=\"code\" href=\"a00355.html\">hwloc_backend</a> *backend, <span class=\"keyword\">struct </span><a class=\"code\" href=\"a00351.html\">hwloc_disc_status</a> *status);</div>\n<div class=\"line\"><a name=\"l00222\"></a><span class=\"lineno\">  222</span>&#160; </div>\n<div class=\"line\"><a name=\"l00227\"></a><span class=\"lineno\"><a class=\"line\" href=\"a00355.html#aaac253491264c20930f44817270bc502\">  227</a></span>&#160;  int (*<a class=\"code\" href=\"a00355.html#aaac253491264c20930f44817270bc502\">get_pci_busid_cpuset</a>)(<span class=\"keyword\">struct </span><a class=\"code\" href=\"a00355.html\">hwloc_backend</a> *backend, <span class=\"keyword\">struct </span>hwloc_pcidev_attr_s *busid, <a class=\"code\" href=\"a00202.html#gaa3c2bf4c776d603dcebbb61b0c923d84\">hwloc_bitmap_t</a> cpuset);</div>\n<div class=\"line\"><a name=\"l00228\"></a><span class=\"lineno\">  228</span>&#160;};</div>\n<div class=\"line\"><a name=\"l00229\"></a><span class=\"lineno\">  229</span>&#160; </div>\n<div class=\"line\"><a name=\"l00233\"></a><span class=\"lineno\">  233</span>&#160;HWLOC_DECLSPEC <span class=\"keyword\">struct </span><a class=\"code\" href=\"a00355.html\">hwloc_backend</a> * <a class=\"code\" href=\"a00221.html#gadb068565ab6043cbe4d16bfcce067a61\">hwloc_backend_alloc</a>(<span class=\"keyword\">struct</span> hwloc_topology *topology, <span class=\"keyword\">struct</span> <a class=\"code\" href=\"a00347.html\">hwloc_disc_component</a> *component);</div>\n<div class=\"line\"><a name=\"l00234\"></a><span class=\"lineno\">  234</span>&#160; </div>\n<div class=\"line\"><a name=\"l00236\"></a><span class=\"lineno\">  236</span>&#160;HWLOC_DECLSPEC <span class=\"keywordtype\">int</span> <a class=\"code\" href=\"a00221.html#ga4715779d7191833e9b1a7490989a7497\">hwloc_backend_enable</a>(<span class=\"keyword\">struct</span> <a class=\"code\" href=\"a00355.html\">hwloc_backend</a> *backend);</div>\n<div class=\"line\"><a name=\"l00237\"></a><span class=\"lineno\">  237</span>&#160; </div>\n<div class=\"line\"><a name=\"l00248\"></a><span class=\"lineno\"><a class=\"line\" href=\"a00222.html#ga397a1bf7d21dd073320ad0045340f463\">  248</a></span>&#160;<span class=\"keyword\">typedef</span> <span class=\"keyword\">enum</span> <a class=\"code\" href=\"a00222.html#ga397a1bf7d21dd073320ad0045340f463\">hwloc_component_type_e</a> {</div>\n<div class=\"line\"><a name=\"l00250\"></a><span class=\"lineno\"><a class=\"line\" href=\"a00222.html#gga397a1bf7d21dd073320ad0045340f463a5d6e561f467fe9795a29e7368b613900\">  250</a></span>&#160;  <a class=\"code\" href=\"a00222.html#gga397a1bf7d21dd073320ad0045340f463a5d6e561f467fe9795a29e7368b613900\">HWLOC_COMPONENT_TYPE_DISC</a>,</div>\n<div class=\"line\"><a name=\"l00251\"></a><span class=\"lineno\">  251</span>&#160; </div>\n<div class=\"line\"><a name=\"l00253\"></a><span class=\"lineno\"><a class=\"line\" href=\"a00222.html#gga397a1bf7d21dd073320ad0045340f463adea00cd839c2141c032e1569fd5592bd\">  253</a></span>&#160;  <a class=\"code\" href=\"a00222.html#gga397a1bf7d21dd073320ad0045340f463adea00cd839c2141c032e1569fd5592bd\">HWLOC_COMPONENT_TYPE_XML</a></div>\n<div class=\"line\"><a name=\"l00254\"></a><span class=\"lineno\">  254</span>&#160;} <a class=\"code\" href=\"a00222.html#ga31a5a455f4e666b936f0a9e8fb9a0f47\">hwloc_component_type_t</a>;</div>\n<div class=\"line\"><a name=\"l00255\"></a><span class=\"lineno\">  255</span>&#160; </div>\n<div class=\"line\"><a name=\"l00261\"></a><span class=\"lineno\"><a class=\"line\" href=\"a00359.html\">  261</a></span>&#160;<span class=\"keyword\">struct </span><a class=\"code\" href=\"a00359.html\">hwloc_component</a> {</div>\n<div class=\"line\"><a name=\"l00263\"></a><span class=\"lineno\"><a class=\"line\" href=\"a00359.html#a3250bd6fc9713946991d805e48091b2e\">  263</a></span>&#160;  <span class=\"keywordtype\">unsigned</span> <a class=\"code\" href=\"a00359.html#a3250bd6fc9713946991d805e48091b2e\">abi</a>;</div>\n<div class=\"line\"><a name=\"l00264\"></a><span class=\"lineno\">  264</span>&#160; </div>\n<div class=\"line\"><a name=\"l00282\"></a><span class=\"lineno\"><a class=\"line\" href=\"a00359.html#aea613546886d9b8221cadba920fe3ebc\">  282</a></span>&#160;  int (*<a class=\"code\" href=\"a00359.html#aea613546886d9b8221cadba920fe3ebc\">init</a>)(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">long</span> <a class=\"code\" href=\"a00359.html#ab8043c5b4cc0e81aabba586ccb194335\">flags</a>);</div>\n<div class=\"line\"><a name=\"l00283\"></a><span class=\"lineno\">  283</span>&#160; </div>\n<div class=\"line\"><a name=\"l00295\"></a><span class=\"lineno\"><a class=\"line\" href=\"a00359.html#a4612015451a1c706e8ba19114cb8baae\">  295</a></span>&#160;  void (*<a class=\"code\" href=\"a00359.html#a4612015451a1c706e8ba19114cb8baae\">finalize</a>)(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">long</span> <a class=\"code\" href=\"a00359.html#ab8043c5b4cc0e81aabba586ccb194335\">flags</a>);</div>\n<div class=\"line\"><a name=\"l00296\"></a><span class=\"lineno\">  296</span>&#160; </div>\n<div class=\"line\"><a name=\"l00298\"></a><span class=\"lineno\"><a class=\"line\" href=\"a00359.html#a789208ada7e17492cfd3a5a88a6bb0ee\">  298</a></span>&#160;  <a class=\"code\" href=\"a00222.html#ga31a5a455f4e666b936f0a9e8fb9a0f47\">hwloc_component_type_t</a> <a class=\"code\" href=\"a00359.html#a789208ada7e17492cfd3a5a88a6bb0ee\">type</a>;</div>\n<div class=\"line\"><a name=\"l00299\"></a><span class=\"lineno\">  299</span>&#160; </div>\n<div class=\"line\"><a name=\"l00301\"></a><span class=\"lineno\"><a class=\"line\" href=\"a00359.html#ab8043c5b4cc0e81aabba586ccb194335\">  301</a></span>&#160;  <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">long</span> <a class=\"code\" href=\"a00359.html#ab8043c5b4cc0e81aabba586ccb194335\">flags</a>;</div>\n<div class=\"line\"><a name=\"l00302\"></a><span class=\"lineno\">  302</span>&#160; </div>\n<div class=\"line\"><a name=\"l00304\"></a><span class=\"lineno\"><a class=\"line\" href=\"a00359.html#a4b8cffd1d943c29fdc102b841b8598d4\">  304</a></span>&#160;  <span class=\"keywordtype\">void</span> * <a class=\"code\" href=\"a00359.html#a4b8cffd1d943c29fdc102b841b8598d4\">data</a>;</div>\n<div class=\"line\"><a name=\"l00305\"></a><span class=\"lineno\">  305</span>&#160;};</div>\n<div class=\"line\"><a name=\"l00306\"></a><span class=\"lineno\">  306</span>&#160; </div>\n<div class=\"line\"><a name=\"l00340\"></a><span class=\"lineno\">  340</span>&#160;HWLOC_DECLSPEC <span class=\"keyword\">struct </span><a class=\"code\" href=\"a00231.html\">hwloc_obj</a> *<a class=\"code\" href=\"a00223.html#gafd853fd67e12c32916201d8303ef39d2\">hwloc_insert_object_by_cpuset</a>(<span class=\"keyword\">struct</span> hwloc_topology *topology, <a class=\"code\" href=\"a00231.html\">hwloc_obj_t</a> obj);</div>\n<div class=\"line\"><a name=\"l00341\"></a><span class=\"lineno\">  341</span>&#160; </div>\n<div class=\"line\"><a name=\"l00343\"></a><span class=\"lineno\"><a class=\"line\" href=\"a00223.html#ga1ac8191022b0d3b1bf0070e11d1f1155\">  343</a></span>&#160;<span class=\"keyword\">typedef</span> void (*<a class=\"code\" href=\"a00223.html#ga1ac8191022b0d3b1bf0070e11d1f1155\">hwloc_report_error_t</a>)(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> * msg, <span class=\"keywordtype\">int</span> line);</div>\n<div class=\"line\"><a name=\"l00345\"></a><span class=\"lineno\">  345</span>&#160;HWLOC_DECLSPEC <span class=\"keywordtype\">void</span> <a class=\"code\" href=\"a00223.html#ga3ae154590328522a864f4a7fb453b562\">hwloc_report_os_error</a>(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> * msg, <span class=\"keywordtype\">int</span> line);</div>\n<div class=\"line\"><a name=\"l00347\"></a><span class=\"lineno\">  347</span>&#160;HWLOC_DECLSPEC <span class=\"keywordtype\">int</span> <a class=\"code\" href=\"a00223.html#gab527c1e0f243f057d31a724794ad9f88\">hwloc_hide_errors</a>(<span class=\"keywordtype\">void</span>);</div>\n<div class=\"line\"><a name=\"l00348\"></a><span class=\"lineno\">  348</span>&#160; </div>\n<div class=\"line\"><a name=\"l00355\"></a><span class=\"lineno\">  355</span>&#160;HWLOC_DECLSPEC <span class=\"keyword\">struct </span><a class=\"code\" href=\"a00231.html\">hwloc_obj</a> *<a class=\"code\" href=\"a00223.html#ga9f789a1bd5d5d45e1c0e26305164248b\">hwloc__insert_object_by_cpuset</a>(<span class=\"keyword\">struct</span> hwloc_topology *topology, <a class=\"code\" href=\"a00231.html\">hwloc_obj_t</a> root, <a class=\"code\" href=\"a00231.html\">hwloc_obj_t</a> obj, <a class=\"code\" href=\"a00223.html#ga1ac8191022b0d3b1bf0070e11d1f1155\">hwloc_report_error_t</a> report_error);</div>\n<div class=\"line\"><a name=\"l00356\"></a><span class=\"lineno\">  356</span>&#160; </div>\n<div class=\"line\"><a name=\"l00373\"></a><span class=\"lineno\">  373</span>&#160;HWLOC_DECLSPEC <span class=\"keywordtype\">void</span> <a class=\"code\" href=\"a00223.html#ga0ef97debde503b56367689b07bb3e901\">hwloc_insert_object_by_parent</a>(<span class=\"keyword\">struct</span> hwloc_topology *topology, <a class=\"code\" href=\"a00231.html\">hwloc_obj_t</a> <a class=\"code\" href=\"a00231.html#adc494f6aed939992be1c55cca5822900\">parent</a>, <a class=\"code\" href=\"a00231.html\">hwloc_obj_t</a> obj);</div>\n<div class=\"line\"><a name=\"l00374\"></a><span class=\"lineno\">  374</span>&#160; </div>\n<div class=\"line\"><a name=\"l00379\"></a><span class=\"lineno\">  379</span>&#160;HWLOC_DECLSPEC <a class=\"code\" href=\"a00231.html\">hwloc_obj_t</a> <a class=\"code\" href=\"a00223.html#ga0b5c75b2dc37cea2e8a29c4812baf4b3\">hwloc_alloc_setup_object</a>(<a class=\"code\" href=\"a00183.html#ga9d1e76ee15a7dee158b786c30b6a6e38\">hwloc_topology_t</a> topology, <a class=\"code\" href=\"a00181.html#gacd37bb612667dc437d66bfb175a8dc55\">hwloc_obj_type_t</a> <a class=\"code\" href=\"a00231.html#acc4f0803f244867e68fe0036800be5de\">type</a>, <span class=\"keywordtype\">unsigned</span> <a class=\"code\" href=\"a00231.html#a61a7a80a68eaccbaaa28269e678c81a9\">os_index</a>);</div>\n<div class=\"line\"><a name=\"l00380\"></a><span class=\"lineno\">  380</span>&#160; </div>\n<div class=\"line\"><a name=\"l00389\"></a><span class=\"lineno\">  389</span>&#160;HWLOC_DECLSPEC <span class=\"keywordtype\">int</span> <a class=\"code\" href=\"a00223.html#ga754b61041ceee9685534a2c5d3cd0156\">hwloc_obj_add_children_sets</a>(<a class=\"code\" href=\"a00231.html\">hwloc_obj_t</a> obj);</div>\n<div class=\"line\"><a name=\"l00390\"></a><span class=\"lineno\">  390</span>&#160; </div>\n<div class=\"line\"><a name=\"l00398\"></a><span class=\"lineno\">  398</span>&#160;HWLOC_DECLSPEC <span class=\"keywordtype\">int</span> <a class=\"code\" href=\"a00223.html#ga120d8bd74922e1030b621409a6b0be61\">hwloc_topology_reconnect</a>(<a class=\"code\" href=\"a00183.html#ga9d1e76ee15a7dee158b786c30b6a6e38\">hwloc_topology_t</a> topology, <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">long</span> flags __hwloc_attribute_unused);</div>\n<div class=\"line\"><a name=\"l00399\"></a><span class=\"lineno\">  399</span>&#160; </div>\n<div class=\"line\"><a name=\"l00421\"></a><span class=\"lineno\">  421</span>&#160;<span class=\"keyword\">static</span> __hwloc_inline <span class=\"keywordtype\">int</span></div>\n<div class=\"line\"><a name=\"l00422\"></a><span class=\"lineno\"><a class=\"line\" href=\"a00223.html#gac2eaed287bb215cf0bd33014e9e1d374\">  422</a></span>&#160;<a class=\"code\" href=\"a00223.html#gac2eaed287bb215cf0bd33014e9e1d374\">hwloc_plugin_check_namespace</a>(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> *pluginname __hwloc_attribute_unused, <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> *symbol __hwloc_attribute_unused)</div>\n<div class=\"line\"><a name=\"l00423\"></a><span class=\"lineno\">  423</span>&#160;{</div>\n<div class=\"line\"><a name=\"l00424\"></a><span class=\"lineno\">  424</span>&#160;<span class=\"preprocessor\">#ifdef HWLOC_INSIDE_PLUGIN</span></div>\n<div class=\"line\"><a name=\"l00425\"></a><span class=\"lineno\">  425</span>&#160;  <span class=\"keywordtype\">void</span> *sym;</div>\n<div class=\"line\"><a name=\"l00426\"></a><span class=\"lineno\">  426</span>&#160;<span class=\"preprocessor\">#ifdef HWLOC_HAVE_LTDL</span></div>\n<div class=\"line\"><a name=\"l00427\"></a><span class=\"lineno\">  427</span>&#160;  lt_dlhandle handle = lt_dlopen(NULL);</div>\n<div class=\"line\"><a name=\"l00428\"></a><span class=\"lineno\">  428</span>&#160;<span class=\"preprocessor\">#else</span></div>\n<div class=\"line\"><a name=\"l00429\"></a><span class=\"lineno\">  429</span>&#160;  <span class=\"keywordtype\">void</span> *handle = dlopen(NULL, RTLD_NOW|RTLD_LOCAL);</div>\n<div class=\"line\"><a name=\"l00430\"></a><span class=\"lineno\">  430</span>&#160;<span class=\"preprocessor\">#endif</span></div>\n<div class=\"line\"><a name=\"l00431\"></a><span class=\"lineno\">  431</span>&#160;  <span class=\"keywordflow\">if</span> (!handle)</div>\n<div class=\"line\"><a name=\"l00432\"></a><span class=\"lineno\">  432</span>&#160;    <span class=\"comment\">/* cannot check, assume things will work */</span></div>\n<div class=\"line\"><a name=\"l00433\"></a><span class=\"lineno\">  433</span>&#160;    <span class=\"keywordflow\">return</span> 0;</div>\n<div class=\"line\"><a name=\"l00434\"></a><span class=\"lineno\">  434</span>&#160;<span class=\"preprocessor\">#ifdef HWLOC_HAVE_LTDL</span></div>\n<div class=\"line\"><a name=\"l00435\"></a><span class=\"lineno\">  435</span>&#160;  sym = lt_dlsym(handle, symbol);</div>\n<div class=\"line\"><a name=\"l00436\"></a><span class=\"lineno\">  436</span>&#160;  lt_dlclose(handle);</div>\n<div class=\"line\"><a name=\"l00437\"></a><span class=\"lineno\">  437</span>&#160;<span class=\"preprocessor\">#else</span></div>\n<div class=\"line\"><a name=\"l00438\"></a><span class=\"lineno\">  438</span>&#160;  sym = dlsym(handle, symbol);</div>\n<div class=\"line\"><a name=\"l00439\"></a><span class=\"lineno\">  439</span>&#160;  dlclose(handle);</div>\n<div class=\"line\"><a name=\"l00440\"></a><span class=\"lineno\">  440</span>&#160;<span class=\"preprocessor\">#endif</span></div>\n<div class=\"line\"><a name=\"l00441\"></a><span class=\"lineno\">  441</span>&#160;  <span class=\"keywordflow\">if</span> (!sym) {</div>\n<div class=\"line\"><a name=\"l00442\"></a><span class=\"lineno\">  442</span>&#160;    <span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> verboseenv_checked = 0;</div>\n<div class=\"line\"><a name=\"l00443\"></a><span class=\"lineno\">  443</span>&#160;    <span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> verboseenv_value = 0;</div>\n<div class=\"line\"><a name=\"l00444\"></a><span class=\"lineno\">  444</span>&#160;    <span class=\"keywordflow\">if</span> (!verboseenv_checked) {</div>\n<div class=\"line\"><a name=\"l00445\"></a><span class=\"lineno\">  445</span>&#160;      <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> *verboseenv = getenv(<span class=\"stringliteral\">&quot;HWLOC_PLUGINS_VERBOSE&quot;</span>);</div>\n<div class=\"line\"><a name=\"l00446\"></a><span class=\"lineno\">  446</span>&#160;      verboseenv_value = verboseenv ? atoi(verboseenv) : 0;</div>\n<div class=\"line\"><a name=\"l00447\"></a><span class=\"lineno\">  447</span>&#160;      verboseenv_checked = 1;</div>\n<div class=\"line\"><a name=\"l00448\"></a><span class=\"lineno\">  448</span>&#160;    }</div>\n<div class=\"line\"><a name=\"l00449\"></a><span class=\"lineno\">  449</span>&#160;    <span class=\"keywordflow\">if</span> (verboseenv_value)</div>\n<div class=\"line\"><a name=\"l00450\"></a><span class=\"lineno\">  450</span>&#160;      fprintf(stderr, <span class=\"stringliteral\">&quot;Plugin `%s&#39; disabling itself because it cannot find the `%s&#39; core symbol.\\n&quot;</span>,</div>\n<div class=\"line\"><a name=\"l00451\"></a><span class=\"lineno\">  451</span>&#160;              pluginname, symbol);</div>\n<div class=\"line\"><a name=\"l00452\"></a><span class=\"lineno\">  452</span>&#160;    <span class=\"keywordflow\">return</span> -1;</div>\n<div class=\"line\"><a name=\"l00453\"></a><span class=\"lineno\">  453</span>&#160;  }</div>\n<div class=\"line\"><a name=\"l00454\"></a><span class=\"lineno\">  454</span>&#160;<span class=\"preprocessor\">#endif </span><span class=\"comment\">/* HWLOC_INSIDE_PLUGIN */</span><span class=\"preprocessor\"></span></div>\n<div class=\"line\"><a name=\"l00455\"></a><span class=\"lineno\">  455</span>&#160;  <span class=\"keywordflow\">return</span> 0;</div>\n<div class=\"line\"><a name=\"l00456\"></a><span class=\"lineno\">  456</span>&#160;}</div>\n<div class=\"line\"><a name=\"l00457\"></a><span class=\"lineno\">  457</span>&#160; </div>\n<div class=\"line\"><a name=\"l00471\"></a><span class=\"lineno\">  471</span>&#160;<span class=\"keyword\">static</span> __hwloc_inline <span class=\"keywordtype\">int</span></div>\n<div class=\"line\"><a name=\"l00472\"></a><span class=\"lineno\"><a class=\"line\" href=\"a00224.html#ga60203db6459ebf275bf48c40a37661a0\">  472</a></span>&#160;<a class=\"code\" href=\"a00224.html#ga60203db6459ebf275bf48c40a37661a0\">hwloc_filter_check_pcidev_subtype_important</a>(<span class=\"keywordtype\">unsigned</span> classid)</div>\n<div class=\"line\"><a name=\"l00473\"></a><span class=\"lineno\">  473</span>&#160;{</div>\n<div class=\"line\"><a name=\"l00474\"></a><span class=\"lineno\">  474</span>&#160;  <span class=\"keywordtype\">unsigned</span> baseclass = classid &gt;&gt; 8;</div>\n<div class=\"line\"><a name=\"l00475\"></a><span class=\"lineno\">  475</span>&#160;  <span class=\"keywordflow\">return</span> (baseclass == 0x03 <span class=\"comment\">/* PCI_BASE_CLASS_DISPLAY */</span></div>\n<div class=\"line\"><a name=\"l00476\"></a><span class=\"lineno\">  476</span>&#160;          || baseclass == 0x02 <span class=\"comment\">/* PCI_BASE_CLASS_NETWORK */</span></div>\n<div class=\"line\"><a name=\"l00477\"></a><span class=\"lineno\">  477</span>&#160;          || baseclass == 0x01 <span class=\"comment\">/* PCI_BASE_CLASS_STORAGE */</span></div>\n<div class=\"line\"><a name=\"l00478\"></a><span class=\"lineno\">  478</span>&#160;          || baseclass == 0x0b <span class=\"comment\">/* PCI_BASE_CLASS_PROCESSOR */</span></div>\n<div class=\"line\"><a name=\"l00479\"></a><span class=\"lineno\">  479</span>&#160;          || classid == 0x0c04 <span class=\"comment\">/* PCI_CLASS_SERIAL_FIBER */</span></div>\n<div class=\"line\"><a name=\"l00480\"></a><span class=\"lineno\">  480</span>&#160;          || classid == 0x0c06 <span class=\"comment\">/* PCI_CLASS_SERIAL_INFINIBAND */</span></div>\n<div class=\"line\"><a name=\"l00481\"></a><span class=\"lineno\">  481</span>&#160;          || baseclass == 0x12 <span class=\"comment\">/* Processing Accelerators */</span>);</div>\n<div class=\"line\"><a name=\"l00482\"></a><span class=\"lineno\">  482</span>&#160;}</div>\n<div class=\"line\"><a name=\"l00483\"></a><span class=\"lineno\">  483</span>&#160; </div>\n<div class=\"line\"><a name=\"l00488\"></a><span class=\"lineno\">  488</span>&#160;<span class=\"keyword\">static</span> __hwloc_inline <span class=\"keywordtype\">int</span></div>\n<div class=\"line\"><a name=\"l00489\"></a><span class=\"lineno\"><a class=\"line\" href=\"a00224.html#gac7d57a6d669820f360cf2a070a396560\">  489</a></span>&#160;<a class=\"code\" href=\"a00224.html#gac7d57a6d669820f360cf2a070a396560\">hwloc_filter_check_osdev_subtype_important</a>(<a class=\"code\" href=\"a00181.html#gaa9a6941ef7b1c169412518d7ef71b3d2\">hwloc_obj_osdev_type_t</a> <a class=\"code\" href=\"a00231.html#a5d4f97e76723a9ec8d38046f19e00d33\">subtype</a>)</div>\n<div class=\"line\"><a name=\"l00490\"></a><span class=\"lineno\">  490</span>&#160;{</div>\n<div class=\"line\"><a name=\"l00491\"></a><span class=\"lineno\">  491</span>&#160;  <span class=\"keywordflow\">return</span> (<a class=\"code\" href=\"a00231.html#a5d4f97e76723a9ec8d38046f19e00d33\">subtype</a> != <a class=\"code\" href=\"a00181.html#gga64f5d539df299c97ae80ce53fc4b56c0a827ad1643360711a8b6c6af671366791\">HWLOC_OBJ_OSDEV_DMA</a>);</div>\n<div class=\"line\"><a name=\"l00492\"></a><span class=\"lineno\">  492</span>&#160;}</div>\n<div class=\"line\"><a name=\"l00493\"></a><span class=\"lineno\">  493</span>&#160; </div>\n<div class=\"line\"><a name=\"l00500\"></a><span class=\"lineno\">  500</span>&#160;<span class=\"keyword\">static</span> __hwloc_inline <span class=\"keywordtype\">int</span></div>\n<div class=\"line\"><a name=\"l00501\"></a><span class=\"lineno\"><a class=\"line\" href=\"a00224.html#ga2f402a43025a8a91e8513be1a15e4635\">  501</a></span>&#160;<a class=\"code\" href=\"a00224.html#ga2f402a43025a8a91e8513be1a15e4635\">hwloc_filter_check_keep_object_type</a>(<a class=\"code\" href=\"a00183.html#ga9d1e76ee15a7dee158b786c30b6a6e38\">hwloc_topology_t</a> topology, <a class=\"code\" href=\"a00181.html#gacd37bb612667dc437d66bfb175a8dc55\">hwloc_obj_type_t</a> <a class=\"code\" href=\"a00231.html#acc4f0803f244867e68fe0036800be5de\">type</a>)</div>\n<div class=\"line\"><a name=\"l00502\"></a><span class=\"lineno\">  502</span>&#160;{</div>\n<div class=\"line\"><a name=\"l00503\"></a><span class=\"lineno\">  503</span>&#160;  <span class=\"keyword\">enum</span> <a class=\"code\" href=\"a00190.html#ga9a5a1f0140cd1952544477833733195b\">hwloc_type_filter_e</a> filter = <a class=\"code\" href=\"a00190.html#gga9a5a1f0140cd1952544477833733195ba4f835955414de92c77d99b8419d4647a\">HWLOC_TYPE_FILTER_KEEP_NONE</a>;</div>\n<div class=\"line\"><a name=\"l00504\"></a><span class=\"lineno\">  504</span>&#160;  <a class=\"code\" href=\"a00190.html#ga137ad1178f7a79f2383974d983083401\">hwloc_topology_get_type_filter</a>(topology, <a class=\"code\" href=\"a00231.html#acc4f0803f244867e68fe0036800be5de\">type</a>, &amp;filter);</div>\n<div class=\"line\"><a name=\"l00505\"></a><span class=\"lineno\">  505</span>&#160;  assert(filter != <a class=\"code\" href=\"a00190.html#gga9a5a1f0140cd1952544477833733195ba63fd24954e18c83ff7eae9588759adb5\">HWLOC_TYPE_FILTER_KEEP_IMPORTANT</a>); <span class=\"comment\">/* IMPORTANT only used for I/O */</span></div>\n<div class=\"line\"><a name=\"l00506\"></a><span class=\"lineno\">  506</span>&#160;  <span class=\"keywordflow\">return</span> filter == <a class=\"code\" href=\"a00190.html#gga9a5a1f0140cd1952544477833733195ba4f835955414de92c77d99b8419d4647a\">HWLOC_TYPE_FILTER_KEEP_NONE</a> ? 0 : 1;</div>\n<div class=\"line\"><a name=\"l00507\"></a><span class=\"lineno\">  507</span>&#160;}</div>\n<div class=\"line\"><a name=\"l00508\"></a><span class=\"lineno\">  508</span>&#160; </div>\n<div class=\"line\"><a name=\"l00513\"></a><span class=\"lineno\">  513</span>&#160;<span class=\"keyword\">static</span> __hwloc_inline <span class=\"keywordtype\">int</span></div>\n<div class=\"line\"><a name=\"l00514\"></a><span class=\"lineno\"><a class=\"line\" href=\"a00224.html#ga4d2fdce071e5646ef147c9ff1539d1c9\">  514</a></span>&#160;<a class=\"code\" href=\"a00224.html#ga4d2fdce071e5646ef147c9ff1539d1c9\">hwloc_filter_check_keep_object</a>(<a class=\"code\" href=\"a00183.html#ga9d1e76ee15a7dee158b786c30b6a6e38\">hwloc_topology_t</a> topology, <a class=\"code\" href=\"a00231.html\">hwloc_obj_t</a> obj)</div>\n<div class=\"line\"><a name=\"l00515\"></a><span class=\"lineno\">  515</span>&#160;{</div>\n<div class=\"line\"><a name=\"l00516\"></a><span class=\"lineno\">  516</span>&#160;  <a class=\"code\" href=\"a00181.html#gacd37bb612667dc437d66bfb175a8dc55\">hwloc_obj_type_t</a> <a class=\"code\" href=\"a00231.html#acc4f0803f244867e68fe0036800be5de\">type</a> = obj-&gt;<a class=\"code\" href=\"a00231.html#acc4f0803f244867e68fe0036800be5de\">type</a>;</div>\n<div class=\"line\"><a name=\"l00517\"></a><span class=\"lineno\">  517</span>&#160;  <span class=\"keyword\">enum</span> <a class=\"code\" href=\"a00190.html#ga9a5a1f0140cd1952544477833733195b\">hwloc_type_filter_e</a> filter = <a class=\"code\" href=\"a00190.html#gga9a5a1f0140cd1952544477833733195ba4f835955414de92c77d99b8419d4647a\">HWLOC_TYPE_FILTER_KEEP_NONE</a>;</div>\n<div class=\"line\"><a name=\"l00518\"></a><span class=\"lineno\">  518</span>&#160;  <a class=\"code\" href=\"a00190.html#ga137ad1178f7a79f2383974d983083401\">hwloc_topology_get_type_filter</a>(topology, <a class=\"code\" href=\"a00231.html#acc4f0803f244867e68fe0036800be5de\">type</a>, &amp;filter);</div>\n<div class=\"line\"><a name=\"l00519\"></a><span class=\"lineno\">  519</span>&#160;  <span class=\"keywordflow\">if</span> (filter == <a class=\"code\" href=\"a00190.html#gga9a5a1f0140cd1952544477833733195ba4f835955414de92c77d99b8419d4647a\">HWLOC_TYPE_FILTER_KEEP_NONE</a>)</div>\n<div class=\"line\"><a name=\"l00520\"></a><span class=\"lineno\">  520</span>&#160;    <span class=\"keywordflow\">return</span> 0;</div>\n<div class=\"line\"><a name=\"l00521\"></a><span class=\"lineno\">  521</span>&#160;  <span class=\"keywordflow\">if</span> (filter == <a class=\"code\" href=\"a00190.html#gga9a5a1f0140cd1952544477833733195ba63fd24954e18c83ff7eae9588759adb5\">HWLOC_TYPE_FILTER_KEEP_IMPORTANT</a>) {</div>\n<div class=\"line\"><a name=\"l00522\"></a><span class=\"lineno\">  522</span>&#160;    <span class=\"keywordflow\">if</span> (<a class=\"code\" href=\"a00231.html#acc4f0803f244867e68fe0036800be5de\">type</a> == <a class=\"code\" href=\"a00181.html#ggacd37bb612667dc437d66bfb175a8dc55a5d8117a54df1fbd3606ab19e42cb0ea9\">HWLOC_OBJ_PCI_DEVICE</a>)</div>\n<div class=\"line\"><a name=\"l00523\"></a><span class=\"lineno\">  523</span>&#160;      <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"a00224.html#ga60203db6459ebf275bf48c40a37661a0\">hwloc_filter_check_pcidev_subtype_important</a>(obj-&gt;<a class=\"code\" href=\"a00231.html#accd40e29f71f19e88db62ea3df02adc8\">attr</a>-&gt;<a class=\"code\" href=\"a00235.html#a0b66da7ab072f7c016f8ed86701f5a7c\">pcidev</a>.<a class=\"code\" href=\"a00255.html#aee735352d9f1686fd290fc6d6397c334\">class_id</a>);</div>\n<div class=\"line\"><a name=\"l00524\"></a><span class=\"lineno\">  524</span>&#160;    <span class=\"keywordflow\">if</span> (<a class=\"code\" href=\"a00231.html#acc4f0803f244867e68fe0036800be5de\">type</a> == <a class=\"code\" href=\"a00181.html#ggacd37bb612667dc437d66bfb175a8dc55a51e7280240fd9f25589cbbe538bdb075\">HWLOC_OBJ_OS_DEVICE</a>)</div>\n<div class=\"line\"><a name=\"l00525\"></a><span class=\"lineno\">  525</span>&#160;      <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"a00224.html#gac7d57a6d669820f360cf2a070a396560\">hwloc_filter_check_osdev_subtype_important</a>(obj-&gt;<a class=\"code\" href=\"a00231.html#accd40e29f71f19e88db62ea3df02adc8\">attr</a>-&gt;<a class=\"code\" href=\"a00235.html#aaf7a5c38b5185703ff18c46ad2761dcf\">osdev</a>.<a class=\"code\" href=\"a00275.html#a31e019e27e54ac6138d04be639bb96f9\">type</a>);</div>\n<div class=\"line\"><a name=\"l00526\"></a><span class=\"lineno\">  526</span>&#160;  }</div>\n<div class=\"line\"><a name=\"l00527\"></a><span class=\"lineno\">  527</span>&#160;  <span class=\"keywordflow\">return</span> 1;</div>\n<div class=\"line\"><a name=\"l00528\"></a><span class=\"lineno\">  528</span>&#160;}</div>\n<div class=\"line\"><a name=\"l00529\"></a><span class=\"lineno\">  529</span>&#160; </div>\n<div class=\"line\"><a name=\"l00543\"></a><span class=\"lineno\">  543</span>&#160;HWLOC_DECLSPEC <span class=\"keywordtype\">unsigned</span> <a class=\"code\" href=\"a00225.html#ga706f71cfea09d547d2cbafa642d6e03b\">hwloc_pcidisc_find_cap</a>(<span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">char</span> *config, <span class=\"keywordtype\">unsigned</span> cap);</div>\n<div class=\"line\"><a name=\"l00544\"></a><span class=\"lineno\">  544</span>&#160; </div>\n<div class=\"line\"><a name=\"l00550\"></a><span class=\"lineno\">  550</span>&#160;HWLOC_DECLSPEC <span class=\"keywordtype\">int</span> <a class=\"code\" href=\"a00225.html#ga51d1ebcbf9729987c9d17df3aa57d209\">hwloc_pcidisc_find_linkspeed</a>(<span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">char</span> *config, <span class=\"keywordtype\">unsigned</span> offset, <span class=\"keywordtype\">float</span> *linkspeed);</div>\n<div class=\"line\"><a name=\"l00551\"></a><span class=\"lineno\">  551</span>&#160; </div>\n<div class=\"line\"><a name=\"l00556\"></a><span class=\"lineno\">  556</span>&#160;HWLOC_DECLSPEC <a class=\"code\" href=\"a00181.html#gacd37bb612667dc437d66bfb175a8dc55\">hwloc_obj_type_t</a> <a class=\"code\" href=\"a00225.html#ga6c55fb80c3d0c8c8e61078b3f38adde8\">hwloc_pcidisc_check_bridge_type</a>(<span class=\"keywordtype\">unsigned</span> device_class, <span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">char</span> *config);</div>\n<div class=\"line\"><a name=\"l00557\"></a><span class=\"lineno\">  557</span>&#160; </div>\n<div class=\"line\"><a name=\"l00564\"></a><span class=\"lineno\">  564</span>&#160;HWLOC_DECLSPEC <span class=\"keywordtype\">int</span> <a class=\"code\" href=\"a00225.html#ga95acf6822a49447c11067d0b843965ba\">hwloc_pcidisc_find_bridge_buses</a>(<span class=\"keywordtype\">unsigned</span> domain, <span class=\"keywordtype\">unsigned</span> bus, <span class=\"keywordtype\">unsigned</span> dev, <span class=\"keywordtype\">unsigned</span> func,</div>\n<div class=\"line\"><a name=\"l00565\"></a><span class=\"lineno\">  565</span>&#160;                                                   <span class=\"keywordtype\">unsigned</span> *secondary_busp, <span class=\"keywordtype\">unsigned</span> *subordinate_busp,</div>\n<div class=\"line\"><a name=\"l00566\"></a><span class=\"lineno\">  566</span>&#160;                                                   <span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">char</span> *config);</div>\n<div class=\"line\"><a name=\"l00567\"></a><span class=\"lineno\">  567</span>&#160; </div>\n<div class=\"line\"><a name=\"l00572\"></a><span class=\"lineno\">  572</span>&#160;HWLOC_DECLSPEC <span class=\"keywordtype\">void</span> <a class=\"code\" href=\"a00225.html#gab76ddc4f55db8101ef0d44317965128c\">hwloc_pcidisc_tree_insert_by_busid</a>(<span class=\"keyword\">struct</span> <a class=\"code\" href=\"a00231.html\">hwloc_obj</a> **treep, <span class=\"keyword\">struct</span> <a class=\"code\" href=\"a00231.html\">hwloc_obj</a> *obj);</div>\n<div class=\"line\"><a name=\"l00573\"></a><span class=\"lineno\">  573</span>&#160; </div>\n<div class=\"line\"><a name=\"l00579\"></a><span class=\"lineno\">  579</span>&#160;HWLOC_DECLSPEC <span class=\"keywordtype\">int</span> <a class=\"code\" href=\"a00225.html#gabda1d6c1799e50b9226f8a4da9bd29ea\">hwloc_pcidisc_tree_attach</a>(<span class=\"keyword\">struct</span> hwloc_topology *topology, <span class=\"keyword\">struct</span> <a class=\"code\" href=\"a00231.html\">hwloc_obj</a> *tree);</div>\n<div class=\"line\"><a name=\"l00580\"></a><span class=\"lineno\">  580</span>&#160; </div>\n<div class=\"line\"><a name=\"l00597\"></a><span class=\"lineno\">  597</span>&#160;HWLOC_DECLSPEC <span class=\"keyword\">struct </span><a class=\"code\" href=\"a00231.html\">hwloc_obj</a> * <a class=\"code\" href=\"a00226.html#ga7964833550947636ab8975909de3fa98\">hwloc_pci_find_parent_by_busid</a>(<span class=\"keyword\">struct</span> hwloc_topology *topology, <span class=\"keywordtype\">unsigned</span> domain, <span class=\"keywordtype\">unsigned</span> bus, <span class=\"keywordtype\">unsigned</span> dev, <span class=\"keywordtype\">unsigned</span> func);</div>\n<div class=\"line\"><a name=\"l00598\"></a><span class=\"lineno\">  598</span>&#160; </div>\n<div class=\"line\"><a name=\"l00604\"></a><span class=\"lineno\">  604</span>&#160;<span class=\"preprocessor\">#endif </span><span class=\"comment\">/* HWLOC_PLUGINS_H */</span><span class=\"preprocessor\"></span></div>\n</div><!-- fragment --></div><!-- contents -->\n<div class=\"ttc\" id=\"aa00355_html_aaa8eafe495aadd81c2e3c4ec527c10ba\"><div class=\"ttname\"><a href=\"a00355.html#aaa8eafe495aadd81c2e3c4ec527c10ba\">hwloc_backend::flags</a></div><div class=\"ttdeci\">unsigned long flags</div><div class=\"ttdoc\">Backend flags, currently always 0.</div><div class=\"ttdef\"><b>Definition:</b> plugins.h:199</div></div>\n<div class=\"ttc\" id=\"aa00181_html_gaa9a6941ef7b1c169412518d7ef71b3d2\"><div class=\"ttname\"><a href=\"a00181.html#gaa9a6941ef7b1c169412518d7ef71b3d2\">hwloc_obj_osdev_type_t</a></div><div class=\"ttdeci\">enum hwloc_obj_osdev_type_e hwloc_obj_osdev_type_t</div><div class=\"ttdoc\">Type of a OS device.</div></div>\n<div class=\"ttc\" id=\"aa00355_html_accff2cd8404be43c3b44cec05e6f609b\"><div class=\"ttname\"><a href=\"a00355.html#accff2cd8404be43c3b44cec05e6f609b\">hwloc_backend::discover</a></div><div class=\"ttdeci\">int(* discover)(struct hwloc_backend *backend, struct hwloc_disc_status *status)</div><div class=\"ttdoc\">Main discovery callback. returns -1 on error, either because it couldn't add its objects ot the exist...</div><div class=\"ttdef\"><b>Definition:</b> plugins.h:221</div></div>\n<div class=\"ttc\" id=\"aa00221_html_ga8c314121c2fc478161bcce758688b9a1\"><div class=\"ttname\"><a href=\"a00221.html#ga8c314121c2fc478161bcce758688b9a1\">hwloc_disc_phase_e</a></div><div class=\"ttdeci\">hwloc_disc_phase_e</div><div class=\"ttdoc\">Discovery phase.</div><div class=\"ttdef\"><b>Definition:</b> plugins.h:100</div></div>\n<div class=\"ttc\" id=\"aa00226_html_ga7964833550947636ab8975909de3fa98\"><div class=\"ttname\"><a href=\"a00226.html#ga7964833550947636ab8975909de3fa98\">hwloc_pci_find_parent_by_busid</a></div><div class=\"ttdeci\">struct hwloc_obj * hwloc_pci_find_parent_by_busid(struct hwloc_topology *topology, unsigned domain, unsigned bus, unsigned dev, unsigned func)</div><div class=\"ttdoc\">Find the normal parent of a PCI bus ID.</div></div>\n<div class=\"ttc\" id=\"aa00181_html_ggacd37bb612667dc437d66bfb175a8dc55a5d8117a54df1fbd3606ab19e42cb0ea9\"><div class=\"ttname\"><a href=\"a00181.html#ggacd37bb612667dc437d66bfb175a8dc55a5d8117a54df1fbd3606ab19e42cb0ea9\">HWLOC_OBJ_PCI_DEVICE</a></div><div class=\"ttdeci\">@ HWLOC_OBJ_PCI_DEVICE</div><div class=\"ttdoc\">PCI device (filtered out by default). They are not added to the topology unless I/O discovery is enab...</div><div class=\"ttdef\"><b>Definition:</b> hwloc.h:266</div></div>\n<div class=\"ttc\" id=\"aa00225_html_gab76ddc4f55db8101ef0d44317965128c\"><div class=\"ttname\"><a href=\"a00225.html#gab76ddc4f55db8101ef0d44317965128c\">hwloc_pcidisc_tree_insert_by_busid</a></div><div class=\"ttdeci\">void hwloc_pcidisc_tree_insert_by_busid(struct hwloc_obj **treep, struct hwloc_obj *obj)</div><div class=\"ttdoc\">Insert a PCI object in the given PCI tree by looking at PCI bus IDs.</div></div>\n<div class=\"ttc\" id=\"aa00223_html_ga0ef97debde503b56367689b07bb3e901\"><div class=\"ttname\"><a href=\"a00223.html#ga0ef97debde503b56367689b07bb3e901\">hwloc_insert_object_by_parent</a></div><div class=\"ttdeci\">void hwloc_insert_object_by_parent(struct hwloc_topology *topology, hwloc_obj_t parent, hwloc_obj_t obj)</div><div class=\"ttdoc\">Insert an object somewhere in the topology.</div></div>\n<div class=\"ttc\" id=\"aa00223_html_ga3ae154590328522a864f4a7fb453b562\"><div class=\"ttname\"><a href=\"a00223.html#ga3ae154590328522a864f4a7fb453b562\">hwloc_report_os_error</a></div><div class=\"ttdeci\">void hwloc_report_os_error(const char *msg, int line)</div><div class=\"ttdoc\">Report an insertion error from a backend.</div></div>\n<div class=\"ttc\" id=\"aa00351_html_ad8b123cecb945a9182eb824ccf8ef9d7\"><div class=\"ttname\"><a href=\"a00351.html#ad8b123cecb945a9182eb824ccf8ef9d7\">hwloc_disc_status::flags</a></div><div class=\"ttdeci\">unsigned long flags</div><div class=\"ttdoc\">OR'ed set of hwloc_disc_status_flag_e.</div><div class=\"ttdef\"><b>Definition:</b> plugins.h:162</div></div>\n<div class=\"ttc\" id=\"aa00225_html_ga6c55fb80c3d0c8c8e61078b3f38adde8\"><div class=\"ttname\"><a href=\"a00225.html#ga6c55fb80c3d0c8c8e61078b3f38adde8\">hwloc_pcidisc_check_bridge_type</a></div><div class=\"ttdeci\">hwloc_obj_type_t hwloc_pcidisc_check_bridge_type(unsigned device_class, const unsigned char *config)</div><div class=\"ttdoc\">Return the hwloc object type (PCI device or Bridge) for the given class and configuration space.</div></div>\n<div class=\"ttc\" id=\"aa00224_html_ga60203db6459ebf275bf48c40a37661a0\"><div class=\"ttname\"><a href=\"a00224.html#ga60203db6459ebf275bf48c40a37661a0\">hwloc_filter_check_pcidev_subtype_important</a></div><div class=\"ttdeci\">static int hwloc_filter_check_pcidev_subtype_important(unsigned classid)</div><div class=\"ttdoc\">Check whether the given PCI device classid is important.</div><div class=\"ttdef\"><b>Definition:</b> plugins.h:472</div></div>\n<div class=\"ttc\" id=\"aa00275_html_a31e019e27e54ac6138d04be639bb96f9\"><div class=\"ttname\"><a href=\"a00275.html#a31e019e27e54ac6138d04be639bb96f9\">hwloc_obj_attr_u::hwloc_osdev_attr_s::type</a></div><div class=\"ttdeci\">hwloc_obj_osdev_type_t type</div><div class=\"ttdef\"><b>Definition:</b> hwloc.h:652</div></div>\n<div class=\"ttc\" id=\"aa00231_html_a61a7a80a68eaccbaaa28269e678c81a9\"><div class=\"ttname\"><a href=\"a00231.html#a61a7a80a68eaccbaaa28269e678c81a9\">hwloc_obj::os_index</a></div><div class=\"ttdeci\">unsigned os_index</div><div class=\"ttdoc\">OS-provided physical index number. It is not guaranteed unique across the entire machine,...</div><div class=\"ttdef\"><b>Definition:</b> hwloc.h:389</div></div>\n<div class=\"ttc\" id=\"aa00359_html_a789208ada7e17492cfd3a5a88a6bb0ee\"><div class=\"ttname\"><a href=\"a00359.html#a789208ada7e17492cfd3a5a88a6bb0ee\">hwloc_component::type</a></div><div class=\"ttdeci\">hwloc_component_type_t type</div><div class=\"ttdoc\">Component type.</div><div class=\"ttdef\"><b>Definition:</b> plugins.h:298</div></div>\n<div class=\"ttc\" id=\"aa00347_html_a4064c3b5d9213027e87caebef380a840\"><div class=\"ttname\"><a href=\"a00347.html#a4064c3b5d9213027e87caebef380a840\">hwloc_disc_component::name</a></div><div class=\"ttdeci\">const char * name</div><div class=\"ttdoc\">Name. If this component is built as a plugin, this name does not have to match the plugin filename.</div><div class=\"ttdef\"><b>Definition:</b> plugins.h:42</div></div>\n<div class=\"ttc\" id=\"aa00221_html_gga8c314121c2fc478161bcce758688b9a1ab41c626c79e9ccb1e7d41e7076972283\"><div class=\"ttname\"><a href=\"a00221.html#gga8c314121c2fc478161bcce758688b9a1ab41c626c79e9ccb1e7d41e7076972283\">HWLOC_DISC_PHASE_GLOBAL</a></div><div class=\"ttdeci\">@ HWLOC_DISC_PHASE_GLOBAL</div><div class=\"ttdoc\">xml or synthetic, platform-specific components such as bgq. Discovers everything including CPU,...</div><div class=\"ttdef\"><b>Definition:</b> plugins.h:105</div></div>\n<div class=\"ttc\" id=\"aa00235_html_aaf7a5c38b5185703ff18c46ad2761dcf\"><div class=\"ttname\"><a href=\"a00235.html#aaf7a5c38b5185703ff18c46ad2761dcf\">hwloc_obj_attr_u::osdev</a></div><div class=\"ttdeci\">struct hwloc_obj_attr_u::hwloc_osdev_attr_s osdev</div></div>\n<div class=\"ttc\" id=\"aa00255_html_aee735352d9f1686fd290fc6d6397c334\"><div class=\"ttname\"><a href=\"a00255.html#aee735352d9f1686fd290fc6d6397c334\">hwloc_obj_attr_u::hwloc_pcidev_attr_s::class_id</a></div><div class=\"ttdeci\">unsigned short class_id</div><div class=\"ttdef\"><b>Definition:</b> hwloc.h:626</div></div>\n<div class=\"ttc\" id=\"aa00231_html_acc4f0803f244867e68fe0036800be5de\"><div class=\"ttname\"><a href=\"a00231.html#acc4f0803f244867e68fe0036800be5de\">hwloc_obj::type</a></div><div class=\"ttdeci\">hwloc_obj_type_t type</div><div class=\"ttdoc\">Type of object.</div><div class=\"ttdef\"><b>Definition:</b> hwloc.h:386</div></div>\n<div class=\"ttc\" id=\"aa00225_html_ga706f71cfea09d547d2cbafa642d6e03b\"><div class=\"ttname\"><a href=\"a00225.html#ga706f71cfea09d547d2cbafa642d6e03b\">hwloc_pcidisc_find_cap</a></div><div class=\"ttdeci\">unsigned hwloc_pcidisc_find_cap(const unsigned char *config, unsigned cap)</div><div class=\"ttdoc\">Return the offset of the given capability in the PCI config space buffer.</div></div>\n<div class=\"ttc\" id=\"aa00231_html_accd40e29f71f19e88db62ea3df02adc8\"><div class=\"ttname\"><a href=\"a00231.html#accd40e29f71f19e88db62ea3df02adc8\">hwloc_obj::attr</a></div><div class=\"ttdeci\">union hwloc_obj_attr_u * attr</div><div class=\"ttdoc\">Object type-specific Attributes, may be NULL if no attribute value was found.</div><div class=\"ttdef\"><b>Definition:</b> hwloc.h:403</div></div>\n<div class=\"ttc\" id=\"aa00181_html_ggacd37bb612667dc437d66bfb175a8dc55a51e7280240fd9f25589cbbe538bdb075\"><div class=\"ttname\"><a href=\"a00181.html#ggacd37bb612667dc437d66bfb175a8dc55a51e7280240fd9f25589cbbe538bdb075\">HWLOC_OBJ_OS_DEVICE</a></div><div class=\"ttdeci\">@ HWLOC_OBJ_OS_DEVICE</div><div class=\"ttdoc\">Operating system device (filtered out by default). They are not added to the topology unless I/O disc...</div><div class=\"ttdef\"><b>Definition:</b> hwloc.h:273</div></div>\n<div class=\"ttc\" id=\"aa00224_html_ga4d2fdce071e5646ef147c9ff1539d1c9\"><div class=\"ttname\"><a href=\"a00224.html#ga4d2fdce071e5646ef147c9ff1539d1c9\">hwloc_filter_check_keep_object</a></div><div class=\"ttdeci\">static int hwloc_filter_check_keep_object(hwloc_topology_t topology, hwloc_obj_t obj)</div><div class=\"ttdoc\">Check whether the given object should be filtered-out.</div><div class=\"ttdef\"><b>Definition:</b> plugins.h:514</div></div>\n<div class=\"ttc\" id=\"aa00183_html_ga9d1e76ee15a7dee158b786c30b6a6e38\"><div class=\"ttname\"><a href=\"a00183.html#ga9d1e76ee15a7dee158b786c30b6a6e38\">hwloc_topology_t</a></div><div class=\"ttdeci\">struct hwloc_topology * hwloc_topology_t</div><div class=\"ttdoc\">Topology context.</div><div class=\"ttdef\"><b>Definition:</b> hwloc.h:678</div></div>\n<div class=\"ttc\" id=\"aa00222_html_ga397a1bf7d21dd073320ad0045340f463\"><div class=\"ttname\"><a href=\"a00222.html#ga397a1bf7d21dd073320ad0045340f463\">hwloc_component_type_e</a></div><div class=\"ttdeci\">hwloc_component_type_e</div><div class=\"ttdoc\">Generic component type.</div><div class=\"ttdef\"><b>Definition:</b> plugins.h:248</div></div>\n<div class=\"ttc\" id=\"aa00359_html_ab8043c5b4cc0e81aabba586ccb194335\"><div class=\"ttname\"><a href=\"a00359.html#ab8043c5b4cc0e81aabba586ccb194335\">hwloc_component::flags</a></div><div class=\"ttdeci\">unsigned long flags</div><div class=\"ttdoc\">Component flags, unused for now.</div><div class=\"ttdef\"><b>Definition:</b> plugins.h:301</div></div>\n<div class=\"ttc\" id=\"aa00359_html\"><div class=\"ttname\"><a href=\"a00359.html\">hwloc_component</a></div><div class=\"ttdoc\">Generic component structure.</div><div class=\"ttdef\"><b>Definition:</b> plugins.h:261</div></div>\n<div class=\"ttc\" id=\"aa00225_html_ga51d1ebcbf9729987c9d17df3aa57d209\"><div class=\"ttname\"><a href=\"a00225.html#ga51d1ebcbf9729987c9d17df3aa57d209\">hwloc_pcidisc_find_linkspeed</a></div><div class=\"ttdeci\">int hwloc_pcidisc_find_linkspeed(const unsigned char *config, unsigned offset, float *linkspeed)</div><div class=\"ttdoc\">Fill linkspeed by reading the PCI config space where PCI_CAP_ID_EXP is at position offset.</div></div>\n<div class=\"ttc\" id=\"aa00202_html_gaa3c2bf4c776d603dcebbb61b0c923d84\"><div class=\"ttname\"><a href=\"a00202.html#gaa3c2bf4c776d603dcebbb61b0c923d84\">hwloc_bitmap_t</a></div><div class=\"ttdeci\">struct hwloc_bitmap_s * hwloc_bitmap_t</div><div class=\"ttdoc\">Set of bits represented as an opaque pointer to an internal bitmap.</div><div class=\"ttdef\"><b>Definition:</b> bitmap.h:68</div></div>\n<div class=\"ttc\" id=\"aa00224_html_ga2f402a43025a8a91e8513be1a15e4635\"><div class=\"ttname\"><a href=\"a00224.html#ga2f402a43025a8a91e8513be1a15e4635\">hwloc_filter_check_keep_object_type</a></div><div class=\"ttdeci\">static int hwloc_filter_check_keep_object_type(hwloc_topology_t topology, hwloc_obj_type_t type)</div><div class=\"ttdoc\">Check whether a non-I/O object type should be filtered-out.</div><div class=\"ttdef\"><b>Definition:</b> plugins.h:501</div></div>\n<div class=\"ttc\" id=\"aa00355_html_a36c4fa86350525b46340c67b802c69c7\"><div class=\"ttname\"><a href=\"a00355.html#a36c4fa86350525b46340c67b802c69c7\">hwloc_backend::disable</a></div><div class=\"ttdeci\">void(* disable)(struct hwloc_backend *backend)</div><div class=\"ttdoc\">Callback for freeing the private_data. May be NULL.</div><div class=\"ttdef\"><b>Definition:</b> plugins.h:214</div></div>\n<div class=\"ttc\" id=\"aa00225_html_gabda1d6c1799e50b9226f8a4da9bd29ea\"><div class=\"ttname\"><a href=\"a00225.html#gabda1d6c1799e50b9226f8a4da9bd29ea\">hwloc_pcidisc_tree_attach</a></div><div class=\"ttdeci\">int hwloc_pcidisc_tree_attach(struct hwloc_topology *topology, struct hwloc_obj *tree)</div><div class=\"ttdoc\">Add some hostbridges on top of the given tree of PCI objects and attach them to the topology.</div></div>\n<div class=\"ttc\" id=\"aa00231_html\"><div class=\"ttname\"><a href=\"a00231.html\">hwloc_obj</a></div><div class=\"ttdoc\">Structure of a topology object.</div><div class=\"ttdef\"><b>Definition:</b> hwloc.h:384</div></div>\n<div class=\"ttc\" id=\"aa00221_html_gga8c314121c2fc478161bcce758688b9a1a68ca5c7ad75a6d9e5355689411621773\"><div class=\"ttname\"><a href=\"a00221.html#gga8c314121c2fc478161bcce758688b9a1a68ca5c7ad75a6d9e5355689411621773\">HWLOC_DISC_PHASE_ANNOTATE</a></div><div class=\"ttdeci\">@ HWLOC_DISC_PHASE_ANNOTATE</div><div class=\"ttdoc\">Annotating existing objects, adding distances, etc.</div><div class=\"ttdef\"><b>Definition:</b> plugins.h:129</div></div>\n<div class=\"ttc\" id=\"aa00223_html_gafd853fd67e12c32916201d8303ef39d2\"><div class=\"ttname\"><a href=\"a00223.html#gafd853fd67e12c32916201d8303ef39d2\">hwloc_insert_object_by_cpuset</a></div><div class=\"ttdeci\">struct hwloc_obj * hwloc_insert_object_by_cpuset(struct hwloc_topology *topology, hwloc_obj_t obj)</div><div class=\"ttdoc\">Add an object to the topology.</div></div>\n<div class=\"ttc\" id=\"aa00223_html_ga9f789a1bd5d5d45e1c0e26305164248b\"><div class=\"ttname\"><a href=\"a00223.html#ga9f789a1bd5d5d45e1c0e26305164248b\">hwloc__insert_object_by_cpuset</a></div><div class=\"ttdeci\">struct hwloc_obj * hwloc__insert_object_by_cpuset(struct hwloc_topology *topology, hwloc_obj_t root, hwloc_obj_t obj, hwloc_report_error_t report_error)</div><div class=\"ttdoc\">Add an object to the topology and specify which error callback to use.</div></div>\n<div class=\"ttc\" id=\"aa00222_html_gga397a1bf7d21dd073320ad0045340f463adea00cd839c2141c032e1569fd5592bd\"><div class=\"ttname\"><a href=\"a00222.html#gga397a1bf7d21dd073320ad0045340f463adea00cd839c2141c032e1569fd5592bd\">HWLOC_COMPONENT_TYPE_XML</a></div><div class=\"ttdeci\">@ HWLOC_COMPONENT_TYPE_XML</div><div class=\"ttdoc\">The data field must point to a struct hwloc_xml_component.</div><div class=\"ttdef\"><b>Definition:</b> plugins.h:253</div></div>\n<div class=\"ttc\" id=\"aa00221_html_gaae1b38cf9b12e489884ce2a07275964b\"><div class=\"ttname\"><a href=\"a00221.html#gaae1b38cf9b12e489884ce2a07275964b\">hwloc_disc_status_flag_e</a></div><div class=\"ttdeci\">hwloc_disc_status_flag_e</div><div class=\"ttdoc\">Discovery status flags.</div><div class=\"ttdef\"><b>Definition:</b> plugins.h:140</div></div>\n<div class=\"ttc\" id=\"aa00355_html\"><div class=\"ttname\"><a href=\"a00355.html\">hwloc_backend</a></div><div class=\"ttdoc\">Discovery backend structure.</div><div class=\"ttdef\"><b>Definition:</b> plugins.h:183</div></div>\n<div class=\"ttc\" id=\"aa00221_html_gga8c314121c2fc478161bcce758688b9a1a677c52064dd987af4988346319b3675a\"><div class=\"ttname\"><a href=\"a00221.html#gga8c314121c2fc478161bcce758688b9a1a677c52064dd987af4988346319b3675a\">HWLOC_DISC_PHASE_PCI</a></div><div class=\"ttdeci\">@ HWLOC_DISC_PHASE_PCI</div><div class=\"ttdoc\">Attach PCI devices and bridges to existing CPU objects.</div><div class=\"ttdef\"><b>Definition:</b> plugins.h:117</div></div>\n<div class=\"ttc\" id=\"aa00221_html_gga8c314121c2fc478161bcce758688b9a1ac4264a243844c5fbbff495cdb1b4d51d\"><div class=\"ttname\"><a href=\"a00221.html#gga8c314121c2fc478161bcce758688b9a1ac4264a243844c5fbbff495cdb1b4d51d\">HWLOC_DISC_PHASE_MEMORY</a></div><div class=\"ttdeci\">@ HWLOC_DISC_PHASE_MEMORY</div><div class=\"ttdoc\">Attach memory to existing CPU objects.</div><div class=\"ttdef\"><b>Definition:</b> plugins.h:113</div></div>\n<div class=\"ttc\" id=\"aa00355_html_aeca769840a6ff03e96462a9533adbccd\"><div class=\"ttname\"><a href=\"a00355.html#aeca769840a6ff03e96462a9533adbccd\">hwloc_backend::phases</a></div><div class=\"ttdeci\">unsigned phases</div><div class=\"ttdoc\">Discovery phases performed by this component, possibly without some of them if excluded by other comp...</div><div class=\"ttdef\"><b>Definition:</b> plugins.h:196</div></div>\n<div class=\"ttc\" id=\"aa00359_html_a3250bd6fc9713946991d805e48091b2e\"><div class=\"ttname\"><a href=\"a00359.html#a3250bd6fc9713946991d805e48091b2e\">hwloc_component::abi</a></div><div class=\"ttdeci\">unsigned abi</div><div class=\"ttdoc\">Component ABI version, set to HWLOC_COMPONENT_ABI.</div><div class=\"ttdef\"><b>Definition:</b> plugins.h:263</div></div>\n<div class=\"ttc\" id=\"aa00231_html_adc494f6aed939992be1c55cca5822900\"><div class=\"ttname\"><a href=\"a00231.html#adc494f6aed939992be1c55cca5822900\">hwloc_obj::parent</a></div><div class=\"ttdeci\">struct hwloc_obj * parent</div><div class=\"ttdoc\">Parent, NULL if root (Machine object)</div><div class=\"ttdef\"><b>Definition:</b> hwloc.h:434</div></div>\n<div class=\"ttc\" id=\"aa00221_html_gga8c314121c2fc478161bcce758688b9a1a8a7cde9bff0ab0d085b102a3e934939b\"><div class=\"ttname\"><a href=\"a00221.html#gga8c314121c2fc478161bcce758688b9a1a8a7cde9bff0ab0d085b102a3e934939b\">HWLOC_DISC_PHASE_MISC</a></div><div class=\"ttdeci\">@ HWLOC_DISC_PHASE_MISC</div><div class=\"ttdoc\">Misc objects that gets added below anything else.</div><div class=\"ttdef\"><b>Definition:</b> plugins.h:125</div></div>\n<div class=\"ttc\" id=\"aa00190_html_gga9a5a1f0140cd1952544477833733195ba63fd24954e18c83ff7eae9588759adb5\"><div class=\"ttname\"><a href=\"a00190.html#gga9a5a1f0140cd1952544477833733195ba63fd24954e18c83ff7eae9588759adb5\">HWLOC_TYPE_FILTER_KEEP_IMPORTANT</a></div><div class=\"ttdeci\">@ HWLOC_TYPE_FILTER_KEEP_IMPORTANT</div><div class=\"ttdoc\">Only keep likely-important objects of the given type.</div><div class=\"ttdef\"><b>Definition:</b> hwloc.h:2120</div></div>\n<div class=\"ttc\" id=\"aa00359_html_a4612015451a1c706e8ba19114cb8baae\"><div class=\"ttname\"><a href=\"a00359.html#a4612015451a1c706e8ba19114cb8baae\">hwloc_component::finalize</a></div><div class=\"ttdeci\">void(* finalize)(unsigned long flags)</div><div class=\"ttdoc\">Process-wide component termination callback.</div><div class=\"ttdef\"><b>Definition:</b> plugins.h:295</div></div>\n<div class=\"ttc\" id=\"aa00235_html_a0b66da7ab072f7c016f8ed86701f5a7c\"><div class=\"ttname\"><a href=\"a00235.html#a0b66da7ab072f7c016f8ed86701f5a7c\">hwloc_obj_attr_u::pcidev</a></div><div class=\"ttdeci\">struct hwloc_obj_attr_u::hwloc_pcidev_attr_s pcidev</div></div>\n<div class=\"ttc\" id=\"aa00221_html_gadb068565ab6043cbe4d16bfcce067a61\"><div class=\"ttname\"><a href=\"a00221.html#gadb068565ab6043cbe4d16bfcce067a61\">hwloc_backend_alloc</a></div><div class=\"ttdeci\">struct hwloc_backend * hwloc_backend_alloc(struct hwloc_topology *topology, struct hwloc_disc_component *component)</div><div class=\"ttdoc\">Allocate a backend structure, set good default values, initialize backend-&gt;component and topology,...</div></div>\n<div class=\"ttc\" id=\"aa00223_html_ga1ac8191022b0d3b1bf0070e11d1f1155\"><div class=\"ttname\"><a href=\"a00223.html#ga1ac8191022b0d3b1bf0070e11d1f1155\">hwloc_report_error_t</a></div><div class=\"ttdeci\">void(* hwloc_report_error_t)(const char *msg, int line)</div><div class=\"ttdoc\">Type of error callbacks during object insertion.</div><div class=\"ttdef\"><b>Definition:</b> plugins.h:343</div></div>\n<div class=\"ttc\" id=\"aa00181_html_gga64f5d539df299c97ae80ce53fc4b56c0a827ad1643360711a8b6c6af671366791\"><div class=\"ttname\"><a href=\"a00181.html#gga64f5d539df299c97ae80ce53fc4b56c0a827ad1643360711a8b6c6af671366791\">HWLOC_OBJ_OSDEV_DMA</a></div><div class=\"ttdeci\">@ HWLOC_OBJ_OSDEV_DMA</div><div class=\"ttdoc\">Operating system dma engine device. For instance the &quot;dma0chan0&quot; DMA channel on Linux.</div><div class=\"ttdef\"><b>Definition:</b> hwloc.h:338</div></div>\n<div class=\"ttc\" id=\"aa00190_html_ga137ad1178f7a79f2383974d983083401\"><div class=\"ttname\"><a href=\"a00190.html#ga137ad1178f7a79f2383974d983083401\">hwloc_topology_get_type_filter</a></div><div class=\"ttdeci\">int hwloc_topology_get_type_filter(hwloc_topology_t topology, hwloc_obj_type_t type, enum hwloc_type_filter_e *filter)</div><div class=\"ttdoc\">Get the current filtering for the given object type.</div></div>\n<div class=\"ttc\" id=\"aa00190_html_ga9a5a1f0140cd1952544477833733195b\"><div class=\"ttname\"><a href=\"a00190.html#ga9a5a1f0140cd1952544477833733195b\">hwloc_type_filter_e</a></div><div class=\"ttdeci\">hwloc_type_filter_e</div><div class=\"ttdoc\">Type filtering flags.</div><div class=\"ttdef\"><b>Definition:</b> hwloc.h:2077</div></div>\n<div class=\"ttc\" id=\"aa00181_html_gacd37bb612667dc437d66bfb175a8dc55\"><div class=\"ttname\"><a href=\"a00181.html#gacd37bb612667dc437d66bfb175a8dc55\">hwloc_obj_type_t</a></div><div class=\"ttdeci\">hwloc_obj_type_t</div><div class=\"ttdoc\">Type of topology object.</div><div class=\"ttdef\"><b>Definition:</b> hwloc.h:176</div></div>\n<div class=\"ttc\" id=\"aa00224_html_gac7d57a6d669820f360cf2a070a396560\"><div class=\"ttname\"><a href=\"a00224.html#gac7d57a6d669820f360cf2a070a396560\">hwloc_filter_check_osdev_subtype_important</a></div><div class=\"ttdeci\">static int hwloc_filter_check_osdev_subtype_important(hwloc_obj_osdev_type_t subtype)</div><div class=\"ttdoc\">Check whether the given OS device subtype is important.</div><div class=\"ttdef\"><b>Definition:</b> plugins.h:489</div></div>\n<div class=\"ttc\" id=\"aa00221_html_ga600bba1a62022d5f516800649b1edb61\"><div class=\"ttname\"><a href=\"a00221.html#ga600bba1a62022d5f516800649b1edb61\">hwloc_disc_phase_t</a></div><div class=\"ttdeci\">enum hwloc_disc_phase_e hwloc_disc_phase_t</div><div class=\"ttdoc\">Discovery phase.</div></div>\n<div class=\"ttc\" id=\"aa00347_html_acbb9957914dbf7b8f504215aa0c8d3fe\"><div class=\"ttname\"><a href=\"a00347.html#acbb9957914dbf7b8f504215aa0c8d3fe\">hwloc_disc_component::excluded_phases</a></div><div class=\"ttdeci\">unsigned excluded_phases</div><div class=\"ttdoc\">Component phases to exclude, as an OR'ed set of hwloc_disc_phase_t.</div><div class=\"ttdef\"><b>Definition:</b> plugins.h:57</div></div>\n<div class=\"ttc\" id=\"aa00351_html_abaf7c8c082d43e133171f0723dbf824b\"><div class=\"ttname\"><a href=\"a00351.html#abaf7c8c082d43e133171f0723dbf824b\">hwloc_disc_status::phase</a></div><div class=\"ttdeci\">hwloc_disc_phase_t phase</div><div class=\"ttdoc\">The current discovery phase that is performed. Must match one of the phases in the component phases f...</div><div class=\"ttdef\"><b>Definition:</b> plugins.h:154</div></div>\n<div class=\"ttc\" id=\"aa00231_html_a5d4f97e76723a9ec8d38046f19e00d33\"><div class=\"ttname\"><a href=\"a00231.html#a5d4f97e76723a9ec8d38046f19e00d33\">hwloc_obj::subtype</a></div><div class=\"ttdeci\">char * subtype</div><div class=\"ttdoc\">Subtype string to better describe the type field.</div><div class=\"ttdef\"><b>Definition:</b> hwloc.h:387</div></div>\n<div class=\"ttc\" id=\"aa00347_html\"><div class=\"ttname\"><a href=\"a00347.html\">hwloc_disc_component</a></div><div class=\"ttdoc\">Discovery component structure.</div><div class=\"ttdef\"><b>Definition:</b> plugins.h:38</div></div>\n<div class=\"ttc\" id=\"aa00221_html_gga8c314121c2fc478161bcce758688b9a1ada3ed3f00e74909353d6ea4a96cde5ad\"><div class=\"ttname\"><a href=\"a00221.html#gga8c314121c2fc478161bcce758688b9a1ada3ed3f00e74909353d6ea4a96cde5ad\">HWLOC_DISC_PHASE_TWEAK</a></div><div class=\"ttdeci\">@ HWLOC_DISC_PHASE_TWEAK</div><div class=\"ttdoc\">Final tweaks to a ready-to-use topology. This phase runs once the topology is loaded,...</div><div class=\"ttdef\"><b>Definition:</b> plugins.h:136</div></div>\n<div class=\"ttc\" id=\"aa00221_html_ggaae1b38cf9b12e489884ce2a07275964ba205d644d54a0840bd9165fce7d19e6b1\"><div class=\"ttname\"><a href=\"a00221.html#ggaae1b38cf9b12e489884ce2a07275964ba205d644d54a0840bd9165fce7d19e6b1\">HWLOC_DISC_STATUS_FLAG_GOT_ALLOWED_RESOURCES</a></div><div class=\"ttdeci\">@ HWLOC_DISC_STATUS_FLAG_GOT_ALLOWED_RESOURCES</div><div class=\"ttdoc\">The sets of allowed resources were already retrieved.</div><div class=\"ttdef\"><b>Definition:</b> plugins.h:142</div></div>\n<div class=\"ttc\" id=\"aa00355_html_aaac253491264c20930f44817270bc502\"><div class=\"ttname\"><a href=\"a00355.html#aaac253491264c20930f44817270bc502\">hwloc_backend::get_pci_busid_cpuset</a></div><div class=\"ttdeci\">int(* get_pci_busid_cpuset)(struct hwloc_backend *backend, struct hwloc_pcidev_attr_s *busid, hwloc_bitmap_t cpuset)</div><div class=\"ttdoc\">Callback to retrieve the locality of a PCI object. Called by the PCI core when attaching PCI hierarch...</div><div class=\"ttdef\"><b>Definition:</b> plugins.h:227</div></div>\n<div class=\"ttc\" id=\"aa00225_html_ga95acf6822a49447c11067d0b843965ba\"><div class=\"ttname\"><a href=\"a00225.html#ga95acf6822a49447c11067d0b843965ba\">hwloc_pcidisc_find_bridge_buses</a></div><div class=\"ttdeci\">int hwloc_pcidisc_find_bridge_buses(unsigned domain, unsigned bus, unsigned dev, unsigned func, unsigned *secondary_busp, unsigned *subordinate_busp, const unsigned char *config)</div><div class=\"ttdoc\">Fills the attributes of the given PCI bridge using the given PCI config space.</div></div>\n<div class=\"ttc\" id=\"aa00223_html_ga0b5c75b2dc37cea2e8a29c4812baf4b3\"><div class=\"ttname\"><a href=\"a00223.html#ga0b5c75b2dc37cea2e8a29c4812baf4b3\">hwloc_alloc_setup_object</a></div><div class=\"ttdeci\">hwloc_obj_t hwloc_alloc_setup_object(hwloc_topology_t topology, hwloc_obj_type_t type, unsigned os_index)</div><div class=\"ttdoc\">Allocate and initialize an object of the given type and physical index.</div></div>\n<div class=\"ttc\" id=\"aa00347_html_a61ad3151efa02e3dbad5d919758f9c90\"><div class=\"ttname\"><a href=\"a00347.html#a61ad3151efa02e3dbad5d919758f9c90\">hwloc_disc_component::phases</a></div><div class=\"ttdeci\">unsigned phases</div><div class=\"ttdoc\">Discovery phases performed by this component. OR'ed set of hwloc_disc_phase_t.</div><div class=\"ttdef\"><b>Definition:</b> plugins.h:47</div></div>\n<div class=\"ttc\" id=\"aa00222_html_gga397a1bf7d21dd073320ad0045340f463a5d6e561f467fe9795a29e7368b613900\"><div class=\"ttname\"><a href=\"a00222.html#gga397a1bf7d21dd073320ad0045340f463a5d6e561f467fe9795a29e7368b613900\">HWLOC_COMPONENT_TYPE_DISC</a></div><div class=\"ttdeci\">@ HWLOC_COMPONENT_TYPE_DISC</div><div class=\"ttdoc\">The data field must point to a struct hwloc_disc_component.</div><div class=\"ttdef\"><b>Definition:</b> plugins.h:250</div></div>\n<div class=\"ttc\" id=\"aa00190_html_gga9a5a1f0140cd1952544477833733195ba4f835955414de92c77d99b8419d4647a\"><div class=\"ttname\"><a href=\"a00190.html#gga9a5a1f0140cd1952544477833733195ba4f835955414de92c77d99b8419d4647a\">HWLOC_TYPE_FILTER_KEEP_NONE</a></div><div class=\"ttdeci\">@ HWLOC_TYPE_FILTER_KEEP_NONE</div><div class=\"ttdoc\">Ignore all objects of this type.</div><div class=\"ttdef\"><b>Definition:</b> hwloc.h:2091</div></div>\n<div class=\"ttc\" id=\"aa00223_html_gac2eaed287bb215cf0bd33014e9e1d374\"><div class=\"ttname\"><a href=\"a00223.html#gac2eaed287bb215cf0bd33014e9e1d374\">hwloc_plugin_check_namespace</a></div><div class=\"ttdeci\">static int hwloc_plugin_check_namespace(const char *pluginname, const char *symbol)</div><div class=\"ttdoc\">Make sure that plugins can lookup core symbols.</div><div class=\"ttdef\"><b>Definition:</b> plugins.h:422</div></div>\n<div class=\"ttc\" id=\"aa00221_html_gga8c314121c2fc478161bcce758688b9a1a6360474df197027761a69bd5fc620250\"><div class=\"ttname\"><a href=\"a00221.html#gga8c314121c2fc478161bcce758688b9a1a6360474df197027761a69bd5fc620250\">HWLOC_DISC_PHASE_CPU</a></div><div class=\"ttdeci\">@ HWLOC_DISC_PHASE_CPU</div><div class=\"ttdoc\">CPU discovery.</div><div class=\"ttdef\"><b>Definition:</b> plugins.h:109</div></div>\n<div class=\"ttc\" id=\"aa00221_html_ga4715779d7191833e9b1a7490989a7497\"><div class=\"ttname\"><a href=\"a00221.html#ga4715779d7191833e9b1a7490989a7497\">hwloc_backend_enable</a></div><div class=\"ttdeci\">int hwloc_backend_enable(struct hwloc_backend *backend)</div><div class=\"ttdoc\">Enable a previously allocated and setup backend.</div></div>\n<div class=\"ttc\" id=\"aa00359_html_a4b8cffd1d943c29fdc102b841b8598d4\"><div class=\"ttname\"><a href=\"a00359.html#a4b8cffd1d943c29fdc102b841b8598d4\">hwloc_component::data</a></div><div class=\"ttdeci\">void * data</div><div class=\"ttdoc\">Component data, pointing to a struct hwloc_disc_component or struct hwloc_xml_component.</div><div class=\"ttdef\"><b>Definition:</b> plugins.h:304</div></div>\n<div class=\"ttc\" id=\"aa00223_html_gab527c1e0f243f057d31a724794ad9f88\"><div class=\"ttname\"><a href=\"a00223.html#gab527c1e0f243f057d31a724794ad9f88\">hwloc_hide_errors</a></div><div class=\"ttdeci\">int hwloc_hide_errors(void)</div><div class=\"ttdoc\">Check whether insertion errors are hidden.</div></div>\n<div class=\"ttc\" id=\"aa00221_html_gga8c314121c2fc478161bcce758688b9a1aa8e10626cba9af72f5605a1acbdc0015\"><div class=\"ttname\"><a href=\"a00221.html#gga8c314121c2fc478161bcce758688b9a1aa8e10626cba9af72f5605a1acbdc0015\">HWLOC_DISC_PHASE_IO</a></div><div class=\"ttdeci\">@ HWLOC_DISC_PHASE_IO</div><div class=\"ttdoc\">I/O discovery that requires PCI devices (OS devices such as OpenCL, CUDA, etc.).</div><div class=\"ttdef\"><b>Definition:</b> plugins.h:121</div></div>\n<div class=\"ttc\" id=\"aa00351_html_a0f95fa42d46a6e7cf8dee8af12afee3a\"><div class=\"ttname\"><a href=\"a00351.html#a0f95fa42d46a6e7cf8dee8af12afee3a\">hwloc_disc_status::excluded_phases</a></div><div class=\"ttdeci\">unsigned excluded_phases</div><div class=\"ttdoc\">Dynamically excluded phases. If a component decides during discovery that some phases are no longer n...</div><div class=\"ttdef\"><b>Definition:</b> plugins.h:159</div></div>\n<div class=\"ttc\" id=\"aa00355_html_a2ea5bd36b7f06efdb65b98b32af16c68\"><div class=\"ttname\"><a href=\"a00355.html#a2ea5bd36b7f06efdb65b98b32af16c68\">hwloc_backend::private_data</a></div><div class=\"ttdeci\">void * private_data</div><div class=\"ttdoc\">Backend private data, or NULL if none.</div><div class=\"ttdef\"><b>Definition:</b> plugins.h:210</div></div>\n<div class=\"ttc\" id=\"aa00222_html_ga31a5a455f4e666b936f0a9e8fb9a0f47\"><div class=\"ttname\"><a href=\"a00222.html#ga31a5a455f4e666b936f0a9e8fb9a0f47\">hwloc_component_type_t</a></div><div class=\"ttdeci\">enum hwloc_component_type_e hwloc_component_type_t</div><div class=\"ttdoc\">Generic component type.</div></div>\n<div class=\"ttc\" id=\"aa00347_html_ace80cafe2b1732b047b3fc3da47e6517\"><div class=\"ttname\"><a href=\"a00347.html#ace80cafe2b1732b047b3fc3da47e6517\">hwloc_disc_component::enabled_by_default</a></div><div class=\"ttdeci\">unsigned enabled_by_default</div><div class=\"ttdoc\">Enabled by default. If unset, if will be disabled unless explicitly requested.</div><div class=\"ttdef\"><b>Definition:</b> plugins.h:81</div></div>\n<div class=\"ttc\" id=\"aa00223_html_ga120d8bd74922e1030b621409a6b0be61\"><div class=\"ttname\"><a href=\"a00223.html#ga120d8bd74922e1030b621409a6b0be61\">hwloc_topology_reconnect</a></div><div class=\"ttdeci\">int hwloc_topology_reconnect(hwloc_topology_t topology, unsigned long flags)</div><div class=\"ttdoc\">Request a reconnection of children and levels in the topology.</div></div>\n<div class=\"ttc\" id=\"aa00351_html\"><div class=\"ttname\"><a href=\"a00351.html\">hwloc_disc_status</a></div><div class=\"ttdoc\">Discovery status structure.</div><div class=\"ttdef\"><b>Definition:</b> plugins.h:150</div></div>\n<div class=\"ttc\" id=\"aa00223_html_ga754b61041ceee9685534a2c5d3cd0156\"><div class=\"ttname\"><a href=\"a00223.html#ga754b61041ceee9685534a2c5d3cd0156\">hwloc_obj_add_children_sets</a></div><div class=\"ttdeci\">int hwloc_obj_add_children_sets(hwloc_obj_t obj)</div><div class=\"ttdoc\">Setup object cpusets/nodesets by OR'ing its children.</div></div>\n<div class=\"ttc\" id=\"aa00355_html_ab8806f6db077f1bb2e9d63ec99223f7a\"><div class=\"ttname\"><a href=\"a00355.html#ab8806f6db077f1bb2e9d63ec99223f7a\">hwloc_backend::is_thissystem</a></div><div class=\"ttdeci\">int is_thissystem</div><div class=\"ttdoc\">Backend-specific 'is_thissystem' property. Set to 0 if the backend disables the thissystem flag for t...</div><div class=\"ttdef\"><b>Definition:</b> plugins.h:207</div></div>\n<div class=\"ttc\" id=\"aa00347_html_ae86d283c272c5ae24073a235efbf6b59\"><div class=\"ttname\"><a href=\"a00347.html#ae86d283c272c5ae24073a235efbf6b59\">hwloc_disc_component::priority</a></div><div class=\"ttdeci\">unsigned priority</div><div class=\"ttdoc\">Component priority. Used to sort topology-&gt;components, higher priority first. Also used to decide bet...</div><div class=\"ttdef\"><b>Definition:</b> plugins.h:76</div></div>\n<div class=\"ttc\" id=\"aa00359_html_aea613546886d9b8221cadba920fe3ebc\"><div class=\"ttname\"><a href=\"a00359.html#aea613546886d9b8221cadba920fe3ebc\">hwloc_component::init</a></div><div class=\"ttdeci\">int(* init)(unsigned long flags)</div><div class=\"ttdoc\">Process-wide component initialization callback.</div><div class=\"ttdef\"><b>Definition:</b> plugins.h:282</div></div>\n<!-- start footer part -->\n<hr class=\"footer\"/><address class=\"footer\"><small>\nGenerated by &#160;<a href=\"http://www.doxygen.org/index.html\">\n<img class=\"footer\" src=\"doxygen.png\" alt=\"doxygen\"/>\n</a> 1.8.17\n</small></address>\n</body>\n</html>\n",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/doc/doxygen-doc/html/a00373.html": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/xhtml;charset=UTF-8\"/>\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=9\"/>\n<meta name=\"generator\" content=\"Doxygen 1.8.17\"/>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"/>\n<title>Hardware Locality (hwloc): Embedding hwloc in Other Software</title>\n<link href=\"tabs.css\" rel=\"stylesheet\" type=\"text/css\"/>\n<script type=\"text/javascript\" src=\"jquery.js\"></script>\n<script type=\"text/javascript\" src=\"dynsections.js\"></script>\n<link href=\"doxygen.css\" rel=\"stylesheet\" type=\"text/css\" />\n</head>\n<body>\n<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n<div id=\"titlearea\">\n<table cellspacing=\"0\" cellpadding=\"0\">\n <tbody>\n <tr style=\"height: 56px;\">\n  <td id=\"projectalign\" style=\"padding-left: 0.5em;\">\n   <div id=\"projectname\">Hardware Locality (hwloc)\n   &#160;<span id=\"projectnumber\">2.2.0</span>\n   </div>\n  </td>\n </tr>\n </tbody>\n</table>\n</div>\n<!-- end header part -->\n<!-- Generated by Doxygen 1.8.17 -->\n<script type=\"text/javascript\" src=\"menudata.js\"></script>\n<script type=\"text/javascript\" src=\"menu.js\"></script>\n<script type=\"text/javascript\">\n/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */\n$(function() {\n  initMenu('',false,false,'search.php','Search');\n});\n/* @license-end */</script>\n<div id=\"main-nav\"></div>\n</div><!-- top -->\n<div class=\"PageDoc\"><div class=\"header\">\n  <div class=\"headertitle\">\n<div class=\"title\">Embedding hwloc in Other Software </div>  </div>\n</div><!--header-->\n<div class=\"contents\">\n<div class=\"textblock\"><p> \n<div class=\"section\">\n</p>\n<p>It can be desirable to include hwloc in a larger software package (be sure to check out the LICENSE file) so that users don't have to separately download and install it before installing your software. This can be advantageous to ensure that your software uses a known-tested/good version of hwloc, or for use on systems that do not have hwloc pre-installed.</p>\n<p>When used in \"embedded\" mode, hwloc will:</p>\n<ul>\n<li>not install any header files</li>\n<li>not build any documentation files</li>\n<li>not build or install any executables or tests</li>\n<li>not build <code>libhwloc.*</code> &ndash; instead, it will build <code>libhwloc_embedded.*</code></li>\n</ul>\n<p>There are two ways to put hwloc into \"embedded\" mode. The first is directly from the configure command line:</p>\n<pre class=\"fragment\">shell$ ./configure --enable-embedded-mode ...\n</pre><p>The second requires that your software project uses the GNU Autoconf / Automake / Libtool tool chain to build your software. If you do this, you can directly integrate hwloc's m4 configure macro into your configure script. You can then invoke hwloc's configuration tests and build setup by calling an m4 macro (see below).</p>\n<p>Although hwloc dynamic shared object plugins may be used in embedded mode, the embedder project will have to manually setup dlopen or libltdl in its build system so that hwloc can load its plugins at run time. Also, embedders should be aware of complications that can arise due to public and private linker namespaces (e.g., if the embedder project is loaded into a private namespace and then hwloc tries to dynamically load its plugins, such loading may fail since the hwloc plugins can't find the hwloc symbols they need). The embedder project is <b>strongly</b> advised not to use hwloc's dynamically loading plugins / dlopen / libltdl capability.</p>\n<p> \n</div><div class=\"section\" id=\"embedding_m4\">\n </p>\n<h1><a class=\"anchor\" id=\"embedding_m4\"></a>\nUsing hwloc's M4 Embedding Capabilities</h1>\n<p>Every project is different, and there are many different ways of integrating hwloc into yours. What follows is <em>one</em> example of how to do it.</p>\n<p>If your project uses recent versions Autoconf, Automake, and Libtool to build, you can use hwloc's embedded m4 capabilities. We have tested the embedded m4 with projects that use Autoconf 2.65, Automake 1.11.1, and Libtool 2.2.6b. Slightly earlier versions of may also work but are untested. Autoconf versions prior to 2.65 are almost certain to not work.</p>\n<p>You can either copy all the config/hwloc*m4 files from the hwloc source tree to the directory where your project's m4 files reside, or you can tell aclocal to find more m4 files in the embedded hwloc's \"config\" subdirectory (e.g., add \"-Ipath/to/embedded/hwloc/config\" to your Makefile.am's ACLOCAL_AMFLAGS).</p>\n<p>The following macros can then be used from your configure script (only HWLOC_SETUP_CORE <em>must</em> be invoked if using the m4 macros):</p>\n<ul>\n<li><p class=\"startli\">HWLOC_SETUP_CORE(config-dir-prefix, action-upon-success, action-upon-failure, print_banner_or_not): Invoke the hwloc configuration tests and setup the hwloc tree to build. The first argument is the prefix to use for AC_OUTPUT files &ndash; it's where the hwloc tree is located relative to <code>$top_srcdir</code>. Hence, if your embedded hwloc is located in the source tree at contrib/hwloc, you should pass <code>[contrib/hwloc]</code> as the first argument. If HWLOC_SETUP_CORE and the rest of <code>configure</code> completes successfully, then \"make\" traversals of the hwloc tree with standard Automake targets (all, clean, install, etc.) should behave as expected. For example, it is safe to list the hwloc directory in the SUBDIRS of a higher-level Makefile.am. The last argument, if not empty, will cause the macro to display an announcement banner that it is starting the hwloc core configuration tests.</p>\n<p class=\"startli\">HWLOC_SETUP_CORE will set the following environment variables and AC_SUBST them: HWLOC_EMBEDDED_CFLAGS, HWLOC_EMBEDDED_CPPFLAGS, and HWLOC_EMBEDDED_LIBS. These flags are filled with the values discovered in the hwloc-specific m4 tests, and can be used in your build process as relevant. The _CFLAGS, _CPPFLAGS, and _LIBS variables are necessary to build libhwloc (or libhwloc_embedded) itself.</p>\n<p class=\"startli\">HWLOC_SETUP_CORE also sets HWLOC_EMBEDDED_LDADD environment variable (and AC_SUBSTs it) to contain the location of the libhwloc_embedded.la convenience Libtool archive. It can be used in your build process to link an application or other library against the embedded hwloc library.</p>\n<p class=\"startli\"><b>NOTE: If the HWLOC_SET_SYMBOL_PREFIX macro is used, it must be invoked <em>before</em> HWLOC_SETUP_CORE.</b></p>\n</li>\n<li>HWLOC_BUILD_STANDALONE: HWLOC_SETUP_CORE defaults to building hwloc in an \"embedded\" mode (described above). If HWLOC_BUILD_STANDALONE is invoked *before* HWLOC_SETUP_CORE, the embedded definitions will not apply (e.g., libhwloc.la will be built, not libhwloc_embedded.la).</li>\n<li>HWLOC_SET_SYMBOL_PREFIX(foo_): Tells the hwloc to prefix all of hwloc's types and public symbols with \"foo_\"; meaning that function hwloc_init() becomes foo_hwloc_init(). Enum values are prefixed with an upper-case translation if the prefix supplied; HWLOC_OBJ_CORE becomes FOO_hwloc_OBJ_CORE. This is recommended behavior if you are including hwloc in middleware &ndash; it is possible that your software will be combined with other software that links to another copy of hwloc. If both uses of hwloc utilize different symbol prefixes, there will be no type/symbol clashes, and everything will compile, link, and run successfully. If you both embed hwloc without changing the symbol prefix and also link against an external hwloc, you may get multiple symbol definitions when linking your final library or application.</li>\n<li>HWLOC_SETUP_DOCS, HWLOC_SETUP_UTILS, HWLOC_SETUP_TESTS: These three macros only apply when hwloc is built in \"standalone\" mode (i.e., they should NOT be invoked unless HWLOC_BUILD_STANDALONE has already been invoked).</li>\n<li>HWLOC_DO_AM_CONDITIONALS: If you embed hwloc in a larger project and build it conditionally with Automake (e.g., if HWLOC_SETUP_CORE is invoked conditionally), you must unconditionally invoke HWLOC_DO_AM_CONDITIONALS to avoid warnings from Automake (for the cases where hwloc is not selected to be built). This macro is necessary because hwloc uses some AM_CONDITIONALs to build itself, and AM_CONDITIONALs cannot be defined conditionally. Note that it is safe (but unnecessary) to call HWLOC_DO_AM_CONDITIONALS even if HWLOC_SETUP_CORE is invoked unconditionally. If you are not using Automake to build hwloc, this macro is unnecessary (and will actually cause errors because it invoked AM_* macros that will be undefined).</li>\n</ul>\n<p><b>NOTE:</b> When using the HWLOC_SETUP_CORE m4 macro, it may be necessary to explicitly invoke AC_CANONICAL_TARGET (which requires config.sub and config.guess) and/or AC_USE_SYSTEM_EXTENSIONS macros early in the configure script (e.g., after AC_INIT but before AM_INIT_AUTOMAKE). See the Autoconf documentation for further information.</p>\n<p>Also note that hwloc's top-level configure.ac script uses exactly the macros described above to build hwloc in a standalone mode (by default). You may want to examine it for one example of how these macros are used.</p>\n<p> \n</div><div class=\"section\" id=\"embedding_example\">\n </p>\n<h1><a class=\"anchor\" id=\"embedding_example\"></a>\nExample Embedding hwloc</h1>\n<p>Here's an example of integrating with a larger project named sandbox that already uses Autoconf, Automake, and Libtool to build itself:</p>\n<pre class=\"fragment\"># First, cd into the sandbox project source tree\nshell$ cd sandbox\nshell$ cp -r /somewhere/else/hwloc-&lt;version&gt; my-embedded-hwloc\nshell$ edit Makefile.am\n  1. Add \"-Imy-embedded-hwloc/config\" to ACLOCAL_AMFLAGS\n  2. Add \"my-embedded-hwloc\" to SUBDIRS\n  3. Add \"$(HWLOC_EMBEDDED_LDADD)\" and \"$(HWLOC_EMBEDDED_LIBS)\" to \n     sandbox's executable's LDADD line.  The former is the name of the \n     Libtool convenience library that hwloc will generate.  The latter \n     is any dependent support libraries that may be needed by \n     $(HWLOC_EMBEDDED_LDADD).\n  4. Add \"$(HWLOC_EMBEDDED_CFLAGS)\" to AM_CFLAGS\n  5. Add \"$(HWLOC_EMBEDDED_CPPFLAGS)\" to AM_CPPFLAGS\nshell$ edit configure.ac\n  1. Add \"HWLOC_SET_SYMBOL_PREFIX(sandbox_hwloc_)\" line\n  2. Add \"HWLOC_SETUP_CORE([my-embedded-hwloc], [happy=yes], [happy=no])\" line\n  3. Add error checking for happy=no case\nshell$ edit sandbox.c\n  1. Add #include &lt;hwloc.h&gt;\n  2. Add calls to sandbox_hwloc_init() and other hwloc API functions\n</pre><p>Now you can bootstrap, configure, build, and run the sandbox as normal &ndash; all calls to \"sandbox_hwloc_*\" will use the embedded hwloc rather than any system-provided copy of hwloc. </p>\n</div></div><!-- contents -->\n</div><!-- PageDoc -->\n<!-- start footer part -->\n<hr class=\"footer\"/><address class=\"footer\"><small>\nGenerated by &#160;<a href=\"http://www.doxygen.org/index.html\">\n<img class=\"footer\" src=\"doxygen.png\" alt=\"doxygen\"/>\n</a> 1.8.17\n</small></address>\n</body>\n</html>\n",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/doc/doxygen-doc/html/a00360.html": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/xhtml;charset=UTF-8\"/>\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=9\"/>\n<meta name=\"generator\" content=\"Doxygen 1.8.17\"/>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"/>\n<title>Hardware Locality (hwloc): Hardware Locality (hwloc) Introduction</title>\n<link href=\"tabs.css\" rel=\"stylesheet\" type=\"text/css\"/>\n<script type=\"text/javascript\" src=\"jquery.js\"></script>\n<script type=\"text/javascript\" src=\"dynsections.js\"></script>\n<link href=\"doxygen.css\" rel=\"stylesheet\" type=\"text/css\" />\n</head>\n<body>\n<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n<div id=\"titlearea\">\n<table cellspacing=\"0\" cellpadding=\"0\">\n <tbody>\n <tr style=\"height: 56px;\">\n  <td id=\"projectalign\" style=\"padding-left: 0.5em;\">\n   <div id=\"projectname\">Hardware Locality (hwloc)\n   &#160;<span id=\"projectnumber\">2.2.0</span>\n   </div>\n  </td>\n </tr>\n </tbody>\n</table>\n</div>\n<!-- end header part -->\n<!-- Generated by Doxygen 1.8.17 -->\n<script type=\"text/javascript\" src=\"menudata.js\"></script>\n<script type=\"text/javascript\" src=\"menu.js\"></script>\n<script type=\"text/javascript\">\n/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */\n$(function() {\n  initMenu('',false,false,'search.php','Search');\n});\n/* @license-end */</script>\n<div id=\"main-nav\"></div>\n</div><!-- top -->\n<div class=\"PageDoc\"><div class=\"header\">\n  <div class=\"headertitle\">\n<div class=\"title\">Hardware Locality (hwloc) Introduction </div>  </div>\n</div><!--header-->\n<div class=\"contents\">\n<div class=\"textblock\"><h1 class=\"sub\">Portable abstraction of hierarchical architectures for high-performance computing</h1>\n<hr  />\n<p> \n<div class=\"section\">\n See also <a class=\"el\" href=\"a00360.html#further_reading\">Further Reading</a>  \nor the Related pages tab above\n for links to more sections about hwloc concepts.  \n</div>\n</p>\n<p> \n<div class=\"section\" id=\"hwloc_summary\">\n </p>\n<h1><a class=\"anchor\" id=\"hwloc_summary\"></a>\nhwloc Summary</h1>\n<p>hwloc provides command line tools and a C API to obtain the hierarchical map of key computing elements within a node, such as: NUMA memory nodes, shared caches, processor packages, dies and cores, processing units (logical processors or \"threads\") and even I/O devices. hwloc also gathers various attributes such as cache and memory information, and is portable across a variety of different operating systems and platforms.</p>\n<p>hwloc primarily aims at helping high-performance computing (HPC) applications, but is also applicable to any project seeking to exploit code and/or data locality on modern computing platforms.</p>\n<p>hwloc supports the following operating systems:</p>\n<ul>\n<li>\nLinux (including old kernels not having sysfs topology information, with knowledge of cpusets, ScaleMP vSMP support, etc.) on all supported hardware, including Intel Xeon Phi and NumaScale NumaConnect. </li>\n<li>\nSolaris (with support for processor sets and logical domains) </li>\n<li>\nAIX </li>\n<li>\nDarwin / OS X </li>\n<li>\nFreeBSD and its variants (such as kFreeBSD/GNU) </li>\n<li>\nNetBSD </li>\n<li>\nHP-UX </li>\n<li>\nMicrosoft Windows </li>\n<li>\nIBM BlueGene/Q Compute Node Kernel (CNK) </li>\n</ul>\n<p>Since it uses standard Operating System information, hwloc's support is mostly independant from the processor type (x86, powerpc, ...) and just relies on the Operating System support. The main exception is BSD operating systems (NetBSD, FreeBSD, etc.) because they do not provide support topology information, hence hwloc uses an x86-only CPUID-based backend (which can be used for other OSes too, see the <a class=\"el\" href=\"a00372.html\">Components and plugins</a> section).</p>\n<p>To check whether hwloc works on a particular machine, just try to build it and run <code>lstopo</code> or <code>lstopo-no-graphics</code>. If some things do not look right (e.g. bogus or missing cache information), see <a class=\"el\" href=\"index.html#bugs\">Questions and Bugs</a>.</p>\n<p>hwloc only reports the number of processors on unsupported operating systems; no topology information is available.</p>\n<p>For development and debugging purposes, hwloc also offers the ability to work on \"fake\" topologies:</p>\n<ul>\n<li>\nSymmetrical tree of resources generated from a list of level arities, see <a class=\"el\" href=\"a00369.html\">Synthetic topologies</a>. </li>\n<li>\nRemote machine simulation through the gathering of topology as XML files, see <a class=\"el\" href=\"a00368.html\">Importing and exporting topologies from/to XML files</a>. </li>\n</ul>\n<p>hwloc can display the topology in a human-readable format, either in graphical mode (X11), or by exporting in one of several different formats, including: plain text, PDF, PNG, and FIG (see <a class=\"el\" href=\"a00360.html#cli_examples\">Command-line Examples</a> below). Note that some of the export formats require additional support libraries.</p>\n<p>hwloc offers a programming interface for manipulating topologies and objects. It also brings a powerful CPU bitmap API that is used to describe topology objects location on physical/logical processors. See the <a class=\"el\" href=\"a00360.html#interface\">Programming Interface</a> below. It may also be used to binding applications onto certain cores or memory nodes. Several utility programs are also provided to ease command-line manipulation of topology objects, binding of processes, and so on.</p>\n<p>Perl bindings are available from Bernd Kallies on <a href=\"http://search.cpan.org/~bka/Sys-Hwloc-0.10/\">CPAN</a>.</p>\n<p>Python bindings are available from Guy Streeter: </p><ul>\n<li>\n<a href=\"http://people.redhat.com/streeter/\">Fedora RPM and tarball</a>. </li>\n<li>\n<a href=\"git://git.fedorahosted.org/python-hwloc.git\">git tree</a> (<a href=\"http://git.fedorahosted.org/git/python-hwloc.git\">html</a>). </li>\n</ul>\n<p> \n</div><div class=\"section\" id=\"hwloc_installation\">\n </p>\n<h1><a class=\"anchor\" id=\"hwloc_installation\"></a>\nhwloc Installation</h1>\n<p>The generic installation procedure for both hwloc and netloc is described in <a class=\"el\" href=\"index.html#common_installation\">Installation</a>.</p>\n<p>The hwloc command-line tool \"lstopo\" produces human-readable topology maps, as mentioned above. It can also export maps to the \"fig\" file format. Support for PDF, Postscript, and PNG exporting is provided if the \"Cairo\" development package (usually <code>cairo-devel</code> or <code>libcairo2-dev</code>) can be found in \"lstopo\" when hwloc is configured and build.</p>\n<p>The hwloc core may also benefit from the following development packages: </p><ul>\n<li>\n<p class=\"startli\">libpciaccess for full I/O device discovery (<code>libpciaccess-devel</code> or <code>libpciaccess-dev</code> package). On Linux, PCI discovery may still be performed (without vendor/device names) even if libpciaccess cannot be used. </p>\n<p class=\"endli\"></p>\n</li>\n<li>\nAMD or NVIDIA OpenCL implementations for OpenCL device discovery.  </li>\n<li>\nthe NVIDIA CUDA Toolkit for CUDA device discovery.  </li>\n<li>\nthe NVIDIA Management Library (NVML) for NVML device discovery. It is included in CUDA since version 8.0. Older NVML releases were available within the NVIDIA GPU Deployment Kit from <a href=\"https://developer.nvidia.com/gpu-deployment-kit\">https://developer.nvidia.com/gpu-deployment-kit</a> .  </li>\n<li>\nthe NV-CONTROL X extension library (NVCtrl) for NVIDIA display discovery. The relevant development package is usually <code>libXNVCtrl-devel</code> or <code>libxnvctrl-dev</code>. It is also available within nvidia-settings from <a href=\"ftp://download.nvidia.com/XFree86/nvidia-settings/\">ftp://download.nvidia.com/XFree86/nvidia-settings/</a> and <a href=\"https://github.com/NVIDIA/nvidia-settings/\">https://github.com/NVIDIA/nvidia-settings/</a> .  </li>\n<li>\nlibxml2 for full XML import/export support (otherwise, the internal minimalistic parser will only be able to import XML files that were exported by the same hwloc release). See <a class=\"el\" href=\"a00368.html\">Importing and exporting topologies from/to XML files</a> for details. The relevant development package is usually <code>libxml2-devel</code> or <code>libxml2-dev</code>.  </li>\n<li>\nlibudev on Linux for easier discovery of OS device information (otherwise hwloc will try to manually parse udev raw files). The relevant development package is usually <code>libudev-devel</code> or <code>libudev-dev</code>.  </li>\n<li>\nlibtool's ltdl library for dynamic plugin loading if the native dlopen cannot be used. The relevant development package is usually <code>libtool-ltdl-devel</code> or <code>libltdl-dev</code>.  </li>\n</ul>\n<p>PCI and XML support may be statically built inside the main hwloc library, or as separate dynamically-loaded plugins (see the <a class=\"el\" href=\"a00372.html\">Components and plugins</a> section).</p>\n<p>Note that because of the possibility of GPL taint, the <code>pciutils</code> library <code>libpci</code> will not be used (remember that hwloc is BSD-licensed).</p>\n<p> \n</div><div class=\"section\" id=\"cli_examples\">\n </p>\n<h1><a class=\"anchor\" id=\"cli_examples\"></a>\nCommand-line Examples</h1>\n<p>On a 4-package 2-core machine with hyper-threading, the <code>lstopo</code> tool may show the following graphical output:</p>\n<div class=\"image\">\n<img src=\"dudley.png\" alt=\"\"/>\n</div>\n <p>Here's the equivalent output in textual form:</p>\n<pre class=\"fragment\">Machine\n  NUMANode L#0 (P#0)\n  Package L#0 + L3 L#0 (4096KB)\n    L2 L#0 (1024KB) + L1 L#0 (16KB) + Core L#0\n      PU L#0 (P#0)\n      PU L#1 (P#8)\n    L2 L#1 (1024KB) + L1 L#1 (16KB) + Core L#1\n      PU L#2 (P#4)\n      PU L#3 (P#12)\n  Package L#1 + L3 L#1 (4096KB)\n    L2 L#2 (1024KB) + L1 L#2 (16KB) + Core L#2\n      PU L#4 (P#1)\n      PU L#5 (P#9)\n    L2 L#3 (1024KB) + L1 L#3 (16KB) + Core L#3\n      PU L#6 (P#5)\n      PU L#7 (P#13)\n  Package L#2 + L3 L#2 (4096KB)\n    L2 L#4 (1024KB) + L1 L#4 (16KB) + Core L#4\n      PU L#8 (P#2)\n      PU L#9 (P#10)\n    L2 L#5 (1024KB) + L1 L#5 (16KB) + Core L#5\n      PU L#10 (P#6)\n      PU L#11 (P#14)\n  Package L#3 + L3 L#3 (4096KB)\n    L2 L#6 (1024KB) + L1 L#6 (16KB) + Core L#6\n      PU L#12 (P#3)\n      PU L#13 (P#11)\n    L2 L#7 (1024KB) + L1 L#7 (16KB) + Core L#7\n      PU L#14 (P#7)\n      PU L#15 (P#15)\n</pre><p>Note that there is also an equivalent output in XML that is meant for exporting/importing topologies but it is hardly readable to human-beings (see <a class=\"el\" href=\"a00368.html\">Importing and exporting topologies from/to XML files</a> for details).</p>\n<p>On a 4-package 2-core Opteron NUMA machine (with two core cores disallowed by the administrator), the <code>lstopo</code> tool may show the following graphical output (with <code>--disallowed</code> for displaying disallowed objects):</p>\n<div class=\"image\">\n<img src=\"hagrid.png\" alt=\"\"/>\n</div>\n <p>Here's the equivalent output in textual form:</p>\n<pre class=\"fragment\">Machine (32GB total)\n  Package L#0\n    NUMANode L#0 (P#0 8190MB)\n    L2 L#0 (1024KB) + L1 L#0 (64KB) + Core L#0 + PU L#0 (P#0)\n    L2 L#1 (1024KB) + L1 L#1 (64KB) + Core L#1 + PU L#1 (P#1)\n  Package L#1\n    NUMANode L#1 (P#1 8192MB)\n    L2 L#2 (1024KB) + L1 L#2 (64KB) + Core L#2 + PU L#2 (P#2)\n    L2 L#3 (1024KB) + L1 L#3 (64KB) + Core L#3 + PU L#3 (P#3)\n  Package L#2\n    NUMANode L#2 (P#2 8192MB)\n    L2 L#4 (1024KB) + L1 L#4 (64KB) + Core L#4 + PU L#4 (P#4)\n    L2 L#5 (1024KB) + L1 L#5 (64KB) + Core L#5 + PU L#5 (P#5)\n  Package L#3\n    NUMANode L#3 (P#3 8192MB)\n    L2 L#6 (1024KB) + L1 L#6 (64KB) + Core L#6 + PU L#6 (P#6)\n    L2 L#7 (1024KB) + L1 L#7 (64KB) + Core L#7 + PU L#7 (P#7)\n</pre><p>On a 2-package quad-core Xeon (pre-Nehalem, with 2 dual-core dies into each package):</p>\n<div class=\"image\">\n<img src=\"emmett.png\" alt=\"\"/>\n</div>\n <p>Here's the same output in textual form:</p>\n<pre class=\"fragment\">Machine (total 16GB)\n  NUMANode L#0 (P#0 16GB)\n  Package L#0\n    L2 L#0 (4096KB)\n      L1 L#0 (32KB) + Core L#0 + PU L#0 (P#0)\n      L1 L#1 (32KB) + Core L#1 + PU L#1 (P#4)\n    L2 L#1 (4096KB)\n      L1 L#2 (32KB) + Core L#2 + PU L#2 (P#2)\n      L1 L#3 (32KB) + Core L#3 + PU L#3 (P#6)\n  Package L#1\n    L2 L#2 (4096KB)\n      L1 L#4 (32KB) + Core L#4 + PU L#4 (P#1)\n      L1 L#5 (32KB) + Core L#5 + PU L#5 (P#5)\n    L2 L#3 (4096KB)\n      L1 L#6 (32KB) + Core L#6 + PU L#6 (P#3)\n      L1 L#7 (32KB) + Core L#7 + PU L#7 (P#7)\n</pre><p> \n</div><div class=\"section\" id=\"interface\">\n </p>\n<h1><a class=\"anchor\" id=\"interface\"></a>\nProgramming Interface</h1>\n<p>The basic interface is available in <a class=\"el\" href=\"a00125_source.html\" title=\"The hwloc API.\">hwloc.h</a>. Some higher-level functions are available in <a class=\"el\" href=\"a00128_source.html\" title=\"High-level hwloc traversal helpers.\">hwloc/helper.h</a> to reduce the need to manually manipulate objects and follow links between them. Documentation for all these is provided later in this document. Developers may also want to look at hwloc/inlines.h which contains the actual inline code of some <a class=\"el\" href=\"a00125_source.html\" title=\"The hwloc API.\">hwloc.h</a> routines, and at this document, which provides good higher-level topology traversal examples.</p>\n<p>To precisely define the vocabulary used by hwloc, a <a class=\"el\" href=\"a00361.html\">Terms and Definitions</a> section is available and should probably be read first.</p>\n<p>Each hwloc object contains a cpuset describing the list of processing units that it contains. These bitmaps may be used for <a class=\"el\" href=\"a00187.html\">CPU binding</a> and <a class=\"el\" href=\"a00188.html\">Memory binding</a>. hwloc offers an extensive bitmap manipulation interface in <a class=\"el\" href=\"a00131_source.html\" title=\"The bitmap API, for use in hwloc itself.\">hwloc/bitmap.h</a>.</p>\n<p>Moreover, hwloc also comes with additional helpers for interoperability with several commonly used environments. See the <a class=\"el\" href=\"a00370.html\">Interoperability With Other Software</a> section for details.</p>\n<p>The complete API documentation is available in a full set of HTML pages, man pages, and self-contained PDF files (formatted for both both US letter and A4 formats) in the source tarball in doc/doxygen-doc/.</p>\n<p><b>NOTE:</b> If you are building the documentation from a Git clone, you will need to have Doxygen and pdflatex installed &ndash; the documentation will be built during the normal \"make\" process. The documentation is installed during \"make install\" to $prefix/share/doc/hwloc/ and your systems default man page tree (under $prefix, of course).</p>\n<h2><a class=\"anchor\" id=\"portability\"></a>\nPortability</h2>\n<p>Operating System have varying support for CPU and memory binding, e.g. while some Operating Systems provide interfaces for all kinds of CPU and memory bindings, some others provide only interfaces for a limited number of kinds of CPU and memory binding, and some do not provide any binding interface at all. Hwloc's binding functions would then simply return the ENOSYS error (Function not implemented), meaning that the underlying Operating System does not provide any interface for them. <a class=\"el\" href=\"a00187.html\">CPU binding</a> and <a class=\"el\" href=\"a00188.html\">Memory binding</a> provide more information on which hwloc binding functions should be preferred because interfaces for them are usually available on the supported Operating Systems.</p>\n<p>Similarly, the ability of reporting topology information varies from one platform to another. As shown in <a class=\"el\" href=\"a00360.html#cli_examples\">Command-line Examples</a>, hwloc can obtain information on a wide variety of hardware topologies. However, some platforms and/or operating system versions will only report a subset of this information. For example, on an PPC64-based system with 8 cores (each with 2 hardware threads) running a default 2.6.18-based kernel from RHEL 5.4, hwloc is only able to glean information about NUMA nodes and processor units (PUs). No information about caches, packages, or cores is available.</p>\n<p>Here's the graphical output from lstopo on this platform when Simultaneous Multi-Threading (SMT) is enabled:</p>\n<div class=\"image\">\n<img src=\"ppc64-with-smt.png\" alt=\"\"/>\n</div>\n <p>And here's the graphical output from lstopo on this platform when SMT is disabled:</p>\n<div class=\"image\">\n<img src=\"ppc64-without-smt.png\" alt=\"\"/>\n</div>\n <p>Notice that hwloc only sees half the PUs when SMT is disabled. PU L#6, for example, seems to change location from NUMA node #0 to #1. In reality, no PUs \"moved\" &ndash; they were simply re-numbered when hwloc only saw half as many (see also Logical index in <a class=\"el\" href=\"a00361.html#termsanddefs_indexes\">Indexes and Sets</a>). Hence, PU L#6 in the SMT-disabled picture probably corresponds to PU L#12 in the SMT-enabled picture.</p>\n<p>This same \"PUs have disappeared\" effect can be seen on other platforms &ndash; even platforms / OSs that provide much more information than the above PPC64 system. This is an unfortunate side-effect of how operating systems report information to hwloc.</p>\n<p>Note that upgrading the Linux kernel on the same PPC64 system mentioned above to 2.6.34, hwloc is able to discover all the topology information. The following picture shows the entire topology layout when SMT is enabled:</p>\n<div class=\"image\">\n<img src=\"ppc64-full-with-smt.png\" alt=\"\"/>\n</div>\n <p>Developers using the hwloc API or XML output for portable applications should therefore be extremely careful to not make any assumptions about the structure of data that is returned. For example, per the above reported PPC topology, it is not safe to assume that PUs will always be descendants of cores.</p>\n<p>Additionally, future hardware may insert new topology elements that are not available in this version of hwloc. Long-lived applications that are meant to span multiple different hardware platforms should also be careful about making structure assumptions. For example, a new element may someday exist between a core and a PU.</p>\n<h2><a class=\"anchor\" id=\"interface_example\"></a>\nAPI Example</h2>\n<p>The following small C example (available in the source tree as ``doc/examples/hwloc-hello.c'') prints the topology of the machine and performs some thread and memory binding. More examples are available in the doc/examples/ directory of the source tree.</p>\n<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">/* Example hwloc API program.</span></div>\n<div class=\"line\"><span class=\"comment\"> *</span></div>\n<div class=\"line\"><span class=\"comment\"> * See other examples under doc/examples/ in the source tree</span></div>\n<div class=\"line\"><span class=\"comment\"> * for more details.</span></div>\n<div class=\"line\"><span class=\"comment\"> *</span></div>\n<div class=\"line\"><span class=\"comment\"> * Copyright \u00a9 2009-2016 Inria.  All rights reserved.</span></div>\n<div class=\"line\"><span class=\"comment\"> * Copyright \u00a9 2009-2011 Universit\u00e9 Bordeaux</span></div>\n<div class=\"line\"><span class=\"comment\"> * Copyright \u00a9 2009-2010 Cisco Systems, Inc.  All rights reserved.</span></div>\n<div class=\"line\"><span class=\"comment\"> * See COPYING in top-level directory.</span></div>\n<div class=\"line\"><span class=\"comment\"> *</span></div>\n<div class=\"line\"><span class=\"comment\"> * hwloc-hello.c</span></div>\n<div class=\"line\"><span class=\"comment\"> */</span></div>\n<div class=\"line\"> </div>\n<div class=\"line\"><span class=\"preprocessor\">#include &quot;hwloc.h&quot;</span></div>\n<div class=\"line\"> </div>\n<div class=\"line\"><span class=\"preprocessor\">#include &lt;errno.h&gt;</span></div>\n<div class=\"line\"><span class=\"preprocessor\">#include &lt;stdio.h&gt;</span></div>\n<div class=\"line\"><span class=\"preprocessor\">#include &lt;string.h&gt;</span></div>\n<div class=\"line\"> </div>\n<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">void</span> print_children(<a class=\"code\" href=\"a00183.html#ga9d1e76ee15a7dee158b786c30b6a6e38\">hwloc_topology_t</a> topology, <a class=\"code\" href=\"a00231.html\">hwloc_obj_t</a> obj,</div>\n<div class=\"line\">                           <span class=\"keywordtype\">int</span> <a class=\"code\" href=\"a00231.html#a4876fd165b4fff35521f07ebd85355ed\">depth</a>)</div>\n<div class=\"line\">{</div>\n<div class=\"line\">    <span class=\"keywordtype\">char</span> <a class=\"code\" href=\"a00231.html#acc4f0803f244867e68fe0036800be5de\">type</a>[32], <a class=\"code\" href=\"a00231.html#accd40e29f71f19e88db62ea3df02adc8\">attr</a>[1024];</div>\n<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> i;</div>\n<div class=\"line\"> </div>\n<div class=\"line\">    <a class=\"code\" href=\"a00185.html#gadb8765c260edea80c52cd06a76639ba4\">hwloc_obj_type_snprintf</a>(<a class=\"code\" href=\"a00231.html#acc4f0803f244867e68fe0036800be5de\">type</a>, <span class=\"keyword\">sizeof</span>(<a class=\"code\" href=\"a00231.html#acc4f0803f244867e68fe0036800be5de\">type</a>), obj, 0);</div>\n<div class=\"line\">    printf(<span class=\"stringliteral\">&quot;%*s%s&quot;</span>, 2*<a class=\"code\" href=\"a00231.html#a4876fd165b4fff35521f07ebd85355ed\">depth</a>, <span class=\"stringliteral\">&quot;&quot;</span>, <a class=\"code\" href=\"a00231.html#acc4f0803f244867e68fe0036800be5de\">type</a>);</div>\n<div class=\"line\">    <span class=\"keywordflow\">if</span> (obj-&gt;<a class=\"code\" href=\"a00231.html#a61a7a80a68eaccbaaa28269e678c81a9\">os_index</a> != (<span class=\"keywordtype\">unsigned</span>) -1)</div>\n<div class=\"line\">      printf(<span class=\"stringliteral\">&quot;#%u&quot;</span>, obj-&gt;<a class=\"code\" href=\"a00231.html#a61a7a80a68eaccbaaa28269e678c81a9\">os_index</a>);</div>\n<div class=\"line\">    <a class=\"code\" href=\"a00185.html#ga870e876931c282a1c7aee2f031912ce3\">hwloc_obj_attr_snprintf</a>(<a class=\"code\" href=\"a00231.html#accd40e29f71f19e88db62ea3df02adc8\">attr</a>, <span class=\"keyword\">sizeof</span>(<a class=\"code\" href=\"a00231.html#accd40e29f71f19e88db62ea3df02adc8\">attr</a>), obj, <span class=\"stringliteral\">&quot; &quot;</span>, 0);</div>\n<div class=\"line\">    <span class=\"keywordflow\">if</span> (*<a class=\"code\" href=\"a00231.html#accd40e29f71f19e88db62ea3df02adc8\">attr</a>)</div>\n<div class=\"line\">      printf(<span class=\"stringliteral\">&quot;(%s)&quot;</span>, <a class=\"code\" href=\"a00231.html#accd40e29f71f19e88db62ea3df02adc8\">attr</a>);</div>\n<div class=\"line\">    printf(<span class=\"stringliteral\">&quot;\\n&quot;</span>);</div>\n<div class=\"line\">    <span class=\"keywordflow\">for</span> (i = 0; i &lt; obj-&gt;<a class=\"code\" href=\"a00231.html#aac3f6da35c9b57599909a44ce2b716c1\">arity</a>; i++) {</div>\n<div class=\"line\">        print_children(topology, obj-&gt;<a class=\"code\" href=\"a00231.html#a04d05403da37bfe17cd63b7c7dd07b1f\">children</a>[i], <a class=\"code\" href=\"a00231.html#a4876fd165b4fff35521f07ebd85355ed\">depth</a> + 1);</div>\n<div class=\"line\">    }</div>\n<div class=\"line\">}</div>\n<div class=\"line\"> </div>\n<div class=\"line\"><span class=\"keywordtype\">int</span> main(<span class=\"keywordtype\">void</span>)</div>\n<div class=\"line\">{</div>\n<div class=\"line\">    <span class=\"keywordtype\">int</span> <a class=\"code\" href=\"a00231.html#a4876fd165b4fff35521f07ebd85355ed\">depth</a>;</div>\n<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> i, n;</div>\n<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">long</span> size;</div>\n<div class=\"line\">    <span class=\"keywordtype\">int</span> levels;</div>\n<div class=\"line\">    <span class=\"keywordtype\">char</span> <span class=\"keywordtype\">string</span>[128];</div>\n<div class=\"line\">    <span class=\"keywordtype\">int</span> topodepth;</div>\n<div class=\"line\">    <span class=\"keywordtype\">void</span> *m;</div>\n<div class=\"line\">    <a class=\"code\" href=\"a00183.html#ga9d1e76ee15a7dee158b786c30b6a6e38\">hwloc_topology_t</a> topology;</div>\n<div class=\"line\">    <a class=\"code\" href=\"a00180.html#ga4bbf39b68b6f568fb92739e7c0ea7801\">hwloc_cpuset_t</a> <a class=\"code\" href=\"a00231.html#a67925e0f2c47f50408fbdb9bddd0790f\">cpuset</a>;</div>\n<div class=\"line\">    <a class=\"code\" href=\"a00231.html\">hwloc_obj_t</a> obj;</div>\n<div class=\"line\"> </div>\n<div class=\"line\">    <span class=\"comment\">/* Allocate and initialize topology object. */</span></div>\n<div class=\"line\">    <a class=\"code\" href=\"a00183.html#ga03fd4a16d8b9ee1ffc32b25fd2f6bdfa\">hwloc_topology_init</a>(&amp;topology);</div>\n<div class=\"line\"> </div>\n<div class=\"line\">    <span class=\"comment\">/* ... Optionally, put detection configuration here to ignore</span></div>\n<div class=\"line\"><span class=\"comment\">       some objects types, define a synthetic topology, etc....</span></div>\n<div class=\"line\"><span class=\"comment\"></span> </div>\n<div class=\"line\"><span class=\"comment\">       The default is to detect all the objects of the machine that</span></div>\n<div class=\"line\"><span class=\"comment\">       the caller is allowed to access.  See Configure Topology</span></div>\n<div class=\"line\"><span class=\"comment\">       Detection. */</span></div>\n<div class=\"line\"> </div>\n<div class=\"line\">    <span class=\"comment\">/* Perform the topology detection. */</span></div>\n<div class=\"line\">    <a class=\"code\" href=\"a00183.html#gabdf58d87ad77f6615fccdfe0535ff826\">hwloc_topology_load</a>(topology);</div>\n<div class=\"line\"> </div>\n<div class=\"line\">    <span class=\"comment\">/* Optionally, get some additional topology information</span></div>\n<div class=\"line\"><span class=\"comment\">       in case we need the topology depth later. */</span></div>\n<div class=\"line\">    topodepth = <a class=\"code\" href=\"a00184.html#gae54d1782ca9b54bea915f5c18a9158fa\">hwloc_topology_get_depth</a>(topology);</div>\n<div class=\"line\"> </div>\n<div class=\"line\"><span class=\"comment\">    /*****************************************************************</span></div>\n<div class=\"line\"><span class=\"comment\">     * First example:</span></div>\n<div class=\"line\"><span class=\"comment\">     * Walk the topology with an array style, from level 0 (always</span></div>\n<div class=\"line\"><span class=\"comment\">     * the system level) to the lowest level (always the proc level).</span></div>\n<div class=\"line\"><span class=\"comment\">     *****************************************************************/</span></div>\n<div class=\"line\">    <span class=\"keywordflow\">for</span> (<a class=\"code\" href=\"a00231.html#a4876fd165b4fff35521f07ebd85355ed\">depth</a> = 0; <a class=\"code\" href=\"a00231.html#a4876fd165b4fff35521f07ebd85355ed\">depth</a> &lt; topodepth; <a class=\"code\" href=\"a00231.html#a4876fd165b4fff35521f07ebd85355ed\">depth</a>++) {</div>\n<div class=\"line\">        printf(<span class=\"stringliteral\">&quot;*** Objects at level %d\\n&quot;</span>, <a class=\"code\" href=\"a00231.html#a4876fd165b4fff35521f07ebd85355ed\">depth</a>);</div>\n<div class=\"line\">        <span class=\"keywordflow\">for</span> (i = 0; i &lt; <a class=\"code\" href=\"a00184.html#ga1d5ceafe8130fe6e8657bf0bc666ba50\">hwloc_get_nbobjs_by_depth</a>(topology, <a class=\"code\" href=\"a00231.html#a4876fd165b4fff35521f07ebd85355ed\">depth</a>);</div>\n<div class=\"line\">             i++) {</div>\n<div class=\"line\">            <a class=\"code\" href=\"a00185.html#gadb8765c260edea80c52cd06a76639ba4\">hwloc_obj_type_snprintf</a>(<span class=\"keywordtype\">string</span>, <span class=\"keyword\">sizeof</span>(<span class=\"keywordtype\">string</span>),</div>\n<div class=\"line\">                                    <a class=\"code\" href=\"a00184.html#ga391f6b2613f0065673eaa4069b93d4e0\">hwloc_get_obj_by_depth</a>(topology, <a class=\"code\" href=\"a00231.html#a4876fd165b4fff35521f07ebd85355ed\">depth</a>, i), 0);</div>\n<div class=\"line\">            printf(<span class=\"stringliteral\">&quot;Index %u: %s\\n&quot;</span>, i, <span class=\"keywordtype\">string</span>);</div>\n<div class=\"line\">        }</div>\n<div class=\"line\">    }</div>\n<div class=\"line\"> </div>\n<div class=\"line\"><span class=\"comment\">    /*****************************************************************</span></div>\n<div class=\"line\"><span class=\"comment\">     * Second example:</span></div>\n<div class=\"line\"><span class=\"comment\">     * Walk the topology with a tree style.</span></div>\n<div class=\"line\"><span class=\"comment\">     *****************************************************************/</span></div>\n<div class=\"line\">    printf(<span class=\"stringliteral\">&quot;*** Printing overall tree\\n&quot;</span>);</div>\n<div class=\"line\">    print_children(topology, <a class=\"code\" href=\"a00184.html#ga2d4b12fc187dfc53b35f2fa21d21044d\">hwloc_get_root_obj</a>(topology), 0);</div>\n<div class=\"line\"> </div>\n<div class=\"line\"><span class=\"comment\">    /*****************************************************************</span></div>\n<div class=\"line\"><span class=\"comment\">     * Third example:</span></div>\n<div class=\"line\"><span class=\"comment\">     * Print the number of packages.</span></div>\n<div class=\"line\"><span class=\"comment\">     *****************************************************************/</span></div>\n<div class=\"line\">    <a class=\"code\" href=\"a00231.html#a4876fd165b4fff35521f07ebd85355ed\">depth</a> = <a class=\"code\" href=\"a00184.html#ga8bec782e21be313750da70cf7428b374\">hwloc_get_type_depth</a>(topology, <a class=\"code\" href=\"a00181.html#ggacd37bb612667dc437d66bfb175a8dc55ab16ab8c0dbffc234921d86f3dfb63129\">HWLOC_OBJ_PACKAGE</a>);</div>\n<div class=\"line\">    <span class=\"keywordflow\">if</span> (<a class=\"code\" href=\"a00231.html#a4876fd165b4fff35521f07ebd85355ed\">depth</a> == <a class=\"code\" href=\"a00184.html#ggaf4e663cf42bbe20756b849c6293ef575a0565ab92ab72cb0cec91e23003294aad\">HWLOC_TYPE_DEPTH_UNKNOWN</a>) {</div>\n<div class=\"line\">        printf(<span class=\"stringliteral\">&quot;*** The number of packages is unknown\\n&quot;</span>);</div>\n<div class=\"line\">    } <span class=\"keywordflow\">else</span> {</div>\n<div class=\"line\">        printf(<span class=\"stringliteral\">&quot;*** %u package(s)\\n&quot;</span>,</div>\n<div class=\"line\">               <a class=\"code\" href=\"a00184.html#ga1d5ceafe8130fe6e8657bf0bc666ba50\">hwloc_get_nbobjs_by_depth</a>(topology, <a class=\"code\" href=\"a00231.html#a4876fd165b4fff35521f07ebd85355ed\">depth</a>));</div>\n<div class=\"line\">    }</div>\n<div class=\"line\"> </div>\n<div class=\"line\"><span class=\"comment\">    /*****************************************************************</span></div>\n<div class=\"line\"><span class=\"comment\">     * Fourth example:</span></div>\n<div class=\"line\"><span class=\"comment\">     * Compute the amount of cache that the first logical processor</span></div>\n<div class=\"line\"><span class=\"comment\">     * has above it.</span></div>\n<div class=\"line\"><span class=\"comment\">     *****************************************************************/</span></div>\n<div class=\"line\">    levels = 0;</div>\n<div class=\"line\">    size = 0;</div>\n<div class=\"line\">    <span class=\"keywordflow\">for</span> (obj = <a class=\"code\" href=\"a00184.html#ga6f414dd80a2b943967a0ac92da3181a2\">hwloc_get_obj_by_type</a>(topology, <a class=\"code\" href=\"a00181.html#ggacd37bb612667dc437d66bfb175a8dc55abca6887e80cb291353b0a0c1da83f661\">HWLOC_OBJ_PU</a>, 0);</div>\n<div class=\"line\">         obj;</div>\n<div class=\"line\">         obj = obj-&gt;<a class=\"code\" href=\"a00231.html#adc494f6aed939992be1c55cca5822900\">parent</a>)</div>\n<div class=\"line\">      <span class=\"keywordflow\">if</span> (<a class=\"code\" href=\"a00195.html#ga2ed589bea28711e80b92066510a5607d\">hwloc_obj_type_is_cache</a>(obj-&gt;<a class=\"code\" href=\"a00231.html#acc4f0803f244867e68fe0036800be5de\">type</a>)) {</div>\n<div class=\"line\">        levels++;</div>\n<div class=\"line\">        size += obj-&gt;<a class=\"code\" href=\"a00231.html#accd40e29f71f19e88db62ea3df02adc8\">attr</a>-&gt;<a class=\"code\" href=\"a00235.html#a23f553f3252c9d13f2338231cd354ea9\">cache</a>.<a class=\"code\" href=\"a00247.html#abe5e788943ed04302976740c829674c0\">size</a>;</div>\n<div class=\"line\">      }</div>\n<div class=\"line\">    printf(<span class=\"stringliteral\">&quot;*** Logical processor 0 has %d caches totaling %luKB\\n&quot;</span>,</div>\n<div class=\"line\">           levels, size / 1024);</div>\n<div class=\"line\"> </div>\n<div class=\"line\"><span class=\"comment\">    /*****************************************************************</span></div>\n<div class=\"line\"><span class=\"comment\">     * Fifth example:</span></div>\n<div class=\"line\"><span class=\"comment\">     * Bind to only one thread of the last core of the machine.</span></div>\n<div class=\"line\"><span class=\"comment\">     *</span></div>\n<div class=\"line\"><span class=\"comment\">     * First find out where cores are, or else smaller sets of CPUs if</span></div>\n<div class=\"line\"><span class=\"comment\">     * the OS doesn&#39;t have the notion of a &quot;core&quot;.</span></div>\n<div class=\"line\"><span class=\"comment\">     *****************************************************************/</span></div>\n<div class=\"line\">    <a class=\"code\" href=\"a00231.html#a4876fd165b4fff35521f07ebd85355ed\">depth</a> = <a class=\"code\" href=\"a00184.html#ga8125328e69eba709c33ea8055c12589b\">hwloc_get_type_or_below_depth</a>(topology, <a class=\"code\" href=\"a00181.html#ggacd37bb612667dc437d66bfb175a8dc55ac793958f330bca371aa1535de8aff45f\">HWLOC_OBJ_CORE</a>);</div>\n<div class=\"line\"> </div>\n<div class=\"line\">    <span class=\"comment\">/* Get last core. */</span></div>\n<div class=\"line\">    obj = <a class=\"code\" href=\"a00184.html#ga391f6b2613f0065673eaa4069b93d4e0\">hwloc_get_obj_by_depth</a>(topology, <a class=\"code\" href=\"a00231.html#a4876fd165b4fff35521f07ebd85355ed\">depth</a>,</div>\n<div class=\"line\">                   <a class=\"code\" href=\"a00184.html#ga1d5ceafe8130fe6e8657bf0bc666ba50\">hwloc_get_nbobjs_by_depth</a>(topology, <a class=\"code\" href=\"a00231.html#a4876fd165b4fff35521f07ebd85355ed\">depth</a>) - 1);</div>\n<div class=\"line\">    <span class=\"keywordflow\">if</span> (obj) {</div>\n<div class=\"line\">        <span class=\"comment\">/* Get a copy of its cpuset that we may modify. */</span></div>\n<div class=\"line\">        <a class=\"code\" href=\"a00231.html#a67925e0f2c47f50408fbdb9bddd0790f\">cpuset</a> = <a class=\"code\" href=\"a00202.html#gae679434c1a5f41d3560a8a7e2c1b0dee\">hwloc_bitmap_dup</a>(obj-&gt;<a class=\"code\" href=\"a00231.html#a67925e0f2c47f50408fbdb9bddd0790f\">cpuset</a>);</div>\n<div class=\"line\"> </div>\n<div class=\"line\">        <span class=\"comment\">/* Get only one logical processor (in case the core is</span></div>\n<div class=\"line\"><span class=\"comment\">           SMT/hyper-threaded). */</span></div>\n<div class=\"line\">        <a class=\"code\" href=\"a00202.html#gaa611a77c092e679246afdf9a60d5db8b\">hwloc_bitmap_singlify</a>(<a class=\"code\" href=\"a00231.html#a67925e0f2c47f50408fbdb9bddd0790f\">cpuset</a>);</div>\n<div class=\"line\"> </div>\n<div class=\"line\">        <span class=\"comment\">/* And try to bind ourself there. */</span></div>\n<div class=\"line\">        <span class=\"keywordflow\">if</span> (<a class=\"code\" href=\"a00187.html#ga80bc07473a8edf840cae17bd7ec21d48\">hwloc_set_cpubind</a>(topology, <a class=\"code\" href=\"a00231.html#a67925e0f2c47f50408fbdb9bddd0790f\">cpuset</a>, 0)) {</div>\n<div class=\"line\">            <span class=\"keywordtype\">char</span> *str;</div>\n<div class=\"line\">            <span class=\"keywordtype\">int</span> error = errno;</div>\n<div class=\"line\">            <a class=\"code\" href=\"a00202.html#ga0fece972134fdecf2da9bc7a11dd827e\">hwloc_bitmap_asprintf</a>(&amp;str, obj-&gt;<a class=\"code\" href=\"a00231.html#a67925e0f2c47f50408fbdb9bddd0790f\">cpuset</a>);</div>\n<div class=\"line\">            printf(<span class=\"stringliteral\">&quot;Couldn&#39;t bind to cpuset %s: %s\\n&quot;</span>, str, strerror(error));</div>\n<div class=\"line\">            free(str);</div>\n<div class=\"line\">        }</div>\n<div class=\"line\"> </div>\n<div class=\"line\">        <span class=\"comment\">/* Free our cpuset copy */</span></div>\n<div class=\"line\">        <a class=\"code\" href=\"a00202.html#ga156130d85b3a0674d6e0e6770fe68fbe\">hwloc_bitmap_free</a>(<a class=\"code\" href=\"a00231.html#a67925e0f2c47f50408fbdb9bddd0790f\">cpuset</a>);</div>\n<div class=\"line\">    }</div>\n<div class=\"line\"> </div>\n<div class=\"line\"><span class=\"comment\">    /*****************************************************************</span></div>\n<div class=\"line\"><span class=\"comment\">     * Sixth example:</span></div>\n<div class=\"line\"><span class=\"comment\">     * Allocate some memory on the last NUMA node, bind some existing</span></div>\n<div class=\"line\"><span class=\"comment\">     * memory to the last NUMA node.</span></div>\n<div class=\"line\"><span class=\"comment\">     *****************************************************************/</span></div>\n<div class=\"line\">    <span class=\"comment\">/* Get last node. There&#39;s always at least one. */</span></div>\n<div class=\"line\">    n = <a class=\"code\" href=\"a00184.html#ga789a3f65aedff644be64a18526a03065\">hwloc_get_nbobjs_by_type</a>(topology, <a class=\"code\" href=\"a00181.html#ggacd37bb612667dc437d66bfb175a8dc55a9d917a3e5497950c6d8948b8e183db5a\">HWLOC_OBJ_NUMANODE</a>);</div>\n<div class=\"line\">    obj = <a class=\"code\" href=\"a00184.html#ga6f414dd80a2b943967a0ac92da3181a2\">hwloc_get_obj_by_type</a>(topology, <a class=\"code\" href=\"a00181.html#ggacd37bb612667dc437d66bfb175a8dc55a9d917a3e5497950c6d8948b8e183db5a\">HWLOC_OBJ_NUMANODE</a>, n - 1);</div>\n<div class=\"line\"> </div>\n<div class=\"line\">    size = 1024*1024;</div>\n<div class=\"line\">    m = <a class=\"code\" href=\"a00188.html#ga04736461780fadcf193af218c0122273\">hwloc_alloc_membind</a>(topology, size, obj-&gt;<a class=\"code\" href=\"a00231.html#a08f0d0e16c619a6e653526cbee4ffea3\">nodeset</a>,</div>\n<div class=\"line\">                            <a class=\"code\" href=\"a00188.html#ggac9764f79505775d06407b40f5e4661e8ad811fa4b2a6002c4d63695a408ffde2c\">HWLOC_MEMBIND_BIND</a>, <a class=\"code\" href=\"a00188.html#ggab00475fd98815bf4fb9aaf752030e7d2a71f19fe4505f1c083dc8e6f7bdea6256\">HWLOC_MEMBIND_BYNODESET</a>);</div>\n<div class=\"line\">    <a class=\"code\" href=\"a00188.html#ga32dbd4f54e9e4a7179f2dde37ffe6ad7\">hwloc_free</a>(topology, m, size);</div>\n<div class=\"line\"> </div>\n<div class=\"line\">    m = malloc(size);</div>\n<div class=\"line\">    <a class=\"code\" href=\"a00188.html#gaf881faefe20701229f07dd7dbd0125ed\">hwloc_set_area_membind</a>(topology, m, size, obj-&gt;<a class=\"code\" href=\"a00231.html#a08f0d0e16c619a6e653526cbee4ffea3\">nodeset</a>,</div>\n<div class=\"line\">                           <a class=\"code\" href=\"a00188.html#ggac9764f79505775d06407b40f5e4661e8ad811fa4b2a6002c4d63695a408ffde2c\">HWLOC_MEMBIND_BIND</a>, <a class=\"code\" href=\"a00188.html#ggab00475fd98815bf4fb9aaf752030e7d2a71f19fe4505f1c083dc8e6f7bdea6256\">HWLOC_MEMBIND_BYNODESET</a>);</div>\n<div class=\"line\">    free(m);</div>\n<div class=\"line\"> </div>\n<div class=\"line\">    <span class=\"comment\">/* Destroy topology object. */</span></div>\n<div class=\"line\">    <a class=\"code\" href=\"a00183.html#ga9f34a640b6fd28d23699d4d084667b15\">hwloc_topology_destroy</a>(topology);</div>\n<div class=\"line\"> </div>\n<div class=\"line\">    <span class=\"keywordflow\">return</span> 0;</div>\n<div class=\"line\">}</div>\n</div><!-- fragment --><p>hwloc provides a <code>pkg-config</code> executable to obtain relevant compiler and linker flags. For example, it can be used thusly to compile applications that utilize the hwloc library (assuming GNU Make):</p>\n<pre class=\"fragment\">CFLAGS += $(shell pkg-config --cflags hwloc)\nLDLIBS += $(shell pkg-config --libs hwloc)\n\nhwloc-hello: hwloc-hello.c\n        $(CC) hwloc-hello.c $(CFLAGS) -o hwloc-hello $(LDLIBS)\n</pre><p>On a machine 2 processor packages &ndash; each package of which has two processing cores &ndash; the output from running <code>hwloc-hello</code> could be something like the following:</p>\n<pre class=\"fragment\">shell$ ./hwloc-hello\n*** Objects at level 0\nIndex 0: Machine\n*** Objects at level 1\nIndex 0: Package#0\nIndex 1: Package#1\n*** Objects at level 2\nIndex 0: Core#0\nIndex 1: Core#1\nIndex 2: Core#3\nIndex 3: Core#2\n*** Objects at level 3\nIndex 0: PU#0\nIndex 1: PU#1\nIndex 2: PU#2\nIndex 3: PU#3\n*** Printing overall tree\nMachine\n  Package#0\n    Core#0\n      PU#0\n    Core#1\n      PU#1\n  Package#1\n    Core#3\n      PU#2\n    Core#2\n      PU#3\n*** 2 package(s)\n*** Logical processor 0 has 0 caches totaling 0KB\nshell$ \n</pre><p> \n</div><div class=\"section\" id=\"history\">\n </p>\n<h1><a class=\"anchor\" id=\"history\"></a>\nHistory / Credits</h1>\n<p>hwloc is the evolution and merger of the libtopology (<a href=\"http://runtime.bordeaux.inria.fr/libtopology/\">http://runtime.bordeaux.inria.fr/libtopology/</a>) project and the Portable Linux Processor Affinity (PLPA) (<a href=\"http://www.open-mpi.org/projects/plpa/\">http://www.open-mpi.org/projects/plpa/</a>) project. Because of functional and ideological overlap, these two code bases and ideas were merged and released under the name \"hwloc\" as an Open MPI sub-project.</p>\n<p>libtopology was initially developed by the inria Runtime Team-Project (<a href=\"http://runtime.bordeaux.inria.fr/\">http://runtime.bordeaux.inria.fr/</a>) (headed by Raymond Namyst (<a href=\"http://dept-info.labri.fr/~namyst/\">http://dept-info.labri.fr/~namyst/</a>). PLPA was initially developed by the Open MPI development team as a sub-project. Both are now deprecated in favor of hwloc, which is distributed as an Open MPI sub-project.</p>\n<p> \n</div><div class=\"section\" id=\"further_reading\">\n </p>\n<h1><a class=\"anchor\" id=\"further_reading\"></a>\nFurther Reading</h1>\n<p>The documentation chapters include</p>\n<ul>\n<li>\n<a class=\"el\" href=\"a00361.html\">Terms and Definitions</a> </li>\n<li>\n<a class=\"el\" href=\"a00362.html\">Command-Line Tools</a> </li>\n<li>\n<a class=\"el\" href=\"a00363.html\">Environment Variables</a> </li>\n<li>\n<a class=\"el\" href=\"a00364.html\">CPU and Memory Binding Overview</a> </li>\n<li>\n<a class=\"el\" href=\"a00365.html\">I/O Devices</a> </li>\n<li>\n<a class=\"el\" href=\"a00366.html\">Miscellaneous objects</a> </li>\n<li>\n<a class=\"el\" href=\"a00367.html\">Object attributes</a> </li>\n<li>\n<a class=\"el\" href=\"a00368.html\">Importing and exporting topologies from/to XML files</a> </li>\n<li>\n<a class=\"el\" href=\"a00369.html\">Synthetic topologies</a> </li>\n<li>\n<a class=\"el\" href=\"a00370.html\">Interoperability With Other Software</a> </li>\n<li>\n<a class=\"el\" href=\"a00371.html\">Thread Safety</a> </li>\n<li>\n<a class=\"el\" href=\"a00372.html\">Components and plugins</a> </li>\n<li>\n<a class=\"el\" href=\"a00373.html\">Embedding hwloc in Other Software</a> </li>\n<li>\n<a class=\"el\" href=\"a00374.html\">Frequently Asked Questions</a> </li>\n<li>\n<a class=\"el\" href=\"a00375.html\">Upgrading to the hwloc 2.0 API</a> </li>\n</ul>\n<p>Make sure to have had a look at those too!</p>\n<p> \n</div>\n </p>\n</div></div><!-- contents -->\n</div><!-- PageDoc -->\n<div class=\"ttc\" id=\"aa00202_html_gaa611a77c092e679246afdf9a60d5db8b\"><div class=\"ttname\"><a href=\"a00202.html#gaa611a77c092e679246afdf9a60d5db8b\">hwloc_bitmap_singlify</a></div><div class=\"ttdeci\">int hwloc_bitmap_singlify(hwloc_bitmap_t bitmap)</div><div class=\"ttdoc\">Keep a single index among those set in bitmap bitmap.</div></div>\n<div class=\"ttc\" id=\"aa00187_html_ga80bc07473a8edf840cae17bd7ec21d48\"><div class=\"ttname\"><a href=\"a00187.html#ga80bc07473a8edf840cae17bd7ec21d48\">hwloc_set_cpubind</a></div><div class=\"ttdeci\">int hwloc_set_cpubind(hwloc_topology_t topology, hwloc_const_cpuset_t set, int flags)</div><div class=\"ttdoc\">Bind current process or thread on cpus given in physical bitmap set.</div></div>\n<div class=\"ttc\" id=\"aa00181_html_ggacd37bb612667dc437d66bfb175a8dc55ac793958f330bca371aa1535de8aff45f\"><div class=\"ttname\"><a href=\"a00181.html#ggacd37bb612667dc437d66bfb175a8dc55ac793958f330bca371aa1535de8aff45f\">HWLOC_OBJ_CORE</a></div><div class=\"ttdeci\">@ HWLOC_OBJ_CORE</div><div class=\"ttdoc\">Core. A computation unit (may be shared by several logical processors).</div><div class=\"ttdef\"><b>Definition:</b> hwloc.h:197</div></div>\n<div class=\"ttc\" id=\"aa00183_html_ga9f34a640b6fd28d23699d4d084667b15\"><div class=\"ttname\"><a href=\"a00183.html#ga9f34a640b6fd28d23699d4d084667b15\">hwloc_topology_destroy</a></div><div class=\"ttdeci\">void hwloc_topology_destroy(hwloc_topology_t topology)</div><div class=\"ttdoc\">Terminate and free a topology context.</div></div>\n<div class=\"ttc\" id=\"aa00231_html_a61a7a80a68eaccbaaa28269e678c81a9\"><div class=\"ttname\"><a href=\"a00231.html#a61a7a80a68eaccbaaa28269e678c81a9\">hwloc_obj::os_index</a></div><div class=\"ttdeci\">unsigned os_index</div><div class=\"ttdoc\">OS-provided physical index number. It is not guaranteed unique across the entire machine,...</div><div class=\"ttdef\"><b>Definition:</b> hwloc.h:389</div></div>\n<div class=\"ttc\" id=\"aa00183_html_ga03fd4a16d8b9ee1ffc32b25fd2f6bdfa\"><div class=\"ttname\"><a href=\"a00183.html#ga03fd4a16d8b9ee1ffc32b25fd2f6bdfa\">hwloc_topology_init</a></div><div class=\"ttdeci\">int hwloc_topology_init(hwloc_topology_t *topologyp)</div><div class=\"ttdoc\">Allocate a topology context.</div></div>\n<div class=\"ttc\" id=\"aa00184_html_ga8bec782e21be313750da70cf7428b374\"><div class=\"ttname\"><a href=\"a00184.html#ga8bec782e21be313750da70cf7428b374\">hwloc_get_type_depth</a></div><div class=\"ttdeci\">int hwloc_get_type_depth(hwloc_topology_t topology, hwloc_obj_type_t type)</div><div class=\"ttdoc\">Returns the depth of objects of type type.</div></div>\n<div class=\"ttc\" id=\"aa00231_html_acc4f0803f244867e68fe0036800be5de\"><div class=\"ttname\"><a href=\"a00231.html#acc4f0803f244867e68fe0036800be5de\">hwloc_obj::type</a></div><div class=\"ttdeci\">hwloc_obj_type_t type</div><div class=\"ttdoc\">Type of object.</div><div class=\"ttdef\"><b>Definition:</b> hwloc.h:386</div></div>\n<div class=\"ttc\" id=\"aa00184_html_ga6f414dd80a2b943967a0ac92da3181a2\"><div class=\"ttname\"><a href=\"a00184.html#ga6f414dd80a2b943967a0ac92da3181a2\">hwloc_get_obj_by_type</a></div><div class=\"ttdeci\">static hwloc_obj_t hwloc_get_obj_by_type(hwloc_topology_t topology, hwloc_obj_type_t type, unsigned idx)</div><div class=\"ttdoc\">Returns the topology object at logical index idx with type type.</div></div>\n<div class=\"ttc\" id=\"aa00247_html_abe5e788943ed04302976740c829674c0\"><div class=\"ttname\"><a href=\"a00247.html#abe5e788943ed04302976740c829674c0\">hwloc_obj_attr_u::hwloc_cache_attr_s::size</a></div><div class=\"ttdeci\">hwloc_uint64_t size</div><div class=\"ttdoc\">Size of cache in bytes.</div><div class=\"ttdef\"><b>Definition:</b> hwloc.h:603</div></div>\n<div class=\"ttc\" id=\"aa00188_html_ggac9764f79505775d06407b40f5e4661e8ad811fa4b2a6002c4d63695a408ffde2c\"><div class=\"ttname\"><a href=\"a00188.html#ggac9764f79505775d06407b40f5e4661e8ad811fa4b2a6002c4d63695a408ffde2c\">HWLOC_MEMBIND_BIND</a></div><div class=\"ttdeci\">@ HWLOC_MEMBIND_BIND</div><div class=\"ttdoc\">Allocate memory on the specified nodes.</div><div class=\"ttdef\"><b>Definition:</b> hwloc.h:1390</div></div>\n<div class=\"ttc\" id=\"aa00231_html_accd40e29f71f19e88db62ea3df02adc8\"><div class=\"ttname\"><a href=\"a00231.html#accd40e29f71f19e88db62ea3df02adc8\">hwloc_obj::attr</a></div><div class=\"ttdeci\">union hwloc_obj_attr_u * attr</div><div class=\"ttdoc\">Object type-specific Attributes, may be NULL if no attribute value was found.</div><div class=\"ttdef\"><b>Definition:</b> hwloc.h:403</div></div>\n<div class=\"ttc\" id=\"aa00184_html_ga2d4b12fc187dfc53b35f2fa21d21044d\"><div class=\"ttname\"><a href=\"a00184.html#ga2d4b12fc187dfc53b35f2fa21d21044d\">hwloc_get_root_obj</a></div><div class=\"ttdeci\">static hwloc_obj_t hwloc_get_root_obj(hwloc_topology_t topology)</div><div class=\"ttdoc\">Returns the top-object of the topology-tree.</div></div>\n<div class=\"ttc\" id=\"aa00183_html_ga9d1e76ee15a7dee158b786c30b6a6e38\"><div class=\"ttname\"><a href=\"a00183.html#ga9d1e76ee15a7dee158b786c30b6a6e38\">hwloc_topology_t</a></div><div class=\"ttdeci\">struct hwloc_topology * hwloc_topology_t</div><div class=\"ttdoc\">Topology context.</div><div class=\"ttdef\"><b>Definition:</b> hwloc.h:678</div></div>\n<div class=\"ttc\" id=\"aa00184_html_ga789a3f65aedff644be64a18526a03065\"><div class=\"ttname\"><a href=\"a00184.html#ga789a3f65aedff644be64a18526a03065\">hwloc_get_nbobjs_by_type</a></div><div class=\"ttdeci\">static int hwloc_get_nbobjs_by_type(hwloc_topology_t topology, hwloc_obj_type_t type)</div><div class=\"ttdoc\">Returns the width of level type type.</div></div>\n<div class=\"ttc\" id=\"aa00202_html_ga156130d85b3a0674d6e0e6770fe68fbe\"><div class=\"ttname\"><a href=\"a00202.html#ga156130d85b3a0674d6e0e6770fe68fbe\">hwloc_bitmap_free</a></div><div class=\"ttdeci\">void hwloc_bitmap_free(hwloc_bitmap_t bitmap)</div><div class=\"ttdoc\">Free bitmap bitmap.</div></div>\n<div class=\"ttc\" id=\"aa00231_html\"><div class=\"ttname\"><a href=\"a00231.html\">hwloc_obj</a></div><div class=\"ttdoc\">Structure of a topology object.</div><div class=\"ttdef\"><b>Definition:</b> hwloc.h:384</div></div>\n<div class=\"ttc\" id=\"aa00231_html_aac3f6da35c9b57599909a44ce2b716c1\"><div class=\"ttname\"><a href=\"a00231.html#aac3f6da35c9b57599909a44ce2b716c1\">hwloc_obj::arity</a></div><div class=\"ttdeci\">unsigned arity</div><div class=\"ttdoc\">Number of normal children. Memory, Misc and I/O children are not listed here but rather in their dedi...</div><div class=\"ttdef\"><b>Definition:</b> hwloc.h:440</div></div>\n<div class=\"ttc\" id=\"aa00235_html_a23f553f3252c9d13f2338231cd354ea9\"><div class=\"ttname\"><a href=\"a00235.html#a23f553f3252c9d13f2338231cd354ea9\">hwloc_obj_attr_u::cache</a></div><div class=\"ttdeci\">struct hwloc_obj_attr_u::hwloc_cache_attr_s cache</div></div>\n<div class=\"ttc\" id=\"aa00231_html_a04d05403da37bfe17cd63b7c7dd07b1f\"><div class=\"ttname\"><a href=\"a00231.html#a04d05403da37bfe17cd63b7c7dd07b1f\">hwloc_obj::children</a></div><div class=\"ttdeci\">struct hwloc_obj ** children</div><div class=\"ttdoc\">Normal children, children[0 .. arity -1].</div><div class=\"ttdef\"><b>Definition:</b> hwloc.h:444</div></div>\n<div class=\"ttc\" id=\"aa00195_html_ga2ed589bea28711e80b92066510a5607d\"><div class=\"ttname\"><a href=\"a00195.html#ga2ed589bea28711e80b92066510a5607d\">hwloc_obj_type_is_cache</a></div><div class=\"ttdeci\">int hwloc_obj_type_is_cache(hwloc_obj_type_t type)</div><div class=\"ttdoc\">Check whether an object type is a CPU Cache (Data, Unified or Instruction).</div></div>\n<div class=\"ttc\" id=\"aa00184_html_ga391f6b2613f0065673eaa4069b93d4e0\"><div class=\"ttname\"><a href=\"a00184.html#ga391f6b2613f0065673eaa4069b93d4e0\">hwloc_get_obj_by_depth</a></div><div class=\"ttdeci\">hwloc_obj_t hwloc_get_obj_by_depth(hwloc_topology_t topology, int depth, unsigned idx)</div><div class=\"ttdoc\">Returns the topology object at logical index idx from depth depth.</div></div>\n<div class=\"ttc\" id=\"aa00184_html_ggaf4e663cf42bbe20756b849c6293ef575a0565ab92ab72cb0cec91e23003294aad\"><div class=\"ttname\"><a href=\"a00184.html#ggaf4e663cf42bbe20756b849c6293ef575a0565ab92ab72cb0cec91e23003294aad\">HWLOC_TYPE_DEPTH_UNKNOWN</a></div><div class=\"ttdeci\">@ HWLOC_TYPE_DEPTH_UNKNOWN</div><div class=\"ttdoc\">No object of given type exists in the topology.</div><div class=\"ttdef\"><b>Definition:</b> hwloc.h:808</div></div>\n<div class=\"ttc\" id=\"aa00231_html_a67925e0f2c47f50408fbdb9bddd0790f\"><div class=\"ttname\"><a href=\"a00231.html#a67925e0f2c47f50408fbdb9bddd0790f\">hwloc_obj::cpuset</a></div><div class=\"ttdeci\">hwloc_cpuset_t cpuset</div><div class=\"ttdoc\">CPUs covered by this object.</div><div class=\"ttdef\"><b>Definition:</b> hwloc.h:500</div></div>\n<div class=\"ttc\" id=\"aa00231_html_adc494f6aed939992be1c55cca5822900\"><div class=\"ttname\"><a href=\"a00231.html#adc494f6aed939992be1c55cca5822900\">hwloc_obj::parent</a></div><div class=\"ttdeci\">struct hwloc_obj * parent</div><div class=\"ttdoc\">Parent, NULL if root (Machine object)</div><div class=\"ttdef\"><b>Definition:</b> hwloc.h:434</div></div>\n<div class=\"ttc\" id=\"aa00184_html_ga1d5ceafe8130fe6e8657bf0bc666ba50\"><div class=\"ttname\"><a href=\"a00184.html#ga1d5ceafe8130fe6e8657bf0bc666ba50\">hwloc_get_nbobjs_by_depth</a></div><div class=\"ttdeci\">unsigned hwloc_get_nbobjs_by_depth(hwloc_topology_t topology, int depth)</div><div class=\"ttdoc\">Returns the width of level at depth depth.</div></div>\n<div class=\"ttc\" id=\"aa00185_html_gadb8765c260edea80c52cd06a76639ba4\"><div class=\"ttname\"><a href=\"a00185.html#gadb8765c260edea80c52cd06a76639ba4\">hwloc_obj_type_snprintf</a></div><div class=\"ttdeci\">int hwloc_obj_type_snprintf(char *restrict string, size_t size, hwloc_obj_t obj, int verbose)</div><div class=\"ttdoc\">Stringify the type of a given topology object into a human-readable form.</div></div>\n<div class=\"ttc\" id=\"aa00202_html_gae679434c1a5f41d3560a8a7e2c1b0dee\"><div class=\"ttname\"><a href=\"a00202.html#gae679434c1a5f41d3560a8a7e2c1b0dee\">hwloc_bitmap_dup</a></div><div class=\"ttdeci\">hwloc_bitmap_t hwloc_bitmap_dup(hwloc_const_bitmap_t bitmap)</div><div class=\"ttdoc\">Duplicate bitmap bitmap by allocating a new bitmap and copying bitmap contents.</div></div>\n<div class=\"ttc\" id=\"aa00180_html_ga4bbf39b68b6f568fb92739e7c0ea7801\"><div class=\"ttname\"><a href=\"a00180.html#ga4bbf39b68b6f568fb92739e7c0ea7801\">hwloc_cpuset_t</a></div><div class=\"ttdeci\">hwloc_bitmap_t hwloc_cpuset_t</div><div class=\"ttdoc\">A CPU set is a bitmap whose bits are set according to CPU physical OS indexes.</div><div class=\"ttdef\"><b>Definition:</b> hwloc.h:140</div></div>\n<div class=\"ttc\" id=\"aa00188_html_gaf881faefe20701229f07dd7dbd0125ed\"><div class=\"ttname\"><a href=\"a00188.html#gaf881faefe20701229f07dd7dbd0125ed\">hwloc_set_area_membind</a></div><div class=\"ttdeci\">int hwloc_set_area_membind(hwloc_topology_t topology, const void *addr, size_t len, hwloc_const_bitmap_t set, hwloc_membind_policy_t policy, int flags)</div><div class=\"ttdoc\">Bind the already-allocated memory identified by (addr, len) to the NUMA node(s) specified by set.</div></div>\n<div class=\"ttc\" id=\"aa00181_html_ggacd37bb612667dc437d66bfb175a8dc55ab16ab8c0dbffc234921d86f3dfb63129\"><div class=\"ttname\"><a href=\"a00181.html#ggacd37bb612667dc437d66bfb175a8dc55ab16ab8c0dbffc234921d86f3dfb63129\">HWLOC_OBJ_PACKAGE</a></div><div class=\"ttdeci\">@ HWLOC_OBJ_PACKAGE</div><div class=\"ttdoc\">Physical package. The physical package that usually gets inserted into a socket on the motherboard....</div><div class=\"ttdef\"><b>Definition:</b> hwloc.h:191</div></div>\n<div class=\"ttc\" id=\"aa00202_html_ga0fece972134fdecf2da9bc7a11dd827e\"><div class=\"ttname\"><a href=\"a00202.html#ga0fece972134fdecf2da9bc7a11dd827e\">hwloc_bitmap_asprintf</a></div><div class=\"ttdeci\">int hwloc_bitmap_asprintf(char **strp, hwloc_const_bitmap_t bitmap)</div><div class=\"ttdoc\">Stringify a bitmap into a newly allocated string.</div></div>\n<div class=\"ttc\" id=\"aa00184_html_ga8125328e69eba709c33ea8055c12589b\"><div class=\"ttname\"><a href=\"a00184.html#ga8125328e69eba709c33ea8055c12589b\">hwloc_get_type_or_below_depth</a></div><div class=\"ttdeci\">static int hwloc_get_type_or_below_depth(hwloc_topology_t topology, hwloc_obj_type_t type)</div><div class=\"ttdoc\">Returns the depth of objects of type type or below.</div></div>\n<div class=\"ttc\" id=\"aa00183_html_gabdf58d87ad77f6615fccdfe0535ff826\"><div class=\"ttname\"><a href=\"a00183.html#gabdf58d87ad77f6615fccdfe0535ff826\">hwloc_topology_load</a></div><div class=\"ttdeci\">int hwloc_topology_load(hwloc_topology_t topology)</div><div class=\"ttdoc\">Build the actual topology.</div></div>\n<div class=\"ttc\" id=\"aa00188_html_ga32dbd4f54e9e4a7179f2dde37ffe6ad7\"><div class=\"ttname\"><a href=\"a00188.html#ga32dbd4f54e9e4a7179f2dde37ffe6ad7\">hwloc_free</a></div><div class=\"ttdeci\">int hwloc_free(hwloc_topology_t topology, void *addr, size_t len)</div><div class=\"ttdoc\">Free memory that was previously allocated by hwloc_alloc() or hwloc_alloc_membind().</div></div>\n<div class=\"ttc\" id=\"aa00231_html_a08f0d0e16c619a6e653526cbee4ffea3\"><div class=\"ttname\"><a href=\"a00231.html#a08f0d0e16c619a6e653526cbee4ffea3\">hwloc_obj::nodeset</a></div><div class=\"ttdeci\">hwloc_nodeset_t nodeset</div><div class=\"ttdoc\">NUMA nodes covered by this object or containing this object.</div><div class=\"ttdef\"><b>Definition:</b> hwloc.h:528</div></div>\n<div class=\"ttc\" id=\"aa00185_html_ga870e876931c282a1c7aee2f031912ce3\"><div class=\"ttname\"><a href=\"a00185.html#ga870e876931c282a1c7aee2f031912ce3\">hwloc_obj_attr_snprintf</a></div><div class=\"ttdeci\">int hwloc_obj_attr_snprintf(char *restrict string, size_t size, hwloc_obj_t obj, const char *restrict separator, int verbose)</div><div class=\"ttdoc\">Stringify the attributes of a given topology object into a human-readable form.</div></div>\n<div class=\"ttc\" id=\"aa00188_html_ggab00475fd98815bf4fb9aaf752030e7d2a71f19fe4505f1c083dc8e6f7bdea6256\"><div class=\"ttname\"><a href=\"a00188.html#ggab00475fd98815bf4fb9aaf752030e7d2a71f19fe4505f1c083dc8e6f7bdea6256\">HWLOC_MEMBIND_BYNODESET</a></div><div class=\"ttdeci\">@ HWLOC_MEMBIND_BYNODESET</div><div class=\"ttdoc\">Consider the bitmap argument as a nodeset.</div><div class=\"ttdef\"><b>Definition:</b> hwloc.h:1478</div></div>\n<div class=\"ttc\" id=\"aa00188_html_ga04736461780fadcf193af218c0122273\"><div class=\"ttname\"><a href=\"a00188.html#ga04736461780fadcf193af218c0122273\">hwloc_alloc_membind</a></div><div class=\"ttdeci\">void * hwloc_alloc_membind(hwloc_topology_t topology, size_t len, hwloc_const_bitmap_t set, hwloc_membind_policy_t policy, int flags)</div><div class=\"ttdoc\">Allocate some memory on NUMA memory nodes specified by set.</div></div>\n<div class=\"ttc\" id=\"aa00181_html_ggacd37bb612667dc437d66bfb175a8dc55a9d917a3e5497950c6d8948b8e183db5a\"><div class=\"ttname\"><a href=\"a00181.html#ggacd37bb612667dc437d66bfb175a8dc55a9d917a3e5497950c6d8948b8e183db5a\">HWLOC_OBJ_NUMANODE</a></div><div class=\"ttdeci\">@ HWLOC_OBJ_NUMANODE</div><div class=\"ttdoc\">NUMA node. An object that contains memory that is directly and byte-accessible to the host processors...</div><div class=\"ttdef\"><b>Definition:</b> hwloc.h:236</div></div>\n<div class=\"ttc\" id=\"aa00181_html_ggacd37bb612667dc437d66bfb175a8dc55abca6887e80cb291353b0a0c1da83f661\"><div class=\"ttname\"><a href=\"a00181.html#ggacd37bb612667dc437d66bfb175a8dc55abca6887e80cb291353b0a0c1da83f661\">HWLOC_OBJ_PU</a></div><div class=\"ttdeci\">@ HWLOC_OBJ_PU</div><div class=\"ttdoc\">Processing Unit, or (Logical) Processor. An execution unit (may share a core with some other logical ...</div><div class=\"ttdef\"><b>Definition:</b> hwloc.h:201</div></div>\n<div class=\"ttc\" id=\"aa00231_html_a4876fd165b4fff35521f07ebd85355ed\"><div class=\"ttname\"><a href=\"a00231.html#a4876fd165b4fff35521f07ebd85355ed\">hwloc_obj::depth</a></div><div class=\"ttdeci\">int depth</div><div class=\"ttdoc\">Vertical index in the hierarchy.</div><div class=\"ttdef\"><b>Definition:</b> hwloc.h:407</div></div>\n<div class=\"ttc\" id=\"aa00184_html_gae54d1782ca9b54bea915f5c18a9158fa\"><div class=\"ttname\"><a href=\"a00184.html#gae54d1782ca9b54bea915f5c18a9158fa\">hwloc_topology_get_depth</a></div><div class=\"ttdeci\">int hwloc_topology_get_depth(hwloc_topology_t restrict topology)</div><div class=\"ttdoc\">Get the depth of the hierarchical tree of objects.</div></div>\n<!-- start footer part -->\n<hr class=\"footer\"/><address class=\"footer\"><small>\nGenerated by &#160;<a href=\"http://www.doxygen.org/index.html\">\n<img class=\"footer\" src=\"doxygen.png\" alt=\"doxygen\"/>\n</a> 1.8.17\n</small></address>\n</body>\n</html>\n",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/doc/doxygen-doc/html/a00223.html": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/xhtml;charset=UTF-8\"/>\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=9\"/>\n<meta name=\"generator\" content=\"Doxygen 1.8.17\"/>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"/>\n<title>Hardware Locality (hwloc): Components and Plugins: Core functions to be used by components</title>\n<link href=\"tabs.css\" rel=\"stylesheet\" type=\"text/css\"/>\n<script type=\"text/javascript\" src=\"jquery.js\"></script>\n<script type=\"text/javascript\" src=\"dynsections.js\"></script>\n<link href=\"doxygen.css\" rel=\"stylesheet\" type=\"text/css\" />\n</head>\n<body>\n<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n<div id=\"titlearea\">\n<table cellspacing=\"0\" cellpadding=\"0\">\n <tbody>\n <tr style=\"height: 56px;\">\n  <td id=\"projectalign\" style=\"padding-left: 0.5em;\">\n   <div id=\"projectname\">Hardware Locality (hwloc)\n   &#160;<span id=\"projectnumber\">2.2.0</span>\n   </div>\n  </td>\n </tr>\n </tbody>\n</table>\n</div>\n<!-- end header part -->\n<!-- Generated by Doxygen 1.8.17 -->\n<script type=\"text/javascript\" src=\"menudata.js\"></script>\n<script type=\"text/javascript\" src=\"menu.js\"></script>\n<script type=\"text/javascript\">\n/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */\n$(function() {\n  initMenu('',false,false,'search.php','Search');\n});\n/* @license-end */</script>\n<div id=\"main-nav\"></div>\n</div><!-- top -->\n<div class=\"header\">\n  <div class=\"summary\">\n<a href=\"#typedef-members\">Typedefs</a> &#124;\n<a href=\"#func-members\">Functions</a>  </div>\n  <div class=\"headertitle\">\n<div class=\"title\">Components and Plugins: Core functions to be used by components</div>  </div>\n</div><!--header-->\n<div class=\"contents\">\n<table class=\"memberdecls\">\n<tr class=\"heading\"><td colspan=\"2\"><h2 class=\"groupheader\"><a name=\"typedef-members\"></a>\nTypedefs</h2></td></tr>\n<tr class=\"memitem:ga1ac8191022b0d3b1bf0070e11d1f1155\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">typedef void(*&#160;</td><td class=\"memItemRight\" valign=\"bottom\"><a class=\"el\" href=\"a00223.html#ga1ac8191022b0d3b1bf0070e11d1f1155\">hwloc_report_error_t</a>) (const char *msg, int line)</td></tr>\n<tr class=\"separator:ga1ac8191022b0d3b1bf0070e11d1f1155\"><td class=\"memSeparator\" colspan=\"2\">&#160;</td></tr>\n</table><table class=\"memberdecls\">\n<tr class=\"heading\"><td colspan=\"2\"><h2 class=\"groupheader\"><a name=\"func-members\"></a>\nFunctions</h2></td></tr>\n<tr class=\"memitem:gafd853fd67e12c32916201d8303ef39d2\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">struct <a class=\"el\" href=\"a00231.html\">hwloc_obj</a> *&#160;</td><td class=\"memItemRight\" valign=\"bottom\"><a class=\"el\" href=\"a00223.html#gafd853fd67e12c32916201d8303ef39d2\">hwloc_insert_object_by_cpuset</a> (struct hwloc_topology *topology, <a class=\"el\" href=\"a00182.html#ga79b8ab56877ef99ac59b833203391c7d\">hwloc_obj_t</a> obj)</td></tr>\n<tr class=\"separator:gafd853fd67e12c32916201d8303ef39d2\"><td class=\"memSeparator\" colspan=\"2\">&#160;</td></tr>\n<tr class=\"memitem:ga3ae154590328522a864f4a7fb453b562\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">void&#160;</td><td class=\"memItemRight\" valign=\"bottom\"><a class=\"el\" href=\"a00223.html#ga3ae154590328522a864f4a7fb453b562\">hwloc_report_os_error</a> (const char *msg, int line)</td></tr>\n<tr class=\"separator:ga3ae154590328522a864f4a7fb453b562\"><td class=\"memSeparator\" colspan=\"2\">&#160;</td></tr>\n<tr class=\"memitem:gab527c1e0f243f057d31a724794ad9f88\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">int&#160;</td><td class=\"memItemRight\" valign=\"bottom\"><a class=\"el\" href=\"a00223.html#gab527c1e0f243f057d31a724794ad9f88\">hwloc_hide_errors</a> (void)</td></tr>\n<tr class=\"separator:gab527c1e0f243f057d31a724794ad9f88\"><td class=\"memSeparator\" colspan=\"2\">&#160;</td></tr>\n<tr class=\"memitem:ga9f789a1bd5d5d45e1c0e26305164248b\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">struct <a class=\"el\" href=\"a00231.html\">hwloc_obj</a> *&#160;</td><td class=\"memItemRight\" valign=\"bottom\"><a class=\"el\" href=\"a00223.html#ga9f789a1bd5d5d45e1c0e26305164248b\">hwloc__insert_object_by_cpuset</a> (struct hwloc_topology *topology, <a class=\"el\" href=\"a00182.html#ga79b8ab56877ef99ac59b833203391c7d\">hwloc_obj_t</a> root, <a class=\"el\" href=\"a00182.html#ga79b8ab56877ef99ac59b833203391c7d\">hwloc_obj_t</a> obj, <a class=\"el\" href=\"a00223.html#ga1ac8191022b0d3b1bf0070e11d1f1155\">hwloc_report_error_t</a> report_error)</td></tr>\n<tr class=\"separator:ga9f789a1bd5d5d45e1c0e26305164248b\"><td class=\"memSeparator\" colspan=\"2\">&#160;</td></tr>\n<tr class=\"memitem:ga0ef97debde503b56367689b07bb3e901\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">void&#160;</td><td class=\"memItemRight\" valign=\"bottom\"><a class=\"el\" href=\"a00223.html#ga0ef97debde503b56367689b07bb3e901\">hwloc_insert_object_by_parent</a> (struct hwloc_topology *topology, <a class=\"el\" href=\"a00182.html#ga79b8ab56877ef99ac59b833203391c7d\">hwloc_obj_t</a> parent, <a class=\"el\" href=\"a00182.html#ga79b8ab56877ef99ac59b833203391c7d\">hwloc_obj_t</a> obj)</td></tr>\n<tr class=\"separator:ga0ef97debde503b56367689b07bb3e901\"><td class=\"memSeparator\" colspan=\"2\">&#160;</td></tr>\n<tr class=\"memitem:ga0b5c75b2dc37cea2e8a29c4812baf4b3\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\"><a class=\"el\" href=\"a00182.html#ga79b8ab56877ef99ac59b833203391c7d\">hwloc_obj_t</a>&#160;</td><td class=\"memItemRight\" valign=\"bottom\"><a class=\"el\" href=\"a00223.html#ga0b5c75b2dc37cea2e8a29c4812baf4b3\">hwloc_alloc_setup_object</a> (<a class=\"el\" href=\"a00183.html#ga9d1e76ee15a7dee158b786c30b6a6e38\">hwloc_topology_t</a> topology, <a class=\"el\" href=\"a00181.html#gacd37bb612667dc437d66bfb175a8dc55\">hwloc_obj_type_t</a> type, unsigned os_index)</td></tr>\n<tr class=\"separator:ga0b5c75b2dc37cea2e8a29c4812baf4b3\"><td class=\"memSeparator\" colspan=\"2\">&#160;</td></tr>\n<tr class=\"memitem:ga754b61041ceee9685534a2c5d3cd0156\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">int&#160;</td><td class=\"memItemRight\" valign=\"bottom\"><a class=\"el\" href=\"a00223.html#ga754b61041ceee9685534a2c5d3cd0156\">hwloc_obj_add_children_sets</a> (<a class=\"el\" href=\"a00182.html#ga79b8ab56877ef99ac59b833203391c7d\">hwloc_obj_t</a> obj)</td></tr>\n<tr class=\"separator:ga754b61041ceee9685534a2c5d3cd0156\"><td class=\"memSeparator\" colspan=\"2\">&#160;</td></tr>\n<tr class=\"memitem:ga120d8bd74922e1030b621409a6b0be61\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">int&#160;</td><td class=\"memItemRight\" valign=\"bottom\"><a class=\"el\" href=\"a00223.html#ga120d8bd74922e1030b621409a6b0be61\">hwloc_topology_reconnect</a> (<a class=\"el\" href=\"a00183.html#ga9d1e76ee15a7dee158b786c30b6a6e38\">hwloc_topology_t</a> topology, unsigned long flags)</td></tr>\n<tr class=\"separator:ga120d8bd74922e1030b621409a6b0be61\"><td class=\"memSeparator\" colspan=\"2\">&#160;</td></tr>\n<tr class=\"memitem:gac2eaed287bb215cf0bd33014e9e1d374\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">static int&#160;</td><td class=\"memItemRight\" valign=\"bottom\"><a class=\"el\" href=\"a00223.html#gac2eaed287bb215cf0bd33014e9e1d374\">hwloc_plugin_check_namespace</a> (const char *pluginname, const char *symbol)</td></tr>\n<tr class=\"separator:gac2eaed287bb215cf0bd33014e9e1d374\"><td class=\"memSeparator\" colspan=\"2\">&#160;</td></tr>\n</table>\n<a name=\"details\" id=\"details\"></a><h2 class=\"groupheader\">Detailed Description</h2>\n<h2 class=\"groupheader\">Typedef Documentation</h2>\n<a id=\"ga1ac8191022b0d3b1bf0070e11d1f1155\"></a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#ga1ac8191022b0d3b1bf0070e11d1f1155\">&#9670;&nbsp;</a></span>hwloc_report_error_t</h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tr>\n          <td class=\"memname\">typedef void(* hwloc_report_error_t) (const char *msg, int line)</td>\n        </tr>\n      </table>\n</div><div class=\"memdoc\">\n\n<p>Type of error callbacks during object insertion. </p>\n\n</div>\n</div>\n<h2 class=\"groupheader\">Function Documentation</h2>\n<a id=\"ga9f789a1bd5d5d45e1c0e26305164248b\"></a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#ga9f789a1bd5d5d45e1c0e26305164248b\">&#9670;&nbsp;</a></span>hwloc__insert_object_by_cpuset()</h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tr>\n          <td class=\"memname\">struct <a class=\"el\" href=\"a00231.html\">hwloc_obj</a>* hwloc__insert_object_by_cpuset </td>\n          <td>(</td>\n          <td class=\"paramtype\">struct hwloc_topology *&#160;</td>\n          <td class=\"paramname\"><em>topology</em>, </td>\n        </tr>\n        <tr>\n          <td class=\"paramkey\"></td>\n          <td></td>\n          <td class=\"paramtype\"><a class=\"el\" href=\"a00182.html#ga79b8ab56877ef99ac59b833203391c7d\">hwloc_obj_t</a>&#160;</td>\n          <td class=\"paramname\"><em>root</em>, </td>\n        </tr>\n        <tr>\n          <td class=\"paramkey\"></td>\n          <td></td>\n          <td class=\"paramtype\"><a class=\"el\" href=\"a00182.html#ga79b8ab56877ef99ac59b833203391c7d\">hwloc_obj_t</a>&#160;</td>\n          <td class=\"paramname\"><em>obj</em>, </td>\n        </tr>\n        <tr>\n          <td class=\"paramkey\"></td>\n          <td></td>\n          <td class=\"paramtype\"><a class=\"el\" href=\"a00223.html#ga1ac8191022b0d3b1bf0070e11d1f1155\">hwloc_report_error_t</a>&#160;</td>\n          <td class=\"paramname\"><em>report_error</em>&#160;</td>\n        </tr>\n        <tr>\n          <td></td>\n          <td>)</td>\n          <td></td><td></td>\n        </tr>\n      </table>\n</div><div class=\"memdoc\">\n\n<p>Add an object to the topology and specify which error callback to use. </p>\n<p>This function is similar to <a class=\"el\" href=\"a00223.html#gafd853fd67e12c32916201d8303ef39d2\" title=\"Add an object to the topology.\">hwloc_insert_object_by_cpuset()</a> but it allows specifying where to start insertion from (if <code>root</code> is NULL, the topology root object is used), and specifying the error callback. </p>\n\n</div>\n</div>\n<a id=\"ga0b5c75b2dc37cea2e8a29c4812baf4b3\"></a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#ga0b5c75b2dc37cea2e8a29c4812baf4b3\">&#9670;&nbsp;</a></span>hwloc_alloc_setup_object()</h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tr>\n          <td class=\"memname\"><a class=\"el\" href=\"a00182.html#ga79b8ab56877ef99ac59b833203391c7d\">hwloc_obj_t</a> hwloc_alloc_setup_object </td>\n          <td>(</td>\n          <td class=\"paramtype\"><a class=\"el\" href=\"a00183.html#ga9d1e76ee15a7dee158b786c30b6a6e38\">hwloc_topology_t</a>&#160;</td>\n          <td class=\"paramname\"><em>topology</em>, </td>\n        </tr>\n        <tr>\n          <td class=\"paramkey\"></td>\n          <td></td>\n          <td class=\"paramtype\"><a class=\"el\" href=\"a00181.html#gacd37bb612667dc437d66bfb175a8dc55\">hwloc_obj_type_t</a>&#160;</td>\n          <td class=\"paramname\"><em>type</em>, </td>\n        </tr>\n        <tr>\n          <td class=\"paramkey\"></td>\n          <td></td>\n          <td class=\"paramtype\">unsigned&#160;</td>\n          <td class=\"paramname\"><em>os_index</em>&#160;</td>\n        </tr>\n        <tr>\n          <td></td>\n          <td>)</td>\n          <td></td><td></td>\n        </tr>\n      </table>\n</div><div class=\"memdoc\">\n\n<p>Allocate and initialize an object of the given type and physical index. </p>\n<p>If <code>os_index</code> is unknown or irrelevant, use <code>HWLOC_UNKNOWN_INDEX</code>. </p>\n\n</div>\n</div>\n<a id=\"gab527c1e0f243f057d31a724794ad9f88\"></a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#gab527c1e0f243f057d31a724794ad9f88\">&#9670;&nbsp;</a></span>hwloc_hide_errors()</h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tr>\n          <td class=\"memname\">int hwloc_hide_errors </td>\n          <td>(</td>\n          <td class=\"paramtype\">void&#160;</td>\n          <td class=\"paramname\"></td><td>)</td>\n          <td></td>\n        </tr>\n      </table>\n</div><div class=\"memdoc\">\n\n<p>Check whether insertion errors are hidden. </p>\n\n</div>\n</div>\n<a id=\"gafd853fd67e12c32916201d8303ef39d2\"></a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#gafd853fd67e12c32916201d8303ef39d2\">&#9670;&nbsp;</a></span>hwloc_insert_object_by_cpuset()</h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tr>\n          <td class=\"memname\">struct <a class=\"el\" href=\"a00231.html\">hwloc_obj</a>* hwloc_insert_object_by_cpuset </td>\n          <td>(</td>\n          <td class=\"paramtype\">struct hwloc_topology *&#160;</td>\n          <td class=\"paramname\"><em>topology</em>, </td>\n        </tr>\n        <tr>\n          <td class=\"paramkey\"></td>\n          <td></td>\n          <td class=\"paramtype\"><a class=\"el\" href=\"a00182.html#ga79b8ab56877ef99ac59b833203391c7d\">hwloc_obj_t</a>&#160;</td>\n          <td class=\"paramname\"><em>obj</em>&#160;</td>\n        </tr>\n        <tr>\n          <td></td>\n          <td>)</td>\n          <td></td><td></td>\n        </tr>\n      </table>\n</div><div class=\"memdoc\">\n\n<p>Add an object to the topology. </p>\n<p>It is sorted along the tree of other objects according to the inclusion of cpusets, to eventually be added as a child of the smallest object including this object.</p>\n<p>If the cpuset is empty, the type of the object (and maybe some attributes) must be enough to find where to insert the object. This is especially true for NUMA nodes with memory and no CPUs.</p>\n<p>The given object should not have children.</p>\n<p>This shall only be called before levels are built.</p>\n<p>In case of error, <a class=\"el\" href=\"a00223.html#ga3ae154590328522a864f4a7fb453b562\" title=\"Report an insertion error from a backend.\">hwloc_report_os_error()</a> is called.</p>\n<p>The caller should check whether the object type is filtered-out before calling this function.</p>\n<p>The topology cpuset/nodesets will be enlarged to include the object sets.</p>\n<p>Returns the object on success. Returns NULL and frees obj on error. Returns another object and frees obj if it was merged with an identical pre-existing object. </p>\n\n</div>\n</div>\n<a id=\"ga0ef97debde503b56367689b07bb3e901\"></a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#ga0ef97debde503b56367689b07bb3e901\">&#9670;&nbsp;</a></span>hwloc_insert_object_by_parent()</h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tr>\n          <td class=\"memname\">void hwloc_insert_object_by_parent </td>\n          <td>(</td>\n          <td class=\"paramtype\">struct hwloc_topology *&#160;</td>\n          <td class=\"paramname\"><em>topology</em>, </td>\n        </tr>\n        <tr>\n          <td class=\"paramkey\"></td>\n          <td></td>\n          <td class=\"paramtype\"><a class=\"el\" href=\"a00182.html#ga79b8ab56877ef99ac59b833203391c7d\">hwloc_obj_t</a>&#160;</td>\n          <td class=\"paramname\"><em>parent</em>, </td>\n        </tr>\n        <tr>\n          <td class=\"paramkey\"></td>\n          <td></td>\n          <td class=\"paramtype\"><a class=\"el\" href=\"a00182.html#ga79b8ab56877ef99ac59b833203391c7d\">hwloc_obj_t</a>&#160;</td>\n          <td class=\"paramname\"><em>obj</em>&#160;</td>\n        </tr>\n        <tr>\n          <td></td>\n          <td>)</td>\n          <td></td><td></td>\n        </tr>\n      </table>\n</div><div class=\"memdoc\">\n\n<p>Insert an object somewhere in the topology. </p>\n<p>It is added as the last child of the given parent. The cpuset is completely ignored, so strange objects such as I/O devices should preferably be inserted with this.</p>\n<p>When used for \"normal\" children with cpusets (when importing from XML when duplicating a topology), the caller should make sure that:</p><ul>\n<li>children are inserted in order,</li>\n<li>children cpusets do not intersect.</li>\n</ul>\n<p>The given object may have normal, I/O or Misc children, as long as they are in order as well. These children must have valid parent and next_sibling pointers.</p>\n<p>The caller should check whether the object type is filtered-out before calling this function. </p>\n\n</div>\n</div>\n<a id=\"ga754b61041ceee9685534a2c5d3cd0156\"></a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#ga754b61041ceee9685534a2c5d3cd0156\">&#9670;&nbsp;</a></span>hwloc_obj_add_children_sets()</h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tr>\n          <td class=\"memname\">int hwloc_obj_add_children_sets </td>\n          <td>(</td>\n          <td class=\"paramtype\"><a class=\"el\" href=\"a00182.html#ga79b8ab56877ef99ac59b833203391c7d\">hwloc_obj_t</a>&#160;</td>\n          <td class=\"paramname\"><em>obj</em></td><td>)</td>\n          <td></td>\n        </tr>\n      </table>\n</div><div class=\"memdoc\">\n\n<p>Setup object cpusets/nodesets by OR'ing its children. </p>\n<p>Used when adding an object late in the topology. Will update the new object by OR'ing all its new children sets.</p>\n<p>Used when PCI backend adds a hostbridge parent, when distances add a new Group, etc. </p>\n\n</div>\n</div>\n<a id=\"gac2eaed287bb215cf0bd33014e9e1d374\"></a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#gac2eaed287bb215cf0bd33014e9e1d374\">&#9670;&nbsp;</a></span>hwloc_plugin_check_namespace()</h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n<table class=\"mlabels\">\n  <tr>\n  <td class=\"mlabels-left\">\n      <table class=\"memname\">\n        <tr>\n          <td class=\"memname\">static int hwloc_plugin_check_namespace </td>\n          <td>(</td>\n          <td class=\"paramtype\">const char *&#160;</td>\n          <td class=\"paramname\"><em>pluginname</em>, </td>\n        </tr>\n        <tr>\n          <td class=\"paramkey\"></td>\n          <td></td>\n          <td class=\"paramtype\">const char *&#160;</td>\n          <td class=\"paramname\"><em>symbol</em>&#160;</td>\n        </tr>\n        <tr>\n          <td></td>\n          <td>)</td>\n          <td></td><td></td>\n        </tr>\n      </table>\n  </td>\n  <td class=\"mlabels-right\">\n<span class=\"mlabels\"><span class=\"mlabel\">inline</span><span class=\"mlabel\">static</span></span>  </td>\n  </tr>\n</table>\n</div><div class=\"memdoc\">\n\n<p>Make sure that plugins can lookup core symbols. </p>\n<p>This is a sanity check to avoid lazy-lookup failures when libhwloc is loaded within a plugin, and later tries to load its own plugins. This may fail (and abort the program) if libhwloc symbols are in a private namespace.</p>\n<dl class=\"section return\"><dt>Returns</dt><dd>0 on success. </dd>\n<dd>\n-1 if the plugin cannot be successfully loaded. The caller plugin init() callback should return a negative error code as well.</dd></dl>\n<p>Plugins should call this function in their init() callback to avoid later crashes if lazy symbol resolution is used by the upper layer that loaded hwloc (e.g. OpenCL implementations using dlopen with RTLD_LAZY).</p>\n<dl class=\"section note\"><dt>Note</dt><dd>The build system must define HWLOC_INSIDE_PLUGIN if and only if building the caller as a plugin.</dd>\n<dd>\nThis function should remain inline so plugins can call it even when they cannot find libhwloc symbols. </dd></dl>\n\n</div>\n</div>\n<a id=\"ga3ae154590328522a864f4a7fb453b562\"></a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#ga3ae154590328522a864f4a7fb453b562\">&#9670;&nbsp;</a></span>hwloc_report_os_error()</h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tr>\n          <td class=\"memname\">void hwloc_report_os_error </td>\n          <td>(</td>\n          <td class=\"paramtype\">const char *&#160;</td>\n          <td class=\"paramname\"><em>msg</em>, </td>\n        </tr>\n        <tr>\n          <td class=\"paramkey\"></td>\n          <td></td>\n          <td class=\"paramtype\">int&#160;</td>\n          <td class=\"paramname\"><em>line</em>&#160;</td>\n        </tr>\n        <tr>\n          <td></td>\n          <td>)</td>\n          <td></td><td></td>\n        </tr>\n      </table>\n</div><div class=\"memdoc\">\n\n<p>Report an insertion error from a backend. </p>\n\n</div>\n</div>\n<a id=\"ga120d8bd74922e1030b621409a6b0be61\"></a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#ga120d8bd74922e1030b621409a6b0be61\">&#9670;&nbsp;</a></span>hwloc_topology_reconnect()</h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tr>\n          <td class=\"memname\">int hwloc_topology_reconnect </td>\n          <td>(</td>\n          <td class=\"paramtype\"><a class=\"el\" href=\"a00183.html#ga9d1e76ee15a7dee158b786c30b6a6e38\">hwloc_topology_t</a>&#160;</td>\n          <td class=\"paramname\"><em>topology</em>, </td>\n        </tr>\n        <tr>\n          <td class=\"paramkey\"></td>\n          <td></td>\n          <td class=\"paramtype\">unsigned long&#160;</td>\n          <td class=\"paramname\"><em>flags</em>&#160;</td>\n        </tr>\n        <tr>\n          <td></td>\n          <td>)</td>\n          <td></td><td></td>\n        </tr>\n      </table>\n</div><div class=\"memdoc\">\n\n<p>Request a reconnection of children and levels in the topology. </p>\n<p>May be used by backends during discovery if they need arrays or lists of object within levels or children to be fully connected.</p>\n<p><code>flags</code> is currently unused, must 0. </p>\n\n</div>\n</div>\n</div><!-- contents -->\n<!-- start footer part -->\n<hr class=\"footer\"/><address class=\"footer\"><small>\nGenerated by &#160;<a href=\"http://www.doxygen.org/index.html\">\n<img class=\"footer\" src=\"doxygen.png\" alt=\"doxygen\"/>\n</a> 1.8.17\n</small></address>\n</body>\n</html>\n",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/doc/doxygen-doc/man/man3/hwlocality_components_core_funcs.3": ".TH \"hwlocality_components_core_funcs\" 3 \"Mon Mar 30 2020\" \"Version 2.2.0\" \"Hardware Locality (hwloc)\" \\\" -*- nroff -*-\n.ad l\n.nh\n.SH NAME\nhwlocality_components_core_funcs\n.SH SYNOPSIS\n.br\n.PP\n.SS \"Typedefs\"\n\n.in +1c\n.ti -1c\n.RI \"typedef void(* \\fBhwloc_report_error_t\\fP) (const char *msg, int line)\"\n.br\n.in -1c\n.SS \"Functions\"\n\n.in +1c\n.ti -1c\n.RI \"struct \\fBhwloc_obj\\fP * \\fBhwloc_insert_object_by_cpuset\\fP (struct hwloc_topology *topology, \\fBhwloc_obj_t\\fP obj)\"\n.br\n.ti -1c\n.RI \"void \\fBhwloc_report_os_error\\fP (const char *msg, int line)\"\n.br\n.ti -1c\n.RI \"int \\fBhwloc_hide_errors\\fP (void)\"\n.br\n.ti -1c\n.RI \"struct \\fBhwloc_obj\\fP * \\fBhwloc__insert_object_by_cpuset\\fP (struct hwloc_topology *topology, \\fBhwloc_obj_t\\fP root, \\fBhwloc_obj_t\\fP obj, \\fBhwloc_report_error_t\\fP report_error)\"\n.br\n.ti -1c\n.RI \"void \\fBhwloc_insert_object_by_parent\\fP (struct hwloc_topology *topology, \\fBhwloc_obj_t\\fP parent, \\fBhwloc_obj_t\\fP obj)\"\n.br\n.ti -1c\n.RI \"\\fBhwloc_obj_t\\fP \\fBhwloc_alloc_setup_object\\fP (\\fBhwloc_topology_t\\fP topology, \\fBhwloc_obj_type_t\\fP type, unsigned os_index)\"\n.br\n.ti -1c\n.RI \"int \\fBhwloc_obj_add_children_sets\\fP (\\fBhwloc_obj_t\\fP obj)\"\n.br\n.ti -1c\n.RI \"int \\fBhwloc_topology_reconnect\\fP (\\fBhwloc_topology_t\\fP topology, unsigned long flags)\"\n.br\n.ti -1c\n.RI \"static int \\fBhwloc_plugin_check_namespace\\fP (const char *pluginname, const char *symbol)\"\n.br\n.in -1c\n.SH \"Detailed Description\"\n.PP \n\n.SH \"Typedef Documentation\"\n.PP \n.SS \"typedef void(* hwloc_report_error_t) (const char *msg, int line)\"\n\n.PP\nType of error callbacks during object insertion\\&. \n.SH \"Function Documentation\"\n.PP \n.SS \"struct \\fBhwloc_obj\\fP* hwloc__insert_object_by_cpuset (struct hwloc_topology * topology, \\fBhwloc_obj_t\\fP root, \\fBhwloc_obj_t\\fP obj, \\fBhwloc_report_error_t\\fP report_error)\"\n\n.PP\nAdd an object to the topology and specify which error callback to use\\&. This function is similar to \\fBhwloc_insert_object_by_cpuset()\\fP but it allows specifying where to start insertion from (if \\fCroot\\fP is NULL, the topology root object is used), and specifying the error callback\\&. \n.SS \"\\fBhwloc_obj_t\\fP hwloc_alloc_setup_object (\\fBhwloc_topology_t\\fP topology, \\fBhwloc_obj_type_t\\fP type, unsigned os_index)\"\n\n.PP\nAllocate and initialize an object of the given type and physical index\\&. If \\fCos_index\\fP is unknown or irrelevant, use \\fCHWLOC_UNKNOWN_INDEX\\fP\\&. \n.SS \"int hwloc_hide_errors (void)\"\n\n.PP\nCheck whether insertion errors are hidden\\&. \n.SS \"struct \\fBhwloc_obj\\fP* hwloc_insert_object_by_cpuset (struct hwloc_topology * topology, \\fBhwloc_obj_t\\fP obj)\"\n\n.PP\nAdd an object to the topology\\&. It is sorted along the tree of other objects according to the inclusion of cpusets, to eventually be added as a child of the smallest object including this object\\&.\n.PP\nIf the cpuset is empty, the type of the object (and maybe some attributes) must be enough to find where to insert the object\\&. This is especially true for NUMA nodes with memory and no CPUs\\&.\n.PP\nThe given object should not have children\\&.\n.PP\nThis shall only be called before levels are built\\&.\n.PP\nIn case of error, \\fBhwloc_report_os_error()\\fP is called\\&.\n.PP\nThe caller should check whether the object type is filtered-out before calling this function\\&.\n.PP\nThe topology cpuset/nodesets will be enlarged to include the object sets\\&.\n.PP\nReturns the object on success\\&. Returns NULL and frees obj on error\\&. Returns another object and frees obj if it was merged with an identical pre-existing object\\&. \n.SS \"void hwloc_insert_object_by_parent (struct hwloc_topology * topology, \\fBhwloc_obj_t\\fP parent, \\fBhwloc_obj_t\\fP obj)\"\n\n.PP\nInsert an object somewhere in the topology\\&. It is added as the last child of the given parent\\&. The cpuset is completely ignored, so strange objects such as I/O devices should preferably be inserted with this\\&.\n.PP\nWhen used for 'normal' children with cpusets (when importing from XML when duplicating a topology), the caller should make sure that:\n.IP \"\\(bu\" 2\nchildren are inserted in order,\n.IP \"\\(bu\" 2\nchildren cpusets do not intersect\\&.\n.PP\n.PP\nThe given object may have normal, I/O or Misc children, as long as they are in order as well\\&. These children must have valid parent and next_sibling pointers\\&.\n.PP\nThe caller should check whether the object type is filtered-out before calling this function\\&. \n.SS \"int hwloc_obj_add_children_sets (\\fBhwloc_obj_t\\fP obj)\"\n\n.PP\nSetup object cpusets/nodesets by OR'ing its children\\&. Used when adding an object late in the topology\\&. Will update the new object by OR'ing all its new children sets\\&.\n.PP\nUsed when PCI backend adds a hostbridge parent, when distances add a new Group, etc\\&. \n.SS \"static int hwloc_plugin_check_namespace (const char * pluginname, const char * symbol)\\fC [inline]\\fP, \\fC [static]\\fP\"\n\n.PP\nMake sure that plugins can lookup core symbols\\&. This is a sanity check to avoid lazy-lookup failures when libhwloc is loaded within a plugin, and later tries to load its own plugins\\&. This may fail (and abort the program) if libhwloc symbols are in a private namespace\\&.\n.PP\n\\fBReturns\\fP\n.RS 4\n0 on success\\&. \n.PP\n-1 if the plugin cannot be successfully loaded\\&. The caller plugin init() callback should return a negative error code as well\\&.\n.RE\n.PP\nPlugins should call this function in their init() callback to avoid later crashes if lazy symbol resolution is used by the upper layer that loaded hwloc (e\\&.g\\&. OpenCL implementations using dlopen with RTLD_LAZY)\\&.\n.PP\n\\fBNote\\fP\n.RS 4\nThe build system must define HWLOC_INSIDE_PLUGIN if and only if building the caller as a plugin\\&.\n.PP\nThis function should remain inline so plugins can call it even when they cannot find libhwloc symbols\\&. \n.RE\n.PP\n\n.SS \"void hwloc_report_os_error (const char * msg, int line)\"\n\n.PP\nReport an insertion error from a backend\\&. \n.SS \"int hwloc_topology_reconnect (\\fBhwloc_topology_t\\fP topology, unsigned long flags)\"\n\n.PP\nRequest a reconnection of children and levels in the topology\\&. May be used by backends during discovery if they need arrays or lists of object within levels or children to be fully connected\\&.\n.PP\n\\fCflags\\fP is currently unused, must 0\\&. \n.SH \"Author\"\n.PP \nGenerated automatically by Doxygen for Hardware Locality (hwloc) from the source code\\&.\n",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/doc/doxygen-doc/man/man3/hwloc_intro.3": ".TH \"hwloc_intro\" 3 \"Mon Mar 30 2020\" \"Version 2.2.0\" \"Hardware Locality (hwloc)\" \\\" -*- nroff -*-\n.ad l\n.nh\n.SH NAME\nhwloc_intro \\- Hardware Locality (hwloc) Introduction \n\n.SH \"Portable abstraction of hierarchical architectures for high-performance computing\"\n.PP\n.PP\n.PP\n.PP\n See also \\fBFurther Reading\\fP  for links to more sections about hwloc concepts\\&. \n.PP\n \n.SH \"hwloc Summary\"\n.PP\nhwloc provides command line tools and a C API to obtain the hierarchical map of key computing elements within a node, such as: NUMA memory nodes, shared caches, processor packages, dies and cores, processing units (logical processors or 'threads') and even I/O devices\\&. hwloc also gathers various attributes such as cache and memory information, and is portable across a variety of different operating systems and platforms\\&.\n.PP\nhwloc primarily aims at helping high-performance computing (HPC) applications, but is also applicable to any project seeking to exploit code and/or data locality on modern computing platforms\\&.\n.PP\nhwloc supports the following operating systems:\n.PP\n.PD 0\n.IP \"\\(bu\" 2\nLinux (including old kernels not having sysfs topology information, with knowledge of cpusets, ScaleMP vSMP support, etc\\&.) on all supported hardware, including Intel Xeon Phi and NumaScale NumaConnect\\&. \n.IP \"\\(bu\" 2\nSolaris (with support for processor sets and logical domains) \n.IP \"\\(bu\" 2\nAIX \n.IP \"\\(bu\" 2\nDarwin / OS X \n.IP \"\\(bu\" 2\nFreeBSD and its variants (such as kFreeBSD/GNU) \n.IP \"\\(bu\" 2\nNetBSD \n.IP \"\\(bu\" 2\nHP-UX \n.IP \"\\(bu\" 2\nMicrosoft Windows \n.IP \"\\(bu\" 2\nIBM BlueGene/Q Compute Node Kernel (CNK) \n.PP\n.PP\nSince it uses standard Operating System information, hwloc's support is mostly independant from the processor type (x86, powerpc, \\&.\\&.\\&.) and just relies on the Operating System support\\&. The main exception is BSD operating systems (NetBSD, FreeBSD, etc\\&.) because they do not provide support topology information, hence hwloc uses an x86-only CPUID-based backend (which can be used for other OSes too, see the \\fBComponents and plugins\\fP section)\\&.\n.PP\nTo check whether hwloc works on a particular machine, just try to build it and run \\fClstopo\\fP or \\fClstopo-no-graphics\\fP\\&. If some things do not look right (e\\&.g\\&. bogus or missing cache information), see \\fBQuestions and Bugs\\fP\\&.\n.PP\nhwloc only reports the number of processors on unsupported operating systems; no topology information is available\\&.\n.PP\nFor development and debugging purposes, hwloc also offers the ability to work on 'fake' topologies:\n.PP\n.PD 0\n.IP \"\\(bu\" 2\nSymmetrical tree of resources generated from a list of level arities, see \\fBSynthetic topologies\\fP\\&. \n.IP \"\\(bu\" 2\nRemote machine simulation through the gathering of topology as XML files, see \\fBImporting and exporting topologies from/to XML files\\fP\\&. \n.PP\n.PP\nhwloc can display the topology in a human-readable format, either in graphical mode (X11), or by exporting in one of several different formats, including: plain text, PDF, PNG, and FIG (see \\fBCommand-line Examples\\fP below)\\&. Note that some of the export formats require additional support libraries\\&.\n.PP\nhwloc offers a programming interface for manipulating topologies and objects\\&. It also brings a powerful CPU bitmap API that is used to describe topology objects location on physical/logical processors\\&. See the \\fBProgramming Interface\\fP below\\&. It may also be used to binding applications onto certain cores or memory nodes\\&. Several utility programs are also provided to ease command-line manipulation of topology objects, binding of processes, and so on\\&.\n.PP\nPerl bindings are available from Bernd Kallies on \\fCCPAN\\fP\\&.\n.PP\nPython bindings are available from Guy Streeter: \n.PD 0\n\n.IP \"\\(bu\" 2\n\\fCFedora RPM and tarball\\fP\\&. \n.IP \"\\(bu\" 2\n\\fCgit tree\\fP (\\fChtml\\fP)\\&. \n.PP\n.PP\n \n.SH \"hwloc Installation\"\n.PP\nThe generic installation procedure for both hwloc and netloc is described in \\fBInstallation\\fP\\&.\n.PP\nThe hwloc command-line tool 'lstopo' produces human-readable topology maps, as mentioned above\\&. It can also export maps to the 'fig' file format\\&. Support for PDF, Postscript, and PNG exporting is provided if the 'Cairo' development package (usually \\fCcairo-devel\\fP or \\fClibcairo2-dev\\fP) can be found in 'lstopo' when hwloc is configured and build\\&.\n.PP\nThe hwloc core may also benefit from the following development packages: \n.PD 0\n\n.IP \"\\(bu\" 2\nlibpciaccess for full I/O device discovery (\\fClibpciaccess-devel\\fP or \\fClibpciaccess-dev\\fP package)\\&. On Linux, PCI discovery may still be performed (without vendor/device names) even if libpciaccess cannot be used\\&. \n.PP\n\n.IP \"\\(bu\" 2\nAMD or NVIDIA OpenCL implementations for OpenCL device discovery\\&.  \n.IP \"\\(bu\" 2\nthe NVIDIA CUDA Toolkit for CUDA device discovery\\&.  \n.IP \"\\(bu\" 2\nthe NVIDIA Management Library (NVML) for NVML device discovery\\&. It is included in CUDA since version 8\\&.0\\&. Older NVML releases were available within the NVIDIA GPU Deployment Kit from https://developer.nvidia.com/gpu-deployment-kit \\&.  \n.IP \"\\(bu\" 2\nthe NV-CONTROL X extension library (NVCtrl) for NVIDIA display discovery\\&. The relevant development package is usually \\fClibXNVCtrl-devel\\fP or \\fClibxnvctrl-dev\\fP\\&. It is also available within nvidia-settings from ftp://download.nvidia.com/XFree86/nvidia-settings/ and https://github.com/NVIDIA/nvidia-settings/ \\&.  \n.IP \"\\(bu\" 2\nlibxml2 for full XML import/export support (otherwise, the internal minimalistic parser will only be able to import XML files that were exported by the same hwloc release)\\&. See \\fBImporting and exporting topologies from/to XML files\\fP for details\\&. The relevant development package is usually \\fClibxml2-devel\\fP or \\fClibxml2-dev\\fP\\&.  \n.IP \"\\(bu\" 2\nlibudev on Linux for easier discovery of OS device information (otherwise hwloc will try to manually parse udev raw files)\\&. The relevant development package is usually \\fClibudev-devel\\fP or \\fClibudev-dev\\fP\\&.  \n.IP \"\\(bu\" 2\nlibtool's ltdl library for dynamic plugin loading if the native dlopen cannot be used\\&. The relevant development package is usually \\fClibtool-ltdl-devel\\fP or \\fClibltdl-dev\\fP\\&.  \n.PP\n.PP\nPCI and XML support may be statically built inside the main hwloc library, or as separate dynamically-loaded plugins (see the \\fBComponents and plugins\\fP section)\\&.\n.PP\nNote that because of the possibility of GPL taint, the \\fCpciutils\\fP library \\fClibpci\\fP will not be used (remember that hwloc is BSD-licensed)\\&.\n.PP\n \n.SH \"Command-line Examples\"\n.PP\nOn a 4-package 2-core machine with hyper-threading, the \\fClstopo\\fP tool may show the following graphical output:\n.PP\n \n.PP\nHere's the equivalent output in textual form:\n.PP\n.PP\n.nf\nMachine\n  NUMANode L#0 (P#0)\n  Package L#0 + L3 L#0 (4096KB)\n    L2 L#0 (1024KB) + L1 L#0 (16KB) + Core L#0\n      PU L#0 (P#0)\n      PU L#1 (P#8)\n    L2 L#1 (1024KB) + L1 L#1 (16KB) + Core L#1\n      PU L#2 (P#4)\n      PU L#3 (P#12)\n  Package L#1 + L3 L#1 (4096KB)\n    L2 L#2 (1024KB) + L1 L#2 (16KB) + Core L#2\n      PU L#4 (P#1)\n      PU L#5 (P#9)\n    L2 L#3 (1024KB) + L1 L#3 (16KB) + Core L#3\n      PU L#6 (P#5)\n      PU L#7 (P#13)\n  Package L#2 + L3 L#2 (4096KB)\n    L2 L#4 (1024KB) + L1 L#4 (16KB) + Core L#4\n      PU L#8 (P#2)\n      PU L#9 (P#10)\n    L2 L#5 (1024KB) + L1 L#5 (16KB) + Core L#5\n      PU L#10 (P#6)\n      PU L#11 (P#14)\n  Package L#3 + L3 L#3 (4096KB)\n    L2 L#6 (1024KB) + L1 L#6 (16KB) + Core L#6\n      PU L#12 (P#3)\n      PU L#13 (P#11)\n    L2 L#7 (1024KB) + L1 L#7 (16KB) + Core L#7\n      PU L#14 (P#7)\n      PU L#15 (P#15)\n.fi\n.PP\n.PP\nNote that there is also an equivalent output in XML that is meant for exporting/importing topologies but it is hardly readable to human-beings (see \\fBImporting and exporting topologies from/to XML files\\fP for details)\\&.\n.PP\nOn a 4-package 2-core Opteron NUMA machine (with two core cores disallowed by the administrator), the \\fClstopo\\fP tool may show the following graphical output (with \\fC--disallowed\\fP for displaying disallowed objects):\n.PP\n \n.PP\nHere's the equivalent output in textual form:\n.PP\n.PP\n.nf\nMachine (32GB total)\n  Package L#0\n    NUMANode L#0 (P#0 8190MB)\n    L2 L#0 (1024KB) + L1 L#0 (64KB) + Core L#0 + PU L#0 (P#0)\n    L2 L#1 (1024KB) + L1 L#1 (64KB) + Core L#1 + PU L#1 (P#1)\n  Package L#1\n    NUMANode L#1 (P#1 8192MB)\n    L2 L#2 (1024KB) + L1 L#2 (64KB) + Core L#2 + PU L#2 (P#2)\n    L2 L#3 (1024KB) + L1 L#3 (64KB) + Core L#3 + PU L#3 (P#3)\n  Package L#2\n    NUMANode L#2 (P#2 8192MB)\n    L2 L#4 (1024KB) + L1 L#4 (64KB) + Core L#4 + PU L#4 (P#4)\n    L2 L#5 (1024KB) + L1 L#5 (64KB) + Core L#5 + PU L#5 (P#5)\n  Package L#3\n    NUMANode L#3 (P#3 8192MB)\n    L2 L#6 (1024KB) + L1 L#6 (64KB) + Core L#6 + PU L#6 (P#6)\n    L2 L#7 (1024KB) + L1 L#7 (64KB) + Core L#7 + PU L#7 (P#7)\n.fi\n.PP\n.PP\nOn a 2-package quad-core Xeon (pre-Nehalem, with 2 dual-core dies into each package):\n.PP\n \n.PP\nHere's the same output in textual form:\n.PP\n.PP\n.nf\nMachine (total 16GB)\n  NUMANode L#0 (P#0 16GB)\n  Package L#0\n    L2 L#0 (4096KB)\n      L1 L#0 (32KB) + Core L#0 + PU L#0 (P#0)\n      L1 L#1 (32KB) + Core L#1 + PU L#1 (P#4)\n    L2 L#1 (4096KB)\n      L1 L#2 (32KB) + Core L#2 + PU L#2 (P#2)\n      L1 L#3 (32KB) + Core L#3 + PU L#3 (P#6)\n  Package L#1\n    L2 L#2 (4096KB)\n      L1 L#4 (32KB) + Core L#4 + PU L#4 (P#1)\n      L1 L#5 (32KB) + Core L#5 + PU L#5 (P#5)\n    L2 L#3 (4096KB)\n      L1 L#6 (32KB) + Core L#6 + PU L#6 (P#3)\n      L1 L#7 (32KB) + Core L#7 + PU L#7 (P#7)\n.fi\n.PP\n.PP\n \n.SH \"Programming Interface\"\n.PP\nThe basic interface is available in \\fBhwloc\\&.h\\fP\\&. Some higher-level functions are available in \\fBhwloc/helper\\&.h\\fP to reduce the need to manually manipulate objects and follow links between them\\&. Documentation for all these is provided later in this document\\&. Developers may also want to look at hwloc/inlines\\&.h which contains the actual inline code of some \\fBhwloc\\&.h\\fP routines, and at this document, which provides good higher-level topology traversal examples\\&.\n.PP\nTo precisely define the vocabulary used by hwloc, a \\fBTerms and Definitions\\fP section is available and should probably be read first\\&.\n.PP\nEach hwloc object contains a cpuset describing the list of processing units that it contains\\&. These bitmaps may be used for \\fBCPU binding\\fP and \\fBMemory binding\\fP\\&. hwloc offers an extensive bitmap manipulation interface in \\fBhwloc/bitmap\\&.h\\fP\\&.\n.PP\nMoreover, hwloc also comes with additional helpers for interoperability with several commonly used environments\\&. See the \\fBInteroperability With Other Software\\fP section for details\\&.\n.PP\nThe complete API documentation is available in a full set of HTML pages, man pages, and self-contained PDF files (formatted for both both US letter and A4 formats) in the source tarball in doc/doxygen-doc/\\&.\n.PP\n\\fBNOTE:\\fP If you are building the documentation from a Git clone, you will need to have Doxygen and pdflatex installed -- the documentation will be built during the normal 'make' process\\&. The documentation is installed during 'make install' to $prefix/share/doc/hwloc/ and your systems default man page tree (under $prefix, of course)\\&.\n.SS \"Portability\"\nOperating System have varying support for CPU and memory binding, e\\&.g\\&. while some Operating Systems provide interfaces for all kinds of CPU and memory bindings, some others provide only interfaces for a limited number of kinds of CPU and memory binding, and some do not provide any binding interface at all\\&. Hwloc's binding functions would then simply return the ENOSYS error (Function not implemented), meaning that the underlying Operating System does not provide any interface for them\\&. \\fBCPU binding\\fP and \\fBMemory binding\\fP provide more information on which hwloc binding functions should be preferred because interfaces for them are usually available on the supported Operating Systems\\&.\n.PP\nSimilarly, the ability of reporting topology information varies from one platform to another\\&. As shown in \\fBCommand-line Examples\\fP, hwloc can obtain information on a wide variety of hardware topologies\\&. However, some platforms and/or operating system versions will only report a subset of this information\\&. For example, on an PPC64-based system with 8 cores (each with 2 hardware threads) running a default 2\\&.6\\&.18-based kernel from RHEL 5\\&.4, hwloc is only able to glean information about NUMA nodes and processor units (PUs)\\&. No information about caches, packages, or cores is available\\&.\n.PP\nHere's the graphical output from lstopo on this platform when Simultaneous Multi-Threading (SMT) is enabled:\n.PP\n \n.PP\nAnd here's the graphical output from lstopo on this platform when SMT is disabled:\n.PP\n \n.PP\nNotice that hwloc only sees half the PUs when SMT is disabled\\&. PU L#6, for example, seems to change location from NUMA node #0 to #1\\&. In reality, no PUs 'moved' -- they were simply re-numbered when hwloc only saw half as many (see also Logical index in \\fBIndexes and Sets\\fP)\\&. Hence, PU L#6 in the SMT-disabled picture probably corresponds to PU L#12 in the SMT-enabled picture\\&.\n.PP\nThis same 'PUs have disappeared' effect can be seen on other platforms -- even platforms / OSs that provide much more information than the above PPC64 system\\&. This is an unfortunate side-effect of how operating systems report information to hwloc\\&.\n.PP\nNote that upgrading the Linux kernel on the same PPC64 system mentioned above to 2\\&.6\\&.34, hwloc is able to discover all the topology information\\&. The following picture shows the entire topology layout when SMT is enabled:\n.PP\n \n.PP\nDevelopers using the hwloc API or XML output for portable applications should therefore be extremely careful to not make any assumptions about the structure of data that is returned\\&. For example, per the above reported PPC topology, it is not safe to assume that PUs will always be descendants of cores\\&.\n.PP\nAdditionally, future hardware may insert new topology elements that are not available in this version of hwloc\\&. Long-lived applications that are meant to span multiple different hardware platforms should also be careful about making structure assumptions\\&. For example, a new element may someday exist between a core and a PU\\&.\n.SS \"API Example\"\nThe following small C example (available in the source tree as ``doc/examples/hwloc-hello\\&.c'') prints the topology of the machine and performs some thread and memory binding\\&. More examples are available in the doc/examples/ directory of the source tree\\&.\n.PP\n.PP\n.nf\n/* Example hwloc API program\\&.\n *\n * See other examples under doc/examples/ in the source tree\n * for more details\\&.\n *\n * Copyright \u00a9 2009-2016 Inria\\&.  All rights reserved\\&.\n * Copyright \u00a9 2009-2011 Universit\u00e9 Bordeaux\n * Copyright \u00a9 2009-2010 Cisco Systems, Inc\\&.  All rights reserved\\&.\n * See COPYING in top-level directory\\&.\n *\n * hwloc-hello\\&.c\n */\n\n#include \"hwloc\\&.h\"\n\n#include <errno\\&.h>\n#include <stdio\\&.h>\n#include <string\\&.h>\n\nstatic void print_children(hwloc_topology_t topology, hwloc_obj_t obj,\n                           int depth)\n{\n    char type[32], attr[1024];\n    unsigned i;\n\n    hwloc_obj_type_snprintf(type, sizeof(type), obj, 0);\n    printf(\"%*s%s\", 2*depth, \"\", type);\n    if (obj->os_index != (unsigned) -1)\n      printf(\"#%u\", obj->os_index);\n    hwloc_obj_attr_snprintf(attr, sizeof(attr), obj, \" \", 0);\n    if (*attr)\n      printf(\"(%s)\", attr);\n    printf(\"\\n\");\n    for (i = 0; i < obj->arity; i++) {\n        print_children(topology, obj->children[i], depth + 1);\n    }\n}\n\nint main(void)\n{\n    int depth;\n    unsigned i, n;\n    unsigned long size;\n    int levels;\n    char string[128];\n    int topodepth;\n    void *m;\n    hwloc_topology_t topology;\n    hwloc_cpuset_t cpuset;\n    hwloc_obj_t obj;\n\n    /* Allocate and initialize topology object\\&. */\n    hwloc_topology_init(&topology);\n\n    /* \\&.\\&.\\&. Optionally, put detection configuration here to ignore\n       some objects types, define a synthetic topology, etc\\&.\\&.\\&.\\&.\n\n       The default is to detect all the objects of the machine that\n       the caller is allowed to access\\&.  See Configure Topology\n       Detection\\&. */\n\n    /* Perform the topology detection\\&. */\n    hwloc_topology_load(topology);\n\n    /* Optionally, get some additional topology information\n       in case we need the topology depth later\\&. */\n    topodepth = hwloc_topology_get_depth(topology);\n\n    /*****************************************************************\n     * First example:\n     * Walk the topology with an array style, from level 0 (always\n     * the system level) to the lowest level (always the proc level)\\&.\n     *****************************************************************/\n    for (depth = 0; depth < topodepth; depth++) {\n        printf(\"*** Objects at level %d\\n\", depth);\n        for (i = 0; i < hwloc_get_nbobjs_by_depth(topology, depth);\n             i++) {\n            hwloc_obj_type_snprintf(string, sizeof(string),\n                                    hwloc_get_obj_by_depth(topology, depth, i), 0);\n            printf(\"Index %u: %s\\n\", i, string);\n        }\n    }\n\n    /*****************************************************************\n     * Second example:\n     * Walk the topology with a tree style\\&.\n     *****************************************************************/\n    printf(\"*** Printing overall tree\\n\");\n    print_children(topology, hwloc_get_root_obj(topology), 0);\n\n    /*****************************************************************\n     * Third example:\n     * Print the number of packages\\&.\n     *****************************************************************/\n    depth = hwloc_get_type_depth(topology, HWLOC_OBJ_PACKAGE);\n    if (depth == HWLOC_TYPE_DEPTH_UNKNOWN) {\n        printf(\"*** The number of packages is unknown\\n\");\n    } else {\n        printf(\"*** %u package(s)\\n\",\n               hwloc_get_nbobjs_by_depth(topology, depth));\n    }\n\n    /*****************************************************************\n     * Fourth example:\n     * Compute the amount of cache that the first logical processor\n     * has above it\\&.\n     *****************************************************************/\n    levels = 0;\n    size = 0;\n    for (obj = hwloc_get_obj_by_type(topology, HWLOC_OBJ_PU, 0);\n         obj;\n         obj = obj->parent)\n      if (hwloc_obj_type_is_cache(obj->type)) {\n        levels++;\n        size += obj->attr->cache\\&.size;\n      }\n    printf(\"*** Logical processor 0 has %d caches totaling %luKB\\n\",\n           levels, size / 1024);\n\n    /*****************************************************************\n     * Fifth example:\n     * Bind to only one thread of the last core of the machine\\&.\n     *\n     * First find out where cores are, or else smaller sets of CPUs if\n     * the OS doesn't have the notion of a \"core\"\\&.\n     *****************************************************************/\n    depth = hwloc_get_type_or_below_depth(topology, HWLOC_OBJ_CORE);\n\n    /* Get last core\\&. */\n    obj = hwloc_get_obj_by_depth(topology, depth,\n                   hwloc_get_nbobjs_by_depth(topology, depth) - 1);\n    if (obj) {\n        /* Get a copy of its cpuset that we may modify\\&. */\n        cpuset = hwloc_bitmap_dup(obj->cpuset);\n\n        /* Get only one logical processor (in case the core is\n           SMT/hyper-threaded)\\&. */\n        hwloc_bitmap_singlify(cpuset);\n\n        /* And try to bind ourself there\\&. */\n        if (hwloc_set_cpubind(topology, cpuset, 0)) {\n            char *str;\n            int error = errno;\n            hwloc_bitmap_asprintf(&str, obj->cpuset);\n            printf(\"Couldn't bind to cpuset %s: %s\\n\", str, strerror(error));\n            free(str);\n        }\n\n        /* Free our cpuset copy */\n        hwloc_bitmap_free(cpuset);\n    }\n\n    /*****************************************************************\n     * Sixth example:\n     * Allocate some memory on the last NUMA node, bind some existing\n     * memory to the last NUMA node\\&.\n     *****************************************************************/\n    /* Get last node\\&. There's always at least one\\&. */\n    n = hwloc_get_nbobjs_by_type(topology, HWLOC_OBJ_NUMANODE);\n    obj = hwloc_get_obj_by_type(topology, HWLOC_OBJ_NUMANODE, n - 1);\n\n    size = 1024*1024;\n    m = hwloc_alloc_membind(topology, size, obj->nodeset,\n                            HWLOC_MEMBIND_BIND, HWLOC_MEMBIND_BYNODESET);\n    hwloc_free(topology, m, size);\n\n    m = malloc(size);\n    hwloc_set_area_membind(topology, m, size, obj->nodeset,\n                           HWLOC_MEMBIND_BIND, HWLOC_MEMBIND_BYNODESET);\n    free(m);\n\n    /* Destroy topology object\\&. */\n    hwloc_topology_destroy(topology);\n\n    return 0;\n}\n.fi\n.PP\n.PP\nhwloc provides a \\fCpkg-config\\fP executable to obtain relevant compiler and linker flags\\&. For example, it can be used thusly to compile applications that utilize the hwloc library (assuming GNU Make):\n.PP\n.PP\n.nf\nCFLAGS += $(shell pkg-config --cflags hwloc)\nLDLIBS += $(shell pkg-config --libs hwloc)\n\nhwloc-hello: hwloc-hello.c\n        $(CC) hwloc-hello.c $(CFLAGS) -o hwloc-hello $(LDLIBS)\n.fi\n.PP\n.PP\nOn a machine 2 processor packages -- each package of which has two processing cores -- the output from running \\fChwloc-hello\\fP could be something like the following:\n.PP\n.PP\n.nf\nshell$ ./hwloc-hello\n*** Objects at level 0\nIndex 0: Machine\n*** Objects at level 1\nIndex 0: Package#0\nIndex 1: Package#1\n*** Objects at level 2\nIndex 0: Core#0\nIndex 1: Core#1\nIndex 2: Core#3\nIndex 3: Core#2\n*** Objects at level 3\nIndex 0: PU#0\nIndex 1: PU#1\nIndex 2: PU#2\nIndex 3: PU#3\n*** Printing overall tree\nMachine\n  Package#0\n    Core#0\n      PU#0\n    Core#1\n      PU#1\n  Package#1\n    Core#3\n      PU#2\n    Core#2\n      PU#3\n*** 2 package(s)\n*** Logical processor 0 has 0 caches totaling 0KB\nshell$ \n.fi\n.PP\n.PP\n \n.SH \"History / Credits\"\n.PP\nhwloc is the evolution and merger of the libtopology (http://runtime.bordeaux.inria.fr/libtopology/) project and the Portable Linux Processor Affinity (PLPA) (http://www.open-mpi.org/projects/plpa/) project\\&. Because of functional and ideological overlap, these two code bases and ideas were merged and released under the name 'hwloc' as an Open MPI sub-project\\&.\n.PP\nlibtopology was initially developed by the inria Runtime Team-Project (http://runtime.bordeaux.inria.fr/) (headed by Raymond Namyst (http://dept-info.labri.fr/~namyst/)\\&. PLPA was initially developed by the Open MPI development team as a sub-project\\&. Both are now deprecated in favor of hwloc, which is distributed as an Open MPI sub-project\\&.\n.PP\n \n.SH \"Further Reading\"\n.PP\nThe documentation chapters include\n.PP\n.PD 0\n.IP \"\\(bu\" 2\n\\fBTerms and Definitions\\fP \n.IP \"\\(bu\" 2\n\\fBCommand-Line Tools\\fP \n.IP \"\\(bu\" 2\n\\fBEnvironment Variables\\fP \n.IP \"\\(bu\" 2\n\\fBCPU and Memory Binding Overview\\fP \n.IP \"\\(bu\" 2\n\\fBI/O Devices\\fP \n.IP \"\\(bu\" 2\n\\fBMiscellaneous objects\\fP \n.IP \"\\(bu\" 2\n\\fBObject attributes\\fP \n.IP \"\\(bu\" 2\n\\fBImporting and exporting topologies from/to XML files\\fP \n.IP \"\\(bu\" 2\n\\fBSynthetic topologies\\fP \n.IP \"\\(bu\" 2\n\\fBInteroperability With Other Software\\fP \n.IP \"\\(bu\" 2\n\\fBThread Safety\\fP \n.IP \"\\(bu\" 2\n\\fBComponents and plugins\\fP \n.IP \"\\(bu\" 2\n\\fBEmbedding hwloc in Other Software\\fP \n.IP \"\\(bu\" 2\n\\fBFrequently Asked Questions\\fP \n.IP \"\\(bu\" 2\n\\fBUpgrading to the hwloc 2\\&.0 API\\fP \n.PP\n.PP\nMake sure to have had a look at those too!\n.PP\n \n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/utils/hwloc/test-hwloc-compress-dir.input.tar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/utils/hwloc/test-hwloc-compress-dir.output.tar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/utils/hwloc/test-hwloc-dump-hwdata/knl-snc4h50.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/tests/netloc/data/plafrim2.txz",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/tests/netloc/data/avakas.txz",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/tests/netloc/data/plafrim.txz",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/tests/netloc/data/scotch.txz",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/tests/hwloc/linux/1alpha.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/tests/hwloc/linux/8ia64-2n2s2c.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/tests/hwloc/linux/4ia64-4s.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/tests/hwloc/linux/16em64t-4s2c2t.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/tests/hwloc/linux/8amd64-4n2c.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/tests/hwloc/linux/256ppc-8n8s4t.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/tests/hwloc/linux/8em64t-2s2ca2c-buggynuma.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/tests/hwloc/linux/96em64t-4n4d3ca2co.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/tests/hwloc/linux/2pa-pcidomain32bits.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/tests/hwloc/linux/2arm-2c.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/tests/hwloc/linux/32em64t-2n8c+1mic.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/tests/hwloc/linux/16ia64-8n2s.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/tests/hwloc/linux/20s390-2g6s4c.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/tests/hwloc/linux/fakememinitiators-1npc+1npc.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/tests/hwloc/linux/48amd64-4d2n6c-sparse.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/tests/hwloc/linux/8em64t-2s2ca2c.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/tests/hwloc/linux/2i386-2c-nohugepage.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/tests/hwloc/linux/4em64t-2c2t-ignore-reorder.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/tests/hwloc/linux/16em64t-4s2c2t-offlines.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/tests/hwloc/linux/2ps3-2t.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/tests/hwloc/linux/40intel64-2g2n4c+pci.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/tests/hwloc/linux/64intel64-fakeKNL-A2A-cache.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/tests/hwloc/linux/8ia64-2s2c2t.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/tests/hwloc/linux/fakecpuid1f-64intel64-2p4d2n2c2t.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/tests/hwloc/linux/8em64t-4c2t.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/tests/hwloc/linux/40intel64-4n10c+pci-conflicts.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/tests/hwloc/linux/16amd64-8n2c.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/tests/hwloc/linux/256ia64-64n2s2c.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/tests/hwloc/linux/fakeheteronuma.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/tests/hwloc/linux/64fake-4n2s2ca2c2t.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/tests/hwloc/linux/64intel64-fakeKNL-SNC4-hybrid.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/tests/hwloc/linux/8ia64-4s2c.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/tests/hwloc/linux/4fake-4gr1nu1pu.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/tests/hwloc/linux/2amd64-2n.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/tests/hwloc/linux/16amd64-8n2c-cpusets.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/tests/hwloc/linux/2i386-2t-hugepagesizecount.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/tests/hwloc/linux/nvidiagpunumanodes.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/tests/hwloc/linux/16amd64-4n4c-cgroup-distance-merge.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/tests/hwloc/linux/8em64t-2s4c-heterogeneous.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/tests/hwloc/linux/2s390-2c.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/tests/hwloc/linux/64amd64-4s2n4ca2co.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/tests/hwloc/linux/32amd64-4s2n4c-cgroup2.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/tests/hwloc/linux/128ia64-17n4s2c.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/tests/hwloc/linux/16em64t-4s2ca2c-cpusetreorder.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/tests/hwloc/linux/allowed/test1.fsroot.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/tests/hwloc/x86/Intel-SandyBridge-2xXeon-E5-2650.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/tests/hwloc/x86/Hygon-Dhyana-32cores.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/tests/hwloc/x86/AMD-17h-Zen-2xEpyc-7451.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/tests/hwloc/x86/Intel-CPUID.1F-Qemu-2p3d3c2t.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/tests/hwloc/x86/AMD-15h-Bulldozer-4xOpteron-6272.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/tests/hwloc/x86/AMD-15h-Piledriver-4xOpteron-6348.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/tests/hwloc/x86/AMD-K8-SantaRosa-2xOpteron-2218.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/tests/hwloc/x86/Intel-KnightsLanding-XeonPhi-7210.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/tests/hwloc/x86/Intel-Westmere-2xXeon-X5650.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/tests/hwloc/x86/Intel-Skylake-2xXeon6140.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/tests/hwloc/x86/AMD-K10-MagnyCours-2xOpteron-6164HE.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/tests/hwloc/x86/Intel-Haswell-2xXeon-E5-2680v3.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/tests/hwloc/x86/Intel-Nehalem-2xXeon-X5550.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/tests/hwloc/x86/AMD-K10-Istanbul-8xOpteron-8439SE.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/tests/hwloc/x86/AMD-K8-SledgeHammer-2xOpteron-250.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/tests/hwloc/x86/Intel-KnightsCorner-XeonPhi-SE10P.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/tests/hwloc/x86/Intel-CascadeLake-2xXeon6230.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/tests/hwloc/x86/Zhaoxin-Shanghai-KaiSheng-ZXC+-FC1081.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/tests/hwloc/x86/Intel-Penryn-4xXeon-X7460.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/tests/hwloc/x86/Zhaoxin-CentaurHauls-ZXD-4600.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/tests/hwloc/x86/Intel-IvyBridge-12xXeon-E5-4620v2.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/tests/hwloc/x86/Intel-Core-2xXeon-E5345.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/tests/hwloc/x86/Intel-Broadwell-2xXeon-E5-2650Lv4.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/tests/hwloc/x86+linux/64amd64-4p2n4ca2co.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/doc/images/ppc64-with-smt.png",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/doc/images/emmett.png",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/doc/images/hagrid.png",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/doc/images/ppc64-full-with-smt.png",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/doc/images/diagram.png",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/doc/images/dudley.png",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/doc/images/devel09-pci.png",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/doc/images/netloc_design.png",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/doc/images/netloc_draw.png",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/doc/images/ppc64-without-smt.png",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/doc/doxygen-doc/hwloc-a4.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/doc/doxygen-doc/hwloc-letter.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/doc/doxygen-doc/html/ppc64-with-smt.png",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/doc/doxygen-doc/html/emmett.png",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/doc/doxygen-doc/html/nav_g.png",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/doc/doxygen-doc/html/splitbar.png",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/doc/doxygen-doc/html/tab_h.png",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/doc/doxygen-doc/html/tab_s.png",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/doc/doxygen-doc/html/tab_a.png",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/doc/doxygen-doc/html/hagrid.png",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/doc/doxygen-doc/html/ppc64-full-with-smt.png",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/doc/doxygen-doc/html/diagram.png",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/doc/doxygen-doc/html/folderopen.png",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/doc/doxygen-doc/html/sync_on.png",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/doc/doxygen-doc/html/nav_f.png",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/doc/doxygen-doc/html/folderclosed.png",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/doc/doxygen-doc/html/tab_b.png",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/doc/doxygen-doc/html/open.png",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/doc/doxygen-doc/html/bdwn.png",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/doc/doxygen-doc/html/bc_s.png",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/doc/doxygen-doc/html/dudley.png",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/doc/doxygen-doc/html/nav_h.png",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/doc/doxygen-doc/html/doc.png",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/doc/doxygen-doc/html/sync_off.png",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/doc/doxygen-doc/html/devel09-pci.png",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/doc/doxygen-doc/html/netloc_design.png",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/doc/doxygen-doc/html/netloc_draw.png",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/doc/doxygen-doc/html/ppc64-without-smt.png",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/doc/doxygen-doc/html/closed.png",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-2.2.0-tsbz7t4uvaze7zqls4rownx7t46klx5b/spack-src/doc/doxygen-doc/html/doxygen.png"
    ],
    "total_files": 1324
}