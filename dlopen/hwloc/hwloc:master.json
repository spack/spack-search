{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/configure.ac": "# -*- shell-script -*-\n#\n# Copyright \u00a9 2009      CNRS\n# Copyright \u00a9 2009-2020 Inria.  All rights reserved.\n# Copyright \u00a9 2009, 2011-2012      Universit\u00e9 Bordeaux\n * Copyright \u00a9 2009-2020 Cisco Systems, Inc.  All rights reserved.\n#\n# See COPYING in top-level directory.\n#\n# Additional copyrights may follow\n#\n# $HEADER$\n#\n\n####################################################################\n# Autoconf, Automake, and Libtool bootstrapping\n####################################################################\n\nAC_INIT([hwloc],\n        [m4_normalize(esyscmd([sh config/hwloc_get_version.sh VERSION --version]))],\n        [https://github.com/open-mpi/hwloc/issues], [hwloc])\nAC_PREREQ(2.63)\nAC_CONFIG_AUX_DIR(./config)\n# Note that this directory must *exactly* match what was specified via\n# -I in ACLOCAL_AMFLAGS in the top-level Makefile.am.\nAC_CONFIG_MACRO_DIR(./config)\n\ncat <<EOF\n\n###\n### Configuring hwloc distribution tarball\n### Startup tests\n###\nEOF\n\n# This must be before AM_INIT_AUTOMAKE\nAC_CANONICAL_TARGET\n\n# Init automake\nAM_INIT_AUTOMAKE([1.11 dist-bzip2 subdir-objects foreign tar-ustar parallel-tests -Wall -Werror])\nm4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])\n\nAC_LANG([C])\nAC_USE_SYSTEM_EXTENSIONS\n\n####################################################################\n# Setup the configure-results header file\n####################################################################\n\nAH_TOP([/* -*- c -*-\n *\n * Copyright \u00a9 2009, 2011, 2012 CNRS, inria., Universit\u00e9 Bordeaux  All rights reserved.\n * Copyright \u00a9 2009-2014 Cisco Systems, Inc.  All rights reserved.\n * $COPYRIGHT$\n *\n * Additional copyrights may follow\n *\n * $HEADER$\n *\n * This file is automatically generated by configure.  Edits will be lost\n * the next time you run configure!\n */\n\n#ifndef HWLOC_CONFIGURE_H\n#define HWLOC_CONFIGURE_H\n])\nAH_BOTTOM([\n#endif /* HWLOC_CONFIGURE_H */\n])\n\n####################################################################\n# Setup Libtool\n####################################################################\n\n# We want new Libtool.  None of that old stuff.  Pfft.\nm4_ifdef([LT_PREREQ], [],\n         [m4_fatal([libtool version 2.2.6 or higher is required], [63])])\nLT_PREREQ([2.2.6])\n\n# Setup libtool, but disable F77, Java and Windows Resource\n# Compiler support -- we don't need that stuff.\nAM_ENABLE_SHARED\nAM_DISABLE_STATIC\n\n# This did not exist pre AM 1.11.x (where x is somewhere >0 and <3),\n# but it is necessary in AM 1.12.x.\nm4_ifdef([AM_PROG_AR], [AM_PROG_AR])\n\nLT_INIT([dlopen win32-dll])\nLT_LANG([C])\nLT_LANG([C++])\n\n####################################################################\n# Setup C, C++ compilers\n####################################################################\n\nCFLAGS_save=$CFLAGS\nAC_PROG_CC\nAM_PROG_CC_C_O\nAC_PROG_CC_C99\nCFLAGS=$CFLAGS_save\n\nAC_ARG_VAR(CC_FOR_BUILD,[build system C compiler])\nAS_IF([test -z \"$CC_FOR_BUILD\"],[\n    AC_SUBST([CC_FOR_BUILD], [$CC])\n])\n\n####################################################################\n# CLI arguments\n####################################################################\n\n# Define hwloc's configure arguments\nHWLOC_DEFINE_ARGS\n\n# If debug mode, add -g\nAS_IF([test \"$hwloc_debug\" = \"1\"],\n      [CFLAGS=\"$CFLAGS -g\"])\n\n# If the user didn't specifically ask for embedding mode, default to\n# standalone mode\nAS_IF([test \"$enable_embedded_mode\" != \"yes\"],\n      [AS_IF([test ! -d \"$srcdir/doc\"],\n             [AC_MSG_WARN([The hwloc source tree looks incomplete for a standalone])\n              AC_MSG_WARN([build.  Perhaps this hwloc tree is intended for an embedded])\n              AC_MSG_WARN([build?  Try using the --enable-embedded-mode switch.])\n              AC_MSG_ERROR([Cannot build standalone hwloc])],\n             [HWLOC_BUILD_STANDALONE])])\n\n####################################################################\n# Setup for the hwloc API\n####################################################################\n\nAC_SUBST([libhwloc_so_version])\n\n# Setup the hwloc core\nHWLOC_SETUP_CORE([], [], [AC_MSG_ERROR([Cannot build hwloc core])], [1])\n\n####################################################################\n# Setup the netloc API\n####################################################################\n\nAC_SUBST([libnetloc_so_version])\n\nAC_ARG_ENABLE([netloc],\n              [AC_HELP_STRING([--enable-netloc],\n                              [The Netloc functionality is enabled by default, but will be silently skipped it if cannot be built (e.g., not supported on your platform).  Using --enable-netloc will cause configure to abort if Netloc cannot be build.  Using --disable-netloc will cause configure to skip attempting to build netloc at all.])\n              ])\n\nAS_IF([test \"$enable_netloc\" != \"no\" -a \"$hwloc_mode\" = \"standalone\"],\n      [NETLOC_SETUP_CORE([], [],\n           [AS_IF([test \"$enable_netloc\" = \"yes\"],\n                  [AC_MSG_ERROR([Cannot build netloc core])])\n           ],\n           [1])\n      ])\n\n####################################################################\n# Version information\n####################################################################\n\n# HWLOC_VERSION was setup by HWLOC_SETUP_CORE above.\n\n# Make configure depend on the VERSION file, since it's used in AC_INIT\nAC_SUBST([CONFIGURE_DEPENDENCIES], ['$(top_srcdir)/VERSION'])\n\n# Override/fixup the version numbers set by AC_INIT, since on\n# developer builds, there's no good way to know what the version is\n# before running configure :(.  We only use the base version number\n# for the version set in AC_INIT.  This will always match reality\n# because we add the VERSION file (the only way to change the\n# major.minor.release{greek}) into the configure dependencies.\nPACKAGE_VERSION=\"$HWLOC_VERSION\"\nPACKAGE_STRING=\"${PACKAGE_NAME} ${PACKAGE_VERSION}\"\nVERSION=\"${PACKAGE_VERSION}\"\n\n# For standalone configurations, we also include a .so version number.\n\n. $srcdir/VERSION\n\n####################################################################\n# Setup the rest of the infrastructure\n####################################################################\n\n# Setup hwloc's docs, utils, and tests\nAS_IF([test \"$hwloc_mode\" = \"standalone\"],\n      [HWLOC_SETUP_DOCS\n       HWLOC_SETUP_UTILS\n       HWLOC_SETUP_TESTS])\n\ncat <<EOF\n\n###\n### Performing final hwloc configuration\n###\nEOF\n\n# Run the AM_CONDITIONALs\nHWLOC_DO_AM_CONDITIONALS\nNETLOC_DO_AM_CONDITIONALS\n\n####################################################################\n# Final output\n####################################################################\n\n# Set the final flags\nCFLAGS=\"$HWLOC_EMBEDDED_CFLAGS $CFLAGS\"\nCPPFLAGS=\"$HWLOC_EMBEDDED_CPPFLAGS $CPPFLAGS\"\nLIBS=\"$HWLOC_EMBEDDED_LIBS $LIBS\"\n\n# Party on\nAC_OUTPUT\n\n# Warn if we didn't have pkg-config\nif test \"x$PKG_CONFIG\" = x; then\n  cat << EOF\n\n************************************************************************\nCould not detect/enable some features such as libxml2 and Cairo support\nbecause pkg-config isn't available.\n************************************************************************\nEOF\nfi\n\n# Show which optional support we'll be building\nhwloc_xml_status=basic\nAS_IF([test \"$hwloc_libxml2_happy\" = \"yes\"], [hwloc_xml_status=full])\nnetloc_status=no\nAS_IF([test \"$netloc_happy\" = \"yes\"], [\n  netlocscotch_status=without\n  AS_IF([test \"$scotch_found_headers\" = \"yes\"], [netlocscotch_status=with])\n  netloc_status=\"yes ($netlocscotch_status scotch)\"\n])\n\nAS_IF([test \"$enable_embedded_mode\" = \"yes\"],\n      [hwloc_graphical_lstopo_status=\"no (disabled in embedded mode)\"],\n      [AS_IF([test \"$hwloc_windows\" = \"yes\"],\n             [hwloc_graphical_lstopo_status=\"yes (Windows)\"],\n             [AS_IF([test \"$hwloc_cairo_happy\" = \"yes\"],\n                    [AS_IF([test \"$lstopo_have_x11\" = \"yes\"],\n                           [hwloc_graphical_lstopo_status=\"yes (Cairo)\"],\n                           [hwloc_graphical_lstopo_status=\"partial (Cairo, without X11)\"])],\n                    [hwloc_graphical_lstopo_status=\"no\"])\n             ])\n      ])\n\n# Prepare the I/O summary\nhwloc_probeio_list=\nif test \"x$hwloc_pciaccess_happy\" = \"xyes\" -o \"x$hwloc_linuxpci_happy\" = \"xyes\"; then\n  test \"x$hwloc_pciaccess_happy\" = \"xyes\" && hwloc_probepci_list=pciaccess\n  test \"x$hwloc_pciaccess_happy$hwloc_linuxpci_happy\" = \"xyesyes\" && hwloc_probepci_list=\"${hwloc_probepci_list}+\"\n  test \"x$hwloc_linuxio_happy\" = \"xyes\" && hwloc_probepci_list=\"${hwloc_probepci_list}linux\"\n  hwloc_probeio_list=\"$hwloc_probeio_list PCI($hwloc_probepci_list)\"\nfi\ntest \"x$hwloc_linuxio_happy\" = \"xyes\" && hwloc_probeio_list=\"$hwloc_probeio_list LinuxIO\"\ntest \"x$hwloc_opencl_happy\" = \"xyes\" && hwloc_probeio_list=\"$hwloc_probeio_list OpenCL\"\ntest \"x$hwloc_have_cudart\" = \"xyes\" && hwloc_probeio_list=\"$hwloc_probeio_list CUDA\"\ntest \"x$hwloc_nvml_happy\" = \"xyes\" && hwloc_probeio_list=\"$hwloc_probeio_list NVML\"\ntest \"x$hwloc_rsmi_happy\" = \"xyes\" && hwloc_probeio_list=\"$hwloc_probeio_list RSMI\"\ntest \"x$hwloc_gl_happy\" = \"xyes\" && hwloc_probeio_list=\"$hwloc_probeio_list GL\"\n# if nothing, say \"no\"\ntest \"x$hwloc_probeio_list\" = \"x\" && hwloc_probeio_list=\" no\"\n\n# Beginning of generic support\ncat <<EOF\n\n-----------------------------------------------------------------------------\nHwloc optional build support status (more details can be found above):\n\nProbe / display I/O devices:$hwloc_probeio_list\nGraphical output:            $hwloc_graphical_lstopo_status\nXML input / output:          $hwloc_xml_status\nNetloc functionality:        $netloc_status\nEOF\n\n# Plugin support\nhwloc_plugin_summary=$hwloc_have_plugins\ntest \"x$hwloc_plugin_components\" != \"x\" && hwloc_plugin_summary=\"$hwloc_plugins_load (\"`echo $hwloc_plugin_components`\")\" # echo removes the starting space\ncat <<EOF\nPlugin support:              $hwloc_plugin_summary\nEOF\n\n# End of generic support\ncat <<EOF\n-----------------------------------------------------------------------------\n\nEOF\n",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/config/hwloc.m4": "dnl -*- Autoconf -*-\ndnl\ndnl Copyright \u00a9 2009-2021 Inria.  All rights reserved.\ndnl Copyright \u00a9 2009-2012, 2015-2017, 2020 Universit\u00e9 Bordeaux\ndnl Copyright \u00a9 2004-2005 The Trustees of Indiana University and Indiana\ndnl                         University Research and Technology\ndnl                         Corporation.  All rights reserved.\ndnl Copyright \u00a9 2004-2012 The Regents of the University of California.\ndnl                         All rights reserved.\ndnl Copyright \u00a9 2004-2008 High Performance Computing Center Stuttgart,\ndnl                         University of Stuttgart.  All rights reserved.\ndnl Copyright \u00a9 2006-2017 Cisco Systems, Inc.  All rights reserved.\ndnl Copyright \u00a9 2012  Blue Brain Project, BBP/EPFL. All rights reserved.\ndnl Copyright \u00a9 2012       Oracle and/or its affiliates.  All rights reserved.\ndnl Copyright \u00a9 2012  Los Alamos National Security, LLC. All rights reserved.\ndnl Copyright \u00a9 2020 IBM Corporation.  All rights reserved.\ndnl See COPYING in top-level directory.\n\n# Main hwloc m4 macro, to be invoked by the user\n#\n# Expects two or three paramters:\n# 1. Configuration prefix\n# 2. What to do upon success\n# 3. What to do upon failure\n# 4. If non-empty, print the announcement banner\n#\nAC_DEFUN([HWLOC_SETUP_CORE],[\n    AC_REQUIRE([AC_USE_SYSTEM_EXTENSIONS])\n    AC_REQUIRE([AC_CANONICAL_TARGET])\n    AC_REQUIRE([AC_PROG_CC])\n\n    AS_IF([test \"x$4\" != \"x\"],\n          [cat <<EOF\n\n###\n### Configuring hwloc core\n###\nEOF])\n\n    # If no prefix was defined, set a good value\n    m4_ifval([$1],\n             [m4_define([hwloc_config_prefix],[$1/])],\n             [m4_define([hwloc_config_prefix], [])])\n\n    # Unless previously set to \"standalone\" mode, default to embedded\n    # mode\n    AS_IF([test \"$hwloc_mode\" = \"\"], [hwloc_mode=embedded])\n    AC_MSG_CHECKING([hwloc building mode])\n    AC_MSG_RESULT([$hwloc_mode])\n\n    # Get hwloc's absolute top builddir (which may not be the same as\n    # the real $top_builddir, because we may be building in embedded\n    # mode).\n    HWLOC_startdir=`pwd`\n    if test x\"hwloc_config_prefix\" != \"x\" -a ! -d \"hwloc_config_prefix\"; then\n        mkdir -p \"hwloc_config_prefix\"\n    fi\n    if test x\"hwloc_config_prefix\" != \"x\"; then\n        cd \"hwloc_config_prefix\"\n    fi\n    HWLOC_top_builddir=`pwd`\n    AC_SUBST(HWLOC_top_builddir)\n\n    # Get hwloc's absolute top srcdir (which may not be the same as\n    # the real $top_srcdir, because we may be building in embedded\n    # mode).  First, go back to the startdir incase the $srcdir is\n    # relative.\n\n    cd \"$HWLOC_startdir\"\n    cd \"$srcdir\"/hwloc_config_prefix\n    HWLOC_top_srcdir=\"`pwd`\"\n    AC_SUBST(HWLOC_top_srcdir)\n\n    # Go back to where we started\n    cd \"$HWLOC_startdir\"\n\n    AC_MSG_NOTICE([hwloc builddir: $HWLOC_top_builddir])\n    AC_MSG_NOTICE([hwloc srcdir: $HWLOC_top_srcdir])\n    if test \"$HWLOC_top_builddir\" != \"$HWLOC_top_srcdir\"; then\n        AC_MSG_NOTICE([Detected VPATH build])\n    fi\n\n    # Get the version of hwloc that we are installing\n    AC_MSG_CHECKING([for hwloc version])\n    HWLOC_VERSION=`sh \"$HWLOC_top_srcdir/config/hwloc_get_version.sh\" \"$HWLOC_top_srcdir/VERSION\"`\n    if test \"$?\" != \"0\"; then\n        AC_MSG_ERROR([Cannot continue])\n    fi\n    AC_MSG_RESULT([$HWLOC_VERSION])\n    AC_SUBST(HWLOC_VERSION)\n    AC_DEFINE_UNQUOTED([HWLOC_VERSION], [\"$HWLOC_VERSION\"],\n                       [The library version, always available, even in embedded mode, contrary to VERSION])\n\n    HWLOC_VERSION_MAJOR=`sh \"$HWLOC_top_srcdir/config/hwloc_get_version.sh\" \"$HWLOC_top_srcdir/VERSION\" --major`\n    AC_DEFINE_UNQUOTED([HWLOC_VERSION_MAJOR], [$HWLOC_VERSION_MAJOR], [The library version major number])\n    HWLOC_VERSION_MINOR=`sh \"$HWLOC_top_srcdir/config/hwloc_get_version.sh\" \"$HWLOC_top_srcdir/VERSION\" --minor`\n    AC_DEFINE_UNQUOTED([HWLOC_VERSION_MINOR], [$HWLOC_VERSION_MINOR], [The library version minor number])\n    HWLOC_VERSION_RELEASE=`sh \"$HWLOC_top_srcdir/config/hwloc_get_version.sh\" \"$HWLOC_top_srcdir/VERSION\" --release`\n    AC_DEFINE_UNQUOTED([HWLOC_VERSION_RELEASE], [$HWLOC_VERSION_RELEASE], [The library version release number])\n    HWLOC_VERSION_GREEK=`sh \"$HWLOC_top_srcdir/config/hwloc_get_version.sh\" \"$HWLOC_top_srcdir/VERSION\" --greek`\n    AC_DEFINE_UNQUOTED([HWLOC_VERSION_GREEK], [\"$HWLOC_VERSION_GREEK\"], [The library version optional greek suffix string])\n\n    HWLOC_RELEASE_DATE=`sh \"$HWLOC_top_srcdir/config/hwloc_get_version.sh\" \"$HWLOC_top_srcdir/VERSION\" --release-date`\n    AC_SUBST(HWLOC_RELEASE_DATE)\n\n    # Debug mode?\n    AC_MSG_CHECKING([if want hwloc maintainer support])\n    hwloc_debug=\n\n    # Unconditionally disable debug mode in embedded mode; if someone\n    # asks, we can add a configure-time option for it.  Disable it\n    # now, however, because --enable-debug is not even added as an\n    # option when configuring in embedded mode, and we wouldn't want\n    # to hijack the enclosing application's --enable-debug configure\n    # switch.\n    AS_IF([test \"$hwloc_mode\" = \"embedded\"],\n          [hwloc_debug=0\n           hwloc_debug_msg=\"disabled (embedded mode)\"])\n    AS_IF([test \"$hwloc_debug\" = \"\" -a \"$enable_debug\" = \"yes\"],\n          [hwloc_debug=1\n           hwloc_debug_msg=\"enabled\"])\n    AS_IF([test \"$hwloc_debug\" = \"\"],\n          [hwloc_debug=0\n           hwloc_debug_msg=\"disabled\"])\n    # Grr; we use #ifndef for HWLOC_DEBUG!  :-(\n    AH_TEMPLATE(HWLOC_DEBUG, [Whether we are in debugging mode or not])\n    AS_IF([test \"$hwloc_debug\" = \"1\"], [AC_DEFINE([HWLOC_DEBUG])])\n    AC_MSG_RESULT([$hwloc_debug_msg])\n\n    # We need to set a path for header, etc files depending on whether\n    # we're standalone or embedded. this is taken care of by HWLOC_EMBEDDED.\n\n    AC_MSG_CHECKING([for hwloc directory prefix])\n    AC_MSG_RESULT(m4_ifval([$1], hwloc_config_prefix, [(none)]))\n\n    # Note that private/config.h *MUST* be listed first so that it\n    # becomes the \"main\" config header file.  Any AC-CONFIG-HEADERS\n    # after that (hwloc/config.h) will only have selective #defines\n    # replaced, not the entire file.\n    AC_CONFIG_HEADERS(hwloc_config_prefix[include/private/autogen/config.h])\n    AC_CONFIG_HEADERS(hwloc_config_prefix[include/hwloc/autogen/config.h])\n\n    # What prefix are we using?\n    AC_MSG_CHECKING([for hwloc symbol prefix])\n    AS_IF([test \"$hwloc_symbol_prefix_value\" = \"\"],\n          [AS_IF([test \"$with_hwloc_symbol_prefix\" = \"\"],\n                 [hwloc_symbol_prefix_value=hwloc_],\n                 [hwloc_symbol_prefix_value=$with_hwloc_symbol_prefix])])\n    AC_DEFINE_UNQUOTED(HWLOC_SYM_PREFIX, [$hwloc_symbol_prefix_value],\n                       [The hwloc symbol prefix])\n    # Ensure to [] escape the whole next line so that we can get the\n    # proper tr tokens\n    [hwloc_symbol_prefix_value_caps=\"`echo $hwloc_symbol_prefix_value | tr '[:lower:]' '[:upper:]'`\"]\n    AC_DEFINE_UNQUOTED(HWLOC_SYM_PREFIX_CAPS, [$hwloc_symbol_prefix_value_caps],\n                       [The hwloc symbol prefix in all caps])\n    AC_MSG_RESULT([$hwloc_symbol_prefix_value])\n\n    # Give an easy #define to know if we need to transform all the\n    # hwloc names\n    AH_TEMPLATE([HWLOC_SYM_TRANSFORM], [Whether we need to re-define all the hwloc public symbols or not])\n    AS_IF([test \"$hwloc_symbol_prefix_value\" = \"hwloc_\"],\n          [AC_DEFINE([HWLOC_SYM_TRANSFORM], [0])],\n          [AC_DEFINE([HWLOC_SYM_TRANSFORM], [1])])\n\n    # hwloc 2.0+ requires a C99 compliant compiler\n    AC_PROG_CC_C99\n    # The result of AC_PROG_CC_C99 is stored in ac_cv_prog_cc_c99\n    if test \"x$ac_cv_prog_cc_c99\" = xno ; then\n        AC_MSG_WARN([hwloc requires a C99 compiler])\n        AC_MSG_ERROR([Aborting.])\n    fi\n\n    # GCC specifics.\n    _HWLOC_C_COMPILER_VENDOR([hwloc_c_vendor])\n    if test \"$hwloc_c_vendor\" = \"gnu\"; then\n        HWLOC_GCC_CFLAGS=\"-Wall -Wmissing-prototypes -Wundef\"\n        HWLOC_GCC_CFLAGS=\"$HWLOC_GCC_CFLAGS -Wpointer-arith -Wcast-align\"\n    fi\n\n    # Enample system extensions for O_DIRECTORY, fdopen, fssl, etc.\n    AH_VERBATIM([USE_HPUX_SYSTEM_EXTENSIONS],\n[/* Enable extensions on HP-UX. */\n#ifndef _HPUX_SOURCE\n# undef _HPUX_SOURCE\n#endif\n])\n    AC_DEFINE([_HPUX_SOURCE], [1], [Are we building for HP-UX?])\n\n    AC_LANG_PUSH([C])\n\n    # Check to see if we're producing a 32 or 64 bit executable by\n    # checking the sizeof void*.  Note that AC CHECK_SIZEOF even works\n    # when cross compiling (!), according to the AC 2.64 docs.  This\n    # check is needed because on some systems, you can instruct the\n    # compiler to specifically build 32 or 64 bit executables -- even\n    # though the $target may indicate something different.\n    AC_CHECK_SIZEOF([void *])\n\n    #\n    # List of components to be built, either statically or dynamically.\n    # To be enlarged below.\n    #\n    hwloc_components=\"noos xml synthetic xml_nolibxml\"\n\n    #\n    # Check OS support\n    #\n    AC_MSG_CHECKING([which OS support to include])\n    case ${target} in\n      powerpc64-bgq-linux*) # must be before Linux\n\tAC_DEFINE(HWLOC_BGQ_SYS, 1, [Define to 1 on BlueGene/Q])\n\thwloc_bgq=yes\n\tAC_MSG_RESULT([bgq])\n\thwloc_components=\"$hwloc_components bgq\"\n\t;;\n      *-*-linux*)\n        AC_DEFINE(HWLOC_LINUX_SYS, 1, [Define to 1 on Linux])\n        hwloc_linux=yes\n        AC_MSG_RESULT([Linux])\n        hwloc_components=\"$hwloc_components linux\"\n        if test \"x$enable_io\" != xno; then\n\t  AC_DEFINE(HWLOC_HAVE_LINUXIO, 1, [Define to 1 for I/O discovery in the Linux component])\n\t  hwloc_linuxio_happy=yes\n\t  if test x$enable_pci != xno; then\n\t    AC_DEFINE(HWLOC_HAVE_LINUXPCI, 1, [Define to 1 if enabling Linux-specific PCI discovery in the Linux I/O component])\n\t    hwloc_linuxpci_happy=yes\n\t  fi\n\tfi\n        ;;\n      *-*-irix*)\n        AC_DEFINE(HWLOC_IRIX_SYS, 1, [Define to 1 on Irix])\n        hwloc_irix=yes\n        AC_MSG_RESULT([IRIX])\n        # no irix component yet\n        ;;\n      *-*-darwin*)\n        AC_DEFINE(HWLOC_DARWIN_SYS, 1, [Define to 1 on Darwin])\n        hwloc_darwin=yes\n        AC_MSG_RESULT([Darwin])\n        hwloc_components=\"$hwloc_components darwin\"\n        ;;\n      *-*-solaris*)\n        AC_DEFINE(HWLOC_SOLARIS_SYS, 1, [Define to 1 on Solaris])\n        hwloc_solaris=yes\n        AC_MSG_RESULT([Solaris])\n        hwloc_components=\"$hwloc_components solaris\"\n        ;;\n      *-*-aix*)\n        AC_DEFINE(HWLOC_AIX_SYS, 1, [Define to 1 on AIX])\n        hwloc_aix=yes\n        AC_MSG_RESULT([AIX])\n        hwloc_components=\"$hwloc_components aix\"\n        ;;\n      *-*-hpux*)\n        AC_DEFINE(HWLOC_HPUX_SYS, 1, [Define to 1 on HP-UX])\n        hwloc_hpux=yes\n        AC_MSG_RESULT([HP-UX])\n        hwloc_components=\"$hwloc_components hpux\"\n        ;;\n      *-*-mingw*|*-*-cygwin*)\n        AC_DEFINE(HWLOC_WIN_SYS, 1, [Define to 1 on WINDOWS])\n        hwloc_windows=yes\n        AC_MSG_RESULT([Windows])\n        hwloc_components=\"$hwloc_components windows\"\n        ;;\n      *-*-*freebsd*)\n        AC_DEFINE(HWLOC_FREEBSD_SYS, 1, [Define to 1 on *FREEBSD])\n        hwloc_freebsd=yes\n        AC_MSG_RESULT([FreeBSD])\n        hwloc_components=\"$hwloc_components freebsd\"\n        ;;\n      *-*-*netbsd*)\n        AC_DEFINE(HWLOC_NETBSD_SYS, 1, [Define to 1 on *NETBSD])\n        hwloc_netbsd=yes\n        AC_MSG_RESULT([NetBSD])\n        hwloc_components=\"$hwloc_components netbsd\"\n        ;;\n      *)\n        AC_MSG_RESULT([Unsupported! ($target)])\n        AC_DEFINE(HWLOC_UNSUPPORTED_SYS, 1, [Define to 1 on unsupported systems])\n        AC_MSG_WARN([***********************************************************])\n        AC_MSG_WARN([*** hwloc does not support this system.])\n        AC_MSG_WARN([*** hwloc will *attempt* to build (but it may not work).])\n        AC_MSG_WARN([*** hwloc run-time results may be reduced to showing just one processor,])\n        AC_MSG_WARN([*** and binding will not be supported.])\n        AC_MSG_WARN([*** You have been warned.])\n        AC_MSG_WARN([*** Pausing to give you time to read this message...])\n        AC_MSG_WARN([***********************************************************])\n        sleep 10\n        ;;\n    esac\n\n    #\n    # Check CPU support\n    #\n    AC_MSG_CHECKING([which CPU support to include])\n    case ${target} in\n      i*86-*-*|x86_64-*-*|amd64-*-*)\n        case ${ac_cv_sizeof_void_p} in\n          4)\n            AC_DEFINE(HWLOC_X86_32_ARCH, 1, [Define to 1 on x86_32])\n            hwloc_x86_32=yes\n\t    HWLOC_MS_LIB_ARCH=X86\n            AC_MSG_RESULT([x86_32])\n            ;;\n          8)\n            AC_DEFINE(HWLOC_X86_64_ARCH, 1, [Define to 1 on x86_64])\n            hwloc_x86_64=yes\n\t    HWLOC_MS_LIB_ARCH=X64\n            AC_MSG_RESULT([x86_64])\n            ;;\n          *)\n            AC_DEFINE(HWLOC_X86_64_ARCH, 1, [Define to 1 on x86_64])\n            hwloc_x86_64=yes\n\t    HWLOC_MS_LIB_ARCH=X64\n            AC_MSG_RESULT([unknown -- assuming x86_64])\n            ;;\n        esac\n        ;;\n      *)\n        AC_MSG_RESULT([unknown])\n        ;;\n    esac\n    AC_SUBST(HWLOC_MS_LIB_ARCH)\n\n    AC_CHECK_SIZEOF([unsigned long])\n    AC_DEFINE_UNQUOTED([HWLOC_SIZEOF_UNSIGNED_LONG], $ac_cv_sizeof_unsigned_long, [The size of `unsigned long', as computed by sizeof])\n    AC_CHECK_SIZEOF([unsigned int])\n    AC_DEFINE_UNQUOTED([HWLOC_SIZEOF_UNSIGNED_INT], $ac_cv_sizeof_unsigned_int, [The size of `unsigned int', as computed by sizeof])\n\n    #\n    # Check for compiler attributes and visibility\n    #\n    _HWLOC_CHECK_ATTRIBUTES\n    _HWLOC_CHECK_VISIBILITY\n    HWLOC_CFLAGS=\"$HWLOC_FLAGS $HWLOC_VISIBILITY_CFLAGS\"\n    AS_IF([test \"$HWLOC_VISIBILITY_CFLAGS\" != \"\"],\n          [AC_MSG_WARN([\"$HWLOC_VISIBILITY_CFLAGS\" has been added to the hwloc CFLAGS])])\n\n    # Make sure the compiler returns an error code when function arg\n    # count is wrong, otherwise sched_setaffinity checks may fail.\n    HWLOC_STRICT_ARGS_CFLAGS=\n    hwloc_args_check=0\n    AC_MSG_CHECKING([whether the C compiler rejects function calls with too many arguments])\n    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n        extern int one_arg(int x);\n        int foo(void) { return one_arg(1, 2); }\n      ]])],\n      [AC_MSG_RESULT([no])],\n      [hwloc_args_check=1\n       AC_MSG_RESULT([yes])])\n    AC_MSG_CHECKING([whether the C compiler rejects function calls with too few arguments])\n    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n        extern int two_arg(int x, int y);\n        int foo(void) { return two_arg(3); }\n      ]])],\n      [AC_MSG_RESULT([no])],\n      [hwloc_args_check=`expr $hwloc_args_check + 1`\n       AC_MSG_RESULT([yes])])\n    AS_IF([test \"$hwloc_args_check\" != \"2\"],[\n         AC_MSG_WARN([Your C compiler does not consider incorrect argument counts to be a fatal error.])\n        case \"$hwloc_c_vendor\" in\n        ibm)\n            HWLOC_STRICT_ARGS_CFLAGS=\"-qhalt=e\"\n            ;;\n        intel)\n            HWLOC_STRICT_ARGS_CFLAGS=\"-we140\"\n            ;;\n        *)\n            HWLOC_STRICT_ARGS_CFLAGS=FAIL\n            AC_MSG_WARN([Please report this warning and configure using a different C compiler if possible.])\n            ;;\n        esac\n        AS_IF([test \"$HWLOC_STRICT_ARGS_CFLAGS\" != \"FAIL\"],[\n            AC_MSG_WARN([Configure will append '$HWLOC_STRICT_ARGS_CFLAGS' to the value of CFLAGS when needed.])\n             AC_MSG_WARN([Alternatively you may configure with a different compiler.])\n        ])\n    ])\n\n    AS_IF([test \"$hwloc_mode\" = \"standalone\"],[\n        # For the common developer case, if we're in a developer checkout and\n        # using the GNU compilers, turn on maximum warnings unless\n        # specifically disabled by the user.\n        AC_MSG_CHECKING([whether to enable \"picky\" compiler mode])\n        hwloc_want_picky=0\n        AS_IF([test \"$hwloc_c_vendor\" = \"gnu\"],\n              [AS_IF([test -e \"$srcdir/.git\"],\n                     [hwloc_want_picky=1])])\n        if test \"$enable_picky\" = \"yes\"; then\n            if test \"$hwloc_c_vendor\" = \"gnu\"; then\n                AC_MSG_RESULT([yes])\n                hwloc_want_picky=1\n            else\n                AC_MSG_RESULT([no])\n                AC_MSG_WARN([Warning: --enable-picky used, but is currently only defined for the GCC compiler set -- automatically disabled])\n                hwloc_want_picky=0\n            fi\n        elif test \"$enable_picky\" = \"no\"; then\n            AC_MSG_RESULT([no])\n            hwloc_want_picky=0\n        else\n            if test \"$hwloc_want_picky\" = 1; then\n                AC_MSG_RESULT([yes (default)])\n            else\n                AC_MSG_RESULT([no (default)])\n            fi\n        fi\n        if test \"$hwloc_want_picky\" = 1; then\n            add=\"-Wall -Wextra -Wunused-parameter -Wundef -Wno-long-long -Wsign-compare\"\n            add=\"$add -Wmissing-declarations -Wmissing-prototypes -Wstrict-prototypes\"\n            add=\"$add -Wcomment -pedantic -Wshadow -Wwrite-strings -Wnested-externs\"\n            add=\"$add -Wpointer-arith -Wbad-function-cast -Wold-style-definition\"\n            add=\"$add -Werror-implicit-function-declaration\"\n\n\t    _HWLOC_CHECK_CC_OPTION([-Wdiscarded-qualifiers], [add])\n\t    _HWLOC_CHECK_CC_OPTION([-Wvariadic-macros], [add])\n\t    _HWLOC_CHECK_CC_OPTION([-Wtype-limits], [add])\n\t    _HWLOC_CHECK_CC_OPTION([-Wstack-usage=262144], [add])\n\n\t    # -Wextra enables some -Wfoo that we want to disable it at some place\n\t    _HWLOC_CHECK_CC_OPTION([-Wmissing-field-initializers], [add], [AC_DEFINE(HWLOC_HAVE_GCC_W_MISSING_FIELD_INITIALIZERS, 1, [Define to 1 if gcc -Wmissing-field-initializers is supported and enabled])])\n\t    _HWLOC_CHECK_CC_OPTION([-Wcast-function-type], [add], [AC_DEFINE(HWLOC_HAVE_GCC_W_CAST_FUNCTION_TYPE, 1, [Define to 1 if gcc -Wcast-function-type is supported and enabled])])\n\n            HWLOC_CFLAGS=\"$HWLOC_CFLAGS $add\"\n        fi\n    ])\n\n    #\n    # Now detect support\n    #\n\n    AC_CHECK_HEADERS([unistd.h])\n    AC_CHECK_HEADERS([dirent.h])\n    AC_CHECK_HEADERS([strings.h])\n    AC_CHECK_HEADERS([ctype.h])\n\n    AC_CHECK_FUNCS([strcasecmp], [\n      _HWLOC_CHECK_DECL([strcasecmp], [\n\tAC_DEFINE([HWLOC_HAVE_DECL_STRCASECMP], [1], [Define to 1 if function `strcasecmp' is declared by system headers])\n      ])\n    ])\n    AC_CHECK_FUNCS([strncasecmp], [\n      _HWLOC_CHECK_DECL([strncasecmp], [\n\tAC_DEFINE([HWLOC_HAVE_DECL_STRNCASECMP], [1], [Define to 1 if function `strncasecmp' is declared by system headers])\n      ])\n    ])\n\n    AC_CHECK_FUNCS([strftime])\n    AC_CHECK_FUNCS([setlocale])\n\n    AC_CHECK_HEADER([stdint.h], [\n      AC_DEFINE([HWLOC_HAVE_STDINT_H], [1], [Define to 1 if you have the <stdint.h> header file.])\n    ])\n    AC_CHECK_HEADERS([sys/mman.h])\n\n    if test x$hwloc_freebsd = xyes; then\n      echo\n      echo \"**** FreeBSD-specific checks\"\n\n      AC_CHECK_HEADERS([sys/domainset.h])\n      AC_CHECK_HEADERS([sys/thr.h])\n      AC_CHECK_HEADERS([pthread_np.h])\n      AC_CHECK_HEADERS([sys/cpuset.h],,,[[#include <sys/param.h>]])\n      AC_CHECK_FUNCS([cpuset_setaffinity])\n      AC_CHECK_FUNCS([cpuset_setid])\n\n      echo \"**** end of FreeBSD-specific checks\"\n      echo\n    fi\n\n    if test x$hwloc_windows = xyes; then\n      echo\n      echo \"**** Windows-specific checks\"\n\n      AC_CHECK_HEADER([windows.h], [\n        AC_DEFINE([HWLOC_HAVE_WINDOWS_H], [1], [Define to 1 if you have the `windows.h' header.])\n      ])\n\n      old_CPPFLAGS=\"$CPPFLAGS\"\n      CPPFLAGS=\"$CPPFLAGS -D_WIN32_WINNT=0x0601\"\n      AC_CHECK_TYPES([KAFFINITY,\n                      PROCESSOR_CACHE_TYPE,\n                      CACHE_DESCRIPTOR,\n                      LOGICAL_PROCESSOR_RELATIONSHIP,\n                      RelationProcessorPackage,\n                      SYSTEM_LOGICAL_PROCESSOR_INFORMATION,\n                      GROUP_AFFINITY,\n                      PROCESSOR_RELATIONSHIP,\n                      NUMA_NODE_RELATIONSHIP,\n                      CACHE_RELATIONSHIP,\n                      PROCESSOR_GROUP_INFO,\n                      GROUP_RELATIONSHIP,\n                      SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX,\n                      PSAPI_WORKING_SET_EX_BLOCK,\n                      PSAPI_WORKING_SET_EX_INFORMATION,\n                      PROCESSOR_NUMBER],\n                      [],[],[[#include <windows.h>]])\n      CPPFLAGS=\"$old_CPPFLAGS\"\n\n      AC_CHECK_DECLS([GetModuleFileName], [], [], [#include <windows.h>])\n\n      AC_CHECK_LIB([gdi32], [main],\n                   [HWLOC_LIBS=\"-lgdi32 $HWLOC_LIBS\"\n                    AC_DEFINE([HAVE_LIBGDI32], 1, [Define to 1 if we have -lgdi32])])\n      AC_CHECK_LIB([user32], [PostQuitMessage], [hwloc_have_user32=\"yes\"])\n\n      AC_PATH_PROGS([HWLOC_MS_LIB], [lib])\n      AC_ARG_VAR([HWLOC_MS_LIB], [Path to Microsoft's Visual Studio `lib' tool])\n\n      echo \"**** end of Windows-specific checks\"\n      echo\n    fi\n\n    if test x$hwloc_solaris = xyes; then\n      echo\n      echo \"**** Solaris-specific checks\"\n\n      AC_CHECK_HEADERS([sys/lgrp_user.h], [\n        AC_CHECK_LIB([lgrp], [lgrp_init],\n                     [HWLOC_LIBS=\"-llgrp $HWLOC_LIBS\"\n                      AC_DEFINE([HAVE_LIBLGRP], 1, [Define to 1 if we have -llgrp])\n                      AC_CHECK_DECLS([lgrp_latency_cookie],,,[[#include <sys/lgrp_user.h>]])\n        ])\n      ])\n      AC_CHECK_HEADERS([kstat.h], [\n        AC_CHECK_LIB([kstat], [main],\n                     [HWLOC_LIBS=\"-lkstat $HWLOC_LIBS\"\n                      AC_DEFINE([HAVE_LIBKSTAT], 1, [Define to 1 if we have -lkstat])])\n      ])\n\n      AC_CHECK_HEADERS([picl.h], [\n        AC_CHECK_LIB([picl], [picl_initialize],\n                     [HWLOC_LIBS=\"-lpicl $HWLOC_LIBS\"])])\n\n      echo \"**** end of Solaris-specific checks\"\n      echo\n    fi\n\n    if test x$hwloc_aix = xyes; then\n      echo\n      echo \"**** AIX-specific checks\"\n\n      AC_SEARCH_LIBS([pthread_getthrds_np], [pthread], [\n        AC_DEFINE([HWLOC_HAVE_PTHREAD_GETTHRDS_NP], 1, `Define to 1 if you have pthread_getthrds_np')\n      ])\n\n      echo \"**** end of AIX-specific checks\"\n      echo\n    fi\n\n    if test x$hwloc_linux = xyes; then\n      echo\n      echo \"**** Linux-specific checks\"\n\n      AC_CHECK_DECLS([sched_getcpu],,[:],[[\n        #ifndef _GNU_SOURCE\n        # define _GNU_SOURCE\n        #endif\n        #include <sched.h>\n      ]])\n\n      _HWLOC_CHECK_DECL([sched_setaffinity], [\n\thwloc_have_sched_setaffinity=yes\n        AC_DEFINE([HWLOC_HAVE_SCHED_SETAFFINITY], [1], [Define to 1 if glibc provides a prototype of sched_setaffinity()])\n        AS_IF([test \"$HWLOC_STRICT_ARGS_CFLAGS\" = \"FAIL\"],[\n          AC_MSG_WARN([Support for sched_setaffinity() requires a C compiler which])\n          AC_MSG_WARN([considers incorrect argument counts to be a fatal error.])\n          AC_MSG_ERROR([Cannot continue.])\n        ])\n        AC_MSG_CHECKING([for old prototype of sched_setaffinity])\n        hwloc_save_CFLAGS=$CFLAGS\n        CFLAGS=\"$CFLAGS $HWLOC_STRICT_ARGS_CFLAGS\"\n        AC_COMPILE_IFELSE([\n            AC_LANG_PROGRAM([[\n              #ifndef _GNU_SOURCE\n              # define _GNU_SOURCE\n              #endif\n              #include <sched.h>\n              static unsigned long mask;\n              ]], [[ sched_setaffinity(0, (void*) &mask); ]])],\n            [AC_DEFINE([HWLOC_HAVE_OLD_SCHED_SETAFFINITY], [1], [Define to 1 if glibc provides the old prototype (without length) of sched_setaffinity()])\n             AC_MSG_RESULT([yes])],\n            [AC_MSG_RESULT([no])])\n        CFLAGS=$hwloc_save_CFLAGS\n      ], , [[\n#ifndef _GNU_SOURCE\n# define _GNU_SOURCE\n#endif\n#include <sched.h>\n      ]])\n\n      AC_MSG_CHECKING([for working CPU_SET])\n      AC_LINK_IFELSE([\n        AC_LANG_PROGRAM([[\n          #include <sched.h>\n          cpu_set_t set;\n        ]], [[ CPU_ZERO(&set); CPU_SET(0, &set);]])],\n        [AC_DEFINE([HWLOC_HAVE_CPU_SET], [1], [Define to 1 if the CPU_SET macro works])\n         AC_MSG_RESULT([yes])],\n        [AC_MSG_RESULT([no])])\n\n      AC_MSG_CHECKING([for working CPU_SET_S])\n      AC_LINK_IFELSE([\n        AC_LANG_PROGRAM([[\n          #include <sched.h>\n          cpu_set_t *set;\n        ]], [[\n          set = CPU_ALLOC(1024);\n          CPU_ZERO_S(CPU_ALLOC_SIZE(1024), set);\n          CPU_SET_S(CPU_ALLOC_SIZE(1024), 0, set);\n          CPU_FREE(set);\n        ]])],\n        [AC_DEFINE([HWLOC_HAVE_CPU_SET_S], [1], [Define to 1 if the CPU_SET_S macro works])\n         AC_MSG_RESULT([yes])],\n        [AC_MSG_RESULT([no])])\n\n      AC_MSG_CHECKING([for working syscall with 6 parameters])\n      AC_LINK_IFELSE([\n        AC_LANG_PROGRAM([[\n          #include <unistd.h>\n          #include <sys/syscall.h>\n          ]], [[syscall(0, 1, 2, 3, 4, 5, 6);]])],\n        [AC_DEFINE([HWLOC_HAVE_SYSCALL], [1], [Define to 1 if function `syscall' is available with 6 parameters])\n         AC_MSG_RESULT([yes])],\n        [AC_MSG_RESULT([no])])\n\n      # Linux libudev support\n      if test \"x$enable_libudev\" != xno; then\n        AC_CHECK_HEADERS([libudev.h], [\n          AC_CHECK_LIB([udev], [udev_device_new_from_subsystem_sysname], [\n            HWLOC_LIBS=\"$HWLOC_LIBS -ludev\"\n            AC_DEFINE([HWLOC_HAVE_LIBUDEV], [1], [Define to 1 if you have libudev.])\n          ])\n        ])\n      fi\n\n      echo \"**** end of Linux-specific checks\"\n      echo\n    fi\n\n    if test \"x$hwloc_linux\" != \"xyes\" ; then\n      # Don't look for sys/sysctl.h on Linux because it's deprecated and\n      # generates a warning in GCC10. Also it's unneeded.\n      AC_CHECK_HEADERS([sys/param.h])\n      AC_CHECK_HEADERS([sys/sysctl.h], [\n        AC_CHECK_DECLS([CTL_HW, HW_NCPU, HW_REALMEM64, HW_MEMSIZE64, HW_PHYSMEM64, HW_USERMEM64, HW_REALMEM, HW_MEMSIZE, HW_PHYSMEM, HW_USERMEM],,,[[\n        #if HAVE_SYS_PARAM_H\n        #include <sys/param.h>\n        #endif\n        #include <sys/sysctl.h>\n        ]])\n      ],,[\n        AC_INCLUDES_DEFAULT\n        #if HAVE_SYS_PARAM_H\n        #include <sys/param.h>\n        #endif\n      ])\n\n      # Don't detect sysctl* on Linux because its sysctl() syscall is\n      # long deprecated and unneeded. Some libc still expose the symbol\n      # and raise a big warning at link time.\n\n      # Do a full link test instead of just using AC_CHECK_FUNCS, which\n      # just checks to see if the symbol exists or not.  For example,\n      # the prototype of sysctl uses u_int, which on some platforms\n      # (such as FreeBSD) is only defined under __BSD_VISIBLE, __USE_BSD\n      # or other similar definitions.  So while the symbols \"sysctl\" and\n      # \"sysctlbyname\" might still be available in libc (which autoconf\n      # checks for), they might not be actually usable.\n      AC_MSG_CHECKING([for sysctl])\n      AC_TRY_LINK([\n                 #include <stdio.h>\n                 #include <sys/types.h>\n                 #include <sys/sysctl.h>\n                 ],\n                  [return sysctl(NULL,0,NULL,NULL,NULL,0);],\n                  [AC_DEFINE([HAVE_SYSCTL],[1],[Define to '1' if sysctl is present and usable])\n                   AC_MSG_RESULT(yes)],\n                  [AC_MSG_RESULT(no)])\n      AC_MSG_CHECKING([for sysctlbyname])\n      AC_TRY_LINK([\n                 #include <stdio.h>\n                 #include <sys/types.h>\n                 #include <sys/sysctl.h>\n                 ],\n                  [return sysctlbyname(NULL,NULL,NULL,NULL,0);],\n                  [AC_DEFINE([HAVE_SYSCTLBYNAME],[1],[Define to '1' if sysctlbyname is present and usable])\n                   AC_MSG_RESULT(yes)],\n                  [AC_MSG_RESULT(no)])\n    fi\n\n    AC_CHECK_DECLS([pthread_setaffinity_np],,[:],[[\n      #include <pthread.h>\n      #ifdef HAVE_PTHREAD_NP_H\n      #  include <pthread_np.h>\n      #endif\n    ]])\n    AC_CHECK_DECLS([pthread_getaffinity_np],,[:],[[\n      #include <pthread.h>\n      #ifdef HAVE_PTHREAD_NP_H\n      #  include <pthread_np.h>\n      #endif\n    ]])\n\n    AC_CHECK_DECLS([fabsf], [\n      AC_CHECK_LIB([m], [fabsf],\n                   [need_libm=yes])\n    ], [], [[#include <math.h>]])\n    AC_CHECK_DECLS([modff], [\n      AC_CHECK_LIB([m], [modff],\n                   [need_libm=yes])\n    ], [], [[#include <math.h>]])\n    if test x$need_libm = xyes; then\n      HWLOC_LIBS=\"-lm $HWLOC_LIBS\"\n    fi\n\n    AC_CHECK_DECLS([_SC_NPROCESSORS_ONLN,\n    \t\t_SC_NPROCESSORS_CONF,\n    \t\t_SC_NPROC_ONLN,\n    \t\t_SC_NPROC_CONF,\n    \t\t_SC_PAGESIZE,\n    \t\t_SC_PAGE_SIZE,\n    \t\t_SC_LARGE_PAGESIZE],,[:],[[#include <unistd.h>]])\n\n    AC_HAVE_HEADERS([mach/mach_init.h])\n    AC_HAVE_HEADERS([mach_init.h])\n    AC_HAVE_HEADERS([mach/mach_host.h], [\n      AC_CHECK_FUNCS([host_info])\n    ])\n\n    AC_CHECK_DECLS([strtoull], [], [AC_CHECK_FUNCS([strtoull])], [AC_INCLUDES_DEFAULT])\n\n    # Needed for Windows in private/misc.h\n    AC_CHECK_TYPES([ssize_t])\n    AC_CHECK_DECLS([snprintf], [], [], [AC_INCLUDES_DEFAULT])\n    # strdup and putenv are declared in windows headers but marked deprecated\n    AC_CHECK_DECLS([_strdup], [], [], [AC_INCLUDES_DEFAULT])\n    AC_CHECK_DECLS([_putenv], [], [], [AC_INCLUDES_DEFAULT])\n    # Could add mkdir and access for hwloc-gather-cpuid.c on Windows\n\n    broken_snprintf=no\n    AC_MSG_CHECKING([whether snprintf is correct])\n    AC_RUN_IFELSE([\n      AC_LANG_PROGRAM([[\n#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n        ]], [[\nchar buf[7];\nassert(snprintf(buf, 7, \"abcdef\") == 6);\nassert(snprintf(buf, 6, \"abcdef\") == 6);\nassert(snprintf(buf, 5, \"abcdef\") == 6);\nassert(snprintf(buf, 0, \"abcdef\") == 6);\nassert(snprintf(NULL, 0, \"abcdef\") == 6);\nreturn 0;\n        ]])],\n\tAC_MSG_RESULT([yes]),\n\t[\n\t  AC_MSG_RESULT([no])\n\t  broken_snprintf=yes\n\t], [\n\t  AC_MSG_RESULT([don't know (cross-compiling)])\n\t  broken_snprintf=maybe\n\t])\n\n    if test x$broken_snprintf = xno; then\n      AC_DEFINE([HWLOC_HAVE_CORRECT_SNPRINTF], 1, [Define to 1 if snprintf supports NULL output buffer and returns the correct length on truncation])\n    fi\n\n    AC_CHECK_DECLS([getprogname], [], [], [AC_INCLUDES_DEFAULT])\n    AC_CHECK_DECLS([getexecname], [], [], [AC_INCLUDES_DEFAULT])\n    # program_invocation_name and __progname may be available but not exported in headers\n    AC_MSG_CHECKING([for program_invocation_name])\n    AC_TRY_LINK([\n\t\t#ifndef _GNU_SOURCE\n\t\t# define _GNU_SOURCE\n\t\t#endif\n\t\t#include <errno.h>\n\t\t#include <stdio.h>\n\t\textern char *program_invocation_name;\n\t\t],[\n\t\treturn printf(\"%s\\n\", program_invocation_name);\n\t\t],\n\t\t[AC_DEFINE([HAVE_PROGRAM_INVOCATION_NAME], [1], [Define to '1' if program_invocation_name is present and usable])\n\t\t AC_MSG_RESULT([yes])\n\t\t],[AC_MSG_RESULT([no])])\n    AC_MSG_CHECKING([for __progname])\n    AC_TRY_LINK([\n\t\t#include <stdio.h>\n\t\textern char *__progname;\n\t\t],[\n\t\treturn printf(\"%s\\n\", __progname);\n\t\t],\n\t\t[AC_DEFINE([HAVE___PROGNAME], [1], [Define to '1' if __progname is present and usable])\n\t\t AC_MSG_RESULT([yes])\n\t\t],[AC_MSG_RESULT([no])])\n\n    case ${target} in\n      *-*-mingw*|*-*-cygwin*)\n        hwloc_pid_t=HANDLE\n        hwloc_thread_t=HANDLE\n        ;;\n      *)\n        hwloc_pid_t=pid_t\n        AC_CHECK_TYPES([pthread_t], [hwloc_thread_t=pthread_t], [:], [[#include <pthread.h>]])\n        ;;\n    esac\n    AC_DEFINE_UNQUOTED(hwloc_pid_t, $hwloc_pid_t, [Define this to the process ID type])\n    if test \"x$hwloc_thread_t\" != \"x\" ; then\n      AC_DEFINE_UNQUOTED(hwloc_thread_t, $hwloc_thread_t, [Define this to the thread ID type])\n    fi\n\n    AC_PATH_PROG([BASH], [bash])\n\n    AC_CHECK_FUNCS([ffs], [\n      _HWLOC_CHECK_DECL([ffs],[\n        AC_DEFINE([HWLOC_HAVE_DECL_FFS], [1], [Define to 1 if function `ffs' is declared by system headers])\n      ])\n      AC_DEFINE([HWLOC_HAVE_FFS], [1], [Define to 1 if you have the `ffs' function.])\n      if ( $CC --version | grep gccfss ) >/dev/null 2>&1 ; then\n        dnl May be broken due to\n        dnl    https://forums.oracle.com/forums/thread.jspa?threadID=1997328\n        dnl TODO: a more selective test, since bug may be version dependent.\n        dnl We can't use AC_TRY_LINK because the failure does not appear until\n        dnl run/load time and there is currently no precedent for AC_TRY_RUN\n        dnl use in hwloc.  --PHH\n        dnl For now, we're going with \"all gccfss compilers are broken\".\n        dnl Better to be safe and correct; it's not like this is\n        dnl performance-critical code, after all.\n        AC_DEFINE([HWLOC_HAVE_BROKEN_FFS], [1],\n                  [Define to 1 if your `ffs' function is known to be broken.])\n      fi\n    ])\n    AC_CHECK_FUNCS([ffsl], [\n      _HWLOC_CHECK_DECL([ffsl],[\n        AC_DEFINE([HWLOC_HAVE_DECL_FFSL], [1], [Define to 1 if function `ffsl' is declared by system headers])\n      ])\n      AC_DEFINE([HWLOC_HAVE_FFSL], [1], [Define to 1 if you have the `ffsl' function.])\n    ])\n\n    AC_CHECK_FUNCS([fls], [\n      _HWLOC_CHECK_DECL([fls],[\n        AC_DEFINE([HWLOC_HAVE_DECL_FLS], [1], [Define to 1 if function `fls' is declared by system headers])\n      ])\n      AC_DEFINE([HWLOC_HAVE_FLS], [1], [Define to 1 if you have the `fls' function.])\n    ])\n    AC_CHECK_FUNCS([flsl], [\n      _HWLOC_CHECK_DECL([flsl],[\n        AC_DEFINE([HWLOC_HAVE_DECL_FLSL], [1], [Define to 1 if function `flsl' is declared by system headers])\n      ])\n      AC_DEFINE([HWLOC_HAVE_FLSL], [1], [Define to 1 if you have the `flsl' function.])\n    ])\n\n    AC_CHECK_FUNCS([clz], [\n      _HWLOC_CHECK_DECL([clz],[\n        AC_DEFINE([HWLOC_HAVE_DECL_CLZ], [1], [Define to 1 if function `clz' is declared by system headers])\n      ])\n      AC_DEFINE([HWLOC_HAVE_CLZ], [1], [Define to 1 if you have the `clz' function.])\n    ])\n    AC_CHECK_FUNCS([clzl], [\n      _HWLOC_CHECK_DECL([clzl],[\n        AC_DEFINE([HWLOC_HAVE_DECL_CLZL], [1], [Define to 1 if function `clzl' is declared by system headers])\n      ])\n      AC_DEFINE([HWLOC_HAVE_CLZL], [1], [Define to 1 if you have the `clzl' function.])\n    ])\n\n    AS_IF([test \"$hwloc_c_vendor\" != \"android\"], [AC_CHECK_FUNCS([openat], [hwloc_have_openat=yes])])\n\n    AC_CHECK_HEADERS([malloc.h])\n    AC_CHECK_FUNCS([getpagesize memalign posix_memalign])\n\n    AC_CHECK_HEADERS([sys/utsname.h])\n    AC_CHECK_FUNCS([uname])\n\n    dnl Don't check for valgrind in embedded mode because this may conflict\n    dnl with the embedder projects also checking for it.\n    dnl We only use Valgrind to nicely disable the x86 backend with a warning,\n    dnl but we can live without it in embedded mode (it auto-disables itself\n    dnl because of invalid CPUID outputs).\n    dnl Non-embedded checks usually go to hwloc_internal.m4 but this one is\n    dnl is really for the core library.\n    AS_IF([test \"$hwloc_mode\" != \"embedded\"],\n        [AC_CHECK_HEADERS([valgrind/valgrind.h])\n         AC_CHECK_DECLS([RUNNING_ON_VALGRIND],,[:],[[#include <valgrind/valgrind.h>]])\n\t],[\n\t AC_DEFINE([HAVE_DECL_RUNNING_ON_VALGRIND], [0], [Embedded mode; just assume we do not have Valgrind support])\n\t])\n\n    AS_IF([test \"x$enable_32bits_pci_domain\" = \"xyes\"], [\n      AC_DEFINE([HWLOC_HAVE_32BITS_PCI_DOMAIN], 1,\n        [Define to 1 if --enable-32bits-pci-domain is called.])\n    ])\n\n    # PCI support via libpciaccess.  NOTE: we do not support\n    # libpci/pciutils because that library is GPL and is incompatible\n    # with our BSD license.\n    hwloc_pciaccess_happy=no\n    if test \"x$enable_io\" != xno && test \"x$enable_pci\" != xno; then\n      hwloc_pciaccess_happy=yes\n      HWLOC_PKG_CHECK_MODULES([PCIACCESS], [pciaccess], [pci_slot_match_iterator_create], [pciaccess.h], [:], [hwloc_pciaccess_happy=no])\n\n      # Only add the REQUIRES if we got pciaccess through pkg-config.\n      # Otherwise we don't know if pciaccess.pc is installed\n      AS_IF([test \"$hwloc_pciaccess_happy\" = \"yes\"], [HWLOC_PCIACCESS_REQUIRES=pciaccess])\n\n      # Just for giggles, if we didn't find a pciaccess pkg-config,\n      # just try looking for its header file and library.\n      AS_IF([test \"$hwloc_pciaccess_happy\" != \"yes\"],\n         [AC_CHECK_HEADER([pciaccess.h],\n              [AC_CHECK_LIB([pciaccess], [pci_slot_match_iterator_create],\n                   [hwloc_pciaccess_happy=yes\n                    HWLOC_PCIACCESS_LIBS=\"-lpciaccess\"])\n              ])\n         ])\n\n      AS_IF([test \"$hwloc_pciaccess_happy\" = \"yes\"],\n         [hwloc_components=\"$hwloc_components pci\"\n          hwloc_pci_component_maybeplugin=1])\n    fi\n    # If we asked for pci support but couldn't deliver, fail\n    AS_IF([test \"$enable_pci\" = \"yes\" -a \"$hwloc_pciaccess_happy\" = \"no\"],\n          [AC_MSG_WARN([Specified --enable-pci switch, but could not])\n           AC_MSG_WARN([find appropriate support])\n           AC_MSG_ERROR([Cannot continue])])\n    # don't add LIBS/CFLAGS/REQUIRES yet, depends on plugins\n\n    if test \"x$enable_io\" != xno && test \"x$enable_opencl\" != xno -o \"x$enable_cuda\" != xno -o \"x$enable_nvml\" != xyes; then\n      # OpenCL/NVML/CUDA may use CUDA directories, define common directories\n\n      # Generic NVIDIA variables since NVML/OpenCL are installed inside CUDA directories\n      if test \"x$with_cuda\" != xno -a \"x$with_cuda\" != x; then\n        # libnvidia-ml.so (and libcuda.so for tests) is under stubs\n        # when the driver isn't installed on the build machine.\n        # hwloc programs will fail to link if libnvidia-ml.so.1 is not available there too.\n        if test \"x${ac_cv_sizeof_void_p}\" = x4; then\n          HWLOC_CUDA_COMMON_LDFLAGS=\"-L$with_cuda/lib/ -L$with_cuda/lib/stubs/\"\n        else\n          HWLOC_CUDA_COMMON_LDFLAGS=\"-L$with_cuda/lib64/ -L$with_cuda/lib64/stubs/\"\n        fi\n        HWLOC_CUDA_COMMON_CPPFLAGS=\"-I$with_cuda/include/\"\n      fi\n    fi\n\n    # OpenCL support\n    hwloc_opencl_happy=no\n    if test \"x$enable_io\" != xno && test \"x$enable_opencl\" != \"xno\"; then\n      hwloc_opencl_happy=yes\n      case ${target} in\n      *-*-darwin*)\n        # On Darwin, only use the OpenCL framework\n        AC_CHECK_HEADERS([OpenCL/cl_ext.h], [\n\t  AC_MSG_CHECKING([for the OpenCL framework])\n          tmp_save_LDFLAGS=\"$LDFLAGS\"\n          LDFLAGS=\"$LDFLAGS -framework OpenCL\"\n\t  AC_LINK_IFELSE([\n            AC_LANG_PROGRAM([[\n#include <OpenCL/opencl.h>\n            ]], [[\nreturn clGetDeviceIDs(0, 0, 0, NULL, NULL);\n            ]])],\n          [AC_MSG_RESULT(yes)\n\t   HWLOC_OPENCL_LDFLAGS=\"-framework OpenCL\"],\n\t  [AC_MSG_RESULT(no)\n\t   hwloc_opencl_happy=no])\n          LDFLAGS=\"$tmp_save_LDFLAGS\"\n        ], [hwloc_opencl_happy=no])\n      ;;\n      *)\n        # On Others, look for OpenCL at normal locations\n        HWLOC_OPENCL_CPPFLAGS=\"$HWLOC_CUDA_COMMON_CPPFLAGS\"\n        HWLOC_OPENCL_LDFLAGS=\"$HWLOC_CUDA_COMMON_LDFLAGS\"\n        tmp_save_CPPFLAGS=\"$CPPFLAGS\"\n        CPPFLAGS=\"$CPPFLAGS $HWLOC_OPENCL_CPPFLAGS\"\n        tmp_save_LDFLAGS=\"$LDFLAGS\"\n        LDFLAGS=\"$LDFLAGS $HWLOC_OPENCL_LDFLAGS\"\n        AC_CHECK_HEADERS([CL/cl_ext.h], [\n\t  AC_CHECK_LIB([OpenCL], [clGetDeviceIDs], [HWLOC_OPENCL_LIBS=\"-lOpenCL\"], [hwloc_opencl_happy=no])\n        ], [hwloc_opencl_happy=no])\n        CPPFLAGS=\"$tmp_save_CPPFLAGS\"\n        LDFLAGS=\"$tmp_save_LDFLAGS\"\n      ;;\n      esac\n    fi\n    AC_SUBST(HWLOC_OPENCL_CPPFLAGS)\n    AC_SUBST(HWLOC_OPENCL_LIBS)\n    AC_SUBST(HWLOC_OPENCL_LDFLAGS)\n    # If we asked for opencl support but couldn't deliver, fail\n    AS_IF([test \"$enable_opencl\" = \"yes\" -a \"$hwloc_opencl_happy\" = \"no\"],\n          [AC_MSG_WARN([Specified --enable-opencl switch, but could not])\n           AC_MSG_WARN([find appropriate support])\n           AC_MSG_ERROR([Cannot continue])])\n    if test \"x$hwloc_opencl_happy\" = \"xyes\"; then\n      AC_DEFINE([HWLOC_HAVE_OPENCL], [1], [Define to 1 if you have the `OpenCL' library.])\n      AC_SUBST([HWLOC_HAVE_OPENCL], [1])\n      hwloc_components=\"$hwloc_components opencl\"\n      hwloc_opencl_component_maybeplugin=1\n    else\n      AC_SUBST([HWLOC_HAVE_OPENCL], [0])\n    fi\n    # don't add LIBS/CFLAGS/REQUIRES yet, depends on plugins\n\n    # CUDA support\n    hwloc_have_cuda=no\n    hwloc_have_cudart=no\n    if test \"x$enable_io\" != xno && test \"x$enable_cuda\" != \"xno\"; then\n      HWLOC_CUDA_CPPFLAGS=\"$HWLOC_CUDA_COMMON_CPPFLAGS\"\n      HWLOC_CUDA_LDFLAGS=\"$HWLOC_CUDA_COMMON_LDFLAGS\"\n      tmp_save_CPPFLAGS=\"$CPPFLAGS\"\n      CPPFLAGS=\"$CPPFLAGS $HWLOC_CUDA_CPPFLAGS\"\n      tmp_save_LDFLAGS=\"$LDFLAGS\"\n      LDFLAGS=\"$LDFLAGS $HWLOC_CUDA_LDFLAGS\"\n      AC_CHECK_HEADERS([cuda.h], [\n        AC_MSG_CHECKING(if CUDA_VERSION >= 3020)\n        AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n#include <cuda.h>\n#ifndef CUDA_VERSION\n#error CUDA_VERSION undefined\n#elif CUDA_VERSION < 3020\n#error CUDA_VERSION too old\n#endif]], [[int i = 3;]])],\n         [AC_MSG_RESULT(yes)\n          AC_CHECK_LIB([cuda], [cuInit],\n                       [AC_DEFINE([HAVE_CUDA], 1, [Define to 1 if we have -lcuda])\n                        hwloc_have_cuda=yes])],\n         [AC_MSG_RESULT(no)])])\n\n      AC_CHECK_HEADERS([cuda_runtime_api.h], [\n        AC_MSG_CHECKING(if CUDART_VERSION >= 3020)\n        AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n#include <cuda_runtime_api.h>\n#ifndef CUDART_VERSION\n#error CUDART_VERSION undefined\n#elif CUDART_VERSION < 3020\n#error CUDART_VERSION too old\n#endif]], [[int i = 3;]])],\n         [AC_MSG_RESULT(yes)\n          AC_CHECK_LIB([cudart], [cudaGetDeviceProperties], [\n            HWLOC_CUDA_LIBS=\"-lcudart\"\n            AC_SUBST(HWLOC_CUDA_LIBS)\n            AC_SUBST(HWLOC_CUDA_LDFLAGS)\n            AC_SUBST(HWLOC_CUDA_CPPFLAGS)\n            hwloc_have_cudart=yes\n            AC_DEFINE([HWLOC_HAVE_CUDART], [1], [Define to 1 if you have the `cudart' SDK.])\n          ])\n        ])\n      ])\n      CPPFLAGS=\"$tmp_save_CPPFLAGS\"\n      LDFLAGS=\"$tmp_save_LDFLAGS\"\n\n      AS_IF([test \"$enable_cuda\" = \"yes\" -a \"$hwloc_have_cudart\" = \"no\"],\n            [AC_MSG_WARN([Specified --enable-cuda switch, but could not])\n             AC_MSG_WARN([find appropriate support])\n             AC_MSG_ERROR([Cannot continue])])\n\n      if test \"x$hwloc_have_cudart\" = \"xyes\"; then\n\thwloc_components=\"$hwloc_components cuda\"\n        hwloc_cuda_component_maybeplugin=1\n      fi\n    fi\n    # don't add LIBS/CFLAGS yet, depends on plugins\n\n    # NVML support\n    hwloc_nvml_happy=no\n    if test \"x$enable_io\" != xno && test \"x$enable_nvml\" != \"xno\"; then\n      hwloc_nvml_happy=yes\n      HWLOC_NVML_CPPFLAGS=\"$HWLOC_CUDA_COMMON_CPPFLAGS\"\n      HWLOC_NVML_LDFLAGS=\"$HWLOC_CUDA_COMMON_LDFLAGS\"\n      tmp_save_CPPFLAGS=\"$CPPFLAGS\"\n      CPPFLAGS=\"$CPPFLAGS $HWLOC_NVML_CPPFLAGS\"\n      tmp_save_LDFLAGS=\"$LDFLAGS\"\n      LDFLAGS=\"$LDFLAGS $HWLOC_NVML_LDFLAGS\"\n      AC_CHECK_HEADERS([nvml.h], [\n        AC_CHECK_LIB([nvidia-ml], [nvmlInit], [HWLOC_NVML_LIBS=\"-lnvidia-ml\"], [hwloc_nvml_happy=no])\n      ], [hwloc_nvml_happy=no])\n      CPPFLAGS=\"$tmp_save_CPPFLAGS\"\n      LDFLAGS=\"$tmp_save_LDFLAGS\"\n    fi\n    if test \"x$hwloc_nvml_happy\" = \"xyes\"; then\n      tmp_save_CPPFLAGS=\"$CPPFLAGS\"\n      CPPFLAGS=\"$CPPFLAGS $HWLOC_NVML_CPPFLAGS\"\n      AC_CHECK_DECLS([nvmlDeviceGetMaxPcieLinkGeneration],,[:],[[#include <nvml.h>]])\n      CPPFLAGS=\"$tmp_save_CPPFLAGS\"\n    fi\n    AC_SUBST(HWLOC_NVML_LIBS)\n    AC_SUBST(HWLOC_NVML_LDFLAGS)\n    AC_SUBST(HWLOC_NVML_CPPFLAGS)\n    # If we asked for nvml support but couldn't deliver, fail\n    AS_IF([test \"$enable_nvml\" = \"yes\" -a \"$hwloc_nvml_happy\" = \"no\"],\n\t  [AC_MSG_WARN([Specified --enable-nvml switch, but could not])\n\t   AC_MSG_WARN([find appropriate support])\n\t   AC_MSG_ERROR([Cannot continue])])\n    if test \"x$hwloc_nvml_happy\" = \"xyes\"; then\n      AC_DEFINE([HWLOC_HAVE_NVML], [1], [Define to 1 if you have the `NVML' library.])\n      AC_SUBST([HWLOC_HAVE_NVML], [1])\n      hwloc_components=\"$hwloc_components nvml\"\n      hwloc_nvml_component_maybeplugin=1\n    else\n      AC_SUBST([HWLOC_HAVE_NVML], [0])\n    fi\n    # don't add LIBS/CFLAGS/REQUIRES yet, depends on plugins\n\n    # RSMI support, rocm_smi64 is just library name and not related to 32/64 bits\n    hwloc_rsmi_happy=no\n    if test \"x$enable_io\" != xno && test \"x$enable_rsmi\" != \"xno\"; then\n      hwloc_rsmi_happy=yes\n      AC_CHECK_HEADERS([rocm_smi/rocm_smi.h], [\n        AC_CHECK_LIB([rocm_smi64], [rsmi_init], [HWLOC_RSMI_LIBS=\"-lrocm_smi64\"], [hwloc_rsmi_happy=no])\n        ], [hwloc_rsmi_happy=no])\n    fi\n    AC_SUBST(HWLOC_RSMI_LIBS)\n    # If we asked for rsmi support but couldn't deliver, fail\n    AS_IF([test \"$enable_rsmi\" = \"yes\" -a \"$hwloc_rsmi_happy\" = \"no\"],\n      [AC_MSG_WARN([Specified --enable-rsmi switch, but could not])\n      AC_MSG_WARN([find appropriate support])\n      AC_MSG_ERROR([Cannot continue])])\n    if test \"x$hwloc_rsmi_happy\" = \"xyes\"; then\n      AC_DEFINE([HWLOC_HAVE_RSMI], [1], [Define to 1 if you have the `RSMI' library.])\n      AC_SUBST([HWLOC_HAVE_RSMI], [1])\n      hwloc_components=\"$hwloc_components rsmi\"\n      hwloc_rsmi_component_maybeplugin=1\n    else\n      AC_SUBST([HWLOC_HAVE_RSMI], [0])\n    fi\n    # don't add LIBS/CFLAGS/REQUIRES yet, depends on plugins\n\n    # GL Support\n    hwloc_gl_happy=no\n    if test \"x$enable_io\" != xno && test \"x$enable_gl\" != \"xno\"; then\n\thwloc_gl_happy=yes\n\n        # some X11 support (less then lstopo in hwloc_internal.m4)\n        AC_PATH_XTRA\n\n        CPPFLAGS_save=$CPPFLAGS\n        LIBS_save=$LIBS\n\n        CPPFLAGS=\"$CPPFLAGS $X_CFLAGS\"\n        LIBS=\"$LIBS $X_PRE_LIBS $X_LIBS $X_EXTRA_LIBS\"\n        AC_CHECK_HEADERS([X11/Xlib.h],\n            [AC_CHECK_LIB([X11], [XOpenDisplay],\n                [hwloc_enable_X11=yes])\n            ])\n        CPPFLAGS=$CPPFLAGS_save\n        LIBS=$LIBS_save\n\n        AS_IF([test \"$hwloc_enable_X11\" != \"yes\"],\n              [AC_MSG_WARN([X11 not found; GL disabled])\n               hwloc_gl_happy=no])\n\n        AC_CHECK_HEADERS([NVCtrl/NVCtrl.h], [\n          AC_CHECK_LIB([XNVCtrl], [XNVCTRLQueryTargetAttribute], [:], [hwloc_gl_happy=no], [-lXext])\n        ], [hwloc_gl_happy=no])\n\n        if test \"x$hwloc_gl_happy\" = \"xyes\"; then\n            AC_DEFINE([HWLOC_HAVE_GL], [1], [Define to 1 if you have the GL module components.])\n\t    HWLOC_GL_LIBS=\"-lXNVCtrl -lXext -lX11\"\n\t    AC_SUBST(HWLOC_GL_LIBS)\n\t    # FIXME we actually don't know if xext.pc and x11.pc are installed\n\t    # since we didn't look for Xext and X11 using pkg-config\n\t    HWLOC_GL_REQUIRES=\"xext x11\"\n            hwloc_have_gl=yes\n\t    hwloc_components=\"$hwloc_components gl\"\n\t    hwloc_gl_component_maybeplugin=1\n\telse\n            AS_IF([test \"$enable_gl\" = \"yes\"], [\n                AC_MSG_WARN([Specified --enable-gl switch, but could not])\n                AC_MSG_WARN([find appropriate support])\n                AC_MSG_ERROR([Cannot continue])\n            ])\n        fi\n    fi\n    # don't add LIBS/CFLAGS yet, depends on plugins\n\n    # libxml2 support\n    hwloc_libxml2_happy=\n    if test \"x$enable_libxml2\" != \"xno\"; then\n        HWLOC_PKG_CHECK_MODULES([LIBXML2], [libxml-2.0], [xmlNewDoc], [libxml/parser.h],\n                                [hwloc_libxml2_happy=yes],\n                                [hwloc_libxml2_happy=no])\n    fi\n    if test \"x$hwloc_libxml2_happy\" = \"xyes\"; then\n        HWLOC_LIBXML2_REQUIRES=\"libxml-2.0\"\n        AC_DEFINE([HWLOC_HAVE_LIBXML2], [1], [Define to 1 if you have the `libxml2' library.])\n        AC_SUBST([HWLOC_HAVE_LIBXML2], [1])\n\n        hwloc_components=\"$hwloc_components xml_libxml\"\n        hwloc_xml_libxml_component_maybeplugin=1\n    else\n        AC_SUBST([HWLOC_HAVE_LIBXML2], [0])\n\tAS_IF([test \"$enable_libxml2\" = \"yes\"],\n              [AC_MSG_WARN([--enable-libxml2 requested, but libxml2 was not found])\n               AC_MSG_ERROR([Cannot continue])])\n    fi\n    # don't add LIBS/CFLAGS/REQUIRES yet, depends on plugins\n\n    # Try to compile the x86 cpuid inlines\n    if test \"x$enable_cpuid\" != \"xno\"; then\n\tAC_MSG_CHECKING([for x86 cpuid])\n\told_CPPFLAGS=\"$CPPFLAGS\"\n\tCPPFLAGS=\"$CPPFLAGS -I$HWLOC_top_srcdir/include\"\n\t# We need hwloc_uint64_t but we can't use autogen/config.h before configure ends.\n\t# So pass #include/#define manually here for now.\n\tCPUID_CHECK_HEADERS=\n\tCPUID_CHECK_DEFINE=\n\tif test \"x$hwloc_windows\" = xyes; then\n\t    X86_CPUID_CHECK_HEADERS=\"#include <windows.h>\"\n\t    X86_CPUID_CHECK_DEFINE=\"#define hwloc_uint64_t DWORDLONG\"\n\telse\n\t    X86_CPUID_CHECK_DEFINE=\"#define hwloc_uint64_t uint64_t\"\n\t    if test \"x$ac_cv_header_stdint_h\" = xyes; then\n\t        X86_CPUID_CHECK_HEADERS=\"#include <stdint.h>\"\n\t    fi\n\tfi\n\tAC_LINK_IFELSE([AC_LANG_PROGRAM([[\n\t    #include <stdio.h>\n\t    $X86_CPUID_CHECK_HEADERS\n\t    $X86_CPUID_CHECK_DEFINE\n\t    #define __hwloc_inline\n\t    #include <private/cpuid-x86.h>\n\t]], [[\n\t    if (hwloc_have_x86_cpuid()) {\n\t\tunsigned eax = 0, ebx, ecx = 0, edx;\n\t\thwloc_x86_cpuid(&eax, &ebx, &ecx, &edx);\n\t\tprintf(\"highest x86 cpuid %x\\n\", eax);\n\t\treturn 0;\n\t    }\n\t]])],\n\t[AC_MSG_RESULT([yes])\n\t AC_DEFINE(HWLOC_HAVE_X86_CPUID, 1, [Define to 1 if you have x86 cpuid])\n\t hwloc_have_x86_cpuid=yes],\n\t[AC_MSG_RESULT([no])])\n\tif test \"x$hwloc_have_x86_cpuid\" = xyes; then\n\t    hwloc_components=\"$hwloc_components x86\"\n\tfi\n\tCPPFLAGS=\"$old_CPPFLAGS\"\n    fi\n\n    # Components require pthread_mutex, see if it needs -lpthread\n    hwloc_pthread_mutex_happy=no\n    # Try without explicit -lpthread first\n    AC_CHECK_FUNC([pthread_mutex_lock],\n      [hwloc_pthread_mutex_happy=yes\n       HWLOC_LIBS_PRIVATE=\"$HWLOC_LIBS_PRIVATE -lpthread\"\n      ],\n      [AC_MSG_CHECKING([for pthread_mutex_lock with -lpthread])\n       # Try again with explicit -lpthread, but don't use AC_CHECK_FUNC to avoid the cache\n       tmp_save_LIBS=$LIBS\n       LIBS=\"$LIBS -lpthread\"\n       AC_LINK_IFELSE([AC_LANG_CALL([], [pthread_mutex_lock])],\n         [hwloc_pthread_mutex_happy=yes\n          HWLOC_LIBS=\"$HWLOC_LIBS -lpthread\"\n         ])\n       AC_MSG_RESULT([$hwloc_pthread_mutex_happy])\n       LIBS=\"$tmp_save_LIBS\"\n      ])\n    AS_IF([test \"x$hwloc_pthread_mutex_happy\" = \"xyes\"],\n      [AC_DEFINE([HWLOC_HAVE_PTHREAD_MUTEX], 1, [Define to 1 if pthread mutexes are available])])\n\n    AS_IF([test \"x$hwloc_pthread_mutex_happy\" != xyes -a \"x$hwloc_windows\" != xyes],\n      [AC_MSG_WARN([pthread_mutex_lock not available, required for thread-safe initialization on non-Windows platforms.])\n       AC_MSG_WARN([Please report this to the hwloc-devel mailing list.])\n       AC_MSG_ERROR([Cannot continue])])\n\n    #\n    # Now enable registration of listed components\n    #\n\n    # Plugin support\n    AC_MSG_CHECKING([if plugin support is enabled])\n    # Plugins (even core support) are totally disabled by default.\n    # Pass --enable-plugins=foo (with \"foo\" NOT an existing component) to enable plugins but build none of them.\n    if test \"x$enable_plugins\" = xyes; then\n      hwloc_have_plugins=yes\n      requested_plugins=\"$hwloc_components\"\n    else if test \"x$enable_plugins\" != xno -a \"x$enable_plugins\" != x; then\n      hwloc_have_plugins=yes\n      requested_plugins=`echo $enable_plugins | sed -e 's/,/ /g'`\n    else\n      hwloc_have_plugins=no\n    fi fi\n    AC_MSG_RESULT($hwloc_have_plugins)\n\n    if test \"x$hwloc_have_plugins\" = xyes; then\n      # dlopen and ltdl (at least 2.4.2) doesn't work on AIX\n      # posix linkers don't work well with plugins and windows dll constraints\n      if test \"x$enable_plugin_dlopen\" = x; then\n        if test \"x$hwloc_aix\" = \"xyes\"; then\n          AC_MSG_WARN([dlopen does not work on AIX, disabled by default.])\n          enable_plugin_dlopen=no\n        else if test \"x$hwloc_windows\" = \"xyes\"; then\n          AC_MSG_WARN([dlopen not supported on non-native Windows build, disabled by default.])\n          enable_plugin_dlopen=no\n        fi fi\n      fi\n      if test \"x$enable_plugin_ltdl\" = x; then\n        if test \"x$hwloc_aix\" = \"xyes\"; then\n          AC_MSG_WARN([ltdl does not work on AIX, disabled by default.])\n          enable_plugin_dlopen=no\n        else if test \"x$hwloc_windows\" = \"xyes\"; then\n          AC_MSG_WARN([ltdl not supported on non-native Windows build, disabled by default.])\n          enable_plugin_dlopen=no\n        fi fi\n      fi\n\n      # Look for dlopen\n      if test \"x$enable_plugin_dlopen\" != xno; then\n        HWLOC_CHECK_DLOPEN([hwloc_dlopen_ready], [hwloc_dlopen_libs])\n      fi\n      # Look for ltdl\n      if test \"x$enable_plugin_ltdl\" != xno; then\n        HWLOC_CHECK_LTDL([hwloc_ltdl_ready], [hwloc_ltdl_libs])\n      fi\n\n      # Now use dlopen by default, or ltdl, or just fail to enable plugins\n      AC_MSG_CHECKING([which library to use for loading plugins])\n      if test \"x$hwloc_dlopen_ready\" = xyes; then\n        AC_MSG_RESULT([dlopen])\n\thwloc_plugins_load=dlopen\n        # Now enable dlopen libs\n        HWLOC_DL_LIBS=\"$hwloc_dlopen_libs\"\n        AC_SUBST(HWLOC_DL_LIBS)\n      else if test x$hwloc_ltdl_ready = xyes; then\n        AC_MSG_RESULT([ltdl])\n        hwloc_plugins_load=ltdl\n        # Now enable ltdl libs\n        AC_DEFINE([HWLOC_HAVE_LTDL], 1, [Define to 1 if the hwloc library should use ltdl for loading plugins])\n        HWLOC_LTDL_LIBS=\"$hwloc_ltdl_libs\"\n        AC_SUBST(HWLOC_LTDL_LIBS)\n        # Add ltdl static-build dependencies to hwloc.pc\n        HWLOC_CHECK_LTDL_DEPS\n      else\n        AC_MSG_RESULT([none])\n        AC_MSG_WARN([Plugin support requested, but could not enable dlopen or ltdl])\n        AC_MSG_ERROR([Cannot continue])\n      fi fi\n\n      AC_DEFINE([HWLOC_HAVE_PLUGINS], 1, [Define to 1 if the hwloc library should support dynamically-loaded plugins])\n    fi\n\n    AC_ARG_WITH([hwloc-plugins-path],\n\t\tAC_HELP_STRING([--with-hwloc-plugins-path=dir:...],\n                               [Colon-separated list of plugin directories. Default: \"$prefix/lib/hwloc\". Plugins will be installed in the first directory. They will be loaded from all of them, in order.]),\n\t\t[HWLOC_PLUGINS_PATH=\"$with_hwloc_plugins_path\"],\n\t\t[HWLOC_PLUGINS_PATH=\"\\$(libdir)/hwloc\"])\n    AC_SUBST(HWLOC_PLUGINS_PATH)\n    HWLOC_PLUGINS_DIR=`echo \"$HWLOC_PLUGINS_PATH\" | cut -d: -f1`\n    AC_SUBST(HWLOC_PLUGINS_DIR)\n\n    # Static components output file\n    hwloc_static_components_dir=${HWLOC_top_builddir}/hwloc\n    mkdir -p \"${hwloc_static_components_dir}\"\n    hwloc_static_components_file=${hwloc_static_components_dir}/static-components.h\n    rm -f \"${hwloc_static_components_file}\"\n\n    HWLOC_PREPARE_FILTER_COMPONENTS([$requested_plugins])\n    # Now we have some hwloc_<name>_component_wantplugin=1\n\n    # See which core components want plugin and support it\n    HWLOC_FILTER_COMPONENTS\n    # Now we have some hwloc_<name>_component=plugin/static\n    # and hwloc_static/plugin_components=list (space separated)\n    AC_MSG_CHECKING([components to build statically])\n    AC_MSG_RESULT($hwloc_static_components)\n    HWLOC_LIST_STATIC_COMPONENTS([\"$hwloc_static_components_file\"], [$hwloc_static_components])\n    AC_MSG_CHECKING([components to build as plugins])\n    AC_MSG_RESULT([$hwloc_plugin_components])\n\n    AS_IF([test \"$hwloc_pci_component\" = \"static\"],\n          [HWLOC_LIBS=\"$HWLOC_LIBS $HWLOC_PCIACCESS_LIBS\"\n           HWLOC_CFLAGS=\"$HWLOC_CFLAGS $HWLOC_PCIACCESS_CFLAGS\"\n           HWLOC_REQUIRES=\"$HWLOC_PCIACCESS_REQUIRES $HWLOC_REQUIRES\"])\n    AS_IF([test \"$hwloc_opencl_component\" = \"static\"],\n          [HWLOC_LIBS=\"$HWLOC_LIBS $HWLOC_OPENCL_LIBS\"\n           HWLOC_LDFLAGS=\"$HWLOC_LDFLAGS $HWLOC_OPENCL_LDFLAGS\"\n           HWLOC_CFLAGS=\"$HWLOC_CFLAGS $HWLOC_OPENCL_CPPFLAGS\"\n           HWLOC_REQUIRES=\"$HWLOC_OPENCL_REQUIRES $HWLOC_REQUIRES\"])\n    AS_IF([test \"$hwloc_cuda_component\" = \"static\"],\n          [HWLOC_LIBS=\"$HWLOC_LIBS $HWLOC_CUDA_LIBS\"\n           HWLOC_LDFLAGS=\"$HWLOC_LDFLAGS $HWLOC_CUDA_LDFLAGS\"\n           HWLOC_CFLAGS=\"$HWLOC_CFLAGS $HWLOC_CUDA_CPPFLAGS\"\n           HWLOC_REQUIRES=\"$HWLOC_CUDA_REQUIRES $HWLOC_REQUIRES\"])\n    AS_IF([test \"$hwloc_nvml_component\" = \"static\"],\n          [HWLOC_LIBS=\"$HWLOC_LIBS $HWLOC_NVML_LIBS\"\n           HWLOC_LDFLAGS=\"$HWLOC_LDFLAGS $HWLOC_NVML_LDFLAGS\"\n           HWLOC_CFLAGS=\"$HWLOC_CFLAGS $HWLOC_NVML_CFLAGS\"\n           HWLOC_REQUIRES=\"$HWLOC_NVML_REQUIRES $HWLOC_REQUIRES\"])\n    AS_IF([test \"$hwloc_rsmi_component\" = \"static\"],\n          [HWLOC_LIBS=\"$HWLOC_LIBS $HWLOC_RSMI_LIBS\"\n           HWLOC_CFLAGS=\"$HWLOC_CFLAGS $HWLOC_RSMI_CFLAGS\"\n           HWLOC_REQUIRES=\"$HWLOC_RSMI_REQUIRES $HWLOC_REQUIRES\"])\n    AS_IF([test \"$hwloc_gl_component\" = \"static\"],\n          [HWLOC_LIBS=\"$HWLOC_LIBS $HWLOC_GL_LIBS\"\n           HWLOC_CFLAGS=\"$HWLOC_CFLAGS $HWLOC_GL_CFLAGS\"\n           HWLOC_REQUIRES=\"$HWLOC_GL_REQUIRES $HWLOC_REQUIRES\"])\n    AS_IF([test \"$hwloc_xml_libxml_component\" = \"static\"],\n          [HWLOC_LIBS=\"$HWLOC_LIBS $HWLOC_LIBXML2_LIBS\"\n           HWLOC_CFLAGS=\"$HWLOC_CFLAGS $HWLOC_LIBXML2_CFLAGS\"\n           HWLOC_REQUIRES=\"$HWLOC_LIBXML2_REQUIRES $HWLOC_REQUIRES\"])\n\n    #\n    # Setup HWLOC's C, CPP, and LD flags, and LIBS\n    #\n    AC_SUBST(HWLOC_REQUIRES)\n    AC_SUBST(HWLOC_CFLAGS)\n    HWLOC_CPPFLAGS='-I\"$(HWLOC_top_builddir)\"/include -I\"$(HWLOC_top_srcdir)\"/include'\n    AC_SUBST(HWLOC_CPPFLAGS)\n    AC_SUBST(HWLOC_LDFLAGS)\n    AC_SUBST(HWLOC_LIBS)\n    AC_SUBST(HWLOC_LIBS_PRIVATE)\n\n    # Set these values explicitly for embedded builds.  Exporting\n    # these values through *_EMBEDDED_* values gives us the freedom to\n    # do something different someday if we ever need to.  There's no\n    # need to fill these values in unless we're in embedded mode.\n    # Indeed, if we're building in embedded mode, we want HWLOC_LIBS\n    # to be empty so that nothing is linked into libhwloc_embedded.la\n    # itself -- only the upper-layer will link in anything required.\n\n    AS_IF([test \"$hwloc_mode\" = \"embedded\"],\n          [HWLOC_EMBEDDED_CFLAGS=$HWLOC_CFLAGS\n           HWLOC_EMBEDDED_CPPFLAGS=$HWLOC_CPPFLAGS\n           HWLOC_EMBEDDED_LDFLAGS=$HWLOC_LDFLAGS\n           HWLOC_EMBEDDED_LDADD='$(HWLOC_top_builddir)/hwloc/libhwloc_embedded.la'\n           HWLOC_EMBEDDED_LIBS=$HWLOC_LIBS\n           HWLOC_LIBS=])\n    AC_SUBST(HWLOC_EMBEDDED_CFLAGS)\n    AC_SUBST(HWLOC_EMBEDDED_CPPFLAGS)\n    AC_SUBST(HWLOC_EMBEDDED_LDFLAGS)\n    AC_SUBST(HWLOC_EMBEDDED_LDADD)\n    AC_SUBST(HWLOC_EMBEDDED_LIBS)\n\n    # Always generate these files\n    AC_CONFIG_FILES(\n        hwloc_config_prefix[Makefile]\n        hwloc_config_prefix[include/Makefile]\n        hwloc_config_prefix[hwloc/Makefile]\n    )\n\n    # Cleanup\n    AC_LANG_POP\n\n    # Success\n    $2\n])dnl\n\n#-----------------------------------------------------------------------\n\n# Specify the symbol prefix\nAC_DEFUN([HWLOC_SET_SYMBOL_PREFIX],[\n    hwloc_symbol_prefix_value=$1\n])dnl\n\n#-----------------------------------------------------------------------\n\n# This must be a standalone routine so that it can be called both by\n# HWLOC_INIT and an external caller (if HWLOC_INIT is not invoked).\nAC_DEFUN([HWLOC_DO_AM_CONDITIONALS],[\n    AS_IF([test \"$hwloc_did_am_conditionals\" != \"yes\"],[\n        AM_CONDITIONAL([HWLOC_BUILD_STANDALONE], [test \"$hwloc_mode\" = \"standalone\"])\n\n        AM_CONDITIONAL([HWLOC_HAVE_GCC], [test \"x$GCC\" = \"xyes\"])\n        AM_CONDITIONAL([HWLOC_HAVE_MS_LIB], [test \"x$HWLOC_MS_LIB\" != \"x\"])\n        AM_CONDITIONAL([HWLOC_HAVE_OPENAT], [test \"x$hwloc_have_openat\" = \"xyes\"])\n        AM_CONDITIONAL([HWLOC_HAVE_SCHED_SETAFFINITY],\n                       [test \"x$hwloc_have_sched_setaffinity\" = \"xyes\"])\n        AM_CONDITIONAL([HWLOC_HAVE_PTHREAD],\n                       [test \"x$hwloc_have_pthread\" = \"xyes\"])\n        AM_CONDITIONAL([HWLOC_HAVE_LINUX_LIBNUMA],\n                       [test \"x$hwloc_have_linux_libnuma\" = \"xyes\"])\n        AM_CONDITIONAL([HWLOC_HAVE_LIBIBVERBS],\n                       [test \"x$hwloc_have_libibverbs\" = \"xyes\"])\n\tAM_CONDITIONAL([HWLOC_HAVE_CUDA],\n\t\t       [test \"x$hwloc_have_cuda\" = \"xyes\"])\n\tAM_CONDITIONAL([HWLOC_HAVE_GL],\n\t\t       [test \"x$hwloc_have_gl\" = \"xyes\"])\n\tAM_CONDITIONAL([HWLOC_HAVE_CUDART],\n\t\t       [test \"x$hwloc_have_cudart\" = \"xyes\"])\n        AM_CONDITIONAL([HWLOC_HAVE_LIBXML2], [test \"$hwloc_libxml2_happy\" = \"yes\"])\n        AM_CONDITIONAL([HWLOC_HAVE_CAIRO], [test \"$hwloc_cairo_happy\" = \"yes\"])\n        AM_CONDITIONAL([HWLOC_HAVE_PCIACCESS], [test \"$hwloc_pciaccess_happy\" = \"yes\"])\n        AM_CONDITIONAL([HWLOC_HAVE_OPENCL], [test \"$hwloc_opencl_happy\" = \"yes\"])\n        AM_CONDITIONAL([HWLOC_HAVE_NVML], [test \"$hwloc_nvml_happy\" = \"yes\"])\n        AM_CONDITIONAL([HWLOC_HAVE_RSMI], [test \"$hwloc_rsmi_happy\" = \"yes\"])\n        AM_CONDITIONAL([HWLOC_HAVE_BUNZIPP], [test \"x$BUNZIPP\" != \"xfalse\"])\n        AM_CONDITIONAL([HWLOC_HAVE_USER32], [test \"x$hwloc_have_user32\" = \"xyes\"])\n\n        AM_CONDITIONAL([HWLOC_BUILD_DOXYGEN],\n                       [test \"x$hwloc_generate_doxs\" = \"xyes\"])\n        AM_CONDITIONAL([HWLOC_BUILD_README],\n                       [test \"x$hwloc_generate_readme\" = \"xyes\" -a \\( \"x$hwloc_install_doxs\" = \"xyes\" -o \"x$hwloc_generate_doxs\" = \"xyes\" \\) ])\n        AM_CONDITIONAL([HWLOC_INSTALL_DOXYGEN],\n                       [test \"x$hwloc_install_doxs\" = \"xyes\"])\n\n        AM_CONDITIONAL([HWLOC_HAVE_LINUX], [test \"x$hwloc_linux\" = \"xyes\"])\n        AM_CONDITIONAL([HWLOC_HAVE_BGQ], [test \"x$hwloc_bgq\" = \"xyes\"])\n        AM_CONDITIONAL([HWLOC_HAVE_IRIX], [test \"x$hwloc_irix\" = \"xyes\"])\n        AM_CONDITIONAL([HWLOC_HAVE_DARWIN], [test \"x$hwloc_darwin\" = \"xyes\"])\n        AM_CONDITIONAL([HWLOC_HAVE_FREEBSD], [test \"x$hwloc_freebsd\" = \"xyes\"])\n        AM_CONDITIONAL([HWLOC_HAVE_NETBSD], [test \"x$hwloc_netbsd\" = \"xyes\"])\n        AM_CONDITIONAL([HWLOC_HAVE_SOLARIS], [test \"x$hwloc_solaris\" = \"xyes\"])\n        AM_CONDITIONAL([HWLOC_HAVE_AIX], [test \"x$hwloc_aix\" = \"xyes\"])\n        AM_CONDITIONAL([HWLOC_HAVE_HPUX], [test \"x$hwloc_hpux\" = \"xyes\"])\n        AM_CONDITIONAL([HWLOC_HAVE_WINDOWS], [test \"x$hwloc_windows\" = \"xyes\"])\n        AM_CONDITIONAL([HWLOC_HAVE_MINGW32], [test \"x$target_os\" = \"xmingw32\"])\n\n        AM_CONDITIONAL([HWLOC_HAVE_X86], [test \"x$hwloc_x86_32\" = \"xyes\" -o \"x$hwloc_x86_64\" = \"xyes\"])\n        AM_CONDITIONAL([HWLOC_HAVE_X86_32], [test \"x$hwloc_x86_32\" = \"xyes\"])\n        AM_CONDITIONAL([HWLOC_HAVE_X86_64], [test \"x$hwloc_x86_64\" = \"xyes\"])\n        AM_CONDITIONAL([HWLOC_HAVE_X86_CPUID], [test \"x$hwloc_have_x86_cpuid\" = \"xyes\"])\n\n        AM_CONDITIONAL([HWLOC_HAVE_32BITS_PCI_DOMAIN], [test \"x$enable_32bits_pci_domain\" = \"xyes\"])\n\n        AM_CONDITIONAL([HWLOC_HAVE_PLUGINS], [test \"x$hwloc_have_plugins\" = \"xyes\"])\n        AM_CONDITIONAL([HWLOC_PCI_BUILD_STATIC], [test \"x$hwloc_pci_component\" = \"xstatic\"])\n        AM_CONDITIONAL([HWLOC_OPENCL_BUILD_STATIC], [test \"x$hwloc_opencl_component\" = \"xstatic\"])\n        AM_CONDITIONAL([HWLOC_CUDA_BUILD_STATIC], [test \"x$hwloc_cuda_component\" = \"xstatic\"])\n        AM_CONDITIONAL([HWLOC_NVML_BUILD_STATIC], [test \"x$hwloc_nvml_component\" = \"xstatic\"])\n        AM_CONDITIONAL([HWLOC_RSMI_BUILD_STATIC], [test \"x$hwloc_rsmi_component\" = \"xstatic\"])\n        AM_CONDITIONAL([HWLOC_GL_BUILD_STATIC], [test \"x$hwloc_gl_component\" = \"xstatic\"])\n        AM_CONDITIONAL([HWLOC_XML_LIBXML_BUILD_STATIC], [test \"x$hwloc_xml_libxml_component\" = \"xstatic\"])\n\n        AM_CONDITIONAL([HWLOC_HAVE_CXX], [test \"x$hwloc_have_cxx\" = \"xyes\"])\n    ])\n    hwloc_did_am_conditionals=yes\n\n    # For backwards compatibility (i.e., packages that only call\n    # HWLOC_DO_AM_CONDITIONS, not NETLOC DO_AM_CONDITIONALS), we also have to\n    # do the netloc AM conditionals here\n    NETLOC_DO_AM_CONDITIONALS\n])dnl\n\n#-----------------------------------------------------------------------\n\ndnl HWLOC_CHECK_DECL\ndnl\ndnl Check that the declaration of the given function has a complete prototype\ndnl with argument list by trying to call it with an insane dnl number of\ndnl arguments (10). Success means the compiler couldn't really check.\nAC_DEFUN([_HWLOC_CHECK_DECL], [\n  AC_CHECK_DECL([$1], [\n    AC_MSG_CHECKING([whether function $1 has a complete prototype])\n    AC_REQUIRE([AC_PROG_CC])\n    AC_COMPILE_IFELSE([AC_LANG_PROGRAM(\n         [AC_INCLUDES_DEFAULT([$4])],\n         [$1(1,2,3,4,5,6,7,8,9,10);]\n      )],\n      [AC_MSG_RESULT([no])\n       $3],\n      [AC_MSG_RESULT([yes])\n       $2]\n    )], [$3], $4\n  )\n])\n\n#-----------------------------------------------------------------------\n\ndnl HWLOC_CHECK_DECLS\ndnl\ndnl Same as HWLOCK_CHECK_DECL, but defines HAVE_DECL_foo to 1 or 0 depending on\ndnl the result.\nAC_DEFUN([_HWLOC_CHECK_DECLS], [\n  HWLOC_CHECK_DECL([$1], [ac_have_decl=1], [ac_have_decl=0], [$4])\n  AC_DEFINE_UNQUOTED(AS_TR_CPP([HAVE_DECL_$1]), [$ac_have_decl],\n    [Define to 1 if you have the declaration of `$1', and to 0 if you don't])\n])\n\n#-----------------------------------------------------------------------\n\ndnl HWLOC_CHECK_DLOPEN\ndnl\ndnl set $1 to yes or not\ndnl set $2 to -ldl or so\nAC_DEFUN([HWLOC_CHECK_DLOPEN], [\n  [$1]=no\n  AC_MSG_CHECKING([for dlopen])\n  AC_LINK_IFELSE([\n    AC_LANG_PROGRAM([[\n      #include <dlfcn.h>\n      #include <stdlib.h>\n      void *handle;\n    ]], [[\n      handle = dlopen(NULL, RTLD_NOW|RTLD_LOCAL);\n    ]])],\n    [AC_MSG_RESULT([yes])\n     [$1]=yes],\n    [AC_MSG_RESULT([no])\n     AC_CHECK_HEADER([dlfcn.h],\n       [AC_CHECK_LIB([dl], [dlopen],\n                     [[$1]=yes\n\t             [$2]=-ldl])\n        ])\n    ])\n])\n\n#-----------------------------------------------------------------------\n\ndnl HWLOC_CHECK_LTDL\ndnl\ndnl set $1 to yes or not\ndnl set $2 to -lltdl or so\nAC_DEFUN([HWLOC_CHECK_LTDL], [\n  [$1]=no\n  AC_CHECK_HEADER([ltdl.h],\n    [AC_CHECK_LIB([ltdl], [lt_dlopenext],\n                  [[$1]=yes\n\t\t   [$2]=-lltdl])\n     ])\n])\n\n#-----------------------------------------------------------------------\n\ndnl HWLOC_CHECK_LTDL_DEPS\ndnl\ndnl Add ltdl dependencies to HWLOC_LIBS_PRIVATE\nAC_DEFUN([HWLOC_CHECK_LTDL_DEPS], [\n  # save variables that we'll modify below\n  save_lt_cv_dlopen=\"$lt_cv_dlopen\"\n  save_lt_cv_dlopen_libs=\"$lt_cv_dlopen_libs\"\n  save_lt_cv_dlopen_self=\"$lt_cv_dlopen_self\"\n  ###########################################################\n  # code stolen from LT_SYS_DLOPEN_SELF in libtool.m4\n  case $host_os in\n  beos*)\n    lt_cv_dlopen=\"load_add_on\"\n    lt_cv_dlopen_libs=\n    lt_cv_dlopen_self=yes\n    ;;\n\n  mingw* | pw32* | cegcc*)\n    lt_cv_dlopen=\"LoadLibrary\"\n    lt_cv_dlopen_libs=\n    ;;\n\n  cygwin*)\n    lt_cv_dlopen=\"dlopen\"\n    lt_cv_dlopen_libs=\n    ;;\n\n  darwin*)\n  # if libdl is installed we need to link against it\n    AC_CHECK_LIB([dl], [dlopen],\n                [lt_cv_dlopen=\"dlopen\" lt_cv_dlopen_libs=\"-ldl\"],[\n    lt_cv_dlopen=\"dyld\"\n    lt_cv_dlopen_libs=\n    lt_cv_dlopen_self=yes\n    ])\n    ;;\n\n  *)\n    AC_CHECK_FUNC([shl_load],\n          [lt_cv_dlopen=\"shl_load\"],\n      [AC_CHECK_LIB([dld], [shl_load],\n            [lt_cv_dlopen=\"shl_load\" lt_cv_dlopen_libs=\"-ldld\"],\n        [AC_CHECK_FUNC([dlopen],\n              [lt_cv_dlopen=\"dlopen\"],\n          [AC_CHECK_LIB([dl], [dlopen],\n                [lt_cv_dlopen=\"dlopen\" lt_cv_dlopen_libs=\"-ldl\"],\n            [AC_CHECK_LIB([svld], [dlopen],\n                  [lt_cv_dlopen=\"dlopen\" lt_cv_dlopen_libs=\"-lsvld\"],\n              [AC_CHECK_LIB([dld], [dld_link],\n                    [lt_cv_dlopen=\"dld_link\" lt_cv_dlopen_libs=\"-ldld\"])\n              ])\n            ])\n          ])\n        ])\n      ])\n    ;;\n  esac\n  # end of code stolen from LT_SYS_DLOPEN_SELF in libtool.m4\n  ###########################################################\n\n  HWLOC_LIBS_PRIVATE=\"$HWLOC_LIBS_PRIVATE $lt_cv_dlopen_libs\"\n\n  # restore modified variable in case the actual libtool code uses them\n  lt_cv_dlopen=\"$save_lt_cv_dlopen\"\n  lt_cv_dlopen_libs=\"$save_lt_cv_dlopen_libs\"\n  lt_cv_dlopen_self=\"$save_lt_cv_dlopen_self\"\n])\n",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/config/hwloc_internal.m4": "dnl -*- Autoconf -*-\ndnl\ndnl Copyright \u00a9 2010-2021 Inria.  All rights reserved.\ndnl Copyright \u00a9 2009, 2011 Universit\u00e9 Bordeaux\ndnl Copyright \u00a9 2004-2005 The Trustees of Indiana University and Indiana\ndnl                         University Research and Technology\ndnl                         Corporation.  All rights reserved.\ndnl Copyright \u00a9 2004-2005 The Regents of the University of California.\ndnl                         All rights reserved.\ndnl Copyright \u00a9 2004-2008 High Performance Computing Center Stuttgart,\ndnl                         University of Stuttgart.  All rights reserved.\ndnl Copyright \u00a9 2006-2014 Cisco Systems, Inc.  All rights reserved.\ndnl\ndnl See COPYING in top-level directory.\n\n#-----------------------------------------------------------------------\n\n# Probably only ever invoked by hwloc's configure.ac\nAC_DEFUN([HWLOC_BUILD_STANDALONE],[\n    hwloc_mode=standalone\n])dnl\n\n#-----------------------------------------------------------------------\n\n# Probably only ever invoked by hwloc's configure.ac\nAC_DEFUN([HWLOC_DEFINE_ARGS],[\n    # Embedded mode, or standalone?\n    AC_ARG_ENABLE([embedded-mode],\n                    AC_HELP_STRING([--enable-embedded-mode],\n                                   [Using --enable-embedded-mode puts the HWLOC into \"embedded\" mode.  The default is --disable-embedded-mode, meaning that the HWLOC is in \"standalone\" mode.]))\n\n    # Change the symbol prefix?\n    AC_ARG_WITH([hwloc-symbol-prefix],\n                AC_HELP_STRING([--with-hwloc-symbol-prefix=STRING],\n                               [STRING can be any valid C symbol name.  It will be prefixed to all public HWLOC symbols.  Default: \"hwloc_\"]))\n\n    # Debug mode?\n    AC_ARG_ENABLE([debug],\n                  AC_HELP_STRING([--enable-debug],\n                                 [Using --enable-debug enables various hwloc maintainer-level debugging controls.  This option is not recomended for end users.]))\n\n    # Doxygen?\n    AC_ARG_ENABLE([doxygen],\n        [AC_HELP_STRING([--enable-doxygen],\n                        [enable support for building Doxygen documentation (note that this option is ONLY relevant in developer builds; Doxygen documentation is pre-built for tarball builds and this option is therefore ignored)])])\n\n    # Picky?\n    AC_ARG_ENABLE(picky,\n                  AC_HELP_STRING([--disable-picky],\n                                 [When in developer checkouts of hwloc and compiling with gcc, the default is to enable maximum compiler pickyness.  Using --disable-picky or --enable-picky overrides any default setting]))\n\n    # Cairo?\n    AC_ARG_ENABLE([cairo],\n                  AS_HELP_STRING([--disable-cairo],\n                                 [Disable the Cairo back-end of hwloc's lstopo command]))\n\n    # CPUID\n    AC_ARG_ENABLE([cpuid],\n\t\t  AS_HELP_STRING([--disable-cpuid],\n\t\t\t\t [Disable the cpuid-based architecture specific support (x86 component)]))\n\n    # XML using libxml2?\n    AC_ARG_ENABLE([libxml2],\n                  AS_HELP_STRING([--disable-libxml2],\n\t\t                 [Do not use libxml2 for XML support, use a custom minimalistic support]))\n\n    # I/O?\n    AC_ARG_ENABLE([io],\n                  AS_HELP_STRING([--disable-io],\n                                 [Disable I/O discovery build entirely (PCI, LinuxIO, CUDA, OpenCL, NVML, RSMI, GL) instead of only disabling it at runtime by default]))\n\n    # PCI?\n    AC_ARG_ENABLE([pci],\n                  AS_HELP_STRING([--disable-pci],\n                                 [Disable the PCI device discovery build (instead of only disabling PCI at runtime by default)]))\n    # 32bits_pci_domain?\n    AC_ARG_ENABLE([32bits-pci-domain],\n                  AS_HELP_STRING([--enable-32bits-pci-domain],\n                                 [Enable 32 bits PCI domains (domains > 16bits are ignored by default). WARNING: This breaks the library ABI, don't enable unless really needed.]))\n\n    # OpenCL?\n    AC_ARG_ENABLE([opencl],\n                  AS_HELP_STRING([--disable-opencl],\n                                 [Disable the OpenCL device discovery build (instead of only disabling OpenCL at runtime by default)]))\n\n    # CUDA?\n    AC_ARG_ENABLE([cuda],\n                  AS_HELP_STRING([--disable-cuda],\n                                 [Disable the CUDA device discovery build using libcudart (instead of only disabling CUDA at runtime by default)]))\n\n    # NVML?\n    AC_ARG_ENABLE([nvml],\n                  AS_HELP_STRING([--disable-nvml],\n                                 [Disable the NVML device discovery build (instead of only disabling NVML at runtime by default)]))\n\n    # CUDA install path (and NVML and OpenCL)\n    AC_ARG_WITH([cuda],\n                AS_HELP_STRING([--with-cuda=<dir>],\n                               [Specify the CUDA installation directory, used for NVIDIA NVML and OpenCL too]))\n\n    # RSMI?\n    AC_ARG_ENABLE([rsmi],\n                  AS_HELP_STRING([--disable-rsmi],\n                                 [Disable the ROCm SMI device discovery]))\n\n    # GL/Display\n    AC_ARG_ENABLE([gl],\n\t\t  AS_HELP_STRING([--disable-gl],\n\t\t\t\t [Disable the GL display device discovery (instead of only disabling GL at runtime by default)]))\n\n    # LibUdev\n    AC_ARG_ENABLE([libudev],\n                  AS_HELP_STRING([--disable-libudev],\n                                 [Disable the Linux libudev]))\n\n    # Plugins\n    AC_ARG_ENABLE([plugins],\n                  AS_HELP_STRING([--enable-plugins=name,...],\n                                 [Build the given components as dynamically-loaded plugins]))\n\n    # Look for dlopen\n    # Not --disable-dlopen because $enable_dlopen is already used/set\n    AC_ARG_ENABLE([plugin-dlopen],\n                  AC_HELP_STRING([--disable-plugin-dlopen],\n                                 [Do not use dlopen for loading plugins.]))\n    # Look for ltdl\n    # Not --disable-ltdl for consistency wrt dlopen above\n    AC_ARG_ENABLE([plugin-ltdl],\n                  AC_HELP_STRING([--disable-plugin-ltdl],\n                                 [Do not use ltdl for loading plugins.]))\n\n])dnl\n\n#-----------------------------------------------------------------------\n\ndnl We only build documentation if this is a developer checkout.\ndnl Distribution tarballs just install pre-built docuemntation that was\ndnl included in the tarball.\n\n# Probably only ever invoked by hwloc's configure.ac\nAC_DEFUN([HWLOC_SETUP_DOCS],[\n    cat <<EOF\n\n###\n### Configuring hwloc documentation\n###\nEOF\n\n    AC_MSG_CHECKING([if this is a developer build])\n    AS_IF([test ! -e \"$srcdir/.git\"],\n          [AC_MSG_RESULT([no (doxygen generation is optional)])\n\t   test \"x$enable_doxygen\" = x && enable_doxygen=no],\n          [AC_MSG_RESULT([yes])\n\t   test \"x$enable_doxygen\" = x && enable_doxygen=yes])\n\n    # Generating the doxygen output requires a few tools.  If we\n    # don't have all of them, refuse the build the docs.\n    AC_ARG_VAR([DOXYGEN], [Location of the doxygen program (required for building the hwloc doxygen documentation)])\n    AC_PATH_TOOL([DOXYGEN], [doxygen])\n    HWLOC_DOXYGEN_VERSION=`doxygen --version 2> /dev/null`\n\n    AC_ARG_VAR([PDFLATEX], [Location of the pdflatex program (required for building the hwloc doxygen documentation)])\n    AC_PATH_TOOL([PDFLATEX], [pdflatex])\n\n    AC_ARG_VAR([MAKEINDEX], [Location of the makeindex program (required for building the hwloc doxygen documentation)])\n    AC_PATH_TOOL([MAKEINDEX], [makeindex])\n\n    AC_ARG_VAR([FIG2DEV], [Location of the fig2dev program (required for building the hwloc doxygen documentation)])\n    AC_PATH_TOOL([FIG2DEV], [fig2dev])\n\n    AC_ARG_VAR([GS], [Location of the gs program (required for building the hwloc doxygen documentation)])\n    AC_PATH_TOOL([GS], [gs])\n\n    AC_ARG_VAR([EPSTOPDF], [Location of the epstopdf program (required for building the hwloc doxygen documentation)])\n    AC_PATH_TOOL([EPSTOPDF], [epstopdf])\n\n    AC_MSG_CHECKING([if can build doxygen docs])\n    AS_IF([test \"x$DOXYGEN\" != \"x\" -a \"x$PDFLATEX\" != \"x\" -a \"x$MAKEINDEX\" != \"x\" -a \"x$FIG2DEV\" != \"x\" -a \"x$GS\" != \"x\" -a \"x$EPSTOPDF\" != \"x\"],\n                 [hwloc_generate_doxs=yes], [hwloc_generate_doxs=no])\n    AC_MSG_RESULT([$hwloc_generate_doxs])\n    AS_IF([test \"x$hwloc_generate_doxs\" = xyes -a \"x$HWLOC_DOXYGEN_VERSION\" = x1.6.2],\n                 [hwloc_generate_doxs=\"no\"; AC_MSG_WARN([doxygen 1.6.2 has broken short name support, disabling])])\n    AS_IF([test \"x$hwloc_generate_doxs\" = xyes -a \"x$HWLOC_DOXYGEN_VERSION\" = x1.8.16 -a \"$HWLOC_top_builddir\" = \"$HWLOC_top_srcdir\"],\n                 [hwloc_generate_doxs=\"no\"; AC_MSG_WARN([doxygen 1.8.16 fails when building inside the source-tree, disabling])])\n\n    AC_REQUIRE([AC_PROG_SED])\n\n    # Making the top-level README requires w3m or lynx.\n    AC_ARG_VAR([W3M], [Location of the w3m program (required to building the top-level hwloc README file)])\n    AC_PATH_TOOL([W3M], [w3m])\n    AC_ARG_VAR([LYNX], [Location of the lynx program (required to building the top-level hwloc README file)])\n    AC_PATH_TOOL([LYNX], [lynx])\n\n    AC_MSG_CHECKING([if can build top-level README])\n    AS_IF([test \"x$W3M\" != \"x\"],\n          [hwloc_generate_readme=yes\n           HWLOC_W3_GENERATOR=$W3M],\n          [AS_IF([test \"x$LYNX\" != \"x\"],\n                 [hwloc_generate_readme=yes\n                  HWLOC_W3_GENERATOR=\"$LYNX -dump -nolist\"],\n                 [hwloc_generate_readme=no])])\n    AC_SUBST(HWLOC_W3_GENERATOR)\n    AC_MSG_RESULT([$hwloc_generate_readme])\n\n    # If any one of the above tools is missing, we will refuse to make dist.\n    AC_MSG_CHECKING([if will build doxygen docs])\n    AS_IF([test \"x$hwloc_generate_doxs\" = \"xyes\" -a \"x$enable_doxygen\" != \"xno\"],\n          [], [hwloc_generate_doxs=no])\n    AC_MSG_RESULT([$hwloc_generate_doxs])\n\n    # See if we want to install the doxygen docs\n    AC_MSG_CHECKING([if will install doxygen docs])\n    AS_IF([test \"x$hwloc_generate_doxs\" = \"xyes\" -o \\\n\t    -f \"$srcdir/doc/doxygen-doc/man/man3/hwloc_distrib.3\" -a \\\n    \t    -f \"$srcdir/doc/doxygen-doc/hwloc-a4.pdf\" -a \\\n    \t    -f \"$srcdir/doc/doxygen-doc/hwloc-letter.pdf\"],\n          [hwloc_install_doxs=yes],\n          [hwloc_install_doxs=no])\n    AC_MSG_RESULT([$hwloc_install_doxs])\n\n    # Generate some files for the docs\n    AC_CONFIG_FILES(\n        hwloc_config_prefix[doc/Makefile]\n        hwloc_config_prefix[doc/examples/Makefile]\n        hwloc_config_prefix[doc/doxygen-config.cfg])\n])\n\n#-----------------------------------------------------------------------\n\n# Probably only ever invoked by hwloc's configure.ac\nAC_DEFUN([HWLOC_SETUP_UTILS],[\n    cat <<EOF\n\n###\n### Configuring hwloc command line utilities\n###\nEOF\n\n    AC_REQUIRE([AC_PROG_SED])\n\n    # runstatedir only supported in autoconf >= 2.70 and in some backports\n    if test \"x${runstatedir}\" != \"x\"; then\n      HWLOC_runstatedir=${runstatedir}\n    else\n      HWLOC_runstatedir='${localstatedir}/run'\n    fi\n    AC_SUBST([HWLOC_runstatedir])\n\n    # X11 support\n    AC_PATH_XTRA\n\n    CPPFLAGS_save=$CPPFLAGS\n    LIBS_save=$LIBS\n\n    CPPFLAGS=\"$CPPFLAGS $X_CFLAGS\"\n    LIBS=\"$LIBS $X_PRE_LIBS $X_LIBS $X_EXTRA_LIBS\"\n    AC_CHECK_HEADERS([X11/Xlib.h],\n        [AC_CHECK_LIB([X11], [XOpenDisplay],\n            [ AC_CHECK_HEADERS([X11/Xutil.h],\n                [AC_CHECK_HEADERS([X11/keysym.h],\n                    [AC_DEFINE([HWLOC_HAVE_X11_KEYSYM], [1], [Define to 1 if X11 headers including Xutil.h and keysym.h are available.])\n                     hwloc_x11_keysym_happy=yes\n                     HWLOC_X11_CPPFLAGS=\"$X_CFLAGS\"\n                     AC_SUBST([HWLOC_X11_CPPFLAGS])\n                     HWLOC_X11_LIBS=\"$X_PRE_LIBS $X_LIBS -lX11 $X_EXTRA_LIBS\"\n                     AC_SUBST([HWLOC_X11_LIBS])])\n                ], [], [#include <X11/Xlib.h>])\n            ])\n         ])\n    CPPFLAGS=$CPPFLAGS_save\n    LIBS=$LIBS_save\n\n    # Cairo support\n    hwloc_cairo_happy=no\n    if test \"x$enable_cairo\" != \"xno\"; then\n      HWLOC_PKG_CHECK_MODULES([CAIRO], [cairo], [cairo_fill], [cairo.h],\n                              [hwloc_cairo_happy=yes],\n                              [hwloc_cairo_happy=no])\n    fi\n\n    if test \"x$hwloc_cairo_happy\" = \"xyes\"; then\n        AC_DEFINE([HWLOC_HAVE_CAIRO], [1], [Define to 1 if you have the `cairo' library.])\n        AC_MSG_CHECKING([whether lstopo Cairo/X11 interactive graphical output is supported])\n        if test \"x$hwloc_x11_keysym_happy\" = xyes; then\n          save_CPPFLAGS=\"$CPPFLAGS\"\n          CPPFLAGS=\"$CPPFLAGS $HWLOC_CAIRO_CFLAGS $HWLOC_X11_CPPFLAGS\"\n          AC_PREPROC_IFELSE([\n            AC_LANG_PROGRAM([[\n              #include <cairo.h>\n            ]], [[\n              #ifndef CAIRO_HAS_XLIB_SURFACE\n              #error\n              #endif\n            ]])\n          ], [\n            AC_MSG_RESULT([yes])\n            lstopo_have_x11=yes\n            AC_DEFINE([LSTOPO_HAVE_X11], 1, [Define if lstopo Cairo/X11 interactive graphical output is supported])\n          ], [\n            AC_MSG_RESULT([no (missing CAIRO_HAS_XLIB_SURFACE)])\n          ])\n          CPPFLAGS=\"$save_CPPFLAGS\"\n        else\n          AC_MSG_RESULT([no (missing X11)])\n        fi\n    else\n        AS_IF([test \"$enable_cairo\" = \"yes\"],\n              [AC_MSG_WARN([--enable-cairo requested, but Cairo/X11 support was not found])\n               AC_MSG_ERROR([Cannot continue])])\n    fi\n\n    AC_CHECK_TYPES([wchar_t], [\n      AC_CHECK_FUNCS([putwc])\n    ], [], [[#include <wchar.h>]])\n\n    HWLOC_XML_LOCALIZED=1\n    AC_CHECK_HEADERS([locale.h xlocale.h], [\n      AC_CHECK_FUNCS([setlocale])\n      AC_CHECK_FUNCS([uselocale], [HWLOC_XML_LOCALIZED=0])\n    ])\n    AC_SUBST([HWLOC_XML_LOCALIZED])\n    AC_CHECK_HEADERS([langinfo.h], [\n      AC_CHECK_FUNCS([nl_langinfo])\n    ])\n    hwloc_old_LIBS=\"$LIBS\"\n    chosen_curses=\"\"\n    for curses in ncurses curses\n    do\n      for lib in \"\" -ltermcap -l${curses}w -l$curses -ltinfo\n      do\n        AC_MSG_CHECKING(termcap support using $curses and $lib)\n        LIBS=\"$hwloc_old_LIBS $lib\"\n        AC_LINK_IFELSE([AC_LANG_PROGRAM([[\n#include <$curses.h>\n#include <term.h>\n]], [[tparm(NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0)]])], [\n          AC_MSG_RESULT(yes)\n          AC_SUBST([HWLOC_TERMCAP_LIBS], [\"$LIBS\"])\n          AC_DEFINE([HWLOC_HAVE_LIBTERMCAP], [1],\n                    [Define to 1 if you have a library providing the termcap interface])\n          chosen_curses=$curses\n        ], [\n          AC_MSG_RESULT(no)\n        ])\n        test \"x$chosen_curses\" != \"x\" && break\n      done\n      test \"x$chosen_curses\" != \"x\" && break\n    done\n    if test \"$chosen_curses\" = ncurses\n    then\n      AC_DEFINE([HWLOC_USE_NCURSES], [1], [Define to 1 if ncurses works, preferred over curses])\n    fi\n    LIBS=\"$hwloc_old_LIBS\"\n    unset hwloc_old_LIBS\n\n    _HWLOC_CHECK_DIFF_U\n    _HWLOC_CHECK_DIFF_W\n\n    # Solaris needs -lsocket for socket/bind/... in hwloc-ps\n    AC_CHECK_DECLS([bind], [\n      AC_CHECK_LIB([socket], [bind],\n                   [need_libsocket=yes])\n    ], [], [[#include <sys/socket.h>]])\n    if test x$need_libsocket = xyes; then\n      # keep -lsocket first in case there's also -lnsl which cannot be before -lsocket\n      HWLOC_PS_LIBS=\"-lsocket $HWLOC_PS_LIBS\"\n    fi\n    AC_SUBST(HWLOC_PS_LIBS)\n\n    AC_CHECK_HEADERS([time.h], [\n      AC_CHECK_FUNCS([clock_gettime])\n    ])\n\n    # Only generate this if we're building the utilities\n    # Even the netloc library Makefile is here because\n    # we don't embed libnetloc yet, it's useless without tools\n    AC_CONFIG_FILES(\n        hwloc_config_prefix[utils/Makefile]\n        hwloc_config_prefix[utils/hwloc/Makefile]\n        hwloc_config_prefix[utils/lstopo/Makefile]\n        hwloc_config_prefix[hwloc.pc]\n\n        hwloc_config_prefix[netloc/Makefile]\n        hwloc_config_prefix[utils/netloc/infiniband/Makefile]\n        hwloc_config_prefix[utils/netloc/draw/Makefile]\n        hwloc_config_prefix[utils/netloc/scotch/Makefile]\n        hwloc_config_prefix[utils/netloc/mpi/Makefile]\n        hwloc_config_prefix[netloc.pc]\n        hwloc_config_prefix[netlocscotch.pc]\n   )\n])dnl\n\n#-----------------------------------------------------------------------\n\n# Probably only ever invoked by hwloc's configure.ac\nAC_DEFUN([HWLOC_SETUP_TESTS],[\n    cat <<EOF\n\n###\n### Configuring tests\n###\nEOF\n\n    AC_CHECK_LIB([pthread], [pthread_self], [hwloc_have_pthread=yes])\n\n    HWLOC_PKG_CHECK_MODULES([NUMA], [numa], [numa_available], [numa.h],\n                            [hwloc_have_linux_libnuma=yes],\n\t\t\t    [\n\t\t\t     # libnuma didn't have a .pc before 2.0.12, look for it manually.\n\t\t\t     AC_CHECK_LIB([numa], [numa_available], [\n\t\t\t\t# and make sure this old release has at least numa_bitmask_alloc() for our tests\n\t\t\t        AC_CHECK_DECL([numa_bitmask_alloc],\n\t\t\t\t              [hwloc_have_linux_libnuma=yes\n\t\t\t\t\t       HWLOC_NUMA_LIBS=-lnuma\n\t\t\t\t\t      ],\n\t\t\t\t\t      [],\n\t\t\t\t\t      [#include <numa.h>])\n\t\t\t     ])])\n\n    AC_CHECK_HEADERS([stdlib.h], [\n      AC_CHECK_FUNCS([mkstemp])\n    ])\n\n    AC_CHECK_HEADERS([infiniband/verbs.h], [\n      AC_CHECK_LIB([ibverbs], [ibv_open_device],\n                   [AC_DEFINE([HAVE_LIBIBVERBS], 1, [Define to 1 if we have -libverbs])\n                    hwloc_have_libibverbs=yes])\n    ])\n\n    AC_CHECK_PROGS(XMLLINT, [xmllint])\n\n    AC_CHECK_PROGS(BUNZIPP, bunzip2, false)\n\n    AC_MSG_CHECKING(if CXX works)\n    AC_LANG_PUSH([C++])\n    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n#include <iostream>\nusing namespace std;\nint foo(void) {\n  cout << \"test\" << endl;\n  return 0;\n}\n\t]])], [hwloc_have_cxx=yes], [hwloc_have_cxx=no])\n    AC_LANG_POP([C++])\n    AC_MSG_RESULT([$hwloc_have_cxx])\n\n    _HWLOC_CHECK_DIFF_U\n\n    # Only generate these files if we're making the tests\n    AC_CONFIG_FILES(\n        hwloc_config_prefix[tests/Makefile]\n        hwloc_config_prefix[tests/hwloc/Makefile]\n        hwloc_config_prefix[tests/hwloc/linux/Makefile]\n        hwloc_config_prefix[tests/hwloc/linux/allowed/Makefile]\n        hwloc_config_prefix[tests/hwloc/linux/gather/Makefile]\n        hwloc_config_prefix[tests/hwloc/x86/Makefile]\n        hwloc_config_prefix[tests/hwloc/x86+linux/Makefile]\n        hwloc_config_prefix[tests/hwloc/xml/Makefile]\n        hwloc_config_prefix[tests/hwloc/ports/Makefile]\n        hwloc_config_prefix[tests/hwloc/rename/Makefile]\n        hwloc_config_prefix[tests/hwloc/linux/allowed/test-topology.sh]\n        hwloc_config_prefix[tests/hwloc/linux/gather/test-gather-topology.sh]\n        hwloc_config_prefix[tests/hwloc/linux/test-topology.sh]\n        hwloc_config_prefix[tests/hwloc/x86/test-topology.sh]\n        hwloc_config_prefix[tests/hwloc/x86+linux/test-topology.sh]\n        hwloc_config_prefix[tests/hwloc/xml/test-topology.sh]\n        hwloc_config_prefix[tests/hwloc/wrapper.sh]\n        hwloc_config_prefix[utils/hwloc/hwloc-compress-dir]\n        hwloc_config_prefix[utils/hwloc/hwloc-gather-topology]\n        hwloc_config_prefix[utils/hwloc/test-hwloc-annotate.sh]\n        hwloc_config_prefix[utils/hwloc/test-hwloc-calc.sh]\n        hwloc_config_prefix[utils/hwloc/test-hwloc-compress-dir.sh]\n        hwloc_config_prefix[utils/hwloc/test-hwloc-diffpatch.sh]\n        hwloc_config_prefix[utils/hwloc/test-hwloc-distrib.sh]\n        hwloc_config_prefix[utils/hwloc/test-hwloc-info.sh]\n        hwloc_config_prefix[utils/hwloc/test-fake-plugin.sh]\n        hwloc_config_prefix[utils/hwloc/test-parsing-flags.sh]\n        hwloc_config_prefix[utils/hwloc/test-hwloc-dump-hwdata/Makefile]\n        hwloc_config_prefix[utils/hwloc/test-hwloc-dump-hwdata/test-hwloc-dump-hwdata.sh]\n        hwloc_config_prefix[utils/lstopo/test-lstopo.sh]\n        hwloc_config_prefix[utils/lstopo/test-lstopo-shmem.sh]\n        hwloc_config_prefix[utils/netloc/infiniband/netloc_ib_gather_raw]\n        hwloc_config_prefix[contrib/hwloc-ps.www/Makefile]\n        hwloc_config_prefix[contrib/systemd/Makefile]\n        hwloc_config_prefix[contrib/completion/Makefile]\n        hwloc_config_prefix[contrib/misc/Makefile]\n        hwloc_config_prefix[contrib/windows/Makefile]\n        hwloc_config_prefix[contrib/windows/test-windows-version.sh]\n        hwloc_config_prefix[tests/netloc/Makefile]\n        hwloc_config_prefix[tests/netloc/tests.sh]\n    )\n\n    AC_CONFIG_COMMANDS([chmoding-scripts], [chmod +x] \\\n      hwloc_config_prefix[tests/hwloc/linux/test-topology.sh] \\\n      hwloc_config_prefix[tests/hwloc/x86/test-topology.sh] \\\n      hwloc_config_prefix[tests/hwloc/x86+linux/test-topology.sh] \\\n      hwloc_config_prefix[tests/hwloc/xml/test-topology.sh] \\\n      hwloc_config_prefix[tests/hwloc/linux/allowed/test-topology.sh] \\\n      hwloc_config_prefix[tests/hwloc/linux/gather/test-gather-topology.sh] \\\n      hwloc_config_prefix[tests/hwloc/wrapper.sh] \\\n      hwloc_config_prefix[utils/hwloc/hwloc-compress-dir] \\\n      hwloc_config_prefix[utils/hwloc/hwloc-gather-topology] \\\n      hwloc_config_prefix[utils/hwloc/test-hwloc-annotate.sh] \\\n      hwloc_config_prefix[utils/hwloc/test-hwloc-calc.sh] \\\n      hwloc_config_prefix[utils/hwloc/test-hwloc-compress-dir.sh] \\\n      hwloc_config_prefix[utils/hwloc/test-hwloc-diffpatch.sh] \\\n      hwloc_config_prefix[utils/hwloc/test-hwloc-distrib.sh] \\\n      hwloc_config_prefix[utils/hwloc/test-hwloc-info.sh] \\\n      hwloc_config_prefix[utils/hwloc/test-fake-plugin.sh] \\\n      hwloc_config_prefix[utils/hwloc/test-parsing-flags.sh] \\\n      hwloc_config_prefix[utils/hwloc/test-hwloc-dump-hwdata/test-hwloc-dump-hwdata.sh] \\\n      hwloc_config_prefix[utils/lstopo/test-lstopo.sh] \\\n      hwloc_config_prefix[utils/lstopo/test-lstopo-shmem.sh] \\\n      hwloc_config_prefix[utils/netloc/infiniband/netloc_ib_gather_raw] \\\n      hwloc_config_prefix[contrib/windows/test-windows-version.sh] \\\n      hwloc_config_prefix[tests/netloc/tests.sh])\n\n    # These links are only needed in standalone mode.  It would\n    # be nice to m4 foreach this somehow, but whenever I tried\n    # it, I got obscure \"invalid tag\" errors from\n    # AC_CONFIG_LINKS.  :-\\ Since these tests are only run when\n    # built in standalone mode, only generate them in\n    # standalone mode.\n    AC_CONFIG_LINKS(\n\thwloc_config_prefix[tests/hwloc/ports/topology-solaris.c]:hwloc_config_prefix[hwloc/topology-solaris.c]\n\thwloc_config_prefix[tests/hwloc/ports/topology-solaris-chiptype.c]:hwloc_config_prefix[hwloc/topology-solaris-chiptype.c]\n\thwloc_config_prefix[tests/hwloc/ports/topology-aix.c]:hwloc_config_prefix[hwloc/topology-aix.c]\n\thwloc_config_prefix[tests/hwloc/ports/topology-windows.c]:hwloc_config_prefix[hwloc/topology-windows.c]\n\thwloc_config_prefix[tests/hwloc/ports/topology-darwin.c]:hwloc_config_prefix[hwloc/topology-darwin.c]\n\thwloc_config_prefix[tests/hwloc/ports/topology-freebsd.c]:hwloc_config_prefix[hwloc/topology-freebsd.c]\n\thwloc_config_prefix[tests/hwloc/ports/topology-netbsd.c]:hwloc_config_prefix[hwloc/topology-netbsd.c]\n\thwloc_config_prefix[tests/hwloc/ports/topology-hpux.c]:hwloc_config_prefix[hwloc/topology-hpux.c]\n\thwloc_config_prefix[tests/hwloc/ports/topology-bgq.c]:hwloc_config_prefix[hwloc/topology-bgq.c]\n\thwloc_config_prefix[tests/hwloc/ports/topology-opencl.c]:hwloc_config_prefix[hwloc/topology-opencl.c]\n\thwloc_config_prefix[tests/hwloc/ports/topology-cuda.c]:hwloc_config_prefix[hwloc/topology-cuda.c]\n\thwloc_config_prefix[tests/hwloc/ports/topology-nvml.c]:hwloc_config_prefix[hwloc/topology-nvml.c]\n\thwloc_config_prefix[tests/hwloc/ports/topology-rsmi.c]:hwloc_config_prefix[hwloc/topology-rsmi.c]\n\thwloc_config_prefix[tests/hwloc/ports/topology-gl.c]:hwloc_config_prefix[hwloc/topology-gl.c]\n\thwloc_config_prefix[tests/hwloc/ports/lstopo-windows.c]:hwloc_config_prefix[utils/lstopo/lstopo-windows.c]\n        hwloc_config_prefix[tests/hwloc/ports/lstopo-android.c]:hwloc_config_prefix[utils/lstopo/lstopo-android.c])\n    ])\n])dnl\n\n#-----------------------------------------------------------------------\n\nAC_DEFUN([_HWLOC_PROG_DIFF], [\n  AC_ARG_VAR(DIFF, [diff tool])\n  AC_PATH_PROG([DIFF], [diff])\n])\n\nAC_DEFUN([_HWLOC_CHECK_DIFF_U], [\n  AC_REQUIRE([_HWLOC_PROG_DIFF])\n  AC_MSG_CHECKING([whether diff accepts -u])\n  if $DIFF -u /dev/null /dev/null 2> /dev/null\n  then\n    AC_MSG_RESULT([yes])\n    HWLOC_DIFF_U=\"-u\"\n  else\n    AC_MSG_RESULT([no])\n    HWLOC_DIFF_U=\"\"\n  fi\n  AC_SUBST([HWLOC_DIFF_U])\n])\n\nAC_DEFUN([_HWLOC_CHECK_DIFF_W], [\n  AC_REQUIRE([_HWLOC_PROG_DIFF])\n  AC_MSG_CHECKING([whether diff accepts -w])\n  if $DIFF -w /dev/null /dev/null 2> /dev/null\n  then\n    AC_MSG_RESULT([yes])\n    HWLOC_DIFF_W=\"-w\"\n  else\n    AC_MSG_RESULT([no])\n    HWLOC_DIFF_W=\"\"\n  fi\n  AC_SUBST([HWLOC_DIFF_W])\n])\n",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/include/hwloc/plugins.h": "/*\n * Copyright \u00a9 2013-2020 Inria.  All rights reserved.\n * Copyright \u00a9 2016 Cisco Systems, Inc.  All rights reserved.\n * See COPYING in top-level directory.\n */\n\n#ifndef HWLOC_PLUGINS_H\n#define HWLOC_PLUGINS_H\n\n/** \\file\n * \\brief Public interface for building hwloc plugins.\n */\n\nstruct hwloc_backend;\n\n#include \"hwloc.h\"\n\n#ifdef HWLOC_INSIDE_PLUGIN\n/* needed for hwloc_plugin_check_namespace() */\n#ifdef HWLOC_HAVE_LTDL\n#include <ltdl.h>\n#else\n#include <dlfcn.h>\n#endif\n#endif\n\n\n\n/** \\defgroup hwlocality_disc_components Components and Plugins: Discovery components\n *\n * \\note These structures and functions may change when ::HWLOC_COMPONENT_ABI is modified.\n *\n * @{\n */\n\n/** \\brief Discovery component structure\n *\n * This is the major kind of components, taking care of the discovery.\n * They are registered by generic components, either statically-built or as plugins.\n */\nstruct hwloc_disc_component {\n  /** \\brief Name.\n   * If this component is built as a plugin, this name does not have to match the plugin filename.\n   */\n  const char *name;\n\n  /** \\brief Discovery phases performed by this component.\n   * OR'ed set of ::hwloc_disc_phase_t\n   */\n  unsigned phases;\n\n  /** \\brief Component phases to exclude, as an OR'ed set of ::hwloc_disc_phase_t.\n   *\n   * For a GLOBAL component, this usually includes all other phases (\\c ~UL).\n   *\n   * Other components only exclude types that may bring conflicting\n   * topology information. MISC components should likely not be excluded\n   * since they usually bring non-primary additional information.\n   */\n  unsigned excluded_phases;\n\n  /** \\brief Instantiate callback to create a backend from the component.\n   * Parameters data1, data2, data3 are NULL except for components\n   * that have special enabling routines such as hwloc_topology_set_xml(). */\n  struct hwloc_backend * (*instantiate)(struct hwloc_topology *topology, struct hwloc_disc_component *component, unsigned excluded_phases, const void *data1, const void *data2, const void *data3);\n\n  /** \\brief Component priority.\n   * Used to sort topology->components, higher priority first.\n   * Also used to decide between two components with the same name.\n   *\n   * Usual values are\n   * 50 for native OS (or platform) components,\n   * 45 for x86,\n   * 40 for no-OS fallback,\n   * 30 for global components (xml, synthetic),\n   * 20 for pci,\n   * 10 for other misc components (opencl etc.).\n   */\n  unsigned priority;\n\n  /** \\brief Enabled by default.\n   * If unset, if will be disabled unless explicitly requested.\n   */\n  unsigned enabled_by_default;\n\n  /** \\private Used internally to list components by priority on topology->components\n   * (the component structure is usually read-only,\n   *  the core copies it before using this field for queueing)\n   */\n  struct hwloc_disc_component * next;\n};\n\n/** @} */\n\n\n\n\n/** \\defgroup hwlocality_disc_backends Components and Plugins: Discovery backends\n *\n * \\note These structures and functions may change when ::HWLOC_COMPONENT_ABI is modified.\n *\n * @{\n */\n\n/** \\brief Discovery phase */\ntypedef enum hwloc_disc_phase_e {\n  /** \\brief xml or synthetic, platform-specific components such as bgq.\n   * Discovers everything including CPU, memory, I/O and everything else.\n   * A component with a Global phase usually excludes all other phases.\n   * \\hideinitializer */\n  HWLOC_DISC_PHASE_GLOBAL = (1U<<0),\n\n  /** \\brief CPU discovery.\n   * \\hideinitializer */\n  HWLOC_DISC_PHASE_CPU = (1U<<1),\n\n  /** \\brief Attach memory to existing CPU objects.\n   * \\hideinitializer */\n  HWLOC_DISC_PHASE_MEMORY = (1U<<2),\n\n  /** \\brief Attach PCI devices and bridges to existing CPU objects.\n   * \\hideinitializer */\n  HWLOC_DISC_PHASE_PCI = (1U<<3),\n\n  /** \\brief I/O discovery that requires PCI devices (OS devices such as OpenCL, CUDA, etc.).\n   * \\hideinitializer */\n  HWLOC_DISC_PHASE_IO = (1U<<4),\n\n  /** \\brief Misc objects that gets added below anything else.\n   * \\hideinitializer */\n  HWLOC_DISC_PHASE_MISC = (1U<<5),\n\n  /** \\brief Annotating existing objects, adding distances, etc.\n   * \\hideinitializer */\n  HWLOC_DISC_PHASE_ANNOTATE = (1U<<6),\n\n  /** \\brief Final tweaks to a ready-to-use topology.\n   * This phase runs once the topology is loaded, before it is returned to the topology.\n   * Hence it may only use the main hwloc API for modifying the topology,\n   * for instance by restricting it, adding info attributes, etc.\n   * \\hideinitializer */\n  HWLOC_DISC_PHASE_TWEAK = (1U<<7)\n} hwloc_disc_phase_t;\n\n/** \\brief Discovery status flags */\nenum hwloc_disc_status_flag_e {\n  /** \\brief The sets of allowed resources were already retrieved \\hideinitializer */\n  HWLOC_DISC_STATUS_FLAG_GOT_ALLOWED_RESOURCES = (1UL<<1)\n};\n\n/** \\brief Discovery status structure\n *\n * Used by the core and backends to inform about what has been/is being done\n * during the discovery process.\n */\nstruct hwloc_disc_status {\n  /** \\brief The current discovery phase that is performed.\n   * Must match one of the phases in the component phases field.\n   */\n  hwloc_disc_phase_t phase;\n\n  /** \\brief Dynamically excluded phases.\n   * If a component decides during discovery that some phases are no longer needed.\n   */\n  unsigned excluded_phases;\n\n  /** \\brief OR'ed set of hwloc_disc_status_flag_e */\n  unsigned long flags;\n};\n\n/** \\brief Discovery backend structure\n *\n * A backend is the instantiation of a discovery component.\n * When a component gets enabled for a topology,\n * its instantiate() callback creates a backend.\n *\n * hwloc_backend_alloc() initializes all fields to default values\n * that the component may change (except \"component\" and \"next\")\n * before enabling the backend with hwloc_backend_enable().\n *\n * Most backends assume that the topology is_thissystem flag is\n * set because they talk to the underlying operating system.\n * However they may still be used in topologies without the\n * is_thissystem flag for debugging reasons.\n * In practice, they are usually auto-disabled in such cases\n * (excluded by xml or synthetic backends, or by environment\n *  variables when changing the Linux fsroot or the x86 cpuid path).\n */\nstruct hwloc_backend {\n  /** \\private Reserved for the core, set by hwloc_backend_alloc() */\n  struct hwloc_disc_component * component;\n  /** \\private Reserved for the core, set by hwloc_backend_enable() */\n  struct hwloc_topology * topology;\n  /** \\private Reserved for the core. Set to 1 if forced through envvar, 0 otherwise. */\n  int envvar_forced;\n  /** \\private Reserved for the core. Used internally to list backends topology->backends. */\n  struct hwloc_backend * next;\n\n  /** \\brief Discovery phases performed by this component, possibly without some of them if excluded by other components.\n   * OR'ed set of ::hwloc_disc_phase_t\n   */\n  unsigned phases;\n\n  /** \\brief Backend flags, currently always 0. */\n  unsigned long flags;\n\n  /** \\brief Backend-specific 'is_thissystem' property.\n   * Set to 0 if the backend disables the thissystem flag for this topology\n   * (e.g. loading from xml or synthetic string,\n   *  or using a different fsroot on Linux, or a x86 CPUID dump).\n   * Set to -1 if the backend doesn't care (default).\n   */\n  int is_thissystem;\n\n  /** \\brief Backend private data, or NULL if none. */\n  void * private_data;\n  /** \\brief Callback for freeing the private_data.\n   * May be NULL.\n   */\n  void (*disable)(struct hwloc_backend *backend);\n\n  /** \\brief Main discovery callback.\n   * returns -1 on error, either because it couldn't add its objects ot the existing topology,\n   * or because of an actual discovery/gathering failure.\n   * May be NULL.\n   */\n  int (*discover)(struct hwloc_backend *backend, struct hwloc_disc_status *status);\n\n  /** \\brief Callback to retrieve the locality of a PCI object.\n   * Called by the PCI core when attaching PCI hierarchy to CPU objects.\n   * May be NULL.\n   */\n  int (*get_pci_busid_cpuset)(struct hwloc_backend *backend, struct hwloc_pcidev_attr_s *busid, hwloc_bitmap_t cpuset);\n};\n\n/** \\brief Allocate a backend structure, set good default values, initialize backend->component and topology, etc.\n * The caller will then modify whatever needed, and call hwloc_backend_enable().\n */\nHWLOC_DECLSPEC struct hwloc_backend * hwloc_backend_alloc(struct hwloc_topology *topology, struct hwloc_disc_component *component);\n\n/** \\brief Enable a previously allocated and setup backend. */\nHWLOC_DECLSPEC int hwloc_backend_enable(struct hwloc_backend *backend);\n\n/** @} */\n\n\n\n\n/** \\defgroup hwlocality_generic_components Components and Plugins: Generic components\n *\n * \\note These structures and functions may change when ::HWLOC_COMPONENT_ABI is modified.\n *\n * @{\n */\n\n/** \\brief Generic component type */\ntypedef enum hwloc_component_type_e {\n  /** \\brief The data field must point to a struct hwloc_disc_component. */\n  HWLOC_COMPONENT_TYPE_DISC,\n\n  /** \\brief The data field must point to a struct hwloc_xml_component. */\n  HWLOC_COMPONENT_TYPE_XML\n} hwloc_component_type_t;\n\n/** \\brief Generic component structure\n *\n * Generic components structure, either statically listed by configure in static-components.h\n * or dynamically loaded as a plugin.\n */\nstruct hwloc_component {\n  /** \\brief Component ABI version, set to ::HWLOC_COMPONENT_ABI */\n  unsigned abi;\n\n  /** \\brief Process-wide component initialization callback.\n   *\n   * This optional callback is called when the component is registered\n   * to the hwloc core (after loading the plugin).\n   *\n   * When the component is built as a plugin, this callback\n   * should call hwloc_check_plugin_namespace()\n   * and return an negative error code on error.\n   *\n   * \\p flags is always 0 for now.\n   *\n   * \\return 0 on success, or a negative code on error.\n   *\n   * \\note If the component uses ltdl for loading its own plugins,\n   * it should load/unload them only in init() and finalize(),\n   * to avoid race conditions with hwloc's use of ltdl.\n   */\n  int (*init)(unsigned long flags);\n\n  /** \\brief Process-wide component termination callback.\n   *\n   * This optional callback is called after unregistering the component\n   * from the hwloc core (before unloading the plugin).\n   *\n   * \\p flags is always 0 for now.\n   *\n   * \\note If the component uses ltdl for loading its own plugins,\n   * it should load/unload them only in init() and finalize(),\n   * to avoid race conditions with hwloc's use of ltdl.\n   */\n  void (*finalize)(unsigned long flags);\n\n  /** \\brief Component type */\n  hwloc_component_type_t type;\n\n  /** \\brief Component flags, unused for now */\n  unsigned long flags;\n\n  /** \\brief Component data, pointing to a struct hwloc_disc_component or struct hwloc_xml_component. */\n  void * data;\n};\n\n/** @} */\n\n\n\n\n/** \\defgroup hwlocality_components_core_funcs Components and Plugins: Core functions to be used by components\n *\n * \\note These structures and functions may change when ::HWLOC_COMPONENT_ABI is modified.\n *\n * @{\n */\n\n/** \\brief Check whether insertion errors are hidden */\nHWLOC_DECLSPEC int hwloc_hide_errors(void);\n\n/** \\brief Add an object to the topology.\n *\n * Insert new object \\p obj in the topology starting under existing object \\p root\n * (if \\c NULL, the topology root object is used).\n *\n * It is sorted along the tree of other objects according to the inclusion of\n * cpusets, to eventually be added as a child of the smallest object including\n * this object.\n *\n * If the cpuset is empty, the type of the object (and maybe some attributes)\n * must be enough to find where to insert the object. This is especially true\n * for NUMA nodes with memory and no CPUs.\n *\n * The given object should not have children.\n *\n * This shall only be called before levels are built.\n *\n * The caller should check whether the object type is filtered-out before calling this function.\n *\n * The topology cpuset/nodesets will be enlarged to include the object sets.\n *\n * \\p reason is a unique string identifying where and why this insertion call was performed\n * (it will be displayed in case of internal insertion error).\n *\n * Returns the object on success.\n * Returns NULL and frees obj on error.\n * Returns another object and frees obj if it was merged with an identical pre-existing object.\n */\nHWLOC_DECLSPEC hwloc_obj_t\nhwloc__insert_object_by_cpuset(struct hwloc_topology *topology, hwloc_obj_t root,\n                               hwloc_obj_t obj, const char *reason);\n\n/** \\brief Insert an object somewhere in the topology.\n *\n * It is added as the last child of the given parent.\n * The cpuset is completely ignored, so strange objects such as I/O devices should\n * preferably be inserted with this.\n *\n * When used for \"normal\" children with cpusets (when importing from XML\n * when duplicating a topology), the caller should make sure that:\n * - children are inserted in order,\n * - children cpusets do not intersect.\n *\n * The given object may have normal, I/O or Misc children, as long as they are in order as well.\n * These children must have valid parent and next_sibling pointers.\n *\n * The caller should check whether the object type is filtered-out before calling this function.\n */\nHWLOC_DECLSPEC void hwloc_insert_object_by_parent(struct hwloc_topology *topology, hwloc_obj_t parent, hwloc_obj_t obj);\n\n/** \\brief Allocate and initialize an object of the given type and physical index.\n *\n * If \\p os_index is unknown or irrelevant, use \\c HWLOC_UNKNOWN_INDEX.\n */\nHWLOC_DECLSPEC hwloc_obj_t hwloc_alloc_setup_object(hwloc_topology_t topology, hwloc_obj_type_t type, unsigned os_index);\n\n/** \\brief Setup object cpusets/nodesets by OR'ing its children.\n *\n * Used when adding an object late in the topology.\n * Will update the new object by OR'ing all its new children sets.\n *\n * Used when PCI backend adds a hostbridge parent, when distances\n * add a new Group, etc.\n */\nHWLOC_DECLSPEC int hwloc_obj_add_children_sets(hwloc_obj_t obj);\n\n/** \\brief Request a reconnection of children and levels in the topology.\n *\n * May be used by backends during discovery if they need arrays or lists\n * of object within levels or children to be fully connected.\n *\n * \\p flags is currently unused, must 0.\n */\nHWLOC_DECLSPEC int hwloc_topology_reconnect(hwloc_topology_t topology, unsigned long flags __hwloc_attribute_unused);\n\n/** \\brief Make sure that plugins can lookup core symbols.\n *\n * This is a sanity check to avoid lazy-lookup failures when libhwloc\n * is loaded within a plugin, and later tries to load its own plugins.\n * This may fail (and abort the program) if libhwloc symbols are in a\n * private namespace.\n *\n * \\return 0 on success.\n * \\return -1 if the plugin cannot be successfully loaded. The caller\n * plugin init() callback should return a negative error code as well.\n *\n * Plugins should call this function in their init() callback to avoid\n * later crashes if lazy symbol resolution is used by the upper layer that\n * loaded hwloc (e.g. OpenCL implementations using dlopen with RTLD_LAZY).\n *\n * \\note The build system must define HWLOC_INSIDE_PLUGIN if and only if\n * building the caller as a plugin.\n *\n * \\note This function should remain inline so plugins can call it even\n * when they cannot find libhwloc symbols.\n */\nstatic __hwloc_inline int\nhwloc_plugin_check_namespace(const char *pluginname __hwloc_attribute_unused, const char *symbol __hwloc_attribute_unused)\n{\n#ifdef HWLOC_INSIDE_PLUGIN\n  void *sym;\n#ifdef HWLOC_HAVE_LTDL\n  lt_dlhandle handle = lt_dlopen(NULL);\n#else\n  void *handle = dlopen(NULL, RTLD_NOW|RTLD_LOCAL);\n#endif\n  if (!handle)\n    /* cannot check, assume things will work */\n    return 0;\n#ifdef HWLOC_HAVE_LTDL\n  sym = lt_dlsym(handle, symbol);\n  lt_dlclose(handle);\n#else\n  sym = dlsym(handle, symbol);\n  dlclose(handle);\n#endif\n  if (!sym) {\n    static int verboseenv_checked = 0;\n    static int verboseenv_value = 0;\n    if (!verboseenv_checked) {\n      const char *verboseenv = getenv(\"HWLOC_PLUGINS_VERBOSE\");\n      verboseenv_value = verboseenv ? atoi(verboseenv) : 0;\n      verboseenv_checked = 1;\n    }\n    if (verboseenv_value)\n      fprintf(stderr, \"Plugin `%s' disabling itself because it cannot find the `%s' core symbol.\\n\",\n\t      pluginname, symbol);\n    return -1;\n  }\n#endif /* HWLOC_INSIDE_PLUGIN */\n  return 0;\n}\n\n/** @} */\n\n\n\n\n/** \\defgroup hwlocality_components_filtering Components and Plugins: Filtering objects\n *\n * \\note These structures and functions may change when ::HWLOC_COMPONENT_ABI is modified.\n *\n * @{\n */\n\n/** \\brief Check whether the given PCI device classid is important.\n *\n * \\return 1 if important, 0 otherwise.\n */\nstatic __hwloc_inline int\nhwloc_filter_check_pcidev_subtype_important(unsigned classid)\n{\n  unsigned baseclass = classid >> 8;\n  return (baseclass == 0x03 /* PCI_BASE_CLASS_DISPLAY */\n\t  || baseclass == 0x02 /* PCI_BASE_CLASS_NETWORK */\n\t  || baseclass == 0x01 /* PCI_BASE_CLASS_STORAGE */\n\t  || baseclass == 0x0b /* PCI_BASE_CLASS_PROCESSOR */\n\t  || classid == 0x0c04 /* PCI_CLASS_SERIAL_FIBER */\n\t  || classid == 0x0c06 /* PCI_CLASS_SERIAL_INFINIBAND */\n\t  || baseclass == 0x12 /* Processing Accelerators */);\n}\n\n/** \\brief Check whether the given OS device subtype is important.\n *\n * \\return 1 if important, 0 otherwise.\n */\nstatic __hwloc_inline int\nhwloc_filter_check_osdev_subtype_important(hwloc_obj_osdev_type_t subtype)\n{\n  return (subtype != HWLOC_OBJ_OSDEV_DMA);\n}\n\n/** \\brief Check whether a non-I/O object type should be filtered-out.\n *\n * Cannot be used for I/O objects.\n *\n * \\return 1 if the object type should be kept, 0 otherwise.\n */\nstatic __hwloc_inline int\nhwloc_filter_check_keep_object_type(hwloc_topology_t topology, hwloc_obj_type_t type)\n{\n  enum hwloc_type_filter_e filter = HWLOC_TYPE_FILTER_KEEP_NONE;\n  hwloc_topology_get_type_filter(topology, type, &filter);\n  assert(filter != HWLOC_TYPE_FILTER_KEEP_IMPORTANT); /* IMPORTANT only used for I/O */\n  return filter == HWLOC_TYPE_FILTER_KEEP_NONE ? 0 : 1;\n}\n\n/** \\brief Check whether the given object should be filtered-out.\n *\n * \\return 1 if the object type should be kept, 0 otherwise.\n */\nstatic __hwloc_inline int\nhwloc_filter_check_keep_object(hwloc_topology_t topology, hwloc_obj_t obj)\n{\n  hwloc_obj_type_t type = obj->type;\n  enum hwloc_type_filter_e filter = HWLOC_TYPE_FILTER_KEEP_NONE;\n  hwloc_topology_get_type_filter(topology, type, &filter);\n  if (filter == HWLOC_TYPE_FILTER_KEEP_NONE)\n    return 0;\n  if (filter == HWLOC_TYPE_FILTER_KEEP_IMPORTANT) {\n    if (type == HWLOC_OBJ_PCI_DEVICE)\n      return hwloc_filter_check_pcidev_subtype_important(obj->attr->pcidev.class_id);\n    if (type == HWLOC_OBJ_OS_DEVICE)\n      return hwloc_filter_check_osdev_subtype_important(obj->attr->osdev.type);\n  }\n  return 1;\n}\n\n/** @} */\n\n\n\n\n/** \\defgroup hwlocality_components_pcidisc Components and Plugins: helpers for PCI discovery\n *\n * \\note These structures and functions may change when ::HWLOC_COMPONENT_ABI is modified.\n *\n * @{\n */\n\n/** \\brief Return the offset of the given capability in the PCI config space buffer\n *\n * This function requires a 256-bytes config space. Unknown/unavailable bytes should be set to 0xff.\n */\nHWLOC_DECLSPEC unsigned hwloc_pcidisc_find_cap(const unsigned char *config, unsigned cap);\n\n/** \\brief Fill linkspeed by reading the PCI config space where PCI_CAP_ID_EXP is at position offset.\n *\n * Needs 20 bytes of EXP capability block starting at offset in the config space\n * for registers up to link status.\n */\nHWLOC_DECLSPEC int hwloc_pcidisc_find_linkspeed(const unsigned char *config, unsigned offset, float *linkspeed);\n\n/** \\brief Return the hwloc object type (PCI device or Bridge) for the given class and configuration space.\n *\n * This function requires 16 bytes of common configuration header at the beginning of config.\n */\nHWLOC_DECLSPEC hwloc_obj_type_t hwloc_pcidisc_check_bridge_type(unsigned device_class, const unsigned char *config);\n\n/** \\brief Fills the attributes of the given PCI bridge using the given PCI config space.\n *\n * This function requires 32 bytes of common configuration header at the beginning of config.\n *\n * Returns -1 and destroys /p obj if bridge fields are invalid.\n */\nHWLOC_DECLSPEC int hwloc_pcidisc_find_bridge_buses(unsigned domain, unsigned bus, unsigned dev, unsigned func,\n\t\t\t\t\t\t   unsigned *secondary_busp, unsigned *subordinate_busp,\n\t\t\t\t\t\t   const unsigned char *config);\n\n/** \\brief Insert a PCI object in the given PCI tree by looking at PCI bus IDs.\n *\n * If \\p treep points to \\c NULL, the new object is inserted there.\n */\nHWLOC_DECLSPEC void hwloc_pcidisc_tree_insert_by_busid(struct hwloc_obj **treep, struct hwloc_obj *obj);\n\n/** \\brief Add some hostbridges on top of the given tree of PCI objects and attach them to the topology.\n *\n * Other backends may lookup PCI objects or localities (for instance to attach OS devices)\n * by using hwloc_pcidisc_find_by_busid() or hwloc_pcidisc_find_busid_parent().\n */\nHWLOC_DECLSPEC int hwloc_pcidisc_tree_attach(struct hwloc_topology *topology, struct hwloc_obj *tree);\n\n/** @} */\n\n\n\n\n/** \\defgroup hwlocality_components_pcifind Components and Plugins: finding PCI objects during other discoveries\n *\n * \\note These structures and functions may change when ::HWLOC_COMPONENT_ABI is modified.\n *\n * @{\n */\n\n/** \\brief Find the normal parent of a PCI bus ID.\n *\n * Look at PCI affinity to find out where the given PCI bus ID should be attached.\n *\n * This function should be used to attach an I/O device under the corresponding\n * PCI object (if any), or under a normal (non-I/O) object with same locality.\n */\nHWLOC_DECLSPEC struct hwloc_obj * hwloc_pci_find_parent_by_busid(struct hwloc_topology *topology, unsigned domain, unsigned bus, unsigned dev, unsigned func);\n\n/** @} */\n\n\n\n\n#endif /* HWLOC_PLUGINS_H */\n",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/hwloc/components.c": "/*\n * Copyright \u00a9 2009-2020 Inria.  All rights reserved.\n * Copyright \u00a9 2012 Universit\u00e9 Bordeaux\n * See COPYING in top-level directory.\n */\n\n#include \"private/autogen/config.h\"\n#include \"hwloc.h\"\n#include \"private/private.h\"\n#include \"private/xml.h\"\n#include \"private/misc.h\"\n\n#define HWLOC_COMPONENT_STOP_NAME \"stop\"\n#define HWLOC_COMPONENT_EXCLUDE_CHAR '-'\n#define HWLOC_COMPONENT_SEPS \",\"\n#define HWLOC_COMPONENT_PHASESEP_CHAR ':'\n\n/* list of all registered discovery components, sorted by priority, higher priority first.\n * noos is last because its priority is 0.\n * others' priority is 10.\n */\nstatic struct hwloc_disc_component * hwloc_disc_components = NULL;\n\nstatic unsigned hwloc_components_users = 0; /* first one initializes, last ones destroys */\n\nstatic int hwloc_components_verbose = 0;\n#ifdef HWLOC_HAVE_PLUGINS\nstatic int hwloc_plugins_verbose = 0;\nstatic const char * hwloc_plugins_blacklist = NULL;\n#endif\n\n/* hwloc_components_mutex serializes:\n * - loading/unloading plugins, and modifications of the hwloc_plugins list\n * - calls to ltdl, including in hwloc_check_plugin_namespace()\n * - registration of components with hwloc_disc_component_register()\n *   and hwloc_xml_callbacks_register()\n */\n#ifdef HWLOC_WIN_SYS\n/* Basic mutex on top of InterlockedCompareExchange() on windows,\n * Far from perfect, but easy to maintain, and way enough given that this code will never be needed for real. */\n#include <windows.h>\nstatic LONG hwloc_components_mutex = 0;\n#define HWLOC_COMPONENTS_LOCK() do {\t\t\t\t\t\t\\\n  while (InterlockedCompareExchange(&hwloc_components_mutex, 1, 0) != 0)\t\\\n    SwitchToThread();\t\t\t\t\t\t\t\t\\\n} while (0)\n#define HWLOC_COMPONENTS_UNLOCK() do {\t\t\t\t\t\t\\\n  assert(hwloc_components_mutex == 1);\t\t\t\t\t\t\\\n  hwloc_components_mutex = 0;\t\t\t\t\t\t\t\\\n} while (0)\n\n#elif defined HWLOC_HAVE_PTHREAD_MUTEX\n/* pthread mutex if available (except on windows) */\n#include <pthread.h>\nstatic pthread_mutex_t hwloc_components_mutex = PTHREAD_MUTEX_INITIALIZER;\n#define HWLOC_COMPONENTS_LOCK() pthread_mutex_lock(&hwloc_components_mutex)\n#define HWLOC_COMPONENTS_UNLOCK() pthread_mutex_unlock(&hwloc_components_mutex)\n\n#else /* HWLOC_WIN_SYS || HWLOC_HAVE_PTHREAD_MUTEX */\n#error No mutex implementation available\n#endif\n\n\n#ifdef HWLOC_HAVE_PLUGINS\n\n#ifdef HWLOC_HAVE_LTDL\n/* ltdl-based plugin load */\n#include <ltdl.h>\ntypedef lt_dlhandle hwloc_dlhandle;\n#define hwloc_dlinit lt_dlinit\n#define hwloc_dlexit lt_dlexit\n#define hwloc_dlopenext lt_dlopenext\n#define hwloc_dlclose lt_dlclose\n#define hwloc_dlerror lt_dlerror\n#define hwloc_dlsym lt_dlsym\n#define hwloc_dlforeachfile lt_dlforeachfile\n\n#else /* !HWLOC_HAVE_LTDL */\n/* no-ltdl plugin load relies on less portable libdl */\n#include <dlfcn.h>\ntypedef void * hwloc_dlhandle;\nstatic __hwloc_inline int hwloc_dlinit(void) { return 0; }\nstatic __hwloc_inline int hwloc_dlexit(void) { return 0; }\n#define hwloc_dlclose dlclose\n#define hwloc_dlerror dlerror\n#define hwloc_dlsym dlsym\n\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <dirent.h>\n#include <unistd.h>\n\nstatic hwloc_dlhandle hwloc_dlopenext(const char *_filename)\n{\n  hwloc_dlhandle handle;\n  char *filename = NULL;\n  (void) asprintf(&filename, \"%s.so\", _filename);\n  if (!filename)\n    return NULL;\n  handle = dlopen(filename, RTLD_NOW|RTLD_LOCAL);\n  free(filename);\n  return handle;\n}\n\nstatic int\nhwloc_dlforeachfile(const char *_paths,\n\t\t    int (*func)(const char *filename, void *data),\n\t\t    void *data)\n{\n  char *paths = NULL, *path;\n\n  paths = strdup(_paths);\n  if (!paths)\n    return -1;\n\n  path = paths;\n  while (*path) {\n    char *colon;\n    DIR *dir;\n    struct dirent *dirent;\n\n    colon = strchr(path, ':');\n    if (colon)\n      *colon = '\\0';\n\n    if (hwloc_plugins_verbose)\n      fprintf(stderr, \" Looking under %s\\n\", path);\n\n    dir = opendir(path);\n    if (!dir)\n      goto next;\n\n    while ((dirent = readdir(dir)) != NULL) {\n      char *abs_name, *suffix;\n      struct stat stbuf;\n      int err;\n\n      err = asprintf(&abs_name, \"%s/%s\", path, dirent->d_name);\n      if (err < 0)\n\tcontinue;\n\n      err = stat(abs_name, &stbuf);\n      if (err < 0) {\n\tfree(abs_name);\n        continue;\n      }\n      if (!S_ISREG(stbuf.st_mode)) {\n\tfree(abs_name);\n\tcontinue;\n      }\n\n      /* Only keep .so files, and remove that suffix to get the component basename */\n      suffix = strrchr(abs_name, '.');\n      if (!suffix || strcmp(suffix, \".so\")) {\n\tfree(abs_name);\n\tcontinue;\n      }\n      *suffix = '\\0';\n\n      err = func(abs_name, data);\n      if (err) {\n\tfree(abs_name);\n\tcontinue;\n      }\n\n      free(abs_name);\n    }\n\n    closedir(dir);\n\n  next:\n    if (!colon)\n      break;\n    path = colon+1;\n  }\n\n  free(paths);\n  return 0;\n}\n#endif /* !HWLOC_HAVE_LTDL */\n\n/* array of pointers to dynamically loaded plugins */\nstatic struct hwloc__plugin_desc {\n  char *name;\n  struct hwloc_component *component;\n  char *filename;\n  hwloc_dlhandle handle;\n  struct hwloc__plugin_desc *next;\n} *hwloc_plugins = NULL;\n\nstatic int\nhwloc__dlforeach_cb(const char *filename, void *_data __hwloc_attribute_unused)\n{\n  const char *basename;\n  hwloc_dlhandle handle;\n  struct hwloc_component *component;\n  struct hwloc__plugin_desc *desc, **prevdesc;\n  char *componentsymbolname;\n\n  if (hwloc_plugins_verbose)\n    fprintf(stderr, \"Plugin dlforeach found `%s'\\n\", filename);\n\n  basename = strrchr(filename, '/');\n  if (!basename)\n    basename = filename;\n  else\n    basename++;\n\n  if (hwloc_plugins_blacklist && strstr(hwloc_plugins_blacklist, basename)) {\n    if (hwloc_plugins_verbose)\n      fprintf(stderr, \"Plugin `%s' is blacklisted in the environment\\n\", basename);\n    goto out;\n  }\n\n  /* dlopen and get the component structure */\n  handle = hwloc_dlopenext(filename);\n  if (!handle) {\n    if (hwloc_plugins_verbose)\n      fprintf(stderr, \"Failed to load plugin: %s\\n\", hwloc_dlerror());\n    goto out;\n  }\n\n  componentsymbolname = malloc(strlen(basename)+10+1);\n  if (!componentsymbolname) {\n    if (hwloc_plugins_verbose)\n      fprintf(stderr, \"Failed to allocation component `%s' symbol\\n\",\n\t      basename);\n    goto out_with_handle;\n  }\n  sprintf(componentsymbolname, \"%s_component\", basename);\n  component = hwloc_dlsym(handle, componentsymbolname);\n  if (!component) {\n    if (hwloc_plugins_verbose)\n      fprintf(stderr, \"Failed to find component symbol `%s'\\n\",\n\t      componentsymbolname);\n    free(componentsymbolname);\n    goto out_with_handle;\n  }\n  if (component->abi != HWLOC_COMPONENT_ABI) {\n    if (hwloc_plugins_verbose)\n      fprintf(stderr, \"Plugin symbol ABI %u instead of %d\\n\",\n\t      component->abi, HWLOC_COMPONENT_ABI);\n    free(componentsymbolname);\n    goto out_with_handle;\n  }\n  if (hwloc_plugins_verbose)\n    fprintf(stderr, \"Plugin contains expected symbol `%s'\\n\",\n\t    componentsymbolname);\n  free(componentsymbolname);\n\n  if (HWLOC_COMPONENT_TYPE_DISC == component->type) {\n    if (strncmp(basename, \"hwloc_\", 6)) {\n      if (hwloc_plugins_verbose)\n\tfprintf(stderr, \"Plugin name `%s' doesn't match its type DISCOVERY\\n\", basename);\n      goto out_with_handle;\n    }\n  } else if (HWLOC_COMPONENT_TYPE_XML == component->type) {\n    if (strncmp(basename, \"hwloc_xml_\", 10)) {\n      if (hwloc_plugins_verbose)\n\tfprintf(stderr, \"Plugin name `%s' doesn't match its type XML\\n\", basename);\n      goto out_with_handle;\n    }\n  } else {\n    if (hwloc_plugins_verbose)\n      fprintf(stderr, \"Plugin name `%s' has invalid type %u\\n\",\n\t      basename, (unsigned) component->type);\n    goto out_with_handle;\n  }\n\n  /* allocate a plugin_desc and queue it */\n  desc = malloc(sizeof(*desc));\n  if (!desc)\n    goto out_with_handle;\n  desc->name = strdup(basename);\n  desc->filename = strdup(filename);\n  desc->component = component;\n  desc->handle = handle;\n  desc->next = NULL;\n  if (hwloc_plugins_verbose)\n    fprintf(stderr, \"Plugin descriptor `%s' ready\\n\", basename);\n\n  /* append to the list */\n  prevdesc = &hwloc_plugins;\n  while (*prevdesc)\n    prevdesc = &((*prevdesc)->next);\n  *prevdesc = desc;\n  if (hwloc_plugins_verbose)\n    fprintf(stderr, \"Plugin descriptor `%s' queued\\n\", basename);\n  return 0;\n\n out_with_handle:\n  hwloc_dlclose(handle);\n out:\n  return 0;\n}\n\nstatic void\nhwloc_plugins_exit(void)\n{\n  struct hwloc__plugin_desc *desc, *next;\n\n  if (hwloc_plugins_verbose)\n    fprintf(stderr, \"Closing all plugins\\n\");\n\n  desc = hwloc_plugins;\n  while (desc) {\n    next = desc->next;\n    hwloc_dlclose(desc->handle);\n    free(desc->name);\n    free(desc->filename);\n    free(desc);\n    desc = next;\n  }\n  hwloc_plugins = NULL;\n\n  hwloc_dlexit();\n}\n\nstatic int\nhwloc_plugins_init(void)\n{\n  const char *verboseenv;\n  const char *path = HWLOC_PLUGINS_PATH;\n  const char *env;\n  int err;\n\n  verboseenv = getenv(\"HWLOC_PLUGINS_VERBOSE\");\n  hwloc_plugins_verbose = verboseenv ? atoi(verboseenv) : 0;\n\n  hwloc_plugins_blacklist = getenv(\"HWLOC_PLUGINS_BLACKLIST\");\n\n  err = hwloc_dlinit();\n  if (err)\n    goto out;\n\n  env = getenv(\"HWLOC_PLUGINS_PATH\");\n  if (env)\n    path = env;\n\n  hwloc_plugins = NULL;\n\n  if (hwloc_plugins_verbose)\n    fprintf(stderr, \"Starting plugin dlforeach in %s\\n\", path);\n  err = hwloc_dlforeachfile(path, hwloc__dlforeach_cb, NULL);\n  if (err)\n    goto out_with_init;\n\n  return 0;\n\n out_with_init:\n  hwloc_plugins_exit();\n out:\n  return -1;\n}\n\n#endif /* HWLOC_HAVE_PLUGINS */\n\nstatic int\nhwloc_disc_component_register(struct hwloc_disc_component *component,\n\t\t\t      const char *filename)\n{\n  struct hwloc_disc_component **prev;\n\n  /* check that the component name is valid */\n  if (!strcmp(component->name, HWLOC_COMPONENT_STOP_NAME)) {\n    if (hwloc_components_verbose)\n      fprintf(stderr, \"Cannot register discovery component with reserved name `\" HWLOC_COMPONENT_STOP_NAME \"'\\n\");\n    return -1;\n  }\n  if (strchr(component->name, HWLOC_COMPONENT_EXCLUDE_CHAR)\n      || strchr(component->name, HWLOC_COMPONENT_PHASESEP_CHAR)\n      || strcspn(component->name, HWLOC_COMPONENT_SEPS) != strlen(component->name)) {\n    if (hwloc_components_verbose)\n      fprintf(stderr, \"Cannot register discovery component with name `%s' containing reserved characters `%c\" HWLOC_COMPONENT_SEPS \"'\\n\",\n\t      component->name, HWLOC_COMPONENT_EXCLUDE_CHAR);\n    return -1;\n  }\n\n  /* check that the component phases are valid */\n  if (!component->phases\n      || (component->phases != HWLOC_DISC_PHASE_GLOBAL\n\t  && component->phases & ~(HWLOC_DISC_PHASE_CPU\n\t\t\t\t   |HWLOC_DISC_PHASE_MEMORY\n\t\t\t\t   |HWLOC_DISC_PHASE_PCI\n\t\t\t\t   |HWLOC_DISC_PHASE_IO\n\t\t\t\t   |HWLOC_DISC_PHASE_MISC\n\t\t\t\t   |HWLOC_DISC_PHASE_ANNOTATE\n\t\t\t\t   |HWLOC_DISC_PHASE_TWEAK))) {\n    fprintf(stderr, \"Cannot register discovery component `%s' with invalid phases 0x%x\\n\",\n\t    component->name, component->phases);\n    return -1;\n  }\n\n  prev = &hwloc_disc_components;\n  while (NULL != *prev) {\n    if (!strcmp((*prev)->name, component->name)) {\n      /* if two components have the same name, only keep the highest priority one */\n      if ((*prev)->priority < component->priority) {\n\t/* drop the existing component */\n\tif (hwloc_components_verbose)\n\t  fprintf(stderr, \"Dropping previously registered discovery component `%s', priority %u lower than new one %u\\n\",\n\t\t  (*prev)->name, (*prev)->priority, component->priority);\n\t*prev = (*prev)->next;\n      } else {\n\t/* drop the new one */\n\tif (hwloc_components_verbose)\n\t  fprintf(stderr, \"Ignoring new discovery component `%s', priority %u lower than previously registered one %u\\n\",\n\t\t  component->name, component->priority, (*prev)->priority);\n\treturn -1;\n      }\n    }\n    prev = &((*prev)->next);\n  }\n  if (hwloc_components_verbose)\n    fprintf(stderr, \"Registered discovery component `%s' phases 0x%x with priority %u (%s%s)\\n\",\n\t    component->name, component->phases, component->priority,\n\t    filename ? \"from plugin \" : \"statically build\", filename ? filename : \"\");\n\n  prev = &hwloc_disc_components;\n  while (NULL != *prev) {\n    if ((*prev)->priority < component->priority)\n      break;\n    prev = &((*prev)->next);\n  }\n  component->next = *prev;\n  *prev = component;\n  return 0;\n}\n\n#include \"static-components.h\"\n\nstatic void (**hwloc_component_finalize_cbs)(unsigned long);\nstatic unsigned hwloc_component_finalize_cb_count;\n\nvoid\nhwloc_components_init(void)\n{\n#ifdef HWLOC_HAVE_PLUGINS\n  struct hwloc__plugin_desc *desc;\n#endif\n  const char *verboseenv;\n  unsigned i;\n\n  HWLOC_COMPONENTS_LOCK();\n  assert((unsigned) -1 != hwloc_components_users);\n  if (0 != hwloc_components_users++) {\n    HWLOC_COMPONENTS_UNLOCK();\n    return;\n  }\n\n  verboseenv = getenv(\"HWLOC_COMPONENTS_VERBOSE\");\n  hwloc_components_verbose = verboseenv ? atoi(verboseenv) : 0;\n\n#ifdef HWLOC_HAVE_PLUGINS\n  hwloc_plugins_init();\n#endif\n\n  hwloc_component_finalize_cbs = NULL;\n  hwloc_component_finalize_cb_count = 0;\n  /* count the max number of finalize callbacks */\n  for(i=0; NULL != hwloc_static_components[i]; i++)\n    hwloc_component_finalize_cb_count++;\n#ifdef HWLOC_HAVE_PLUGINS\n  for(desc = hwloc_plugins; NULL != desc; desc = desc->next)\n    hwloc_component_finalize_cb_count++;\n#endif\n  if (hwloc_component_finalize_cb_count) {\n    hwloc_component_finalize_cbs = calloc(hwloc_component_finalize_cb_count,\n\t\t\t\t\t  sizeof(*hwloc_component_finalize_cbs));\n    assert(hwloc_component_finalize_cbs);\n    /* forget that max number and recompute the real one below */\n    hwloc_component_finalize_cb_count = 0;\n  }\n\n  /* hwloc_static_components is created by configure in static-components.h */\n  for(i=0; NULL != hwloc_static_components[i]; i++) {\n    if (hwloc_static_components[i]->flags) {\n      fprintf(stderr, \"Ignoring static component with invalid flags %lx\\n\",\n\t      hwloc_static_components[i]->flags);\n      continue;\n    }\n\n    /* initialize the component */\n    if (hwloc_static_components[i]->init && hwloc_static_components[i]->init(0) < 0) {\n      if (hwloc_components_verbose)\n\tfprintf(stderr, \"Ignoring static component, failed to initialize\\n\");\n      continue;\n    }\n    /* queue ->finalize() callback if any */\n    if (hwloc_static_components[i]->finalize)\n      hwloc_component_finalize_cbs[hwloc_component_finalize_cb_count++] = hwloc_static_components[i]->finalize;\n\n    /* register for real now */\n    if (HWLOC_COMPONENT_TYPE_DISC == hwloc_static_components[i]->type)\n      hwloc_disc_component_register(hwloc_static_components[i]->data, NULL);\n    else if (HWLOC_COMPONENT_TYPE_XML == hwloc_static_components[i]->type)\n      hwloc_xml_callbacks_register(hwloc_static_components[i]->data);\n    else\n      assert(0);\n  }\n\n  /* dynamic plugins */\n#ifdef HWLOC_HAVE_PLUGINS\n  for(desc = hwloc_plugins; NULL != desc; desc = desc->next) {\n    if (desc->component->flags) {\n      fprintf(stderr, \"Ignoring plugin `%s' component with invalid flags %lx\\n\",\n\t      desc->name, desc->component->flags);\n      continue;\n    }\n\n    /* initialize the component */\n    if (desc->component->init && desc->component->init(0) < 0) {\n      if (hwloc_components_verbose)\n\tfprintf(stderr, \"Ignoring plugin `%s', failed to initialize\\n\", desc->name);\n      continue;\n    }\n    /* queue ->finalize() callback if any */\n    if (desc->component->finalize)\n      hwloc_component_finalize_cbs[hwloc_component_finalize_cb_count++] = desc->component->finalize;\n\n    /* register for real now */\n    if (HWLOC_COMPONENT_TYPE_DISC == desc->component->type)\n      hwloc_disc_component_register(desc->component->data, desc->filename);\n    else if (HWLOC_COMPONENT_TYPE_XML == desc->component->type)\n      hwloc_xml_callbacks_register(desc->component->data);\n    else\n      assert(0);\n  }\n#endif\n\n  HWLOC_COMPONENTS_UNLOCK();\n}\n\nvoid\nhwloc_topology_components_init(struct hwloc_topology *topology)\n{\n  topology->nr_blacklisted_components = 0;\n  topology->blacklisted_components = NULL;\n\n  topology->backends = NULL;\n  topology->backend_phases = 0;\n  topology->backend_excluded_phases = 0;\n}\n\n/* look for name among components, ignoring things after `:' */\nstatic struct hwloc_disc_component *\nhwloc_disc_component_find(const char *name, const char **endp)\n{\n  struct hwloc_disc_component *comp;\n  size_t length;\n  const char *end = strchr(name, HWLOC_COMPONENT_PHASESEP_CHAR);\n  if (end) {\n    length = end-name;\n    if (endp)\n      *endp = end+1;\n  } else {\n    length = strlen(name);\n    if (endp)\n      *endp = NULL;\n  }\n\n  comp = hwloc_disc_components;\n  while (NULL != comp) {\n    if (!strncmp(name, comp->name, length))\n      return comp;\n    comp = comp->next;\n  }\n  return NULL;\n}\n\nstatic unsigned\nhwloc_phases_from_string(const char *s)\n{\n  if (!s)\n    return ~0U;\n  if (s[0]<'0' || s[0]>'9') {\n    if (!strcasecmp(s, \"global\"))\n      return HWLOC_DISC_PHASE_GLOBAL;\n    else if (!strcasecmp(s, \"cpu\"))\n      return HWLOC_DISC_PHASE_CPU;\n    if (!strcasecmp(s, \"memory\"))\n      return HWLOC_DISC_PHASE_MEMORY;\n    if (!strcasecmp(s, \"pci\"))\n      return HWLOC_DISC_PHASE_PCI;\n    if (!strcasecmp(s, \"io\"))\n      return HWLOC_DISC_PHASE_IO;\n    if (!strcasecmp(s, \"misc\"))\n      return HWLOC_DISC_PHASE_MISC;\n    if (!strcasecmp(s, \"annotate\"))\n      return HWLOC_DISC_PHASE_ANNOTATE;\n    if (!strcasecmp(s, \"tweak\"))\n      return HWLOC_DISC_PHASE_TWEAK;\n    return 0;\n  }\n  return (unsigned) strtoul(s, NULL, 0);\n}\n\nstatic int\nhwloc_disc_component_blacklist_one(struct hwloc_topology *topology,\n\t\t\t\t   const char *name)\n{\n  struct hwloc_topology_forced_component_s *blacklisted;\n  struct hwloc_disc_component *comp;\n  unsigned phases;\n  unsigned i;\n\n  if (!strcmp(name, \"linuxpci\") || !strcmp(name, \"linuxio\")) {\n    /* replace linuxpci and linuxio with linux (with IO phases)\n     * for backward compatibility with pre-v2.0 and v2.0 respectively */\n    if (hwloc_components_verbose)\n      fprintf(stderr, \"Replacing deprecated component `%s' with `linux' IO phases in blacklisting\\n\", name);\n    comp = hwloc_disc_component_find(\"linux\", NULL);\n    phases = HWLOC_DISC_PHASE_PCI | HWLOC_DISC_PHASE_IO | HWLOC_DISC_PHASE_MISC | HWLOC_DISC_PHASE_ANNOTATE;\n\n  } else {\n    /* normal lookup */\n    const char *end;\n    comp = hwloc_disc_component_find(name, &end);\n    phases = hwloc_phases_from_string(end);\n  }\n  if (!comp) {\n    errno = EINVAL;\n    return -1;\n  }\n\n  if (hwloc_components_verbose)\n    fprintf(stderr, \"Blacklisting component `%s` phases 0x%x\\n\", comp->name, phases);\n\n  for(i=0; i<topology->nr_blacklisted_components; i++) {\n    if (topology->blacklisted_components[i].component == comp) {\n      topology->blacklisted_components[i].phases |= phases;\n      return 0;\n    }\n  }\n\n  blacklisted = realloc(topology->blacklisted_components, (topology->nr_blacklisted_components+1)*sizeof(*blacklisted));\n  if (!blacklisted)\n    return -1;\n\n  blacklisted[topology->nr_blacklisted_components].component = comp;\n  blacklisted[topology->nr_blacklisted_components].phases = phases;\n  topology->blacklisted_components = blacklisted;\n  topology->nr_blacklisted_components++;\n  return 0;\n}\n\nint\nhwloc_topology_set_components(struct hwloc_topology *topology,\n\t\t\t      unsigned long flags,\n\t\t\t      const char *name)\n{\n  if (topology->is_loaded) {\n    errno = EBUSY;\n    return -1;\n  }\n\n  if (flags & ~HWLOC_TOPOLOGY_COMPONENTS_FLAG_BLACKLIST) {\n    errno = EINVAL;\n    return -1;\n  }\n\n  /* this flag is strictly required for now */\n  if (flags != HWLOC_TOPOLOGY_COMPONENTS_FLAG_BLACKLIST) {\n    errno = EINVAL;\n    return -1;\n  }\n\n  if (!strncmp(name, \"all\", 3) && name[3] == HWLOC_COMPONENT_PHASESEP_CHAR) {\n    topology->backend_excluded_phases = hwloc_phases_from_string(name+4);\n    return 0;\n  }\n\n  return hwloc_disc_component_blacklist_one(topology, name);\n}\n\n/* used by set_xml(), set_synthetic(), ... environment variables, ... to force the first backend */\nint\nhwloc_disc_component_force_enable(struct hwloc_topology *topology,\n\t\t\t\t  int envvar_forced,\n\t\t\t\t  const char *name,\n\t\t\t\t  const void *data1, const void *data2, const void *data3)\n{\n  struct hwloc_disc_component *comp;\n  struct hwloc_backend *backend;\n\n  if (topology->is_loaded) {\n    errno = EBUSY;\n    return -1;\n  }\n\n  comp = hwloc_disc_component_find(name, NULL);\n  if (!comp) {\n    errno = ENOSYS;\n    return -1;\n  }\n\n  backend = comp->instantiate(topology, comp, 0U /* force-enabled don't get any phase blacklisting */,\n\t\t\t      data1, data2, data3);\n  if (backend) {\n    int err;\n    backend->envvar_forced = envvar_forced;\n    if (topology->backends)\n      hwloc_backends_disable_all(topology);\n    err = hwloc_backend_enable(backend);\n\n    if (comp->phases == HWLOC_DISC_PHASE_GLOBAL) {\n      char *env = getenv(\"HWLOC_ANNOTATE_GLOBAL_COMPONENTS\");\n      if (env && atoi(env))\n\ttopology->backend_excluded_phases &= ~HWLOC_DISC_PHASE_ANNOTATE;\n    }\n\n    return err;\n  } else\n    return -1;\n}\n\nstatic int\nhwloc_disc_component_try_enable(struct hwloc_topology *topology,\n\t\t\t\tstruct hwloc_disc_component *comp,\n\t\t\t\tint envvar_forced,\n\t\t\t\tunsigned blacklisted_phases)\n{\n  struct hwloc_backend *backend;\n\n  if (!(comp->phases & ~(topology->backend_excluded_phases | blacklisted_phases))) {\n    /* all this backend phases are already excluded, exclude the backend entirely */\n    if (hwloc_components_verbose)\n      /* do not warn if envvar_forced since system-wide HWLOC_COMPONENTS must be silently ignored after set_xml() etc.\n       */\n      fprintf(stderr, \"Excluding discovery component `%s' phases 0x%x, conflicts with excludes 0x%x\\n\",\n\t      comp->name, comp->phases, topology->backend_excluded_phases);\n    return -1;\n  }\n\n  backend = comp->instantiate(topology, comp, topology->backend_excluded_phases | blacklisted_phases,\n\t\t\t      NULL, NULL, NULL);\n  if (!backend) {\n    if (hwloc_components_verbose || envvar_forced)\n      fprintf(stderr, \"Failed to instantiate discovery component `%s'\\n\", comp->name);\n    return -1;\n  }\n\n  backend->phases &= ~blacklisted_phases;\n  backend->envvar_forced = envvar_forced;\n  return hwloc_backend_enable(backend);\n}\n\nvoid\nhwloc_disc_components_enable_others(struct hwloc_topology *topology)\n{\n  struct hwloc_disc_component *comp;\n  struct hwloc_backend *backend;\n  int tryall = 1;\n  const char *_env;\n  char *env; /* we'll to modify the env value, so duplicate it */\n  unsigned i;\n\n  _env = getenv(\"HWLOC_COMPONENTS\");\n  env = _env ? strdup(_env) : NULL;\n\n  /* blacklist disabled components */\n  if (env) {\n    char *curenv = env;\n    size_t s;\n\n    while (*curenv) {\n      s = strcspn(curenv, HWLOC_COMPONENT_SEPS);\n      if (s) {\n\tchar c;\n\n\tif (curenv[0] != HWLOC_COMPONENT_EXCLUDE_CHAR)\n\t  goto nextname;\n\n\t/* save the last char and replace with \\0 */\n\tc = curenv[s];\n\tcurenv[s] = '\\0';\n\n\t/* blacklist it, and just ignore failures to allocate */\n\thwloc_disc_component_blacklist_one(topology, curenv+1);\n\n\t/* remove that blacklisted name from the string */\n\tfor(i=0; i<s; i++)\n\t  curenv[i] = *HWLOC_COMPONENT_SEPS;\n\n\t/* restore chars (the second loop below needs env to be unmodified) */\n\tcurenv[s] = c;\n      }\n\n    nextname:\n      curenv += s;\n      if (*curenv)\n\t/* Skip comma */\n\tcurenv++;\n    }\n  }\n\n  /* enable explicitly listed components */\n  if (env) {\n    char *curenv = env;\n    size_t s;\n\n    while (*curenv) {\n      s = strcspn(curenv, HWLOC_COMPONENT_SEPS);\n      if (s) {\n\tchar c;\n\tconst char *name;\n\n\tif (!strncmp(curenv, HWLOC_COMPONENT_STOP_NAME, s)) {\n\t  tryall = 0;\n\t  break;\n\t}\n\n\t/* save the last char and replace with \\0 */\n\tc = curenv[s];\n\tcurenv[s] = '\\0';\n\n\tname = curenv;\n\tif (!strcmp(name, \"linuxpci\") || !strcmp(name, \"linuxio\")) {\n\t  if (hwloc_components_verbose)\n\t    fprintf(stderr, \"Replacing deprecated component `%s' with `linux' in envvar forcing\\n\", name);\n\t  name = \"linux\";\n\t}\n\n\tcomp = hwloc_disc_component_find(name, NULL /* we enable the entire component, phases must be blacklisted separately */);\n\tif (comp) {\n\t  unsigned blacklisted_phases = 0U;\n\t  for(i=0; i<topology->nr_blacklisted_components; i++)\n\t    if (comp == topology->blacklisted_components[i].component) {\n\t      blacklisted_phases = topology->blacklisted_components[i].phases;\n\t      break;\n\t    }\n\t  if (comp->phases & ~blacklisted_phases)\n\t    hwloc_disc_component_try_enable(topology, comp, 1 /* envvar forced */, blacklisted_phases);\n\t} else {\n\t  fprintf(stderr, \"Cannot find discovery component `%s'\\n\", name);\n\t}\n\n\t/* restore chars (the second loop below needs env to be unmodified) */\n\tcurenv[s] = c;\n      }\n\n      curenv += s;\n      if (*curenv)\n\t/* Skip comma */\n\tcurenv++;\n    }\n  }\n\n  /* env is still the same, the above loop didn't modify it */\n\n  /* now enable remaining components (except the explicitly '-'-listed ones) */\n  if (tryall) {\n    comp = hwloc_disc_components;\n    while (NULL != comp) {\n      unsigned blacklisted_phases = 0U;\n      if (!comp->enabled_by_default)\n\tgoto nextcomp;\n      /* check if this component was blacklisted by the application */\n      for(i=0; i<topology->nr_blacklisted_components; i++)\n\tif (comp == topology->blacklisted_components[i].component) {\n\t  blacklisted_phases = topology->blacklisted_components[i].phases;\n\t  break;\n\t}\n\n      if (!(comp->phases & ~blacklisted_phases)) {\n\tif (hwloc_components_verbose)\n\t  fprintf(stderr, \"Excluding blacklisted discovery component `%s' phases 0x%x\\n\",\n\t\t  comp->name, comp->phases);\n\tgoto nextcomp;\n      }\n\n      hwloc_disc_component_try_enable(topology, comp, 0 /* defaults, not envvar forced */, blacklisted_phases);\nnextcomp:\n      comp = comp->next;\n    }\n  }\n\n  if (hwloc_components_verbose) {\n    /* print a summary */\n    int first = 1;\n    backend = topology->backends;\n    fprintf(stderr, \"Final list of enabled discovery components: \");\n    while (backend != NULL) {\n      fprintf(stderr, \"%s%s(0x%x)\", first ? \"\" : \",\", backend->component->name, backend->phases);\n      backend = backend->next;\n      first = 0;\n    }\n    fprintf(stderr, \"\\n\");\n  }\n\n  free(env);\n}\n\nvoid\nhwloc_components_fini(void)\n{\n  unsigned i;\n\n  HWLOC_COMPONENTS_LOCK();\n  assert(0 != hwloc_components_users);\n  if (0 != --hwloc_components_users) {\n    HWLOC_COMPONENTS_UNLOCK();\n    return;\n  }\n\n  for(i=0; i<hwloc_component_finalize_cb_count; i++)\n    hwloc_component_finalize_cbs[hwloc_component_finalize_cb_count-i-1](0);\n  free(hwloc_component_finalize_cbs);\n  hwloc_component_finalize_cbs = NULL;\n  hwloc_component_finalize_cb_count = 0;\n\n  /* no need to unlink/free the list of components, they'll be unloaded below */\n\n  hwloc_disc_components = NULL;\n  hwloc_xml_callbacks_reset();\n\n#ifdef HWLOC_HAVE_PLUGINS\n  hwloc_plugins_exit();\n#endif\n\n  HWLOC_COMPONENTS_UNLOCK();\n}\n\nstruct hwloc_backend *\nhwloc_backend_alloc(struct hwloc_topology *topology,\n\t\t    struct hwloc_disc_component *component)\n{\n  struct hwloc_backend * backend = malloc(sizeof(*backend));\n  if (!backend) {\n    errno = ENOMEM;\n    return NULL;\n  }\n  backend->component = component;\n  backend->topology = topology;\n  /* filter-out component phases that are excluded */\n  backend->phases = component->phases & ~topology->backend_excluded_phases;\n  if (backend->phases != component->phases && hwloc_components_verbose)\n    fprintf(stderr, \"Trying discovery component `%s' with phases 0x%x instead of 0x%x\\n\",\n\t    component->name, backend->phases, component->phases);\n  backend->flags = 0;\n  backend->discover = NULL;\n  backend->get_pci_busid_cpuset = NULL;\n  backend->disable = NULL;\n  backend->is_thissystem = -1;\n  backend->next = NULL;\n  backend->envvar_forced = 0;\n  return backend;\n}\n\nstatic void\nhwloc_backend_disable(struct hwloc_backend *backend)\n{\n  if (backend->disable)\n    backend->disable(backend);\n  free(backend);\n}\n\nint\nhwloc_backend_enable(struct hwloc_backend *backend)\n{\n  struct hwloc_topology *topology = backend->topology;\n  struct hwloc_backend **pprev;\n\n  /* check backend flags */\n  if (backend->flags) {\n    fprintf(stderr, \"Cannot enable discovery component `%s' phases 0x%x with unknown flags %lx\\n\",\n\t    backend->component->name, backend->component->phases, backend->flags);\n    return -1;\n  }\n\n  /* make sure we didn't already enable this backend, we don't want duplicates */\n  pprev = &topology->backends;\n  while (NULL != *pprev) {\n    if ((*pprev)->component == backend->component) {\n      if (hwloc_components_verbose)\n\tfprintf(stderr, \"Cannot enable  discovery component `%s' phases 0x%x twice\\n\",\n\t\tbackend->component->name, backend->component->phases);\n      hwloc_backend_disable(backend);\n      errno = EBUSY;\n      return -1;\n    }\n    pprev = &((*pprev)->next);\n  }\n\n  if (hwloc_components_verbose)\n    fprintf(stderr, \"Enabling discovery component `%s' with phases 0x%x (among 0x%x)\\n\",\n\t    backend->component->name, backend->phases, backend->component->phases);\n\n  /* enqueue at the end */\n  pprev = &topology->backends;\n  while (NULL != *pprev)\n    pprev = &((*pprev)->next);\n  backend->next = *pprev;\n  *pprev = backend;\n\n  topology->backend_phases |= backend->component->phases;\n  topology->backend_excluded_phases |= backend->component->excluded_phases;\n  return 0;\n}\n\nvoid\nhwloc_backends_is_thissystem(struct hwloc_topology *topology)\n{\n  struct hwloc_backend *backend;\n  const char *local_env;\n\n  /*\n   * If the application changed the backend with set_foo(),\n   * it may use set_flags() update the is_thissystem flag here.\n   * If it changes the backend with environment variables below,\n   * it may use HWLOC_THISSYSTEM envvar below as well.\n   */\n\n  topology->is_thissystem = 1;\n\n  /* apply thissystem from normally-given backends (envvar_forced=0, either set_foo() or defaults) */\n  backend = topology->backends;\n  while (backend != NULL) {\n    if (backend->envvar_forced == 0 && backend->is_thissystem != -1) {\n      assert(backend->is_thissystem == 0);\n      topology->is_thissystem = 0;\n    }\n    backend = backend->next;\n  }\n\n  /* override set_foo() with flags */\n  if (topology->flags & HWLOC_TOPOLOGY_FLAG_IS_THISSYSTEM)\n    topology->is_thissystem = 1;\n\n  /* now apply envvar-forced backend (envvar_forced=1) */\n  backend = topology->backends;\n  while (backend != NULL) {\n    if (backend->envvar_forced == 1 && backend->is_thissystem != -1) {\n      assert(backend->is_thissystem == 0);\n      topology->is_thissystem = 0;\n    }\n    backend = backend->next;\n  }\n\n  /* override with envvar-given flag */\n  local_env = getenv(\"HWLOC_THISSYSTEM\");\n  if (local_env)\n    topology->is_thissystem = atoi(local_env);\n}\n\nvoid\nhwloc_backends_find_callbacks(struct hwloc_topology *topology)\n{\n  struct hwloc_backend *backend = topology->backends;\n  /* use the first backend's get_pci_busid_cpuset callback */\n  topology->get_pci_busid_cpuset_backend = NULL;\n  while (backend != NULL) {\n    if (backend->get_pci_busid_cpuset) {\n      topology->get_pci_busid_cpuset_backend = backend;\n      return;\n    }\n    backend = backend->next;\n  }\n  return;\n}\n\nvoid\nhwloc_backends_disable_all(struct hwloc_topology *topology)\n{\n  struct hwloc_backend *backend;\n\n  while (NULL != (backend = topology->backends)) {\n    struct hwloc_backend *next = backend->next;\n    if (hwloc_components_verbose)\n      fprintf(stderr, \"Disabling discovery component `%s'\\n\",\n\t      backend->component->name);\n    hwloc_backend_disable(backend);\n    topology->backends = next;\n  }\n  topology->backends = NULL;\n  topology->backend_excluded_phases = 0;\n}\n\nvoid\nhwloc_topology_components_fini(struct hwloc_topology *topology)\n{\n  /* hwloc_backends_disable_all() must have been called earlier */\n  assert(!topology->backends);\n\n  free(topology->blacklisted_components);\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/contrib/hwloc-valgrind.supp": "# Copyright \u00a9 2012-2018 Inria.  All rights reserved.\n# See COPYING in top-level directory.\n\n# suppressions file to be passed to valgrind with\n#   --suppressions=/path/to/hwloc-valgrind.supp\n\n# zlib (brought by libpci or libxml2) doesn't cleanup its global state\n{\n   inflate_init\n   Memcheck:Cond\n   fun:inflateReset2\n   fun:inflateInit2_\n}\n\n# hwloc cannot free the global parser (with xmlCleanupParser()) because other threads may be using it\n{\n   xml_init_parser\n   Memcheck:Leak\n   ...\n   fun:xmlInitParser\n}\n\n# hwloc cannot free the global xml dict RMutex because it cannot call xmlCleanupParser() as explained above\n{\n   xml_dict_create_new_rmutex\n   Memcheck:Leak\n   fun:malloc\n   fun:xmlNewRMutex\n   ...\n   fun:xmlDictCreate\n}\n\n# ltdl dlopen global state?\n{\n   ltdl_dlopen_doit_leak\n   Memcheck:Leak\n   ...\n   fun:dl_open_worker\n   fun:_dl_catch_error\n   fun:_dl_open\n   fun:dlopen_doit\n}\n\n# ltdl_dlclose_leak\n{\n   ltdl_dlclose_leak\n   Memcheck:Leak\n   ...\n   fun:_dl_close_worker\n   fun:_dl_close\n   ...\n   fun:dlclose\n}\n\n# lt_dlforeachfile abusing paths\n{\n   lt_dlforeachfile_addr8\n   Memcheck:Addr8\n   fun:_wordcopy_fwd_dest_aligned\n   fun:__GI_memmove\n   fun:argz_insert\n   ...\n   fun:lt_dlforeachfile\n}\n\n# cuda\n{\n   cuda_leak\n   Memcheck:Leak\n   ...\n   obj:*libcuda*\n}\n\n# nvml\n{\n   nvmlInit_cond\n   Memcheck:Cond\n   ...\n   obj:*nvidia-ml*\n   ...\n   fun:nvmlInit\n}\n\n# amd opencl\n{\n   atical_leak\n   Memcheck:Leak\n   ...\n   obj:*libatical*\n}\n{\n   atical_cond\n   Memcheck:Cond\n   ...\n   obj:*libatical*\n}\n{\n   amdocl_leak\n   Memcheck:Leak\n   ...\n   obj:*libamdocl*\n}\n{\n   amdocl_param\n   Memcheck:Param\n   write(buf)\n   fun:*write*\n   obj:*libamdocl*\n}\n{\n   opencl_leak\n   Memcheck:Leak\n   ...\n   obj:*libOpenCL*\n   ...\n   fun:clGetPlatformIDs\n}\n{\n   libatiadl_xcb_leak\n   Memcheck:Leak\n   ...\n   obj:*libxcb*\n   ...\n   fun:XOpenDisplay\n   ...\n   obj:*libatiadl*\n}\n\n#  libpciaccess global state leak\n{\n   libpciaccess_device_name_leak\n   Memcheck:Leak\n   ...\n   fun:pci_device_get_device_name\n   fun:hwloc_look_pci\n}\n{\n   libpciaccess_leak\n   Memcheck:Leak\n   ...\n   obj:*libpciaccess*\n   ...\n   fun:hwloc_look_pci\n}\n\n# libudev global hashes\n{\n   libudev_hashmap_property\n   Memcheck:Leak\n   fun:malloc\n   ...\n   fun:udev_device_get_property_value\n}\n{\n   libudev_hashmap_sysname\n   Memcheck:Leak\n   fun:malloc\n   ...\n   fun:udev_device_new_from_subsystem_sysname\n}\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/doc/hwloc.doxy": "/*\n * Copyright \u00a9 2009 CNRS\n * Copyright \u00a9 2009-2021 Inria.  All rights reserved.\n * Copyright \u00a9 2009-2013 Universit\u00e9 Bordeaux\n * Copyright \u00a9 2009-2020 Cisco Systems, Inc.  All rights reserved.\n * Copyright \u00a9 2020 Hewlett Packard Enterprise.  All rights reserved.\n * See COPYING in top-level directory.\n */\n\n/*! \\page hwloc_intro Hardware Locality (hwloc) Introduction\n\n<h1 class=\"sub\">Portable abstraction of hierarchical architectures for high-performance computing</h1>\n\n<hr>\n\n\\htmlonly\n<div class=\"section\">\n\\endhtmlonly\nSee also \\ref further_reading\n\\htmlonly\nor the Related pages tab above\n\\endhtmlonly\nfor links to more sections about hwloc concepts.\n\\htmlonly\n</div>\n\\endhtmlonly\n\n\\htmlonly\n<div class=\"section\" id=\"hwloc_summary\">\n\\endhtmlonly\n\\section hwloc_summary hwloc Summary\n\nhwloc provides command line tools and a C API to obtain the\nhierarchical map of key computing elements within a node, such as: NUMA memory\nnodes, shared caches, processor packages, dies and cores,\nprocessing units (logical processors or \"threads\")\nand even I/O devices.\nhwloc also gathers various attributes such as\ncache and memory information, and is portable across a variety of\ndifferent operating systems and platforms.\n\nhwloc primarily aims at helping high-performance computing (HPC)\napplications, but is also applicable to any project seeking to exploit\ncode and/or data locality on modern computing platforms.\n\nhwloc supports the following operating systems:\n\n<ul>\n<li>Linux (including old kernels not having sysfs topology\ninformation, with knowledge of cpusets, ScaleMP vSMP support, etc.)\non all supported hardware, including Intel Xeon Phi\nand NumaScale NumaConnect.</li>\n<li>Solaris (with support for processor sets and logical domains)</li>\n<li>AIX</li>\n<li>Darwin / OS X</li>\n<li>FreeBSD and its variants (such as kFreeBSD/GNU)</li>\n<li>NetBSD</li>\n<li>HP-UX</li>\n<li>Microsoft Windows</li>\n<li>IBM BlueGene/Q Compute Node Kernel (CNK)</li>\n</ul>\n\nSince it uses standard Operating System information, hwloc's support is mostly\nindependant from the processor type (x86, powerpc, ...) and just relies on the\nOperating System support. The main exception is BSD operating systems (NetBSD, FreeBSD, etc.)\nbecause they do not provide support topology information, hence hwloc uses an x86-only CPUID-based\nbackend (which can be used for other OSes too, see the \\ref plugins section).\n\nTo check whether hwloc works on a particular machine, just try to build it\nand run <tt>lstopo</tt> or <tt>lstopo-no-graphics</tt>. If some things do not look right\n(e.g. bogus or missing cache information), see \\ref bugs.\n\nhwloc only reports the number of processors on unsupported operating\nsystems; no topology information is available.\n\nFor development and debugging purposes, hwloc also offers the ability to\nwork on \"fake\" topologies:\n\n<ul>\n  <li> Symmetrical tree of resources generated from a list of level arities,\n  see \\ref synthetic.</li>\n  <li> Remote machine simulation through the gathering of topology as XML files,\n  see \\ref xml.</li>\n</ul>\n\nhwloc can display the topology in a human-readable format, either in\ngraphical mode (X11), or by exporting in one of several different\nformats, including: plain text, LaTeX tikzpicture, PDF, PNG, and FIG (see \\ref cli_examples\nbelow).  Note that some of the export formats require additional\nsupport libraries.\n\nhwloc offers a programming interface for manipulating topologies and\nobjects. It also brings a powerful CPU bitmap API that is used to\ndescribe topology objects location on physical/logical processors. See\nthe \\ref interface below. It may also be used to binding applications\nonto certain cores or memory nodes. Several utility programs are also\nprovided to ease command-line manipulation of topology objects,\nbinding of processes, and so on.\n\nPerl bindings are available from Bernd Kallies on\n<a href=http://search.cpan.org/~bka/Sys-Hwloc-0.10/>CPAN</a>.\n\nPython bindings are available from Guy Streeter:\n<ul>\n<li><a href=http://people.redhat.com/streeter/>Fedora RPM and tarball</a>.</li>\n<li><a href=git://git.fedorahosted.org/python-hwloc.git>git tree</a>\n(<a href=http://git.fedorahosted.org/git/python-hwloc.git>html</a>).</li>\n</ul>\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"hwloc_installation\">\n\\endhtmlonly\n\\section hwloc_installation hwloc Installation\n\nThe generic installation procedure for both hwloc and netloc\nis described in \\ref common_installation.\n\nThe hwloc command-line tool \"lstopo\" produces human-readable topology\nmaps, as mentioned above.  It can also export maps to the \"fig\" file\nformat.  Support for PDF, Postscript, and PNG exporting is provided if\nthe \"Cairo\" development package (usually <tt>cairo-devel</tt> or\n<tt>libcairo2-dev</tt>) can be found in \"lstopo\" when hwloc\nis configured and build.\n\nThe hwloc core may also benefit from the following development packages:\n<ul>\n<li>libpciaccess for full I/O device discovery\n    (<tt>libpciaccess-devel</tt> or <tt>libpciaccess-dev</tt> package).\n    On Linux, PCI discovery may still be performed (without vendor/device names)\n    even if libpciaccess cannot be used.\n</li>\n\n<li>AMD or NVIDIA OpenCL implementations for OpenCL device discovery.\n</li>\n<li>the NVIDIA CUDA Toolkit for CUDA device discovery.\n  It's installation path may be specified at configure time with <tt>--with-cuda=/path/to/cuda</tt>.\n</li>\n<li>the NVIDIA Management Library (NVML) for NVML device discovery.\n  It is included in CUDA since version 8.0.\n  Older NVML releases were available within the NVIDIA GPU Deployment Kit\n  from https://developer.nvidia.com/gpu-deployment-kit .\n</li>\n<li>the NV-CONTROL X extension library (NVCtrl) for NVIDIA display discovery.\n  The relevant development package is usually <tt>libXNVCtrl-devel</tt>\n  or <tt>libxnvctrl-dev</tt>.\n  It is also available within nvidia-settings from ftp://download.nvidia.com/XFree86/nvidia-settings/\n  and https://github.com/NVIDIA/nvidia-settings/ .\n</li>\n<li>the AMD ROCm SMI library for RSMI device discovery.\n  The relevant development package is usually <tt>rocm-smi-lib64</tt>\n  or <tt>librocm-smi-dev</tt>.\n</li>\n<li>libxml2 for full XML import/export support (otherwise, the\n    internal minimalistic parser will only be able to import\n    XML files that were exported by the same hwloc release).\n    See \\ref xml for details.\n    The relevant development package is usually <tt>libxml2-devel</tt>\n    or <tt>libxml2-dev</tt>.\n</li>\n<li>libudev on Linux for easier discovery of OS device information\n    (otherwise hwloc will try to manually parse udev raw files).\n    The relevant development package is usually <tt>libudev-devel</tt>\n    or <tt>libudev-dev</tt>.\n</li>\n<li>libtool's ltdl library for dynamic plugin loading if the native dlopen cannot be used.\n  The relevant development package is usually <tt>libtool-ltdl-devel</tt>\n  or <tt>libltdl-dev</tt>.\n</li>\n</ul>\n\nPCI and XML support may be statically built inside the main hwloc\nlibrary, or as separate dynamically-loaded plugins (see the\n\\ref plugins section).\n\nNote that because of the possibility of GPL taint, the\n<tt>pciutils</tt> library <tt>libpci</tt> will not be used (remember\nthat hwloc is BSD-licensed).\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"cli_examples\">\n\\endhtmlonly\n\\section cli_examples Command-line Examples\n\nOn a 4-package 2-core machine with hyper-threading, the \\c lstopo tool\nmay show the following graphical output:\n\n\\image html dudley.png\n\\image latex dudley.png \"\" width=\\textwidth\n\nHere's the equivalent output in textual form:\n\n\\verbatim\nMachine\n  NUMANode L#0 (P#0)\n  Package L#0 + L3 L#0 (4096KB)\n    L2 L#0 (1024KB) + L1 L#0 (16KB) + Core L#0\n      PU L#0 (P#0)\n      PU L#1 (P#8)\n    L2 L#1 (1024KB) + L1 L#1 (16KB) + Core L#1\n      PU L#2 (P#4)\n      PU L#3 (P#12)\n  Package L#1 + L3 L#1 (4096KB)\n    L2 L#2 (1024KB) + L1 L#2 (16KB) + Core L#2\n      PU L#4 (P#1)\n      PU L#5 (P#9)\n    L2 L#3 (1024KB) + L1 L#3 (16KB) + Core L#3\n      PU L#6 (P#5)\n      PU L#7 (P#13)\n  Package L#2 + L3 L#2 (4096KB)\n    L2 L#4 (1024KB) + L1 L#4 (16KB) + Core L#4\n      PU L#8 (P#2)\n      PU L#9 (P#10)\n    L2 L#5 (1024KB) + L1 L#5 (16KB) + Core L#5\n      PU L#10 (P#6)\n      PU L#11 (P#14)\n  Package L#3 + L3 L#3 (4096KB)\n    L2 L#6 (1024KB) + L1 L#6 (16KB) + Core L#6\n      PU L#12 (P#3)\n      PU L#13 (P#11)\n    L2 L#7 (1024KB) + L1 L#7 (16KB) + Core L#7\n      PU L#14 (P#7)\n      PU L#15 (P#15)\n\\endverbatim\n\nNote that there is also an equivalent output in XML that is meant for\nexporting/importing topologies but it is hardly readable to human-beings\n(see \\ref xml for details).\n\nOn a 4-package 2-core Opteron NUMA machine\n(with two core cores disallowed by the administrator),\nthe \\c lstopo tool may show the following graphical output\n(with <tt>\\--disallowed</tt> for displaying disallowed objects):\n\n\\image html hagrid.png\n\\image latex hagrid.png \"\" width=\\textwidth\n\nHere's the equivalent output in textual form:\n\n\\verbatim\nMachine (32GB total)\n  Package L#0\n    NUMANode L#0 (P#0 8190MB)\n    L2 L#0 (1024KB) + L1 L#0 (64KB) + Core L#0 + PU L#0 (P#0)\n    L2 L#1 (1024KB) + L1 L#1 (64KB) + Core L#1 + PU L#1 (P#1)\n  Package L#1\n    NUMANode L#1 (P#1 8192MB)\n    L2 L#2 (1024KB) + L1 L#2 (64KB) + Core L#2 + PU L#2 (P#2)\n    L2 L#3 (1024KB) + L1 L#3 (64KB) + Core L#3 + PU L#3 (P#3)\n  Package L#2\n    NUMANode L#2 (P#2 8192MB)\n    L2 L#4 (1024KB) + L1 L#4 (64KB) + Core L#4 + PU L#4 (P#4)\n    L2 L#5 (1024KB) + L1 L#5 (64KB) + Core L#5 + PU L#5 (P#5)\n  Package L#3\n    NUMANode L#3 (P#3 8192MB)\n    L2 L#6 (1024KB) + L1 L#6 (64KB) + Core L#6 + PU L#6 (P#6)\n    L2 L#7 (1024KB) + L1 L#7 (64KB) + Core L#7 + PU L#7 (P#7)\n\\endverbatim\n\nOn a 2-package quad-core Xeon (pre-Nehalem, with 2 dual-core dies into\neach package):\n\n\\image html emmett.png\n\\image latex emmett.png \"\" width=\\textwidth\n\nHere's the same output in textual form:\n\n\\verbatim\nMachine (total 16GB)\n  NUMANode L#0 (P#0 16GB)\n  Package L#0\n    L2 L#0 (4096KB)\n      L1 L#0 (32KB) + Core L#0 + PU L#0 (P#0)\n      L1 L#1 (32KB) + Core L#1 + PU L#1 (P#4)\n    L2 L#1 (4096KB)\n      L1 L#2 (32KB) + Core L#2 + PU L#2 (P#2)\n      L1 L#3 (32KB) + Core L#3 + PU L#3 (P#6)\n  Package L#1\n    L2 L#2 (4096KB)\n      L1 L#4 (32KB) + Core L#4 + PU L#4 (P#1)\n      L1 L#5 (32KB) + Core L#5 + PU L#5 (P#5)\n    L2 L#3 (4096KB)\n      L1 L#6 (32KB) + Core L#6 + PU L#6 (P#3)\n      L1 L#7 (32KB) + Core L#7 + PU L#7 (P#7)\n\\endverbatim\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"interface\">\n\\endhtmlonly\n\\section interface Programming Interface\n\nThe basic interface is available in hwloc.h.\nSome higher-level functions are available in hwloc/helper.h to reduce\nthe need to manually manipulate objects and follow links between them.\nDocumentation for all these is provided later in this document.\nDevelopers may also want to look at hwloc/inlines.h which contains the\nactual inline code of some hwloc.h routines, and at this document,\nwhich provides good higher-level topology traversal examples.\n\nTo precisely define the vocabulary used by hwloc, a \\ref termsanddefs\nsection is available and should probably be read first.  \n\nEach hwloc object contains a cpuset describing the list of processing\nunits that it contains.  These bitmaps may be used for\n\\ref hwlocality_cpubinding and \\ref hwlocality_membinding.\nhwloc offers an extensive\nbitmap manipulation interface in hwloc/bitmap.h.\n\nMoreover, hwloc also comes with additional helpers for\ninteroperability with several commonly used environments.\nSee the \\ref interoperability section for details.\n\nThe complete API documentation is available in a full set of HTML\npages, man pages, and self-contained PDF files (formatted for both\nboth US letter and A4 formats) in the source tarball in\ndoc/doxygen-doc/.  \n\n<strong>NOTE:</strong> If you are building the documentation from a\nGit clone, you will need to have Doxygen and pdflatex\ninstalled -- the documentation will be built during the normal \"make\"\nprocess.  The documentation is installed during \"make install\" to\n$prefix/share/doc/hwloc/ and your systems default man page tree (under\n$prefix, of course).\n\n\\subsection portability Portability\n\nOperating System have varying support for CPU and memory binding,\ne.g. while some Operating Systems provide interfaces for all kinds of CPU and\nmemory bindings, some others provide only interfaces for a limited number of\nkinds of CPU and memory binding, and some do not provide any binding interface\nat all.  Hwloc's binding functions would then simply return the ENOSYS error\n(Function not implemented), meaning that the underlying Operating System\ndoes not provide any interface for them. \\ref hwlocality_cpubinding and\n\\ref hwlocality_membinding provide more information on which hwloc binding functions\nshould be preferred because interfaces for them are usually available on the\nsupported Operating Systems.\n\nSimilarly, the ability of reporting topology information varies from\none platform to another.\nAs shown in \\ref cli_examples, hwloc can obtain information on a wide\nvariety of hardware topologies.  However, some platforms and/or\noperating system versions will only report a subset of this\ninformation.  For example, on an PPC64-based system with 8 cores\n(each with 2 hardware threads) running a default 2.6.18-based kernel\nfrom RHEL 5.4, hwloc is only able to glean information about NUMA\nnodes and processor units (PUs).  No information about caches,\npackages, or cores is available.\n\nHere's the graphical output from lstopo on this platform when\nSimultaneous Multi-Threading (SMT) is enabled:\n\n\\image html ppc64-with-smt.png\n\\image latex ppc64-with-smt.png \"\" width=\\textwidth\n\nAnd here's the graphical output from lstopo on this platform when SMT is\ndisabled:\n\n\\image html ppc64-without-smt.png\n\\image latex ppc64-without-smt.png \"\" width=.5\\textwidth\n\nNotice that hwloc only sees half the PUs when SMT is disabled.\nPU L#6, for example, seems to change location from NUMA node #0 to #1.\nIn reality, no PUs \"moved\" -- they were simply re-numbered when hwloc\nonly saw half as many (see also Logical index in \\ref termsanddefs_indexes).\nHence, PU L#6 in the SMT-disabled picture probably corresponds to\nPU L#12 in the SMT-enabled picture.\n\nThis same \"PUs have disappeared\" effect can be seen on other platforms\n-- even platforms / OSs that provide much more information than the\nabove PPC64 system.  This is an unfortunate side-effect of how\noperating systems report information to hwloc.\n\nNote that upgrading the Linux kernel on the same PPC64 system\nmentioned above to 2.6.34, hwloc is able to discover all the topology\ninformation.  The following picture shows the entire topology layout\nwhen SMT is enabled:\n\n\\image html ppc64-full-with-smt.png\n\\image latex ppc64-full-with-smt.png \"\" width=\\textwidth\n\nDevelopers using the hwloc API or XML output for portable applications\nshould therefore be extremely careful to not make any assumptions\nabout the structure of data that is returned.  For example, per the\nabove reported PPC topology, it is not safe to assume that PUs will\nalways be descendants of cores.\n\nAdditionally, future hardware may insert new topology elements that\nare not available in this version of hwloc.  Long-lived applications\nthat are meant to span multiple different hardware platforms should\nalso be careful about making structure assumptions.  For example,\na new element may someday exist between a core and a PU.\n\n\n\\subsection interface_example API Example\n\nThe following small C example (available in the source tree as ``doc/examples/hwloc-hello.c'')\nprints the topology of the machine and performs some thread and memory binding.\nMore examples are available in the doc/examples/ directory of the source\ntree.\n\n\\include examples/hwloc-hello.c\n\nhwloc provides a \\c pkg-config executable to obtain relevant compiler\nand linker flags.  For example, it can be used thusly to compile\napplications that utilize the hwloc library (assuming GNU Make):\n\n\\verbatim\nCFLAGS += $(shell pkg-config --cflags hwloc)\nLDLIBS += $(shell pkg-config --libs hwloc)\n\nhwloc-hello: hwloc-hello.c\n        $(CC) hwloc-hello.c $(CFLAGS) -o hwloc-hello $(LDLIBS)\n\\endverbatim\n\nOn a machine 2 processor packages -- each package of\nwhich has two processing cores -- the output from running \\c\nhwloc-hello could be something like the following:\n\n\\verbatim\nshell$ ./hwloc-hello\n*** Objects at level 0\nIndex 0: Machine\n*** Objects at level 1\nIndex 0: Package#0\nIndex 1: Package#1\n*** Objects at level 2\nIndex 0: Core#0\nIndex 1: Core#1\nIndex 2: Core#3\nIndex 3: Core#2\n*** Objects at level 3\nIndex 0: PU#0\nIndex 1: PU#1\nIndex 2: PU#2\nIndex 3: PU#3\n*** Printing overall tree\nMachine\n  Package#0\n    Core#0\n      PU#0\n    Core#1\n      PU#1\n  Package#1\n    Core#3\n      PU#2\n    Core#2\n      PU#3\n*** 2 package(s)\n*** Logical processor 0 has 0 caches totaling 0KB\nshell$ \n\\endverbatim\n\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"history\">\n\\endhtmlonly\n\\section history History / Credits\n\nhwloc is the evolution and merger of the libtopology project and the Portable\nLinux Processor Affinity (PLPA) (https://www.open-mpi.org/projects/plpa/)\nproject. Because of functional and ideological overlap, these two code bases\nand ideas were merged and released under the name \"hwloc\" as an Open MPI\nsub-project.\n\nlibtopology was initially developed by the Inria Runtime Team-Project.\nPLPA was initially developed by\nthe Open MPI development team as a sub-project. Both are now deprecated\nin favor of hwloc, which is distributed as an Open MPI sub-project.\n\n\\htmlonly\n</div><div class=\"section\" id=\"further_reading\">\n\\endhtmlonly\n\\section further_reading Further Reading\n\nThe documentation chapters include\n\n<ul>\n<li> \\ref termsanddefs \n<li> \\ref tools\n<li> \\ref envvar\n<li> \\ref cpu_mem_bind\n<li> \\ref iodevices\n<li> \\ref miscobjs\n<li> \\ref attributes\n<li> \\ref topoattrs\n<li> \\ref xml\n<li> \\ref synthetic\n<li> \\ref interoperability\n<li> \\ref threadsafety\n<li> \\ref plugins\n<li> \\ref embed\n<li> \\ref faq\n<li> \\ref upgrade_to_api_2x\n</ul>\n\nMake sure to have had a look at those too!\n\n\\htmlonly\n</div>\n\\endhtmlonly\n\n\n\n\\page termsanddefs Terms and Definitions \n\n \n\\htmlonly\n<div class=\"section\" id=\"termsanddefs_objects\">\n\\endhtmlonly\n\\section termsanddefs_objects Objects\n\n<dl>\n\n<dt>Object</dt>\n  <dd>Interesting kind of part of the system, such as a Core, a L2Cache,\n  a NUMA memory node, etc. The different types detected by hwloc are\n  detailed in the ::hwloc_obj_type_t enumeration.\n\n  There are four kinds of Objects: Memory (NUMA nodes and Memory-side caches), I/O (Bridges, PCI and OS devices),\n  Misc, and Normal (everything else, including Machine, Package, Die, Core, PU, CPU Caches, etc.).\n  Normal and Memory objects have (non-NULL) CPU sets and nodesets, while I/O and Misc don't.\n\n  Objects are topologically sorted by locality (CPU and node sets)\n  into a tree (see \\ref termsanddefs_tree).\n  </dd>\n\n<dt>Processing Unit (PU)</dt>\n  <dd>The smallest processing element that can be represented by a hwloc\n  object. It may be a single-core processor, a core of a multicore\n  processor, or a single thread in a SMT processor\n  (also sometimes called \"Logical processor\",\n   not to be confused with \"Logical index of a processor\").\n  hwloc's PU acronym stands for Processing Unit.\n  </dd>\n\n<dt>Package</dt>\n  <dd>A processor Package is the physical package that usually gets\n  inserted into a socket on the motherboard.\n  It is also often called a physical processor or a CPU even if these\n  names bring confusion with respect to cores and processing units.\n  A processor package usually contains multiple cores\n  (and may also be composed of multiple dies).\n  hwloc Package objects were called Sockets up to hwloc 1.10.\n  </dd>\n\n<dt>NUMA Node</dt>\n  <dd>\n  An object that contains memory that is directly and byte-accessible\n  to the host processors.\n  It is usually close to some cores as specified by its CPU set.\n  Hence it is attached as a memory child of the object that groups\n  those cores together, for instance a Package objects with 4 Core children\n  (see \\ref termsanddefs_tree).\n  </dd>\n\n<dt>Memory-side Cache</dt>\n  <dd>\n  A cache in front of a specific memory region (e.g. a range of physical addresses).\n  It caches all accesses to that region without caring about which core issued the request.\n  This is the opposite of usual CPU caches where only accesses from the local cores\n  are cached, without caring about the target memory.\n\n  In hwloc, memory-side caches are memory objects placed between their local CPU objects\n  (parent) and the target NUMA node memory (child).\n  </dd>\n</dl>\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"termsanddefs_indexes\">\n\\endhtmlonly\n\\section termsanddefs_indexes Indexes and Sets\n\n<dl>\n\n<dt>OS or physical index</dt>\n  <dd>The index that the operating system (OS) uses to identify the\n  object.  This may be completely arbitrary, non-unique, non-contiguous, not\n  representative of logical proximity, and may depend on the BIOS\n  configuration. That is why hwloc almost never uses them, only in the default\n  lstopo output (<tt>P\\#x</tt>) and cpuset masks.\n  See also \\ref faq_indexes.</dd>\n\n<dt>Logical index</dt>\n  <dd>Index to uniquely identify objects of the same type and depth,\n  automatically computed by hwloc according to the topology.  It expresses\n  logical proximity in a generic way, i.e. objects which have adjacent logical\n  indexes are adjacent in the topology. That is why hwloc almost always uses\n  it in its API, since it expresses logical proximity. They can be shown (as\n  <tt>L\\#x</tt>) by <tt>lstopo</tt> thanks to the <tt>-l</tt> option.  This index\n  is always linear and in\n  the range [0, num_objs_same_type_same_level-1].  Think of it as ``cousin\n  rank.'' The ordering is based on topology first, and then on OS CPU numbers,\n  so it is stable across everything except firmware CPU renumbering.\n  \"Logical index\" should not be confused with \"Logical processor\". A \"Logical\n  processor\" (which in hwloc we rather call \"processing unit\" to avoid the\n  confusion) has both a physical index (as chosen arbitrarily by BIOS/OS) and a logical\n  index (as computed according to logical proximity by hwloc).\n  See also \\ref faq_indexes.</dd>\n\n<dt>CPU set</dt>\n  <dd>The set of processing units (PU) logically included in an object\n  (if it makes sense).  They are always expressed using physical\n  processor numbers (as announced by the OS).  They are implemented as the\n  ::hwloc_bitmap_t opaque structure.  hwloc CPU sets are just masks, they\n  do \\em not have any relation with an operating system actual binding notion like\n  Linux' cpusets.\n  I/O and Misc objects do not have CPU sets while all Normal and Memory objects have non-NULL CPU sets.</dd>\n\n<dt>Node set</dt>\n  <dd>The set of NUMA memory nodes logically included in an object\n  (if it makes sense).  They are always expressed using physical node\n  numbers (as announced by the OS).  They are implemented with the\n  ::hwloc_bitmap_t opaque structure.\n  as bitmaps.\n  I/O and Misc objects do not have Node sets while all Normal and Memory objects have non-NULL nodesets.</dd>\n\n<dt>Bitmap</dt>\n  <dd>A possibly-infinite set of bits used for describing sets of objects\n  such as CPUs (CPU sets) or memory nodes (Node sets). They are implemented\n  with the ::hwloc_bitmap_t opaque structure.\n</dd>\n\n</dl>\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"termsanddefs_tree\">\n\\endhtmlonly\n\\section termsanddefs_tree Hierarchy, Tree and Levels\n\n<dl>\n\n<dt>Parent object</dt>\n  <dd>The object logically containing the current object, for example\n  because its CPU set includes the CPU set of the current object.\n  All objects have a non-NULL parent, except the root of the topology (Machine object).\n  </dd>\n\n<dt>Ancestor object</dt>\n  <dd>The parent object, or its own parent, and so on.</dd>\n\n<dt>Children object(s)</dt>\n  <dd>The object (or objects) contained in the current object because\n  their CPU set is included in the CPU set of the current object.\n  Each object may also contain separated lists for Memory, I/O and Misc object children.\n  </dd>\n\n<dt>Arity</dt>\n  <dd>The number of normal children of an object.\n  There are also specific arities for Memory, I/O and Misc children.\n  </dd>\n\n<dt>Sibling objects</dt>\n  <dd>Objects in the same children list, which all of them are normal\n  children of the same parent, or all of them are Memory children of\n  the same parent, or I/O children, or Misc.\n  They usually have the same type (and hence are cousins, as well).\n  But they may not if the topology is asymmetric.\n  </dd>\n\n<dt>Sibling rank</dt>\n  <dd>Index to uniquely identify objects which have\n  the same parent, and is always in the range [0, arity-1]\n  (respectively memory_arity, io_arity or misc_arity for Memory, I/O\n  and Misc children of a parent).</dd>\n\n<dt>Cousin objects</dt>\n  <dd>Objects of the same type (and depth) as the current object,\n  even if they do not have the same parent.</dd>\n\n<dt>Level</dt>\n  <dd>Set of objects of the same type and depth. All these objects\n  are cousins.\n\n  Memory, I/O and Misc objects also have their own specific levels and (virtual) depth.\n  </dd>\n\n<dt>Depth</dt>\n  <dd>Nesting level in the object tree, starting from the root object.\n  If the topology is symmetric, the depth of a child is equal to the\n  parent depth plus one, and an object depth is also equal to the number\n  of parent/child links between the root object and the given object.\n  If the topology is asymmetric, the difference between some parent\n  and child depths may be larger than one when some intermediate levels\n  (for instance groups) are missing in only some parts of the machine.\n\n  The depth of the Machine object is always 0 since it is always the\n  root of the topology.\n  The depth of PU objects is equal to the number of levels in the topology\n  minus one.\n\n  Memory, I/O and Misc objects also have their own specific levels and depth.\n  </dd>\n\n</dl>\n\nThe following diagram can help to understand the vocabulary of the relationships\nby showing the example of a machine with two dual core packages (with no\nhardware threads); thus, a topology with 5 levels. Each box with rounded corner\ncorresponds to one ::hwloc_obj_t, containing the values of the different integer\nfields (depth, logical_index, etc.), and arrows show to which other ::hwloc_obj_t\npointers point to (first_child, parent, etc.).\n\nThe topology always starts with a Machine object as root (depth 0)\nand ends with PU objects at the bottom (depth 4 here).\n\nObjects of the same level (cousins) are listed in red boxes and linked\nwith red arrows.\nChildren of the same parent (siblings) are linked with blue arrows.\n\nThe L2 cache of the last core is intentionally missing to show how asymmetric topologies are handled.\nSee \\ref faq_asymmetric for more information about such strange topologies.\n\n\\image html diagram.png\n\\image latex diagram.eps \"\" width=\\textwidth\n\nIt should be noted that for PU objects, the logical index -- as\ncomputed linearly by hwloc -- is not the same as the OS index.\n\nThe NUMA node is on the side because it is not part of the main tree\nbut rather attached to the object that corresponds to its locality\n(the entire machine here, hence the root object).\nIt is attached as a <i>Memory</i> child (in green) and has a virtual depth (negative).\nIt could also have siblings if there were multiple local NUMA nodes,\nor cousins if other NUMA nodes were attached somewhere else in the machine.\n\nI/O or Misc objects could be attached in a similar manner.\n\n\n\n\\page tools Command-Line Tools \n\n\\htmlonly\n<div class=\"section\">\n\\endhtmlonly\n\nhwloc comes with an extensive C programming interface and several\ncommand line utilities. Each of them is fully documented in its own\nmanual page; the following is a summary of the available command line\ntools.\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"cli_lstopo\">\n\\endhtmlonly\n\\section cli_lstopo lstopo and lstopo-no-graphics\n\nlstopo (also known as hwloc-ls) displays the\nhierarchical topology map of the current system.  The output may be\ngraphical, ascii-art or textual, and can also be exported to numerous file\nformats such as PDF, PNG, XML, and others.\nAdvanced graphical outputs require the \"Cairo\" development package\n(usually <tt>cairo-devel</tt> or <tt>libcairo2-dev</tt>).\n\nlstopo and lstopo-no-graphics accept the same command-line options.\nHowever, graphical outputs are only available in lstopo.\nTextual outputs (those that do not depend on heavy external libraries\nsuch as Cairo) are supported in both lstopo and lstopo-no-graphics.\n\nThis command can also display the processes currently bound to a part\nof the machine (via the <tt>\\--ps</tt> option).\n\nNote that lstopo can read XML files and/or alternate chroot\nfilesystems and display topological maps representing those systems\n(e.g., use lstopo to output an XML file on one system, and then use\nlstopo to read in that XML file and display it on a different system).\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"cli_hwloc_bind\">\n\\endhtmlonly\n\\section cli_hwloc_bind hwloc-bind\n\nhwloc-bind binds processes to specific hardware objects through a\nflexible syntax.  A simple example is binding an executable to\nspecific cores (or packages or bitmaps or ...).  The hwloc-bind(1) man\npage provides much more detail on what is possible.\n\nhwloc-bind can also be used to retrieve the current process' binding,\nor retrieve the last CPU(s) where a process ran,\nor operate on memory binding.\n\nJust like hwloc-calc, the input locations given to hwloc-bind may be\neither objects or cpusets (bitmaps as reported by hwloc-calc or hwloc-distrib).\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"cli_hwloc_calc\">\n\\endhtmlonly\n\\section cli_hwloc_calc hwloc-calc\n\nhwloc-calc is hwloc's Swiss Army Knife command-line tool for converting things.\nThe input may be either objects or cpusets (bitmaps as reported by another hwloc-calc instance or by hwloc-distrib),\nthat may be combined by addition, intersection or subtraction.\nThe output kinds include:\n<ul>\n<li>a cpuset bitmap: This compact opaque representation of objects is useful for shell scripts etc.\nIt may passed to hwloc command-line tools such as hwloc-calc or hwloc-bind,\nor to hwloc command-line options such as <tt>lstopo \\--restrict</tt>.</li>\n<li>the amount of the equivalent hwloc objects from a specific type, or the list of their indexes.\nThis is useful for iterating over all similar objects (for instance all cores) within a given\npart of a platform.</li>\n<li>a hierarchical description of objects,\nfor instance a thread index within a core within a package.\nThis gives a better view of the actual location of an object.</li>\n</ul>\n\nMoreover, input and/or output may be use either physical/OS object\nindexes or as hwloc's logical object indexes.\nIt eases cooperation with external tools such as taskset or numactl\nby exporting hwloc specifications into list of processor or NUMA node\nphysical indexes.\nSee also \\ref faq_indexes.\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"cli_hwloc_info\">\n\\endhtmlonly\n\\section cli_hwloc_info hwloc-info\n\nhwloc-info dumps information about the given objects, as well as all its specific attributes.\nIt is intended to be used with tools such as grep for filtering\ncertain attribute lines.\nWhen no object is specified, or when <tt>\\--topology</tt> is passed,\nhwloc-info prints a summary of the topology.\nWhen <tt>\\--support</tt> is passed, hwloc-info lists the supported\nfeatures for the topology.\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"cli_hwloc_distrib\">\n\\endhtmlonly\n\\section cli_hwloc_distrib hwloc-distrib\n\nhwloc-distrib generates a set of cpuset bitmaps that are uniformly\ndistributed across the machine for the given number of processes.\nThese strings may be used with hwloc-bind to run processes to maximize\ntheir memory bandwidth by properly distributing them across the\nmachine.\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"cli_hwloc_ps\">\n\\endhtmlonly\n\\section cli_hwloc_ps hwloc-ps\n\nhwloc-ps is a tool to display the bindings of processes that are\ncurrently running on the local machine.  By default, hwloc-ps only\nlists processes that are bound; unbound process (and Linux kernel\nthreads) are not displayed.\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"cli_hwloc_annotate\">\n\\endhtmlonly\n\\section cli_hwloc_annotate hwloc-annotate\n\nhwloc-annotate may modify object (and topology) attributes such as string information\n(see \\ref attributes_info for details) or Misc children objects.\nIt may also add distances, memory attributes, etc. to the topology.\nIt reads an input topology from a XML file and outputs\nthe annotated topology as another XML file.\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"cli_hwloc_diffpatchcompress\">\n\\endhtmlonly\n\\section cli_hwloc_diffpatchcompress hwloc-diff, hwloc-patch and hwloc-compress-dir\n\nhwloc-diff computes the difference between two topologies\nand outputs it to another XML file.\n\nhwloc-patch reads such a difference file and applies to\nanother topology.\n\nhwloc-compress-dir compresses an entire directory of XML\nfiles by using hwloc-diff to save the differences between\ntopologies instead of entire topologies.\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"cli_hwloc_dump_hwdata\">\n\\endhtmlonly\n\\section cli_hwloc_dump_hwdata hwloc-dump-hwdata\n\nhwloc-dump-hwdata is a Linux and x86-specific tool that dumps\n(during boot, privileged) some topology and locality information\nfrom raw hardware files (SMBIOS and ACPI tables) to human-readable\nand world-accessible files that the hwloc library will later reuse.\n\nCurrently only used on Intel Xeon Phi processor platforms.\nSee \\ref faq_knl_dump.\n\nSee <tt>HWLOC_DUMPED_HWDATA_DIR</tt> in \\ref envvar for details\nabout the location of dumped files.\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"cli_hwloc_gather\">\n\\endhtmlonly\n\\section cli_hwloc_gather hwloc-gather-topology and hwloc-gather-cpuid\n\nhwloc-gather-topology is a Linux-specific tool that saves the\nrelevant topology files of the current machine into a tarball\n(and the corresponding lstopo outputs).\n\nhwloc-gather-cpuid is a x86-specific tool that dumps the\nresult of CPUID instructions on the current machine into\na directory.\n\nThe output of hwloc-gather-cpuid is included in the tarball\nsaved by hwloc-gather-topology when running on Linux/x86.\n\nThese files may be used later (possibly offline) for simulating\nor debugging a machine without actually running on it.\n\n\n\n\n\\page envvar Environment Variables\n\n\\htmlonly\n<div class=\"section\">\n\\endhtmlonly\n\nThe behavior of the hwloc library and tools may be tuned thanks to the\nfollowing environment variables.\n\n<dl>\n\n<dt>HWLOC_XMLFILE=/path/to/file.xml</dt>\n  <dd>enforces the discovery from the given XML file as if\n  hwloc_topology_set_xml() had been called.\n  This file may have been generated earlier with lstopo file.xml.\n  For convenience, this backend provides empty binding hooks which just\n  return success.  To have hwloc still actually call OS-specific hooks,\n  HWLOC_THISSYSTEM should be set 1 in the environment too, to assert that\n  the loaded file is really the underlying system.\n  See also \\ref xml.\n  </dd>\n\n<dt>HWLOC_SYNTHETIC=synthetic_description</dt>\n  <dd>enforces the discovery through a synthetic description string\n  as if hwloc_topology_set_synthetic() had been called.\n  For convenience, this backend provides empty binding hooks which just\n  return success.\n  See also \\ref synthetic.\n  </dd>\n\n<dt>HWLOC_XML_VERBOSE=1</dt>\n<dt>HWLOC_SYNTHETIC_VERBOSE=1</dt>\n  <dd>enables verbose messages in the XML or synthetic topology backends.\n  hwloc XML backends (see \\ref xml) can emit some error messages to\n  the error output stream.\n  Enabling these verbose messages within hwloc can be useful for\n  understanding failures to parse input XML topologies.\n  Similarly, enabling verbose messages in the synthetic topology\n  backend can help understand why the description string is invalid.\n  See also \\ref synthetic.\n  </dd>\n\n<dt>HWLOC_THISSYSTEM=1</dt>\n  <dd>enforces the return value of hwloc_topology_is_thissystem(), as if\n  ::HWLOC_TOPOLOGY_FLAG_IS_THISSYSTEM was set with hwloc_topology_set_flags().\n  It means that it makes hwloc assume that the selected backend provides the\n  topology for the system on which we are running, even if it is not the\n  OS-specific backend but the XML backend for instance.\n  This means making the binding functions actually call the OS-specific\n  system calls and really do binding, while the XML backend would otherwise\n  provide empty hooks just returning success.\n  This can be used for efficiency reasons to first detect the topology once,\n  save it to a XML file, and quickly reload it later through the XML\n  backend, but still having binding functions actually do bind.\n  This also enables support for the variable HWLOC_THISSYSTEM_ALLOWED_RESOURCES.\n  </dd>\n\n<dt>HWLOC_THISSYSTEM_ALLOWED_RESOURCES=1</dt>\n  <dd>Get the set of allowed resources from the native operating system\n  even if the topology was loaded from XML or synthetic description,\n  as if ::HWLOC_TOPOLOGY_FLAG_THISSYSTEM_ALLOWED_RESOURCES was set\n  with hwloc_topology_set_flags().\n  This variable requires the topology to match the current system\n  (see the variable HWLOC_THISSYSTEM).\n  This is useful when the topology is not loaded directly from the\n  local machine (e.g. for performance reason) and it comes with all\n  resources, but the running process is restricted to only a part\n  of the machine (for instance because of Linux Cgroup/Cpuset).\n  </dd>\n\n<dt>HWLOC_ALLOW=all</dt>\n  <dd>Totally ignore administrative restrictions such as Linux Cgroups\n  and consider all resources (PUs and NUMA nodes) as allowed.\n  This is different from setting HWLOC_TOPOLOGY_FLAG_INCLUDE_DISALLOWED\n  which gathers all resources but marks the unavailable ones as disallowed.\n  </dt>\n\n<dt>HWLOC_HIDE_ERRORS=0</dt>\n  <dd>enables or disables verbose reporting of errors.\n  The hwloc library may issue warnings to the standard error stream\n  when it detects a problem during topology discovery, for instance\n  if the operating system (or user) gives contradictory topology\n  information.   Setting this environment variable to 1 removes the\n  actual displaying of these error messages.\n  </dd>\n\n<dt>HWLOC_USE_NUMA_DISTANCES=7</dt>\n  <dd>enables or disables the use of NUMA distances.\n  NUMA distances and memory target/initiator information may be used\n  to improve the locality of NUMA nodes, especially CPU-less nodes.\n  Bits in the value of this environment variable enable different features:\n  Bit 0 enables the gathering of NUMA distances from the operating system.\n  Bit 1 further enables the use of NUMA distances to improve the\n  locality of CPU-less nodes.\n  Bit 2 enables the use of target/initiator information.\n  </dd>\n\n<dt>HWLOC_GROUPING=1</dt>\n  <dd>enables or disables objects grouping based on distances.\n  By default, hwloc uses distance matrices between objects (either read\n  from the OS or given by the user) to find groups of close objects.\n  These groups are described by adding intermediate Group objects in the topology.\n  Setting this environment variable to 0 will disable this grouping.\n  This variable supersedes the obsolete HWLOC_IGNORE_DISTANCES variable.\n  </dd>\n\n<dt>HWLOC_GROUPING_ACCURACY=0.05</dt>\n  <dd>relaxes distance comparison during grouping.\n  By default, objects may be grouped if their distances form a minimal\n  distance graph. When setting this variable to 0.02, and when\n  ::HWLOC_DISTANCES_ADD_FLAG_GROUP_INACCURATE is given, these distances\n  do not have to be strictly equal anymore, they may just be equal\n  with a 2% error.\n  If set to <tt>try</tt> instead of a numerical value, hwloc will try\n  to group with perfect accuracy (0, the default), then with 0.01, 0.02,\n  0.05 and finally 0.1.\n  Numbers given in this environment variable should always use a dot\n  as a decimal mark (for instance 0.01 instead of 0,01).</dd>\n\n<dt>HWLOC_GROUPING_VERBOSE=0</dt>\n  <dd>enables or disables some verbose messages during grouping.\n  If this variable is set to 1, some debug messages will be displayed\n  during distance-based grouping of objects even if debug was not specific\n  at configure time.\n  This is useful when trying to find an interesting distance grouping\n  accuracy.</dd>\n\n<dt>HWLOC_CPUKINDS_RANKING=default</dt>\n  <dd>change the ranking policy for CPU kinds.\n  By default, the OS-provided efficiency is used for ranking.\n  If not available, the frequency is used on ARM processors,\n  or core type and frequency on other architectures.\n  <br/>\n  This environment variable may be set to\n  <tt>coretype+frequency</tt>, <tt>coretype</tt>,\n  <tt>frequency</tt>, <tt>frequency_base</tt>, <tt>frequency_max</tt>,\n  <tt>forced_efficiency</tt>, <tt>no_forced_efficiency</tt>,\n  <tt>default</tt>, or <tt>none</tt>.\n  </dd>\n\n<dt>HWLOC_PCI_LOCALITY=&lt;domain/bus&gt; &lt;cpuset&gt;;...</dt>\n<dt>HWLOC_PCI_LOCALITY=/path/to/pci/locality/file</dt>\n<dd>changes the locality of I/O devices behing the specified PCI buses.\n  If no I/O locality information is available or if the BIOS reports\n  incorrect information, it is possible to move a I/O device tree\n  (OS and/or PCI devices with optional bridges)\n  near a custom set of processors.\n  <br/>\n  Localities are given either inside the environment variable itself,\n  or in the pointed file.\n  They may be separated either by semi-colons or by line-breaks.\n  <br/>\n  Each locality contains a domain/bus specification (in hexadecimal numbers as usual)\n  followed by a whitespace and a cpuset:\n  <ul>\n  <li><tt>0001 &lt;cpuset&gt;</tt> specifies the locality of all buses in PCI domain 0000.</li>\n  <li><tt>0000:0f &lt;cpuset&gt;</tt> specifies only PCI bus 0f in domain 0000.</li>\n  <li><tt>0002:04-0a &lt;cpuset&gt;</tt> specifies a range of buses (from 04 to 0a) within domain 0002.</li>\n  </ul>\n  Domain/bus specifications should usually match entire hierarchies of buses\n  behind a bridge (including primary, secondary and subordinate buses).\n  For instance, if hostbridge 0000:00 is above other bridges/switches with buses 0000:01 to 0000:09,\n  the variable should be HWLOC_PCI_LOCALITY=\"0000:00-09 <cpuset>\".\n  It supersedes the old HWLOC_PCI_0000_00_LOCALCPUS=&lt;cpuset&gt;\n  which only works when hostbridges exist in the topology.\n  <br/>\n  If the variable is defined to empty or invalid, no forced PCI locality is applied\n  but hwloc's internal automatic locality quirks are disabled, which means the exact\n  PCI locality reported by the platform is used.\n  </dd>\n\n<dt>HWLOC_X86_TOPOEXT_NUMANODES=0</dt>\n  <dd>use AMD topoext CPUID leaf in the x86 backend to detect NUMA nodes.\n  When using the x86 backend, setting this variable to 1 enables the building\n  of NUMA nodes from AMD processor CPUID instructions.\n  However this strategy does not always reflect BIOS configuration such as NUMA interleaving.\n  And node indexes may be different from those of the operating system.\n  Hence this should only be used when OS backends are wrong\n  and the user is sure that CPUID returns correct NUMA information.\n  </dd>\n\n<dt>HWLOC_KEEP_NVIDIA_GPU_NUMA_NODES=0</dt>\n  <dd>show or hide NUMA nodes that correspond to NVIDIA GPU memory.\n  By default they are ignored to avoid interleaved memory being allocated\n  on GPU by mistake.\n  Setting this environment variable to 1 exposes these NUMA nodes.\n  They may be recognized by the <em>GPUMemory</em> subtype.\n  They also have a <em>PCIBusID</em> info attribute to identify the\n  corresponding GPU.\n  </dd>\n\n<dt>HWLOC_KNL_MSCACHE_L3=0</dt>\n  <dd>Expose the KNL MCDRAM in cache mode as a Memory-side Cache instead of a L3.\n  hwloc releases prior to 2.1 exposed the MCDRAM cache as a CPU-side L3 cache.\n  Now that Memory-side caches are supported by hwloc, it is still exposed\n  as a L3 by default to avoid breaking existing applications.\n  Setting this environment variable to 1 will expose it as a proper Memory-side cache.\n  </dd>\n\n<dt>HWLOC_ANNOTATE_GLOBAL_COMPONENTS=0</dt>\n  <dd>Allow components to annotate the topology even if they are\n  usually excluded by global components by default.\n  Setting this variable to 1 and also setting <tt>HWLOC_COMPONENTS=xml,pci,stop</tt>\n  enables the addition of PCI vendor and model info attributes to a XML topology\n  that was generated without those names (if pciaccess was missing).\n  </dd>\n\n<dt>HWLOC_FSROOT=/path/to/linux/filesystem-root/</dt>\n  <dd>switches to reading the topology from the specified\n  Linux filesystem root instead of the main file-system root.\n  This directory may have been saved previously from another machine\n  with <tt>hwloc-gather-topology</tt>.\n  <br/>\n  One should likely also set <tt>HWLOC_COMPONENTS=linux,stop</tt>\n  so that non-Linux backends are disabled\n  (the <tt>-i</tt> option of command-line tools takes care of both).\n  <br/>\n  Not using the main file-system root causes hwloc_topology_is_thissystem()\n  to return 0.\n  For convenience, this backend provides empty binding hooks which just\n  return success.  To have hwloc still actually call OS-specific hooks,\n  HWLOC_THISSYSTEM should be set 1 in the environment too, to assert that\n  the loaded file is really the underlying system.\n  </dd>\n\n<dt>HWLOC_CPUID_PATH=/path/to/cpuid/</dt>\n  <dd>forces the x86 backend to read dumped CPUIDs from the given directory\n  instead of executing actual x86 CPUID instructions.\n  This directory may have been saved previously from another machine\n  with <tt>hwloc-gather-cpuid</tt>.\n  <br/>\n  One should likely also set <tt>HWLOC_COMPONENTS=x86,stop</tt>\n  so that non-x86 backends are disabled\n  (the <tt>-i</tt> option of command-line tools takes care of both).\n  <br/>\n  It causes hwloc_topology_is_thissystem() to return 0.\n  For convenience, this backend provides empty binding hooks which just\n  return success.  To have hwloc still actually call OS-specific hooks,\n  HWLOC_THISSYSTEM should be set 1 in the environment too, to assert that\n  the loaded CPUID dump is really the underlying system.\n  </dd>\n\n<dt>HWLOC_DUMPED_HWDATA_DIR=/path/to/dumped/files/</dt>\n  <dd>loads files dumped by <tt>hwloc-dump-hwdata</tt> (on Linux)\n  from the given directory.\n  The default dump/load directory is configured during build based\n  on \\--runstatedir, \\--localstatedir, and \\--prefix options.\n  It usually points to <tt>/var/run/hwloc/</tt> in Linux distribution\n  packages, but it may also point to <tt>$prefix/var/run/hwloc/</tt>\n  when manually installing and only specifying \\--prefix.\n  </dd>\n\n<dt>HWLOC_COMPONENTS=list,of,components</dt>\n  <dd>forces a list of components to enable or disable.\n  Enable or disable the given comma-separated list of components\n  (if they do not conflict with each other). Component names prefixed with\n  <tt>-</tt> are disabled (a single phase may also be disabled).\n\n  Once the end of the list is reached, hwloc falls back to\n  enabling the remaining components (sorted by priority) that do not\n  conflict with the already enabled ones, and unless explicitly disabled in the\n  list.\n  If <tt>stop</tt> is met, the enabling loop immediately stops, no\n  more component is enabled.\n\n  If <tt>xml</tt> or <tt>synthetic</tt> components are selected,\n  the corresponding XML filename or synthetic description string\n  should be pass in <tt>HWLOC_XMLFILE</tt> or <tt>HWLOC_SYNTHETIC</tt>\n  respectively.\n\n  Since this variable is the low-level and more generic way to\n  select components, it takes precedence over environment variables\n  for selecting components.\n\n  If the variable is set to an empty string (or set to a single comma),\n  no specific component is loaded first, all components are loaded\n  in priority order.\n\n  See \\ref plugins_select for details.\n  </dd>\n\n<dt>HWLOC_COMPONENTS_VERBOSE=1</dt>\n  <dd>displays verbose information about components.\n  Display messages when components are registered or enabled.\n  This is the recommended way to list the available components\n  with their priority\n  (all of them are <em>registered</em> at startup).\n  </dd>\n\n<dt>HWLOC_PLUGINS_PATH=/path/to/hwloc/plugins/:...</dt>\n  <dd>changes the default search directory for plugins.\n  By default, <tt>$libdir/hwloc</tt> is used.\n  The variable may contain several colon-separated directories.\n  </dd>\n\n<dt>HWLOC_PLUGINS_VERBOSE=1</dt>\n  <dd>displays verbose information about plugins.\n  List which directories are scanned, which files are loaded,\n  and which components are successfully loaded.\n  </dd>\n\n<dt>HWLOC_PLUGINS_BLACKLIST=filename1,filename2,...</dt>\n  <dd>prevents plugins from being loaded if their filename\n  (without path) is listed.\n  Plugin filenames may be found in verbose messages outputted\n  when HWLOC_PLUGINS_VERBOSE=1.\n  </dd>\n\n<dt>HWLOC_DEBUG_VERBOSE=0</dt>\n  <dd>disables all verbose messages that are enabled by default\n  when <tt>--enable-debug</tt> is passed to configure.\n  When set to more than 1, even more verbose messages are displayed.\n  The default is 1.\n  </dd>\n\n</dl>\n\n<!-- not documented:\n HWLOC_USE_DT\n  enables the use of the POWER Device-Tree on Linux (disabled by default since 2.1)\n HWLOC_KNL_NUMA_QUIRK\n  disables the KNL NUMA Cluster quirk in the linux backend\n HWLOC_KNL_HDH_FALLBACK\n  if 1, ignore KNL info from hwloc-dump-hwdata and fallback to heuristic\n  if 0, never fallback to the hardwired heuristic, useful if the heuristic is wrong\n HWLOC_DEBUG_ALLOW_OVERLAPPING_NODE_CPUSETS\n  don't ignore linux numa nodes with overlapping cpusets\n HWLOC_DEBUG_SORT_CHILDREN\n  sort osdev I/O children by name to make sure the topology doesn't depend\n  on the ordering of dentries in the local filesystem (for Linux fsroot tests)\n HWLOC_DEBUG_CHECK\n  runs sanity checks during discovery, as if \\--enable-debug was passed but\n  without debug messages\n  may be useful in the doc for debugging?\n HWLOC_HIDE_DEPRECATED\n  hides some warnings about deprecated features.\n  listed in those warnings so no need to document it\n HWLOC_TEST_GATHER_TOPOLOGY=0\n  disable the hwloc-gather-topology test when too long on large servers\n HWLOC_FORCE_BGQ\n  makes the bgq component run even if it doesn't recognize the running platform as a BGQ/CNK\n HWLOC_PICL_HETEROGENEOUS\n  don't apply PICL info from a single CPU to all CPUs since the machine isn't homogeneous\n HWLOC_DEBUG_FAKE_COMPONENT\n  enables debugging message to check that the fake component gets loaded\n HWLOC_DONT_ADD_VERSION_INFO\n  do not add hwlocVersion and processName info attributes (to facilitate comparing outputs)\n HWLOC_LIBXML=0\n HWLOC_LIBXML_EXPORT=0\n HWLOC_LIBXML_IMPORT=0\n  forces the use of the nolibxml XML backend instead of libxml2 if available,\n  for both import and export, or only one\n HWLOC_LIBXML_CLEANUP\n  cleanup libxml when ending import, to make valgrind happy\n  not enabled by default because somebody else may be using libxml\n HWLOC_XML_USERDATA_NOT_DECODED\n  do not decode base64 userdata on import,\n  and reexport it the same (used by tools for leaving userdata untouched)\n HWLOC_XML_SUPPORT_EXPORT=0\n  don't export support info to XML.\n HWLOC_RSMI_SHUTDOWN\n  force rsmi_shutdown to make valgrind happy\n  not enabled by default on rsmi <= 3.3.x because those old libs do not\n  refcount and somebody else might be using rsmi\n-->\n\n\n\n\n\\page cpu_mem_bind CPU and Memory Binding Overview\n\n\\htmlonly\n<div class=\"section\">\n\\endhtmlonly\n\nSome operating systems do not systematically provide separate\nfunctions for CPU and memory binding.  This means that CPU binding\nfunctions may have have effects on the memory binding policy.\nLikewise, changing the memory binding policy may change the CPU\nbinding of the current thread.  This is often not a problem for\napplications, so by default hwloc will make use of these functions\nwhen they provide better binding support.\n\nIf the application does not want the CPU binding to change when\nchanging the memory policy, it needs to use the\n::HWLOC_MEMBIND_NOCPUBIND flag to prevent hwloc from using OS functions\nwhich would change the CPU binding.  Additionally,\n::HWLOC_CPUBIND_NOMEMBIND can be passed to CPU binding function to\nprevent hwloc from using OS functions would change the memory binding\npolicy.  Of course, using these flags will reduce hwloc's overall support for\nbinding, so their use is discouraged.\n\nOne can avoid using these flags but still closely control both memory\nand CPU binding by allocating memory, touching each page in the\nallocated memory, and then changing the CPU binding.  The\nalready-really-allocated memory will then be \"locked\" to physical\nmemory and will not be migrated.  Thus, even if the memory binding\npolicy gets changed by the CPU binding order, the already-allocated\nmemory will not change with it.  When binding and allocating further\nmemory, the CPU binding should be performed again in case the memory\nbinding altered the previously-selected CPU binding.\n\nNot all operating systems support the notion of a \"current\" memory\nbinding policy for the current process, but such operating systems often still\nprovide a way to allocate data on a given node set.  Conversely, some\noperating systems support the notion of a \"current\" memory binding policy and do\nnot permit allocating data on a specific node set without changing the\ncurrent policy and allocate the data. To provide the most powerful coverage of\nthese facilities, hwloc provides:\n\n<ul>\n<li>functions that set/get the current memory binding policies (if supported):\nhwloc_set/get_membind() and hwloc_set/get_proc_membind()\n<li>a function that allocates memory bound to specific node set without changing\nthe current memory binding policy (if supported): hwloc_alloc_membind().\n<li>a helper which, if needed, changes the current memory binding policy of the\nprocess in order to obtain memory binding: hwloc_alloc_membind_policy().\n</ul>\n\nAn application can thus use the two first sets of functions if it wants to\nmanage separately the global process binding policy and directed allocation,\nor use the third set of functions if it does not care about the process memory\nbinding policy.\n\nSee \\ref hwlocality_cpubinding and \\ref hwlocality_membinding for\nhwloc's API functions regarding CPU and memory binding, respectively.\nThere are some examples under doc/examples/ in the source tree.\n\n\n\n\\page iodevices I/O Devices\n\n\\htmlonly\n<div class=\"section\">\n\\endhtmlonly\n\nhwloc usually manipulates processing units and memory but it can also\ndiscover I/O devices and report their locality as well.\nThis is useful for placing I/O intensive applications on cores near the\nI/O devices they use, or for gathering information about all platform\ncomponents.\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"iodevices_enabling\">\n\\endhtmlonly\n\\section iodevices_enabling Enabling and requirements\n\nI/O discovery is disabled by default (except in lstopo) for performance\nreasons.\nIt can be enabled by changing the filtering of I/O object types to\n<tt>::HWLOC_TYPE_FILTER_KEEP_IMPORTANT</tt> or <tt>::HWLOC_TYPE_FILTER_KEEP_ALL</tt>\nbefore loading the topology, for instance with <tt>hwloc_topology_set_io_types_filter()</tt>.\n\nNote that I/O discovery requires significant help from the operating system.\nThe pciaccess library (the development package is usually <tt>libpciaccess-devel</tt>\nor <tt>libpciaccess-dev</tt>) is needed to fully detect PCI devices and bridges/switches.\nOn Linux, PCI discovery may still be performed even if <tt>libpciaccess</tt> cannot\nbe used. But it misses PCI device names.\nMoreover, some operating systems require privileges for probing PCI devices,\nsee \\ref faq_privileged for details.\n\nThe actual locality of I/O devices is only currently detected on Linux.\nOther operating system will just report I/O devices as being attached\nto the topology root object.\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"iodevices_objects\">\n\\endhtmlonly\n\\section iodevices_objects I/O objects\n\nWhen I/O discovery is enabled and supported, some additional objects\nare added to the topology.\nThe corresponding I/O object types are:\n<ul><li>\n<tt>::HWLOC_OBJ_OS_DEVICE</tt> describes an operating-system-specific\nhandle such as the <em>sda</em> drive or the <em>eth0</em> network interface.\nSee \\ref iodevices_osdev.\n</li><li>\n<tt>::HWLOC_OBJ_PCI_DEVICE</tt> and <tt>::HWLOC_OBJ_BRIDGE</tt> build up\na PCI hierarchy made of bridges (that may be actually be switches) and devices.\nSee \\ref iodevices_pci.\n</li></ul>\nAny of these types may be filtered individually with <tt>hwloc_topology_set_type_filter()</tt>.\n\nhwloc tries to attach these new objects to normal objects\n(usually NUMA nodes) to match their actual physical location.\nFor instance, if a I/O hub (or root complex) is physically connected to a package,\nthe corresponding hwloc bridge object (and its PCI bridges and devices children)\nis inserted as a child of the corresponding hwloc Package object.\n<b>These children are not in the normal children list but rather in the I/O-specific\nchildren list.</b>\n\nI/O objects also have neither CPU sets nor node sets (NULL pointers) because\nthey are not directly usable by the user applications for binding.\nMoreover I/O hierarchies may be highly complex (asymmetric trees of bridges).\nSo I/O objects are placed in specific levels with custom depths.\nTheir lists may still be traversed with regular helpers such as\nhwloc_get_next_obj_by_type().\nHowever, hwloc offers some dedicated helpers such as hwloc_get_next_pcidev()\nand hwloc_get_next_osdev() for convenience (see \\ref hwlocality_advanced_io).\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"iodevices_osdev\">\n\\endhtmlonly\n\\section iodevices_osdev OS devices\n\nAlthough each PCI device is uniquely identified by its bus ID\n(e.g. 0000:01:02.3), a user-space application can hardly find out which\nPCI device it is actually using.\nApplications rather use software handles\n(such as the <em>eth0</em> network interface,\n the <em>sda</em> hard drive,\n or the <em>mlx4_0</em> OpenFabrics HCA).\nTherefore hwloc tries to add software devices\n(<tt>::HWLOC_OBJ_OS_DEVICE</tt>, also known as OS devices).\n\nOS devices may be attached below PCI devices, but they may also be\nattached directly to normal objects.\nIndeed some OS devices are not related to PCI.\nFor instance, NVDIMM block devices (such as <em>pmem0s</em> on Linux)\nare directly attached near their NUMA node\n(I/O child of the parent whose memory child is the NUMA node).\nAlso, if hwloc could not discover PCI for some reason, PCI-related\nOS devices may also be attached directly to normal objects.\n\nhwloc first tries to discover OS devices from the operating system,\ne.g. <em>eth0</em>, <em>sda</em> or <em>mlx4_0</em>.\nHowever, this ability is currently only available on Linux for some\nclasses of devices.\n\nhwloc then tries to discover software devices through additional\nI/O components using external libraries.\nFor instance proprietary graphics drivers do not expose any named OS device,\nbut hwloc may still create one OS object per software handle when\nsupported.\nFor instance the <tt>opencl</tt> and <tt>cuda</tt> components may\nadd some <em>opencl0d0</em> and <em>cuda0</em> OS device objects.\n\nHere is a list of OS device objects commonly created by hwloc\ncomponents when I/O discovery is enabled and supported.\n\n<ul>\n<li>Hard disks or non-volatile memory devices (::HWLOC_OBJ_OSDEV_BLOCK)\n <ul>\n <li><em>sda</em> or <em>dax2.0</em> (Linux component)</li>\n </ul>\n</li>\n<li>Network interfaces (::HWLOC_OBJ_OSDEV_NETWORK)\n <ul>\n <li><em>eth0</em>, <em>wlan0</em>, <em>ib0</em> (Linux component)</li>\n </ul>\n</li>\n<li>OpenFabrics (InfiniBand, Omni-Path, usNIC, etc) HCAs (::HWLOC_OBJ_OSDEV_OPENFABRICS)\n <ul>\n <li><em>mlx5_0</em>, <em>hfi1_0</em>, <em>qib0</em>, <em>usnic_0</em> (Linux component)</li>\n </ul>\n</li>\n<li>GPUs (::HWLOC_OBJ_OSDEV_GPU)\n <ul>\n <li><em>rsmi0</em> for the first RSMI device\n  (RSMI component, using the AMD ROCm SMI library)</li>\n <li><em>nvml0</em> for the first NVML device\n  (NVML component, using the NVIDIA Management Library)</li>\n <li><em>:0.0</em> for the first display\n  (GL component, using the NV-CONTROL X extension library, NVCtrl)</li>\n </ul>\n</li>\n<li>Co-Processors (::HWLOC_OBJ_OSDEV_COPROC)\n <ul>\n <li><em>opencl0d0</em> for the first device of the first OpenCL platform,\n  <em>opencl1d3</em> for the fourth device of the second OpenCL platform\n  (OpenCL component)</li>\n <li><em>cuda0</em> for the first NVIDIA CUDA device\n  (CUDA component, using the NVIDIA CUDA Library)</li>\n</li>\n<li>DMA engine channel (::HWLOC_OBJ_OSDEV_DMA)\n <ul>\n <li><em>dma0chan0</em> (Linux component) when all OS devices are enabled (::HWLOC_TYPE_FILTER_KEEP_ALL)</li>\n </ul>\n</li>\n</ul>\n\nNote that some PCI devices may contain multiple software devices\n(see the example below).\n\nSee also \\ref interoperability for managing these devices without\nconsidering them as hwloc objects.\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"iodevices_pci\">\n\\endhtmlonly\n\\section iodevices_pci PCI devices and bridges\n\nA PCI hierarchy is usually organized as follows:\nA hostbridge object ( <tt>::HWLOC_OBJ_BRIDGE</tt> object with upstream\ntype <em>Host</em> and downstream type <em>PCI</em>) is attached below\na normal object (usually the entire machine or a NUMA node).\nThere may be multiple hostbridges in the machine, attached to\ndifferent places, but all PCI devices are below one of them\n(unless the Bridge object type is filtered-out).\n\nEach hostbridge contains one or several children, either other bridges\n(usually PCI to PCI switches) or PCI devices (<tt>::HWLOC_OBJ_PCI_DEVICE</tt>).\nThe number of bridges between the hostbridge and a PCI device depends\non the machine.\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"iodevices_consult\">\n\\endhtmlonly\n\\section iodevices_consult Consulting I/O devices and binding\n\nI/O devices may be consulted by traversing the topology manually\n(with usual routines such as hwloc_get_obj_by_type()) or by using\ndedicated helpers (such as hwloc_get_pcidev_by_busid(), see\n\\ref hwlocality_advanced_io).\n\nI/O objects do not actually contain any locality information because\ntheir CPU sets and node sets are NULL.\nTheir locality must be retrieved by walking up the object tree\n(through the <tt>parent</tt> link) until a non-I/O object is found\n(see hwloc_get_non_io_ancestor_obj()).\nThis normal object should have non-NULL CPU sets and node sets\nwhich describe the processing units and memory that are immediately\nclose to the I/O device.\nFor instance the path from a OS device to its locality may go\nacross a PCI device parent, one or several bridges, up to\na Package node with the same locality.\n\nCommand-line tools are also aware of I/O devices.\nlstopo displays the interesting ones by default\n(passing <tt>\\--no-io</tt> disables it).\n\nhwloc-calc and hwloc-bind may manipulate I/O devices specified\nby PCI bus ID or by OS device name.\n<ul>\n<li>\n <tt>pci=0000:02:03.0</tt> is replaced by the set\n of CPUs that are close to the PCI device whose bus ID is given.\n</li>\n<li>\n <tt>os=eth0</tt> is replaced by CPUs that are close to the I/O\n device whose software handle is called <tt>eth0</tt>.\n</li>\n</ul>\nThis enables easy binding of I/O-intensive applications near the\ndevice they use.\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"iodevices_examples\">\n\\endhtmlonly\n\\section iodevices_examples Examples\n\nThe following picture shows a dual-package dual-core host whose\nPCI bus is connected to the first package and NUMA node.\n\n\\image html devel09-pci.png\n\\image latex devel09-pci.png \"\" width=\\textwidth\n\nSix interesting PCI devices were discovered.\nHowever, hwloc found some corresponding software devices\n(<em>eth0</em>, <em>eth1</em>, <em>sda</em>, <em>mlx4_0</em>,\n<em>ib0</em>, and <em>ib1</em>) for only four of these physical\ndevices.\nThe other ones (<em>PCI 102b:0532</em> and <em>PCI 8086:3a20</em>)\nare an unused IDE controller (no disk attached)\nand a graphic card (no corresponding software device reported\nto the user by the operating system).\n\nOn the contrary, it should be noted that three different software\ndevices were found for the last PCI device (<em>PCI 15b3:634a</em>).\nIndeed this OpenFabrics HCA PCI device object contains one\none OpenFabrics software device (<em>mlx4_0</em>) and two virtual\nnetwork interface software devices (<em>ib0</em> and <em>ib1</em>).\n\n\nHere is the corresponding textual output:\n\n\\verbatim\nMachine (24GB total)\n  Package L#0\n    NUMANode L#0 (P#0 12GB)\n    L3 L#0 (8192KB)\n      L2 L#0 (256KB) + L1 L#0 (32KB) + Core L#0 + PU L#0 (P#0)\n      L2 L#1 (256KB) + L1 L#1 (32KB) + Core L#1 + PU L#1 (P#2)\n    HostBridge\n      PCIBridge\n        PCI 01:00.0 (Ethernet)\n          Net \"eth0\"\n        PCI 01:00.1 (Ethernet)\n          Net \"eth1\"\n      PCIBridge\n        PCI 03:00.0 (RAID)\n          Block \"sda\"\n      PCIBridge\n        PCI 04:03.0 (VGA)\n      PCI 00:1f.2 (IDE)\n      PCI 51:00.0 (InfiniBand)\n        Net \"ib0\"\n        Net \"ib1\"\n        Net \"mlx4_0\"\n  Package L#1\n    NUMANode L#1 (P#1 12GB)\n    L3 L#1 (8192KB)\n      L2 L#2 (256KB) + L1 L#2 (32KB) + Core L#2 + PU L#2 (P#1)\n      L2 L#3 (256KB) + L1 L#3 (32KB) + Core L#3 + PU L#3 (P#3)\n\\endverbatim\n\n\n\n\n\\page miscobjs Miscellaneous objects\n\n\\htmlonly\n<div class=\"section\">\n\\endhtmlonly\n\nhwloc topologies may be annotated with Misc objects\n(of type <tt>::HWLOC_OBJ_MISC</tt>)\neither automatically or by the user.\nThis is a flexible way to annotate topologies with\nlarge sets of information since Misc objects may be inserted\nanywhere in the topology (to annotate specific objects or\nparts of the topology), even below other Misc objects, and each\nof them may contain multiple attributes (see also \\ref faq_annotate).\n\nThese Misc objects may have a <tt>subtype</tt> field\nto replace <tt>Misc</tt> with something else in the lstopo\noutput.\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"miscobjs_auto\">\n\\endhtmlonly\n\\section miscobjs_auto Misc objects added by hwloc\n\nhwloc only uses Misc objects when other object types are not sufficient,\nand when the Misc object type is not filtered-out anymore.\nThis currently includes:\n<ul>\n<li>\nMemory modules (DIMMs), on Linux when privileged and when\n<tt>dmi-sysfs</tt> is supported by the kernel.\nThese objects have a <tt>subtype</tt> field of value <tt>MemoryModule</tt>.\nThey are currently always attached to the root object.\nTheir attributes describe the DIMM vendor, model, etc.\n<tt>lstopo -v</tt> displays them as:\n\\code\nMisc(MemoryModule) (P#1 DeviceLocation=\"Bottom-Slot 2(right)\" BankLocation=\"BANK 2\" Vendor=Elpida SerialNumber=21733667 AssetTag=9876543210 PartNumber=\"EBJ81UG8EFU0-GN-F \")\n\\endcode\n</li>\n<li>\nDisplaying process binding in <tt>lstopo \\--top</tt>.\nThese objects have a <tt>subtype</tt> field of value <tt>Process</tt>\nand a name attribute made of their PID and program name.\nThey are attached below the object they are bound to.\nThe textual <tt>lstopo</tt> displays them as:\n\\code\n  PU L#0 (P#0)\n    Misc(Process) 4445 myprogram\n\\endcode\n</li>\n</ul>\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"miscobjs_annotate\">\n\\endhtmlonly\n\\section miscobjs_annotate Annotating topologies with Misc objects\n\nThe user may annotate hwloc topologies with its own Misc objects.\nThis can be achieved with <tt>hwloc_topology_insert_misc_object()</tt>\nas well as hwloc-annotate command-line tool.\n\n\n\n\n\\page attributes Object attributes\n\n\\htmlonly\n<div class=\"section\" id=\"attributes_normal\">\n\\endhtmlonly\n\\section attributes_normal Normal attributes\n\nhwloc objects have many generic attributes in the ::hwloc_obj structure,\nfor instance their <tt>logical_index</tt> or <tt>os_index</tt>\n(see \\ref faq_indexes), <tt>depth</tt> or <tt>name</tt>.\n\nThe kind of object is first described by the <tt>obj->type</tt>\ngeneric attribute (an integer).\nOS devices also have a specific <tt>obj->attr->osdev.type</tt> integer\nfor distinguishing between NICs, GPUs, etc.\nObjects may also have an optional <tt>obj->subtype</tt> pointing\nto a better description string.\nFor instance subtype is useful to say what Group objects are actually\nmade of (e.g. <em>Book</em> for Linux S/390 books).\nIt may also specify that a Block OS device is a <em>Disk</em>,\nor that a CoProcessor OS device is a <em>CUDA</em> device.\nThis subtype is displayed by lstopo either in place or after the\nmain <tt>obj->type</tt> attribute.\nNUMA nodes that correspond GPU memory may also have <em>GPUMemory</em>\nas subtype.\n\nEach object also contains an <tt>attr</tt> field that, if non NULL,\npoints to a union ::hwloc_obj_attr_u of type-specific attribute\nstructures.\nFor instance, a L2Cache object <tt>obj</tt> contains cache-specific\ninformation in <tt>obj->attr->cache</tt>, such as its size and\nassociativity, cache type.\nSee ::hwloc_obj_attr_u for details.\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"attributes_info\">\n\\endhtmlonly\n\\section attributes_info Custom string infos\n\nAside os these generic attribute fields, hwloc annotates\nmany objects with string attributes that are made of a key and a\nvalue.\nEach object contains a list of such pairs that may be consulted\nmanually (looking at the object <tt>infos</tt> array field)\nor using the hwloc_obj_get_info_by_name().\nThe user may additionally add new key-value pairs to any object using\nhwloc_obj_add_info() or the \\ref cli_hwloc_annotate program.\n\nHere is a non-exhaustive list of attributes that may be automatically\nadded by hwloc.\nNote that these attributes heavily depend on the ability of the\noperating system to report them.\nMany of them will therefore be missing on some OS.\n\n\\htmlonly\n</div><div class=\"subsection\" id=\"attributes_info_platform\">\n\\endhtmlonly\n\\subsection attributes_info_platform Hardware Platform Information\n\nThese info attributes are attached to the root object (Machine).\n\n<dl>\n<dt>PlatformName, PlatformModel, PlatformVendor, PlatformBoardID, PlatformRevision,</dt>\n<dt> SystemVersionRegister, ProcessorVersionRegister (Machine)</dt>\n<dd>Some POWER/PowerPC-specific attributes describing the platform\nand processor.\nCurrently only available on Linux.\nUsually added to Package objects, but can be in Machine instead if\nhwloc failed to discover any package.\n</dd>\n<dt>DMIBoardVendor, DMIBoardName, etc.</dt>\n<dd>DMI hardware information such as the motherboard and chassis\nmodels and vendors, the BIOS revision, etc.,\nas reported by Linux under <tt>/sys/class/dmi/id/</tt>.\n</dd>\n<dt>MemoryMode, ClusterMode</dt>\n<dd>\nIntel Xeon Phi processor configuration modes.\nAvailable if hwloc-dump-hwdata was used (see \\ref faq_knl_dump)\nor if hwloc managed to guess them from the NUMA configuration.\n\nThe memory mode may be <em>Cache</em>, <em>Flat</em>,\n<em>Hybrid50</em> (half the MCDRAM is used as a cache)\nor <em>Hybrid25</em> (25% of MCDRAM as cache).\nThe cluster mode may be <em>Quadrant</em>, <em>Hemisphere</em>, <em>All2All</em>,\n<em>SNC2</em> or <em>SNC4</em>.\nSee doc/examples/get-knl-modes.c in the source directory for an example of retrieving these attributes.\n</dd>\n</dl>\n\n\n\\htmlonly\n</div><div class=\"subsection\" id=\"attributes_info_os\">\n\\endhtmlonly\n\\subsection attributes_info_os Operating System Information\n\nThese info attributes are attached to the root object (Machine).\n\n<dl>\n<dt>OSName, OSRelease, OSVersion, HostName, Architecture</dt>\n<dd>The operating system name, release, version, the hostname and the\narchitecture name, as reported by the Unix <tt>uname</tt> command.\n</dd>\n<dt>LinuxCgroup</dt>\n<dd>The name the Linux control group where the calling process is\nplaced.\n</dd>\n<dt>WindowsBuildEnvironment</dt>\n<dd>Either MinGW or Cygwin when one of these environments was used during build.\n</dd>\n</dl>\n\n\n\\htmlonly\n</div><div class=\"subsection\" id=\"attributes_info_hwloc\">\n\\endhtmlonly\n\\subsection attributes_info_hwloc hwloc Information\n\nUnless specified, these info attributes are attached to the root object (Machine).\n\n<dl>\n<dt>Backend (topology root, or specific object added by that backend)</dt>\n<dd>The name of the hwloc backend/component that filled the topology.\nIf several components were combined, multiple Backend keys may exist,\nwith different values, for instance <tt>x86</tt> and <tt>Linux</tt> in the root\nobject and <tt>CUDA</tt> in CUDA OS device objects.\n</dd>\n<dt>SyntheticDescription</dt>\n<dd>The description string that was given to hwloc to build this\nsynthetic topology.\n</dd>\n<dt>hwlocVersion</dt>\n<dd>The version number of the hwloc library that was used to generate\nthe topology. If the topology was loaded from XML, this is not the hwloc\nversion that loaded it, but rather the first hwloc instance that exported\nthe topology to XML earlier.\n</dd>\n<dt>ProcessName</dt>\n<dd>The name of the process that contains the hwloc library that was used\nto generate the topology. If the topology was from XML, this is not the\nhwloc process that loaded it, but rather the first process that exported\nthe topology to XML earlier.\n</dd>\n</dl>\n\n\n\\htmlonly\n</div><div class=\"subsection\" id=\"attributes_info_cpu\">\n\\endhtmlonly\n\\subsection attributes_info_cpu CPU Information\n\nThese info attributes are attached to Package objects,\nor to the root object (Machine) if package locality information is missing.\n\n<dl>\n<dt>CPUModel</dt>\n<dd>The processor model name.</dd>\n<dt>CPUVendor, CPUModelNumber, CPUFamilyNumber, CPUStepping</dt>\n<dd>The processor vendor name, model number, family number, and stepping number.\nCurrently available for x86 and Xeon Phi processors on most systems,\nand for ia64 processors on Linux (except CPUStepping).\n</dd>\n<dt>CPURevision</dt>\n<dd>\nA POWER/PowerPC-specific general processor revision number,\ncurrently only available on Linux.\n</dd>\n<dt>CPUType</dt>\n<dd>\nA Solaris-specific general processor type name, such as \"i86pc\".\n</dd>\n</dl>\n\n\n\\htmlonly\n</div><div class=\"subsection\" id=\"attributes_info_osdev\">\n\\endhtmlonly\n\\subsection attributes_info_osdev OS Device Information\n\nThese info attributes are attached to OS device objects specified in parentheses.\n\n<dl>\n<dt>Vendor, Model, Revision, SerialNumber, Size, SectorSize (Block OS devices)</dt>\n<dd>The vendor and model names, revision, serial number, size (in kB)\nand SectorSize (in bytes).\n</dd>\n<dt>LinuxDeviceID (Block OS devices)</dt>\n<dd>The major/minor device number such as 8:0 of Linux device.\n</dd>\n<dt>GPUVendor, GPUModel (GPU or Co-Processor OS devices)</dt>\n<dd>The vendor and model names of the GPU device.\n</dd>\n<dt>OpenCLDeviceType, OpenCLPlatformIndex,</dt>\n<dt>OpenCLPlatformName, OpenCLPlatformDeviceIndex (OpenCL OS devices)</dt>\n<dd>The type of OpenCL device,\n the OpenCL platform index and name,\n and the index of the device within the platform.\n</dd>\n<dt>OpenCLComputeUnits, OpenCLGlobalMemorySize (OpenCL OS devices)</dt>\n<dd>The number of compute units and global memory size (in kB) of an OpenCL device.\n</dd>\n<dt>AMDUUID, AMDSerial (RSMI GPU OS devices)</dt>\n<dd>The UUID and serial number of AMD GPUs.\n</dd>\n<dt>XGMIHiveID (RSMI GPU OS devices)</dt>\n<dd>The ID of the group of GPUs (Hive) interconnected by XGMI links\n</dd>\n<dt>XGMIPeers (RSMI GPU OS devices)</dt>\n<dd>The list of RSMI OS devices that are directly connected\n  to the current device through XGMI links.\n  They are given as a space-separated list of object names,\n  for instance <em>rsmi2 rsmi3</em>.\n</dd>\n<dt>NVIDIAUUID, NVIDIASerial (NVML GPU OS devices)</dt>\n<dd>The UUID and serial number of NVIDIA GPUs.\n</dd>\n<dt>CUDAMultiProcessors, CUDACoresPerMP,</dt>\n<dt>CUDAGlobalMemorySize, CUDAL2CacheSize, CUDASharedMemorySizePerMP (CUDA OS devices)</dt>\n<dd>\n The number of shared multiprocessors, the number of cores per\n multiprocessor, the global memory size, the (global) L2 cache size,\n and size of the shared memory in each multiprocessor of a CUDA device.\n Sizes are in kB.\n</dd>\n<dt>Address, Port (Network interface OS devices)</dt>\n<dd>The MAC address and the port number of a software network\ninterface, such as <tt>eth4</tt> on Linux.\n</dd>\n<dt>NodeGUID, SysImageGUID, Port1State, Port2LID, Port2LMC, Port3GID1\n(OpenFabrics OS devices)</dt>\n<dd>The node GUID and GUID mask,\nthe state of a port #1 (value is 4 when active),\nthe LID and LID mask count of port #2,\nand GID #1 of port #3.\n</dd>\n</dl>\n\n\n\\htmlonly\n</div><div class=\"subsection\" id=\"attributes_info_otherobjs\">\n\\endhtmlonly\n\\subsection attributes_info_otherobjs Other Object-specific Information\n\nThese info attributes are attached to objects specified in parentheses.\n\n<dl>\n<dt>DAXDevice (NUMA Nodes)</dt>\n<dd>The name of the Linux DAX device that was used to expose a non-volatile\nmemory region as a volatile NUMA node.\n</dd>\n<dt>PCIBusID (GPUMemory NUMA Nodes)</dt>\n<dd>The PCI bus ID of the GPU whose memory is exposed in this NUMA node.\n</dd>\n<dt>Inclusive (Caches)</dt>\n<dd>The inclusiveness of a cache (1 if inclusive, 0 otherwise).\nCurrently only available on x86 processors.\n</dd>\n<dt>SolarisProcessorGroup (Group)</dt>\n<dd>\nThe Solaris kstat processor group name that was used to build this Group object.\n</dd>\n<dt>PCIVendor, PCIDevice (PCI devices and bridges)</dt>\n<dd>The vendor and device names of the PCI device.\n</dd>\n<dt>PCISlot (PCI devices or Bridges)</dt>\n<dd>The name/number of the physical slot where the device is plugged.\n If the physical device contains PCI bridges above the actual PCI device,\n the attribute may be attached to the highest bridge\n (i.e. the first object that actually appears below the physical slot).\n</dd>\n<dt>Vendor, AssetTag, PartNumber, DeviceLocation, BankLocation (MemoryModule Misc objects)</dt>\n<dd>\nInformation about memory modules (DIMMs) extracted from SMBIOS.\n</dd>\n</dl>\n\n\n\\htmlonly\n</div><div class=\"subsection\" id=\"attributes_info_user\">\n\\endhtmlonly\n\\subsection attributes_info_user User-Given Information\n\nHere is a non-exhaustive list of user-provided info attributes\nthat have a special meaning:\n<dl>\n<dt>lstopoStyle</dt>\n<dd>Enforces the style of an object (background and text colors)\n in the graphical output of lstopo.\n See CUSTOM COLORS in the lstopo(1) manpage for details.\n</dd>\n</dl>\n\n\n\n\n\\page topoattrs Topology Attributes: Distances, Memory Attributes and CPU Kinds\n\n\\htmlonly\n<div class=\"section\">\n\\endhtmlonly\n\nBesides the hierarchy of objects and individual object attributes\n(see \\ref attributes), hwloc may also expose finer information about\nthe hardware organization.\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"topoattrs_distances\">\n\\endhtmlonly\n\\section topoattrs_distances Distances\n\nA machine with 4 CPUs may have identical links between every pairs of CPUs,\nor those CPUs could also only be connected through a ring.\nIn the ring case, accessing the memory of nearby CPUs is slower than local\nmemory, but it is also faster than accessing the memory of CPU on the\nopposite side of the ring.\nThese deep details cannot be exposed in the hwloc hierarchy,\nthat is why hwloc also exposes distances.\n\nDistances are matrices of values between sets of objects,\nusually latencies or bandwidths.\nBy default, hwloc tries to get a matrix of relative latencies\nbetween NUMA nodes when exposed by the hardware.\n\nIn the aforementioned ring case, the matrix could report 10\nfor latency between a NUMA node and itself, 20 for nearby nodes,\nand 30 for nodes that are opposites on the ring.\nThose are theoretical values exposed by hardware vendors\n(in the System Locality Distance Information Table (SLIT) in the ACPI)\nrather than physical latencies.\nThey are mostly meant for comparing node relative distances.\n\nDistances structures currently created by hwloc are:\n<dl>\n<dt>NUMALatency (Linux, Solaris, FreeBSD)</dt>\n<dd>This is the matrix of theoretical latencies described above.\n</dd>\n</dl>\n\nUsers may also specify their own matrices between any set of objects,\neven if these objects are of different types (e.g. bandwidths between GPUs and CPUs).\n\nThe entire API is located in hwloc/distances.h.\nSee also \\ref hwlocality_distances_get,\nas well as \\ref hwlocality_distances_consult\nand \\ref hwlocality_distances_add.\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"topoattrs_memattrs\">\n\\endhtmlonly\n\\section topoattrs_memattrs Memory Attributes\n\nMachines with heterogeneous memory, for instance high-bandwidth memory (HBM),\nnormal memory (DDR), and/or high-capacity slow memory (such as non-volatile\nmemory DIMMs, NVDIMMs) require applications to allocate buffers\nin the appropriate target memory depending on performance and capacity needs.\nThose target nodes may be exposed in the hwloc hierarchy as different\nmemory children but there is a need for performance information to select\nthe appropriate one.\n\nhwloc memory attributes are designed to expose memory\ninformation such as latency, bandwidth, etc.\nUsers may also specify their own attributes and values.\n\nThe memory attributes API is located in hwloc/memattrs.h,\nsee \\ref hwlocality_memattrs and \\ref hwlocality_memattrs_manage for details.\n\n\\htmlonly\n</div><div class=\"section\" id=\"topoattrs_cpukinds\">\n\\endhtmlonly\n\\section topoattrs_cpukinds CPU Kinds\n\nHybrid CPUs may contain different kinds of cores.\nThe CPU kinds API in hwloc/cpukinds.h provides a way to list the sets\nof PUs in each kind and get some optional information about their\nhardware characteristics and efficiency.\n\nIf the operating system provides efficiency information (e.g. Windows 10),\nit is used to rank hwloc CPU kinds by efficiency.\nOtherwise, hwloc implements several heuristics based on frequencies\nand core types (see HWLOC_CPUKINDS_RANKING in \\ref envvar).\n\nAttributes include:\n<dl>\n<dt>FrequencyMaxMHz (Linux)</dt>\n<dd>The maximal operating frequency of the core,\nas reported by <tt>cpufreq</tt> drivers on Linux.\n</dd>\n<dt>FrequencyBaseMHz (Linux)</dt>\n<dd>The base operating frequency of the core,\nas reported by some <tt>cpufreq</tt> drivers on Linux (e.g. <tt>intel_pstate</tt>).\n</dd>\n<dt>CoreType (x86, Linux)</dt>\n<dd>A string describing the kind of core,\ncurrently <tt>IntelAtom</tt> or <tt>IntelCore</tt>,\nas reported by the x86 CPUID instruction and future Linux kernels\non some Intel processors.\n</dd>\n<dt>LinuxCPUType (Linux)</dt>\n<dd>The Linux-specific CPU type found in sysfs,\nsuch as <tt>intel_atom_0</tt>,\nas reported by future Linux kernels on some Intel processors.\n</dd>\n</dl>\n\nSee \\ref hwlocality_cpukinds for details.\n\n\n\n\n\\page xml Importing and exporting topologies from/to XML files\n\n\\htmlonly\n<div class=\"section\">\n\\endhtmlonly\n\nhwloc offers the ability to export topologies to XML files and reload\nthem later. This is for instance useful for loading topologies faster\n(see \\ref faq_xml), manipulating other nodes' topology, or avoiding\nthe need for privileged processes (see \\ref faq_privileged).\n\nTopologies may be exported to XML files thanks to hwloc_topology_export_xml(),\nor to a XML memory buffer with hwloc_topology_export_xmlbuffer().\nThe lstopo program can also serve as a XML topology export tool.\n\nXML topologies may then be reloaded later with hwloc_topology_set_xml()\nand hwloc_topology_set_xmlbuffer().\nThe HWLOC_XMLFILE environment variable also tells hwloc to load the topology\nfrom the given XML file (see \\ref envvar).\n\n\\note Loading XML topologies disables binding because the loaded\ntopology may not correspond to the physical machine that loads it.\nThis behavior may be reverted by asserting that loaded file really\nmatches the underlying system with the HWLOC_THISSYSTEM environment\nvariable or the ::HWLOC_TOPOLOGY_FLAG_IS_THISSYSTEM topology flag.\n\n\\note The topology flag ::HWLOC_TOPOLOGY_FLAG_THISSYSTEM_ALLOWED_RESOURCES\nmay be used to load a XML topology that contains the entire machine\nand restrict it to the part that is actually available to the current\nprocess (e.g. when Linux Cgroup/Cpuset are used to restrict the set\nof resources).\n\n\\note hwloc also offers the ability to export/import \\ref hwlocality_diff.\n\n\\note XML topology files are not localized. They use a dot as a\ndecimal separator. Therefore any exported topology can be\nreloaded on any other machine without requiring to change the\nlocale.\n\n\\note XML exports contain all details about the platform. It means\nthat two very similar nodes still have different XML exports\n(e.g. some serial numbers or MAC addresses are different).\nIf a less precise exporting/importing is required, one may want to\nlook at \\ref synthetic instead.\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"xml_backends\">\n\\endhtmlonly\n\\section xml_backends libxml2 and minimalistic XML backends\n\nhwloc offers two backends for importing/exporting XML.\n\nFirst, it can use the libxml2 library for importing/exporting XML\nfiles. It features full XML support, for instance when those files\nhave to be manipulated by non-hwloc software (e.g. a XSLT parser).\nThe libxml2 backend is enabled by default if libxml2 development\nheaders are available (the relevant development package is usually\n<tt>libxml2-devel</tt> or <tt>libxml2-dev</tt>).\n\nIf libxml2 is not available at configure time,\nor if <tt>\\--disable-libxml2</tt> is passed, hwloc falls back to a\ncustom backend.\nContrary to the aforementioned full XML backend with libxml2, this\nminimalistic XML backend cannot be guaranteed to work with external\nprograms.\nIt should only be assumed to be compatible with the same hwloc\nrelease (even if using the libxml2 backend).\nIts advantage is, however, to always be available without requiring\nany external dependency.\n\nIf libxml2 is available but the core hwloc library should not directly\ndepend on it, the libxml2 support may be built as a dynamicall-loaded\nplugin.\nOne should pass <tt>\\--enable-plugins</tt> to enable plugin support\n(when supported) and build as plugins all component that support it.\nOr pass <tt>\\--enable-plugins=xml_libxml</tt> to only build this\nlibxml2 support as a plugin.\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"xml_errors\">\n\\endhtmlonly\n\\section xml_errors XML import error management\n\nImporting XML files can fail at least because of file access errors,\ninvalid XML syntax, non-hwloc-valid XML contents,\nor incompatibilities between hwloc releases (see \\ref faq_version_xml).\n\nBoth backend cannot detect all these errors when the input XML\nfile or buffer is selected (when hwloc_topology_set_xml() or\nhwloc_topology_set_xmlbuffer() is called).\nSome errors such non-hwloc-valid contents can only be detected\nlater when loading the topology with hwloc_topology_load().\n\nIt is therefore strongly recommended to check the return value of\nboth hwloc_topology_set_xml() (or hwloc_topology_set_xmlbuffer())\nand hwloc_topology_load() to handle all these errors.\n\n\n\n\n\\page synthetic Synthetic topologies\n\n\\htmlonly\n<div class=\"section\">\n\\endhtmlonly\n\nhwloc may load fake or remote topologies so as to consult them\nwithout having the underlying hardware available.\nAside from loading XML topologies, hwloc also enables the building of\n<em>synthetic</em> topologies that are described by a single string\nlisting the arity of each levels.\n\nFor instance, lstopo may create a topology made of 2 packages,\ncontaining a single NUMA node and a L2 cache above two\nsingle-threaded cores:\n\n\\verbatim\n$ lstopo -i \"pack:2 node:1 l2:1 core:2 pu:1\" -\nMachine (2048MB)\n  Package L#0\n    NUMANode L#0 (P#0 1024MB)\n    L2 L#0 (4096KB)\n      Core L#0 + PU L#0 (P#0)\n      Core L#1 + PU L#1 (P#1)\n  Package L#1\n    NUMANode L#1 (P#1 1024MB)\n    L2 L#1 (4096KB)\n      Core L#2 + PU L#2 (P#2)\n      Core L#3 + PU L#3 (P#3)\n\\endverbatim\n\nReplacing <tt>-</tt> with <tt>file.xml</tt> in this command line\nwill export this topology to XML as usual.\n\n\\note Synthetic topologies offer a very basic way to export a\ntopology and reimport it on another machine. It is a lot less\nprecise than XML but may still be enough when only the hierarchy\nof resources matters.\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"synthetic_string\">\n\\endhtmlonly\n\\section synthetic_string Synthetic description string\n\nEach item in the description string gives the type of the level and\nthe number of such children under each object of the previous level.\nThat is why the above topology contains 4 cores (2 cores times 2 nodes).\n\nThese type names must be written as\n<tt>numanode</tt>, <tt>package</tt>, <tt>core</tt>,\n<tt>l2u</tt>, <tt>l1i</tt>, <tt>pu</tt>, <tt>group</tt>\n(hwloc_obj_type_sscanf() is used for parsing the type names).\nThey do not need to be written case-sensitively, nor entirely\n(as long as there is no ambiguity, 2 characters such as <tt>ma</tt>\n select a Machine level).\nNote that I/O and Misc objects are not available.\n\nInstead of specifying the type of each level, it is possible to\njust specify the arities and let hwloc choose all types\naccording to usual topologies. The following examples are therefore\nequivalent:\n\\verbatim\n$ lstopo -i \"2 3 4 5 6\"\n$ lstopo -i \"Package:2 NUMANode:3 L2Cache:4 Core:5 PU:6\"\n\\endverbatim\n\nNUMA nodes are handled in a special way since they are not part of the\nmain CPU hierarchy but rather attached below it as memory children.\nThus, <tt>NUMANode:3</tt> actually means <tt>Group:3</tt> where one\nNUMA node is attached below each group.\nThese groups are merged back into the parent when possible\n(typically when a single NUMA node is requested below each parent).\n\nIt is also possible the explicitly attach NUMA nodes to specific levels.\nFor instance, a topology similar to a Intel Xeon Phi processor\n(with 2 NUMA nodes per 16-core group) may be created with:\n\\verbatim\n$ lstopo -i \"package:1 group:4 [numa] [numa] core:16 pu:4\"\n\\endverbatim\n\nThe root object does not appear in the synthetic description string\nsince it is always a Machine object.\nTherefore the Machine type is disallowed in the description as well.\n\nA NUMA level (with a single NUMA node) is automatically added if needed.\n\nEach item may be followed parentheses containing a list of\nspace-separated attributes. For instance:\n<ul>\n<li>\n <tt>L2iCache:2(size=32kB)</tt> specifies 2 children\n of 32kB level-2 instruction caches.\n The size may be specified in bytes (without any unit suffix) or as TB, GB, MB or kB.\n</li>\n<li>\n <tt>NUMANode:3(memory=16MB)</tt> specifies 3 NUMA nodes with 16MB each.\n The size may be specified in bytes (without any unit suffix) or as TB, GB, MB or kB.\n</li>\n<li>\n <tt>PU:2(indexes=0,2,1,3)</tt> specifies 2 PU children and the\n full list of OS indexes among the entire set of 4 PU objects.\n</li>\n<li>\n <tt>PU:2(indexes=numa:core)</tt> specifies 2 PU children whose\n OS indexes are interleaved by NUMA node first and then by package.\n</li>\n<li>\n Attributes in parentheses at the very beginning of the description\n apply to the root object.\n</li>\n</ul>\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"synthetic_use\">\n\\endhtmlonly\n\\section synthetic_use Loading a synthetic topology\n\nAside from lstopo, the hwloc programming interface offers the same\nability by passing the synthetic description string to\nhwloc_topology_set_synthetic() before hwloc_topology_load().\n\nSynthetic topologies are created by the <tt>synthetic</tt> component.\nThis component may be enabled by force by setting the HWLOC_SYNTHETIC\nenvironment variable to something such as\n<tt>node:2 core:3 pu:4</tt>.\n\nLoading a synthetic topology disables binding support since the\ntopology usually does not match the underlying hardware.\nBinding may be reenabled as usual by setting HWLOC_THISSYSTEM=1 in the\nenvironment or by setting the ::HWLOC_TOPOLOGY_FLAG_IS_THISSYSTEM\ntopology flag.\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"synthetic_export\">\n\\endhtmlonly\n\\section synthetic_export Exporting a topology as a synthetic string\n\nThe function hwloc_topology_export_synthetic() may export\na topology as a synthetic string.\nIt offers a convenient way to quickly describe the contents of a machine.\nThe lstopo tool may also perform such an export by forcing the output format.\n\n\\verbatim\n$ lstopo --of synthetic --no-io\nPackage:1 L3Cache:1 L2Cache:2 L1dCache:1 L1iCache:1 Core:1 PU:2\n\\endverbatim\n\nThe exported string may be passed back to hwloc for recreating\nanother similar topology (see also \\ref faq_version_synthetic).\nThe entire tree will be similar, but some attributes such as\nthe processor model will be missing.\n\nSuch an export is only possible if the topology is totally symmetric.\nIt means that the <tt>symmetric_subtree</tt> field of the root object\nis set.\nAlso memory children should be attached in a symmetric way\n(e.g. the same number of memory children below each Package object, etc.).\nHowever, I/O devices and Misc objects are ignored when looking at\nsymmetry and exporting the string.\n\n\n\n\n\\page interoperability Interoperability With Other Software\n\n\\htmlonly\n<div class=\"section\">\n\\endhtmlonly\n\nAlthough hwloc offers its own portable interface, it still may have to\ninteroperate with specific or non-portable libraries that manipulate\nsimilar kinds of objects.  hwloc therefore offers several specific\n\"helpers\" to assist converting between those specific interfaces and\nhwloc.\n\nSome external libraries may be specific to a particular OS; others may\nnot always be available.  The hwloc core therefore generally does not\nexplicitly depend on these types of libraries.  However, when a custom\napplication uses or otherwise depends on such a library, it may\noptionally include the corresponding hwloc helper to extend the hwloc\ninterface with dedicated helpers.\n\nMost of these helpers use structures that are specific to these external\nlibraries and only meaningful on the local machine. If so, the helper\nrequires the input topology to match the current machine.\nSome helpers also require I/O device discovery to be supported and\nenabled for the current topology.\n\n<dl>\n\n<dt>Linux specific features</dt>\n <dd>\n  hwloc/linux.h offers Linux-specific helpers that utilize some\n  non-portable features of the Linux system, such as binding threads\n  through their thread ID (\"tid\") or parsing kernel CPU mask files.\n </dd>\n\n<dt>Linux libnuma</dt>\n <dd>\n  hwloc/linux-libnuma.h provides conversion helpers between hwloc CPU\n  sets and libnuma-specific types, such as  bitmasks.  It\n  helps you use libnuma memory-binding functions with hwloc CPU sets.\n </dd>\n\n<dt>Glibc</dt>\n <dd>\n  hwloc/glibc-sched.h offers conversion routines between Glibc and\n  hwloc CPU sets in order to use hwloc with functions such as\n  sched_getaffinity() or pthread_attr_setaffinity_np().\n </dd>\n\n<dt>OpenFabrics Verbs</dt>\n <dd>\n  hwloc/openfabrics-verbs.h helps interoperability with the\n  OpenFabrics Verbs interface.  For example, it can return a list of\n  processors near an OpenFabrics device.\n  It may also return the corresponding OS device hwloc object for further\n  information (if I/O device discovery is enabled).\n </dd>\n\n<dt>OpenCL</dt>\n <dd>\n  hwloc/opencl.h enables interoperability with the OpenCL interface.\n  Only the AMD and NVIDIA implementations currently offer locality information.\n  It may return the list of processors near a GPU given as\n  a <tt>cl_device_id</tt>.\n  It may also return the corresponding OS device hwloc object for further\n  information (if I/O device discovery is enabled).\n </dd>\n\n<dt>AMD ROCm SMI Library (RSMI)</dt>\n <dd>\n  hwloc/rsmi.h enables interoperability with the AMD ROCm SMI interface.\n  It may return the list of processors near an AMD GPU.\n  It may also return the corresponding OS device hwloc object for further\n  information (if I/O device discovery is enabled).\n </dd>\n\n<dt>NVIDIA CUDA</dt>\n <dd>\n  hwloc/cuda.h and hwloc/cudart.h enable interoperability with\n  NVIDIA CUDA Driver and Runtime interfaces. For instance, it may\n  return the list of processors near NVIDIA GPUs.\n  It may also return the corresponding OS device hwloc object for further\n  information (if I/O device discovery is enabled).\n </dd>\n\n<dt>NVIDIA Management Library (NVML)</dt>\n <dd>\n  hwloc/nvml.h enables interoperability with the NVIDIA NVML interface.\n  It may return the list of processors near a NVIDIA GPU given as\n  a <tt>nvmlDevice_t</tt>.\n  It may also return the corresponding OS device hwloc object for further\n  information (if I/O device discovery is enabled).\n </dd>\n\n<dt>NVIDIA displays</dt>\n <dd>\n  hwloc/gl.h enables interoperability with NVIDIA displays\n  using the NV-CONTROL X extension (NVCtrl library).\n  If I/O device discovery is enabled, it may return the OS device\n  hwloc object that corresponds to a display\n  given as a name such as <em>:0.0</em>\n  or given as a port/device pair (server/screen).\n </dd>\n\n<dt>Taskset command-line tool</dt>\n <dd>\n  The taskset command-line tool is widely used for binding\n  processes. It manipulates CPU set strings in a format that\n  is slightly different from hwloc's one (it does not divide the\n  string in fixed-size subsets and separates them with commas).\n  To ease interoperability, hwloc offers routines to convert\n  hwloc CPU sets from/to taskset-specific string format.\n  Most hwloc command-line tools also support the <tt>\\--taskset</tt>\n  option to manipulate taskset-specific strings.\n </dd>\n\n</dl>\n\n\n\n\\page threadsafety Thread Safety\n\n\\htmlonly\n<div class=\"section\">\n\\endhtmlonly\n\nLike most libraries that mainly fill data structures, hwloc is not\nthread safe but rather reentrant: all state is held in a\n::hwloc_topology_t instance without mutex protection.  That means, for\nexample, that two threads can safely operate on and modify two\ndifferent ::hwloc_topology_t instances, but they should not\nsimultaneously invoke functions that modify the <em>same</em>\ninstance.  Similarly, one thread should not modify a\n::hwloc_topology_t instance while another thread is reading or\ntraversing it.  However, two threads can safely read or traverse the\nsame ::hwloc_topology_t instance concurrently.\n\nWhen running in multiprocessor environments, be aware that proper thread\nsynchronization and/or memory coherency protection is needed to pass hwloc\ndata (such as ::hwloc_topology_t pointers) from one processor\nto another (e.g., a mutex, semaphore, or a memory barrier).\nNote that this is not a hwloc-specific requirement, but it is worth\nmentioning.\n\nFor reference, ::hwloc_topology_t modification operations include\n(but may not be limited to):\n\n<dl>\n\n<dt>Creation and destruction</dt>\n  <dd><tt>hwloc_topology_init(), hwloc_topology_load(),\n  hwloc_topology_destroy()</tt> (see \\ref hwlocality_creation) imply\n  major modifications of the structure, including freeing some\n  objects.  No other thread cannot access the topology or any of its\n  objects at the same time.\n\n  Also references to objects inside the topology are not valid anymore\n  after these functions return.  </dd>\n\n<dt>Runtime topology modifications</dt>\n  <dd><tt>hwloc_topology_insert_misc_object()</tt>,\n  <tt>hwloc_topology_alloc_group_object()</tt>,\n  and <tt>hwloc_topology_insert_group_object()</tt>\n  (see \\ref hwlocality_tinker) may modify the topology significantly by adding\n  objects inside the tree, changing the topology depth, etc.\n\n  <tt>hwloc_distances_add()</tt> and <tt>hwloc_distances_remove()</tt>\n  (see \\ref hwlocality_distances_add) modify the list of distance structures\n  in the topology, and the former may even insert new Group objects.\n\n  <tt>hwloc_memattr_register()</tt> and <tt>hwloc_memattr_set_value()</tt>\n  (see \\ref hwlocality_memattrs_manage) modify the memory attributes\n  of the topology.\n\n  <tt>hwloc_topology_restrict()</tt> modifies the topology even more\n  dramatically by removing some objects.\n\n  <tt>hwloc_topology_refresh()</tt> updates some internal cached structures.\n  (see below).\n\n  Although references to former objects <em>may</em> still be valid\n  after insertion or restriction, it is strongly advised to not rely on any such\n  guarantee and always re-consult the topology to reacquire new\n  instances of objects.  </dd>\n\n<dt>Consulting distances</dt>\n  <dd>\n  <tt>hwloc_distances_get()</tt> and its variants are thread-safe\n  except if the topology was recently modified\n  (because distances may involve objects that were removed).\n\n  Whenever the topology is modified (see above), <tt>hwloc_topology_refresh()</tt>\n  should be called in the same thread-safe context to force the refresh\n  of internal distances structures.\n  A call to <tt>hwloc_distances_get()</tt> may also refresh\n  distances-related structures.\n\n  Once this refresh has been performed, multiple <tt>hwloc_distances_get()</tt>\n  may then be performed concurrently by multiple threads.\n  </dd>\n\n<dt>Consulting memory attributes</dt>\n  <dd>\n  Functions consulting memory attributes in hwloc/memattrs.h\n  are thread-safe except if the topology was recently modified\n  (because memory attributes may involve objects that were removed).\n\n  Whenever the topology is modified (see above), <tt>hwloc_topology_refresh()</tt>\n  should be called in the same thread-safe context to force the refresh\n  of internal memory attribute structures.\n  A call to <tt>hwloc_memattr_get_value()</tt> or\n  <tt>hwloc_memattr_get_targets()</tt> may also refresh internal\n  structures for a given memory attribute.\n\n  Once this refresh has been performed, multiple functions consulting\n  memory attributes may then be performed concurrently by multiple threads.\n  </dd>\n\n<dt>Locating topologies</dt>\n\n  <dd><tt>hwloc_topology_set_*</tt>\n  (see \\ref hwlocality_configuration) do not modify the topology\n  directly, but they do modify internal structures describing the\n  behavior of the upcoming invocation of <tt>hwloc_topology_load()</tt>.\n  Hence, all of these functions should not be used concurrently.\n  </dd>\n\n</dl>\n\n\n\n\\page plugins Components and plugins\n\n\\htmlonly\n<div class=\"section\">\n\\endhtmlonly\n\nhwloc is organized in components that are responsible for discovering\nobjects.\nDepending on the topology configuration, some components will be used,\nsome will be ignored.\nThe usual default is to enable the native operating system component,\n(e.g. <tt>linux</tt> or <tt>solaris</tt>) and the\n<tt>pci</tt> miscellaneous component.\nIf available, an architecture-specific component (such as <tt>x86</tt>)\nmay also improve the topology detection.\n\nIf a XML topology is loaded, the <tt>xml</tt> discovery  component\nwill be used instead of all other components.\nIt internally uses a specific class of components for the actual XML\nimport/export routines (<tt>xml_libxml</tt> and <tt>xml_nolibxml</tt>)\nbut these will not be discussed here (see \\ref xml_backends).\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"plugins_default\">\n\\endhtmlonly\n\\section plugins_default Components enabled by default\n\nThe hwloc core contains a list of components sorted by priority.\nEach one is enabled as long as it does not conflict with the\npreviously enabled ones.\nThis includes native operating system components,\narchitecture-specific ones, and if available, I/O components\nsuch as <tt>pci</tt>.\n\nUsually the native operating system component\n(when it exists, e.g. <tt>linux</tt> or <tt>aix</tt>)\nis enabled first.\nThen hwloc looks for an architecture specific component\n(e.g. <tt>x86</tt>).\nFinally there also exist a basic component (<tt>no_os</tt>)\nthat just tries to discover the number of PUs in the system.\n\nEach component discovers as much topology information as possible.\nMost of them, including most native OS components, do nothing\nunless the topology is still empty.\nSome others, such as <tt>x86</tt> and <tt>pci</tt>,\ncan complete and annotate what other backends found earlier.\nDiscovery is performed by phases: CPUs are first discovered,\nthen memory is attached, then PCI, etc.\n\nDefault priorities ensure that clever components are invoked first.\nNative operating system components have higher priorities,\nand are therefore invoked first, because they likely offer\nvery detailed topology information.\nIf needed, it will be later extended by architecture-specific\ninformation (e.g. from the <tt>x86</tt> component).\n\nIf any configuration function such as hwloc_topology_set_xml()\nis used before loading the topology, the corresponding component\nis enabled first.\nThen, as usual, hwloc enables any other component (based on\npriorities) that does not conflict.\n\nCertain components that manage a virtual topology, for instance XML\ntopology import or synthetic topology description,\nconflict with all other components.\nTherefore, one of them may only be loaded\n(e.g. with <tt>hwloc_topology_set_xml()</tt>)\nif no other component is enabled.\n\nThe environment variable <tt>HWLOC_COMPONENTS_VERBOSE</tt>\nmay be set to get verbose messages about component registration\n(including their priority) and enabling.\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"plugins_select\">\n\\endhtmlonly\n\\section plugins_select Selecting which components to use\n\nIf no topology configuration functions such as\n<tt>hwloc_topology_set_synthetic()</tt> have been called,\nplugins may be selected with environment variables such as\n<tt>HWLOC_XMLFILE</tt>, <tt>HWLOC_SYNTHETIC</tt>,\n<tt>HWLOC_FSROOT</tt>, or <tt>HWLOC_CPUID_PATH</tt> (see \\ref envvar).\n\nFinally, the environment variable <tt>HWLOC_COMPONENTS</tt>\nresets the list of selected components.\nIf the variable is set and empty (or set to a single comma separating nothing,\nsince some operating systems do not accept empty variables),\nthe normal plugin priority order is used.\n\nIf the variable is set to <tt>x86</tt> in this variable will cause\nthe <tt>x86</tt> component to take precedence over any other component,\nincluding the native operating system component.\nIt is therefore loaded first, before hwloc tries to load all remaining\nnon-conflicting components.\nIn this case, <tt>x86</tt> would take care of discovering everything\nit supports, instead of only completing what the native OS information.\nThis may be useful if the native component is buggy on some platforms.\n\nIt is possible to prevent some components from being loaded by prefixing their\nname with <tt>-</tt> in the list. For instance <tt>x86,-pci</tt> will load the\n<tt>x86</tt> component, then let hwloc load all the usual components except\n<tt>pci</tt>.\nA single component phase may also be blacklisted, for instance with <tt>-linux:io</tt>.\nhwloc_topology_set_components() may also be used inside the program\nto prevent the loading of a specific component (or phases) for the target topology.\n\nIt is possible to prevent all remaining components from being loaded\nby placing <tt>stop</tt> in the environment variable.\nOnly the components listed before this keyword will be enabled.\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"plugins_load\">\n\\endhtmlonly\n\\section plugins_load Loading components from plugins\n\nComponents may optionally be built as plugins so that the hwloc core\nlibrary does not directly depend on their dependencies (for instance\nthe <tt>libpciaccess</tt> library).\nPlugin support may be enabled with the <tt>\\--enable-plugins</tt>\nconfigure option.\nAll components buildable as plugins will then be built as plugins.\nThe configure option may be given a comma-separated list of component\nnames to specify the exact list of components to build as plugins.\n\nPlugins are built as independent dynamic libraries that are installed\nin <tt>$libdir/hwloc</tt>.\nAll plugins found in this directory are loaded during\n<tt>topology_init()</tt>\n(unless blacklisted in <tt>HWLOC_PLUGINS_BLACKLIST</tt>, see \\ref envvar).\nA specific list of directories (colon-separated) to scan may be\nspecified in the <tt>HWLOC_PLUGINS_PATH</tt> environment variable.\n\nNote that loading a plugin just means that the corresponding component\nis registered to the hwloc core.\nComponents are then only enabled if the topology configuration\nrequests it, as explained in the previous sections.\n\nAlso note that plugins should carefully be enabled and used when\nembedding hwloc in another project, see \\ref embed for details.\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"plugins_list\">\n\\endhtmlonly\n\\section plugins_list Existing components and plugins\n\nAll components distributed within hwloc are listed below.\nThe list of actually available components may be listed\nat running with the <tt>HWLOC_COMPONENTS_VERBOSE</tt>\nenvironment variable (see \\ref envvar).\n\n<dl>\n\n<dt>linux</dt>\n<dd>\n The official component for discovering CPU, memory and I/O devices on Linux.\n It discovers PCI devices without the help of external libraries such as libpciaccess,\n but requires the pci component for adding vendor/device names to PCI objects.\n It also discovers many kinds of Linux-specific OS devices.\n</dd>\n<dt>aix, darwin, freebsd, hpux, netbsd, solaris, windows</dt>\n<dd>\n Each officially supported operating system has its own native component,\n which is statically built when supported, and which is used by default.\n</dd>\n<dt>x86</dt>\n<dd>\n The x86 architecture (either 32 or 64 bits) has its own component\n that may complete or replace the previously-found CPU information.\n It is statically built when supported.\n</dd>\n<dt>bgq</dt>\n<dd>\n This component is specific to IBM BlueGene/Q compute node (running CNK).\n It is built and enabled by default when <tt>\\--host=powerpc64-bgq-linux</tt>\n is passed to configure (see \\ref faq_bgq).\n</dd>\n<dt>no_os</dt>\n<dd>\n A basic component that just tries to detect the number of processing\n units in the system. It mostly serves on operating systems that are\n not natively supported.\n It is always statically built.\n</dd>\n<dt>pci</dt>\n<dd>\n PCI object discovery uses the external pciaccess library (aka libpciaccess);\n see \\ref iodevices. It may also annotate existing PCI devices with vendor\n and device names.\n <b>It may be built as a plugin</b>.\n</dd>\n<dt>opencl</dt>\n<dd>\n The OpenCL component creates co-processor OS device objects such as\n <em>opencl0d0</em> (first device of the first OpenCL platform)\n or <em>opencl1d3</em> (fourth device of the second platform).\n Only the AMD and NVIDIA OpenCL implementations currently offer locality\n information.\n <b>It may be built as a plugin</b>.\n</dd>\n<dt>rsmi</dt>\n<dd>\n This component creates GPU OS device objects such as\n <em>rsmi0</em> for describing AMD GPUs.\n <b>It may be built as a plugin</b>.\n</dd>\n<dt>cuda</dt>\n<dd>\n This component creates co-processor OS device objects such as <em>cuda0</em>\n that correspond to NVIDIA GPUs used with CUDA library.\n <b>It may be built as a plugin</b>.\n</dd>\n<dt>nvml</dt>\n<dd>\n Probing the NVIDIA Management Library creates OS device objects\n such as <em>nvml0</em> that are useful for batch schedulers.\n It also detects the actual PCIe link bandwidth without depending\n on power management state and without requiring administrator\n privileges.\n <b>It may be built as a plugin</b>.\n</dd>\n<dt>gl</dt>\n<dd>\n Probing the NV-CONTROL X extension (NVCtrl library) creates OS\n device objects such as <em>:0.0</em> corresponding to NVIDIA\n displays.\n They are useful for graphical applications that need to place\n computation and/or data near a rendering GPU.\n <b>It may be built as a plugin</b>.\n</dd>\n<dt>synthetic</dt>\n<dd>\n Synthetic topology support (see \\ref synthetic) is always built statically.\n</dd>\n<dt>xml</dt>\n<dd>\n XML topology import (see \\ref xml) is always built statically.\n It internally uses one of the XML backends (see \\ref xml_backends).\n <ul>\n <li><b>xml_nolibxml</b> is a basic and hwloc-specific XML import/export.\n  It is always statically built.\n </li>\n <li><b>xml_libxml</b> relies on the external libxml2 library for\n  provinding a feature-complete XML import/export.\n  <b>It may be built as a plugin</b>.\n </li>\n</dd>\n<dt>fake</dt>\n<dd>\n A dummy plugin that does nothing but is used for debugging plugin support.\n</dd>\n</dl>\n\n\n\n\n\\page embed Embedding hwloc in Other Software\n\n\\htmlonly\n<div class=\"section\">\n\\endhtmlonly\n\nIt can be desirable to include hwloc in a larger software package (be\nsure to check out the LICENSE file) so that users don't have to\nseparately download and install it before installing your software.\nThis can be advantageous to ensure that your software uses a\nknown-tested/good version of hwloc, or for use on systems that do not\nhave hwloc pre-installed.\n\nWhen used in \"embedded\" mode, hwloc will:\n\n- not install any header files\n- not build any documentation files\n- not build or install any executables or tests\n- not build <tt>libhwloc.*</tt> -- instead, it will build\n  <tt>libhwloc_embedded.*</tt>\n\nThere are two ways to put hwloc into \"embedded\" mode.  The first is\ndirectly from the configure command line:\n\n\\verbatim\nshell$ ./configure --enable-embedded-mode ...\n\\endverbatim\n\nThe second requires that your software project uses the GNU Autoconf /\nAutomake / Libtool tool chain to build your software.  If you do this,\nyou can directly integrate hwloc's m4 configure macro into your\nconfigure script.  You can then invoke hwloc's configuration tests and\nbuild setup by calling a m4 macro (see below).\n\nAlthough hwloc dynamic shared object plugins may be used in embedded\nmode, the embedder project will have to manually setup dlopen or libltdl in its\nbuild system so that hwloc can load its plugins at run time.\nAlso, embedders should be aware of complications that can arise due to\npublic and private linker namespaces (e.g., if the embedder project is\nloaded into a private namespace and then hwloc tries to dynamically\nload its plugins, such loading may fail since the hwloc plugins can't\nfind the hwloc symbols they need).\nThe embedder project is <b>strongly</b> advised not to use hwloc's\ndynamically loading plugins / dlopen / libltdl capability.\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"embedding_m4\">\n\\endhtmlonly\n\\section embedding_m4 Using hwloc's M4 Embedding Capabilities\n\nEvery project is different, and there are many different ways of\nintegrating hwloc into yours.  What follows is <em>one</em> example of\nhow to do it.\n\nIf your project uses recent versions Autoconf, Automake, and Libtool\nto build, you can use hwloc's embedded m4 capabilities.  We have\ntested the embedded m4 with projects that use Autoconf 2.65, Automake\n1.11.1, and Libtool 2.2.6b.  Slightly earlier versions of may also\nwork but are untested.  Autoconf versions prior to 2.65 are almost\ncertain to not work.\n\nYou can either copy all the config/hwloc*m4 files from the hwloc\nsource tree to the directory where your project's m4 files reside, or\nyou can tell aclocal to find more m4 files in the embedded hwloc's\n\"config\" subdirectory (e.g., add \"-Ipath/to/embedded/hwloc/config\" to\nyour Makefile.am's ACLOCAL_AMFLAGS).\n\nThe following macros can then be used from your configure script (only\nHWLOC_SETUP_CORE <em>must</em> be invoked if using the m4 macros):\n\n- HWLOC_SETUP_CORE(config-dir-prefix, action-upon-success,\n  action-upon-failure, print_banner_or_not): Invoke the hwloc\n  configuration tests and setup the hwloc tree to build.  The first\n  argument is the prefix to use for AC_OUTPUT files -- it's where the\n  hwloc tree is located relative to <tt>$top_srcdir</tt>.  Hence, if\n  your embedded hwloc is located in the source tree at contrib/hwloc,\n  you should pass <tt>[contrib/hwloc]</tt> as the first argument.  If\n  HWLOC_SETUP_CORE and the rest of <tt>configure</tt> completes\n  successfully, then \"make\" traversals of the hwloc tree with standard\n  Automake targets (all, clean, install, etc.) should behave as\n  expected.  For example, it is safe to list the hwloc directory in\n  the SUBDIRS of a higher-level Makefile.am.  The last argument, if\n  not empty, will cause the macro to display an announcement banner\n  that it is starting the hwloc core configuration tests.\n\n  HWLOC_SETUP_CORE will set the following environment variables and\n  AC_SUBST them: HWLOC_EMBEDDED_CFLAGS, HWLOC_EMBEDDED_CPPFLAGS, and\n  HWLOC_EMBEDDED_LIBS.  These flags are filled with the values\n  discovered in the hwloc-specific m4 tests, and can be used in your\n  build process as relevant.  The _CFLAGS, _CPPFLAGS, and _LIBS\n  variables are necessary to build libhwloc (or libhwloc_embedded)\n  itself.  \n\n  HWLOC_SETUP_CORE also sets HWLOC_EMBEDDED_LDADD environment variable\n  (and AC_SUBSTs it) to contain the location of the\n  libhwloc_embedded.la convenience Libtool archive.  It can be used in\n  your build process to link an application or other library against\n  the embedded hwloc library.\n\n  <strong>NOTE: If the HWLOC_SET_SYMBOL_PREFIX macro is used, it must\n  be invoked <em>before</em> HWLOC_SETUP_CORE.</strong>\n\n- HWLOC_BUILD_STANDALONE: HWLOC_SETUP_CORE defaults to building hwloc\n  in an \"embedded\" mode (described above).  If HWLOC_BUILD_STANDALONE\n  is invoked *before* HWLOC_SETUP_CORE, the embedded definitions will\n  not apply (e.g., libhwloc.la will be built, not\n  libhwloc_embedded.la).\n\n- HWLOC_SET_SYMBOL_PREFIX(foo_): Tells the hwloc to prefix all of\n  hwloc's types and public symbols with \"foo_\"; meaning that function\n  hwloc_init() becomes foo_hwloc_init().  Enum values are prefixed\n  with an upper-case translation if the prefix supplied;\n  HWLOC_OBJ_CORE becomes FOO_hwloc_OBJ_CORE.  This is recommended\n  behavior if you are including hwloc in middleware -- it is possible\n  that your software will be combined with other software that links\n  to another copy of hwloc.  If both uses of hwloc utilize different\n  symbol prefixes, there will be no type/symbol clashes, and\n  everything will compile, link, and run successfully.  If you both\n  embed hwloc without changing the symbol prefix and also link against\n  an external hwloc, you may get multiple symbol definitions when\n  linking your final library or application.\n\n- HWLOC_SETUP_DOCS, HWLOC_SETUP_UTILS, HWLOC_SETUP_TESTS: These three\n  macros only apply when hwloc is built in \"standalone\" mode (i.e.,\n  they should NOT be invoked unless HWLOC_BUILD_STANDALONE has already\n  been invoked).\n\n- HWLOC_DO_AM_CONDITIONALS: If you embed hwloc in a larger project and\n  build it conditionally with Automake (e.g., if HWLOC_SETUP_CORE is\n  invoked conditionally), you must unconditionally invoke\n  HWLOC_DO_AM_CONDITIONALS to avoid warnings from Automake (for the\n  cases where hwloc is not selected to be built).  This macro is\n  necessary because hwloc uses some AM_CONDITIONALs to build itself,\n  and AM_CONDITIONALs cannot be defined conditionally.  Note that it\n  is safe (but unnecessary) to call HWLOC_DO_AM_CONDITIONALS even if\n  HWLOC_SETUP_CORE is invoked unconditionally.  If you are not using\n  Automake to build hwloc, this macro is unnecessary (and will actually\n  cause errors because it invoked AM_* macros that will be undefined).\n\n<strong>NOTE:</strong> When using the HWLOC_SETUP_CORE m4 macro, it may\nbe necessary to explicitly invoke AC_CANONICAL_TARGET (which requires\nconfig.sub and config.guess) and/or AC_USE_SYSTEM_EXTENSIONS macros\nearly in the configure script (e.g., after AC_INIT but before\nAM_INIT_AUTOMAKE).  See the Autoconf documentation for further\ninformation.\n\nAlso note that hwloc's top-level configure.ac script uses exactly the\nmacros described above to build hwloc in a standalone mode (by\ndefault).  You may want to examine it for one example of how these\nmacros are used.\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"embedding_example\">\n\\endhtmlonly\n\\section embedding_example Example Embedding hwloc\n\nHere's an example of integrating with a larger project named sandbox\nthat already uses Autoconf, Automake, and Libtool to build itself:\n\n\\verbatim\n# First, cd into the sandbox project source tree\nshell$ cd sandbox\nshell$ cp -r /somewhere/else/hwloc-<version> my-embedded-hwloc\nshell$ edit Makefile.am\n  1. Add \"-Imy-embedded-hwloc/config\" to ACLOCAL_AMFLAGS\n  2. Add \"my-embedded-hwloc\" to SUBDIRS\n  3. Add \"$(HWLOC_EMBEDDED_LDADD)\" and \"$(HWLOC_EMBEDDED_LIBS)\" to \n     sandbox's executable's LDADD line.  The former is the name of the \n     Libtool convenience library that hwloc will generate.  The latter \n     is any dependent support libraries that may be needed by \n     $(HWLOC_EMBEDDED_LDADD).\n  4. Add \"$(HWLOC_EMBEDDED_CFLAGS)\" to AM_CFLAGS\n  5. Add \"$(HWLOC_EMBEDDED_CPPFLAGS)\" to AM_CPPFLAGS\nshell$ edit configure.ac\n  1. Add \"HWLOC_SET_SYMBOL_PREFIX(sandbox_hwloc_)\" line\n  2. Add \"HWLOC_SETUP_CORE([my-embedded-hwloc], [happy=yes], [happy=no])\" line\n  3. Add error checking for happy=no case\nshell$ edit sandbox.c\n  1. Add #include <hwloc.h>\n  2. Add calls to sandbox_hwloc_init() and other hwloc API functions\n\\endverbatim\n\nNow you can bootstrap, configure, build, and run the sandbox as normal\n-- all calls to \"sandbox_hwloc_*\" will use the embedded hwloc rather\nthan any system-provided copy of hwloc.\n\n\n\n\n\n\n\\page faq Frequently Asked Questions\n\n\n\\htmlonly\n<div class=\"section\" id=\"faq1\">\n\\endhtmlonly\n\\section faq1 Concepts\n\n\n\\subsection faq_why I only need binding, why should I use hwloc ?\n\nhwloc is its portable API that works on a variety of operating\nsystems.\nIt supports binding of threads, processes and memory buffers\n(see \\ref hwlocality_cpubinding and \\ref hwlocality_membinding).\nEven if some features are not supported on some systems,\nusing hwloc is much easier than reimplementing your own portability layer.\n\nMoreover, hwloc provides knowledge of cores and hardware threads.\nIt offers easy ways to bind tasks to individual hardware threads,\nor to entire multithreaded cores, etc.\nSee \\ref faq_smt.\nMost alternative software for binding do not even know whether each\ncore is single-threaded, multithreaded or hyper-threaded.\nThey would bind to individual threads without any way to know whether\nmultiple tasks are in the same physical core.\n\nHowever, using hwloc comes with an overhead since a topology must\nbe loaded before gathering information and binding tasks or memory.\nFortunately this overhead may be significantly reduced by filtering\nnon-interesting information out of the topology.\nFor instance the following code builds a topology that only contains\nCores (explicitly filtered-in below),\nhardware threads (PUs, cannot be filtered-out),\nNUMA nodes (cannot be filtered-out),\nand the root object (usually a Machine; the root cannot be removed without breaking the tree).\n\n\\verbatim\nhwloc_topology_t topology;\nhwloc_topology_init(&topology);\n/* filter everything out */\nhwloc_topology_set_all_types_filter(topology, HWLOC_TYPE_FILTER_KEEP_NONE);\n/* filter Cores back in */\nhwloc_topology_set_type_filter(topology, HWLOC_OBJ_CORE, HWLOC_TYPE_FILTER_KEEP_ALL);\nhwloc_topology_load(topology);\n\\endverbatim\n\nHowever, one should remember that filtering such objects out removes\nlocality information from the hwloc tree.\nFor instance, we do not know anymore which PU is close to which NUMA\nnode.\nThis would be useful to applications that explicitly want to\nplace specific memory buffers close to specific tasks.\nThose applications just need to tell hwloc to keep Group objects that\nbring structure information:\n\\verbatim\nhwloc_topology_set_type_filter(topology, HWLOC_OBJ_GROUP, HWLOC_TYPE_FILTER_KEEP_STRUCTURE);\n\\endverbatim\n\nNote that the default configuration is to keep all objects enabled,\nexcept I/Os and instruction caches.\n\n\n\\subsection faq_indexes Should I use logical or physical/OS indexes? and how?\n\nOne of the original reasons why hwloc was created is that <b>physical/OS indexes</b>\n(<tt>obj->os_index</tt>) are often crazy and unpredictable:\nprocessors numbers are usually\nnon-contiguous (processors 0 and 1 are not physically close), they vary from\none machine to another, and may even change after a BIOS or system update.\nThis numbers make task placement hardly portable.\nMoreover some objects have no physical/OS numbers (caches), and some objects\nhave non-unique numbers (core numbers are only unique within a socket).\nPhysical/OS indexes are only guaranteed to exist and be unique for PU\nand NUMA nodes.\n\nhwloc therefore introduces <b>logical indexes</b> (<tt>obj->logical_index</tt>)\nwhich are portable, contiguous and logically ordered\n(based on the resource organization in the locality tree).\nIn general, one should only use logical indexes and just let hwloc do the\ninternal conversion when really needed (when talking to the OS and hardware).\n\nhwloc developers recommends that users do not use physical/OS indexes\nunless they really know what they are doing.\nThe main reason for still using physical/OS indexes is when interacting with\nnon-hwloc tools such as numactl or taskset, or when reading hardware information\nfrom raw sources such as /proc/cpuinfo.\n\nlstopo options <tt>-l</tt> and <tt>-p</tt> may be used to switch between\nlogical indexes (prefixed with <tt>L#</tt>) and physical/OS indexes (<tt>P#</tt>).\nConverting one into the other may also be achieved with hwloc-calc which may\nmanipulate either logical or physical indexes as input or output.\nSee also \\ref cli_hwloc_calc.\n\n\\verbatim\n# Convert PU with physical number 3 into logical number\n$ hwloc-calc -I pu --physical-input --logical-output pu:3\n5\n\n# Convert a set of NUMA nodes from logical to physical\n# (beware that the output order may not match the input order)\n$ hwloc-calc -I numa --logical-input --physical-output numa:2-3 numa:7\n0,2,5\n\\endverbatim\n\n\n\\subsection faq_structural hwloc is only a structural model, it ignores performance models, memory bandwidth, etc.?\n\nhwloc is indeed designed to provide applications with a structural model\nof the platform. This is an orthogonal approach to describing the\nmachine with performance models, for instance using memory bandwidth\nor latencies measured by benchmarks.\nWe believe that both approaches are important for helping application\nmake the most of the hardware.\n\nFor instance, on a dual-processor host with four cores each, hwloc\nclearly shows which four cores are together.\nLatencies between all pairs of cores of the same processor are likely\nidentical, and also likely lower than the latency between cores of\ndifferent processors.\nHowever, the structural model cannot guarantee such implementation\ndetails.\nOn the other side, performance models would reveal such details\nwithout always clearly identifying which cores are in the same\nprocessor.\n\nThe focus of hwloc is mainly of the structural modeling side.\nHowever, hwloc lets user adds performance information to the topology\nthrough distances\n(see \\ref topoattrs_distances),\nmemory attributes\n(see \\ref topoattrs_memattrs)\nor even custom annotations (see \\ref faq_annotate).\nhwloc may also use such distance information for grouping objects\ntogether (see \\ref faq_onedim and \\ref faq_groups).\n\n\n\\subsection faq_onedim hwloc only has a one-dimensional view of the architecture, it ignores distances?\n\nhwloc places all objects in a tree. Each level is a one-dimensional\nview of a set of similar objects. All children of the same object (siblings)\nare assumed to be equally interconnected (same distance between any of them),\nwhile the distance between children of different objects (cousins) is supposed\nto be larger.\n\nModern machines exhibit complex hardware interconnects, so this tree\nmay miss some information about the actual physical distances between objects.\nThe hwloc topology may therefore be annotated with distance information that\nmay be used to build a more realistic representation (multi-dimensional)\nof each level.\nFor instance, there can be a distance matrix that representing the latencies\nbetween any pair of NUMA nodes if the BIOS and/or operating system reports them.\n\nFor more information about the hwloc distances, see \\ref topoattrs_distances.\n\n\n\\subsection faq_groups What are these Group objects in my topology?\n\nhwloc comes with a set of predefined object types (Core, Package, NUMA node, Caches)\nthat match the vast majority of hardware platforms.\nThe ::HWLOC_OBJ_GROUP type was designed for cases where this set is not sufficient.\nGroups may be used anywhere to add more structure information to the topology,\nfor instance to show that 2 out of 4 NUMA nodes are actually closer than the others.\nWhen applicable, the <tt>subtype</tt> field describes why a Group\nwas actually added (see also \\ref attributes_normal).\n\nhwloc currently uses Groups for the following reasons:\n<ul>\n<li>NUMA parents when memory locality does not match any existing object.</li>\n<li>I/O parents when I/O locality does not match any existing object.</li>\n<li>Distance-based groups made of close objects.</li>\n<li>AMD Bulldozer dual-core compute units (<tt>subtype</tt> is <tt>ComputeUnit</tt>, in the x86 backend),\n but these objects are usually merged with the L2 caches.</li>\n<li>Intel Extended Topology Enumeration levels (in the x86 backend).</li>\n<li>Windows processor groups (unless they contain a single NUMA node, or a single Package, etc.).</li>\n<li>IBM S/390 \"Books\" on Linux (<tt>subtype</tt> is <tt>Book</tt>).</li>\n<li>AIX unknown hierarchy levels.</li>\n</ul>\n\nhwloc Groups are only kept if no other object has the same\nlocality information.\nIt means that a Group containing a single child is merged\ninto that child.\nAnd a Group is merged into its parent if it is its only child.\nFor instance a Windows processor group containing a single NUMA node\nwould be merged with that NUMA node since it already contains the\nrelevant hierarchy information.\n\nWhen inserting a custom Group with hwloc_hwloc_topology_insert_group_object(),\nthis merging may be disabled by setting its <tt>dont_merge</tt> attribute.\n\n\n\\subsection faq_asymmetric What happens if my topology is asymmetric?\n\nhwloc supports asymmetric topologies even if most platforms are usually\nsymmetric. For example, there could be different types of processors\nin a single machine, each with different numbers of cores, symmetric\nmultithreading, or levels of caches.\n\nIn practice, asymmetric topologies mostly appear when intermediate groups\nare added for I/O affinity: on a 4-package machine, an I/O bus may be\nconnected to 2 packages. These packages are below an additional Group\nobject, while the other packages are not (see also \\ref faq_groups).\n\nTo understand how hwloc manages such cases, one should first remember\nthe meaning of levels and cousin objects. All objects of the same type\nare gathered as horizontal levels with a given depth. They are also\nconnected through the cousin pointers of the ::hwloc_obj structure.\nObject attribute (cache depth and type, group depth) are also taken\nin account when gathering objects as horizontal levels.\nTo be clear: there will be one level for L1i\ncaches, another level for L1d caches, another one for L2, etc.\n\nIf the topology is asymmetric (e.g., if a group is missing above some\nprocessors), a given horizontal level will still exist if there\nexist any objects of that type.  However, some branches of the overall\ntree may not have an object located in that horizontal level.  Note\nthat this specific hole within one horizontal level does not imply\nanything for other levels.  All objects of the same type are gathered\nin horizontal levels even if their parents or children have different\ndepths and types.\n\nSee the diagram in \\ref termsanddefs for a graphical representation\nof such topologies.\n\nMoreover, it is important to understand that a same parent object may\nhave children of different types (and therefore, different\ndepths). <strong>These children are therefore siblings (because they\nhave the same parent), but they are <em>not</em> cousins (because they\ndo not belong to the same horizontal level).</strong>\n\n\n\\subsection faq_nosmt What happens to my topology if I disable symmetric multithreading, hyper-threading, etc. in the system?\n\nhwloc creates one PU (processing unit) object per hardware thread.\nIf your machine supports symmetric multithreading, for instance Hyper-Threading,\neach Core object may contain multiple PU objects:\n\\verbatim\n$ lstopo -\n...\n  Core L#0\n    PU L#0 (P#0)\n    PU L#1 (P#2)\n  Core L#1\n    PU L#2 (P#1)\n    PU L#3 (P#3)\n\\endverbatim\n\nx86 machines usually offer the ability to disable hyper-threading in the BIOS.\nOr it can be disabled on the Linux kernel command-line at boot time,\nor later by writing in sysfs virtual files.\n\nIf you do so, the hwloc topology structure does not significantly change,\nbut some PU objects will not appear anymore.\nNo level will disappear, you will see the same number of Core objects,\nbut each of them will contain a single PU now.\nThe PU level does not disappear either\n(remember that hwloc topologies always contain a PU level at the bottom of the topology)\neven if there is a single PU object per Core parent.\n\\verbatim\n$ lstopo -\n...\n  Core L#0\n    PU L#0 (P#0)\n  Core L#1\n    PU L#1 (P#1)\n\\endverbatim\n\n\n\\subsection faq_smt How may I ignore symmetric multithreading, hyper-threading, etc. in hwloc?\n\nFirst, see \\ref faq_nosmt for more information about multithreading.\n\nIf you need to ignore symmetric multithreading in software,\nyou should likely manipulate hwloc Core objects directly:\n\\verbatim\n/* get the number of cores */\nunsigned nbcores = hwloc_get_nbobjs_by_type(topology, HWLOC_OBJ_CORE);\n...\n/* get the third core below the first package */\nhwloc_obj_t package, core;\npackage = hwloc_get_obj_by_type(topology, HWLOC_OBJ_PACKAGE, 0);\ncore = hwloc_get_obj_inside_cpuset_by_type(topology, package->cpuset,\n                                           HWLOC_OBJ_CORE, 2);\n\\endverbatim\n\nWhenever you want to bind a process or thread to a core, make sure you\nsinglify its cpuset first, so that the task is actually bound to a single\nthread within this core (to avoid useless migrations).\n\\verbatim\n/* bind on the second core */\nhwloc_obj_t core = hwloc_get_obj_by_type(topology, HWLOC_OBJ_CORE, 1);\nhwloc_cpuset_t set = hwloc_bitmap_dup(core->cpuset);\nhwloc_bitmap_singlify(set);\nhwloc_set_cpubind(topology, set, 0);\nhwloc_bitmap_free(set);\n\\endverbatim\n\nWith hwloc-calc or hwloc-bind command-line tools, you may specify that\nyou only want a single-thread within each core by asking for their first\nPU object:\n\\verbatim\n$ hwloc-calc core:4-7\n0x0000ff00\n$ hwloc-calc core:4-7.pu:0\n0x00005500\n\\endverbatim\n\nWhen binding a process on the command-line, you may either specify\nthe exact thread that you want to use, or ask hwloc-bind to singlify\nthe cpuset before binding\n\\verbatim\n$ hwloc-bind core:3.pu:0 -- echo \"hello from first thread on core #3\"\nhello from first thread on core #3\n...\n$ hwloc-bind core:3 --single -- echo \"hello from a single thread on core #3\"\nhello from a single thread on core #3\n\\endverbatim\n\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"faq2\">\n\\endhtmlonly\n\\section faq2 Advanced\n\n\n\n\\subsection faq_xml I do not want hwloc to rediscover my enormous machine topology every time I rerun a process\n\nAlthough the topology discovery is not expensive on common machines,\nits overhead may become significant when multiple processes repeat\nthe discovery on large machines (for instance when starting one process\nper core in a parallel application).\nThe machine topology usually does not vary much, except if some cores\nare stopped/restarted or if the administrator restrictions are modified.\nThus rediscovering the whole topology again and again may look useless.\n\nFor this purpose, hwloc offers XML import/export and shared memory features.\n\nXML lets you\nsave the discovered topology to a file (for instance with the lstopo program)\nand reload it later by setting the HWLOC_XMLFILE environment variable.\nThe HWLOC_THISSYSTEM environment variable should also be set to 1 to\nassert that loaded file is really the underlying system.\n\nLoading a XML topology is usually much faster than querying multiple\nfiles or calling multiple functions of the operating system.\nIt is also possible to manipulate such XML files with the C programming\ninterface, and the import/export may also be directed to memory buffer\n(that may for instance be transmitted between applications through a package).\nSee also \\ref xml.\n\n\\note The environment variable HWLOC_THISSYSTEM_ALLOWED_RESOURCES\nmay be used to load a XML topology that contains the entire machine\nand restrict it to the part that is actually available to the current\nprocess (e.g. when Linux Cgroup/Cpuset are used to restrict the set\nof resources). See \\ref envvar.\n\nShared-memory topologies consist in one process exposing its topology\nin a shared-memory buffer so that other processes (running on the same machine)\nmay use it directly.\nThis has the advantage of reducing the memory footprint since a single\ntopology is stored in physical memory for multiple processes.\nHowever, it requires all processes to map this shared-memory buffer\nat the same virtual address, which may be difficult in some cases.\nThis API is described in \\ref hwlocality_shmem.\n\n\n\\subsection faq_multitopo How many topologies may I use in my program?\n\nhwloc lets you manipulate multiple topologies at the same time.\nHowever, these topologies consume memory and system resources\n(for instance file descriptors) until they are destroyed.\nIt is therefore discouraged to open the same topology multiple\ntimes.\n\nSharing a single topology between threads is easy (see \\ref threadsafety)\nsince the vast majority of accesses are read-only.\n\nIf multiple topologies of different (but similar) nodes are needed\nin your program, have a look at \\ref faq_diff.\n\n\n\\subsection faq_diff How to avoid memory waste when manipulating multiple similar topologies?\n\nhwloc does not share information between topologies.\nIf multiple similar topologies are loaded in memory, for instance\nthe topologies of different identical nodes of a cluster,\nlots of information will be duplicated.\n\nhwloc/diff.h (see also \\ref hwlocality_diff) offers the ability to\ncompute topology differences, apply or unapply them, or export/import\nto/from XML.\nHowever, this feature is limited to basic differences such as attribute changes.\nIt does not support complex modifications such as adding or removing some objects.\n\n\n\\subsection faq_annotate How do I annotate the topology with private notes?\n\nEach hwloc object contains a <tt>userdata</tt> field that may be used by\napplications to store private pointers. This field is only valid\nduring the lifetime of these container object and topology.\nIt becomes invalid as soon the topology is destroyed,\nor as soon as the object disappears, for instance when restricting\nthe topology.\nThe userdata field is not exported/imported to/from XML by default since\nhwloc does not know what it contains.\nThis behavior may be changed by specifying application-specific callbacks\nwith <tt>hwloc_topology_set_userdata_export_callback()</tt>\nand <tt>hwloc_topology_set_userdata_import_callback()</tt>.\n\nEach object may also contain some <em>info</em> attributes\n(key name and value) that are setup by hwloc during discovery\nand that may be extended by the user with\n<tt>hwloc_obj_add_info()</tt> (see also \\ref attributes).\nContrary to the <tt>userdata</tt> field which is unique, multiple info\nattributes may exist for each object, even with the same name.\nThese attributes are always exported to XML.\nHowever, only character strings may be used as key names and values.\n\nIt is also possible to insert Misc objects with a custom name\nanywhere as a leaf of the topology (see \\ref miscobjs).\nAnd Misc objects may have their own userdata and info attributes\njust like any other object.\n\nThe hwloc-annotate command-line tool may be used for adding\nMisc objects and info attributes.\n\nThere is also a topology-specific userdata pointer that can be used\nto recognize different topologies by storing a custom pointer.\nIt may be manipulated with <tt>hwloc_topology_set_userdata()</tt>\nand <tt>hwloc_topology_get_userdata()</tt>.\n\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"faq3\">\n\\endhtmlonly\n\\section faq3 Caveats\n\n\n\n\\subsection faq_slow_lstopo Why is hwloc slow?\n\nBuilding a hwloc topology on a large machine may be slow because\nthe discovery of hundreds of hardware cores or threads takes time\n(especially when reading thousands of sysfs files on Linux).\nIgnoring some objects (for instance caches) that aren't useful\nto the current application may improve this overhead (see \\ref faq_why).\nOne should also consider using XML (see \\ref faq_xml) to work\naround such issues.\n\nAdditionally, lstopo enables most hwloc objects and discovery flags\nby default so that the output topology is as precise as possible\n(while hwloc disables many of them by default).\nThis includes I/O device discovery through PCI libraries as well as external\nlibraries such as NVML.\nTo speed up lstopo, you may disable such features with command-line\noptions such as <tt>\\--no-io</tt>.\n\nWhen NVIDIA GPU probing is enabled with CUDA or NVML, one should make sure that\nthe <em>Persistent</em> mode is enabled (with <tt>nvidia-smi -pm 1</tt>)\nto avoid significant GPU initialization overhead.\n\nWhen AMD GPU discovery is enabled with OpenCL and hwloc is used remotely\nover ssh, some spurious round-trips on the network may significantly\nincrease the discovery time.\nForcing the <tt>DISPLAY</tt> environment variable to the remote X server\ndisplay (usually <tt>:0</tt>) instead of only setting the <tt>COMPUTE</tt>\nvariable may avoid this.\n\nAlso remember that these components may be disabled at build-time with\nconfigure flags such as <tt>\\--disable-opencl</tt>, <tt>\\--disable-cuda</tt> or <tt>\\--disable-nvml</tt>,\nand at runtime with the environment variable\n<tt>HWLOC_COMPONENTS=-opencl,-cuda,-nvml</tt>\nor with hwloc_topology_set_components().\n\n\n\\subsection faq_privileged Does hwloc require privileged access?\n\nhwloc discovers the topology by querying the operating system.\nSome minor features may require privileged access to the operation\nsystem.\nFor instance memory module discovery on Linux is reserved to root,\nand the entire PCI discovery on Solaris and BSDs requires access to\nsome special files that are usually restricted to root\n(/dev/pci* or /devices/pci*).\n\nTo workaround this limitation, it is recommended to export the\ntopology as a XML file generated by the administrator (with the\nlstopo program) and make it available to all users\n(see \\ref xml).\nIt will offer all discovery information to any application without\nrequiring any privileged access anymore.\nOnly the necessary hardware characteristics will be exported, no\nsensitive information will be disclosed through this XML export.\n\nThis XML-based model also has the advantage of speeding up the\ndiscovery because reading a XML topology is usually much faster\nthan querying the operating system again.\n\nThe utility <tt>hwloc-dump-hwdata</tt> is also involved in gathering\nprivileged information at boot time and making it available to\nnon-privileged users (note that this may require a specific SELinux\nMLS policy module). However, it only applies to Intel Xeon Phi processors\nfor now (see \\ref faq_knl_dump).\nSee also <tt>HWLOC_DUMPED_HWDATA_DIR</tt> in \\ref envvar for details\nabout the location of dumped files.\n\n\n\\subsection faq_os_error What should I do when hwloc reports \"operating system\" warnings?\n\nWhen the operating system reports invalid locality information (because\nof either software or hardware bugs), hwloc may fail to insert some objects\nin the topology because they cannot fit in the already built tree of resources.\nIf so, hwloc will report a warning like the following.\nThe object causing this error is ignored, the discovery continues but the\nresulting topology will miss some objects and may be asymmetric\n(see also \\ref faq_asymmetric).\n\n\\verbatim\n****************************************************************************\n* hwloc received invalid information from the operating system.\n*\n* L3 (cpuset 0x000003f0) intersects with NUMANode (P#0 cpuset 0x0000003f) without inclusion!\n* Error occurred in topology.c line 940\n*\n* Please report this error message to the hwloc user's mailing list,\n* along with the files generated by the hwloc-gather-topology script.\n*\n* hwloc will now ignore this invalid topology information and continue.\n****************************************************************************\n\\endverbatim\n\nThese errors are common on large AMD platforms because of BIOS and/or Linux\nkernel bugs causing invalid L3 cache information.\nIn the above example, the hardware reports\na L3 cache that is shared by 2 cores in the first NUMA node and 4 cores\nin the second NUMA node. That's wrong, it should actually be shared by all 6\ncores in a single NUMA node.\nThe resulting topology will miss some L3 caches.\n\nIf your application does not care about cache sharing, or if you do not plan to\nrequest cache-aware binding in your process launcher, you may likely ignore\nthis error (and hide it by setting HWLOC_HIDE_ERRORS=1 in your environment).\n\nSome platforms report similar warnings about conflicting Packages and NUMANodes.\n\nOn x86 hosts, passing <tt>HWLOC_COMPONENTS=x86</tt> in the environment may\nworkaround some of these issues by switching to a different way to discover the topology.\n\nUpgrading the BIOS and/or the operating system may help.\nOtherwise, as explained in the message, reporting this issue to the hwloc developers\n(by sending the tarball that is generated by the hwloc-gather-topology script\n on this platform) is a good way to make sure that this is a software\n(operating system) or hardware bug (BIOS, etc).\n\nSee also \\ref bugs. Opening an issue on GitHub automatically displays hints\non what information you should provide when reporting such bugs.\n\n\n\\subsection faq_valgrind Why does Valgrind complain about hwloc memory leaks?\n\nIf you are debugging your application with Valgrind, you want to\navoid memory leak reports that are caused by hwloc and not by your\nprogram.\n\nhwloc itself is often checked with Valgrind to make sure it does\nnot leak memory.\nHowever, some global variables in hwloc dependencies are never freed.\nFor instance libz allocates its global state once at startup and\nnever frees it so that it may be reused later.\nSome libxml2 global state is also never freed because hwloc does not\nknow whether it can safely ask libxml2 to free it (the application may\nalso be using libxml2 outside of hwloc).\n\nThese unfreed variables cause leak reports in Valgrind.\nhwloc installs a Valgrind <em>suppressions</em> file to hide them.\nYou should pass the following command-line option to Valgrind to use it:\n\\verbatim\n  --suppressions=/path/to/hwloc-valgrind.supp\n\\endverbatim\n\n\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"faq4\">\n\\endhtmlonly\n\\section faq4 Platform-specific\n\n\n\\subsection faq_knl_numa How do I find the local MCDRAM NUMA node on Intel Xeon Phi processor?\n\nIntel Xeon Phi processors introduced a new memory architecture by\npossibly having two distinct local memories:\nsome normal memory (DDR) and some high-bandwidth on-package memory (MCDRAM).\nProcessors can be configured in various clustering modes to have up to 4 <em>Clusters</em>.\nMoreover, each <em>Cluster</em> (quarter, half or whole processor) of the processor may have its own local\nparts of the DDR and of the MCDRAM.\nThis memory and clustering configuration may be probed by looking at MemoryMode\nand ClusterMode attributes, see \\ref attributes_info_platform and doc/examples/get-knl-modes.c\nin the source directory.\n\nStarting with version 2.0, hwloc properly exposes this memory\nconfiguration.\nDDR and MCDRAM are attached as two memory children of the same parent,\nDDR first, and MCDRAM second if any.\nDepending on the processor configuration, that parent may be a Package,\na Cache, or a Group object of type <tt>Cluster</tt>.\n\nHence cores may have one or two local NUMA nodes, listed by the core nodeset.\nAn application may allocate local memory from a core by using that nodeset.\nThe operating system will actually allocate from the DDR when\npossible, or fallback to the MCDRAM.\n\nTo allocate specifically on one of these memories,\none should walk up the parent pointers until finding an object with\nsome memory children.\nLooking at these memory children will give the DDR first,\nthen the MCDRAM if any.\nTheir nodeset may then be used for allocating or binding memory buffers.\n\nOne may also traverse the list of NUMA nodes until finding some whose\ncpuset matches the target core or PUs.\nThe MCDRAM NUMA nodes may be identified thanks to the <tt>subtype</tt> field\nwhich is set to <tt>MCDRAM</tt>.\n\nCommand-line tools such as <tt>hwloc-bind</tt> may bind memory on the MCDRAM by\nusing the <i>hbm</i> keyword. For instance, to bind on the first MCDRAM NUMA node:\n\n\\verbatim\n$ hwloc-bind --membind --hbm numa:0 -- myprogram\n$ hwloc-bind --membind numa:0 -- myprogram\n\\endverbatim\n\n\n\\subsection faq_knl_dump Why do I need hwloc-dump-hwdata for memory on Intel Xeon Phi processor?\n\nIntel Xeon Phi processors may use the on-package memory (MCDRAM)\nas either memory or a memory-side cache\n(reported as a L3 cache by hwloc by default,\nsee <tt>HWLOC_KNL_MSCACHE_L3</tt> in \\ref envvar).\nThere are also several clustering modes that significantly affect the memory organization\n(see \\ref faq_knl_numa for more information about these modes).\nDetails about these are currently only available to privileged users.\nWithout them, hwloc relies on a heuristic for guessing the modes.\n\nThe hwloc-dump-hwdata utility may be used to dump this privileged binary information\ninto human-readable and world-accessible files that the hwloc library will later load.\nThe utility should usually run as root once during boot, in order to update dumped\ninformation (stored under /var/run/hwloc by default) in case the MCDRAM or clustering configuration\nchanged between reboots.\n\nWhen SELinux MLS policy is enabled, a specific hwloc policy module may be required\nso that all users get access to the dumped files (in /var/run/hwloc by default).\nOne may use hwloc policy files from the SELinux Reference Policy at\nhttps://github.com/TresysTechnology/refpolicy-contrib\n(see also the documentation at https://github.com/TresysTechnology/refpolicy/wiki/GettingStarted).\n\nhwloc-dump-hwdata requires <tt>dmi-sysfs</tt> kernel module loaded.\n\nThe utility is currently unneeded on platforms without Intel Xeon Phi processors.\n\nSee <tt>HWLOC_DUMPED_HWDATA_DIR</tt> in \\ref envvar for details\nabout the location of dumped files.\n\n\n\\subsection faq_bgq How do I build hwloc for BlueGene/Q?\n\nIBM BlueGene/Q machines run a standard Linux on the login/frontend nodes\nand a custom CNK (<em>Compute Node Kernel</em>) on the compute nodes.\n\nTo discover the topology of a login/frontend node, hwloc should be\nconfigured as usual, without any BlueGene/Q-specific option.\n\nHowever, one would likely rather discover the topology of the compute nodes\nwhere parallel jobs are actually running.\nIf so, hwloc must be cross-compiled with the following configuration line:\n\\verbatim\n./configure --host=powerpc64-bgq-linux --disable-shared --enable-static \\\n  CPPFLAGS='-I/bgsys/drivers/ppcfloor -I/bgsys/drivers/ppcfloor/spi/include/kernel/cnk/'\n\\endverbatim\n\nCPPFLAGS may have to be updated if your platform headers are installed\nin a different directory.\n\n\n\\subsection faq_windows How do I build hwloc for Windows?\n\nhwloc releases are available as pre-built ZIPs for Windows on both 32bits and\n64bits x86 platforms.\nThey are built using MSYS2 and MinGW on a Windows host.\nSuch an environment allows using the Unix-like <tt>configure</tt>, <tt>make</tt>\nand <tt>make install</tt> steps without having to tweak too many variables or options.\nOne may look at <tt>contrib/ci.inria.fr/job-3-mingw.sh</tt> in the hwloc\nrepository for an example used for nightly testing.\n\nhwloc releases also contain a basic Microsoft Visual Studio solution\nunder <tt>contrib/windows/</tt>.\n\n\n\\subsection faq_netbsd_bind How to get useful topology information on NetBSD?\n\nThe NetBSD (and FreeBSD) backend uses x86-specific topology discovery\n(through the x86 component).\nThis implementation requires CPU binding so as to query topology\ninformation from each individual processor.\nThis means that hwloc cannot find any useful topology information\nunless user-level process binding is allowed by the NetBSD kernel.\nThe <tt>security.models.extensions.user_set_cpu_affinity</tt>\nsysctl variable must be set to 1 to do so.\nOtherwise, only the number of processors will be detected.\n\n\n\\subsection faq_aix_bind Why does binding fail on AIX?\n\nThe AIX operating system requires specific user capabilities for\nattaching processes to resource sets (CAP_NUMA_ATTACH).\nOtherwise functions such as hwloc_set_cpubind() fail (return -1 with errno set to EPERM).\n\nThis capability must also be inherited (through the additional CAP_PROPAGATE capability)\nif you plan to bind a process before forking another process,\nfor instance with <tt>hwloc-bind</tt>.\n\nThese capabilities may be given by the administrator with:\n\\verbatim\nchuser \"capabilities=CAP_PROPAGATE,CAP_NUMA_ATTACH\" <username>\n\\endverbatim\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"faq5\">\n\\endhtmlonly\n\\section faq5 Compatibility between hwloc versions\n\n\\subsection faq_version_api How do I handle API changes?\n\nThe hwloc interface is extended with every new major release.\nAny application using the hwloc API should be prepared to check at\ncompile-time whether some features are available in the currently\ninstalled hwloc distribution.\n\nFor instance, to check whether the hwloc version is at least 2.0, you should use:\n\\verbatim\n#include <hwloc.h>\n#if HWLOC_API_VERSION >= 0x00020000\n...\n#endif\n\\endverbatim\n\nTo check for the API of release X.Y.Z at build time,\nyou may compare ::HWLOC_API_VERSION with <tt>(X<<16)+(Y<<8)+Z</tt>.\n\nFor supporting older releases that do not have <tt>HWLOC_OBJ_NUMANODE</tt>\nand <tt>HWLOC_OBJ_PACKAGE</tt> yet, you may use:\n\n\\verbatim\n#include <hwloc.h>\n#if HWLOC_API_VERSION < 0x00010b00\n#define HWLOC_OBJ_NUMANODE HWLOC_OBJ_NODE\n#define HWLOC_OBJ_PACKAGE HWLOC_OBJ_SOCKET\n#endif\n\\endverbatim\n\nOnce a program is built against a hwloc library, it may also dynamically\nlink with compatible libraries from other hwloc releases.\nThe version of that runtime library may be queried with hwloc_get_api_version().\nSee \\ref faq_version_abi for using this function for testing ABI compatibility.\n\n\n\n\\subsection faq_version What is the difference between API and library version numbers?\n\n::HWLOC_API_VERSION is the version of the API.\nIt changes when functions are added, modified, etc.\nHowever it does not necessarily change from one release to another.\nFor instance, two releases of the same series (e.g. 2.0.3 and 2.0.4)\nusually have the same ::HWLOC_API_VERSION (<tt>0x00020000</tt>).\nHowever their HWLOC_VERSION strings are different\n(<tt>\\\"2.0.3\\\"</tt> and <tt>\\\"2.0.4\\\"</tt> respectively).\n\n\n\n\\subsection faq_version_abi How do I handle ABI breaks?\n\nThe hwloc interface was deeply modified in release 2.0\nto fix several issues of the 1.x interface\n(see \\ref upgrade_to_api_2x and the NEWS file in the source directory for details).\nThe ABI was broken, which means\n<b>applications must be recompiled against the new 2.0 interface</b>.\n\nTo check that you are not mixing old/recent headers with a recent/old runtime library,\ncheck the major revision number in the API version:\n\\verbatim\n#include <hwloc.h>\n  unsigned version = hwloc_get_api_version();\n  if ((version >> 16) != (HWLOC_API_VERSION >> 16)) {\n    fprintf(stderr,\n           \"%s compiled for hwloc API 0x%x but running on library API 0x%x.\\n\"\n           \"You may need to point LD_LIBRARY_PATH to the right hwloc library.\\n\"\n           \"Aborting since the new ABI is not backward compatible.\\n\",\n           callname, HWLOC_API_VERSION, version);\n    exit(EXIT_FAILURE);\n  }\n\\endverbatim\nTo specifically detect v2.0 issues:\n\\verbatim\n#include <hwloc.h>\n#if HWLOC_API_VERSION >= 0x00020000\n  /* headers are recent */\n  if (hwloc_get_api_version() < 0x20000)\n    ... error out, the hwloc runtime library is older than 2.0 ...\n#else\n  /* headers are pre-2.0 */\n  if (hwloc_get_api_version() >= 0x20000)\n    ... error out, the hwloc runtime library is more recent than 2.0 ...\n#endif\n\\endverbatim\n\nIn theory, library sonames prevent linking with incompatible libraries.\nHowever custom hwloc installations or improperly configured build environments\nmay still lead to such issues.\nHence running one of the above (cheap) checks before initializing hwloc topology\nmay be useful.\n\n\n\n\\subsection faq_version_xml Are XML topology files compatible between hwloc releases?\n\nXML topology files are forward-compatible:\na XML file may be loaded by a hwloc library that is more recent\nthan the hwloc release that exported that file.\n\nHowever, hwloc XMLs are not always backward-compatible:\nTopologies exported by hwloc 2.x cannot be imported by 1.x by default\n(see \\ref upgrade_to_api_2x_xml for working around such issues).\nThere are also some corner cases where backward compatibility\nis not guaranteed because of changes between major releases\n(for instance 1.11 XMLs could not be imported in 1.10).\n\nXMLs are exchanged at runtime between some components of the HPC software stack\n(for instance the resource managers and MPI processes).\nBuilding all these components on the same (cluster-wide)\nhwloc installation is a good way to avoid such incompatibilities.\n\n\n\n\\subsection faq_version_synthetic Are synthetic strings compatible between hwloc releases?\n\nSynthetic strings (see \\ref synthetic) are forward-compatible:\na synthetic string generated by a release may be imported by future hwloc libraries.\n\nHowever they are often not backward-compatible because new details may have been\nadded to synthetic descriptions in recent releases.\nSome flags may be given to hwloc_topology_export_synthetic() to avoid such details\nand stay backward compatible.\n\n\n\n\\subsection faq_version_shmem Is it possible to share a shared-memory topology between different hwloc releases?\n\nShared-memory topologies (see \\ref hwlocality_shmem) have strong\nrequirements on compatibility between hwloc libraries.\nAdopting a shared-memory topology fails\nif it was exported by a non-compatible hwloc release.\nReleases with same major revision are usually compatible\n(e.g. hwloc 2.0.4 may adopt a topology exported by 2.0.3)\nbut different major revisions may be incompatible\n(e.g. hwloc 2.1.0 cannot adopt from 2.0.x).\n\nTopologies are shared at runtime between some components of the HPC software stack\n(for instance the resource managers and MPI processes).\nBuilding all these components on the same (system-wide) hwloc installation\nis a good way to avoid such incompatibilities.\n\n\n\n\\page upgrade_to_api_2x Upgrading to the hwloc 2.0 API\n\n\\htmlonly\n<div class=\"section\">\n\\endhtmlonly\n\nSee \\ref faq5 for detecting the hwloc version that you are compiling\nand/or running against.\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"upgrade_to_api_2x_memory\">\n\\endhtmlonly\n\\section upgrade_to_api_2x_memory New Organization of NUMA nodes and Memory\n\n\\subsection upgrade_to_api_2x_memory_children Memory children\n\nIn hwloc v1.x, NUMA nodes were inside the tree, for instance Packages\ncontained 2 NUMA nodes which contained a L3 and several cache.\n\nStarting with hwloc v2.0, NUMA nodes are not in the main tree anymore.\nThey are attached under objects as <i>Memory Children</i> on the side\nof normal children.\nThis memory children list starts at <code>obj->memory_first_child</code>\nand its size is <code>obj->memory_arity</code>.\nHence there can now exist two local NUMA nodes,\nfor instance on Intel Xeon Phi processors.\n\nThe normal list of children (starting at <code>obj->first_child</code>,\nending at <code>obj->last_child</code>, of size <code>obj->arity</code>,\nand available as the array <code>obj->children</code>)\nnow only contains CPU-side objects:\nPUs, Cores, Packages, Caches, Groups, Machine and System.\nhwloc_get_next_child() may still be used to iterate over all children of all lists.\n\nHence the CPU-side hierarchy is built using normal children,\nwhile memory is attached to that hierarchy depending on its affinity.\n\n\\subsection upgrade_to_api_2x_memory_examples Examples\n\n<ul>\n<li>a UMA machine with 2 packages and a single NUMA node is now modeled\n as a \"Machine\" object with two \"Package\" children\n and one \"NUMANode\" memory children (displayed first in lstopo below):\n\\verbatim\nMachine (1024MB total)\n  NUMANode L#0 (P#0 1024MB)\n  Package L#0\n    Core L#0 + PU L#0 (P#0)\n    Core L#1 + PU L#1 (P#1)\n  Package L#1\n    Core L#2 + PU L#2 (P#2)\n    Core L#3 + PU L#3 (P#3)\n\\endverbatim\n</li>\n\n<li>a machine with 2 packages with one NUMA node and 2 cores in each is now:\n\\verbatim\nMachine (2048MB total)\n  Package L#0\n    NUMANode L#0 (P#0 1024MB)\n    Core L#0 + PU L#0 (P#0)\n    Core L#1 + PU L#1 (P#1)\n  Package L#1\n    NUMANode L#1 (P#1 1024MB)\n    Core L#2 + PU L#2 (P#2)\n    Core L#3 + PU L#3 (P#3)\n\\endverbatim\n</li>\n\n<li>if there are two NUMA nodes per package, a Group object may be added to keep\ncores together with their local NUMA node:\n\\verbatim\nMachine (4096MB total)\n  Package L#0\n    Group0 L#0\n      NUMANode L#0 (P#0 1024MB)\n      Core L#0 + PU L#0 (P#0)\n      Core L#1 + PU L#1 (P#1)\n    Group0 L#1\n      NUMANode L#1 (P#1 1024MB)\n      Core L#2 + PU L#2 (P#2)\n      Core L#3 + PU L#3 (P#3)\n  Package L#1\n    [...]\n\\endverbatim\n</li>\n\n<li>if the platform has L3 caches whose localities are identical to NUMA nodes, Groups aren't needed:\n\\verbatim\nMachine (4096MB total)\n  Package L#0\n    L3 L#0 (16MB)\n      NUMANode L#0 (P#0 1024MB)\n      Core L#0 + PU L#0 (P#0)\n      Core L#1 + PU L#1 (P#1)\n    L3 L#1 (16MB)\n      NUMANode L#1 (P#1 1024MB)\n      Core L#2 + PU L#2 (P#2)\n      Core L#3 + PU L#3 (P#3)\n  Package L#1\n    [...]\n\\endverbatim\n</li>\n</ul>\n\n\n\\subsection upgrade_to_api_2x_numa_level NUMA level and depth\n\nNUMA nodes are not in \"main\" tree of normal objects anymore.\nHence, they don't have a meaningful depth anymore (like I/O and Misc objects).\nThey have a virtual (negative) depth (::HWLOC_TYPE_DEPTH_NUMANODE)\nso that functions manipulating depths and level still work,\nand so that we can still iterate over the level of NUMA nodes just like for any other level.\n\nFor instance we can still use lines such as\n\\verbatim\nint depth = hwloc_get_type_depth(topology, HWLOC_OBJ_NUMANODE);\nhwloc_obj_t obj = hwloc_get_obj_by_type(topology, HWLOC_OBJ_NUMANODE, 4);\nhwloc_obj_t node = hwloc_get_next_obj_by_depth(topology, HWLOC_TYPE_DEPTH_NUMANODE, prev);\n\\endverbatim\n\nThe NUMA depth should not be compared with others.\nAn unmodified code that still compares NUMA and Package depths\n(to find out whether Packages contain NUMA or the contrary)\nwould now always assume Packages contain NUMA (because the NUMA depth is negative).\n\nHowever, the depth of the Normal parents of NUMA nodes may be used instead.\nIn the last example above, NUMA nodes are attached to L3 caches,\nhence one may compare the depth of Packages and L3 to find out\nthat NUMA nodes are contained in Packages.\nThis depth of parents may be retrieved with hwloc_get_memory_parents_depth().\nHowever, this function may return ::HWLOC_TYPE_DEPTH_MULTIPLE\non future platforms if NUMA nodes are attached to different levels.\n\n\n\\subsection upgrade_to_api_2x_memory_find Finding Local NUMA nodes and looking at Children and Parents\n\nApplications that walked up/down to find NUMANode parent/children must\nnow be updated.\nInstead of looking directly for a NUMA node, one should now look for\nan object that has some memory children.\nNUMA node(s) will be attached there.\nFor instance, when looking for a NUMA node above a given core <tt>core</tt>:\n\\verbatim\nhwloc_obj_t parent = core->parent;\nwhile (parent && !parent->memory_arity)\n  parent = parent->parent; /* no memory child, walk up */\nif (parent)\n  /* use parent->memory_first_child (and its siblings if there are multiple local NUMA nodes) */\n\\endverbatim\n\nThe list of local NUMA nodes (usually a single one) is also described\nby the <tt>nodeset</tt> attribute of each object (which contains the\nphysical indexes of these nodes).\nIterating over the NUMA level is also an easy way to find local NUMA nodes:\n\\verbatim\nhwloc_obj_t tmp = NULL;\nwhile ((tmp = hwloc_get_next_obj_by_type(topology, HWLOC_OBJ_NUMANODE, tmp)) != NULL) {\n  if (hwloc_bitmap_isset(obj->nodeset, tmp->os_index))\n    /* tmp is a NUMA node local to obj, use it */\n}\n\\endverbatim\n\nSimilarly finding objects that are close to a given NUMA nodes\nshould be updated too.\nInstead of looking at the NUMA node parents/children, one should\nnow find a Normal parent above that NUMA node, and then look\nat its parents/children as usual:\n\\verbatim\nhwloc_obj_t tmp = obj->parent;\nwhile (hwloc_obj_type_is_memory(tmp))\n  tmp = tmp->parent;\n/* now use tmp instead of obj */\n\\endverbatim\n\nTo avoid such hwloc v2.x-specific and NUMA-specific cases in the code,\na <b>generic lookup for any kind of object, including NUMA nodes</b>,\nmight also be implemented by iterating over a level.\nFor instance finding an object of type <tt>type</tt> which either\ncontains or is included in object <tt>obj</tt> can be\nperformed by traversing the level of that type and comparing CPU sets:\n\\verbatim\nhwloc_obj_t tmp = NULL;\nwhile ((tmp = hwloc_get_next_obj_by_type(topology, type, tmp)) != NULL) {\n  if (hwloc_bitmap_intersects(tmp->cpuset, obj->cpuset))\n    /* tmp matches, use it */\n}\n\\endverbatim\n<b>\nThis generic lookup works whenever <tt>type</tt> or <tt>obj</tt>\nare Normal or Memory objects since both have CPU sets.\nMoreover, it is compatible with the hwloc v1.x API.\n</b>\n\n\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"upgrade_to_api_2x_children\">\n\\endhtmlonly\n\\section upgrade_to_api_2x_children 4 Kinds of Objects and Children\n\n\\subsection upgrade_to_api_2x_io_misc_children I/O and Misc children\n\nI/O children are not in the main object children list anymore either.\nThey are in the list starting at <code>obj->io_first_child</code>\nand its size is <code>obj->io_arity</code>.\n\nMisc children are not in the main object children list anymore.\nThey are in the list starting at <code>obj->misc_first_child</code>\nand its size is <code>obj->misc_arity</code>.\n\nSee hwloc_obj for details about children lists.\n\nhwloc_get_next_child() may still be used to iterate over all children of all lists.\n\n\n\\subsection upgrade_to_api_2x_kinds_subsec Kinds of objects\n\nGiven the above, objects may now be of 4 kinds:\n<ul>\n<li>Normal (everything not listed below, including Machine, Package, Core, PU, CPU Caches, etc);</li>\n<li>Memory (currently NUMA nodes or Memory-side Caches), attached to parents as Memory children;</li>\n<li>I/O (Bridges, PCI and OS devices), attached to parents as I/O children;</li>\n<li>Misc objects, attached to parents as Misc children.</li>\n</ul>\nSee hwloc_obj for details about children lists.\n\nFor a given object type, the kind may be found with hwloc_obj_type_is_normal(),\nhwloc_obj_type_is_memory(), hwloc_obj_type_is_normal(),\nor comparing with ::HWLOC_OBJ_MISC.\n\nNormal and Memory objects have (non-NULL) CPU sets and nodesets,\nwhile I/O and Misc objects don't have any sets (they are NULL).\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"upgrade_to_api_2x_cache\">\n\\endhtmlonly\n\\section upgrade_to_api_2x_cache HWLOC_OBJ_CACHE replaced\n\nInstead of a single HWLOC_OBJ_CACHE, there are now 8 types\n::HWLOC_OBJ_L1CACHE, ..., ::HWLOC_OBJ_L5CACHE,\n::HWLOC_OBJ_L1ICACHE, ..., ::HWLOC_OBJ_L3ICACHE.\n\nCache object attributes are unchanged.\n\nhwloc_get_cache_type_depth() is not needed to disambiguate cache types anymore\nsince new types can be passed to hwloc_get_type_depth()\nwithout ever getting ::HWLOC_TYPE_DEPTH_MULTIPLE anymore.\n\nhwloc_obj_type_is_cache(), hwloc_obj_type_is_dcache() and hwloc_obj_type_is_icache()\nmay be used to check whether a given type is a cache, data/unified cache or instruction cache.\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"upgrade_to_api_2x_allowed\">\n\\endhtmlonly\n\\section upgrade_to_api_2x_allowed allowed_cpuset and allowed_nodeset only in the main topology\n\nObjects do not have <code>allowed_cpuset</code> and <code>allowed_nodeset</code> anymore.\nThey are only available for the entire topology using\nhwloc_topology_get_allowed_cpuset() and hwloc_topology_get_allowed_nodeset().\n\nAs usual, those are only needed when the INCLUDE_DISALLOWED topology flag is given,\nwhich means disallowed objects are kept in the topology.\nIf so, one may find out whether some PUs inside an object is allowed by checking\n\\verbatim\nhwloc_bitmap_intersects(obj->cpuset, hwloc_topology_get_allowed_cpuset(topology))\n\\endverbatim\nReplace cpusets with nodesets for NUMA nodes.\nTo find out which ones, replace intersects() with and() to get the actual intersection.\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"upgrade_to_api_2x_depth\">\n\\endhtmlonly\n\\section upgrade_to_api_2x_depth Object depths are now signed int\n\n<code>obj->depth</code> as well as depths given to functions\nsuch as hwloc_get_obj_by_depth() or returned by hwloc_topology_get_depth() are now\n<b>signed int</b>.\n\nOther depth such as cache-specific depth attribute are still unsigned.\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"upgrade_to_api_2x_memory_attrs\">\n\\endhtmlonly\n\\section upgrade_to_api_2x_memory_attrs Memory attributes become NUMANode-specific\n\nMemory attributes such as <code>obj->memory.local_memory</code>\nare now only available in NUMANode-specific attributes\nin <code>obj->attr->numanode.local_memory</code>.\n\n<code>obj->memory.total_memory</code> is available\nin all objects as <code>obj->total_memory</code>.\n\nSee hwloc_obj_attr_u::hwloc_numanode_attr_s and hwloc_obj for details.\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"upgrade_to_api_2x_config\">\n\\endhtmlonly\n\\section upgrade_to_api_2x_config Topology configuration changes\n\nThe old ignoring API as well as several configuration flags\nare replaced with the new filtering API,\nsee hwloc_topology_set_type_filter() and its variants,\nand ::hwloc_type_filter_e for details.\n\n<ul>\n\n<li>\nhwloc_topology_ignore_type(), hwloc_topology_ignore_type_keep_structure()\nand hwloc_topology_ignore_all_keep_structure() are respectively superseded by\n\\verbatim\nhwloc_topology_set_type_filter(topology, type, HWLOC_TYPE_FILTER_KEEP_NONE);\nhwloc_topology_set_type_filter(topology, type, HWLOC_TYPE_FILTER_KEEP_STRUCTURE);\nhwloc_topology_set_all_types_filter(topology, HWLOC_TYPE_FILTER_KEEP_STRUCTURE);\n\\endverbatim\n\nAlso, the meaning of KEEP_STRUCTURE has changed (only entire levels may be ignored, instead of single objects), the old behavior is not available anymore.\n</li>\n\n<li>\nHWLOC_TOPOLOGY_FLAG_ICACHES is superseded by\n\\verbatim\nhwloc_topology_set_icache_types_filter(topology, HWLOC_TYPE_FILTER_KEEP_ALL);\n\\endverbatim\n</li>\n\n<li>\nHWLOC_TOPOLOGY_FLAG_WHOLE_IO, HWLOC_TOPOLOGY_FLAG_IO_DEVICES and HWLOC_TOPOLOGY_FLAG_IO_BRIDGES replaced.\n\nTo keep all I/O devices (PCI, Bridges, and OS devices), use:\n\\verbatim\nhwloc_topology_set_io_types_filter(topology, HWLOC_TYPE_FILTER_KEEP_ALL);\n\\endverbatim\n\nTo only keep important devices (Bridges with children, common PCI devices and OS devices):\n\\verbatim\nhwloc_topology_set_io_types_filter(topology, HWLOC_TYPE_FILTER_KEEP_IMPORTANT);\n\\endverbatim\n</li>\n\n</ul>\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"upgrade_to_api_2x_xml\">\n\\endhtmlonly\n\\section upgrade_to_api_2x_xml XML changes\n\n2.0 XML files are not compatible with 1.x\n\n2.0 can load 1.x files, but only NUMA distances are imported. Other distance matrices are ignored\n (they were never used by default anyway).\n\n2.0 can export 1.x-compatible files, but only distances attached to the root object are exported\n(i.e. distances that cover the entire machine).\nOther distance matrices are dropped (they were never used by default anyway).\n\n<b>Users are advised to negociate hwloc versions between exporter and importer:</b>\nIf the importer isn't 2.x, the exporter should export to 1.x.\nOtherwise, things should work by default.\n\nHence hwloc_topology_export_xml() and hwloc_topology_export_xmlbuffer() have a new flags argument.\nto force a hwloc-1.x-compatible XML export.\n<ul>\n<li>\n If both always support 2.0, don't pass any flag.\n</li>\n<li>\n When the importer uses hwloc 1.x, export with ::HWLOC_TOPOLOGY_EXPORT_XML_FLAG_V1.\n Otherwise the importer will fail to import.\n</li>\n<li>\n When the exporter uses hwloc 1.x, it cannot pass any flag,\n and a 2.0 importer can import without problem.\n</li>\n</ul>\n\n\\verbatim\n#if HWLOC_API_VERSION >= 0x20000\n   if (need 1.x compatible XML export)\n      hwloc_topology_export_xml(...., HWLOC_TOPOLOGY_EXPORT_XML_FLAG_V1);\n   else /* need 2.x compatible XML export */\n      hwloc_topology_export_xml(...., 0);\n#else\n   hwloc_topology_export_xml(....);\n#endif\n\\endverbatim\n\nAdditionally, hwloc_topology_diff_load_xml(), hwloc_topology_diff_load_xmlbuffer(),\nhwloc_topology_diff_export_xml(), hwloc_topology_diff_export_xmlbuffer()\nand hwloc_topology_diff_destroy() lost the topology argument:\nThe first argument (topology) isn't needed anymore.\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"upgrade_to_api_2x_distances\">\n\\endhtmlonly\n\\section upgrade_to_api_2x_distances Distances API totally rewritten\n\nThe new distances API is in hwloc/distances.h.\n\nDistances are not accessible directly from objects anymore.\nOne should first call hwloc_distances_get() (or a variant)\nto retrieve distances (possibly with one call to get the\nnumber of available distances structures, and another call\nto actually get them).\nThen it may consult these structures, and finally release them.\n\nThe set of object involved in a distances structure is specified\nby an array of objects, it may not always cover the entire machine or so.\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"upgrade_to_api_2x_return\">\n\\endhtmlonly\n\\section upgrade_to_api_2x_return Return values of functions\n\nBitmap functions (and a couple other functions) can return errors (in theory).\n\nMost bitmap functions may have to reallocate the internal bitmap storage.\nIn v1.x, they would silently crash if realloc failed.\nIn v2.0, they now return an int that can be negative on error.\nHowever, the preallocated storage is 512 bits,\nhence realloc will not even be used unless you run\nhwloc on machines with larger PU or NUMAnode indexes.\n\nhwloc_obj_add_info(), hwloc_cpuset_from_nodeset() and hwloc_cpuset_from_nodeset()\nalso return an int, which would be -1 in case of allocation errors.\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"upgrade_to_api_2x_misc\">\n\\endhtmlonly\n\\section upgrade_to_api_2x_misc Misc API changes\n\n<ul>\n\n<li>\nhwloc_type_sscanf() extends hwloc_obj_type_sscanf()\nby passing a union hwloc_obj_attr_u which may receive\nCache, Group, Bridge or OS device attributes.\n</li>\n\n<li>\nhwloc_type_sscanf_as_depth() is also added to\ndirectly return the corresponding level depth within a topology.\n</li>\n\n<li>\nhwloc_topology_insert_misc_object_by_cpuset() is replaced\nwith hwloc_topology_alloc_group_object() and hwloc_topology_insert_group_object().\n</li>\n\n<li>\nhwloc_topology_insert_misc_object_by_parent() is replaced\nwith hwloc_topology_insert_misc_object().\n</li>\n\n</ul>\n\n\n\\htmlonly\n</div><div class=\"section\" id=\"upgrade_to_api_2x_removals\">\n\\endhtmlonly\n\\section upgrade_to_api_2x_removals API removals and deprecations\n\n<ul>\n\n<li>\nHWLOC_OBJ_SYSTEM removed:\nThe root object is always ::HWLOC_OBJ_MACHINE\n</li>\n\n<li>\n*_membind_nodeset() memory binding interfaces deprecated:\nOne should use the variant without _nodeset suffix and pass the ::HWLOC_MEMBIND_BYNODESET flag.\n</li>\n\n<li>\nHWLOC_MEMBIND_REPLICATE removed:\nno supported operating system supports it anymore.\n</li>\n\n<li>\nhwloc_obj_snprintf() removed because it was long-deprecated\nby hwloc_obj_type_snprintf() and hwloc_obj_attr_snprintf().\n</li>\n\n<li>\nhwloc_obj_type_sscanf() deprecated, hwloc_obj_type_of_string() removed.\n</li>\n\n<li>\nhwloc_cpuset_from/to_nodeset_strict() deprecated:\nNow useless since all topologies are NUMA. Use the variant without the _strict suffix\n</li>\n\n<li>\nhwloc_distribute() and hwloc_distributev() removed,\ndeprecated by hwloc_distrib().\n</li>\n\n<li>\nThe Custom interface (hwloc_topology_set_custom(), etc.)\nwas removed, as well as the corresponding command-line tools (hwloc-assembler, etc.).\nTopologies always start with object with valid cpusets and nodesets.\n</li>\n\n<li>\n<code>obj->online_cpuset</code> removed:\nOffline PUs are simply listed in the <code>complete_cpuset</code> as previously.\n</li>\n\n<li>\n<code>obj->os_level</code> removed.\n</li>\n\n</ul>\n\n\n\n*/\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/.git/objects/pack/pack-667fc603735f62e540162218bcbfc41df9500f4c.idx",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/.git/objects/pack/pack-667fc603735f62e540162218bcbfc41df9500f4c.pack",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/utils/hwloc/test-hwloc-compress-dir.input.tar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/utils/hwloc/test-hwloc-compress-dir.output.tar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/utils/hwloc/test-hwloc-dump-hwdata/knl-snc4h50.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/tests/netloc/data/plafrim2.txz",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/tests/netloc/data/avakas.txz",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/tests/netloc/data/plafrim.txz",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/tests/netloc/data/scotch.txz",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/tests/hwloc/linux/1alpha.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/tests/hwloc/linux/8ia64-2n2s2c.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/tests/hwloc/linux/fakememinitiators-1np2c+1npp+gi.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/tests/hwloc/linux/4ia64-4s.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/tests/hwloc/linux/16em64t-4s2c2t.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/tests/hwloc/linux/8amd64-4n2c.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/tests/hwloc/linux/256ppc-8n8s4t.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/tests/hwloc/linux/8em64t-2s2ca2c-buggynuma.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/tests/hwloc/linux/96em64t-4n4d3ca2co.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/tests/hwloc/linux/2pa-pcidomain32bits.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/tests/hwloc/linux/2arm-2c.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/tests/hwloc/linux/32em64t-2n8c+1mic.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/tests/hwloc/linux/16ia64-8n2s.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/tests/hwloc/linux/20s390-2g6s4c.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/tests/hwloc/linux/48amd64-4d2n6c-sparse.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/tests/hwloc/linux/8em64t-2s2ca2c.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/tests/hwloc/linux/2i386-2c-nohugepage.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/tests/hwloc/linux/4em64t-2c2t-ignore-reorder.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/tests/hwloc/linux/16em64t-4s2c2t-offlines.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/tests/hwloc/linux/2ps3-2t.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/tests/hwloc/linux/40intel64-2g2n4c+pci.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/tests/hwloc/linux/64intel64-fakeKNL-A2A-cache.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/tests/hwloc/linux/8ia64-2s2c2t.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/tests/hwloc/linux/fakecpuid1f-64intel64-2p4d2n2c2t.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/tests/hwloc/linux/8em64t-4c2t.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/tests/hwloc/linux/40intel64-4n10c+pci-conflicts.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/tests/hwloc/linux/16amd64-8n2c.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/tests/hwloc/linux/256ia64-64n2s2c.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/tests/hwloc/linux/64fake-4n2s2ca2c2t.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/tests/hwloc/linux/64intel64-fakeKNL-SNC4-hybrid.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/tests/hwloc/linux/8ia64-4s2c.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/tests/hwloc/linux/4fake-4gr1nu1pu.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/tests/hwloc/linux/2amd64-2n.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/tests/hwloc/linux/16amd64-8n2c-cpusets.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/tests/hwloc/linux/2i386-2t-hugepagesizecount.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/tests/hwloc/linux/nvidiagpunumanodes.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/tests/hwloc/linux/fakeheterocpunuma.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/tests/hwloc/linux/16amd64-4n4c-cgroup-distance-merge.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/tests/hwloc/linux/8em64t-2s4c-heterogeneous.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/tests/hwloc/linux/2s390-2c.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/tests/hwloc/linux/64amd64-4s2n4ca2co.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/tests/hwloc/linux/32amd64-4s2n4c-cgroup2.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/tests/hwloc/linux/128ia64-17n4s2c.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/tests/hwloc/linux/16em64t-4s2ca2c-cpusetreorder.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/tests/hwloc/linux/allowed/test1.fsroot.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/tests/hwloc/x86/Intel-SandyBridge-2xXeon-E5-2650.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/tests/hwloc/x86/Hygon-Dhyana-32cores.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/tests/hwloc/x86/AMD-17h-Zen-2xEpyc-7451.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/tests/hwloc/x86/Intel-CPUID.1F-Qemu-2p3d3c2t.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/tests/hwloc/x86/AMD-15h-Bulldozer-4xOpteron-6272.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/tests/hwloc/x86/AMD-15h-Piledriver-4xOpteron-6348.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/tests/hwloc/x86/AMD-K8-SantaRosa-2xOpteron-2218.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/tests/hwloc/x86/Intel-KnightsLanding-XeonPhi-7210.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/tests/hwloc/x86/Intel-Westmere-2xXeon-X5650.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/tests/hwloc/x86/Intel-Skylake-2xXeon6140.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/tests/hwloc/x86/AMD-K10-MagnyCours-2xOpteron-6164HE.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/tests/hwloc/x86/Intel-Haswell-2xXeon-E5-2680v3.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/tests/hwloc/x86/Intel-Nehalem-2xXeon-X5550.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/tests/hwloc/x86/Intel-CPUID.1A-1p2co2t.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/tests/hwloc/x86/AMD-K10-Istanbul-8xOpteron-8439SE.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/tests/hwloc/x86/AMD-K8-SledgeHammer-2xOpteron-250.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/tests/hwloc/x86/Intel-KnightsCorner-XeonPhi-SE10P.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/tests/hwloc/x86/Intel-CascadeLake-2xXeon6230.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/tests/hwloc/x86/Zhaoxin-Shanghai-KaiSheng-ZXC+-FC1081.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/tests/hwloc/x86/Intel-Penryn-4xXeon-X7460.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/tests/hwloc/x86/Zhaoxin-CentaurHauls-ZXD-4600.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/tests/hwloc/x86/Intel-IvyBridge-12xXeon-E5-4620v2.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/tests/hwloc/x86/Intel-Core-2xXeon-E5345.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/tests/hwloc/x86/Intel-Broadwell-2xXeon-E5-2650Lv4.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/tests/hwloc/x86+linux/5intel64-hybrid-lakefield.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/tests/hwloc/x86+linux/64amd64-4p2n4ca2co.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/contrib/android/AndroidApp/lstopo/src/main/ic_launcher-web.png",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/contrib/android/AndroidApp/lstopo/src/main/res/mipmap-xxhdpi/ic_launcher.png",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/contrib/android/AndroidApp/lstopo/src/main/res/mipmap-xxxhdpi/ic_launcher.png",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/contrib/android/AndroidApp/lstopo/src/main/res/mipmap-hdpi/ic_launcher.png",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/contrib/android/AndroidApp/lstopo/src/main/res/mipmap-mdpi/ic_launcher.png",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/contrib/android/AndroidApp/lstopo/src/main/res/mipmap-xhdpi/ic_launcher.png",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/contrib/android/AndroidApp/gradle/wrapper/gradle-wrapper.jar",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/contrib/android/assets/lstopo.png",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/doc/images/ppc64-with-smt.png",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/doc/images/emmett.png",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/doc/images/hagrid.png",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/doc/images/ppc64-full-with-smt.png",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/doc/images/dudley.png",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/doc/images/devel09-pci.png",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/doc/images/netloc_design.png",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/doc/images/netloc_draw.png",
        "/tmp/vanessa/spack-stage/spack-stage-hwloc-master-a4kix76fghq7x2q3m57fw52adkxl45ar/spack-src/doc/images/ppc64-without-smt.png"
    ],
    "total_files": 752
}