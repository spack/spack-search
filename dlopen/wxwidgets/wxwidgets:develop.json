{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/setup.h.in": "/* This define (__WX_SETUP_H__) is used both to ensure setup.h is included\n * only once and to indicate that we are building using configure. */\n#ifndef __WX_SETUP_H__\n#define __WX_SETUP_H__\n\n/* never undefine inline or const keywords for C++ compilation */\n#ifndef __cplusplus\n\n/* Define to empty if the keyword does not work.  */\n#undef const\n\n/* Define as __inline if that's what the C compiler calls it.  */\n#undef inline\n\n#endif /* __cplusplus */\n\n/* the installation location prefix from configure */\n#undef wxINSTALL_PREFIX\n\n/* Define to `int' if <sys/types.h> doesn't define.  */\n#undef gid_t\n\n/* Define to `int' if <sys/types.h> doesn't define.  */\n#undef mode_t\n\n/* Define to `long' if <sys/types.h> doesn't define.  */\n#undef off_t\n\n/* Define to `int' if <sys/types.h> doesn't define.  */\n#undef pid_t\n\n/* Define to `unsigned' if <sys/types.h> doesn't define.  */\n#undef size_t\n\n/* Define if ssize_t type is available.  */\n#undef HAVE_SSIZE_T\n\n/* Define if you have the ANSI C header files.  */\n#undef STDC_HEADERS\n\n/* Define this to get extra features from GNU libc. */\n#ifndef _GNU_SOURCE\n#undef _GNU_SOURCE\n#endif\n\n/* Define to `int' if <sys/types.h> doesn't define.  */\n#undef uid_t\n\n/* Define if your processor stores words with the most significant\n   byte first (like Motorola and SPARC, unlike Intel and VAX).  */\n#undef WORDS_BIGENDIAN\n\n/* Define this if your version of GTK+ is greater than 1.2.7 */\n#undef __WXGTK127__\n\n/* Define this if your version of GTK+ is greater than 2.0 */\n#undef __WXGTK20__\n\n/* Define this if your version of GTK+ is greater than 2.10 */\n#undef __WXGTK210__\n\n/* Define this if your version of GTK+ is greater than 2.18 */\n#undef __WXGTK218__\n\n/* Define this if your version of GTK+ is greater than 2.20 */\n#undef __WXGTK220__\n\n/* Define this if your version of GTK+ is >= 3.0 */\n#undef __WXGTK3__\n\n/* Define this if your version of GTK+ is >= 3.90.0 */\n#undef __WXGTK4__\n\n/* Define this if you want to use GPE features */\n#undef __WXGPE__\n\n/* Define this if your version of Motif is greater than 2.0 */\n#undef __WXMOTIF20__\n\n/* Define this if you are using Lesstif */\n#undef __WXLESSTIF__\n\n/*\n * Define to 1 for Unix[-like] system\n */\n#define wxUSE_UNIX 0\n\n#undef __UNIX__\n\n#undef __AIX__\n#undef __BSD__\n#undef __DARWIN__\n#undef __EMX__\n#undef __FREEBSD__\n#undef __HPUX__\n#undef __LINUX__\n#undef __NETBSD__\n#undef __OPENBSD__\n#undef __OSF__\n#undef __QNX__\n#undef __SGI__\n#undef __SOLARIS__\n#undef __SUN__\n#undef __SUNOS__\n#undef __SVR4__\n#undef __SYSV__\n#undef __ULTRIX__\n#undef __UNIXWARE__\n#undef __VMS__\n\n#undef __IA64__\n#undef __ALPHA__\n\n/* NanoX (with wxX11) */\n#define wxUSE_NANOX 0\n\n/* PowerPC Darwin & Mac OS X */\n#undef __POWERPC__\n\n/* Hack to make IOGraphicsTypes.h not define Point conflicting with MacTypes */\n#undef __Point__\n\n/* MS-DOS with DJGPP */\n#undef __DOS__\n\n/* Stupid hack; __WINDOWS__ clashes with wx/defs.h */\n#ifndef __WINDOWS__\n#undef __WINDOWS__\n#endif\n\n#ifndef __WIN32__\n#undef __WIN32__\n#endif\n#ifndef __GNUWIN32__\n#undef __GNUWIN32__\n#endif\n#ifndef STRICT\n#undef STRICT\n#endif\n#ifndef WINVER\n#undef WINVER\n#endif\n\n/* --- start common options --- */\n\n#ifndef wxUSE_GUI\n    #define wxUSE_GUI            0\n#endif\n\n\n#define WXWIN_COMPATIBILITY_2_8 0\n\n#define WXWIN_COMPATIBILITY_3_0 0\n\n#define wxDIALOG_UNIT_COMPATIBILITY   0\n\n#define wxUSE_UNSAFE_WXSTRING_CONV 0\n\n#define wxUSE_REPRODUCIBLE_BUILD 0\n\n\n\n#define wxUSE_ON_FATAL_EXCEPTION 0\n\n#define wxUSE_STACKWALKER 0\n\n#define wxUSE_DEBUGREPORT 0\n\n\n\n#define wxUSE_DEBUG_CONTEXT 0\n\n#define wxUSE_MEMORY_TRACING 0\n\n#define wxUSE_GLOBAL_MEMORY_OPERATORS 0\n\n#define wxUSE_DEBUG_NEW_ALWAYS 0\n\n\n\n#ifndef wxUSE_UNICODE\n    #define wxUSE_UNICODE 0\n#endif\n\n\n#define wxUSE_EXCEPTIONS    0\n\n#define wxUSE_EXTENDED_RTTI 0\n\n#define wxUSE_LOG 0\n\n#define wxUSE_LOGWINDOW 0\n\n#define wxUSE_LOGGUI 0\n\n#define wxUSE_LOG_DIALOG 0\n\n#define wxUSE_CMDLINE_PARSER 0\n\n#define wxUSE_THREADS 0\n\n#define wxUSE_STREAMS       0\n\n#define wxUSE_PRINTF_POS_PARAMS      0\n\n#define wxUSE_COMPILER_TLS 0\n\n\n#define wxUSE_STL 0\n\n#define wxUSE_STD_DEFAULT  0\n\n#define wxUSE_STD_CONTAINERS_COMPATIBLY wxUSE_STD_DEFAULT\n\n#define wxUSE_STD_CONTAINERS 0\n\n#define wxUSE_STD_IOSTREAM  wxUSE_STD_DEFAULT\n\n#define wxUSE_STD_STRING  wxUSE_STD_DEFAULT\n\n#define wxUSE_STD_STRING_CONV_IN_WXSTRING wxUSE_STL\n\n\n#define wxUSE_LONGLONG      0\n\n#define wxUSE_BASE64        0\n\n#define wxUSE_CONSOLE_EVENTLOOP 0\n\n#define wxUSE_FILE          0\n#define wxUSE_FFILE         0\n\n#define wxUSE_FSVOLUME      0\n\n#define wxUSE_SECRETSTORE   0\n\n#define wxUSE_STDPATHS      0\n\n#define wxUSE_TEXTBUFFER    0\n\n#define wxUSE_TEXTFILE      0\n\n#define wxUSE_INTL          0\n\n#define wxUSE_XLOCALE       0\n\n#define wxUSE_DATETIME      0\n\n#define wxUSE_TIMER         0\n\n#define wxUSE_STOPWATCH     0\n\n#define wxUSE_FSWATCHER     0\n\n#define wxUSE_CONFIG        0\n\n#define wxUSE_CONFIG_NATIVE   0\n\n#define wxUSE_DIALUP_MANAGER   0\n\n#define wxUSE_DYNLIB_CLASS    0\n\n#define wxUSE_DYNAMIC_LOADER  0\n\n#define wxUSE_SOCKETS       0\n\n#define wxUSE_IPV6          0\n\n#define wxUSE_FILESYSTEM    0\n\n#define wxUSE_FS_ZIP        0\n\n#define wxUSE_FS_ARCHIVE    0\n\n#define wxUSE_FS_INET       0\n\n#define wxUSE_ARCHIVE_STREAMS     0\n\n#define wxUSE_ZIPSTREAM     0\n\n#define wxUSE_TARSTREAM     0\n\n#define wxUSE_ZLIB          0\n\n#define wxUSE_LIBLZMA       0\n\n#define wxUSE_APPLE_IEEE          0\n\n#define wxUSE_JOYSTICK            0\n\n#define wxUSE_FONTENUM 0\n\n#define wxUSE_FONTMAP 0\n\n#define wxUSE_MIMETYPE 0\n\n#define wxUSE_WEBREQUEST 0\n\n#ifdef __APPLE__\n#define wxUSE_WEBREQUEST_URLSESSION wxUSE_WEBREQUEST\n#else\n#define wxUSE_WEBREQUEST_URLSESSION 0\n#endif\n\n#define wxUSE_WEBREQUEST_CURL 0\n\n#define wxUSE_PROTOCOL 0\n\n#define wxUSE_PROTOCOL_FILE 0\n#define wxUSE_PROTOCOL_FTP 0\n#define wxUSE_PROTOCOL_HTTP 0\n\n#define wxUSE_URL 0\n\n#define wxUSE_URL_NATIVE 0\n\n#define wxUSE_VARIANT 0\n\n#define wxUSE_ANY 0\n\n#define wxUSE_REGEX       0\n\n#define wxUSE_SYSTEM_OPTIONS 0\n\n#define wxUSE_SOUND      0\n\n#define wxUSE_MEDIACTRL     0\n\n#define wxUSE_XRC       0\n\n#define wxUSE_XML       wxUSE_XRC\n\n#define wxUSE_AUI       0\n\n#define wxUSE_RIBBON    0\n\n#define wxUSE_PROPGRID  0\n\n#define wxUSE_STC 0\n\n#define wxUSE_WEBVIEW 0\n\n#ifdef __WXMSW__\n#define wxUSE_WEBVIEW_IE 0\n#else\n#define wxUSE_WEBVIEW_IE 0\n#endif\n\n#define wxUSE_WEBVIEW_EDGE 0\n\n#if (defined(__WXGTK__) && !defined(__WXGTK3__)) || defined(__WXOSX__)\n#define wxUSE_WEBVIEW_WEBKIT 0\n#else\n#define wxUSE_WEBVIEW_WEBKIT 0\n#endif\n\n#if defined(__WXGTK3__)\n#define wxUSE_WEBVIEW_WEBKIT2 0\n#else\n#define wxUSE_WEBVIEW_WEBKIT2 0\n#endif\n\n\n#if defined(_MSC_VER) || \\\n    (defined(__MINGW32__) && (__GNUC__ > 4 || __GNUC_MINOR__ >= 8))\n#define wxUSE_GRAPHICS_CONTEXT 0\n#else\n#define wxUSE_GRAPHICS_CONTEXT 0\n#endif\n\n#define wxUSE_CAIRO 0\n\n\n\n#define wxUSE_CONTROLS     0\n\n#define wxUSE_MARKUP       0\n\n#define wxUSE_POPUPWIN     0\n\n#define wxUSE_TIPWINDOW    0\n\n#define wxUSE_ACTIVITYINDICATOR 0\n#define wxUSE_ANIMATIONCTRL 0\n#define wxUSE_BANNERWINDOW  0\n#define wxUSE_BUTTON        0\n#define wxUSE_BMPBUTTON     0\n#define wxUSE_CALENDARCTRL  0\n#define wxUSE_CHECKBOX      0\n#define wxUSE_CHECKLISTBOX  0\n#define wxUSE_CHOICE        0\n#define wxUSE_COLLPANE      0\n#define wxUSE_COLOURPICKERCTRL 0\n#define wxUSE_COMBOBOX      0\n#define wxUSE_COMMANDLINKBUTTON 0\n#define wxUSE_DATAVIEWCTRL  0\n#define wxUSE_DATEPICKCTRL  0\n#define wxUSE_DIRPICKERCTRL 0\n#define wxUSE_EDITABLELISTBOX 0\n#define wxUSE_FILECTRL      0\n#define wxUSE_FILEPICKERCTRL 0\n#define wxUSE_FONTPICKERCTRL 0\n#define wxUSE_GAUGE         0\n#define wxUSE_HEADERCTRL    0\n#define wxUSE_HYPERLINKCTRL 0\n#define wxUSE_LISTBOX       0\n#define wxUSE_LISTCTRL      0\n#define wxUSE_RADIOBOX      0\n#define wxUSE_RADIOBTN      0\n#define wxUSE_RICHMSGDLG    0\n#define wxUSE_SCROLLBAR     0\n#define wxUSE_SEARCHCTRL    0\n#define wxUSE_SLIDER        0\n#define wxUSE_SPINBTN       0\n#define wxUSE_SPINCTRL      0\n#define wxUSE_STATBOX       0\n#define wxUSE_STATLINE      0\n#define wxUSE_STATTEXT      0\n#define wxUSE_STATBMP       0\n#define wxUSE_TEXTCTRL      0\n#define wxUSE_TIMEPICKCTRL  0\n#define wxUSE_TOGGLEBTN     0\n#define wxUSE_TREECTRL      0\n#define wxUSE_TREELISTCTRL  0\n\n#define wxUSE_NATIVE_DATAVIEWCTRL 0\n\n#define wxUSE_STATUSBAR    0\n\n#define wxUSE_NATIVE_STATUSBAR        0\n\n#define wxUSE_TOOLBAR 0\n#define wxUSE_TOOLBAR_NATIVE 0\n\n#define wxUSE_NOTEBOOK 0\n\n#define wxUSE_LISTBOOK 0\n\n#define wxUSE_CHOICEBOOK 0\n\n#define wxUSE_TREEBOOK 0\n\n#define wxUSE_TOOLBOOK 0\n\n#define wxUSE_TASKBARICON 0\n\n#define wxUSE_GRID         0\n\n#define wxUSE_MINIFRAME 0\n\n#define wxUSE_COMBOCTRL 0\n\n#define wxUSE_ODCOMBOBOX 0\n\n#define wxUSE_BITMAPCOMBOBOX 0\n\n#define wxUSE_REARRANGECTRL 0\n\n#define wxUSE_ADDREMOVECTRL 0\n\n\n#define wxUSE_ACCEL 0\n\n#define wxUSE_ARTPROVIDER_STD 0\n\n#define wxUSE_ARTPROVIDER_TANGO 0\n\n#define wxUSE_HOTKEY 0\n\n#define wxUSE_CARET         0\n\n#define wxUSE_DISPLAY       0\n\n#define wxUSE_GEOMETRY            0\n\n#define wxUSE_IMAGLIST      0\n\n#define wxUSE_INFOBAR       0\n\n#define wxUSE_MENUS         0\n\n#define wxUSE_MENUBAR       0\n\n#define wxUSE_NOTIFICATION_MESSAGE 0\n\n#define wxUSE_PREFERENCES_EDITOR 0\n\n#define wxUSE_PRIVATE_FONTS 0\n\n#define wxUSE_RICHTOOLTIP 0\n\n#define wxUSE_SASH          0\n\n#define wxUSE_SPLITTER      0\n\n#define wxUSE_TOOLTIPS      0\n\n#define wxUSE_VALIDATORS 0\n\n#ifdef __WXMSW__\n#define wxUSE_AUTOID_MANAGEMENT 0\n#else\n#define wxUSE_AUTOID_MANAGEMENT 0\n#endif\n\n\n#define wxUSE_COMMON_DIALOGS 0\n\n#define wxUSE_BUSYINFO      0\n\n#define wxUSE_CHOICEDLG     0\n\n#define wxUSE_COLOURDLG     0\n\n#define wxUSE_DIRDLG 0\n\n\n#define wxUSE_FILEDLG       0\n\n#define wxUSE_FINDREPLDLG       0\n\n#define wxUSE_FONTDLG       0\n\n#define wxUSE_MSGDLG        0\n\n#define wxUSE_PROGRESSDLG 0\n\n#define wxUSE_NATIVE_PROGRESSDLG 0\n\n#define wxUSE_STARTUP_TIPS 0\n\n#define wxUSE_TEXTDLG 0\n\n#define wxUSE_NUMBERDLG 0\n\n#define wxUSE_CREDENTIALDLG 0\n\n#define wxUSE_SPLASH 0\n\n#define wxUSE_WIZARDDLG 0\n\n#define wxUSE_ABOUTDLG 0\n\n#define wxUSE_FILE_HISTORY 0\n\n\n#define wxUSE_METAFILE              0\n#define wxUSE_ENH_METAFILE          0\n#define wxUSE_WIN_METAFILES_ALWAYS  0\n\n\n#define wxUSE_MDI 0\n\n#define wxUSE_DOC_VIEW_ARCHITECTURE 0\n\n#define wxUSE_MDI_ARCHITECTURE    0\n\n#define wxUSE_PRINTING_ARCHITECTURE  0\n\n#define wxUSE_HTML          0\n\n#define wxUSE_GLCANVAS       0\n\n#define wxUSE_GLCANVAS_EGL   0\n\n#define wxUSE_RICHTEXT       0\n\n\n#define wxUSE_CLIPBOARD     0\n\n#define wxUSE_DATAOBJ       0\n\n#define wxUSE_DRAG_AND_DROP 0\n\n#ifdef __WXMSW__\n#define wxUSE_ACCESSIBILITY 0\n#else\n#define wxUSE_ACCESSIBILITY 0\n#endif\n\n\n#define wxUSE_SNGLINST_CHECKER  0\n\n#define wxUSE_DRAGIMAGE 0\n\n#define wxUSE_IPC         0\n\n#define wxUSE_HELP        0\n\n\n#define wxUSE_MS_HTML_HELP 0\n\n\n#define wxUSE_WXHTML_HELP 0\n\n#define wxUSE_CONSTRAINTS 0\n\n\n#define wxUSE_SPLINES     0\n\n\n#define wxUSE_MOUSEWHEEL        0\n\n\n#define wxUSE_UIACTIONSIMULATOR 0\n\n\n#define wxUSE_POSTSCRIPT  0\n\n#define wxUSE_AFM_FOR_POSTSCRIPT 0\n\n#define wxUSE_SVG 0\n\n#define wxUSE_DC_TRANSFORM_MATRIX 0\n\n\n\n#define wxUSE_IMAGE         0\n\n#define wxUSE_LIBPNG        0\n\n#define wxUSE_LIBJPEG       0\n\n#define wxUSE_LIBTIFF       0\n\n#define wxUSE_TGA           0\n\n#define wxUSE_GIF           0\n\n#define wxUSE_PNM           0\n\n#define wxUSE_PCX           0\n\n#define wxUSE_IFF           0\n\n#define wxUSE_XPM           0\n\n#define wxUSE_ICO_CUR       0\n\n#define wxUSE_PALETTE       0\n\n\n#define wxUSE_ALL_THEMES    0\n\n#define wxUSE_THEME_GTK     0\n#define wxUSE_THEME_METAL   0\n#define wxUSE_THEME_MONO    0\n#define wxUSE_THEME_WIN32   0\n\n/* --- end common options --- */\n\n/*\n * Unix-specific options\n */\n#define wxUSE_SELECT_DISPATCHER 0\n#define wxUSE_EPOLL_DISPATCHER 0\n\n#define wxUSE_UNICODE_UTF8 0\n#define wxUSE_UTF8_LOCALE_ONLY 0\n\n/*\n   Use GStreamer for Unix.\n\n   Default is 0 as this requires a lot of dependencies which might not be\n   available.\n\n   Recommended setting: 1 (wxMediaCtrl won't work by default without it).\n */\n#define wxUSE_GSTREAMER 0\n\n#define wxUSE_GSTREAMER_PLAYER 0\n\n/*\n   Use XTest extension to implement wxUIActionSimulator?\n\n   Default is 1, it is set to 0 if the necessary headers/libraries are not\n   found by configure.\n\n   Recommended setting: 1, wxUIActionSimulator won't work in wxGTK3 without it.\n */\n#define wxUSE_XTEST 0\n\n/* --- start MSW options --- */\n\n\n#define wxUSE_GRAPHICS_GDIPLUS wxUSE_GRAPHICS_CONTEXT\n\n#if defined(_MSC_VER) && _MSC_VER >= 1600\n    #define wxUSE_GRAPHICS_DIRECT2D wxUSE_GRAPHICS_CONTEXT\n#else\n    #define wxUSE_GRAPHICS_DIRECT2D 0\n#endif\n\n#if defined(_MSC_VER) || defined(__MINGW64_VERSION_MAJOR)\n    #define wxUSE_WEBREQUEST_WINHTTP 0\n#else\n    #define wxUSE_WEBREQUEST_WINHTTP 0\n#endif\n\n\n#define wxUSE_OLE           0\n\n#define wxUSE_OLE_AUTOMATION 0\n\n#define wxUSE_ACTIVEX 0\n\n#if defined(_MSC_VER) && _MSC_VER >= 1700 && !defined(_USING_V110_SDK71_)\n    #define wxUSE_WINRT 0\n#else\n    #define wxUSE_WINRT 0\n#endif\n\n#define wxUSE_DC_CACHEING 0\n\n#define wxUSE_WXDIB 0\n\n#define wxUSE_POSTSCRIPT_ARCHITECTURE_IN_MSW 0\n\n#define wxUSE_REGKEY 0\n\n#define wxUSE_RICHEDIT  0\n\n#define wxUSE_RICHEDIT2 0\n\n#define wxUSE_OWNER_DRAWN 0\n\n#define wxUSE_TASKBARICON_BALLOONS 0\n\n#define wxUSE_TASKBARBUTTON 0\n\n#define wxUSE_UXTHEME           0\n\n#define wxUSE_INKEDIT  0\n\n#define wxUSE_INICONF 0\n\n#define wxUSE_WINSOCK2 0\n\n\n#define wxUSE_DATEPICKCTRL_GENERIC 0\n\n#define wxUSE_TIMEPICKCTRL_GENERIC 0\n\n\n#if defined(__VISUALC__) || defined(__MINGW64_TOOLCHAIN__)\n    #define wxUSE_DBGHELP 0\n#else\n    #define wxUSE_DBGHELP 0\n#endif\n\n#define wxUSE_CRASHREPORT 0\n/* --- end MSW options --- */\n\n/*\n * Define if your compiler has C99 va_copy\n */\n#undef HAVE_VA_COPY\n\n/*\n * Define if va_list type is an array\n */\n#undef VA_LIST_IS_ARRAY\n\n/*\n * Define if you don't want variadic macros to be used even if they are\n * supported by the compiler.\n */\n#undef wxNO_VARIADIC_MACROS\n\n/*\n * Define if your compiler has std::wstring\n */\n#undef HAVE_STD_WSTRING\n/*\n * Define if your compiler has compliant std::string::compare\n */\n#undef HAVE_STD_STRING_COMPARE\n/*\n * Define if your compiler has <hash_map>\n */\n#undef HAVE_HASH_MAP\n/*\n * Define if your compiler has <ext/hash_map>\n */\n#undef HAVE_EXT_HASH_MAP\n/*\n * Define if your compiler has std::hash_map/hash_set\n */\n#undef HAVE_STD_HASH_MAP\n/*\n * Define if your compiler has __gnu_cxx::hash_map/hash_set\n */\n#undef HAVE_GNU_CXX_HASH_MAP\n\n/*\n * Define if your compiler has std::unordered_map\n */\n#undef HAVE_STD_UNORDERED_MAP\n\n/*\n * Define if your compiler has std::unordered_set\n */\n#undef HAVE_STD_UNORDERED_SET\n\n/*\n * Define if your compiler has std::tr1::unordered_map\n */\n#undef HAVE_TR1_UNORDERED_MAP\n\n/*\n * Define if your compiler has std::tr1::unordered_set\n */\n#undef HAVE_TR1_UNORDERED_SET\n\n/*\n * Define if your compiler has <tr1/type_traits>\n */\n#undef HAVE_TR1_TYPE_TRAITS\n\n/*\n * Define if your compiler has <type_traits>\n */\n#undef HAVE_TYPE_TRAITS\n\n/*\n * Define if the compiler supports simple visibility declarations.\n */\n#undef HAVE_VISIBILITY\n\n/*\n * Define if the compiler supports GCC's atomic memory access builtins\n */\n#undef HAVE_GCC_ATOMIC_BUILTINS\n\n/*\n * Define if compiler's visibility support in libstdc++ is broken\n */\n#undef HAVE_BROKEN_LIBSTDCXX_VISIBILITY\n\n/*\n * The built-in regex supports advanced REs in additional to POSIX's basic\n * and extended. Your system regex probably won't support this, and in this\n * case WX_NO_REGEX_ADVANCED should be defined.\n */\n#undef WX_NO_REGEX_ADVANCED\n/*\n * On GNU systems use re_search instead of regexec, since the latter does a\n * strlen on the search text affecting the performance of some operations.\n */\n#undef HAVE_RE_SEARCH\n/*\n * Use SDL for audio (Unix)\n */\n#define wxUSE_LIBSDL 0\n\n/*\n * Compile sound backends as plugins\n */\n#define wxUSE_PLUGINS 0\n\n/*\n * Use GTK print for printing under GTK+ 2.10+\n */\n#define wxUSE_GTKPRINT 0\n/*\n * Use GNOME VFS for MIME types\n */\n#define wxUSE_LIBGNOMEVFS 0\n/*\n * Use libnotify library.\n */\n#define wxUSE_LIBNOTIFY 0\n/*\n * Use libnotify 0.7+ API.\n */\n#define wxUSE_LIBNOTIFY_0_7 0\n/*\n * Use libXpm\n */\n#define wxHAVE_LIB_XPM 0\n/*\n * Define if you have pthread_cleanup_push/pop()\n */\n#undef wxHAVE_PTHREAD_CLEANUP\n/*\n * Define if compiler has __thread keyword.\n */\n#undef HAVE___THREAD_KEYWORD\n/*\n * Define if large (64 bit file offsets) files are supported.\n */\n#undef HAVE_LARGEFILE_SUPPORT\n\n/*\n * Use OpenGL\n */\n#define wxUSE_OPENGL 0\n\n/*\n * Use MS HTML Help via libmspack (Unix)\n */\n#define wxUSE_LIBMSPACK 0\n\n/*\n * Matthews garbage collection (used for MrEd?)\n */\n#define WXGARBAGE_COLLECTION_ON 0\n\n/*\n * wxWebKitCtrl\n */\n#define wxUSE_WEBKIT 0\n\n/*\n * The const keyword is being introduced more in wxWindows.\n * You can use this setting to maintain backward compatibility.\n * If 0: will use const wherever possible.\n * If 1: will use const only where necessary\n *       for precompiled headers to work.\n * If 2: will be totally backward compatible, but precompiled\n *       headers may not work and program size will be larger.\n */\n#define CONST_COMPATIBILITY 0\n\n/*\n * use the session manager to detect KDE/GNOME\n */\n#define wxUSE_DETECT_SM     0\n\n\n/* define with the name of timezone variable */\n#undef WX_TIMEZONE\n\n/* The type of 3rd argument to getsockname() - usually size_t or int */\n#undef WX_SOCKLEN_T\n\n/* The type of 5th argument to getsockopt() - usually size_t or int */\n#undef SOCKOPTLEN_T\n\n/* The type of statvfs(2) argument */\n#undef WX_STATFS_T\n\n/* The signal handler prototype */\n#undef wxTYPE_SA_HANDLER\n\n/* gettimeofday() usually takes 2 arguments, but some really old systems might\n * have only one, in which case define WX_GETTIMEOFDAY_NO_TZ */\n#undef WX_GETTIMEOFDAY_NO_TZ\n\n/* struct tm doesn't always have the tm_gmtoff field, define this if it does */\n#undef WX_GMTOFF_IN_TM\n\n/* check if nl_langinfo() can be called with argument _NL_TIME_FIRST_WEEKDAY */\n#undef HAVE_NL_TIME_FIRST_WEEKDAY\n\n/* Define if you have poll(2) function */\n#undef HAVE_POLL\n\n/* Define if you have pw_gecos field in struct passwd */\n#undef HAVE_PW_GECOS\n\n/* Define if you have __cxa_demangle() in <cxxabi.h> */\n#undef HAVE_CXA_DEMANGLE\n\n/* Define if you have dlopen() */\n#undef HAVE_DLOPEN\n\n/* Define if you have gettimeofday() */\n#undef HAVE_GETTIMEOFDAY\n\n/* Define if fsync() is available */\n#undef HAVE_FSYNC\n\n/* Define if round() is available */\n#undef HAVE_ROUND\n\n/* Define if you have ftime() */\n#undef HAVE_FTIME\n\n/* Define if you have nanosleep() */\n#undef HAVE_NANOSLEEP\n\n/* Define if you have sched_yield */\n#undef HAVE_SCHED_YIELD\n\n/* Define if you have pthread_mutexattr_t and functions to work with it */\n#undef HAVE_PTHREAD_MUTEXATTR_T\n\n/* Define if you have pthread_mutexattr_settype() declaration */\n#undef HAVE_PTHREAD_MUTEXATTR_SETTYPE_DECL\n\n/* Define if you have PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP */\n#undef HAVE_PTHREAD_RECURSIVE_MUTEX_INITIALIZER\n\n/* Define if you have pthread_cancel */\n#undef HAVE_PTHREAD_CANCEL\n\n/* Define if you have pthread_mutex_timedlock */\n#undef HAVE_PTHREAD_MUTEX_TIMEDLOCK\n\n/* Define if you have pthread_attr_setstacksize */\n#undef HAVE_PTHREAD_ATTR_SETSTACKSIZE\n\n/* Define if you have snprintf() */\n#undef HAVE_SNPRINTF\n\n/* Define if you have snprintf() declaration in the header */\n#undef HAVE_SNPRINTF_DECL\n\n/* Define if you have a snprintf() which supports positional arguments\n   (defined in the unix98 standard) */\n#undef HAVE_UNIX98_PRINTF\n\n/* define if you have statfs function */\n#undef HAVE_STATFS\n\n/* define if you have statfs prototype */\n#undef HAVE_STATFS_DECL\n\n/* define if you have statvfs function */\n#undef HAVE_STATVFS\n\n/* Define if you have strtoull() and strtoll() */\n#undef HAVE_STRTOULL\n\n/* Define if you have all functions to set thread priority */\n#undef HAVE_THREAD_PRIORITY_FUNCTIONS\n\n/* Define if you have vsnprintf() */\n#undef HAVE_VSNPRINTF\n\n/* Define if you have vsnprintf() declaration in the header */\n#undef HAVE_VSNPRINTF_DECL\n\n/* Define if you have a _broken_ vsnprintf() declaration in the header,\n * with 'char*' for the 3rd parameter instead of 'const char*' */\n#undef HAVE_BROKEN_VSNPRINTF_DECL\n\n/* Define if you have a _broken_ vsscanf() declaration in the header,\n * with 'char*' for the 1st parameter instead of 'const char*' */\n#undef HAVE_BROKEN_VSSCANF_DECL\n\n/* Define if you have vsscanf() */\n#undef HAVE_VSSCANF\n\n/* Define if you have vsscanf() declaration in the header */\n#undef HAVE_VSSCANF_DECL\n\n/* Define if you have usleep() */\n#undef HAVE_USLEEP\n\n/* Define if you have wcscasecmp() function  */\n#undef HAVE_WCSCASECMP\n\n/* Define if you have wcsncasecmp() function  */\n#undef HAVE_WCSNCASECMP\n\n/* Define if you have wcslen function  */\n#undef HAVE_WCSLEN\n\n/* Define if you have wcsdup function  */\n#undef HAVE_WCSDUP\n\n/* Define if you have wcsftime() function  */\n#undef HAVE_WCSFTIME\n\n/* Define if you have strnlen() function */\n#undef HAVE_STRNLEN\n\n/* Define if you have wcsnlen() function */\n#undef HAVE_WCSNLEN\n\n/* Define if you have wcstoull() and wcstoll() */\n#undef HAVE_WCSTOULL\n\n/* The number of bytes in a wchar_t.  */\n#undef SIZEOF_WCHAR_T\n\n/* The number of bytes in a int.  */\n#undef SIZEOF_INT\n\n/* The number of bytes in a pointer.  */\n#undef SIZEOF_VOID_P\n\n/* The number of bytes in a long.  */\n#undef SIZEOF_LONG\n\n/* The number of bytes in a long long.  */\n#undef SIZEOF_LONG_LONG\n\n/* The number of bytes in a short.  */\n#undef SIZEOF_SHORT\n\n/* The number of bytes in a size_t.  */\n#undef SIZEOF_SIZE_T\n\n/* Define if size_t on your machine is the same type as unsigned int. */\n#undef wxSIZE_T_IS_UINT\n\n/* Define if size_t on your machine is the same type as unsigned long. */\n#undef wxSIZE_T_IS_ULONG\n\n/* Define if wchar_t is distinct type in your compiler. */\n#undef wxWCHAR_T_IS_REAL_TYPE\n\n/* Define if you have the dladdr function.  */\n#undef HAVE_DLADDR\n\n/* Define if you have Posix fnctl() function. */\n#undef HAVE_FCNTL\n\n/* Define if you have BSD flock() function. */\n#undef HAVE_FLOCK\n\n/* Define if you have getaddrinfo function. */\n#undef HAVE_GETADDRINFO\n\n/* Define if you have a gethostbyname_r function taking 6 arguments. */\n#undef HAVE_FUNC_GETHOSTBYNAME_R_6\n\n/* Define if you have a gethostbyname_r function taking 5 arguments. */\n#undef HAVE_FUNC_GETHOSTBYNAME_R_5\n\n/* Define if you have a gethostbyname_r function taking 3 arguments. */\n#undef HAVE_FUNC_GETHOSTBYNAME_R_3\n\n/* Define if you only have a gethostbyname function */\n#undef HAVE_GETHOSTBYNAME\n\n/* Define if you have the gethostname function.  */\n#undef HAVE_GETHOSTNAME\n\n/* Define if you have a getservbyname_r function taking 6 arguments. */\n#undef HAVE_FUNC_GETSERVBYNAME_R_6\n\n/* Define if you have a getservbyname_r function taking 5 arguments. */\n#undef HAVE_FUNC_GETSERVBYNAME_R_5\n\n/* Define if you have a getservbyname_r function taking 4 arguments. */\n#undef HAVE_FUNC_GETSERVBYNAME_R_4\n\n/* Define if you only have a getservbyname function */\n#undef HAVE_GETSERVBYNAME\n\n/* Define if you have the gmtime_r function.  */\n#undef HAVE_GMTIME_R\n\n/* Define if you have the inet_addr function.  */\n#undef HAVE_INET_ADDR\n\n/* Define if you have the inet_aton function.  */\n#undef HAVE_INET_ATON\n\n/* Define if you have the localtime_r function.  */\n#undef HAVE_LOCALTIME_R\n\n/* Define if you have the mktemp function.  */\n#undef HAVE_MKTEMP\n\n/* Define if you have the mkstemp function.  */\n#undef HAVE_MKSTEMP\n\n/* Define if you have the putenv function.  */\n#undef HAVE_PUTENV\n\n/* Define if you have the setenv function.  */\n#undef HAVE_SETENV\n\n/* Define if you have strtok_r function. */\n#undef HAVE_STRTOK_R\n\n/* Define if you have thr_setconcurrency function */\n#undef HAVE_THR_SETCONCURRENCY\n\n/* Define if you have pthread_setconcurrency function */\n#undef HAVE_PTHREAD_SET_CONCURRENCY\n\n/* Define if you have the uname function.  */\n#undef HAVE_UNAME\n\n/* Define if you have the unsetenv function.  */\n#undef HAVE_UNSETENV\n\n/* Define if you have the <X11/XKBlib.h> header file.  */\n#undef HAVE_X11_XKBLIB_H\n\n/* Define if you have the <X11/extensions/xf86vmode.h> header file.  */\n#undef HAVE_X11_EXTENSIONS_XF86VMODE_H\n\n/* Define if you have the <sched.h> header file.  */\n#undef HAVE_SCHED_H\n\n/* Define if you have the <unistd.h> header file.  */\n#undef HAVE_UNISTD_H\n\n/* Define if you have the <fcntl.h> header file.  */\n#undef HAVE_FCNTL_H\n\n/* Define if you have the <wchar.h> header file.  */\n#undef HAVE_WCHAR_H\n\n/* Define if you have the <wcstr.h> header file.  */\n#undef HAVE_WCSTR_H\n\n/* Define if you have <widec.h> (Solaris only) */\n#undef HAVE_WIDEC_H\n\n/* Define if you have the <iconv.h> header file and iconv() symbol.  */\n#undef HAVE_ICONV\n\n/* Define as \"const\" if the declaration of iconv() needs const.  */\n#undef ICONV_CONST\n\n/* Define if you have the <langinfo.h> header file.  */\n#undef HAVE_LANGINFO_H\n\n/* Define if you have the <sys/soundcard.h> header file. */\n#undef HAVE_SYS_SOUNDCARD_H\n\n/* Define if you have wcsrtombs() function */\n#undef HAVE_WCSRTOMBS\n\n/* Define this if you have putws() */\n#undef HAVE_PUTWS\n\n/* Define this if you have fputws() */\n#undef HAVE_FPUTWS\n\n/* Define this if you have wprintf() and related functions */\n#undef HAVE_WPRINTF\n\n/* Define this if you have vswprintf() and related functions */\n#undef HAVE_VSWPRINTF\n\n/* Define this if you have _vsnwprintf */\n#undef HAVE__VSNWPRINTF\n\n/* vswscanf() */\n#undef HAVE_VSWSCANF\n\n/* Define if fseeko and ftello are available.  */\n#undef HAVE_FSEEKO\n\n/* Define this if you are using gtk and gdk contains support for X11R6 XIM */\n#undef HAVE_XIM\n\n/* Define this if you have X11/extensions/shape.h */\n#undef HAVE_XSHAPE\n\n/* Define this if you have type SPBCDATA */\n#undef HAVE_SPBCDATA\n\n/* Define if you have pango_font_family_is_monospace() (Pango >= 1.3.3) */\n#undef HAVE_PANGO_FONT_FAMILY_IS_MONOSPACE\n\n/* Define if you have Pango xft support */\n#undef HAVE_PANGO_XFT\n\n/* Define if you have the <sys/select.h> header file.  */\n#undef HAVE_SYS_SELECT_H\n\n/* Define if you have abi::__forced_unwind in your <cxxabi.h>. */\n#undef HAVE_ABI_FORCEDUNWIND\n\n/* Define if fdopen is available.  */\n#undef HAVE_FDOPEN\n\n/* Define if sysconf is available. */\n#undef HAVE_SYSCONF\n\n/* Define if getpwuid_r is available. */\n#undef HAVE_GETPWUID_R\n\n/* Define if getgrgid_r is available. */\n#undef HAVE_GETGRGID_R\n\n/* Define if setpriority() is available. */\n#undef HAVE_SETPRIORITY\n\n/* Define if xlocale.h header file exists. */\n#undef HAVE_XLOCALE_H\n\n/* Define if locale_t is available */\n#undef HAVE_LOCALE_T\n\n/* Define if you have inotify_xxx() functions. */\n#undef wxHAS_INOTIFY\n\n/* Define if you have kqueu_xxx() functions. */\n#undef wxHAS_KQUEUE\n\n/* -------------------------------------------------------------------------\n   Win32 adjustments section\n   ------------------------------------------------------------------------- */\n\n#ifdef __WIN32__\n\n/* When using an external jpeg library and the Windows headers already define\n * boolean, define to the type used by the jpeg library for boolean.  */\n#undef wxHACK_BOOLEAN\n\n/* Define if the header pbt.h is missing.  */\n#undef NEED_PBT_H\n\n#endif /* __WIN32__ */\n\n/* --------------------------------------------------------*\n *  This stuff is static, it doesn't get modified directly\n *  by configure.\n*/\n\n/*\n   define some constants identifying wxWindows version in more details than\n   just the version number\n */\n\n/* wxLogChain class available */\n#define wxHAS_LOG_CHAIN\n\n/* define this when wxDC::Blit() respects SetDeviceOrigin() in wxGTK */\n#undef wxHAS_WORKING_GTK_DC_BLIT\n\n#endif /* __WX_SETUP_H__ */\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/setup.h_vms": "/*****************************************************************************\n *                                                                           *\n * Template for the set.h file for VMS                                       *\n * Created from setup.h_in                                                   *\n * Author : J.Jansen (joukj@hrem.nano.tudelft.nl)                            *\n * Date : 28 January 2021                                                    *\n *                                                                           *\n *****************************************************************************/\n\n/* This define (__WX_SETUP_H__) is used both to insure setup.h is included\n * only once and to indicate that we are building using configure. */\n#ifndef __WX_SETUP_H__\n#define __WX_SETUP_H__\n\n#include <wx/vms_x_fix.h>\n\n/* never undefine inline or const keywords for C++ compilation */\n#ifndef __cplusplus\n\n/* Define to empty if the keyword does not work.  */\n#undef const\n\n/* Define as __inline if that's what the C compiler calls it.  */\n#undef inline\n\n#else\n\n#define __USE_STD_IOSTREAM 1\n#define _USE_STD_STAT 1\n\n#endif /* __cplusplus */\n\n/* the installation location prefix from configure */\n#undef wxINSTALL_PREFIX\n\n/* Define this to get extra features from GNU libc. */\n#undef _GNU_SOURCE\n\n/* Define to `int' if <sys/types.h> doesn't define.  */\n#undef gid_t\n\n/* Define to `int' if <sys/types.h> doesn't define.  */\n#undef mode_t\n\n/* Define to `long' if <sys/types.h> doesn't define.  */\n#undef off_t\n\n/* Define to `int' if <sys/types.h> doesn't define.  */\n#undef pid_t\n\n/* Define to `unsigned' if <sys/types.h> doesn't define.  */\n#undef size_t\n\n/* Define if ssize_t type is available.  */\n#define HAVE_SSIZE_T 1\n\n/* Define if you have the ANSI C header files.  */\n#define STDC_HEADERS 1\n\n/* Define to `int' if <sys/types.h> doesn't define.  */\n#undef uid_t\n\n/* Define if your processor stores words with the most significant\n   byte first (like Motorola and SPARC, unlike Intel and VAX).  */\n#undef WORDS_BIGENDIAN\n\n/* Define this if you want to use GPE features */\n#undef __WXGPE__\n\n/* Define this if your version of Motif is greater than 2.0 */\n#undef __WXMOTIF20__\n\n/* Define this if you are using Lesstif */\n#undef __WXLESSTIF__\n\n#ifdef __WXGTK__\n\n#ifndef VMS_GTK2\n#define GDK_WINDOWING_X11\n#endif\n\n/* Define this if your version of GTK+ is greater than 1.2.7 */\n#define __WXGTK127__ 1\n\n/* Define this if your version of GTK+ is greater than 2.0 */\n#ifdef VMS_GTK2\n\n/* Define this if your version of GTK+ is >= 3.0 */\n#if 0\n#define __WXGTK3__ 1\n#endif\n\n#define __WXGTK20__ 1\n\n/* Define this if your version of GTK+ is greater than 2.10 */\n#define __WXGTK210__ 1\n\n/* Define this if your version of GTK+ is greater than 2.18 */\n#undef __WXGTK218__\n\n/* Define this if your version of GTK+ is greater than 2.20 */\n#undef __WXGTK220__\n\n/* Define this if your version of GTK+ is >= 3.0 */\n#undef __WXGTK3__\n\n/* Define this if your version of GTK+ is >= 3.90.0 */\n#undef __WXGTK4__\n\n#include <types.h>\ntypedef pid_t GPid;\n\n#define G_GNUC_INTERNAL\n\n#endif\n#endif\n\n#if defined( VMS_GTK2 ) || defined( __WXX11__ ) \n#define wxUSE_CAIRO 1\n#else\n#define wxUSE_CAIRO 0\n#endif\n\n/*\n * Define to 1 for Unix[-like] system\n */\n#define wxUSE_UNIX 1\n\n#define __UNIX__\n\n#undef __AIX__\n#undef __BSD__\n#undef __DARWIN__\n#undef __EMX__\n#undef __FREEBSD__\n#undef __HPUX__\n#undef __LINUX__\n#undef __NETBSD__\n#undef __OPENBSD__\n#undef __OSF__\n#undef __QNX__\n#undef __SGI__\n#undef __SOLARIS__\n#undef __SUN__\n#undef __SUNOS__\n#undef __SVR4__\n#undef __SYSV__\n#undef __ULTRIX__\n#undef __UNIXWARE__\n#define __VMS__\n\n#undef __IA64__\n#define __ALPHA__\n\n/* NanoX (with wxX11) */\n#define wxUSE_NANOX 0\n\n/* PowerPC Darwin & Mac OS X */\n#undef __POWERPC__\n\n/* Hack to make IOGraphicsTypes.h not define Point conflicting with MacTypes */\n#undef __Point__\n\n/* MS-DOS with DJGPP */\n#undef __DOS__\n\n/* Stupid hack; __WINDOWS__ clashes with wx/defs.h */\n#ifndef __WINDOWS__\n#undef __WINDOWS__\n#endif\n\n#ifndef __WIN32__\n#undef __WIN32__\n#endif\n#ifndef __GNUWIN32__\n#undef __GNUWIN32__\n#endif\n#ifndef STRICT\n#undef STRICT\n#endif\n#ifndef WINVER\n#undef WINVER\n#endif\n\n/* --- start common options --- */\n\n#define wxUSE_COMPILER_TLS 1\n\n#ifndef wxUSE_GUI\n    #define wxUSE_GUI            1\n#endif\n\n#define WXWIN_COMPATIBILITY_2_8 0\n\n#define WXWIN_COMPATIBILITY_3_0 0\n\n#define wxEVENTS_COMPATIBILITY_2_8 0\n\n#define wxDIALOG_UNIT_COMPATIBILITY   1\n\n#define wxUSE_DEBUG_CONTEXT 1\n\n#define wxUSE_DEBUGREPORT 1\n\n#define wxUSE_MEMORY_TRACING 0\n\n#define wxUSE_GLOBAL_MEMORY_OPERATORS 0\n\n#define wxUSE_DEBUG_NEW_ALWAYS 1\n\n#define wxUSE_ON_FATAL_EXCEPTION 1\n\n#define wxUSE_STACKWALKER 0\n\n#define wxUSE_UNSAFE_WXSTRING_CONV 1\n\n#define wxUSE_REPRODUCIBLE_BUILD 1\n\n#ifndef wxUSE_UNICODE\n#if defined( __WXX11__ )\n    #define wxUSE_UNICODE 0\n#else\n    #define wxUSE_UNICODE 1\n#endif\n#endif\n\n\n#define wxUSE_EXCEPTIONS 1\n\n#define wxUSE_EXTENDED_RTTI 0\n\n#define wxUSE_LOG 1\n\n#define wxUSE_LOGWINDOW 1\n\n#define wxUSE_LOGGUI 1\n\n#define wxUSE_LOG_DIALOG 1\n\n#define wxUSE_CMDLINE_PARSER 1\n\n#define wxUSE_THREADS 1\n\n#define wxUSE_STREAMS       1\n\n#define wxUSE_PRINTF_POS_PARAMS      0\n\n#define wxUSE_STL 0\n\n#if defined(__DMC__) \\\n        || (defined(_MSC_VER) && _MSC_VER < 1200)\n    #define wxUSE_STD_DEFAULT  0\n#else\n    #define wxUSE_STD_DEFAULT  1\n#endif\n\n#define wxUSE_STD_CONTAINERS_COMPATIBLY wxUSE_STD_DEFAULT\n\n#define wxUSE_STD_CONTAINERS wxUSE_STD_DEFAULT\n\n#define wxUSE_STD_IOSTREAM  wxUSE_STD_DEFAULT\n\n#define wxUSE_STD_STRING  wxUSE_STD_DEFAULT\n\n#define wxUSE_STD_STRING_CONV_IN_WXSTRING wxUSE_STL\n\n#define wxUSE_LONGLONG      1\n\n#define wxUSE_BASE64        1\n\n#define wxUSE_CONSOLE_EVENTLOOP 1\n\n#define wxUSE_FILE          1\n#define wxUSE_FFILE         1\n\n#define wxUSE_FSVOLUME      1\n\n#define wxUSE_SECRETSTORE   0\n\n#define wxUSE_STDPATHS      1\n\n#define wxUSE_TEXTBUFFER    1\n\n#define wxUSE_TEXTFILE      1\n\n#define wxUSE_INTL          1\n#include <locale.h>\n\n#if defined (__WXMOTIF__)\n#define wxUSE_XLOCALE 0\n#else\n#define wxUSE_XLOCALE 1\n#endif\n\n#define wxUSE_DATETIME      1\n\n#define wxUSE_TIMER         1\n\n#define wxUSE_STOPWATCH     1\n\n#define wxUSE_FSWATCHER     0\n\n#define wxUSE_CONFIG        1\n\n#define wxUSE_CONFIG_NATIVE   0\n\n#define wxUSE_DIALUP_MANAGER   1\n\n#define wxUSE_DYNLIB_CLASS    1\n\n#define wxUSE_DYNAMIC_LOADER  0\n\n#define wxUSE_SOCKETS       1\n#include <socket.h>\n\n#define wxUSE_IPV6          0\n\n#define wxUSE_FILESYSTEM    1\n\n#define wxUSE_FS_ZIP        1\n\n#define wxUSE_FS_ARCHIVE    1\n\n#define wxUSE_FS_INET       1\n\n#define wxUSE_ARCHIVE_STREAMS     1\n\n#define wxUSE_ZIPSTREAM     1\n\n#define wxUSE_TARSTREAM     1\n\n#define wxUSE_ZLIB          1\n\n#define wxUSE_LIBLZMA       1\n\n#define wxUSE_APPLE_IEEE          0\n\n#define wxUSE_JOYSTICK            0\n\n#define wxUSE_FONTENUM 1\n\n#define wxUSE_FONTMAP 1\n\n#define wxUSE_MIMETYPE 1\n\n#define wxUSE_WEBREQUEST 1\n\n#ifdef __APPLE__\n#define wxUSE_WEBREQUEST_URLSESSION wxUSE_WEBREQUEST\n#else\n#define wxUSE_WEBREQUEST_URLSESSION 0\n#endif\n\n#define wxUSE_WEBREQUEST_CURL 1\n\n#define wxUSE_PROTOCOL 1\n\n#define wxUSE_PROTOCOL_FILE 1\n#define wxUSE_PROTOCOL_FTP 1\n#define wxUSE_PROTOCOL_HTTP 1\n\n#define wxUSE_URL 1\n\n#define wxUSE_URL_NATIVE 0\n\n#define wxUSE_VARIANT 1\n\n#define wxUSE_ANY 1\n\n#define wxUSE_REGEX       1\n\n#define wxUSE_SYSTEM_OPTIONS 1\n\n#define wxUSE_SOUND      1\n\n#define wxUSE_MEDIACTRL     1\n\n#define wxUSE_XRC       1\n\n#define wxUSE_XML       wxUSE_XRC\n\n#define wxUSE_AUI       1\n\n#define wxUSE_RIBBON  1\n\n#define wxUSE_PROPGRID  1\n\n#define wxUSE_WEBVIEW 0\n\n#ifdef __WXMSW__\n#define wxUSE_WEBVIEW_IE 0\n#else\n#define wxUSE_WEBVIEW_IE 0\n#endif\n\n#if (defined(__WXGTK__) && !defined(__WXGTK3__)) || defined(__WXOSX__)\n#define wxUSE_WEBVIEW_WEBKIT 0\n#else\n#define wxUSE_WEBVIEW_WEBKIT 0\n#endif\n\n#if defined(__WXGTK3__)\n#define wxUSE_WEBVIEW_WEBKIT2 0\n#else\n#define wxUSE_WEBVIEW_WEBKIT2 0\n#endif\n\n#if defined(_MSC_VER) || \\\n    (defined(__MINGW32__) && (__GNUC__ > 4 || __GNUC_MINOR__ >= 8))\n#define wxUSE_GRAPHICS_CONTEXT 0\n#else\n#define wxUSE_GRAPHICS_CONTEXT 1\n#endif\n\n#define wxUSE_CONTROLS     1\n\n#define wxUSE_MARKUP       1\n\n#define wxUSE_POPUPWIN 1\n\n#define wxUSE_PREFERENCES_EDITOR 1\n\n#define wxUSE_TIPWINDOW    1\n\n#define wxUSE_STC 1\n\n#ifdef VMS_GTK2\n#define wxUSE_ACTIVITYINDICATOR 1\n#else\n#define wxUSE_ACTIVITYINDICATOR 0\n#endif\n#define wxUSE_ANIMATIONCTRL 1\n#define wxUSE_BANNERWINDOW  1\n#define wxUSE_BUTTON       1\n#define wxUSE_BMPBUTTON    1\n#define wxUSE_CALENDARCTRL 1\n#define wxUSE_CHECKBOX     1\n#define wxUSE_CHECKLISTBOX 1\n#define wxUSE_CHOICE       1\n#define wxUSE_COLLPANE      1\n#define wxUSE_COLOURPICKERCTRL 1\n#define wxUSE_COMBOBOX     1\n#define wxUSE_COMMANDLINKBUTTON 1\n#define wxUSE_DATAVIEWCTRL   1\n#define wxUSE_DATEPICKCTRL 1\n#define wxUSE_DIRPICKERCTRL 1\n#define wxUSE_EDITABLELISTBOX 1\n#define wxUSE_FILECTRL      1\n#define wxUSE_FILEPICKERCTRL 1\n#define wxUSE_FONTPICKERCTRL 1\n#define wxUSE_GAUGE        1\n#define wxUSE_HEADERCTRL 1\n#define wxUSE_HYPERLINKCTRL 1\n#define wxUSE_LISTBOX      1\n#define wxUSE_LISTCTRL     1\n#define wxUSE_RADIOBOX     1\n#define wxUSE_RADIOBTN     1\n#define wxUSE_RICHMSGDLG    1\n#define wxUSE_SCROLLBAR    1\n#define wxUSE_SEARCHCTRL    1\n#define wxUSE_SLIDER       1\n#define wxUSE_SPINBTN      1\n#define wxUSE_SPINCTRL     1\n#define wxUSE_STATBOX      1\n#define wxUSE_STATLINE     1\n#define wxUSE_STATTEXT     1\n#define wxUSE_STATBMP      1\n#define wxUSE_TEXTCTRL     1\n#define wxUSE_TIMEPICKCTRL  1\n#if defined (__WXMOTIF__) || defined( __WXGTK__ )\n#define wxUSE_TOGGLEBTN    1\n#else\n#define wxUSE_TOGGLEBTN    0\n#endif\n#define wxUSE_TREECTRL     1\n#define wxUSE_TREELISTCTRL  1\n\n#define wxUSE_NATIVE_DATAVIEWCTRL 0\n\n#define wxUSE_STATUSBAR    1\n\n#define wxUSE_NATIVE_STATUSBAR        0\n\n#define wxUSE_TOOLBAR 1\n#define wxUSE_TOOLBAR_NATIVE 1\n\n#define wxUSE_NOTEBOOK 1\n\n#define wxUSE_LISTBOOK 1\n\n#define wxUSE_CHOICEBOOK 1\n\n#define wxUSE_TREEBOOK 1\n\n#define wxUSE_TOOLBOOK 1\n\n#define wxUSE_TASKBARICON 1\n\n#define wxUSE_GRID         1\n\n#define wxUSE_MINIFRAME 1\n\n#define wxUSE_COMBOCTRL 1\n\n#define wxUSE_ODCOMBOBOX 1\n\n#define wxUSE_BITMAPCOMBOBOX 1\n\n#define wxUSE_REARRANGECTRL 1\n\n#define wxUSE_ADDREMOVECTRL 1\n\n#define wxUSE_ACCEL 1\n\n#define wxUSE_ARTPROVIDER_STD 1\n\n#define wxUSE_ARTPROVIDER_TANGO 1\n\n#define wxUSE_HOTKEY 1\n\n#define wxUSE_CARET         1\n\n#define wxUSE_DISPLAY       0\n\n#define wxUSE_GEOMETRY            1\n\n#define wxUSE_IMAGLIST      1\n\n#define wxUSE_INFOBAR 1\n\n#define wxUSE_MENUS         1\n\n#define wxUSE_MENUBAR  1\n\n#define wxUSE_NOTIFICATION_MESSAGE 1\n\n#ifndef VMS_GTK2\n#define wxUSE_PRIVATE_FONTS 0\n#else\n/* wxUSE_PRIVATE_FONTS needs a newer version of PANGO than presently *\n * available for OpenVMS                                             */\n#define wxUSE_PRIVATE_FONTS 0\n#endif\n\n#if defined (__WXMOTIF__)\n#define wxUSE_RICHTOOLTIP 0\n#else\n#define wxUSE_RICHTOOLTIP 1\n#endif\n\n#define wxUSE_SASH          1\n\n#define wxUSE_SPLITTER      1\n\n#if defined (__WXMOTIF__) || defined( __WXX11__ )\n#define wxUSE_TOOLTIPS 0\n#else\n#define wxUSE_TOOLTIPS 1\n#endif\n\n#define wxUSE_VALIDATORS 1\n\n#ifdef __WXMSW__\n#define wxUSE_AUTOID_MANAGEMENT 0\n#else\n#define wxUSE_AUTOID_MANAGEMENT 0\n#endif\n\n#define wxUSE_COMMON_DIALOGS 1\n\n#define wxUSE_BUSYINFO      1\n\n#define wxUSE_CHOICEDLG     1\n\n#define wxUSE_COLOURDLG     1\n\n#define wxUSE_DIRDLG 1\n\n\n#define wxUSE_FILEDLG       1\n\n#define wxUSE_FINDREPLDLG       1\n\n#define wxUSE_FONTDLG       1\n\n#define wxUSE_MSGDLG        1\n\n#define wxUSE_PROGRESSDLG 1\n\n#define wxUSE_NATIVE_PROGRESSDLG 1\n\n#define wxUSE_STARTUP_TIPS 1\n\n#define wxUSE_TEXTDLG 1\n\n#define wxUSE_NUMBERDLG 1\n\n#define wxUSE_CREDENTIALDLG 1\n\n#define wxUSE_SPLASH 1\n\n#define wxUSE_WIZARDDLG 1\n\n#define wxUSE_ABOUTDLG 1\n\n#define wxUSE_FILE_HISTORY 1\n\n#define wxUSE_METAFILE              0\n#define wxUSE_ENH_METAFILE          0\n#define wxUSE_WIN_METAFILES_ALWAYS  0\n\n\n#define wxUSE_MDI 1\n\n#define wxUSE_DOC_VIEW_ARCHITECTURE 1\n\n#define wxUSE_MDI_ARCHITECTURE    1\n\n#define wxUSE_PRINTING_ARCHITECTURE  1\n\n#define wxUSE_HTML          1\n\n#define wxUSE_GLCANVAS       1\n\n#define wxUSE_GLCANVAS_EGL   0\n\n#define wxUSE_RICHTEXT       1\n\n#define wxUSE_CLIPBOARD     1\n\n#define wxUSE_DATAOBJ       1\n\n#ifdef __WXGTK__\n#define wxUSE_DRAG_AND_DROP 1\n#else\n#define wxUSE_DRAG_AND_DROP 0\n#endif\n\n#define wxUSE_ACCESSIBILITY 0\n\n\n#define wxUSE_SNGLINST_CHECKER  1\n\n#define wxUSE_DRAGIMAGE 1\n\n#define wxUSE_IPC         1\n\n#define wxUSE_HELP        1\n\n#define wxUSE_MS_HTML_HELP 0\n\n#define wxUSE_WXHTML_HELP 1\n\n#define wxUSE_CONSTRAINTS 1\n\n\n#define wxUSE_SPLINES     1\n\n\n#define wxUSE_MOUSEWHEEL        1\n\n#define wxUSE_UIACTIONSIMULATOR 1\n\n#define wxUSE_POSTSCRIPT  1\n\n#define wxUSE_AFM_FOR_POSTSCRIPT 1\n\n#define wxUSE_SVG 1\n\n#define wxUSE_IMAGE         1\n\n#define wxUSE_LIBPNG        1\n\n#define wxUSE_LIBJPEG       1\n\n#define wxUSE_LIBTIFF       1\n\n#define wxUSE_TGA           1\n\n#define wxUSE_GIF           1\n\n#define wxUSE_PNM           1\n\n#define wxUSE_PCX           1\n\n#define wxUSE_IFF           1\n\n#define wxUSE_XPM           1\n\n#define wxUSE_ICO_CUR       1\n\n#define wxUSE_PALETTE       1\n\n#if defined( __WXX11__ )\n#define wxUSE_ALL_THEMES    1\n\n#define wxUSE_THEME_GTK     1\n#define wxUSE_THEME_METAL   1\n#define wxUSE_THEME_MONO    1\n#define wxUSE_THEME_WIN32   1\n#else\n#define wxUSE_ALL_THEMES    0\n\n#define wxUSE_THEME_GTK     0\n#define wxUSE_THEME_METAL   0\n#define wxUSE_THEME_MONO    0\n#define wxUSE_THEME_WIN32   0\n#endif\n\n/* --- end common options --- */\n\n/*\n * Unix/VMS-specific options\n */\n#define wxUSE_SELECT_DISPATCHER 1\n#define wxUSE_EPOLL_DISPATCHER 0\n\n#define wxUSE_UNICODE_UTF8 0\n#define wxUSE_UTF8_LOCALE_ONLY 0\n\n/*\n   Use GStreamer for Unix.\n\n   Default is 0 as this requires a lot of dependencies which might not be\n   available.\n\n   Recommended setting: 1 (wxMediaCtrl won't work by default without it)\n */\n#define wxUSE_GSTREAMER 0\n\n#define wxUSE_GSTREAMER_PLAYER 0\n\n/*\n   Use XTest extension to implement wxUIActionSimulator?\n\n   Default is 1, it is set to 0 if the necessary headers/libraries are not\n   found by configure.\n\n   Recommended setting: 1, wxUIActionSimulator won't work in wxGTK3 without it.\n */\n#define wxUSE_XTEST 1\n\n/* --- start MSW options --- */\n\n#define wxUSE_GRAPHICS_GDIPLUS wxUSE_GRAPHICS_CONTEXT\n\n#if defined(_MSC_VER) && _MSC_VER >= 1600\n    #define wxUSE_GRAPHICS_DIRECT2D wxUSE_GRAPHICS_CONTEXT\n#else\n    #define wxUSE_GRAPHICS_DIRECT2D 0\n#endif\n\n#if defined(_MSC_VER) || defined(__MINGW64_VERSION_MAJOR)\n    #define wxUSE_WEBREQUEST_WINHTTP 0\n#else\n    #define wxUSE_WEBREQUEST_WINHTTP 0\n#endif\n\n#define wxUSE_OLE           0\n\n#define wxUSE_OLE_AUTOMATION 0\n\n#define wxUSE_ACTIVEX 0\n\n#if defined(_MSC_VER) && _MSC_VER >= 1700 && !defined(_USING_V110_SDK71_)\n    #define wxUSE_WINRT 0\n#else\n    #define wxUSE_WINRT 0\n#endif\n\n#define wxUSE_DC_CACHEING 1\n\n#define wxUSE_WXDIB 0\n\n#define wxUSE_POSTSCRIPT_ARCHITECTURE_IN_MSW 0\n\n#define wxUSE_REGKEY 0\n\n#define wxUSE_RICHEDIT  0\n\n#define wxUSE_RICHEDIT2 0\n\n#define wxUSE_OWNER_DRAWN 1\n\n#define wxUSE_TASKBARICON_BALLOONS 0\n\n#define wxUSE_TASKBARBUTTON 0\n\n#define wxUSE_UXTHEME           0\n\n#define wxUSE_INKEDIT  0\n\n#define wxUSE_INICONF 0\n\n#define wxUSE_WINSOCK2 0\n\n\n#define wxUSE_DATEPICKCTRL_GENERIC 0\n\n#define wxUSE_TIMEPICKCTRL_GENERIC 0\n\n#if defined(__VISUALC__) || defined(__MINGW64_TOOLCHAIN__)\n    #define wxUSE_DBGHELP 0\n#else\n    #define wxUSE_DBGHELP 0\n#endif\n\n#define wxUSE_CRASHREPORT 0\n\n/* --- end MSW options --- */\n\n/*\n * Define if your compiler has C99 va_copy\n */\n#undef HAVE_VA_COPY\n\n/*\n * Define if va_list type is an array\n */\n#undef VA_LIST_IS_ARRAY\n\n#if defined(__NAMESPACE_STD) && !defined(__NAMESPACE_STD_ONLY)\n/*\n * Define if your compiler has std::wstring\n */\n#define HAVE_STD_WSTRING 1\n/*\n * Define if your compiler has compliant std::string::compare\n */\n#define HAVE_STD_STRING_COMPARE 1\n#else\n/*\n * Define if your compiler has std::wstring\n */\n/* #unfine HAVE_STD_WSTRING */\n/*\n * Define if your compiler has compliant std::string::compare\n */\n#undef HAVE_STD_STRING_COMPARE\n#endif\n\n/*\n * Define if your compiler has <hash_map>\n */\n#undef HAVE_HASH_MAP\n/*\n * Define if your compiler has <ext/hash_map>\n */\n#undef HAVE_EXT_HASH_MAP\n/*\n * Define if your compiler has std::hash_map/hash_set\n */\n#undef HAVE_STD_HASH_MAP\n/*\n * Define if your compiler has __gnu_cxx::hash_map/hash_set\n */\n#undef HAVE_GNU_CXX_HASH_MAP\n\n/*\n * Define if your compiler has std::unordered_map\n */\n#undef HAVE_STD_UNORDERED_MAP\n\n/*\n * Define if your compiler has std::unordered_set\n */\n#undef HAVE_STD_UNORDERED_SET\n\n/*\n * Define if your compiler has std::tr1::unordered_map\n */\n#undef HAVE_TR1_UNORDERED_MAP\n\n/*\n * Define if your compiler has std::tr1::unordered_set\n */\n#undef HAVE_TR1_UNORDERED_SET\n\n/*\n * Define if your compiler has <tr1/type_traits>\n */\n#undef HAVE_TR1_TYPE_TRAITS\n\n/*\n * Define if your compiler has <type_traits>\n */\n#undef HAVE_TYPE_TRAITS\n\n/*\n * Define if the compiler supports simple visibility declarations.\n */\n#undef HAVE_VISIBILITY\n\n/*\n * Define if the compiler supports GCC's atomic memory access builtins\n */\n#undef HAVE_GCC_ATOMIC_BUILTINS\n\n/*\n * Define if compiler's visibility support in libstdc++ is broken\n */\n#undef HAVE_BROKEN_LIBSTDCXX_VISIBILITY\n\n/*\n * The built-in regex supports advanced REs in additional to POSIX's basic\n * and extended. Your system regex probably won't support this, and in this\n * case WX_NO_REGEX_ADVANCED should be defined.\n */\n#undef WX_NO_REGEX_ADVANCED\n/*\n * On GNU systems use re_search instead of regexec, since the latter does a\n * strlen on the search text affecting the performance of some operations.\n */\n#undef HAVE_RE_SEARCH\n/*\n * Use SDL for audio (Unix)\n */\n#define wxUSE_LIBSDL 0\n/*\n * Use GTK print for printing under GTK+ 2.10+\n */\n#ifdef VMS_GTK2\n#define wxUSE_GTKPRINT 1\n#else\n#define wxUSE_GTKPRINT 0\n#endif\n/*\n * Use GNOME VFS for MIME types\n */\n#define wxUSE_LIBGNOMEVFS 0\n\n#define wxUSE_DC_TRANSFORM_MATRIX 1\n\n/*\n * Use libnotify library.\n * Use libnotify 0.7+ API.\n */\n#ifdef VMS_GTK2\n#define wxUSE_LIBNOTIFY 1\n#define wxUSE_LIBNOTIFY_0_7 1\n#else\n#define wxUSE_LIBNOTIFY 0\n#define wxUSE_LIBNOTIFY_0_7 0\n#endif\n/*\n * Use libXpm\n */\n#define wxHAVE_LIB_XPM 1\n/*\n * Define if you have pthread_cleanup_push/pop()\n */\n#define wxHAVE_PTHREAD_CLEANUP 1\n\n/*\n * Define if compiler has __thread keyword.\n */\n#undef HAVE___THREAD_KEYWORD\n\n/*\n * Define if large (64 bit file offsets) files are supported.\n */\n#undef HAVE_LARGEFILE_SUPPORT\n\n/*\n * Use OpenGL\n */\n#define wxUSE_OPENGL 1\n\n/* for compatibility */\n/*\n * Use wxWindows help facility\n */\n#define wxUSE_HELP 1\n/*\n * Use built-in HTML-based help controller\n */\n#define wxUSE_WXHTML_HELP 1\n/*\n * Use MS HTML Help controller (win32)\n */\n#define wxUSE_MS_HTML_HELP 0\n/*\n * Use MS HTML Help via libmspack (Unix)\n */\n#define wxUSE_LIBMSPACK 1\n\n/*\n * Matthews garbage collection (used for MrEd?)\n */\n#define WXGARBAGE_COLLECTION_ON 1\n\n/*\n * wxWebKitCtrl\n */\n#define wxUSE_WEBKIT 1\n\n/*\n * The const keyword is being introduced more in wxWindows.\n * You can use this setting to maintain backward compatibility.\n * If 0: will use const wherever possible.\n * If 1: will use const only where necessary\n *       for precompiled headers to work.\n * If 2: will be totally backward compatible, but precompiled\n *       headers may not work and program size will be larger.\n */\n#define CONST_COMPATIBILITY 0\n\n/*\n * use the session manager to detect KDE/GNOME\n */\n#define wxUSE_DETECT_SM     0\n\n/* define with the name of timezone variable */\n#undef WX_TIMEZONE\n\n/* The type of 3rd argument to getsockname() - usually size_t or int */\n#define WX_SOCKLEN_T size_t\n\n/* The type of 5th argument to getsockopt() - usually size_t or int */\n#define SOCKOPTLEN_T size_t\n\n/* The type of statvfs(2) argument */\n#undef WX_STATFS_T\n\n/* The signal handler prototype */\n#define wxTYPE_SA_HANDLER int\n\n/* gettimeofday() usually takes 2 arguments, but some really old systems might\n * have only one, in which case define WX_GETTIMEOFDAY_NO_TZ */\n#undef WX_GETTIMEOFDAY_NO_TZ\n\n/* struct tm doesn't always have the tm_gmtoff field, define this if it does */\n#define WX_GMTOFF_IN_TM\n\n/* Define if you have poll(2) function */\n#define HAVE_POLL 1\n\n/* Define if you have pw_gecos field in struct passwd */\n#undef HAVE_PW_GECOS\n\n/* Define if you have __cxa_demangle() in <cxxabi.h> */\n#undef HAVE_CXA_DEMANGLE\n\n/* Define if you have dlopen() */\n#define HAVE_DLOPEN 1\n\n/* Define if you have gettimeofday() */\n#define HAVE_GETTIMEOFDAY\n\n/* Define if fsync() is available */\n#define HAVE_FSYNC 1\n\n/* Define if round() is available */\n/* #undef HAVE_ROUND */\n\n/* Define if you have ftime() */\n#define HAVE_FTIME\n\n/* Define if you have nanosleep() */\n#if __CRTL_VER >= 70320000\n#define HAVE_NANOSLEEP 1\n#else\n#undef HAVE_NANOSLEEP\n#endif\n\n/* Define if you have sched_yield */\n#define HAVE_SCHED_YIELD 1\n\n/* Define if you have pthread_mutexattr_t and functions to work with it */\n#define HAVE_PTHREAD_MUTEXATTR_T 1\n\n/* Define if you have pthread_mutexattr_settype() declaration */\n#define HAVE_PTHREAD_MUTEXATTR_SETTYPE_DECL 1\n\n/* Define if you have PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP */\n#undef HAVE_PTHREAD_RECURSIVE_MUTEX_INITIALIZER\n\n/* Define if you have pthread_cancel */\n#define HAVE_PTHREAD_CANCEL 1\n\n/* Define if you have pthread_mutex_timedlock */\n#undef HAVE_PTHREAD_MUTEX_TIMEDLOCK\n\n/* Define if you have pthread_attr_setstacksize */\n#define HAVE_PTHREAD_ATTR_SETSTACKSIZE 1\n\n/* Define if you have the putenv function.  */\n#define HAVE_PUTENV 1\n\n/* Define if you have the setenv function.  */\n#   if __CRTL_VER >= 70000000\n#define HAVE_SETENV 1\n#define HAVE_UNSETENV 1\n#else\n#undef HAVE_SETENV\n#endif\n\n#if __CRTL_VER >= 70312000\n/* Define if you have snprintf() */\n#define HAVE_SNPRINTF 1\n\n/* Define if you have snprintf() declaration in the header */\n#define HAVE_SNPRINTF_DECL 1\n#else\n/* Define if you have snprintf() */\n#undef HAVE_SNPRINTF\n\n/* Define if you have snprintf() declaration in the header */\n#undef HAVE_SNPRINTF_DECL\n#endif\n\n/* Define if you have a snprintf() which supports positional arguments\n   (defined in the unix98 standard) */\n#undef HAVE_UNIX98_PRINTF\n\n/* define if you have statfs function */\n#undef HAVE_STATFS\n\n/* define if you have statfs prototype */\n#undef HAVE_STATFS_DECL\n\n/* define if you have statvfs function */\n#undef HAVE_STATVFS\n\n/* Define if you have strtoull() and strtoll() */\n#define HAVE_STRTOULL 1\n\n/* Define if you have all functions to set thread priority */\n#define HAVE_THREAD_PRIORITY_FUNCTIONS 1\n\n#if __CRTL_VER >= 70312000\n/* Define if you have vsnprintf() */\n#define HAVE_VSNPRINTF 1\n\n/* Define if you have vsnprintf() declaration in the header */\n#define HAVE_VSNPRINTF_DECL 1\n#else\n/* Define if you have vsnprintf() */\n#undef HAVE_VSNPRINTF\n\n/* Define if you have vsnprintf() declaration in the header */\n#undef HAVE_VSNPRINTF_DECL\n#endif\n\n/* Define if you have a _broken_ vsnprintf() declaration in the header,\n * with 'char*' for the 3rd parameter instead of 'const char*' */\n#undef HAVE_BROKEN_VSNPRINTF_DECL\n\n/* Define if you have a _broken_ vsscanf() declaration in the header,\n * with 'char*' for the 1st parameter instead of 'const char*' */\n#undef HAVE_BROKEN_VSSCANF_DECL\n\n/* Define if you have vsscanf() */\n#define HAVE_VSSCANF 1\n\n/* Define if you have vsscanf() declaration in the header */\n#define HAVE_VSSCANF_DECL 1\n\n/* Define if you have usleep() */\n#define HAVE_USLEEP 1\n\n/* Define if you have wcscasecmp() function  */\n#undef HAVE_WCSCASECMP\n\n/* Define if you have wcsncasecmp() function  */\n#undef HAVE_WCSNCASECMP\n\n/* Define if you have wcslen function */\n#define HAVE_WCSLEN 1\n\n/* Define if you have wcsdup function  */\n#undef HAVE_WCSDUP\n\n/* Define if you have wcsftime() function  */\n#define HAVE_WCSFTIME 1\n\n/* Define if you have strnlen() function */\n#define HAVE_STRNLEN 1\n\n/* Define if you have wcsnlen() function */\n#undef HAVE_WCSNLEN\n\n/* Define if you have wcstoull() and wcstoll() */\n#undef HAVE_WCSTOULL\n\n/* The number of bytes in a wchar_t.  */\n#define SIZEOF_WCHAR_T 4\n\n/* The number of bytes in a int.  */\n#define SIZEOF_INT 4\n\n/* The number of bytes in a pointer.  */\n#define SIZEOF_VOID_P 4\n\n/* The number of bytes in a long.  */\n#define SIZEOF_LONG 4\n\n/* The number of bytes in a long long.  */\n#define SIZEOF_LONG_LONG 8\n\n/* The number of bytes in a short.  */\n#define SIZEOF_SHORT 2\n\n/* The number of bytes in a size_t.  */\n#define SIZEOF_SIZE_T 4\n\n/* Define if size_t on your machine is the same type as unsigned int. */\n#define wxSIZE_T_IS_UINT  1\n\n/* Define if size_t on your machine is the same type as unsigned long. */\n#undef wxSIZE_T_IS_ULONG\n\n/* Define if wchar_t is distinct type in your compiler. */\n#define wxWCHAR_T_IS_REAL_TYPE 1\n\n/* Define if you have the dladdr function.  */\n#undef HAVE_DLADDR\n\n/* Define if you have Posix fnctl() function. */\n#define HAVE_FCNTL 1\n\n/* Define if you have BSD flock() function. */\n#undef HAVE_FLOCK\n\n/* Define if you have getaddrinfo function. */\n#define HAVE_GETADDRINFO 1\n\n/* Define if you have a gethostbyname_r function taking 6 arguments. */\n#undef HAVE_FUNC_GETHOSTBYNAME_R_6\n\n/* Define if you have a gethostbyname_r function taking 5 arguments. */\n#undef HAVE_FUNC_GETHOSTBYNAME_R_5\n\n/* Define if you have a gethostbyname_r function taking 3 arguments. */\n#undef HAVE_FUNC_GETHOSTBYNAME_R_3\n\n/* Define if you only have a gethostbyname function */\n#define HAVE_GETHOSTBYNAME 1\n\n/* Define if you have the gethostname function.  */\n#define HAVE_GETHOSTNAME 1\n\n/* Define if you have a getservbyname_r function taking 6 arguments. */\n#undef HAVE_FUNC_GETSERVBYNAME_R_6\n\n/* Define if you have a getservbyname_r function taking 5 arguments. */\n#undef HAVE_FUNC_GETSERVBYNAME_R_5\n\n/* Define if you have a getservbyname_r function taking 4 arguments. */\n#undef HAVE_FUNC_GETSERVBYNAME_R_4\n\n/* Define if you only have a getservbyname function */\n#define HAVE_GETSERVBYNAME 1\n\n/* Define if you have the gmtime_r function.  */\n#if __CRTL_VER >= 70000000 && \\\n    (defined _POSIX_C_SOURCE || !defined _ANSI_C_SOURCE)\n#define HAVE_GMTIME_R 1\n#else\n#undef HAVE_GMTIME_R\n#endif\n\n/* Define if you have the inet_addr function.  */\n#define HAVE_INET_ADDR 1\n\n/* Define if you have the inet_aton function.  */\n#define HAVE_INET_ATON 1\n\n/* Define if you have the localtime_r function.  */\n#if __CRTL_VER >= 70000000 && \\\n    (defined _POSIX_C_SOURCE || !defined _ANSI_C_SOURCE)\n#define HAVE_LOCALTIME_R 1\n#else\n#undef HAVE_LOCALTIME_R\n#endif\n\n/* Define if you have the mktemp function.  */\n#define HAVE_MKTEMP 1\n\n/* Define if you have the mkstemp function.  */\n#define HAVE_MKSTEMP 1\n\n/* Define if you have strtok_r function. */\n#   if __CRTL_VER >= 70301000\n#define HAVE_STRTOK_R 1\n#else\n#undef HAVE_STRTOK_R\n#endif\n\n/* Define if you have thr_setconcurrency function */\n#undef HAVE_THR_SETCONCURRENCY\n\n/* Define if you have pthread_setconcurrency function */\n#define HAVE_PTHREAD_SET_CONCURRENCY 1\n\n/* Define if you have the uname function.  */\n#define HAVE_UNAME 1\n\n/* Define if you have the usleep function.  */\n#define HAVE_USLEEP 1\n\n/* Define if you have the <X11/XKBlib.h> header file.  */\n#if __CRTL_VER >= 80200000\n#define HAVE_X11_XKBLIB_H 1\n#else\n#undef HAVE_X11_XKBLIB_H\n#endif\n\n/* Define if you have the <sched.h> header file.  */\n#undef HAVE_SCHED_H\n\n/* Define if you have the <unistd.h> header file.  */\n#define HAVE_UNISTD_H 1\n\n/* Define if you have the <fcntl.h> header file.  */\n#define HAVE_FCNTL_H 1\n\n/* Define if you have the <wchar.h> header file.  */\n#define HAVE_WCHAR_H 1\n\n/* Define if you have the <wcstr.h> header file.  */\n#undef HAVE_WCSTR_H\n\n/* Define if you have the <wctype.h> header file.  */\n#if __CRTL_VER >= 70312000\n#define HAVE_WCTYPE_H 1\n#else\n#undef HAVE_WCTYPE_H\n#endif\n\n/* Define if you have <widec.h> (Solaris only) */\n#undef HAVE_WIDEC_H\n\n/* Define if you have the <iconv.h> header file and iconv() symbol.  */\n#define HAVE_ICONV_H 1\n\n/* Define as \"const\" if the declaration of iconv() needs const.  */\n#undef ICONV_CONST\n\n/* Define if you have the <langinfo.h> header file.  */\n#define HAVE_LANGINFO_H 1\n\n/* Define if you have the <esd.h> header file.  */\n/* #undef HAVE_ESD_H */\n\n/* Define if you have the <sys/soundcard.h> header file. */\n/* #undef HAVE_SYS_SOUNDCARD_H */\n\n/* Define if you have wcsrtombs() function */\n#define HAVE_WCSRTOMBS 1\n\n/* Define this if you have putws() */\n#undef HAVE_PUTWS\n\n/* Define this if you have fputws() */\n#define HAVE_FPUTWS 1\n\n/* Define this if you have wprintf() and related functions */\n#define HAVE_WPRINTF 1\n\n/* Define this if you have vswprintf() and related functions */\n#define HAVE_VSWPRINTF 1\n\n/* Define this if you have _vsnwprintf */\n#undef HAVE__VSNWPRINTF\n\n/* Define this if you are using gtk and gdk contains support for X11R6 XIM */\n#undef HAVE_XIM\n\n/* Define if fseeko and ftello are available.  */\n#define HAVE_FSEEKO 1\n\n/* Define this is you have X11/extensions/shape.h */\n#define HAVE_XSHAPE 1\n\n/* Define this if you have type SPBCDATA */\n#undef HAVE_SPBCDATA\n\n/* Define if you have pango_font_family_is_monospace() (Pango >= 1.3.3) */\n#undef HAVE_PANGO_FONT_FAMILY_IS_MONOSPACE\n\n/* Define if you have Pango xft support */\n#undef HAVE_PANGO_XFT\n\n/* Define if you have abi::__forced_unwind in your <cxxabi.h>. */\n#undef HAVE_ABI_FORCEDUNWIND\n\n/* Define if fdopen is available.  */\n#define HAVE_FDOPEN 1\n\n/* Define if sysconf is available. */\n#define HAVE_SYSCONF 1\n\n/* Define if getpwuid_r is available. */\n#undef HAVE_GETPWUID_R\n\n/* Define if getgrgid_r is available. */\n#undef HAVE_GETGRGID_R\n\n/* Define if setpriority() is available. */\n#undef HAVE_SETPRIORITY\n\n/* Define if xlocale.h header file exists. */\n#undef HAVE_XLOCALE_H\n\n/* Define if locale_t is available */\n#undef HAVE_LOCALE_T\n\n/* Define if you have inotify_xxx() functions. */\n#undef wxHAS_INOTIFY\n\n/* Define if you have kqueu_xxx() functions. */\n#undef wxHAS_KQUEUE\n\n/* ---------------------------------------------------------------------\n   Win32 adjustments section\n   ---------------------------------------------------------------------\n */\n\n#ifdef __WIN32__\n\n#define wxUSE_POSTSCRIPT_ARCHITECTURE_IN_MSW 1\n\n/* Define if the header pbt.h is missing.  */\n#undef NEED_PBT_H\n\n#endif /* __WIN32__ */\n\n/* --------------------------------------------------------*\n *  This stuff is static, it doesn't get modified directly\n *  by configure.\n */\n\n/*\n    define some constants identifying wxWindows version in more details t\n    just the version number\n*/\n\n/* wxLogChain class available */\n#define wxHAS_LOG_CHAIN 1\n\n/* define this when wxDC::Blit() respects SetDeviceOrigin() in wxGTK */\n#define wxHAS_WORKING_GTK_DC_BLIT 1\n\n#undef HAVE_SYS_SELECT_H\n\n#if defined( __WXGTK__ ) && !defined( VMS_GTK2 )\n#define wxHAS_RAW_BITMAP 1\n#endif\n\n#ifdef VMS_GTK2\n#define GSEAL(x) x\n#endif\n\n#define __VMS_BROKEN_TEMPLATES\n\n#include <stdlib.h>\n\n#include <limits.h>\n#define LLONG_MIN __INT64_MIN\n#define LLONG_MAX __INT64_MAX\n#define ULLONG_MAX __UINT64_MAX\n\n#endif /* __WX_SETUP_H__ */\n",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/configure.in": "dnl Process this file with autoconf to produce a configure script.\n\nAC_PREREQ(2.58)\n\ndnl ---------------------------------------------------------------------------\ndnl\ndnl Top-level configure.in for wxWidgets by Robert Roebling, Phil Blecker,\ndnl Vadim Zeitlin and Ron Lee\ndnl\ndnl This script is under the wxWindows licence.\ndnl ---------------------------------------------------------------------------\n\ndnl ---------------------------------------------------------------------------\ndnl initialization\ndnl ---------------------------------------------------------------------------\n\nAC_INIT([wxWidgets], [3.1.5], [wx-dev@googlegroups.com])\n\ndnl the file passed to AC_CONFIG_SRCDIR should be specific to our package\nAC_CONFIG_SRCDIR([wx-config.in])\n\ndnl sets build, host variables and the same with _alias\nAC_CANONICAL_BUILD\nAC_CANONICAL_HOST\n\ndnl notice that if --host was given but --build was not, cross_compiling is\ndnl only set to \"maybe\" and not \"yes\" and will be either set to \"yes\" later or\ndnl configure will exit with error in AC_PROG_CC so don't test for = \"yes\" here\nif test \"$cross_compiling\" != \"no\"; then\n    HOST_PREFIX=\"${host_alias}-\"\n    HOST_SUFFIX=\"-$host_alias\"\nelse\n    HOST_PREFIX=\n    HOST_SUFFIX=\nfi\n\ndnl When making releases do:\ndnl\ndnl wx_release_number += 1\n\nwx_major_version_number=3\nwx_minor_version_number=1\nwx_release_number=5\nwx_subrelease_number=0\n\nWX_RELEASE=$wx_major_version_number.$wx_minor_version_number\nWX_VERSION=$WX_RELEASE.$wx_release_number\nWX_SUBVERSION=$WX_VERSION.$wx_subrelease_number\n\nWX_MSW_VERSION=$wx_major_version_number$wx_minor_version_number$wx_release_number\n\n\ndnl Autoconf-2.60 changed the meaning of top_builddir variable, so we have\ndnl to use our own replacement that will work with both 2.5x and 2.60+:\nwx_top_builddir=\"`pwd -W 2> /dev/null || pwd`\"\nAC_SUBST(wx_top_builddir)\n\n\ndnl Save the values of various standard flags that we modify below in order to\ndnl restore them at the very end. This is ugly, but changing the existing code\ndnl is non-trivial as sometimes we really need to set them, as we want them to\ndnl apply to the tests run by configure, and it gets the job done in the sense\ndnl that the generated makefile will only contain user-specified flags values,\ndnl just as it should.\nUSER_CPPFLAGS=$CPPFLAGS\nUSER_CFLAGS=$CFLAGS\nUSER_CXXFLAGS=$CXXFLAGS\nUSER_LDFLAGS=$LDFLAGS\n\ndnl ------------------------------------------------------------------------\ndnl Check platform (host system)\ndnl ------------------------------------------------------------------------\n\ndnl OS (assume Unix)\nUSE_UNIX=1\nUSE_WIN32=0\nUSE_DOS=0\nUSE_BEOS=0\nUSE_MAC=0\n\ndnl Unix kind\nUSE_AIX=\nUSE_BSD=                            dnl any BSD\nUSE_DARWIN=                         dnl a.k.a. macOS\nUSE_FREEBSD=\nUSE_GNU=                            dnl GNU/Hurd\nUSE_HPUX=\nUSE_LINUX=\nUSE_NETBSD=\nUSE_OPENBSD=\nUSE_OSF=                            dnl OSF/1 (obsolete?)\nUSE_SGI=\nUSE_SOLARIS=                        dnl Solaris (\"SunOS\" >= 5)\nUSE_SUN=                            dnl SunOS or Solaris\nUSE_SUNOS=                          dnl old/real SunOS (obsolete)\nUSE_SVR4=                           dnl SysV R4\nUSE_SYSV=                           dnl any System V\nUSE_VMS=\nUSE_ULTRIX=\nUSE_UNIXWARE=\nUSE_HAIKU=\n\ndnl hardware platform\nUSE_ALPHA=\n\ndnl on some platforms xxx_r() functions are declared inside \"#ifdef\ndnl _REENTRANT\" and it's easier to just define this symbol for these platforms\ndnl than checking it during run-time\nNEEDS_D_REENTRANT_FOR_R_FUNCS=0\n\ndnl the list of all available toolkits\ndnl\ndnl update NUM_TOOLKITS calculation below when adding a new toolkit here!\nALL_TOOLKITS=\"GTK OSX_COCOA OSX_IPHONE MOTIF MSW X11 DFB QT\"\n\ndnl NB: these wxUSE_XXX constants have value of 0 or 1 unlike all the other ones\ndnl     which are either yes or no\nDEFAULT_wxUSE_GTK=0\nDEFAULT_wxUSE_OSX_COCOA=0\nDEFAULT_wxUSE_OSX_IPHONE=0\nDEFAULT_wxUSE_MOTIF=0\nDEFAULT_wxUSE_MSW=0\nDEFAULT_wxUSE_X11=0\nDEFAULT_wxUSE_DFB=0\nDEFAULT_wxUSE_QT=0\n\ndnl these are the values which are really default for the given platform:\ndnl they're used if no --with-<toolkit> options were given to detect the\ndnl toolkit to use by default for the target platform\nDEFAULT_DEFAULT_wxUSE_GTK=0\nDEFAULT_DEFAULT_wxUSE_OSX_COCOA=0\nDEFAULT_DEFAULT_wxUSE_OSX_IPHONE=0\nDEFAULT_DEFAULT_wxUSE_MOTIF=0\nDEFAULT_DEFAULT_wxUSE_MSW=0\nDEFAULT_DEFAULT_wxUSE_X11=0\nDEFAULT_DEFAULT_wxUSE_DFB=0\nDEFAULT_DEFAULT_wxUSE_QT=0\n\nPROGRAM_EXT=\nSAMPLES_CXXFLAGS=\nSAMPLES_RPATH_FLAG=\nDYLIB_RPATH_INSTALL=\nDYLIB_RPATH_POSTLINK=\n\nDEFAULT_STD_FLAG=yes\n\ndnl to support a new system, you need to add its canonical name (as determined\ndnl by config.sub or specified by the configure command line) to this \"case\"\ndnl and also define the shared library flags below - search for\ndnl SHARED_LIB_SETUP to find the exact place\ncase \"${host}\" in\n  *-hp-hpux* )\n    USE_HPUX=1\n    DEFAULT_DEFAULT_wxUSE_GTK=1\n    NEEDS_D_REENTRANT_FOR_R_FUNCS=1\n    AC_DEFINE(__HPUX__)\n\n    dnl many standard declarations in HP-UX headers are only included if either\n    dnl _HPUX_SOURCE is defined, see stdsyms(5)\n    CPPFLAGS=\"-D_HPUX_SOURCE $CPPFLAGS\"\n  ;;\n  *-*-linux* )\n    USE_LINUX=1\n    AC_DEFINE(__LINUX__)\n    TMP=`uname -m`\n    if test \"x$TMP\" = \"xalpha\"; then\n      USE_ALPHA=1\n      AC_DEFINE(__ALPHA__)\n    fi\n    DEFAULT_DEFAULT_wxUSE_GTK=1\n  ;;\n  *-*-gnu* | *-*-k*bsd*-gnu )\n    USE_GNU=1\n    TMP=`uname -m`\n    if test \"x$TMP\" = \"xalpha\"; then\n      USE_ALPHA=1\n      AC_DEFINE(__ALPHA__)\n    fi\n    DEFAULT_DEFAULT_wxUSE_GTK=1\n  ;;\n  *-*-irix5* | *-*-irix6* )\n    USE_SGI=1\n    USE_SVR4=1\n    AC_DEFINE(__SGI__)\n    AC_DEFINE(__SVR4__)\n    DEFAULT_DEFAULT_wxUSE_GTK=1\n  ;;\n  *-*-qnx*)\n    USE_QNX=1\n    AC_DEFINE(__QNX__)\n    DEFAULT_DEFAULT_wxUSE_X11=1\n  ;;\n  *-*-solaris2* )\n    USE_SUN=1\n    USE_SOLARIS=1\n    USE_SVR4=1\n    AC_DEFINE(__SUN__)\n    AC_DEFINE(__SOLARIS__)\n    AC_DEFINE(__SVR4__)\n    DEFAULT_DEFAULT_wxUSE_GTK=1\n    NEEDS_D_REENTRANT_FOR_R_FUNCS=1\n  ;;\n  *-*-sunos4* )\n    USE_SUN=1\n    USE_SUNOS=1\n    USE_BSD=1\n    AC_DEFINE(__SUN__)\n    AC_DEFINE(__SUNOS__)\n    AC_DEFINE(__BSD__)\n    DEFAULT_DEFAULT_wxUSE_GTK=1\n  ;;\n  *-*-freebsd*)\n    USE_BSD=1\n    USE_FREEBSD=1\n    AC_DEFINE(__FREEBSD__)\n    AC_DEFINE(__BSD__)\n    DEFAULT_DEFAULT_wxUSE_GTK=1\n  ;;\n  *-*-openbsd*|*-*-mirbsd*)\n    USE_BSD=1\n    USE_OPENBSD=1\n    AC_DEFINE(__OPENBSD__)\n    AC_DEFINE(__BSD__)\n    DEFAULT_DEFAULT_wxUSE_GTK=1\n  ;;\n  *-*-netbsd*)\n    USE_BSD=1\n    USE_NETBSD=1\n    AC_DEFINE(__NETBSD__)\n    AC_DEFINE(__BSD__)\n    DEFAULT_DEFAULT_wxUSE_GTK=1\n    NEEDS_D_REENTRANT_FOR_R_FUNCS=1\n\n    dnl some standard declarations in NetBSD headers are only included if\n    dnl _NETBSD_SOURCE and _LIBC are defined, e.g. getservbyname_r in netdb.h\n    CPPFLAGS=\"-D_NETBSD_SOURCE -D_LIBC $CPPFLAGS\"\n  ;;\n  *-*-osf* )\n    USE_ALPHA=1\n    USE_OSF=1\n    AC_DEFINE(__ALPHA__)\n    AC_DEFINE(__OSF__)\n    DEFAULT_DEFAULT_wxUSE_GTK=1\n    NEEDS_D_REENTRANT_FOR_R_FUNCS=1\n  ;;\n  *-*-dgux5* )\n    USE_ALPHA=1\n    USE_SVR4=1\n    AC_DEFINE(__ALPHA__)\n    AC_DEFINE(__SVR4__)\n    DEFAULT_DEFAULT_wxUSE_GTK=1\n  ;;\n  *-*-sysv5* )\n    USE_SYSV=1\n    USE_SVR4=1\n    AC_DEFINE(__SYSV__)\n    AC_DEFINE(__SVR4__)\n    DEFAULT_DEFAULT_wxUSE_GTK=1\n  ;;\n  *-*-aix* )\n    USE_AIX=1\n    USE_SYSV=1\n    USE_SVR4=1\n    AC_DEFINE(__AIX__)\n    AC_DEFINE(__SYSV__)\n    AC_DEFINE(__SVR4__)\n    DEFAULT_DEFAULT_wxUSE_GTK=1\n  ;;\n\n  *-*-*UnixWare*)\n    USE_SYSV=1\n    USE_SVR4=1\n    USE_UNIXWARE=1\n    AC_DEFINE(__UNIXWARE__)\n  ;;\n\n  *-*-cygwin* | *-*-mingw32* | *-*-mingw64* )\n    dnl MBN: some of the defines have been moved after toolkit detection\n    dnl      because for wxMotif/wxGTK/wxX11 to build on Cygwin\n    dnl      USE_UNIX  must be set and not USE_WIN32\n    PROGRAM_EXT=\".exe\"\n    DEFAULT_DEFAULT_wxUSE_MSW=1\n  ;;\n\n  *-*-darwin* )\n    dnl Some platform using Darwin, i.e. one of the Apple OS: we target macOS\n    dnl by default on them, use --with-osx_iphone explicitly for iOS.\n    USE_BSD=1\n    USE_DARWIN=1\n    AC_DEFINE(__BSD__)\n    AC_DEFINE(__DARWIN__)\n    DEFAULT_DEFAULT_wxUSE_OSX_COCOA=1\n  ;;\n\n  *-*-beos* )\n    dnl leave USE_UNIX on - BeOS is sufficiently Unix-like for this\n    USE_BEOS=1\n    AC_DEFINE(__BEOS__)\n  ;;\n\n  *-*-haiku* )\n    USE_HAIKU=1\n    AC_DEFINE(__HAIKU__)\n    DEFAULT_DEFAULT_wxUSE_QT=1\n  ;;\n\n  *)\n    AC_MSG_WARN([*** System type ${host} is unknown, assuming generic Unix and continuing nevertheless.])\n    AC_MSG_WARN([*** Please report the build results to wx-dev@googlegroups.com.])\n\n    DEFAULT_DEFAULT_wxUSE_X11=1\n    DEFAULT_wxUSE_SHARED=no\nesac\n\ndnl ---------------------------------------------------------------------------\ndnl command line options for configure\ndnl ---------------------------------------------------------------------------\n\ndnl the default values for all options - we collect them all here to simplify\ndnl modification of the default values (for example, if the defaults for some\ndnl platform should be changed, it can be done here too)\ndnl\ndnl NB: see also DEFAULT_wxUSE<toolkit> variables defined above\n\ndnl it's only necessary to list the options which should be disabled by\ndnl default, all the rest have default value of \"yes\" (or, rather, of\ndnl wxUSE_ALL_FEATURES which is the only which has to be set to \"yes\" by\ndnl default)\nDEFAULT_wxUSE_ALL_FEATURES=yes\n\nDEFAULT_wxUSE_STD_CONTAINERS=no\nDEFAULT_wxUSE_STD_CONTAINERS_COMPATIBLY=$DEFAULT_STD_FLAG\nDEFAULT_wxUSE_STD_IOSTREAM=$DEFAULT_STD_FLAG\nDEFAULT_wxUSE_STD_STRING=$DEFAULT_STD_FLAG\n\ndnl libraries disabled by default or requiring some special handling\nDEFAULT_wxUSE_DMALLOC=no\nDEFAULT_wxUSE_LIBCURL=auto\nDEFAULT_wxUSE_LIBGNOMEVFS=no\nDEFAULT_wxUSE_LIBMSPACK=no\nDEFAULT_wxUSE_LIBSDL=no\nDEFAULT_wxUSE_CAIRO=no\n\ndnl features disabled by default\nDEFAULT_wxUSE_ACCESSIBILITY=no\nDEFAULT_wxUSE_IPV6=no\nDEFAULT_wxUSE_UNICODE_UTF8=no\nDEFAULT_wxUSE_UNICODE_UTF8_LOCALE=no\n\ndnl automatic features\nDEFAULT_wxUSE_ARTPROVIDER_TANGO=auto\nDEFAULT_wxUSE_COMPILER_TLS=auto\nDEFAULT_wxUSE_HOTKEY=auto\nDEFAULT_wxUSE_MEDIACTRL=auto\nDEFAULT_wxUSE_METAFILE=auto\nDEFAULT_wxUSE_OPENGL=auto\n\ndnl Mac/Cocoa users need to enable building universal binaries explicitly\nDEFAULT_wxUSE_UNIVERSAL_BINARY=no\nDEFAULT_wxUSE_MAC_ARCH=no\n\nDEFAULT_wxUSE_OFFICIAL_BUILD=no\n\ndnl Always default to no. Only special cases require this.\nDEFAULT_wxUSE_OBJC_UNIQUIFYING=no\n\ndnl ===========================\ndnl deal with configure options\ndnl ===========================\n\ndnl we use several macros here:\ndnl     - AC_ARG_WITH/AC_ARG_ENABLE are the standard autoconf macros, see\ndnl       autoconf manual for details about them\ndnl     - WX_ARG_WITH/WX_ARG_ENABLE are their wx counterparts which perform\ndnl       the caching of the command line options and also use DEFAULT_foo\ndnl       variable as the default value for \"foo\" if neither --enable-foo nor\ndnl       --disable-foo is specified\ndnl     - WX_ARG_SYS_WITH is a special version of WX_ARG_WITH which allows\ndnl       to choose not only whether an external library is used but also if we\ndnl       use the copy of it included with wxWidgets or an already installed\ndnl       system version\ndnl     - WX_ARG_WITHOUT/WX_ARG_DISABLE mirror WX_ARG_WITH/WX_ARG_ENABLE but\ndnl       should be used for the options which are enabled by default\ndnl     - WX_ARG_FEATURE is a version of WX_ARG_ENABLE which should be used for\ndnl       optional features, i.e. options which should be disabled if\ndnl       --disable-all-features is specified (WX_ARG_WITH/WX_ARG_SYS_WITH are\ndnl       also affected by this)\n\ndnl ---------------------------------------------------------------------------\ndnl global build options\ndnl ---------------------------------------------------------------------------\n\nWX_ARG_DISABLE(gui,        [  --disable-gui           don't build GUI parts of the library], wxUSE_GUI)\nWX_ARG_ENABLE(monolithic,  [  --enable-monolithic     build wxWidgets as single library], wxUSE_MONOLITHIC)\nWX_ARG_ENABLE(plugins,     [  --enable-plugins        build parts of wxWidgets as loadable components], wxUSE_PLUGINS)\nWX_ARG_WITHOUT(subdirs,    [  --without-subdirs       don't generate makefiles for samples/demos/...], wxWITH_SUBDIRS)\nAC_ARG_WITH(flavour,       [  --with-flavour=NAME     specify a name to identify this build], [WX_FLAVOUR=\"$withval\"])\nWX_ARG_ENABLE(official_build,  [  --enable-official_build official build of wxWidgets (win32 DLL only)], wxUSE_OFFICIAL_BUILD)\nAC_ARG_ENABLE(vendor,  [  --enable-vendor=VENDOR  vendor name (win32 DLL only)], [VENDOR=\"$enableval\"])\nif test \"x$VENDOR\" = \"x\"; then\n    VENDOR=\"custom\"\nfi\n\nWX_ARG_DISABLE(all-features,[  --disable-all-features  disable all optional features to build minimal library], wxUSE_ALL_FEATURES)\nWX_ARG_DISABLE(sys-libs,    [  --disable-sys-libs      disable use of system libraries for which built-in versions are available], wxUSE_SYS_LIBS)\nWX_ARG_DISABLE(tests,       [  --disable-tests         disable building tests], wxUSE_TESTS_SUBDIR)\n\nif test \"$wxUSE_ALL_FEATURES\" = \"no\"; then\n    dnl this is a bit ugly but currently we have no choice but to manually\n    dnl reset all the options with default value of auto if all features are to\n    dnl be disabled because we can't have an option with default value of\n    dnl \"auto-or-no-if-wxUSE_ALL_FEATURES-is-disabled\"\n    DEFAULT_wxUSE_ARTPROVIDER_TANGO=no\n    DEFAULT_wxUSE_MEDIACTRL=no\nfi\n\nAC_ARG_WITH(dpi, [  --with-dpi=none|system|per-monitor   set dpi-awareness (Win32 only), default is per-monitor], [wxWITH_DPI_MANIFEST=\"$withval\"])\n\ndnl ---------------------------------------------------------------------------\ndnl port selection\ndnl ---------------------------------------------------------------------------\n\nif test \"$wxUSE_GUI\" = \"yes\"; then\n\nWX_ARG_ENABLE(universal,   [  --enable-universal      use wxWidgets GUI controls instead of native ones], wxUSE_UNIVERSAL)\nif test \"$wxUSE_UNIVERSAL\" = \"yes\"; then\n    AC_ARG_WITH(themes,    [  --with-themes=all|list  use only the specified comma-separated list of wxUniversal themes], [wxUNIV_THEMES=\"$withval\"])\nfi\n\ndnl we use AC_ARG_WITH and not WX_ARG_WITH for the toolkit options as they\ndnl shouldn't default to wxUSE_ALL_FEATURES\nAC_ARG_WITH(gtk,          [[  --with-gtk[=VERSION]    use GTK+, VERSION can be 3 (default), 2, 1 or \"any\"]], [wxUSE_GTK=\"$withval\" CACHE_GTK=1 TOOLKIT_GIVEN=1])\nWX_ARG_ONLY_WITH(motif,         [  --with-motif            use Motif/Lesstif], [wxUSE_MOTIF=\"$withval\" CACHE_MOTIF=1 TOOLKIT_GIVEN=1])\nWX_ARG_ONLY_WITH(osx_cocoa,     [  --with-osx_cocoa        use macOS (Cocoa)], [wxUSE_OSX_COCOA=\"$withval\" CACHE_OSX_COCOA=1 TOOLKIT_GIVEN=1])\nWX_ARG_ONLY_WITH(osx_iphone,    [  --with-osx_iphone       use iOS], [wxUSE_OSX_IPHONE=\"$withval\" CACHE_OSX_IPHONE=1 TOOLKIT_GIVEN=1])\nWX_ARG_ONLY_WITH(osx,           [  --with-osx              use macOS (default port, Cocoa)], [wxUSE_OSX_COCOA=\"$withval\" CACHE_OSX_COCOA=1 TOOLKIT_GIVEN=1])\nWX_ARG_ONLY_WITH(cocoa,         [  --with-cocoa            same as --with-osx_cocoa], [wxUSE_OSX_COCOA=\"$withval\" CACHE_OSX_COCOA=1 TOOLKIT_GIVEN=1])\nWX_ARG_ONLY_WITH(iphone,        [  --with-iphone           same as --with-osx_iphone], [wxUSE_OSX_IPHONE=\"$withval\" CACHE_OSX_IPHONE=1 TOOLKIT_GIVEN=1])\nWX_ARG_ONLY_WITH(mac,           [  --with-mac              same as --with-osx], [wxUSE_OSX_COCOA=\"$withval\" CACHE_OSX_COCOA=1 TOOLKIT_GIVEN=1])\nWX_ARG_ONLY_WITH(wine,          [  --with-wine             use Wine], [wxUSE_WINE=\"$withval\" CACHE_WINE=1])\nWX_ARG_ONLY_WITH(msw,           [  --with-msw              use MS-Windows], [wxUSE_MSW=\"$withval\" CACHE_MSW=1 TOOLKIT_GIVEN=1])\nWX_ARG_ONLY_WITH(directfb,      [  --with-directfb         use DirectFB], [wxUSE_DFB=\"$withval\" wxUSE_UNIVERSAL=\"yes\" CACHE_DFB=1 TOOLKIT_GIVEN=1])\nWX_ARG_ONLY_WITH(x11,           [  --with-x11              use X11], [wxUSE_X11=\"$withval\" wxUSE_UNIVERSAL=\"yes\" CACHE_X11=1 TOOLKIT_GIVEN=1])\nWX_ARG_ONLY_WITH(qt,            [  --with-qt               use Qt], [wxUSE_QT=\"$withval\" CACHE_QT=1 TOOLKIT_GIVEN=1])\nWX_ARG_ENABLE(nanox,       [  --enable-nanox          use NanoX], wxUSE_NANOX)\nWX_ARG_ENABLE(gpe,         [  --enable-gpe            use GNOME PDA Environment features if possible], wxUSE_GPE)\n\ndnl check that no more than one toolkit is given and that if none are given that\ndnl we have a default one\n\nAC_MSG_CHECKING(for toolkit)\n\n\n\n# In Wine, we need to default to MSW, not GTK or MOTIF\nif test \"$wxUSE_WINE\" = \"yes\"; then\n    DEFAULT_DEFAULT_wxUSE_GTK=0\n    DEFAULT_DEFAULT_wxUSE_MOTIF=0\n    DEFAULT_DEFAULT_wxUSE_MSW=1\n    wxUSE_SHARED=no\n    CC=${CC:-winegcc}\n    CXX=${CXX:-wineg++}\nfi\n\n\nif test \"$wxUSE_GUI\" = \"yes\"; then\n\n    if test \"$USE_BEOS\" = 1; then\n        AC_MSG_ERROR([BeOS GUI is not supported yet, use --disable-gui])\n    fi\n\n    if test \"$TOOLKIT_GIVEN\" = 1; then\n      dnl convert \"yes\", \"any\" or a number to 1 and \"no\" to 0\n      for toolkit in $ALL_TOOLKITS; do\n        var=wxUSE_$toolkit\n        eval \"value=\\$${var}\"\n        if test \"x$value\" = \"xno\"; then\n          eval \"$var=0\"\n        elif test \"x$value\" != \"x\"; then\n          eval \"$var=1\"\n        fi\n\n        if test \"x$value\" != \"x\" -a \"x$value\" != \"xyes\" -a \"x$value\" != \"xno\"; then\n          eval \"wx${toolkit}_VERSION=$value\"\n        fi\n      done\n    else\n      dnl try to guess the most appropriate toolkit for this platform\n      for toolkit in $ALL_TOOLKITS; do\n        var=DEFAULT_DEFAULT_wxUSE_$toolkit\n        eval \"wxUSE_$toolkit=\\$${var}\"\n      done\n    fi\n\n    dnl we suppose that expr is available (maybe there is a better way to do\n    dnl this? what about using ALL_TOOLKITS? TODO)\n    NUM_TOOLKITS=`expr ${wxUSE_GTK:-0} \\\n                  + ${wxUSE_OSX_COCOA:-0} + ${wxUSE_OSX_IPHONE:-0} + ${wxUSE_DFB:-0} \\\n                  + ${wxUSE_MOTIF:-0} + ${wxUSE_MSW:-0} \\\n                  + ${wxUSE_X11:-0} + ${wxUSE_QT:-0}`\n\n\n    case \"$NUM_TOOLKITS\" in\n      1)\n      ;;\n      0)\n        AC_MSG_ERROR(Please specify a toolkit -- cannot determine the default for ${host})\n      ;;\n      *)\n        AC_MSG_ERROR(Please specify at most one toolkit)\n    esac\n\n    for toolkit in $ALL_TOOLKITS; do\n        var=wxUSE_$toolkit\n        eval \"value=\\$${var}\"\n        if test \"$value\" = 1; then\n          toolkit_echo=`echo $toolkit | tr '[[A-Z]]' '[[a-z]]'`\n          AC_MSG_RESULT($toolkit_echo)\n        fi\n    done\nelse\n    if test \"x$host_alias\" != \"x\"; then\n        AC_MSG_RESULT(base ($host_alias hosted) only)\n    else\n        AC_MSG_RESULT(base only)\n    fi\nfi\n\nwxUSE_MAC=0\nif test \"$wxUSE_OSX_COCOA\" = 1 \\\n       -o \"$wxUSE_OSX_IPHONE\" = 1; then\n    wxUSE_MAC=1\nfi\n\ndnl ---------------------------------------------------------------------------\ndnl external libraries\ndnl ---------------------------------------------------------------------------\n\nWX_ARG_SYS_WITH(libpng,    [  --with-libpng           use libpng (PNG image format)], wxUSE_LIBPNG)\nWX_ARG_SYS_WITH(libjpeg,   [  --with-libjpeg          use libjpeg (JPEG file format)], wxUSE_LIBJPEG)\nWX_ARG_SYS_WITH(libtiff,   [  --with-libtiff          use libtiff (TIFF file format)], wxUSE_LIBTIFF)\n\ndnl We don't provide built-in version of this library, so if the use of system\ndnl libraries is explicitly disabled, we can't use it at all.\nif test \"$wxUSE_LIBTIFF\" = \"builtin\" ; then\n    wxUSE_LIBJBIG=no\nelse\n    WX_ARG_WITHOUT(libjbig,    [  --without-libjbig       don't use libjbig in libtiff even if available], wxUSE_LIBJBIG)\nfi\n\nWX_ARG_SYS_WITH(libxpm,    [  --with-libxpm           use libxpm (XPM file format)], wxUSE_LIBXPM)\nWX_ARG_WITH(libiconv,      [  --with-libiconv         use libiconv (character conversion)], wxUSE_LIBICONV)\nWX_ARG_WITH(libmspack,     [  --with-libmspack        use libmspack (CHM help files loading)], wxUSE_LIBMSPACK)\nWX_ARG_WITHOUT(gtkprint,   [  --without-gtkprint      don't use GTK printing support], wxUSE_GTKPRINT)\nWX_ARG_WITH(gnomevfs,      [  --with-gnomevfs         use GNOME VFS for associating MIME types], wxUSE_LIBGNOMEVFS)\nWX_ARG_WITH(libnotify,     [  --with-libnotify        use libnotify for notifications], wxUSE_LIBNOTIFY)\nWX_ARG_WITH(opengl,        [  --with-opengl           use OpenGL (or Mesa)], wxUSE_OPENGL)\nWX_ARG_WITH(xtest,         [  --with-xtest            use XTest extension], wxUSE_XTEST)\n\nif test \"$wxUSE_GTK\" = 1 -o \"$wxUSE_QT\" = 1 -o \"$wxUSE_X11\" = 1; then\n    wx_needs_cairo_for_gc=1\nfi\n\ndnl If we do _not_ need Cairo anyhow, provide an option to request enabling it\ndnl explicitly.\nif test \"$wx_needs_cairo_for_gc\" != 1; then\nWX_ARG_WITH(cairo,         [  --with-cairo            use Cairo-based wxGraphicsContext implementation], wxUSE_CAIRO)\nfi\n\nfi\ndnl for GUI only\n\nWX_ARG_WITH(dmalloc,       [  --with-dmalloc          use dmalloc library (http://dmalloc.com/)], wxUSE_DMALLOC)\nWX_ARG_WITH(sdl,           [  --with-sdl              use SDL for audio on Unix], wxUSE_LIBSDL)\nWX_ARG_SYS_WITH(regex,     [  --with-regex            enable support for wxRegEx class], wxUSE_REGEX)\nWX_ARG_WITH(liblzma,       [  --with-liblzma          use LZMA compression)], wxUSE_LIBLZMA)\nWX_ARG_SYS_WITH(zlib,      [  --with-zlib             use zlib for LZW compression], wxUSE_ZLIB)\nWX_ARG_SYS_WITH(expat,     [  --with-expat            enable XML support using expat parser], wxUSE_EXPAT)\n\nWX_ARG_WITH(libcurl,       [  --with-libcurl          use libcurl-based wxWebRequest], wxUSE_LIBCURL)\ndnl USE_WIN32 is not defined yet, so we always define this option even if it's\ndnl MSW-specific, which is not ideal, but better than never defining it.\nWX_ARG_WITH(winhttp,       [  --with-winhttp          use WinHTTP-based wxWebRequest], wxUSE_WINHTTP)\nif test \"$USE_DARWIN\" = 1; then\nWX_ARG_WITH(urlsession,    [  --with-urlsession       use NSURLSession-based wxWebRequest], wxUSE_URLSESSION)\nfi\n\nif test \"$USE_DARWIN\" = 1; then\n\nAC_ARG_WITH(macosx-sdk,    [  --with-macosx-sdk=PATH  use macOS SDK at PATH], [\n        wxUSE_MACOSX_SDK=$withval\n        wx_cv_use_macosx_sdk=\"wxUSE_MACOSX_SDK=$withval\"\n    ])\n\nAC_ARG_WITH(macosx-version-min,    [  --with-macosx-version-min=VER   build binaries requiring at least this macOS version (default and lowest supported: 10.10)], [\n        wxUSE_MACOSX_VERSION_MIN=$withval\n        wx_cv_use_macosx_version_min=\"wxUSE_MACOSX_VERSION_MIN=$withval\"\n    ])\n\nfi dnl USE_DARWIN\n\ndnl ---------------------------------------------------------------------------\ndnl debugging options\ndnl ---------------------------------------------------------------------------\n\ndnl don't use WX_ARG_ENABLE as it just gets in the way instead of helping with\ndnl this rather unusual option\nAC_ARG_ENABLE(debug,       [  --enable-debug          build library for debugging],\n    [\n        if test \"$enableval\" = yes; then\n            wxUSE_DEBUG=yes\n        elif test \"$enableval\" = no; then\n            wxUSE_DEBUG=no\n        elif test \"$enableval\" = max; then\n            wxUSE_DEBUG=yes\n            WXCONFIG_CPPFLAGS=\"$WXCONFIG_CPPFLAGS -DwxDEBUG_LEVEL=2\"\n        else\n            AC_MSG_ERROR([Invalid --enable-debug value, must be yes, no or max])\n        fi\n    ],\n    wxUSE_DEBUG=default\n)\n\ncase \"$wxUSE_DEBUG\" in\n    yes)\n        dnl build the library for debugging: enable debugging code and generate\n        dnl the debug information for the library itself\n        DEFAULT_wxUSE_DEBUG_FLAG=yes\n        DEFAULT_wxUSE_DEBUG_INFO=yes\n\n        dnl also disable optimizations by default if --enable-debug was used\n        dnl (this can still be overridden by an explicit --enable-optimise)\n        DEFAULT_wxUSE_OPTIMISE=no\n        ;;\n\n    no)\n        dnl --disable-debug is equivalent to both --disable-debug_flag and\n        dnl --disable-debug_info\n        DEFAULT_wxUSE_DEBUG_FLAG=no\n        DEFAULT_wxUSE_DEBUG_INFO=no\n        ;;\n\n    default)\n        dnl the library is built with debugging support by default but without\n        dnl debug information as this requires much, much more disk space\n        DEFAULT_wxUSE_DEBUG_FLAG=yes\n        DEFAULT_wxUSE_DEBUG_INFO=no\n        ;;\nesac\n\nWX_ARG_DISABLE(debug_flag,   [  --disable-debug_flag    disable all debugging support], wxUSE_DEBUG_FLAG)\nWX_ARG_ENABLE(debug_info,    [  --enable-debug_info     generate debug information], wxUSE_DEBUG_INFO)\n\ndnl enabled if just --enable-debug_{flag,info} was\ndnl\ndnl in any case, only set the default value and allow overriding it with an\n\nWX_ARG_ENABLE(debug_gdb,     [  --enable-debug_gdb      create code with extra GDB debugging information], wxUSE_DEBUG_GDB)\nWX_ARG_ENABLE(debug_cntxt,   [  --enable-debug_cntxt    obsolete, don't use: use wxDebugContext], wxUSE_DEBUG_CONTEXT)\nWX_ARG_ENABLE(mem_tracing,   [  --enable-mem_tracing    obsolete, don't use: create code with memory tracing], wxUSE_MEM_TRACING)\n\ndnl ---------------------------------------------------------------------------\ndnl global compile options\ndnl ---------------------------------------------------------------------------\n\nWX_ARG_DISABLE(shared,     [  --disable-shared        create static library instead of shared], wxUSE_SHARED)\nAC_ARG_ENABLE(cxx11,       [  --enable-cxx11          use C++11 compiler if available], [wxWITH_CXX=11 wxWITH_CXX_IS_OPTIONAL=1])\nAC_ARG_WITH(cxx,           [  --with-cxx=11|14|17     use the given C++ dialect], [wxWITH_CXX=\"$withval\"])\nWX_ARG_ENABLE(stl,         [  --enable-stl            use standard C++ classes for everything], wxUSE_STL)\nif test \"$wxUSE_STL\" = \"yes\"; then\n    DEFAULT_wxUSE_STD_CONTAINERS=yes\n    DEFAULT_wxUSE_STD_CONTAINERS_COMPATIBLY=yes\n    DEFAULT_wxUSE_STD_IOSTREAM=yes\n    DEFAULT_wxUSE_STD_STRING=yes\nfi\nWX_ARG_ENABLE(std_containers,[  --enable-std_containers use standard C++ container classes], wxUSE_STD_CONTAINERS)\nWX_ARG_ENABLE(std_containers_compat, [  --enable-std_containers_compat     use standard C++ container classes when it can be done compatible], wxUSE_STD_CONTAINERS_COMPATIBLY)\nWX_ARG_ENABLE(std_iostreams, [  --enable-std_iostreams  use standard C++ stream classes], wxUSE_STD_IOSTREAM)\nWX_ARG_ENABLE(std_string,    [  --enable-std_string     use standard C++ string classes], wxUSE_STD_STRING)\nWX_ARG_ENABLE(std_string_conv_in_wxstring, [ --enable-std_string_conv_in_wxstring     provide implicit conversion to std::string in wxString], wxUSE_STD_STRING_CONV_IN_WXSTRING)\nWX_ARG_DISABLE(unsafe_conv_in_wxstring,     [ --disable-unsafe_conv_in_wxstring        disable unsafe implicit conversions in wxString], wxUSE_UNSAFE_WXSTRING_CONV)\nWX_ARG_DISABLE(unicode,      [  --disable-unicode       compile without Unicode support], wxUSE_UNICODE)\nWX_ARG_ENABLE_PARAM(utf8,    [  --enable-utf8           use UTF-8 representation for strings (Unix only)], wxUSE_UNICODE_UTF8)\nWX_ARG_ENABLE(utf8only,      [  --enable-utf8only       only support UTF-8 locales in UTF-8 build (Unix only)], wxUSE_UNICODE_UTF8_LOCALE)\nWX_ARG_ENABLE(extended_rtti, [  --enable-extended_rtti  use extended RTTI (XTI)], wxUSE_EXTENDED_RTTI)\n\nWX_ARG_DISABLE(optimise,   [  --disable-optimise      compile without optimisations], wxUSE_OPTIMISE)\n\nWX_ARG_ENABLE(profile,       [  --enable-profile        create code with profiling information], wxUSE_PROFILE)\nWX_ARG_DISABLE(pic,          [  --disable-pic           don't use position independent code when building static libraries (shared libraries always use PIC)], wxUSE_PIC)\nWX_ARG_ENABLE(no_rtti,       [  --enable-no_rtti        create code without RTTI information], wxUSE_NO_RTTI)\nWX_ARG_ENABLE(no_exceptions, [  --enable-no_exceptions  create code without C++ exceptions handling], wxUSE_NO_EXCEPTIONS)\nWX_ARG_ENABLE(permissive,    [  --enable-permissive     compile code disregarding strict ANSI], wxUSE_PERMISSIVE)\nWX_ARG_DISABLE(vararg_macros,[  --disable-vararg_macros don't use vararg macros, even if they are supported], wxUSE_VARARG_MACROS)\n\nif test \"$USE_DARWIN\" = 1; then\nWX_ARG_ENABLE_PARAM(universal_binary, [[  --enable-universal_binary=archs create universal binary for the specified (or all supported) architectures]], wxUSE_UNIVERSAL_BINARY)\nWX_ARG_ENABLE_PARAM(macosx_arch,      [[  --enable-macosx_arch=ARCH  build for just the specified architecture]], wxUSE_MAC_ARCH)\nfi dnl USE_DARWIN\n\nWX_ARG_ENABLE(compat28,      [  --enable-compat28       enable wxWidgets 2.8 compatibility], WXWIN_COMPATIBILITY_2_8)\nWX_ARG_DISABLE(compat30,     [  --disable-compat30      disable wxWidgets 3.0 compatibility], WXWIN_COMPATIBILITY_3_0)\n\nWX_ARG_DISABLE(rpath,        [  --disable-rpath         disable use of rpath for uninstalled builds], wxUSE_RPATH)\n\nWX_ARG_DISABLE(visibility,   [  --disable-visibility    disable use of ELF symbols visibility even if supported], wxUSE_VISIBILITY)\nWX_ARG_DISABLE(tls,          [  --disable-tls           disable use of compiler TLS support], wxUSE_COMPILER_TLS)\n\nWX_ARG_ENABLE(repro_build,   [  --enable-repro-build    enable reproducible build mode], wxUSE_REPRODUCIBLE_BUILD)\nWX_ARG_ENABLE(pch,           [  --enable-pch            use precompiled headers if possible (off by default)], wxUSE_PCH)\n\ndnl ---------------------------------------------------------------------------\ndnl optional non GUI features\ndnl ---------------------------------------------------------------------------\n\nWX_ARG_FEATURE(intl,          [  --enable-intl           use internationalization system], wxUSE_INTL)\nWX_ARG_FEATURE(xlocale,       [  --enable-xlocale        use x-locale support (requires wxLocale)], wxUSE_XLOCALE)\nWX_ARG_FEATURE(config,        [  --enable-config         use wxConfig (and derived) classes], wxUSE_CONFIG)\n\nWX_ARG_FEATURE(protocols,     [  --enable-protocols      use wxProtocol and derived classes], wxUSE_PROTOCOL)\nWX_ARG_FEATURE(ftp,           [  --enable-ftp            use wxFTP (requires wxProtocol], wxUSE_PROTOCOL_FTP)\nWX_ARG_FEATURE(http,          [  --enable-http           use wxHTTP (requires wxProtocol], wxUSE_PROTOCOL_HTTP)\nWX_ARG_FEATURE(fileproto,     [  --enable-fileproto      use wxFileProto class (requires wxProtocol], wxUSE_PROTOCOL_FILE)\nWX_ARG_FEATURE(sockets,       [  --enable-sockets        use socket/network classes], wxUSE_SOCKETS)\nWX_ARG_FEATURE(ipv6,          [  --enable-ipv6           enable IPv6 support in wxSocket], wxUSE_IPV6)\nWX_ARG_FEATURE(ole,           [  --enable-ole            use OLE classes (Win32 only)], wxUSE_OLE)\nWX_ARG_FEATURE(dataobj,       [  --enable-dataobj        use data object classes], wxUSE_DATAOBJ)\nWX_ARG_FEATURE(webrequest,    [  --enable-webrequest     use wxWebRequest], wxUSE_WEBREQUEST)\n\nWX_ARG_FEATURE(ipc,           [  --enable-ipc            use interprocess communication (wxSocket etc.)], wxUSE_IPC)\n\nWX_ARG_FEATURE(baseevtloop,   [  --enable-baseevtloop    use event loop in console programs too], wxUSE_CONSOLE_EVENTLOOP)\nWX_ARG_FEATURE(epollloop,     [  --enable-epollloop      use wxEpollDispatcher class (Linux only)], wxUSE_EPOLL_DISPATCHER)\nWX_ARG_FEATURE(selectloop,    [  --enable-selectloop     use wxSelectDispatcher class], wxUSE_SELECT_DISPATCHER)\n\ndnl please keep the settings below in alphabetical order\nWX_ARG_FEATURE(any,           [  --enable-any            use wxAny class], wxUSE_ANY)\nWX_ARG_FEATURE(apple_ieee,    [  --enable-apple_ieee     use the Apple IEEE codec], wxUSE_APPLE_IEEE)\nWX_ARG_FEATURE(arcstream,     [  --enable-arcstream      use wxArchive streams], wxUSE_ARCHIVE_STREAMS)\nWX_ARG_FEATURE(base64,        [  --enable-base64         use base64 encoding/decoding functions], wxUSE_BASE64)\nWX_ARG_FEATURE(backtrace,     [  --enable-backtrace      use wxStackWalker class for getting backtraces], wxUSE_STACKWALKER)\nWX_ARG_FEATURE(catch_segvs,   [  --enable-catch_segvs    catch signals in wxApp::OnFatalException (Unix only)], wxUSE_ON_FATAL_EXCEPTION)\nWX_ARG_FEATURE(cmdline,       [  --enable-cmdline        use wxCmdLineParser class], wxUSE_CMDLINE_PARSER)\nWX_ARG_FEATURE(datetime,      [  --enable-datetime       use wxDateTime class], wxUSE_DATETIME)\nWX_ARG_FEATURE(debugreport,   [  --enable-debugreport    use wxDebugReport class], wxUSE_DEBUGREPORT)\nWX_ARG_FEATURE(dialupman,     [  --enable-dialupman      use dialup network classes], wxUSE_DIALUP_MANAGER)\nWX_ARG_FEATURE(dynlib,        [  --enable-dynlib         use wxLibrary class for DLL loading], wxUSE_DYNLIB_CLASS)\nWX_ARG_FEATURE(dynamicloader, [  --enable-dynamicloader  use (new) wxDynamicLibrary class], wxUSE_DYNAMIC_LOADER)\nWX_ARG_FEATURE(exceptions,    [  --enable-exceptions     build exception-safe library], wxUSE_EXCEPTIONS)\nWX_ARG_FEATURE(ffile,         [  --enable-ffile          use wxFFile class], wxUSE_FFILE)\nWX_ARG_FEATURE(file,          [  --enable-file           use wxFile class], wxUSE_FILE)\nWX_ARG_FEATURE(filehistory,   [  --enable-filehistory    use wxFileHistory class], wxUSE_FILE_HISTORY)\nWX_ARG_FEATURE(filesystem,    [  --enable-filesystem     use virtual file systems classes], wxUSE_FILESYSTEM)\nWX_ARG_FEATURE(fontenum,      [  --enable-fontenum       use wxFontEnumerator class], wxUSE_FONTENUM)\nWX_ARG_FEATURE(fontmap,       [  --enable-fontmap        use font encodings conversion classes], wxUSE_FONTMAP)\nWX_ARG_FEATURE(fs_archive,    [  --enable-fs_archive     use virtual archive filesystems], wxUSE_FS_ARCHIVE)\nWX_ARG_FEATURE(fs_inet,       [  --enable-fs_inet        use virtual HTTP/FTP filesystems], wxUSE_FS_INET)\nWX_ARG_FEATURE(fs_zip,        [  --enable-fs_zip         now replaced by fs_archive], wxUSE_FS_ZIP)\nWX_ARG_FEATURE(fsvolume,      [  --enable-fsvolume       use wxFSVolume class], wxUSE_FSVOLUME)\nWX_ARG_FEATURE(fswatcher,     [  --enable-fswatcher      use wxFileSystemWatcher class], wxUSE_FSWATCHER)\nWX_ARG_FEATURE(geometry,      [  --enable-geometry       use geometry class], wxUSE_GEOMETRY)\nWX_ARG_FEATURE(log,           [  --enable-log            use logging system], wxUSE_LOG)\nWX_ARG_FEATURE(longlong,      [  --enable-longlong       use wxLongLong class], wxUSE_LONGLONG)\nWX_ARG_FEATURE(mimetype,      [  --enable-mimetype       use wxMimeTypesManager], wxUSE_MIMETYPE)\nWX_ARG_FEATURE(printfposparam,[  --enable-printfposparam use wxVsnprintf() which supports positional parameters], wxUSE_PRINTF_POS_PARAMS)\nWX_ARG_FEATURE(secretstore,   [  --enable-secretstore    use wxSecretStore class], wxUSE_SECRETSTORE)\nWX_ARG_FEATURE(snglinst,      [  --enable-snglinst       use wxSingleInstanceChecker class], wxUSE_SNGLINST_CHECKER)\nWX_ARG_FEATURE(sound,         [  --enable-sound          use wxSound class], wxUSE_SOUND)\nWX_ARG_FEATURE(stdpaths,      [  --enable-stdpaths       use wxStandardPaths class], wxUSE_STDPATHS)\nWX_ARG_FEATURE(stopwatch,     [  --enable-stopwatch      use wxStopWatch class], wxUSE_STOPWATCH)\nWX_ARG_FEATURE(streams,       [  --enable-streams        use wxStream etc classes], wxUSE_STREAMS)\nWX_ARG_FEATURE(sysoptions,    [  --enable-sysoptions     use wxSystemOptions], wxUSE_SYSTEM_OPTIONS)\nWX_ARG_FEATURE(tarstream,     [  --enable-tarstream      use wxTar streams], wxUSE_TARSTREAM)\nWX_ARG_FEATURE(textbuf,       [  --enable-textbuf        use wxTextBuffer class], wxUSE_TEXTBUFFER)\nWX_ARG_FEATURE(textfile,      [  --enable-textfile       use wxTextFile class], wxUSE_TEXTFILE)\nWX_ARG_FEATURE(timer,         [  --enable-timer          use wxTimer class], wxUSE_TIMER)\nWX_ARG_FEATURE(variant,       [  --enable-variant        use wxVariant class], wxUSE_VARIANT)\nWX_ARG_FEATURE(zipstream,     [  --enable-zipstream      use wxZip streams], wxUSE_ZIPSTREAM)\n\ndnl URL-related classes\nWX_ARG_FEATURE(url,           [  --enable-url            use wxURL class], wxUSE_URL)\nWX_ARG_FEATURE(protocol,      [  --enable-protocol       use wxProtocol class], wxUSE_PROTOCOL)\nWX_ARG_FEATURE(protocol_http, [  --enable-protocol-http  HTTP support in wxProtocol], wxUSE_PROTOCOL_HTTP)\nWX_ARG_FEATURE(protocol_ftp,  [  --enable-protocol-ftp   FTP support in wxProtocol], wxUSE_PROTOCOL_FTP)\nWX_ARG_FEATURE(protocol_file, [  --enable-protocol-file  FILE support in wxProtocol], wxUSE_PROTOCOL_FILE)\n\nWX_ARG_FEATURE(threads,     [  --enable-threads        use threads], wxUSE_THREADS)\n\nif test \"$wxUSE_MSW\" = 1 ; then\nWX_ARG_DISABLE(dbghelp,     [  --enable-dbghelp        use dbghelp.dll API (Win32 only)], wxUSE_DBGHELP)\nWX_ARG_ENABLE(iniconf,      [  --enable-iniconf        use wxIniConfig (Win32 only)], wxUSE_INICONF)\nfi\n\nWX_ARG_FEATURE(regkey,      [  --enable-regkey         use wxRegKey class (Win32 only)], wxUSE_REGKEY)\n\nif test \"$wxUSE_GUI\" = \"yes\"; then\n\ndnl ---------------------------------------------------------------------------\ndnl optional \"big\" GUI features\ndnl ---------------------------------------------------------------------------\n\nWX_ARG_FEATURE(docview,     [  --enable-docview        use document view architecture], wxUSE_DOC_VIEW_ARCHITECTURE)\nWX_ARG_FEATURE(help,        [  --enable-help           use help subsystem], wxUSE_HELP)\nWX_ARG_FEATURE(mshtmlhelp,  [  --enable-mshtmlhelp     use MS HTML Help (win32)], wxUSE_MS_HTML_HELP)\nWX_ARG_FEATURE(html,        [  --enable-html           use wxHTML sub-library], wxUSE_HTML)\nWX_ARG_FEATURE(htmlhelp,    [  --enable-htmlhelp       use wxHTML-based help], wxUSE_WXHTML_HELP)\nWX_ARG_FEATURE(xrc,         [  --enable-xrc            use XRC resources sub-library], wxUSE_XRC)\nWX_ARG_FEATURE(aui,         [  --enable-aui            use AUI docking library], wxUSE_AUI)\nWX_ARG_FEATURE(propgrid,    [  --enable-propgrid       use wxPropertyGrid library], wxUSE_PROPGRID)\nWX_ARG_FEATURE(ribbon,      [  --enable-ribbon         use wxRibbon library], wxUSE_RIBBON)\nWX_ARG_FEATURE(stc,         [  --enable-stc            use wxStyledTextCtrl library], wxUSE_STC)\nWX_ARG_FEATURE(constraints, [  --enable-constraints    use layout-constraints system], wxUSE_CONSTRAINTS)\nWX_ARG_FEATURE(loggui,      [  --enable-loggui         use standard GUI logger], wxUSE_LOGGUI)\nWX_ARG_FEATURE(logwin,      [  --enable-logwin         use wxLogWindow], wxUSE_LOGWINDOW)\nWX_ARG_FEATURE(logdialog,   [  --enable-logdialog      use wxLogDialog], wxUSE_LOGDIALOG)\nWX_ARG_FEATURE(mdi,         [  --enable-mdi            use multiple document interface architecture], wxUSE_MDI)\nWX_ARG_FEATURE(mdidoc,      [  --enable-mdidoc         use docview architecture with MDI], wxUSE_MDI_ARCHITECTURE)\nWX_ARG_FEATURE(mediactrl,   [  --enable-mediactrl      use wxMediaCtrl class], wxUSE_MEDIACTRL)\nWX_ARG_FEATURE(richtext,    [  --enable-richtext       use wxRichTextCtrl], wxUSE_RICHTEXT)\nWX_ARG_FEATURE(postscript,  [  --enable-postscript     use wxPostscriptDC device context (default for gtk+)], wxUSE_POSTSCRIPT)\nWX_ARG_FEATURE(printarch,   [  --enable-printarch      use printing architecture], wxUSE_PRINTING_ARCHITECTURE)\nWX_ARG_FEATURE(svg,         [  --enable-svg            use wxSVGFileDC device context], wxUSE_SVG)\nWX_ARG_FEATURE(webview,     [  --enable-webview        use wxWebView library], wxUSE_WEBVIEW)\n\ndnl wxDC is implemented in terms of wxGraphicsContext in wxOSX so the latter\ndnl can't be disabled, don't even provide an option to do it\nif test \"$wxUSE_MAC\" != 1; then\nWX_ARG_FEATURE(graphics_ctx,[  --enable-graphics_ctx   use graphics context 2D drawing API], wxUSE_GRAPHICS_CONTEXT)\nfi\n\ndnl ---------------------------------------------------------------------------\ndnl IPC &c\ndnl ---------------------------------------------------------------------------\n\nWX_ARG_FEATURE(clipboard,   [  --enable-clipboard      use wxClipboard class], wxUSE_CLIPBOARD)\nWX_ARG_FEATURE(dnd,         [  --enable-dnd            use Drag'n'Drop classes], wxUSE_DRAG_AND_DROP)\n\ndnl ---------------------------------------------------------------------------\ndnl optional GUI controls (in alphabetical order except the first one)\ndnl ---------------------------------------------------------------------------\n\ndnl don't set DEFAULT_wxUSE_XXX below if the option is not specified\nDEFAULT_wxUSE_CONTROLS=none\nWX_ARG_DISABLE(controls,    [  --disable-controls      disable compilation of all standard controls], wxUSE_CONTROLS)\n\ndnl even with --disable-controls, some may be enabled by an explicit\ndnl --enable-<control> later on the command line -- but by default all will be\ndnl disabled\nif test \"$wxUSE_CONTROLS\" = \"no\"; then\n    DEFAULT_wxUSE_ACCEL=no\n    DEFAULT_wxUSE_ANIMATIONCTRL=no\n    DEFAULT_wxUSE_BANNERWINDOW=no\n    DEFAULT_wxUSE_BMPBUTTON=no\n    DEFAULT_wxUSE_BUTTON=no\n    DEFAULT_wxUSE_CALCTRL=no\n    DEFAULT_wxUSE_CARET=no\n    DEFAULT_wxUSE_CHECKBOX=no\n    DEFAULT_wxUSE_CHECKLISTBOX=no\n    DEFAULT_wxUSE_CHOICE=no\n    DEFAULT_wxUSE_CHOICEBOOK=no\n    DEFAULT_wxUSE_COLLPANE=no\n    DEFAULT_wxUSE_COLOURPICKERCTRL=no\n    DEFAULT_wxUSE_COMBOBOX=no\n    DEFAULT_wxUSE_COMBOBOX=no\n    DEFAULT_wxUSE_COMMANDLINKBUTTON=no\n    DEFAULT_wxUSE_DATAVIEWCTRL=no\n    DEFAULT_wxUSE_DATEPICKCTRL=no\n    DEFAULT_wxUSE_DETECT_SM=no\n    DEFAULT_wxUSE_DIRPICKERCTRL=no\n    DEFAULT_wxUSE_DISPLAY=no\n    DEFAULT_wxUSE_FILECTRL=no\n    DEFAULT_wxUSE_FILEPICKERCTRL=no\n    DEFAULT_wxUSE_FONTPICKERCTRL=no\n    DEFAULT_wxUSE_GAUGE=no\n    DEFAULT_wxUSE_GRID=no\n    DEFAULT_wxUSE_HEADERCTRL=no\n    DEFAULT_wxUSE_HYPERLINKCTRL=no\n    DEFAULT_wxUSE_IMAGLIST=no\n    DEFAULT_wxUSE_LISTBOOK=no\n    DEFAULT_wxUSE_LISTBOX=no\n    DEFAULT_wxUSE_LISTCTRL=no\n    DEFAULT_wxUSE_MARKUP=no\n    DEFAULT_wxUSE_NOTEBOOK=no\n    DEFAULT_wxUSE_POPUPWIN=no\n    DEFAULT_wxUSE_RADIOBOX=no\n    DEFAULT_wxUSE_RADIOBTN=no\n    DEFAULT_wxUSE_RICHMSGDLG=no\n    DEFAULT_wxUSE_RICHTOOLTIP=no\n    DEFAULT_wxUSE_REARRANGECTRL=no\n    DEFAULT_wxUSE_SASH=no\n    DEFAULT_wxUSE_SCROLLBAR=no\n    DEFAULT_wxUSE_SEARCHCTRL=no\n    DEFAULT_wxUSE_SLIDER=no\n    DEFAULT_wxUSE_SPINBTN=no\n    DEFAULT_wxUSE_SPINCTRL=no\n    DEFAULT_wxUSE_SPLITTER=no\n    DEFAULT_wxUSE_STATBMP=no\n    DEFAULT_wxUSE_STATBOX=no\n    DEFAULT_wxUSE_STATLINE=no\n    DEFAULT_wxUSE_STATUSBAR=no\n    DEFAULT_wxUSE_TIMEPICKCTRL=no\n    DEFAULT_wxUSE_TIPWINDOW=no\n    DEFAULT_wxUSE_TOGGLEBTN=no\n    DEFAULT_wxUSE_TOOLBAR=no\n    DEFAULT_wxUSE_TOOLBAR_NATIVE=no\n    DEFAULT_wxUSE_TOOLBOOK=no\n    DEFAULT_wxUSE_TOOLTIPS=no\n    DEFAULT_wxUSE_TREEBOOK=no\n    DEFAULT_wxUSE_TREECTRL=no\n    DEFAULT_wxUSE_TREELISTCTRL=no\nfi\n\ndnl features affecting multiple controls\nWX_ARG_FEATURE(markup,      [  --enable-markup         support wxControl::SetLabelMarkup], wxUSE_MARKUP)\n\ndnl please keep the settings below in alphabetical order\nWX_ARG_FEATURE(accel,       [  --enable-accel          use accelerators], wxUSE_ACCEL)\nWX_ARG_FEATURE(actindicator,[  --enable-actindicator   use wxActivityIndicator class], wxUSE_ACTIVITYINDICATOR)\nWX_ARG_FEATURE(addremovectrl, [  --enable-addremovectrl  use wxAddRemoveCtrl], wxUSE_ADDREMOVECTRL)\nWX_ARG_FEATURE(animatectrl, [  --enable-animatectrl    use wxAnimationCtrl class], wxUSE_ANIMATIONCTRL)\nWX_ARG_FEATURE(bannerwindow,[  --enable-bannerwindow   use wxBannerWindow class], wxUSE_BANNERWINDOW)\nWX_ARG_FEATURE(artstd,      [  --enable-artstd         use standard XPM icons in wxArtProvider], wxUSE_ARTPROVIDER_STD)\nWX_ARG_FEATURE(arttango,    [  --enable-arttango       use Tango icons in wxArtProvider], wxUSE_ARTPROVIDER_TANGO)\nWX_ARG_FEATURE(bmpbutton,   [  --enable-bmpbutton      use wxBitmapButton class], wxUSE_BMPBUTTON)\nWX_ARG_FEATURE(bmpcombobox, [  --enable-bmpcombobox    use wxBitmapComboBox class], wxUSE_BITMAPCOMBOBOX)\nWX_ARG_FEATURE(button,      [  --enable-button         use wxButton class], wxUSE_BUTTON)\nWX_ARG_FEATURE(calendar,    [  --enable-calendar       use wxCalendarCtrl class], wxUSE_CALCTRL)\nWX_ARG_FEATURE(caret,       [  --enable-caret          use wxCaret class], wxUSE_CARET)\nWX_ARG_FEATURE(checkbox,    [  --enable-checkbox       use wxCheckBox class], wxUSE_CHECKBOX)\nWX_ARG_FEATURE(checklst,    [  --enable-checklst       use wxCheckListBox (listbox with checkboxes) class], wxUSE_CHECKLST)\nWX_ARG_FEATURE(choice,      [  --enable-choice         use wxChoice class], wxUSE_CHOICE)\nWX_ARG_FEATURE(choicebook,  [  --enable-choicebook     use wxChoicebook class], wxUSE_CHOICEBOOK)\nWX_ARG_FEATURE(collpane,    [  --enable-collpane       use wxCollapsiblePane class], wxUSE_COLLPANE)\nWX_ARG_FEATURE(colourpicker,[  --enable-colourpicker   use wxColourPickerCtrl class], wxUSE_COLOURPICKERCTRL)\nWX_ARG_FEATURE(combobox,    [  --enable-combobox       use wxComboBox class], wxUSE_COMBOBOX)\nWX_ARG_FEATURE(comboctrl,   [  --enable-comboctrl      use wxComboCtrl class], wxUSE_COMBOCTRL)\nWX_ARG_FEATURE(commandlinkbutton, [  --enable-commandlinkbutton      use wxCommmandLinkButton class], wxUSE_COMMANDLINKBUTTON)\nWX_ARG_FEATURE(dataviewctrl,[  --enable-dataviewctrl   use wxDataViewCtrl class], wxUSE_DATAVIEWCTRL)\nWX_ARG_DISABLE(nativedvc,   [  --disable-nativedvc     disable use of native wxDataViewCtrl even if available], wxUSE_NATIVE_DATAVIEWCTRL)\nWX_ARG_FEATURE(datepick,    [  --enable-datepick       use wxDatePickerCtrl class], wxUSE_DATEPICKCTRL)\nWX_ARG_FEATURE(detect_sm,   [  --enable-detect_sm      use code to detect X11 session manager], wxUSE_DETECT_SM)\nWX_ARG_FEATURE(dirpicker,   [  --enable-dirpicker      use wxDirPickerCtrl class], wxUSE_DIRPICKERCTRL)\nWX_ARG_FEATURE(display,     [  --enable-display        use wxDisplay class], wxUSE_DISPLAY)\nWX_ARG_FEATURE(editablebox, [  --enable-editablebox    use wxEditableListBox class], wxUSE_EDITABLELISTBOX)\nWX_ARG_FEATURE(filectrl,    [  --enable-filectrl       use wxFileCtrl class], wxUSE_FILECTRL)\nWX_ARG_FEATURE(filepicker,  [  --enable-filepicker     use wxFilePickerCtrl class], wxUSE_FILEPICKERCTRL)\nWX_ARG_FEATURE(fontpicker,  [  --enable-fontpicker     use wxFontPickerCtrl class], wxUSE_FONTPICKERCTRL)\nWX_ARG_FEATURE(gauge,       [  --enable-gauge          use wxGauge class], wxUSE_GAUGE)\nWX_ARG_FEATURE(grid,        [  --enable-grid           use wxGrid class], wxUSE_GRID)\nWX_ARG_FEATURE(headerctrl,  [  --enable-headerctrl     use wxHeaderCtrl class], wxUSE_HEADERCTRL)\nWX_ARG_FEATURE(hyperlink,   [  --enable-hyperlink      use wxHyperlinkCtrl class], wxUSE_HYPERLINKCTRL)\nWX_ARG_FEATURE(imaglist,    [  --enable-imaglist       use wxImageList class], wxUSE_IMAGLIST)\nWX_ARG_FEATURE(infobar,     [  --enable-infobar        use wxInfoBar class], wxUSE_INFOBAR)\nWX_ARG_FEATURE(listbook,    [  --enable-listbook       use wxListbook class], wxUSE_LISTBOOK)\nWX_ARG_FEATURE(listbox,     [  --enable-listbox        use wxListBox class], wxUSE_LISTBOX)\nWX_ARG_FEATURE(listctrl,    [  --enable-listctrl       use wxListCtrl class], wxUSE_LISTCTRL)\nWX_ARG_FEATURE(notebook,    [  --enable-notebook       use wxNotebook class], wxUSE_NOTEBOOK)\nWX_ARG_FEATURE(notifmsg,    [  --enable-notifmsg       use wxNotificationMessage class], wxUSE_NOTIFICATION_MESSAGE)\nWX_ARG_FEATURE(odcombobox,  [  --enable-odcombobox     use wxOwnerDrawnComboBox class], wxUSE_ODCOMBOBOX)\nWX_ARG_FEATURE(popupwin,    [  --enable-popupwin       use wxPopUpWindow class], wxUSE_POPUPWIN)\nWX_ARG_FEATURE(prefseditor, [  --enable-prefseditor    use wxPreferencesEditor class], wxUSE_PREFERENCES_EDITOR)\nWX_ARG_FEATURE(privatefonts,[  --enable-privatefonts   provide wxFont::AddPrivateFont() method], wxUSE_PRIVATE_FONTS)\nWX_ARG_FEATURE(radiobox,    [  --enable-radiobox       use wxRadioBox class], wxUSE_RADIOBOX)\nWX_ARG_FEATURE(radiobtn,    [  --enable-radiobtn       use wxRadioButton class], wxUSE_RADIOBTN)\nWX_ARG_FEATURE(richmsgdlg,  [  --enable-richmsgdlg     use wxRichMessageDialog class], wxUSE_RICHMSGDLG)\nWX_ARG_FEATURE(richtooltip, [  --enable-richtooltip    use wxRichToolTip class], wxUSE_RICHTOOLTIP)\nWX_ARG_FEATURE(rearrangectrl,[  --enable-rearrangectrl  use wxRearrangeList/Ctrl/Dialog], wxUSE_REARRANGECTRL)\nWX_ARG_FEATURE(sash,        [  --enable-sash           use wxSashWindow class], wxUSE_SASH)\nWX_ARG_FEATURE(scrollbar,   [  --enable-scrollbar      use wxScrollBar class and scrollable windows], wxUSE_SCROLLBAR)\nWX_ARG_FEATURE(searchctrl,  [  --enable-searchctrl     use wxSearchCtrl class], wxUSE_SEARCHCTRL)\nWX_ARG_FEATURE(slider,      [  --enable-slider         use wxSlider class], wxUSE_SLIDER)\nWX_ARG_FEATURE(spinbtn,     [  --enable-spinbtn        use wxSpinButton class], wxUSE_SPINBTN)\nWX_ARG_FEATURE(spinctrl,    [  --enable-spinctrl       use wxSpinCtrl class], wxUSE_SPINCTRL)\nWX_ARG_FEATURE(splitter,    [  --enable-splitter       use wxSplitterWindow class], wxUSE_SPLITTER)\nWX_ARG_FEATURE(statbmp,     [  --enable-statbmp        use wxStaticBitmap class], wxUSE_STATBMP)\nWX_ARG_FEATURE(statbox,     [  --enable-statbox        use wxStaticBox class], wxUSE_STATBOX)\nWX_ARG_FEATURE(statline,    [  --enable-statline       use wxStaticLine class], wxUSE_STATLINE)\nWX_ARG_FEATURE(stattext,    [  --enable-stattext       use wxStaticText class], wxUSE_STATTEXT)\nWX_ARG_FEATURE(statusbar,   [  --enable-statusbar      use wxStatusBar class], wxUSE_STATUSBAR)\nWX_ARG_FEATURE(taskbaricon, [  --enable-taskbaricon    use wxTaskBarIcon class], wxUSE_TASKBARICON)\nWX_ARG_FEATURE(tbarnative,  [  --enable-tbarnative     use native wxToolBar class], wxUSE_TOOLBAR_NATIVE)\nWX_ARG_FEATURE(textctrl,    [  --enable-textctrl       use wxTextCtrl class], wxUSE_TEXTCTRL)\nWX_ARG_FEATURE(timepick,    [  --enable-timepick       use wxTimePickerCtrl class], wxUSE_TIMEPICKCTRL)\nWX_ARG_FEATURE(tipwindow,   [  --enable-tipwindow      use wxTipWindow class], wxUSE_TIPWINDOW)\nWX_ARG_FEATURE(togglebtn,   [  --enable-togglebtn      use wxToggleButton class], wxUSE_TOGGLEBTN)\nWX_ARG_FEATURE(toolbar,     [  --enable-toolbar        use wxToolBar class], wxUSE_TOOLBAR)\nWX_ARG_FEATURE(toolbook,    [  --enable-toolbook       use wxToolbook class], wxUSE_TOOLBOOK)\nWX_ARG_FEATURE(treebook,    [  --enable-treebook       use wxTreebook class], wxUSE_TREEBOOK)\nWX_ARG_FEATURE(treectrl,    [  --enable-treectrl       use wxTreeCtrl class], wxUSE_TREECTRL)\nWX_ARG_FEATURE(treelist,    [  --enable-treelist       use wxTreeListCtrl class], wxUSE_TREELISTCTRL)\n\ndnl ---------------------------------------------------------------------------\ndnl common dialogs\ndnl ---------------------------------------------------------------------------\n\nWX_ARG_FEATURE(commondlg,   [  --enable-commondlg      use all common dialogs], wxUSE_COMMONDLGS)\nWX_ARG_FEATURE(aboutdlg,    [  --enable-aboutdlg       use wxAboutBox], wxUSE_ABOUTDLG)\nWX_ARG_FEATURE(choicedlg,   [  --enable-choicedlg      use wxChoiceDialog], wxUSE_CHOICEDLG)\nWX_ARG_FEATURE(coldlg,      [  --enable-coldlg         use wxColourDialog], wxUSE_COLOURDLG)\nWX_ARG_FEATURE(creddlg,     [  --enable-creddlg        use wxCredentialEntryDialog], wxUSE_CREDENTIALDLG)\nWX_ARG_FEATURE(filedlg,     [  --enable-filedlg        use wxFileDialog], wxUSE_FILEDLG)\nWX_ARG_FEATURE(finddlg,     [  --enable-finddlg        use wxFindReplaceDialog], wxUSE_FINDREPLDLG)\nWX_ARG_FEATURE(fontdlg,     [  --enable-fontdlg        use wxFontDialog], wxUSE_FONTDLG)\nWX_ARG_FEATURE(dirdlg,      [  --enable-dirdlg         use wxDirDialog], wxUSE_DIRDLG)\nWX_ARG_FEATURE(msgdlg,      [  --enable-msgdlg         use wxMessageDialog], wxUSE_MSGDLG)\nWX_ARG_FEATURE(numberdlg,   [  --enable-numberdlg      use wxNumberEntryDialog], wxUSE_NUMBERDLG)\nWX_ARG_FEATURE(splash,      [  --enable-splash         use wxSplashScreen], wxUSE_SPLASH)\nWX_ARG_FEATURE(textdlg,     [  --enable-textdlg        use wxTextDialog], wxUSE_TEXTDLG)\nWX_ARG_FEATURE(tipdlg,      [  --enable-tipdlg         use startup tips], wxUSE_STARTUP_TIPS)\nWX_ARG_FEATURE(progressdlg, [  --enable-progressdlg    use wxProgressDialog], wxUSE_PROGRESSDLG)\nWX_ARG_FEATURE(wizarddlg,   [  --enable-wizarddlg      use wxWizard], wxUSE_WIZARDDLG)\n\ndnl ---------------------------------------------------------------------------\ndnl misc GUI options\ndnl ---------------------------------------------------------------------------\n\nif test \"$wxUSE_MSW\" = 1 ; then\n    DEFAULT_wxUSE_ACCESSIBILITY=yes\nfi\n\nWX_ARG_FEATURE(menus,       [  --enable-menus          use wxMenu and wxMenuItem classes], wxUSE_MENUS)\nWX_ARG_FEATURE(menubar,     [  --enable-menubar        use wxMenuBar class], wxUSE_MENUBAR)\nWX_ARG_FEATURE(miniframe,   [  --enable-miniframe      use wxMiniFrame class], wxUSE_MINIFRAME)\nWX_ARG_FEATURE(tooltips,    [  --enable-tooltips       use wxToolTip class], wxUSE_TOOLTIPS)\nWX_ARG_FEATURE(splines,     [  --enable-splines        use spline drawing code], wxUSE_SPLINES)\nWX_ARG_FEATURE(mousewheel,  [  --enable-mousewheel     use mousewheel], wxUSE_MOUSEWHEEL)\nWX_ARG_FEATURE(validators,  [  --enable-validators     use wxValidator and derived classes], wxUSE_VALIDATORS)\nWX_ARG_FEATURE(busyinfo,    [  --enable-busyinfo       use wxBusyInfo], wxUSE_BUSYINFO)\nWX_ARG_FEATURE(hotkey,      [  --enable-hotkey         use wxWindow::RegisterHotKey()], wxUSE_HOTKEY)\nWX_ARG_FEATURE(joystick,    [  --enable-joystick       use wxJoystick], wxUSE_JOYSTICK)\nWX_ARG_FEATURE(metafile,    [  --enable-metafile       use wxMetaFile], wxUSE_METAFILE)\nWX_ARG_FEATURE(dragimage,   [  --enable-dragimage      use wxDragImage], wxUSE_DRAGIMAGE)\nWX_ARG_FEATURE(accessibility,[  --enable-accessibility  enable accessibility support], wxUSE_ACCESSIBILITY)\nWX_ARG_FEATURE(uiactionsim,  [  --enable-uiactionsim    use wxUIActionSimulator (experimental)], wxUSE_UIACTIONSIMULATOR)\nWX_ARG_FEATURE(dctransform,  [  --enable-dctransform    use wxDC::SetTransformMatrix and related], wxUSE_DC_TRANSFORM_MATRIX)\nWX_ARG_FEATURE(webviewwebkit,[  --enable-webviewwebkit  use wxWebView WebKit backend], wxUSE_WEBVIEW_WEBKIT)\nWX_ARG_FEATURE(glcanvasegl,  [  --disable-glcanvasegl   disable wxGLCanvas EGL backend], wxUSE_GLCANVAS_EGL)\n\ndnl ---------------------------------------------------------------------------\ndnl support for image formats that do not rely on external library\ndnl ---------------------------------------------------------------------------\n\nWX_ARG_FEATURE(palette,     [  --enable-palette        use wxPalette class], wxUSE_PALETTE)\nWX_ARG_FEATURE(image,       [  --enable-image          use wxImage class], wxUSE_IMAGE)\nWX_ARG_FEATURE(gif,         [  --enable-gif            use gif images (GIF file format)], wxUSE_GIF)\nWX_ARG_FEATURE(pcx,         [  --enable-pcx            use pcx images (PCX file format)], wxUSE_PCX)\nWX_ARG_FEATURE(tga,         [  --enable-tga            use tga images (TGA file format)], wxUSE_TGA)\nWX_ARG_FEATURE(iff,         [  --enable-iff            use iff images (IFF file format)], wxUSE_IFF)\nWX_ARG_FEATURE(pnm,         [  --enable-pnm            use pnm images (PNM file format)], wxUSE_PNM)\nWX_ARG_FEATURE(xpm,         [  --enable-xpm            use xpm images (XPM file format)], wxUSE_XPM)\nWX_ARG_FEATURE(ico_cur,     [  --enable-ico_cur        use Windows ICO and CUR formats], wxUSE_ICO_CUR)\n\ndnl ---------------------------------------------------------------------------\ndnl wxMSW-only options\ndnl ---------------------------------------------------------------------------\n\nWX_ARG_FEATURE(dccache,     [  --enable-dccache        cache temporary wxDC objects (Win32 only)], wxUSE_DC_CACHEING)\nWX_ARG_FEATURE(ps-in-msw,   [  --enable-ps-in-msw      use PS printing in wxMSW (Win32 only)], wxUSE_POSTSCRIPT_ARCHITECTURE_IN_MSW)\nWX_ARG_FEATURE(ownerdrawn,  [  --enable-ownerdrawn     use owner drawn controls (Win32 and OS/2 only)], wxUSE_OWNER_DRAWN)\nWX_ARG_FEATURE(uxtheme,     [  --enable-uxtheme        enable support for Windows XP themed look (Win32 only)], wxUSE_UXTHEME)\nWX_ARG_FEATURE(wxdib,       [  --enable-wxdib          use wxDIB class (Win32 only)], wxUSE_DIB)\nWX_ARG_FEATURE(webviewie,   [  --enable-webviewie      use wxWebView IE backend (Win32 only)], wxUSE_WEBVIEW_IE)\n\ndnl this one is not really MSW-specific but it exists mainly to be turned off\ndnl under MSW, it should be off by default on the other platforms\nif test \"$wxUSE_MSW\" != 1; then\n    DEFAULT_wxUSE_AUTOID_MANAGEMENT=no\nfi\n\nWX_ARG_FEATURE(autoidman,   [  --enable-autoidman      use automatic ids management], wxUSE_AUTOID_MANAGEMENT)\n\nfi\ndnl for GUI only\n\ndnl ---------------------------------------------------------------------------\ndnl Checks for programs\ndnl ---------------------------------------------------------------------------\n\ndnl flush the cache because checking for programs might abort\nAC_CACHE_SAVE\n\ndnl C-compiler checks\ndnl   defines CC with the compiler to use\ndnl   defines GCC with yes if using gcc\ndnl   defines GCC empty if not using gcc\ndnl   defines CFLAGS\ndnl\ndnl this magic incantation is needed to prevent AC_PROG_CC from setting the\ndnl default CFLAGS (something like \"-g -O2\") -- we don't need this as we add\ndnl (if not already present in C*FLAGS) the -g and -O flags ourselves below\nCFLAGS=${CFLAGS:=}\nAC_BAKEFILE_PROG_CC\n\ndnl is -traditional needed for correct compilations\ndnl   adds -traditional for gcc if needed\nAC_PROG_GCC_TRADITIONAL\n\ndnl C++-compiler checks\ndnl   defines CXX with the compiler to use\ndnl   defines GXX with yes if using gxx\ndnl   defines GXX empty if not using gxx\ndnl   defines CXXFLAGS\ndnl\ndnl see CFLAGS line above\nCXXFLAGS=${CXXFLAGS:=}\nAC_BAKEFILE_PROG_CXX\n\ndnl configure always sets CXX to something as it falls back to g++ even if no\ndnl C++ compiler was found, but we prefer to abort now with a clear error\ndnl message rather than give errors about all tests failures below\nif test \"$CXX\" = \"g++\" -a \"$GXX\" != \"yes\"; then\n    AC_MSG_ERROR([C++ compiler is needed to build wxWidgets])\nfi\n\ndnl Always use C++11 under macOS, there are no supported compilers not\ndnl supporting it there, but don't prevent a latest version of C++ from being\ndnl used.\nif test \"$wxUSE_MAC\" = 1 -a -z \"$wxWITH_CXX\"; then\n    wxWITH_CXX=11\nfi\n\nif test -n \"$wxWITH_CXX\"; then\n    dnl AX_CXX_COMPILE_STDCXX requires its VERSION argument to be specified at\n    dnl autoconf, not run, time.\n    case \"$wxWITH_CXX\" in\n        11)\n            AX_CXX_COMPILE_STDCXX(11,,optional)\n            if test -n \"$wxWITH_CXX_IS_OPTIONAL\"; then\n                if test \"$HAVE_CXX11\" != 1; then\n                    AC_MSG_FAILURE([C++11 support was requested but is not available])\n                fi\n            fi\n            ;;\n\n        14)\n            dnl This check can't be optional because we have only --with-cxx=14\n            dnl and not --enable-cxx14 option.\n            AX_CXX_COMPILE_STDCXX(14)\n\n            dnl Notice that because it's not optional, the macro doesn't define\n            dnl HAVE_CXX14. We don't use it anyhow so far, so it doesn't\n            dnl matter, but we could need to do it ourselves here in the future.\n\n            dnl If we have C++14, we necessarily have C++11 too.\n            HAVE_CXX11=1\n            ;;\n\n        17)\n            dnl This is similar to 14 above.\n            AX_CXX_COMPILE_STDCXX(17)\n            HAVE_CXX11=1\n            ;;\n\n        *)\n            AC_MSG_ERROR([Invalid --with-cxx=$wxWITH_CXX option value, only 11, 14 or 17 supported])\n    esac\n\n    if test \"$HAVE_CXX11\" = \"1\" ; then\n        dnl The standard macro above doesn't set Objective-C++ flags, but we do\n        dnl need them too.\n        OBJCXXFLAGS=\"$OBJCXXFLAGS $switch\"\n    fi\nfi\n\ncase \"$wxWITH_DPI_MANIFEST\" in\n    none)\n        USE_DPI_AWARE_MANIFEST=0 ;;\n    system)\n        USE_DPI_AWARE_MANIFEST=1 ;;\n    ''|per-monitor)\n        USE_DPI_AWARE_MANIFEST=2 ;;\n    *)\n        USE_DPI_AWARE_MANIFEST=0\n        AC_MSG_WARN([Unsupported DPI awareness value \"$wxWITH_DPI_MANIFEST\" ignored.])\nesac\n\ndnl ar command\ndnl   defines AR with the appropriate command\ndnl\ndnl For Sun CC AC_BAKEFILE below sets AR to the compiler itself.\nif test \"x$SUNCXX\" != xyes; then\n    AC_CHECK_TOOL(AR, ar)\n    if test \"x$AR\" = \"x\" ; then\n        AC_MSG_ERROR([ar is needed to build wxWidgets])\n    fi\nfi\n\ndnl ---------------------------------------------------------------------------\ndnl Mac-specific SDK/architectures checks\ndnl ---------------------------------------------------------------------------\n\ndnl If we modify compiler or compiler flags variables in non-trivial way (e.g.\ndnl by specifying the non-default architecture to use), we need to export them\ndnl after doing it, so that sub-configure scripts use the same values too.\nexport_compiler_flags=no\n\ndnl Note that some checks here are OS-specific, and need to be done for any\ndnl port, while others are wxOSX-specific and are performed only for it inside\ndnl another test below.\nif test \"$USE_DARWIN\" = 1; then\n\nretest_macosx_linking=no\n\nOSX_ARCH_OPTS=\"\"\n\ndnl Deal with architecture selection. By default, we compile for the current\ndnl architecture, whatever it is. With --enable-universal_binary the list of\ndnl architectures can be explicitly specified. If it isn't, we compile for all\ndnl supported ones.\nif test \"x$wxUSE_UNIVERSAL_BINARY\" != xno ; then\n    if test \"x$wxUSE_MAC_ARCH\" != xno; then\n        AC_MSG_WARN([--enable-macosx_arch is ignored when --enable-universal_binary is used.])\n    fi\n\n    if test \"x$wxUSE_UNIVERSAL_BINARY\" != xyes; then\n        OSX_ARCH_OPTS=$wxUSE_UNIVERSAL_BINARY\n    else dnl Use all architectures supported\n        OSX_ARCH_OPTS=\"i386\"\n        if test \"$wxUSE_OSX_COCOA\" = 1; then\n            OSX_ARCH_OPTS=\"$OSX_ARCH_OPTS,x86_64\"\n        fi\n    fi\n\n    AC_MSG_CHECKING([for architectures to use in universal binary])\n    AC_MSG_RESULT([$OSX_ARCH_OPTS])\n\n    dnl NOTE: Only the compiler driver needs arch flags.  The link editor\n    dnl is incapable of using them but the compiler driver (which we use\n    dnl as LD when building dynamic libraries) uses them to invoke the\n    dnl real ld multiple times.  If we moved to libtool -dynamic we would\n    dnl need no arch flags because libtool automatically invokes ld for\n    dnl every architecture found in the fat input files.\n    dnl\n    dnl For static library builds, AR/RANLIB automatically create proper\n    dnl fat archives although AR is unable to update them once RANLIB has\n    dnl made them into proper fat archives.  Fortunately, our link process\n    dnl simply removes the .a file before using ar to create a new one.\n    dnl If we did move to libtool -static we still wouldn't need arch flags\n    dnl because libtool automatically figures it out based on input.\n    retest_macosx_linking=yes\nelse\n    if test \"x$wxUSE_MAC_ARCH\" != xno; then\n        OSX_ARCH_OPTS=$wxUSE_MAC_ARCH\n    fi\nfi\n\nif test \"x$OSX_ARCH_OPTS\" != \"x\"; then\n    dnl Check if there is more than one architecture\n    if echo $OSX_ARCH_OPTS | grep -q \",\"; then\n        AC_MSG_WARN([Disabling dependency tracking due to universal binary build.])\n        disable_macosx_deps=yes\n\n        if test \"x$wxUSE_PCH\" = \"xyes\"; then\n            dnl HACK: PCH could be made to work by precompiling for each architecture into separate directories\n            dnl and including all architecture directories with each compiler invocation.\n            dnl That would require a major rework of Bakefile and at the same time it would be nice to have\n            dnl Objective-C++ precompiled headers.\n            AC_MSG_WARN([Disabling precompiled headers due to universal binary build.])\n            wxUSE_PCH=no\n        fi\n    fi\n\n    OSX_ARCH_OPTS=`echo $OSX_ARCH_OPTS | sed -e 's/^/-arch /' -e 's/,/ -arch /g'`\n\n    CXXFLAGS=\"$OSX_ARCH_OPTS $CXXFLAGS\"\n    CFLAGS=\"$OSX_ARCH_OPTS $CFLAGS\"\n    OBJCXXFLAGS=\"$OSX_ARCH_OPTS $OBJCXXFLAGS\"\n    OBJCFLAGS=\"$OSX_ARCH_OPTS $OBJCFLAGS\"\n    LDFLAGS=\"$OSX_ARCH_OPTS $LDFLAGS\"\n\n    export_compiler_flags=yes\nfi\n\nif test \"$wxUSE_MAC\" = 1; then\n\ndnl Set up the Mac OS X SDK.  We do this early so configure tests will occur\ndnl with the SDK in place.\ndnl NOTE: We clobber wxUSE_MACOSX_SDK with the SDK path\nif test \"x$wxUSE_MACOSX_SDK\" = \"xno\"; then\n    wxUSE_MACOSX_SDK=\nelif test \"x$wxUSE_MACOSX_SDK\" = \"xyes\"; then\n    dnl Try to use the default SDK.\n    wxUSE_MACOSX_SDK=\"`xcode-select -p`/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk\"\nelif test \"x$wxUSE_MACOSX_SDK\" != \"x\"; then\n    macosx_sdk_specified=yes\nfi\n\n\nif test \"x$wxUSE_MACOSX_SDK\" != \"x\"; then\n    AC_MSG_CHECKING([for SDK directory $wxUSE_MACOSX_SDK])\n    if ! test -d \"$wxUSE_MACOSX_SDK\"; then\n        AC_MSG_FAILURE([not found])\n    else\n        AC_MSG_RESULT([exists])\n    fi\n    dnl CC and CXX will have these flags added below, after the compiler has been chosen\n    MACOSX_SDK_OPTS=\"-isysroot $wxUSE_MACOSX_SDK\"\n    retest_macosx_linking=yes\n    dnl NOTE: When libtool is used in lieu of AR/RANLIB (i.e. in static mode)\n    dnl the syslibroot makes no difference.  We aren't using libtool now but\n    dnl if we ever did, be aware that you don't need to worry about it.\nfi\n\nfi dnl wxUSE_MAC\n\ndnl Set up the deployment target\ndnl No   : Don't specify a min version even if using an SDK\ndnl Yes  : Use the version from the SDK if used, otherwise same as no\ndnl Param: Use the specified version\nif test \"x$wxUSE_MACOSX_VERSION_MIN\" = \"xno\"; then\n    wxUSE_MACOSX_VERSION_MIN=\nelif test \"x$wxUSE_MACOSX_VERSION_MIN\" = \"xyes\"; then\n    if test \"x$wxUSE_MACOSX_SDK\" != \"x\"; then\n        AC_MSG_CHECKING([SDK deployment version])\ndnl We need to quote the next line where we don't need macros and do need [] in the regex\n[\n        MACOSX_SDK_PLIST_VERSION_MIN=`defaults read \"$wxUSE_MACOSX_SDK/SDKSettings\" buildSettings | grep '^ *\"\\{0,1\\}MACOSX_DEPLOYMENT_TARGET\"\\{0,1\\} *= *\"\\{0,1\\}[^\"]*\"\\{0,1\\}; *$' | sed 's/^ *\"\\{0,1\\}MACOSX_DEPLOYMENT_TARGET\"\\{0,1\\} *= *\"\\{0,1\\}\\([^\"]*\\)\"\\{0,1\\} *; *$/\\1/'`\n]\n        # If that failed, try again with the new key\n        if test \"x$MACOSX_SDK_PLIST_VERSION_MIN\" = \"x\"; then\n[\n            MACOSX_SDK_PLIST_VERSION_MIN=`defaults read \"$wxUSE_MACOSX_SDK/SDKSettings\" DefaultProperties | grep '^ *\"\\{0,1\\}MACOSX_DEPLOYMENT_TARGET\"\\{0,1\\} *= *\"\\{0,1\\}[^\"]*\"\\{0,1\\}; *$' | sed 's/^ *\"\\{0,1\\}MACOSX_DEPLOYMENT_TARGET\"\\{0,1\\} *= *\"\\{0,1\\}\\([^\"]*\\)\"\\{0,1\\} *; *$/\\1/'`\n]\n        fi\n\n        if test \"x$MACOSX_SDK_PLIST_VERSION_MIN\" != \"x\"; then\n            wxUSE_MACOSX_VERSION_MIN=$MACOSX_SDK_PLIST_VERSION_MIN\n            AC_MSG_RESULT([$wxUSE_MACOSX_VERSION_MIN])\n        else\n            AC_MSG_WARN([Could not determine deployment target from SDKSettings.plist])\n            wxUSE_MACOSX_VERSION_MIN=\n        fi\n    else\n        wxUSE_MACOSX_VERSION_MIN=\n    fi\nelif test \"x$wxUSE_MACOSX_VERSION_MIN\" = \"x\"; then\n    wxUSE_MACOSX_VERSION_MIN=10.10\nelse\n    macosx_minver_specified=yes\nfi\n\nif test \"x$MACOSX_SDK_OPTS\" != \"x\"; then\n    eval \"CPP=\\\"$CPP $MACOSX_SDK_OPTS\\\"\"\n    eval \"CC=\\\"$CC $MACOSX_SDK_OPTS\\\"\"\n    eval \"CXX=\\\"$CXX $MACOSX_SDK_OPTS\\\"\"\n    eval \"LD=\\\"$LD $MACOSX_SDK_OPTS\\\"\"\n    retest_macosx_linking=yes\nfi\n\nif test \"x$wxUSE_MACOSX_VERSION_MIN\" != \"x\"; then\n    if test \"$wxUSE_OSX_IPHONE\" = 1; then\n        MACOSX_VERSION_MIN_OPTS=\"-miphoneos-version-min=$wxUSE_MACOSX_VERSION_MIN\"\n    else\n        MACOSX_VERSION_MIN_OPTS=\"-mmacosx-version-min=$wxUSE_MACOSX_VERSION_MIN\"\n    fi\n    eval \"CPP=\\\"$CPP $MACOSX_VERSION_MIN_OPTS\\\"\"\n    eval \"CC=\\\"$CC $MACOSX_VERSION_MIN_OPTS\\\"\"\n    eval \"CXX=\\\"$CXX $MACOSX_VERSION_MIN_OPTS\\\"\"\n    eval \"LD=\\\"$LD $MACOSX_VERSION_MIN_OPTS\\\"\"\n    retest_macosx_linking=yes\nfi\n\ndnl If either an SDK or a version option was added, make sure that we can\ndnl still compile and link both C and C++.  If we didn't do this, then most\ndnl of the remaining tests would fail.\nif test \"x$retest_macosx_linking\" = \"xyes\"; then\n    if test \"x$macosx_sdk_specified\" = \"xyes\"; then\n        error_message=\"try using --with-macosx-sdk with a different SDK or \\\nomitting it entirely to use the default one.\"\n    elif test \"x$macosx_minver_specified\" = \"xyes\"; then\n        error_message=\"try using --with-macosx-version-min with a different OS \\\nversion or omitting it entirely.\"\n    else\n        error_message=\"check that command line tools from Xcode 7.2.1 or later are installed.\"\n    fi\n\n    error_message=\"building C++ programs doesn't work, $error_message\"\n\n    AC_LANG_PUSH(C)\n    AC_MSG_CHECKING([if C compiler ($CC) works with SDK/version options])\n    AC_TRY_LINK([],[],[AC_MSG_RESULT([yes])],[AC_MSG_FAILURE([$error_message])])\n    AC_LANG_POP()\n\n    AC_LANG_PUSH(C++)\n    AC_MSG_CHECKING([if C++ compiler ($CXX) works with SDK/version options])\n    AC_TRY_LINK(\n        [\n            #include <Availability.h>\n        ],\n        [\n            #if defined(__MAC_OS_X_VERSION_MIN_REQUIRED)\n            #if __MAC_OS_X_VERSION_MIN_REQUIRED < 101000\n            #error macOS versions < 10.10 are not supported.\n            #endif\n            #if __MAC_OS_X_VERSION_MAX_ALLOWED < 101100\n            #error macOS SDK version is too low, 10.11 or later is required.\n            #endif\n            #elif !defined(__IPHONE_OS_VERSION_MIN_REQUIRED)\n            #error unrecognized platform\n            #endif\n        ],\n        [AC_MSG_RESULT([yes])],\n        [AC_MSG_FAILURE([$error_message])]\n    )\n    AC_LANG_POP()\n\n    dnl If we are here, we must have set retest_macosx_linking to yes above,\n    dnl i.e. we must have modified compiler/linker variables to set\n    dnl SDK/availability options, and so we must export them to build any\n    dnl bundled third party libraries with them too.\n    export_compiler_flags=yes\nfi\n\nfi dnl USE_DARWIN\n\ncase \"${host}\" in\n\n    dnl The other BSD's should probably go in here too, since this is\n    dnl to workaround a strange static lib BSDism.\n    dnl Mac OS X install seems to ignore -p option...\n    *-*-darwin* )\n        INSTALL_PROGRAM=\"cp -fp\"\n        INSTALL_DATA=\"cp -fp\"\n        ;;\n    *)\n        ;;\nesac\n\ndnl ------------------------------------------------------------------------\ndnl Platform specific tests\ndnl ------------------------------------------------------------------------\n\nif test \"$USE_LINUX\" = 1 -o \"$USE_GNU\" = 1; then\n    dnl While g++ predefines _GNU_SOURCE by default, gcc does not, so do it\n    dnl explicitly to ensure that the tests done below using C compiler\n    dnl succeed, otherwise things like pthread_mutexattr_settype() (and many\n    dnl others) wouldn't be detected.\n    AC_DEFINE(_GNU_SOURCE)\n\n    dnl For non-g++ compilers (including gcc, as mentioned above) we need to\n    dnl add this flag explicitly when building our own code later too.\n    GNU_SOURCE_FLAG=\"-D_GNU_SOURCE\"\n    CFLAGS=\"$GNU_SOURCE_FLAG $CFLAGS\"\nfi\n\nif test \"x$USE_AIX\" = \"x1\"; then\n    dnl xlC needs -qunique under AIX so that one source file can be\n    dnl compiled to multiple object files and safely linked together.\n    if test \"x$XLCXX\" = \"xyes\"; then\n        CXXFLAGS=\"-qunique $CXXFLAGS\"\n    fi\n\n    dnl AIX sys/timer.h header #defines func_data as t_union.data breaking the\n    dnl compilation of GTK+ headers that use func_data as parameter name in\n    dnl several places. We could work around this by inserting \"#undef\n    dnl func_data\" in the code but IBM provides a possibility to disable this\n    dnl #define by pre-defining the symbol below and this seems to be simpler.\n    dnl And if we have any problems because of it we can always remove it and\n    dnl use the #undef approach.\n    CPPFLAGS=\"-D_LINUX_SOURCE_COMPAT $CPPFLAGS\"\nfi\n\ndnl This case is for PowerPC OS X vs. everything else\ncase \"${host}\" in\n  powerpc-*-darwin* )\n    AC_MSG_CHECKING([if __POWERPC__ is already defined])\n    AC_TRY_COMPILE([],[#ifndef __POWERPC__\n        choke me for lack of PowerPC\n#endif\n],\n        [AC_MSG_RESULT([yes])],\n        [AC_MSG_RESULT([no])\n        AC_DEFINE(__POWERPC__)\n    ])\n  ;;\nesac\n\ndnl This case is for OS X vs. everything else\ncase \"${host}\" in\n  *-*-darwin* )\n    AC_MSG_CHECKING([if CoreFoundation/CFBase.h is usable])\n    AC_TRY_COMPILE([#include <CoreFoundation/CFBase.h>\n],[],\n        [AC_MSG_RESULT([yes])],\n        [AC_MSG_RESULT([no])\n        AC_MSG_CHECKING([if __CF_USE_FRAMEWORK_INCLUDES__ is required])\n        AC_TRY_COMPILE([#define __CF_USE_FRAMEWORK_INCLUDES__\n#include <CoreFoundation/CFBase.h>\n        ],[],\n        [AC_MSG_RESULT([yes])\n        dnl We must use -D so source files that don't include wx/setup.h\n        dnl but do include CFBase will work.\n        CPPFLAGS=\"-D__CF_USE_FRAMEWORK_INCLUDES__ $CPPFLAGS\"],\n        [AC_MSG_FAILURE([no.  CoreFoundation not available.])]\n        )\n        ]\n    )\n  ;;\nesac\n\ndnl Determine whether we want to use Cygwin as Windows or POSIX platform: the\ndnl latter makes more sense for wxGTK/Motif/X11 ports\nwants_win32=0\ndoesnt_want_win32=0\ncase \"${host}\" in\n  *-*-cygwin*)\n      if test \"$wxUSE_MSW\" = 1 ; then\n        wants_win32=1\n      else\n        dnl when we use cygwin compiler with -mno-cygwin option it uses mingw32\n        dnl headers and libraries, so it's Windows-like in this case\n        AC_CACHE_CHECK([if -mno-cygwin is in effect], wx_cv_nocygwin,\n            [\n                AC_TRY_COMPILE(\n                    [],\n                    [\n                        #ifdef __MINGW32__\n                            choke me\n                        #endif\n                    ],\n                    wx_cv_nocygwin=no,\n                    wx_cv_nocygwin=yes\n                )\n            ]\n        )\n\n        if test \"$wx_cv_nocygwin\" = \"yes\"; then\n            wants_win32=1\n        else\n            doesnt_want_win32=1\n        fi\n      fi\n      if test \"$wants_win32\" = 1 ; then\n        BAKEFILE_FORCE_PLATFORM=win32\n      fi\n  ;;\n  *-*-mingw*)\n      wants_win32=1\n  ;;\nesac\n\nif test \"$wxUSE_WINE\" = \"yes\"; then\n    wants_win32=1\n    LDFLAGS_GUI=\"-mwindows\"\nfi\n\ndnl NB: The two tests below are *NOT* mutually exclusive! They should only\ndnl     take effect on Cygwin/Mingw and not other platforms.\nif test \"$wants_win32\" = 1 ; then\n    USE_UNIX=0\n    USE_WIN32=1\n    AC_DEFINE(__WIN32__)\n    AC_DEFINE(__WINDOWS__)\n    AC_DEFINE(__GNUWIN32__)\n    AC_DEFINE(STRICT)\nfi\nif test \"$doesnt_want_win32\" = 1 ; then\n    USE_UNIX=1\n    USE_WIN32=0\nfi\ndnl (end of Windows-only piece)\n\nif test \"$USE_UNIX\" = 1 ; then\n    wxUSE_UNIX=yes\n    AC_DEFINE(__UNIX__)\nfi\n\ndnl Values of these variables shouldn't change any longer from now on, we\ndnl export them to ensure they're picked up by sub-configure scripts if they\ndnl were modified above.\nif test \"$export_compiler_flags\" = \"yes\"; then\n    export CC CFLAGS CPP CPPFLAGS CXX CXXFLAGS LDD LDFLAGS OBJCFLAGS OBJCXXFLAGS\n\n    if test \"$cache_file\" != \"/dev/null\"; then\n        dnl We must do this to avoid fatal errors due to inconsistent build\n        dnl environment from sub-configure scripts. We could do it just before\n        dnl actually running them, but doing it here is simpler and more robust\n        dnl (e.g. in case we add other sub-configure scripts later).\n        AC_MSG_WARN([Disabling caching due to a change in compiler options.])\n        cache_file=\"/dev/null\"\n    fi\nfi\n\ndnl ------------------------------------------------------------------------\ndnl Check for headers\ndnl ------------------------------------------------------------------------\n\ndnl Note: non-empty last parameter makes check compile-only,\ndnl   skipping worthless preprocessing check\nAC_CHECK_HEADERS(langinfo.h wchar.h,,, [AC_INCLUDES_DEFAULT])\n\ndnl maybe wchar_t is in wcstr.h if we don't have wchar.h?\nif test \"$ac_cv_header_wchar_h\" != \"yes\"; then\n    AC_CHECK_HEADERS([wcstr.h],,, [AC_INCLUDES_DEFAULT()])\nfi\n\nif test \"$USE_UNIX\" = 1 ; then\n    dnl POSIX needs this for select(), but old systems don't have it\n    AC_CHECK_HEADERS([sys/select.h],,, [AC_INCLUDES_DEFAULT()])\n\n    dnl Header defining C++ ABI is currently only available with g++ but test\n    dnl for it unconditionally in case it becomes supported by other compilers.\n    AC_LANG_PUSH(C++)\n    AC_CHECK_HEADERS([cxxabi.h],,, [AC_INCLUDES_DEFAULT()])\n    AC_LANG_POP()\nfi\n\ndnl ---------------------------------------------------------------------------\ndnl Checks for compiler characteristics\ndnl ---------------------------------------------------------------------------\n\ndnl defines const to be empty if c-compiler does not support const fully\nAC_C_CONST\ndnl defines inline to a sensible value for the c-compiler\nAC_C_INLINE\n\ndnl check the sizes of integral types (give some reasonable default values for\ndnl cross-compiling)\ndnl   defines the size of certain types of variables in SIZEOF_<TYPE>\nAC_CHECK_SIZEOF(short, 2)\nAC_CHECK_SIZEOF(void *, 4)\nAC_CHECK_SIZEOF(int, 4)\nAC_CHECK_SIZEOF(long, 4)\nAC_CHECK_SIZEOF(size_t, 4)\n\ncase \"${host}\" in\n    arm-*-linux* )\n        AC_CHECK_SIZEOF(long long, 8)\n    ;;\n    *-hp-hpux* )\n        AC_CHECK_SIZEOF(long long, 0)\n        if test \"$ac_cv_sizeof_long_long\" != 0; then\n            dnl HPUX 10.20 headers need this define in order to use long long definitions\n            CPPFLAGS=\"-D_INCLUDE_LONGLONG $CPPFLAGS\"\n        fi\n    ;;\n    * )\n        AC_CHECK_SIZEOF(long long, 0)\nesac\n\ndnl SGI/Irix's stdio.h does not include wchar_t. Mac OS X does not provide\ndnl wchar.h and wchar_t is defined by stdlib.h (GD)\nAC_CHECK_SIZEOF(wchar_t, 0,\n    [\n        /* DJGPP's wchar_t is now a keyword in C++ (still not C though) */\n        #if defined(__DJGPP__) && !( (__GNUC_MINOR__ >= 8 && __GNUC__ == 2 ) || __GNUC__ >= 3 )\n        #  error \"fake wchar_t\"\n        #endif\n        #ifdef HAVE_WCHAR_H\n        #  ifdef __CYGWIN__\n        #    include <stddef.h>\n        #  endif\n        #  include <wchar.h>\n        #endif\n        #ifdef HAVE_STDLIB_H\n        #  include <stdlib.h>\n        #endif\n        #include <stdio.h>\n    ]\n)\nif test \"$ac_cv_sizeof_wchar_t\" = 0; then\n    AC_MSG_ERROR([wxWidgets requires wchar_t support.])\nfi\n\ndnl checks needed to define wxVaCopy\nAC_CACHE_CHECK([for va_copy],\n    wx_cv_func_va_copy,\n    [\n        AC_LANG_PUSH(C++)\n        AC_LINK_IFELSE([\n            AC_LANG_SOURCE([\n                #include <stdarg.h>\n                void foo(char *f, ...)\n                {\n                    va_list ap1, ap2;\n                    va_start(ap1, f);\n                    va_copy(ap2, ap1);\n                    va_end(ap2);\n                    va_end(ap1);\n                }\n                int main()\n                {\n                    foo(\"hi\", 17);\n                    return 0;\n                }])\n            ],\n            wx_cv_func_va_copy=yes,\n            wx_cv_func_va_copy=no\n        )\n        AC_LANG_POP()\n    ]\n)\n\nif test $wx_cv_func_va_copy = \"yes\"; then\n    AC_DEFINE(HAVE_VA_COPY)\nelse\n    dnl try to understand how can we copy va_lists\n    AC_CACHE_CHECK([if va_list can be copied by value],\n        wx_cv_type_va_list_lvalue,\n        [\n            AC_RUN_IFELSE([\n                AC_LANG_SOURCE([\n                    #include <stdarg.h>\n                    int foo(char *f, ...)\n                    {\n                        va_list ap1, ap2;\n                        va_start(ap1, f);\n                        ap2 = ap1;\n                        if ( va_arg(ap1, int) != 17 || va_arg(ap2, int) != 17 )\n                            return 1;\n                        va_end(ap2);\n                        va_end(ap1);\n                        return 0;\n                    }\n                    int main()\n                    {\n                        return foo(\"hi\", 17);\n                    }])\n                ],\n                wx_cv_type_va_list_lvalue=yes,\n                wx_cv_type_va_list_lvalue=no,\n                dnl assume most common case for cross-compiling...\n                wx_cv_type_va_list_lvalue=yes\n            )\n        ]\n    )\n\n    if test $wx_cv_type_va_list_lvalue != \"yes\"; then\n        dnl we suppose that the only thing which can't be copied like this\n        dnl are arrays... only experience will show whether this is really true\n        AC_DEFINE(VA_LIST_IS_ARRAY)\n    fi\nfi\n\ndnl TODO-C++11: remove this, as it won't make sense when C++11 is required\ndnl don't use vararg macros if they're explicitly disabled: this is\ndnl useful if the user code using the library wants to limit itself to standard\ndnl C++ only (e.g. is compiled with g++ -std=c++98)\nif test \"$wxUSE_VARARG_MACROS\" != \"yes\"; then\n    AC_DEFINE(wxNO_VARIADIC_MACROS)\nfi dnl wxUSE_VARARG_MACROS == yes\n\n\ndnl check for large file support\nLARGEFILE_CPPFLAGS=\nAC_SYS_LARGEFILE\nif test \"$ac_cv_sys_file_offset_bits\" = \"64\"; then\n    LARGEFILE_CPPFLAGS=\"-D_FILE_OFFSET_BITS=64\"\nelif test \"$ac_cv_sys_large_files\" = 1; then\n    LARGEFILE_CPPFLAGS=\"-D_LARGE_FILES\"\nfi\n\ndnl we need to define _FILE_OFFSET_BITS or _LARGE_FILES on the compiler command\ndnl line because otherwise the system headers risk being included before\ndnl wx/defs.h which defines these constants leading to inconsistent\ndnl sizeof(off_t) in different source files of the same program and linking\ndnl problems\nif test -n \"$LARGEFILE_CPPFLAGS\"; then\n    WXCONFIG_CPPFLAGS=\"$WXCONFIG_CPPFLAGS $LARGEFILE_CPPFLAGS\"\n\n    dnl We get \"Large Files (ILP32) not supported in strict ANSI mode.\"\n    dnl #error from HP standard headers unless __STDC_EXT__ is defined.\n    dnl The compiler should define it automatically, but some old g++\n    dnl versions don't define it, so test and add it if necessary. AFAIK\n    dnl the problem only affects the C++ compiler so it is added to\n    dnl CXXFLAGS only.\n    if test \"$USE_HPUX\" = 1 -a \"$GXX\" = \"yes\"; then\n        AC_CACHE_CHECK(\n            [if -D__STDC_EXT__ is required],\n            wx_cv_STDC_EXT_required,\n            [\n                AC_LANG_PUSH(C++)\n                AC_TRY_COMPILE(\n                    [],\n                    [\n                        #ifndef __STDC_EXT__\n                            choke me\n                        #endif\n                    ],\n                    wx_cv_STDC_EXT_required=no,\n                    wx_cv_STDC_EXT_required=yes\n                )\n                AC_LANG_POP()\n            ]\n        )\n        if test \"x$wx_cv_STDC_EXT_required\" = \"xyes\"; then\n            WXCONFIG_CXXFLAGS=\"$WXCONFIG_CXXFLAGS -D__STDC_EXT__\"\n        fi\n    fi\nfi\n\ndnl AC_FUNC_FSEEKO sets HAVE_FSEEKO and $ac_cv_sys_largefile_source\ndnl\ndnl it may be affected by large file flags (this happens under HP-UX 11 for\ndnl example) so set them before using it and also use C++ to ensure that we get\ndnl errors, not warnings, about the missing functions\nAC_LANG_PUSH(C++)\nold_CPPFLAGS=\"$CPPFLAGS\"\nCPPFLAGS=\"$CPPFLAGS $LARGEFILE_CPPFLAGS\"\nAC_FUNC_FSEEKO\nCPPFLAGS=\"$old_CPPFLAGS\"\nAC_LANG_POP()\nif test \"$ac_cv_sys_largefile_source\" != no; then\n    WXCONFIG_CPPFLAGS=\"$WXCONFIG_CPPFLAGS -D_LARGEFILE_SOURCE=$ac_cv_sys_largefile_source\"\nfi\n\ndnl check for bytesex stuff (don't use AC_C_BIGENDIAN to allow cross-compiling)\nWX_C_BIGENDIAN\n\ndnl With Sun CC, temporaries have block scope by default. This flag is needed\ndnl to get the expression scope behaviour that conforms to the standard.\nif test \"x$SUNCXX\" = xyes; then\n    CXXFLAGS=\"-features=tmplife $GNU_SOURCE_FLAG $CXXFLAGS\"\nfi\n\ndnl Sun X11 headers are (still, in 2005!) non-ANSI and the best they could do\ndnl was to hack their C++ compiler to accept them silently -- but C compiler\ndnl still spits out dozens of warnings for each X include file, so suppress\ndnl them\nif test \"x$SUNCC\" = xyes; then\n    CFLAGS=\"-erroff=E_NO_EXPLICIT_TYPE_GIVEN $CFLAGS\"\nfi\n\ndnl SGI mipsPro compiler version 7.4.4 and later (and maybe some earlier\ndnl versions too but it's known that 7.4.2 doesn't give this warning but does\ndnl instead warn about \"unknown warning number 3970\" which explains that we\ndnl don't want to do this for it) gives this warning for \"conversion from\ndnl pointer to same-sized integral type\" even when there is an explicit cast\ndnl and as there is no way to turn it off and there are hundreds of these\ndnl warnings in wx sources, just turn it off for now\ndnl\ndnl a better long term solution would be to use #pragma set/reset woff in\ndnl wxPtrToUInt() and use it instead of casts elsewhere\nif test \"x$SGICC\" = \"xyes\"; then\n    AC_CACHE_CHECK([if cc version is 7.4.4 or greater],\n        wx_cv_prog_sgicc744,\n        [\n            AC_TRY_COMPILE([],\n                [\n                    #if _SGI_COMPILER_VERSION >= 744\n                    chock me: mipsPro is 7.4.4 or later\n                    #endif\n                ],\n                wx_cv_prog_sgicc744=no,\n                wx_cv_prog_sgicc744=yes\n            )\n        ]\n    )\n\n    if test \"x$wx_cv_prog_sgicc744\" = \"xyes\"; then\n        CFLAGS=\"-woff 3970 $CFLAGS\"\n    fi\nfi\nif test \"x$SGICXX\" = \"xyes\"; then\n    AC_CACHE_CHECK([if CC version is 7.4.4 or greater],\n        wx_cv_prog_sgicxx744,\n        [\n            AC_LANG_PUSH(C++)\n            AC_TRY_COMPILE([],\n                [\n                    #if _SGI_COMPILER_VERSION >= 744\n                    chock me: mipsPro is 7.4.4 or later\n                    #endif\n                ],\n                wx_cv_prog_sgicxx744=no,\n                wx_cv_prog_sgicxx744=yes\n            )\n            AC_LANG_POP()\n        ]\n    )\n\n    if test \"x$wx_cv_prog_sgicxx744\" = \"xyes\"; then\n        CXXFLAGS=\"-woff 3970 $CXXFLAGS\"\n    fi\nfi\n\ndnl HP-UX c89/aCC compiler warnings\nif test \"x$HPCC\" = \"xyes\"; then\n    dnl 2011: \"unrecognized preprocessor directive\": nice warning but it's given\n    dnl       even for directives inside #if which is not true (i.e. which are\n    dnl       used for other compilers/OS) and so we have no way to get rid of it\n    dnl 2450: \"long long is non standard\" -- yes, we know\n    CFLAGS=\"+W 2011,2450 $CFLAGS\"\nfi\nif test \"x$HPCXX\" = \"xyes\"; then\n    dnl 2340: \"value copied to temporary, reference to temporary used\": very\n    dnl       painful as triggered by any occurrence of user-defined conversion\n    dnl 4232: \"conversion from 'Foo *' to a more strictly aligned type 'Bar *'\n    dnl       may cause misaligned access\": this might indicate a real problem\n    dnl       but any use of GTK+ cast macros results in it so it's unusable\n    dnl       for wxGTK code\n    CXXFLAGS=\"+W 2340,4232 $CXXFLAGS\"\nfi\n\ndnl DEC/Compaq/HP cxx warnings\nif test \"x$COMPAQCXX\" = \"xyes\"; then\n    dnl -w0 enables all warnings, then we disable some of them:\n    dnl basclsnondto: base class dtor non virtual (sometimes we do want this)\n    dnl unrimpret:  \"end of routine block may be unreachable\" is given for\n    dnl             every \"if ( ) return ...; else return ...;\"\n    dnl intconlosbit: \"conversion to integral type of smaller size could lose\n    dnl               data\" this is a useful warning but there are too many of\n    dnl               them for now\n    CXXFLAGS=\"-w0 -msg_disable basclsnondto,unrimpret,intconlosbit\"\nfi\n\ndnl The checks below are for ancient compilers and are unnecessary when using\ndnl C++11, but we still need to define the symbols that would have been defined\ndnl by them if we did run them.\nif test \"$HAVE_CXX11\" = \"1\" ; then\n\nAC_DEFINE(HAVE_STD_WSTRING)\nAC_DEFINE(HAVE_STD_STRING_COMPARE)\nAC_DEFINE(HAVE_STD_UNORDERED_MAP)\nAC_DEFINE(HAVE_STD_UNORDERED_SET)\nAC_DEFINE(HAVE_TYPE_TRAITS)\n\nelse dnl Not using C++11, so we do need to run the checks.\n\ndnl the next few tests are all for C++ features and so need to be done using\ndnl C++ compiler\nAC_LANG_PUSH(C++)\n\ndnl check for std::string or std::wstring\nif test \"$wxUSE_STD_STRING\" = \"yes\" -o \"$wxUSE_STL\" = \"yes\"; then\n    if test \"$wxUSE_UNICODE\" = \"yes\"; then\n        std_string=\"std::wstring\"\n        char_type=\"wchar_t\"\n    else\n        std_string=\"std::string\"\n        char_type=\"char\"\n    fi\n\n    dnl check if <string> declares std::[w]string\n    AC_CACHE_CHECK([for $std_string in <string>],\n        wx_cv_class_stdstring,\n        [\n            AC_TRY_COMPILE([#include <string>],\n                [$std_string foo;],\n                wx_cv_class_stdstring=yes,\n                wx_cv_class_stdstring=no\n            )\n        ]\n    )\n\n    if test \"$wx_cv_class_stdstring\" = yes; then\n        if test \"$wxUSE_UNICODE\" = \"yes\"; then\n            AC_DEFINE(HAVE_STD_WSTRING)\n        fi\n        dnl we don't need HAVE_STD_STRING, we just suppose it's available if\n        dnl wxUSE_STD_STRING==yes\n    else\n        AC_CACHE_CHECK([if std::basic_string<$char_type> works],\n            wx_cv_class_stdbasicstring,\n            [\n                AC_TRY_COMPILE([\n                    #ifdef HAVE_WCHAR_H\n                    #  ifdef __CYGWIN__\n                    #    include <stddef.h>\n                    #  endif\n                    #  include <wchar.h>\n                    #endif\n                    #ifdef HAVE_STDLIB_H\n                    #  include <stdlib.h>\n                    #endif\n                    #include <stdio.h>\n                    #include <string>\n                    ],\n                    [std::basic_string<$char_type> foo;\n                     const $char_type* dummy = foo.c_str();],\n                    wx_cv_class_stdbasicstring=yes,\n                    wx_cv_class_stdbasicstring=no\n                )\n            ]\n        )\n\n        if test \"$wx_cv_class_stdbasicstring\" != yes; then\n            if test \"$wxUSE_STL\" = \"yes\"; then\n                AC_MSG_ERROR([Can't use --enable-stl without $std_string or std::basic_string<$char_type>])\n            elif test \"$wxUSE_STD_STRING\" = \"yes\"; then\n                AC_MSG_ERROR([Can't use --enable-std_string without $std_string or std::basic_string<$char_type>])\n            else\n                AC_MSG_WARN([No $std_string or std::basic_string<$char_type>, switching to --disable-std_string])\n                wxUSE_STD_STRING=no\n            fi\n        fi\n    fi\nfi\n\nif test \"$wxUSE_STD_IOSTREAM\" = \"yes\"; then\n    AC_CHECK_TYPES([std::istream, std::ostream],,\n                   [wxUSE_STD_IOSTREAM=no],\n                   [#include <iostream>])\n\n    if test \"$wxUSE_STD_IOSTREAM\" != \"yes\"; then\n        if test \"$wxUSE_STD_IOSTREAM\" = \"yes\"; then\n            AC_MSG_ERROR([Can't use --enable-std_iostreams without std::istream and std::ostream])\n        else\n            AC_MSG_WARN([No std::iostreams, switching to --disable-std_iostreams])\n        fi\n    fi\nfi\n\nif test \"$wxUSE_STL\" = \"yes\"; then\n    dnl check for basic STL functionality\n    AC_CACHE_CHECK([for basic STL functionality],\n        wx_cv_lib_stl,\n        [AC_TRY_COMPILE([#include <string>\n            #include <functional>\n            #include <algorithm>\n            #include <vector>\n            #include <list>],\n            [std::vector<int> moo;\n             std::list<int> foo;\n             std::vector<int>::iterator it =\n                 std::find_if(moo.begin(), moo.end(),\n                              std::bind2nd(std::less<int>(), 3));],\n            wx_cv_lib_stl=yes,\n            wx_cv_lib_stl=no\n        )]\n    )\n\n    if test \"$wx_cv_lib_stl\" != yes; then\n         AC_MSG_ERROR([Can't use --enable-stl as basic STL functionality is missing])\n    fi\n\n    dnl check for compliant std::string::compare\n    AC_CACHE_CHECK([for compliant std::string::compare],\n        wx_cv_func_stdstring_compare,\n        [AC_TRY_COMPILE([#include <string>],\n            [std::string foo, bar;\n            foo.compare(bar);\n            foo.compare(1, 1, bar);\n            foo.compare(1, 1, bar, 1, 1);\n            foo.compare(\"\");\n            foo.compare(1, 1, \"\");\n            foo.compare(1, 1, \"\", 2);],\n            wx_cv_func_stdstring_compare=yes,\n            wx_cv_func_stdstring_compare=no\n        )]\n    )\n\n    if test \"$wx_cv_func_stdstring_compare\" = yes; then\n        AC_DEFINE(HAVE_STD_STRING_COMPARE)\n    fi\n\n    if test \"$wx_cv_class_gnuhashmapset\" = yes; then\n         AC_DEFINE(HAVE_EXT_HASH_MAP)\n         AC_DEFINE(HAVE_GNU_CXX_HASH_MAP)\n    fi\n\n    AC_CHECK_HEADER([unordered_map],\n        [AC_CACHE_CHECK([for unordered_map and unordered_set in std],\n            wx_cv_class_stdunorderedmapset,\n            [AC_TRY_COMPILE([#include <unordered_map>\n                #include <unordered_set>],\n                [std::unordered_map<double*, char*> test1;\n                 std::unordered_set<char*> test2;],\n                wx_cv_class_stdunorderedmapset=yes,\n                wx_cv_class_stdunorderedmapset=no)\n            ]\n        )],\n        [],\n        [ ]\n    )\n\n    if test \"$wx_cv_class_stdunorderedmapset\" = yes; then\n         AC_DEFINE(HAVE_STD_UNORDERED_MAP)\n         AC_DEFINE(HAVE_STD_UNORDERED_SET)\n    else\n        AC_CHECK_HEADER([tr1/unordered_map],\n            [AC_CACHE_CHECK([for unordered_map and unordered_set in std::tr1],\n                wx_cv_class_tr1unorderedmapset,\n                [AC_TRY_COMPILE([#include <tr1/unordered_map>\n                    #include <tr1/unordered_set>],\n                    [std::tr1::unordered_map<double*, char*> test1;\n                     std::tr1::unordered_set<char*> test2;\n            #if defined(__GNUC__) && (__GNUC__==4) && (__GNUC_MINOR__<2)\n            #error can't use unordered_{map,set} with gcc-4.[01]: http://gcc.gnu.org/PR24389\n            #endif],\n                    wx_cv_class_tr1unorderedmapset=yes,\n                    wx_cv_class_tr1unorderedmapset=no)\n                ]\n            )],\n            [],\n            [ ]\n        )\n\n        if test \"$wx_cv_class_tr1unorderedmapset\" = yes; then\n            AC_DEFINE(HAVE_TR1_UNORDERED_MAP)\n            AC_DEFINE(HAVE_TR1_UNORDERED_SET)\n        else\n            dnl check for hash_map and hash_set headers\n            AC_CHECK_HEADER([hash_map],\n                [AC_CACHE_CHECK([for std::hash_map and hash_set],\n                    wx_cv_class_stdhashmapset,\n                    [AC_TRY_COMPILE([#include <hash_map>\n                        #include <hash_set>],\n                        [std::hash_map<double*, char*, std::hash<double*>, std::equal_to<double*> > test1;\n                         std::hash_set<char*, std::hash<char*>, std::equal_to<char*> > test2;],\n                        wx_cv_class_stdhashmapset=yes,\n                        wx_cv_class_stdhashmapset=no)\n                    ]\n                )],\n                [],\n                [ ]\n            )\n\n            if test \"$wx_cv_class_stdhashmapset\" = yes; then\n                AC_DEFINE(HAVE_HASH_MAP)\n                AC_DEFINE(HAVE_STD_HASH_MAP)\n            fi\n\n            AC_CHECK_HEADER([ext/hash_map],\n                [AC_CACHE_CHECK([for GNU hash_map and hash_set],\n                    wx_cv_class_gnuhashmapset,\n                    [AC_TRY_COMPILE([#include <ext/hash_map>\n                        #include <ext/hash_set>],\n                        [__gnu_cxx::hash_map<double*, char*, __gnu_cxx::hash<double*>, std::equal_to<double*> > test1;\n                         __gnu_cxx::hash_set<char*, __gnu_cxx::hash<char*>, std::equal_to<char*> > test2;],\n                        wx_cv_class_gnuhashmapset=yes,\n                        wx_cv_class_gnuhashmapset=no)\n                    ]\n                )],\n                [],\n                [ ]\n            )\n\n        fi\n    fi\nfi\n\nAC_CHECK_HEADERS([type_traits tr1/type_traits], break, [], [AC_INCLUDES_DEFAULT()])\n\nfi dnl End of pre-C++11 only checks section\n\ndnl check for atomic operations builtins for wx/atomic.h:\nWX_ATOMIC_BUILTINS\n\ndnl pop C++\nAC_LANG_POP()\n\ndnl ---------------------------------------------------------------------------\ndnl Define search path for includes and libraries: all headers and libs will be\ndnl looked for in all directories of this path\ndnl ---------------------------------------------------------------------------\n\ndnl Notice that /usr/include should *not* be in this list, otherwise it breaks\ndnl compilation on Solaris/AIX/... with gcc because standard (non ANSI C)\ndnl headers are included instead of the \"fixed\" (ANSI-fied) gcc ones.\ndnl\ndnl Also try to put all directories which may contain X11R6 before those which\ndnl may contain X11R5/4 - we want to use R6 on machines which have both!\ndnl\ndnl In the same vein. Motif 2.1 should be tried before Motif 1.2 for the\ndnl systems which have both (AIX 4.x does)\nSEARCH_INCLUDE=\"\\\n    /usr/local/include        \\\n    /usr/local/X11/include    \\\n    /usr/local/include/X11    \\\n    /usr/local/X11R7/include  \\\n    /usr/local/X11R6/include  \\\n    /usr/local/include/X11R7  \\\n    /usr/local/include/X11R6  \\\n                              \\\n    /usr/Motif-2.1/include    \\\n    /usr/Motif-1.2/include    \\\n    /usr/include/Motif1.2     \\\n                              \\\n    /usr/dt/include           \\\n    /usr/openwin/include      \\\n                              \\\n    /usr/include/Xm           \\\n                              \\\n    /usr/X11R7/include        \\\n    /usr/X11R6/include        \\\n    /usr/X11R6.4/include      \\\n                              \\\n    /usr/include/X11R7        \\\n    /usr/include/X11R6        \\\n                              \\\n    /usr/X11/include          \\\n    /usr/include/X11          \\\n                              \\\n    /usr/XFree86/include/X11  \\\n    /usr/pkg/include          \\\n                              \\\n    /usr/local/X1R5/include  \\\n    /usr/local/include/X11R5  \\\n    /usr/X11R5/include        \\\n    /usr/include/X11R5        \\\n                              \\\n    /usr/local/X11R4/include  \\\n    /usr/local/include/X11R4  \\\n    /usr/X11R4/include        \\\n    /usr/include/X11R4        \\\n                              \\\n    /usr/openwin/share/include\"\n\ndnl try to find out the standard lib locations for the systems with multiple\ndnl ABIs\nAC_MSG_CHECKING([for libraries directories])\n\ncase \"${host}\" in\n    *-*-irix6* )\n        AC_CACHE_VAL(\n            wx_cv_std_libpath,\n            [\n                for d in WX_STD_LIBPATH(); do\n                    for e in a so sl dylib dll.a; do\n                        libc=\"$d/libc.$e\"\n                        if test -f $libc; then\n                            save_LIBS=\"$LIBS\"\n                            LIBS=\"$libc\"\n                            AC_LINK_IFELSE([\n                                    AC_LANG_SOURCE([int main() { return 0; }])\n                                ],\n                                wx_cv_std_libpath=`echo $d | sed s@/usr/@@`)\n                            LIBS=\"$save_LIBS\"\n                            if test \"x$wx_cv_std_libpath\" != \"x\"; then\n                                break 2\n                            fi\n                        fi\n                    done\n                done\n            ]\n        )\n        ;;\n\n    *-*-solaris2* )\n        dnl use ../lib or ../lib/64 depending on the size of void*\n        if test \"$ac_cv_sizeof_void_p\" = 8 -a -d \"/usr/lib/64\"; then\n            wx_cv_std_libpath=\"lib/64\"\n        fi\n        ;;\n\n    *-*-linux* )\n        dnl Recent Debian versions (as of 2011) use new approach to multiarch\n        dnl and put the libraries under /usr/lib/arch-linux-gnu. Annoyingly,\n        dnl \"arch\" here is not `uname -m` because it is \"i386\" even when uname\n        dnl returns e.g. \"i686\". So we need to test for it explicitly.\n        if test \"$ac_cv_sizeof_void_p\" = 8; then\n            if test -d \"/usr/lib/`uname -m`-linux-gnu\"; then\n                wx_cv_std_libfullpath=\"/usr/lib/`uname -m`-linux-gnu\"\n            elif test -d \"/usr/lib64\" -a ! -h \"/usr/lib64\"; then\n                wx_cv_std_libpath=\"lib64\"\n            fi\n        else\n            case \"${host}\" in\n                i*86-*-linux* )\n                    if test -d '/usr/lib/i386-linux-gnu'; then\n                        wx_cv_std_libfullpath='/usr/lib/i386-linux-gnu'\n                    fi\n            esac\n        fi\n\n        dnl And on top of all this, some packages haven't been updated for\n        dnl full multiarch support yet so we still need to look in /usr/lib\n        dnl too as well.\n        if test -n \"$wx_cv_std_libfullpath\" -a -d \"/usr/lib\"; then\n            wx_cv_std_libfullpath=\"$wx_cv_std_libfullpath /usr/lib\"\n        fi\n        ;;\nesac\n\nif test -z \"$wx_cv_std_libpath\"; then\n    wx_cv_std_libpath=\"lib\"\nfi\n\nif test -z \"$wx_cv_std_libfullpath\"; then\n    wx_cv_std_libfullpath=\"/usr/$wx_cv_std_libpath\"\nfi\n\n\nAC_MSG_RESULT($wx_cv_std_libfullpath)\n\nSEARCH_LIB=\"`echo \"$SEARCH_INCLUDE\" | sed s@include@$wx_cv_std_libpath@g` $wx_cv_std_libfullpath\"\n\ndnl Cross compiling with gcc?\nif test \"$build\" != \"$host\" -a \"$GCC\" = yes; then\n    dnl for gcc cross-compilers \"$CC -print-prog-name=ld\" prints the path to\n    dnl the linker. Stripping off the trailing '/bin/ld' gives us a candiate\n    dnl for a 'root' below which libraries and headers for the target system\n    dnl might be installed.\n    if cross_root=`$CC -print-prog-name=ld 2>/dev/null`; then\n        cross_root=`dirname $cross_root`\n        cross_root=`dirname $cross_root`\n\n        dnl substitute this candiate root for '^/usr' in the search lists,\n        dnl strip out any that don't start '^/usr'.\n        SEARCH_LIB=`for x in $SEARCH_LIB; do echo $x; done | sed -ne \"s|^/usr|$cross_root|p\"`\n        SEARCH_INCLUDE=`for x in $SEARCH_INCLUDE; do echo $x; done | sed -ne \"s|^/usr|$cross_root|p\"`\n        SEARCH_INCLUDE=\"$SEARCH_INCLUDE $cross_root/include\"\n\n        dnl also have pkg-config search for *.pc files under this 'root'\n        if test -z \"$PKG_CONFIG_PATH\"; then\n            PKG_CONFIG_PATH=\"$cross_root/local/lib/pkgconfig:$cross_root/lib/pkgconfig\"\n            export PKG_CONFIG_PATH\n        fi\n\n        dnl AC_PATH_XTRA doesn't work currently unless -x-includes and\n        dnl -x-libraries are given on the command line. So if they are not\n        dnl set then set them here to plausible defaults.\n        if test -z \"$x_includes\" -o \"$x_includes\" = NONE; then\n            WX_PATH_FIND_INCLUDES($SEARCH_INCLUDE, X11/Intrinsic.h)\n            x_includes=$ac_find_includes\n        fi\n        if test -z \"$x_libraries\" -o \"$x_libraries\" = NONE; then\n            WX_PATH_FIND_LIBRARIES(Xt)\n            x_libraries=$ac_find_libraries\n        fi\n    fi\nfi\n\ndnl ------------------------------------------------------------------------\ndnl Check for libraries\ndnl ------------------------------------------------------------------------\n\ndnl flush the cache because checking for libraries below might abort\nAC_CACHE_SAVE\n\ndnl Only add the -lm library if floating point functions cannot be used\ndnl without it.  This check is important on cygwin because of the bizarre\ndnl way that they have organized functions into libraries.  On cygwin, both\ndnl libc.a and libm.a are symbolic links to a single lib libcygwin.a.  This\ndnl means that\ndnl   1) linking with -lm is not necessary, and\ndnl   2) linking with -lm is dangerous if the order of libraries is wrong\ndnl In particular, if you compile any program with -mno-cygwin and link with\ndnl -lm, it will crash instantly when it is run.  This happens because the\ndnl linker incorrectly links the Cygwin libm.a (==libcygwin.a), which replaces\ndnl the ___main function instead of allowing it to be defined by\ndnl /usr/lib/mingw/libmingw32.a as it should be.\ndnl\ndnl On MacOS X, this test will find that -lm is unnecessary and leave it out.\ndnl\ndnl Just check a few floating point functions. If they are all found without\ndnl -lm, then we must not need -lm.\nhave_cos=0\nhave_floor=0\nAC_CHECK_FUNCS(cos, have_cos=1)\nAC_CHECK_FUNCS(floor, have_floor=1)\nAC_MSG_CHECKING(if floating point functions link without -lm)\nif test \"$have_cos\" = 1 -a \"$have_floor\" = 1; then\n    AC_MSG_RESULT(yes)\nelse\n    AC_MSG_RESULT(no)\n    save_LIBS=\"$LIBS\"\n    LIBS=\"$LIBS -lm\"\n    dnl use different functions to avoid configure caching\n    have_sin=0\n    have_ceil=0\n    AC_CHECK_FUNCS(sin, have_sin=1)\n    AC_CHECK_FUNCS(ceil, have_ceil=1)\n    AC_MSG_CHECKING(if floating point functions link with -lm)\n    if test \"$have_sin\" = 1 -a \"$have_ceil\" = 1; then\n        AC_MSG_RESULT(yes)\n    else\n        AC_MSG_RESULT(no)\n        dnl not sure we should warn the user, crash, etc. but don't link with\n        dnl -lm it might result in failure of the subsequent tests too\n        LIBS=\"$save_LIBS\"\n    fi\nfi\n\nif test \"$HAVE_CXX11\" != \"1\" ; then\n\ndnl check for C99 string to long long conversion functions, assume that if we\ndnl have the unsigned variants, then we have the signed ones as well\ndnl\ndnl at least under SGI these functions are only available in C99 code and not\ndnl in C++ so do these tests using C++ compiler\nAC_LANG_PUSH(C++)\nif test \"wxUSE_UNICODE\" = \"yes\"; then\n    WX_CHECK_FUNCS(wcstoull)\nelse\n    WX_CHECK_FUNCS(strtoull)\nfi\nAC_LANG_POP()\n\nfi dnl End of pre-C++11 only checks section\n\ndnl Find pkg-config outside of any conditional.  Done before any PKG_* call.\nPKG_PROG_PKG_CONFIG\n\ndnl When cross-compiling, don't use .pc files on the build system, they are at\ndnl best useless and can be harmful (e.g. they may define options inappropriate\ndnl for the cross-build, resulting in the failure of all the subsequent tests).\nif test \"$build\" != \"$host\"; then\n    dnl pkg.m4 forbids the use of PKG_XXX, so undo it here to avoid autoconf\n    dnl errors.\n    m4_pattern_allow([PKG_CONFIG_LIBDIR])\n\n    dnl If pkg-config libdir is already defined, we suppose that they know what\n    dnl they're doing and leave it alone, but if not, set it to a path in which\n    dnl no .pc files will be found.\n    if test -z \"$PKG_CONFIG_LIBDIR\"; then\n        PKG_CONFIG_LIBDIR=/dev/null\n        export PKG_CONFIG_LIBDIR\n    fi\nfi\n\ndnl ---------------------------------------------------------------------------\ndnl Optional libraries\ndnl\ndnl   --with-<lib>=sys\ndnl       looks for system library and fails if not found\ndnl\ndnl   --with-<lib>\ndnl   --with-<lib>=yes\ndnl       looks for system library and, if not found, prints a warning,\ndnl       falls back to the builtin wx version, and continues configuration\ndnl\ndnl   --with-<lib>=builtin\ndnl       uses builtin wx version without searching for system library\ndnl\ndnl   --with-<lib>=no\ndnl   --without-<lib>\ndnl       do not use library (neither system nor builtin wx version)\ndnl\ndnl ---------------------------------------------------------------------------\n\ndnl ------------------------------------------------------------------------\ndnl Check for regex libraries\ndnl ------------------------------------------------------------------------\n\nif test \"$wxUSE_REGEX\" != \"no\"; then\n    AC_DEFINE(wxUSE_REGEX)\n\n    if test \"$wxUSE_UNICODE\" = \"yes\" -a \"$wxUSE_REGEX\" = \"yes\"; then\n        AC_MSG_WARN([Defaulting to the builtin regex library for Unicode build.])\n        wxUSE_REGEX=builtin\n    fi\n\n    if test \"$wxUSE_REGEX\" = \"sys\" -o \"$wxUSE_REGEX\" = \"yes\" ; then\n        dnl according to Unix 98 specs, regcomp() is in libc but I believe that\n        dnl on some old systems it may be in libregex - check for it too?\n        AC_CHECK_HEADER(regex.h, [AC_CHECK_FUNCS(regcomp re_search)],, [ ])\n\n        if test \"x$ac_cv_func_regcomp\" != \"xyes\"; then\n            if test \"$wxUSE_REGEX\" = \"sys\" ; then\n                AC_MSG_ERROR([system regex library not found! Use --with-regex to use built-in version])\n            else\n                AC_MSG_WARN([system regex library not found, will use built-in instead])\n                wxUSE_REGEX=builtin\n            fi\n        else\n            dnl we are using the system library\n            wxUSE_REGEX=sys\n            dnl only the built-in supports advanced REs\n            AC_DEFINE(WX_NO_REGEX_ADVANCED)\n        fi\n    fi\nfi\n\ndnl ------------------------------------------------------------------------\ndnl Check for zlib compression library\ndnl ------------------------------------------------------------------------\n\nZLIB_LINK=\nif test \"$wxUSE_ZLIB\" != \"no\" ; then\n    AC_DEFINE(wxUSE_ZLIB)\n\n    if test \"$wxUSE_ZLIB\" = \"sys\" -o \"$wxUSE_ZLIB\" = \"yes\" ; then\n        dnl we have troubles with ancient zlib versions (e.g. 1.0.4 is\n        dnl known to not work) and although I don't know which is\n        dnl the minimal required version it's safer to test for 1.1.4 as\n        dnl it fixes a security problem in 1.1.3 -- and hopefully nobody\n        dnl has anything more ancient (1.1.3 was released in July 1998)\n        dnl anyhow\n        AC_CACHE_CHECK([for zlib.h >= 1.1.4], ac_cv_header_zlib_h,\n            [AC_TRY_RUN(\n                dnl zlib.h defines ZLIB_VERSION=\"x.y.z\"\n                [\n                    #include <zlib.h>\n                    #include <stdio.h>\n\n                    int main()\n                    {\n                        FILE *f=fopen(\"conftestval\", \"w\");\n                        if (!f) return 1;\n                        fprintf(f, \"%s\",\n                                ZLIB_VERSION[0] == '1' &&\n                                (ZLIB_VERSION[2] > '1' ||\n                                (ZLIB_VERSION[2] == '1' &&\n                                 ZLIB_VERSION[4] >= '4')) ? \"yes\" : \"no\");\n                        return 0;\n                    }\n                ],\n                ac_cv_header_zlib_h=`cat conftestval`,\n                ac_cv_header_zlib_h=no,\n                dnl cross-compiling: don't have an answer, try later\n                unset ac_cv_header_zlib_h\n            )]\n        )\n        dnl If the test above did not come up with a value (e.g. cross\n        dnl compiling) then this should give a definitive answer\n        AC_CHECK_HEADER(zlib.h,,, [ ])\n\n        if test \"$ac_cv_header_zlib_h\" = \"yes\"; then\n            AC_CHECK_LIB(z, deflate, ZLIB_LINK=\" -lz\")\n        fi\n\n        if test \"x$ZLIB_LINK\" = \"x\" ; then\n            if test \"$wxUSE_ZLIB\" = \"sys\" ; then\n                AC_MSG_ERROR([zlib library not found or too old! Use --with-zlib=builtin to use built-in version])\n            else\n                AC_MSG_WARN([zlib library not found or too old, will use built-in instead])\n                wxUSE_ZLIB=builtin\n            fi\n        else\n            dnl we are using the system library\n            wxUSE_ZLIB=sys\n        fi\n    fi\n\n    dnl We should test if built-in zlib library is avalable, preferably\n    dnl downloaded through --recurse-submodules option if cloned from git.\n    dnl Would be available when downloaded as a zipped or tarball release.\n    if test \"$wxUSE_ZLIB\" = \"builtin\" ; then\n        AC_MSG_CHECKING([whether zlib.h file exists])\n        if ! test -f \"$ac_confdir/src/zlib/zlib.h\" ; then\n            AC_MSG_RESULT([no])\n            AC_MSG_ERROR([\n    Configured to use built-in zlib library, but the required file\n    $ac_confdir/src/zlib/zlib.h couldn't be found.\n    You might need to run\n\n        git submodule update --init src/zlib\n\n    to fix this.])\n        else\n            AC_MSG_RESULT([yes])\n        fi\n    fi\nfi\n\ndnl ------------------------------------------------------------------------\ndnl Check for png library\ndnl ------------------------------------------------------------------------\n\nPNG_LINK=\nif test \"$wxUSE_LIBPNG\" != \"no\" ; then\n    AC_DEFINE(wxUSE_LIBPNG)\n\n    dnl for the check below to have a chance to succeed, we must already have\n    dnl libz somewhere\n    if test \"$wxUSE_LIBPNG\" = \"sys\" -a \"$wxUSE_ZLIB\" != \"sys\" ; then\n        AC_MSG_WARN([system png library doesn't work without system zlib, will use built-in instead])\n        wxUSE_LIBPNG=builtin\n    fi\n\n    if test \"$wxUSE_LIBPNG\" = \"sys\" -o \"$wxUSE_LIBPNG\" = \"yes\" ; then\n        dnl libpng version 0.9 is known to not work, if an even newer\n        dnl version is required, just bump it up in the test below\n        AC_CACHE_CHECK([for png.h > 0.90], ac_cv_header_png_h,\n            [AC_TRY_RUN(\n                dnl png.h defines PNG_LIBPNG_VER=number\n                [\n                    #include <png.h>\n                    #include <stdio.h>\n\n                    int main()\n                    {\n                        FILE *f=fopen(\"conftestval\", \"w\");\n                        if (!f) return 1;\n                        fprintf(f, \"%s\",\n                                 PNG_LIBPNG_VER > 90 ? \"yes\" : \"no\");\n                        return 0;\n                    }\n                ],\n                ac_cv_header_png_h=`cat conftestval`,\n                ac_cv_header_png_h=no,\n                dnl cross-compiling: test (later) if we have any png.h\n                unset ac_cv_header_png_h\n            )]\n        )\n        AC_CHECK_HEADER(png.h,,, [ ])\n\n        if test \"$ac_cv_header_png_h\" = \"yes\"; then\n            AC_CHECK_LIB(png, png_sig_cmp, PNG_LINK=\" -lpng -lz\", , [-lz -lm])\n        fi\n\n        if test \"x$PNG_LINK\" = \"x\" ; then\n            if test \"$wxUSE_LIBPNG\" = \"sys\" ; then\n                AC_MSG_ERROR([system png library not found or too old! Use --with-libpng=builtin to use built-in version])\n            else\n                AC_MSG_WARN([system png library not found or too old, will use built-in instead])\n                wxUSE_LIBPNG=builtin\n            fi\n        else\n            dnl we are using the system library\n            wxUSE_LIBPNG=sys\n        fi\n    fi\n\n    dnl We should test if built-in png library is avalable, preferably\n    dnl downloaded through --recurse-submodules option if cloned from git.\n    dnl Would be available when downloaded as a zipped or tarball release.\n    if test \"$wxUSE_LIBPNG\" = \"builtin\" ; then\n        AC_MSG_CHECKING([whether png.c file exists])\n        if ! test -f \"$ac_confdir/src/png/png.c\" ; then\n            AC_MSG_RESULT([no])\n            AC_MSG_ERROR([\n    Configured to use built-in png library, but the required file\n    $ac_confdir/src/png/png.c couldn't be found.\n    You might need to run\n\n        git submodule update --init src/png\n\n    to fix this.])\n        else\n            AC_MSG_RESULT([yes])\n        fi\n    fi\nfi\n\ndnl ------------------------------------------------------------------------\ndnl Check for jpeg library\ndnl ------------------------------------------------------------------------\n\ndnl this check must be done before the check for libtiff as libtiff uses\ndnl libjpeg itself\nJPEG_LINK=\nif test \"$wxUSE_LIBJPEG\" != \"no\" ; then\n    AC_DEFINE(wxUSE_LIBJPEG)\n\n    if test \"$wxUSE_LIBJPEG\" = \"sys\" -o \"$wxUSE_LIBJPEG\" = \"yes\" ; then\n        dnl can't use AC_CHECK_HEADER as jconfig.h defines things like\n        dnl HAVE_STDLIB_H which are already defined and this provokes\n        dnl a compiler warning which configure considers as an error...\n        AC_MSG_CHECKING(for jpeglib.h)\n        AC_CACHE_VAL(ac_cv_header_jpeglib_h,\n            AC_TRY_COMPILE(\n                [\n                    #undef HAVE_STDLIB_H\n                    #include <stdio.h>\n                    #include <jpeglib.h>\n                ],\n                [\n                ],\n                ac_cv_header_jpeglib_h=yes,\n                ac_cv_header_jpeglib_h=no\n            )\n        )\n        AC_MSG_RESULT($ac_cv_header_jpeglib_h)\n\n        if test \"$ac_cv_header_jpeglib_h\" = \"yes\"; then\n            AC_CHECK_LIB(jpeg, jpeg_read_header, JPEG_LINK=\" -ljpeg\")\n        fi\n\n        if test \"x$JPEG_LINK\" = \"x\" ; then\n            if test \"$wxUSE_LIBJPEG\" = \"sys\" ; then\n                AC_MSG_ERROR([system jpeg library not found! Use --with-libjpeg=builtin to use built-in version])\n            else\n                AC_MSG_WARN([system jpeg library not found, will use built-in instead])\n                wxUSE_LIBJPEG=builtin\n            fi\n        else\n            dnl we are using the system library\n            wxUSE_LIBJPEG=sys\n\n            if test \"$wxUSE_MSW\" = 1; then\n                dnl boolean is defined by the jpeg headers and also by the\n                dnl Windows headers of some compilers. This type has been\n                dnl renamed in the builtin, so it is only an issue when\n                dnl using an external jpeg lib on Windows.\n                AC_CHECK_TYPES(\n                    [boolean],\n                    [\n                        AC_CHECK_SIZEOF(\n                            [boolean],\n                            [],\n                            [\n                                #undef HAVE_BOOLEAN\n                                #include <stdio.h>\n                                #include <jpeglib.h>\n                            ])\n                        AC_DEFINE_UNQUOTED(\n                            [wxHACK_BOOLEAN],\n                            [wxInt`expr 8 \\* $ac_cv_sizeof_boolean`])\n                    ],\n                    [],\n                    [#include <windows.h>])\n            fi\n        fi\n    fi\n\n    dnl We should test if built-in jpeg library is avalable, preferably\n    dnl downloaded through --recurse-submodules option if cloned from git.\n    dnl Would be available when downloaded as a zipped or tarball release.\n    if test \"$wxUSE_LIBJPEG\" = \"builtin\" ; then\n        AC_MSG_CHECKING([whether jpeglib.h file exists])\n        if ! test -f \"$ac_confdir/src/jpeg/jpeglib.h\" ; then\n            AC_MSG_RESULT([no])\n            AC_MSG_ERROR([\n    Configured to use built-in jpeg library, but the required file\n    $ac_confdir/src/jpeg/jpeglib.h couldn't be found.\n    You might need to run\n\n        git submodule update --init src/jpeg\n\n    to fix this.])\n        else\n            AC_MSG_RESULT([yes])\n        fi\n    fi\nfi\n\ndnl ------------------------------------------------------------------------\ndnl Check for lzma library\ndnl ------------------------------------------------------------------------\n\nif test \"$wxUSE_LIBLZMA\" != \"no\"; then\n    AC_CHECK_HEADER(lzma.h,,,[])\n\n    if test \"$ac_cv_header_lzma_h\" = \"yes\"; then\n        AC_CHECK_LIB(lzma, lzma_code,\n            [\n                LZMA_LINK=\"-llzma\"\n                LIBS=\"$LZMA_LINK $LIBS\"\n                AC_DEFINE(wxUSE_LIBLZMA)\n            ])\n    fi\n\n    if test -z \"$LZMA_LINK\"; then\n        wxUSE_LIBLZMA=no\n    fi\nfi\n\ndnl ------------------------------------------------------------------------\ndnl Check for jbig library\ndnl ------------------------------------------------------------------------\n\nJBIG_LINK=\nif test \"$wxUSE_LIBJBIG\" = \"yes\"; then\n    AC_CHECK_LIB(jbig, jbg_dec_init, JBIG_LINK=\" -ljbig\")\nfi\n\ndnl ------------------------------------------------------------------------\ndnl Check for tiff library\ndnl ------------------------------------------------------------------------\n\nTIFF_LINK=\nif test \"$wxUSE_LIBTIFF\" != \"no\" ; then\n    AC_DEFINE(wxUSE_LIBTIFF)\n\n    if test \"$wxUSE_LIBTIFF\" = \"sys\" -o \"$wxUSE_LIBTIFF\" = \"yes\" ; then\n        dnl First try using pkg-config as it's the most reliable way to detect\n        dnl libtiff.\n        PKG_CHECK_MODULES(LIBTIFF, [libtiff-4],\n            [\n                TIFF_LINK=$LIBTIFF_LIBS\n                CFLAGS=\"$LIBTIFF_CFLAGS $CFLAGS\"\n            ],\n            [\n                AC_MSG_RESULT([not found via pkg-config])\n\n                TIFF_PREREQ_LINKS=-lm\n\n                dnl libtiff may depend on libjpeg and libz so use them in the test\n                dnl below or it would fail\n                if test \"$wxUSE_LIBJPEG\" = \"sys\"; then\n                    TIFF_PREREQ_LINKS=\"$TIFF_PREREQ_LINKS $JPEG_LINK\"\n                fi\n                if test \"$wxUSE_ZLIB\" = \"sys\"; then\n                    TIFF_PREREQ_LINKS=\"$TIFF_PREREQ_LINKS $ZLIB_LINK\"\n                fi\n                if test -n \"$LZMA_LINK\"; then\n                    TIFF_PREREQ_LINKS=\"$TIFF_PREREQ_LINKS $LZMA_LINK\"\n                fi\n                if test \"$wxUSE_LIBJBIG\" = \"yes\"; then\n                    TIFF_PREREQ_LINKS=\"$TIFF_PREREQ_LINKS $JBIG_LINK\"\n                fi\n                AC_CHECK_HEADER(tiffio.h,\n                                [\n                                    AC_CHECK_LIB(tiff, TIFFError,\n                                                 TIFF_LINK=\" -ltiff\",\n                                                 ,\n                                                 $TIFF_PREREQ_LINKS)\n                                ],\n                                [],\n                                [ ]\n                               )\n            ])\n\n        if test \"x$TIFF_LINK\" = \"x\" ; then\n            if test \"$wxUSE_LIBTIFF\" = \"sys\" ; then\n                AC_MSG_ERROR([system tiff library not found! Use --with-libtiff=builtin to use built-in version])\n            else\n                AC_MSG_WARN([system tiff library not found, will use built-in instead])\n                wxUSE_LIBTIFF=builtin\n            fi\n        else\n            dnl we are using the system library\n            wxUSE_LIBTIFF=sys\n        fi\n    fi\n    if test \"$wxUSE_LIBTIFF\" = \"builtin\" ; then\n        dnl Test for built-in tiff library avalability.\n        AC_MSG_CHECKING([whether tiff.h file exists])\n        if ! test -f \"$ac_confdir/src/tiff/libtiff/tiff.h\" ; then\n            AC_MSG_RESULT([no])\n            AC_MSG_ERROR([\n    Configured to use built-in tiff library, but the required file\n    $ac_confdir/src/tiff/libtiff/tiff.h couldn't be found.\n    You might need to run:\n\n        git submodule update --init src/tiff\n\n    to fix this.])\n        else\n            AC_MSG_RESULT([yes])\n        fi\n\n        dnl Disable the use of lzma, jbig, webp and zstd in built-in libtiff\n        dnl explicitly, as otherwise we'd depend on the system libraries, which\n        dnl is typically undesirable when using builtin libraries. If we use\n        dnl lzma ourselves, keep it enabled (note that we must still define the\n        dnl variable used below).\n        if test \"$wxUSE_LIBLZMA\" = \"no\"; then\n            tiff_lzma_option=--disable-lzma\n        else\n            tiff_lzma_option=--enable-lzma\n        fi\n        if test \"$wxUSE_LIBJPEG\" = \"no\"; then\n            dnl we have to prevent the builtin libtiff configure from building the\n            dnl library with JPEG support as this was explicitly disabled by user,\n            dnl but unfortunately it needs --disable-jpeg and not --without-libjpeg\n            dnl (which will be passed to it anyhow as configure passes arguments to\n            dnl the top-level script to all the other ones called recursively), so\n            dnl we need to hack around this\n            tiff_jpeg_option=--disable-jpeg\n        else\n            tiff_jpeg_option=--enable-jpeg\n        fi\n\n        AX_SUBDIRS_CONFIGURE([src/tiff],\n            [[--disable-jbig],\n             [--disable-webp],\n             [--disable-zstd],\n             [$tiff_lzma_option],\n             [$tiff_jpeg_option]])\n    fi\nfi\n\ndnl ------------------------------------------------------------------------\ndnl Check for expat libraries\ndnl ------------------------------------------------------------------------\n\nif test \"$wxUSE_EXPAT\" != \"no\"; then\n    wxUSE_XML=yes\n    AC_DEFINE(wxUSE_EXPAT)\n    AC_DEFINE(wxUSE_XML)\n\n    if test \"$wxUSE_EXPAT\" = \"sys\" -o \"$wxUSE_EXPAT\" = \"yes\" ; then\n        AC_CHECK_HEADER([expat.h], [found_expat_h=1],, [ ])\n        if test \"x$found_expat_h\" = \"x1\"; then\n            dnl Expat 1.95.6 comes with broken expat.h:\n            AC_CACHE_CHECK([if expat.h is valid C++ header],\n                wx_cv_expat_is_not_broken,\n                [\n                AC_LANG_PUSH(C++)\n                AC_TRY_COMPILE([#include <expat.h>],[],\n                    wx_cv_expat_is_not_broken=yes,\n                    wx_cv_expat_is_not_broken=no\n                )\n                AC_LANG_POP()\n                ]\n            )\n            if test \"$wx_cv_expat_is_not_broken\" = \"yes\" ; then\n                AC_CHECK_LIB(expat, XML_ParserCreate, EXPAT_LINK=\" -lexpat\")\n            fi\n        fi\n        if test \"x$EXPAT_LINK\" = \"x\" ; then\n            if test \"$wxUSE_EXPAT\" = \"sys\" ; then\n                AC_MSG_ERROR([system expat library not found! Use --with-expat=builtin to use built-in version])\n            else\n                AC_MSG_WARN([system expat library not found, will use built-in instead])\n                wxUSE_EXPAT=builtin\n            fi\n        else\n            dnl we are using the system library\n            wxUSE_EXPAT=sys\n        fi\n    fi\n    if test \"$wxUSE_EXPAT\" = \"builtin\" ; then\n        dnl Test for built-in expat library avalability.\n        AC_MSG_CHECKING([whether expat.h file exists])\n        if ! test -f \"$ac_confdir/src/expat/expat/lib/expat.h\" ; then\n            AC_MSG_RESULT([no])\n            AC_MSG_ERROR([\n    Configured to use built-in expat library, but the required file\n    $ac_confdir/src/expat/expat/lib/expat.h couldn't be found.\n    You might need to run:\n\n        git submodule update --init src/expat\n\n    to fix this.])\n        else\n            AC_MSG_RESULT([yes])\n        fi\n\n        dnl Expat requires C99 compiler, so define wxCFLAGS_C99 variable which\n        dnl is used when compiling it in our makefiles.\n        save_CC=\"$CC\"\n        AC_PROG_CC_C99\n        CC=\"$save_CC\"\n\n        dnl Note that we need just the flags, not the full CC value including\n        dnl the compiler too.\n        wxCFLAGS_C99=$ac_cv_prog_cc_c99\n        AC_SUBST(wxCFLAGS_C99)\n\n        dnl Expat needs this:\n        AC_CONFIG_SUBDIRS([src/expat/expat])\n    fi\nfi\n\n\ndnl ------------------------------------------------------------------------\ndnl Check for libmspack\ndnl ------------------------------------------------------------------------\n\nif test \"$wxUSE_LIBMSPACK\" != \"no\"; then\n    AC_CHECK_HEADER([mspack.h], [found_mspack_h=1],, [ ])\n    if test \"x$found_mspack_h\" = \"x1\"; then\n        AC_CHECK_LIB(mspack, mspack_create_chm_decompressor,\n                     MSPACK_LINK=\" -lmspack\")\n    fi\n    if test \"x$MSPACK_LINK\" = \"x\" ; then\n        wxUSE_LIBMSPACK=no\n    fi\nfi\n\nif test \"$wxUSE_LIBMSPACK\" != \"no\"; then\n    AC_DEFINE(wxUSE_LIBMSPACK)\nfi\n\ndnl ------------------------------------------------------------------------\ndnl Check for libcurl\ndnl ------------------------------------------------------------------------\n\nif test \"$wxUSE_WEBREQUEST\" = \"yes\" -a \"$wxUSE_LIBCURL\" != \"no\"; then\n    PKG_CHECK_MODULES(LIBCURL, [libcurl],\n        [\n            wxUSE_LIBCURL=yes\n            CXXFLAGS=\"$LIBCURL_CFLAGS $CXXFLAGS\"\n            LIBS=\"$LIBCURL_LIBS $LIBS\"\n        ],\n        [\n            wxUSE_LIBCURL=no\n            AC_MSG_RESULT([not found])\n        ]\n    )\nfi\n\ndnl ----------------------------------------------------------------\ndnl search for toolkit (widget sets)\ndnl ----------------------------------------------------------------\n\nTOOLKIT=\nTOOLKIT_INCLUDE=\nWIDGET_SET=\n\ndnl are we building for a win32 target environment?\ndnl If so, setup common stuff needed for both GUI and Base libs.\nif test \"$USE_WIN32\" = 1 ; then\n    AC_CHECK_HEADER(windows.h,,\n    [\n        AC_MSG_ERROR(please set CFLAGS to contain the location of windows.h)\n    ],\n    [ ])\n\n    LIBS=\"$LIBS -luxtheme -lwinspool -lwinmm -lshell32 -lshlwapi -lcomctl32 -lcomdlg32 -ladvapi32 -lversion -lwsock32 -lgdi32\"\n    case \"${host}\" in\n        x86_64-*-mingw* )\n            dnl we need to define this to embed the manifest for correct\n            dnl platform from wx/msw/wx.rc (this is not needed for x86 which is\n            dnl the default in wx/msw/rcdefs.h)\n            WINDRES_CPU_DEFINE=\"--define WX_CPU_AMD64\"\n        ;;\n    esac\n    if test \"$wxUSE_ACCESSIBILITY\" = \"yes\" ; then\n        LIBS=\"$LIBS -loleacc\"\n    fi\n    if test \"$wxUSE_WINHTTP\" = \"yes\" ; then\n        AC_CHECK_HEADER(winhttp.h,,[wxUSE_WINHTTP=no],[#include <windows.h>])\n\n        if test \"$wxUSE_WINHTTP\" = \"yes\" ; then\n            LIBS=\"$LIBS -lwinhttp\"\n        fi\n    fi\n\n    case \"${host}\" in\n        *-*-cygwin* )\n            dnl Cygwin doesn't include these by default\n            LIBS=\"$LIBS -lkernel32 -luser32\"\n    esac\n\n    dnl Flags to be passed to windres by the applications using wxWidgets.\n    WXCONFIG_RESFLAGS=\"--define __WIN32__ --define __GNUWIN32__ $WINDRES_CPU_DEFINE\"\nfi\n\nif test \"$wxUSE_GUI\" = \"yes\"; then\n    USE_GUI=1\n\n    GUI_TK_LIBRARY=\n\n    WXGTK1=\n    WXGTK127=\n    WXGTK2=\n    WXGTK3=\n    WXGTK4=\n    WXGPE=\n\n    if test \"$wxUSE_MSW\" = 1 ; then\n        TOOLKIT=MSW\n        GUIDIST=MSW_DIST\n\n        dnl -mwindows causes a heap of other default gui libs to be linked in.\n        case \"${host}\" in\n            *-*-mingw* )\n                WXCONFIG_LDFLAGS_GUI=\"$LDFLAGS -Wl,--subsystem,windows -mwindows\"\n        esac\n    fi\n\n    if test \"$wxUSE_GTK\" = 1; then\n        dnl GTK+ test program must be compiled with C compiler\n        AC_MSG_CHECKING([for GTK+ version])\n\n        gtk_version_cached=1\n        AC_CACHE_VAL(wx_cv_lib_gtk,\n            [\n                dnl stupid GTK+ AM macros produce their own messages, so we\n                dnl have to pass to the next line\n                gtk_version_cached=0\n                AC_MSG_RESULT()\n\n                dnl we must link against lgthread unless the user\n                dnl used --disable-threads\n                GTK_MODULES=\n                if test \"$wxUSE_THREADS\" = \"yes\"; then\n                    GTK_MODULES=gthread\n                fi\n\n                if test -z \"$wxGTK_VERSION\"; then\n                    wxGTK_VERSION=any\n                fi\n\n                dnl detect GTK2\n                wx_cv_lib_gtk=\n                if test \"x$wxGTK_VERSION\" != \"x1\"\n                then\n                    dnl The gthread.pc that ships with Solaris returns '-mt',\n                    dnl it's correct for Sun CC, but gcc requires '-pthreads'.\n                    dnl So disable the compile check and remove the -mt below.\n                    case \"${host}\" in\n                        *-*-solaris2* )\n                            if test \"$wxUSE_THREADS\" = \"yes\" -a \"$GCC\" = yes; then\n                                enable_gtktest=no\n                            fi\n                    esac\n\n                    if test \"$wxGTK_VERSION\" = 3 -o \"$wxGTK_VERSION\" = any; then\n                        AM_PATH_GTK_3_0(, wx_cv_lib_gtk=3, , $GTK_MODULES)\n                    fi\n                    if test -z \"$wx_cv_lib_gtk\"; then\n                        if test \"$wxGTK_VERSION\" = 2 -o \"$wxGTK_VERSION\" = any; then\n                            AM_PATH_GTK_2_0(2.6.0, wx_cv_lib_gtk=2.0, , $GTK_MODULES)\n                        fi\n                    fi\n                    if test -z \"$wx_cv_lib_gtk\"; then\n                        if test \"$wxGTK_VERSION\" = 4 -o \"$wxGTK_VERSION\" = any; then\n                            AM_PATH_GTK_4_0(, wx_cv_lib_gtk=4, , $GTK_MODULES)\n                        fi\n                    fi\n                fi\n\n                dnl detect GTK1.x\n                if test -z \"$wx_cv_lib_gtk\"; then\n                    if test \"x$wxGTK_VERSION\" = \"x1\" -o \"x$wxGTK_VERSION\" = \"xany\" ; then\n                        AM_PATH_GTK(1.2.7, wx_cv_lib_gtk=1.2.7, , $GTK_MODULES)\n\n                        if test -z \"$wx_cv_lib_gtk\"; then\n                            AM_PATH_GTK(1.2.3, wx_cv_lib_gtk=1.2.3, , $GTK_MODULES)\n                        fi\n                    fi\n                fi\n\n                if test -z \"$wx_cv_lib_gtk\"; then\n                    dnl looks better in AC_MSG_RESULT\n                    wx_cv_lib_gtk=none\n                else\n                    if test \"$USE_WIN32\" != 1 ; then\n                        dnl we use symbols from X11 directly so we should link with it\n                        GTK_LIBS=\"$GTK_LIBS -lX11\"\n                    fi\n\n                    dnl we need to cache GTK_CFLAGS and GTK_LIBS for the\n                    dnl subsequent runs\n                    wx_cv_cflags_gtk=$GTK_CFLAGS\n                    wx_cv_libs_gtk=$GTK_LIBS\n                fi\n            ]\n        )\n\n        dnl if it wasn't cached, the messages from AM_PATH_GTK() above are\n        dnl enough\n        if test \"$gtk_version_cached\" = 1; then\n            AC_MSG_RESULT($wx_cv_lib_gtk)\n        fi\n\n        case \"$wx_cv_lib_gtk\" in\n            4)      WXGTK4=1\n                    WXGTK3=1\n                    TOOLKIT_VERSION=4\n                    ;;\n            3)      WXGTK3=1\n                    TOOLKIT_VERSION=3\n                    ;;\n            2.0)    WXGTK2=1\n                    TOOLKIT_VERSION=2\n                    ;;\n            1.2.7)  WXGTK127=1\n                    WXGTK1=1\n                    ;;\n            1.2*)   WXGTK1=1 ;;\n            *)      AC_MSG_ERROR([\nThe development files for GTK+ were not found. For GTK+ 2, please\nensure that pkg-config is in the path and that gtk+-2.0.pc is\ninstalled. For GTK+ 1.2 please check that gtk-config is in the path,\nand that the version is 1.2.3 or above. Also check that the\nlibraries returned by 'pkg-config gtk+-2.0 --libs' or 'gtk-config\n--libs' are in the LD_LIBRARY_PATH or equivalent.\n                            ])\n                    ;;\n        esac\n\n        if test \"$WXGTK3\" = 1; then\n            AC_DEFINE(__WXGTK220__)\n            AC_DEFINE(__WXGTK218__)\n            AC_DEFINE(__WXGTK210__)\n        elif test \"$WXGTK2\" = 1; then\n            save_CFLAGS=\"$CFLAGS\"\n            save_LIBS=\"$LIBS\"\n            CFLAGS=\"$wx_cv_cflags_gtk $CFLAGS\"\n            LIBS=\"$LIBS $wx_cv_libs_gtk\"\n\n            dnl We need to define __WXGTK2xx__ symbols for a few specific\n            dnl versions in order to be able to test for them (and hence for\n            dnl the availability of the controls which appeared only in these\n            dnl versions) from our public headers, without having to include\n            dnl gtk/gtk.h from them.\n\n            AC_CACHE_CHECK([if GTK+ is version >= 2.20], wx_cv_gtk220, [\n                AC_TRY_COMPILE([\n                                #include <gtk/gtk.h>\n                               ],\n                               [\n                                #if !GTK_CHECK_VERSION(2,20,0)\n                                Not GTK+ 2.20\n                                #endif\n                               ],\n                               wx_cv_gtk220=yes,\n                               wx_cv_gtk220=no\n                               )\n            ])\n\n            if test \"$wx_cv_gtk220\" = \"yes\"; then\n                AC_DEFINE(__WXGTK220__)\n                wx_cv_gtk218=yes\n            else\n                AC_CACHE_CHECK([if GTK+ is version >= 2.18], wx_cv_gtk218, [\n                    AC_TRY_COMPILE([\n                                    #include <gtk/gtk.h>\n                                   ],\n                                   [\n                                    #if !GTK_CHECK_VERSION(2,18,0)\n                                    Not GTK+ 2.18\n                                    #endif\n                                   ],\n                                   wx_cv_gtk218=yes,\n                                   wx_cv_gtk218=no\n                                   )\n                ])\n            fi\n\n            if test \"$wx_cv_gtk218\" = \"yes\"; then\n                AC_DEFINE(__WXGTK218__)\n                wx_cv_gtk210=yes\n            else\n                AC_CACHE_CHECK([if GTK+ is version >= 2.10], wx_cv_gtk210, [\n                    AC_TRY_COMPILE([\n                                    #include <gtk/gtk.h>\n                                   ],\n                                   [\n                                    #if !GTK_CHECK_VERSION(2,10,0)\n                                    Not GTK+ 2.10\n                                    #endif\n                                   ],\n                                   wx_cv_gtk210=yes,\n                                   wx_cv_gtk210=no\n                                   )\n                ])\n            fi\n\n            if test \"$wx_cv_gtk210\" = \"yes\"; then\n                AC_DEFINE(__WXGTK210__)\n            fi\n\n            CFLAGS=\"$save_CFLAGS\"\n            LIBS=\"$save_LIBS\"\n        else\n            if test \"$wxUSE_UNICODE\" = \"yes\"; then\n                AC_MSG_WARN([Unicode configuration not supported with GTK+ 1.x])\n                wxUSE_UNICODE=no\n            fi\n\n            dnl test for XIM support in libgdk\n            AC_CHECK_LIB(gdk, gdk_im_open, AC_DEFINE(HAVE_XIM))\n\n            dnl we need poll() in src/gtk1/app.cpp (we know that Darwin doesn't\n            dnl have it but we do the check for the others)\n            if test \"$USE_DARWIN\" != 1; then\n                AC_CHECK_FUNCS(poll)\n            fi\n        fi\n\n        TOOLKIT_INCLUDE=\"$wx_cv_cflags_gtk\"\n        GUI_TK_LIBRARY=\"$wx_cv_libs_gtk $GUI_TK_LIBRARY\"\n        TOOLKIT=GTK\n        GUIDIST=GTK_DIST\n\n        AC_CACHE_CHECK([for GDK Wayland backend], wx_cv_gdk_wayland, [\n            save_CFLAGS=$CFLAGS\n            CFLAGS=\"$CFLAGS $TOOLKIT_INCLUDE\"\n            AC_TRY_COMPILE([\n                            #include <gdk/gdk.h>\n                           ],\n                           [\n                            #ifndef GDK_WINDOWING_WAYLAND\n                            Not GDK Windowing Wayland\n                            #endif\n                           ],\n                           wx_cv_gdk_wayland=yes,\n                           wx_cv_gdk_wayland=no\n                           )\n            CFLAGS=$save_CFLAGS\n        ])\n\n        dnl test for external libxpm if we're configured to use it\n        if test \"$wxUSE_GPE\" = \"yes\"; then\n            AC_MSG_CHECKING(for gpewidget library)\n            WX_PATH_FIND_LIBRARIES(gpewidget)\n            if test \"$ac_find_libraries\" != \"\" ; then\n                WX_LINK_PATH_EXIST($ac_find_libraries,$GUI_TK_LIBRARY)\n                dnl -lgpewidget must be before all GTK libs and\n                dnl we guess its path from the prefix\n                GUI_TK_LIBRARY=\"-L${prefix}/lib -lgpewidget $GUI_TK_LIBRARY\"\n                WXGPE=1\n                AC_MSG_RESULT([found in $ac_find_libraries])\n            else\n                AC_MSG_RESULT(not found)\n            fi\n\n            dnl AC_MSG_CHECKING(for gpe library)\n            dnl WX_PATH_FIND_LIBRARIES(gpe)\n            dnl if test \"$ac_find_libraries\" != \"\" ; then\n            dnl     WX_LINK_PATH_EXIST($ac_find_libraries,$GUI_TK_LIBRARY)\n            dnl     GUI_TK_LIBRARY=\"$GUI_TK_LIBRARY -lgpe\"\n            dnl     AC_MSG_RESULT(found in $ac_find_libraries)\n            dnl else\n            dnl     AC_MSG_RESULT(not found)\n            dnl fi\n        fi\n    fi\n\n    if test \"$wxUSE_DFB\" = 1; then\n       PKG_CHECK_MODULES(DIRECTFB,\n                         [directfb >= 0.9.23],\n                         [\n                           wxUSE_UNIVERSAL=\"yes\"\n                           TOOLKIT_INCLUDE=\"$DIRECTFB_CFLAGS\"\n                           GUI_TK_LIBRARY=\"$DIRECTFB_LIBS\"\n                           TOOLKIT=DFB\n                           GUIDIST=DFB_DIST\n                         ],\n                         [\n                           AC_MSG_ERROR([DirectFB not found.])\n                         ]\n                         )\n    fi\n\n    dnl common part of X11 and Motif port checks\n    if test \"$wxUSE_X11\" = 1 -o \"$wxUSE_MOTIF\" = 1; then\n        dnl use standard macros to check for X headers/libs, this brings\n        dnl support for the standard configure options --x-includes,\n        dnl --x-libraries and --no-x\n        AC_PATH_XTRA\n\n        if test \"$no_x\" = \"yes\"; then\n          AC_MSG_ERROR([X11 not found, please use --x-includes and/or --x-libraries options (see config.log for details)])\n        fi\n\n        dnl for some reason AC_PATH_XTRA seems to add -INONE and -LNONE (and\n        dnl also sometimes -RNONE) to X_CFLAGS and X_LIBS respectively, filter\n        dnl this junk out\n        GUI_TK_LIBRARY=`echo $X_LIBS | sed 's/ -LNONE//' | sed 's/ -RNONE//'`\n        TOOLKIT_INCLUDE=`echo $X_CFLAGS | sed 's/ -INONE//'`\n        COMPILED_X_PROGRAM=0\n\n    fi\n\n    if test \"$wxUSE_X11\" = 1; then\n        if test \"$wxUSE_NANOX\" = \"yes\"; then\n            AC_MSG_CHECKING(for MicroWindows/NanoX distribution)\n            if test \"x$MICROWIN\" = x ; then\n                AC_MSG_RESULT(not found)\n                AC_MSG_ERROR([Cannot find MicroWindows library. Make sure MICROWIN is set.])\n            else\n                AC_MSG_RESULT($MICROWIN)\n                AC_DEFINE(wxUSE_NANOX)\n            fi\n        fi\n\n        if test \"$wxUSE_UNICODE\" = \"yes\"; then\n            PKG_CHECK_MODULES(PANGOXFT, pangoxft,\n                [\n                    AC_DEFINE(HAVE_PANGO_XFT)\n                    CFLAGS=\"$PANGOXFT_CFLAGS $CFLAGS\"\n                    CXXFLAGS=\"$PANGOXFT_CFLAGS $CXXFLAGS\"\n                    GUI_TK_LIBRARY=\"$GUI_TK_LIBRARY $PANGOXFT_LIBS\"\n                ],\n                [\n                    AC_MSG_ERROR([pangoxft library not found, library cannot be compiled in Unicode mode])\n                ]\n            )\n            PKG_CHECK_MODULES(PANGOFT2, pangoft2,\n                [\n                    CFLAGS=\"$PANGOFT2_CFLAGS $CFLAGS\"\n                    CXXFLAGS=\"$PANGOFT2_CFLAGS $CXXFLAGS\"\n                    GUI_TK_LIBRARY=\"$GUI_TK_LIBRARY $PANGOFT2_LIBS\"\n                ],\n                [\n                    AC_MSG_WARN([pangoft2 library not found, library will be compiled without printing support])\n                    wxUSE_PRINTING_ARCHITECTURE=\"no\"\n                ]\n            )\n\n            AC_CHECK_FUNCS([pango_font_family_is_monospace])\n        fi\n\n        wxUSE_UNIVERSAL=\"yes\"\n\n        if test \"$wxUSE_NANOX\" = \"yes\"; then\n            TOOLKIT_INCLUDE=\"-I\\$(top_srcdir)/include/wx/x11/nanox -I\\$(MICROWIN)/src/include $TOOLKIT_INCLUDE\"\n            TOOLCHAIN_DEFS=\"${TOOLCHAIN_DEFS} -D__NANOX__ -DMWPIXEL_FORMAT=MWPF_TRUECOLOR0888 -DHAVE_FILEIO -DHAVE_BMP_SUPPORT=1 -DHAVE_GIF_SUPPORT=1 -DHAVE_PNM_SUPPORT=1 -DHAVE_XPM_SUPPORT=1 -DUNIX=1 -DUSE_EXPOSURE -DSCREEN_HEIGHT=480 -DSCREEN_WIDTH=640 -DSCREEN_DEPTH=4 -DX11=1\"\n            GUI_TK_LIBRARY=\"$GUI_TK_LIBRARY \\$(MICROWIN)/src/lib/libnano-X.a\"\n        else\n            GUI_TK_LIBRARY=\"$GUI_TK_LIBRARY -lX11\"\n        fi\n\n        TOOLKIT=X11\n        GUIDIST=X11_DIST\n    fi\n\n    if test \"$wxUSE_MOTIF\" = 1; then\n        AC_MSG_CHECKING(for Motif/Lesstif headers)\n        WX_PATH_FIND_INCLUDES($SEARCH_INCLUDE, Xm/Xm.h)\n        if test \"$ac_find_includes\" != \"\" ; then\n            AC_MSG_RESULT(found in $ac_find_includes)\n            WX_INCLUDE_PATH_EXIST($ac_find_includes, $TOOLKIT_INCLUDE)\n            TOOLKIT_INCLUDE=\"$TOOLKIT_INCLUDE $ac_path_to_include\"\n        else\n            save_CFLAGS=$CFLAGS\n            CFLAGS=\"$TOOLKIT_INCLUDE $CFLAGS\"\n\n            AC_TRY_COMPILE(\n                [\n                    #include <Xm/Xm.h>\n                ],\n                [\n                    int version;\n                    version = xmUseVersion;\n                ],\n                [\n                    AC_MSG_RESULT(found in default search path)\n                    COMPILED_X_PROGRAM=1\n                ],\n                [\n                    AC_MSG_RESULT(no)\n                    AC_MSG_ERROR(please set CPPFLAGS to contain the location of Xm/Xm.h)\n                ]\n            )\n\n            CFLAGS=$save_CFLAGS\n        fi\n\n\n        AC_MSG_CHECKING(for Motif/Lesstif library)\n        WX_PATH_FIND_LIBRARIES(Xm)\n\n        if test \"x$ac_find_libraries\" != \"x\" ; then\n            AC_MSG_RESULT(found in $ac_find_libraries)\n\n            WX_LINK_PATH_EXIST($ac_find_libraries, $GUI_TK_LIBRARY)\n            GUI_TK_LIBRARY=\"$GUI_TK_LIBRARY $ac_path_to_link\"\n        else\n            dnl it might happen that we found headers in one of the standard\n            dnl paths but the libs are elsewhere but still in default (linker)\n            dnl path -- try to compile a test program to check for this\n            save_CFLAGS=$CFLAGS\n            CFLAGS=\"$TOOLKIT_INCLUDE $CFLAGS\"\n            save_LIBS=\"$LIBS\"\n            LIBS=\"$GUI_TK_LIBRARY -lXm -lXmu -lXext -lX11\"\n\n            AC_TRY_LINK(\n                [\n                    #include <Xm/Xm.h>\n                ],\n                [\n                    int version;\n                    version = xmUseVersion;\n                ],\n                [\n                    AC_MSG_RESULT(found in default search path)\n                    COMPILED_X_PROGRAM=1\n                ],\n                [\n                    AC_MSG_RESULT(no)\n                    AC_MSG_ERROR(please set LDFLAGS to contain the location of libXm)\n                ]\n            )\n\n            CFLAGS=$save_CFLAGS\n            LIBS=\"$save_LIBS\"\n        fi\n\n        AC_MSG_CHECKING([if we need -lXp and/or -lSM -lICE])\n        libp_link=\"\"\n        libsm_ice_link=\"\"\n        libs_found=0\n        for libp in \"\" \" -lXp\"; do\n            if test \"$libs_found\" = 0; then\n                for libsm_ice in \"\" \" -lSM -lICE\"; do\n                    if test \"$libs_found\" = 0; then\n                        save_LIBS=\"$LIBS\"\n                        LIBS=\"$GUI_TK_LIBRARY -lXm ${libp} -lXmu -lXext -lXt ${libsm_ice} -lX11\"\n                        save_CFLAGS=$CFLAGS\n                        CFLAGS=\"$TOOLKIT_INCLUDE $CFLAGS\"\n\n                        AC_TRY_LINK(\n                            [\n                                #include <Xm/Xm.h>\n                                #include <Xm/List.h>\n                            ],\n                            [\n                                XmString string = NULL;\n                                Widget w = NULL;\n                                int position = 0;\n                                XmListAddItem(w, string, position);\n                            ],\n                            [\n                                libp_link=\"$libp\"\n                                libsm_ice_link=\"$libsm_ice\"\n                                AC_MSG_RESULT(\n                                    [need ${libp_link} ${libsm_ice_link}])\n                                libs_found=1\n                            ], []\n                        )\n\n                        LIBS=\"$save_LIBS\"\n                        CFLAGS=$save_CFLAGS\n                    fi\n                done\n            fi\n        done\n\n        if test \"$libs_found\" = 0; then\n            AC_MSG_RESULT([can't find the right libraries])\n            AC_MSG_ERROR([can't link a simple motif program])\n        fi\n\n        dnl this seems to be needed under IRIX and shouldn't do any harm\n        dnl elsewhere\n        AC_CHECK_LIB(Sgm, [SgCreateList], [libsgm_link=\" -lSgm\"])\n\n        save_CFLAGS=$CFLAGS\n        CFLAGS=\"$TOOLKIT_INCLUDE $CFLAGS\"\n\n        AC_CACHE_CHECK([for Motif 2],\n            wx_cv_lib_motif2,\n            AC_TRY_COMPILE([\n                            #include <Xm/Xm.h>\n                           ],\n                           [\n                            #if XmVersion < 2000\n                            Not Motif 2\n                            #endif\n                           ],\n                           wx_cv_lib_motif2=\"yes\",\n                           wx_cv_lib_motif2=\"no\"))\n        if test \"$wx_cv_lib_motif2\" = \"yes\"; then\n            AC_DEFINE(__WXMOTIF20__,1)\n        else\n            AC_DEFINE(__WXMOTIF20__,0)\n        fi\n\n        AC_CACHE_CHECK([whether Motif is Lesstif],\n            wx_cv_lib_lesstif,\n            AC_TRY_COMPILE([\n                            #include <Xm/Xm.h>\n                           ],\n                           [\n                            #if !defined(LesstifVersion) || LesstifVersion <= 0\n                            Not Lesstif\n                            #endif\n                           ],\n                           wx_cv_lib_lesstif=\"yes\",\n                           wx_cv_lib_lesstif=\"no\")\n        )\n        if test \"$wx_cv_lib_lesstif\" = \"yes\"; then\n            AC_DEFINE(__WXLESSTIF__,1)\n        else\n            AC_DEFINE(__WXLESSTIF__,0)\n        fi\n\n        CFLAGS=$save_CFLAGS\n\n        GUI_TK_LIBRARY=\"$GUI_TK_LIBRARY ${libsgm_link} -lXm ${libp_link} -lXmu -lXext -lXt ${libsm_ice_link} -lX11\"\n        TOOLKIT=MOTIF\n        GUIDIST=MOTIF_DIST\n    fi\n\n    dnl more tests common to X11 and Motif:\n    if test \"$wxUSE_X11\" = 1 -o \"$wxUSE_MOTIF\" = 1; then\n        dnl test for external libxpm if we're configured to use it\n        if test \"$wxUSE_LIBXPM\" = \"sys\"; then\n            AC_MSG_CHECKING(for Xpm library)\n            WX_PATH_FIND_LIBRARIES(Xpm)\n            if test \"$ac_find_libraries\" != \"\" ; then\n                WX_LINK_PATH_EXIST($ac_find_libraries,$GUI_TK_LIBRARY)\n                GUI_TK_LIBRARY=\"$GUI_TK_LIBRARY $ac_path_to_link\"\n                AC_MSG_RESULT(found in $ac_find_libraries)\n\n                AC_CACHE_CHECK([for X11/xpm.h],\n                    wx_cv_x11_xpm_h,\n                    [\n                        save_CFLAGS=$CFLAGS\n                        CFLAGS=\"$TOOLKIT_INCLUDE $CFLAGS\"\n\n                        AC_TRY_COMPILE(\n                            [\n                                #include <X11/xpm.h>\n                            ],\n                            [\n                                int version;\n                                version = XpmLibraryVersion();\n                            ],\n                            wx_cv_x11_xpm_h=yes,\n                            wx_cv_x11_xpm_h=no\n                        )\n\n                        CFLAGS=$save_CFLAGS\n                    ]\n                )\n\n                if test $wx_cv_x11_xpm_h = \"yes\"; then\n                    GUI_TK_LIBRARY=\"$GUI_TK_LIBRARY -lXpm\"\n                    AC_DEFINE(wxHAVE_LIB_XPM)\n                else\n                    AC_MSG_WARN([built-in less efficient XPM decoder will be used])\n                fi\n            fi\n\n        fi\n\n        dnl XShapeQueryExtension checks: first the library, then prototype\n        AC_CHECK_LIB([Xext], [XShapeQueryExtension],\n                     [\n                      GUI_TK_LIBRARY=\"$GUI_TK_LIBRARY -lXext\"\n                      wxHAVE_XEXT_LIB=1\n                     ],\n                     [], [$GUI_TK_LIBRARY -lX11])\n\n        if test \"$wxHAVE_XEXT_LIB\" = 1; then\n            save_CFLAGS=\"$CFLAGS\"\n            CFLAGS=\"$TOOLKIT_INCLUDE $CFLAGS\"\n\n            AC_MSG_CHECKING([for X11/extensions/shape.h])\n            AC_TRY_COMPILE([\n                            #include <X11/Xlib.h>\n                            #include <X11/extensions/shape.h>\n                           ],\n                           [\n                            int dummy1, dummy2;\n                            XShapeQueryExtension((Display*)NULL,\n                                                 (int*)NULL, (int*)NULL);\n                           ],\n                           [\n                            AC_DEFINE(HAVE_XSHAPE)\n                            AC_MSG_RESULT([found])\n                           ],\n                           [\n                            AC_MSG_RESULT([not found])\n                           ])\n            CFLAGS=\"$save_CFLAGS\"\n\n        fi\n    fi\n\n    if test \"$wxUSE_OSX_COCOA\" = 1; then\n        TOOLKIT=OSX_COCOA\n        GUIDIST=OSX_COCOA_DIST\n\n        TOOLCHAIN_DEFS=\"${TOOLCHAIN_DEFS} -D__WXMAC__ -D__WXOSX__\"\n    fi\n\n    if test \"$wxUSE_OSX_IPHONE\" = 1; then\n        TOOLKIT=OSX_IPHONE\n    fi\n\n\n    if test \"$wxUSE_QT\" = 1; then\n        TOOLKIT=QT\n        GUIDIST=QT_DIST\n        TOOLKIT_DIR=\"qt\"\n\n        if test -n \"$QT5_CUSTOM_DIR\" ; then\n            dnl the name of the directory where the files for this toolkit live\n            TOOLKIT_INCLUDE=\"${TOOLKIT_INCLUDE} -I${QT5_CUSTOM_DIR}/include\"\n            GUI_TK_LIBRARY=\"${GUI_TK_LIBRARY} -L${QT5_CUSTOM_DIR}/lib \\\n                            -lQt5Core -lQt5Widgets -lQt5Gui -lQt5OpenGL -lQt5Test \\\n                            -Wl,-rpath,${QT5_CUSTOM_DIR}/lib\"\n\n        elif test -z \"$PKG_CONFIG\" ; then\n            AC_MSG_ERROR([specify QT5_CUSTOM_DIR or make sure pkg-config is available to search for Qt5 libraries])\n\n        else\n            PKG_CHECK_MODULES(QT5,\n                          [Qt5Core Qt5Widgets Qt5Gui Qt5OpenGL Qt5Test],\n                [\n                TOOLKIT_INCLUDE=\"${TOOLKIT_INCLUDE} ${QT5_CFLAGS}\"\n                GUI_TK_LIBRARY=\"${GUI_TK_LIBRARY} ${QT5_LIBS}\"\n                if `pkg-config --variable qt_config Qt5Core | grep \"reduce_relocations\" >/dev/null`; then\n                    dnl build with position independent code if Qt needs it\n                    wxUSE_PIC=yes\n                fi\n                ],\n                [\n                    AC_MSG_ERROR([Qt5 libraries are not available])\n                ]\n            )\n        fi\n    fi\n    dnl the name of the directory where the files for this toolkit live\n    TOOLKIT_DIR=`echo ${TOOLKIT} | tr '[[A-Z]]' '[[a-z]]'`\n\n    if test \"$wxUSE_UNIVERSAL\" = \"yes\"; then\n        TOOLCHAIN_DEFS=\"${TOOLCHAIN_DEFS} -D__WXUNIVERSAL__\"\n        WIDGET_SET=univ\n    fi\n\n    dnl distribute samples/demos/utils with GUI versions\n    GUIDIST=\"${GUIDIST} SAMPLES_DIST DEMOS_DIST UTILS_DIST MISC_DIST\"\n    DISTDIR=\"wx\\$(TOOLKIT)\"\nelse\n    USE_GUI=0\n\n    dnl this doesn't quite work right for wxBase, but the places\n    dnl where it is wrong aren't fatal (yet) though.\n    TOOLKIT_DIR=\"base\"\n\n    dnl the sources, their dependenices and the headers\n    if test \"$USE_WIN32\" = 1 ; then\n        dnl yes, the toolkit for wxBase on win32 is actually MSW\n        dnl wxBase on unix does not need a 'TOOLKIT' defined.\n        TOOLKIT=\"MSW\"\n    fi\n\n    dnl distribute only wxBase sources/headers\n    GUIDIST=\"BASE_DIST\"\n    DISTDIR=\"wxBase\"\nfi\n\n\ndnl ---------------------------------------------------------------------------\ndnl Optional libraries included when system library is not used\ndnl ---------------------------------------------------------------------------\n\ndnl do this after test for X11 above so that we have a chance of finding Xlib.h\nif test \"$wxUSE_GUI\" = \"yes\"; then\n    if test \"$wxUSE_UNIX\" = \"yes\"; then\n        dnl defines HAVE_X11_XKBLIB_H\n        AC_CHECK_HEADERS([X11/Xlib.h],,, [ ])\n        AC_CHECK_HEADERS([X11/XKBlib.h],,,\n                         [\n                          #if HAVE_X11_XLIB_H\n                            #include <X11/Xlib.h>\n                          #endif\n                         ])\n    fi\nfi\n\n\ndnl ---------------------------------------------------------------------------\ndnl wxDisplay checks\ndnl ---------------------------------------------------------------------------\n\nUSE_XINERAMA=0\nif test \"$wxUSE_DISPLAY\" = \"yes\"; then\n    dnl Xinerama is used for wxGTK1/wxX11/wxMotif only\n    if test \"$wxUSE_MOTIF\" = 1 -o \"$wxUSE_X11\" = 1 -o \"$WXGTK1\" = 1; then\n        WX_FIND_LIB(Xinerama, XineramaQueryScreens)\n        if test \"$ac_find_libraries\" != \"\" ; then\n            if test \"$ac_find_libraries\" != \"std\" ; then\n              WX_LINK_PATH_EXIST([$ac_find_libraries],[$LDFLAGS])\n              if test \"$ac_path_to_link\" != \" -L/usr/lib\" ; then\n                  LDFLAGS=\"$LDFLAGS $ac_path_to_link\"\n              fi\n            fi\n            USE_XINERAMA=1\n            GUI_TK_LIBRARY=\"$GUI_TK_LIBRARY -lXinerama\"\n        else\n            AC_MSG_WARN([Xinerama not found; disabling wxDisplay])\n            wxUSE_DISPLAY=\"no\"\n        fi\n    fi\nfi\n\nif test \"$wxUSE_DISPLAY\" = \"yes\"; then\n    dnl wxGTK2 needs Xxf86vm as well as Xinerama-using ports from above\n    if test \"$USE_XINERAMA\" = 1 -o \"$wxUSE_GTK\" = 1; then\n        WX_FIND_LIB(Xxf86vm, XF86VidModeQueryExtension)\n        if test \"$ac_find_libraries\" != \"\" ; then\n            AC_CHECK_HEADERS([X11/extensions/xf86vmode.h],\n                             [\n                              GUI_TK_LIBRARY=\"$GUI_TK_LIBRARY -lXxf86vm\"\n                             ],\n                             [],\n                             [\n                                  #if HAVE_X11_XLIB_H\n                                    #include <X11/Xlib.h>\n                                  #endif\n                             ])\n        fi\n    fi\nfi\n\ndnl ---------------------------------------------------------------------------\ndnl X11 session management\ndnl ---------------------------------------------------------------------------\nif test \"$wxUSE_DETECT_SM\" = \"yes\"; then\n    if test \"$wxUSE_UNIX\" = \"yes\" -a \"$wxUSE_MAC\" != 1; then\n        WX_FIND_LIB(SM, SmcOpenConnection)\n        if test \"$ac_find_libraries\" != \"\" ; then\n            if test \"$ac_find_libraries\" != \"std\" ; then\n              WX_LINK_PATH_EXIST([$ac_find_libraries],[$LDFLAGS])\n              if test \"$ac_path_to_link\" != \" -L/usr/lib\" ; then\n                LDFLAGS=\"$LDFLAGS $ac_path_to_link\"\n              fi\n            fi\n            GUI_TK_LIBRARY=\"$GUI_TK_LIBRARY -lSM\"\n        else\n            AC_MSG_WARN([libSM not found; disabling session management detection])\n            wxUSE_DETECT_SM=\"no\"\n        fi\n    else\n        wxUSE_DETECT_SM=\"no\"\n    fi\nfi\n\n\ndnl ---------------------------------------------------------------------------\ndnl OpenGL libraries\ndnl ---------------------------------------------------------------------------\n\nUSE_OPENGL=0\nif test \"$wxUSE_OPENGL\" = \"yes\" -o \"$wxUSE_OPENGL\" = \"auto\"; then\n\n    dnl look in glcanvas.h for the list of platforms supported by wxGlCanvas:\n\n    if test \"$wxUSE_OSX_COCOA\" = 1; then\n        OPENGL_LIBS=\"-framework OpenGL -framework AGL\"\n    elif test \"$wxUSE_MSW\" = 1; then\n        OPENGL_LIBS=\"-lopengl32 -lglu32\"\n    elif test \"$wxUSE_MOTIF\" = 1 -o \"$wxUSE_X11\" = 1 -o \"$wxUSE_GTK\" = 1 -o \"$wxUSE_QT\" = 1; then\n\n        dnl adjust CPPFLAGS to include GL/gl.h location if necessary\n        dnl (/opt/graphics/OpenGL is for HP-UX systems, bug 925307)\n        AC_MSG_CHECKING([for OpenGL headers])\n        WX_PATH_FIND_INCLUDES([$SEARCH_INCLUDE /opt/graphics/OpenGL/include], GL/gl.h)\n        if test \"$ac_find_includes\" != \"\" ; then\n            AC_MSG_RESULT(found in $ac_find_includes)\n            WX_INCLUDE_PATH_EXIST($ac_find_includes, $CPPFLAGS)\n            CPPFLAGS=\"$CPPFLAGS $ac_path_to_include\"\n        else\n            AC_MSG_RESULT([not found])\n        fi\n\n        AC_CHECK_HEADER(GL/gl.h, [\n            AC_CHECK_HEADER(GL/glu.h, [\n                found_gl=0\n\n                WX_FIND_LIB(GL, glBegin, [/opt/graphics/OpenGL/lib])\n                if test \"$ac_find_libraries\" != \"\" ; then\n                    if test \"$ac_find_libraries\" != \"std\" ; then\n                      WX_LINK_PATH_EXIST([$ac_find_libraries],[$LDFLAGS])\n                      if test \"$ac_path_to_link\" != \" -L/usr/lib\" ; then\n                        LDFLAGS_GL=\"$ac_path_to_link\"\n                      fi\n                    fi\n\n                    dnl don't suppose that libGL and libGLU are always in the\n                    dnl same directory -- this is not true for some common\n                    dnl distributions\n                    WX_FIND_LIB(GLU, gluBeginCurve, [/opt/graphics/OpenGL/lib])\n                    if test \"$ac_find_libraries\" != \"\" ; then\n                      if test \"$ac_find_libraries\" != \"std\" ; then\n                        WX_LINK_PATH_EXIST([$ac_find_libraries],[$LDFLAGS])\n                        if test \"$ac_path_to_link\" != \" -L/usr/lib\" -a \\\n                                \"$ac_path_to_link\" != \"$LDFLAGS_GL\" ; then\n                          LDFLAGS_GL=\"$LDFLAGS_GL $ac_path_to_link\"\n                        fi\n                      fi\n\n                        found_gl=1\n                        OPENGL_LIBS=\"-lGL -lGLU\"\n\n                        if test \"$WXGTK3\" = 1; then\n                            if test \"$wxUSE_GLCANVAS_EGL\" != \"no\"; then\n                                PKG_CHECK_MODULES(EGL, [egl >= 1.5],\n                                    [\n                                        OPENGL_LIBS=\"$OPENGL_LIBS $EGL_LIBS\"\n                                        AC_DEFINE(wxUSE_GLCANVAS_EGL)\n                                        PKG_CHECK_MODULES(WAYLAND_EGL, [wayland-egl],\n                                            [\n                                                if test $wx_cv_gdk_wayland = \"yes\"; then\n                                                    OPENGL_LIBS=\"$OPENGL_LIBS $WAYLAND_EGL_LIBS\"\n                                                    have_wayland=1\n                                                fi\n                                            ],\n                                            [:]\n                                        )\n                                    ],\n                                    [\n                                        AC_MSG_NOTICE([EGL 1.5+ not available. Will use GLX.])\n                                    ]\n                                )\n                                if test \"$have_wayland\" != 1; then\n                                    AC_MSG_NOTICE([wxGLCanvas will not have Wayland support])\n                                fi\n                            fi\n                        fi\n                    fi\n                fi\n\n                if test \"$found_gl\" != 1; then\n                    WX_FIND_LIB(MesaGL, glEnable, [/opt/graphics/OpenGL/lib])\n                    if test \"$ac_find_libraries\" != \"\" ; then\n                      if test \"$ac_find_libraries\" != \"std\" ; then\n                        WX_LINK_PATH_EXIST([$ac_find_libraries],[$LDFLAGS])\n                        if test \"$ac_path_to_link\" != \" -L/usr/lib\" ; then\n                          LDFLAGS_GL=\"$LDFLAGS_GL $ac_path_to_link\"\n                        fi\n                      fi\n                      OPENGL_LIBS=\"-lMesaGL -lMesaGLU\"\n                    fi\n                fi\n            ],, [ ])\n        ],\n        [],\n        [ ])\n\n        if test \"x$OPENGL_LIBS\" = \"x\"; then\n            if test \"$wxUSE_OPENGL\" = \"yes\"; then\n                AC_MSG_ERROR([OpenGL libraries not available])\n            else\n                dnl case wxUSE_OPENGL=auto\n                AC_MSG_WARN([OpenGL libraries not available, disabling support for OpenGL])\n                wxUSE_OPENGL=no\n                USE_OPENGL=0\n            fi\n        fi\n    else\n        AC_MSG_WARN([wxGLCanvas not implemented for this port, library will be compiled without it.])\n        wxUSE_OPENGL=\"no\"\n    fi\n\n    if test \"$wxUSE_OPENGL\" = \"auto\"; then\n        dnl if the OpenGL libraries were unavailable, this would have been\n        dnl changed to \"no\" above, if it wasn't, change it to \"yes\" as we've\n        dnl verified that we can indeed use OpenGL\n        wxUSE_OPENGL=yes\n    fi\n\n    if test \"$wxUSE_OPENGL\" = \"yes\"; then\n        USE_OPENGL=1\n        AC_DEFINE(wxUSE_OPENGL)\n        AC_DEFINE(wxUSE_GLCANVAS)\n        SAMPLES_SUBDIRS=\"$SAMPLES_SUBDIRS opengl/cube opengl/penguin opengl/isosurf opengl/pyramid\"\n        SAMPLES_SUBTREES=\"$SAMPLES_SUBTREES opengl\"\n    fi\nfi\n\n\ndnl the symbol which allows conditional compilation for the given toolkit\nif test -n \"$TOOLKIT\" ; then\n    TOOLCHAIN_DEFS=\"${TOOLCHAIN_DEFS} -D__WX${TOOLKIT}__\"\nfi\n\n\ndnl --- the marker for quick search, leave it here: SHARED_LIB_SETUP ---\n\nif test \"$wxUSE_SHARED\" = \"yes\"; then\n\n    dnl use versioned symbols if available on the platform\n    WX_VERSIONED_SYMBOLS([\\$(wx_top_builddir)/version-script])\n\n    dnl test for GCC's visibility support (sets CFLAGS_VISIBILITY, which is\n    dnl assigned to CFLAGS and CXXFLAGS below)\n    if test \"$wxUSE_VISIBILITY\" != \"no\"; then\n        WX_VISIBILITY\n    fi\n\n    dnl test for Sun CC which can be used under both Solaris and Linux\n    if test \"x$SUNCXX\" = xyes; then\n        SAMPLES_RPATH_FLAG=\"-R\\$(wx_top_builddir)/lib\"\n        WXCONFIG_RPATH=\"-R\\$libdir\"\n    else\n    case \"${host}\" in\n      *-*-linux* | *-*-gnu* )\n        SAMPLES_RPATH_FLAG=\"-Wl,-rpath,\\$(wx_top_builddir)/lib\"\n        WXCONFIG_RPATH=\"-Wl,-rpath,\\$libdir\"\n        ;;\n\n      *-*-solaris2* )\n        dnl here we know that Sun CC is not used as we tested for it above,\n        dnl hence we must be using gcc\n\n        dnl newer versions of gcc need -isystem to compile X headers on\n        dnl Solaris (which use old style C syntax)\n        CPPFLAGS=\"$CPPFLAGS -isystem /usr/openwin/include\"\n\n        dnl gcc may use Sun's ld, in which case -rpath gives a confusing\n        dnl error message. We have to try both -Wl,-rpath and -Wl,-R:\n        saveLdflags=\"$LDFLAGS\"\n        LDFLAGS=\"$saveLdflags -Wl,-rpath,/\"\n        AC_MSG_CHECKING([if the linker accepts -rpath])\n        AC_TRY_LINK(\n            [],[],\n            [\n                AC_MSG_RESULT([yes])\n                SAMPLES_RPATH_FLAG=\"-Wl,-rpath,\\$(wx_top_builddir)/lib\"\n                WXCONFIG_RPATH=\"-Wl,-rpath,\\$libdir\"\n            ],[\n                AC_MSG_RESULT([no])\n                AC_MSG_CHECKING([if the linker accepts -R])\n                LDFLAGS=\"$saveLdflags -Wl,-R,/\"\n                AC_TRY_LINK(\n                    [],[],\n                    [\n                        AC_MSG_RESULT([yes])\n                        SAMPLES_RPATH_FLAG=\"-Wl,-R,\\$(wx_top_builddir)/lib\"\n                        WXCONFIG_RPATH=\"-Wl,-R,\\$libdir\"\n                    ],[\n                        AC_MSG_RESULT([no])\n                    ])\n            ])\n        LDFLAGS=\"$saveLdflags\"\n      ;;\n\n      *-*-darwin* )\n        install_name_tool=`which ${HOST_PREFIX}install_name_tool`\n        if test \"$install_name_tool\" -a -x \"$install_name_tool\"; then\n            DYLIB_RPATH_POSTLINK=\"${HOST_PREFIX}install_name_tool -id \\$@ \\$@\"\n            cat <<EOF >change-install-names\n#!/bin/sh\nlibnames=\\`cd \\${1} ; ls -1 | grep '\\.[[0-9]][[0-9]]*\\.dylib\\$'\\`\nchanges=''\nfor dep in \\${libnames} ; do\n    changes=\"\\${changes} -change \\${4}/\\${dep} \\${3}/\\${dep}\"\ndone\nfor i in \\${libnames} ; do\n    ${HOST_PREFIX}install_name_tool \\${changes} -id \\${3}/\\${i} \\${1}/\\${i}\ndone\nEOF\n            chmod +x change-install-names\n            DYLIB_RPATH_INSTALL=\"\\$(wx_top_builddir)/change-install-names \\${DESTDIR}\\${libdir} \\${DESTDIR}\\${bindir} \\${libdir} \\$(wx_top_builddir)/lib\"\n        fi\n\n        dnl the HEADER_PAD_OPTION is required by some wx samples to avoid the error:\n        dnl \"install_name_tool: changing install names can't be redone for: the_exe_name\n        dnl (for architecture ppc) because larger updated load commands do not fit\n        dnl (the program must be relinked)\"\n        HEADER_PAD_OPTION=\"-headerpad_max_install_names\"\n      ;;\n\n      *-*-cygwin* | *-*-mingw32* | *-*-mingw64* )\n        ;;\n\n      *-*-hpux* )\n        SAMPLES_RPATH_FLAG=\"-Wl,+b,\\$(wx_top_builddir)/lib\"\n        WXCONFIG_RPATH=\"-Wl,+b,\\$libdir\"\n        ;;\n\n    esac\n    fi\n\n    if test $wxUSE_RPATH = \"no\"; then\n        SAMPLES_RPATH_FLAG=''\n        DYLIB_PATH_POSTLINK=''\n        WXCONFIG_RPATH=''\n    fi\n\n    SHARED=1\n\nelse\n\n    config_linkage_component=\"-static\"\n    SHARED=0\n\nfi\n\n\nUNICODE=0\nlib_unicode_suffix=\nWX_CHARTYPE=\"ansi\"\nif test \"$wxUSE_UNICODE\" = \"yes\"; then\n    lib_unicode_suffix=u\n    WX_CHARTYPE=\"unicode\"\n    UNICODE=1\nfi\n\nWX_FLAVOUR=${WX_FLAVOUR:+-$WX_FLAVOUR}\nWX_LIB_FLAVOUR=`echo $WX_FLAVOUR | tr '-' '_'`\n\nDEBUG_INFO=0\nif test \"$wxUSE_DEBUG_INFO\" = \"yes\"; then\n    DEBUG_INFO=1\nfi\n\nWX_VERSION_TAG=`echo WX${lib_unicode_suffix}${WX_LIB_FLAVOUR}_${WX_RELEASE} | tr '[[a-z]]' '[[A-Z]]'`\n\nTOOLCHAIN_NAME=\"${TOOLKIT_DIR}${TOOLKIT_VERSION}${WIDGET_SET}${lib_unicode_suffix}${WX_LIB_FLAVOUR}-${WX_RELEASE}${HOST_SUFFIX}\"\n\nTOOLCHAIN_FULLNAME=\"${HOST_PREFIX}${TOOLKIT_DIR}${TOOLKIT_VERSION}${WIDGET_SET}-${WX_CHARTYPE}${config_linkage_component}-${WX_RELEASE}${WX_FLAVOUR}\"\n\ndnl library link name\ndnl These just save us from exporting lib_{unicode,flavour}_suffix.\ndnl If we ever need to do that, we won't need to keep these.\n\nif test \"$wxUSE_OSX_COCOA\" = 1; then\n    WX_LIBRARY_BASENAME_NOGUI=\"wx_base${lib_unicode_suffix}${WX_LIB_FLAVOUR}\"\nelse\n    WX_LIBRARY_BASENAME_NOGUI=\"wx_base${WXBASEPORT}${lib_unicode_suffix}${WX_LIB_FLAVOUR}\"\nfi\nWX_LIBRARY_BASENAME_GUI=\"wx_${TOOLKIT_DIR}${TOOLKIT_VERSION}${WIDGET_SET}${lib_unicode_suffix}${WX_LIB_FLAVOUR}\"\n\n\n\ndnl ---------------------------------------------------------------------------\ndnl Checks for typedefs\ndnl ---------------------------------------------------------------------------\n\ndnl   defines mode_t if not already defined\nAC_TYPE_MODE_T\ndnl   defines off_t if not already defined\nAC_TYPE_OFF_T\ndnl   defines pid_t if not already defined\nAC_TYPE_PID_T\ndnl   defines size_t if not already defined\nAC_TYPE_SIZE_T\n\ndnl sets HAVE_SSIZE_T if ssize_t is defined\nAC_CHECK_TYPES(ssize_t)\n\ndnl check what exactly size_t is on this machine - this is necessary to avoid\ndnl ambiguous overloads in several places, notably wx/string.h and wx/array.h\nAC_LANG_PUSH(C++) dnl tests below use overloaded functions and so need C++\nAC_CACHE_CHECK([if size_t is unsigned int],\n    wx_cv_size_t_is_uint,\n    [\n    dnl an obvious check like AC_TRY_COMPILE[struct Foo { ... };] doesn't work\n    dnl with egcs (at least) up to 1.1.1 as it allows you to compile duplicate\n    dnl methods in a local class (i.e. class inside a function) declaration\n    dnl without any objections!!\n    dnl\n    dnl hence the hack below: we must have Foo at global scope!\n    AC_TRY_COMPILE([#include <stddef.h>],\n        [\n            return 0; }\n\n            struct Foo { void foo(size_t); void foo(unsigned int); };\n\n            int bar() {\n        ],\n        wx_cv_size_t_is_uint=no,\n        wx_cv_size_t_is_uint=yes\n    )\n    ]\n)\n\nif test \"$wx_cv_size_t_is_uint\" = \"yes\"; then\n    AC_DEFINE(wxSIZE_T_IS_UINT)\nelse\n    AC_CACHE_CHECK([if size_t is unsigned long],\n        wx_cv_size_t_is_ulong,\n        AC_TRY_COMPILE([#include <stddef.h>],\n            [\n                return 0; }\n\n                struct Foo { void foo(size_t); void foo(unsigned long); };\n\n                int bar() {\n            ],\n            wx_cv_size_t_is_ulong=no,\n            wx_cv_size_t_is_ulong=yes\n        )\n    )\n\n    if test \"$wx_cv_size_t_is_ulong\" = \"yes\"; then\n        AC_DEFINE(wxSIZE_T_IS_ULONG)\n    fi\nfi\n\nAC_CACHE_CHECK([if wchar_t is separate type],\n    wx_cv_wchar_t_is_separate_type,\n    AC_TRY_COMPILE([#include <wchar.h>],\n        [\n            return 0; }\n\n            struct Foo { void foo(wchar_t);\n                         void foo(unsigned short);\n                         void foo(unsigned int);\n                         void foo(unsigned long); };\n\n            int bar() {\n        ],\n        wx_cv_wchar_t_is_separate_type=yes,\n        wx_cv_wchar_t_is_separate_type=no\n    )\n)\n\nif test \"$wx_cv_wchar_t_is_separate_type\" = \"yes\"; then\n    AC_DEFINE(wxWCHAR_T_IS_REAL_TYPE, 1)\nelse\n    AC_DEFINE(wxWCHAR_T_IS_REAL_TYPE, 0)\nfi\n\nAC_LANG_POP() dnl C++\n\ndnl ---------------------------------------------------------------------------\ndnl Checks for structures\ndnl ---------------------------------------------------------------------------\n\ndnl does passwd struct has the pw_gecos field?\nAC_CACHE_CHECK([for pw_gecos in struct passwd], wx_cv_struct_pw_gecos,\n    [\n        AC_TRY_COMPILE([#include <pwd.h>],\n             [\n                char *p;\n                struct passwd *pw;\n                p = pw->pw_gecos;\n             ],\n             [\n                wx_cv_struct_pw_gecos=yes\n             ],\n             [\n                wx_cv_struct_pw_gecos=no\n             ]\n        )\n    ]\n)\n\nif test \"$wx_cv_struct_pw_gecos\" = \"yes\"; then\n    AC_DEFINE(HAVE_PW_GECOS)\nfi\n\ndnl ---------------------------------------------------------------------------\ndnl Check for functions\ndnl ---------------------------------------------------------------------------\n\ndnl check for wcslen in all possible places\nWCSLEN_FOUND=0\nWCHAR_LINK=\nAC_CHECK_FUNCS(wcslen, WCSLEN_FOUND=1)\n\nif test \"$WCSLEN_FOUND\" = 0; then\n    if test \"$TOOLKIT\" = \"MSW\"; then\n        AC_CHECK_LIB(msvcrt, wcslen, WCHAR_OK=1)\n    else\n        AC_CHECK_LIB(w, wcslen, [\n                        WCHAR_LINK=\" -lw\"\n                        WCSLEN_FOUND=1\n                    ])\n    fi\nfi\n\nif test \"$WCSLEN_FOUND\" = 1; then\n    AC_DEFINE(HAVE_WCSLEN)\nfi\n\ndnl Notice that unlike the functions below, this one seems to be present in all\ndnl support OS X versions so it's OK to test for it here.\nAC_CHECK_FUNCS(wcsftime)\n\ndnl OS X provides the wide character functions (and also strnlen(), for some\ndnl reason) only starting from 10.7 so our tests would succeed if we're\ndnl configuring under 10.7 or later, yet the compiled programs would fail if\ndnl ran under 10.6 or earlier. To avoid this problem, define the corresponding\ndnl HAVE_XXX in wx/osx/config_xcode.h instead of testing for them here.\nif test \"$wxUSE_MAC\" != 1; then\n    AC_CHECK_FUNCS([strnlen wcsdup wcsnlen wcscasecmp wcsncasecmp])\nfi\n\ndnl On HP-UX aCC need this define to find mbstrtowcs() &c\ndnl Can't be used for g++ since the mbstate_t in wchar.h can conflict\ndnl with g++'s in <cwchar> (unless -D_INCLUDE__STDC_A1_SOURCE is in the\ndnl flags when g++ is configured, it will declare its own).\nif test \"$USE_HPUX\" = 1 -a \"$GCC\" != \"yes\"; then\n    CPPFLAGS=\"-D_INCLUDE__STDC_A1_SOURCE $CPPFLAGS\"\nfi\n\ndnl Try to use wcsrtombs instead of wcstombs which is buggy in old GNU\ndnl libc versions if possible. AC_CHECK_FUNCS only checks it's in the\ndnl library, not the header, so do a header check for mbstate_t first.\nAC_CHECK_TYPES([mbstate_t],\n               [AC_CHECK_FUNCS(wcsrtombs)],\n               [],\n               [#include <wchar.h>])\n\ndnl check for vsnprintf() -- a safe version of vsprintf())\ndnl\ndnl the trouble here is that on some systems (e.g. HP-UX 10) this function is\ndnl present in libc but not in the system headers and so AC_CHECK_FUNCS (which,\ndnl stupidly, provides a dummy function declaration inside its extension)\ndnl succeeds, even with C++ compiler, but the compilation of wxWidgets fails\ndnl\ndnl so we first check if the function is in the library\ndnl\ndnl FIXME: replace this mess with WX_CHECK_FUNCS()\nAC_CHECK_FUNCS(snprintf vsnprintf vsscanf)\n\nAC_LANG_PUSH(C++)\nif test \"$ac_cv_func_vsnprintf\" = \"yes\"; then\n    dnl yes it is -- now check if it is in the headers\n    AC_CACHE_CHECK([for vsnprintf declaration], wx_cv_func_vsnprintf_decl,\n        [\n            dnl our troubles are not over: HP-UX 11 prototypes vsnprintf() as\n            dnl taking \"char *\" and not \"const char *\" so test for this too\n            AC_TRY_COMPILE(\n                [\n                    #include <stdio.h>\n                    #include <stdarg.h>\n                ],\n                [\n                    char *buf;\n                    va_list ap;\n                    vsnprintf(buf, 10u, \"%s\", ap);\n                ],\n                wx_cv_func_vsnprintf_decl=yes,\n                wx_cv_func_vsnprintf_decl=no\n            )\n        ]\n    )\n\n    if test \"$wx_cv_func_vsnprintf_decl\" = \"yes\"; then\n        AC_DEFINE(HAVE_VSNPRINTF_DECL)\n\n        dnl we know there is a vsnprintf declaration, but some old headers\n        dnl may have one taking a \"char *\" format instead of \"const char *\"\n        AC_CACHE_CHECK([if vsnprintf declaration is broken], wx_cv_func_broken_vsnprintf_decl,\n            [\n                AC_TRY_COMPILE(\n                    [\n                        #include <stdio.h>\n                        #include <stdarg.h>\n                        #ifdef __MSL__\n                        #if __MSL__ >= 0x6000\n                        namespace std {}\n                        using namespace std;\n                        #endif\n                        #endif\n                    ],\n                    [\n                        char *buf;\n                        va_list ap;\n                        const char *fmt = \"%s\";\n                        vsnprintf(buf, 10u, fmt, ap);\n                    ],\n                    wx_cv_func_broken_vsnprintf_decl=no,\n                    wx_cv_func_broken_vsnprintf_decl=yes\n                )\n            ]\n        )\n\n        if test \"$wx_cv_func_broken_vsnprintf_decl\" = \"yes\"; then\n            AC_DEFINE(HAVE_BROKEN_VSNPRINTF_DECL)\n        fi\n    fi\nfi\n\ndnl the same as above but for snprintf() now: it's not present in at least AIX\ndnl 4.2 headers\nif test \"$ac_cv_func_snprintf\" = \"yes\"; then\n    AC_CACHE_CHECK([for snprintf declaration], wx_cv_func_snprintf_decl,\n        [\n            AC_TRY_COMPILE(\n                [\n                    #include <stdio.h>\n                    #include <stdarg.h>\n                    #ifdef __MSL__\n                    #if __MSL__ >= 0x6000\n                    namespace std {}\n                    using namespace std;\n                    #endif\n                    #endif\n                ],\n                [\n                    char *buf;\n                    snprintf(buf, 10u, \"%s\", \"wx\");\n                ],\n                wx_cv_func_snprintf_decl=yes,\n                wx_cv_func_snprintf_decl=no\n            )\n        ]\n    )\n\n    if test \"$wx_cv_func_snprintf_decl\" = \"yes\"; then\n        AC_DEFINE(HAVE_SNPRINTF_DECL)\n    fi\n\n    if test \"$wxUSE_PRINTF_POS_PARAMS\" = \"yes\"; then\n\n        dnl check if snprintf() has support for positional arguments\n        dnl NB: if snprintf() has positional support we can safely suppose that also\n        dnl     other *printf() functions support them as they all belong to the same\n        dnl     family and they all fallback to the same implementation\n        AC_CACHE_CHECK([if snprintf supports positional arguments], wx_cv_func_snprintf_pos_params,\n            [\n                AC_TRY_RUN(\n                    [\n                        #include <stdio.h>\n\n                        int main (void)\n                        {\n                            char buffer[128];\n                            snprintf (buffer, 128, \"%2$d %3$d %1$d\", 1, 2, 3);\n                            if (strcmp (\"2 3 1\", buffer) == 0)\n                                exit (0);\n                            exit (1);\n                        }\n                    ],\n                    wx_cv_func_snprintf_pos_params=no,\n                    wx_cv_func_snprintf_pos_params=yes,\n                    dnl be pessimistic when cross-compiling\n                    [\n                        AC_MSG_WARN([Assuming Unix98 printf() is not available,\ndefine HAVE_UNIX98_PRINTF as 1 in setup.h if it is available.])\n                        wx_cv_func_snprintf_pos_params=no\n                    ]\n                )\n            ]\n        )\n\n        if test \"$wx_cv_func_snprintf_pos_params\" = \"yes\"; then\n            AC_DEFINE(HAVE_UNIX98_PRINTF)\n        fi\n    fi\nfi\n\ndnl the same as above but for vsscanf() now: it's not present in at least\ndnl Solaris 9 headers for gcc-3.4 (due to fixinclude's processing of stdio.h)\nif test \"$ac_cv_func_vsscanf\" = \"yes\"; then\n    AC_CACHE_CHECK([for vsscanf declaration], wx_cv_func_vsscanf_decl,\n        [\n            AC_TRY_COMPILE(\n                [\n                    #include <stdio.h>\n                    #include <stdarg.h>\n                    #ifdef __MSL__\n                    #if __MSL__ >= 0x6000\n                    namespace std {}\n                    using namespace std;\n                    #endif\n                    #endif\n                ],\n                [\n                    char *buf;\n                    va_list args;\n                    vsscanf(buf, \"%s\", args);\n                ],\n                wx_cv_func_vsscanf_decl=yes,\n                wx_cv_func_vsscanf_decl=no\n            )\n        ]\n    )\n\n    if test \"$wx_cv_func_vsscanf_decl\" = \"yes\"; then\n        AC_DEFINE(HAVE_VSSCANF_DECL)\n\n        dnl we know there is a vsscanf() declaration, but it can be broken by\n        dnl declaring vsscanf() as taking a non-const first argument (this\n        dnl happens at least under HP-UX 11.31, see #15638).\n        AC_CACHE_CHECK([if vsscanf() declaration is broken], wx_cv_func_broken_vsscanf_decl,\n            [\n                AC_TRY_COMPILE(\n                    [\n                        #include <stdio.h>\n                        #include <stdarg.h>\n                        #ifdef __MSL__\n                        #if __MSL__ >= 0x6000\n                        namespace std {}\n                        using namespace std;\n                        #endif\n                        #endif\n                    ],\n                    [\n                        const char *buf;\n                        va_list args;\n                        vsscanf(buf, \"%s\", args);\n                    ],\n                    wx_cv_func_broken_vsscanf_decl=no,\n                    wx_cv_func_broken_vsscanf_decl=yes\n                )\n            ]\n        )\n\n        if test \"$wx_cv_func_broken_vsscanf_decl\" = \"yes\"; then\n            AC_DEFINE(HAVE_BROKEN_VSSCANF_DECL)\n        fi\n    fi\nfi\nAC_LANG_POP()\n\ndnl also look if we have wide char IO functions, notice that [f]putws are\ndnl declared in special widec.h under Solaris\nwchar_headers=\"#include <stdio.h>\n#include <wchar.h>\"\ncase \"${host}\" in\n    *-*-solaris2* )\n        AC_CHECK_HEADERS(widec.h,,, [AC_INCLUDES_DEFAULT()])\n        if test \"$ac_cv_header_widec_h\" = \"yes\"; then\n            wchar_headers=\"$wchar_headers\n#include <widec.h>\"\n        fi\nesac\n\nWX_CHECK_FUNCS(putws fputws wprintf vswprintf vswscanf,,,\n               [$wchar_headers])\n\ndnl MinGW has a vswprintf with a different prototype, and\ndnl a _vsnwprintf with the correct prototype, but AC_CHECK_FUNCS\ndnl finds it even if it is not declared in some versions...\nAC_MSG_CHECKING([for _vsnwprintf])\nAC_TRY_COMPILE([#include <wchar.h>],\n               [&_vsnwprintf;],\n               [AC_MSG_RESULT([yes])\n                AC_DEFINE(HAVE__VSNWPRINTF)],\n               [AC_MSG_RESULT([no])]);\n\nif test \"$wxUSE_FILE\" = \"yes\"; then\n    WX_CHECK_FUNCS(fsync)\nfi\n\ndnl at least under IRIX with mipsPro the C99 round() function is available when\ndnl building using the C compiler but not when using C++ one\nAC_CACHE_CHECK([for round], wx_cv_func_round, [\nAC_LANG_PUSH(C++)\nAC_TRY_LINK(\n    [#include <math.h>],\n    [return int(round(0.0))],\n    wx_cv_func_round=yes, wx_cv_func_round=no)\nAC_LANG_POP()\n])\nif test \"$wx_cv_func_round\" = yes; then\n    AC_DEFINE(HAVE_ROUND)\nfi\n\ndnl the following tests are for Unix(like) systems only\nif test \"$TOOLKIT\" != \"MSW\"; then\n\ndnl check for available version of iconv()\nif test \"$wxUSE_LIBICONV\" != \"no\" ; then\n    AC_LANG_PUSH(C++)\n    AM_ICONV\n    AC_LANG_POP()\n    LIBS=\"$LIBICONV $LIBS\"\nfi\n\ndnl check for POSIX signals if we need them\nif test \"$wxUSE_ON_FATAL_EXCEPTION\" = \"yes\" -a \"$wxUSE_UNIX\" = \"yes\"; then\n    AC_CHECK_FUNCS(sigaction)\n\n    if test \"$ac_cv_func_sigaction\" = \"no\"; then\n        AC_MSG_WARN([No POSIX signal functions on this system, wxApp::OnFatalException will not be called])\n        wxUSE_ON_FATAL_EXCEPTION=no\n    fi\n\n    if test \"$wxUSE_ON_FATAL_EXCEPTION\" = \"yes\"; then\n      AC_CACHE_CHECK([for sa_handler type], wx_cv_type_sa_handler,\n      [\n        dnl C compiler happily compiles the code even if there is type mismatch\n        AC_LANG_PUSH(C++)\n        AC_TRY_COMPILE([#include <signal.h>],\n                     [\n                        extern void testSigHandler(int);\n\n                        struct sigaction sa;\n                        sa.sa_handler = testSigHandler;\n                     ], [\n                        wx_cv_type_sa_handler=int\n                     ], [\n                        wx_cv_type_sa_handler=void\n                     ])\n        AC_LANG_POP()\n      ])\n\n      AC_DEFINE_UNQUOTED(wxTYPE_SA_HANDLER, $wx_cv_type_sa_handler)\n    fi\nfi\n\ndnl backtrace() and backtrace_symbols() for wxStackWalker\nif test \"$wxUSE_STACKWALKER\" = \"yes\" -a \"$wxUSE_UNIX\" = \"yes\"; then\n    AC_CACHE_CHECK([for backtrace()], wx_cv_func_backtrace,\n        [\n            AC_LANG_PUSH(C++)\n            AC_TRY_COMPILE([#include <execinfo.h>],\n                [\n                    void *trace[1];\n                    char **messages;\n                    backtrace(trace, 1);\n                    messages = backtrace_symbols(trace, 1);\n                ],\n                wx_cv_func_backtrace=yes,\n                wx_cv_func_backtrace=no\n            )\n            AC_LANG_POP()\n        ]\n    )\n\n    dnl Under BSD it can require linking with libexecinfo.\n    AC_SEARCH_LIBS(backtrace, execinfo, , [wx_cv_func_backtrace=no])\n\n    if test \"$wx_cv_func_backtrace\" = \"no\"; then\n        AC_MSG_WARN([backtrace() is not available, wxStackWalker will not be available])\n        wxUSE_STACKWALKER=no\n    else\n        if test \"$ac_cv_header_cxxabi_h\" = \"yes\"; then\n            AC_CACHE_CHECK([for __cxa_demangle() in <cxxabi.h>], wx_cv_func_cxa_demangle,\n                [\n                    AC_LANG_PUSH(C++)\n                    AC_TRY_LINK([#include <cxxabi.h>],\n                        [\n                            int rc;\n                            __cxxabiv1::__cxa_demangle(\"foo\", 0, 0, &rc);\n                        ],\n                        wx_cv_func_cxa_demangle=yes,\n                        wx_cv_func_cxa_demangle=no\n                    )\n                    AC_LANG_POP()\n                ]\n            )\n        else\n            wx_cv_func_cxa_demangle=no\n        fi\n\n        if test \"$wx_cv_func_cxa_demangle\" = \"yes\"; then\n            AC_DEFINE(HAVE_CXA_DEMANGLE)\n        fi\n    fi\nfi\n\nif test \"$wxUSE_STACKWALKER\" = \"yes\" -a \"$USE_WIN32\" != 1 -a \"$USE_UNIX\" != 1; then\n    AC_MSG_WARN([wxStackWalker is only available on Win32 and UNIX... disabled])\n    wxUSE_STACKWALKER=no\nfi\n\n\ndnl check for the function for temp files creation\nAC_CHECK_FUNCS(mkstemp mktemp, break)\n\ndnl get the library function to use for wxGetDiskSpace(): it is statfs() under\ndnl Linux and *BSD and statvfs() under Solaris\nAC_CACHE_CHECK(for statfs, wx_cv_func_statfs,\n    AC_TRY_COMPILE(\n        [\n             #if defined(__BSD__)\n             #include <sys/param.h>\n             #include <sys/mount.h>\n             #else\n             #include <sys/vfs.h>\n             #endif\n        ],\n        [\n             long l;\n             struct statfs fs;\n             statfs(\"/\", &fs);\n             l = fs.f_bsize;\n             l += fs.f_blocks;\n             l += fs.f_bavail;\n        ],\n         wx_cv_func_statfs=yes,\n         wx_cv_func_statfs=no\n    )\n)\n\nif test \"$wx_cv_func_statfs\" = \"yes\"; then\n    dnl check whether we have its dcelaration too: some systems (AIX 4) lack it\n    AC_CACHE_CHECK(for statfs declaration, wx_cv_func_statfs_decl,\n        AC_LANG_PUSH(C++)\n        AC_TRY_COMPILE(\n            [\n                 #if defined(__BSD__)\n                 #include <sys/param.h>\n                 #include <sys/mount.h>\n                 #else\n                 #include <sys/vfs.h>\n                 #endif\n            ],\n            [\n                struct statfs fs;\n                statfs(\"\", &fs);\n            ],\n            wx_cv_func_statfs_decl=yes,\n            wx_cv_func_statfs_decl=no\n        )\n        AC_LANG_POP()\n    )\n\n    if test \"$wx_cv_func_statfs_decl\" = \"yes\"; then\n        AC_DEFINE(HAVE_STATFS_DECL)\n    fi\n\n    wx_cv_type_statvfs_t=\"struct statfs\"\n    AC_DEFINE(HAVE_STATFS)\nelse\n    AC_CACHE_CHECK(for statvfs, wx_cv_func_statvfs,\n        AC_TRY_COMPILE(\n            [\n                #include <stddef.h>\n                #include <sys/statvfs.h>\n            ],\n            [\n                statvfs(\"/\", NULL);\n            ],\n            wx_cv_func_statvfs=yes,\n            wx_cv_func_statvfs=no\n        )\n    )\n\n    if test \"$wx_cv_func_statvfs\" = \"yes\"; then\n        dnl we also have to check whether we should use statvfs_t (works under\n        dnl Solaris 8, doesn't work under Solaris 7) or \"struct statvfs\" (vice\n        dnl versa) as the argument for statvfs in 64 bit off_t mode (in 32 bit\n        dnl mode both work fine)\n        dnl\n        dnl for this check C++ compiler has to be used as passing incompatible\n        dnl pointers is just a warning and not an error in C\n        AC_CACHE_CHECK(for statvfs argument type, wx_cv_type_statvfs_t,\n            AC_LANG_PUSH(C++)\n            AC_TRY_COMPILE(\n                [\n                    #include <sys/statvfs.h>\n                ],\n                [\n                    long l;\n                    statvfs_t fs;\n                    statvfs(\"/\", &fs);\n                    l = fs.f_bsize;\n                    l += fs.f_blocks;\n                    l += fs.f_bavail;\n                ],\n                wx_cv_type_statvfs_t=statvfs_t,\n                [\n                    AC_TRY_COMPILE(\n                        [\n                            #include <sys/statvfs.h>\n                        ],\n                        [\n                            long l;\n                            struct statvfs fs;\n                            statvfs(\"/\", &fs);\n                            l = fs.f_bsize;\n                            l += fs.f_blocks;\n                            l += fs.f_bavail;\n                        ],\n                        wx_cv_type_statvfs_t=\"struct statvfs\",\n                        wx_cv_type_statvfs_t=\"unknown\"\n                    )\n                ]\n            )\n            AC_LANG_POP()\n        )\n\n        if test \"$wx_cv_type_statvfs_t\" != \"unknown\"; then\n            AC_DEFINE(HAVE_STATVFS)\n        fi\n    else\n        dnl set it for the test below\n        wx_cv_type_statvfs_t=\"unknown\"\n    fi\nfi\n\nif test \"$wx_cv_type_statvfs_t\" != \"unknown\"; then\n    AC_DEFINE_UNQUOTED(WX_STATFS_T, $wx_cv_type_statvfs_t)\nelse\n    AC_MSG_WARN([wxGetDiskSpace() function won't work without statfs()])\nfi\n\ndnl check for fcntl() or at least flock() needed by Unix implementation of\ndnl wxSingleInstanceChecker\nif test \"$wxUSE_SNGLINST_CHECKER\" = \"yes\" -a \"$USE_WIN32\" != 1 ; then\n    AC_CHECK_FUNCS(fcntl flock, break)\n\n    if test \"$ac_cv_func_fcntl\" != \"yes\" -a \"$ac_cv_func_flock\" != \"yes\"; then\n        AC_MSG_WARN(wxSingleInstanceChecker not available)\n        wxUSE_SNGLINST_CHECKER=no\n    fi\nfi\n\ndnl look for a function to modify the environment\nAC_CHECK_FUNCS(setenv putenv, break)\nif test \"$ac_cv_func_setenv\" = \"yes\"; then\n    AC_CHECK_FUNCS(unsetenv)\nfi\n\nif test \"$USE_DARWIN\" = 1; then\n    dnl Mac OS X/Darwin has both nanosleep and usleep\n    dnl but only usleep is defined in unistd.h\n    AC_DEFINE(HAVE_USLEEP)\nelse\n    dnl try nanosleep() in libc and libposix4, if this fails - usleep()\n    POSIX4_LINK=\n    AC_CHECK_FUNCS(nanosleep,\n        AC_DEFINE(HAVE_NANOSLEEP),\n        [\n            AC_CHECK_LIB(posix4, nanosleep,\n                [\n                    AC_DEFINE(HAVE_NANOSLEEP)\n                    POSIX4_LINK=\" -lposix4\"\n                ],\n                [\n                    WX_CHECK_FUNCS(usleep,,\n                                   AC_MSG_ERROR([wxMicroSleep() can't be implemented])\n                    )\n                ]\n            )\n        ]\n    )\nfi\n\ndnl check for uname (POSIX) and gethostname (BSD)\nWX_CHECK_FUNCS(uname,,,[#include <sys/utsname.h>])\nif test \"$wx_cv_func_uname\" != yes; then\n    WX_CHECK_FUNCS(gethostname)\nfi\n\nWX_CHECK_FUNCS(strtok_r, [], [], [#define _REENTRANT])\n\ndnl check for inet_addr and inet_aton (these may live either in libc, or in\ndnl libnsl or libresolv or libsocket or libnetwork under Haiku)\nINET_LINK=\nAC_CHECK_FUNCS(inet_addr,\n    AC_DEFINE(HAVE_INET_ADDR),\n    [\n        AC_CHECK_LIB(nsl, inet_addr,\n            INET_LINK=\"nsl\",\n            [\n                AC_CHECK_LIB(resolv, inet_addr,\n                    INET_LINK=\"resolv\",\n                    [\n                        AC_CHECK_LIB(socket, inet_addr,\n                            INET_LINK=\"socket\",\n                            [\n                                AC_CHECK_LIB(network, inet_addr,\n                                   INET_LINK=\"network\"\n                                )\n                            ]\n                        )\n                    ]\n                )\n            ]\n        )\n    ]\n)\n\nAC_CHECK_FUNCS(inet_aton,\n        AC_DEFINE(HAVE_INET_ATON),\n        [\n            dnl only check it in the same lib\n            AC_CHECK_LIB($INET_LINK, inet_aton, AC_DEFINE(HAVE_INET_ATON))\n        ])\n\nif test \"x$INET_LINK\" != \"x\"; then\n    AC_DEFINE(HAVE_INET_ADDR)\n    INET_LINK=\" -l$INET_LINK\"\nfi\n\nWX_CHECK_FUNCS(fdopen)\n\nif test \"$wxUSE_TARSTREAM\" = \"yes\"; then\n    WX_CHECK_FUNCS(sysconf)\n\n    WX_CHECK_FUNCS(getpwuid_r, [], [],\n                   [\n                    #define _REENTRANT\n                    #include <pwd.h>\n                   ],\n                   [[\n                    struct passwd pw, *ppw;\n                    char buf[1024];\n                    getpwuid_r(0, &pw, buf, sizeof(buf), &ppw)\n                   ]])\n\n    WX_CHECK_FUNCS(getgrgid_r, [], [],\n                   [\n                    #define _REENTRANT\n                    #include <grp.h>\n                   ],\n                   [[\n                    struct group grp, *pgrp;\n                    char buf[1024];\n                    getgrgid_r(0, &grp, buf, sizeof(buf), &pgrp)\n                   ]])\nfi\n\nfi\n\n\ndnl ===========================================================================\ndnl Now we have all the info we need - use it!\ndnl ===========================================================================\n\ndnl flush the cache\nAC_CACHE_SAVE\n\ndnl ---------------------------------------------------------------------------\ndnl thread support for Unix (for Win32 and OS/2 see past\ndnl                          the next matching \"else\")\ndnl ---------------------------------------------------------------------------\n\ndnl under MSW (except mingw32) we always have thread support\nif test \"$TOOLKIT\" != \"MSW\"; then\n\n    dnl the code below:\n    dnl\n    dnl   defines THREADS_LINK and THREADS_CFLAGS which are the options\n    dnl   necessary to build the MT programs for the linker and compiler\n    dnl   respectively\n    dnl\n    dnl   sets wxUSE_THREADS=1 if thread support is activated\n\n    THREADS_LINK=\n    THREADS_CFLAGS=\n\n    if test \"$wxUSE_THREADS\" = \"yes\" ; then\n        if test \"$USE_BEOS\" = 1; then\n            AC_MSG_WARN([BeOS threads are not yet supported... disabled])\n            wxUSE_THREADS=\"no\"\n        fi\n    fi\n\n    if test \"$wxUSE_THREADS\" = \"yes\" ; then\n        dnl find if POSIX threads are available\n        dnl\n        dnl the tests here are based on ACX_PTHREAD macro from autoconf macro\n        dnl archive from http://ac-archive.sourceforge.net/\n        dnl\n        dnl thanks to Steven G. Johnson <stevenj@alum.mit.edu> and Alejandro\n        dnl Forero Cuervo <bachue@bachue.com> for the original code\n\n        dnl TODO: cache the result\n\n        dnl define the list of the thread options to try in the loop below\n        dnl with the convention that anything starting with '-' is a cpp flag\n        dnl while anything else is a library (i.e. there is an implicit \"-l\")\n        THREAD_OPTS=\"-pthread\"\n        if test \"x$SUNCXX\" = xyes; then\n            THREAD_OPTS=\"-mt lthread $THREAD_OPTS\"\n        fi\n\n        case \"${host}\" in\n          *-*-solaris2* | *-*-sunos4* )\n                if test \"x$GCC\" = \"xyes\"; then\n                    dnl Solaris/gcc combination use this one for some reason\n                    THREAD_OPTS=\"-pthreads $THREAD_OPTS\"\n                fi\n                ;;\n          *-*-freebsd*)\n                dnl look, in order, for the kernel threads, then Linux threads\n                dnl and finally the userland threads\n                THREAD_OPTS=\"-kthread lthread $THREAD_OPTS c_r\"\n                ;;\n          *-*-darwin* | *-*-cygwin* )\n                dnl Darwin / Mac OS X just uses -lpthread tested below\n                dnl and so does Cygwin\n                THREAD_OPTS=\"\"\n                ;;\n          *-*-aix*)\n                dnl AIX calls the library libpthreads - thanks IBM!\n                THREAD_OPTS=\"pthreads\"\n                ;;\n          *-hp-hpux* )\n                if test \"x$GCC\" = \"xyes\"; then\n                    dnl g++ versions before 3.3.2 don't support -pthread.\n                    $CXX -dumpspecs | grep 'pthread:' >/dev/null ||\n                        THREAD_OPTS=\"\"\n                else\n                    dnl HP-UX aCC (tested with version B3910B A.06.05 [Jul 25\n                    dnl 2005]) supports -mt\n                    THREAD_OPTS=\"-mt\"\n                fi\n                ;;\n\n          *-*-irix* )\n                dnl gcc under IRIX doesn't seem to like -pthread, but it\n                dnl doesn't give an error for it neither, just a warning\n                dnl message -- but this is still very annoying\n                if test \"x$GCC\" = \"xyes\"; then\n                    THREAD_OPTS=\"\"\n                fi\n                ;;\n\n          *-*-qnx*)\n                dnl under QNX thread functions are in libc so we don't need any\n                dnl special options to link with them\n                THREAD_OPTS=\"\"\n                ;;\n\n          *-*-*UnixWare*)\n                dnl flying by man pages here: Caldera online docs use this\n                if test \"x$GCC\" != \"xyes\"; then\n                    THREAD_OPTS=\"-Ethread\"\n                fi\n                ;;\n        esac\n\n        case \"${host}\" in\n            *-*-qnx*)\n                dnl -lpthread works, i.e. AC_TRY_LINK() would pass, but results\n                dnl in warnings and is not needed under QNX so try without it\n                dnl first\n                THREAD_OPTS=\"none pthread\"\n                ;;\n\n            *)\n                dnl simply linking with libpthread should make the test below\n                dnl work but it's far from certain that the threaded programs\n                dnl compiled without any special switches actually work, so try\n                dnl it after all the others\n                THREAD_OPTS=\"$THREAD_OPTS pthread none\"\n                ;;\n        esac\n\n        dnl now test for all possibilities\n        THREADS_OK=no\n        for flag in $THREAD_OPTS; do\n            case $flag in\n                none)\n                    AC_MSG_CHECKING([whether pthreads work without any flags])\n                    ;;\n\n                -*)\n                    AC_MSG_CHECKING([whether pthreads work with $flag])\n                    THREADS_CFLAGS=\"$flag\"\n                    ;;\n\n                *)\n                    AC_MSG_CHECKING([for the pthreads library -l$flag])\n                    THREADS_LINK=\"-l$flag\"\n                    ;;\n              esac\n\n              save_LIBS=\"$LIBS\"\n              save_CFLAGS=\"$CFLAGS\"\n              LIBS=\"$THREADS_LINK $LIBS\"\n              CFLAGS=\"$THREADS_CFLAGS $CFLAGS\"\n\n              AC_TRY_LINK([#include <pthread.h>],\n                          [pthread_create(0,0,0,0);],\n                          THREADS_OK=yes)\n\n              LIBS=\"$save_LIBS\"\n              CFLAGS=\"$save_CFLAGS\"\n\n              AC_MSG_RESULT($THREADS_OK)\n              if test \"x$THREADS_OK\" = \"xyes\"; then\n                      break;\n              fi\n\n              THREADS_LINK=\"\"\n              THREADS_CFLAGS=\"\"\n      done\n\n      if test \"x$THREADS_OK\" != \"xyes\"; then\n          wxUSE_THREADS=no\n          AC_MSG_WARN([No thread support on this system... disabled])\n      else\n          dnl yes, these special compiler flags should be used with the\n          dnl linker as well\n          dnl\n          dnl NB: add them to LDFLAGS immediately because we need them to be\n          dnl     used for the subsequent tests some of which can fail without\n          dnl     MT support, hence the reason for the duplication below:\n          dnl     adding them just to WXCONFIG_LDFLAGS and adding the entire\n          dnl     contents of the latter to LDFLAGS in the end is not enough.\n          LDFLAGS=\"$THREADS_CFLAGS $LDFLAGS\"\n          WXCONFIG_LDFLAGS=\"$THREADS_CFLAGS $WXCONFIG_LDFLAGS\"\n          LIBS=\"$THREADS_LINK $LIBS\"\n\n          AC_MSG_CHECKING([if more special flags are required for pthreads])\n          flag=no\n          case \"${host}\" in\n            *-aix*)\n                dnl again quoting from\n                dnl http://www-1.ibm.com/servers/esdd/articles/gnu.html:\n                dnl\n                dnl     When compiling and linking with -pthread, the library\n                dnl     search path should include -L/usr/lib/threads at the\n                dnl     beginning of the path.\n                LDFLAGS=\"-L/usr/lib/threads $LDFLAGS\"\n                WXCONFIG_LDFLAGS=\"-L/usr/lib/threads $WXCONFIG_LDFLAGS\"\n                flag=\"-D_THREAD_SAFE\"\n                ;;\n            *-freebsd*)\n                flag=\"-D_THREAD_SAFE\"\n                ;;\n            *-hp-hpux* )\n                flag=\"-D_REENTRANT\"\n                if test \"x$GCC\" != \"xyes\"; then\n                    dnl see http://docs.hp.com/hpux/onlinedocs/2213/threads.htm\n                    flag=\"$flag -D_RWSTD_MULTI_THREAD\"\n                fi\n                ;;\n            *solaris* | alpha*-osf*)\n                flag=\"-D_REENTRANT\"\n                ;;\n          esac\n          AC_MSG_RESULT(${flag})\n          if test \"x$flag\" != xno; then\n              THREADS_CFLAGS=\"$THREADS_CFLAGS $flag\"\n          fi\n\n          dnl don't add these options to CPPFLAGS as cpp might not know them\n          WXCONFIG_CFLAGS=\"$WXCONFIG_CFLAGS $THREADS_CFLAGS\"\n      fi\n    fi\n\n    dnl do other tests only if we are using threads\n    if test \"$wxUSE_THREADS\" = \"yes\" ; then\n        AC_CHECK_FUNCS(pthread_setconcurrency,\n            AC_DEFINE(HAVE_PTHREAD_SET_CONCURRENCY),\n            [\n                AC_CHECK_FUNCS(thr_setconcurrency,\n                    AC_DEFINE(HAVE_THR_SETCONCURRENCY),\n                    AC_MSG_WARN(Setting thread concurrency will not work properly))\n            ])\n\n      dnl can't use AC_CHECK_FUNCS for this one as it's usually a macro and so\n      dnl wouldn't be found by it\n      AC_CACHE_CHECK([for pthread_cleanup_push/pop], wx_cv_func_pthread_cleanup,\n      [\n        dnl C compiler may treat pthread_cleanup_push() as an undeclared\n        dnl function and not give a warning even if it's unavailable, so use\n        dnl the C++ one for this test\n        AC_LANG_PUSH(C++)\n        AC_TRY_COMPILE([#include <pthread.h>\n               void ThreadCleanupFunc(void *p);\n            ],\n            [\n                void *p;\n                pthread_cleanup_push(ThreadCleanupFunc, p);\n                pthread_cleanup_pop(0);\n            ], [\n               wx_cv_func_pthread_cleanup=yes\n            ], [\n               wx_cv_func_pthread_cleanup=no\n            ]\n        )\n        AC_LANG_POP()\n      ])\n      if test \"x$wx_cv_func_pthread_cleanup\" = \"xyes\"; then\n        AC_DEFINE(wxHAVE_PTHREAD_CLEANUP)\n      fi\n\n      AC_CHECK_HEADERS(sched.h,,, [AC_INCLUDES_DEFAULT()])\n      if test \"$ac_cv_header_sched_h\" = \"yes\"; then\n          AC_CHECK_FUNC(sched_yield,\n            AC_DEFINE(HAVE_SCHED_YIELD),\n            [\n                AC_CHECK_LIB(posix4,\n                    sched_yield,\n                    [AC_DEFINE(HAVE_SCHED_YIELD) POSIX4_LINK=\" -lposix4\"],\n                    AC_MSG_WARN(wxThread::Yield will not work properly)\n                )\n            ]\n          )\n      fi\n\n      dnl to be able to set the thread priority, we need to have all of the\n      dnl following functions:\n      dnl   1. pthread_attr_getschedpolicy\n      dnl   2. sched_get_priority_min and sched_get_priority_max\n      dnl      (this one can be in either libpthread or libposix4 (under Solaris))\n      dnl   3. pthread_attr_getschedparam and pthread_attr_setschedparam\n      HAVE_PRIOR_FUNCS=0\n      AC_CHECK_FUNC(pthread_attr_getschedpolicy,\n                     [AC_CHECK_FUNC(pthread_attr_setschedparam,\n                       [AC_CHECK_FUNC(sched_get_priority_max,\n                           HAVE_PRIOR_FUNCS=1,\n                           [AC_CHECK_LIB([posix4], sched_get_priority_max,\n                             [\n                                HAVE_PRIOR_FUNCS=1\n                                POSIX4_LINK=\" -lposix4\"\n                             ],\n                           )]\n                       )]\n                     )]\n                   )\n\n      if test \"$HAVE_PRIOR_FUNCS\" = 1; then\n        AC_DEFINE(HAVE_THREAD_PRIORITY_FUNCTIONS)\n      else\n        AC_MSG_WARN(Setting thread priority will not work)\n      fi\n\n      AC_CHECK_FUNC(pthread_cancel,\n                    AC_DEFINE(HAVE_PTHREAD_CANCEL),\n                    AC_MSG_WARN([wxThread::Kill() will not work properly]))\n\n      AC_CHECK_FUNC(pthread_mutex_timedlock,\n                    AC_DEFINE(HAVE_PTHREAD_MUTEX_TIMEDLOCK),\n                    AC_MSG_WARN([wxMutex::LockTimeout() will not work]))\n\n      AC_CHECK_FUNC(pthread_attr_setstacksize,\n                    AC_DEFINE(HAVE_PTHREAD_ATTR_SETSTACKSIZE))\n\n      dnl mutexattr_t initialization is done in quite different ways on different\n      dnl platforms, so check for a few things:\n      dnl\n      dnl HAVE_MUTEX_RECURSIVE means that we can create recursive mutexes\n      dnl HAVE_MUTEXATTR_SETTYPE means that we do it using\n      dnl pthread_mutexattr_settype(PTHREAD_MUTEX_RECURSIVE) and if it is not\n      dnl defined, we do it by directly assigned\n      dnl PTHREAD_MUTEX_RECURSIVE_MUTEX_INITIALIZER_NP to attr\n\n      AC_CACHE_CHECK([for pthread_mutexattr_t], wx_cv_type_pthread_mutexattr_t,\n      [\n        AC_TRY_COMPILE([#include <pthread.h>],\n            [\n               pthread_mutexattr_t attr;\n               pthread_mutexattr_settype(&attr, PTHREAD_MUTEX_RECURSIVE);\n            ],\n            wx_cv_type_pthread_mutexattr_t=yes,\n            wx_cv_type_pthread_mutexattr_t=no\n        )\n      ])\n\n      if test \"$wx_cv_type_pthread_mutexattr_t\" = \"yes\"; then\n        AC_DEFINE(HAVE_PTHREAD_MUTEXATTR_T)\n\n        dnl check if we already have the declaration we need, it is not\n        dnl present in some systems' headers\n        AC_CACHE_CHECK([for pthread_mutexattr_settype declaration],\n                       wx_cv_func_pthread_mutexattr_settype_decl, [\n                       AC_TRY_COMPILE([#include <pthread.h>],\n                           [\n                               pthread_mutexattr_t attr;\n                               pthread_mutexattr_settype(&attr, PTHREAD_MUTEX_RECURSIVE);\n                           ],\n                           wx_cv_func_pthread_mutexattr_settype_decl=yes,\n                           wx_cv_func_pthread_mutexattr_settype_decl=no\n                       )\n        ])\n        if test \"$wx_cv_func_pthread_mutexattr_settype_decl\" = \"yes\"; then\n            AC_DEFINE(HAVE_PTHREAD_MUTEXATTR_SETTYPE_DECL)\n        fi\n      else\n        dnl don't despair, there may be another way to do it\n        AC_CACHE_CHECK([for PTHREAD_RECURSIVE_MUTEX_INITIALIZER],\n                       wx_cv_type_pthread_rec_mutex_init,\n        [\n            AC_TRY_COMPILE([#include <pthread.h>],\n                [\n                    pthread_mutex_t attr = PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP;\n                ], [\n                    wx_cv_type_pthread_rec_mutex_init=yes\n                ], [\n                    wx_cv_type_pthread_rec_mutex_init=no\n                ]\n            )\n        ])\n        if test \"$wx_cv_type_pthread_rec_mutex_init\" = \"yes\"; then\n          AC_DEFINE(HAVE_PTHREAD_RECURSIVE_MUTEX_INITIALIZER)\n        else\n          dnl this may break code working elsewhere, so at least warn about it\n          AC_MSG_WARN([wxMutex won't be recursive on this platform])\n        fi\n      fi\n\n      if test \"$wxUSE_COMPILER_TLS\" = \"yes\"; then\n          dnl test for compiler thread-specific variables support\n          AC_CACHE_CHECK([for __thread keyword],\n                         wx_cv_cc___thread,\n              [\n                  AC_TRY_COMPILE([#include <pthread.h>],\n                      [\n                          static __thread int n = 0;\n                          static __thread int *p = 0;\n                      ],\n                      wx_cv_cc___thread=yes,\n                      wx_cv_cc___thread=no\n                  )\n              ]\n          )\n\n          if test \"$wx_cv_cc___thread\" = \"yes\"; then\n              AX_GXX_VERSION\n              if test -n \"$ax_cv_gxx_version\"; then\n                  dnl g++ supports __thread since at least version 3.3 but its support\n                  dnl seems to be broken until 4.1, see\n                  dnl   http://thread.gmane.org/gmane.comp.lib.wxwidgets.devel/108388\n                  dnl\n                  dnl NB: we still need to test __thread support with\n                  dnl     AC_TRY_COMPILE above even for g++ 4 as it doesn't\n                  dnl     support it for all architectures (e.g. it doesn't\n                  dnl     work under OS X)\n                  AC_MSG_CHECKING([whether __thread support in g++ is usable])\n                  case \"$ax_cv_gxx_version\" in\n                    1.* | 2.* | 3.* )\n                        AC_MSG_RESULT([no, it's broken])\n                        wx_cv_cc___thread=no\n                        ;;\n                    *)\n                        AC_MSG_RESULT([yes, it works])\n                        ;;\n                  esac\n              fi\n          fi\n\n          if test \"$wx_cv_cc___thread\" = \"yes\"; then\n            AC_DEFINE(HAVE___THREAD_KEYWORD)\n          fi\n        fi\n\n        if test \"$ac_cv_header_cxxabi_h\" = \"yes\"; then\n            AC_CACHE_CHECK([for abi::__forced_unwind() in <cxxabi.h>],\n                wx_cv_type_abi_forced_unwind,\n                [\n                    AC_LANG_PUSH(C++)\n                    AC_TRY_COMPILE([#include <cxxabi.h>],\n                        [\n                            void foo(abi::__forced_unwind&);\n                        ],\n                        wx_cv_type_abi_forced_unwind=yes,\n                        wx_cv_type_abi_forced_unwind=no\n                    )\n                    AC_LANG_POP()\n                ]\n            )\n        else\n            wx_cv_type_abi_forced_unwind=no\n        fi\n\n        if test \"$wx_cv_type_abi_forced_unwind\" = \"yes\"; then\n            AC_DEFINE(HAVE_ABI_FORCEDUNWIND)\n        fi\n    fi\n\ndnl from if !MSW\nelse\n    if test \"$wxUSE_THREADS\" = \"yes\" ; then\n      case \"${host}\" in\n        x86_64-*-mingw* )\n        ;;\n        *-*-mingw32* )\n            dnl check if the compiler accepts -mthreads\n            AC_CACHE_CHECK([if compiler supports -mthreads],\n                wx_cv_cflags_mthread,\n                [\n                    CFLAGS_OLD=\"$CFLAGS\"\n                    CFLAGS=\"-mthreads $CFLAGS\"\n                    AC_TRY_COMPILE([], [],\n                        wx_cv_cflags_mthread=yes,\n                        wx_cv_cflags_mthread=no\n                    )\n                ]\n            )\n\n            if test \"$wx_cv_cflags_mthread\" = \"yes\"; then\n                dnl it does, use it\n                WXCONFIG_CFLAGS=\"$WXCONFIG_CFLAGS -mthreads\"\n                LDFLAGS=\"$LDFLAGS -mthreads\"\n            else\n                dnl it doesn't\n                CFLAGS=\"$CFLAGS_OLD\"\n            fi\n        ;;\n      esac\n    fi\nfi\n\nAC_CHECK_FUNC(localtime_r, [ AC_DEFINE(HAVE_LOCALTIME_R) ])\nAC_CHECK_FUNC(gmtime_r, [ AC_DEFINE(HAVE_GMTIME_R) ])\ndnl By preference, we probably should use getaddrinfo which avoids thread\ndnl safety issues and supports IPv6, however there currently is no code\ndnl for it, so testing for it is temporarily disabled and we are restricted\ndnl to gethostbyname_r/gethostbyaddr_r  and getservbyname_r\n\ndnl AC_CHECK_FUNC(getaddrinfo, AC_DEFINE(HAVE_GETADDRINFO), [\n    dnl no getaddrinfo, so check for gethostbyname_r and\n    dnl related functions (taken from python's configure.in)\n    dnl sigh -- gethostbyname_r is a mess; it can have 3, 5 or 6 arguments\n      AX_FUNC_WHICH_GETHOSTBYNAME_R\n      if test \"x$ac_cv_func_which_gethostbyname_r\" = \"xno\" -o \\\n              \"x$ac_cv_func_which_gethostbyname_r\" = \"xunknown\" ; then\n          AC_CHECK_FUNC(gethostbyname, [ AC_DEFINE(HAVE_GETHOSTBYNAME) ],\n              [\n                  dnl Under HaikuOS it is not yet detected\n                  case \"${host}\" in\n                  *-*-haiku* )\n                    AC_DEFINE(HAVE_GETHOSTBYNAME)\n                    AC_MSG_WARN([Defining HAVE_GETHOSTBYNAME unconditionally under ${host}.])\n                    ;;\n                  esac\n              ]\n           )\n      fi\n      dnl A similar test for getservbyname_r\n      dnl I'm tempted to just not do this test which is taking much time and\n      dnl do something similar as for gethostbyaddr_r, but OTOH the macro\n      dnl doing the test already exists, so using it is easy enough.     - SN\n      AC_raf_FUNC_WHICH_GETSERVBYNAME_R\n      if test \"x$ac_cv_func_which_getservbyname_r\" = \"xno\" -o \\\n              \"x$ac_cv_func_which_getservbyname_r\" = \"xunknown\" ; then\n          AC_CHECK_FUNCS(getservbyname,[ AC_DEFINE(HAVE_GETSERVBYNAME) ],\n              [\n                  dnl Under HaikuOS it is not yet detected\n                  case \"${host}\" in\n                  *-*-haiku* )\n                    AC_DEFINE(HAVE_GETSERVBYNAME)\n                    AC_MSG_WARN([Defining HAVE_GETSERVBYNAME unconditionally under ${host}.])\n                    ;;\n                  esac\n              ]\n           )\n      fi\n      dnl For gethostbyaddr_r, we currently do no separate test, instead, we\n      dnl silently assume it's available exactly if gethostbyname_r is\n      dnl available and always requires two more arguments than\n      dnl gethostbyname_r.\n      dnl (also, I'm lazy and there no m4 file that's ready for use for this\n      dnl  function, although it should be easy to rewrite the gethostbyname_r\n      dnl  check to fit this case, if it's really needed.                - SN )\ndnl    ]\ndnl )\n\ndnl This is currently always defined under Unix, there is no reason to ever\ndnl disable compiler TLS support there.\nAC_DEFINE(wxUSE_COMPILER_TLS)\n\nif test \"$wxUSE_THREADS\" = \"yes\"; then\n  AC_DEFINE(wxUSE_THREADS)\n\n  SAMPLES_SUBDIRS=\"$SAMPLES_SUBDIRS thread\"\nelse\n  dnl on some systems, _REENTRANT should be defined if we want to use any _r()\n  dnl functions - add tests for other functions here as well\n  if test \"$wx_cv_func_strtok_r\" = \"yes\"; then\n    AC_MSG_CHECKING(if -D_REENTRANT is needed)\n    if test \"$NEEDS_D_REENTRANT_FOR_R_FUNCS\" = 1; then\n        WXCONFIG_CPPFLAGS=\"$WXCONFIG_CPPFLAGS -D_REENTRANT\"\n        AC_MSG_RESULT(yes)\n    else\n        AC_MSG_RESULT(no)\n    fi\n  fi\nfi\n\nif test \"$WXGTK4\" = 1 ; then\n    AC_DEFINE_UNQUOTED(__WXGTK4__, 1)\nfi\nif test \"$WXGTK3\" = 1 ; then\n    AC_DEFINE_UNQUOTED(__WXGTK3__, 1)\n    WXGTK2=1\nfi\nif test \"$WXGTK2\" = 1 ; then\n  AC_DEFINE_UNQUOTED(__WXGTK20__,$WXGTK2)\nfi\n\nif test \"$WXGTK127\" = 1 ; then\n  AC_DEFINE_UNQUOTED(__WXGTK127__,$WXGTK127)\nfi\n\nif test \"$WXGPE\" = 1 ; then\n  AC_DEFINE_UNQUOTED(__WXGPE__,$WXGPE)\nfi\n\nif test \"$WXQT\" = 1 ; then\n  AC_DEFINE_UNQUOTED(__WXQT__,$WXQT)\nfi\ndnl DEBUG_CFLAGS contains debugging options (supposed to be the same for C and C++\ndnl compilers: we'd need a separate DEBUG_CXXFLAGS if this is ever not the case)\nDEBUG_CFLAGS=\nif `echo $CXXFLAGS $CFLAGS | grep \" -g\" >/dev/null`; then\n    dnl the CXXFLAGS or the CFLAGS variable already contains the -g flag\n    dnl (e.g. it was specified by the user before running configure); since\n    dnl later they will be merged with DEBUG_CFLAGS, don't set the -g option\n    dnl in DEBUG_CFLAGS to avoid (possibly different) flag duplicates\n    AC_MSG_WARN([CXXFLAGS/CFLAGS already contains -g flag; ignoring the --enable-debug_info option])\nelif test \"$wxUSE_DEBUG_INFO\" = \"yes\" ; then\n    DEBUG_CFLAGS=\"-g\"\nfi\n\nif test \"$wxUSE_DEBUG_GDB\" = \"yes\" ; then\n    wxUSE_DEBUG_INFO=yes\n    if test \"$GCC\" = yes; then\n        DEBUG_CFLAGS=\"-ggdb\"\n    fi\nfi\n\nif test \"$wxUSE_DEBUG_FLAG\" = \"no\" ; then\n    WXCONFIG_CPPFLAGS=\"$WXCONFIG_CPPFLAGS -DwxDEBUG_LEVEL=0\"\n\n    if test \"$wxUSE_GTK\" = 1 ; then\n        if test \"$WXGTK2\" = 1 ; then\n            CPPFLAGS=\"$CPPFLAGS -DG_DISABLE_CAST_CHECKS\"\n        else\n            CPPFLAGS=\"-DGTK_NO_CHECK_CASTS $CPPFLAGS\"\n        fi\n    fi\nfi\n\nif test \"$wxUSE_MEM_TRACING\" = \"yes\" ; then\n    AC_DEFINE(wxUSE_MEMORY_TRACING)\n    AC_DEFINE(wxUSE_GLOBAL_MEMORY_OPERATORS)\n    AC_DEFINE(wxUSE_DEBUG_NEW_ALWAYS)\n    SAMPLES_SUBDIRS=\"$SAMPLES_SUBDIRS memcheck\"\nfi\n\nif test \"$wxUSE_DMALLOC\" = \"yes\" ; then\n    DMALLOC_LIBS=\"-ldmallocthcxx\"\nfi\n\ndnl cc/cxx/ld option for profiling\nPROFILE_FLAGS=\nif test \"$wxUSE_PROFILE\" = \"yes\" ; then\n    PROFILE_FLAGS=\" -pg\"\nfi\n\nif test \"$GCC\" = \"yes\" ; then\n    if test \"$wxUSE_NO_RTTI\" = \"yes\" ; then\n        dnl Define wxNO_RTTI on the command line because only g++ 4.3 and later\n        dnl define __GXX_RTTI which allows us to detect the use of -fno-rtti\n        dnl switch but we need to do it manually for the older versions.\n        WXCONFIG_CXXFLAGS=\"$WXCONFIG_CXXFLAGS -DwxNO_RTTI -fno-rtti\"\n    fi\n    if test \"$wxUSE_NO_EXCEPTIONS\" = \"yes\" ; then\n        WXCONFIG_CXXFLAGS=\"$WXCONFIG_CXXFLAGS -fno-exceptions\"\n    fi\n    if test \"$wxUSE_PERMISSIVE\" = \"yes\" ; then\n        WXCONFIG_CFLAGS=\"$WXCONFIG_CFLAGS -fpermissive\"\n    fi\n\n    dnl Ian Brown <ian.brown@printsoft.de> reports that versions of gcc before\n    dnl 3.0 overflow the table of contents on rs6000 as they create an entry\n    dnl for each subroutine by default -- using the switch below only creates\n    dnl one entry per file instead at the price of minor performance penalty\n    dnl\n    dnl As of wx2.4 a bug in the hppa gcc compiler causes a similar problem\n    dnl without -ffunction-sections.  No idea how long we'll need to maintain\n    dnl this, or even the extent of gcc/wx version combinations affected, but\n    dnl also as above, this 'fix' does not come without side effects.\n    dnl\n    dnl TODO: test for the gcc version here (how?)\n    case \"${host}\" in\n      powerpc*-*-aix* )\n        WXCONFIG_CFLAGS=\"$WXCONFIG_CFLAGS -mminimal-toc\"\n        ;;\n      *-hppa* )\n        WXCONFIG_CFLAGS=\"$WXCONFIG_CFLAGS -ffunction-sections\"\n        ;;\n    esac\nfi\n\ndnl C/C++ compiler option for optimization (supposed to be the same for both)\nOPTIMISE_CFLAGS=\nif `echo $CXXFLAGS $CFLAGS | grep \" -O\" >/dev/null`; then\n    dnl the CXXFLAGS or the CFLAGS variable already contains -O optimization flag\n    dnl (e.g. it was specified by the user before running configure); since\n    dnl later they will be merged with OPTIMISE_CFLAGS, don't set the -O option\n    dnl in OPTIMISE_CFLAGS to avoid (possibly different) flag duplicates\n    AC_MSG_WARN([CXXFLAGS/CFLAGS already contains -O flag; ignoring the --disable-optimise option])\nelse\n    if test \"$wxUSE_OPTIMISE\" = \"no\" ; then\n        if test \"$GCC\" = yes ; then\n            dnl use -O0 because compiling with it is faster than compiling with no\n            dnl optimization options at all (at least with g++ 3.2)\n            OPTIMISE_CFLAGS=\"-O0\"\n        fi\n    else\n        if test \"$GCC\" = yes ; then\n            OPTIMISE_CFLAGS=\"-O2\"\n        else\n            OPTIMISE_CFLAGS=\"-O\"\n        fi\n    fi\nfi\n\nif test \"x$wxUSE_REPRODUCIBLE_BUILD\" = \"xyes\"; then\n    AC_DEFINE(wxUSE_REPRODUCIBLE_BUILD)\nfi\n\ndnl ---------------------------------------------------------------------------\ndnl compatibility level\ndnl ---------------------------------------------------------------------------\n\nif test \"x$WXWIN_COMPATIBILITY_2_8\" = \"xyes\"; then\n    AC_DEFINE(WXWIN_COMPATIBILITY_2_8)\n\n    WXWIN_COMPATIBILITY_3_0=\"yes\"\nfi\n\nif test \"x$WXWIN_COMPATIBILITY_3_0\" != \"xno\"; then\n    AC_DEFINE(WXWIN_COMPATIBILITY_3_0)\nfi\n\ndnl ---------------------------------------------------------------------------\ndnl the library may be built without GUI classes at all\ndnl ---------------------------------------------------------------------------\n\nif test \"$wxUSE_GUI\" = \"yes\"; then\n    AC_DEFINE(wxUSE_GUI)\n\n    dnl the things we always pull in the GUI version of the library:\n    dnl 1. basic things like wxApp, wxWindow, wxControl, wxFrame, wxDialog (the\n    dnl    library really can't be built without those)\n    dnl 2. basic controls: wxButton, wxStaticText, wxTextCtrl (these are used in\n    dnl    almost any program and the first 2 are needed to show a message box\n    dnl    which want to be always able to do)\n    dnl 3. GDI stuff: icon, cursors and all that. Although it would be very nice\n    dnl    to compile without them (if the app doesn't do any drawing, it doesn't\n    dnl    need the dcs, pens, brushes, ...), this just can't be done now\n    dnl 4. menu stuff: wxMenu, wxMenuBar, wxMenuItem\n    dnl 5. misc stuff: timers, settings, message box\nfi\n\ndnl ---------------------------------------------------------------------------\ndnl Unix/Windows\ndnl ---------------------------------------------------------------------------\n\nif test \"$wxUSE_UNIX\" = \"yes\"; then\n  AC_DEFINE(wxUSE_UNIX)\nfi\n\ndnl ------------------------------------------------------------------------\ndnl DLL support\ndnl ------------------------------------------------------------------------\n\ndnl under MSW we always have LoadLibrary/GetProcAddress\nif test \"$TOOLKIT\" != \"MSW\"; then\n\n    HAVE_DL_FUNCS=0\n    HAVE_SHL_FUNCS=0\n    if test \"$wxUSE_DYNAMIC_LOADER\" = \"yes\" -o \"$wxUSE_DYNLIB_CLASS\" = \"yes\" ; then\n        if test \"$USE_DOS\" = 1; then\n            HAVE_DL_FUNCS=0\n        else\n            dnl the test is a bit complicated because we check for dlopen() both with\n            dnl and without -ldl and we also try to find shl_load() if there is no\n            dnl dlopen() on this system\n            AC_CHECK_FUNCS(dlopen,\n            [\n                AC_DEFINE(HAVE_DLOPEN)\n                HAVE_DL_FUNCS=1\n            ],\n            [\n                AC_CHECK_LIB(dl, dlopen,\n                            [\n                                AC_DEFINE(HAVE_DLOPEN)\n                                HAVE_DL_FUNCS=1\n                                DL_LINK=\"-ldl\"\n                            ])\n            ])\n\n            dnl check also for dlerror()\n            if test \"$HAVE_DL_FUNCS\" = 1; then\n                AC_CHECK_FUNCS(dladdr,\n                    AC_DEFINE(HAVE_DLADDR),\n                    [\n                        AC_CHECK_LIB(dl, dladdr,\n                            [\n                                AC_DEFINE(HAVE_DLADDR)\n                                DL_LINK=\"-ldl\"\n                            ])\n                    ]\n                )\n            fi\n        fi\n\n        dnl Force HAVE_DL_FUNCS on for Darwin, even if the tests failed (e.g. pre-10.3)\n        if test \"$USE_DARWIN\" = 1; then\n            dnl dlopen/dlerror is implemented in dynlib.cpp for Darwin/Mac OS X\n            HAVE_DL_FUNCS=1\n        fi\n\n        if test \"$HAVE_DL_FUNCS\" = 0; then\n            if test \"$HAVE_SHL_FUNCS\" = 0; then\n              if test \"$USE_UNIX\" = 1 -o \"$USE_DOS\" = 1; then\n                  AC_MSG_WARN([Missing dynamic loading support, several features will be disabled])\n                  wxUSE_DYNAMIC_LOADER=no\n                  wxUSE_DYNLIB_CLASS=no\n              else\n                  AC_MSG_WARN([Assuming wxLibrary class works on this platform])\n              fi\n            fi\n        fi\n    fi\nfi\n\nif test \"$wxUSE_DYNAMIC_LOADER\" = \"yes\" ; then\n    AC_DEFINE(wxUSE_DYNAMIC_LOADER)\nfi\nif test \"$wxUSE_DYNLIB_CLASS\" = \"yes\" ; then\n    AC_DEFINE(wxUSE_DYNLIB_CLASS)\nfi\n\n\ndnl ---------------------------------------------------------------------------\ndnl Verify consistency of plugins/monolithic/shared settings:\ndnl ---------------------------------------------------------------------------\n\nif test \"$wxUSE_PLUGINS\" = \"yes\" ; then\n    if test \"$wxUSE_SHARED\" = \"no\" ; then\n        AC_MSG_WARN([plugins supported only in shared build, disabling])\n        wxUSE_PLUGINS=no\n    fi\n    if test \"$wxUSE_MONOLITHIC\" = \"yes\" ; then\n        AC_MSG_WARN([plugins not supported monolithic build, disabling])\n        wxUSE_PLUGINS=no\n    fi\n    if test \"$wxUSE_DYNLIB_CLASS\" = \"no\" ; then\n        AC_MSG_WARN([plugins require wxDynamicLibrary, disabling])\n        wxUSE_PLUGINS=no\n    fi\n    if test \"$wxUSE_PLUGINS\" = \"yes\" ; then\n        AC_DEFINE(wxUSE_PLUGINS)\n    fi\nfi\n\nif test \"$wxUSE_PIC\" = \"no\" -a \"$wxUSE_SHARED\" = \"yes\"; then\n    AC_MSG_WARN([position independent code (PIC) can not be disabled for shared libraries])\nfi\n\ndnl ---------------------------------------------------------------------------\ndnl File system watcher checks\ndnl ---------------------------------------------------------------------------\n\nif test \"$wxUSE_FSWATCHER\" = \"yes\"; then\n    dnl wxFileSystemWatcher is always available under Windows but we need either\n    dnl inotify or kqueue support in the system for it under Unix (this\n    dnl includes OS X which does have kqueue but no other platforms)\n    if test \"$USE_WIN32\" != 1; then\n        if test \"$wxUSE_UNIX\" = \"yes\"; then\n            dnl inotify header may be present from a compatibility library so\n            dnl check that the function is usable. We don't try to link with,\n            dnl e.g. -linotify so native kqueue support is used in preference.\n            AC_CACHE_CHECK(\n                [whether inotify is usable],\n                wx_cv_inotify_usable,\n                AC_LINK_IFELSE(\n                    [AC_LANG_SOURCE([int main() { return inotify_init(); }])],\n                    [wx_cv_inotify_usable=yes],\n                    [wx_cv_inotify_usable=no]\n                )\n            )\n            if test \"$wx_cv_inotify_usable\" = \"yes\"; then\n                AC_DEFINE(wxHAS_INOTIFY)\n            else\n                AC_CHECK_HEADERS(sys/event.h,,, [AC_INCLUDES_DEFAULT()])\n                if test \"$ac_cv_header_sys_event_h\" = \"yes\"; then\n                    AC_DEFINE(wxHAS_KQUEUE)\n                else\n                    wxUSE_FSWATCHER=no\n                fi\n            fi\n        else\n            wxUSE_FSWATCHER=no\n        fi\n    else\n        if test \"$wxUSE_THREADS\" != \"yes\"; then\n            AC_MSG_WARN([wxFileSystemWatcher disabled due to --disable-threads])\n            wxUSE_FSWATCHER=no\n        fi\n    fi\n\n    if test \"$wxUSE_FSWATCHER\" = \"yes\"; then\n        AC_DEFINE(wxUSE_FSWATCHER)\n        SAMPLES_SUBDIRS=\"$SAMPLES_SUBDIRS fswatcher\"\n    else\n        AC_MSG_WARN([wxFileSystemWatcher won't be available on this platform])\n    fi\nfi\n\ndnl ---------------------------------------------------------------------------\ndnl Secret storage\ndnl ---------------------------------------------------------------------------\n\nif test \"$wxUSE_SECRETSTORE\" = \"yes\"; then\n    dnl The required APIs are always available under MSW and OS X but we must\n    dnl have GNOME libsecret under Unix to be able to compile this class.\n    if test \"$WXGTK1\" = \"1\"; then\n        AC_MSG_WARN([libsecret is incompatible with GTK+ 1, disabled])\n        wxUSE_SECRETSTORE=no\n    elif test \"$wxUSE_MSW\" != \"1\" -a \"$wxUSE_OSX_COCOA\" != 1; then\n        PKG_CHECK_MODULES(LIBSECRET, [libsecret-1],\n            [\n                CXXFLAGS=\"$LIBSECRET_CFLAGS $CXXFLAGS\"\n                LIBS=\"$LIBSECRET_LIBS $LIBS\"\n            ],\n            [\n                AC_MSG_WARN([libsecret not found, wxSecretStore won't be available])\n                wxUSE_SECRETSTORE=no\n            ]\n        )\n    fi\n\n    if test \"$wxUSE_SECRETSTORE\" = \"yes\"; then\n        if test \"$USE_DARWIN\" = 1; then\n            LIBS=\"-framework Security $LIBS\"\n        fi\n\n        AC_DEFINE(wxUSE_SECRETSTORE)\n        SAMPLES_SUBDIRS=\"$SAMPLES_SUBDIRS secretstore\"\n    fi\nfi\n\ndnl ---------------------------------------------------------------------------\ndnl Register non-GUI class options for makefiles and setup.h\ndnl ---------------------------------------------------------------------------\n\nif test \"$wxUSE_STL\" = \"yes\"; then\n  AC_DEFINE(wxUSE_STL)\nfi\n\nif test \"$wxUSE_EXTENDED_RTTI\" = \"yes\"; then\n  AC_DEFINE(wxUSE_EXTENDED_RTTI)\nfi\n\nif test \"$wxUSE_ANY\" = \"yes\"; then\n    AC_DEFINE(wxUSE_ANY)\nfi\n\nif test \"$wxUSE_APPLE_IEEE\" = \"yes\"; then\n  AC_DEFINE(wxUSE_APPLE_IEEE)\nfi\n\nif test \"$wxUSE_TIMER\" = \"yes\"; then\n  AC_DEFINE(wxUSE_TIMER)\nfi\n\ndnl Unix implementation needs additional checks because audio support\ndnl comes in many favours:\nif test \"$USE_UNIX\" = 1 ; then\n    dnl it's not enough to check for just the header because OSS under NetBSD\n    dnl redefines ioctl as oss_ioctrl inside it and so we also need to test\n    dnl whether we need -lossaudio at link-time\n    AC_CACHE_CHECK([for SNDCTL_DSP_SPEED in sys/soundcard.h], ac_cv_header_sys_soundcard, [\n        AC_TRY_LINK([\n                #include <sys/ioctl.h>\n                #include <sys/soundcard.h>\n            ],\n            [\n                ioctl(0, SNDCTL_DSP_SPEED, 0);\n            ],\n            ac_cv_header_sys_soundcard=yes,\n            [\n                saveLibs=\"$LIBS\"\n                LIBS=\"$saveLibs -lossaudio\"\n                AC_TRY_LINK([\n                        #include <sys/ioctl.h>\n                        #include <sys/soundcard.h>\n                    ],\n                    [\n                        ioctl(0, SNDCTL_DSP_SPEED, 0);\n                    ],\n                    ac_cv_header_sys_soundcard=yes,\n                    [\n                        LIBS=\"$saveLibs\"\n                        ac_cv_header_sys_soundcard=no\n                    ]\n                )\n            ]\n        )\n    ])\n\n    if test \"$ac_cv_header_sys_soundcard\" = \"yes\"; then\n        AC_DEFINE(HAVE_SYS_SOUNDCARD_H)\n    fi\nfi\n\nWITH_PLUGIN_SDL=0\nif test \"$wxUSE_SOUND\" = \"yes\"; then\n  if test \"$USE_UNIX\" = 1 -a \"$USE_MAC\" != 1 ; then\n    if test \"$wxUSE_LIBSDL\" != \"no\"; then\n      PKG_CHECK_MODULES([SDL], [sdl2 >= 2.0.0],\n                  [\n                    EXTRALIBS_SDL=\"$SDL_LIBS\"\n                    CFLAGS=\"$SDL_CFLAGS $CFLAGS\"\n                    CXXFLAGS=\"$SDL_CFLAGS $CXXFLAGS\"\n                    AC_DEFINE(wxUSE_LIBSDL)\n                  ],\n                  [\n                    AC_MSG_NOTICE([SDL 2.0 not available. Falling back to 1.2.])\n                    AM_PATH_SDL([1.2.0],\n                                [\n                                  EXTRALIBS_SDL=\"$SDL_LIBS\"\n                                  CFLAGS=\"$SDL_CFLAGS $CFLAGS\"\n                                  CXXFLAGS=\"$SDL_CFLAGS $CXXFLAGS\"\n                                  AC_DEFINE(wxUSE_LIBSDL)\n                                ],\n                                [wxUSE_LIBSDL=\"no\"])\n                  ])\n      if test \"$wxUSE_LIBSDL\" = \"yes\" -a \"$wxUSE_PLUGINS\" = \"yes\" ; then\n        WITH_PLUGIN_SDL=1\n      fi\n    fi\n  fi\nfi\n\nif test \"$wxUSE_SOUND\" = \"yes\"; then\n  AC_DEFINE(wxUSE_SOUND)\n  SAMPLES_SUBDIRS=\"$SAMPLES_SUBDIRS sound\"\nfi\n\nif test \"$WXGTK2\" = 1; then\n    if test \"$wxUSE_PRINTING_ARCHITECTURE\" = \"yes\" ; then\n\n        if test \"$wxUSE_GTKPRINT\" = \"yes\" ; then\n            if test \"$WXGTK3\" = 1; then\n                gtk_unix_print=\"gtk+-unix-print-${TOOLKIT_VERSION}.0\"\n            else\n                gtk_unix_print=\"gtk+-unix-print-2.0 >= 2.10\"\n            fi\n                PKG_CHECK_MODULES(GTKPRINT,\n                                  [$gtk_unix_print],\n                    [\n                        GUI_TK_LIBRARY=\"$GUI_TK_LIBRARY $GTKPRINT_LIBS\"\n                        CFLAGS=\"$GTKPRINT_CFLAGS $CFLAGS\"\n                        CXXFLAGS=\"$GTKPRINT_CFLAGS $CXXFLAGS\"\n                        AC_DEFINE(wxUSE_GTKPRINT)\n                    ],\n                    [\n                        AC_MSG_WARN([GTK printing support not found (GTK+ >= 2.10), library will use GNOME printing support or standard PostScript printing])\n                        wxUSE_GTKPRINT=\"no\"\n                    ]\n                )\n        fi\n    fi\n\n    if test \"$wxUSE_MIMETYPE\" = \"yes\" ; then\n        if test \"$wxUSE_LIBGNOMEVFS\" = \"yes\" ; then\n\n                PKG_CHECK_MODULES(GNOMEVFS,\n                                  [gnome-vfs-2.0 >= 2.0],\n                    [\n                        GUI_TK_LIBRARY=\"$GUI_TK_LIBRARY $GNOMEVFS_LIBS\"\n                        CFLAGS=\"$GNOMEVFS_CFLAGS $CFLAGS\"\n                        CXXFLAGS=\"$GNOMEVFS_CFLAGS $CXXFLAGS\"\n                        AC_DEFINE(wxUSE_LIBGNOMEVFS)\n                    ],\n                    [\n                        AC_MSG_WARN([libgnomevfs not found, library won't be able to associate MIME type])\n                        wxUSE_LIBGNOMEVFS=\"no\"\n                    ]\n                )\n        fi\n    fi\n\n    if test \"$wxUSE_NOTIFICATION_MESSAGE\" = \"yes\" ; then\n        if test \"$wxUSE_LIBNOTIFY\" = \"yes\" ; then\n            HAVE_LIBNOTIFY=0\n            PKG_CHECK_MODULES(LIBNOTIFY, [libnotify >= 0.7],\n                [\n                    HAVE_LIBNOTIFY=1\n                    AC_DEFINE(wxUSE_LIBNOTIFY_0_7)\n                ],\n                [\n                    PKG_CHECK_MODULES(LIBNOTIFY, [libnotify >= 0.4],\n                        [HAVE_LIBNOTIFY=1],\n                        [\n                            AC_MSG_WARN([libnotify not found, wxNotificationMessage will use generic implementation.])\n                            wxUSE_LIBNOTIFY=\"no\"\n                        ]\n                    )\n                ]\n            )\n\n            if test \"$HAVE_LIBNOTIFY\" = \"1\" ; then\n                GUI_TK_LIBRARY=\"$GUI_TK_LIBRARY $LIBNOTIFY_LIBS\"\n                CFLAGS=\"$LIBNOTIFY_CFLAGS $CFLAGS\"\n                CXXFLAGS=\"$LIBNOTIFY_CFLAGS $CXXFLAGS\"\n                AC_DEFINE(wxUSE_LIBNOTIFY)\n            fi\n        fi\n    fi\n\nfi\n\nif test \"$wxUSE_CMDLINE_PARSER\" = \"yes\"; then\n  AC_DEFINE(wxUSE_CMDLINE_PARSER)\nfi\n\nif test \"$wxUSE_STOPWATCH\" = \"yes\"; then\n  AC_DEFINE(wxUSE_STOPWATCH)\nfi\n\nif test \"$wxUSE_DATETIME\" = \"yes\"; then\n  AC_DEFINE(wxUSE_DATETIME)\nfi\n\nif test \"$wxUSE_FILE\" = \"yes\"; then\n  AC_DEFINE(wxUSE_FILE)\nfi\n\nif test \"$wxUSE_FFILE\" = \"yes\"; then\n  AC_DEFINE(wxUSE_FFILE)\nfi\n\nif test \"$wxUSE_ARCHIVE_STREAMS\" = \"yes\"; then\n  if test \"$wxUSE_STREAMS\" != yes; then\n    AC_MSG_WARN(wxArchive requires wxStreams... disabled)\n    wxUSE_ARCHIVE_STREAMS=no\n  else\n    AC_DEFINE(wxUSE_ARCHIVE_STREAMS)\n  fi\nfi\n\nif test \"$wxUSE_ZIPSTREAM\" = \"yes\"; then\n  if test \"$wxUSE_ARCHIVE_STREAMS\" != \"yes\"; then\n    AC_MSG_WARN(wxZip requires wxArchive... disabled)\n  elif test \"$wxUSE_ZLIB\" = \"no\"; then\n    AC_MSG_WARN(wxZip requires wxZlib... disabled)\n  else\n    AC_DEFINE(wxUSE_ZIPSTREAM)\n  fi\nfi\n\nif test \"$wxUSE_TARSTREAM\" = \"yes\"; then\n  if test \"$wxUSE_ARCHIVE_STREAMS\" != \"yes\"; then\n    AC_MSG_WARN(wxTar requires wxArchive... disabled)\n  else\n    AC_DEFINE(wxUSE_TARSTREAM)\n  fi\nfi\n\nif test \"$wxUSE_FILE_HISTORY\" = \"yes\"; then\n  AC_DEFINE(wxUSE_FILE_HISTORY)\nfi\n\nif test \"$wxUSE_FILESYSTEM\" = \"yes\"; then\n  if test \"$wxUSE_STREAMS\" != yes -o \\( \"$wxUSE_FILE\" != yes -a \"$wxUSE_FFILE\" != yes \\); then\n    AC_MSG_WARN(wxFileSystem requires wxStreams and wxFile or wxFFile... disabled)\n    wxUSE_FILESYSTEM=no\n  else\n    AC_DEFINE(wxUSE_FILESYSTEM)\n  fi\nfi\n\nif test \"$wxUSE_FS_ARCHIVE\" = \"yes\"; then\n  if test \"$wxUSE_FILESYSTEM\" != yes -o \"$wxUSE_ARCHIVE_STREAMS\" != yes; then\n    AC_MSG_WARN(wxArchiveFSHandler requires wxArchive and wxFileSystem... disabled)\n  else\n    AC_DEFINE(wxUSE_FS_ARCHIVE)\n  fi\nfi\n\nif test \"$wxUSE_FS_ZIP\" = \"yes\"; then\n  if test \"$wxUSE_FS_ARCHIVE\" != yes; then\n    AC_MSG_WARN(wxZipFSHandler requires wxArchiveFSHandler... disabled)\n  else\n    AC_DEFINE(wxUSE_FS_ZIP)\n  fi\nfi\n\nif test \"$wxUSE_FSVOLUME\" = \"yes\"; then\n  AC_DEFINE(wxUSE_FSVOLUME)\nfi\n\nif test \"$wxUSE_ON_FATAL_EXCEPTION\" = \"yes\"; then\n  if test \"$USE_UNIX\" != 1; then\n    AC_MSG_WARN([Catching fatal exceptions not currently supported on this system, wxApp::OnFatalException will not be called])\n    wxUSE_ON_FATAL_EXCEPTION=no\n  else\n    AC_DEFINE(wxUSE_ON_FATAL_EXCEPTION)\n  fi\nfi\n\nif test \"$wxUSE_STACKWALKER\" = \"yes\"; then\n    AC_DEFINE(wxUSE_STACKWALKER)\nfi\n\nif test \"$wxUSE_DEBUGREPORT\" = \"yes\"; then\n    if test \"$USE_UNIX\" != 1 -a \"$USE_WIN32\" != 1; then\n        AC_MSG_WARN([Creating debug reports not currently supported on this system, disabled])\n        wxUSE_DEBUGREPORT=no\n    else\n        AC_DEFINE(wxUSE_DEBUGREPORT)\n        if test \"$wxUSE_ON_FATAL_EXCEPTION\" = \"yes\"; then\n            SAMPLES_SUBDIRS=\"$SAMPLES_SUBDIRS debugrpt\"\n        fi\n    fi\nfi\n\nif test \"$wxUSE_SNGLINST_CHECKER\" = \"yes\"; then\n  AC_DEFINE(wxUSE_SNGLINST_CHECKER)\nfi\n\nif test \"$wxUSE_BUSYINFO\" = \"yes\"; then\n  AC_DEFINE(wxUSE_BUSYINFO)\nfi\n\nif test \"$wxUSE_HOTKEY\" = \"yes\"; then\n  if test \"$wxUSE_MSW\" != 1 -a \"$wxUSE_OSX_COCOA\" != 1; then\n    AC_MSG_WARN([Hot keys not supported by the current toolkit, disabled])\n    wxUSE_HOTKEY=no\n  fi\nelif test \"$wxUSE_HOTKEY\" = \"auto\"; then\n  if test \"$wxUSE_MSW\" = 1 -o \"$wxUSE_OSX_COCOA\" = 1; then\n    wxUSE_HOTKEY=yes\n  fi\nfi\nif test \"$wxUSE_HOTKEY\" = \"yes\"; then\n  AC_DEFINE(wxUSE_HOTKEY)\nfi\n\nif test \"$wxUSE_STD_CONTAINERS\" = \"yes\"; then\n  AC_DEFINE(wxUSE_STD_CONTAINERS)\nfi\n\nif test \"$wxUSE_STD_CONTAINERS_COMPATIBLY\" = \"yes\"; then\n  AC_DEFINE(wxUSE_STD_CONTAINERS_COMPATIBLY)\nfi\n\nif test \"$wxUSE_STD_IOSTREAM\" = \"yes\"; then\n  AC_DEFINE(wxUSE_STD_IOSTREAM)\nfi\n\nif test \"$wxUSE_STD_STRING\" = \"yes\"; then\n  AC_DEFINE(wxUSE_STD_STRING)\nfi\n\nif test \"$wxUSE_STD_STRING_CONV_IN_WXSTRING\" = \"yes\"; then\n  AC_DEFINE(wxUSE_STD_STRING_CONV_IN_WXSTRING)\nfi\n\nif test \"$wxUSE_UNSAFE_WXSTRING_CONV\" = \"yes\"; then\n  AC_DEFINE(wxUSE_UNSAFE_WXSTRING_CONV)\nfi\n\nif test \"$wxUSE_STDPATHS\" = \"yes\"; then\n  AC_DEFINE(wxUSE_STDPATHS)\nfi\n\nif test \"$wxUSE_TEXTBUFFER\" = \"yes\"; then\n    AC_DEFINE(wxUSE_TEXTBUFFER)\nfi\n\nif test \"$wxUSE_TEXTFILE\" = \"yes\"; then\n  if test \"$wxUSE_FILE\" != \"yes\" -o \"$wxUSE_TEXTBUFFER\" != \"yes\" ; then\n    AC_MSG_WARN(wxTextFile requires wxFile and wxTextBuffer... disabled)\n  else\n    AC_DEFINE(wxUSE_TEXTFILE)\n  fi\nfi\n\nif test \"$wxUSE_CONFIG\" = \"yes\" ; then\n  if test \"$wxUSE_TEXTFILE\" != \"yes\"; then\n    AC_MSG_WARN(wxConfig requires wxTextFile... disabled)\n  else\n    AC_DEFINE(wxUSE_CONFIG)\n    AC_DEFINE(wxUSE_CONFIG_NATIVE)\n    SAMPLES_SUBDIRS=\"$SAMPLES_SUBDIRS config\"\n  fi\nfi\n\nif test \"$wxUSE_INTL\" = \"yes\" ; then\n  if test \"$wxUSE_FILE\" != \"yes\"; then\n    AC_MSG_WARN(I18n code requires wxFile... disabled)\n  else\n    AC_DEFINE(wxUSE_INTL)\n    SAMPLES_SUBDIRS=\"$SAMPLES_SUBDIRS internat\"\n    GUIDIST=\"$GUIDIST INTL_DIST\"\n  fi\nfi\n\nif test \"$wxUSE_XLOCALE\" = \"yes\" ; then\n    dnl Some platforms (e.g. macOS) require an extra header, others (Linux)\n    dnl don't, but it's simpler to just check for it under all of them.\n    AC_CHECK_HEADERS([xlocale.h])\n\n    AC_CACHE_CHECK([for locale_t], wx_cv_type_locale_t,\n    [\n        AC_LANG_PUSH(C++)\n        AC_TRY_COMPILE(\n        [\n        #ifdef HAVE_XLOCALE_H\n        #include <xlocale.h>\n        #endif\n        #include <locale.h>\n        #include <stdlib.h>\n        ],\n        [\n        locale_t t;\n        strtod_l(NULL, NULL, t);\n        ],\n        wx_cv_type_locale_t=yes,\n        wx_cv_type_locale_t=no\n        )\n        AC_LANG_POP()\n    ])\n\n    if test \"$wx_cv_type_locale_t\" = \"yes\" ; then\n        AC_DEFINE(wxUSE_XLOCALE)\n\n        dnl We don't test (just) for locale_t existence, but we still define\n        dnl this symbol to avoid changing the existing code using it.\n        AC_DEFINE(HAVE_LOCALE_T)\n    else\n        AC_MSG_WARN([No locale_t support, wxXLocale won't be available])\n    fi\nfi\n\nif test \"$wxUSE_LOG\" = \"yes\"; then\n  AC_DEFINE(wxUSE_LOG)\n\n    if test \"$wxUSE_LOGGUI\" = \"yes\"; then\n      AC_DEFINE(wxUSE_LOGGUI)\n    fi\n\n    if test \"$wxUSE_LOGWINDOW\" = \"yes\"; then\n      AC_DEFINE(wxUSE_LOGWINDOW)\n    fi\n\n    if test \"$wxUSE_LOGDIALOG\" = \"yes\"; then\n      AC_DEFINE(wxUSE_LOG_DIALOG)\n    fi\n\n    dnl the keyboard sample requires wxUSE_LOG\n    SAMPLES_SUBDIRS=\"$SAMPLES_SUBDIRS keyboard\"\nfi\n\nif test \"$wxUSE_LONGLONG\" = \"yes\"; then\n  AC_DEFINE(wxUSE_LONGLONG)\nfi\n\nif test \"$wxUSE_GEOMETRY\" = \"yes\"; then\n  AC_DEFINE(wxUSE_GEOMETRY)\nfi\n\nif test \"$wxUSE_BASE64\" = \"yes\"; then\n  AC_DEFINE(wxUSE_BASE64)\nfi\n\nif test \"$wxUSE_STREAMS\" = \"yes\" ; then\n  AC_DEFINE(wxUSE_STREAMS)\nfi\n\nif test \"$wxUSE_PRINTF_POS_PARAMS\" = \"yes\"; then\n  AC_DEFINE(wxUSE_PRINTF_POS_PARAMS)\nfi\n\ndnl ---------------------------------------------------------------------------\ndnl console event loop stuff\ndnl ---------------------------------------------------------------------------\n\nif test \"$wxUSE_CONSOLE_EVENTLOOP\" = \"yes\"; then\n    AC_DEFINE(wxUSE_CONSOLE_EVENTLOOP)\n\n    if test \"$wxUSE_UNIX\" = \"yes\"; then\n        if test \"$wxUSE_SELECT_DISPATCHER\" = \"yes\"; then\n            AC_DEFINE(wxUSE_SELECT_DISPATCHER)\n        fi\n\n        if test \"$wxUSE_EPOLL_DISPATCHER\" = \"yes\"; then\n            AC_CHECK_HEADERS(sys/epoll.h,,, [AC_INCLUDES_DEFAULT()])\n            if test \"$ac_cv_header_sys_epoll_h\" = \"yes\"; then\n                AC_DEFINE(wxUSE_EPOLL_DISPATCHER)\n            else\n                AC_MSG_WARN([sys/epoll.h not available, wxEpollDispatcher disabled])\n            fi\n        fi\n    fi\nfi\n\ndnl ---------------------------------------------------------------------------\ndnl time/date functions\ndnl ---------------------------------------------------------------------------\n\ndnl check for gettimeofday (SVr4, BSD 4.3) and ftime (V7, BSD 4.3) for the\ndnl function to be used for high resolution timers\nAC_CHECK_FUNCS(gettimeofday ftime, break)\n\nif test \"$ac_cv_func_gettimeofday\" = \"yes\"; then\n    AC_CACHE_CHECK([whether gettimeofday takes two arguments],\n                   wx_cv_func_gettimeofday_has_2_args,\n    [\n        dnl on some _really_ old systems it takes only 1 argument\n        AC_TRY_COMPILE(\n            [\n                #include <sys/time.h>\n                #include <unistd.h>\n            ],\n            [\n                struct timeval tv;\n                gettimeofday(&tv, NULL);\n            ],\n            wx_cv_func_gettimeofday_has_2_args=yes,\n            AC_TRY_COMPILE(\n                [\n                    #include <sys/time.h>\n                    #include <unistd.h>\n                ],\n                [\n                    struct timeval tv;\n                    gettimeofday(&tv);\n                ],\n                wx_cv_func_gettimeofday_has_2_args=no,\n                [\n                    AC_MSG_WARN([failed to determine number of gettimeofday() arguments])\n                    wx_cv_func_gettimeofday_has_2_args=unknown\n                ]\n            )\n        )\n    ])\n\n    if test \"$wx_cv_func_gettimeofday_has_2_args\" != \"yes\"; then\n        AC_DEFINE(WX_GETTIMEOFDAY_NO_TZ)\n    fi\nfi\n\nif test \"$wxUSE_DATETIME\" = \"yes\"; then\n    dnl check for timezone variable\n    dnl   doesn't exist under Darwin / Mac OS X which uses tm_gmtoff instead\n    AC_CACHE_CHECK(for timezone variable in <time.h>,\n                   wx_cv_var_timezone,\n                   [\n                        AC_LANG_PUSH(C++)\n                        AC_TRY_COMPILE(\n                            [\n                                #include <time.h>\n                            ],\n                            [\n                                int tz;\n                                tz = timezone;\n                            ],\n                            [\n                                wx_cv_var_timezone=timezone\n                            ],\n                            [\n                                AC_TRY_COMPILE(\n                                    [\n                                        #include <time.h>\n                                    ],\n                                    [\n                                        int tz;\n                                        tz = _timezone;\n                                    ],\n                                    [\n                                        wx_cv_var_timezone=_timezone\n                                    ],\n                                    [\n                                        AC_TRY_COMPILE(\n                                            [\n                                                #include <time.h>\n                                            ],\n                                            [\n                                                int tz;\n                                                tz = __timezone;\n                                            ],\n                                            [\n                                                wx_cv_var_timezone=__timezone\n                                            ],\n                                            [\n                                                if test \"$USE_DOS\" = 0 ; then\n                                                    AC_MSG_WARN(no timezone variable, will use tm_gmtoff instead)\n                                                fi\n                                            ]\n                                        )\n                                    ]\n                                )\n                            ]\n                        )\n                        AC_LANG_POP()\n                   ]\n    )\n\n    dnl as we want $wx_cv_var_timezone to be expanded, use AC_DEFINE_UNQUOTED\n    if test \"x$wx_cv_var_timezone\" != x ; then\n        AC_DEFINE_UNQUOTED(WX_TIMEZONE, $wx_cv_var_timezone)\n    fi\n\n    dnl check for localtime (it's POSIX, but the check can do no harm...)\n    AC_CHECK_FUNCS(localtime)\n\n    if test \"$ac_cv_func_localtime\" = \"yes\"; then\n        AC_CACHE_CHECK(for tm_gmtoff in struct tm,\n                       wx_cv_struct_tm_has_gmtoff,\n        [\n            AC_TRY_COMPILE(\n                [\n                    #include <time.h>\n                ],\n                [\n                    struct tm tm;\n                    tm.tm_gmtoff++;\n                ],\n                [\n                    wx_cv_struct_tm_has_gmtoff=yes\n                ],\n                wx_cv_struct_tm_has_gmtoff=no\n            )\n        ])\n    fi\n\n    if test \"$wx_cv_struct_tm_has_gmtoff\" = \"yes\"; then\n        AC_DEFINE(WX_GMTOFF_IN_TM)\n    fi\n\n    AC_CACHE_CHECK([for _NL_TIME_FIRST_WEEKDAY in langinfo.h],\n                   wx_cv_have_nl_time_first_weekday,\n    [\n        AC_TRY_COMPILE(\n                [\n                     #define _GNU_SOURCE\n                     #include <langinfo.h>\n                ],\n                [\n                     _NL_TIME_FIRST_WEEKDAY;\n                ],\n                [\n                     wx_cv_have_nl_time_first_weekday=yes\n                ],\n                wx_cv_have_nl_time_first_weekday=no\n        )\n    ])\n\n    if test \"$wx_cv_have_nl_time_first_weekday\" = \"yes\"; then\n        AC_DEFINE(HAVE_NL_TIME_FIRST_WEEKDAY)\n    fi\n\n    SAMPLES_SUBDIRS=\"$SAMPLES_SUBDIRS typetest\"\nfi\n\ndnl ------------------------------------------------------------------------\ndnl wxProcess\ndnl ------------------------------------------------------------------------\n\nAC_CHECK_FUNCS(setpriority)\n\ndnl ------------------------------------------------------------------------\ndnl wxSocket\ndnl ------------------------------------------------------------------------\n\nif test \"$wxUSE_SOCKETS\" = \"yes\"; then\n    dnl under Windows we always have sockets\n    if test \"$USE_WIN32\" != 1 ; then\n        dnl under Solaris and OS/2, socket functions live in -lsocket\n        AC_CHECK_FUNC(socket,,\n            [\n                AC_CHECK_LIB(socket, socket,\n                    if test \"$INET_LINK\" != \" -lsocket\"; then\n                        INET_LINK=\"$INET_LINK -lsocket\"\n                    fi,\n                    [\n                        dnl under Haiku, socket is in libnetwork\n                        AC_CHECK_LIB(network, socket,\n                            if test \"$INET_LINK\" != \" -lnetwork\"; then\n                                INET_LINK=\"$INET_LINK -lnetwork\"\n                            fi,\n                            [\n                                AC_MSG_WARN([socket library not found - sockets will be disabled])\n                                wxUSE_SOCKETS=no\n                            ]\n                        )\n                    ]\n                )\n            ]\n        )\n    fi\nfi\n\nif test \"$wxUSE_SOCKETS\" = \"yes\" ; then\n    dnl under Windows we do not use getsockname\n    if test \"$USE_WIN32\" != 1 ; then\n        dnl determine the type of third argument for getsockname\n        dnl This test needs to be done in C++ mode since gsocket.cpp now\n        dnl is C++ code and pointer cast that are possible even without\n        dnl warning in C still fail in C++.\n        AC_CACHE_CHECK([what is the type of the third argument of getsockname],\n                       wx_cv_type_getsockname3,\n            [\n                AC_LANG_PUSH(C++)\n                AC_TRY_COMPILE(\n                    [\n                        #include <sys/types.h>\n                        #include <sys/socket.h>\n                    ],\n                    [\n                        socklen_t len;\n                        getsockname(0, 0, &len);\n                    ],\n                    wx_cv_type_getsockname3=socklen_t,\n                    [\n                        dnl the compiler will compile the version with size_t\n                        dnl even if the real type of the last parameter is int\n                        dnl but it should give at least a warning about\n                        dnl converting between incompatible pointer types, so\n                        dnl try to use it to get the correct behaviour at\n                        dnl least with gcc (otherwise we'd always use size_t)\n                        CFLAGS_OLD=\"$CFLAGS\"\n                        if test \"$GCC\" = yes ; then\n                            CFLAGS=\"-Werror $CFLAGS\"\n                        fi\n\n                        AC_TRY_COMPILE(\n                            [\n                                #include <sys/types.h>\n                                #include <sys/socket.h>\n                            ],\n                            [\n                                size_t len;\n                                getsockname(0, 0, &len);\n                            ],\n                            wx_cv_type_getsockname3=size_t,\n                            AC_TRY_COMPILE(\n                                [\n                                    #include <sys/types.h>\n                                    #include <sys/socket.h>\n                                ],\n                                [\n                                    int len;\n                                    getsockname(0, 0, &len);\n                                ],\n                                wx_cv_type_getsockname3=int,\n                                wx_cv_type_getsockname3=unknown\n                            )\n                        )\n\n                        CFLAGS=\"$CFLAGS_OLD\"\n                    ]\n                )\n                AC_LANG_POP()\n            ])\n\n        if test \"$wx_cv_type_getsockname3\" = \"unknown\"; then\n            wxUSE_SOCKETS=no\n            AC_MSG_WARN([Couldn't find socklen_t synonym for this system])\n        else\n            AC_DEFINE_UNQUOTED(WX_SOCKLEN_T, $wx_cv_type_getsockname3)\n        fi\n        dnl Do this again for getsockopt as it may be different\n        AC_CACHE_CHECK([what is the type of the fifth argument of getsockopt],\n                       wx_cv_type_getsockopt5,\n            [\n                dnl Note that the rules for compatibility of pointers\n                dnl are somewhat different between C and C++, so code\n                dnl that fails in C++ may not even give a warning about\n                dnl converting between incompatible pointer types in C.\n                dnl So this test needs to be done in C++ mode.\n                AC_LANG_PUSH(C++)\n                AC_TRY_COMPILE(\n                    [\n                        #include <sys/types.h>\n                        #include <sys/socket.h>\n                    ],\n                    [\n                        socklen_t len;\n                        getsockopt(0, 0, 0, 0, &len);\n                    ],\n                    wx_cv_type_getsockopt5=socklen_t,\n                    [\n                        AC_TRY_COMPILE(\n                            [\n                                #include <sys/types.h>\n                                #include <sys/socket.h>\n                            ],\n                            [\n                                size_t len;\n                                getsockopt(0, 0, 0, 0, &len);\n                            ],\n                            wx_cv_type_getsockopt5=size_t,\n                            AC_TRY_COMPILE(\n                                [\n                                    #include <sys/types.h>\n                                    #include <sys/socket.h>\n                                ],\n                                [\n                                    int len;\n                                    getsockopt(0, 0, 0, 0, &len);\n                                ],\n                                wx_cv_type_getsockopt5=int,\n                                wx_cv_type_getsockopt5=unknown\n                            )\n                        )\n                    ]\n                )\n                AC_LANG_POP()\n            ])\n\n        if test \"$wx_cv_type_getsockopt5\" = \"unknown\"; then\n            wxUSE_SOCKETS=no\n            AC_MSG_WARN([Couldn't find socklen_t synonym for this system])\n        else\n            AC_DEFINE_UNQUOTED(SOCKOPTLEN_T, $wx_cv_type_getsockopt5)\n        fi\n    fi\nfi\n\nif test \"$wxUSE_SOCKETS\" = \"yes\" ; then\n    if test \"$wxUSE_IPV6\" = \"yes\"; then\n        AC_CACHE_CHECK(\n            [whether we have sockaddr_in6],\n            [wx_cv_type_sockaddr_in6],\n            [\n                AC_TRY_COMPILE(\n                    [\n                        #include <sys/types.h>\n                        #include <sys/socket.h>\n                        #include <netinet/in.h>\n                    ],\n                    [\n                        struct sockaddr_in6 sa6;\n                    ],\n                    wx_cv_type_sockaddr_in6=yes,\n                    wx_cv_type_sockaddr_in6=no\n                )\n            ]\n        )\n\n        if test \"$wx_cv_type_sockaddr_in6\"=\"yes\"; then\n            AC_DEFINE(wxUSE_IPV6)\n        else\n            AC_MSG_WARN([IPv6 support not available... disabled])\n        fi\n    fi\n\n    AC_DEFINE(wxUSE_SOCKETS)\n    SAMPLES_SUBDIRS=\"$SAMPLES_SUBDIRS sockets\"\nfi\n\nif test \"$wxUSE_PROTOCOL\" = \"yes\"; then\n    if test \"$wxUSE_SOCKETS\" != \"yes\"; then\n        AC_MSG_WARN(Protocol classes require sockets... disabled)\n        wxUSE_PROTOCOL=no\n    fi\nfi\n\nif test \"$wxUSE_PROTOCOL\" = \"yes\"; then\n    AC_DEFINE(wxUSE_PROTOCOL)\n\n    if test \"$wxUSE_PROTOCOL_HTTP\" = \"yes\"; then\n        AC_DEFINE(wxUSE_PROTOCOL_HTTP)\n    fi\n    if test \"$wxUSE_PROTOCOL_FTP\" = \"yes\"; then\n        AC_DEFINE(wxUSE_PROTOCOL_FTP)\n    fi\n    if test \"$wxUSE_PROTOCOL_FILE\" = \"yes\"; then\n        AC_DEFINE(wxUSE_PROTOCOL_FILE)\n    fi\nelse\n    if test \"$wxUSE_FS_INET\" = \"yes\"; then\n        AC_MSG_WARN([HTTP filesystem require protocol classes... disabled])\n        wxUSE_FS_INET=\"no\"\n    fi\nfi\n\nif test \"$wxUSE_URL\" = \"yes\"; then\n    if test \"$wxUSE_PROTOCOL\" != \"yes\"; then\n        AC_MSG_WARN(wxURL class requires wxProtocol... disabled)\n        wxUSE_URL=no\n    fi\n    if test \"$wxUSE_URL\" = \"yes\"; then\n        AC_DEFINE(wxUSE_URL)\n    fi\nfi\n\nif test \"$wxUSE_VARIANT\" = \"yes\"; then\n    AC_DEFINE(wxUSE_VARIANT)\nfi\n\nif test \"$wxUSE_FS_INET\" = \"yes\"; then\n  AC_DEFINE(wxUSE_FS_INET)\nfi\n\nif test \"$wxUSE_WEBREQUEST\" = \"yes\"; then\n    if test \"$wxUSE_LIBCURL\" = \"yes\"; then\n        AC_DEFINE(wxUSE_WEBREQUEST_CURL)\n        have_webrequest_backend=1\n    fi\n\n    if test \"$USE_DARWIN\" = 1 -a \"$wxUSE_URLSESSION\" = \"yes\"; then\n        AC_DEFINE(wxUSE_WEBREQUEST_URLSESSION)\n        have_webrequest_backend=1\n    fi\n\n    if test \"$USE_WIN32\" = 1 -a \"$wxUSE_WINHTTP\" = \"yes\"; then\n        AC_DEFINE(wxUSE_WEBREQUEST_WINHTTP)\n        have_webrequest_backend=1\n    fi\n\n    if test \"$have_webrequest_backend\" = 1; then\n        AC_DEFINE(wxUSE_WEBREQUEST)\n        SAMPLES_SUBDIRS=\"$SAMPLES_SUBDIRS webrequest\"\n    else\n        AC_MSG_WARN([Disabling wxWebRequest because no backends are available])\n    fi\nfi\n\ndnl ---------------------------------------------------------------------------\ndnl Joystick support\ndnl ---------------------------------------------------------------------------\n\nif test \"$wxUSE_GUI\" = \"yes\" -a \"$wxUSE_JOYSTICK\" = \"yes\"; then\n    wxUSE_JOYSTICK=no\n\n    dnl under MSW and OS X we always have joystick support\n    if test \"$TOOLKIT\" = \"MSW\" -o \"$TOOLKIT\" = \"OSX_COCOA\" -o \"$TOOLKIT\" = \"COCOA\"; then\n        wxUSE_JOYSTICK=yes\n\n    dnl joystick support is only for Linux 2.1.x or greater\n    else\n        dnl notice the dummy includes argument: without it, AC_CHECK_HEADER\n        dnl checks only whether the header can be preprocessed, not that it\n        dnl can be compiled and in Linux 2.6.16 joystick.h is present but\n        dnl can't be compiled because of an error and with the default\n        dnl AC_CHECK_HEADER semantics we'd still detect it in this case and\n        dnl build would fail later\n        AC_CHECK_HEADERS([linux/joystick.h], [wxUSE_JOYSTICK=yes],, [AC_INCLUDES_DEFAULT()])\n    fi\n\n    if test \"$wxUSE_JOYSTICK\" = \"yes\"; then\n        AC_DEFINE(wxUSE_JOYSTICK)\n        SAMPLES_SUBDIRS=\"$SAMPLES_SUBDIRS joytest\"\n    else\n        AC_MSG_WARN(Joystick not supported by this system... disabled)\n    fi\nfi\n\n\ndnl ---------------------------------------------------------------------------\ndnl String stuff\ndnl ---------------------------------------------------------------------------\n\nif test \"$wxUSE_FONTENUM\" = \"yes\" ; then\n  AC_DEFINE(wxUSE_FONTENUM)\nfi\n\nif test \"$wxUSE_FONTMAP\" = \"yes\" ; then\n  AC_DEFINE(wxUSE_FONTMAP)\nfi\n\nif test \"$wxUSE_UNICODE\" = \"yes\" ; then\n  AC_DEFINE(wxUSE_UNICODE)\nfi\n\nif test \"$wxUSE_UNICODE\" = \"yes\" -a \"$wxUSE_UNICODE_UTF8\" = \"yes\"; then\n    AC_DEFINE(wxUSE_UNICODE_UTF8)\n\n    if test \"$wxUSE_UNICODE_UTF8_LOCALE\" = \"yes\"; then\n        AC_DEFINE(wxUSE_UTF8_LOCALE_ONLY)\n    fi\nfi\n\ndnl ---------------------------------------------------------------------------\ndnl big GUI components: MDI, doc/view, printing, help, ...\ndnl ---------------------------------------------------------------------------\n\nif test \"$wxUSE_CONSTRAINTS\" = \"yes\"; then\n    AC_DEFINE(wxUSE_CONSTRAINTS)\n    SAMPLES_SUBDIRS=\"$SAMPLES_SUBDIRS layout\"\nfi\n\nif test \"$wxUSE_MDI\" = \"yes\"; then\n    AC_DEFINE(wxUSE_MDI)\n\n    if test \"$wxUSE_MDI_ARCHITECTURE\" = \"yes\"; then\n        AC_DEFINE(wxUSE_MDI_ARCHITECTURE)\n        SAMPLES_SUBDIRS=\"$SAMPLES_SUBDIRS mdi\"\n    fi\nfi\n\nif test \"$wxUSE_DOC_VIEW_ARCHITECTURE\" = \"yes\" ; then\n    AC_DEFINE(wxUSE_DOC_VIEW_ARCHITECTURE)\n    SAMPLES_SUBDIRS=\"$SAMPLES_SUBDIRS docview\"\nfi\n\nif test \"$wxUSE_HELP\" = \"yes\"; then\n    AC_DEFINE(wxUSE_HELP)\n    SAMPLES_SUBDIRS=\"$SAMPLES_SUBDIRS help\"\n\n    if test \"$wxUSE_MSW\" = 1; then\n      if test \"$wxUSE_MS_HTML_HELP\" = \"yes\"; then\n        AC_DEFINE(wxUSE_MS_HTML_HELP)\n      fi\n    fi\n\n    if test \"$wxUSE_WXHTML_HELP\" = \"yes\"; then\n      if test \"$wxUSE_HTML\" = \"yes\"; then\n        AC_DEFINE(wxUSE_WXHTML_HELP)\n      else\n        AC_MSG_WARN(Cannot use wxHTML-based help without wxHTML so it won't be compiled)\n        wxUSE_WXHTML_HELP=no\n      fi\n    fi\nfi\n\nif test \"$wxUSE_PRINTING_ARCHITECTURE\" = \"yes\" ; then\n    AC_DEFINE(wxUSE_PRINTING_ARCHITECTURE)\n    SAMPLES_SUBDIRS=\"$SAMPLES_SUBDIRS printing\"\nfi\n\nif test \"$wxUSE_POSTSCRIPT\" = \"yes\" ; then\n  AC_DEFINE(wxUSE_POSTSCRIPT)\nfi\n\nAC_DEFINE(wxUSE_AFM_FOR_POSTSCRIPT)\n\nif test \"$wxUSE_SVG\" = \"yes\"; then\n    AC_DEFINE(wxUSE_SVG)\nfi\n\ndnl ---------------------------------------------------------------------------\ndnl wxMetafile\ndnl ---------------------------------------------------------------------------\n\nif test \"$wxUSE_METAFILE\" = \"yes\"; then\n    if test \"$wxUSE_MSW\" != 1 -a \"$wxUSE_MAC\" != 1; then\n        AC_MSG_WARN([wxMetafile is not available on this system... disabled])\n        wxUSE_METAFILE=no\n    fi\nelif test \"$wxUSE_METAFILE\" = \"auto\"; then\n    if test \"$wxUSE_MSW\" = 1 -o \"$wxUSE_MAC\" = 1; then\n        wxUSE_METAFILE=yes\n    fi\nfi\n\nif test \"$wxUSE_METAFILE\" = \"yes\"; then\n    AC_DEFINE(wxUSE_METAFILE)\n    if test \"$wxUSE_MSW\" = 1; then\n        dnl this one should probably be made separately configurable\n        AC_DEFINE(wxUSE_ENH_METAFILE)\n    fi\nfi\n\ndnl ---------------------------------------------------------------------------\ndnl IPC: IPC, Drag'n'Drop, Clipboard, ...\ndnl ---------------------------------------------------------------------------\n\nif test \"$USE_WIN32\" = 1 ; then\n    if test \"$wxUSE_OLE\" = \"yes\" ; then\n        LIBS=\"-lrpcrt4 -loleaut32 -lole32 -luuid $LIBS\"\n\n        AC_DEFINE(wxUSE_OLE)\n        AC_DEFINE(wxUSE_OLE_AUTOMATION)\n        AC_DEFINE(wxUSE_ACTIVEX)\n        SAMPLES_SUBDIRS=\"$SAMPLES_SUBDIRS oleauto\"\n    else\n        dnl Turn off features depending on OLE directly...\n        wxUSE_CLIPBOARD=no\n        wxUSE_DRAG_AND_DROP=no\n        wxUSE_DATAOBJ=no\n\n        dnl ... or indirectly (via wxUSE_ACTIVEX)\n        if test \"$wxUSE_MEDIACTRL\" = \"yes\"; then\n            AC_MSG_WARN(wxMediaCtrl requires wxUSE_OLE... disabled)\n            wxUSE_MEDIACTRL=no\n        fi\n\n        if test \"$wxUSE_WEBVIEW\" = \"yes\"; then\n            AC_MSG_WARN(wxWebView requires wxUSE_OLE... disabled)\n            wxUSE_WEBVIEW=no\n        fi\n    fi\nfi\n\nif test \"$wxUSE_IPC\" = \"yes\"; then\n    if test \"$wxUSE_SOCKETS\" != \"yes\" -a \"$USE_WIN32\" != 1; then\n        AC_MSG_WARN(wxWidgets IPC classes require sockets... disabled)\n        wxUSE_IPC=no\n    fi\n\n    if test \"$wxUSE_IPC\" = \"yes\"; then\n        AC_DEFINE(wxUSE_IPC)\n        SAMPLES_SUBDIRS=\"$SAMPLES_SUBDIRS ipc\"\n    fi\nfi\n\nif test \"$wxUSE_DATAOBJ\" = \"yes\"; then\n    if test \"$wxUSE_DFB\" = 1; then\n        AC_MSG_WARN([wxDataObject not yet supported under $TOOLKIT... disabled])\n        wxUSE_DATAOBJ=no\n    else\n        AC_DEFINE(wxUSE_DATAOBJ)\n    fi\nelse\n    AC_MSG_WARN([Clipboard and drag-and-drop require wxDataObject -- disabled])\n    wxUSE_CLIPBOARD=no\n    wxUSE_DRAG_AND_DROP=no\nfi\n\nif test \"$wxUSE_CLIPBOARD\" = \"yes\"; then\n    if test \"$wxUSE_DFB\" = 1; then\n        AC_MSG_WARN([Clipboard not yet supported under $TOOLKIT... disabled])\n        wxUSE_CLIPBOARD=no\n    fi\n\n    if test \"$wxUSE_CLIPBOARD\" = \"yes\"; then\n        AC_DEFINE(wxUSE_CLIPBOARD)\n    fi\nfi\n\nif test \"$wxUSE_DRAG_AND_DROP\" = \"yes\" ; then\n    if test \"$wxUSE_MOTIF\" = 1 -o \"$wxUSE_X11\" = 1 -o \"$wxUSE_DFB\" = 1; then\n        AC_MSG_WARN([Drag and drop not yet supported under $TOOLKIT... disabled])\n        wxUSE_DRAG_AND_DROP=no\n    fi\n\n    if test \"$wxUSE_DRAG_AND_DROP\" = \"yes\"; then\n        AC_DEFINE(wxUSE_DRAG_AND_DROP)\n    fi\n\nfi\n\nif test \"$wxUSE_DRAG_AND_DROP\" = \"yes\" -o \"$wxUSE_CLIPBOARD\" = \"yes\"; then\n    SAMPLES_SUBDIRS=\"$SAMPLES_SUBDIRS dnd\"\nfi\n\nif test \"$wxUSE_CLIPBOARD\" = \"yes\"; then\n    SAMPLES_SUBDIRS=\"$SAMPLES_SUBDIRS clipboard\"\nfi\n\nif test \"$wxUSE_SPLINES\" = \"yes\" ; then\n  AC_DEFINE(wxUSE_SPLINES)\nfi\n\nif test \"$wxUSE_MOUSEWHEEL\" = \"yes\" ; then\n  AC_DEFINE(wxUSE_MOUSEWHEEL)\nfi\n\nif test \"$wxUSE_UIACTIONSIMULATOR\" = \"yes\" ; then\n    if test \"$wxUSE_GTK\" = 1 -o \"$wxUSE_MOTIF\" = 1 -o \"$wxUSE_X11\" = 1; then\n        if test \"$wxUSE_XTEST\" = \"yes\" ; then\n            PKG_CHECK_MODULES(XTST, xtst,\n                [\n                    GUI_TK_LIBRARY=\"$GUI_TK_LIBRARY $XTST_LIBS\"\n                    CFLAGS=\"$XTST_CFLAGS $CFLAGS\"\n                    CXXFLAGS=\"$XTST_CFLAGS $CXXFLAGS\"\n                    AC_DEFINE(wxUSE_XTEST)\n                ],\n                [\n                    if test \"$WXGTK3\" = 1; then\n                        dnl This class can't work without XTest with GTK+ 3\n                        dnl which uses XInput2 and so ignores XSendEvent().\n                        AC_MSG_WARN([XTest not found, disabling wxUIActionSimulator])\n                        wxUSE_UIACTIONSIMULATOR=no\n                    fi\n                    dnl The other ports can use XSendEvent(), so don't warn\n                    wxUSE_XTEST=\"no\"\n                ]\n            )\n        elif test \"$WXGTK3\" = 1; then\n            dnl As per above, wxUIActionSimulator can't be used in this case,\n            dnl but there is no need to warn, presumably the user knows what\n            dnl he's doing if --without-xtest was explicitly specified.\n            wxUSE_UIACTIONSIMULATOR=no\n        fi\n    elif test \"$wxUSE_DFB\" = 1; then\n        AC_MSG_WARN([wxUIActionSimulator not yet supported under $TOOLKIT... disabled])\n        wxUSE_UIACTIONSIMULATOR=no\n    fi\n\n    if test \"$wxUSE_UIACTIONSIMULATOR\" = \"yes\" ; then\n        AC_DEFINE(wxUSE_UIACTIONSIMULATOR)\n        SAMPLES_SUBDIRS=\"$SAMPLES_SUBDIRS uiaction\"\n    fi\nfi\n\nif test \"$wxUSE_DC_TRANSFORM_MATRIX\" = \"yes\" ; then\n    AC_DEFINE(wxUSE_DC_TRANSFORM_MATRIX)\nfi\n\ndnl ---------------------------------------------------------------------------\ndnl GUI controls\ndnl ---------------------------------------------------------------------------\n\nUSES_CONTROLS=0\nif test \"$wxUSE_CONTROLS\" = \"yes\"; then\n  USES_CONTROLS=1\nfi\n\nif test \"$wxUSE_MARKUP\" = \"yes\"; then\n  AC_DEFINE(wxUSE_MARKUP)\nfi\n\nif test \"$wxUSE_ACCEL\" = \"yes\"; then\n  AC_DEFINE(wxUSE_ACCEL)\n  USES_CONTROLS=1\nfi\n\nif test \"$wxUSE_ACTIVITYINDICATOR\" = \"yes\"; then\n  AC_DEFINE(wxUSE_ACTIVITYINDICATOR)\nfi\n\nif test \"$wxUSE_ADDREMOVECTRL\" = \"yes\"; then\n  AC_DEFINE(wxUSE_ADDREMOVECTRL)\nfi\n\nif test \"$wxUSE_ANIMATIONCTRL\" = \"yes\"; then\n  AC_DEFINE(wxUSE_ANIMATIONCTRL)\n  USES_CONTROLS=1\n  SAMPLES_SUBDIRS=\"$SAMPLES_SUBDIRS animate\"\nfi\n\nif test \"$wxUSE_BANNERWINDOW\" = \"yes\"; then\n  AC_DEFINE(wxUSE_BANNERWINDOW)\nfi\n\nif test \"$wxUSE_BUTTON\" = \"yes\"; then\n  AC_DEFINE(wxUSE_BUTTON)\n  USES_CONTROLS=1\nfi\n\nif test \"$wxUSE_BMPBUTTON\" = \"yes\"; then\n  AC_DEFINE(wxUSE_BMPBUTTON)\n  USES_CONTROLS=1\nfi\n\nif test \"$wxUSE_CALCTRL\" = \"yes\"; then\n  AC_DEFINE(wxUSE_CALENDARCTRL)\n  USES_CONTROLS=1\n  SAMPLES_SUBDIRS=\"$SAMPLES_SUBDIRS calendar\"\nfi\n\nif test \"$wxUSE_CARET\" = \"yes\"; then\n  AC_DEFINE(wxUSE_CARET)\n  USES_CONTROLS=1\n  SAMPLES_SUBDIRS=\"$SAMPLES_SUBDIRS caret\"\nfi\n\nif test \"$wxUSE_COLLPANE\" = \"yes\"; then\n    AC_DEFINE(wxUSE_COLLPANE)\n    USES_CONTROLS=1\n    SAMPLES_SUBDIRS=\"$SAMPLES_SUBDIRS collpane\"\nfi\n\nif test \"$wxUSE_COMBOBOX\" = \"yes\"; then\n  AC_DEFINE(wxUSE_COMBOBOX)\n  USES_CONTROLS=1\nfi\n\nif test \"$wxUSE_COMBOCTRL\" = \"yes\"; then\n  AC_DEFINE(wxUSE_COMBOCTRL)\n  USES_CONTROLS=1\nfi\n\nif test \"$wxUSE_COMMANDLINKBUTTON\" = \"yes\"; then\n  AC_DEFINE(wxUSE_COMMANDLINKBUTTON)\n  USES_CONTROLS=1\nfi\n\nif test \"$wxUSE_CHOICE\" = \"yes\"; then\n  AC_DEFINE(wxUSE_CHOICE)\n  USES_CONTROLS=1\nfi\n\nif test \"$wxUSE_CHOICEBOOK\" = \"yes\"; then\n    AC_DEFINE(wxUSE_CHOICEBOOK)\n    USES_CONTROLS=1\nfi\n\nif test \"$wxUSE_CHECKBOX\" = \"yes\"; then\n  AC_DEFINE(wxUSE_CHECKBOX)\n  USES_CONTROLS=1\nfi\n\nif test \"$wxUSE_CHECKLST\" = \"yes\"; then\n  AC_DEFINE(wxUSE_CHECKLISTBOX)\n  USES_CONTROLS=1\nfi\n\nif test \"$wxUSE_COLOURPICKERCTRL\" = \"yes\"; then\n  AC_DEFINE(wxUSE_COLOURPICKERCTRL)\n  USES_CONTROLS=1\nfi\n\nif test \"$wxUSE_DATEPICKCTRL\" = \"yes\"; then\n  AC_DEFINE(wxUSE_DATEPICKCTRL)\n  USES_CONTROLS=1\nfi\n\nif test \"$wxUSE_DIRPICKERCTRL\" = \"yes\"; then\n  AC_DEFINE(wxUSE_DIRPICKERCTRL)\n  USES_CONTROLS=1\nfi\n\nif test \"$wxUSE_FILECTRL\" = \"yes\"; then\n  AC_DEFINE(wxUSE_FILECTRL)\n  USES_CONTROLS=1\nfi\n\nif test \"$wxUSE_FILEPICKERCTRL\" = \"yes\"; then\n  AC_DEFINE(wxUSE_FILEPICKERCTRL)\n  USES_CONTROLS=1\nfi\n\nif test \"$wxUSE_FONTPICKERCTRL\" = \"yes\"; then\n  AC_DEFINE(wxUSE_FONTPICKERCTRL)\n  USES_CONTROLS=1\nfi\n\nif test \"$wxUSE_DISPLAY\" = \"yes\"; then\n    if test \"$wxUSE_DFB\" = 1; then\n        AC_MSG_WARN([wxDisplay not yet supported under $TOOLKIT... disabled])\n        wxUSE_DISPLAY=no\n    else\n        AC_DEFINE(wxUSE_DISPLAY)\n        SAMPLES_SUBDIRS=\"$SAMPLES_SUBDIRS display\"\n    fi\nfi\n\nif test \"$wxUSE_DETECT_SM\" = \"yes\"; then\n    AC_DEFINE(wxUSE_DETECT_SM)\nfi\n\nif test \"$wxUSE_GAUGE\" = \"yes\"; then\n  AC_DEFINE(wxUSE_GAUGE)\n  USES_CONTROLS=1\nfi\n\nif test \"$wxUSE_GRID\" = \"yes\"; then\n  AC_DEFINE(wxUSE_GRID)\n  USES_CONTROLS=1\n  SAMPLES_SUBDIRS=\"$SAMPLES_SUBDIRS grid\"\nfi\n\nif test \"$wxUSE_HEADERCTRL\" = \"yes\"; then\n  AC_DEFINE(wxUSE_HEADERCTRL)\n  USES_CONTROLS=1\nfi\n\nif test \"$wxUSE_HYPERLINKCTRL\" = \"yes\"; then\n  AC_DEFINE(wxUSE_HYPERLINKCTRL)\n  USES_CONTROLS=1\nfi\n\nif test \"$wxUSE_BITMAPCOMBOBOX\" = \"yes\"; then\n  AC_DEFINE(wxUSE_BITMAPCOMBOBOX)\n  USES_CONTROLS=1\nfi\n\nif test \"$wxUSE_DATAVIEWCTRL\" = \"yes\"; then\n  AC_DEFINE(wxUSE_DATAVIEWCTRL)\n  USES_CONTROLS=1\n  SAMPLES_SUBDIRS=\"$SAMPLES_SUBDIRS dataview\"\n\n  if test \"$wxUSE_NATIVE_DATAVIEWCTRL\" = \"yes\"; then\n    AC_DEFINE(wxUSE_NATIVE_DATAVIEWCTRL)\n  fi\nfi\n\nif test \"$wxUSE_IMAGLIST\" = \"yes\"; then\n    AC_DEFINE(wxUSE_IMAGLIST)\nfi\n\nif test \"$wxUSE_INFOBAR\" = \"yes\"; then\n    AC_DEFINE(wxUSE_INFOBAR)\nfi\n\nif test \"$wxUSE_LISTBOOK\" = \"yes\"; then\n    AC_DEFINE(wxUSE_LISTBOOK)\n    USES_CONTROLS=1\nfi\n\nif test \"$wxUSE_LISTBOX\" = \"yes\"; then\n    AC_DEFINE(wxUSE_LISTBOX)\n    USES_CONTROLS=1\nfi\n\nif test \"$wxUSE_LISTCTRL\" = \"yes\"; then\n    if test \"$wxUSE_IMAGLIST\" = \"yes\"; then\n        AC_DEFINE(wxUSE_LISTCTRL)\n        USES_CONTROLS=1\n        SAMPLES_SUBDIRS=\"$SAMPLES_SUBDIRS listctrl\"\n    else\n        AC_MSG_WARN([wxListCtrl requires wxImageList and won't be compiled without it])\n    fi\nfi\n\nif test \"$wxUSE_EDITABLELISTBOX\" = \"yes\"; then\n    AC_DEFINE(wxUSE_EDITABLELISTBOX)\n    USES_CONTROLS=1\nfi\n\nif test \"$wxUSE_NOTEBOOK\" = \"yes\"; then\n    AC_DEFINE(wxUSE_NOTEBOOK)\n    USES_CONTROLS=1\n    SAMPLES_SUBDIRS=\"$SAMPLES_SUBDIRS notebook\"\nfi\n\nif test \"$wxUSE_NOTIFICATION_MESSAGE\" = \"yes\"; then\n    AC_DEFINE(wxUSE_NOTIFICATION_MESSAGE)\nfi\n\nif test \"$wxUSE_ODCOMBOBOX\" = \"yes\"; then\n  AC_DEFINE(wxUSE_ODCOMBOBOX)\n  USES_CONTROLS=1\n  SAMPLES_SUBDIRS=\"$SAMPLES_SUBDIRS combo\"\nfi\n\nif test \"$wxUSE_RADIOBOX\" = \"yes\"; then\n    AC_DEFINE(wxUSE_RADIOBOX)\n    USES_CONTROLS=1\nfi\n\nif test \"$wxUSE_RADIOBTN\" = \"yes\"; then\n    AC_DEFINE(wxUSE_RADIOBTN)\n    USES_CONTROLS=1\nfi\n\nif test \"$wxUSE_REARRANGECTRL\" = \"yes\"; then\n    AC_DEFINE(wxUSE_REARRANGECTRL)\nfi\n\nif test \"$wxUSE_RICHMSGDLG\" = \"yes\"; then\n    AC_DEFINE(wxUSE_RICHMSGDLG)\nfi\n\nif test \"$wxUSE_RICHTOOLTIP\" = \"yes\"; then\n    AC_DEFINE(wxUSE_RICHTOOLTIP)\nfi\n\nif test \"$wxUSE_SASH\" = \"yes\"; then\n    AC_DEFINE(wxUSE_SASH)\n    SAMPLES_SUBDIRS=\"$SAMPLES_SUBDIRS sashtest\"\nfi\n\nif test \"$wxUSE_SCROLLBAR\" = \"yes\"; then\n    AC_DEFINE(wxUSE_SCROLLBAR)\n    USES_CONTROLS=1\n    SAMPLES_SUBDIRS=\"$SAMPLES_SUBDIRS scroll\"\nfi\n\nif test \"$wxUSE_SEARCHCTRL\" = \"yes\"; then\n    AC_DEFINE(wxUSE_SEARCHCTRL)\n    USES_CONTROLS=1\nfi\n\nif test \"$wxUSE_SLIDER\" = \"yes\"; then\n    AC_DEFINE(wxUSE_SLIDER)\n    USES_CONTROLS=1\nfi\n\nif test \"$wxUSE_SPINBTN\" = \"yes\"; then\n    AC_DEFINE(wxUSE_SPINBTN)\n    USES_CONTROLS=1\nfi\n\nif test \"$wxUSE_SPINCTRL\" = \"yes\"; then\n    AC_DEFINE(wxUSE_SPINCTRL)\n    USES_CONTROLS=1\nfi\n\nif test \"$wxUSE_SPLITTER\" = \"yes\"; then\n    AC_DEFINE(wxUSE_SPLITTER)\n    SAMPLES_SUBDIRS=\"$SAMPLES_SUBDIRS splitter\"\nfi\n\nif test \"$wxUSE_STATBMP\" = \"yes\"; then\n    AC_DEFINE(wxUSE_STATBMP)\n    USES_CONTROLS=1\nfi\n\nif test \"$wxUSE_STATBOX\" = \"yes\"; then\n    AC_DEFINE(wxUSE_STATBOX)\n    USES_CONTROLS=1\nfi\n\nif test \"$wxUSE_STATTEXT\" = \"yes\"; then\n    AC_DEFINE(wxUSE_STATTEXT)\n    USES_CONTROLS=1\nfi\n\nif test \"$wxUSE_STATLINE\" = \"yes\"; then\n    AC_DEFINE(wxUSE_STATLINE)\n    USES_CONTROLS=1\nfi\n\nif test \"$wxUSE_STATUSBAR\" = \"yes\"; then\n    dnl this will get undefined in wx/chkconf.h if it's not supported\n    AC_DEFINE(wxUSE_NATIVE_STATUSBAR)\n    AC_DEFINE(wxUSE_STATUSBAR)\n    USES_CONTROLS=1\n\n    SAMPLES_SUBDIRS=\"$SAMPLES_SUBDIRS statbar\"\nfi\n\nif test \"$wxUSE_TEXTCTRL\" = \"yes\"; then\n    AC_DEFINE(wxUSE_TEXTCTRL)\n    USES_CONTROLS=1\n    SAMPLES_SUBDIRS=\"$SAMPLES_SUBDIRS text\"\n\n    dnl we don't have special switches to disable wxUSE_RICHEDIT[2], it doesn't\n    dnl seem useful to allow disabling them\n    AC_DEFINE(wxUSE_RICHEDIT)\n    AC_DEFINE(wxUSE_RICHEDIT2)\nfi\n\nif test \"$wxUSE_TIMEPICKCTRL\" = \"yes\"; then\n  AC_DEFINE(wxUSE_TIMEPICKCTRL)\n  USES_CONTROLS=1\nfi\n\nif test \"$wxUSE_TOGGLEBTN\" = \"yes\"; then\n    AC_DEFINE(wxUSE_TOGGLEBTN)\n    USES_CONTROLS=1\nfi\n\nif test \"$wxUSE_TOOLBAR\" = \"yes\"; then\n    AC_DEFINE(wxUSE_TOOLBAR)\n    USES_CONTROLS=1\n\n    if test \"$wxUSE_UNIVERSAL\" = \"yes\"; then\n        wxUSE_TOOLBAR_NATIVE=\"no\"\n    else\n        wxUSE_TOOLBAR_NATIVE=\"yes\"\n        AC_DEFINE(wxUSE_TOOLBAR_NATIVE)\n    fi\n\n    SAMPLES_SUBDIRS=\"$SAMPLES_SUBDIRS toolbar\"\nfi\n\nif test \"$wxUSE_TOOLTIPS\" = \"yes\"; then\n    if test \"$wxUSE_MOTIF\" = 1; then\n        AC_MSG_WARN([wxTooltip not supported yet under Motif... disabled])\n    else\n        if test \"$wxUSE_UNIVERSAL\" = \"yes\"; then\n            AC_MSG_WARN([wxTooltip not supported yet in wxUniversal... disabled])\n        else\n            AC_DEFINE(wxUSE_TOOLTIPS)\n        fi\n    fi\nfi\n\nif test \"$wxUSE_TREEBOOK\" = \"yes\"; then\n    AC_DEFINE(wxUSE_TREEBOOK)\n    USES_CONTROLS=1\nfi\n\nif test \"$wxUSE_TOOLBOOK\" = \"yes\"; then\n    AC_DEFINE(wxUSE_TOOLBOOK)\n    USES_CONTROLS=1\nfi\n\nif test \"$wxUSE_TREECTRL\" = \"yes\"; then\n    if test \"$wxUSE_IMAGLIST\" = \"yes\"; then\n        AC_DEFINE(wxUSE_TREECTRL)\n        USES_CONTROLS=1\n        SAMPLES_SUBDIRS=\"$SAMPLES_SUBDIRS treectrl\"\n    else\n        AC_MSG_WARN([wxTreeCtrl requires wxImageList and won't be compiled without it])\n    fi\nfi\n\nif test \"$wxUSE_TREELISTCTRL\" = \"yes\"; then\n    AC_DEFINE(wxUSE_TREELISTCTRL)\n    USES_CONTROLS=1\n    SAMPLES_SUBDIRS=\"$SAMPLES_SUBDIRS treelist\"\nfi\n\nif test \"$wxUSE_POPUPWIN\" = \"yes\"; then\n    AC_DEFINE(wxUSE_POPUPWIN)\n    SAMPLES_SUBDIRS=\"$SAMPLES_SUBDIRS popup\"\n\n    USES_CONTROLS=1\nfi\n\nif test \"$wxUSE_PREFERENCES_EDITOR\" = \"yes\"; then\n    AC_DEFINE(wxUSE_PREFERENCES_EDITOR)\n    SAMPLES_SUBDIRS=\"$SAMPLES_SUBDIRS preferences\"\nfi\n\nif test \"$wxUSE_PRIVATE_FONTS\" = \"yes\"; then\n    if test \"$wxUSE_GTK\" = 1; then\n        if test \"$wxUSE_PRIVATE_FONTS\" = \"yes\"; then\n            PKG_CHECK_MODULES(PRIVATE_FONTS, [fontconfig >= 2.8.0 pangoft2 >= 1.38.0],\n                              [\n                                AC_DEFINE(wxUSE_PRIVATE_FONTS)\n                                CXXFLAGS=\"$PRIVATE_FONTS_CFLAGS $CXXFLAGS\"\n                                GUI_TK_LIBRARY=\"$GUI_TK_LIBRARY $PRIVATE_FONTS_LIBS\"\n                              ],\n                              [AC_MSG_WARN([run-time font loading won't be supported by wxFont])])\n        fi\n    elif test \"$wxUSE_MAC\" = 1 -o \"$wxUSE_MSW\" = 1; then\n        dnl In these ports we don't need anything special.\n        AC_DEFINE(wxUSE_PRIVATE_FONTS)\n    fi\n    dnl And in the other ports wxUSE_PRIVATE_FONTS is not supported.\nfi\n\nif test \"$wxUSE_DIALUP_MANAGER\" = \"yes\"; then\n    if test \"$wxUSE_MAC\" = 1; then\n        AC_MSG_WARN([Dialup manager not supported on this platform... disabled])\n    else\n        AC_DEFINE(wxUSE_DIALUP_MANAGER)\n        SAMPLES_SUBDIRS=\"$SAMPLES_SUBDIRS dialup\"\n    fi\nfi\n\nif test \"$wxUSE_TIPWINDOW\" = \"yes\"; then\n    AC_DEFINE(wxUSE_TIPWINDOW)\nfi\n\nif test \"$USES_CONTROLS\" = 1; then\n    AC_DEFINE(wxUSE_CONTROLS)\nfi\n\ndnl ---------------------------------------------------------------------------\ndnl misc options\ndnl ---------------------------------------------------------------------------\n\ndnl please keep the settings below in alphabetical order\nif test \"$wxUSE_ACCESSIBILITY\" = \"yes\"; then\n    AC_DEFINE(wxUSE_ACCESSIBILITY)\n    SAMPLES_SUBDIRS=\"$SAMPLES_SUBDIRS access\"\nfi\n\nif test \"$wxUSE_ARTPROVIDER_STD\" = \"yes\"; then\n    AC_DEFINE(wxUSE_ARTPROVIDER_STD)\nfi\n\nif test \"$wxUSE_ARTPROVIDER_TANGO\" = \"auto\"; then\n    dnl Tango-based art provider is not needed in GTK-based ports as the\n    dnl native art provider completely replaces it.\n    if test \"$wxUSE_GTK\" != 1; then\n        dnl It also requires support for memory-mapped PNG images.\n        if test \"$wxUSE_LIBPNG\" != no -a \\\n                \"$wxUSE_IMAGE\" = yes -a \\\n                \"$wxUSE_STREAMS\" = yes; then\n            wxUSE_ARTPROVIDER_TANGO=\"yes\"\n        fi\n    fi\nfi\n\nif test \"$wxUSE_ARTPROVIDER_TANGO\" = \"yes\"; then\n    AC_DEFINE(wxUSE_ARTPROVIDER_TANGO)\nfi\n\nif test \"$wxUSE_DRAGIMAGE\" = \"yes\"; then\n    AC_DEFINE(wxUSE_DRAGIMAGE)\n    SAMPLES_SUBDIRS=\"$SAMPLES_SUBDIRS dragimag\"\nfi\n\nif test \"$wxUSE_EXCEPTIONS\" = \"yes\"; then\n    if test \"$wxUSE_NO_EXCEPTIONS\" = \"yes\" ; then\n        AC_MSG_WARN([--enable-exceptions can't be used with --enable-no_exceptions])\n    else\n        AC_DEFINE(wxUSE_EXCEPTIONS)\n        SAMPLES_SUBDIRS=\"$SAMPLES_SUBDIRS except\"\n    fi\nfi\n\nUSE_HTML=0\nif test \"$wxUSE_HTML\" = \"yes\"; then\n    AC_DEFINE(wxUSE_HTML)\n    USE_HTML=1\n    SAMPLES_SUBDIRS=\"$SAMPLES_SUBDIRS html/about html/help html/helpview html/printing html/test html/virtual html/widget html/zip htlbox\"\n    SAMPLES_SUBTREES=\"$SAMPLES_SUBTREES html\"\nfi\n\nUSE_XRC=0\nif test \"$wxUSE_XRC\" = \"yes\"; then\n    if test \"$wxUSE_XML\" != \"yes\"; then\n        AC_MSG_WARN([XML library not built, XRC resources disabled])\n        wxUSE_XRC=no\n    else\n        AC_DEFINE(wxUSE_XRC)\n        USE_XRC=1\n        SAMPLES_SUBDIRS=\"$SAMPLES_SUBDIRS xrc\"\n\n        echo \"${HOST_PREFIX}install_name_tool \\${changes} \\${2}/wxrc-${WX_RELEASE}\" >> change-install-names\n    fi\nfi\n\nUSE_AUI=0\nif test \"$wxUSE_AUI\" = \"yes\"; then\n   AC_DEFINE(wxUSE_AUI)\n   USE_AUI=1\n   SAMPLES_SUBDIRS=\"$SAMPLES_SUBDIRS aui\"\nfi\n\nUSE_PROPGRID=0\nif test \"$wxUSE_PROPGRID\" = \"yes\"; then\n   AC_DEFINE(wxUSE_PROPGRID)\n   USE_PROPGRID=1\n   SAMPLES_SUBDIRS=\"$SAMPLES_SUBDIRS propgrid\"\nfi\n\nUSE_RIBBON=0\nif test \"$wxUSE_RIBBON\" = \"yes\"; then\n   AC_DEFINE(wxUSE_RIBBON)\n   USE_RIBBON=1\n   SAMPLES_SUBDIRS=\"$SAMPLES_SUBDIRS ribbon\"\nfi\n\nUSE_STC=0\nif test \"$wxUSE_STC\" = \"yes\"; then\n   AC_DEFINE(wxUSE_STC)\n   USE_STC=1\n   SAMPLES_SUBDIRS=\"$SAMPLES_SUBDIRS stc\"\n\n   dnl python is used to update src/stc.h (see build/bakefiles/scintilla.bkl)\n   AC_PATH_PROG(PYTHON, python)\n   if test \"x$PYTHON\" = \"x\"; then\n     COND_PYTHON=\"#\"\n   fi\n   AC_SUBST(COND_PYTHON)\nfi\n\nif test \"$wxUSE_MENUS\" = \"yes\"; then\n    AC_DEFINE(wxUSE_MENUS)\n    if test \"$wxUSE_MENUBAR\" = \"yes\"; then\n        AC_DEFINE(wxUSE_MENUBAR)\n        SAMPLES_SUBDIRS=\"$SAMPLES_SUBDIRS menu\"\n    fi\nelif test \"$wxUSE_MENUBAR\" = \"yes\"; then\n    AC_MSG_WARN([wxMenuBar can't be used without wxMenu and will be disabled])\nfi\n\nif test \"$wxUSE_MIMETYPE\" = \"yes\"; then\n    AC_DEFINE(wxUSE_MIMETYPE)\nfi\n\nif test \"$wxUSE_MINIFRAME\" = \"yes\"; then\n    AC_DEFINE(wxUSE_MINIFRAME)\nfi\n\nif test \"$wxUSE_SYSTEM_OPTIONS\" = \"yes\"; then\n    AC_DEFINE(wxUSE_SYSTEM_OPTIONS)\nfi\n\nif test \"$wxUSE_TASKBARICON\" = \"yes\"; then\n    AC_DEFINE(wxUSE_TASKBARICON)\n    dnl This is used under MSW, just enable it always without testing for the\n    dnl toolkit nor providing a separate option for it because it's totally\n    dnl harmless to have it defined even if it's unnecessary.\n    AC_DEFINE(wxUSE_TASKBARICON_BALLOONS)\n    SAMPLES_SUBDIRS=\"$SAMPLES_SUBDIRS taskbar\"\nfi\n\n\nif test \"$wxUSE_VALIDATORS\" = \"yes\"; then\n    AC_DEFINE(wxUSE_VALIDATORS)\n    SAMPLES_SUBDIRS=\"$SAMPLES_SUBDIRS validate\"\nfi\n\nif test \"$wxUSE_PALETTE\" = \"yes\" ; then\n    if test \"$wxUSE_DFB\" = 1; then\n        AC_MSG_WARN([wxPalette not yet supported under DFB... disabled])\n        wxUSE_PALETTE=no\n    else\n        AC_DEFINE(wxUSE_PALETTE)\n    fi\nfi\n\nUSE_RICHTEXT=0\nif test \"$wxUSE_RICHTEXT\" = \"yes\"; then\n    AC_DEFINE(wxUSE_RICHTEXT)\n    USE_RICHTEXT=1\n    SAMPLES_SUBDIRS=\"$SAMPLES_SUBDIRS richtext\"\nfi\n\nif test \"$wxUSE_WEBVIEW\" = \"yes\"; then\n    USE_WEBVIEW_WEBKIT=0\n    USE_WEBVIEW_WEBKIT2=0\n    if test \"$wxUSE_WEBVIEW_WEBKIT\" = \"yes\"; then\n        if test \"$wxUSE_GTK\" = 1; then\n            if test \"$WXGTK3\" = 1; then\n                PKG_CHECK_MODULES([WEBKIT],\n                                  [webkit2gtk-4.0],\n                                  [\n                                    USE_WEBVIEW_WEBKIT2=1\n                                    CXXFLAGS=\"$CXXFLAGS $WEBKIT_CFLAGS\"\n                                    EXTRALIBS_WEBVIEW=\"$WEBKIT_LIBS\"\n                                  ],\n                                  [\n                                    AC_MSG_WARN([webkit2gtk not found, falling back to webkitgtk])\n                                  ])\n            fi\n            if test \"$USE_WEBVIEW_WEBKIT2\" = 0; then\n                webkitgtk=webkit-1.0\n                if test \"$WXGTK3\" = 1; then\n                    webkitgtk=\"webkitgtk-${TOOLKIT_VERSION}.0\"\n                fi\n                PKG_CHECK_MODULES([WEBKIT],\n                                  [$webkitgtk >= 1.3.1],\n                                  [\n                                    USE_WEBVIEW_WEBKIT=1\n                                    CXXFLAGS=\"$CXXFLAGS $WEBKIT_CFLAGS\"\n                                    EXTRALIBS_WEBVIEW=\"$WEBKIT_LIBS\"\n                                  ],\n                                  [\n                                    AC_MSG_WARN([webkitgtk not found.])\n                                  ])\n            fi\n        elif test \"$wxUSE_MAC\" = 1 -a \"$USE_DARWIN\" = 1; then\n            dnl Under Mac we always have the libraries\n            USE_WEBVIEW_WEBKIT=1\n            WEBKIT_LINK=\"-framework WebKit\"\n        fi\n    fi\n\n    wxUSE_WEBVIEW=\"no\"\n    if test \"$wxUSE_GTK\" = 1 -o \"$wxUSE_MAC\" = 1; then\n        if test \"$USE_WEBVIEW_WEBKIT\" = 1; then\n            wxUSE_WEBVIEW=\"yes\"\n            AC_DEFINE(wxUSE_WEBVIEW_WEBKIT)\n        elif test \"$USE_WEBVIEW_WEBKIT2\" = 1; then\n            wxUSE_WEBVIEW=\"yes\"\n            AC_DEFINE(wxUSE_WEBVIEW_WEBKIT2)\n        else\n            AC_MSG_WARN([WebKit not available, disabling wxWebView])\n        fi\n    elif test \"$wxUSE_MSW\" = 1; then\n        if test \"$wxUSE_WEBVIEW_IE\" = \"yes\"; then\n            dnl TODO: Check for the required headers/libraries under Windows\n            dnl       too and do the right thing automatically there too.\n            wxUSE_WEBVIEW=\"yes\"\n            AC_DEFINE(wxUSE_WEBVIEW_IE)\n        fi\n    fi\nfi\n\nif test \"$wxUSE_WEBVIEW\" = \"yes\"; then\n    USE_WEBVIEW=1\n    AC_DEFINE(wxUSE_WEBVIEW)\n    SAMPLES_SUBDIRS=\"$SAMPLES_SUBDIRS webview\"\nelse\n    USE_WEBVIEW=0\nfi\n\ndnl ---------------------------------------------------------------------------\ndnl wxImage options\ndnl ---------------------------------------------------------------------------\n\nif test \"$wxUSE_IMAGE\" = \"yes\" ; then\n    AC_DEFINE(wxUSE_IMAGE)\n\n    if test \"$wxUSE_GIF\" = \"yes\" ; then\n      AC_DEFINE(wxUSE_GIF)\n    fi\n\n    if test \"$wxUSE_PCX\" = \"yes\" ; then\n      AC_DEFINE(wxUSE_PCX)\n    fi\n\n    if test \"$wxUSE_TGA\" = \"yes\" ; then\n      AC_DEFINE(wxUSE_TGA)\n    fi\n\n    if test \"$wxUSE_IFF\" = \"yes\" ; then\n      AC_DEFINE(wxUSE_IFF)\n    fi\n\n    if test \"$wxUSE_PNM\" = \"yes\" ; then\n      AC_DEFINE(wxUSE_PNM)\n    fi\n\n    if test \"$wxUSE_XPM\" = \"yes\" ; then\n      AC_DEFINE(wxUSE_XPM)\n    fi\n\n    if test \"$wxUSE_ICO_CUR\" = \"yes\" ; then\n      AC_DEFINE(wxUSE_ICO_CUR)\n    fi\nfi\n\ndnl ---------------------------------------------------------------------------\ndnl common dialogs\ndnl ---------------------------------------------------------------------------\n\nif test \"$wxUSE_ABOUTDLG\" = \"yes\"; then\n    AC_DEFINE(wxUSE_ABOUTDLG)\nfi\n\nif test \"$wxUSE_CHOICEDLG\" = \"yes\"; then\n    AC_DEFINE(wxUSE_CHOICEDLG)\nfi\n\nif test \"$wxUSE_COLOURDLG\" = \"yes\"; then\n    AC_DEFINE(wxUSE_COLOURDLG)\nfi\n\nif test \"$wxUSE_CREDENTIALDLG\" = \"yes\"; then\n    AC_DEFINE(wxUSE_CREDENTIALDLG)\nfi\n\nif test \"$wxUSE_FILEDLG\" = \"yes\"; then\n    AC_DEFINE(wxUSE_FILEDLG)\nfi\n\nif test \"$wxUSE_FINDREPLDLG\" = \"yes\"; then\n    AC_DEFINE(wxUSE_FINDREPLDLG)\nfi\n\nif test \"$wxUSE_FONTDLG\" = \"yes\"; then\n    AC_DEFINE(wxUSE_FONTDLG)\nfi\n\nif test \"$wxUSE_DIRDLG\" = \"yes\"; then\n    if test \"$wxUSE_TREECTRL\" != \"yes\"; then\n        AC_MSG_WARN(wxDirDialog requires wxTreeCtrl so it won't be compiled without it)\n    else\n        AC_DEFINE(wxUSE_DIRDLG)\n    fi\nfi\n\nif test \"$wxUSE_MSGDLG\" = \"yes\"; then\n    AC_DEFINE(wxUSE_MSGDLG)\nfi\n\nif test \"$wxUSE_NUMBERDLG\" = \"yes\"; then\n    AC_DEFINE(wxUSE_NUMBERDLG)\nfi\n\nif test \"$wxUSE_PROGRESSDLG\" = \"yes\"; then\n    AC_DEFINE(wxUSE_PROGRESSDLG)\n    dnl No special option for this one yet as it's supposed to be temporary and\n    dnl disappear later anyhow.\n    AC_DEFINE(wxUSE_NATIVE_PROGRESSDLG)\nfi\n\nif test \"$wxUSE_SPLASH\" = \"yes\"; then\n    AC_DEFINE(wxUSE_SPLASH)\n    SAMPLES_SUBDIRS=\"$SAMPLES_SUBDIRS splash\"\nfi\n\nif test \"$wxUSE_STARTUP_TIPS\" = \"yes\"; then\n    AC_DEFINE(wxUSE_STARTUP_TIPS)\nfi\n\nif test \"$wxUSE_TEXTDLG\" = \"yes\"; then\n    AC_DEFINE(wxUSE_TEXTDLG)\nfi\n\nif test \"$wxUSE_WIZARDDLG\" = \"yes\"; then\n    AC_DEFINE(wxUSE_WIZARDDLG)\n    SAMPLES_SUBDIRS=\"$SAMPLES_SUBDIRS wizard\"\nfi\n\ndnl ---------------------------------------------------------------------------\ndnl options used under wxMSW and wxPM\ndnl ---------------------------------------------------------------------------\n\nif test \"$wxUSE_MSW\" = 1; then\n    if test \"$wxUSE_OWNER_DRAWN\" = \"yes\"; then\n        AC_DEFINE(wxUSE_OWNER_DRAWN)\n    fi\nfi\n\ndnl ---------------------------------------------------------------------------\ndnl wxMSW-only options\ndnl ---------------------------------------------------------------------------\n\nif test \"$wxUSE_MSW\" = 1 ; then\n\n    if test \"$wxUSE_DC_CACHEING\" = \"yes\"; then\n        AC_DEFINE(wxUSE_DC_CACHEING)\n    fi\n\n    if test \"$wxUSE_POSTSCRIPT_ARCHITECTURE_IN_MSW\" = \"yes\"; then\n        AC_DEFINE(wxUSE_POSTSCRIPT_ARCHITECTURE_IN_MSW)\n    fi\n\n    if test \"$wxUSE_UXTHEME\" = \"yes\"; then\n        AC_DEFINE(wxUSE_UXTHEME)\n    fi\n\nfi\ndnl wxUSE_MSW = 1\n\ndnl not quite MSW-only although mostly useful to disable this under MSW\nif test \"$wxUSE_AUTOID_MANAGEMENT\" = \"yes\"; then\n    AC_DEFINE(wxUSE_AUTOID_MANAGEMENT)\nfi\n\nif test \"$USE_WIN32\" = 1 ; then\n    if test \"$wxUSE_DBGHELP\" = \"yes\"; then\n        AC_CACHE_CHECK([if debug help API is available], wx_cv_lib_debughlp,\n            [\n                dnl we need just the header, not the library, as we load the\n                dnl DLL dynamically anyhow during run-time\n                AC_LANG_PUSH(C++)\n                AC_TRY_COMPILE(\n                    [#include <windows.h>\n                     #include <imagehlp.h>],\n                    [\n                        #ifndef API_VERSION_NUMBER\n                        #error API_VERSION_NUMBER not defined!\n                        #endif\n                        #if API_VERSION_NUMBER < 9\n                        #error API_VERSION_NUMBER at least 9 required.\n                        #endif\n                    ],\n                    wx_cv_lib_debughlp=yes,\n                    wx_cv_lib_debughlp=no\n                )\n                AC_LANG_POP()\n            ]\n        )\n\n        if test \"$wx_cv_lib_debughlp\" = yes; then\n            AC_DEFINE(wxUSE_DBGHELP)\n        else\n            AC_MSG_WARN([Debug help API and wxStackWalker won't be available])\n        fi\n    fi\n\n    if test \"$wxUSE_DIB\" = \"yes\"; then\n        AC_DEFINE(wxUSE_WXDIB)\n    fi\n\n    if test \"$wxUSE_INICONF\" = \"yes\"; then\n        AC_DEFINE(wxUSE_INICONF)\n    fi\n\n    if test \"$wxUSE_REGKEY\" = \"yes\"; then\n        AC_DEFINE(wxUSE_REGKEY)\n    fi\nfi\ndnl USE_WIN32 = 1\n\ndnl ---------------------------------------------------------------------------\ndnl wxGraphicsContext\ndnl ---------------------------------------------------------------------------\n\ndnl Under Mac we don't even provide --enable-graphics_ctx switch as we always\ndnl need it -- but because we don't have the option, wxUSE_GRAPHICS_CONTEXT is\ndnl not defined automatically and we need to do it ourselves\nif test \"$wxUSE_MAC\" = 1; then\n    wxUSE_GRAPHICS_CONTEXT=\"yes\"\nfi\n\ndnl We need to check for Cairo if explicitly requested under MSW or Mac or if\ndnl we're going to use as the default wxGraphicsContext implementation with the\ndnl target toolkit.\nif test \"$wx_needs_cairo_for_gc\" = 1 -a \"$wxUSE_GRAPHICS_CONTEXT\" = \"yes\"; then\n    wx_needs_cairo=1\nfi\n\nif test \"$wxUSE_CAIRO\" = \"yes\" -o \"$wx_needs_cairo\" = 1; then\n    PKG_CHECK_MODULES(CAIRO, cairo,\n        [wx_has_cairo=1],\n        [AC_MSG_RESULT(no)]\n    )\n    if test \"$wx_has_cairo\" = 1; then\n        dnl Check that Cairo library is new enough: wxGraphicsContext\n        dnl won't compile without cairo_push_group() and\n        dnl cairo_pop_group_to_source() which are new in 1.2.\n        save_LIBS=\"$LIBS\"\n        LIBS=\"$LIBS $CAIRO_LIBS\"\n        AC_CHECK_FUNCS([cairo_push_group])\n        LIBS=\"$save_LIBS\"\n        if test \"$ac_cv_func_cairo_push_group\" = \"no\"; then\n            wx_has_cairo=0\n            AC_MSG_WARN([Cairo library is too old and misses cairo_push_group()])\n        else\n            AC_DEFINE(wxUSE_CAIRO)\n\n            dnl We don't need to do this for wxGTK as we already get Cairo\n            dnl flags as part of GTK+ ones.\n            if test \"$wxUSE_GTK\" != 1; then\n                CXXFLAGS=\"$CXXFLAGS $CAIRO_CFLAGS\"\n                GUI_TK_LIBRARY=\"$GUI_TK_LIBRARY $CAIRO_LIBS\"\n            fi\n        fi\n    fi\nfi\n\nif test \"$wxUSE_GRAPHICS_CONTEXT\" = \"yes\"; then\n    wx_has_graphics=0\n    if test \"$wxUSE_MSW\" = 1; then\n        AC_CACHE_CHECK([if GDI+ is available], wx_cv_lib_gdiplus,\n            [\n                dnl we need just the header, not the library, as we load the\n                dnl GDI+ DLL dynamically anyhow during run-time\n                AC_LANG_PUSH(C++)\n                AC_TRY_COMPILE(\n                    [#include <windows.h>\n                     #include <gdiplus.h>],\n                    [\n                        using namespace Gdiplus;\n                    ],\n                    wx_cv_lib_gdiplus=yes,\n                    wx_cv_lib_gdiplus=no\n                )\n                AC_LANG_POP()\n            ]\n        )\n        if test \"$wx_cv_lib_gdiplus\" = \"yes\"; then\n            wx_has_graphics=1\n        fi\n    elif test \"$WXGTK1\" = \"1\"; then\n        AC_MSG_WARN([wxGraphicsContext not supported with GTK +1])\n    elif test \"$wx_needs_cairo_for_gc\" = 1; then\n        wx_has_graphics=$wx_has_cairo\n    else\n        dnl assume it's ok, add more checks here if needed\n        wx_has_graphics=1\n    fi\n\n    if test \"$wx_has_graphics\" = 1; then\n        AC_DEFINE(wxUSE_GRAPHICS_CONTEXT)\n    else\n        AC_MSG_WARN([wxGraphicsContext won't be available])\n    fi\nfi\n\ndnl ---------------------------------------------------------------------------\ndnl wxMediaCtrl\ndnl ---------------------------------------------------------------------------\n\nUSE_MEDIA=0\n\nif test \"$wxUSE_MEDIACTRL\" = \"yes\" -o \"$wxUSE_MEDIACTRL\" = \"auto\"; then\n    USE_MEDIA=1\n\n    dnl -----------------------------------------------------------------------\n    dnl GStreamer\n    dnl -----------------------------------------------------------------------\n    if test \"$wxUSE_GTK\" = 1; then\n        wxUSE_GSTREAMER=\"no\"\n\n        GST_VERSION_MAJOR=1\n        GST_VERSION_MINOR=0\n        GST_VERSION=$GST_VERSION_MAJOR.$GST_VERSION_MINOR\n\n        PKG_CHECK_MODULES(GST,\n            [gstreamer-$GST_VERSION gstreamer-video-$GST_VERSION gstreamer-player-$GST_VERSION >= 1.7.2.1],\n            [\n                wxUSE_GSTREAMER=\"yes\"\n                AC_DEFINE(wxUSE_GSTREAMER_PLAYER)\n            ],\n            [\n                AC_MSG_NOTICE([GStreamer 1.7.2+ not available. Not using GstPlayer and falling back to 1.0])\n            ]\n        )\n\n        if test $wxUSE_GSTREAMER = \"no\"; then\n            PKG_CHECK_MODULES(GST,\n                [gstreamer-$GST_VERSION gstreamer-video-$GST_VERSION],\n                [\n                    wxUSE_GSTREAMER=\"yes\"\n                ],\n                [\n                    AC_MSG_WARN([GStreamer 1.0 not available, falling back to 0.10])\n                    GST_VERSION_MAJOR=0\n                    GST_VERSION_MINOR=10\n                    GST_VERSION=$GST_VERSION_MAJOR.$GST_VERSION_MINOR\n                ]\n            )\n        fi\n\n        if test $GST_VERSION_MINOR = \"10\"; then\n            PKG_CHECK_MODULES(GST,\n                [gstreamer-$GST_VERSION gstreamer-plugins-base-$GST_VERSION],\n                [\n                    wxUSE_GSTREAMER=\"yes\"\n                    GST_LIBS=\"$GST_LIBS -lgstinterfaces-$GST_VERSION\"\n                ],\n                [\n                    AC_MSG_WARN([GStreamer 0.10 not available])\n                ]\n            )\n        fi\n\n        if test \"$wxUSE_GSTREAMER\" = \"yes\"; then\n            CXXFLAGS=\"$CXXFLAGS $GST_CFLAGS\"\n            EXTRALIBS_MEDIA=\"$GST_LIBS\"\n\n            AC_DEFINE(wxUSE_GSTREAMER)\n        else\n            USE_MEDIA=0\n        fi\n\n    elif test \"$wxUSE_MAC\" = 1; then\n        dnl We always have the necessary libraries under Mac\n        dnl but we need to link with it explicitly.\n        GST_LIBS=\"-framework AVFoundation -framework CoreMedia\"\n        if test \"$wxUSE_OSX_IPHONE\" != 1; then\n            dnl In addition to AVFoundation AVKit may be used when available\n            dnl AVKit is only available since OS X 10.9\n            old_CPPFLAGS=\"$CPPFLAGS\"\n            CPPFLAGS=\"-x objective-c++ $CPPFLAGS\"\n            AC_MSG_CHECKING([if AVKit is available])\n            AC_TRY_COMPILE(\n                [#include \"AvailabilityMacros.h\"],\n                [\n                    #if defined(MAC_OS_X_VERSION_10_9) && MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_9\n                        // AVKit available\n                    #else\n                        choke me\n                    #endif\n                ],\n                [GST_LIBS=\"$GST_LIBS -weak_framework AVKit\"; AC_MSG_RESULT(yes)],\n                AC_MSG_RESULT(no)\n            )\n            CPPFLAGS=\"$old_CPPFLAGS\"\n        fi\n    fi\n\n    if test $USE_MEDIA = 1; then\n        SAMPLES_SUBDIRS=\"$SAMPLES_SUBDIRS mediaplayer\"\n        AC_DEFINE(wxUSE_MEDIACTRL)\n    else\n        if test \"$wxUSE_MEDIACTRL\" = \"yes\"; then\n            AC_MSG_ERROR([GStreamer not available])\n        else\n            dnl was set to 'auto'\n            AC_MSG_WARN([GStreamer not available... disabling wxMediaCtrl])\n        fi\n    fi\nfi\n\ndnl ---------------------------------------------------------------------------\ndnl wxStyledTextCtrl\ndnl ---------------------------------------------------------------------------\n\nif test \"$wxUSE_MSW\" = 1 ; then\n    EXTRALIBS_STC=\"-limm32\"\nfi\n\ndnl ---------------------------------------------------------------------------\ndnl define the variable containing the installation prefix (used in dcpsg.cpp)\ndnl ---------------------------------------------------------------------------\n\nif test \"x$prefix\" != \"xNONE\"; then\n    wxPREFIX=$prefix\nelse\n    wxPREFIX=$ac_default_prefix\nfi\n\nAC_DEFINE_UNQUOTED(wxINSTALL_PREFIX, \"$wxPREFIX\")\n\n\ndnl ---------------------------------------------------------------------------\ndnl define variables with all built libraries for wx-config\ndnl ---------------------------------------------------------------------------\n\nSTD_BASE_LIBS=\"base\"\nSTD_GUI_LIBS=\"\"\nBUILT_WX_LIBS=\"base\"\n\nif test \"$wxUSE_SOCKETS\" = \"yes\" ; then\n    STD_BASE_LIBS=\"net $STD_BASE_LIBS\"\n    BUILT_WX_LIBS=\"net $BUILT_WX_LIBS\"\nfi\nif test \"$wxUSE_XML\" = \"yes\" ; then\n    STD_BASE_LIBS=\"xml $STD_BASE_LIBS\"\n    BUILT_WX_LIBS=\"xml $BUILT_WX_LIBS\"\nfi\n\nif test \"$wxUSE_GUI\" = \"yes\"; then\n    STD_GUI_LIBS=\"adv core\"\n    BUILT_WX_LIBS=\"$STD_GUI_LIBS $BUILT_WX_LIBS\"\n\n    if test \"$wxUSE_DEBUGREPORT\" = \"yes\" ; then\n        STD_GUI_LIBS=\"qa $STD_GUI_LIBS\"\n        BUILT_WX_LIBS=\"qa $BUILT_WX_LIBS\"\n    fi\n    if test \"$wxUSE_HTML\" = \"yes\" ; then\n        STD_GUI_LIBS=\"html $STD_GUI_LIBS\"\n        BUILT_WX_LIBS=\"html $BUILT_WX_LIBS\"\n    fi\n    if test \"$wxUSE_MEDIACTRL\" = \"yes\" ; then\n        BUILT_WX_LIBS=\"media $BUILT_WX_LIBS\"\n    fi\n    if test \"$wxUSE_OPENGL\" = \"yes\" ; then\n        BUILT_WX_LIBS=\"gl $BUILT_WX_LIBS\"\n    fi\n    if test \"$wxUSE_AUI\" = \"yes\" ; then\n        BUILT_WX_LIBS=\"aui $BUILT_WX_LIBS\"\n    fi\n    if test \"$wxUSE_PROPGRID\" = \"yes\" ; then\n        BUILT_WX_LIBS=\"propgrid $BUILT_WX_LIBS\"\n    fi\n    if test \"$wxUSE_RIBBON\" = \"yes\" ; then\n        BUILT_WX_LIBS=\"ribbon $BUILT_WX_LIBS\"\n    fi\n    if test \"$wxUSE_RICHTEXT\" = \"yes\" ; then\n        BUILT_WX_LIBS=\"richtext $BUILT_WX_LIBS\"\n    fi\n    if test \"$wxUSE_STC\" = \"yes\" ; then\n        BUILT_WX_LIBS=\"stc $BUILT_WX_LIBS\"\n    fi\n    if test \"$wxUSE_WEBVIEW\" = \"yes\" ; then\n        BUILT_WX_LIBS=\"webview $BUILT_WX_LIBS\"\n    fi\n    if test \"$wxUSE_XRC\" = \"yes\" ; then\n        STD_GUI_LIBS=\"xrc $STD_GUI_LIBS\"\n        BUILT_WX_LIBS=\"xrc $BUILT_WX_LIBS\"\n    fi\nfi\n\nAC_SUBST(BUILT_WX_LIBS)\nAC_SUBST(STD_BASE_LIBS)\nAC_SUBST(STD_GUI_LIBS)\n\ndnl ---------------------------------------------------------------------------\ndnl Output the makefiles and such from the results found above\ndnl ---------------------------------------------------------------------------\n\ndnl all additional libraries (except wxWidgets itself) we link with\nEXTRA_FRAMEWORKS=\nif test \"$wxUSE_MAC\" = 1 ; then\n    if test \"$USE_DARWIN\" = 1; then\n        if test \"$wxUSE_OSX_IPHONE\" = 1; then\n            EXTRA_FRAMEWORKS=\"-framework IOKit -framework UIKit -framework CFNetwork -framework AudioToolbox -framework CoreFoundation -framework CoreGraphics -framework OpenGLES -framework Foundation -framework QuartzCore -framework CoreText\"\n        else\n            EXTRA_FRAMEWORKS=\"-framework IOKit -framework Carbon -framework Cocoa -framework AudioToolbox -framework System -framework OpenGL\"\n\n            dnl The case of QuickTime framework is special: with Cocoa, we only\n            dnl need it in 32 bit builds and not in 64 bit and, moreover,\n            dnl linking with it in 64 bit builds results in a warning because\n            dnl the framework is not available in 64 bits itself. So make an\n            dnl effort to avoid using it unnecessarily.\n            if test \"$wxUSE_MEDIACTRL\" = \"yes\"; then\n\n            if test \"$cross_compiling\" != \"no\"; then\n                dnl The check below doesn't work well when cross-compiling\n                dnl (\"file\" under non-OS X systems might not recognize\n                dnl universal binaries) so assume we do build for 32 bits as\n                dnl it's safer: at worst we'll get a warning when building in\n                dnl 64 bits only, but at least the build will still work.\n                wx_cv_target_x86_64=no\n            else\n                AC_CACHE_CHECK(\n                    [if we target only x86_64],\n                    wx_cv_target_x86_64,\n                    AC_LINK_IFELSE(\n                        [AC_LANG_SOURCE([int main() { return 0; }])],\n                        if file conftest$ac_exeext|grep -q 'i386\\|ppc'; then\n                            wx_cv_target_x86_64=no\n                        else\n                            wx_cv_target_x86_64=yes\n                        fi\n                    )\n                )\n            fi\n\n            if test \"$wx_cv_target_x86_64\" != \"yes\"; then\n                EXTRA_FRAMEWORKS=\"$EXTRA_FRAMEWORKS -framework QuickTime\"\n            fi\n\n            fi\n        fi\n    fi\nfi\nif test \"$USE_DARWIN\" = 1 -a \"$wxUSE_MAC\" != 1 -a \"$wxUSE_OLD_COCOA\" != 1 ; then\n    EXTRA_FRAMEWORKS=\"$EXTRA_FRAMEWORKS -framework IOKit -framework CoreServices -framework System -framework ApplicationServices -framework Foundation\"\nfi\n\nLDFLAGS=\"$LDFLAGS $EXTRA_FRAMEWORKS\"\nWXCONFIG_LDFLAGS=\"$WXCONFIG_LDFLAGS $EXTRA_FRAMEWORKS\"\n\nLIBS=\"$ZLIB_LINK $POSIX4_LINK $INET_LINK $WCHAR_LINK $DL_LINK $LIBS\"\n\nif test \"$wxUSE_GUI\" = \"yes\"; then\n\n    dnl TODO add checks that these samples will really compile (i.e. all the\n    dnl      library features they need are present)\n\n    dnl TODO some samples are never built so far: mfc (requires VC++)\n    SAMPLES_SUBDIRS=\"$SAMPLES_SUBDIRS archive artprov dialogs drawing \\\n                     erase event exec font image minimal power render \\\n                     shaped svg taborder vscroll widgets wrapsizer\"\n\n    if test \"$wxUSE_MONOLITHIC\" != \"yes\"; then\n        SAMPLES_SUBDIRS=\"$SAMPLES_SUBDIRS console\"\n    fi\n    if test \"$TOOLKIT\" = \"MSW\"; then\n        SAMPLES_SUBDIRS=\"$SAMPLES_SUBDIRS regtest\"\n        if test \"$wxUSE_UNIVERSAL\" != \"yes\"; then\n            SAMPLES_SUBDIRS=\"$SAMPLES_SUBDIRS ownerdrw nativdlg dll\"\n        fi\n    fi\nelse\n    SAMPLES_SUBDIRS=\"console\"\n    if test \"$wxUSE_SOCKETS\" = \"yes\" ; then\n        SAMPLES_SUBDIRS=\"$SAMPLES_SUBDIRS sockets\"\n    fi\n    if test \"$wxUSE_IPC\" = \"yes\" ; then\n        SAMPLES_SUBDIRS=\"$SAMPLES_SUBDIRS ipc\"\n    fi\nfi\n\n\ndnl C/C++ compiler options used to compile wxWidgets\ndnl\ndnl check for icc before gcc as icc is also recognized as gcc\nif test \"x$INTELCC\" = \"xyes\" ; then\n    dnl Warnings which can't be easily suppressed in C code are disabled:\n    dnl\n    dnl     #810: conversion from \"x\" to \"y\" may lose significant bits\n    dnl     #869: parameter \"foo\" was never referenced\n    dnl     #1572: floating-point equality and inequality comparisons\n    dnl            are unreliable\n    dnl     #1684: conversion from pointer to same-sized integral type\n    dnl     #2259: non-pointer conversion from \"x\" to \"y\" may lose significant\n    dnl            bits\n    CWARNINGS=\"-Wall -wd810,869,981,1418,1572,1684,2259\"\nelif test \"$GCC\" = yes ; then\n    CWARNINGS=\"-Wall -Wundef\"\nfi\n\nif test \"x$INTELCXX\" = \"xyes\" ; then\n    dnl Intel compiler gives some warnings which simply can't be worked\n    dnl around or of which we have too many (810, 869) so it's impractical to\n    dnl keep them enabled even if in theory it would be nice and some others\n    dnl (279) are generated for standard macros and so there is nothing we can\n    dnl do about them\n    dnl\n    dnl     #279: controlling expression is constant\n    dnl     #383: value copied to temporary, reference to temporary used\n    dnl     #444: destructor for base class \"xxx\" is not virtual\n    dnl     #981: operands are evaluated in unspecified order\n    dnl     #1418: external definition with no prior declaration\n    dnl     #1419: external declaration in primary source file\n    dnl     #1881: argument must be a constant null pointer value\n    dnl\n    dnl (for others see CWARNINGS above)\n    CXXWARNINGS=\"-Wall -wd279,383,444,810,869,981,1418,1419,1881,2259\"\nelif test \"$GXX\" = yes ; then\n    CXXWARNINGS=\"-Wall -Wundef -Wunused-parameter -Wno-ctor-dtor-privacy\"\n    AX_CXXFLAGS_GCC_OPTION(-Woverloaded-virtual, CXXWARNINGS)\n\n    dnl there are tons of warnings when building with GTK+ 1 which are never\n    dnl going to get fixed, so disable them to at least see new warnings/errors\n    dnl more clearly\n    if test \"$WXGTK1\" = \"1\"; then\n        CXXWARNINGS=\"$CXXWARNINGS -Wno-deprecated-declarations -Wno-narrowing -Wno-write-strings\"\n    fi\n\n    dnl when building using GTK+ 3 or Cocoa we currently get tons of deprecation\n    dnl warnings from the standard headers -- disable them as we already know\n    dnl that they're deprecated but we still have to use them to support older\n    dnl toolkit versions and leaving this warning enabled prevents seeing any\n    dnl other ones\n    if test \"$WXGTK4\" != 1 -a \\( \"$WXGTK3\" = 1 -o \"$wxUSE_MAC\" = 1 \\) ; then\n        CXXWARNINGS=\"$CXXWARNINGS -Wno-deprecated-declarations\"\n\n        dnl CXXWARNINGS is not used for Objective-C++ code compilation, but we\n        dnl want to avoid these warnings in it too when building wxOSX.\n        OBJCXXFLAGS=\"$OBJCXXFLAGS -Wno-deprecated-declarations\"\n    fi\nfi\n\n\ndnl combine everything together and remove the extra white space while doing it\nWXCONFIG_CFLAGS=`echo $WXCONFIG_CFLAGS`\nWXCONFIG_CXXFLAGS=`echo $WXCONFIG_CFLAGS $WXCONFIG_CXXFLAGS`\n\n\ndnl add -I options we use during library compilation\ndnl\ndnl note that the order is somewhat important: wxWidgets headers should\ndnl come first and the one with setup.h should be before $(top_srcdir)/include\ndnl in case the latter contains setup.h used by non-autoconf makefiles\nCPPFLAGS=`echo \\\n -I\\\\${wx_top_builddir}/lib/wx/include/${TOOLCHAIN_FULLNAME} \\\n -I\\\\${top_srcdir}/include \\\n $CPPFLAGS \\\n $WXCONFIG_CPPFLAGS \\\n $TOOLKIT_INCLUDE`\n\nC_AND_CXX_FLAGS=\"$DEBUG_CFLAGS $PROFILE_FLAGS $OPTIMISE_CFLAGS\"\nCFLAGS=`echo $WXCONFIG_CFLAGS $CWARNINGS $C_AND_CXX_FLAGS $CFLAGS `\nCXXFLAGS=`echo $WXCONFIG_CXXFLAGS $CXXWARNINGS $C_AND_CXX_FLAGS $CXXFLAGS `\nOBJCFLAGS=`echo $WXCONFIG_CFLAGS $CWARNINGS $C_AND_CXX_FLAGS $OBJCFLAGS `\nOBJCXXFLAGS=`echo $WXCONFIG_CXXFLAGS $C_AND_CXX_FLAGS $OBJCXXFLAGS `\n\ndnl now that we added WXCONFIG_CPPFLAGS to CPPFLAGS we can add the wx-config\ndnl only stuff to it\nif test \"$SHARED\" = 1; then\n    WXCONFIG_CPPFLAGS=\"$WXCONFIG_CPPFLAGS -DWXUSINGDLL\"\nfi\n\nLIBS=`echo $LIBS`\nEXTRALIBS=\"$LDFLAGS $LDFLAGS_VERSIONING $LIBS $DMALLOC_LIBS\"\nEXTRALIBS_XML=\"$EXPAT_LINK\"\nEXTRALIBS_HTML=\"$MSPACK_LINK\"\nEXTRALIBS_MEDIA=\"$GST_LIBS\"\nif test \"$wxUSE_GUI\" = \"yes\"; then\n    EXTRALIBS_GUI=`echo $GUI_TK_LIBRARY $SDL_LIBS $PNG_LINK $JPEG_LINK $TIFF_LINK $LZMA_LINK $JBIG_LINK $WEBKIT_LINK`\nfi\nif test \"$wxUSE_OPENGL\" = \"yes\"; then\n    EXTRALIBS_OPENGL=\"$LDFLAGS_GL $OPENGL_LIBS\"\nfi\n\nLDFLAGS=\"$LDFLAGS $PROFILE_FLAGS\"\n\nWXCONFIG_LIBS=\"$LIBS\"\n\ndnl wx-config must output 3rd party libs in --libs in static build, so collect\ndnl them in wxconfig_3rdparty variable\ndnl\ndnl Notice that the libraries must be listed in correct order whenever there\ndnl are dependencies between them for linking to work when using static\ndnl libraries, e.g. jpeg, used by tiff, must come after it and zlib, used by\ndnl png, must come after it as well.\nif test \"$wxUSE_GUI\" = \"yes\"; then\n    case \"$wxUSE_LIBTIFF\" in\n        builtin)\n            wxconfig_3rdparty=\"tiff $wxconfig_3rdparty\"\n            ;;\n        sys)\n            WXCONFIG_LIBS=\"$TIFF_LINK $LZMA_LINK $JBIG_LINK $WXCONFIG_LIBS\"\n            ;;\n    esac\n    case \"$wxUSE_LIBJPEG\" in\n        builtin)\n            wxconfig_3rdparty=\"jpeg $wxconfig_3rdparty\"\n            ;;\n        sys)\n            WXCONFIG_LIBS=\"$JPEG_LINK $WXCONFIG_LIBS\"\n            ;;\n    esac\n    case \"$wxUSE_LIBPNG\" in\n        builtin)\n            wxconfig_3rdparty=\"png $wxconfig_3rdparty\"\n            ;;\n        sys)\n            WXCONFIG_LIBS=\"$PNG_LINK $WXCONFIG_LIBS\"\n            ;;\n    esac\nfi\nif test \"$wxUSE_REGEX\" = \"builtin\" ; then\n    wxconfig_3rdparty=\"regex${lib_unicode_suffix} $wxconfig_3rdparty\"\nfi\nif test \"$wxUSE_STC\" = \"yes\" ; then\n    wxconfig_3rdparty=\"scintilla $wxconfig_3rdparty\"\nfi\ncase \"$wxUSE_EXPAT\" in\n    builtin)\n        wxconfig_3rdparty=\"expat $wxconfig_3rdparty\"\n        ;;\n    sys)\n        WXCONFIG_LIBS=\"$EXPAT_LINK $WXCONFIG_LIBS\"\n        ;;\nesac\nif test \"$wxUSE_LIBLZMA\" = \"yes\"; then\n    dnl It could be already present in WXCONFIG_LIBS as tiff dependency, avoid\n    dnl adding it again in this case:\n    if test \"$wxUSE_GUI\" != \"yes\" -o \"$wxUSE_LIBTIFF\" != \"sys\"; then\n        WXCONFIG_LIBS=\"$LZMA_LINK $WXCONFIG_LIBS\"\n    fi\nfi\ncase \"$wxUSE_ZLIB\" in\n    builtin)\n        wxconfig_3rdparty=\"zlib $wxconfig_3rdparty\"\n        ;;\n    sys)\n        WXCONFIG_LIBS=\"$ZLIB_LINK $WXCONFIG_LIBS\"\n        ;;\nesac\n\nfor i in $wxconfig_3rdparty ; do\n    WXCONFIG_LIBS=\"-lwx${i}${WX_LIB_FLAVOUR}-${WX_RELEASE}${HOST_SUFFIX} $WXCONFIG_LIBS\"\ndone\n\n\nif test \"x$wxUSE_UNIVERSAL\" = \"xyes\" ; then\n    WXUNIV=1\n\n    case \"$wxUNIV_THEMES\" in\n        ''|all)\n            AC_DEFINE(wxUSE_ALL_THEMES)\n            ;;\n\n        *)\n            for t in `echo $wxUNIV_THEMES | tr , ' ' | tr '[[a-z]]' '[[A-Z]]'`; do\n                AC_DEFINE_UNQUOTED(wxUSE_THEME_$t)\n            done\n    esac\nelse\n    WXUNIV=0\nfi\n\nAC_SUBST(wxUSE_ZLIB)\nAC_SUBST(wxUSE_REGEX)\nAC_SUBST(wxUSE_EXPAT)\nAC_SUBST(wxUSE_LIBJPEG)\nAC_SUBST(wxUSE_LIBPNG)\nAC_SUBST(wxUSE_LIBTIFF)\n\nif test $wxUSE_MONOLITHIC = \"yes\" ; then\n    MONOLITHIC=1\nelse\n    MONOLITHIC=0\nfi\n\nif test $wxUSE_PLUGINS = \"yes\" ; then\n    USE_PLUGINS=1\nelse\n    USE_PLUGINS=0\nfi\n\nif test \"$wxUSE_DEBUGREPORT\" = \"yes\" ; then\n    USE_QA=1\nelse\n    USE_QA=0\nfi\n\nif test $wxUSE_OFFICIAL_BUILD = \"yes\" ; then\n    OFFICIAL_BUILD=1\nelse\n    OFFICIAL_BUILD=0\nfi\n\nAC_SUBST(VENDOR)\nAC_SUBST(OFFICIAL_BUILD)\nAC_SUBST(WX_FLAVOUR)\nAC_SUBST(WX_LIB_FLAVOUR)\n\nAC_SUBST(WXUNIV)\nAC_SUBST(MONOLITHIC)\nAC_SUBST(USE_PLUGINS)\nAC_SUBST(LIBS)\nAC_SUBST(EXTRALIBS)\nAC_SUBST(EXTRALIBS_XML)\nAC_SUBST(EXTRALIBS_HTML)\nAC_SUBST(EXTRALIBS_MEDIA)\nAC_SUBST(EXTRALIBS_GUI)\nAC_SUBST(EXTRALIBS_OPENGL)\nAC_SUBST(EXTRALIBS_SDL)\nAC_SUBST(EXTRALIBS_STC)\nAC_SUBST(EXTRALIBS_WEBVIEW)\nAC_SUBST(WITH_PLUGIN_SDL)\nAC_SUBST(UNICODE)\nAC_SUBST(DEBUG_INFO)\nAC_SUBST(DEBUG_FLAG)\nTOOLKIT_LOWERCASE=`echo $TOOLKIT | tr '[[A-Z]]' '[[a-z]]'`\nAC_SUBST(TOOLKIT_LOWERCASE)\nAC_SUBST(TOOLKIT_VERSION)\nAC_SUBST(DYLIB_RPATH_INSTALL)\nAC_SUBST(DYLIB_RPATH_POSTLINK)\nAC_SUBST(SAMPLES_RPATH_FLAG)\nAC_SUBST(HEADER_PAD_OPTION)\nAC_SUBST(HOST_SUFFIX)\nAC_SUBST(USE_DPI_AWARE_MANIFEST)\n\ncase \"$TOOLKIT\" in\n    GTK)\n        TOOLKIT_DESC=\"GTK+\"\n        if test \"$WXGTK2\" = 1; then\n            if test \"$WXGTK3\" = 1; then\n                TOOLKIT_DESC=\"$TOOLKIT_DESC ${TOOLKIT_VERSION}\"\n            else\n                TOOLKIT_DESC=\"$TOOLKIT_DESC 2\"\n            fi\n            if test \"$wxUSE_GTKPRINT\" = \"yes\" ; then\n                TOOLKIT_EXTRA=\"$TOOLKIT_EXTRA GTK+ printing\";\n            fi\n            if test \"$wxUSE_LIBGNOMEVFS\" = \"yes\" ; then\n                TOOLKIT_EXTRA=\"$TOOLKIT_EXTRA gnomevfs\"\n            fi\n            if test \"$wxUSE_LIBNOTIFY\" = \"yes\" ; then\n                TOOLKIT_EXTRA=\"$TOOLKIT_EXTRA libnotify\"\n            fi\n\n            if test \"$TOOLKIT_EXTRA\" != \"\"; then\n                TOOLKIT_DESC=\"$TOOLKIT_DESC with support for `echo $TOOLKIT_EXTRA | tr -s ' '`\"\n            fi\n        fi\n        ;;\n\n    ?*)\n        TOOLKIT_DESC=$TOOLKIT_LOWERCASE\n        ;;\n\n    *)\n        TOOLKIT_DESC=\"base only\"\n        ;;\nesac\n\ndnl Override some bakefile defaults before including autoconf_inc.m4\n\ndnl Bakefile-generated makefiles use PCH by default, but we require explicitly\ndnl enabling it with --enable-pch as in many cases the speed gain from using it\ndnl is tiny, while the space penalty is enormous, and in some cases this can\ndnl even make PCH build slower than the build without PCH.\nif test \"$wxUSE_PCH\" != \"yes\"; then\n    bk_use_pch=no\nfi\n\nif test \"$wxUSE_WINE\" = \"yes\"; then\n    BAKEFILE_FORCE_PLATFORM=win32\nfi\n\nAC_BAKEFILE([m4_include(autoconf_inc.m4)])\n\ndnl make install path absolute (if not already);\ndnl will fail with (some) MSDOS paths\ncase ${INSTALL} in\n  /* ) # Absolute\n     ;;\n  ?:* ) # Drive letter, considered as absolute.\n     ;;\n  *)\n     INSTALL=`pwd`/${INSTALL} ;;\nesac\n\nif test \"$wxUSE_GUI\" = \"yes\"; then\n\nif test \"$wxUSE_MSW\" = 1 ; then\n    if test \"x$WINDRES\" = \"x\"; then\n        AC_MSG_ERROR([Required windres program not found])\n    fi\n\n    RESCOMP=\"$WINDRES\"\nfi\n\nfi\ndnl wxUSE_GUI = 1\n\n\ndnl Use gcc precompiled headers if supported.\nif test $GCC_PCH = 1\nthen\n    # Our WX_PRECOMP flag does not make sense for any language except C++ because\n    # the headers that benefit from precompilation are mostly C++ headers.\n    CXXFLAGS=\"-DWX_PRECOMP $CXXFLAGS\"\n    # When Bakefile can do multi-language PCH (e.g. C++ and Objective-C++) enable this:\n    #OBJCXXFLAGS=\"-DWX_PRECOMP $CXXFLAGS\"\nfi\n\ndnl cc/cxx option for position independent code\nif test \"$wxUSE_PIC\" = \"yes\" ; then\n    if test \"$wxUSE_SHARED\" = \"no\" ; then\n        CFLAGS=\"$CFLAGS $PIC_FLAG\"\n        CXXFLAGS=\"$CXXFLAGS $PIC_FLAG\"\n    fi\n    SAMPLES_CXXFLAGS=\"$SAMPLES_CXXFLAGS $PIC_FLAG\"\nfi\n\ndnl HACK ALERT!!\ndnl For now, we need to alter bk-deps not to generate deps\ndnl when we've configured a Universal binary build.\ndnl The next version of Bakefile will have the correct fix for this\ndnl at which time, this hack can be removed.\n\nif test \"$DEPS_TRACKING\" = 1 -a \"$wxUSE_MAC\" = 1 ; then\n    if test \"x$wxUSE_UNIVERSAL_BINARY\" != \"xno\" ; then\n        if test \"x$disable_macosx_deps\" = \"xyes\"; then\n            sed \"s/DEPSMODE=gcc/DEPSMODE=none/\" < bk-deps > temp\n            mv temp bk-deps\n            chmod +x bk-deps\n        fi\n    fi\nfi\n\ndnl TOOLCHAIN_DEFS should be used for both wx and client code\nWXCONFIG_CPPFLAGS=\"$WXCONFIG_CPPFLAGS $TOOLCHAIN_DEFS\"\n\n\ndnl Sun cc is compatible with gcc and so either of them can use the C\ndnl libraries built with the other, i.e. gcc can be used to build wxGTK under\ndnl Solaris where GTK+ is compiled using cc and cc can be used under Linux\ndnl where GTK+ is built with gcc\ndnl\ndnl However the compiler options are not compatible at all and in particular\ndnl gcc doesn't like cc -mt option and cc doesn't like -pthread. We simply\ndnl filter them out as we already have the correct options for multithreaded\ndnl programs if we're using threads (and if we don't, it shouldn't matter)\ncase \"${host}\" in\n    *-*-solaris2* )\n        dnl system packages are compiled with Sun CC and so pkg-config outputs\n        dnl CC-specific \"-mt\" flag, remove it when using gcc\n        if test \"$GCC\" = yes; then\n            CPPFLAGS=`echo $CPPFLAGS | sed 's/-mt//g'`\n            LIBS=`echo $LIBS | sed 's/-mt//g'`\n            EXTRALIBS_GUI=`echo $EXTRALIBS_GUI | sed 's/-mt//g'`\n        fi\n        ;;\n\n    *-*-linux* )\n        dnl OTOH when using Sun CC under Linux, the flags contain gcc-specific\n        dnl -pthreads which Sun CC doesn't know about\n        if test \"x$SUNCXX\" = xyes; then\n            CPPFLAGS=`echo $CPPFLAGS | sed 's/-pthread//g'`\n            LIBS=`echo $LIBS | sed 's/-pthread//g'`\n            EXTRALIBS_GUI=`echo $EXTRALIBS_GUI | sed 's/-pthread//g'`\n        fi\n        ;;\nesac\n\ndnl Set the flags to be used for the library build itself using the flag names\ndnl used everywhere above.\ndnl\ndnl Also get rid of duplicates in the flags, which results in dramatically\ndnl shorter build logs and so is well worth it (but preserve some special\ndnl flags which are explicitly allowed to occur multiple times, as all their\ndnl occurrences must be preserved).\ndedup_flags()\n{\n    printf \"%s \" \"$@\" |\n        awk 'BEGIN { RS=\" \"; ORS=\" \" }\n            { if ($0==\"-arch\" || $0==\"-framework\" || !seen[[$0]]++) print }'\n}\n\nWX_CPPFLAGS=`dedup_flags \"$CPPFLAGS\"`\nWX_CFLAGS=`dedup_flags \"$CFLAGS\"`\nWX_CXXFLAGS=`dedup_flags \"$CXXFLAGS\"`\nWX_LDFLAGS=`dedup_flags \"$LDFLAGS\"`\n\ndnl Restore the original user-specified flags values, we won't run any tests\ndnl using them any more.\nCPPFLAGS=$USER_CPPFLAGS\nCFLAGS=$USER_CFLAGS\nCXXFLAGS=$USER_CXXFLAGS\nLDFLAGS=$USER_LDFLAGS\n\ndnl Add visibility support flags.\nWX_CFLAGS=\"$WX_CFLAGS $CFLAGS_VISIBILITY\"\nWX_CXXFLAGS=\"$WX_CXXFLAGS $CXXFLAGS_VISIBILITY\"\nOBJCFLAGS=\"$OBJCFLAGS $CFLAGS_VISIBILITY\"\nOBJCXXFLAGS=\"$OBJCXXFLAGS $CXXFLAGS_VISIBILITY\"\n\ndnl for convenience, sort the samples in alphabetical order\ndnl\ndnl FIXME For some mysterious reasons, sometimes the directories are duplicated\ndnl       in this list - hence uniq. But normally, this shouldn't be needed!\ndnl\ndnl       Unfortunately, there is a bug in OS/2's tr, such that\ndnl       tr ' ' '\\n' introduces DOS-like line breaks, whereas tr '\\n' ' '\ndnl       only removes the Unix-like part of the introduced line break.\nSAMPLES_SUBDIRS=\"`echo $SAMPLES_SUBDIRS | tr -s ' ' | tr ' ' '\\n' | sort | uniq | tr '\\n' ' '| tr -d '\\r'`\"\n\ndnl subtle bakefile goop.\ndnl Used in wx-config now too, as its STATIC_FLAG with different makeup.\ndnl I wish we would have called it something less likely to clash with\ndnl things though.\nAC_SUBST(SHARED)\n\ndnl global options\nAC_SUBST(WX_LIBRARY_BASENAME_NOGUI)\nAC_SUBST(WX_LIBRARY_BASENAME_GUI)\n\ndnl toolkit options\nAC_SUBST(USE_GUI)\nAC_SUBST(TOOLKIT)\nAC_SUBST(TOOLKIT_DIR)\nAC_SUBST(TOOLCHAIN_NAME)\nAC_SUBST(TOOLCHAIN_FULLNAME)\n\ndnl wx-config options\nAC_SUBST(host_alias)\nAC_SUBST(cross_compiling)\nAC_SUBST(WIDGET_SET)\nAC_SUBST(WX_RELEASE)\nAC_SUBST(WX_VERSION)\nAC_SUBST(WX_SUBVERSION)\nAC_SUBST(WX_CHARTYPE)\n\ndnl both versions of all the usual flags variables: WX_FLAGS which are used for\ndnl building the library itself, and WXCONFIG_-prefixed variants which\ndnl are used when building the libraries using the library\ndnl\ndnl so put anything which should be used only during the library build in, e.g.\ndnl CXXFLAGS, which ends up in WX_CXXFLAGS, but put everything which should be\ndnl used when building both the library and the applications using it into\ndnl WXCONFIG_CXXFLAGS\nAC_SUBST(WX_CPPFLAGS)\nAC_SUBST(WXCONFIG_CPPFLAGS)\nAC_SUBST(WX_CFLAGS)\nAC_SUBST(WXCONFIG_CFLAGS)\nAC_SUBST(WX_CXXFLAGS)\nAC_SUBST(WXCONFIG_CXXFLAGS)\n\nAC_SUBST(WXCONFIG_LIBS)\nAC_SUBST(WXCONFIG_RPATH)\nAC_SUBST(WX_LDFLAGS)\nAC_SUBST(WXCONFIG_LDFLAGS)\nAC_SUBST(WXCONFIG_LDFLAGS_GUI)\nAC_SUBST(WXCONFIG_RESFLAGS)\n\ndnl distribution vars\nAC_SUBST(GUIDIST)\nAC_SUBST(DISTDIR)\n\ndnl additional subdirectories where we will build\nAC_SUBST(SAMPLES_SUBDIRS)\nAC_SUBST(SAMPLES_CXXFLAGS)\n\ndnl additional libraries and linker settings\nAC_SUBST(LDFLAGS_GL)\nAC_SUBST(OPENGL_LIBS)\nAC_SUBST(DMALLOC_LIBS)\nAC_SUBST(WX_VERSION_TAG)\n\ndnl other tools\nAC_SUBST(GCC)\nAC_SUBST(DLLTOOL)\nAC_SUBST(RESCOMP)\nAC_SUBST(WINDRES)\n\n\ndnl MAKE_SET will be replaced with \"MAKE=...\" or nothing if make sets MAKE\ndnl itself (this macro is required if SUBDIRS variable is used in Makefile.am\ndnl - and we do use it)\nAC_PROG_MAKE_SET\n\n\nAC_CONFIG_HEADERS([lib/wx/include/${TOOLCHAIN_FULLNAME}/wx/setup.h:setup.h.in])\n\nif test \"$USE_WIN32\" = 1; then\n    AC_CONFIG_COMMANDS([rcdefs.h],\n        [\n            mkdir -p $outdir &&\n            $CPP $infile | sed 's/^# *[1-9].*//;s/^ *//;/./,/^$/!d' > $outdir/rcdefs.h\n        ],\n        [\n            CPP=\"$CPP\"\n            infile=\"$srcdir/include/wx/msw/genrcdefs.h\"\n            outdir=\"lib/wx/include/$TOOLCHAIN_FULLNAME/wx/msw\"\n        ]\n    )\nfi\n\nAC_CONFIG_FILES([ lib/wx/config/${TOOLCHAIN_FULLNAME}:wx-config.in ],\n                [ chmod +x lib/wx/config/${TOOLCHAIN_FULLNAME} ],\n                [ TOOLCHAIN_FULLNAME=\"${TOOLCHAIN_FULLNAME}\" ])\n\nAC_CONFIG_FILES([ lib/wx/config/inplace-${TOOLCHAIN_FULLNAME}:wx-config-inplace.in ],\n                [ chmod +x lib/wx/config/inplace-${TOOLCHAIN_FULLNAME} ],\n                [ TOOLCHAIN_FULLNAME=\"${TOOLCHAIN_FULLNAME}\" ])\n\ndnl this is used to run ifacecheck with the same flags used by the compiler\ndnl for the real compilation:\nAC_CONFIG_FILES([ utils/ifacecheck/rungccxml.sh ],\n                [ chmod +x utils/ifacecheck/rungccxml.sh ])\n\nif test \"$wx_cv_version_script\" = \"yes\"; then\n    AC_CONFIG_FILES(version-script)\nfi\nAC_CONFIG_FILES(Makefile)\n\nAC_CONFIG_COMMANDS([wx-config],\n                   [ rm -f wx-config\n                     ${LN_S} lib/wx/config/inplace-${TOOLCHAIN_FULLNAME} wx-config\n                   ],\n                   [ TOOLCHAIN_FULLNAME=\"${TOOLCHAIN_FULLNAME}\"\n                     LN_S=\"${LN_S}\"\n                   ])\n\ndnl This would give us us build dir that in every significant way\ndnl resembles an installed wx in prefix=$builddir.  It is troublesome\ndnl though in this form because AC_CONFIG_LINKS will fail for directories\ndnl on platforms that do not have symlinks.\ndnl AC_CONFIG_LINKS([ include/wx-$WX_RELEASE$WX_FLAVOUR:include ])\n\nif test \"$wxWITH_SUBDIRS\" != \"no\"; then\ndnl Configure samples, demos etc. directories, but only if they are present:\nif test \"$wxUSE_GUI\" = \"yes\"; then\n    SUBDIRS=\"samples demos utils\"\nelse\n    dnl we build wxBase only\n    dnl there are no wxBase programs in demos\n    SUBDIRS=\"samples utils\"\nfi\n\nif test \"$wxUSE_TESTS_SUBDIR\" != \"no\"; then\n    dnl Configure tests directory\n    SUBDIRS=\"$SUBDIRS tests\"\n\n    dnl Check for catch (C++ Automated Test Cases in Headers) availability.\n    AC_MSG_CHECKING([whether catch.hpp file exists])\n    if ! test -f \"$ac_confdir/3rdparty/catch/include/catch.hpp\" ; then\n        AC_MSG_RESULT([no])\n        AC_MSG_ERROR([\n    CATCH (C++ Automated Test Cases in Headers) is required, the required file\n    $ac_confdir/3rdparty/catch/include/catch.hpp couldn't be found.\n\n    You might need to run\n\n        git submodule update --init 3rdparty/catch\n\n    to fix this.])\n    else\n        AC_MSG_RESULT([yes])\n    fi\nfi\n\nfor subdir in $SUBDIRS; do\n    if test -d ${srcdir}/${subdir} ; then\n        if test \"$wxUSE_GUI\" = \"yes\"; then\n            if test ${subdir} = \"samples\"; then\n                dnl only take those samples which compile in the current\n                dnl configuration and which exist\n                makefiles=\"samples/Makefile.in $makefiles\"\n                for sample in $SAMPLES_SUBDIRS; do\n                    if test -d $srcdir/samples/$sample; then\n                        makefiles=\"samples/$sample/Makefile.in $makefiles\"\n                    fi\n                done\n\n                dnl also create makefiles for the subdirectories containing\n                dnl other samples that are not added to SAMPLES_SUBDIRS because\n                dnl we don't want to recurse into them when building everything\n                dnl because we still want to allow building them explicitly\n                for subtree in $SAMPLES_SUBTREES; do\n                    makefiles=\"samples/$subtree/Makefile.in $makefiles\"\n                done\n            else\n                dnl assume that everything compiles for utils &c\n                dnl any that shouldn't be built can be added to\n                dnl DISABLED_UTILS, DISABLED_DEMOS\n                disabled_var=DISABLED_`echo $subdir | tr '[[a-z]]' '[[A-Z]]'`\n                eval \"disabled=\\$$disabled_var\"\n                disabled=/`echo X $disabled | sed 's@ @/|/@g'`/\n                makefiles=`(cd $srcdir ; find $subdir -name Makefile.in) | $EGREP -v \"$disabled\"`\n            fi\n        else\n            dnl we build wxBase only\n            dnl don't take all samples/utils, just those which build with wxBase\n            if test ${subdir} = \"samples\"; then\n                dnl only take those samples which compile in the current\n                dnl configuration and which exist\n                makefiles=\"samples/Makefile.in $makefiles\"\n                for sample in `echo $SAMPLES_SUBDIRS`; do\n                    if test -d $srcdir/samples/$sample; then\n                        makefiles=\"samples/$sample/Makefile.in $makefiles\"\n                    fi\n                done\n            elif test ${subdir} = \"utils\"; then\n                makefiles=\"\"\n                for util in ifacecheck ; do\n                    if test -d $srcdir/utils/$util ; then\n                        makefiles=\"utils/$util/src/Makefile.in \\\n                                   $makefiles\"\n                    fi\n                done\n            else\n                dnl assume that everything compiles for tests\n                makefiles=`(cd $srcdir ; find $subdir -name Makefile.in)`\n            fi\n        fi\n\n        for mkin in $makefiles ; do\n            mk=`echo $mkin | sed 's/Makefile\\.in/Makefile/g'`\n            AC_CONFIG_FILES([$mk])\n        done\n    fi\ndone\nfi dnl wxWITH_SUBDIRS\n\nAC_OUTPUT\n\ndnl Enable strict option checking by default because typos in --enable-xxx is\ndnl a much more common case than wanting to explicitly pass an option unknown\ndnl to the main configure script (this one) to a configure scripts in a\ndnl subdirectory (e.g. src/tiff or src/expat). If someone really needs to do\ndnl the latter, --disable-option-checking would need to be explicitly used.\ndnl\ndnl Notice that we need to do this at the very end of configure script as\ndnl otherwise this would be overridden by AC_CONFIG_SUBDIRS() which disables\ndnl option checking. And we need to use m4_divert_text() because we want this\ndnl to appear in the beginning of the generated file, before the code parsing\ndnl the options.\nm4_divert_text([DEFAULTS],[enable_option_checking=fatal])\n\ndnl report how we have been configured\necho\necho \"Configured wxWidgets ${WX_VERSION} for \\`${host}'\"\necho \"\"\necho \"  Which GUI toolkit should wxWidgets use?                 ${TOOLKIT_DESC}\"\necho \"  Should wxWidgets be compiled into single library?       ${wxUSE_MONOLITHIC:-yes}\"\necho \"  Should wxWidgets be linked as a shared library?         ${wxUSE_SHARED:-no}\"\necho $ECHO_N \"  Should wxWidgets support Unicode?                       ${wxUSE_UNICODE:-no}$ECHO_C\"\nif test \"$wxUSE_UNICODE\" = \"yes\"; then\n    if test \"$wxUSE_UNICODE_UTF8\" = \"yes\"; then\n        echo \" (using UTF-8)\"\n    else\n        echo \" (using wchar_t)\"\n    fi\nelse\n    echo\nfi\n\necho \"  What level of wxWidgets compatibility should be enabled?\"\necho \"                                       wxWidgets 2.8      ${WXWIN_COMPATIBILITY_2_8:-no}\"\necho \"                                       wxWidgets 3.0      ${WXWIN_COMPATIBILITY_3_0:-yes}\"\n\necho \"  Which libraries should wxWidgets use?\"\necho \"                                       STL                ${wxUSE_STL}\"\necho \"                                       jpeg               ${wxUSE_LIBJPEG-none}\"\necho \"                                       png                ${wxUSE_LIBPNG-none}\"\necho \"                                       regex              ${wxUSE_REGEX}\"\necho \"                                       tiff               ${wxUSE_LIBTIFF-none}\"\nif test \"$wxUSE_X11\" = 1 -o \"$wxUSE_MOTIF\" = 1; then\necho \"                                       xpm                ${wxUSE_LIBXPM-none}\"\nfi\necho \"                                       lzma               ${wxUSE_LIBLZMA}\"\necho \"                                       zlib               ${wxUSE_ZLIB}\"\necho \"                                       expat              ${wxUSE_EXPAT}\"\necho \"                                       libmspack          ${wxUSE_LIBMSPACK}\"\necho \"                                       sdl                ${wxUSE_LIBSDL}\"\n\necho \"\"\n\ndnl vi: set et sts=4 sw=4 com=\\:dnl:\n",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/build/cmake/setup.cmake": "#############################################################################\n# Name:        build/cmake/setup.cmake\n# Purpose:     Create and configure setup.h\n# Author:      Tobias Taschner\n# Created:     2016-09-22\n# Copyright:   (c) 2016 wxWidgets development team\n# Licence:     wxWindows licence\n#############################################################################\n\n# Include modules required for setup.h generation\ninclude(CheckCSourceCompiles)\ninclude(CheckCXXCompilerFlag)\ninclude(CheckCXXSourceCompiles)\ninclude(CheckCXXSymbolExists)\ninclude(CheckFunctionExists)\ninclude(CheckIncludeFile)\ninclude(CheckIncludeFileCXX)\ninclude(CheckIncludeFiles)\ninclude(CheckPrototypeDefinition)\ninclude(CheckStructHasMember)\ninclude(CheckSymbolExists)\ninclude(CheckTypeSize)\ninclude(CMakePushCheckState)\ninclude(TestBigEndian)\n\n# Add a definition to setup.h and append it to a list of defines for\n# for compile checks\nmacro(wx_setup_definition def)\n    set(${def} YES)\n    list(APPEND CMAKE_REQUIRED_DEFINITIONS -D${def})\nendmacro()\n\n# Add define based on system name\nstring(TOUPPER ${CMAKE_SYSTEM_NAME} wxSYS_NAME)\nwx_setup_definition(__${wxSYS_NAME}__)\n\nif(WIN32)\n    wx_setup_definition(__WIN32__)\nendif()\n\nif(CYGWIN)\n    wx_setup_definition(__GNUWIN32__)\nendif()\n\nif(UNIX)\n    wx_setup_definition(wxUSE_UNIX)\n    wx_setup_definition(__UNIX__)\nendif()\n\nif(UNIX AND NOT APPLE)\n    wx_setup_definition(_GNU_SOURCE)\nendif()\n\nif(APPLE)\n    wx_setup_definition(__BSD__)\nendif()\n\nif(WXGTK)\n    # Add GTK version definitions\n    foreach(gtk_version 1.2.7 2.0 2.10 2.18 2.20 3.0 3.90.0)\n        if(wxTOOLKIT_VERSION VERSION_GREATER gtk_version)\n            if(gtk_version EQUAL 3.90.0)\n                set(__WXGTK4__ ON)\n            elseif(gtk_version EQUAL 3.0)\n                set(__WXGTK3__ ON)\n            else()\n                string(REPLACE . \"\" gtk_version_dotless ${gtk_version})\n                set(__WXGTK${gtk_version_dotless}__ ON)\n            endif()\n        endif()\n    endforeach()\nendif()\n\nset(wxINSTALL_PREFIX ${CMAKE_INSTALL_PREFIX})\n\ncheck_include_files(\"stdlib.h;stdarg.h;string.h;float.h\" STDC_HEADERS)\n\nif(wxBUILD_SHARED)\n    if(wxUSE_VISIBILITY)\n        check_cxx_compiler_flag(-fvisibility=hidden HAVE_VISIBILITY)\n    endif()\nendif() # wxBUILD_SHARED\n\n# wx_check_cxx_source_compiles(<code> <var> [headers...])\nfunction(wx_check_cxx_source_compiles code res_var)\n    set(src)\n    foreach(header ${ARGN})\n        if(header STREQUAL \"DEFINITION\")\n            set(is_definition TRUE)\n        elseif(is_definition)\n            set(src \"${src}${header}\")\n            set(is_definition FALSE)\n        else()\n            set(src \"${src}#include <${header}>\\n\")\n        endif()\n    endforeach()\n    set(src \"${src}\\n\\nint main(int argc, char* argv[]) {\\n ${code}\\nreturn 0; }\")\n    check_cxx_source_compiles(\"${src}\" ${res_var})\nendfunction()\n\n# wx_check_cxx_source_compiles(<code> <var> [headers...])\nfunction(wx_check_c_source_compiles code res_var)\n    set(src)\n    foreach(header ${ARGN})\n        if(header STREQUAL \"DEFINITION\")\n            set(is_definition TRUE)\n        elseif(is_definition)\n            set(src \"${src}${header}\")\n            set(is_definition FALSE)\n        else()\n            set(src \"${src}#include <${header}>\\n\")\n        endif()\n    endforeach()\n    set(src \"${src}\\n\\nint main(int argc, char* argv[]) {\\n ${code}\\nreturn 0; }\")\n    check_c_source_compiles(\"${src}\" ${res_var})\nendfunction()\n\n# wx_check_funcs(<...>)\n# define a HAVE_... for every function in list if available\nfunction(wx_check_funcs)\n    foreach(func ${ARGN})\n        string(TOUPPER ${func} func_upper)\n        check_function_exists(${func} HAVE_${func_upper})\n    endforeach()\nendfunction()\n\nif(NOT MSVC)\n    check_symbol_exists(va_copy stdarg.h HAVE_VA_COPY)\n    if(NOT HAVE_VA_COPY)\n        # try to understand how can we copy va_lists\n        set(VA_LIST_IS_ARRAY YES)\n    endif()\nendif()\n\nif(wxUSE_STL AND CMAKE_CXX_STANDARD EQUAL 98)\n    wx_check_cxx_source_compiles(\"\n        std::vector<int> moo;\n        std::list<int> foo;\n        std::vector<int>::iterator it =\n            std::find_if(moo.begin(), moo.end(),\n                std::bind2nd(std::less<int>(), 3));\"\n        wxTEST_STL\n        string functional algorithm vector list\n        )\n    if(NOT wxTEST_STL)\n        message(FATAL_ERROR \"Can't use wxUSE_STL as basic STL functionality is missing\")\n    endif()\nendif()\n\nwx_check_cxx_source_compiles(\"\n    std::string foo, bar;\n    foo.compare(bar);\n    foo.compare(1, 1, bar);\n    foo.compare(1, 1, bar, 1, 1);\n    foo.compare(\\\"\\\");\n    foo.compare(1, 1, \\\"\\\");\n    foo.compare(1, 1, \\\"\\\", 2);\"\n    HAVE_STD_STRING_COMPARE\n    string\n    )\n\nwx_check_cxx_source_compiles(\n    \"std::wstring s;\"\n    HAVE_STD_WSTRING\n    string\n    )\n\nwx_check_cxx_source_compiles(\"\n    std::hash_map<double*, char*, std::hash<double*>, std::equal_to<double*> > test1;\n    std::hash_set<char*, std::hash<char*>, std::equal_to<char*> > test2;\"\n    HAVE_HASH_MAP\n    hash_map hash_set\n    )\nset(HAVE_STD_HASH_MAP ${HAVE_HASH_MAP})\n\nwx_check_cxx_source_compiles(\"\n    __gnu_cxx::hash_map<double*, char*, __gnu_cxx::hash<double*>, std::equal_to<double*> > test1;\n    __gnu_cxx::hash_set<char*, __gnu_cxx::hash<char*>, std::equal_to<char*> > test2;\"\n    HAVE_EXT_HASH_MAP\n    ext/hash_map ext/hash_set\n    )\nset(HAVE_GNU_CXX_HASH_MAP ${HAVE_EXT_HASH_MAP})\n\nwx_check_cxx_source_compiles(\"\n    std::unordered_map<double*, char*> test1;\n    std::unordered_set<char*> test2;\"\n    HAVE_STD_UNORDERED_MAP\n    unordered_map unordered_set\n    )\nset(HAVE_STD_UNORDERED_SET ${HAVE_STD_UNORDERED_MAP})\n\nwx_check_cxx_source_compiles(\"\n    std::tr1::unordered_map<double*, char*> test1;\n    std::tr1::unordered_set<char*> test2;\"\n    HAVE_TR1_UNORDERED_MAP\n    tr1/unordered_map tr1/unordered_set\n    )\nset(HAVE_TR1_UNORDERED_SET ${HAVE_TR1_UNORDERED_MAP})\n\n# Check for availability of GCC's atomic operations builtins.\nwx_check_c_source_compiles(\"\n    unsigned int value=0;\n    /* wxAtomicInc doesn't use return value here */\n    __sync_fetch_and_add(&value, 2);\n    __sync_sub_and_fetch(&value, 1);\n    /* but wxAtomicDec does, so mimic that: */\n    volatile unsigned int r2 = __sync_sub_and_fetch(&value, 1);\"\n    HAVE_GCC_ATOMIC_BUILTINS\n    )\n\nmacro(wx_get_socket_param_type name code)\n    # This test needs to be done in C++ mode since gsocket.cpp now\n    # is C++ code and pointer cast that are possible even without\n    # warning in C still fail in C++.\n    wx_check_cxx_source_compiles(\n        \"socklen_t len;\n        ${code}\"\n        ${name}_IS_SOCKLEN_T\n        sys/types.h sys/socket.h\n        )\n    if(${name}_IS_SOCKLEN_T)\n        set(${name} socklen_t)\n    else()\n        wx_check_cxx_source_compiles(\n            \"size_t len;\n            ${code}\"\n            ${name}_IS_SIZE_T\n            sys/types.h sys/socket.h\n            )\n        if(${name}_IS_SIZE_T)\n            set(${name} size_t)\n        else()\n            wx_check_cxx_source_compiles(\n                \"int len;\n                ${code}\"\n                ${name}_IS_INT\n                sys/types.h sys/socket.h\n                )\n            if(${name}_IS_INT)\n                set(${name} int)\n            else()\n                message(ERROR \"Couldn't find ${name} for this system\")\n            endif()\n        endif()\n    endif()\nendmacro()\n\n# the following tests are for Unix(like) systems only\nif(UNIX)\n    if(wxUSE_LIBICONV)\n        set(HAVE_ICONV ON)\n        set(ICONV_CONST \" \")\n        if(ICONV_SECOND_ARGUMENT_IS_CONST)\n            set(ICONV_CONST \"const\")\n        endif()\n    endif()\n\n    # check for POSIX signals if we need them\n    if(wxUSE_ON_FATAL_EXCEPTION)\n        wx_check_funcs(sigaction)\n        if(NOT HAVE_SIGACTION)\n            message(WARNING \"No POSIX signal functions on this system, wxApp::OnFatalException will not be called\")\n            wx_option_force_value(wxUSE_ON_FATAL_EXCEPTION OFF)\n        endif()\n    endif()\n\n    if(wxUSE_ON_FATAL_EXCEPTION)\n        wx_check_cxx_source_compiles(\n            \"return 0; }\n            extern void testSigHandler(int) { };\n            int foo() {\n            struct sigaction sa;\n            sa.sa_handler = testSigHandler;\"\n            wxTYPE_SA_HANDLER_IS_INT\n            signal.h\n            )\n        if(wxTYPE_SA_HANDLER_IS_INT)\n            set(wxTYPE_SA_HANDLER int)\n        else()\n            set(wxTYPE_SA_HANDLER void)\n        endif()\n    endif()\n\n    # backtrace() and backtrace_symbols() for wxStackWalker\n    if(wxUSE_STACKWALKER)\n        wx_check_cxx_source_compiles(\"\n            void *trace[1];\n            char **messages;\n            backtrace(trace, 1);\n            messages = backtrace_symbols(trace, 1);\"\n            wxHAVE_BACKTRACE\n            execinfo.h)\n        if(NOT wxHAVE_BACKTRACE)\n            message(WARNING \"backtrace() is not available, wxStackWalker will not be available\")\n            wx_option_force_value(wxUSE_STACKWALKER OFF)\n        else()\n            wx_check_cxx_source_compiles(\n                \"int rc;\n                 __cxxabiv1::__cxa_demangle(\\\"foo\\\", 0, 0, &rc);\"\n                HAVE_CXA_DEMANGLE\n                cxxabi.h)\n        endif()\n    endif()\n\n    wx_check_funcs(mkstemp mktemp)\n\n    # get the library function to use for wxGetDiskSpace(): it is statfs() under\n    # Linux and *BSD and statvfs() under Solaris\n    wx_check_c_source_compiles(\"\n        return 0; }\n        #if defined(__BSD__)\n        #include <sys/param.h>\n        #include <sys/mount.h>\n        #else\n        #include <sys/vfs.h>\n        #endif\n\n        int foo() {\n        long l;\n        struct statfs fs;\n        statfs(\\\"/\\\", &fs);\n        l = fs.f_bsize;\n        l += fs.f_blocks;\n        l += fs.f_bavail;\"\n        HAVE_STATFS)\n    if(HAVE_STATFS)\n        set(WX_STATFS_T \"struct statfs\")\n        wx_check_cxx_source_compiles(\"\n            return 0; }\n            #if defined(__BSD__)\n            #include <sys/param.h>\n            #include <sys/mount.h>\n            #else\n            #include <sys/vfs.h>\n            #endif\n\n            int foo() {\n            struct statfs fs;\n            statfs(\\\"/\\\", &fs);\"\n            HAVE_STATFS_DECL)\n    else()\n        # TODO: implement statvfs checks\n        if(HAVE_STATVFS)\n            set(WX_STATFS_T statvfs_t)\n        endif()\n    endif()\n\n    if(NOT HAVE_STATFS AND NOT HAVE_STATVFS)\n        message(WARNING \"wxGetDiskSpace() function won't work without statfs()\")\n    endif()\n\n    # check for fcntl() or at least flock() needed by Unix implementation of\n    # wxSingleInstanceChecker\n    if(wxUSE_SNGLINST_CHECKER)\n        wx_check_funcs(fcntl flock)\n        if(NOT HAVE_FCNTL AND NOT HAVE_FLOCK)\n            message(WARNING \"wxSingleInstanceChecker not available\")\n            wx_option_force_value(wxUSE_SNGLINST_CHECKER OFF)\n        endif()\n    endif()\n\n    # look for a function to modify the environment\n    wx_check_funcs(setenv putenv)\n    if(HAVE_SETENV)\n        wx_check_funcs(unsetenv)\n    endif()\n\n    set(HAVE_SOME_SLEEP_FUNC FALSE)\n    if(APPLE)\n        # Mac OS X/Darwin has both nanosleep and usleep\n        # but only usleep is defined in unistd.h\n        set(HAVE_USLEEP TRUE)\n        set(HAVE_SOME_SLEEP_FUNC TRUE)\n    endif()\n\n    if(NOT HAVE_SOME_SLEEP_FUNC)\n        # try nanosleep() in libc and libposix4, if this fails - usleep()\n        check_symbol_exists(nanosleep time.h HAVE_NANOSLEEP)\n\n        if(NOT HAVE_NANOSLEEP)\n            check_symbol_exists(usleep unistd.h HAVE_USLEEP)\n            if(NOT HAVE_USLEEP)\n                message(WARNING \"wxSleep() function will not work\")\n            endif()\n        endif()\n    endif()\n\n    # check for uname (POSIX) and gethostname (BSD)\n    check_symbol_exists(uname sys/utsname.h HAVE_UNAME)\n    if(HAVE_UNAME)\n        wx_check_funcs(gethostname)\n    endif()\n\n    cmake_push_check_state()\n    list(APPEND CMAKE_REQUIRED_DEFINITIONS -D_REENTRANT)\n    wx_check_funcs(strtok_r)\n    cmake_pop_check_state()\n\n    # check for inet_addr and inet_aton (these may live either in libc, or in\n    # libnsl or libresolv or libsocket)\n    # TODO\n\n    wx_check_funcs(fdopen)\n\n    if(wxUSE_TARSTREAM)\n        wx_check_funcs(sysconf)\n\n        cmake_push_check_state()\n        list(APPEND CMAKE_REQUIRED_DEFINITIONS -D_REENTRANT)\n        check_symbol_exists(getpwuid_r pwd.h HAVE_GETPWUID_R)\n        check_symbol_exists(getgrgid_r grp.h HAVE_GETGRGID_R)\n        cmake_pop_check_state()\n    endif()\n\n    check_include_file(sys/soundcard.h HAVE_SYS_SOUNDCARD_H)\n\n    set(HAVE_UNIX98_PRINTF ON)\n\n    if(wxUSE_SOCKETS)\n        # determine the type of third argument for getsockname\n        wx_get_socket_param_type(WX_SOCKLEN_T \"getsockname(0, 0, &len);\")\n        # Do this again for getsockopt as it may be different\n        wx_get_socket_param_type(SOCKOPTLEN_T \"getsockopt(0, 0, 0, 0, &len);\")\n\n        check_symbol_exists(gethostbyname netdb.h HAVE_GETHOSTBYNAME)\n        check_symbol_exists(gethostbyname_r netdb.h HAVE_GETHOSTBYNAME_R)\n        if(HAVE_GETHOSTBYNAME_R)\n            check_prototype_definition(gethostbyname_r\n                \"int gethostbyname_r(const char *name, struct hostent *hp, struct hostent_data *hdata)\"\n                \"0\"\n                \"netdb.h\"\n                HAVE_FUNC_GETHOSTBYNAME_R_3)\n\n            check_prototype_definition(gethostbyname_r\n                \"struct hostent *gethostbyname_r(const char *name, struct hostent *hp, char *buf, size_t buflen, int *herr)\"\n                \"NULL\"\n                \"netdb.h\"\n                HAVE_FUNC_GETHOSTBYNAME_R_5)\n\n            check_prototype_definition(gethostbyname_r\n                \"int gethostbyname_r(const char *name, struct hostent *hp, char *buf, size_t buflen, struct hostent **result, int *herr)\"\n                \"0\"\n                \"netdb.h\"\n                HAVE_FUNC_GETHOSTBYNAME_R_6)\n        endif()\n\n        check_symbol_exists(getservbyname netdb.h HAVE_GETSERVBYNAME)\n        check_symbol_exists(inet_aton arpa/inet.h HAVE_INET_ATON)\n        check_symbol_exists(inet_addr arpa/inet.h HAVE_INET_ADDR)\n    endif(wxUSE_SOCKETS)\nendif(UNIX)\n\nif(CMAKE_USE_PTHREADS_INIT)\n    cmake_push_check_state(RESET)\n    set(CMAKE_REQUIRED_LIBRARIES pthread)\n    wx_check_cxx_source_compiles(\"\n        void *p;\n        pthread_cleanup_push(ThreadCleanupFunc, p);\n        pthread_cleanup_pop(0);\"\n        wxHAVE_PTHREAD_CLEANUP\n        pthread.h\n        DEFINITION\n        \"void ThreadCleanupFunc(void *p) { }\\;\"\n        )\n    wx_check_c_source_compiles(\n        \"pthread_mutexattr_t attr;\n        pthread_mutexattr_settype(&attr, PTHREAD_MUTEX_RECURSIVE);\"\n        HAVE_PTHREAD_MUTEXATTR_T\n        pthread.h\n        )\n    if(HAVE_PTHREAD_MUTEXATTR_T)\n        # check if we already have the declaration we need, it is not\n        # present in some systems' headers\n        wx_check_c_source_compiles(\n            \"pthread_mutexattr_t attr;\n            pthread_mutexattr_settype(&attr, PTHREAD_MUTEX_RECURSIVE);\"\n            HAVE_PTHREAD_MUTEXATTR_SETTYPE_DECL\n            pthread.h\n            )\n    else()\n        # don't despair, there may be another way to do it\n        wx_check_c_source_compiles(\n            \"pthread_mutex_t attr = PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP;\"\n            HAVE_PTHREAD_RECURSIVE_MUTEX_INITIALIZER\n            pthread.h\n            )\n        if(NOT HAVE_PTHREAD_RECURSIVE_MUTEX_INITIALIZER)\n            # this may break code working elsewhere, so at least warn about it\n            message(WARNING \"wxMutex won't be recursive on this platform\")\n        endif()\n    endif()\n    if(wxUSE_COMPILER_TLS)\n        # test for compiler thread-specific variables support\n        wx_check_c_source_compiles(\"\n            static __thread int n = 0;\n            static __thread int *p = 0;\"\n            HAVE___THREAD_KEYWORD\n            pthread.h\n            )\n        wx_check_cxx_source_compiles(\n            \"void foo(abi::__forced_unwind&);\"\n            HAVE_ABI_FORCEDUNWIND\n            cxxabi.h)\n    endif()\n    cmake_pop_check_state()\nendif() # CMAKE_USE_PTHREADS_INIT\n\ncheck_symbol_exists(localtime_r time.h HAVE_LOCALTIME_R)\ncheck_symbol_exists(gmtime_r time.h HAVE_GMTIME_R)\n\n# ---------------------------------------------------------------------------\n# Checks for typedefs\n# ---------------------------------------------------------------------------\n\n# check what exactly size_t is on this machine - this is necessary to avoid\n# ambiguous overloads in several places, notably wx/string.h and wx/array.h\n\n# an obvious check like wx_check_cxx_source_compiles(struct Foo { ... };) doesn't work\n# with egcs (at least) up to 1.1.1 as it allows you to compile duplicate\n# methods in a local class (i.e. class inside a function) declaration\n# without any objections!!\n#\n# hence the hack below: we must have Foo at global scope!\nwx_check_cxx_source_compiles(\"return 0; }\n\n            struct Foo { void foo(size_t); void foo(unsigned int); };\n\n            int bar() {\"\n            wxSIZE_T_IS_NOT_UINT\n            stddef.h)\nif(wxSIZE_T_IS_NOT_UINT)\n    wx_check_cxx_source_compiles(\"return 0; }\n\n            struct Foo { void foo(size_t); void foo(unsigned long); };\n\n            int bar() {\"\n            wxSIZE_T_IS_NOT_ULONG\n            stddef.h)\n    if(NOT wxSIZE_T_IS_NOT_ULONG)\n        set(wxSIZE_T_IS_ULONG YES)\n    endif()\nelse()\n    set(wxSIZE_T_IS_UINT YES)\nendif()\n\n# check if wchar_t is separate type\nwx_check_cxx_source_compiles(\"return 0; }\n\n            struct Foo { void foo(wchar_t);\n                         void foo(unsigned short);\n                         void foo(unsigned int);\n                         void foo(unsigned long); };\n\n            int bar() {\"\n            wxWCHAR_T_IS_REAL_TYPE\n            wchar.h)\n\n# ---------------------------------------------------------------------------\n# Checks for structures\n# ---------------------------------------------------------------------------\n\ncheck_struct_has_member(\"struct passwd\" pw_gecos pwd.h HAVE_PW_GECOS)\n\n# ---------------------------------------------------------------------------\n# Check for functions\n# ---------------------------------------------------------------------------\n\n# Check various string symbols\nforeach(func\n    ftime\n    wcsftime wprintf\n    putws fputws wprintf vswprintf vswscanf\n    wcsdup wcsnlen wcscasecmp wcsncasecmp\n    wcsrctombs\n    wcstoull\n    wcslen\n    )\n    string(TOUPPER ${func} func_upper)\n    check_symbol_exists(${func} wchar.h HAVE_${func_upper})\nendforeach()\n\n# Check various functions\nwx_check_funcs(fsync\n               snprintf vsnprintf strnlen strtoull\n               setpriority\n               gettimeofday\n               )\n\nif(MSVC)\n    check_symbol_exists(vsscanf stdio.h HAVE_VSSCANF)\nendif()\n\n# at least under IRIX with mipsPro the C99 round() function is available when\n# building using the C compiler but not when using C++ one\ncheck_cxx_symbol_exists(round math.h HAVE_ROUND)\n\n# Check includes\nif(NOT MSVC_VERSION LESS 1600)\n    check_include_file_cxx(tr1/type_traits HAVE_TR1_TYPE_TRAITS)\n    check_include_file_cxx(type_traits HAVE_TYPE_TRAITS)\nendif()\ncheck_include_file(fcntl.h HAVE_FCNTL_H)\ncheck_include_file(langinfo.h HAVE_LANGINFO_H)\ncheck_include_file(sched.h HAVE_SCHED_H)\ncheck_include_file(unistd.h HAVE_UNISTD_H)\ncheck_include_file(wchar.h HAVE_WCHAR_H)\ncheck_include_file(wcstr.h HAVE_WCSTR_H)\n\nif(wxUSE_DATETIME)\n    # check for timezone variable\n    #   doesn't exist under Darwin / Mac OS X which uses tm_gmtoff instead\n    foreach(timezone_def timezone _timezone __timezone)\n        wx_check_cxx_source_compiles(\"\n            int tz;\n            tz = ${timezone_def};\"\n        wxTEST_TZ_${timezone_def}\n        time.h\n        )\n        if(${wxTEST_TZ_${timezone_def}})\n            set(WX_TIMEZONE ${timezone_def})\n            break()\n        endif()\n    endforeach()\n\n    check_struct_has_member(\"struct tm\" tm_gmtoff time.h WX_GMTOFF_IN_TM)\nendif()\n\ncmake_push_check_state(RESET)\nset(CMAKE_REQUIRED_LIBRARIES dl)\ncheck_symbol_exists(dlopen dlfcn.h HAVE_DLOPEN)\ncmake_pop_check_state()\nif(HAVE_DLOPEN)\n    check_symbol_exists(dladdr dlfcn.h HAVE_DLADDR)\nendif()\n\nif(APPLE)\n    set(wxUSE_EPOLL_DISPATCHER OFF)\n    set(wxUSE_SELECT_DISPATCHER ON)\nelse()\n    if(NOT WIN32)\n        set(wxUSE_SELECT_DISPATCHER ON)\n    endif()\n    check_include_file(sys/epoll.h wxUSE_EPOLL_DISPATCHER)\nendif()\ncheck_include_file(sys/select.h HAVE_SYS_SELECT_H)\n\nif(wxUSE_FSWATCHER)\n    check_include_file(sys/inotify.h wxHAS_INOTIFY)\n    if(NOT wxHAS_INOTIFY)\n        check_include_file(sys/event.h wxHAS_KQUEUE)\n    endif()\nendif()\n\nif(wxUSE_XLOCALE)\n    check_include_file(xlocale.h HAVE_XLOCALE_H)\n    set(CMAKE_EXTRA_INCLUDE_FILES locale.h)\n    if(HAVE_XLOCALE_H)\n        list(APPEND CMAKE_EXTRA_INCLUDE_FILES xlocale.h)\n    endif()\n    check_type_size(locale_t LOCALE_T)\n    set(CMAKE_EXTRA_INCLUDE_FILES)\nendif()\n\n# Check size and availability of various types\nset(SYSTYPES\n    pid_t size_t\n    wchar_t int long short\n    gid_t uid_t\n    )\nif(NOT MSVC)\n    list(APPEND SYSTYPES mode_t off_t)\nendif()\n\nforeach(SYSTYPE ${SYSTYPES})\n    string(TOUPPER ${SYSTYPE} SYSTYPE_UPPER)\n    check_type_size(${SYSTYPE} SIZEOF_${SYSTYPE_UPPER})\n    if(NOT HAVE_SIZEOF_${SYSTYPE_UPPER})\n        # Add a definition if it is not available\n        set(${SYSTYPE} ON)\n    endif()\nendforeach()\n\ncheck_type_size(\"long long\" SIZEOF_LONG_LONG)\ncheck_type_size(ssize_t SSIZE_T)\n\ntest_big_endian(WORDS_BIGENDIAN)\n\nconfigure_file(build/cmake/setup.h.in ${wxSETUP_HEADER_FILE})\nif(DEFINED wxSETUP_HEADER_FILE_DEBUG)\n    # The debug version may be configured with different values in the future\n    configure_file(build/cmake/setup.h.in ${wxSETUP_HEADER_FILE_DEBUG})\nendif()\n",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/build/cmake/setup.h.in": "/* This define (__WX_SETUP_H__) is used both to ensure setup.h is included\n * only once and to indicate that we are building using configure. */\n#ifndef __WX_SETUP_H__\n#define __WX_SETUP_H__\n\n/* never undefine inline or const keywords for C++ compilation */\n#ifndef __cplusplus\n\n/* Define to empty if the keyword does not work.  */\n#undef const\n\n/* Define as __inline if that's what the C compiler calls it.  */\n#undef inline\n\n#endif /* __cplusplus */\n\n/* the installation location prefix from configure */\n#cmakedefine wxINSTALL_PREFIX \"@wxINSTALL_PREFIX@\"\n\n/* Define to `int' if <sys/types.h> doesn't define.  */\n#cmakedefine gid_t int\n\n/* Define to `int' if <sys/types.h> doesn't define.  */\n#cmakedefine mode_t int\n\n/* Define to `long' if <sys/types.h> doesn't define.  */\n#cmakedefine off_t long\n\n/* Define to `int' if <sys/types.h> doesn't define.  */\n#cmakedefine pid_t int\n\n/* Define to `unsigned' if <sys/types.h> doesn't define.  */\n#cmakedefine size_t unsigned\n\n/* Define if ssize_t type is available.  */\n#cmakedefine HAVE_SSIZE_T\n\n/* Define if you have the ANSI C header files.  */\n#cmakedefine STDC_HEADERS 1\n\n/* Define this to get extra features from GNU libc. */\n#ifndef _GNU_SOURCE\n#cmakedefine _GNU_SOURCE 1\n#endif\n\n/* Define to `int' if <sys/types.h> doesn't define.  */\n#cmakedefine uid_t int\n\n/* Define if your processor stores words with the most significant\n   byte first (like Motorola and SPARC, unlike Intel and VAX).  */\n#cmakedefine WORDS_BIGENDIAN 1\n\n/* Define this if your version of GTK+ is greater than 1.2.7 */\n#cmakedefine __WXGTK127__ 1\n\n/* Define this if your version of GTK+ is greater than 2.0 */\n#cmakedefine __WXGTK20__ 1\n\n/* Define this if your version of GTK+ is greater than 2.10 */\n#cmakedefine __WXGTK210__ 1\n\n/* Define this if your version of GTK+ is greater than 2.18 */\n#cmakedefine __WXGTK218__ 1\n\n/* Define this if your version of GTK+ is greater than 2.20 */\n#cmakedefine __WXGTK220__ 1\n\n/* Define this if your version of GTK+ is >= 3.0 */\n#cmakedefine __WXGTK3__ 1\n\n/* Define this if your version of GTK+ is >= 3.90.0 */\n#cmakedefine __WXGTK4__ 1\n\n/* Define this if you want to use GPE features */\n#cmakedefine __WXGPE__ 1\n\n/* Define this if your version of Motif is greater than 2.0 */\n#cmakedefine __WXMOTIF20__ 1\n\n/* Define this if you are using Lesstif */\n#cmakedefine __WXLESSTIF__ 1\n\n/*\n * Define to 1 for Unix[-like] system\n */\n#cmakedefine01 wxUSE_UNIX\n\n#cmakedefine __UNIX__ 1\n\n#cmakedefine __AIX__ 1\n#cmakedefine __BSD__ 1\n#cmakedefine __DARWIN__ 1\n#cmakedefine __EMX__ 1\n#cmakedefine __FREEBSD__ 1\n#cmakedefine __HPUX__ 1\n#cmakedefine __LINUX__ 1\n#cmakedefine __NETBSD__ 1\n#cmakedefine __OPENBSD__ 1\n#cmakedefine __OSF__ 1\n#cmakedefine __QNX__ 1\n#cmakedefine __SGI__ 1\n#cmakedefine __SOLARIS__ 1\n#cmakedefine __SUN__ 1\n#cmakedefine __SUNOS__ 1\n#cmakedefine __SVR4__ 1\n#cmakedefine __SYSV__ 1\n#cmakedefine __ULTRIX__ 1\n#cmakedefine __UNIXWARE__ 1\n#cmakedefine __VMS__ 1\n\n#cmakedefine __IA64__ 1\n#cmakedefine __ALPHA__ 1\n\n/* NanoX (with wxX11) */\n#cmakedefine01 wxUSE_NANOX\n\n/* PowerPC Darwin & Mac OS X */\n#cmakedefine __POWERPC__ 1\n\n/* Hack to make IOGraphicsTypes.h not define Point conflicting with MacTypes */\n#undef __Point__\n\n/* MS-DOS with DJGPP */\n#cmakedefine __DOS__ 1\n\n/* Stupid hack; __WINDOWS__ clashes with wx/defs.h */\n#ifndef __WINDOWS__\n#cmakedefine __WINDOWS__ 1\n#endif\n\n#ifndef __WIN32__\n#cmakedefine __WIN32__ 1\n#endif\n#ifndef __GNUWIN32__\n#cmakedefine __GNUWIN32__ 1\n#endif\n#ifndef STRICT\n#cmakedefine STRICT\n#endif\n#ifndef WINVER\n#cmakedefine WINVER\n#endif\n\n/* --- start common options --- */\n\n#ifndef wxUSE_GUI\n    #cmakedefine01 wxUSE_GUI\n#endif\n\n\n#cmakedefine01 WXWIN_COMPATIBILITY_2_8\n\n#cmakedefine01 WXWIN_COMPATIBILITY_3_0\n\n#cmakedefine01 wxDIALOG_UNIT_COMPATIBILITY\n\n#cmakedefine01 wxUSE_UNSAFE_WXSTRING_CONV\n\n#cmakedefine01 wxUSE_REPRODUCIBLE_BUILD\n\n\n\n#cmakedefine01 wxUSE_ON_FATAL_EXCEPTION\n\n#cmakedefine01 wxUSE_STACKWALKER\n\n#cmakedefine01 wxUSE_DEBUGREPORT\n\n\n\n#cmakedefine01 wxUSE_DEBUG_CONTEXT\n\n#cmakedefine01 wxUSE_MEMORY_TRACING\n\n#cmakedefine01 wxUSE_GLOBAL_MEMORY_OPERATORS\n\n#cmakedefine01 wxUSE_DEBUG_NEW_ALWAYS\n\n\n\n#ifndef wxUSE_UNICODE\n    #cmakedefine01 wxUSE_UNICODE\n#endif\n\n\n#cmakedefine01 wxUSE_EXCEPTIONS\n\n#cmakedefine01 wxUSE_EXTENDED_RTTI\n\n#cmakedefine01 wxUSE_LOG\n\n#cmakedefine01 wxUSE_LOGWINDOW\n\n#cmakedefine01 wxUSE_LOGGUI\n\n#cmakedefine01 wxUSE_LOG_DIALOG\n\n#cmakedefine01 wxUSE_CMDLINE_PARSER\n\n#cmakedefine01 wxUSE_THREADS\n\n#cmakedefine01 wxUSE_STREAMS\n\n#cmakedefine01 wxUSE_PRINTF_POS_PARAMS\n\n#cmakedefine01 wxUSE_COMPILER_TLS\n\n\n#cmakedefine01 wxUSE_STL\n\n#cmakedefine01 wxUSE_STD_DEFAULT\n\n#define wxUSE_STD_CONTAINERS_COMPATIBLY wxUSE_STD_DEFAULT\n\n#cmakedefine01 wxUSE_STD_CONTAINERS\n\n#define wxUSE_STD_IOSTREAM  wxUSE_STD_DEFAULT\n\n#define wxUSE_STD_STRING  wxUSE_STD_DEFAULT\n\n#define wxUSE_STD_STRING_CONV_IN_WXSTRING wxUSE_STL\n\n\n#cmakedefine01 wxUSE_LONGLONG\n\n#cmakedefine01 wxUSE_BASE64\n\n#cmakedefine01 wxUSE_CONSOLE_EVENTLOOP\n\n#cmakedefine01 wxUSE_FILE\n#cmakedefine01 wxUSE_FFILE\n\n#cmakedefine01 wxUSE_FSVOLUME\n\n#cmakedefine01 wxUSE_SECRETSTORE\n\n#cmakedefine01 wxUSE_STDPATHS\n\n#cmakedefine01 wxUSE_TEXTBUFFER\n\n#cmakedefine01 wxUSE_TEXTFILE\n\n#cmakedefine01 wxUSE_INTL\n\n#cmakedefine01 wxUSE_XLOCALE\n\n#cmakedefine01 wxUSE_DATETIME\n\n#cmakedefine01 wxUSE_TIMER\n\n#cmakedefine01 wxUSE_STOPWATCH\n\n#cmakedefine01 wxUSE_FSWATCHER\n\n#cmakedefine01 wxUSE_CONFIG\n\n#cmakedefine01 wxUSE_CONFIG_NATIVE\n\n#cmakedefine01 wxUSE_DIALUP_MANAGER\n\n#cmakedefine01 wxUSE_DYNLIB_CLASS\n\n#cmakedefine01 wxUSE_DYNAMIC_LOADER\n\n#cmakedefine01 wxUSE_SOCKETS\n\n#cmakedefine01 wxUSE_IPV6\n\n#cmakedefine01 wxUSE_FILESYSTEM\n\n#cmakedefine01 wxUSE_FS_ZIP\n\n#cmakedefine01 wxUSE_FS_ARCHIVE\n\n#cmakedefine01 wxUSE_FS_INET\n\n#cmakedefine01 wxUSE_ARCHIVE_STREAMS\n\n#cmakedefine01 wxUSE_ZIPSTREAM\n\n#cmakedefine01 wxUSE_TARSTREAM\n\n#cmakedefine01 wxUSE_ZLIB\n\n#cmakedefine01 wxUSE_LIBLZMA\n\n#cmakedefine01 wxUSE_APPLE_IEEE\n\n#cmakedefine01 wxUSE_JOYSTICK\n\n#cmakedefine01 wxUSE_FONTENUM\n\n#cmakedefine01 wxUSE_FONTMAP\n\n#cmakedefine01 wxUSE_MIMETYPE\n\n#cmakedefine01 wxUSE_WEBREQUEST\n\n#ifdef __APPLE__\n#define wxUSE_WEBREQUEST_URLSESSION wxUSE_WEBREQUEST\n#else\n#cmakedefine01 wxUSE_WEBREQUEST_URLSESSION\n#endif\n\n#cmakedefine01 wxUSE_WEBREQUEST_CURL\n\n#cmakedefine01 wxUSE_PROTOCOL\n\n#cmakedefine01 wxUSE_PROTOCOL_FILE\n#cmakedefine01 wxUSE_PROTOCOL_FTP\n#cmakedefine01 wxUSE_PROTOCOL_HTTP\n\n#cmakedefine01 wxUSE_URL\n\n#cmakedefine01 wxUSE_URL_NATIVE\n\n#cmakedefine01 wxUSE_VARIANT\n\n#cmakedefine01 wxUSE_ANY\n\n#cmakedefine01 wxUSE_REGEX\n\n#cmakedefine01 wxUSE_SYSTEM_OPTIONS\n\n#cmakedefine01 wxUSE_SOUND\n\n#cmakedefine01 wxUSE_MEDIACTRL\n\n#cmakedefine01 wxUSE_XRC\n\n#define wxUSE_XML       wxUSE_XRC\n\n#cmakedefine01 wxUSE_AUI\n\n#cmakedefine01 wxUSE_RIBBON\n\n#cmakedefine01 wxUSE_PROPGRID\n\n#cmakedefine01 wxUSE_STC\n\n#cmakedefine01 wxUSE_WEBVIEW\n\n#ifdef __WXMSW__\n#cmakedefine01 wxUSE_WEBVIEW_IE\n#else\n#cmakedefine01 wxUSE_WEBVIEW_IE\n#endif\n\n#cmakedefine01 wxUSE_WEBVIEW_EDGE\n\n#if (defined(__WXGTK__) && !defined(__WXGTK3__)) || defined(__WXOSX__)\n#cmakedefine01 wxUSE_WEBVIEW_WEBKIT\n#else\n#cmakedefine01 wxUSE_WEBVIEW_WEBKIT\n#endif\n\n#if defined(__WXGTK3__)\n#cmakedefine01 wxUSE_WEBVIEW_WEBKIT2\n#else\n#cmakedefine01 wxUSE_WEBVIEW_WEBKIT2\n#endif\n\n\n#if defined(_MSC_VER) || \\\n    (defined(__MINGW32__) && (__GNUC__ > 4 || __GNUC_MINOR__ >= 8))\n#cmakedefine01 wxUSE_GRAPHICS_CONTEXT\n#else\n#cmakedefine01 wxUSE_GRAPHICS_CONTEXT\n#endif\n\n#cmakedefine01 wxUSE_CAIRO\n\n\n\n#cmakedefine01 wxUSE_CONTROLS\n\n#cmakedefine01 wxUSE_MARKUP\n\n#cmakedefine01 wxUSE_POPUPWIN\n\n#cmakedefine01 wxUSE_TIPWINDOW\n\n#cmakedefine01 wxUSE_ACTIVITYINDICATOR\n#cmakedefine01 wxUSE_ANIMATIONCTRL\n#cmakedefine01 wxUSE_BANNERWINDOW\n#cmakedefine01 wxUSE_BUTTON\n#cmakedefine01 wxUSE_BMPBUTTON\n#cmakedefine01 wxUSE_CALENDARCTRL\n#cmakedefine01 wxUSE_CHECKBOX\n#cmakedefine01 wxUSE_CHECKLISTBOX\n#cmakedefine01 wxUSE_CHOICE\n#cmakedefine01 wxUSE_COLLPANE\n#cmakedefine01 wxUSE_COLOURPICKERCTRL\n#cmakedefine01 wxUSE_COMBOBOX\n#cmakedefine01 wxUSE_COMMANDLINKBUTTON\n#cmakedefine01 wxUSE_DATAVIEWCTRL\n#cmakedefine01 wxUSE_DATEPICKCTRL\n#cmakedefine01 wxUSE_DIRPICKERCTRL\n#cmakedefine01 wxUSE_EDITABLELISTBOX\n#cmakedefine01 wxUSE_FILECTRL\n#cmakedefine01 wxUSE_FILEPICKERCTRL\n#cmakedefine01 wxUSE_FONTPICKERCTRL\n#cmakedefine01 wxUSE_GAUGE\n#cmakedefine01 wxUSE_HEADERCTRL\n#cmakedefine01 wxUSE_HYPERLINKCTRL\n#cmakedefine01 wxUSE_LISTBOX\n#cmakedefine01 wxUSE_LISTCTRL\n#cmakedefine01 wxUSE_RADIOBOX\n#cmakedefine01 wxUSE_RADIOBTN\n#cmakedefine01 wxUSE_RICHMSGDLG\n#cmakedefine01 wxUSE_SCROLLBAR\n#cmakedefine01 wxUSE_SEARCHCTRL\n#cmakedefine01 wxUSE_SLIDER\n#cmakedefine01 wxUSE_SPINBTN\n#cmakedefine01 wxUSE_SPINCTRL\n#cmakedefine01 wxUSE_STATBOX\n#cmakedefine01 wxUSE_STATLINE\n#cmakedefine01 wxUSE_STATTEXT\n#cmakedefine01 wxUSE_STATBMP\n#cmakedefine01 wxUSE_TEXTCTRL\n#cmakedefine01 wxUSE_TIMEPICKCTRL\n#cmakedefine01 wxUSE_TOGGLEBTN\n#cmakedefine01 wxUSE_TREECTRL\n#cmakedefine01 wxUSE_TREELISTCTRL\n\n#cmakedefine01 wxUSE_NATIVE_DATAVIEWCTRL\n\n#cmakedefine01 wxUSE_STATUSBAR\n\n#cmakedefine01 wxUSE_NATIVE_STATUSBAR\n\n#cmakedefine01 wxUSE_TOOLBAR\n#cmakedefine01 wxUSE_TOOLBAR_NATIVE\n\n#cmakedefine01 wxUSE_NOTEBOOK\n\n#cmakedefine01 wxUSE_LISTBOOK\n\n#cmakedefine01 wxUSE_CHOICEBOOK\n\n#cmakedefine01 wxUSE_TREEBOOK\n\n#cmakedefine01 wxUSE_TOOLBOOK\n\n#cmakedefine01 wxUSE_TASKBARICON\n\n#cmakedefine01 wxUSE_GRID\n\n#cmakedefine01 wxUSE_MINIFRAME\n\n#cmakedefine01 wxUSE_COMBOCTRL\n\n#cmakedefine01 wxUSE_ODCOMBOBOX\n\n#cmakedefine01 wxUSE_BITMAPCOMBOBOX\n\n#cmakedefine01 wxUSE_REARRANGECTRL\n\n#cmakedefine01 wxUSE_ADDREMOVECTRL\n\n\n#cmakedefine01 wxUSE_ACCEL\n\n#cmakedefine01 wxUSE_ARTPROVIDER_STD\n\n#cmakedefine01 wxUSE_ARTPROVIDER_TANGO\n\n#cmakedefine01 wxUSE_HOTKEY\n\n#cmakedefine01 wxUSE_CARET\n\n#cmakedefine01 wxUSE_DISPLAY\n\n#cmakedefine01 wxUSE_GEOMETRY\n\n#cmakedefine01 wxUSE_IMAGLIST\n\n#cmakedefine01 wxUSE_INFOBAR\n\n#cmakedefine01 wxUSE_MENUS\n\n#cmakedefine01 wxUSE_MENUBAR\n\n#cmakedefine01 wxUSE_NOTIFICATION_MESSAGE\n\n#cmakedefine01 wxUSE_PREFERENCES_EDITOR\n\n#cmakedefine01 wxUSE_PRIVATE_FONTS\n\n#cmakedefine01 wxUSE_RICHTOOLTIP\n\n#cmakedefine01 wxUSE_SASH\n\n#cmakedefine01 wxUSE_SPLITTER\n\n#cmakedefine01 wxUSE_TOOLTIPS\n\n#cmakedefine01 wxUSE_VALIDATORS\n\n#ifdef __WXMSW__\n#cmakedefine01 wxUSE_AUTOID_MANAGEMENT\n#else\n#cmakedefine01 wxUSE_AUTOID_MANAGEMENT\n#endif\n\n\n#cmakedefine01 wxUSE_COMMON_DIALOGS\n\n#cmakedefine01 wxUSE_BUSYINFO\n\n#cmakedefine01 wxUSE_CHOICEDLG\n\n#cmakedefine01 wxUSE_COLOURDLG\n\n#cmakedefine01 wxUSE_DIRDLG\n\n\n#cmakedefine01 wxUSE_FILEDLG\n\n#cmakedefine01 wxUSE_FINDREPLDLG\n\n#cmakedefine01 wxUSE_FONTDLG\n\n#cmakedefine01 wxUSE_MSGDLG\n\n#cmakedefine01 wxUSE_PROGRESSDLG\n\n#cmakedefine01 wxUSE_NATIVE_PROGRESSDLG\n\n#cmakedefine01 wxUSE_STARTUP_TIPS\n\n#cmakedefine01 wxUSE_TEXTDLG\n\n#cmakedefine01 wxUSE_NUMBERDLG\n\n#cmakedefine01 wxUSE_CREDENTIALDLG\n\n#cmakedefine01 wxUSE_SPLASH\n\n#cmakedefine01 wxUSE_WIZARDDLG\n\n#cmakedefine01 wxUSE_ABOUTDLG\n\n#cmakedefine01 wxUSE_FILE_HISTORY\n\n\n#cmakedefine01 wxUSE_METAFILE\n#cmakedefine01 wxUSE_ENH_METAFILE\n#cmakedefine01 wxUSE_WIN_METAFILES_ALWAYS\n\n\n#cmakedefine01 wxUSE_MDI\n\n#cmakedefine01 wxUSE_DOC_VIEW_ARCHITECTURE\n\n#cmakedefine01 wxUSE_MDI_ARCHITECTURE\n\n#cmakedefine01 wxUSE_PRINTING_ARCHITECTURE\n\n#cmakedefine01 wxUSE_HTML\n\n#cmakedefine01 wxUSE_GLCANVAS\n\n#cmakedefine01 wxUSE_GLCANVAS_EGL\n\n#cmakedefine01 wxUSE_RICHTEXT\n\n\n#cmakedefine01 wxUSE_CLIPBOARD\n\n#cmakedefine01 wxUSE_DATAOBJ\n\n#cmakedefine01 wxUSE_DRAG_AND_DROP\n\n#ifdef __WXMSW__\n#cmakedefine01 wxUSE_ACCESSIBILITY\n#else\n#cmakedefine01 wxUSE_ACCESSIBILITY\n#endif\n\n\n#cmakedefine01 wxUSE_SNGLINST_CHECKER\n\n#cmakedefine01 wxUSE_DRAGIMAGE\n\n#cmakedefine01 wxUSE_IPC\n\n#cmakedefine01 wxUSE_HELP\n\n\n#cmakedefine01 wxUSE_MS_HTML_HELP\n\n\n#cmakedefine01 wxUSE_WXHTML_HELP\n\n#cmakedefine01 wxUSE_CONSTRAINTS\n\n\n#cmakedefine01 wxUSE_SPLINES\n\n\n#cmakedefine01 wxUSE_MOUSEWHEEL\n\n\n#cmakedefine01 wxUSE_UIACTIONSIMULATOR\n\n\n#cmakedefine01 wxUSE_POSTSCRIPT\n\n#cmakedefine01 wxUSE_AFM_FOR_POSTSCRIPT\n\n#cmakedefine01 wxUSE_SVG\n\n#cmakedefine01 wxUSE_DC_TRANSFORM_MATRIX\n\n\n\n#cmakedefine01 wxUSE_IMAGE\n\n#cmakedefine01 wxUSE_LIBPNG\n\n#cmakedefine01 wxUSE_LIBJPEG\n\n#cmakedefine01 wxUSE_LIBTIFF\n\n#cmakedefine01 wxUSE_TGA\n\n#cmakedefine01 wxUSE_GIF\n\n#cmakedefine01 wxUSE_PNM\n\n#cmakedefine01 wxUSE_PCX\n\n#cmakedefine01 wxUSE_IFF\n\n#cmakedefine01 wxUSE_XPM\n\n#cmakedefine01 wxUSE_ICO_CUR\n\n#cmakedefine01 wxUSE_PALETTE\n\n\n#cmakedefine01 wxUSE_ALL_THEMES\n\n#cmakedefine01 wxUSE_THEME_GTK\n#cmakedefine01 wxUSE_THEME_METAL\n#cmakedefine01 wxUSE_THEME_MONO\n#cmakedefine01 wxUSE_THEME_WIN32\n\n/* --- end common options --- */\n\n/*\n * Unix-specific options\n */\n#cmakedefine01 wxUSE_SELECT_DISPATCHER\n#cmakedefine01 wxUSE_EPOLL_DISPATCHER\n\n#cmakedefine01 wxUSE_UNICODE_UTF8\n#cmakedefine01 wxUSE_UTF8_LOCALE_ONLY\n\n/*\n   Use GStreamer for Unix.\n\n   Default is 0 as this requires a lot of dependencies which might not be\n   available.\n\n   Recommended setting: 1 (wxMediaCtrl won't work by default without it).\n */\n#cmakedefine01 wxUSE_GSTREAMER\n\n#cmakedefine01 wxUSE_GSTREAMER_PLAYER\n\n/*\n   Use XTest extension to implement wxUIActionSimulator?\n\n   Default is 1, it is set to 0 if the necessary headers/libraries are not\n   found by configure.\n\n   Recommended setting: 1, wxUIActionSimulator won't work in wxGTK3 without it.\n */\n#cmakedefine01 wxUSE_XTEST\n\n/* --- start MSW options --- */\n\n\n#define wxUSE_GRAPHICS_GDIPLUS wxUSE_GRAPHICS_CONTEXT\n\n#if defined(_MSC_VER) && _MSC_VER >= 1600\n    #define wxUSE_GRAPHICS_DIRECT2D wxUSE_GRAPHICS_CONTEXT\n#else\n    #cmakedefine01 wxUSE_GRAPHICS_DIRECT2D\n#endif\n\n#if defined(_MSC_VER) || defined(__MINGW64_VERSION_MAJOR)\n    #cmakedefine01 wxUSE_WEBREQUEST_WINHTTP\n#else\n    #cmakedefine01 wxUSE_WEBREQUEST_WINHTTP\n#endif\n\n\n#cmakedefine01 wxUSE_OLE\n\n#cmakedefine01 wxUSE_OLE_AUTOMATION\n\n#cmakedefine01 wxUSE_ACTIVEX\n\n#if defined(_MSC_VER) && _MSC_VER >= 1700 && !defined(_USING_V110_SDK71_)\n    #cmakedefine01 wxUSE_WINRT\n#else\n    #cmakedefine01 wxUSE_WINRT\n#endif\n\n#cmakedefine01 wxUSE_DC_CACHEING\n\n#cmakedefine01 wxUSE_WXDIB\n\n#cmakedefine01 wxUSE_POSTSCRIPT_ARCHITECTURE_IN_MSW\n\n#cmakedefine01 wxUSE_REGKEY\n\n#cmakedefine01 wxUSE_RICHEDIT\n\n#cmakedefine01 wxUSE_RICHEDIT2\n\n#cmakedefine01 wxUSE_OWNER_DRAWN\n\n#cmakedefine01 wxUSE_TASKBARICON_BALLOONS\n\n#cmakedefine01 wxUSE_TASKBARBUTTON\n\n#cmakedefine01 wxUSE_UXTHEME\n\n#cmakedefine01 wxUSE_INKEDIT\n\n#cmakedefine01 wxUSE_INICONF\n\n#cmakedefine01 wxUSE_WINSOCK2\n\n\n#cmakedefine01 wxUSE_DATEPICKCTRL_GENERIC\n\n#cmakedefine01 wxUSE_TIMEPICKCTRL_GENERIC\n\n\n#if defined(__VISUALC__) || defined(__MINGW64_TOOLCHAIN__)\n    #cmakedefine01 wxUSE_DBGHELP\n#else\n    #cmakedefine01 wxUSE_DBGHELP\n#endif\n\n#cmakedefine01 wxUSE_CRASHREPORT\n/* --- end MSW options --- */\n\n/*\n * Define if your compiler has C99 va_copy\n */\n#cmakedefine HAVE_VA_COPY 1\n\n/*\n * Define if va_list type is an array\n */\n#cmakedefine VA_LIST_IS_ARRAY 1\n\n/*\n * Define if you don't want variadic macros to be used even if they are\n * supported by the compiler.\n */\n#cmakedefine wxNO_VARIADIC_MACROS\n\n/*\n * Define if your compiler has std::wstring\n */\n#cmakedefine HAVE_STD_WSTRING 1\n/*\n * Define if your compiler has compliant std::string::compare\n */\n#cmakedefine HAVE_STD_STRING_COMPARE 1\n/*\n * Define if your compiler has <hash_map>\n */\n#cmakedefine HAVE_HASH_MAP 1\n/*\n * Define if your compiler has <ext/hash_map>\n */\n#cmakedefine HAVE_EXT_HASH_MAP 1\n/*\n * Define if your compiler has std::hash_map/hash_set\n */\n#cmakedefine HAVE_STD_HASH_MAP 1\n/*\n * Define if your compiler has __gnu_cxx::hash_map/hash_set\n */\n#cmakedefine HAVE_GNU_CXX_HASH_MAP 1\n\n/*\n * Define if your compiler has std::unordered_map\n */\n#cmakedefine HAVE_STD_UNORDERED_MAP 1\n\n/*\n * Define if your compiler has std::unordered_set\n */\n#cmakedefine HAVE_STD_UNORDERED_SET 1\n\n/*\n * Define if your compiler has std::tr1::unordered_map\n */\n#cmakedefine HAVE_TR1_UNORDERED_MAP 1\n\n/*\n * Define if your compiler has std::tr1::unordered_set\n */\n#cmakedefine HAVE_TR1_UNORDERED_SET 1\n\n/*\n * Define if your compiler has <tr1/type_traits>\n */\n#cmakedefine HAVE_TR1_TYPE_TRAITS 1\n\n/*\n * Define if your compiler has <type_traits>\n */\n#cmakedefine HAVE_TYPE_TRAITS 1\n\n/*\n * Define if the compiler supports simple visibility declarations.\n */\n#cmakedefine HAVE_VISIBILITY 1\n\n/*\n * Define if the compiler supports GCC's atomic memory access builtins\n */\n#cmakedefine HAVE_GCC_ATOMIC_BUILTINS 1\n\n/*\n * Define if compiler's visibility support in libstdc++ is broken\n */\n#cmakedefine HAVE_BROKEN_LIBSTDCXX_VISIBILITY\n\n/*\n * The built-in regex supports advanced REs in additional to POSIX's basic\n * and extended. Your system regex probably won't support this, and in this\n * case WX_NO_REGEX_ADVANCED should be defined.\n */\n#cmakedefine WX_NO_REGEX_ADVANCED\n/*\n * On GNU systems use re_search instead of regexec, since the latter does a\n * strlen on the search text affecting the performance of some operations.\n */\n#cmakedefine HAVE_RE_SEARCH\n/*\n * Use SDL for audio (Unix)\n */\n#cmakedefine01 wxUSE_LIBSDL\n\n/*\n * Compile sound backends as plugins\n */\n#cmakedefine01 wxUSE_PLUGINS\n\n/*\n * Use GTK print for printing under GTK+ 2.10+\n */\n#cmakedefine01 wxUSE_GTKPRINT\n/*\n * Use GNOME VFS for MIME types\n */\n#cmakedefine01 wxUSE_LIBGNOMEVFS\n/*\n * Use libnotify library.\n */\n#cmakedefine01 wxUSE_LIBNOTIFY\n/*\n * Use libnotify 0.7+ API.\n */\n#cmakedefine01 wxUSE_LIBNOTIFY_0_7\n/*\n * Use libXpm\n */\n#cmakedefine01 wxHAVE_LIB_XPM\n/*\n * Define if you have pthread_cleanup_push/pop()\n */\n#cmakedefine wxHAVE_PTHREAD_CLEANUP 1\n/*\n * Define if compiler has __thread keyword.\n */\n#cmakedefine HAVE___THREAD_KEYWORD 1\n/*\n * Define if large (64 bit file offsets) files are supported.\n */\n#cmakedefine HAVE_LARGEFILE_SUPPORT 1\n\n/*\n * Use OpenGL\n */\n#cmakedefine01 wxUSE_OPENGL\n\n/*\n * Use MS HTML Help via libmspack (Unix)\n */\n#cmakedefine01 wxUSE_LIBMSPACK\n\n/*\n * Matthews garbage collection (used for MrEd?)\n */\n#cmakedefine01 WXGARBAGE_COLLECTION_ON\n\n/*\n * wxWebKitCtrl\n */\n#cmakedefine01 wxUSE_WEBKIT\n\n/*\n * The const keyword is being introduced more in wxWindows.\n * You can use this setting to maintain backward compatibility.\n * If 0: will use const wherever possible.\n * If 1: will use const only where necessary\n *       for precompiled headers to work.\n * If 2: will be totally backward compatible, but precompiled\n *       headers may not work and program size will be larger.\n */\n#define CONST_COMPATIBILITY 0\n\n/*\n * use the session manager to detect KDE/GNOME\n */\n#cmakedefine01 wxUSE_DETECT_SM\n\n\n/* define with the name of timezone variable */\n#cmakedefine WX_TIMEZONE @WX_TIMEZONE@\n\n/* The type of 3rd argument to getsockname() - usually size_t or int */\n#cmakedefine WX_SOCKLEN_T @WX_SOCKLEN_T@\n\n/* The type of 5th argument to getsockopt() - usually size_t or int */\n#cmakedefine SOCKOPTLEN_T @SOCKOPTLEN_T@\n\n/* The type of statvfs(2) argument */\n#cmakedefine WX_STATFS_T @WX_STATFS_T@\n\n/* The signal handler prototype */\n#define wxTYPE_SA_HANDLER @wxTYPE_SA_HANDLER@\n\n/* gettimeofday() usually takes 2 arguments, but some really old systems might\n * have only one, in which case define WX_GETTIMEOFDAY_NO_TZ */\n#cmakedefine WX_GETTIMEOFDAY_NO_TZ 1\n\n/* struct tm doesn't always have the tm_gmtoff field, define this if it does */\n#cmakedefine WX_GMTOFF_IN_TM 1\n\n/* check if nl_langinfo() can be called with argument _NL_TIME_FIRST_WEEKDAY */\n#cmakedefine HAVE_NL_TIME_FIRST_WEEKDAY 1\n\n/* Define if you have poll(2) function */\n#cmakedefine HAVE_POLL 1\n\n/* Define if you have pw_gecos field in struct passwd */\n#cmakedefine HAVE_PW_GECOS 1\n\n/* Define if you have __cxa_demangle() in <cxxabi.h> */\n#cmakedefine HAVE_CXA_DEMANGLE 1\n\n/* Define if you have dlopen() */\n#cmakedefine HAVE_DLOPEN 1\n\n/* Define if you have gettimeofday() */\n#cmakedefine HAVE_GETTIMEOFDAY 1\n\n/* Define if fsync() is available */\n#cmakedefine HAVE_FSYNC 1\n\n/* Define if round() is available */\n#cmakedefine HAVE_ROUND 1\n\n/* Define if you have ftime() */\n#cmakedefine HAVE_FTIME 1\n\n/* Define if you have nanosleep() */\n#cmakedefine HAVE_NANOSLEEP 1\n\n/* Define if you have sched_yield */\n#cmakedefine HAVE_SCHED_YIELD 1\n\n/* Define if you have pthread_mutexattr_t and functions to work with it */\n#cmakedefine HAVE_PTHREAD_MUTEXATTR_T 1\n\n/* Define if you have pthread_mutexattr_settype() declaration */\n#cmakedefine HAVE_PTHREAD_MUTEXATTR_SETTYPE_DECL 1\n\n/* Define if you have PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP */\n#cmakedefine HAVE_PTHREAD_RECURSIVE_MUTEX_INITIALIZER 1\n\n/* Define if you have pthread_cancel */\n#cmakedefine HAVE_PTHREAD_CANCEL 1\n\n/* Define if you have pthread_mutex_timedlock */\n#cmakedefine HAVE_PTHREAD_MUTEX_TIMEDLOCK 1\n\n/* Define if you have pthread_attr_setstacksize */\n#cmakedefine HAVE_PTHREAD_ATTR_SETSTACKSIZE 1\n\n/* Define if you have snprintf() */\n#cmakedefine HAVE_SNPRINTF 1\n\n/* Define if you have snprintf() declaration in the header */\n#cmakedefine HAVE_SNPRINTF_DECL 1\n\n/* Define if you have a snprintf() which supports positional arguments\n   (defined in the unix98 standard) */\n#cmakedefine HAVE_UNIX98_PRINTF 1\n\n/* define if you have statfs function */\n#cmakedefine HAVE_STATFS 1\n\n/* define if you have statfs prototype */\n#cmakedefine HAVE_STATFS_DECL 1\n\n/* define if you have statvfs function */\n#cmakedefine HAVE_STATVFS 1\n\n/* Define if you have strtoull() and strtoll() */\n#cmakedefine HAVE_STRTOULL 1\n\n/* Define if you have all functions to set thread priority */\n#cmakedefine HAVE_THREAD_PRIORITY_FUNCTIONS 1\n\n/* Define if you have vsnprintf() */\n#cmakedefine HAVE_VSNPRINTF 1\n\n/* Define if you have vsnprintf() declaration in the header */\n#cmakedefine HAVE_VSNPRINTF_DECL 1\n\n/* Define if you have a _broken_ vsnprintf() declaration in the header,\n * with 'char*' for the 3rd parameter instead of 'const char*' */\n#cmakedefine HAVE_BROKEN_VSNPRINTF_DECL 1\n\n/* Define if you have a _broken_ vsscanf() declaration in the header,\n * with 'char*' for the 1st parameter instead of 'const char*' */\n#cmakedefine HAVE_BROKEN_VSSCANF_DECL 1\n\n/* Define if you have vsscanf() */\n#cmakedefine HAVE_VSSCANF 1\n\n/* Define if you have vsscanf() declaration in the header */\n#cmakedefine HAVE_VSSCANF_DECL 1\n\n/* Define if you have usleep() */\n#cmakedefine HAVE_USLEEP 1\n\n/* Define if you have wcscasecmp() function  */\n#cmakedefine HAVE_WCSCASECMP 1\n\n/* Define if you have wcsncasecmp() function  */\n#cmakedefine HAVE_WCSNCASECMP 1\n\n/* Define if you have wcslen function  */\n#cmakedefine HAVE_WCSLEN 1\n\n/* Define if you have wcsdup function  */\n#cmakedefine HAVE_WCSDUP 1\n\n/* Define if you have wcsftime() function  */\n#cmakedefine HAVE_WCSFTIME 1\n\n/* Define if you have strnlen() function */\n#cmakedefine HAVE_STRNLEN 1\n\n/* Define if you have wcsnlen() function */\n#cmakedefine HAVE_WCSNLEN 1\n\n/* Define if you have wcstoull() and wcstoll() */\n#cmakedefine HAVE_WCSTOULL 1\n\n/* The number of bytes in a wchar_t.  */\n@SIZEOF_WCHAR_T_CODE@\n\n/* The number of bytes in a int.  */\n@SIZEOF_INT_CODE@\n\n/* The number of bytes in a pointer.  */\n#define SIZEOF_VOID_P @CMAKE_SIZEOF_VOID_P@\n\n/* The number of bytes in a long.  */\n@SIZEOF_LONG_CODE@\n\n/* The number of bytes in a long long.  */\n@SIZEOF_LONG_LONG_CODE@\n\n/* The number of bytes in a short.  */\n@SIZEOF_SHORT_CODE@\n\n/* The number of bytes in a size_t.  */\n@SIZEOF_SIZE_T_CODE@\n\n/* Define if size_t on your machine is the same type as unsigned int. */\n#cmakedefine wxSIZE_T_IS_UINT 1\n\n/* Define if size_t on your machine is the same type as unsigned long. */\n#cmakedefine wxSIZE_T_IS_ULONG 1\n\n/* Define if wchar_t is distinct type in your compiler. */\n#cmakedefine wxWCHAR_T_IS_REAL_TYPE 1\n\n/* Define if you have the dladdr function.  */\n#cmakedefine HAVE_DLADDR 1\n\n/* Define if you have Posix fnctl() function. */\n#cmakedefine HAVE_FCNTL 1\n\n/* Define if you have BSD flock() function. */\n#cmakedefine HAVE_FLOCK 1\n\n/* Define if you have getaddrinfo function. */\n#cmakedefine HAVE_GETADDRINFO 1\n\n/* Define if you have a gethostbyname_r function taking 6 arguments. */\n#cmakedefine HAVE_FUNC_GETHOSTBYNAME_R_6 1\n\n/* Define if you have a gethostbyname_r function taking 5 arguments. */\n#cmakedefine HAVE_FUNC_GETHOSTBYNAME_R_5 1\n\n/* Define if you have a gethostbyname_r function taking 3 arguments. */\n#cmakedefine HAVE_FUNC_GETHOSTBYNAME_R_3 1\n\n/* Define if you only have a gethostbyname function */\n#cmakedefine HAVE_GETHOSTBYNAME 1\n\n/* Define if you have the gethostname function.  */\n#cmakedefine HAVE_GETHOSTNAME 1\n\n/* Define if you have a getservbyname_r function taking 6 arguments. */\n#cmakedefine HAVE_FUNC_GETSERVBYNAME_R_6 1\n\n/* Define if you have a getservbyname_r function taking 5 arguments. */\n#cmakedefine HAVE_FUNC_GETSERVBYNAME_R_5 1\n\n/* Define if you have a getservbyname_r function taking 4 arguments. */\n#cmakedefine HAVE_FUNC_GETSERVBYNAME_R_4 1\n\n/* Define if you only have a getservbyname function */\n#cmakedefine HAVE_GETSERVBYNAME 1\n\n/* Define if you have the gmtime_r function.  */\n#cmakedefine HAVE_GMTIME_R 1\n\n/* Define if you have the inet_addr function.  */\n#cmakedefine HAVE_INET_ADDR 1\n\n/* Define if you have the inet_aton function.  */\n#cmakedefine HAVE_INET_ATON 1\n\n/* Define if you have the localtime_r function.  */\n#cmakedefine HAVE_LOCALTIME_R 1\n\n/* Define if you have the mktemp function.  */\n#cmakedefine HAVE_MKTEMP 1\n\n/* Define if you have the mkstemp function.  */\n#cmakedefine HAVE_MKSTEMP 1\n\n/* Define if you have the putenv function.  */\n#cmakedefine HAVE_PUTENV 1\n\n/* Define if you have the setenv function.  */\n#cmakedefine HAVE_SETENV 1\n\n/* Define if you have strtok_r function. */\n#cmakedefine HAVE_STRTOK_R 1\n\n/* Define if you have thr_setconcurrency function */\n#cmakedefine HAVE_THR_SETCONCURRENCY 1\n\n/* Define if you have pthread_setconcurrency function */\n#cmakedefine HAVE_PTHREAD_SET_CONCURRENCY 1\n\n/* Define if you have the uname function.  */\n#cmakedefine HAVE_UNAME 1\n\n/* Define if you have the unsetenv function.  */\n#cmakedefine HAVE_UNSETENV 1\n\n/* Define if you have the <X11/XKBlib.h> header file.  */\n#cmakedefine HAVE_X11_XKBLIB_H 1\n\n/* Define if you have the <X11/extensions/xf86vmode.h> header file.  */\n#cmakedefine HAVE_X11_EXTENSIONS_XF86VMODE_H 1\n\n/* Define if you have the <sched.h> header file.  */\n#cmakedefine HAVE_SCHED_H 1\n\n/* Define if you have the <unistd.h> header file.  */\n#cmakedefine HAVE_UNISTD_H 1\n\n/* Define if you have the <fcntl.h> header file.  */\n#cmakedefine HAVE_FCNTL_H 1\n\n/* Define if you have the <wchar.h> header file.  */\n#cmakedefine HAVE_WCHAR_H 1\n\n/* Define if you have the <wcstr.h> header file.  */\n#cmakedefine HAVE_WCSTR_H 1\n\n/* Define if you have <widec.h> (Solaris only) */\n#cmakedefine HAVE_WIDEC_H 1\n\n/* Define if you have the <iconv.h> header file and iconv() symbol.  */\n#cmakedefine HAVE_ICONV 1\n\n/* Define as \"const\" if the declaration of iconv() needs const.  */\n#cmakedefine ICONV_CONST @ICONV_CONST@\n\n/* Define if you have the <langinfo.h> header file.  */\n#cmakedefine HAVE_LANGINFO_H 1\n\n/* Define if you have the <sys/soundcard.h> header file. */\n#cmakedefine HAVE_SYS_SOUNDCARD_H 1\n\n/* Define if you have wcsrtombs() function */\n#cmakedefine HAVE_WCSRTOMBS 1\n\n/* Define this if you have putws() */\n#cmakedefine HAVE_PUTWS 1\n\n/* Define this if you have fputws() */\n#cmakedefine HAVE_FPUTWS 1\n\n/* Define this if you have wprintf() and related functions */\n#cmakedefine HAVE_WPRINTF 1\n\n/* Define this if you have vswprintf() and related functions */\n#cmakedefine HAVE_VSWPRINTF 1\n\n/* Define this if you have _vsnwprintf */\n#cmakedefine HAVE__VSNWPRINTF 1\n\n/* vswscanf() */\n#cmakedefine HAVE_VSWSCANF 1\n\n/* Define if fseeko and ftello are available.  */\n#cmakedefine HAVE_FSEEKO 1\n\n/* Define this if you are using gtk and gdk contains support for X11R6 XIM */\n#cmakedefine HAVE_XIM 1\n\n/* Define this if you have X11/extensions/shape.h */\n#cmakedefine HAVE_XSHAPE 1\n\n/* Define this if you have type SPBCDATA */\n#cmakedefine HAVE_SPBCDATA 1\n\n/* Define if you have pango_font_family_is_monospace() (Pango >= 1.3.3) */\n#cmakedefine HAVE_PANGO_FONT_FAMILY_IS_MONOSPACE 1\n\n/* Define if you have Pango xft support */\n#cmakedefine HAVE_PANGO_XFT 1\n\n/* Define if you have the <sys/select.h> header file.  */\n#cmakedefine HAVE_SYS_SELECT_H 1\n\n/* Define if you have abi::__forced_unwind in your <cxxabi.h>. */\n#cmakedefine HAVE_ABI_FORCEDUNWIND 1\n\n/* Define if fdopen is available.  */\n#cmakedefine HAVE_FDOPEN 1\n\n/* Define if sysconf is available. */\n#cmakedefine HAVE_SYSCONF 1\n\n/* Define if getpwuid_r is available. */\n#cmakedefine HAVE_GETPWUID_R 1\n\n/* Define if getgrgid_r is available. */\n#cmakedefine HAVE_GETGRGID_R 1\n\n/* Define if setpriority() is available. */\n#cmakedefine HAVE_SETPRIORITY 1\n\n/* Define if xlocale.h header file exists. */\n#cmakedefine HAVE_XLOCALE_H 1\n\n/* Define if locale_t is available */\n#cmakedefine HAVE_LOCALE_T 1\n\n/* Define if you have inotify_xxx() functions. */\n#cmakedefine wxHAS_INOTIFY 1\n\n/* Define if you have kqueu_xxx() functions. */\n#cmakedefine wxHAS_KQUEUE 1\n\n/* -------------------------------------------------------------------------\n   Win32 adjustments section\n   ------------------------------------------------------------------------- */\n\n#ifdef __WIN32__\n\n/* When using an external jpeg library and the Windows headers already define\n * boolean, define to the type used by the jpeg library for boolean.  */\n#cmakedefine wxHACK_BOOLEAN\n\n/* Define if the header pbt.h is missing.  */\n#cmakedefine NEED_PBT_H\n\n#endif /* __WIN32__ */\n\n/* --------------------------------------------------------*\n *  This stuff is static, it doesn't get modified directly\n *  by configure.\n*/\n\n/*\n   define some constants identifying wxWindows version in more details than\n   just the version number\n */\n\n/* wxLogChain class available */\n#cmakedefine wxHAS_LOG_CHAIN\n\n/* define this when wxDC::Blit() respects SetDeviceOrigin() in wxGTK */\n#cmakedefine wxHAS_WORKING_GTK_DC_BLIT\n\n#endif /* __WX_SETUP_H__ */\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/src/unix/dlunix.cpp": "/////////////////////////////////////////////////////////////////////////////\n// Name:        src/unix/dlunix.cpp\n// Purpose:     Unix-specific part of wxDynamicLibrary and related classes\n// Author:      Vadim Zeitlin\n// Modified by:\n// Created:     2005-01-16 (extracted from common/dynlib.cpp)\n// Copyright:   (c) 2000-2005 Vadim Zeitlin <vadim@wxwidgets.org>\n// Licence:     wxWindows licence\n/////////////////////////////////////////////////////////////////////////////\n\n// ============================================================================\n// declarations\n// ============================================================================\n\n// ----------------------------------------------------------------------------\n// headers\n// ----------------------------------------------------------------------------\n\n#include  \"wx/wxprec.h\"\n\n\n#if wxUSE_DYNLIB_CLASS\n\n#include \"wx/dynlib.h\"\n#include \"wx/ffile.h\"\n\n#ifndef WX_PRECOMP\n    #include \"wx/intl.h\"\n    #include \"wx/log.h\"\n#endif\n\n#ifdef HAVE_DLOPEN\n    #include <dlfcn.h>\n#endif\n\n// if some flags are not supported, just ignore them\n#ifndef RTLD_LAZY\n    #define RTLD_LAZY 0\n#endif\n\n#ifndef RTLD_NOW\n    #define RTLD_NOW 0\n#endif\n\n#ifndef RTLD_GLOBAL\n    #define RTLD_GLOBAL 0\n#endif\n\n\n#ifndef HAVE_DLOPEN\n    #error \"Don't know how to load dynamic libraries on this platform!\"\n#endif\n\n// ----------------------------------------------------------------------------\n// constants\n// ----------------------------------------------------------------------------\n\n// ----------------------------------------------------------------------------\n// loading/unloading DLLs\n// ----------------------------------------------------------------------------\n\nwxDllType wxDynamicLibrary::GetProgramHandle()\n{\n   return dlopen(0, RTLD_LAZY);\n}\n\n/* static */\nwxDllType wxDynamicLibrary::RawLoad(const wxString& libname, int flags)\n{\n    wxASSERT_MSG( !(flags & wxDL_NOW) || !(flags & wxDL_LAZY),\n                  wxT(\"wxDL_LAZY and wxDL_NOW are mutually exclusive.\") );\n\n    // we need to use either RTLD_NOW or RTLD_LAZY because if we call dlopen()\n    // with flags == 0 recent versions of glibc just fail the call, so use\n    // RTLD_NOW even if wxDL_NOW was not specified\n    int rtldFlags = flags & wxDL_LAZY ? RTLD_LAZY : RTLD_NOW;\n\n    if ( flags & wxDL_GLOBAL )\n        rtldFlags |= RTLD_GLOBAL;\n\n    return dlopen(libname.fn_str(), rtldFlags);\n}\n\n/* static */\nvoid wxDynamicLibrary::Unload(wxDllType handle)\n{\n    int rc = dlclose(handle);\n\n    if ( rc != 0 )\n        ReportError(_(\"Failed to unload shared library\"));\n}\n\n/* static */\nvoid *wxDynamicLibrary::RawGetSymbol(wxDllType handle, const wxString& name)\n{\n    void *symbol = dlsym(handle, name.fn_str());\n\n    return symbol;\n}\n\n// ----------------------------------------------------------------------------\n// error handling\n// ----------------------------------------------------------------------------\n\n/* static */\nvoid wxDynamicLibrary::ReportError(const wxString& message,\n                                   const wxString& name)\n{\n    wxString msg(message);\n    if ( name.IsEmpty() && msg.Find(\"%s\") == wxNOT_FOUND )\n        msg += \"%s\";\n    // msg needs a %s for the name\n    wxASSERT(msg.Find(\"%s\") != wxNOT_FOUND);\n\n    wxString err(dlerror());\n\n    if ( err.empty() )\n        err = _(\"Unknown dynamic library error\");\n\n    wxLogError(msg + wxT(\": %s\"), name, err);\n}\n\n\n// ----------------------------------------------------------------------------\n// listing loaded modules\n// ----------------------------------------------------------------------------\n\n// wxDynamicLibraryDetails declares this class as its friend, so put the code\n// initializing new details objects here\nclass wxDynamicLibraryDetailsCreator\n{\npublic:\n    // create a new wxDynamicLibraryDetails from the given data\n    static wxDynamicLibraryDetails *\n    New(void *start, void *end, const wxString& path)\n    {\n        wxDynamicLibraryDetails *details = new wxDynamicLibraryDetails;\n        details->m_path = path;\n        details->m_name = path.AfterLast(wxT('/'));\n        details->m_address = start;\n        details->m_length = (char *)end - (char *)start;\n\n        // try to extract the library version from its name\n        const size_t posExt = path.rfind(wxT(\".so\"));\n        if ( posExt != wxString::npos )\n        {\n            if ( path.c_str()[posExt + 3] == wxT('.') )\n            {\n                // assume \"libfoo.so.x.y.z\" case\n                details->m_version.assign(path, posExt + 4, wxString::npos);\n            }\n            else\n            {\n                size_t posDash = path.find_last_of(wxT('-'), posExt);\n                if ( posDash != wxString::npos )\n                {\n                    // assume \"libbar-x.y.z.so\" case\n                    posDash++;\n                    details->m_version.assign(path, posDash, posExt - posDash);\n                }\n            }\n        }\n\n        return details;\n    }\n};\n\n/* static */\nwxDynamicLibraryDetailsArray wxDynamicLibrary::ListLoaded()\n{\n    wxDynamicLibraryDetailsArray dlls;\n\n#ifdef __LINUX__\n    // examine /proc/self/maps to find out what is loaded in our address space\n    wxFFile file(wxT(\"/proc/self/maps\"));\n    if ( file.IsOpened() )\n    {\n        // details of the module currently being parsed\n        wxString pathCur;\n        void *startCur = NULL,\n             *endCur = NULL;\n\n        char path[1024];\n        char buf[1024];\n        while ( fgets(buf, WXSIZEOF(buf), file.fp()) )\n        {\n            // format is: \"start-end perm offset maj:min inode path\", see proc(5)\n            void *start,\n                 *end;\n            switch ( sscanf(buf, \"%p-%p %*4s %*p %*02x:%*02x %*d %1023s\\n\",\n                            &start, &end, path) )\n            {\n                case 2:\n                    // there may be no path column\n                    path[0] = '\\0';\n                    break;\n\n                case 3:\n                    // nothing to do, read everything we wanted\n                    break;\n\n                default:\n                    // chop '\\n'\n                    buf[strlen(buf) - 1] = '\\0';\n                    wxLogDebug(wxT(\"Failed to parse line \\\"%s\\\" in /proc/self/maps.\"),\n                               buf);\n                    continue;\n            }\n\n            wxASSERT_MSG( start >= endCur,\n                          wxT(\"overlapping regions in /proc/self/maps?\") );\n\n            wxString pathNew = wxString::FromAscii(path);\n            if ( pathCur.empty() )\n            {\n                // new module start\n                pathCur = pathNew;\n                startCur = start;\n                endCur = end;\n            }\n            else if ( pathCur == pathNew && endCur == end )\n            {\n                // continuation of the same module in the address space\n                endCur = end;\n            }\n            else // end of the current module\n            {\n                dlls.Add(wxDynamicLibraryDetailsCreator::New(startCur,\n                                                             endCur,\n                                                             pathCur));\n                pathCur.clear();\n            }\n        }\n    }\n#endif // __LINUX__\n\n    return dlls;\n}\n\n\n/* static */\nvoid* wxDynamicLibrary::GetModuleFromAddress(const void* addr, wxString* path)\n{\n#ifdef HAVE_DLADDR\n    Dl_info di = { }; // 0 initialize whatever fields the struct has\n\n    // At least under Solaris dladdr() takes non-const void*.\n    if ( dladdr(const_cast<void*>(addr), &di) == 0 )\n        return NULL;\n\n    if ( path )\n        *path = di.dli_fname;\n\n    return di.dli_fbase;\n#else\n    wxUnusedVar(addr);\n    wxUnusedVar(path);\n#endif // HAVE_DLADDR\n\n    return NULL;\n}\n\n\n#endif // wxUSE_DYNLIB_CLASS\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/include/wx/dynlib.h": "/////////////////////////////////////////////////////////////////////////////\n// Name:        wx/dynlib.h\n// Purpose:     Dynamic library loading classes\n// Author:      Guilhem Lavaux, Vadim Zeitlin, Vaclav Slavik\n// Modified by:\n// Created:     20/07/98\n// Copyright:   (c) 1998 Guilhem Lavaux\n// Licence:     wxWindows licence\n/////////////////////////////////////////////////////////////////////////////\n\n#ifndef _WX_DYNLIB_H__\n#define _WX_DYNLIB_H__\n\n#include \"wx/defs.h\"\n\n#if wxUSE_DYNLIB_CLASS\n\n#include \"wx/string.h\"\n#include \"wx/dynarray.h\"\n\nclass WXDLLIMPEXP_FWD_BASE wxDynamicLibraryDetailsCreator;\n\n// ----------------------------------------------------------------------------\n// conditional compilation\n// ----------------------------------------------------------------------------\n\n#if defined(__WINDOWS__)\n    typedef WXHMODULE           wxDllType;\n#elif defined(HAVE_DLOPEN)\n    #include <dlfcn.h>\n    typedef void               *wxDllType;\n#elif defined(__WXMAC__)\n    #include <CodeFragments.h>\n    typedef CFragConnectionID   wxDllType;\n#else\n    #error \"Dynamic Loading classes can't be compiled on this platform, sorry.\"\n#endif\n\n// ----------------------------------------------------------------------------\n// constants\n// ----------------------------------------------------------------------------\n\nenum wxDLFlags\n{\n    wxDL_LAZY       = 0x00000001,   // resolve undefined symbols at first use\n                                    // (only works on some Unix versions)\n    wxDL_NOW        = 0x00000002,   // resolve undefined symbols on load\n                                    // (default, always the case under Win32)\n    wxDL_GLOBAL     = 0x00000004,   // export extern symbols to subsequently\n                                    // loaded libs.\n    wxDL_VERBATIM   = 0x00000008,   // attempt to load the supplied library\n                                    // name without appending the usual dll\n                                    // filename extension.\n\n    // this flag is obsolete, don't use\n    wxDL_NOSHARE    = 0x00000010,   // load new DLL, don't reuse already loaded\n                                    // (only for wxPluginManager)\n\n    wxDL_QUIET      = 0x00000020,   // don't log an error if failed to load\n\n    // this flag is dangerous, for internal use of wxMSW only, don't use at all\n    // and especially don't use directly, use wxLoadedDLL instead if you really\n    // do need it\n    wxDL_GET_LOADED = 0x00000040,   // Win32 only: return handle of already\n                                    // loaded DLL or NULL otherwise; Unload()\n                                    // should not be called so don't forget to\n                                    // Detach() if you use this function\n\n    wxDL_DEFAULT    = wxDL_NOW      // default flags correspond to Win32\n};\n\nenum wxDynamicLibraryCategory\n{\n    wxDL_LIBRARY,       // standard library\n    wxDL_MODULE         // loadable module/plugin\n};\n\nenum wxPluginCategory\n{\n    wxDL_PLUGIN_GUI,    // plugin that uses GUI classes\n    wxDL_PLUGIN_BASE    // wxBase-only plugin\n};\n\n// ----------------------------------------------------------------------------\n// macros\n// ----------------------------------------------------------------------------\n\n// when loading a function from a DLL you always have to cast the returned\n// \"void *\" pointer to the correct type and, even more annoyingly, you have to\n// repeat this type twice if you want to declare and define a function pointer\n// all in one line\n//\n// this macro makes this slightly less painful by allowing you to specify the\n// type only once, as the first parameter, and creating a variable of this type\n// called \"pfn<name>\" initialized with the \"name\" from the \"dynlib\"\n#define wxDYNLIB_FUNCTION(type, name, dynlib) \\\n    type pfn ## name = (type)(dynlib).GetSymbol(wxT(#name))\n\n\n// a more convenient function replacing wxDYNLIB_FUNCTION above\n//\n// it uses the convention that the type of the function is its name suffixed\n// with \"_t\" but it doesn't define a variable but just assigns the loaded value\n// to it and also allows to pass it the prefix to be used instead of hardcoding\n// \"pfn\" (the prefix can be \"m_\" or \"gs_pfn\" or whatever)\n//\n// notice that this function doesn't generate error messages if the symbol\n// couldn't be loaded, the caller should generate the appropriate message\n#define wxDL_INIT_FUNC(pfx, name, dynlib) \\\n    pfx ## name = (name ## _t)(dynlib).RawGetSymbol(#name)\n\n#ifdef __WINDOWS__\n\n// same as wxDL_INIT_FUNC() but appends 'A' or 'W' to the function name, see\n// wxDynamicLibrary::GetSymbolAorW()\n#define wxDL_INIT_FUNC_AW(pfx, name, dynlib) \\\n    pfx ## name = (name ## _t)(dynlib).GetSymbolAorW(#name)\n\n#endif // __WINDOWS__\n\n// the following macros can be used to redirect a whole library to a class and\n// check at run-time if the library is present and contains all required\n// methods\n//\n// notice that they are supposed to be used inside a class which has \"m_ok\"\n// member variable indicating if the library had been successfully loaded\n\n// helper macros constructing the name of the variable storing the function\n// pointer and the name of its type from the function name\n#define wxDL_METHOD_NAME(name) m_pfn ## name\n#define wxDL_METHOD_TYPE(name) name ## _t\n\n// parameters are:\n//  - rettype: return type of the function, e.g. \"int\"\n//  - name: name of the function, e.g. \"foo\"\n//  - args: function signature in parentheses, e.g. \"(int x, int y)\"\n//  - argnames: the names of the parameters in parentheses, e.g. \"(x, y)\"\n//  - defret: the value to return if the library wasn't successfully loaded\n#define wxDL_METHOD_DEFINE( rettype, name, args, argnames, defret ) \\\n    typedef rettype (* wxDL_METHOD_TYPE(name)) args ; \\\n    wxDL_METHOD_TYPE(name) wxDL_METHOD_NAME(name); \\\n    rettype name args \\\n        { return m_ok ? wxDL_METHOD_NAME(name) argnames : defret; }\n\n#define wxDL_VOIDMETHOD_DEFINE( name, args, argnames ) \\\n    typedef void (* wxDL_METHOD_TYPE(name)) args ; \\\n    wxDL_METHOD_TYPE(name) wxDL_METHOD_NAME(name); \\\n    void name args \\\n        { if ( m_ok ) wxDL_METHOD_NAME(name) argnames ; }\n\n#define wxDL_METHOD_LOAD(lib, name) \\\n    wxDL_METHOD_NAME(name) = \\\n        (wxDL_METHOD_TYPE(name)) lib.GetSymbol(#name, &m_ok); \\\n    if ( !m_ok ) return false\n\n// ----------------------------------------------------------------------------\n// wxDynamicLibraryDetails: contains details about a loaded wxDynamicLibrary\n// ----------------------------------------------------------------------------\n\nclass WXDLLIMPEXP_BASE wxDynamicLibraryDetails\n{\npublic:\n    // ctor, normally never used as these objects are only created by\n    // wxDynamicLibrary::ListLoaded()\n    wxDynamicLibraryDetails() { m_address = NULL; m_length = 0; }\n\n    // get the (base) name\n    wxString GetName() const { return m_name; }\n\n    // get the full path of this object\n    wxString GetPath() const { return m_path; }\n\n    // get the load address and the extent, return true if this information is\n    // available\n    bool GetAddress(void **addr, size_t *len) const\n    {\n        if ( !m_address )\n            return false;\n\n        if ( addr )\n            *addr = m_address;\n        if ( len )\n            *len = m_length;\n\n        return true;\n    }\n\n    // return the version of the DLL (may be empty if no version info)\n    wxString GetVersion() const\n    {\n        return m_version;\n    }\n\nprivate:\n    wxString m_name,\n             m_path,\n             m_version;\n\n    void *m_address;\n    size_t m_length;\n\n    friend class wxDynamicLibraryDetailsCreator;\n};\n\nWX_DECLARE_USER_EXPORTED_OBJARRAY(wxDynamicLibraryDetails,\n                                  wxDynamicLibraryDetailsArray,\n                                  WXDLLIMPEXP_BASE);\n\n// ----------------------------------------------------------------------------\n// wxDynamicLibrary: represents a handle to a DLL/shared object\n// ----------------------------------------------------------------------------\n\nclass WXDLLIMPEXP_BASE wxDynamicLibrary\n{\npublic:\n    // return a valid handle for the main program itself or NULL if back\n    // linking is not supported by the current platform (e.g. Win32)\n    static wxDllType         GetProgramHandle();\n\n    // return the platform standard DLL extension (with leading dot)\n    static wxString GetDllExt(wxDynamicLibraryCategory cat = wxDL_LIBRARY);\n\n    wxDynamicLibrary() : m_handle(NULL) { }\n    wxDynamicLibrary(const wxString& libname, int flags = wxDL_DEFAULT)\n        : m_handle(NULL)\n    {\n        Load(libname, flags);\n    }\n\n    // NOTE: this class is (deliberately) not virtual, do not attempt\n    //       to use it polymorphically.\n    ~wxDynamicLibrary() { Unload(); }\n\n    // return true if the library was loaded successfully\n    bool IsLoaded() const { return m_handle != NULL; }\n\n    // load the library with the given name (full or not), return true if ok\n    bool Load(const wxString& libname, int flags = wxDL_DEFAULT);\n\n    // raw function for loading dynamic libs: always behaves as if\n    // wxDL_VERBATIM were specified and doesn't log error message if the\n    // library couldn't be loaded but simply returns NULL\n    static wxDllType RawLoad(const wxString& libname, int flags = wxDL_DEFAULT);\n\n    // attach to an existing handle\n    void Attach(wxDllType h) { Unload(); m_handle = h; }\n\n    // detach the library object from its handle, i.e. prevent the object from\n    // unloading the library in its dtor -- the caller is now responsible for\n    // doing this\n    wxDllType Detach() { wxDllType h = m_handle; m_handle = NULL; return h; }\n\n    // unload the given library handle (presumably returned by Detach() before)\n    static void Unload(wxDllType handle);\n\n    // unload the library, also done automatically in dtor\n    void Unload() { if ( IsLoaded() ) { Unload(m_handle); m_handle = NULL; } }\n\n    // Return the raw handle from dlopen and friends.\n    wxDllType GetLibHandle() const { return m_handle; }\n\n    // check if the given symbol is present in the library, useful to verify if\n    // a loadable module is our plugin, for example, without provoking error\n    // messages from GetSymbol()\n    bool HasSymbol(const wxString& name) const\n    {\n        bool ok;\n        DoGetSymbol(name, &ok);\n        return ok;\n    }\n\n    // resolve a symbol in a loaded DLL, such as a variable or function name.\n    // 'name' is the (possibly mangled) name of the symbol. (use extern \"C\" to\n    // export unmangled names)\n    //\n    // Since it is perfectly valid for the returned symbol to actually be NULL,\n    // that is not always indication of an error.  Pass and test the parameter\n    // 'success' for a true indication of success or failure to load the\n    // symbol.\n    //\n    // Returns a pointer to the symbol on success, or NULL if an error occurred\n    // or the symbol wasn't found.\n    void *GetSymbol(const wxString& name, bool *success = NULL) const;\n\n    // low-level version of GetSymbol()\n    static void *RawGetSymbol(wxDllType handle, const wxString& name);\n    void *RawGetSymbol(const wxString& name) const\n    {\n        return RawGetSymbol(m_handle, name);\n    }\n\n#ifdef __WINDOWS__\n    // this function is useful for loading functions from the standard Windows\n    // DLLs: such functions have an 'A' (in ANSI build) or 'W' (in Unicode, or\n    // wide character build) suffix if they take string parameters\n    static void *RawGetSymbolAorW(wxDllType handle, const wxString& name)\n    {\n        return RawGetSymbol\n               (\n                handle,\n                name +\n#if wxUSE_UNICODE\n                L'W'\n#else\n                'A'\n#endif\n               );\n    }\n\n    void *GetSymbolAorW(const wxString& name) const\n    {\n        return RawGetSymbolAorW(m_handle, name);\n    }\n#endif // __WINDOWS__\n\n    // return all modules/shared libraries in the address space of this process\n    //\n    // returns an empty array if not implemented or an error occurred\n    static wxDynamicLibraryDetailsArray ListLoaded();\n\n    // return platform-specific name of dynamic library with proper extension\n    // and prefix (e.g. \"foo.dll\" on Windows or \"libfoo.so\" on Linux)\n    static wxString CanonicalizeName(const wxString& name,\n                                     wxDynamicLibraryCategory cat = wxDL_LIBRARY);\n\n    // return name of wxWidgets plugin (adds compiler and version info\n    // to the filename):\n    static wxString\n    CanonicalizePluginName(const wxString& name,\n                           wxPluginCategory cat = wxDL_PLUGIN_GUI);\n\n    // return plugin directory on platforms where it makes sense and empty\n    // string on others:\n    static wxString GetPluginsDirectory();\n\n    // Return the load address of the module containing the given address or\n    // NULL if not found.\n    //\n    // If path output parameter is non-NULL, fill it with the full path to this\n    // module disk file on success.\n    static void* GetModuleFromAddress(const void* addr, wxString* path = NULL);\n\n#ifdef __WINDOWS__\n    // return the handle (HMODULE/HINSTANCE) of the DLL with the given name\n    // and/or containing the specified address: for XP and later systems only\n    // the address is used and the name is ignored but for the previous systems\n    // only the name (which may be either a full path to the DLL or just its\n    // base name, possibly even without extension) is used\n    //\n    // the returned handle reference count is not incremented so it doesn't\n    // need to be freed using FreeLibrary() but it also means that it can\n    // become invalid if the DLL is unloaded\n    static WXHMODULE MSWGetModuleHandle(const wxString& name, void *addr);\n#endif // __WINDOWS__\n\nprotected:\n    // common part of GetSymbol() and HasSymbol()\n    void* DoGetSymbol(const wxString& name, bool* success = NULL) const;\n\n    // log the error after an OS dynamic library function failure\n    static void ReportError(const wxString& msg,\n                            const wxString& name = wxString());\n\n    // the handle to DLL or NULL\n    wxDllType m_handle;\n\n    // no copy ctor/assignment operators (or we'd try to unload the library\n    // twice)\n    wxDECLARE_NO_COPY_CLASS(wxDynamicLibrary);\n};\n\n#ifdef __WINDOWS__\n\n// ----------------------------------------------------------------------------\n// wxLoadedDLL is a MSW-only internal helper class allowing to dynamically bind\n// to a DLL already loaded into the project address space\n// ----------------------------------------------------------------------------\n\nclass wxLoadedDLL : public wxDynamicLibrary\n{\npublic:\n    wxLoadedDLL(const wxString& dllname)\n        : wxDynamicLibrary(dllname, wxDL_GET_LOADED | wxDL_VERBATIM | wxDL_QUIET)\n    {\n    }\n\n    ~wxLoadedDLL()\n    {\n        Detach();\n    }\n};\n\n#endif // __WINDOWS__\n\n// ----------------------------------------------------------------------------\n// Interesting defines\n// ----------------------------------------------------------------------------\n\n#define WXDLL_ENTRY_FUNCTION() \\\nextern \"C\" WXEXPORT const wxClassInfo *wxGetClassFirst(); \\\nconst wxClassInfo *wxGetClassFirst() { \\\n  return wxClassInfo::GetFirst(); \\\n}\n\n#endif // wxUSE_DYNLIB_CLASS\n\n#endif // _WX_DYNLIB_H__\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/src/stc/scintilla/lexers/LexErlang.cxx",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/src/stc/scintilla/lexers/LexCSS.cxx",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/src/stc/scintilla/lexers/LexMatlab.cxx",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/src/stc/scintilla/lexers/LexMMIXAL.cxx",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/src/osx/iphone/AppIcon.appiconset/wx-20.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/src/osx/iphone/AppIcon.appiconset/wx-83.5@2x.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/src/osx/iphone/AppIcon.appiconset/wx-1024.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/src/osx/iphone/AppIcon.appiconset/wx-76@2x.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/src/osx/iphone/AppIcon.appiconset/wx-40@2x.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/src/osx/iphone/AppIcon.appiconset/wx-60@2x.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/src/osx/iphone/AppIcon.appiconset/wx-29.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/src/osx/iphone/AppIcon.appiconset/wx-76.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/src/osx/iphone/AppIcon.appiconset/wx-40.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/src/osx/iphone/AppIcon.appiconset/wx-20@2x.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/src/osx/iphone/AppIcon.appiconset/wx-40@3x.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/src/osx/iphone/AppIcon.appiconset/wx-20@3x.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/src/osx/iphone/AppIcon.appiconset/wx-29@2x.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/src/osx/iphone/AppIcon.appiconset/wx-29@3x.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/src/osx/iphone/AppIcon.appiconset/wx-60@3x.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/src/osx/carbon/wxmac.icns",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/src/msw/version.rc",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/src/motif/mdi/doc/pics/mdi.gif",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/src/motif/mdi/doc/pics/classes.gif",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/src/motif/mdi/doc/pics/winclass.gif",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/include/wx/msw/pntleft.cur",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/include/wx/msw/floppy.ico",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/include/wx/msw/child.ico",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/include/wx/msw/question.ico",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/include/wx/msw/file1.ico",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/include/wx/msw/computer.ico",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/include/wx/msw/roller.cur",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/include/wx/msw/mdi.ico",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/include/wx/msw/cdrom.ico",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/include/wx/msw/drive.ico",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/include/wx/msw/blank.cur",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/include/wx/msw/folder1.ico",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/include/wx/msw/std.ico",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/include/wx/msw/pntright.cur",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/include/wx/msw/bullseye.cur",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/include/wx/msw/csquery.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/include/wx/msw/cross.cur",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/include/wx/msw/colours.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/include/wx/msw/hand.cur",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/include/wx/msw/removble.ico",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/include/wx/msw/pbrush.cur",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/include/wx/msw/folder2.ico",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/include/wx/msw/magnif1.cur",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/include/wx/msw/pencil.cur",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/.git/objects/pack/pack-90e65162cb0720beeb997d03996ac32bc170fafe.idx",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/.git/objects/pack/pack-90e65162cb0720beeb997d03996ac32bc170fafe.pack",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/utils/screenshotgen/src/bitmaps/wxwin32x32.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/utils/screenshotgen/src/bitmaps/throbber.gif",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/utils/screenshotgen/src/bitmaps/dropbutp.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/utils/screenshotgen/src/bitmaps/sound.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/utils/screenshotgen/src/bitmaps/bell.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/utils/screenshotgen/src/bitmaps/dropbuth.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/utils/screenshotgen/src/bitmaps/dropbutn.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/utils/helpview/src/test.zip",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/utils/helpview/src/helpview.ico",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/utils/emulator/src/emulator.ico",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/utils/emulator/src/emulator.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/utils/emulator/src/mondrian.ico",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/utils/emulator/src/bluegradient.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/utils/emulator/src/ipaq01.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/utils/emulator/artwork/ipaq01.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/utils/emulator/artwork/ipaq02.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/utils/emulator/docs/screen01.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/utils/emulator/docs/screen02.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/utils/wxrc/mondrian.ico",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/tests/horse.pnm",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/tests/horse.ico",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/tests/horse.tif",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/tests/horse.ani",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/tests/horse.tga",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/tests/horse.gif",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/tests/horse.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/tests/horse.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/tests/horse.cur",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/tests/horse.pcx",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/tests/horse.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/tests/image/cross_bilinear_256x256.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/tests/image/horse_rle8.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/tests/image/horse_grey_flipped.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/tests/image/horse_bilinear_150x150.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/tests/image/horse_rle4.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/tests/image/horse_box_average_50x50.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/tests/image/cross_box_average_256x256.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/tests/image/horse_bicubic_100x100.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/tests/image/horse_box_average_100x100.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/tests/image/horse_rle4_flipped.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/tests/image/paste_input_black.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/tests/image/horse_rle8_flipped.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/tests/image/horse_bicubic_300x300.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/tests/image/wx.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/tests/image/cross_nearest_neighb_256x256.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/tests/image/horse_bilinear_300x300.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/tests/image/horse_bilinear_100x100.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/tests/image/paste_input_background.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/tests/image/horse_bicubic_150x150.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/tests/image/horse_grey.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/tests/image/horse_bilinear_50x50.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/tests/image/horse_bicubic_50x50.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/tests/image/horse_box_average_150x150.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/tests/image/wx.ico",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/tests/image/paste_result_no_background_square_over_circle.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/tests/image/cross_bicubic_256x256.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/tests/image/horse_box_average_300x300.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/tests/image/paste_input_overlay_transparent_border_semitransparent_circle.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/tests/image/paste_result_background_plus_overlay_transparent_border_opaque_square.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/tests/image/paste_result_background_plus_overlay_transparent_border_semitransparent_square.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/tests/image/paste_result_background_plus_circle_plus_square.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/tests/image/paste_input_overlay_transparent_border_opaque_square.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/tests/image/paste_input_overlay_transparent_border_semitransparent_square.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/tests/drawing/references/image_test_image_cairo-1.8_2_ref.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/tests/drawing/references/image_test_image_cg-10.5_2_ref.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/tests/drawing/references/image_test_image_gdiplus-6.1_2_ref.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/tests/intl/intltest.cpp",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/tests/intl/ja/internat.mo",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/tests/intl/fr/internat.mo",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/tests/fuzz/corpus/zip/doc.zip",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/tests/fuzz/corpus/zip/test.zip",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/tests/fuzz/corpus/zip/pages.zip",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/demos/forty/cards.ico",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/demos/poem/corner1.ico",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/demos/poem/corner4.ico",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/demos/poem/wxpoem.ico",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/demos/poem/corner2.ico",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/demos/poem/corner3.ico",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/demos/life/mondrian.ico",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/demos/life/bitmaps/open.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/demos/life/bitmaps/zoomout.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/demos/life/bitmaps/center.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/demos/life/bitmaps/zoomin.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/demos/life/bitmaps/reset.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/demos/life/bitmaps/info.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/demos/life/bitmaps/south.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/demos/life/bitmaps/east.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/demos/life/bitmaps/stop.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/demos/life/bitmaps/play.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/demos/life/bitmaps/north.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/demos/life/bitmaps/west.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/demos/life/bitmaps/life.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/demos/bombs/bombs.ico",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/art/wxwin32x32.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/art/wxwin16x16.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/art/wxwin.ico",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/sample.ico",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/animate/hourglass.ani",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/animate/throbber.gif",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/grid/bitmap1.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/grid/bitmap2.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/dnd/dnd_move.cur",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/dnd/dnd_none.cur",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/dnd/dnd_copy.cur",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/dnd/wxwin.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/opengl/isosurf/isosurf.dat.gz",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/opengl/penguin/penguin.dxf.gz",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/internat/ja/internat.mo",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/internat/ar/internat.mo",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/internat/ka/internat.mo",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/internat/ru/internat.mo",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/internat/cs/internat.mo",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/internat/fr/internat.mo",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/internat/de/internat.mo",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/internat/it/internat.mo",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/internat/pl/internat.mo",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/internat/bg/internat.mo",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/internat/sv/internat.mo",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/internat/ja_JP.EUC-JP/internat.mo",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/sashtest/sashtest.ico",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/shaped/star.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/regtest/value2.ico",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/regtest/key3.ico",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/regtest/value1.ico",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/regtest/key2.ico",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/regtest/registry.ico",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/regtest/key1.ico",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/html/printing/logo6.gif",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/html/about/data/logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/html/help/helpfiles/testing.hhp",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/html/test/pic2.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/html/test/8859_2.htm",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/html/test/imagemap.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/html/test/foo.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/html/test/cp1250.htm",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/html/test/i18n.gif",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/html/test/pic.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/html/helpview/test.zip",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/html/zip/pages.zip",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/ownerdrw/sound.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/ownerdrw/nosound.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/ownerdrw/sound.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/ownerdrw/bell.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/ownerdrw/info.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/ownerdrw/info_mono.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/ownerdrw/nosound.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/image/horse.pnm",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/image/horse.ico",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/image/toucan.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/image/horse.tif",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/image/horse.tga",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/image/horse_rg.pnm",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/image/horse.gif",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/image/horse3.ani",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/image/horse.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/image/cursor.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/image/horse.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/image/horse.cur",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/image/cmyk.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/image/horse.pcx",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/image/horse.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/drawing/image.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/drawing/pat36.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/drawing/pat35.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/drawing/mask.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/drawing/pat4.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/svg/SVGlogo24.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/mdi/chart.ico",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/listctrl/bitmaps/small1.ico",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/listctrl/bitmaps/toolchec.ico",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/listctrl/bitmaps/toolchar.ico",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/listctrl/bitmaps/tooltodo.ico",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/listctrl/bitmaps/tooldata.ico",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/listctrl/bitmaps/tooltime.ico",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/listctrl/bitmaps/toolnote.ico",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/listctrl/bitmaps/toolbrai.ico",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/listctrl/bitmaps/toolword.ico",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/listctrl/bitmaps/toolgame.ico",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/help/back.gif",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/help/doc.zip",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/help/doc.chm",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/help/doc.hlp",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/help/bullet.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/help/forward.gif",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/help/up.gif",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/help/contents.gif",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/help/doc/icon2.gif",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/help/doc/logo.gif",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/help/doc/icon1.gif",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/help/doc/down.gif",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/toolbar/bitmaps/open.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/toolbar/bitmaps/paste.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/toolbar/bitmaps/new.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/toolbar/bitmaps/print.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/toolbar/bitmaps/save.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/toolbar/bitmaps/help.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/toolbar/bitmaps/copy.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/toolbar/bitmaps/page.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/toolbar/bitmaps/cut.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/toolbar/bitmaps/preview.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/joytest/buttonpress.wav",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/minimal/sample.icns",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/mfc/mfctest.ico",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/docview/chart.icns",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/docview/chart.ico",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/docview/doc.icns",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/docview/notepad.ico",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/docview/notepad.icns",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/docview/doc.ico",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/splash/press.mpg",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/splash/splash.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/dragimag/shape02.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/dragimag/shape01.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/dragimag/dragicon.ico",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/dragimag/shape03.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/dragimag/backgrnd.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/sound/9000g.wav",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/sound/doggrowl.wav",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/sound/tinkalink2.wav",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/sound/cuckoo.wav",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/combo/dropbutp.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/combo/dropbuth.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/combo/dropbutn.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/xrc/rc/filesave.gif",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/xrc/rc/throbber.gif",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/xrc/rc/update.gif",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/xrc/rc/wxbanner.gif",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/xrc/rc/quotes.gif",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/xrc/rc/fuzzy.gif",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/xrc/rc/fileopen.gif",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/samples/font/wxprivate.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-dataviewctrl-msw.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-collapsiblepane-mac.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/main_wxlogo.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-togglebutton-msw.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-checklistbox-mac.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-genericdirctrl-msw.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/overview_unicode_codes.dia",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/overview_sizer_07.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-combobox-mac.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-spinbutton-gtk.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-listbook-mac.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-radiobox-gtk.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-statictext-msw.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/overview_events_chain.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-slider-mac.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-colourpickerctrl-mac.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-fontpickerctrl-mac.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-listctrl-msw.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-animationctrl-msw.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-slider-msw.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-filectrl-mac.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-radiobutton-msw.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-fontpickerctrl-gtk.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-slider-gtk.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-staticbitmap-msw.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-togglebutton-mac.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-activityindicator-gtk.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-textctrl-gtk.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/overview_events_winstack.dia",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-filectrl-gtk.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-ownerdrawncombobox-gtk.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-activityindicator-mac.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-datepickerctrl-gtk.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-collapsiblepane-gtk.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-treectrl-msw.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-listctrl-mac.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-datepickerctrl-msw.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-datepickerctrl-mac.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-combobox-msw.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/overview_sizer_05.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-commandlinkbutton-msw.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-checkbox-mac.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-animationctrl-gtk.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-bitmapcombobox-gtk.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/overview_unicode_codes.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/overview_sizer_04.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-filectrl-msw.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-staticbox-mac.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-searchctrl-gtk.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-calendarctrl-msw.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-radiobox-msw.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/overview_sizer_03.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-choice-mac.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-dirpickerctrl-mac.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-notebook-msw.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-commandlinkbutton-mac.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-choicebook-gtk.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-richtextctrl-mac.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/htmlcell_descent.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/evthandler_unlink_before.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/overview_highdpi_text_72.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-timepickerctrl-msw.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/main_wxlogo.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-propertygrid-gtk.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-bitmapbutton-gtk.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/overview_sizer_10.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-treectrl-gtk.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/drawing-addarctopoint.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/evthandler_unlink_before.dia",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-dirpickerctrl-msw.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-listbox-msw.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-bitmapbutton-msw.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/overview_splitter_3d.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/evthandler_unlink_after.dia",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-richtextctrl-gtk.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-activityindicator-msw.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-dirpickerctrl-gtk.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/htmlcontcell_alignv.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-propertygrid-mac.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-scrollbar-gtk.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/htmlwin_border.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-staticbox-gtk.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-ownerdrawncombobox-mac.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/overview_sizer_06.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/htmlcontcell_indent.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-button-msw.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-textctrl-mac.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-calendarctrl-mac.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-comboctrl-gtk.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-richtooltip-msw.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-commandlinkbutton-gtk.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-radiobutton-gtk.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-listbook-msw.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-gauge-gtk.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-searchctrl-msw.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-choice-gtk.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-richtooltip-mac.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-checklistbox-gtk.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/overview_wxstring_encoding.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-dataviewtreectrl-msw.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-staticbitmap-gtk.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-fontpickerctrl-msw.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-spinctrldouble-mac.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-statictext-gtk.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/overview_html_hello.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-togglebutton-gtk.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-gauge-mac.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-colourpickerctrl-msw.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-choicebook-msw.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/overview_html_contbox.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-bitmapcombobox-mac.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-hyperlinkctrl-gtk.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-comboctrl-msw.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-dataviewctrl-mac.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-animationctrl-mac.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/evthandler_unlink_after.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-button-gtk.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-listctrl-gtk.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-bitmapcombobox-msw.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-choice-msw.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-staticbox-msw.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-genericdirctrl-gtk.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-listbox-gtk.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-treectrl-mac.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/overview_highdpi_text_144.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-filepickerctrl-mac.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-radiobutton-mac.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-ownerdrawncombobox-msw.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-colourpickerctrl-gtk.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-combobox-gtk.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-spinctrldouble-msw.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-spinctrl-msw.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-dataviewtreectrl-gtk.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-listbook-gtk.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-notebook-gtk.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-radiobox-mac.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-timepickerctrl-gtk.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-calendarctrl-gtk.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-dataviewtreectrl-mac.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-listbox-mac.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-hyperlinkctrl-msw.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-scrollbar-msw.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/overview_sizer_01.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-propertygrid-msw.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-scrollbar-mac.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-collapsiblepane-msw.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/overview_sizer_00.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/overview_unicode_glyphs.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-searchctrl-mac.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/overview_events_chain.dia",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-filepickerctrl-gtk.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-spinctrl-mac.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-choicebook-mac.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/overview_sizer_08.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-checkbox-gtk.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/overview_sizer_02.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-filepickerctrl-msw.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-bitmapbutton-mac.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/overview_events_winstack.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-spinctrl-gtk.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-checklistbox-msw.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/overview_sizer_09.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-spinbutton-msw.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-staticbitmap-mac.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-richtooltip-gtk.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-hyperlinkctrl-mac.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-genericdirctrl-mac.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-timepickerctrl-mac.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-notebook-mac.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-dataviewctrl-gtk.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-richtextctrl-msw.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-statictext-mac.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/overview_html_cont.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/overview_sizer_11.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/overview_wxstring_encoding.dia",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-spinbutton-mac.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-checkbox-msw.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-gauge-msw.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-textctrl-msw.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-button-mac.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-comboctrl-mac.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/appear-spinctrldouble-gtk.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/stock/gtk-bold.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/stock/gtk-zoom-100.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/stock/gtk-go-back-ltr.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/stock/gtk-find.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/stock/gtk-info.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/stock/gtk-go-up.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/stock/gtk-clear.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/stock/gtk-underline.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/stock/gtk-go-down.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/stock/gtk-select-font.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/stock/gtk-paste.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/stock/gtk-save.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/stock/gtk-cut.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/stock/gtk-edit.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/stock/gtk-goto-top.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/stock/gtk-redo-ltr.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/stock/gtk-no.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/stock/gtk-ok.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/stock/gtk-sort-descending.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/stock/gtk-close.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/stock/gtk-remove.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/stock/gtk-floppy.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/stock/gtk-goto-first-ltr.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/stock/gtk-about.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/stock/gtk-jump-to-ltr.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/stock/gtk-zoom-in.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/stock/gtk-print-preview.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/stock/gtk-index.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/stock/gtk-goto-last-ltr.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/stock/gtk-cdrom.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/stock/gtk-add.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/stock/gtk-preferences.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/stock/gtk-select-color.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/stock/gtk-indent-ltr.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/stock/gtk-goto-bottom.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/stock/gtk-open.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/stock/gtk-cancel.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/stock/gtk-delete.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/stock/gtk-undelete-ltr.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/stock/gtk-justify-fill.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/stock/gtk-stop.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/stock/gtk-spell-check.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/stock/gtk-sort-ascending.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/stock/gtk-yes.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/stock/gtk-zoom-fit.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/stock/gtk-execute.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/stock/gtk-select-all.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/stock/gtk-strikethrough.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/stock/gtk-italic.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/stock/gtk-refresh.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/stock/gtk-find-and-replace.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/stock/gtk-properties.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/stock/gtk-home.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/stock/gtk-print.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/stock/gtk-apply.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/stock/gtk-undo-ltr.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/stock/gtk-zoom-out.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/stock/gtk-justify-center.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/stock/gtk-harddisk.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/stock/gtk-go-forward-ltr.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/stock/gtk-copy.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/stock/gtk-revert-to-saved-ltr.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/stock/gtk-justify-left.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/stock/gtk-justify-right.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/stock/gtk-quit.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/stock/gtk-help.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/stock/gtk-convert.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/stock/gtk-new.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/stock/gtk-save-as.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/stock/gtk-network.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/stock/gtk-unindent-ltr.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/stock/gtk-file.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/generic/auisimpletabart.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/generic/simplehtmllistbox.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/generic/bannerwindow.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/generic/rearrangectrl.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/generic/auidefaulttabart.png",
        "/tmp/vanessa/spack-stage/spack-stage-wxwidgets-develop-cifbrxpuyqiwy77i6zmgeook45pn4tvs/spack-src/docs/doxygen/images/generic/rearrangelist.png"
    ],
    "total_files": 6663
}