{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-spades-3.15.0-iym6knl5cb7zfoci3cy7afgxnkjfwvzy/spack-src/ext/src/llvm/CMakeLists.txt": "project(llvm-support)\n\ninclude_directories(${CMAKE_CURRENT_SOURCE_DIR})\ninclude_directories(${EXT_DIR}/include)\n\ninclude(CheckIncludeFile)\ninclude(CheckIncludeFiles)\ninclude(CheckIncludeFileCXX)\ninclude(CheckSymbolExists)\n\ncheck_include_file(execinfo.h  HAVE_EXECINFO_H)\ncheck_include_file(signal.h    HAVE_SIGNAL_H)\ncheck_include_file(sys/stat.h  HAVE_SYS_STAT_H)\ncheck_include_file(cxxabi.h    HAVE_CXXABI_H)\ncheck_include_file(dlfcn.h     HAVE_DLFCN_H)\ncheck_include_file(mach/mach.h HAVE_MACH_MACH_H)\ncheck_include_file(link.h      HAVE_LINK_H)\ncheck_include_file(unistd.h    HAVE_UNISTD_H)\ncheck_include_file(sys/mman.h  HAVE_SYS_MMAN_H)\ncheck_include_file(fcntl.h     HAVE_FCNTL_H)\ncheck_include_file(malloc/malloc.h HAVE_MALLOC_MALLOC_H)\ncheck_include_file(pthread.h   HAVE_PTHREAD_H)\ncheck_include_file(sys/time.h  HAVE_SYS_TIME_H)\ncheck_include_file(sys/resource.h HAVE_SYS_RESOURCE_H)\n\nfind_package(Backtrace)\nset(HAVE_BACKTRACE ${Backtrace_FOUND})\nset(BACKTRACE_HEADER ${Backtrace_HEADER})\n\ncheck_symbol_exists(futimens sys/stat.h HAVE_FUTIMENS)\ncheck_symbol_exists(futimes sys/time.h HAVE_FUTIMES)\ncheck_symbol_exists(getrusage sys/resource.h HAVE_GETRUSAGE)\ncheck_symbol_exists(getpagesize unistd.h HAVE_GETPAGESIZE)\ncheck_symbol_exists(sysconf unistd.h HAVE_SYSCONF)\ncheck_symbol_exists(mallinfo malloc.h HAVE_MALLINFO)\ncheck_symbol_exists(mallctl malloc_np.h HAVE_MALLCTL)\ncheck_symbol_exists(malloc_zone_statistics malloc/malloc.h\n                    HAVE_MALLOC_ZONE_STATISTICS)\n\nfind_library(DL_LIB NAMES \"dl\")\n\ncheck_library_exists(pthread pthread_create \"\" HAVE_LIBPTHREAD)\nif (HAVE_LIBPTHREAD)\n  check_library_exists(pthread pthread_getspecific \"\" HAVE_PTHREAD_GETSPECIFIC)\n  check_library_exists(pthread pthread_rwlock_init \"\" HAVE_PTHREAD_RWLOCK_INIT)\n  check_library_exists(pthread pthread_mutex_lock \"\" HAVE_PTHREAD_MUTEX_LOCK)\nelse()\n  check_library_exists(c pthread_create \"\" PTHREAD_IN_LIBC)\n  if (PTHREAD_IN_LIBC)\n    check_library_exists(c pthread_getspecific \"\" HAVE_PTHREAD_GETSPECIFIC)\n    check_library_exists(c pthread_rwlock_init \"\" HAVE_PTHREAD_RWLOCK_INIT)\n    check_library_exists(c pthread_mutex_lock \"\" HAVE_PTHREAD_MUTEX_LOCK)\n  endif()\nendif()\ncheck_library_exists(dl dlopen \"\" HAVE_LIBDL)\ncheck_library_exists(rt clock_gettime \"\" HAVE_LIBRT)\n\nif(HAVE_LIBPTHREAD)\n  # We want to find pthreads library and at the moment we do want to\n  # have it reported as '-l<lib>' instead of '-pthread'.\n  # TODO: switch to -pthread once the rest of the build system can deal with it.\n  set(CMAKE_THREAD_PREFER_PTHREAD TRUE)\n  set(THREADS_HAVE_PTHREAD_ARG Off)\n  find_package(Threads REQUIRED)\n  set(LLVM_PTHREAD_LIB ${CMAKE_THREAD_LIBS_INIT})\nendif()\n\nadd_definitions(-D__STDC_CONSTANT_MACROS)\nadd_definitions(-D__STDC_LIMIT_MACROS)\n\n# FIXME: Signal handler return type, currently hardcoded to 'void'\nset(RETSIGTYPE void)\n\nconfigure_file(${EXT_DIR}/include/llvm/Config.h.in\n               ${SPADES_BUILT_INCLUDE_DIR}/llvm/Config.h)\n\nfile(GLOB sources \"[a-zA-Z]*.cpp\" \"[a-zA-Z]*.c\")\n\nadd_library(llvm-support STATIC\n  ${sources})\nif (DL_LIB)\n  target_link_libraries(llvm-support ${DL_LIB})\nendif()\n",
        "/tmp/vanessa/spack-stage/spack-stage-spades-3.15.0-iym6knl5cb7zfoci3cy7afgxnkjfwvzy/spack-src/ext/src/mimalloc/CMakeLists.txt": "cmake_minimum_required(VERSION 3.0)\nproject(libmimalloc C CXX)\n\nset(CMAKE_C_STANDARD 11)\nset(CMAKE_CXX_STANDARD 17)\n\noption(MI_SECURE            \"Use full security mitigations (like guard pages, allocation randomization, double-free mitigation, and free-list corruption detection)\" OFF)\noption(MI_DEBUG_FULL        \"Use full internal heap invariant checking in DEBUG mode (expensive)\" OFF)\noption(MI_PADDING           \"Enable padding to detect heap block overflow (used only in DEBUG mode)\" ON)\noption(MI_OVERRIDE          \"Override the standard malloc interface (e.g. define entry points for malloc() etc)\" ON)\noption(MI_OVERRIDE_GLIBC    \"Override strong glibc functions (might break static build)\" ON)\noption(MI_OVERRIDE_WRAP     \"Use linker wrap functionality to override strong glibc functions\" OFF)\noption(MI_XMALLOC           \"Enable abort() call on memory allocation failure by default\" OFF)\noption(MI_SHOW_ERRORS       \"Show error and warning messages by default (only enabled by default in DEBUG mode)\" OFF)\noption(MI_USE_CXX           \"Use the C++ compiler to compile the library (instead of the C compiler)\" OFF)\noption(MI_SEE_ASM           \"Generate assembly files\" OFF)\noption(MI_INTERPOSE         \"Use interpose to override standard malloc on macOS\" ON)\noption(MI_OSX_ZONE          \"Use malloc zone to override standard malloc on macOS\" OFF) # enables interpose as well\noption(MI_LOCAL_DYNAMIC_TLS \"Use slightly slower, dlopen-compatible TLS mechanism (Unix)\" OFF)\noption(MI_BUILD_SHARED      \"Build shared library\" ON)\noption(MI_BUILD_STATIC      \"Build static library\" ON)\noption(MI_BUILD_OBJECT      \"Build object library\" ON)\noption(MI_BUILD_TESTS       \"Build test executables\" ON)\noption(MI_DEBUG_TSAN        \"Build with thread sanitizer (needs clang)\" OFF)\noption(MI_DEBUG_UBSAN       \"Build with undefined-behavior sanitizer (needs clang++)\" OFF)\noption(MI_CHECK_FULL        \"Use full internal invariant checking in DEBUG mode (deprecated, use MI_DEBUG_FULL instead)\" OFF)\n\ninclude(\"cmake/mimalloc-config-version.cmake\")\n\nset(mi_sources\n    src/stats.c\n    src/random.c\n    src/os.c\n    src/bitmap.c\n    src/arena.c\n    src/region.c\n    src/segment.c\n    src/page.c\n    src/alloc.c\n    src/alloc-aligned.c\n    src/alloc-posix.c\n    src/heap.c\n    src/options.c\n    src/init.c)\n\n# -----------------------------------------------------------------------------\n# Converience: set default build type depending on the build directory\n# -----------------------------------------------------------------------------\n\nif (NOT CMAKE_BUILD_TYPE)\n  if (\"${CMAKE_BINARY_DIR}\" MATCHES \".*(D|d)ebug$\" OR  MI_DEBUG_FULL MATCHES \"ON\")\n    message(STATUS \"No build type selected, default to: Debug\")\n    set(CMAKE_BUILD_TYPE \"Debug\")\n  else()\n    message(STATUS \"No build type selected, default to: Release\")\n    set(CMAKE_BUILD_TYPE \"Release\")\n  endif()\nendif()\n\nif(\"${CMAKE_BINARY_DIR}\" MATCHES \".*(S|s)ecure$\")\n  message(STATUS \"Default to secure build\")\n  set(MI_SECURE \"ON\")\nendif()\n\n# -----------------------------------------------------------------------------\n# Process options\n# -----------------------------------------------------------------------------\n\nif(CMAKE_C_COMPILER_ID MATCHES \"MSVC|Intel\")\n  set(MI_USE_CXX \"ON\")\nendif()\n\nif(MI_OVERRIDE MATCHES \"ON\")\n  message(STATUS \"Override standard malloc (MI_OVERRIDE=ON)\")\n  if(APPLE)\n    if(MI_OSX_ZONE MATCHES \"ON\")\n      # use zone's on macOS\n      message(STATUS \"  Use malloc zone to override malloc (MI_OSX_ZONE=ON)\")\n      list(APPEND mi_sources src/alloc-override-osx.c)\n      list(APPEND mi_defines MI_OSX_ZONE=1)\n      if(NOT MI_INTERPOSE MATCHES \"ON\")\n        message(STATUS \"  (enabling INTERPOSE as well since zone's require this)\")\n        set(MI_INTERPOSE \"ON\")\n      endif()\n    endif()\n    if(MI_INTERPOSE MATCHES \"ON\")\n      # use interpose on macOS\n      message(STATUS \"  Use interpose to override malloc (MI_INTERPOSE=ON)\")\n      list(APPEND mi_defines MI_INTERPOSE)\n    endif()\n  endif()\nendif()\n\nif(MI_SECURE MATCHES \"ON\")\n  message(STATUS \"Set full secure build (MI_SECURE=ON)\")\n  list(APPEND mi_defines MI_SECURE=4)\nendif()\n\nif(MI_SEE_ASM MATCHES \"ON\")\n  message(STATUS \"Generate assembly listings (MI_SEE_ASM=ON)\")\n  list(APPEND mi_cflags -save-temps)\nendif()\n\nif(MI_CHECK_FULL MATCHES \"ON\")\n  message(STATUS \"The MI_CHECK_FULL option is deprecated, use MI_DEBUG_FULL instead\")\n  set(MI_DEBUG_FULL \"ON\")\nendif()\n\nif(MI_DEBUG_FULL MATCHES \"ON\")\n  message(STATUS \"Set debug level to full internal invariant checking (MI_DEBUG_FULL=ON)\")\n  list(APPEND mi_defines MI_DEBUG=3)   # full invariant checking\nendif()\n\nif(MI_PADDING MATCHES \"OFF\")\n  message(STATUS \"Disable padding of heap blocks in debug mode (MI_PADDING=OFF)\")\n  list(APPEND mi_defines MI_PADDING=0)\nendif()\n\nif(MI_XMALLOC MATCHES \"ON\")\n  message(STATUS \"Enable abort() calls on memory allocation failure (MI_XMALLOC=ON)\")\n  list(APPEND mi_defines MI_XMALLOC=1)\nendif()\n\nif(MI_SHOW_ERRORS MATCHES \"ON\")\n  message(STATUS \"Enable printing of error and warning messages by default (MI_SHOW_ERRORS=ON)\")\n  list(APPEND mi_defines MI_SHOW_ERRORS=1)\nendif()\n\nif(MI_DEBUG_TSAN MATCHES \"ON\") \n  if(CMAKE_C_COMPILER_ID MATCHES \"Clang\")\n    message(STATUS \"Build with thread sanitizer (MI_DEBUG_TSAN=ON)\")\n    list(APPEND mi_defines MI_TSAN=1)\n    list(APPEND mi_cflags -fsanitize=thread -g -O1)\n    list(APPEND CMAKE_EXE_LINKER_FLAGS -fsanitize=thread)\n  else()\n    message(WARNING \"Can only use thread sanitizer with clang (MI_DEBUG_TSAN=ON but ignored)\")    \n  endif()  \nendif()\n\nif(MI_DEBUG_UBSAN MATCHES \"ON\") \n  if(CMAKE_BUILD_TYPE MATCHES \"Debug\")    \n    if(CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\n      message(STATUS \"Build with undefined-behavior sanitizer (MI_DEBUG_UBSAN=ON)\")\n      list(APPEND mi_cflags -fsanitize=undefined -g)\n      list(APPEND CMAKE_EXE_LINKER_FLAGS -fsanitize=undefined)\n      if (MI_USE_CXX MATCHES \"OFF\")\n        message(STATUS \"(switch to use C++ due to MI_DEBUG_UBSAN)\")\n        set(MI_USE_CXX \"ON\")\n      endif()\n    else()\n      message(WARNING \"Can only use undefined-behavior sanitizer with clang++ (MI_DEBUG_UBSAN=ON but ignored)\")    \n    endif()  \n  else()\n    message(WARNING \"Can only use thread sanitizer with a debug build (CMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE})\")    \n  endif()\nendif()\n\nif(MI_USE_CXX MATCHES \"ON\")\n  message(STATUS \"Use the C++ compiler to compile (MI_USE_CXX=ON)\")\n  set_source_files_properties(${mi_sources} PROPERTIES LANGUAGE CXX )\n  set_source_files_properties(src/static.c test/test-api.c test/test-stress PROPERTIES LANGUAGE CXX )\n  if(CMAKE_CXX_COMPILER_ID MATCHES \"AppleClang|Clang\")\n    list(APPEND mi_cflags -Wno-deprecated)\n  endif()\n  if(CMAKE_CXX_COMPILER_ID MATCHES \"Intel\")\n    list(APPEND mi_cflags -Kc++)\n  endif()\nendif()\n\n# Compiler flags\nif(CMAKE_C_COMPILER_ID MATCHES \"AppleClang|Clang|GNU\")\n  list(APPEND mi_cflags -Wall -Wextra -Wno-unknown-pragmas -fvisibility=hidden)\n  if(CMAKE_C_COMPILER_ID MATCHES \"GNU\")\n    list(APPEND mi_cflags -Wno-invalid-memory-model)\n  endif()\nendif()\n\nif(CMAKE_C_COMPILER_ID MATCHES \"Intel\")\n  list(APPEND mi_cflags -Wall -fvisibility=hidden)\nendif()\n\nif(CMAKE_C_COMPILER_ID MATCHES \"AppleClang|Clang|GNU|Intel\" AND NOT CMAKE_SYSTEM_NAME MATCHES \"Haiku\")\n  if(MI_LOCAL_DYNAMIC_TLS MATCHES \"ON\")\n    list(APPEND mi_cflags -ftls-model=local-dynamic)\n  else()\n    list(APPEND mi_cflags -ftls-model=initial-exec)\n  endif()\nendif()\n\n# Architecture flags\nif(${CMAKE_HOST_SYSTEM_PROCESSOR} MATCHES \"arm\")\n    list(APPEND mi_cflags -march=native)\nendif()\n\n# extra needed libraries\nif(WIN32)\n  list(APPEND mi_libraries psapi shell32 user32 advapi32 bcrypt)\nelse()\n  if(NOT ${CMAKE_C_COMPILER} MATCHES \"android\")\n    list(APPEND mi_libraries pthread)\n    find_library(LIBRT rt)\n    if(LIBRT)\n      list(APPEND mi_libraries ${LIBRT})\n    endif()\n  endif()\nendif()\n\n# -----------------------------------------------------------------------------\n# Install and output names\n# -----------------------------------------------------------------------------\n\nset(mi_install_dir \"${CMAKE_INSTALL_PREFIX}/lib/mimalloc-${mi_version}\")\nif(MI_SECURE MATCHES \"ON\")\n  set(mi_basename \"mimalloc-secure\")\nelse()\n  set(mi_basename \"mimalloc\")\nendif()\nstring(TOLOWER \"${CMAKE_BUILD_TYPE}\" CMAKE_BUILD_TYPE_LC)\nif(NOT(CMAKE_BUILD_TYPE_LC MATCHES \"^(release|relwithdebinfo|minsizerel)$\"))\n  set(mi_basename \"${mi_basename}-${CMAKE_BUILD_TYPE_LC}\") #append build type (e.g. -debug) if not a release version\nendif()\nif(MI_BUILD_SHARED)\n  list(APPEND mi_build_targets \"shared\")\nendif()\nif(MI_BUILD_STATIC)\n  list(APPEND mi_build_targets \"static\")\nendif()\nif(MI_BUILD_OBJECT)\n  list(APPEND mi_build_targets \"object\")\nendif()\nif(MI_BUILD_TESTS)\n  list(APPEND mi_build_targets \"tests\")\nendif()\nmessage(STATUS \"\")\nmessage(STATUS \"Library base name: ${mi_basename}\")\nmessage(STATUS \"Build type       : ${CMAKE_BUILD_TYPE_LC}\")\nif(MI_USE_CXX MATCHES \"ON\")\n  message(STATUS \"Compiler         : ${CMAKE_CXX_COMPILER}\")\nelse()\n  message(STATUS \"Compiler         : ${CMAKE_C_COMPILER}\")\nendif()\nmessage(STATUS \"Install directory: ${mi_install_dir}\")\nmessage(STATUS \"Build targets    : ${mi_build_targets}\")\nmessage(STATUS \"\")\n\n# -----------------------------------------------------------------------------\n# Main targets\n# -----------------------------------------------------------------------------\n\n# shared library\nif(MI_BUILD_SHARED)\n  add_library(mimalloc SHARED ${mi_sources})\n  set_target_properties(mimalloc PROPERTIES VERSION ${mi_version} OUTPUT_NAME ${mi_basename} )\n  target_compile_definitions(mimalloc PRIVATE ${mi_defines} MI_SHARED_LIB MI_SHARED_LIB_EXPORT)\n  target_compile_options(mimalloc PRIVATE ${mi_cflags})\n  target_link_libraries(mimalloc PUBLIC ${mi_libraries})\n  target_include_directories(mimalloc PUBLIC\n      $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>\n      $<INSTALL_INTERFACE:${mi_install_dir}/include>\n  )\n  if(WIN32)\n    # On windows copy the mimalloc redirection dll too.\n    target_link_libraries(mimalloc PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/bin/mimalloc-redirect.lib)\n    add_custom_command(TARGET mimalloc POST_BUILD\n      COMMAND \"${CMAKE_COMMAND}\" -E copy \"${CMAKE_CURRENT_SOURCE_DIR}/bin/mimalloc-redirect.dll\" $<TARGET_FILE_DIR:mimalloc>\n      COMMENT \"Copy mimalloc-redirect.dll to output directory\")\n  endif()\n\n  install(TARGETS mimalloc EXPORT mimalloc DESTINATION ${mi_install_dir} LIBRARY)\n  install(EXPORT mimalloc DESTINATION ${mi_install_dir}/cmake)\nendif()\n\n# static library\nif (MI_BUILD_STATIC)\n  add_library(mimalloc-static STATIC ${mi_sources})\n  set_property(TARGET mimalloc-static PROPERTY POSITION_INDEPENDENT_CODE ON)\n  target_compile_definitions(mimalloc-static PRIVATE ${mi_defines} MI_STATIC_LIB)\n  target_compile_options(mimalloc-static PRIVATE ${mi_cflags})\n  target_link_libraries(mimalloc-static PUBLIC ${mi_libraries})\n  target_include_directories(mimalloc-static PUBLIC\n      $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>\n      $<INSTALL_INTERFACE:${mi_install_dir}/include>\n  )\n  if(WIN32)\n    # When building both static and shared libraries on Windows, a static library should use a\n    # different output name to avoid the conflict with the import library of a shared one.\n    string(REPLACE \"mimalloc\" \"mimalloc-static\" mi_output_name ${mi_basename})\n    set_target_properties(mimalloc-static PROPERTIES OUTPUT_NAME ${mi_output_name})\n  else()\n    set_target_properties(mimalloc-static PROPERTIES OUTPUT_NAME ${mi_basename})\n  endif()\n\n  install(TARGETS mimalloc-static EXPORT mimalloc DESTINATION ${mi_install_dir})\nendif()\n\n# install include files\ninstall(FILES include/mimalloc.h DESTINATION ${mi_install_dir}/include)\ninstall(FILES include/mimalloc-override.h DESTINATION ${mi_install_dir}/include)\ninstall(FILES include/mimalloc-new-delete.h DESTINATION ${mi_install_dir}/include)\ninstall(FILES cmake/mimalloc-config.cmake DESTINATION ${mi_install_dir}/cmake)\ninstall(FILES cmake/mimalloc-config-version.cmake DESTINATION ${mi_install_dir}/cmake)\n\nif(NOT WIN32 AND MI_BUILD_SHARED)\n  # install a symlink in the /usr/local/lib to the versioned library\n  set(mi_symlink \"${CMAKE_SHARED_MODULE_PREFIX}${mi_basename}${CMAKE_SHARED_LIBRARY_SUFFIX}\")\n  set(mi_soname \"mimalloc-${mi_version}/${mi_symlink}.${mi_version}\")\n  install(CODE \"execute_process(COMMAND ${CMAKE_COMMAND} -E create_symlink ${mi_soname} ${mi_symlink} WORKING_DIRECTORY ${mi_install_dir}/..)\")\n  install(CODE \"MESSAGE(\\\"-- Symbolic link: ${CMAKE_INSTALL_PREFIX}/lib/${mi_symlink} -> ${mi_soname}\\\")\")\nendif()\n\n# single object file for more predictable static overriding\nif (MI_BUILD_OBJECT)\n  add_library(mimalloc-obj OBJECT src/static.c)\n  set_property(TARGET mimalloc-obj PROPERTY POSITION_INDEPENDENT_CODE ON)\n  target_compile_definitions(mimalloc-obj PRIVATE ${mi_defines})\n  target_compile_options(mimalloc-obj PRIVATE ${mi_cflags})\n  target_include_directories(mimalloc-obj PUBLIC\n      $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>\n      $<INSTALL_INTERFACE:${mi_install_dir}/include>\n  )\n\n  # the following seems to lead to cmake warnings/errors on some systems, disable for now :-(\n  # install(TARGETS mimalloc-obj EXPORT mimalloc DESTINATION ${mi_install_dir})\n\n  # the FILES expression can also be: $<TARGET_OBJECTS:mimalloc-obj>\n  # but that fails cmake versions less than 3.10 so we leave it as is for now\n  install(FILES ${CMAKE_CURRENT_BINARY_DIR}/CMakeFiles/mimalloc-obj.dir/src/static.c${CMAKE_C_OUTPUT_EXTENSION}\n          DESTINATION ${mi_install_dir}\n          RENAME ${mi_basename}${CMAKE_C_OUTPUT_EXTENSION} )\nendif()\n\n# -----------------------------------------------------------------------------\n# API surface testing\n# -----------------------------------------------------------------------------\n\nif (MI_BUILD_TESTS MATCHES \"ON\")\n  add_executable(mimalloc-test-api test/test-api.c)\n  target_compile_definitions(mimalloc-test-api PRIVATE ${mi_defines})\n  target_compile_options(mimalloc-test-api PRIVATE ${mi_cflags})\n  target_include_directories(mimalloc-test-api PRIVATE include)\n  target_link_libraries(mimalloc-test-api PRIVATE mimalloc-static ${mi_libraries})\n\n  add_executable(mimalloc-test-stress test/test-stress.c)\n  target_compile_definitions(mimalloc-test-stress PRIVATE ${mi_defines})\n  target_compile_options(mimalloc-test-stress PRIVATE ${mi_cflags})\n  target_include_directories(mimalloc-test-stress PRIVATE include)\n  target_link_libraries(mimalloc-test-stress PRIVATE mimalloc ${mi_libraries})\n\n  enable_testing()\n  add_test(test_api, mimalloc-test-api)\n  add_test(test_stress, mimalloc-test-stress)\nendif()\n\n# -----------------------------------------------------------------------------\n# Set override properties\n# -----------------------------------------------------------------------------\nif (MI_OVERRIDE MATCHES \"ON\")\n  set(mi_wrap_fn \"-Wl,--wrap,malloc,--wrap,free,--wrap,realloc,--wrap,calloc,--wrap,memalign,--wrap,posix_memalign,--wrap,aligned_alloc\")\n  if (MI_BUILD_SHARED)\n    target_compile_definitions(mimalloc PRIVATE MI_MALLOC_OVERRIDE)\n    if (MI_OVERRIDE_GLIBC)\n      target_compile_definitions(mimalloc PRIVATE MI_MALLOC_OVERRIDE_GLIBC)\n    endif()\n    if (MI_OVERRIDE_WRAP)\n      target_compile_definitions(mimalloc PRIVATE MI_MALLOC_OVERRIDE_WRAP)\n      set_target_properties(mimalloc PROPERTIES\n                            INTERFACE_LINK_LIBRARIES \"${mi_wrap_fn}\")\n    endif()\n  endif()\n  if(NOT WIN32)\n    # It is only possible to override malloc on Windows when building as a DLL.\n    if (MI_BUILD_STATIC)\n      target_compile_definitions(mimalloc-static PRIVATE MI_MALLOC_OVERRIDE)\n      if (MI_OVERRIDE_GLIBC)\n        target_compile_definitions(mimalloc-static PRIVATE MI_MALLOC_OVERRIDE_GLIBC)\n      endif()\n      if (MI_OVERRIDE_WRAP)\n        target_compile_definitions(mimalloc-static PRIVATE MI_MALLOC_OVERRIDE_WRAP)\n        set_target_properties(mimalloc-static PROPERTIES\n                              INTERFACE_LINK_LIBRARIES \"${mi_wrap_fn}\")\n      endif()\n    endif()\n    if (MI_BUILD_OBJECT)\n      target_compile_definitions(mimalloc-obj PRIVATE MI_MALLOC_OVERRIDE)\n      if (MI_OVERRIDE_GLIBC)\n        target_compile_definitions(mimalloc-obj PRIVATE MI_MALLOC_OVERRIDE_GLIBC)\n      endif()\n      if (MI_OVERRIDE_WRAP)\n        target_compile_definitions(mimalloc-obj PRIVATE MI_MALLOC_OVERRIDE_WRAP)\n        set_target_properties(mimalloc-obj PROPERTIES\n                              INTERFACE_LINK_LIBRARIES \"${mi_wrap_fn}\")\n      endif()\n    endif()\n  endif()\nendif()\n",
        "/tmp/vanessa/spack-stage/spack-stage-spades-3.15.0-iym6knl5cb7zfoci3cy7afgxnkjfwvzy/spack-src/ext/src/googletest/googletest/cmake/libgtest.la.in": "# libgtest.la - a libtool library file\n# Generated by libtool (GNU libtool) 2.4.6\n\n# Please DO NOT delete this file!\n# It is necessary for linking the library.\n\n# Names of this library.\nlibrary_names='libgtest.so'\n\n# Is this an already installed library?\ninstalled=yes\n\n# Should we warn about portability when linking against -modules?\nshouldnotlink=no\n\n# Files to dlopen/dlpreopen\ndlopen=''\ndlpreopen=''\n\n# Directory that this library needs to be installed in:\nlibdir='@CMAKE_INSTALL_FULL_LIBDIR@'\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-spades-3.15.0-iym6knl5cb7zfoci3cy7afgxnkjfwvzy/spack-src/test_dataset_plasmid/pl1.fq.gz",
        "/tmp/vanessa/spack-stage/spack-stage-spades-3.15.0-iym6knl5cb7zfoci3cy7afgxnkjfwvzy/spack-src/test_dataset_plasmid/pl2.fq.gz",
        "/tmp/vanessa/spack-stage/spack-stage-spades-3.15.0-iym6knl5cb7zfoci3cy7afgxnkjfwvzy/spack-src/src/projects/spaligner/pipeline.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-spades-3.15.0-iym6knl5cb7zfoci3cy7afgxnkjfwvzy/spack-src/ext/src/hmmer/src/impl_sse/p7_omx.ai",
        "/tmp/vanessa/spack-stage/spack-stage-spades-3.15.0-iym6knl5cb7zfoci3cy7afgxnkjfwvzy/spack-src/ext/include/boost/smart_ptr/detail/atomic_count_gcc.hpp",
        "/tmp/vanessa/spack-stage/spack-stage-spades-3.15.0-iym6knl5cb7zfoci3cy7afgxnkjfwvzy/spack-src/ext/include/boost/spirit/home/x3/support/subcontext.hpp",
        "/tmp/vanessa/spack-stage/spack-stage-spades-3.15.0-iym6knl5cb7zfoci3cy7afgxnkjfwvzy/spack-src/ext/include/boost/spirit/home/support/char_encoding/iso8859_1.hpp",
        "/tmp/vanessa/spack-stage/spack-stage-spades-3.15.0-iym6knl5cb7zfoci3cy7afgxnkjfwvzy/spack-src/coronaspades_hmms/Phan-CoV.hmm.gz",
        "/tmp/vanessa/spack-stage/spack-stage-spades-3.15.0-iym6knl5cb7zfoci3cy7afgxnkjfwvzy/spack-src/coronaspades_hmms/Pfam-A.SARS-CoV-2.hmm.gz",
        "/tmp/vanessa/spack-stage/spack-stage-spades-3.15.0-iym6knl5cb7zfoci3cy7afgxnkjfwvzy/spack-src/biosynthetic_spades_hmms/TE.hmm.gz",
        "/tmp/vanessa/spack-stage/spack-stage-spades-3.15.0-iym6knl5cb7zfoci3cy7afgxnkjfwvzy/spack-src/biosynthetic_spades_hmms/KR.hmm.gz",
        "/tmp/vanessa/spack-stage/spack-stage-spades-3.15.0-iym6knl5cb7zfoci3cy7afgxnkjfwvzy/spack-src/biosynthetic_spades_hmms/CStart.hmm.gz",
        "/tmp/vanessa/spack-stage/spack-stage-spades-3.15.0-iym6knl5cb7zfoci3cy7afgxnkjfwvzy/spack-src/biosynthetic_spades_hmms/AT.hmm.gz",
        "/tmp/vanessa/spack-stage/spack-stage-spades-3.15.0-iym6knl5cb7zfoci3cy7afgxnkjfwvzy/spack-src/biosynthetic_spades_hmms/KS.hmm.gz",
        "/tmp/vanessa/spack-stage/spack-stage-spades-3.15.0-iym6knl5cb7zfoci3cy7afgxnkjfwvzy/spack-src/biosynthetic_spades_hmms/AMP.hmm.gz",
        "/tmp/vanessa/spack-stage/spack-stage-spades-3.15.0-iym6knl5cb7zfoci3cy7afgxnkjfwvzy/spack-src/test_dataset_truspades/B_R2.fastq.gz",
        "/tmp/vanessa/spack-stage/spack-stage-spades-3.15.0-iym6knl5cb7zfoci3cy7afgxnkjfwvzy/spack-src/test_dataset_truspades/B_R1.fastq.gz",
        "/tmp/vanessa/spack-stage/spack-stage-spades-3.15.0-iym6knl5cb7zfoci3cy7afgxnkjfwvzy/spack-src/test_dataset_truspades/A_R1.fastq.gz",
        "/tmp/vanessa/spack-stage/spack-stage-spades-3.15.0-iym6knl5cb7zfoci3cy7afgxnkjfwvzy/spack-src/test_dataset_truspades/A_R2.fastq.gz",
        "/tmp/vanessa/spack-stage/spack-stage-spades-3.15.0-iym6knl5cb7zfoci3cy7afgxnkjfwvzy/spack-src/test_dataset/ecoli_1K_1.fq.gz",
        "/tmp/vanessa/spack-stage/spack-stage-spades-3.15.0-iym6knl5cb7zfoci3cy7afgxnkjfwvzy/spack-src/test_dataset/ecoli_1K_2.fq.gz",
        "/tmp/vanessa/spack-stage/spack-stage-spades-3.15.0-iym6knl5cb7zfoci3cy7afgxnkjfwvzy/spack-src/test_dataset/reference_1K.fa.gz"
    ],
    "total_files": 7828
}