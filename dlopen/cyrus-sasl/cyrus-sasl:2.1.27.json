{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-cyrus-sasl-2.1.27-hnal7aquex6gy2ydqk4wp52b2upmktrt/spack-src/configure.ac": "dnl configure.ac for the SASL library\ndnl Rob Siemborski\ndnl Rob Earhart\ndnl $Id: configure.ac,v 1.224 2011/09/22 14:44:15 mel Exp $\ndnl\ndnl Copyright (c) 2001 Carnegie Mellon University.  All rights reserved.\ndnl\ndnl Redistribution and use in source and binary forms, with or without\ndnl modification, are permitted provided that the following conditions\ndnl are met:\ndnl\ndnl 1. Redistributions of source code must retain the above copyright\ndnl    notice, this list of conditions and the following disclaimer. \ndnl\ndnl 2. Redistributions in binary form must reproduce the above copyright\ndnl    notice, this list of conditions and the following disclaimer in\ndnl    the documentation and/or other materials provided with the\ndnl    distribution.\ndnl\ndnl 3. The name \"Carnegie Mellon University\" must not be used to\ndnl    endorse or promote products derived from this software without\ndnl    prior written permission. For permission or any other legal\ndnl    details, please contact  \ndnl      Office of Technology Transfer\ndnl      Carnegie Mellon University\ndnl      5000 Forbes Avenue\ndnl      Pittsburgh, PA  15213-3890\ndnl      (412) 268-4387, fax: (412) 268-7395\ndnl      tech-transfer@andrew.cmu.edu\ndnl\ndnl 4. Redistributions of any form whatsoever must retain the following\ndnl    acknowledgment:\ndnl    \\\"This product includes software developed by Computing Services\ndnl     at Carnegie Mellon University (http://www.cmu.edu/computing/).\\\"\ndnl\ndnl CARNEGIE MELLON UNIVERSITY DISCLAIMS ALL WARRANTIES WITH REGARD TO\ndnl THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\ndnl AND FITNESS, IN NO EVENT SHALL CARNEGIE MELLON UNIVERSITY BE LIABLE\ndnl FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\ndnl WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN\ndnl AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING\ndnl OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\ndnl\n\nAC_PREREQ(2.63)\n\ndnl\ndnl REMINDER: When changing the version number here, please also update\ndnl the values in win32/include/config.h and include/sasl.h as well.\ndnl\nAC_INIT([cyrus-sasl],\n        [2.1.27],\n        [https://github.com/cyrusimap/cyrus-sasl/issues],\n        [cyrus-sasl],\n        [http://cyrusimap.org])\n\nAC_CONFIG_MACRO_DIR([m4])\n\ndnl use ./config.cache as the default cache file.\ndnl we require a cache file to successfully configure our build.\nif test $cache_file = \"/dev/null\"; then\ncache_file=\"./config.cache\"\nAC_CACHE_LOAD\nfi\n\nAC_CONFIG_AUX_DIR(config)\nAC_CANONICAL_HOST\nAC_CANONICAL_TARGET\n\nAM_INIT_AUTOMAKE([1.11 tar-ustar dist-bzip2 foreign -Wno-portability subdir-objects])\n\nDIRS=\"\"\n\nAC_ARG_ENABLE(cmulocal,\n              [AC_HELP_STRING([--enable-cmulocal],\n                              [enable local mods for CMU [[no]]])],\n              [],\n              enable_cmulocal=no)\n\nAC_ARG_ENABLE(sample,\n              [AC_HELP_STRING([--enable-sample],\n                              [compile sample code [[yes]]])],\n              [],\n              enable_sample=yes)\n\nAC_ARG_ENABLE(obsolete_cram_attr,\n              [AC_HELP_STRING([--enable-obsolete_cram_attr],\n                              [enable support for cmusaslsecretCRAM-MD5 auxprop property [[yes]]])],\n              enable_obsolete_cram_attr=$enableval,\n              enable_obsolete_cram_attr=yes)\n\nAC_ARG_ENABLE(obsolete_digest_attr,\n              [AC_HELP_STRING([--enable-obsolete_digest_attr],\n                              [enable support for cmusaslsecretDIGEST-MD5 auxprop property [[yes]]])],\n              enable_obsolete_digest_attr=$enableval,\n              enable_obsolete_digest_attr=yes)\n\nAC_PROG_CC\nAX_PROG_CC_FOR_BUILD\nAC_PROG_CPP\nAC_PROG_AWK\nAC_PROG_LN_S\nAC_PROG_MAKE_SET\nAC_PROG_INSTALL\nAC_USE_SYSTEM_EXTENSIONS\n\ndnl check for -R, etc. switch\nCMU_GUESS_RUNPATH_SWITCH\n\ndnl xxx compatibility\nAC_ARG_WITH(staticsasl)\nif test \"$with_staticsasl\" = yes; then\n\tenable_shared=yes\n\tenable_static=yes\nfi\n\nsave_target=$target\nif test -z \"$target\"; then\n\ttarget=\"NONE\"\nfi\n\n# new libtool\nAM_DISABLE_STATIC\nAC_PROG_LIBTOOL\n\ntarget=$save_target\n\nif test \"$enable_static\" = yes; then\n\tSASL_STATIC_LIBS=libsasl2.a\nelse\n\tSASL_STATIC_LIBS=\nfi\n\nAC_ARG_ENABLE(staticdlopen, [  --enable-staticdlopen   try dynamic plugins when we are a static libsasl [[no]] ],\n                enable_staticdlopen=$enableval,\n                enable_staticdlopen=no)\n\nif test \"$enable_staticdlopen\" = yes; then\n  AC_DEFINE(TRY_DLOPEN_WHEN_STATIC,[],[Should we try to dlopen() plugins while statically compiled?])\nfi\n\nif test \"$ac_cv_prog_gcc\" = yes; then\n  CFLAGS=\"-Wall -W ${CFLAGS}\"\nfi\n\nAC_ARG_WITH(purecov,[  --with-purecov          link with purecov])\nif test \"$with_purecov\" = yes; then\n  AC_CHECK_PROGS(PURECOV, purecov)\nfi\nAC_ARG_WITH(purify,[  --with-purify           link with purify])\nif test \"$with_purify\" = yes; then\n  AC_CHECK_PROGS(PURIFY, purify)\nfi\n\nAC_ARG_ENABLE(java, [  --enable-java           compile Java support [[no]]],\n\tenable_java=$enableval, enable_java=no)\nif test \"$enable_java\" = yes; then\n  AC_PATH_PROG(JAVAC, javac, no)\n  AC_PATH_PROGS(JAVAH, javah kaffeh, no)\n  AC_CHECK_PROGS(JAVADOC, javadoc, :)\t\n  if test \"$JAVAC\" = \"no\" -o \"$JAVAH\" = \"no\"; then\n    AC_WARN([Disabling Java support])\n    enable_java=no\n  fi\nelse\n# Make distcheck work\n  JAVAC=\"true\"\n  JAVAH=\"true\"\n  JAVADOC=\"true\"\nfi\nAM_CONDITIONAL(JAVA, test \"$enable_java\" = yes)\n\nif test \"$enable_java\" = yes; then\n  AC_MSG_CHECKING([JNI cpp flags])\n  AC_CACHE_VAL(sasl_cv_java_includes,[\n  if test `echo $JAVAH | sed 's,.*/,,'` = \"kaffeh\"; then\n    sasl_cv_java_includes=-I`echo $JAVAH | sed -e 's,/bin.*,/include/kaffe,'`\n  else\n    java_base=`echo $JAVAC | sed 's,/bin.*,'','`\n\n    AC_ARG_WITH(javabase, [  --with-javabase=PATH    set path to find jni.h in [/usr/java/include] ],\n        java_base=$withval,)\n\t\n\n    sasl_cv_java_includes=''\n    for dir in `find ${java_base}/include -follow -type d -print | grep -v green_threads`; do\n      sasl_cv_java_includes=\"${sasl_cv_java_includes} -I$dir\"\n    done\n  fi\n\n  sasl_cv_java_includes=\"${sasl_cv_java_includes} -I$javapath/include\"])\n\n  JAVA_INCLUDES=$sasl_cv_java_includes\n  AC_SUBST(JAVA_INCLUDES)\n  AC_MSG_RESULT(ok)\n\n  JAVAROOT=\"..\"\n  AC_SUBST(JAVAROOT)\n  JAVAC=`echo \"$JAVAC\" | sed 's,.*/,,'`\n  JAVAH=`echo \"$JAVAH\" | sed 's,.*/,,'`\nfi\n\nAM_CONDITIONAL(SAMPLE, test \"$enable_sample\" = yes)\n\ndnl call before we do the berkeley DB checks\nCMU_SOCKETS\n\ndnl we extracted this to config/sasldb.m4\nSASL_DB_PATH_CHECK()\nSASL_DB_CHECK()\n\n# Do we not install the SASL DB man pages?\nAM_CONDITIONAL(NO_SASL_DB_MANS, test \"x$SASL_DB_MANS\" = \"x\")\n\nAC_ARG_ENABLE(keep_db_open, [  --enable-keep-db-open   keep handle to DB open for improved performance [[no]] ],\n                keep_db_open=$enableval,\n                keep_db_open=no)\n\n# Disable if Berkeley DB and LMDB are not used\nif test \"$dblib\" != berkeley -a \"$dblib\" != lmdb; then\n  keep_db_open=no\nfi\n\nif test \"$keep_db_open\" = yes; then\n  AC_DEFINE(KEEP_DB_OPEN,[],[Should we keep handle to DB open in SASLDB plugin?])\nfi\nAC_MSG_CHECKING(if DB handle is kept open in SASLDB)\nAC_MSG_RESULT($keep_db_open)\n\nAC_CHECK_LIB(dl, dlopen, SASL_DL_LIB=\"-ldl\", SASL_DL_LIB=\"\")\nAC_SUBST(SASL_DL_LIB)\n\ndnl /dev/random ?\n\nAC_ARG_WITH(devrandom, [  --with-devrandom=PATH   set the path to pseudo random number generator [[/dev/urandom]] ],\n  devrandom=$withval,\n  devrandom=/dev/urandom)\nAC_MSG_CHECKING(PRNG to use)\nAC_MSG_RESULT($devrandom)\nAC_DEFINE_UNQUOTED(SASL_DEV_RANDOM, \"$devrandom\", [File to use for source of randomness])\n\ndnl Do we need leading underscores on our symbols?\n\nAC_CHECK_PROGS(NM, nm)\n\nAC_MSG_CHECKING(for underscore before symbols)\nAC_CACHE_VAL(sasl_cv_uscore,[\n    echo \"int main(){int i=1; return 0;}\n    void foo(){int i=6;}\" > conftest.c\n    ${CC} -o a.out conftest.c > /dev/null\n    if (${NM} a.out | grep _foo) > /dev/null; then\n      sasl_cv_uscore=yes\n    else\n      sasl_cv_uscore=no\n    fi])\nAC_MSG_RESULT($sasl_cv_uscore)\nrm -f conftest.c a.out\n\nif test $sasl_cv_uscore = yes; then\n  if test $ac_cv_lib_dl_dlopen = yes ; then\n\tAC_MSG_CHECKING(whether dlsym adds the underscore for us)\n\tcmu_save_LIBS=\"$LIBS\"\n\tLIBS=\"$LIBS $SASL_DL_LIB\"\n\tAC_CACHE_VAL(sasl_cv_dlsym_adds_uscore,AC_TRY_RUN( [\n#include <dlfcn.h>\n#include <stdio.h>\nvoid foo() { int i=0;}\nint main() { void *self, *ptr1, *ptr2; self=dlopen(NULL,RTLD_LAZY);\n    if(self) { ptr1=dlsym(self,\"foo\"); ptr2=dlsym(self,\"_foo\");\n    if(ptr1 && !ptr2) exit(0); } exit(1); } \n], [sasl_cv_dlsym_adds_uscore=yes], sasl_cv_dlsym_adds_uscore=no\n\tAC_DEFINE(DLSYM_NEEDS_UNDERSCORE, [], [Do we need a leading _ for dlsym?]),\n\tAC_MSG_WARN(cross-compiler, we'll do our best)))\n\tLIBS=\"$cmu_save_LIBS\"\n      AC_MSG_RESULT($sasl_cv_dlsym_adds_uscore)\n  fi\nfi\n\ndnl See if we can provide a default logging function...\nAC_CHECK_FUNCS(syslog)\n\nAC_ARG_WITH(saslauthd, [  --with-saslauthd=DIR    enable use of the saslauth daemon using state dir DIR ],\n\t\twith_saslauthd=$withval,\n\t\twith_saslauthd=yes)\nif test \"$with_saslauthd\" != no; then\n  if test \"$with_saslauthd\" = yes; then\n    with_saslauthd=\"/var/state/saslauthd\"\n  fi\n  AC_DEFINE(HAVE_SASLAUTHD,[],[Include support for saslauthd?])\n  AC_DEFINE_UNQUOTED(PATH_SASLAUTHD_RUNDIR, \"$with_saslauthd\",\n\t\t     [Where do we look for saslauthd's socket?])\nfi\nAM_CONDITIONAL(SASLAUTHD, test \"$with_saslauthd\" != no)\nAC_MSG_CHECKING(if I should include saslauthd)\nAC_MSG_RESULT($with_saslauthd)\n\nAC_ARG_WITH(authdaemond, [  --with-authdaemond=PATH enable use of authdaemon with default socket=PATH [[yes]] ],\n\t\twith_authdaemon=$withval,\n\t\twith_authdaemon=yes)\nif test \"$with_authdaemon\" != no; then\n  if test \"$with_authdaemon\" = yes; then\n    with_authdaemon=\"/dev/null\"\n  fi\n  AC_DEFINE(HAVE_AUTHDAEMON,[],[Include support for Courier's authdaemond?])\n  AC_DEFINE_UNQUOTED(PATH_AUTHDAEMON_SOCKET, \"$with_authdaemon\",\n\t\t     [Where do we look for Courier authdaemond's socket?])\nfi\nAC_MSG_CHECKING(to include Courier authdaemond support)\nAC_MSG_RESULT($with_authdaemon)\n\nAC_ARG_WITH(pwcheck,\n[  --with-pwcheck=DIR     enable deprecated pwcheck daemon using statedir DIR ],\n\twith_pwcheck=$withval,\n\twith_pwcheck=no)\nif test \"$with_pwcheck\" != no; then\n   if test \"$with_pwcheck\" = yes; then\n     with_pwcheck=/var/pwcheck\n   fi\n   AC_DEFINE(HAVE_PWCHECK,[],[Include Support for pwcheck daemon?])\n   AC_DEFINE_UNQUOTED(PWCHECKDIR, \"$with_pwcheck\", [Location of pwcheck socket])\n   AC_CHECK_FUNC(getspnam,PWCHECKMETH=\"getspnam\",PWCHECKMETH=\"getpwnam\")\n   AC_SUBST(PWCHECKMETH)\nfi\nAM_CONDITIONAL(PWCHECK, test \"$with_pwcheck\" != no)\nAC_MSG_CHECKING(if I should include pwcheck)\nAC_MSG_RESULT($with_pwcheck)\n\nAC_ARG_WITH(ipctype, [  --with-ipctype={unix,doors}    use ipctype [[unix]] ],\n       with_ipctype=$withval,\n       with_ipctype=\"unix\")\nIPCTYPE=$with_ipctype\nAC_SUBST(IPCTYPE)\nLIB_DOOR=\nif test \"$with_ipctype\" = \"doors\"; then\n   LIB_DOOR=\"-ldoor\"\n   AC_DEFINE(USE_DOORS,[],[use the doors IPC API for saslauthd?])\nfi\nAC_SUBST(LIB_DOOR)\n\nAC_ARG_ENABLE(alwaystrue, [  --enable-alwaystrue     enable the alwaystrue password verifier (discouraged)],\n\t\tenable_alwaystrue=$enableval,\n\t\tenable_alwaystrue=no)\nif test \"$enable_alwaystrue\" = yes; then\n  AC_DEFINE(HAVE_ALWAYSTRUE, [], [Enable 'alwaystrue' password verifier?])\nfi\nAC_MSG_CHECKING(if I should include the alwaystrue verifier)\nAC_MSG_RESULT($enable_alwaystrue)\n\ndnl sasl_checkapop support\nAC_ARG_ENABLE(checkapop, [  --enable-checkapop      enable use of sasl_checkapop [[yes]] ],\n  checkapop=$enableval,\n  checkapop=yes)\n\nAC_MSG_CHECKING(if we should enable sasl_checkapop)\nif test \"$checkapop\" != no; then\n  AC_MSG_RESULT(enabled)\n  AC_DEFINE(DO_SASL_CHECKAPOP, [], [should we support sasl_checkapop?])\nelse\n  AC_MSG_RESULT(disabled)\nfi\n\ndnl CRAM-MD5\nAC_ARG_ENABLE(cram, [  --enable-cram           enable CRAM-MD5 authentication [[yes]] ],\n  cram=$enableval,\n  cram=yes)\n\nAC_MSG_CHECKING(CRAM-MD5)\nif test \"$cram\" != no; then\n  AC_MSG_RESULT(enabled)\n  SASL_MECHS=\"$SASL_MECHS libcrammd5.la\"\n  if test \"$enable_obsolete_cram_attr\" = yes; then\n    CPPFLAGS=\"$CPPFLAGS -DOBSOLETE_CRAM_ATTR=1\"\n  fi\n  if test \"$enable_static\" = yes; then\n    SASL_STATIC_OBJS=\"$SASL_STATIC_OBJS cram.o\"\n    SASL_STATIC_SRCS=\"$SASL_STATIC_SRCS \\$(top_srcdir)/plugins/cram.c\"\n    AC_DEFINE(STATIC_CRAMMD5, [], [Link CRAM-MD5 Statically])\n  fi\nelse\n  AC_MSG_RESULT(disabled)\nfi\n\nCMU_HAVE_OPENSSL\nAC_MSG_CHECKING(for OpenSSL)\nAC_MSG_RESULT($with_openssl)\n\nSASL_DES_CHK\n\ndnl DIGEST-MD5\nAC_ARG_ENABLE(digest, [  --enable-digest         enable DIGEST-MD5 authentication [[yes]] ],\n  digest=$enableval,\n  digest=yes)\n\nif test \"$digest\" != no; then\n  dnl In order to compile digest, we should look for need libdes.\n  if test -d $digest; then\n    CPPFLAGS=\"$CPPFLAGS -I$digest/include\"\n    LDFLAGS=\"$LDFLAGS -L$digest/lib\"\n  fi\n  if test \"$with_des\" = no; then\n    AC_WARN(No DES support for DIGEST-MD5)\n  fi\nfi\n\nAC_MSG_CHECKING(DIGEST-MD5)\nif test \"$digest\" != no; then\n  AC_MSG_RESULT(enabled)\n  SASL_MECHS=\"$SASL_MECHS libdigestmd5.la\"\n  if test \"$enable_obsolete_digest_attr\" = yes; then\n    CPPFLAGS=\"$CPPFLAGS -DOBSOLETE_DIGEST_ATTR=1\"\n  fi\n  if test \"$enable_static\" = yes; then\n    SASL_STATIC_SRCS=\"$SASL_STATIC_SRCS \\$(top_srcdir)/plugins/digestmd5.c\"\n    SASL_STATIC_OBJS=\"$SASL_STATIC_OBJS digestmd5.o\"\n    AC_DEFINE(STATIC_DIGESTMD5, [], [Link DIGEST-MD5 Statically])\n  fi\nelse\n  AC_MSG_RESULT(disabled)\nfi\n\ndnl SCRAM\nAC_ARG_ENABLE(scram, [  --enable-scram            enable SCRAM authentication [[yes]] ],\n  scram=$enableval,\n  scram=yes)\n\nif test \"$with_openssl\" = no; then\n  AC_WARN([OpenSSL not found -- SCRAM will be disabled])\n  scram=no\nfi\n\nAC_MSG_CHECKING(SCRAM)\nif test \"$scram\" != no; then\n  AC_MSG_RESULT(enabled)\n  SCRAM_LIBS=\"-lcrypto $LIB_RSAREF\"\n\n  SASL_MECHS=\"$SASL_MECHS libscram.la\"\n  if test \"$enable_static\" = yes; then\n    SASL_STATIC_SRCS=\"$SASL_STATIC_SRCS \\$(top_srcdir)/plugins/scram.c\"\n    SASL_STATIC_OBJS=\"$SASL_STATIC_OBJS scram.o\"\n    AC_DEFINE(STATIC_SCRAM, [], [Link SCRAM Statically])\n  fi\n\n  AC_SUBST(SCRAM_LIBS)\nelse\n  AC_MSG_RESULT(disabled)\nfi\n\ndnl OTP\nAC_ARG_ENABLE(otp, [  --enable-otp            enable OTP authentication [[yes]] ],\n  otp=$enableval,\n  otp=yes)\n\nif test \"$with_openssl\" = no; then\n  AC_WARN([OpenSSL not found -- OTP will be disabled])\n  otp=no\nfi\n\nAC_MSG_CHECKING(OTP)\nif test \"$otp\" != no; then\n  AC_MSG_RESULT(enabled)\n  OTP_LIBS=\"-lcrypto $LIB_RSAREF\"\n\n  SASL_MECHS=\"$SASL_MECHS libotp.la\"\n  if test \"$enable_static\" = yes; then\n    SASL_STATIC_SRCS=\"$SASL_STATIC_SRCS \\$(top_srcdir)/plugins/otp.c\"\n    SASL_STATIC_OBJS=\"$SASL_STATIC_OBJS otp.o\"\n    AC_DEFINE(STATIC_OTP, [], [Link OTP Statically])\n  fi\n\n  dnl Test for OPIE\n  AC_ARG_WITH(opie, AC_HELP_STRING([--with-opie=PATH], [use OPIE (One Time Passwords in Everything) from PATH]))\n\n  case \"$with_opie\" in\n\t\"\"|yes) \n\t\tAC_CHECK_LIB(opie, opiechallenge, [\n\t\t\tAC_CHECK_HEADER(opie.h, with_opie=\"yes\",\n\t\t\t\t\twith_opie=\"no\")],\n\t\t\twith_opie=\"no\")\n\t\t;;\n\t*)\n\t\tif test -d $with_opie; then\n\t\t  CPPFLAGS=\"${CPPFLAGS} -I${with_opie}/include\"\n\t\t  LDFLAGS=\"${LDFLAGS} -L${with_opie}/lib\"\n\t\telse\n\t\t  with_opie=\"no\"\n\t\tfi\n\t\t;;\n  esac\n\n  AC_MSG_CHECKING(for OPIE)\n  AC_MSG_RESULT($with_opie)\n\n  if test \"$with_opie\" != no; then\n    AC_DEFINE(HAVE_OPIE,[],[Use OPIE for server-side OTP?])\n    OTP_LIBS=\"$OTP_LIBS -lopie\"\n  fi\n\n  AC_SUBST(OTP_LIBS)\n\nelse\n  AC_MSG_RESULT(disabled)\nfi\n\ndnl SRP\nAC_ARG_ENABLE(srp, [  --enable-srp            enable SRP authentication [[no]] ],\n  srp=$enableval,\n  srp=no)\n\nif test \"$with_openssl\" = no; then\n  AC_WARN([OpenSSL not found -- SRP will be disabled])\n  srp=no\nfi\n\nAC_MSG_CHECKING(SRP)\nif test \"$srp\" != no; then\n  AC_MSG_RESULT(enabled)\n  SRP_LIBS=\"-lcrypto $LIB_RSAREF\"\n\n  SASL_MECHS=\"$SASL_MECHS libsrp.la\"\n  if test \"$enable_static\" = yes; then\n    SASL_STATIC_SRCS=\"$SASL_STATIC_SRCS \\$(top_srcdir)/plugins/srp.c\"\n    SASL_STATIC_OBJS=\"$SASL_STATIC_OBJS srp.o\"\n    AC_DEFINE(STATIC_SRP, [], [Link SRP Statically])\n  fi\n\ndnl srp_setpass support\n  AC_ARG_ENABLE(srp_setpass, [  --enable-srp-setpass    enable setting SRP secrets with saslpasswd [[no]]],\n      srp_setpass=$enableval,\n      srp_setpass=no)\n\n  AC_MSG_CHECKING(if we should enable setting SRP secrets with saslpasswd)\n  if test \"$srp_setpass\" != no; then\n    AC_MSG_RESULT(enabled)\n    AC_DEFINE(DO_SRP_SETPASS, [], [should we support setpass() for SRP?])\n  else\n    AC_MSG_RESULT(disabled)\n  fi\n\n  AC_SUBST(SRP_LIBS)\nelse\n  AC_MSG_RESULT(disabled)\nfi\n\ndnl Kerberos based Mechanisms\nSASL_KERBEROS_V4_CHK\nSASL_GSSAPI_CHK\n\nif test \"$gssapi\" != \"no\"; then\n  AC_DEFINE(STATIC_GSSAPIV2,[],[Link GSSAPI Statically])\n  AC_DEFINE(HAVE_GSSAPI,[],[Include GSSAPI/Kerberos 5 Support])\n\n  mutex_default=\"no\"\n  if test \"$gss_impl\" = \"mit\"; then\n     mutex_default=\"yes\"\n  elif test \"$gss_impl\" = \"heimdal\"; then\n     AC_DEFINE(KRB5_HEIMDAL,[],[Using Heimdal]) \n  fi\n\n  AC_MSG_CHECKING(to use mutexes aroung GSS calls)\n  AC_ARG_ENABLE(gss_mutexes, [  --enable-gss_mutexes     use mutexes around calls to the GSS library],\n                use_gss_mutexes=$enableval,\n                use_gss_mutexes=$mutex_default)\n  if test $use_gss_mutexes = \"yes\"; then\n     AC_DEFINE(GSS_USE_MUTEXES, [], [should we mutex-wrap calls into the GSS library?])\n  fi\n  AC_MSG_RESULT($use_gss_mutexes)\nfi\n\nSASL2_CRYPT_CHK\n\nAC_ARG_ENABLE(sia, [  --enable-sia            enable SIA authentication [no] ],\n  sia=$enableval,\n  sia=no)\nLIB_SIA=\"\"\nif test \"$sia\" != no; then\n  if test -f /etc/sia/matrix.conf; then\n    AC_DEFINE(HAVE_SIA,[],[Include SIA Support])\n    LIB_SIA=\"-lsecurity -ldb -lm -laud\"\n  else\n    AC_MSG_ERROR([No support for SIA found])\n  fi\nfi\nAC_SUBST(LIB_SIA)\n\nAC_ARG_ENABLE(auth-sasldb, [  --enable-auth-sasldb    enable experimental SASLdb authentication module [no] ],\n  authsasldb=$enableval,\n  authsasldb=no)\nif test \"$authsasldb\" != no; then\n  AC_DEFINE(AUTH_SASLDB,[],[Include SASLdb Support])\n  SASL_DB_PATH_CHECK()\n  SASL_DB_CHECK()\nfi\nAM_CONDITIONAL(AUTH_SASLDB, test \"$authsasldb\" != no)\n\nAC_ARG_ENABLE(httpform, [  --enable-httpform       enable HTTP form authentication [[no]] ],\n  httpform=$enableval,\n  httpform=no)\nif test \"$httpform\" != no; then\n  AC_DEFINE(HAVE_HTTPFORM,[],[Include HTTP form Support])\nfi\n\nAC_ARG_WITH(pam, AC_HELP_STRING([--with-pam=DIR], [use PAM (rooted in DIR) [yes]]),,\n\twith_pam=yes)\nif test \"$with_pam\" != no; then\n  if test -d $with_pam; then\n    CPPFLAGS=\"$CPPFLAGS -I${with_pam}/include\"\n    LDFLAGS=\"$LDFLAGS -L${with_pam}/lib\"\n  fi\n  cmu_save_LIBS=\"$LIBS\"\n  AC_CHECK_LIB(pam, pam_start, [\n  AC_CHECK_HEADER(security/pam_appl.h,,\n\t\t  with_pam=no)],\n\twith_pam=no, $SASL_DL_LIB)\n  LIBS=\"$cmu_save_LIBS\"\nfi\n\nAC_MSG_CHECKING(for PAM support)\nAC_MSG_RESULT($with_pam)\nLIB_PAM=\"\"\nif test \"$with_pam\" != no; then\n  AC_DEFINE(HAVE_PAM,[],[Support for PAM?])\n  LIB_PAM=\"-lpam\"\nfi\nAC_SUBST(LIB_PAM)\n\ndnl PLAIN\nSASL_PLAIN_CHK\n\ndnl ANONYMOUS\nAC_ARG_ENABLE(anon, [  --enable-anon           enable ANONYMOUS authentication [[yes]] ],\n  anon=$enableval,\n  anon=yes)\n\nAC_MSG_CHECKING(ANONYMOUS)\nif test \"$anon\" != no; then\n  AC_MSG_RESULT(enabled)\n  SASL_MECHS=\"$SASL_MECHS libanonymous.la\"\n  if test \"$enable_static\" = yes; then\n    SASL_STATIC_OBJS=\"$SASL_STATIC_OBJS anonymous.o\"\n    SASL_STATIC_SRCS=\"$SASL_STATIC_SRCS \\$(top_srcdir)/plugins/anonymous.c\"\n    AC_DEFINE(STATIC_ANONYMOUS, [], [Link ANONYMOUS Statically])\n  fi\nelse\n  AC_MSG_RESULT(disabled)\nfi\n\ndnl LOGIN\nAC_ARG_ENABLE(login, [  --enable-login          enable unsupported LOGIN authentication [[no]] ],\n  login=$enableval,\n  login=no)\n\nAC_MSG_CHECKING(LOGIN)\nif test \"$login\" != no; then\n  AC_MSG_RESULT(enabled)\n  SASL_MECHS=\"$SASL_MECHS liblogin.la\"\n  if test \"$enable_static\" = yes; then\n    SASL_STATIC_SRCS=\"$SASL_STATIC_SRCS \\$(top_srcdir)/plugins/login.c\"\n    SASL_STATIC_OBJS=\"$SASL_STATIC_OBJS login.o\"\n    AC_DEFINE(STATIC_LOGIN,[],[Link LOGIN Statically])\n  fi\nelse\n  AC_MSG_RESULT(disabled)\nfi\n\ndnl NTLM\nAC_ARG_ENABLE(ntlm, [  --enable-ntlm           enable unsupported NTLM authentication [[no]] ],\n  ntlm=$enableval,\n  ntlm=no)\n\nif test \"$with_openssl\" = no; then\n  AC_WARN([OpenSSL not found -- NTLM will be disabled])\n  ntlm=no\nfi\n\nAC_MSG_CHECKING(NTLM)\nif test \"$ntlm\" != no; then\n  AC_MSG_RESULT(enabled)\n  NTLM_LIBS=\"-lcrypto $LIB_RSAREF\"\n  AC_SUBST(NTLM_LIBS)\n\n  SASL_MECHS=\"$SASL_MECHS libntlm.la\"\n  if test \"$enable_static\" = yes; then\n    SASL_STATIC_SRCS=\"$SASL_STATIC_SRCS \\$(top_srcdir)/plugins/ntlm.c\"\n    SASL_STATIC_OBJS=\"$SASL_STATIC_OBJS ntlm.o\"\n    AC_DEFINE(STATIC_NTLM,[],[Link NTLM Statically])\n  fi\nelse\n  AC_MSG_RESULT(disabled)\nfi\n\ndnl PASSDSS\nAC_ARG_ENABLE(passdss, [  --enable-passdss        enable PASSDSS authentication (experimental) [[no]] ],\n  passdss=$enableval,\n  passdss=no)\n\nif test \"$with_openssl\" = no; then\n  AC_WARN([OpenSSL not found -- PASSDSS will be disabled])\n  passdss=no\nfi\n\nAC_MSG_CHECKING(PASSDSS)\nif test \"$passdss\" != no; then\n  AC_MSG_RESULT(enabled)\n  PASSDSS_LIBS=\"-lcrypto $LIB_RSAREF\"\n  AC_SUBST(PASSDSS_LIBS)\n\n  SASL_MECHS=\"$SASL_MECHS libpassdss.la\"\n  if test \"$enable_static\" = yes; then\n    SASL_STATIC_OBJS=\"$SASL_STATIC_OBJS passdss.o\"\n    SASL_STATIC_SRCS=\"$SASL_STATIC_SRCS \\$(top_srcdir)/plugins/passdss.c\"\n    AC_DEFINE(STATIC_PASSDSS,[],[Link PASSDSS Statically])\n  fi\nelse\n  AC_MSG_RESULT(disabled)\nfi\n\n\nAC_MSG_CHECKING(to include LDAP support)\nAC_ARG_WITH(ldap, [  --with-ldap=DIR         use LDAP (in DIR) for saslauthd [no] ],\n\twith_ldap=$withval,\n\twith_ldap=no)\nAC_MSG_RESULT($with_ldap)\n\nif test -d $with_ldap; then\n    CPPFLAGS=\"$CPPFLAGS -I${with_ldap}/include\"\n    CMU_ADD_LIBPATH(${with_ldap}/lib)\nfi\n\nLDAP_LIBS=\"\"\nif test \"$with_ldap\" != no; then\n  AC_CHECK_LIB(ldap, ldap_initialize, [ AC_DEFINE(HAVE_LDAP,[],[Support for LDAP?])\n                                        LDAP_LIBS=\"-lldap -llber\"\n\t\t\t\t\tif test \"$with_openssl\" != \"no\"; then\n\t\t\t\t\t    LDAP_LIBS=\"$LDAP_LIBS -lcrypto $LIB_RSAREF\"\n\t\t\t\t\tfi],,-llber)\nfi\nAC_SUBST(LDAP_LIBS)\n\n\ndnl SQL\ndnl This flag also changes the requirements of --with-mysql and --with-pgsql\ndnl\ndnl Desired behavior:\ndnl\ndnl doesn't require mysql or postgres if --disable-sql is chosen\ndnl requires at least one (but not both) if --enable-sql is chosen\n\nAC_ARG_ENABLE(sql, [  --enable-sql            enable SQL auxprop [[no]] ],\n  sql=$enableval,\n  sql=no)\n\nAC_MSG_CHECKING(SQL)\nif test \"$sql\" != no; then\n  AC_MSG_RESULT(enabled)\n  SASL_MECHS=\"$SASL_MECHS libsql.la\"\n  if test \"$enable_static\" = yes; then\n    SASL_STATIC_SRCS=\"$SASL_STATIC_SRCS \\$(top_srcdir)/plugins/sql.c\"\n    SASL_STATIC_OBJS=\"$SASL_STATIC_OBJS sql.o\"\n    AC_DEFINE(STATIC_SQL,[],[Link SQL plugin statically])\n  fi\nelse\n  AC_MSG_RESULT(disabled)\nfi\n\ndnl MySQL\nAC_ARG_WITH(mysql,  [  --with-mysql=PATH       use MySQL from PATH ],\n  with_mysql=$withval,\n  with_mysql=$sql)\n\n# find location of library \n# presuming if one given then correct\nif test \"${with_mysql}\" = \"yes\"; then\n  with_mysql=notfound\n  for mysqlloc in lib/mysql lib mysql/lib\n  do\n    if test -f ${prefix}/${mysqlloc}/libmysqlclient.a; then\n      with_mysql=\"${prefix}\"\n      break\n    elif test -f /usr/local/${mysqlloc}/libmysqlclient.a; then\n      with_mysql=\"/usr/local\"\n      break\n    elif test -f /usr/${mysqlloc}/libmysqlclient.a; then\n      with_mysql=\"/usr\"\n      break\n    fi\n  done\nfi\n\nLIB_MYSQL=\"\"\n\ncase \"$with_mysql\" in\n    no) true;;\n    notfound)\n     save_LDFLAGS=$LDFLAGS\n     LIB_MYSQL=`mysql_config --libs`\n     LIB_MYSQL=\"-lmysqlclient\"\n     LDFLAGS=\"$LDFLAGS $LIB_MYSQL\"\n     # CPPFLAGS=\"${CPPFLAGS} `mysql_config --include`\"\n     AC_CHECK_LIB(mysqlclient, mysql_select_db,\n           AC_DEFINE(HAVE_MYSQL, [], [Do we have mysql support?]),\n           [AC_WARN([MySQL library mysqlclient does not work])\n            with_mysql=no])\n     LDFLAGS=$save_LDFLAGS\n     ;;\n    *)\n     if test -d ${with_mysql}/lib/mysql; then\n\tCMU_ADD_LIBPATH_TO(${with_mysql}/lib/mysql, LIB_MYSQL)\n     elif test -d ${with_mysql}/mysql/lib; then\n\tCMU_ADD_LIBPATH_TO(${with_mysql}/mysql/lib, LIB_MYSQL)\n     elif test -d ${with_mysql}/lib; then\n\tCMU_ADD_LIBPATH_TO(${with_mysql}/lib, LIB_MYSQL)\n     else\n\tCMU_ADD_LIBPATH_TO(${with_mysql}, LIB_MYSQL)\n     fi\n\n     LIB_MYSQL_DIR=$LIB_MYSQL\n     LIB_MYSQL=\"$LIB_MYSQL -lmysqlclient\"\n\n     if test -d ${with_mysql}/include/mysql; then\n         CPPFLAGS=\"${CPPFLAGS} -I${with_mysql}/include/mysql\"\n     elif test -d ${with_mysql}/mysql/include; then\n         CPPFLAGS=\"${CPPFLAGS} -I${with_mysql}/mysql/include\"\n     elif test -d ${with_mysql}/include; then\n         CPPFLAGS=\"${CPPFLAGS} -I${with_mysql}/include\"\n     elif test -d ${prefix}/include/mysql; then\n         CPPFLAGS=\"${CPPFLAGS} -I${prefix}/include/mysql\"\n     else\n         CPPFLAGS=\"${CPPFLAGS} -I${with_mysql}\"\n     fi\n\n       save_LDFLAGS=$LDFLAGS\n       LDFLAGS=\"$LDFLAGS $LIB_MYSQL_DIR\"\n       AC_CHECK_LIB(mysqlclient, mysql_select_db,\n\t   AC_DEFINE(HAVE_MYSQL, [], [Do we have mysql support?]),\n           [AC_WARN([MySQL library mysqlclient does not work])\n\t    with_mysql=no])\n       LDFLAGS=$save_LDFLAGS;;\n         \nesac\nAC_SUBST(LIB_MYSQL)\n\ndnl PgSQL\nAC_ARG_WITH(pgsql,  [  --with-pgsql=PATH       use PostgreSQL from PATH ],\n  with_pgsql=$withval,\n  with_pgsql=$sql)\n\n# find location of library \n# presuing if one given then correct\nif test \"${with_pgsql}\" = \"yes\"; then\n  with_pgsql=notfound\n  for pgsqlloc in lib/pgsql lib pgsql/lib\n  do\n    if test -f ${prefix}/${pgsqlloc}/libpq.a; then\n      with_pgsql=\"${prefix}\"\n      break\n    elif test -f /usr/local/${pgsqlloc}/libpq.a; then\n      with_pgsql=\"/usr/local\"\n      break\n    elif test -f /usr/${pgsqlloc}/libpq.a; then\n      with_pgsql=\"/usr\"\n      break\n    fi\n  done\nfi\n\nLIB_PGSQL=\"\"\n\ncase \"$with_pgsql\" in\n    no) true;;\n    notfound)\n     LIB_PGSQL=\"-lpq\"\n     # CPPFLAGS=\"${CPPFLAGS} -I`pg_config --includedir`\"\n     save_LDFLAGS=$LDFLAGS\n     LDFLAGS=\"$LDFLAGS $LIB_PGSQL\"\n     AC_CHECK_LIB(pq, PQsetdbLogin, AC_DEFINE(HAVE_PGSQL,[],\n         [Do we have Postgres support?]),\n         [AC_WARN([PostgreSQL Library pq does not work])\n          with_pgsql=no])\n     LDFLAGS=$save_LDFLAGS\n     ;;\n    *)\n     if test -d ${with_pgsql}/lib/pgsql; then\n\tCMU_ADD_LIBPATH_TO(${with_pgsql}/lib/pgsql, LIB_PGSQL)\n     elif test -d ${with_pgsql}/pgsql/lib; then\n\tCMU_ADD_LIBPATH_TO(${with_pgsql}/pgsql/lib, LIB_PGSQL)\n     elif test -d ${with_pgsql}/lib; then\n\tCMU_ADD_LIBPATH_TO(${with_pgsql}/lib, LIB_PGSQL)\n     else\n\tCMU_ADD_LIBPATH_TO(${with_pgsql}, LIB_PGSQL)\n     fi\n\n     LIB_PGSQL_DIR=$LIB_PGSQL\n     LIB_PGSQL=\"$LIB_PGSQL -lpq\"\n\n     if test -d ${with_pgsql}/include/pgsql; then\n         CPPFLAGS=\"${CPPFLAGS} -I${with_pgsql}/include/pgsql\"\n     elif test -d ${with_pgsql}/pgsql/include; then\n         CPPFLAGS=\"${CPPFLAGS} -I${with_pgsql}/pgsql/include\"\n     elif test -d ${with_pgsql}/include; then\n         CPPFLAGS=\"${CPPFLAGS} -I${with_pgsql}/include\"\n     elif test -d ${prefix}/include; then\n         CPPFLAGS=\"${CPPFLAGS} -I${prefix}/include\"\n     else\n         CPPFLAGS=\"${CPPFLAGS} -I${with_pgsql}\"\n     fi\n\n\n       save_LDFLAGS=$LDFLAGS\n       LDFLAGS=\"$LDFLAGS $LIB_PGSQL_DIR\"\n       AC_CHECK_LIB(pq, PQsetdbLogin, AC_DEFINE(HAVE_PGSQL,[],\n\t   [Do we have Postgres support?]),\n           [AC_WARN([PostgreSQL Library pq does not work])\n\t    with_pgsql=no])\n       LDFLAGS=$save_LDFLAGS;;\n         \nesac\nAC_SUBST(LIB_PGSQL)\n\ndnl SQLite\nAC_ARG_WITH(sqlite,  [  --with-sqlite=PATH       use SQLite from PATH ],\n  with_sqlite=$withval,\n  with_sqlite=$sql)\n\n# find location of library\n# presuing if one given then correct\nif test \"${with_sqlite}\" = \"yes\"; then\n  with_sqlite=notfound\n  for sqliteloc in lib\n  do\n    if test -f ${prefix}/${sqliteloc}/libsqlite.a; then\n      with_sqlite=\"${prefix}\"\n      break\n    elif test -f /usr/local/${sqliteloc}/libsqlite.a; then\n      with_sqlite=\"/usr/local\"\n      break\n    elif test -f /usr/${sqliteloc}/libsqlite.a; then\n      with_sqlite=\"/usr\"\n      break\n    fi\n  done\nfi\n\nLIB_SQLITE=\"\"\n\ncase \"$with_sqlite\" in\n    no) true;;\n    notfound) AC_WARN([SQLite Library not found]); true;;\n    *)\n     if test -d ${with_sqlite}/lib; then\n         CMU_ADD_LIBPATH_TO(${with_sqlite}/lib, LIB_SQLITE)\n     else\n         CMU_ADD_LIBPATH_TO(${with_sqlite}, LIB_SQLITE)\n     fi\n\n     LIB_SQLITE_DIR=$LIB_SQLITE\n     LIB_SQLITE=\"$LIB_SQLITE -lsqlite\"\n\n     if test -d ${with_sqlite}/include; then\n         CPPFLAGS=\"${CPPFLAGS} -I${with_sqlite}/include\"\n     else\n         CPPFLAGS=\"${CPPFLAGS} -I${with_sqlite}\"\n     fi\n       AC_CHECK_LIB(sqlite, sqlite_open, AC_DEFINE(HAVE_SQLITE,[],\n\t   [Do we have SQLite support?]),\n           [AC_WARN([SQLite Library sqlite does not work])\n\t    with_sqlite=no], $LIB_SQLITE_DIR);;\n\nesac\nAC_SUBST(LIB_SQLITE)\n\ndnl SQLite3\nAC_ARG_WITH(sqlite3,  [  --with-sqlite3=PATH       use SQLite3 from PATH ],\n  with_sqlite3=$withval,\n  with_sqlite3=$sql)\n\n# find location of library\n# we assume that if one given then it is correct\nif test \"${with_sqlite3}\" = \"yes\"; then\n  with_sqlite3=notfound\n  for sqlite3loc in lib\n  do\n    if test -f ${prefix}/${sqlite3loc}/libsqlite3.a; then\n      with_sqlite3=\"${prefix}\"\n      break\n    elif test -f /usr/local/${sqlite3loc}/libsqlite3.a; then\n      with_sqlite3=\"/usr/local\"\n      break\n    elif test -f /usr/${sqlite3loc}/libsqlite3.a; then\n      with_sqlite3=\"/usr\"\n      break\n    fi\n  done\nfi\n\nLIB_SQLITE3=\"\"\n\ncase \"$with_sqlite3\" in\n    no) true;;\n    notfound) AC_WARN([SQLite3 Library not found]); true;;\n    *)\n     if test -d ${with_sqlite3}/lib; then\n         CMU_ADD_LIBPATH_TO(${with_sqlite3}/lib, LIB_SQLITE3)\n     else\n         CMU_ADD_LIBPATH_TO(${with_sqlite3}, LIB_SQLITE3)\n     fi\n\n     LIB_SQLITE3_DIR=$LIB_SQLITE3\n     LIB_SQLITE3=\"$LIB_SQLITE3 -lsqlite3\"\n\n     if test -d ${with_sqlite3}/include; then\n         CPPFLAGS=\"${CPPFLAGS} -I${with_sqlite3}/include\"\n     else\n         CPPFLAGS=\"${CPPFLAGS} -I${with_sqlite3}\"\n     fi\n       AC_CHECK_LIB(sqlite3, sqlite3_open, AC_DEFINE(HAVE_SQLITE3,[],\n\t   [Do we have SQLite3 support?]),\n           [AC_WARN([SQLite3 Library sqlite3 does not work])\n\t    with_sqlite3=no], $LIB_SQLITE3_DIR);;\n\nesac\nAC_SUBST(LIB_SQLITE3)\n\nif test \"$sql\" = yes -a \"$with_pgsql\" = no -a \"$with_mysql\" = no -a \"$with_sqlite\" = no -a \"$with_sqlite3\" = no; then\n    AC_MSG_ERROR([--enable-sql chosen but neither Postgres nor MySQL nor SQLite nor SQLite3 found])\nfi\n\nif test \"$enable_shared\" = yes; then\n\tAC_DEFINE(DO_DLOPEN,[],[Should we build a shared plugin (via dlopen) library?])\nfi\n\ndnl LDAPDB\nAC_ARG_ENABLE(ldapdb, [  --enable-ldapdb         enable LDAPDB plugin [no] ],\n  ldapdb=$enableval,\n  ldapdb=no)\nAC_MSG_CHECKING(LDAPDB)\nif test \"$ldapdb\" != no; then\n    AC_MSG_RESULT(enabled)\n\n    if test \"$with_ldap\" = no; then\n        AC_MSG_ERROR([Cannot enable LDAPDB plugin: You need to specify --with-ldap])\n    fi\n\n    save_CPPFLAGS=$CPPFLAGS\n    save_LDFLAGS=$LDFLAGS\n\n    if test -d $with_ldap; then\n        CPPFLAGS=\"${CPPFLAGS} -I${with_ldap}/include\"\n        CMU_ADD_LIBPATH(${with_ldap}/lib)\n    fi\n\n    AC_CHECK_HEADERS(ldap.h lber.h)\n\n    if test $ac_cv_header_ldap_h = yes -a $ac_cv_header_lber_h = yes; then\n        CMU_OPENLDAP_API\n\n        if test \"$cmu_cv_openldap_api\" = yes; then\n            AC_CHECK_LIB(ldap, ldap_initialize, [ cmu_link_openldap=\"-lldap -llber\" ], [ cmu_link_openldap=no ],-llber)\n        fi\n    fi\n\n    if test \"$cmu_cv_openldap_api\" = no -o \"$cmu_link_openldap\" = no; then\n        AC_MSG_ERROR([Cannot enable LDAPDB plugin: Could not locate OpenLDAP])\n    else\n        CMU_OPENLDAP_COMPAT\n\n        if test \"$cmu_cv_openldap_compat\" = no; then\n            AC_MSG_ERROR([Cannot enable LDAPDB plugin: OpenLDAP library located but incompatible])\n        else\n            LIB_LDAP=$cmu_link_openldap\n            AC_SUBST(LIB_LDAP)\n\n            SASL_MECHS=\"$SASL_MECHS libldapdb.la\"\n            if test \"$enable_static\" = yes; then\n                SASL_STATIC_SRCS=\"$SASL_STATIC_SRCS \\$(top_srcdir)/plugins/ldapdb.c\"\n                SASL_STATIC_OBJS=\"$SASL_STATIC_OBJS ldapdb.o\"\n                AC_DEFINE(STATIC_LDAPDB,[],[Link ldapdb plugin Statically])\n            fi\n        fi\n    fi\n\n    if test \"$cmu_cv_openldap_compat\" != yes; then\n        CPPFLAGS=$save_CPPFLAGS\n        LDFLAGS=$save_LDFLAGS\n    fi\nelse\n    AC_MSG_RESULT(disabled)\nfi\n\nAC_SUBST(SASL_MECHS)\nAC_SUBST(SASL_STATIC_SRCS)\nAC_SUBST(SASL_STATIC_OBJS)\nAC_SUBST(SASL_STATIC_LIBS)\n\nAC_ARG_WITH(plugindir, [  --with-plugindir=DIR    set the directory where plugins will\n                          be found [[LIBDIR/sasl2]] ],\n  plugindir=$withval,\n  plugindir='${libdir}/sasl2')\nAC_SUBST(plugindir)\n\nAC_ARG_WITH(configdir, [   --with-configdir=DIR    set the directory where config files will\n                          be found [PLUGINDIR:SYSCONFDIR/sasl2] ],\n  configdir=$withval,\n  configdir='${plugindir}:${sysconfdir}/sasl2')\nAC_SUBST(configdir)\n\ndnl look for rc4 libraries. we accept the CMU one or one from openSSL\nAC_ARG_WITH(rc4, [  --with-rc4              use internal rc4 routines [[yes]] ],\n\twith_rc4=$withval,\n\twith_rc4=yes)\n\nif test \"$with_rc4\" != no; then\n    AC_DEFINE(WITH_RC4,[],[Use internal RC4 implementation?])\nfi\n\nbuilding_for_macosx=no\ncase \"$host_os\" in\n        darwin*)\nAC_ARG_ENABLE(macos-framework, [  --disable-macos-framework       disable building and installing replacement SASL2 Framework for MacOS X-provided SASL Framework [[no]]],building_for_macosx=no,building_for_macosx=yes)\n        ;;\nesac\nAM_CONDITIONAL(MACOSX, test \"$building_for_macosx\" = yes)\nAM_CONDITIONAL(WINDOWS, test \"$host_os\" = \"mingw32\")\n\ndnl dmalloc tests\nAC_MSG_CHECKING(for dmalloc library)\nAC_ARG_WITH(dmalloc, [  --with-dmalloc=DIR      with DMALLOC support (for test applications) [[no]] ],\n\twith_dmalloc=$withval,\n\twith_dmalloc=no)\n\nDMALLOC_LIBS=\"\"\n\nif test \"$with_dmalloc\" != \"no\"; then\n   if test \"$with_dmalloc\" = \"yes\"; then\n\twith_dmalloc=\"/usr/local\"\n   fi\n\n   if test -r \"$with_dmalloc/libdmalloc.a\"; then\n\tDMALLOC_LIBS=\"$with_dmalloc/libdmalloc.a\"\n\tAC_DEFINE(WITH_DMALLOC,[],[Linking against dmalloc?])\n\tAC_MSG_RESULT(yes)\n   elif test -r \"$with_dmalloc/lib/libdmalloc.a\"; then\n\tDMALLOC_LIBS=\"$with_dmalloc/lib/libdmalloc.a\"\n\tAC_DEFINE(WITH_DMALLOC,[],[Linking against dmalloc?])\n\tAC_MSG_RESULT(yes)\n   else\n\tAC_MSG_ERROR(cannot find dmalloc library, please check your installation.)\n   fi\nelse\n   AC_MSG_RESULT(no)\nfi\n\nAC_SUBST(DMALLOC_LIBS)\n\ndnl sfio tests\nAC_MSG_CHECKING(for sfio library)\nAC_ARG_WITH(sfio, [  --with-sfio=DIR         with SFIO support (for smtptest/libsfsasl) [[no]] ],\n\twith_sfio=$withval,\n\twith_sfio=no)\n\nif test \"$with_sfio\" != \"no\"; then\n   if test \"$with_sfio\" = \"yes\"; then\n\twith_sfio=\"/usr/local\"\n   fi\n\n   AC_DEFUN([SFIO_INC_CHK],\n\t[if test -r \"$with_sfio$1/sfio.h\"; then SFIO_DIR=$with_sfio;\n\t\t\t\t\t      SFIO_INC_DIR=$with_sfio$1])\n\n   AC_DEFUN([SFIO_LIB_CHK],[\n\t\tstr=\"$SFIO_DIR/$1/libsfio.*\"\n\t\tfor i in `echo $str`; do\n\t\t\tif test -r $i; then\n\t\t\t\tSFIO_LIBDIR=$SFIO_DIR/$1\n\t\t\t\tbreak 2\n\t\t\tfi\n\t\tdone\n\t\t])\n\n   SFIO_INC_CHK()\n   el[]SFIO_INC_CHK(/include)\n   el[]SFIO_INC_CHK(/include/sfio)\n   fi\n\n   if test -z \"$SFIO_DIR\"; then\n\tAC_MSG_ERROR(Cannot find sfio.h, Please check your SFIO installation.)\n   fi\n\n   SFIO_LIB_CHK(lib)\n   SFIO_LIB_CHK(lib/sfio)\n\n   if test -z \"$SFIO_LIBDIR\"; then\n\tAC_MSG_ERROR(Cannot find sfio library, Please check your SFIO installation.)\n   fi\n\n   SFIO_INC_FLAGS=\"-I$SFIO_INC_DIR\"\n   SFIO_LIB_FLAGS=\"-L$SFIO_LIBDIR -lsfio\"\n   SMTPTEST_PROGRAM=\"smtptest\"\n   SASL_UTIL_LIBS_EXTRA=libsfsasl2.la\n   SASL_UTIL_HEADERS_EXTRA=sfsasl.h\n\n   AC_MSG_RESULT(yes)\nelse\n   AC_MSG_RESULT(no)\n   SFIO_INC_FLAGS=\"\"\n   SFIO_LIB_FLAGS=\"\"\n   SMTPTEST_PROGRAM=\"\"\n   SASL_UTIL_LIBS_EXTRA=\"\"\n   SASL_UTIL_HEADERS_EXTRA=\"\"\nfi\n\nAC_SUBST(SFIO_INC_FLAGS)\nAC_SUBST(SFIO_LIB_FLAGS)\nAC_SUBST(SMTPTEST_PROGRAM)\nAC_SUBST(SASL_UTIL_LIBS_EXTRA)\nAC_SUBST(SASL_UTIL_HEADERS_EXTRA)\n\ndnl check for getsubopt\nsasl_cv_getsubopt=no\nAC_CHECK_FUNC(getsubopt, [AC_DEFINE(HAVE_GETSUBOPT,[],\n\t[do we have getsubopt()?])], [sasl_cv_getsubopt=yes])\nif test $sasl_cv_getsubopt = yes; then\n\tAC_LIBOBJ(getsubopt)\n\tGETSUBOPT=\"getsubopt.lo\"\nfi\nAC_SUBST(GETSUBOPT)\n\ndnl Check for snprintf\nsasl_cv_snprintf=no\nSNPRINTFOBJS=\"\"\nLTSNPRINTFOBJS=\"\"\nAC_CHECK_FUNC(snprintf, [AC_DEFINE(HAVE_SNPRINTF,[],[Does the system have snprintf()?])], [sasl_cv_snprintf=yes])\nAC_CHECK_FUNC(vsnprintf, [AC_DEFINE(HAVE_VSNPRINTF,[],[Does the system have vsnprintf()?])], [sasl_cv_snprintf=yes])\nif test $sasl_cv_snprintf = yes; then\n       AC_LIBOBJ(snprintf)\n       SNPRINTFOBJS=\"snprintf.o\"\n       LTSNPRINTFOBJS=\"snprintf.lo\"\nfi\nAC_SUBST(SNPRINTFOBJS)\nAC_SUBST(LTSNPRINTFOBJS)\n\ndnl do we need to link in -lresolv?\nAC_CHECK_LIB(resolv, inet_aton)\n\ndnl Check for getaddrinfo\nGETADDRINFOOBJS=\"\"\nsasl_cv_getaddrinfo=yes\nIPv6_CHECK_FUNC(getaddrinfo, [IPv6_CHECK_FUNC(gai_strerror,\n                [AC_DEFINE(HAVE_GETADDRINFO,[],[Do we have a getaddrinfo() function?])\n                sasl_cv_getaddrinfo=no])])\nif test $sasl_cv_getaddrinfo = yes; then\n    AC_LIBOBJ(getaddrinfo)\n    GETADDRINFOOBJS=\"getaddrinfo.o\"\n    LTGETADDRINFOOBJS=\"getaddrinfo.lo\"\nfi\nAC_SUBST(GETADDRINFOOBJS)\nAC_SUBST(LTGETADDRINFOOBJS)\n\ndnl Check for getnameinfo\nGETNAMEINFOOBJS=\"\"\nsasl_cv_getnameinfo=no\nIPv6_CHECK_FUNC(getnameinfo,\n\t\t[AC_DEFINE(HAVE_GETNAMEINFO,[],[Do we have a getnameinfo() function?])], [sasl_cv_getnameinfo=yes])\nif test $sasl_cv_getnameinfo = yes; then\n\tAC_LIBOBJ(getnameinfo)\n        GETNAMEINFOOBJS=\"getnameinfo.o\"\n        LTGETNAMEINFOOBJS=\"getnameinfo.lo\"\nfi\nAC_SUBST(GETNAMEINFOOBJS)\nAC_SUBST(LTGETNAMEINFOOBJS)\n\nLTLIBOBJS=`echo \"$LIB@&t@OBJS\" | sed 's,\\.[[^.]]* ,.lo ,g;s,\\.[[^.]]*$,.lo,'`\nAM_CONDITIONAL(BUILD_LIBOBJ, test \"$LTLIBOBJS\" != \"\")\nAC_SUBST(LTLIBOBJS)\n\nAC_C_CONST\nAC_C_INLINE\nAC_TYPE_MODE_T\nAC_TYPE_PID_T\nAC_TYPE_SIGNAL\n\nAC_HEADER_TIME\nAC_HEADER_STDC\nAC_HEADER_DIRENT\nAC_HEADER_SYS_WAIT\nAC_CHECK_HEADERS(crypt.h des.h dlfcn.h fcntl.h limits.h malloc.h paths.h strings.h sys/file.h sys/time.h syslog.h unistd.h inttypes.h sys/uio.h sys/param.h sysexits.h stdarg.h varargs.h krb5.h)\n\nIPv6_CHECK_SS_FAMILY()\nIPv6_CHECK_SA_LEN()\nIPv6_CHECK_SOCKLEN_T()\n\n#AC_FUNC_MEMCMP\n#AC_FUNC_VPRINTF\nAC_CHECK_FUNCS(gethostname getdomainname getpwnam getspnam gettimeofday inet_aton memcpy mkdir select socket strchr strdup strerror strspn strstr strtol jrand48 getpassphrase asprintf strlcat strlcpy)\n\nif test $ac_cv_func_getspnam = yes; then\n\tAC_MSG_CHECKING(if getpwnam_r/getspnam_r take 5 arguments)\n\tAC_TRY_COMPILE(\n\t\t[\n#include <sys/types.h>\n#include <pwd.h>\n#include <shadow.h>\n\t\t],\n\t\t[\nstruct passwd *pw;\nstruct passwd pwbuf;\nchar pwdata[512];\n(void) getpwnam_r(\"bin\", &pwbuf, pwdata, sizeof(pwdata), &pw);\n\t\t],\n\t\t[AC_MSG_RESULT(yes)\n\t\t AC_DEFINE(GETXXNAM_R_5ARG, 1,\n\t\t\t[Define if your getpwnam_r()/getspnam_r()\n\t\t\tfunctions take 5 arguments])],\n\t\t[AC_MSG_RESULT(no)]\n\t)\nfi\n\nif test $enable_cmulocal = yes; then\n    AC_WARN([enabling CMU local kludges])\n    AC_DEFINE(KRB4_IGNORE_IP_ADDRESS,[],[Ignore IP Address in Kerberos 4 tickets?])\n    AC_DEFINE_UNQUOTED(PREFER_MECH, \"KERBEROS_V4\", [Force a preferred mechanism])\nfi\n\nAC_EGREP_HEADER(sockaddr_storage, sys/socket.h, [\n\t\tAC_DEFINE(HAVE_STRUCT_SOCKADDR_STORAGE,[],[Do we have struct sockaddr_stroage?])])\n\nAC_SUBST(DIRS)\n\ndnl documentation generation (sphinx, perl2rst)\nAC_ARG_VAR(SPHINX_BUILD, [Location of sphinx-build])\nAC_ARG_WITH([sphinx-build],\n            AS_HELP_STRING([with-sphinx-build=(yes|no|PATH)], [Look for sphinx-build in PATH]),\n            [with_sphinx_build=$withval],\n            [with_sphinx_build=yes])\nAS_CASE([$with_sphinx_build],\n        [yes],  [AC_PATH_PROG(SPHINX_BUILD, sphinx-build)],\n        [no],   [SPHINX_BUILD=''],\n        [*],    [AC_PATH_PROG(SPHINX_BUILD, sphinx-build, [], [$with_sphinx_build])])\nAS_IF([test -z \"$SPHINX_BUILD\"],\n      [AC_MSG_WARN([No sphinx-build, won't be able to regenerate docs])])\nAC_SUBST([SPHINX_BUILD])\nAC_PROG_PERL_MODULES([Pod::POM::View::Restructured],\n                     [have_ppvr=yes],\n                     [AC_MSG_WARN([No Pod::POM::View::Restructured, won't be able to regenerate docs])])\nAM_CONDITIONAL([HAVE_SPHINX_BUILD], [ test -n \"$SPHINX_BUILD\" -a x\"$have_ppvr\" = xyes])\n\n\nAH_TOP([\n/* acconfig.h - autoheader configuration input */\n/* \n * Copyright (c) 1998-2003 Carnegie Mellon University.  All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer. \n *\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in\n *    the documentation and/or other materials provided with the\n *    distribution.\n *\n * 3. The name \"Carnegie Mellon University\" must not be used to\n *    endorse or promote products derived from this software without\n *    prior written permission. For permission or any other legal\n *    details, please contact  \n *      Office of Technology Transfer\n *      Carnegie Mellon University\n *      5000 Forbes Avenue\n *      Pittsburgh, PA  15213-3890\n *      (412) 268-4387, fax: (412) 268-7395\n *      tech-transfer@andrew.cmu.edu\n *\n * 4. Redistributions of any form whatsoever must retain the following\n *    acknowledgment:\n *    \"This product includes software developed by Computing Services\n *     at Carnegie Mellon University (http://www.cmu.edu/computing/).\"\n *\n * CARNEGIE MELLON UNIVERSITY DISCLAIMS ALL WARRANTIES WITH REGARD TO\n * THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n * AND FITNESS, IN NO EVENT SHALL CARNEGIE MELLON UNIVERSITY BE LIABLE\n * FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN\n * AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING\n * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n */\n\n#ifndef CONFIG_H\n#define CONFIG_H\n])\n\nAH_BOTTOM([\n\n\n/* Create a struct iovec if we need one */\n#if !defined(_WIN32)\n#if !defined(HAVE_SYS_UIO_H)\n/* (win32 is handled in sasl.h) */\nstruct iovec {\n    char *iov_base;\n    long iov_len;\n};\n#else\n#include <sys/types.h>\n#include <sys/uio.h>\n#endif\n#endif\n\n/* location of the random number generator */\n#ifdef DEV_RANDOM\n#undef DEV_RANDOM\n#endif\n#define DEV_RANDOM SASL_DEV_RANDOM\n\n/* if we've got krb_get_err_txt, we might as well use it;\n   especially since krb_err_txt isn't in some newer distributions\n   (MIT Kerb for Mac 4 being a notable example). If we don't have\n   it, we fall back to the krb_err_txt array */\n#ifdef HAVE_KRB_GET_ERR_TEXT\n#define get_krb_err_txt krb_get_err_text\n#else\n#define get_krb_err_txt(X) (krb_err_txt[(X)])\n#endif\n\n/* Make Solaris happy... */\n#ifndef __EXTENSIONS__\n#define __EXTENSIONS__\n#endif\n\n/* Make Linux happy... */\n#ifndef _GNU_SOURCE\n#define _GNU_SOURCE\n#endif\n\n#define SASL_PATH_ENV_VAR \"SASL_PATH\"\n#define SASL_CONF_PATH_ENV_VAR \"SASL_CONF_PATH\"\n\n#include <stdlib.h>\n#include <sys/types.h>\n#ifndef WIN32\n# include <sys/socket.h>\n# include <netdb.h>\n# include <netinet/in.h>\n# ifdef HAVE_SYS_PARAM_H\n#  include <sys/param.h>\n# endif\n#else /* WIN32 */\n# include <winsock2.h>\n#endif /* WIN32 */\n#include <string.h>\n\n#ifndef HAVE_SOCKLEN_T\ntypedef unsigned int socklen_t;\n#endif /* HAVE_SOCKLEN_T */\n\n#if !defined(HAVE_STRUCT_SOCKADDR_STORAGE) && !defined(WIN32)\n#define\t_SS_MAXSIZE\t128\t/* Implementation specific max size */\n#define\t_SS_PADSIZE\t(_SS_MAXSIZE - sizeof (struct sockaddr))\n\nstruct sockaddr_storage {\n\tstruct\tsockaddr ss_sa;\n\tchar\t\t__ss_pad2[_SS_PADSIZE];\n};\n# define ss_family ss_sa.sa_family\n#endif /* !HAVE_STRUCT_SOCKADDR_STORAGE */\n\n#ifndef AF_INET6\n/* Define it to something that should never appear */\n#define\tAF_INET6\tAF_MAX\n#endif\n\n#ifndef HAVE_GETADDRINFO\n#define\tgetaddrinfo\tsasl_getaddrinfo\n#define\tfreeaddrinfo\tsasl_freeaddrinfo\n#define\tgai_strerror\tsasl_gai_strerror\n#endif\n\n#ifndef HAVE_GETNAMEINFO\n#define\tgetnameinfo\tsasl_getnameinfo\n#endif\n\n#if !defined(HAVE_GETNAMEINFO) || !defined(HAVE_GETADDRINFO)\n#include \"gai.h\"\n#endif\n\n#ifndef AI_NUMERICHOST   /* support glibc 2.0.x */\n#define AI_NUMERICHOST  4\n#define NI_NUMERICHOST  2\n#define NI_NAMEREQD     4\n#define NI_NUMERICSERV  8\n#endif\n\n/* Defined in RFC 1035. max strlen is only 253 due to length bytes. */\n#ifndef MAXHOSTNAMELEN\n#define        MAXHOSTNAMELEN  255\n#endif\n\n#ifndef HAVE_SYSEXITS_H\n#include \"exits.h\"\n#else\n#include \"sysexits.h\"\n#endif\n\n/* Get the correct time.h */\n#if TIME_WITH_SYS_TIME\n# include <sys/time.h>\n# include <time.h>\n#else\n# if HAVE_SYS_TIME_H\n#  include <sys/time.h>\n# else\n#  include <time.h>\n# endif\n#endif\n\n#ifndef HIER_DELIMITER\n#define HIER_DELIMITER '/'\n#endif\n\n#ifdef WIN32\n#define SASL_ROOT_KEY \"SOFTWARE\\\\Carnegie Mellon\\\\Project Cyrus\\\\SASL Library\"\n#define SASL_PLUGIN_PATH_ATTR \"SearchPath\"\n#define SASL_CONF_PATH_ATTR \"ConfFile\"\n\n#include <windows.h>\ninline static unsigned int sleep(unsigned int seconds) {\n       Sleep(seconds * 1000);\n       return 0;\n}\n#endif\n\n/* handy string manipulation functions */\n#ifndef HAVE_STRLCPY\nextern size_t saslauthd_strlcpy(char *dst, const char *src, size_t len);\n#define strlcpy(x,y,z) saslauthd_strlcpy((x),(y),(z))\n#endif\n#ifndef HAVE_STRLCAT\nextern size_t saslauthd_strlcat(char *dst, const char *src, size_t len);\n#define strlcat(x,y,z) saslauthd_strlcat((x),(y),(z))\n#endif\n#ifndef HAVE_ASPRINTF\nextern int asprintf(char **str, const char *fmt, ...);\n#endif\n\n#endif /* CONFIG_H */\n])\n\nAH_BOTTOM([#if defined __GNUC__ &&  __GNUC__ > 6\n    #define GCC_FALLTHROUGH __attribute__((fallthrough));\n#else\n    #define GCC_FALLTHROUGH /* fall through */\n#endif\n])\n\nAC_CONFIG_HEADERS(config.h)\n\nAC_OUTPUT(Makefile\nlibsasl2.pc\ninclude/Makefile\nsaslauthd/Makefile\nsasldb/Makefile\ncommon/Makefile\nplugins/Makefile\nlib/Makefile\nutils/Makefile\nsample/Makefile\njava/Makefile\njava/CyrusSasl/Makefile\njava/Test/Makefile\njava/javax/Makefile\njava/javax/security/Makefile\njava/javax/security/auth/Makefile\njava/javax/security/auth/callback/Makefile\npwcheck/Makefile)\n\nAC_MSG_NOTICE([\n\ncyrus-sasl - $VERSION\n\n\u2022 Prefix: $prefix\n\u2022 Plugins: $SASL_MECHS\n\nNow type 'make' to build $PACKAGE\n])\n",
        "/tmp/vanessa/spack-stage/spack-stage-cyrus-sasl-2.1.27-hnal7aquex6gy2ydqk4wp52b2upmktrt/spack-src/lib/windlopen.c": "/* windlopen.c--Windows dynamic loader interface\n * Ryan Troll\n */\n/* \n * Copyright (c) 1998-2016 Carnegie Mellon University.  All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer. \n *\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in\n *    the documentation and/or other materials provided with the\n *    distribution.\n *\n * 3. The name \"Carnegie Mellon University\" must not be used to\n *    endorse or promote products derived from this software without\n *    prior written permission. For permission or any other legal\n *    details, please contact  \n *      Carnegie Mellon University\n *      Center for Technology Transfer and Enterprise Creation\n *      4615 Forbes Avenue\n *      Suite 302\n *      Pittsburgh, PA  15213\n *      (412) 268-7393, fax: (412) 268-7395\n *      innovation@andrew.cmu.edu\n *\n * 4. Redistributions of any form whatsoever must retain the following\n *    acknowledgment:\n *    \"This product includes software developed by Computing Services\n *     at Carnegie Mellon University (http://www.cmu.edu/computing/).\"\n *\n * CARNEGIE MELLON UNIVERSITY DISCLAIMS ALL WARRANTIES WITH REGARD TO\n * THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n * AND FITNESS, IN NO EVENT SHALL CARNEGIE MELLON UNIVERSITY BE LIABLE\n * FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN\n * AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING\n * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n */\n\n#include <stdio.h>\n#include <io.h>\n#include <sys/stat.h>\n\n#include <config.h>\n#include <sasl.h>\n#include \"saslint.h\"\n#include \"staticopen.h\"\n\n#define DLL_SUFFIX\t_T(\".dll\")\n#define DLL_MASK\t_T(\"*\") DLL_SUFFIX\n#define DLL_MASK_LEN\t5 /* in symbols */\n\nconst int _is_sasl_server_static = 0;\n\n/* : inefficient representation, but works */\ntypedef struct lib_list \n{\n    struct lib_list *next;\n    HMODULE library;\n} lib_list_t;\n\nstatic lib_list_t *lib_list_head = NULL;\n\nint _sasl_locate_entry(void *library,\n\t\t       const char *entryname,\n\t\t       void **entry_point) \n{\n    if(entryname == NULL) {\n\t_sasl_log(NULL, SASL_LOG_ERR,\n\t\t  \"no entryname in _sasl_locate_entry\");\n\treturn SASL_BADPARAM;\n    }\n\n    if(library == NULL) {\n\t_sasl_log(NULL, SASL_LOG_ERR,\n\t\t  \"no library in _sasl_locate_entry\");\n\treturn SASL_BADPARAM;\n    }\n\n    if(entry_point == NULL) {\n\t_sasl_log(NULL, SASL_LOG_ERR,\n\t\t  \"no entrypoint output pointer in _sasl_locate_entry\");\n\treturn SASL_BADPARAM;\n    }\n\n    *entry_point = GetProcAddress(library, entryname);\n\n    if (*entry_point == NULL) {\n#if 0 /* This message appears to confuse people */\n\t_sasl_log(NULL, SASL_LOG_DEBUG,\n\t\t  \"unable to get entry point %s: %s\", entryname,\n\t\t  GetLastError());\n#endif\n\treturn SASL_FAIL;\n    }\n\n    return SASL_OK;\n}\n\nstatic int _sasl_plugin_load(const char *plugin, void *library,\n\t\t\t     const char *entryname,\n\t\t\t     int (*add_plugin)(const char *, void *)) \n{\n    void *entry_point;\n    int result;\n    \n    result = _sasl_locate_entry(library, entryname, &entry_point);\n    if(result == SASL_OK) {\n\tresult = add_plugin(plugin, entry_point);\n\tif(result != SASL_OK)\n\t    _sasl_log(NULL, SASL_LOG_DEBUG,\n\t\t      \"_sasl_plugin_load failed on %s for plugin: %s\\n\",\n\t\t      entryname, plugin);\n    }\n\n    return result;\n}\n\n/* loads a plugin library */\nstatic int _tsasl_get_plugin(TCHAR *tfile,\n    const sasl_callback_t *verifyfile_cb,\n    void **libraryptr)\n{\n    HINSTANCE library = NULL;\n    lib_list_t *newhead;\n    char *file;\n    int retCode = SASL_OK;\n\n    if (sizeof(TCHAR) != sizeof(char)) {\n        file = _sasl_wchar_to_utf8(tfile);\n        if (!file) {\n            retCode = SASL_NOMEM;\n            goto cleanup;\n        }\n    }\n    else {\n        file = (char*)tfile;\n    }\n    retCode = ((sasl_verifyfile_t *)(verifyfile_cb->proc))\n\t\t    (verifyfile_cb->context, file, SASL_VRFY_PLUGIN);\n    if (retCode != SASL_OK)\n        goto cleanup;\n\n    newhead = sasl_ALLOC(sizeof(lib_list_t));\n    if (!newhead) {\n        retCode = SASL_NOMEM;\n        goto cleanup;\n    }\n\n    if (!(library = LoadLibrary(tfile))) {\n\t    _sasl_log(NULL, SASL_LOG_ERR,\n\t\t      \"unable to LoadLibrary %s: %s\", file, GetLastError());\n\t    sasl_FREE(newhead);\n        retCode = SASL_FAIL;\n        goto cleanup;\n    }\n\n    newhead->library = library;\n    newhead->next = lib_list_head;\n    lib_list_head = newhead;\n\n    *libraryptr = library;\ncleanup:\n    if (sizeof(TCHAR) != sizeof(char)) {\n        sasl_FREE(file);\n    }\n    return retCode;\n}\n\nint _sasl_get_plugin(const char *file,\n    const sasl_callback_t *verifyfile_cb,\n    void **libraryptr)\n{\n    if (sizeof(TCHAR) == sizeof(char)) {\n        return _tsasl_get_plugin((TCHAR*)file, verifyfile_cb, libraryptr);\n    }\n    else {\n        WCHAR *tfile = _sasl_utf8_to_wchar(file);\n        int ret = SASL_NOMEM;\n\n        if (tfile) {\n            ret = _tsasl_get_plugin(tfile, verifyfile_cb, libraryptr);\n            sasl_FREE(tfile);\n        }\n\n        return ret;\n    }\n}\n\n\n/* undoes actions done by _sasl_get_plugin */\nvoid _sasl_remove_last_plugin()\n{\n    lib_list_t *last_plugin = lib_list_head;\n    lib_list_head = lib_list_head->next;\n    if (last_plugin->library) {\n\tFreeLibrary(last_plugin->library);\n    }\n    sasl_FREE(last_plugin);\n}\n\n/* gets the list of mechanisms */\nint _sasl_load_plugins(const add_plugin_list_t *entrypoints,\n\t\t       const sasl_callback_t *getpath_cb,\n\t\t       const sasl_callback_t *verifyfile_cb)\n{\n    int result;\n    TCHAR cur_dir[PATH_MAX], full_name[PATH_MAX+2], prefix[PATH_MAX+2];\n\t\t\t\t/* 1 for '\\\\' 1 for trailing '\\0' */\n    TCHAR * pattern;\n    TCHAR c;\n    int pos;\n    int retCode = SASL_OK;\n    char *utf8path = NULL;\n    TCHAR *path=NULL;\n    int position;\n    const add_plugin_list_t *cur_ep;\n    struct _stat statbuf;\t\t/* filesystem entry information */\n    intptr_t fhandle;\t\t\t/* file handle for _findnext function */\n    struct _tfinddata_t finddata;\t/* data returned by _findnext() */\n    size_t prefix_len;\n    \n    /* for static plugins */\n    add_plugin_t *add_plugin;\n    _sasl_plug_type type;\n    _sasl_plug_rec *p;\n\n    if (! entrypoints\n\t|| ! getpath_cb\n\t|| getpath_cb->id != SASL_CB_GETPATH\n\t|| ! getpath_cb->proc\n\t|| ! verifyfile_cb\n\t|| verifyfile_cb->id != SASL_CB_VERIFYFILE\n\t|| ! verifyfile_cb->proc)\n\treturn SASL_BADPARAM;\n\n    /* do all the static plugins first */\n\n    for (cur_ep = entrypoints; cur_ep->entryname; cur_ep++) {\n\n        /* What type of plugin are we looking for? */\n        if (!strcmp(cur_ep->entryname, \"sasl_server_plug_init\")) {\n            type = SERVER;\n            add_plugin = (add_plugin_t *)sasl_server_add_plugin;\n        }\n        else if (!strcmp(cur_ep->entryname, \"sasl_client_plug_init\")) {\n            type = CLIENT;\n            add_plugin = (add_plugin_t *)sasl_client_add_plugin;\n        }\n        else if (!strcmp(cur_ep->entryname, \"sasl_auxprop_plug_init\")) {\n            type = AUXPROP;\n            add_plugin = (add_plugin_t *)sasl_auxprop_add_plugin;\n        }\n        else if (!strcmp(cur_ep->entryname, \"sasl_canonuser_init\")) {\n            type = CANONUSER;\n            add_plugin = (add_plugin_t *)sasl_canonuser_add_plugin;\n        }\n        else {\n            /* What are we looking for then? */\n            return SASL_FAIL;\n        }\n        for (p = _sasl_static_plugins; p->type; p++) {\n            if (type == p->type)\n                result = add_plugin(p->name, p->plug);\n        }\n    }\n\n    /* get the path to the plugins */\n    result = ((sasl_getpath_t *)(getpath_cb->proc))(getpath_cb->context,\n\t\t\t\t\t\t    &utf8path);\n    if (result != SASL_OK) return result;\n    if (!utf8path) return SASL_FAIL;\n\n    if (sizeof(TCHAR) == sizeof(char)) {\n        path = (TCHAR*)utf8path;\n    }\n    else {\n        path = _sasl_utf8_to_wchar(utf8path);\n        if (!path) return SASL_FAIL;\n    }\n\n    if (_tcslen(path) >= PATH_MAX) { /* no you can't buffer overrun */\n\t    retCode = SASL_FAIL;\n        goto cleanup;\n    }\n\n    position=0;\n    do {\n\tpos=0;\n\tdo {\n\t    c=path[position];\n\t    position++;\n\t    cur_dir[pos]=c;\n\t    pos++;\n\t} while ((c!=PATHS_DELIMITER) && (c!=0));\n\tcur_dir[pos-1]='\\0';\n\n\n/* : check to make sure that a valid directory name was passed in */\n\tif (_tstat (cur_dir, &statbuf) < 0) {\n\t    continue;\n\t}\n\tif ((statbuf.st_mode & S_IFDIR) == 0) {\n\t    continue;\n\t}\n\n    _tcscpy(prefix, cur_dir);\n\tprefix_len = _tcslen (prefix);\n\n/* : Don't append trailing \\ unless required */\n\tif (prefix[prefix_len-1] != '\\\\') {\n        _tcscat(prefix,_T(\"\\\\\"));\n\t    prefix_len++;\n\t}\n\n\tpattern = prefix;\n\n/* : Check that we have enough space for \"*.dll\" */\n\tif ((prefix_len + DLL_MASK_LEN) > (sizeof(prefix) / sizeof(TCHAR) - 1)) {\n\t    _sasl_log(NULL, SASL_LOG_WARN, \"plugin search mask is too big\");\n            continue;\n\t}\n\n\t_tcscat (prefix + prefix_len, _T(\"*\") DLL_SUFFIX);\n\n        fhandle = _tfindfirst (pattern, &finddata);\n        if (fhandle == -1) {\t/* no matching files */\n            continue;\n        }\n\n/* : Truncate \"*.dll\" */\n\tprefix[prefix_len] = '\\0';\n\n\tdo {\n\t    size_t length;\n\t    void *library;\n\t    char *c;\n\t    char plugname[PATH_MAX];\n\t    int entries;\n\n\t    length = _tcslen(finddata.name);\n\t    if (length < 5) { /* At least <Ch>.dll */\n\t\tcontinue; /* can not possibly be what we're looking for */\n\t    }\n\n/* : Check for overflow */\n\t    if (length + prefix_len >= PATH_MAX) continue; /* too big */\n\n\t    if (_tcscmp(finddata.name + (length - _tcslen(DLL_SUFFIX)), DLL_SUFFIX) != 0) {\n\t\tcontinue;\n\t    }\n\n/* : Check that it is not a directory */\n\t    if ((finddata.attrib & _A_SUBDIR) == _A_SUBDIR) {\n\t\tcontinue;\n\t    }\n\n/* : Construct full name from prefix and name */\n\n        _tcscpy (full_name, prefix);\n        _tcscat (full_name, finddata.name);\n\t\t\n/* cut off .dll suffix -- this only need be approximate */\n        if (sizeof(TCHAR) != sizeof(char)) {\n            if (WideCharToMultiByte(CP_UTF8, 0, finddata.name, -1, plugname, sizeof(plugname), NULL, NULL) == 0) { // in case of unicode use utf8\n                continue;\n            }\n        }\n        else {\n            _tcscpy((TCHAR*)plugname, finddata.name); // w/o unicode local enconding is fine\n        }\n\t    c = strchr(plugname, '.');\n\t    if (c != NULL) *c = '\\0';\n\n\t    result = _tsasl_get_plugin (full_name, verifyfile_cb, &library);\n\n\t    if (result != SASL_OK) {\n\t\tcontinue;\n\t    }\n\n\t    entries = 0;\n\t    for (cur_ep = entrypoints; cur_ep->entryname; cur_ep++) {\n\t\tresult = _sasl_plugin_load(plugname,\n\t\t\t\t\t   library,\n\t\t\t\t\t   cur_ep->entryname,\n\t\t\t\t\t   cur_ep->add_plugin);\n\t\tif (result == SASL_OK) {\n\t\t    ++entries;\n\t\t}\n\t\t/* If this fails, it's not the end of the world */\n\t    }\n\t    if (entries == 0) {\n\t\t_sasl_remove_last_plugin();\n\t    }\n\n\t} while (_tfindnext (fhandle, &finddata) == 0);\n\t\n\t_findclose (fhandle);\n\n    } while ((c!='=') && (c!=0));\n\ncleanup:\n    if (sizeof(TCHAR) != sizeof(char)) {\n        sasl_FREE(path); /* It's always allocated in coversion to wchar */\n    }\n    return retCode;\n}\n\nint\n_sasl_done_with_plugins(void)\n{\n    lib_list_t *libptr, *libptr_next;\n    \n    for(libptr = lib_list_head; libptr; libptr = libptr_next) {\n\tlibptr_next = libptr->next;\n\tif (libptr->library != NULL) {\n\t    FreeLibrary(libptr->library);\n\t}\n\tsasl_FREE(libptr);\n    }\n\n    lib_list_head = NULL;\n\n    return SASL_OK;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-cyrus-sasl-2.1.27-hnal7aquex6gy2ydqk4wp52b2upmktrt/spack-src/lib/Makefile.am": "# Makefile.am for the SASL library\n# Rob Earhart\n# $Id: Makefile.am,v 1.88 2011/09/05 14:18:10 murch Exp $\n# Copyright (c) 2000 Carnegie Mellon University.  All rights reserved.\n#\n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions\n# are met:\n#\n# 1. Redistributions of source code must retain the above copyright\n#    notice, this list of conditions and the following disclaimer. \n#\n# 2. Redistributions in binary form must reproduce the above copyright\n#    notice, this list of conditions and the following disclaimer in\n#    the documentation and/or other materials provided with the\n#    distribution.\n#\n# 3. The name \"Carnegie Mellon University\" must not be used to\n#    endorse or promote products derived from this software without\n#    prior written permission. For permission or any other legal\n#    details, please contact  \n#      Office of Technology Transfer\n#      Carnegie Mellon University\n#      5000 Forbes Avenue\n#      Pittsburgh, PA  15213-3890\n#      (412) 268-4387, fax: (412) 268-7395\n#      tech-transfer@andrew.cmu.edu\n#\n# 4. Redistributions of any form whatsoever must retain the following\n#    acknowledgment:\n#    \"This product includes software developed by Computing Services\n#     at Carnegie Mellon University (http://www.cmu.edu/computing/).\"\n#\n# CARNEGIE MELLON UNIVERSITY DISCLAIMS ALL WARRANTIES WITH REGARD TO\n# THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n# AND FITNESS, IN NO EVENT SHALL CARNEGIE MELLON UNIVERSITY BE LIABLE\n# FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN\n# AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING\n# OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n#\n\n# Library version info - here at the top, for sanity\n# See <http://www.gnu.org/software/libtool/manual/libtool.html#Versioning>\n# CURRENT:REVISION:AGE\nsasl_version = 3:0:0\n\nAM_CPPFLAGS=-DLIBSASL_EXPORTS=1 -I$(top_srcdir)/include -I$(top_srcdir)/plugins \\\n               -I$(top_builddir)/include -I$(top_srcdir)/sasldb -I$(top_srcdir)/common -DCONFIGDIR='\"${configdir}\"' -DPLUGINDIR='\"${plugindir}\"'\nPLUGIN_COMMON_OBJS = $(top_builddir)/common/libplugin_common.la\n\nEXTRA_DIST = windlopen.c dlopen.c staticopen.h NTMakefile\nEXTRA_LIBRARIES = libsasl2.a\nnoinst_LIBRARIES = @SASL_STATIC_LIBS@\nlibsasl2_a_SOURCES=\n\nBUILT_SOURCES = $(SASL_STATIC_SRCS)\n\nif WINDOWS\nDLOPEN_C = windlopen.c\nelse\nDLOPEN_C = dlopen.c\nendif\n\ncommon_headers = saslint.h\ncommon_sources = auxprop.c canonusr.c checkpw.c client.c common.c config.c external.c md5.c saslutil.c server.c seterror.c $(DLOPEN_C)\n\nLTLIBOBJS = @LTLIBOBJS@\nLIB_DOOR= @LIB_DOOR@\n\nlib_LTLIBRARIES = libsasl2.la\nif BUILD_LIBOBJ\nnoinst_LTLIBRARIES = libobj.la\nelse\nnoinst_LTLIBRARIES =\nendif\n\nlibobj_la_SOURCES =\nlibobj_la_LIBADD = $(LTLIBOBJS)\n\nlibsasl2_la_SOURCES = $(common_sources) $(common_headers)\nlibsasl2_la_LDFLAGS = -version-info $(sasl_version) -no-undefined\n\nlibsasl2_la_LIBADD = $(SASL_DL_LIB) $(LIB_SOCKET) $(LIB_DOOR) $(PLUGIN_COMMON_OBJS)\nif BUILD_LIBOBJ\nlibsasl2_la_LIBADD += libobj.la\nendif\n\nif MACOSX\nframedir = /Library/Frameworks/SASL2.framework\ninstall-exec-hook:\n\t$(mkinstalldirs) $(framedir)/Versions/A\n\tln -fs $(libdir)/libsasl2.dylib $(framedir)/Versions/A/SASL2\n\tcd $(framedir) ; ln -fs Versions/A/SASL2 .\nelse\ninstall-exec-hook:\nendif\n\nlibsasl2.a: libsasl2.la $(SASL_STATIC_OBJS)\n\t@echo adding static plugins and dependencies\n\t$(AR) cru .libs/$@ $(SASL_STATIC_OBJS)\n\t@for i in ./libsasl2.la ../common/libplugin_common.la ../sasldb/libsasldb.la ../plugins/lib*.la; do \\\n\tif test ! -f $$i; then continue; fi; . $$i; \\\n\tfor j in $$dependency_libs foo; do \\\n\tcase $$j in foo) ;; \\\n\t-L*) for k in $$depdirs foo; do \\\n\t    if test $$k = $$j; then break; fi; done; \\\n\t  if test $$k = foo; then depdirs=\"$$depdirs $$j\"; fi ;; \\\n\t-l*) for k in $$deplibs foo; do \\\n\t    if test $$k = $$j; then break; fi; done; \\\n\t  if test $$k = foo; then deplibs=\"$$deplibs $$j\"; fi ;; \\\n\tesac; done; dependency_libs=\"\"; done; \\\n\tsed -e \"/^dependency_libs=/s%=.*%='$${depdirs}$${deplibs}'%\" \\\n\tlibsasl2.la >TMP.$$ && mv TMP.$$ libsasl2.la\n\trm -f $@\n\tln -s .libs/$@ $@\n\n$(SASL_STATIC_SRCS): linksrcs\n\nlinksrcs:\n\t-ln -s $(SASL_STATIC_SRCS) .\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-cyrus-sasl-2.1.27-hnal7aquex6gy2ydqk4wp52b2upmktrt/spack-src/lib/dlopen.c": "/* dlopen.c--Unix dlopen() dynamic loader interface\n * Rob Siemborski\n * Rob Earhart\n */\n/* \n * Copyright (c) 1998-2016 Carnegie Mellon University.  All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer. \n *\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in\n *    the documentation and/or other materials provided with the\n *    distribution.\n *\n * 3. The name \"Carnegie Mellon University\" must not be used to\n *    endorse or promote products derived from this software without\n *    prior written permission. For permission or any other legal\n *    details, please contact  \n *      Carnegie Mellon University\n *      Center for Technology Transfer and Enterprise Creation\n *      4615 Forbes Avenue\n *      Suite 302\n *      Pittsburgh, PA  15213\n *      (412) 268-7393, fax: (412) 268-7395\n *      innovation@andrew.cmu.edu\n *\n * 4. Redistributions of any form whatsoever must retain the following\n *    acknowledgment:\n *    \"This product includes software developed by Computing Services\n *     at Carnegie Mellon University (http://www.cmu.edu/computing/).\"\n *\n * CARNEGIE MELLON UNIVERSITY DISCLAIMS ALL WARRANTIES WITH REGARD TO\n * THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n * AND FITNESS, IN NO EVENT SHALL CARNEGIE MELLON UNIVERSITY BE LIABLE\n * FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN\n * AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING\n * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n */\n\n#include <config.h>\n#ifdef HAVE_DLFCN_H\n#include <dlfcn.h>\n#endif\n\n#include <stdlib.h>\n#include <errno.h>\n#include <stdio.h>\n#include <limits.h>\n\n#include <sasl.h>\n#include \"saslint.h\"\n\n#ifndef PIC\n#include <saslplug.h>\n#include \"staticopen.h\"\n#endif\n\n#ifdef DO_DLOPEN\n#if HAVE_DIRENT_H\n# include <dirent.h>\n# define NAMLEN(dirent) strlen((dirent)->d_name)\n#else /* HAVE_DIRENT_H */\n# define dirent direct\n# define NAMLEN(dirent) (dirent)->d_namlen\n# if HAVE_SYS_NDIR_H\n#  include <sys/ndir.h>\n# endif\n# if HAVE_SYS_DIR_H\n#  include <sys/dir.h>\n# endif\n# if HAVE_NDIR_H\n#  include <ndir.h>\n# endif\n#endif /* ! HAVE_DIRENT_H */\n\n#ifndef NAME_MAX\n# ifdef _POSIX_NAME_MAX\n#  define NAME_MAX _POSIX_NAME_MAX\n# else\n#  define NAME_MAX 16\n# endif\n#endif\n \n#if NAME_MAX < 8\n#  define NAME_MAX 8\n#endif\n\n#ifdef __hpux\n#ifndef HAVE_DLFCN_H\n#include <dl.h>\n\ntypedef shl_t * dll_handle;\ntypedef void * dll_func;\n\ndll_handle\ndlopen(char *fname, int mode)\n{\n    shl_t h = shl_load(fname, BIND_DEFERRED, 0L);\n    shl_t *hp = NULL;\n    \n    if (h) {\n\thp = (shl_t *)malloc(sizeof (shl_t));\n\tif (!hp) {\n\t    shl_unload(h);\n\t} else {\n\t    *hp = h;\n\t}\n    }\n\n    return (dll_handle)hp;\n}\n\nint\ndlclose(dll_handle hp)\n{\n    shl_t h;\n\n    if (hp != NULL) {\n\th = *((shl_t *)hp);\n\tfree(hp);\n\treturn shl_unload(h);\n    } else {\n\t/* Return error */\n\treturn -1;\n    }\n}\n\ndll_func\ndlsym(dll_handle h, char *n)\n{\n    dll_func handle;\n    \n    if (shl_findsym ((shl_t *)h, n, TYPE_PROCEDURE, &handle))\n\treturn NULL;\n    \n    return (dll_func)handle;\n}\n\nchar *dlerror()\n{\n    if (errno != 0) {\n\treturn strerror(errno);\n    }\n    return \"Generic shared library error\";\n}\n\n#endif /* HAVE_DLFCN_H */\n\n#ifdef __ia64\n#define SO_SUFFIX       \".so\"\n#else\n#define SO_SUFFIX\t\".sl\"\n#endif /* __ia64 */\n\n#else /* __hpux */\n#define SO_SUFFIX\t\".so\"\n#endif\n\n#define LA_SUFFIX       \".la\"\n\ntypedef struct lib_list \n{\n    struct lib_list *next;\n    void *library;\n} lib_list_t;\n\nstatic lib_list_t *lib_list_head = NULL;\n\n#endif /* DO_DLOPEN */\n\nint _sasl_locate_entry(void *library, const char *entryname,\n\t\t       void **entry_point) \n{\n#ifdef DO_DLOPEN\n/* note that we still check for known problem systems in\n * case we are cross-compiling */\n#if defined(DLSYM_NEEDS_UNDERSCORE) || (defined(__OpenBSD__) && !defined(__ELF__))\n    char adj_entryname[1024];\n#else\n#define adj_entryname entryname\n#endif\n\n    if(!entryname) {\n\t_sasl_log(NULL, SASL_LOG_ERR,\n\t\t  \"no entryname in _sasl_locate_entry\");\n\treturn SASL_BADPARAM;\n    }\n\n    if(!library) {\n\t_sasl_log(NULL, SASL_LOG_ERR,\n\t\t  \"no library in _sasl_locate_entry\");\n\treturn SASL_BADPARAM;\n    }\n\n    if(!entry_point) {\n\t_sasl_log(NULL, SASL_LOG_ERR,\n\t\t  \"no entrypoint output pointer in _sasl_locate_entry\");\n\treturn SASL_BADPARAM;\n    }\n\n#if defined(DLSYM_NEEDS_UNDERSCORE) || (defined(__OpenBSD__) && !defined(__ELF__))\n    snprintf(adj_entryname, sizeof adj_entryname, \"_%s\", entryname);\n#endif\n\n    *entry_point = NULL;\n    *entry_point = dlsym(library, adj_entryname);\n    if (*entry_point == NULL) {\n#if 0 /* This message appears to confuse people */\n\t_sasl_log(NULL, SASL_LOG_DEBUG,\n\t\t  \"unable to get entry point %s: %s\", adj_entryname,\n\t\t  dlerror());\n#endif\n\treturn SASL_FAIL;\n    }\n\n    return SASL_OK;\n#else\n    return SASL_FAIL;\n#endif /* DO_DLOPEN */\n}\n\n#ifdef DO_DLOPEN\n\nstatic int _sasl_plugin_load(char *plugin, void *library,\n\t\t\t     const char *entryname,\n\t\t\t     int (*add_plugin)(const char *, void *)) \n{\n    void *entry_point;\n    int result;\n    \n    result = _sasl_locate_entry(library, entryname, &entry_point);\n    if(result == SASL_OK) {\n\tresult = add_plugin(plugin, entry_point);\n\tif(result != SASL_OK)\n\t    _sasl_log(NULL, SASL_LOG_DEBUG,\n\t\t      \"_sasl_plugin_load failed on %s for plugin: %s\\n\",\n\t\t      entryname, plugin);\n    }\n\n    return result;\n}\n\n/* this returns the file to actually open.\n *  out should be a buffer of size PATH_MAX\n *  and may be the same as in. */\n\n/* We'll use a static buffer for speed unless someone complains */\n#define MAX_LINE 2048\n\nstatic int _parse_la(const char *prefix, const char *in, char *out) \n{\n    FILE *file;\n    size_t length;\n    char line[MAX_LINE];\n    char *ntmp = NULL;\n\n    if(!in || !out || !prefix || out == in) return SASL_BADPARAM;\n\n    /* Set this so we can detect failure */\n    *out = '\\0';\n\n    length = strlen(in);\n\n    if (strcmp(in + (length - strlen(LA_SUFFIX)), LA_SUFFIX)) {\n\tif(!strcmp(in + (length - strlen(SO_SUFFIX)),SO_SUFFIX)) {\n\t    /* check for a .la file */\n\t    if (strlen(prefix) + strlen(in) + strlen(LA_SUFFIX) + 1 >= MAX_LINE)\n\t\treturn SASL_BADPARAM;\n\t    strcpy(line, prefix);\n\t    strcat(line, in);\n\t    length = strlen(line);\n\t    *(line + (length - strlen(SO_SUFFIX))) = '\\0';\n\t    strcat(line, LA_SUFFIX);\n\t    file = fopen(line, \"r\");\n\t    if(file) {\n\t\t/* We'll get it on the .la open */\n\t\tfclose(file);\n\t\treturn SASL_FAIL;\n\t    }\n\t}\n        if (strlen(prefix) + strlen(in) + 1 >= PATH_MAX)\n            return SASL_BADPARAM;\n\tstrcpy(out, prefix);\n\tstrcat(out, in);\n\treturn SASL_OK;\n    }\n\n    if (strlen(prefix) + strlen(in) + 1 >= MAX_LINE)\n        return SASL_BADPARAM;\n    strcpy(line, prefix);\n    strcat(line, in);\n\n    file = fopen(line, \"r\");\n    if(!file) {\n\t_sasl_log(NULL, SASL_LOG_WARN,\n\t\t  \"unable to open LA file: %s\", line);\n\treturn SASL_FAIL;\n    }\n    \n    while(!feof(file)) {\n\tif(!fgets(line, MAX_LINE, file)) break;\n\tif(line[strlen(line) - 1] != '\\n') {\n\t    _sasl_log(NULL, SASL_LOG_WARN,\n\t\t      \"LA file has too long of a line: %s\", in);\n\t    fclose(file);\n\t    return SASL_BUFOVER;\n\t}\n\tif(line[0] == '\\n' || line[0] == '#') continue;\n\tif(!strncmp(line, \"dlname=\", sizeof(\"dlname=\") - 1)) {\n\t    /* We found the line with the name in it */\n\t    char *end;\n\t    char *start;\n\t    size_t len;\n\t    end = strrchr(line, '\\'');\n\t    if(!end) continue;\n\t    start = &line[sizeof(\"dlname=\")-1];\n\t    len = strlen(start);\n\t    if(len > 3 && start[0] == '\\'') {\n\t\tntmp=&start[1];\n\t\t*end='\\0';\n\t\t/* Do we have dlname=\"\" ? */\n\t\tif(ntmp == end) {\n\t\t    _sasl_log(NULL, SASL_LOG_DEBUG,\n\t\t\t      \"dlname is empty in .la file: %s\", in);\n\t\t    fclose(file);\n\t\t    return SASL_FAIL;\n\t\t}\n\t\tstrcpy(out, prefix);\n\t\tstrcat(out, ntmp);\n\t    }\n\t    break;\n\t}\n    }\n    if(ferror(file) || feof(file)) {\n\t_sasl_log(NULL, SASL_LOG_WARN,\n\t\t  \"Error reading .la: %s\\n\", in);\n\tfclose(file);\n\treturn SASL_FAIL;\n    }\n    fclose(file);\n\n    if(!(*out)) {\n\t_sasl_log(NULL, SASL_LOG_WARN,\n\t\t  \"Could not find a dlname line in .la file: %s\", in);\n\treturn SASL_FAIL;\n    }\n\n    return SASL_OK;\n}\n#endif /* DO_DLOPEN */\n\n/* loads a plugin library */\nint _sasl_get_plugin(const char *file,\n\t\t     const sasl_callback_t *verifyfile_cb,\n\t\t     void **libraryptr)\n{\n#ifdef DO_DLOPEN\n    int r = 0;\n    int flag;\n    void *library;\n    lib_list_t *newhead;\n    \n    r = ((sasl_verifyfile_t *)(verifyfile_cb->proc))\n\t\t    (verifyfile_cb->context, file, SASL_VRFY_PLUGIN);\n    if (r != SASL_OK) return r;\n\n#ifdef RTLD_NOW\n    flag = RTLD_NOW;\n#else\n    flag = 0;\n#endif\n\n    newhead = sasl_ALLOC(sizeof(lib_list_t));\n    if(!newhead) return SASL_NOMEM;\n\n    if (!(library = dlopen(file, flag))) {\n\t_sasl_log(NULL, SASL_LOG_ERR,\n\t\t  \"unable to dlopen %s: %s\", file, dlerror());\n\tsasl_FREE(newhead);\n\treturn SASL_FAIL;\n    }\n\n    newhead->library = library;\n    newhead->next = lib_list_head;\n    lib_list_head = newhead;\n\n    *libraryptr = library;\n    return SASL_OK;\n#else\n    return SASL_FAIL;\n#endif /* DO_DLOPEN */\n}\n\n/* gets the list of mechanisms */\nint _sasl_load_plugins(const add_plugin_list_t *entrypoints,\n\t\t       const sasl_callback_t *getpath_cb,\n\t\t       const sasl_callback_t *verifyfile_cb)\n{\n    int result;\n    const add_plugin_list_t *cur_ep;\n#ifdef DO_DLOPEN\n    char str[PATH_MAX], tmp[PATH_MAX+2], prefix[PATH_MAX+2];\n\t\t\t\t/* 1 for '/' 1 for trailing '\\0' */\n    char c;\n    int pos;\n    const char *path=NULL;\n    int position;\n    DIR *dp;\n    struct dirent *dir;\n#endif\n#ifndef PIC\n    add_plugin_t *add_plugin;\n    _sasl_plug_type type;\n    _sasl_plug_rec *p;\n#endif\n\n    if (! entrypoints\n\t|| ! getpath_cb\n\t|| getpath_cb->id != SASL_CB_GETPATH\n\t|| ! getpath_cb->proc\n\t|| ! verifyfile_cb\n\t|| verifyfile_cb->id != SASL_CB_VERIFYFILE\n\t|| ! verifyfile_cb->proc)\n\treturn SASL_BADPARAM;\n\n#ifndef PIC\n    /* do all the static plugins first */\n\n    for(cur_ep = entrypoints; cur_ep->entryname; cur_ep++) {\n\n\t/* What type of plugin are we looking for? */\n\tif(!strcmp(cur_ep->entryname, \"sasl_server_plug_init\")) {\n\t    type = SERVER;\n\t    add_plugin = (add_plugin_t *)sasl_server_add_plugin;\n\t} else if (!strcmp(cur_ep->entryname, \"sasl_client_plug_init\")) {\n\t    type = CLIENT;\n\t    add_plugin = (add_plugin_t *)sasl_client_add_plugin;\n\t} else if (!strcmp(cur_ep->entryname, \"sasl_auxprop_plug_init\")) {\n\t    type = AUXPROP;\n\t    add_plugin = (add_plugin_t *)sasl_auxprop_add_plugin;\n\t} else if (!strcmp(cur_ep->entryname, \"sasl_canonuser_init\")) {\n\t    type = CANONUSER;\n\t    add_plugin = (add_plugin_t *)sasl_canonuser_add_plugin;\n\t} else {\n\t    /* What are we looking for then? */\n\t    return SASL_FAIL;\n\t}\n\tfor (p=_sasl_static_plugins; p->type; p++) {\n\t    if(type == p->type)\n\t    \tresult = add_plugin(p->name, p->plug);\n\t}\n    }\n#endif /* !PIC */\n\n/* only do the following if:\n * \n * we support dlopen()\n *  AND we are not staticly compiled\n *      OR we are staticly compiled and TRY_DLOPEN_WHEN_STATIC is defined\n */\n#if defined(DO_DLOPEN) && (defined(PIC) || (!defined(PIC) && defined(TRY_DLOPEN_WHEN_STATIC)))\n    /* get the path to the plugins */\n    result = ((sasl_getpath_t *)(getpath_cb->proc))(getpath_cb->context,\n\t\t\t\t\t\t    &path);\n    if (result != SASL_OK) return result;\n    if (! path) return SASL_FAIL;\n\n    if (strlen(path) >= PATH_MAX) { /* no you can't buffer overrun */\n\treturn SASL_FAIL;\n    }\n\n    position=0;\n    do {\n\tpos=0;\n\tdo {\n\t    c=path[position];\n\t    position++;\n\t    str[pos]=c;\n\t    pos++;\n\t} while ((c!=':') && (c!='=') && (c!=0));\n\tstr[pos-1]='\\0';\n\n\tstrcpy(prefix,str);\n\tstrcat(prefix,\"/\");\n\n\tif ((dp=opendir(str)) !=NULL) /* ignore errors */    \n\t{\n\t    while ((dir=readdir(dp)) != NULL)\n\t    {\n\t\tsize_t length;\n\t\tvoid *library;\n\t\tchar *c;\n\t\tchar plugname[PATH_MAX];\n\t\tchar name[PATH_MAX];\n\n\t\tlength = NAMLEN(dir);\n\t\tif (length < 4) \n\t\t    continue; /* can not possibly be what we're looking for */\n\n\t\tif (length + pos>=PATH_MAX) continue; /* too big */\n\n\t\tif (strcmp(dir->d_name + (length - strlen(SO_SUFFIX)),\n\t\t\t   SO_SUFFIX)\n\t\t    && strcmp(dir->d_name + (length - strlen(LA_SUFFIX)),\n\t\t\t   LA_SUFFIX))\n\t\t    continue;\n\n\t\tmemcpy(name,dir->d_name,length);\n\t\tname[length]='\\0';\n\n\t\tresult = _parse_la(prefix, name, tmp);\n\t\tif(result != SASL_OK)\n\t\t    continue;\n\t\t\n\t\t/* skip \"lib\" and cut off suffix --\n\t\t   this only need be approximate */\n\t\tstrcpy(plugname, name + 3);\n\t\tc = strchr(plugname, (int)'.');\n\t\tif(c) *c = '\\0';\n\n\t\tresult = _sasl_get_plugin(tmp, verifyfile_cb, &library);\n\n\t\tif(result != SASL_OK)\n\t\t    continue;\n\n\t\tfor(cur_ep = entrypoints; cur_ep->entryname; cur_ep++) {\n\t\t\t_sasl_plugin_load(plugname, library, cur_ep->entryname,\n\t\t\t\t\t  cur_ep->add_plugin);\n\t\t\t/* If this fails, it's not the end of the world */\n\t\t}\n\t    }\n\n\t    closedir(dp);\n\t} else {\n\t    _sasl_log(NULL, SASL_LOG_DEBUG,\n\t\t      \"looking for plugins in '%s', failed to open directory, error: %s\",\n\t\t      str,\n\t\t      strerror(errno));\n\t}\n\n    } while ((c!='=') && (c!=0));\n#endif /* defined(DO_DLOPEN) && (!defined(PIC) || (defined(PIC) && defined(TRY_DLOPEN_WHEN_STATIC))) */\n\n    return SASL_OK;\n}\n\nint\n_sasl_done_with_plugins(void)\n{\n#ifdef DO_DLOPEN\n    lib_list_t *libptr, *libptr_next;\n    \n    for(libptr = lib_list_head; libptr; libptr = libptr_next) {\n\tlibptr_next = libptr->next;\n\tif(libptr->library)\n\t    dlclose(libptr->library);\n\tsasl_FREE(libptr);\n    }\n\n    lib_list_head = NULL;\n#endif /* DO_DLOPEN */\n    return SASL_OK;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-cyrus-sasl-2.1.27-hnal7aquex6gy2ydqk4wp52b2upmktrt/spack-src/lib/saslint.h": "/* saslint.h - internal SASL library definitions\n * Rob Siemborski\n * Tim Martin\n */\n/* \n * Copyright (c) 1998-2016 Carnegie Mellon University.  All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer. \n *\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in\n *    the documentation and/or other materials provided with the\n *    distribution.\n *\n * 3. The name \"Carnegie Mellon University\" must not be used to\n *    endorse or promote products derived from this software without\n *    prior written permission. For permission or any other legal\n *    details, please contact  \n *      Carnegie Mellon University\n *      Center for Technology Transfer and Enterprise Creation\n *      4615 Forbes Avenue\n *      Suite 302\n *      Pittsburgh, PA  15213\n *      (412) 268-7393, fax: (412) 268-7395\n *      innovation@andrew.cmu.edu\n *\n * 4. Redistributions of any form whatsoever must retain the following\n *    acknowledgment:\n *    \"This product includes software developed by Computing Services\n *     at Carnegie Mellon University (http://www.cmu.edu/computing/).\"\n *\n * CARNEGIE MELLON UNIVERSITY DISCLAIMS ALL WARRANTIES WITH REGARD TO\n * THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n * AND FITNESS, IN NO EVENT SHALL CARNEGIE MELLON UNIVERSITY BE LIABLE\n * FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN\n * AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING\n * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n */\n\n#ifndef SASLINT_H\n#define SASLINT_H\n\n#include <config.h>\n#include \"sasl.h\"\n#include \"saslplug.h\"\n#include \"saslutil.h\"\n#include \"prop.h\"\n\n#ifndef INLINE\n#if defined (WIN32)\n/* Visual Studio: \"inline\" keyword is not available in C, only in C++ */\n#define INLINE __inline\n#else\n#define INLINE  inline\n#endif\n#endif\n\n/* #define'd constants */\n#define CANON_BUF_SIZE 1024\n\n/* Error Handling Foo */\n/* Helpful Hints:\n *  -Error strings are set as soon as possible (first function in stack trace\n *   with a pointer to the sasl_conn_t.\n *  -Error codes are set as late as possible (only in the sasl api functions),\n *   though \"as often as possible\" also comes to mind to ensure correctness\n *  -Errors from calls to _buf_alloc, _sasl_strdup, etc are assumed to be\n *   memory errors.\n *  -Only errors (error codes < SASL_OK) should be remembered\n */\n#define RETURN(conn, val) { if(conn && (val) < SASL_OK) \\\n                               (conn)->error_code = (val); \\\n                            return (val); }\n#define MEMERROR(conn) {\\\n    if(conn) sasl_seterror( (conn), 0, \\\n                   \"Out of Memory in \" __FILE__ \" near line %d\", __LINE__ ); \\\n    RETURN(conn, SASL_NOMEM) }\n#define PARAMERROR(conn) {\\\n    if(conn) sasl_seterror( (conn), SASL_NOLOG, \\\n                  \"Parameter error in \" __FILE__ \" near line %d\", __LINE__ ); \\\n    RETURN(conn, SASL_BADPARAM) }\n#define INTERROR(conn, val) {\\\n    if(conn) sasl_seterror( (conn), 0, \\\n                   \"Internal Error %d in \" __FILE__ \" near line %d\", (val),\\\n\t\t   __LINE__ ); \\\n    RETURN(conn, (val)) }\n\n#ifndef PATH_MAX\n# ifdef WIN32\n#  define PATH_MAX MAX_PATH\n# else\n#  ifdef _POSIX_PATH_MAX\n#   define PATH_MAX _POSIX_PATH_MAX\n#  else\n#   define PATH_MAX 1024         /* arbitrary; probably big enough.\n                                  * will probably only be 256+64 on\n                                  * pre-posix machines */\n#  endif /* _POSIX_PATH_MAX */\n# endif /* WIN32 */\n#endif\n\n/* : Define directory delimiter in SASL_PATH/SASL_CONF_PATH variables */\n#ifdef WIN32\n#define PATHS_DELIMITER\t';'\n#else\n#define PATHS_DELIMITER\t':'\n#endif\n\n/* Datatype Definitions */\ntypedef struct {\n  const sasl_callback_t *callbacks;\n  const char *appname;\n} sasl_global_callbacks_t;\n\ntypedef struct _sasl_external_properties \n{\n    sasl_ssf_t ssf;\n    char *auth_id;\n} _sasl_external_properties_t;\n\ntypedef struct sasl_string_list\n{\n    const char *d;\n    struct sasl_string_list *next;\n} sasl_string_list_t;\n\ntypedef struct buffer_info\n{ \n    char *data;\n    size_t curlen;\n    size_t reallen;\n} buffer_info_t;\n\ntypedef int add_plugin_t(const char *, void *);\n\ntypedef struct add_plugin_list \n{\n    const char *entryname;\n    add_plugin_t *add_plugin;\n} add_plugin_list_t;\n\nenum Sasl_conn_type { SASL_CONN_UNKNOWN = 0,\n\t\t      SASL_CONN_SERVER = 1,\n                      SASL_CONN_CLIENT = 2 };\n\nstruct sasl_conn {\n  enum Sasl_conn_type type;\n\n  void (*destroy_conn)(sasl_conn_t *); /* destroy function */\n\n  char *service;\n\n  unsigned int flags;  /* flags passed to sasl_*_new */\n\n  /* IP information.  A buffer of size 52 is adequate for this in its\n     longest format (see sasl.h) */\n  int got_ip_local, got_ip_remote;\n  char iplocalport[NI_MAXHOST + NI_MAXSERV];\n  char ipremoteport[NI_MAXHOST + NI_MAXSERV];\n\n  void *context;\n  sasl_out_params_t oparams;\n\n  sasl_security_properties_t props;\n  _sasl_external_properties_t external;\n\n  sasl_secret_t *secret;\n\n  int (*idle_hook)(sasl_conn_t *conn);\n  const sasl_callback_t *callbacks;\n  const sasl_global_callbacks_t *global_callbacks; /* global callbacks\n\t\t\t\t\t\t    * connection */\n  char *serverFQDN;\n\n  /* Pointers to memory that we are responsible for */\n  buffer_info_t *encode_buf;\n\n  int error_code;\n  char *error_buf, *errdetail_buf;\n  size_t error_buf_len, errdetail_buf_len;\n  char *mechlist_buf;\n  size_t mechlist_buf_len;\n\n  char *decode_buf;\n\n  char user_buf[CANON_BUF_SIZE+1], authid_buf[CANON_BUF_SIZE+1];\n\n  /* Allocated by sasl_encodev if the output contains multiple SASL packet. */\n  buffer_info_t multipacket_encoded_data;\n};\n\n/* Server Conn Type Information */\n\ntypedef struct mechanism\n{\n    server_sasl_mechanism_t m;\n    struct mechanism *next;\n} mechanism_t;\n\ntypedef struct mech_list {\n  const sasl_utils_t *utils;  /* gotten from plug_init */\n\n  void *mutex;            /* mutex for this data */ \n  mechanism_t *mech_list; /* list of loaded mechanisms */\n  int mech_length;        /* number of loaded mechanisms */\n} mech_list_t;\n\ntypedef struct context_list \n{\n    mechanism_t *mech;\n    void *context;     /* if NULL, this mech is disabled for this connection\n\t\t\t* otherwise, use this context instead of a call\n\t\t\t* to mech_new */\n    struct context_list *next;\n} context_list_t;\n\ntypedef struct sasl_server_conn {\n    sasl_conn_t base; /* parts common to server + client */\n\n    char *appname; /* application name buffer (for sparams) */\n    char *user_realm; /* domain the user authenticating is in */\n    int sent_last; /* Have we already done the last send? */\n    int authenticated;\n    mechanism_t *mech; /* mechanism trying to use */\n    sasl_server_params_t *sparams;\n    context_list_t *mech_contexts;\n    mechanism_t *mech_list; /* list of available mechanisms */\n    int mech_length;        /* number of available mechanisms */\n} sasl_server_conn_t;\n\n/* Client Conn Type Information */\n\ntypedef struct cmechanism\n{\n    client_sasl_mechanism_t m;\n    struct cmechanism *next;  \n} cmechanism_t;\n\ntypedef struct cmech_list {\n  const sasl_utils_t *utils; \n\n  void *mutex;            /* mutex for this data */ \n  cmechanism_t *mech_list; /* list of mechanisms */\n  int mech_length;       /* number of mechanisms */\n\n} cmech_list_t;\n\ntypedef struct sasl_client_conn {\n  sasl_conn_t base; /* parts common to server + client */\n\n  cmechanism_t *mech;\n  sasl_client_params_t *cparams;\n\n  char *clientFQDN;\n\n  cmechanism_t *mech_list; /* list of available mechanisms */\n  int mech_length;\t   /* number of available mechanisms */\n} sasl_client_conn_t;\n\ntypedef struct sasl_allocation_utils {\n  sasl_malloc_t *malloc;\n  sasl_calloc_t *calloc;\n  sasl_realloc_t *realloc;\n  sasl_free_t *free;\n} sasl_allocation_utils_t;\n\ntypedef struct sasl_mutex_utils {\n  sasl_mutex_alloc_t *alloc;\n  sasl_mutex_lock_t *lock;\n  sasl_mutex_unlock_t *unlock;\n  sasl_mutex_free_t *free;\n} sasl_mutex_utils_t;\n\ntypedef struct sasl_log_utils_s {\n  sasl_log_t *log;\n} sasl_log_utils_t;\n\ntypedef int sasl_plaintext_verifier(sasl_conn_t *conn,\n\t\t\t\t    const char *userid,\n\t\t\t\t    const char *passwd,\n\t\t\t\t    const char *service,\n\t\t\t\t    const char *user_realm);\n\nstruct sasl_verify_password_s {\n    char *name;\n    sasl_plaintext_verifier *verify;\n};\n\n/*\n * globals & constants\n */\n/*\n * common.c\n */\nLIBSASL_API const sasl_utils_t *sasl_global_utils;\n\nextern int (*_sasl_client_idle_hook)(sasl_conn_t *conn);\nextern int (*_sasl_server_idle_hook)(sasl_conn_t *conn);\n\n/* These return SASL_OK if we've actually finished cleanup, \n * SASL_NOTINIT if that part of the library isn't initialized, and\n * SASL_CONTINUE if we need to call them again */\nextern int (*_sasl_client_cleanup_hook)(void);\nextern int (*_sasl_server_cleanup_hook)(void);\n\nextern sasl_allocation_utils_t _sasl_allocation_utils;\nextern sasl_mutex_utils_t _sasl_mutex_utils;\nextern int _sasl_allocation_locked;\n\nvoid sasl_common_done(void);\n\nextern int _sasl_is_equal_mech(const char *req_mech,\n                               const char *plug_mech,\n                               size_t req_mech_len,\n                               int *plus);\n\n/*\n * checkpw.c\n */\nextern struct sasl_verify_password_s _sasl_verify_password[];\n\n/*\n * server.c\n */\n/* (this is a function call to ensure this is read-only to the outside) */\nextern int _is_sasl_server_active(void);\n\n/*\n * Allocation and Mutex utility macros\n */\n#define sasl_ALLOC(__size__) (_sasl_allocation_utils.malloc((__size__)))\n#define sasl_CALLOC(__nelem__, __size__) \\\n\t(_sasl_allocation_utils.calloc((__nelem__), (__size__)))\n#define sasl_REALLOC(__ptr__, __size__) \\\n\t(_sasl_allocation_utils.realloc((__ptr__), (__size__)))\n#define sasl_FREE(__ptr__) (_sasl_allocation_utils.free((__ptr__)))\n\n#define sasl_MUTEX_ALLOC() (_sasl_mutex_utils.alloc())\n#define sasl_MUTEX_LOCK(__mutex__) (_sasl_mutex_utils.lock((__mutex__)))\n#define sasl_MUTEX_UNLOCK(__mutex__) (_sasl_mutex_utils.unlock((__mutex__)))\n#define sasl_MUTEX_FREE(__mutex__) \\\n\t(_sasl_mutex_utils.free((__mutex__)))\n\n/* function prototypes */\n/*\n * dlopen.c and staticopen.c\n */\n/*\n * The differences here are:\n * _sasl_load_plugins loads all plugins from all files\n * _sasl_get_plugin loads the LIBRARY for an individual file\n * _sasl_done_with_plugins frees the LIBRARIES loaded by the above 2\n * _sasl_locate_entry locates an entrypoint in a given library\n */\nextern int _sasl_load_plugins(const add_plugin_list_t *entrypoints,\n\t\t\t       const sasl_callback_t *getpath_callback,\n\t\t\t       const sasl_callback_t *verifyfile_callback);\nextern int _sasl_get_plugin(const char *file,\n\t\t\t    const sasl_callback_t *verifyfile_cb,\n\t\t\t    void **libraryptr);\nextern int _sasl_locate_entry(void *library, const char *entryname,\n                              void **entry_point);\nextern int _sasl_done_with_plugins();\n\n/*\n * common.c\n */\nextern const sasl_callback_t *\n_sasl_find_getpath_callback(const sasl_callback_t *callbacks);\n\nextern const sasl_callback_t *\n_sasl_find_getconfpath_callback(const sasl_callback_t *callbacks);\n\nextern const sasl_callback_t *\n_sasl_find_verifyfile_callback(const sasl_callback_t *callbacks);\n\nextern int _sasl_common_init(sasl_global_callbacks_t *global_callbacks);\n\nextern int _sasl_conn_init(sasl_conn_t *conn,\n\t\t\t   const char *service,\n\t\t\t   unsigned int flags,\n\t\t\t   enum Sasl_conn_type type,\n\t\t\t   int (*idle_hook)(sasl_conn_t *conn),\n\t\t\t   const char *serverFQDN,\n\t\t\t   const char *iplocalport,\n\t\t\t   const char *ipremoteport,\n\t\t\t   const sasl_callback_t *callbacks,\n\t\t\t   const sasl_global_callbacks_t *global_callbacks);\nextern void _sasl_conn_dispose(sasl_conn_t *conn);\n\nextern sasl_utils_t *\n_sasl_alloc_utils(sasl_conn_t *conn,\n\t\t  sasl_global_callbacks_t *global_callbacks);\nextern int _sasl_free_utils(const sasl_utils_t ** utils);\n\nextern int\n_sasl_getcallback(sasl_conn_t * conn,\n\t\t  unsigned long callbackid,\n\t\t  sasl_callback_ft * pproc,\n\t\t  void **pcontext);\n\nextern void\n_sasl_log(sasl_conn_t *conn,\n\t  int level,\n\t  const char *fmt,\n\t  ...);\n\nvoid _sasl_get_errorbuf(sasl_conn_t *conn, char ***bufhdl, size_t **lenhdl);\nint _sasl_add_string(char **out, size_t *alloclen,\n\t\t     size_t *outlen, const char *add);\n\n/* More Generic Utilities in common.c */\nextern int _sasl_strdup(const char *in, char **out, size_t *outlen);\n\n/* Basically a conditional call to realloc(), if we need more */\nint _buf_alloc(char **rwbuf, size_t *curlen, size_t newlen);\n\n/* convert an iovec to a single buffer */\nint _iovec_to_buf(const struct iovec *vec,\n\t\t  unsigned numiov, buffer_info_t **output);\n\n/* Convert between string formats and sockaddr formats */\nint _sasl_iptostring(const struct sockaddr *addr, socklen_t addrlen,\n\t\t     char *out, unsigned outlen);\nint _sasl_ipfromstring(const char *addr, struct sockaddr *out,\n\t\t       socklen_t outlen);\n\n/*\n * external plugin (external.c)\n */\nint external_client_plug_init(const sasl_utils_t *utils,\n\t\t\t      int max_version,\n\t\t\t      int *out_version,\n\t\t\t      sasl_client_plug_t **pluglist,\n\t\t\t      int *plugcount);\nint external_server_plug_init(const sasl_utils_t *utils,\n\t\t\t      int max_version,\n\t\t\t      int *out_version,\n\t\t\t      sasl_server_plug_t **pluglist,\n\t\t\t      int *plugcount);\n\n/* Mech Listing Functions */\nint _sasl_build_mechlist(void);\nint _sasl_server_listmech(sasl_conn_t *conn,\n\t\t\t  const char *user,\n\t\t\t  const char *prefix,\n\t\t\t  const char *sep,\n\t\t\t  const char *suffix,\n\t\t\t  const char **result,\n\t\t\t  unsigned *plen,\n\t\t\t  int *pcount);\nint _sasl_client_listmech(sasl_conn_t *conn,\n\t\t\t  const char *prefix,\n\t\t\t  const char *sep,\n\t\t\t  const char *suffix,\n\t\t\t  const char **result,\n\t\t\t  unsigned *plen,\n\t\t\t  int *pcount);\n/* Just create a straight list of them */\nsasl_string_list_t *_sasl_client_mechs(void);\nsasl_string_list_t *_sasl_server_mechs(void);\n\n/*\n * config file declarations (config.c)\n */\nextern const char *sasl_config_getstring(const char *key,const char *def);\n\n/* checkpw.c */\n#ifdef DO_SASL_CHECKAPOP\nextern int _sasl_auxprop_verify_apop(sasl_conn_t *conn,\n\t\t\t\t     const char *userstr,\n\t\t\t\t     const char *challenge,\n\t\t\t\t     const char *response,\n\t\t\t\t     const char *user_realm);\n#endif /* DO_SASL_CHECKAPOP */\n\n/* Auxprop Plugin (sasldb.c) */\nextern int sasldb_auxprop_plug_init(const sasl_utils_t *utils,\n\t\t\t\t    int max_version,\n\t\t\t\t    int *out_version,\n\t\t\t\t    sasl_auxprop_plug_t **plug,\n\t\t\t\t    const char *plugname);\n\n/*\n * auxprop.c\n */\nextern int _sasl_auxprop_add_plugin(void *p, void *library);\nextern void _sasl_auxprop_free(void);\nextern int _sasl_auxprop_lookup(sasl_server_params_t *sparams,\n\t\t\t\t unsigned flags,\n\t\t\t\t const char *user, unsigned ulen);\n\n/*\n * canonusr.c\n */\nvoid _sasl_canonuser_free();\nextern int internal_canonuser_init(const sasl_utils_t *utils,\n\t\t\t\t   int max_version,\n\t\t\t\t   int *out_version,\n\t\t\t\t   sasl_canonuser_plug_t **plug,\n\t\t\t\t   const char *plugname);\nextern int _sasl_canon_user(sasl_conn_t *conn,\n\t\t\t    const char *user,\n\t\t\t    unsigned ulen,\n\t\t\t    unsigned flags,\n\t\t\t    sasl_out_params_t *oparams);\nint _sasl_canon_user_lookup (sasl_conn_t *conn,\n\t\t\t     const char *user,\n\t\t\t     unsigned ulen,\n\t\t\t     unsigned flags,\n\t\t\t     sasl_out_params_t *oparams);\n\n/*\n * saslutil.c\n */\nint get_fqhostname(\n  char *name,  \n  int namelen,\n  int abort_if_no_fqdn\n  );\n\n#ifndef HAVE_GETHOSTNAME\n#ifdef sun\n/* gotta define gethostname ourselves on suns */\nextern int gethostname(char *, int);\n#endif\n#endif /* HAVE_GETHOSTNAME */\n\n#ifdef WIN32\nchar* _sasl_wchar_to_utf8(WCHAR *str);\nWCHAR* _sasl_utf8_to_wchar(const char *str);\n#endif\n\n#endif /* SASLINT_H */\n",
        "/tmp/vanessa/spack-stage/spack-stage-cyrus-sasl-2.1.27-hnal7aquex6gy2ydqk4wp52b2upmktrt/spack-src/docsrc/sasl/macosx.rst": ".. _install-macos:\n\n=========================================\nBuilding and using Cyrus SASL on Mac OS X\n=========================================\n\nThe Cyrus SASL v2 distribution now supports Mac OS X, including\napplications written to Apple's Carbon and Cocoa interfaces, as well\nas the standard Unix-like API. It includes the following\ncomponents:\n\n* A port of the Unix SASL library, which lives in ``/usr/local/lib/libsasl2.dylib``\n  (or similar) and with plugins in ``/usr/lib/sasl`` (which should be a symlink to ``/usr/local/lib/sasl``).\n* A framework which lives in\n  ``/Library/Frameworks/SASL2.framework``, and allows the use of the\n  ``-framework`` option to Apple's ``ld``, or linking with the\n  framework in Project Builder. This framework is in fact a wrapper for a\n  symlink to ``/usr/local/lib/libsasl2.dylib`` with the necessary\n  information to recognize it as a framework. This is what we expect many\n  Cocoa and Carbon Mach-O applications will want to use, and the framework\n  is required for CFBundle to work, which is used by the CFM glue library.\n* A CFM glue library (``/Library/CFMSupport/SASL2GlueCFM``) which\n  can be linked in by Carbon CFM applications, that uses CFBundle to bind\n  the framework and thus load the Unix-level library. It automatically loads\n  the important functions at ``sasl_client_init`` or\n  ``sasl_server_init`` time; it also automatically makes sure memory\n  allocation works if you're using the metrowerks malloc; if you're not,\n  ``sasl_set_alloc`` works as usual.\n* A Carbon port of the existing CFM library for Mac OS 9. Note that\n  this could probably be modified fairly easily to work on OS X, but\n  there's not much point. The CFM glue layer to the Unix library\n  supports many more functions, including the entire server API; also,\n  the Unix implementation is mostly independent of Kerberos\n  implementation, while the Mac OS 9 Carbon port specifically requires\n  MIT Kerberos for Macintosh 3.5 or later in order to get Kerberos\n  support. The Mac OS 9 code implements only the client API, but this is\n  mostly what is wanted from SASL on OS 9 anyway.\n\nIf you are building a Carbon CFM application and intend it to run on\nboth OS 9 and OS X, you should link against the OS 9 Carbon SASL\nlibrary, since it exports fewer APIs (client side only, specifically)\nthan the OS X CFM glue. Your application should work seamlessly with\nboth libraries if you do this, despite the different implementations\nunderneath.\n\nIf you need a Carbon CFM application to support server-side SASL\nfunctionality, you need to link against the ``SASL2GlueCFM``\nlibrary, but be aware that your application will not run on OS 9.\n\nCompiling and Using the Unix library\n====================================\n\nThe Unix library is mostly ready to build on Mac OS X, but it does depend\non the ``dlcompat`` package in order to load its plugins.\n``dlcompat-20010505`` is a relatively simple version known to work\nwith SASL; it is provided with the distribution in a tarball. You should\n``make`` and ``make install`` the ``dlcompat`` library\n(which probably goes into ``/usr/local/lib/libdl.dylib``) before\nattempting to ``./configure`` the SASL distribution itself. SASL will\nthen pretend it's a real Unix ``libdl``, and link against it.\n\nSince there are, at this point, newer and far more complex versions of\ndlcompat, you may prefer to use those instead if other software requires\ntheir functionality. The dlcompat homepage is located on the `OpenDarwin <http://www.opendarwin.org/projects/dlcompat>`_\nsite. Many users may want to install the ``/sw`` tree from `the Fink project <http://fink.sourceforge.net>`_ to get this, as\nwell as possibly newer autotools and other software.\n\nAs of version 2.1.16, SASL uses and requires a recent version of GNU\nautotools (autoconf, automake, and libtool) to build its configuration scripts.\nIf you are building from GIT, you will need to have the autotools installed\non your system. The version included with all releases of the developer tools\nfor OS X 10.2.x is too old for this; if you aren't using OS X 10.3 or later,\nyou should upgrade to more recent patchlevels of these tools. The easiest way\nto do this is to install the Fink environment and then ``apt-get\ninstall autoconf2.5 automake1.7 libtool14``.\n\nRecent versions of SASL ship with Kerberos v4 disabled by default.\nIf you need Kerberos v4 for some reason, and you are using MIT Kerberos\nfor Macintosh 4.0 or later, you should ``./configure`` with\nthe added options ``\"--enable-krb4=/usr --without-openssl\n--disable-digest\"`` so that it finds the\ncorrect location for the header files, and does not use OpenSSL or\nbuild anything that depends on it (such as the digest-md5 plugin),\nsince OpenSSL provides its own DES routines which do not work with\nKerberos v4.\n\n.. warning::\n\n    Please read the \"Known Problems\" section at the end of\n    this document for more information on this issue.\n\nYou must be root to make install, since ``/usr/local`` is only\nmodifiable by root. You need not enable the root account using\nNetInfo; the recommended (but underdocumented) method is to use\n``sudo -s`` from the Terminal window when you are logged into an\nadministrator's account, and enter the password for that account. When\nbuilding on Mac OS X, ``make install`` will automatically add the\nframework to ``/Library/Frameworks``.\n\nThis does not build the CFM glue library. Building the CFM glue\nlibrary requires Metrowerks CodeWarrior Pro 6 or later (tested with\n6), and the files necessary to build it are in the\n``mac/osx_cfm_glue`` folder.\n\nChanges to the Unix library to make it work on OS X\n===================================================\n\nThis is provided for reference purposes only. The build system will\nautomatically take care of all of these issues when building on Darwin\nor Mac OS X.\n\n* The random code supports the preferred way to generate random\n  numbers in Darwin. (In SASL v2, it does this on all unix-like\n  platforms that lack jrand48). *Note that Mac OS X \"Jaguar\", version\n  10.2,\n  now has the standard jrand48 function, and that SASL will use this\n  instead\n  of the previous workaround.*\n* Symbols which are dlopened have an underscore prefixed. (This\n  behavior is detected by configure in SASL v2.)\n* Plugins are linked with the ``-module`` option to ``libtool``,\n  which causes the ``-bundle`` option to be\n  supplied to Apple's ``ld``. (This is done on all platforms in\n  SASL v2.)\n* The MD5 symbols are renamed to avoid library conflicts. This\n  allows proper compilations against Heimdal and MIT's unix kerberos\n  distribution, and prevents crashes when linked against MIT Kerberos\n  for Macintosh (which also duplicates the symbols, but in a different\n  way). Note that the MD5 symbols have local names on all platforms with\n  SASL v2; this was only different in SASL v1.\n* MIT Kerberos for Macintosh 4.0 and later are fully supported. This\n  was accomplished by using ``krb_get_err_text`` if available and\n  checking for additional names for the krb4 libraries.\n\nChanges to the Mac OS 9 projects to support Carbon\n==================================================\n\n.. warning::\n\n    Please read these notes before you attempt to build SASL for OS 9 Carbon!\n\n* **Important!** You must make sure that all files have their\n  correct HFS filetype before starting to build this code! In\n  particular, all source and text files must be of type ``'TEXT'``,\n  which is not the default if you use the Mac OS X GIT client to check\n  out the projects. If you run into this problem, you may want to use a\n  utility such as FileTyper to recursively change the type on all\n  files. CodeWarrior is less picky about the projects' filetypes, but\n  setting them to filetype ``'MMPr'``, creator code ``'CWIE'``\n  may be helpful in opening the projects from the Finder. Users on Mac OS\n  X familiar with the Unix ``find``\n  command should be able to rig ``/Developer/Tools/SetFile``\n  to do this job as well.\n* Many of the important projects (for ``libdes``, ``libsasl``,\n  ``build_plugins``, and the sample client ``sc_shlb``)\n  have Carbon versions.\n* Plugins are loaded from a ``Carbon`` subfolder of the ``SASL\n  v2`` folder in the Extensions folder. Plugins directly\n  in the ``SASL v2`` folder are considered to be for the Classic\n  libraries.\n* Note that when using the ``build_plugins`` project, you must\n  generate the plugin init files using the ``makeinit.sh`` script in\n  the ``plugins`` directory. The easiest way to do this is to run the\n  script from a Unix shell, such as Mac OS X. You must then fix the\n  filetypes of the generated source files (see above).\n* There is a new folder in ``CommonKClient`` called ``mac_kclient3``\n  which contains code compatible with MIT's new `KClient\n  3.0 <http://web.mit.edu/macdev/Development/MITKerberos/MITKerberosLib/KClient/Documentation/index.html>`_\n  API. This folder must be in your CodeWarrior access paths, the\n  old ``mac_kclient`` folder must not, and it must precede the\n  project's main folder.\n* The kerberos4 plugin uses this new code. The kerberos4 plugin\n  also\n  statically links the Carbon ``libdes``, and no other part of\n  Carbon SASL uses ``libdes`` directly. *Your application should\n  **not** link against* ``libdes.shlb`` *under Carbon!*\n  (It causes problems due to DES symbols also existing in the MIT\n  Kerberos library, which loads first.)\n* To build the projects, you should have the MIT Kerberos for\n  Macintosh 3.5 installation disk images mounted, since the access paths\n  include the absolute paths to the library directories from that\n  image. It's easier than you having to find the paths yourself, and\n  smaller than having to distribute the libraries with SASL.\n\nKnown Problems\n==============\n\n* The Kerberos v4 headers bundled with Mac OS X (and Kerberos for\n  Macintosh) are not compatible with OS X's OpenSSL headers. (Kerberos v4\n  support is disabled by default.) If you actually need krb4 support, the\n  easiest solution is to build without using OpenSSL's\n  ``libcrypto``. To do this, specify the ``--without-openssl``\n  option to ``configure``. As of version 2.1.18, this automatically\n  disables using ``libcrypto`` for DES as well. You will probably\n  also need to specify ``--disable-digest`` since the digestmd5 plugin\n  does not build against Kerberos v4's DES headers or library. Note that\n  this disables several features (digestmd5, NTLM, OTP) which require\n  OpenSSL. If both Kerberos v4 and functionality that requires OpenSSL are\n  needed, it is possible to build the Kerberos v4 plugin against\n  the correct K4 DES libraries, and everything else against OpenSSL;\n  however, we do not support that configuration.\n* Versions of Cyrus SASL prior to 2.1.14 with support for Carbon\n  CFM applications on Mac OS X have a known bug involving the CFM glue\n  code (in ``mac/osx_cfm_glue``). If ``sasl_done`` is called\n  to unload the SASL library, and then one of the initialization\n  functions (such as ``sasl_client_init``) is called to\n  reinitialize it from the same process, the application will crash. A\n  fix for one obvious cause of this problem is included in 2.1.14;\n  however, as of this writing, it has not been tested. It is possible\n  that other bugs in Cyrus SASL, or deficiencies in Apple's libraries,\n  will make this fix insufficient to resolve this issue.\n",
        "/tmp/vanessa/spack-stage/spack-stage-cyrus-sasl-2.1.27-hnal7aquex6gy2ydqk4wp52b2upmktrt/spack-src/docsrc/sasl/developer/plugprog.rst": ".. _plugprog:\n\n=========================\nPlugin Programmer's Guide\n=========================\n\n.. note::\n\n    NOTE: This is a work in progress. Any contributions would be\n    *very* appreciated.\n\n.. contents::\n    :local:\n\nIntroduction\n============\n\nAbout this Guide\n----------------\n\nThis guide gives a brief overview on the things that one\nneeds to know to write a :ref:`mechanism <authentication_mechanisms>` for the SASLv2 API (and thus\nCyrus SASLv2).  Note that this page is a brief overview\nand that the authoritative documentation are the header files\nincluded in the SASL distribution.  If you have any questions, please\nfeel free to contact the :ref:`Cyrus development team <contribute>`.\n\nPlease note that this guide is only intended for developers looking\nto write mechanisms for the SASLv2 API, and that application programmers\nshould be reading the :ref:`Application Programming Guide <programming>` instead.\n\n\nWhat is SASL?\n-------------\n\nA description of SASL is covered in detail in the\n:ref:`programmer's guide <programming>`, which mechanism\ndevelopers should probably read first anyway to become familiar\nwith development using the SASL library.\n\nCommon Section\n==============\n\nOverview of Plugin Programming\n------------------------------\n\nThe basic idea behind programming plugins for Cyrus SASL rests in\nthe ability to dlopen a shared library.  Thus, all plugins should\nbe shared libraries.  It is recommended that they are libtool\nlibraries for portability reasons (Cyrus SASL parses .la files to\nget the appropriate name to dlopen), but they can have an extention\nof .so as well.\n\nAll plugins should live in the same directory\n(generally /usr/lib/sasl2), which the glue code (that is, the interface\nlayer that sits between the plugins and the application) scans\nwhen one of the init functions (sasl_server_init or sasl_client_init)\nis called.  Cyrus SASL then attempts to open each library and\nrun an initialization function.  If the initialization function\nsucceeds, and the versions match, then the glue code determines\nthat the load was successful and the plugin is available for use.\n\nThere are serveral types of plugins (note that a given plugin library\nmay contain any or all of the following in combination, though\nsuch a plugin would be a beast!):\n\n\nMechanism Plugins\n    These plugins implement mechanisms\n    for authentication, and are the majority of the plugins included\n    with Cyrus SASL.  Generally implementing both a client and a server\n    side they take care of the authentication process.\nUser Canonicalization Plugins\n    These plugins enable differing\n    ways of canonicalizing authentication and authorization IDs.\nAuxiliary Property Plugins\n    These plugins allow auxilliary\n    properties about user accounts to be looked up, such as passwords.\n    Cyrus SASL includes a plugin to read sasldb files, for example.\n\n\nUse of sasl_utils_t\n-------------------\n\nBecause of the way that shared library plugins are loaded for both\nspeed and namespace reasons, the symbol tables are not shared across\nplugins.  Thus, the only interface that the plugin should assume it\nhas to the outside world is through the ``sasl_utils_t`` structure (or\nthrough links that it specifically requires).  Likewise, the glue code\nhas no (and will use no) interface into the plugin other than the\ncontents of the structures that are passed back to it by the\ninitialization function.\n\n.. note::\n\n    Do not assume you have access to any\n    functions except through links that your library explicitly makes\n    or through what is provided via the ``sasl_utils_t`` structure.\n\nError Reporting\n---------------\n\nError reporting is very important for failed authentication tracking\nand helping to debug installations or authentication problems.  For\nthat reason, in addition to the standard SASL return codes, the\nglue code provides an interface to its seterror function (via\n``sasl_utils_t``).  This function sets detailed error information for\na given connection.\n\nIn order to ensure consistency of this information, it is the\nresponsibility of the deepest function with access to the sasl_conn_t\nmake the call to set the errdetail string.\n\nMemory Allocation\n-----------------\n\nMemory allocation in SASLv2 follows the simple paradigm that **if you\nallocate it, you free it**.  This improves portability, and allows\nfor a large performance improvement over SASLv1.  To prevent memory\nleaks (especially in the mechanism plugins), please ensure that you\nfollow this paradigm.\n\nClient Send First / Server Send Last\n------------------------------------\n\nMechanism plugins used to have to worry about the situation\nwhere they needed clients to send first (or server to send last), yet\nthe protocol did not support it.  Luckily, this is now handled by\nthe glue code, provided that the plugin declares the appropriate flags\nin the structure returned by its init function.  Thus, the step functions\nwill not have to worry about these issues and can be implemented\nknowing they will be called only when the application actually has\ndata for them and/or will allow them to send data.  These flags are as\nfollows:\n\nSASL_FEAT_WANT_CLIENT_FIRST\n    The mechanism has the client\n    side send first always.  (e.g. PLAIN)\nSASL_FEAT_SERVER_FIRST\n    The mechanism has the server side\n    send first always.  (e.g. CRAM-MD5)\n\n\nIf neither flag is set, the mechanism will handle the client-send\nfirst situation internally, because the client may or may not send\nfirst.  (e.g. DIGEST-MD5).  In this case, the plugin must\nintelligently check for the presence (or absence) of clientin/serverin\ndata.  Note that the optional client send-first is only possible when the\nprotocol permits an initial response.\n\nThe server send last situation is handled by the plugin intelligently\nsetting \\*serverout when the step function returns SASL_OK.\n\n* For mechanisms\n  which never send last (e.g. PLAIN), \\*serverout must be set to NULL.\n* For\n  mechanisms which always send last (e.g. DIGEST-MD5), \\*serverout must\n  point to the success data.\n* For mechanisms in which the server may or\n  may not send last (e.g. SRP), \\*serverout must be set accordingly.\n\n.. _plugprog-client:\n\nClient Plugins\n==============\n\nClient-side mechanism plugins are generally included in the same\nplugin with their :ref:`server <plugprog-server>` counterpart, though\nthis is not a requirement.  They take care of the client-side of the\nSASL negotiation.  For a simple example, see the ANONYMOUS plugin.\nClient plugins must export ``sasl_client_plug_init`` which returns\na ``sasl_client_plug_t`` in order to load.  The structure has\nseveral functional members and a global context (which applies to\nall connections using the plugin).  The important ones are described\nbriefly here.\n\nmech_new\n    Called at the beginning of each connection,\n    (on a call to sasl_client_start),\n\n    mech_new does mechanism-specific initialization, and if necessary\n    allocates a connection context (which the glue code keeps track\n    of for it).  mech_new does not actually send any data to the client,\n    it simply allocates the context.\n\nmech_step\n    Called from ``sasl_client_start`` and\n    ``sasl_client_step``, this function does the actual work of\n    the client\n    side of the authentication.  If authentication is successful, it\n    should return SASL_OK, otherwise it should return a valid SASL\n    error code (and call seterror).\n\n    This should also set up the\n    oparams structure before returning SASL_OK, including any\n    security layer information (in the way of callbacks).\n\n    Note\n    that as soon as the client has both the authentication and\n    authorization IDs, it MUST call the canon_user function provided\n    in its params structure (for both the authentication and\n    authorization IDs, with SASL_CU_AUTHID and SASL_CU_AUTHZID\n    respectively).\n\nmech_dispose\n    Called to dispose of a connection context.\n    This is only called when the connection will no longer be used\n    (e.g. when ``sasl_dispose`` is called)\n\nmech_free\n    Called when the sasl library is shutting down\n    (by ``sasl_client_done/sasl_server_done/sasl_done``).\n    Intended to free any global state of the plugin.\n\n.. _plugprog-server:\n\nServer Plugins\n==============\n\nServer-side mechanism plugins are generally included in the same\nplugin with their :ref:`client <plugprog-client>` counterpart, though\nthis is not a requirement.  They take care of the server-side of the\nSASL negotiation, and are generally more complicated than their\nclient-side counterparts.  For a simple example, see the ANONYMOUS\nplugin.\n\nServer plugins must export ``sasl_server_plug_init`` which returns\na ``sasl_server_plug_t`` in order to load.  The structure has\nseveral functional members and a global context (which applies to\nall connections using the plugin).  The important ones are described\nbriefly here.\n\nmech_new\n    Called at the beginning of each connection,\n    (on a call to sasl_client_start),\n\n    mech_new does mechanism-specific initialization, and if necessary\n    allocates a connection context (which the glue code keeps track\n    of for it).  mech_new does not actually send any data to the client,\n    it simply allocates the context.\n\nmech_step\n    Called from ``sasl_server_start`` and\n    ``sasl_server_step``, this function does the actual work of\n    the server\n    side of the authentication.\n\n    If authentication is successful, it\n    should return SASL_OK, otherwise it should return a valid SASL\n    error code (and call seterror).  This should also set up the\n    oparams structure before returning SASL_OK, including any\n    security layer information (in the way of callbacks and SSF\n    information).\n\n    Also, as soon\n    as the mechanism has computed both the authentication and the\n    authorization IDs, it MUST call the canon_user function provided\n    in the server params structure (for both the authentication and\n    authorization IDs, with SASL_CU_AUTHID and SASL_CU_AUTHZID\n    respectively).  This action will also fill in its\n    propctx, so any auxiliary property *requests*\n    (for example, to lookup\n    the password) should be done before the request to canonicalize\n    the authentication id.  Authorization ID lookups do not occur until\n    after the plugin returns success to the SASL library.\n\n    Before returning SASL_OK, ``mech_step`` must fill in the\n    oparams fields for which it is responsible, that is, ``doneflag``\n    (set to 1 to indicate a complete exchange), ``maxoutbuf``, or\n    the maximum output size it can do at once for a security layer,\n    ``mech_ssf`` or the supplied SSF of the security layer,\n    and ``encode``, ``decode``, ``encode_context``,\n    and ``decode_context``,\n    which are what the glue code will call on calls to ``sasl_encode``,\n    ``sasl_encodev``, and ``sasl_decode``.\n\nmech_dispose\n    Called to dispose of a connection context.\n    This is only called when the connection will no longer be used\n    (e.g. when ``sasl_dispose`` is called)\n\nmech_free\n    Called when the sasl library is shutting down\n    (by ``sasl_client_done/sasl_server_done/sasl_done``).\n    Intended to free any global state of the plugin.\n\nsetpass\n    Called to set a user's password.  This allows\n    mechanisms to support their own internal password or secret\n    database.\n\nmech_avail\n    Called by the first call to\n    ``sasl_listmech``,\n    it checks to see if the mechanism is available for the given\n    user, and MAY allocate a connection context (thus avoiding\n    a call to ``mech_new``).  However it should not do this\n    without significant performance benefit as it forces the glue\n    code to keep track of extra contexts that may not be used.\n\nUser Canonicalization (canon_user) Plugins\n==========================================\n\nUser Canonicalization plugins allow for nonstandard ways of\ncanonicalizing the username.  They are subject to the following\nrequirements:\n\n* They must copy their output into the provided output buffers.\n* The output buffers may be the same as the input buffers.\n* They must function for the case which is only an authentication\n  ID (flags == SASL_CU_AUTHID) or only an authorization ID\n  (flags == SASL_CU_AUTHZID) or both\n  (flags == SASL_CU_AUTHID | SASL_CU_AUTHZID)\n\nUser canonicalization plugins must export a ``sasl_canonuser_init``\nfunction which returns a ``sasl_canonuser_plug_t`` in order\nto load successfully.  They must implement at least one of\nthe ``canon_user_client`` or ``canon_user_server`` members\nof the ``sasl_canonuser_plug_t``.  The INTERNAL canon_user plugin\nthat is inside of the glue code implements both in the same way.\n\nAuxiliary Property (auxprop) Plugins\n====================================\n\nPerhaps the most exciting addition in SASLv2, Auxprop plugins\nallow for an easy way to perform password and secret lookups (as well\nas other information needed for authentication and authorization)\nfrom directory services, and in the same request allow the application\nto receive properties that it needs to provide the service.\n\nAuxprop plugins need to export the ``sasl_auxprop_init`` function\nand pass back a ``sasl_auxprop_plug_t`` in order to load\nsuccessfully.  The sasldb plugin included with the Cyrus SASL\ndistribution would be a good place to start.\n\nInterfacing with property contexts is extremely well documented in\n``prop.h`` and so that is omitted here.  The only important\nnote is to be sure that you are using the interfaces provided\nthrough the ``sasl_utils_t`` structure and not calling\nthe functions directly.\n\nTo successfully implement an auxprop plugin there is only one\nrequired function to implement, that is the ``auxprop_lookup``\nmember of the ``sasl_auxprop_plug_t``.  This is called\njust after canonicalization of the username, with the canonicalized\nusername.  It can then do whatever lookups are necessary for any\nof the requested auxiliary properties.\n",
        "/tmp/vanessa/spack-stage/spack-stage-cyrus-sasl-2.1.27-hnal7aquex6gy2ydqk4wp52b2upmktrt/spack-src/dlcompat-20010505/dlfcn.h": "/*\n * This file was modified by Christoph Pfisterer <cp@chrisp.de>\n * on Sat, May 5 2001. See the file \"ChangeLog\" for details of what\n * was changed.\n *\n *\n * Copyright (c) 1999 Apple Computer, Inc. All rights reserved.\n *\n * @APPLE_LICENSE_HEADER_START@\n * \n * Portions Copyright (c) 1999 Apple Computer, Inc.  All Rights\n * Reserved.  This file contains Original Code and/or Modifications of\n * Original Code as defined in and that are subject to the Apple Public\n * Source License Version 1.1 (the \"License\").  You may not use this file\n * except in compliance with the License.  Please obtain a copy of the\n * License at http://www.apple.com/publicsource and read it before using\n * this file.\n * \n * The Original Code and all software distributed under the License are\n * distributed on an \"AS IS\" basis, WITHOUT WARRANTY OF ANY KIND, EITHER\n * EXPRESS OR IMPLIED, AND APPLE HEREBY DISCLAIMS ALL SUCH WARRANTIES,\n * INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE OR NON- INFRINGEMENT.  Please see the\n * License for the specific language governing rights and limitations\n * under the License.\n * \n * @APPLE_LICENSE_HEADER_END@\n */\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\nextern void * dlopen(\n    const char *path,\n    int mode);\nextern void * dlsym(\n    void * handle,\n    const char *symbol);\nextern const char * dlerror(\n    void);\nextern int dlclose(\n    void * handle);\n\n#define RTLD_LAZY\t0x1\n#define RTLD_NOW\t0x2\n#define RTLD_LOCAL\t0x4\n#define RTLD_GLOBAL\t0x8\n#define RTLD_NOLOAD\t0x10\n#define RTLD_SHARED\t0x20\t/* not used, the default */\n#define RTLD_UNSHARED\t0x40\n#define RTLD_NODELETE\t0x80\n#define RTLD_LAZY_UNDEF\t0x100\n\n#ifdef __cplusplus\n}\n#endif\n",
        "/tmp/vanessa/spack-stage/spack-stage-cyrus-sasl-2.1.27-hnal7aquex6gy2ydqk4wp52b2upmktrt/spack-src/dlcompat-20010505/dlopen.c": "/*\n * This file was modified by Christoph Pfisterer <cp@chrisp.de>\n * on Tue, Jan 23 2001. See the file \"ChangeLog\" for details of what\n * was changed.\n *\n *\n * Copyright (c) 1999 Apple Computer, Inc. All rights reserved.\n *\n * @APPLE_LICENSE_HEADER_START@\n * \n * Portions Copyright (c) 1999 Apple Computer, Inc.  All Rights\n * Reserved.  This file contains Original Code and/or Modifications of\n * Original Code as defined in and that are subject to the Apple Public\n * Source License Version 1.1 (the \"License\").  You may not use this file\n * except in compliance with the License.  Please obtain a copy of the\n * License at http://www.apple.com/publicsource and read it before using\n * this file.\n * \n * The Original Code and all software distributed under the License are\n * distributed on an \"AS IS\" basis, WITHOUT WARRANTY OF ANY KIND, EITHER\n * EXPRESS OR IMPLIED, AND APPLE HEREBY DISCLAIMS ALL SUCH WARRANTIES,\n * INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE OR NON- INFRINGEMENT.  Please see the\n * License for the specific language governing rights and limitations\n * under the License.\n * \n * @APPLE_LICENSE_HEADER_END@\n */\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <errno.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <limits.h>\n#include \"mach-o/dyld.h\"\n#include \"dlfcn.h\"\n\n/*\n * debugging macros\n */\n#if DEBUG > 0\n#define DEBUG_PRINT(format) fprintf(stderr,(format));fflush(stderr)\n#define DEBUG_PRINT1(format,arg1) fprintf(stderr,(format),(arg1));\\\n  fflush(stderr)\n#define DEBUG_PRINT2(format,arg1,arg2) fprintf(stderr,(format),\\\n  (arg1),(arg2));fflush(stderr)\n#define DEBUG_PRINT3(format,arg1,arg2,arg3) fprintf(stderr,(format),\\\n  (arg1),(arg2),(arg3));fflush(stderr)\n#else\n#define DEBUG_PRINT(format) /**/\n#define DEBUG_PRINT1(format,arg1) /**/\n#define DEBUG_PRINT2(format,arg1,arg2) /**/\n#define DEBUG_PRINT3(format,arg1,arg2,arg3) /**/\n#undef DEBUG\n#endif\n\n/*\n * The structure of a dlopen() handle.\n */\nstruct dlopen_handle {\n    dev_t dev;\t\t/* the path's device and inode number from stat(2) */\n    ino_t ino; \n    int dlopen_mode;\t/* current dlopen mode for this handle */\n    int dlopen_count;\t/* number of times dlopen() called on this handle */\n    NSModule module;\t/* the NSModule returned by NSLinkModule() */\n    struct dlopen_handle *prev;\n    struct dlopen_handle *next;\n};\nstatic struct dlopen_handle *dlopen_handles = NULL;\nstatic const struct dlopen_handle main_program_handle = {NULL};\nstatic char *dlerror_pointer = NULL;\n\n/*\n * NSMakePrivateModulePublic() is not part of the public dyld API so we define\n * it here.  The internal dyld function pointer for\n * __dyld_NSMakePrivateModulePublic is returned so thats all that maters to get\n * the functionality need to implement the dlopen() interfaces.\n */\nstatic\nint\nNSMakePrivateModulePublic(\nNSModule module)\n{\n    static int (*p)(NSModule module) = NULL;\n\n\tif(p == NULL)\n\t    _dyld_func_lookup(\"__dyld_NSMakePrivateModulePublic\",\n\t\t\t      (unsigned long *)&p);\n\tif(p == NULL){\n#ifdef DEBUG\n\t    printf(\"_dyld_func_lookup of __dyld_NSMakePrivateModulePublic \"\n\t\t   \"failed\\n\");\n#endif\n\t    return(FALSE);\n\t}\n\treturn(p(module));\n}\n\n/*\n * helper routine: search for a named module in various locations\n */\nstatic\nint\n_dl_search_paths(\nconst char *filename,\nchar *pathbuf,\nstruct stat *stat_buf)\n{\n    const char *pathspec;\n    const char *element;\n    const char *p;\n    char *q;\n    char *pathbuf_end;\n    const char *envvars[] = {\n        \"$DYLD_LIBRARY_PATH\",\n        \"$LD_LIBRARY_PATH\",\n        \"/usr/lib:/lib\",\n        NULL };\n    int envvar_index;\n\n        pathbuf_end = pathbuf + PATH_MAX - 8;\n\n\tfor(envvar_index = 0; envvars[envvar_index]; envvar_index++){\n\t    if(envvars[envvar_index][0] == '$'){\n\t        pathspec = getenv(envvars[envvar_index]+1);\n\t    }\n\t    else {\n\t        pathspec = envvars[envvar_index];\n\t    }\n\n\t    if(pathspec != NULL){\n\t        element = pathspec;\n\t\twhile(*element){\n\t            /* extract path list element */\n\t\t    p = element;\n\t\t    q = pathbuf;\n\t\t    while(*p && *p != ':' && q < pathbuf_end)\n                        *q++ = *p++;\n\t\t    if(q == pathbuf){  /* empty element */\n\t\t        if(*p){\n\t\t            element = p+1;\n\t\t\t    continue;\n\t\t\t}\n\t\t\tbreak;\n\t\t    }\n\t\t    if (*p){\n\t\t        element = p+1;\n\t\t    }\n\t\t    else{\n\t\t        element = p;  /* this terminates the loop */\n\t\t    }\n\n\t\t    /* add slash if neccessary */\n\t\t    if(*(q-1) != '/' && q < pathbuf_end){\n\t\t        *q++ = '/';\n\t\t    }\n\n\t\t    /* append module name */\n\t\t    p = filename;\n\t\t    while(*p && q < pathbuf_end) *q++ = *p++;\n\t\t    *q++ = 0;\n\n\t\t    if(q >= pathbuf_end){\n\t\t        /* maybe add an error message here */\n\t\t        break;\n\t\t    }\n\n\t\t    if(stat(pathbuf, stat_buf) == 0){\n\t\t        return 0;\n\t\t    }\n\t\t}\n\t    }\n\t}\n\n\t/* we have searched everywhere, now we give up */\n\treturn -1;\n}\n\n/*\n * dlopen() the MacOS X version of the FreeBSD dlopen() interface.\n */\nvoid *\ndlopen(\nconst char *path,\nint mode)\n{\n    const char *module_path;\n    void *retval;\n    struct stat stat_buf;\n    NSObjectFileImage objectFileImage;\n    NSObjectFileImageReturnCode ofile_result_code;\n    NSModule module;\n    struct dlopen_handle *p;\n    unsigned long options;\n    NSSymbol NSSymbol;\n    void (*init)(void);\n    char pathbuf[PATH_MAX];\n\n        DEBUG_PRINT2(\"libdl: dlopen(%s,0x%x) -> \", path, (unsigned int)mode);\n\n\tdlerror_pointer = NULL;\n\t/*\n\t * A NULL path is to indicate the caller wants a handle for the\n\t * main program.\n \t */\n\tif(path == NULL){\n\t    retval = (void *)&main_program_handle;\n\t    DEBUG_PRINT1(\"main / %p\\n\", retval);\n\t    return(retval);\n\t}\n\n\t/* see if the path exists and if so get the device and inode number */\n\tif(stat(path, &stat_buf) == -1){\n\t    dlerror_pointer = strerror(errno);\n\n\t    if(path[0] == '/'){\n\t        DEBUG_PRINT1(\"ERROR (stat): %s\\n\", dlerror_pointer);\n\t        return(NULL);\n\t    }\n\n\t    /* search for the module in various places */\n\t    if(_dl_search_paths(path, pathbuf, &stat_buf)){\n\t        /* dlerror_pointer is unmodified */\n\t        DEBUG_PRINT1(\"ERROR (stat): %s\\n\", dlerror_pointer);\n\t        return(NULL);\n\t    }\n\t    DEBUG_PRINT1(\"found %s -> \", pathbuf);\n\t    module_path = pathbuf;\n\t    dlerror_pointer = NULL;\n\t}\n\telse{\n\t    module_path = path;\n\t}\n\n\t/*\n\t * If we don't want an unshared handle see if we already have a handle\n\t * for this path.\n\t */\n\tif((mode & RTLD_UNSHARED) != RTLD_UNSHARED){\n\t    p = dlopen_handles;\n\t    while(p != NULL){\n\t\tif(p->dev == stat_buf.st_dev && p->ino == stat_buf.st_ino){\n\t\t    /* skip unshared handles */\n\t\t    if((p->dlopen_mode & RTLD_UNSHARED) == RTLD_UNSHARED)\n\t\t\tcontinue;\n\t\t    /*\n\t\t     * We have already created a handle for this path.  The\n\t\t     * caller might be trying to promote an RTLD_LOCAL handle\n\t\t     * to a RTLD_GLOBAL.  Or just looking it up with\n\t\t     * RTLD_NOLOAD.\n\t\t     */\n\t\t    if((p->dlopen_mode & RTLD_LOCAL) == RTLD_LOCAL &&\n\t\t       (mode & RTLD_GLOBAL) == RTLD_GLOBAL){\n\t\t\t/* promote the handle */\n\t\t\tif(NSMakePrivateModulePublic(p->module) == TRUE){\n\t\t\t    p->dlopen_mode &= ~RTLD_LOCAL;\n\t\t\t    p->dlopen_mode |= RTLD_GLOBAL;\n\t\t\t    p->dlopen_count++;\n\t\t\t    DEBUG_PRINT1(\"%p\\n\", p);\n\t\t\t    return(p);\n\t\t\t}\n\t\t\telse{\n\t\t\t    dlerror_pointer = \"can't promote handle from \"\n\t\t\t\t\t      \"RTLD_LOCAL to RTLD_GLOBAL\";\n\t\t\t    DEBUG_PRINT1(\"ERROR: %s\\n\", dlerror_pointer);\n\t\t\t    return(NULL);\n\t\t\t}\n\t\t    }\n\t\t    p->dlopen_count++;\n\t\t    DEBUG_PRINT1(\"%p\\n\", p);\n\t\t    return(p);\n\t\t}\n\t\tp = p->next;\n\t    }\n\t}\n\t\n\t/*\n\t * We do not have a handle for this path if we were just trying to\n\t * look it up return NULL to indicate we don't have it.\n\t */\n\tif((mode & RTLD_NOLOAD) == RTLD_NOLOAD){\n\t    dlerror_pointer = \"no existing handle for path RTLD_NOLOAD test\";\n\t    DEBUG_PRINT1(\"ERROR: %s\\n\", dlerror_pointer);\n\t    return(NULL);\n\t}\n\n\t/* try to create an object file image from this path */\n\tofile_result_code = NSCreateObjectFileImageFromFile(module_path,\n\t\t\t\t\t\t\t    &objectFileImage);\n\tif(ofile_result_code != NSObjectFileImageSuccess){\n\t    switch(ofile_result_code){\n\t    case NSObjectFileImageFailure:\n\t\tdlerror_pointer = \"object file setup failure\";\n\t\tDEBUG_PRINT1(\"ERROR: %s\\n\", dlerror_pointer);\n\t\treturn(NULL);\n\t    case NSObjectFileImageInappropriateFile:\n\t\tdlerror_pointer = \"not a Mach-O MH_BUNDLE file type\";\n\t\tDEBUG_PRINT1(\"ERROR: %s\\n\", dlerror_pointer);\n\t\treturn(NULL);\n\t    case NSObjectFileImageArch:\n\t\tdlerror_pointer = \"no object for this architecture\";\n\t\tDEBUG_PRINT1(\"ERROR: %s\\n\", dlerror_pointer);\n\t\treturn(NULL);\n\t    case NSObjectFileImageFormat:\n\t\tdlerror_pointer = \"bad object file format\";\n\t\tDEBUG_PRINT1(\"ERROR: %s\\n\", dlerror_pointer);\n\t\treturn(NULL);\n\t    case NSObjectFileImageAccess:\n\t\tdlerror_pointer = \"can't read object file\";\n\t\tDEBUG_PRINT1(\"ERROR: %s\\n\", dlerror_pointer);\n\t\treturn(NULL);\n\t    default:\n\t\tdlerror_pointer = \"unknown error from \"\n\t\t\t\t  \"NSCreateObjectFileImageFromFile()\";\n\t\tDEBUG_PRINT1(\"ERROR: %s\\n\", dlerror_pointer);\n\t\treturn(NULL);\n\t    }\n\t}\n\n\t/* try to link in this object file image */\n\toptions = NSLINKMODULE_OPTION_PRIVATE;\n\tif((mode & RTLD_NOW) == RTLD_NOW)\n\t    options |= NSLINKMODULE_OPTION_BINDNOW;\n\tmodule = NSLinkModule(objectFileImage, module_path, options);\n\tNSDestroyObjectFileImage(objectFileImage) ;\n\tif(module == NULL){\n\t    dlerror_pointer = \"NSLinkModule() failed for dlopen()\";\n\t    DEBUG_PRINT1(\"ERROR: %s\\n\", dlerror_pointer);\n\t    return(NULL);\n\t}\n\n\t/*\n\t * If the handle is to be global promote the handle.  It is done this\n\t * way to avoid multiply defined symbols.\n\t */\n\tif((mode & RTLD_GLOBAL) == RTLD_GLOBAL){\n\t    if(NSMakePrivateModulePublic(module) == FALSE){\n\t\tdlerror_pointer = \"can't promote handle from RTLD_LOCAL to \"\n\t\t\t\t  \"RTLD_GLOBAL\";\n\t\tDEBUG_PRINT1(\"ERROR: %s\\n\", dlerror_pointer);\n\t\treturn(NULL);\n\t    }\n\t}\n\n\tp = malloc(sizeof(struct dlopen_handle));\n\tif(p == NULL){\n\t    dlerror_pointer = \"can't allocate memory for the dlopen handle\";\n\t    DEBUG_PRINT1(\"ERROR: %s\\n\", dlerror_pointer);\n\t    return(NULL);\n\t}\n\n\t/* fill in the handle */\n\tp->dev = stat_buf.st_dev;\n        p->ino = stat_buf.st_ino;\n\tif(mode & RTLD_GLOBAL)\n\t    p->dlopen_mode = RTLD_GLOBAL;\n\telse\n\t    p->dlopen_mode = RTLD_LOCAL;\n\tp->dlopen_mode |= (mode & RTLD_UNSHARED) |\n\t\t\t  (mode & RTLD_NODELETE) |\n\t\t\t  (mode & RTLD_LAZY_UNDEF);\n\tp->dlopen_count = 1;\n\tp->module = module;\n\tp->prev = NULL;\n\tp->next = dlopen_handles;\n\tif(dlopen_handles != NULL)\n\t    dlopen_handles->prev = p;\n\tdlopen_handles = p;\n\n\t/* call the init function if one exists */\n\tNSSymbol = NSLookupSymbolInModule(p->module, \"__init\");\n\tif(NSSymbol != NULL){\n\t    init = NSAddressOfSymbol(NSSymbol);\n\t    init();\n\t}\n\t\n\tDEBUG_PRINT1(\"%p\\n\", p);\n\treturn(p);\n}\n\n/*\n * dlsym() the MacOS X version of the FreeBSD dlopen() interface.\n */\nvoid *\ndlsym(\nvoid * handle,\nconst char *symbol)\n{\n    struct dlopen_handle *dlopen_handle, *p;\n    NSSymbol NSSymbol;\n    void *address;\n\n        DEBUG_PRINT2(\"libdl: dlsym(%p,%s) -> \", handle, symbol);\n\n\tdlopen_handle = (struct dlopen_handle *)handle;\n\n\t/*\n\t * If this is the handle for the main program do a global lookup.\n\t */\n\tif(dlopen_handle == (struct dlopen_handle *)&main_program_handle){\n\t    if(NSIsSymbolNameDefined(symbol) == TRUE){\n\t\tNSSymbol = NSLookupAndBindSymbol(symbol);\n\t\taddress = NSAddressOfSymbol(NSSymbol);\n\t\tdlerror_pointer = NULL;\n\t\tDEBUG_PRINT1(\"%p\\n\", address);\n\t\treturn(address);\n\t    }\n\t    else{\n\t\tdlerror_pointer = \"symbol not found\";\n\t\tDEBUG_PRINT1(\"ERROR: %s\\n\", dlerror_pointer);\n\t\treturn(NULL);\n\t    }\n\t}\n\n\t/*\n\t * Find this handle and do a lookup in just this module.\n\t */\n\tp = dlopen_handles;\n\twhile(p != NULL){\n\t    if(dlopen_handle == p){\n\t\tNSSymbol = NSLookupSymbolInModule(p->module, symbol);\n\t\tif(NSSymbol != NULL){\n\t\t    address = NSAddressOfSymbol(NSSymbol);\n\t\t    dlerror_pointer = NULL;\n\t\t    DEBUG_PRINT1(\"%p\\n\", address);\n\t\t    return(address);\n\t\t}\n\t\telse{\n\t\t    dlerror_pointer = \"symbol not found\";\n\t\t    DEBUG_PRINT1(\"ERROR: %s\\n\", dlerror_pointer);\n\t\t    return(NULL);\n\t\t}\n\t    }\n\t    p = p->next;\n\t}\n\n\tdlerror_pointer = \"bad handle passed to dlsym()\";\n\tDEBUG_PRINT1(\"ERROR: %s\\n\", dlerror_pointer);\n\treturn(NULL);\n}\n\n/*\n * dlerror() the MacOS X version of the FreeBSD dlopen() interface.\n */\nconst char *\ndlerror(\nvoid)\n{\n    const char *p;\n\n\tp = (const char *)dlerror_pointer;\n\tdlerror_pointer = NULL;\n\treturn(p);\n}\n\n/*\n * dlclose() the MacOS X version of the FreeBSD dlopen() interface.\n */\nint\ndlclose(\nvoid * handle)\n{\n    struct dlopen_handle *p, *q;\n    unsigned long options;\n    NSSymbol NSSymbol;\n    void (*fini)(void);\n\n        DEBUG_PRINT1(\"libdl: dlclose(%p) -> \", handle);\n\n\tdlerror_pointer = NULL;\n\tq = (struct dlopen_handle *)handle;\n\tp = dlopen_handles;\n\twhile(p != NULL){\n\t    if(p == q){\n\t\t/* if the dlopen() count is not zero we are done */\n\t\tp->dlopen_count--;\n\t\tif(p->dlopen_count != 0){\n\t\t    DEBUG_PRINT(\"OK\");\n\t\t    return(0);\n\t\t}\n\n\t\t/* call the fini function if one exists */\n\t\tNSSymbol = NSLookupSymbolInModule(p->module, \"__fini\");\n\t\tif(NSSymbol != NULL){\n\t\t    fini = NSAddressOfSymbol(NSSymbol);\n\t\t    fini();\n\t\t}\n\n\t\t/* unlink the module for this handle */\n\t\toptions = 0;\n\t\tif(p->dlopen_mode & RTLD_NODELETE)\n\t\t    options |= NSUNLINKMODULE_OPTION_KEEP_MEMORY_MAPPED;\n\t\tif(p->dlopen_mode & RTLD_LAZY_UNDEF)\n\t\t    options |= NSUNLINKMODULE_OPTION_RESET_LAZY_REFERENCES;\n\t\tif(NSUnLinkModule(p->module, options) == FALSE){\n\t\t    dlerror_pointer = \"NSUnLinkModule() failed for dlclose()\";\n\t\t    DEBUG_PRINT1(\"ERROR: %s\\n\", dlerror_pointer);\n\t\t    return(-1);\n\t\t}\n\t\tif(p->prev != NULL)\n\t\t    p->prev->next = p->next;\n\t\tif(p->next != NULL)\n\t\t    p->next->prev = p->prev;\n\t\tif(dlopen_handles == p)\n\t\t    dlopen_handles = p->next;\n\t\tfree(p);\n\t\tDEBUG_PRINT(\"OK\");\n\t\treturn(0);\n\t    }\n\t    p = p->next;\n\t}\n\tdlerror_pointer = \"invalid handle passed to dlclose()\";\n\tDEBUG_PRINT1(\"ERROR: %s\\n\", dlerror_pointer);\n\treturn(-1);\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-cyrus-sasl-2.1.27-hnal7aquex6gy2ydqk4wp52b2upmktrt/spack-src/m4/sasl2.m4": "# sasl2.m4--sasl2 libraries and includes\n# Rob Siemborski\n\n# SASL2_CRYPT_CHK\n# ---------------\nAC_DEFUN([SASL_GSSAPI_CHK],\n[AC_REQUIRE([SASL2_CRYPT_CHK])\nAC_REQUIRE([CMU_SOCKETS])\nAC_ARG_ENABLE([gssapi],\n              [AC_HELP_STRING([--enable-gssapi=<DIR>],\n                              [enable GSSAPI authentication [yes]])],\n              [gssapi=$enableval],\n              [gssapi=yes])\nAC_ARG_WITH([gss_impl],\n            [AC_HELP_STRING([--with-gss_impl={heimdal|mit|cybersafe|seam|auto}],\n                            [choose specific GSSAPI implementation [[auto]]])],\n            [gss_impl=$withval],\n            [gss_impl=auto])\n\ngs2=\"no\"\nif test \"$gssapi\" != no; then\n  platform=\n  case \"${host}\" in\n    *-*-linux*)\n      platform=__linux\n      ;;\n    *-*-hpux*)\n      platform=__hpux\n      ;;\n    *-*-irix*)\n      platform=__irix\n      ;;\n    *-*-solaris2*)\n# When should we use __sunos?\n      platform=__solaris\n      ;;\n    *-*-aix*)\n###_AIX\n      platform=__aix\n      ;;\n    *-*-darwin*)\n      platform=__darwin\n      ;;\n    *)\n      AC_WARN([The system type is not recognized. If you believe that CyberSafe GSSAPI works on this platform, please update the configure script])\n      if test \"$gss_impl\" = \"cybersafe\"; then\n        AC_MSG_ERROR([CyberSafe was forced, cannot continue as platform is not supported])\n      fi\n      ;;\n  esac\n\n  cmu_saved_CPPFLAGS=$CPPFLAGS\n\n  if test -d ${gssapi}; then\n    CPPFLAGS=\"$CPPFLAGS -I$gssapi/include\"\n# We want to keep -I in our CPPFLAGS, but only if we succeed\n    cmu_saved_CPPFLAGS=$CPPFLAGS\n### I am not sure how useful is this (and whether this is required at all\n### especially when we have to provide two -L flags for new CyberSafe\n    LDFLAGS=\"$LDFLAGS -L$gssapi/lib\"\n\n    if test -n \"$platform\"; then\n      if test \"$gss_impl\" = \"auto\" -o \"$gss_impl\" = \"cybersafe\"; then\n        CPPFLAGS=\"$CPPFLAGS -D$platform\"\n        if test -d \"${gssapi}/appsec-sdk/include\"; then\n          CPPFLAGS=\"$CPPFLAGS -I${gssapi}/appsec-sdk/include\"\n        fi\n      fi\n    fi\n  fi\n  AC_CHECK_HEADER([gssapi.h],,\n                  [AC_CHECK_HEADER([gssapi/gssapi.h],, [gssapi=no])])\n  AC_CHECK_HEADERS(gssapi/gssapi_ext.h)\n  CPPFLAGS=$cmu_saved_CPPFLAGS\n\nfi\n\nif test \"$gssapi\" != no; then\n  if test \"$ac_cv_header_gssapi_h\" = \"yes\"; then\n    AC_DEFINE(HAVE_GSSAPI_H,,[Define if you have the gssapi.h header file])\n  elif test \"$ac_cv_header_gssapi_gssapi_h\" = \"yes\"; then\n    AC_DEFINE(HAVE_GSSAPI_GSSAPI_H,,[Define if you have the gssapi/gssapi.h header file])\n  fi\n\n  # We need to find out which gssapi implementation we are\n  # using. Supported alternatives are: MIT Kerberos 5,\n  # Heimdal Kerberos 5 (http://www.pdc.kth.se/heimdal),\n  # CyberSafe Kerberos 5 (http://www.cybersafe.com/)\n  # and Sun SEAM (http://wwws.sun.com/software/security/kerberos/)\n  #\n  # The choice is reflected in GSSAPIBASE_LIBS\n\n  AC_CHECK_LIB(resolv,res_search)\n  if test -d ${gssapi}; then\n     gssapi_dir=\"${gssapi}/lib\"\n     GSSAPIBASE_LIBS=\"-L$gssapi_dir\"\n     GSSAPIBASE_STATIC_LIBS=\"-L$gssapi_dir\"\n  else\n     # FIXME: This is only used for building cyrus, and then only as\n     # a real hack.  it needs to be fixed.\n     gssapi_dir=\"/usr/local/lib\"\n  fi\n\n  # Check a full link against the Heimdal libraries.\n  # If this fails, check a full link against the MIT libraries.\n  # If this fails, check a full link against the CyberSafe libraries.\n  # If this fails, check a full link against the Solaris 8 and up libgss.\n\n  if test \"$gss_impl\" = \"auto\" -o \"$gss_impl\" = \"heimdal\"; then\n    gss_failed=0\n    AC_CHECK_LIB(gssapi,gss_unwrap,gss_impl=\"heimdal\",gss_failed=1,\n                 ${GSSAPIBASE_LIBS} -lgssapi -lkrb5 -lasn1 -lroken ${LIB_CRYPT} ${LIB_DES} -lcom_err ${LIB_SOCKET})\n    if test \"$gss_impl\" != \"auto\" -a \"$gss_failed\" = \"1\"; then\n      gss_impl=\"failed\"\n    fi\n  fi\n\n  if test \"$gss_impl\" = \"auto\" -o \"$gss_impl\" = \"mit\"; then\n    gss_failed=0\n    AC_CHECK_LIB(gssapi_krb5,gss_unwrap,gss_impl=\"mit\",gss_failed=1,\n                 ${GSSAPIBASE_LIBS} -lgssapi_krb5 -lkrb5 -lk5crypto -lcom_err ${LIB_SOCKET})\n    if test \"$gss_impl\" != \"auto\" -a \"$gss_failed\" = \"1\"; then\n      gss_impl=\"failed\"\n    fi\n  fi\n\n  # For Cybersafe one has to set a platform define in order to make compilation work\n  if test \"$gss_impl\" = \"auto\" -o \"$gss_impl\" = \"cybersafe\"; then\n\n    cmu_saved_CPPFLAGS=$CPPFLAGS\n    cmu_saved_GSSAPIBASE_LIBS=$GSSAPIBASE_LIBS\n# FIXME - Note that the libraries are in .../lib64 for 64bit kernels\n    if test -d \"${gssapi}/appsec-rt/lib\"; then\n      GSSAPIBASE_LIBS=\"$GSSAPIBASE_LIBS -L${gssapi}/appsec-rt/lib\"\n    fi\n    CPPFLAGS=\"$CPPFLAGS -D$platform\"\n    if test -d \"${gssapi}/appsec-sdk/include\"; then\n      CPPFLAGS=\"$CPPFLAGS -I${gssapi}/appsec-sdk/include\"\n    fi\n\n    gss_failed=0\n\n# Check for CyberSafe with two libraries first, than fall back to a single \n# library (older CyberSafe)\n\n    unset ac_cv_lib_gss_csf_gss_acq_user\n    AC_CHECK_LIB(gss,csf_gss_acq_user,gss_impl=\"cybersafe03\",\n                 [unset ac_cv_lib_gss_csf_gss_acq_user;\n                  AC_CHECK_LIB(gss,csf_gss_acq_user,gss_impl=\"cybersafe\",\n                               gss_failed=1,$GSSAPIBASE_LIBS -lgss)],\n                 [${GSSAPIBASE_LIBS} -lgss -lcstbk5])\n\n    if test \"$gss_failed\" = \"1\"; then\n# Restore variables\n      GSSAPIBASE_LIBS=$cmu_saved_GSSAPIBASE_LIBS\n      CPPFLAGS=$cmu_saved_CPPFLAGS\n\n      if test \"$gss_impl\" != \"auto\"; then\n        gss_impl=\"failed\"\n      fi\n    fi\n  fi\n\n  if test \"$gss_impl\" = \"auto\" -o \"$gss_impl\" = \"seam\"; then\n    gss_failed=0\n    AC_CHECK_LIB(gss,gss_unwrap,gss_impl=\"seam\",gss_failed=1,-lgss)\n    if test \"$gss_impl\" != \"auto\" -a \"$gss_failed\" = \"1\"; then\n      gss_impl=\"failed\"\n    fi\n  fi\n\n  if test \"$gss_impl\" = \"mit\"; then\n    GSSAPIBASE_LIBS=\"$GSSAPIBASE_LIBS -lgssapi_krb5 -lkrb5 -lk5crypto -lcom_err\"\n    GSSAPIBASE_STATIC_LIBS=\"$GSSAPIBASE_LIBS $gssapi_dir/libgssapi_krb5.a $gssapi_dir/libkrb5.a $gssapi_dir/libk5crypto.a $gssapi_dir/libcom_err.a\"\n  elif test \"$gss_impl\" = \"heimdal\"; then\n    CPPFLAGS=\"$CPPFLAGS\"\n    GSSAPIBASE_LIBS=\"$GSSAPIBASE_LIBS -lgssapi -lkrb5 -lasn1 -lroken ${LIB_CRYPT} ${LIB_DES} -lcom_err\"\n    GSSAPIBASE_STATIC_LIBS=\"$GSSAPIBASE_STATIC_LIBS $gssapi_dir/libgssapi.a $gssapi_dir/libkrb5.a $gssapi_dir/libasn1.a $gssapi_dir/libroken.a $gssapi_dir/libcom_err.a ${LIB_CRYPT}\"\n  elif test \"$gss_impl\" = \"cybersafe03\"; then\n# Version of CyberSafe with two libraries\n    CPPFLAGS=\"$CPPFLAGS -D$platform -I${gssapi}/appsec-sdk/include\"\n    GSSAPIBASE_LIBS=\"$GSSAPIBASE_LIBS -lgss -lcstbk5\"\n    # there is no static libgss for CyberSafe\n    GSSAPIBASE_STATIC_LIBS=none\n  elif test \"$gss_impl\" = \"cybersafe\"; then\n    CPPFLAGS=\"$CPPFLAGS -D$platform -I${gssapi}/appsec-sdk/include\"\n    GSSAPIBASE_LIBS=\"$GSSAPIBASE_LIBS -lgss\"\n    # there is no static libgss for CyberSafe\n    GSSAPIBASE_STATIC_LIBS=none\n  elif test \"$gss_impl\" = \"seam\"; then\n    GSSAPIBASE_LIBS=-lgss\n    # there is no static libgss on Solaris 8 and up\n    GSSAPIBASE_STATIC_LIBS=none\n  elif test \"$gss_impl\" = \"failed\"; then\n    gssapi=\"no\"\n    GSSAPIBASE_LIBS=\n    GSSAPIBASE_STATIC_LIBS=\n    AC_WARN([Disabling GSSAPI - specified library not found])\n  else\n    gssapi=\"no\"\n    GSSAPIBASE_LIBS=\n    GSSAPIBASE_STATIC_LIBS=\n    AC_WARN([Disabling GSSAPI - no library])\n  fi\nfi\n\n#\n# Cybersafe defines both GSS_C_NT_HOSTBASED_SERVICE and GSS_C_NT_USER_NAME\n# in gssapi\\rfckrb5.h\n#\nif test \"$gssapi\" != \"no\"; then\n  if test \"$gss_impl\" = \"cybersafe\" -o \"$gss_impl\" = \"cybersafe03\"; then\n    AC_EGREP_CPP(hostbased_service_gss_nt_yes,\n                 [#include <gssapi/gssapi.h>\n                  #ifdef GSS_C_NT_HOSTBASED_SERVICE\n                    hostbased_service_gss_nt_yes\n                  #endif],\n                 [AC_DEFINE(HAVE_GSS_C_NT_HOSTBASED_SERVICE,,\n                            [Define if your GSSAPI implementation defines GSS_C_NT_HOSTBASED_SERVICE])],\n                 [AC_WARN([Cybersafe define not found])])\n\n  elif test \"$ac_cv_header_gssapi_h\" = \"yes\"; then\n    AC_EGREP_HEADER(GSS_C_NT_HOSTBASED_SERVICE, gssapi.h,\n                    [AC_DEFINE(HAVE_GSS_C_NT_HOSTBASED_SERVICE,,\n                               [Define if your GSSAPI implementation defines GSS_C_NT_HOSTBASED_SERVICE])])\n  elif test \"$ac_cv_header_gssapi_gssapi_h\"; then\n    AC_EGREP_HEADER(GSS_C_NT_HOSTBASED_SERVICE, gssapi/gssapi.h,\n                    [AC_DEFINE(HAVE_GSS_C_NT_HOSTBASED_SERVICE,,\n                               [Define if your GSSAPI implementation defines GSS_C_NT_HOSTBASED_SERVICE])])\n  fi\n\n  if test \"$gss_impl\" = \"cybersafe\" -o \"$gss_impl\" = \"cybersafe03\"; then\n    AC_EGREP_CPP(user_name_yes_gss_nt,\n                 [#include <gssapi/gssapi.h>\n                  #ifdef GSS_C_NT_USER_NAME\n                   user_name_yes_gss_nt\n                  #endif],\n                 [AC_DEFINE(HAVE_GSS_C_NT_USER_NAME,,\n                            [Define if your GSSAPI implementation defines GSS_C_NT_USER_NAME])],\n                 [AC_WARN([Cybersafe define not found])])\n  elif test \"$ac_cv_header_gssapi_h\" = \"yes\"; then\n    AC_EGREP_HEADER(GSS_C_NT_USER_NAME, gssapi.h,\n                    [AC_DEFINE(HAVE_GSS_C_NT_USER_NAME,,\n                               [Define if your GSSAPI implementation defines GSS_C_NT_USER_NAME])])\n    AC_EGREP_HEADER(gss_inquire_attrs_for_mech, gssapi.h, rfc5587=yes)\n    AC_EGREP_HEADER(gss_inquire_mech_for_saslname, gssapi.h, rfc5801=yes)\n  elif test \"$ac_cv_header_gssapi_gssapi_h\"; then\n    AC_EGREP_HEADER(GSS_C_NT_USER_NAME, gssapi/gssapi.h,\n                    [AC_DEFINE(HAVE_GSS_C_NT_USER_NAME,,\n                               [Define if your GSSAPI implementation defines GSS_C_NT_USER_NAME])])\n    AC_EGREP_HEADER(gss_inquire_attrs_for_mech, gssapi/gssapi.h, rfc5587=yes)\n    AC_EGREP_HEADER(gss_inquire_mech_for_saslname, gssapi.h, rfc5801=yes)\n  fi\nfi\n\nAC_MSG_CHECKING([GSSAPI])\nif test \"$gssapi\" != no; then\n  AC_MSG_RESULT([with implementation ${gss_impl}])\n  AC_CHECK_LIB(resolv,res_search,GSSAPIBASE_LIBS=\"$GSSAPIBASE_LIBS -lresolv\")\n  SASL_MECHS=\"$SASL_MECHS libgssapiv2.la\"\n  SASL_STATIC_OBJS=\"$SASL_STATIC_OBJS gssapi.o\"\n  SASL_STATIC_SRCS=\"$SASL_STATIC_SRCS \\$(top_srcdir)/plugins/gssapi.c\"\n  if test \"$rfc5587\" = \"yes\" -a \"$rfc5801\" = \"yes\"; then\n    gs2=\"yes\"\n    SASL_MECHS=\"$SASL_MECHS libgs2.la\"\n    SASL_STATIC_OBJS=\"$SASL_STATIC_OBJS gs2.o\"\n    SASL_STATIC_SRCS=\"$SASL_STATIC_SRCS \\$(top_srcdir)/plugins/gs2.c\"\n  fi\n\n  cmu_save_LIBS=\"$LIBS\"\n  LIBS=\"$LIBS $GSSAPIBASE_LIBS\"\n  AC_CHECK_FUNCS(gsskrb5_register_acceptor_identity)\n  if test \"$ac_cv_func_gsskrb5_register_acceptor_identity\" = no ; then\n    AC_CHECK_HEADERS(gssapi/gssapi_krb5.h)\n    if test \"$ac_cv_header_gssapi_gssapi_krb5_h\" = \"yes\"; then\n      AC_CHECK_DECL(gsskrb5_register_acceptor_identity,\n                    [AC_DEFINE(HAVE_GSSKRB5_REGISTER_ACCEPTOR_IDENTITY,1,\n                               [Define if your GSSAPI implementation defines gsskrb5_register_acceptor_identity])],,\n                    [\n                    AC_INCLUDES_DEFAULT\n                    #include <gssapi/gssapi_krb5.h>\n                    ])\n    fi\n  fi\n  AC_CHECK_FUNCS(gss_decapsulate_token)\n  AC_CHECK_FUNCS(gss_encapsulate_token)\n  AC_CHECK_FUNCS(gss_oid_equal)\n  LIBS=\"$cmu_save_LIBS\"\n\n  cmu_save_LIBS=\"$LIBS\"\n  LIBS=\"$LIBS $GSSAPIBASE_LIBS\"\n  AC_CHECK_FUNCS(gss_get_name_attribute)\n  LIBS=\"$cmu_save_LIBS\"\n\n  cmu_save_LIBS=\"$LIBS\"\n  LIBS=\"$LIBS $GSSAPIBASE_LIBS\"\n  AC_CHECK_FUNCS(gss_inquire_sec_context_by_oid)\n  if test \"$ac_cv_func_gss_inquire_sec_context_by_oid\" = no ; then\n    if test \"$ac_cv_header_gssapi_gssapi_ext_h\" = \"yes\"; then\n      AC_CHECK_DECL(gss_inquire_sec_context_by_oid,\n                    [AC_DEFINE(HAVE_GSS_INQUIRE_SEC_CONTEXT_BY_OID,1,\n                               [Define if your GSSAPI implementation defines gss_inquire_sec_context_by_oid])],,\n                    [\n                    AC_INCLUDES_DEFAULT\n                    #include <gssapi/gssapi_ext.h>\n                    ])\n    fi\n  fi\n  if test \"$ac_cv_header_gssapi_gssapi_ext_h\" = \"yes\"; then\n    AC_EGREP_HEADER(GSS_C_SEC_CONTEXT_SASL_SSF, gssapi/gssapi_ext.h,\n                    [AC_DEFINE(HAVE_GSS_C_SEC_CONTEXT_SASL_SSF,,\n                               [Define if your GSSAPI implementation defines GSS_C_SEC_CONTEXT_SASL_SSF])])\n  fi\n  cmu_save_LIBS=\"$LIBS\"\n  LIBS=\"$LIBS $GSSAPIBASE_LIBS\"\n\n  AC_MSG_CHECKING([for SPNEGO support in GSSAPI libraries])\n  AC_TRY_RUN([\n#ifdef HAVE_GSSAPI_H\n#include <gssapi.h>\n#else\n#include <gssapi/gssapi.h>\n#endif\n\nint main(void)\n{\n    gss_OID_desc spnego_oid = { 6, (void *) \"\\x2b\\x06\\x01\\x05\\x05\\x02\" };\n    gss_OID_set mech_set;\n    OM_uint32 min_stat;\n    int have_spnego = 0;\n                                                                               \n    if (gss_indicate_mechs(&min_stat, &mech_set) == GSS_S_COMPLETE) {\n\tgss_test_oid_set_member(&min_stat, &spnego_oid, mech_set, &have_spnego);\n\tgss_release_oid_set(&min_stat, &mech_set);\n    }\n\n    return (!have_spnego);  // 0 = success, 1 = failure\n}\n],\t\n\t[ AC_DEFINE(HAVE_GSS_SPNEGO,,[Define if your GSSAPI implementation supports SPNEGO])\n\tAC_MSG_RESULT(yes) ],\n\tAC_MSG_RESULT(no))\n  LIBS=\"$cmu_save_LIBS\"\n\nelse\n  AC_MSG_RESULT([disabled])\nfi\nAC_SUBST(GSSAPIBASE_LIBS)\n])# SASL_GSSAPI_CHK\n\n\n# SASL_SET_GSSAPI_LIBS\n# --------------------\nAC_DEFUN([SASL_SET_GSSAPI_LIBS],\n[SASL_GSSAPI_LIBS_SET=\"yes\"\n])\n\n\n# CMU_SASL2\n# ---------\n# What we want to do here is setup LIB_SASL with what one would\n# generally want to have (e.g. if static is requested, make it that,\n# otherwise make it dynamic.\n#\n# We also want to create LIB_DYN_SASL and DYNSASLFLAGS.\n#\n# Also sets using_static_sasl to \"no\" \"static\" or \"staticonly\"\n#\nAC_DEFUN([CMU_SASL2],\n[AC_REQUIRE([SASL_GSSAPI_CHK])\n\nAC_ARG_WITH(sasl,\n            [AC_HELP_STRING([--with-sasl=DIR],[Compile with libsasl2 in <DIR>])],\n            with_sasl=\"$withval\",\n            with_sasl=\"yes\")\n\nAC_ARG_WITH(staticsasl,\n            [AC_HELP_STRING([--with-staticsasl=DIR],\n                            [Compile with staticly linked libsasl2 in <DIR>])],\n            [with_staticsasl=\"$withval\";\n             if test $with_staticsasl != \"no\"; then\n               using_static_sasl=\"static\"\n             fi],\n            [with_staticsasl=\"no\"; using_static_sasl=\"no\"])\n\nSASLFLAGS=\"\"\nLIB_SASL=\"\"\n\ncmu_saved_CPPFLAGS=$CPPFLAGS\ncmu_saved_LDFLAGS=$LDFLAGS\ncmu_saved_LIBS=$LIBS\n\nif test ${with_staticsasl} != \"no\"; then\n  if test -d ${with_staticsasl}; then\n    if test -d ${with_staticsasl}/lib64 ; then\n      ac_cv_sasl_where_lib=${with_staticsasl}/lib64\n    else\n      ac_cv_sasl_where_lib=${with_staticsasl}/lib\n    fi\n    ac_cv_sasl_where_lib=${with_staticsasl}/lib\n    ac_cv_sasl_where_inc=${with_staticsasl}/include\n\n    SASLFLAGS=\"-I$ac_cv_sasl_where_inc\"\n    LIB_SASL=\"-L$ac_cv_sasl_where_lib\"\n    CPPFLAGS=\"${cmu_saved_CPPFLAGS} -I${ac_cv_sasl_where_inc}\"\n    LDFLAGS=\"${cmu_saved_LDFLAGS} -L${ac_cv_sasl_where_lib}\"\n  else\n    with_staticsasl=\"/usr\"\n  fi\n\n  AC_CHECK_HEADER(sasl/sasl.h,\n                  [AC_CHECK_HEADER(sasl/saslutil.h,\n                                   [for i42 in lib64 lib; do\n                                      if test -r ${with_staticsasl}/$i42/libsasl2.a; then\n                                        ac_cv_found_sasl=yes\n                                        AC_MSG_CHECKING([for static libsasl])\n                                        LIB_SASL=\"$LIB_SASL ${with_staticsasl}/$i42/libsasl2.a\"\n                                      fi\n                                    done\n                                    AC_CHECK_FUNC(dlopen,,[AC_CHECK_LIB(dl, dlopen, [LIB_SASL+=\"$LIB_SASL -ldl\"])])\n                                    if test ! \"$ac_cv_found_sasl\" = \"yes\"; then\n                                      AC_MSG_CHECKING([for static libsasl])\n                                      AC_MSG_ERROR([Could not find ${with_staticsasl}/lib*/libsasl2.a])\n                                    fi])])\n\n  AC_MSG_RESULT([found])\n\n  if test \"x$SASL_GSSAPI_LIBS_SET\" = \"x\"; then\n    LIB_SASL=\"$LIB_SASL $GSSAPIBASE_STATIC_LIBS\"\n  else\n    SASL_GSSAPI_LIBS_SET=\"\"\n    cmu_saved_LIBS=\"$GSSAPIBASE_STATIC_LIBS $cmu_saved_LIBS\" \n  fi\nfi\n\nif test -d ${with_sasl}; then\n  ac_cv_sasl_where_lib=${with_sasl}/lib\n  ac_cv_sasl_where_inc=${with_sasl}/include\n\n  DYNSASLFLAGS=\"-I$ac_cv_sasl_where_inc\"\n  if test \"$ac_cv_sasl_where_lib\" != \"\"; then\n    CMU_ADD_LIBPATH_TO($ac_cv_sasl_where_lib, LIB_DYN_SASL)\n  fi\n  LIB_DYN_SASL=\"$LIB_DYN_SASL -lsasl2\"\n  CPPFLAGS=\"${cmu_saved_CPPFLAGS} -I${ac_cv_sasl_where_inc}\"\n  LDFLAGS=\"${cmu_saved_LDFLAGS} -L${ac_cv_sasl_where_lib}\"\nfi\n\n# be sure to check for a SASLv2 specific function\nAC_CHECK_HEADER(sasl/sasl.h,\n                [AC_CHECK_HEADER(sasl/saslutil.h,\n                                 [AC_CHECK_LIB(sasl2, prop_get, \n                                               ac_cv_found_sasl=yes,\n                                               ac_cv_found_sasl=no)],\n                                 ac_cv_found_sasl=no)],\n                ac_cv_found_sasl=no)\n\nif test \"$ac_cv_found_sasl\" = \"yes\"; then\n  if test \"$ac_cv_sasl_where_lib\" != \"\"; then\n    CMU_ADD_LIBPATH_TO($ac_cv_sasl_where_lib, DYNLIB_SASL)\n  fi\n  DYNLIB_SASL=\"$DYNLIB_SASL -lsasl2\"\n  if test \"$using_static_sasl\" != \"static\"; then\n    LIB_SASL=$DYNLIB_SASL\n    SASLFLAGS=$DYNSASLFLAGS\n  fi\nelse\n  DYNLIB_SASL=\"\"\n  DYNSASLFLAGS=\"\"\n  using_static_sasl=\"staticonly\"\nfi\n\nif test \"x$SASL_GSSAPI_LIBS_SET\" != \"x\"; then\n  SASL_GSSAPI_LIBS_SET=\"\"\n  cmu_saved_LIBS=\"$GSSAPIBASE_LIBS $cmu_saved_LIBS\" \nfi\n\nLIBS=\"$cmu_saved_LIBS\"\nLDFLAGS=\"$cmu_saved_LDFLAGS\"\nCPPFLAGS=\"$cmu_saved_CPPFLAGS\"\n\nAC_SUBST(LIB_DYN_SASL)\nAC_SUBST(DYNSASLFLAGS)\nAC_SUBST(LIB_SASL)\nAC_SUBST(SASLFLAGS)\n])# CMU_SASL2\n\n\n# CMU_SASL2_REQUIRED\n# ------------------\nAC_DEFUN([CMU_SASL2_REQUIRED],\n[AC_REQUIRE([CMU_SASL2])\nif test \"$ac_cv_found_sasl\" != \"yes\"; then\n  AC_MSG_ERROR([Cannot continue without libsasl2.\nGet it from ftp://ftp.andrew.cmu.edu/pub/cyrus-mail/.])\nfi])\n\n\n# CMU_SASL2_REQUIRE_VER\n# ---------------------\nAC_DEFUN([CMU_SASL2_REQUIRE_VER],\n[AC_REQUIRE([CMU_SASL2_REQUIRED])\n\ncmu_saved_CPPFLAGS=$CPPFLAGS\nCPPFLAGS=\"$CPPFLAGS $SASLFLAGS\"\n\nAC_TRY_CPP([\n#include <sasl/sasl.h>\n\n#ifndef SASL_VERSION_MAJOR\n#error SASL_VERSION_MAJOR not defined\n#endif\n#ifndef SASL_VERSION_MINOR\n#error SASL_VERSION_MINOR not defined\n#endif\n#ifndef SASL_VERSION_STEP\n#error SASL_VERSION_STEP not defined\n#endif\n\n#if SASL_VERSION_MAJOR < $1 || SASL_VERSION_MINOR < $2 || SASL_VERSION_STEP < $3\n#error SASL version is less than $1.$2.$3\n#endif\n],,\n           [AC_MSG_ERROR([Incorrect SASL headers found.  This package requires SASL $1.$2.$3 or newer.])])\n\nCPPFLAGS=$cmu_saved_CPPFLAGS\n])# CMU_SASL2_REQUIRE_VER\n\n\n# CMU_SASL2_CHECKAPOP_REQUIRED\n# ----------------------------\nAC_DEFUN([CMU_SASL2_CHECKAPOP_REQUIRED],\n[AC_REQUIRE([CMU_SASL2_REQUIRED])\n\ncmu_saved_LDFLAGS=$LDFLAGS\n\nLDFLAGS=\"$LDFLAGS $LIB_SASL\"\n\nAC_CHECK_LIB(sasl2, sasl_checkapop,\n             [AC_DEFINE(HAVE_APOP,[],[Does SASL support APOP?])],\n             [AC_MSG_ERROR([libsasl2 without working sasl_checkapop.  Cannot continue.])])\n\nLDFLAGS=$cmu_saved_LDFLAGS\n])# CMU_SASL2_CHECKAPOP_REQUIRED\n\n\n# SASL2_CRYPT_CHK\n# ---------------\nAC_DEFUN([SASL2_CRYPT_CHK],\n[AC_CHECK_FUNC(crypt, cmu_have_crypt=yes,\n               [AC_CHECK_LIB(crypt, crypt,\n                             LIB_CRYPT=\"-lcrypt\"; cmu_have_crypt=yes,\n                             cmu_have_crypt=no)])\nAC_SUBST(LIB_CRYPT)\n])# SASL2_CRYPT_CHK\n",
        "/tmp/vanessa/spack-stage/spack-stage-cyrus-sasl-2.1.27-hnal7aquex6gy2ydqk4wp52b2upmktrt/spack-src/mac/mac_lib/mac_monolithic_dlopen.c": "/* \n * Copyright (c) 1998-2003 Carnegie Mellon University.  All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer. \n *\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in\n *    the documentation and/or other materials provided with the\n *    distribution.\n *\n * 3. The name \"Carnegie Mellon University\" must not be used to\n *    endorse or promote products derived from this software without\n *    prior written permission. For permission or any other legal\n *    details, please contact  \n *      Office of Technology Transfer\n *      Carnegie Mellon University\n *      5000 Forbes Avenue\n *      Pittsburgh, PA  15213-3890\n *      (412) 268-4387, fax: (412) 268-7395\n *      tech-transfer@andrew.cmu.edu\n *\n * 4. Redistributions of any form whatsoever must retain the following\n *    acknowledgment:\n *    \"This product includes software developed by Computing Services\n *     at Carnegie Mellon University (http://www.cmu.edu/computing/).\"\n *\n * CARNEGIE MELLON UNIVERSITY DISCLAIMS ALL WARRANTIES WITH REGARD TO\n * THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n * AND FITNESS, IN NO EVENT SHALL CARNEGIE MELLON UNIVERSITY BE LIABLE\n * FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN\n * AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING\n * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n */\n/* $Id: mac_monolithic_dlopen.c,v 1.3 2003/02/13 19:55:59 rjs3 Exp $ */\n\n#include <config.h>\n#include <stdlib.h>\n#include <string.h>\n#include <sasl.h>\n#include \"saslint.h\"\n\n#include <sasl_plain_plugin_decl.h>\n#undef sasl_server_plug_init\n#undef sasl_client_plug_init\n\n#include <sasl_anonymous_plugin_decl.h>\n#undef sasl_server_plug_init\n#undef sasl_client_plug_init\n\n#include <sasl_cram_plugin_decl.h>\n#undef sasl_server_plug_init\n#undef sasl_client_plug_init\n\n#include <sasl_md5_plugin_decl.h>\n#undef sasl_server_plug_init\n#undef sasl_client_plug_init\n\n#include <sasl_scram_plugin_decl.h>\n#undef sasl_server_plug_init\n#undef sasl_client_plug_init\n\n#include <sasl_kerberos4_plugin_decl.h>\n#undef sasl_server_plug_init\n#undef sasl_client_plug_init\n\n#include <stdio.h>\n\n/* gets the list of mechanisms */\nint _sasl_get_mech_list(const char *entryname,\n\t\t\tconst sasl_callback_t *getpath_cb,\n\t\t\tconst sasl_callback_t *verifyfile_cb,\n\t\t\tint (*add_plugin)(void *,void *))\n{\n\tif(strcmp(entryname,\"sasl_client_plug_init\")==0) {\n\t\t(*add_plugin)(kerberos4_sasl_client_plug_init,(void*)1);\n\t\t(*add_plugin)(anonymous_sasl_client_plug_init,(void*)1);\n\t\t(*add_plugin)(cram_sasl_client_plug_init,(void*)1);\n\t\t(*add_plugin)(scram_sasl_client_plug_init,(void*)1);\n\t\t(*add_plugin)(md5_sasl_client_plug_init,(void*)1);\n\t\t(*add_plugin)(plain_sasl_client_plug_init,(void*)1);\n\t} else if(strcmp(entryname,\"sasl_server_plug_init\")==0) {\n\t\t(*add_plugin)(kerberos4_sasl_server_plug_init,(void*)1);\n\t\t(*add_plugin)(anonymous_sasl_server_plug_init,(void*)1);\n\t\t(*add_plugin)(cram_sasl_server_plug_init,(void*)1);\n\t\t(*add_plugin)(scram_sasl_server_plug_init,(void*)1);\n\t\t(*add_plugin)(md5_sasl_server_plug_init,(void*)1);\n\t\t(*add_plugin)(plain_sasl_server_plug_init,(void*)1);\n\t} else\n\t\treturn SASL_BADPARAM;\n\t\n  \treturn SASL_OK;\n}\n\nint _sasl_done_with_plugin(void *plugin)\n{\n  if (! plugin)\n    return SASL_BADPARAM;\n\n  return SASL_OK;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-cyrus-sasl-2.1.27-hnal7aquex6gy2ydqk4wp52b2upmktrt/spack-src/mac/mac_lib/mac_dyn_dlopen.c": "/*\n * load the sasl plugins\n * $Id: mac_dyn_dlopen.c,v 1.3 2003/02/13 19:55:59 rjs3 Exp $\n */\n/* \n * Copyright (c) 1998-2003 Carnegie Mellon University.  All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer. \n *\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in\n *    the documentation and/or other materials provided with the\n *    distribution.\n *\n * 3. The name \"Carnegie Mellon University\" must not be used to\n *    endorse or promote products derived from this software without\n *    prior written permission. For permission or any other legal\n *    details, please contact  \n *      Office of Technology Transfer\n *      Carnegie Mellon University\n *      5000 Forbes Avenue\n *      Pittsburgh, PA  15213-3890\n *      (412) 268-4387, fax: (412) 268-7395\n *      tech-transfer@andrew.cmu.edu\n *\n * 4. Redistributions of any form whatsoever must retain the following\n *    acknowledgment:\n *    \"This product includes software developed by Computing Services\n *     at Carnegie Mellon University (http://www.cmu.edu/computing/).\"\n *\n * CARNEGIE MELLON UNIVERSITY DISCLAIMS ALL WARRANTIES WITH REGARD TO\n * THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n * AND FITNESS, IN NO EVENT SHALL CARNEGIE MELLON UNIVERSITY BE LIABLE\n * FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN\n * AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING\n * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n */\n\n\n#include <config.h>\n#include <stdlib.h>\n#include <string.h>\n#include <sasl.h>\n#include \"saslint.h\"\n\n#include <CodeFragments.h>\n#include <Errors.h>\n#include <Resources.h>\n#include <Strings.h>\n#include <Folders.h>\n\n#ifdef RUBBISH\n#include <FSpCompat.h>\n#endif\n\n/*\n * The following data structure defines the structure of a code fragment\n * resource.  We can cast the resource to be of this type to access\n * any fields we need to see.\n */\nstruct CfrgHeader {\n    long \tres1;\n    long \tres2;\n    long \tversion;\n    long \tres3;\n    long \tres4;\n    long \tfiller1;\n    long \tfiller2;\n    long \titemCount;\n    char\tarrayStart;\t/* Array of externalItems begins here. */\n};\ntypedef struct CfrgHeader CfrgHeader, *CfrgHeaderPtr, **CfrgHeaderPtrHand;\n\n/*\n * The below structure defines a cfrag item within the cfrag resource.\n */\nstruct CfrgItem {\n    OSType \tarchType;\n    long \tupdateLevel;\n    long\tcurrVersion;\n    long\toldDefVersion;\n    long\tappStackSize;\n    short\tappSubFolder;\n    char\tusage;\n    char\tlocation;\n    long\tcodeOffset;\n    long\tcodeLength;\n    long\tres1;\n    long\tres2;\n    short\titemSize;\n    Str255\tname;\t\t/* This is actually variable sized. */\n};\ntypedef struct CfrgItem CfrgItem;\n\n#ifndef TRUE\n#define TRUE 1\n#endif\n#ifndef FALSE\n#define FALSE 0\n#endif\n\n#if TARGET_API_MAC_CARBON\n#define SASL_PLUGIN_DIR \"\\p:sasl v2:carbon:biff\"\n#else\n#define SASL_PLUGIN_DIR \"\\p:sasl v2:biff\"\n#endif\n\ntypedef struct lib_list \n{\n    struct lib_list *next;\n    void *library;\n} lib_list_t;\n\nstatic lib_list_t *lib_list_head = NULL;\n\n/*\n * add the passed extension\n */\nint _macsasl_get_fsspec(FSSpec *fspec,\n\tvoid **libraryptr)\n{\n\tint rc;\n    CFragConnectionID connID;\n    Ptr dummy;\n    unsigned long offset = 0;\n    unsigned long length = kCFragGoesToEOF;\n    unsigned char package_name[255];\n   \tStr255 error_text;\n   \tlib_list_t *newhead;\n\n    newhead = sasl_ALLOC(sizeof(lib_list_t));\n    if(!newhead) return SASL_NOMEM;\n\n   \tpackage_name[0] = 0;\n    rc=GetDiskFragment(fspec,offset,length,package_name,\n\t    kLoadCFrag,&connID,&dummy,error_text);\n\tif(rc!=0) {\n\t\tsasl_FREE(newhead);\n\t\treturn rc;\n\t}\n\n    newhead->library = (void *)connID;\n    newhead->next = lib_list_head;\n    lib_list_head = newhead;\n\n    *libraryptr = (void *)connID;\n    return SASL_OK;\n}\n\nint _sasl_locate_entry(void *library, const char *entryname,\n\t\t       void **entry_point) \n{\n\tint result;\n#if TARGET_API_MAC_CARBON\n    char cstr[256];\n#endif\n\tStr255 pentry;\n    CFragSymbolClass symClass;\n    OSErr rc;\n\n    if(!entryname) {\n\treturn SASL_BADPARAM;\n    }\n\n    if(!library) {\n\treturn SASL_BADPARAM;\n    }\n\n    if(!entry_point) {\n\treturn SASL_BADPARAM;\n    }\n\n#if TARGET_API_MAC_CARBON\n\tstrcpy(cstr,entryname);\n    CopyCStringToPascal(cstr, pentry);\n#else\n\tstrcpy(pentry,entryname);\n    c2pstr(pentry);\n#endif\n\n    rc = FindSymbol((CFragConnectionID)library,pentry,entry_point, &symClass);\n    if ((rc!=noErr) || (symClass==kDataCFragSymbol))\n    \treturn SASL_FAIL;\n\n\treturn SASL_OK;\n}\n\nstatic int _sasl_plugin_load(char *plugin, void *library,\n\t\t\t     const char *entryname,\n\t\t\t     int (*add_plugin)(const char *, void *)) \n{\n    void *entry_point;\n    int result;\n    \n    result = _sasl_locate_entry(library, entryname, &entry_point);\n    if(result == SASL_OK) {\n\tresult = add_plugin(plugin, entry_point);\n//\tif(result != SASL_OK)\n//\t    _sasl_log(NULL, SASL_LOG_ERR,\n//\t\t      \"_sasl_plugin_load failed on %s for plugin: %s\\n\",\n//\t\t      entryname, plugin);\n    }\n\n    return result;\n}\n\n/*\n * does the passed string a occur and the end of string b?\n */\nint _macsasl_ends_in(char *a, char *b)\n{\n\tint alen=strlen(a);\n\tint blen=strlen(b);\n\tif(blen<alen)\n\t\treturn FALSE;\n\treturn (memcmp(a,b+(blen-alen),alen)==0);\n}\n\n/*\n * scan the passed directory loading sasl extensions\n */\nint _macsasl_find_extensions_in_dir(short vref,long dir_id,\n\tconst add_plugin_list_t *entrypoints)\n{\n\tCInfoPBRec cinfo;\n\tunsigned char aname[300];\n\tchar plugname[256];\n\tint findex=0;\n\tFSSpec a_plugin;\n\tlib_list_t *library;\n\tchar *c;\n\tconst add_plugin_list_t *cur_ep;\n\n\twhile(TRUE) {\n\t\tint os;\n\t\tmemset(&cinfo,0,sizeof(cinfo));\n\t\taname[0] = 0;\n\t\tcinfo.hFileInfo.ioVRefNum=vref;\n\t\tcinfo.hFileInfo.ioNamePtr=aname;\n\t\tcinfo.hFileInfo.ioFDirIndex=findex++;\n\t\tcinfo.hFileInfo.ioDirID=dir_id;\n\t\tos=PBGetCatInfo(&cinfo,FALSE);\n\t\tif(os!=0)\n\t\t\treturn SASL_OK;\n\t\taname[aname[0]+1] = 0;\n\n\t\t/* skip over non shlb files */\n\t\tif(!_macsasl_ends_in(\".shlb\",aname+1))\n\t\t\tcontinue;\n\t\tos=FSMakeFSSpec(vref,dir_id,aname,&a_plugin);\n\t\tif(os!=0)\n\t\t\tcontinue;\n\n\t\t/* skip \"lib\" and cut off suffix --\n\t\t   this only need be approximate */\n\t\tstrcpy(plugname, aname + 1);\n\t\tc = strchr(plugname, (int)'.');\n\t\tif(c) *c = '\\0';\n\n\t\tif (!_macsasl_get_fsspec(&a_plugin,&library))\n\t\t\tfor(cur_ep = entrypoints; cur_ep->entryname; cur_ep++) {\n\t\t\t\t_sasl_plugin_load(plugname, library, cur_ep->entryname,\n\t\t\t\t\t\t  cur_ep->add_plugin);\n\t\t\t\t/* If this fails, it's not the end of the world */\n\t\t\t}\n\t}\n\treturn SASL_OK;\n}\n\n/* gets the list of mechanisms */\nint _sasl_load_plugins(const add_plugin_list_t *entrypoints,\n\t\t\tconst sasl_callback_t *getpath_cb,\n\t\t\tconst sasl_callback_t *verifyfile_cb)\n{\n\tint rc;\n\tshort extensions_vref;\n\tlong extensions_dirid;\n\tFSSpec sasl_dir;\n\t/* find the extensions folder */\n\trc=FindFolder(kOnSystemDisk,kExtensionFolderType,FALSE,\n\t\t&extensions_vref,&extensions_dirid);\n\tif(rc!=0)\n\t\treturn SASL_BADPARAM;\n\trc=FSMakeFSSpec(extensions_vref,extensions_dirid,SASL_PLUGIN_DIR,&sasl_dir);\n\t/*\n\t * if a plugin named biff exits or not we really dont care\n\t * if it does get rc 0 if it does not get -43 (fnfErr)\n\t * if the sasl dir doesnt exist we get -120 (dirNFFErr)\n\t */\n\tif((rc!=0)&&(rc!=fnfErr))\n\t\treturn SASL_BADPARAM;\n\t/*\n\t * now extensions_vref is volume\n\t * sasl_dir.parID is dirid for sasl plugins folder\n\t */\n\t\n\treturn _macsasl_find_extensions_in_dir(extensions_vref,sasl_dir.parID,entrypoints);\n}\n\nint\n_sasl_done_with_plugins(void)\n{\n    lib_list_t *libptr, *libptr_next;\n    \n    for(libptr = lib_list_head; libptr; libptr = libptr_next) {\n\tlibptr_next = libptr->next;\n\tif(libptr->library)\n\t    CloseConnection((CFragConnectionID*)&libptr->library);\n\tsasl_FREE(libptr);\n    }\n\n    lib_list_head = NULL;\n\n    return SASL_OK;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-cyrus-sasl-2.1.27-hnal7aquex6gy2ydqk4wp52b2upmktrt/spack-src/contrib/stripplus_canonuser.patch": "Index: configure.in\n===================================================================\nRCS file: /afs/andrew/system/cvs/src/sasl/configure.in,v\nretrieving revision 1.192\ndiff -u -r1.192 configure.in\n--- configure.in\t16 Mar 2004 21:52:01 -0000\t1.192\n+++ configure.in\t7 May 2004 17:17:03 -0000\n@@ -713,6 +713,23 @@\n \tAC_DEFINE(DO_DLOPEN,[],[Should we build a shared plugin (via dlopen) library?])\n fi\n \n+dnl STRIPPLUS\n+AC_ARG_ENABLE(stripplus, [  --enable-stripplus      enable STRIPPLUS user canonification [[no]] ],\n+  stripplus=$enableval,\n+  stripplus=no)\n+\n+AC_MSG_CHECKING(STRIPPLUS)\n+if test \"$stripplus\" != no; then\n+  AC_MSG_RESULT(enabled)\n+  SASL_MECHS=\"$SASL_MECHS libstripplus.la\"\n+  if test \"$enable_static\" = yes; then\n+    SASL_STATIC_OBJS=\"$SASL_STATIC_OBJS ../plugins/stripplus.o\"\n+    AC_DEFINE(STATIC_STRIPPLUS, [], [Link STRIPPLUS Staticly])\n+  fi\n+else\n+  AC_MSG_RESULT(disabled)\n+fi\n+\n AC_SUBST(SASL_MECHS)\n AC_SUBST(SASL_STATIC_OBJS)\n AC_SUBST(SASL_STATIC_LIBS)\nIndex: plugins/Makefile.am\n===================================================================\nRCS file: /afs/andrew/system/cvs/src/sasl/plugins/Makefile.am,v\nretrieving revision 1.70\ndiff -u -r1.70 Makefile.am\n--- plugins/Makefile.am\t9 Mar 2004 16:54:18 -0000\t1.70\n+++ plugins/Makefile.am\t7 May 2004 17:17:10 -0000\n@@ -58,6 +58,7 @@\n otp_version = 2:18:0\n sql_version = 2:18:0\n srp_version = 2:18:0\n+stripplus_version = 2:18:0\n \n INCLUDES=-I$(top_srcdir)/include -I$(top_srcdir)/lib -I$(top_srcdir)/sasldb -I$(top_builddir)/include\n AM_LDFLAGS = -module -export-dynamic -rpath $(plugindir)\n@@ -77,7 +78,7 @@\n sasl_LTLIBRARIES = @SASL_MECHS@\n EXTRA_LTLIBRARIES = libplain.la libanonymous.la libkerberos4.la libcrammd5.la \\\n \tlibgssapiv2.la libdigestmd5.la liblogin.la libsrp.la libotp.la \\\n-\tlibntlm.la libsasldb.la libsql.la\n+\tlibntlm.la libsasldb.la libsql.la libstripplus.la\n \n libplain_la_SOURCES = plain.c plain_init.c $(common_sources)\n libplain_la_LDFLAGS = -version-info $(plain_version)\n@@ -140,12 +141,18 @@\n libsql_la_DEPENDENCIES = $(COMPAT_OBJS)\n libsql_la_LIBADD = $(COMPAT_OBJS)\n \n+# Canonuser Plugins\n+libstripplus_la_SOURCES = stripplus.c stripplus_init.c $(common_sources)\n+libstripplus_la_LDFLAGS = -version-info $(stripplus_version)\n+libstripplus_la_DEPENDENCIES = $(COMPAT_OBJS)\n+libstripplus_la_LIBADD = $(COMPAT_OBJS)\n+\n \n # Instructions for making the _init files\n \n init_src=anonymous_init.c crammd5_init.c digestmd5_init.c gssapiv2_init.c \\\n kerberos4_init.c login_init.c plain_init.c srp_init.c otp_init.c ntlm_init.c \\\n-sasldb_init.c sql_init.c\n+sasldb_init.c sql_init.c stripplus_init.c\n \n \n CLEANFILES=$(init_src)\nIndex: plugins/makeinit.sh\n===================================================================\nRCS file: /afs/andrew/system/cvs/src/sasl/plugins/makeinit.sh,v\nretrieving revision 1.8\ndiff -u -r1.8 makeinit.sh\n--- plugins/makeinit.sh\t15 Jul 2003 17:38:59 -0000\t1.8\n+++ plugins/makeinit.sh\t7 May 2004 17:17:10 -0000\n@@ -87,3 +87,46 @@\n \" > ${mech}_init.c\n done\n \n+\n+for mech in stripplus ; do\n+\n+echo \"\n+#include <config.h>\n+\n+#include <string.h>\n+#include <stdlib.h>\n+#include <stdio.h>\n+#ifndef macintosh\n+#include <sys/stat.h>\n+#endif\n+#include <fcntl.h>\n+#include <assert.h>\n+\n+#include <sasl.h>\n+#include <saslplug.h>\n+#include <saslutil.h>\n+\n+#include \\\"plugin_common.h\\\"\n+\n+#ifdef WIN32\n+BOOL APIENTRY DllMain( HANDLE hModule, \n+                       DWORD  ul_reason_for_call, \n+                       LPVOID lpReserved\n+\t\t\t\t\t )\n+{\n+    switch (ul_reason_for_call)\n+\t{\n+\t\tcase DLL_PROCESS_ATTACH:\n+\t\tcase DLL_THREAD_ATTACH:\n+\t\tcase DLL_THREAD_DETACH:\n+\t\tcase DLL_PROCESS_DETACH:\n+\t\t\tbreak;\n+    }\n+    return TRUE;\n+}\n+#endif\n+\n+SASL_CANONUSER_PLUG_INIT( $mech )\n+\" > ${mech}_init.c\n+done\n+\nIndex: plugins/stripplus.c\n===================================================================\nRCS file: plugins/stripplus.c\ndiff -N plugins/stripplus.c\n--- /dev/null\t1 Jan 1970 00:00:00 -0000\n+++ plugins/stripplus.c\t7 May 2004 17:17:10 -0000\n@@ -0,0 +1,179 @@\n+/* stripplus.c - user canonicalization plugin which strips any plus content\n+ * Ken Murchison\n+ * $Id: stripplus_canonuser.patch,v 1.1 2004/05/07 17:26:57 ken3 Exp $\n+ */\n+/* \n+ * Copyright (c) 1998-2004 Carnegie Mellon University.  All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer. \n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The name \"Carnegie Mellon University\" must not be used to\n+ *    endorse or promote products derived from this software without\n+ *    prior written permission. For permission or any other legal\n+ *    details, please contact  \n+ *      Office of Technology Transfer\n+ *      Carnegie Mellon University\n+ *      5000 Forbes Avenue\n+ *      Pittsburgh, PA  15213-3890\n+ *      (412) 268-4387, fax: (412) 268-7395\n+ *      tech-transfer@andrew.cmu.edu\n+ *\n+ * 4. Redistributions of any form whatsoever must retain the following\n+ *    acknowledgment:\n+ *    \"This product includes software developed by Computing Services\n+ *     at Carnegie Mellon University (http://www.cmu.edu/computing/).\"\n+ *\n+ * CARNEGIE MELLON UNIVERSITY DISCLAIMS ALL WARRANTIES WITH REGARD TO\n+ * THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n+ * AND FITNESS, IN NO EVENT SHALL CARNEGIE MELLON UNIVERSITY BE LIABLE\n+ * FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n+ * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN\n+ * AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING\n+ * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n+ */\n+\n+#include <config.h>\n+#include <string.h>\n+#include <ctype.h>\n+#include <stdio.h>\n+\n+#include <sasl.h>\n+#include <saslplug.h>\n+\n+#ifdef MIN\n+#undef MIN\n+#endif\n+#define MIN(a,b) (((a) < (b))? (a):(b))\n+\n+/*\n+ * This plugin is a straight port of the INTERNAL canonuser plugin.\n+ * It functions identical to to INTERNAL, but also strips any +detail\n+ * in the auth[z]id.\n+ */\n+static int _canonuser_stripplus(const sasl_utils_t *utils,\n+\t\t\t\tconst char *user, unsigned ulen,\n+\t\t\t\tconst char *user_realm,\n+\t\t\t\tunsigned flags __attribute__((unused)),\n+\t\t\t\tchar *out_user,\n+\t\t\t\tunsigned out_umax, unsigned *out_ulen) \n+{\n+    unsigned i;\n+    char *in_buf, *userin, *p;\n+    const char *begin_u;\n+    size_t u_apprealm = 0;\n+\n+    if(!utils || !user) return SASL_BADPARAM;\n+\n+    in_buf = utils->malloc((ulen + 2) * sizeof(char));\n+    if(!in_buf) return SASL_NOMEM;\n+\n+    userin = in_buf;\n+\n+    memcpy(userin, user, ulen);\n+    userin[ulen] = '\\0';\n+    \n+    /* Strip User ID */\n+    for(i=0;isspace((int)userin[i]) && i<ulen;i++);\n+    begin_u = &(userin[i]);\n+    if(i>0) ulen -= i;\n+\n+    for(;ulen > 0 && isspace((int)begin_u[ulen-1]); ulen--);\n+    if(begin_u == &(userin[ulen])) {\n+\tutils->free(in_buf);\n+\tutils->seterror(utils->conn, 0, \"All-whitespace username.\");\n+\treturn SASL_FAIL;\n+    }\n+\n+    /* Need to append realm if necessary (see sasl.h) */\n+    if(user_realm && !strchr(user, '@')) {\n+\tu_apprealm = strlen(user_realm) + 1;\n+    }\n+\n+    /* Now Copy */\n+    memcpy(out_user, begin_u, MIN(ulen, out_umax));\n+    if(u_apprealm) {\n+\tif(ulen >= out_umax) return SASL_BUFOVER;\n+\tout_user[ulen] = '@';\n+\tmemcpy(&(out_user[ulen+1]), user_realm,\n+\t       MIN(u_apprealm-1, out_umax-ulen-1));\n+    }\n+    out_user[MIN(ulen + u_apprealm,out_umax)] = '\\0';\n+\n+    /* Strip any plus content */\n+    if ((p = strchr(out_user, '+'))) {\n+\tsize_t n = strcspn(p, \"@\");\n+\tmemmove(p, p+n, strlen(p+n)+1);\n+\tulen -= n;\n+    }\n+\n+    if(ulen + u_apprealm > out_umax) return SASL_BUFOVER;\n+\n+    if(out_ulen) *out_ulen = MIN(ulen + u_apprealm,out_umax);\n+    \n+    utils->free(in_buf);\n+    return SASL_OK;\n+}\n+\n+static int _cu_stripplus_server(void *glob_context __attribute__((unused)),\n+\t\t\t\tsasl_server_params_t *sparams,\n+\t\t\t\tconst char *user, unsigned ulen,\n+\t\t\t\tunsigned flags,\n+\t\t\t\tchar *out_user,\n+\t\t\t\tunsigned out_umax, unsigned *out_ulen) \n+{\n+    return _canonuser_stripplus(sparams->utils,\n+\t\t\t\tuser, ulen, sparams->user_realm,\n+\t\t\t\tflags, out_user, out_umax, out_ulen);\n+}\n+\n+static int _cu_stripplus_client(void *glob_context __attribute__((unused)),\n+\t\t\t\tsasl_client_params_t *cparams,\n+\t\t\t\tconst char *user, unsigned ulen,\n+\t\t\t\tunsigned flags,\n+\t\t\t\tchar *out_user,\n+\t\t\t\tunsigned out_umax, unsigned *out_ulen) \n+{\n+    return _canonuser_stripplus(cparams->utils,\n+\t\t\t\tuser, ulen, NULL,\n+\t\t\t\tflags, out_user, out_umax, out_ulen);\n+}\n+\n+static sasl_canonuser_plug_t canonuser_stripplus_plugin = {\n+        0, /* features */\n+\t0, /* spare */\n+\tNULL, /* glob_context */\n+\t\"STRIPPLUS\", /* name */\n+\tNULL, /* canon_user_free */\n+\t_cu_stripplus_server,\n+\t_cu_stripplus_client,\n+\tNULL,\n+\tNULL,\n+\tNULL\n+};\n+\n+int stripplus_canonuser_plug_init(const sasl_utils_t *utils __attribute__((unused)),\n+\t\t\t\t  int max_version,\n+\t\t\t\t  int *out_version,\n+\t\t\t\t  sasl_canonuser_plug_t **plug,\n+\t\t\t\t  const char *plugname __attribute__((unused))) \n+{\n+    if(!out_version || !plug) return SASL_BADPARAM;\n+\n+    if(max_version < SASL_CANONUSER_PLUG_VERSION) return SASL_BADVERS;\n+    \n+    *out_version = SASL_CANONUSER_PLUG_VERSION;\n+\n+    *plug = &canonuser_stripplus_plugin;\n+\n+    return SASL_OK;\n+}\n",
        "/tmp/vanessa/spack-stage/spack-stage-cyrus-sasl-2.1.27-hnal7aquex6gy2ydqk4wp52b2upmktrt/spack-src/contrib/cyrus-sasl-1.5.24-ltdl.patches": "diff -x ltcf-c.sh -x ltconfig -x ltmain.sh -x libltdl -x config.guess -x config.sub -x configure -x aclocal.m4 -x Makefile.in -uNr cyrus-sasl-1.5.24.orig/Makefile.am cyrus-sasl-1.5.24.new/Makefile.am\n--- cyrus-sasl-1.5.24.orig/Makefile.am\tFri Apr 28 19:16:11 2000\n+++ cyrus-sasl-1.5.24.new/Makefile.am\tTue Jul 17 12:41:06 2001\n@@ -58,7 +58,7 @@\n JAV =\n endif\n \n-SUBDIRS=include lib plugins utils doc man $(PWC) $(SAM) $(JAV)\n+SUBDIRS=include libltdl lib plugins utils doc man $(PWC) $(SAM) $(JAV)\n EXTRA_DIST=config cmulocal win32 testing.txt\n \n dist-hook:\ndiff -x ltcf-c.sh -x ltconfig -x ltmain.sh -x libltdl -x config.guess -x config.sub -x configure -x aclocal.m4 -x Makefile.in -uNr cyrus-sasl-1.5.24.orig/configure.in cyrus-sasl-1.5.24.new/configure.in\n--- cyrus-sasl-1.5.24.orig/configure.in\tFri Jul 21 04:35:01 2000\n+++ cyrus-sasl-1.5.24.new/configure.in\tTue Jul 17 13:20:18 2001\n@@ -71,8 +71,14 @@\n \n AM_DISABLE_STATIC\n \n+AC_LIBLTDL_INSTALLABLE\n+AC_SUBST(INCLTDL)\n+AC_SUBST(LIBLTDL)\n+AC_LIBTOOL_DLOPEN\n+\n CMU_PROG_LIBTOOL\n \n+\n if test \"$ac_cv_prog_gcc\" = yes; then\n   CFLAGS=\"-Wall -W ${CFLAGS}\"\n fi\n@@ -374,11 +380,11 @@\n   fi\n fi\n \n-\n-\n if test \"$with_des\" != no; then\n   AC_DEFINE(WITH_DES)\n-  LIB_DES=\"-ldes\"\n+  if test \"x$LIB_DES\" = x; then\n+    LIB_DES=\"-ldes\"\n+  fi\n fi\n \n AC_SUBST(LIB_DES)\n@@ -716,5 +722,7 @@\n fi\n \n AC_SUBST(DIRS)\n+\n+AC_CONFIG_SUBDIRS(libltdl)\n \n AC_OUTPUT(Makefile include/Makefile lib/Makefile plugins/Makefile utils/Makefile doc/Makefile sample/Makefile java/Makefile java/CyrusSasl/Makefile pwcheck/Makefile man/Makefile)\ndiff -x ltcf-c.sh -x ltconfig -x ltmain.sh -x libltdl -x config.guess -x config.sub -x configure -x aclocal.m4 -x Makefile.in -uNr cyrus-sasl-1.5.24.orig/lib/Makefile.am cyrus-sasl-1.5.24.new/lib/Makefile.am\n--- cyrus-sasl-1.5.24.orig/lib/Makefile.am\tFri Jul 21 04:35:02 2000\n+++ cyrus-sasl-1.5.24.new/lib/Makefile.am\tTue Jul 17 12:41:08 2001\n@@ -43,7 +43,10 @@\n # Library version info - here at the top, for sanity\n sasl_version = 8:8:1\n \n-INCLUDES=-I$(top_srcdir)/include\n+INCLTDL= @INCLTDL@\n+LIBLTDL= @LIBLTDL@\n+\n+INCLUDES=-I$(top_srcdir)/include $(INCLTDL)\n \n EXTRA_DIST = saslint.h windlopen.c\n \n@@ -53,5 +56,5 @@\n EXTRA_libsasl_la_SOURCES = db_none.c db_ndbm.c db_gdbm.c db_berkeley.c db_testw32.c\n libsasl_la_LDFLAGS = -version-info $(sasl_version)\n libsasl_la_DEPENDENCIES = $(SASL_DB_BACKEND) @LTLIBOBJS@\n-libsasl_la_LIBADD = @LTLIBOBJS@ $(SASL_DB_BACKEND) $(SASL_DB_LIB) $(SASL_DL_LIB) $(PLAIN_LIBS)\n+libsasl_la_LIBADD = @LTLIBOBJS@ $(LIBLTDL) $(SASL_DB_BACKEND) $(SASL_DB_LIB) $(SASL_DL_LIB) $(PLAIN_LIBS)\n # PLAIN_LIBS are linked in for sasl_checkpass\ndiff -x ltcf-c.sh -x ltconfig -x ltmain.sh -x libltdl -x config.guess -x config.sub -x configure -x aclocal.m4 -x Makefile.in -uNr cyrus-sasl-1.5.24.orig/lib/client.c cyrus-sasl-1.5.24.new/lib/client.c\n--- cyrus-sasl-1.5.24.orig/lib/client.c\tThu Apr  6 16:50:22 2000\n+++ cyrus-sasl-1.5.24.new/lib/client.c\tTue Jul 17 12:41:08 2001\n@@ -49,6 +49,7 @@\n #include <string.h>\n #include <sasl.h>\n #include <saslutil.h>\n+#include <ltdl.h>\n #include \"saslint.h\"\n \n static int\n@@ -218,7 +219,7 @@\n {\n   int version;\n   const sasl_client_plug_t *plug;\n-  void *library;\n+  lt_dlhandle library;\n \n   struct cmechanism *next;  \n } cmechanism_t;\n@@ -370,6 +371,10 @@\n \n   cmechlist->mech_list=NULL;\n   cmechlist->mech_length=0;\n+\n+  /* init libltdl */\n+  if (lt_dlinit() != 0)\n+    return SASL_FAIL;\n \n   add_plugin((void *) &external_client_init, NULL);\n \ndiff -x ltcf-c.sh -x ltconfig -x ltmain.sh -x libltdl -x config.guess -x config.sub -x configure -x aclocal.m4 -x Makefile.in -uNr cyrus-sasl-1.5.24.orig/lib/common.c cyrus-sasl-1.5.24.new/lib/common.c\n--- cyrus-sasl-1.5.24.orig/lib/common.c\tMon Jul 17 19:21:02 2000\n+++ cyrus-sasl-1.5.24.new/lib/common.c\tTue Jul 17 16:26:01 2001\n@@ -117,6 +117,11 @@\n   _sasl_mutex_utils.lock=l;\n   _sasl_mutex_utils.unlock=u;\n   _sasl_mutex_utils.dispose=d;\n+  /* XXX seb FIXME: add a call to lt_dlmutex_register() for libltdl.\n+     sasl_set_mutex args must surely be modified to add func ptr\n+     for libtool's callbacks SETERROR and GETERROR; n/l/u can \n+     certainly be reused for libtool's callbacks LOCK and UNLOCK.\n+     see (libtool.info) Thread Saftey in libltdl */\n }\n \n \ndiff -x ltcf-c.sh -x ltconfig -x ltmain.sh -x libltdl -x config.guess -x config.sub -x configure -x aclocal.m4 -x Makefile.in -uNr cyrus-sasl-1.5.24.orig/lib/dlopen.c cyrus-sasl-1.5.24.new/lib/dlopen.c\n--- cyrus-sasl-1.5.24.orig/lib/dlopen.c\tThu Mar  9 21:53:47 2000\n+++ cyrus-sasl-1.5.24.new/lib/dlopen.c\tTue Jul 17 12:45:35 2001\n@@ -50,6 +50,7 @@\n #include <limits.h>\n #include <sys/param.h>\n #include <sasl.h>\n+#include <ltdl.h>\n #include \"saslint.h\"\n \n #if HAVE_DIRENT_H\n@@ -91,61 +92,7 @@\n #  define NAME_MAX 8\n #endif\n \n-#ifdef __hpux\n-#include <dl.h>\n-\n-typedef shl_t dll_handle;\n-typedef void * dll_func;\n-\n-dll_handle\n-dlopen(char *fname, int mode)\n-{\n-    shl_t h = shl_load(fname, BIND_DEFERRED, 0L);\n-    shl_t *hp = NULL;\n-    \n-    if (h) {\n-\thp = (shl_t *)malloc(sizeof (shl_t));\n-\tif (!hp) {\n-\t    shl_unload(h);\n-\t} else {\n-\t    *hp = h;\n-\t}\n-    }\n-\n-    return (dll_handle)hp;\n-}\n-\n-int\n-dlclose(dll_handle h)\n-{\n-    shl_t hp = *((shl_t *)h);\n-    if (hp != NULL) free(hp);\n-    return shl_unload(h);\n-}\n-\n-dll_func\n-dlsym(dll_handle h, char *n)\n-{\n-    dll_func handle;\n-    \n-    if (shl_findsym ((shl_t *)h, n, TYPE_PROCEDURE, &handle))\n-\treturn NULL;\n-    \n-    return (dll_func)handle;\n-}\n-\n-char *dlerror()\n-{\n-    if (errno != 0) {\n-\treturn strerror(errno);\n-    }\n-    return \"Generic shared library error\";\n-}\n-\n-#define SO_SUFFIX\t\".sl\"\n-#else /* __hpux */\n-#define SO_SUFFIX\t\".so\"\n-#endif /* __hpux */\n+#define LA_SUFFIX\t\".la\"\n \n \n /* gets the list of mechanisms */\n@@ -159,11 +106,6 @@\n    * checks appropriately. */\n   int result;\n   char str[PATH_MAX], tmp[PATH_MAX+2], c, prefix[PATH_MAX+2]; /* 1 for '/' 1 for trailing '\\0' */\n-#if __OpenBSD__\n-  char adj_entryname[1024];\n-#else\n-#define adj_entryname entryname\n-#endif\n   int pos;\n   char *path=NULL;\n   int position;\n@@ -180,10 +122,6 @@\n       || ! add_plugin)\n     return SASL_BADPARAM;\n \n-#if __OpenBSD__\n-  snprintf(adj_entryname, sizeof adj_entryname, \"_%s\", entryname);\n-#endif\n-\n   /* get the path to the plugins */\n   result = ((sasl_getpath_t *)(getpath_cb->proc))(getpath_cb->context,\n \t\t\t\t\t\t  &path);\n@@ -214,10 +152,9 @@\n       while ((dir=readdir(dp)) != NULL)\n       {\n \tsize_t length;\n-\tvoid *library;\n-\tvoid *entry_point;\n+\tlt_dlhandle library;\n+\tlt_ptr entry_point;\n \tchar name[PATH_MAX];\n-\tint flag;\n \n \n \tlength = NAMLEN(dir);\n@@ -225,7 +162,7 @@\n \n \tif (length + pos>=PATH_MAX) continue; /* too big */\n \n-\tif (strcmp(dir->d_name + (length - 3), SO_SUFFIX)) continue;\n+\tif (strcmp(dir->d_name + (length - 3), LA_SUFFIX)) continue;\n \n \tmemcpy(name,dir->d_name,length);\n \tname[length]='\\0';\n@@ -243,28 +180,23 @@\n \t\n \tif (result != SASL_OK) return result;\n \t\n-#ifdef RTLD_NOW\n-\tflag = RTLD_NOW;\n-#else\n-\tflag = 0;\n-#endif\n-\tif (!(library = dlopen(tmp, flag))) {\n+\tif (!(library = lt_dlopen(tmp))) {\n \t    _sasl_log(NULL, SASL_LOG_ERR, NULL, 0, 0,\n-\t\t      \"unable to dlopen %s: %s\", tmp, dlerror());\n+\t\t      \"unable to lt_dlopen %s: %s\", tmp, lt_dlerror());\n \t    continue;\n \t}\n \tentry_point = NULL;\n-\tentry_point = dlsym(library, adj_entryname);\n+\tentry_point = lt_dlsym(library, entryname);\n \n \tif (entry_point == NULL) {\n \t  VL((\"can't get an entry point\\n\"));\n-\t  dlclose(library);\n+\t  lt_dlclose(library);\n \t  continue;\n \t}\n \n \tif ((*add_plugin)(entry_point, library) != SASL_OK) {\n \t  VL((\"add_plugin to list failed\\n\"));\n-\t  dlclose(library);\n+\t  lt_dlclose(library);\n \t  continue;\n \t}\n \tVL((\"added [%s] successfully\\n\",dir->d_name));\n@@ -281,12 +213,12 @@\n }\n \n int\n-_sasl_done_with_plugin(void *plugin)\n+_sasl_done_with_plugin(lt_dlhandle plugin)\n {\n   if (! plugin)\n     return SASL_BADPARAM;\n \n-  dlclose(plugin);\n+  lt_dlclose(plugin);\n \n   return SASL_OK;\n }\ndiff -x ltcf-c.sh -x ltconfig -x ltmain.sh -x libltdl -x config.guess -x config.sub -x configure -x aclocal.m4 -x Makefile.in -uNr cyrus-sasl-1.5.24.orig/lib/saslint.h cyrus-sasl-1.5.24.new/lib/saslint.h\n--- cyrus-sasl-1.5.24.orig/lib/saslint.h\tThu Apr  6 16:50:22 2000\n+++ cyrus-sasl-1.5.24.new/lib/saslint.h\tTue Jul 17 12:43:27 2001\n@@ -45,6 +45,7 @@\n #define SASLINT_H\n \n #include <config.h>\n+#include <ltdl.h>\n #include \"sasl.h\"\n #include \"saslplug.h\"\n \n@@ -61,7 +62,7 @@\n extern const sasl_callback_t *\n _sasl_find_verifyfile_callback(const sasl_callback_t *callbacks);\n \n-extern int _sasl_done_with_plugin(void *plugin);\n+extern int _sasl_done_with_plugin(lt_dlhandle plugin);\n \n extern void (*_sasl_client_cleanup_hook)(void);\n extern void (*_sasl_server_cleanup_hook)(void);\ndiff -x ltcf-c.sh -x ltconfig -x ltmain.sh -x libltdl -x config.guess -x config.sub -x configure -x aclocal.m4 -x Makefile.in -uNr cyrus-sasl-1.5.24.orig/lib/server.c cyrus-sasl-1.5.24.new/lib/server.c\n--- cyrus-sasl-1.5.24.orig/lib/server.c\tMon Aug 14 04:04:42 2000\n+++ cyrus-sasl-1.5.24.new/lib/server.c\tTue Jul 17 12:56:40 2001\n@@ -54,6 +54,7 @@\n #include <sys/stat.h>\n #include <fcntl.h>\n #include <string.h>\n+#include <ltdl.h>\n \n #define DEFAULT_PLAIN_MECHANISM \"sasldb\"\n \n@@ -238,7 +239,7 @@\n   int condition; /* set to SASL_NOUSER if no available users */\n   const sasl_server_plug_t *plug;\n   struct mechanism *next;\n-  void *library; /* this a pointer to shared library returned by dlopen \n+  lt_dlhandle library; /* this a pointer to shared library returned by dlopen \n \t\t    or some similar function on other platforms */\n } mechanism_t;\n \n@@ -668,6 +669,10 @@\n \n   /* check db */\n   ret = _sasl_server_check_db(vf);\n+\n+  /* init libltdl */\n+  if (lt_dlinit() != 0)\n+    return SASL_FAIL;\n \n   /* load plugins */\n   add_plugin((void *)&external_server_init, NULL);\n",
        "/tmp/vanessa/spack-stage/spack-stage-cyrus-sasl-2.1.27-hnal7aquex6gy2ydqk4wp52b2upmktrt/spack-src/doc/legacy/plugprog.html": "<HTML><HEAD>\n<title>SASL Plugin Programmer's Guide</title>\n<!-- $Id: plugprog.html,v 1.6 2011/09/07 12:41:51 mel Exp $ -->\n</HEAD>\n<BODY>\n<h1>SASL Plugin Programmer's Guide</h1>\n\n<h3>NOTE: This is a work in progress. Any contributions would be\n<i>very</i> appreciated</h3>\n\n<ul><h2>Contents</h2>\n  <li><a href=\"#intro\">Introduction</a></li>\n  <ul>\n    <li><a href=\"#about_this_guide\">About this Guide</A></li>\n    <li><a href=\"#about_sasl\">What is SASL</A></li>\n  </ul>\n  <li><a href=\"#common\">Common Section</a></li>\n  <ul>\n    <li><a href=\"#overview\">Overview of Plugin Programming</a></li>\n    <li><a href=\"#sasl_utils_t\">Use of sasl_utils_t</a></li>\n    <li><a href=\"#error_reporting\">Error Reporting</a></li>\n    <li><a href=\"#memory\">Memory Allocation</a></li>\n    <li><a href=\"#cslssl\">Client Send First / Server Send Last</a></li>\n  </ul>\n  <li><a href=\"#client\">Client Plugins</a></li>\n  <li><a href=\"#server\">Server Plugins</a></li>\n  <li><a href=\"#canon_user\">User Canonicalization (canon_user) Plugins</a></li>\n  <li><a href=\"#auxprop\">Auxiliary Property (auxprop) Plugins</a></li>\n</ul>\n\n<a name=\"intro\"><h2>Introduction</h2></a>\n\n    <a name=\"about_this_guide\"><h3>About this Guide</h3></a>\n\n    <p>This guide gives a <i>very</i> brief overview on the things that one\n       needs to know to write a mechanism for the SASLv2 API (and thus\n       Cyrus SASLv2).  Note that this page is a brief overview <i>only</i>\n       and that the authoritative documentation are the header files\n       included in the SASL distribution.  If you have any questions, please\n       feel free to contact the Cyrus development team at\n       <a href=\"mailto:cyrus-bugs@andrew.cmu.edu\"><i>cyrus-bugs@andrew.cmu.edu\n\t</i></a> or the cyrus-sasl mailing list at\n       <a href=\"mailto:cyrus-sasl@andrew.cmu.edu\"><i>cyrus-sasl@andrew.cmu.edu\n\t</i></a>.</p>\n\n    <p>Please note that this guide is only intended for developers looking\n       to write mechanisms for the SASLv2 API, and that application programmers\n       should be reading <a href=\"programming.html\">this document</a> instead.\n    </p>\n   \n    <a name=\"about_sasl\"><h3>What is SASL?</h3></a>\n    <p>A description of SASL is covered in detail in the\n      <a href=\"programming.html\">programmer's guide</a>, which mechanism\n      developers should probably read first anyway to become familiar\n      with development using the SASL library.\n    </p>\n    \n<a name=\"common\"><h2>Common Section</h2></a>\n    <a name=\"overview\"><h3>Overview of Plugin Programming</h3></a>\n\n    <p>The basic idea behind programming plugins for Cyrus SASL rests in\n       the ability to dlopen a shared library.  Thus, all plugins should\n       be shared libraries.  It is recommended that they are libtool\n       libraries for portability reasons (Cyrus SASL parses .la files to\n       get the appropriate name to dlopen), but they can have an extention\n       of .so as well.</p>\n    <p>All plugins should live in the same directory\n       (generally /usr/lib/sasl2), which the glue code (that is, the interface\n       layer that sits between the plugins and the application) scans\n       when one of the init functions (sasl_server_init or sasl_client_init)\n       is called.  Cyrus SASL then attempts to open each library and\n       run an initialization function.  If the initialization function\n       succeeds, and the versions match, then the glue code determines\n       that the load was successful and the plugin is available for use.</p>\n    <p>There are serveral types of plugins (note that a given plugin library\n       may contain any or all of the following in combination, though\n       such a plugin would be a beast!):</p>\n    <ul>\n      <li><b>Mechanism Plugins</b> - These plugins implement mechanisms\n\tfor authentication, and are the majority of the plugins included\n\twith Cyrus SASL.  Generally implementing both a client and a server\n\tside they take care of the authentication process.</li>\n      <li><b>User Canonicalization Plugins</b> - These plugins enable differing\n\tways of canonicalizing authentication and authorization IDs.</li>\n      <li><b>Auxiliary Property Plugins</b> - These plugins allow auxilliary\n\tproperties about user accounts to be looked up, such as passwords.\n\tCyrus SASL includes a plugin to read sasldb files, for example.</li>\n    </ul>\n      \n    <a name=\"sasl_utils_t\"><h3>Use of sasl_utils_t</h3></a>\n\n    <p>Because of the way that shared library plugins are loaded for both\n       speed and namespace reasons, the symbol tables are not shared across\n       plugins.  Thus, the only interface that the plugin should assume it\n       has to the outside world is through the <tt>sasl_utils_t</tt> structure (or\n       through links that it specifically requires).  Likewise, the glue code\n       has no (and will use no) interface into the plugin other than the\n       contents of the structures that are passed back to it by the\n       initialization function.</p>\n    <p>This should be stressed again: do not assume you have access to any\n       functions except through links that your library explicitly makes\n       or through what is provided via the <tt>sasl_utils_t</tt> structure.</p>\n\n    <a name=\"error_reporting\"><h3>Error Reporting</h3></a>\n    <p>Error reporting is very important for failed authentication tracking\n       and helping to debug installations or authentication problems.  For\n       that reason, in addition to the standard SASL return codes, the\n       glue code provides an interface to its seterror function (via\n       <tt>sasl_utils_t</tt>).  This function sets detailed error information for\n       a given connection.</p>\n    <p><i>In order to ensure consistency of this information, it is the\n\tresponsibility of the deepest function with access to the sasl_conn_t\n\tmake the call to set the errdetail string.</i></p>\n\n    <a name=\"memory\"><h3>Memory Allocation</h3></a>\n    <p>Memory allocation in SASLv2 follows the simple paradigm that if you\n      allocate it, you free it.  This improves portability, and allows\n      for a large performance improvement over SASLv1.  To prevent memory\n      leaks (especially in the mechanism plugins), please ensure that you\n      follow this paradigm.</p>\n\n    <a name=\"cslssl\"><h3>Client Send First / Server Send Last</h3></a>\n    <p>Mechanism plugins used to have to worry about the situation\n      where they needed clients to send first (or server to send last), yet\n      the protocol did not support it.  Luckily, this is now handled by\n      the glue code, provided that the plugin declares the appropriate flags\n      in the structure returned by its init function.  Thus, the step functions\n      will not have to worry about these issues and can be implemented\n      knowing they will be called only when the application actually has\n      data for them and/or will allow them to send data.  These flags are as\n      follows:</p>\n    <ul>\n      <li><B>SASL_FEAT_WANT_CLIENT_FIRST</B>: The mechanism has the client\n\tside send first always.  (e.g. PLAIN)</li>\n      <li><B>SASL_FEAT_SERVER_FIRST</B>: The mechanism has the server side\n\tsend first always.  (e.g. CRAM-MD5)</li>\n    </ul>\n\n<p>If neither flag is set, the mechanism will handle the client-send\nfirst situation internally, because the client may or may not send\nfirst.  (e.g. DIGEST-MD5).  In this case, the plugin must\nintelligently check for the presence (or absence) of clientin/serverin\ndata.  Note that the optional client send-first is only possible when the\nprotocol permits an initial response.\n\n<p>The server send last situation is handled by the plugin intelligently\nsetting *serverout when the step function returns SASL_OK.  For mechanisms\nwhich never send last (e.g. PLAIN), *serverout must be set to NULL.  For\nmechanisms which always send last (e.g. DIGEST-MD5), *serverout must\npoint to the success data.  For mechanisms in which the server may or\nmay not send last (e.g. SRP), *serverout must be set accordingly.\n\n<a name=\"client\"><h2>Client Plugins</h2></a>\n    <p>Client-side mechanism plugins are generally included in the same\n       plugin with their <a href=\"#server\">server</a> counterpart, though\n       this is not a requirement.  They take care of the client-side of the\n       SASL negotiation.  For a simple example, see the ANONYMOUS plugin.</p>\n    <p>Client plugins must export <tt>sasl_client_plug_init</tt> which returns\n       a <tt>sasl_client_plug_t</tt> in order to load.  The structure has\n       several functional members and a global context (which applies to\n       all connections using the plugin).  The important ones are described\n       briefly here.</p>\n    <ul>\n      <li><b>mech_new</b> - Called at the beginning of each connection,\n\t(on a call to sasl_client_start),\n\tmech_new does mechanism-specific initialization, and if necessary\n\tallocates a connection context (which the glue code keeps track\n\tof for it).  mech_new does not actually send any data to the client,\n        it simply allocates the context.</li>\n      <li><b>mech_step</b> - Called from <tt>sasl_client_start</tt> and\n\t<tt>sasl_client_step</tt>, this function does the actual work of\n\tthe client\n\tside of the authentication.  If authentication is successful, it\n\tshould return SASL_OK, otherwise it should return a valid SASL\n\terror code (and call seterror).  This should also set up the\n        oparams structure before returning SASL_OK, including any\n        security layer information (in the way of callbacks).  Note\n        that as soon as the client has both the authentication and\n        authorization IDs, it MUST call the canon_user function provided\n        in its params structure (for both the authentication and\n\tauthorization IDs, with SASL_CU_AUTHID and SASL_CU_AUTHZID\n        respectively).</li>\n      <li><b>mech_dispose</b> - Called to dispose of a connection context.\n\tThis is only called when the connection will no longer be used\n        (e.g. when <tt>sasl_dispose</tt> is called)</li>\n      <li><b>mech_free</b> - Called when the sasl library is shutting down\n\t(by <tt>sasl_client_done/sasl_server_done/sasl_done</tt>).\n\tIntended to free any global state of the plugin.</li>\n    </ul>\n<a name=\"server\"><h2>Server Plugins</h2></a>\n    <p>Server-side mechanism plugins are generally included in the same\n       plugin with their <a href=\"#client\">client</a> counterpart, though\n       this is not a requirement.  They take care of the server-side of the\n       SASL negotiation, and are generally more complicated than their\n       client-side counterparts.  For a simple example, see the ANONYMOUS\n       plugin.</p>\n    <p>Server plugins must export <tt>sasl_server_plug_init</tt> which returns\n       a <tt>sasl_server_plug_t</tt> in order to load.  The structure has\n       several functional members and a global context (which applies to\n       all connections using the plugin).  The important ones are described\n       briefly here.</p>\n    <ul>\n      <li><b>mech_new</b> - Called at the beginning of each connection,\n\t(on a call to sasl_client_start),\n\tmech_new does mechanism-specific initialization, and if necessary\n\tallocates a connection context (which the glue code keeps track\n\tof for it).  mech_new does not actually send any data to the client,\n        it simply allocates the context.</li>\n      <li><b>mech_step</b> - Called from <tt>sasl_server_start</tt> and\n\t<tt>sasl_server_step</tt>, this function does the actual work of\n\tthe server\n\tside of the authentication.  If authentication is successful, it\n\tshould return SASL_OK, otherwise it should return a valid SASL\n\terror code (and call seterror).  This should also set up the\n        oparams structure before returning SASL_OK, including any\n        security layer information (in the way of callbacks and SSF\n\tinformation).  Also, as soon\n        as the mechanism has computed both the authentication and the\n        authorization IDs, it MUST call the canon_user function provided\n        in the server params structure (for both the authentication and\n\tauthorization IDs, with SASL_CU_AUTHID and SASL_CU_AUTHZID\n        respectively).  This action will also fill in its\n        propctx, so any auxiliary property <i>requests</i>\n        (for example, to lookup\n        the password) should be done before the request to canonicalize\n        the authentication id.  Authorization ID lookups do not occur until\n        after the plugin returns success to the SASL library.<p>\n\n        Before returning SASL_OK, <tt>mech_step</tt> must fill in the\n        oparams fields for which it is responsible, that is, <tt>doneflag</tt>\n        (set to 1 to indicate a complete exchange), <tt>maxoutbuf</tt>, or\n        the maximum output size it can do at once for a security layer,\n        <tt>mech_ssf</tt> or the supplied SSF of the security layer,\n        and <tt>encode</tt>, <tt>decode</tt>, <tt>encode_context</tt>,\n\tand <tt>decode_context</tt>,\n        which are what the glue code will call on calls to <tt>sasl_encode</tt>,\n\t<tt>sasl_encodev</tt>, and <tt>sasl_decode</tt>.</li>\n      <li><b>mech_dispose</b> - Called to dispose of a connection context.\n\tThis is only called when the connection will no longer be used\n        (e.g. when <tt>sasl_dispose</tt> is called)</li>\n      <li><b>mech_free</b> - Called when the sasl library is shutting down\n\t(by <tt>sasl_client_done/sasl_server_done/sasl_done</tt>).\n\tIntended to free any global state of the plugin.</li>\n      <li><b>setpass</b> - Called to set a user's password.  This allows\n\tmechanisms to support their own internal password or secret\n\tdatabase.</li>\n      <li><b>mech_avail</b> - Called by the first call to\n\t<tt>sasl_listmech</tt>,\n\tit checks to see if the mechanism is available for the given\n\tuser, and MAY allocate a connection context (thus avoiding\n\ta call to <tt>mech_new</tt>).  However it should not do this\n\twithout significant performance benefit as it forces the glue\n\tcode to keep track of extra contexts that may not be used.</li>\n    </ul>\n<a name=\"canon_user\"><h2>User Canonicalization (canon_user) Plugins</h2></a>\n    <p>User Canonicalization plugins allow for nonstandard ways of\n       canonicalizing the username.  They are subject to the following\n       requirements:</p>\n    <ul>\n      <li>They must copy their output into the provided output buffers.</li>\n      <li>The output buffers may be the same as the input buffers.</li>\n      <li>They must function for the case which is only an authentication\n\t  ID (flags == SASL_CU_AUTHID) or only an authorization ID\n\t  (flags == SASL_CU_AUTHZID) or both\n\t  (flags == SASL_CU_AUTHID | SASL_CU_AUTHZID)\n    </ul>\n    <p>User canonicalization plugins must export a <tt>sasl_canonuser_init</tt>\n       function which returns a <tt>sasl_canonuser_plug_t</tt> in order\n       to load successfully.  They must implement at least one of\n       the <tt>canon_user_client</tt> or <tt>canon_user_server</tt> members\n       of the <tt>sasl_canonuser_plug_t</tt>.  The INTERNAL canon_user plugin\n       that is inside of the glue code implements both in the same way.</p>\n<a name=\"auxprop\"><h2>Auxiliary Property (auxprop) Plugins</h2></a>\n    <p>Perhaps the most exciting addition in SASLv2, Auxprop plugins\n       allow for an easy way to perform password and secret lookups (as well\n       as other information needed for authentication and authorization)\n       from directory services, and in the same request allow the application\n       to receive properties that it needs to provide the service.\n    </p>\n    <p>Auxprop plugins need to export the <tt>sasl_auxprop_init</tt> function\n       and pass back a <tt>sasl_auxprop_plug_t</tt> in order to load\n       successfully.  The sasldb plugin included with the Cyrus SASL\n       distribution would be a good place to start.</p>\n    <p>Interfacing with property contexts is extremely well documented in\n       <tt>prop.h</tt> and so that is omitted here.  The only important\n       note is to be sure that you are using the interfaces provided\n       through the <tt>sasl_utils_t</tt> structure and not calling\n       the functions directly.</p>\n    <p>To successfully implement an auxprop plugin there is only one\n       required function to implement, that is the <tt>auxprop_lookup</tt>\n       member of the <tt>sasl_auxprop_plug_t</tt>.  This is called\n       just after canonicalization of the username, with the canonicalized\n       username.  It can then do whatever lookups are necessary for any\n       of the requested auxiliary properties.</p>\n</p>\n<hr>\nBack to the <A href=index.html>index</a>\n\n</body>\n</html>\n",
        "/tmp/vanessa/spack-stage/spack-stage-cyrus-sasl-2.1.27-hnal7aquex6gy2ydqk4wp52b2upmktrt/spack-src/doc/legacy/macosx.html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">\n<html>\n<head>\n  <title>Building and Using Cyrus SASL on Mac OS X</title>\n<!-- $Id: macosx.html,v 1.6 2003/12/12 00:43:03 rbraun Exp $ -->\n</head>\n<body>\n<h1>Cyrus SASL v2 on Mac OS X (and 9)</h1>\n<p>The Cyrus SASL v2 distribution now supports Mac OS X, including\napplications written to Apple's Carbon and Cocoa interfaces, as well\nas the standard Unix-like API. It includes the following\ncomponents:</p>\n<ul>\n  <li>A port of the Unix SASL library, which lives in <tt>/usr/local/lib/libsasl2.dylib</tt>\n(or something like that) and\nwith plugins in <tt>/usr/lib/sasl</tt> (which should be a symlink to <tt>/usr/local/lib/sasl</tt>).\n  </li>\n  <li>A framework which lives in\n<tt>/Library/Frameworks/SASL2.framework</tt>, and allows the use of the\n<tt>-framework</tt> option to Apple's <tt>ld</tt>, or linking with the\nframework in Project Builder. This framework is in fact a wrapper for a\nsymlink to <tt>/usr/local/lib/libsasl2.dylib</tt> with the necessary\ninformation to recognize it as a framework. This is what we expect many\nCocoa and Carbon Mach-O applications will want to use, and the framework\nis required for CFBundle to work, which is used by the CFM glue library.\n</li>\n  <li>A CFM glue library (<tt>/Library/CFMSupport/SASL2GlueCFM</tt>) which\ncan be linked in by Carbon CFM applications, that uses CFBundle to bind\nthe framework and thus load the Unix-level library. It automatically loads\nthe important functions at <tt>sasl_client_init</tt> or\n<tt>sasl_server_init</tt> time; it also automatically makes sure memory\nallocation works if you're using the metrowerks malloc; if you're not,\n<tt>sasl_set_alloc</tt> works as usual. </li>\n  <li>A Carbon port of the existing CFM library for Mac OS 9. Note that\nthis could probably be modified fairly easily to work on OS X, but\nthere's not much point. The CFM glue layer to the Unix library\nsupports many more functions, including the entire server API; also,\nthe Unix implementation is mostly independent of Kerberos\nimplementation, while the Mac OS 9 Carbon port specifically requires\nMIT Kerberos for Macintosh 3.5 or later in order to get Kerberos\nsupport. The Mac OS 9 code implements only the client API, but this is\nmostly what is wanted from SASL on OS 9 anyway. </li>\n</ul>\n<p>If you are building a Carbon CFM application and intend it to run on\nboth OS 9 and OS X, you should link against the OS 9 Carbon SASL\nlibrary, since it exports fewer APIs (client side only, specifically)\nthan the OS X CFM glue. Your application should work seamlessly with\nboth libraries if you do this, despite the different implementations\nunderneath.</p>\n<p>If you need a Carbon CFM application to support server-side SASL\nfunctionality, you need to link against the <tt>SASL2GlueCFM</tt>\nlibrary, but be aware that your application will not run on OS 9.</p>\n<h2>Compiling and Using the Unix library</h2>\n\nThe Unix library is mostly ready to build on Mac OS X, but it does depend\non the <tt>dlcompat</tt> package in order to load its plugins.\n<tt>dlcompat-20010505</tt> is a relatively simple version known to work\nwith SASL; it is provided with the distribution in a tarball. You should\n<tt>make</tt> and <tt>make install</tt> the <tt>dlcompat</tt> library\n(which probably goes into <tt>/usr/local/lib/libdl.dylib</tt>) before\nattempting to <tt>./configure</tt> the SASL distribution itself. SASL will\nthen pretend it's a real Unix <tt>libdl</tt>, and link against it. \n\n<p>Since there are, at this point, newer and far more complex versions of\ndlcompat, you may prefer to use those instead if other software requires\ntheir functionality. The dlcompat homepage is located <a\nhref=\"http://www.opendarwin.org/projects/dlcompat/\">on the OpenDarwin\nsite.</a> Many users may want to install the <tt>/sw</tt> tree from <a\nhref=\"http://fink.sourceforge.net/\">the Fink project</a> to get this, as\nwell as possibly newer autotools and other software.<br> </p>\n\n<p>As of version 2.1.16, SASL uses and requires a recent version of GNU\nautotools (autoconf, automake, and libtool) to build its configuration scripts.\nIf you are building from GIT, you will need to have the autotools installed\non your system. The version included with all releases of the developer tools\nfor OS X 10.2.x is too old for this; if you aren't using OS X 10.3 or later,\nyou should upgrade to more recent patchlevels of these tools. The easiest way\nto do this is to <a href=\"http://fink.sourceforge.net/\">install the Fink\nenvironment</a> and then <tt>apt-get\ninstall autoconf2.5 automake1.7 libtool14</tt>.<br>\n</p>\n<p>Recent versions of SASL ship with Kerberos v4 disabled by default.\nIf you need Kerberos v4 for some reason, and you are using MIT Kerberos\nfor Macintosh 4.0 or later, you should <tt>./configure</tt> with\nthe added options <tt>\"--enable-krb4=/usr --without-openssl\n--disable-digest\"</tt> so that it finds the\ncorrect location for the header files, and does not use OpenSSL or\nbuild anything that depends on it (such as the digest-md5 plugin),\nsince OpenSSL provides its own DES routines which do not work with\nKerberos v4. <i>Please read the \"Known Problems\" section at the end of\nthis\ndocument for more information on this issue.<br>\n</i></p>\n<p>You must be root to make install, since <tt>/usr/local</tt> is only\nmodifiable by root. You need not enable the root account using\nNetInfo; the recommended (but underdocumented) method is to use\n<tt>sudo -s</tt> from the Terminal window when you are logged into an\nadministrator's account, and enter the password for that account. When\nbuilding on Mac OS X, <tt>make install</tt> will automatically add the\nframework to <tt>/Library/Frameworks</tt>.</p>\n<p>This does not build the CFM glue library. Building the CFM glue\nlibrary requires Metrowerks CodeWarrior Pro 6 or later (tested with\n6), and the files necessary to build it are in the\n<tt>mac/osx_cfm_glue</tt> folder.</p>\n<h2>Changes to the Unix library to make it work on OS X</h2>\n<p>This is provided for reference purposes only. The build system will\nautomatically take care of all of these issues when building on Darwin\nor Mac OS X.</p>\n<ul>\n  <li>The random code supports the preferred way to generate random\nnumbers in Darwin. (In SASL v2, it does this on all unix-like\nplatforms that lack jrand48). <i>Note that Mac OS X \"Jaguar\", version\n10.2,\nnow has the standard jrand48 function, and that SASL will use this\ninstead\nof the previous workaround.</i> </li>\n  <li>Symbols which are dlopened have an underscore prefixed. (This\nbehavior is detected by configure in SASL v2.) </li>\n  <li>Plugins are linked with the <tt>-module</tt> option to <tt>libtool</tt>,\nwhich causes the <tt>-bundle</tt> option to be\nsupplied to Apple's <tt>ld</tt>. (This is done on all platforms in\nSASL v2.) </li>\n  <li>The MD5 symbols are renamed to avoid library conflicts. This\nallows proper compilations against Heimdal and MIT's unix kerberos\ndistribution, and prevents crashes when linked against MIT Kerberos\nfor Macintosh (which also duplicates the symbols, but in a different\nway). Note that the MD5 symbols have local names on all platforms with\nSASL v2; this was only different in SASL v1. </li>\n  <li>MIT Kerberos for Macintosh 4.0 and later are fully supported. This\nwas accomplished by using <tt>krb_get_err_text</tt> if available and\nchecking for additional names for the krb4 libraries. </li> </ul>\n<h2>Changes to the Mac OS 9 projects to support Carbon</h2>\n<p><b><i>Please read these notes before you attempt to build SASL for OS 9\nCarbon!</i></b> </p> <ul>\n  <li><b>Important!</b> You must make sure that all files have their\ncorrect HFS filetype before starting to build this code! In\nparticular, all source and text files must be of type <tt>'TEXT'</tt>,\nwhich is not the default if you use the Mac OS X GIT client to check\nout the projects. If you run into this problem, you may want to use a\nutility such as FileTyper to recursively change the type on all\nfiles. CodeWarrior is less picky about the projects' filetypes, but\nsetting them to filetype <tt>'MMPr'</tt>, creator code <tt>'CWIE'</tt>\nmay be helpful in opening the projects from the Finder. Users on Mac OS\nX familiar with the Unix <tt>find</tt>\ncommand should be able to rig <tt>/Developer/Tools/SetFile</tt>\nto do this job as well. </li>\n  <li>Many of the important projects (for <tt>libdes</tt>, <tt>libsasl</tt>,\n    <tt>build_plugins</tt>, and the sample client <tt>sc_shlb</tt>)\nhave Carbon versions. </li>\n  <li>Plugins are loaded from a <tt>Carbon</tt> subfolder of the <tt>SASL\nv2</tt> folder in the Extensions folder. Plugins directly\nin\nthe <tt>SASL v2</tt> folder are considered to be for the Classic\nlibraries. </li>\n  <li>Note that when using the <tt>build_plugins</tt> project, you must\ngenerate the plugin init files using the <tt>makeinit.sh</tt> script in\nthe <tt>plugins</tt> directory. The easiest way to do this is to run the\nscript from a Unix shell, such as Mac OS X. You must then fix the\nfiletypes of the generated source files (see above). </li>\n  <li>There is a new folder in <tt>CommonKClient</tt> called <tt>mac_kclient3</tt>\nwhich contains code compatible with MIT's new <a\n href=\"http://web.mit.edu/macdev/Development/MITKerberos/MITKerberosLib/KClient/Documentation/index.html\">KClient\n3.0</a> API. This folder must be in your CodeWarrior access paths, the\nold <tt>mac_kclient</tt> folder must not, and it must precede the\nproject's main folder. </li>\n  <li>The kerberos4 plugin uses this new code. The kerberos4 plugin\nalso\nstatically links the Carbon <tt>libdes</tt>, and no other part of\nCarbon SASL uses <tt>libdes</tt> directly. <i>Your application should\n    <b>not</b> link against</i> <tt>libdes.shlb</tt> <i>under Carbon!</i>\n(It causes problems due to DES symbols also existing in the MIT\nKerberos library, which loads first.) </li>\n  <li>To build the projects, you should have the MIT Kerberos for\nMacintosh 3.5 installation disk images mounted, since the access paths\ninclude the absolute paths to the library directories from that\nimage. It's easier than you having to find the paths yourself, and\nsmaller than having to distribute the libraries with SASL. </li>\n</ul>\n<h2>Known Problems</h2>\n<ul>\n  <li>The Kerberos v4 headers bundled with Mac OS X (and Kerberos for\nMacintosh) are not compatible with OS X's OpenSSL headers. (Kerberos v4\nsupport is disabled by default.) If you actually need krb4 support, the\neasiest solution is to build without using OpenSSL's\n<tt>libcrypto</tt>. To do this, specify the <tt>--without-openssl</tt>\noption to <tt>configure</tt>. As of version 2.1.18, this automatically\ndisables using <tt>libcrypto</tt> for DES as well. You will probably\nalso need to specify <tt>--disable-digest</tt> since the digestmd5 plugin\ndoes not build against Kerberos v4's DES headers or library. Note that\nthis disables several features (digestmd5, NTLM, OTP) which require\nOpenSSL. If both Kerberos v4 and functionality that requires OpenSSL are\nneeded, it is probably possible to build the Kerberos v4 plugin against\nthe correct K4 DES libraries, and everything else against OpenSSL;\nhowever, we do not support that configuration.<br>\n  </li>\n  <li>Versions of Cyrus SASL prior to 2.1.14 with support for Carbon\nCFM applications on Mac OS X have a known bug involving the CFM glue\ncode (in <tt>mac/osx_cfm_glue</tt>). If <tt>sasl_done</tt> is called\nto unload the SASL library, and then one of the initialization\nfunctions (such as <tt>sasl_client_init</tt>) is called to\nreinitialize it from the same process, the application will crash. A\nfix for one obvious cause of this problem is included in 2.1.14;\nhowever, as of this writing, it has not been tested. It is possible\nthat other bugs in Cyrus SASL, or deficiencies in Apple's libraries,\nwill make this fix insufficient to resolve this issue. </li>\n</ul>\n</body>\n</html>\n",
        "/tmp/vanessa/spack-stage/spack-stage-cyrus-sasl-2.1.27-hnal7aquex6gy2ydqk4wp52b2upmktrt/spack-src/win32/sasl2.vcxproj": "\ufeff<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<Project DefaultTargets=\"Build\" ToolsVersion=\"14.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n  <ItemGroup Label=\"ProjectConfigurations\">\n    <ProjectConfiguration Include=\"Debug|Win32\">\n      <Configuration>Debug</Configuration>\n      <Platform>Win32</Platform>\n    </ProjectConfiguration>\n    <ProjectConfiguration Include=\"Release|Win32\">\n      <Configuration>Release</Configuration>\n      <Platform>Win32</Platform>\n    </ProjectConfiguration>\n    <ProjectConfiguration Include=\"Debug|x64\">\n      <Configuration>Debug</Configuration>\n      <Platform>x64</Platform>\n    </ProjectConfiguration>\n    <ProjectConfiguration Include=\"Release|x64\">\n      <Configuration>Release</Configuration>\n      <Platform>x64</Platform>\n    </ProjectConfiguration>\n  </ItemGroup>\n  <PropertyGroup Label=\"Globals\">\n    <ProjectGuid>{25B39566-623A-410B-B489-FEFE6B997A7E}</ProjectGuid>\n    <Keyword>Win32Proj</Keyword>\n    <WindowsTargetPlatformVersion>8.1</WindowsTargetPlatformVersion>\n    <ProjectName>sasl2</ProjectName>\n  </PropertyGroup>\n  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.Default.props\" />\n  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\" Label=\"Configuration\">\n    <ConfigurationType>DynamicLibrary</ConfigurationType>\n    <UseDebugLibraries>true</UseDebugLibraries>\n    <PlatformToolset>v140</PlatformToolset>\n    <CharacterSet>Unicode</CharacterSet>\n  </PropertyGroup>\n  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\" Label=\"Configuration\">\n    <ConfigurationType>DynamicLibrary</ConfigurationType>\n    <UseDebugLibraries>false</UseDebugLibraries>\n    <PlatformToolset>v140</PlatformToolset>\n    <CharacterSet>Unicode</CharacterSet>\n  </PropertyGroup>\n  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\" Label=\"Configuration\">\n    <ConfigurationType>DynamicLibrary</ConfigurationType>\n    <UseDebugLibraries>true</UseDebugLibraries>\n    <PlatformToolset>v140</PlatformToolset>\n    <CharacterSet>Unicode</CharacterSet>\n  </PropertyGroup>\n  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\" Label=\"Configuration\">\n    <ConfigurationType>DynamicLibrary</ConfigurationType>\n    <UseDebugLibraries>false</UseDebugLibraries>\n    <PlatformToolset>v140</PlatformToolset>\n    <CharacterSet>Unicode</CharacterSet>\n  </PropertyGroup>\n  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.props\" />\n  <ImportGroup Label=\"ExtensionSettings\">\n  </ImportGroup>\n  <ImportGroup Label=\"Shared\">\n  </ImportGroup>\n  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">\n    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n    <Import Project=\"cyrus-sasl.props\" />\n    <Import Project=\"openssl.props\" />\n  </ImportGroup>\n  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">\n    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n    <Import Project=\"cyrus-sasl.props\" />\n    <Import Project=\"openssl.props\" />\n  </ImportGroup>\n  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n    <Import Project=\"cyrus-sasl.props\" />\n    <Import Project=\"openssl.props\" />\n  </ImportGroup>\n  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n    <Import Project=\"cyrus-sasl.props\" />\n    <Import Project=\"openssl.props\" />\n  </ImportGroup>\n  <PropertyGroup Label=\"UserMacros\" />\n  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\" />\n  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\" />\n  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\" />\n  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\" />\n  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">\n    <ClCompile>\n      <WarningLevel>Level3</WarningLevel>\n      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>\n      <Optimization>Disabled</Optimization>\n      <PreprocessorDefinitions>_DEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n    </ClCompile>\n    <Link>\n      <TargetMachine>MachineX86</TargetMachine>\n      <GenerateDebugInformation>true</GenerateDebugInformation>\n      <SubSystem>NotSet</SubSystem>\n      <FullProgramDatabaseFile>true</FullProgramDatabaseFile>\n    </Link>\n  </ItemDefinitionGroup>\n  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">\n    <ClCompile>\n      <PreprocessorDefinitions>NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n      <RuntimeLibrary>MultiThreadedDLL</RuntimeLibrary>\n      <WarningLevel>Level3</WarningLevel>\n      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>\n    </ClCompile>\n    <Link>\n      <TargetMachine>MachineX86</TargetMachine>\n      <GenerateDebugInformation>true</GenerateDebugInformation>\n      <SubSystem>Windows</SubSystem>\n      <EnableCOMDATFolding>true</EnableCOMDATFolding>\n      <OptimizeReferences>true</OptimizeReferences>\n      <LinkTimeCodeGeneration>UseLinkTimeCodeGeneration</LinkTimeCodeGeneration>\n    </Link>\n  </ItemDefinitionGroup>\n  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n    <ClCompile>\n      <ForcedIncludeFiles>%(ForcedIncludeFiles)</ForcedIncludeFiles>\n    </ClCompile>\n    <Link>\n      <GenerateDebugInformation>true</GenerateDebugInformation>\n      <FullProgramDatabaseFile>true</FullProgramDatabaseFile>\n      <SubSystem>NotSet</SubSystem>\n    </Link>\n  </ItemDefinitionGroup>\n  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n    <ClCompile>\n      <ForcedIncludeFiles>%(ForcedIncludeFiles)</ForcedIncludeFiles>\n    </ClCompile>\n    <Link>\n      <EnableCOMDATFolding>true</EnableCOMDATFolding>\n      <LinkTimeCodeGeneration>UseLinkTimeCodeGeneration</LinkTimeCodeGeneration>\n    </Link>\n  </ItemDefinitionGroup>\n  <ItemGroup>\n    <ClCompile Include=\"..\\lib\\auxprop.c\" />\n    <ClCompile Include=\"..\\lib\\canonusr.c\" />\n    <ClCompile Include=\"..\\lib\\checkpw.c\" />\n    <ClCompile Include=\"..\\lib\\client.c\" />\n    <ClCompile Include=\"..\\lib\\common.c\" />\n    <ClCompile Include=\"..\\lib\\config.c\" />\n    <ClCompile Include=\"..\\lib\\external.c\" />\n    <ClCompile Include=\"..\\lib\\getsubopt.c\" />\n    <ClCompile Include=\"..\\lib\\md5.c\" />\n    <ClCompile Include=\"..\\lib\\saslutil.c\" />\n    <ClCompile Include=\"..\\lib\\server.c\" />\n    <ClCompile Include=\"..\\lib\\seterror.c\" />\n    <ClCompile Include=\"..\\lib\\windlopen.c\" />\n  </ItemGroup>\n  <ItemGroup>\n    <ClInclude Include=\"..\\lib\\saslint.h\" />\n    <ClInclude Include=\"..\\lib\\staticopen.h\" />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"common.vcxproj\">\n      <Project>{528f3494-1c30-405f-9fdf-22fa4afe54f4}</Project>\n    </ProjectReference>\n    <ProjectReference Include=\"plugin_anonymous.vcxproj\">\n      <Project>{666d9377-c82c-4391-96bb-b9a5794fb9dd}</Project>\n    </ProjectReference>\n    <ProjectReference Include=\"plugin_digestmd5.vcxproj\">\n      <Project>{6e87064b-9a5e-4f05-a8fb-09fc72e9e3cc}</Project>\n    </ProjectReference>\n    <ProjectReference Include=\"plugin_ntlm.vcxproj\">\n      <Project>{7d694002-b275-4895-a76e-a6ed345fd3c3}</Project>\n    </ProjectReference>\n    <ProjectReference Include=\"plugin_plain.vcxproj\">\n      <Project>{b8c5499f-bcb8-409c-8446-0d92de118020}</Project>\n    </ProjectReference>\n    <ProjectReference Include=\"plugin_scram.vcxproj\">\n      <Project>{639d1c4b-acc5-40a4-a96b-731e7fc21ea7}</Project>\n    </ProjectReference>\n  </ItemGroup>\n  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.targets\" />\n  <ImportGroup Label=\"ExtensionTargets\">\n  </ImportGroup>\n</Project>"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-cyrus-sasl-2.1.27-hnal7aquex6gy2ydqk4wp52b2upmktrt/spack-src/include/makemd5.c",
        "/tmp/vanessa/spack-stage/spack-stage-cyrus-sasl-2.1.27-hnal7aquex6gy2ydqk4wp52b2upmktrt/spack-src/docsrc/exts/themes/sphinx_rtd_theme/static/fonts/RobotoSlab-Regular.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-cyrus-sasl-2.1.27-hnal7aquex6gy2ydqk4wp52b2upmktrt/spack-src/docsrc/exts/themes/sphinx_rtd_theme/static/fonts/Inconsolata.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-cyrus-sasl-2.1.27-hnal7aquex6gy2ydqk4wp52b2upmktrt/spack-src/docsrc/exts/themes/sphinx_rtd_theme/static/fonts/Inconsolata-Bold.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-cyrus-sasl-2.1.27-hnal7aquex6gy2ydqk4wp52b2upmktrt/spack-src/docsrc/exts/themes/sphinx_rtd_theme/static/fonts/Lato-Bold.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-cyrus-sasl-2.1.27-hnal7aquex6gy2ydqk4wp52b2upmktrt/spack-src/docsrc/exts/themes/sphinx_rtd_theme/static/fonts/Lato-Regular.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-cyrus-sasl-2.1.27-hnal7aquex6gy2ydqk4wp52b2upmktrt/spack-src/docsrc/exts/themes/sphinx_rtd_theme/static/fonts/RobotoSlab-Bold.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-cyrus-sasl-2.1.27-hnal7aquex6gy2ydqk4wp52b2upmktrt/spack-src/docsrc/exts/themes/sphinx_rtd_theme/static/fonts/fontawesome-webfont.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-cyrus-sasl-2.1.27-hnal7aquex6gy2ydqk4wp52b2upmktrt/spack-src/docsrc/exts/themes/sphinx_rtd_theme/static/fonts/fontawesome-webfont.eot",
        "/tmp/vanessa/spack-stage/spack-stage-cyrus-sasl-2.1.27-hnal7aquex6gy2ydqk4wp52b2upmktrt/spack-src/docsrc/exts/themes/sphinx_rtd_theme/static/fonts/fontawesome-webfont.woff",
        "/tmp/vanessa/spack-stage/spack-stage-cyrus-sasl-2.1.27-hnal7aquex6gy2ydqk4wp52b2upmktrt/spack-src/docsrc/exts/themes/cyrus/static/fonts/RobotoSlab-Regular.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-cyrus-sasl-2.1.27-hnal7aquex6gy2ydqk4wp52b2upmktrt/spack-src/docsrc/exts/themes/cyrus/static/fonts/Inconsolata.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-cyrus-sasl-2.1.27-hnal7aquex6gy2ydqk4wp52b2upmktrt/spack-src/docsrc/exts/themes/cyrus/static/fonts/Inconsolata-Bold.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-cyrus-sasl-2.1.27-hnal7aquex6gy2ydqk4wp52b2upmktrt/spack-src/docsrc/exts/themes/cyrus/static/fonts/Lato-Bold.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-cyrus-sasl-2.1.27-hnal7aquex6gy2ydqk4wp52b2upmktrt/spack-src/docsrc/exts/themes/cyrus/static/fonts/Lato-Regular.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-cyrus-sasl-2.1.27-hnal7aquex6gy2ydqk4wp52b2upmktrt/spack-src/docsrc/exts/themes/cyrus/static/fonts/RobotoSlab-Bold.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-cyrus-sasl-2.1.27-hnal7aquex6gy2ydqk4wp52b2upmktrt/spack-src/docsrc/exts/themes/cyrus/static/fonts/fontawesome-webfont.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-cyrus-sasl-2.1.27-hnal7aquex6gy2ydqk4wp52b2upmktrt/spack-src/docsrc/exts/themes/cyrus/static/fonts/fontawesome-webfont.eot",
        "/tmp/vanessa/spack-stage/spack-stage-cyrus-sasl-2.1.27-hnal7aquex6gy2ydqk4wp52b2upmktrt/spack-src/docsrc/exts/themes/cyrus/static/fonts/fontawesome-webfont.woff",
        "/tmp/vanessa/spack-stage/spack-stage-cyrus-sasl-2.1.27-hnal7aquex6gy2ydqk4wp52b2upmktrt/spack-src/docsrc/_static/headimg.gif",
        "/tmp/vanessa/spack-stage/spack-stage-cyrus-sasl-2.1.27-hnal7aquex6gy2ydqk4wp52b2upmktrt/spack-src/docsrc/_static/logo.gif",
        "/tmp/vanessa/spack-stage/spack-stage-cyrus-sasl-2.1.27-hnal7aquex6gy2ydqk4wp52b2upmktrt/spack-src/docsrc/_static/favicon.ico",
        "/tmp/vanessa/spack-stage/spack-stage-cyrus-sasl-2.1.27-hnal7aquex6gy2ydqk4wp52b2upmktrt/spack-src/mac/krb4_sources/mk_priv.c",
        "/tmp/vanessa/spack-stage/spack-stage-cyrus-sasl-2.1.27-hnal7aquex6gy2ydqk4wp52b2upmktrt/spack-src/mac/krb4_sources/lsb_addr_comp.c",
        "/tmp/vanessa/spack-stage/spack-stage-cyrus-sasl-2.1.27-hnal7aquex6gy2ydqk4wp52b2upmktrt/spack-src/mac/krb4_sources/mk_auth.c",
        "/tmp/vanessa/spack-stage/spack-stage-cyrus-sasl-2.1.27-hnal7aquex6gy2ydqk4wp52b2upmktrt/spack-src/mac/krb4_sources/rd_safe.c",
        "/tmp/vanessa/spack-stage/spack-stage-cyrus-sasl-2.1.27-hnal7aquex6gy2ydqk4wp52b2upmktrt/spack-src/mac/krb4_sources/krb-protos.h",
        "/tmp/vanessa/spack-stage/spack-stage-cyrus-sasl-2.1.27-hnal7aquex6gy2ydqk4wp52b2upmktrt/spack-src/mac/krb4_sources/mk_req.c",
        "/tmp/vanessa/spack-stage/spack-stage-cyrus-sasl-2.1.27-hnal7aquex6gy2ydqk4wp52b2upmktrt/spack-src/mac/krb4_sources/rd_priv.c",
        "/tmp/vanessa/spack-stage/spack-stage-cyrus-sasl-2.1.27-hnal7aquex6gy2ydqk4wp52b2upmktrt/spack-src/mac/krb4_sources/mk_safe.c",
        "/tmp/vanessa/spack-stage/spack-stage-cyrus-sasl-2.1.27-hnal7aquex6gy2ydqk4wp52b2upmktrt/spack-src/mac/krb4_sources/rw.c",
        "/tmp/vanessa/spack-stage/spack-stage-cyrus-sasl-2.1.27-hnal7aquex6gy2ydqk4wp52b2upmktrt/spack-src/mac/build_plugins/build_plugins.Carbon",
        "/tmp/vanessa/spack-stage/spack-stage-cyrus-sasl-2.1.27-hnal7aquex6gy2ydqk4wp52b2upmktrt/spack-src/mac/kerberos_includes/krb-protos.h",
        "/tmp/vanessa/spack-stage/spack-stage-cyrus-sasl-2.1.27-hnal7aquex6gy2ydqk4wp52b2upmktrt/spack-src/mac/sc_shlb/sc_shlb.Carbon",
        "/tmp/vanessa/spack-stage/spack-stage-cyrus-sasl-2.1.27-hnal7aquex6gy2ydqk4wp52b2upmktrt/spack-src/mac/sc_shlb/sc_shlb.mono",
        "/tmp/vanessa/spack-stage/spack-stage-cyrus-sasl-2.1.27-hnal7aquex6gy2ydqk4wp52b2upmktrt/spack-src/mac/CommonKClient/mac_kclient3/Headers/KerberosPreferences/KerberosPreferences.h",
        "/tmp/vanessa/spack-stage/spack-stage-cyrus-sasl-2.1.27-hnal7aquex6gy2ydqk4wp52b2upmktrt/spack-src/mac/CommonKClient/mac_kclient3/Headers/KerberosSupport/ShlibDriver.h",
        "/tmp/vanessa/spack-stage/spack-stage-cyrus-sasl-2.1.27-hnal7aquex6gy2ydqk4wp52b2upmktrt/spack-src/mac/CommonKClient/mac_kclient/KClient.h",
        "/tmp/vanessa/spack-stage/spack-stage-cyrus-sasl-2.1.27-hnal7aquex6gy2ydqk4wp52b2upmktrt/spack-src/mac/CommonKClient/mac_kclient/KClient.c",
        "/tmp/vanessa/spack-stage/spack-stage-cyrus-sasl-2.1.27-hnal7aquex6gy2ydqk4wp52b2upmktrt/spack-src/mac/CommonKClient/mac_kclient/KrbDriver.h",
        "/tmp/vanessa/spack-stage/spack-stage-cyrus-sasl-2.1.27-hnal7aquex6gy2ydqk4wp52b2upmktrt/spack-src/mac/libdes/src/md4.c",
        "/tmp/vanessa/spack-stage/spack-stage-cyrus-sasl-2.1.27-hnal7aquex6gy2ydqk4wp52b2upmktrt/spack-src/mac/libdes/src/sha.c",
        "/tmp/vanessa/spack-stage/spack-stage-cyrus-sasl-2.1.27-hnal7aquex6gy2ydqk4wp52b2upmktrt/spack-src/mac/libdes/src/mdtest.c",
        "/tmp/vanessa/spack-stage/spack-stage-cyrus-sasl-2.1.27-hnal7aquex6gy2ydqk4wp52b2upmktrt/spack-src/mac/libdes/src/passwd_dlg.c",
        "/tmp/vanessa/spack-stage/spack-stage-cyrus-sasl-2.1.27-hnal7aquex6gy2ydqk4wp52b2upmktrt/spack-src/mac/libdes/src/md5.c",
        "/tmp/vanessa/spack-stage/spack-stage-cyrus-sasl-2.1.27-hnal7aquex6gy2ydqk4wp52b2upmktrt/spack-src/mac/libdes/src/key_par.c",
        "/tmp/vanessa/spack-stage/spack-stage-cyrus-sasl-2.1.27-hnal7aquex6gy2ydqk4wp52b2upmktrt/spack-src/mac/libdes/src/dllmain.c",
        "/tmp/vanessa/spack-stage/spack-stage-cyrus-sasl-2.1.27-hnal7aquex6gy2ydqk4wp52b2upmktrt/spack-src/mac/libdes/src/passwd_dlg.h",
        "/tmp/vanessa/spack-stage/spack-stage-cyrus-sasl-2.1.27-hnal7aquex6gy2ydqk4wp52b2upmktrt/spack-src/mac/libdes/src/passwd_dialog.res",
        "/tmp/vanessa/spack-stage/spack-stage-cyrus-sasl-2.1.27-hnal7aquex6gy2ydqk4wp52b2upmktrt/spack-src/mac/libdes/src/md5.h",
        "/tmp/vanessa/spack-stage/spack-stage-cyrus-sasl-2.1.27-hnal7aquex6gy2ydqk4wp52b2upmktrt/spack-src/mac/libdes/src/passwd_dialog.rc",
        "/tmp/vanessa/spack-stage/spack-stage-cyrus-sasl-2.1.27-hnal7aquex6gy2ydqk4wp52b2upmktrt/spack-src/mac/libdes/src/sha.h",
        "/tmp/vanessa/spack-stage/spack-stage-cyrus-sasl-2.1.27-hnal7aquex6gy2ydqk4wp52b2upmktrt/spack-src/mac/libdes/src/rnd_keys.c",
        "/tmp/vanessa/spack-stage/spack-stage-cyrus-sasl-2.1.27-hnal7aquex6gy2ydqk4wp52b2upmktrt/spack-src/mac/libdes/src/passwd_dialog.aps",
        "/tmp/vanessa/spack-stage/spack-stage-cyrus-sasl-2.1.27-hnal7aquex6gy2ydqk4wp52b2upmktrt/spack-src/mac/libdes/src/md4.h",
        "/tmp/vanessa/spack-stage/spack-stage-cyrus-sasl-2.1.27-hnal7aquex6gy2ydqk4wp52b2upmktrt/spack-src/mac/libdes/libdes_ppc/libdes_ppc.Carbon",
        "/tmp/vanessa/spack-stage/spack-stage-cyrus-sasl-2.1.27-hnal7aquex6gy2ydqk4wp52b2upmktrt/spack-src/mac/libsasl/libsasl.Carbon",
        "/tmp/vanessa/spack-stage/spack-stage-cyrus-sasl-2.1.27-hnal7aquex6gy2ydqk4wp52b2upmktrt/spack-src/mac/osx_cfm_glue/cfmglue.proj"
    ],
    "total_files": 730
}