{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-comgr-4.0.0-rt5mf5ifvojkdfuu7ahldfzrrimnjjks/spack-src/lib/comgr/include/amd_comgr.h.in": "/*******************************************************************************\n*\n* University of Illinois/NCSA\n* Open Source License\n*\n* Copyright (c) 2018 Advanced Micro Devices, Inc. All Rights Reserved.\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* with the Software without restriction, including without limitation the\n* rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n* sell copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n*     * Redistributions of source code must retain the above copyright notice,\n*       this list of conditions and the following disclaimers.\n*\n*     * Redistributions in binary form must reproduce the above copyright\n*       notice, this list of conditions and the following disclaimers in the\n*       documentation and/or other materials provided with the distribution.\n*\n*     * Neither the names of Advanced Micro Devices, Inc. nor the names of its\n*       contributors may be used to endorse or promote products derived from\n*       this Software without specific prior written permission.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH\n* THE SOFTWARE.\n*\n*******************************************************************************/\n\n#ifndef AMD_COMGR_H_\n#define AMD_COMGR_H_\n\n#include <stddef.h>   /* size_t */\n#include <stdint.h>\n\n#ifndef __cplusplus\n#include <stdbool.h>  /* bool */\n#endif /* __cplusplus */\n\n/* Placeholder for calling convention and import/export macros */\n#ifndef AMD_COMGR_CALL\n#define AMD_COMGR_CALL\n#endif\n\n#ifndef AMD_COMGR_EXPORT_DECORATOR\n#ifdef __GNUC__\n#define AMD_COMGR_EXPORT_DECORATOR __attribute__ ((visibility (\"default\")))\n#else\n#define AMD_COMGR_EXPORT_DECORATOR __declspec(dllexport)\n#endif\n#endif\n\n#ifndef AMD_COMGR_IMPORT_DECORATOR\n#ifdef __GNUC__\n#define AMD_COMGR_IMPORT_DECORATOR\n#else\n#define AMD_COMGR_IMPORT_DECORATOR __declspec(dllimport)\n#endif\n#endif\n\n#define AMD_COMGR_API_EXPORT AMD_COMGR_EXPORT_DECORATOR AMD_COMGR_CALL\n#define AMD_COMGR_API_IMPORT AMD_COMGR_IMPORT_DECORATOR AMD_COMGR_CALL\n\n#ifndef AMD_COMGR_API\n#ifdef AMD_COMGR_EXPORT\n#define AMD_COMGR_API AMD_COMGR_API_EXPORT\n#else\n#define AMD_COMGR_API AMD_COMGR_API_IMPORT\n#endif\n#endif\n\n#define AMD_COMGR_INTERFACE_VERSION_MAJOR @amd_comgr_VERSION_MAJOR@\n#define AMD_COMGR_INTERFACE_VERSION_MINOR @amd_comgr_VERSION_MINOR@\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif  /* __cplusplus */\n\n/** \\defgroup codeobjectmanager Code Object Manager\n *  @{\n *\n * @brief The code object manager is a callable library that provides\n * operations for creating and inspecting code objects.\n *\n * The library provides handles to various objects. Concurrent execution of\n * operations is supported provided all objects accessed by each concurrent\n * operation are disjoint. For example, the @p amd_comgr_data_set_t handles\n * passed to operations must be disjoint, together with all the @p\n * amd_comgr_data_t handles that have been added to it. The exception is that\n * the default device library data object handles can be non-disjoint as they\n * are imutable.\n *\n * The library supports generating and inspecting code objects that\n * contain machine code for a certain set of instruction set\n * arhitectures (isa). The set of isa supported and information about\n * the properties of the isa can be queried.\n *\n * The library supports performing an action that can take data\n * objects of one kind, and generate new data objects of another kind.\n *\n * Data objects are referenced using handles using @p\n * amd_comgr_data_t. The kinds of data objects are given\n * by @p amd_comgr_data_kind_t.\n *\n * To perform an action, two @p amd_comgr_data_set_t\n * objects are created. One is used to hold all the data objects\n * needed by an action, and other is updated by the action with all\n * the result data objects. In addition, an @p\n * amd_comgr_action_info_t is created to hold\n * information that controls the action. These are then passed to @p\n * amd_comgr_do_action to perform an action specified by\n * @p amd_comgr_action_kind_t.\n *\n * Some data objects can have associated metadata. There are\n * operations for querying this metadata.\n *\n * The default device library that satisfies the requirements of the\n * compiler action can be obtained.\n *\n * The library inspects some environment variables to aid in debugging. These\n * include:\n * - @p AMD_COMGR_SAVE_TEMPS: If this is set, and is not \"0\", the library does\n *   not delete temporary files generated while executing compilation actions.\n *   These files do not appear in the current working directory, but are\n *   instead left in a platform-specific temporary directory (/tmp on Linux and\n *   C:\\Temp or the path found in the TEMP environment variable on Windows).\n * - @p AMD_COMGR_REDIRECT_LOGS: If this is not set, or is set to \"0\", logs are\n *   returned to the caller as normal. If this is set to \"stdout\"/\"-\" or\n *   \"stderr\", logs are instead redirected to the standard output or error\n *   stream, respectively. If this is set to any other value, it is interpreted\n *   as a filename which logs should be appended to. Logs may be redirected\n *   irrespective of whether logging is enabled.\n * - @p AMD_COMGR_EMIT_VERBOSE_LOGS: If this is set, and is not \"0\", logs will\n *   include additional Comgr-specific informational messages.\n */\n\n\n/** \\defgroup symbol_versions_group Symbol Versions\n *\n * The names used for the shared library versioned symbols.\n *\n * Every function is annotated with one of the version macros defined in this\n * section.  Each macro specifies a corresponding symbol version string.  After\n * dynamically loading the shared library with \\p dlopen, the address of each\n * function can be obtained using \\p dlvsym with the name of the function and\n * its corresponding symbol version string.  An error will be reported by \\p\n * dlvsym if the installed library does not support the version for the\n * function specified in this version of the interface.\n *\n * @{\n */\n\n/**\n * The function was introduced in version 1.8 of the interface and has the\n * symbol version string of ``\"@amd_comgr_NAME@_1.8\"``.\n */\n#define AMD_COMGR_VERSION_1_8\n\n/** @} */\n\n/**\n * @brief Status codes.\n */\ntypedef enum amd_comgr_status_s {\n  /**\n   * The function has been executed successfully.\n   */\n  AMD_COMGR_STATUS_SUCCESS = 0x0,\n  /**\n   * A generic error has occurred.\n   */\n  AMD_COMGR_STATUS_ERROR = 0x1,\n  /**\n   * One of the actual arguments does not meet a precondition stated\n   * in the documentation of the corresponding formal argument.\n   */\n  AMD_COMGR_STATUS_ERROR_INVALID_ARGUMENT = 0x2,\n  /**\n   * Failed to allocate the necessary resources.\n   */\n  AMD_COMGR_STATUS_ERROR_OUT_OF_RESOURCES = 0x3,\n} amd_comgr_status_t;\n\n/**\n * @brief The source languages supported by the compiler.\n */\ntypedef enum amd_comgr_language_s {\n  /**\n   * No high level language.\n   */\n  AMD_COMGR_LANGUAGE_NONE = 0x0,\n  /**\n   * OpenCL 1.2.\n   */\n  AMD_COMGR_LANGUAGE_OPENCL_1_2 = 0x1,\n  /**\n   * OpenCL 2.0.\n   */\n  AMD_COMGR_LANGUAGE_OPENCL_2_0 = 0x2,\n  /**\n   * AMD Hetrogeneous C++ (HC).\n   */\n  AMD_COMGR_LANGUAGE_HC = 0x3,\n  /**\n   * HIP.\n   */\n  AMD_COMGR_LANGUAGE_HIP = 0x4,\n  /**\n   * Marker for last valid language.\n   */\n  AMD_COMGR_LANGUAGE_LAST = AMD_COMGR_LANGUAGE_HIP\n} amd_comgr_language_t;\n\n/**\n * @brief Query additional information about a status code.\n *\n * @param[in] status Status code.\n *\n * @param[out] status_string A NUL-terminated string that describes\n * the error status.\n *\n * @retval ::AMD_COMGR_STATUS_SUCCESS The function has\n * been executed successfully.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_INVALID_ARGUMENT @p\n * status is an invalid status code, or @p status_string is NULL.\n */\namd_comgr_status_t AMD_COMGR_API amd_comgr_status_string(\n    amd_comgr_status_t status,\n    const char ** status_string) AMD_COMGR_VERSION_1_8;\n\n/**\n * @brief Get the version of the code object manager interface\n * supported.\n *\n * An interface is backwards compatible with an implementation with an\n * equal major version, and a greater than or equal minor version.\n *\n * @param[out] major Major version number.\n *\n * @param[out] minor Minor version number.\n */\nvoid AMD_COMGR_API amd_comgr_get_version(\n  size_t *major,\n  size_t *minor) AMD_COMGR_VERSION_1_8;\n\n/**\n * @brief The kinds of data supported.\n */\ntypedef enum amd_comgr_data_kind_s {\n  /**\n   * No data is available.\n   */\n  AMD_COMGR_DATA_KIND_UNDEF = 0x0,\n  /**\n   * The data is a textual main source.\n   */\n  AMD_COMGR_DATA_KIND_SOURCE = 0x1,\n  /**\n   * The data is a textual source that is included in the main source\n   * or other include source.\n   */\n  AMD_COMGR_DATA_KIND_INCLUDE = 0x2,\n  /**\n   * The data is a precompiled-header source that is included in the main\n   * source or other include source.\n   */\n  AMD_COMGR_DATA_KIND_PRECOMPILED_HEADER = 0x3,\n  /**\n   * The data is a diagnostic output.\n   */\n  AMD_COMGR_DATA_KIND_DIAGNOSTIC = 0x4,\n  /**\n   * The data is a textual log output.\n   */\n  AMD_COMGR_DATA_KIND_LOG = 0x5,\n  /**\n   * The data is compiler LLVM IR bit code for a specific isa.\n   */\n  AMD_COMGR_DATA_KIND_BC = 0x6,\n  /**\n   * The data is a relocatable machine code object for a specific isa.\n   */\n  AMD_COMGR_DATA_KIND_RELOCATABLE = 0x7,\n  /**\n   * The data is an executable machine code object for a specific\n   * isa. An executable is the kind of code object that can be loaded\n   * and executed.\n   */\n  AMD_COMGR_DATA_KIND_EXECUTABLE = 0x8,\n  /**\n   * The data is a block of bytes.\n   */\n  AMD_COMGR_DATA_KIND_BYTES = 0x9,\n  /**\n   * The data is a fat binary (clang-offload-bundler output).\n   */\n  AMD_COMGR_DATA_KIND_FATBIN = 0x10,\n  /**\n   * Marker for last valid data kind.\n   */\n  AMD_COMGR_DATA_KIND_LAST = AMD_COMGR_DATA_KIND_FATBIN\n} amd_comgr_data_kind_t;\n\n/**\n * @brief A handle to a data object.\n *\n * Data objects are used to hold the data which is either an input or\n * output of a code object manager action.\n */\ntypedef struct amd_comgr_data_s {\n  uint64_t handle;\n} amd_comgr_data_t;\n\n/**\n * @brief A handle to an action data object.\n *\n * An action data object holds a set of data objects. These can be\n * used as inputs to an action, or produced as the result of an\n * action.\n */\ntypedef struct amd_comgr_data_set_s {\n  uint64_t handle;\n} amd_comgr_data_set_t;\n\n/**\n * @brief A handle to an action information object.\n *\n * An action information object holds all the necessary information,\n * excluding the input data objects, required to perform an action.\n */\ntypedef struct amd_comgr_action_info_s {\n  uint64_t handle;\n} amd_comgr_action_info_t;\n\n/**\n * @brief A handle to a metadata node.\n *\n * A metadata node handle is used to traverse the metadata associated\n * with a data node.\n */\ntypedef struct amd_comgr_metadata_node_s {\n  uint64_t handle;\n} amd_comgr_metadata_node_t;\n\n/**\n * @brief A handle to a machine code object symbol.\n *\n * A symbol handle is used to obtain the properties of symbols of a machine code\n * object. A symbol handle is invalidated when the data object containing the\n * symbol is destroyed.\n */\ntypedef struct amd_comgr_symbol_s {\n  uint64_t handle;\n} amd_comgr_symbol_t;\n\n/**\n * @brief A handle to a disassembly information object.\n *\n * A disassembly information object holds all the necessary information,\n * excluding the input data, required to perform disassembly.\n */\ntypedef struct amd_comgr_disassembly_info_s {\n  uint64_t handle;\n} amd_comgr_disassembly_info_t;\n\n/**\n * @brief Return the number of isa names supported by this version of\n * the code object manager library.\n *\n * The isa name specifies the instruction set architecture that should\n * be used in the actions that involve machine code generation or\n * inspection.\n *\n * @param[out] count The number of isa names supported.\n *\n * @retval ::AMD_COMGR_STATUS_SUCCESS The function has\n * been executed successfully.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_INVALID_ARGUMENT @p\n * count is NULL.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_OUT_OF_RESOURCES\n * Unable to update action info object as out of resources.\n */\namd_comgr_status_t AMD_COMGR_API\namd_comgr_get_isa_count(\n  size_t *count) AMD_COMGR_VERSION_1_8;\n\n/**\n * @brief Return the Nth isa name supported by this version of the\n * code object manager library.\n *\n * @param[in] index The index of the isa name to be returned. The\n * first isa name is index 0.\n *\n * @param[out] isa_name A null terminated string that is the isa name\n * being requested.\n *\n * @retval ::AMD_COMGR_STATUS_SUCCESS The function has\n * been executed successfully.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_INVALID_ARGUMENT @p\n * index is greater than the number of isa name supported by this\n * version of the code object manager library. @p isa_name is NULL.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_OUT_OF_RESOURCES\n * Unable to update action info object as out of resources.\n */\namd_comgr_status_t AMD_COMGR_API\namd_comgr_get_isa_name(\n  size_t index,\n  const char **isa_name) AMD_COMGR_VERSION_1_8;\n\n /**\n * @brief Get a handle to the metadata of an isa name.\n *\n * The structure of the returned metadata is isa name specific. It can\n * include information about the limits for resources such as\n * registers and memory addressing.\n *\n * @param[in] isa_name The isa name to query.\n *\n * @param[out] metadata A handle to the metadata of the isa name. If\n * the isa name has no metadata then the returned handle has a kind of\n * @p AMD_COMGR_METADATA_KIND_NULL. The handle must be destroyed\n * using @c amd_comgr_destroy_metadata.\n *\n * @retval ::AMD_COMGR_STATUS_SUCCESS The function has\n * been executed successfully.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_INVALID_ARGUMENT @p\n * name is NULL or is not an isa name supported by this version of the\n * code object manager library. @p metadata is NULL.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_OUT_OF_RESOURCES\n * Unable to update the data object as out of resources.\n */\namd_comgr_status_t AMD_COMGR_API\namd_comgr_get_isa_metadata(\n  const char *isa_name,\n  amd_comgr_metadata_node_t *metadata) AMD_COMGR_VERSION_1_8;\n\n/**\n * @brief Create a data object that can hold data of a specified kind.\n *\n * Data objects are reference counted and are destroyed when the\n * reference count reaches 0. When a data object is created its\n * reference count is 1, it has 0 bytes of data, it has an empty name,\n * and it has no metadata.\n *\n * @param[in] kind The kind of data the object is intended to hold.\n *\n * @param[out] data A handle to the data object created. Its reference\n * count is set to 1.\n *\n * @retval ::AMD_COMGR_STATUS_SUCCESS The function has\n * been executed successfully.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_INVALID_ARGUMENT @p\n * kind is an invalid data kind, or @p\n * AMD_COMGR_DATA_KIND_UNDEF. @p data is NULL.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_OUT_OF_RESOURCES\n * Unable to create the data object as out of resources.\n */\namd_comgr_status_t AMD_COMGR_API\namd_comgr_create_data(\n  amd_comgr_data_kind_t kind,\n  amd_comgr_data_t *data) AMD_COMGR_VERSION_1_8;\n\n /**\n * @brief Indicate that no longer using a data object handle.\n *\n * The reference count of the associated data object is\n * decremented. If it reaches 0 it is destroyed.\n *\n * @param[in] data The data object to release.\n *\n * @retval ::AMD_COMGR_STATUS_SUCCESS The function has\n * been executed successfully.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_INVALID_ARGUMENT @p\n * data is an invalid data object, or has kind @p\n * AMD_COMGR_DATA_KIND_UNDEF.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_OUT_OF_RESOURCES\n * Unable to update the data object as out of resources.\n */\namd_comgr_status_t AMD_COMGR_API\namd_comgr_release_data(\n  amd_comgr_data_t data) AMD_COMGR_VERSION_1_8;\n\n/**\n * @brief Get the kind of the data object.\n *\n * @param[in] data The data object to query.\n *\n * @param[out] kind The kind of data the object.\n *\n * @retval ::AMD_COMGR_STATUS_SUCCESS The function has\n * been executed successfully.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_INVALID_ARGUMENT @p\n * data is an invalid data object. @p kind is NULL.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_OUT_OF_RESOURCES\n * Unable to create the data object as out of resources.\n */\namd_comgr_status_t AMD_COMGR_API\namd_comgr_get_data_kind(\n  amd_comgr_data_t data,\n  amd_comgr_data_kind_t *kind) AMD_COMGR_VERSION_1_8;\n\n/**\n * @brief Set the data content of a data object to the specified\n * bytes.\n *\n * Any previous value of the data object is overwritten. Any metadata\n * associated with the data object is also replaced which invalidates\n * all metadata handles to the old metadata.\n *\n * @param[in] data The data object to update.\n *\n * @param[in] size The number of bytes in the data specified by @p bytes.\n *\n * @param[in] bytes The bytes to set the data object to. The bytes are\n * copied into the data object and can be freed after the call.\n *\n * @retval ::AMD_COMGR_STATUS_SUCCESS The function has\n * been executed successfully.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_INVALID_ARGUMENT @p\n * data is an invalid data object, or has kind @p\n * AMD_COMGR_DATA_KIND_UNDEF.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_OUT_OF_RESOURCES\n * Unable to update the data object as out of resources.\n */\namd_comgr_status_t AMD_COMGR_API\namd_comgr_set_data(\n  amd_comgr_data_t data,\n  size_t size,\n  const char* bytes) AMD_COMGR_VERSION_1_8;\n\n/**\n * @brief Set the name associated with a data object.\n *\n * When compiling, the fle name of an include directive is used to\n * reference the contents of the include data object with the same\n * name. The name may also be used for other data objects in log and\n * diagnostic output.\n *\n * @param[in] data The data object to update.\n *\n * @param[in] name A null terminated string that specifies the name to\n * use for the data object. If NULL then the name is set to the empty\n * string.\n *\n * @retval ::AMD_COMGR_STATUS_SUCCESS The function has\n * been executed successfully.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_INVALID_ARGUMENT @p\n * data is an invalid data object, or has kind @p\n * AMD_COMGR_DATA_KIND_UNDEF.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_OUT_OF_RESOURCES\n * Unable to update the data object as out of resources.\n */\namd_comgr_status_t AMD_COMGR_API\namd_comgr_set_data_name(\n  amd_comgr_data_t data,\n  const char* name) AMD_COMGR_VERSION_1_8;\n\n/**\n * @brief Get the data contents, and/or the size of the data\n * associated with a data object.\n *\n * @param[in] data The data object to query.\n *\n * @param[in, out] size On entry, the size of @p bytes. On return, if @p bytes\n * is NULL, set to the size of the data object contents.\n *\n * @param[out] bytes If not NULL, then the first @p size bytes of the\n * data object contents is copied. If NULL, no data is copied, and\n * only @p size is updated (useful in order to find the size of buffer\n * required to copy the data).\n *\n * @retval ::AMD_COMGR_STATUS_SUCCESS The function has\n * been executed successfully.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_INVALID_ARGUMENT @p\n * data is an invalid data object, or has kind @p\n * AMD_COMGR_DATA_KIND_UNDEF. @p size is NULL.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_OUT_OF_RESOURCES\n * Unable to update the data object as out of resources.\n */\namd_comgr_status_t AMD_COMGR_API\namd_comgr_get_data(\n  amd_comgr_data_t data,\n  size_t *size,\n  char *bytes) AMD_COMGR_VERSION_1_8;\n\n/**\n * @brief Get the data object name and/or name length.\n *\n * @param[in] data The data object to query.\n *\n * @param[in, out] size On entry, the size of @p name. On return, if @p name is\n * NULL, set to the size of the data object name including the terminating null\n * character.\n *\n * @param[out] name If not NULL, then the first @p size characters of the\n * data object name are copied. If NULL, no name is copied, and\n * only @p size is updated (useful in order to find the size of buffer\n * required to copy the name).\n *\n * @retval ::AMD_COMGR_STATUS_SUCCESS The function has\n * been executed successfully.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_INVALID_ARGUMENT @p\n * data is an invalid data object, or has kind @p\n * AMD_COMGR_DATA_KIND_UNDEF. @p size is NULL.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_OUT_OF_RESOURCES\n * Unable to update the data object as out of resources.\n */\namd_comgr_status_t AMD_COMGR_API\namd_comgr_get_data_name(\n  amd_comgr_data_t data,\n  size_t *size,\n  char *name) AMD_COMGR_VERSION_1_8;\n\n/**\n * @brief Get the data object isa name and/or isa name length.\n *\n * @param[in] data The data object to query.\n *\n * @param[in, out] size On entry, the size of @p isa_name. On return, if @p\n * isa_name is NULL, set to the size of the isa name including the terminating\n * null character.\n *\n * @param[out] isa_name If not NULL, then the first @p size characters\n * of the isa name are copied. If NULL, no isa name is copied, and\n * only @p size is updated (useful in order to find the size of buffer\n * required to copy the isa name).\n *\n * @retval ::AMD_COMGR_STATUS_SUCCESS The function has\n * been executed successfully.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_INVALID_ARGUMENT @p\n * data is an invalid data object, has kind @p\n * AMD_COMGR_DATA_KIND_UNDEF, or is not an isa specific\n * kind. @p size is NULL.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_OUT_OF_RESOURCES\n * Unable to update the data object as out of resources.\n */\namd_comgr_status_t AMD_COMGR_API\namd_comgr_get_data_isa_name(\n  amd_comgr_data_t data,\n  size_t *size,\n  char *isa_name) AMD_COMGR_VERSION_1_8;\n\n /**\n * @brief Get a handle to the metadata of a data object.\n *\n * @param[in] data The data object to query.\n *\n * @param[out] metadata A handle to the metadata of the data\n * object. If the data object has no metadata then the returned handle\n * has a kind of @p AMD_COMGR_METADATA_KIND_NULL. The\n * handle must be destroyed using @c amd_comgr_destroy_metadata.\n *\n * @retval ::AMD_COMGR_STATUS_SUCCESS The function has\n * been executed successfully.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_INVALID_ARGUMENT @p\n * data is an invalid data object, or has kind @p\n * AMD_COMGR_DATA_KIND_UNDEF. @p metadata is NULL.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_OUT_OF_RESOURCES\n * Unable to update the data object as out of resources.\n */\namd_comgr_status_t AMD_COMGR_API\namd_comgr_get_data_metadata(\n  amd_comgr_data_t data,\n  amd_comgr_metadata_node_t *metadata) AMD_COMGR_VERSION_1_8;\n\n/**\n * @brief Destroy a metadata handle.\n *\n * @param[in] metadata A metadata handle to destroy.\n *\n * @retval ::AMD_COMGR_STATUS_SUCCESS The function has been executed\n * successfully.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_INVALID_ARGUMENT @p metadata is an invalid\n * metadata handle.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_OUT_OF_RESOURCES Unable to update metadata\n * handle as out of resources.\n */\namd_comgr_status_t AMD_COMGR_API\namd_comgr_destroy_metadata(amd_comgr_metadata_node_t metadata) AMD_COMGR_VERSION_1_8;\n\n/**\n * @brief Create a data set object.\n *\n * @param[out] data_set A handle to the data set created. Initially it\n * contains no data objects.\n *\n * @retval ::AMD_COMGR_STATUS_SUCCESS The function has been executed\n * successfully.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_INVALID_ARGUMENT @p data_set is NULL.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_OUT_OF_RESOURCES Unable to create the data\n * set object as out of resources.\n */\namd_comgr_status_t AMD_COMGR_API\namd_comgr_create_data_set(\n  amd_comgr_data_set_t *data_set) AMD_COMGR_VERSION_1_8;\n\n/**\n * @brief Destroy a data set object.\n *\n * The reference counts of any associated data objects are decremented. Any\n * handles to the data set object become invalid.\n *\n * @param[in] data_set A handle to the data set object to destroy.\n *\n * @retval ::AMD_COMGR_STATUS_SUCCESS The function has been executed\n * successfully.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_INVALID_ARGUMENT @p data_set is an invalid\n * data set object.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_OUT_OF_RESOURCES Unable to update data set\n * object as out of resources.\n */\namd_comgr_status_t AMD_COMGR_API\namd_comgr_destroy_data_set(\n  amd_comgr_data_set_t data_set) AMD_COMGR_VERSION_1_8;\n\n/**\n * @brief Add a data object to a data set object if it is not already added.\n *\n * The reference count of the data object is incremented.\n *\n * @param[in] data_set A handle to the data set object to be updated.\n *\n * @param[in] data A handle to the data object to be added. If @p data_set\n * already has the specified handle present, then it is not added. The order\n * that data objects are added is preserved.\n *\n * @retval ::AMD_COMGR_STATUS_SUCCESS The function has been executed\n * successfully.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_INVALID_ARGUMENT @p data_set is an invalid\n * data set object. @p data is an invalid data object; has undef kind; has\n * include kind but does not have a name.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_OUT_OF_RESOURCES Unable to update data set\n * object as out of resources.\n */\namd_comgr_status_t AMD_COMGR_API\namd_comgr_data_set_add(\n  amd_comgr_data_set_t data_set,\n  amd_comgr_data_t data) AMD_COMGR_VERSION_1_8;\n\n/**\n * @brief Remove all data objects of a specified kind from a data set object.\n *\n * The reference count of the removed data objects is decremented.\n *\n * @param[in] data_set A handle to the data set object to be updated.\n *\n * @param[in] data_kind The data kind of the data objects to be removed. If @p\n * AMD_COMGR_DATA_KIND_UNDEF is specified then all data objects are removed.\n *\n * @retval ::AMD_COMGR_STATUS_SUCCESS The function has been executed\n * successfully.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_INVALID_ARGUMENT @p data_set is an invalid\n * data set object. @p data_kind is an invalid data kind.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_OUT_OF_RESOURCES Unable to update data set\n * object as out of resources.\n */\namd_comgr_status_t AMD_COMGR_API\namd_comgr_data_set_remove(\n  amd_comgr_data_set_t data_set,\n  amd_comgr_data_kind_t data_kind) AMD_COMGR_VERSION_1_8;\n\n/**\n * @brief Return the number of data objects of a specified data kind that are\n * added to a data set object.\n *\n * @param[in] data_set A handle to the data set object to be queried.\n *\n * @param[in] data_kind The data kind of the data objects to be counted.\n *\n * @param[out] count The number of data objects of data kind @p data_kind.\n *\n * @retval ::AMD_COMGR_STATUS_SUCCESS The function has been executed\n * successfully.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_INVALID_ARGUMENT @p data_set is an invalid\n * data set object. @p data_kind is an invalid data kind or @p\n * AMD_COMGR_DATA_KIND_UNDEF. @p count is NULL.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_OUT_OF_RESOURCES Unable to query data set\n * object as out of resources.\n */\namd_comgr_status_t AMD_COMGR_API\namd_comgr_action_data_count(\n  amd_comgr_data_set_t data_set,\n  amd_comgr_data_kind_t data_kind,\n  size_t *count) AMD_COMGR_VERSION_1_8;\n\n/**\n * @brief Return the Nth data object of a specified data kind that is added to a\n * data set object.\n *\n * The reference count of the returned data object is incremented.\n *\n * @param[in] data_set A handle to the data set object to be queried.\n *\n * @param[in] data_kind The data kind of the data object to be returned.\n *\n * @param[in] index The index of the data object of data kind @data_kind to be\n * returned. The first data object is index 0. The order of data objects matches\n * the order that they were added to the data set object.\n *\n * @param[out] data The data object being requested.\n *\n * @retval ::AMD_COMGR_STATUS_SUCCESS The function has been executed\n * successfully.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_INVALID_ARGUMENT @p data_set is an invalid\n * data set object. @p data_kind is an invalid data kind or @p\n * AMD_COMGR_DATA_KIND_UNDEF. @p index is greater than the number of data\n * objects of kind @p data_kind. @p data is NULL.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_OUT_OF_RESOURCES Unable to query data set\n * object as out of resources.\n */\namd_comgr_status_t AMD_COMGR_API\namd_comgr_action_data_get_data(\n  amd_comgr_data_set_t data_set,\n  amd_comgr_data_kind_t data_kind,\n  size_t index,\n  amd_comgr_data_t *data) AMD_COMGR_VERSION_1_8;\n\n/**\n * @brief Create an action info object.\n *\n * @param[out] action_info A handle to the action info object created.\n *\n * @retval ::AMD_COMGR_STATUS_SUCCESS The function has\n * been executed successfully.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_INVALID_ARGUMENT @p\n * action_info is NULL.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_OUT_OF_RESOURCES\n * Unable to create the action info object as out of resources.\n */\namd_comgr_status_t AMD_COMGR_API\namd_comgr_create_action_info(\n  amd_comgr_action_info_t *action_info) AMD_COMGR_VERSION_1_8;\n\n/**\n * @brief Destroy an action info object.\n *\n * @param[in] action_info A handle to the action info object to destroy.\n *\n * @retval ::AMD_COMGR_STATUS_SUCCESS The function has\n * been executed successfully.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_INVALID_ARGUMENT @p\n * action_info is an invalid action info object.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_OUT_OF_RESOURCES\n * Unable to update action info object as out of resources.\n */\namd_comgr_status_t AMD_COMGR_API\namd_comgr_destroy_action_info(\n  amd_comgr_action_info_t action_info) AMD_COMGR_VERSION_1_8;\n\n/**\n * @brief Set the isa name of an action info object.\n *\n * When an action info object is created it has no isa name. Some\n * actions require that the action info object has an isa name\n * defined.\n *\n * @param[in] action_info A handle to the action info object to be\n * updated.\n *\n * @param[in] isa_name A null terminated string that is the isa name. If NULL\n * or the empty string then the isa name is cleared. The isa name is defined as\n * the Code Object Target Identification string, described at\n * https://llvm.org/docs/AMDGPUUsage.html#code-object-target-identification\n *\n * @retval ::AMD_COMGR_STATUS_SUCCESS The function has\n * been executed successfully.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_INVALID_ARGUMENT @p\n * action_info is an invalid action info object. @p isa_name is not an\n * isa name supported by this version of the code object manager\n * library.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_OUT_OF_RESOURCES\n * Unable to update action info object as out of resources.\n */\namd_comgr_status_t AMD_COMGR_API\namd_comgr_action_info_set_isa_name(\n  amd_comgr_action_info_t action_info,\n  const char *isa_name) AMD_COMGR_VERSION_1_8;\n\n/**\n * @brief Get the isa name and/or isa name length.\n *\n * @param[in] action_info The action info object to query.\n *\n * @param[in, out] size On entry, the size of @p isa_name. On return, if @p\n * isa_name is NULL, set to the size of the isa name including the terminating\n * null character.\n *\n * @param[out] isa_name If not NULL, then the first @p size characters of the\n * isa name are copied into @p isa_name. If the isa name is not set then an\n * empty string is copied into @p isa_name. If NULL, no name is copied, and\n * only @p size is updated (useful in order to find the size of buffer required\n * to copy the name).\n *\n * @retval ::AMD_COMGR_STATUS_SUCCESS The function has\n * been executed successfully.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_INVALID_ARGUMENT @p\n * action_info is an invalid action info object. @p size is NULL.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_OUT_OF_RESOURCES\n * Unable to update the data object as out of resources.\n */\namd_comgr_status_t AMD_COMGR_API\namd_comgr_action_info_get_isa_name(\n  amd_comgr_action_info_t action_info,\n  size_t *size,\n  char *isa_name) AMD_COMGR_VERSION_1_8;\n\n/**\n * @brief Set the source language of an action info object.\n *\n * When an action info object is created it has no language defined\n * which is represented by @p\n * AMD_COMGR_LANGUAGE_NONE. Some actions require that\n * the action info object has a source language defined.\n *\n * @param[in] action_info A handle to the action info object to be\n * updated.\n *\n * @param[in] language The language to set. If @p\n * AMD_COMGR_LANGUAGE_NONE then the language is cleared.\n *\n * @retval ::AMD_COMGR_STATUS_SUCCESS The function has\n * been executed successfully.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_INVALID_ARGUMENT @p\n * action_info is an invalid action info object. @p language is an\n * invalid language.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_OUT_OF_RESOURCES\n * Unable to update action info object as out of resources.\n */\namd_comgr_status_t AMD_COMGR_API\namd_comgr_action_info_set_language(\n  amd_comgr_action_info_t action_info,\n  amd_comgr_language_t language) AMD_COMGR_VERSION_1_8;\n\n/**\n * @brief Get the language for an action info object.\n *\n * @param[in] action_info The action info object to query.\n *\n * @param[out] language The language of the action info opject. @p\n * AMD_COMGR_LANGUAGE_NONE if not defined,\n *\n * @retval ::AMD_COMGR_STATUS_SUCCESS The function has\n * been executed successfully.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_INVALID_ARGUMENT @p\n * action_info is an invalid action info object. @p language is NULL.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_OUT_OF_RESOURCES\n * Unable to update the data object as out of resources.\n */\namd_comgr_status_t AMD_COMGR_API\namd_comgr_action_info_get_language(\n  amd_comgr_action_info_t action_info,\n  amd_comgr_language_t *language) AMD_COMGR_VERSION_1_8;\n\n/**\n * @brief Set the options string of an action info object.\n *\n * When an action info object is created it has an empty options string.\n *\n * This overrides any option strings or arrays previously set by calls to this\n * function or @p amd_comgr_action_info_set_option_list.\n *\n * An @p action_info object which had its options set with this function can\n * only have its option inspected with @p amd_comgr_action_info_get_options.\n *\n * @param[in] action_info A handle to the action info object to be\n * updated.\n *\n * @param[in] options A null terminated string that is the options. If\n * NULL or the empty string then the options are cleared.\n *\n * @retval ::AMD_COMGR_STATUS_SUCCESS The function has\n * been executed successfully.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_INVALID_ARGUMENT @p\n * action_info is an invalid action info object.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_OUT_OF_RESOURCES\n * Unable to update action info object as out of resources.\n *\n * @deprecated since 1.3\n * @see amd_comgr_action_info_set_option_list\n */\namd_comgr_status_t AMD_COMGR_API\namd_comgr_action_info_set_options(\n  amd_comgr_action_info_t action_info,\n  const char *options) AMD_COMGR_VERSION_1_8;\n\n/**\n * @brief Get the options string and/or options strings length of an action\n * info object.\n *\n * The @p action_info object must have had its options set with @p\n * amd_comgr_action_info_set_options.\n *\n * @param[in] action_info The action info object to query.\n *\n * @param[in, out] size On entry, the size of @p options. On return, if @p\n * options is NULL, set to the size of the options including the terminating\n * null character.\n *\n * @param[out] options If not NULL, then the first @p size characters of\n * the options are copied. If the options are not set then an empty\n * string is copied. If NULL, options is not copied, and only @p size\n * is updated (useful inorder to find the size of buffer required to\n * copy the options).\n *\n * @retval ::AMD_COMGR_STATUS_SUCCESS The function has\n * been executed successfully.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR The options of @p action_info were not set\n * with @p amd_comgr_action_info_set_options.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_INVALID_ARGUMENT @p\n * action_info is an invalid action info object. @p size is NULL.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_OUT_OF_RESOURCES\n * Unable to update the data object as out of resources.\n *\n * @deprecated since 1.3\n * @see amd_comgr_action_info_get_option_list_count and\n * amd_comgr_action_info_get_option_list_item\n */\namd_comgr_status_t AMD_COMGR_API\namd_comgr_action_info_get_options(\n  amd_comgr_action_info_t action_info,\n  size_t *size,\n  char *options) AMD_COMGR_VERSION_1_8;\n\n/**\n * @brief Set the options array of an action info object.\n *\n * This overrides any option strings or arrays previously set by calls to this\n * function or @p amd_comgr_action_info_set_options.\n *\n * An @p action_info object which had its options set with this function can\n * only have its option inspected with @p\n * amd_comgr_action_info_get_option_list_count and @p\n * amd_comgr_action_info_get_option_list_item.\n *\n * @param[in] action_info A handle to the action info object to be updated.\n *\n * @param[in] options An array of null terminated strings. May be NULL if @p\n * count is zero, which will result in an empty options array.\n *\n * @param[in] count The number of null terminated strings in @p options.\n *\n * @retval ::AMD_COMGR_STATUS_SUCCESS The function has been executed\n * successfully.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_INVALID_ARGUMENT @p action_info is an\n * invalid action info object, or @p options is NULL and @p count is non-zero.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_OUT_OF_RESOURCES Unable to update action\n * info object as out of resources.\n */\namd_comgr_status_t AMD_COMGR_API\namd_comgr_action_info_set_option_list(\n  amd_comgr_action_info_t action_info,\n  const char *options[],\n  size_t count) AMD_COMGR_VERSION_1_8;\n\n/**\n * @brief Return the number of options in the options array.\n *\n * The @p action_info object must have had its options set with @p\n * amd_comgr_action_info_set_option_list.\n *\n * @param[in] action_info The action info object to query.\n *\n * @param[out] count The number of options in the options array.\n *\n * @retval ::AMD_COMGR_STATUS_SUCCESS The function has been executed\n * successfully.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR The options of @p action_info were never\n * set, or not set with @p amd_comgr_action_info_set_option_list.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_INVALID_ARGUMENT @p action_info is an\n * invalid action info object, or @p count is NULL.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_OUT_OF_RESOURCES Unable to query the data\n * object as out of resources.\n */\namd_comgr_status_t AMD_COMGR_API\namd_comgr_action_info_get_option_list_count(\n  amd_comgr_action_info_t action_info,\n  size_t *count) AMD_COMGR_VERSION_1_8;\n\n/**\n * @brief Return the Nth option string in the options array and/or that\n * option's length.\n *\n * The @p action_info object must have had its options set with @p\n * amd_comgr_action_info_set_option_list.\n *\n * @param[in] action_info The action info object to query.\n *\n * @param[in] index The index of the option to be returned. The first option\n * index is 0. The order is the same as the options when they were added in @p\n * amd_comgr_action_info_set_options.\n *\n * @param[in, out] size On entry, the size of @p option. On return, if @option\n * is NULL, set to the size of the Nth option string including the terminating\n * null character.\n *\n * @param[out] option If not NULL, then the first @p size characters of the Nth\n * option string are copied into @p option. If NULL, no option string is\n * copied, and only @p size is updated (useful in order to find the size of\n * buffer required to copy the option string).\n *\n * @retval ::AMD_COMGR_STATUS_SUCCESS The function has been executed\n * successfully.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR The options of @p action_info were never\n * set, or not set with @p amd_comgr_action_info_set_option_list.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_INVALID_ARGUMENT @p action_info is an\n * invalid action info object, @p index is invalid, or @p size is NULL.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_OUT_OF_RESOURCES Unable to query the data\n * object as out of resources.\n */\namd_comgr_status_t AMD_COMGR_API\namd_comgr_action_info_get_option_list_item(\n  amd_comgr_action_info_t action_info,\n  size_t index,\n  size_t *size,\n  char *option) AMD_COMGR_VERSION_1_8;\n\n/**\n * @brief Set the working directory of an action info object.\n *\n * When an action info object is created it has an empty working\n * directory. Some actions use the working directory to resolve\n * relative file paths.\n *\n * @param[in] action_info A handle to the action info object to be\n * updated.\n *\n * @param[in] path A null terminated string that is the working\n * directory path. If NULL or the empty string then the working\n * directory is cleared.\n *\n * @retval ::AMD_COMGR_STATUS_SUCCESS The function has\n * been executed successfully.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_INVALID_ARGUMENT @p\n * action_info is an invalid action info object.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_OUT_OF_RESOURCES\n * Unable to update action info object as out of resources.\n */\namd_comgr_status_t AMD_COMGR_API\namd_comgr_action_info_set_working_directory_path(\n  amd_comgr_action_info_t action_info,\n  const char *path) AMD_COMGR_VERSION_1_8;\n\n/**\n * @brief Get the working directory path and/or working directory path\n * length of an action info object.\n *\n * @param[in] action_info The action info object to query.\n *\n * @param[in, out] size On entry, the size of @p path. On return, if @p path is\n * NULL, set to the size of the working directory path including the\n * terminating null character.\n *\n * @param[out] path If not NULL, then the first @p size characters of\n * the working directory path is copied. If the working directory path\n * is not set then an empty string is copied. If NULL, the working\n * directory path is not copied, and only @p size is updated (useful\n * in order to find the size of buffer required to copy the working\n * directory path).\n *\n * @retval ::AMD_COMGR_STATUS_SUCCESS The function has\n * been executed successfully.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_INVALID_ARGUMENT @p\n * action_info is an invalid action info object. @p size is NULL.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_OUT_OF_RESOURCES\n * Unable to update the data object as out of resources.\n */\namd_comgr_status_t AMD_COMGR_API\namd_comgr_action_info_get_working_directory_path(\n  amd_comgr_action_info_t action_info,\n  size_t *size,\n  char *path) AMD_COMGR_VERSION_1_8;\n\n/**\n * @brief Set whether logging is enabled for an action info object.\n *\n * @param[in] action_info A handle to the action info object to be\n * updated.\n *\n * @param[in] logging Whether logging should be enabled or disable.\n *\n * @retval ::AMD_COMGR_STATUS_SUCCESS The function has\n * been executed successfully.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_INVALID_ARGUMENT @p\n * action_info is an invalid action info object.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_OUT_OF_RESOURCES\n * Unable to update action info object as out of resources.\n */\namd_comgr_status_t AMD_COMGR_API\namd_comgr_action_info_set_logging(\n  amd_comgr_action_info_t action_info,\n  bool logging) AMD_COMGR_VERSION_1_8;\n\n/**\n * @brief Get whether logging is enabled for an action info object.\n *\n * @param[in] action_info The action info object to query.\n *\n * @param[out] logging Whether logging is enabled.\n *\n * @retval ::AMD_COMGR_STATUS_SUCCESS The function has\n * been executed successfully.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_INVALID_ARGUMENT @p\n * action_info is an invalid action info object. @p logging is NULL.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_OUT_OF_RESOURCES\n * Unable to update the data object as out of resources.\n */\namd_comgr_status_t AMD_COMGR_API\namd_comgr_action_info_get_logging(\n  amd_comgr_action_info_t action_info,\n  bool *logging) AMD_COMGR_VERSION_1_8;\n\n/**\n * @brief The kinds of actions that can be performed.\n */\ntypedef enum amd_comgr_action_kind_s {\n  /**\n   * Preprocess each source data object in @p input in order. For each\n   * successful preprocessor invocation, add a source data object to @p result.\n   * Resolve any include source names using the names of include data objects\n   * in @p input. Resolve any include relative path names using the working\n   * directory path in @p info. Preprocess the source for the language in @p\n   * info.\n   *\n   * Return @p AMD_COMGR_STATUS_ERROR if any preprocessing fails.\n   *\n   * Return @p AMD_COMGR_STATUS_ERROR_INVALID_ARGUMENT\n   * if isa name or language is not set in @p info.\n   */\n  AMD_COMGR_ACTION_SOURCE_TO_PREPROCESSOR = 0x0,\n  /**\n   * Copy all existing data objects in @p input to @p output, then add the\n   * device-specific and language-specific precompiled headers required for\n   * compilation.\n   *\n   * Currently the only supported languages are @p AMD_COMGR_LANGUAGE_OPENCL_1_2\n   * and @p AMD_COMGR_LANGUAGE_OPENCL_2_0.\n   *\n   * Return @p AMD_COMGR_STATUS_ERROR_INVALID_ARGUMENT if isa name or language\n   * is not set in @p info, or the language is not supported.\n   */\n  AMD_COMGR_ACTION_ADD_PRECOMPILED_HEADERS = 0x1,\n  /**\n   * Compile each source data object in @p input in order. For each\n   * successful compilation add a bc data object to @p result. Resolve\n   * any include source names using the names of include data objects\n   * in @p input. Resolve any include relative path names using the\n   * working directory path in @p info. Produce bc for isa name in @p\n   * info. Compile the source for the language in @p info.\n   *\n   * Return @p AMD_COMGR_STATUS_ERROR if any compilation\n   * fails.\n   *\n   * Return @p AMD_COMGR_STATUS_ERROR_INVALID_ARGUMENT\n   * if isa name or language is not set in @p info.\n   */\n  AMD_COMGR_ACTION_COMPILE_SOURCE_TO_BC = 0x2,\n  /**\n   * Copy all existing data objects in @p input to @p output, then add the\n   * device-specific and language-specific bitcode libraries required for\n   * compilation.\n   *\n   * Currently the only supported languages are @p AMD_COMGR_LANGUAGE_OPENCL_1_2,\n   * @p AMD_COMGR_LANGUAGE_OPENCL_2_0, and @p AMD_COMGR_LANGUAGE_HIP.\n   *\n   * The options in @p info should be set to a set of language-specific flags.\n   * For OpenCL and HIP these include:\n   *\n   *    correctly_rounded_sqrt\n   *    daz_opt\n   *    finite_only\n   *    unsafe_math\n   *    wavefrontsize64\n   *\n   * For example, to enable daz_opt and unsafe_math, the options should be set\n   * as:\n   *\n   *    const char *options[] = {\"daz_opt, \"unsafe_math\"};\n   *    size_t optionsCount = sizeof(options) / sizeof(options[0]);\n   *    amd_comgr_action_info_set_option_list(info, options, optionsCount);\n   *\n   * Return @p AMD_COMGR_STATUS_ERROR_INVALID_ARGUMENT if isa name or language\n   * is not set in @p info, the language is not supported, an unknown\n   * language-specific flag is supplied, or a language-specific flag is\n   * repeated.\n   *\n   * @deprecated since 1.7\n   * @warning This action, followed by @c AMD_COMGR_ACTION_LINK_BC_TO_BC, may\n   * result in subtle bugs due to incorrect linking of the device libraries.\n   * The @c AMD_COMGR_ACTION_COMPILE_SOURCE_WITH_DEVICE_LIBS_TO_BC action can\n   * be used as a workaround which ensures the link occurs correctly.\n   */\n  AMD_COMGR_ACTION_ADD_DEVICE_LIBRARIES = 0x3,\n  /**\n   * Link each bc data object in @p input together and add the linked\n   * bc data object to @p result. Any device library bc data object\n   * must be explicitly added to @p input if needed.\n   *\n   * Return @p AMD_COMGR_STATUS_ERROR if the link fails.\n   *\n   * Return @p AMD_COMGR_STATUS_ERROR_INVALID_ARGUMENT\n   * if isa name is not set in @p info and does not match the isa name\n   * of all bc data objects in @p input.\n   */\n  AMD_COMGR_ACTION_LINK_BC_TO_BC = 0x4,\n  /**\n   * Optimize each bc data object in @p input and create an optimized bc data\n   * object to @p result.\n   *\n   * Return @p AMD_COMGR_STATUS_ERROR if the optimization fails.\n   *\n   * Return @p AMD_COMGR_STATUS_ERROR_INVALID_ARGUMENT\n   * if isa name is not set in @p info and does not match the isa name\n   * of all bc data objects in @p input.\n   */\n  AMD_COMGR_ACTION_OPTIMIZE_BC_TO_BC = 0x5,\n  /**\n   * Perform code generation for each bc data object in @p input in\n   * order. For each successful code generation add a relocatable data\n   * object to @p result.\n   *\n   * Return @p AMD_COMGR_STATUS_ERROR if any code\n   * generation fails.\n   *\n   * Return @p AMD_COMGR_STATUS_ERROR_INVALID_ARGUMENT\n   * if isa name is not set in @p info and does not match the isa name\n   * of all bc data objects in @p input.\n   */\n  AMD_COMGR_ACTION_CODEGEN_BC_TO_RELOCATABLE = 0x6,\n  /**\n   * Perform code generation for each bc data object in @p input in\n   * order. For each successful code generation add an assembly source data\n   * object to @p result.\n   *\n   * Return @p AMD_COMGR_STATUS_ERROR if any code\n   * generation fails.\n   *\n   * Return @p AMD_COMGR_STATUS_ERROR_INVALID_ARGUMENT\n   * if isa name is not set in @p info and does not match the isa name\n   * of all bc data objects in @p input.\n   */\n  AMD_COMGR_ACTION_CODEGEN_BC_TO_ASSEMBLY = 0x7,\n  /**\n   * Link each relocatable data object in @p input together and add\n   * the linked relocatable data object to @p result. Any device\n   * library relocatable data object must be explicitly added to @p\n   * input if needed.\n   *\n   * Return @p AMD_COMGR_STATUS_ERROR if the link fails.\n   *\n   * Return @p AMD_COMGR_STATUS_ERROR_INVALID_ARGUMENT\n   * if isa name is not set in @p info and does not match the isa name\n   * of all relocatable data objects in @p input.\n   */\n  AMD_COMGR_ACTION_LINK_RELOCATABLE_TO_RELOCATABLE = 0x8,\n  /**\n   * Link each relocatable data object in @p input together and add\n   * the linked executable data object to @p result. Any device\n   * library relocatable data object must be explicitly added to @p\n   * input if needed.\n   *\n   * Return @p AMD_COMGR_STATUS_ERROR if the link fails.\n   *\n   * Return @p AMD_COMGR_STATUS_ERROR_INVALID_ARGUMENT\n   * if isa name is not set in @p info and does not match the isa name\n   * of all relocatable data objects in @p input.\n   */\n  AMD_COMGR_ACTION_LINK_RELOCATABLE_TO_EXECUTABLE = 0x9,\n  /**\n   * Assemble each source data object in @p input in order into machine code.\n   * For each successful assembly add a relocatable data object to @p result.\n   * Resolve any include source names using the names of include data objects in\n   * @p input. Resolve any include relative path names using the working\n   * directory path in @p info. Produce relocatable for isa name in @p info.\n   *\n   * Return @p AMD_COMGR_STATUS_ERROR if any assembly fails.\n   *\n   * Return @p AMD_COMGR_STATUS_ERROR_INVALID_ARGUMENT if isa name is not set in\n   * @p info.\n   */\n  AMD_COMGR_ACTION_ASSEMBLE_SOURCE_TO_RELOCATABLE = 0xA,\n  /**\n   * Disassemble each relocatable data object in @p input in\n   * order. For each successful disassembly add a source data object to\n   * @p result.\n   *\n   * Return @p AMD_COMGR_STATUS_ERROR if any disassembly\n   * fails.\n   *\n   * Return @p AMD_COMGR_STATUS_ERROR_INVALID_ARGUMENT\n   * if isa name is not set in @p info and does not match the isa name\n   * of all relocatable data objects in @p input.\n   */\n  AMD_COMGR_ACTION_DISASSEMBLE_RELOCATABLE_TO_SOURCE = 0xB,\n  /**\n   * Disassemble each executable data object in @p input in order. For\n   * each successful disassembly add a source data object to @p result.\n   *\n   * Return @p AMD_COMGR_STATUS_ERROR if any disassembly\n   * fails.\n   *\n   * Return @p AMD_COMGR_STATUS_ERROR_INVALID_ARGUMENT\n   * if isa name is not set in @p info and does not match the isa name\n   * of all relocatable data objects in @p input.\n   */\n  AMD_COMGR_ACTION_DISASSEMBLE_EXECUTABLE_TO_SOURCE = 0xC,\n  /**\n   * Disassemble each bytes data object in @p input in order. For each\n   * successful disassembly add a source data object to @p\n   * result. Only simple assembly language commands are generate that\n   * corresponf to raw bytes are supported, not any directives that\n   * control the code object layout, or symbolic branch targets or\n   * names.\n   *\n   * Return @p AMD_COMGR_STATUS_ERROR if any disassembly\n   * fails.\n   *\n   * Return @p AMD_COMGR_STATUS_ERROR_INVALID_ARGUMENT\n   * if isa name is not set in @p info\n   */\n  AMD_COMGR_ACTION_DISASSEMBLE_BYTES_TO_SOURCE = 0xD,\n  /**\n   * Compile each source data object in @p input in order. For each\n   * successful compilation add a fat binary to @p result. Resolve\n   * any include source names using the names of include data objects\n   * in @p input. Resolve any include relative path names using the\n   * working directory path in @p info. Produce fat binary for isa name in @p\n   * info. Compile the source for the language in @p info.\n   *\n   * Return @p AMD_COMGR_STATUS_ERROR if any compilation\n   * fails.\n   *\n   * Return @p AMD_COMGR_STATUS_ERROR_INVALID_ARGUMENT\n   * if isa name or language is not set in @p info.\n   */\n  AMD_COMGR_ACTION_COMPILE_SOURCE_TO_FATBIN = 0xE,\n  /**\n   * Compile each source data object in @p input in order. For each\n   * successful compilation add a bc data object to @p result. Resolve\n   * any include source names using the names of include data objects\n   * in @p input. Resolve any include relative path names using the\n   * working directory path in @p info. Produce bc for isa name in @p\n   * info. Compile the source for the language in @p info. Link against\n   * the device-specific and language-specific bitcode device libraries\n   * required for compilation.\n   *\n   * Return @p AMD_COMGR_STATUS_ERROR if any compilation\n   * fails.\n   *\n   * Return @p AMD_COMGR_STATUS_ERROR_INVALID_ARGUMENT\n   * if isa name or language is not set in @p info.\n   */\n  AMD_COMGR_ACTION_COMPILE_SOURCE_WITH_DEVICE_LIBS_TO_BC = 0xF,\n  /**\n   * Marker for last valid action kind.\n   */\n  AMD_COMGR_ACTION_LAST = AMD_COMGR_ACTION_COMPILE_SOURCE_WITH_DEVICE_LIBS_TO_BC\n} amd_comgr_action_kind_t;\n\n/**\n * @brief Perform an action.\n *\n * Each action ignores any data objects in @p input that it does not\n * use. If logging is enabled in @info then @p result will have a log\n * data object added. Any diagnostic data objects produced by the\n * action will be added to @p result. See the description of each\n * action in @p amd_comgr_action_kind_t.\n *\n * @param[in] kind The action to perform.\n *\n * @param[in] info The action info to use when performing the action.\n *\n * @param[in] input The input data objects to the @p kind action.\n *\n * @param[out] result Any data objects are removed before performing\n * the action which then adds all data objects produced by the action.\n *\n * @retval ::AMD_COMGR_STATUS_SUCCESS The function has\n * been executed successfully.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR An error was\n * reported when executing the action.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_INVALID_ARGUMENT @p\n * kind is an invalid action kind. @p input_data or @p result_data are\n * invalid action data object handles. See the description of each\n * action in @p amd_comgr_action_kind_t for other\n * conditions that result in this status.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_OUT_OF_RESOURCES\n * Unable to update the data object as out of resources.\n */\namd_comgr_status_t AMD_COMGR_API\namd_comgr_do_action(\n  amd_comgr_action_kind_t kind,\n  amd_comgr_action_info_t info,\n  amd_comgr_data_set_t input,\n  amd_comgr_data_set_t result) AMD_COMGR_VERSION_1_8;\n\n/**\n * @brief The kinds of metadata nodes.\n */\ntypedef enum amd_comgr_metadata_kind_s {\n  /**\n   * The NULL metadata handle.\n   */\n  AMD_COMGR_METADATA_KIND_NULL = 0x0,\n  /**\n   * A sting value.\n   */\n  AMD_COMGR_METADATA_KIND_STRING = 0x1,\n  /**\n   * A map that consists of a set of key and value pairs.\n   */\n  AMD_COMGR_METADATA_KIND_MAP = 0x2,\n  /**\n   * A list that consists of a sequence of values.\n   */\n  AMD_COMGR_METADATA_KIND_LIST = 0x3,\n  /**\n   * Marker for last valid metadata kind.\n   */\n  AMD_COMGR_METADATA_KIND_LAST = AMD_COMGR_METADATA_KIND_LIST\n} amd_comgr_metadata_kind_t;\n\n/**\n * @brief Get the kind of the metadata node.\n *\n * @param[in] metadata The metadata node to query.\n *\n * @param[out] kind The kind of the metadata node.\n *\n * @retval ::AMD_COMGR_STATUS_SUCCESS The function has\n * been executed successfully.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_INVALID_ARGUMENT @p\n * metadata is an invalid metadata node. @p kind is NULL.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_OUT_OF_RESOURCES\n * Unable to create the data object as out of resources.\n */\namd_comgr_status_t AMD_COMGR_API\namd_comgr_get_metadata_kind(\n  amd_comgr_metadata_node_t metadata,\n  amd_comgr_metadata_kind_t *kind) AMD_COMGR_VERSION_1_8;\n\n/**\n * @brief Get the string and/or string length from a metadata string\n * node.\n *\n * @param[in] metadata The metadata node to query.\n *\n * @param[in, out] size On entry, the size of @p string. On return, if @p\n * string is NULL, set to the size of the string including the terminating null\n * character.\n *\n * @param[out] string If not NULL, then the first @p size characters\n * of the string are copied. If NULL, no string is copied, and only @p\n * size is updated (useful in order to find the size of buffer required\n * to copy the string).\n *\n * @retval ::AMD_COMGR_STATUS_SUCCESS The function has\n * been executed successfully.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_INVALID_ARGUMENT @p\n * metadata is an invalid metadata node, or does not have kind @p\n * AMD_COMGR_METADATA_KIND_STRING. @p size is NULL.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_OUT_OF_RESOURCES\n * Unable to update the data object as out of resources.\n */\namd_comgr_status_t AMD_COMGR_API\namd_comgr_get_metadata_string(\n  amd_comgr_metadata_node_t metadata,\n  size_t *size,\n  char *string) AMD_COMGR_VERSION_1_8;\n\n/**\n * @brief Get the map size from a metadata map node.\n *\n * @param[in] metadata The metadata node to query.\n *\n * @param[out] size The number of entries in the map.\n *\n * @retval ::AMD_COMGR_STATUS_SUCCESS The function has\n * been executed successfully.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_INVALID_ARGUMENT @p\n * metadata is an invalid metadata node, or not of kind @p\n * AMD_COMGR_METADATA_KIND_MAP. @p size is NULL.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_OUT_OF_RESOURCES\n * Unable to update the data object as out of resources.\n */\namd_comgr_status_t AMD_COMGR_API\namd_comgr_get_metadata_map_size(\n  amd_comgr_metadata_node_t metadata,\n  size_t *size) AMD_COMGR_VERSION_1_8;\n\n/**\n * @brief Iterate over the elements a metadata map node.\n *\n * @warning The metadata nodes which are passed to the callback are not owned\n * by the callback, and are freed just after the callback returns. The callback\n * must not save any references to its parameters between iterations.\n *\n * @param[in] metadata The metadata node to query.\n *\n * @param[in] callback The function to call for each entry in the map. The\n * entry's key is passed in @p key, the entry's value is passed in @p value, and\n * @p user_data is passed as @p user_data. If the function returns with a status\n * other than @p AMD_COMGR_STATUS_SUCCESS then iteration is stopped.\n *\n * @param[in] user_data The value to pass to each invocation of @p\n * callback. Allows context to be passed into the call back function.\n *\n * @retval ::AMD_COMGR_STATUS_SUCCESS The function has\n * been executed successfully.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR An error was\n * reported by @p callback.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_INVALID_ARGUMENT @p\n * metadata is an invalid metadata node, or not of kind @p\n * AMD_COMGR_METADATA_KIND_MAP. @p callback is NULL.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_OUT_OF_RESOURCES\n * Unable to iterate the metadata as out of resources.\n */\namd_comgr_status_t AMD_COMGR_API\namd_comgr_iterate_map_metadata(\n  amd_comgr_metadata_node_t metadata,\n  amd_comgr_status_t (*callback)(\n    amd_comgr_metadata_node_t key,\n    amd_comgr_metadata_node_t value,\n    void *user_data),\n  void *user_data) AMD_COMGR_VERSION_1_8;\n\n/**\n * @brief Use a string key to lookup an element of a metadata map\n * node and return the entry value.\n *\n * @param[in] metadata The metadata node to query.\n *\n * @param[in] key A null terminated string that is the key to lookup.\n *\n * @param[out] value The metadata node of the @p key element of the\n * @p metadata map metadata node. The handle must be destroyed\n * using @c amd_comgr_destroy_metadata.\n *\n * @retval ::AMD_COMGR_STATUS_SUCCESS The function has\n * been executed successfully.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR The map has no entry\n * with a string key with the value @p key.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_INVALID_ARGUMENT @p\n * metadata is an invalid metadata node, or not of kind @p\n * AMD_COMGR_METADATA_KIND_MAP. @p key or @p value is\n * NULL.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_OUT_OF_RESOURCES\n * Unable to lookup metadata as out of resources.\n */\namd_comgr_status_t AMD_COMGR_API\namd_comgr_metadata_lookup(\n  amd_comgr_metadata_node_t metadata,\n  const char *key,\n  amd_comgr_metadata_node_t *value) AMD_COMGR_VERSION_1_8;\n\n/**\n * @brief Get the list size from a metadata list node.\n *\n * @param[in] metadata The metadata node to query.\n *\n * @param[out] size The number of entries in the list.\n *\n * @retval ::AMD_COMGR_STATUS_SUCCESS The function has\n * been executed successfully.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_INVALID_ARGUMENT @p\n * metadata is an invalid metadata node, or does nopt have kind @p\n * AMD_COMGR_METADATA_KIND_LIST. @p size is NULL.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_OUT_OF_RESOURCES\n * Unable to update the data object as out of resources.\n */\namd_comgr_status_t AMD_COMGR_API\namd_comgr_get_metadata_list_size(\n  amd_comgr_metadata_node_t metadata,\n  size_t *size) AMD_COMGR_VERSION_1_8;\n\n/**\n * @brief Return the Nth metadata node of a list metadata node.\n *\n * @param[in] metadata The metadata node to query.\n *\n * @param[in] index The index being requested. The first list element\n * is index 0.\n *\n * @param[out] value The metadata node of the @p index element of the\n * @p metadata list metadata node. The handle must be destroyed\n * using @c amd_comgr_destroy_metadata.\n *\n * @retval ::AMD_COMGR_STATUS_SUCCESS The function has\n * been executed successfully.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_INVALID_ARGUMENT @p\n * metadata is an invalid metadata node or not of kind @p\n * AMD_COMGR_METADATA_INFO_LIST. @p index is greater\n * than the number of list elements. @p value is NULL.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_OUT_OF_RESOURCES\n * Unable to update action data object as out of resources.\n */\namd_comgr_status_t AMD_COMGR_API\namd_comgr_index_list_metadata(\n  amd_comgr_metadata_node_t metadata,\n  size_t index,\n  amd_comgr_metadata_node_t *value) AMD_COMGR_VERSION_1_8;\n\n/**\n * @brief Iterate over the symbols of a machine code object.\n *\n * For a AMD_COMGR_DATA_KIND_RELOCATABLE the symbols in the ELF symtab section\n * are iterated. For a AMD_COMGR_DATA_KIND_EXECUTABLE the symbols in the ELF\n * dynsymtab are iterated.\n *\n * @param[in] data The data object to query.\n *\n * @param[in] callback The function to call for each symbol in the machine code\n * data object. The symbol handle is passed in @p symbol and @p user_data is\n * passed as @p user_data. If the function returns with a status other than @p\n * AMD_COMGR_STATUS_SUCCESS then iteration is stopped.\n *\n * @param[in] user_data The value to pass to each invocation of @p\n * callback. Allows context to be passed into the call back function.\n *\n * @retval ::AMD_COMGR_STATUS_SUCCESS The function has\n * been executed successfully.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR An error was\n * reported by @p callback.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_INVALID_ARGUMENT @p data is an invalid data\n * object, or not of kind @p AMD_COMGR_DATA_KIND_RELOCATABLE or\n * AMD_COMGR_DATA_KIND_EXECUTABLE. @p callback is NULL.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_OUT_OF_RESOURCES\n * Unable to iterate the data object as out of resources.\n */\namd_comgr_status_t AMD_COMGR_API\namd_comgr_iterate_symbols(\n  amd_comgr_data_t data,\n  amd_comgr_status_t (*callback)(\n    amd_comgr_symbol_t symbol,\n    void *user_data),\n  void *user_data) AMD_COMGR_VERSION_1_8;\n\n/**\n * @brief Lookup a symbol in a machine code object by name.\n *\n * For a AMD_COMGR_DATA_KIND_RELOCATABLE the symbols in the ELF symtab section\n * are inspected. For a AMD_COMGR_DATA_KIND_EXECUTABLE the symbols in the ELF\n * dynsymtab are inspected.\n *\n * @param[in] data The data object to query.\n *\n * @param[in] name A null terminated string that is the symbol name to lookup.\n *\n * @param[out] symbol The symbol with the @p name.\n *\n * @retval ::AMD_COMGR_STATUS_SUCCESS The function has\n * been executed successfully.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR The machine code object has no symbol\n * with @p name.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_INVALID_ARGUMENT @p data is an invalid data\n * object, or not of kind @p AMD_COMGR_DATA_KIND_RELOCATABLE or\n * AMD_COMGR_DATA_KIND_EXECUTABLE.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_OUT_OF_RESOURCES\n * Unable to lookup symbol as out of resources.\n */\namd_comgr_status_t AMD_COMGR_API\namd_comgr_symbol_lookup(\n  amd_comgr_data_t data,\n  const char *name,\n  amd_comgr_symbol_t *symbol) AMD_COMGR_VERSION_1_8;\n\n/**\n * @brief Machine code object symbol type.\n */\ntypedef enum amd_comgr_symbol_type_s {\n  /**\n   * The symbol's type is unknown.\n   *\n   * The user should not infer any specific type for symbols which return\n   * `AMD_COMGR_SYMBOL_TYPE_UNKNOWN`, and these symbols may return different\n   * types in future releases.\n  */\n  AMD_COMGR_SYMBOL_TYPE_UNKNOWN = -0x1,\n\n  /**\n   * The symbol's type is not specified.\n  */\n  AMD_COMGR_SYMBOL_TYPE_NOTYPE = 0x0,\n\n  /**\n   * The symbol is associated with a data object, such as a variable, an array,\n   * and so on.\n  */\n  AMD_COMGR_SYMBOL_TYPE_OBJECT = 0x1,\n\n  /**\n   * The symbol is associated with a function or other executable code.\n  */\n  AMD_COMGR_SYMBOL_TYPE_FUNC = 0x2,\n\n  /**\n   * The symbol is associated with a section. Symbol table entries of this type\n   * exist primarily for relocation.\n  */\n  AMD_COMGR_SYMBOL_TYPE_SECTION = 0x3,\n\n  /**\n   * Conventionally, the symbol's name gives the name of the source file\n   * associated with the object file.\n  */\n  AMD_COMGR_SYMBOL_TYPE_FILE = 0x4,\n\n  /**\n   * The symbol labels an uninitialized common block.\n  */\n  AMD_COMGR_SYMBOL_TYPE_COMMON = 0x5,\n\n  /**\n   * The symbol is associated with an AMDGPU Code Object V2 kernel function.\n  */\n  AMD_COMGR_SYMBOL_TYPE_AMDGPU_HSA_KERNEL = 0xa\n} amd_comgr_symbol_type_t;\n\n/**\n * @brief Machine code object symbol attributes.\n */\ntypedef enum amd_comgr_symbol_info_s {\n  /**\n   * The length of the symbol name in bytes. Does not include the NUL\n   * terminator. The type of this attribute is uint64_t.\n  */\n  AMD_COMGR_SYMBOL_INFO_NAME_LENGTH = 0x0,\n\n  /**\n   * The name of the symbol. The type of this attribute is character array with\n   * the length equal to the value of the @p AMD_COMGR_SYMBOL_INFO_NAME_LENGTH\n   * attribute plus 1 for a NUL terminator.\n  */\n  AMD_COMGR_SYMBOL_INFO_NAME = 0x1,\n\n  /**\n   * The kind of the symbol. The type of this attribute is @p\n   * amd_comgr_symbol_type_t.\n   */\n  AMD_COMGR_SYMBOL_INFO_TYPE = 0x2,\n\n  /**\n   * Size of the variable. The value of this attribute is undefined if the\n   * symbol is not a variable. The type of this attribute is uint64_t.\n   */\n  AMD_COMGR_SYMBOL_INFO_SIZE = 0x3,\n\n  /**\n   * Indicates whether the symbol is undefined. The type of this attribute is\n   * bool.\n   */\n  AMD_COMGR_SYMBOL_INFO_IS_UNDEFINED = 0x4,\n\n  /**\n   * The value of the symbol. The type of this attribute is uint64_t.\n   */\n  AMD_COMGR_SYMBOL_INFO_VALUE = 0x5,\n\n  /**\n   * Marker for last valid symbol info.\n   */\n  AMD_COMGR_SYMBOL_INFO_LAST = AMD_COMGR_SYMBOL_INFO_VALUE\n} amd_comgr_symbol_info_t;\n\n/**\n * @brief Query information about a machine code object symbol.\n *\n * @param[in] symbol The symbol to query.\n *\n * @param[in] attribute Attribute to query.\n *\n * @param[out] value Pointer to an application-allocated buffer where to store\n * the value of the attribute. If the buffer passed by the application is not\n * large enough to hold the value of attribute, the behavior is undefined. The\n * type of value returned is specified by @p amd_comgr_symbol_info_t.\n *\n * @retval ::AMD_COMGR_STATUS_SUCCESS The function has\n * been executed successfully.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR The @p symbol does not have the requested @p\n * attribute.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_INVALID_ARGUMENT @p symbol is an invalid\n * symbol. @p attribute is an invalid value. @p value is NULL.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_OUT_OF_RESOURCES\n * Unable to query symbol as out of resources.\n */\namd_comgr_status_t AMD_COMGR_API\namd_comgr_symbol_get_info(\n  amd_comgr_symbol_t symbol,\n  amd_comgr_symbol_info_t attribute,\n  void *value) AMD_COMGR_VERSION_1_8;\n\n/**\n * @brief Create a disassembly info object.\n *\n * @param[in] isa_name A null terminated string that is the isa name of the\n * target to disassemble for. The isa name is defined as the Code Object Target\n * Identification string, described at\n * https://llvm.org/docs/AMDGPUUsage.html#code-object-target-identification\n *\n * @param[in] read_memory_callback Function called to request @p size bytes\n * from the program address space at @p from be read into @p to. The requested\n * @p size is never zero. Returns the number of bytes which could be read, with\n * the guarantee that no additional bytes will be available in any subsequent\n * call.\n *\n * @param[in] print_instruction_callback Function called after a successful\n * disassembly. @p instruction is a null terminated string containing the\n * disassembled instruction. The callback does not own @p instruction, and it\n * cannot be referenced once the callback returns.\n *\n * @param[in] print_address_annotation_callback Function called after @c\n * print_instruction_callback returns, once for each instruction operand which\n * was resolved to an absolute address. @p address is the absolute address in\n * the program address space. It is intended to append a symbolic\n * form of the address, perhaps as a comment, after the instruction disassembly\n * produced by @c print_instruction_callback.\n *\n * @param[out] disassembly_info A handle to the disassembly info object\n * created.\n *\n * @retval ::AMD_COMGR_STATUS_SUCCESS The disassembly info object was created.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_INVALID_ARGUMENT @p isa_name is NULL or\n * invalid; or @p read_memory_callback, @p print_instruction_callback,\n * or @p print_address_annotation_callback is NULL.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_OUT_OF_RESOURCES Unable to create the\n * disassembly info object as out of resources.\n */\namd_comgr_status_t AMD_COMGR_API\namd_comgr_create_disassembly_info(\n  const char *isa_name,\n  uint64_t (*read_memory_callback)(\n    uint64_t from,\n    char *to,\n    uint64_t size,\n    void *user_data),\n  void (*print_instruction_callback)(\n    const char *instruction,\n    void *user_data),\n  void (*print_address_annotation_callback)(\n    uint64_t address,\n    void *user_data),\n  amd_comgr_disassembly_info_t *disassembly_info) AMD_COMGR_VERSION_1_8;\n\n/**\n * @brief Destroy a disassembly info object.\n *\n * @param[in] disassembly_info A handle to the disassembly info object to\n * destroy.\n *\n * @retval ::AMD_COMGR_STATUS_SUCCESS The disassembly info object was\n * destroyed.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_INVALID_ARGUMENT @p disassembly_info is an\n * invalid disassembly info object.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_OUT_OF_RESOURCES Unable to destroy the\n * disassembly info object as out of resources.\n */\namd_comgr_status_t AMD_COMGR_API\namd_comgr_destroy_disassembly_info(\n  amd_comgr_disassembly_info_t disassembly_info) AMD_COMGR_VERSION_1_8;\n\n/**\n * @brief Disassemble a single instruction.\n *\n * @param[in] address The address of the first byte of the instruction in the\n * program address space.\n *\n * @param[in] user_data Arbitrary user-data passed to each callback function\n * during disassembly.\n *\n * @param[out] size The number of bytes consumed to decode the\n * instruction, or consumed while failing to decode an invalid instruction.\n *\n * @retval ::AMD_COMGR_STATUS_SUCCESS The disassembly was successful.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR The disassembly failed.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_INVALID_ARGUMENT @p disassembly_info is\n * invalid or @p size is NULL.\n *\n * @retval ::AMD_COMGR_STATUS_ERROR_OUT_OF_RESOURCES Unable to disassemble the\n * instruction as out of resources.\n */\namd_comgr_status_t AMD_COMGR_API\namd_comgr_disassemble_instruction(\n  amd_comgr_disassembly_info_t disassembly_info,\n  uint64_t address,\n  void *user_data,\n  uint64_t *size) AMD_COMGR_VERSION_1_8;\n\n/** @} */\n\n#ifdef __cplusplus\n}  /* end extern \"C\" block */\n#endif\n\n#endif  /* header guard */\n"
    },
    "skipped": [],
    "total_files": 83
}