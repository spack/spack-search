{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-sblim-sfcc-2_2_8-cf2oacw6sg4s522cife7rtu274mufe2a/spack-src/cimc/cimcclient.c": "\n/*\n * $Id: cimcclient.c,v 1.5 2008/12/15 23:54:25 mchasal Exp $\n *\n * \u00a9 Copyright IBM Corp. 2007\n *\n * THIS FILE IS PROVIDED UNDER THE TERMS OF THE ECLIPSE PUBLIC LICENSE\n * (\"AGREEMENT\"). ANY USE, REPRODUCTION OR DISTRIBUTION OF THIS FILE\n * CONSTITUTES RECIPIENTS ACCEPTANCE OF THE AGREEMENT.\n *\n * You can obtain a current copy of the Eclipse Public License from\n * http://www.opensource.org/licenses/eclipse-1.0.php\n *\n * Author:        Viktor Mihajlovski <mihajlov@de.ibm.com>\n *\n * Description:\n *\n * CIM C Client Loader Implementation\n *\n */\n\n#include \"cimc.h\"\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <dlfcn.h>\n#include <string.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n\n/*\n * Canonical CIM C API entry points\n */\n\n#define LIBLEN 512\n#define ENTLEN 256\n#define ERRLEN 1024\n\n/* Create new CIMCEnv\n\n   id - the interface to use, either XML or SfcbLocal\n   options - options passed to the given backend (ops in cimc.h)\n\n   todo: for the next interface revamp, passing in a version number \n         would be a good idea, so we could allow for dlopening different\n         versions of .so libs\n\n */\nCIMCEnv* NewCIMCEnv(const char *id, unsigned int options, int *rc, char **msg)\n{\n   char         libName[LIBLEN+1];\n   char         entry[ENTLEN+1];\n   void        *library; \n   InitCimcEnv  init=NULL;\n   CIMCEnv     *rv=NULL;\n   struct      stat sbuf;\n   \n    libName[LIBLEN]=0;\n    entry[ENTLEN]=0;\n\n    if ((strcmp(id, \"XML\") != 0) && (strcmp(id, \"SfcbLocal\") != 0)) {\n        *msg=calloc(1,ERRLEN+1);\n        *rc=3;\n        snprintf(*msg,ERRLEN,\"Invalid connection type '%s'. Must be 'XML' or 'SfcbLocal'.\",id);\n    } else {\n        if ((strcmp(id, \"SfcbLocal\") == 0) && \n\t    (stat(SFCB_LIBDIR, &sbuf) == 0)) {\n            snprintf(libName, LIBLEN, \"%s/libcimcClient%s.so.0\",SFCB_LIBDIR,id);\n        } else {\n            snprintf(libName, LIBLEN, \"libcimcClient%s.so.0\",id);\n        }\n        library = dlopen(libName, RTLD_NOW);\n        if (library==NULL) {\n            *msg=calloc(1,ERRLEN+1);\n            *rc=1;\n            snprintf(*msg,ERRLEN,\"Unable to load %s library %s\",libName,dlerror());\n        } else {\n            snprintf(entry, ENTLEN,\"_Create_%s_Env\", id);\n            init = (InitCimcEnv)dlsym(library, entry);\n            if (init==NULL) {\n                *msg=calloc(1,ERRLEN+1);\n                *rc=2;\n                snprintf(*msg,ERRLEN,\"Unable to locate entry %s in %s\",entry,libName);\n                dlclose(library);\n            } else {\n                *rc=0;\n                *msg=NULL;\n                rv = init(id,options,rc,msg); \n                rv->hdl=library;\n            }\n        }\n    }\n      \n    return rv;\n}\n\nvoid ReleaseCIMCEnv(CIMCEnv *env)\n{\n   void *lib=NULL;\n   if (env) {\n     lib = env->hdl;\n     void* check = env->ft->release(env);\n     if (lib) {\n       dlclose(lib);\n     }\n\n     /* if check is for compatability:\n        SFCB pre-1.4.6 free'd the env during release() and returned lib pointer */\n     if (!check) {\n       free(env);\n     }\n   }\n}\n"
    },
    "skipped": [],
    "total_files": 165
}