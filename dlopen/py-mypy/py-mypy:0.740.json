{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-py-mypy-0.740-iudwi47zomzth3awub3s3gewymtjlzcd/spack-src/mypy/typeshed/stdlib/3/sys.pyi": "# Stubs for sys\n# Ron Murawski <ron@horizonchess.com>\n\n# based on http://docs.python.org/3.2/library/sys.html\n\nfrom typing import (\n    List, NoReturn, Sequence, Any, Dict, Tuple, TextIO, overload, Optional,\n    Union, TypeVar, Callable, Type\n)\nimport sys\nfrom types import FrameType, ModuleType, TracebackType\n\nfrom importlib.abc import MetaPathFinder\n\n_T = TypeVar('_T')\n\n# The following type alias are stub-only and do not exist during runtime\n_ExcInfo = Tuple[Type[BaseException], BaseException, TracebackType]\n_OptExcInfo = Union[_ExcInfo, Tuple[None, None, None]]\n\n# ----- sys variables -----\nabiflags: str\nargv: List[str]\nbase_exec_prefix: str\nbase_prefix: str\nbyteorder: str\nbuiltin_module_names: Sequence[str]  # actually a tuple of strings\ncopyright: str\n# dllhandle = 0  # Windows only\ndont_write_bytecode: bool\n__displayhook__: Any  # contains the original value of displayhook\n__excepthook__: Any  # contains the original value of excepthook\nexec_prefix: str\nexecutable: str\nfloat_repr_style: str\nhexversion: int\nlast_type: Optional[Type[BaseException]]\nlast_value: Optional[BaseException]\nlast_traceback: Optional[TracebackType]\nmaxsize: int\nmaxunicode: int\nmeta_path: List[MetaPathFinder]\nmodules: Dict[str, ModuleType]\npath: List[str]\npath_hooks: List[Any]  # TODO precise type; function, path to finder\npath_importer_cache: Dict[str, Any]  # TODO precise type\nplatform: str\nprefix: str\nps1: str\nps2: str\nstdin: TextIO\nstdout: TextIO\nstderr: TextIO\n__stdin__: TextIO\n__stdout__: TextIO\n__stderr__: TextIO\n# deprecated and removed in Python 3.3:\nsubversion: Tuple[str, str, str]\ntracebacklimit: int\nversion: str\napi_version: int\nwarnoptions: Any\n#  Each entry is a tuple of the form (action, message, category, module,\n#    lineno)\n# winver = ''  # Windows only\n_xoptions: Dict[Any, Any]\n\n\nflags: _flags\nclass _flags:\n    debug: int\n    division_warning: int\n    inspect: int\n    interactive: int\n    optimize: int\n    dont_write_bytecode: int\n    no_user_site: int\n    no_site: int\n    ignore_environment: int\n    verbose: int\n    bytes_warning: int\n    quiet: int\n    hash_randomization: int\n    if sys.version_info >= (3, 7):\n        dev_mode: int\n        utf8_mode: int\n\nfloat_info: _float_info\nclass _float_info:\n    epsilon: float   # DBL_EPSILON\n    dig: int         # DBL_DIG\n    mant_dig: int    # DBL_MANT_DIG\n    max: float       # DBL_MAX\n    max_exp: int     # DBL_MAX_EXP\n    max_10_exp: int  # DBL_MAX_10_EXP\n    min: float       # DBL_MIN\n    min_exp: int     # DBL_MIN_EXP\n    min_10_exp: int  # DBL_MIN_10_EXP\n    radix: int       # FLT_RADIX\n    rounds: int      # FLT_ROUNDS\n\nhash_info: _hash_info\nclass _hash_info:\n    width: int\n    modulus: int\n    inf: int\n    nan: int\n    imag: int\n\nimplementation: _implementation\nclass _implementation:\n    name: str\n    version: _version_info\n    hexversion: int\n    cache_tag: str\n\nint_info: _int_info\nclass _int_info:\n    bits_per_digit: int\n    sizeof_digit: int\n\nclass _version_info(Tuple[int, int, int, str, int]):\n    major: int\n    minor: int\n    micro: int\n    releaselevel: str\n    serial: int\nversion_info: _version_info\n\ndef call_tracing(fn: Callable[..., _T], args: Any) -> _T: ...\ndef _clear_type_cache() -> None: ...\ndef _current_frames() -> Dict[int, Any]: ...\ndef displayhook(value: Optional[int]) -> None: ...\ndef excepthook(type_: Type[BaseException], value: BaseException,\n               traceback: TracebackType) -> None: ...\ndef exc_info() -> _OptExcInfo: ...\n# sys.exit() accepts an optional argument of anything printable\ndef exit(arg: object = ...) -> NoReturn:\n    raise SystemExit()\ndef getcheckinterval() -> int: ...  # deprecated\ndef getdefaultencoding() -> str: ...\nif sys.platform != 'win32':\n    # Unix only\n    def getdlopenflags() -> int: ...\ndef getfilesystemencoding() -> str: ...\ndef getrefcount(arg: Any) -> int: ...\ndef getrecursionlimit() -> int: ...\n\n@overload\ndef getsizeof(obj: object) -> int: ...\n@overload\ndef getsizeof(obj: object, default: int) -> int: ...\n\ndef getswitchinterval() -> float: ...\n\n@overload\ndef _getframe() -> FrameType: ...\n@overload\ndef _getframe(depth: int) -> FrameType: ...\n\n_ProfileFunc = Callable[[FrameType, str, Any], Any]\ndef getprofile() -> Optional[_ProfileFunc]: ...\ndef setprofile(profilefunc: Optional[_ProfileFunc]) -> None: ...\n\n_TraceFunc = Callable[[FrameType, str, Any], Optional[Callable[[FrameType, str, Any], Any]]]\ndef gettrace() -> Optional[_TraceFunc]: ...\ndef settrace(tracefunc: Optional[_TraceFunc]) -> None: ...\n\n\nclass _WinVersion(Tuple[int, int, int, int,\n                        str, int, int, int, int,\n                        Tuple[int, int, int]]):\n    major: int\n    minor: int\n    build: int\n    platform: int\n    service_pack: str\n    service_pack_minor: int\n    service_pack_major: int\n    suite_mast: int\n    product_type: int\n    platform_version: Tuple[int, int, int]\n\n\ndef getwindowsversion() -> _WinVersion: ...  # Windows only\n\ndef intern(string: str) -> str: ...\n\ndef is_finalizing() -> bool: ...\n\nif sys.version_info >= (3, 7):\n    __breakpointhook__: Any  # contains the original value of breakpointhook\n    def breakpointhook(*args: Any, **kwargs: Any) -> Any: ...\n\ndef setcheckinterval(interval: int) -> None: ...  # deprecated\ndef setdlopenflags(n: int) -> None: ...  # Linux only\ndef setrecursionlimit(limit: int) -> None: ...\ndef setswitchinterval(interval: float) -> None: ...\ndef settscdump(on_flag: bool) -> None: ...\n\ndef gettotalrefcount() -> int: ...  # Debug builds only\n",
        "/tmp/vanessa/spack-stage/spack-stage-py-mypy-0.740-iudwi47zomzth3awub3s3gewymtjlzcd/spack-src/mypy/typeshed/stdlib/2/sys.pyi": "\"\"\"Stubs for the 'sys' module.\"\"\"\n\nfrom typing import (\n    IO, NoReturn, Union, List, Sequence, Any, Dict, Tuple, BinaryIO, Optional,\n    Callable, overload, Text, Type,\n)\nfrom types import FrameType, ModuleType, TracebackType, ClassType\n\n# The following type alias are stub-only and do not exist during runtime\n_ExcInfo = Tuple[Type[BaseException], BaseException, TracebackType]\n_OptExcInfo = Union[_ExcInfo, Tuple[None, None, None]]\n\nclass _flags:\n    bytes_warning: int\n    debug: int\n    division_new: int\n    division_warning: int\n    dont_write_bytecode: int\n    hash_randomization: int\n    ignore_environment: int\n    inspect: int\n    interactive: int\n    no_site: int\n    no_user_site: int\n    optimize: int\n    py3k_warning: int\n    tabcheck: int\n    unicode: int\n    verbose: int\n\nclass _float_info:\n    max: float\n    max_exp: int\n    max_10_exp: int\n    min: float\n    min_exp: int\n    min_10_exp: int\n    dig: int\n    mant_dig: int\n    epsilon: float\n    radix: int\n    rounds: int\n\nclass _version_info(Tuple[int, int, int, str, int]):\n    major = 0\n    minor = 0\n    micro = 0\n    releaselevel: str\n    serial = 0\n\n_mercurial: Tuple[str, str, str]\napi_version: int\nargv: List[str]\nbuiltin_module_names: Tuple[str, ...]\nbyteorder: str\ncopyright: str\ndont_write_bytecode: bool\nexec_prefix: str\nexecutable: str\nflags: _flags\nfloat_repr_style: str\nhexversion: int\nlong_info: object\nmaxint: int\nmaxsize: int\nmaxunicode: int\nmodules: Dict[str, Any]\npath: List[str]\nplatform: str\nprefix: str\npy3kwarning: bool\n__stderr__: IO[str]\n__stdin__: IO[str]\n__stdout__: IO[str]\nstderr: IO[str]\nstdin: IO[str]\nstdout: IO[str]\nsubversion: Tuple[str, str, str]\nversion: str\nwarnoptions: object\nfloat_info: _float_info\nversion_info: _version_info\nps1: str\nps2: str\nlast_type: type\nlast_value: BaseException\nlast_traceback: TracebackType\n# TODO precise types\nmeta_path: List[Any]\npath_hooks: List[Any]\npath_importer_cache: Dict[str, Any]\ndisplayhook: Optional[Callable[[int], None]]\nexcepthook: Optional[Callable[[type, BaseException, TracebackType], None]]\nexc_type: Optional[type]\nexc_value: Union[BaseException, ClassType]\nexc_traceback: TracebackType\n\nclass _WindowsVersionType:\n    major: Any\n    minor: Any\n    build: Any\n    platform: Any\n    service_pack: Any\n    service_pack_major: Any\n    service_pack_minor: Any\n    suite_mask: Any\n    product_type: Any\n\ndef getwindowsversion() -> _WindowsVersionType: ...\n\ndef _clear_type_cache() -> None: ...\ndef _current_frames() -> Dict[int, FrameType]: ...\ndef _getframe(depth: int = ...) -> FrameType: ...\ndef call_tracing(fn: Any, args: Any) -> Any: ...\ndef __displayhook__(value: int) -> None: ...\ndef __excepthook__(type_: type, value: BaseException, traceback: TracebackType) -> None: ...\ndef exc_clear() -> None:\n    raise DeprecationWarning()\ndef exc_info() -> _OptExcInfo: ...\n\n# sys.exit() accepts an optional argument of anything printable\ndef exit(arg: Any = ...) -> NoReturn:\n    raise SystemExit()\ndef getcheckinterval() -> int: ...  # deprecated\ndef getdefaultencoding() -> str: ...\ndef getdlopenflags() -> int: ...\ndef getfilesystemencoding() -> str: ...  # In practice, never returns None\ndef getrefcount(arg: Any) -> int: ...\ndef getrecursionlimit() -> int: ...\ndef getsizeof(obj: object, default: int = ...) -> int: ...\ndef getprofile() -> Optional[Any]: ...\ndef gettrace() -> Optional[Any]: ...\ndef setcheckinterval(interval: int) -> None: ...  # deprecated\ndef setdlopenflags(n: int) -> None: ...\ndef setdefaultencoding(encoding: Text) -> None: ...  # only exists after reload(sys)\ndef setprofile(profilefunc: Any) -> None: ...  # TODO type\ndef setrecursionlimit(limit: int) -> None: ...\ndef settrace(tracefunc: Any) -> None: ...  # TODO type\n"
    },
    "skipped": [],
    "total_files": 1601
}