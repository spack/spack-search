{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-simgrid-3.13-idrdxfym5rrhhfpov6powknjpxl4hy2e/spack-src/tools/simgrid.supp": "# Valgrind suppressions for stuff that we cannot control\n\n# Memory leaks in standard tools (e.g. dash, tail, or sort)\n{\n   Memory leak in /bin tools\n   Memcheck:Leak\n   ...\n   obj:/bin/*\n}\n\n{\n   Memory leak in /usr/bin tools\n   Memcheck:Leak\n   ...\n   obj:/usr/bin/*\n}\n\n# There's a constant leak of 56 bytes in the depths of libc which\n# manifests, for example, when using backtrace()\n{\n   Memory leak in libc/dlopen with -pthread\n   Memcheck:Leak\n   fun:malloc\n   fun:_dl_map_object_deps\n   fun:dl_open_worker\n   fun:_dl_catch_error\n   fun:_dl_open\n   fun:do_dlopen\n   fun:_dl_catch_error\n   fun:dlerror_run\n   fun:__libc_dlopen_mode\n}\n\n# Another problem in glibc, where makecontext does not reset the EBP register,\n# and backtrace goes too far when walking up the stack frames\n{\n   Invalid read in backtrace, called after makecontext\n   Memcheck:Addr4\n   fun:backtrace\n   ...\n   fun:makecontext\n}\n\n#There seems to be an issue with libc using an uninitialized value somewhere in dlopen\n{\n   Invalid read in dl_start\n   Memcheck:Cond\n   fun:index\n   fun:expand_dynamic_string_token\n   ...\n   fun:_dl_start\n}\n\n# 72704 bytes leak from GCC >5.1 https://gcc.gnu.org/bugzilla/show_bug.cgi?id=64535\n{\n   Memory leak in dl_init\n   Memcheck:Leak\n   match-leak-kinds:reachable\n   fun:malloc\n   obj:/usr/lib/*/libstdc++.so.*\n   fun:call_init.part.0\n   ...\n   fun:_dl_init\n}\n\n# SG3.13 : We will remove NetCards soon, so ignore these ones \n{\n   Memory leak in Netcards\n   Memcheck:Leak\n   match-leak-kinds: definite\n   ...\n   fun:sg_platf_new_router\n   fun:STag_surfxml_router\n   fun:surf_parse_lex\n   ...\n   fun:parse_platform_file\n   fun:SIMIX_create_environment\n   fun:smpi_main\n   fun:main\n}\n\n{\n   Memory leak in Netcards\n   Memcheck:Leak\n   match-leak-kinds: indirect\n   fun:malloc\n   fun:strdup\n   fun:xbt_strdup\n   ...\n   fun:sg_platf_new_router\n   fun:STag_surfxml_router\n   fun:surf_parse_lex\n   ...\n   fun:parse_platform_file\n   fun:SIMIX_create_environment\n   fun:smpi_main\n   fun:main\n}\n\n#Ignore leaks in SMPI sample codes\n{\n   Leaks in SMPI sample codes\n   Memcheck:Leak\n   match-leak-kinds: all\n   fun:malloc\n   fun:smpi_simulated_main_\n}\n\n# Memory leaks appearing to be in libcgraph.  They can be seen with the\n# following simple program:\n# ,----\n# | #include <stdio.h>\n# | #include <graphviz/cgraph.h>\n# | int main(int argc, char *argv[])\n# | {\n# |     if (argc == 1) {\n# |         printf(\"Usage: %s <dotfile>\\n\", argv[0]);\n# |         return 1;\n# |     }\n# |     Agraph_t *g;\n# |     FILE *inf = fopen(argv[1], \"r\");\n# |     g = agread(inf, 0);\n# |     fclose(inf);\n# |     agclose(g);\n# |     return 0;\n# | }\n# `----\n{\n   Memory leak in libcgraph (1/2)\n   Memcheck:Leak\n   fun:malloc\n   ...\n   obj:/usr/lib/libcgraph.so*\n   fun:aaglex\n   fun:aagparse\n   fun:agconcat\n}\n{\n   Memory leak in libcgraph (2/2)\n   Memcheck:Leak\n   fun:malloc\n   ...\n   fun:agnode\n   obj:/usr/lib/libcgraph.so*\n   fun:aagparse\n   fun:agconcat\n}\n\n# We're not interested by memory leaks in the Lua interpreter\n{\n   Memory leak in lua\n   Memcheck:Leak\n   ...\n   fun:luaD_precall\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-simgrid-3.13-idrdxfym5rrhhfpov6powknjpxl4hy2e/spack-src/doc/doxygen/FAQ.doc": "/*! \\page FAQ Frequently Asked Questions\n\n@tableofcontents\n\n\\section faq_simgrid I'm new to SimGrid. I have some questions. Where should I start?\n\nYou are at the right  place... Having a look to these\n<a href=\"http://www.loria.fr/~quinson/blog/2010/06/28/Tutorial_at_HPCS/\">the slides of the HPCS'10 tutorial</a>\n(or to these <a href=\"http://graal.ens-lyon.fr/~alegrand/articles/slides_g5k_simul.pdf\">ancient\nslides</a>, or to these\n<a href=\"http://graal.ens-lyon.fr/~alegrand/articles/Simgrid-Introduction.pdf\">\"obsolete\" slides</a>)\nmay give you some insights on what SimGrid can help you to do and what\nare its limitations. Then you definitely should read the \\ref\nMSG_examples. \n\nIf you are stuck at any point and if this FAQ cannot help you, please drop us a\nmail to the user mailing list: <simgrid-user@lists.gforge.inria.fr>.\n\n\\subsection faq_interfaces What is the difference between MSG and SimDag? Do they serve the same purpose?\n\nIt depend on how you define \"purpose\", I guess ;)\n\nThey all allow you to build a prototype of application which you can run\nwithin the simulator afterward. They all share the same simulation kernel,\nwhich is the core of the SimGrid project. They differ by the way you express\nyour application.\n\nWith SimDag, you express your code as a collection of interdependent\nparallel tasks. So, in this model, applications can be seen as a DAG of\ntasks. This is the interface of choice for people wanting to port old\ncode designed for SimGrid v1 or v2 to the framework current version.\n\nWith MSG, your application is seen as a set of communicating\nprocesses, exchanging data by the way of messages and performing\ncomputation on their own.\n\n\\subsection faq_visualization Visualizing and analyzing the results\n\nIt is sometime convenient to \"see\" how the agents are behaving. If you\nlike colors, you can use <tt>tools/MSG_visualization/colorize.pl </tt>\nas a filter to your MSG outputs. It works directly with INFO. Beware,\nINFO() prints on stderr. Do not forget to redirect if you want to\nfilter (e.g. with bash):\n\\verbatim\n./msg_test small_platform.xml small_deployment.xml 2>&1 | ../../tools/MSG_visualization/colorize.pl\n\\endverbatim\n\nWe also have a more graphical output. Have a look at section \\ref options_tracing.\n\n\\subsection faq_C Argh! Do I really have to code in C?\n\nWe provide Java bindings of the MSG interface, which is the main\nSimGrid user API.\n\nMoreover If you use C++, you should be able to use the SimGrid library\nas a standard C library and everything should work fine (simply\n<i>link</i> against this library; recompiling SimGrid with a C++\ncompiler won't work and it wouldn't help if you could).\n\nFor now, we do not feel a real demand for any other language. But if\nyou think there is one, please speak up!\n\n\\section faq_howto Feature related questions\n\n\\subsection faq_MIA \"Could you please add (your favorite feature here) to SimGrid?\"\n\nHere is the deal. The whole SimGrid project (MSG, SURF, ...) is\nmeant to be kept as simple and generic as possible. We cannot add\nfunctions for everybody's needs when these functions can easily be\nbuilt from the ones already in the API. Most of the time, it is\npossible and when it was not possible we always have upgraded the API\naccordingly. When somebody asks us a question like \"How to do that?\nIs there a function in the API to simply do this?\", we're always glad\nto answer and help. However if we don't need this code for our own\nneed, there is no chance we're going to write it... it's your job! :)\nThe counterpart to our answers is that once you come up with a neat\nimplementation of this feature (task duplication, RPC, thread\nsynchronization, ...), you should send it to us and we will be glad to\nadd it to the distribution. Thus, other people will take advantage of\nit (and we don't have to answer this question again and again ;).\n\nYou'll find in this section a few \"Missing In Action\" features. Many\npeople have asked about it and we have given hints on how to simply do\nit with MSG. Feel free to contribute...\n\n\\subsection faq_MIA_MSG MSG features\n\n\\subsubsection faq_MIA_examples I want some more complex MSG examples!\n\nMany people have come to ask me a more complex example and each time,\nthey have realized afterward that the basics were in the previous three\nexamples.\n\nOf course they have often been needing more complex functions like\nMSG_process_suspend(), MSG_process_resume() and\nMSG_process_isSuspended() (to perform synchronization), or\nMSG_task_Iprobe() and MSG_process_sleep() (to avoid blocking\nreceptions), or even MSG_process_create() (to design asynchronous\ncommunications or computations). But the examples are sufficient to\nstart.\n\nWe know. We should add some more examples, but not really some more\ncomplex ones... We should add some examples that illustrate some other\nfunctionalists (like how to simply encode asynchronous\ncommunications, RPC, process migrations, thread synchronization, ...)\nand we will do it when we will have a little bit more time. We have\ntried to document the examples so that they are understandable. Tell\nus if something is not clear and once again feel free to participate!\n:)\n\n\\subsubsection faq_MIA_taskdup Missing in action: MSG Task duplication/replication\n\nThere is no task duplication in MSG. When you create a task, you can\nprocess it or send it somewhere else. As soon as a process has sent\nthis task, he doesn't have this task anymore. It's gone. The receiver\nprocess has got the task. However, you could decide upon receiving to\ncreate a \"copy\" of a task but you have to handle by yourself the\nsemantic associated to this \"duplication\".\n\nAs we already told, we prefer keeping the API as simple as\npossible. This kind of feature is rather easy to implement by users\nand the semantic you associate really depends on people. Having a\n*generic* task duplication mechanism is not that trivial (in\nparticular because of the data field). That is why I would recommend\nthat you write it by yourself even if I can give you advice on how to\ndo it.\n\nYou have the following functions to get information about a task:\nMSG_task_get_name(), MSG_task_get_compute_duration(),\nMSG_task_get_remaining_computation(), MSG_task_get_data_size(),\nand MSG_task_get_data().\n\nYou could use a dictionary (#xbt_dict_t) of dynars (#xbt_dynar_t). If\nyou still don't see how to do it, please come back to us...\n\n\\subsubsection faq_MIA_asynchronous I want to do asynchronous communications in MSG\n\nIn the past (version <= 3.4), there was no function to perform asynchronous communications.\nIt could easily be implemented by creating new process when needed though. Since version 3.5,\nwe have introduced the following functions:\n - MSG_task_isend()\n - MSG_task_irecv()\n - MSG_comm_test()\n - MSG_comm_wait()\n - MSG_comm_waitall()\n - MSG_comm_waitany()\n - MSG_comm_destroy()\n\nWe refer you to the description of these functions for more details on their usage as well\nas to the example section on \\ref MSG_ex_asynchronous_communications.\n\n\\subsubsection faq_MIA_thread_synchronization I need to synchronize my MSG processes\n\nYou obviously cannot use pthread_mutexes of pthread_conds since we handle every\nscheduling related decision within SimGrid.\n\nIn the past (version <=3.3.4) you could do it by playing with\nMSG_process_suspend() and MSG_process_resume() or with fake communications (using MSG_task_get(),\nMSG_task_put() and MSG_task_Iprobe()).\n\nSince version 3.4, you can use classical synchronization structures. See page \\ref XBT_synchro or simply check in\ninclude/xbt/synchro_core.h.\n\n\\subsubsection faq_MIA_host_load Where is the get_host_load function hidden in MSG?\n\nThere is no such thing because its semantic wouldn't be really\nclear. Of course, it is something about the amount of host throughput,\nbut there is as many definition of \"host load\" as people asking for\nthis function. First, you have to remember that resource availability\nmay vary over time, which make any load notion harder to define.\n\nIt may be instantaneous value or an average one. Moreover it may be only the\npower of the computer, or may take the background load into account, or may\neven take the currently running tasks into account. In some SURF models,\ncommunications have an influence on computational power. Should it be taken\ninto account too?\n\nFirst of all, it's near to impossible to predict the load beforehand in the\nsimulator since it depends on too much parameters (background load\nvariation, bandwidth sharing algorithmic complexity) some of them even being\nnot known beforehand (other task starting at the same time). So, getting\nthis information is really hard (just like in real life). It's not just that\nwe want MSG to be as painful as real life. But as it is in some way\nrealistic, we face some of the same problems as we would face in real life.\n\nHow would you do it for real? The most common option is to use something\nlike NWS that performs active probes. The best solution is probably to do\nthe same within MSG, as in next code snippet. It is very close from what you\nwould have to do out of the simulator, and thus gives you information that\nyou could also get in real settings to not hinder the realism of your\nsimulation.\n\n\\code\ndouble get_host_load() {\n   m_task_t task = MSG_task_create(\"test\", 0.001, 0, NULL);\n   double date = MSG_get_clock();\n\n   MSG_task_execute(task);\n   date = MSG_get_clock() - date;\n   MSG_task_destroy(task);\n   return (0.001/date);\n}\n\\endcode\n\nOf course, it may not match your personal definition of \"host load\". In this\ncase, please detail what you mean on the mailing list, and we will extend\nthis FAQ section to fit your taste if possible.\n\n\\subsubsection faq_MIA_communication_time How can I get the *real* communication time?\n\nCommunications are synchronous and thus if you simply get the time\nbefore and after a communication, you'll only get the transmission\ntime and the time spent to really communicate (it will also take into\naccount the time spent waiting for the other party to be\nready). However, getting the *real* communication time is not really\nhard either. The following solution is a good starting point.\n\n\\code\nint sender()\n{\n  m_task_t task = MSG_task_create(\"Task\", task_comp_size, task_comm_size,\n                                  calloc(1,sizeof(double)));\n  *((double*) task->data) = MSG_get_clock();\n  MSG_task_put(task, slaves[i % slaves_count], PORT_22);\n  XBT_INFO(\"Send completed\");\n  return 0;\n}\nint receiver()\n{\n  m_task_t task = NULL;\n  double time1,time2;\n\n  time1 = MSG_get_clock();\n  a = MSG_task_get(&(task), PORT_22);\n  time2 = MSG_get_clock();\n  if(time1<*((double *)task->data))\n     time1 = *((double *) task->data);\n  XBT_INFO(\"Communication time :  \\\"%f\\\" \", time2-time1);\n  free(task->data);\n  MSG_task_destroy(task);\n  return 0;\n}\n\\endcode\n\n\\subsection faq_MIA_SimDag SimDag related questions\n\n\\subsubsection faq_SG_comm Implementing communication delays between tasks.\n\nA classic question of SimDag newcomers is about how to express a\ncommunication delay between tasks. The thing is that in SimDag, both\ncomputation and communication are seen as tasks.  So, if you want to\nmodel a data dependency between two DAG tasks t1 and t2, you have to\ncreate 3 SD_tasks: t1, t2 and c and add dependencies in the following\nway:\n\n\\code\nSD_task_dependency_add(NULL, NULL, t1, c);\nSD_task_dependency_add(NULL, NULL, c, t2);\n\\endcode\n\nThis way task t2 cannot start before the termination of communication c\nwhich in turn cannot start before t1 ends.\n\nWhen creating task c, you have to associate an amount of data (in bytes)\ncorresponding to what has to be sent by t1 to t2.\n\nFinally to schedule the communication task c, you have to build a list\ncomprising the workstations on which t1 and t2 are scheduled (w1 and w2\nfor example) and build a communication matrix that should look like\n[0;amount ; 0; 0].\n\n\\subsubsection faq_SG_DAG How to implement a distributed dynamic scheduler of DAGs.\n\nDistributed is somehow \"contagious\". If you start making distributed\ndecisions, there is no way to handle DAGs directly anymore (unless I\nam missing something). You have to encode your DAGs in term of\ncommunicating process to make the whole scheduling process\ndistributed. Here is an example of how you could do that. Assume T1\nhas to be done before T2.\n\n\\code\n int your_agent(int argc, char *argv[] {\n   ...\n   T1 = MSG_task_create(...);\n   T2 = MSG_task_create(...);\n   ...\n   while(1) {\n     ...\n     if(cond) MSG_task_execute(T1);\n     ...\n     if((MSG_task_get_remaining_computation(T1)=0.0) && (you_re_in_a_good_mood))\n        MSG_task_execute(T2)\n     else {\n        /* do something else */\n     }\n   }\n }\n\\endcode\n\nIf you decide that the distributed part is not that much important and that\nDAG is really the level of abstraction you want to work with, then you should\ngive a try to \\ref SD_API.\n\n\\subsection faq_MIA_generic Generic features\n\n\\subsubsection faq_MIA_batch_scheduler Is there a native support for batch schedulers in SimGrid?\n\nNo, there is no native support for batch schedulers and none is\nplanned because this is a very specific need (and doing it in a\ngeneric way is thus very hard). However some people have implemented\ntheir own batch schedulers. Vincent Garonne wrote one during his PhD\nand put his code in the contrib directory of our SVN so that other can\nkeep working on it. You may find inspiring ideas in it.\n\n\\subsubsection faq_MIA_checkpointing I need a checkpointing thing\n\nActually, it depends on whether you want to checkpoint the simulation, or to\nsimulate checkpoints.\n\nThe first one could help if your simulation is a long standing process you\nwant to keep running even on hardware issues. It could also help to\n<i>rewind</i> the simulation by jumping sometimes on an old checkpoint to\ncancel recent calculations.\\n\nUnfortunately, such thing will probably never exist in SG. One would have to\nduplicate all data structures because doing a rewind at the simulator level\nis very very hard (not talking about the malloc free operations that might\nhave been done in between). Instead, you may be interested in the Libckpt\nlibrary (http://www.cs.utk.edu/~plank/plank/www/libckpt.html). This is the\ncheckpointing solution used in the condor project, for example. It makes it\neasy to create checkpoints (at the OS level, creating something like core\nfiles), and rerunning them on need.\n\nIf you want to simulate checkpoints instead, it means that you want the\nstate of an executing task (in particular, the progress made towards\ncompletion) to be saved somewhere.  So if a host (and the task executing on\nit) fails (cf. #MSG_HOST_FAILURE), then the task can be restarted\nfrom the last checkpoint.\\n\n\nActually, such a thing does not exist in SimGrid either, but it's just\nbecause we don't think it is fundamental and it may be done in the user code\nat relatively low cost. You could for example use a watcher that\nperiodically get the remaining amount of things to do (using\nMSG_task_get_remaining_computation()), or fragment the task in smaller\nsubtasks.\n\n\\subsection faq_platform Platform building and Dynamic resources\n\n\\subsubsection faq_platform_example Where can I find SimGrid platform files?\n\nThere are several little examples in the archive, in the examples/msg\ndirectory. From time to time, we are asked for other files, but we\ndon't have much at hand right now.\n\nYou should refer to the Platform Description Archive\n(http://pda.gforge.inria.fr) project to see the other platform file we\nhave available, as well as the Simulacrum simulator, meant to generate\nSimGrid platforms using all classical generation algorithms.\n\n\\subsubsection faq_platform_alnem How can I automatically map an existing platform?\n\nWe are working on a project called ALNeM (Application-Level Network\nMapper) which goal is to automatically discover the topology of an\nexisting network. Its output will be a platform description file\nfollowing the SimGrid syntax, so everybody will get the ability to map\ntheir own lab network (and contribute them to the catalog project).\nThis tool is not ready yet, but it move quite fast forward. Just stay\ntuned.\n\n\\subsubsection faq_platform_synthetic Generating synthetic but realistic platforms\n\nThe third possibility to get a platform file (after manual or\nautomatic mapping of real platforms) is to generate synthetic\nplatforms. Getting a realistic result is not a trivial task, and\nmoreover, nobody is really able to define what \"realistic\" means when\nspeaking of topology files. You can find some more thoughts on this\ntopic in these\n<a href=\"http://graal.ens-lyon.fr/~alegrand/articles/Simgrid-Introduction.pdf\">slides</a>.\n\nIf you are looking for an actual tool, there we have a little tool to\nannotate Tiers-generated topologies. This perl-script is in\n<tt>tools/platform_generation/</tt> directory of the SVN. Dinda et Al.\nreleased a very comparable tool, and called it GridG.\n\n\nThe specified computing power will be available to up to 6 sequential\ntasks without sharing. If more tasks are placed on this host, the\nresource will be shared accordingly. For example, if you schedule 12\ntasks on the host, each will get half of the computing power. Please\nnote that although sound, this model were never scientifically\nassessed. Please keep this fact in mind when using it.\n\n\n\\subsubsection faq_platform_random Using random variable for the resource power or availability\n\nThe best way to model the resouce power using a random variable is to\nuse an availability trace that is directed by a probability\ndistribution. This can be done using the function\ntmgr_trace_generator_value() below. The date and value generators is\ncreated with one of tmgr_event_generator_new_uniform(),\ntmgr_event_generator_new_exponential() or\ntmgr_event_generator_new_weibull() (if you need other generators,\nadding them to src/surf/trace_mgr.c should be quite trivial and your\npatch will be welcomed). Once your trace is created, you have to\nconnect it to the resource with the function\nsg_platf_new_trace_connect().\n\nThat the process is very similar if you want to model the\nresource availability with a random variable (deciding whether it's\non/off instead of deciding its speed) using the function\ntmgr_trace_generator_state() or tmgr_trace_generator_avail_unavail()\ninstead of tmgr_trace_generator_value().\n\nUnfortunately, all this is currently lacking a proper documentation,\nand there is even no proper example of use. You'll thus have to check\nthe header file include/simgrid/platf.h and experiment a bit by\nyourself. The following code should be a good starting point, and\ncontributing a little clean example would be a good way to help the\nSimGrid project.\n\n@code\ntmgr_trace_generator_value(\"mytrace\",tmgr_event_generator_new_exponential(.5)\n                                     tmgr_event_generator_new_uniform(100000,9999999));\n\t\t\t\t     \nsg_platf_trace_connect_cbarg_t myconnect = SG_PLATF_TRACE_CONNECT_INITIALIZER;\nmyconnect.kind = SURF_TRACE_CONNECT_KIND_BANDWIDTH;\nmyconnect.trace = \"mytrace\";\nmyconnect.element = \"mylink\";\n\nsg_platf_trace_connect(myconnect);\n@endcode\n\n\\section faq_troubleshooting Troubleshooting\n\n\\subsection faq_trouble_changelog The feature X stopped to work after my last update \n\nI guess that you want to read the ChangeLog file, that always contains\nall the information that could be important to the users during the\nupgrade. Actually, you may want to read it (alongside with the NEWS\nfile that highlights the most important changes) even before you\nupgrade your copy of SimGrid, too.\n\nWe do our best to maintain the backward compatibility, but we\nsometimes have to fix the things that are too broken. If we happen to\nkill a feature that you were using, we are sorry. We think that you\nshould update to the new way of doing things, but if you can't afford\nit, that's ok. Just stick to the last version that were working for\nyou, and have a pleasant day.\n\n\\subsection faq_trouble_lib_compil SimGrid compilation and installation problems\n\n\\subsubsection faq_trouble_lib_config cmake fails!\n\nWe know only one reason for the configure to fail:\n\n - <b>You are using a broken build environment</b>\\n\n   Try updating your cmake version. If symptom is that the configury\n   magic complains about gcc not being able to build executables, you\n   are probably missing the libc6-dev package. Damn Ubuntu. \n\nIf you experience other kind of issue, please get in touch with us. We are\nalways interested in improving our portability to new systems.\n\n\\subsubsection faq_trouble_distcheck Dude! \"ctest\" fails on my machine!\n\nDon't assume we never run this target, because we do. Check\nhttp://cdash.inria.fr/CDash/index.php?project=Simgrid (click on\nprevious if there is no result for today: results are produced only by\n11am, French time) and\nhttps://buildd.debian.org/status/logs.php?pkg=simgrid if you don't believe us.\n\nIf it's failing on your machine in a way not experienced by the\nautobuilders above, please drop us a mail on the mailing list so that\nwe can check it out. Make sure to read \\ref faq_bugrepport before you\ndo so.\n\n\\subsection faq_trouble_compil User code compilation problems\n\n\\subsubsection faq_trouble_err_logcat \"gcc: _simgrid_this_log_category_does_not_exist__??? undeclared (first use in this function)\"\n\nThis is because you are using the log mecanism, but you didn't created\nany default category in this file. You should refer to \\ref XBT_log\nfor all the details, but you simply forgot to call one of\nXBT_LOG_NEW_DEFAULT_CATEGORY() or XBT_LOG_NEW_DEFAULT_SUBCATEGORY().\n\n\\subsubsection faq_trouble_pthreadstatic \"gcc: undefined reference to pthread_key_create\"\n\nThis indicates that one of the library SimGrid depends on (libpthread\nhere) was missing on the linking command line. Dependencies of\nlibsimgrid are expressed directly in the dynamic library, so it's\nquite impossible that you see this message when doing dynamic linking.\n\nIf you compile your code statically (and if you use a pthread version\nof SimGrid), you must absolutely\nspecify <tt>-lpthread</tt> on the linker command line. As usual, this should\ncome after <tt>-lsimgrid</tt> on this command line.\n\n\\subsection faq_trouble_errors Runtime error messages\n\n\\subsubsection faq_flexml_limit \"surf_parse_lex: Assertion `next limit' failed.\"\n\nThis is because your platform file is too big for the parser.\n\nActually, the message comes directly from FleXML, the technology on top of\nwhich the parser is built. FleXML has the bad idea of fetching the whole\ndocument in memory before parsing it. And moreover, the memory buffer size\nmust be determined at compilation time.\n\nWe use a value which seems big enough for our need without bloating the\nsimulators footprints. But of course your mileage may vary. In this case,\njust edit src/surf/surfxml.l modify the definition of\nFLEXML_BUFFERSTACKSIZE. E.g.\n\n\\verbatim\n#define FLEXML_BUFFERSTACKSIZE 1000000000\n\\endverbatim\n\nThen recompile and everything should be fine, provided that your version of\nFlex is recent enough (>= 2.5.31). If not the compilation process should\nwarn you.\n\nA while ago, we worked on FleXML to reduce a bit its memory consumption, but\nthese issues remain. There is two things we should do:\n\n  - use a dynamic buffer instead of a static one so that the only limit\n    becomes your memory, not a stupid constant fixed at compilation time\n    (maybe not so difficult).\n  - change the parser so that it does not need to get the whole file in\n    memory before parsing\n    (seems quite difficult, but I'm a complete newbe wrt flex stuff).\n\nThese are changes to FleXML itself, not SimGrid. But since we kinda hijacked\nthe development of FleXML, I can grant you that any patches would be really\nwelcome and quickly integrated.\n\n<b>Update:</b> A new version of FleXML (1.7) was released. Most of the work\nwas done by William Dowling, who use it in his own work. The good point is\nthat it now use a dynamic buffer, and that the memory usage was greatly\nimproved. The downside is that William also changed some things internally,\nand it breaks the hack we devised to bypass the parser, as explained in\n\\ref pf_flexml_bypassing. Indeed, this is not a classical usage of the\nparser, and Will didn't imagine that we may have used (and even documented)\nsuch a crude usage of FleXML. So, we now have to repair the bypassing\nfunctionality to use the latest FleXML version and fix the memory usage in\nSimGrid.\n\n\\subsubsection faq_trouble_errors_big_fat_warning I'm told that my XML files are too old.\n\nThe format of the XML platform description files is sometimes\nimproved. For example, we decided to change the units used in SimGrid\nfrom MBytes, MFlops and seconds to Bytes, Flops and seconds to ease\npeople exchanging small messages. We also reworked the route\ndescriptions to allow more compact descriptions.\n\nThat is why the XML files are versionned using the 'version' attribute\nof the root tag. Currently, it should read:\n\\verbatim\n  <platform version=\"2\">\n\\endverbatim\n\nIf your files are too old, you can use the simgrid_update_xml.pl\nscript which can be found in the tools directory of the archive.\n\n\\subsection faq_trouble_debug Debugging SMPI applications\n\nIn order to debug SMPI programs, you can use the following options:\n\n- <b>-wrapper 'gdb --args'</b>: this option is used to use a wrapper\n  in order to call the SMPI process. Good candidates for this options\n  are \"gdb --args\", \"valgrind\", \"rr record\", \"strace\", etc;\n\n- <b>-foreground</b>: this options gives the debugger access to the terminal\n  which is needed in order to use an interactive debugger.\n\nBoth options are needed in order to run the SMPI process under GDB.\n\n\\subsection faq_trouble_valgrind Valgrind-related and other debugger issues\n\nIf you don't, you really should use valgrind to debug your code, it's\nalmost magic.\n\n\\subsubsection faq_trouble_vg_longjmp longjmp madness in valgrind\n\nThis is when valgrind starts complaining about longjmp things, just like:\n\n\\verbatim ==21434== Conditional jump or move depends on uninitialised value(s)\n==21434==    at 0x420DBE5: longjmp (longjmp.c:33)\n==21434==\n==21434== Use of uninitialised value of size 4\n==21434==    at 0x420DC3A: __longjmp (__longjmp.S:48)\n\\endverbatim\n\nThis is the sign that you didn't used the exception mecanism well. Most\nprobably, you have a <tt>return;</tt> somewhere within a <tt>TRY{}</tt>\nblock. This is <b>evil</b>, and you must not do this. Did you read the section\nabout \\ref XBT_ex??\n\n\\subsubsection faq_trouble_vg_libc Valgrind spits tons of errors about backtraces!\n\nIt may happen that valgrind, the memory debugger beloved by any decent C\nprogrammer, spits tons of warnings like the following :\n\\verbatim ==8414== Conditional jump or move depends on uninitialised value(s)\n==8414==    at 0x400882D: (within /lib/ld-2.3.6.so)\n==8414==    by 0x414EDE9: (within /lib/tls/i686/cmov/libc-2.3.6.so)\n==8414==    by 0x400B105: (within /lib/ld-2.3.6.so)\n==8414==    by 0x414F937: _dl_open (in /lib/tls/i686/cmov/libc-2.3.6.so)\n==8414==    by 0x4150F4C: (within /lib/tls/i686/cmov/libc-2.3.6.so)\n==8414==    by 0x400B105: (within /lib/ld-2.3.6.so)\n==8414==    by 0x415102D: __libc_dlopen_mode (in /lib/tls/i686/cmov/libc-2.3.6.so)\n==8414==    by 0x412D6B9: backtrace (in /lib/tls/i686/cmov/libc-2.3.6.so)\n==8414==    by 0x8076446: xbt_dictelm_get_ext (dict_elm.c:714)\n==8414==    by 0x80764C1: xbt_dictelm_get (dict_elm.c:732)\n==8414==    by 0x8079010: xbt_cfg_register (config.c:208)\n==8414==    by 0x806821B: MSG_config (msg_config.c:42)\n\\endverbatim\n\nThis problem is somewhere in the libc when using the backtraces and there is\nvery few things we can do ourselves to fix it. Instead, here is how to tell\nvalgrind to ignore the error. Add the following to your ~/.valgrind.supp (or\ncreate this file on need). Make sure to change the obj line according to\nyour personnal mileage (change 2.3.6 to the actual version you are using,\nwhich you can retrieve with a simple \"ls /lib/ld*.so\").\n\n\\verbatim {\n   name: Backtrace madness\n   Memcheck:Cond\n   obj:/lib/ld-2.3.6.so\n   fun:dl_open_worker\n   fun:_dl_open\n   fun:do_dlopen\n   fun:dlerror_run\n   fun:__libc_dlopen_mode\n}\\endverbatim\n\nThen, you have to specify valgrind to use this suppression file by passing\nthe <tt>--suppressions=$HOME/.valgrind.supp</tt> option on the command line.\nYou can also add the following to your ~/.bashrc so that it gets passed\nautomatically. Actually, it passes a bit more options to valgrind, and this\nhappen to be my personnal settings. Check the valgrind documentation for\nmore information.\n\n\\verbatim export VALGRIND_OPTS=\"--leak-check=yes --leak-resolution=high --num-callers=40 --tool=memcheck --suppressions=$HOME/.valgrind.supp\" \\endverbatim\n\n\\subsubsection faq_trouble_backtraces Truncated backtraces\n\nWhen debugging SimGrid, it's easier to pass the\n--disable-compiler-optimization flag to the configure if valgrind or\ngdb get fooled by the optimization done by the compiler. But you\nshould remove these flag when everything works before going in\nproduction (before launching your 1252135 experiments), or everything\nwill run only one half of the true SimGrid potential.\n\n\\subsection faq_deadlock There is a deadlock in my code!!!\n\nUnfortunately, we cannot debug every code written in SimGrid.  We\nfurthermore believe that the framework provides ways enough\ninformation to debug such informations yourself. If the textual output\nis not enough, Make sure to check the \\ref faq_visualization FAQ entry to see\nhow to get a graphical one.\n\nNow, if you come up with a really simple example that deadlocks and\nyou're absolutely convinced that it should not, you can ask on the\nlist. Just be aware that you'll be severely punished if the mistake is\non your side... We have plenty of FAQ entries to redact and new\nfeatures to implement for the impenitents! ;)\n\nUsing \n\n\\subsection faq_surf_network_latency I get weird timings when I play with the latencies.\n\nOK, first of all, remember that units should be Bytes, Flops and\nSeconds. If you don't use such units, some SimGrid constants (e.g. the\nSG_TCP_CTE_GAMMA constant used in most network models) won't have the\nright unit and you'll end up with weird results.\n\nHere is what happens with a single transfer of size L on a link\n(bw,lat) when nothing else happens.\n\n\\verbatim\n0-----lat--------------------------------------------------t\n|-----|**** real_bw =min(bw,SG_TCP_CTE_GAMMA/(2*lat)) *****|\n\\endverbatim\n\nIn more complex situations, this min is the solution of a complex\nmax-min linear system.  Have a look\n<a href=\"http://lists.gforge.inria.fr/pipermail/simgrid-devel/2006-April/thread.html\">here</a>\nand read the two threads \"Bug in SURF?\" and \"Surf bug not\nfixed?\". You'll have a few other examples of such computations. You\ncan also read \"A Network Model for Simulation of Grid Application\" by\nHenri Casanova and Loris Marchal to have all the details. The fact\nthat the real_bw is smaller than bw is easy to understand. The fact\nthat real_bw is smaller than SG_TCP_CTE_GAMMA/(2*lat) is due to the\nwindow-based congestion mechanism of TCP. With TCP, you can't exploit\nyour huge network capacity if you don't have a good round-trip-time\nbecause of the acks...\n\nAnyway, what you get is t=lat + L/min(bw,SG_TCP_CTE_GAMMA/(2*lat)).\n\n  * if I you set (bw,lat)=(100 000 000, 0.00001), you get t =  1.00001 (you fully\nuse your link)\n  * if I you set (bw,lat)=(100 000 000, 0.0001),  you get t =  1.0001 (you're on the\nlimit)\n  * if I you set (bw,lat)=(100 000 000, 0.001),   you get t = 10.001  (ouch!)\n\nThis bound on the effective bandwidth of a flow is not the only thing\nthat may make your result be unexpected. For example, two flows\ncompeting on a saturated link receive an amount of bandwidth inversely\nproportional to their round trip time.\n\n\\subsection faq_bugrepport So I've found a bug in SimGrid. How to report it?\n\nWe do our best to make sure to hammer away any bugs of SimGrid, but this is\nstill an academic project so please be patient if/when you find bugs in it.\nIf you do, the best solution is to drop an email either on the simgrid-user\nor the simgrid-devel mailing list and explain us about the issue.  You can\nalso decide to open a formal bug report using the\n<a href=\"https://gforge.inria.fr/tracker/?atid=165&group_id=12&func=browse\">relevant\ninterface</a>. You need to login on the server to get the ability to submit\nbugs.\n\nWe will do our best to solve any problem repported, but you need to help us\nfinding the issue. Just telling \"it segfault\" isn't enough. Telling \"It\nsegfaults when running the attached simulator\" doesn't really help either.\nYou may find the following article interesting to see how to repport\ninformative bug repports:\nhttp://www.chiark.greenend.org.uk/~sgtatham/bugs.html (it is not SimGrid\nspecific at all, but it's full of good advices).\n\n\\author Da SimGrid team <simgrid-devel@lists.gforge.inria.fr>\n\n*/\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-simgrid-3.13-idrdxfym5rrhhfpov6powknjpxl4hy2e/spack-src/doc/surf++.png",
        "/tmp/vanessa/spack-stage/spack-stage-simgrid-3.13-idrdxfym5rrhhfpov6powknjpxl4hy2e/spack-src/doc/triva-time_interval.png",
        "/tmp/vanessa/spack-stage/spack-stage-simgrid-3.13-idrdxfym5rrhhfpov6powknjpxl4hy2e/spack-src/doc/triva-graph_visualization.png",
        "/tmp/vanessa/spack-stage/spack-stage-simgrid-3.13-idrdxfym5rrhhfpov6powknjpxl4hy2e/spack-src/doc/surf++.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-simgrid-3.13-idrdxfym5rrhhfpov6powknjpxl4hy2e/spack-src/doc/triva-graph_configuration.png",
        "/tmp/vanessa/spack-stage/spack-stage-simgrid-3.13-idrdxfym5rrhhfpov6powknjpxl4hy2e/spack-src/doc/sc3-description.png",
        "/tmp/vanessa/spack-stage/spack-stage-simgrid-3.13-idrdxfym5rrhhfpov6powknjpxl4hy2e/spack-src/doc/webcruft/Paje_MSG_screenshot_thn.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-simgrid-3.13-idrdxfym5rrhhfpov6powknjpxl4hy2e/spack-src/doc/webcruft/smpi_simgrid_alltoall_pair_16.png",
        "/tmp/vanessa/spack-stage/spack-stage-simgrid-3.13-idrdxfym5rrhhfpov6powknjpxl4hy2e/spack-src/doc/webcruft/storage_sample_scenario.png",
        "/tmp/vanessa/spack-stage/spack-stage-simgrid-3.13-idrdxfym5rrhhfpov6powknjpxl4hy2e/spack-src/doc/webcruft/output.goal.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-simgrid-3.13-idrdxfym5rrhhfpov6powknjpxl4hy2e/spack-src/doc/webcruft/smpi_simgrid_alltoall_ring_16.png",
        "/tmp/vanessa/spack-stage/spack-stage-simgrid-3.13-idrdxfym5rrhhfpov6powknjpxl4hy2e/spack-src/doc/webcruft/Paje_MSG_screenshot.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-simgrid-3.13-idrdxfym5rrhhfpov6powknjpxl4hy2e/spack-src/doc/webcruft/AS_hierarchy.png",
        "/tmp/vanessa/spack-stage/spack-stage-simgrid-3.13-idrdxfym5rrhhfpov6powknjpxl4hy2e/spack-src/doc/webcruft/SGicon.gif",
        "/tmp/vanessa/spack-stage/spack-stage-simgrid-3.13-idrdxfym5rrhhfpov6powknjpxl4hy2e/spack-src/doc/webcruft/SGicon.icns",
        "/tmp/vanessa/spack-stage/spack-stage-simgrid-3.13-idrdxfym5rrhhfpov6powknjpxl4hy2e/spack-src/doc/webcruft/SGicon.ico",
        "/tmp/vanessa/spack-stage/spack-stage-simgrid-3.13-idrdxfym5rrhhfpov6powknjpxl4hy2e/spack-src/doc/webcruft/awstats_logo3.png",
        "/tmp/vanessa/spack-stage/spack-stage-simgrid-3.13-idrdxfym5rrhhfpov6powknjpxl4hy2e/spack-src/doc/webcruft/simgrid_logo_2011.png",
        "/tmp/vanessa/spack-stage/spack-stage-simgrid-3.13-idrdxfym5rrhhfpov6powknjpxl4hy2e/spack-src/doc/webcruft/simgrid_logo_2011.gif",
        "/tmp/vanessa/spack-stage/spack-stage-simgrid-3.13-idrdxfym5rrhhfpov6powknjpxl4hy2e/spack-src/doc/webcruft/poster_thumbnail.png",
        "/tmp/vanessa/spack-stage/spack-stage-simgrid-3.13-idrdxfym5rrhhfpov6powknjpxl4hy2e/spack-src/doc/webcruft/simgrid_logo_2011_small.png",
        "/tmp/vanessa/spack-stage/spack-stage-simgrid-3.13-idrdxfym5rrhhfpov6powknjpxl4hy2e/spack-src/doc/webcruft/simgrid_logo_win.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-simgrid-3.13-idrdxfym5rrhhfpov6powknjpxl4hy2e/spack-src/doc/webcruft/simgrid_logo_win_2011.bmp"
    ],
    "total_files": 2175
}