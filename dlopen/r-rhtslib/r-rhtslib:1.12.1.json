{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-r-rhtslib-1.12.1-qikvlnpbnugatvfip5svqkgqr54bsvnl/spack-src/src/htslib-1.7/configure.ac": "# Configure script for htslib, a C library for high-throughput sequencing data.\n#\n#    Copyright (C) 2015-2017 Genome Research Ltd.\n#\n#    Author: John Marshall <jm18@sanger.ac.uk>\n#\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n# of this software and associated documentation files (the \"Software\"), to deal\n# in the Software without restriction, including without limitation the rights\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n# copies of the Software, and to permit persons to whom the Software is\n# furnished to do so, subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included in\n# all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n# DEALINGS IN THE SOFTWARE.\n\ndnl Process this file with autoconf to produce a configure script\nAC_INIT([HTSlib], m4_esyscmd_s([./version.sh 2>/dev/null]),\n        [samtools-help@lists.sourceforge.net], [], [http://www.htslib.org/])\nAC_PREREQ(2.63)  dnl This version introduced 4-argument AC_CHECK_HEADER\nAC_CONFIG_SRCDIR(hts.c)\nAC_CONFIG_HEADERS(config.h)\n\nm4_include([m4/hts_prog_cc_warnings.m4])\n\ndnl Copyright notice to be copied into the generated configure script\nAC_COPYRIGHT([Portions copyright (C) 2016 Genome Research Ltd.\n\nThis configure script is free software: you are free to change and\nredistribute it.  There is NO WARRANTY, to the extent permitted by law.])\n\ndnl Notes to be copied (by autoheader) into the generated config.h.in\nAH_TOP([/* If you use configure, this file provides @%:@defines reflecting your\n   configuration choices.  If you have not run configure, suitable\n   conservative defaults will be used.\n\n   Autoheader adds a number of items to this template file that are not\n   used by HTSlib: STDC_HEADERS and most HAVE_*_H header file defines\n   are immaterial, as we assume standard ISO C headers and facilities;\n   the PACKAGE_* defines are unused and are overridden by the more\n   accurate PACKAGE_VERSION as computed by the Makefile.  */])\n\nAC_PROG_CC\nAC_PROG_RANLIB\n\ndnl Turn on compiler warnings, if possible\nHTS_PROG_CC_WARNINGS\ndnl Flags to treat warnings as errors.  These need to be applied to CFLAGS\ndnl later as they can interfere with some of the tests (notably AC_SEARCH_LIBS)\nHTS_PROG_CC_WERROR(hts_late_cflags)\n\ndnl Avoid chicken-and-egg problem where pkg-config supplies the\ndnl PKG_PROG_PKG_CONFIG macro, but we want to use it to check\ndnl for pkg-config...\nm4_ifdef([PKG_PROG_PKG_CONFIG], [PKG_PROG_PKG_CONFIG], [PKG_CONFIG=\"\"])\n\nneed_crypto=no\npc_requires=\nstatic_LDFLAGS=\nstatic_LIBS='-lz -lm'\nprivate_LIBS=\n\nAC_ARG_ENABLE([bz2],\n  [AS_HELP_STRING([--disable-bz2],\n                  [omit support for BZ2-compressed CRAM files])],\n  [], [enable_bz2=yes])\n\nAC_ARG_ENABLE([gcs],\n  [AS_HELP_STRING([--enable-gcs],\n                  [support Google Cloud Storage URLs])],\n  [], [enable_gcs=check])\n\nAC_SYS_LARGEFILE\nAC_FUNC_FSEEKO\n\nAC_ARG_ENABLE([libcurl],\n  [AS_HELP_STRING([--enable-libcurl],\n                  [enable libcurl-based support for http/https/etc URLs])],\n  [], [enable_libcurl=check])\n\nAC_ARG_ENABLE([lzma],\n  [AS_HELP_STRING([--disable-lzma],\n                  [omit support for LZMA-compressed CRAM files])],\n  [], [enable_lzma=yes])\n\nAC_ARG_ENABLE([plugins],\n  [AS_HELP_STRING([--enable-plugins],\n                  [enable separately-compiled plugins for file access])],\n  [], [enable_plugins=no])\nAC_SUBST(enable_plugins)\n\nAC_ARG_WITH([plugin-dir],\n  [AS_HELP_STRING([--with-plugin-dir=DIR],\n                  [plugin installation location [LIBEXECDIR/htslib]])],\n  [case $withval in\n     yes|no) AC_MSG_ERROR([no directory specified for --with-plugin-dir]) ;;\n   esac],\n   [with_plugin_dir='$(libexecdir)/htslib'])\nAC_SUBST([plugindir], $with_plugin_dir)\n\nAC_ARG_WITH([plugin-path],\n  [AS_HELP_STRING([--with-plugin-path=PATH],\n                  [default HTS_PATH plugin search path [PLUGINDIR]])],\n  [case $withval in\n     yes) AC_MSG_ERROR([no path specified for --with-plugin-path]) ;;\n     no)  with_plugin_path= ;;\n   esac],\n  [with_plugin_path=$with_plugin_dir])\nAC_SUBST([pluginpath], $with_plugin_path)\n\nAC_ARG_ENABLE([s3],\n  [AS_HELP_STRING([--enable-s3],\n                  [support Amazon AWS S3 URLs])],\n  [], [enable_s3=check])\n\ntest -n \"$host_alias\" || host_alias=unknown-`uname -s`\nAC_MSG_CHECKING([shared library type for $host_alias])\ncase $host_alias in\n  *-cygwin* | *-CYGWIN*)\n    host_result=\"Cygwin DLL\"\n    PLATFORM=CYGWIN\n    PLUGIN_EXT=.cygdll\n    ;;\n  *-darwin* | *-Darwin*)\n    host_result=\"Darwin dylib\"\n    PLATFORM=Darwin\n    PLUGIN_EXT=.bundle\n    ;;\n  *-msys* | *-MSYS* | *-mingw* | *-MINGW*)\n    host_result=\"MSYS dll\"\n    PLATFORM=MSYS\n    PLUGIN_EXT=.dll\n    # This also sets __USE_MINGW_ANSI_STDIO which in turn makes PRId64,\n    # %lld and %z printf formats work.  It also enforces the snprintf to\n    # be C99 compliant so it returns the correct values (in kstring.c).\n    CPPFLAGS=\"$CPPCFLAGS -D_XOPEN_SOURCE=600\"\n    ;;\n  *)\n    host_result=\"plain .so\"\n    PLATFORM=default\n    PLUGIN_EXT=.so\n    ;;\nesac\nAC_MSG_RESULT([$host_result])\nAC_SUBST([PLATFORM])\n\ndnl FIXME This pulls in dozens of standard header checks\nAC_FUNC_MMAP\nAC_CHECK_FUNCS([gmtime_r fsync drand48])\n\n# Darwin has a dubious fdatasync() symbol, but no declaration in <unistd.h>\nAC_CHECK_DECL([fdatasync(int)], [AC_CHECK_FUNCS(fdatasync)])\n\nif test $enable_plugins != no; then\n  AC_SEARCH_LIBS([dlopen], [dl], [],\n    [AC_MSG_ERROR([dlopen() not found\n\nPlugin support requires dynamic linking facilities from the operating system.\nEither configure with --disable-plugins or resolve this error to build HTSlib.])])\n  # TODO Test whether this is required and/or needs tweaking per-platform\n  LDFLAGS=\"$LDFLAGS -rdynamic\"\n  static_LDFLAGS=\"$static_LDFLAGS -rdynamic\"\n  case \"$ac_cv_search_dlopen\" in\n    -l*) static_LIBS=\"$static_LIBS $ac_cv_search_dlopen\" ;;\n  esac\n  AC_DEFINE([ENABLE_PLUGINS], 1, [Define if HTSlib should enable plugins.])\n  AC_SUBST([PLUGIN_EXT])\n  AC_DEFINE_UNQUOTED([PLUGIN_EXT], [\"$PLUGIN_EXT\"],\n                     [Platform-dependent plugin filename extension.])\nfi\n\nAC_SEARCH_LIBS([log], [m], [],\n  [AC_MSG_ERROR([log() not found\n\nHTSLIB requires a working floating-point math library.\nFAILED.  This error must be resolved in order to build HTSlib successfully.])])\n\nzlib_devel=ok\ndnl Set a trivial non-empty INCLUDES to avoid excess default includes tests\nAC_CHECK_HEADER([zlib.h], [], [zlib_devel=missing], [;])\nAC_CHECK_LIB(z, inflate,  [], [zlib_devel=missing])\n\nif test $zlib_devel != ok; then\n  AC_MSG_ERROR([zlib development files not found\n\nHTSlib uses compression routines from the zlib library <http://zlib.net>.\nBuilding HTSlib requires zlib development files to be installed on the build\nmachine; you may need to ensure a package such as zlib1g-dev (on Debian or\nUbuntu Linux) or zlib-devel (on RPM-based Linux distributions or Cygwin)\nis installed.\n\nFAILED.  This error must be resolved in order to build HTSlib successfully.])\nfi\n\ndnl connect() etc. fns are in libc on linux, but libsocket on illumos/Solaris\nAC_SEARCH_LIBS([recv], [socket ws2_32], [\nif test \"$ac_cv_search_recv\" != \"none required\"\nthen\n  static_LIBS=\"$static_LIBS $ac_cv_search_recv\"\nfi], [AC_MSG_ERROR([unable to find the recv() function])])\n\nif test \"$enable_bz2\" != no; then\n  bz2_devel=ok\n  AC_CHECK_HEADER([bzlib.h], [], [bz2_devel=missing], [;])\n  AC_CHECK_LIB([bz2], [BZ2_bzBuffToBuffCompress], [], [bz2_devel=missing])\n  if test $bz2_devel != ok; then\n    AC_MSG_ERROR([libbzip2 development files not found\n\nThe CRAM format may use bzip2 compression, which is implemented in HTSlib\nby using compression routines from libbzip2 <http://www.bzip.org/>.\n\nBuilding HTSlib requires libbzip2 development files to be installed on the\nbuild machine; you may need to ensure a package such as libbz2-dev (on Debian\nor Ubuntu Linux) or bzip2-devel (on RPM-based Linux distributions or Cygwin)\nis installed.\n\nEither configure with --disable-bz2 (which will make some CRAM files\nproduced elsewhere unreadable) or resolve this error to build HTSlib.])\n  fi\ndnl Unfortunately the 'bzip2' package-cfg module is not standard.\ndnl Redhat/Fedora has it; Debian/Ubuntu does not.\n  if test -n \"$PKG_CONFIG\" && \"$PKG_CONFIG\" --exists bzip2; then\n     pc_requires=\"$pc_requires bzip2\"\n  else\n     private_LIBS=\"$private_LIBS -lbz2\"\n  fi  \n  static_LIBS=\"$static_LIBS -lbz2\"\nfi\n\nif test \"$enable_lzma\" != no; then\n  lzma_devel=ok\n  AC_CHECK_HEADERS([lzma.h], [], [lzma_devel=header-missing], [;])\n  AC_CHECK_LIB([lzma], [lzma_easy_buffer_encode], [], [lzma_devel=missing])\n  if test $lzma_devel = missing; then\n    AC_MSG_ERROR([liblzma development files not found\n\nThe CRAM format may use LZMA2 compression, which is implemented in HTSlib\nby using compression routines from liblzma <http://tukaani.org/xz/>.\n\nBuilding HTSlib requires liblzma development files to be installed on the\nbuild machine; you may need to ensure a package such as liblzma-dev (on Debian\nor Ubuntu Linux), xz-devel (on RPM-based Linux distributions or Cygwin), or\nxz (via Homebrew on macOS) is installed; or build XZ Utils from source.\n\nEither configure with --disable-lzma (which will make some CRAM files\nproduced elsewhere unreadable) or resolve this error to build HTSlib.])\n  fi\n  pc_requires=\"$pc_requires liblzma\"\n  static_LIBS=\"$static_LIBS -llzma\"\nfi\n\nlibcurl=disabled\nif test \"$enable_libcurl\" != no; then\n  AC_CHECK_LIB([curl], [curl_easy_pause],\n    [AC_DEFINE([HAVE_LIBCURL], 1, [Define if libcurl file access is enabled.])\n     libcurl=enabled],\n    [AC_CHECK_LIB([curl], [curl_easy_init],\n       [message=\"library is too old (7.18+ required)\"],\n       [message=\"library not found\"])\n     case \"$enable_libcurl\" in\n       check) AC_MSG_WARN([libcurl not enabled: $message]) ;;\n       *) AC_MSG_ERROR([libcurl $message\n\nSupport for HTTPS and other SSL-based URLs requires routines from the libcurl\nlibrary <http://curl.haxx.se/libcurl/>.  Building HTSlib with libcurl enabled\nrequires libcurl development files to be installed on the build machine; you\nmay need to ensure a package such as libcurl4-{gnutls,nss,openssl}-dev (on\nDebian or Ubuntu Linux) or libcurl-devel (on RPM-based Linux distributions\nor Cygwin) is installed.\n\nEither configure with --disable-libcurl or resolve this error to build HTSlib.])\n       ;;\n     esac])\ndnl -lcurl is only needed for static linking if hfile_libcurl is not a plugin\n  if test \"$libcurl\" = enabled ; then\n    if test \"$enable_plugins\" != yes ; then\n      static_LIBS=\"$static_LIBS -lcurl\"\n    fi\n  fi\nfi\nAC_SUBST([libcurl])\n\ngcs=disabled\nif test \"$enable_gcs\" != no; then\n  if test $libcurl = enabled; then\n    AC_DEFINE([ENABLE_GCS], 1, [Define if HTSlib should enable GCS support.])\n    gcs=enabled\n  else\n    case \"$enable_gcs\" in\n      check) AC_MSG_WARN([GCS support not enabled: requires libcurl support]) ;;\n      *) AC_MSG_ERROR([GCS support not enabled\n\nSupport for Google Cloud Storage URLs requires libcurl support to be enabled\nin HTSlib.  Configure with --enable-libcurl in order to use GCS URLs.])\n      ;;\n    esac\n  fi\nfi\nAC_SUBST([gcs])\n\ns3=disabled\nif test \"$enable_s3\" != no; then\n  if test $libcurl = enabled; then\n    s3=enabled\n    need_crypto=\"$enable_s3\"\n  else\n    case \"$enable_s3\" in\n      check) AC_MSG_WARN([S3 support not enabled: requires libcurl support]) ;;\n      *) AC_MSG_ERROR([S3 support not enabled\n\nSupport for Amazon AWS S3 URLs requires libcurl support to be enabled\nin HTSlib.  Configure with --enable-libcurl in order to use S3 URLs.])\n      ;;\n    esac\n  fi\nfi\n\nCRYPTO_LIBS=\nif test $need_crypto != no; then\n  AC_CHECK_FUNC([CCHmac],\n    [AC_DEFINE([HAVE_COMMONCRYPTO], 1,\n               [Define if you have the Common Crypto library.])],\n    [save_LIBS=$LIBS\n     AC_SEARCH_LIBS([HMAC], [crypto],\n       [AC_DEFINE([HAVE_HMAC], 1, [Define if you have libcrypto-style HMAC().])\n        case \"$ac_cv_search_HMAC\" in\n          -l*) CRYPTO_LIBS=$ac_cv_search_HMAC ;;\n        esac],\n     [case \"$need_crypto\" in\n     check) AC_MSG_WARN([S3 support not enabled: requires SSL development files])\n         s3=disabled ;;\n     *) AC_MSG_ERROR([SSL development files not found\n\nSupport for AWS S3 URLs requires routines from an SSL library.  Building\nHTSlib with libcurl enabled requires SSL development files to be installed\non the build machine; you may need to ensure a package such as libgnutls-dev,\nlibnss3-dev, or libssl-dev (on Debian or Ubuntu Linux, corresponding to the\nlibcurl4-*-dev package installed), or openssl-devel (on RPM-based Linux\ndistributions or Cygwin) is installed.\n\nEither configure with --disable-s3 or resolve this error to build HTSlib.]) ;;\n       esac])\n     LIBS=$save_LIBS])\ndnl Only need to add to static_LIBS if not building as a plugin\n  if test \"$enable_plugins\" != yes ; then\n     static_LIBS=\"$static_LIBS $CRYPTO_LIBS\"\n  fi\nfi\n\ndnl Look for PTHREAD_MUTEX_RECURSIVE.\ndnl This is normally in pthread.h except on some broken glibc implementations.\nAC_CHECK_DECL(PTHREAD_MUTEX_RECURSIVE, [], [AC_DEFINE([_XOPEN_SOURCE],[600], [Needed for PTHREAD_MUTEX_RECURSIVE])], [[#include <pthread.h>]])\n\nif test \"$s3\" = enabled ; then\n   AC_DEFINE([ENABLE_S3], 1, [Define if HTSlib should enable S3 support.])\nfi\n\ndnl Apply value from HTS_PROG_CC_WERROR (if set)\nAS_IF([test \"x$hts_late_cflags\" != x],[CFLAGS=\"$CFLAGS $hts_late_cflags\"])\n\nAC_SUBST([s3])\nAC_SUBST([CRYPTO_LIBS])\n\nAC_SUBST([pc_requires])\nAC_SUBST([private_LIBS])\nAC_SUBST([static_LDFLAGS])\nAC_SUBST([static_LIBS])\n\nAC_CONFIG_FILES([config.mk htslib.pc.tmp:htslib.pc.in])\nAC_OUTPUT\n",
        "/tmp/vanessa/spack-stage/spack-stage-r-rhtslib-1.12.1-qikvlnpbnugatvfip5svqkgqr54bsvnl/spack-src/src/htslib-1.7/plugin.c": "/*  plugin.c -- low-level path parsing and plugin functions.\n\n    Copyright (C) 2015 Genome Research Ltd.\n\n    Author: John Marshall <jm18@sanger.ac.uk>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\nTHE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.  */\n\n#include <config.h>\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <errno.h>\n\n#include <dirent.h>\n#include <dlfcn.h>\n\n#include \"hts_internal.h\"\n#include \"htslib/kstring.h\"\n\n#ifndef PLUGINPATH\n#define PLUGINPATH \"\"\n#endif\n\nstatic DIR *open_nextdir(struct hts_path_itr *itr)\n{\n    DIR *dir;\n\n    while (1) {\n        const char *colon = strchr(itr->pathdir, ':');\n        if (colon == NULL) return NULL;\n\n        itr->entry.l = 0;\n        kputsn(itr->pathdir, colon - itr->pathdir, &itr->entry);\n        itr->pathdir = &colon[1];\n        if (itr->entry.l == 0) continue;\n\n        dir = opendir(itr->entry.s);\n        if (dir) break;\n\n        if (hts_verbose >= 4)\n            fprintf(stderr,\n                    \"[W::hts_path_itr] can't scan directory \\\"%s\\\": %s\\n\",\n                    itr->entry.s, strerror(errno));\n    }\n\n    if (itr->entry.s[itr->entry.l-1] != '/') kputc('/', &itr->entry);\n    itr->entry_dir_l = itr->entry.l;\n    return dir;\n}\n\nvoid hts_path_itr_setup(struct hts_path_itr *itr, const char *path,\n        const char *builtin_path, const char *prefix, size_t prefix_len,\n        const char *suffix, size_t suffix_len)\n{\n    itr->prefix = prefix;\n    itr->prefix_len = prefix_len;\n\n    if (suffix) itr->suffix = suffix, itr->suffix_len = suffix_len;\n    else itr->suffix = PLUGIN_EXT, itr->suffix_len = strlen(PLUGIN_EXT);\n\n    itr->path.l = itr->path.m = 0; itr->path.s = NULL;\n    itr->entry.l = itr->entry.m = 0; itr->entry.s = NULL;\n\n    if (! builtin_path) builtin_path = PLUGINPATH;\n    if (! path) {\n        path = getenv(\"HTS_PATH\");\n        if (! path) path = \"\";\n    }\n\n    while (1) {\n        size_t len = strcspn(path, \":\");\n        if (len == 0) kputs(builtin_path, &itr->path);\n        else kputsn(path, len, &itr->path);\n        kputc(':', &itr->path);\n\n        path += len;\n        if (*path == ':') path++;\n        else break;\n    }\n\n    // Note that ':' now terminates entries rather than separates them\n    itr->pathdir = itr->path.s;\n    itr->dirv = open_nextdir(itr);\n}\n\nconst char *hts_path_itr_next(struct hts_path_itr *itr)\n{\n    while (itr->dirv) {\n        struct dirent *e;\n        while ((e = readdir((DIR *) itr->dirv)) != NULL) {\n            size_t d_name_len = strlen(e->d_name);\n            if (strncmp(e->d_name, itr->prefix, itr->prefix_len) == 0 &&\n                d_name_len >= itr->suffix_len &&\n                strncmp(e->d_name + d_name_len - itr->suffix_len, itr->suffix,\n                        itr->suffix_len) == 0) {\n                itr->entry.l = itr->entry_dir_l;\n                kputs(e->d_name, &itr->entry);\n                return itr->entry.s;\n            }\n        }\n\n        closedir((DIR *) itr->dirv);\n        itr->dirv = open_nextdir(itr);\n    }\n\n    itr->pathdir = NULL;\n    free(itr->path.s); itr->path.s = NULL;\n    free(itr->entry.s); itr->entry.s = NULL;\n    return NULL;\n}\n\n\n#ifndef RTLD_NOLOAD\n#define RTLD_NOLOAD 0\n#endif\n\nvoid *load_plugin(void **pluginp, const char *filename, const char *symbol)\n{\n    void *lib = dlopen(filename, RTLD_NOW | RTLD_LOCAL);\n    if (lib == NULL) goto error;\n\n    void *sym = dlsym(lib, symbol);\n    if (sym == NULL) {\n        // Reopen the plugin with RTLD_GLOBAL and check for uniquified symbol\n        void *libg = dlopen(filename, RTLD_NOLOAD | RTLD_NOW | RTLD_GLOBAL);\n        if (libg == NULL) goto error;\n        dlclose(lib);\n        lib = libg;\n\n        kstring_t symbolg = { 0, 0, NULL };\n        kputs(symbol, &symbolg);\n        kputc('_', &symbolg);\n        const char *slash = strrchr(filename, '/');\n        const char *basename = slash? slash+1 : filename;\n        kputsn(basename, strcspn(basename, \".-+\"), &symbolg);\n\n        sym = dlsym(lib, symbolg.s);\n        free(symbolg.s);\n        if (sym == NULL) goto error;\n    }\n\n    *pluginp = lib;\n    return sym;\n\nerror:\n    if (hts_verbose >= 4)\n        fprintf(stderr, \"[W::%s] can't load plugin \\\"%s\\\": %s\\n\",\n                __func__, filename, dlerror());\n    if (lib) dlclose(lib);\n    return NULL;\n}\n\nvoid *plugin_sym(void *plugin, const char *name, const char **errmsg)\n{\n    void *sym = dlsym(plugin, name);\n    if (sym == NULL) *errmsg = dlerror();\n    return sym;\n}\n\nvoid close_plugin(void *plugin)\n{\n    if (dlclose(plugin) != 0) {\n        if (hts_verbose >= 4)\n            fprintf(stderr, \"[W::%s] dlclose() failed: %s\\n\",\n                    __func__, dlerror());\n    }\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-r-rhtslib-1.12.1-qikvlnpbnugatvfip5svqkgqr54bsvnl/spack-src/src/htslib-1.7/hfile_internal.h": "/*  hfile_internal.h -- internal parts of low-level input/output streams.\n\n    Copyright (C) 2013-2016 Genome Research Ltd.\n\n    Author: John Marshall <jm18@sanger.ac.uk>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\nTHE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.  */\n\n#ifndef HFILE_INTERNAL_H\n#define HFILE_INTERNAL_H\n\n#include <stdarg.h>\n\n#include \"htslib/hfile.h\"\n\n#include \"textutils_internal.h\"\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n/*!\n  @abstract  Resizes the buffer within an hFILE.\n\n  @notes  Changes the buffer size for an hFILE.  Ideally this is done\n  immediately after opening.  If performed later, this function may\n  fail if we are reducing the buffer size and the current offset into\n  the buffer is beyond the new capacity.\n\n  @param fp        The file stream\n  @param bufsiz    The size of the new buffer\n\n  @return Returns 0 on success, -1 on failure.\n */\nint hfile_set_blksize(hFILE *fp, size_t bufsiz);\n\nstruct BGZF;\n/*!\n  @abstract Return the hFILE connected to a BGZF\n */\nstruct hFILE *bgzf_hfile(struct BGZF *fp);\n\nstruct hFILE_backend {\n    /* As per read(2), returning the number of bytes read (possibly 0) or\n       negative (and setting errno) on errors.  Front-end code will call this\n       repeatedly if necessary to attempt to get the desired byte count.  */\n    ssize_t (*read)(hFILE *fp, void *buffer, size_t nbytes) HTS_RESULT_USED;\n\n    /* As per write(2), returning the number of bytes written or negative (and\n       setting errno) on errors.  Front-end code will call this repeatedly if\n       necessary until the desired block is written or an error occurs.  */\n    ssize_t (*write)(hFILE *fp, const void *buffer, size_t nbytes)\n        HTS_RESULT_USED;\n\n    /* As per lseek(2), returning the resulting offset within the stream or\n       negative (and setting errno) on errors.  */\n    off_t (*seek)(hFILE *fp, off_t offset, int whence) HTS_RESULT_USED;\n\n    /* Performs low-level flushing, if any, e.g., fsync(2); for writing streams\n       only.  Returns 0 for success or negative (and sets errno) on errors. */\n    int (*flush)(hFILE *fp) HTS_RESULT_USED;\n\n    /* Closes the underlying stream (for output streams, the buffer will\n       already have been flushed), returning 0 for success or negative (and\n       setting errno) on errors, as per close(2).  */\n    int (*close)(hFILE *fp) HTS_RESULT_USED;\n};\n\n/* May be called by hopen_*() functions to decode a fopen()-style mode into\n   open(2)-style flags.  */\nint hfile_oflags(const char *mode);\n\n/* Must be called by hopen_*() functions to allocate the hFILE struct and set\n   up its base.  Capacity is a suggested buffer size (e.g., via fstat(2))\n   or 0 for a default-sized buffer.  */\nhFILE *hfile_init(size_t struct_size, const char *mode, size_t capacity);\n\n/* Alternative to hfile_init() for in-memory backends for which the base\n   buffer is the only storage.  Buffer is already allocated via malloc(2)\n   of size buf_size and with buf_filled bytes already filled.  Ownership\n   of the buffer is transferred to the resulting hFILE.  */\nhFILE *hfile_init_fixed(size_t struct_size, const char *mode,\n                        char *buffer, size_t buf_filled, size_t buf_size);\n\n/* May be called by hopen_*() functions to undo the effects of hfile_init()\n   in the event opening the stream subsequently fails.  (This is safe to use\n   even if fp is NULL.  This takes care to preserve errno.)  */\nvoid hfile_destroy(hFILE *fp);\n\n\nstruct hFILE_scheme_handler {\n    /* Opens a stream when dispatched by hopen(); should call hfile_init()\n       to malloc a struct \"derived\" from hFILE and initialise it appropriately,\n       including setting base.backend to its own backend vector.  */\n    hFILE *(*open)(const char *filename, const char *mode) HTS_RESULT_USED;\n\n    /* Returns whether the URL denotes remote storage when dispatched by\n       hisremote().  For simple cases, use one of hfile_always_*() below.  */\n    int (*isremote)(const char *filename) HTS_RESULT_USED;\n\n    /* The name of the plugin or other code providing this handler.  */\n    const char *provider;\n\n    /* If multiple handlers are registered for the same scheme, the one with\n       the highest priority is used; range is 0 (lowest) to 100 (highest).\n       This field is used modulo 1000 as a priority; thousands indicate\n       later revisions to this structure, as noted below.  */\n    int priority;\n\n    /* Fields below are present when priority >= 2000.  */\n\n    /* Same as the open() method, used when extra arguments have been given\n       to hopen().  */\n    hFILE *(*vopen)(const char *filename, const char *mode, va_list args)\n        HTS_RESULT_USED;\n};\n\n/* May be used as an isremote() function in simple cases.  */\nextern int hfile_always_local (const char *fname);\nextern int hfile_always_remote(const char *fname);\n\n/* Should be called by plugins for each URL scheme they wish to handle.  */\nvoid hfile_add_scheme_handler(const char *scheme,\n                              const struct hFILE_scheme_handler *handler);\n\nstruct hFILE_plugin {\n    /* On entry, HTSlib's plugin API version (currently 1).  */\n    int api_version;\n\n    /* On entry, the plugin's handle as returned by dlopen() etc.  */\n    void *obj;\n\n    /* The plugin should fill this in with its (human-readable) name.  */\n    const char *name;\n\n    /* The plugin may wish to fill in a function to be called on closing.  */\n    void (*destroy)(void);\n};\n\n#ifdef ENABLE_PLUGINS\n#define PLUGIN_GLOBAL(identifier,suffix) identifier\n\n/* Plugins must define an entry point with this signature.  */\nextern int hfile_plugin_init(struct hFILE_plugin *self);\n\n#else\n#define PLUGIN_GLOBAL(identifier,suffix) identifier##suffix\n\n/* Only plugins distributed within the HTSlib source that might be built\n   even with --disable-plugins need to use PLUGIN_GLOBAL and be listed here;\n   others can simply define hfile_plugin_init().  */\n\nextern int hfile_plugin_init_gcs(struct hFILE_plugin *self);\nextern int hfile_plugin_init_libcurl(struct hFILE_plugin *self);\nextern int hfile_plugin_init_s3(struct hFILE_plugin *self);\n#endif\n\n/* This one is never built as a separate plugin.  */\nextern int hfile_plugin_init_net(struct hFILE_plugin *self);\n\n// Callback to allow headers to be set in http connections.  Currently used\n// to allow s3 to renew tokens when seeking.  Kept internal for now,\n// although we may consider exposing it in the API later.\ntypedef int (* hts_httphdr_callback) (void *cb_data, char ***hdrs);\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-r-rhtslib-1.12.1-qikvlnpbnugatvfip5svqkgqr54bsvnl/spack-src/src/htslib-1.7/test/xx#large_aux_java.cram",
        "/tmp/vanessa/spack-stage/spack-stage-r-rhtslib-1.12.1-qikvlnpbnugatvfip5svqkgqr54bsvnl/spack-src/src/htslib-1.7/test/auxf#values_java.cram",
        "/tmp/vanessa/spack-stage/spack-stage-r-rhtslib-1.12.1-qikvlnpbnugatvfip5svqkgqr54bsvnl/spack-src/src/htslib-1.7/test/bgziptest.txt.gz.gzi",
        "/tmp/vanessa/spack-stage/spack-stage-r-rhtslib-1.12.1-qikvlnpbnugatvfip5svqkgqr54bsvnl/spack-src/src/htslib-1.7/test/ce#5b_java.cram",
        "/tmp/vanessa/spack-stage/spack-stage-r-rhtslib-1.12.1-qikvlnpbnugatvfip5svqkgqr54bsvnl/spack-src/src/htslib-1.7/test/bgziptest.txt.gz",
        "/tmp/vanessa/spack-stage/spack-stage-r-rhtslib-1.12.1-qikvlnpbnugatvfip5svqkgqr54bsvnl/spack-src/.git/objects/pack/pack-4c4bf31960a30ce99f226e70c9cc39ba76b49283.pack",
        "/tmp/vanessa/spack-stage/spack-stage-r-rhtslib-1.12.1-qikvlnpbnugatvfip5svqkgqr54bsvnl/spack-src/.git/objects/pack/pack-4c4bf31960a30ce99f226e70c9cc39ba76b49283.idx"
    ],
    "total_files": 232
}