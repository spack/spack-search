{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-py-pyjnius-1.3.0.0-nj73w3q5pel32pciywsrjyrimll5yivv/spack-src/setup.py": "'''\nSetup.py for creating a binary distribution.\n'''\n\nfrom __future__ import print_function\nfrom setuptools import setup, Extension\nfrom setuptools.command.build_ext import build_ext\ntry:\n    import subprocess32 as subprocess\nexcept ImportError:\n    import subprocess\n\nfrom os import environ\nfrom os.path import dirname, join, exists\nimport re\nimport sys\nfrom platform import machine\nfrom setup_sdist import SETUP_KWARGS\n\n# XXX hack to be able to import jnius.env withough having build\n# jnius.jnius yet, better solution welcome\nsyspath = sys.path[:]\nsys.path.insert(0, 'jnius')\nfrom env import (\n    get_possible_homes,\n    get_library_dirs,\n    get_include_dirs,\n    get_libraries,\n    find_javac,\n    PY2,\n)\nsys.path = syspath\n\ndef getenv(key):\n    '''Get value from environment and decode it.'''\n    val = environ.get(key)\n    if val is not None and not PY2:\n        try:\n            return val.decode()\n        except AttributeError:\n            return val\n    return val\n\n\nFILES = [\n    'jni.pxi',\n    'jnius_compat.pxi',\n    'jnius_conversion.pxi',\n    'jnius_export_class.pxi',\n    'jnius_export_func.pxi',\n    'jnius_jvm_android.pxi',\n    'jnius_jvm_desktop.pxi',\n    'jnius_jvm_dlopen.pxi',\n    'jnius_localref.pxi',\n    'jnius_nativetypes.pxi',\n    'jnius_nativetypes3.pxi',\n    'jnius_proxy.pxi',\n    'jnius.pyx',\n    'jnius_utils.pxi',\n]\n\nEXTRA_LINK_ARGS = []\nINSTALL_REQUIRES = ['six>=1.7.0']\nSETUP_REQUIRES = []\n\n# detect Python for android\nPLATFORM = sys.platform\nNDKPLATFORM = getenv('NDKPLATFORM')\nif NDKPLATFORM is not None and getenv('LIBLINK'):\n    PLATFORM = 'android'\n\n# detect cython\nif PLATFORM != 'android':\n    SETUP_REQUIRES.append('cython')\n    INSTALL_REQUIRES.append('cython')\nelse:\n    FILES = [fn[:-3] + 'c' for fn in FILES if fn.endswith('pyx')]\n\n\ndef compile_native_invocation_handler(*possible_homes):\n    '''Find javac and compile NativeInvocationHandler.java.'''\n    javac = find_javac(PLATFORM, possible_homes)\n    source_level = '1.7'\n    try:\n        subprocess.check_call([\n            javac, '-target', source_level, '-source', source_level,\n            join('jnius', 'src', 'org', 'jnius', 'NativeInvocationHandler.java')\n        ])\n    except FileNotFoundError:\n        subprocess.check_call([\n            javac.replace('\"', ''), '-target', source_level, '-source', source_level,\n            join('jnius', 'src', 'org', 'jnius', 'NativeInvocationHandler.java')\n        ])\n\ncompile_native_invocation_handler(*get_possible_homes(PLATFORM))\n\n\n# generate the config.pxi\nwith open(join(dirname(__file__), 'jnius', 'config.pxi'), 'w') as fd:\n    fd.write('DEF JNIUS_PLATFORM = {0!r}\\n\\n'.format(PLATFORM))\n    if not PY2:\n        fd.write('# cython: language_level=3\\n\\n')\n        fd.write('DEF JNIUS_PYTHON3 = True\\n\\n')\n    else:\n        fd.write('# cython: language_level=2\\n\\n')\n        fd.write('DEF JNIUS_PYTHON3 = False\\n\\n')\n\n# pop setup.py from included files in the installed package\nSETUP_KWARGS['py_modules'].remove('setup')\n\n# create the extension\nsetup(\n    cmdclass={'build_ext': build_ext},\n    install_requires=INSTALL_REQUIRES,\n    setup_requires=SETUP_REQUIRES,\n    ext_modules=[\n        Extension(\n            'jnius', [join('jnius', x) for x in FILES],\n            libraries=get_libraries(PLATFORM),\n            library_dirs=get_library_dirs(PLATFORM),\n            include_dirs=get_include_dirs(PLATFORM),\n            extra_link_args=EXTRA_LINK_ARGS,\n        )\n    ],\n    extras_require={\n        'dev': ['pytest', 'wheel', 'pytest-cov', 'pycodestyle'],\n        'ci': ['coveralls', 'pytest-rerunfailures', 'setuptools>=34.4.0'],\n    },\n    **SETUP_KWARGS\n)\n",
        "/tmp/vanessa/spack-stage/spack-stage-py-pyjnius-1.3.0.0-nj73w3q5pel32pciywsrjyrimll5yivv/spack-src/jnius/jnius_jvm_dlopen.pxi": "include \"config.pxi\"\nimport os\nfrom shlex import split\nfrom subprocess import check_output, CalledProcessError\nfrom os.path import dirname, join, exists\nfrom os import readlink\nfrom sys import platform\nfrom .env import get_jnius_lib_location\n\n\ncdef extern from 'dlfcn.h' nogil:\n    void* dlopen(const char *filename, int flag)\n    char *dlerror()\n    void *dlsym(void *handle, const char *symbol)\n    int dlclose(void *handle)\n\n    unsigned int RTLD_LAZY\n    unsigned int RTLD_NOW\n    unsigned int RTLD_GLOBAL\n    unsigned int RTLD_LOCAL\n    unsigned int RTLD_NODELETE\n    unsigned int RTLD_NOLOAD\n    unsigned int RTLD_DEEPBIND\n\n    unsigned int RTLD_DEFAULT\n    long unsigned int RTLD_NEXT\n\n\ncdef extern from \"jni.h\":\n    int JNI_VERSION_1_6\n    int JNI_OK\n    jboolean JNI_FALSE\n    ctypedef struct JavaVMInitArgs:\n        jint version\n        jint nOptions\n        jboolean ignoreUnrecognized\n        JavaVMOption *options\n    ctypedef struct JavaVMOption:\n        char *optionString\n        void *extraInfo\n\ncdef JNIEnv *_platform_default_env = NULL\n\n\ncdef find_java_home():\n    if platform in ('linux2', 'linux'):\n        java = check_output(split('which javac')).strip()\n        if not java:\n            java = check_output(split('which java')).strip()\n            if not java:\n                return\n\n        while True:\n            try:\n                java = readlink(java)\n            except OSError:\n                break\n        return dirname(dirname(java)).decode('utf8')\n    \n    if platform == 'darwin':\n        MAC_JAVA_HOME='/usr/libexec/java_home'\n        # its a mac\n        if not exists(MAC_JAVA_HOME):\n            # I believe this always exists, but just in case\n            return\n        try:\n            java = check_output(MAC_JAVA_HOME).strip().decode('utf8')\n            return java\n        except CalledProcessError as exc:\n            # java_home return non-zero exit code if no Javas are installed\n            return\n        \n\n\ncdef void create_jnienv() except *:\n    cdef JavaVM* jvm\n    cdef JavaVMInitArgs args\n    cdef JavaVMOption *options\n    cdef int ret\n    cdef bytes py_bytes\n    cdef void *handle\n    import jnius_config\n\n    JAVA_HOME = os.getenv('JAVA_HOME') or find_java_home()\n    if JAVA_HOME is None or JAVA_HOME == '':\n        raise SystemError(\"JAVA_HOME is not set, and unable to guess JAVA_HOME\")\n    cdef str JNIUS_LIB_SUFFIX = get_jnius_lib_location(JNIUS_PLATFORM)\n\n    IF JNIUS_PYTHON3:\n        try:\n            jnius_lib_suffix = JNIUS_LIB_SUFFIX.decode(\"utf-8\")\n        except AttributeError:\n            jnius_lib_suffix = JNIUS_LIB_SUFFIX\n        lib_path = str_for_c(os.path.join(JAVA_HOME, jnius_lib_suffix))\n    ELSE:\n        lib_path = str_for_c(os.path.join(JAVA_HOME, JNIUS_LIB_SUFFIX))\n\n    handle = dlopen(lib_path, RTLD_NOW | RTLD_GLOBAL)\n\n    if handle == NULL:\n        raise SystemError(\"Error calling dlopen({0}: {1}\".format(lib_path, dlerror()))\n\n    cdef void *jniCreateJVM = dlsym(handle, b\"JNI_CreateJavaVM\")\n\n    if jniCreateJVM == NULL:\n       raise SystemError(\"Error calling dlfcn for JNI_CreateJavaVM: {0}\".format(dlerror()))\n\n    optarr = jnius_config.options\n    optarr.append(\"-Djava.class.path=\" + jnius_config.expand_classpath())\n\n    options = <JavaVMOption*>malloc(sizeof(JavaVMOption) * len(optarr))\n    for i, opt in enumerate(optarr):\n        optbytes = str_for_c(opt)\n        options[i].optionString = <bytes>(optbytes)\n        options[i].extraInfo = NULL\n\n    args.version = JNI_VERSION_1_6\n    args.options = options\n    args.nOptions = len(optarr)\n    args.ignoreUnrecognized = JNI_FALSE\n\n    ret = (<jint (*)(JavaVM **pvm, void **penv, void *args)> jniCreateJVM)(&jvm, <void **>&_platform_default_env, &args)\n    free(options)\n\n    if ret != JNI_OK:\n        raise SystemError(\"JVM failed to start: {0}\".format(ret))\n\n    jnius_config.vm_running = True\n    import traceback\n    jnius_config.vm_started_at = ''.join(traceback.format_stack())\n\ncdef JNIEnv *get_platform_jnienv() except NULL:\n    if _platform_default_env == NULL:\n        create_jnienv()\n    return _platform_default_env\n",
        "/tmp/vanessa/spack-stage/spack-stage-py-pyjnius-1.3.0.0-nj73w3q5pel32pciywsrjyrimll5yivv/spack-src/jnius/jnius.pyx": "\n'''\nJava wrapper\n============\n\nWith this module, you can create Python class that reflects a Java class, and use\nit directly in Python.\n\nExample with static method\n--------------------------\n\nJava::\n\n    package org.test;\n    public class Hardware {\n        static int getDPI() {\n            return metrics.densityDpi;\n        }\n    }\n\nPython::\n\n    class Hardware(JavaClass):\n        __metaclass__ = MetaJavaClass\n        __javaclass__ = 'org/test/Hardware'\n        getDPI = JavaStaticMethod('()I')\n\n    Hardware.getDPI()\n\n\nExample with instance method\n----------------------------\n\nJava::\n\n    package org.test;\n    public class Action {\n        public String getName() {\n            return new String(\"Hello world\")\n        }\n    }\n\nPython::\n\n    class Action(JavaClass):\n        __metaclass__ = MetaJavaClass\n        __javaclass__ = 'org/test/Action'\n        getName = JavaMethod('()Ljava/lang/String;')\n\n    action = Action()\n    print action.getName()\n    # will output Hello World\n\n\nExample with static/instance field\n----------------------------------\n\nJava::\n\n    package org.test;\n    public class Test {\n        public static String field1 = new String(\"hello\");\n        public String field2;\n\n        public Test() {\n            this.field2 = new String(\"world\");\n        }\n    }\n\nPython::\n\n    class Test(JavaClass):\n        __metaclass__ = MetaJavaClass\n        __javaclass__ = 'org/test/Test'\n\n        field1 = JavaStaticField('Ljava/lang/String;')\n        field2 = JavaField('Ljava/lang/String;')\n\n    # access directly to the static field\n    print Test.field1\n\n    # create the instance, and access to the instance field\n    test = Test()\n    print test.field2\n\n'''\n\n__all__ = ('JavaObject', 'JavaClass', 'JavaMethod', 'JavaField',\n           'JavaStaticMethod', 'JavaStaticField', 'JavaMultipleMethod',\n           'MetaJavaBase', 'MetaJavaClass', 'JavaException', 'cast',\n           'find_javaclass', 'PythonJavaClass', 'java_method', 'detach')\n\nfrom libc.stdlib cimport malloc, free\nfrom functools import partial\nimport sys\nimport traceback\n\ninclude \"jnius_compat.pxi\"\ninclude \"jni.pxi\"\ninclude \"config.pxi\"\n\nIF JNIUS_PLATFORM == \"android\":\n    include \"jnius_jvm_android.pxi\"\nELIF JNIUS_PLATFORM == \"win32\":\n    include \"jnius_jvm_desktop.pxi\"\nELSE:\n    include \"jnius_jvm_dlopen.pxi\"\n\ninclude \"jnius_env.pxi\"\ninclude \"jnius_utils.pxi\"\ninclude \"jnius_conversion.pxi\"\ninclude \"jnius_localref.pxi\"\nIF JNIUS_PYTHON3:\n    include \"jnius_nativetypes3.pxi\"\nELSE:\n    include \"jnius_nativetypes.pxi\"\n\ninclude \"jnius_export_func.pxi\"\ninclude \"jnius_export_class.pxi\"\n\ninclude \"jnius_proxy.pxi\"\n",
        "/tmp/vanessa/spack-stage/spack-stage-py-pyjnius-1.3.0.0-nj73w3q5pel32pciywsrjyrimll5yivv/spack-src/pyjnius.egg-info/SOURCES.txt": "LICENSE\nMANIFEST.in\nREADME.md\njnius_config.py\nsetup.py\nsetup_sdist.py\njnius/__init__.py\njnius/config.pxi\njnius/env.py\njnius/jni.pxi\njnius/jnius.pyx\njnius/jnius_compat.pxi\njnius/jnius_conversion.pxi\njnius/jnius_env.pxi\njnius/jnius_export_class.pxi\njnius/jnius_export_func.pxi\njnius/jnius_jvm_android.pxi\njnius/jnius_jvm_desktop.pxi\njnius/jnius_jvm_dlopen.pxi\njnius/jnius_localref.pxi\njnius/jnius_nativetypes.pxi\njnius/jnius_nativetypes3.pxi\njnius/jnius_proxy.pxi\njnius/jnius_utils.pxi\njnius/reflect.py\njnius/signatures.py\njnius/src/org/jnius/NativeInvocationHandler.class\njnius/src/org/jnius/NativeInvocationHandler.java\npyjnius.egg-info/PKG-INFO\npyjnius.egg-info/SOURCES.txt\npyjnius.egg-info/dependency_links.txt\npyjnius.egg-info/requires.txt\npyjnius.egg-info/top_level.txt"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-py-pyjnius-1.3.0.0-nj73w3q5pel32pciywsrjyrimll5yivv/spack-src/jnius/src/org/jnius/NativeInvocationHandler.class"
    ],
    "total_files": 32
}