{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/corelib/ncbidll.cpp": "/*  $Id: ncbidll.cpp 311608 2011-07-12 16:01:42Z gouriano $\n * ===========================================================================\n *\n *                            PUBLIC DOMAIN NOTICE\n *               National Center for Biotechnology Information\n *\n *  This software/database is a \"United States Government Work\" under the\n *  terms of the United States Copyright Act.  It was written as part of\n *  the author's official duties as a United States Government employee and\n *  thus cannot be copyrighted.  This software/database is freely available\n *  to the public for use. The National Library of Medicine and the U.S.\n *  Government have not placed any restriction on its use or reproduction.\n *\n *  Although all reasonable efforts have been taken to ensure the accuracy\n *  and reliability of the software and data, the NLM and the U.S.\n *  Government do not and cannot warrant the performance or results that\n *  may be obtained by using this software or data. The NLM and the U.S.\n *  Government disclaim all warranties, express or implied, including\n *  warranties of performance, merchantability or fitness for any particular\n *  purpose.\n *\n *  Please cite the author in any work or product based on this material.\n *\n * ===========================================================================\n *\n * Author: Vladimir Ivanov, Denis Vakatov\n *\n * File Description:\n *   Portable DLL handling\n *\n */\n\n#include <ncbi_pch.hpp>\n#include <corelib/ncbidll.hpp>\n#include <corelib/ncbifile.hpp>\n#include <corelib/ncbiapp.hpp>\n#include <corelib/error_codes.hpp>\n#include \"ncbisys.hpp\"\n\n\n#if defined(NCBI_OS_MSWIN)\n#  include <corelib/ncbi_os_mswin.hpp>\n#elif defined(NCBI_OS_UNIX)\n#  ifdef NCBI_OS_DARWIN\n#    include <mach-o/dyld.h>\n#  endif\n#  ifdef HAVE_DLFCN_H\n#    include <dlfcn.h>\n#    ifndef RTLD_LOCAL /* missing on Cygwin? */\n#      define RTLD_LOCAL 0\n#    endif\n#  endif\n#else\n#  error \"Class CDll defined only for MS Windows and UNIX platforms\"\n#endif\n\n#if defined(NCBI_OS_MSWIN)\n#  pragma warning (disable : 4191)\n#endif\n\n\n#define NCBI_USE_ERRCODE_X   Corelib_Dll\n\n\nBEGIN_NCBI_SCOPE\n\n\n// Platform-dependent DLL handle type definition\nstruct SDllHandle {\n#if defined(NCBI_OS_MSWIN)\n    HMODULE handle;\n#elif defined(NCBI_OS_UNIX)\n    void*   handle;\n#endif\n};\n\n// Check flag bits\n#define F_ISSET(mask) ((m_Flags & (mask)) == (mask))\n// Clean up an all non-default bits in group if all bits are set\n#define F_CLEAN_REDUNDANT(group) \\\n    if (F_ISSET(group)) m_Flags &= ~unsigned((group) & ~unsigned(fDefault))\n\n\nCDll::CDll(const string& name, TFlags flags)\n{\n    x_Init(kEmptyStr, name, flags);\n}\n\nCDll::CDll(const string& path, const string& name, TFlags flags)\n{\n    x_Init(path, name, flags);\n}\n\nCDll::CDll(const string& name, ELoad when_to_load, EAutoUnload auto_unload,\n           EBasename treate_as)\n{\n    x_Init(kEmptyStr, name,\n           TFlags(when_to_load) | TFlags(auto_unload) | TFlags(treate_as));\n}\n\n\nCDll::CDll(const string& path, const string& name, ELoad when_to_load,\n           EAutoUnload auto_unload, EBasename treate_as)\n{\n    x_Init(path, name,\n           TFlags(when_to_load) | TFlags(auto_unload) | TFlags(treate_as));\n}\n\n\nCDll::~CDll()\n{\n    // Unload DLL automaticaly\n    if ( F_ISSET(fAutoUnload) ) {\n        try {\n            Unload();\n        } catch(CException& e) {\n            NCBI_REPORT_EXCEPTION_X(1, \"CDll destructor\", e);\n        }\n    }\n    delete m_Handle;\n}\n\n\nvoid CDll::x_Init(const string& path, const string& name, TFlags flags)\n{\n    // Save flags\n    m_Flags = flags;\n\n    // Reset redundant flags\n    F_CLEAN_REDUNDANT(fLoadNow    | fLoadLater);\n    F_CLEAN_REDUNDANT(fAutoUnload | fNoAutoUnload);\n    F_CLEAN_REDUNDANT(fBaseName   | fExactName);\n    F_CLEAN_REDUNDANT(fGlobal     | fLocal);\n\n    // Init members\n    m_Handle = 0;\n    string x_name = name;\n#if defined(NCBI_OS_MSWIN)\n    NStr::ToLower(x_name);\n#endif\n    // Process DLL name\n    if (F_ISSET(fBaseName)  &&\n        name.find_first_of(\":/\\\\\") == NPOS  &&\n        !CDirEntry::MatchesMask(name.c_str(),\n                                NCBI_PLUGIN_PREFIX \"*\" NCBI_PLUGIN_MIN_SUFFIX\n                                \"*\")\n        ) {\n        // \"name\" is basename\n        x_name = NCBI_PLUGIN_PREFIX + x_name + NCBI_PLUGIN_SUFFIX;\n    }\n    m_Name = CDirEntry::ConcatPath(path, x_name);\n    // Load DLL now if indicated\n    if (F_ISSET(fLoadNow)) {\n        Load();\n    }\n}\n\n\nvoid CDll::Load(void)\n{\n    // DLL is already loaded\n    if ( m_Handle ) {\n        return;\n    }\n    // Load DLL\n    _TRACE(\"Loading dll: \"<<m_Name);\n#if defined(NCBI_OS_MSWIN)\n    UINT errMode = SetErrorMode(SEM_FAILCRITICALERRORS);\n    HMODULE handle = LoadLibrary(_T_XCSTRING(m_Name));\n    SetErrorMode(errMode);\n#elif defined(NCBI_OS_UNIX)\n#  ifdef HAVE_DLFCN_H\n    int flags = RTLD_LAZY | (F_ISSET(fLocal) ? RTLD_LOCAL : RTLD_GLOBAL);\n    void* handle = dlopen(m_Name.c_str(), flags);\n#  else\n    void* handle = 0;\n#  endif\n#endif\n    if ( !handle ) {\n        x_ThrowException(\"CDll::Load\");\n    }\n    m_Handle = new SDllHandle;\n    m_Handle->handle = handle;\n}\n\n\nvoid CDll::Unload(void)\n{\n    // DLL is not loaded\n    if ( !m_Handle ) {\n        return;\n    }\n    _TRACE(\"Unloading dll: \"<<m_Name);\n    // Unload DLL\n#if defined(NCBI_OS_MSWIN)\n    BOOL unloaded = FreeLibrary(m_Handle->handle);\n#elif defined(NCBI_OS_UNIX)\n#  ifdef HAVE_DLFCN_H\n    bool unloaded = dlclose(m_Handle->handle) == 0;\n#  else\n    bool unloaded = false;\n#  endif\n#endif\n    if ( !unloaded ) {\n        x_ThrowException(\"CDll::Unload\");\n    }\n\n    delete m_Handle;\n    m_Handle = 0;\n}\n\n\nCDll::TEntryPoint CDll::GetEntryPoint(const string& name)\n{\n    // If DLL is not yet loaded\n    if ( !m_Handle ) {\n        Load();\n    }\n    _TRACE(\"Getting entry point: \"<<name);\n    TEntryPoint entry;\n\n    // Return address of entry (function or data)\n#if defined(NCBI_OS_MSWIN)\n    FARPROC ptr = GetProcAddress(m_Handle->handle, name.c_str());\n#elif defined(NCBI_OS_DARWIN)\n    NSModule module = (NSModule)m_Handle->handle;\n    NSSymbol nssymbol = NSLookupSymbolInModule(module, name.c_str());\n    void* ptr = 0;\n    ptr = NSAddressOfSymbol(nssymbol);\n    if (ptr == NULL) {\n        ptr = dlsym (m_Handle->handle, name.c_str());\n    }\n#elif defined(NCBI_OS_UNIX)  &&  defined(HAVE_DLFCN_H)\n    void* ptr = 0;\n    ptr = dlsym(m_Handle->handle, name.c_str());\n#else\n    void* ptr = 0;\n#endif\n    entry.func = (FEntryPoint)ptr;\n    entry.data = ptr;\n    return entry;\n}\n\n\nvoid CDll::x_ThrowException(const string& what)\n{\n#if defined(NCBI_OS_MSWIN)\n    TXChar* ptr = NULL;\n    FormatMessage(FORMAT_MESSAGE_ALLOCATE_BUFFER |\n                  FORMAT_MESSAGE_FROM_SYSTEM |\n                  FORMAT_MESSAGE_IGNORE_INSERTS,\n                  NULL, GetLastError(),\n                  MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),\n                  (TXChar*) &ptr, 0, NULL);\n    string errmsg = ptr ? _T_CSTRING(ptr) : \"unknown reason\";\n    LocalFree(ptr);\n#elif defined(NCBI_OS_UNIX)\n#  ifdef HAVE_DLFCN_H\n    const char* errmsg = dlerror();\n    if ( !errmsg ) {\n        errmsg = \"unknown reason\";\n    }\n#  else\n    const char* errmsg = \"No DLL support on this platform.\";\n#  endif\n#endif\n\n    NCBI_THROW(CCoreException, eDll, what + \" [\" + m_Name +\"]: \" + errmsg);\n}\n\n\nCDllResolver::CDllResolver(const string& entry_point_name,\n                           CDll::EAutoUnload unload)\n    : m_AutoUnloadDll(unload)\n{\n    m_EntryPoinNames.push_back(entry_point_name);\n}\n\nCDllResolver::CDllResolver(const vector<string>& entry_point_names,\n                           CDll::EAutoUnload unload)\n    : m_AutoUnloadDll(unload)\n{\n    m_EntryPoinNames = entry_point_names;\n}\n\nCDllResolver::~CDllResolver()\n{\n    Unload();\n}\n\nbool CDllResolver::TryCandidate(const string& file_name,\n                                const string& driver_name)\n{\n    try {\n        CDll* dll = new CDll(file_name, CDll::fLoadNow | CDll::fNoAutoUnload);\n        CDll::TEntryPoint p;\n\n        SResolvedEntry entry_point(dll);\n\n        ITERATE(vector<string>, it, m_EntryPoinNames) {\n            string entry_point_name;\n\n            const string& dll_name = dll->GetName();\n\n            if ( !dll_name.empty() ) {\n                string base_name;\n                CDirEntry::SplitPath(dll_name, 0, &base_name, 0);\n                NStr::Replace(*it,\n                              \"${basename}\", base_name, entry_point_name);\n\n                if (!driver_name.empty()) {\n                    NStr::Replace(*it,\n                            \"${driver}\", driver_name, entry_point_name);\n                }\n            }\n\n            // Check for the BASE library name macro\n\n            if ( entry_point_name.empty() )\n                continue;\n            p = dll->GetEntryPoint(entry_point_name);\n            if ( p.data ) {\n                entry_point.entry_points.push_back(SNamedEntryPoint(entry_point_name, p));\n            }\n        } // ITERATE\n\n        if ( entry_point.entry_points.empty() ) {\n            dll->Unload();\n            delete dll;\n            return false;\n        }\n\n        m_ResolvedEntries.push_back(entry_point);\n    }\n    catch (CCoreException& ex)\n    {\n        if (ex.GetErrCode() != CCoreException::eDll)\n            throw;\n        return false;\n    }\n\n    return true;\n}\n\nstatic inline\nstring s_GetProgramPath(void)\n{\n    string dir;\n    CDirEntry::SplitPath\n        (CNcbiApplication::GetAppName(CNcbiApplication::eFullName), &dir);\n    return dir;\n}\n\nvoid CDllResolver::x_AddExtraDllPath(vector<string>& paths, TExtraDllPath which)\n{\n    // Nothing to do\n\n    if (which == fNoExtraDllPath) {\n        return;\n    }\n\n    // Add program executable path\n\n    if ((which & fProgramPath) != 0) {\n        string dir = s_GetProgramPath();\n        if ( !dir.empty() ) {\n            paths.push_back(dir);\n        }\n    }\n\n    // Add systems directories\n\n    if ((which & fSystemDllPath) != 0) {\n#if defined(NCBI_OS_MSWIN)\n        // Get Windows system directories\n        TXChar buf[MAX_PATH+1];\n        UINT len = GetSystemDirectory(buf, MAX_PATH+1);\n        if (len>0  &&  len<=MAX_PATH) {\n            paths.push_back(_T_STDSTRING(buf));\n        }\n        len = GetWindowsDirectory(buf, MAX_PATH+1);\n        if (len>0  &&  len<=MAX_PATH) {\n            paths.push_back(_T_STDSTRING(buf));\n        }\n        // Parse PATH environment variable\n        const TXChar* env = NcbiSys_getenv(_TX(\"PATH\"));\n        if (env  &&  *env) {\n            NStr::Tokenize(_T_STDSTRING(env), \";\", paths);\n        }\n\n#elif defined(NCBI_OS_UNIX)\n        // From LD_LIBRARY_PATH environment variable\n        const char* env = getenv(\"LD_LIBRARY_PATH\");\n        if (env  &&  *env) {\n            NStr::Tokenize(env, \":\", paths);\n        }\n#endif\n    }\n\n    // Add hardcoded runpath\n\n    if ((which & fToolkitDllPath) != 0) {\n        const char* runpath = NCBI_GetRunpath();\n        if (runpath  &&  *runpath) {\n#  if defined(NCBI_OS_MSWIN)\n            NStr::Tokenize(runpath, \";\", paths);\n#  elif defined(NCBI_OS_UNIX)\n            vector<string> tokenized;\n            NStr::Tokenize(runpath, \":\", tokenized);\n            ITERATE(vector<string>, i, tokenized) {\n                if (i->find(\"$ORIGIN\") == NPOS) {\n                    paths.push_back(*i);\n                } else {\n                    string dir = s_GetProgramPath();\n                    if ( !dir.empty() ) {\n                        // Need to know the $ORIGIN else discard path.\n                        paths.push_back(NStr::Replace(*i, \"$ORIGIN\", dir));\n                    }\n                }\n            }\n#  else\n            paths.push_back(runpath);\n#  endif\n        }\n    }\n\n    return;\n}\n\nvoid CDllResolver::Unload()\n{\n    NON_CONST_ITERATE(TEntries, it, m_ResolvedEntries) {\n        if ( m_AutoUnloadDll == CDll::eAutoUnload ) {\n            it->dll->Unload();\n        }\n        delete it->dll;\n    }\n    m_ResolvedEntries.resize(0);\n}\n\n\nEND_NCBI_SCOPE\n",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/build-system/configure.ac": "#############################################################################\n#  $Id: configure.ac 448295 2014-10-03 17:25:19Z ivanov $\n#  Derived from configure.in version 1.173.\n# ==========================================================================\n#\n#                            PUBLIC DOMAIN NOTICE\n#               National Center for Biotechnology Information\n#\n#  This software/database is a \"United States Government Work\" under the\n#  terms of the United States Copyright Act.  It was written as part of\n#  the author's official duties as a United States Government employee and\n#  thus cannot be copyrighted.  This software/database is freely available\n#  to the public for use. The National Library of Medicine and the U.S.\n#  Government have not placed any restriction on its use or reproduction.\n#\n#  Although all reasonable efforts have been taken to ensure the accuracy\n#  and reliability of the software and data, the NLM and the U.S.\n#  Government do not and cannot warrant the performance or results that\n#  may be obtained by using this software or data. The NLM and the U.S.\n#  Government disclaim all warranties, express or implied, including\n#  warranties of performance, merchantability or fitness for any particular\n#  purpose.\n#\n#  Please cite the author in any work or product based on this material.\n#\n# ==========================================================================\n#\n# Authors:  Denis Vakatov, Aaron Ucko\n#\n# File Description:\n#   Setup NCBI C++ Toolkit build tree - tuned for your platform, compiler, etc.\n#   USAGE:\n#    1) Process this file with \"autoconf\" to produce a \"configure\" script.\n#    2) Run the resultant \"configure\" script to produce:\n#      a) \"<builddir>/inc/ncbiconf_unix.h\"\n#      b) \"<builddir>/build/Makefile.mk\"\n#      c) other Makefile's and scripts in \"<builddir>/build\" and below\n#\n#############################################################################\n\nAC_PREREQ(2.60)\n\ndnl Early setup, most crucially for locking.  The diversion magic lets\ndnl this occur before AC_INIT, which already interferes with other\ndnl configure processes.\n\nAC_DIVERT_PUSH(INIT_PREPARE)\n\n# Check --with-3psw=.../--without-3psw early because a lot hinges on it\norig_NCBI=$NCBI\ncase \"$with_3psw\" in\n   '' | yes | [[\\$/][Nn]*:[SsLl]*] | [[Nn]*:[SsLl]*] )\n      ncbi_favor_std_packages=no\n      ;;\n   [[SsLl]]*:* )\n      ncbi_favor_std_packages=yes\n      ;;\n   [[SsLl]]* )\n      AS_UNSET(NCBI)\n      ;;\n   no )\n      if test \"${with_ncbi_c-no}\" != \"no\"; then\n         AC_MSG_ERROR([incompatible options: --with-ncbi-c but --without-3psw])\n      else\n         with_ncbi_c=no\n      fi\n      m4_foreach(X, [sss, sssutils, sssdb, z, bz2, lzo, pcre,\n                     gcrypt, gnutls, openssl, krb5, boost,\n                     sybase, ftds, mysql, opengl, mesa, glut, glew,\n                     wxwidgets, freetype, ftgl, fastcgi, bdb, orbacus, odbc,\n                     python, perl, jni, sqlite3, mimetic, sge, icu, sp, expat,\n                     sablot, libxml, libxslt, libexslt, xerces, xalan, zorba,\n                     oechem, muparser, hdf5, gif, jpeg, png, tiff, xpm,\n                     magic, curl, gsoap, avro, mongodb],\n        [if test \"${[with_]X-no}\" != \"no\"; then\n            AC_MSG_ERROR([incompatible options: --with-]X[ but --without-3psw])\n         else\n            [with_]X=no\n         fi\n        ])\n      AS_UNSET(NCBI)\n      ;;\n   * )\n      AC_MSG_ERROR([Unsupported option --with-3psw=$with_3psw])\n      ;;\nesac\n\nif $srcdir/scripts/common/impl/get_lock.sh configure $$; then\n    ac_clean_files=configure.lock\nelse\n    exit 1\nfi\n# reconfigure.sh expects config.cache to exist; unconditionally clobber\n# any command-line setting.\ncache_file=config.cache\nif test -z \"$CONFIG_SITE\" -a -r $srcdir/src/build-system/config.site; then\n    CONFIG_SITE=$srcdir/src/build-system/config.site\nfi\nAC_DIVERT_POP\n\nAC_INIT([ncbi-tools++],[0.0],[cpp-core@ncbi.nlm.nih.gov])\nAC_CONFIG_SRCDIR(src/build-system/Makefile.mk.in)\n\n\n\n#############################################################################\n\n\n#### Describe all \"--with-*\" arguments -- for the usage printout on \"--help\"\n\n## Title\nAC_ARG_WITH(title0,\n   [===============================================================================])\nAC_ARG_WITH(title1,\n   [=============== NCBI C++ Toolkit specific configuration flags =================])\nAC_ARG_WITH(title2,\n   [===============================================================================])\n\n## Code generation\nAC_ARG_WITH(debug,\n   [ --without-debug         build non-debug versions of libs and apps])\nAC_ARG_WITH(max-debug,\n   [ --with-max-debug        enable extra runtime checks (esp. of STL usage)])\nAC_ARG_WITH(symbols,\n   [ --with-symbols          retain debugging symbols in non-debug mode])\nAC_ARG_WITH(optimization,\n   [ --without-optimization  turn off optimization flags in non-debug mode])\nAC_ARG_WITH(profiling,\n   [ --with-profiling        build profiled versions of libs and apps])\nAC_ARG_WITH(tcheck,\n   [ --with-tcheck(=DIR)     build for Intel Thread Checker (in DIR)])\nAC_ARG_WITH(dll,\n   [ --with-dll              build all libraries as DLLs])\nAC_ARG_WITH(static,\n   [ --with-static           build all libraries statically even if --with-dll])\nAC_ARG_WITH(static-exe,\n   [ --with-static-exe       build all executables as statically as possible])\nAC_ARG_WITH(plugin-auto-load,\n   [ --with-plugin-auto-load always enable the plugin manager by default])\nAC_ARG_WITH(bundles,\n   [ --with-bundles          build bundles in addition to dylibs on Mac OS X])\nAC_ARG_WITH(bin-release,\n   [ --with-bin-release      build executables suitable for public release])\nAC_ARG_WITH(mt,\n   [ --without-mt            support only single-threaded operation])\nAC_ARG_WITH(openmp,\n   [ --with-openmp           enable OpenMP extensions for all projects])\nAC_ARG_WITH(64,\n   [ --with-64               compile to 64-bit code])\nAC_ARG_WITH(universal,\n   [ --with-universal        build universal binaries on Mac OS X])\nAC_ARG_WITH(universal2,\n   [ --with-universal=CPUs   build universal binaries targeting the given CPUs])\nAC_ARG_WITH(exe,\n   [ --without-exe           do not build executables])\nAC_ARG_WITH(runpath,\n   [ --with-runpath=PATH     specify the usual runtime path to DLLs])\nAC_ARG_WITH(relative-runpath,\n   [ --with-relative-runpath=P specify an executable-relative DLL search path])\nAC_ARG_WITH(hard-runpath,\n   [ --with-hard-runpath     hard-code runtime path, ignoring LD_LIBRARY_PATH])\nAC_ARG_WITH(lfs,\n   [ --with-lfs              enable large file support to the extent possible])\nAC_ARG_WITH(limited-linker,\n   [ --with-limited-linker   don't attempt to build especially large projects])\n\n## Scripts, make features, and directory naming\nAC_ARG_WITH(extra-action,\n   [ --with-extra-action=    script to call after the configuration is complete])\nAC_ARG_WITH(autodep,\n   [ --with-autodep          automatic generation of dependencies (GNU make)])\nAC_ARG_WITH(build-root,\n   [ --with-build-root=DIR   specify a non-default build directory name])\nAC_ARG_WITH(fake-root,\n   [ --with-fake-root=DIR    appear to have been built under DIR])\nAC_ARG_WITH(suffix,\n   [ --without-suffix        no Release/Debug, MT or DLL sfx in the build dir name])\nAC_ARG_WITH(hostspec,\n   [ --with-hostspec         add full host specs to the build dir name])\nAC_ARG_WITH(version,\n   [ --without-version       don't always include the cplr ver in the bd name])\nAC_ARG_WITH(build-root-sfx,\n   [ --with-build-root-sfx=X add a user-specified suffix to the build dir name])\nAC_ARG_WITH(execopy,\n   [ --without-execopy       do not copy built executables to the BIN area])\nAC_ARG_WITH(bincopy,\n   [ --with-bincopy          populate lib and bin with copies, not hard links])\nAC_ARG_WITH(lib-rebuilds,\n   [ --with-lib-rebuilds     ensure that apps use up-to-date libraries])\nAC_ARG_WITH(lib-rebuilds2,\n   [ --with-lib-rebuilds=ask ask whether to update each app's libraries])dnl'\nAC_ARG_WITH(deactivation,\n   [ --without-deactivation  keep old copies of libraries that no longer build])\nAC_ARG_WITH(makefile-auto-update,\n   [ --without-makefile-auto-update  do not auto-update generated makefiles])\nAC_ARG_WITH(projects,\n   [ --with-projects=FILE    build projects listed in FILE by default])\nAC_ARG_WITH(flat-makefile,\n   [ --without-flat-makefile do not generate an all-encompassing flat makefile])\nAC_ARG_WITH(configure-dialog,\n   [ --with-configure-dialog allow interactive flat makefile project selection])\nAC_ARG_WITH(saved-settings,\n   [ --with-saved-settings=F load configuration settings from the file F])\nAC_ARG_WITH(check,\n   [ --with-check            run test suite after the build])\nAC_ARG_WITH(check-tools,\n   [ --with-check-tools=...  use the specified tools for testing])\nAC_ARG_WITH(ncbi-public,\n   [ --with-ncbi-public      ensure compatibility for all in-house platforms])\nAC_ARG_WITH(strip,\n   [ --with-strip            strip binaries at build time])\nAC_ARG_WITH(pch,\n   [ --with-pch              use precompiled headers if possible])\nAC_ARG_WITH(caution,\n   [ --with-caution          cancel configuration unconditionally when in doubt])\nAC_ARG_WITH(caution2,\n   [ --without-caution       proceed without asking when in doubt])\nAC_ARG_WITH(ccache,\n   [ --without-ccache        do not automatically use ccache if available])\nAC_ARG_WITH(distcc,\n   [ --without-distcc        do not automatically use distcc if available])\n\n## NCBI packages\nAC_ARG_WITH(ncbi-c,\n   [ --with-ncbi-c=DIR       use NCBI C Toolkit installation in DIR])\nAC_ARG_WITH(ncbi-c2,\n   [ --without-ncbi-c        do not use NCBI C Toolkit])\nAC_ARG_WITH(sss,\n   [ --with-sss=DIR          use NCBI SSS installation in DIR])\nAC_ARG_WITH(sss2,\n   [ --without-sss           do not use NCBI SSS libraries])\nAC_ARG_WITH(sssutils,\n   [ --without-utils         do not use NCBI SSS UTIL library])\nAC_ARG_WITH(sssdb,\n   [ --without-sssdb         do not use NCBI SSS DB library])\nAC_ARG_WITH(included-sss,\n   [ --with-included-sss     use the in-tree copy of SSS])\n\n## Third-party and system packages\nAC_ARG_WITH(z,\n   [ --with-z=DIR            use zlib installation in DIR])\nAC_ARG_WITH(z2,\n   [ --without-z             use internal copy of zlib])\nAC_ARG_WITH(bz2,\n   [ --with-bz2=DIR          use bzlib installation in DIR])\nAC_ARG_WITH(bz2b,\n   [ --without-bz2           use internal copy of bzlib])\nAC_ARG_WITH(lzo,\n   [ --with-lzo=DIR          use LZO installation in DIR (requires 2.x or up)])\nAC_ARG_WITH(lzo_,\n   [ --without-lzo           do not use LZO])\nAC_ARG_WITH(pcre,\n   [ --with-pcre=DIR         use PCRE installation in DIR])\nAC_ARG_WITH(pcre2,\n   [ --without-pcre          use internal copy of PCRE])\nAC_ARG_WITH(gcrypt,\n   [ --with-gcrypt=DIR       use gcrypt installation in DIR])\nAC_ARG_WITH(gcrypt2,\n   [ --without-gcrypt        do not use gcrypt])\nAC_ARG_WITH(gnutls,\n   [ --with-gnutls=DIR       use GNUTLS installation in DIR])\nAC_ARG_WITH(gnutls2,\n   [ --without-gnutls        do not use GNUTLS])\nAC_ARG_WITH(openssl,\n   [ --with-openssl=DIR      use OpenSSL installation in DIR])\nAC_ARG_WITH(openssl2,\n   [ --without-openssl       do not use OpenSSL])\nAC_ARG_WITH(krb5,\n   [ --with-krb5=DIR         use Kerberos 5 installation in DIR])\nAC_ARG_WITH(krb5b,\n   [ --without-krb5          do not use Kerberos 5])\nAC_ARG_WITH(sybase,\n   [ --without-sybase        do not use SYBASE libraries])\nAC_ARG_WITH(sybase-local,\n   [ --with-sybase-local=DIR use local SYBASE install (DIR is optional)])\nAC_ARG_WITH(sybase-new,\n   [ --with-sybase-new       use newer SYBASE install (12.5 rather than 12.0)])\nAC_ARG_WITH(ftds,\n   [ --without-ftds          do not use FreeTDS libraries])\nAC_ARG_WITH(ftds2,\n   [ --with-ftds=DIR         use FreeTDS installation in DIR])\nAC_ARG_WITH(ftds-renamed,\n   [ --without-ftds-renamed  do not rename Sybase DBLIB symbols in built-in FTDS])\nAC_ARG_WITH(mysql,\n   [ --without-mysql         do not use MySQL])\nAC_ARG_WITH(mysql2,\n   [ --with-mysql=DIR        use MySQL installation in DIR])\nAC_ARG_WITH(opengl,\n   [ --without-opengl        do not use OpenGL])\nAC_ARG_WITH(opengl2,\n   [ --with-opengl=DIR       use OpenGL installation in DIR])\nAC_ARG_WITH(mesa,\n   [ --without-mesa          do not use MESA off-screen OpenGL])\nAC_ARG_WITH(mesa2,\n   [ --with-mesa=DIR         use MESA installation in DIR])\nAC_ARG_WITH(glut,\n   [ --without-glut          do not use GLUT])\nAC_ARG_WITH(glut2,\n   [ --with-glut=DIR         use GLUT installation in DIR])\nAC_ARG_WITH(glew,\n   [ --without-glew          do not use GLEW])\nAC_ARG_WITH(glew2,\n   [ --with-glew=DIR         use GLEW installation in DIR])\nAC_ARG_WITH(glew-mx,\n   [ --with-glew-mx          insist on a multi-context-ready GLEW installation])\nAC_ARG_WITH(wxwidgets,\n   [ --without-wxwidgets     do not use wxWidgets (2.6+)])\nAC_ARG_WITH(wxwidgets2,\n   [ --with-wxwidgets=DIR    use wxWidgets installation in DIR])\nAC_ARG_WITH(wxwidgets-ucs,\n   [ --with-wxwidgets-ucs    use Unicode builds of wxWidgets])\nAC_ARG_WITH(wxwidgets-ucs2,\n   [ --without-wxwidgets-ucs do not use Unicode builds of wxWidgets])\nAC_ARG_WITH(freetype,\n   [ --without-freetype      do not use FreeType])\nAC_ARG_WITH(freetype_,\n   [ --with-freetype=DIR     use FreeType installation in DIR])\nAC_ARG_WITH(ftgl,\n   [ --without-ftgl          do not use FTGL])\nAC_ARG_WITH(ftgl2,\n   [ --with-ftgl=DIR         use FTGL installation in DIR])\nAC_ARG_WITH(fastcgi,\n   [ --without-fastcgi       do not use Fast-CGI library])\nAC_ARG_WITH(fastcgi2,\n   [ --with-fastcgi=VERSION  use Fast-CGI installation in \\$NCBI/fcgi-VERSION])\nAC_ARG_WITH(fastcgi3,\n   [ --with-fastcgi=DIR      use Fast-CGI installation in DIR])\nAC_ARG_WITH(bdb,\n   [ --without-bdb           do not use Berkeley DB library])\nAC_ARG_WITH(bdb,\n   [ --with-bdb=VERSION      use DB installation in \\$NCBI/BerkeleyDB-VERSION])\nAC_ARG_WITH(bdb,\n   [ --with-bdb=DIR          use Berkeley DB installation in DIR])\nAC_ARG_WITH(sp,\n   [ --without-sp            do not use SP libraries])\nAC_ARG_WITH(orbacus,\n   [ --without-orbacus       do not use ORBacus CORBA libraries])\nAC_ARG_WITH(orbacus2,\n   [ --with-orbacus=DIR      use ORBacus installation in DIR])\nAC_ARG_WITH(odbc,\n   [ --with-odbc=DIR         use ODBC installation in DIR])\nAC_ARG_WITH(python,\n   [ --with-python=DIR       use Python installation in DIR])\nAC_ARG_WITH(python2,\n   [ --without-python        do not use Python])\nAC_ARG_WITH(perl,\n   [ --with-perl=DIR         use Perl installation in DIR])\nAC_ARG_WITH(perl2,\n   [ --without-perl          do not use Perl])\nAC_ARG_WITH(jni,\n   [ --with-jni(=JDK-DIR)    build Java bindings (against the JDK in JDK-DIR)])\nAC_ARG_WITH(boost,\n   [ --with-boost=DIR        use Boost installation in DIR])\nAC_ARG_WITH(boost2,\n   [ --without-boost         do not use Boost])\nAC_ARG_WITH(boost-tag,\n   [ --with-boost-tag=TAG    use TAG as the tag appended to Boost library names])\nAC_ARG_WITH(boost-tag2,\n   [ --without-boost-tag     use untagged Boost library names])\nAC_ARG_WITH(sqlite3,\n   [ --with-sqlite3=DIR      use SQLite 3.x installation in DIR])\nAC_ARG_WITH(sqlite3b,\n   [ --without-sqlite3       do not use SQLite 3.x])\nAC_ARG_WITH(icu,\n   [ --with-icu=DIR          use ICU installation in DIR])\nAC_ARG_WITH(icu2,\n   [ --without-icu           do not use ICU])\nAC_ARG_WITH(expat,\n   [ --with-expat=DIR        use Expat installation in DIR])\nAC_ARG_WITH(expat2,\n   [ --without-expat         do not use Expat])\nAC_ARG_WITH(sablot,\n   [ --with-sablot=DIR       use Sablotron installation in DIR])\nAC_ARG_WITH(sablot2,\n   [ --without-sablot        do not use Sablotron])\nAC_ARG_WITH(libxml,\n   [ --with-libxml=DIR       use libxml2 installation in DIR])\nAC_ARG_WITH(libxml_,\n   [ --without-libxml        do not use libxml2])\nAC_ARG_WITH(libxslt,\n   [ --with-libxslt=DIR      use libxslt installation in DIR])\nAC_ARG_WITH(libxslt2,\n   [ --without-libxslt       do not use libxslt])\nAC_ARG_WITH(libexslt,\n   [ --with-libexslt=DIR     use libexslt installation in DIR])\nAC_ARG_WITH(libexslt2,\n   [ --without-libexslt      do not use libexslt])\nAC_ARG_WITH(xerces,\n   [ --with-xerces=DIR       use Xerces-C++ installation in DIR])\nAC_ARG_WITH(xerces2,\n   [ --without-xerces        do not use Xerces-C++])\nAC_ARG_WITH(xalan,\n   [ --with-xalan=DIR        use Xalan-C++ installation in DIR])\nAC_ARG_WITH(xalan2,\n   [ --without-xalan         do not use Xalan-C++])\nAC_ARG_WITH(zorba,\n   [ --with-zorba=DIR        use Zorba installation in DIR])\nAC_ARG_WITH(zorba2,\n   [ --without-zorba         do not use Zorba])\nAC_ARG_WITH(oechem,\n   [ --with-oechem=DIR       use OpenEye OEChem installation in DIR])\nAC_ARG_WITH(oechem2,\n   [ --without-oechem        do not use OEChem])\nAC_ARG_WITH(sge,\n   [ --with-sge=DIR          use Sun/Univa Grid Engine installation in DIR])\nAC_ARG_WITH(sge2,\n   [ --without-sge           do not use Sun/Univa Grid Engine])\nAC_ARG_WITH(muparser,\n   [ --with-muparser=DIR     use muParser installation in DIR])\nAC_ARG_WITH(muparser2,\n   [ --without-muparser      do not use muParser])\nAC_ARG_WITH(hdf5,\n   [ --with-hdf5=DIR         use HDF5 installation in DIR])\nAC_ARG_WITH(hdf5b,\n   [ --without-hdf5          do not use HDF5])\nAC_ARG_WITH(gif,\n   [ --with-gif=DIR          use lib(un)gif installation in DIR])\nAC_ARG_WITH(gif2,\n   [ --without-gif           do not use lib(un)gif])\nAC_ARG_WITH(jpeg,\n   [ --with-jpeg=DIR         use libjpeg installation in DIR])\nAC_ARG_WITH(jpeg2,\n   [ --without-jpeg          do not use libjpeg])\nAC_ARG_WITH(png,\n   [ --with-png=DIR          use libpng installation in DIR])\nAC_ARG_WITH(png2,\n   [ --without-png           do not use libpng])\nAC_ARG_WITH(tiff,\n   [ --with-tiff=DIR         use libtiff installation in DIR])\nAC_ARG_WITH(tiff2,\n   [ --without-tiff          do not use libtiff])\nAC_ARG_WITH(xpm,\n   [ --with-xpm=DIR          use libXpm installation in DIR])\nAC_ARG_WITH(xpm2,\n   [ --without-xpm           do not use libXpm])\nAC_ARG_WITH(magic,\n   [ --with-magic=DIR        use libmagic installation in DIR])\nAC_ARG_WITH(magic2,\n   [ --without-magic         do not use libmagic])\nAC_ARG_WITH(curl,\n   [ --with-curl=DIR         use libcurl installation in DIR])\nAC_ARG_WITH(curl2,\n   [ --without-curl          do not use libcurl])\nAC_ARG_WITH(mimetic,\n   [ --with-mimetic=DIR      use libmimetic installation in DIR])\nAC_ARG_WITH(mimetic2,\n   [ --without-mimetic       do not use libmimetic])\nAC_ARG_WITH(gsoap,\n   [ --with-gsoap=DIR        use gSOAP++ installation in DIR])\nAC_ARG_WITH(gsoap2,\n   [ --without-gsoap         do not use gSOAP++])\nAC_ARG_WITH(avro,\n   [ --with-avro=DIR         use Apache Avro installation in DIR])\nAC_ARG_WITH(avro2,\n   [ --without-avro          do not use Apache Avro])\nAC_ARG_WITH(mongodb,\n   [ --with-mongodb=DIR      use MongoDB installation in DIR])\nAC_ARG_WITH(mongodb2,\n   [ --without-mongodb       do not use MongoDB])\nAC_ARG_WITH(3psw,\n   [ --with-3psw=std:netopt  favor standard (system) builds of the above pkgs.])\nAC_ARG_WITH(3psw2,\n   [ --without-3psw          do not use any of the above packages])\n\n## Optional projects\nAC_ARG_WITH(local-lbsm,\n   [ --without-local-lbsm    turn off support for IPC with locally running LBSMD])\nAC_ARG_WITH(ncbi-crypt,\n   [ --without-ncbi-crypt    use a dummy stubbed-out version of ncbi_crypt])\nAC_ARG_WITH(connext,\n   [ --without-connext       do not build non-public CONNECT library extensions])\nAC_ARG_WITH(serial,\n   [ --without-serial        do not build the serialization library and tools])\nAC_ARG_WITH(objects,\n   [ --without-objects       do not generate/build serializeable objects from ASNs])\nAC_ARG_WITH(dbapi,\n   [ --without-dbapi         do not build database connectivity libraries])\nAC_ARG_WITH(app,\n   [ --without-app           do not build standalone applications like ID1_FETCH])\nAC_ARG_WITH(ctools,\n   [ --without-ctools        do not build NCBI C Toolkit based projects])\nAC_ARG_WITH(gui,\n   [ --without-gui           do not build most graphical projects])\nAC_ARG_WITH(algo,\n   [ --without-algo          do not build CPU-intensive algorithms])\nAC_ARG_WITH(internal,\n   [ --with-internal         always try to build internal projects])\nAC_ARG_WITH(internal2,\n   [ --without-internal      never build internal projects])\nAC_ARG_WITH(gbench,\n   [ --with-gbench           ensure that Genome Workbench can be built])\nAC_ARG_WITH(gbench2,\n   [ --without-gbench        do not build Genome Workbench])\n\n## Manuals\nAC_ARG_WITH(manuals,\n   [***** See also HTML documentation in ./doc/index.html *****])\n\n\nAC_DIVERT_PUSH(PARSE_ARGS)\ndnl As of Autoconf 2.60, this needs to run too early for config.log,\ndnl to which AC_MSG_ERROR normally copies its output, to be available.\nm4_rename([AS_MESSAGE_LOG_FD], [NCBI_ORIG_ASMLFD])\n#### Check the passed arguments against the list of available ones\nx_with_list=\"\\\ndebug max-debug symbols optimization profiling tcheck dll static static-exe \\\nplugin-auto-load bundles bin-release mt 64 universal exe runpath hard-runpath \\\nlfs limited-linker openmp \\\nautodep suffix hostspec version execopy bincopy lib-rebuilds lib-rebuilds=ask \\\ndeactivation makefile-auto-update projects flat-makefile configure-dialog \\\ncheck ncbi-public strip pch caution ccache distcc \\\nncbi-c wxwidgets wxwidgets-ucs fastcgi sss sssdb sssutils included-sss \\\ngeo included-geo \\\nz bz2 lzo pcre gcrypt gnutls openssl krb5 sybase sybase-local sybase-new \\\nftds mysql orbacus freetype ftgl opengl mesa glut glew glew-mx \\\nbdb python perl jni sqlite3 icu boost boost-tag \\\nsp expat sablot libxml libxslt libexslt xerces xalan zorba \\\noechem sge muparser hdf5 \\\ngif jpeg tiff png xpm magic curl mimetic gsoap avro mongodb 3psw \\\nlocal-lbsm ncbi-crypt connext \\\nserial objects dbapi app ctools gui algo internal gbench\"\n\nchangequote(, )dnl\nx_with_list=`echo \"$x_with_list\" | sed 's/\\([^ ][^ ]*\\)/--with-\\1 --without-\\1/g'`\nchangequote([, ])dnl\n\n\nfor x_arg in \"$@\" ; do\n   if test -z \"$x_arg\" ; then\n      continue\n   fi\n\n   x_okay=\n   for x_desc in $x_with_list ; do\n      if test \"$x_arg\" = \"$x_desc\" ; then\n         x_okay=\"okay\"\n         break\n      fi\n   done\n   if test \"$x_okay\" = \"okay\" ; then\n      continue\n   fi\n\n   case \"$x_arg\" in\n      --with-extra-action= | --exec-prefix= | --with-projects= | --srcdir= \\\n      | --cache-file= | --build= | --host= | --target= | --with-runpath= \\\n      | --with-relative-runpath= | --x-includes= | --x-libraries= )\n      AC_MSG_ERROR([$x_arg:  requires value;  use --help to show usage])\n      ;;\n\n      --with-extra-action=* | --with-build-root=* | --with-build-root-sfx=* \\\n      | --with-fake-root=* | --with-saved-settings=* \\\n      | --with-projects=* | --with-check=* | --with-check-tools=* \\\n      | --with-universal=* | --with-tcheck=* \\\n      | --cache-file=* | --build=* | --host=* | --prefix=* | --exec-prefix=* \\\n      | --libdir=* | --bindir=* | --includedir=* | --srcdir=* \\\n      | [[A-Z]*=*] \\\n      | --with-z=* | --with-bz2=* | --with-lzo=* \\\n      | --with-pcre=* | --with-ncbi-c=* | --with-sss=* \\\n      | --with-gcrypt=* | --with-gnutls=* | --with-openssl=* | --with-krb5=* \\\n      | --with-curl=* | --with-gsoap=* | --with-avro=* | --with-mongodb=* \\\n      | --with-sybase-local=* | --with-wxwidgets=* | --with-mimetic=* \\\n      | --with-ftds=* | --with-mysql=* | --with-fastcgi=* \\\n      | --with-sqlite3=* | --with-expat=* | --with-sablot=* \\\n      | --with-icu=* | --with-xerces=* | --with-xalan=* | --with-zorba=* \\\n      | --with-libxml=* | --with-libxslt=* | --with-exslt=* \\\n      | --with-bdb=* | --with-odbc=* | --with-python=* | --with-perl=* \\\n      | --with-freetype=* | --with-ftgl=* | --with-gif=* | --with-jpeg=* \\\n      | --with-png=* | --with-tiff=* | --with-xpm=* | --with-opengl=* \\\n      | --with-mesa=* | --with-glut=* | --with-glew=* | --with-oechem=* \\\n      | --with-boost=* | --with-boost-tag=* | --with-orbacus=* | --with-sge=* \\\n      | --with-muparser=* | --with-hdf5=* | --with-jni=* | --with-magic=* \\\n      | --x-includes=* | --x-libraries=* | --with-3psw=* \\\n      | --target=* | --with-runpath=* | --with-relative-runpath=* \\\n      | --help | --no-create | --no-recursion)\n      ;;\n\n      * )\n      AC_MSG_ERROR([$x_arg:  unknown option;  use --help to show usage])\n      ;;\n   esac\ndone\nm4_rename([NCBI_ORIG_ASMLFD], [AS_MESSAGE_LOG_FD])\nAC_DIVERT_POP\n\n\nif test \"$with_gbench\" = \"yes\" ; then\n   m4_foreach(OPT, [dll,mt,gui,exe,serial,objects,algo,glew_mx],\n     [if test \"$[with_]OPT\" = \"no\"; then\n         AC_MSG_ERROR([incompatible options: --without-]OPT[ but --with-gbench])\n      else\n         [with_]OPT=yes\n      fi\n     ])\n   : ${with_projects=scripts/projects/ncbi_gbench.lst}\nelif test \"$with_jni\" = \"yes\" ; then\n   m4_foreach(OPT, [dll,mt],\n     [if test \"$[with_]OPT\" = \"no\"; then\n         AC_MSG_ERROR([incompatible options: --without-]OPT[ but --with-jni])\n      else\n         [with_]OPT=yes\n      fi\n     ])\n   : ${with_exe=no}\nfi\n\nif test \"$with_bin_release\" = \"yes\" ; then\n   # Default some other options accordingly\n   : ${with_ncbi_public=yes}\n   : ${with_dll=no}\n   : ${with_local_lbsm=no}\n   : ${with_ncbi_crypt=no}\n   : ${with_connext=no}\n   AC_DEFINE(NCBI_BIN_RELEASE, 1,\n             [Define to 1 when building binaries for public release.])\nfi\n\nif test \"$with_debug\" = no; then\n    : ${with_symbols=no}\n    : ${with_optimization=yes}\n    if test \"$with_max_debug\" = yes; then\n       AC_MSG_ERROR([incompatible options: --without-debug but --with-max-debug])\n    fi\nelse\n    : ${with_symbols=yes}\n    : ${with_optimization=no}\nfi\n\nif test \"$with_openmp\" = yes; then\n   if test \"$with_mt\" = no; then\n      AC_MSG_ERROR([incompatible options: --without-mt but --with-openmp])\n   fi\n   : ${with_mt=yes} \nfi\n\n#### Check for special options\nif test \"$with_extra_action\" = \"yes\" ; then\n   AC_MSG_ERROR([--with-extra-action must have a value after =])\nfi\nif test \"$with_extra_action\" = \"no\" ; then\n   AC_MSG_ERROR([--without-extra-action is not allowed])\nfi\n\ncase \"$with_projects\" in\n \"\"|yes)\n     if test -r projects; then\n        AC_MSG_NOTICE([using default projects file \"projects\".])\n        with_projects=projects\n        AC_SUBST(PROJECTS, \"\\$(top_srcdir)/projects\")\n     else\n        AC_SUBST(PROJECTS, \"\")\n        if test -f projects; then\n           AC_MSG_WARN([default projects file \"projects\" is unreadable.])\n        elif test -h projects; then\n           AC_MSG_WARN([default projects file \"projects\" is a dangling link.])\n        fi\n     fi\n     ;;\n no) with_projects=\"\" ;  AC_SUBST(PROJECTS, \"\") ;;\n /*) AC_SUBST(PROJECTS, $with_projects) ;;\n * ) AC_SUBST(PROJECTS, \"\\$(top_srcdir)/$with_projects\") ;;\nesac\n\nif test -n \"$with_projects\"; then\n   case \"$with_projects\" in\n      /* ) abs_projects=$with_projects         ;;\n      yes) abs_projects=$srcdir/projects       ;;\n      *  ) abs_projects=$srcdir/$with_projects ;;\n   esac\n   test -r \"$abs_projects\"  ||  \\\n      AC_MSG_ERROR([unable to read requested projects file \"$abs_projects\".])\nfi\n\n# Check for custom optimization flags before potentially going with defaults.\nskip_fast_flags=no\nif test -z \"${DEF_FAST_FLAGS}${FAST_CXXFLAGS}\"; then\n   case \" $CFLAGS $CXXFLAGS\" in\n      *\\ -O* | *\\ -xO* ) skip_fast_flags=yes ;;\n   esac\nfi\n# Generally save any originally specified flags.\nUSER_CFLAGS=$CFLAGS\nUSER_CXXFLAGS=$CXXFLAGS\nUSER_LDFLAGS=$LDFLAGS\n\n#### Always define this\nAC_DEFINE(NCBI_CXX_TOOLKIT, 1, [This is the NCBI C++ Toolkit.])\n\n\n#### Get the running host's properties\nAC_CONFIG_AUX_DIR(src/build-system)\nAC_CANONICAL_HOST\nAC_DEFINE_UNQUOTED(HOST,        \"$host\",        [Full GNU-style system type])\nAC_DEFINE_UNQUOTED(HOST_CPU,    \"$host_cpu\",    [CPU type only])\nAC_DEFINE_UNQUOTED(HOST_VENDOR, \"$host_vendor\", [System vendor only])\nAC_DEFINE_UNQUOTED(HOST_OS,     \"$host_os\",     [System OS only])\n\n\n#### Make some provisions for traditional operation\nAC_PROG_INSTALL\n\n#### Point ICC at a suitable GCC version ASAP.\ncase \"/$CXX\" in\n   */icpc )\n      if test -d /usr/local/gcc; then\n         case \"`$CXX -dumpversion`:$host_cpu\" in\n            *:i?86)           v=4.4.5 ;;\n            ?.* | 1[[01]].* ) v=4.0.1 ;;\n            *)                v=4.4.2 ;;\n         esac\n         gcc=/usr/local/gcc/$v/bin/gcc\n         if test -x $gcc; then\n            CC=\"$CC -gcc-name=$gcc\"\n            CXX=\"$CXX -gcc-name=$gcc\"\n         fi\n      fi\n      ;;\nesac\n\n#### C and C++ compilers\nAC_LANG(C++)\nAC_PROG_CC\nAC_PROG_CXX\n\n\n#### Detect Insure++, and attempt to find the real compiler.\ncase \"$CXX\" in\n   insure* | */insure*)\n      psrcdump=`echo \"$CXX\" | sed -e 's/insure.*/psrcdump/'`\n      real_CXX=`$psrcdump -t insure++ | sed -ne 's/^Compiler \\(.*\\)/\\1/p'`\n      real_dir=`$psrcdump -t insure++ | sed -ne 's/^Compilerinstalldir \\(.*\\)/\\1/p'`\n      test -n \"$real_dir\" && test -x \"$real_dir/$real_CXX\" && \\\n        real_CXX=\"$real_dir/$real_CXX\"\n      case \"$real_CXX\" in\n          *gcc* ) LIBS=\"$LIBS -lstdc++\"\n      esac\n      ;;\n   *)\n      real_CXX=$CXX\n      ;;\nesac\n\n\n#### Detect KCC compiler\nif test \"$GCC\" != \"yes\" ; then\n   touch kcc_test.cpp\n   kcc_ver=\"`$real_CXX -V -c kcc_test.cpp 2>&1 | grep '^KAI '`\"\n   kcc_license=\"`$real_CXX -V -c kcc_test.cpp 2>&1 | grep -v '^KAI '`\"\n   rm -f kcc_test.cpp kcc_test.o\n   case \"$kcc_ver\" in\n      KAI* )  KCC=\"yes\" ;;\n   esac\nfi\n\n\n#### Detect ICC compiler (newer versions of which configure can mis-ID as GCC)\nif test \"$KCC\" != \"yes\"; then\n   icc_ver=\"`$real_CXX -V 2>&1 | grep '^Intel(R) C'`\"\n   icc_license=\"`$real_CXX -c 2>&1 | grep '^icc: NOTE: The evaluation period for this product ends on '`\"\n   case \"$icc_ver\" in\n      Intel*C*Compiler* )  ICC=\"yes\"; GCC=\"no\" ;;\n   esac\nfi\n\n\n#### Detect IBM VisualAge compiler\nif test \"$GCC\" != \"yes\"  -a  \"$KCC\" != \"yes\"  -a  \"$ICC\" != \"yes\"; then\n   vac_ver=\"`$real_CXX -qversion 2>&1`\"\n   case \"$vac_ver\" in\n      *AIX* ) VAC=\"yes\" ;;\n   esac\nfi\n\n\n#### Detect Compaq compiler\nif test \"$GCC\" != \"yes\"  -a  \"$KCC\" != \"yes\"  -a  \"$ICC\" != \"yes\" \\\n  -a  \"$VAC\" != \"yes\"; then\n   ccc_ver=\"`$real_CXX -V 2>&1 | grep '^Compaq C++ V'`\"\n   case \"$ccc_ver\" in\n      *Compaq* ) CCC=\"yes\" ;;\n   esac\nfi\n\n\n#### Detect Cray compiler\nif test \"$GCC\" != \"yes\"  -a  \"$KCC\" != \"yes\"  -a  \"$ICC\" != \"yes\" \\\n  -a  \"$VAC\" != \"yes\" -a  \"$CCC\" != \"yes\"; then\n   cce_ver=\"`$real_CXX -V 2>&1 | grep '^Cray'`\"\n   case \"$cce_ver\" in\n      *Cray* ) CCE=\"yes\" ;;\n   esac\nfi\n\n\n#### Detect supported compilers\ncompiler=\ncompiler_ver=\nncbi_compiler=\"UNKNOWN\"\nncbi_compiler_ver=\"0\"\n\nif test \"$GCC\" = \"yes\" ; then\n   compiler_ver=\"`$real_CXX -dumpversion 2>&1`\"\n   case \"$compiler_ver\" in\n     2.95* | 2.96* | 3.* | 4.* )\n       compiler=\"GCC\"\n       ncbi_compiler=\"GCC\"\n       ncbi_compiler_ver=\"$compiler_ver\"\n       NCBI_FEATURE(GCC)\n       ;;\n   esac\nelif test \"$KCC\" = \"yes\" ; then\n   compiler_ver=\"$kcc_ver\"\n   compiler=\"KCC\"\n   ncbi_compiler=\"KCC\"\n   ncbi_compiler_ver=\"`echo $kcc_ver | sed 's%^KAI .*C[[+]][[+]] \\([[0-9.]]*\\).*%\\1%'`\"\n   NCBI_FEATURE(KCC)\nelif test \"$ICC\" = \"yes\" ; then\n   compiler_ver=\"$icc_ver\"\n   compiler=\"ICC\"\n   ncbi_compiler=\"ICC\"\n   ncbi_compiler_ver=\"`echo $icc_ver | sed 's%.*Version \\([[0-9.]]*\\).*%\\1%'`\"\n   NCBI_FEATURE(ICC)\nelif test \"$VAC\" = \"yes\" ; then\n   compiler_ver=\"$vac_ver\"\n   compiler=\"VisualAge\"\n   ncbi_compiler=\"VISUALAGE\"\n   ncbi_compiler_ver=\"`echo $vac_ver | sed 's%.*[[Vv]]ersion:* 0*\\([[0-9.]]*\\).*%\\1%'`\"\n   NCBI_FEATURE(VisualAge)\nelif test \"$CCC\" = \"yes\" ; then\n   compiler_ver=\"$ccc_ver\"\n   compiler=Compaq\n   ncbi_compiler=\"COMPAQ\"\n   ncbi_compiler_ver=\"`echo $ccc_ver | sed 's%.*C[[+]][[+]] V\\([[0-9.]]*\\).*%\\1%'`\"\n   NCBI_FEATURE(CompaqCompiler)\nelif test \"$CCE\" = \"yes\" ; then\n   compiler_ver=\"$cce_ver\"\n   compiler=\"Cray\"\n   ncbi_compiler=\"CRAY\"\n   ncbi_compiler_ver=\"`echo $cce_ver | sed 's%.*Version \\([[0-9.]]*\\).*%\\1%'`\"\n   NCBI_FEATURE(Cray)\nelse\n   case \"$host_os\" in\n    solaris* )\n      compiler_ver=\"`$real_CXX -V 2>&1`\"\n      case \"$compiler_ver\" in\n        *WorkShop*Compilers*5\\.0 )\n          compiler=\"WorkShop5\"\n          ncbi_compiler=\"WORKSHOP\"\n          ncbi_compiler_ver=\"5.0\" ;;\n        *Sun*WorkShop*6*5\\.1* )\n          compiler=\"WorkShop51\"\n          ncbi_compiler=\"WORKSHOP\"\n          ncbi_compiler_ver=\"5.1\" ;;\n        *Sun*WorkShop*6*5\\.2* )\n          compiler=\"WorkShop52\"\n          ncbi_compiler=\"WORKSHOP\"\n          ncbi_compiler_ver=\"5.2\" ;;\n        *Sun*WorkShop*6*5\\.3* )\n          compiler=\"WorkShop53\"\n          ncbi_compiler=\"WORKSHOP\"\n          ncbi_compiler_ver=\"5.3\" ;;\n        *Forte*7*5\\.4* )\n          compiler=\"WorkShop54\"\n          ncbi_compiler=\"WORKSHOP\"\n          ncbi_compiler_ver=\"5.4\" ;;\n        *Sun*C*5\\.5* )\n          compiler=\"WorkShop55\"\n          ncbi_compiler=\"WORKSHOP\"\n          ncbi_compiler_ver=\"5.5\" ;;\n        *Sun*C*5\\.8* )\n          compiler=\"WorkShop58\"\n          ncbi_compiler=\"WORKSHOP\"\n          ncbi_compiler_ver=\"5.8\" ;;\n        *Sun*C*5\\.9* )\n          compiler=\"WorkShop59\"\n          ncbi_compiler=\"WORKSHOP\"\n          ncbi_compiler_ver=\"5.9\" ;;\n        *Sun*C*5\\.10* )\n          compiler=\"WorkShop510\"\n          ncbi_compiler=\"WORKSHOP\"\n          ncbi_compiler_ver=\"5.10\" ;;\n        *Sun*C*5\\.11* )\n          compiler=\"WorkShop511\"\n          ncbi_compiler=\"WORKSHOP\"\n          ncbi_compiler_ver=\"5.11\" ;;\n      esac\n      NCBI_FEATURE(WorkShop)\n      ;;\n\n    irix* )\n      compiler_ver=\"`$real_CXX -version 2>&1`\"\n      case \"$compiler_ver\" in\n        MIPSpro*Compilers:*Version*7\\.3* )\n          compiler=\"MIPSpro73\"\n          ncbi_compiler=\"MIPSPRO\"\n          ncbi_compiler_ver=\"7.3\"\n          NCBI_FEATURE(MIPSpro)\n          ;;\n      esac\n      ;;\n\n    cygwin* )\n      case \"$real_CXX\" in\n        *cl\\.exe* | cl)\n          compiler=\"MSVC\"\n          ncbi_compiler=\"MSVC\"\n          ncbi_compiler_ver=\"6.0\"\n          NCBI_FEATURE(MSVC)\n          ;;\n      esac\n      ;;\n   esac\nfi\n\nchangequote(, )dnl\n#ncbi_compiler_ver=\"`echo $ncbi_compiler_ver | sed 's%\\([0-9]\\)\\.\\([0-9]\\)\\.\\([0-9]\\).*%\\1\\2\\3%; s%\\([0-9]\\)\\.\\([0-9][0-9]*\\).*%\\1\\2%; s%^\\([0-9][0-9]\\)$%\\10%; s%^\\([0-9]\\)$%\\100%'`\"\ncase \"$compiler:$ncbi_compiler_ver\" in\n    WorkShop*:?.?? )   ncbi_compiler_sed='s/\\([0-9]\\)\\.\\([0-9][0-9]\\)/\\1\\20/' ;;\n    WorkShop*:[6-9].?) ncbi_compiler_sed='s/\\([0-9]\\)\\.\\([0-9\\)/\\10\\20/' ;;\n    ICC:??.? )  ncbi_compiler_sed='s/\\([0-9][0-9]\\)\\.\\([0-9]\\)/\\1\\20/' ;;\n    ICC:??.?.? | \\\n    ICC:??.?.?.* ) ncbi_compiler_sed='s/\\([0-9][0-9]\\)\\.\\([0-9]\\)\\.\\([0-9]\\).*/\\1\\2\\3/' ;;\n    *:?.?.?)    ncbi_compiler_sed='s/\\([0-9]\\)\\.\\([0-9]\\)\\.\\([0-9]\\)/\\1\\2\\3/' ;;\n    *:?.??*)    ncbi_compiler_sed='s/\\([0-9]\\)\\.\\([0-9][0-9]\\).*/\\1\\2/' ;;\n    *:?.?)      ncbi_compiler_sed='s/\\([0-9]\\).\\([0-9]\\)/\\1\\20/' ;;\n    *:?)        ncbi_compiler_sed='s/\\([0-9]\\)/\\100/' ;;\nchangequote([, ])dnl\n    *)    AC_MSG_ERROR([Do not know how to parse $compiler version number $ncbi_compiler_ver]) ;;\nesac\nncbi_compiler_ver=`echo $ncbi_compiler_ver | sed \"$ncbi_compiler_sed\"`\ncompiler_version=$ncbi_compiler_ver\n\n# Possible values of NCBI_COMPILER_$ncbi_compiler, since acconfig.h is obsolete\nif false; then\n   AC_DEFINE(NCBI_COMPILER_GCC,       1, [Compiler name])\n   AC_DEFINE(NCBI_COMPILER_KCC,       1, [Compiler name])\n   AC_DEFINE(NCBI_COMPILER_ICC,       1, [Compiler name])\n   AC_DEFINE(NCBI_COMPILER_WORKSHOP,  1, [Compiler name])\n   AC_DEFINE(NCBI_COMPILER_MIPSPRO,   1, [Compiler name])\n   AC_DEFINE(NCBI_COMPILER_VISUALAGE, 1, [Compiler name])\n   AC_DEFINE(NCBI_COMPILER_COMPAQ,    1, [Compiler name])\n   AC_DEFINE(NCBI_COMPILER_CRAY,      1, [Compiler name])\n   AC_DEFINE(NCBI_COMPILER_MSVC,      1, [Compiler name])\n   AC_DEFINE(NCBI_COMPILER_UNKNOWN,   1, [Compiler name])\nfi\n\nAC_DEFINE_UNQUOTED(NCBI_COMPILER, \"$ncbi_compiler\", [Compiler name])\nAC_DEFINE_UNQUOTED(NCBI_COMPILER_$ncbi_compiler, 1, [Compiler name])\nAC_DEFINE_UNQUOTED(NCBI_COMPILER_VERSION, $ncbi_compiler_ver,\n                   [Compiler version as three-digit integer])\n\n\n#### Additional check for pre-defined compilers\ncase \"$compiler:$compiler_version\" in\n  MSVC:* )\n    if test -z \"$NCBI_COMPILER\" ; then\n       echo\n       echo \"Compiler \\\"${compiler}\\\" requires a special tuning, so you\"\n       echo \"better use a special shell script located in \\\"compilers/*.sh\\\"!\"\n       NCBI_CAUTION([Do you still want to proceed (at your own risk)?])\n       echo\n    fi ;;\nesac\n\n\n#### Use full path to the compiler, if possible\nchangequote(, )dnl\n\nset $CC\nx_CC=\"`type $1 | sed 's/.* \\([^ ]*\\)$/\\1/'`\"\nif test ! -x \"$x_CC\" ; then\n  x_CC=\"`which $1  2>/dev/null`\"\nfi\n\nif test -x \"$x_CC\" ; then\n  shift\n  CC=\"$x_CC $*\"\n  echo \"adjusted C   compiler: $CC\"\nfi\nCC_PATH=\"`dirname $x_CC`\"\nx_CC=\n\nset $CXX\nx_CXX=\"`type $1 | sed 's/.* \\([^ ]*\\)$/\\1/'`\"\nif test ! -x \"$x_CXX\" ; then\n  x_CXX=\"`which $1  2>/dev/null`\"\nfi\n\nif test -x \"$x_CXX\" ; then\n  shift\n  CXX=\"$x_CXX $*\"\n  echo \"adjusted C++ compiler: $CXX\"\nfi\nCXX_PATH=\"`dirname $x_CXX`\"\nx_CXX=\n\nif test \"$with_static_exe\" = \"yes\"; then\n   C_LINK='$(top_srcdir)/scripts/common/impl/favor-static $(CC)'\n   LINK='$(top_srcdir)/scripts/common/impl/favor-static $(CXX)'\nelse\n   C_LINK='$(CC)'\n   LINK='$(CXX)'\nfi\n\n### Which of these is better?\n#compiler_root=`dirname CXX_PATH`\ncompiler_root=`echo $CXX | sed -ne 's:\\(.*\\)[/\\\\]bin[/\\\\].*:\\1:p'`\n\nchangequote([, ])dnl\n\n\n#### Multi-Thread safety\n# Historically off by default; respect that when reconfiguring old builds.\nif test -z \"$with_mt\" -a -f \"$NCBI_OLD_STATUS_DIR/-MT.enabled\"; then\n    with_mt=no\nfi\n\nif test \"$with_mt\" != \"no\" ; then\n   case \"$host_os:$compiler\" in\n    darwin* | irix* | cygwin* | *:Cray ) ;;\n    solaris*:WorkShop*       )  : ${MT_FLAG:=\"-mt\"} ;;\n    solaris*:GCC             )  : ${MT_FLAG:=\"-pthreads\"} ;;\n    *:KCC                    )  : ${MT_FLAG:=\"--thread_safe\"} ;;\n    *:Compaq | *:GCC | *:ICC )  : ${MT_FLAG:=\"-pthread\"} ;;\n    *:VisualAge              )  : ${MT_FLAG:=\"-qthreaded\"} ;;\n    * )\n       msg=\"Do not know how to build MT-safe with compiler $CXX $compiler_ver\"\n       case \"$with_mt\" in\n          yes ) AC_MSG_ERROR([$msg]) ;;\n          ''  ) AC_MSG_WARN([$msg]); with_mt=no ;;\n       esac\n       ;;\n   esac\nfi\n\nif test \"$with_mt\" != \"no\" ; then\n   CPPFLAGS=\"$CPPFLAGS -D_MT -D_REENTRANT -D_THREAD_SAFE\"\n   case \"$host_os:$compiler\" in\n     solaris2.10:GCC ) : ${THREAD_LIBS:=\"-lposix4\"} ;;\n     solaris*        ) : ${THREAD_LIBS:=\"-lpthread -lposix4\"} ;;\n     freebsd*        ) ;; # -pthread already substitutes libc_r for libc\n     *               ) : ${THREAD_LIBS:=\"-lpthread\"} ;;\n   esac\n   LIBS=\"$LIBS $THREAD_LIBS\"\n   case \"$host_os:$compiler\" in\n     solaris2.??:* | solaris*:GCC | *:Compaq | irix* | aix* | darwin* | cygwin*)\n        NCBIATOMIC_LIB=\n        ;;\n     *:GCC | *:ICC | linux*:KCC )\n        case \"$host_cpu\" in\n           i?86 | powerpc* | ppc* | x86_64 | sparc* ) NCBIATOMIC_LIB= ;;\n           * ) NCBIATOMIC_LIB=xncbi ;;\n        esac\n        ;;\n     *:WorkShop* | solaris*:KCC )\n        NCBIATOMIC_LIB=xncbi\n        ncbicntr=\"ncbicntr_workshop ncbiatomic_workshop\"\n        ;;\n     * ) NCBIATOMIC_LIB=xncbi ;;\n   esac\n   case \"$compiler\" in\n      GCC )\n         if $CC -v 2>&1 | grep clang >/dev/null; then\n            :\n            # Will allegedly support -openmp at some point, but as of 3.4,\n            # just parses it as specifying an output filename: -o penmp.\n         else\n            case \"$compiler_version\" in\n               [[123]]?? | 4[[01]]? ) ;;\n               * ) : ${OPENMP_FLAGS=-fopenmp} ;;\n            esac\n         fi\n         ;;\n      ICC )\n         : ${OPENMP_FLAGS=-openmp}\n         ;;\n      WorkShop* )\n         : ${OPENMP_FLAGS=-xopenmp=parallel}\n         ;;\n   esac\n   if test \"$with_openmp\" = yes; then\n      MT_FLAG=\"$MT_FLAG $OPENMP_FLAGS\"\n      OPENMP_FLAGS=\n   fi\n   mt_sfx=\"MT\"\n   NCBI_FEATURE(MT)\nelse\n   CPPFLAGS=\"$CPPFLAGS -DNCBI_WITHOUT_MT\"\n   MT_FLAG=\n   THREAD_LIBS=\n   NCBIATOMIC_LIB=\n   OPENMP_FLAGS=\n   mt_sfx=\"\"\nfi\nMT_SFX=\"${mt_sfx}\"\nAC_SUBST(MT_SFX)\n\nCFLAGS=\"$MT_FLAG $CFLAGS\"\nCXXFLAGS=\"$MT_FLAG $CXXFLAGS\"\nLDFLAGS=\"$MT_FLAG $LDFLAGS\"\n\nAPP_LDFLAGS=\nDLL_LDFLAGS=\n\n#### Provide default environment setup for known platforms/compilers\nDEPFLAGS=\"-M\"\nDEPFLAGS_POST=\"\" # Needed for VisualAge\nOBJCXX_CXXFLAGS=\nOBJCXX_LIBS=\ncase \"$host_os:$compiler\" in\n solaris2\\.6:GCC )\n   echo \"GCC compiler is not supported for:  $host\"\n   compiler=\n   ;;\n\n solaris*:GCC )\n   STRIP=\"@:\"\n   ;;\n\n linux*:ICC )\n   # \"incomplete type is not allowed\" should be an error, not a warning!\n   CFLAGS=\"-we70 $CFLAGS\"\n   CXXFLAGS=\"-we70 $CXXFLAGS\"\n   case \"$compiler_version\" in\n      1[[1-9]]?? ) MATH_LIBS=-Wl,-lm ;; # avoid static libimf in shared libs\n   esac\n   ;;\n\n irix*:GCC )\n   if test \"$with_debug\" != \"no\" ; then\n      LDFLAGS=\"-LD_LAYOUT:lgot_buffer=32 $LDFLAGS\"\n   fi\n   ;;\n\n solaris*:WorkShop* )\n   CPPFLAGS=\"-D__EXTENSIONS__ $CPPFLAGS\"\n   CXXFLAGS=\"+w +w2 $CXXFLAGS\"\n   DEPFLAGS=\"-xM1\"\n   LDFLAGS=\"-xildoff $LDFLAGS\"\n   AR=${AR:=\"$CXX $MT_FLAG -xar -o\"}\n   STRIP=\"@:\"\n   if test \"$with_symbols\" = \"no\" -a \"$with_profiling\" != \"yes\" \\\n      -a \"$with_strip\" = \"yes\" ; then\n      LDFLAGS=\"-s $LDFLAGS\"\n   fi\n   # Recent versions default to DWARF, yielding much larger executables in\n   # debug configurations; insist on STABS when the choice exists, even for\n   # versions that already default to it.\n   case \"$with_symbols:$compiler\" in\n      no:* | *:WorkShop5[[0-4]] ) ;;\n      * )\n         CFLAGS=\"-xdebugformat=stabs $CFLAGS\"\n         CXXFLAGS=\"-xdebugformat=stabs $CXXFLAGS\"\n         ;;\n   esac\n   CXX_FILTER=\"2>&1 | \\$(top_srcdir)/compilers/unix/cxx_filter.WorkShop.sh\"\n   LINK_FILTER=\"$CXX_FILTER\"\n   AR_FILTER=\"$CXX_FILTER\"\n   serial_ws50_rtti_kludge=\"rtti\"\n   ;;\n\n irix*:MIPSpro73 )\n   COMMON_FLAGS=\"-fullwarn -brief_diagnostics -use_readonly_const -G0 -rdata_shared\"\n   # Warnings we disable (messages courtesy of \"gettxt cc.cat.m:N\")\n   # 1107: A signed bit field has a length of 1 bit.\n   # 1169: External/internal linkage conflicts with a previous declaration.\n   # 1209: The controlling expression is constant. [while (0) et al.]\n   # 1424: The %n1 is not used in declaring the argument types of %n2.\n   # 1429: The type \"long long\" is nonstandard.\n   # 1460: Function %n is redeclared \"inline\" after being called.\n   # 1521: A nonstandard preprocessing directive is used.\n   CFLAGS=\"$COMMON_FLAGS -woff 1209 $CFLAGS\"\n   CXXFLAGS=\"$COMMON_FLAGS -ansiW -ptused -FE:eliminate_duplicate_inline_copies -FE:template_in_elf_section -no_auto_include -LANG:std -LANG:ansi-for-init-scope -woff 1460,1521,1429,1169,1209,1107,1424 $CXXFLAGS\"\n   : ${CXXCPP:=\"$CXX -E -LANG:std\"}\n   LDFLAGS=\"-LANG:std -G0 -FE:eliminate_duplicate_inline_copies -FE:template_in_elf_section $LDFLAGS\"\n   CPPFLAGS=\"-D__LONGLONG $CPPFLAGS\"\n   CXX_FILTER=\"2>&1 | \\$(top_srcdir)/compilers/unix/cxx_filter.$compiler.sh\"\n   ;;\n\n cygwin*:GCC )\n   with_dll=\"no\"\n   # : ${NETWORK_LIBS:=\"-lws2_32\"}\n   CONF_exe_ext=\".exe\"\n   ;;\n\n cygwin*:MSVC )\n   with_dll=\"no\"\n   CFLAGS=\"/W4 /Od /Zi /DEBUG /D_DEBUG\"\n   CXXFLAGS=\"/W4 /Od /Zi /DEBUG /D_DEBUG\"\n   CPPFLAGS=\"/nologo $CPPFLAGS\"\n   LDFLAGS=\"/DEBUG\"\n   AR=\"lib.exe\"\n   RANLIB=\":\"\n   STRIP=\"@:\"\n   CONF_obj_ext=\".obj\"\n   CONF_lib_ext=\".lib\"\n   CONF_dll_ext=\".dll\"\n   CONF_lib_l_ext=\".lib\"\n   CONF_lib_pre=\" \"\n   CONF_lib_l_pre=\" \"\n   CONF_exe_ext=\".exe\"\n   CONF_f_compile=\"/c \"\n   CONF_f_outobj=\"/Fo\"\n   CONF_f_outlib=\"/OUT:\"\n   CONF_f_libpath=\"/LIBPATH:\"\n   CONF_f_outexe=\"/OUT:\"\n   script_shell=\"\"\n   make_shell=\"\"\n   ;;\n\n *:VisualAge)\n   # 1506-1108 (I) The use of keyword '__attribute__' is non-portable.\n   CFLAGS=\"-qlanglvl=extc99 -qsuppress=1506-1108 $CFLAGS\"\n   # 1540-1663 (W) Incorrect assignment of a restrict qualified pointer.\n   CXXFLAGS=\"-qrtti=all -qsuppress=1540-1663 $CXXFLAGS\"\n   DEPFLAGS=\"-E -M\"\n   DEPFLAGS_POST='>/dev/null 2>&1; (cat $*.u; rm -f $*.u)'\n   ;;\n\n *:Compaq)\n   CPPFLAGS=\"-D__USE_STD_IOSTREAM $CPPFLAGS\"\n   CXXFLAGS=\"-tweak -nocompress -distinguish_nested_enums $CXXFLAGS\"\n   DEPFLAGS=\"$DEPFLAGS -distinguish_nested_enums\"\n   case \"$host_os\" in\n      osf*)\n        # Suppress link warnings; otherwise, we get \"weak symbol multiply\n        # defined\" all over the place.\n        LDFLAGS=\"-Wl,-S $LDFLAGS\"\n        # The linker sometimes needs a LOT of memory.\n        LINK=\"ulimit -d \\`ulimit -H -d\\` && $LINK\"\n        ;;\n   esac\n   ;;\n\n darwin*:GCC)\n   case `uname -m` in\n      *64 ) : ${with_64=yes} ;;\n      *   ) : ${with_64=no}  ;;\n   esac\n   # Per <http://fink.sourceforge.net/doc/porting/shared.php>, it was\n   # historically necessary to build plugins as Mach-O bundles rather than\n   # dynamic libraries.  That's not such a big deal on modern Mac OS X\n   # versions, so the Toolkit now defaults to building only the latter.\n   CONF_dll_ext=\".dylib\"\n   if test \"$with_bundles\" = yes; then\n      CONF_loadable_ext=\".so\"\n   else\n      CONF_loadable_ext=\".dylib\"\n   fi\n   if $CXX -v 2>&1 | grep -q Apple; then\n      CFLAGS=\"-fpascal-strings $CFLAGS\"\n      CXXFLAGS=\"-fpascal-strings $CXXFLAGS\"\n      if $CXX -v 2>&1 | grep -q clang; then\n         try_old_sdks=no\n      else\n         try_old_sdks=$with_ncbi_public\n         CXXFLAGS=\"-fno-permissive $CXXFLAGS\"\n      fi\n      # -flat_namespace is necessary for proper handling of shared libraries\n      # that don't themselves link against all their dependencies.\n      LDFLAGS=\"-flat_namespace $LDFLAGS\"\n\n      if test \"$try_old_sdks\" = yes; then\n         sdks='/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.7.sdk'\n         case \"$host_os\" in\n            darwin?.* | darwin10.* ) # Mac OS X 10.6.x or older\n               TARGET='-mmacosx-version-min=10.5'\n               sdks=\"/Developer/SDKs/MacOSX10.6.sdk\"\n               if test \"$with_64:${with_universal-no}\" != \"yes:no\"; then\n                  sdks=\"/Developer/SDKs/MacOSX10.5.sdk $sdks\"\n               fi\n               ;;\n            * )\n               TARGET='-mmacosx-version-min=10.7'\n               ;;\n         esac\n         for sdk in $sdks; do\n            if test -d \"$sdk\"; then \n               TARGET=\"-isysroot $sdk $TARGET\"\n               break\n            fi\n         done\n         CC=\"$CC $TARGET\"\n         CXX=\"$CXX $TARGET\"\n      fi\n   else\n      LDFLAGS=\"-Wl,-flat_namespace $LDFLAGS\"\n   fi\n   if test -f /usr/include/dlfcn.h; then\n      # may be able to do without /sw, so ignore it by default\n      :\n   elif test -f /sw/include/dlfcn.h; then\n      CPPFLAGS=\"-I/sw/include $CPPFLAGS\"\n      LDFLAGS=\"-L/sw/lib $LDFLAGS\"\n   else\n      AC_MSG_WARN([No dlfcn.h in /usr/include or /sw/include.])\n   fi\n   case \"$CPPFLAGS $LIBS\" in\n      *sw/*) ;;\n      *)\n         if test -d \"$orig_NCBI/safe-sw\"; then\n             CPPFLAGS=\"-I$orig_NCBI/safe-sw/include $CPPFLAGS\"\n             LDFLAGS=\"-L$orig_NCBI/safe-sw/lib $LDFLAGS\"\n         fi\n         ;;\n   esac\n   : ${with_x=${with_xpm-no}}\n\n   # CPPFLAGS=\"-F/System/Library/Frameworks/CoreServices.framework/Frameworks $CPPFLAGS\"\n   LIBS=\"-Wl,-framework,ApplicationServices $LIBS\"\n\n   OBJCXX_CXXFLAGS='-x objective-c++'\n   OBJCXX_LIBS='-lobjc'\n   ;;\nesac\n\n\n#### Set makefile variables for platform-specific includes\nchangequote(, )dnl\nCOMPILER=`echo $ncbi_compiler | tr '[A-Z]' '[a-z]'`\nOSTYPE=`echo $host_os | sed -e 's/[0-9.]*$//; s/-gnu[^-]*$//; y/A-Z/a-z/'`\nchangequote([, ])dnl\n\n\n#### Check if the compiler matches one of supported compilers on this platform\nif test -z \"$compiler\" ; then\n   cat <<EOF\n\n  Compiler $CXX $compiler_ver is not fully supported.\n  Consult doc/config.html\\#ref_Compilers for the list of\n  fully supported platforms/compilers.\nEOF\n   NCBI_CAUTION([Do you still want to proceed (at your own risk)?])\n   echo\n   compiler=\"UNKNOWN\"\nfi\n\n\nC_LIBS=$LIBS\n\n\nARCH_CPPFLAGS=\n#### architecture settings, and extra C++ LIBS\nif test \"${with_universal-no}\" != \"no\" ; then\n   bit64_sfx= #\"Univ\"\n   case \"$host\" in\n    *-*-darwin[[89]].* | *-*-darwin[[1-9]][[0-9]]* )\n      case \"$with_universal\" in\n       yes )\n          case \"$with_64:$host_os\" in\n           yes:darwin8.* )\n             AC_MSG_ERROR([Unable to build 64-bit universal binaries on $host])\n             ;;\n           yes:* )\n             ARCH_CFLAGS=\"-arch ppc64 -arch x86_64\"\n             ARCH_CPPFLAGS=\"-m64\"\n             ;;\n           * )\n             ARCH_CFLAGS=\"-arch ppc -arch i386\"\n             ARCH_CPPFLAGS=\"-m32\"\n             ;;\n          esac\n          ;;\n       * )\n         ARCH_CFLAGS=\"-arch `echo $with_universal | sed -e 's/,/ -arch /g'`\"\n         ARCH_CPPFLAGS=\"-arch `echo $with_universal | sed -e 's/,.*//'`\"\n         ;;\n      esac\n      case \"$host\" in\n       p*pc*-*-darwin8.*)\n         # Must specify -isysroot ..., but only once; anyway, the preprocessor\n         # needs to see it, and naturally can't cope with multiple -arch flags.\n         # The -mmacosx-version-min flag avoids link errors under OS 10.5\n         # (Darwin 9), which otherwise tries to use crt1.10.5.o despite the\n         # request for a sysroot lacking that file.\n         SYSROOT=\"-isysroot /Developer/SDKs/MacOSX10.4u.sdk -mmacosx-version-min=10.4\"\n         #ARCH_CFLAGS=\"$SYSROOT $ARCH_CFLAGS\"\n         CC=\"$CC $SYSROOT\"\n         CXX=\"$CXX $SYSROOT\"\n         ;;\n      esac\n      ;;\n    * ) AC_MSG_ERROR([Do not know how to build universal binaries on $host]) ;;\n   esac\n   AC_DEFINE(NCBI_UNIVERSAL_BUILD, 1,\n             [Define to 1 if building universal (multi-architecture) binaries.])\n   with_distcc=no\nelif test \"$with_64\" = \"yes\" ; then\n   bit64_sfx=\"64\"\n   case \"$host:$compiler\" in\n    sparc-sun-solaris*:WorkShop5 | sparc-sun-solaris*:KCC )\n      ARCH_CFLAGS=\"-xtarget=ultra -xarch=v9\"\n      ;;\n    sparc-sun-solaris*:WorkShop51 )\n      ARCH_CFLAGS=\"-xtarget=ultra -xarch=v9\"\n      LIBS=\"-Bstatic -L$CXX_PATH/../lib -lCstd -lCrun -Bdynamic $LIBS -lc\"\n      ;;\n    *solaris*:WorkShop59 | *solaris*:WorkShop51? )\n      ARCH_CFLAGS=\"-m64\"\n      LIBS=\"-lCstd -lCrun $LIBS -lc\"\n      ;;\nchangequote(, )dnl\n    *solaris*:WorkShop5* )\n      ARCH_CFLAGS=\"-xtarget=generic64\"\n      # Redundant for programs, but necessary for dlopen-able shared libs,\n      # at least in the x86 ReleaseMT configuration.\n      LIBS=\"-lCstd -lCrun $LIBS -lc\"\n      ;;\nchangequote([, ])dnl\n    mips*:GCC )\n      ARCH_CFLAGS=\"-mips64\"\n      ;;\n    *:GCC )\n      # May not work prior to GCC 3.1.\n      ARCH_CFLAGS=\"-m64\"\n      case $host_os in darwin*) ARCH_CPPFLAGS=\"-m64\" ;; esac\n      ;;\n\n    mips-sgi-irix*:MIPSpro73 )\n      ARCH_CFLAGS=\"-64\"\n      CPPFLAGS=\"$ARCH_CFLAGS $CPPFLAGS\"\n      AR=${AR:=\"$CXX $ARCH_CFLAGS -ar -WR,-v -o\"}\n      ;;\n    mips-sgi-irix*:KCC )\n      ARCH_CFLAGS=\"-64\"\n      ;;\n    * )\n      AC_MSG_ERROR([Do not know how to compile 64-bit with compiler $CXX $compiler_ver $host:$compiler])\n      ;;\n   esac\nelse\n   bit64_sfx=\n   ARCH_CFLAGS=\n   if test \"$with_64\" = \"no\" ; then\n      case \"$host:$compiler\" in\n       *solaris*:WorkShop* | *solaris*:KCC )\n         ARCH_CFLAGS=\"-xtarget=generic\"\n         ;;\n       mips*:GCC )\n         ARCH_CFLAGS=\"-mipsn32\"\n         ;;\n       *:GCC )\n         # May not work prior to GCC 3.1.\n         ARCH_CFLAGS=\"-m32\"\n         case $host_os in darwin*) ARCH_CPPFLAGS=\"-m32\" ;; esac\n         ;;\n\n       mips-sgi-irix*:MIPSpro73 )\n         ARCH_CFLAGS=\"-n32\"\n         CPPFLAGS=\"$ARCH_CFLAGS $CPPFLAGS\"\n         AR=${AR:=\"$CXX $ARCH_CFLAGS -ar -WR,-v -o\"}\n         ;;\n       mips-sgi-irix*:KCC )\n         ARCH_CFLAGS=\"-n32\"\n         ;;\n       * )\n         # Just a warning, since 32-bit mode is typically the default anyway...\n         AC_MSG_WARN([Do not know how to compile 32-bit with compiler $CXX $compiler_ver $host:$compiler])\n         ;;\n      esac\n   fi\n   case \"$host:$compiler\" in\n    *solaris*:WorkShop5 )\n      LIBS=\"-Bstatic -L$CXX_PATH/../SC5.0/lib -lm -Bdynamic $LIBS\"\n      MATH_LIBS=\" \"\n      ;;\n    *solaris*:WorkShop51 )\n      LIBS=\"-Bstatic -L$CXX_PATH/../lib -lCstd -lCrun -lm -Bdynamic $LIBS -lc\"\n      MATH_LIBS=\" \"\n      ;;\n    sparc-sun-solaris*:WorkShop54 )\n      # Using this (still very conservative) non-generic XARCH flavor allows\n      # compiler to use the extended instruction set which reportedly speeds\n      # up the locking of at least some STL classes by allowing them to use\n      # atomic increment instead of mutex;  also seems to fix something that\n      # caused misterios basic_string<> related crashes in the\n      # WorkShop54 -xarch=v8 -mt configuration).\n      ARCH_CFLAGS=\"-xarch=v8plus\"\n      LIBS=\"-lCstd $LIBS -lCrun -lc\"\n      ;;\nchangequote(, )dnl\n    *solaris*:WorkShop5* )\n      # MATH_LIBS=\" \"\n      # Redundant for programs, but necessary for dlopen-able shared libs,\n      # at least in the x86 ReleaseMT configuration.\n      LIBS=\"-lCstd $LIBS -lCrun -lc\"\n      ;;\nchangequote([, ])dnl\n    *irix*:MIPSpro73 | *irix*:KCC )\n      ARCH_CFLAGS=\"-n32\"\n      ;;\n   esac\nfi\n\ncase \"$host_os:$host_cpu\" in\n   linux*:alpha*)\n      ARCH_CFLAGS=\"-mieee $ARCH_CFLAGS\"\n      ;;\nesac\n\nCPPFLAGS=\"$ARCH_CPPFLAGS $CPPFLAGS\"\nCFLAGS=\"$ARCH_CFLAGS $CFLAGS\"\nCXXFLAGS=\"$ARCH_CFLAGS $CXXFLAGS\"\nLDFLAGS=\"$ARCH_CFLAGS $LDFLAGS\"\n\n: ${MATH_LIBS:=\"-lm\"}\n\n### Math lib to be always linked in\nLIBS=\"$MATH_LIBS $LIBS\"\nC_LIBS=\"$MATH_LIBS $C_LIBS\"\n\n### Should go before any test compiler runs\nAC_GNU_SOURCE\n\nif test -n \"$with_64\"; then\n   AC_CACHE_CHECK([whether this system supports --with(out)-64],\n      ncbi_cv_sys_with64_ok,\n      [AC_LINK_IFELSE([\n          AC_LANG_PROGRAM([#include <string>],\n                          [std::string* sp = new std::string(\"foo\");])],\n          ncbi_cv_sys_with64_ok=yes, ncbi_cv_sys_with64_ok=no)])\n   if test \"$ncbi_cv_sys_with64_ok\" = no; then\n      AC_MSG_ERROR([cannot continue; please try different options])\n   fi\nfi\n\n\ncase \"$host_os:$compiler\" in\n   darwin*:GCC )\n      AC_CACHE_CHECK([whether $CC supports -Wl,-rpath],\n         ncbi_cv_prog_cc_wl_rpath,\n         [orig_LDFLAGS=$LDFLAGS\n          LDFLAGS=\"-Wl,-rpath,. $LDFLAGS\"\n          AC_LINK_IFELSE([AC_LANG_PROGRAM([],[])],\n             [ncbi_cv_prog_cc_wl_rpath=yes], [ncbi_cv_prog_cc_wl_rpath=no])\n          LDFLAGS=$orig_LDFLAGS])\n      ;;\n   *:GCC | *:ICC )\n      AC_CACHE_CHECK([whether $CC has an option to export all symbols],\n         ncbi_cv_prog_cc_export_all,\n         [orig_LDFLAGS=$LDFLAGS\n          ncbi_cv_prog_cc_export_all=no\n          for x in -Wl,--export-all-symbols -Wl,-export-dynamic -rdynamic \\\n                   -Wl,-E; do\n             LDFLAGS=\"$x $orig_LDFLAGS\"\n             AC_LINK_IFELSE([AC_LANG_PROGRAM([],[])],\n                [ncbi_cv_prog_cc_export_all=$x])\n             test \"x$ncbi_cv_prog_cc_export_all\" = \"xno\"  ||  break\n          done\n          LDFLAGS=$orig_LDFLAGS])\n      test \"$ncbi_cv_prog_cc_export_all\" = no  || \\\n         LDFLAGS=\"$ncbi_cv_prog_cc_export_all $LDFLAGS\"\n      AC_CACHE_CHECK([whether $CC supports -Wl,--{en,dis}able-new-dtags],\n         ncbi_cv_prog_cc_new_dtags,\n         [orig_LDFLAGS=$LDFLAGS\n          LDFLAGS=\"-Wl,--enable-new-dtags $LDFLAGS\"\n          AC_LINK_IFELSE([AC_LANG_PROGRAM([],[])],\n             [ncbi_cv_prog_cc_new_dtags=yes], [ncbi_cv_prog_cc_new_dtags=no])\n          LDFLAGS=$orig_LDFLAGS])\n      if test \"$ncbi_cv_prog_cc_new_dtags\" = yes; then\n          if test \"$with_hard_runpath\" = yes; then\n             LDFLAGS=\"-Wl,--disable-new-dtags $LDFLAGS\"\n          else\n             LDFLAGS=\"-Wl,--enable-new-dtags $LDFLAGS\"\n          fi\n      fi\n      ;;\nesac\n\nif $CXX -v 2>&1 | grep -q clang; then\n   CFLAGS=\"$CFLAGS -Wno-deprecated-register\"\n   CXXFLAGS=\"$CXXFLAGS -Wno-deprecated-register\"\n\n   case \"$host_os:$CXX\" in\n      darwin[[0-9]].*:/usr/bin/* | darwin1[[0-2]].*:/usr/bin/* )\n         ncbi_cv_prog_cxx_stdlib_libcxx=no\n         ;;\n   esac\n\n   AC_CACHE_CHECK([whether $CXX supports -stdlib=libc++],\n      ncbi_cv_prog_cxx_stdlib_libcxx,\n      [orig_CXX=$CXX\n       CXX=\"$orig_CXX -stdlib=libc++\"\n       AC_LINK_IFELSE([AC_LANG_PROGRAM([#include <stdexcept>],\n             [std::logic_error le(\"Inconceivable!\");])],\n          [ncbi_cv_prog_cxx_stdlib_libcxx=yes],\n          [ncbi_cv_prog_cxx_stdlib_libcxx=no])\n       CXX=$orig_CXX])\n   test \"$ncbi_cv_prog_cxx_stdlib_libcxx\" = no  ||  CXX=\"$CXX -stdlib=libc++\"\nfi\n\nAC_CHECK_DECL([_LIBCPP_VERSION], [], [], [#include <iosfwd>])\n\ncase \"$ac_cv_have_decl__LIBCPP_VERSION:$compiler:$compiler_version\" in\n   no:GCC:4[[0-6]]? | no:ICC:1[[01]]?? )\n     ncbi_cv_prog_cxx_11=no\n     ncbi_cv_prog_c_99=no\n     ;;\n   *:ICC:* )\n     ncbi_cv_prog_c_99='-std=gnu99 -fgnu89-inline'\n     ;;\nesac\n\nAC_CACHE_CHECK([how to enable C++ '11 features in $CXX],\n   ncbi_cv_prog_cxx_11,\n   [orig_CXX=$CXX\n    ncbi_cv_prog_cxx_11=no\n    for x in -std=gnu++11 -std=gnu++0x; do\n       CXX=\"$orig_CXX $x\"\n       AC_LINK_IFELSE([AC_LANG_PROGRAM([], [])],\n          [ncbi_cv_prog_cxx_11=$x])\n          test \"x$ncbi_cv_prog_cxx_11\" = \"xno\"  ||  break\n       done\n       CXX=$orig_CXX])\ntest \"$ncbi_cv_prog_cxx_11\" = no  ||  CXX=\"$CXX $ncbi_cv_prog_cxx_11\"\n\nAC_LANG_PUSH(C)\nAC_CACHE_CHECK([how to enable C '11 or at least '99 features in $CC],\n   ncbi_cv_prog_c_99,\n   [orig_CC=$CC\n    ncbi_cv_prog_c_99=no\n    for x in -xc99=all \"-std=gnu11 -fgnu89-inline\" \\\n             \"-std=gnu1x -fgnu89-inline\" \\\n             \"-std=gnu99 -fgnu89-inline\" \\\n             \"-std=gnu9x -fgnu89-inline\"; do\n       CC=\"$orig_CC $x\"\n       AC_LINK_IFELSE([AC_LANG_PROGRAM([], [])],\n          [ncbi_cv_prog_c_99=$x])\n          test \"x$ncbi_cv_prog_c_99\" = \"xno\"  ||  break\n       done\n       CC=$orig_CC])\nAC_LANG_POP(C)\ntest \"$ncbi_cv_prog_c_99\" = no  ||  CC=\"$CC $ncbi_cv_prog_c_99\"\n\ncase \"$host_os:$compiler\" in\n solaris*:GCC )\n   # On Solaris, GCC defaults to setting _XOPEN_SOURCE (to 500) only\n   # in C++ mode.  Set it for C code as well to ensure consistent\n   # header behavior, taking care to match the C standard version\n   # (as enforced by <sys/feature_tests.h>).\n   case \"$ncbi_cv_prog_c_99\" in\n      no) CC=\"$CC -D_XOPEN_SOURCE=500\" ;;\n      *)  CC=\"$CC -D_XOPEN_SOURCE=600\" ;;\n   esac\n   ;;\nesac\n\n\n### large file support (switch to AC_SYS_LARGEFILE?)\ncase \"$host_os:$compiler:$compiler_version\" in\n    cygwin* ) with_lfs=no ;;\n    *:GCC:3[[4-9]]* | *:GCC:[[4-9]]* | *:ICC:[[91]]* ) : ${with_lfs=yes} ;;\nesac\n\nif test \"$with_lfs\" = \"yes\" ; then\n   LFSFLAGS=\"-D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64\"\n   # Modern BSD-based systems (including Mac OS X) already use a 64-bit\n   # off_t, but don't necessarily provide explicit ...64 variants of all\n   # relevant functions.\n   case \"$host_os\" in\n      *bsd* | darwin* ) ;;\n      * ) LFSFLAGS=\"$LFSFLAGS -D_LARGEFILE64_SOURCE\" ;;\n   esac\n   CPPFLAGS=\"$LFSFLAGS $CPPFLAGS\"\nfi\n\ntabchar='\t'\nwschars=\" $tabchar\"\nwsrx=\"[[$wschars]]\"\n\n#### Flags to enable (potentially unsafe) extra optimization.\nif test \"$skip_fast_flags\" = no -a -z \"$DEF_FAST_FLAGS\" ; then\n   case \"$compiler:$compiler_version\" in\n      GCC:2* | GCC:344 )\n        # GCC 2.9x sometimes experiences internal errors at high optimization;\n        # GCC 3.4.4 (at least on FreeBSD) meanwhile generates crashprone code.\n        DEF_FAST_FLAGS=\"-O2\"\n        ;;\n      GCC:* )\n        DEF_FAST_FLAGS=\"-O3 -finline-functions -fstrict-aliasing\"\n        case \"$host_os:$host_cpu:$compiler_version\" in\n           freebsd* | solaris*:*86*:* | *:4[[5-9]]? | *:[[5-9]]?? ) ;;\n           * ) DEF_FAST_FLAGS=\"$DEF_FAST_FLAGS -ffast-math\" ;;\n        esac\n        if test \"$with_profiling\" != \"yes\"; then\n           # incompatible with -pg\n           DEF_FAST_FLAGS=\"$DEF_FAST_FLAGS -fomit-frame-pointer\"\n        fi\n        ;;\n      WorkShop5[[89]]* | WorkShop510 )\n        # Limit optimization to -xO2 (-O now maps to -xO3) due to compiler bugs.\n        subst=\"s/[$wsrx]-x*O[[1-9]]*//g\"\n        CFLAGS=\"`  echo \\\" $CFLAGS\\\"   | sed -e \\\"$subst\\\"` -xO2\"\n        CXXFLAGS=\"`echo \\\" $CXXFLAGS\\\" | sed -e \\\"$subst\\\"` -xO2\"\n        LDFLAGS=\"` echo \\\" $LDFLAGS\\\"  | sed -e \\\"$subst\\\"` -xO2\"\n        DEF_FAST_FLAGS=\"-xO2\"\n        ;;\n      WorkShop* )\n        DEF_FAST_FLAGS=\"-fast\"\n        case \"$with_ncbi_public:$host_cpu\" in\n           yes:sparc* )\n              DEF_FAST_FLAGS=\"$DEF_FAST_FLAGS -xtarget=ultra\"\n              ;;\n           *:i?86)\n              case \"$compiler_ver\" in\n                *5.[[0-4]]*)\n                  # Work around a WorkShop standard library bug.\n                  DEF_FAST_FLAGS=\"$DEF_FAST_FLAGS -D_RWSTD_NO_TEST_AND_SET\"\n                  ;;\n              esac\n              ;;\n        esac\n        # (Re)include ARCH_CFLAGS here because -fast implies -xtarget=native.\n        DEF_FAST_FLAGS=\"$DEF_FAST_FLAGS $ARCH_CFLAGS\"\n        ;;\n      KCC:* )\n        DEF_FAST_FLAGS=\"+K3\"\n        case \"$host_os\" in\n           solaris* )  DEF_FAST_FLAGS=\"$DEF_FAST_FLAGS -fast $ARCH_CFLAGS\" ;;\n        esac\n        ;;\n      ICC:[[1-8]]?? )\n        DEF_FAST_FLAGS=\"-O2\"\n        ;;\n      ICC:9?? )\n        DEF_FAST_FLAGS=\"-O3 -axP -ip\" # optimized for Core or P4 w/SSE3 (max)\n        ;;\n      ICC:10?? )\n        DEF_FAST_FLAGS=\"-O3 -axT -ip\" # Core 2 w/SSSE3; axS would cover SSE 4.1\n        ;;\n      ICC:* )\n        # Core 2; ICC 11 goes up to SSE4.2 (i7), ICC 12 up to CORE-AVX-I\n        DEF_FAST_FLAGS=\"-O3 -axSSSE3 -ip\"\n        ;;\n      MIPSpro* )\n        # -Ofast would be preferable, but runs into resource limits when\n        # building libxblast.so. :-/\n        DEF_FAST_FLAGS=\"-O2\"\n        ;;\n      Compaq:* )\n        DEF_FAST_FLAGS=\"-fast\"\n        ;;\n      * )\n        DEF_FAST_FLAGS=\"-O\"\n        ;;\n   esac\nfi\n\n: ${FAST_CFLAGS=\"$DEF_FAST_FLAGS\"}\n: ${FAST_CXXFLAGS=\"$DEF_FAST_FLAGS\"}\n: ${FAST_LDFLAGS=\"$DEF_FAST_FLAGS\"}\n\n\n#### DLLs\n\n# Generate position-independent code (PIC)\nif test -z \"$CFLAGS_DLL\"  -a  -z \"$CXXFLAGS_DLL\" ; then\n   case \"$host_os:$compiler\" in\n    darwin*:GCC )\n      CFLAGS_DLL=\"-fno-common\"\n      CXXFLAGS_DLL=\"-fno-common\"\n      ;;\n    *:GCC | linux* )\n      CFLAGS_DLL=\"-fPIC\"\n      CXXFLAGS_DLL=\"-fPIC\"\n      ;;\n    solaris*:WorkShop* | irix*:MIPSpro73 | \\\n    solaris*:KCC | irix*:KCC )\n      CFLAGS_DLL=\"-KPIC\"\n      CXXFLAGS_DLL=\"-KPIC\"\n      ;;\n   esac\nfi\n\n# Flag for setting the runtime library search path\nif test -z \"$CONF_f_runpath\" ; then\n   case \"$host_os:$compiler\" in\n    solaris* )\n      CONF_f_runpath=\"-R\"\n      ;;\n    linux*:[[GI]]CC | *bsd*:GCC | cygwin*:GCC | osf*:GCC )\n      CONF_f_runpath=\"-Wl,-rpath,\"\n      ;;\n    irix*:* | linux*:KCC | *:Compaq )\n      CONF_f_runpath=\"-rpath \"\n      ;;\n    darwin* )\n      test \"$ncbi_cv_prog_cc_wl_rpath\" = no  ||  CONF_f_runpath=\"-Wl,-rpath,\"\n      ;;\n   esac\nfi\ncase \"$host_os:$ncbi_cv_prog_cc_wl_rpath\" in\n    linux*|solaris* )\n        origin=\"'\\$\\$ORIGIN'\"\n        RUNPATH_ORIGIN=\"$CONF_f_runpath$origin\"\n        ;;\n    darwin*:yes )\n        origin='@executable_path'\n        RUNPATH_ORIGIN=\"$CONF_f_runpath$origin\"\n        ;;\n    * )\n        origin=\n        RUNPATH_ORIGIN=\"-DNCBI_RPO_SUFFIX_EATER=\"\n        ;;\nesac\n\ncase \"$compiler:$compiler_version:$with_bin_release\" in\n  GCC:*:yes )\n    libstdcxx=`$CXX $LDFLAGS -print-file-name=libstdc++.a`\n    case \"$libstdcxx\" in\n       /*)\n          LIBS=\"$libstdcxx $LIBS\"\n          LINK=$C_LINK\n          ;;\n       *)\n          AC_MSG_WARN([Unable to find static libstdc++ requested by --with-bin-release.])\n          ;;\n    esac\n    ;;\n  GCC:* )\n    # Need to specify runpath for compiler-provided libraries\n    case $compiler_version in\n        30*     ) major=3 ;;\n        31*     ) major=4 ;;\n        3[[23]]*) major=5 ;;\n        *       ) major=6 ;;\n    esac\n    found=false\n    for f in libstdc++.so.$major libgcc_s.so.1 libstdc++.a; do\n        path=`$CXX $LDFLAGS -print-file-name=$f`\n        dir=`dirname \"$path\"`\n        abs_dir=`cd \"$dir\" && pwd`\n        case \"$dir:$abs_dir\" in\n            *:/lib | *:/usr/lib | *:/usr/lib32 | *:/usr/lib64 ) \n               # no rpath needed\n               break\n               ;;\n            /* )\n               found=true\n               break\n               ;;\n        esac\n    done\n    if test \"$found\" = \"true\" -a -n \"$CONF_f_runpath\"; then\n        LDFLAGS=\"$CONF_f_runpath$dir $LDFLAGS\"\n        case \"$host_os\" in\n           osf*)\n              # the linker doesn't merge -rpath flags...\n              CONF_f_runpath=\"$CONF_f_runpath$dir:\"\n              ;;\n           solaris*)\n              # avoid interference from possible older versions in /usr/sfw.\n              LDFLAGS=\"-L$dir $LDFLAGS\"\n              ;;\n        esac\n    fi\n    ;;\n  ICC:6* )\n    # Seems to use libcxa.so.1 even without -i_dynamic...\n    LDFLAGS=\"$CONF_f_runpath$compiler_root/lib $LDFLAGS\"\n    ;;\n  ICC:7* )\n    # Favor the static version, as libcxa.so.3 isn't exactly common....\n    # (Undocumented, and unavailable at all in older versions. :-/)\n    LDFLAGS=\"-static-libcxa $LDFLAGS\"\n    ;;\n  ICC:8* )\n    # In principle, these settings should work, and avoid the need to\n    # depend on Intel's libraries at runtime.\n    #  APP_LDFLAGS=\"-static-libcxa $APP_LDFLAGS\"\n    #  DLL_LDFLAGS=\"-nodefaultlibs $DLL_LDFLAGS\"\n    # In practice, they can break applications that use plugins. :-/\n    LDFLAGS=\"$CONF_f_runpath$compiler_root/lib $LDFLAGS\"\n    ;;\n  ICC:9* )\n    # -i-static moved from common LDFLAGS to accommodate those few\n    # DLLs (plugins for external programs such as Python) that need to\n    # link ICC's libraries dynamically.\n    APP_LDFLAGS=\"-i-static $APP_LDFLAGS\"\n    DLL_LDFLAGS=\"-i-static -nodefaultlibs $DLL_LDFLAGS\"\n    # Running icpc on a bunch of object files doesn't always ensure that\n    # the C++ standard library is actually linked in, and we shouldn't\n    # rely on help from wrapper scripts.\n    LINK=\"$LINK -Kc++\"\n    ;;\n  ICC:1???:* )\n    # Suppress \"warning #10237: -lcilkrts linked in dynamically, static\n    # library not available\" which is not a problem in practice due to\n    # as-needed linkage.\n    APP_LDFLAGS=\"-static-intel -diag-disable 10237 $APP_LDFLAGS\"\n    DLL_LDFLAGS=\"-static-intel -diag-disable 10237 -nodefaultlibs $DLL_LDFLAGS\"\n    # Redundant for apps, but necessary for plugins to be adequately\n    # self-contained, at least on 32-bit Linux.\n    LIBS=\"$LIBS -lstdc++\"\n    LINK=\"$LINK -Kc++\"\n    # Defining _GCC_NEXT_LIMITS_H ensures that <limits.h> chaining doesn't\n    # stop short, as can otherwise happen. :-/\n    CPPFLAGS=\"$CPPFLAGS -D_GCC_NEXT_LIMITS_H\"\n    ;;\nesac\n\n# DLLs and profiling don't mix on all platforms\nif test \"$with_profiling\" = \"yes\" ; then\n   case \"$host_os\" in\n      linux*) # any others?\n         case \"$with_dll\" in\n            yes) AC_MSG_ERROR([This platform does not support DLL profiling.])\n                 ;;\n            no) ;;\n            *) with_dll=no ;;\n         esac\n      ;;\n   esac\nfi\n\n# Whether to build DLLs or static (and whether by default, or forcibly)\nLIB_OR_DLL=\"lib\"\nif test \"$with_dll\" = \"yes\" ; then\n   case \"$host_os:$compiler\" in\n    linux*:GCC | irix*:* | solaris*:WorkShop* | *:KCC | linux*:ICC \\\n    | solaris*:GCC | osf*:* | darwin*:GCC | freebsd*:GCC )\n      ;;\n    * )\n      echo\n      echo \"DLLs may not be buildable by $CXX $compiler_ver on $host!\"\n      NCBI_CAUTION([Do you still want to try build DLLs (at your own risk)?])\n      echo\n      ;;\n   esac\nfi\n\ncase \"$with_dll:$with_static\" in\n   yes:yes) LIB_OR_DLL=\"both\"; dll_sfx=\"DLL+static\" ;;\n   yes:*)   LIB_OR_DLL=\"dll\";  dll_sfx=\"DLL\" ;;\n   *:no)    AC_MSG_ERROR([--without-static requires --with-dll]) ;;\n   *)       LIB_OR_DLL=\"lib\";  dll_sfx=\"\"  ;;\nesac\n\nDLL=\nDLL_LIB_SETTING='$(DLL_DLIB)'\nIF_WITH_DLL=\nUNLESS_WITH_DLL='# '\nSTATIC=\"-static\"\nUSUAL_AND_DLL=both\nUSUAL_AND_LIB=both\n\ncase \"$LIB_OR_DLL\" in\n   dll)\n       STATIC=\n       USUAL_AND_DLL=dll\n       ;;\n   lib)\n       DLL=-dll\n       DLL_LIB_SETTING='$(DLL_LIB)'\n       IF_WITH_DLL='# '\n       UNLESS_WITH_DLL=\n       USUAL_AND_LIB=lib\n       ;;\nesac\n\nAC_SUBST(DLL)\nAC_SUBST(DLL_LIB_SETTING)\nAC_SUBST(IF_WITH_DLL)\nAC_SUBST(UNLESS_WITH_DLL)\nAC_SUBST(STATIC)\nAC_SUBST(USUAL_AND_DLL)\nAC_SUBST(USUAL_AND_LIB)\n\n\n#### GNU compiler::  common flags and definitions\nif test \"$compiler\" = \"GCC\" ; then\n   CFLAGS=\"-Wall -Wno-format-y2k $CFLAGS\"\n   CXXFLAGS=\"-Wall -Wno-format-y2k $CXXFLAGS\"\n   case \"$compiler_version\" in\n      2* ) CXXFLAGS=\"-ftemplate-depth-32 $CXXFLAGS\" ;;\n   esac\n   case \"$host_os\" in\n      solaris* )  CPPFLAGS=\"-D__EXTENSIONS__ $CPPFLAGS\" ;;\n      irix*    )  CXXFLAGS=\"$CXXFLAGS -D_LANGUAGE_C_PLUS_PLUS\" ;;\n   esac\n   # orig_CFLAGS=$CFLAGS\n   # orig_CXXFLAGS=$CXXFLAGS\n   # flag=-fno-merge-debug-strs\n   # CFLAGS=\"$flag $CFLAGS\"\n   # CXXFLAGS=\"$flag $CXXFLAGS\"\n   # AC_CACHE_CHECK([whether GCC supports $flag], ncbi_cv_prog_gcc_nomerge,\n   #    [AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[]], [[return 0;]])],\n   #                       ncbi_cv_prog_gcc_nomerge=yes,\n   #                       ncbi_cv_prog_gcc_nomerge=no)])\n   # if test \"$ncbi_cv_prog_gcc_nomerge\" = no; then\n   #    CFLAGS=$orig_CFLAGS\n   #    CXXFLAGS=$orig_CXXFLAGS\n   # fi\nfi\n\n\n#### KAI compiler::  common flags and definitions\nif test \"$compiler\" = \"KCC\" ; then\n   AR=${AR:=\"$CXX $MT_FLAG -o\"}\n   CFLAGS=\"--display_error_number --c $CFLAGS\"\n   CXXFLAGS=\"--display_error_number --one_instantiation_per_object $CXXFLAGS\"\n   case \"$host_os\" in\n      solaris* )  CPPFLAGS=\"-D__EXTENSIONS__ -D__STDC__=0 $CPPFLAGS\" ;;\n   esac\nfi\n\n\n#### Intel compiler::  common flags and definitions\nif test \"$compiler\" = \"ICC\" ; then\n   if test -n \"$icc_license\" ; then\n      icc_CC=\"$CC\"\n      icc_CXX=\"$CXX\"\n      CC=\"./compilers/unix/cxx_filter.ICC.sh $CC\"\n      CXX=\"./compilers/unix/cxx_filter.ICC.sh $CXX\"\n   fi\nfi\n\n\n#### How to ensure that the compiler will account for potential aliasing\ncase \"$compiler\" in\n   GCC ) NO_STRICT_ALIASING=-fno-strict-aliasing ;;\n   ICC ) NO_STRICT_ALIASING='-falias -ffnalias' ;;\n   WorkShop* ) NO_STRICT_ALIASING='-xalias_level=any' ;;\n   * ) NO_STRICT_ALIASING=\nesac\n\n\n#### Automatic generation of dependencies for/by the \"make\" utility\ncase \"$host_os\" in\n   solaris* )  KeepStateTarget=\".KEEP_STATE:\" ;;\nesac\n\nif test \"$with_autodep\" = \"yes\" ; then\n   Rules=\"rules_with_autodep\"\nelif test \"$with_autodep\" = \"no\" ; then\n   Rules=\"rules\"\nelif make --version 2>/dev/null | grep 'GNU Make' >/dev/null ; then\n   Rules=\"rules_with_autodep\"\nelse\n   Rules=\"rules\"\nfi\n\n\n### Support for precompiled headers\nGCCPCH=\"#\"\nif test \"$compiler\" = GCC -a \"$with_pch\" = \"yes\" \\\n     -a \"${with_universal-no}\" = \"no\"; then\n   AC_CACHE_CHECK([whether $CXX supports precompiled headers], ncbi_cv_cxx_pch,\n      [echo '#include <iostream>' > conftest.hpp\n       echo $CXX $CPPFLAGS $CXXFLAGS -xc++-header -c conftest.hpp >&AS_MESSAGE_LOG_FD\n       if $CXX $CPPFLAGS $CXXFLAGS -xc++-header -c conftest.hpp >&AS_MESSAGE_LOG_FD 2>&1 \\\n         &&  test -f conftest.hpp.gch; then\n          ncbi_cv_cxx_pch=yes\n       else\n          ncbi_cv_cxx_pch=no\n       fi])\n   if test \"$ncbi_cv_cxx_pch\" = \"yes\"; then\n      if test \"$Rules\" = \"rules\"; then\n         AC_MSG_WARN([Your version of make does not fully support PCH-related dependencies.])\n      fi\n      CXXFLAGS=\"-DNCBI_USE_PCH $CXXFLAGS\"\n      GCCPCH=\"\"\n   fi\nfi\n\n\n#### Tools\nAC_PROG_LN_S\ncase \"$LN_S\" in\n    /*) ;;\n    * ) LN_S=/bin/$LN_S ;;\nesac\n\nAC_PROG_RANLIB\nAC_CHECK_PROG(AR, ar, ar cr, ErrorCannotFind_AR)\nif test \"x$RANLIB\" != \"x:\"; then\n   AC_CACHE_CHECK([ranlib's effectiveness], ncbi_cv_prog_ranlib_effect,\n      [AC_LANG_CONFTEST([AC_LANG_SOURCE([[int libfunc(void) { return 0; }]])])\n       echo $CXX $CPPFLAGS $CXXFLAGS -c conftest.$ac_ext >&AS_MESSAGE_LOG_FD\n       $CXX $CPPFLAGS $CXXFLAGS -c conftest.$ac_ext >&AS_MESSAGE_LOG_FD 2>&1\n       echo $AR conftest.a conftest.o >&AS_MESSAGE_LOG_FD\n       $AR conftest.a conftest.o >&AS_MESSAGE_LOG_FD 2>&1\n       save_LIBS=$LIBS\n       LIBS=\"conftest.a $LIBS\"\n       AC_LINK_IFELSE([AC_LANG_PROGRAM([[extern int libfunc(void);]],\n                                       [[return libfunc();]])],\n                      [ok_without=true], [ok_without=false])\n       echo $RANLIB conftest.a >&AS_MESSAGE_LOG_FD\n       $RANLIB conftest.a >&AS_MESSAGE_LOG_FD\n       AC_LINK_IFELSE([AC_LANG_PROGRAM([[extern int libfunc(void);]],\n                                       [[return libfunc();]])],\n                      [ok_with=true], [ok_with=false])\n       LIBS=$save_LIBS\n       case $ok_with:$ok_without in\n          true:false)  ncbi_cv_prog_ranlib_effect=positive ;;\n          false:true)  ncbi_cv_prog_ranlib_effect=negative ;;\n          true:true)   ncbi_cv_prog_ranlib_effect=neutral  ;;\n          false:false) ncbi_cv_prog_ranlib_effect=unknown  ;;\n       esac\n      ])\n   case \"$ncbi_cv_prog_ranlib_effect\" in\n      negative) RANLIB=: ;;\n      unknown)\n        AC_MSG_WARN([Failed to make a working library with or without ranlib.])\n        ;;\n   esac\nfi\nif test \"$with_strip\" = yes; then\n   AC_CHECK_PROG(STRIP, strip, strip, @:)\n   AC_CACHE_CHECK([whether strip loses runtime type information],\n      ncbi_cv_strip_loses_rtti,\n      [if test \"$cross_compiling\" = yes; then\n          case \"$host_os\" in\n             darwin* ) ncbi_cv_strip_loses_rtti=yes ;;\n             # No problems observed elsewhere so far.\n             *       ) ncbi_cv_strip_loses_rtti=no  ;;\n          esac\n       else\n          AC_LANG_CONFTEST([AC_LANG_PROGRAM(\n                               [[#include <iostream>\n                                 #include <typeinfo>\n                                 struct SomeStruct { };]],\n                               [[std::cout << typeid(SomeStruct).name();]])])\n          echo $CXX $CPPFLAGS $CXXFLAGS $LDFLAGS -o conftest$ac_exeext \\\n             conftest.$ac_ext >&AS_MESSAGE_LOG_FD\n          $CXX $CPPFLAGS $CXXFLAGS $LDFLAGS -o conftest$ac_exeext \\\n             conftest.$ac_ext >&AS_MESSAGE_LOG_FD 2>&1\n          $STRIP conftest$ac_exeext\n          if (ulimit -c 0; ./conftest$ac_exeext) >/dev/null 2>&1; then\n             ncbi_cv_strip_loses_rtti=no\n          else\n             ncbi_cv_strip_loses_rtti=yes\n          fi\n          rm -rf conftest*\n       fi])\n   if test \"$ncbi_cv_strip_loses_rtti\" = \"yes\"; then\n      NCBI_CAUTION([Do you still want to proceed (at your own risk)?])\n   fi\nelse\n   STRIP=@:\nfi\n\n\n# When using ccache and distcc together, ccache needs to be primary,\n# so look for distcc(.sh) first.\n\nif test -x $orig_NCBI/bin/distcc.sh ; then\n   : ${DISTCC=$orig_NCBI/bin/distcc.sh}\n   : ${with_distcc=yes}\nfi\n\nif test \"$with_distcc\" = \"yes\" ; then\n   AC_PATH_PROG(DISTCC, distcc, distcc, [])\n   if test -n \"$DISTCC\" ; then\n      # Test distcc reasonably thoroughly to avoid possible gotchas.\n      cat > distcctest.c << EOF\n#include <stddef.h>\n#if !defined(__GNUC__)  &&  !defined(offsetof)\n#  define offsetof(T, F) ((size_t)((char*) &(((T*) 0)->F) - (char*) 0))\n#endif\nstruct S { int x; };\nint f() { return offsetof(struct S, x); }\nEOF\n      DISTCC_FALLBACK=0\n      export DISTCC_FALLBACK\n      AC_CACHE_CHECK([whether any distcc servers are available],\n         ncbi_cv_prog_distcc_servers,\n         [$DISTCC $CC -c distcctest.c 2>&AS_MESSAGE_LOG_FD\n          case $? in\n            # 102: bind failed\n            # 103: connect failed\n            # 106: bad hostspec\n            # 107: I/O error\n            # 109: protocol error\n            # 113: access denied\n            # 116: no hosts defined\n            102 | 103 | 106 | 107 | 109 | 113 | 116 )\n             ncbi_cv_prog_distcc_servers=no ;;\n            * )\n             ncbi_cv_prog_distcc_servers=yes ;;\n          esac])\n      if test \"$ncbi_cv_prog_distcc_servers\" = no; then\n         AS_UNSET(DISTCC)\n      fi\n      if test -n \"$DISTCC\" ; then\n         AC_CACHE_CHECK([whether $DISTCC is compatible with $CC],\n            ncbi_cv_prog_distcc_vs_cc,\n            [if $DISTCC $CC -c distcctest.c 2>&AS_MESSAGE_LOG_FD ; then\n                ncbi_cv_prog_distcc_vs_cc=yes\n             else\n                ncbi_cv_prog_distcc_vs_cc=no\n             fi])\n         if test \"$ncbi_cv_prog_distcc_vs_cc\" = yes; then\n            CC_WRAPPER=\"$DISTCC $CC_WRAPPER\"\n         else\n            AS_UNSET(DISTCC)\n         fi\n      fi\n      if test -n \"$DISTCC\" ; then\n         AC_CACHE_CHECK([whether $DISTCC is compatible with $CXX],\n            ncbi_cv_prog_distcc_vs_cxx,\n            [mv distcctest.c distcctest.cpp\n             if $DISTCC $CXX -c distcctest.cpp 2>&AS_MESSAGE_LOG_FD ; then\n                ncbi_cv_prog_distcc_vs_cxx=yes\n             else\n                ncbi_cv_prog_distcc_vs_cxx=no\n             fi])\n         if test \"$ncbi_cv_prog_distcc_vs_cxx\" = yes; then\n            CXX_WRAPPER=\"$DISTCC $CXX_WRAPPER\"\n         else\n            AS_UNSET(DISTCC)\n         fi\n      fi\n      rm -f distcctest.*\n   elif test \"$with_distcc\" = \"yes\" ; then\n      AC_MSG_WARN([distcc explicitly requested, but not found in PATH.])\n   fi\nfi\n\nif test -z \"$with_ccache\"  -a  -n \"$DISTCC\"  -a  -z \"$CCACHE_DIR\" ; then\n   # Using CCACHE together with DISTCC causes problems when the involved DISTCC\n   # servers share the same home dir, as in that case the caches from\n   # different servers can mix up rather badly, corrupting each other.\n   # On the other hand, most NCBI accounts have $CCACHE_DIR automatically set\n   # to a non-shared, per-machine location (such as \"/tmp/.ccache-username\").\n   with_ccache=\"no\"\nfi\n\nif test \"$with_ccache\" != \"no\"; then\n   AC_PATH_PROG(CCACHE, ccache)\n   if test -n \"$CCACHE\" ; then\n      if test -n \"$CC_WRAPPER\"; then\n         CC_WRAPPER=\"CCACHE_PREFIX=$CC_WRAPPER $CCACHE\"\n      else\n         CC_WRAPPER=$CCACHE\n      fi\n      if test -n \"$CXX_WRAPPER\"; then\n         CXX_WRAPPER=\"CCACHE_PREFIX=$CXX_WRAPPER $CCACHE\"\n      else\n         CXX_WRAPPER=$CCACHE\n      fi\n   elif test \"$with_ccache\" = \"yes\"; then\n      AC_MSG_WARN([ccache explicitly requested, but not found in PATH.])\n   fi\nfi\n\n# Note the path, since syntax is version-specific....\nAC_PATH_PROG(TAIL, tail)\nAC_MSG_CHECKING([whether $TAIL accepts modern syntax (-n N)])\nif $TAIL -n 1 config.log >/dev/null 2>&1; then\n   TAIL_N=\"$TAIL -n \"\n   AC_MSG_RESULT(yes)\nelse\n   TAIL_N=\"$TAIL -\"\n   AC_MSG_RESULT(no)\nfi\n\nAC_PATH_PROG(SED, sed)\nAC_PATH_PROG(TOUCH, touch, [], /bin:/usr/bin:$PATH)\ndnl AC_PATH_PROG(GREP, grep)\nAC_PROG_EGREP\nAC_MSG_CHECKING([how to run $EGREP quietly])\nif test -z \"`echo foo | $EGREP -q fo+ 2>>config.log || echo $?`\"; then\n   EGREP_Q=\"$EGREP -q\"\nelif test -z \"`echo foo | $EGREP -s fo+ 2>>config.log || echo $?`\"; then\n   EGREP_Q=\"$EGREP -s\"\nelse\n   EGREP_Q=\">/dev/null $EGREP\"\nfi\nAC_MSG_RESULT($EGREP_Q)\n\nAC_CHECK_PROG(VALGRIND_PATH, valgrind, valgrind)\n\nAC_PATH_PROG(LDD, ldd, [], /bin:/usr/bin:$PATH)\nif test -n \"$LDD\"; then\n   AC_MSG_CHECKING([whether $LDD accepts -r])\n   if $LDD -r /bin/ls >/dev/null 2>&1; then\n      AC_MSG_RESULT(yes)\n      LDD_R=\"$LDD -r\"\n   else\n      AC_MSG_RESULT(no)\n   fi\nfi\n\n#### Check if \"${build_root}\" is defined;  provide a default one\nif test -n \"${with_build_root}\" ; then\n   build_root=${with_build_root}\nfi\n\nsignature_compiler=$compiler\nsignature_compiler_version=$compiler_version\nif test \"$compiler\" = \"GCC\"; then\n   llvm_version=`$CXX -v 2>&1 | $EGREP 'clang|LLVM'`\n   case \"$llvm_version\" in\n      *clang* )\n         # Take the LLVM version from both \"clang version X.Y (...) ...\" and\n         # \"$Vendor (LLVM|clang) version ... (...) (based on LLVM X.Y)\"\n         sed='s/.*[[Mn]] \\([[1-9]][[0-9.]]*\\).*/\\1/; s/\\.//; s/^..$/&0/'\n         signature_compiler=Clang\n         signature_compiler_version=`echo $llvm_version | sed -e \"$sed\"`\n         ;;\n      *LLVM* )\n         signature_compiler=LLVMGCC\n         ;;\n   esac\nfi\n\n### Possibly add the version to the build directory name, but preseve\n### the original default when reconfiguring.\nif test -z \"${with_version}\" -a -n \"${ac_cv_header_stdc}\"; then\n   with_version=${ncbi_cv_with_version:-no}\nfi\nif test -z \"${build_root}\" ; then\n   build_root=\"${srcdir}/${signature_compiler}\"\n   case \"$signature_compiler:$with_version\" in\n      *[[0-9]]:* | *:no) ;;\n      *) build_root=${build_root}${signature_compiler_version} ;;\n   esac\n   ncbi_cv_with_version=${with_version:-yes}\nelse\n   : ${with_suffix:=\"no\"}\nfi\n\n\n#### Release/Debug\ncase \"${with_debug}:${with_optimization}\" in\n   no:*)\n      release_debug=Release\n      DEBUG_SFX=Release\n      D_SFX=\n      ;;\n   yes:yes | :yes)\n      release_debug=DebugOpt\n      DEBUG_SFX=Debug\n      D_SFX=d\n      ;;\n   *)\n      release_debug=Debug\n      DEBUG_SFX=Debug\n      D_SFX=d\n      ;;\nesac\n\n\n#### Profiling; try to turn on both function weight and basic-block counting\nif test \"$with_profiling\" = \"yes\" ; then\n   prof_sfx=\"Prof\"\n   case \"$compiler\" in\n      Compaq)    PFFLAGS=\"-pg\" ;;\n      GCC)       PFFLAGS=\"-pg\" ;;\n      ICC)       PFFLAGS=\"-p\" ;;\n      KCC)       PFFLAGS=\"-pg\" ;;\n      MIPSpro73) PFFLAGS=\"\" ;; # pixie(1) adds info at runtime\n      MSVC)      PFFLAGS=\"/PROFILE\" ;;\n      VisualAge) PFFLAGS=\"-pg\" ;;\n      WorkShop*) PFFLAGS=\"-pg -xprofile=tcov\" ;;\n      *)         PFFLAGS=\"-p\" ;; # Fairly standard; shouldn't rely on -pg\n   esac\n   CFLAGS=\"$CFLAGS $PFFLAGS\"\n   CXXFLAGS=\"$CXXFLAGS $PFFLAGS\"\n   LDFLAGS=\"$LDFLAGS $PFFLAGS\"\n   STRIP=\"@:\" # Stripping may lose profiling info\nelse\n   prof_sfx=\nfi\n\n\n#### Determine whether this is implicitly a 64-bit platform\nAC_TYPE_SIZE_T\nif test \"${with_universal-no}\" = \"no\"; then\n   AC_CHECK_SIZEOF(size_t)\n   ac_cv_sizeof_size_t=`echo \"$ac_cv_sizeof_size_t\" | tr -d '\\r'`\n   NCBI_PLATFORM_BITS=`expr 8 \\* $ac_cv_sizeof_size_t`\n   AC_DEFINE_UNQUOTED(NCBI_PLATFORM_BITS, $NCBI_PLATFORM_BITS,\n                      [Define to the architecture size.])\n   if test $NCBI_PLATFORM_BITS -eq 64; then\n      bit64_sfx=64\n   fi\nfi\n\nif test \"$bit64_sfx\" = 64 -o \"$with_lfs\" = \"yes\"; then\n   NCBI_FEATURE(LFS)\nfi\n\n\n### Intel Thread Checker\nif test \"${with_tcheck=no}\" != \"no\" ; then\n   if test \"${release_debug}${mt_sfx}\" != \"DebugMT\" ; then\n      AC_MSG_WARN([--with-tcheck is most likely to be effective in DebugMT builds.])\n   fi\n   if test \"$compiler\" = \"ICC\"; then\n      case \"$bit64_sfx\" in\n        64) tcbin=bin/32e ;;\n        * ) tcbin=bin/32  ;;\n      esac\n      if test \"$with_tcheck\" != yes; then\n         TCHECK_BIN=$with_tcheck/$tcbin\n      fi\n      AC_PATH_PROG(TCHECK_CL, tcheck_cl, [], $TCHECK_BIN:$PATH:$TCHECK_FALLBACK)\n      if test -n \"$TCHECK_CL\"; then\n         CFLAGS=\"$CFLAGS -tcheck -O0\"\n         CXXFLAGS=\"$CXXFLAGS -tcheck -O0\"\n         LDFLAGS=\"$LDFLAGS -tcheck -O0 -L`dirname $TCHECK_CL`\"\n      fi\n   fi\n   CPPFLAGS=\"$CPPFLAGS -DNCBI_TCHECK\"\nfi\n\n\n#### Add \"Release\"/\"Debug\", \"MT\", \"DLL\", \"64\", \"_p\" suffixes to \"${build_root}\"\nif test \"$with_suffix\" != \"no\" ; then\n   build_root=\"${build_root}-${release_debug}${mt_sfx}${dll_sfx}${bit64_sfx}${prof_sfx}\"\nfi\n\n\n#### Add full host specs to \"${build_root}\"\nif test \"$with_hostspec\" = \"yes\" ; then\n   build_root=\"${build_root}--${host}\"\nfi\n\nif test -n \"$with_build_root_sfx\" ; then\n   build_root=$build_root$with_build_root_sfx\nfi\n\ncase \"$host_os\" in\n   linux*)\n      kver=`uname -r | sed -e 's/-.*//'`\n      libcver=`ldd --version | awk 'NR == 1 { print $NF }'`\n      verbose_host=$host_cpu-$host_vendor-linux$kver-gnu$libcver\n      ;;\n   *) verbose_host=$host ;;\nesac\n\n#### Overall configuration mode summary\nsignature_hostname=`(hostname || uname -n) 2>/dev/null \\\n    | sed 's/\\..*//; s/-/_/g; 1q'`\nsignature=\"${signature_compiler}_${signature_compiler_version}-${release_debug}${mt_sfx}${dll_sfx}${bit64_sfx}${prof_sfx}--${verbose_host}-${signature_hostname}\"\nAC_DEFINE_UNQUOTED(NCBI_SIGNATURE, \"$signature\",\n   [Build signature: compiler-name '_' compiler-version '-' configuration\n   '--' platform-name '-' hostname])\n\n\n#### Check if there is \"${build_root}\" dir\ntest -d \"${build_root}\"  ||  mkdir -p \"${build_root}\"\ntest -d \"${build_root}\"  ||  AC_MSG_ERROR([Couldn't create ${build_root}])\n\n#### Try to find a version of pwd that yields /net paths.\nAC_PATH_PROG(AMQ, amq, [], $PATH:/usr/sbin:/sbin)\ncase \"$AMQ\" in\n   */amq)\n      AC_CACHE_CHECK([whether $AMQ -w works], ncbi_cv_prog_amq_w,\n      [if $AMQ -w >/dev/null 2>&1; then\n          ncbi_cv_prog_amq_w=yes\n       else\n          ncbi_cv_prog_amq_w=no\n       fi])\n      if test \"$ncbi_cv_prog_amq_w\" = yes; then\n         smart_pwd=\"$AMQ -w\"\n      else\n         smart_pwd=pwd\n      fi\n      ;;\n   *)\n      smart_pwd=pwd\n      ;;\nesac\n\n#### Make \"build_root\" absolute\ncase \"${build_root}\" in\n   /* ) ;;\n   . )\n      CDPATH=\n      if test \"${PWD}\" != \"\" && test \"`(cd ${PWD} ; sh -c pwd)`\" = \"`pwd`\"  ;\n      then\n         build_root=\"$PWD\"\n      else\n         NCBI_FIX_DIR(build_root)\n      fi\n   ;;\n   *  ) NCBI_FIX_DIR(build_root) ;;\nesac\nif test -n \"$with_fake_root\"; then\n   build_root=$with_fake_root/`basename $build_root`\nfi\n\n\n#### Set runpath (may depend on build root)\nif test -n \"$with_relative_runpath\"; then\n   if test \"$with_runpath\" = \"no\"; then\n      AC_MSG_ERROR([incompatible options: --without-runpath and --with-relative-runpath=$with_relative_runpath])\n   elif test -z \"$origin\"; then\n      AC_MSG_ERROR([Do not know how to specify relative runpaths on $host])\n   else\n      rp=`echo \"$origin/$with_relative_runpath\" | \\\n          sed \"s,:,:$origin/,g; s,/.:,:,g; s,/.\\$,,\"`\n      with_runpath=\"$rp${with_runpath+:$with_runpath}\"\n   fi\nfi\n\nif test -z \"$with_runpath\"; then\n   # Don't allow libdir values containing variable expansions,\n   # including in particular the default \"${exec_prefix}/lib\"\n   if test -n \"$libdir\"  &&  expr \"$libdir\" : '[[^$]]*$' >/dev/null; then\n      with_runpath=$libdir\n   elif test -n \"$exec_prefix\"  -a  \"$exec_prefix\" != \"NONE\" ; then\n      with_runpath=$exec_prefix/lib\n   elif test -n \"$prefix\"  -a  \"$prefix\" != \"NONE\" ; then\n      with_runpath=$prefix/lib\n   fi\nfi\n\nif   test \"$with_runpath\" = \"no\" ; then\n   runpath=\n   pure_runpath=\nelif test -n \"$with_runpath\"  -a  \"$with_runpath\" != \"yes\" ; then\n   root_base=`basename $build_root`\n   pure_runpath=`echo \"${with_runpath}\" | sed -e \"s/{}/$root_base/g\"`\n   runpath=\"${CONF_f_runpath}${pure_runpath}\"\n   case \"$host_os:$compiler\" in\n    darwin* )\n      # Needed for a few gui projects, including gbench_plugin_scan;\n      # harmless elsewhere, since it only affects projects that indirectly\n      # need one of these libraries.  (There seems to be no general\n      # equivalent of -rpath-link.)\n      for l in dbapi_driver gui_utils ncbi_xloader_genbank ncbi_xreader \\\n               ncbi_xreader_id1 ncbi_xreader_pubseqos; do\n         ll=lib$l.dylib\n         LDFLAGS=\"$LDFLAGS -dylib_file ${pure_runpath}/$ll:\\$(libdir)/$ll\"\n      done\n      ;;\n    *:GCC )\n      if `$CXX -print-prog-name=ld` --version 2>&1 | grep GNU >/dev/null; then\n         runpath=\"$runpath -Wl,-rpath-link,\\$(libdir)\"\n      fi\n      ;;\n    *:ICC )\n      runpath=\"$runpath -Wl,-rpath-link,\\$(libdir)\"\n      ;;\n   esac\nelif test \"$with_runpath\" = \"yes\"  -o  \"$with_dll\" != \"no\" ; then\n   runpath=\"${CONF_f_runpath}\\$(libdir)\"\n   pure_runpath='${build_root}/lib'\nelse\n   runpath=\n   pure_runpath=\nfi\nif test -z \"$CONF_f_runpath\" ; then\n   # Drop the linker flag (since passing directory names doesn't work\n   # so well), but keep pure_runpath for other uses.\n   runpath=\nfi\n\n\n#### Linker command-line to build DLL (may depend on runpath)\nhas_dll_loadable=\"@# \"\nALLOW_UNDEF=\nFORBID_UNDEF=\ncase \"$compiler\" in\n GCC | ICC )\n   LINK_DLL=\"$LINK $ARCH_CFLAGS -shared -o\" # possibly overridden below\n   case \"$host_os\" in\n      solaris* )\n        # See http://realm.progsoc.uts.edu.au/~subtle/solaris28_link.html\n        LINK_DLL=\"$LINK $ARCH_CFLAGS -shared -mimpure-text -o\"\n        FORBID_UNDEF=\"-Wl,-z,defs\"\n        ;;\n      darwin* )\n        # Per <http://fink.sourceforge.net/doc/porting/shared.php>, it was\n        # historically necessary to build plugins as Mach-O bundles rather than\n        # dynamic libraries.  That's not such a big deal on modern Mac OS X\n        # versions, so the Toolkit now defaults to building only the latter.\n        if test \"$with_bundles\" = yes; then\n           has_dll_loadable=\"\"\n           AC_DEFINE(NCBI_USE_BUNDLES, 1,\n              [Define to 1 if building plugins as bundles, as Mac OS X\n               traditionally required.])\n        fi\n        if $CXX -v 2>&1 | egrep -q 'Apple|clang'; then\n           LINK_DLL=\"$LINK $ARCH_CFLAGS -dynamiclib -install_name ${pure_runpath%%:*}/\\$(XDLL) -o\"\n           LINK_LOADABLE=\"$LINK $ARCH_CFLAGS -bundle -o\"\n           ALLOW_UNDEF='-undefined suppress'\n           FORBID_UNDEF='-undefined error'\n        else\n           LINK_DLL=\"$LINK $ARCH_CFLAGS -nostartfiles -Wl,-dynamic -Wl,-dylib -Wl,-install_name,${pure_runpath%%:*}/\\$(XDLL) -o\"\n           LINK_LOADABLE=\"$LINK $ARCH_CFLAGS -nostartfiles -Wl,-dynamic -Wl,-bundle -Wl,-read_only_relocs,warning -lbundle1.o -o\"\n           ALLOW_UNDEF='-Wl,-undefined,suppress'\n           FORBID_UNDEF='-Wl,-undefined,error'\n        fi\n        ;;\n      linux* | *gnu* ) # | *bsd*\n        case \"$compiler:$compiler_version\" in\n           ICC:9* | ICC:1??? )\n             ncbi_cv_prog_cc_wl_no_asu=no\n             LIBS=\"$LIBS -lc\"\n             C_LIBS=\"$C_LIBS -lc\"\n             ;;\n           ICC:* )\n             ;;\n           * )\n             FORBID_UNDEF='-Wl,--no-undefined'\n             ;;\n        esac\n        ;;\n      irix* )\n        FORBID_UNDEF='-Wl,-no_unresolved'\n        ;;\n      osf* )\n        ALLOW_UNDEF='-Wl,-expect_unresolved,\\*'\n        FORBID_UNDEF='-Wl,-error_unresolved'\n        ;;\n   esac\n   AC_CACHE_CHECK([whether $CC supports -Wl,--no-allow-shlib-undefined],\n      ncbi_cv_prog_cc_wl_no_asu,\n      [orig_LDFLAGS=$LDFLAGS\n       LDFLAGS=\"$CXXFLAGS_DLL -shared -Wl,--no-allow-shlib-undefined $LDFLAGS\"\n       AC_LINK_IFELSE([AC_LANG_PROGRAM([],[])],\n          [ncbi_cv_prog_cc_wl_no_asu=yes], [ncbi_cv_prog_cc_wl_no_asu=no])\n       LDFLAGS=$orig_LDFLAGS])\n   if test \"$ncbi_cv_prog_cc_wl_no_asu\" = yes; then\n      FORBID_UNDEF=\"$FORBID_UNDEF -Wl,--no-allow-shlib-undefined\"\n   fi\n  ;;\n MIPSpro73 )\n   LINK_DLL=\"$LINK $ARCH_CFLAGS -shared -o\"\n   FORBID_UNDEF=\"-no_unresolved\"\n   ;;\n Compaq )\n   LINK_DLL=\"$LINK $ARCH_CFLAGS -shared -o\"\n   ALLOW_UNDEF='-expect_unresolved \\*'\n   FORBID_UNDEF='-error_unresolved'\n   ;;\n WorkShop* )\n   LINK_DLL=\"$LINK $ARCH_CFLAGS $MT_FLAG -G -h \\$(XDLL) -o\"\n   FORBID_UNDEF=\"-z defs\"\n   ;;\n KCC )\n   LINK_DLL=\"$LINK $ARCH_CFLAGS $MT_FLAG --soname \\$(XDLL) -o\"\n   FORBID_UNDEF=\"-z defs\"\n   ;;\n VisualAge )\n   # NOTE: --without-dll still recommended, as the linker doesn't seem\n   # to support building shared libraries with undefined symbols.\n   LINK_DLL=\"$LINK $ARCH_CFLAGS $MT_FLAG -qmkshrobj -o\"\n   # ALLOW_UNDEF=\"???\"\n   ;;\n * )\n   if test \"$with_dll\" = \"yes\"  &&  test -z \"$LINK_DLL\" ; then\n      AC_MSG_ERROR([Do not know how to build DLLs with compiler $CXX $compiler_ver])\n   elif test -z \"$LINK_DLL\"; then\n      with_dll=no\n   fi\n   ;;\nesac\n\nif test \"$with_dll\" = \"no\"; then # no DLLs whatsoever!\n   DLL=\n   FORCE_STATIC_LIB=\"LIB_OR_DLL = lib\"\n   APP_LIB_SETTING='$(STATIC_LIB)'\n   APP_LIBS_SETTING='$(STATIC_LIBS)'\nelse\n   FORCE_STATIC_LIB=\n   APP_LIB_SETTING='$(LIB)'\n   APP_LIBS_SETTING='$(LIBS)'\n   NCBI_FEATURE(DLL)\n   # Some shared libraries end up containing static libraries, so make\n   # sure to use DLL flags for both, as such inclusion can otherwise\n   # result in linker errors.\n   DLL_LDFLAGS=\"$DLL_LDFLAGS $CXXFLAGS_DLL\"\n   CFLAGS=\"$CFLAGS $CFLAGS_DLL\"\n   CFLAGS_DLL=\n   CXXFLAGS=\"$CXXFLAGS $CXXFLAGS_DLL\"\n   CXXFLAGS_DLL=\n   AC_DEFINE(NCBI_DLL_SUPPORT, 1,\n     [Define to 1 if building dynamic libraries at all\n      (albeit not necessarily by default).])\n   if test \"$with_dll\" = \"yes\"; then\n      NCBI_FEATURE(DLL_BUILD)\n      AC_DEFINE(NCBI_DLL_BUILD, 1,\n                [Define to 1 if building dynamic libraries by default.])\n      : ${with_plugin_auto_load=yes}\n   fi\nfi\n\nif test \"$with_plugin_auto_load\" = yes; then\n   AC_DEFINE(NCBI_PLUGIN_AUTO_LOAD, 1,\n             [Define to 1 if the plugin manager should load DLLs by default.])\nfi\n\n# Make sure we have commands for both C and C++ preprocessors\nAC_PROG_CPP\ndnl AC_PROG_CXXCPP\n\n\n#### Make \"srcdir\" absolute\ncase \"${srcdir}\" in\n   /* ) ;;\n   . )\n      CDPATH=\n      if test \"${PWD}\" != \"\" && test \"`(cd ${PWD} ; sh -c pwd)`\" = \"`pwd`\"  ;\n      then\n        srcdir=\"$PWD\"\n      else\n        NCBI_FIX_DIR(srcdir)\n      fi\n   ;;\n   * ) NCBI_FIX_DIR(srcdir) ;;\nesac\nreal_srcdir=$srcdir\nif test -n \"$with_fake_root\"; then\n   srcdir=$build_root/..\nfi\n\n\n#### Ensure that all explicitly requested subtrees actually exist\nNCBI_CHECK_SUBTREE(algo)\ndnl NCBI_CHECK_SUBTREE(app)\nif test \"$with_app\" = \"no\" ; then\n   NoConfProjects=\"$NoConfProjects app\"\nfi\n\nif test ! -f ${real_srcdir}/src/app/Makefile.in ; then\n   if test \"${with_app-no}\" != \"no\" ; then\n      AC_MSG_ERROR([--with-app:  APP sources are missing])\n   fi\n   with_app=\"no\"\nfi\n\ndnl NCBI_CHECK_SUBTREE(bdb) # deferred until end, as --with-bdb does double duty\ndnl NCBI_CHECK_SUBTREE(cgi) # --without-cgi deliberately unavailable for now\nif test -f ${real_srcdir}/src/cgi/Makefile.in  -a \\\n        -d ${real_srcdir}/include/cgi; then\n   NCBI_PROJECT(cgi)\nelse\n   AC_MSG_WARN([CGI tree missing; some projects may fail to build.])\nfi\n\nNCBI_CHECK_SUBTREE(ctools)\nNCBI_CHECK_SUBTREE(dbapi)\nNCBI_CHECK_SUBTREE(gui)\nNCBI_CHECK_SUBTREE(objects)\nNCBI_CHECK_SUBTREE(serial)\n\n\n#### Source, include, and build directories\nncbiconf=\"$build_root/inc/ncbiconf_unix.h\"\nncbiconf_old=\"$build_root/inc/ncbiconf.h\"\nif test -f \"$ncbiconf_old\" -a ! -f \"$ncbiconf\"; then\n   mv \"$ncbiconf_old\" \"$ncbiconf\"\nfi\nif test \"$build_root\" = \"$srcdir\" ; then\n   builddir=\"$srcdir/src\"\nelse\n   builddir=\"$build_root/build\"\nfi\nstatus_dir=\"$build_root/status\"\n\n\n#### Create build directories\nmkdir -p \"$builddir\" \"$build_root/lib\" \"$build_root/bin\"\n\n\n#### Check if the target directory already has a configured system in it\nif test \"$no_create\" != \"yes\"  -a  -f \"${ncbiconf}\" ; then\n   echo\n   echo \"There is already a built \\\"${ncbiconf}\\\"!\"\n   NCBI_CAUTION([Do you want to re-configure in \\\"${builddir}\\\"?])\n   echo\nfi\n\n\n#### Use right command shell in scripts and makefiles\nscript_shell=\"#! ${CONFIG_SHELL:=/bin/sh}\"\nmake_shell=\"SHELL=${CONFIG_SHELL:=/bin/sh}\"\n\n\n#### Turn on compilation warnings and adjust\n#### some compiler-specific flags and features\n\nif test \"$CONF_obj_ext\"   = \" \" ;  then obj_ext=\"\" ; else obj_ext=\"${CONF_obj_ext:=.o}\" ; fi\nif test \"$CONF_lib_pre\"   = \" \" ;  then lib_pre=\"\" ; else lib_pre=\"${CONF_lib_pre:=lib}\" ; fi\nif test \"$CONF_lib_l_pre\" = \" \" ;  then lib_l_pre=\"\" ; else lib_l_pre=\"${CONF_lib_l_pre:=-l}\" ; fi\nif test \"$CONF_lib_ext\"   = \" \" ;  then lib_ext=\"\" ; else lib_ext=\"${CONF_lib_ext:=.a}\" ; fi\nif test \"$CONF_dll_ext\"   = \" \" ;  then dll_ext=\"\" ; else dll_ext=\"${CONF_dll_ext:=.so}\" ; fi\nif test \"$CONF_loadable_ext\"  = \" \" ;  then loadable_ext=\"\" ; else loadable_ext=\"${CONF_loadable_ext:=.so}\" ; fi\nif test \"$CONF_lib_l_ext\" = \" \" ;  then lib_l_ext=\"\" ; else lib_l_ext=\"${CONF_lib_l_ext}\" ; fi\nif test \"$CONF_exe_ext\"   = \" \" ;  then exe_ext=\"\" ; else exe_ext=\"${CONF_exe_ext}\" ; fi\nif test \"$CONF_f_compile\" = \" \" ;  then f_compile=\"\" ; else f_compile=\"${CONF_f_compile:=-c }\" ; fi\nif test \"$CONF_f_outobj\"  = \" \" ;  then f_outobj=\"\" ; else f_outobj=\"${CONF_f_outobj:=-o }\" ; fi\nif test \"$CONF_f_outlib\"  = \" \" ;  then f_outlib=\"\" ; else f_outlib=\"${CONF_f_outlib}\" ; fi\nif test \"$CONF_f_libpath\" = \" \" ;  then f_libpath=\"\" ; else f_libpath=\"${CONF_f_libpath:=-L}\" ; fi\nif test \"$CONF_f_runpath\" = \" \" ;  then f_runpath=\"\" ; else f_runpath=\"${CONF_f_runpath:=$CONF_f_libpath}\" ; fi\nif test \"$CONF_f_outexe\"  = \" \" ;  then f_outexe=\"\" ; else f_outexe=\"${CONF_f_outexe:=-o }\" ; fi\n\n\nBINCOPY=\"/bin/cp -p\"\nMAC_BINCOPY=\"/Developer/Tools/CpMac -p\"\nif test \"$with_bincopy\" != \"yes\"; then\n   AC_CACHE_CHECK([whether cross-directory hard links work],\n      ncbi_cv_sys_xdir_ln,\n      [mkdir conftestdir\n       touch conftestdir/conftestfile\n       if ln -f conftestdir/conftestfile .; then\n          ncbi_cv_sys_xdir_ln=yes\n       else\n          ncbi_cv_sys_xdir_ln=no\n       fi\n       rm -rf conftestdir conftestfile])\n   if test \"$ncbi_cv_sys_xdir_ln\" = \"yes\"; then\n      BINCOPY=\"/bin/ln -f\"\n      MAC_BINCOPY=\"\\$(top_srcdir)/scripts/common/impl/ln_mac.sh\"\n   fi\nfi\nifdiff=\"${CONFIG_SHELL} \\$(top_srcdir)/scripts/common/impl/if_diff.sh\"\nif test \"$OSTYPE\" = \"darwin\" -a -x /Developer/Tools/CpMac; then\n   BINCOPY=\"$ifdiff \\\"$MAC_BINCOPY\\\"\"\nelse\n   BINCOPY=\"$ifdiff \\\"$BINCOPY\\\"\"\nfi\n\n\n#### Manage the debug-vs.-optimization flags (\"--with(out)-(max-)debug\",\n#### \"--with(out)-symbols\", \"--with(out)-optimization\")\nif test \"$compiler\" != \"MSVC\" ; then\n   if test \"$with_debug\" = \"no\" -o \"$with_tcheck\" != \"no\"; then\n      CPPFLAGS=\"-DNDEBUG $CPPFLAGS\"\n   else\n      CPPFLAGS=\"-D_DEBUG $CPPFLAGS\"\n   fi\n\n   if test \"$with_max_debug\" = \"yes\"; then\n      case \"$compiler\" in\n         GCC )\n            CPPFLAGS=\"-D_GLIBCXX_DEBUG $CPPFLAGS\"\n            CFLAGS=\"-fstack-check $CFLAGS\"\n            CXXFLAGS=\"-fstack-check $CXXFLAGS\"\n            ;;\n         ICC ) \n            CPPFLAGS=\"-D_GLIBCXX_DEBUG $CPPFLAGS\"\n            CFLAGS=\"-debug all -fstack-security-check -ftrapuv $CFLAGS\"\n            CXXFLAGS=\"-debug all -fstack-security-check -ftrapuv $CXXFLAGS\"\n            ;;\n         WorkShop* )\n            CFLAGS=\"-xcheck=%all $CFLAGS\"\n            CXXFLAGS=\"-xcheck=%all $CXXFLAGS\"\n            ;;\n      esac\n      NCBI_FEATURE(MaxDebug)\n   fi\nchangequote(, )dnl\n   dbgrx1=\"$wsrx-g[^cx$wschars]*$wsrx\"\n   dbgrx2=\"$wsrx-gx*coff[0-9+]*$wsrx\"\n   optrx=\"$wsrx-x*O[0-9s]*$wsrx\"\n   NDEB_CFLAGS=`  echo \" $CFLAGS \"   | sed \"s/$dbgrx1/ /g; s/$dbgrx2/ /g\"`\n   NDEB_CXXFLAGS=`echo \" $CXXFLAGS \" | sed \"s/$dbgrx1/ /g; s/$dbgrx2/ /g\"`\n   NDEB_LDFLAGS=` echo \" $LDFLAGS \"  | sed \"s/$dbgrx1/ /g; s/$dbgrx2/ /g\"`\n   if test \"$with_symbols\" = \"no\" ; then\n      CFLAGS=$NDEB_CFLAGS\n      CXXFLAGS=$NDEB_CXXFLAGS\n      LDFLAGS=$NDEB_LDFLAGS\n   else\n      echo \" $CFLAGS \"  | $EGREP_Q \"$dbgrx1|$dbgrx2\" || CFLAGS=\"$CFLAGS -g\"\n      echo \" $CXXFLAGS \"| $EGREP_Q \"$dbgrx1|$dbgrx2\" || CXXFLAGS=\"$CXXFLAGS -g\" \n      echo \" $LDFLAGS \" | $EGREP_Q \"$dbgrx1|$dbgrx2\" || LDFLAGS=\"$LDFLAGS -g\"\n      STRIP=\"@:\"\n      case \"$compiler:$compiler_version\" in\n         GCC:4[89]? | GCC:[5-9]? | GCC:???? )\n            # GCC 4.8 defaults to DWARF 4, which Totalview for one\n            # can't handle; roll back to version 3 by default.\n            echo \" $USER_CFLAGS \" | $EGREP_Q \"$dbgrx1|$dbgrx2\" || \\\n               CFLAGS=\"$NDEB_CFLAGS -gdwarf-3\"\n            echo \" $USER_CXXFLAGS \" | $EGREP_Q \"$dbgrx1|$dbgrx2\" || \\\n               CXXFLAGS=\"$NDEB_CXXFLAGS -gdwarf-3\"\n            echo \" $USER_LDFLAGS \" | $EGREP_Q \"$dbgrx1|$dbgrx2\" || \\\n               LDFLAGS=\"$NDEB_LDFLAGS -gdwarf-3\"\n            ;;\n      esac\n   fi\n\n   NOPT_CFLAGS=`  echo \" $CFLAGS \"    | sed \"s/$optrx/ /g\"`\n   NOPT_CXXFLAGS=`echo \" $CXXFLAGS \"  | sed \"s/$optrx/ /g\"`\n   NOPT_LDFLAGS=` echo \" $LDFLAGS \"   | sed \"s/$optrx/ /g\"`\n   if test \"${with_tcheck-no}\" != \"no\"; then\n      # Suppress warnings when building with ICC.\n      NOPT_CFLAGS=\"$NOPT_CFLAGS -O0\"\n      NOPT_CXXFLAGS=\"$NOPT_CXXFLAGS -O0\"\n      NOPT_LDFLAGS=\"$NOPT_LDFLAGS -O0\"\n   fi\n   if test \"$with_optimization\" = \"no\" ; then\n      CFLAGS=\"$NOPT_CFLAGS\"\n      CXXFLAGS=\"$NOPT_CXXFLAGS\"\n      LDFLAGS=\"$NOPT_LDFLAGS\"\n      FAST_CFLAGS=\"$CFLAGS\"\n      FAST_CXXFLAGS=\"$CXXFLAGS\"\n      FAST_LDFLAGS=\"$LDFLAGS\"\n   else\n      if echo \" $CFLAGS \"   | grep -v \"$optrx\" >/dev/null ; then\n         CFLAGS=\"$CFLAGS -O\" ; fi\n      if echo \" $CXXFLAGS \" | grep -v \"$optrx\" >/dev/null ; then\n         CXXFLAGS=\"$CXXFLAGS -O\" ; fi\n      if echo \" $LDFLAGS \"  | grep -v \"$optrx\" >/dev/null ; then\n         LDFLAGS=\"$LDFLAGS -O\" ; fi\n      if test \"$skip_fast_flags\" = yes ; then\n         FAST_CFLAGS=\"$CFLAGS\"\n         FAST_CXXFLAGS=\"$CXXFLAGS\"\n         FAST_LDFLAGS=\"$LDFLAGS\"\n      else\n         FAST_CFLAGS=\"$NOPT_CFLAGS $FAST_CFLAGS\"\n         FAST_CXXFLAGS=\"$NOPT_CXXFLAGS $FAST_CXXFLAGS\"\n         FAST_LDFLAGS=\"$NOPT_LDFLAGS $FAST_LDFLAGS\"\n      fi\n   fi\nchangequote([, ])dnl\nfi\n\n\n\n### ------------------------------------------------------------------\n### ------------------------------------------------------------------\n\n### Check for header files.\nAC_CHECK_HEADERS(iostream  iostream.h)\nAC_CHECK_HEADERS(fstream   fstream.h)\nAC_CHECK_HEADERS(strstream strstream.h strstrea.h)\n\nAC_CHECK_HEADERS(inttypes.h limits)\n\n### Check for the platform (very roughly)\nAC_CHECK_HEADERS(unistd.h,  x_have_unistd=\"yes\")\nAC_CHECK_HEADERS(windows.h, x_have_windows=\"yes\")\n\nif test \"$x_have_windows\" = \"yes\" -a \"x$host_os\" != \"xcygwin32\" -a \"x$host_os\" != \"xcygwin\"; then\n   AC_DEFINE(NCBI_OS_MSWIN, 1, [Define to 1 on Windows.])\n   AC_DEFINE(NCBI_OS, \"MSWIN\", [Operating system name])\n   NCBI_FEATURE(MSWin)\nelif test \"$x_have_unistd\" = \"yes\" ; then\n   AC_DEFINE(NCBI_OS_UNIX, 1,  [Define to 1 on Unix.])\n   AC_DEFINE(NCBI_OS, \"UNIX\",  [Operating system name])\n\n   UNIX_SRC='$(UNIX_SRC)'\n   UNIX_USR_PROJ='$(UNIX_USR_PROJ)'\n   NCBI_FEATURE(unix)\n   NCBI_FEATURE(WinMain) # to accommodate a PTB-specific (ab)use of REQUIRES\n\n   # Extra defines for variants we care about\n   case \"$OSTYPE\" in\n     aix)\n        AC_DEFINE(NCBI_OS_AIX,     1, [Define to 1 on AIX.])\n        NCBI_FEATURE(AIX)\n        ;;\n     *bsd)\n        AC_DEFINE(NCBI_OS_BSD,     1, [Define to 1 on *BSD.])\n        NCBI_FEATURE(BSD)\n        ;;\n     cygwin)\n        AC_DEFINE(NCBI_OS_CYGWIN,  1, [Define to 1 on Cygwin.])\n        NCBI_FEATURE(Cygwin)\n        if test \"$with_mt\" = yes; then NCBI_FEATURE(CygwinMT); fi\n        ;;\n     darwin)\n        AC_DEFINE(NCBI_OS_DARWIN,  1, [Define to 1 on Mac OS X.])\n        NCBI_FEATURE(Darwin)\n        if false; then NCBI_FEATURE(XCODE); fi\n        ;;\n     irix)\n        AC_DEFINE(NCBI_OS_IRIX,    1, [Define to 1 on IRIX.])\n        NCBI_FEATURE(IRIX)\n        ;;\n     linux)\n        AC_DEFINE(NCBI_OS_LINUX,   1, [Define to 1 on Linux.])\n        NCBI_FEATURE(Linux)\n        ;;\n     osf)\n        AC_DEFINE(NCBI_OS_OSF1,    1, [Define to 1 on Tru64 Unix.])\n        NCBI_FEATURE(OSF)\n        ;;\n     solaris)\n        AC_DEFINE(NCBI_OS_SOLARIS, 1, [Define to 1 on Solaris.])\n        NCBI_FEATURE(Solaris)\n        ;;\n   esac\nelse\ndnl Classic Mac OS, no longer supported; the following line is\ndnl commented out to avoid cluttering config.h.in.\ndnl AC_DEFINE(NCBI_OS_MAC, 1, [Define to 1 on MacOS.])\n   AC_DEFINE(NCBI_OS, \"MAC\", [Operating system name])\n   NCBI_FEATURE(MacOS)\nfi\n\ncase \"$host_os\" in\n   cygwin* | osf* )\n      AC_DEFINE(NETDB_REENTRANT, 1,\n                [Define to 1 if the BSD-style netdb interface is reentrant.])\n      ;;\nesac\n\n# AC_CHECK_TYPES is insufficient, as linking may still fail :-/\nAC_CACHE_CHECK([for wstring], ac_cv_type_wstring_linkable,\n   [AC_LINK_IFELSE([AC_LANG_PROGRAM(\n       [[#include <string>\n         using std::wstring;]],\n       [[wstring ws, ws2; ws.find_first_of(ws2);]])],\n       [ac_cv_type_wstring_linkable=yes], [ac_cv_type_wstring_linkable=no])])\nif test \"$ac_cv_type_wstring_linkable\" = \"yes\"; then\n   AC_DEFINE(HAVE_WSTRING, 1,\n      [Define to 1 if the system has the type `wstring'.])\nfi\n\nAC_CHECK_TYPES(socklen_t,,,[#include <sys/types.h>\n#include <sys/socket.h>])\nAC_CHECK_HEADERS(atomic.h dlfcn.h ieeefp.h poll.h sys/epoll.h sys/mount.h \\\n                 sys/sockio.h sys/statvfs.h sys/sysinfo.h sys/vfs.h \\\n                 x86intrin.h)\ncase \"$host_os\" in\n   cygwin*) AC_CHECK_HEADERS(winternl.h) ;;\nesac\n# for FreeTDS 0.6x\nAC_CHECK_HEADERS(arpa/inet.h errno.h malloc.h netdb.h \\\n                 netinet/in.h netinet/tcp.h paths.h signal.h \\\n                 sys/ioctl.h sys/select.h sys/socket.h sys/time.h wchar.h)\nAC_HEADER_TIME\n\n## gethostbyname_r() -- 2 different variants: 5-arg (Solaris), 6-arg (Linux).\n\nAC_CACHE_CHECK([for gethostbyname_r], ncbi_cv_func_gethostbyname_r,\n   [ncbi_cv_func_gethostbyname_r=\"no\"\n    AC_COMPILE_IFELSE([AC_LANG_PROGRAM(\n       [[#include <netdb.h>]],\n       [[\n         void*           dummy = (void*) &gethostbyname_r;\n         char            buf[1024];\n         int             err;\n         struct hostent* hp = 0;\n         hp = gethostbyname_r(\"\", hp, buf, sizeof(buf), &err);\n       ]])],\n       [\n         ncbi_cv_func_gethostbyname_r=\"5\"\n       ]\n    )\n    if test \"$ncbi_cv_func_gethostbyname_r\" = \"no\" ; then\n    AC_COMPILE_IFELSE([AC_LANG_PROGRAM(\n       [[#include <netdb.h>]],\n       [[\n         void*           dummy = (void*) &gethostbyname_r;\n         char            buf[1024];\n         int             err;\n         struct hostent* hp = 0;\n         err = gethostbyname_r(\"\", hp, buf, sizeof(buf), &hp, &err);\n       ]])],\n       [\n         ncbi_cv_func_gethostbyname_r=\"6\"\n       ]\n    )\n    fi])\n\nif test \"$ncbi_cv_func_gethostbyname_r\" != \"no\" ; then\n   AC_DEFINE_UNQUOTED(HAVE_GETHOSTBYNAME_R, $ncbi_cv_func_gethostbyname_r,\n    [If you have the `gethostbyname_r' function, define to the number of\n     arguments it takes (normally 5 or 6).])\nfi\n\n\n## gethostbyaddr_r() -- 2 different variants: 7-arg (Solaris), 8-arg (Linux).\n\nAC_CACHE_CHECK([for gethostbyaddr_r], ncbi_cv_func_gethostbyaddr_r,\n   [ncbi_cv_func_gethostbyaddr_r=\"no\"\n    AC_COMPILE_IFELSE([AC_LANG_PROGRAM(\n       [[\n         #include <netdb.h>\n         #include <sys/types.h>\n         #include <sys/socket.h>\n       ]],\n       [[\n         void* dummy = (void*) &gethostbyaddr_r;\n         char            buf[1024];\n         int             err;\n         unsigned int    host;\n         struct hostent* hp = 0;\n         hp = gethostbyaddr_r((char *) &host, sizeof(host), AF_INET,\n                              hp, buf, sizeof(buf), &err);\n       ]])],\n       [\n         ncbi_cv_func_gethostbyaddr_r=\"7\"\n       ]\n    )\n    if test \"$ncbi_cv_func_gethostbyaddr_r\" = \"no\" ; then\n    AC_COMPILE_IFELSE([AC_LANG_PROGRAM(\n       [[\n         #include <netdb.h>\n         #include <sys/types.h>\n         #include <sys/socket.h>\n       ]],\n       [[\n         void* dummy = (void*) &gethostbyaddr_r;\n         char            buf[1024];\n         int             err;\n         unsigned int    host;\n         struct hostent* hp = 0;\n         int res = gethostbyaddr_r((char *) &host, sizeof(host), AF_INET,\n                                   hp, buf, sizeof(buf), &hp, &err);\n       ]])],\n       [\n         ncbi_cv_func_gethostbyaddr_r=\"8\"\n       ]\n    )\n    fi])\n\nif test \"$ncbi_cv_func_gethostbyaddr_r\" != \"no\" ; then\n   AC_DEFINE_UNQUOTED(HAVE_GETHOSTBYADDR_R, $ncbi_cv_func_gethostbyaddr_r,\n    [If you have the `gethostbyaddr_r' function, define to the number of\n     arguments it takes (normally 7 or 8).])\nfi\n\n\n## getservbyname_r() -- 2 different variants: 5-arg (Solaris), 6-arg (Linux).\n\nAC_CACHE_CHECK([for getservbyname_r], ncbi_cv_func_getservbyname_r,\n   [ncbi_cv_func_getservbyname_r=\"no\"\n    AC_COMPILE_IFELSE([AC_LANG_PROGRAM(\n       [[#include <netdb.h>]],\n       [[\n         void*           dummy = (void*) &getservbyname_r;\n         char            buf[1024];\n         int             err;\n         struct servent* sp = 0;\n         sp = getservbyname_r(\"\", \"\", sp, buf, sizeof(buf));\n       ]])],\n       [\n         ncbi_cv_func_getservbyname_r=\"5\"\n       ]\n    )\n    if test \"$ncbi_cv_func_getservbyname_r\" = \"no\" ; then\n    AC_COMPILE_IFELSE([AC_LANG_PROGRAM(\n       [[#include <netdb.h>]],\n       [[\n         void*           dummy = (void*) &getservbyname_r;\n         char            buf[1024];\n         int             err;\n         struct servent* sp = 0;\n         err = getservbyname_r(\"\", \"\", sp, buf, sizeof(buf), &sp);\n       ]])],\n       [\n         ncbi_cv_func_getservbyname_r=\"6\"\n       ]\n    )\n    fi])\n\nif test \"$ncbi_cv_func_getservbyname_r\" != \"no\" ; then\n   AC_DEFINE_UNQUOTED(HAVE_GETSERVBYNAME_R, $ncbi_cv_func_getservbyname_r,\n    [If you have the `getservbyname_r' function, define to the number of\n     arguments it takes (normally 5 or 6).])\nfi\n\n## getpwuid_r() -- 2 major variants: 4-arg, 5-arg (POSIX).\n## (Alternate 4-arg interface ignored due to rarity.)\n\nAC_CACHE_CHECK([for getpwuid_r], ncbi_cv_func_getpwuid_r,\n   [ncbi_cv_func_getpwuid_r=\"no\"\n    AC_COMPILE_IFELSE([AC_LANG_PROGRAM(\n       [[#include <unistd.h>\n         #include <pwd.h>]],\n       [[struct passwd bpw;\n         char buf[1024];\n         char *dir = getpwuid_r(getuid(), &bpw, buf, sizeof(buf))->pw_dir;\n       ]])],\n       [ncbi_cv_func_getpwuid_r=4])\n    if test \"$ncbi_cv_func_getpwuid_r\" = \"no\" ; then\n    AC_COMPILE_IFELSE([AC_LANG_PROGRAM(\n       [[#include <unistd.h>\n         #include <pwd.h>]],\n       [[struct passwd *pw, bpw;\n         char buf[1024];\n         getpwuid_r(getuid(), &bpw, buf, sizeof(buf), &pw);\n       ]])],\n       [ncbi_cv_func_getpwuid_r=5])\n    fi])\n\nif test \"$ncbi_cv_func_getpwuid_r\" != \"no\" ; then\n   AC_DEFINE_UNQUOTED(NCBI_HAVE_GETPWUID_R, $ncbi_cv_func_getpwuid_r,\n    [If you have the `getpwuid_r' function, define to the number of\n     arguments it takes (normally 4 or 5).])\nfi\n\n# Perform a full-fledged check in C++ to be sure of an actual declaration.\n# Accommodate the old Solaris interface that returns char* rather than int. :-/\nAC_CACHE_CHECK([for getlogin_r], ncbi_cv_func_getlogin_r,\n   [ncbi_cv_func_getlogin_r=\"no\"\n    AC_COMPILE_IFELSE([AC_LANG_PROGRAM(\n       [[#include <unistd.h>]],\n       [[char buf[64]; /* return */ getlogin_r(buf, 64);]])],\n       [ncbi_cv_func_getlogin_r=yes], [ncbi_cv_func_getlogin_r=no])])\nif test $ncbi_cv_func_getlogin_r = yes; then\n   AC_DEFINE(HAVE_GETLOGIN_R, 1,\n      [Define to 1 if you have the `getlogin_r' function])\nfi\n\nAC_LANG_PUSH(C)\n# some of these can lose in C++ due to the way autoconf works\nAC_CHECK_FUNCS(localtime_r pthread_setconcurrency pthread_atfork)\nif test \"$ac_cv_func_localtime_r\" = \"yes\" ; then\n   AC_CACHE_CHECK(return type of localtime_r, ac_cv_func_which_localtime_r,\n      [AC_COMPILE_IFELSE(\n          [AC_LANG_PROGRAM(\n             [[#include <unistd.h>\n               #include <time.h>]],\n             [[struct tm mytm;\n               time_t t;\n               int y = localtime_r(&t, &mytm)->tm_year;]])],\n          ac_cv_func_which_localtime_r=struct,\n          ac_cv_func_which_localtime_r=int)])\n   if test $ac_cv_func_which_localtime_r = struct; then\n      AC_DEFINE(HAVE_FUNC_LOCALTIME_R_TM, 1,\n         [Define to 1 if your localtime_r returns a struct tm*.])\n   else\n     AC_DEFINE(HAVE_FUNC_LOCALTIME_R_INT, 1,\n        [Define to 1 if your localtime_r returns a int.])\n   fi\nfi\n\nAC_CACHE_CHECK([whether pthread mutexes are available],\n   ncbi_cv_func_pthread_mutex,\n   [AC_LINK_IFELSE([AC_LANG_PROGRAM(\n       [[#include <pthread.h>\n         pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;]],\n       [[pthread_mutex_lock(&mutex); pthread_mutex_unlock(&mutex);]])],\n      [ncbi_cv_func_pthread_mutex=yes], [ncbi_cv_func_pthread_mutex=no])])\nif test $ncbi_cv_func_pthread_mutex=yes; then\n   AC_DEFINE(HAVE_PTHREAD_MUTEX, 1,\n      [Define to 1 if pthread mutexes are available.])\nfi\n\n\n### Check for other standard library functions\n\nAC_FUNC_VPRINTF\nAC_CHECK_FUNCS(euidaccess atoll basename lchown fseeko getgrouplist \\\n               getpagesize getpass getpassphrase getpwuid getrusage \\\n               gettimeofday getuid memrchr readpassphrase readv usleep \\\n               asprintf vasprintf vsnprintf select statfs statvfs \\\n               strcasecmp strlcat strlcpy strdup strndup strtok_r \\\n               sysmp timegm utimes lutimes writev)\nAC_LANG_POP(C)\n\nAC_TYPE_SIGNAL\ntest \"$ac_cv_func_select\" = yes  ||  ncbi_cv_func_select_updates_timeout=no\nAC_CACHE_CHECK([whether select updates the timeout when interrupted],\n               ncbi_cv_func_select_updates_timeout,\n   [AC_RUN_IFELSE([AC_LANG_PROGRAM(\n       [[#include <signal.h>\n         #include <sys/types.h>\n         #ifdef HAVE_SYS_SELECT_H\n         #  include <sys/select.h>\n         #endif\n         #ifdef HAVE_SYS_TIME_H\n         #  include <sys/time.h>\n         #endif\n         #ifdef HAVE_UNISTD_H\n         #  include <unistd.h>\n         #endif\n         RETSIGTYPE handler(int sig) { alarm(0); }]],\n       [[struct timeval timeout = { 5, 0 };\n         signal(SIGALRM, &handler);\n         alarm(1);\n         select(0, NULL, NULL, NULL, &timeout);\n         return timeout.tv_sec == 5;]])],\n       [ncbi_cv_func_select_updates_timeout=yes],\n       [ncbi_cv_func_select_updates_timeout=no],\n       [case \"$host_os\" in\n          linux) ncbi_cv_func_select_updates_timeout=yes ;;\n          *) ncbi_cv_func_select_updates_timeout=no ;;\n        esac])])\nif test \"$ncbi_cv_func_select_updates_timeout\" = yes; then\n   AC_DEFINE(SELECT_UPDATES_TIMEOUT, 1,\n      [Define to 1 if the `select' function updates its timeout when\n       interrupted by a signal.])\nfi\n\n# We want the program to return 0, which is *false* in C.  Also, since\n# use of lowercase seems to be customary if not universal, the default\n# is yes when cross-compiling; anyone cross-compiling for exceptional\n# platforms can set ncbi_cv_func_strcasecmp_lc=no in config.site.\nif test \"$ac_cv_func_strcasecmp\" = yes; then\n   AC_CACHE_CHECK([whether strcasecmp treats letters as lowercase],\n                  ncbi_cv_func_strcasecmp_lc,\n      [AC_RUN_IFELSE([AC_LANG_PROGRAM(\n          [[#include <string.h>]],\n          [[return strcasecmp(\"A\", \"_\") <= 0;]])],\n          [ncbi_cv_func_strcasecmp_lc=yes], [ncbi_cv_func_strcasecmp_lc=no],\n          [ncbi_cv_func_strcasecmp_lc=yes])])\n   if test \"$ncbi_cv_func_strcasecmp_lc\" = yes; then\n      AC_DEFINE(HAVE_STRCASECMP_LC, 1,\n                [Define to 1 if strcasecmp treats letters as lowercase.])\n   fi\nfi\n\nAC_CACHE_CHECK([for Linux-like sysinfo with 1 arg], ncbi_cv_func_sysinfo_1,\n   [AC_COMPILE_IFELSE([AC_LANG_PROGRAM(\n       [[#include <sys/sysinfo.h>]],\n       [[\n         void* dummy = (void*) &sysinfo;\n         struct sysinfo* info = 0;\n         int retval = sysinfo(info);\n       ]])], [ncbi_cv_func_sysinfo_1=yes], [ncbi_cv_func_sysinfo_1=no])])\n\nif test \"$ncbi_cv_func_sysinfo_1\" = yes; then\n   AC_DEFINE(HAVE_SYSINFO_1, 1,\n             [Define to 1 if Linux-like 1-arg sysinfo exists.])\nfi\n\ndnl Too much overkill, and now wants getloadavg.c to exist.\ndnl AC_FUNC_GETLOADAVG\nAC_CHECK_FUNCS(getloadavg)\n\n## readdir_r() -- 2 different variants: 2-arg (trad. Solaris), 3-arg (POSIX).\n\nAC_CACHE_CHECK([for readdir_r], ncbi_cv_func_readdir_r,\n   [ncbi_cv_func_readdir_r=\"no\"\n    AC_COMPILE_IFELSE([AC_LANG_PROGRAM(\n       [[#include <dirent.h>]],\n       [[DIR* dir; struct dirent* entry; readdir_r(dir, entry, &entry);]])],\n       [ncbi_cv_func_readdir_r=3])\n    if test \"$ncbi_cv_func_readdir_r\" = \"no\" ; then\n    AC_COMPILE_IFELSE([AC_LANG_PROGRAM(\n       [[#include <dirent.h>]],\n       [[DIR* dir; struct dirent* entry; readdir_r(dir, entry);]])],\n       [ncbi_cv_func_readdir_r=2])\n    fi])\n\nif test \"$ncbi_cv_func_readdir_r\" != \"no\" ; then\n   AC_DEFINE_UNQUOTED(NCBI_HAVE_READDIR_R, $ncbi_cv_func_readdir_r,\n    [If you have the `readdir_r' function, define to the number of\n     arguments it takes (normally 2 or 3).])\nfi\n\n### Check for typedefs, structures, and compiler features.\nAC_C_CONST\n\n### Check for C standard types and sizes\nif test \"${with_universal-no}\" = \"no\"; then\n   AC_C_BIGENDIAN\n   AC_C_CHAR_UNSIGNED\n   AC_CHECK_SIZEOF(char)\n   AC_CHECK_SIZEOF(double)\n   AC_CHECK_SIZEOF(float)\n   AC_CHECK_SIZEOF(int)\n   AC_CHECK_SIZEOF(long)\n   AC_CHECK_SIZEOF(long double)\n   AC_CHECK_SIZEOF(long long)\n   AC_CHECK_SIZEOF(short)\n   AC_CHECK_SIZEOF(void*)\n   AC_CHECK_SIZEOF(__int64)\nfi\nAC_CHECK_TYPES([intptr_t, uintptr_t])\n\nAC_CHECK_MEMBER(struct sockaddr_in.sin_len,\n   [AC_DEFINE(HAVE_SIN_LEN, 1,\n      [Define to 1 if `sin_len' is a member of `struct sockaddr_in'.])],\n   [], [#include <sys/types.h>\n        #include <netinet/in.h>])\n\nAC_CHECK_MEMBERS([struct tm.tm_zone, struct tm.__tm_zone], [], [],\n   [#include <time.h>])\n\n\nAC_CACHE_CHECK([whether function prototypes can use throw(...)],\n   ncbi_cv_cxx_throw_spec,\n   [AC_COMPILE_IFELSE([AC_LANG_PROGRAM(\n       [[template <class T> inline int test_throw_spec(const T&) throw() {\n          return 0;\n       }]],\n       [[return test_throw_spec(123);]])],\n       [ncbi_cv_cxx_throw_spec=yes], [ncbi_cv_cxx_throw_spec=no])])\nif test \"$ncbi_cv_cxx_throw_spec\" = yes; then\n   AC_DEFINE(NCBI_USE_THROW_SPEC, 1,\n             [Define to 1 if prototypes can use exception specifications.])\nfi\n\n\nAC_CACHE_CHECK([for obsolete string::compare() syntax],\n   ncbi_cv_func_string_compare_obsolete,\n   [AC_COMPILE_IFELSE([AC_LANG_PROGRAM(\n       [[#include <string>]],\n       [[std::string s;  int i = 0;  i = s.compare(\"aaa\", 0, 2);]])],\n       [ncbi_cv_func_string_compare_obsolete=yes],\n       [ncbi_cv_func_string_compare_obsolete=no])])\nif test \"$ncbi_cv_func_string_compare_obsolete\" = yes; then\n   AC_DEFINE(NCBI_OBSOLETE_STR_COMPARE, 1,\n             [Define to 1 if `string::compare()' is non-standard.])\nfi\n\n\nAC_CACHE_CHECK([whether the auto_ptr template class works],\n   ncbi_cv_type_auto_ptr_works,\n   [AC_COMPILE_IFELSE([AC_LANG_PROGRAM(\n       [[#include <memory>]],\n       [[int *ip = 0; std::auto_ptr<int> ap(ip); *ip = *ap; ap.reset(ip);]])],\n       [ncbi_cv_type_auto_ptr_works=yes], [ncbi_cv_type_auto_ptr_works=no])])\nif test \"$ncbi_cv_cxx_auto_ptr_works\" = no; then\n   AC_DEFINE(HAVE_NO_AUTO_PTR, 1,\n             [Define to 1 if `auto_ptr<T>' is missing or broken.])\nfi\n\n\nAC_CACHE_CHECK([for min/max templates], ncbi_cv_func_min_max,\n   [AC_COMPILE_IFELSE([AC_LANG_PROGRAM(\n       [[\n        #include <algorithm>\n        #ifdef min\n        #undef min\n        #endif\n        #ifdef max\n        #undef max\n        #endif\n       ]],\n       [[int a=0, b=1;  a = std::min(a, b);  b = std::max(a, b);]])],\n       [ncbi_cv_func_min_max=yes], [ncbi_cv_func_min_max=no])])\nif test \"$ncbi_cv_func_min_max\" = no; then\n   AC_DEFINE(HAVE_NO_MINMAX_TEMPLATE, 1,\n             [Define to 1 if `min'/`max' templates are not implemented.])\nfi\n\n\nAC_CACHE_CHECK([whether new C++ streams have ios_base::],\n   ncbi_cv_type_ios_base,\n   [AC_COMPILE_IFELSE([AC_LANG_PROGRAM(\n       [[#include <iostream>]],\n       [[(void)(std::ios_base::out != std::ios_base::beg);]])],\n       [ncbi_cv_type_ios_base=yes], [ncbi_cv_type_ios_base=no])])\nif test \"$ncbi_cv_type_ios_base\" = no; then\n   AC_DEFINE(HAVE_NO_IOS_BASE, 1,\n             [Define to 1 if new C++ streams lack `ios_base::'.])\nfi\n\n\nAC_CACHE_CHECK([for ios(_base)::register_callback],\n   ncbi_cv_func_ios_register_callback,\n   [AC_COMPILE_IFELSE([AC_LANG_PROGRAM(\n       [[#include <iostream>]],\n       [[std::cout.register_callback(0, std::ios::erase_event);]])],\n       [ncbi_cv_func_ios_register_callback=yes],\n       [ncbi_cv_func_ios_register_callback=no])])\nif test \"$ncbi_cv_func_ios_register_callback\" = yes; then\n   AC_DEFINE(HAVE_IOS_REGISTER_CALLBACK, 1,\n             [Define to 1 if you have `ios(_base)::register_callback'.])\nfi\n\n\nAC_CACHE_CHECK([for std::char_traits::], ncbi_cv_type_char_traits,\n   [AC_COMPILE_IFELSE([AC_LANG_PROGRAM(\n       [[#include <iostream>]],\n       [[using namespace std;\n       char_traits<char>::int_type  i = char_traits<char>::eof();\n       i = char_traits<char>::not_eof(i);\n       char_traits<char>::char_type c = '\\0';\n       char_traits<char>::pos_type  p = 0;\n       char_traits<char>::off_type  o = 1;\n       ]])],\n       [ncbi_cv_type_char_traits=yes], [ncbi_cv_type_char_traits=no])])\nif test \"$ncbi_cv_type_char_traits\" = no; then\n   AC_DEFINE(HAVE_NO_CHAR_TRAITS, 1,\n             [Define to 1 if `std::char_traits' is missing.])\nfi\n\n\n\nAC_CACHE_CHECK([for SysV semaphores], ncbi_cv_sys_semaphores,\n   AC_LINK_IFELSE([AC_LANG_PROGRAM([#include <sys/types.h>\n#include <sys/sem.h>],\n      [struct sembuf buf; int id = semget(0x1234, 0, IPC_CREAT);\n       buf.sem_op = SEM_UNDO;])],\n      [ncbi_cv_sys_semaphores=yes], [ncbi_cv_sys_semaphores=no]))\nif test \"$ncbi_cv_sys_semaphores\" = yes; then\n   AC_DEFINE(HAVE_SYSV_SEMAPHORES, 1,\n             [Define to 1 if you have SysV semaphores.])\nfi\n\nAC_CHECK_TYPE([union semun],\n   AC_DEFINE(HAVE_SEMUN, 1, [Define to 1 if you have `union semun'.]),\n   [], [#include <sys/types.h>\n#include <sys/sem.h>])\n\n\nAC_CACHE_CHECK([which way the stack grows], ncbi_cv_sys_stack_dir,\n   [AC_RUN_IFELSE([AC_LANG_PROGRAM(\n        [[ int f(int* p) { int i; return (&i < p) ? 1 : 0; } ]],\n        [[ int p; return f(&p); ]])],\n        [ncbi_cv_sys_stack_dir=up], [ncbi_cv_sys_stack_dir=down],\n        [ncbi_cv_sys_stack_dir=\"unknown (cross-compiling)\"])])\ncase \"$ncbi_cv_sys_stack_dir\" in\n up)   AC_DEFINE(STACK_GROWS_UP,   1, [Define to 1 if the stack grows up.])  ;;\n down) AC_DEFINE(STACK_GROWS_DOWN, 1, [Define to 1 if the stack grows down.]);;\nesac\n\nAC_LANG_PUSH(C)\n\nAC_CACHE_CHECK([whether the preprocessor supports C99-style variadic macros],\n   ncbi_cv_cpp_std_varargs,\n   [AC_COMPILE_IFELSE([AC_LANG_PROGRAM(\n       [[#define foo(...) 1\n         #if foo(x,y,z) != 1\n         #error failed\n         #endif]], [])],\n       [ncbi_cv_cpp_std_varargs=yes], [ncbi_cv_cpp_std_varargs=no])])\nif test \"$ncbi_cv_cpp_std_varargs\" = yes; then\n   AC_DEFINE(HAVE_CPP_STD_VARARGS, 1,\n      [Define to 1 if the preprocessor supports C99-style variadic macros.])\nfi\n\nAC_CACHE_CHECK([whether the preprocessor supports GNU-style variadic macros],\n   ncbi_cv_cpp_gnu_varargs,\n   [AC_COMPILE_IFELSE([AC_LANG_PROGRAM(\n       [[#define foo(args...) 1\n         #if foo(x,y,z) != 1\n         #error failed\n         #endif]], [])],\n       [ncbi_cv_cpp_gnu_varargs=yes], [ncbi_cv_cpp_gnu_varargs=no])])\nif test \"$ncbi_cv_cpp_gnu_varargs\" = yes; then\n   AC_DEFINE(HAVE_CPP_GNU_VARARGS, 1,\n      [Define to 1 if the preprocessor supports GNU-style variadic macros.])\nfi\n\nAC_LANG_POP(C)\n\n# Avoid using unsupported (and noisily ignored) attributes.\ncase \"$compiler:$compiler_version\" in\n   GCC:2* | GCC:3[[01]]* )\n      ncbi_cv_c_deprecation_syntax=none\n      ncbi_cv_c_forceinline=inline\n      ;;\n   VisualAge:* )\n      ncbi_cv_c_forceinline=inline\n      ;;\n   WorkShop* )\n      ncbi_cv_c_deprecation_syntax=none\n      ncbi_cv_c_forceinline=inline\n      ncbi_cv_c_noreturn=none\n      ;;\nesac\n\nAC_CACHE_CHECK([syntax for marking deprecated functions],\n   ncbi_cv_c_deprecation_syntax,\n   [AC_COMPILE_IFELSE([AC_LANG_PROGRAM(\n       [[void f(void) __attribute__((__deprecated__)); void f(void) { }]],\n       [[f();]])],\n      [ncbi_cv_c_deprecation_syntax='__attribute__((__deprecated__))'],\n      [ncbi_cv_c_deprecation_syntax=none])])\ndepr=$ncbi_cv_c_deprecation_syntax\ntest \"$depr\" = \"none\"  &&  depr=\"\"\nAC_DEFINE_UNQUOTED(NCBI_DEPRECATED, $depr,\n   [Define to whatever syntax, if any, your compiler supports for marking\n    functions as deprecated.])\n\nAC_LANG_PUSH(C)\nAC_CACHE_CHECK([how to force inlining],\n   ncbi_cv_c_forceinline,\n   [ncbi_cv_c_forceinline=no\n    for fi in __always_inline \"inline __attribute__((always_inline))\" \\\n       forceinline __forceinline__ __forceinline inline __inline__; do\n       test \"$ncbi_cv_c_forceinline\" = \"no\" || break\n       AC_COMPILE_IFELSE([AC_LANG_SOURCE([$fi int f(void) { return 0; }])],\n          [ncbi_cv_c_forceinline=$fi], [])\n    done])\nforceinline=$ncbi_cv_c_forceinline\ntest \"$forceinline\" = \"no\"  &&  forceinline=\"\"\nAC_DEFINE_UNQUOTED(NCBI_FORCEINLINE, $forceinline,\n   [Define to whatever syntax your compiler supports for marking functions\n    as to be inlined even if they might not otherwise be.])\n\nAC_CACHE_CHECK([whether the C compiler supports __attribute__((destructor))],\n   ncbi_cv_c_attribute_destructor,\n   [AC_COMPILE_IFELSE([AC_LANG_PROGRAM(\n       [[void f(void) __attribute__((destructor)); void f(void) { }]],\n       [[f();]])],\n      [ncbi_cv_c_attribute_destructor=yes],\n      [ncbi_cv_c_attribute_destructor=no])])\nif test $ncbi_cv_c_attribute_destructor = yes; then\n   AC_DEFINE(HAVE_ATTRIBUTE_DESTRUCTOR, 1,\n      [Define to 1 if your C compiler supports __attribute__((destructor))])\nfi\n\ncase \"$compiler:$compiler_version $CFLAGS $CXXFLAGS\" in\n   GCC:[[4-9]]??\\ *\\ -fvisibility*|ICC:*\\ -fvisibility* ) ;;\n   * ) ncbi_cv_c_attribute_visibility_default=unnecessary ;;\nesac\n\nAC_CACHE_CHECK([whether $CC supports __attribute__((visibility(\"default\")))],\n   ncbi_cv_c_attribute_visibility_default,\n   [AC_COMPILE_IFELSE([AC_LANG_PROGRAM(\n       [[__attribute__((visibility(\"default\"))) void f(void); void f(void) {}]],\n       [[f();]])],\n      [ncbi_cv_c_attribute_visibility_default=yes],\n      [ncbi_cv_c_attribute_visibility_default=no])])\nif test $ncbi_cv_c_attribute_visibility_default = yes; then\n   AC_DEFINE(HAVE_ATTRIBUTE_VISIBILITY_DEFAULT, 1,\n      [Define to 1 if your compiler supports __attribute__((visibility(\"default\")))])\nfi\n\nAC_CACHE_CHECK([whether the C compiler supports C99 restrict],\n   ncbi_cv_c_restrict,\n   [ncbi_cv_c_restrict=no\n    for restrict in __restrict__ __restrict restrict; do\n       test \"$ncbi_cv_c_restrict\" = \"no\" || break\n       AC_COMPILE_IFELSE([AC_LANG_SOURCE([void f(int * $restrict p);])],\n          [ncbi_cv_c_restrict=$restrict], [])\n    done])\nrestrict=$ncbi_cv_c_restrict\ntest \"$restrict\" = \"no\"  &&  restrict=\"\"\nAC_DEFINE_UNQUOTED(NCBI_RESTRICT_C, $restrict,\n   [Define to whatever syntax, if any, your C compiler supports for marking\n    pointers as restricted in the C99 sense.])\nif test -n \"$restrict\"; then\n   AC_DEFINE(HAVE_RESTRICT_C, 1,\n      [Define to 1 if your C compiler supports some variant of the C99\n       `restrict' keyword.])\nfi\nAC_LANG_POP(C)\n\nAC_CACHE_CHECK([whether the C++ compiler supports C99 restrict],\n   ncbi_cv_cxx_restrict,\n   [ncbi_cv_cxx_restrict=no\n    for restrict in __restrict__ __restrict restrict; do\n       test \"$ncbi_cv_cxx_restrict\" = \"no\" || break\n       AC_COMPILE_IFELSE([AC_LANG_SOURCE([void f(int * $restrict p);])],\n          [ncbi_cv_cxx_restrict=$restrict], [])\n    done])\nrestrict=$ncbi_cv_cxx_restrict\ntest \"$restrict\" = \"no\"  &&  restrict=\"\"\nAC_DEFINE_UNQUOTED(NCBI_RESTRICT_CXX, $restrict,\n   [Define to whatever syntax, if any, your C++ compiler supports for marking\n    pointers as restricted in the C99 sense.])\nif test -n \"$restrict\"; then\n   AC_DEFINE(HAVE_RESTRICT_CXX, 1,\n      [Define to 1 if your C++ compiler supports some variant of the C99\n       `restrict' keyword.])\nfi\n\nAC_CACHE_CHECK([syntax for marking functions that never return],\n   ncbi_cv_c_noreturn,\n   [AC_COMPILE_IFELSE([AC_LANG_PROGRAM(\n       [[void f(void) __attribute__((__noreturn__)); void f(void) { }]],\n       [[f();]])],\n      [ncbi_cv_c_noreturn='__attribute__((__noreturn__))'],\n      [ncbi_cv_c_noreturn=none])])\nnoret=$ncbi_cv_c_noreturn\ntest \"$noret\" = \"none\"  &&  noret=\"\"\nAC_DEFINE_UNQUOTED(NCBI_NORETURN, $noret,\n   [Define to whatever syntax, if any, your compiler supports for marking\n    functions that never return.])\n\nAC_CACHE_CHECK([syntax for declaring thread-local variables],\n   ncbi_cv_c_tls_var,\n   [ncbi_cv_c_tls_var=none\n    for tls_var in __thread '__declspec(thread)' _Thread_local; do\n       test \"$ncbi_cv_c_tls_var\" = \"none\" || break\n       AC_COMPILE_IFELSE([AC_LANG_PROGRAM([$tls_var int i;],\n          [static $tls_var int j;])],\n          [ncbi_cv_c_tls_var=$tls_var], [])\n    done])\ntls_var=$ncbi_cv_c_tls_var\nif test \"$tls_var\" != \"none\"; then\n   AC_DEFINE_UNQUOTED(NCBI_TLS_VAR, $tls_var,\n      [Define to whatever syntax your compiler supports for declaring\n       thread-local variables, or leave undefined if it doesn't.])\nfi\n\n# for FreeTDS\nAC_CACHE_CHECK([whether FIONBIO requires BSD_COMP to be defined],\n   ncbi_cv_decl_fionbio_needs_bsd_comp,\n   [AC_COMPILE_IFELSE([AC_LANG_PROGRAM(\n       [[ #include <sys/types.h>\n          #include <sys/ioctl.h> ]],\n       [[ int request = FIONBIO; ]])],\n       [ncbi_cv_decl_fionbio_needs_bsd_comp=no],\n       [AC_COMPILE_IFELSE([AC_LANG_PROGRAM(\n           [[ #define BSD_COMP 1\n              #include <sys/types.h>\n              #include <sys/ioctl.h> ]],\n           [[ int request = FIONBIO; ]])],\n           [ncbi_cv_decl_fionbio_needs_bsd_comp=yes],\n           [ncbi_cv_decl_fionbio_needs_bsd_comp=\"never defined at all\"])])])\nif test \"$ncbi_cv_decl_fionbio_needs_bsd_comp\" = yes; then\n   AC_DEFINE(BSD_COMP, 1,\n             [Define to 1 if necessary to get FIONBIO (e.g., on Solaris)])\nfi\n\nAC_CACHE_CHECK([whether INADDR_NONE is defined], ncbi_cv_decl_inaddr_none,\n   [AC_COMPILE_IFELSE([AC_LANG_PROGRAM(\n       [[\n         #ifdef HAVE_SYS_TYPES_H\n         #include <sys/types.h>\n         #endif\n         #ifdef HAVE_SYS_SOCKET_H\n         #include <sys/socket.h>\n         #endif\n         #ifdef HAVE_NETINET_IN_H\n         #include <netinet/in.h>\n         #endif\n         #ifdef HAVE_ARPA_INET_H\n         #include <arpa/inet.h>\n         #endif\n       ]],\n       [[ unsigned long addr = INADDR_NONE; ]])],\n       [ncbi_cv_decl_inaddr_none=yes], [ncbi_cv_decl_inaddr_none=no])])\nif test \"$ncbi_cv_decl_inaddr_none\" != yes; then\n   AC_DEFINE(INADDR_NONE, 0xffffffff,\n             [Define to 0xffffffff if your operating system doesn't.])\nfi\n\nAC_CACHE_CHECK([whether unaligned reads are permissible],\n               ncbi_cv_sys_unaligned_reads,\n   [AC_RUN_IFELSE([AC_LANG_PROGRAM([[ #include <stdio.h> ]],\n       [[ unsigned int a[2] = { 0x01234567, 0x89abcdef };\n          fprintf(stderr, \"%x\\n\", *(unsigned int*)((char*)a + 1)); ]])],\n       [ncbi_cv_sys_unaligned_reads=yes],\n       [ncbi_cv_sys_unaligned_reads=no],\n       [case \"$host_cpu\" in\n          i?86|x86_64|powerpc*|ppc*) ncbi_cv_sys_unaligned_reads=yes ;;\n          *)                         ncbi_cv_sys_unaligned_reads=no  ;;\n        esac])])\nif test \"$ncbi_cv_sys_unaligned_reads\" = yes; then\n   AC_DEFINE(HAVE_UNALIGNED_READS, 1,\n             [Define to 1 if your system permits reading integers from\n              unaligned addresses.])\nfi\n\nAC_LANG_PUSH(C)\norig_CFLAGS=$CFLAGS\n\nAC_CACHE_CHECK([whether $CC supports SIMD vector arithmetic],\n               ncbi_cv_cc_vector_math,\n   [AC_COMPILE_IFELSE([AC_LANG_PROGRAM(\n         [typedef int TVector __attribute__((vector_size(16)));\n          TVector f(TVector v1, TVector v2) { return v1 ^ v2 };],\n         [TVector v1, v2, v3;  v3 = f(v1, v2);])],\n      [ncbi_cv_cc_vector_math=yes], [ncbi_cv_cc_vector_math=no])])\nif test \"$ncbi_cv_cc_vector_math\" = yes; then\n   AC_DEFINE(HAVE_VECTOR_MATH, 1,\n      [Define to 1 if your C compiler supports SIMD vector calculations.])\nfi\n\nAC_CACHE_CHECK([whether $CC supports -funsafe-math-optimizations],\n               ncbi_cv_cc_unsafe_math,\n   [CFLAGS=\"$orig_CFLAGS -funsafe-math-optimizations\"\n    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([],[])],\n       [ncbi_cv_cc_unsafe_math=yes], [ncbi_cv_cc_unsafe_math=no])])\n\nAC_CACHE_CHECK([whether $CC supports -msse4.1], ncbi_cv_cc_sse4_1,\n   [CFLAGS=\"$orig_CFLAGS -msse4.1\"\n    AC_LINK_IFELSE([AC_LANG_PROGRAM([#include <emmintrin.h>],\n          [double v __attribute__((__vector_size__(16)));\n           __builtin_ia32_shufpd(v, v, 1);])],\n       [ncbi_cv_cc_sse4_1=yes], [ncbi_cv_cc_sse4_1=no])])\n\nAC_CACHE_CHECK([whether $CC supports -maes], ncbi_cv_cc_aes,\n   [CFLAGS=\"$orig_CFLAGS -maes\"\n    AC_COMPILE_IFELSE([AC_LANG_PROGRAM(\n          [#include <wmmintrin.h>\n           typedef long long TAESVec __attribute__((__vector_size__(16)));\n           TAESVec f(TAESVec v, TAESVec w) {\n              return __builtin_ia32_aesdec128(v, w);\n           }], [])],\n       [ncbi_cv_cc_aes=yes], [ncbi_cv_cc_aes=no])])\n\nCFLAGS=$orig_CFLAGS\nAC_LANG_POP(C)\n\nif test $ncbi_cv_cc_unsafe_math = yes; then\n   UNSAFE_MATH_FLAG=-funsafe-math-optimizations\nelse\n   UNSAFE_MATH_FLAG=\nfi\n\nif test $ncbi_cv_cc_sse4_1 = yes; then\n   SSE4_1_FLAG=-msse4.1\nelse\n   SSE4_1_FLAG=\nfi\n\nif test $ncbi_cv_cc_sse4_1 = yes -a $ncbi_cv_cc_aes = yes; then\n   AES_FLAG=-maes\nelse\n   AES_FLAG=\nfi\n\n\n### Check for the availability of other packages\n### --------------------------------------------\n\n\nAC_MSG_CHECKING([whether in-house NCBI resources are available])\nif test -n \"$orig_NCBI\" -a -f \"$orig_NCBI/.ncbirc\" \\\n    -a -d /am/coremake_builds/test_data; \\\nthen\n   NCBI_FEATURE(in-house-resources)\n   AC_MSG_RESULT(yes)\nelse\n   AC_MSG_RESULT(no)\nfi\n\n### Common-use system and miscellaneous libs\nif test -z \"${NETWORK_LIBS+set}\"; then\n   AC_CHECK_LIB(nsl, gethostbyname, [libnsl=-lnsl], [libnsl=])\n   AC_CHECK_LIB(socket, connect, [NETWORK_LIBS=\"-lsocket $libnsl\"],\n      [NETWORK_LIBS=$libnsl])\nfi\nAC_CACHE_CHECK([for res_search in -lresolv], ac_cv_lib_resolv_res_search,\n   [orig_LIBS=$LIBS\n    LIBS=\"-lresolv $NETWORK_LIBS $orig_LIBS\"\n    AC_LINK_IFELSE([AC_LANG_PROGRAM(\n       [[#include <resolv.h>]],\n       [[unsigned char ans[256];\n         int st = res_search(\"foo.bar\", 1, 1, ans, sizeof(ans));]])],\n       [ac_cv_lib_resolv_res_search=yes], [ac_cv_lib_resolv_res_search=no])\n    LIBS=$orig_LIBS])\nif test \"$ac_cv_lib_resolv_res_search\" = \"yes\"; then\n   RESOLVER_LIBS=-lresolv\nelse\n   RESOLVER_LIBS=\nfi\n\norig_LIBS=$LIBS\nLIBS=\"$NETWORK_LIBS $orig_LIBS\"\nAC_CHECK_FUNCS(inet_ntoa_r)\nAC_CACHE_CHECK([for getaddrinfo], ac_cv_func_getaddrinfo,\n   [AC_LINK_IFELSE([AC_LANG_PROGRAM(\n       [[#include <netdb.h>]],\n       [[struct addrinfo *p; getaddrinfo(\"foo\", \"bar\", p, &p);]])],\n       [ac_cv_func_getaddrinfo=yes], [ac_cv_func_getaddrinfo=no])])\ntest \"$ac_cv_func_getaddrinfo\" = \"yes\" && \\\n  AC_DEFINE(HAVE_GETADDRINFO, 1,\n            [Define to 1 if you have the `getaddrinfo' function.])\nAC_CACHE_CHECK([for getnameinfo], ac_cv_func_getnameinfo,\n   [AC_LINK_IFELSE([AC_LANG_PROGRAM(\n       [[#include <netdb.h>\n         #include <sys/types.h>\n         #include <sys/socket.h>]],\n       [[struct sockaddr p; char buf[256], buf2[256];\n         getnameinfo(&p, sizeof(p), buf, 256, buf2, 256, 0);]])],\n       [ac_cv_func_getnameinfo=yes], [ac_cv_func_getnameinfo=no])])\ntest \"$ac_cv_func_getnameinfo\" = \"yes\" && \\\n  AC_DEFINE(HAVE_GETNAMEINFO, 1,\n            [Define to 1 if you have the `getnameinfo' function.])\nAC_CHECK_FUNCS(freehostent gethostent_r getipnodebyaddr getipnodebyname \\\n               inet_ntop)\nLIBS=$orig_LIBS\n\n\n### Save original compiler/linker flags\norig_CPPFLAGS=\"$CPPFLAGS\"\norig_LDFLAGS=\"$LDFLAGS\"\norig_LIBS=\"$LIBS\"\n\n\n### Check for math functions that aren't always available\nAC_CHECK_FUNCS(erf)\n\nNCBI_CHECK_LIBS(KSTAT, kstat, kstat_open)\nNCBI_CHECK_LIBS(RPCSVC, rpcsvc, rstat)\nAC_LANG_PUSH(C)\n# Force C for this test because Sun WorkShop otherwise complains about\n# multiple extern \"C\" declarations of setkey.\nNCBI_CHECK_LIBS(CRYPT, crypt crypt_i, setkey)\nAC_LANG_POP(C)\ncase \"$host_os:$compiler\" in\n     solaris*:GCC ) ac_cv_search_dlopen=\"-ldl\" ;;\n     darwin*      ) ac_cv_search_iconv=\"-liconv\" ;;\nesac\nNCBI_CHECK_LIBS(DL, dl, dlopen)\n# libc's stubs aren't always sufficient...\ncase \"$host_os:$libnsl\" in\n     solaris2.[[89]]:* ) orig_LIBS=\"$DL_LIBS $orig_LIBS\" ;;\n     solaris*:-lnsl    ) NETWORK_LIBS=\"$NETWORK_LIBS $DL_LIBS\" ;;\nesac\ndnl NCBI_CHECK_LIBS(UUID, uuid, uuid_generate)\nAC_SEARCH_LIBS(uuid_generate, uuid,\n   [NCBI_PACKAGE(UUID)\n    test \"x$ac_cv_search_uuid_generate\" = \"xnone required\" || \\\n       UUID_LIBS=$ac_cv_search_uuid_generate])\nLIBS=$orig_LIBS\ndnl NCBI_CHECK_LIBS(FUSE, fuse, fuse_loop)\nAC_SEARCH_LIBS(fuse_loop, fuse, [NCBI_PACKAGE(FUSE)])\nLIBS=$orig_LIBS\n# Temporarily drop OpenMP flags for this test, as some toolchains count\n# its support library's indirect use of librt when building applications\n# but not when building shared libraries with --no-undefined.\norig_CXXFLAGS=$CXXFLAGS\norig_LDFLAGS=$LDFLAGS\nCXXFLAGS=`echo $CXXFLAGS | sed -e 's/[[^ ]]*openmp[[^ ]]*//g'`\nLDFLAGS=`echo $LDFLAGS | sed -e 's/[[^ ]]*openmp[[^ ]]*//g'`\nNCBI_CHECK_LIBS(RT, rt posix4, clock_gettime)\nCXXFLAGS=$orig_CXXFLAGS\nLDFLAGS=$orig_LDFLAGS\nNCBI_CHECK_LIBS(DEMANGLE, demangle, cplus_demangle)\n# Add to (orig_)LIBS if present for the sake of corelib and the\n# following call to AC_CHECK_FUNCS.\nif test -n \"$DEMANGLE_LIBS$RT_LIBS\"; then\n    LIBS=\"$DEMANGLE_LIBS $RT_LIBS $LIBS\"\n    orig_LIBS=\"$DEMANGLE_LIBS $RT_LIBS $orig_LIBS\"\nfi\nAC_CHECK_FUNCS([nanosleep sched_yield])\n\ndnl NCBI_CHECK_LIBS(ICONV, iconv, iconv)\n# We need to include <iconv.h>, since some implementations rename the symbols.\n# This logic adapted from Bruno Haible's iconv.m4.\nAC_CACHE_CHECK(for library containing iconv, ac_cv_search_iconv, [\n   ac_cv_search_iconv=no\n   AC_LINK_IFELSE(\n      [AC_LANG_PROGRAM(\n         [[#include <stdlib.h>\n           #include <iconv.h>]],\n         [[iconv_t cd = iconv_open(\"\",\"\");\n           iconv(cd,NULL,NULL,NULL,NULL);\n           iconv_close(cd);]])],\n      [ac_cv_search_iconv=\"none required\"])\n   if test \"$ac_cv_search_iconv\" != \"none required\"; then\n      for l in iconv; do\n         LIBS=\"-l$l $orig_LIBS\"\n         AC_LINK_IFELSE(\n            [AC_LANG_PROGRAM(\n                [[#include <stdlib.h>\n                  #include <iconv.h>]],\n                [[iconv_t cd = iconv_open(\"\",\"\");\n                  iconv(cd,NULL,NULL,NULL,NULL);\n                  iconv_close(cd);]])],\n            [ac_cv_search_iconv=-l$l])\n         LIBS=\"$orig_LIBS\"\n      done\n   fi])\nif test \"x$ac_cv_search_iconv\" != xno; then\n   AC_DEFINE(HAVE_LIBICONV, 1,\n   [Define to 1 if ICONV is available, either in its own library or as part\n    of the standard libraries.])\n   AC_MSG_CHECKING([for iconv declaration])\n   AC_CACHE_VAL(am_cv_proto_iconv, [\n      AC_COMPILE_IFELSE([[\n#include <stdlib.h>\n#include <iconv.h>\nextern\n#ifdef __cplusplus\n\"C\"\n#endif\n#if defined(__STDC__) || defined(__cplusplus)\nsize_t iconv (iconv_t cd, char * *inbuf, size_t *inbytesleft, char * *outbuf, size_t *outbytesleft);\n#else\nsize_t iconv();\n#endif\n]], am_cv_proto_iconv_arg1=\"\", am_cv_proto_iconv_arg1=\"const\")\n      am_cv_proto_iconv=\"extern size_t iconv (iconv_t cd, $am_cv_proto_iconv_arg1 char * *inbuf, size_t *inbytesleft, char * *outbuf, size_t *outbytesleft);\"])\n   am_cv_proto_iconv=`echo \"[$]am_cv_proto_iconv\" | tr -s ' ' | sed -e 's/( /(/'`\n   AC_MSG_RESULT([$]{ac_t:-\n       }[$]am_cv_proto_iconv)\n   AC_DEFINE_UNQUOTED(ICONV_CONST, $am_cv_proto_iconv_arg1,\n     [Define as const if the declaration of iconv() needs const.])\n   if test \"x$ac_cv_search_iconv\" != \"xnone required\"; then\n      ICONV_LIBS=$ac_cv_search_iconv\n   fi\nfi\n\n\n### Third-party libraries\n\n#### Set compiler prefix (empty for vendor compilers)\ncase \"$signature_compiler:$ac_cv_have_decl__LIBCPP_VERSION\" in\n   Clang:yes | LLVMGCC:yes )\n      compiler_pfx=\"${signature_compiler}-\"\n      compiler_vpfx=\"${signature_compiler}${signature_compiler_version}-\"\n      ;;\n   Clang:* | *[[GIK]]CC:* )\n      compiler_pfx=\"${compiler}-\"\n      compiler_vpfx=\"${compiler}${compiler_version}-\"\n      ;;\nesac\n\nusr_lib=['[/usr]*/lib/*[amdsprcv]*[23469]*']\nno_usr_lib=\"s,-L$usr_lib ,,g;\"\n\nNCBI_CHECK_THIRD_PARTY_LIB(z,\n [[AC_LANG_PROGRAM([#include <zlib.h>],\n      [[gzFile fp; char buf[1024]; int n = gzread(fp, buf, sizeof(buf))]])]])\nif test -z \"$Z_LIBS\"; then\n   zlocal=util/compress/zlib\n   AC_MSG_NOTICE([using local zlib copy in $zlocal])\n   Z_PATH=\"<$zlocal>\"\n   Z_INCLUDE=\"-I\\$(includedir)/$zlocal -I\\$(includedir0)/$zlocal\"\n   # Z_LIBS=\"-lz\"\n   Z_LIB=\"z\"\n   # AC_DEFINE(USE_LOCAL_ZLIB, 1, [Define to 1 if using a local copy of zlib.])\n   NCBI_PACKAGE(Z)\n   NCBI_PACKAGE(LocalZ)\nfi\n\nNCBI_CHECK_THIRD_PARTY_LIB(bz2,\n [[AC_LANG_PROGRAM([#include <bzlib.h>],\n      [[BZFILE* fp; char buf[1024]; int err;\n        int n = BZ2_bzRead(&err, fp, buf, sizeof(buf))]])]])\nif test -z \"$BZ2_LIBS\"; then\n   bzlocal=util/compress/bzip2\n   AC_MSG_NOTICE([using local bzlib copy in $bzlocal])\n   BZ2_PATH=\"<$bzlocal>\"\n   BZ2_INCLUDE=\"-I\\$(includedir)/$bzlocal -I\\$(includedir0)/$bzlocal\"\n   # BZ2_LIBS=\"-lbz2\"\n   BZ2_LIB=\"bz2\"\n   AC_DEFINE(USE_LOCAL_BZLIB, 1, [Define to 1 if using a local copy of bzlib.])\n   NCBI_PACKAGE(BZ2)\n   NCBI_PACKAGE(LocalBZ2)\nfi\n\nif test -d \"$LZO_PATH\"; then\n   NCBI_FIX_DIR(LZO_PATH)\nfi\nNCBI_CHECK_THIRD_PARTY_LIB_EX(lzo, LZO, lzo2,\n [[AC_LANG_PROGRAM([#include <lzo/lzo1x.h>],\n      [[lzo_uint32 c = lzo_crc32(0, (const unsigned char*)\"foo\", 3);]])]])\n\nif test -z \"$PCRE_PATH\"  &&  pcre-config --version >/dev/null 2>&1; then\n    p=`pcre-config --prefix`\n    test \"x$p\" = \"x/usr\"  ||  PCRE_PATH=$p\nfi\nNCBI_CHECK_THIRD_PARTY_LIB(pcre,\n [[AC_LANG_PROGRAM([#include <pcre.h>],\n   [[const char*s[]={\"x\"}; pcre* p; pcre_extra* x = pcre_study(p, 1, s);]])]])\nif test -z \"$PCRE_LIBS\"; then\n   pcrelocal=util/regexp\n   AC_MSG_NOTICE([using local PCRE copy in $pcrelocal])\n   PCRE_PATH=\"<$pcrelocal>\"\n   PCRE_INCLUDE=\"-I\\$(includedir)/$pcrelocal -I\\$(includedir0)/$pcrelocal\"\n   # PCRE_LIBS=\"-lregexp\"\n   # PCREPOSIX_LIBS=\"-lregexp\"\n   PCRE_LIB=\"regexp\"\n   AC_DEFINE(USE_LOCAL_PCRE, 1, [Define to 1 if using a local copy of PCRE.])\n   NCBI_PACKAGE(PCRE)\n   NCBI_PACKAGE(LocalPCRE)\nelse\n   PCREPOSIX_LIBS=`echo \"$PCRE_LIBS\" | sed -e 's/-lpcre/-lpcreposix -lpcre/'`\nfi\n\n## SSL/TLS libraries\ncase \"$with_gcrypt\" in\n   no )       ac_cv_path_LIBGCRYPT_CONFIG=no ;;\n   yes | '' )                                ;;\n   * )        GCRYPT_PATH=$with_gcrypt       ;;\nesac\nif test -d \"$GCRYPT_PATH\"; then\n   NCBI_FIX_DIR(GCRYPT_PATH)\nfi\nAC_PATH_PROG(LIBGCRYPT_CONFIG, libgcrypt-config, [], [${GCRYPT_BIN-$GCRYPT_PATH/${compiler_vpfx}${DEBUG_SFX}${mt_sfx}${bit64_sfx}/bin}:$GCRYPT_PATH/bin${bit64_sfx}:$GCRYPT_PATH/bin:$PATH])\n\nif test \"x$with_gcrypt\" != xno; then\n   if test -x \"$LIBGCRYPT_CONFIG\"; then\n      if test -z \"$GCRYPT_PATH\"; then\n         p=`libgcrypt-config --prefix`\n         test \"x$p\" = \"x/usr\"  ||  GCRYPT_PATH=$p\n      fi\n      NCBI_RPATHIFY_OUTPUT(GCRYPT_LIBPATH,\n        [$LIBGCRYPT_CONFIG --exec-prefix], [s,^,-L,; s,$,/lib,;])\n      GCRYPT_INCLUDE=`$LIBGCRYPT_CONFIG --cflags`\n      GCRYPT_CONFIG_LIBS=\"`$LIBGCRYPT_CONFIG --libs` $Z_LIBS\"\n   fi\nelse\n   AS_UNSET(GCRYPT_CONFIG_LIBS)\nfi\nNCBI_CHECK_THIRD_PARTY_LIB(gcrypt,\n [[AC_LANG_PROGRAM([[#include <gcrypt.h>\n                     #include <pthread.h>\n                     #include <errno.h>\n                     GCRY_THREAD_OPTION_PTHREAD_IMPL;]],\n   [[gcry_control(GCRYCTL_SET_THREAD_CBS, &gcry_threads_pthread);]])]],\n $GCRYPT_CONFIG_LIBS)\nif test \"x$with_gcrypt\" != xno -a -n \"$GCRYPT_CONFIG_LIBS\"; then\n   NCBI_RPATHIFY_OUTPUT(GCRYPT_LIBS, [echo $GCRYPT_CONFIG_LIBS], [$no_usr_lib])\nfi\n\ncase \"$with_gnutls\" in\n   no )       ac_cv_path_LIBGNUTLS_CONFIG=no ;;\n   yes | '' )                                ;;\n   * )        GNUTLS_PATH=$with_gnutls       ;;\nesac\nif test -d \"$GNUTLS_PATH\"; then\n   NCBI_FIX_DIR(GNUTLS_PATH)\n   gnutls_config_path=${GNUTLS_BIN-$GNUTLS_PATH/${compiler_vpfx}${DEBUG_SFX}${mt_sfx}${bit64_sfx}/bin}:$GNUTLS_PATH/bin${bit64_sfx}:$GNUTLS_PATH/bin\nelse\n   gnutls_config_path=$PATH\nfi\nAC_PATH_PROG(LIBGNUTLS_CONFIG, libgnutls-config, [], [$gnutls_config_path])\n\nif test \"x$with_gnutls\" != xno; then\n   if test -x \"$LIBGNUTLS_CONFIG\"; then\n      if test -z \"$GNUTLS_PATH\"; then\n         p=`libgnutls-config --prefix`\n         test \"x$p\" = \"x/usr\"  ||  GNUTLS_PATH=$p\n      fi\n   else\n      LIBGNUTLS_CONFIG=\"eval PKG_CONFIG_PATH=\\\"$GNUTLS_PATH/lib/pkgconfig\\\" pkg-config gnutls --static\"\n      $LIBGNUTLS_CONFIG --exists >/dev/null 2>&1 ||  LIBGNUTLS_CONFIG=no\n   fi\n   case \"$LIBGNUTLS_CONFIG\" in\n       eval\\ *)\n           NCBI_RPATHIFY_OUTPUT(GNUTLS_LIBPATH,\n             [$LIBGNUTLS_CONFIG --libs-only-L])\n           ;;\n       no)\n           ;;\n       *)\n           NCBI_RPATHIFY_OUTPUT(GNUTLS_LIBPATH,\n             [$LIBGNUTLS_CONFIG --exec-prefix], [s,^,-L,; s,$,/lib,;])\n           ;;\n   esac\n\n   if test \"x$LIBGNUTLS_CONFIG\" != xno; then\n      GNUTLS_INCLUDE=`$LIBGNUTLS_CONFIG --cflags`\n      GNUTLS_CONFIG_LIBS=\"`$LIBGNUTLS_CONFIG --libs` $Z_LIBS\"\n   fi\nelse\n   AS_UNSET(GNUTLS_CONFIG_LIBS)\nfi\nNCBI_CHECK_THIRD_PARTY_LIB(gnutls,\n [[AC_LANG_PROGRAM([[#include <gnutls/gnutls.h>]],\n   [[gnutls_session_t s; gnutls_init(&s, GNUTLS_CLIENT);]])]],\n $GNUTLS_CONFIG_LIBS $GCRYPT_LIBS)\nif test \"x$with_gnutls\" != xno -a -n \"$GNUTLS_CONFIG_LIBS\"; then\n   NCBI_RPATHIFY_OUTPUT(GNUTLS_LIBS, [echo $GNUTLS_CONFIG_LIBS], [$no_usr_lib])\n   # Conservatively build against gcrypt if available even when gnutls\n   # uses nettle instead, because gcrypt needs explicit initialization\n   # to be thread-safe, but gnutls's headers don't indicate which\n   # underlying crypto library it's actually using.\n   case \"$GNUTLS_INCLUDE\" in\n       *$GCRYPT_INCLUDE* ) ;;\n       *                 ) GNUTLS_INCLUDE=\"$GNUTLS_INCLUDE $GCRYPT_INCLUDE\" ;;\n   esac\n   case \"$GNUTLS_LIBS\" in\n       *\\ -lgcrypt* ) ;;\n       *            ) GNUTLS_LIBS=\"$GNUTLS_LIBS $GCRYPT_LIBS\" ;;\n   esac\nfi\n\nNCBI_CHECK_THIRD_PARTY_LIB_EX(openssl, OPENSSL, ssl,\n [[AC_LANG_PROGRAM([[#include <openssl/ssl.h>]],\n   [[SSL_library_init();]])]],\n -lcrypto)\n\nOPENSSL_STATIC_LIBS=$OPENSSL_LIBS\nfor d in `echo \" $OPENSSL_LIBS\" | fmt -w 1 | sed -ne 's/^ *-L//p'` \\\n   /usr/local/lib${bit64_sfx} /usr/local/lib /usr/lib${bit64_sfx} /usr/lib; do\n   if test -f $d/libssl.a -a -f $d/libcrypto.a; then\n      OPENSSL_STATIC_LIBS=\"$d/libssl.a $d/libcrypto.a\"\n      break\n   elif test -f $d/libssl.so -o -f $d/libssl.dylib; then\n      break\n   fi\ndone\n\nif test -n \"$GNUTLS_LIBS\"; then\n   TLS_INCLUDE=$GNUTLS_INCLUDE\n   TLS_LIBS=$GNUTLS_LIBS\nelse\n   TLS_INCLUDE=$OPENSSL_INCLUDE\n   TLS_LIBS=$OPENSSL_LIBS\nfi\n\n\ncase \"$with_krb5\" in\n   no )       ac_cv_path_KRB5_CONFIG=no    ;;\n   yes | '' ) : ${KRB5_PATH=/usr/kerberos} ;;\n   * )        KRB5_PATH=$with_krb5         ;;\nesac\nAC_PATH_PROG(KRB5_CONFIG, krb5-config, [], [${KRB5_BIN-$KRB5_PATH/bin}:$PATH])\n\nif test \"x$with_krb5\" != xno; then\n   if test -x \"$KRB5_CONFIG\"; then\n      KRB5_PATH=`$KRB5_CONFIG --prefix`\n      KRB5_INCLUDE=`$KRB5_CONFIG --cflags | \\\n         sed -e 's/$/ /; s,-I/usr/include ,,'`\n      KRB5_CONFIG_LIBS=`$KRB5_CONFIG --libs gssapi | \\\n         sed -e 's/^/ /; s/ -[[^Ll]][[^ ]]*//g'`\n   fi\nelse\n   dnl AS_UNSET(KRB5_CONFIG_LIBS)\n   KRB5_CONFIG_LIBS=$KRB5_LIBS\nfi\nNCBI_CHECK_THIRD_PARTY_LIB_EX(krb5, KRB5, gssapi_krb5,\n [[AC_LANG_PROGRAM([[#include <time.h>\n#ifdef HAVE_INTTYPES_H\n#  include <inttypes.h>\n#endif\nextern \"C\" {\n#include <gssapi/gssapi_krb5.h>\n}]],\n   [[OM_uint32 min_stat;\n     gss_buffer_desc buf;\n     gss_release_buffer(&min_stat, &buf);]])]],\n $KRB5_CONFIG_LIBS)\nif test \"x$with_krb5\" != xno; then\n   NCBI_RPATHIFY_OUTPUT(KRB5_LIBS, [echo $KRB5_CONFIG_LIBS], [$no_usr_lib])\nfi\n\n\nNCBI_CHECK_THIRD_PARTY_LIB(curl,\n   [AC_LANG_PROGRAM([#include <curl/curl.h>],\n       [char* v = curl_version();])])\n\n\n## SYBASE libraries\n\nNETWORK_PURE_LIBS=\"$NETWORK_LIBS\"\nncbi_xreader_pubseqos=\nUNLESS_PUBSEQOS=\nif test \"$with_sybase\" != \"no\" ; then\n   sybase_lib=lib$bit64_sfx\n   resolve_sybase=true\n   default_pointer=default-${NCBI_PLATFORM_BITS}bit\n   : ${with_sybase_new:=\"no\"}\n   case \"$host_os\" in\n      linux* )\n         : ${with_sybase_local:=yes}\n         ;;\n      * )\n         if test -d \"$net_sybase_root\" ; then\n            : ${with_sybase_local:=no}\n         else\n            : ${with_sybase_local:=yes}\n         fi\n         ;;\n   esac\n\n   if test \"$with_sybase_local\" != \"no\" ; then\n      if test \"$with_sybase_local\" = \"yes\" ; then\n         if test -n \"$SYBASE_PATH\" ; then\n            with_sybase_local=$SYBASE_PATH\n         else\n            if test \"$with_sybase_new\" = \"yes\" ; then\n               with_sybase_local=$local_sybase_root/new\n            elif test -f \"$local_sybase_root/$default_pointer\" ; then\n               with_sybase_local=`cat $local_sybase_root/$default_pointer`\n               resolve_sybase=false\n            else\n               with_sybase_local=$local_sybase_root/current\n            fi\n            if test -d \"$with_sybase_local$NCBI_PLATFORM_BITS\" ; then\n               with_sybase_local=$with_sybase_local$NCBI_PLATFORM_BITS\n            fi\n         fi # default paths\n      fi # no command-line path\n      if test -d \"$with_sybase_local\" ; then\n         SYBASE_PATH=$with_sybase_local\n         SYBASE_LCL_PATH=\n      else\n         with_sybase_local=no\n      fi\n   fi\n\n   if test \"$with_sybase_local\" = \"no\" ; then\n      if test \"$with_sybase_new\" = \"yes\" ; then\n         if test -d \"$net_sybase_root/new$NCBI_PLATFORM_BITS\" ; then\n            SYBASE_LCL_PATH=$local_sybase_root/new$NCBI_PLATFORM_BITS\n            SYBASE_PATH=$net_sybase_root/new$NCBI_PLATFORM_BITS\n         elif test -d \"$net_sybase_root/new\" ; then\n            SYBASE_LCL_PATH=$local_sybase_root/new\n            SYBASE_PATH=$net_sybase_root/new\n         else\n            with_sybase_new=no\n         fi\n      fi\n\n      if test -z \"$SYBASE_PATH\" ; then\n         if test -f \"$net_sybase_root/$default_pointer\" ; then\n            SYBASE_LCL_PATH=\n            SYBASE_PATH=`cat $local_sybase_root/$default_pointer`\n            resolve_sybase=false\n         elif test -d \"$net_sybase_root/current$NCBI_PLATFORM_BITS\" ; then\n            SYBASE_LCL_PATH=$local_sybase_root/current$NCBI_PLATFORM_BITS\n            SYBASE_PATH=$net_sybase_root/current$NCBI_PLATFORM_BITS\n         elif test -d \"$net_sybase_root/current\" ; then\n            SYBASE_LCL_PATH=$local_sybase_root/current\n            SYBASE_PATH=$net_sybase_root/current\n         else\n            SYBASE_LCL_PATH=\n            SYBASE_PATH=$SYBASE\n         fi\n      fi\n   fi\n\n   # Lock in the version we found, ignoring symlinks further up\n   case \"$SYBASE_PATH\" in\n      */[[1-9]]* ) resolve_sybase=false ;;\n   esac\n   if test -d \"$SYBASE_PATH\"  &&  $resolve_sybase; then\n      # SYBASE_PATH_=`cd $SYBASE_PATH && /bin/pwd`\n      SYBASE_PATH_=`ls -ld $SYBASE_PATH | sed -ne 's/.* -> //p'`\n      case \"$SYBASE_PATH_\" in\n         '' ) ;;\n         /* )\n            SYBASE_VERSION=`basename $SYBASE_PATH_`\n            SYBASE_PATH=`dirname $SYBASE_PATH`/$SYBASE_VERSION\n            test -d \"$SYBASE_PATH\"  ||  SYBASE_PATH=$SYBASE_PATH_\n            ;;\n         * )\n            orig_parent=`dirname $SYBASE_PATH`\n            SYBASE_VERSION=`basename $SYBASE_PATH_`\n            SYBASE_PATH=$orig_parent/$SYBASE_VERSION\n            test -d \"$SYBASE_PATH\"  ||  SYBASE_PATH=$orig_parent/$SYBASE_PATH_\n            ;;\n      esac\n   fi\n\n   if test -d \"$SYBASE_LCL_PATH\"  &&  $resolve_sybase ; then\n      # SYBASE_LCL_PATH_=`cd $SYBASE_LCL_PATH && /bin/pwd`\n      SYBASE_LCL_PATH_=`ls -ld $SYBASE_LCL_PATH | sed -ne 's/.* -> //p'`\n      case \"$SYBASE_LCL_PATH_\" in\n         '' ) ;;\n         /* )\n            SYBASE_LCL_VERSION=`basename $SYBASE_LCL_PATH_`\n            SYBASE_LCL_PATH=`dirname $SYBASE_LCL_PATH`/$SYBASE_LCL_VERSION\n            test -d \"$SYBASE_LCL_PATH\"  ||  SYBASE_LCL_PATH=$SYBASE_LCL_PATH_\n            ;;\n         * )\n            orig_parent=`dirname $SYBASE_LCL_PATH`\n            SYBASE_LCL_VERSION=`basename $SYBASE_LCL_PATH_`\n            SYBASE_LCL_PATH=$orig_parent/$SYBASE_LCL_VERSION\n            test -d \"$SYBASE_LCL_PATH\"  || \\\n               SYBASE_LCL_PATH=$orig_parent/$SYBASE_LCL_PATH_\n            ;;\n      esac\n   elif test -n \"$SYBASE_LCL_PATH\" ; then\n      SYBASE_LCL_PATH=`dirname $SYBASE_LCL_PATH`/$SYBASE_VERSION\n   fi\n\n   if test -n \"$SYBASE_VERSION\" -a -n \"$SYBASE_LCL_VERSION\" \\\n        -a \"$SYBASE_VERSION\" != \"$SYBASE_LCL_VERSION\" ; then\n      AC_MSG_WARN([ignoring inconsistent local Sybase symlink: $SYBASE_LCL_VERSION vs. $SYBASE_VERSION])\n      SYBASE_LCL_PATH=`dirname $SYBASE_LCL_PATH`/$SYBASE_VERSION\n   fi\n\n   if test -n \"$SYBASE\" ; then\n      if test -d \"$net_sybase_root\" -o -d \"$local_sybase_root\" ; then\n         case $SYBASE in\n            $net_sybase_root/* | $local_sybase_root/* ) ;;\n            * ) AC_MSG_WARN([ignoring non-standard SYBASE setting: $SYBASE]) ;;\n            # Ignored regardless, but standard values are not so concerning.\n         esac\n      fi\n   fi\n\n   SYBASE_LIBPATH=\"$SYBASE_PATH/${sybase_lib}\"\n   syb_sfx=$bit64_sfx\n   if test \"$with_mt\" = \"yes\" ; then\n      AC_CACHE_CHECK([for reentrant Sybase libraries], ncbi_cv_lib_sybase_r,\n         [if test -f \"$SYBASE_LIBPATH/libct_r$bit64_sfx.so\"; then\n             ncbi_cv_lib_sybase_r=yes\n          else\n             ncbi_cv_lib_sybase_r=no\n          fi])\n      if test $ncbi_cv_lib_sybase_r = yes; then\n         syb_sfx=_r$bit64_sfx\n      fi\n   fi\n   case \"$host_os\" in\n      linux*) sybtcl=-lsybtcl$syb_sfx; sybtli=\"\" ;;\n      *)      sybtcl=-ltcl$syb_sfx;    sybtli=-ltli$syb_sfx ;;\n   esac\n   test -f \"$SYBASE_LIBPATH/libtli.so\" || sybtli=\n\n   # quick-patch for the bad \"tli\" lib (Solaris8/Intel specific)\n   case \"$host_os:$host_vendor\" in\n      solaris*:pc )  : ${sybase_sol8pc_patch:=\"yes\"} ;;\n   esac\n   if test \"$sybase_sol8pc_patch\" = \"yes\" ; then\n      sybtli=\"-ltli_orig$syb_sfx -ltli$syb_sfx\"\n      SYBASE_NETWORK_LIBS=\"-ltli$syb_sfx $NETWORK_LIBS\"\n   else\n      SYBASE_NETWORK_LIBS=\"$NETWORK_LIBS\"\n   fi\n\n   test -n \"$bit64_sfx\"  &&  SYBASE_INCLUDE=\"-DSYB_LP64\"\n   SYBASE_LIBLIST=\"-lblk$syb_sfx -lct$syb_sfx -lcs$syb_sfx $sybtcl\"\n   SYBASE_LIBLIST=\"$SYBASE_LIBLIST -lcomn$syb_sfx -lintl$syb_sfx\"\n   SYBASE_DLLLIST=\"$sybtli\"\n\n   # deduce conf.macro: SYBASE_INCLUDE, SYBASE_LIBS, SYBASE_DLLS, SYBASE_DBLIBS\n   SYBASE_INCLUDE=\"-I$SYBASE_PATH/include $SYBASE_INCLUDE\"\n   if test -z \"$SYBASE_LCL_PATH\" ; then\n      NCBI_RPATHIFY(SYBASE_LPATH, $SYBASE_LIBPATH)\n   else\n      SYBASE_LCL_LIBPATH=\"$SYBASE_LCL_PATH/${sybase_lib}\"\n      NCBI_RPATHIFY(SYBASE_LPATH, $SYBASE_LCL_LIBPATH $SYBASE_LIBPATH)\n      SYBASE_INCLUDE=\"-I$SYBASE_LCL_PATH/include $SYBASE_INCLUDE\"\n   fi\n   SYBASE_LIBS=\"$SYBASE_LPATH $SYBASE_LIBLIST\"\n   SYBASE_DBLIBS=\"$SYBASE_LPATH $SYBASE_DBLIBS\"\n   SYBASE_DLLS=\"$SYBASE_DLLLIST\"\n\n   AC_CACHE_CHECK([for Sybase${SYBASE_PATH:+ in $SYBASE_PATH}],\n      ncbi_cv_lib_sybase,\n      [CPPFLAGS=\"$SYBASE_INCLUDE $orig_CPPFLAGS\"\n       LIBS=\"$SYBASE_LIBS $SYBASE_DLLS $SYBASE_NETWORK_LIBS $DL_LIBS $orig_LIBS\"\n       AC_LINK_IFELSE([AC_LANG_PROGRAM(\n          [[#include <ctpublic.h>]],\n          [[CS_RETCODE i = ct_init(0,0);  i = cs_ctx_global(0,0); ]])],\n          [ncbi_cv_lib_sybase=yes], [ncbi_cv_lib_sybase=no])])\n\n   if test \"$ncbi_cv_lib_sybase\" = yes; then\n      NCBI_PACKAGE(Sybase)\n      AC_DEFINE(HAVE_LIBSYBASE, 1,\n                [Define to 1 if SYBASE libraries are available.])\n      if test \"$with_mt\" = \"yes\" -a \"$ncbi_cv_lib_sybase_r\" = \"yes\"; then\n         AC_DEFINE(HAVE_SYBASE_REENTRANT, 1,\n                   [Define to 1 if SYBASE has reentrant libraries.])\n      fi\n      if test \"$with_dbapi\" != no -a -f ${real_srcdir}/src/objtools/data_loaders/genbank/pubseq/Makefile.ncbi_xreader_pubseqos.lib ; then\n         AC_CACHE_CHECK([for PubSeq service availability], ncbi_cv_db_pubseq,\n            [if grep PUBSEQ_OS $SYBASE_PATH/interfaces >/dev/null; then\n                ncbi_cv_db_pubseq=yes\n             else\n                ncbi_cv_db_pubseq=no\n             fi])\n         if test \"$ncbi_cv_db_pubseq\" = yes; then\n            AC_DEFINE(HAVE_PUBSEQ_OS, 1,\n                      [Define to 1 if the PUBSEQ service is available.])\n            NCBI_FEATURE(PubSeqOS)\n            ncbi_xreader_pubseqos=ncbi_xreader_pubseqos\n            ncbi_xreader_pubseqos2=ncbi_xreader_pubseqos2\n            UNLESS_PUBSEQOS=\\#\n         fi\n      fi\n\n      SYBASE_DBLIBS=\"$SYBASE_LPATH -lsybdb${bit64_sfx}\"\n      AC_CACHE_CHECK([for Sybase DBLib], ncbi_cv_lib_sybdb,\n         [CPPFLAGS=\"$SYBASE_INCLUDE $orig_CPPFLAGS\"\n          LIBS=\"$SYBASE_DBLIBS $SYBASE_LIBS $SYBASE_DLLS $SYBASE_NETWORK_LIBS $DL_LIBS $orig_LIBS\"\n          AC_LINK_IFELSE([AC_LANG_PROGRAM(\n             [[\n              #include <sybfront.h>\n              #include <sybdb.h>\n             ]],\n             [[\n              LOGINREC*  x_login     = 0;\n              DBPROCESS* x_dbproc    = dbopen(x_login, (char*) \"SRV_NAME\");\n             ]])],\n             [ncbi_cv_lib_sybdb=yes], [ncbi_cv_lib_sybdb=no])])\n      if test \"$ncbi_cv_lib_sybdb\" = yes; then\n         NCBI_PACKAGE(DBLib)\n         AC_DEFINE(HAVE_LIBSYBDB, 1,\n                   [Define to 1 if SYBASE DBLib is available.])\n      else\n         SYBASE_DBLIBS=\n      fi\n      # apply the Sybase patch to $NETWORK_LIBS\n      if test \"$sybase_sol8pc_patch\" = \"yes\" ; then\n         NETWORK_LIBS=\"$SYBASE_LPATH $SYBASE_NETWORK_LIBS\"\n      fi\n   else\n      NCBI_MISSING_PACKAGE(sybase)\n   fi\nfi # with_sybase != no?\n\nif test \"$with_sybase\" = no; then\n   SYBASE_PATH=\"No_Sybase\"\n   SYBASE_INCLUDE=\n   SYBASE_LIBS=\n   SYBASE_DLLS=\n   SYBASE_DBLIBS=\nfi\n\nSYBASE_LPATH=\nSYBASE_LCL_LIBPATH=\nSYBASE_LIBLIST=\nSYBASE_DLLLIST=\nSYBASE_LIBPATH=\n\n\n## FreeTDS libraries\nfreetds=\nif test \"$with_ftds\" != \"no\" ; then\n   ftds64=ftds64\n   try_local=yes\n   case \"$with_ftds\" in\n      64 | yes | '' )\n         ftds_ver=64\n         ftds64=ftds\n         ;;\n      * )\n         FTDS_PATH=$with_ftds\n         try_local=no\n         ;;\n   esac\n   : ${FTDS_CTLIBS:=\"-lct -ltds\"}\n   NCBI_RPATHIFY(FTDS_CTLIBS,   $FTDS_PATH/lib,      [ ]$FTDS_CTLIBS)\n   FTDS_INCLUDE=\"-I$FTDS_PATH/include\"\n   NCBI_LOCAL_FTDS(64)\n   if test -n \"$freetds\" ; then\n      FTDS_LIB=\"\\$(FTDS${ftds_ver}_LIB)\"\n      FTDS_LIBS=\"\\$(FTDS${ftds_ver}_LIBS)\"\n      FTDS_INCLUDE=\"\\$(FTDS${ftds_ver}_INCLUDE)\"\n      if test \"$with_ftds_renamed\" != \"no\" ; then\n          AC_DEFINE(NCBI_FTDS_RENAME_SYBDB, 1,\n                    [Rename DBLIB symbols in FTDS to avoid name clash with Sybase DBLIB.])\n      fi\n      AC_MSG_NOTICE([Using bundled FreeTDS (version $ftds_ver) from $FTDS_PATH])\n   else\n      FTDS_LIBS=\"$FTDS_CTLIBS\"\n      AC_CACHE_CHECK([for FreeTDS${FTDS_PATH:+ in $FTDS_PATH}],\n         ncbi_cv_lib_freetds,\n         [CPPFLAGS=\"$FTDS_INCLUDE $orig_CPPFLAGS\"\n          LIBS=\"$FTDS_LIBS $NETWORK_LIBS $orig_LIBS\"\n          AC_LINK_IFELSE([AC_LANG_PROGRAM(\n            [[\n             #include <sybdb.h>\n             #include <tds.h>\n            ]],\n            [[\n             LOGINREC*  x_login     = 0;\n             DBPROCESS* x_dbproc    = dbopen(x_login, (char*) \"SRV_NAME\");\n             TDSLOGIN*  x_tds_login = 0;\n             /* TDSSOCKET* x_sock      = tds_connect(x_tds_login); */\n             tds_set_timeouts(x_tds_login, 0, 0, 0);\n            ]])],\n            [ncbi_cv_lib_freetds=yes], [ncbi_cv_lib_freetds=no])])\n      if test \"$ncbi_cv_lib_freetds\" = \"no\"; then\n         # Don't panic when using partial trees lacking dbapi/driver/ftdsN.\n         NCBI_MISSING_PACKAGE(ftds)\n      fi\n   fi\nfi\nif test \"$with_ftds\" = \"no\" ; then\n   FTDS_PATH=\n   FTDS_INCLUDE=\n   FTDS_LIBS=\n   FTDS_LIB=\n   FTDS64_INCLUDE=\n   FTDS64_LIBS=\n   FTDS64_LIB=\n   FTDS64_CTLIB_INCLUDE=\n   FTDS64_CTLIB_LIBS=\n   FTDS64_CTLIB_LIB=\n   freetds=\nelse\n   AC_DEFINE(HAVE_LIBFTDS, 1,\n             [Define to 1 if FreeTDS libraries are available.])\n   NCBI_PACKAGE(FreeTDS)\nfi\nAC_SUBST(FTDS64_INCLUDE)\nAC_SUBST(FTDS64_LIBS)\nAC_SUBST(FTDS64_LIB)\nAC_SUBST(FTDS64_CTLIB_INCLUDE)\nAC_SUBST(FTDS64_CTLIB_LIBS)\nAC_SUBST(FTDS64_CTLIB_LIB)\nAC_SUBST(FTDS_INCLUDE)\nAC_SUBST(FTDS_LIBS)\nAC_SUBST(FTDS_LIB)\nAC_SUBST(freetds)\nAC_SUBST(ftds64)\n\n\n## MySQL\nif test \"$with_mysql\" != \"no\" ; then\n   case \"$with_mysql\" in\n      yes | \"\" ) ;;\n      *        ) MYSQL_PATH=$with_mysql ;;\n   esac\n   : ${MYSQL_BINPATH=$MYSQL_PATH/bin}\n   AC_PATH_PROG(mysql_config, mysql_config, [], [$MYSQL_BINPATH:$PATH])\n   if test -n \"$mysql_config\" ; then\n      : ${MYSQL_BINPATH=`dirname $mysql_config`}\n      # Kill off single quotes, due to later requoting\n      : ${MYSQL_INCLUDE=`$mysql_config --include | tr -d \\'`}\n      NCBI_RPATHIFY_OUTPUT_COND(MYSQL_LIBS, $mysql_config --libs${mt_sfx:+_r},\n         [s/'//g; $no_usr_lib])\n      AC_CACHE_CHECK([whether MySQL works], ncbi_cv_lib_mysql,\n         [CPPFLAGS=\"$MYSQL_INCLUDE $orig_CPPFLAGS\"\n          LIBS=\"$MYSQL_LIBS $orig_LIBS\"\n          AC_LINK_IFELSE([AC_LANG_PROGRAM(\n          [[#include <mysql.h>]],\n          [[MYSQL *p;  p = mysql_init(p);]])],\n          [ncbi_cv_lib_mysql=yes], [ncbi_cv_lib_mysql=no])])\n      if test \"$ncbi_cv_lib_mysql\" = no; then\n         NCBI_MISSING_PACKAGE(mysql)\n      fi\n   else\n      NCBI_MISSING_PACKAGE(mysql)\n   fi\nfi\nif test \"$with_mysql\" = \"no\" ; then\n   MYSQL_PATH=\"No_MYSQL\"\n   MYSQL_INCLUDE=\n   MYSQL_LIBS=\nelse\n   NCBI_PACKAGE(MySQL)\n   AC_DEFINE(HAVE_MYSQL, 1, [Define to 1 if MySQL is available.])\nfi\n\n\n## Berkeley DB library\nif test \"$with_bdb\" != \"no\" ; then\n   case \"$with_bdb\" in\n      yes | \"\" )\n         ;;\n      */*)\n          BERKELEYDB_PATH=$with_bdb\n          AS_UNSET(BERKELEYDB_INCLUDE)\n          AS_UNSET(BERKELEYDB_LIBPATH)\n          AS_UNSET(BERKELEYDB_LIBS)\n          ;;\n      *)\n          BERKELEYDB_PATH=$NCBI/BerkeleyDB-${with_bdb}\n          AS_UNSET(BERKELEYDB_INCLUDE)\n          AS_UNSET(BERKELEYDB_LIBPATH)\n          AS_UNSET(BERKELEYDB_LIBS)\n          ;;\n   esac\n   if test -d \"$BERKELEYDB_PATH\"; then\n      NCBI_FIX_DIR(BERKELEYDB_PATH)\n      : ${BERKELEYDB_INCLUDE:=\"-I$BERKELEYDB_PATH/include\"}\n   fi\n   if test -z \"${BERKELEYDB_LIBPATH}\"; then\n      for d in \"${compiler_vpfx}${DEBUG_SFX}\" \"${compiler_pfx}${DEBUG_SFX}\" \\\n               \"${DEBUG_SFX}\" lib; do\n         for sfx in \"$mt_sfx$bit64_sfx\" \"$bit64_sfx$mt_sfx\" \"$bit64_sfx\" \\\n                    \"$mt_sfx\" \"\"; do\n            BERKELEYDB_LIBPATH=${BERKELEYDB_PATH}/$d$sfx\n            test -d \"${BERKELEYDB_LIBPATH}\"  &&  break\n         done\n         test -d \"${BERKELEYDB_LIBPATH}\"  &&  break\n      done\n   fi\n   if test -d \"$BERKELEYDB_LIBPATH\"; then\n      NCBI_FIX_DIR(BERKELEYDB_LIBPATH)\n      NCBI_RPATHIFY_COND(BERKELEYDB_LIBS:, ${BERKELEYDB_LIBPATH}, [ -ldb])\n   else\n      : ${BERKELEYDB_LIBS:=\"-ldb\"}\n   fi\n   if test -f \"${BERKELEYDB_LIBPATH}/libdb-static.a\"; then\n      BERKELEYDB_STATIC_LIBS=\"-L${BERKELEYDB_LIBPATH} -ldb-static\"\n   else\n      BERKELEYDB_STATIC_LIBS=${BERKELEYDB_LIBS}\n   fi\n   AC_CACHE_CHECK(\n      [for Berkeley DB libraries${BERKELEYDB_PATH:+ in $BERKELEYDB_PATH}],\n      ncbi_cv_lib_berkeley_db,\n      [CPPFLAGS=\"$BERKELEYDB_INCLUDE $orig_CPPFLAGS\"\n       LIBS=\"$BERKELEYDB_LIBS $orig_LIBS\"\n       AC_LINK_IFELSE([AC_LANG_PROGRAM(\n          [[#include <db.h>]],\n          [[ DB* dbp;  db_create(&dbp, NULL, 0);  dbp->app_private = 0; ]])],\n          [ncbi_cv_lib_berkeley_db=yes], [ncbi_cv_lib_berkeley_db=no])])\n   if test \"$ncbi_cv_lib_berkeley_db\" = \"no\"; then\n      NCBI_MISSING_PACKAGE(bdb)\n   else\n      AC_CACHE_CHECK([Berkeley DB version (4.3 or newer required)],\n         ncbi_cv_lib_berkeley_db_version,\n         [AC_LANG_CONFTEST([AC_LANG_SOURCE([[\n#include <db.h>\nncbi_cv_lib_berkeley_db_version=DB_VERSION_MAJOR.DB_VERSION_MINOR.DB_VERSION_PATCH\n          ]])])\n          eval \"$ac_cpp $BERKELEYDB_INCLUDE conftest.$ac_ext\" \\\n             2>&AS_MESSAGE_LOG_FD | grep '^ncbi_cv_' \\\n             | tr -d \"$wschars\" > conftest.sh\n          . ./conftest.sh\n          rm -f contest*\n         ])\n      case \"$ncbi_cv_lib_berkeley_db_version\" in\n         1.* | 2.* | 3.* | 4.[[0-2]].* )\n            AC_MSG_WARN(\n               [Your Berkeley DB version is too old to use.  (Needed >= 4.3.)])\n            if test -n \"$with_bdb\"; then\n               AC_MSG_ERROR([--with-bdb:  Berkeley DB library is too old])\n            fi\n            with_bdb=no\n            ;;\n         4.[[3-6]].* ) ;;\n         * )\n            AC_MSG_WARN(\n               [Untested Berkeley DB version; may prove incompatible.])\n            AC_MSG_WARN(\n               [If so, please re-run this script with the flag --without-bdb.])\n            ;;\n      esac\n   fi\nfi\nif test \"$with_bdb\" = \"no\" ; then\n   BERKELEYDB_PATH=\"No_BerkeleyDB\"\n   BERKELEYDB_INCLUDE=\n   BERKELEYDB_LIBS=\n   BERKELEYDB_STATIC_LIBS=\n   BERKELEYDB_CXX_LIBS=\n   BERKELEYDB_CXX_STATIC_LIBS=\nelse\n   NCBI_PACKAGE(BerkeleyDB)\n   AC_DEFINE(HAVE_BERKELEY_DB, 1,\n             [Define to 1 if Berkeley DB libraries are available.])\n   if test -d \"$BERKELEYDB_LIBPATH\"; then\n      NCBI_RPATHIFY_COND(BERKELEYDB_CXX_LIBS:, ${BERKELEYDB_LIBPATH},\n          [ -ldb_cxx -ldb])\n   else\n      : ${BERKELEYDB_CXX_LIBS:=\"-ldb_cxx -ldb\"}\n   fi\n   if test -f \"${BERKELEYDB_LIBPATH}/libdb_cxx-static.a\"; then\n      BERKELEYDB_CXX_STATIC_LIBS=\"-L${BERKELEYDB_LIBPATH} -ldb_cxx-static -ldb-static\"\n   else\n      BERKELEYDB_CXX_STATIC_LIBS=${BERKELEYDB_CXX_LIBS}\n   fi\n   AC_CACHE_CHECK([for native Berkeley DB C++ wrappers (optional)],\n      ncbi_cv_lib_berkeley_db_cxx,\n      [CPPFLAGS=\"$BERKELEYDB_INCLUDE $orig_CPPFLAGS\"\n       LIBS=\"$BERKELEYDB_CXX_LIBS $orig_LIBS\"\n       AC_LINK_IFELSE([AC_LANG_PROGRAM(\n          [[#include <db_cxx.h>]],\n          [[DbEnv env(0);  Db db(&env, 0);  db.set_app_private(NULL);]])],\n          [ncbi_cv_lib_berkeley_db_cxx=yes],\n          [ncbi_cv_lib_berkeley_db_cxx=no])])\n   if test \"$ncbi_cv_lib_berkeley_db_cxx\" = \"yes\"; then\n      NCBI_PACKAGE(BerkeleyDB++)\n      AC_DEFINE(HAVE_BERKELEY_DB_CXX, 1,\n                [Define to 1 if the Berkeley `db_cxx' library is available.])\n   else\n      BERKELEYDB_CXX_LIBS=\n      BERKELEYDB_CXX_STATIC_LIBS=\n   fi\nfi\n\n\n## ODBC\ncase \"$with_odbc\" in\n   yes | \"\"   ) : ${ODBC_PATH:=dbapi/driver/odbc/unix_odbc} ;;\n   internal | no ) ODBC_PATH=dbapi/driver/odbc/unix_odbc       ;;\n   *          ) ODBC_PATH=$with_odbc                        ;;\nesac\n\ncase \"$ODBC_PATH\" in\n dbapi/* ) ;;\n *)\n   ODBC_INCLUDE=\"-I$ODBC_PATH/include\"\n   ODBC_LIBPATH=\"${ODBC_PATH}/lib\"\n   NCBI_RPATHIFY(ODBC_LIBS, ${ODBC_LIBPATH}, [ -lodbc -lodbcinst])\n   CPPFLAGS=\"$ODBC_INCLUDE $orig_CPPFLAGS\"\n   LIBS=\"$ODBC_LIBS $orig_LIBS\"\n   AC_CACHE_CHECK([for ODBC libraries${ODBC_PATH:+ in $ODBC_PATH}],\n      ncbi_cv_lib_odbc,\n      [AC_LINK_IFELSE([AC_LANG_PROGRAM(\n          [[#include <sql.h>]],\n          [[SQLHDBC hdbc;  SQLCHAR* cp = (SQLCHAR*) \"x\";\n            SQLRETURN x = SQLConnect(hdbc, cp, 1, cp, 2, cp, 3);]])],\n          [ncbi_cv_lib_odbc=yes], [ncbi_cv_lib_odbc=no])])\n   if test \"$ncbi_cv_lib_odbc\" = \"no\"; then\n      dnl ODBC_PATH=dbapi/driver/odbc/unix_odbc\n      dnl AC_MSG_WARN([Falling back to internal FreeTDS-specific ODBC implementation.])\n      NCBI_MISSING_PACKAGE(odbc)\n   else\n      # odbcss.h isn't self-contained :-/\n      AC_CHECK_HEADERS(odbcss.h, [], [], [#include <sql.h>])\n\n      AC_CHECK_FUNCS(SQLGetPrivateProfileString)\n      AC_CHECK_TYPES(SQLLEN,,,[#include <sqltypes.h>])\n\n      AC_CACHE_CHECK([whether SQLColAttribute's last argument is an SQLLEN *],\n         ncbi_cv_func_sqlcolattribute_sqllen,\n         [AC_COMPILE_IFELSE([AC_LANG_PROGRAM(\n            [[#include <sql.h>>\n              SQLRETURN SQL_API SQLColAttribute\n                (SQLHSTMT sh, SQLUSMALLINT cn, SQLUSMALLINT fi, SQLPOINTER ca,\n                 SQLSMALLINT bl, SQLSMALLINT *sl, SQLLEN *na);]],\n            [[]])],\n            ncbi_cv_func_sqlcolattribute_sqllen=yes,\n            ncbi_cv_func_sqlcolattribute_sqllen=no)])\n      if test $ncbi_cv_func_sqlcolattribute_sqllen = yes; then\n         AC_DEFINE(NCBI_SQLCOLATTRIBUTE_SQLLEN, 1,\n            [Define to 1 if SQLColAttribute's last argument is an SQLLEN *])\n      fi\n   fi\n   ;;\nesac\n\ncase \"$ODBC_PATH\" in\n dbapi/*)\n   # ODBC_PATH=\"No_ODBC\"\n   # Point to a local copy of unixODBC's headers, required by FreeTDS 0.64+.\n   ODBC_INCLUDE=\"-I\\$(includedir)/$ODBC_PATH -I\\$(includedir0)/$ODBC_PATH\"\n   ODBC_LIBS=\n   dnl AC_DEFINE(HAVE_SQLGETPRIVATEPROFILESTRING, 1)\n   AC_DEFINE(HAVE_SQLLEN, 1)\n   ;;\n *)\n   NCBI_PACKAGE(ODBC)\n   AC_DEFINE(HAVE_ODBC, 1, [Define to 1 if ODBC libraries are available.])\n   ;;\nesac\n\n## Python\nif test \"$with_python\" != \"no\" ; then\n   case \"$with_python\" in\n      yes | \"\" ) ;;\n      */*      ) PYTHON_PATH=$with_python ;;\n   esac\n   NCBI_CHECK_PYTHON()\n   NCBI_CHECK_PYTHON(2.3)\n   : ${PYTHON_PATH:=\"/usr/local/python-2.4.4\"}\n   NCBI_CHECK_PYTHON(2.4)\n   NCBI_CHECK_PYTHON(2.5)\n   if test \"$ncbi_cv_lib_python\" = \"no\"; then\n      # Favor python 2.4 as the only version configure historically\n      # recognized, but otherwise prefer newer versions.\n      if test \"$ncbi_cv_lib_python24\" = \"yes\"; then\n         PYTHON_INCLUDE=$PYTHON24_INCLUDE\n         PYTHON_LIBS=$PYTHON24_LIBS\n      elif test \"$ncbi_cv_lib_python25\" = \"yes\"; then\n         PYTHON_INCLUDE=$PYTHON25_INCLUDE\n         PYTHON_LIBS=$PYTHON25_LIBS\n      elif test \"$ncbi_cv_lib_python23\" = \"yes\"; then\n         PYTHON_INCLUDE=$PYTHON23_INCLUDE\n         PYTHON_LIBS=$PYTHON23_LIBS\n      fi\n      if test -n \"$PYTHON_LIBS\"; then\n         NCBI_PACKAGE(PYTHON)\n         AC_DEFINE(HAVE_PYTHON, 1)\n      else\n         NCBI_MISSING_PACKAGE(python)\n      fi\n   fi\nfi\n\n## Perl\nif test \"$with_perl\" != \"no\" ; then\n   case \"$with_perl\" in\n      yes | \"\" ) ;;\n      */*      ) PERL_PATH=$with_perl ;;\n   esac\n   AC_PATH_PROG(PERL, perl, [], [$PERL_PATH/bin:$PATH])\n   if test -x \"$PERL\"; then\n      PERL_ARCHLIB=`$PERL -MConfig -e 'print \\$Config{archlibexp};'`\n      PERL_FLAGS=`$PERL -MConfig -e 'print join \" \", grep /^-[[DI]]/, split /\\\\s+/, \\$Config{cppflags};'`\n      PERL_INCLUDE=\"-I$PERL_ARCHLIB/CORE $PERL_FLAGS\"\n      PERL_DEPS=`$PERL -MConfig -e 'print \\$Config{libs};'`\n      NCBI_RPATHIFY(PERL_LIBS, $PERL_ARCHLIB/CORE, [ -lperl $PERL_DEPS])\n      CPPFLAGS=\"$PERL_INCLUDE $orig_CPPFLAGS\"\n      LIBS=\"$PERL_LIBS $orig_LIBS\"\n      AC_CACHE_CHECK([for usable Perl libraries], [ncbi_cv_lib_perl],\n         [AC_LINK_IFELSE([AC_LANG_PROGRAM(\n                [[\n#include <EXTERN.h>\n#include <perl.h>]],\n                [[PerlInterpreter* p = perl_alloc();]])],\n             [ncbi_cv_lib_perl=yes], [ncbi_cv_lib_perl=no])])\n   fi\n   if test \"$ncbi_cv_lib_perl\" = yes; then\n      NCBI_PACKAGE(PERL)\n      dnl AC_DEFINE(HAVE_PERL, 1)\n   else\n      NCBI_MISSING_PACKAGE(perl)\n      PERL_INCLUDE=\n      PERL_LIBS=\n   fi\nfi\n\n## Java\nif test \"${with_jni-no}\" != \"no\"; then\n   case \"$with_jni:${JAVAC+set}\" in\n      yes: | : )\n         if test -d \"$JAVA_HOME\"; then\n            JAVAC=$JAVA_HOME/bin/javac\n         else\n            JAVAC=javac\n         fi\n         ;;\n      * )\n         JAVAC=$with_jni/bin/javac\n         ;;\n   esac\n   AX_JNI_INCLUDE_DIR\n   JDK_INCLUDE=''\n   sep=''\n   for x in $JNI_INCLUDE_DIRS; do\n      JDK_INCLUDE=$JDK_INCLUDE$sep-I$x\n      sep=' '\n   done\n   AC_MSG_NOTICE([setting JDK_INCLUDE = $JDK_INCLUDE])\n   CPPFLAGS=\"$JDK_INCLUDE $orig_CPPFLAGS\"\n   AC_CHECK_HEADER(jni.h,\n      [AC_DEFINE(NCBI_JNI, 1,\n          [Define to 1 if building Java Native Interface bindings.])\n       NCBI_FEATURE([JDK Ncbi-JNI])\n       JDK_PATH=$_JTOPDIR\n       ncbi_java=ncbi_java],\n      [JDK_INCLUDE=''\n       JDK_PATH=''\n       ncbi_java=''])\nfi\n\n\n## Boost\nif test \"$with_boost\" != \"no\"; then\n   if test \"${with_boost-yes}\" != yes; then\n      BOOST_PATH=$with_boost\n   fi\n   if test -d \"$BOOST_PATH\"; then\n      NCBI_FIX_DIR(BOOST_PATH)\n      : ${BOOST_INCLUDE=-I$BOOST_PATH/include}\n   fi\n   BOOST_LIBPATH_=$BOOST_PATH/lib\n   NCBI_RPATHIFY_COND(BOOST_LIBPATH, $BOOST_LIBPATH_)\n   test -d \"$BOOST_PATH\"  ||  BOOST_LIBPATH_=/usr/lib\n   boost_path_digits=`basename $BOOST_PATH | sed -e 's/-ncbi[[0-9]]*$//; s/.0$//' | tr -cd 0123456789`\n   if test -n \"$boost_path_digits\"; then\n      boost_version_digits=`echo $ncbi_cv_lib_boost_version | sed -e 's/.0$//' | tr -cd 0123456789`\n      if test $boost_path_digits != \"$boost_version_digits\"; then\n         # presumably stale, particularly if boost_version WASN'T cached;\n         # uncache all relevant settings\n         AS_UNSET(ncbi_cv_lib_boost_version)\n         AS_UNSET(ncbi_cv_lib_boost_regex)\n         AS_UNSET(ncbi_cv_lib_boost_spirit)\n         AS_UNSET(ncbi_cv_lib_boost_system)\n         AS_UNSET(ncbi_cv_lib_boost_test)\n         AS_UNSET(ncbi_cv_lib_boost_thread)\n      fi\n   fi\n      AC_CACHE_CHECK([Boost version],\n         ncbi_cv_lib_boost_version,\n         [AC_LANG_CONFTEST([AC_LANG_SOURCE([[\n#include <boost/version.hpp>\nncbi_cv_lib_boost_version=BOOST_LIB_VERSION\n          ]])])\n          eval \"$ac_cpp $BOOST_INCLUDE conftest.$ac_ext\" \\\n             2>&AS_MESSAGE_LOG_FD | grep '^ncbi_cv_' \\\n             | tr -d \"$wschars\" > conftest.sh\n          . ./conftest.sh\n          rm -f contest*\n         ])\n   if test -d `echo $BOOST_INCLUDE | sed -e 's/^-I//'`/boost-${ncbi_cv_lib_boost_version}/boost; then\n      BOOST_INCLUDE=$BOOST_INCLUDE/boost-${ncbi_cv_lib_boost_version}\n   fi\n   case \"$compiler:$ncbi_compiler_ver\" in\n      MIPSpro*)\n         BOOST_INCLUDE=\"$BOOST_INCLUDE $BOOST_INCLUDE/boost/compatibility/cpp_c_headers\"\n         ;;\n      WorkShop*)\n         # Boost.Test's macros yield a *lot* of spurious \"should not initialize\n         # a non-const reference with a temporary\" warnings, to the point of\n         # overwhelming the compiler in some cases; turn them off altogether\n         # when using Boost at all.\n         BOOST_INCLUDE=\"$BOOST_INCLUDE -erroff=reftotemp\"\n         ;;\n      GCC*:4[[7-9]]* | GCC*:5*)\n         # Some portions of Boost also have a lot of \"unused\" typedefs\n         # from concept checking.\n         BOOST_INCLUDE=\"$BOOST_INCLUDE -Wno-unused-local-typedefs\"\n         ;;\n   esac\n   case \"$ncbi_cv_lib_boost_version\" in\n      0_* | 1_[[0-9]] | 1_[[0-9]]_* | 1_[[0-2]][[0-9]] | 1_[[0-2]][[0-9]]_* ) ;;\n      1_3[[0-4]] | 1_3[[0-4]]_* )\n         AC_MSG_WARN(\n            [Your Boost version is too old to use.  (Needed >= 1.35.)])\n         if test -n \"$with_boost\"; then\n            AC_MSG_ERROR([--with-boost:  Boost library is too old])\n         fi\n         with_boost=no\n         ;;\n      1_3[[5-9]] | 1_3[[5-9]]_* | 1_4* | 1_5[[0-3]] | 1_5[[0-3]]_* ) ;;\n      '' ) with_boost=no ;;\n      * )\n         AC_MSG_WARN(\n            [Untested Boost version; may prove incompatible.])\n         AC_MSG_WARN(\n            [If so, please re-run this script with the flag --without-boost.])\n         ;;\n   esac\n   AC_MSG_CHECKING([for Boost library name tag])\n   case \"$with_boost_tag\" in\n      yes | \"\" )\n         case \"$host_os:$ncbi_compiler\" in\n            darwin*:GCC) BOOST_TAG=\"-xgcc\" ;;\n            *:GCC)       BOOST_TAG=\"-gcc\" ;;\n            *:KCC)       BOOST_TAG=\"-kcc\" ;;\n            linux*:ICC)  BOOST_TAG=\"-il\"  ;;\n            *:WORKSHOP)  BOOST_TAG=\"-sw\"  ;;\n            *:MIPSPRO)   BOOST_TAG=\"-mp\"  ;;\n            *:VISUALAGE) BOOST_TAG=\"-xlc\" ;;\n            *:COMPAQ)    BOOST_TAG=\"-tru\" ;;\n            *:MSVC)      BOOST_TAG=\"-vc\"  ;;\n         esac\n         case \"$BOOST_TAG\" in\n            -*gcc|-il ) boost_comp_vers=`echo $compiler_version | cut -c1-2` ;;\n            *         ) boost_comp_vers='' ;;\n         esac\n         case \"$llvm_version:$ac_cv_have_decl__LIBCPP_VERSION\" in\n            *clang*:yes )\n                case \"$host_os\" in\n                   darwin*) BOOST_TAG=\"-clang-darwin\" ;;\n                   *)       BOOST_TAG=\"-clang\" ;;\n                esac\n                boost_comp_vers=`echo $signature_compiler_version | cut -c1-2`\n            ;;\n         esac\n         test \"$with_mt\"    = \"yes\"  &&  BOOST_MT=-mt\n         test \"$with_debug\" = \"yes\"  &&  BOOST_D=-d\n         test \"$bit64_sfx\"  = \"64\"   &&  BOOST_64=-64\n         found=no\n         for base in \"$BOOST_TAG$boost_comp_vers\" \"$BOOST_TAG\" ''; do\n           for bvers in \"-$ncbi_cv_lib_boost_version\" ''; do\n             for b64 in $BOOST_64 ''; do\n               for bmt in \"$BOOST_MT\" '-mt' ''; do\n                 for bd in \"$BOOST_D\" '' '-d'; do\n                   bsfx=$cvers$bmt$bd$bvers$b64\n                   if ls $BOOST_LIBPATH_/libboost*$base$bsfx.* >/dev/null 2>&1;\n                   then\n                     found=yes\n                     break\n                   fi\n                 done\n                 test \"$found\" = yes  &&  break\n               done\n               test \"$found\" = yes  &&  break\n             done\n             test \"$found\" = yes  &&  break\n           done\n           test \"$found\" = yes  &&  break\n         done\n\n         if test \"$found\" = no; then\n            base=$BOOST_TAG\n            cvers=$boost_comp_vers\n            bvers=-$ncbi_cv_lib_boost_version\n            b64=$BOOST_64\n            bmt=$BOOST_MT\n            bd=$BOOST_D\n            bsfx=$cvers$bmt$bd$bvers$b64\n         fi\n\n         BOOST_TAG=$base$bsfx\n         AC_MSG_RESULT([$BOOST_TAG (autodetected)])\n         ;;\n      no )\n         BOOST_TAG=\"\"\n         AC_MSG_RESULT([none (by explicit request)])\n         ;;\n      *)\n         BOOST_TAG=$with_boost_tag\n         AC_MSG_RESULT([$BOOST_TAG (by explicit request)])\n         ;;\n   esac\n\n   test \"$with_mt\" = yes  || \\\n      BOOST_INCLUDE=\"$BOOST_INCLUDE -DBOOST_DISABLE_THREADS\"\n\n   BOOST_REGEX_LIBS=-lboost_regex${BOOST_TAG}\n   if test -f \"$BOOST_LIBPATH_/libboost_regex${BOOST_TAG}-static.a\"; then\n       BOOST_REGEX_STATIC_LIBS=-lboost_regex${BOOST_TAG}-static\n   else\n       BOOST_REGEX_STATIC_LIBS=$BOOST_REGEX_LIBS\n   fi\n\n   in_path=${BOOST_PATH:+ in $BOOST_PATH}\n\n   AC_CACHE_CHECK([for Boost.Regex$in_path], ncbi_cv_lib_boost_regex,\n      CPPFLAGS=\"$BOOST_INCLUDE $orig_CPPFLAGS\"\n      LIBS=\"$BOOST_LIBPATH $BOOST_REGEX_LIBS $RT_LIBS $orig_LIBS\"\n      [AC_LINK_IFELSE(\n          [AC_LANG_PROGRAM([[#include <boost/regex.hpp>]],\n              [[throw boost::regex_error(boost::regex_constants::error_stack);]])],\n          [ncbi_cv_lib_boost_regex=yes], [ncbi_cv_lib_boost_regex=no])])\n\n   AC_CACHE_CHECK([for Boost.Spirit$in_path], ncbi_cv_lib_boost_spirit,\n      CPPFLAGS=\"$BOOST_INCLUDE $orig_CPPFLAGS\"\n      LIBS=\"$RT_LIBS $orig_LIBS\"\n      [AC_LINK_IFELSE(\n          [AC_LANG_PROGRAM([[#include <boost/spirit.hpp>]],\n              [[boost::spirit::parse(\"123\", boost::spirit::int_p);]])],\n          [ncbi_cv_lib_boost_spirit=yes], [ncbi_cv_lib_boost_spirit=no])])\n\n   BOOST_SYSTEM_LIBS=-lboost_system${BOOST_TAG}\n   if test -f \"$BOOST_LIBPATH_/libboost_system${BOOST_TAG}-static.a\"; then\n       BOOST_SYSTEM_STATIC_LIBS=-lboost_system${BOOST_TAG}-static\n   else\n       BOOST_SYSTEM_STATIC_LIBS=$BOOST_SYSTEM_LIBS\n   fi\n\n   AC_CACHE_CHECK([for Boost.System$in_path], ncbi_cv_lib_boost_system,\n      CPPFLAGS=\"$BOOST_INCLUDE $orig_CPPFLAGS\"\n      LIBS=\"$BOOST_LIBPATH $BOOST_SYSTEM_LIBS $RT_LIBS $orig_LIBS\"\n      [AC_LINK_IFELSE(\n          [AC_LANG_PROGRAM([[#include <boost/system/error_code.hpp>]],\n              [[const char * s = boost::system::system_category().name();]])],\n          [ncbi_cv_lib_boost_system=yes],\n          [ncbi_cv_lib_boost_system=no\n           BOOST_SYSTEM_LIBS=\n           BOOST_SYSTEM_STATIC_LIBS=])])\n\n   boost_fs_lib=-lboost_filesystem${BOOST_TAG}\n   if test -f \"$BOOST_LIBPATH_/libboost_filesystem${BOOST_TAG}-static.a\"; then\n       boost_fs_static_lib=-lboost_filesystem${BOOST_TAG}-static\n   else\n       boost_fs_static_lib=$boost_fs_lib\n   fi\n   BOOST_FILESYSTEM_LIBS=\"$boost_fs_lib $BOOST_SYSTEM_LIBS\"\n   BOOST_FILESYSTEM_STATIC_LIBS=\"$boost_fs_static_lib $BOOST_SYSTEM_STATIC_LIBS\"\n\n   AC_CACHE_CHECK([for Boost.Filesystem$in_path], ncbi_cv_lib_boost_filesystem,\n      CPPFLAGS=\"$BOOST_INCLUDE $orig_CPPFLAGS\"\n      LIBS=\"$BOOST_LIBPATH $BOOST_FILESYSTEM_LIBS $RT_LIBS $orig_LIBS\"\n      [AC_LINK_IFELSE(\n          [AC_LANG_PROGRAM([[#include <boost/filesystem.hpp>]],\n              [[return boost::filesystem::portable_name(\"foo\");]])],\n          [ncbi_cv_lib_boost_filesystem=yes],\n          [ncbi_cv_lib_boost_filesystem=no])])\n\n   BOOST_IOSTREAMS_LIBS=-lboost_iostreams${BOOST_TAG}\n   if test -f \"$BOOST_LIBPATH_/libboost_iostreams${BOOST_TAG}-static.a\"; then\n       BOOST_IOSTREAMS_STATIC_LIBS=-lboost_iostreams${BOOST_TAG}-static\n   else\n       BOOST_IOSTREAMS_STATIC_LIBS=$BOOST_IOSTREAMS_LIBS\n   fi\n\n   AC_CACHE_CHECK([for Boost.Iostreams$in_path], ncbi_cv_lib_boost_iostreams,\n      CPPFLAGS=\"$BOOST_INCLUDE $orig_CPPFLAGS\"\n      LIBS=\"$BOOST_LIBPATH $BOOST_IOSTREAMS_LIBS $Z_LIBS $BZ2_LIBS $orig_LIBS\"\n      [AC_LINK_IFELSE(\n          [AC_LANG_PROGRAM([[#include <boost/iostreams/device/file_descriptor.hpp>]],\n              [[boost::iostreams::file_descriptor fd;]])],\n          [ncbi_cv_lib_boost_iostreams=yes],\n          [ncbi_cv_lib_boost_iostreams=no])])\n\n   BOOST_PROGRAM_OPTIONS_LIBS=-lboost_program_options${BOOST_TAG}\n   if test -f \"$BOOST_LIBPATH_/libboost_program_options${BOOST_TAG}-static.a\"; then\n       BOOST_PROGRAM_OPTIONS_STATIC_LIBS=-lboost_program_options${BOOST_TAG}-static\n   else\n       BOOST_PROGRAM_OPTIONS_STATIC_LIBS=$BOOST_PROGRAM_OPTIONS_LIBS\n   fi\n\n   AC_CACHE_CHECK([for Boost.Program-Options$in_path],\n      ncbi_cv_lib_boost_program_options,\n      CPPFLAGS=\"$BOOST_INCLUDE $orig_CPPFLAGS\"\n      LIBS=\"$BOOST_LIBPATH $BOOST_PROGRAM_OPTIONS_LIBS $orig_LIBS\"\n      [AC_LINK_IFELSE(\n          [AC_LANG_PROGRAM([[#include <boost/program_options.hpp>]],\n              [[boost::program_options::option_description od;]])],\n          [ncbi_cv_lib_boost_program_options=yes],\n          [ncbi_cv_lib_boost_program_options=no])])\n\n   BOOST_TEST_PEM_LIBS=-lboost_prg_exec_monitor${BOOST_TAG}\n   if test -f \"$BOOST_LIBPATH_/libboost_prg_exec_monitor${BOOST_TAG}-static.a\"; then\n       BOOST_TEST_PEM_STATIC_LIBS=-lboost_prg_exec_monitor${BOOST_TAG}-static\n   else\n       BOOST_TEST_PEM_STATIC_LIBS=$BOOST_TEST_PEM_LIBS\n   fi\n\n   BOOST_TEST_TEM_LIBS=-lboost_test_exec_monitor${BOOST_TAG}\n   if test -f \"$BOOST_LIBPATH_/libboost_test_exec_monitor${BOOST_TAG}-static.a\"; then\n       BOOST_TEST_TEM_STATIC_LIBS=-lboost_test_exec_monitor${BOOST_TAG}-static\n   else\n       BOOST_TEST_TEM_STATIC_LIBS=$BOOST_TEST_TEM_LIBS\n   fi\n\n   BOOST_TEST_UTF_LIBS=-lboost_unit_test_framework${BOOST_TAG}\n   if test -f \"$BOOST_LIBPATH_/libboost_unit_test_framework${BOOST_TAG}-static.a\"; then\n       BOOST_TEST_UTF_STATIC_LIBS=-lboost_unit_test_framework${BOOST_TAG}-static\n   else\n       BOOST_TEST_UTF_STATIC_LIBS=$BOOST_TEST_UTF_LIBS\n   dnl AC_DEFINE([NCBI_BOOST_TEST_DLL], 1,\n   dnl   [Define to 1 if unable to locate an appropriate\n   dnl    libboost_unit_test_framework${BOOST_TAG}-static.a.])\n   fi\n\n   BOOST_TEST_PEM_LIBS=$BOOST_TEST_PEM_STATIC_LIBS\n   BOOST_TEST_TEM_LIBS=$BOOST_TEST_TEM_STATIC_LIBS\n   BOOST_TEST_UTF_LIBS=$BOOST_TEST_UTF_STATIC_LIBS\n\n   AC_CACHE_CHECK([for Boost.Test$in_path], ncbi_cv_lib_boost_test,\n      CPPFLAGS=\"$BOOST_INCLUDE $orig_CPPFLAGS\"\n      LIBS=\"$RT_LIBS $orig_LIBS\"\n      found=\n      for mode in included external; do\n        if test \"$mode\" = external; then\n          CPPFLAGS=\"-DNCBI_BOOST_NOT_INCLUDED $CPPFLAGS\"\n          LIBS=\"$BOOST_LIBPATH $BOOST_TEST_UTF_LIBS $LIBS\"\n        fi\n        [AC_LINK_IFELSE(\n           [AC_LANG_SOURCE(\n              [[#ifdef NCBI_BOOST_NOT_INCLUDED\n                #  include <boost/test/unit_test.hpp>\n                #else\n                #  include <boost/test/included/unit_test.hpp>\n                #endif\n                using boost::unit_test::test_suite;\n                static void s_Test1(void) { BOOST_CHECK(1 == 1); }\n                test_suite* init_unit_test_suite(int, char*[])\n                {\n                    test_suite* test = BOOST_TEST_SUITE(\"foo\");\n                    test->add(BOOST_TEST_CASE(&s_Test1), 0);\n                    return test;\n                }]])],\n           [found=\"$found:$mode\"])]\n      done\n      [case \"$found\" in\n        :included:external ) ncbi_cv_lib_boost_test=yes           ;;\n        :included          ) ncbi_cv_lib_boost_test=included-only ;;\n        :external          ) ncbi_cv_lib_boost_test=external-only ;;\n        ''                 ) ncbi_cv_lib_boost_test=no            ;;\n      esac])\n\n   BOOST_THREAD_LIBS=\"-lboost_thread${BOOST_TAG} $BOOST_SYSTEM_LIBS\"\n   if test -f \"$BOOST_LIBPATH_/libboost_thread${BOOST_TAG}-static.a\"; then\n       BOOST_THREAD_STATIC_LIBS=\"-lboost_thread${BOOST_TAG}-static $BOOST_SYSTEM_STATIC_LIBS\"\n   else\n       BOOST_THREAD_STATIC_LIBS=$BOOST_THREAD_LIBS\n   fi\n\n   AC_CACHE_CHECK([for Boost.Threads$in_path], ncbi_cv_lib_boost_thread,\n      CPPFLAGS=\"$BOOST_INCLUDE $orig_CPPFLAGS\"\n      LIBS=\"$BOOST_LIBPATH $BOOST_THREAD_LIBS $RT_LIBS $orig_LIBS\"\n      [AC_LINK_IFELSE(\n          [AC_LANG_PROGRAM([[#include <boost/thread.hpp>]],\n              [[boost::mutex m; boost::mutex::scoped_lock l(m);]])],\n          [ncbi_cv_lib_boost_thread=yes], [ncbi_cv_lib_boost_thread=no])])\nelse\n   BOOST_INCLUDE=\n   BOOST_LIBPATH=\n   BOOST_TAG=\n   ncbi_cv_lib_boost_filesystem=no\n   ncbi_cv_lib_boost_iostreams=no\n   ncbi_cv_lib_boost_program_options=no\n   ncbi_cv_lib_boost_regex=no\n   ncbi_cv_lib_boost_spirit=no\n   ncbi_cv_lib_boost_system=no\n   ncbi_cv_lib_boost_test=no\n   ncbi_cv_lib_boost_thread=no\nfi\n\nif test \"$ncbi_cv_lib_boost_filesystem\" != \"no\"; then\n   dnl AC_DEFINE(HAVE_BOOST_FILESYSTEM, 1,\n   dnl           [Define to 1 if the `Boost.Filesystem' library is available.])\n   NCBI_PACKAGE(Boost.Filesystem)\nelse\n   boost_fs_lib=\n   boost_fs_static_lib=\n   BOOST_FILESYSTEM_LIBS=\n   BOOST_FILESYSTEM_STATIC_LIBS=\nfi\n\nif test \"$ncbi_cv_lib_boost_iostreams\" != \"no\"; then\n   dnl AC_DEFINE(HAVE_BOOST_IOSTREAMS, 1,\n   dnl           [Define to 1 if the `Boost.Iostreams' library is available.])\n   NCBI_PACKAGE(Boost.Iostreams)\nelse\n   BOOST_IOSTREAMS_LIBS=\n   BOOST_IOSTREAMS_STATIC_LIBS=\nfi\n\nif test \"$ncbi_cv_lib_boost_program_options\" != \"no\"; then\n   dnl AC_DEFINE(HAVE_BOOST_PROGRAM_OPTIONS, 1,\n   dnl           [Define to 1 if the `Boost.Program-Options' library is available.])\n   NCBI_PACKAGE(Boost.Program-Options)\nelse\n   BOOST_PROGRAM_OPTIONS_LIBS=\n   BOOST_PROGRAM_OPTIONS_STATIC_LIBS=\nfi\n\nif test \"$ncbi_cv_lib_boost_regex\" != \"no\"; then\n   AC_DEFINE(HAVE_BOOST_REGEX, 1,\n             [Define to 1 if the `Boost.Regex' library is available.])\n   NCBI_PACKAGE(Boost.Regex)\nelse\n   BOOST_REGEX_LIBS=\n   BOOST_REGEX_STATIC_LIBS=\nfi\n\nif test \"$ncbi_cv_lib_boost_spirit\" != \"no\"; then\n   AC_DEFINE(HAVE_BOOST_SPIRIT, 1,\n             [Define to 1 if the `Boost.Spirit' headers are available.])\n   NCBI_PACKAGE(Boost.Spirit)\nfi\n\nif test \"$ncbi_cv_lib_boost_system\" != \"no\"; then\n   dnl AC_DEFINE(HAVE_BOOST_SYSTEM, 1,\n   dnl           [Define to 1 if the `Boost.System' library is available.])\n   NCBI_PACKAGE(Boost.System)\n# BOOST_SYSTEM(_STATIC)_LIBS already conditionally cleared above\nfi\n\nif test \"$ncbi_cv_lib_boost_test\" != \"no\"; then\n   AC_DEFINE(HAVE_BOOST_TEST, 1,\n             [Define to 1 if the `Boost.Test' libraries are available.])\n   if test \"$ncbi_cv_lib_boost_test\" != \"included-only\"; then\n      NCBI_PACKAGE(Boost.Test)\n   fi\n   if test \"$ncbi_cv_lib_boost_test\" != \"external-only\"; then\n      NCBI_PACKAGE(Boost.Test.Included)\n   fi\nelse\n   BOOST_TEST_PEM_LIBS=\n   BOOST_TEST_PEM_STATIC_LIBS=\n   BOOST_TEST_TEM_LIBS=\n   BOOST_TEST_TEM_STATIC_LIBS=\n   BOOST_TEST_UTF_LIBS=\n   BOOST_TEST_UTF_STATIC_LIBS=\nfi\n\nif test \"$ncbi_cv_lib_boost_thread\" != \"no\"; then\n   AC_DEFINE(HAVE_BOOST_THREAD, 1,\n             [Define to 1 if the `Boost.Threads' library is available.])\n   NCBI_PACKAGE(Boost.Threads)\nelse\n   BOOST_THREAD_LIBS=\n   BOOST_THREAD_STATIC_LIBS=\nfi\n\ncase \"$with_boost:$ncbi_cv_lib_boost_test\" in\n   :* | no:* | *:yes | *:included-only ) ;; # no problem\n   * ) AC_MSG_ERROR([Boost explicitly requested, but Boost.Test.Included unavailable.]) ;;\nesac\n\n\n## NCBI C Toolkit\nif test \"$with_ncbi_c\" != \"no\" ; then\n   if test \"${with_ncbi_c-yes}\" != yes; then\n      NCBI_C_PATH=$with_ncbi_c\n   fi\n   : ${NCBI_C_PATH=\"$NCBI\"}\n   if test \"$ncbi_compiler\" = ICC -a -d \"$NCBI_C_PATH/ncbi_icc\"; then\n      NCBI_C_PATH=$NCBI_C_PATH/ncbi_icc\n   fi\n\n   NCBI_C_INCLUDE=\"-I$NCBI_C_PATH/include${bit64_sfx}\"\n   if test \"$with_debug\" = \"no\" ; then\n     NCBI_C_LIBPATH=\"$NCBI_C_PATH/lib${bit64_sfx}\"\n   else\n     NCBI_C_LIBPATH=\"$NCBI_C_PATH/altlib${bit64_sfx}\"\n   fi\n   if test \"$with_mt\" = \"yes\" ; then\n     NCBI_C_LIBPATH=\"$NCBI_C_LIBPATH $NCBI_C_LIBPATH/ncbithr.o\"\n   fi\n   if test -n \"$NCBI_C_ncbi\" ; then\n     :\n   elif test \"$OSTYPE\" = \"darwin\" ; then\n     NCBI_C_ncbi=\"-lncbi -Wl,-framework,AppKit\"\n   else\n     NCBI_C_ncbi=\"-lncbi\"\n   fi\n   NCBI_C_LIBPATH=\"-L$NCBI_C_LIBPATH\"\n   AC_CACHE_CHECK([for the NCBI C toolkit${NCBI_C_PATH:+ in $NCBI_C_PATH}],\n      ncbi_cv_lib_ctools,\n      [CPPFLAGS=\"$NCBI_C_INCLUDE $orig_CPPFLAGS\"\n       LIBS=\"$NCBI_C_LIBPATH $NCBI_C_ncbi $NETWORK_LIBS $orig_LIBS\"\n       AC_LINK_IFELSE([AC_LANG_PROGRAM(\n          [[#include <ncbi.h>]],\n          [[ Nlm_Boolean b = Nlm_GetArgs(\"fake\", -1, 0); ]])],\n          [ncbi_cv_lib_ctools=yes], [ncbi_cv_lib_ctools=no])])\n   if test \"$ncbi_cv_lib_ctools\" = no; then\n      NCBI_MISSING_PACKAGE(ncbi-c)\n   fi\nfi\nif test \"$with_ncbi_c\" = \"no\" ; then\n   if test \"$with_ctools\" = \"yes\"; then\n      AC_MSG_ERROR([--with-ctools:  NCBI C Toolkit is missing])\n   fi\n   NCBI_C_PATH=\"No_NCBI_CToolkit\"\n   NCBI_C_INCLUDE=\n   NCBI_C_LIBPATH=\n   NCBI_C_ncbi=\nelse\n   NCBI_PACKAGE(C-Toolkit)\n   AC_DEFINE(HAVE_NCBI_C, 1, [Define to 1 if the NCBI C toolkit is available.])\nfi\n\n# X11\nLIBS=\"$orig_LIBS\"\nCPPFLAGS=\"$orig_CPPFLAGS\"\n# Look in /usr/X11R6/lib64 if necessary\nxlib=`ls -d /usr/X11R6/lib$bit64_sfx/libX11.* 2>/dev/null | sed -ne 1p`\nif test -f \"$xlib\" -a \"${x_libraries-NONE}\" = NONE \\\n  -a \"${x_includes-NONE}\" = NONE; then\n   base=`basename $xlib`\n   cmp -s /usr/X11R6/lib/$base $xlib  || \\\n      cmp -s /usr/lib/$base $xlib  || \\\n      cmp -s /usr/lib$bit64_sfx/$base $xlib  || \\\n      x_libraries=/usr/X11R6/lib$bit64_sfx x_includes=/usr/X11R6/include\nfi\nAC_PATH_XTRA\nx_libraries=`echo \"$x_libraries\" | sed -e \"s,^$usr_lib\\$,,\"`\nX_LIBS=`echo \"$X_LIBS \" | sed -e \"$no_usr_lib\"`\nAC_CHECK_LIB(Xext, XextCreateExtension, Xext=\"-lXext\", Xext=,\n   [$X_PRE_LIBS -lX11 $X_EXTRA_LIBS])\nAC_CHECK_LIB(Xt, XtMainLoop, Xt=\"-lXt\", Xt=,\n   [$Xext $X_PRE_LIBS -lX11 $X_EXTRA_LIBS])\nAC_CHECK_LIB(Xmu, XmuMakeAtom, Xmu=\"-lXmu\", Xmu=,\n   [$Xt $Xext $X_PRE_LIBS -lX11 $X_EXTRA_LIBS])\nLDFLAGS=$orig_LDFLAGS\nX_ALL_LIBS=\"$Xmu $Xt $Xext $X_PRE_LIBS -lX11 $X_EXTRA_LIBS\"\n\n## OpenGL\nif test \"$with_opengl\" != \"no\"; then\n   if test \"${with_opengl-yes}\" != yes; then\n      OPENGL_PATH=$with_opengl\n   fi\n   if test -d \"$OPENGL_PATH\"; then\n      NCBI_FIX_DIR(OPENGL_PATH)\n   fi\n   case \"$OSTYPE\" in\n      darwin) # Use native interface\n         OPENGL_LIBS=\"-framework AGL -framework OpenGL\"\n         ;;\n      # cygwin) ... ;;\n      *) # Default -- assume X-based\n         LIBS=\"$orig_LIBS\"\n         CPPFLAGS=\"$orig_CPPFLAGS\"\n         LDFLAGS=\"$orig_LDFLAGS $X_LIBS\"\n         if test -d \"$OPENGL_PATH/include/GL\"; then\n            OPENGL_INCLUDE=\"-I$OPENGL_PATH/include $X_CFLAGS\"\n         else\n            OPENGL_INCLUDE=$X_CFLAGS\n         fi\n         if test -n \"$OPENGL_PATH\" -a -d \"$OPENGL_PATH/lib${bit64_sfx}\"; then\n            NCBI_RPATHIFY(OPENGL_LIBPATH, $OPENGL_PATH/lib${bit64_sfx},\n                          [ ]$X_LIBS)\n         elif test -f /usr/lib/mesa/libGL.so; then\n            NCBI_RPATHIFY(OPENGL_LIBPATH, /usr/lib/mesa, [ ]$X_LIBS)\n         else\n            OPENGL_LIBPATH=$X_LIBS\n         fi\n         OPENGL_LIBS=\"$OPENGL_LIBPATH -lGLU -lGL $X_ALL_LIBS\"\n         ;;\n   esac\n   case \"${OPENGL_PATH}\" in\n      */*) where=\" in $OPENGL_PATH\" ;;\n      *  ) where= ;;\n   esac\n   AC_CACHE_CHECK([for OpenGL$where], ncbi_cv_lib_opengl,\n      [CPPFLAGS=\"$orig_CPPFLAGS $OPENGL_INCLUDE\"\n       LIBS=\"$OPENGL_LIBS $orig_LIBS\"\n       AC_LINK_IFELSE([AC_LANG_PROGRAM(\n          [[\n           #ifdef NCBI_OS_DARWIN\n           #  include <OpenGL/gl.h>\n           #else\n           #  include <GL/gl.h>\n           #endif\n          ]],\n          [[glBegin(0);]])],\n          [ncbi_cv_lib_opengl=yes], [ncbi_cv_lib_opengl=no])])\nfi\n\nif test \"$with_opengl\" = \"no\" -o \"$ncbi_cv_lib_opengl\" = \"no\"; then\n   OPENGL_INCLUDE=\n   OPENGL_LIBS=\n   OPENGL_STATIC_LIBS=\n   OSMESA_INCLUDE=\n   OSMESA_LIBS=\n   OSMESA_STATIC_LIBS=\n   GLUT_INCLUDE=\n   GLUT_LIBS=\n   GLEW_INCLUDE=\n   GLEW_LIBS=\n   GLEW_STATIC_LIBS=\n   NCBI_MISSING_PACKAGE(opengl)\nelse\n   NCBI_PACKAGE(OpenGL)\n   AC_DEFINE(HAVE_OPENGL, 1, [Define to 1 if you have OpenGL (-lGL).])\n   if test -f \"$OPENGL_PATH/lib${bit64_sfx}/libGLU-static.a\"; then\n      OPENGL_STATIC_LIBS=\"$OPENGL_LIBPATH -lGLU-static -lGL-static $X_ALL_LIBS\"\n   else\n      OPENGL_STATIC_LIBS=$OPENGL_LIBS\n   fi\n   : ${OSMESA_PATH=$OPENGL_PATH}\n   if test \"$with_mesa\" != \"no\"; then\n      if test \"${with_mesa-yes}\" != \"yes\"; then\n         OSMESA_PATH=$with_mesa\n      fi\n      if test -d \"$OSMESA_PATH\"; then\n         OSMESA_INCLUDE=-I$OSMESA_PATH/include\n         if test \"$OSMESA_PATH\" != \"$OPENGL_PATH\"; then\n            NCBI_RPATHIFY(OSMESA_LDFLAGS, $OSMESA_PATH/lib${bit64_sfx})\n         fi\n      fi\n      LDFLAGS=\"$orig_LDFLAGS $OSMESA_LDFLAGS $OPENGL_LIBPATH\"\n      AC_CHECK_LIB(OSMesa, OSMesaCreateContext,\n         [NCBI_PACKAGE(MESA);\n          OSMESA_LIBS=\"$OSMESA_LDFLAGS $OPENGL_LIBPATH -lOSMesa -lGLU -lGL $X_ALL_LIBS\"\n          AC_DEFINE(HAVE_LIBOSMESA, 1, [Define to 1 if you have libOSMesa.])],\n         [OSMESA_LIBS=],\n         $OPENGL_LIBS)\n   fi\n   if test -z \"$OSMESA_LIBS\"; then\n      NCBI_MISSING_PACKAGE(mesa)\n   elif test -f \"$OSMESA_PATH/lib${bit64_sfx}/libOSMesa-static.a\"; then\n      OSMESA_STATIC_LIBS=\"$OSMESA_LDFLAGS $OPENGL_LIBPATH -lOSMesa-static -lGLU-static -lGL-static $X_ALL_LIBS\"\n   else\n      OSMESA_STATIC_LIBS=$OSMESA_LIBS\n   fi\n   if test \"$with_glut\" != \"no\"; then\n      if test \"${with_glut-yes}\" != \"yes\"; then\n         GLUT_PATH=$with_glut\n      fi\n      if test -d \"GLUT_PATH\"; then\n         GLUT_INCLUDE=-I$GLUT_PATH/include\n         NCBI_RPATHIFY(GLUT_LDFLAGS, $GLUT_PATH/lib${bit64_sfx})\n      fi\n      LDFLAGS=\"$orig_LDFLAGS $GLUT_LDFLAGS $OPENGL_LIBPATH\"\n      AC_CHECK_LIB(glut, glutInit,\n         [NCBI_PACKAGE(GLUT);\n          GLUT_LIBS=\"$GLUT_LDFLAGS $OPENGL_LIBPATH -lglut -lGLU -lGL $X_ALL_LIBS\"\n          AC_DEFINE(HAVE_LIBGLUT, 1, [Define to 1 if you have libglut.])],\n         [GLUT_LIBS=],\n         $OPENGL_LIBS)\n      if test -z \"$GLUT_LIBS\"; then\n         NCBI_MISSING_PACKAGE(glut)\n      fi\n   fi\n   if test \"$with_glew\" != \"no\"; then\n      if test \"${with_glew-yes}\" != \"yes\"; then\n         GLEW_PATH=$with_glew\n      fi\n      if test -d \"$GLEW_PATH\"; then\n         if test -d \"$GLEW_PATH/$compiler_vpfx$DEBUG_SFX$bit64_sfx\"; then\n            GLEW_PATH=$GLEW_PATH/$compiler_vpfx$DEBUG_SFX$bit64_sfx\n         elif test -d \"$GLEW_PATH/$compiler_pfx$DEBUG_SFX$bit64_sfx\"; then\n            GLEW_PATH=$GLEW_PATH/$compiler_pfx$DEBUG_SFX$bit64_sfx\n         elif test -d \"$GLEW_PATH/$DEBUG_SFX$bit64_sfx\"; then\n            GLEW_PATH=$GLEW_PATH/$DEBUG_SFX$bit64_sfx\n         fi\n         NCBI_FIX_DIR(GLEW_PATH)\n         GLEW_LIBDIR=$GLEW_PATH/lib\n         if test -n \"$bit64_sfx\" -a -d $GLEW_LIBDIR$bit64_sfx; then\n            if test -d $GLEW_LIBDIR; then\n               for x in $GLEW_LIBDIR/libGLEW*; do\n                  if cmp -s \"$x\" \"$GLEW_LIBDIR$bit64_sfx/`basename \\\"$x\\\"`\"; then\n                     :\n                  else\n                     GLEW_LIBDIR=$GLEW_LIBDIR$bit64_sfx\n                     break\n                  fi\n               done\n            else\n               GLEW_LIBDIR=$GLEW_LIBDIR$bit64_sfx\n            fi\n         fi\n         glew_config=\"eval PKG_CONFIG_PATH=\\\"$GLEW_LIBDIR/pkgconfig\\\" pkg-config\"\n      else\n         glew_config=pkg-config\n      fi\n      if pkg-config --version >/dev/null 2>&1; then\n         if $glew_config glewmx --exists >/dev/null 2>&1 \\\n           && test -n \"`$glew_config glewmx --libs 2>/dev/null`\"; then\n            glew_config=\"$glew_config glewmx\"\n         elif $glew_config glew --exists >/dev/null 2>&1 \\\n           && test -n \"`$glew_config glew --libs 2>/dev/null`\"; then\n            glew_config=\"$glew_config glew\"\n         else\n            glew_config=\n         fi\n         if test -n \"$glew_config\"; then\n            GLEW_INCLUDE=`$glew_config --cflags | sed 's:/GL *$::'`\n            GLEW_LDFLAGS=`$glew_config --libs-only-L`\n            glew_libname=`$glew_config --libs-only-l | sed -e 's/-l//'`\n         fi\n      fi\n      if test -z \"$glew_libname\" -a -d \"$GLEW_PATH\"; then\n         GLEW_INCLUDE=-I$GLEW_PATH/include\n         GLEW_LDFLAGS=-L$GLEW_LIBDIR\n      fi\n      LDFLAGS=\"$orig_LDFLAGS $GLEW_LDFLAGS\"\n      LIBS=\"$OPENGL_LIBS $DL_LIBS $orig_LIBS\"\n      NCBI_CHECK_LIBS(GLEW, [$glew_libname GLEWmx GLEW], glewGetExtension)\n      if test \"$ac_cv_search_glewGetExtension\" = no; then\n         GLEW_INCLUDE=\n         GLEW_LIBS=\n         NCBI_MISSING_PACKAGE(glew)\n         NCBI_MISSING_PACKAGE(glew-mx)\n      else\n         NCBI_RPATHIFY_OUTPUT_COND(tmp_LIBS, [echo $GLEW_LDFLAGS $GLEW_LIBS])\n         GLEW_LIBS=$tmp_LIBS\n         NCBI_PACKAGE(GLEW)\n         CPPFLAGS=\"$orig_CPPFLAGS $GLEW_INCLUDE $OPENGL_INCLUDE\"\n         LIBS=\"$GLEW_LIBS $OPENGL_LIBS $DL_LIBS $orig_LIBS\"\n         AC_CACHE_CHECK([for GLEW multi-context (MX) support (recommended)],\n            ncbi_cv_lib_glew_mx,\n            [AC_LINK_IFELSE([AC_LANG_PROGRAM(\n               [[#define GLEW_MX 1\n                 #include <GL/glew.h>]],\n               [[glewContextInit(NULL);]])],\n             [ncbi_cv_lib_glew_mx=yes], [ncbi_cv_lib_glew_mx=no])])\n          if test $ncbi_cv_lib_glew_mx = yes; then\n             GLEW_INCLUDE=\"$GLEW_INCLUDE -DGLEW_MX\"\n          else\n             NCBI_MISSING_PACKAGE(glew-mx)\n          fi\n          : ${GLEW_STATIC_LIBS=$GLEW_LIBDIR/libGLEW-static.a}\n          test -f \"$GLEW_STATIC_LIBS\"  ||  GLEW_STATIC_LIBS=$GLEW_LIBS\n      fi\n   fi\nfi\n\nLDFLAGS=$orig_LDFLAGS\n\n\n## wxWidgets\n# Insist on single-byte builds by default, per various projects' expectations.\n: ${with_wxwidgets_ucs=no}\nif test \"$with_wxwidgets\" != \"no\" ; then\n   case \"$with_wxwidgets\" in\n      yes | \"\" ) ;;\n      *        ) WXWIDGETS_PATH=$with_wxwidgets ;;\n   esac\n   if test -d \"$WXWIDGETS_PATH/${compiler_vpfx}${DEBUG_SFX}${mt_sfx}${bit64_sfx}/lib\" \\\n        -a -z \"$WXWIDGETS_ARCH_PATH\"; then\n      WXWIDGETS_ARCH_PATH=\"$WXWIDGETS_PATH/${compiler_vpfx}${DEBUG_SFX}${mt_sfx}${bit64_sfx}\"\n   elif test -d \"$WXWIDGETS_PATH/${compiler_pfx}${DEBUG_SFX}${mt_sfx}${bit64_sfx}/lib\" \\\n        -a -z \"$WXWIDGETS_ARCH_PATH\"; then\n      WXWIDGETS_ARCH_PATH=\"$WXWIDGETS_PATH/${compiler_pfx}${DEBUG_SFX}${mt_sfx}${bit64_sfx}\"\n   else\n      WXWIDGETS_ARCH_PATH=\"$WXWIDGETS_PATH\"\n   fi\n   WXWIDGETS_BINPATH=${WXWIDGETS_BINPATH:=\"$WXWIDGETS_ARCH_PATH/bin\"}\n   WXWIDGETS_LIBPATH=${WXWIDGETS_LIBPATH:=\"$WXWIDGETS_ARCH_PATH/lib\"}\n   WXWIDGETS_INCLUDE=\n   AS_UNSET(wxconf)\n   AC_PATH_PROG(wxconf, wx-config, [], $WXWIDGETS_BINPATH:$PATH)\n   if test -x \"$wxconf\"; then\n      WXWIDGETS_ARCH_PATH=`$wxconf --exec-prefix`\n      if test -n \"$with_wxwidgets_ucs\"; then\n         wxcfflags=--unicode=$with_wxwidgets_ucs\n      else\n         wxcfflags=\n      fi\n      for x in `\"$wxconf\" $wxcfflags --libs --static 2>&AS_MESSAGE_LOG_FD`; do\n         case \"$x\" in\n            -L*)\n                d=`echo $x | sed -e 's/^-L//'`\n                pcd=$d/pkgconfig\n                if test -d \"$pcd\"; then\n                   PKG_CONFIG_PATH=\"${PKG_CONFIG_PATH+$PKG_CONFIG_PATH:}$pcd\"\n                fi\n                ;;\n         esac\n      done\n      export PKG_CONFIG_PATH\n   else\n      AS_UNSET(wxconf)\n   fi\n   if test -x \"$wxconf\" \\\n     &&  \"$wxconf\" $wxcfflags --list 2>/dev/null \\\n       | grep 'Default config is gtk2' >/dev/null; then\n      gtkconf=\"pkg-config gtk+-2.0\"\n   elif test -x \"$WXWIDGETS_BINPATH/gtk-config\"; then\n      gtkconf=$WXWIDGETS_BINPATH/gtk-config\n   elif gtk-config --version >/dev/null 2>&1; then\n      gtkconf=gtk-config\n   else\n      # May work without gtk-config (e.g., on Mac OS X)\n      gtkconf=:\n   fi\n   case \"$host_os\" in\n      darwin* )\n         baseflags=\"\"\n         basesed='s/-isysroot [[^ ]]*//g; s/-arch [[^ ]]*//g'\n         if test -n \"$SYSROOT\"; then\n            deps=`\"$wxconf\" $wxcfflags --libs --static 2>/dev/null \\\n                  | sed -e 's/.*\\.a//'`\n            libsed=\"$basesed; s/\\$/ $deps/\"\n         else\n            libsed=$basesed\n         fi\n         ;;\n      * )\n         baseflags=`$gtkconf --cflags 2>/dev/null`\n         basesed=$no_usr_lib\n         libsed=$basesed\n         ;;\n   esac\n   AC_CACHE_CHECK(\n      [for wxWidgets${WXWIDGETS_ARCH_PATH:+ in $WXWIDGETS_ARCH_PATH}],\n      ncbi_cv_lib_wxwidgets,\n      [if test -x \"$wxconf\" ; then\n          WXWIDGETS_INCLUDE=\"$baseflags `\"$wxconf\" $wxcfflags --cflags`\"\n          NCBI_RPATHIFY_OUTPUT(WXWIDGETS_LIBS, [\"$wxconf\" $wxcfflags --libs],\n             [$libsed; s/ -lm / /g;])\n\n          CPPFLAGS=\"$WXWIDGETS_INCLUDE $orig_CPPFLAGS\"\n          LIBS=\"$WXWIDGETS_LIBS $orig_LIBS\"\n          AC_LINK_IFELSE([AC_LANG_PROGRAM(\n             [[#include <wx/wx.h>]],\n             [[ wxExit(); ]])],\n             [ncbi_cv_lib_wxwidgets=yes], [ncbi_cv_lib_wxwidgets=no])\n       else\n          ncbi_cv_lib_wxwidgets=no\n       fi])\n   if test \"$ncbi_cv_lib_wxwidgets\" = \"no\"; then\n      NCBI_MISSING_PACKAGE(wxwidgets)\n   fi\nfi\n\nif test \"$with_wxwidgets\" = \"no\" ; then\n   WXWIDGETS_LIBPATH=\"No_wxWidgets\"\n   WXWIDGETS_INCLUDE=\n   WXWIDGETS_LIBS=\n   WXWIDGETS_STATIC_LIBS=\n   WXWIDGETS_GL_LIBS=\n   WXWIDGETS_GL_STATIC_LIBS=\n   WXWIDGETS_POST_LINK=:\nelse\n   NCBI_PACKAGE(wxWidgets)\n   case \"`\"$wxconf\" $wxcfflags --version`\" in\n      1.* | 2.[[0-7]].*)\n         wxlibs=std\n         ;;\n      * )\n         NCBI_PACKAGE(wx2.8)\n         wxlibs=std,richtext,aui,propgrid\n         ;;\n   esac\n   # The \"yes\" may have been cached; get the actual settings again if needed\n   if test -z \"$WXWIDGETS_INCLUDE\"; then\n      WXWIDGETS_INCLUDE=\"$baseflags `\"$wxconf\" $wxcfflags --cflags`\"\n   fi\n   NCBI_RPATHIFY_OUTPUT(WXWIDGETS_LIBS, [$wxconf $wxcfflags --libs $wxlibs],\n      [$libsed; s/ -lm / /g;])\n   WXWIDGETS_STATIC_LIBS=`\"$wxconf\" $wxcfflags --libs --static $wxlibs \\\n      2>/dev/null | sed -e \"$basesed; s/ -lm / /g;\"`\n   if test -n \"$WXWIDGETS_STATIC_LIBS\"; then\n      # Allow direct use of underlying libraries with strict linkers\n      WXWIDGETS_LIBS=\"$WXWIDGETS_LIBS `echo $WXWIDGETS_STATIC_LIBS | sed -e 's/.*\\.a *//'`\"\n   else\n      WXWIDGETS_STATIC_LIBS=$WXWIDGETS_LIBS\n   fi\n   WXWIDGETS_GL_LIBS=`\"$wxconf\" $wxcfflags --libs gl | sed -e \"$basesed\"`\n   WXWIDGETS_GL_STATIC_LIBS=`\"$wxconf\" $wxcfflags --libs gl --static \\\n      2>/dev/null | sed -e \"$basesed; s|-lGLU* -lGLU*|$OPENGL_STATIC_LIBS|\"`\n   : ${WXWIDGETS_GL_STATIC_LIBS:=$WXWIDGETS_GL_LIBS}\n   WXWIDGETS_POST_LINK=`\"$wxconf\" $wxcfflags --rezflags 2>/dev/null`\n   test -n \"$WXWIDGETS_POST_LINK\"  ||  WXWIDGETS_POST_LINK=:\n   AC_DEFINE(HAVE_WXWIDGETS, 1, [Define to 1 if wxWidgets is available.])\nfi\n\n\n## In-house Fast-CGI library\nif test \"$with_fastcgi\" != \"no\" ; then\n   case \"$with_fastcgi\" in\n      yes | \"\" ) ;;\n      */*      ) FASTCGI_PATH=$with_fastcgi              ;;\n      *        ) FASTCGI_PATH=$NCBI/fcgi-${with_fastcgi} ;;\n   esac\n   if test -d \"$FASTCGI_PATH\"; then\n      NCBI_FIX_DIR(FASTCGI_PATH)\n   fi\n   FASTCGI_INCLUDE=\"-I$FASTCGI_PATH/include${bit64_sfx}\"\n   if test \"$with_debug\" = \"no\" ; then\n      FASTCGI_LIBDIR=\"$FASTCGI_PATH/lib${bit64_sfx}\"\n   else\n      FASTCGI_LIBDIR=\"$FASTCGI_PATH/altlib${bit64_sfx}\"\n   fi\n   NCBI_RPATHIFY(FASTCGI_LIBS, $FASTCGI_LIBDIR, [ -lfcgi $NETWORK_LIBS])\n   FASTCGI_OBJS=\"fcgibuf\"\n   LIBS=\"$FASTCGI_LIBS $orig_LIBS\"\n   AC_CACHE_CHECK([for FastCGI libraries${FASTCGI_PATH:+ in $FASTCGI_PATH}],\n      ncbi_cv_lib_fcgi,\n      [CPPFLAGS=\"$FASTCGI_INCLUDE $orig_CPPFLAGS\"\n       AC_LINK_IFELSE([AC_LANG_PROGRAM(\n          [[#include <fcgiapp.h>]],\n          [[ (void) FCGX_IsCGI(); ]])],\n          [ncbi_cv_lib_fcgi=yes], [ncbi_cv_lib_fcgi=no])])\n   if test \"$ncbi_cv_lib_fcgi\" = \"no\"; then\n      NCBI_MISSING_PACKAGE(fastcgi)\n   fi\n   AC_CHECK_FUNCS(FCGX_Accept_r)\nfi\nif test \"$with_fastcgi\" = \"no\" ; then\n   FASTCGI_PATH=\"No_FastCgi\"\n   FASTCGI_INCLUDE=\n   FASTCGI_LIBS=\n   FASTCGI_OBJS=\nelse\n   NCBI_PACKAGE(Fast-CGI)\n   AC_DEFINE(HAVE_LIBFASTCGI, 1,\n             [Define to 1 if FastCGI libraries are available.])\nfi\n\n\n## NCBI SSS libraries\nif test \"$with_sybase\" = \"no\" ; then\n   NCBI_MISSING_PACKAGE(sssdb)\nfi\n\ncase \"$host_os:$compiler:$compiler_version\" in\n   linux*:GCC:*)\n      : ${with_included_sss=yes}\n   ;;\nesac\n\nif test \"$with_sss\" != \"no\" ; then\n   local_sss=${real_srcdir}/src/internal/sss\n   if test \"${with_included_sss-no}\" = \"yes\" \\\n       -a -f \"$local_sss/utils/sssdebug.hpp\" \\\n       -a -f \"${local_sss}srv/cli/sssconnection.cpp\"; then\n      with_included_sss=yes\n      NCBI_SSS_PATH=$local_sss\n      NCBI_SSS_INCLUDE=\"\\$(incdir)/sss\"\n      NCBI_SSS_LIBPATH=\"\\$(libdir)\"\n      NCBI_PACKAGE(LocalSSS)\n      if test -f \"$local_sss/../msgmail2/asn/msgmail.asn\"; then\n         NCBI_PACKAGE(LocalMSGMAIL2)\n      fi\n   else\n      with_included_sss=no\n   fi\n   if test \"${with_sss-yes}\" = yes; then\n      NCBI_SSS_PATH=${NCBI_SSS_PATH:=\"$NCBI/sss/BUILD\"}\n   else\n      NCBI_SSS_PATH=$with_sss\n   fi\n   NCBI_SSS_INCLUDE=${NCBI_SSS_INCLUDE:=\"$NCBI_SSS_PATH/include\"}\n   if test -z \"$NCBI_SSS_LIBPATH\" ; then\n      NCBI_SSS_LIBPATH=\"${NCBI_SSS_PATH}/lib/${compiler_vpfx}${DEBUG_SFX}${bit64_sfx}\"\n      if test \"$with_mt\" = \"yes\" ; then\n         NCBI_SSS_LIBPATH=\"${NCBI_SSS_LIBPATH}mt\"\n      fi\n   fi\n   AC_MSG_CHECKING(\n      [for NCBI SSS directories${NCBI_SSS_PATH:+ in $NCBI_SSS_PATH}])\n   if test \"$with_included_sss\" = \"yes\"; then\n      AC_MSG_RESULT([yes]) # duh\n   elif test ! -d \"${NCBI_SSS_LIBPATH}\"  -o  ! -d \"${NCBI_SSS_INCLUDE}\" ; then\n      AC_MSG_RESULT([no])\n      NCBI_MISSING_PACKAGE(sss)\n   else\n      AC_MSG_RESULT([yes])\n   fi\nfi\n\nif test \"$with_sss\" = \"no\" ; then\n   NCBI_MISSING_PACKAGE(sssutils)\n   NCBI_MISSING_PACKAGE(sssdb)\n   NCBI_SSS_INCLUDE=\n   NCBI_SSS_LIBPATH=\n   LIBSSSUTILS=\n   LIBSSSDB=\nelse\n   if test \"$with_included_sss\" = \"yes\"; then\n      NCBI_SSS_LIBPATH= # Not needed\n      ncbi_cv_lib_sssutils=yes\n      ncbi_cv_lib_sssdb=yes\n      sssutils=sssutils\n   else\n      NCBI_SSS_LIBPATH=\"-L${NCBI_SSS_LIBPATH}\"\n   fi\n   NCBI_SSS_INCLUDE=\"-I${NCBI_SSS_INCLUDE}\"\n\n   # SSS UTILS\n   if test \"$with_sssutils\" != \"no\" ; then\n      LIBSSSUTILS=\"-lsssutils\"\n      AC_CACHE_CHECK([for the NCBI SSS UTILS library], ncbi_cv_lib_sssutils,\n         [CPPFLAGS=\"$NCBI_SSS_INCLUDE $SYBASE_INCLUDE $orig_CPPFLAGS\"\n          LIBS=\"$NCBI_SSS_LIBPATH $LIBSSSUTILS $SYBASE_LIBS $NETWORK_LIBS $DL_LIBS $orig_LIBS\"\n          AC_LINK_IFELSE([AC_LANG_PROGRAM(\n             [[#include <hashtab.hpp>]],\n             [[ (new C_HashTab(123))->Clear(); ]])],\n             [ncbi_cv_lib_sssutils=yes], [ncbi_cv_lib_sssutils=no])])\n      if test \"$ncbi_cv_lib_sssutils\" = yes; then\n         AC_DEFINE(HAVE_LIBSSSUTILS, 1,\n                   [Define to 1 if the NCBI SSS UTILS library is available.])\n         NCBI_PACKAGE(SSSUTILS)\n         if test -f \"$local_sss/../ncbils2/asn/login.asn\"; then\n            if test \"$with_included_sss\" = yes  || \\\n               grep vformat $NCBI_SSS_INCLUDE/String.hpp >/dev/null 2>&1; then\n               NCBI_PACKAGE(LocalNCBILS) # temporary compatibility measure\n               NCBI_PACKAGE(NCBILS2)\n            fi\n         fi\n      else\n         NCBI_MISSING_PACKAGE(sssutils)\n         NCBI_MISSING_PACKAGE(sss)\n         LIBSSSUTILS=\"\"\n      fi\n   fi\n\n   # SSS DB\n   if test \"$with_sssdb\" != \"no\" ; then\n      if test \"$with_mt\" = \"yes\" ; then\n         LIBSSSDB=\"-lsssdb -lssssys\"\n      else\n         LIBSSSDB=\"-lsssdb\"\n      fi\n      AC_CACHE_CHECK([for the NCBI SSS DB library], ncbi_cv_lib_sssdb,\n         [CPPFLAGS=\"$NCBI_SSS_INCLUDE $SYBASE_INCLUDE $orig_CPPFLAGS\"\n          LIBS=\"$NCBI_SSS_LIBPATH $LIBSSSDB $SYBASE_LIBS $NETWORK_LIBS $DL_LIBS $orig_LIBS\"\n          AC_LINK_IFELSE([AC_LANG_PROGRAM(\n             [[#include <cslink.hpp>]],\n             [[ (new CSLink)->connect2server(\"srv\", \"user\", \"pwd\", \"db\"); ]])],\n             [ncbi_cv_lib_sssdb=yes], [ncbi_cv_lib_sssdb=no])])\n      if test \"$ncbi_cv_lib_sssdb\" = \"yes\"; then\n         AC_DEFINE(HAVE_LIBSSSDB, 1,\n                   [Define to 1 if the NCBI SSS DB library is available.])\n         NCBI_PACKAGE(SSSDB)\n      else\n         NCBI_MISSING_PACKAGE(sssdb)\n         NCBI_MISSING_PACKAGE(sss)\n         LIBSSSDB=\"\"\n      fi\n   fi\nfi\n\n\n# SP\nif test \"$with_sp\" != \"no\" ; then\n   if test -n \"$SP_INCLUDE\"; then\n      SP_GENERIC=\"$SP_INCLUDE/../generic\"\n   else\n      SP_INCLUDE=\"$SP_PATH/include\"\n      SP_GENERIC=\"$SP_PATH/generic\"\n   fi\n   if test -z \"$SP_LIBPATH\" ; then\n      SP_LIBPATH=\"${SP_PATH}/${compiler_vpfx}${DEBUG_SFX}${mt_sfx}${bit64_sfx}\"\n   fi\n   AC_MSG_CHECKING([for SP directories${SP_PATH:+ in $SP_PATH}])\n   if test ! -d \"${SP_LIBPATH}\"  -o  ! -d \"${SP_INCLUDE}\" ; then\n      AC_MSG_RESULT([no])\n      NCBI_MISSING_PACKAGE(sp)\n   else\n      AC_MSG_RESULT([yes])\n   fi\nfi\n\nif test \"$with_sp\" != \"no\" ; then\n   if test -d \"$SP_GENERIC\"; then\n      SP_INCLUDE=\"-I${SP_INCLUDE} -I${SP_GENERIC}\"\n   else\n      SP_INCLUDE=\"-I${SP_INCLUDE}\"\n   fi\n   SP_LIBS=\"-L$SP_LIBPATH -lsp\"\n   AC_CACHE_CHECK([for the SP SGML library], ncbi_cv_lib_sp,\n      [CPPFLAGS=\"$SP_INCLUDE $orig_CPPFLAGS\"\n       LIBS=\"$SP_LIBS $orig_LIBS\"\n       AC_LINK_IFELSE([AC_LANG_PROGRAM(\n          [[#include <SGMLApplication.h>]],\n          [[ SP_API::SGMLApplication app; ]])],\n          [ncbi_cv_lib_sp=yes], [ncbi_cv_lib_sp=no])])\n   if test \"$ncbi_cv_lib_sp\" = \"no\"; then\n      NCBI_MISSING_PACKAGE(sp)\n   fi\nfi\n\nif test \"$with_sp\" = \"no\" ; then\n   SP_INCLUDE=\n   SP_LIBS=\nelse\n   NCBI_PACKAGE(SP)\n   AC_DEFINE(HAVE_LIBSP, 1, [Define to 1 if the SP SGML library is available.])\nfi\n\n\n## ORBacus CORBA\nif test \"$with_orbacus\" != no; then\n   if test \"$with_orbacus\" != yes; then\n       ORBACUS_PATH=$with_orbacus\n   fi\n   if test -d \"$ORBACUS_PATH\"; then\n      NCBI_FIX_DIR(ORBACUS_PATH)\n   fi\n   fullpath=${ORBACUS_PATH}/${DEBUG_SFX}${mt_sfx}${bit64_sfx}\n   if test -f ${fullpath}/inc/OB/Config.h ; then\n      : ${ORBACUS_INCLUDE=\"-I$ORBACUS_PATH/include -I$fullpath/inc\"}\n      NCBI_RPATHIFY_COND(ORBACUS_LIBPATH, $fullpath/lib)\n   elif test -f ${ORBACUS_PATH}/include/OB/Config.h ; then\n     : ${ORBACUS_INCLUDE=\"-I$ORBACUS_PATH/include\"}\n     NCBI_RPATHIFY_COND(ORBACUS_LIBPATH, $ORBACUS_PATH/lib)\n   fi\n   case \"$host_os:$with_mt\" in\n       linux*:no) LIBJTC=\"-lJTC -pthread\" ;;\n       *)         LIBJTC=\"-lJTC\"          ;;\n   esac\n\n   case \"$with_mt:$ORBACUS_LIBPATH\" in\n      yes:* | *:-L*MT/lib* )\n         LIBOB=\"-lOB $LIBJTC\"\n         LIBIMR=\"-lIMR\"\n         ;;\n      * )\n         LIBOB=\"-lOB\"\n         LIBIMR=\n         ;;\n   esac\n   AC_CACHE_CHECK([for ORBacus${ORBACUS_PATH:+ in $ORBACUS_PATH}],\n      ncbi_cv_lib_orbacus,\n      [CPPFLAGS=\"$ORBACUS_INCLUDE $orig_CPPFLAGS\"\n       LIBS=\"$ORBACUS_LIBPATH $LIBOB $NETWORK_LIBS $DL_LIBS $orig_LIBS\"\n       AC_LINK_IFELSE([AC_LANG_PROGRAM(\n          [[#include <OB/CORBA.h>]],\n          [[\n            int c = 0;\n            char* v[] = { NULL };\n            CORBA::ORB_var orb = CORBA::ORB_init(c, v);\n            if (!CORBA::is_nil(orb)) orb->destroy();\n          ]])],\n          [ncbi_cv_lib_orbacus=yes], [ncbi_cv_lib_orbacus=no])])\n   if test \"$ncbi_cv_lib_orbacus\" = \"no\"; then\n      NCBI_MISSING_PACKAGE(orbacus)\n   fi\nfi\nif test \"$with_orbacus\" = no; then\n   ORBACUS_PATH=No_ORBacus\n   ORBACUS_INCLUDE=\n   ORBACUS_LIBPATH=\n   LIBOB=\n   LIBIMR=\nelse\n   NCBI_PACKAGE(ORBacus)\n   AC_DEFINE(HAVE_ORBACUS, 1,\n             [Define to 1 if the ORBacus CORBA package is available.])\nfi\n# Sigh... without this, the linker pulls in the contents of the cache\n# and then gripes about missing JTC stuff.\ntest -d SunWS_cache  &&  rm -r SunWS_cache\n\n\n## International Components for Unicode (ICU)\nif test -z \"$ICU_PATH\"  &&  icu-config --version >/dev/null 2>&1; then\n    ICU_PATH=`icu-config --prefix`\nfi\n\nif test \"$with_icu\" != \"no\" ; then\n   case \"$with_icu\" in\n      yes | \"\" ) ;;\n      *        ) ICU_PATH=$with_icu ;;\n   esac\n   if test -d \"$ICU_PATH/${compiler_vpfx}${DEBUG_SFX}${bit64_sfx}${mt_sfx}/lib\" \\\n        -a -z \"$ICU_ARCH_PATH\"; then\n      ICU_ARCH_PATH=\"$ICU_PATH/${compiler_vpfx}${DEBUG_SFX}${bit64_sfx}${mt_sfx}\"\n   elif test -d \"$ICU_PATH/${compiler_pfx}${DEBUG_SFX}${bit64_sfx}${mt_sfx}/lib\" \\\n        -a -z \"$ICU_ARCH_PATH\"; then\n      ICU_ARCH_PATH=\"$ICU_PATH/${compiler_pfx}${DEBUG_SFX}${bit64_sfx}${mt_sfx}\"\n   else\n      ICU_ARCH_PATH=\"$ICU_PATH\"\n   fi\n   ICU_BINPATH=${ICU_BINPATH:=\"$ICU_ARCH_PATH/bin\"}\n   ICU_LIBPATH=${ICU_LIBPATH:=\"$ICU_ARCH_PATH/lib\"}\n   ICU_INCLUDE=\n   AC_CACHE_CHECK([for ICU${ICU_ARCH_PATH:+ in $ICU_ARCH_PATH}],\n      ncbi_cv_lib_icu,\n      [ICU_CONFIG=`$ICU_BINPATH/icu-config --bindir 2>/dev/null`/icu-config\n       if test -x \"$ICU_CONFIG\" ; then\n          ICU_INCLUDE=`$ICU_CONFIG --cppflags-searchpath`\n          NCBI_RPATHIFY_OUTPUT(ICU_LIBS, $ICU_CONFIG --ldflags-searchpath)\n          ICU_LIBS=\"$ICU_LIBS `$ICU_CONFIG --ldflags-libsonly`\"\n\n          CPPFLAGS=\"$ICU_INCLUDE $orig_CPPFLAGS\"\n          LIBS=\"$ICU_LIBS $orig_LIBS\"\n          AC_LINK_IFELSE([AC_LANG_PROGRAM(\n            [[#include <unicode/unistr.h>]],\n            [[int32_t i = UNICODE_STRING_SIMPLE(\"foo\").indexOf('f');]])],\n            [ncbi_cv_lib_icu=yes], [ncbi_cv_lib_icu=no])\n       else\n          ncbi_cv_lib_icu=no\n       fi])\n   if test \"$ncbi_cv_lib_icu\" = \"no\"; then\n      NCBI_MISSING_PACKAGE(icu)\n   fi\nfi\n\nif test \"$with_icu\" = \"no\" ; then\n   ICU_PATH=\"No_ICU\"\n   ICU_INCLUDE=\n   ICU_LIBS=\n   ICU_STATIC_LIBS=\nelse\n   NCBI_PACKAGE(ICU)\n   ICU_CONFIG=\"`$ICU_BINPATH/icu-config --bindir`/icu-config\"\n   # The \"yes\" may have been cached; get the actual settings again if needed\n   if test -z \"$ICU_INCLUDE\"; then\n      ICU_INCLUDE=`$ICU_CONFIG --cppflags-searchpath`\n      NCBI_RPATHIFY_OUTPUT(ICU_LIBS, $ICU_CONFIG --ldflags-searchpath)\n      ICU_LIBS=\"$ICU_LIBS `$ICU_CONFIG --ldflags-libsonly`\"\n   fi\n   ICU_STATIC_LIBS=`$ICU_CONFIG --ldflags-libsonly | sed -e 's/-licu/-lsicu/g'`\n   ICU_STATIC_LIBS=\"`$ICU_CONFIG --ldflags-searchpath` $ICU_STATIC_LIBS\"\n   AC_DEFINE(HAVE_ICU, 1, [Define to 1 if ICU libraries are available.])\nfi\n\n\n### XML/XSL libraries\nNCBI_CHECK_THIRD_PARTY_LIB(expat,\n AC_LANG_PROGRAM([#include <expat.h>],\n    [XML_Parser parser = XML_ParserCreate(\"utf-8\");]))\nif test -f \"${EXPAT_PATH}/lib${bit64_sfx}/libexpat-static.a\"; then\n   EXPAT_STATIC_LIBS=\"-L${EXPAT_PATH}/lib${bit64_sfx} -lexpat-static\"\nelse\n   EXPAT_STATIC_LIBS=${EXPAT_LIBS}\nfi\nvpath=\"$SABLOT_PATH/${compiler_vpfx}build\"\ntest -d \"$vpath\"  &&  SABLOT_PATH=$vpath\nif test -d \"$SABLOT_PATH\"; then\n   NCBI_FIX_DIR(SABLOT_PATH)\nfi\nNCBI_CHECK_THIRD_PARTY_LIB(sablot,\n AC_LANG_PROGRAM([#include <sablot.h>],\n    [SDOM_Document* D; int x = SablotParse(NULL, \"file:/dev/null\", D);]),\n $EXPAT_LIBS)\ntest -d SunWS_cache  &&  rm -r SunWS_cache\nif test -f \"${SABLOT_PATH}/lib${bit64_sfx}/libsablot-static.a\"; then\n   SABLOT_STATIC_LIBS=\"-L${SABLOT_PATH}/lib${bit64_sfx} -lsablot-static $EXPAT_STATIC_LIBS\"\nelse\n   SABLOT_STATIC_LIBS=${SABLOT_LIBS}\nfi\n\n# test -d \"$LIBXML_PATH\" || LIBXML_PATH=`xml2-config --prefix 2>/dev/null`\nif test \"$with_libxml\" != \"no\"; then\n   case \"$with_libxml\" in\n      yes | \"\" ) ;;\n      *        ) LIBXML_PATH=$with_libxml ;;\n   esac\n   for pfx in \"$compiler_vpfx\" \"$compiler_pfx\" \"\" ; do\n      vpath=$LIBXML_PATH/$pfx${DEBUG_SFX}${mt_sfx}${bit64_sfx}\n      if test -d \"$vpath\" ; then\n         LIBXML_PATH=$vpath\n         break\n      fi\n   done\n   if test -d \"$LIBXML_PATH\"; then\n      NCBI_FIX_DIR(LIBXML_PATH)\n      in_path=\" in $LIBXML_PATH\"\n      if test -n \"$LIBXML_INCLUDE\"; then\n         :\n      elif test -d \"$LIBXML_PATH/include/libxml2/libxml\"; then\n         LIBXML_INCLUDE=\"-I$LIBXML_PATH/include/libxml2 -I$LIBXML_PATH/include\"\n      elif test -d \"$LIBXML_PATH/include/libxml\"; then\n         LIBXML_INCLUDE=\"-I$LIBXML_PATH/include\";\n      else\n         case \"$host_os\" in\n            darwin* )\n               LIBXML_INCLUDE=\"-iwithsysroot $LIBXML_PATH/include/libxml2\"\n               ;;\n         esac\n      fi\n      if test -d \"$LIBXML_PATH/lib${bit64_sfx}\"; then\n         LIBXML_LIBPATH_=\"$LIBXML_PATH/lib${bit64_sfx}\"\n      elif test -d \"$LIBXML_PATH/lib\"; then\n         LIBXML_LIBPATH_=\"$LIBXML_PATH/lib\"\n      fi\n      NCBI_RPATHIFY_COND(LIBXML_LIBPATH, $LIBXML_LIBPATH_)\n      LIBXML_LIBS=\"$LIBXML_LIBPATH -lxml2\"\n   else\n      case \"$host_os\" in\n         darwin* ) LIBXML_INCLUDE=\"-iwithsysroot /usr/include/libxml2\" ;;\n         *       ) LIBXML_INCLUDE=\"-I/usr/include/libxml2\" ;;\n      esac\n      LIBXML_LIBS=\"-lxml2\"\n      in_path=\n   fi\n   LIBXML_LIBS=\"$LIBXML_LIBS $ICONV_LIBS\"\n   AC_CACHE_CHECK([for libxml2$in_path], ncbi_cv_lib_libxml,\n      CPPFLAGS=\"$LIBXML_INCLUDE $orig_CPPFLAGS\"\n      LIBS=\"$LIBXML_LIBS $orig_LIBS\"\n      [AC_LINK_IFELSE(\n         [AC_LANG_PROGRAM(\n             [#include <libxml/parser.h>],\n             [xmlDocPtr doc = xmlParseFile(\"foo.xml\");])],\n      [ncbi_cv_lib_libxml=yes], [ncbi_cv_lib_libxml=no])])\n   if test \"$ncbi_cv_lib_libxml\" = \"no\"; then\n      NCBI_MISSING_PACKAGE(libxml)\n   fi\nfi\nif test \"$with_libxml\" = \"no\"; then\n   LIBXML_PATH=\"No_LIBXML\"\n   LIBXML_INCLUDE=\n   LIBXML_LIBPATH_=\n   LIBXML_LIBS=\nelse\n   NCBI_PACKAGE(LIBXML)\n   LIBXML_INCLUDE=\"$LIBXML_INCLUDE\"\n   AC_DEFINE(HAVE_LIBXML, 1, [Define to 1 if libxml2 is available.])\nfi\nAC_SUBST(LIBXML_INCLUDE)\nAC_SUBST(LIBXML_LIBS)\n\nif test -f \"${LIBXML_LIBPATH_}/libxml2-static.a\"; then\n   LIBXML_STATIC_LIBS=\"-L${LIBXML_LIBPATH_} -lxml2-static\"\nelse\n   LIBXML_STATIC_LIBS=${LIBXML_LIBS}\nfi\n\n: ${LIBXSLT_PATH=$LIBXML_PATH}\nNCBI_CHECK_THIRD_PARTY_LIB_EX(libxslt, LIBXSLT, xslt,\n [AC_LANG_PROGRAM([#include <libxslt/xslt.h>], [xsltInit()])],\n [], [$LIBXML_LIBS $Z_LIBS], [$LIBXML_INCLUDE])\n\n# XXX - they might be in different directories in some setups\nif test -f \"${LIBXML_LIBPATH_}/libxslt-static.a\"; then\n   LIBXSLT_STATIC_LIBS=\"-L${LIBXML_LIBPATH_} -lxslt-static\"\nelse\n   LIBXSLT_STATIC_LIBS=${LIBXSLT_LIBS}\nfi\n\nAC_PATH_PROG(XSLTPROC, xsltproc, :,\n   [$LIBXSLT_PATH/bin:`dirname $LIBXML_LIBPATH_ 2>/dev/null`/bin:$PATH])\n\n: ${LIBEXSLT_PATH=$LIBXSLT_PATH}\nif env PKG_CONFIG_PATH=$LIBEXSLT_PATH/lib/pkgconfig pkg-config libexslt --libs \\\n    2>/dev/null | $EGREP_Q gcrypt; then\n   exslt_autodep=$GCRYPT_LIBS\nelse\n   exslt_autodep=\nfi\nNCBI_CHECK_THIRD_PARTY_LIB_EX(libexslt, LIBEXSLT, exslt,\n [AC_LANG_PROGRAM([#include <libexslt/exslt.h>], [exsltRegisterAll()])],\n [$exslt_autodep], [$LIBXSLT_LIBS $LIBXML_LIBS $Z_LIBS], [$LIBXSLT_INCLUDE])\n\n# XXX - they might be in different directories in some setups\nif test -f \"${LIBXML_LIBPATH_}/libexslt-static.a\"; then\n   LIBEXSLT_STATIC_LIBS=\"-L${LIBXML_LIBPATH_} -lexslt-static $GCRYPT_LIBS\"\nelse\n   LIBEXSLT_STATIC_LIBS=${LIBEXSLT_LIBS}\nfi\n\nif test \"$with_xerces\" != no; then\n   if test \"${with_xerces-yes}\" != yes; then\n      XERCES_PATH=$with_xerces\n   fi\n   if test -d \"$XERCES_PATH\"; then\n      NCBI_FIX_DIR(XERCES_PATH)\n   fi\n   vpath=\"$XERCES_PATH/${compiler_vpfx}${DEBUG_SFX}${bit64_sfx}${mt_sfx}\"\n   if test -d \"$vpath/lib\"; then\n      XERCES_PATH=$vpath\n      NCBI_FIX_DIR(XERCES_PATH)\n   elif test -d \"$vpath\"; then\n      : ${XERCES_LIBPATH=$vpath}\n      NCBI_FIX_DIR(XERCES_LIBPATH)\n   else\n      vpath=\"$XERCES_PATH/${compiler_pfx}${DEBUG_SFX}${bit64_sfx}${mt_sfx}\"\n      if test -d \"$vpath/lib\"; then\n         XERCES_PATH=$vpath\n         NCBI_FIX_DIR(XERCES_PATH)\n      elif test -d \"$vpath\"; then\n         XERCES_LIBPATH=$vpath\n         NCBI_FIX_DIR(XERCES_LIBPATH)\n      fi\n   fi\n   if test -d \"$XERCES_PATH\"; then\n      in_path=\" in $XERCES_PATH\"\n      : ${XERCES_INCLUDE=-I$XERCES_PATH/include}\n      : ${XERCES_LIBPATH=$XERCES_PATH/lib}\n   else\n      in_path=''\n   fi\n   NCBI_RPATHIFY(XERCES_LIBPATH_, $XERCES_LIBPATH)\n   XERCES_LIBS=\"$XERCES_LIBPATH_ -lxerces-c\"\n   AC_CACHE_CHECK([for Xerces-C++$in_path], ncbi_cv_lib_xerces_c,\n      [CPPFLAGS=\"$XERCES_INCLUDE $orig_CPPFLAGS\"\n       LIBS=\"$XERCES_LIBS $ICU_LIBS $orig_LIBS\"\n       AC_LINK_IFELSE(\n          [AC_LANG_PROGRAM([[#include <xercesc/dom/DOM.hpp>]],\n             [[xercesc::DOMImplementation* impl\n               = xercesc::DOMImplementationRegistry::getDOMImplementation\n                 (xercesc::XMLString::transcode(\"XML 1.0\"));]])],\n          ncbi_cv_lib_xerces_c=yes, ncbi_cv_lib_xerces_c=no)])\n   if test $ncbi_cv_lib_xerces_c = yes; then\n      if test -f \"$XERCES_LIBPATH/libxerces-c-static.a\"; then\n         XERCES_STATIC_LIBS=\"-L$XERCES_LIBPATH -lxerces-c-static $CURL_LIBS\"\n      else\n         XERCES_STATIC_LIBS=$XERCES_LIBS\n      fi\n   else\n      NCBI_MISSING_PACKAGE(xerces)\n   fi\nfi\nif test \"$with_xerces\" != no; then\n   NCBI_PACKAGE(Xerces)\n   AC_DEFINE(HAVE_XERCES, 1, [Define to 1 if Xerces-C++ is available.])\nelse\n   XERCES_INCLUDE=\n   XERCES_LIBS=\n   XERCES_STATIC_LIBS=\nfi\n\nif test \"$with_xalan\" != no; then\n   if test \"${with_xalan-yes}\" != yes; then\n      XALAN_PATH=$with_xalan\n   fi\n   if test -d \"$XALAN_PATH\"; then\n      NCBI_FIX_DIR(XALAN_PATH)\n   fi\n   vpath=\"$XALAN_PATH/${compiler_vpfx}${DEBUG_SFX}${bit64_sfx}${mt_sfx}\"\n   if test -d \"$vpath/lib\"; then\n      XALAN_PATH=$vpath\n      NCBI_FIX_DIR(XALAN_PATH)\n   elif test -d \"$vpath\"; then\n      : ${XALAN_LIBPATH=$vpath}\n      NCBI_FIX_DIR(XALAN_LIBPATH)\n   else\n      vpath=\"$XALAN_PATH/${compiler_pfx}${DEBUG_SFX}${bit64_sfx}${mt_sfx}\"\n      if test -d \"$vpath/lib\"; then\n         XALAN_PATH=$vpath\n         NCBI_FIX_DIR(XALAN_PATH)\n      elif test -d \"$vpath\"; then\n         XALAN_LIBPATH=$vpath\n         NCBI_FIX_DIR(XALAN_LIBPATH)\n      fi\n   fi\n   if test -d \"$XALAN_PATH\"; then\n      in_path=\" in $XALAN_PATH\"\n      : ${XALAN_INCLUDE=-I$XALAN_PATH/include}\n      : ${XALAN_LIBPATH=$XALAN_PATH/lib}\n   else\n      in_path=''\n   fi\n   NCBI_RPATHIFY(XALAN_LIBPATH_, $XALAN_LIBPATH)\n   XALAN_LIBS=\"$XALAN_LIBPATH_ -lxalan-c -lxalanMsg\"\n   AC_CACHE_CHECK([for Xalan-C++$in_path], ncbi_cv_lib_xalan_c,\n      [CPPFLAGS=\"$XALAN_INCLUDE $XERCES_INCLUDE $orig_CPPFLAGS\"\n       LIBS=\"$XALAN_LIBS $XERCES_LIBS $ICU_LIBS $orig_LIBS\"\n       AC_LINK_IFELSE(\n          [AC_LANG_PROGRAM([[#include <xalanc/XalanTransformer/XalanTransformer.hpp>]],\n             [[xalanc::XalanTransformer::initialize();]])],\n          ncbi_cv_lib_xalan_c=yes, ncbi_cv_lib_xalan_c=no)])\n   if test $ncbi_cv_lib_xalan_c = yes; then\n      if test -f \"$XALAN_LIBPATH/libxalan-c-static.a\"; then\n         XALAN_STATIC_LIBS=\"-L$XALAN_LIBPATH -lxalan-c-static -lxalanMsg-static\"\n      else\n         XALAN_STATIC_LIBS=$XALAN_LIBS\n      fi\n   else\n      NCBI_MISSING_PACKAGE(xalan)\n   fi\nfi\nif test \"$with_xalan\" != no; then\n   NCBI_PACKAGE(Xalan)\n   AC_DEFINE(HAVE_XALAN, 1, [Define to 1 if Xalan-C++ is available.])\nelse\n   XALAN_INCLUDE=\n   XALAN_LIBS=\n   XALAN_STATIC_LIBS=\nfi\n\ntest -d SunWS_cache  &&  rm -r SunWS_cache\n\nif test \"$with_zorba\" != no; then\n   if test \"${with_zorba-yes}\" != yes; then\n      ZORBA_PATH=$with_zorba\n   fi\n   if test -d \"$ZORBA_PATH\"; then\n      NCBI_FIX_DIR(ZORBA_PATH)\n   fi\n   vpath=\"$ZORBA_PATH/${compiler_vpfx}${DEBUG_SFX}${mt_sfx}${bit64_sfx}\"\n   if test -d \"$vpath/lib\"; then\n      ZORBA_PATH=$vpath\n      NCBI_FIX_DIR(ZORBA_PATH)\n   elif test -d \"$vpath\"; then\n      : ${ZORBA_LIBPATH=$vpath}\n      NCBI_FIX_DIR(ZORBA_LIBPATH)\n   else\n      vpath=\"$ZORBA_PATH/${compiler_pfx}${DEBUG_SFX}${mt_sfx}${bit64_sfx}\"\n      if test -d \"$vpath/lib\"; then\n         ZORBA_PATH=$vpath\n         NCBI_FIX_DIR(ZORBA_PATH)\n      elif test -d \"$vpath\"; then\n         ZORBA_LIBPATH=$vpath\n         NCBI_FIX_DIR(ZORBA_LIBPATH)\n      fi\n   fi\n   ZORBA_CONFIG=\"$ZORBA_PATH/bin/zorba-config\"\n   if test -x \"$ZORBA_CONFIG\"; then\n      ZORBA_PATH=`$ZORBA_CONFIG --prefix`\n      : ${ZORBA_INCLUDE=`$ZORBA_CONFIG --cppflags`}\n   fi\n   if test -d \"$ZORBA_PATH\"; then\n      in_path=\" in $ZORBA_PATH\"\n      : ${ZORBA_INCLUDE=-I$ZORBA_PATH/include}\n      : ${ZORBA_LIBPATH=$ZORBA_PATH/lib}\n   else\n      in_path=''\n   fi\n   if test -x \"$ZORBA_CONFIG\"; then\n      ZORBA_LIBS=`$ZORBA_CONFIG --libs`\n   else\n      NCBI_RPATHIFY(ZORBA_LIBPATH_, $ZORBA_LIBPATH)\n      ZORBA_LIBS=\"$ZORBA_LIBPATH_ -lzorba_simplestore\"\n   fi\n   AC_CACHE_CHECK([for Zorba$in_path], ncbi_cv_lib_zorba,\n      [CPPFLAGS=\"$ZORBA_INCLUDE $orig_CPPFLAGS\"\n       LIBS=\"$ZORBA_LIBS $orig_LIBS\"\n       AC_LINK_IFELSE(\n          [AC_LANG_PROGRAM([[#include <zorba/zorba.h>]],\n             [[zorba::Version v = zorba::Zorba::version();]])],\n          ncbi_cv_lib_zorba=yes, ncbi_cv_lib_zorba=no)])\n   if test $ncbi_cv_lib_zorba = yes; then\n      if test -x \"$ZORBA_CONFIG\"; then\n         ZORBA_STATIC_LIBS=`$ZORBA_CONFIG --static-libs`\n      elif test -f \"$ZORBA_LIBPATH/libzorba_simplestore-static.a\"; then\n         ZORBA_STATIC_LIBS=\"-L$ZORBA_LIBPATH -lzorba_simplestore-static $XERCES_STATIC_LIBS $ICU_STATIC_LIBS $LIBXSLT_STATIC_LIBS $LIBXML_STATIC_LIBS\"\n      else\n         ZORBA_STATIC_LIBS=$ZORBA_LIBS\n      fi\n   else\n      NCBI_MISSING_PACKAGE(zorba)\n   fi\nfi\nif test \"$with_zorba\" != no; then\n   NCBI_PACKAGE(Zorba)\n   AC_DEFINE(HAVE_ZORBA, 1, [Define to 1 if Zorba is available.])\nelse\n   ZORBA_INCLUDE=\n   ZORBA_LIBS=\n   ZORBA_STATIC_LIBS=\nfi\n\n### SQLite\ncase \"$with_sqlite3\" in\n   yes | '' ) ;;\n   *        ) SQLITE3_PATH=$with_sqlite3 ;;\nesac\n\nif test -d \"$SQLITE3_PATH\"; then\n   NCBI_FIX_DIR(SQLITE3_PATH)\nfi\nif test -d \"$SQLITE3_PATH/${compiler_pfx}${DEBUG_SFX}${MT_SFX}${bit64_sfx}/lib\"; then\n   SQLITE3_LIBDIR=$SQLITE3_PATH/${compiler_pfx}${DEBUG_SFX}${MT_SFX}${bit64_sfx}/lib\nelif test -d $SQLITE3_PATH/lib${bit64_sfx}; then\n   SQLITE3_LIBDIR=$SQLITE3_PATH/lib${bit64_sfx}\nelse\n   SQLITE3_LIBDIR=$SQLITE3_PATH/lib\nfi\nNCBI_RPATHIFY(SQLITE3_LIBPATH, $SQLITE3_LIBDIR)\nNCBI_CHECK_THIRD_PARTY_LIB(sqlite3,\n AC_LANG_PROGRAM([#include <sqlite3.h>],\n    [sqlite3_pcache_methods m;\n     int status = sqlite3_config(SQLITE_CONFIG_GETPCACHE, &m);]))\nif test -n \"$SQLITE3_LIBS\"; then\n   CPPFLAGS=\"$SQLITE3_INCLUDE $orig_CPPFLAGS\"\n   AC_CHECK_HEADER(sqlite3async.h,\n      [AC_DEFINE(HAVE_SQLITE3ASYNC_H, 1,\n          [Define to 1 if you have the <sqlite3async.h> header file.])\n       NCBI_PACKAGE(SQLITE3ASYNC)])\n   LIBS=\"$SQLITE3_LIBS $orig_LIBS\"\n   AC_CHECK_FUNCS(sqlite3_unlock_notify)\nfi\nif test -n \"$SQLITE3_LIBS\" -a -f \"$SQLITE3_LIBDIR/libsqlite3-static.a\"; then\n   SQLITE3_STATIC_LIBS=\"-L$SQLITE3_LIBDIR -lsqlite3-static\"\nelse\n   SQLITE3_STATIC_LIBS=$SQLITE3_LIBS\nfi\n\n\n### OEChem\n# somewhat kludgish, as we now wanto to add in oeiupac and oedepict,\n# which depend on oechem....\nNCBI_CHECK_THIRD_PARTY_LIB(oechem,\n AC_LANG_PROGRAM([#include <oechem.h>],\n    [OEChem::OEMol mol; OEChem::OEConfBase* c = mol.GetActive();]),\n  -loeiupac -loedepict -loechem -loesystem -loeplatform -lz, $NETWORK_LIBS)\nif test -n \"$OECHEM_LIBS\"; then\n   OECHEM_LIBS=`echo $OECHEM_LIBS | sed -e 's/-loechem \\(.*-loechem .*\\)/\\1/'`\nfi\ntest -d SunWS_cache  &&  rm -r SunWS_cache\n\n\n### Sun/Univa Grid Engine\ncase \"$with_sge\" in\n   yes | \"\" ) ;;\n   *        ) SGE_PATH=$with_sge ;;\nesac\nif test -d \"$SGE_PATH\" -a -z \"$SGE_LIBPATH\"; then\n   case \"$host:$NCBI_PLATFORM_BITS\" in\n      i?86-*-darwin*      ) SGE_PLATFORMS='darwin-x86'          ;;\n      i?86-*-linux*       ) SGE_PLATFORMS='lx24-x86 lx-x86'     ;;\n      i?86-*-solaris*:32  ) SGE_PLATFORMS='sol-x86'             ;;\n      i?86-*-solaris*:64  ) SGE_PLATFORMS='sol-amd64'           ;;\n      powerpc-*-darwin*   ) SGE_PLATFORMS='darwin-ppc'          ;;\n      sparc-*-solaris*:32 ) SGE_PLATFORMS='sol-sparc'           ;;\n      sparc-*-solaris*:64 ) SGE_PLATFORMS='sol-sparc64'         ;;\n      x86_64-*-linux*     ) SGE_PLATFORMS='lx24-amd64 lx-amd64' ;;\n   esac\n   for x in $SGE_PLATFORMS; do\n      if test -d \"$SGE_PATH/lib/$x\"; then\n         SGE_LIBPATH=\"$SGE_PATH/lib/$x\"\n         break\n      fi\n   done\n   NCBI_RPATHIFY(SGE_LIBPATH, $SGE_LIBPATH)\nfi\nNCBI_CHECK_THIRD_PARTY_LIB_EX(sge, SGE, drmaa,\n  [[AC_LANG_PROGRAM([[#include <sys/types.h>\n                      #include <drmaa.h>]],\n     [[char buf[1024]; drmaa_init(\"SGE\", buf, sizeof(buf));]])]])\n\n\n### muParser\ncase \"$with_muparser\" in\n   yes | '' ) ;;\n   *        ) MUPARSER_PATH=$with_muparser ;;\nesac\n\nif test -d \"$MUPARSER_PATH\"; then\n   NCBI_FIX_DIR(MUPARSER_PATH)\nfi\nif test -d \"$MUPARSER_PATH/${compiler_vpfx}${DEBUG_SFX}${bit64_sfx}/lib\"; then\n   MUPARSER_LIBPATH=-L$MUPARSER_PATH/${compiler_vpfx}${DEBUG_SFX}${bit64_sfx}/lib\nelif test -d \"$MUPARSER_PATH/${compiler_pfx}${DEBUG_SFX}${bit64_sfx}/lib\"; then\n   MUPARSER_LIBPATH=-L$MUPARSER_PATH/${compiler_pfx}${DEBUG_SFX}${bit64_sfx}/lib\nfi\n\nNCBI_CHECK_THIRD_PARTY_LIB(muparser,\n  [[AC_LANG_PROGRAM([[#include <muParser.h>]],\n     [[mu::Parser parser;]])]])\n\n\n### hdf5\ncase \"$with_hdf5\" in\n   yes | '' ) ;;\n   *        ) HDF5_PATH=$with_hdf5 ;;\nesac\n\nif test -d \"$HDF5_PATH/${compiler_vpfx}${DEBUG_SFX}${bit64_sfx}\"; then\n   HDF5_PATH=$HDF5_PATH/${compiler_vpfx}${DEBUG_SFX}${bit64_sfx}\nelif test -d \"$HDF5_PATH/${compiler_pfx}${DEBUG_SFX}${bit64_sfx}\"; then\n   HDF5_PATH=$HDF5_PATH/${compiler_pfx}${DEBUG_SFX}${bit64_sfx}\nfi\nif test -d \"$HDF5_PATH\"; then\n   NCBI_FIX_DIR(HDF5_PATH)\nfi\n\nNCBI_CHECK_THIRD_PARTY_LIB_EX(hdf5, HDF5, hdf5_cpp,\n  [[AC_LANG_PROGRAM([[#include <H5Cpp.h>]],\n     [[H5::H5Library::open();]])]],\n  [-lhdf5])\n\n\n### Image libraries\n# : ${JPEG_PATH=/usr/sfw}\n# Grr... jpeglib.h isn't especially well-behaved.\nNCBI_CHECK_THIRD_PARTY_LIB(jpeg,\n AC_LANG_PROGRAM([#include <sys/types.h>\n                  #include <stdio.h>\n                  extern \"C\" {\n                  #include <jpeglib.h>\n                  }],\n    [struct jpeg_decompress_struct cinfo;\n     struct jpeg_error_mgr         jerr;\n     cinfo.err = jpeg_std_error(&jerr);\n ]))\n\n# : ${PNG_PATH=/usr/sfw}\nNCBI_CHECK_THIRD_PARTY_LIB(png,\n AC_LANG_PROGRAM([#include <png.h>],\n    [png_structp png_ptr\n      = png_create_read_struct(PNG_LIBPNG_VER_STRING, NULL, NULL, NULL);\n ]), $Z_LIBS, [], $Z_INCLUDE)\n\n# : ${TIFF_PATH=/usr/sfw}\nNCBI_CHECK_THIRD_PARTY_LIB(tiff,\n AC_LANG_PROGRAM([#include <tiffio.h>],\n    [TIFF* tiff = TIFFOpen(\"foo\", \"r\");]), $Z_LIBS, $JPEG_LIBS)\n## etc.\n\n# Paths?\nwith_ungif=$with_gif\nNCBI_CHECK_THIRD_PARTY_LIB(ungif,\n AC_LANG_PROGRAM([extern \"C\" {\n                  #include <gif_lib.h>\n                  }],\n    [GifFileType* fp = DGifOpenFileName(\"foo\");]), $X_LIBS -lX11)\nif test \"$with_ungif\" = \"no\"; then\n   NCBI_CHECK_THIRD_PARTY_LIB(gif,\n    AC_LANG_PROGRAM([extern \"C\" {\n                     #include <gif_lib.h>\n                     }],\n       [GifFileType* fp = DGifOpenFileName(\"foo\");]), $X_LIBS -lX11)\nelse\n   AC_DEFINE(HAVE_LIBGIF, 1, [Define to 1 if libgif is available.])\n   GIF_INCLUDE=$UNGIF_INCLUDE\n   GIF_LIBS=$UNGIF_LIBS\nfi\n\ncase \"$x_libraries\" in */*) : ${XPM_PATH=`dirname \"$x_libraries\"`} ;; esac\nNCBI_CHECK_THIRD_PARTY_LIB(Xpm,\n AC_LANG_PROGRAM([#include <X11/xpm.h>],\n    [XpmImage image; XpmInfo info;\n     XpmReadFileToXpmImage(\"foo\", &image, &info);]), $X_LIBS -lX11, [],\n    $X_CFLAGS)\n# The use of X_CFLAGS is probably redundant, but shouldn't hurt.\n\n## FreeType and FTGL\nif test \"$with_freetype\" != \"no\" ; then\n   : ${FREETYPE_BINPATH=$FREETYPE_PATH/bin}\n   AC_PATH_PROG(freetype_config, freetype-config, [],\n                [$FREETYPE_BINPATH:$PATH])\n   if test -n \"$freetype_config\" ; then\n      : ${FREETYPE_BINPATH=`dirname $freetype_config`}\n      : ${FREETYPE_INCLUDE=`$freetype_config --cflags`}\n      NCBI_RPATHIFY_OUTPUT_COND(FREETYPE_LIBS, $freetype_config --libs,\n         [$no_usr_lib])\n      case \"$host_os:$bit64_sfx\" in\n         solaris*:64 )\n            ftprefix=`$freetype_config --exec-prefix`\n            if test -d \"$ftprefix/lib/64\"; then\n               FREETYPE_LIBS=`echo $FREETYPE_LIBS \\\n                   | sed -e \"s,$ftprefix/lib ,$ftprefix/lib/64 ,g\"`\n            fi\n            ;;\n      esac\n      AC_CACHE_CHECK([whether FREETYPE_INCLUDE needs doctoring],\n                     ncbi_cv_lib_freetype_fix_include,\n         [CPPFLAGS=\"$FREETYPE_INCLUDE $orig_CPPFLAGS\"\n          AC_COMPILE_IFELSE(\n             [AC_LANG_PROGRAM(\n                 [[#include <ft2build.h>]], [])],\n             [ncbi_cv_lib_freetype_fix_include=no],\n             [ncbi_cv_lib_freetype_fix_include=yes])])\n      if test \"$ncbi_cv_lib_freetype_fix_include\" = yes; then\n         FREETYPE_INCLUDE=`echo \"$FREETYPE_INCLUDE\" |\\\n             sed -e 's:\\(-I[[^ ]]*\\)\\(/freetype2\\):\\1 \\1\\2:g'`\n      fi\n      AC_CACHE_CHECK([whether FreeType works], ncbi_cv_lib_freetype,\n         [CPPFLAGS=\"$FREETYPE_INCLUDE $orig_CPPFLAGS\"\n          LIBS=\"$FREETYPE_LIBS $orig_LIBS\"\n          AC_LINK_IFELSE(\n             [AC_LANG_PROGRAM(\n                 [[#include <ft2build.h>\n                   #include FT_FREETYPE_H]],\n                 [[FT_Select_Charmap(NULL, ft_encoding_unicode);]])],\n             [ncbi_cv_lib_freetype=yes], [ncbi_cv_lib_freetype=no])])\n      if test \"$ncbi_cv_lib_freetype\" = no; then\n         NCBI_MISSING_PACKAGE(freetype)\n      fi\n   else\n      NCBI_MISSING_PACKAGE(freetype)\n   fi\nfi\nif test \"$with_freetype\" = \"no\" ; then\n   FREETYPE_PATH=\"No_FREETYPE\"\n   FREETYPE_INCLUDE=\n   FREETYPE_LIBS=\nelse\n   NCBI_PACKAGE(FreeType)\n   AC_DEFINE(HAVE_FREETYPE, 1, [Define to 1 if FreeType is available.])\nfi\n\ncase \"$with_ftgl\" in\n   yes | '' ) ;;\n   *        ) FTGL_PATH=$with_ftgl ;;\nesac\n\nif test -d \"$FTGL_PATH\"; then\n   NCBI_FIX_DIR(FTGL_PATH)\nfi\nif test -d \"$FTGL_PATH/${compiler_vpfx}${DEBUG_SFX}${bit64_sfx}/lib\"; then\n   FTGL_LIBDIR=$FTGL_PATH/${compiler_vpfx}${DEBUG_SFX}${bit64_sfx}/lib\nelif test -d \"$FTGL_PATH/${compiler_pfx}${DEBUG_SFX}${bit64_sfx}/lib\"; then\n   FTGL_LIBDIR=$FTGL_PATH/${compiler_pfx}${DEBUG_SFX}${bit64_sfx}/lib\nfi\nNCBI_FIX_DIR(FTGL_LIBDIR)\nNCBI_RPATHIFY(FTGL_LIBPATH, $FTGL_LIBDIR)\n\nNCBI_CHECK_THIRD_PARTY_LIB(ftgl,\n  [[AC_LANG_PROGRAM([[#include <FTGL/ftgl.h>]], [[FTSimpleLayout layout;]])]],\n  [$FREETYPE_LIBS], [], [$FREETYPE_INCLUDE])\n\n\nNCBI_CHECK_THIRD_PARTY_LIB(magic,\n   [AC_LANG_PROGRAM([#include <magic.h>],\n       [magic_t m = magic_open(17);])])\n\n\n# Mimetic\ncase \"$with_mimetic\" in\n   yes | '' ) ;;\n   *        ) MIMETIC_PATH=$with_mimetic ;;\nesac\nif test -d \"$MIMETIC_PATH\"; then\n   NCBI_FIX_DIR(MIMETIC_PATH)\nfi\nfor d in \"$MIMETIC_LIBDIR\" \\\n         \"$MIMETIC_PATH/${compiler_vpfx}${DEBUG_SFX}${bit64_sfx}/lib\" \\\n         \"$MIMETIC_PATH/${compiler_pfx}${DEBUG_SFX}${bit64_sfx}/lib\" \\\n         \"$MIMETIC_PATH/lib${bit64_sfx}\" \\\n         \"$MIMETIC_PATH/${compiler_vpfx}${DEBUG_SFX}/lib\" \\\n         \"$MIMETIC_PATH/${compiler_pfx}${DEBUG_SFX}/lib\" \\\n         \"$MIMETIC_PATH/lib\"; do\n   if test -d \"$d\"; then\n      MIMETIC_LIBDIR=$d\n      break\n   fi\ndone\nNCBI_RPATHIFY(MIMETIC_LIBPATH, $MIMETIC_LIBDIR)\n\nNCBI_CHECK_THIRD_PARTY_LIB(mimetic,\n   [AC_LANG_PROGRAM([#include <mimetic/mimetic.h>],\n       [mimetic::MimeEntity me;])])\n\n\n# gSOAP++\ncase \"$with_gsoap\" in\n   yes | '' ) ;;\n   *        ) GSOAP_PATH=$with_gsoap ;;\nesac\nif test -d \"$GSOAP_PATH\"; then\n   NCBI_FIX_DIR(GSOAP_PATH)\nfi\nfor d in \"$GSOAP_LIBDIR\" \\\n         \"$GSOAP_PATH/${compiler_vpfx}${DEBUG_SFX}${mt_sfx}${bit64_sfx}/lib\" \\\n         \"$GSOAP_PATH/${compiler_pfx}${DEBUG_SFX}${mt_sfx}${bit64_sfx}/lib\" \\\n         \"$GSOAP_PATH/lib${bit64_sfx}\" \\\n         \"$GSOAP_PATH/${compiler_vpfx}${DEBUG_SFX}${mt_sfx}/lib\" \\\n         \"$GSOAP_PATH/${compiler_pfx}${DEBUG_SFX}${mt_sfx}/lib\" \\\n         \"$GSOAP_PATH/lib\"; do\n   if test -d \"$d\"; then\n      GSOAP_LIBDIR=$d\n      NCBI_FIX_DIR(GSOAP_LIBDIR)\n      break\n   fi\ndone\nNCBI_RPATHIFY(GSOAP_LIBPATH, $GSOAP_LIBDIR)\n\n: ${GSOAP_BINDIR=`dirname \"$GSOAP_LIBDIR\"`/bin}\nAC_PATH_PROG(GSOAP_SOAPCPP2, soapcpp2, [], $GSOAP_BINDIR:$PATH)\nAC_PATH_PROG(GSOAP_WSDL2H,   wsdl2h,   [], $GSOAP_BINDIR:$PATH)\n\nNCBI_CHECK_THIRD_PARTY_LIB_EX(gsoap, GSOAP, gsoapssl++,\n   [AC_LANG_PROGRAM([#include <stdsoap2.h>\n        SOAP_FMAC3 const char** SOAP_FMAC4 soap_faultcode(struct soap*)\n        { return NULL; }\n        SOAP_FMAC3 const char** SOAP_FMAC4 soap_faultsubcode(struct soap*)\n        { return NULL; }\n        SOAP_FMAC3 const char** SOAP_FMAC4 soap_faultstring(struct soap*)\n        { return NULL; }\n        SOAP_FMAC3 const char** SOAP_FMAC4 soap_faultdetail(struct soap*)\n        { return NULL; }\n        SOAP_FMAC3 const char* SOAP_FMAC4 soap_check_faultsubcode(struct soap*)\n        { return NULL; }\n        SOAP_FMAC3 const char* SOAP_FMAC4 soap_check_faultdetail(struct soap*)\n        { return NULL; }\n        SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap*) { }\n        SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap*) { return 0; }\n        SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap*) { return 0; }\n        SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap*) { }\n        SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap*) { return 0; }\n        SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap*) { return 0; }],\n       [soap s;])],\n   $OPENSSL_LIBS $Z_LIBS)\n\n\n# Apache Avro\nif test \"$with_avro\" != no; then\n   case \"$with_avro\" in\n      yes | '' ) ;;\n      *        ) AVRO_PATH=$with_avro ;;\n   esac\n   for d in \"$AVRO_PATH/${compiler_vpfx}${DEBUG_SFX}${mt_sfx}${bit64_sfx}\" \\\n            \"$AVRO_PATH/${compiler_pfx}${DEBUG_SFX}${mt_sfx}${bit64_sfx}\" \\\n            \"$AVRO_PATH/${compiler_vpfx}${DEBUG_SFX}${mt_sfx}\" \\\n            \"$AVRO_PATH/${compiler_pfx}${DEBUG_SFX}${mt_sfx}\"; do\n      if test -d \"$d\"; then\n         AVRO_PATH=$d\n         break\n      fi\n   done\n   if test -d \"$AVRO_PATH\"; then\n      NCBI_FIX_DIR(AVRO_PATH)\n   fi\nfi\nNCBI_CHECK_THIRD_PARTY_LIB_EX(avro, AVRO, avrocpp,\n   [AC_LANG_PROGRAM([#include <avro/Node.hh>],\n      [avro::Name name(\"foo\");])],\n   [$BOOST_LIBPATH $BOOST_FILESYSTEM_LIBS $BOOST_SYSTEM_LIBS $BOOST_PROGRAM_OPTIONS_LIBS $BOOST_IOSTREAMS_LIBS $RT_LIBS $Z_LIBS $BZ2_LIBS],\n   [],\n   [$BOOST_INCLUDE])\nif test -n \"$AVRO_LIBS\"; then\n   if test -f \"$AVRO_PATH/lib/libavrocpp_s.a\"; then\n      AVRO_STATIC_LIBS=\"$AVRO_LIBPATH -lavrocpp_s $BOOST_LIBPATH $BOOST_FILESYSTEM_LIBS $BOOST_SYSTEM_LIBS $BOOST_PROGRAM_OPTIONS_LIBS $BOOST_IOSTREAMS_LIBS $RT_LIBS $Z_LIBS $BZ2_LIBS\"\n   else\n      AVRO_STATIC_LIBS=$AVRO_LIBS\n   fi\n   AC_PATH_PROG(AVROGENCPP, avrogencpp, [], [$AVRO_PATH/bin:$PATH])\nfi\n\n# MongoDB\ncase \"$with_mongodb\" in\n   yes | no | '' ) ;;\n   *             ) MONGODB_PATH=$with_mongodb ;;\nesac\nif test -d \"$MONGODB_PATH\"; then\n   NCBI_FIX_DIR(MONGODB_PATH)\nfi\nif test -d $MONGODB_PATH/lib${bit64_sfx}; then\n   MONGODB_LIBDIR=$MONGODB_PATH/lib${bit64_sfx}\nelse\n   MONGODB_LIBDIR=$MONGODB_PATH/lib\nfi\n# need Boost rpath\nNCBI_RPATHIFY(MONGODB_LIBPATH, $MONGODB_LIBDIR)\nNCBI_CHECK_THIRD_PARTY_LIB_EX(mongodb, MONGODB, mongoclient,\n   [AC_LANG_PROGRAM([#include <mongo/client/dbclient.h>],\n      [std::vector<mongo::HostAndPort> v;\n       mongo::DBClientReplicaSet client(\"foo\", v);\n       client.connect();])],\n   [$BOOST_LIBPATH $boost_fs_lib $BOOST_REGEX_LIBS $BOOST_THREAD_LIBS], [],\n   [$BOOST_INCLUDE])\n# MongoDB's own library is normally static, but its supporting Boost\n# libraries might not be by default.\nif test -n \"$MONGODB_LIBS\"; then\n   MONGODB_STATIC_LIBS=\"$MONGODB_LIBPATH -lmongodb $BOOST_LIBPATH $boost_fs_static_lib $BOOST_REGEXP_STATIC_LIBS $BOOST_THREAD_STATIC_LIBS\"\nelse\n   MONGODB_STATIC_LIBS=\nfi\n\n### Restore original compiler/linker flags\nLIBS=\"$orig_LIBS\"\nCPPFLAGS=\"$orig_CPPFLAGS\"\n\n\n### Optional projects\n### --------------------------------------------\n\n\n## `local_lbsm' support\n\nlocal_lbsm=\"ncbi_lbsm ncbi_lbsm_ipc ncbi_lbsmd\"\n\n## requires semaphores (lacking on older versions of Cygwin and Darwin)\nif test $ncbi_cv_sys_semaphores = no; then\n    NCBI_MISSING_PACKAGE(local-lbsm)\nfi\n## disable by default even on newer Cygwin, as its semaphores don't\n## actually work very well\ntest $OSTYPE = cygwin  &&  : ${with_local_lbsm=no}\n\nfor fff in $local_lbsm ; do\n   if test ! -f ${real_srcdir}/src/connect/${fff}.c ; then\n      if test \"$with_local_lbsm\" = \"yes\" ; then\n         AC_MSG_ERROR([--with-local-lbsm:  src/connect/${fff}.c is  missing])\n      fi\n      with_local_lbsm=\"no\"\n      break\n   fi\ndone\n\nif test \"$with_local_lbsm\" = \"no\" ; then\n   local_lbsm=\"ncbi_lbsmd_stub\"\nelse\n   NCBI_PROJECT(local_lbsm)\n   AC_DEFINE(HAVE_LOCAL_LBSM, 1,\n             [Define to 1 if local LBSM support is available.])\nfi\n\n\n## `connext' support\n\nconnext=\"ncbi_dblb ncbi_ifconf ncbi_localnet\"\n\nfor fff in $connext ; do\n   if test ! -f ${real_srcdir}/src/connect/ext/${fff}.c ; then\n      if test \"$with_connext\" = \"yes\" ; then\n         AC_MSG_ERROR([--with-connext:  src/connect/ext/${fff}.c is missing])\n      fi\n      with_connext=\"no\"\n      break\n   fi\ndone\n\nif test \"$with_connext\" = \"no\"; then\n   if test \"$with_ncbi_crypt\" = \"yes\" ; then\n      AC_MSG_ERROR([--with-ncbi-crypt specified, but CONNECT extensions are unavailable])\n   fi\n   with_ncbi_crypt=no\nfi\n\nif test \"$with_connext\" = \"no\" ; then\n   CONNEXT=\n   XCONNEXT=\nelse\n   NCBI_PROJECT(connext)\n   CONNEXT=connext\n   XCONNEXT=xconnext\n   AC_DEFINE(HAVE_LIBCONNEXT, 1,\n      [Define to 1 if non-public CONNECT extensions are available.])\nfi\n\n\n## `ncbi_crypt' support\n\nncbi_crypt=\"ncbi_crypt\"\n\nfor fff in $ncbi_crypt ; do\n   if test ! -f ${real_srcdir}/src/connect/ext/${fff}.c ; then\n      if test \"$with_ncbi_crypt\" = \"yes\" ; then\n         AC_MSG_ERROR([--with-ncbi-crypt:  src/connect/ext/${fff}.c is missing])\n      fi\n      with_ncbi_crypt=\"no\"\n      break\n   fi\ndone\n\nif test \"$with_ncbi_crypt\" = \"no\" ; then\n   ncbi_crypt=\"ncbi_crypt_stub\"\nelse\n   NCBI_PROJECT(ncbi_crypt)\n   AC_DEFINE(HAVE_NCBI_CRYPT, 1,\n      [Define to 1 if the real version of ncbi_crypt support is available.])\nfi\n\n\n## `serial' projects\n\nif test \"$with_serial\" = \"no\" ; then\n   serial=\nelse\n   NCBI_PROJECT(serial)\n   serial=\"serial\"\nfi\n\n\n## `objects' projects\n\nif test \"$with_objects\" = \"no\"  -o  -z \"$serial\" ; then\n   objects=\nelse\n   NCBI_PROJECT(objects)\n   objects=\"objects\"\nfi\n\n\n## `bdb' projects\n\ndnl NCBI_CHECK_SUBTREE(bdb)\nif test \"$with_bdb\" = \"no\" ; then\n   NoConfProjects=\"$NoConfProjects bdb\"\nfi\n\nif test ! -f ${real_srcdir}/src/db/bdb/Makefile.in  -o  \\\n        ! -d ${real_srcdir}/include/db/bdb ; then\n   if test \"${with_bdb-no}\" != \"no\" ; then\n      AC_MSG_ERROR([--with-]bdb[:  ]BDB[ sources are missing])\n   fi\n   with_bdb=\"no\"\nfi\n\n\nif test \"$with_bdb\" = \"no\" ; then\n   bdb=\n   BDB_LIB=\n   BDB_CACHE_LIB=\nelse\n   NCBI_PROJECT(bdb)\n   bdb=\"bdb\"\n   BDB_LIB=\"bdb\"\n   AC_DEFINE(HAVE_BDB, 1,\n             [Define to 1 if NCBI C++ API for BerkeleyDB is available.])\n   bdb_cache=\"ncbi_xcache_bdb\"\n   BDB_CACHE_LIB=\"ncbi_xcache_bdb\"\n   AC_DEFINE(HAVE_BDB_CACHE, 1,\n             [Define to 1 if NCBI C++ API for BerkeleyDB based data cache is available.])\nfi\n\n\n## `dbapi' projects\n\nDBAPI_DRIVER=\nDBAPI_CTLIB=\nDBAPI_DBLIB=\nDBAPI_MYSQL=\nDBAPI_ODBC=\nif test \"$with_dbapi\" = \"no\" ; then\n   dbapi=\nelse\n   NCBI_PROJECT(dbapi)\n   dbapi=\"dbapi\"\n   DBAPI_DRIVER=dbapi_driver\n   test -n \"$SYBASE_LIBS\"    &&  DBAPI_CTLIB=ncbi_xdbapi_ctlib\n   test -n \"$SYBASE_DBLIBS\"  &&  DBAPI_DBLIB=ncbi_xdbapi_dblib\n   test -n \"$MYSQL_LIBS\"     &&  DBAPI_MYSQL=ncbi_xdbapi_mysql\n   test -n \"$ODBC_LIBS\"      &&  DBAPI_ODBC=ncbi_xdbapi_odbc\nfi\n\n\n## `app' projects\n\nif test \"$with_app\" = \"no\" ; then\n   app=\nelse\n   NCBI_PROJECT(app)\n   app=\"app\"\nfi\n\n\n## `ctools' project cluster\n\nif test \"$with_ctools\" != \"no\" ; then\n   NCBI_PROJECT(ctools)\nfi\n\n\n## `gui' projects\n\nif test \"$with_gui\" = \"no\" ; then\n   gui=\nelse\n   NCBI_PROJECT(gui)\n   gui=\"gui\"\nfi\n\n\n## `algo' projects\n\nif test \"$with_algo\" = \"no\" -o -z \"$objects\" ; then\n   algo=\nelse\n   NCBI_PROJECT(algo)\n   algo=\"algo\"\nfi\n\n\n## `internal' project cluster\n\nif test \"$with_internal\" = \"no\"  \\\n    -o  ! -f \"${real_srcdir}/src/internal/Makefile.in\"; then\n   NoConfProjects=\"$NoConfProjects internal\"\n   internal=\nelse\n   reason=\"\"\n   sep=\n   if test ! -d \"${real_srcdir}/include/internal\"; then\n     reason=\"$reason${sep}headers\"\n     sep=\", \"\n   fi\n   if test \"$with_sybase\" = \"no\"; then\n     reason=\"$reason${sep}Sybase\"\n     sep=\", \"\n   fi\n   if test \"$with_ncbi_c\" = \"no\"; then\n     reason=\"$reason${sep}C-Toolkit\"\n     sep=\", \"\n   fi\n   if test \"$with_sss\" = \"no\"; then\n     reason=\"$reason${sep}SSS\"\n     sep=\", \"\n   fi\n   if test -n \"$reason\" -a \"$with_internal\" = \"yes\"; then\n      if test -z \"$with_projects\"; then\n         AC_MSG_ERROR([--with-internal:  Cannot build INTERNAL projects: missing $reason])\n      else\n         AC_MSG_WARN([--with-internal:  Cannot build all INTERNAL projects: missing $reason])\n         OPT_GROUPS=\"$OPT_GROUPS internal\"\n         internal=\"internal\"\n      fi\n   elif test -n \"$reason\"; then\n      NoConfProjects=\"$NoConfProjects internal\"\n      internal=\n   else\n      OPT_GROUPS=\"$OPT_GROUPS internal\"\n      internal=\"internal\"\n   fi\nfi\n\n## Genome Workbench\n\nif test \"$with_gbench\" != \"no\"  -a  -d \"$real_srcdir/src/app/gbench\"; then\n   reason=\"\"\n   sep=\n   if test \"$with_wxwidgets\" = \"no\"; then\n     reason=\"$reason${sep}wxWidgets\"\n     sep=\", \"\n   fi\n   if test ! -d \"$real_srcdir/src/gui/packages\"; then\n     reason=\"$reason${sep}internal packages\"\n     sep=\", \"\n   fi\n   if test \"$with_opengl\" = \"no\"; then\n     reason=\"$reason${sep}OpenGL\"\n     sep=\", \"\n   fi\n   if test \"$with_sqlite3\" = \"no\"; then\n     reason=\"$reason${sep}SQLite 3.x\"\n     sep=\", \"\n   fi\n   if test \"$with_bdb\" = \"no\"; then\n     reason=\"$reason${sep}Berkeley DB\"\n     sep=\", \"\n   fi\n   if test \"$with_mt\" = \"no\"; then\n     reason=\"$reason${sep}multithreading\"\n     sep=\", \"\n   fi\n   if test \"$with_dll\" != \"yes\"; then\n     reason=\"$reason${sep}full-DLL setup\"\n     sep=\", \"\n   fi\n   if test \"$with_algo\" = \"no\"; then\n     reason=\"$reason${sep}other required subtrees\"\n     sep=\",\"\n   fi\n   # Anything else?\n   if test -n \"$reason\" -a \"$with_gbench\" = \"yes\"; then\n      AC_MSG_ERROR([--with-gbench:  Cannot build Genome Workbench: missing $reason])\n   elif test -z \"$reason\"; then\n      NCBI_PROJECT(gbench)\n   fi\nfi\n\n\n\n### Miscellanea\n### --------------------------------------------\n\nif test \"$with_execopy\" = \"no\" ; then\n   APP_NOCOPY=\"BINCOPY=@:\"\nelse\n   APP_NOCOPY=\nfi\n\nif test \"$with_exe\" = \"no\" ; then\n   APP_OR_NULL=null\nelse\n   APP_OR_NULL=app\nfi\n\nIF_REBUILDING_LIBS=\"#\"\nIF_REBUILDING_CONDITIONALLY=\"#\"\ncase \"$with_lib_rebuilds\" in\n  yes) IF_REBUILDING_LIBS=\"\" ;;\n  ask) IF_REBUILDING_CONDITIONALLY=\"\" ;;\nesac\n\ncase \"$with_deactivation\" in\n  no) IF_DEACTIVATING=\"#\" ;;\n  * ) IF_DEACTIVATING=\"\"  ;;\nesac\n\ncase \"$with_makefile_auto_update\" in\n  no) configurables_mfname=configurables.null ;;\n  * ) configurables_mfname=configurables      ;;\nesac\n\n# Run the test suite after the build?\n\nif test -n \"$with_check\"  -a  \"$with_check\" != \"no\" ; then\n   check=\"check\"\n   if test \"$with_check\" != \"yes\" ; then\n      CHECK_ARG=`echo \"$with_check\" | sed 's/%/ /g'`\n   fi\n   NCBI_FEATURE(check)\nfi\nCHECK_TOOLS=$with_check_tools\ncase \"$CHECK_TOOLS\" in\n   [*[Vv][Aa][Ll][Gg][Rr][Ii][Nn][Dd]*] ) NCBI_FEATURE(Valgrind) ;;\nesac\nCHECK_OS_NAME=\n: ${CHECK_TIMEOUT_MULT=1}\ncase \"$host_os\" in\n   linux* )\n      if test -x /usr/bin/lsb_release; then\n         CHECK_OS_NAME=`lsb_release -is | tr A-Z a-z`\n      elif test -r /etc/SuSE-release; then\n         CHECK_OS_NAME=suse\n      elif test -r /etc/redhat-release; then\n         CHECK_OS_NAME=`cut -d' ' -f1 /etc/redhat-release | tr A-Z a-z`\n      elif test -d /usr/share/doc/ubuntu-keyring; then\n         CHECK_OS_NAME=ubuntu\n      fi\n      ;;\nesac\n\nif test \"${with_limited_linker}\" = \"yes\"; then\n   NCBI_FEATURE(LimitedLinker)\nfi\n\nFEATURES=\"$WithFeatures $WithPackages $WithProjects\"\n\n### Compute Without{Features,Packages,Projects}.  Takes quadratic time,\n### but that's life.\nm4_foreach(CATEGORY, [Features,Packages,Projects],\n  [for x in m4_indir([NCBI_ALL_]CATEGORY); do\n      case \" [$With]CATEGORY \" in\n         *\" $x \"*) ;;\n         *) [Without]CATEGORY=\"[$Without]CATEGORY[$Without]CATEGORY[Sep$x]\"\n            [Without]CATEGORY[Sep]=\" \"\n            FEATURES=\"$FEATURES -$x\"\n          ;;\n      esac\n   done\n  ])\n\n### Cleanup\n### ---------------------------------\n\ncase \"$compiler\" in\n WorkShop* )\n   test -d SunWS_cache  &&  rm -r SunWS_cache\n   ;;\n MIPSpro73 )\n   test -d ii_files     &&  rm -r ii_files\n   ;;\n KCC )\n   test -d ti_files     &&  rm -r ti_files\n   ;;\nesac\n\n\n### Get rid of the KCC \"anti-license-warning\" filter\nif test \"$KCC\" = \"yes\"  -a  -n \"$kcc_license\" ; then\n   CC=\"$kcc_CC\"\n   CXXCPP=\"$kcc_CXX -E\"\n   CXX=\"$kcc_CXX\"\nfi\n\n### Get rid of the ICC \"anti-license-warning\" filter\nif test \"$ICC\" = \"yes\"  -a  -n \"$icc_license\" ; then\n   CC=\"$icc_CC\"\n   CXXCPP=\"$icc_CXX -E\"\n   CXX=\"$icc_CXX\"\nfi\n\n### Adjust paths to wrapper.*.sh\ncase \"$CC\"     in compilers/*)     CC=\"\\$(top_srcdir)/$CC\"     ;; esac\ncase \"$CXX\"    in compilers/*)    CXX=\"\\$(top_srcdir)/$CXX\"    ;; esac\ncase \"$CXXCPP\" in compilers/*) CXXCPP=\"\\$(top_srcdir)/$CXXCPP\" ;; esac\ncase \"$AR\"     in compilers/*)     AR=\"\\$(top_srcdir)/$AR\"     ;; esac\n\n### Get Insure++ to honor the Toolkit's psrc file\ncase \"$CC\" in\n   */insure*)\n      CC=\"$CC -Zop \\$(top_srcdir)/compilers/unix/psrc -D__INSURE__\"\n      CXX=\"$CXX -Zop \\$(top_srcdir)/compilers/unix/psrc -D__INSURE__\"\n      CXXCPP=\"$CXXCPP -Zop \\$(top_srcdir)/compilers/unix/psrc -D__INSURE__\"\n      LINK_DLL=`echo \"$LINK_DLL\" | sed -e 's:insure:& -Zop \\$(top_srcdir)/compilers/unix/psrc:'`\n   ;;\nesac\n\n\n#############################################################################\n### Compose a list of configurables(\"*.in\" -- makefiles, shell scripts, etc.)\n### in subdirs to configure\n### Compose their target counterparts\n### Configure\n\nAC_MSG_NOTICE([looking for configurables below $real_srcdir...])\ntmp_sed=\"`pwd`/config.tmp.$$\"\nfor x in $NoConfProjects dll; do\n   echo \"/^\\\\.\\\\/$x/d\"\ndone > $tmp_sed\ncat >>$tmp_sed <<EOF\ns%^.\\\\(/build-system.*/Makefile*\\\\)\\\\.in\\$%$builddir\\\\1:./src\\\\1\\\\.in%\ns%^.\\\\(/build-system\\\\)\\\\(/.*\\\\)\\\\.in\\$%$builddir\\\\2:./src\\\\1\\\\2\\\\.in%\ns%^.\\\\(/[[^:]]*\\\\)\\\\.in\\$%$builddir\\\\1:./src\\\\1\\\\.in%\nEOF\ncat $tmp_sed >&AS_MESSAGE_LOG_FD\nconfigurables=`cd \"${real_srcdir}/src\"  &&  find . -name '.svn' -prune -o -name '*.in' -print | sed -f $tmp_sed`\nrm $tmp_sed\n\nif test -z \"$configurables\" ; then\n  AC_MSG_ERROR([cannot find any configurables below \"${real_srcdir}\"!])\nelse\n  AC_MSG_NOTICE([...done])\nfi\n\nncbi_runpath=`eval echo \"$pure_runpath\"`\ndnl AC_DEFINE_UNQUOTED(NCBI_RUNPATH, \"$ncbi_runpath\", [NCBI runpath])\nc_ncbi_runpath=`echo \"$ncbi_runpath\" | sed -e 's:\\\\$\\\\$:\\\\$:g'`\n\n### Template substitutions\nAC_SUBST(signature)\n\nAC_SUBST(build_root)\n\nAC_SUBST(top_srcdir)\nAC_SUBST(srcdir)\n#AC_SUBST(real_srcdir)\nAC_SUBST(includedir)\nAC_SUBST(status_dir)\nAC_SUBST(builddir)\nAC_SUBST(runpath)\nAC_SUBST(ncbi_runpath)\nAC_SUBST(c_ncbi_runpath)\n\nAC_SUBST(CC)\nAC_SUBST(CPP)\nAC_SUBST(CXX)\nAC_SUBST(AR)\nAC_SUBST(RANLIB)\nAC_SUBST(STRIP)\nAC_SUBST(LINK)\nAC_SUBST(C_LINK)\nAC_SUBST(TAIL_N)\nAC_SUBST(EGREP_Q)\nAC_SUBST(LDD_R)\n\nAC_SUBST(CFLAGS)\nAC_SUBST(FAST_CFLAGS)\nAC_SUBST(CXXFLAGS)\nAC_SUBST(FAST_CXXFLAGS)\nAC_SUBST(OBJCXX_CXXFLAGS)\nAC_SUBST(CPPFLAGS)\nAC_SUBST(DEPFLAGS)\nAC_SUBST(DEPFLAGS_POST)\nAC_SUBST(LDFLAGS)\nAC_SUBST(FAST_LDFLAGS)\nAC_SUBST(APP_LDFLAGS)\nAC_SUBST(DLL_LDFLAGS)\nAC_SUBST(LIBS)\nAC_SUBST(C_LIBS)\nAC_SUBST(OBJCXX_LIBS)\nAC_SUBST(GCCPCH)\nAC_SUBST(RUNPATH_ORIGIN)\nAC_SUBST(NO_STRICT_ALIASING)\n\nAC_SUBST(D_SFX)\nAC_SUBST(DEBUG_SFX)\n\nAC_SUBST(LIB_OR_DLL)\nAC_SUBST(FORCE_STATIC_LIB)\nAC_SUBST(APP_LIB_SETTING)\nAC_SUBST(APP_LIBS_SETTING)\nAC_SUBST(LINK_DLL)\nAC_SUBST(has_dll_loadable)\nAC_SUBST(LINK_LOADABLE)\nAC_SUBST(CFLAGS_DLL)\nAC_SUBST(CXXFLAGS_DLL)\nAC_SUBST(ALLOW_UNDEF)\nAC_SUBST(FORBID_UNDEF)\n\nAC_SUBST(OPT_GROUPS)\nAC_SUBST(local_lbsm)\nAC_SUBST(ncbi_crypt)\nAC_SUBST(CONNEXT)\nAC_SUBST(XCONNEXT)\nAC_SUBST(serial)\nAC_SUBST(bdb)\nAC_SUBST(dbapi)\nAC_SUBST(objects)\nAC_SUBST(gui)\nAC_SUBST(algo)\nAC_SUBST(app)\nAC_SUBST(internal)\n\nAC_SUBST(check)\nAC_SUBST(CHECK_ARG)\nAC_SUBST(CHECK_TOOLS)\nAC_SUBST(CHECK_TIMEOUT_MULT)\nAC_SUBST(CHECK_OS_NAME)\nAC_SUBST(FEATURES)\n\nAC_SUBST(script_shell)\nAC_SUBST(make_shell)\nAC_SUBST(obj_ext)\nAC_SUBST(lib_pre)\nAC_SUBST(lib_l_pre)\nAC_SUBST(lib_ext)\nAC_SUBST(dll_ext)\nAC_SUBST(loadable_ext)\nAC_SUBST(lib_l_ext)\nAC_SUBST(exe_ext)\nAC_SUBST(f_compile)\nAC_SUBST(f_outobj)\nAC_SUBST(f_outlib)\nAC_SUBST(f_libpath)\nAC_SUBST(f_runpath)\nAC_SUBST(f_outexe)\n\nAC_SUBST(BDB_LIB)\nAC_SUBST(BDB_CACHE_LIB)\nAC_SUBST(DBAPI_DRIVER)\nAC_SUBST(DBAPI_CTLIB)\nAC_SUBST(DBAPI_DBLIB)\nAC_SUBST(DBAPI_MYSQL)\nAC_SUBST(DBAPI_ODBC)\n\nAC_SUBST(THREAD_LIBS)\nAC_SUBST(NCBIATOMIC_LIB)\nAC_SUBST(OPENMP_FLAGS)\nAC_SUBST(UNSAFE_MATH_FLAG)\nAC_SUBST(SSE4_1_FLAG)\nAC_SUBST(AES_FLAG)\nAC_SUBST(NETWORK_LIBS)\nAC_SUBST(NETWORK_PURE_LIBS)\nAC_SUBST(RESOLVER_LIBS)\nAC_SUBST(MATH_LIBS)\nAC_SUBST(KSTAT_LIBS)\nAC_SUBST(RPCSVC_LIBS)\nAC_SUBST(CRYPT_LIBS)\nAC_SUBST(DL_LIBS)\nAC_SUBST(RT_LIBS)\nAC_SUBST(UUID_LIBS)\nAC_SUBST(DEMANGLE_LIBS)\nAC_SUBST(ICONV_LIBS)\nAC_SUBST(Z_LIB)\nAC_SUBST(BZ2_LIB)\nAC_SUBST(PCREPOSIX_LIBS)\nAC_SUBST(PCRE_LIB)\nAC_SUBST(OPENSSL_STATIC_LIBS)\nAC_SUBST(TLS_INCLUDE)\nAC_SUBST(TLS_LIBS)\nAC_SUBST(SYBASE_PATH)\nAC_SUBST(SYBASE_LCL_PATH)\nAC_SUBST(SYBASE_INCLUDE)\nAC_SUBST(SYBASE_LIBS)\nAC_SUBST(SYBASE_DLLS)\nAC_SUBST(SYBASE_DBLIBS)\nAC_SUBST(MYSQL_INCLUDE)\nAC_SUBST(MYSQL_LIBS)\nAC_SUBST(BERKELEYDB_INCLUDE)\nAC_SUBST(BERKELEYDB_LIBS)\nAC_SUBST(BERKELEYDB_STATIC_LIBS)\nAC_SUBST(BERKELEYDB_CXX_LIBS)\nAC_SUBST(BERKELEYDB_CXX_STATIC_LIBS)\nAC_SUBST(ODBC_INCLUDE)\nAC_SUBST(ODBC_LIBS)\nAC_SUBST(BOOST_INCLUDE)\nAC_SUBST(BOOST_LIBPATH)\nAC_SUBST(BOOST_TAG)\nAC_SUBST(BOOST_FILESYSTEM_LIBS)\nAC_SUBST(BOOST_FILESYSTEM_STATIC_LIBS)\nAC_SUBST(BOOST_IOSTREAMS_LIBS)\nAC_SUBST(BOOST_IOSTREAMS_STATIC_LIBS)\nAC_SUBST(BOOST_PROGRAM_OPTIONS_LIBS)\nAC_SUBST(BOOST_PROGRAM_OPTIONS_STATIC_LIBS)\nAC_SUBST(BOOST_REGEX_LIBS)\nAC_SUBST(BOOST_REGEX_STATIC_LIBS)\nAC_SUBST(BOOST_SYSTEM_LIBS)\nAC_SUBST(BOOST_SYSTEM_STATIC_LIBS)\nAC_SUBST(BOOST_TEST_PEM_LIBS)\nAC_SUBST(BOOST_TEST_PEM_STATIC_LIBS)\nAC_SUBST(BOOST_TEST_TEM_LIBS)\nAC_SUBST(BOOST_TEST_TEM_STATIC_LIBS)\nAC_SUBST(BOOST_TEST_UTF_LIBS)\nAC_SUBST(BOOST_TEST_UTF_STATIC_LIBS)\nAC_SUBST(BOOST_THREAD_LIBS)\nAC_SUBST(BOOST_THREAD_STATIC_LIBS)\nAC_SUBST(NCBI_C_INCLUDE)\nAC_SUBST(NCBI_C_LIBPATH)\nAC_SUBST(OPENGL_INCLUDE)\nAC_SUBST(OPENGL_LIBS)\nAC_SUBST(OPENGL_STATIC_LIBS)\nAC_SUBST(OSMESA_INCLUDE)\nAC_SUBST(OSMESA_LIBS)\nAC_SUBST(OSMESA_STATIC_LIBS)\nAC_SUBST(GLUT_INCLUDE)\nAC_SUBST(GLUT_LIBS)\nAC_SUBST(GLEW_INCLUDE)\nAC_SUBST(GLEW_LIBS)\nAC_SUBST(GLEW_STATIC_LIBS)\nAC_SUBST(WXWIDGETS_INCLUDE)\nAC_SUBST(WXWIDGETS_LIBS)\nAC_SUBST(WXWIDGETS_STATIC_LIBS)\nAC_SUBST(WXWIDGETS_GL_LIBS)\nAC_SUBST(WXWIDGETS_GL_STATIC_LIBS)\nAC_SUBST(WXWIDGETS_POST_LINK)\nAC_SUBST(FASTCGI_INCLUDE)\nAC_SUBST(FASTCGI_LIBS)\nAC_SUBST(FASTCGI_OBJS)\nAC_SUBST(NCBI_SSS_INCLUDE)\nAC_SUBST(NCBI_SSS_LIBPATH)\nAC_SUBST(LIBSSSUTILS)\nAC_SUBST(LIBSSSDB)\nAC_SUBST(sssutils)\nAC_SUBST(SP_INCLUDE)\nAC_SUBST(SP_LIBS)\nAC_SUBST(ORBACUS_INCLUDE)\nAC_SUBST(ORBACUS_LIBPATH)\nAC_SUBST(LIBOB)\nAC_SUBST(LIBIMR)\nAC_SUBST(ICU_CONFIG)\nAC_SUBST(ICU_INCLUDE)\nAC_SUBST(ICU_LIBS)\nAC_SUBST(ICU_STATIC_LIBS)\nAC_SUBST(EXPAT_STATIC_LIBS)\nAC_SUBST(SABLOT_STATIC_LIBS)\nAC_SUBST(LIBXML_STATIC_LIBS)\nAC_SUBST(LIBXSLT_STATIC_LIBS)\nAC_SUBST(LIBEXSLT_STATIC_LIBS)\nAC_SUBST(XERCES_INCLUDE)\nAC_SUBST(XERCES_LIBS)\nAC_SUBST(XERCES_STATIC_LIBS)\nAC_SUBST(XALAN_INCLUDE)\nAC_SUBST(XALAN_LIBS)\nAC_SUBST(XALAN_STATIC_LIBS)\nAC_SUBST(ZORBA_INCLUDE)\nAC_SUBST(ZORBA_LIBS)\nAC_SUBST(ZORBA_STATIC_LIBS)\nAC_SUBST(SQLITE3_STATIC_LIBS)\nAC_SUBST(FREETYPE_INCLUDE)\nAC_SUBST(FREETYPE_LIBS)\nAC_SUBST(GSOAP_PATH)\nAC_SUBST(AVRO_STATIC_LIBS)\nAC_SUBST(MONGODB_STATIC_LIBS)\nAC_SUBST(ncbi_xreader_pubseqos)\nAC_SUBST(ncbi_xreader_pubseqos2)\nAC_SUBST(UNLESS_PUBSEQOS)\nAC_SUBST(PERL)\nAC_SUBST(PERL_INCLUDE)\nAC_SUBST(PERL_LIBS)\nAC_SUBST(JDK_PATH)\nAC_SUBST(JDK_INCLUDE)\nAC_SUBST(ncbi_java)\n\nAC_SUBST(NCBI_C_ncbi)\n\nAC_SUBST(BINCOPY)\nAC_SUBST(APP_NOCOPY)\nAC_SUBST(APP_OR_NULL)\nAC_SUBST(IF_REBUILDING_LIBS)\nAC_SUBST(IF_REBUILDING_CONDITIONALLY)\nAC_SUBST(IF_DEACTIVATING)\nAC_SUBST(configurables_mfname)\nAC_SUBST(CC_FILTER)\nAC_SUBST(CXX_FILTER)\nAC_SUBST(AR_FILTER)\nAC_SUBST(LINK_FILTER)\nAC_SUBST(CC_WRAPPER)\nAC_SUBST(CXX_WRAPPER)\nAC_SUBST(AR_WRAPPER)\nAC_SUBST(LINK_WRAPPER)\n\nAC_SUBST(KeepStateTarget)\nAC_SUBST(Rules)\nAC_SUBST(serial_ws50_rtti_kludge)\nAC_SUBST(ncbicntr)\n\nAC_SUBST(UNIX_SRC)\nAC_SUBST(UNIX_USR_PROJ)\n\nAC_SUBST(compiler)\nAC_SUBST(compiler_root)\nAC_SUBST(compiler_version)\n\nAC_SUBST(COMPILER)\nAC_SUBST(OSTYPE)\nAC_SUBST(NCBI_PLATFORM_BITS)\n\n\n#############################################################################\n### Create output files and do some post-configuration\n\n## Compose a list of target files\nchangequote(<<, >>)dnl\nx_configurables=`echo \"$configurables\" | sed 's/:[^:][^:]*\\.in//g'`\nchangequote([, ])dnl\n\n## Deploy the target directory tree\necho \"$x_configurables\" | while read x_file ; do\n   x_dir=`dirname $x_file`\n   test -d \"$x_dir\"  ||  mkdir -p \"$x_dir\"\ndone\n\n## Create ncbicfg.c.last if necessary\nncbicfg=\"$builddir/corelib/ncbicfg.c\"\ntest -f \"$ncbicfg\" -a ! -f \"$ncbicfg.last\" && cp -p \"$ncbicfg\" \"$ncbicfg.last\"\n\ntest -d \"$status_dir\"  ||  mkdir -p \"$status_dir\"\nCONFIG_STATUS=$status_dir/config.status\n\n## Configure the compiler/flag-dependent header\nAC_CONFIG_HEADER(${ncbiconf}:src/build-system/config.h.in)\n\n##\n## Configure makefiles, shell scripts, etc.\n##\nAC_CONFIG_FILES($configurables $srcdir/./Makefile:src/build-system/Makefile.in.top)\n\nAC_CONFIG_COMMANDS([default], [\ndnl make all shell scripts *.sh be executable\nfind \"$build_root/.\" -name '*.sh' -print | while read x_file ; do\n   chmod a+x \"$x_file\"\ndone\n\ndnl save cache and log files to the build tree dir \"status/\"\ndnl (alongside config.status, which is now directly created there to\ndnl avoid possible trouble; for that matter, it can be at least as\ndnl important to avoid having config.log still open for writing during\ndnl the move).\nif test -f config.cache -a -f config.log ; then\n   test -d  \"$status_dir\"  ||  mkdir -p \"$status_dir\"\n   exec AS_MESSAGE_LOG_FD>/dev/null\n   mv config.cache config.log \"$status_dir\"/\n   exec AS_MESSAGE_LOG_FD>>\"$status_dir/config.log\"\nfi\n\ndnl Update list of enabled packages\nrm -f \"$status_dir\"/*.enabled\nfor p in $WithPackages $WithProjects $WithFeatures ; do\n   touch \"$status_dir\"/$p.enabled\ndone\nfor p in $WithoutPackages $WithoutProjects $WithoutFeatures ; do\n   touch \"$status_dir\"/-$p.enabled\ndone\n\ndnl Create dummy .dep files for system installations of (b)zlib.\ndnl This is a stopgap measure, and fails for installations in non-system dirs.\n# test -f \"$status_dir\"/LocalZ.enabled  ||  \\\n#    touch -t 197001010000 $status_dir/.z.dep\n# test -f \"$status_dir\"/LocalBZ2.enabled  ||  \\\n#    touch -t 197001010000 $status_dir/.bz2.dep\n\ndnl Incorporate any Makefile.*.mk and ncbiconf.*.h files found in the tree.\nfind \"$srcdir\"/src/* -name .svn -prune -o -name build-system -prune \\\n   -o -name 'Makefile.*.mk' -print \\\n   | while read x; do\n      echo\n      echo \"### Extra macro definitions from $x\"\n      echo\n      echo \"#line 1 \\\"$x\\\"\"\n      cat \"$x\"\n   done >> \"$builddir/Makefile.mk\"\n$srcdir/scripts/common/impl/report_duplicates.awk \\\n   src=\"$srcdir/src/build-system/Makefile.mk.in\" \"$builddir/Makefile.mk\"\nfind \"$srcdir\"/src/* -name .svn -prune -o -name 'ncbiconf.*.h' -print \\\n   | while read x; do\n      echo\n      echo \"/*** Extra macro definitions from $x ***/\"\n      echo\n      echo \"#line 1 \\\"$x\\\"\"\n      cat \"$x\"\n   done > \"$build_root/inc/ncbiconf_extra.h\"\nif test -s \"$build_root/inc/ncbiconf_extra.h\"; then\n   ncbiconf=$build_root/inc/ncbiconf_unix.h\n   newconf=$ncbiconf.extra.new\n   savedconf=$ncbiconf.extra.prev\n   cat \"$ncbiconf\" \"$build_root/inc/ncbiconf_extra.h\" > \"$newconf\"\n   $srcdir/scripts/common/impl/report_duplicates.awk \\\n      src=\"$srcdir/src/build-system/config.h.in\" \"$newconf\"\n   if test -f \"$savedconf\"  &&  cmp \"$newconf\" \"$savedconf\" >/dev/null; then\n      echo \"$ncbiconf is unchanged\"\n   else\n      cp -pf \"$newconf\" \"$savedconf\"\n   fi\n   cp -pf \"$savedconf\" \"$ncbiconf\"\nelse\n   rm -f \"$build_root/inc/ncbiconf_extra.h\"\nfi\n\ndnl Avoid gratuitous relinking\nncbicfg=\"$builddir/corelib/ncbicfg.c\"\nif test -f \"$ncbicfg.last\" && cmp -s \"$ncbicfg.last\" \"$ncbicfg\"; then\n   echo \"$ncbicfg\" is unchanged\n   touch -r \"$ncbicfg.last\" \"$ncbicfg\"\nelif test -f \"$ncbicfg\"; then\n   echo \"$ncbicfg\" is updated\n   rm -f \"$ncbicfg.last\"\n   cp -p \"$ncbicfg\" \"$ncbicfg.last\"\nelse\n   echo \"$ncbicfg\" is not present\nfi\n\ndnl Create Makefile.flat if requested\nif test \"$with_configure_dialog\" = yes; then\n   if test \"$with_flat_makefile\" = no; then\n      AC_MSG_ERROR([incompatible options: --without-flat-makefile but --with-configure-dialog.])\n   fi\n   with_flat_makefile=yes\nelif test \"${with_saved_settings:-no}\" != no; then\n   if test \"$with_flat_makefile\" = no; then\n      AC_MSG_ERROR([incompatible options: --without-flat-makefile but --with-saved-settings.])\n   fi\n   with_flat_makefile=yes\nfi\nif test \"$with_flat_makefile\" != \"no\"; then\n   if test \"$with_flat_makefile\" = yes; then\n      cfm_flags=''\n   else\n      cfm_flags='-remoteptb'\n   fi\n   if test -n \"$with_projects\"; then\n      cfm_flags=\"$cfm_flags -p $with_projects\"\n   fi\n   if test \"$with_configure_dialog\" = yes; then\n      cfm_flags=\"$cfm_flags -cfg\"\n   fi\n   if test \"${with_saved_settings-no}\" != no; then\n      cfm_flags=\"$cfm_flags -saved $with_saved_settings\"\n   fi\n   if $real_srcdir/scripts/common/impl/create_flat_makefile.sh \"$build_root\" \\\n       -s \"$real_srcdir\" $cfm_flags  &&  test -f \"$builddir/Makefile.flat\"; then\n      build_flat=\"Alternatively, cd $builddir && make -f Makefile.flat\"\n   elif test -f \"$builddir/Flat.configuration_log\"; then\n      $EGREP 'Error:|already defined' \"$builddir/Flat.configuration_log\"\n      AC_MSG_ERROR([flat makefile generation failed.])\n   fi\nfi\n\ndnl execute extra-action\nif test -n \"$with_extra_action\" ; then\n   with_extra_action=`echo \"$with_extra_action\" | sed \"s%{}%$build_root%g\"`\n   echo\n   echo \"executing:  $with_extra_action...\"\n   eval $with_extra_action\n   exit_code=\"$?\"\n   if test $exit_code -ne 0 ; then\n      AC_MSG_WARN([non-zero exit code ($exit_code):  $with_extra_action])\n   fi\n   echo\nfi\n\ndnl print out additional configuration options\ncase \"$LIB_OR_DLL\" in\nboth) DLL_USAGE=\"LIBRARIES:  build both static and dynamic by default\" ;;\ndll)  DLL_USAGE=\"LIBRARIES:  build as dynamic by default\" ;;\nlib)\n   if test \"$with_dll\" = \"no\" ; then\n      DLL_USAGE=\"LIBRARIES:  build as static only\"\n   else\n      DLL_USAGE=\"LIBRARIES:  build as static by default\"\n   fi\n   ;;\nesac\n\nif test -n \"$with_projects\"; then\n    build_proj=\"To build selected projects (as listed in \\\"$with_projects\\\"):\n  cd $builddir && make all_p\"\nfi\n\ncat << EOCONF\n===============================================================================\nNCBI C++ Toolkit documentation:\n  Online:   http://www.ncbi.nlm.nih.gov/toolkit/doc/book/\n  Local:    ./doc/public/index.html\nFor the available configuration flags run:  ./configure --help\n\nCFLAGS   = $CFLAGS\nCXXFLAGS = $CXXFLAGS\nCPPFLAGS = $CPPFLAGS\nLDFLAGS  = $LDFLAGS\n\n$DLL_USAGE\nFEATURES:   $WithFeatures\nPACKAGES:\n  enabled:  $WithPackages\n  disabled: $WithoutPackages\nPROJECTS:\n  enabled:  $WithProjects\n  disabled: $WithoutProjects\n\nTools / flags / paths:  $builddir/Makefile.mk\nConfiguration  header:  $ncbiconf\n\nTo build everything:  cd $builddir && make all_r\nor simply run make in the current directory\n$build_proj\n$build_flat\n******* CONFIGURATION SUCCESSFUL *******\nEOCONF\n], [\nPATH='/bin:/usr/bin:\\$PATH'\nstatus_dir='$status_dir'\nbuilddir='$builddir'\nbuild_root='$build_root'\nx_configurables='$x_configurables'\nncbiconf='$ncbiconf'\nCFLAGS='$CFLAGS'\nCXXFLAGS='$CXXFLAGS'\nCPPFLAGS='$CPPFLAGS'\nLDFLAGS='$LDFLAGS'\nLIB_OR_DLL='$LIB_OR_DLL'\nwith_dll='$with_dll'\nWithFeatures='$WithFeatures'\nWithoutFeatures='$WithoutFeatures'\nWithPackages='$WithPackages'\nWithoutPackages='$WithoutPackages'\nWithProjects='$WithProjects $OPT_GROUPS'\nWithoutProjects='$WithoutProjects'\nwith_extra_action='$with_extra_action'\nwith_projects='$with_projects'\nwith_flat_makefile='$with_flat_makefile'\nwith_configure_dialog='$with_configure_dialog'\nwith_saved_settings='$with_saved_settings'\nsmart_pwd='$smart_pwd'\nreal_srcdir='$real_srcdir'\nEGREP='$EGREP'\n])\n\nAC_WARNING([*** Please don't forget to update .../src/build-system/NEWS if appropriate! ***])dnl\nAC_OUTPUT\n",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/build-system/cmake/CMakeChecks.cmake": "if (${CMAKE_BUILD_TYPE} STREQUAL \"Debug\")\n    add_definitions(-D_DEBUG)\nELSE()\n    add_definitions(-DNDEBUG)\nENDIF()\nadd_definitions(-D_LARGEFILE_SOURCE -D_LARGEFILE64_SOURCE -D_FILE_OFFSET_BITS=64)\n#set(XYY -I)\nset(XYY )\n\ninclude(CheckIncludeFile)\ncheck_include_file(arpa/inet.h HAVE_ARPA_INET_H)\ncheck_include_file(atomic.h HAVE_ATOMIC_H)\ncheck_include_file(dlfcn.h HAVE_DLFCN_H)\ncheck_include_file(errno.h HAVE_ERRNO_H)\ncheck_include_file(ieeefp.h HAVE_IEEEFP_H)\ncheck_include_file(inttypes.h HAVE_INTTYPES_H)\ncheck_include_file(malloc.h HAVE_MALLOC_H)\ncheck_include_file(memory.h HAVE_MEMORY_H)\ncheck_include_file(netdb.h HAVE_NETDB_H)\ncheck_include_file(netinet/in.h HAVE_NETINET_IN_H)\ncheck_include_file(netinet/tcp.h HAVE_NETINET_TCP_H)\ncheck_include_file(odbcss.h HAVE_ODBCSS_H)\ncheck_include_file(paths.h HAVE_PATHS_H)\ncheck_include_file(poll.h HAVE_POLL_H)\ncheck_include_file(signal.h HAVE_SIGNAL_H)\ncheck_include_file(sqlite3async.h HAVE_SQLITE3ASYNC_H)\ncheck_include_file(stdint.h HAVE_STDINT_H)\ncheck_include_file(stdlib.h HAVE_STDLIB_H)\ncheck_include_file(string.h HAVE_STRING_H)\ncheck_include_file(strings.h HAVE_STRINGS_H)\ncheck_include_file(sys/ioctl.h HAVE_SYS_IOCTL_H)\ncheck_include_file(sys/mount.h HAVE_SYS_MOUNT_H)\ncheck_include_file(sys/select.h HAVE_SYS_SELECT_H)\ncheck_include_file(sys/socket.h HAVE_SYS_SOCKET_H)\ncheck_include_file(sys/sockio.h HAVE_SYS_SOCKIO_H)\ncheck_include_file(sys/stat.h HAVE_SYS_STAT_H)\ncheck_include_file(sys/statvfs.h HAVE_SYS_STATVFS_H)\ncheck_include_file(sys/sysinfo.h HAVE_SYS_SYSINFO_H)\ncheck_include_file(sys/time.h HAVE_SYS_TIME_H)\ncheck_include_file(sys/types.h HAVE_SYS_TYPES_H)\ncheck_include_file(sys/vfs.h HAVE_SYS_VFS_H)\ncheck_include_file(unistd.h HAVE_UNISTD_H)\ncheck_include_file(wchar.h HAVE_WCHAR_H)\ncheck_include_file(windows.h HAVE_WINDOWS_H)\n\ninclude(CheckIncludeFileCXX)\ncheck_include_file_cxx(fstream HAVE_FSTREAM)\ncheck_include_file_cxx(fstream.h HAVE_FSTREAM_H)\ncheck_include_file_cxx(iostream HAVE_IOSTREAM)\ncheck_include_file_cxx(iostream.h HAVE_IOSTREAM_H)\ncheck_include_file_cxx(limits HAVE_LIMITS)\ncheck_include_file_cxx(strstrea.h HAVE_STRSTREA_H)\ncheck_include_file_cxx(strstream HAVE_STRSTREAM_H)\n\ninclude(CheckFunctionExists)\ncheck_function_exists(asprintf HAVE_ASPRINTF)\ncheck_function_exists(atoll HAVE_ATOLL)\ncheck_function_exists(basename HAVE_BASENAME)\ncheck_function_exists(erf HAVE_ERF)\ncheck_function_exists(euidaccess HAVE_EUIDACCESS)\ncheck_function_exists(freehostent HAVE_FREEHOSTENT)\ncheck_function_exists(fseeko HAVE_FSEEKO)\ncheck_function_exists(getaddrinfo HAVE_ASPRINTF)\ncheck_function_exists(gethostent_r HAVE_GETHOSTENT_R)\ncheck_function_exists(getipnodebyaddr HAVE_GETIPNODEBYADDR)\ncheck_function_exists(getipnodebyname HAVE_GETIPNODEBYNAME)\ncheck_function_exists(getloadavg HAVE_GETLOADAVG)\ncheck_function_exists(getlogin_r HAVE_GETLOGIN_R)\ncheck_function_exists(getnameinfo HAVE_GETNAMEINFO)\ncheck_function_exists(getpagesize HAVE_GETPAGESIZE)\ncheck_function_exists(readpassphrase HAVE_READPASSPHRASE)\ncheck_function_exists(getpassphrase HAVE_GETPASSPHRASE)\ncheck_function_exists(getpass HAVE_GETPASS)\ncheck_function_exists(getpwuid HAVE_GETPWUID)\ncheck_function_exists(getrusage HAVE_GETRUSAGE)\ncheck_function_exists(gettimeofday HAVE_GETTIMEOFDAY)\ncheck_function_exists(getuid HAVE_GETUID)\ncheck_function_exists(inet_ntoa_r HAVE_INET_NTOA_R)\ncheck_function_exists(inet_ntop HAVE_INET_NTOP)\ncheck_function_exists(lchown HAVE_LCHOWN)\ncheck_function_exists(localtime_r HAVE_LOCALTIME_R)\ncheck_function_exists(lutimes HAVE_LUTIMES)\ncheck_function_exists(nanosleep HAVE_NANOSLEEP)\ncheck_function_exists(pthread_atfork HAVE_PTHREAD_ATFORK)\ncheck_function_exists(pthread_setconcurrency HAVE_PTHREAD_SETCONCURRENCY)\ncheck_function_exists(readpassphrase HAVE_READPASSPHRASE)\ncheck_function_exists(readv HAVE_READV)\ncheck_function_exists(sched_yield HAVE_SCHED_YIELD)\ncheck_function_exists(select HAVE_SELECT)\ncheck_function_exists(sqlite3_unlock_notify HAVE_SQLITE3_UNLOCK_NOTIFY)\ncheck_function_exists(statfs HAVE_STATFS)\ncheck_function_exists(statvfs HAVE_STATVFS)\ncheck_function_exists(strdup HAVE_STRDUP)\ncheck_function_exists(strlcat HAVE_STRLCAT)\ncheck_function_exists(strlcpy HAVE_STRLCPY)\ncheck_function_exists(strndup HAVE_STRNDUP)\ncheck_function_exists(strtok_r HAVE_STRTOK_R)\ncheck_function_exists(utimes HAVE_UTIMES)\ncheck_function_exists(vasprintf HAVE_VASPRINTF)\ncheck_function_exists(vprintf HAVE_VPRINTF)\ncheck_function_exists(vsnprintf HAVE_VSNPRINTF)\ncheck_function_exists(writev HAVE_WRITEV)\n\ninclude(CheckLibraryExists)\ncheck_library_exists(dl dlopen \"\" HAVE_LIBDL)\ncheck_library_exists(pcre pcre_study \"\" HAVE_LIBPCRE)\n\ninclude(CheckTypeSize)\ncheck_type_size(char SIZEOF_CHAR)\ncheck_type_size(double SIZEOF_DOUBLE)\ncheck_type_size(float SIZEOF_FLOAT)\ncheck_type_size(int SIZEOF_INT)\ncheck_type_size(long SIZEOF_LONG)\ncheck_type_size(\"long double\" SIZEOF_LONG_DOUBLE)\ncheck_type_size(\"long long\" SIZEOF_LONG_LONG)\ncheck_type_size(short SIZEOF_SHORT)\ncheck_type_size(size_t SIZEOF_SIZE_T)\ncheck_type_size(void* SIZEOF_VOIDP)\ncheck_type_size(__int64 SIZEOF___INT64)\n\noption(USE_LOCAL_BZLIB \"Use a local copy of libbz2\")\noption(USE_LOCAL_PCRE \"Use a local copy of libpcre\")\n\nif (HAVE_WCHAR_H)\n    set(HAVE_WSTRING 1)\nendif (HAVE_WCHAR_H)\n\n#\n# Threading libraries\nfind_package(Threads)\nif (CMAKE_USE_PTHREADS_INIT)\n    add_definitions(-D_MT -D_REENTRANT -D_THREAD_SAFE)\n    set(NCBI_POSIX_THREADS 1)\nendif (CMAKE_USE_PTHREADS_INIT)\n\n\nif(HAVE_LIBDL)\n    set(DL_LIBS -ldl)\nendif(HAVE_LIBDL)\n\nset(ORIG_LIBS   -lrt -lm  -lpthread)\nset(ORIG_C_LIBS      -lm  -lpthread)\nset(C_LIBS      ${ORIG_C_LIBS})\n\nif (HAVE_LIBPCRE AND NOT USE_LOCAL_PCRE)\n    set(PCRE_LIBS -lpcre)\nelse(HAVE_LIBPCRE AND NOT USE_LOCAL_PCRE)\n    set(USE_LOCAL_PCRE 1 CACHE INTERNAL \"Using local PCRE due to system library absence\")\nendif(HAVE_LIBPCRE AND NOT USE_LOCAL_PCRE)\n\n\nif (UNIX)\n    SET(NCBI_OS_UNIX 1 CACHE INTERNAL \"Is Unix\")\n    SET(NCBI_OS \\\"UNIX\\\" CACHE INTERNAL \"Is Unix\")\n    if (${CMAKE_SYSTEM_NAME} MATCHES \"Linux\")\n        SET(NCBI_OS_LINUX 1 CACHE INTERNAL \"Is Linux\")\n    endif(${CMAKE_SYSTEM_NAME} MATCHES \"Linux\")\nendif(UNIX)\n\nif (WIN32)\n    SET(NCBI_OS_MSWIN 1 CACHE INTERNAL \"Is Windows\")\n    SET(NCBI_OS \\\"WINDOWS\\\" CACHE INTERNAL \"Is Windows\")\nendif(WIN32)\n\nif (CYGWIN)\n    SET(NCBI_OS_CYGWIN 1 CACHE INTERNAL \"Is CygWin\")\n    SET(NCBI_OS \\\"CYGWIN\\\" CACHE INTERNAL \"Is Cygwin\")\nendif(CYGWIN)\n\nif (APPLE)\n    if (${CMAKE_SYSTEM_NAME} MATCHES \"Darwin\")\n        SET(NCBI_OS_DARWIN 1 CACHE INTERNAL \"Is Mac OS X\")\n    endif(${CMAKE_SYSTEM_NAME} MATCHES \"Darwin\")\nendif(APPLE)\n\n\n#################################\n# Some platform-specific system libs that can be linked eventually\nset(THREAD_LIBS   -lpthread)\nset(NETWORK_LIBS  -lnsl)\nset(MATH_LIBS     -lm)\nset(KSTAT_LIBS    )\nset(RPCSVC_LIBS   )\nset(CRYPT_LIBS   -lcrypt)\nset(RT_LIBS      -lrt)\nset(DEMANGLE_LIBS )\nset(ICONV_LIBS    )\nset(UUID_LIBS     -luuid)\n\n\n# ############################################################\n# Specialized libs settings\n# Mostly, from Makefile.mk\n# ############################################################\n#\n\nset(LIBS ${LIBS} ${DL_LIBS} ${CMAKE_THREAD_LIBS_INIT})\n\n\nset(LOCAL_LBSM ncbi_lbsm ncbi_lbsm_ipc ncbi_lbsmd)\nset(NCBI_CRYPT ncbi_crypt)\n\n\n# non-public (X)CONNECT extensions\nset(CONNEXT connext)\nset(XCONNEXT xconnext)\n\n# NCBI C++ API for BerkeleyDB\nset(BDB_LIB bdb)\nset(BDB_CACHE_LIB ncbi_xcache_bdb)\n\n# Possibly absent DBAPI drivers (depending on whether the relevant\n# 3rd-party libraries are present, and whether DBAPI was disabled altogether)\nset(DBAPI_DRIVER  dbapi_driver)\nset(DBAPI_CTLIB   ncbi_xdbapi_ctlib)\nset(DBAPI_DBLIB   ncbi_xdbapi_dblib)\nset(DBAPI_MYSQL   ncbi_xdbapi_mysql)\n#DBAPI_ODBC \n\n# Compression libraries\ninclude(FindZLIB)\nfind_package(ZLIB)\ninclude(FindBZip2)\nfind_package(BZip2)\nFIND_PATH(LZO_INCLUDE_DIR lzo/lzoconf.h\n          ${LZO_ROOT}/include/lzo/\n          ${NCBI_TOOLS_ROOT}/lzo-2.05/include/\n          /usr/include/lzo/\n          /usr/local/include/lzo/\n          /sw/lib/lzo/\n          /sw/local/lib/lzo/\n         )\nFIND_LIBRARY(LZO_LIBRARIES NAMES lzo2\n             PATHS\n             ${LZO_ROOT}/lib\n             ${NCBI_TOOLS_ROOT}/lzo-2.05/lib64/\n             ${NCBI_TOOLS_ROOT}/lzo-2.05/lib/\n             /sw/lib\n             /sw/local/lib\n             /usr/lib\n             /usr/local/lib\n            )\n\nset(Z_INCLUDE ${ZLIB_INCLUDE_DIRS})\nset(Z_LIBS ${ZLIB_LIBRARIES})\nset(Z_LIB)\nset(BZ2_INCLUDE ${BZIP2_INCLUDE_DIRS})\nset(BZ2_LIBS ${BZIP2_LIBRARIES})\nset(BZ2_LIB)\nset(LZO_INCLUDE ${LZO_INCLUDE_DIR})\nset(LZO_LIBS ${LZO_LIBRARIES})\n\n\nset(CMPRS_INCLUDE ${Z_INCLUDE} ${BZ2_INCLUDE} ${LZO_INCLUDE})\nset(CMPRS_LIBS ${Z_LIBS} ${BZ2_LIBS} ${LZO_LIBS})\nset(COMPRESS_LIBS xcompress ${CMPRS_LIBS})\n\n\n# Perl-Compatible Regular Expressions (PCRE)\ninclude(FindPCRE)\nfind_package(PCRE)\nset(PCRE_INCLUDE ${PCRE_INCLUDE_DIR})\nset(PCRE_LIBS ${PCRE_LIBRARIES})\nset(PCRE_LIB)\nset(PCREPOSIX_LIBS -lpcreposix -lpcre)\nset(PCRE_LIB)\n\n# OpenSSL, GnuTLS: headers and libs; TLS_* points to GNUTLS_* by preference.\nset(GCRYPT_INCLUDE  ${XYY}${NCBI_TOOLS_ROOT}/libgcrypt-1.4.3/include \n                    ${XYY}${NCBI_TOOLS_ROOT}/libgpg-error-1.6/include)\nset(GCRYPT_LIBS     -L${NCBI_TOOLS_ROOT}/libgcrypt-1.4.3/GCC401-ReleaseMT64/lib -Wl,-rpath,/opt/ncbi/64/libgcrypt-1.4.3/GCC401-ReleaseMT64/lib:${NCBI_TOOLS_ROOT}/libgcrypt-1.4.3/GCC401-ReleaseMT64/lib -lgcrypt -L${NCBI_TOOLS_ROOT}/libgpg-error-1.6/GCC401-ReleaseMT64/lib -Wl,-rpath,/opt/ncbi/64/libgpg-error-1.6/GCC401-ReleaseMT64/lib:${NCBI_TOOLS_ROOT}/libgpg-error-1.6/GCC401-ReleaseMT64/lib -lgpg-error -lz)\nset(OPENSSL_INCLUDE)\nset(OPENSSL_LIBS         -lssl -lcrypto)\nset(OPENSSL_STATIC_LIBS  -lssl -lcrypto)\nset(TLS_INCLUDE     ${XYY}${NCBI_TOOLS_ROOT}/libgcrypt-1.4.3/include \n                    ${XYY}${NCBI_TOOLS_ROOT}/libgpg-error-1.6/include \n\t\t\t\t\t${XYY}${NCBI_TOOLS_ROOT}/gnutls-2.4.2/include)\nset(TLS_LIBS        -L${NCBI_TOOLS_ROOT}/gnutls-2.4.2/GCC401-ReleaseMT64/lib -Wl,-rpath,/opt/ncbi/64/gnutls-2.4.2/GCC401-ReleaseMT64/lib:${NCBI_TOOLS_ROOT}/gnutls-2.4.2/GCC401-ReleaseMT64/lib -lgnutls -L${NCBI_TOOLS_ROOT}/libgcrypt-1.4.3/GCC401-ReleaseMT64/lib -Wl,-rpath,/opt/ncbi/64/libgcrypt-1.4.3/GCC401-ReleaseMT64/lib:${NCBI_TOOLS_ROOT}/libgcrypt-1.4.3/GCC401-ReleaseMT64/lib -lgcrypt -L${NCBI_TOOLS_ROOT}/libgpg-error-1.6/GCC401-ReleaseMT64/lib -Wl,-rpath,/opt/ncbi/64/libgpg-error-1.6/GCC401-ReleaseMT64/lib:${NCBI_TOOLS_ROOT}/libgpg-error-1.6/GCC401-ReleaseMT64/lib -lgpg-error -lz)\n\n#include(FindGnuTLS)\nfind_package(GnuTLS)\nset(GNUTLS_INCLUDE ${GNUTLS_INCLUDE_DIR})\nset(GNUTLS_LIBS ${GNUTLS_LIBRARIES})\n\n# Kerberos 5 (via GSSAPI)\nset(KRB5_INCLUDE)\nset(KRB5_LIBS   -lgssapi_krb5 -lkrb5 -lk5crypto -lcom_err)\n\n#\n# Sybase stuff\nset(SYBASE_INCLUDE ${XYY}/export/home/sybase/clients/12.5-64bit/include)\nset(SYBASE_LIBS   -L/export/home/sybase/clients/12.5-64bit/lib64 -Wl,-rpath,/export/home/sybase/clients/12.5-64bit/lib64 -lblk_r64 -lct_r64 -lcs_r64 -lsybtcl_r64 -lcomn_r64 -lintl_r64)\nset(SYBASE_DLLS)\nset(SYBASE_DBLIBS  -L/export/home/sybase/clients/12.5-64bit/lib64 -Wl,-rpath,/export/home/sybase/clients/12.5-64bit/lib64 -lsybdb64)\n\n#\n# FreeTDS\nset(ftds64   ftds)\nset(FTDS64_CTLIB_LIBS  ${ICONV_LIBS} ${KRB5_LIBS})\nset(FTDS64_CTLIB_LIB   ct_ftds64 tds_ftds64)\nset(FTDS64_CTLIB_INCLUDE ${XYY}${includedir}/dbapi/driver/ftds64/freetds)\nset(FTDS64_LIBS        ${FTDS64_CTLIB_LIBS})\nset(FTDS64_LIB        ${FTDS64_CTLIB_LIB})\nset(FTDS64_INCLUDE    ${FTDS64_CTLIB_INCLUDE})\n\nset(FTDS_LIBS     ${FTDS64_LIBS})\nset(FTDS_LIB      ${FTDS64_LIB})\nset(FTDS_INCLUDE  ${FTDS64_INCLUDE})\n\n# MySQL: headers and libs\nset(MYSQL_INCLUDE ${XYY}/usr/include/mysql)\nset(MYSQL_LIBS    -rdynamic -L/usr/lib64/mysql -Wl,-rpath,/usr/lib64/mysql -lmysqlclient_r -lz -lpthread -lcrypt -lnsl -lm -lpthread -lssl -lcrypto)\n\n#\n# BerkeleyDB\nset(BERKELEYDB_INCLUDE ${XYY}${NCBI_TOOLS_ROOT}/BerkeleyDB/include)\nset(BERKELEYDB_LIBS    -L\"${NCBI_TOOLS_ROOT}/BerkeleyDB/${CMAKE_BUILD_TYPE}\" -ldb)\nset(BERKELEYDB_STATIC_LIBS      -L${NCBI_TOOLS_ROOT}/BerkeleyDB-4.6.21.1/${buildconf0} -ldb-static)\nset(BERKELEYDB_CXX_STATIC_LIBS  -L${NCBI_TOOLS_ROOT}/BerkeleyDB-4.6.21.1/${buildconf0} -ldb_cxx-static -ldb-static)\nset(BERKELEYDB_CXX_LIBS         -L${NCBI_TOOLS_ROOT}/BerkeleyDB-4.6.21.1/${buildconf0} -Wl,-rpath,/opt/ncbi/64/BerkeleyDB-4.6.21.1/${buildconf0}:${NCBI_TOOLS_ROOT}/BerkeleyDB-4.6.21.1/${buildconf0} -ldb_cxx -ldb)\n\n# ODBC\nset(ODBC_INCLUDE  ${XYY}${includedir}/dbapi/driver/odbc/unix_odbc \n                  ${XYY}${includedir0}/dbapi/driver/odbc/unix_odbc)\nset(ODBC_LIBS)\n\n# PYTHON: headers and libs (default + specific versions)\nset(PYTHON_INCLUDE  ${XYY}/opt/python-2.5.1/include/python2.5 \n                    ${XYY}/opt/python-2.5.1/include/python2.5)\nset(PYTHON_LIBS     -L/opt/python-2.5/lib -L/opt/python-2.5/lib/python2.5/config -Wl,-rpath,/opt/python-2.5/lib:/opt/python-2.5/lib/python2.5/config -lpython2.5 -lpthread -ldl  -lutil -lm)\nset(PYTHON23_INCLUDE)\nset(PYTHON23_LIBS)\nset(PYTHON24_INCLUDE)\nset(PYTHON24_LIBS)\nset(PYTHON25_INCLUDE  ${XYY}/opt/python-2.5.1/include/python2.5 \n                      ${XYY}/opt/python-2.5.1/include/python2.5)\nset(PYTHON25_LIBS     -L/opt/python-2.5/lib -L/opt/python-2.5/lib/python2.5/config -Wl,-rpath,/opt/python-2.5/lib:/opt/python-2.5/lib/python2.5/config -lpython2.5 -lpthread -ldl  -lutil -lm)\n\n# Perl: executable, headers and libs\nset(PERL          /opt/perl-5.8.8/bin/perl)\nset(PERL_INCLUDE  ${XYY}/opt/perl-5.8.8/lib/5.8.8/x86_64-linux/CORE \n                  ${XYY}/usr/include/gdbm)\nset(PERL_LIBS     -L/opt/perl-5.8.8/lib/5.8.8/x86_64-linux/CORE -Wl,-rpath,/opt/perl-5.8.8/lib/5.8.8/x86_64-linux/CORE -lperl -lnsl -lgdbm -ldb -ldl -lm -lcrypt -lutil -lc)\n\n# Java\nset(JDK_INCLUDE)\nset(JDK_PATH)\n\n\n# Boost: headers and libs [use as ${BOOST_LIBPATH} ${BOOST_*_LIBS} ${RT_LIBS}]\ninclude(FindBoost)\nset(CMAKE_INCLUDE_PATH ${NCBI_TOOLS_ROOT}/boost-1.41.0/include)\nset(CMAKE_LIBRARY_PATH ${NCBI_TOOLS_ROOT}/boost-1.41.0/lib)\nfind_package(Boost)\nif (NOT Boost_FOUND)\n    message(WARNING \"BOOST not found...\")\nendif (NOT Boost_FOUND)\n#set(BOOST_INCLUDE ${Boost_INCLUDE_DIRS})\nset(BOOST_INCLUDE   ${XYY}/netopt/ncbi_tools64/boost-1.53.0-ncbi1/include/boost-1_53)\nset(BOOST_LIBPATH              -L${NCBI_TOOLS_ROOT}/boost-1.53.0-ncbi1/lib -Wl,-rpath,/opt/ncbi/64/boost-1.53.0-ncbi1/lib:${NCBI_TOOLS_ROOT}/boost-1.53.0-ncbi1/lib)\nset(BOOST_TAG                  -gcc48-mt-d-1_53-64)\nset(BOOST_FILESYSTEM_LIBS      -lboost_filesystem-gcc48-mt-d-1_53-64 -lboost_system-gcc48-mt-d-1_53-64)\nset(BOOST_FILESYSTEM_STATIC_LIBS -lboost_filesystem-gcc48-mt-d-1_53-64-static -lboost_system-gcc48-mt-d-1_53-64-static)\nset(BOOST_REGEX_LIBS           -lboost_regex-gcc48-mt-d-1_53-64)\nset(BOOST_REGEX_STATIC_LIBS    -lboost_regex-gcc48-mt-d-1_53-64-static)\nset(BOOST_SYSTEM_LIBS          -lboost_system-gcc48-mt-d-1_53-64)\nset(BOOST_SYSTEM_STATIC_LIBS   -lboost_system-gcc48-mt-d-1_53-64-static)\nset(BOOST_TEST_PEM_LIBS        -lboost_prg_exec_monitor-gcc48-mt-d-1_53-64-static)\nset(BOOST_TEST_PEM_STATIC_LIBS -lboost_prg_exec_monitor-gcc48-mt-d-1_53-64-static)\nset(BOOST_TEST_TEM_LIBS        -lboost_test_exec_monitor-gcc48-mt-d-1_53-64-static)\nset(BOOST_TEST_TEM_STATIC_LIBS -lboost_test_exec_monitor-gcc48-mt-d-1_53-64-static)\nset(BOOST_TEST_UTF_LIBS        -lboost_unit_test_framework-gcc48-mt-d-1_53-64-static)\nset(BOOST_TEST_UTF_STATIC_LIBS -lboost_unit_test_framework-gcc48-mt-d-1_53-64-static)\nset(BOOST_THREAD_LIBS          -lboost_thread-gcc48-mt-d-1_53-64 -lboost_system-gcc48-mt-d-1_53-64)\nset(BOOST_THREAD_STATIC_LIBS   -lboost_thread-gcc48-mt-d-1_53-64-static -lboost_system-gcc48-mt-d-1_53-64-static)\nset(BOOST_TEST_LIBS            ${BOOST_LIBPATH} ${BOOST_TEST_UTF_LIBS})\nset(BOOST_TEST_STATIC_LIBS     ${BOOST_LIBPATH} ${BOOST_TEST_UTF_STATIC_LIBS})\n# Temporary, for backward compatibility, to be removed later:\nset(BOOST_LIBS            ${BOOST_TEST_LIBS})\nset(BOOST_STATIC_LIBS     ${BOOST_TEST_STATIC_LIBS})\n\n# NCBI C Toolkit:  headers and libs\nset(NCBI_C_INCLUDE  ${XYY}${NCBI_TOOLS_ROOT}/include64)\nset(NCBI_C_LIBPATH  \"-L${NCBI_TOOLS_ROOT}/lib64\")\nset(NCBI_C_ncbi     ncbi)\n\n# OpenGL: headers and libs (including core X dependencies) for code\n# not using other toolkits.  (The wxWidgets variables already include\n# these as appropriate.)\nset(OPENGL_INCLUDE     ${XYY}${NCBI_TOOLS_ROOT}/Mesa-7.0.2-ncbi2/include)\nset(OPENGL_LIBS        -L${NCBI_TOOLS_ROOT}/Mesa-7.0.2-ncbi2/lib64 -Wl,-rpath,/opt/ncbi/64/Mesa-7.0.2-ncbi2/lib64:${NCBI_TOOLS_ROOT}/Mesa-7.0.2-ncbi2/lib64   -lGLU -lGL -lXmu -lXt -lXext  -lSM -lICE -lX11 )\nset(OPENGL_STATIC_LIBS -L${NCBI_TOOLS_ROOT}/Mesa-7.0.2-ncbi2/lib64 -Wl,-rpath,/opt/ncbi/64/Mesa-7.0.2-ncbi2/lib64:${NCBI_TOOLS_ROOT}/Mesa-7.0.2-ncbi2/lib64   -lGLU-static -lGL-static -lXmu -lXt -lXext  -lSM -lICE -lX11 )\nset(OSMESA_INCLUDE     ${XYY}${NCBI_TOOLS_ROOT}/Mesa-7.0.2-ncbi2/include)\nset(OSMESA_LIBS         -L${NCBI_TOOLS_ROOT}/Mesa-7.0.2-ncbi2/lib64 -Wl,-rpath,/opt/ncbi/64/Mesa-7.0.2-ncbi2/lib64:${NCBI_TOOLS_ROOT}/Mesa-7.0.2-ncbi2/lib64   -lOSMesa -lGLU -lGL -lXmu -lXt -lXext  -lSM -lICE -lX11 )\nset(OSMESA_STATIC_LIBS  -L${NCBI_TOOLS_ROOT}/Mesa-7.0.2-ncbi2/lib64 -Wl,-rpath,/opt/ncbi/64/Mesa-7.0.2-ncbi2/lib64:${NCBI_TOOLS_ROOT}/Mesa-7.0.2-ncbi2/lib64   -lOSMesa-static -lGLU-static -lGL-static -lXmu -lXt -lXext  -lSM -lICE -lX11 )\nset(GLUT_INCLUDE       )\nset(GLUT_LIBS          )\nset(GLEW_INCLUDE       ${XYY}${NCBI_TOOLS_ROOT}/glew-1.5.8/GCC401-Debug64/include)\nset(GLEW_LIBS          -L${NCBI_TOOLS_ROOT}/glew-1.5.8/GCC401-Debug64/lib64 -Wl,-rpath,/opt/ncbi/64/glew-1.5.8/GCC401-Debug64/lib64:${NCBI_TOOLS_ROOT}/glew-1.5.8/GCC401-Debug64/lib64 -lGLEW)\nset(GLEW_STATIC_LIBS   ${NCBI_TOOLS_ROOT}/glew-1.5.8/GCC401-Debug64/lib/libGLEW-static.a)\n\n\n# wxWidgets\nset(foo \"${CMAKE_PREFIX_PATH}\")\n#set(CMAKE_PREFIX_PATH \"${NCBI_TOOLS_ROOT}/wxwidgets/${CMAKE_BUILD_TYPE}/bin\")\nset(CMAKE_PREFIX_PATH \"${NCBI_TOOLS_ROOT}/wxGTK/DebugMT64/bin\")\nFIND_PACKAGE(wxWidgets\n    COMPONENTS core gl base\n    OPTIONAL)\nset(WXWIDGETS_INCLUDE \"${wxWidgets_INCLUDE_DIRS}\")\nset(WXWIDGETS_LIBS \"${wxWidgets_LIBRARIES}\")\nset(CMAKE_PREFIX_PATH \"${foo}\")\nset(foo)\nset(WXWIDGETS_STATIC_LIBS    -L${NCBI_TOOLS_ROOT}/wxWidgets-2.9.5-ncbi1/GCC442-DebugMT64/lib -pthread   ${NCBI_TOOLS_ROOT}/wxWidgets-2.9.5-ncbi1/GCC442-DebugMT64/lib/libwx_gtk2_xrc-2.9.a ${NCBI_TOOLS_ROOT}/wxWidgets-2.9.5-ncbi1/GCC442-DebugMT64/lib/libwx_gtk2_qa-2.9.a ${NCBI_TOOLS_ROOT}/wxWidgets-2.9.5-ncbi1/GCC442-DebugMT64/lib/libwx_base_net-2.9.a ${NCBI_TOOLS_ROOT}/wxWidgets-2.9.5-ncbi1/GCC442-DebugMT64/lib/libwx_gtk2_html-2.9.a ${NCBI_TOOLS_ROOT}/wxWidgets-2.9.5-ncbi1/GCC442-DebugMT64/lib/libwx_gtk2_adv-2.9.a ${NCBI_TOOLS_ROOT}/wxWidgets-2.9.5-ncbi1/GCC442-DebugMT64/lib/libwx_gtk2_core-2.9.a ${NCBI_TOOLS_ROOT}/wxWidgets-2.9.5-ncbi1/GCC442-DebugMT64/lib/libwx_base_xml-2.9.a ${NCBI_TOOLS_ROOT}/wxWidgets-2.9.5-ncbi1/GCC442-DebugMT64/lib/libwx_base-2.9.a -pthread -lgthread-2.0 -lX11 -lSM -lgtk-x11-2.0 -lgdk-x11-2.0 -latk-1.0 -lgdk_pixbuf-2.0 -lpangocairo-1.0 -lpango-1.0 -lcairo -lgobject-2.0 -lgmodule-2.0 -lglib-2.0 -lpng -ljpeg -ltiff -lexpat -lz -ldl )\nset(WXWIDGETS_GL_LIBS        -L${NCBI_TOOLS_ROOT}/wxWidgets-2.9.5-ncbi1/GCC442-DebugMT64/lib -pthread   -lwx_gtk2_gl-2.9 -lwx_base-2.9 )\nset(WXWIDGETS_GL_STATIC_LIBS -L${NCBI_TOOLS_ROOT}/wxWidgets-2.9.5-ncbi1/GCC442-DebugMT64/lib -pthread   ${NCBI_TOOLS_ROOT}/wxWidgets-2.9.5-ncbi1/GCC442-DebugMT64/lib/libwx_gtk2_gl-2.9.a ${NCBI_TOOLS_ROOT}/wxWidgets-2.9.5-ncbi1/GCC442-DebugMT64/lib/libwx_base-2.9.a -L${NCBI_TOOLS_ROOT}/Mesa-7.0.2-ncbi2/lib64 -Wl,-rpath,/opt/ncbi/64/Mesa-7.0.2-ncbi2/lib64:${NCBI_TOOLS_ROOT}/Mesa-7.0.2-ncbi2/lib64   -lGLU-static -lGL-static -lXmu -lXt -lXext  -lSM -lICE -lX11  -lz -ldl -lm )\n\nset(WXWIDGETS_INCLUDE     ${XYY}/usr/include/gtk-2.0 \n                          ${XYY}/usr/lib64/gtk-2.0/include \n\t\t\t\t\t\t  ${XYY}/usr/include/atk-1.0 \n\t\t\t\t\t\t  ${XYY}/usr/include/cairo \n\t\t\t\t\t\t  ${XYY}/usr/include/pango-1.0 \n\t\t\t\t\t\t  ${XYY}/usr/include/glib-2.0 \n\t\t\t\t\t\t  ${XYY}/usr/lib64/glib-2.0/include \n\t\t\t\t\t\t  ${XYY}/usr/include/pixman-1 \n\t\t\t\t\t\t  ${XYY}/usr/include/freetype2 \n\t\t\t\t\t\t  ${XYY}/usr/include/libpng12   \n\t\t\t\t\t\t  ${XYY}/netopt/ncbi_tools64/wxWidgets-2.9.5-ncbi1/GCC442-DebugMT64/lib/wx/include/gtk2-ansi-2.9 \n\t\t\t\t\t\t  ${XYY}/netopt/ncbi_tools64/wxWidgets-2.9.5-ncbi1/include/wx-2.9)\nset(WXWIDGETS_LIBS        -L/netopt/ncbi_tools64/wxWidgets-2.9.5-ncbi1/GCC442-DebugMT64/lib -Wl,-rpath,/opt/ncbi/64/wxWidgets-2.9.5-ncbi1/GCC442-DebugMT64/lib:/netopt/ncbi_tools64/wxWidgets-2.9.5-ncbi1/GCC442-DebugMT64/lib -pthread -lwx_gtk2_richtext-2.9 -lwx_gtk2_aui-2.9 -lwx_gtk2_xrc-2.9 -lwx_gtk2_html-2.9 -lwx_gtk2_qa-2.9 -lwx_gtk2_adv-2.9 -lwx_gtk2_core-2.9 -lwx_base_xml-2.9 -lwx_base_net-2.9 -lwx_base-2.9 -pthread -lgthread-2.0 -lX11 -lSM -lgtk-x11-2.0 -lgdk-x11-2.0 -latk-1.0 -lgdk_pixbuf-2.0 -lpangocairo-1.0 -lpango-1.0 -lcairo -lgobject-2.0 -lgmodule-2.0 -lglib-2.0 -lpng -ljpeg -ltiff -lexpat -lz -ldl)\n\n\n\n\n\n# Fast-CGI\nset(FASTCGI_INCLUDE ${XYY}${NCBI_TOOLS_ROOT}/fcgi-current/include64)\nset(FASTCGI_LIBS    -L${NCBI_TOOLS_ROOT}/fcgi-2.4.0/altlib64 -Wl,-rpath,/opt/ncbi/64/fcgi-2.4.0/altlib64:${NCBI_TOOLS_ROOT}/fcgi-2.4.0/altlib64 -lfcgi -lnsl)\n# Fast-CGI lib:  (module to add to the \"xcgi\" library)\nset(FASTCGI_OBJS    fcgibuf)\n\n\n# NCBI SSS:  headers, library path, libraries\nset(NCBI_SSS_INCLUDE ${XYY}${incdir}/sss)\nset(NCBI_SSS_LIBPATH )\nset(LIBSSSUTILS      -lsssutils)\nset(LIBSSSDB         -lsssdb -lssssys)\nset(sssutils         sssutils)\nset(NCBILS2_LIB      ncbils2_cli ncbils2_asn ncbils2_cmn)\nset(NCBILS_LIB       ${NCBILS2_LIB})\n\n\n# SP:  headers, libraries\nset(SP_INCLUDE )\nset(SP_LIBS    )\n\n# ORBacus CORBA headers, library path, libraries\nset(ORBACUS_INCLUDE )\nset(ORBACUS_LIBPATH )\nset(LIBOB           )\n# LIBIMR should be empty for single-threaded builds\nset(LIBIMR          )\n\n\n# IBM's International Components for Unicode\nset(ICU_CONFIG      ${NCBI_TOOLS_ROOT}/icu-49.1.1/GCC442-DebugMT/bin/icu-config)\nset(ICU_INCLUDE     ${XYY}${NCBI_TOOLS_ROOT}/icu-49.1.1/include )\nset(ICU_LIBS        -L${NCBI_TOOLS_ROOT}/icu-49.1.1/GCC442-DebugMT/lib -Wl,-rpath,/opt/ncbi/64/icu-49.1.1/GCC442-DebugMT/lib:${NCBI_TOOLS_ROOT}/icu-49.1.1/GCC442-DebugMT/lib -licui18n -licuuc -licudata )\nset(ICU_STATIC_LIBS -L${NCBI_TOOLS_ROOT}/icu-49.1.1/GCC442-DebugMT/lib  -lsicui18n -lsicuuc -lsicudata )\n\n\n# XML/XSL support:\nset(EXPAT_INCLUDE       )\nset(EXPAT_LIBS         -L${NCBI_TOOLS_ROOT}/expat-1.95.8/lib64 -Wl,-rpath,/opt/ncbi/64/expat-1.95.8/lib64:${NCBI_TOOLS_ROOT}/expat-1.95.8/lib64 -lexpat )\nset(EXPAT_STATIC_LIBS  -L${NCBI_TOOLS_ROOT}/expat-1.95.8/lib64 -Wl,-rpath,/opt/ncbi/64/expat-1.95.8/lib64:${NCBI_TOOLS_ROOT}/expat-1.95.8/lib64 -lexpat )\nset(SABLOT_INCLUDE      ${XYY}${NCBI_TOOLS_ROOT}/Sablot-1.0.2/include)\nset(SABLOT_LIBS        -L${NCBI_TOOLS_ROOT}/Sablot-1.0.2/lib64 -Wl,-rpath,/opt/ncbi/64/Sablot-1.0.2/lib64:${NCBI_TOOLS_ROOT}/Sablot-1.0.2/lib64 -lsablot -L${NCBI_TOOLS_ROOT}/expat-1.95.8/lib64 -Wl,-rpath,/opt/ncbi/64/expat-1.95.8/lib64:${NCBI_TOOLS_ROOT}/expat-1.95.8/lib64 -lexpat )\nset(SABLOT_STATIC_LIBS -L${NCBI_TOOLS_ROOT}/Sablot-1.0.2/lib64 -Wl,-rpath,/opt/ncbi/64/Sablot-1.0.2/lib64:${NCBI_TOOLS_ROOT}/Sablot-1.0.2/lib64 -lsablot -L${NCBI_TOOLS_ROOT}/expat-1.95.8/lib64 -Wl,-rpath,/opt/ncbi/64/expat-1.95.8/lib64:${NCBI_TOOLS_ROOT}/expat-1.95.8/lib64 -lexpat )\nset(LIBXML_INCLUDE     ${XYY}${NCBI_TOOLS_ROOT}/libxml-2.7.8/${buildconf}/include/libxml2 \n                       ${XYY}${NCBI_TOOLS_ROOT}/libxml-2.7.8/${buildconf}/include)\nset(LIBXML_LIBS        -L${NCBI_TOOLS_ROOT}/libxml-2.7.8/${buildconf}/lib -Wl,-rpath,/opt/ncbi/64/libxml-2.7.8/${buildconf}/lib:${NCBI_TOOLS_ROOT}/libxml-2.7.8/${buildconf}/lib -lxml2 )\nset(LIBXML_STATIC_LIBS -L${NCBI_TOOLS_ROOT}/libxml-2.7.8/${buildconf}/lib -lxml2-static)\nset(LIBXSLT_INCLUDE    ${XYY}${NCBI_TOOLS_ROOT}/libxml-2.7.8/${buildconf}/include/libxml2 \n                       ${XYY}${NCBI_TOOLS_ROOT}/libxml-2.7.8/${buildconf}/include \n\t\t\t\t\t   ${XYY}${NCBI_TOOLS_ROOT}/libxml-2.7.8/${buildconf}/include)\nset(LIBXSLT_MAIN_LIBS  -L${NCBI_TOOLS_ROOT}/libxml-2.7.8/${buildconf}/lib -Wl,-rpath,/opt/ncbi/64/libxml-2.7.8/${buildconf}/lib:${NCBI_TOOLS_ROOT}/libxml-2.7.8/${buildconf}/lib -lxslt )\nset(LIBXSLT_MAIN_STATIC_LIBS -L${NCBI_TOOLS_ROOT}/libxml-2.7.8/${buildconf}/lib -lxslt-static)\nset(XSLTPROC           ${NCBI_TOOLS_ROOT}/libxml-2.7.8/${buildconf}/bin/xsltproc)\nset(LIBEXSLT_INCLUDE   ${XYY}${NCBI_TOOLS_ROOT}/libxml-2.7.8/${buildconf}/include/libxml2 \n                       ${XYY}${NCBI_TOOLS_ROOT}/libxml-2.7.8/${buildconf}/include \n\t\t\t\t\t   ${XYY}${NCBI_TOOLS_ROOT}/libxml-2.7.8/${buildconf}/include \n\t\t\t\t\t   ${XYY}${NCBI_TOOLS_ROOT}/libxml-2.7.8/${buildconf}/include)\nset(LIBEXSLT_LIBS      -L${NCBI_TOOLS_ROOT}/libxml-2.7.8/${buildconf}/lib -Wl,-rpath,/opt/ncbi/64/libxml-2.7.8/${buildconf}/lib:${NCBI_TOOLS_ROOT}/libxml-2.7.8/${buildconf}/lib -lexslt )\nset(LIBEXSLT_STATIC_LIBS=-L${NCBI_TOOLS_ROOT}/libxml-2.7.8/${buildconf}/lib -lexslt-static)\nset(LIBXSLT_LIBS       ${LIBEXSLT_LIBS} ${LIBXSLT_MAIN_LIBS})\nset(LIBXSLT_STATIC_LIBS ${LIBEXSLT_STATIC_LIBS} ${LIBXSLT_MAIN_STATIC_LIBS})\nset(XERCES_INCLUDE     ${XYY}${NCBI_TOOLS_ROOT}/xerces-3.1.1/GCC442-DebugMT64/include)\nset(XERCES_LIBS        -L${NCBI_TOOLS_ROOT}/xerces-3.1.1/GCC442-DebugMT64/lib -Wl,-rpath,/opt/ncbi/64/xerces-3.1.1/GCC442-DebugMT64/lib:${NCBI_TOOLS_ROOT}/xerces-3.1.1/GCC442-DebugMT64/lib -lxerces-c)\nset(XERCES_STATIC_LIBS -L${NCBI_TOOLS_ROOT}/xerces-3.1.1/GCC442-DebugMT64/lib -lxerces-c-static -lcurl )\nset(XALAN_INCLUDE      ${XYY}${NCBI_TOOLS_ROOT}/xalan-1.11~r1302529/GCC442-DebugMT64/include)\nset(XALAN_LIBS         -L${NCBI_TOOLS_ROOT}/xalan-1.11~r1302529/GCC442-DebugMT64/lib -Wl,-rpath,/opt/ncbi/64/xalan-1.11~r1302529/GCC442-DebugMT64/lib:${NCBI_TOOLS_ROOT}/xalan-1.11~r1302529/GCC442-DebugMT64/lib -lxalan-c -lxalanMsg)\nset(XALAN_STATIC_LIBS  -L${NCBI_TOOLS_ROOT}/xalan-1.11~r1302529/GCC442-DebugMT64/lib -Wl,-rpath,/opt/ncbi/64/xalan-1.11~r1302529/GCC442-DebugMT64/lib:${NCBI_TOOLS_ROOT}/xalan-1.11~r1302529/GCC442-DebugMT64/lib -lxalan-c -lxalanMsg)\nset(ZORBA_INCLUDE      )\nset(ZORBA_LIBS         )\nset(ZORBA_STATIC_LIBS  )\n\n\n# OpenEye OEChem library:\nset(OECHEM_INCLUDE )\nset(OECHEM_LIBS    )\n\n# Sun Grid Engine (libdrmaa):\nset(SGE_INCLUDE  ${XYY}/netopt/uge/include)\nset(SGE_LIBS    -L/netopt/uge/lib/lx-amd64 -Wl,-rpath,/netopt/uge/lib/lx-amd64 -ldrmaa )\n\n# muParser\nset(MUPARSER_INCLUDE  ${XYY}${NCBI_TOOLS_ROOT}/muParser-1.30/include)\nset(MUPARSER_LIBS    -L${NCBI_TOOLS_ROOT}/muParser-1.30/GCC-Debug64/lib -lmuparser )\n\n# HDF5\nset(HDF5_INCLUDE  ${XYY}${NCBI_TOOLS_ROOT}/hdf5-1.8.3/GCC401-Debug64/include)\nset(HDF5_LIBS    -L${NCBI_TOOLS_ROOT}/hdf5-1.8.3/GCC401-Debug64/lib -Wl,-rpath,/opt/ncbi/64/hdf5-1.8.3/GCC401-Debug64/lib:${NCBI_TOOLS_ROOT}/hdf5-1.8.3/GCC401-Debug64/lib -lhdf5_cpp -lhdf5)\n\n# SQLite 3.x\nset(SQLITE3_INCLUDE     ${XYY}${NCBI_TOOLS_ROOT}/sqlite-3.7.13-ncbi1/include)\nset(SQLITE3_LIBS        -L${NCBI_TOOLS_ROOT}/sqlite-3.7.13-ncbi1/GCC-DebugMT64/lib -Wl,-rpath,/opt/ncbi/64/sqlite-3.7.13-ncbi1/GCC-DebugMT64/lib:${NCBI_TOOLS_ROOT}/sqlite-3.7.13-ncbi1/GCC-DebugMT64/lib -lsqlite3 )\nset(SQLITE3_STATIC_LIBS -L${NCBI_TOOLS_ROOT}/sqlite-3.7.13-ncbi1/GCC-DebugMT64/lib -lsqlite3-static)\n#set(SQLITE3_INCLUDE    ${XYY}${NCBI_TOOLS_ROOT}/sqlite3/include)\n#set(SQLITE3_LIBS       -L\"${NCBI_TOOLS_ROOT}/sqlite3/lib\" -lsqlite3)\n\n\n# Various image-format libraries\ninclude(FindJPEG)\nfind_package(JPEG)\n\ninclude(FindPNG)\nfind_package(PNG)\n\ninclude(FindTIFF)\nfind_package(TIFF)\n\ninclude(FindGIF)\nfind_package(GIF)\n\nset(IMAGE_INCLUDE_DIR ${JPEG_INCLUDE_DIR} ${PNG_INCLUDE_DIR} ${TIFF_INCLUDE_DIR} ${GIF_INCLUDE_DIR})\nset(IMAGE_LIBS ${JPEG_LIBRARIES} ${PNG_LIBRARIES} ${TIFF_LIBRARIES} ${GIF_LIBRARIES})\n\nset(JPEG_INCLUDE   )\nset(JPEG_LIBS     -ljpeg )\nset(PNG_INCLUDE     )\nset(PNG_LIBS      -lpng -lz )\nset(TIFF_INCLUDE   )\nset(TIFF_LIBS     -ltiff -lz )\nset(GIF_INCLUDE    )\nset(GIF_LIBS      -lungif   -lX11)\nset(UNGIF_INCLUDE  )\nset(UNGIF_LIBS    -lungif   -lX11)\nset(XPM_INCLUDE    )\nset(XPM_LIBS      -lXpm   -lX11)\n\nset(IMAGE_LIBS    ${TIFF_LIBS} ${JPEG_LIBS} ${PNG_LIBS} ${GIF_LIBS} ${XPM_LIBS})\n\n\n# FreeType, FTGL\nset(FREETYPE_INCLUDE ${XYY}/usr/include/freetype2)\nset(FREETYPE_LIBS    -lfreetype)\nset(FTGL_INCLUDE     ${XYY}/usr/include/freetype2 \n                     ${XYY}${NCBI_TOOLS_ROOT}/ftgl-2.1.3-rc5/include)\nset(FTGL_LIBS        -L${NCBI_TOOLS_ROOT}/ftgl-2.1.3-rc5/GCC401-Debug64/lib -Wl,-rpath,/opt/ncbi/64/ftgl-2.1.3-rc5/GCC401-Debug64/lib:${NCBI_TOOLS_ROOT}/ftgl-2.1.3-rc5/GCC401-Debug64/lib -lftgl -lfreetype)\n\n\n# libmagic (file-format identification)\nset(MAGIC_INCLUDE  )\nset(MAGIC_LIBS    -lmagic )\n\n# libcurl (URL retrieval)\nset(CURL_INCLUDE  )\nset(CURL_LIBS    -lcurl )\n\n# libmimetic (MIME handling)\nset(MIMETIC_INCLUDE  ${XYY}${NCBI_TOOLS_ROOT}/mimetic-0.9.7-ncbi1/include)\nset(MIMETIC_LIBS    -L${NCBI_TOOLS_ROOT}/mimetic-0.9.7-ncbi1/GCC481-Debug64/lib -Wl,-rpath,/opt/ncbi/64/mimetic-0.9.7-ncbi1/GCC481-Debug64/lib:${NCBI_TOOLS_ROOT}/mimetic-0.9.7-ncbi1/GCC481-Debug64/lib -lmimetic )\n\n# libgSOAP++\nset(GSOAP_PATH     ${NCBI_TOOLS_ROOT}/gsoap-2.8.15)\nset(GSOAP_INCLUDE  ${XYY}${NCBI_TOOLS_ROOT}/gsoap-2.8.15/include)\nset(GSOAP_LIBS     -L${NCBI_TOOLS_ROOT}/gsoap-2.8.15/GCC442-DebugMT64/lib -Wl,-rpath,/opt/ncbi/64/gsoap-2.8.15/GCC442-DebugMT64/lib:${NCBI_TOOLS_ROOT}/gsoap-2.8.15/GCC442-DebugMT64/lib -lgsoapssl++ -lssl -lcrypto -lz )\nset(GSOAP_SOAPCPP2 ${NCBI_TOOLS_ROOT}/gsoap-2.8.15/GCC442-DebugMT64/bin/soapcpp2)\nset(GSOAP_WSDL2H   ${NCBI_TOOLS_ROOT}/gsoap-2.8.15/GCC442-DebugMT64/bin/wsdl2h)\n\n# MongoDB\nset(MONGODB_INCLUDE     ${XYY}${NCBI_TOOLS_ROOT}/boost-1.53.0-ncbi1/include/boost-1_53 -Wno-unused-local-typedefs \n                        ${XYY}${NCBI_TOOLS_ROOT}/mongodb-2.4.6/include)\nset(MONGODB_LIBS        -L${NCBI_TOOLS_ROOT}/mongodb-2.4.6/lib -Wl,-rpath,/opt/ncbi/64/mongodb-2.4.6/lib:${NCBI_TOOLS_ROOT}/mongodb-2.4.6/lib -lmongoclient -L${NCBI_TOOLS_ROOT}/boost-1.53.0-ncbi1/lib -Wl,-rpath,/opt/ncbi/64/boost-1.53.0-ncbi1/lib:${NCBI_TOOLS_ROOT}/boost-1.53.0-ncbi1/lib -lboost_filesystem-gcc48-mt-d-1_53-64 -lboost_thread-gcc48-mt-d-1_53-64 -lboost_system-gcc48-mt-d-1_53-64)\nset(MONGODB_STATIC_LIBS -L${NCBI_TOOLS_ROOT}/mongodb-2.4.6/lib -Wl,-rpath,/opt/ncbi/64/mongodb-2.4.6/lib:${NCBI_TOOLS_ROOT}/mongodb-2.4.6/lib -lmongodb -L${NCBI_TOOLS_ROOT}/boost-1.53.0-ncbi1/lib -Wl,-rpath,/opt/ncbi/64/boost-1.53.0-ncbi1/lib:${NCBI_TOOLS_ROOT}/boost-1.53.0-ncbi1/lib -lboost_filesystem-gcc48-mt-d-1_53-64-static -lboost_thread-gcc48-mt-d-1_53-64-static -lboost_system-gcc48-mt-d-1_53-64-static)\n\n# Compress\nset(COMPRESS_LDEP ${CMPRS_LIB})\nset(COMPRESS_LIBS xcompress ${COMPRESS_LDEP})\n\n\n#################################\n# Useful sets of object libraries\n#################################\n\n\nset(SEQ_LIBS seq seqcode sequtil)\nset(SOBJMGR_LDEP genome_collection seqedit seqset ${SEQ_LIBS} pub medline\n    biblio general-lib xser xutil xncbi)\nset(SOBJMGR_LIBS xobjmgr ${SOBJMGR_LDEP})\nset(ncbi_xreader_pubseqos ncbi_xreader_pubseqos)\nset(ncbi_xreader_pubseqos2 ncbi_xreader_pubseqos2)\n\nset(GENBANK_READER_LDEP ${XCONNEXT} xconnect id1 id2 seqsplit ${COMPRESS_LIBS} ${SOBJMGR_LIBS})\nset(GENBANK_READER_LIBS ncbi_xreader ${GENBANK_READER_LDEP})\nset(GENBANK_READER_PUBSEQOS_LDEP ${XCONNEXT} xconnect ${DBAPI_DRIVER} ${GENBANK_READER_LIBS})\nset(GENBANK_READER_PUBSEQOS_LIBS ${ncbi_xreader_pubseqos} ${GENBANK_READER_PUBSEQOS_LDEP})\nset(GENBANK_LDEP\n    ncbi_xreader_id1 ncbi_xreader_id2 ncbi_xreader_cache\n    ${GENBANK_READER_PUBSEQOS_LIBS})\nset(GENBANK_LIBS ncbi_xloader_genbank ${GENBANK_LDEP})\n\n\n\nset(GENBANK_READER_ID1_LDEP xconnect id1 ${GENBANK_READER_LIBS})\nset(GENBANK_READER_ID1_LIBS ncbi_xreader_id1 ${GENBANK_READER_ID1_LDEP})\n\nset(GENBANK_READER_ID2_LDEP xconnect id2 seqsplit ${GENBANK_READER_LIBS})\nset(GENBANK_READER_ID2_LIBS ncbi_xreader_id2 ${GENBANK_READER_ID2_LDEP})\n\nset(GENBANK_READER_CACHE_LDEP ${GENBANK_READER_LIBS})\nset(GENBANK_READER_CACHE_LIBS ncbi_xreader_cache ${GENBANK_READER_CACHE_LDEP})\n\nset(GENBANK_READER_GICACHE_LDEP ${GENBANK_READER_LIBS})\nset(GENBANK_READER_GICACHE_LIBS ncbi_xreader_gicache\n        ${GENBANK_READER_GICACHE_LDEP})\n\n\n# Interdependent sequence libraries + seqcode.  Does not include seqset.\nset(OBJMGR_LIBS ${GENBANK_LIBS})\n\n\n# Overlapping with qall is poor, so we have a second macro to make it\n# easier to stay out of trouble.\nset(QOBJMGR_ONLY_LIBS xobjmgr id2 seqsplit id1 genome_collection seqset\n    ${SEQ_LIBS} pub medline biblio general-lib xcompress ${CMPRS_LIB})\nset(QOBJMGR_LIBS ${QOBJMGR_ONLY_LIBS} qall)\nset(QOBJMGR_STATIC_LIBS ${QOBJMGR_ONLY_LIBS} qall)\n\n# EUtils\nset(EUTILS_LIBS eutils egquery elink epost esearch espell esummary linkout\n              einfo uilist ehistory)\n\n# Object readers\nset(OBJREAD_LIBS xobjread variation creaders submit)\n\n# formatting code\nset(XFORMAT_LIBS xformat gbseq submit mlacli mla medlars pubmed valid)\n\n\n\nset(SRA_INCLUDE ${XYY}${includedir}/../src/sra/sdk/interfaces\n                ${XYY}${top_srcdir}/src/sra/sdk/interfaces)\n\n# For internal use; ${NO_STRICT_ALIASING} technically belongs in C(XX)FLAGS,\n# but listing it here is more convenient and should be safe.\nset(SRA_INTERNAL_CPPFLAGS \" -D_GNU_SOURCE ${D_SFX} -DLIBPREFIX=lib -DSHLIBEXT=${DLL}${dll_ext} ${NO_STRICT_ALIASING}\")\n\nset(SRA_SDK_SYSLIBS ${CURL_LIBS} ${NETWORK_LIBS} ${BZ2_LIBS} ${Z_LIBS} ${DL_LIBS})\n\nset(SRA_SDK_LIBS ncbi-vdb-read ${BZ2_LIB} ${Z_LIB})\nset(SRAXF_LIBS ${SRA_SDK_LIBS})\nset(SRA_LIBS ${SRA_SDK_LIBS})\nset(BAM_LIBS ${SRA_SDK_LIBS})\nset(SRAREAD_LDEP ${SRA_SDK_LIBS})\nset(SRAREAD_LIBS sraread ${SRA_SDK_LIBS})\n\n\n# Makefile.blast_macros.mk\nset(BLAST_DB_DATA_LOADER_LIBS ncbi_xloader_blastdb ncbi_xloader_blastdb_rmt)\nset(BLAST_FORMATTER_MINIMAL_LIBS xblastformat align_format taxon1 blastdb_format\n    gene_info xalnmgr blastxml xcgi xhtml)\nset(BLAST_INPUT_LIBS blastinput\n    ${BLAST_DB_DATA_LOADER_LIBS} ${BLAST_FORMATTER_MINIMAL_LIBS})\n\nset(BLAST_FORMATTER_LIBS ${BLAST_INPUT_LIBS})\n\n# Libraries required to link against the internal BLAST SRA library\nset(BLAST_SRA_LIBS=blast_sra ${SRAXF_LIBS} vxf ${SRA_LIBS})\n\n# BLAST_FORMATTER_LIBS and BLAST_INPUT_LIBS need $BLAST_LIBS\nset(BLAST_LIBS xblast xalgoblastdbindex composition_adjustment\nxalgodustmask xalgowinmask seqmasks_io seqdb blast_services xobjutil\n${OBJREAD_LIBS} xnetblastcli xnetblast blastdb scoremat tables xalnmgr)\n\n\n\n# SDBAPI stuff\nset(SDBAPI_LIB sdbapi ncbi_xdbapi_ftds ${FTDS_LIB} dbapi dbapi_driver ${XCONNEXT})\nset(SDBAPI_LIBS ${FTDS_LIBS})\n\n\nset(VARSVC_LIBS varsvcutil varsvccli varsvcobj)\n\nset(GPIPE_COMMON_LIBS gpipe_attr gpipe_property gpipe_common)\nset(GPIPE_LOADER_LIBS ncbi_xloader_asn_cache asn_cache cache_blob\nncbi_xloader_lds2 lds2 sqlitewrapp\nncbi_xloader_lds lds bdb\n${BLAST_DB_DATA_LOADER_LIBS} ${BLAST_LIBS}\n${ncbi_xreader_pubseqos2}\nsubmit\nncbi_xloader_csra ncbi_xloader_wgs\n${SRAREAD_LIBS})\nset(GPIPE_LOADER_THIRDPARTY_LIBS ${SQLITE3_LIBS} ${BERKELEYDB_LIBS}\n   ${SRA_SDK_SYSLIBS} ${CMPRS_LIBS})\n\nset(GPIPE_GENCOLL_LIBS xgencoll gpipe_objutil ncbi_xloader_wgs aligndb_reader\n gencoll_client taxon1)\nset(GPIPE_ALL_LIBS ${GPIPE_GENCOLL_LIBS}\n ${GPIPE_COMMON_LIBS}\n ${GPIPE_LOADER_LIBS})\nset(GPIPE_DBAPI_LIB_STATIC   ncbi_xdbapi_ftds dbapi dbapi_driver)\nset(GPIPE_DBAPI_LIB\t\t\t ${GPIPE_DBAPI_LIB_STATIC} ${FTDS_LIB})\nset(GPIPE_DBAPI_LIBS\t\t ${FTDS_LIBS})\n\nset(GPIPE_SDBAPI_LIB_STATIC  sdbapi ${GPIPE_DBAPI_LIB_STATIC})\nset(GPIPE_SDBAPI_LIB  \t\t ${GPIPE_SDBAPI_LIB_STATIC} ${FTDS_LIB})\nset(GPIPE_SDBAPI_LIBS \t\t ${GPIPE_DBAPI_LIBS})\n\n\n\n# Entrez Libs\nset(ENTREZ_LIBS entrez2cli entrez2)\nset(EUTILS_LIBS eutils egquery elink epost esearch espell esummary linkout einfo uilist ehistory)\n\n\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/include/corelib/ncbidll.hpp": "#ifndef CORELIB___NCBIDLL__HPP\n#define CORELIB___NCBIDLL__HPP\n\n/*  $Id: ncbidll.hpp 355803 2012-03-08 16:20:29Z ivanovp $\n * ===========================================================================\n *\n *                            PUBLIC DOMAIN NOTICE\n *               National Center for Biotechnology Information\n *\n *  This software/database is a \"United States Government Work\" under the\n *  terms of the United States Copyright Act.  It was written as part of\n *  the author's official duties as a United States Government employee and\n *  thus cannot be copyrighted.  This software/database is freely available\n *  to the public for use. The National Library of Medicine and the U.S.\n *  Government have not placed any restriction on its use or reproduction.\n *\n *  Although all reasonable efforts have been taken to ensure the accuracy\n *  and reliability of the software and data, the NLM and the U.S.\n *  Government do not and cannot warrant the performance or results that\n *  may be obtained by using this software or data. The NLM and the U.S.\n *  Government disclaim all warranties, express or implied, including\n *  warranties of performance, merchantability or fitness for any particular\n *  purpose.\n *\n *  Please cite the author in any work or product based on this material.\n *\n * ===========================================================================\n *\n * Author:  Denis Vakatov, Vladimir Ivanov, Anatoliy Kuznetsov\n *\n *\n */\n\n/// @file ncbidll.hpp\n/// Define class Dll and for Portable DLL handling.\n\n\n#include <corelib/ncbistd.hpp>\n#include <corelib/ncbicfg.h>\n#include <corelib/ncbifile.hpp>\n\n\nBEGIN_NCBI_SCOPE\n\n/** @addtogroup Dll\n *\n * @{\n */\n\n\n// Forward declaration of struct containing OS-specific DLL handle.\nstruct SDllHandle;\n\n\n#ifndef NCBI_PLUGIN_SUFFIX\n#  ifdef NCBI_OS_MSWIN\n#    define NCBI_PLUGIN_PREFIX \"\"\n#    define NCBI_PLUGIN_MIN_SUFFIX \".dll\"\n#  elif defined(NCBI_OS_DARWIN)  &&  !defined(NCBI_USE_BUNDLES)\n#    define NCBI_PLUGIN_PREFIX \"lib\"\n#    define NCBI_PLUGIN_MIN_SUFFIX \".dylib\"\n#  else\n#    define NCBI_PLUGIN_PREFIX \"lib\"\n#    define NCBI_PLUGIN_MIN_SUFFIX \".so\"\n#  endif\n#  if defined(NCBI_DLL_BUILD)  ||  defined(NCBI_OS_MSWIN)\n#    define NCBI_PLUGIN_SUFFIX NCBI_PLUGIN_MIN_SUFFIX\n#  else\n#    define NCBI_PLUGIN_SUFFIX \"-dll\" NCBI_PLUGIN_MIN_SUFFIX\n#  endif\n#endif\n\n\n/////////////////////////////////////////////////////////////////////////////\n///\n/// CDll --\n///\n/// Define class for portable Dll handling.\n///\n/// The DLL name is considered the basename if it does not contain embedded\n/// '/', '\\', or ':' symbols. Also, in this case, if the DLL name does not\n/// start with NCBI_PLUGIN_PREFIX and contain NCBI_PLUGIN_MIN_SUFFIX (and if\n/// eExactName flag not passed to the constructor), then it will be\n/// automagically transformed according to the following rule:\n///   <name>  --->  NCBI_PLUGIN_PREFIX + <name> + NCBI_PLUGIN_SUFFIX\n///\n///  If the DLL is specified by its basename, then it will be searched\n///  (after the transformation described above) in the following locations:\n///\n///    UNIX:\n///      1) the directories that are listed in the LD_LIBRARY_PATH environment\n///         variable (analyzed once at the process startup);\n///      2) the directory from which the application loaded;\n///      3) hard-coded (e.g. with `ldconfig' on Linux) paths.\n///\n///    MS Windows:\n///      1) the directory from which the application is loaded;\n///      2) the current directory; \n///      3) the Windows system directory;\n///      4) the Windows directory;\n///      5) the directories that are listed in the PATH environment variable.\n///\n/// NOTE: All methods of this class except the destructor throw exception\n/// CCoreException::eDll on error.\n\nclass CDll\n{\npublic:\n    /// General flags.\n    ///\n    /// Default flag in each group have priority above non-default,\n    /// if they are used together.\n    enum EFlags {\n        /// When to load DLL\n        fLoadNow      = (1<<1),  ///< Load DLL immediately in the constructor\n        fLoadLater    = (1<<2),  ///< Load DLL later, using method Load()\n        /// Whether to unload DLL in the destructor\n        fAutoUnload   = (1<<3),  ///< Unload DLL in the destructor\n        fNoAutoUnload = (1<<4),  ///< Unload DLL later, using method Unload()\n        /// Whether to transform the DLL basename\n        fBaseName     = (1<<5),  ///< Treat the name as DLL basename\n        fExactName    = (1<<6),  ///< Use the name \"as is\"\n        /// Specify how to load symbols from DLL.\n        /// UNIX specific (see 'man dlopen'), ignored on all other platforms.\n        fGlobal       = (1<<7),  ///< Load as RTLD_GLOBAL\n        fLocal        = (1<<8),  ///< Load as RTLD_LOCAL\n        /// Default flags\n        fDefault      = fLoadNow | fNoAutoUnload | fBaseName | fGlobal\n    };\n    typedef unsigned int TFlags;  ///< Binary OR of \"EFlags\"\n\n    //\n    // Enums, retained for backward compatibility\n    //\n\n    /// When to load DLL.\n    enum ELoad {\n        eLoadNow      = fLoadNow,\n        eLoadLater    = fLoadLater\n    };\n\n    /// Whether to unload DLL in the destructor.\n    enum EAutoUnload {\n        eAutoUnload   = fAutoUnload,\n        eNoAutoUnload = fNoAutoUnload\n    };\n\n    /// Whether to transform the DLL basename.\n    ///\n    /// Transformation is done according to the following:\n    ///   <name>  --->  NCBI_PLUGIN_PREFIX + <name> + NCBI_PLUGIN_SUFFIX\n    enum EBasename {\n        eBasename     = fBaseName,\n        eExactName    = fExactName\n    };\n\n    /// Constructor.\n    ///\n    /// @param name\n    ///   Can be either DLL basename or an absolute file path.\n    /// @param flags\n    ///   Define how to load/unload DLL and interprete passed name.\n    /// @sa\n    ///   Basename discussion in CDll header, EFlags\n    NCBI_XNCBI_EXPORT\n    CDll(const string& name, TFlags flags);\n\n    /// Constructor (for backward compatibility).\n    ///\n    /// @param name\n    ///   Can be either DLL basename or an absolute file path.\n    /// @param when_to_load\n    ///   Choice to load now or later using Load().\n    /// @param auto_unload\n    ///   Choice to unload DLL in destructor.\n    /// @param treat_as\n    ///   Choice to transform the DLL base name.\n    /// @sa\n    ///   Basename discussion in CDll header,\n    ///   ELoad, EAutoUnload, EBasename definition.\n    NCBI_XNCBI_EXPORT\n    CDll(const string& name,\n         ELoad         when_to_load = eLoadNow,\n         EAutoUnload   auto_unload  = eNoAutoUnload,\n         EBasename     treate_as    = eBasename);\n\n    /// Constructor.\n    ///\n    /// The absolute file path to the DLL will be formed using the \"path\"\n    /// and \"name\" parameters in the following way:\n    /// - UNIX:   <path>/PFX<name>SFX ; <path>/<name> if \"name\" is not basename\n    /// - MS-Win: <path>\\PFX<name>SFX ; <path>\\<name> if \"name\" is not basename\n    /// where PFX is NCBI_PLUGIN_PREFIX and SFX is NCBI_PLUGIN_SUFFIX.\n    ///\n    /// @param path\n    ///   Path to DLL.\n    /// @param name\n    ///   Name of DLL.\n    /// @param flags\n    ///   Define how to load/unload DLL and interprete passed name.\n    /// @sa\n    ///   Basename discussion in CDll header, EFlags\n    NCBI_XNCBI_EXPORT\n    CDll(const string& path, const string& name, TFlags flags);\n\n    /// Constructor (for backward compatibility).\n    ///\n    /// The absolute file path to the DLL will be formed using the \"path\"\n    /// and \"name\" parameters in the following way:\n    /// - UNIX:   <path>/PFX<name>SFX ; <path>/<name> if \"name\" is not basename\n    /// - MS-Win: <path>\\PFX<name>SFX ; <path>\\<name> if \"name\" is not basename\n    /// where PFX is NCBI_PLUGIN_PREFIX and SFX is NCBI_PLUGIN_SUFFIX.\n    ///\n    /// @param path\n    ///   Path to DLL.\n    /// @param name\n    ///   Name of DLL.\n    /// @param when_to_load\n    ///   Choice to load now or later using Load().\n    /// @param auto_load\n    ///   Choice to unload DLL in destructor.\n    /// @param treat_as\n    ///   Choice to transform the DLL base name.\n    /// @sa\n    ///   Basename discussion in CDll header,\n    ///   ELoad, EAutoUnload, EBasename definition.\n    NCBI_XNCBI_EXPORT\n    CDll(const string& path, const string& name,\n         ELoad         when_to_load = eLoadNow,\n         EAutoUnload   auto_unload  = eNoAutoUnload,\n         EBasename     treate_as    = eBasename);\n\n    /// Destructor.\n    ///\n    /// Unload DLL if constructor was passed \"eAutoUnload\".\n    /// Destructor does not throw any exceptions.\n    NCBI_XNCBI_EXPORT ~CDll(void);\n\n    /// Load DLL.\n    ///\n    /// Load the DLL using the name specified in the constructor's DLL \"name\".\n    /// If Load() is called more than once without calling Unload() in between,\n    /// then it will do nothing.\n    NCBI_XNCBI_EXPORT void Load(void);\n\n    /// Unload DLL.\n    ///\n    /// Do nothing and do not generate errors if the DLL is not loaded.\n    NCBI_XNCBI_EXPORT void Unload(void);\n\n    /// Get DLLs entry point (function).\n    ///\n    /// Get the entry point (a function) with name \"name\" in the DLL and\n    /// return the entry point's address on success, or return NULL on error.\n    /// If the DLL is not loaded yet, then this method will call Load(),\n    /// which can result in throwing an exception if Load() fails.\n    /// @sa\n    ///   GetEntryPoint_Data\n    template <class TFunc>\n    TFunc GetEntryPoint_Func(const string& name, TFunc* func)\n    {\n        TEntryPoint ptr = GetEntryPoint(name);\n        if ( func ) {\n            *func = (TFunc)(void*)ptr.func; \n        }\n        return (TFunc)(void*)ptr.func;\n    }\n\n    /// Get DLLs entry point (data).\n    ///\n    /// Get the entry point (a data) with name \"name\" in the DLL and\n    /// return the entry point's address on success, or return NULL on error.\n    /// If the DLL is not loaded yet, then this method will call Load(),\n    /// which can result in throwing an exception if Load() fails.\n    /// @sa\n    ///   GetEntryPoint_Func\n    template <class TData>\n    TData GetEntryPoint_Data(const string& name, TData* data)\n    {\n        TEntryPoint ptr = GetEntryPoint(name);\n        if ( data ) {\n            *data = static_cast<TData> (ptr.data); \n        }\n        return static_cast<TData> (ptr.data);\n    }\n\n    /// Fake, uncallable function pointer\n    typedef void (*FEntryPoint)(char**** Do_Not_Call_This);\n\n    /// Entry point -- pointer to either a function or a data\n    union TEntryPoint {\n        FEntryPoint func;  ///< Do not call this func without type cast!\n        void*       data;\n    };\n\n    /// Helper find method for getting a DLLs entry point.\n    ///\n    /// Get the entry point (e.g. a function) with name \"name\" in the DLL.\n    /// @param name\n    ///   Name of DLL.\n    /// @param pointer_size\n    ///   Size of pointer.\n    /// @return\n    ///   The entry point's address on success, or return NULL on error.\n    /// @sa\n    ///   GetEntryPoint_Func, GetEntryPoint_Data\n    NCBI_XNCBI_EXPORT\n    TEntryPoint GetEntryPoint(const string& name);\n\n    /// Get the name of the DLL file \n    NCBI_XNCBI_EXPORT\n    const string& GetName() const { return m_Name; }\n\nprivate:\n    /// Helper method to throw exception with system-specific error message.\n    NCBI_NORETURN\n    void  x_ThrowException(const string& what);\n\n    /// Helper method to initialize object.\n    ///\n    /// Called from constructor.\n    /// @param path\n    ///   Path to DLL.\n    /// @param name\n    ///   Name of DLL.\n    /// @param when_to_load\n    ///   Choice to load now or later using Load().\n    /// @param auto_load\n    ///   Choice to unload DLL in destructor.\n    /// @param treat_as\n    ///   Choice to transform the DLL base name.\n    /// @sa\n    ///   EFlags \n    void  x_Init(const string& path, const string& name, TFlags flags);\n\nprotected:\n    /// Private copy constructor to prohibit copy.\n    CDll(const CDll&);\n\n    /// Private assignment operator to prohibit assignment.\n    CDll& operator= (const CDll&);\n\nprivate:\n    string      m_Name;     ///< DLL name\n    SDllHandle* m_Handle;   ///< DLL handle\n    TFlags      m_Flags;    ///< Flags\n};\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n///\n/// Class for entry point resolution when there are several DLL candidates.\n///\n/// If Dll resolver finds DLL with the specified entry point it is\n/// stored in the internal list (provided by GetResolvedEntries method).\n/// All DLL libraries are unloaded upon resolver's destruction\n///\nclass CDllResolver\n{\npublic:\n\n    /// DLL entry point name -> function pair\n    struct SNamedEntryPoint\n    {\n        string               name;          ///< Entry point name\n        CDll::TEntryPoint    entry_point;   ///< DLL entry point\n\n        SNamedEntryPoint(const string&       x_name,\n                         CDll::TEntryPoint   x_entry_point)\n        : name(x_name)\n        {\n            entry_point.data = x_entry_point.data;\n        }\n    };\n\n    /// DLL resolution descriptor.\n    struct SResolvedEntry\n    {\n        CDll*                     dll;           ///< Loaded DLL instance\n        vector<SNamedEntryPoint>  entry_points;  ///< list of DLL entry points\n\n        SResolvedEntry(CDll* dll_ptr = 0)\n        : dll(dll_ptr)\n        {}\n    };\n\n    /// Container, keeps list of all resolved entry points.\n    typedef vector<SResolvedEntry>  TEntries;\n\n\n    /// Constructor.\n    ///\n    /// @param entry_point_name\n    ///   Name of the DLL entry point.\n    /// @param unload\n    ///   Whether to unload loaded DLLs in the destructor\n    NCBI_XNCBI_EXPORT CDllResolver(const string& entry_point_name, \n                                   CDll::EAutoUnload unload = CDll::eAutoUnload);\n\n    /// Constructor.\n    ///\n    /// @param entry_point_names\n    ///   List of alternative DLL entry points.\n    /// @param unload\n    ///   Whether to unload loaded DLLs in the destructor\n    NCBI_XNCBI_EXPORT CDllResolver(const vector<string>& entry_point_names,\n                                   CDll::EAutoUnload unload = CDll::eAutoUnload); \n\n    /// Destructor.\n    NCBI_XNCBI_EXPORT ~CDllResolver();\n\n    /// Try to load DLL from the specified file and resolve the entry point.\n    ///\n    /// If DLL resolution successfull loaded entry point is registered in the\n    /// internal list of resolved entries.\n    ///\n    /// @param file_name\n    ///   Name of the DLL file. Can be full name with path of the base name.\n    /// @param driver_name\n    ///   Name of the driver (substitute for ${driver} macro)\n    /// @return\n    ///   TRUE if DLL is succesfully loaded and entry point resolved.\n    /// @sa\n    ///   GetResolvedEntries\n    NCBI_XNCBI_EXPORT \n    bool TryCandidate(const string& file_name,\n                      const string& driver_name = kEmptyStr);\n\n    /// Try to resolve file candidates.\n    ///\n    /// @param candidates\n    ///    Container with file names to try.\n    /// @param driver_name\n    ///    Driver name\n    /// @sa\n    ///   GetResolvedEntries\n    template<class TClass>\n    void Try(const TClass& candidates, const string& driver_name = kEmptyStr)\n    {\n        typename TClass::const_iterator it = candidates.begin();\n        typename TClass::const_iterator it_end = candidates.end();\n        for (; it != it_end; ++it) {\n            TryCandidate(*it, driver_name);\n        }\n    }\n\n    /// Various (usually system-dependent) standard paths to look for DLLs in.\n    /// The fProgramPath flag works only inside CNcbiApplication framework.\n    /// @sa\n    ///   x_AddExtraDllPath, FindCandidates\n    enum EExtraDllPath {\n        fNoExtraDllPath = 0,        //< Do not add\n        fProgramPath    = 1 << 0,   //< Path to executable file\n        fToolkitDllPath = 1 << 1,   //< Toolkit paths\n        fSystemDllPath  = 1 << 2,   //< System paths\n        fDefaultDllPath = fProgramPath | fToolkitDllPath | fSystemDllPath\n    };\n\n    typedef int TExtraDllPath;      //<  bitwise OR of \"EExtraDllPath\"\n\n    /// Try to resolve all files matching the specified masks in the\n    /// specified directories.\n    ///\n    /// @param paths\n    ///   Container with directory names.\n    /// @param masks\n    ///   Container with file candidate masks.\n    /// @param extra_path\n    ///   Extra \"standard\" paths to search the DLLs in\n    /// @sa\n    ///   GetResolvedEntries, x_AddExtraDllPath\n    template<class TClass1, class TClass2>\n    void FindCandidates(const TClass1& paths, const TClass2& masks,\n                        TExtraDllPath extra_path = fDefaultDllPath,\n                        const string& driver_name = kEmptyStr)\n    {\n        // search in the explicitly specified paths\n        vector<string> x_path(paths);\n        // search in \"standard\" paths, if any specified by 'extra_path' flag\n        x_AddExtraDllPath(x_path, extra_path);\n        // remove duplicate dirs\n        vector<string> x_path_unique;\n        x_path_unique.reserve(x_path.size());\n#if defined(NCBI_OS_MSWIN)\n        NStr::ECase use_case = NStr::eNocase;\n#else\n        NStr::ECase use_case = NStr::eCase;\n#endif\n        ITERATE(vector<string>, it, x_path) {\n            bool found = false;\n            ITERATE(vector<string>, i, x_path_unique) {\n                if ( NStr::Compare(*i, *it, use_case) == 0 ) {\n                    found = true;\n                    break;\n                }\n            }\n            if ( !found ) {\n                x_path_unique.push_back(CDir::DeleteTrailingPathSeparator(*it));\n            }\n        }\n\n        // find files\n        vector<string> candidates;\n        FindFiles(candidates,\n                  x_path_unique.begin(), x_path_unique.end(),\n                  masks.begin(), masks.end(),\n                  fFF_File);\n        // try to resolve entry points in the found DLLs\n        Try(candidates, driver_name);\n    }\n\n    /// Get all resolved entry points.\n    NCBI_XNCBI_EXPORT \n    const TEntries& GetResolvedEntries() const \n    { \n        return m_ResolvedEntries; \n    }\n\n    /// Get all resolved entry points.\n    NCBI_XNCBI_EXPORT\n    TEntries& GetResolvedEntries() \n    { \n        return m_ResolvedEntries; \n    }\n\n    /// Unload all resolved DLLs.\n    NCBI_XNCBI_EXPORT void Unload();\n\nprivate:\n    CDllResolver(const CDllResolver&);\n    CDllResolver& operator=(const CDllResolver&);\n\n    /// Get the DLL search paths related to the given standard path group\n    ///\n    /// @param paths\n    ///   Container to add the requested DLL search paths to.\n    /// @param which\n    ///   Which \"standard\" paths to add.\n    /// @sa\n    ///   FindCandidates\n    NCBI_XNCBI_EXPORT\n    void x_AddExtraDllPath(vector<string>& paths, TExtraDllPath which);\n\nprotected:\n    vector<string>     m_EntryPoinNames;   ///< Candidate entry points\n    TEntries           m_ResolvedEntries;\n    CDll::EAutoUnload  m_AutoUnloadDll;\n};\n\n/* @} */\n\n\nEND_NCBI_SCOPE\n\n#endif  /* CORELIB___NCBIDLL__HPP */\n",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/scripts/common/check/valgrind.supp": "# $Id: valgrind.supp 435732 2014-05-20 15:06:31Z ucko $\n#\n# Valgrind suppression file (version 3.5.0).\n#\n################################################################################\n#\n# Format of this file is:\n# {\n#     name_of_suppression\n#     tool_name:supp_kind\n#     (optional extra info for some suppression types)\n#     caller0 name, or /name/of/so/file.so\n#     caller1 name, or ditto\n#     (optionally: caller2 name)\n#     (optionally: caller3 name)\n#  }\n#\n# For Memcheck, the supp_kinds are:\n#\n#     Param Value1 Value2 Value4 Value8 Value16\n#     Free Addr1 Addr2 Addr4 Addr8 Addr16\n#     Cond (previously known as Value0)\n#\n# and the optional extra info is:\n#     if Param: name of system call param\n#     if Free: name of free-ing fn)\n#\n################################################################################\n#\n# NOTE: C++ function names must be mangled.\n#       Use --gen-suppressions=all option to generate rules.\n#\n################################################################################\n\n{\n   Known LIBC bug (https://bugs.kde.org/show_bug.cgi?id=167483)\n   Memcheck:Free\n   fun:free\n   fun:free_mem\n   fun:__libc_freeres\n   fun:_vgnU_freeres\n   fun:exit\n   fun:(below main)\n}\n\n{\n   MemCpy to itself in swap() in CObject  (ICC 10.1)\n   Memcheck:Overlap\n   fun:memcpy\n   fun:_ZSt4swapISt4pairIPvjEEvRT_S4_\n   fun:_ZN4ncbi24sx_PopLastNewPtrMultipleEPv\n   fun:_ZN4ncbi16sx_PopLastNewPtrEPv\n   fun:_ZN4ncbi7CObject11InitCounterEv\n}\n\n{\n   Sybase DBLIB 12.5.1.10-ESD26-64bit (case 1)\n   Memcheck:Param\n   write(buf)\n   fun:__write_nocancel\n   fun:syb_tcp_write\n   fun:sendflush\n   fun:sendeom\n   fun:bcp__endbatch\n   fun:bcp_done\n}\n\n{\n   Sybase DBLIB 12.5.1.10-ESD26-64bit (case 2)\n   Memcheck:Param\n   write(buf)\n   fun:__write_nocancel\n   fun:syb_tcp_write\n   fun:sendflush\n   fun:sendserver\n   fun:bcp__send_text\n   fun:bcp_moretext\n}\n\n\n{\n   Sybase DBLIB 12.5.1.10-ESD26-64bit (case 3)\n   Memcheck:Param\n   write(buf)\n   fun:__write_nocancel\n   fun:syb_tcp_write\n   fun:sendflush\n   fun:sendserver\n   fun:bcp__buildrow\n   fun:bcp_sendrow\n}\n\n{\n   BerkeleyDB 4.6.21.1 glitch -- both alloc and use happen inside the same call\n   Memcheck:Param\n   pwrite64(buf)\n   fun:__pwrite_nocancel\n   fun:__os_io\n   fun:__memp_pgwrite\n   fun:__memp_bhwrite\n   fun:__memp_sync_int\n   fun:__memp_fsync\n   fun:__db_sync\n   fun:__db_refresh\n   fun:__db_close\n   fun:__fop_subdb_setup\n   fun:__db_open\n   fun:__db_open_pp\n}\n\n{\n   Googles as an apparent LZO2' intentional overread for performance\n   Memcheck:Value8\n   fun:find_match\n   fun:lzo1x_999_compress_internal\n   fun:lzo1x_999_compress_level\n   fun:lzo1x_999_compress\n}\n\n{\n    http://permalink.gmane.org/gmane.comp.encryption.nettle.bugs/886\n    Memcheck:Addr8\n    fun:memxor3\n    fun:gcm_crypt\n    fun:nettle_gcm_encrypt\n}\n\n{\n    I think this is glibc's ultra optimised getenv doing 2 byte reads\n    Memcheck:Addr2\n    fun:getenv\n}\n\n{\n    I think this is glibc's ultra optimised getenv doing 2 byte reads\n    Memcheck:Cond\n    fun:getenv\n}\n\n{\n    corelib/CObject/InitCounter\n    Memcheck:Cond\n    fun:_ZN4ncbi7CObject11InitCounterEv\n    fun:*\n}\n{\n    corelib/Diag/s_CreateDefaultHandler\n    Memcheck:Leak\n    ...\n    fun:_ZN4ncbiL26s_CreateDefaultDiagHandlerEv\n}\n{\n    corelib/Diag/CreateDefaultHandler\n    Memcheck:Leak\n    ...\n    fun:_ZN4ncbi24CreateDefaultDiagHandlerEv\n}\n{\n    corelib/SSystemMutex/InitializeDynamic\n    Memcheck:Cond\n    fun:_ZN4ncbi12SSystemMutex17InitializeDynamicEv\n    fun:*\n}\n{\n    corelib/SSystemFastMutex/InitializeDynamic\n    Memcheck:Cond\n    fun:_ZN4ncbi16SSystemFastMutex17InitializeDynamicEv\n    fun:*\n}\n{\n    corelib/CTimeout/operator ==, <\n    Memcheck:Cond\n    fun:_ZNK4ncbi8CTimeout??ERKS0_\n    fun:*\n}\n{\n    corelib/NCBI_THROW\n    Memcheck:Leak\n    fun:malloc\n    fun:__cxa_get_globals\n    fun:__cxa_allocate_exception\n}\n{\n    corelib/SetDiagStream\n    Memcheck:Leak\n    fun:_Znwm\n    fun:_ZN4ncbi13SetDiagStreamEPSobPFvPvES1_RKSs\n}\n{\n   corelib/CNcbiEnvironment::Set\n   Memcheck:Leak\n   fun:malloc\n   fun:strdup\n   fun:_ZN4ncbi16CNcbiEnvironment3SetERKSsS2_\n}\n{\n    CToolkit/COldAsnTypeInfo\n    Memcheck:Leak\n    fun:?alloc\n    fun:s_MemAllocator\n    ...\n    fun:_ZN4ncbi15COldAsnTypeInfo*\n}\n{\n    serial/TypeInfo\n    Memcheck:Leak\n    fun:_Znwm\n    ...\n    fun:*TypeInfo*\n}\n{\n    serial/CEnumDataType::CreateDefault\n    Memcheck:Leak\n    fun:_Znwm\n    fun:_ZNK4ncbi13CEnumDataType13CreateDefaultERKNS_10CDataValueE\n    fun:_ZN4ncbi18CDataContainerType15CreateClassInfo*\n}\n{\n    serial/CIntDataType::CreateDefault\n    Memcheck:Leak\n    fun:_Znwm\n    fun:_ZNK4ncbi12CIntDataType13CreateDefaultERKNS_10CDataValueE\n    fun:_ZN4ncbi18CDataContainerType15CreateClassInfo*\n}\n{\n    serial/CPointerTypeInfo::ReadPointer\n    Memcheck:Leak\n    fun:_Znwm\n    fun:*\n    fun:*\n    fun:_ZN4ncbi16CPointerTypeInfo11ReadPointer*\n}\n{\n    serial/member\n    Memcheck:Leak\n    fun:__builtin_new\n    fun:_Znwj\n    fun:_ZN4ncbi18CClassTypeInfoBase9AddMemberEPKcPKvRKNS_8CTypeRefE\n}\n{\n    serial/member\n    Memcheck:Leak\n    fun:_Znwj\n    fun:_ZN4ncbi18CClassTypeInfoBase9AddMemberEPKcPKvRKNS_8CTypeRefE\n}\n{\n    serial/classinfo\n    Memcheck:Leak\n    fun:__builtin_new\n    fun:_Znwj\n    fun:_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIPN4ncbi18CClassTypeInfoBaseEEE8allocateEjPKv\n    fun:_ZNSt8_Rb_treeIPN4ncbi18CClassTypeInfoBaseES2_St9_IdentityIS2_ESt4lessIS2_ESaIS2_EE11_M_get_nodeEv\n}\n{\n    serial/iteminfo\n    Memcheck:Leak\n    fun:__builtin_new\n    fun:_Znwj\n    fun:_ZN9__gnu_cxx13new_allocatorIN4ncbi7AutoPtrINS1_9CItemInfoENS1_7DeleterIS3_EEEEE8allocateEjPKv\n    fun:_ZNSt12_Vector_baseIN4ncbi7AutoPtrINS0_9CItemInfoENS0_7DeleterIS2_EEEESaIS5_EE11_M_allocateEj\n}\n{\n    serial/iteminfo\n    Memcheck:Leak\n    fun:_Znwj\n    fun:_ZN9__gnu_cxx13new_allocatorIN4ncbi7AutoPtrINS1_9CItemInfoENS1_7DeleterIS3_EEEEE8allocateEjPKv\n}\n{\n    serial/iteminfo\n    Memcheck:Leak\n    fun:_Znwj\n    fun:_ZNSt6vectorIN4ncbi7AutoPtrINS0_9CItemInfoENS0_7DeleterIS2_EEEESaIS5_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS5_S7_EERKS5_\n}\n{\n    serial/stltype\n    Memcheck:Leak\n    fun:__builtin_new\n    fun:_Znwj\n    fun:*\n    fun:_ZN4ncbi16CTypeInfoMapData11GetTypeInfoEPKNS_9CTypeInfoEPFPS1_S3_E\n}\n{\n    serial/stltype\n    Memcheck:Leak\n    fun:_Znwj\n    fun:*\n    fun:_ZN4ncbi16CTypeInfoMapData11GetTypeInfoEPKNS_9CTypeInfoEPFPS1_S3_E\n}\n{\n    serial/enumvalue\n    Memcheck:Leak\n    fun:__builtin_new\n    fun:_Znwj\n    fun:_ZNK4ncbi21CEnumeratedTypeValues11ValueToNameEv\n}\n{\n    serial/enumvalue\n    Memcheck:Leak\n    fun:_Znwj\n    fun:_ZNSt8_Rb_treeIiSt4pairIKiPKSsESt10_Select1stIS4_ESt4lessIiESaIS4_EE9_M_insertEPSt18_Rb_tree_node_baseSC_RKS4_\n    fun:_ZNSt8_Rb_treeIiSt4pairIKiPKSsESt10_Select1stIS4_ESt4lessIiESaIS4_EE13insert_uniqueESt17_Rb_tree_iteratorIS4_ERKS4_\n    fun:_ZNK4ncbi21CEnumeratedTypeValues11ValueToNameEv\n}\n{\n    serial/classinfo\n    Memcheck:Leak\n    fun:__builtin_new\n    fun:_Znwj\n    fun:_ZN4ncbi20CClassInfoHelperBase15CreateClassInfoEPKcjPKNS_7CObjectEPFPvPKNS_9CTypeInfoEERKSt9type_infoPFPSD_PKvE\n}\n{\n    serial/classinfo\n    Memcheck:Leak\n    fun:_Znwj\n    fun:_ZN4ncbi20CClassInfoHelperBase15CreateClassInfoEPKcjPKNS_7CObjectEPFPvPKNS_9CTypeInfoEPNS_17CObjectMemoryPoolEERKSt9type_infoPFPSF_PKvE\n}\n{\n    serial/choiceinfo\n    Memcheck:Leak\n    fun:__builtin_new\n    fun:_Znwj\n    fun:_ZN4ncbi20CClassInfoHelperBase16CreateChoiceInfoEPKcjPKNS_7CObjectEPFPvPKNS_9CTypeInfoEERKSt9type_infoPFjPKNS_15CChoiceTypeInfoEPKvEPFvSH_S6_jEPFvSH_S6_E\n}\n{\n    serial/choiceinfo\n    Memcheck:Leak\n    fun:_Znwj\n    fun:_ZN4ncbi20CClassInfoHelperBase16CreateChoiceInfoEPKcjPKNS_7CObjectEPFPvPKNS_9CTypeInfoEPNS_17CObjectMemoryPoolEERKSt9type_infoPFjPKNS_15CChoiceTypeInfoEPKvEPFvSJ_S6_jSB_EPFvSJ_S6_E\n}\n{\n    serial/typeinfo\n    Memcheck:Leak\n    fun:__builtin_new\n    fun:_Znwj\n    fun:_ZN4ncbi7objects*11GetTypeInfoEv\n}\n{\n    serial/typeinfo\n    Memcheck:Leak\n    fun:_Znwj\n    fun:_ZN4ncbi7objects*11GetTypeInfoEv\n}\n{\n    serial/typeinfo\n    Memcheck:Leak\n    fun:__builtin_new\n    fun:_Znwj\n    fun:_ZN4ncbi30CPrimitiveTypeInfoIntFunctionsI?E14CreateTypeInfoEv\n}\n{\n    serial/typeinfo\n    Memcheck:Leak\n    fun:_Znwj\n    fun:_ZN4ncbi30CPrimitiveTypeInfoIntFunctionsI?E14CreateTypeInfoEv\n}\n{\n    serial/enuminfo\n    Memcheck:Leak\n    fun:__builtin_new\n    fun:_Znwj\n    fun:_ZN4ncbi24CreateEnumeratedTypeInfoI*21CEnumeratedTypeValuesE\n}\n{\n    serial/enuminfo\n    Memcheck:Leak\n    fun:_Znwj\n    fun:_ZN4ncbi24CreateEnumeratedTypeInfoI*21CEnumeratedTypeValuesE\n}\n{\n    serial/choice\n    Memcheck:Leak\n    fun:__builtin_new\n    fun:_Znwj\n    fun:_ZN4ncbi15CChoiceTypeInfo10AddVariantEPKcPKvRKNS_8CTypeRefE\n}\n{\n    serial/choice\n    Memcheck:Leak\n    fun:_Znwj\n    fun:_ZN4ncbi15CChoiceTypeInfo10AddVariantEPKcPKvRKNS_8CTypeRefE\n}\n{\n    serial/std\n    Memcheck:Leak\n    fun:__builtin_new\n    fun:_Znwj\n    fun:_ZN4ncbi12CStdTypeInfo*CreateTypeInfo*\n}\n{\n    serial/std\n    Memcheck:Leak\n    fun:_Znwj\n    fun:_ZN4ncbi12CStdTypeInfo*CreateTypeInfo*\n}\n{\n    GProf/profil_counter\n    Memcheck:Cond\n    fun:profil_counter\n    fun:*\n}\n{\n    CSeqVector/tables\n    Memcheck:Leak\n    fun:__builtin_vec_new\n    fun:_Znaj\n    fun:_ZGVZN4ncbi7objects10CSeqVector18sx_GetConvertTableENS0_14CSeq_data_Base8E_ChoiceES3_bE6tables\n}\n{\n    CSeqVector/tables\n    Memcheck:Leak\n    fun:_Znaj\n    fun:_ZGVZN4ncbi7objects10CSeqVector18sx_GetConvertTableENS0_14CSeq_data_Base8E_ChoiceES3_bE6tables\n}\n{\n    boost/sigaltstack\n    Memcheck:Param\n    sigaltstack(ss)\n    fun:sigaltstack\n    fun:_ZN5boost6detail14signal_handlerD1Ev\n}\n{\n   boost/test_framework_impl::clear\n   Memcheck:Addr4\n   fun:_ZN5boost9unit_test14framework_impl5clearEv\n   fun:_ZN5boost9unit_test14framework_implD1Ev\n   fun:__tcf_3\n}\n{\n    LZO/do_compress\n    Memcheck:Cond\n    fun:do_compress\n    fun:lzo1x_1_compress\n}\n{\n    LZO/do_compress V8\n    Memcheck:Value8\n    fun:do_compress\n    fun:lzo1x_1_compress\n}\n{\n    STL/locale\n    Memcheck:Leak\n    fun:__builtin_vec_new\n    fun:_Znwj\n    fun:_ZNSt6locale7classicEv\n}\n{\n    STL/uncaught_exception\n    Memcheck:Leak\n    fun:malloc\n    fun:__cxa_get_globals\n    fun:_ZSt18uncaught_exceptionv\n}\n{\n    libc/dlrelocate\n    Memcheck:Cond\n    fun:_dl_relocate_object\n    fun:*\n}\n{\n    libc/dlopen\n    Memcheck:Leak\n    fun:malloc\n    fun:add_to_global\n    fun:dl_open_worker\n}\n{\n    libc/dlopen\n    Memcheck:Leak\n    fun:calloc\n    fun:_dlerror_run\n}\n{\n    libc/dlopen\n    Memcheck:Leak\n    fun:malloc\n    fun:decompose_rpath\n    fun:_dl_map_object\n}\n{\n    libc/dlopen\n    Memcheck:Leak\n    fun:malloc\n    fun:_dl_map_object_deps\n}\n{\n    libc/dlopen\n    Memcheck:Leak\n    fun:malloc\n    fun:_dl_new_object\n}\n{\n    libc/dlopen\n    Memcheck:Leak\n    fun:calloc\n    fun:_dl_new_object\n}\n{\n    libc/dlopen\n    Memcheck:Leak\n    fun:malloc\n    fun:open_rpath\n    fun:_dl_map_object\n}\n{\n    libc/dlopen\n    Memcheck:Leak\n    fun:calloc\n    fun:_dl_check_map_versions\n}\n{\n    iostream/buffer\n    Memcheck:Leak\n    fun:__builtin_vec_new\n    fun:_Znaj\n    fun:_ZNSt13basic_filebufIwSt11char_traitsIwEE27_M_allocate_internal_bufferEv\n}\n{\n    iostream/buffer\n    Memcheck:Leak\n    fun:_Znaj\n    fun:_ZNSt13basic_filebufIwSt11char_traitsIwEE27_M_allocate_internal_bufferEv\n}\n{\n    iostream/buffer\n    Memcheck:Leak\n    fun:__builtin_vec_new\n    fun:_Znaj\n    fun:_ZNSt13basic_filebufIcSt11char_traitsIcEE27_M_allocate_internal_bufferEv\n}\n{\n    iostream/buffer\n    Memcheck:Leak\n    fun:_Znaj\n    fun:_ZNSt13basic_filebufIcSt11char_traitsIcEE27_M_allocate_internal_bufferEv\n}\n{\n    iostream/sync_with_stdio\n    Memcheck:Leak\n    fun:_Znam\n    fun:_ZNSt13basic_filebufI?St11char_traitsI?EE27_M_allocate_internal_bufferEv\n    fun:_ZN9__gnu_cxx13stdio_filebuf*char_traitsI?EEC1EP8_IO_FILESt13_Ios_Openmodem\n    fun:_ZNSt8ios_base15sync_with_stdioEb\n}\n{\n    _dl_open\n    Memcheck:Addr4\n    fun:*\n    fun:*\n    fun:_dl_catch_error\n    fun:_dl_open\n}\n{\n    _dl_map_object\n    Memcheck:Addr4\n    fun:*\n    fun:*\n    fun:_dl_map_object\n}\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/serial/datatool/testdata/data/set.bin",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/serial/datatool/testdata/res/set.bin",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/util/compress/bzip2/bzip2.txt",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/util/compress/bzip2/bzip2.1.preformatted",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/util/compress/bzip2/manual.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/objtools/blast/seqdb_reader/SeqDB-design-1.sxi",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/objtools/blast/blastdb_format/unit_test/data/mask-data-db.pab",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/objtools/blast/blastdb_format/unit_test/data/seqp.psi",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/objtools/blast/blastdb_format/unit_test/data/mask-data-db.paa",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/objtools/blast/blastdb_format/unit_test/data/mask-data-db.pnd",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/objtools/blast/blastdb_format/unit_test/data/seqp.pnd",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/objtools/blast/blastdb_format/unit_test/data/mask-data-db.pac",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/objtools/blast/blastdb_format/unit_test/data/seqp.phr",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/objtools/blast/blastdb_format/unit_test/data/seqp.pin",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/objtools/blast/blastdb_format/unit_test/data/mask-data-db.pin",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/objtools/blast/blastdb_format/unit_test/data/seqp.pni",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/objtools/blast/blastdb_format/unit_test/data/mask-data-db.pni",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/objtools/blast/blastdb_format/unit_test/data/mask-data-db.phr",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/objtools/blast/gene_info_reader/unit_test/data/geneinfo.g2o",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/objtools/blast/gene_info_reader/unit_test/data/geneinfo.i2o",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/objects/seqfeat/SubSource.cpp",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/build-system/project_tree_builder_gui/bin/ptbgui.jar",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/build-system/project_tree_builder_gui/bin/lib/swing-layout-1.0.4.jar",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/build-system/project_tree_builder_gui/bin/lib/swing-layout-1.0.3.jar",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/build-system/project_tree_builder/ncbilogo.ico",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/long-tis.nin",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/nrshort.old.phr",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/seqn.nhr",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/long-tis.nsq",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/mask-data-db.pab",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/user-column-db.pog",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/ntshort.old.nsq",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/seqp.psi",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/mini-gnomon.psi",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/seqn.nnd",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/sparse_id.nhr",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/mask-data-db.paa",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/wp_nr.ppd",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/ntshort.nsi",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/long-tis.nhr",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/ntshort.nhr",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/wgs.ABDC.gil",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/seqn.nni",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/user-column-db.pni",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/prot345b.gil",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/user-column-db.pin",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/nrshort.old.pni",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/mask-data-db.pnd",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/ntshort.old.nni",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/wp_nr.psi",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/nrshort.pog",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/ntshort.old.nnd",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/broken-mask-data-db.phr",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/mini-gnomon.pin",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/ntshort.nin",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/sparse_id.nin",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/wp_nr.pnd",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/nrshort.old.psi",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/nrshort.old.pin",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/broken-mask-data-db.psi",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/mini-gnomon.phr",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/seqp.pnd",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/mask-data-db.pac",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/seqn.nin",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/wp_nr.pni",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/ntshort.nnd",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/seqp.phr",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/f555.nhr",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/user-column-db.psi",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/ntshort.nni",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/user-column-db.pnd",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/wp_nr.phr",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/mask-data-db.pog",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/broken-mask-data-db.pni",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/nrshort.old.pog",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/seqp.pin",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/seqp.pog",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/wp_nr.pin",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/wp_nr.ppi",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/seqn.nsi",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/seqn.nog",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/f556.nsq",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/f556.nhr",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/short-tis.nsq",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/ntshort.nsq",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/mask-data-db.pin",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/nrshort.old.pnd",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/broken-mask-data-db.pin",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/nrshort.pnd",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/short-tis.nhr",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/sparse_id.nsq",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/wgs.AADN.gil",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/ntshort.old.nhr",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/long-tis.nti",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/ntshort.nog",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/f555.nsq",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/wp_nr.pog",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/nrshort.psi",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/seqp.pni",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/broken-mask-data-db.pnd",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/nrshort.phr",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/mask-data-db.pni",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/short-tis.nti",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/mask-data-db.phr",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/short-tis.ntd",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/user-column-db.phr",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/seqn.nsq",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/ntshort.old.nog",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/long-tis.ntd",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/mini-gnomon.pog",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/short-tis.nin",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/broken-mask-data-db.pab",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/ntshort.old.nin",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/sparse_id.nni",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/f555.nin",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/nrshort.pni",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/nrshort.pin",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/seqdb_reader/data/ranges/evenp.msk",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/api/data/rpstest_be.pnd",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/api/data/seqn.nhr",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/api/data/nt.41646578.nab",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/api/data/seqp.psi",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/api/data/seqn.nnd",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/api/data/rpstest_le.rps",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/api/data/deltatest_nocbs.pin",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/api/data/rpstest_be.loo",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/api/data/deltatest.freq",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/api/data/seqn.nni",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/api/data/rpstest_le.pin",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/api/data/deltatest.pin",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/api/data/nt.41646578.nin",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/api/data/deltatest_nocbs.phr",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/api/data/rpstest_be.phr",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/api/data/nt.41646578.nsq",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/api/data/deltatest.rps",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/api/data/deltatest_nocbs.rps",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/api/data/nt.41646578.naa",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/api/data/seqp.pnd",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/api/data/deltatest.loo",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/api/data/seqn.nin",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/api/data/rpstest_le.freq",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/api/data/seqp.phr",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/api/data/deltatest_nocbs.obsr",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/api/data/rpstest_le.pnd",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/api/data/rpstest_be.rps",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/api/data/seqp.pin",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/api/data/seqn.nsi",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/api/data/rpstest_le.pni",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/api/data/rpstest_le.loo",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/api/data/nt.41646578.nog",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/api/data/rpstest_be.pin",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/api/data/seqp.pni",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/api/data/deltatest.obsr",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/api/data/rpstest_be.pni",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/api/data/nt.41646578.nac",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/api/data/nt.41646578.nhr",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/api/data/deltatest_nocbs.wcounts",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/api/data/seqn.nsq",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/api/data/rpstest_le.phr",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/api/data/deltatest_nocbs.loo",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/api/data/deltatest.phr",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/unit_tests/api/data/deltatest.wcounts",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/src/algo/blast/dbindex/README.usage",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/include/corelib/mswin_no_popup.h",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/include/objtools/blast/seqdb_reader/impl/seqdbatlas.hpp",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/compilers/msvc900_prj/ncbilogo.ico",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/compilers/vs2012/ncbilogo.ico",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/compilers/msvc1000_prj/ncbilogo.ico",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/compilers/unix/cxx_filter.WorkShop.sh",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/compilers/vs2013/ncbilogo.ico",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/compilers/xCode/cpp.icns",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/compilers/xCode/Application.applescript",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/compilers/xCode/English.lproj/InfoPlist.strings",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/compilers/xCode/English.lproj/MainMenu.nib/keyedobjects.nib",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/compilers/xCode/English.lproj/InstallLibsPanel.nib/keyedobjects.nib",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/scripts/projects/blast/post_build/win/ncbilogo.ico",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/scripts/projects/blast/post_build/macosx/large-Blue_ncbi_logo.tiff",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/scripts/projects/blast/post_build/macosx/uninstall_ncbi_blast.zip",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/scripts/projects/igblast/post_build/win/ncbilogo.ico",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/scripts/projects/igblast/post_build/macosx/large-Blue_ncbi_logo.tiff",
        "/tmp/vanessa/spack-stage/spack-stage-blast-plus-2.2.30-wf56efh72rdyjr737mnp2gowb7a6n6tg/spack-src/c++/scripts/projects/igblast/post_build/macosx/uninstall_ncbi_igblast.zip"
    ],
    "total_files": 4581
}