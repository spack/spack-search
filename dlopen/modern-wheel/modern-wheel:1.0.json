{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-modern-wheel-1.0-6hpxri2z4cosrw4b3pkyiwg4lwadwhi5/spack-src/src/dlmanager.cpp": "/**\n * \n * Modern Wheel : all the things that shouldn't be reinvented from one project to the other\n * \n * The MIT License (MIT)\n * \n * Copyright (C) 2015  Massimiliano Culpo\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n */\n\n#include <mwheel/dlmanager.h>\n\n#include <boost/predef.h>\n\n#include <iostream>\n#include <sstream>\n#include <typeinfo>\n#include <utility>\n\n#ifdef BOOST_OS_UNIX\n#include <dlfcn.h>\n#else\n#error \"At present only Unix-like OS are supported\"\n#endif\n\nusing namespace std;\n\nnamespace mwheel {\n\nvoid DLManager::load_library(const boost::filesystem::path& library_path)\n{\n#ifdef BOOST_OS_UNIX\n  auto handle = dlopen(library_path.c_str(), RTLD_LAZY);  \n  auto error_message = dlerror();\n  if (error_message)\n  {\n    stringstream estream;\n    estream << \"ERROR : cannot load shared library \" << library_path << endl;\n    estream << \"\\t\" << error_message << endl;\n    throw error_loading_dynamic_library(estream.str());\n  }\n  m_dl_map.insert(make_pair(library_path, handle));  \n#endif\n}\n\nvoid DLManager::unload_library(const boost::filesystem::path& library_path)\n{\n#ifdef BOOST_OS_UNIX\n  auto it = DLMap::iterator( m_dl_map.find(library_path) ); \n  // The library was not found\n  if (it == m_dl_map.end() )\n  {\n    stringstream estream;\n    estream << \"ERROR : cannot trying to unload a shared library that was not previously loaded \" << library_path << endl;\n    estream << \"\\tDid you use a wrong name for the library to be unloaded?\" << endl;\n    throw library_not_loaded(estream.str());\n  }\n  // Close the library  \n  if ( dlclose(it->second) )\n  {\n    auto error_message = dlerror();  \n    stringstream estream;\n    estream << \"ERROR : cannot unload shared library \" << library_path << endl;\n    estream << \"\\t\" << error_message << endl;\n    throw error_unloading_dynamic_library(estream.str());\n  }\n  m_dl_map.erase(it);\n#endif\n}\n\nDLManager::~DLManager()\n{\n#ifdef BOOST_OS_UNIX\n  for (auto & x : m_dl_map)\n  {\n    dlclose(x.second);\n    auto error_message = dlerror();\n    if (error_message)\n    {\n      cerr << \"ERROR : cannot unload shared library \" << x.first << endl;\n      cerr << \"\\t\" << error_message << endl;      \n    }\n  }\n#endif\n}\n\n}\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-modern-wheel-1.0-6hpxri2z4cosrw4b3pkyiwg4lwadwhi5/spack-src/doc/Wagon_wheel_at_Black_Creek_Pioneer_Village.jpg"
    ],
    "total_files": 28
}