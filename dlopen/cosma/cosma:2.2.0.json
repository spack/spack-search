{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-cosma-2.2.0-upcb6a5xj4urusmjtchuqxaxk7u4gca7/spack-src/docker/gpu/deploy.Dockerfile": "ARG BUILD_ENV\n\nFROM $BUILD_ENV as builder\n\nARG BLAS\n\n# Build COSMA\nCOPY . /COSMA\n\nRUN mkdir /COSMA/build && cd /COSMA/build && \\\n    CC=mpicc CXX=mpicxx cmake .. \\\n      -DCOSMA_WITH_TESTS=ON \\\n      -DCUDA_PATH=/usr/local/cuda \\\n      -DCOSMA_BLAS=CUDA \\\n      -DCOSMA_SCALAPACK=CUSTOM \\\n      -DCMAKE_BUILD_TYPE=Release \\\n      -DCMAKE_INSTALL_PREFIX=/usr && \\\n      make -j$(nproc) && \\\n      make DESTDIR=/root/COSMA-build install && \\\n      rm -rf /COSMA\n\n# Run linuxdeploy, and add a bunch of libs that are dlopen'ed by mkl\nRUN /root/libtree/libtree \\\n      -d /root/COSMA.bundle/ \\\n      --chrpath \\\n      --strip \\\n      /root/COSMA-build/usr/bin/test.cosma \\\n      /root/COSMA-build/usr/bin/test.mapper \\\n      /root/COSMA-build/usr/bin/test.multiply \\\n      /root/COSMA-build/usr/bin/test.multiply_using_layout \\\n      /root/COSMA-build/usr/bin/test.pdgemm \\\n      /root/COSMA-build/usr/bin/test.scalar_matmul\n\nFROM ubuntu:18.04\n\n# This is the only thing necessary really from nvidia/cuda's ubuntu18.04 runtime image\nENV NVIDIA_VISIBLE_DEVICES all\nENV NVIDIA_DRIVER_CAPABILITIES compute,utility\nENV NVIDIA_REQUIRE_CUDA \"cuda>=10.1 brand=tesla,driver>=384,driver<385 brand=tesla,driver>=396,driver<397 brand=tesla,driver>=410,driver<411\"\n\nCOPY --from=builder /root/COSMA.bundle /root/COSMA.bundle\n\n# Make it easy to call our binaries.\nENV PATH=\"/root/COSMA.bundle/usr/bin:$PATH\"\n\nRUN echo \"/root/COSMA.bundle/usr/lib/\" > /etc/ld.so.conf.d/cosma.conf && ldconfig\n\nWORKDIR /root/COSMA.bundle/usr/bin\n",
        "/tmp/vanessa/spack-stage/spack-stage-cosma-2.2.0-upcb6a5xj4urusmjtchuqxaxk7u4gca7/spack-src/docker/cpu-release/deploy.Dockerfile": "ARG BUILD_ENV\n\nFROM $BUILD_ENV as builder\n\n# Build COSMA\nCOPY . /COSMA\n\nRUN COMPILERVARS_ARCHITECTURE=intel64 /opt/intel/bin/compilervars.sh && \\\n    mkdir /COSMA/build && cd /COSMA/build && \\\n    CC=mpicc CXX=mpicxx cmake .. \\\n      -DCOSMA_WITH_TESTS=ON \\\n      -DCUDA_PATH=/usr/local/cuda \\\n      -DCOSMA_BLAS=MKL \\\n      -DCOSMA_SCALAPACK=MKL \\\n      -DCMAKE_BUILD_TYPE=Release \\\n      -DCMAKE_INSTALL_PREFIX=/usr && \\\n      make -j$(nproc) && \\\n      make DESTDIR=/root/COSMA-build install && \\\n      rm -rf /COSMA\n\nENV MKL_LIB=/opt/intel/compilers_and_libraries/linux/mkl/lib/intel64\n\n# Run linuxdeploy, and add a bunch of libs that are dlopen'ed by mkl\nRUN /root/libtree/libtree --chrpath --strip -d /root/COSMA.bundle/ \\\n      /root/COSMA-build/usr/bin/test.cosma \\\n      /root/COSMA-build/usr/bin/test.mapper \\\n      /root/COSMA-build/usr/bin/test.multiply \\\n      /root/COSMA-build/usr/bin/test.multiply_using_layout \\\n      /root/COSMA-build/usr/bin/test.pdgemm \\\n      /root/COSMA-build/usr/bin/test.scalar_matmul \\\n      # MKL dlopen's some of their libs, so we have to explicitly copy them over\n      ${MKL_LIB}/libmkl_avx.so \\\n      ${MKL_LIB}/libmkl_avx2.so \\\n      ${MKL_LIB}/libmkl_avx512_mic.so \\\n      ${MKL_LIB}/libmkl_avx512.so \\\n      ${MKL_LIB}/libmkl_core.so \\\n      ${MKL_LIB}/libmkl_def.so \\\n      ${MKL_LIB}/libmkl_intel_thread.so \\\n      ${MKL_LIB}/libmkl_mc.so \\\n      ${MKL_LIB}/libmkl_mc3.so \\\n      ${MKL_LIB}/libmkl_sequential.so \\\n      ${MKL_LIB}/libmkl_tbb_thread.so \\\n      ${MKL_LIB}/libmkl_vml_avx.so \\\n      ${MKL_LIB}/libmkl_vml_avx2.so \\\n      ${MKL_LIB}/libmkl_vml_avx512_mic.so \\\n      ${MKL_LIB}/libmkl_vml_avx512.so \\\n      ${MKL_LIB}/libmkl_vml_cmpt.so \\\n      ${MKL_LIB}/libmkl_vml_def.so \\\n      ${MKL_LIB}/libmkl_vml_mc.so \\\n      ${MKL_LIB}/libmkl_vml_mc3.so\n\nFROM ubuntu:18.04\n\nCOPY --from=builder /root/COSMA.bundle /root/COSMA.bundle\n\n# Make it easy to call our binaries.\nENV PATH=\"/root/COSMA.bundle/usr/bin:$PATH\"\n\nRUN echo \"/root/COSMA.bundle/usr/lib/\" > /etc/ld.so.conf.d/cosma.conf && ldconfig\n\nWORKDIR /root/COSMA.bundle/usr/bin\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-cosma-2.2.0-upcb6a5xj4urusmjtchuqxaxk7u4gca7/spack-src/libs/Tiled-MM/docs/performance.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-cosma-2.2.0-upcb6a5xj4urusmjtchuqxaxk7u4gca7/spack-src/libs/grid2grid/docs/performance.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-cosma-2.2.0-upcb6a5xj4urusmjtchuqxaxk7u4gca7/spack-src/docs/cp2k-benchmark.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-cosma-2.2.0-upcb6a5xj4urusmjtchuqxaxk7u4gca7/spack-src/docs/max-logo-2.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-cosma-2.2.0-upcb6a5xj4urusmjtchuqxaxk7u4gca7/spack-src/docs/max-logo.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-cosma-2.2.0-upcb6a5xj4urusmjtchuqxaxk7u4gca7/spack-src/docs/square-results.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-cosma-2.2.0-upcb6a5xj4urusmjtchuqxaxk7u4gca7/spack-src/docs/cscs-logo.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-cosma-2.2.0-upcb6a5xj4urusmjtchuqxaxk7u4gca7/spack-src/docs/pasc-logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-cosma-2.2.0-upcb6a5xj4urusmjtchuqxaxk7u4gca7/spack-src/docs/cosma-logo.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-cosma-2.2.0-upcb6a5xj4urusmjtchuqxaxk7u4gca7/spack-src/docs/erc-logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-cosma-2.2.0-upcb6a5xj4urusmjtchuqxaxk7u4gca7/spack-src/docs/cp2k-results-128.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-cosma-2.2.0-upcb6a5xj4urusmjtchuqxaxk7u4gca7/spack-src/docs/cp2k-results-1024.pdf"
    ],
    "total_files": 262
}