{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-vt-0.577-ggqocozetwnt2ew64w3sab5w5bvs7bzt/spack-src/lib/htslib/configure.ac": "# Configure script for htslib, a C library for high-throughput sequencing data.\n#\n#    Copyright (C) 2015 Genome Research Ltd.\n#\n#    Author: John Marshall <jm18@sanger.ac.uk>\n#\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n# of this software and associated documentation files (the \"Software\"), to deal\n# in the Software without restriction, including without limitation the rights\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n# copies of the Software, and to permit persons to whom the Software is\n# furnished to do so, subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included in\n# all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n# DEALINGS IN THE SOFTWARE.\n\ndnl Process this file with autoconf to produce a configure script\nAC_INIT([HTSlib], m4_esyscmd_s([make print-version]),\n        [samtools-help@lists.sourceforge.net], [], [http://www.htslib.org/])\nAC_PREREQ(2.63)  dnl This version introduced 4-argument AC_CHECK_HEADER\nAC_CONFIG_SRCDIR(hts.c)\nAC_CONFIG_HEADERS(config.h)\n\ndnl Copyright notice to be copied into the generated configure script\nAC_COPYRIGHT([Portions copyright (C) 2015 Genome Research Ltd.\n\nThis configure script is free software: you are free to change and\nredistribute it.  There is NO WARRANTY, to the extent permitted by law.])\n\nAC_PROG_CC\nAC_PROG_RANLIB\n\nneed_crypto=no\n\nAC_ARG_WITH([irods],\n  [AS_HELP_STRING([[--with-irods[=DIR]]],\n                  [use RodsAPIs library (in DIR) to support iRODS URLs])],\n  [case $withval in\n     no)  irods=disabled ;;\n     yes) irods=enabled ;;\n     *)   irods=enabled; IRODS_HOME=$withval ;;\n   esac],\n  [irods=disabled])\n\nAC_ARG_ENABLE([libcurl],\n  [AS_HELP_STRING([--enable-libcurl],\n                  [enable libcurl-based support for http/https/etc URLs])],\n  [], [enable_libcurl=no])\n\nAC_ARG_ENABLE([plugins],\n  [AS_HELP_STRING([--enable-plugins],\n                  [enable separately-compiled plugins for file access])],\n  [], [enable_plugins=no])\nAC_SUBST(enable_plugins)\n\nAC_ARG_WITH([plugin-dir],\n  [AS_HELP_STRING([--with-plugin-dir=DIR],\n                  [plugin installation location [LIBEXECDIR/htslib]])],\n  [case $withval in\n     yes|no) AC_MSG_ERROR([no directory specified for --with-plugin-dir]) ;;\n   esac],\n   [with_plugin_dir='$(libexecdir)/htslib'])\nAC_SUBST([plugindir], $with_plugin_dir)\n\nAC_ARG_WITH([plugin-path],\n  [AS_HELP_STRING([--with-plugin-path=PATH],\n                  [default HTS_PATH plugin search path [PLUGINDIR]])],\n  [case $withval in\n     yes) AC_MSG_ERROR([no path specified for --with-plugin-path]) ;;\n     no)  with_plugin_path= ;;\n   esac],\n  [with_plugin_path=$with_plugin_dir])\nAC_SUBST([pluginpath], $with_plugin_path)\n\ndnl FIXME This pulls in dozens of standard header checks\nAC_FUNC_MMAP\nAC_CHECK_FUNCS(gmtime_r)\n\nif test $enable_plugins != no; then\n  AC_SEARCH_LIBS([dlopen], [dl], [],\n    [AC_MSG_ERROR([dlopen() not found\n\nPlugin support requires dynamic linking facilities from the operating system.\nEither configure with --disable-plugins or resolve this error to build HTSlib.])])\n  # TODO Test whether this is required and/or needs tweaking per-platform\n  LDFLAGS=\"$LDFLAGS -rdynamic\"\n  AC_DEFINE([ENABLE_PLUGINS], 1, [Define if HTSlib should enable plugins.])\nfi\n\nsave_LIBS=$LIBS\nzlib_devel=ok\ndnl Set a trivial non-empty INCLUDES to avoid excess default includes tests\nAC_CHECK_HEADER([zlib.h], [], [zlib_devel=missing], [;])\nAC_CHECK_LIB(z, inflate,  [], [zlib_devel=missing])\nLIBS=$save_LIBS\n\nif test $zlib_devel != ok; then\n  AC_MSG_ERROR([zlib development files not found\n\nHTSlib uses compression routines from the zlib library <http://zlib.net>.\nBuilding HTSlib requires zlib development files to be installed on the build\nmachine; you may need to ensure a package such as zlib1g-dev (on Debian or\nUbuntu Linux) or zlib-devel (on RPM-based Linux distributions) is installed.\n\nFAILED.  This error must be resolved in order to build HTSlib successfully.])\nfi\n\nif test $irods = enabled; then\n  # TODO Also test whether we require libgssapi_krb5 and AC_CHECK_LIB it\n  save_LDFLAGS=$LDFLAGS\n  LDFLAGS=\"$LDFLAGS -L$IRODS_HOME/lib/core/obj\"\n  AC_CHECK_LIB([RodsAPIs], [getRodsEnvFileName],\n    [case $with_irods in\n       yes) define_IRODS_HOME='# Uses $(IRODS_HOME) from the environment' ;;\n       *)   define_IRODS_HOME=\"IRODS_HOME = $with_irods\" ;;\n     esac],\n    [AC_MSG_ERROR([iRODS development files not found\n\nSupport for iRODS URLs requires the libRodsAPI client library and headers.\nConfigure with --with-irods=DIR (or just --with-irods if \\$IRODS_HOME has\nbeen exported with a suitable value), where DIR is the base of an iRODS tree\nsuch that the library is present as DIR/lib/core/obj/libRodsAPI.* and headers\nare present under DIR/lib/api/include and so on.])],\n    [-lgssapi_krb5 -lpthread])\n  LDFLAGS=$save_LDFLAGS\n  AC_DEFINE([HAVE_IRODS], 1, [Define to 1 if iRODS file access is enabled.])\nelse\n  define_IRODS_HOME='IRODS_HOME ?= /disabled'\nfi\nAC_SUBST([irods])\nAC_SUBST([define_IRODS_HOME])\n\nlibcurl=disabled\nif test \"$enable_libcurl\" != no; then\n  AC_CHECK_LIB([curl], [curl_easy_pause],\n    [AC_DEFINE([HAVE_LIBCURL], 1, [Define if libcurl file access is enabled.])\n     libcurl=enabled],\n    [AC_CHECK_LIB([curl], [curl_easy_init],\n       [message=\"library is too old (7.18+ required)\"],\n       [message=\"library not found\"])\n     case \"$enable_libcurl\" in\n       check) AC_MSG_WARN([libcurl not enabled: $message]) ;;\n       *) AC_MSG_ERROR([libcurl $message\n\nSupport for HTTPS and other SSL-based URLs requires routines from the libcurl\nlibrary <http://curl.haxx.se/libcurl/>.  Building HTSlib with libcurl enabled\nrequires libcurl development files to be installed on the build machine; you\nmay need to ensure a package such as libcurl4-{gnutls,nss,openssl}-dev (on\nDebian or Ubuntu Linux) or libcurl-devel (on RPM-based Linux distributions)\nis installed.\n\nEither configure with --disable-libcurl or resolve this error to build HTSlib.])\n       ;;\n     esac])\n  need_crypto=yes\nfi\nAC_SUBST([libcurl])\n\nCRYPTO_LIBS=\nif test $need_crypto != no; then\n  AC_CHECK_FUNC([CCHmac],\n    [AC_DEFINE([HAVE_COMMONCRYPTO], 1,\n               [Define if you have the Common Crypto library.])],\n    [save_LIBS=$LIBS\n     AC_CHECK_LIB([crypto], [HMAC])\n     LIBS=$save_LIBS\n     test \"$ac_cv_lib_crypto_HMAC\" = yes && CRYPTO_LIBS=-lcrypto])\nfi\nAC_SUBST([CRYPTO_LIBS])\n\nAC_CONFIG_FILES(config.mk)\nAC_OUTPUT\n",
        "/tmp/vanessa/spack-stage/spack-stage-vt-0.577-ggqocozetwnt2ew64w3sab5w5bvs7bzt/spack-src/lib/htslib/hfile_internal.h": "/*  hfile_internal.h -- internal parts of low-level input/output streams.\n\n    Copyright (C) 2013-2015 Genome Research Ltd.\n\n    Author: John Marshall <jm18@sanger.ac.uk>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\nTHE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.  */\n\n#ifndef HFILE_INTERNAL_H\n#define HFILE_INTERNAL_H\n\n#include \"htslib/hfile.h\"\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\nstruct hFILE_backend {\n    /* As per read(2), returning the number of bytes read (possibly 0) or\n       negative (and setting errno) on errors.  Front-end code will call this\n       repeatedly if necessary to attempt to get the desired byte count.  */\n    ssize_t (*read)(hFILE *fp, void *buffer, size_t nbytes) HTS_RESULT_USED;\n\n    /* As per write(2), returning the number of bytes written or negative (and\n       setting errno) on errors.  Front-end code will call this repeatedly if\n       necessary until the desired block is written or an error occurs.  */\n    ssize_t (*write)(hFILE *fp, const void *buffer, size_t nbytes)\n        HTS_RESULT_USED;\n\n    /* As per lseek(2), returning the resulting offset within the stream or\n       negative (and setting errno) on errors.  */\n    off_t (*seek)(hFILE *fp, off_t offset, int whence) HTS_RESULT_USED;\n\n    /* Performs low-level flushing, if any, e.g., fsync(2); for writing streams\n       only.  Returns 0 for success or negative (and sets errno) on errors. */\n    int (*flush)(hFILE *fp) HTS_RESULT_USED;\n\n    /* Closes the underlying stream (for output streams, the buffer will\n       already have been flushed), returning 0 for success or negative (and\n       setting errno) on errors, as per close(2).  */\n    int (*close)(hFILE *fp) HTS_RESULT_USED;\n};\n\n/* May be called by hopen_*() functions to decode a fopen()-style mode into\n   open(2)-style flags.  */\nint hfile_oflags(const char *mode);\n\n/* Must be called by hopen_*() functions to allocate the hFILE struct and set\n   up its base.  Capacity is a suggested buffer size (e.g., via fstat(2))\n   or 0 for a default-sized buffer.  */\nhFILE *hfile_init(size_t struct_size, const char *mode, size_t capacity);\n\n/* May be called by hopen_*() functions to undo the effects of hfile_init()\n   in the event opening the stream subsequently fails.  (This is safe to use\n   even if fp is NULL.  This takes care to preserve errno.)  */\nvoid hfile_destroy(hFILE *fp);\n\n\nstruct hFILE_scheme_handler {\n    /* Opens a stream when dispatched by hopen(); should call hfile_init()\n       to malloc a struct \"derived\" from hFILE and initialise it appropriately,\n       including setting base.backend to its own backend vector.  */\n    hFILE *(*open)(const char *filename, const char *mode) HTS_RESULT_USED;\n\n    /* Returns whether the URL denotes remote storage when dispatched by\n       hisremote().  For simple cases, use one of hfile_always_*() below.  */\n    int (*isremote)(const char *filename) HTS_RESULT_USED;\n\n    /* The name of the plugin or other code providing this handler.  */\n    const char *provider;\n\n    /* If multiple handlers are registered for the same scheme, the one with\n       the highest priority is used; range is 0 (lowest) to 100 (highest).  */\n    int priority;\n};\n\n/* May be used as an isremote() function in simple cases.  */\nextern int hfile_always_local (const char *fname);\nextern int hfile_always_remote(const char *fname);\n\n/* Should be called by plugins for each URL scheme they wish to handle.  */\nvoid hfile_add_scheme_handler(const char *scheme,\n                              const struct hFILE_scheme_handler *handler);\n\nstruct hFILE_plugin {\n    /* On entry, HTSlib's plugin API version (currently 1).  */\n    int api_version;\n\n    /* On entry, the plugin's handle as returned by dlopen() etc.  */\n    void *obj;\n\n    /* The plugin should fill this in with its (human-readable) name.  */\n    const char *name;\n\n    /* The plugin may wish to fill in a function to be called on closing.  */\n    void (*destroy)(void);\n};\n\n#ifdef ENABLE_PLUGINS\n#define PLUGIN_GLOBAL(identifier,suffix) identifier\n\n/* Plugins must define an entry point with this signature.  */\nextern int hfile_plugin_init(struct hFILE_plugin *self);\n\n#else\n#define PLUGIN_GLOBAL(identifier,suffix) identifier##suffix\n\n/* Only plugins distributed within the HTSlib source that might be built\n   even with --disable-plugins need to use PLUGIN_GLOBAL and be listed here;\n   others can simply define hfile_plugin_init().  */\n\nextern int hfile_plugin_init_irods(struct hFILE_plugin *self);\nextern int hfile_plugin_init_libcurl(struct hFILE_plugin *self);\n#endif\n\n/* This one is never built as a separate plugin.  */\nextern int hfile_plugin_init_net(struct hFILE_plugin *self);\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-vt-0.577-ggqocozetwnt2ew64w3sab5w5bvs7bzt/spack-src/lib/Rmath/dnt.c",
        "/tmp/vanessa/spack-stage/spack-stage-vt-0.577-ggqocozetwnt2ew64w3sab5w5bvs7bzt/spack-src/test/ref/20.fa.gz",
        "/tmp/vanessa/spack-stage/spack-stage-vt-0.577-ggqocozetwnt2ew64w3sab5w5bvs7bzt/spack-src/test/ref/20.fa.gz.gzi"
    ],
    "total_files": 605
}