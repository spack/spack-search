{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/sim65/chip.c": "/*****************************************************************************/\n/*                                                                           */\n/*                                    chip.c                                 */\n/*                                                                           */\n/*                        Interface for the chip plugins                     */\n/*                                                                           */\n/*                                                                           */\n/*                                                                           */\n/* (C) 2002-2012, Ullrich von Bassewitz                                      */\n/*                Roemerstrasse 52                                           */\n/*                D-70794 Filderstadt                                        */\n/* EMail:         uz@cc65.org                                                */\n/*                                                                           */\n/*                                                                           */\n/* This software is provided 'as-is', without any expressed or implied       */\n/* warranty.  In no event will the authors be held liable for any damages    */\n/* arising from the use of this software.                                    */\n/*                                                                           */\n/* Permission is granted to anyone to use this software for any purpose,     */\n/* including commercial applications, and to alter it and redistribute it    */\n/* freely, subject to the following restrictions:                            */\n/*                                                                           */\n/* 1. The origin of this software must not be misrepresented; you must not   */\n/*    claim that you wrote the original software. If you use this software   */\n/*    in a product, an acknowledgment in the product documentation would be  */\n/*    appreciated but is not required.                                       */\n/* 2. Altered source versions must be plainly marked as such, and must not   */\n/*    be misrepresented as being the original software.                      */\n/* 3. This notice may not be removed or altered from any source              */\n/*    distribution.                                                          */\n/*                                                                           */\n/*****************************************************************************/\n\n\n\n#include <string.h>\n#include <dlfcn.h>\n\n/* common */\n#include \"coll.h\"\n#include \"fname.h\"\n#include \"print.h\"\n#include \"xmalloc.h\"\n\n/* sim65 */\n#include \"cfgdata.h\"\n#include \"chip.h\"\n#include \"chipdata.h\"\n#include \"cpucore.h\"\n#include \"error.h\"\n\n\n\n/*****************************************************************************/\n/*                                 Forwards                                  */\n/*****************************************************************************/\n\n\n\nstatic int GetCfgId (void* CfgInfo, const char* Name, char** Id);\n/* Search CfgInfo for an attribute with the given name and type \"id\". If\n * found, remove it from the configuration, pass a pointer to a dynamically\n * allocated string containing the value to Id, and return true. If not\n * found, return false. The memory passed in Id must be free by a call to\n * Free();\n */\n\nstatic int GetCfgStr (void* CfgInfo, const char* Name, char** S);\n/* Search CfgInfo for an attribute with the given name and type \"id\". If\n * found, remove it from the configuration, pass a pointer to a dynamically\n * allocated string containing the value to Id, and return true. If not\n * found, return false. The memory passed in S must be free by a call to\n * Free();\n */\n\nstatic int GetCfgNum (void* CfgInfo, const char* Name, long* Val);\n/* Search CfgInfo for an attribute with the given name and type \"number\".\n * If found, remove it from the configuration, copy it into Val and return\n * true. If not found, return false.\n */\n\n\n\n/*****************************************************************************/\n/*                                     Data                                  */\n/*****************************************************************************/\n\n\n\n/* Sorted list of all chip data structures */\nstatic Collection Chips = STATIC_COLLECTION_INITIALIZER;\n\n/* A collection containing all libraries */\nstatic Collection ChipLibraries = STATIC_COLLECTION_INITIALIZER;\n\n/* SimData instance */\nstatic const SimData Sim65Data = {\n    1,                  /* MajorVersion */\n    1,                  /* MinorVersion */\n    xmalloc,\n    xfree,\n    Warning,\n    Error,\n    Internal,\n    GetCfgId,\n    GetCfgStr,\n    GetCfgNum,\n    0,\n    0,\n    Break,\n    IRQRequest,\n    NMIRequest,\n};\n\n\n\n/*****************************************************************************/\n/*                               Helper functions                            */\n/*****************************************************************************/\n\n\n\nstatic int GetCfgId (void* CfgInfo, const char* Name, char** Id)\n/* Search CfgInfo for an attribute with the given name and type \"id\". If\n * found, remove it from the configuration, pass a pointer to a dynamically\n * allocated string containing the value to Id, and return true. If not\n * found, return false. The memory passed in Id must be free by a call to\n * Free();\n */\n{\n    return CfgDataGetId (CfgInfo, Name, Id);\n}\n\n\n\nstatic int GetCfgStr (void* CfgInfo, const char* Name, char** S)\n/* Search CfgInfo for an attribute with the given name and type \"id\". If\n * found, remove it from the configuration, pass a pointer to a dynamically\n * allocated string containing the value to Id, and return true. If not\n * found, return false. The memory passed in S must be free by a call to\n * Free();\n */\n{\n    return CfgDataGetStr (CfgInfo, Name, S);\n}\n\n\n\nstatic int GetCfgNum (void* CfgInfo, const char* Name, long* Val)\n/* Search CfgInfo for an attribute with the given name and type \"number\".\n * If found, remove it from the configuration, copy it into Val and return\n * true. If not found, return false.\n */\n{\n    return CfgDataGetNum (CfgInfo, Name, Val);\n}\n\n\n\nstatic int CmpChips (void* Data attribute ((unused)),\n                     const void* lhs, const void* rhs)\n/* Compare function for CollSort */\n{\n    /* Cast the object pointers */\n    const Chip* Left  = (const Chip*) rhs;\n    const Chip* Right = (const Chip*) lhs;\n\n    /* Do the compare */\n    return strcmp (Left->Data->ChipName, Right->Data->ChipName);\n}\n\n\n\nstatic Chip* FindChip (const char* Name)\n/* Find a chip by name. Returns the Chip data structure or NULL if the chip\n * could not be found.\n */\n{\n    unsigned I;\n\n    /* ## We do a linear search for now */\n    for (I = 0; I < CollCount (&Chips); ++I) {\n\n        /* Get the chip at this position */\n        Chip* C = CollAt (&Chips, I);\n\n        /* Compare the name */\n        if (strcmp (Name, C->Data->ChipName) == 0) {\n            /* Found */\n            return C;\n        }\n    }\n\n    /* Not found */\n    return 0;\n}\n\n\n\n/*****************************************************************************/\n/*                                   Code                                    */\n/*****************************************************************************/\n\n\n\nstatic ChipLibrary* NewChipLibrary (const char* PathName)\n/* Create, initialize and return a new ChipLibrary structure */\n{\n    /* Allocate memory */\n    ChipLibrary* L = xmalloc (sizeof (ChipLibrary));\n\n    /* Initialize the fields */\n    L->LibName   = xstrdup (FindName (PathName));\n    L->PathName  = xstrdup (PathName);\n    L->Handle    = 0;\n    L->Chips     = EmptyCollection;\n\n    /* Return the allocated structure */\n    return L;\n}\n\n\n\nstatic void FreeChipLibrary (ChipLibrary* L)\n/* Free a ChipLibrary structure */\n{\n    /* Free the names */\n    xfree (L->LibName);\n    xfree (L->PathName);\n\n    /* If the library is open, close it. Discard any errors. */\n    if (L->Handle) {\n        dlclose (L->Handle);\n        (void) dlerror ();\n    }\n\n    /* We may have to handle the Chip pointers, but currently the function\n     * is never called with a non empty Chips collection, so we don't care\n     * for now.\n     */\n    xfree (L);\n}\n\n\n\nstatic Chip* NewChip (ChipLibrary* Library, const ChipData* Data)\n/* Allocate a new chip structure, initialize and return it */\n{\n    /* Allocate memory */\n    Chip* C = xmalloc (sizeof (Chip));\n\n    /* Initialize the fields */\n    C->Lib       = Library;\n    C->Data      = Data;\n    C->Instances = EmptyCollection;\n\n    /* Insert the new chip into the collection of all chips */\n    CollAppend (&Chips, C);\n\n    /* Return the structure */\n    return C;\n}\n\n\n\nChipInstance* NewChipInstance (const char* ChipName, unsigned Addr,\n                               unsigned Size, Collection* Attributes)\n{\n    ChipInstance* CI;\n\n    /* Find the chip with the given name */\n    Chip* C = FindChip (ChipName);\n    if (C == 0) {\n        Error (\"No chip `%s' found for address $%06X\", ChipName, Addr);\n    }\n\n    /* Allocate a new ChipInstance structure */\n    CI = xmalloc (sizeof (*CI));\n\n    /* Initialize the fields */\n    CI->C    = C;\n    CI->AS   = 0;\n    CI->Addr = Addr;\n    CI->Size = Size;\n    CI->Data = C->Data->CreateInstance (Addr, Size, Attributes);\n\n    /* Assign the chip instance to the chip */\n    CollAppend (&C->Instances, CI);\n\n    /* Return the new instance struct */\n    return CI;\n}\n\n\n\nChipInstance* MirrorChipInstance (const ChipInstance* Orig, unsigned Addr)\n/* Generate a chip instance mirror and return it. */\n{\n    /* Allocate a new ChipInstance structure */\n    ChipInstance* CI = xmalloc (sizeof (*CI));\n\n    /* Initialize the fields */\n    CI->C    = Orig->C;\n    CI->AS   = 0;\n    CI->Addr = Addr;\n    CI->Size = Orig->Size;\n    CI->Data = Orig->Data;\n\n    /* Assign the chip instance to the chip */\n    CollAppend (&CI->C->Instances, CI);\n\n    /* Return the new instance struct */\n    return CI;\n}\n\n\n\nvoid SortChips (void)\n/* Sort all chips by name. Called after loading */\n{\n    /* Last act: Sort the chips by name */\n    CollSort (&Chips, CmpChips, 0);\n}\n\n\n\nvoid LoadChipLibrary (const char* LibName)\n/* Load a chip library. This includes loading the shared libary, allocating\n * and initializing the data structure, and loading all chip data from the\n * library.\n */\n{\n    const char* Msg;\n    int (*GetChipData) (const struct ChipData**, unsigned*);\n    int ErrorCode;\n    const ChipData* Data;       /* Pointer to chip data */\n    unsigned ChipCount;         /* Number of chips in this library */\n    unsigned I;\n\n\n    /* Allocate a new ChipLibrary structure */\n    ChipLibrary* L = NewChipLibrary (LibName);\n\n    /* Open the library */\n    L->Handle = dlopen (L->PathName, RTLD_GLOBAL | RTLD_LAZY);\n\n    /* Check for errors */\n    Msg = dlerror ();\n    if (Msg) {\n        Error (\"Cannot open `%s': %s\", L->PathName, Msg);\n        FreeChipLibrary (L);\n        return;\n    }\n\n    /* Locate the GetChipData function */\n    GetChipData = dlsym (L->Handle, \"GetChipData\");\n\n    /* Check the error message */\n    Msg = dlerror ();\n    if (Msg) {\n        /* We had an error */\n        Error (\"Cannot find export `GetChipData' in `%s': %s\", L->LibName, Msg);\n        FreeChipLibrary (L);\n        return;\n    }\n\n    /* Call the function to read the chip data */\n    ErrorCode = GetChipData (&Data, &ChipCount);\n    if (ErrorCode != 0) {\n        Error (\"Function `GetChipData' in `%s' returned error %d\", L->LibName, ErrorCode);\n        FreeChipLibrary (L);\n        return;\n    }\n\n    /* Remember the library */\n    CollAppend (&ChipLibraries, L);\n\n    /* Print some information */\n    Print (stderr, 1, \"Opened chip library `%s'\\n\", L->PathName);\n\n    /* Create the chips */\n    for (I = 0; I < ChipCount; ++I) {\n\n        Chip* C;\n\n        /* Get a pointer to the chip data */\n        const ChipData* D = Data + I;\n\n        /* Check if the chip data has the correct version */\n        if (D->MajorVersion != CHIPDATA_VER_MAJOR) {\n            Warning (\"Version mismatch for `%s' (%s), expected %u, got %u\",\n                     D->ChipName, L->LibName,\n                     CHIPDATA_VER_MAJOR, D->MajorVersion);\n            /* Ignore this chip */\n            continue;\n        }\n\n        /* Initialize the chip passing the simulator data */\n        D->InitChip (&Sim65Data);\n\n        /* Generate a new chip */\n        C = NewChip (L, D);\n\n        /* Insert a reference to the chip into the library exporting it */\n        CollAppend (&L->Chips, C);\n\n        /* Output chip name and version to keep the user happy */\n        Print (stdout, 1,\n               \"  Found %s `%s', version %u.%u in library `%s'\\n\",\n               (D->Type == CHIPDATA_TYPE_CHIP)? \"chip\" : \"cpu\",\n               D->ChipName,\n               D->MajorVersion,\n               D->MinorVersion,\n               L->LibName);\n    }\n}\n\n\n\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/common/strstack.c",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/common/inttypes.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/common/cddefs.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/common/inline.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/common/fname.c",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/common/mmodel.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/common/xmalloc.c",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/common/shift.c",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/common/mmodel.c",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/common/xsprintf.c",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/common/chartype.c",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/common/chartype.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/common/shift.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/common/strutil.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/common/strutil.c",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/common/xmalloc.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/common/optdefs.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/common/segnames.c",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/common/va_copy.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/common/fragdefs.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/common/filetype.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/common/segnames.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/common/strstack.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/common/fname.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/ld65/o65.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/ld65/mapfile.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/ld65/dbgfile.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/ld65/error.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/ld65/fileio.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/cc65/loop.c",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/cc65/coptsub.c",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/cc65/macrotab.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/cc65/stdfunc.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/cc65/standard.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/cc65/opcodes.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/cc65/shiftexpr.c",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/cc65/loadexpr.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/cc65/shiftexpr.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/cc65/coptstore.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/cc65/assignment.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/cc65/reginfo.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/cc65/coptadd.c",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/cc65/stackptr.c",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/cc65/util.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/cc65/coptsub.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/cc65/preproc.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/cc65/testexpr.c",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/cc65/util.c",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/cc65/loop.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/cc65/coptadd.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/cc65/testexpr.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/cc65/stackptr.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/cc65/reginfo.c",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/cc65/standard.c",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/cc65/opcodes.c",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/ca65/struct.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/ca65/enum.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/ca65/ea65.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/ca65/istack.c",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/ca65/ea.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/ca65/easw16.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/od65/error.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/od65/fileio.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/ar65/fileio.c",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/ar65/error.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/ar65/error.c",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/da65/opcdesc.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/da65/infofile.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/da65/attrtab.c",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/da65/labels.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/da65/comments.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/da65/asminc.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/da65/opc65c02.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/da65/opc65sc02.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/da65/comments.c",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/da65/code.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/da65/opc6502.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/da65/attrtab.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/da65/global.c",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/da65/error.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/da65/opc65816.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/da65/code.c",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/da65/scanner.c",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/da65/opctable.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/sim65/cputype.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/sim65/chipdata.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/sim65/location.c",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/sim65/global.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/sim65/config.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/sim65/simdata.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/sim65/location.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/sim65/callback.c",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/sim65/global.c",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/sim65/error.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/sim65/callback.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/sim65/error.c",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/sim65/cputype.c",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/sim65/chips/vic2.c",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/sim65/chips/rom.c",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/sim65/chips/ram.c",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/co65/o65.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/co65/global.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/co65/convert.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/co65/fileio.c",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/co65/o65.c",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/co65/global.c",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/co65/error.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/co65/model.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/co65/error.c",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/co65/model.c",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/co65/fileio.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/src/cl65/error.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/libsrc/common/pmemalign.c",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/libsrc/common/_poserror.c",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/libsrc/atmos/crt0.s",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/libsrc/apple2/tgi/a2.hi.fnt",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/include/time.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/include/atmos.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/include/signal.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/include/plus4.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/include/locale.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/include/fcntl.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/include/peekpoke.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/include/pet.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/include/vic20.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/include/_ted.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/include/stdarg.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/include/cbm264.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/include/joystick/joy-kernel.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/include/em/em-kernel.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/include/mouse/mouse-kernel.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/include/sys/utsname.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/include/sys/types.h",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/samples/geos/logo.pcx",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/asminc/em-kernel.inc",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/asminc/opcodes.inc",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/asminc/joy-kernel.inc",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/asminc/utsname.inc",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/asminc/smc.inc",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/asminc/stdio.inc",
        "/tmp/vanessa/spack-stage/spack-stage-cc65-2.14-yq3wja2dkeweld4efm3plj6mqyge74af/spack-src/asminc/ser-kernel.inc"
    ],
    "total_files": 2174
}