{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/configure.ac": "dnl Process this file with autoconf 2.53 to produce a configure script.\n###############################################################################\n# BRLTTY - A background process providing access to the console screen (when in\n#          text mode) for a blind person using a refreshable braille display.\n#\n# Copyright (C) 1995-2018 by The BRLTTY Developers.\n#\n# BRLTTY comes with ABSOLUTELY NO WARRANTY.\n#\n# This is free software, placed under the terms of the\n# GNU Lesser General Public License, as published by the Free Software\n# Foundation; either version 2.1 of the License, or (at your option) any\n# later version. Please see the file LICENSE-LGPL for details.\n#\n# Web Page: http://brltty.com/\n#\n# This software is maintained by Dave Mielke <dave@mielke.cc>.\n###############################################################################\n\nAC_PREREQ([2.64])\nAC_INIT([BRLTTY], [5.6], [brltty@brltty.com], [brltty], [http://brltty.com/])\nAC_CONFIG_SRCDIR([Programs/brltty.c])\n\nAC_SUBST([api_major], [0])\nAC_SUBST([api_minor], [6])\nAC_SUBST([api_revision], [7])\n\nAC_SUBST([api_version], [${api_major}.${api_minor}])\nAC_SUBST([api_release], [${api_version}.${api_revision}])\n\nAC_DEFINE_UNQUOTED([BRLAPI_RELEASE], [\"${api_release}\"],\n                   [Define this to be a string containing the API library version.])\nAC_DEFINE_UNQUOTED([BRLAPI_MAJOR], [${api_major}],\n                   [Define this to be the API library major version number.])\nAC_DEFINE_UNQUOTED([BRLAPI_MINOR], [${api_minor}],\n                   [Define this to be the API library minor version number.])\nAC_DEFINE_UNQUOTED([BRLAPI_REVISION], [${api_revision}],\n                   [Define this to be the API library revision number.])\n\nBRLTTY_SUMMARY_BEGIN\nbrltty_build_directories=\". Programs Documents Messages Android/Core Android/Application\"\nbrltty_source_directory=\"`dirname \"${0}\"`\"\nbrltty_manual_directories=\"\"\n\nfor brltty_autostart_directory in `(cd \"${brltty_source_directory}\" && echo Autostart/*)`\ndo\n   test -f \"${brltty_source_directory}/${brltty_autostart_directory}/Makefile.in\" && {\n      brltty_build_directories=\"${brltty_build_directories} ${brltty_autostart_directory}\"\n   }\ndone\n\nfor brltty_manual_directory in `(cd \"${brltty_source_directory}\" && echo Documents/Manual-*/*)`\ndo\n   test -f \"${brltty_source_directory}/${brltty_manual_directory}/Makefile.in\" && {\n      brltty_manual_directories=\"${brltty_manual_directories} ${brltty_manual_directory}\"\n   }\ndone\n\nAC_SUBST([brltty_manual_directories])\nbrltty_build_directories=\"${brltty_build_directories} ${brltty_manual_directories}\"\n\nAC_CONFIG_HEADER([config.h])\nAC_CONFIG_HEADER([Programs/brlapi.h])\nAC_PREFIX_DEFAULT([])\nAC_CONFIG_AUX_DIR([acdir])\nAC_CANONICAL_SYSTEM\n\nbrltty_default_execute_root=\"/${PACKAGE_TARNAME}-${PACKAGE_VERSION}\"\nBRLTTY_ARG_WITH(\n   [execute-root], [DIRECTORY],\n   [where the package is to be anchored at run-time],\n   [execute_root], [\"\"]\n)\nif test \"${execute_root}\" = \"no\"\nthen\n   execute_root=\"\"\nelif test \"${execute_root}\" = \"yes\"\nthen\n   execute_root=\"${brltty_default_execute_root}\"\nfi\nAC_SUBST([execute_root])\nBRLTTY_SUMMARY_ITEM([execute-root], [execute_root])\n\nbrltty_default_install_root=\"/tmp/${PACKAGE_TARNAME}-${PACKAGE_VERSION}\"\nBRLTTY_ARG_WITH(\n   [install-root], [DIRECTORY],\n   [where to install the package],\n   [install_root], [\"${execute_root}\"]\n)\nif test \"${install_root}\" = \"no\"\nthen\n   install_root=\"${execute_root}\"\nelif test \"${install_root}\" = \"yes\"\nthen\n   install_root=\"${brltty_default_install_root}\"\nfi\nAC_SUBST([install_root])\nBRLTTY_SUMMARY_ITEM([install-root], [install_root])\n\nBRLTTY_ARG_WITH(\n   [configuration-file], [FILE],\n   [name of configuration file],\n   [CONFIGURATION_FILE], [\"${PACKAGE_TARNAME}.conf\"]\n)\nAC_SUBST([CONFIGURATION_FILE])\nBRLTTY_DEFINE_EXPANDED([CONFIGURATION_FILE], [\"${CONFIGURATION_FILE}\"],\n                       [Define this to be a string containing the name of the default configuration file.])\n\nAC_SUBST([PREFERENCES_FILE], [\"${PACKAGE_TARNAME}.prefs\"])\nBRLTTY_DEFINE_EXPANDED([PREFERENCES_FILE], [\"${PREFERENCES_FILE}\"],\n                       [Define this to be a string containing the name of the default preferences file.])\n\nBRLTTY_PORTABLE_DIRECTORY([includedir], [/usr])\nBRLTTY_PORTABLE_DIRECTORY([datarootdir], [/usr])\nBRLTTY_PORTABLE_DIRECTORY([localstatedir], [])\n\nBRLTTY_SUMMARY_ITEM([libdir], [libdir])\nBRLTTY_SUMMARY_ITEM([sysconfdir], [sysconfdir])\n\nBRLTTY_ARG_REQUIRED(\n   [program-directory], [DIRECTORY],\n   [path to directory containing executables],\n   [program_directory], [\"${bindir}\"]\n)\n\nBRLTTY_ARG_REQUIRED(\n   [drivers-directory], [DIRECTORY],\n   [path to directory containing drivers],\n   [drivers_directory], [\"${libdir}/${PACKAGE_TARNAME}\"]\n)\n\nBRLTTY_ARG_WITH(\n   [writable-directory], [DIRECTORY],\n   [path to directory which can be written to],\n   [writable_directory], [\"yes\"]\n)\nif test \"${writable_directory}\" = \"no\"\nthen\n   writable_directory=\"\"\nelif test \"${writable_directory}\" = \"yes\"\nthen\n   writable_directory=\"${localstatedir}/run/${PACKAGE_TARNAME}\"\nfi\nAC_SUBST([writable_directory])\nBRLTTY_SUMMARY_ITEM([writable-directory], [writable_directory])\n\nBRLTTY_ARG_REQUIRED(\n   [tables-directory], [DIRECTORY],\n   [path to directory containing data files],\n   [tables_directory], [\"${sysconfdir}/${PACKAGE_TARNAME}\"]\n)\n\nBRLTTY_DEFINE_STRING([TEXT_TABLES_SUBDIRECTORY], [Text], [the subdirectory for text tables])\nBRLTTY_DEFINE_STRING([ATTRIBUTES_TABLES_SUBDIRECTORY], [Attributes], [the subdirectory for attributes tables])\nBRLTTY_DEFINE_STRING([CONTRACTION_TABLES_SUBDIRECTORY], [Contraction], [the subdirectory for contraction tables])\nBRLTTY_DEFINE_STRING([KEYBOARD_TABLES_SUBDIRECTORY], [Keyboard], [the subdirectory for keyboard key tables])\nBRLTTY_DEFINE_STRING([INPUT_TABLES_SUBDIRECTORY], [Input], [the subdirectory for braille device key tables])\n\nBRLTTY_DEFINE_STRING([TEXT_TABLE_EXTENSION], [.ttb], [the extension for text tables])\nBRLTTY_DEFINE_STRING([TEXT_SUBTABLE_EXTENSION], [.tti], [the extension for text subtables])\n\nBRLTTY_DEFINE_STRING([ATTRIBUTES_TABLE_EXTENSION], [.atb], [the extension for attributes tables])\nBRLTTY_DEFINE_STRING([ATTRIBUTES_SUBTABLE_EXTENSION], [.ati], [the extension for attributes subtables])\n\nBRLTTY_DEFINE_STRING([CONTRACTION_TABLE_EXTENSION], [.ctb], [the extension for contraction tables])\nBRLTTY_DEFINE_STRING([CONTRACTION_SUBTABLE_EXTENSION], [.cti], [the extension for contraction subtables])\n\nBRLTTY_DEFINE_STRING([KEY_TABLE_EXTENSION], [.ktb], [the extension for key tables])\nBRLTTY_DEFINE_STRING([KEY_SUBTABLE_EXTENSION], [.kti], [the extension for key subtables])\nBRLTTY_DEFINE_STRING([KEY_HELP_EXTENSION], [.txt], [the extension for key help files])\n\nBRLTTY_DEFINE_STRING([PROFILES_SUBDIRECTORY], [Profiles], [the subdirectory for profiles])\nBRLTTY_DEFINE_STRING([LANGUAGE_PROFILE_EXTENSION], [.lpf], [the extension for language profiles])\n\nBRLTTY_ARG_REQUIRED(\n   [manpage-directory], [DIRECTORY],\n   [path to directory containing manual pages],\n   [manpage_directory], [\"${mandir}\"]\n)\n\nBRLTTY_ARG_REQUIRED(\n   [include-directory], [DIRECTORY],\n   [path to directory containing header files],\n   [include_directory], [\"${includedir}/${PACKAGE_TARNAME}\"]\n)\n\nbrltty_default_init_path=/sbin/init_real\nBRLTTY_ARG_WITH(\n   [init-path], [FILE],\n   [path to real init program],\n   [init_path], [\"\"]\n)\nif test \"${init_path}\" = \"no\"\nthen\n   init_path=\"\"\nelif test \"${init_path}\" = \"yes\"\nthen\n   init_path=\"${brltty_default_init_path}\"\nfi\nif test -n \"${init_path}\"\nthen\n   AC_DEFINE_UNQUOTED([INIT_PATH], [\"${init_path}\"],\n                      [Define this if BRLTTY is to be run as init.])\nfi\nBRLTTY_SUMMARY_ITEM([init-path], [init_path])\n\nbrltty_default_stderr_path=/tmp/brltty.log\nBRLTTY_ARG_WITH(\n   [stderr-path], [FILE],\n   [path to standard error log file],\n   [stderr_path], [\"\"]\n)\nif test \"${stderr_path}\" = \"no\"\nthen\n   stderr_path=\"\"\nelif test \"${stderr_path}\" = \"yes\"\nthen\n   stderr_path=\"${brltty_default_stderr_path}\"\nfi\nif test -n \"${stderr_path}\"\nthen\n   AC_DEFINE_UNQUOTED([STDERR_PATH], [\"${stderr_path}\"],\n                      [Define this if standard error is to be redirected to a file.])\nfi\nBRLTTY_SUMMARY_ITEM([stderr-path], [stderr_path])\n\nAC_PROG_MAKE_SET\n\nAC_PROG_CC\nif test -z \"${CXX}\"\nthen\n   if test \"${GCC}\" = \"yes\"\n   then\n      AC_SEARCH_LIBS([__cxa_pure_virtual], [supc++])\n      AC_CACHE_CHECK([if the C compiler can compile C++], [brltty_cv_prog_cc_cxx], [dnl\n      brltty_save_ac_ext=\"${ac_ext}\"\n      ac_ext=\"cc\"\n      AC_TRY_LINK([], [class c {};],\n                  [brltty_cv_prog_cc_cxx=\"yes\"],\n                  [brltty_cv_prog_cc_cxx=\"no\"])\n      ac_ext=\"${brltty_save_ac_ext}\"])\n      test \"${brltty_cv_prog_cc_cxx}\" = \"yes\" && CXX=\"${CC}\"\n   fi\nfi\nAC_PROG_CXX\n\nbrltty_gcc_cflags=\"-std=gnu99 -Wall -Werror=format-security\"\nbrltty_gcc_cppflags=\"\"\n\ncase \"${host_os}\"\nin\n   darwin*)\n      brltty_gcc_cflags=\"${brltty_gcc_cflags} -Wno-initializer-overrides -Wno-unused-const-variable -Wno-pointer-bool-conversion\"\n      ;;\n   elf*)\n      brltty_gcc_cppflags=\"${brltty_gcc_cppflags} -ffreestanding -nostdinc -nostdlib\"\n      CPPFLAGS=\"${CPPFLAGS} -DGRUB_RUNTIME -DGRUB_FILE=__FILE__ -DNESTED_FUNC_ATTR=\"\n\n      brltty_include_directory=`$CC -print-file-name=include`\n      CPPFLAGS=\"${CPPFLAGS} -isystem $brltty_include_directory\"\n\n      brltty_grub_root=\"`pwd`/grub-root\"\n      test -d $brltty_grub_root || {\n         AC_MSG_ERROR([symbolic link not found: $brltty_grub_root])\n      }\n      CPPFLAGS=\"${CPPFLAGS} -I$brltty_grub_root -I$brltty_grub_root/grub-core/lib/posix_wrap/include -I$brltty_grub_root/include\"\n      ;;\nesac\n\ntest \"${GCC}\" = \"yes\" && {\n   CFLAGS=\"${CFLAGS} ${brltty_gcc_cflags}\"\n   CPPFLAGS=\"${CPPFLAGS} ${brltty_gcc_cppflags}\"\n}\n\ntest \"${GXX}\" = \"yes\" && {\n   CXXFLAGS=\"${CXXFLAGS} ${brltty_gcc_cflags}\"\n}\n\ncase \"${host_os}\"\nin\n   linux*|gnu*|kfreebsd*)\n      brltty_prog_cc_sysflags=\"-D_DEFAULT_SOURCE -D_POSIX_C_SOURCE=2 -D_BSD_SOURCE -D_XOPEN_SOURCE=500 -D_XOPEN_SOURCE_EXTENDED -D_GNU_SOURCE\"\n      ;;\n   solaris2.1?*) # Solaris 10 & 11 require _XOPEN_SOURCE=600 if using C99\n      brltty_prog_cc_sysflags=\"-D_XOPEN_SOURCE=600 -D__EXTENSIONS__\"\n      ;;\n   solaris*)\n      brltty_prog_cc_sysflags=\"-D_XOPEN_SOURCE=500 -D__EXTENSIONS__\"\n      ;;\n   hpux*)\n      brltty_prog_cc_sysflags=\"-D_XOPEN_SOURCE_EXTENDED -D_HPUX_SOURCE\"\n      ;;\n   osf*)\n      brltty_prog_cc_sysflags=\"-D_XOPEN_SOURCE=500 -D_POSIX_C_SOURCE -D_OSF_SOURCE\"\n      ;;\n   cygwin*)\n      brltty_prog_cc_sysflags=\"-D_XOPEN_SOURCE_EXTENDED\"\n      ;;\n   *)\n      brltty_prog_cc_sysflags=\"\"\n      ;;\nesac\nCPPFLAGS=\"${CPPFLAGS} ${brltty_prog_cc_sysflags}\"\n\nif test \"${GCC}\" = \"yes\"\nthen\n   case \"${host_os}\"\n   in\n      cygwin*|mingw*)\n         LIBCFLAGS=\"\"\n         ;;\n      msdos*)\n         LIBCFLAGS=\"\"\n         ;;\n      darwin*)\n         LIBCFLAGS=\"\"\n         ;;\n      *)\n         LIBCFLAGS=\"-fPIC\"\n         ;;\n   esac\nelse\n   case \"${host_os}\"\n   in\n      *)\n         LIBCFLAGS=\"\"\n         AC_MSG_WARN([library flags not configured for ${host_os}])\n         ;;\n   esac\nfi\nAC_SUBST([LIBCFLAGS])\n\nif test \"$GXX\" = \"yes\"\nthen\n   LIBCXXFLAGS=\"-fPIC\"\nelse\n   case \"${host_os}\"\n   in\n      *)\n         LIBCXXFLAGS=\"\"\n         ;;\n   esac\nfi\nAC_SUBST([LIBCXXFLAGS])\n\nAC_PATH_TOOL([LD], [ld])\nAC_PATH_TOOL([STRIP], [strip])\nAC_PATH_TOOL([RANLIB], [ranlib])\n\nAC_PROG_AWK\nAC_PROG_LN_S\n\nAC_PATH_PROG([PKG_CONFIG], [pkg-config], [false])\n\nAC_PATH_PROG([MSGMERGE], [msgmerge], [false])\nAC_PATH_PROG([MSGFMT], [msgfmt], [false])\n\nAC_PATH_PROG([LINUXDOC], [linuxdoc], [false])\nAC_PATH_PROG([DOXYGEN], [doxygen], [false])\n\ncase \"${host_os}\"\nin\n   cygwin*  ) LDFLAGS_DYNAMIC=\"--export-all-symbols --enable-auto-import\";;\n   darwin*  ) LDFLAGS_DYNAMIC=\"\";;\n   elf*     ) LDFLAGS_DYNAMIC=\"\";;\n   freebsd* ) LDFLAGS_DYNAMIC=\"-export-dynamic\";;\n   gnu*     ) LDFLAGS_DYNAMIC=\"-export-dynamic\";;\n   hpux*    ) LDFLAGS_DYNAMIC=\"-E +s\";;\n   kfreebsd*) LDFLAGS_DYNAMIC=\"-export-dynamic\";;\n   linux*   ) LDFLAGS_DYNAMIC=\"-export-dynamic\";;\n   mingw*   ) LDFLAGS_DYNAMIC=\"--export-all-symbols --enable-auto-import\";;\n   msdos*   ) LDFLAGS_DYNAMIC=\"\";;\n   netbsd*  ) LDFLAGS_DYNAMIC=\"-export-dynamic\";;\n   openbsd* ) LDFLAGS_DYNAMIC=\"-export-dynamic\";;\n   osf*     ) LDFLAGS_DYNAMIC=\"\";;\n   *qnx*    ) LDFLAGS_DYNAMIC=\"-export-dynamic\";;\n   solaris* ) LDFLAGS_DYNAMIC=\"\";;\n   *) AC_MSG_ERROR([dynamic linkage not supported for ${host_os}]);;\nesac\nLDFLAGS_DYNAMIC=\"${LDFLAGS} BRLTTY_OPTIONS_LD2CC([${LDFLAGS_DYNAMIC}])\"\n\nif test \"${GCC}\" = \"yes\"\nthen\n   LDFLAGS_STATIC=\"-static\"\nelse\n   case \"${host_os}\"\n   in\n      cygwin*  ) LDFLAGS_STATIC=\"-static\";;\n      elf*     ) LDFLAGS_STATIC=\"-static\";;\n      freebsd* ) LDFLAGS_STATIC=\"-static\";;\n      gnu*     ) LDFLAGS_STATIC=\"-static\";;\n      hpux*    ) LDFLAGS_STATIC=\"-Bstatic\";;\n      kfreebsd*) LDFLAGS_STATIC=\"-static\";;\n      linux*   ) LDFLAGS_STATIC=\"-static\";;\n      mingw*   ) LDFLAGS_STATIC=\"-static\";;\n      netbsd*  ) LDFLAGS_STATIC=\"-Bstatic\";;\n      openbsd* ) LDFLAGS_STATIC=\"-static\";;\n      osf*     ) LDFLAGS_STATIC=\"-non_shared\";;\n      *qnx*    ) LDFLAGS_STATIC=\"-static\";;\n      solaris* ) LDFLAGS_STATIC=\"-dn\";;\n      *) AC_MSG_ERROR([static linkage not supported for ${host_os}]);;\n   esac\n   LDFLAGS_STATIC=\"BRLTTY_OPTIONS_LD2CC([${LDFLAGS_STATIC}])\"\nfi\n\npkgconfig_flags_libs=\"--libs\"\nBRLTTY_ARG_ENABLE(\n   [standalone-programs],\n   [statically linked executables],\n   [],\n[dnl\n   LDFLAGS=\"${LDFLAGS} ${LDFLAGS_STATIC}\"\n   brltty_standalone_programs=\"yes\"\n   pkgconfig_flags_libs=\"${pkgconfig_flags_libs} --static\"\n], [dnl\n   LDFLAGS=\"${LDFLAGS} ${LDFLAGS_DYNAMIC}\"\n\n   AC_DEFINE([ENABLE_SHARED_OBJECTS], [1],\n             [Define this if shared object support is to be included.])\n])\n\nAC_PROG_INSTALL\nBRLTTY_EXECUTABLE_PATH([INSTALL])\n\ntest \"${LINUXDOC}\" = \"false\" && can_make_manual=no || can_make_manual=yes\nAC_SUBST([can_make_manual])\n\ntest \"${DOXYGEN}\" = \"false\" && can_make_BrlAPIref=no || can_make_BrlAPIref=yes\nAC_SUBST([can_make_BrlAPIref])\n\nAC_CACHE_CHECK([for shared object creation command], [brltty_cv_prog_make_object_shared], [dnl\ncase \"${host_os}\"\nin\n   linux*|gnu*|openbsd*|freebsd*|kfreebsd*|netbsd*|*qnx*|cygwin*|mingw*|elf*)\n      brltty_mkshr_ld_make=\"-shared\"\n      ;;\n   solaris*)\n      brltty_mkshr_ld_make=\"-G\"\n      ;;\n   hpux*)\n      brltty_mkshr_ld_make=\"-b\"\n      ;;\n   osf*)\n      brltty_mkshr_ld_make=\"-shared\"\n      ;;\n   darwin*)\n      brltty_mkshr_ld_make=\"-bundle\"\n      brltty_mkshr_ld_options=\"-flat_namespace -undefined suppress\"\n      brltty_mkshr_gcc_make=\"-bundle\"\n      ;;\n   msdos*)\n      brltty_mkshr_ld_make=\"not_supported_on_msdos\"\n      brltty_mkshr_ld_options=\"not_supported_on_msdos\"\n      brltty_mkshr_gcc_make=\"not_supported_on_msdos\"\n      ;;\n   *)\n      AC_MSG_ERROR([loadable module creation command not configured for ${host_os}])\n      ;;\nesac\nif test \"${GCC}\" = \"yes\"\nthen\n   brltty_cv_prog_make_object_shared=\"\\$(CC) ${brltty_mkshr_gcc_make=-shared} BRLTTY_OPTIONS_LD2CC([${brltty_mkshr_ld_options}]) -o\"\nelse\n   brltty_cv_prog_make_object_shared=\"\\$(LD) ${brltty_mkshr_ld_make} ${brltty_mkshr_ld_options} -o\"\nfi])\nAC_SUBST([MKSHR], [\"${brltty_cv_prog_make_object_shared}\"])\n\nAC_CACHE_CHECK([for make relocatable object command], [brltty_cv_prog_make_object_relocatable], [dnl\ncase \"${host_os}\"\nin\n   *)\n      brltty_cv_prog_make_object_relocatable=\"\\$(LD) -r -o\"\n      ;;\nesac])\nMKREL=\"${brltty_cv_prog_make_object_relocatable}\"\nAC_SUBST([MKREL])\n\nAC_CACHE_CHECK([for dynamic library creation command], [brltty_cv_prog_mklib], [dnl\ncase \"${host_os}\"\nin\n   linux*|gnu*|openbsd*|freebsd*|kfreebsd*|netbsd*|*qnx*|elf*)\n      brltty_mklib_ld_make=\"-shared\"\n      brltty_mklib_ld_options=\"-soname\"\n      ;;\n   solaris*)\n      brltty_mklib_ld_make=\"-G\"\n      brltty_mklib_ld_options=\"-h\"\n      ;;\n   hpux*)\n      brltty_mklib_ld_make=\"-b\"\n      brltty_mklib_ld_options=\"+h\"\n      ;;\n   osf*)\n      brltty_mklib_ld_make=\"-shared\"\n      brltty_mklib_ld_options=\"-expect_unresolved '*' -soname\"\n      ;;\n   cygwin*|mingw*)\n      brltty_mklib_ld_make=\"-shared\"\n      brltty_mklib_ld_options=\"--out-implib implib.a --output-def lib.def -soname\"\n      ;;\n   msdos*)\n      brltty_mklib_ld_make=\"not_supported_on_msdos\"\n      brltty_mklib_ld_options=\"not_supported_on_msdos\"\n      brltty_mklib_gcc_make=\"not_supported_on_msdos\"\n      ;;\n   darwin*)\n      dylibFound=false\n      dylibPath=/usr/lib/dylib1.o\n      set -- \"${dylibPath}\"\n\n      sdkRootPrefix=\"/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX\"\n      sdkRootSuffix=\".sdk/${dylibPath}\"\n      sdkVersion=`sw_vers -productVersion`\n\n      while true\n      do\n         set -- \"${@}\" \"${sdkRootPrefix}${sdkVersion}${sdkRootSuffix}\"\n         sdkNext=\"${sdkVersion%.*}\"\n         test \"${sdkNext}\" != \"${sdkVersion}\" || break\n         sdkVersion=\"${sdkNext}\"\n      done\n\n      set -- \"${@}\" \"${sdkRootPrefix}\"*\"${sdkRootSuffix}\"\n      for sdkPath\n      do\n         test ! -f \"${sdkPath}\" || {\n            dylibPath=\"${sdkPath}\"\n            dylibFound=true\n            break\n         }\n      done\n      \"${dylibFound}\" || AC_MSG_WARN([cannot find ${dylibPath}])\n\n      brltty_mklib_ld_make=\"-dylib\"\n      brltty_mklib_ld_options=\"${dylibPath} -single_module -install_name\"\n      brltty_mklib_gcc_make=\"-dynamiclib\"\n      ;;\n   *)\n      AC_MSG_ERROR([dynamic library creation command not configured for ${host_os}])\n      ;;\nesac\nif test \"${GCC}\" = \"yes\"\nthen\n   brltty_cv_prog_mklib=\"\\$(CC) ${brltty_mklib_gcc_make=-shared} BRLTTY_OPTIONS_LD2CC([${brltty_mklib_ld_options+${brltty_mklib_ld_options} <name>}]) -o\"\nelse\n   brltty_cv_prog_mklib=\"\\$(LD) ${brltty_mklib_ld_make} ${brltty_mklib_ld_options+${brltty_mklib_ld_options} <name>} -o\"\nfi])\nAC_SUBST([MKLIB], [\"${brltty_cv_prog_mklib}\"])\n\nAC_CACHE_CHECK([for configure shared object directory command], [brltty_cv_prog_conflibdir], [dnl\ncase \"${host_os}\"\nin\n   linux*|gnu*|kfreebsd*|elf*)\n      brltty_cv_prog_conflibdir=\"/sbin/ldconfig -n\"\n      ;;\n   *)\n      brltty_cv_prog_conflibdir=\":\"\n      ;;\nesac])\nAC_SUBST([CONFLIBDIR], [\"${brltty_cv_prog_conflibdir}\"])\n\ncase \"${host_os}\"\nin\n   mingw*)\n      BRLTTY_HAVE_WINDOWS_LIBRARY([ws2_32])\n      BRLTTY_HAVE_WINDOWS_LIBRARY([gdi32])\n      BRLTTY_HAVE_WINDOWS_LIBRARY([winmm])\n      ;;\n   cygwin*)\n      BRLTTY_HAVE_WINDOWS_LIBRARY([gdi32])\n      ;;\n   *)\n      AC_SEARCH_LIBS([socket], [socket])\n      AC_SEARCH_LIBS([inet_ntoa], [nsl])\n      ;;\nesac\n\ninstall_messages=\nBRLTTY_ARG_DISABLE(\n   [i18n],\n   [support for internationalization],\n   [],\n[dnl\n   test \"${MSGMERGE}\" = \"false\" || {\n      install_messages=install-messages\n\n      AC_CHECK_HEADER([libintl.h], [dnl\n         AC_HAVE_LIBRARY([intl])\n         AC_DEFINE([ENABLE_I18N_SUPPORT], [1],\n                   [Define this if internationalization support is to be included.])\n      ])\n   }\n])\nAC_SUBST([install_messages])\n\nAC_CHECK_FUNC([wcslen], [AC_CHECK_HEADERS([wchar.h], [dnl\n   AC_CHECK_FUNCS([wcwidth])\n])])\n\nicu_includes=\"\"\nicu_libs=\"\"\nBRLTTY_ARG_DISABLE(\n   [icu],\n   [support for Unicode-based internationalization],\n   [],\n[dnl\n   BRLTTY_HAVE_PACKAGE([icu], [icu-uc], [dnl\n      AC_DEFINE_UNQUOTED([HAVE_ICU], [1],\n                         [Define this if Unicode-based internationalization support is to be included.])\n\n      if test \"${brltty_standalone_programs}\" = \"yes\"\n      then\n         icu_libs=\"`echo ${icu_libs} | sed -e 's/\\(-l\\)\\(icu\\)/\\1s\\2/g'`\"\n      fi\n   ])\n])\nAC_SUBST([icu_includes])\nAC_SUBST([icu_libs])\n\nBRLTTY_ARG_DISABLE(\n   [iconv],\n   [support for character encoding conversion],\n   [],\n[dnl\n   AC_CHECK_HEADERS([iconv.h], [\n      AC_HAVE_LIBRARY([iconv])\n   ])\n])\n\nBRLTTY_ARG_DISABLE(\n   [polkit],\n   [support for the Polkit authorization manager],\n   [],\n[dnl\n   BRLTTY_HAVE_PACKAGE([polkit], [polkit-gobject-1], [dnl\n      AC_DEFINE(USE_POLKIT, 1, [if the Polkit authorization manager should be used])\n   ])\n])\n\nBRLTTY_ARG_DISABLE(\n   [api],\n   [the application programming interface],\n   [],\n[dnl\n   BRLTTY_IF_PTHREADS([dnl\n      AC_DEFINE([ENABLE_API], [1],\n                [Define this if the application programming interface is to be included.])\n      BRLTTY_ARG_PARAMETERS([api], [application programming interface])\n\n      api_server_objects='brlapi_server.$O brlapi_keyranges.$O auth.$O'\n      api_libraries=\"${LIBS}\"\n\n      all_api=\"all-api\"\n      build_api=\"api\"\n      install_api=\"install-api\"\n      api_ref='$(API_LIBS)'\n\n      api_dynamic_library=\"api-dynamic-library\"\n      install_api_libraries=\"install-api-libraries\"\n      uninstall_api_libraries=\"uninstall-api-libraries\"\n      default_api_socket_path=\"${localstatedir}/lib/BrlAPI\"\n\n      case \"${host_os}\"\n      in\n         cygwin*|mingw*)\n            AC_DEFINE([BRLAPI_WIN32], [1],\n                      [Define this if the Win32 programming interface is available.])\n\t    default_api_socket_path='\\\\\\\\\\\\\\\\.\\\\\\\\pipe\\\\\\\\BrlAPI'\n            api_dynamic_library=\"api-dynamic-library-windows\"\n            install_api_libraries=\"install-api-libraries-windows\"\n            uninstall_api_libraries=\"uninstall-api-libraries-windows\"\n            ;;\n      esac\n\n      BRLTTY_ARG_WITH(\n          [api-socket-path], [PATH],\n          [where local sockets for teh api are stored],\n          [api_socket_path], [${default_api_socket_path}]\n      )\n\n      BRLTTY_BINDINGS([Java])\n      BRLTTY_BINDINGS([Lisp])\n      BRLTTY_BINDINGS([OCaml])\n      BRLTTY_BINDINGS([Python])\n      BRLTTY_BINDINGS([Tcl])\n\n      test -n \"${api_bindings}\" && {\n         for brltty_bindings_directory in ${api_bindings}\n         do\n            brltty_build_directories=\"${brltty_build_directories} Bindings/${brltty_bindings_directory}\"\n         done\n\n         all_api_bindings=\"all-api-bindings\"\n         install_api_bindings=\"install-api-bindings\"\n      }\n   ])\n])\nAC_SUBST([api_server_objects])\nAC_SUBST([api_libraries])\nAC_SUBST([api_bindings])\nAC_SUBST([all_api_bindings])\nAC_SUBST([install_api_bindings])\nAC_SUBST([all_api])\nAC_SUBST([build_api])\nAC_SUBST([install_api])\nAC_SUBST([api_ref])\nAC_SUBST([api_dynamic_library])\nAC_SUBST([install_api_libraries])\nAC_SUBST([uninstall_api_libraries])\nAC_SUBST([api_authkeyfile], [brlapi.key])\nAC_SUBST([api_socket_path])\nBRLTTY_SUMMARY_ITEM([api-socket-path], [api_socket_path])\nBRLTTY_DEFINE_EXPANDED([BRLAPI_AUTHKEYFILE], [\"${api_authkeyfile}\"],\n                       [Define this to be a string containing the name of the file containing the authorization key.])\n\nbrltty_curses_libs_save=\"${LIBS}\"\nBRLTTY_PACKAGE_CHOOSE([curses],\n   [ncursesw ncursesw/ncurses.h],\n   [pdcursesw curses.h],\n   [ncurses ncurses.h],\n   [pdcursesu curses.h],\n   [curses curses.h],\n   [pdcurses curses.h])\nif test -n \"${curses_package}\"\nthen\n   AC_CHECK_LIB([tinfo], [intrflush])\nfi\ncurses_libs=\"${LIBS%${brltty_curses_libs_save}}\"\nLIBS=\"${brltty_curses_libs_save}\"\nAC_SUBST([curses_libs])\n\nxkb_libs=\"\"\nxtk_libs=\"\"\nall_xbrlapi=\"\"\ninstall_xbrlapi=\"\"\nBRLTTY_ARG_DISABLE(\n   [x],\n   [support for X11],\n   [],\n[dnl\n   BRLTTY_HAVE_PACKAGE([x11], [x11], [dnl\n      all_xbrlapi=\"all-xbrlapi\"\n      install_xbrlapi=\"install-xbrlapi\"\n\n      AC_CHECK_HEADERS([X11/keysym.h])\n\n      BRLTTY_HAVE_PACKAGE([xext], [xext], [dnl\n         xkb_libs=\"${xext_libs} ${xkb_libs}\"\n\n         BRLTTY_HAVE_PACKAGE([xtst], [xtst], [dnl\n            xkb_libs=\"${xtst_libs} ${xkb_libs}\"\n             \n            AC_CHECK_HEADERS([X11/extensions/XTest.h])\n            AC_CHECK_HEADERS([X11/extensions/XKB.h])\n         ])\n      ])\n\n      BRLTTY_HAVE_PACKAGE([xt], [xt], [dnl\n         xtk_libs=\"${xt_libs} ${xtk_libs}\"\n\n         brltty_cppflags_save=\"${CPPFLAGS}\"\n         CPPFLAGS=\"${CPPFLAGS} ${x11_includes}\"\n\n         brltty_libs_save=\"${LIBS}\"\n         LIBS=\"${xtk_libs} ${x11_libs} ${LIBS}\"\n\n         BRLTTY_PACKAGE_CHOOSE([gui_toolkit],\n            [Xaw X11/Xaw/Form.h X11/Xaw/Paned.h X11/Xaw/Label.h X11/Xaw/Command.h X11/Xaw/Repeater.h],\n            [Xaw3d X11/Xaw3d/Form.h X11/Xaw3d/Paned.h X11/Xaw3d/Label.h X11/Xaw3d/Command.h X11/Xaw3d/Repeater.h],\n            [neXtaw X11/neXtaw/Form.h X11/neXtaw/Paned.h X11/neXtaw/Label.h X11/neXtaw/Command.h X11/neXtaw/Repeater.h],\n            [XawPlus X11/XawPlus/Form.h X11/XawPlus/Paned.h X11/XawPlus/Label.h X11/XawPlus/Command.h X11/XawPlus/Repeater.h],\n            [Xm Xm/Xm.h Xm/Form.h Xm/PanedW.h Xm/Label.h Xm/PushB.h])\n\n         xtk_libs=\"${LIBS%${x11_libs} ${brltty_libs_save}}\"\n\n         CPPFLAGS=\"${brltty_cppflags_save}\"\n         LIBS=\"${brltty_libs_save}\"\n      ])\n   ])\n])\nAC_SUBST([xkb_libs])\nAC_SUBST([xtk_libs])\nAC_SUBST([all_xbrlapi])\nAC_SUBST([install_xbrlapi])\n\ntest -z \"$gui_toolkit_package\" && {\n   case \"${host_os}\"\n   in\n      cygwin*|mingw*)\n         gui_toolkit_package=\"windows\"\n         ;;\n   esac\n}\n\nAC_CHECK_FUNCS([time stime gettimeofday settimeofday nanosleep])\nBRLTTY_CHECK_FUNCTION([clock_gettime], [time.h], [rt])\nBRLTTY_CHECK_FUNCTION([clock_settime], [time.h], [rt])\n\nBRLTTY_CHECK_FUNCTION([pthread_getname_np], [pthread.h], [pthread])\n\nAC_CHECK_DECLS([localtime_r], [], [], [dnl\n#include <time.h>\n])\n\nAC_CHECK_HEADERS([sys/poll.h sys/select.h sys/wait.h])\nAC_CHECK_FUNCS([select])\n\nAC_CHECK_HEADERS([signal.h sys/signalfd.h])\nAC_CHECK_FUNCS([sigaction])\n\nAC_CHECK_HEADERS([alloca.h getopt.h glob.h langinfo.h regex.h])\nAC_CHECK_HEADERS([syslog.h execinfo.h])\nAC_CHECK_HEADERS([sys/file.h sys/socket.h])\nAC_CHECK_HEADERS([pwd.h grp.h])\nAC_CHECK_HEADERS([sys/io.h sys/modem.h machine/speaker.h dev/speaker/speaker.h linux/vt.h])\nAC_CHECK_HEADERS([sdkddkver.h])\n\nAC_CHECK_HEADERS([linux/input.h], [\n   AC_CHECK_HEADERS([linux/uinput.h], [], [], [\n#include <linux/input.h>\n])])\n\nAC_CHECK_FUNCS([getopt_long hstrerror realpath vsyslog])\nAC_CHECK_FUNCS([pause])\nAC_CHECK_FUNCS([fchdir fchmod])\nAC_CHECK_FUNCS([shmget shm_open])\nAC_CHECK_FUNCS([getpeereid getpeerucred getzoneid])\nAC_CHECK_FUNCS([mempcpy wmempcpy])\n\ncase \"${host_os}\"\nin\n   cygwin*|mingw*)\n      if test \"${brltty_cv_dll_ws2_32}\" = \"yes\"\n      then\n         BRLTTY_HAVE_WINDOWS_FUNCTION([getaddrinfo], [ws2_32])\n         BRLTTY_HAVE_WINDOWS_FUNCTION([getnameinfo], [ws2_32])\n         AC_CHECK_FUNCS([gai_strerror])\n      fi\n      AC_CHECK_TYPES([PROCESS_INFORMATION_CLASS], [], [], [\n#include <windows.h>\n])\n      AC_CHECK_DECLS([ProcessUserModeIOPL], [], [], [\n#include <windows.h>\n])\n      ;;\n   *)\n      AC_CHECK_FUNCS([gai_strerror getaddrinfo getnameinfo])\n      ;;\nesac\n\nAC_CHECK_SIZEOF([wchar_t], [], [\n#include <wchar.h>\n])\nAC_DEFINE_UNQUOTED([SIZEOF_WCHAR_T_STR], [\"${ac_cv_sizeof_wchar_t}\"],\n                   [Define this to be a string containing the size of the wchar_t type.])\n\nBRLTTY_IF_PTHREADS([dnl\n   AC_DEFINE([HAVE_POSIX_THREADS], [1],\n             [Define this if posix threads are supported.])\n])\n\nAC_C_BIGENDIAN\nAC_C_CONST\nAC_C_INLINE\nAC_OBJEXT\nAC_EXEEXT\n\nAC_CACHE_CHECK(\n   [if the compiler understands the __alignof__ operator],\n   [brltty_cv_c_operator_alignof],\n   [AC_TRY_COMPILE([\nint a;\nint b = __alignof__(a);\n],\n[],\n[brltty_cv_c_operator_alignof=yes],\n[brltty_cv_c_operator_alignof=no])])\nif test \"${brltty_cv_c_operator_alignof}\" = \"yes\"\nthen\n   AC_DEFINE([HAVE_OPERATOR_ALIGNOF],  [1],\n             [Define this if the __alignof__ operator is supported.])\nfi\n\nAC_CACHE_CHECK(\n   [if the compiler understands __attribute__((format(__printf__)))],\n   [brltty_cv_c_attribute_format_printf],\n   [AC_TRY_COMPILE([\nextern void conf_attribute_format_printf(const char *format, ...)\n       __attribute__((format(__printf__, 1, 2)));\n],\n[],\n[brltty_cv_c_attribute_format_printf=yes],\n[brltty_cv_c_attribute_format_printf=no])])\nif test \"${brltty_cv_c_attribute_format_printf}\" = \"yes\"\nthen\n   AC_DEFINE([HAVE_ATTRIBUTE_FORMAT_PRINTF], [1],\n             [Define this if the printf format attribute is supported.])\nfi\n\nAC_CACHE_CHECK(\n   [if the compiler understands __attribute__((noreturn))],\n   [brltty_cv_c_attribute_noreturn],\n   [AC_TRY_COMPILE([\nextern void conf_attribute_noreturn(void)\n       __attribute__((noreturn));\n],\n[],\n[brltty_cv_c_attribute_noreturn=yes],\n[brltty_cv_c_attribute_noreturn=no])])\nif test \"${brltty_cv_c_attribute_noreturn}\" = \"yes\"\nthen\n   AC_DEFINE([HAVE_ATTRIBUTE_NORETURN], [1],\n             [Define this if the noreturn attribute is supported.])\nfi\n\nAC_CACHE_CHECK(\n   [if the compiler understands __attribute__((packed))],\n   [brltty_cv_c_attribute_packed],\n   [AC_TRY_COMPILE([\ntypedef struct {\n  char c;\n  int i;\n} __attribute__((packed)) conf_attribute_packed;\n],\n[],\n[brltty_cv_c_attribute_packed=yes],\n[brltty_cv_c_attribute_packed=no])])\nif test \"${brltty_cv_c_attribute_packed}\" = \"yes\"\nthen\n   AC_DEFINE([HAVE_ATTRIBUTE_PACKED], [1],\n             [Define this if the packed attribute is supported.])\nfi\n\nAC_CACHE_CHECK(\n   [if the compiler understands __attribute__((unused))],\n   [brltty_cv_c_attribute_unused],\n   [AC_TRY_COMPILE([\nstatic void conf_attribute_unused (void)\n       __attribute__((unused));\n],\n[],\n[brltty_cv_c_attribute_unused=yes],\n[brltty_cv_c_attribute_unused=no])])\nif test \"${brltty_cv_c_attribute_unused}\" = \"yes\"\nthen\n   AC_DEFINE([HAVE_ATTRIBUTE_UNUSED], [1],\n             [Define this if the unused attribute is supported.])\nfi\n\nAC_CACHE_CHECK(\n   [if the compiler supports thread-local variables],\n   [brltty_cv_c_thread_local],\n   [\n      brltty_cv_c_thread_local=\"\"\n      for thread_local_qualifier in \"_Thread_local\" \"__thread\" \"__declspec(thread)\"\n      do\n         AC_TRY_COMPILE([\nstatic ${thread_local_qualifier} int i;\n],\n            [],\n            [brltty_cv_c_thread_local=\"${thread_local_qualifier}\"; break])\n      done\n   ]\n)\nif test -n \"${brltty_cv_c_thread_local}\"\nthen\n   AC_DEFINE_UNQUOTED([THREAD_LOCAL], [${brltty_cv_c_thread_local}],\n                      [Define this if thread-local variables are supported.])\nfi\n\nAC_SUBST([archive_prefix], [lib])\nAC_SUBST([archive_extension], [a])\n\ncase \"${host_os}\"\nin\n   cygwin*)\n      library_prefix=\"cyg\"\n      ;;\n   mingw*)\n      library_prefix=\"\"\n      ;;\n   *)\n      library_prefix=\"${archive_prefix}\"\n      ;;\nesac\nAC_SUBST([library_prefix])\n\ncase \"${host_os}\"\nin\n   hpux*)\n      library_extension=\"sl\"\n      ;;\n   cygwin*|mingw*)\n      library_extension=\"dll\"\n      ;;\n   darwin*)\n      library_extension=\"dylib\"\n      ;;\n   *)\n      library_extension=\"so\"\n      ;;\nesac\nAC_SUBST([library_extension])\nAC_DEFINE_UNQUOTED([LIBRARY_EXTENSION], [\"${library_extension}\"],\n                   [Define this to be a string containing the library extension.])\n\nAC_SUBST([module_name], [\"${library_prefix}${PACKAGE_TARNAME}\"])\nAC_DEFINE_UNQUOTED([MODULE_NAME], [\"${module_name}\"],\n                   [Define this to be a string containing the base module name.])\n\ncase \"${host_os}\"\nin\n   darwin*)\n      module_extension=\"bundle\"\n      ;;\n   *)\n      module_extension=\"${library_extension}\"\n      ;;\nesac\nAC_SUBST([module_extension])\nAC_DEFINE_UNQUOTED([MODULE_EXTENSION], [\"${module_extension}\"],\n                   [Define this to be a string containing the module extension.])\n\nAC_CACHE_CHECK([for static archive extension], [brltty_cv_ext_arc], [dnl\ncase \"${host_os}\"\nin\n   *)\n      brltty_cv_ext_arc=\"a\"\n      ;;\nesac])\narchive_extension=\"${brltty_cv_ext_arc}\"\nAC_SUBST([archive_extension])\n\nAC_CACHE_CHECK([for shared object run-time search path environment variable], [brltty_cv_env_libsearch], [dnl\ncase \"${host_os}\"\nin\n   hpux*)\n      brltty_cv_env_libsearch=\"SHLIB_PATH\"\n      ;;\n   darwin*)\n      brltty_cv_env_libsearch=\"DYLD_LIBRARY_PATH\"\n      ;;\n   *)\n      brltty_cv_env_libsearch=\"LD_LIBRARY_PATH\"\n      ;;\nesac])\nlibsearch_variable=\"${brltty_cv_env_libsearch}\"\nAC_SUBST([libsearch_variable])\n\nBRLTTY_ARG_PACKAGE([system], [base system], [], [dnl\n   *android*)\n      system_package=\"java\"\n      system_libs=\"-llog\"\n      ;;\n   *qnx*)\n      AC_CHECK_LIB([asound], [snd_pcm_open])\n      ;;\n   cygwin*)\n      system_package=\"windows\"\n      ;;\n   darwin*)\n      system_package=\"darwin\"\n      system_includes=\"-x objective-c\"\n      system_libs=\"-framework IOKit -framework Foundation -framework CoreFoundation -lobjc\"\n      ;;\n   hpux*)\n      if test -d /opt/audio/include\n      then\n         CPPFLAGS=\"${CPPFLAGS} -I/opt/audio/include\"\n         system_libs=\"-L/opt/audio/lib -lAlib\"\n         AC_DEFINE([HAVE_HPUX_AUDIO], [1],\n                   [Define this if HP-UX audio support is available.])\n      fi\n      ;;\n   linux*)\n      system_package=\"linux\"\n      ;;\n   mingw*)\n      system_package=\"windows\"\n      ;;\n   msdos*)\n      system_package=\"msdos\"\n      system_libs=\"-ldbg\"\n      ;;\n])\n\nBRLTTY_ARG_DISABLE(\n   [contracted-braille],\n   [in-line contracted braille],\n   [],\n[dnl\n   AC_DEFINE([ENABLE_CONTRACTED_BRAILLE], [1],\n             [Define this to include contraction table support.])\n\n   all_brltty_ctb=\"all-brltty-ctb\"\n   install_brltty_ctb=\"install-brltty-ctb\"\n\n   contracted_braille_objects='ctb_compile.$O ctb_translate.$O ctb_native.$O ctb_external.$O'\n   install_contraction_tables=install-contraction-tables\n\n   louis_includes=\"\"\n   louis_libs=\"\"\n   BRLTTY_ARG_DISABLE(\n      [liblouis],\n      [support for LibLouis-based contracted braille],\n      [],\n   [dnl\n      BRLTTY_HAVE_PACKAGE([louis], [liblouis], [dnl\n         louisTablesDirectory=`${PKG_CONFIG} --variable=tablesdir liblouis`\n         if test -n \"${louisTablesDirectory}\"\n         then\n            AC_DEFINE_UNQUOTED([LOUIS_TABLES_DIRECTORY], [\"${louisTablesDirectory}\"],\n                               [Define this to be a string containing the path to the LibLouis tables directory.])\n            contracted_braille_objects=\"${contracted_braille_objects} ctb_louis.\\$O\"\n         fi\n      ])\n   ])\n   AC_SUBST([louis_includes])\n   AC_SUBST([louis_libs])\n])\nAC_SUBST([all_brltty_ctb])\nAC_SUBST([install_brltty_ctb])\nAC_SUBST([contracted_braille_objects])\nAC_SUBST([install_contraction_tables])\n\nBRLTTY_ARG_DISABLE(\n   [gpm],\n   [mouse tracking via GPM],\n   [],\n[dnl\n   AC_CHECK_LIB([gpm], [Gpm_Open])\n])\n\ncase \"${host_os}\"\nin\n   hpux*)\n      BRLTTY_SEARCH_LIBS([shl_load], [dld])\n      ;;\n   *)\n      ;;\nesac\n\nBRLTTY_ARG_PACKAGE([pgmpath], [program path], [], [dnl\n   cygwin*)\n      pgmpath_package=\"windows\"\n      ;;\n   linux*)\n      pgmpath_package=\"linux\"\n      ;;\n   mingw*)\n      pgmpath_package=\"windows\"\n      ;;\n   solaris*)\n      pgmpath_package=\"solaris\"\n      ;;\n])\n\nBRLTTY_ARG_PACKAGE([service], [system service], [libsystemd], [dnl\n   mingw*)\n      service_package=\"windows\"\n      ;;\n])\n\nAC_SUBST([SYSTEMD_SERVICE_TYPE], [\"forking\"])\nAC_SUBST([SYSTEMD_SERVICE_ARGUMENTS], [\"\"])\n\ncase \"${service_package}\"\nin\n   libsystemd)\n      SYSTEMD_SERVICE_TYPE=\"notify\"\n      SYSTEMD_SERVICE_ARGUMENTS=\"-n\"\n      ;;\nesac\n\nBRLTTY_ARG_PACKAGE([params], [boot parameters], [], [dnl\n   linux*)\n      params_package=\"linux\"\n      ;;\n])\n\nBRLTTY_ARG_PACKAGE([dynld], [dynamic loading], [dlfcn dyld], [dnl\n   elf*)\n      dynld_package=\"grub\"\n      ;;\n   hpux*)\n      dynld_package=\"shl\"\n      ;;\n   mingw*)\n      dynld_package=\"windows\"\n      ;;\n], [dnl\n   dlfcn)\n      AC_CHECK_HEADERS([dlfcn.h], [\n         AC_SEARCH_LIBS([dlopen], [dl], [dnl\n            dynld_package=\"dlfcn\"\n         ])\n      ])\n      ;;\n   dyld)\n      AC_CHECK_HEADERS([mach-o/dyld.h], [\n         dynld_package=\"dyld\"\n      ])\n      ;;\n])\n\nBRLTTY_ARG_PACKAGE([charset], [character set], [iconv], [dnl\n   elf*)\n      charset_package=grub\n      ;;\n   mingw*)\n      charset_package=windows\n      ;;\n   msdos*)\n      charset_package=msdos\n      ;;\n], [dnl\n   iconv)\n      if test \"${brltty_enabled_iconv}\" = \"yes\"\n      then\n         AC_CHECK_HEADER([iconv.h], [dnl\n            charset_package=iconv\n         ])\n      fi\n      ;;\n])\n\nBRLTTY_ARG_PACKAGE([hostcmd], [host command], [unix], [dnl\n   mingw*)\n      hostcmd_package=windows\n      ;;\n], [dnl\n   unix)\n      AC_CHECK_DECL([fork], [dnl\n         AC_CHECK_HEADER([signal.h], [dnl\n            AC_CHECK_DECL([SIGCHLD], [dnl\n               hostcmd_package=unix\n            ], [], [dnl\n#include <signal.h>\n            ])\n         ])\n      ])\n      ;;\n])\n\nBRLTTY_ARG_PACKAGE([mntpt], [mount point], [mntent mnttab], [dnl\n], [dnl\n   mntent)\n      AC_CHECK_HEADER([mntent.h], [dnl\n         AC_CHECK_FUNC([setmntent], [dnl\n            mntpt_package=mntent\n            AC_CHECK_FUNCS([addmntent])\n         ])\n      ])\n      ;;\n   mnttab)\n      AC_CHECK_HEADER([sys/mnttab.h], [dnl\n         mntpt_package=mnttab\n      ])\n      ;;\n])\n\nBRLTTY_ARG_PACKAGE([mntfs], [mount file system], [], [dnl\n   linux*)\n      mntfs_package=\"linux\"\n      ;;\n])\n\nBRLTTY_ARG_PACKAGE([kbd], [keyboard], [], [dnl\n   *android*) kbd_package=\"android\";;\n   linux*) kbd_package=\"linux\";;\n])\n\nBRLTTY_ARG_PACKAGE([bell], [console bell], [], [dnl\n   linux*)\n      bell_package=\"linux\"\n      ;;\n])\n\nBRLTTY_ARG_PACKAGE([leds], [keyboard LEDs], [], [dnl\n   linux*)\n      leds_package=\"linux\"\n      ;;\n])\n\nBRLTTY_ARG_PACKAGE([beep], [beeper], [], [dnl\n   *android*)\n      beep_package=\"none\"\n      ;;\n   cygwin*)\n      beep_package=\"windows\"\n      ;;\n   freebsd*)\n      beep_package=\"spkr\"\n      ;;\n   kfreebsd*)\n      beep_package=\"spkr\"\n      ;;\n   linux*)\n      beep_package=\"linux\"\n      ;;\n   mingw*)\n      beep_package=\"windows\"\n      ;;\n   msdos*)\n      beep_package=\"msdos\"\n      ;;\n   netbsd*)\n      beep_package=\"wskbd\"\n      ;;\n   openbsd*)\n      beep_package=\"wskbd\"\n      ;;\n   solaris*)\n      beep_package=\"solaris\"\n      ;;\n])\n\nBRLTTY_ARG_PACKAGE([pcm], [PCm], [alsa oss], [dnl\n   *android*)\n      pcm_package=\"android\"\n      ;;\n   *qnx*)\n      pcm_package=\"qsa\"\n      ;;\n   hpux*)\n      pcm_package=\"hpux\"\n      ;;\n   mingw*)\n      pcm_package=\"windows\"\n      ;;\n   msdos*)\n      pcm_package=\"none\"\n      ;;\n   netbsd*)\n      pcm_package=\"audio\"\n      ;;\n   openbsd*)\n      pcm_package=\"audio\"\n      ;;\n   solaris*)\n      pcm_package=\"audio\"\n      ;;\n], [dnl\n   oss)\n      AC_CHECK_HEADER([sys/soundcard.h], [dnl\n         pcm_package=\"oss\"\n      ])\n      ;;\n])\n\nBRLTTY_ARG_PACKAGE([midi], [MIDI], [alsa oss], [dnl\n   darwin*)\n      midi_package=\"darwin\"\n      midi_libs=\"-framework AudioUnit -framework AudioToolbox\"\n      ;;\n   mingw*)\n      midi_package=\"windows\"\n      ;;\n   msdos*)\n      midi_package=\"none\"\n      ;;\n], [dnl\n   oss)\n      AC_CHECK_HEADER([sys/soundcard.h], [dnl\n         midi_package=\"oss\"\n      ])\n      ;;\n])\n\nBRLTTY_ARG_PACKAGE([fm], [FM], [adlib], [dnl\n], [dnl\n   adlib)\n      fm_package=\"adlib\"\n      ;;\n])\n\nBRLTTY_ARG_PACKAGE([serial], [serial I/O], [termios], [dnl\n   elf*)\n      serial_package=\"grub\"\n      ;;\n   mingw*)\n      serial_package=\"windows\"\n      ;;\n   msdos*)\n      serial_package=\"msdos\"\n      ;;\n], [dnl\n   termios)\n      AC_CHECK_HEADER([termios.h], [dnl\n         serial_package=\"termios\"\n         AC_CHECK_FUNCS([tcdrain])\n      ])\n      ;;\n])\n\nBRLTTY_ARG_PACKAGE([usb], [USB I/O], [libusb-1.0 libusb], [dnl\n   *android*)\n      usb_package=\"android\"\n      ;;\n   darwin*)\n      usb_package=\"darwin\"\n      usb_includes=\"-x objective-c\"\n      ;;\n   elf*)\n      usb_package=\"grub\"\n      ;;\n   freebsd*)\n      usb_package=\"freebsd\"\n      ;;\n   kfreebsd*)\n      usb_package=\"kfreebsd\"\n      AC_CHECK_HEADERS([legacy/dev/usb/usb.h])\n      ;;\n   linux*)\n      usb_package=\"linux\"\n      ;;\n   netbsd*)\n      usb_package=\"netbsd\"\n      ;;\n   openbsd*)\n      usb_package=\"openbsd\"\n      ;;\n   solaris*)\n      usb_package=\"solaris\"\n      AC_HAVE_LIBRARY([aio])\n      AC_HAVE_LIBRARY([rt])\n      ;;\n], [dnl\n   libusb)\n      AC_CHECK_HEADER([usb.h], [dnl\n         usb_package=\"libusb\"\n         usb_libs=\"-lusb\"\n      ], [], [-])\n      ;;\n])\n\nBRLTTY_ARG_PACKAGE([bluetooth], [Bluetooth I/O], [], [dnl\n   *android*)\n      bluetooth_package=\"android\"\n      ;;\n   darwin*)\n      bluetooth_package=\"darwin\"\n      bluetooth_includes=\"-x objective-c\"\n      bluetooth_libs=\"-framework IOBluetooth\"\n      ;;\n   cygwin*|mingw*)\n      AC_CHECK_HEADER([ws2bth.h], [dnl\n         bluetooth_package=\"windows\"\n         bluetooth_libs=\"-lbthprops -lws2_32\"\n      ], , [[#include <windows.h>]])\n      ;;\n   linux*)\n      AC_CHECK_HEADER([bluetooth/bluetooth.h], [dnl\n         bluetooth_package=\"linux\"\n         AC_HAVE_LIBRARY([bluetooth])\n\n         BRLTTY_HAVE_PACKAGE([dbus], [\"dbus-1 >= 1.0\"], [dnl\n            bluetooth_includes=\"${dbus_includes}\"\n            bluetooth_libs=\"${dbus_libs}\"\n         ])\n      ])\n      ;;\n])\n\nBRLTTY_ARG_PACKAGE([ports], [I/O ports], [], [dnl\n   cygwin*)\n      ports_package=\"windows\"\n      ;;\n   elf*)\n      ports_package=\"grub\"\n      ;;\n   gnu*)\n      ports_package=\"glibc\"\n      ;;\n   kfreebsd*)\n      ports_package=\"kfreebsd\"\n      ;;\n   linux*)\n      AC_CHECK_FUNC([ioperm], [\n         ports_package=\"glibc\"\n      ])\n      ;;\n   mingw*)\n      ports_package=\"windows\"\n      ;;\n   msdos*)\n      ports_package=\"msdos\"\n      ;;\n])\n\nBRLTTY_BRAILLE_DRIVER([al], [Alva])\nBRLTTY_BRAILLE_DRIVER([at], [Albatross])\ntest -n \"${api_server_objects}\" && {\n   BRLTTY_BRAILLE_DRIVER([ba], [BrlAPI], [$(API_LIBS)])\n}\nBRLTTY_BRAILLE_DRIVER([bc], [BrailComm])\nBRLTTY_BRAILLE_DRIVER([bd], [Braudi])\nBRLTTY_BRAILLE_DRIVER([bl], [BrailleLite])\nBRLTTY_BRAILLE_DRIVER([bm], [Baum])\nBRLTTY_BRAILLE_DRIVER([bn], [BrailleNote])\nBRLTTY_BRAILLE_DRIVER([cb], [CombiBraille])\nBRLTTY_BRAILLE_DRIVER([ce], [Cebra])\nBRLTTY_BRAILLE_DRIVER([ec], [EcoBraille])\nBRLTTY_BRAILLE_DRIVER([eu], [EuroBraille])\nBRLTTY_BRAILLE_DRIVER([fs], [FreedomScientific])\nBRLTTY_BRAILLE_DRIVER([hd], [Hedo])\nBRLTTY_BRAILLE_DRIVER([hm], [HIMS])\nBRLTTY_BRAILLE_DRIVER([ht], [HandyTech])\nBRLTTY_BRAILLE_DRIVER([hw], [HumanWare])\nBRLTTY_BRAILLE_DRIVER([ir], [Iris])\nBRLTTY_BRAILLE_DRIVER([ic], [Inceptor])\nBRLTTY_IF_PACKAGE([Libbraille], [libbraille], [include/braille.h], [dnl\n   BRLTTY_BRAILLE_DRIVER([lb], [Libbraille], [-L$(LIBBRAILLE_ROOT)/lib -lbraille])\n])\nBRLTTY_BRAILLE_DRIVER([lt], [LogText])\nBRLTTY_BRAILLE_DRIVER([mb], [MultiBraille])\nBRLTTY_BRAILLE_DRIVER([md], [MDV])\nBRLTTY_BRAILLE_DRIVER([mm], [BrailleMemo])\nBRLTTY_BRAILLE_DRIVER([mn], [MiniBraille])\nBRLTTY_BRAILLE_DRIVER([mt], [Metec])\nBRLTTY_BRAILLE_DRIVER([np], [NinePoint])\nBRLTTY_BRAILLE_DRIVER([pg], [Pegasus])\nBRLTTY_BRAILLE_DRIVER([pm], [Papenmeier])\nBRLTTY_BRAILLE_DRIVER([sk], [Seika])\nBRLTTY_BRAILLE_DRIVER([tn], [TechniBraille])\nBRLTTY_BRAILLE_DRIVER([ts], [TSI])\nBRLTTY_BRAILLE_DRIVER([tt], [TTY], [$(CURSES_LIBS)])\nBRLTTY_BRAILLE_DRIVER([vd], [VideoBraille])\nBRLTTY_BRAILLE_DRIVER([vo], [Voyager])\nBRLTTY_BRAILLE_DRIVER([vr], [Virtual])\nBRLTTY_BRAILLE_DRIVER([vs], [VisioBraille])\ntest -n \"${gui_toolkit_package}\" && {\n   BRLTTY_BRAILLE_DRIVER([xw], [XWindow], [$(XTK_LIBS) $(X11_LIBS)])\n}\ncase \"${host_os}\"\nin\n   linux*)\n      BRLTTY_BRAILLE_DRIVER([bg], [B2G])\n      ;;\n   *) ;;\nesac\nBRLTTY_ARG_DRIVER([braille], [Braille])\n\nAC_CACHE_CHECK([for device directory], [brltty_cv_device_directory], [dnl\ncase \"${host_os}\"\nin\n   mingw*)\n      brltty_cv_device_directory=\"//.\"\n      ;;\n   elf*|msdos*)\n      brltty_cv_device_directory=\"\"\n      ;;\n   *)\n      brltty_cv_device_directory=\"/dev\"\n      ;;\nesac])\nAC_DEFINE_UNQUOTED([DEVICE_DIRECTORY], [\"${brltty_cv_device_directory}\"],\n                   [Define this to be a string containing the path to the directory containing the devices.])\n\nAC_CACHE_CHECK([for first serial device], [brltty_cv_device_serial_first], [dnl\ncase \"${host_os}\"\nin\n   linux*)\n      brltty_cv_device_serial_first=\"ttyS0\"\n      ;;\n   gnu*)\n      brltty_cv_device_serial_first=\"com0\"\n      ;;\n   solaris*)\n      brltty_cv_device_serial_first=\"ttya\"\n      ;;\n   hpux*)\n      brltty_cv_device_serial_first=\"tty0p0\"\n      ;;\n   openbsd*)\n      brltty_cv_device_serial_first=\"cua00\"\n      ;;\n   freebsd*)\n      brltty_cv_device_serial_first=\"cuaa0\"\n      ;;\n   kfreebsd*)\n      brltty_cv_device_serial_first=\"cuaa0\"\n      ;;\n   netbsd*)\n      brltty_cv_device_serial_first=\"dty00\"\n      ;;\n   osf*)\n      brltty_cv_device_serial_first=\"tty00\"\n      ;;\n   *qnx*)\n      brltty_cv_device_serial_first=\"ser1\"\n      ;;\n   cygwin*)\n      brltty_cv_device_serial_first=\"ttyS0\"\n      ;;\n   mingw*|msdos*)\n      brltty_cv_device_serial_first=\"COM1\"\n      ;;\n   elf*)\n      brltty_cv_device_serial_first=\"com0\"\n      ;;\n   *)\n      brltty_cv_device_serial_first=\"\"\n      AC_MSG_WARN([primary serial device not configured for ${host_os}])\n      ;;\nesac])\nAC_SUBST([serial_first_device], [${brltty_cv_device_serial_first}])\nAC_DEFINE_UNQUOTED([SERIAL_FIRST_DEVICE], [\"${serial_first_device}\"],\n                   [Define this to be a string containing the path to the first serial device.])\n\nBRLTTY_ARG_WITH(\n   [braille-device], [DEVICE],\n   [default braille display device],\n   [braille_device], [\"yes\"]\n)\nif test \"${braille_device}\" = \"no\"\nthen\n   braille_device=\"\"\nelif test \"${braille_device}\" = \"yes\"\nthen\n   braille_device=\"\"\n   test \"${usb_package}\" != \"none\" && braille_device=\"${braille_device},usb:\"\n   test \"${bluetooth_package}\" != \"none\" && braille_device=\"${braille_device},bluetooth:\"\n\n   if test -n \"${braille_device}\"\n   then\n      braille_device=\"${braille_device#,}\"\n   else\n      braille_device=\"serial:${serial_first_device}\"\n   fi\nfi\nAC_SUBST([braille_device])\nAC_DEFINE_UNQUOTED([BRAILLE_DEVICE], [\"${braille_device}\"],\n                   [Define this to be a string containing the path to the default braille device.])\nBRLTTY_SUMMARY_ITEM([braille-device], [braille_device])\n\nBRLTTY_TEXT_TABLE([auto], [locale-based autoselection])\nBRLTTY_TEXT_TABLE([ar], [Arabic (generic)])\nBRLTTY_TEXT_TABLE([as], [Assamese])\nBRLTTY_TEXT_TABLE([awa], [Awadhi])\nBRLTTY_TEXT_TABLE([bg], [Bulgarian])\nBRLTTY_TEXT_TABLE([bh], [Bihari])\nBRLTTY_TEXT_TABLE([bn], [Bengali])\nBRLTTY_TEXT_TABLE([bo], [Tibetan])\nBRLTTY_TEXT_TABLE([bra], [Braj])\nBRLTTY_TEXT_TABLE([brf], [Braille Ready Format (for viewing .brf files within an editor or pager)])\nBRLTTY_TEXT_TABLE([cs], [Czech])\nBRLTTY_TEXT_TABLE([cy], [Welsh])\nBRLTTY_TEXT_TABLE([da], [Danish])\nBRLTTY_TEXT_TABLE([da-1252], [Danish (Svend Thougaard, 2002-11-18)])\nBRLTTY_TEXT_TABLE([da-lt], [Danish (LogText)])\nBRLTTY_TEXT_TABLE([de], [German])\nBRLTTY_TEXT_TABLE([dra], [Dravidian])\nBRLTTY_TEXT_TABLE([el], [Greek])\nBRLTTY_TEXT_TABLE([en], [English])\nBRLTTY_TEXT_TABLE([en_CA], [English (Canada)])\nBRLTTY_TEXT_TABLE([en_GB], [English (United Kingdom)])\nBRLTTY_TEXT_TABLE([en_US], [English (United States)])\nBRLTTY_TEXT_TABLE([en-nabcc], [English (North American Braille Computer Code)])\nBRLTTY_TEXT_TABLE([eo], [Esperanto])\nBRLTTY_TEXT_TABLE([es], [Spanish])\nBRLTTY_TEXT_TABLE([et], [Estonian])\nBRLTTY_TEXT_TABLE([fi], [Finnish])\nBRLTTY_TEXT_TABLE([fr], [French])\nBRLTTY_TEXT_TABLE([fr_CA], [French (Canada)])\nBRLTTY_TEXT_TABLE([fr_FR], [French (France)])\nBRLTTY_TEXT_TABLE([fr-2007], [French (unified 2007)])\nBRLTTY_TEXT_TABLE([fr-cbifs], [French (Code Braille Informatique Fran\u00e7ais Standard)])\nBRLTTY_TEXT_TABLE([fr-vs], [French (VisioBraille)])\nBRLTTY_TEXT_TABLE([ga], [Irish])\nBRLTTY_TEXT_TABLE([gd], [Gaelic])\nBRLTTY_TEXT_TABLE([gon], [Gondi])\nBRLTTY_TEXT_TABLE([gu], [Gujarati])\nBRLTTY_TEXT_TABLE([he], [Hebrew])\nBRLTTY_TEXT_TABLE([hi], [Hindi])\nBRLTTY_TEXT_TABLE([hr], [Croatian])\nBRLTTY_TEXT_TABLE([hu], [Hungarian])\nBRLTTY_TEXT_TABLE([hy], [Armenian])\nBRLTTY_TEXT_TABLE([is], [Icelandic])\nBRLTTY_TEXT_TABLE([it], [Italian])\nBRLTTY_TEXT_TABLE([kha], [Khasi])\nBRLTTY_TEXT_TABLE([kn], [Kannada])\nBRLTTY_TEXT_TABLE([kok], [Konkani])\nBRLTTY_TEXT_TABLE([kru], [Kurukh])\nBRLTTY_TEXT_TABLE([lt], [Lituanian])\nBRLTTY_TEXT_TABLE([lv], [Latvian])\nBRLTTY_TEXT_TABLE([mg], [Malagasy])\nBRLTTY_TEXT_TABLE([mi], [Maori])\nBRLTTY_TEXT_TABLE([ml], [Malayalam])\nBRLTTY_TEXT_TABLE([mni], [Manipuri])\nBRLTTY_TEXT_TABLE([mr], [Marathi])\nBRLTTY_TEXT_TABLE([mt], [Maltese])\nBRLTTY_TEXT_TABLE([mun], [Munda])\nBRLTTY_TEXT_TABLE([mwr], [Marwari])\nBRLTTY_TEXT_TABLE([ne], [Nepali])\nBRLTTY_TEXT_TABLE([new], [Newari])\nBRLTTY_TEXT_TABLE([nl], [Dutch])\nBRLTTY_TEXT_TABLE([nl_BE], [Dutch (Belgium)])\nBRLTTY_TEXT_TABLE([nl_NL], [Dutch (Netherlands)])\nBRLTTY_TEXT_TABLE([no], [Norwegian])\nBRLTTY_TEXT_TABLE([no-generic], [Norwegian (with support for other languages)])\nBRLTTY_TEXT_TABLE([no-oup], [Norwegian (Offentlig utvalg for punktskrift)])\nBRLTTY_TEXT_TABLE([nwc], [Newari (old)])\nBRLTTY_TEXT_TABLE([or], [Oriya])\nBRLTTY_TEXT_TABLE([pa], [Panjabi])\nBRLTTY_TEXT_TABLE([pi], [Pali])\nBRLTTY_TEXT_TABLE([pl], [Polish])\nBRLTTY_TEXT_TABLE([pt], [Portuguese])\nBRLTTY_TEXT_TABLE([ro], [Romanian])\nBRLTTY_TEXT_TABLE([ru], [Russian])\nBRLTTY_TEXT_TABLE([sa], [Sanskrit])\nBRLTTY_TEXT_TABLE([sat], [Santali])\nBRLTTY_TEXT_TABLE([sd], [Sindhi])\nBRLTTY_TEXT_TABLE([sk], [Slovak])\nBRLTTY_TEXT_TABLE([sl], [Slovenian])\nBRLTTY_TEXT_TABLE([sv], [Swedish])\nBRLTTY_TEXT_TABLE([sv-1989], [Swedish (1989 standard)])\nBRLTTY_TEXT_TABLE([sv-1996], [Swedish (1996 standard)])\nBRLTTY_TEXT_TABLE([sw], [Swahili])\nBRLTTY_TEXT_TABLE([ta], [Tamil])\nBRLTTY_TEXT_TABLE([te], [Telugu])\nBRLTTY_TEXT_TABLE([tr], [Turkish])\nBRLTTY_TEXT_TABLE([uk], [Ukrainian])\nBRLTTY_TEXT_TABLE([vi], [Vietnamese])\nBRLTTY_ARG_TABLE([text], [en-nabcc], [ttb])\n\nBRLTTY_ATTRIBUTES_TABLE([left_right], [foreground colour in the left column and background colour in the right column])\nBRLTTY_ATTRIBUTES_TABLE([invleft_right], [inverse foreground colour in the left column and background colour in the right column])\nBRLTTY_ATTRIBUTES_TABLE([upper_lower], [foreground colour in the upper square and background colour in the lower square])\nBRLTTY_ARG_TABLE([attributes], [left_right], [atb])\n\nBRLTTY_ARG_DISABLE(\n   [speech-support],\n   [support for speech synthesizers and text-to-speech engines],\n   [],\n[dnl\n   AC_DEFINE([ENABLE_SPEECH_SUPPORT], [1],\n             [Define this to include speech synthesizer and text-to-speech engine support.])\n   speech_support_object='spk.$O'\n\n   BRLTTY_SPEECH_DRIVER([al], [Alva])\n   BRLTTY_SPEECH_DRIVER([bl], [BrailleLite])\n   BRLTTY_SPEECH_DRIVER([cb], [CombiBraille])\n\n   BRLTTY_IF_PACKAGE([eSpeak], [espeak], [include/espeak/speak_lib.h], [dnl\n      BRLTTY_SPEECH_DRIVER([es], [eSpeak], [-L$(ESPEAK_ROOT)/lib -lespeak])\n   ])\n\n   BRLTTY_IF_PACKAGE([FestivalLite], [flite], [include/flite/flite.h], [dnl\n      BRLTTY_ARG_REQUIRED(\n         [flite-language], [LANGUAGE],\n         [the FestivalLite language to use],\n         [flite_language], [\"usenglish\"]\n      )\n\n      BRLTTY_ARG_REQUIRED(\n         [flite-lexicon], [LEXICON],\n         [the FestivalLite lexicon to use],\n         [flite_lexicon], [\"cmulex\"]\n      )\n\n      BRLTTY_ARG_REQUIRED(\n         [flite-voice], [VOICE],\n         [the FestivalLite voice to use],\n         [flite_voice], [\"cmu_us_kal\"]\n      )\n\n      BRLTTY_SPEECH_DRIVER([fl], [FestivalLite], [-L$(FLITE_ROOT)/lib -lflite_$(FLITE_VOICE) -lflite_$(FLITE_LEXICON) -lflite_$(FLITE_LANGUAGE) -lflite -lm])\n   ])\n\n   BRLTTY_SPEECH_DRIVER([fv], [Festival])\n   BRLTTY_SPEECH_DRIVER([gs], [GenericSay])\n\n   BRLTTY_IF_PACKAGE([Mikropuhe], [mikropuhe], [mpwrfile.h], [dnl\n      BRLTTY_IF_PTHREADS([dnl\n         BRLTTY_SPEECH_DRIVER([mp], [Mikropuhe], [-L$(MPLINUX_ROOT) -lmplinux])\n      ])\n   ])\n\n   BRLTTY_IF_PACKAGE([speech-dispatcher], [speechd], [include/libspeechd.h], [dnl\n      BRLTTY_SPEECH_DRIVER([sd], [SpeechDispatcher])\n   ], [include], [lib], [speechd])\n\n   BRLTTY_IF_PACKAGE([Swift], [swift], [include/swift.h], [dnl\n      BRLTTY_SPEECH_DRIVER([sw], [Swift], [-L$(SWIFT_ROOT)/lib -lswift -lm])\n   ])\n\n   BRLTTY_IF_PACKAGE([Theta], [theta], [include/theta.h], [dnl\n      BRLTTY_SPEECH_DRIVER([th], [Theta], [-L$(THETA_ROOT)/lib -ltheta])\n   ])\n\n   BRLTTY_IF_PACKAGE([ViaVoice], [viavoice], [include/eci.h], [dnl\n      BRLTTY_SPEECH_DRIVER([vv], [ViaVoice], [-L$(VIAVOICE_ROOT)/lib -libmeci50])\n   ])\n\n   BRLTTY_SPEECH_DRIVER([xs], [ExternalSpeech])\n\n   case \"${host_os}\"\n   in\n      *android*)\n         BRLTTY_SPEECH_DRIVER([an], [Android])\n         ;;\n      *) ;;\n   esac\n])\nAC_SUBST([speech_support_object])\nBRLTTY_ARG_DRIVER([speech], [Speech])\n\ncase \"${host_os}\"\nin\n   *android*)\n      BRLTTY_SCREEN_DRIVER([an], [Android])\n      ;;\n   linux*)\n      BRLTTY_SCREEN_DRIVER([lx], [Linux])\n      ;;\n   gnu*)\n      BRLTTY_SCREEN_DRIVER([hd], [Hurd])\n      ;;\n   cygwin*|mingw*)\n      BRLTTY_SCREEN_DRIVER([wn], [Windows])\n      brltty_build_directories=\"${brltty_build_directories} Drivers/BrlAPI/WindowEyes\"\n      ;;\n   msdos*)\n      BRLTTY_SCREEN_DRIVER([pb], [PcBios])\n      ;;\n   elf*)\n      BRLTTY_SCREEN_DRIVER([gb], [Grub])\n      ;;\n   *)\n      AC_MSG_WARN([no native screen driver for ${host_os}])\n      ;;\nesac\n\nAC_CHECK_HEADER([sys/shm.h], [dnl\n   BRLTTY_SCREEN_DRIVER([sc], [Screen])\n])\n\nif test \"${brltty_enabled_x}\" = \"yes\"\nthen\n   BRLTTY_HAVE_PACKAGE([cspi], [cspi-1.0], [dnl\n      AC_CHECK_HEADER([X11/keysym.h], [dnl\n         AC_CHECK_HEADER([X11/Xlib.h], [dnl\n            BRLTTY_SCREEN_DRIVER([as], [AtSpi], [$(X11_LIBS) $(CSPI_LIBS)])\n         ])\n      ])\n   ])\nfi\n\nBRLTTY_HAVE_PACKAGE([dbus], [\"dbus-1 >= 1.0\"], [dnl\n   AC_CHECK_HEADER([X11/keysym.h], [dnl\n      BRLTTY_HAVE_PACKAGE([atspi2], [atspi-2], [dnl\n         brltty_cppflags_save=\"${CPPFLAGS}\"\n         CPPFLAGS=\"${CPPFLAGS} ${atspi2_cflags}\"\n\n         brltty_libs_save=\"${LIBS}\"\n         LIBS=\"${atspi2_libs} ${LIBS}\"\n\n         AC_CHECK_FUNCS([atspi_get_a11y_bus])\n\n         CPPFLAGS=\"${brltty_cppflags_save}\"\n         LIBS=\"${brltty_libs_save}\"\n\n         BRLTTY_HAVE_PACKAGE([glib2], [glib-2.0])\n      ])\n\n      BRLTTY_SCREEN_DRIVER([a2], [AtSpi2], [$(DBUS_LIBS) $(ATSPI2_LIBS) $(GLIB2_LIBS)])\n   ])\n])\n\nBRLTTY_ARG_DRIVER([screen], [Screen])\nBRLTTY_SUMMARY_ITEM([screen-driver], [default_screen_driver])\n\nBRLTTY_ARG_ENABLE(\n   [relocatable-install],\n   [installation using paths relative to the program directory])\n\ncase \"${host_os}\"\nin\n   darwin*)\n      INSTALL_OPTION_STRIP=\"\"\n      ;;\n   *)\n      INSTALL_OPTION_STRIP=\"-s\"\n      ;;\nesac\n\nif test \"${cross_compiling}\" != \"no\"\nthen\n   if test -n \"${INSTALL_OPTION_STRIP}\"\n   then\n      INSTALL_OPTION_STRIP=\"${INSTALL_OPTION_STRIP} --strip-program ${STRIP}\"\n   fi\nfi\n\nBRLTTY_ARG_DISABLE(\n   [stripping],\n   [stripping of executables and shared objects during installation],\n   [],\n   [],\n   [INSTALL_OPTION_STRIP=\"\"]\n)\nAC_SUBST([INSTALL_OPTION_STRIP])\n\noriginal_prefix=\"${prefix}\"\ntest \"${prefix}\" = \"NONE\" && prefix=\"\"\noriginal_exec_prefix=\"${exec_prefix}\"\ntest \"${exec_prefix}\" = \"NONE\" && exec_prefix=\"${prefix}\"\nBRLTTY_VAR_EXPAND([brltty_reference_directory], [${execute_root}${program_directory}])\nBRLTTY_DEFINE_DIRECTORY([LOCALE_DIRECTORY], [\"${execute_root}${localedir}\"],\n                        [Define this to be a string containing the path to the locale directory.])\nif test -n \"${writable_directory}\"\nthen\n   BRLTTY_DEFINE_DIRECTORY([WRITABLE_DIRECTORY], [${writable_directory}],\n                           [Define this to be a string containing the path to a writable directory.])\nfi\nBRLTTY_DEFINE_DIRECTORY([TABLES_DIRECTORY], [${execute_root}${tables_directory}],\n                        [Define this to be a string containing the path to the data files directory.])\nBRLTTY_DEFINE_DIRECTORY([DRIVERS_DIRECTORY], [${execute_root}${drivers_directory}],\n                        [Define this to be a string containing the path to the drivers directory.])\nBRLTTY_DEFINE_DIRECTORY([CONFIGURATION_DIRECTORY], [${sysconfdir}],\n                        [Define this to be a string containing the path to the configuration directory.])\nBRLTTY_DEFINE_DIRECTORY([UPDATABLE_DIRECTORY], [${localstatedir}/lib/${PACKAGE_TARNAME}],\n                        [Define this to be a string containing the path to a directory which contains files that can be updated.])\nBRLTTY_DEFINE_EXPANDED([BRLAPI_ETCDIR], [\"${CONFIGURATION_DIRECTORY}\"],\n                       [Define this to be a string containing the path to the directory where the authorization key and driver-dependent key names are found.])\nBRLTTY_DEFINE_EXPANDED([BRLAPI_SOCKETPATH], [\"${api_socket_path}\"],\n\t\t       [Define this to be a string containing the path to the local sockets.])\nBRLTTY_SUBST_EXPANDED([api_socket_directory], [\"${api_socket_path}\"])\nprefix=\"${original_prefix}\"\nexec_prefix=\"${original_exec_prefix}\"\n\nAC_SUBST([install_drivers])\nBRLTTY_SUMMARY_END\n\nAC_CONFIG_COMMANDS([build-configure], [dnl\n   \"${srcdir}/mk4build\"\n])\n\n[brltty_make_files=\"`echo \"${brltty_build_directories}\" | sed -e '\ns%\\([^ ][^ ]*\\)%\\1/Makefile:prologue.mk:\\1/Makefile.in%g\n'`\"]\n\nAC_OUTPUT([\n   config.mk\n   brltty.spec\n   config.sh\n   Documents/brltty.conf\n   Documents/brltty.1\n   Documents/BrlAPIref.doxy\n   Bindings/Lisp/brlapi.lisp\n   Bindings/Python/setup.py\n   Android/Application/res/values/configured.xml:Android/Application/res.strings.in\n   Autostart/Systemd/brltty@.service\n   ${brltty_make_files}\n])\n",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Programs/dynld_dlfcn.c": "/*\n * BRLTTY - A background process providing access to the console screen (when in\n *          text mode) for a blind person using a refreshable braille display.\n *\n * Copyright (C) 1995-2018 by The BRLTTY Developers.\n *\n * BRLTTY comes with ABSOLUTELY NO WARRANTY.\n *\n * This is free software, placed under the terms of the\n * GNU Lesser General Public License, as published by the Free Software\n * Foundation; either version 2.1 of the License, or (at your option) any\n * later version. Please see the file LICENSE-LGPL for details.\n *\n * Web Page: http://brltty.com/\n *\n * This software is maintained by Dave Mielke <dave@mielke.cc>.\n */\n\n#include \"prologue.h\"\n\n#include <dlfcn.h>\n\n#ifdef __MSDOS__\n#include <debug/syms.h>\n#include \"program.h\"\n#endif /* __MSDOS__ */\n\n#include \"log.h\"\n#include \"dynld.h\"\n\nstatic void\nclearError (void) {\n  dlerror();\n}\n\nstatic int\nlogError (void) {\n  const char *error = dlerror();\n  if (!error) return 1;\n\n  logMessage(LOG_ERR, \"%s\", error);\n  return 0;\n}\n\nstatic inline int\ngetSharedObjectLoadFlags (void) {\n  int flags = 0;\n\n#ifdef DL_LAZY\n  flags |= DL_LAZY;\n#else /* DL_LAZY */\n  flags |= RTLD_LAZY | RTLD_GLOBAL;\n#endif /* DL_LAZY */\n\n  return flags;\n}\n\nvoid *\nloadSharedObject (const char *path) {\n  void *object;\n\n  clearError();\n  object = dlopen(path, getSharedObjectLoadFlags());\n  if (!object) logError();\n  return object;\n}\n\nvoid \nunloadSharedObject (void *object) {\n  clearError();\n  if (dlclose(object)) logError();\n}\n\nint \nfindSharedSymbol (void *object, const char *symbol, void *pointerAddress) {\n  void **address = pointerAddress;\n\n  clearError(); /* clear any previous error condition */\n  *address = dlsym(object, symbol);\n  return logError();\n}\n\nconst char *\ngetSharedSymbolName (void *address, ptrdiff_t *offset) {\n#if defined(__MSDOS__)\n  {\n    static int symsInitialized = 0;\n\n    if (!symsInitialized) {\n      syms_init((char *)programPath);\n      symsInitialized = 1;\n    }\n  }\n\n  {\n    unsigned long delta;\n    char *name = syms_val2name((unsigned long)address, &delta);\n\n    if (name) {\n      if (offset) *offset = delta;\n      return name;\n    }\n  }\n\n#elif defined(__linux__) || defined(__ANDROID__)\n  Dl_info info;\n\n  if (dladdr(address, &info)) {\n    if (offset) *offset = address - info.dli_saddr;\n    return info.dli_sname;\n  }\n\n#endif /* get symbol name */\n\n  return NULL;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Programs/brltty_jni.c": "/*\n * BRLTTY - A background process providing access to the console screen (when in\n *          text mode) for a blind person using a refreshable braille display.\n *\n * Copyright (C) 1995-2018 by The BRLTTY Developers.\n *\n * BRLTTY comes with ABSOLUTELY NO WARRANTY.\n *\n * This is free software, placed under the terms of the\n * GNU Lesser General Public License, as published by the Free Software\n * Foundation; either version 2.1 of the License, or (at your option) any\n * later version. Please see the file LICENSE-LGPL for details.\n *\n * Web Page: http://brltty.com/\n *\n * This software is maintained by Dave Mielke <dave@mielke.cc>.\n */\n\n#include \"prologue.h\"\n\n#include <jni.h>\n#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <errno.h>\n#include <dlfcn.h>\n\n#include \"embed.h\"\n#include \"system_java.h\"\n\n#if defined(__ANDROID__)\n#include <android/log.h>\n#define LOG(...) __android_log_print(ANDROID_LOG_DEBUG, PACKAGE_TARNAME, __VA_ARGS__)\n\n#else /* LOG() */\n#warning logging not supported\n#define LOG(...)\n#endif /* LOG() */\n\nSYMBOL_POINTER(brlttyConstruct);\nSYMBOL_POINTER(setJavaClassLoader);\nSYMBOL_POINTER(brlttyDestruct);\n\nSYMBOL_POINTER(brlttyEnableInterrupt);\nSYMBOL_POINTER(brlttyDisableInterrupt);\n\nSYMBOL_POINTER(brlttyInterrupt);\nSYMBOL_POINTER(brlttyWait);\n\nSYMBOL_POINTER(changeLogLevel);\nSYMBOL_POINTER(changeLogCategories);\n\nSYMBOL_POINTER(changeTextTable);\nSYMBOL_POINTER(changeAttributesTable);\nSYMBOL_POINTER(changeContractionTable);\nSYMBOL_POINTER(changeKeyboardTable);\n\nSYMBOL_POINTER(restartBrailleDriver);\nSYMBOL_POINTER(changeBrailleDriver);\nSYMBOL_POINTER(changeBrailleParameters);\nSYMBOL_POINTER(changeBrailleDevice);\n\nSYMBOL_POINTER(restartSpeechDriver);\nSYMBOL_POINTER(changeSpeechDriver);\nSYMBOL_POINTER(changeSpeechParameters);\n\nSYMBOL_POINTER(restartScreenDriver);\nSYMBOL_POINTER(changeScreenDriver);\nSYMBOL_POINTER(changeScreenParameters);\n\ntypedef struct {\n  const char *name;\n  void *pointer;\n} SymbolEntry;\n\n#define BEGIN_SYMBOL_TABLE static const SymbolEntry symbolTable[] = {\n#define END_SYMBOL_TABLE {.name=NULL} };\n#define SYMBOL_ENTRY(symbol) {.name=#symbol, .pointer=&symbol##_p}\n\nBEGIN_SYMBOL_TABLE\n  SYMBOL_ENTRY(brlttyConstruct),\n  SYMBOL_ENTRY(setJavaClassLoader),\n  SYMBOL_ENTRY(brlttyDestruct),\n\n  SYMBOL_ENTRY(brlttyEnableInterrupt),\n  SYMBOL_ENTRY(brlttyDisableInterrupt),\n\n  SYMBOL_ENTRY(brlttyInterrupt),\n  SYMBOL_ENTRY(brlttyWait),\n\n  SYMBOL_ENTRY(changeLogLevel),\n  SYMBOL_ENTRY(changeLogCategories),\n\n  SYMBOL_ENTRY(changeTextTable),\n  SYMBOL_ENTRY(changeAttributesTable),\n  SYMBOL_ENTRY(changeContractionTable),\n  SYMBOL_ENTRY(changeKeyboardTable),\n\n  SYMBOL_ENTRY(restartBrailleDriver),\n  SYMBOL_ENTRY(changeBrailleDriver),\n  SYMBOL_ENTRY(changeBrailleParameters),\n  SYMBOL_ENTRY(changeBrailleDevice),\n\n  SYMBOL_ENTRY(restartSpeechDriver),\n  SYMBOL_ENTRY(changeSpeechDriver),\n  SYMBOL_ENTRY(changeSpeechParameters),\n\n  SYMBOL_ENTRY(restartScreenDriver),\n  SYMBOL_ENTRY(changeScreenDriver),\n  SYMBOL_ENTRY(changeScreenParameters),\nEND_SYMBOL_TABLE\n\nstatic void *coreHandle = NULL;\n\nstatic jobject jArgumentArray = NULL;\nstatic const char **cArgumentArray = NULL;\nstatic int cArgumentCount;\n\nstatic void reportProblem (\n  JNIEnv *env, const char *throwable,\n  const char *format, ...\n) PRINTF(3, 4);\n\nstatic void\nreportProblem (\n  JNIEnv *env, const char *throwable,\n  const char *format, ...\n) {\n  char message[0X100];\n\n  {\n    va_list arguments;\n\n    va_start(arguments, format);\n    vsnprintf(message, sizeof(message), format, arguments);\n    va_end(arguments);\n  }\n\n  if (0) {\n    FILE *stream = stderr;\n\n    fprintf(stream, \"%s\\n\", message);\n    fflush(stream);\n  }\n\n  {\n    jclass object = (*env)->FindClass(env, throwable);\n\n    if (object) {\n      (*env)->ThrowNew(env, object, message);\n      (*env)->DeleteLocalRef(env, object);\n    }\n  }\n}\n\nstatic void\nreportOutOfMemory (JNIEnv *env, const char *description) {\n  reportProblem(env, \"java/lang/OutOfMemoryError\", \"cannot allocate %s\", description);\n}\n\nstatic int\nprepareProgramArguments (JNIEnv *env, jstring arguments) {\n  jsize count = (*env)->GetArrayLength(env, arguments);\n\n  if ((jArgumentArray = (*env)->NewGlobalRef(env, arguments))) {\n    if ((cArgumentArray = malloc((count + 2) * sizeof(*cArgumentArray)))) {\n      cArgumentArray[0] = PACKAGE_TARNAME;\n      cArgumentArray[count+1] = NULL;\n\n      {\n        unsigned int i;\n\n        for (i=1; i<=count; i+=1) cArgumentArray[i] = NULL;\n\n        for (i=1; i<=count; i+=1) {\n          jstring jArgument = (*env)->GetObjectArrayElement(env, arguments, i-1);\n          jboolean isCopy;\n          const char *cArgument = (*env)->GetStringUTFChars(env, jArgument, &isCopy);\n\n          (*env)->DeleteLocalRef(env, jArgument);\n          jArgument = NULL;\n\n          if (!cArgument) {\n            reportOutOfMemory(env, \"C argument string\");\n            break;\n          }\n\n          cArgumentArray[i] = cArgument;\n        }\n\n        if (i > count) {\n          cArgumentCount = count + 1;\n          return 1;\n        }\n      }\n    } else {\n      reportOutOfMemory(env, \"C argument array\");\n    }\n  } else {\n    reportOutOfMemory(env, \"Java arguments array global reference\");\n  }\n\n  return 0;\n}\n\nstatic int\nloadCoreLibrary (JNIEnv *env) {\n  if (coreHandle) return 1;\n\n  if ((coreHandle = dlopen(\"libbrltty_core.so\", RTLD_NOW | RTLD_GLOBAL))) {\n    int allFound = 1;\n    const SymbolEntry *symbol = symbolTable;\n\n    while (symbol->name) {\n      const void **pointer = symbol->pointer;\n\n      if ((*pointer = dlsym(coreHandle, symbol->name))) {\n        LOG(\"core symbol: %s -> %p\", symbol->name, *pointer);\n      } else {\n        LOG(\"core symbol not found: %s\", symbol->name);\n        allFound = 0;\n      }\n\n      symbol += 1;\n    }\n\n    if (allFound) return 1;\n  }\n\n  reportProblem(env, \"java/lang/UnsatisfiedLinkError\", \"%s\", dlerror());\n  return 0;\n}\n\nJAVA_METHOD (\n  org_a11y_brltty_core_CoreWrapper, coreConstruct, jint,\n  jobjectArray arguments, jobject classLoader\n) {\n  if (prepareProgramArguments(env, arguments)) {\n    if (loadCoreLibrary(env)) {\n      setJavaClassLoader_p(env, classLoader);\n      return brlttyConstruct_p(cArgumentCount, (char **)cArgumentArray);\n    }\n  }\n\n  return PROG_EXIT_FATAL;\n}\n\nJAVA_METHOD (\n  org_a11y_brltty_core_CoreWrapper, coreDestruct, jboolean\n) {\n  jboolean result = brlttyDestruct_p()? JNI_TRUE: JNI_FALSE;\n\n/*\n  {\n    const SymbolEntry *symbol = symbolTable;\n\n    while (symbol->name) {\n      const void **pointer = symbol->pointer;\n      *pointer = NULL;\n      symbol += 1;\n    }\n  }\n\n  if (coreHandle) {\n    dlclose(coreHandle);\n    coreHandle = NULL;\n  }\n*/\n\n  if (jArgumentArray) {\n    if (cArgumentArray) {\n      unsigned int i = 0;\n\n      while (cArgumentArray[++i]) {\n        jstring jArgument = (*env)->GetObjectArrayElement(env, jArgumentArray, i-1);\n        (*env)->ReleaseStringUTFChars(env, jArgument, cArgumentArray[i]);\n        (*env)->DeleteLocalRef(env, jArgument);\n        jArgument = NULL;\n      }\n\n      free(cArgumentArray);\n      cArgumentArray = NULL;\n    }\n\n    (*env)->DeleteGlobalRef(env, jArgumentArray);\n    jArgumentArray = NULL;\n  }\n\n  return result;\n}\n\nJAVA_METHOD (\n  org_a11y_brltty_core_CoreWrapper, coreEnableInterrupt, jboolean\n) {\n  return brlttyEnableInterrupt_p()? JNI_TRUE: JNI_FALSE;\n}\n\nJAVA_METHOD (\n  org_a11y_brltty_core_CoreWrapper, coreDisableInterrupt, jboolean\n) {\n  return brlttyDisableInterrupt_p()? JNI_TRUE: JNI_FALSE;\n}\n\nJAVA_METHOD (\n  org_a11y_brltty_core_CoreWrapper, coreInterrupt, jboolean,\n  jboolean stop\n) {\n  return brlttyInterrupt_p((stop != JNI_FALSE)? WAIT_STOP: WAIT_CONTINUE)? JNI_TRUE: JNI_FALSE;\n}\n\nJAVA_METHOD (\n  org_a11y_brltty_core_CoreWrapper, coreWait, jboolean,\n  jint duration\n) {\n  return (brlttyWait_p(duration) != WAIT_STOP)? JNI_TRUE: JNI_FALSE;\n}\n\nstatic jboolean\nchangeStringValue (JNIEnv *env, int (*change) (const char *cValue), jstring jValue) {\n  jboolean result = JNI_FALSE;\n  const char *cValue = (*env)->GetStringUTFChars(env, jValue, NULL);\n\n  if (cValue) {\n    if (change(cValue)) result = JNI_TRUE;\n    (*env)->ReleaseStringUTFChars(env, jValue, cValue);\n  } else {\n    reportOutOfMemory(env, \"C new value string\");\n  }\n\n  return result;\n}\n\nJAVA_METHOD (\n  org_a11y_brltty_core_CoreWrapper, changeLogLevel, jboolean,\n  jstring level\n) {\n  return changeStringValue(env, changeLogLevel_p, level);\n}\n\nJAVA_METHOD (\n  org_a11y_brltty_core_CoreWrapper, changeLogCategories, jboolean,\n  jstring categories\n) {\n  return changeStringValue(env, changeLogCategories_p, categories);\n}\n\nJAVA_METHOD (\n  org_a11y_brltty_core_CoreWrapper, changeTextTable, jboolean,\n  jstring name\n) {\n  return changeStringValue(env, changeTextTable_p, name);\n}\n\nJAVA_METHOD (\n  org_a11y_brltty_core_CoreWrapper, changeAttributesTable, jboolean,\n  jstring name\n) {\n  return changeStringValue(env, changeAttributesTable_p, name);\n}\n\nJAVA_METHOD (\n  org_a11y_brltty_core_CoreWrapper, changeContractionTable, jboolean,\n  jstring name\n) {\n  return changeStringValue(env, changeContractionTable_p, name);\n}\n\nJAVA_METHOD (\n  org_a11y_brltty_core_CoreWrapper, changeKeyboardTable, jboolean,\n  jstring name\n) {\n  return changeStringValue(env, changeKeyboardTable_p, name);\n}\n\nJAVA_METHOD (\n  org_a11y_brltty_core_CoreWrapper, restartBrailleDriver, jboolean\n) {\n  restartBrailleDriver_p();\n  return JNI_TRUE;\n}\n\nJAVA_METHOD (\n  org_a11y_brltty_core_CoreWrapper, changeBrailleDriver, jboolean,\n  jstring driver\n) {\n  return changeStringValue(env, changeBrailleDriver_p, driver);\n}\n\nJAVA_METHOD (\n  org_a11y_brltty_core_CoreWrapper, changeBrailleParameters, jboolean,\n  jstring parameters\n) {\n  return changeStringValue(env, changeBrailleParameters_p, parameters);\n}\n\nJAVA_METHOD (\n  org_a11y_brltty_core_CoreWrapper, changeBrailleDevice, jboolean,\n  jstring device\n) {\n  return changeStringValue(env, changeBrailleDevice_p, device);\n}\n\nJAVA_METHOD (\n  org_a11y_brltty_core_CoreWrapper, restartSpeechDriver, jboolean\n) {\n  restartSpeechDriver_p();\n  return JNI_TRUE;\n}\n\nJAVA_METHOD (\n  org_a11y_brltty_core_CoreWrapper, changeSpeechDriver, jboolean,\n  jstring driver\n) {\n  return changeStringValue(env, changeSpeechDriver_p, driver);\n}\n\nJAVA_METHOD (\n  org_a11y_brltty_core_CoreWrapper, changeSpeechParameters, jboolean,\n  jstring parameters\n) {\n  return changeStringValue(env, changeSpeechParameters_p, parameters);\n}\n\nJAVA_METHOD (\n  org_a11y_brltty_core_CoreWrapper, restartScreenDriver, jboolean\n) {\n  restartScreenDriver_p();\n  return JNI_TRUE;\n}\n\nJAVA_METHOD (\n  org_a11y_brltty_core_CoreWrapper, changeScreenDriver, jboolean,\n  jstring driver\n) {\n  return changeStringValue(env, changeScreenDriver_p, driver);\n}\n\nJAVA_METHOD (\n  org_a11y_brltty_core_CoreWrapper, changeScreenParameters, jboolean,\n  jstring parameters\n) {\n  return changeStringValue(env, changeScreenParameters_p, parameters);\n}\n\nJAVA_METHOD (\n  org_a11y_brltty_core_CoreWrapper, setEnvironmentVariable, jboolean,\n  jstring jName, jstring jValue\n) {\n  jboolean isCopy;\n  const char *cName = (*env)->GetStringUTFChars(env, jName, &isCopy);\n  const char *cValue = (*env)->GetStringUTFChars(env, jValue, &isCopy);\n\n  int cResult = setenv(cName, cValue, 1) != -1;\n  jboolean jResult = cResult? JNI_TRUE: JNI_FALSE;\n\n  if (cResult) {\n    LOG(\"environment variable set: %s: %s\", cName, cValue);\n  } else {\n    LOG(\"environment variable not set: %s: %s\", cName, strerror(errno));\n  }\n\n  (*env)->ReleaseStringUTFChars(env, jName, cName);\n  (*env)->ReleaseStringUTFChars(env, jValue, cValue);\n  return jResult;\n}\n\nJNIEXPORT jint\nJNI_OnLoad (JavaVM *vm, void *reserved) {\n  JNIEnv *env;\n\n  if ((*vm)->GetEnv(vm, (void **)&env, JAVA_JNI_VERSION) == JNI_OK) {\n    loadCoreLibrary(env);\n  }\n\n  return JAVA_JNI_VERSION;\n}\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Windows/nsistrings.txt",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Windows/brlttycnf.ahk",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Windows/msvcr90.dll",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Drivers/Speech/ExternalSpeech/speech.c",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Drivers/Braille/BrailleLite/braille.c",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Drivers/Braille/Libbraille/Makefile.in",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Drivers/Braille/XWindow/UBraille.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Drivers/Braille/Papenmeier/braille.c",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Drivers/Braille/TSI/braille.h",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Drivers/Braille/TSI/braille.c",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Drivers/Braille/Voyager/braille.c",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Drivers/Braille/VideoBraille/README.it",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/DOS/cwsdpmi.exe",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Android/Application/res/drawable-ldpi/ic_launcher.png",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Android/Application/res/drawable-mdpi/ic_launcher.png",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Android/Application/res/drawable-hdpi/ic_launcher.png",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Android/Core/res/drawable-ldpi/ic_launcher.png",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Android/Core/res/drawable-mdpi/ic_launcher.png",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Android/Core/res/drawable-hdpi/ic_launcher.png",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Tables/Input/vs/all.txt",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Tables/Input/lt/all.txt",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Documents/Manual-BRLTTY/Portuguese/BRLTTY.doc",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Documents/Manual-BRLTTY/Portuguese/BRLTTY.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Documents/Manual-BRLTTY/Portuguese/BRLTTY.htm",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Documents/Manual-BRLTTY/French/Translation.sgml",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Documents/Manual-BRLTTY/French/Compilation.sgml",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Documents/Manual-BRLTTY/French/Displays.sgml",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Documents/Manual-BRLTTY/French/contraction-tables.sgml",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Documents/Manual-BRLTTY/French/Screen.sgml",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Documents/Manual-BRLTTY/French/text-tables.sgml",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Documents/Manual-BRLTTY/French/Dots.sgml",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Documents/Manual-BRLTTY/French/Utilisation.sgml",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Documents/Manual-BRLTTY/French/fr-2007.sgml",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Documents/Manual-BRLTTY/French/nabcc.sgml",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Documents/Manual-BRLTTY/French/Advanced.sgml",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Documents/Manual-BRLTTY/French/Midi.sgml",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Documents/Manual-BRLTTY/French/Synthesizers.sgml",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Documents/Manual-BRLTTY/French/Introduction.sgml",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Documents/Manual-BRLTTY/French/Syntax.sgml",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Documents/Manual-BRLTTY/French/Features.sgml",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Documents/Manual-BRLTTY/French/BRLTTY.sgml",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Documents/Manual-BRLTTY/English/BRLTTY.sgml",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Documents/Manual-BrlAPI/English/BrlAPI.sgml",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Bootdisks/README.RedHat.fd",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Bindings/OCaml/bindings.m4"
    ],
    "total_files": 1357
}