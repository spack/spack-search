{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-openbabel-master-tre2w5kv7kz426m53go3f76lqwcflhev/spack-src/CMakeLists.txt": "# Please ensure that any changes remain compliant with 3.1.\nif(NOT EMBED_OPENBABEL)\n  cmake_minimum_required(VERSION 3.1)\nendif()\n\nproject(openbabel)\nset(CMAKE_MODULE_PATH ${openbabel_SOURCE_DIR}/cmake/modules)\n\nset (CMAKE_CXX_STANDARD 11)\n\nif(COMMAND cmake_policy)\n  cmake_policy(SET CMP0003 NEW)\n  if(POLICY CMP0042)\n    cmake_policy(SET CMP0042 OLD)\n  endif()\nendif()\n\ninclude (CheckCXXCompilerFlag)\n\n#include (MacroEnsureVersion)\n\n# Version numbering - should be bumped for each release\n# Note that for \"beta\" releases, we should start at x.90.0 -- we've\n# had too many 1.100.1 releases. :-)\nset(BABEL_MAJ_VER   3)\nset(BABEL_MIN_VER   1)\nset(BABEL_PATCH_VER 1)\n\n# This should be phased out in preference for just using the target name\nset(BABEL_LIBRARY openbabel)\n\n# This would be better handled with external projects...\nif(EMBED_OPENBABEL)\n  set(BABEL_VERSION  \"${BABEL_MAJ_VER}.${BABEL_MIN_VER}.${BABEL_PATCH_VER}\" PARENT_SCOPE)\nelse()\n  set(BABEL_VERSION  \"${BABEL_MAJ_VER}.${BABEL_MIN_VER}.${BABEL_PATCH_VER}\")\nendif()\nset(BABEL_DATADIR  \"${CMAKE_INSTALL_PREFIX}/share/openbabel\")\n\noption(ENABLE_VERSIONED_FORMATS\n  \"Enable versioning of the format plugin directory\" ON)\n\n# Set up our path handling, inspired by the path handling used in KDE\nset(BIN_INSTALL_DIR      \"bin\"\n  CACHE PATH \"Install dir for binaries\")\nset(LIB_SUFFIX \"\" CACHE STRING \"Suffix of the directory name, e.g. 64 for lib64\")\nif(UNIX)\n  set(LIB_INSTALL_DIR    \"lib${LIB_SUFFIX}\"\n    CACHE PATH \"Install dir for libraries\")\n  if(ENABLE_VERSIONED_FORMATS)\n    set(OB_PLUGIN_INSTALL_DIR \"${LIB_INSTALL_DIR}/openbabel/${BABEL_VERSION}\"\n      CACHE PATH \"Install dir for plugins\")\n  else()\n    set(OB_PLUGIN_INSTALL_DIR \"${LIB_INSTALL_DIR}/openbabel\"\n      CACHE PATH \"Install dir for plugins\")\n  endif()\nelse() # Windows - bin dir = lib dir to load libraries\n  set(LIB_INSTALL_DIR \"${BIN_INSTALL_DIR}\"\n      CACHE PATH \"Install dir for libraries\")\n  if(MSVC)\n    set(OB_PLUGIN_INSTALL_DIR \"${BIN_INSTALL_DIR}\"\n      CACHE PATH \"Install dir for plugins\")\n  else()\n    if(ENABLE_VERSIONED_FORMATS)\n      set(OB_PLUGIN_INSTALL_DIR \"lib${LIB_SUFFIX}/openbabel/${BABEL_VERSION}\"\n        CACHE PATH \"Install dir for plugins\")\n    else(ENABLE_VERSIONED_FORMATS)\n      set(OB_PLUGIN_INSTALL_DIR \"lib${LIB_SUFFIX}/openbabel\"\n        CACHE PATH \"Install dir for plugins\")\n    endif(ENABLE_VERSIONED_FORMATS)\n  endif()\nendif()\nif(NOT DEFINED OB_INCLUDE_DIRS)\n  set(OB_INCLUDE_DIRS \"include/openbabel${BABEL_MAJ_VER}\")\nendif()\nset(OB_EXPORTS_FILE \"${openbabel_BINARY_DIR}/OpenBabel3_EXPORTS.cmake\")\n# Ensure a fresh file is made each time CMake is run\nfile(REMOVE \"${OB_EXPORTS_FILE}\")\n\n# Place binaries and libraries in the root of the build directory\nif(NOT CMAKE_RUNTIME_OUTPUT_DIRECTORY)\n  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/bin\"\n    CACHE STRING \"Binary build output directory\")\nendif()\nif(NOT CMAKE_LIBRARY_OUTPUT_DIRECTORY)\n  if(UNIX)\n    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/lib${LIB_SUFFIX}\"\n      CACHE STRING \"Library build output directory\")\n  else() # This is preferable on WIndows for example - bin = lib directory.\n    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/bin\"\n      CACHE STRING \"Library build output directory\")\n  endif()\nendif()\n\nmark_as_advanced(CMAKE_LIBRARY_OUTPUT_DIRECTORY\n  CMAKE_RUNTIME_OUTPUT_DIRECTORY)\n\n#GLIBC_2.4\noption(GLIBC_24_COMPATIBLE \"Build project compatible with GLIBC 2.4\" OFF)\nif(GLIBC_24_COMPATIBLE AND UNIX)\n  set(WRAP_MEMCPY_SRC memcpy.c)\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wl,--wrap=memcpy\")\nendif()\n\noption(BUILD_SHARED \"enable shared build support\" ON)\noption(BUILD_MIXED \"enable linux relocatable binaries support\" OFF)\noption(WITH_STATIC_INCHI \"enable static inchi and related plugins\" OFF)\noption(WITH_STATIC_LIBXML \"enable static libxml and xml file format plugins\" OFF)\n# Static building\nif(BUILD_SHARED)\n  set(BUILD_TYPE SHARED)\n  set(PLUGIN_TYPE MODULE)\n  add_definitions(-DUSING_DYNAMIC_LIBS)\n  set(CMAKE_POSITION_INDEPENDENT_CODE ON)\nelse()\n  set(BUILD_TYPE STATIC)\n  set(PLUGIN_TYPE STATIC)\n\n  if(WITH_STATIC_INCHI)\n    add_definitions(-DHAVE_STATIC_INCHI)\n  endif()\n  if(WITH_STATIC_LIBXML)\n    add_definitions(-DHAVE_STATIC_LIBXML)\n  endif()\n\n  if(MSVC)\n    # set cl flags for static compiling\n    set(CMAKE_CXX_FLAGS_DEBUG \"/MTd\")\n    set(CMAKE_C_FLAGS_DEBUG \"/MTd\")\n    set(CMAKE_EXE_LINKER_FLAGS_DEBUG \"/INCREMENTAL:NO /NODEFAULTLIB:MSVCRT\")\n    set(CMAKE_CXX_FLAGS_RELEASE\t\"/MT /O2 /Ob2 /D NDEBUG\")\n    set(CMAKE_C_FLAGS_RELEASE\t\"/MT /O2 /Ob2 /D NDEBUG\")\n    set(CMAKE_EXE_LINKER_FLAGS_RELEASE \"/INCREMENTAL:NO /NODEFAULTLIB:MSVCRT\")\n    # note: static libraries are specified when running cmake\n  else()\n    set(CMAKE_FIND_LIBRARY_SUFFIXES \".a\")\n  endif()\nendif()\n\n# Should we attempt to use the system inchi library?\noption(WITH_INCHI   \"Build inchi support\" ON)\noption(OPENBABEL_USE_SYSTEM_INCHI\n  \"Use the system inchi library.\" OFF)\nif(OPENBABEL_USE_SYSTEM_INCHI)\n  find_package(Inchi REQUIRED)\n  if (NOT INCHI_FOUND)\n    message(FATAL_ERROR \"Inchi library not found.\")\n  endif()\nelse()\n  message(STATUS \"Using included inchi library.\")\n  set(INCHI_LIBRARY inchi)\nendif()\n\nif(WIN32)\n  # FIXME: not used on windows... - inconsistency\n  set(MODULE_EXTENSION \".obf\")\nelse()\n  set(MODULE_EXTENSION \".so\")\nendif()\n\n# configure checks\nfind_package(LibXml2)\nif(NOT LIBXML2_FOUND)\n  message(WARNING \"libxml2 not found - disabling CML support!\")\nendif()\n\nfind_package(ZLIB)\nif(ZLIB_FOUND)\n  add_definitions(-DHAVE_LIBZ)\n  include_directories(${ZLIB_INCLUDE_DIR})\n  # Longstanding unsolved problem with compression under Windows\n  if(WIN32)\n    add_definitions(-DDISABLE_WRITE_COMPRESSION)\n  endif()\nendif()\n\n# wxWidgets instructions based on http://wiki.wxwidgets.org/CMake\n#find_package(wxWidgets COMPONENTS base core REQUIRED)\nfind_package(wxWidgets COMPONENTS base core adv)\nif(wxWidgets_FOUND)\n  include(${wxWidgets_USE_FILE})\n  add_definitions(-DHAVE_WXWIDGETS)\n  include_directories(${wxWidgets_INCLUDE_DIRS})\nendif()\n\nif(MSVC)\n  # Ensure that CharacterSet=\"0\" in the project files\n  add_definitions(-D_SBCS) # Single-Byte Character Set (requires CMake 2.8.8)\nendif()\n\nif(MSVC)\n  option(OB_USE_PREBUILT_BINARIES\n    \"Should Windows Open Babel builds use prebuilt binaries?\" ON)\n\t# dlhandler_win32.cpp assumes multibyte character set\n\tremove_definitions(-DUNICODE -D_UNICODE)\n  include_directories(${openbabel_SOURCE_DIR}/windows-msvc/include)\nendif()\n\nif(MSVC AND OB_USE_PREBUILT_BINARIES)\n  include_directories(${XDR_INCLUDE_DIR})\n  # The following line is required for check_include_file(rpc/xdr.h ...) below\n  set(CMAKE_REQUIRED_INCLUDES ${XDR_INCLUDE_DIR})\n  # Force OPENBABEL_USE_SYSTEM_INCHI to ON, as this should be using the binary\n  set(OPENBABEL_USE_SYSTEM_INCHI ON CACHE BOOL\n    \"Forced to ON for prebuilt binaries\" FORCE)\nendif()\n\ninclude(CheckIncludeFile)\ninclude(CheckIncludeFileCXX)\ninclude(CheckSymbolExists)\ninclude(CheckLibraryExists)\ninclude(CheckTypeSize)\ninclude(CheckCSourceCompiles)\n\ncheck_include_file(conio.h      HAVE_CONIO_H)\ncheck_include_file(sys/time.h   HAVE_SYS_TIME_H)\ncheck_include_file(time.h       HAVE_TIME_H)\ncheck_include_file(strings.h    HAVE_STRINGS_H)\ncheck_include_file(rpc/xdr.h    HAVE_RPC_XDR_H)\ncheck_include_file(regex.h      HAVE_REGEX_H)\ncheck_include_file_cxx(sstream  HAVE_SSTREAM)\n\ncheck_symbol_exists(rint          \"math.h\"     HAVE_RINT)\ncheck_symbol_exists(snprintf      \"stdio.h\"    HAVE_SNPRINTF)\ncheck_symbol_exists(sranddev      \"stdlib.h\"   HAVE_SRANDDEV)\ncheck_symbol_exists(strcasecmp    \"string.h\"   HAVE_STRCASECMP)\ncheck_symbol_exists(strncasecmp   \"string.h\"   HAVE_STRNCASECMP)\n\n# BSDs don't link against libdl, but rather libc\ncheck_library_exists(dl dlopen \"\" HAVE_LIBDL)\n\nset(CMAKE_EXTRA_INCLUDE_FILES time.h)\ncheck_type_size(clock_t CLOCK_T)\n\n# Cygwin may be missing an XDR function: https://www.gnu.org/software/gnulib/manual/html_node/xdrstdio_005fcreate.html\nif(CYGWIN)\n  set(HAVE_RPC_XDR_H FALSE)\n  message(STATUS \"Disabling rpc/xdr.h for Cygwin\")\nendif()\n\n# Get the GCC version - from KDE4 cmake files\nif(CMAKE_COMPILER_IS_GNUCXX)\n  if(NOT(${CMAKE_CXX_COMPILER_VERSION} VERSION_LESS 4.0.0))\n    set(GCC_IS_NEWER_THAN_4_0 TRUE)\n  else()\n    set(GCC_IS_NEWER_THAN_4_0 FALSE)\n  endif()\n  if(NOT(${CMAKE_CXX_COMPILER_VERSION} VERSION_LESS 4.1.0))\n    set(GCC_IS_NEWER_THAN_4_1 TRUE)\n  else()\n    set(GCC_IS_NEWER_THAN_4_1 FALSE)\n  endif()\n  if(NOT(${CMAKE_CXX_COMPILER_VERSION} VERSION_LESS 4.2.0))\n    set(GCC_IS_NEWER_THAN_4_2 TRUE)\n  else()\n    set(GCC_IS_NEWER_THAN_4_2 FALSE)\n  endif()\nendif()\n\nif(UNIX)\n  option(ENABLE_SYMBOL_VISIBILITY\n    \"Enable support for compiler symbol visibility. WARNING: Some issues reported\"\n    OFF)\nendif()\n\nif(NOT MSVC)\n  SET(CMAKE_REQUIRED_FLAGS -Werror)\n  check_c_source_compiles(\"\n   #include <sys/types.h>\n   #include <dirent.h>\n    int main(){\n     extern int matchFiles (struct dirent *entry_p);\n     struct dirent **entries_pp;\n     int count = scandir (\\\"./\\\", &entries_pp, matchFiles, 0);\n     return count;\n    }\n   \" SCANDIR_NEEDS_CONST)\n\n  set(OB_MODULE_PATH \"${CMAKE_INSTALL_PREFIX}/${OB_PLUGIN_INSTALL_DIR}\")\n\n  # Add some visibility support when using GCC\n  # note: Altough MinGW g++ 4.4 passes this test, visibility can't be used\n  if(CMAKE_COMPILER_IS_GNUCXX AND NOT APPLE)\n    if(CMAKE_SYSTEM_NAME MATCHES Linux)\n      set (CMAKE_SHARED_LINKER_FLAGS \"-Wl,--fatal-warnings -Wl,--no-undefined -lc ${CMAKE_SHARED_LINKER_FLAGS}\")\n      set (CMAKE_SHARED_LINKER_FLAGS \"-Wl,--enable-new-dtags ${CMAKE_SHARED_LINKER_FLAGS}\")\n      set (CMAKE_MODULE_LINKER_FLAGS \"-Wl,--fatal-warnings -Wl,--no-undefined -lc ${CMAKE_SHARED_LINKER_FLAGS}\")\n      set (CMAKE_MODULE_LINKER_FLAGS \"-Wl,--enable-new-dtags ${CMAKE_SHARED_LINKER_FLAGS}\")\n      if(BUILD_SHARED)\n        set (CMAKE_EXE_LINKER_FLAGS \"-Wl,--fatal-warnings -Wl,--no-undefined -lc ${CMAKE_SHARED_LINKER_FLAGS}\")\n        set (CMAKE_EXE_LINKER_FLAGS \"-Wl,--enable-new-dtags ${CMAKE_EXE_LINKER_FLAGS}\")\n      endif()\n    endif ()\n    # Now check if we can use visibility to selectively export symbols\n    check_cxx_compiler_flag(-fvisibility=hidden HAVE_GCC_VISIBILITY)\n    set(HAVE_GCC_VISIBILITY ${HAVE_GCC_VISIBILITY} CACHE BOOL \"GCC support for hidden visibility\")\n    set(_GCC_COMPILED_WITH_BAD_ALLOCATOR FALSE)\n    if(GCC_IS_NEWER_THAN_4_1)\n      exec_program(${CMAKE_C_COMPILER} ARGS -v OUTPUT_VARIABLE _gcc_alloc_info)\n      string(REGEX MATCH \"(--enable-libstdcxx-allocator=mt)\" _GCC_COMPILED_WITH_BAD_ALLOCATOR \"${_gcc_alloc_info}\")\n    endif()\n    if(HAVE_GCC_VISIBILITY AND GCC_IS_NEWER_THAN_4_2 AND ENABLE_SYMBOL_VISIBILITY\n       AND NOT _GCC_COMPILED_WITH_BAD_ALLOCATOR)\n      # We have all the parts necessary - use visibility support\n      add_definitions(-DHAVE_GCC_VISIBILITY)\n      set (CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fvisibility=hidden\")\n      set (CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fvisibility-inlines-hidden\")\n    endif()\n  endif()\nendif()\n\n# To avoid warnings when linking the plugins and exes\nif(MINGW)\n  set (CMAKE_MODULE_LINKER_FLAGS \"-Wl,--enable-auto-import ${CMAKE_MODULE_LINKER_FLAGS}\")\n  set (CMAKE_EXE_LINKER_FLAGS \"-Wl,--enable-auto-import ${CMAKE_EXE_LINKER_FLAGS}\")\nendif()\n\nmessage(STATUS \"Checking available shared pointer...\")\ninclude(CheckCXXSourceCompiles)\ncheck_cxx_source_compiles(\"#include <memory>\n                           int main(){ std::shared_ptr<int> p; return 0; }\"\n                           HAVE_STD_SHARED_PTR)\ncheck_cxx_source_compiles(\"#include <memory>\n                           int main(){ std::tr1::shared_ptr<int> p; return 0; }\"\n                           HAVE_STD_TR1_SHARED_PTR)\ncheck_cxx_source_compiles(\"#include <tr1/memory>\n                           int main(){ std::tr1::shared_ptr<int> p; return 0; }\"\n                           HAVE_STD_TR1_SHARED_PTR_IN_TR1_HEADER)\nif(HAVE_STD_SHARED_PTR)\n  set(OB_SHARED_PTR_IMPLEMENTATION \"std::shared_ptr\")\n  set(OB_SHARED_PTR_HEADER \"memory\")\n  set(SHARED_POINTER true)\n  add_definitions(-DHAVE_SHARED_POINTER)\nelseif(HAVE_STD_TR1_SHARED_PTR)\n  set(OB_SHARED_PTR_IMPLEMENTATION \"std::tr1::shared_ptr\")\n  set(OB_SHARED_PTR_HEADER \"memory\")\n  set(SHARED_POINTER true)\n  add_definitions(-DHAVE_SHARED_POINTER)\nelseif(HAVE_STD_TR1_SHARED_PTR_IN_TR1_HEADER)\n  set(OB_SHARED_PTR_IMPLEMENTATION \"std::tr1::shared_ptr\")\n  set(OB_SHARED_PTR_HEADER \"tr1/memory\")\n  set(SHARED_POINTER true)\n  add_definitions(-DHAVE_SHARED_POINTER)\nelse()\n  find_package(Boost)\n  if(Boost_FOUND)\n    include_directories(${Boost_INCLUDE_DIRS} ${Boost_INCLUDE_DIR})\n    add_definitions(-DUSE_BOOST -DHAVE_SHARED_POINTER)\n    set(SHARED_POINTER true)\n  else()\n    message(FATAL_ERROR \"Boost is required to compile OpenBabel with GCC 3.x\")\n  endif()\n  set(OB_SHARED_PTR_IMPLEMENTATION \"boost::shared_ptr\")\n  set(OB_SHARED_PTR_HEADER \"boost/memory\")\nendif()\nmessage(STATUS \"Use ${OB_SHARED_PTR_IMPLEMENTATION} in ${OB_SHARED_PTR_HEADER}\")\n\nfind_package(Boost COMPONENTS program_options iostreams)\n  if(Boost_FOUND)\n    include_directories(${Boost_INCLUDE_DIRS} ${Boost_INCLUDE_DIR})\n endif()\n\n# Intel C++ Compiler\n# Note: Windows version uses different options!\nif(${CMAKE_CXX_COMPILER_ID} MATCHES Intel AND UNIX)\n  add_definitions (-D_BSD_SOURCE)\n  # Set some linker flags\n  if(CMAKE_SYSTEM_NAME MATCHES Linux)\n    set(CMAKE_SHARED_LINKER_FLAGS\n      \"-lc ${CMAKE_SHARED_LINKER_FLAGS}\")\n    set(CMAKE_MODULE_LINKER_FLAGS\n      \"-lc ${CMAKE_MODULE_LINKER_FLAGS}\")\n    set (CMAKE_EXE_LINKER_FLAGS\n      \"-lc ${CMAKE_EXE_LINKER_FLAGS}\")\n  endif (CMAKE_SYSTEM_NAME MATCHES Linux)\n  check_cxx_compiler_flag(-fvisibility=hidden HAVE_INTEL_VISIBILITY)\n  set(HAVE_INTEL_VISIBILITY ${HAVE_INTEL_VISIBILITY} CACHE BOOL\n    \"Intel Compiler support for hidden visibility\")\n  if(HAVE_INTEL_VISIBILITY AND ENABLE_SYMBOL_VISIBILITY)\n    add_definitions(-DHAVE_GCC_VISIBILITY)\n#    set (CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fvisibility=hidden\")\n    check_cxx_compiler_flag(-fvisibility-inlines-hidden HAVE_INTEL_VISIBILITY_INLINES)\n    set(HAVE_INTEL_VISIBILITY_INLINES ${HAVE_INTEL_VISIBILITY_INLINES} CACHE BOOL\n      \"Intel Compiler support for -fvisibility-inlines-hidden\")\n    if(HAVE_INTEL_VISIBILITY_INLINES)\n      set (CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fvisibility-inlines-hidden\")\n    endif()\n  endif()\n\n  set(CMAKE_C_FLAGS_RELEASE \"-O3 -ipo1 -DNDEBUG -Wl,-s\")\n  set(CMAKE_CXX_FLAGS_RELEASE \"-O3 -ipo1 -DNDEBUG -Wl,-s\")\n\n  # define WITH_SSE2 to enable the SSE2 instruction set.\n  # Available on Pentium 4, Athlon 64, and newer CPUs.\n  # TODO: Remove this? Should be handled by -march=native and only enabled if OPTIMIZE_NATIVE is ON\n  if(CMAKE_SIZEOF_VOID_P EQUAL 8 OR WITH_SSE2)\n    message(STATUS \"Enabling the SSE2 instruction set\")\n    set (CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -msse2\")\n  endif(CMAKE_SIZEOF_VOID_P EQUAL 8 OR WITH_SSE2)\nendif(${CMAKE_CXX_COMPILER_ID} MATCHES Intel AND UNIX)\n\n#Find if OpenMP support is enabled\n\noption(ENABLE_OPENMP\n    \"Enable support for OpenMP compilation of forcefield code\"\n    OFF)\nif(ENABLE_OPENMP)\n  find_package(OpenMP)\n  if(OPENMP_FOUND)\n   set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}\")\n   set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}\")\n   set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}\")\n  endif()\nendif()\n\n# Some rpath handling for Linux and Mac\nif(UNIX AND BUILD_SHARED)\n  if(APPLE)\n    set(CMAKE_INSTALL_NAME_DIR ${CMAKE_INSTALL_PREFIX}/${LIB_INSTALL_DIR})\n  else()\n    set(CMAKE_INSTALL_RPATH \"${CMAKE_INSTALL_PREFIX}/${LIB_INSTALL_DIR}\")\n    set(CMAKE_SKIP_BUILD_RPATH FALSE)\n    set(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE)\n    set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)\n  endif()\nendif()\n\n# Three build types are available: Release, Debug, RelWithDebInfo.\n# We default to Release.\nif(NOT CMAKE_BUILD_TYPE)\n   set(CMAKE_BUILD_TYPE Release)\nendif()\n\n#define various build types\nif(CMAKE_COMPILER_IS_GNUCXX)\n  set (CMAKE_CXX_FLAGS_RELEASE        \"${CMAKE_CXX_FLAGS_RELEASE} -O3 -DNDEBUG\")\n  set (CMAKE_CXX_FLAGS_RELWITHDEBINFO \"${CMAKE_CXX_FLAGS_RELWITHDEBINFO} -O2 -g\")\n  set (CMAKE_CXX_FLAGS_DEBUG          \"${CMAKE_CXX_FLAGS_DEBUG} -D_GLIBCXX_DEBUG -g3 -fno-inline\")\nendif()\n\nfile(GLOB_RECURSE headers include/openbabel/*.h)\nconfigure_file(${openbabel_SOURCE_DIR}/src/config.h.cmake\n  ${openbabel_BINARY_DIR}/include/openbabel/babelconfig.h)\ninstall(FILES ${openbabel_BINARY_DIR}/include/openbabel/babelconfig.h\n  DESTINATION ${OB_INCLUDE_DIRS}/openbabel)\nif(NOT MSVC)\n  configure_file(${openbabel_SOURCE_DIR}/openbabel-3.pc.cmake\n    ${openbabel_BINARY_DIR}/openbabel-3.pc @ONLY)\n  install(FILES ${openbabel_BINARY_DIR}/openbabel-3.pc\n    DESTINATION ${LIB_INSTALL_DIR}/pkgconfig)\nendif()\n\ninclude_directories(${openbabel_BINARY_DIR}/include\n  ${openbabel_SOURCE_DIR}/data\n  ${openbabel_SOURCE_DIR}/include\n)\n\n#cjh\nfind_package(Eigen3)\nif(EIGEN3_FOUND)\n  add_definitions(-DHAVE_EIGEN -DHAVE_EIGEN3)\n  include_directories(${EIGEN3_INCLUDE_DIR})\nelse()\n  find_package(Eigen2) # find and setup Eigen2\n  if(EIGEN2_FOUND)\n    add_definitions (-DHAVE_EIGEN)\n    include_directories(${EIGEN2_INCLUDE_DIR})\n  endif()\nendif()\n#cjh\n\n\nfind_package(Boost COMPONENTS filesystem iostreams unit_test_framework)\nif(Boost_FOUND)\n  include_directories(${Boost_INCLUDE_DIRS} ${Boost_INCLUDE_DIR})\n  option(WITH_MAEPARSER \"Build Maestro support\" ON)\n  if(BUILD_SHARED)\n    option(WITH_COORDGEN \"Build Coordgen support\" ON)\n  else()\n    option(WITH_COORDGEN \"Build Coordgen support\" OFF)\n  endif()\nelse()\n  option(WITH_COORDGEN \"Build Coordgen support\" OFF)\nendif()\n\nif(WITH_MAEPARSER)\n\n    find_package(maeparser MODULE QUIET)\n\n    if (maeparser_FOUND)\n\n      message(STATUS \"Maestro formats will be supported. Using MaeParser libraries at ${maeparser_LIBRARIES}.\")\n\n    else()\n\n      set(MAEPARSER_VERSION \"v1.2.3\" CACHE STRING \"Maeparser fallback version to download\")\n\n      set(MAEPARSER_DIR \"${openbabel_SOURCE_DIR}/external/maeparser-${MAEPARSER_VERSION}\")\n\n      option(MAEPARSER_BUILD_SHARED_LIBS \"Build maeparser as a shared library\" ${BUILD_SHARED})\n\n      # Do not build the test, as it will be put into the bin dir, where it won't be found by the test runner.\n      set(MAEPARSER_BUILD_TESTS OFF CACHE BOOL \"Disable Maeparser tests\")\n\n      if(EXISTS \"${MAEPARSER_DIR}/maeparser/CMakeLists.txt\")\n\n        message(STATUS \"Building existing MaeParser '${MAEPARSER_VERSION}' source at ${MAEPARSER_DIR}.\")\n\n      else()\n\n          file(DOWNLOAD \"https://github.com/schrodinger/maeparser/archive/${MAEPARSER_VERSION}.tar.gz\"\n              \"${MAEPARSER_DIR}/maeparser-${MAEPARSER_VERSION}.tar.gz\")\n\n          execute_process(COMMAND ${CMAKE_COMMAND} -E tar zxf \"maeparser-${MAEPARSER_VERSION}.tar.gz\"\n              WORKING_DIRECTORY \"${MAEPARSER_DIR}\")\n\n          find_path(MAEPARSER_UNPACK_DIR \"CMakeLists.txt\" PATH \"${MAEPARSER_DIR}/*\" NO_DEFAULT_PATH)\n\n          if(MAEPARSER_UNPACK_DIR)\n            file(RENAME \"${MAEPARSER_UNPACK_DIR}\" \"${MAEPARSER_DIR}/maeparser\")\n            message(STATUS \"Downloaded MaeParser '${MAEPARSER_VERSION}' to ${MAEPARSER_DIR}.\")\n          else()\n            message(FATAL_ERROR \"Failed getting or unpacking Maeparser '${MAEPARSER_VERSION}'.\")\n          endif()\n\n      endif()\n\n      add_subdirectory(\"${MAEPARSER_DIR}/maeparser\")\n\n      set(maeparser_INCLUDE_DIRS \"${MAEPARSER_DIR}\")\n      set(maeparser_LIBRARIES maeparser)\n\n      message(STATUS \"Maestro formats will be supported. Using MaeParser '${MAEPARSER_VERSION}' at ${MAEPARSER_DIR}\")\n\n    endif()\n\n    include_directories(${maeparser_INCLUDE_DIRS})\n    set(libs ${libs} ${maeparser_LIBRARIES})\n\nelse()\n    message(STATUS \"Maestro formats will NOT be supported. Please install Boost to enable Maestro formats.\")\nendif()\n\n\nif(WITH_COORDGEN)\n\n    find_package(coordgen MODULE QUIET)\n\n    if (coordgen_FOUND)\n\n      message(STATUS \"Coordinate generation with Coordgen will be supported. Using Coordgen libraries at ${coordgen_LIBRARIES}.\")\n\n    else()\n\n      set(COORDGEN_VERSION \"master\" CACHE STRING \"Coordgen fallback version to download\")\n\n      set(COORDGEN_DIR \"${openbabel_SOURCE_DIR}/external/coordgen-${COORDGEN_VERSION}\")\n\n      # These won't work, since openbabel relocates them to the \"bin\" dir\n      set(COORDGEN_BUILD_TESTS OFF CACHE BOOL \"Disable building Coordgen tests\")\n      set(COORDGEN_BUILD_EXAMPLE OFF CACHE BOOL \"Disable building Coordgen example\")\n\n      if(EXISTS \"${COORDGEN_DIR}/coordgen/CMakeLists.txt\")\n\n        message(STATUS \"Building existing Coordgen '${COORDGEN_VERSION}' source at ${COORDGEN_DIR}.\")\n\n      else()\n\n          file(DOWNLOAD \"https://github.com/schrodinger/coordgenlibs/archive/${COORDGEN_VERSION}.tar.gz\"\n              \"${COORDGEN_DIR}/coordgenlibs-${COORDGEN_VERSION}.tar.gz\")\n\n          execute_process(COMMAND ${CMAKE_COMMAND} -E tar zxf \"coordgenlibs-${COORDGEN_VERSION}.tar.gz\"\n              WORKING_DIRECTORY \"${COORDGEN_DIR}\")\n\n          find_path(COORDGEN_UNPACK_DIR \"CMakeLists.txt\" PATH \"${COORDGEN_DIR}/*\" NO_DEFAULT_PATH)\n\n          if(COORDGEN_UNPACK_DIR)\n            file(RENAME \"${COORDGEN_UNPACK_DIR}\" \"${COORDGEN_DIR}/coordgen\")\n            message(STATUS \"Downloaded Coordgen '${COORDGEN_VERSION}' to ${COORDGEN_DIR}.\")\n          else()\n            message(FATAL_ERROR \"Failed getting or unpacking Coordgen '${COORDGEN_VERSION}'.\")\n          endif()\n\n      endif()\n\n      add_subdirectory(\"${COORDGEN_DIR}/coordgen\")\n\n      set(coordgen_INCLUDE_DIRS \"${COORDGEN_DIR}\")\n      set(coordgen_LIBRARIES coordgen)\n\n\n      message(STATUS \"Coordinate generation with Coordgen will be supported Using Coordgen '${COORDGEN_VERSION}' at ${COORDGEN_DIR}\")\n\n    endif()\n\n    include_directories(${coordgen_INCLUDE_DIRS})\n    set(libs ${libs} ${coordgen_LIBRARIES})\n\nelse()\n    message(STATUS \"Coordinate generation with Coordgen will NOT be supported. Please install Boost to enable Maestro formats.\")\nendif()\n\noption(WITH_JSON \"Build JSON support\" ON)\noption(OPENBABEL_USE_SYSTEM_RAPIDJSON \"Use the system rapidjson if available.\" ON)\nif(WITH_JSON)\n  set(RAPIDJSON_VERSION_MIN 1.1.0)\n  # First try find system rapidjson\n  if(OPENBABEL_USE_SYSTEM_RAPIDJSON)\n    find_package(RapidJSON ${RAPIDJSON_VERSION_MIN})\n  endif()\n  # Otherwise download rapidjson to openbabel source directory\n  if (NOT RAPIDJSON_FOUND OR RAPIDJSON_VERSION VERSION_LESS ${RAPIDJSON_VERSION_MIN})\n    set(RAPIDJSON_VERSION 1.1.0)\n    if(NOT EXISTS \"${openbabel_SOURCE_DIR}/external/rapidjson-${RAPIDJSON_VERSION}\")\n      file(DOWNLOAD \"https://github.com/Tencent/rapidjson/archive/v${RAPIDJSON_VERSION}.tar.gz\"\n        \"${openbabel_SOURCE_DIR}/external/rapidjson-${RAPIDJSON_VERSION}.tar.gz\" STATUS status)\n      execute_process(COMMAND ${CMAKE_COMMAND} -E tar zxf\n        ${openbabel_SOURCE_DIR}/external/rapidjson-${RAPIDJSON_VERSION}.tar.gz\n        WORKING_DIRECTORY ${openbabel_SOURCE_DIR}/external)\n      message(STATUS \"Downloaded RapidJSON to ${openbabel_SOURCE_DIR}/external/rapidjson-${RAPIDJSON_VERSION}.\")\n    endif()\n    set(RAPIDJSON_FOUND TRUE)\n    set(RAPIDJSON_INCLUDE_DIRS ${openbabel_SOURCE_DIR}/external/rapidjson-${RAPIDJSON_VERSION}/include)\n  endif()\n  if(RAPIDJSON_FOUND)\n    message(STATUS \"JSON formats will be supported. Using RapidJSON ${RAPIDJSON_VERSION} at ${RAPIDJSON_INCLUDE_DIRS}\")\n    add_definitions(-DHAVE_RAPIDJSON)\n    include_directories(${RAPIDJSON_INCLUDE_DIRS})\n  endif()\nendif()\n\nfind_package(Cairo)\nif(CAIRO_FOUND)\n  message(STATUS \"Cairo found. PNG output will be supported.\")\nelse(CAIRO_FOUND)\n  message(STATUS \"Could NOT find Cairo. PNG output will NOT be supported.\")\nendif(CAIRO_FOUND)\n\n# Should we enable optimizations for the native CPU architecture?\n# (this will speed up JSON handling, similarity calculations and maybe those involving Eigen)\noption(OPTIMIZE_NATIVE \"Optimize for native CPU architecture. Turn off if compiling for distribution/reuse on other machines.\" OFF)\nif(OPTIMIZE_NATIVE)\n  include(OptimizeNative)\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${NATIVE_FLAGS}\")\n  # Tell rapidjson which extensions are available\n  if(HAVE_SSE2)\n    add_definitions(-DRAPIDJSON_SSE2)\n  endif()\n  if(HAVE_SSE4_2)\n    add_definitions(-DRAPIDJSON_SSE42)\n  endif()\n  if(HAVE_NEON)\n    add_definitions(-DRAPIDJSON_NEON)\n  endif()\n  add_definitions(-DOPTIMIZE_NATIVE)\n  message(STATUS \"Optimizing code for this machine's CPU architecture. Use -DOPTIMIZE_NATIVE=OFF if compiling for distribution/reuse on other machines.\")\nendif()\n\nadd_subdirectory(include)\nadd_subdirectory(data)\nadd_subdirectory(doc)\nadd_subdirectory(src)\nadd_subdirectory(tools)\n\n# Should we build the GUI? Default is yes on Linux or Windows, not Mac.\nif (APPLE OR NOT BUILD_SHARED)\n  option(BUILD_GUI \"Build the GUI\" OFF)\nelse ()\n  option(BUILD_GUI \"Build the GUI\" ON)\nendif()\n\nif(BUILD_GUI)\n  message(STATUS \"Attempting to build the GUI\")\n  if(wxWidgets_FOUND)\n    message(STATUS \"   wxWidgets found => GUI will be built\")\n    add_subdirectory(src/GUI)\n  else()\n    message(STATUS \"   wxWidgets not found => GUI will not be built\")\n  endif()\nelse()\n  message(STATUS \"GUI will not be built\")\nendif()\n\n# Do we want to build the tests?\noption(ENABLE_TESTS \"Enable unit tests\" ON)\nif(ENABLE_TESTS)\n  include(CTest)\n  enable_testing()\n  add_subdirectory(test)\nendif()\n\n# Should the language bindings be regenereted?\noption(RUN_SWIG \"Generate language bindings with SWIG\" OFF)\n\n# Build bindings only\noption(BINDINGS_ONLY \"Build bindings only\" OFF)\n\n# Point to library if building bindings only\nset(BABEL_SYSTEM_LIBRARY ${BABEL_LIBRARY}\n    CACHE PATH \"Point to openbabel library if building bindings only\")\n\n# Should all bindings be built?\noption(ALL_BINDINGS \"Build all languages bindings\" OFF)\n\n# Should PHP bindings be built\noption(PHP_BINDINGS \"Build PHP bindings\" OFF)\n\n# Should Python bindings be built?\noption(PYTHON_BINDINGS \"Build Python bindings\" OFF)\n\n# Should Ruby bindings be built?\noption(RUBY_BINDINGS \"Build Ruby bindings\" OFF)\n\n# Should Perl bindings be built?\noption(PERL_BINDINGS \"Build Perl bindings\" OFF)\n\n# Should Java bindings be built?\noption(JAVA_BINDINGS \"Build Java bindings\" OFF)\n\n# Should R bindings be built?\noption(R_BINDINGS \"Build R bindings\" OFF)\n\n# Should CSharp bindings be built?\noption(CSHARP_BINDINGS \"Build Csharp bindings\" OFF)\n\nif(ALL_BINDINGS)\n  set(PYTHON_BINDINGS ON)\n  set(RUBY_BINDINGS ON)\n  set(PHP_BINDINGS ON)\n  set(PERL_BINDINGS ON)\n  set(JAVA_BINDINGS ON)\n  set(CSHARP_BINDINGS ON)\n  set(R_BINDINGS ON)\nendif()\n\nadd_subdirectory(scripts)\n\n# A minimal build with just two formats (SMI, SDF) useful for developers\noption(MINIMAL_BUILD \"Disable full build\" OFF)\n\n# Create the Config and ConfigVersion files in the build directory, useful to\n# build against an uninstalled OpenBabel build. Simply set OpenBabel3_DIR to\n# point at the build directory and call find_package(OpenBabel3)\nset(OpenBabel3_INCLUDE_DIRS\n  \"${openbabel_SOURCE_DIR}/include\"\n  \"${openbabel_BINARY_DIR}/include\")\nconfigure_file(\"${openbabel_SOURCE_DIR}/OpenBabel3Config.cmake.in\"\n  \"${openbabel_BINARY_DIR}/OpenBabel3Config.cmake\" @ONLY)\nconfigure_file(\"${openbabel_SOURCE_DIR}/OpenBabel3ConfigVersion.cmake.in\"\n  \"${openbabel_BINARY_DIR}/OpenBabel3ConfigVersion.cmake\" @ONLY)\n\n# Now to configure the installed config file.\nset(OB_CONFIG_DIR \"${LIB_INSTALL_DIR}/cmake/openbabel3\")\nset(OpenBabel3_INCLUDE_DIRS \"\\${OpenBabel3_INSTALL_PREFIX}/${OB_INCLUDE_DIRS}\")\nset(OpenBabel3_LIBRARIES \"$<TARGET_FILE:openbabel>\")\n\nset(OB_EXPORTS_FILE\n  \"\\${OpenBabel3_INSTALL_PREFIX}/${OB_CONFIG_DIR}/OpenBabel3_EXPORTS.cmake\")\nset(REL_REF)\nif(NOT WIN32)\n  set(REL_REF \"/../../..\")\nendif()\nconfigure_file(\"${openbabel_SOURCE_DIR}/OpenBabel3Config.cmake.in\"\n  \"${openbabel_BINARY_DIR}/OpenBabel3ConfigInstall.cmake\" @ONLY)\n\ninstall(EXPORT openbabel-targets\n  DESTINATION \"${OB_CONFIG_DIR}\"\n  FILE OpenBabel3_EXPORTS.cmake\n  COMPONENT Development)\ninstall(FILES \"${openbabel_BINARY_DIR}/OpenBabel3ConfigInstall.cmake\"\n  DESTINATION ${OB_CONFIG_DIR}\n  COMPONENT Development\n  RENAME OpenBabel3Config.cmake)\ninstall(FILES \"${openbabel_BINARY_DIR}/OpenBabel3ConfigVersion.cmake\"\n  DESTINATION ${OB_CONFIG_DIR}\n  COMPONENT Development)\n\n# from https://cmake.org/Wiki/RecipeAddUninstallTarget\n########### Add uninstall target ###############\nif (NOT DEFINED EMBED_OPENBABEL)\nCONFIGURE_FILE(\n  \"${CMAKE_CURRENT_SOURCE_DIR}/cmake/cmake_uninstall.cmake.in\"\n  \"${CMAKE_CURRENT_BINARY_DIR}/cmake/cmake_uninstall.cmake\"\n  IMMEDIATE @ONLY)\nADD_CUSTOM_TARGET(uninstall\n  \"${CMAKE_COMMAND}\" -P \"${CMAKE_CURRENT_BINARY_DIR}/cmake/cmake_uninstall.cmake\")\nendif()\n",
        "/tmp/vanessa/spack-stage/spack-stage-openbabel-master-tre2w5kv7kz426m53go3f76lqwcflhev/spack-src/src/dlhandler_unix.cpp": "/**********************************************************************\ndlhandler_unix.cpp - Dynamic loader for UNIX (handles file format shared obj.)\n\nCopyright (C) 2004 by Chris Morley\nSome portions Copyright (C) 2004-2006 by Geoffrey R. Hutchison\n\nThis file is part of the Open Babel project.\nFor more information, see <http://openbabel.org/>\n\nThis program is free software; you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation version 2 of the License.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n***********************************************************************/\n\n#ifdef __MINGW32__\n #include <windows.h>\n#else\n #include <dlfcn.h>\n#endif\n\n#include <openbabel/dlhandler.h>\n#include <openbabel/babelconfig.h>\n#include <openbabel/oberror.h>\n\n#include <unistd.h>\n#include <dirent.h>\n#include <sys/stat.h>\n#include <cstring>\n#include <cstdlib>\n#include <cstdio>\n\n#include <iostream>\n\nusing namespace std;\n\nnamespace OpenBabel {\n  OBAPI bool tokenize(vector<string> &, const char *, const char *);\n}\n\n#ifndef BUFF_SIZE\n#define BUFF_SIZE 32768\n#endif\n\n//Globals for scandir()\n\nint matchFiles (SCANDIR_CONST struct dirent *entry_p)\n{\n\tstring filename(entry_p->d_name);\n\tstring::size_type extPos = filename.rfind(DLHandler::getFormatFilePattern());\n\n\tif(extPos!=string::npos && filename.substr(extPos) == DLHandler::getFormatFilePattern())\n\t\treturn true;\n\n\treturn false;\n}\n\nbool DLHandler::getConvDirectory(string& convPath)\n{\n  //Need to provide the directory from which this shared library was loaded.\n  //This is the default directory for format shared library files.\n\n  string testPath;\n  testPath += OB_MODULE_PATH; // defined in src/config.h.cmake -> babelconfig.h\n  convPath = testPath;\n\n  return true;\n}\n\nint DLHandler::findFiles (std::vector <std::string>& file_list,\n                          const std::string& pattern,\n                          const std::string& path)\n{\n  vector<string> paths, vs;\n  char buffer[BUFF_SIZE];\n\n  if (!path.empty())\n    paths.push_back(path);\n\n  if (getenv(\"BABEL_LIBDIR\") != nullptr)\n    {\n      // environment variable should override built-in path\n      paths.clear();\n\n      strncpy(buffer,getenv(\"BABEL_LIBDIR\"), BUFF_SIZE - 1);\n      // add a trailing NULL just in case\n      buffer[BUFF_SIZE - 1] = '\\0';\n\n      OpenBabel::tokenize(vs, buffer, \"\\r\\n:\");\n\n      if (!vs.empty())\n        {\n          for (unsigned int i = 0; i < vs.size(); ++i) {\n            paths.push_back(vs[i]);\n          }\n        }\n    }\n\n  if (paths.empty())\n    paths.push_back(\"./\"); // defaults to current directory\n\n  /* Our old code used scandir. Replaced with readdir (below) as for example\n   * Solaris pre 10 doesn't implement scandir.\n   */\n\n  DIR *dp;\n  struct dirent *entry;\n\n  string currentPath;\n  for (unsigned int i = 0; i < paths.size(); ++i)\n    {\n      currentPath=paths[i];\n\n      if ((dp = opendir(currentPath.c_str())) == nullptr)\n        continue; // no big deal, this path causes an error\n      else\n        {\n          while((entry = readdir(dp)) != nullptr)\n            {\n              if (matchFiles(entry) != 0)\n                file_list.push_back(currentPath + getSeparator() + (entry)->d_name);\n            }\n          closedir(dp); // calls free(dp) -- no memory leak\n        }\n    }\n\n  if (file_list.empty())\n    return 0; // error, didn't find any files at all\n  return file_list.size();\n}\n\nint DLHandler::findFiles (std::vector<std::string>& file_list,\n                          const std::string &filename)\n{\n  if(filename.find_first_of(\"*?\")==string::npos)\n    {\n      //no wildcard in filename\n      file_list.push_back(filename);\n      return -1;\n    }\n  size_t pos = filename.find_last_of(\"\\\\/\");\n  if(pos!=string::npos)\n    return findFiles(file_list,filename.substr(pos+1), filename.substr(0,pos+1));\n  else\n    return findFiles(file_list,filename, \"\");\n}\n\n#ifdef __MINGW32__\nbool DLHandler :: openLib(const string& lib_name)\n{\n\n    if(LoadLibrary(lib_name.c_str()))\n        return true;\n\n    unsigned long err = GetLastError();\n    return false;\n}\n#else\nbool DLHandler::openLib(const string& lib_name)\n{\n  bool success = (dlopen(lib_name.c_str(), RTLD_LAZY | RTLD_GLOBAL) != nullptr);\n  if (!success) {\n    char buffer[BUFF_SIZE];\n    sprintf(buffer, \"%s did not load properly.\\n Error: %s\",\n              lib_name.c_str(), dlerror());\n    OpenBabel::obErrorLog.ThrowError(__FUNCTION__, buffer, OpenBabel::obError);\n  }\n  return success;\n}\n#endif\n\nconst char* DLHandler::getFormatFilePattern()\n{\n  return MODULE_EXTENSION;\n}\n\nchar DLHandler::getSeparator()\n{\n  return '/';\n}\n\n//! \\file dlhandler_unix.cpp\n//! \\brief Dynamic loader for UNIX (handles file format shared obj.)\n",
        "/tmp/vanessa/spack-stage/spack-stage-openbabel-master-tre2w5kv7kz426m53go3f76lqwcflhev/spack-src/scripts/openbabel-python.i": "%module openbabel\n\n%begin %{\n#define SWIG_PYTHON_2_UNICODE\n%}\n\n%{\n// used to set import/export for Cygwin DLLs\n#ifdef WIN32\n#define USING_OBDLL\n#endif\n\n#include <openbabel/obutil.h>\n#include <openbabel/math/vector3.h>\n#include <openbabel/math/matrix3x3.h>\n#include <openbabel/math/transform3d.h>\n#include <openbabel/math/spacegroup.h>\n\n#include <openbabel/generic.h>\n#include <openbabel/griddata.h>\n#include <openbabel/elements.h>\n\n#include <openbabel/base.h>\n#include <openbabel/mol.h>\n#include <openbabel/atom.h>\n#include <openbabel/bond.h>\n#include <openbabel/reaction.h>\n#include <openbabel/reactionfacade.h>\n#include <openbabel/residue.h>\n#include <openbabel/internalcoord.h>\n#include <openbabel/bondtyper.h>\n\n#include <openbabel/ring.h>\n#include <openbabel/obconversion.h>\n#include <openbabel/obfunctions.h>\n#include <openbabel/oberror.h>\n#include <openbabel/plugin.h>\n#include <openbabel/fingerprint.h>\n#include <openbabel/descriptor.h>\n#include <openbabel/format.h>\n\n#include <openbabel/forcefield.h>\n#include <openbabel/builder.h>\n#include <openbabel/op.h>\n\n#include <openbabel/bitvec.h>\n#include <openbabel/data.h>\n#include <openbabel/parsmart.h>\n#include <openbabel/alias.h>\n\n#include <openbabel/kinetics.h>\n#include <openbabel/rotor.h>\n#include <openbabel/rotamer.h>\n#include <openbabel/spectrophore.h>\n\n#include <openbabel/chargemodel.h>\n#include <openbabel/phmodel.h>\n#include <openbabel/graphsym.h>\n#include <openbabel/isomorphism.h>\n#include <openbabel/query.h>\n#include <openbabel/canon.h>\n\n#include <openbabel/stereo/tetrahedral.h>\n#include <openbabel/stereo/cistrans.h>\n#include <openbabel/stereo/squareplanar.h>\n#include <openbabel/stereo/bindings.h>\n\n#include <openbabel/chains.h>\n#include <openbabel/obiter.h>\n%}\n\n// Set and reset dlopenflags so that plugin loading works fine for \"import _openbabel\"\n%pythonbegin %{\nimport sys\nif sys.platform.find(\"linux\") != -1:\n    dlflags = sys.getdlopenflags()\n    import ctypes\n    sys.setdlopenflags(dlflags | ctypes.RTLD_GLOBAL)\n%}\n%pythoncode %{\nif sys.platform.find(\"linux\") != -1:\n    sys.setdlopenflags(dlflags)\n%}\n\n\n// Ignore methods that require std::vector of OBAtom.\n%ignore OpenBabel::OBMol::FindChildren(std::vector< OBAtom * > &, OBAtom *, OBAtom *);\n%ignore OpenBabel::OBResidue::GetAtoms;\n\n#ifdef HAVE_EIGEN\n%{\n#include <openbabel/conformersearch.h>\n#include <openbabel/math/align.h>\n%}\n#else\n%ignore OpenBabel::OBForceField::FastRotorSearch;\n%ignore OpenBabel::OBForceField::DiverseConfGen;\n#endif\n\n%include \"std_list.i\"\n%include \"std_map.i\"\n%include \"std_vector.i\"\n%include \"std_string.i\"\n%include \"std_pair.i\"\n\nnamespace std {\n\n%define VVTEMPLATE_WRAP(name, T)\n%feature(\"ignore\") vector< vector<T> >::append;\n%feature(\"ignore\") vector< vector<T> >::assign;\n%feature(\"ignore\") vector< vector<T> >::back;\n%feature(\"ignore\") vector< vector<T> >::begin;\n%feature(\"ignore\") vector< vector<T> >::capacity;\n%feature(\"ignore\") vector< vector<T> >::empty;\n%feature(\"ignore\") vector< vector<T> >::end;\n%feature(\"ignore\") vector< vector<T> >::erase;\n%feature(\"ignore\") vector< vector<T> >::front;\n%feature(\"ignore\") vector< vector<T> >::get_allocator;\n%feature(\"ignore\") vector< vector<T> >::insert;\n%feature(\"ignore\") vector< vector<T> >::pop;\n%feature(\"ignore\") vector< vector<T> >::pop_back;\n%feature(\"ignore\") vector< vector<T> >::push_back;\n%feature(\"ignore\") vector< vector<T> >::rbegin;\n%feature(\"ignore\") vector< vector<T> >::rend;\n%feature(\"ignore\") vector< vector<T> >::reserve;\n%feature(\"ignore\") vector< vector<T> >::resize;\n%feature(\"ignore\") vector< vector<T> >::size;\n%feature(\"ignore\") vector< vector<T> >::swap;\n%template(vectorv ## name) vector< vector<T> >;\n%enddef\n\n%define VECTORTEMPLATE_WRAP(vectorname, T)\n%feature(\"ignore\") vector<T>::append;\n%feature(\"ignore\") vector<T>::assign;\n%feature(\"ignore\") vector<T>::back;\n%feature(\"ignore\") vector<T>::begin;\n%feature(\"ignore\") vector<T>::capacity;\n%feature(\"ignore\") vector<T>::empty;\n%feature(\"ignore\") vector<T>::end;\n%feature(\"ignore\") vector<T>::erase;\n%feature(\"ignore\") vector<T>::front;\n%feature(\"ignore\") vector<T>::get_allocator;\n%feature(\"ignore\") vector<T>::insert;\n%feature(\"ignore\") vector<T>::pop;\n%feature(\"ignore\") vector<T>::pop_back;\n%feature(\"ignore\") vector<T>::push_back;\n%feature(\"ignore\") vector<T>::rbegin;\n%feature(\"ignore\") vector<T>::rend;\n%feature(\"ignore\") vector<T>::reserve;\n%feature(\"ignore\") vector<T>::resize;\n%feature(\"ignore\") vector<T>::size;\n%feature(\"ignore\") vector<T>::swap;\n%template(vector ## vectorname) vector<T>;\n%enddef\n\n%define VECTORPAIRTEMPLATE_WRAP(vectorname, T1, T2)\n%feature(\"ignore\") vector< pair<T1, T2> >::append;\n%feature(\"ignore\") vector< pair<T1, T2> >::assign;\n%feature(\"ignore\") vector< pair<T1, T2> >::back;\n%feature(\"ignore\") vector< pair<T1, T2> >::begin;\n%feature(\"ignore\") vector< pair<T1, T2> >::capacity;\n%feature(\"ignore\") vector< pair<T1, T2> >::empty;\n%feature(\"ignore\") vector< pair<T1, T2> >::end;\n%feature(\"ignore\") vector< pair<T1, T2> >::erase;\n%feature(\"ignore\") vector< pair<T1, T2> >::front;\n%feature(\"ignore\") vector< pair<T1, T2> >::get_allocator;\n%feature(\"ignore\") vector< pair<T1, T2> >::insert;\n%feature(\"ignore\") vector< pair<T1, T2> >::pop;\n%feature(\"ignore\") vector< pair<T1, T2> >::pop_back;\n%feature(\"ignore\") vector< pair<T1, T2> >::push_back;\n%feature(\"ignore\") vector< pair<T1, T2> >::rbegin;\n%feature(\"ignore\") vector< pair<T1, T2> >::rend;\n%feature(\"ignore\") vector< pair<T1, T2> >::reserve;\n%feature(\"ignore\") vector< pair<T1, T2> >::resize;\n%feature(\"ignore\") vector< pair<T1, T2> >::size;\n%feature(\"ignore\") vector< pair<T1, T2> >::swap;\n%template(vpair ## vectorname) vector< pair<T1, T2> >;\n%enddef\n\nVECTORTEMPLATE_WRAP(Int, int)\nVECTORTEMPLATE_WRAP(UnsignedInt, unsigned int)\nVVTEMPLATE_WRAP(Int, int)\nVECTORTEMPLATE_WRAP(Double, double)\nVECTORTEMPLATE_WRAP(ULong, unsigned long)\nVECTORTEMPLATE_WRAP(String, std::string)\nVECTORTEMPLATE_WRAP(Vector3, OpenBabel::vector3)\nVVTEMPLATE_WRAP(Vector3, OpenBabel::vector3)\nVECTORTEMPLATE_WRAP(OBMol, OpenBabel::OBMol)\nVECTORTEMPLATE_WRAP(OBBond, OpenBabel::OBBond)\nVECTORTEMPLATE_WRAP(OBResidue, OpenBabel::OBResidue)\nVECTORTEMPLATE_WRAP(OBRing, OpenBabel::OBRing)\nVECTORTEMPLATE_WRAP(pOBRing, OpenBabel::OBRing*)\nVECTORTEMPLATE_WRAP(pOBGenericData, OpenBabel::OBGenericData*)\nVECTORTEMPLATE_WRAP(pOBInternalCoord, OpenBabel::OBInternalCoord*)\n\n%template(pairUIntUInt) pair<unsigned int, unsigned int>;\nVECTORPAIRTEMPLATE_WRAP(UIntUInt, unsigned int, unsigned int);\n%template(vvpairUIntUInt) vector< vector< pair<unsigned int, unsigned int> > >;\n}\n\n%define CAST_GENERICDATA_TO(subclass)\n%inline %{\nOpenBabel::OB ## subclass *to ## subclass(OpenBabel::OBGenericData *data) {\n    return (OpenBabel::OB ## subclass *) data;\n}\n%}\n%enddef\n%inline %{ /* can't use macro -- AliasData not OBAliasData */\nOpenBabel::AliasData *toAliasData(OpenBabel::OBGenericData *data) {\n    return (OpenBabel::AliasData*) data;\n}\n%}\nCAST_GENERICDATA_TO(AngleData)\nCAST_GENERICDATA_TO(CommentData)\nCAST_GENERICDATA_TO(ConformerData)\nCAST_GENERICDATA_TO(ExternalBondData)\nCAST_GENERICDATA_TO(GridData)\nCAST_GENERICDATA_TO(MatrixData)\nCAST_GENERICDATA_TO(NasaThermoData)\nCAST_GENERICDATA_TO(PairData)\nCAST_GENERICDATA_TO(PairInteger)\nCAST_GENERICDATA_TO(PairFloatingPoint)\n// CAST_GENERICDATA_TO(PairTemplate)\nCAST_GENERICDATA_TO(RateData)\nCAST_GENERICDATA_TO(RotamerList)\nCAST_GENERICDATA_TO(RotationData)\nCAST_GENERICDATA_TO(SerialNums)\nCAST_GENERICDATA_TO(SetData)\nCAST_GENERICDATA_TO(SymmetryData)\nCAST_GENERICDATA_TO(TorsionData)\nCAST_GENERICDATA_TO(UnitCell)\nCAST_GENERICDATA_TO(VectorData)\nCAST_GENERICDATA_TO(VibrationData)\nCAST_GENERICDATA_TO(VirtualBond)\nCAST_GENERICDATA_TO(StereoBase)\nCAST_GENERICDATA_TO(TetrahedralStereo)\nCAST_GENERICDATA_TO(CisTransStereo)\nCAST_GENERICDATA_TO(SquarePlanarStereo)\n\n// This method is renamed to a valid Python method name, as otherwise\n// it cannot be used from Python\n%rename(inc)   *::operator++;\n%ignore *::operator=;\n%ignore *::operator[];\n\n%import <openbabel/babelconfig.h>\n\n%include <openbabel/data.h>\n%include <openbabel/obutil.h>\n%include <openbabel/math/vector3.h>\n%warnfilter(503) OpenBabel::matrix3x3; // Not wrapping any of the overloaded operators\n%include <openbabel/math/matrix3x3.h>\n%include <openbabel/math/transform3d.h>\n%include <openbabel/math/spacegroup.h>\n%warnfilter(503) OpenBabel::OBBitVec; // Not wrapping any of the overloaded operators\n%include <openbabel/bitvec.h>\n\n// CloneData should be used instead of the following method\n%ignore OpenBabel::OBBase::SetData;\n%include <openbabel/base.h>\n\n%include <openbabel/generic.h>\n%template(OBPairInteger) OpenBabel::OBPairTemplate<int>;\n%template(OBPairFloatingPoint) OpenBabel::OBPairTemplate<float>;\n%include <openbabel/griddata.h>\n\n%include <openbabel/chains.h>\n%include <openbabel/typer.h>\n\n// To avoid warning in plugin.h about \"Nothing known about std::binary_function\"\nnamespace std {\n        template <T1, T2, T3>\n        class binary_function {};\n}\n%template(dummy) std::binary_function <const char *, const char *, bool>;\n%include <openbabel/plugin.h>\n\n// To avoid warning in oberror.h about \"Nothing known about std::stringbuf\"\nnamespace std { class stringbuf {}; }\n%warnfilter(503) OpenBabel::OBError; // Not wrapping any of the overloaded operators\n%include <openbabel/oberror.h>\n%include <openbabel/format.h>\n%include <openbabel/obconversion.h>\n%include <openbabel/obfunctions.h>\n\n//avoid conflicts with OBElement; for consistency prefix all single \n//character residue abbreviations with res\n%rename(resA) OpenBabel::OBResidueIndex::A;\n%rename(resC) OpenBabel::OBResidueIndex::C;\n%rename(resG) OpenBabel::OBResidueIndex::G;\n%rename(resT) OpenBabel::OBResidueIndex::T;\n%rename(resI) OpenBabel::OBResidueIndex::I;\n%rename(resU) OpenBabel::OBResidueIndex::U;\n\n%include <openbabel/elements.h>\n%include <openbabel/residue.h>\n%include <openbabel/internalcoord.h>\n%include <openbabel/atom.h>\n%include <openbabel/bond.h>\n%include <openbabel/reaction.h>\n%include <openbabel/reactionfacade.h>\n\n// Remove C++ iterators\n%pythoncode %{\ndef exceptionIter(*args):\n    raise Exception(\"\"\"\\nThis method can only be used from C++. To iterate from Python\nuse the Iter classes (OBMolAtomIter, etc.) as described at\nhttp://openbabel.org/wiki/Python\"\"\")\n%}\n%define IGNORE_ITER(parent, iteree)\n%ignore OpenBabel::parent::Begin ## iteree ## s;\n%ignore OpenBabel::parent::End ## iteree ## s;\n%ignore OpenBabel::parent::Begin ## iteree;\n%ignore OpenBabel::parent::Next ## iteree;\n%enddef\nIGNORE_ITER(OBMol, Bond)\nIGNORE_ITER(OBMol, Atom)\nIGNORE_ITER(OBMol, Residue)\n%include <openbabel/mol.h>\n%pythoncode %{\nOBMol.BeginAtoms = OBMol.EndAtoms = OBMol.BeginAtom = OBMol.EndAtom = exceptionIter\nOBMol.BeginBonds = OBMol.EndBonds = OBMol.BeginBond = OBMol.EndBond = exceptionIter\nOBMol.BeginResidues = OBMol.EndResidues = OBMol.BeginResidue = OBMol.EndResidue = exceptionIter\n%}\n\n%include <openbabel/ring.h>\n%include <openbabel/parsmart.h>\n%include <openbabel/alias.h>\n%ignore OpenBabel::FptIndex;\n%include <openbabel/fingerprint.h>\n%ignore OpenBabel::OBDescriptor::LessThan;\n%include <openbabel/descriptor.h>\n// wrap GetRGB parameters\n%include \"typemaps.i\"\n%apply double *OUTPUT { double *r, double *g, double *b };\n\n// void GetRGB(unsigned int atomic_number, double *r, double *g, double *b);\n%clear double *r, double *g, double *b;\n\n// Ignore shadowed methods\n%ignore OpenBabel::OBForceField::VectorSubtract(const double *const, const double *const, double *);\n%ignore OpenBabel::OBForceField::VectorMultiply(const double *const, const double, double *);\n%include <openbabel/forcefield.h>\n\n%include <openbabel/builder.h>\n%include <openbabel/op.h>\n\n%include <openbabel/chargemodel.h>\n%apply std::string& INPUT { std::string &start } // Required for OBChemTsfm.Init\n%apply std::string& INPUT { std::string &end }   // Required for OBChemTsfm.Init\n%include <openbabel/phmodel.h>\n%include <openbabel/graphsym.h>\n%include <openbabel/isomorphism.h>\n%include <openbabel/query.h>\n%include <openbabel/canon.h>\n\n%include <openbabel/stereo/stereo.h>\n\n// Ignore shadowed method\n%ignore OpenBabel::OBRotor::GetRotAtoms() const;\n%include <openbabel/rotor.h>\n%ignore OpenBabel::Swab;\n%include <openbabel/rotamer.h>\n%include <openbabel/spectrophore.h>\n#ifdef HAVE_EIGEN\n%include <openbabel/conformersearch.h>\n%include <openbabel/math/align.h>\n#endif\n\n// The following %ignores avoid warning messages due to shadowed classes.\n// This does not imply a loss of functionality as (in this case)\n// the shadowed class is identical (from the point of view of SWIG) to\n// the shadowing class.\n// This is because C++ references (&) are transformed by SWIG back into\n// pointers, so that OBAtomIter(OBMol &) would be treated the same as\n// OBAtomIter(OBMol *).\n\n%ignore OBAtomAtomIter(OBAtom &);\n%ignore OBAtomBondIter(OBAtom &);\n%ignore OBMolAngleIter(OBMol &);\n%ignore OBMolAtomIter(OBMol &);\n%ignore OBMolAtomBFSIter(OBMol &);\n%ignore OBMolAtomDFSIter(OBMol &);\n%ignore OBMolAtomBFSIter(OBMol &, int);\n%ignore OBMolAtomDFSIter(OBMol &, int);\n%ignore OBMolBondIter(OBMol &);\n%ignore OBMolBondBFSIter(OBMol &);\n%ignore OBMolBondBFSIter(OBMol &, int);\n%ignore OBMolPairIter(OBMol &);\n%ignore OBMolRingIter(OBMol &);\n%ignore OBMolTorsionIter(OBMol &);\n%ignore OBResidueIter(OBMol &);\n%ignore OBResidueAtomIter(OBResidue &);\n\n// SWIG treats operator-> specially (see 6.24 \"Smart pointers and operator->()\").\n// If we leave this in, it adds\n// all of the methods of the underlying object (e.g. OBAtom) to the\n// iterator object, causing bloat.\n%ignore OpenBabel::OBAtomAtomIter::operator->;\n%ignore OpenBabel::OBAtomBondIter::operator->;\n%ignore OpenBabel::OBMolAngleIter::operator->;\n%ignore OpenBabel::OBMolAtomIter::operator->;\n%ignore OpenBabel::OBMolAtomBFSIter::operator->;\n%ignore OpenBabel::OBMolAtomDFSIter::operator->;\n%ignore OpenBabel::OBMolAtomBFSIter::operator->;\n%ignore OpenBabel::OBMolAtomDFSIter::operator->;\n%ignore OpenBabel::OBMolBondIter::operator->;\n%ignore OpenBabel::OBMolBondBFSIter::operator->;\n%ignore OpenBabel::OBMolBondBFSIter::operator->;\n%ignore OpenBabel::OBMolPairIter::operator->;\n%ignore OpenBabel::OBMolRingIter::operator->;\n%ignore OpenBabel::OBMolTorsionIter::operator->;\n%ignore OpenBabel::OBResidueIter::operator->;\n%ignore OpenBabel::OBResidueAtomIter::operator->;\n\n// These classes are renamed so that they can be replaced by Python\n// classes of the same name which provide Pythonic iterators\n// (see %pythoncode section below)\n\n%rename(_OBAtomAtomIter) OpenBabel::OBAtomAtomIter;\n%rename(_OBAtomBondIter) OpenBabel::OBAtomBondIter;\n%rename(_OBMolAngleIter) OpenBabel::OBMolAngleIter;\n%rename(_OBMolAtomIter) OpenBabel::OBMolAtomIter;\n%rename(_OBMolAtomBFSIter) OpenBabel::OBMolAtomBFSIter;\n%rename(_OBMolAtomDFSIter) OpenBabel::OBMolAtomDFSIter;\n%rename(_OBMolBondIter) OpenBabel::OBMolBondIter;\n%rename(_OBMolPairIter) OpenBabel::OBMolPairIter;\n%rename(_OBMolRingIter) OpenBabel::OBMolRingIter;\n%rename(_OBMolTorsionIter) OpenBabel::OBMolTorsionIter;\n%rename(_OBResidueIter) OpenBabel::OBResidueIter;\n%rename(_OBResidueAtomIter) OpenBabel::OBResidueAtomIter;\n%rename(_OBFingerprintIter) OpenBabel::PluginIter<OBFingerprint>;\n\n\n%include <openbabel/obiter.h>\n\n// The following class, OBiter, is subclassed to provide Python iterators\n// equivalent to the C++ iterators in obiter.h and the plugin iterators\n\n%pythoncode %{\nclass OBIter(object):\n    OBiterator = None # This is defined by the subclasses\n\n    def __init__(self, *params):\n        self.iter = self.OBiterator(*params)\n        self.finished = False\n        if not self.iter.__bool__():\n            self.finished = True\n\n    def __iter__(self):\n        return self\n\n    def next(self):\n        if not self.finished:\n            b = self.iter.__ref__()\n            self.iter.inc()\n            if not self.iter.__bool__():\n                # There is nothing left to iterate over\n                self.finished = True\n            return b\n        else:\n            raise StopIteration\n\n    __next__ = next\n\nclass OBIterWithDepth(OBIter):\n    def next(self):\n        if not self.finished:\n            b = self.iter.__ref__()\n            depth = self.iter.CurrentDepth()\n            self.iter.inc()\n            if not self.iter.__bool__():\n                # There is nothing left to iterate over\n                self.finished = True\n            return b, depth\n        else:\n            raise StopIteration\n\n    __next__ = next\n\nclass OBAtomAtomIter(OBIter):\n    \"\"\"Iterator over the atoms attached to an atom.\"\"\"\n    OBiterator = _OBAtomAtomIter\nclass OBAtomBondIter(OBIter):\n    \"\"\"Iterator over the bonds attached to an atom.\"\"\"\n    OBiterator = _OBAtomBondIter\nclass OBMolAngleIter(OBIter):\n    \"\"\"Iterator over the angles in a molecule.\"\"\"\n    OBiterator = _OBMolAngleIter\nclass OBMolAtomIter(OBIter):\n    \"\"\"Iterator over the atoms in a molecule.\"\"\"\n    OBiterator = _OBMolAtomIter\nclass OBMolAtomBFSIter(OBIterWithDepth):\n    \"\"\"Iterator over the atoms in a molecule in a breadth-first manner.\"\"\"\n    OBiterator = _OBMolAtomBFSIter\nclass OBMolAtomDFSIter(OBIter):\n    \"\"\"Iterator over the atoms in a molecule in a depth-first manner.\"\"\"\n    OBiterator = _OBMolAtomDFSIter\nclass OBMolBondIter(OBIter):\n    \"\"\"Iterator over the bonds in a molecule.\"\"\"\n    OBiterator = _OBMolBondIter\nclass OBMolPairIter(OBIter):\n    \"\"\"Iterator over pairs of atoms in a molecule.\"\"\"\n    OBiterator = _OBMolPairIter\nclass OBMolRingIter(OBIter):\n    \"\"\"Iterator over the rings in a molecule.\"\"\"\n    OBiterator = _OBMolRingIter\nclass OBMolTorsionIter(OBIter):\n    \"\"\"Iterator over the torsion angles in a molecule.\"\"\"\n    OBiterator = _OBMolTorsionIter\nclass OBResidueIter(OBIter):\n    \"\"\"Iterator over the residues in a molecule.\"\"\"\n    OBiterator = _OBResidueIter\nclass OBResidueAtomIter(OBIter):\n    \"\"\"Iterator over the atoms in a residue.\"\"\"\n    OBiterator = _OBResidueAtomIter\n%}\n\n%include \"carrays.i\"\n%array_class(double, doubleArray)\n%pythoncode %{\ndef double_array(mylist):\n    \"\"\"Create a C array of doubles from a list.\"\"\"\n    c = doubleArray(len(mylist))\n    for i,v in enumerate(mylist):\n        c[i] = v\n    return c\n%}\n\n// Copy some of the global variables in cvar into the openbabel namespace\n\n%pythoncode %{\nobErrorLog = cvar.obErrorLog\nttab = cvar.ttab\natomtyper = cvar.atomtyper\naromtyper = cvar.aromtyper\n%}\n\n\n// Functions to set the log file to std::cout and std::cerr\n\n%ignore OBForceField::SetLogFile(std::ostream *pos);\n%extend OpenBabel::OBForceField {\n  void SetLogToStdOut()\n  {\n    self->SetLogFile(&std::cout);\n  }\n\n  void SetLogToStdErr()\n  {\n    self->SetLogFile(&std::cerr);\n  }\n};\n\n%extend OpenBabel::OBMol {\n  void SetTorsion(int i, int j, int k, int l, double ang)\n  {\n    self->SetTorsion(self->GetAtom(i), self->GetAtom(j),\n                     self->GetAtom(k), self->GetAtom(l), ang);\n  }\n};\n\n\n%pythoncode %{\ndef exception(*args):\n    raise Exception(\"Use OBMol.CloneData instead. OBMol.SetData is only for use from C++.\")\nOBMol.SetData = exception\n%}\n\n%include \"stereo.i\"\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-openbabel-master-tre2w5kv7kz426m53go3f76lqwcflhev/spack-src/src/GUI/babel2.ico",
        "/tmp/vanessa/spack-stage/spack-stage-openbabel-master-tre2w5kv7kz426m53go3f76lqwcflhev/spack-src/.git/objects/pack/pack-6430df62ac52a3f4217f4b6b7a76eaedce1778a8.pack",
        "/tmp/vanessa/spack-stage/spack-stage-openbabel-master-tre2w5kv7kz426m53go3f76lqwcflhev/spack-src/.git/objects/pack/pack-6430df62ac52a3f4217f4b6b7a76eaedce1778a8.idx",
        "/tmp/vanessa/spack-stage/spack-stage-openbabel-master-tre2w5kv7kz426m53go3f76lqwcflhev/spack-src/data/splash.png",
        "/tmp/vanessa/spack-stage/spack-stage-openbabel-master-tre2w5kv7kz426m53go3f76lqwcflhev/spack-src/data/ghemical.prm",
        "/tmp/vanessa/spack-stage/spack-stage-openbabel-master-tre2w5kv7kz426m53go3f76lqwcflhev/spack-src/test/files/tencmpds.sdf.gz",
        "/tmp/vanessa/spack-stage/spack-stage-openbabel-master-tre2w5kv7kz426m53go3f76lqwcflhev/spack-src/test/files/c3.cml.gz",
        "/tmp/vanessa/spack-stage/spack-stage-openbabel-master-tre2w5kv7kz426m53go3f76lqwcflhev/spack-src/test/files/MeCN.cdx",
        "/tmp/vanessa/spack-stage/spack-stage-openbabel-master-tre2w5kv7kz426m53go3f76lqwcflhev/spack-src/test/files/c4.mol2.gz",
        "/tmp/vanessa/spack-stage/spack-stage-openbabel-master-tre2w5kv7kz426m53go3f76lqwcflhev/spack-src/test/files/aromatics.png",
        "/tmp/vanessa/spack-stage/spack-stage-openbabel-master-tre2w5kv7kz426m53go3f76lqwcflhev/spack-src/test/files/maereader.maegz",
        "/tmp/vanessa/spack-stage/spack-stage-openbabel-master-tre2w5kv7kz426m53go3f76lqwcflhev/spack-src/test/files/alias.png",
        "/tmp/vanessa/spack-stage/spack-stage-openbabel-master-tre2w5kv7kz426m53go3f76lqwcflhev/spack-src/test/files/c5.smi.gz",
        "/tmp/vanessa/spack-stage/spack-stage-openbabel-master-tre2w5kv7kz426m53go3f76lqwcflhev/spack-src/test/files/molrxnmix.cdx",
        "/tmp/vanessa/spack-stage/spack-stage-openbabel-master-tre2w5kv7kz426m53go3f76lqwcflhev/spack-src/test/files/1ubq.pdb.gz",
        "/tmp/vanessa/spack-stage/spack-stage-openbabel-master-tre2w5kv7kz426m53go3f76lqwcflhev/spack-src/test/files/ziptest.sdf.gz",
        "/tmp/vanessa/spack-stage/spack-stage-openbabel-master-tre2w5kv7kz426m53go3f76lqwcflhev/spack-src/test/files/five_obabel.sdf.gz",
        "/tmp/vanessa/spack-stage/spack-stage-openbabel-master-tre2w5kv7kz426m53go3f76lqwcflhev/spack-src/test/files/many.sdf.gz",
        "/tmp/vanessa/spack-stage/spack-stage-openbabel-master-tre2w5kv7kz426m53go3f76lqwcflhev/spack-src/test/files/ethanol.cdx",
        "/tmp/vanessa/spack-stage/spack-stage-openbabel-master-tre2w5kv7kz426m53go3f76lqwcflhev/spack-src/scripts/csharp/OBDotNetAssemblyInfo.cs",
        "/tmp/vanessa/spack-stage/spack-stage-openbabel-master-tre2w5kv7kz426m53go3f76lqwcflhev/spack-src/scripts/csharp/obdotnet.snk",
        "/tmp/vanessa/spack-stage/spack-stage-openbabel-master-tre2w5kv7kz426m53go3f76lqwcflhev/spack-src/doc/splash.png",
        "/tmp/vanessa/spack-stage/spack-stage-openbabel-master-tre2w5kv7kz426m53go3f76lqwcflhev/spack-src/doc/dioxin.png",
        "/tmp/vanessa/spack-stage/spack-stage-openbabel-master-tre2w5kv7kz426m53go3f76lqwcflhev/spack-src/doc/images/tetraplanar.png",
        "/tmp/vanessa/spack-stage/spack-stage-openbabel-master-tre2w5kv7kz426m53go3f76lqwcflhev/spack-src/doc/images/spectrophore_cage.png",
        "/tmp/vanessa/spack-stage/spack-stage-openbabel-master-tre2w5kv7kz426m53go3f76lqwcflhev/spack-src/doc/images/energyconformerscore.png",
        "/tmp/vanessa/spack-stage/spack-stage-openbabel-master-tre2w5kv7kz426m53go3f76lqwcflhev/spack-src/doc/images/SPshapes.png",
        "/tmp/vanessa/spack-stage/spack-stage-openbabel-master-tre2w5kv7kz426m53go3f76lqwcflhev/spack-src/doc/images/rmsdconformerscore.png",
        "/tmp/vanessa/spack-stage/spack-stage-openbabel-master-tre2w5kv7kz426m53go3f76lqwcflhev/spack-src/doc/images/gettransref.png",
        "/tmp/vanessa/spack-stage/spack-stage-openbabel-master-tre2w5kv7kz426m53go3f76lqwcflhev/spack-src/doc/images/tetranonplanar.png",
        "/tmp/vanessa/spack-stage/spack-stage-openbabel-master-tre2w5kv7kz426m53go3f76lqwcflhev/spack-src/doc/images/getcisref.png",
        "/tmp/vanessa/spack-stage/spack-stage-openbabel-master-tre2w5kv7kz426m53go3f76lqwcflhev/spack-src/doc/images/cistrans.png",
        "/tmp/vanessa/spack-stage/spack-stage-openbabel-master-tre2w5kv7kz426m53go3f76lqwcflhev/spack-src/doc/images/tetrahedral.png",
        "/tmp/vanessa/spack-stage/spack-stage-openbabel-master-tre2w5kv7kz426m53go3f76lqwcflhev/spack-src/doc/images/squareplanar.png"
    ],
    "total_files": 37478
}