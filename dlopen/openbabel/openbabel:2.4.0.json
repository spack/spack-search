{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-openbabel-2.4.0-7bcqjpxbvwoqzbfncizh3bbd2lgj23bp/spack-src/CMakeLists.txt": "# Please ensure that any changes remain compliant with 2.4.8.\nif(NOT EMBED_OPENBABEL)\n  cmake_minimum_required(VERSION 2.4.8)\nendif()\n\nproject(openbabel)\nset(CMAKE_MODULE_PATH ${openbabel_SOURCE_DIR}/cmake/modules)\n\n# Allow loose loop constructs, i.e. no matching in if/else/endif or loops.\n# Note that this is true by default in CMake 2.6.0, but we currently only\n# require CMake 2.4.8 - remove this when the CMake requirement is bumped.\nset(CMAKE_ALLOW_LOOSE_LOOP_CONSTRUCTS 1)\n\nif(COMMAND cmake_policy)\n  cmake_policy(SET CMP0003 NEW)\n  cmake_policy(SET CMP0005 OLD) # add_definitions need updating to set to NEW\n  if(POLICY CMP0042)\n    cmake_policy(SET CMP0042 OLD)\n  endif()\nendif()\n\ninclude (CheckCXXCompilerFlag)\ninclude (MacroEnsureVersion)\n\n# Version numbering - should be bumped for each release\n# Note that for \"beta\" releases, we should start at x.90.0 -- we've\n# had too many 1.100.1 releases. :-)\nset(BABEL_MAJ_VER   2)\nset(BABEL_MIN_VER   4)\nset(BABEL_PATCH_VER 0)\n\n# This should be phased out in preference for just using the target name\nset(BABEL_LIBRARY openbabel)\n\n# This would be better handled with external projects...\nif(EMBED_OPENBABEL)\n  set(BABEL_VERSION  \"${BABEL_MAJ_VER}.${BABEL_MIN_VER}.${BABEL_PATCH_VER}\" PARENT_SCOPE)\nelse()\n  set(BABEL_VERSION  \"${BABEL_MAJ_VER}.${BABEL_MIN_VER}.${BABEL_PATCH_VER}\")\nendif()\nset(BABEL_DATAROOTDIR \"${CMAKE_INSTALL_PREFIX}/share\"\n    CACHE PATH \"Install dir for arch independent data\")\nset(BABEL_DATADIR  \"${BABEL_DATAROOTDIR}/openbabel\")\n\noption(ENABLE_VERSIONED_FORMATS\n  \"Enable versioning of the format plugin directory\" ON)\n\n# Set up our path handling, inspired by the path handling used in KDE\nset(BIN_INSTALL_DIR      \"bin\"\n  CACHE PATH \"Install dir for binaries\")\nset(LIB_SUFFIX \"\" CACHE STRING \"Suffix of the directory name, e.g. 64 for lib64\")\nif(UNIX)\n  set(LIB_INSTALL_DIR    \"lib${LIB_SUFFIX}\"\n    CACHE PATH \"Install dir for libraries\")\n  if(ENABLE_VERSIONED_FORMATS)\n    set(OB_PLUGIN_INSTALL_DIR \"${LIB_INSTALL_DIR}/openbabel/${BABEL_VERSION}\"\n      CACHE PATH \"Install dir for plugins\")\n  else()\n    set(OB_PLUGIN_INSTALL_DIR \"${LIB_INSTALL_DIR}/openbabel\"\n      CACHE PATH \"Install dir for plugins\")\n  endif()\nelse() # Windows - bin dir = lib dir to load libraries\n  set(LIB_INSTALL_DIR \"${BIN_INSTALL_DIR}\"\n      CACHE PATH \"Install dir for libraries\")\n  if(MSVC)\n    set(OB_PLUGIN_INSTALL_DIR \"${BIN_INSTALL_DIR}\"\n      CACHE PATH \"Install dir for plugins\")\n  else()\n    if(ENABLE_VERSIONED_FORMATS)\n      set(OB_PLUGIN_INSTALL_DIR \"lib${LIB_SUFFIX}/openbabel/${BABEL_VERSION}\"\n        CACHE PATH \"Install dir for plugins\")\n    else(ENABLE_VERSIONED_FORMATS)\n      set(OB_PLUGIN_INSTALL_DIR \"lib${LIB_SUFFIX}/openbabel\"\n        CACHE PATH \"Install dir for plugins\")\n    endif(ENABLE_VERSIONED_FORMATS)\n  endif()\nendif()\nif(NOT DEFINED OB_INCLUDE_DIRS)\n  set(OB_INCLUDE_DIRS \"include/openbabel-2.0\")\nendif()\nset(OB_EXPORTS_FILE \"${openbabel_BINARY_DIR}/OpenBabel2_EXPORTS.cmake\")\n# Ensure a fresh file is made each time CMake is run\nfile(REMOVE \"${OB_EXPORTS_FILE}\")\n\n# Place binaries and libraries in the root of the build directory\nif(NOT CMAKE_RUNTIME_OUTPUT_DIRECTORY)\n  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/bin\"\n    CACHE STRING \"Binary build output directory\")\nendif()\nif(NOT CMAKE_LIBRARY_OUTPUT_DIRECTORY)\n  if(UNIX)\n    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/lib${LIB_SUFFIX}\"\n      CACHE STRING \"Library build output directory\")\n  else() # This is preferable on WIndows for example - bin = lib directory.\n    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/bin\"\n      CACHE STRING \"Library build output directory\")\n  endif()\nendif()\n\nmark_as_advanced(CMAKE_LIBRARY_OUTPUT_DIRECTORY\n  CMAKE_RUNTIME_OUTPUT_DIRECTORY)\n\n#GLIBC_2.4\noption(GLIBC_24_COMPATIBLE \"Build project compatible with GLIBC 2.4\" OFF)\nif(GLIBC_24_COMPATIBLE AND UNIX)\n  set(WRAP_MEMCPY_SRC memcpy.c)\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wl,--wrap=memcpy\")\nendif()\n\noption(BUILD_SHARED \"enable shared build support\" ON)\noption(BUILD_MIXED \"enable linux relocatable binaries support\" OFF)\noption(WITH_STATIC_INCHI \"enable static inchi and related plugins\" OFF)\noption(WITH_STATIC_LIBXML \"enable static libxml and xml file format plugins\" OFF)\n# Static building\nif(BUILD_SHARED)\n  set(BUILD_TYPE SHARED)\n  set(PLUGIN_TYPE MODULE)\n  add_definitions(-DUSING_DYNAMIC_LIBS)\nelse()\n  set(BUILD_TYPE STATIC)\n  set(PLUGIN_TYPE STATIC)\n\n  if(WITH_STATIC_INCHI)\n    add_definitions(-DHAVE_STATIC_INCHI)\n  endif()\n  if(WITH_STATIC_LIBXML)\n    add_definitions(-DHAVE_STATIC_LIBXML)\n  endif()\n\n  if(MSVC)\n    # set cl flags for static compiling\n    set(CMAKE_CXX_FLAGS_DEBUG \"/MTd\")\n    set(CMAKE_C_FLAGS_DEBUG \"/MTd\")\n    set(CMAKE_EXE_LINKER_FLAGS_DEBUG \"/INCREMENTAL:NO /NODEFAULTLIB:MSVCRT\")\n    set(CMAKE_CXX_FLAGS_RELEASE\t\"/MT /O2 /Ob2 /D NDEBUG\")\n    set(CMAKE_C_FLAGS_RELEASE\t\"/MT /O2 /Ob2 /D NDEBUG\")\n    set(CMAKE_EXE_LINKER_FLAGS_RELEASE \"/INCREMENTAL:NO /NODEFAULTLIB:MSVCRT\")\n    # note: static libraries are specified when running cmake\n  else()\n    set(CMAKE_FIND_LIBRARY_SUFFIXES \".a\")\n  endif()\nendif()\n\n# Should we attempt to use the system inchi library?\noption(WITH_INCHI   \"Build inchi support\" ON)\noption(OPENBABEL_USE_SYSTEM_INCHI\n  \"Use the system inchi library.\" OFF)\nif(OPENBABEL_USE_SYSTEM_INCHI)\n  find_package(Inchi REQUIRED)\n  if (NOT INCHI_FOUND)\n    message(FATAL_ERROR \"Inchi library not found.\")\n  endif()\nelse()\n  message(STATUS \"Using included inchi library.\")\n  set(INCHI_LIBRARY inchi)\nendif()\n\nif(WIN32)\n  # FIXME: not used on windows... - inconsistency\n  set(MODULE_EXTENSION \".obf\")\nelse()\n  set(MODULE_EXTENSION \".so\")\nendif()\n\n# configure checks\nfind_package(LibXml2)\nif(NOT LIBXML2_FOUND)\n  message(WARNING \"libxml2 not found - disabling CML support!\")\nendif()\n\nfind_package(ZLIB)\nif(ZLIB_FOUND)\n  add_definitions(-DHAVE_LIBZ)\n  include_directories(${ZLIB_INCLUDE_DIR})\n  # Longstanding unsolved problem with compression under Windows\n  if(WIN32)\n    add_definitions(-DDISABLE_WRITE_COMPRESSION)\n  endif()\nendif()\n\n# wxWidgets instructions based on http://wiki.wxwidgets.org/CMake\n#find_package(wxWidgets COMPONENTS base core REQUIRED)\nfind_package(wxWidgets COMPONENTS base core adv)\nif(wxWidgets_FOUND)\n  include(${wxWidgets_USE_FILE})\n  add_definitions(-DHAVE_WXWIDGETS)\n  include_directories(${wxWidgets_INCLUDE_DIRS})\nendif()\n\nif(MSVC)\n  # Ensure that CharacterSet=\"0\" in the project files\n  add_definitions(-D_SBCS) # Single-Byte Character Set (requires CMake 2.8.8)\nendif()\n\nif(MSVC)\n  option(OB_USE_PREBUILT_BINARIES\n    \"Should Windows Open Babel builds use prebuilt binaries?\" ON)\n\t# dlhandler_win32.cpp assumes multibyte character set\n\tremove_definitions(-DUNICODE -D_UNICODE)\n  include_directories(${openbabel_SOURCE_DIR}/windows-msvc/include)\nendif()\n\nif(MSVC AND OB_USE_PREBUILT_BINARIES)\n  include_directories(${XDR_INCLUDE_DIR})\n  # The following line is required for check_include_file(rpc/xdr.h ...) below\n  set(CMAKE_REQUIRED_INCLUDES ${XDR_INCLUDE_DIR})\n  # Force OPENBABEL_USE_SYSTEM_INCHI to ON, as this should be using the binary\n  set(OPENBABEL_USE_SYSTEM_INCHI ON CACHE BOOL\n    \"Forced to ON for prebuilt binaries\" FORCE)\nendif()\n\ninclude(CheckIncludeFile)\ninclude(CheckIncludeFileCXX)\ninclude(CheckSymbolExists)\ninclude(CheckLibraryExists)\ninclude(CheckTypeSize)\ninclude(CheckCSourceCompiles)\n\ncheck_include_file(conio.h      HAVE_CONIO_H)\ncheck_include_file(sys/time.h   HAVE_SYS_TIME_H)\ncheck_include_file(time.h       HAVE_TIME_H)\ncheck_include_file(strings.h    HAVE_STRINGS_H)\ncheck_include_file(rpc/xdr.h    HAVE_RPC_XDR_H)\ncheck_include_file(regex.h      HAVE_REGEX_H)\ncheck_include_file_cxx(sstream  HAVE_SSTREAM)\n\ncheck_symbol_exists(rint          \"math.h\"     HAVE_RINT)\ncheck_symbol_exists(snprintf      \"stdio.h\"    HAVE_SNPRINTF)\ncheck_symbol_exists(sranddev      \"stdlib.h\"   HAVE_SRANDDEV)\ncheck_symbol_exists(strcasecmp    \"string.h\"   HAVE_STRCASECMP)\ncheck_symbol_exists(strncasecmp   \"string.h\"   HAVE_STRNCASECMP)\n\n# BSDs don't link against libdl, but rather libc\ncheck_library_exists(dl dlopen \"\" HAVE_LIBDL)\n\nset(CMAKE_EXTRA_INCLUDE_FILES time.h)\ncheck_type_size(clock_t CLOCK_T)\n\n# Get the GCC version - from KDE4 cmake files\nif(CMAKE_COMPILER_IS_GNUCXX)\n  exec_program(${CMAKE_C_COMPILER} ARGS --version OUTPUT_VARIABLE _gcc_version_info)\n  string(REGEX MATCH \"[345]\\\\.[0-9]\\\\.[0-9]\" _gcc_version \"${_gcc_version_info}\")\n  # gcc on mac just reports: \"gcc (GCC) 3.3 20030304 ...\" without the\n  # patch level, handle this here:\n  if (NOT _gcc_version)\n    string (REGEX REPLACE \".*\\\\(GCC\\\\).* ([34]\\\\.[0-9]) .*\" \"\\\\1.0\" _gcc_version \"${_gcc_version_info}\")\n  endif ()\n  macro_ensure_version(\"4.0.0\" \"${_gcc_version}\" GCC_IS_NEWER_THAN_4_0)\n  macro_ensure_version(\"4.1.0\" \"${_gcc_version}\" GCC_IS_NEWER_THAN_4_1)\n  macro_ensure_version(\"4.2.0\" \"${_gcc_version}\" GCC_IS_NEWER_THAN_4_2)\nendif()\n\nif(UNIX)\n  option(ENABLE_SYMBOL_VISIBILITY\n    \"Enable support for compiler symbol visibility. WARNING: Some issues reported\"\n    OFF)\nendif()\n\nif(NOT MSVC)\n  SET(CMAKE_REQUIRED_FLAGS -Werror)\n  check_c_source_compiles(\"\n   #include <sys/types.h>\n   #include <dirent.h>\n    int main(){\n     extern int matchFiles (struct dirent *entry_p);\n     struct dirent **entries_pp;\n     int count = scandir (\\\"./\\\", &entries_pp, matchFiles, 0);\n     return count;\n    }\n   \" SCANDIR_NEEDS_CONST)\n\n  set(OB_MODULE_PATH \"${CMAKE_INSTALL_PREFIX}/${OB_PLUGIN_INSTALL_DIR}\"\n      CACHE PATH \"Set to system install for bindings only build\")\n  add_definitions(-DOB_MODULE_PATH=\"\\\\\"${OB_MODULE_PATH}\\\\\"\")\n\n  # Add some visibility support when using GCC\n  # note: Altough MinGW g++ 4.4 passes this test, visibility can't be used\n  if(CMAKE_COMPILER_IS_GNUCXX AND NOT APPLE)\n    if(CMAKE_SYSTEM_NAME MATCHES Linux)\n      set (CMAKE_SHARED_LINKER_FLAGS \"-Wl,--fatal-warnings -Wl,--no-undefined -lc ${CMAKE_SHARED_LINKER_FLAGS}\")\n      set (CMAKE_SHARED_LINKER_FLAGS \"-Wl,--enable-new-dtags ${CMAKE_SHARED_LINKER_FLAGS}\")\n      set (CMAKE_MODULE_LINKER_FLAGS \"-Wl,--fatal-warnings -Wl,--no-undefined -lc ${CMAKE_SHARED_LINKER_FLAGS}\")\n      set (CMAKE_MODULE_LINKER_FLAGS \"-Wl,--enable-new-dtags ${CMAKE_SHARED_LINKER_FLAGS}\")\n      if(BUILD_SHARED)\n        set (CMAKE_EXE_LINKER_FLAGS \"-Wl,--fatal-warnings -Wl,--no-undefined -lc ${CMAKE_SHARED_LINKER_FLAGS}\")\n        set (CMAKE_EXE_LINKER_FLAGS \"-Wl,--enable-new-dtags ${CMAKE_EXE_LINKER_FLAGS}\")\n      endif()\n    endif ()\n    # Now check if we can use visibility to selectively export symbols\n    check_cxx_compiler_flag(-fvisibility=hidden HAVE_GCC_VISIBILITY)\n    set(HAVE_GCC_VISIBILITY ${HAVE_GCC_VISIBILITY} CACHE BOOL \"GCC support for hidden visibility\")\n    set(_GCC_COMPILED_WITH_BAD_ALLOCATOR FALSE)\n    if(GCC_IS_NEWER_THAN_4_1)\n      exec_program(${CMAKE_C_COMPILER} ARGS -v OUTPUT_VARIABLE _gcc_alloc_info)\n      string(REGEX MATCH \"(--enable-libstdcxx-allocator=mt)\" _GCC_COMPILED_WITH_BAD_ALLOCATOR \"${_gcc_alloc_info}\")\n    endif()\n    if(HAVE_GCC_VISIBILITY AND GCC_IS_NEWER_THAN_4_2 AND ENABLE_SYMBOL_VISIBILITY\n       AND NOT _GCC_COMPILED_WITH_BAD_ALLOCATOR)\n      # We have all the parts necessary - use visibility support\n      add_definitions(-DHAVE_GCC_VISIBILITY)\n      set (CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fvisibility=hidden\")\n      set (CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fvisibility-inlines-hidden\")\n    endif()\n  endif()\nendif()\n\n# To avoid warnings when linking the plugins and exes\nif(MINGW)\n  set (CMAKE_MODULE_LINKER_FLAGS \"-Wl,--enable-auto-import ${CMAKE_MODULE_LINKER_FLAGS}\")\n  set (CMAKE_EXE_LINKER_FLAGS \"-Wl,--enable-auto-import ${CMAKE_EXE_LINKER_FLAGS}\")\nendif()\n\nmessage(STATUS \"Checking available shared pointer...\")\ninclude(CheckCXXSourceCompiles)\ncheck_cxx_source_compiles(\"#include <memory>\n                           int main(){ std::shared_ptr<int> p; return 0; }\"\n                           HAVE_STD_SHARED_PTR)\ncheck_cxx_source_compiles(\"#include <memory>\n                           int main(){ std::tr1::shared_ptr<int> p; return 0; }\"\n                           HAVE_STD_TR1_SHARED_PTR)\ncheck_cxx_source_compiles(\"#include <tr1/memory>\n                           int main(){ std::tr1::shared_ptr<int> p; return 0; }\"\n                           HAVE_STD_TR1_SHARED_PTR_IN_TR1_HEADER)\nif(HAVE_STD_SHARED_PTR)\n  set(OB_SHARED_PTR_IMPLEMENTATION \"std::shared_ptr\")\n  set(OB_SHARED_PTR_HEADER \"memory\")\n  set(SHARED_POINTER true)\n  add_definitions(-DHAVE_SHARED_POINTER)\nelseif(HAVE_STD_TR1_SHARED_PTR)\n  set(OB_SHARED_PTR_IMPLEMENTATION \"std::tr1::shared_ptr\")\n  set(OB_SHARED_PTR_HEADER \"memory\")\n  set(SHARED_POINTER true)\n  add_definitions(-DHAVE_SHARED_POINTER)\nelseif(HAVE_STD_TR1_SHARED_PTR_IN_TR1_HEADER)\n  set(OB_SHARED_PTR_IMPLEMENTATION \"std::tr1::shared_ptr\")\n  set(OB_SHARED_PTR_HEADER \"tr1/memory\")\n  set(SHARED_POINTER true)\n  add_definitions(-DHAVE_SHARED_POINTER)\nelse()\n  find_package(Boost)\n  if(Boost_FOUND)\n    include_directories(${Boost_INCLUDE_DIRS} ${Boost_INCLUDE_DIR})\n    add_definitions(-DUSE_BOOST -DHAVE_SHARED_POINTER)\n    set(SHARED_POINTER true)\n  else()\n    message(FATAL_ERROR \"Boost is required to compile OpenBabel with GCC 3.x\")\n  endif()\n  set(OB_SHARED_PTR_IMPLEMENTATION \"boost::shared_ptr\")\n  set(OB_SHARED_PTR_HEADER \"boost/memory\")\nendif()\nmessage(STATUS \"Use ${OB_SHARED_PTR_IMPLEMENTATION} in ${OB_SHARED_PTR_HEADER}\")\n\n# Intel C++ Compiler\n# Note: Windows version uses different options!\nif(${CMAKE_CXX_COMPILER_ID} MATCHES Intel AND UNIX)\n  add_definitions (-D_BSD_SOURCE)\n  # Set some linker flags\n  if(CMAKE_SYSTEM_NAME MATCHES Linux)\n    set(CMAKE_SHARED_LINKER_FLAGS\n      \"-lc ${CMAKE_SHARED_LINKER_FLAGS}\")\n    set(CMAKE_MODULE_LINKER_FLAGS\n      \"-lc ${CMAKE_MODULE_LINKER_FLAGS}\")\n    set (CMAKE_EXE_LINKER_FLAGS\n      \"-lc ${CMAKE_EXE_LINKER_FLAGS}\")\n  endif (CMAKE_SYSTEM_NAME MATCHES Linux)\n  check_cxx_compiler_flag(-fvisibility=hidden HAVE_INTEL_VISIBILITY)\n  set(HAVE_INTEL_VISIBILITY ${HAVE_INTEL_VISIBILITY} CACHE BOOL\n    \"Intel Compiler support for hidden visibility\")\n  if(HAVE_INTEL_VISIBILITY AND ENABLE_SYMBOL_VISIBILITY)\n    add_definitions(-DHAVE_GCC_VISIBILITY)\n#    set (CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fvisibility=hidden\")\n    check_cxx_compiler_flag(-fvisibility-inlines-hidden HAVE_INTEL_VISIBILITY_INLINES)\n    set(HAVE_INTEL_VISIBILITY_INLINES ${HAVE_INTEL_VISIBILITY_INLINES} CACHE BOOL\n      \"Intel Compiler support for -fvisibility-inlines-hidden\")\n    if(HAVE_INTEL_VISIBILITY_INLINES)\n      set (CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fvisibility-inlines-hidden\")\n    endif()\n  endif()\n\n  set(CMAKE_C_FLAGS_RELEASE \"-O3 -ipo1 -DNDEBUG -Wl,-s\")\n  set(CMAKE_CXX_FLAGS_RELEASE \"-O3 -ipo1 -DNDEBUG -Wl,-s\")\n\n  # define WITH_SSE2 to enable the SSE2 instruction set.\n  # Available on Pentium 4, Athlon 64, and newer CPUs.\n  if(CMAKE_SIZEOF_VOID_P EQUAL 8 OR WITH_SSE2)\n    message(STATUS \"Enabling the SSE2 instruction set\")\n    set (CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -msse2\")\n  endif(CMAKE_SIZEOF_VOID_P EQUAL 8 OR WITH_SSE2)\nendif(${CMAKE_CXX_COMPILER_ID} MATCHES Intel AND UNIX)\n\n#Find if OpenMP support is enabled\n\noption(ENABLE_OPENMP\n    \"Enable support for OpenMP compilation of forcefield code\"\n    OFF)\nif(ENABLE_OPENMP)\n  find_package(OpenMP)\n  if(OPENMP_FOUND)\n   set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}\")\n   set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}\")\n   set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}\")\n  endif()\nendif()\n\n# Some rpath handling for Linux and Mac\nif(UNIX AND BUILD_SHARED)\n  if(APPLE)\n    set(CMAKE_INSTALL_NAME_DIR ${CMAKE_INSTALL_PREFIX}/${LIB_INSTALL_DIR})\n  else()\n    set(CMAKE_INSTALL_RPATH \"${CMAKE_INSTALL_PREFIX}/${LIB_INSTALL_DIR}\"\n        CACHE PATH \"Set sane rpath\")\n    set(CMAKE_SKIP_BUILD_RPATH FALSE)\n    set(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE)\n    set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)\n  endif()\nendif()\n\n# this is adapted from KDE's FindKDE4Internal.cmake : default the build type to\n# \"release with debug info\".\n#\n# We will define two other build types: Debug and Release.\n# These names are case-insensitive i.e. you can do -DCMAKE_BUILD_TYPE=debug\nif(NOT CMAKE_BUILD_TYPE)\n   set(CMAKE_BUILD_TYPE RelWithDebInfo)\nendif()\n\n#define various build types\nif(CMAKE_COMPILER_IS_GNUCXX)\n  set (CMAKE_CXX_FLAGS_RELEASE        \"${CMAKE_CXX_FLAGS_RELEASE} -O2 -DNDEBUG\")\n  set (CMAKE_CXX_FLAGS_RELWITHDEBINFO \"${CMAKE_CXX_FLAGS_RELWITHDEBINFO} -O2 -g\")\n  set (CMAKE_CXX_FLAGS_DEBUG          \"${CMAKE_CXX_FLAGS_DEBUG} -D_GLIBCXX_DEBUG -g3 -fno-inline\")\nendif()\n\nfile(GLOB_RECURSE headers include/openbabel/*.h)\nconfigure_file(${openbabel_SOURCE_DIR}/src/config.h.cmake\n  ${openbabel_BINARY_DIR}/include/openbabel/babelconfig.h)\ninstall(FILES ${openbabel_BINARY_DIR}/include/openbabel/babelconfig.h\n  DESTINATION ${OB_INCLUDE_DIRS}/openbabel)\nif(NOT MSVC)\n  configure_file(${openbabel_SOURCE_DIR}/openbabel-2.0.pc.cmake\n    ${openbabel_BINARY_DIR}/openbabel-2.0.pc @ONLY)\n  install(FILES ${openbabel_BINARY_DIR}/openbabel-2.0.pc\n    DESTINATION ${LIB_INSTALL_DIR}/pkgconfig)\nendif()\n\ninclude_directories(${openbabel_BINARY_DIR}/include\n  ${openbabel_SOURCE_DIR}/data\n  ${openbabel_SOURCE_DIR}/include\n)\n\n#cjh\nfind_package(Eigen3)\nif(EIGEN3_FOUND)\n  add_definitions(-DHAVE_EIGEN -DHAVE_EIGEN3)\n  include_directories(${EIGEN3_INCLUDE_DIR})\nelse()\n  find_package(Eigen2) # find and setup Eigen2\n  if(EIGEN2_FOUND)\n    add_definitions (-DHAVE_EIGEN)\n    include_directories(${EIGEN2_INCLUDE_DIR})\n  endif()\nendif()\n#cjh\n\nfind_package(Cairo)\nif(CAIRO_FOUND)\n  message(STATUS \"Cairo found. PNG output will be supported.\")\nelse(CAIRO_FOUND)\n  message(STATUS \"Could NOT find Cairo. PNG output will NOT be supported.\")\nendif(CAIRO_FOUND)\n\n# Should we enable optimizations for the native CPU architecture?\n# (this will speed up similarity calculations and maybe those involving Eigen)\nif(NOT MSVC)\n  option(OPTIMIZE_NATIVE \"Optimize for native CPU architecture. Turn off if compiling for distribution/reuse on other machines.\" OFF)\n  if(OPTIMIZE_NATIVE)\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -march=native\")\n    message(STATUS \"Optimizing code for this machine's CPU architecture. Use -DOPTIMIZE_NATIVE=OFF if compiling for distribution/reuse on other machines.\")\n  endif()\nendif()\n\nadd_subdirectory(include)\nadd_subdirectory(data)\nadd_subdirectory(doc)\nadd_subdirectory(src)\nadd_subdirectory(tools)\n\n# Should we build the GUI? Default is yes on Linux or Windows, not Mac.\nif (APPLE OR NOT BUILD_SHARED)\n  option(BUILD_GUI \"Build the GUI\" OFF)\nelse ()\n  option(BUILD_GUI \"Build the GUI\" ON)\nendif()\n\nif(BUILD_GUI)\n  message(STATUS \"Attempting to build the GUI\")\n  if(wxWidgets_FOUND)\n    message(STATUS \"   wxWidgets found => GUI will be built\")\n    add_subdirectory(src/GUI)\n  else()\n    message(STATUS \"   wxWidgets not found => GUI will not be built\")\n  endif()\nelse()\n  message(STATUS \"GUI will not be built\")\nendif()\n\n# Do we want to build the tests?\noption(ENABLE_TESTS \"Enable unit tests\" ON)\nif(ENABLE_TESTS)\n  include(CTest)\n  enable_testing()\n  add_subdirectory(test)\nendif()\n\n# To build the JSON formats, you need to provide an import library for MSVC\nif(MSVC)\n  if (NOT JSON_LIBRARY)\n    message(STATUS \"JSON formats will NOT be built. To build, specify the location of the jsoncpp library with -DJSON_LIBRARY\")\n  endif()\nendif()\n\n# Should the language bindings be regenereted?\noption(RUN_SWIG \"Generate language bindings with SWIG\" OFF)\n\n# Build bindings only\noption(BINDINGS_ONLY \"Build bindings only\" OFF)\n\n# Point to library if building bindings only\nset(BABEL_SYSTEM_LIBRARY ${BABEL_LIBRARY}\n    CACHE PATH \"Point to openbabel library if building bindings only\")\n\n# Should all bindings be built?\noption(ALL_BINDINGS \"Build all languages bindings\" OFF)\n\n# Should PHP bindings be built\noption(PHP_BINDINGS \"Build PHP bindings\" OFF)\n\n# Should Python bindings be built?\noption(PYTHON_BINDINGS \"Build Python bindings\" OFF)\n\n# Should Ruby bindings be built?\noption(RUBY_BINDINGS \"Build Ruby bindings\" OFF)\n\n# Should Perl bindings be built?\noption(PERL_BINDINGS \"Build Perl bindings\" OFF)\n\n# Should Java bindings be built?\noption(JAVA_BINDINGS \"Build Java bindings\" OFF)\n\n# Should R bindings be built?\noption(R_BINDINGS \"Build R bindings\" OFF)\n\n# Should CSharp bindings be built?\noption(CSHARP_BINDINGS \"Build Csharp bindings\" OFF)\n\nif(ALL_BINDINGS)\n  set(PYTHON_BINDINGS ON)\n  set(RUBY_BINDINGS ON)\n  set(PHP_BINDINGS ON)\n  set(PERL_BINDINGS ON)\n  set(JAVA_BINDINGS ON)\n  set(CSHARP_BINDINGS ON)\n  set(R_BINDINGS ON)\nendif()\n\nadd_subdirectory(scripts)\n\n# A minimal build with just two formats (SMI, SDF) useful for developers\noption(MINIMAL_BUILD \"Disable full build\" OFF)\n\n# Create the Config and ConfigVersion files in the build directory, useful to\n# build against an uninstalled OpenBabel build. Simply set OpenBabel2_DIR to\n# point at the build directory and call find_package(OpenBabel2)\nset(OpenBabel2_INCLUDE_DIRS\n  \"${openbabel_SOURCE_DIR}/include\"\n  \"${openbabel_BINARY_DIR}/include\")\nconfigure_file(\"${openbabel_SOURCE_DIR}/OpenBabel2Config.cmake.in\"\n  \"${openbabel_BINARY_DIR}/OpenBabel2Config.cmake\" @ONLY)\nconfigure_file(\"${openbabel_SOURCE_DIR}/OpenBabel2ConfigVersion.cmake.in\"\n  \"${openbabel_BINARY_DIR}/OpenBabel2ConfigVersion.cmake\" @ONLY)\n\n# Now to configure the installed config file.\nset(OB_CONFIG_DIR \"${LIB_INSTALL_DIR}/cmake/openbabel2\")\nset(OpenBabel2_INCLUDE_DIRS \"\\${OpenBabel2_INSTALL_PREFIX}/${OB_INCLUDE_DIRS}\")\nset(OB_EXPORTS_FILE\n  \"\\${OpenBabel2_INSTALL_PREFIX}/${OB_CONFIG_DIR}/OpenBabel2_EXPORTS.cmake\")\nset(REL_REF)\nif(NOT WIN32)\n  set(REL_REF \"/../../..\")\nendif()\nconfigure_file(\"${openbabel_SOURCE_DIR}/OpenBabel2Config.cmake.in\"\n  \"${openbabel_BINARY_DIR}/OpenBabel2ConfigInstall.cmake\" @ONLY)\n\ninstall(EXPORT openbabel-targets\n  DESTINATION \"${OB_CONFIG_DIR}\"\n  FILE OpenBabel2_EXPORTS.cmake\n  COMPONENT Development)\ninstall(FILES \"${openbabel_BINARY_DIR}/OpenBabel2ConfigInstall.cmake\"\n  DESTINATION ${OB_CONFIG_DIR}\n  COMPONENT Development\n  RENAME OpenBabel2Config.cmake)\ninstall(FILES \"${openbabel_BINARY_DIR}/OpenBabel2ConfigVersion.cmake\"\n  DESTINATION ${OB_CONFIG_DIR}\n  COMPONENT Development)\n\n# from https://cmake.org/Wiki/RecipeAddUninstallTarget\n########### Add uninstall target ###############\nif (NOT DEFINED EMBED_OPENBABEL)\nCONFIGURE_FILE(\n  \"${CMAKE_CURRENT_SOURCE_DIR}/cmake/cmake_uninstall.cmake.in\"\n  \"${CMAKE_CURRENT_BINARY_DIR}/cmake/cmake_uninstall.cmake\"\n  IMMEDIATE @ONLY)\nADD_CUSTOM_TARGET(uninstall\n  \"${CMAKE_COMMAND}\" -P \"${CMAKE_CURRENT_BINARY_DIR}/cmake/cmake_uninstall.cmake\")\nendif()\n",
        "/tmp/vanessa/spack-stage/spack-stage-openbabel-2.4.0-7bcqjpxbvwoqzbfncizh3bbd2lgj23bp/spack-src/src/dlhandler_unix.cpp": "/**********************************************************************\ndlhandler_unix.cpp - Dynamic loader for UNIX (handles file format shared obj.)\n\nCopyright (C) 2004 by Chris Morley\nSome portions Copyright (C) 2004-2006 by Geoffrey R. Hutchison\n\nThis file is part of the Open Babel project.\nFor more information, see <http://openbabel.org/>\n\nThis program is free software; you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation version 2 of the License.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n***********************************************************************/\n\n#ifdef __MINGW32__\n #include <windows.h>\n#else\n #include <dlfcn.h>\n#endif\n\n#include <openbabel/dlhandler.h>\n#include <openbabel/babelconfig.h>\n#include <openbabel/oberror.h>\n\n#include <unistd.h>\n#include <dirent.h>\n#include <sys/stat.h>\n#include <cstring>\n#include <cstdlib>\n#include <cstdio>\n\n#include <iostream>\n\nusing namespace std;\n\nnamespace OpenBabel {\n  OBAPI bool tokenize(vector<string> &, const char *, const char *);\n}\n\n#ifndef BUFF_SIZE\n#define BUFF_SIZE 32768\n#endif\n\n//Globals for scandir()\n\nint matchFiles (SCANDIR_CONST struct dirent *entry_p)\n{\n\tstring filename(entry_p->d_name);\n\tstring::size_type extPos = filename.rfind(DLHandler::getFormatFilePattern());\n\n\tif(extPos!=string::npos && filename.substr(extPos) == DLHandler::getFormatFilePattern())\n\t\treturn true;\n\n\treturn false;\n}\n\nbool DLHandler::getConvDirectory(string& convPath)\n{\n  //Need to provide the directory from which this shared library was loaded.\n  //This is the default directory for format shared library files.\n\n  string testPath;\n  testPath += OB_MODULE_PATH; // defined in src/config.h.cmake -> babelconfig.h\n  convPath = testPath;\n\n  return true;\n}\n\nint DLHandler::findFiles (std::vector <std::string>& file_list,\n                          const std::string& pattern,\n                          const std::string& path)\n{\n  vector<string> paths, vs;\n  char buffer[BUFF_SIZE];\n\n  if (!path.empty())\n    paths.push_back(path);\n\n  if (getenv(\"BABEL_LIBDIR\") != NULL)\n    {\n      // environment variable should override built-in path\n      paths.clear();\n\n      strncpy(buffer,getenv(\"BABEL_LIBDIR\"), BUFF_SIZE - 1);\n      // add a trailing NULL just in case\n      buffer[BUFF_SIZE - 1] = '\\0';\n\n      OpenBabel::tokenize(vs, buffer, \"\\r\\n:\");\n\n      if (!vs.empty())\n        {\n          for (unsigned int i = 0; i < vs.size(); ++i) {\n            paths.push_back(vs[i]);\n          }\n        }\n    }\n\n  if (paths.empty())\n    paths.push_back(\"./\"); // defaults to current directory\n\n  /* Our old code used scandir. Replaced with readdir (below) as for example\n   * Solaris pre 10 doesn't implement scandir.\n   */\n\n  DIR *dp;\n  struct dirent *entry;\n\n  string currentPath;\n  for (unsigned int i = 0; i < paths.size(); ++i)\n    {\n      currentPath=paths[i];\n\n      if ((dp = opendir(currentPath.c_str())) == NULL)\n        continue; // no big deal, this path causes an error\n      else\n        {\n          while((entry = readdir(dp)) != NULL)\n            {\n              if (matchFiles(entry) != 0)\n                file_list.push_back(currentPath + getSeparator() + (entry)->d_name);\n            }\n          closedir(dp); // calls free(dp) -- no memory leak\n        }\n    }\n\n  if (file_list.empty())\n    return 0; // error, didn't find any files at all\n  return file_list.size();\n}\n\nint DLHandler::findFiles (std::vector<std::string>& file_list,\n                          const std::string &filename)\n{\n  if(filename.find_first_of(\"*?\")==string::npos)\n    {\n      //no wildcard in filename\n      file_list.push_back(filename);\n      return -1;\n    }\n  size_t pos = filename.find_last_of(\"\\\\/\");\n  if(pos!=string::npos)\n    return findFiles(file_list,filename.substr(pos+1), filename.substr(0,pos+1));\n  else\n    return findFiles(file_list,filename, \"\");\n}\n\n#ifdef __MINGW32__\nbool DLHandler :: openLib(const string& lib_name)\n{\n\n    if(LoadLibrary(lib_name.c_str()))\n        return true;\n\n    unsigned long err = GetLastError();\n    return false;\n}\n#else\nbool DLHandler::openLib(const string& lib_name)\n{\n  bool success = (dlopen(lib_name.c_str(), RTLD_LAZY | RTLD_GLOBAL) != 0);\n  if (!success) {\n    char buffer[BUFF_SIZE];\n    sprintf(buffer, \"%s did not load properly.\\n Error: %s\",\n              lib_name.c_str(), dlerror());\n    OpenBabel::obErrorLog.ThrowError(__FUNCTION__, buffer, OpenBabel::obError);\n  }\n  return success;\n}\n#endif\n\nconst char* DLHandler::getFormatFilePattern()\n{\n  return MODULE_EXTENSION;\n}\n\nchar DLHandler::getSeparator()\n{\n  return '/';\n}\n\n//! \\file dlhandler_unix.cpp\n//! \\brief Dynamic loader for UNIX (handles file format shared obj.)\n",
        "/tmp/vanessa/spack-stage/spack-stage-openbabel-2.4.0-7bcqjpxbvwoqzbfncizh3bbd2lgj23bp/spack-src/scripts/CMakeLists.txt": "cmake_minimum_required(VERSION 2.6.0)\n# Library versioning (used in Mac Python bindings)x\nset(SOVERSION 4)\n\nif (RUN_SWIG)\n  include(FindSWIG)\n  # This module finds an installed SWIG. It sets the following variables:\n  # SWIG_FOUND - set to true if SWIG is found\n  # SWIG_DIR - the directory where swig is installed\n  # SWIG_EXECUTABLE - the path to the swig executable\n  # SWIG_VERSION   - the version number of the swig executable\n\n  find_package(SWIG 2.0)\n  if (NOT SWIG_FOUND)\n    message(STATUS \"SWIG 2.0 NOT found\")\n    return()\n  endif (NOT SWIG_FOUND)\nendif (RUN_SWIG)\n\n# The following needs to be kept in synch with ..\\CMakeLists.txt\nif(EIGEN3_FOUND)\n  set (eigen_define \"-DHAVE_EIGEN -DHAVE_EIGEN3\")\n  include_directories(${EIGEN3_INCLUDE_DIR})\n  set (CPPFLAGS_VALUE \"-I${EIGEN3_INCLUDE_DIR}\")\n  set (CPPFLAGS_TEXT \"CPPFLAGS=${CPPFLAGS_VALUE}\")\nelse()\n  if(EIGEN2_FOUND)\n    set (eigen_define \"-DHAVE_EIGEN\")\n    include_directories(${EIGEN2_INCLUDE_DIR})\n    set (CPPFLAGS_VALUE \"-I${EIGEN2_INCLUDE_DIR}\")\n    set (CPPFLAGS_TEXT \"CPPFLAGS=${CPPFLAGS_VALUE}\")\n  endif()\nendif()\n\n###################\n# Python\n###################\n\nif (PYTHON_BINDINGS)\n  if (EXISTS ${openbabel_SOURCE_DIR}/scripts/python/openbabel-python.cpp OR RUN_SWIG)\n    find_package(PythonInterp)\n    if (NOT PYTHONINTERP_FOUND)\n      message(STATUS \"Python interpreter NOT found\")\n    endif (NOT PYTHONINTERP_FOUND)\n\n    if (PYTHONINTERP_FOUND AND NOT Python_ADDITIONAL_VERSIONS)\n      set(Python_ADDITIONAL_VERSIONS \"${PYTHON_VERSION_MAJOR}.${PYTHON_VERSION_MINOR}\")\n    endif (PYTHONINTERP_FOUND AND NOT Python_ADDITIONAL_VERSIONS)\n\n    find_package(PythonLibs)\n    if (NOT PYTHONLIBS_FOUND)\n      message(STATUS \"Python libraries NOT found\")\n    endif (NOT PYTHONLIBS_FOUND)\n\n    if(PYTHONLIBS_FOUND AND PYTHONINTERP_FOUND)\n      set(DO_PYTHON_BINDINGS ON BOOL)\n      message(STATUS \"Python bindings will be compiled\")\n    endif(PYTHONLIBS_FOUND AND PYTHONINTERP_FOUND)\n\n  else (EXISTS ${openbabel_SOURCE_DIR}/scripts/python/openbabel-python.cpp OR RUN_SWIG)\n    message(STATUS \"Warning: Python bindings NOT found. Generate using -DRUN_SWIG.\")\n\n  endif (EXISTS ${openbabel_SOURCE_DIR}/scripts/python/openbabel-python.cpp OR RUN_SWIG)\nendif (PYTHON_BINDINGS)\n\nif (DO_PYTHON_BINDINGS)\n\n    include_directories(\n        ${PYTHON_INCLUDE_PATH}\n    )\n\n    if(RUN_SWIG)\n      if(WIN32) # Skip the extra COMMANDs below as 'cat' is not present on Windows\n        add_custom_command(OUTPUT ${openbabel_SOURCE_DIR}/scripts/python/openbabel-python.cpp ${openbabel_SOURCE_DIR}/scripts/python/openbabel.py\n            COMMAND ${SWIG_EXECUTABLE} -python -c++ -small -O -templatereduce -naturalvar -I${openbabel_SOURCE_DIR}/include -I${openbabel_BINARY_DIR}/include -o ${openbabel_SOURCE_DIR}/scripts/python/openbabel-python.cpp ${eigen_define} -outdir ${openbabel_SOURCE_DIR}/scripts/python ${openbabel_SOURCE_DIR}/scripts/openbabel-python.i\n              MAIN_DEPENDENCY openbabel-python.i\n              VERBATIM\n              )\n      else(WIN32)\n        add_custom_command(OUTPUT ${openbabel_SOURCE_DIR}/scripts/python/openbabel-python.cpp ${openbabel_SOURCE_DIR}/scripts/python/openbabel.py\n            COMMAND ${SWIG_EXECUTABLE} -python -c++ -small -O -templatereduce -naturalvar -I${openbabel_SOURCE_DIR}/include -I${openbabel_BINARY_DIR}/include -o ${openbabel_SOURCE_DIR}/scripts/python/openbabel-python.cpp ${eigen_define} -outdir ${openbabel_SOURCE_DIR}/scripts/python ${openbabel_SOURCE_DIR}/scripts/openbabel-python.i\n              COMMAND ${CMAKE_COMMAND} -E echo \"import sys\" > ob.py\n              COMMAND ${CMAKE_COMMAND} -E echo \"if sys.platform.find('linux'\\) != -1:\" >> ob.py\n              COMMAND ${CMAKE_COMMAND} -E echo \"  try:\" >> ob.py\n              COMMAND ${CMAKE_COMMAND} -E echo \"    import dl\" >> ob.py\n              COMMAND ${CMAKE_COMMAND} -E echo \"  except ImportError:\" >> ob.py\n              COMMAND ${CMAKE_COMMAND} -E echo \"    import DLFCN as dl\" >> ob.py\n              COMMAND ${CMAKE_COMMAND} -E echo \"  sys.setdlopenflags(sys.getdlopenflags() | dl.RTLD_GLOBAL)\" >> ob.py\n              COMMAND cat ${openbabel_SOURCE_DIR}/scripts/python/openbabel.py >> ob.py\n              COMMAND ${CMAKE_COMMAND} -E copy ob.py ${openbabel_SOURCE_DIR}/scripts/python/openbabel.py\n              COMMAND ${CMAKE_COMMAND} -E remove ob.py\n              MAIN_DEPENDENCY openbabel-python.i\n              VERBATIM\n              )\n      endif(WIN32)\n    endif(RUN_SWIG)\n\n    add_library(bindings_python MODULE ${openbabel_SOURCE_DIR}/scripts/python/openbabel-python.cpp)\n    if(BINDINGS_ONLY)\n        target_link_libraries(bindings_python ${PYTHON_LIBRARIES} ${BABEL_SYSTEM_LIBRARY})\n    else()\n        target_link_libraries(bindings_python ${PYTHON_LIBRARIES} ${BABEL_LIBRARY})\n    endif()\n\n    if(NOT WIN32)\n        set_target_properties(bindings_python PROPERTIES\n            OUTPUT_NAME _openbabel\n            PREFIX \"\"\n            SUFFIX .so )\n        execute_process(\n          COMMAND\n          ${PYTHON_EXECUTABLE} -c \"from distutils import sysconfig; print(sysconfig.get_python_lib(1,0,prefix='${CMAKE_INSTALL_PREFIX}'))\"\n          OUTPUT_VARIABLE PYTHON_INSTDIR\n          OUTPUT_STRIP_TRAILING_WHITESPACE\n        )\n        if(NOT BINDINGS_ONLY)\n            add_dependencies(bindings_python openbabel)\n        endif()\n\n        install(TARGETS bindings_python\n                LIBRARY DESTINATION ${PYTHON_INSTDIR}\n                COMPONENT bindings_python)\n        install(FILES ${openbabel_SOURCE_DIR}/scripts/python/openbabel.py\n                DESTINATION ${PYTHON_INSTDIR}\n                COMPONENT bindings_python)\n        install(FILES ${openbabel_SOURCE_DIR}/scripts/python/pybel.py\n                DESTINATION ${PYTHON_INSTDIR}\n                COMPONENT bindings_python)\n    else(NOT WIN32)\n        set_target_properties(bindings_python PROPERTIES\n            OUTPUT_NAME _openbabel\n            PREFIX \"\"\n            SUFFIX .pyd )\n        execute_process(\n          COMMAND\n          ${PYTHON_EXECUTABLE} -c \"from distutils import sysconfig; print(sysconfig.get_python_lib(1,0,prefix='${CMAKE_INSTALL_PREFIX}'))\"\n          OUTPUT_VARIABLE PYTHON_INSTDIR\n          OUTPUT_STRIP_TRAILING_WHITESPACE\n        )\n        if(NOT BINDINGS_ONLY)\n            add_dependencies(bindings_python openbabel)\n        endif()\n\n        install(TARGETS bindings_python\n                LIBRARY DESTINATION ${PYTHON_INSTDIR}\n                COMPONENT bindings_python)\n        install(FILES ${openbabel_SOURCE_DIR}/scripts/python/openbabel.py\n                DESTINATION ${PYTHON_INSTDIR}\n                COMPONENT bindings_python)\n        install(FILES ${openbabel_SOURCE_DIR}/scripts/python/pybel.py\n                DESTINATION ${PYTHON_INSTDIR}\n                COMPONENT bindings_python)\n        add_custom_command(TARGET bindings_python POST_BUILD\n          COMMAND ${CMAKE_COMMAND} -E copy ${openbabel_SOURCE_DIR}/scripts/python/openbabel.py ${openbabel_BINARY_DIR}/bin/${CMAKE_CFG_INTDIR}\n          )\n    endif(NOT WIN32)\nendif (DO_PYTHON_BINDINGS)\n\n###################\n# Java\n###################\n\nif (JAVA_BINDINGS)\n  if (EXISTS ${openbabel_SOURCE_DIR}/scripts/java/openbabel-java.cpp OR RUN_SWIG)\n\n    find_package(JNI)\n    if (NOT JNI_INCLUDE_DIRS)\n      message(STATUS \"Java Native Interface NOT found. Java bindings will NOT be compiled.\")\n    endif ()\n\n    if (RUN_SWIG)\n      find_package(Java)\n      if (NOT JAVA_COMPILE)\n        message(STATUS \"Java compiler NOT found. Java bindings will NOT be generated.\")\n        set(JAVAC_FAIL ON BOOL)\n      endif (NOT JAVA_COMPILE)\n    endif (RUN_SWIG)\n\n    if(JNI_INCLUDE_DIRS AND NOT JAVAC_FAIL)\n      set(DO_JAVA_BINDINGS ON BOOL)\n      message(STATUS \"Java bindings will be compiled\")\n    endif()\n\n  else (EXISTS ${openbabel_SOURCE_DIR}/scripts/java/openbabel-java.cpp OR RUN_SWIG)\n    message(STATUS \"Warning: Java bindings NOT found. Generate using -DRUN_SWIG.\")\n\n  endif (EXISTS ${openbabel_SOURCE_DIR}/scripts/java/openbabel-java.cpp OR RUN_SWIG)\nendif (JAVA_BINDINGS)\n\nif (DO_JAVA_BINDINGS)\n\ninclude_directories(\n\t${JNI_INCLUDE_DIRS}\n    )\n\n    if (RUN_SWIG)\n      add_custom_command(OUTPUT ${openbabel_SOURCE_DIR}/scripts/java/openbabel-java.cpp\n          COMMAND ${CMAKE_COMMAND} -E make_directory ${openbabel_BINARY_DIR}/scripts/java/org/openbabel\n          COMMAND ${SWIG_EXECUTABLE} -java -package org.openbabel -c++ -small -O -templatereduce -naturalvar -I${openbabel_SOURCE_DIR}/include -I${openbabel_BINARY_DIR}/include -o ${openbabel_SOURCE_DIR}/scripts/java/openbabel-java.cpp ${eigen_define} -outdir ${openbabel_BINARY_DIR}/scripts/java/org/openbabel ${openbabel_SOURCE_DIR}/scripts/openbabel-java.i\n\t\t\t COMMAND ${JAVA_COMPILE} ARGS \"java/org/openbabel/*.java\"\n          COMMAND ${CMAKE_COMMAND} -E chdir ${openbabel_BINARY_DIR}/scripts/java ${JAVA_ARCHIVE} cf openbabel.jar org\n          COMMAND ${CMAKE_COMMAND} -E copy ${openbabel_BINARY_DIR}/scripts/java/openbabel.jar ${openbabel_SOURCE_DIR}/scripts/java\n          COMMAND ${CMAKE_COMMAND} -E remove_directory ${openbabel_BINARY_DIR}/scripts/java/org\n          MAIN_DEPENDENCY openbabel-java.i\n      )\n    endif (RUN_SWIG)\n\n    add_library(bindings_java MODULE ${openbabel_SOURCE_DIR}/scripts/java/openbabel-java.cpp)\n    if(BINDINGS_ONLY)\n      target_link_libraries(bindings_java ${JNI_LIBRARIES} ${BABEL_SYSTEM_LIBRARY})\n    else()\n      target_link_libraries(bindings_java ${JNI_LIBRARIES} ${BABEL_LIBRARY})\n    endif()\n\n    set_target_properties(bindings_java PROPERTIES\n        OUTPUT_NAME openbabel_java)\n    if(APPLE)\n      set_target_properties(bindings_java PROPERTIES SUFFIX \".jnilib\")\n    endif(APPLE)\n    if(NOT BINDINGS_ONLY)\n      add_dependencies(bindings_java openbabel)\n    endif()\n\n    install(TARGETS bindings_java\n            LIBRARY DESTINATION ${LIB_INSTALL_DIR}\n            COMPONENT bindings_java)\n    install(FILES ${openbabel_SOURCE_DIR}/scripts/java/openbabel.jar\n            DESTINATION ${LIB_INSTALL_DIR}\n            COMPONENT bindings_java)\n\nendif (DO_JAVA_BINDINGS)\n\n\n###################\n# R\n###################\n\nif (R_BINDINGS)\n\tif (EXISTS ${openbabel_SOURCE_DIR}/scripts/R/openbabel-R.cpp OR RUN_SWIG)\n\n    if (RUN_SWIG)\n      set(DO_R_BINDINGS ON BOOL)\n    endif (RUN_SWIG)\n\n\n  else (EXISTS ${openbabel_SOURCE_DIR}/scripts/R/openbabel-R.cpp OR RUN_SWIG)\n\t  message(STATUS \"Warning: R bindings NOT found. Generate using -DRUN_SWIG.\")\n\n  endif (EXISTS ${openbabel_SOURCE_DIR}/scripts/R/openbabel-R.cpp OR RUN_SWIG)\nendif (R_BINDINGS)\n\nif (DO_R_BINDINGS)\n\n\n    include_directories(/usr/share/R/include )\n    if (RUN_SWIG)\n\t\t add_custom_command(OUTPUT ${openbabel_SOURCE_DIR}/scripts/R/openbabel-R.cpp\n\t\t\t COMMAND ${CMAKE_COMMAND} -E make_directory ${openbabel_BINARY_DIR}/scripts/R\n\t\t\t COMMAND ${SWIG_EXECUTABLE} -r -package openbabelR  -c++ -small -O -templatereduce -naturalvar -I${openbabel_SOURCE_DIR}/include -I${openbabel_BINARY_DIR}/include -o ${openbabel_SOURCE_DIR}/scripts/R/openbabel-R.cpp ${eigen_define} -outdir ${openbabel_BINARY_DIR}/scripts/R ${openbabel_SOURCE_DIR}/scripts/openbabel-R.i\n\t\t\t COMMAND sed  -i  -e \"'s/reg\\.finalizer(\\(.*\\)) /reg.finalizer(\\1); /g'\" ${openbabel_BINARY_DIR}/scripts/R/openbabelR.R\n\t\t\t MAIN_DEPENDENCY openbabel-R.i\n      )\n    endif (RUN_SWIG)\n\n\t add_library(bindings_R MODULE ${openbabel_SOURCE_DIR}/scripts/R/openbabel-R.cpp)\n\t if(BINDINGS_ONLY)\n\t\t target_link_libraries(bindings_R R ${BABEL_SYSTEM_LIBRARY})\n\t else()\n\t\t target_link_libraries(bindings_R R ${BABEL_LIBRARY})\n\t endif()\n\n\t set_target_properties(bindings_R PROPERTIES\n\t\t OUTPUT_NAME openbabel_R)\n    if(NOT BINDINGS_ONLY)\n\t\t add_dependencies(bindings_R openbabel)\n    endif()\n\t add_dependencies(bindings_R R)\n\n\t install(TARGETS bindings_R\n            LIBRARY DESTINATION ${LIB_INSTALL_DIR}\n\t\t\t\tCOMPONENT bindings_R)\n\t install(FILES ${openbabel_SOURCE_DIR}/scripts/R/openbabel_java.R\n            DESTINATION ${LIB_INSTALL_DIR}\n\t\t\t\tCOMPONENT bindings_R)\n\nendif (DO_R_BINDINGS)\n\n###################\n# Perl\n###################\n\nif (PERL_BINDINGS)\n  if (EXISTS ${openbabel_SOURCE_DIR}/scripts/perl/openbabel-perl.cpp OR RUN_SWIG)\n\n    find_package(PerlLibs)\n    if (NOT PERL_LIBRARY)\n      message(STATUS \"Perl library files NOT found. Perl bindings will NOT be compiled.\")\n    endif (NOT PERL_LIBRARY)\n\n    if(PERL_LIBRARY)\n      set(DO_PERL_BINDINGS ON BOOL)\n      message(STATUS \"Perl bindings will be compiled\")\n      ### On some Linux OSes, linking against Perl fails due to no -lpthread.\n      ### The following is an attempt to work around this by taking the\n      ### link libraries from Perl.\n      execute_process(\n        COMMAND\n          ${PERL_EXECUTABLE} -V:perllibs\n        OUTPUT_VARIABLE\n          PERLLIBS_OUTPUT_VARIABLE\n        RESULT_VARIABLE\n          PERLLIBS_RESULT_VARIABLE\n        )\n      if (NOT PERLLIBS_RESULT_VARIABLE)\n        string(REGEX REPLACE \"perllibs='([^']+)'.*\" \"\\\\1\" PERL_EXTRA_LINK_FLAGS ${PERLLIBS_OUTPUT_VARIABLE})\n      endif (NOT PERLLIBS_RESULT_VARIABLE)\n    endif(PERL_LIBRARY)\n\n  else (EXISTS ${openbabel_SOURCE_DIR}/scripts/perl/openbabel-perl.cpp OR RUN_SWIG)\n    message(STATUS \"Warning: Perl bindings NOT found. Generate using -DRUN_SWIG.\")\n\n  endif (EXISTS ${openbabel_SOURCE_DIR}/scripts/perl/openbabel-perl.cpp OR RUN_SWIG)\nendif (PERL_BINDINGS)\n\nif (DO_PERL_BINDINGS)\n    include_directories(\n        ${PERL_INCLUDE_PATH}\n    )\n\n    if (RUN_SWIG)\n      add_custom_command(OUTPUT ${openbabel_SOURCE_DIR}/scripts/perl/openbabel-perl.cpp\n          COMMAND ${SWIG_EXECUTABLE} -perl5 -c++ -small -O -templatereduce -naturalvar -I${openbabel_SOURCE_DIR}/include -I${openbabel_BINARY_DIR}/include -o ${openbabel_SOURCE_DIR}/scripts/perl/openbabel-perl.cpp -outdir ${openbabel_SOURCE_DIR}/scripts/perl ${openbabel_SOURCE_DIR}/scripts/openbabel-perl.i\n          MAIN_DEPENDENCY openbabel-perl.i\n      )\n      if (NOT WIN32)\n        add_custom_command(OUTPUT ${openbabel_SOURCE_DIR}/scripts/perl/OpenBabel.pm\n          COMMAND sed -e \\\"s/^@EXPORT.*/& sub dl_load_flags { 0x01 }/\\\" <${openbabel_SOURCE_DIR}/scripts/perl/OpenBabel.pm >${openbabel_SOURCE_DIR}/scripts/perl/OpenBabel.new\n          COMMAND ${CMAKE_COMMAND} -E copy ${openbabel_SOURCE_DIR}/scripts/perl/OpenBabel.new ${openbabel_SOURCE_DIR}/scripts/perl/OpenBabel.pm\n          COMMAND ${CMAKE_COMMAND} -E remove ${openbabel_SOURCE_DIR}/scripts/perl/OpenBabel.new\n          MAIN_DEPENDENCY openbabel-perl.i\n        )\n      endif (NOT WIN32)\n    endif (RUN_SWIG)\n\n    add_library(bindings_perl MODULE ${openbabel_SOURCE_DIR}/scripts/perl/openbabel-perl.cpp)\n    if(BINDINGS_ONLY)\n      target_link_libraries(bindings_perl ${PERL_LIBRARY} ${BABEL_SYSTEM_LIBRARY} ${PERL_EXTRA_LINK_FLAGS})\n    else()\n      target_link_libraries(bindings_perl ${PERL_LIBRARY} ${BABEL_LIBRARY} ${PERL_EXTRA_LINK_FLAGS})\n    endif()\n\n    set_target_properties(bindings_perl PROPERTIES\n        PREFIX \"\"\n        OUTPUT_NAME OpenBabel)\n    if(NOT BINDINGS_ONLY)\n      add_dependencies(bindings_perl openbabel)\n    endif()\n\n    install(TARGETS bindings_perl\n            LIBRARY DESTINATION ${LIB_INSTALL_DIR}/auto/Chemistry/OpenBabel/\n            COMPONENT bindings_perl)\n    install(FILES ${openbabel_SOURCE_DIR}/scripts/perl/OpenBabel.pm\n            DESTINATION ${LIB_INSTALL_DIR}/Chemistry/\n            COMPONENT bindings_perl)\n\nendif (DO_PERL_BINDINGS)\n\n###################\n# Ruby\n###################\n\nif (RUBY_BINDINGS)\n  if (EXISTS ${openbabel_SOURCE_DIR}/scripts/ruby/openbabel-ruby.cpp OR RUN_SWIG)\n    find_package(Ruby)\n    if (NOT RUBY_LIBRARY)\n      message(STATUS \"Ruby library files NOT found. Ruby bindings will NOT be compiled.\")\n    endif (NOT RUBY_LIBRARY)\n\n    if (RUBY_LIBRARY)\n      set(DO_RUBY_BINDINGS ON BOOL)\n      message(STATUS \"Ruby bindings will be compiled\")\n    endif (RUBY_LIBRARY)\n\n  else (EXISTS ${openbabel_SOURCE_DIR}/scripts/ruby/openbabel-ruby.cpp OR RUN_SWIG)\n    message(STATUS \"Warning: Ruby bindings NOT found. Generate using -DRUN_SWIG.\")\n\n  endif (EXISTS ${openbabel_SOURCE_DIR}/scripts/ruby/openbabel-ruby.cpp OR RUN_SWIG)\nendif (RUBY_BINDINGS)\n\nif (DO_RUBY_BINDINGS)\n\n    if (RUN_SWIG)\n      set(WORKAROUND_CMAKE260_BUG \"s/rb_define_module(\\\"Openbabel\\\")/rb_define_module(\\\"OpenBabel\\\")/\")\n      add_custom_command(OUTPUT ${openbabel_SOURCE_DIR}/scripts/ruby/openbabel-ruby.cpp\n          COMMAND ${SWIG_EXECUTABLE} -ruby -c++ -small -O -templatereduce -naturalvar -autorename -I${openbabel_SOURCE_DIR}/include -I${openbabel_BINARY_DIR}/include -o ${openbabel_SOURCE_DIR}/scripts/ruby/openbabel-ruby.txt ${openbabel_SOURCE_DIR}/scripts/openbabel-ruby.i\n          COMMAND sed -e '${WORKAROUND_CMAKE_260_BUG}' -e's/void Init_OpenBabel/void Init_openbabel/' <${openbabel_SOURCE_DIR}/scripts/ruby/openbabel-ruby.txt >${openbabel_SOURCE_DIR}/scripts/ruby/openbabel-ruby.cpp\n          COMMAND ${CMAKE_COMMAND} -E remove ${openbabel_SOURCE_DIR}/scripts/ruby/openbabel-ruby.txt\n          MAIN_DEPENDENCY openbabel-ruby.i\n      )\n    endif (RUN_SWIG)\n\n    include_directories(\n        ${RUBY_INCLUDE_PATH}\n    )\n\n    add_library(bindings_ruby MODULE ${openbabel_SOURCE_DIR}/scripts/ruby/openbabel-ruby.cpp)\n    if(BINDINGS_ONLY)\n      target_link_libraries(bindings_ruby ${RUBY_LIBRARY} ${BABEL_SYSTEM_LIBRARY})\n    else()\n      target_link_libraries(bindings_ruby ${RUBY_LIBRARY} ${BABEL_LIBRARY})\n    endif()\n\n    set_target_properties(bindings_ruby PROPERTIES\n        OUTPUT_NAME openbabel\n        PREFIX \"\" )\n\n    if(NOT BINDINGS_ONLY)\n      add_dependencies(bindings_ruby openbabel)\n    endif()\n\n    install(TARGETS bindings_ruby\n            LIBRARY DESTINATION ${LIB_INSTALL_DIR}\n            COMPONENT bindings_ruby)\n\nendif (DO_RUBY_BINDINGS)\n\n###################\n# CSharp\n###################\n\nif (CSHARP_BINDINGS)\n  if (EXISTS ${openbabel_SOURCE_DIR}/scripts/csharp/openbabel-csharp.cpp OR RUN_SWIG)\n    if (NOT CSHARP_EXECUTABLE)\n      message(STATUS \"CSHARP_EXECUTABLE NOT defined. .NET bindings will NOT be created.\")\n    endif (NOT CSHARP_EXECUTABLE)\n\n    if (CSHARP_EXECUTABLE)\n      set(DO_CSHARP_BINDINGS ON BOOL)\n      message(STATUS \"CSharp bindings will be compiled\")\n    endif (CSHARP_EXECUTABLE)\n\n  else (EXISTS ${openbabel_SOURCE_DIR}/scripts/csharp/openbabel-csharp.cpp OR RUN_SWIG)\n    message(STATUS \"Warning: Csharp bindings NOT found. Generate using -DRUN_SWIG.\")\n  endif (EXISTS ${openbabel_SOURCE_DIR}/scripts/csharp/openbabel-csharp.cpp OR RUN_SWIG)\nendif (CSHARP_BINDINGS)\n\nif (DO_CSHARP_BINDINGS)\n\n    if (RUN_SWIG)\n      set(PLATFORM_TYPE \"\")\n      if (WIN32) # i.e. any Windows\n          if (CMAKE_GENERATOR MATCHES Win64$)\n              set(PLATFORM_TYPE \"/platform:anycpu\")\n          else()\n              set(PLATFORM_TYPE \"/platform:x86\")\n          endif()\n      endif(WIN32)\n      add_custom_command(OUTPUT ${openbabel_SOURCE_DIR}/scripts/csharp/openbabel-csharp.cpp ${openbabel_SOURCE_DIR}/scripts/csharp/OBDotNet.dll\n          COMMAND ${CMAKE_COMMAND} -E remove_directory ${openbabel_SOURCE_DIR}/scripts/csharp/src\n          COMMAND ${CMAKE_COMMAND} -E make_directory ${openbabel_SOURCE_DIR}/scripts/csharp/src\n          COMMAND ${CMAKE_COMMAND} -E copy ${openbabel_SOURCE_DIR}/scripts/csharp/OBDotNetAssemblyInfo.cs ${openbabel_SOURCE_DIR}/scripts/csharp/src\n          COMMAND ${SWIG_EXECUTABLE} -csharp -c++ -small -O -templatereduce -namespace OpenBabel -outdir ${openbabel_SOURCE_DIR}/scripts/csharp/src -I${openbabel_SOURCE_DIR}/include -I${openbabel_BINARY_DIR}/include -o ${openbabel_SOURCE_DIR}/scripts/csharp/openbabel-csharp.cpp ${openbabel_SOURCE_DIR}/scripts/openbabel-csharp.i\n          COMMAND ${CMAKE_COMMAND} -E chdir ${openbabel_SOURCE_DIR}/scripts/csharp/src ${CSHARP_EXECUTABLE} /target:library ${PLATFORM_TYPE} /keyfile:${openbabel_SOURCE_DIR}/scripts/csharp/obdotnet.snk /optimize /out:${openbabel_BINARY_DIR}/bin/${CMAKE_CFG_INTDIR}/OBDotNet.dll *.cs\n          COMMAND ${CMAKE_COMMAND} -E remove_directory ${openbabel_SOURCE_DIR}/scripts/csharp/src\n          MAIN_DEPENDENCY openbabel-csharp.i\n          WORKING_DIRECTORY ${openbabel_BINARY_DIR}/scripts\n      )\n    endif (RUN_SWIG)\n\n    add_library(bindings_csharp MODULE ${openbabel_SOURCE_DIR}/scripts/csharp/openbabel-csharp.cpp)\n    target_link_libraries(bindings_csharp ${BABEL_LIBRARY})\n    set_target_properties(bindings_csharp PROPERTIES\n        OUTPUT_NAME openbabel_csharp )\n    install(TARGETS bindings_csharp LIBRARY DESTINATION ${LIB_INSTALL_DIR})\n    install(FILES ${openbabel_SOURCE_DIR}/scripts/csharp/OBDotNet.dll DESTINATION ${LIB_INSTALL_DIR})\n\nendif (DO_CSHARP_BINDINGS)\n\n###################\n# PHP\n###################\n\nif (PHP_BINDINGS)\n  if (EXISTS ${openbabel_SOURCE_DIR}/scripts/php/openbabel-php.cpp OR RUN_SWIG)\n\n    FIND_PROGRAM(PHP_CONFIG_EXECUTABLE\n      NAMES php5-config php-config\n    )\n    if (NOT PHP_CONFIG_EXECUTABLE)\n      message(STATUS \"PHP-Config files NOT found. PHP bindings will NOT be compiled.\")\n    endif (NOT PHP_CONFIG_EXECUTABLE)\n\n    if(PHP_CONFIG_EXECUTABLE)\n      set(DO_PHP_BINDINGS ON BOOL)\n      message(STATUS \"PHP bindings will be compiled\")\n      execute_process(\n        COMMAND\n          ${PHP_CONFIG_EXECUTABLE} --includes\n        OUTPUT_VARIABLE\n          PHP_CONFIG_INCLUDES\n        RESULT_VARIABLE\n          PHP_CONFIG_RESULT\n      )\n      STRING(REPLACE \"\\n\" \"\" PHP_CONFIG_INCLUDES \"${PHP_CONFIG_INCLUDES}\")\n      STRING(REPLACE \"-I\" \"\" PHP_CONFIG_INCLUDES \"${PHP_CONFIG_INCLUDES}\")\n      STRING(REPLACE \" \" \";\" PHP_CONFIG_INCLUDES \"${PHP_CONFIG_INCLUDES}\")\n\n      execute_process(\n      \tCOMMAND\n      \t  ${PHP_CONFIG_EXECUTABLE} --extension-dir\n      \tOUTPUT_VARIABLE\n      \t  PHP_EXTENSION_DIR\n      )\n      STRING(REPLACE \"\\n\" \"\" PHP_EXTENSION_DIR \"${PHP_EXTENSION_DIR}\")\n    endif(PHP_CONFIG_EXECUTABLE)\n\n  else (EXISTS ${openbabel_SOURCE_DIR}/scripts/php/openbabel-php.cpp OR RUN_SWIG)\n    message(STATUS \"Warning: PHP bindings NOT found. Generate using -DRUN_SWIG.\")\n  endif (EXISTS ${openbabel_SOURCE_DIR}/scripts/php/openbabel-php.cpp OR RUN_SWIG)\nendif (PHP_BINDINGS)\n\nif (DO_PHP_BINDINGS)\n    include_directories(\n        ${PHP_CONFIG_INCLUDES}\n    )\n    if (RUN_SWIG)\n      add_custom_command(OUTPUT ${openbabel_SOURCE_DIR}/scripts/php/openbabel-php.cpp\n          COMMAND ${SWIG_EXECUTABLE} -php -c++ -small -O -templatereduce -naturalvar -I${openbabel_SOURCE_DIR}/include -I${openbabel_BINARY_DIR}/include -o ${openbabel_SOURCE_DIR}/scripts/php/openbabel-php.cpp -outdir ${openbabel_SOURCE_DIR}/scripts/php ${openbabel_SOURCE_DIR}/scripts/openbabel-php.i\n          COMMAND sed -i -e's/abstract class OBForceField/class OBForceField/g' -e's/abstract class OBFingerprint/class OBFingerprint/g' -e's/abstract class OBOp/class OBOp/g' -e 's/static function FindType/function FindType/g' ${openbabel_SOURCE_DIR}/scripts/php/openbabel.php\n          MAIN_DEPENDENCY openbabel-php.i\n      )\n    endif (RUN_SWIG)\n\n    # set openbabel.php include path\n    execute_process(COMMAND sed -i -e \"s,include_once '\\\\(.*\\\\)openbabel.php,include_once '${CMAKE_INSTALL_PREFIX}/${LIB_INSTALL_DIR}/openbabel.php,g\" ${openbabel_SOURCE_DIR}/scripts/php/baphpel.php)\n\n    add_library(bindings_php MODULE ${openbabel_SOURCE_DIR}/scripts/php/openbabel-php.cpp)\n    # Overriding --no-undefined linker flag, since PHP library should not be linked into extension.\n    set(PHP_EXTRA_LINK_FLAGS \"-Wl,--unresolved-symbols=ignore-all\")\n    if(BINDINGS_ONLY)\n      target_link_libraries(bindings_php ${BABEL_SYSTEM_LIBRARY} ${PHP_EXTRA_LINK_FLAGS})\n    else()\n      target_link_libraries(bindings_php ${BABEL_LIBRARY} ${PHP_EXTRA_LINK_FLAGS})\n    endif()\n\n    set_target_properties(bindings_php PROPERTIES\n        PREFIX \"\"\n        OUTPUT_NAME openbabel-php)\n    if(NOT BINDINGS_ONLY)\n      add_dependencies(bindings_php openbabel)\n    endif()\n\n    install(TARGETS bindings_php\n            LIBRARY DESTINATION ${PHP_EXTENSION_DIR}\n\t    COMPONENT bindings_php)\n    install(FILES ${openbabel_SOURCE_DIR}/scripts/php/openbabel.php\n            DESTINATION ${LIB_INSTALL_DIR}\n\t    COMPONENT bindings_php)\n\tinstall(FILES ${openbabel_SOURCE_DIR}/scripts/php/baphpel.php\n\t        DESTINATION ${LIB_INSTALL_DIR}\n\t    COMPONENT bindings_php)\n\nendif (DO_PHP_BINDINGS)\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-openbabel-2.4.0-7bcqjpxbvwoqzbfncizh3bbd2lgj23bp/spack-src/src/GUI/babel2.ico",
        "/tmp/vanessa/spack-stage/spack-stage-openbabel-2.4.0-7bcqjpxbvwoqzbfncizh3bbd2lgj23bp/spack-src/src/formats/mdlformat.cpp",
        "/tmp/vanessa/spack-stage/spack-stage-openbabel-2.4.0-7bcqjpxbvwoqzbfncizh3bbd2lgj23bp/spack-src/src/formats/turbomoleformat.cpp",
        "/tmp/vanessa/spack-stage/spack-stage-openbabel-2.4.0-7bcqjpxbvwoqzbfncizh3bbd2lgj23bp/spack-src/.git/objects/pack/pack-32fd66be6987739e94d5f10c6ecea7620f1e3377.idx",
        "/tmp/vanessa/spack-stage/spack-stage-openbabel-2.4.0-7bcqjpxbvwoqzbfncizh3bbd2lgj23bp/spack-src/.git/objects/pack/pack-32fd66be6987739e94d5f10c6ecea7620f1e3377.pack",
        "/tmp/vanessa/spack-stage/spack-stage-openbabel-2.4.0-7bcqjpxbvwoqzbfncizh3bbd2lgj23bp/spack-src/data/splash.png",
        "/tmp/vanessa/spack-stage/spack-stage-openbabel-2.4.0-7bcqjpxbvwoqzbfncizh3bbd2lgj23bp/spack-src/data/ghemical.prm",
        "/tmp/vanessa/spack-stage/spack-stage-openbabel-2.4.0-7bcqjpxbvwoqzbfncizh3bbd2lgj23bp/spack-src/test/files/tencmpds.sdf.gz",
        "/tmp/vanessa/spack-stage/spack-stage-openbabel-2.4.0-7bcqjpxbvwoqzbfncizh3bbd2lgj23bp/spack-src/test/files/c3.cml.gz",
        "/tmp/vanessa/spack-stage/spack-stage-openbabel-2.4.0-7bcqjpxbvwoqzbfncizh3bbd2lgj23bp/spack-src/test/files/c4.mol2.gz",
        "/tmp/vanessa/spack-stage/spack-stage-openbabel-2.4.0-7bcqjpxbvwoqzbfncizh3bbd2lgj23bp/spack-src/test/files/aromatics.png",
        "/tmp/vanessa/spack-stage/spack-stage-openbabel-2.4.0-7bcqjpxbvwoqzbfncizh3bbd2lgj23bp/spack-src/test/files/alias.png",
        "/tmp/vanessa/spack-stage/spack-stage-openbabel-2.4.0-7bcqjpxbvwoqzbfncizh3bbd2lgj23bp/spack-src/test/files/c5.smi.gz",
        "/tmp/vanessa/spack-stage/spack-stage-openbabel-2.4.0-7bcqjpxbvwoqzbfncizh3bbd2lgj23bp/spack-src/test/files/1ubq.pdb.gz",
        "/tmp/vanessa/spack-stage/spack-stage-openbabel-2.4.0-7bcqjpxbvwoqzbfncizh3bbd2lgj23bp/spack-src/test/files/ziptest.sdf.gz",
        "/tmp/vanessa/spack-stage/spack-stage-openbabel-2.4.0-7bcqjpxbvwoqzbfncizh3bbd2lgj23bp/spack-src/test/files/five_obabel.sdf.gz",
        "/tmp/vanessa/spack-stage/spack-stage-openbabel-2.4.0-7bcqjpxbvwoqzbfncizh3bbd2lgj23bp/spack-src/test/files/many.sdf.gz",
        "/tmp/vanessa/spack-stage/spack-stage-openbabel-2.4.0-7bcqjpxbvwoqzbfncizh3bbd2lgj23bp/spack-src/scripts/csharp/OBDotNetAssemblyInfo.cs",
        "/tmp/vanessa/spack-stage/spack-stage-openbabel-2.4.0-7bcqjpxbvwoqzbfncizh3bbd2lgj23bp/spack-src/scripts/csharp/obdotnet.snk",
        "/tmp/vanessa/spack-stage/spack-stage-openbabel-2.4.0-7bcqjpxbvwoqzbfncizh3bbd2lgj23bp/spack-src/doc/splash.png",
        "/tmp/vanessa/spack-stage/spack-stage-openbabel-2.4.0-7bcqjpxbvwoqzbfncizh3bbd2lgj23bp/spack-src/doc/dioxin.png",
        "/tmp/vanessa/spack-stage/spack-stage-openbabel-2.4.0-7bcqjpxbvwoqzbfncizh3bbd2lgj23bp/spack-src/doc/images/tetraplanar.png",
        "/tmp/vanessa/spack-stage/spack-stage-openbabel-2.4.0-7bcqjpxbvwoqzbfncizh3bbd2lgj23bp/spack-src/doc/images/spectrophore_cage.png",
        "/tmp/vanessa/spack-stage/spack-stage-openbabel-2.4.0-7bcqjpxbvwoqzbfncizh3bbd2lgj23bp/spack-src/doc/images/energyconformerscore.png",
        "/tmp/vanessa/spack-stage/spack-stage-openbabel-2.4.0-7bcqjpxbvwoqzbfncizh3bbd2lgj23bp/spack-src/doc/images/SPshapes.png",
        "/tmp/vanessa/spack-stage/spack-stage-openbabel-2.4.0-7bcqjpxbvwoqzbfncizh3bbd2lgj23bp/spack-src/doc/images/rmsdconformerscore.png",
        "/tmp/vanessa/spack-stage/spack-stage-openbabel-2.4.0-7bcqjpxbvwoqzbfncizh3bbd2lgj23bp/spack-src/doc/images/gettransref.png",
        "/tmp/vanessa/spack-stage/spack-stage-openbabel-2.4.0-7bcqjpxbvwoqzbfncizh3bbd2lgj23bp/spack-src/doc/images/tetranonplanar.png",
        "/tmp/vanessa/spack-stage/spack-stage-openbabel-2.4.0-7bcqjpxbvwoqzbfncizh3bbd2lgj23bp/spack-src/doc/images/getcisref.png",
        "/tmp/vanessa/spack-stage/spack-stage-openbabel-2.4.0-7bcqjpxbvwoqzbfncizh3bbd2lgj23bp/spack-src/doc/images/cistrans.png",
        "/tmp/vanessa/spack-stage/spack-stage-openbabel-2.4.0-7bcqjpxbvwoqzbfncizh3bbd2lgj23bp/spack-src/doc/images/tetrahedral.png",
        "/tmp/vanessa/spack-stage/spack-stage-openbabel-2.4.0-7bcqjpxbvwoqzbfncizh3bbd2lgj23bp/spack-src/doc/images/squareplanar.png"
    ],
    "total_files": 1131
}