{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-hipsycl-0.8.0-bm2pplysbyoa7r4cnjpzqhywsidzoozt/spack-src/contrib/HIP/tests/src/dynamicLoading/complex_loading_behavior.cpp": "/*\nCopyright (c) 2019 Advanced Micro Devices, Inc. All rights reserved.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\n\n/* HIT_START\n * BUILD_CMD: libfoo %hc %S/%s -o libfoo.so -fPIC -lpthread -shared -DTEST_SHARED_LIBRARY\n * BUILD_CMD: %t %hc %S/%s -o %T/%t -ldl\n * TEST: %t\n * HIT_END\n */\n\n#if !defined(TEST_SHARED_LIBRARY)\n\n#include <dlfcn.h>\n#include <iostream>\n#include <hip/hip_runtime.h>\n\n#define CHECK(cmd)                                                                                 \\\n    {                                                                                              \\\n        hipError_t error = cmd;                                                                    \\\n        if (error != hipSuccess) {                                                                 \\\n            fprintf(stderr, \"error: '%s'(%d) at %s:%d\\n\", hipGetErrorString(error), error,         \\\n                    __FILE__, __LINE__);                                                           \\\n            return (EXIT_FAILURE);                                                                    \\\n        }                                                                                          \\\n    }\n\n__global__ void vector_add(float* C, float* A, float* B, size_t N) {\n  size_t offset = hipBlockIdx_x * hipBlockDim_x + hipThreadIdx_x;\n  size_t stride = hipBlockDim_x * hipGridDim_x;\n  for (size_t i = offset; i < N; i += stride) {\n    C[i] = A[i] + B[i];\n  }\n}\n\nint launch_local_kernel() {\n    float *A_d, *B_d, *C_d;\n    float *A_h, *B_h, *C_h;\n    size_t N = 1000000;\n    size_t Nbytes = N * sizeof(float);\n    static int device = 0;\n    CHECK(hipSetDevice(device));\n    hipDeviceProp_t props;\n    CHECK(hipGetDeviceProperties(&props, device /*deviceID*/));\n    A_h = (float*)malloc(Nbytes);\n    CHECK(A_h == 0 ? hipErrorMemoryAllocation : hipSuccess);\n    B_h = (float*)malloc(Nbytes);\n    CHECK(B_h == 0 ? hipErrorMemoryAllocation : hipSuccess);\n    C_h = (float*)malloc(Nbytes);\n    CHECK(C_h == 0 ? hipErrorMemoryAllocation : hipSuccess);\n    // Fill with Phi + i\n    for (size_t i = 0; i < N; i++) {\n        A_h[i] = 1.618f + i;\n        B_h[i] = 1.618f + i;\n    }\n\n    CHECK(hipMalloc(&A_d, Nbytes));\n    CHECK(hipMalloc(&B_d, Nbytes));\n    CHECK(hipMalloc(&C_d, Nbytes));\n    CHECK(hipMemcpy(A_d, A_h, Nbytes, hipMemcpyHostToDevice));\n    CHECK(hipMemcpy(B_d, B_h, Nbytes, hipMemcpyHostToDevice));\n\n    const unsigned blocks = 512;\n    const unsigned threadsPerBlock = 256;\n    hipLaunchKernelGGL(vector_add, dim3(blocks), dim3(threadsPerBlock), 0, 0, C_d, A_d, B_d, N);\n    CHECK(hipMemcpy(C_h, C_d, Nbytes, hipMemcpyDeviceToHost));\n\n    CHECK(hipFree(A_d));\n    CHECK(hipFree(B_d));\n    CHECK(hipFree(C_d));\n\n    free(A_h);\n    free(B_h);\n    free(C_h);\n\n    std::cout << \"PASSED!\\n\";\n    return 0;\n}\n\nint launch_dynamically_loaded_kernel() {\n  void* handle = dlopen(\"./libfoo.so\", RTLD_LAZY);\n  if (!handle) {\n    std::cout << dlerror() << \"\\n\";\n    return -1;\n  }\n  std::cout << \"loaded libfoo.so\\n\";\n\n  void* sym = dlsym(handle, \"foo\");\n  if (!sym) {\n    std::cout << \"unable to locate foo within libfoo.so\\n\";\n    std::cout << dlerror() << \"\\n\";\n    dlclose(handle);\n    return -1;\n  }\n\n  int(*fp)() = reinterpret_cast<int(*)()>(sym);\n\n  int ret = fp();\n  if (ret) {\n    std::cout << \"dynamic launch failed\\n\";\n  } else {\n    std::cout << \"dynamic launch succeeded\\n\";\n  }\n\n  dlclose(handle);\n  return ret;\n}\n\nint main() {\n  int ret = 0;\n  ret = launch_local_kernel();\n  if (ret) {\n    return ret;\n  }\n\n  ret = launch_dynamically_loaded_kernel();\n  if (ret) {\n    return ret;\n  }\n\n  return 0;\n}\n\n#else // !defined(TEST_SHARED_LIBRARY)\n\n#include <dlfcn.h>\n#include <iostream>\n#include <hip/hip_runtime.h>\n\n#define CHECK(cmd)                                                                                 \\\n    {                                                                                              \\\n        hipError_t error = cmd;                                                                    \\\n        if (error != hipSuccess) {                                                                 \\\n            fprintf(stderr, \"error: '%s'(%d) at %s:%d\\n\", hipGetErrorString(error), error,         \\\n                    __FILE__, __LINE__);                                                           \\\n            return (EXIT_FAILURE);                                                                 \\\n        }                                                                                          \\\n    }\n\n__global__ void vadd(float* C, float* A, float* B, size_t N) {\n  size_t offset = hipBlockIdx_x * hipBlockDim_x + hipThreadIdx_x;\n  size_t stride = hipBlockDim_x * hipGridDim_x;\n  for (size_t i = offset; i < N; i += stride) {\n    C[i] = A[i] + B[i];\n  }\n}\n\nextern \"C\" int foo() {\n    float *A_d, *B_d, *C_d;\n    float *A_h, *B_h, *C_h;\n    size_t N = 1000000;\n    size_t Nbytes = N * sizeof(float);\n    static int device = 0;\n    CHECK(hipSetDevice(device));\n    hipDeviceProp_t props;\n    CHECK(hipGetDeviceProperties(&props, device /*deviceID*/));\n    A_h = (float*)malloc(Nbytes);\n    CHECK(A_h == 0 ? hipErrorMemoryAllocation : hipSuccess);\n    B_h = (float*)malloc(Nbytes);\n    CHECK(B_h == 0 ? hipErrorMemoryAllocation : hipSuccess);\n    C_h = (float*)malloc(Nbytes);\n    CHECK(C_h == 0 ? hipErrorMemoryAllocation : hipSuccess);\n    // Fill with Phi + i\n    for (size_t i = 0; i < N; i++) {\n        A_h[i] = 1.618f + i;\n        B_h[i] = 1.618f + i;\n    }\n\n    CHECK(hipMalloc(&A_d, Nbytes));\n    CHECK(hipMalloc(&B_d, Nbytes));\n    CHECK(hipMalloc(&C_d, Nbytes));\n    CHECK(hipMemcpy(A_d, A_h, Nbytes, hipMemcpyHostToDevice));\n    CHECK(hipMemcpy(B_d, B_h, Nbytes, hipMemcpyHostToDevice));\n\n    const unsigned blocks = 512;\n    const unsigned threadsPerBlock = 256;\n    std::cout << \"Launch vadd\\n\";\n    hipLaunchKernelGGL(vadd, dim3(blocks), dim3(threadsPerBlock), 0, 0, C_d, A_d, B_d, N);\n    CHECK(hipMemcpy(C_h, C_d, Nbytes, hipMemcpyDeviceToHost));\n\n    CHECK(hipFree(A_d));\n    CHECK(hipFree(B_d));\n    CHECK(hipFree(C_d));\n\n    free(A_h);\n    free(B_h);\n    free(C_h);\n\n    return 0;\n}\n\n#endif // !defined(TEST_SHARED_LIBRARY)\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-hipsycl-0.8.0-bm2pplysbyoa7r4cnjpzqhywsidzoozt/spack-src/.git/objects/pack/pack-0a25bf14f83690d38adeeab139c8612cb395ac50.pack",
        "/tmp/vanessa/spack-stage/spack-stage-hipsycl-0.8.0-bm2pplysbyoa7r4cnjpzqhywsidzoozt/spack-src/.git/objects/pack/pack-0a25bf14f83690d38adeeab139c8612cb395ac50.idx",
        "/tmp/vanessa/spack-stage/spack-stage-hipsycl-0.8.0-bm2pplysbyoa7r4cnjpzqhywsidzoozt/spack-src/.git/modules/contrib/HIP/objects/pack/pack-1d91361f878e825797b4079b3cb64fd62a61e0ee.idx",
        "/tmp/vanessa/spack-stage/spack-stage-hipsycl-0.8.0-bm2pplysbyoa7r4cnjpzqhywsidzoozt/spack-src/.git/modules/contrib/HIP/objects/pack/pack-1d91361f878e825797b4079b3cb64fd62a61e0ee.pack",
        "/tmp/vanessa/spack-stage/spack-stage-hipsycl-0.8.0-bm2pplysbyoa7r4cnjpzqhywsidzoozt/spack-src/.git/modules/contrib/hipCPU/objects/pack/pack-f36d1b33d0d8d5920c257c8200e9d60c96df1bc8.pack",
        "/tmp/vanessa/spack-stage/spack-stage-hipsycl-0.8.0-bm2pplysbyoa7r4cnjpzqhywsidzoozt/spack-src/.git/modules/contrib/hipCPU/objects/pack/pack-f36d1b33d0d8d5920c257c8200e9d60c96df1bc8.idx",
        "/tmp/vanessa/spack-stage/spack-stage-hipsycl-0.8.0-bm2pplysbyoa7r4cnjpzqhywsidzoozt/spack-src/contrib/HIP/tests/src/runtimeApi/module/vcpy_kernel.code",
        "/tmp/vanessa/spack-stage/spack-stage-hipsycl-0.8.0-bm2pplysbyoa7r4cnjpzqhywsidzoozt/spack-src/contrib/HIP/tests/hipify-clang/unit_tests/libraries/cuSPARSE/cuSPARSE_12.cu",
        "/tmp/vanessa/spack-stage/spack-stage-hipsycl-0.8.0-bm2pplysbyoa7r4cnjpzqhywsidzoozt/spack-src/contrib/HIP/hipify-clang/patches/patch_for_clang_8.0.0_bug_38811.zip",
        "/tmp/vanessa/spack-stage/spack-stage-hipsycl-0.8.0-bm2pplysbyoa7r4cnjpzqhywsidzoozt/spack-src/contrib/HIP/hipify-clang/patches/patch_for_clang_7.1.0_bug_38811.zip",
        "/tmp/vanessa/spack-stage/spack-stage-hipsycl-0.8.0-bm2pplysbyoa7r4cnjpzqhywsidzoozt/spack-src/contrib/HIP/hipify-clang/patches/patch_for_clang_7.0.0_bug_38811.zip",
        "/tmp/vanessa/spack-stage/spack-stage-hipsycl-0.8.0-bm2pplysbyoa7r4cnjpzqhywsidzoozt/spack-src/contrib/HIP/hipify-clang/patches/patch_for_clang_7.0.1_bug_38811.zip",
        "/tmp/vanessa/spack-stage/spack-stage-hipsycl-0.8.0-bm2pplysbyoa7r4cnjpzqhywsidzoozt/spack-src/contrib/HIP/samples/1_Utils/hipCommander/nullkernel.hsaco",
        "/tmp/vanessa/spack-stage/spack-stage-hipsycl-0.8.0-bm2pplysbyoa7r4cnjpzqhywsidzoozt/spack-src/doc/img/sycl-targets.png",
        "/tmp/vanessa/spack-stage/spack-stage-hipsycl-0.8.0-bm2pplysbyoa7r4cnjpzqhywsidzoozt/spack-src/doc/img/hipsycl-compilation.png",
        "/tmp/vanessa/spack-stage/spack-stage-hipsycl-0.8.0-bm2pplysbyoa7r4cnjpzqhywsidzoozt/spack-src/doc/img/logo/logo-color-dark.png",
        "/tmp/vanessa/spack-stage/spack-stage-hipsycl-0.8.0-bm2pplysbyoa7r4cnjpzqhywsidzoozt/spack-src/doc/img/logo/logo-high-contrast.png",
        "/tmp/vanessa/spack-stage/spack-stage-hipsycl-0.8.0-bm2pplysbyoa7r4cnjpzqhywsidzoozt/spack-src/doc/img/logo/logo-bw.png",
        "/tmp/vanessa/spack-stage/spack-stage-hipsycl-0.8.0-bm2pplysbyoa7r4cnjpzqhywsidzoozt/spack-src/doc/img/logo/logo-high-contrast-dark.png",
        "/tmp/vanessa/spack-stage/spack-stage-hipsycl-0.8.0-bm2pplysbyoa7r4cnjpzqhywsidzoozt/spack-src/doc/img/logo/logo-color.png"
    ],
    "total_files": 851
}