{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/configure.ac": "# DO NOT EDIT ./configure FILE\n# One should edit configure.ac and the run autoconf in this\n# directory. Also the resulting \"configure\" is stored on the git,\n# so as to allow people not to install a recent autoconf on their\n# system.\n# If you modify configure.ac, remember to run\n# autoconf and then commit both files to the git repository.\n\n# we require a recent version\n# notice that autoconf is not necessary on user's machine, but only\n# if one has to update configure.ac\nAC_PREREQ([2.68])\nAC_INIT([PLUMED], [2])\n\n##################################################################\n# In order to add m4 macros, put then in a m4 directory and include them here.\n# E.g.:\n# m4_include([./m4/m4_ax_openmp.m4])\n\n##################################################################\n# Here we define a few useful macros\n\n# PLUMED_CONFIG_ENABLE(variablename,optionname,doc,default)\n# notice that variablename and optionname are likely identical,\n# they just need to be different with optionname contains a \"-\"\n# (not allowed in shell variable names)\nAC_DEFUN([PLUMED_CONFIG_ENABLE], [\nm4_bpatsubst([$1],-,_)=\nAC_ARG_ENABLE([$1],\n  AS_HELP_STRING([--enable-$1], [enable $2, default: $3]),\n  [case \"${enableval}\" in\n             (yes) m4_bpatsubst([$1],-,_)=true ;;\n             (no)  m4_bpatsubst([$1],-,_)=false ;;\n             (*)   AC_MSG_ERROR([wrong argument to --enable-$1]) ;;\n  esac],\n  [case \"$3\" in\n             (yes) m4_bpatsubst([$1],-,_)=true ;;\n             (no)  m4_bpatsubst([$1],-,_)=false ;;\n  esac]\n)\n])\n\n# PLUMED_CHECK_CXXFLAG(flag)\n# use it to check if a flag is available on this compiler\nAC_DEFUN([PLUMED_CHECK_CXXFLAG], [\n  save_CXXFLAGS=\"$CXXFLAGS\"\n  CXXFLAGS=\"$CXXFLAGS $1\"\n  AC_MSG_CHECKING([whether $CXX accepts $1])\n  AC_COMPILE_IFELSE([AC_LANG_PROGRAM([])],\n    [\n      AC_LINK_IFELSE([AC_LANG_PROGRAM([])],\n        [AC_MSG_RESULT([yes])],\n        [AC_MSG_RESULT([not linking]); CXXFLAGS=\"$save_CXXFLAGS\"])\n    ],\n    [AC_MSG_RESULT([no]); CXXFLAGS=\"$save_CXXFLAGS\"]\n  )\n])\n\n# PLUMED_CHECK_CFLAG(flag)\n# use it to check if a flag is available on this compiler\nAC_DEFUN([PLUMED_CHECK_CFLAG], [\n  AC_LANG_PUSH(C)\n  save_CFLAGS=\"$CFLAGS\"\n  CFLAGS=\"$CFLAGS $1\"\n  AC_MSG_CHECKING([whether $CC accepts $1])\n  AC_COMPILE_IFELSE([AC_LANG_PROGRAM([])],\n    [\n      AC_LINK_IFELSE([AC_LANG_PROGRAM([])],\n        [AC_MSG_RESULT([yes])],\n        [AC_MSG_RESULT([not linking]); CCFLAGS=\"$save_CCFLAGS\"])\n    ],\n    [AC_MSG_RESULT([no]); CCFLAGS=\"$save_CCFLAGS\"]\n  )\n  AC_LANG_POP\n])\n\n# PLUMED_CHECK_LDFLAGS(flag)\n# use it to check if a flag is available on this compiler\nAC_DEFUN([PLUMED_CHECK_LDFLAGS], [\n  save_LDFLAGS=\"$LDFLAGS\"\n  LDFLAGS=\"$LDFLAGS $1\"\n  AC_MSG_CHECKING([whether LDFLAGS can contain $1])\n  AC_LINK_IFELSE([AC_LANG_PROGRAM([])],\n    [AC_MSG_RESULT([yes])],\n    [AC_MSG_RESULT([no]); LDFLAGS=\"$save_LDFLAGS\"])\n])\n\n# PLUMED_SEARCH_LIBS(function,search-libs[,action-if-found][,action-if-not-found][,other-libraries])\n# same as AC_SEARCH_LIBS, but does not try any library unless $libsearch==true\n# Should be used instead of AC_SEARCH_LIBS in order to make --disable-libsearch work correctly\nAC_DEFUN([PLUMED_SEARCH_LIBS], [\n  if test \"${libsearch}\" == true ; then\n    AC_SEARCH_LIBS([$1],[$2],[$3],[$4],[$5])\n  else\n    AC_SEARCH_LIBS([$1],[],[$3],[$4],[])\n  fi\n])\n\n# PLUMED_CHECK_PACKAGE(header,function,define[,library])\n# first we check if the header is present. if so, we check if the given function can be found.\n# if it cannot be found and the fourth argument (library) has been supplied, we look for it\n# in the library. finally, we set the define flag\nAC_DEFUN([PLUMED_CHECK_PACKAGE], [\n    found=ko\n    $3=no\n    AC_CHECK_HEADER( [$1],[\n      PLUMED_SEARCH_LIBS([$2],[$4],[found=ok])\n    ])\n    if test $found == ok ; then\n       AC_DEFINE([$3])\n       $3=yes\n    else\n       AC_MSG_WARN([cannot enable $3]) \n    fi\n])\n\n# PLUMED_CHECK_CXX_PACKAGE(name,program,define[,library])\n# Similar to PLUMED_CHECK_PACKAGE but suitable for checking C++ libraries.\n# Name is just a string used in the configure log\n# program is a string containing a short C++ program that should compiled.\n# If present and necessary, library is also linked.\nAC_DEFUN([PLUMED_CHECK_CXX_PACKAGE], [\n    found=ko\n    $3=no\n    if test \"${libsearch}\" == true ; then\n      testlibs=\"$4\"\n    else\n      testlibs=\"\"\n    fi\n    for testlib in \"\" $testlibs\n    do\n      save_LIBS=\"$LIBS\"\n      if test -n \"$testlib\" ; then\n        AC_MSG_CHECKING([$1 with -l$testlib])\n        LIBS=\"-l$testlib $LIBS\"\n      else\n        AC_MSG_CHECKING([$1 without extra libs])\n      fi\n      AC_LINK_IFELSE([AC_LANG_SOURCE([$2])],\n          [found=ok]\n          [AC_MSG_RESULT([yes])],\n          [AC_MSG_RESULT([no])]\n      )\n      if test $found == ok ; then\n        break\n      fi\n      LIBS=\"$save_LIBS\"\n    done\n    if test $found == ok ; then\n      AC_DEFINE([$3])\n      $3=yes\n    else\n      AC_MSG_WARN([cannot enable $3]) \n      LIBS=\"$save_LIBS\"\n    fi\n])\n\n##################################################################\n\nAC_MSG_NOTICE([Optional modules are disabled by default])\nrm -f src/*.on src/*.off\n\nAC_ARG_ENABLE([modules],\n  AS_HELP_STRING([--enable-modules], [all/none/reset or : separated list such as +crystallization:-bias default: reset]),\n  [\n   rm -f src/*.on src/*.off\n   if test \"${enableval}\" == yes ; then\n     enableval=reset\n   fi\n   if test \"${enableval}\" == no ; then\n     enableval=none\n   fi\n   for modules_mod in `echo \"${enableval}\" | sed 's/:/ /g' | sed 's/+/ +/g' | sed 's/-/ -/g'`\n   do\n     case \"$modules_mod\" in\n     (none)\n       AC_MSG_NOTICE([Disabling all optional modules])\n       rm -f src/*.off src/*.on\n       touch $(grep default-on src/*/module.type | sed \"s|/module.type:.*|.off|\") ;;\n     (all)\n       AC_MSG_NOTICE([Enabling all optional modules])\n       rm -f src/*.off src/*.off\n       touch $(grep default-off src/*/module.type | sed \"s|/module.type:.*|.on|\") ;;\n     (reset)\n        AC_MSG_NOTICE([Resetting modules to default])\n        rm -f src/*.on src/*.off ;;\n     (-*)\n       modules_mod=`echo \"${modules_mod}\" | sed \"s|-||\"`\n       if test ! -f src/$modules_mod/module.type ; then\n         AC_MSG_ERROR([trying to remove module $modules_mod which does not exist])\n       fi\n       AC_MSG_NOTICE([Disabling module ${modules_mod}])\n       rm -f src/$modules_mod.on\n       touch src/$modules_mod.off ;;\n     (+*)\n       modules_mod=`echo \"${modules_mod}\" | sed \"s|+||\"`\n       if test ! -f src/$modules_mod/module.type ; then\n         AC_MSG_ERROR([trying to add module $modules_mod which does not exist])\n       fi\n       AC_MSG_NOTICE([Enabling module ${modules_mod}])\n       rm -f src/$modules_mod.off\n       touch src/$modules_mod.on ;;\n     (*)\n       if test ! -f src/$modules_mod/module.type ; then\n         AC_MSG_ERROR([trying to add module $modules_mod which does not exist])\n       fi\n       AC_MSG_NOTICE([Enabling module ${modules_mod}])\n       rm -f src/$modules_mod.off\n       touch src/$modules_mod.on ;;\n     esac\n   done\n  ]\n  ,\n  []\n)\n\n\n# set enable flags for ./configure\n\n# This can be disabled when configuring within a package manager\n# such as macports to make sure that only libraries explicitly\n# listed in LDFLAGS are linked\nPLUMED_CONFIG_ENABLE([libsearch],[search for libraries],[yes])\n\n# This can be disabled to avoid the extra tests for static patching.\n# In the future, when this is disabled, we could disable the \"--static\" flag\n# of \"plumed patch\"\nPLUMED_CONFIG_ENABLE([static-patch],[allow statically linking plumed],[yes])\n\nPLUMED_CONFIG_ENABLE([doc],[documentation],[yes])\nPLUMED_CONFIG_ENABLE([pdfdoc],[pdf version of the manual],[no])\nPLUMED_CONFIG_ENABLE([debug],[debugging],[no])\nPLUMED_CONFIG_ENABLE([gcov],[gcov to estimate code coverage],[no])\nPLUMED_CONFIG_ENABLE([basic-warnings],[basic warnings],[yes])\nPLUMED_CONFIG_ENABLE([fussy],[fussy warnings],[no])\nPLUMED_CONFIG_ENABLE([debug-glibcxx],[enable boundary check],[no])\nPLUMED_CONFIG_ENABLE([shared],[shared libs],[yes])\nPLUMED_CONFIG_ENABLE([dependency-tracking],[dependency tracking],[yes])\nPLUMED_CONFIG_ENABLE([rpath],[store rpath],[no])\nPLUMED_CONFIG_ENABLE([cxx-exceptions],[c++ exceptions],[yes])\nPLUMED_CONFIG_ENABLE([ld-r],[group object files],[yes])\nPLUMED_CONFIG_ENABLE([ar-cr],[use ar to build libplumedWrapper.a],[yes])\nPLUMED_CONFIG_ENABLE([mpi],[search for mpi],[yes])\nPLUMED_CONFIG_ENABLE([external-lapack],[search for external lapack],[yes])\nPLUMED_CONFIG_ENABLE([external-blas],[search for external blas],[yes])\nPLUMED_CONFIG_ENABLE([molfile-plugins],[use molfile_plugins],[yes])\nPLUMED_CONFIG_ENABLE([external-molfile-plugins],[search for external molfile_plugins],[yes])\nPLUMED_CONFIG_ENABLE([matheval],[search for matheval],[yes])\nPLUMED_CONFIG_ENABLE([zlib],[search for zlib],[yes])\nPLUMED_CONFIG_ENABLE([readdir-r],[search for readdir_r (threadsafe)],[yes])\nPLUMED_CONFIG_ENABLE([cregex],[search for C regular expression],[yes])\nPLUMED_CONFIG_ENABLE([dlopen],[search for dlopen],[yes])\nPLUMED_CONFIG_ENABLE([execinfo],[search for execinfo],[yes])\nPLUMED_CONFIG_ENABLE([gsl],[search for gsl],[yes])\nPLUMED_CONFIG_ENABLE([xdrfile],[search for xdrfile],[yes])\nPLUMED_CONFIG_ENABLE([boost_graph],[search for boost graph],[no])\nPLUMED_CONFIG_ENABLE([boost_serialization],[search for boost serialization],[no])\nPLUMED_CONFIG_ENABLE([fftw],[search for fftw],[no])\n\nAC_ARG_VAR(SOEXT,[extension of dynamic libraries (so/dylib)])\nAC_ARG_VAR(STATIC_LIBS,[variables that should be linked statically directly to MD code - configure will add here -ldl if necessary ])\nAC_ARG_VAR(LDSHARED,[command for linking shared library - configure will use CXX plus the proper flags ])\nAC_ARG_VAR(MPIEXEC,[command to run mpi programs in tests - default not specified, which means use PLUMED_MPIRUN env var at runtime for backward compatibility])\n\n\n# by default use -O flag\n# we override the autoconf default (-g) because in release build we do not want to\n# include symbol information (obj files are huge)\nif test -z \"$CXXFLAGS\"\nthen\n  CXXFLAGS=-O3\nfi\n\n# this is list if copied from a generated ./configure script\n# the reason why I put it here explicitly is that I want a\n# correct fallback list to be searched after preferred choices\n# (e.g. MPI) have been checked.\ncompilers=\"g++ cxx icpc gpp aCC CC cxx cc++ cl.exe FCC KCC RCC xlC_r xlC\"\n\n# if searching for MPI, try first mpi-like compilers\nif test $mpi == true ; then\ncompilers=\"mpic++ mpicxx mpiicpc openmpic++ openmpicxx $compilers\"\nfi\n\n# do the actual search\nAC_PROG_CXX([$compilers])\n\n# for c, the standard list is used\nAC_PROG_CC\n\n# also setup Fortran compiler\n# this is optional, and can be used in the late part of this \n# script to verify that fortran can indeed link properly the\n# a c++ library\nAC_PROG_FC\n\n# we use C++ for all the autoconf tests\nAC_LANG(C++)\n\n# log the initial flags\nLD=\"$CXX\"\n\nif test -z \"$LDSHARED\" ; then\n  LDSHARED=\"$CXX\"\nfi\n\nAC_MSG_NOTICE([Initial CXX:         $CXX])\nAC_MSG_NOTICE([Initial CXXFLAGS:    $CXXFLAGS])\nAC_MSG_NOTICE([Initial CPPFLAGS:    $CPPFLAGS])\nAC_MSG_NOTICE([Initial CFLAGS:      $CFLAGS])\nAC_MSG_NOTICE([Initial LDFLAGS:     $LDFLAGS])\nAC_MSG_NOTICE([Initial LIBS:        $LIBS])\nAC_MSG_NOTICE([Initial STATIC_LIBS: $STATIC_LIBS])\nAC_MSG_NOTICE([Initial LD:          $LD])\nAC_MSG_NOTICE([Initial LDSHARED:    $LDSHARED])\nAC_MSG_NOTICE([Initial SOEXT:       $SOEXT])\n\n# check C++ flags\nif test $shared == true\nthen\n  PLUMED_CHECK_CXXFLAG([-fPIC])\n  PLUMED_CHECK_CFLAG([-fPIC])\nfi\n\nif test $basic_warnings == true\nthen\n  PLUMED_CHECK_CXXFLAG([-Wall])\n  PLUMED_CHECK_CXXFLAG([-pedantic])\n  PLUMED_CHECK_CXXFLAG([-std=c++11])\nfi\n\nif test $debug == true\nthen\n  PLUMED_CHECK_CXXFLAG([-g])\nfi\n\nif test $gcov == true\nthen\n  PLUMED_CHECK_CXXFLAG([--coverage])\n  CFLAGS=\"$CFLAGS --coverage\"\n  PLUMED_CHECK_LDFLAGS([--coverage])\n  STATIC_LIBS=\"$STATIC_LIBS --coverage\"\nfi\n\nif test $fussy == true\nthen\n  PLUMED_CHECK_CXXFLAG([-Wextra])\n  PLUMED_CHECK_CXXFLAG([-Wfloat-equal])\n  PLUMED_CHECK_CXXFLAG([-Wwrite-strings])\n  PLUMED_CHECK_CXXFLAG([-Wpointer-arith])\n  PLUMED_CHECK_CXXFLAG([-Wcast-qual])\n  PLUMED_CHECK_CXXFLAG([-Wcast-align])\n  PLUMED_CHECK_CXXFLAG([-Wconversion])\n  PLUMED_CHECK_CXXFLAG([-Wredundant-delcs])\n  PLUMED_CHECK_CXXFLAG([-Wvariadic-macros])\n  PLUMED_CHECK_CXXFLAG([-Wold-style-cast])\nfi\n\nAC_MSG_CHECKING([whether $CXX declares c++11 support])\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM([\n#if __cplusplus <= 199711L\nthis_compiler_does_not_support_cxx11\n#endif\n])],\n  [AC_MSG_RESULT([yes])];\n  support_cxx11=true,\n  [AC_MSG_RESULT([no]) ;\n  support_cxx11=false])\n\nif test \"$support_cxx11\" = false\nthen\n   AC_MSG_WARN([C++11 support is required as of PLUMED 2.4])\n   AC_MSG_WARN([Your compiler appears not to support C++11])\n   AC_MSG_WARN([Please change compiler or make sure that everything works correctly])\nfi\n\n\n\nAC_SUBST(disable_dependency_tracking)\n\nif test \"$dependency_tracking\" = true\nthen\n  AC_MSG_CHECKING([whether $CXX can generate dependency file with -MM -MF])\n  dependency=ko\n  echo \"#include \\\"conftest1.h\\\"\" > conftest.cpp\n  echo \"#include \\\"conftest2.h\\\"\" > conftest1.h\n  echo \"/* */\" > conftest2.h\n  $CXX $CXXFLAGS -c -MM -MFconftest.d conftest.cpp 1> /dev/null 2> /dev/null\n  grep conftest2 conftest.d 1> /dev/null 2>/dev/null && dependency=ok\n  if test \"$dependency\" = ok ; then\n    AC_MSG_RESULT([yes])\n    disable_dependency_tracking=no\n  else\n    AC_MSG_RESULT([no])\n    disable_dependency_tracking=yes\n  fi\nelse\n  disable_dependency_tracking=yes\nfi\n\nif test \"$disable_dependency_tracking\" = yes ; then\n  AC_MSG_WARN([dependencies tracking disabled - always make clean before make])\nelse\n  AC_MSG_NOTICE([dependency tracking enabled])\nfi\n\n\n\n\n#### Compulsory libraries ####\n# some of them might be made optional if we find that are not available in some system\nAC_MSG_NOTICE([Now we will check compulsory headers and libraries])\nAC_CHECK_HEADER([dirent.h],     [ ], [AC_MSG_ERROR([compulsory header not found])] )\nAC_CHECK_FUNC(  [readdir],      [ ], [AC_MSG_ERROR([compulsory function not found])] )\n\n# Then check for blas. This is a bit complicated because we want to allow\n# either the version with underscore or the one without\nblas_found=\nlapack_found=\n\n# external lapack can only work with external blas\n# thus, if external blas are disabled also external lapack should be disabled\nif test \"$external_blas\" == false && test \"$external_lapack\" == true ; then\n  AC_MSG_NOTICE([Internal blas can only be used with internal lapack])\n  AC_MSG_NOTICE([Will not search for external lapack])\n  external_lapack=false\nfi\n\n# first look for blas\nif test \"$external_blas\" == true ; then\n  PLUMED_SEARCH_LIBS([dgemv],[blas],[blas_found=nounderscore], [\n    PLUMED_SEARCH_LIBS([dgemv_],[blas],[blas_found=underscore])\n  ])\nfi\n\n# if not found, then use internal lapack and blas\nif test -z \"$blas_found\" ; then\nAC_MSG_WARN([using internal lapack and blas, could be inefficient])\nfi\n\n# if found, also look for external lapack\nif test -n \"$blas_found\" ; then\n\nAC_DEFINE([__PLUMED_HAS_EXTERNAL_BLAS])\n\nif test \"$external_lapack\" == true ; then\n# Then we look for lapack using same underscoring\ncase \"$blas_found\" in\n(underscore) search_for=dsyevr_ ;;\n(nounderscore) search_for=dsyevr ;;\nesac\nPLUMED_SEARCH_LIBS( [$search_for],[lapack],[lapack_found=yes])\nfi\n\n# if not found, then use internal lapack with external blas\nif test -z \"$lapack_found\" ; then\nAC_MSG_WARN([using internal lapack, could be inefficient])\nelse\nAC_DEFINE([__PLUMED_HAS_EXTERNAL_LAPACK])\nfi\n\nfi \n\n# in case external blas have been found, take note of their underscoring\n# notice that this applies also when external blas are used with internal lapack\n# in the latter case, also (internal) lapack names will be underscored consistently\nif test \"$blas_found\" == nounderscore\nthen\n  AC_DEFINE([F77_NO_UNDERSCORE])\nfi\n\nif test -n \"$blas_found\" ; then\n\nAC_DEFUN([PLUMED_TEST_SDOT],[\n#if ! defined(F77_NO_UNDERSCORE)\n#define sdot sdot_\n#endif\nextern \"C\"{\n$1 sdot(int *n, float *dx, int *incx, float *dy, int *incy);\n}\n\nint main(){\n  int size=5;\n// notice that [[]] is required to cheat autoconf\n  float af[[5]],bf[[5]];\n  for(unsigned i=0;i<size;i++){\n    af[[i]]=size;\n    bf[[i]]=size-i;\n  }\n  int inca=1;\n  int incb=1;\n  $1 f=sdot(&size,af,&inca,bf,&incb)-75;\n  if(f*f<1e-10) return 0;\n  else return 1;\n}\n])\n\n\nAC_MSG_CHECKING([whether sdot returns float])\nAC_RUN_IFELSE([AC_LANG_SOURCE([PLUMED_TEST_SDOT([float])])],\n  [ sdot_returns_float=yes ; AC_MSG_RESULT([yes]) ],\n  [ sdot_returns_float=no ;  AC_MSG_RESULT([no]) ],\n  [ AC_MSG_RESULT([not checked (cross compiling)]) ]\n)\n\nif test \"$sdot_returns_float\" == no ;\nthen\n\nAC_MSG_CHECKING([whether sdot returns double])\nAC_RUN_IFELSE([AC_LANG_SOURCE([PLUMED_TEST_SDOT([double])])],\n  [ sdot_returns_double=yes ; AC_MSG_RESULT([yes]) ],\n  [ sdot_returns_double=no ;  AC_MSG_RESULT([no]) ],\n  [ AC_MSG_RESULT([not checked (cross compiling)]) ]\n)\n\nfi\n\nif test \"$sdot_returns_double\" = yes ; then\n  AC_MSG_NOTICE([Setting workaround for blas float functions returning double])\n  AC_DEFINE(__PLUMED_BLAS_RETURNS_FLOAT,double)\n  if test -n \"$lapack_found\" ; then\n    AC_MSG_NOTICE([Setting workaround for lapack float functions returning double])\n    AC_DEFINE(__PLUMED_LAPACK_RETURNS_FLOAT,double)\n  fi\nelse if test \"$sdot_returns_float\" = no && test \"$sdot_returns_double\" = no ;\nthen\n  AC_MSG_WARN([There is a problem with your blas implementation])\nfi\n\nfi\n\nfi\n\n#### End of compulsory libraries ####\n\n#### Optional libraries ####\nAC_MSG_NOTICE([Now we will check for optional headers and libraries])\n\n#############################################################\n# I add the possibility to completely remove molfile_plugins\n# I would like to be 100% that the molfile module compiles\n# correctly on all machines\n# In case of problem, it is sufficient to configure with\n# ./configure --disable-molfile-plugins\n# GB\n#############################################################\n\nif test $molfile_plugins == true ; then\n\n# Check for molfile_plugins and use internal fallback if not found. TG\n\n# We always have molfile, now\nAC_DEFINE([__PLUMED_HAS_MOLFILE_PLUGINS])\n\n  if test \"$external_molfile_plugins\" == true ; then\n    PLUMED_CHECK_PACKAGE([libmolfile_plugin.h],[molfile_dcdplugin_init],[__PLUMED_HAS_EXTERNAL_MOLFILE_PLUGINS],molfile_plugin)\n    if test \"$__PLUMED_HAS_EXTERNAL_MOLFILE_PLUGINS\" != yes ; then\n      AC_MSG_WARN([using internal molfile_plugins, which only support dcd/xtc/trr/trj/crd files])\n    else\n      AC_DEFINE([__PLUMED_HAS_EXTERNAL_MOLFILE_PLUGINS])\n    fi\n  fi\nfi\n\n# this is special and is also attached to STATIC_LIBS\n# this flag should be used also when linking MD engines to allow plumed\n# to be loaded later\nAC_CHECK_LIB([dl],dlopen, [STATIC_LIBS=\"-ldl $STATIC_LIBS\"] [LIBS=\"-ldl $LIBS\"])\n\nmpi_found=ko\n# optional libraries follow\nif test $mpi == true ; then\n  PLUMED_CHECK_PACKAGE([mpi.h],[MPI_Init],[__PLUMED_HAS_MPI])\n  if test \"$__PLUMED_HAS_MPI\" = yes; then\n    mpi_found=ok\n  fi\nelse \n  mpi_found=ko\nfi\n\n# search for openmp is automatically disabled by autoconf\n# when configuring with --disable-openmp\nAC_OPENMP\n\nif test $matheval == true ; then\n  PLUMED_CHECK_PACKAGE([matheval.h],[evaluator_create],[__PLUMED_HAS_MATHEVAL],[matheval])\nfi\nif test $readdir_r == true ; then\n  PLUMED_CHECK_PACKAGE([dirent.h],[readdir_r],[__PLUMED_HAS_READDIR_R])\nfi\nif test $cregex == true ; then\n  PLUMED_CHECK_PACKAGE([regex.h],[regcomp],[__PLUMED_HAS_CREGEX])\nfi\nif test $dlopen == true ; then\n  PLUMED_CHECK_PACKAGE([dlfcn.h],[dlopen],[__PLUMED_HAS_DLOPEN])\nfi\nif test $execinfo == true ; then\n  PLUMED_CHECK_PACKAGE([execinfo.h],[backtrace],[__PLUMED_HAS_EXECINFO])\nfi\nif test $zlib == true ; then\n  PLUMED_CHECK_PACKAGE([zlib.h],[gzopen],[__PLUMED_HAS_ZLIB],[z])\nfi\n\nif test $gsl == true ; then\n  found=ko\n  PLUMED_SEARCH_LIBS([cblas_dgemv],[gslcblas], [\n    AC_CHECK_HEADER(  [gsl/gsl_vector.h], [\n      PLUMED_SEARCH_LIBS([gsl_vector_alloc],[gsl],[found=ok])\n    ])\n  ])\n  if test $found == ok ; then\n    AC_DEFINE([__PLUMED_HAS_GSL])\n  else\n    AC_MSG_WARN([cannot enable __PLUMED_HAS_GSL])\n  fi\nfi\n\nif test $xdrfile == true ; then\n  PLUMED_CHECK_PACKAGE([xdrfile/xdrfile_xtc.h],[write_xtc],[__PLUMED_HAS_XDRFILE],[xdrfile])\nfi\n\nif test $boost_graph == true ; then\n  PLUMED_CHECK_CXX_PACKAGE([boost graph],[\n#include <boost/graph/graph_utility.hpp>\n#include <boost/graph/adjacency_matrix.hpp>\nint\nmain ()\n{\n  boost::adjacency_matrix<boost::directedS> a(1);\n  ;\n  return 0;\n}\n  ], [__PLUMED_HAS_BOOST_GRAPH])\nfi\n\nif test $boost_serialization == true ; then\n  PLUMED_CHECK_CXX_PACKAGE([boost serialization],[\n#include <fstream>\n#include <boost/archive/text_oarchive.hpp>\nint main() {\n    std::ofstream ofs(\"filename\");\n    boost::archive::text_oarchive oa(ofs);\n    return 0;\n}\n  ], [__PLUMED_HAS_BOOST_SERIALIZATION],[boost_serialization boost_serialization-mt])\n# notice: macports install libraries with -mt suffix\nfi\n\nif test $fftw == true ; then\n  PLUMED_CHECK_PACKAGE([fftw3.h],[fftw_execute],[__PLUMED_HAS_FFTW],[fftw3])\nfi\n\n# in non-debug mode, add -DNDEBUG\nif test \"$debug\" == false ; then\n  AC_MSG_NOTICE([Release mode, adding -DNDEBUG])\n  AC_DEFINE([NDEBUG])\nfi\n\n# in debug-glibcxx mode, add -D_GLIBCXX_DEBUG\nif test \"$debug_glibcxx\" == true ; then\n  AC_MSG_NOTICE([Check boundaries, adding -D_GLIBCXX_DEBUG])\n  AC_DEFINE([_GLIBCXX_DEBUG])\nfi\n\nif test \"$cxx_exceptions\" == true ; then\n  AC_MSG_NOTICE([Enabling c++ exceptions -D__PLUMED_HAS_EXCEPTIONS])\n  AC_DEFINE([__PLUMED_HAS_EXCEPTIONS])\nfi\n\n# this is necessary in many MPI implementations\n# I leave it by default, since it seems harmless\nAC_DEFINE([_REENTRANT])\n\n#### Options for dynamic library to work properly ####\nAC_SUBST(SOEXT)\nAC_SUBST(LD)\nAC_SUBST(LDSHARED)\n# these are libraries that should be linked also to MD engines\nAC_SUBST(STATIC_LIBS)\n\nAC_SUBST(MPIEXEC)\n\nif test \"$shared\" == true ; then\n  case `(uname)` in\n  (Darwin)\n    AC_MSG_NOTICE([*** Special settings for dynamic libraries on OSX ***])\n    AC_MSG_NOTICE([Dynamic library extension is 'dylib'])\n    AC_MSG_NOTICE([LDSHARED needs special flags])\n    SOEXT=dylib\n    LDSHARED=\"$LDSHARED -undefined suppress -flat_namespace -dynamiclib -Wl,-headerpad_max_install_names\"\n    if test \"$rpath\" = true ; then\n      AC_MSG_NOTICE([Switching off rpath on OSX])\n      rpath=false\n    fi\n  ;;\n  (Linux)\n    AC_MSG_NOTICE([*** Special settings for dynamic libraries on Linux ***])\n    AC_MSG_NOTICE([Dynamic library extension is 'so'])\n    AC_MSG_NOTICE([LDSHARED and LDFLAGS need special flags])\n    SOEXT=so\n    LDSHARED=\"$LDSHARED -shared\"\n    PLUMED_CHECK_LDFLAGS([-rdynamic])\n  ;;\n  (*)\n    AC_MSG_NOTICE([*** Dynamic library only enabled on OSX and Linux ***])\n  esac\nfi\n\n# check linking of runtime library\nif test -n \"$SOEXT\"\nthen\n  AC_MSG_NOTICE([Using LDSHARED='$LDSHARED'])\n  AC_MSG_NOTICE([Using LDFLAGS='$LDFLAGS'])\n  AC_MSG_CHECKING([whether LDSHARED can create dynamic libraries])\n  rm -f conftest.*\n  echo \"void f(void){ return;}\" > conftest.cpp\n  $CXX $CXXFLAGS $CPPFLAGS -c conftest.cpp 1>/dev/null 2>/dev/null\n  $LDSHARED $LDFLAGS conftest.o -o conftest.$SOEXT 1>/dev/null 2>/dev/null\n  if test -f conftest.$SOEXT\n  then\n    AC_MSG_RESULT([yes])\n  else\n    AC_MSG_RESULT([no])\n    AC_MSG_WARN([dynamic library will be disabled])\n    SOEXT=\n  fi\n  if test -n \"$SOEXT\" && test \"$rpath\" = true ; then\n    rm -f conftest.$SOEXT\n    readelf=\"\"\n    AC_CHECK_PROG([readelf],[readelf],[found])\n    if test \"$readelf\" == found ; then\n      test_LDSHARED=\"$LDSHARED -Wl,-R -Wl,/some/random/dir/\"\n      $test_LDSHARED $LDFLAGS conftest.o -o conftest.$SOEXT 1>/dev/null 2>/dev/null\n      if readelf -d conftest.$SOEXT | grep RPATH | grep -q /some/random/dir ; then\n        LDSHARED=\"$LDSHARED -Wl,-R -Wl,\\\"$LIBRARY_PATH\\\"\"\n      else\n        AC_MSG_WARN([-R option seems not working, disabling rpath])\n      fi\n    else\n      AC_MSG_WARN([readelf not available, no way to set rpath])\n    fi \n  fi\n  rm -f conftest.*\nfi\n#### Options for dynamic library to work properly ####\n\nAC_SUBST(make_doc)\nmake_doc=no\nif test \"$doc\" == true\nthen\n\nmake_doc=yes\n\n### Look for doxygen\nAC_CHECK_PROG([doxygen],[doxygen],[found])\nif test \"$doxygen\" == found\nthen\n  doxygen_version=`doxygen --version | awk 'BEGIN{FS=\".\"}{if($1>1 || ($1==1 && $2>=8)) print \"ok\"}'`\n  if test \"$doxygen_version\" == ok\n  then\n    AC_MSG_NOTICE([Doxygen version is fine])\n  else\n    AC_MSG_WARN([Doxygen version is <1.8])\n    make_doc=no\n  fi\n  AC_CHECK_PROG([dot],[dot],[found])\n  if test \"$dot\" != found\n  then\n    AC_MSG_WARN([You will not be able to see diagrams in the manual])\n  fi\nelse\n  make_doc=no\nfi\nfi\n\nif test \"$make_doc\" = yes\nthen\n  AC_MSG_NOTICE([Manuals will be generated])\nelse\n  AC_MSG_NOTICE([Manuals will not be generated])\nfi\n\nAC_SUBST(make_pdfdoc)\nmake_pdfdoc=\"\"\nif test \"$pdfdoc\" == true && test \"$make_doc\" == yes\nthen\n  AC_MSG_NOTICE([A PDF version of the manual will be generated])\n  make_pdfdoc=yes\nelse\n  AC_MSG_NOTICE([A PDF version of the manual will not be generated])\n  make_pdfdoc=no\nfi\n\n### Look for xxd\nAC_CHECK_PROG([xxd],[xxd],[found])\nif test \"$xxd\" != found\nthen\n  AC_MSG_ERROR([xxd should be installed for PLUMED to compile properly])\nfi\n\nAC_SUBST(program_can_run)\nprogram_can_run=\"\"\nAC_MSG_CHECKING([whether a program can be run on this machine])\nAC_RUN_IFELSE([AC_LANG_SOURCE([\n#ifdef __PLUMED_HAS_MPI\n#include <mpi.h>\n#endif\n// notice that [[]] is required to cheat autoconf\nint main(int argc,char*argv[[]]){\n#ifdef __PLUMED_HAS_MPI\n// this emulates what happens when plumed\n// is compiled with mpi and invoked with --no-mpi\n  if(argc==10){\n    MPI_Init(&argc,&argv);\n    return MPI_Finalize();\n  }\n#endif\n  return 0;\n}\n])],\n  [ program_can_run=yes ; AC_MSG_RESULT([yes]) ],\n  [ program_can_run=no ; AC_MSG_RESULT([no]) ],\n  [ program_can_run=no ; AC_MSG_RESULT([no (cross compiling)]) ]\n)\n\nif test $mpi_found == ok ; then\nAC_SUBST(program_can_run_mpi)\nprogram_can_run_mpi=\"\"\nAC_MSG_CHECKING([whether a program compiled with mpi can be run on this machine])\nAC_RUN_IFELSE([AC_LANG_SOURCE([\n#ifdef __PLUMED_HAS_MPI\n#include <mpi.h>\n#endif\n// notice that [[]] is required to cheat autoconf\nint main(int argc,char*argv[[]]){\n#ifdef __PLUMED_HAS_MPI\n  MPI_Init(&argc,&argv);\n  return MPI_Finalize();\n#endif\n  return 0;\n}\n])],\n  [ program_can_run_mpi=yes ; AC_MSG_RESULT([yes]) ],\n  [ program_can_run_mpi=no ; AC_MSG_RESULT([no]) ],\n  [ program_can_run_mpi=no ; AC_MSG_RESULT([no (cross compiling)]) ]\n)\nfi\n\nif test $mpi_found == ok ; then\n  if test -n \"$MPIEXEC\" ; then\n    AC_MSG_NOTICE([Regtest suite will use $MPIEXEC command to run MPI tests])\n  else\n    AC_MSG_NOTICE([Regtest suite will use env var PLUMED_MPIRUN to run MPI tests (default: mpirun)])\n  fi\nfi\n\n#### This further tests are required to allow linking with non c++ compiler\nAC_MSG_NOTICE([PLUMED seems to be configured properly!])\nAC_MSG_NOTICE([**************************])\nAC_SUBST(LD_RO)\nLD_RO=\nif test \"$ld_r\" == true ; then\nfor test_LD_RO in \"$($CXX --print-prog-name=ld) -r -o\" \"$CXX -Wl,-r -o\" \"ld -r -o\"\ndo\n  AC_MSG_CHECKING([whether C++ objects can be grouped with $test_LD_RO])\n  \n  rm -f conftest-*\n  \n  cat << EOF > conftest-main.cpp\n  void f(void);\n  int main(int argc,char**argv){ f(); return 0; }\nEOF\n  cat << EOF > conftest-f.cpp\n  void g(void);\n  void f(void){ g(); }\nEOF\n  cat << EOF > conftest-g.cpp\n  void g(void){ return; }\nEOF\n  \n  $CXX $CXXFLAGS -c conftest-main.cpp 1> /dev/null 2> /dev/null\n  $CXX $CXXFLAGS -c conftest-f.cpp 1> /dev/null 2> /dev/null\n  $CXX $CXXFLAGS -c conftest-g.cpp 1> /dev/null 2> /dev/null\n  \n  $test_LD_RO conftest-both.o conftest-f.o conftest-g.o 1> /dev/null 2> /dev/null\n  \n  $CXX $CXXFLAGS -o conftest.exe conftest-main.o conftest-both.o 1> /dev/null 2> /dev/null\n  \n  if test -f conftest.exe\n  then\n    AC_MSG_RESULT([yes])\n    LD_RO=\"$test_LD_RO\"\n    break\n  else\n    AC_MSG_RESULT([no])\n  fi\ndone\n \nfi\n\nAC_SUBST(AR_CR)\nAR_CR=\nif test \"$ar_cr\" == true ; then\nfor test_AR_CR in \"$($CXX --print-prog-name=ar) cr\" \"ar cr\"\ndo\n  AC_MSG_CHECKING([whether static libraries can be created with $test_AR_CR])\n  \n  rm -f conftest-*\n  \n  cat << EOF > conftest-main.cpp\n  void f(void);\n  int main(int argc,char**argv){ f(); return 0; }\nEOF\n  cat << EOF > conftest-f.cpp\n  void g(void);\n  void f(void){ g(); }\nEOF\n  cat << EOF > conftest-g.cpp\n  void g(void){ return; }\nEOF\n  \n  $CXX $CXXFLAGS -c conftest-main.cpp 1> /dev/null 2> /dev/null\n  $CXX $CXXFLAGS -c conftest-f.cpp 1> /dev/null 2> /dev/null\n  $CXX $CXXFLAGS -c conftest-g.cpp 1> /dev/null 2> /dev/null\n  \n  $test_AR_CR conftest-both.a conftest-f.o conftest-g.o 1> /dev/null 2> /dev/null\n  \n  $CXX $CXXFLAGS -o conftest.exe conftest-main.o conftest-both.a 1> /dev/null 2> /dev/null\n  \n  if test -f conftest.exe\n  then\n    AC_MSG_RESULT([yes])\n    AR_CR=\"$test_AR_CR\"\n    break\n  else\n    AC_MSG_RESULT([no])\n  fi\ndone\n \nfi\n\nif test \"${static_patch}\" == true ; then\n\nAC_MSG_NOTICE([I will now check if C++ objects can be linked by C/Fortran compilers])\nAC_MSG_NOTICE([This is relevant if you want to use plumed patch --static on a non-C++ code])\n\nfor compiler in CC FC\ndo\n  rm -f conftest.* conftest-main.*\n  eval compexe=\\$$compiler\n  if test -n \"$compexe\" ; then\n    case $compiler in\n    (CC)\n      name=C\n      cat << EOF > conftest-main.c\nint main(int argc,char**argv){\n  return 0;\n}\nEOF\n      $CC -c conftest-main.c\n    ;;\n    (FC)\n      name=FORTRAN\n      cat << EOF > conftest-main.f90\n       program main\n       integer i\n       end program main\nEOF\n      $FC -c conftest-main.f90\n    ;;\n    esac\n    cat << EOF > conftest.cpp\n#include <iostream>\nvoid f(void){\n  std::cout<<\"ciao\";return;\n}\nEOF\n    $CXX $CXXFLAGS -c conftest.cpp \n# start search:\n    found=\n    if test \"${libsearch}\" == true ; then\n      testlibs=\"-lstdc++ -lc++ -lmpi_cxx\"\n    else\n      testlibs=\"\"\n    fi\n    for testlib in \"\" $testlibs ; do\n      comment=\n      test -n \"$testlib\" && comment=\" with library $testlib\"\n      AC_MSG_CHECKING([whether $name can link a C++ object$comment])\n      $compexe conftest.o conftest-main.o $LDFLAGS $testlib $LIBS -o conftest.exe 1>/dev/null 2>/dev/null\n      if test -f conftest.exe\n      then\n        found=yes\n        AC_MSG_RESULT([yes])\n        LIBS=\"$testlib $LIBS\"\n        break\n      else\n        AC_MSG_RESULT([no])\n      fi\n    done\n    if test -z \"$found\" ; then\n      AC_MSG_WARN([You might have problems linking $name programs.])\n      AC_MSG_WARN([Please add c++ library to LIBS])\n    fi\n  else\n    AC_MSG_NOTICE([$compiler compiler not configured])\n  fi\n  rm -f conftest.* conftest-main.*\ndone\n\nelse\nAC_MSG_NOTICE([Static patching is disabled, thus tests required for static patching will be skipped])\nfi\n\nif test \"$prefix\" == NONE\nthen\n  prefix=/usr/local\nfi\n\nAC_MSG_CHECKING([If prefix is equal to present working directory])\n\n# ignore cases where the directory does not exist:\nnormalized_prefix=\"`cd \"${prefix}\" 2>/dev/null && pwd || true`\"\n\nif test \"`pwd`\" = \"$normalized_prefix\" ; then\n  AC_MSG_RESULT([yes])\n  AC_MSG_ERROR([prefix should not be equal to the present working directory])\nelse\n  AC_MSG_RESULT([no])\nfi\n\nAC_ARG_PROGRAM\n\n\n# version modified to work in shell script instead of makefile:\nprogram_transform_name_sh=$(echo \"${program_transform_name}\" | sed 's:\\$\\$:$:g')\nprogram_name=$(echo plumed | sed \"$program_transform_name_sh\")\nAC_SUBST(program_name)\n\nif test \"$(echo \"$program_name\" | tr '[A-Z]' '[a-z]')\" != \"$(echo \"$program_name\" | tr '[A-Z]' '[a-z]' | sed 's/wrapper$//')\" ; then\n  AC_MSG_ERROR([$program_name is not a valid program name (should not terminate with Wrapper)])\nfi\nif test \"$(echo \"$program_name\" | tr '[A-Z]' '[a-z]')\" != \"$(echo \"$program_name\" | tr '[A-Z]' '[a-z]' | sed 's/kernel$//')\" ; then\n  AC_MSG_ERROR([$program_name is not a valid program name (should not terminate with Kernel)])\nfi\nif test \"$(echo \"$program_name\" | tr '[A-Z]' '[a-z]')\" != \"$(echo \"$program_name\" | tr '[A-Z]' '[a-z]' | sed 's/-patch$//')\" ; then\n  AC_MSG_ERROR([$program_name is not a valid program name (should not terminate with -patch)])\nfi\nif test \"$(echo \"$program_name\" | tr '[A-Z]' '[a-z]')\" != \"$(echo \"$program_name\" | tr '[A-Z]' '[a-z]' | sed 's/-config$//')\" ; then\n  AC_MSG_ERROR([$program_name is not a valid program name (should not terminate with -config)])\nfi\n\nAC_MSG_NOTICE([**** PLUMED will be installed using the following paths:])\nAC_MSG_NOTICE([**** prefix: $prefix])\nif test \"$exec_prefix\" = NONE ; then\n  exec_prefix_='${prefix}'\nelse\n  exec_prefix_=\"${exec_prefix}\"\nfi\nAC_MSG_NOTICE([**** exec_prefix: $exec_prefix_])\nAC_MSG_NOTICE([**** bindir: $bindir])\nAC_MSG_NOTICE([**** libdir: $libdir])\nAC_MSG_NOTICE([**** includedir: $includedir])\nAC_MSG_NOTICE([**** datarootdir: $datarootdir])\nAC_MSG_NOTICE([**** datadir: $datadir])\nAC_MSG_NOTICE([**** docdir: ${datarootdir}/doc/$program_name])\nAC_MSG_NOTICE([**** htmldir: $htmldir])\nAC_MSG_NOTICE([**** Executable will be named $program_name])\nAC_MSG_NOTICE([**** You can change paths later using options to \"make install\"])\nAC_MSG_NOTICE([**** e.g. with \"make install prefix=/path\"])\n\nif test $mpi == true; then\n  if test $mpi_found == ok; then\n    AC_MSG_NOTICE([**** PLUMED will be compiled using MPI])\n  else \n    AC_MSG_WARN([**** PLUMED will NOT be compiled using MPI because MPI have not been found!])\n  fi\nelse\n    AC_MSG_NOTICE([**** PLUMED will be compiled without MPI])\nfi\n\nif test $program_can_run == no ; then\n  AC_MSG_WARN([plumed executable will not run on this machine])\n  AC_MSG_WARN([to patch an MD code use 'plumed-patch'])\nelif test $mpi_found == ok ; then\n  if test $program_can_run_mpi == no ; then\n    AC_MSG_WARN([plumed executable will not run on this machine])\n    AC_MSG_WARN([unless you invoke it as 'plumed --no-mpi'])\n    AC_MSG_WARN([all command line tools are thus available as 'plumed --no-mpi name-of-the-tool'])\n    AC_MSG_WARN([e.g. 'plumed --no-mpi driver'])\n    AC_MSG_WARN([to patch an MD code use 'plumed --no-mpi patch'])\n    AC_MSG_WARN([(notice that MPI will be available anyway in the patched code)])\n  fi\nfi\n\nAC_SUBST(build_dir)\nbuild_dir=`pwd`\n\n\n\n# This is to replace tags in Makefile.conf.in\n# saving the result to Makefile.conf\nAC_CONFIG_FILES([Makefile.conf sourceme.sh])\n# This is to have the stamp-h file up to date\n# The date of this file keeps track of when Makefile.conf and sourceme.sh have been updated\nAC_CONFIG_FILES([stamp-h], [echo timestamp > stamp-h])\nAC_OUTPUT\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/src/wrapper/Plumed.c": "/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n   Copyright (c) 2011-2018 The plumed team\n   (see the PEOPLE file at the root of the distribution for a list of names)\n\n   See http://www.plumed.org for more information.\n\n   This file is part of plumed, version 2.\n\n   plumed is free software: you can redistribute it and/or modify\n   it under the terms of the GNU Lesser General Public License as published by\n   the Free Software Foundation, either version 3 of the License, or\n   (at your option) any later version.\n\n   plumed is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU Lesser General Public License for more details.\n\n   You should have received a copy of the GNU Lesser General Public License\n   along with plumed.  If not, see <http://www.gnu.org/licenses/>.\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */\n#include \"Plumed.h\"\n\n#ifdef __PLUMED_HAS_DLOPEN\n#include <dlfcn.h>\n#endif\n#include <stdio.h>\n#include <assert.h>\n#include <stdlib.h>\n#include <limits.h>\n\n/* DECLARATION USED ONLY IN THIS FILE */\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n/**\n   Holder for plumedmain function pointers.\n*/\ntypedef struct {\n  void*(*create)(void);\n  void(*cmd)(void*,const char*,const void*);\n  void(*finalize)(void*);\n} plumed_plumedmain_function_holder;\n\n/**\n  Register for plumedmain function pointers\n*/\nplumed_plumedmain_function_holder* plumed_kernel_register(const plumed_plumedmain_function_holder*);\n\n#ifdef __PLUMED_STATIC_KERNEL\n/* Real interface */\nvoid*plumedmain_create(void);\nvoid plumedmain_cmd(void*,const char*,const void*);\nvoid plumedmain_finalize(void*);\n#else\n/* dummy interface */\nvoid*plumed_dummy_create(void);\nvoid plumed_dummy_cmd(void*,const char*,const void*);\nvoid plumed_dummy_finalize(void*);\n#endif\n\n#ifdef __cplusplus\n}\n#endif\n\n/* END OF DECLARATION USED ONLY IN THIS FILE */\n\n/* These are the dummy routines which are used when plumed is not available */\n\n#ifdef __PLUMED_STATIC_KERNEL\n\nstatic int installed=1;\n\n#else\n\nstatic int installed=0;\n\nstatic int dummy;\n\nvoid*plumed_dummy_create(void) {\n  return (void*)&dummy;\n}\n\nvoid plumed_dummy_cmd(void*p,const char*key,const void*val) {\n  (void) p;   /* avoid warning on unused parameter */\n  (void) key; /* avoid warning on unused parameter */\n  (void) val; /* avoid warning on unused parameter */\n  fprintf(stderr,\"+++ ERROR: you are trying to use plumed, but it is not available +++\\n\");\n  fprintf(stderr,\"+++ Check your PLUMED_KERNEL environment variable +++\\n\");\n  exit(1);\n}\n\nvoid plumed_dummy_finalize(void*p) {\n  (void) p; /* avoid warning on unused parameter */\n}\n\n#endif\n\nplumed_plumedmain_function_holder* plumed_kernel_register(const plumed_plumedmain_function_holder* f) {\n#ifdef __PLUMED_STATIC_KERNEL\n  /*\n    When __PLUMED_STATIC_KERNEL is defined, the function holder is initialized\n    to statically bound plumedmain_create,plumedmain_cmd,plumedmain_finalize and\n    cannot be changed. This saves from mis-set values for PLUMED_KERNEL\n  */\n  static plumed_plumedmain_function_holder g= {plumedmain_create,plumedmain_cmd,plumedmain_finalize};\n  (void) f; /* avoid warning on unused parameter */\n  return &g;\n#else\n  /*\n    On the other hand, for runtime binding, we allow to reset the function holder on the\n    first call to plumed_kernel_register.\n    Notice that in principle plumed_kernel_register is entered *twice*: one for the first\n    plumed usage, and then from the PlumedMainInitializer object of the shared library.\n    This is why we set \"first=0\" only *after* loading the shared library.\n    Also notice that we should put some guard here for safe multithread calculations.\n  */\n  static plumed_plumedmain_function_holder g= {plumed_dummy_create,plumed_dummy_cmd,plumed_dummy_finalize};\n  static int first=1;\n#ifdef __PLUMED_HAS_DLOPEN\n  char* path;\n  void* p;\n  if(first && f==NULL) {\n    path=getenv(\"PLUMED_KERNEL\");\n#ifdef __PLUMED_DEFAULT_KERNEL\n    /*\n      This variable allows a default path for the kernel to be hardcoded.\n      Can be useful for hardcoding the predefined plumed location\n      still allowing the user to override this choice setting PLUMED_KERNEL.\n      The path should be chosen at compile time adding e.g.\n      -D__PLUMED_DEFAULT_KERNEL=/opt/local/lib/libplumed.dylib\n    */\n    /* This is required to add quotes */\n#define PLUMED_QUOTE_DIRECT(name) #name\n#define PLUMED_QUOTE(macro) PLUMED_QUOTE_DIRECT(macro)\n    if(! (path && (*path) )) path=PLUMED_QUOTE(__PLUMED_DEFAULT_KERNEL);\n#endif\n    if(path && (*path)) {\n      fprintf(stderr,\"+++ Loading the PLUMED kernel runtime +++\\n\");\n      fprintf(stderr,\"+++ PLUMED_KERNEL=\\\"%s\\\" +++\\n\",path);\n      p=dlopen(path,RTLD_NOW|RTLD_GLOBAL);\n      if(p) {\n        fprintf(stderr,\"+++ PLUMED kernel successfully loaded +++\\n\");\n        installed=1;\n      } else {\n        fprintf(stderr,\"+++ PLUMED kernel not found ! +++\\n\");\n        fprintf(stderr,\"+++ error message from dlopen(): %s\\n\",dlerror());\n      }\n    }\n  }\n#endif\n  first=0;\n  if(f) g=*f;\n  return &g;\n#endif\n}\n\n/* C wrappers: */\n\nplumed plumed_create(void) {\n  plumed p;\n  plumed_plumedmain_function_holder*h=plumed_kernel_register(NULL);\n  assert(h);\n  assert(h->create);\n  p.p=(*(h->create))();\n  assert(p.p);\n  return p;\n}\n\nvoid plumed_cmd(plumed p,const char*key,const void*val) {\n  plumed_plumedmain_function_holder*h=plumed_kernel_register(NULL);\n  assert(p.p);\n  assert(h);\n  assert(h->cmd);\n  (*(h->cmd))(p.p,key,val);\n}\n\nvoid plumed_finalize(plumed p) {\n  plumed_plumedmain_function_holder*h=plumed_kernel_register(NULL);\n  assert(p.p);\n  assert(h);\n  assert(h->finalize);\n  (*(h->finalize))(p.p);\n  p.p=NULL;\n}\n\nint plumed_installed(void) {\n  plumed_kernel_register(NULL);\n  return installed;\n}\n\n/* we declare a Plumed_g_main object here, in such a way that it is always available */\n\nstatic plumed gmain= {NULL};\n\nplumed plumed_global(void) {\n  return gmain;\n}\n\nvoid plumed_gcreate(void) {\n  assert(gmain.p==NULL);\n  gmain=plumed_create();\n}\n\nvoid plumed_gcmd(const char*key,const void*val) {\n  assert(gmain.p);\n  plumed_cmd(gmain,key,val);\n}\n\nvoid plumed_gfinalize(void) {\n  assert(gmain.p);\n  plumed_finalize(gmain);\n  gmain.p=NULL;\n}\n\nint plumed_ginitialized(void) {\n  if(gmain.p) return 1;\n  else                return 0;\n}\n\nvoid plumed_c2f(plumed p,char*c) {\n  unsigned i;\n  unsigned char* cc;\n  /*\n    Convert the address stored in p.p into a proper FORTRAN string\n    made of only ASCII characters. For this to work, the two following\n    assertions should be satisfied:\n  */\n  assert(CHAR_BIT<=12);\n  assert(sizeof(p.p)<=16);\n\n  assert(c);\n  cc=(unsigned char*)&p.p;\n  for(i=0; i<sizeof(p.p); i++) {\n    /*\n      characters will range between '0' (ASCII 48) and 'o' (ASCII 111=48+63)\n    */\n    c[2*i]=cc[i]/64+48;\n    c[2*i+1]=cc[i]%64+48;\n  }\n}\n\nplumed plumed_f2c(const char*c) {\n  plumed p;\n  unsigned i;\n  unsigned char* cc;\n\n  assert(CHAR_BIT<=12);\n  assert(sizeof(p.p)<=16);\n\n  assert(c);\n  cc=(unsigned char*)&p.p;\n  for(i=0; i<sizeof(p.p); i++) {\n    /*\n      perform the reversed transform\n    */\n    cc[i]=(c[2*i]-48)*64 + (c[2*i+1]-48);\n  }\n  return p;\n}\n\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n/*\n  Fortran wrappers\n  These are just like the global C wrappers. They are\n  just defined here and not declared in the .h file since they\n  should not be used from c/c++ anyway.\n*/\n\n/*\n  First we assume no name mangling\n*/\n\nvoid plumed_f_installed(int*i) {\n  assert(i);\n  *i=plumed_installed();\n}\n\nvoid plumed_f_ginitialized(int*i) {\n  assert(i);\n  *i=plumed_ginitialized();\n}\n\nvoid plumed_f_gcreate(void) {\n  plumed_gcreate();\n}\n\nvoid plumed_f_gcmd(char*key,void*val) {\n  plumed_gcmd(key,val);\n}\n\nvoid plumed_f_gfinalize(void) {\n  plumed_gfinalize();\n}\n\nvoid plumed_f_create(char*c) {\n  plumed p;\n  p=plumed_create();\n  plumed_c2f(p,c);\n}\n\nvoid plumed_f_cmd(char*c,char*key,void*val) {\n  plumed p;\n  p=plumed_f2c(c);\n  plumed_cmd(p,key,val);\n}\n\nvoid plumed_f_finalize(char*c) {\n  plumed p;\n  p=plumed_f2c(c);\n  plumed_finalize(p);\n}\n\nvoid plumed_f_global(char*c) {\n  plumed_c2f(gmain,c);\n}\n\n/*\n  Then we add wrappers for there functions to cover all\n  the possible fortran mangling schemes, which should be:\n  without underscore, with one underscore and with two underscores\n  lower or upper case\n*/\n\n#define IMPLEMENT(lower,upper,implem) \\\n  void lower ##_  implem \\\n  void lower ##__ implem \\\n  void upper      implem \\\n  void upper ##_  implem \\\n  void upper ##__ implem\n\nIMPLEMENT(plumed_f_gcreate,     PLUMED_F_GCREATE,     (void) {plumed_f_gcreate();})\nIMPLEMENT(plumed_f_gcmd,        PLUMED_F_GCMD,        (char* key,void* val) {plumed_f_gcmd(key,val);})\nIMPLEMENT(plumed_f_gfinalize,   PLUMED_F_GFINALIZE,   (void) {plumed_f_gfinalize();})\nIMPLEMENT(plumed_f_ginitialized,PLUMED_F_GINITIALIZED,(int*i) {plumed_f_ginitialized(i);})\nIMPLEMENT(plumed_f_create,      PLUMED_F_CREATE,      (char*c) {plumed_f_create(c);})\nIMPLEMENT(plumed_f_cmd,         PLUMED_F_CMD,         (char*c,char* key,void* val) {plumed_f_cmd(c,key,val);})\nIMPLEMENT(plumed_f_finalize,    PLUMED_F_FINALIZE,    (char*c) {plumed_f_finalize(c);})\nIMPLEMENT(plumed_f_installed,   PLUMED_F_INSTALLED,   (int*i) {plumed_f_installed(i);})\nIMPLEMENT(plumed_f_global,      PLUMED_F_GLOBAL,      (char*c) {plumed_f_global(c);})\n\n#ifdef __cplusplus\n}\n#endif\n\n\n\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/src/molfile/vmdplugin.h": "/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\nUniversity of Illinois Open Source License\nCopyright 2003 Theoretical and Computational Biophysics Group, \nAll rights reserved.\n\nDeveloped by:\t\tTheoretical and Computational Biophysics Group\n\t\t\tUniversity of Illinois at Urbana-Champaign\n\t\t\thttp://www.ks.uiuc.edu/\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the Software), to deal with \nthe Software without restriction, including without limitation the rights to \nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies \nof the Software, and to permit persons to whom the Software is furnished to \ndo so, subject to the following conditions:\n\nRedistributions of source code must retain the above copyright notice, \nthis list of conditions and the following disclaimers.\n\nRedistributions in binary form must reproduce the above copyright notice, \nthis list of conditions and the following disclaimers in the documentation \nand/or other materials provided with the distribution.\n\nNeither the names of Theoretical and Computational Biophysics Group, \nUniversity of Illinois at Urbana-Champaign, nor the names of its contributors \nmay be used to endorse or promote products derived from this Software without \nspecific prior written permission.\n\nTHE SOFTWARE IS PROVIDED AS IS, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL \nTHE CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR \nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, \nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR \nOTHER DEALINGS WITH THE SOFTWARE.\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */\n#ifndef __PLUMED_molfile_vmdplugin_h\n#define __PLUMED_molfile_vmdplugin_h\nnamespace PLMD{\nnamespace molfile{\n/***************************************************************************\n *cr\n *cr            (C) Copyright 1995-2006 The Board of Trustees of the\n *cr                        University of Illinois\n *cr                         All Rights Reserved\n *cr\n ***************************************************************************/\n\n/***************************************************************************\n * RCS INFORMATION:\n *\n *      $RCSfile: vmdplugin.h,v $\n *      $Author: johns $       $Locker:  $             $State: Exp $\n *      $Revision: 1.33 $       $Date: 2015/10/29 05:10:54 $\n *\n ***************************************************************************/\n\n/** @file\n * This header must be included by every VMD plugin library.  It defines the\n * API for every plugin so that VMD can organize the plugins it finds.  \n */\n\n#ifndef VMD_PLUGIN_H\n#define VMD_PLUGIN_H\n\n\n/* \n * Preprocessor tricks to make it easier for us to redefine the names of\n * functions when building static plugins.\n */\n#if !defined(VMDPLUGIN)\n/** \n  * macro defining VMDPLUGIN if it hasn't already been set to the name of \n  * a static plugin that is being compiled.  This is the catch-all case.\n  */\n#define VMDPLUGIN vmdplugin\n#endif\n/** concatenation macro, joins args x and y together as a single string */\n#define xcat(x, y) cat(x, y)\n/** concatenation macro, joins args x and y together as a single string */\n#define cat(x, y) x ## y \n\n/*\n *  macros to correctly define plugin function names depending on whether \n *  the plugin is being compiled for static linkage or dynamic loading. \n *  When compiled for static linkage, each plugin needs to have unique\n *  function names for all of its entry points.  When compiled for dynamic\n *  loading, the plugins must name their entry points consistently so that\n *  the plugin loading mechanism can find the register, register_tcl, init,\n *  and fini routines via dlopen() or similar operating system interfaces.\n */\n/*@{*/\n/** Macro names entry points correctly for static linkage or dynamic loading */\n#define VMDPLUGIN_register     xcat(VMDPLUGIN, _register)\n#define VMDPLUGIN_register_tcl xcat(VMDPLUGIN, _register_tcl)\n#define VMDPLUGIN_init         xcat(VMDPLUGIN, _init)\n#define VMDPLUGIN_fini         xcat(VMDPLUGIN, _fini)\n/*@}*/\n\n\n/** \"WIN32\" is defined on both WIN32 and WIN64 platforms... */\n#if (defined(WIN32)) \n#define WIN32_LEAN_AND_MEAN\n}\n}\n#include <windows.h>\nnamespace PLMD{\nnamespace molfile{\n\n\n#if !defined(STATIC_PLUGIN)\n#if defined(VMDPLUGIN_EXPORTS)\n/** \n *  Only define DllMain for plugins, not in VMD or in statically linked plugins\n *  VMDPLUGIN_EXPORTS is only defined when compiling dynamically loaded plugins\n */\nBOOL APIENTRY DllMain( HANDLE hModule,\n                       DWORD ul_reason_for_call,\n                       LPVOID lpReserved\n                     )\n{\n  return TRUE;\n}\n\n#define VMDPLUGIN_API __declspec(dllexport)\n#else\n#define VMDPLUGIN_API __declspec(dllimport)\n#endif /* VMDPLUGIN_EXPORTS */\n#else  /* ! STATIC_PLUGIN */\n#define VMDPLUGIN_API\n#endif /* ! STATIC_PLUGIN */\n#else\n/** If we're not compiling on Windows, then this macro is defined empty */\n#define VMDPLUGIN_API \n#endif\n\n//TONI  Plumed mod: never \"extern\", C++ namespace\n/** define plugin linkage correctly for both C and C++ based plugins */\n#define VMDPLUGIN_EXTERN VMDPLUGIN_API\n\n/* \n * Plugin API functions start here \n */\n\n\n/** \n * Init routine: called the first time the library is loaded by the \n * application and before any other API functions are referenced.\n * Return 0 on success.\n */\nVMDPLUGIN_EXTERN int VMDPLUGIN_init(void);\n\n/**\n * Macro for creating a struct header used in all plugin structures.\n * \n * This header should be placed at the top of every plugin API definition \n * so that it can be treated as a subtype of the base plugin type.\n *\n * abiversion: Defines the ABI for the base plugin type (not for other plugins)\n * type: A string descriptor of the plugin type.\n * name: A name for the plugin.\n * author: A string identifier, possibly including newlines.\n * Major and minor version.  \n * is_reentrant: Whether this library can be run concurrently with itself.\n */\n#define vmdplugin_HEAD \\\n  int abiversion; \\\n  const char *type; \\\n  const char *name; \\\n  const char *prettyname; \\\n  const char *author; \\\n  int majorv; \\\n  int minorv; \\\n  int is_reentrant; \n\n/** \n  * Typedef for generic plugin header, individual plugins can\n  * make their own structures as long as the header info remains \n  * the same as the generic plugin header, most easily done by \n  * using the vmdplugin_HEAD macro.\n  */\ntypedef struct {\n  vmdplugin_HEAD\n} vmdplugin_t;\n\n/**\n * Use this macro to initialize the abiversion member of each plugin\n */\n#define vmdplugin_ABIVERSION  17\n\n/*@{*/\n/** Use this macro to indicate a plugin's thread-safety at registration time */\n#define VMDPLUGIN_THREADUNSAFE 0\n#define VMDPLUGIN_THREADSAFE   1\n/*@}*/\n\n/*@{*/\n/** Error return code for use in the plugin registration and init functions */\n#define VMDPLUGIN_SUCCESS      0\n#define VMDPLUGIN_ERROR       -1\n/*@}*/\n\n/** \n * Function pointer typedef for register callback functions\n */\ntypedef int (*vmdplugin_register_cb)(void *, vmdplugin_t *);\n\n/**\n * Allow the library to register plugins with the application.\n * The callback should be called using the passed-in void pointer, which\n * should not be interpreted in any way by the library.  Each vmdplugin_t\n * pointer passed to the application should point to statically-allocated\n * or heap-allocated memory and should never be later modified by the plugin.\n * Applications must be permitted to retain only a copy of the the plugin\n * pointer, without making any deep copy of the items in the struct.\n */\nVMDPLUGIN_EXTERN int VMDPLUGIN_register(void *, vmdplugin_register_cb);\n\n/**\n * Allow the library to register Tcl extensions.  \n * This API is optional; if found by dlopen, it will be called after first\n * calling init and register.  \n */\nVMDPLUGIN_EXTERN int VMDPLUGIN_register_tcl(void *, void *tcl_interp, \n    vmdplugin_register_cb);\n\n/**\n * The Fini method is called when the application will no longer use \n * any plugins in the library.  \n */\nVMDPLUGIN_EXTERN int VMDPLUGIN_fini(void);\n\n#endif   /* VMD_PLUGIN_H */\n}\n}\n#endif\n",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/src/core/CLToolMain.cpp": "/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n   Copyright (c) 2012-2018 The plumed team\n   (see the PEOPLE file at the root of the distribution for a list of names)\n\n   See http://www.plumed.org for more information.\n\n   This file is part of plumed, version 2.\n\n   plumed is free software: you can redistribute it and/or modify\n   it under the terms of the GNU Lesser General Public License as published by\n   the Free Software Foundation, either version 3 of the License, or\n   (at your option) any later version.\n\n   plumed is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU Lesser General Public License for more details.\n\n   You should have received a copy of the GNU Lesser General Public License\n   along with plumed.  If not, see <http://www.gnu.org/licenses/>.\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */\n#include \"CLToolMain.h\"\n#include \"config/Config.h\"\n#include \"tools/Exception.h\"\n#include \"tools/Communicator.h\"\n#include \"CLTool.h\"\n#include \"CLToolRegister.h\"\n#include \"tools/Tools.h\"\n#include \"tools/DLLoader.h\"\n#include <string>\n#include <cstdlib>\n#include <cstdio>\n#include <iostream>\n#include <algorithm>\n#include <unordered_map>\n\nusing namespace std;\n\n#include \"CLToolMainEnum.inc\"\n\nnamespace PLMD {\n\nconst std::unordered_map<std::string, int> & clToolMainWordMap() {\n  static std::unordered_map<std::string, int> word_map;\n  static bool init=false;\n  if(!init) {\n#include \"CLToolMainMap.inc\"\n  }\n  init=true;\n  return word_map;\n}\n\nCLToolMain::CLToolMain():\n  argc(0),\n  in(stdin),\n  out(stdout),\n  comm(*new Communicator)\n{\n}\n\nCLToolMain::~CLToolMain() {\n  delete &comm;\n}\n\n#define CHECK_NULL(val,word) plumed_massert(val,\"NULL pointer received in cmd(\\\"CLTool \" + word + \"\\\")\");\n\nvoid CLToolMain::cmd(const std::string& word,void*val) {\n\n  std::vector<std::string> words=Tools::getWords(word);\n  unsigned nw=words.size();\n  if(nw==0) {\n    // do nothing\n  } else {\n    int iword=-1;\n    char**v;\n    char*vv;\n    const auto it=clToolMainWordMap().find(words[0]);\n    if(it!=clToolMainWordMap().end()) iword=it->second;\n    switch(iword) {\n    case cmd_setArgc:\n      CHECK_NULL(val,word);\n      argc=*static_cast<int*>(val);\n      break;\n    case cmd_setArgv:\n      CHECK_NULL(val,word);\n      v=static_cast<char**>(val);\n      for(int i=0; i<argc; ++i) argv.push_back(string(v[i]));\n      break;\n    case cmd_setArgvLine:\n      CHECK_NULL(val,word);\n      vv=static_cast<char*>(val);\n      argv=Tools::getWords(vv);\n      break;\n    case cmd_setIn:\n      CHECK_NULL(val,word);\n      in=static_cast<FILE*>(val);\n      break;\n    case cmd_setOut:\n      CHECK_NULL(val,word);\n      out=static_cast<FILE*>(val);\n      break;\n    case cmd_setMPIComm:\n      comm.Set_comm(val);\n      break;\n    case cmd_setMPIFComm:\n      comm.Set_fcomm(val);\n      break;\n    case cmd_run:\n      CHECK_NULL(val,word);\n      argc=argv.size();\n      {\n        int n=0; for(int i=0; i<argc; ++i) n+=argv[i].length()+1;\n        std::vector<char> args(n);\n        std::vector<char*> vvv(argc);\n        char* ptr=&args[0];\n        for(int i=0; i<argc; ++i) {\n          vvv[i]=ptr;\n          for(unsigned c=0; c<argv[i].length(); ++c) {\n            *ptr=argv[i][c]; ptr++;\n          }\n          *ptr=0; ptr++;\n        }\n        int ret=run(argc,&vvv[0],in,out,comm);\n        *static_cast<int*>(val)=ret;\n      }\n      break;\n    default:\n      plumed_merror(\"cannot interpret cmd(\\\"CLTool \" + word + \"\\\"). check plumed developers manual to see the available commands.\");\n      break;\n    }\n  }\n}\n\n/**\nThis is the entry point to the command line tools\nincluded in the plumed library.\n*/\n\nint CLToolMain::run(int argc, char **argv,FILE*in,FILE*out,Communicator& pc) {\n  int i;\n  bool printhelp=false;\n\n  DLLoader dlloader;\n\n  string root=config::getPlumedRoot();\n\n  bool standalone_executable=false;\n\n// Start parsing options\n  string prefix(\"\");\n  string a(\"\");\n  for(i=1; i<argc; i++) {\n    a=prefix+argv[i];\n    if(a.length()==0) continue;\n    if(a==\"help\" || a==\"-h\" || a==\"--help\") {\n      printhelp=true;\n      break;\n    } else if(a==\"--has-mpi\") {\n      if(Communicator::initialized()) return 0;\n      else return 1;\n    } else if(a==\"--has-matheval\") {\n      return (config::hasMatheval()?0:1);\n    } else if(a==\"--has-cregex\") {\n      return (config::hasCregex()?0:1);\n    } else if(a==\"--has-dlopen\") {\n      return (config::hasDlopen()?0:1);\n    } else if(a==\"--has-molfile\") {\n      return (config::hasMolfile()?0:1);\n    } else if(a==\"--has-external-molfile\") {\n      return (config::hasExternalMolfile()?0:1);\n    } else if(a==\"--has-zlib\") {\n      return (config::hasZlib()?0:1);\n    } else if(a==\"--has-xdrfile\") {\n      return (config::hasXdrfile()?0:1);\n    } else if(a==\"--is-installed\") {\n      return (config::isInstalled()?0:1);\n    } else if(a==\"--no-mpi\") {\n// this is ignored, as it is parsed in main\n      if(i>1) {\n        fprintf(stderr,\"--no-mpi option can only be used as the first option\");\n        return 1;\n      }\n    } else if(a==\"--mpi\") {\n// this is ignored, as it is parsed in main\n      if(i>1) {\n        fprintf(stderr,\"--mpi option can only be used as the first option\");\n        return 1;\n      }\n    } else if(a==\"--standalone-executable\") {\n      standalone_executable=true;\n    } else if(Tools::startWith(a,\"--load=\")) {\n      a.erase(0,a.find(\"=\")+1);\n      prefix=\"\";\n      void *p=dlloader.load(a);\n      if(!p) {\n        fprintf(stderr,\"ERROR: cannot load library %s\\n\",a.c_str());\n        fprintf(stderr,\"ERROR: %s\\n\",dlloader.error().c_str());\n        return 1;\n      }\n    } else if(a==\"--load\") {\n      prefix=\"--load=\";\n    } else if(a[0]=='-') {\n      string msg=\"ERROR: Unknown option \" +a;\n      fprintf(stderr,\"%s\\n\",msg.c_str());\n      return 1;\n    } else break;\n  }\n\n// Check if plumedRoot/patches/ directory exists (as a further check)\n  if(!standalone_executable) {\n    vector<string> files=Tools::ls(root);\n    if(find(files.begin(),files.end(),\"patches\")==files.end()) {\n      string msg=\n        \"WARNING: I cannot find \"+root+\"/patches/ directory. Set PLUMED_ROOT or reinstall PLUMED\\n\\n\";\n      fprintf(stderr,\"%s\",msg.c_str());\n    }\n  }\n\n// Build list of available C++ tools:\n  vector<string> availableCxx=cltoolRegister().list();\n// Build list of available shell tools:\n  vector<string> availableShell;\n  if(!standalone_executable) {\n    vector<string> tmp;\n    tmp=Tools::ls(string(root+\"/scripts\"));\n    for(unsigned j=0; j<tmp.size(); ++j) {\n      size_t ff=tmp[j].find(\".sh\");\n      if(ff==string::npos) tmp[j].erase();\n      else                 tmp[j].erase(ff);\n    }\n    for(unsigned j=0; j<tmp.size(); ++j) if(tmp[j].length()>0) availableShell.push_back(tmp[j]);\n  }\n\n  if(printhelp) {\n    string msg=\n      \"Usage: plumed [options] [command] [command options]\\n\"\n      \"  plumed [command] -h|--help: to print help for a specific command\\n\"\n      \"Options:\\n\"\n      \"  [help|-h|--help]          : to print this help\\n\"\n      \"  [--is-installed]          : fails if plumed is not installed\\n\"\n      \"  [--has-mpi]               : fails if plumed is running without MPI\\n\"\n      \"  [--has-matheval]          : fails if plumed is compiled without matheval\\n\"\n      \"  [--has-dlopen]            : fails if plumed is compiled without dlopen\\n\"\n      \"  [--load LIB]              : loads a shared object (typically a plugin library)\\n\"\n      \"  [--standalone-executable] : tells plumed not to look for commands implemented as scripts\\n\"\n      \"Commands:\\n\";\n    fprintf(out,\"%s\",msg.c_str());\n    for(unsigned j=0; j<availableCxx.size(); ++j) {\n      CLTool *cl=cltoolRegister().create(CLToolOptions(availableCxx[j]));\n      plumed_assert(cl);\n      string manual=availableCxx[j]+\" : \"+cl->description();\n      delete cl;\n      fprintf(out,\"  plumed %s\\n\", manual.c_str());\n    }\n    for(unsigned j=0; j<availableShell.size(); ++j) {\n      string cmd=config::getEnvCommand()+\" \\\"\"+root+\"/scripts/\"+availableShell[j]+\".sh\\\" --description\";\n      FILE *fp=popen(cmd.c_str(),\"r\");\n      string line,manual;\n      while(Tools::getline(fp,line))manual+=line;\n      pclose(fp);\n      manual= availableShell[j]+\" : \"+manual;\n      fprintf(out,\"  plumed %s\\n\", manual.c_str());\n    }\n    return 0;\n  }\n  if(i==argc) {\n    fprintf(out,\"%s\",\"Nothing to do. Use 'plumed help' for help\\n\");\n    return 0;\n  }\n\n// this is the command to be executed:\n  string command(argv[i]);\n\n  if(find(availableCxx.begin(),availableCxx.end(),command)!=availableCxx.end()) {\n    CLTool *cl=cltoolRegister().create(CLToolOptions(command));\n    plumed_assert(cl);\n    // Read the command line options (returns false if we are just printing help)\n    if( !cl->readInput( argc-i,&argv[i],in,out ) ) { delete cl; return 0; }\n    int ret=cl->main(in,out,pc);\n    delete cl;\n    return ret;\n  }\n\n  if(find(availableShell.begin(),availableShell.end(),command)!=availableShell.end()) {\n    plumed_massert(in==stdin,\"shell tools can only work on stdin\");\n    plumed_massert(out==stdout,\"shell tools can only work on stdin\");\n    string cmd=config::getEnvCommand()+\" \\\"\"+root+\"/scripts/\"+command+\".sh\\\"\";\n    for(int j=i+1; j<argc; j++) cmd+=string(\" \")+argv[j];\n    int r=system(cmd.c_str());\n// this is necessary since system seems to return numbers which are multiple\n// of 256. this would make the interpretation by the shell wrong\n// I just return 1 in case of failure and 0 in case of success\n    if(r!=0) return 1;\n    else return 0;\n  }\n\n  string msg=\"ERROR: unknown command \" + command + \". Use 'plumed help' for help\";\n  fprintf(stderr,\"%s\\n\",msg.c_str());\n  return 1;\n\n}\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/src/tools/DLLoader.cpp": "/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n   Copyright (c) 2011-2018 The plumed team\n   (see the PEOPLE file at the root of the distribution for a list of names)\n\n   See http://www.plumed.org for more information.\n\n   This file is part of plumed, version 2.\n\n   plumed is free software: you can redistribute it and/or modify\n   it under the terms of the GNU Lesser General Public License as published by\n   the Free Software Foundation, either version 3 of the License, or\n   (at your option) any later version.\n\n   plumed is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU Lesser General Public License for more details.\n\n   You should have received a copy of the GNU Lesser General Public License\n   along with plumed.  If not, see <http://www.gnu.org/licenses/>.\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */\n#include \"DLLoader.h\"\n\n#ifdef __PLUMED_HAS_DLOPEN\n#include <dlfcn.h>\n#endif\n\nnamespace PLMD {\n\nbool DLLoader::installed() {\n#ifdef __PLUMED_HAS_DLOPEN\n  return true;\n#else\n  return false;\n#endif\n}\n\n\nvoid* DLLoader::load(const std::string&s) {\n#ifdef __PLUMED_HAS_DLOPEN\n  void* p=dlopen(s.c_str(),RTLD_NOW|RTLD_LOCAL);\n  if(!p) {\n    lastError=dlerror();\n  } else {\n    lastError=\"\";\n    handles.push(p);\n  }\n  return p;\n#else\n  return NULL;\n#endif\n}\n\nconst std::string & DLLoader::error() {\n  return lastError;\n}\n\nDLLoader::~DLLoader() {\n#ifdef __PLUMED_HAS_DLOPEN\n  while(!handles.empty()) {\n    dlclose(handles.top());\n    handles.pop();\n  }\n#endif\n}\n\nDLLoader::DLLoader() {\n  // do nothing\n}\n\n\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/src/tools/DLLoader.h": "/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n   Copyright (c) 2011-2018 The plumed team\n   (see the PEOPLE file at the root of the distribution for a list of names)\n\n   See http://www.plumed.org for more information.\n\n   This file is part of plumed, version 2.\n\n   plumed is free software: you can redistribute it and/or modify\n   it under the terms of the GNU Lesser General Public License as published by\n   the Free Software Foundation, either version 3 of the License, or\n   (at your option) any later version.\n\n   plumed is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU Lesser General Public License for more details.\n\n   You should have received a copy of the GNU Lesser General Public License\n   along with plumed.  If not, see <http://www.gnu.org/licenses/>.\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */\n#ifndef __PLUMED_tools_DLLoader_h\n#define __PLUMED_tools_DLLoader_h\n\n#include <stack>\n#include <string>\n\nnamespace PLMD {\n\n/// \\ingroup TOOLBOX\n/// Class taking care of dynamic loading.\n/// It contains wrappers to the dlopen() routine.\n/// It is designed so that when an object of this class goes\n/// out of scope all the libraries loaded by it are unloaded. In this\n/// manner, loaded libraries are automatically unloaded at the end of\n/// execution. Libraries are loaded with RTDL_LOCAL option, which\n/// means that they are not accessible from outside. Still, if they\n/// contain self-registering classes, they will register themselves\n/// to the ActionRegister object.\nclass DLLoader {\n  std::stack<void*> handles;\n  std::string lastError;\n/// Private copy constructor\n  DLLoader(const DLLoader&);\n/// Private assignment\n  DLLoader&operator=(const DLLoader&);\npublic:\n/// Default constructor\n  DLLoader();\n/// Cleanup\n  ~DLLoader();\n/// Load a library, returning its handle\n  void* load(const std::string&);\n/// Returns the last error in dynamic loader\n  const std::string & error();\n/// Returns true if the dynamic loader is available (on some systems it may not).\n  static bool installed();\n};\n\n}\n\n#endif\n",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/developer-doc/Doc.txt": "// This document is formatted for Doxygen\n/**\n\\mainpage Plumed 2\n\nRoadmap:\n- Cloning most PLUMED1 features (to be defined)\n- Public beta release (to be defined)\n- 2.0 public release (to be defined)\n\n\\section FeaturesAndChanges Features and changes\n\nThis are some comments about the structure of the code:\n- Re-designed from scratch, hopefully better.\n- Input is conceptually similar but NON compatible. It is difficult to automatically\n  convert old input files, but we could provide a short transition guide.\n  The new plumed.dat is a sort of script containing a list of actions to be performed at each step.\n  Notable differences in input:\n  - An Action is composed of a line (possibly with continuations) of\n    space-separated words, and corresponds more-or-less to a directive in PLUMED1.\n\\verbatim\nDISTANCE ATOMS=0,300 LABEL=dist NOPBC\n\\endverbatim\n    The first word (DISTANCE here) defines the directive type, all other words are arguments\n    Most arguments are named, and has the form \"NAME=VALUE\" (ATOMS and LABEL in the example).\n    Others are flags (NOPBC in the example).\n  - Continuation can be done with \"...\" syntax (notice the space between DISTANCE and dots):\n\\verbatim\nDISTANCE ...\n  ATOMS=0,300\n  LABEL=dist\n  NOPBC\n... DISTANCE\n\\endverbatim\n  - All directives can be labeled (LABEL=dist in the example)\n  - A bias can only act on a labeled colvar:\n\\verbatim\nDISTANCE ATOMS=0,300 LABEL=dist\n# This is a harmonic restraint\nRESTRAINT ARG=dist KAPPA=1.0 AT=1.0\n\\endverbatim\n  - Some colvars have extra named values, which can be accessed with \".\" syntax\n\\verbatim\nDISTANCE ATOMS=1,10 LABEL=dist COMPONENTS\nRESTRAINT ARG=dist.x KAPPA=1.0 AT=1.0\n\\endverbatim\n    Here COMPONENTS is telling to DISTANCE to also compute the three components.\n    This is expected to be useful for variables which have multiple components\n    but that are heavy and we would like to compute only once (e.g. components\n    of the inertia tensor of a large molecule).\n    Also methods can have extra named values, such as the energy for a restraint.\n  - to print a COLVAR-like file (name can be changed), use PRINT directive\n\\verbatim\nPRINT ARG=d1,d1.x,d1.y,d1.z STRIDE=100 FILE=COLVAR\n# or\nPRINT ARG=d1.* STRIDE=100 FILE=COLVAR1\n# or, to print all the variables defined in the plumed.dat up to this point\nPRINT ARG=* STRIDE=100 FILE=COLVAR_ALL\n\\endverbatim\n- The library has been written in C++ for a more flexible structure:\n  - Extensive use of STL containers for things such as lists/vectors/maps/...\n  - Polymorphism for collective variables/free energy methods\n  However, for compatibility, its main interface is in plain C (with FORTRAN\n  and C++ wrappers). All the C++ definitions are hidden in a PLMD namespace.\n- Hierarchy of classes describing each possible Action performed by PLUMED.\n  There is a class for each CV (e.g. PLMD::ColvarDistance, PLMD::ColvarEnergy,\n  PLMD::ColvarVolume), a class for each bias (e.g. PLMD::BiasRestraint, PLMD::BiasMovingRestraint),\n  and a class for each function (e.g. PLMD::FunctionCombine).\n  There are also auxiliary classes to write the output (PLMD::Print),\n  to set the units (PLMD::Units), to print dedug information (PLMD::Debug),\n  to flush the open files (PLMD::Flush), etc.\n  More or less, there should be a class for each possible directive of \"plumed.dat\".\n  To see the full hierarchy, look at PLMD::Action.\n- It should be possible to program Actions independently from each other. To this\n  aim, there is a register (PLMD::ActionRegister, contained in the function\n  PLMD::actionRegister()) where, during C++ initialization, each\n  Action registers itself. Thus, if a new CV or bias is added, there is no need\n  for recompilation. If dlopen() is available on a system, it should be possible\n  to load Actions runtime (using LOAD directive).\n  In the long run we can imagine libraries of CVs\n  suitable for different problems and, possibly, released independently from\n  the kernel. On a mainframe, one could add CVs without recompiling neither plumed\n  nor the MD engine.\n- There is an option to load the plumed kernel at runtime. If you patch with\n  --runtime, the plumed kernel is looked for at the path in variable PLUMED_KERNEL.\n  If the variable is not set, basic (un-plumed) version of MD is used.\n  On a mainframe, one can have multiple installed plumed versions.\n- Ideally, inside the kernel there is nothing related to specific CVs or FE-methods. Thus, CVs and \n  methods are optional plugins for PLUMED. The only exception\n  are tools which are common to several CVs/methods, such as grid interpolators, etc.\n- Ideally, inside the kernel there is nothing related to specific MD code. The interface is kept\n  as standard as possibly. Anyway, all the details of the interaction PLUMED/MD are inside the\n  src/Atoms.cpp file.  E.g., there are two (templated) versionsi of class PLMD::MDAtoms,\n  one for double precision and the other\n  for single precision MD. Code specific tools could be added here. In the future, we may try to\n  design a plugin approach also for MD engines (similarly to CVs/methods).\n- To simplify interface, there is a single routine plumed_cmd which takes a string and a pointer.\n  It can be used to pass any information to plumed, such as:\n\\verbatim\nplumed p=plumed_create();\nplumed_cmd(p,\"setNatoms\",&natoms);\nplumed_cmd(p,\"setMDEngine\",\"gromacs\");\nplumed_cmd(p,\"init\",NULL);\n...\nplumed_cmd(plumedmain,\"setPositions\",pos);\nplumed_cmd(plumedmain,\"setBox\",box);\nplumed_cmd(plumedmain,\"setEnergy\",&energy);\nplumed_cmd(plumedmain,\"setForces\",forces);\nplumed_cmd(plumedmain,\"setVirial\",virial);\nplumed_cmd(plumedmain,\"calc\",NULL);\n...\nplumed_finalize(p);\n\\endverbatim\n  Fortran/C++ interfaces are similar (see src/Plumed.c for details), and are based on the C interface\n  (wrappers).\n- Units: PLUMED reads and writes only in its internal units, which, by default, are\n  nm and kj/mol. In plumed.dat it is possible to change it to other choices:\n\\verbatim\nUNITS ...\n  LENGTH=A\n  TIME=fs\n  ENERGY=kcal/mol\n... UNITS\n\\endverbatim\n  The MD code should specify to plumed its internal units, so as to allow proper conversion.\n  E.g., a code using angstrom and kcal should do the following calls\n\\verbatim\ndouble energyUnits=4.184;\ndouble lengthUnits=0.1;\nplumed_cmd(plumedmain,\"setMDEnergyUnits\",&energyUnits);\nplumed_cmd(plumedmain,\"setMDLengthUnits\",&lengthUnits);\n\\endverbatim\n- Other cool features:\n  - Functions of colvars (or functions of functions) can be used. For example, defining:\n\\verbatim\nCOMBINE LABEL=sum2     ARG=dist.x,dist.y,dist.z POWERS=2,2,2\nCOMBINE LABEL=sqrtsum2 ARG=sum2                 POWERS=0.5\n# The following two restraints are equivalent:\nRESTRAINT ARG=dist     AT=1.2 KAPPA=1.0\nRESTRAINT ARG=sqrtsum2 AT=1.2 KAPPA=1.0\n\\endverbatim\n  - Multiple-time-step: biases can be applied with multiple-time-step using a stride. This should\n    help for variables which are heavy to compute but smooth\n\\verbatim\nRESTRAINT ARG=dist AT=1.2 KAPPA=1.0 STRIDE=2\n\\endverbatim\n  - It is possible to include other files:\n\\verbatim\nINCLUDE FILE=anotherplumed.dat\n\\endverbatim\n  - It is possible to load shared libraries implementing new CVs and methods:\n\\verbatim\nLOAD FILE=share-object.so\n\\endverbatim\n\n\\section Install Install\n\n- Configure and compile your MD code\n- Configure and compile PLUMED, possibly using the same compiler:\n\\verbatim\n$ ./configure.sh\n... choose your compiler interactively here ...\n... it may be necessary to edit the Makefile.conf file ...\n$ make -j 4\n\\endverbatim\n- Source the ./sourceme.sh file\n\\verbatim\n$ source sourceme.sh\n\\endverbatim\n  \\attention This should be done on every shell where you want to patch/run plumed\n- Go to your MD code directory and do the patch\n\\verbatim\n$ plumed patch --patch\n\\endverbatim\n  (use -h to get information about other options).  Also experiment other linking modes (e.g. --runtime)\n- Recompile your MD code (without necessarily cleaning it)\n\n\\section Content Content\n\nsrc/\nPlumed library source code (C++) plus a two wrapper files (Plumed.c and PlumedStatic.cpp; the latter is just\nequivalent to the former but is compiled as cpp, for testing, and does not allow runtime binding).\nSources are compiled into a libplumed.so library and a libplumedKernel.so library\n(replace .so with .dylib on Mac).\nThe src/Plumed.inc file contains shortcuts for the compilation. Just include it in your makefile and:\n- link the src/Plumed.h file in an included directory\n- add to the linker command the $(PLUMED_LDFLAG) options, to have the proper link flags\n- add to the linker command the $(PLUMED_LIBS) variable, to link the proper external libraries\n- add to the linker command one of the following variables:\n  - (A) \\$(PLUMED_OBJ) : plumed will be statically bound\n  - (B) \\$(PLUMED_SHARED_OBJ) : plumed will be dynamically bound\n  - (C) \\$(PLUMED_WRAPPER) : behavior depend on runtime value of the PLUMED_KERNEL environment variable.\n    If set to the full path of the libplumedKernel.so library, plumed will be available.\n    If unset, or if set to a wrong file, plumed will not be available.\n- The difference between (A) and (B) is that in case (B) if you recompile plumed and rerun MD your code\n  is automatically up to date.\n  The difference between (B) and (C) is that in case (C) the MD code is able to run also if plumed is\n  not available. This allows to have a single compiled MD code for both plumed users and others.\n  Moreover, in case (C) it is trivial to change plumed version at execution time, by properly setting\n  the PLUMED_KERNEL environment variable.\n  Notice that in (B) case the full path of the plumed library is recorded, thus it should not\n  be changed after patching, and it should be reachable from computing nodes.\n  All these task can be done automatically with \"plumed patch\" using respectively the flags:\n  - (A) --static\n  - (B) --shared\n  - (C) --runtime\n   \nextensions/ \n   Plumed extensions (e.g. contributed collective variables, ...)\n   They are compiled into a libplumedExtensions.so file which can be loaded at runtime.\n   To load them, use LOAD command inside plumed.dat\n\ntest/link/\n   A few simple executables to test compilation/linking\n   Executables are:\n-  (A) XXX-static statically linked with src/*.o (except src/Plumed.o)\n-  (B) XXX        dynamically linked with libplumed.so\n-  (C) XXX-dummy  statically linked with src/Plumed.o\n\nuser-doc/\n   User documentation\n\ndeveloper-doc/\n   Developer documentation\n\n\\section Notes Notes\n\nInformation about C++\nhttp://www.parashift.com/c++-faq-lite/\n\nCompiler options to use shared libraries on many architectures:\nhttp://www.fortran-2000.com/ArnaudRecipes/sharedlib.html\n\n\\page HowToAddACollectiveVariable How to add a collective variable\n\n\\page HowToAddAFunction How to add a function\n\n\\page HowToAddABias How to add a biasing potential\n\n\n*/\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/src/molfile/periodic_table.h",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/regtest/isdb/rt-jcouplings-mi/trajectory.xtc",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/regtest/isdb/rt-saxs-mi/traj.0.xtc",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/regtest/isdb/rt-saxs-mi/traj.1.xtc",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/regtest/drr/rt-extract2dpbc/eabf2dpbc.drrstate",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/regtest/drr/rt-extract/test.drrstate",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/regtest/drr/rt-merge/eabf_win1.drrstate",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/regtest/drr/rt-merge/eabf_win2.drrstate",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/regtest/drr/rt-restart/bck.eabf.drrstate.0.reference",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/regtest/drr/rt-restart/eabf.drrstate",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/regtest/trajectories/molfile_plugin/traj.dcd",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/regtest/trajectories/molfile_plugin/traj.xtc",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/regtest/crystallization/rt-sean-marks/some_frames.xtc",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/regtest/basic/rt19-mpi/HH.gz",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/regtest/basic/rt19-mpi/HH.0.gz",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/regtest/basic/rt19-mpi/input_colvar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/regtest/basic/rt19-mpi/COLVAR.res.1.gz",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/regtest/basic/rt19-mpi/HH.1.gz",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/regtest/basic/rt19-mpi/COLVAR.res.0.gz",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/regtest/basic/rt-maxent-3/traj.4.xtc",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/regtest/basic/rt-maxent-3/traj.2.xtc",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/regtest/basic/rt-maxent-3/traj.0.xtc",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/regtest/basic/rt-maxent-3/traj.5.xtc",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/regtest/basic/rt-maxent-3/traj.1.xtc",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/regtest/basic/rt-maxent-3/traj.3.xtc",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/regtest/basic/rt-mpi7b/grid.0.gz",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/regtest/basic/rt-mpi7b/gridx.0.gz",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/regtest/basic/rt-acc-1/aladip.xtc",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/regtest/basic/rt-maxent-5/traj.2.xtc",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/regtest/basic/rt-maxent-5/traj.0.xtc",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/regtest/basic/rt-maxent-5/traj.1.xtc",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/regtest/basic/rt-xdrfile-1/test.xtc.reference",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/regtest/basic/rt-xdrfile-1/test.trr.reference",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/regtest/basic/rt-xdrfile-1/traj.trr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/regtest/basic/rt-maxent-1/traj.xtc",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/regtest/basic/rt-molfile-3/test.xtc",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/regtest/basic/rt54-xdrfile/helix.ttt.reference",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/regtest/basic/rt54-xdrfile/helix.trr.reference",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/regtest/basic/rt54-xdrfile/helix.xtc.reference",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/regtest/basic/rt54-xdrfile/helix-pr.xtc.reference",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/regtest/basic/rt54-xdrfile/traj.xtc",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/regtest/basic/rt19/COLVAR.res.gz",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/regtest/basic/rt19/HH.gz",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/regtest/basic/rt19/COLVAR.nores.gz",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/regtest/basic/rt19/input_colvar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/regtest/basic/rt19/bck.0.COLVAR.nores.gz.reference",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/regtest/basic/rt-ermsd/traj.xtc",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/regtest/basic/rt-ermsd2/traj.xtc",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/regtest/basic/rt-maxent-4/traj.xtc",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/regtest/basic/rt-maxent-2/traj.xtc",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/regtest/basic/rt-xdrfile-2/traj.1.trr.reference",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/regtest/basic/rt-xdrfile-2/traj.0.trr.reference",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/regtest/basic/rt-xdrfile-2/test.1.trr.reference",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/regtest/basic/rt-xdrfile-2/traj.0.trr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/regtest/basic/rt-xdrfile-2/test.1.xtc.reference",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/regtest/basic/rt-xdrfile-2/traj.1.trr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/regtest/basic/rt-xdrfile-2/test.0.trr.reference",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/regtest/basic/rt-xdrfile-2/test.0.xtc.reference",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/regtest/basic/rt77/trajectory.xtc",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/developer-doc/octocat.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/developer-doc/developer-logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/developer-doc/logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/developer-doc/pigeon.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/user-logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/octocat.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/pigeon.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/ves-lugano2017-kinetics_figure-2.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/trieste-2-block-averages.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/belfast-7-pt2fes.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/ves_basisf-chebyshev.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/belfast-2-bad-matrix.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/munster-usrem-phi-all.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/ves-lugano2017-kinetics_figure-1B.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/belfast-2-transition.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/belfast-7-pt2temp.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/ves-lugano2017-kinetics_figure-3.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/trieste-2-mc-autocorrelation.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/cambridge-2-deltaG.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/ves-lugano2017-ves1_fesEvolution1.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/belfast-2-ab-sz.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/ves-lugano2017-ves2_2D-fes.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/munster-metad-phifest.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/lugano-2-pca-coordinates.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/cambridge-chignolin.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/belfast-7-ptwteene.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/ves-lugano2017-metad_NaCl.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/trieste-5-demux-good.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/belfast-2-ala.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/ves-lugano2017-metad_biasEvolution.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/belfast-7-ptmetadhidd.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/trieste-4-block-phi.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/ves-lugano2017-metad_reweightBoth.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/cambridge-2-cvs.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/trieste-6-gb.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/trieste-2-autocorrelation.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/ves_basisf-legendre.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/belfast-2-ab-sz-nowhere.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/belfast-2-metadpath.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/trieste-2-histogram-errors.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/belfast-7-pt.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/belfast-7-ptdemux.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/ves-lugano2017-ves1_reweight.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/ves-lugano2017-ves2_well-tempered.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/ves-lugano2017-ves1_biasedDistrib.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/munster-metad-phihills.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/trieste-5-demux-bad.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/belfast-5-work-1.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/belfast-2-ab.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/munster-usrem-phi-fes.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/ves_basisf-legendre-scaled.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/ves-lugano2017-metad_fesEvolution.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/belfast-2-metadpath-free.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/belfast-6-wtb6.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/trieste-5-colvars.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/ves-lugano2017-metad_barrier.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/belfast-2-good-matrix.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/trieste-6-bard1.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/ves-lugano2017-ves1_targetDistrib.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/belfast-8-convergence.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/belfast-2-cdk.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/belfast-7-pt2demux.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/belfast-5-doublesteer.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/munster-metad-phi.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/trieste-6-cmycurea.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/ves-lugano2017-ves2_targetDistrib.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/munster-metad-phifes-difft.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/ves-lugano2017-kinetics_figure-1A.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/trieste-2-confidence.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/munster-usrem-psi-demux.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/belfast-6-phialone.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/belfast-7-ptfes.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/belfast-2-metadpath-correction.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/munster-ala-traj-metad.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/belfast-2-good-vs-bad.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/belfast-4-meta.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/cambridge-2-fes1d.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/ves-lugano2017-ves1_coeffs1.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/belfast-6-phifes.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/belfast-6-hidden.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/trieste-3-histo-dimer.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/belfast-7-ptalaw.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/belfast-5-jarz.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/belfast-6-difft.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/ves-lugano2017-metad_reweightDist.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/trieste-3-wdimer.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/belfast-6-phifest.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/trieste-5-weights.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/belfast-2-rama.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/belfast-6-metad.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/munster-usrem-psi-fes.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/ves-lugano2017-kinetics_StoneWales.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/belfast-7-ptmetadh.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/belfast-2-good-bad-path.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/belfast-6-wtdifft.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/belfast-6-wtb15.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/munster-metad-psi-phi.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/ves-lugano2017-logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/munster-metad-phifes.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/belfast-7-ptwtediff.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/belfast-8-mg1.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/ves-lugano2017-ves2_2D-coeffs.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/lugano-2-trans-state.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/ves-lugano2017-ves1_fes.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/munster-ala-traj.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/figs/cambridge-2-fes.png",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/belfast-8/first/topol0.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/belfast-8/first/topol2.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/belfast-8/first/topol3.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/belfast-8/first/topol1.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/belfast-8/second/topol0.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/belfast-8/second/topol2.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/belfast-8/second/topol3.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/belfast-8/second/topol1.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/cambridge-2/TOPO/topol0.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/cambridge-2/TOPO/topol2.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/cambridge-2/TOPO/topol3.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/cambridge-2/TOPO/topol1.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/cambridge-2/first/topol0.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/cambridge-2/first/topol2.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/cambridge-2/first/topol3.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/cambridge-2/first/topol1.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/trieste-5/topol0.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/trieste-5/topol2.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/trieste-5/topol3.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/trieste-5/topol1.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/trieste-3/wdimer/dimer.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/trieste-3/aladip/aladip.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/lugano-2/PCA-isocommittor/traj_comp.xtc",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/lugano-2/PATH-isocommittor/traj_comp.xtc",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/lugano-2/2CV-isocommittor/traj_comp.xtc",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/trieste-4/topol.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/belfast-4/topol.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/munster/TOPO/topolBwat.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/munster/TOPO/topolA.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/munster/TOPO/topolAwat.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/munster/TOPO/topolB.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/cineca/SETUP/topolA.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/cineca/SETUP/topolB.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/belfast-7/Exercise_4/TOPO/topol0.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/belfast-7/Exercise_4/TOPO/topol2.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/belfast-7/Exercise_4/TOPO/topol3.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/belfast-7/Exercise_4/TOPO/topol1.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/belfast-7/Exercise_1/TOPO/topol0.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/belfast-7/Exercise_1/TOPO/topol1.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/belfast-7/Exercise_2/TOPO/topol0.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/belfast-7/Exercise_2/TOPO/topol2.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/belfast-7/Exercise_2/TOPO/topol3.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/belfast-7/Exercise_2/TOPO/topol1.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/belfast-7/Exercise_3/TOPO/topol0.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/belfast-7/Exercise_3/TOPO/topol2.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/belfast-7/Exercise_3/TOPO/topol3.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/belfast-7/Exercise_3/TOPO/topol1.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/cambridge-3/topol0.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/cambridge-3/topol2.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/cambridge-3/topol3.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/cambridge-3/topol1.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/belfast-6/TOPO/topol.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/belfast-9a/system/topol.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/belfast-9a/third/topol7.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/belfast-9a/third/topol0.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/belfast-9a/third/topol2.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/belfast-9a/third/topol6.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/belfast-9a/third/topol3.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/belfast-9a/third/topol4.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/belfast-9a/third/topol5.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/belfast-9a/third/topol1.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/belfast-9a/first/topol.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/belfast-9a/second/topol0.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/belfast-9a/second/topol2.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/belfast-9a/second/topol3.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/belfast-9a/second/topol1.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/trieste-1/traj-broken.xtc",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/trieste-1/traj-whole.xtc",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/cambridge-1/topol.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/others/isdb-1/reference-impl-pbmetad/topolnew2.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/others/isdb-1/reference-impl-pbmetad/topolnew7.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/others/isdb-1/reference-impl-pbmetad/topolnew9.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/others/isdb-1/reference-impl-pbmetad/topolnew8.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/others/isdb-1/reference-impl-pbmetad/topolnew1.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/others/isdb-1/reference-impl-pbmetad/topolnew0.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/others/isdb-1/reference-impl-pbmetad/topolnew6.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/others/isdb-1/reference-impl-pbmetad/topolnew4.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/others/isdb-1/reference-impl-pbmetad/topolnew5.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/others/isdb-1/reference-impl-pbmetad/topolnew13.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/others/isdb-1/reference-impl-pbmetad/topolnew3.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/others/isdb-1/reference-impl-pbmetad/topolnew10.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/others/isdb-1/reference-impl-pbmetad/topolnew12.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/others/isdb-1/reference-impl-pbmetad/topolnew11.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/others/isdb-1/reference-impl/run.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/others/isdb-1/m_and_m/topolnew2.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/others/isdb-1/m_and_m/topolnew7.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/others/isdb-1/m_and_m/topolnew9.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/others/isdb-1/m_and_m/topolnew8.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/others/isdb-1/m_and_m/topolnew1.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/others/isdb-1/m_and_m/topolnew0.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/others/isdb-1/m_and_m/topolnew6.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/others/isdb-1/m_and_m/topolnew4.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/others/isdb-1/m_and_m/topolnew5.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/others/isdb-1/m_and_m/topolnew13.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/others/isdb-1/m_and_m/topolnew3.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/others/isdb-1/m_and_m/topolnew10.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/others/isdb-1/m_and_m/topolnew12.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/user-doc/tutorials/others/isdb-1/m_and_m/topolnew11.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/astyle/doc/news.html",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/test/gromacs/cs2back/topol0.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/test/gromacs/cs2back/topol2.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/test/gromacs/cs2back/topol3.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-plumed-2.4.4-qnfsyjhkikkv4exyvlegxk4iboaodhgm/spack-src/test/gromacs/cs2back/topol1.tpr"
    ],
    "total_files": 4673
}