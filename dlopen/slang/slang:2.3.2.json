{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-slang-2.3.2-aat5lz6qqlpwezyu5gvypwdi5kiqkp5y/spack-src/changes.txt": "-*- mode: text; mode: fold -*-\nChanges since 2.3.1a\n1. modules/stats_kendall.c: Updated to use Knight's O(NlogN)\n   algorithm.  This update was facilitating by separating out some\n   integer typedefs from _slang.h and placing them in _slint.h.  The\n   closely relation mann_kendall function was also added to the stats\n   module.\n2. modules/stats_kendall.c: In the prtaus function, the loops were\n   reorganized loops to eliminate embedded if-tests, and the code that\n   deals with arrays were made for \"C-like\".\n3. Merged Manfred Hanke's CSV module documentation updates.\n4. slsh/lib/cmdopt.sl: The form -fVAL was not working as described for\n   short-options whose value (VAL) is optional.\n5. src/sl*.h: Updated Unicode tables from version 5 to 9\n6. src/slischar.h: Previously, if a lower(upper) case character did\n   not have a mapping to an upper(lower) case character, it was take\n   to not have a case.  This restriction has been dropped.  In other\n   words, it is nolonger necessary for an upper(lower) case character\n   to have a lower(upper) case equivalent.\n7. src/slpack.c: Added an intrinsic function (_array_byteswap) that\n   may be used to convert the values of an array from one endianness\n   to another.\n8. src/slparse.c: It is now possible to use reserved words as struct\n   field names without quoting them.  For example, it is now possible\n   to write\n              s = struct { public = value };\n   Previously, this required the field name to be quoted:\n              s = struct { \"public\" = value };\n\n9. modules/json-module.c: Malformed UTF-8 was not being properly\n   handled by the json-encoder.\n10. modules/csv-module.c: The decode_csv_row function was ignoring the\n    delimiter setting after a quoted string.\n11. src/slparse.c: A for statement lacking a conditional expression\n    was not being properly handled (noticed by rocket penguin).\n12. src/struct.c: Rewrote the __add_binary function, which was not\n    properly handling multiple data types.\n13. changes.txt: Converted to UTF-8 (Miroslav Lichvar)\n14. src/slscanf.c: The sscanf function was not parsing \".0\" as a\n    floating poing number (zero).\n15. The library was failing to compile when __tmp operator\n    optimizations were turned off.  The default is to permit such\n    optimizations since they can lead to faster running code and less\n    memory usage.  Bug reported by Henry.\n16. src/slsh.c: Updated copyright year.\n17. INSTALL.unx: Corrected the URL for the ONIGURUMA regexp library; added\n    a small note that PCRE2 is not supported (Henry Nelson).\n18. modules/csv-module.c: If the delimiter or quote character is\n    specified to be 0, then use the defaults (, and \").\n19. src/sltermin.c: Added support for the new ncurses 32-bit terminfo\n    database entries.\n20. autoconf/aclocal.m4,src/Makefile.in: Install shared objects\n    (modules and library) with executable permissions.\n21. src/sl*.h: Updated Unicode tables from version 9 to 10\n22. src/sltermin.c: Corrected a few typos in the comments (Manfred\n    Hanke).\n23. Updated Copyright year to 2018\n24. doc updates\n25. src/sltermin.c: removed unnecessary \"extern\" function attribute.\n26. src/test/syntax.sl: The version number test required the use of\n    isalpha and not isascii.\n\n{{{ Previous Versions\n\nChanges since 2.3.1\na. Some tests were failing when compiled with a compiler that defaults\n   to using `unsigned char'.  In the few places where a `signed char'\n   was assumed, `char' was changed to `signed char'.  Also, a\n   copy-paste error was corrected in the src/test/sltest.c that caused\n   the test program to fail on big-endian 64 bit systems.\n\nChanges since 2.3.0\n1. modules/json-module.c: Fix a possible uninitialized variable error.\n2. Define _BSD_SOURCE the few places necessary to get prototypes for\n   strtoll and BSD specific network struct fields.\n3. src/slstd.c: define _SVID_SOURCE to get prototype for putenv\n4. modules/Makefile.in: On cygwin, the libraries must be placed last\n   for module compilation (Marco Atzeri).\n5. src/slstrops.c: The return value from pop_lut was not being\n   checked leading to a segv upon faiure (reported by Morten Bo\n   Johansen).\n6. slsh/lib/slshrl.sl: Floating point literals with a leading '.' were\n   not being properly handled by slsh_interactive_massage_hook\n   (Manfred Hanke).\n7. src/slarrfun.c: Added wherefirst/last_eq/ne/gt/lt/ge/le functions,\n   which are much faster than using just wherefirst or wherefast with\n   the implied binary comparison.  For example:\n\n     slsh> .load rand\n     slsh> x = rand_uniform (100000);\n     slsh> tic; loop (1000) i=wherefirst(x>=0.999); toc; i;\n     0.597183\n     268\n     slsh> tic; loop (1000) i=wherefirst_ge(x,0.999); toc; i;\n     0.0024419999999999997\n     268\n\n   For this case, the speedup about 0.60/0.0024 = 250.\n8. Rebuilt text documentation for change #7.\n9. Documentation updates (Manfred Hanke).\n10. src/slarrfun.inc: use a macro for the common case statements of\n    the wherefirst_op and wherelast_op code. (Manfred Hanke)\n11. modules/stats.sl: Added Anderson-Darling tests:\n\n       ad_test:   test for normality\n       ad_ktest:  k-sample test\n\n    I also broke out some of the statistical tests into separate files.\n12. Tweaked the makefiles to create a statically-linked version of\n    slsh when `make static` and `make install-static` are run.\n13. For the static slsh build, disable dynamic linking.\n14. src/slstdio.c:fread_bytes: A size_t vs unsigned int issue was\n    causing SLmalloc to be called with an incorrect size in some cases.\n15. src/slbstr.c: Made the size of the printable representation of\n    binary strings customizable via get/set_printable_bstring_size\n    intrinsics.\n16. slsh/slsh.c: A missing continue statement was causing slsh to stop\n    parsing command line options after the first occurrence of -D.\n17. src/slang.h: Remove duplicate prototype for\n    SLrline_get_update_client_data. (Valdis Kletnieks)\n18. src/slposdir.c: Add statvfs intrinsic that wraps corresponding\n    POSIX function.\n19. modules/Makefile.in, png-module.c: Cygwin tweaks\n    (Marco Atzeri).\n20. */*.c: Added explicit (unsigned char) typecast to isspace/isdigit\n    functions.\n21. */*.c: reduced the scope of some variables; removed duplicate ||\n    expression from slarray.c (David Binderman)\n22. src/slarray.c: The Kahan error corrections were not be added back\n    when summing complex arrays.\n23. slsh/lib/listfuns.sl: Corrected the usage method for heap_new().\n24. Found and corrected a few memory leaks that occur after a malloc\n    failure; added some more unit tests\n25. Added more regression tests and bug fixes:\n\n     slscanf.c: %i was failing for Octal and Hex forms\n     slbstr.c: <, and > operators were swapped for binary strings\n     histogram-module.c: A missing 'break' statement was causing hist2d\n       to fail when binning 8 bit integers.\n\n26. src/slposdir.c: If an fdopen'd FILE* object was closed, then do\n    not close the underlying fd descriptor; added more regression/unit\n    tests.\n27. modules/test/test_stats.sl: Do not use 64 bit ints when testing\n    the mean and stddev functions on 32 bit systems since these\n    integers are not supported by the functions.\n28. modules/stats-module.inc: Some arrays were causing median_nc to\n    not converge.\n29. src/slscanf.c: Allow whitespace in the format to match 0\n    whitespace characters in the input string.\n30. src/slproc.c: define _XOPEN_SOURCE to be 500\n31. src/slproc.c: #30 caused a compilation error on macos since it\n    caused certain rusage fields to not be exposed.  Define\n    _BSD_SOURCE to expose them.\n32. src/slerr.c: Add a windows error handler so that windows will\n    return an error code instead of aborting when passed a bad file\n    descriptor, etc.\n33. src/slproc.c: Use _XOPEN_SOURCE=1 instead of 500.  This setting\n    works for both OSX and Windows.  (See #30,31)\n34. src/slcurses.h: SLtt_Char_Type and SLcurses_Char_Type were being\n    used interchangably.\n35. src/sldisply.c: Added support for 24 bit color terminals based\n    upon a patch from Egmont Koblinger forwarded to me by Anton Kochkov.\n    See NEWS for usage.  (for 64 bit systems)\n36. src/slposio.c: Rename the posix_close function to avoid conflict\n    with an upcoming POSIX standard. (patch provided by Thomas\n    Petazzoni).\n37. slposio.c,slstdio.c,slposdir.c: Do not include <sys/fcntl.h> if\n    <fcntl.h> was included. (variation on a patch provided by Thomas\n    Petazzoni).\n38. slsh/: Move processing of the SLSH_PATH environment variable to\n    slsh.rc.  Also, guess the slsh lib path based upon the location of\n    the executable.\n39. modules/onig-module.c: Only allow certain flags for onig_search.\n    Others cause onig_search to reinterpret the meaning of the region\n    argument.\n40. slsh/etc/slsh.rc: Add support for multiple paths to the\n    *_to_slang_load_path functions.\n41. src/slscanf.c: The formats %x and %o were producing a signed values instead\n    of an unsigned ones.\n42. src/slconfig.h,...: Added longlong functions to win32, use\n    \"%I64d/u\" format when printing long long on win32.\n43. src/slcurses.c: Changed the data type of SLcurses_Char_Type back\n    to long[128] (change #34 broke backward compatibility)\n44. src/slstruct.c: Optional argument to _push_struct_field_values may\n    be used to specify the fields to be pushed.\n45. src/sllimits.h: Bumped up the size of the slsring table.  A future\n    version will dynamically resize the table.\n46. src/slstd.c,slstrops.c: Improve the speed of sprintf by reducing\n    the number of reallocs and special casing strings in the\n    _pSLstring_intrinsic function.\n47. modules/cvs.sl: Reading a CSV file from an open file descriptor\n    (e.g., stdin) was failing.  The updated regression test also\n    exposed a side effect of change #38: the uninstalled version of\n    slsh.rc lacks processing of SLSH_PATH.  Processing of SLSH_PATH\n    was added to the test.sl include file.\n48. src/slregexp.c: The RE \\d? was not handled properly.\n49. src/slmisc.c: Catch empty hex \\x and decimal \\d escape sequences.\n50. autoconf/Makefile.in: Add install-pkgconfig to the install-static\n    target. (Max Filippov).\n51. src/test/signal.sl: Skip the sigsuspend test when running from\n    make.  The test involves the user pressing ^C, which kills the\n    make process.  This test should be run outside of make.\n52. src/slmisc.c: Corrected a typo in the error message introduced in\n    change #49 (Manfred Hanke).\n53. src/sltime.c: Added _ftime, which returns the number of\n    (wallclock) seconds since an epoch.\n54. Changes the array allocation routines to use a signed integer\n    (SLindex_Type) vs an unsigned one (SLuindex_Type).  The reason for\n    this is that all slang arrays may be indexed from the end using a\n    negative index, and multidemsional arrays must allow indexing\n    using a single signed index, e.g.,\n\n          a = Int_Type[10,20]; ...;  a[where(a<0)] = 0;\n55. src/sltime.c: Fixed a windows compile error involving _ftime\n    (see change #53).\n56. src/slnspace.c,...: Check for malformed namepace names.\n57. doc/tm/: Documentation updates (Agathoklis D. Chatzimanikas)\n58. slsh/slsh.c: Added __slsh_startup_hook function that slsh will\n    call after loading slsh.rc.\n59. modules/: Updated the png and pcre modules, and added new test\n    scripts.  Added support for setting the compression value to the\n    png module, and added additional symbolic constants to the pcre\n    module.\n60. slsh/lib/test/: Have `make check` run the test scripts in this\n    directory.\n61. modules/csv-module.c: Added line number information to error\n    messages.\n62. src/test/: Updated some tests\n63. src/sltoken.c: bug fix affecting reading byte-compiled files: Use\n    SLatoul for unsigned longs instead of atol; remove alignment test\n    from pack.sl until a new test can be devised.\n64. Added support for compiling against slsyswrap testing library.\n    It is disabled for production code.\n65. Bug fixes:\n\n      src/slarrfun.c: SLang_duplicate_array return value not checked;\n      src/slstdio.c: SLfree was used in an error handler instead of\n       SLang_free_slstring\n      src/slposio.c: If EINTR happens in the close function, do not\n       restart it.  See <http://lwn.net/Articles/576478/>.\n      src/sltoken.c: Use unsigned char * cast for SLatol functions.\n\n66. src/slmisc.c: \\uABCD supported in string literals.  Previously,\n    braces were required (\\u{ABCD}).\n67. Updated many of the unit tests/regression scripts.\n68. Updated more tests.  Made use of the _slang.h LONG_IS_INT macro to\n    eliminate some unused functions on systems where\n    sizeof(long)==sizeof(int).\n69. modules/slsmg-module.c: was not compiling on windows; fixed a\n    malformed comment in src/test/sltest.c.\n70. Added \"#define _DEFAULT_SOURCE\" to a few places to quiet gcc;\n    Added slsyswrap support to src/slposdir.c,slposio.c,slcommon.c\n71. src/slexcept.c: The deprecated _clear_error function using in\n    ERROR_BLOCKs was not completely removing queued error messages.\n    Note: ERROR_BLOCKs will be removed in version 3.\n72. src/slregexp.c: Added \"\\{m,n\\}\" support to '\\1'-'\\9', '.', and\n    '\\d' REs.  '$' changed to match only at the end of a string, or\n    just before a \\n at the end of the string.  Updated regexp.sl test.\n73. src/slang.c: The delete_interpreter function (called upon program\n    exit) was not freeing local variables on the function call stack.  This\n    showed up as a memory leak when a function called \"exit\", which\n    would not allow the function stack to unroll and trigger the\n    destructors.\n74. src/*.c: Added a few gcc #pragmas to turn off warnings about\n    non-string literals as printf-style formats.\n75. src/*.c, modules/*.c: If close fails with errno=EINTR, do not restart\n    it.  Doing so invokes undefined behavior.\n76. src/slerr.c: Add _pSLerr_deinit to the exit hook.\n77. src/slarray.c,src/slclass.c,src/slstruct.c: Use the SLclass_set*\n    functions to set SLang_Class_Type fields instead of directly\n    accessing them.\n78. Added additional unit/regresssion tests.\n79. Makefiles: Add a time-stamp dependency to directory targets to\n    avoid race conditions when running parallel make (Based upon a\n    patch from Kylie McClain).\n80. src/Makefile.in: Updated the libslang.a dependency to account for\n    change #79.\n81. tweaked a few files (modules/png-module.c,src/slarith.inc,src/slimport.c)\n    to reduce gcc warnings.\n82. modules/test/test_slsmg.sl: Test skipped if the terminal type is\n    \"unknown\".\n83. Updated copyright years; some doc updates\n84. src/sldisply.c: make JMAX_COLORS consistent with SLTT_MAX_COLORS.\n85. src/slstrops.c: Added string_to_wchars and wchars_to_string\n    intrinsic functions.\n86. Moved gcc diagnosic pragmas outside function bodies for\n    compatibility with old versions of gcc.\n87. src/slwclut.c: Unclosed ranges (hyphen at the end of a character\n    set specification string) were not being handled properly: the\n    character befor the hyphen was being dropped, e.g.,\n\n      strcompress (\"foo-(bar)\", \"_()-\");\n\n    was producing \"foo_bar)\" instead of \"foo_bar\".\n88. src/sllimits.h: Reduce SLANG_MAX_RECURSIVE_DEPTH to 500 on\n    CYGWIN/WIN32 to avoid hitting the default runtime stacklimit.\n89. Updates to the mingw32/64 build system.\n90. src/sltermin.c: Avoid invalid free when TERMCAP is used.  See\n    <https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=837868>.\n91. Some documentation typos corrected (Agathoklis D. Hatzimanikas;\n    debian patches)\n92. src/_slang.h: On at least one platform, clang defines GNUC but\n    does not implement GNU C inline semantics.  Disble inline support\n    for clang if GNUC defined.\n93. src/sllimits.h: SLANG_MAX_RECURSIVE_DEPTH set to 1500 to decrease\n    the probability of running into the C runtime stacksize limit.\n94. src/test/sltest.c: A missing preprocessor #else block in change\n    #78 was causing UTF-8 tests to fail in a non-UTF8 environment.\n95. MacOSX changes: fix environ intrinsic, export DYLD_LIBRARY env\n    variable in test scripts.\n96. slsh/lib/process.sl: If execvp fails, include the name of the executable\n    in the error message.\n97. autoconf/config.*: Updated scripts\n98. .../runtests.sh: Added LD_LIBRARY_PATH to test scripts (removed in\n    #96)\n99. mkfiles/makefile.m32: Use mkfiles\\runslsh.bat instead of\n    mkfiles/runslsh.bat (Windows only).\n100. documentation updates\n\n\nChanges since 2.2.4\n1. src/slarray.c: Try to find a suitable multiplier for range arrays\n   to avoid roundoff errors.  Using the multiplier avoids the\n   [1:10:0.001] from having the element 1.1260000000000001.\n2. doc/tm/rtl/strops.tm: Correct typos in string_match documentation\n   (Manfred Hanke).\n3. modules/base64-module.c: Added a base64 encoder module.\n4. modules/chksum-module.c: A module to compute md5, sha1, etc\n   checksums.\n5. Removed a few unused variables from the code.\n6. Documentation updates and corrections by Agathoklis D. Hatzimanikas.\n7. src/slarray.c: array_map enhanced to handle functions that return\n   multiple values (based upon a patch from Manfred Hanke).\n8. Documentation tweaks (Manfred Hanke).\n9. src/slmath.c: Added sincos intrinsic (Manfred Hanke)\n10. doc/tm/rtl/array.tm: Changed an example used in the array_map\n    documentation.\n11. More documentation updates/corrections (Agathoklis D. Hatzimanikas).\n12. src/slarray.c: Tweaked the code that computes the\n    array-range-multiplier to avoid agressive optimization by the\n    compiler.\n13. modules/rand.sl: The rand_int function was not working correctly\n    (Thomas Dauser).\n14. modules/test/test_rand.sl: Added a simple statistical test for\n    rand_int (based upon an idea by Thomas Dauser).\n15. modules/test/test_rand.sl: Corrected a typo introduced by #14.\n16. src/slarray.c: #12 introduced a truncation error for some\n    values involving the range multiplier.\n17. autoconf/aclocal.m4: Change ncurses5w-config to ncursesw5-config\n    (Gilles Espinasse).\n18. modules/base64-module.c: Added decoder.\n19. slsh/lib/sldbcore.sl: Only run the debugger from the pid that\n    started it.  This avoids problems debugging scripts that call fork.\n20. src/slrline.c: SLrline_read_line will return NULL if getkey\n    returns SLANG_GETKEY_ERROR.\n21. doc/tm/rtl/*.tm: A few typos corrected (Manfred Hanke).\n22. slsh/lib/print.sl; print binary strings differently from regular\n    ones (Manfred Hanke).\n23. slsh/lib/print.sl: I introduced a typo in #21 (Pablo Cassatella).\n24. src/slutty.c: if the flow control parameter to the SLang_init_tty\n    argument is negative, the terminal's flow control handling will\n    not be changed.\n25. src/slrline.c: Ammend #20 to return NULL if errno != EINTR.\n26. src/sldisply.c: Changed Termcap_Initalized -> Termcap_Initialized\n27. src/slarray.c: avoid an expensive memcpy when doing\n    an aget via an index array on a (b)string.  (Paul Boekholt).\n28. slsh/scripts/badlinks: Updated to use array_map and cmdopt\n    (Agathoklis D. Hatzimanikas).\n29. Some minor documentation tweaks (Agathoklis D. Hatzimanikas)\n30. More doc tweaks (Agathoklis D. Hatzimanikas)\n31. src/slposio.c: lseek was not working properly.\n32. slsh/scripts/badlinks: Changed from GPLv3 to GPLv2 with permission\n    from Agathoklis Hatzimanikas.\n33. src/slscanf.c: Call strtod in a locale where the decimal point is\n    \".\".  This works around problems associated with modules that\n    change the locale.\n34. src/slscanf.c: include <xlocale.h> if available.\n35. src/slscanf.c: Avoid the use of setlocale and simply copy the\n    locale's decimal point before calling strtod (Paul Boekholt).\n36. modules/socket-module.c: NULL was being returned when accept was\n    called with a single argument (Fixes bug reported by Arik\n    Mitschang).\n37. src/slwclut.c: A logic error was causing strtrans to function\n    improperly for some UTF-8 encoded strings.\n38. src/fork-module.c: If WCONTINUED is not defined, define it to be 0\n    (from debian patch).\n39. src/slbstr.c: Added support for an optional offset parameter to\n    is_substrbytes.\n40. modules/csv.sl: Allow the \"names\" qualifier to be a list in\n    addition to an array.\n41. *.c/*.h: provide a path for a future change in the\n    return value of the malloc/free functions.  Now they process char*\n    pointers but this will be changed to void* in the future.\n42. modules/: Merged stats and histogram modules into the distribution.\n43. modules/stats-module.c: removed a couple of unused variables.\n    Also modules/test/test_*.sl updated to use modules in the $(ARCH)objs\n    subdir.\n44. src/slang.c: Local_Variable_Stack is now dynamically allocated,\n    and the value of SLANG_MAX_LOCAL_STACK made to scale with\n    SLANG_MAX_RECURSIVE_DEPTH.\n45. modules/cmaps/: Added 3 perceptually balanced color maps derived\n    from matlab code by Matteo Niccoli under the BSD license.\n46. src/slmath.c: Use _pSLang_peek_at_stack2 instead of the combination\n    SLang_peek_at_stack and SLang_peek_at_stack1.  This change\n    provides a bit more performnce.\n47. slsh/lib/fswalk.sl: Functions here facilitate walking the\n    filesystem.\n48. Some doc updates.\n49. slsh/: Using help at the prompt will invoke the pager if the\n    number of lines is longer than the screen size.  This required add\n    an slsh-specific intrinsic that returns the number of rows.\n50. modules/stats.sl: Avoid integer overflow when computing Spearman's\n    rank correlation (Victoria Grinberg).\n51. modules/csv.sl; Added support for RDB tab-delimited files via the\n    \";rdb\" qualifier.\n52. modules/stats-module.c: The stddev function was computing an\n    incorrectly normalized value when passed the optional dims argument.\n53. src/slang.h: The following qualifier functions were added to the\n    public API:\n\n       SLang_qualifier_exists;\n       SLang_get_int_qualifier;\n       SLang_get_long_qualifier;\n       SLang_get_double_qualifier;\n       SLang_get_string_qualifier;\n\n    These functions may be used to create intrinsic functions that use\n    qualifiers.\n54. The previous change necessitated a minor change in the qualifier\n    semantics such that qualifiers that are created with no value\n    assigned are implicitly given a value of 1.  That is, foo(arg;q)\n    and foo(arg;q=1) are now equivalent forms.  Previously, foo(arg;q)\n    and foo(and;q=NULL) were equivalent.  Experience has shown that\n    the new semantics result in simpler code.  This change should not\n    break any existing interpreter scripts.\n55. Backed out change #54 because it did break some scripts.\n56. src/util/mkslarith2.sl: Used \"signed char\" instead of \"char\" to\n    avoid problems with systems that assume unsigned characters.\n    (RongQing Li).\n57. modules/socket-module.c: Added support for socket credentials\n    (Arik Mitschang).\n58. src/signal.c: Added support for interval timers via the\n    get/setitimer functions.\n59. src/test/signal.sl: Missing #endif (Paul Boekholt)\n60. autoconf/slang.pc: Allow prefix and exec_prefix to be different\n    (Diab Jerius).\n61. src/sltoken.c: Use an unsigned cast when calling putc to\n    work-around what looks like a VMS C library bug bug.\n62. src/slarrfun.c: Added wherefirstmin/max and wherelastmin/max\n    functions.\n63. src/slarrfun.inc: Removed an unused variable from the\n    wherefirst/last/min/max functions.\n64. src/slcommon.c: find_interrupt_hook was not setting the prevp\n    variable causing some hooks to become lost during calls to\n    SLang_remove_interrupt_hook.\n65. src/slrline.c,slsh/readline.c: Added support for SLrline\n    callbacks.  See the slsh docs for details.\n66. src/slarray.c: Added wherediff intrinsic.  This returns an array\n    of indices where adjacent elements of an array differ.\n67. modules/stats-module.c: Rewrote the log_gamma_star function to\n    avoid double precision overflows when computing the poisson_cdf\n    function for large values.  Also, the poisson_cdf function now\n    uses the Wilson and Hilferty normal approximation for values of\n    lambda greater than 1000.\n68. src/slrline.c: Use the SLang_set_error function instead of\n    manipulating the _pSLang_Error variable.  Also, changed the readline\n    \"kbd_quit\" function to throw a UserBreakError.\n69. src/mkfiles/mkmake.exe: Compiled as a win32 executable.  The old\n    16bit DOS version was renamed to mkmake16.exe.\n70. slsh/readline.c: Change #65 broke the slsh --no-readline option.\n71. mkfiles/: Added the /y option to the DOS copy command to avoid\n    being prompted to overwriting files when installing on a windows\n    system.\n72. win32-specific changes: Additional makefile tweaks.  Also, permit\n    \"./foo\" to represent a \"relatively-absolute\" filename on\n    DOS/Windows.\n73. modules/stats.sl: Added the correlation function.\n74. src/slarray.c: _isnull was not handling Null_Type arrays.\n75. src/slparse.c: If the _for statement contains two control\n    variables instead of 3, assume the third is 1.\n76. modules/fork-module.c: The execve_intrin was not functioning\n    properly (Agathoklis D. Hatzimanikas).\n77. slsh/readline.c: Check to see if an update_hook has been set\n    before adding callbacks to it.\n78. modules/csv.sl: Add support for empty field names.\n79. slsh/lib/slshrl.sl: Added \"who\" interactive command that shows the\n    names and values of all variables/functions defined at the prompt:\n\n      slsh> x = 1; y = \"foo\";\n      slsh> who;\n      Integer_Type x=1\n      String_Type y=\"foo\"\n\n80. slsh/lib/print.sl: If the string form of the object ends in a\n    newline, do not write another.\n81. modules/stats.sl: The usage message for Welch's t-test referred to\n    Student's form.\n82. slsh/lib/sldbcore.sl: When entering the debugger_input_loop,\n    initialize the SIGINT handler.\n83. slsh/lib/arrayfuns.sl: New function: rearrange, which may be used\n    to perform an in-place rearrangement of an array or list.\n84. slsh/lib/listfuns.sl: New file that includes various functions\n    dealing with lists and list-based data structures.  Currently this\n    includes list_sort and a heap object.\n85. slsh/lib/listfuns.sl: heap_peek was improperly declared.\n86. Numerous changes from int -> SLindex_Type.  Note that SLindex_Type\n    is currently typedefed to be an int.  For version 3, SLindex_Type\n    will become a long.  This change lays some of that groundwork.\n    Similarly, I added SLFUTURE_CONST here and there.  Neither of\n    these changes break binary compatibility nor affect the API.\n87. src/slarrfun.c: The prod function for complex numbers had a sign\n    error.\n88. modules/csv.sl: Modify fixup_header_names to work with scalars.\n89. modules/json-module.c: New module provided by Manfred Hanke.  To\n    support this module several other changes were made including some\n    additions to the API.\n90. Initial support for 64-bit windows: Use ptrdiff_t instead of long\n    when subtracting pointers.  Also json-module added to windows\n    makefiles.\n91. modules/rand.sl: rand_int was not properly handing intervals\n    larger than INT_MAX.\n92. src/slbstr.c: Added bstrjoin and bstrcat intrinsics.\n93. modules/json-module: Modified to use bstrcat.  The\n    json_generate/json_parse functions were renamed to\n    json_encode/json_decode.\n94. configure: added support for parsing /etc/ld.so.conf\n95. modules/json.sl: Use bstrcat throughout json_encode; additional\n    renames: generate->encode, parse->decode. (Manfred Hanke).\n96. src/sllist.c: To decrease memory usages by lists, a size hint may\n    be specified upon list creation.\n97. Allow struct field names to be an arbitrary string.  When\n    referencing such a field, quotes must be used:\n\n         X = struct {\"some-field\", some_other_field };\n\t X.some_other_field = 3;\n\t X.\"some-field\" = 4;\n\n   New struct-related functions were added to the C API:\n\n     SLang_create_struct\n     SLang_push_struct_field\n     SLang_pop_struct_field\n     SLang_pop_struct_fields\n\n98. Changed the json module to use structs instead of associative\n    arrays.  (Paul Boekholt).\n99. src/slassoc.c: Add C API SLang_assoc_key_exists (Paul Boekholt).\n100. src/slang.c: Add SLstack_exch and tweak the json module to use it.\n101. src/slang.h: Made the SLcompute_string_hash function public and\n     rewrote the hash table function in the json module to use it.\n102. json-module: Doc updates, use compact encoding by default\n     (Manfred Hanke).\n103. src/slstd.c: Added get_environ intrinsic, which returns an array of\n     the currently defined environment variables.\n104. src/slang.c: Fixed a small memory leak introduced by the byte-code\n     optimizer when dealing with floating point literals.\n105. src/slang.c: The changes added in #104 were a bit too aggressive.\n     I added code so that only literals get freed.\n106. src/slstd.c: OSX has no proper environ, need to use a function\n     call. (Dima Pasechnik).\n107. src/sldisply.c: Added support for an italic attribute if the\n     terminal supports it.  This can be enabled using a color name\n     with a qualifier, e.g.,\n\n         SLtt_set_color (\"menu\", \"white;italics\", \"blue\");\n\n     This mechanism has also been extended to other attributes:\n\n        SLtt_set_color (\"comment\", \"black;underline;italics\", \"cyan\");\n\n     (Based upon a patch provided by Egmont Koblinger).\n\n108. *.tm: Documentation updates and corrections. (Agathoklis D.\n     Hatzimanikas)\n109. modules/csv-module.c: The store_value function was not updating\n     the num_allocated variable when resizing the value array.  This\n     caused it to fail when reading a CSV table with more than 256\n     data columns.\n110. modules/csv.sl: Since S-Lang structure field names may be\n     arbitrary strings, there is no need to massage the csv column\n     names. (See change 97).\n111. modules/iconv-module.c: If the iconv descriptor has been closed,\n     then do not close it again in the iconv object destructor\n112. src/slproc.c: Added getrusage function to get process resource\n     usage.\n113. modules/png-module.c: Only the first 1/4 pixels of an RGB+alpha\n     image were getting byte-swapped. (RGB images were ok).\n114. configure,*/Makefile.in: rearranged the compiler command so that\n     include flags occur before CFLAGS.  This is a protective measure\n     designed to avoid issues when the CFLAGS variable also contains an\n     include path.\n115. slsh/lib/process.sl: Added support to the pre_exec_hook callback\n     function for an optional argument.\n116. Change 107 introduced a cut/paste error that prevented the\n     background color on Windows systems from being properly parsed.\n     (Reported by Frank and Manfred from jed-users).\n117. src/sldisply.c: SLSMG_COLOR_BRIGHT_MAGENTA and\n     SLSMG_COLOR_BRIGHT_CYAN were swapped (patch provided by Thorben\n     from slang-users list).\n118. Updated copyright year for upcoming release.\n119. src/slposdir.c: Added lchown intrinsic.\n120. src/slang.h, src/slpath.c: Added API function SLpath_getcwd\n121. src/slsh.c: Use SLpath_getcwd instead of \".\" for CWD.\n122. src/slpath.c: Added support for \\\\netdrive\\paths for Windows, and\n     modified SLpath_dirname (path_dirname intrinsic) to perform some\n     expansion of .. and . in path names (e.g.,\n     path_dirname(\"/foo/../bar\") will produce \"/\" instead of\n     \"/foo/..\").\n\n     The old bahavior was consident with that of the Unix\n     dirname command:\n        $ dirname `dirname /usr/bin/./slsh`\n\t/usr/bin\n\n     The new behavior produces an arguably more accurate result:\n        slsh> path_dirname(path_dirname(\"/usr/bin/./slsh\"));\n\t/usr\n\n123. slsh/scripts/badlinks updated to use the fswalk functions\n     (Agathoklis D. Hatzimanikas).\n124. Various documentation updates/corrections (Agathoklis D.\n     Hatzimanikas).\n125. slsh/slsh.c: bumped copyright year.\n126. src/slconfig.h: For non-Unix, HAVE_LSTAT and HAVE_LCHOWN were\n     defined to be 0 instead of undef'd.  Also, removed an unused\n     function from slposdir.c and a shadowed variable from slpath.c\n127. documentation updates (Manfred Hanke)\n128. modules/test/: Additional json-modules tests (Manfred Hanke)\n129. src/slarray.c: Allow functions called by array_map to return\n     NULL. (Manfred Hanke)\n130. src/slang.c: Fixed a bug in the short-circuiting of non-boolean\n     expressions.\n131. Updated the NEWS file for release.\n132. documentation updates\n133. autoconf/: Updated configure scripts\n134. src/mkfiles/mkmake.c: Add definitions for SLmalloc/free so that\n     mkmake can be built without the full slang library.\n\nChanges since 2.2.3\n1. src/slpack.c: Typo affecting 64 bit integers ('q' & 'Q') (Paul\n   Boekholt).\n2. src/Makefile.in: Make libslang.so a symlink to libslang.so.2\n   instead of libslang.so.2.2.4 (Miroslav Lichvar)\n3. modules/Makefile.in: Cygwin needs ELFDIR defined (Marco Atzeri).\n4. src/slutty.c: Added additional baud rate values (Sergey Vlasov)\n5. autoconf/configure.ac: Check for socket and socketpair in -lsocket\n   if it is not in libc.\n6. *.tm, src/slstrops.c, src/slbstr.c: Changed occurances to\n   occurrences (Marcel Telka).\n7. src/slparse.c: Increment the _boseos_info value for qualifier\n   expressions.\n8. src/sltoken.c,slparse.c: The semantics of the _boseos_info variable\n   changed such that bos/eos callbacks are not generated for\n   preprocessor #ifeval statements unless bit 0x100 is set.\n9. slsh/scripts/slstkchk: a new script used for running the\n   stack-check debugger.\n10. documentation updates/tweaks (Manfred Hanke).\n11. slsh/lib/rline/histsrch.sl: When building history search\n    completions, use most recent history first.\n12. src/slarray.c: Detect integer overflows for multi-dimensional\n    arrays.\n13. Updated year from 2010 to 2011\n14. src/slcommon.c: Added _slcalloc, _slrecalloc memory allocation\n    functions that check for unsigned integer wrapping.  A number of\n    vulnerable calls to SLmalloc were modified to use these functions.\n    (Fixes an issue reported by Pablo Cassatella).\n15. src/slarray.c: Detect attempts to create a 0 dimensional array.\n16. modules/csv.sl: Float and double NaNs were reversed.  When\n    normalizing columns names, _ characters were not being properly\n    treated.\n17. doc/tm/rtl/time.tm: Added documentation for timegm (Manfred Hanke).\n18. doc/tm/crtl/slsmg.tm: Corrected prototype for SLsmg_read_raw (Manfred Hanke).\n19. Tweaked doc macros and rebuilt docs.\n20. src/slarray.c: Added a check for too small of a range array\n    increment.\n\nChanges since 2.2.2\n1. src/sltermin.c: Added support for native terminfo binary layouts.\n   Some systems have binary terminfo files that are incompatible with\n   the standard ncurses layout.  Use the --terminfo=layout configure\n   option to specify a non-standard layout (hpux11, osf1r5, uwin,\n   aix4, default).  This incompatibity was pointed out by River Tarnell.\n2. src/slparse.c: complicated lvalue expressions were not being properly\n   parsed.\n3. src/slstrops.c: Added strskipbytes function.\n4. doc/tm/rtl/*.tm: A number of typos were corrected.  (Agathoklis D.\n   Hatzimanikas)\n5. src/slang.c,slparse.c: Qualifiers were not being passed to functions called\n   via derefencing an array of function references, e.g.,\n   (@f[n])(args;q).\n6. src/slparse.c: Flag attempts to call literals as functions.\n7. slsh/lib/process.sl: Added a \"dir\" qualifier to the new_process\n   function.  This allows the subprocess to be started in a specified\n   directory.\n8. src/slrline.c: Added rline_get_last_key_function, which returns the\n   last slang readline key function.\n9. */Makefile.in: Commmened out \"DESTDIR=\" lines (Marcel Telka).\n10. slsh/lib/rline.sl: Added rline_edit_history (allows the history to\n    be edited in an external editor) and rline_up/down_hist functions.\n11. src/slparse.c: An incorrect check (< instead of <=) was causing -0\n    to generate an error.\n12. .../tm/*:  Corrected some documentation typos and spelling errors\n    (Agathoklis D. Hatzimanikas).\n13. doc/tm/rtl/misc.tm: Documented the __tmp function and corrected a\n    few more documentation typos (Agathoklis D. Hatzimanikas).\n14. src/slerrno.c: ELOOP was defined twice (Agathoklis D. Hatzimanikas).\n15. doc/tm/slang.tm: Fixed a few doc errors noticed by Manfred Hanke.\n16. src/slsh/scripts/mv: removed redundant call to rename, and added\n    force, noclobber, and verbose options (Agathoklis D. Hatzimanikas).\n17. src/slsh/scripts/*: changed \"static\" to \"private\".\n18. src/sldisply.c: Underlined space characters were not appearing\n    with the underline.\n19. src/sldisply.c: Do not rely upon terminals that can\n    background-color-erase (BCE) to erase using the monochrome attributes (e.g.,\n    underline).\n20. src/slarith.c: Tweaked the %S format to better round decimals with\n    repeated 9s or 0s.\n21. autoconf/mkinsdir.sh: Updated to a newer version of\n    mkinstalldirs.\n22. src/slagetput.c: Change 2.2.2-10 fixed a problem with aget.  The\n    same change needed to be made to aput to avoid an access violation.\n23. modules/pcre-module.c: Added support for binary strings (Paul\n    Boekholt).\n24. src/slposdir.c: Added utime function.\n25. slsh/scripts/mv: Added a missing call to stat_file (Agathoklis\n    Hatzimanikas).\n26. src/sldisply.c: Moved the keypad init/deinit code to separate\n    functions for more fine-grained control.\n27. slsh/rline/editor.sl: Added rline_call_editor and rline_edit_line functions\n28. src/slbstr.c: Added is_substrbytes function.\n29. doc/tm/rtl/strops.tm: The strncmp example used strcmp function\n    (Brian Murray).\n30. src/sltermin.c: Changed the search order for terminfo files to:\n     $TERMINFO, $HOME/.terminfo, /usr/local/{etc,share,lib}/terminfo,\n     /etc/terminfo, ...\n31. src/slparse.c: Change #6 triggered an invalid parse error for\n    statements involving foreach-using such as:\n\n       foreach x (y) using (\"bar\") (@foo)();\n\n32. src/slstrops.c: Added an alternative interface to strreplace that\n    facilitates the most common case where one wants to replace all\n    substrings.  The function now supports\n\n        new = strreplace (a, b, c);\n\n    in addition to the older usage:\n\n        (new,m) = strreplace (a, b, c, n);\n\n33. src/sltoken.c,...: Added support for binary integer literals of\n    the form 0b010101.  Integers may be formatted as unsigned binary using the\n    %B format specifier, e.g.,\n\n        sprintf (\"%B\", 5)      ==> \"101\"\n\tsprintf (\"%#B\", 5)     ==> \"0b101\"\n\tsprintf (\"%#8B\", 5)    ==> \"   0b101\"\n\tsprintf (\"%#.8B\", 5)   ==> \"0b00000101\"\n\tsprintf (\"%#12.8B\", 5) ==> \"  0b00000101\"\n\n34. src/slarith.c: ullong_to_binary was not getting defined on systems\n    where sizeof(long)==sizeof(long long).  (Mark Olesen).\n35. src/slsh.c: The stat_mode_to_string function was using 'f' unstead\n    of 'p' for FIFOs.  (Agathoklis Hatzimanikas).\n36. src/slarray.c: Switched to using mergesort instead of qsort and\n    added support for sorting non-array types.  For details, see the\n    updated documentation for array_sort.\n37. src/slarray.c: Reduced the memory requirments for the mergesort\n    function, which produced a 5% speed improvement.\n38. src/slarray.c: Added support for qsort to array_sort.  See the\n    updated documentation for details.\n39. src/slparse.c: Added a syntax enhancement to structs and\n    qualifiers to allow the fields of structure-valued expressions to\n    be used to define the structure.  For example:\n\n       space = struct {x, y, z};\n       spacetime = struct {@space, t};\n\n    Here spacetime is a structure containing 4 fields: (x,y,z,t).  In\n    this context, @ is not a dereference operator.  Rather it is used\n    to tell the parser that the following expression is a structure\n    valued.\n40. src/slcommon.c: SLmalloc inherited malloc's undefined behavior\n    when 0 bytes were requested.  The change will cause SLmalloc to\n    allocate at least 1 byte if the OS version of malloc returns NULL\n    for 0 byte sizes.\n41. src/slclass.c: The default dereference method for all scalar and\n    vector classes was changed from undefined to duplicate.  That is,\n    @7 will produce 7 instead of triggering a method-undefined\n    exception.\n42. src/slwclut.c: Added \\x\\c\\p\\,\\g character classes to strtrans (See\n    strtrans doc).\n43. src/*.c: Made numerous int->SLindex changes to match function\n    prototypes.  Note that SLindex_Type is currently typedef'd to be\n    an int, but if that ever changes, these changes will be necessary.\n    I also added SLang_push_array_index to the public API.  Also\n    updated copyright year since a number of files changed.\n44. src/slarrfun.c: change 43 would not compile on 64 bit systems.\n45. src/slnspace.c: the apropos function was not returning float,\n    short, long, and long long constants.\n46. src/slarith.c: If LLONG_MAX is not defined, and sizeof(long long)\n    is 64 bits, then use the standard value.\n47. src/slang.c: long long constants were not working.\n48. slsh/lib/process.sl: modes[i] was being set after i was bumped.\n    This caused modes[0] to be NULL.\n49. slsh/lib/slshrl.sl: If the first word is callable, and is followed\n    by a ',', then add parenthesis, i.e., \"print,7\" ==> \"print(7);\".\n    Note: this is a commandline convenience feature and has nothing to\n    do with the slang syntax.\n50. slsh/lib/rline/complete.sl: Attempt to complete structure field\n    names.\n51. src/slrline.c,slsmg.c,sldisply.c: Added support for multiline\n    readline.\n52. configure,src/*.hin: Added autoconf support for size_t.\n53. src/slang.h,...: Added 'typedef unsigned in SLstrlen_Type' to\n    create migration path for size_t in place of unsigned int.\n54. src/slstrops.c: New intrinsics:\n\n      islower, isupper, isxdigit, isalnum, isalpha, iscntrl, isprint,\n      isgraph, ispunct, isblank, isspace, strskipchar, strbskipchar\n\n    The latter two functions play a role in the context of the\n    variable length UTF-8 encoding\n    encoding analogous to that of ch=*s++ and ch=*s-- in a fixed\n    encoding.\n55. slsh/lib/rline/editfuns.sl: Used functios in change #54 to implement\n    bskip_word and skip_word readline functions.\n56. src/slstrops.c: Added isascii, and updated docs.\n57. src/sldisply.c: _pSLtt_cmdline_mode_reset will also clear to the\n    end of the screen.\n58. mingw32 compilation problems: typo in src/slconfig.h;\n    src/slarrfun.c: missing '#ifdef HAVE_LONG_LONG'.\n59. src/slsmg.c: Change #51 introduced a bug that manifests itself\n    when expanding a tab at the right edge of the display.\n60. src/slarrfunc.c: If contracting an empty array over all dimensions\n    to produce a scalar, clear the transfer buffer.\n61. src/slarrfun.c: If a scalar is passed to array_reverse, then do\n    nothing.\n62. src/slarith.c: LONG_MIN/MAX values were placed in an integer\n    contant table instead of a long integer table.\n    SLadd_lconstant_table added to the interface.\n63. src/slsmg.c: Change 51 introduced a bug in SLsmg_write_chars when\n    SLsmg_Newline_Behavior != SLSMG_NEWLINE_IGNORED.\n64. autoconf/config.sub+config.guess updated.\n65. src/slstrops.c: If a delimiter is not passed to strjoin, assume\n    the empty string.\n66. modules/test/test_rand.sl: Some integer constants changed to\n    unsigned values.\n67. src/slstruct.c: tweak code to remove a false uninitialized\n    variable warning.\n68. src/slarray.c: fix NULL pointer deref from invalid binary\n    operation Array_Type[N]+[1:N].\n69. src/slang.c: '>' instead of '<' should have been used in in the\n    try/catch code when decrementing the frame pointer.\n70. src/slparse.c: Method qualifiers were getting lost when called\n    from the constructor, e.g., new_object(arg1;qual1).method(arg;qual2)\n71. src/sltoken.c: preprocessor statements #if, #ifeval, and #ifexists\n    will use the (non-anonymous) namespace of the file containing the\n    statements.\n72. src/slang.c: _pSLlocate_name return NULL instead of an exception\n    if the name contains a non-existent namespace.\n73. Removed excess whitespace from all files (*.c, *.h, *.tm, *.sl, ...).\n74. src/slang.c: define MAX_USER_BLOCKS to be 5, and use it instead of `5'.\n75. src/slsignal.c: Use (char*)NULL instead of NULL in call to execl\n    to avoid a compiler warning on OpenBSD.\n76. src/slproc.c: define _XOPEN_SOURCE_EXTENDED to be 1 instead of\n    just defining it.  This pulls in some prototypes on OpenBSD.\n77. src/slmath.c: The hypot intrinsic was modified to work with N\n    arrays instead of just 2.  (Manfred Hanke)\n78. src/slarith.inc: Use doubles for intermediate calculations when\n    double is the expected result.  This avoids some integer overflows \n    (Matthias K\u00fchnel, Michael Wille, Manfred Hanke).\n79. src/slparse.c,slang.c: Added FOREACH_EARGS byte-code that will\n    implicitly call the __eargs function.  This avoids a problem with\n    the standard FOREACH bytecode if a hook gets called after __eargs\n    but before the FOREACH byte-code executes.\n80. src/slstrops.c: The pos argument to the string_match and\n    string_matches function was made optional (defaults to 1).\n81. src/slstring.c: Use _pSLuint32_Type instead of unsigned long for\n    hashes since the hash algorithm was designed for 32 bits.\n82. src/slstd.c: Save the pointer passed to putenv to a global array\n    so that leak checkers can find it.  The reason for this is that\n    some libc implementations copy the pointer but others do not.\n83. src/slang.c: An off-by-one error was causing a stackunderflow\n    error when handling a exception list in a try-catch statement.\n84. slsh/lib/arrayfuns.sl: Add support for empty arrays to the shift\n    function (Manfred Hanke).\n85. */examples/*.sl: Various updates and corrections (Manfred Hanke).\n86. src/sllist.c: A extra call to SLang_free_mmt was causing a list to\n    be freed when set via an index array.\n87. src/slstrops.c: Vectorized strlow/strup intrinsics.\n88. src/slmath.c: Add support for more than 2 arguments to the\n    _min/_max functions (Manfred Hanke).\n89. src/sllist.c: Added list_join, list_concat intrinsics (Mike Noble).\n90. slsh/lib/setfuns.sl: adds unique, intersection, complement, union\n91. modules/csv.sl: Added a module to support the reading and writing\n    of comma separated values (csv) formatted files.\n92. Some documentation corrections (Manfred Hanke).\n93. src/slmath.c: In the hypot function, use the convenience function\n    do_binary_function_on_nargs instead of an explicit loop. (Manfred\n    Hanke).\n94. modules/tm/slsmg.tm: Manfred Hanke has started documenting the\n    slsmg module.  He also provided a new example (slsmgex2.sl).\n95. src/slnspace.c,slang.c: Free up some memory associated with\n    namespaces upon exit.\n96. src/slposio.c: added ttyname intrinsic\n97. autoconf/slang.pc: Use @libdir@ instead of assuming $prefix/lib.\n98. modules/csv.sl: The read_cols method allows the type qualifier to\n    be a string of type specifiers, e.g., types=\"liff\".  This is\n    equivalent to types=['l', 'i', 'f', 'f'].\n99. src/sltime.c: Added timegm, which is the inverse of gmtime.  I\n    also made changes to the time functions so that time_t is not\n    assumed to be a long.  This means that _time may produce a\n    longlong integer on some platforms.\n100. modules/cmaps/coolwarm.map: A color map by Kenneth Moreland.\n101. modules/png-module.c: Use png_set_expand_gray_1_2_4_to_8 instead\n     of png_set_gray_1_2_4_to_8 if available (patch forwarded from Marco\n     Atzeri).\n102. src/slcommon.c: Code using __libc_enable_secure was removed\n     (patch forwarded from Marco Atzeri)\n103. src/sldisply.c: Added some termcap compatibility functions that\n     were ifdefed out in v2.2.2 but were made available by some linux\n     distributions for code to use: SLtt_tgetent, SLtt_tgoto,\n     SLtt_tputs (patch forwarded by Marco Atzeri).\n104. autoconf/aclocal.m4,configure.ac: Various updates by Marco Atzeri\n     including a cygwin specific change.\n105. autoconf/aclocal.m4: Missing hyphen for ELFLIB_MAJOR on cygin\n     (Marco Atzeri).\n106. slsh/lib/doc/tm/setfuns.tm: Add newlines to the note1 macro\n     (Manfred Hanke).\n107. src/slang.c: change #5 caused a problem evaluating the bytecode\n     produced by preparsed files (.slc) produced by slang v2.2.2.\n108. modules/tm/csvfuns.tm: Documentation updates\n109. src/sldisply.c: slsh would exit if the underlying terminal was\n     unknown because _pSLtt_init_cmdline_mode was returning a fatal\n     error.\n110. configure, *Makefile.in,etc: Made changes so that ARCH\n     environment variable influences where the .o files are placed.\n     The INSTALL.unx file documented this feature but the slsh and\n     modules Makefiles did not implement this.\n111. */mkfiles/makefile.all: Added WFLAGS to mingw sections to allow\n     the warning flags to be specified independently of the CFLAGS.\n112. src/slang.c,_slang.h: Changed `#if HAVE_LONG_LONG' to `#ifdef\n     HAVE_LONG_LONG' in a few places.\n113. src/slstrops.c: A number of string functions have been vectorized\n     to work on arrays of strings.  These include:\n\n        is_substr str_delete_chars strbytelen strcharlen strcmp\n\tstrcompress strlen strlow strnbytecmp strncharcmp strncmp\n\tstrtrans strtrim strtrim_beg strtrim_end strup\n\n114. modules/Makefile.in: Change #110 introduced a bug\n     that caused the modules to always be need rebuilding.\n115. src/sltoken.c: Change #if HAVE_LONG_LONG to #ifdef HAVE_LONG_LONG.\n116. src/slmath.c: Tweaked the Kahan sum for the hypot function.\n117. slsh/readline.c: Added __rline_init/reset_tty functions and used\n     them in the rline editor routines to reset the terminal before\n     calling an external editor.  This avoids problems when the editor\n     is subsequently suspended.\n118. modules/csv.sl: Typo causing a bug involving the mapping of string valued\n     column-specifiers to column numbers by csv.readcol. (Paul Boekholt)\n119. doc/tm/rtl/strops.tm: Typo in sprintf documentation (Andreas\n     Irrgang).\n120. src/sltime.c,slposio.c: Avoid certain posix *_r functions if\n     _POSIX_C_SOURCE is too old.\n\nChanges since 2.2.1\n1. src/slsmg.c: Call SLutf8_enable if UTF8 mode has not been setup.\n2. src/slutty.c:  Allow the hook that gets called when the read\n   function gets interrupted to change the read file descriptor.\n   Before, if this happened, the SLang_getkey function would return\n   SLANG_GETKEY_ERROR.\n3. lib/slsh/print.sl: Turn off buffering of the pager pipe.\n4. modules/tm/*.tm: A couple of typos corrected (John Houck)\n5. src/slmath.c: The round function was not correctly rounding values\n   between 0.5 and 1.0.\n6. src/slstdio.c,slclass.c: If a call to fwrite produces errno=EPIPE,\n   then do not bother trying the write again.\n7. modules/fork-module.c:  Use WIFCONTINUED only if it is defined.\n8. slsh/Makefile.in: Change the order of the libraries such that the\n   newly built ones will be found first.  (Markus Hennecke)\n9. src/slagetput.inc: Avoid possible access violation when using a\n   range array as an index.\n10. doc/tm/rtl/lists.tm: Documented the optional argument to the\n    list_to_array function (Manfred Hanke).\n\nChanges since 2.2.0\n1. modules/socket-module.c: glibc-2.8 removed the h_addr macro.\n2. src/slclass.c: Call clearerr before performing the\n   stdio_fread/fwrite functions.\n3. src/slstdio.c: typeof in the fputs intrinsic fixed (n instead of dn\n   was compared to 0).\n4. src/slscanf.c: sscanf will treat NaN and Inf in a case-insensitive\n   manner.  Also, the NaN([a-zA-Z0-9]*) form is also supported.\n5. src/slang.h: SLclass_set_aelem_init_function was missing from the\n   API.\n6. src/slmath.c: The expm1 and log1p functions were returning NaN when\n   given Inf arguments.\n7. src/slmath,c: log1p(-1) produced nan instead of -inf.\n8. configure: Added pkg-config support (based upon a debian patch sent\n   to me by Luca Bigliardi).\n9. doc/tm/rtl/math.tm: Updated the help for set_float_format and added\n   documentation for the get_float_format function.\n10. autoconf/slangpc.in: Added URL and Libs.private entries to the\n    slang.pc pkg-config file.\n11. src/slang.h: prototype for SLang_create_array1 missing from slang.h.\n12. src/slcurses.c: Added debian patch that adds support for\n    additional graphics characters (DIAMOND, DEGREE, etc...).\n13. doc/tm/slang.tm: Added a small section about arrays of arrays.\n14. src/slang.c: __builtin_expect is used for the stack functions if\n    compiled with gcc.\n15. src/*.c: A few public variables were not explicitly initialized\n    to 0.  Apparantly not doing so causes them not be be exported from\n    the windows DLL.\n\nChanges since 2.1.4\n1. modules/termios-module.c: Added the VMIN constant (Laurent Perez).\n2. src/slbstr.c: Added foreach method to BString_Type objects.\n3. module/zlib-module.c: New module that wraps libz\n   (compression/decompression library).\n4. doc/tm/rtl/: Some documentation updates\n5. configure: Added messages about what extra modules will and will\n   not be built.\n6. modules/mkfiles/makefile.all: Added zlib module to the makefile.\n7. autoconf/configure.ac: Fixed the spelling oniguruma (Peter J. Ross)\n8. src/slang.c,slparse.c,sltoken.c: Added 'break n' and 'continue n'\n   statements.\n9. src/slang.c: break-n and continue-n were not being properly handled\n   when used outside a function.\n10. src/slparse.c, sltoken.c: Added the C-like ternary-expression\n    \"condition ? foo : bar\".\n11. src/sltoken.c: Added support for mult-line strings:\n\n        \"This is a \\\n\t multiline \\\n\t string\".\n\n         `This is another\n\t multiline\n\t string.`\n\n    Note that the backquoted does not require a backslash at the end\n    of lines.\n12. src/sltoken.c: When reading subsequent lines of a multiline\n    string, increment the readline parse_level.\n13. src/sltoken.c: When performing backslash expansion, if a solitary\n    backslash occurs at the end of a line, or is preceeded by a\n    newline at the end of a line, then ignore it.\n14. src/slexcept.c: The use of an ERROR_BLOCK was causing the pointer\n    holding the name of the function with the error to be freed twice.\n15. slsh/lib/rline/*keys.sl: Bind \"\\n\" to the readline \"enter\" function.\n16. src/sltoken.c: Improved and simplified the way operators are\n    mapped to tokens.\n17. slsh/lib/sldbcore.sl: sldb was printing all the elements of a\n    container object when using the \"p\" command.\n18. src/slarrfun.c: Added a \"sumsq\" function, which sums over the\n    squares of the elements of an array.\n19. src/slsignal.c: Added SLsystem_intr, which unlike SLsystem does\n    not ignore SIGINT by the calling process.  This function is\n    available to the interpreter via system_intr.\n20. doc/tm/rtl/debug.tm: Documentation for the call stack frames added\n    (J\u00f6rg Sommer).\n21. src/slarrfun.c: array_reverse was producing an index-error when\n    passed an empty array.\n22. src/slcurses.c: SLcurses_initscr calls SLutf8_enable (Michal\n    Ratajsky).\n23. src/slang.c, slparse.c: \"then\" clauses were not being executed for\n    top-level looping statements (statements occuring outside function\n    definitions).\n24. src/slang.c: Change #23 was causing byte-compiled (.slc) files\n    from previous versions of jed to be misinterpreted.\n25. modules/zlib-module.c: The error message associated with\n    ZLIB_DATA_ERROR was incorrect (Paul Boekholt).\n26. src/slarray.c: Fixed a bug involving due to an overzealous __tmp\n    optimization involving binary operations between arrays of arrays.\n    Fortunately the bug manifests itself in a useless context.\n27. src/slstring.c: Improved performance of SLang_concat_slstrings\n    function. (Paul Boekholt)\n29. src/slang.c: When adding two strings together, make a direct call\n    to SLang_concat_slstrings avoiding some function call overhead.\n30. src/slmath.c: Added expm1 and log1p functions.\n31. src/slmath.c: If hypot is passed a single array X, then it will\n    compute sqrt(sumsq(X)), which is useful for computing the norm of\n    a vector represented by X.\n32. src/slarith.c: Changed the default floating point format to %S,\n    which means that the floating point number will be formatted in a\n    slang specific way to preserve the precision of the number such\n    that x == atof (string(x)).\n33. src/slarray.c: Passing an object to size_t to SLmalloc was\n    resulting in a SEGV on 64 bit systems.\n34. src/slbstring.c,slang.c: Small modifications to generalize the __tmp\n    optimization to binary-strings.\n35. src/slstrops.c: Changed strcpy to memcpy where permissible (Paul\n    Boekholt).\n36. src/slarray.c: __tmp optimization of binary optimization was not\n    obeying the READONLY flag.\n37. src/slang.c: __tmp optimization for struct.field OP= value.\n38. src/slarith.c: For floating point types, the %S format specified\n    will always print the decimal point or exponent.\n39. src/slmisc.c, sltoken.c: Added parser checks for overflows of\n    literal integer constants.\n40. src/slarith.c: Change #38 resulted in decimal points in inf and nan.\n41. src/slarithlc: By default, a floating point number x, where\n    |x|>=1e6 is printed in exponential form.\n42. src/slparse.c: Added looping context checks for break and continue\n    statements.\n43. src/slang.c: Small tweak to inner_interp to improve\n    branch-prediction (Paul Boekholt)\n44. src/slang.c: Optimized additional byte-code combinations.\n45. src/sldisply.c: On TERMCAP based systems, the \"ac\" capability was\n    being returned as the address of a local variable (Szalai Andras).\n46. src/slrline.c: The SLrline_redraw function was not properly\n    setting the last_nonblank_column variable.\n47. src/slstd.c: SLang_Doc_Dir was implicitly defined to be an int\n    when SLANG_DOC_DIR is defined.  (Jon Parise)\n48. src/mkfiles/makefile.all, src/slconfig.h: Visual Studio tweaks\n    (Jon Parise).\n49. modules/module.c: Added sockerpair to the module.\n50. src/slang.c: The string representation of a Ref_Type will show the\n    namespace prefix, e.g, \"&ns->foo\".  Also the __get_reference\n    function was modified to ignore a leading '&'.\n51. src/slposio.c: Added dup2_fd intrinsic (a wrapper around dup2).\n52. modules/fork-module.c: New module (fork, waitpid, exec*, ...)\n53. src/slagetput.inc:  a[i]=b was sometimes resulting in a buffer\n    overflow when i had elements outside the range of a.\n54. modules/select-module.c: A small memory leak was corrected.\n55. doc/*.tm: Some documentation updates.\n56. src/slposio.c: Allow a file descriptor to be fdopen'd multiple times.\n57. src/slstdio.c, src/slclass.c: Restart the fread/fwrite calls\n    calls when interrupted by a signal.\n58. src/slcommon.c: SLang_handle_interrupt will preserve errno.\n59. src/mkfiles/makefile.all: Updated for newer versions of Visual C\n    (Jon Parise).\n60. src/slang.c: set_array_lvalue was not preserving\n    SLang_Num_Function_Args.\n61. src/slang.c,sig.c: Continual bombarding the interpreter with\n    signals revealed a subtle race condition in the interpreter's\n    implementation of signals.\n62. src/sllist.c: Added list_to_array intrinsic function:\n       array = list_to_array (list [,type])\n63. .../makefile.all,slsh/slsh.c: Additional Visual C updates.  Also, io.h is\n    needed to compile slsh Visual C. (Jon Parise)\n64. src/slproc.c: added killpg intrinsic\n65. modules/sysconf.c: Wrappers around the sysconf, pathconf, and\n    confstr posix function.s\n66. modules/fork-module.c: Added the pipe intrinsic.\n67. src/slexcept.c: Added traceback info to the exception object.\n68. src/slposio.c: Added a _close intrinsic, which takes an integer\n    file descriptor instead of the corresponding slang object.  A\n    _fileno intrinsic was also added that returns the integer\n    descriptor.  A bug in the dup2 intrinsic added in change 51 was\n    fixed.\n69. src/slstruct.c: Added aget/aput methods for user-defined types.\n70. src/slang.c: handle_signals was made reentrant.\n71. modules/fcntl-module.c: Accept an int as a file descriptor.\n72. src/slposio.c: @FD_Type(int) may be used to convert an int into\n    the corresponding FD_Type object.\n73. modules/sysconf-module.c: Added #ifdefs for HAVE_SYSCONF, etc.\n74. modules/zlib-module.c: Added #ifdefs for the ZLIB constants\n75. src/slstdio.c: Rewrote fputs intrinsic in terms of fwrite to\n    better deal with EINTR.  Also, fopen, fclose and fflush are\n    restarted upon EINTR.\n76. src/slstring.c: Avoid a problem where the first n bytes of a\n    string hashes to the same location as the full string.\n77. src/slparse.c: Reworked the integer-overflow code.\n78. src/*.h: Updated Unicode tables to v5.1.\n79. src/slwclut.c: Added \\7 to indicate a 7 bit character class.\n80. slsh/lib/readascii.sl: The readascii function defaults to using\n    double precision instead of single.\n81. src/sllist.c: Change the chunk size and how it is allocated to be\n    more cache friendly.\n82. src/slstrops.c: Added string_matches, which combines the\n    operations of string_match and string_match_nth.\n83. modules/fork-module.c: Restart waitpid if EINTR received.\n84. slsh/lib/process.sl: A new process module for creation of child\n    processes, pipelines, etc.\n85. slsh/lib/process.sl: If no qualifiers were passed, list_to_array\n    was failing on an empty list.\n86. src/sllist.c: improved indexing performance.\n87. src/slproc.c: Added getsid\n88. modules/onig-module.c: Added BString_Type support to onig_search\n    (Paul Boekholt).\n89. src/slmath.c: The calling syntax of the polynom function was\n    simplified and extended to support arrays.  As such, this function\n    is not backwards compatible.\n90. src/slang.c: Added optimizations for the power operation a^b.\n91. src/slstruct.c; Added an struct-specific acopy function instead of\n    using the default.\n92. src/slarray.c: streamlined the case of getting a single array\n    element of non-scalar types.\n93. src/slang.c: Additional optimizations involving binary expressions.\n94. src/slparse.c: Avoid an explicit chs bytecode for negative\n    floating point literals.\n95. src/slang.c: optimization tweak for expressions involving\n    scalar assignments to an array element.\n96. src/slang.c: change #93 introduced a small leak.\n97. src/slang.c: optimization tweak involving pushing the value of a\n    structure field.\n98. src/slstdio.c: If fread/fwrite returns a short, non-zero item count,\n    clear the error and try again.\n99. src/slstdio.c: If fflush appears to succeed, check ferror and if\n    errno==EINTR, try it again.\n100. src/slproc.c: Added get/setpriority functions.\n101. src/slstdio.c: Added setvbuf\n102. src/slproc.c: Added the \"static\" to the get/setpriority wrappers.\n103. doc/tm/: Updated docs and reprocessed with an upgraded version of\n     linuxdoc.  Unfortunately, a table of contents for the text files\n     is nolonger generated by linuxdoc.\n104. src/slang.c: Added inline support for the bit-wise binary\n     operators.\n105. src/slang.c: Optimized pushing arbitrary single 1d array elements.\n106. src/slang.c: Optimization tweak for assigmnents to structure\n     fields.\n107. src/slang.c: Reordered some of the code in the inner_interp\n     switch statement and optimized some of the code that deals with\n     assignments to global variables.  The latter change improves the\n     performance of the profiler a bit.\n108. src/slang.c: If an intrinsic takes no arguments and returns\n     nothing, then call it directly from inner_interp.\n109. src/sltype.c: Added __datatype intrinsic, which is the opposite\n     of the __class_id function.\n110. src/slang.c: set_struct_obj_lvalue was not always incrementing a\n     reference count on non-struct objects with struct semantics.\n111. src/slarith.c: On a system where sizeof(long)==sizeof(long long),\n     omit the long-long specific functions.\n112. modules/pcre.sl: Added pcre_matches function that combines the\n     other pcre functions into a simple to use form.\n113. src/sltoken.c,slparse.c: Overflow check was failing on 64 bit\n     systems.\n114. src/sltoken.c: If the default read method encounters a too long line,\n     then issue an error instead of passing it back up for the parser\n     to handle.\n115. src/sltoken.c: preparsed files were being mishandled by #114.\n116. src/sllist.c: Added array indexing support to list objects.\n117. src/slarrfun.inc: Tweaked the implmentation of Kahan sums.\n118. src/slmath.c: An optional argument may be provided to the polynom\n     function to indicate that the kth term should be divided by k!.\n119. src/slmath.c: Added frexp and ldexp intrinsic functions.\n120. src/slmath.c: #119 introduced a typo that was preventing\n     compilation on systems that lack frexpf.\n121. src/slarray.c: When indexing a scalar as an array, allow the use\n     of multiple indices, e.g., x=2; y=x[0]; z=x[0,0]; w=x[0,0,0];\n122. slsh/lib/readascii.sl: When reading the first column as a string, comments\n     were not getting ignored.\n123. slsh/lib/rline/emacskeys.sl: The IBMPC_SYSTEM preprocessor macro\n     was used but not defined causing readline to fail on windows.\n124. Updated copyrights on files for upcoming release.\n125. doc/tm/slang.tm: Add documentation for the looping-then clause,\n     and various other documentation tweaks.\n126. src/slconfig.h: non-Unix systems: Remove defines for mode_t etc.\n     Define HAVE_POPEN for MINGW32.\n127. slsh/lib/print.sl: Do not attempt to call popen unless it\n     actually exists.\n\nChanges since 2.1.3\n1. src/slang.c: The identifier syntax was not being checked for\n   symbols added to the global namespace.\n2. slsh/slsh.c: If ENV_SLSH_PATH is undefined, set it to SLSH_PATH\n3. */mkfiles/*: Modified the various makefile.all files to facilitate\n   mingw32 builds.  Read INSTALL.pc for quick-start.\n4. mkfiles/install.sl: Added a function to install the slang docs\n5. src/slvideo.c: #define UNICODE so that wide-character functions are\n   used instead of byte functions.  Also codepage set to 65001 in\n   unicode mode.\n6. src/slvideo.c: Added SLtt_is_utf8_mode.\n7. src/sltermin.c:  Added support for new ncurses hex-encoded terminfo\n   directories.\n8. slsh/lib/tm/cmdopt.tm: Missing commas in the documentation for\n   cmdopt_add.  (Doug Burke).\n9. src/slarrmisc.inc: Changed inner-product code to use block arrays\n   to be more cache friendly.  Since the block size is cpu-dependent,\n   __get/set_innerprod_block_size functions have been added.  The\n   default value is controlled by a variable in src/sllimits.h.\n10. modules/termios-module.c: Added additional termios constants\n    (Laurent Perez).\n11. src/slarray.c: Better optimization when indexing arrays with\n    ranges.\n12. src/slsignal.c: If SLsystem fails, set the interpreter's errno\n    value accordingly.\n13. modules/rand-module.c: A uniform random number generator module,\n    which also provides generators for some well-known distributions.\n14. src/*.c: Changed field name for SLang_Object_Type.data_type to\n    o_data_type.\n15. src/slang.c: Optimization tweaks to improved performance for small\n    arrays and indexing via scalar indices.\n16. doc/tm/rtl/stack.tm: Typos in the example for __pop_list corrected\n    (Doug Burke).\n17. src/slang.c: Improved optimizations for scalar arithmetic\n    operations.\n18. src/slarray.c: slices such as A[*,[0:-1],*] of multi-dimensional\n    arrays were producing single dimension ones.\n19. src/sltoken.c: Changed the semantics of the\n    SLang_set_verbose_loading function.  Previously this function\n    accepted a zero or non-zero value to disable or enable loading\n    messages for .sl files.  Now this integer value is a bitmapped\n    one: If bit 0 is set, loading messages will be generated for .sl\n    files.  If bit 1 is set, messages will be generated for\n    dynamically loaded modules.\n20. slsh/slsh.c: Calling slsh with -v will generate loading messages\n    for both modules and slang files.  I also created a new\n    slsh-specific intrinsic called set_verbose_loading and bumped the\n    slsh version number.\n21. modules/cmaps: Added \"ds9b\" and \"ds9sls\" colormaps --- these correspond\n    to analogous colormaps in saotng ds9.\n22. utf8/tools/mktables: Characters with general category \"Mc\" or in\n    the bi-directional category are nolonger flagged as combining characters.\n23. utf8/tools/: Updated unicode database from 3.2 to 5.0 and\n    recreated the internal character set tables.\n24. src/slsmg.c: If an ambiguous-width unicode line drawing character\n    is double width, then use a single-width alternative (Sugiyama).\n25. src/slsignal.c: Call SLang_handle_interrupt when system calls are\n    interrupted.\n26. src/slarray.c: Speed improvements when transferring elements from\n    one array to another via range indices, e.g., a = b[[1:9]];\n27. src/slarrfun.c: transpose of multi-dim non-scalar arrays was using\n    unitialized memory.\n28. src/slarray.c: Improved speed of binary arithmetic of range arrays.\n29. src/slstd.c: atoi, atof, atol, atoll, and integer now accept an array\n    arguments.\n30. demo/pager.c: args swapped in call to memset (Dave Jones\n    davej at redhat)\n31. src/slstring.c: Move last used string in the hash table to the top\n    if it is more than a few deep.\n32. slsh/doc/tm/slsh.1: Added a small section to the slsh man page\n    about customizing the readline environment.\n33. slsh/etc/slsh.rc: changed dir_exists from static to private\n34. src/slposio.c: The low level read/write functions should not be\n    restarted when errno is EAGAIN.\n35. src/sltoken.c: When run in verbose mode, SLns_load_file will\n    display the name of the namespace the file is being loaded into when\n    the namespace is not the Global one.\n36. slsh/lib/require.sl: If the \"feature\" is a filename, then\n    automatically \"provide\" that feature.\n37. slsh/lib/tm/require.tm: Fixed the typos for the require function.\n38. src/slstrops.c: Until `|' is supported in REs, glob_to_regexp\n    cannot be made to produce a single RE that does not match leading\n    dots.  Hence, the glob expression \"*X\" will match \".X\".\n39. slsh/lib/glob.sl: Changed to compensate for modification to\n    glob_to_regexp.  That is, glob(\"*X\") will not match the file \".X\",\n    which preserves the bahavior of the glob function.\n40. src/slcommon.c: On win32 systems, if the codepage is 65001, then\n    use UTF-8 mode (Thomas Wiegner).\n41. src/slarray.c: Trivial change to avoid a warning in gcc\n    about the possible use of an uninitialized variable.\n42. slsh/slsh.c: Added -q, --quiet command line option to inhibit the\n    printing of the startup messages.\n43. slsh/lib/print.sl: Added pager[=val] and nopager qualifiers to the\n    print function.  Also if printing a single structure, each field\n    will appear on a separate line.\n44. src/slstrops.c, src/slbstr.c: Added count_char/byte_occurances\n    function to count the number of occurances of a specific character\n    or byte in a string.\n45. src/slparse.c: &if was causing a SEGV.\n46. src/slstd.c: Added get_float_format intrinsic.\n47. doc/tm/Makefile: Added rules to make cref.pdf\n48. slsh/lib/print.sl: Updated the usage message for the print function.\n49. src/slang.h: Added __attribute_(format(printf)) to SLsnprintf\n    prototype.\n50. src/*.c:  Function prototypes were changed from, e.g.,\n       char *SLang_create_slstring (char *);\n    to\n       char *SLang_create_slstring (SLFUTURE_CONST char *);\n    where SLFUTURE_CONST is defined to have no value.  As a result,\n    these changes has no effect at present but will in a future\n    version (slang-3) where SLFUTURE_CONST will be defined to be\n    `const'.  The use of `const' now would constitute a major API change,\n    which is not permitted until a new major version is released.\n51. src/slmisc.c: SLFUTURE_CONST added to SLextract_list_element\n    prototype.\n52. src/slang.h: Added SLFUTURE_CONST to arg_type field of\n    SLcmd_Cmd_Type object.\n53. src/slarith.c: The return value of fmod was being truncated to\n    single precision.\n54. doc/tm/cslang.tm: COLORTERM was used instead of COLORFGBG (Nathan\n    Stratton Treadway).\n55. configure,*/Makefile.in: Haiku systems do not require -lm.  -lm\n    was replaced */Makefile.in by @M_LIB@ which is not set from the\n    configure script. (Scott McCreary)\n56. src/slutty.c,src/slidsply.c: More Haiku-specific patches from\n    Scott McCreary.\n57. mkfiles/makefile.m32: Made changes to work with recent versions of\n    mingw32 and added a silly hack to work-around CMD.EXE\n    interpretation of '=' as whitespace on the command line.\n58. doc/tm/rtl/rline.tm: New file containing documentation for\n    intrinsic functions dealing with the slang readline interface.\n59. slsh/lib/print.sl: If a string is passed as a file descriptor to\n    the print function, then regard the string as a filename.\n60. src/Makefile.in: Added _slang.h and sllimits.h as a global\n    dependency.\n61. slsh/lib/tm/print.tm: Documented the slsh print function.\n62. slsh/lib/print.sl: Rewrote and simplified the code that prints to\n    the various output \"devices\" by using a device-object.\n63. autoconf/Makefile.in: Added src/Makefile.in as a dependency.\n\nChanges since 2.1.2\n1. autoconf/Makefile.in: If any */Makefile.in is more recent than the\n   corresponding Makefile, request that the configure script be rerun.\n2. src/slcmplex.c: If the complex number z is 0, then return 1 for z^0.\n3. src/slerr.c: SLang_set_error: If the error code is\n   SL_UserBreak_Error, then do not add a string representation to the\n   queue in case this function was called from a signal handler.  This\n   avoids a call to malloc, which is generally a bad idea on systems\n   where malloc is not reentrant.\n4. slsh/lib/sldbcore.sl: The \"c\" alias was not working.  (John Houck)\n5. src/slsmg.c: Avoid a possible segv if SLsmg_Scroll_Hash_Border is\n   greater than the display size. (Miroslav Lichvar).\n6. src/slang.c: Line number information was not always getting\n   propagated in slang code involving function dereferences, e.g.,\n   (@funcptr)(args).  The bug-fix checks to see that funcptr is\n   callable.\n7. src/slparse.c: Generate bos/eos byte-code for empty code blocks,\n   e.g., while (1){}.\n8. lib/sldbcore.sl: When exiting the debugger via the \"exit\" command,\n   the old SIGINT handler was not getting installed.\n9. src/slang.c: Make sure check_signals gets called when returning\n   from inner_interp.\n10. src/slsig.c: If a slang script establishes a signal handler for\n    SIGINT, then set SLKeyBoard_Quit to 1 if SIGINT is received.\n11. src/slstruct.c: New intrinsic:__add_typecast.  This may be used to\n    define a typecast function for a user-defined type.\n12. autoconf/aclocal.m4: Added support for ncurses5-config to query\n    the terminfo path (Wenchieh Yen).\n13. src/slang.h: If __APPLE__ is defined, then also define __unix__.\n14. src/slmath.c: Avoid a NULL pointer dereference when feqs(a,b) is\n    called with mixed scalar and array arguments.\n15. src/slsmg,c: Avoid writing a double-wide character to the last\n    column of the display.\n16. src/sltermin.c: Search the autoconf-derived terminfo dirs before\n    the hard-coded paths (Wenchieh Yen).\n17. doc/tm/rtl/math.tm: feqs documentation updated to reflect a\n    default relative difference of 0.01.\n18. doc/tm/rtl/eval.tm: In one example, get_path_delimiter is\n    incorrectly used (Frank Primini).\n19. src/slstrops.c: Memory corruption was occuring when using a number\n    greater than 10^256 in a \"%f\" format statement.\n20. src/slstrops.c: Small tweak in the way #19 was implemented.\n21. modules/socket-module.c: If INADDR_NONE is defined, use it to test\n    the return value of inet_addr.\n22. src/slang.c: SLang_start_arg_list made a wrapper around\n    start_arg_list.\n\nChanges since 2.1.1\n1. slsh/lib/readascii.sl: Typo in the usage message corrected.\n2. autoconf/aclocal.m4: Fixed elf link problem on freebsd (Renato\n   Botelho)\n3. doc/tm/slang.tm: Some documentation updates\n4. slsh/lib/cmdopt.sl: The value passed to a callback function was not\n   be converted to the specified type, e.g., for\n      cmdopt_add (opt, \"foo\", &callback; type=\"int\");\n   callback was not being passed an integer.\n5. src/slang.c,slassoc.c: Optimization tweaks for inc/decrementing\n   associative arrays (e.g., foo[\"bar\"]++).\n6. src/slerr.c: When SLang_set_error is called, then add the string\n   representation of the error message to the message queue.\n7. doc/tm/strops.tm: Corrected the documentation for the string_match\n   function. (Guenter Milde)\n8. src/sllimits.h: Increased the size of the hash table that stores\n   SLstrings for better efficiency.\n9. src/slstrops.c:_pSLang_push_nstring: Inlined the call to\n   _pSLang_push_slstring.\n10. slsh/lib/structfuns.sl: Ignore any NULL arguments.\n11. slsh/src/readline.c: Turned on output processing in the call to\n    SLang_init_tty.\n12. src/slang.h: Several functions were marked as \"extern\" and not as\n    SL_EXTERN.  This makes a difference for CYGWIN and WIN32.\n13. src/Makefile.in, autoconf/*: Better support for the creation of\n    cygwin DLLs.\n14. src/slang.h: Under windows+cygwin, if SLANG_DLL is not defined,\n    the it will get defined as 1.  This means that by default, the\n    application will get compiled against the slang DLL.  To build\n    against a static version of the library. compile your code using\n    -DSLANG_DLL=0.\n15. Backed out the previous change (#14) to avoid breaking third-party\n    code that compiles against the library.\n16. Makefile: `make` will only build the shared version of the\n    library.  Use `make static` to create the static version.\n17. src/slcmplex.c; Division by zero errors are no longer trapped.\n    This has been the default behavior for reals; this change\n    applies to complex numbers.\n18. */*/*.tm: Documentation updates\n19. src/slrline.c: When completing a quoted string, the final quote\n    character will automatically get added (instead of a space as\n    before).\n20. src/slrline.c: SLang_peek_at_stack+SLang_pop_int recoded as\n    wrappers around inlined versions.\n21. src/Makefile.in: Avoid creating a symlink if the target is the\n    same as the link (affects cygwin).\n22. src/slsh.c: If exit is called without arguments, interpret that as\n    exit(0).\n23. src/slsh.c: Prior to entering interactive mode, turn tracebacks\n    off.\n24. src/Makfile.in: LDFLAGS was not getting used.\n25. doc/tm/: Some typos corrected (J\u00f6rg Sommer)\n26. slsh/Makefile.in: slsh/doc/html/*.html gets installed in\n    $prefix/share/doc/slsh/.\n\nChanges since 2.1.0\n1. slsh/lib/print.sl: Only the first element of arrays such as\n   Float_Type[1,1,1,10] were getting printed.\n2. src/slscanf.c: strings containing only whitespace were not parsed\n   properly by _pSLang_sscanf when %s was used in the format.\n3. slsh/lib/readascii.sl: A flexible ascii data file reader.\n4. src/slang.ver: Updated the linker version script\n   (mlichvar at redhat, com).\n5. src/slang.ver: The wildcard for the SLANG2 symbols was picking up\n   the SLANG2.1.0 symbols.  (mlichvar at redhat, com).\n6. slsh/lib/readascii.sl: Added type and cols qualifiers.  Updated docs.\n7. src/slang.c: If auto_declare is non-zero, and a reference to an\n   undefined variable is made, that variable will be automatically\n   created and given static scope.\n8. slsh/lib/autoload.sl: readascii added.\n9. src/slrline.c: The redraw function was ignoring the application\n   installed update hook, disrupting the display when a redraw was\n   requested.\n10. autoconf/configure.ac: -liconv was not getting added when creating\n    the iconv module on systems with a standalone iconv library.\n11. slsh/lib/readascii.sl: Added \"as_list\" qualifier to return values in\n    lists rather than arrays.\n12. src/slscanf.c: Added inf/nan support to sscanf.\n13. src/slboseos.c: Before calling the hooks, push the error context\n    so that they will work in the presence of errors.\n14. lib/slsh/tm/profile.tm: Documented the profile_* functions.\n15. doc/tm/slang.tm: Added documentation about qualifiers.\n16. src/slarray.c,modules/*.c: Use SLindex_Type instead of int for\n    indexing arrays.  Currently SLindex_Type is typedefd as an int.\n17. src/slang.c: Added SLang_pop_array_index to the API.  Applications\n    should use this function instead of SLang_pop_int for getting\n    array indices.  This new symbol is versioned at 2.1.1.\n18. src/slstruct.c: SLang_pop_cstruct will now force SLang_Array_Type\n    objects to linear ones.\n19. ./NEWS: Updated\n20. slsh/lib/test_readascii.sl: Changed the \"list\" qualifier to\n    \"as_list\".\n\nChanges since 2.0.7\n1. src/slrline.c: SLrline_bol/eol functions were missing from the\n   interface.\n2. src/slarray.c: An optional reference argument may be passed to the\n   where function to get the complement indices.  That is:\n\n       i = where (foo, &j);\n\n   is equivalent to\n\n       i = where (foo);\n       j = where (not foo);\n\n3. src/slexcept.c: SLerr_throw added to allow applications to mimic\n   the semantics of \"throw\".\n4. src/slparse.c,slang.c: New short-circuit operators || and &&.  Use\n   of the \"orelse\" and \"andelse\" constructs has been deprecated.\n5. src/slsmg.c: SLsmg_write_wrapped_string and SLsmg_write_nstring\n   were broken for double-width characters.  Updated demo/smgtest.c to\n   test these functions in the presence of such characters.\n6. demo/smgtest.sl: Embedded some control characters in the\n   double-wide character string for testing the handling of them.\n7. doc/tm/cslang.tm: Updated some of the documentation for the SLsmg\n   interface.\n8. src/slstd.c,slang.c: Added new function intrinisc called \"_$\" that\n   expands embedded \"dollar-escaped\" variables.\n9. src/sllist.c: Added __push_list/__pop_list functions that push list\n   elements to the stack or create a list from objects on the stack.\n   These functions may also be used as an alternative to\n   __push_args/__pop_args.\n10. slsh/lib/structfuns.sl: Modified struct_combine to use __pop_list\n    instead of __push_list.\n11. src/test/scircuit.sl used for regression testing of the\n    short-circuit operators was missing.\n12. src/slang.c: Small memory leak involving method calls plugged.\n13. src/slparse.c,slang.c,slstruct.c: Added support for embedded\n    assignments in structure definitions, e.g.,\n\n        X = struct { a = 4, b = 3, c = sin(PI/4)};\n\n14. src/slang.c,slparse.c,slstruct.c: Added support for\n    \"function-qualifiers\", e.g,.\n\n         define plot_point (x, y)\n\t {\n\t     set_color (qualifier (\"color\", \"black\"));\n\t       .\n\t       .\n\t }\n\t plot_point (2, 1; color=\"red\");\n\n   See docs for more info.\n15. modules/png.sl: Added gmin and gmax qualifiers to the\n    png_gray_to_rgb function.\n16. src/kwhash.c: New keywords: \"ifnot\" and \"then\".  The \"ifnot\"\n    keyword plays the same role as \"!if\", except the use of \"!if\" is\n    deprecated.  Then \"then\" keyword is used in looping constructs as\n    described in #17.\n17. src/slparse.c,src/slang.c: All looping constructs may be followed\n    either an \"else\" block, or a \"then\" block, or a combination of\n    both:\n           loop (N)\n\t     {\n\t        if (foo)\n\t\t  break; % execute the else block if present\n\t     }\n\t   then\n\t     {\n\t        % This block executes if the loop ran to completion\n\t     }\n\t   else\n\t     {\n\t        % This block executes if the loop was broken prematurely\n\t     }\n\n    *** NOTE: This change broke backward-compatibility.  For this\n    reason, support for the else clause was dropped\".  See #48 below.\n\n18. slsh/scripts/slprof: Rewrote much of this script to make it more\n    friendly and useful.\n19. src/sldisply.c: When checking for the equality of space\n    characters, it is only necessary to see see if their background\n    colors are equal -- the foreground color does not matter.\n    Miroslav Lichvar mlichvar at redhat, com.\n20. modules/png.sl: A variable (bad_level) was undefined.\n21. src/slparse.c: The meaning of constructs such as (a<b<c) has been\n    changed to have its mathematical meaning, namely ((a<b)and(b<c)).\n    Before, (a<b<c) was interpreted as (a<b)<c.  Also, == and != now\n    have the same precedence level as <,<=,>,>= to permit, e.g.,\n    (a==b<c).  Note that (a<b<....<c<d) is also defined as\n    ((a<b)and(b<...<c)and(c<d).\n22. src/slarray.c: New intrinsic: wherenot(x), which means where(not x).\n23. src/slarray.c,slparse.c: [a:b:#n] may be used to specify a\n    floating point array with n elements running from a to b, inclusive.\n24. src/slparse,slang.c: Fixed the bug where _NARGS was incorrectly\n    set in functions called via expressions such as (@A[i])(x).\n25. src/slang.c,slarray.c,slparse.c,slstruct.c: References to\n    structure fields and array elements are now supported, e.g.,\n    &s.foo and &A[20].\n26. slsh/slsh.c: Added '-e string' command-line option.\n27. slsh/lib/profile.sl: Rewrote much of it to support both profiling\n    individual lines and functions.\n28. slsh/scripts/slprof: Added 'calibrate' and 'lines' command-line\n    options.\n29. src/slang.c: Unsigned ints were sometimes pushed as signed ints.\n30. src/slrline.c: Added a new public function called SLrline_move\n    that moves the cursor a specified number of columns.\n31. slsh/lib/glob.sl: If a glob pattern does not include a path, the\n    returned list of files will nolonger be prefixed with \"./\", i.e.,\n    glob(\"foo\") returns \"foo\" and not \"./foo\".\n32. slsh/readline.c: If slsh_interactive_hook exists, it will be\n    called prior to going into interactive mode.\n33. src/slrline.c:  A completion mechanism was added.  This works by\n    making a callback to a user or application provied hook that\n    returns a list of possible completions.  This functionality is\n    available if SLrline_init has be called to add readline-specific\n    intrinsics to the interpreter.  The slang code implementing the\n    completion hook is in slsh/lib/complete.sl.\n34. modules/png.sl: Load the colormaps into the same namespace that\n    was used by png.sl (Mike Noble).\n35. slsh/slsh.c: readline intrinsics were not getting initialized.\n36.  slsh/lib/rline/completion.sl: Avoid adding NULL to the completion\n    list when no completions are in the global or current namespace.\n37. src/slerr.c: Added SLang_verror_va function. It is like\n    SLang_verror, except it takes a va_list argument instead of a\n    variable argument list.\n38. slsh/scripts/slprof: If atexit exists, use it.\n39. src/slwclut.c: Typo in is_posix_charclass (> instead of >=) was\n    causing the long form of posix character class names not to be\n    properly recognized.\n40. src/slrline.c: SLrline_init was using SLfree instead of\n    SLang_free_slstring, causing a core-dump.\n41. slsh/lib/slshrl.sl: Use slsh_get_doc_string defined in slshhelp.sl.\n42. autoconf/aclocal.m4: Add support for rpath on OpenBSD.\n43. src/slarray.c: Single element arrays specified via, e.g., [a:b:#1]\n    produced the array [b] instead of the \"more\" correct answer [a].\n44. src/slexcept.c: __get_exception_info will NULL if no exception is\n    active.  Previously it reported an unknown exception.\n45. src/slang.c: If a finally-block threw an exception and then caught\n    it, the outer exception was getting lost.\n46. slsh/lib/glob.sl: glob(\"*\") nolonger matches files that begin with\n    \".\".  A leading dot in a filename must be matched explicitely.  A\n    similar change was made to glob_to_regexp.\n47. src/slang.c,src/slexcept.c: An exception may be rethrown by using\n    \"throw\" without any arguments.  This required support for multiple\n    error-queues.\n48. src/slparse.c: The \"loop-else\" feature added in change #17 was\n    dropped because the change was not backwards compatible, changing\n    the meaning of connstructs such as\n\n           if (some_condition)\n\t     loop (N) {...}\n\t   else\n\t     something_else();\n\n    \"loop-then\" is still supported.  (Thanks go to Paul Boekholt for\n    picking up on this).\n49. src/sldisply.c: If the terminal supports BCE, then ignore the\n    background color of space characters that occur as trailing\n    whitespace (Miroslav Lichvar).\n50. src/slrline.c: Added additional rline intrinsic functions:\n\n      rline_call\n      rline_set_point\n      rline_set_line\n\n51. src/slrline.c:   SLrline_init was using SLang_free_slstring\n    instead of SLfree.  Also SLrline_set_point was using < instead of\n    > when comparing point to len.\n52. src/slrline.c: Added rline_getkey and rline_input_pending\n    intrinsic functions.\n53. src/slstd.c: If the \"char\" function is passed a negative integer,\n    byte-semantics will be used.\n54. src/slrline.c: When browsing previous history items, the item that\n    is currently being edited will not be lost.\n55. src/slrline.c: A new function called SLrline_open2 was added to\n    the API.  It is like SLrline_open except that it associates a name\n    with the underlying SLrline_Type object and calls an interpreter\n    hook (rline_open_hook)  with that name.  This mechanism permits\n    the readline history to be saved to a file and then later retrieved.\n56. slsh/lib/rline/*.sl: A few .sl files were added:\n      vikeys.sl:    A simple vi-like emulation\n      emacs.sl:     A emacs-like emulation\n      editfuns.sl:  Some utility editing functions\n      history.sl:   Functions to save/restore history\n57. slsh/scripts/sldb: If the file was specified using a relative\n    path, prefix its name with the cwd to ensure that it loads.\n58. src/slmath.c: Add \"fuzzy\" floating point comparison functions\n    feqs, fneqs, flteqs, fgteqs, which compare numbers using a\n    specified relative and absolute error.\n59. slsh/readline.c: Readline objects were made available to the\n    interpreter.\n60. slsh/scripts/svnsh, slsh/lib/sldb.sl: Added readline-specific\n    calls to enable the saving/loading of history.\n61. src/slrline.c: Added rline_get_edit_width intrinsic.\n62. src/slarrfuns.c: prod function added (Mike Noble).\n63. src/slstrops.c: %b may be used in sprintf to specify a byte\n    conversion.  This is equivalent to %c when UTF-8 mode is not in\n    effect.\n64. src/slarrfuns.c: PROD_RESULT_TYPE was not getting defined on 64\n    bit systems (Brian McQueen)\n65. src/Makefile.in,autoconf/Makefile.in: Now `make install` installs\n    the shared library but not the static one.  Use `make\n    install-static` to install the static one.\n66. autoconf/aclocal.m4: rpath support for netbsd\n67. slsh/slsh.c: A preprocessor symbol may be added using -Dname\n    command-line option.\n68. src/slstd.c: changed __is_numeric to return 1 if an integer, 2 if\n    a floating point, and 3 if complex.\n69. src/slang.c: missing break statement in the handling of the\n    qualifier token.  This bug manifested itself only when running\n    with slprof or sldb.\n70. slsh/lib/cmdopt.sl: Functions to facilitate the processing of\n    command line options.\n71. slsh/scripts/slprof: modified slprof to use the cmdopt interface.\n72. slsh/lib/structfuns.sl: Enhanced the struct_filter function to\n    filter on specific array dimensions and to return a new structure\n    when given the \"copy\" qualifier.\n73. src/slimport.c: Allow pathname in an import statement, e.g.,\n    import(\"/path/to/module\");\n74. src/slarrfun.c: Added minabs/maxabs functions.\n75. lib/cmdopt.sl: Added support for type=\"str\" qualifier.  Also,\n    cmdopt documentation corrected.\n76. src/slassoc.c: When resizing an associative array that had\n    elements deleted, the num_occupied field was not being properly\n    updated.  This was causing the length of the array to be\n    incorrectly computed.\n77. src/slproc.c: Added getpgrp,setpgrp,getgid functions.\n78. src/slutty.c: In the getkey function, if a SIGINT caused\n    SLKeyBoard_Quit to be a non-zero value, the interrupt_hook was not\n    getting executed.\n79. autoconf/Makefile.in: Tell the user to re-run the configure script\n    if it is more recent than the Makefile.\n80. src/slstd.c: __is_numeric was not returning 3 for Complex_Type.\n81. src/slexcept.c: Do not log traeback messages unless _traceback is\n    non-zero.\n82. src/slclass.c: Added SLclass_patch_intrin_fun_table to the library\n    and modified the code in modules/ to make use of this function.\n83. src/slang.c: SLang_Traceback is now a bitmapped variable, but\n    defined in a backward compatible manner.  See slang.h and the\n    documentation for the _traceback variable for more information.\n84. src/slang.c,slexcept.c: Change 83 required a small tweak to the testing of\n    traceback variable.\n85. src/slparse.c: MAX_TOKEN_LISTS increased to 256.\n86. src/slparse.c: Added a couple of #if..#endif constructs to avoid\n    compiling bos/eos hooks when the debug feature has been disabled.\n    (Tijs Michels tijs, michels at t-online, de)\n87. src/slproc.c: The setpgrp function that was added in change #77\n    has been removed because on some systems it takes arguments, and\n    on others it takes none.  It is also equivalent to setpgid(0,0),\n    so there is no net loss.\n88. src/slutty.c: Set the FD_CLOEXEC flag on the /dev/tty file\n    descriptor.\n89. src/doc/tm/cslang.tm: Changed the array examples to use\n    `SLindex_Type' instead of `int'.  I also added a note about this\n    to the NEWS file.\n90. modules/iconv-module.c: a new module (Dino Sangoid).\n91. src/slsig.c: SLsignal was used instead of SLsignal_intr.  The\n    difference is that SLsignal_intr interrupts system calls, which is\n    a better choice for the interpreter.\n92. src/slproc.c: added setsid intrinsic\n93. src/slarray.c: [a:b:#1] was producing [NaN] instead of [a].\n94. src/sldbcore.c: The debugger was not stopping upon SIGINT.\n95. src/sltermin.c: Added _pSLtt_tifreeent to free the SLterminfo_Type\n    object and avoid a memory leak (Miroslav Lichvar\n    mlichvar at redhat, com)\n96. slsh/lib/cmdopt.sl: Add bor=FLAG and band=MASK qualifiers to support\n    bitmapped options.\n97. modules/onig-module.c: New module that wraps the oniguruma regular\n    expression library.\n98. src/slang.c: If a file defining a namespace was loaded, a\n    duplicate namespace error was getting generated when also loading\n    a byte-compiled version of the same file.\n99. src/slclass.c: In _pSLclass_copy_class, a possible NULL return\n    value by alloc_class_slot was not being handled.\n\nChanges since 2.0.6\n1. src/slmath.c: if a double precision array was passed to nint, it\n   was treated as a single precision one leading to a core dump.\n2. src/sldisply.c: The Is_Fg_BGR variable was re-introduced and a typo\n   affecting it was corrected.\n3. src/slinclud.h: Do not include malloc.h on FreeBSD (Renato Botelho\n   garga at freebsd, org).\n4. doc/tm/cslang.tm: Changed a couple of occurances of \"unsigned char\"\n   to \"SLtype\".  (Doug Burke dburke at head, cfa, harvard, edu)\n5. doc/tm/rtl/list.tm:  Documentation changed to indicate that the\n   third parameters to list_append/insert are optional.  (Doug Burke).\n6. src/slwcwidth.c: Added a new function to the API called\n   SLwchar_set_wcwidth_flags.  This may be used to force\n   SLwchar_wcwidth to 1 for double width characters.  Such a feature\n   is sometimes needed for fixed fonts that treat single and double\n   width characters the same.\n7. slsh/lib/slshrl.sl: The readline-massage hook was interpreting\n   lines beginning with a '.' as RPN.\n8. slsh/lib/sldb*.sl: The debugger was not stopping upon errors\n   generated by the deprecated function verror.\n9. src/slparse.c: \"++()\" was flagged by the parser as an error, but no\n   error message for it was being generated.\n10. src/slang.h: #if HAVE_LONG_LONG changed to #ifdef HAVE_LONG_LONG\n11. src/slsmg.c:  Return right away if SLsmg_write_chars is told to\n    write 0 characters.  Also a bug fixed in the logic of this routine\n    involving the test for overwriting the second half of a double\n    width character.\n12. src/slrline.c: Finished the UTF-8 support by the readline functions.\n13. slsh/*.c: Added slsh_get/set_prompt_hook functions for setting of\n    the slsh command-line prompt.  (Douglas Burke)\n14. src/sltoken.c: Added additional string representations for tokens\n    so that some error messages will not appear to be so cryptic.\n15. src/sltoken.c: _pSLparse_error: Use the line number of the input\n    stream if the linenumber associated with a token is unknown.\n16. src/slparse.c: Inline arrays and lists are allowed to have a\n    trailing comma, e.g., [1,2,] is the same as [1,2].\n17. doc/tm/rtl/type.tm:  typo in example for atof corrected (Doug\n    Burke).\n18. Improvements for building on DOS/Windows (Mike Noble):\n\n      * The various mkfiles/makefile.all now include a clean: target\n      * The top-level mkfiles directory now includes 3 new files:\n\n  \t   A build.sh script, which auto-generates the Makefiles\n\t   (using mkmake) and commences a build, similar to the\n\t   build.bat script which was already there (and which I\n\t   tweaked slightly).\n\n  \t   Seed makefile.dos and makefile.sh scripts, which get copied\n\t   to the root of the S-Lang distro when either build.sh or\n\t   build.bat are run.  This makes it easier to build\n\t   everything at once, or clean, etc, from the top of the\n\t   distro.\n\n      * A few new paragraphs in INSTALL.pc\n      * In the various mkfiles/makefile.all, \"CFLAGS +=\" changed to\n\t\"CFLAGS =\" to avoid nmake 1.5 problems.\n      * Simplified the module build targets in modules/makefile.all,\n\tand made it much easier to add new modules in the future.\n19. Added module support for cygwin.  This involved a few minor\n    changes to the Makefiles and aclocal.m4  (Mike Noble)\n20. slsh/slsh.c: Brief copyright message displayed when started up in\n    interactive mode.\n21. src/slarray.c: Improved support for mixed-type inline arrays:\n    NULLs supported ([\"foo\", NULL]) where it makes sense, and\n    type-promotion rules are used to determine the resulting type when\n    concatenating mix-type arrays ([\"foo\"], NULL, [\"bar\\0\"]);\n22. src/slrline.c: SLrline_close was not freeing the history creating\n    a memory leak.\n23. src/keywhash.c: Removed obsolete and unused \"do_while\" keyword,\n    and regenerated keywhash.c\n24. doc/tm/slang.tm: List of keywords updated to reflect the actual\n    keywords used.\n25. modules/mkfiles/makefile.all: Updated VC-specific LINK_CMD macro\n    to support the changes outlines in 18 above (Dino Sangoid).\n26. src/slang.c,src/slboseos.c: Added hooks for entering and leaving a\n    function.  The beginning-of-statement and end-of-statement hooks\n    were found insufficient to support a debugger support.  See the\n    documentation for _bofeof_info for more information.\n27. slsh/lib/sldbcore.sl: Modified to use the bof/eof hooks introduced\n    in #26.\n28. Various documentation tweaks.\n29. src/slboseos.c: Changed the beginning-of-function handler to\n    include the filename.\n30. src/slsh/lib/require.sl: Removed the \"feature not provided\" message.\n31. src/slrline.c: Tabs were not being expanded properly when the\n    window was horizontally scrolled.  Also, the last column of the\n    display is not used in case the terminal has automatic margins.\n32. lib/sldbcore.sl: The debugger's \"finish\" command was not quite\n    working as it should have.\n33. lib/sldbcore.sl: Added an sldb_initialize function that can be\n    overridden by the debugger.\n34. src/slposio.c: Made changes to allow arbitrary objects to be\n    attached to file descriptors.\n35. src/sl*tty.c: Set SLKeyBoard_Quit to 0 in the init_tty routines.\n36. modules/socket-module.c: A new module that defines various socket\n    functions.  This required additions to the configure script and\n    related files.\n37. src/slstrops.c, slsh/readline.c: Removed statements that were never\n    reached.\n38. src/sltypes.c: foreach(X) where X is String_Type produces a\n    sequence of UChar_Type objects.  This is consistent with\n    typeof(X[i]).  Also added \"using\" forms to specify char or\n    byte-semantics: foreach (X) using (\"bytes\"|\"chars\").  The default\n    is byte semantics.  Updated the corresponding docs.\n39. src/slang.h: Added SLang_push/pop_wchar macros.\n40. src/sldisply.c: This file was failing to compile with Kanji\n    support enabled.  Kanji is unsupported in slang-2.\n41. src/slcurses.*: Alt-character set handling was not working.  Once\n    again, I strongly encourage you to modify your programs to use the\n    native SLsmg routines instead of the partial curses emulation hacks.\n42. slsh/lib/sldbsock.sl: New file to implement socket-based debugger.\n43. slsh/scripts/sldb: Added --pid <pid> option for debugging a\n    separate process via the socket-based debugger interface.\n44. src/slang.c: If a try-finally block contained a return statement,\n    the function would sometimes continue after the finally block.\n45. modules/termios-module.c: Added tcget/seti/ospeed functions for\n    setting baudrates of termios structures.  Also added CRTSCTS\n    constant to the module.\n46. src/slclass.c: If an application calls SLang_pop_mmt with a\n    non-MMT type specified, a SL_Application_Error exception will be\n    generated.\n47. src/slang.c: A misplaced return statement was introduced by #44\n    above.\n48. src/slparse.c: Allow the \"finally\" keyword to be followed by a\n    colon, e.g., try foo; finally: bar;\n49. src/sltoken.c,slang,c: \"Dollar\" and long-longs were not being properly\n    handled in byte-compiled files.\n50. src/test/Makefile: Changes were made to test byte-compiled\n    versions of the test scripts.\n51. modules/socket-module.c: added #include <time.h> to get it to\n    compile on mac osx.\n52. src/slmath.c: The data field was not properly used by the nint function.\n53. modules/select-module.c: Call SLang_handle_interrupt when the\n    select system calls gets interrupted.\n54. src/slposio.c: Add == and != operators to FD_Type objects so that\n    fileno(stdin)==fileno(stdin) works as expected.\n55. src/slarray.c: wherefirst and wherelast were not working with\n    empty arrays.\n56. src/slmisc.c: SLang_guess_type was failing on numbers containing a\n    leading '+' sign.\n57. src/slimport.c: The name of the SLANG_MODULE_PATH environment\n    variable may be changed in src/Makefile.\n58. src/slrline.c: Added a delete-to-beginning-of-line (delbol)\n    function and bound it to ^U.\n59. slsh/Makefile.in: $(CFLAGS) added to the final link line. (Nelson\n    H. F. Beebe)\n60. src/slmath.c: Avoid the use of function pointers to standard math\n    functions to support a wider range of compilers.\n61. autoconf/aclocal.m4: IRIX compilers do not require \"-K pic\"\n62. autoconf/configure.ac: Probe for socklen_t.\n63. */Makefile.in: Added support for the $LIBS env variable\n64. src/slerr.c: Added fflush(stdout) to SLang_vmessage.\n65. slsh/lib/sldbcore.sl: The eof hook was improperly handling the\n    debugger step.\n66. src/slarray.c: Optimization added for index-array operations on\n    double, float, and int arrays.\n67. src/slarith.c: Optimization added for boolean operations between\n    [U]Char_Types.\n68. lib/structfuns.sl: Typo in the documentation corrected (Doug Burke)\n69. lib/*.sl, lib/tm/*.tm, lib/help/*.hlp: Documentation for the\n    functions in *.sl has been moved to *.tm and integrated into the\n    help system.\n70. src/slwclut.c: a missing \"default\" label in a switch statement was\n    causing invalid character class specifiers to pass.\n71. src/slang.c: Optimization added for struct method calls.  In\n    addition, linenumber information was propagated for such function\n    calls to permit better interaction with the debugger.\n72. slsh/lib/profile.sl: profile_on was not being called with an\n    argument.\n\nChanges since 2.0.5\n1. src/slmath.c: nint was returning the wrong value for numbers 0.5<=x<1.\n2. src/slarrfuns.c: sum(Double_Type[0,0],1) was generating an access\n   error.\n3. src/*.c: Removed some unused variables.\n4. src/slcommon.c: '=' instead of '==' was being used in the\n   utf8_enable function.\n5. doc/tm/*.tm: corrected some documentation typos (Nelson Beebe,\n   beebe at math, utah, edu).\n7. src/sltime.c: times function was returning a structure containing\n   incorrect values (cstawarz at head, cfa, harvard, edu).\n8. src/sldisply.c: Writing a multi-byte character to the lower-right corner\n   of terminals with automatic margins was not working (Vladimir\n   Nadvornik nadvornik at suse, cz).\n9. src/slwclut.c: Allow \\\\^ in character set specifications to\n   represent a literal '^'.  See the documentation for strtrans for\n   more information.\n10. src/slcommon.c: Some systems that have nl_langinfo do not have\n    CODESET.  The configure script now checks for both.\n11. autoconf/Makefile.in: Added \".PHONY\" and \"check\" targets.\n12. src/slstrops.c: \"%c\" in an sprintf style format descriptor made to\n    work with wide-character arguments.  It is nolonger necessary to\n    use \"%lc\".\n13. src/slmisc.c: Semantics of \"\\x{...}\" changed to be more useful\n    when the interpreter is running in non-UTF8 mode.  Previously,\n    \"\\x{...}\" always expanded to a UTF-8 encoded string, regardless of\n    the UTF-8 mode.  Now, in non-UTF8 mode, \\x{...} will expand to a\n    UTF-8 encoded string when \"...\" consists of 3 or more characters,\n    and for less than 2 characters, it specifies a byte.  The behavior\n    in UTF-8 mode has not changed: \\x{...} always returns a UTF-8\n    encoded string.  The upshot is that \"\\x{FF}\" will produce the byte\n    0xFF when not in UTF-8 mode, and the 2 byte UTF-8 encoding when\n    run in UTF-8 mode. \"\\x{FFF}\" will expand to the apropriate UTF-8\n    encoding regardless of the mode.  Note that the behavior of the\n    non-brace form such as \\xAB has not changed--- the result is still\n    a single byte 0xAB.\n14. src/slmisc.c: \\u{...} may be used in string literals to specify a\n    unicode character, regardless of the UTF-8 mode (on or off).\n    Previously, \\x{...} had this behavior. (See #13).\n15. src/test: Tests are run in both UTF-8 and non-UTF-8 modes.\n16. src/slvideo.c: djgpp version of write_attributes was broken (Gisle\n    Vanem giva at bgnett, no)\n17. slsh/readline.c: Call SLang_handle_interrupt if a read was\n    interrupted by a signal.  This will ensure that signal handlers\n    will execute at the prompt.\n18. src/sldisply.c: Added a check for buffer-overflow by tgetstr on TERMCAP\n    based systems.\n19. autoconf/: Updated config.sub and config.guess\n20. slsh/readline.c: Added slsh_readline_noecho function.  Also, strip\n    trailing newline from string returned by slsh_readline* when in\n    --no-readline mode.\n\nChanges since 2.0.4\n1. slsh/slsh.c: Error messages were not being printed if an error\n   occured during an atexit hook.\n2. src/slstrops.c: Use _pSLstring_bytelen instead of strlen to get the\n   number of bytes.\n3. src/slstring.c: Several tweaks were made for faster string handling.\n4. src/slparse.c: A negative integer literal raised to a power was not\n   being properly parsed.\n5. doc/tm/cslang.tm: Documentation updated to reflect the changed\n   SLang_pop_double API, as well as other C API documentation\n   tweaks (Doug Burke).\n6. doc/tm/rtl/type.tm: Documentation for \"integer\" changed to indicate\n   that integer throws a SyntaxError exception if the string does not\n   have a valid syntax. (Joshua Kempner jkempner at bowdoin, edu)\n7. src/slmath.c: Added nint (round to the nearest integer) intrinsic.\n8. src/slarray.c: NULL arguments to array_map were not getting\n   converted to arrays of NULL.\n9. src/slang.h: Added SLclass_set_length_function for setting the\n   length method of application-defined classes.\n10. src/slang.ver: A versioning script is used to restrict the\n    visibility of the _pSL* symbols.  (Alastair McKinstry\n    mckinstry at computer, org)\n11. slsh/slsh.c: Ignore SIGPIPE.\n12. src/slutf8.c: If SLutf8_decode is passed an inproperly encoded\n    UTF-8 sequence, then set the target of the SLwchar_Type pointer to\n    the ascii value of the byte, in addition to returning NULL.\n13.  src/slposdir.c: Added \"access\" intrinsic.\n14. src/slsmg.c: Fixed a buffer-overflow in the SLsmg_write_chars\n    function.\n15. src/slsig.c: A missing return statement was causing sigsuspend to\n    fail when called with 0 arguments.\n16. src/slarray.c: Added wherefirst and wherelast intrinsics.\n17. src/slang.c: Inline attribute removed from some functions that\n    were failing to be inlined by the compiler.\n19. src/slstdio.c: SLang_get_fileptr added to permit an application to\n    get the FILE* object associated with a SLANG_FILE_PTR_TYPE.\n20. src/slang.c: It was failing to compile when\n    SLANG_HAS_DEBUGGER_SUPPORT was set to 0.\n21. src/sltime.c: strftime intrinsic added.\n\nChanges since 2.0.3\n1. slsh/scripts/svnsh: Empty lines were not being handled.\n2. src/slutf.c: Incorrect bracketing in the IS_ILLEGAL_UNICODE macro.\n   (johannes figgen at flextronicssoftware, com)\n3. src/sllist.c: A prev link was not always getting set by the list_insert\n   function.\n4. doc/tm/rtl/eval.tm: Tweaked the documentation for the eval function\n   (Mike Noble mnoble at space, mit, edu)\n5. modules/png.sl: Make sure the scale factor is a float and not an int.\n6. src/sltime.c: The tic/toc functions were changed to use\n   gettimeofday or its equivalent.  This change results in greater resolution\n   for these interval timers, but not necessarily greater accuracy.\n   Also, previously the tic/toc functions measured the time used by\n   the current process but now they measure elapsed time.  The old\n   behavior is still available via _tic/_toc.\n7. slsh/lib/profile.sl: The above change made it possible to create a\n   more accurate profiling tool.  The functions in this file are used\n   by the slsh/scripts/slprof profiling tool.\n8. src/slarith.c: Missing break statement caused signed long long\n   values to be printed as unsigned long longs.\n9. tm/doc/cslang.tm: Two small typos corrected (Alastair McKinstry\n   mckinstry at computer, org)\n10. autoconf/aclocal.m4: Support for GNU Hurd and GNU KFreeBSD /\n    KNetBSD systems (Alastair McKinstry)\n11. src/slstrops.sl: Added support for long long to the sprintf\n    intrinsic function (e.g., sprintf (\"%lld\", 1234LL))\n12. modules/png-module.c: 8 bit gray scale images were being written\n    out as 8 bit images with an alpha channel.  Bug fixed and version\n    bumped to 0.1.1.\n\nChanges since 2.0.2\n1. src/slang.c: Optimization of multiple assignment statements involving\n   binary operators was generating bad byte-code causing a run-time\n   error.  In order to see this effect, code such as\n\n        w = 3*t+s;\n        x = 2*z+1;\n\ty = z*z;\n\n   would have to be written as a as multiple assignment statement:\n\n        (w,x,y) = (3*t+s, 2*z+1, z*z);\n\n2. src/sltypes.c: Added SLang_push_function to complement\n   SLang_pop_function.\n3. src/slkeymap.c: SLkm_define_slkey implemented.  It was already\n   declared in slang.h but never implemented until now.\n\nChanges since 2.0.1\n1. src/slang.h: Forgot to bump SLANG_VERSION to 20001.\n\nChanges since 2.0.0\n1. modules/png.sl: png_gray_to_rgb was missing an assignment after\n   normalization.\n2. slsh/lib/print.sl: Ignore SIGPIPE while in the pager.\n3. src/slang.c: SLang_peek_at_stack1_n was broken.\n4. src/slsmg.c: If the cursor is left outside the visible display area\n   during SLsmg_refresh, then \"clip\" its position to the visible area.\n5. src/slarray.c: Typo (= vs ==) was corrected in the array_eqs_method\n   function. (Dino Sangoid)\n6. src/slmath.c: Use IS_NAN macro instead of isnan (Dino Sangoid)\n7. src/mkfiles/makefile.all: Added dll support for the mingw32 build\n   (Marko Mahnic; marko mahnic at email, si)\n8. src/slang.c: Removed a while loop that did nothing. (Dino Sangoid)\n9. src/mkfiles/makefile.all, src/slconfig.h, src/slposdir.c: Support\n   added for 16 bit systems using watcom C (Dino Sangoid)\n10.doc/tm/*.tm: Some spelling errors corrected (Mike Noble)\n11. src/slang.c, src/slnspace.c: There was a conflict between private\n    and static namespaces that arose when _implicitly_ loading a file\n    into a specified namespace.  Resolving this issue involved the\n    complete separation of the private and static namespaces.\n12. The _get_frame_info function now provides the name of the active\n    namespace.\n13. src/sldisply.c: Line drawing characters were not activated when\n    xterm was started in locale mode.  Escape sequences were tweaked.\n    (Alexander E. Patrakov, patrakov at ums, usu, ru)\n14. slsh/lib/print.sl: If an element of an array of structs is NULL\n    then print the element as NULL.\n15. modules/varray.c: typo was preventing mmapping of a file from\n    working properly.\n16. slsh/lib/*.sl: changed \"static\" to \"private\" to protect the\n    functions when loaded into a namespace.\n17. autoconf/configure.ac: Add tests for atoll and strtoll.  Some\n    versions of MacOS X do not have atoll.\n18. modules/png.sl: Added png_get_colormap_names and changed\n    examples/colormap.sl to use it.\n19. src/slarrfun.c: Ignore _NaNs in min/max functions.\n20. slsh/lib/sldbcore.sl: Added several aliases to the debugger:\n    b(reak), c(ont), d(elete), h(elp), l(ist), n(ext), p(rint),\n    pp(rint), q(uit), s(tep)\n\nChanges since 2.0.0 pre-release 8\n1. src/slang.c:  Under some conditions, no line number information was\n   being reported for stack underflow errors.\n2. lib/sldbcore.sl: Missing return value was causing a stack-underflow\n   error. (Paul Boekholt)\n3. src/slmisc.c,src/sltoken.c: In UTF-8 mode, an escaped sequence of\n   the form \"\\xAB\" is interpreted as a byte.  Previously, it was\n   interpreted as a wide character.  To encode a wide character using\n   an escape sequence, use braces (\"\\x{AB}\").\n4. src/slstd.c: The putenv function now throws an OSError exception\n   upon failure.  Previously it threw a RunTimeError.\n5. src/slerr.c: Added NamespaceError exception and changed some of the\n   namespace specific function to throw this exception instead of a\n   RunTimeError exception.\n6. src/slang.h: SL_Domain_Error was missing from the file.\n7. src/slerrno.c: If errno_string is called without an errno argument, the\n   current value of _pSLerrno_errno will be used.\n9. src/sltime.c: The \"time\" functions were changed from using an\n   unsigned long to a long to match time_t.\n10.src/slvideo.c: Corrected a typo in the non-Unix/non-VMS specific\n   SLtt_utf8_enable function.\n\nChanges since 2.0.0 pre-release 7\n1. slsh/lib/structfuns.sl was missing from the distribution.\n2. src/sldisply.c: SLtt_Blink_Mode set to have a default of 0 instead\n   of 1.\n3. slsh/slsh.c: Add -t option, which causes slsh_main (if defined) to\n   not be executed.\n4. src/sltoken.c:SLang_load_object: Do not reset the line_num field.\n   This gives the line numbers in slsh interactive mode some meaning.\n5. src/slsh/lib/slshrl.sl: Usage message for \"exit\"\n6. src/slvideo.c: SLtt_utf8_enable function added\n7. src/slexcept.c: If tracebacks are turned off, make sure that the\n   line number field in exception objects is meaningful.\n8. src/slang.c: SLang_peek_at_stack1_n was not working.  (Mike Noble\n   mnoble at space, mit, edu).\n9. src/slang.c: Small optimization tweak when dealing with a single\n   array index.\n10. src/slposio.c: Jorge Gonzalez, jgonzalez at atsautomation, com\n    found and fixed a leak in the \"read\" function.\n11. modules/png-module.c: New module to read/write png files.  It\n    includes about 20 colormaps.  See examples/colormap.sl.\n12. src/slclass.c: SLang_get_int_type returns the SLtype for the\n    integer with the specified number of bits.\n13. src/slarray.c: array_shape intrinsic function added as an\n    alternative to array_info for getting the dimensionality of an\n    array.\n14. src/slospath.c: new intrinsic: path_basename_sans_extname\n15. src/, slsh/: A number of win32 tweaks to support dynamic linking under\n    windows. (Dino Sangoid; sangoid at lloydadriatico, it).\n16. src/slstruct.c: Check for duplicate fields in a struct. (Doug\n    Burke; burke at cfa, harvard, edu).\n17. src/slarrfun.c: New matlab-like functions \"any\" and \"all\". (Doug\n    Burke; burke at cfa, harvard, edu).\n18. src/slang.c: Calling SLang_restart will also clear the slang error\n    state.  There is no need to call SLang_set_error(0) after calling\n    SLang_restart.\n19. src/sltoken.c: Allow the evaluation of '#if (expr)' when created a\n    pre-parsed file (.slc).\n20. src/slang.c: If a function defined in the currently loading\n    file is to also be autoloaded into another namespace, and that\n    namespace is not current one, then make sure an anonymous\n    namespace is being used.\n21. src/slang.c, slboseos.c: Experimental support for a debugger.  New\n    functions:\n       _set_frame_variable\n       _get_frame_variable\n       _get_frame_depth\n       _get_frame_info\n       _use_frame_namespace\n22. slsh/lib/sdb*.sl: An experimental source code debugger based upon\n    a Dino Sangoid's jed debugger.\n23. src/slang.c: The \"_pSL\" prefix was dropped from a few file-local\n    variables.  Also calls to _pSLclass_push_* were changed to calls to\n    file-local specific versions of the functions.\n24. src/slsh/mkfiles/: A couple of win32 icons for slsh were provided\n    by Marko Mahnic (marko. mahnic at email, si)\n25. src/slarray.c: If typeof(t)==DataType_Type, then put back the old\n    behavior of array creation via t[N].\n26. doc/tm/slang.tm: The slang manual has been updated for version 2,\n    with numerous typos corrected.\n27. slsh/scripts/sldb: New script that invokes the debugger.\n28. src/slstruct.c: Added _is_struct_type.  This works like\n    is_struct_type excepted if the object is an array, it returns\n    information about the array elements.\n29. slsh/lib/print.sl: The \"print\" defined by this file may be used to\n    print arrays, structures, lists, etc.  It is also used by sldb's\n    pprint command.\n\nChanges since 2.0.0 pre-release 6\n1. The _traceback variable was being ignored.  As a result, error\n   messages were more verbose than requested.\n2. I fixed the negative indexing issues and made such indexing much\n   more consistent.  Before it was possible to index the first through\n   last elements of an array using the index [0:-1].  However, there\n   were too many inconsistencies associated with this feature.\n   Negative indices are still supported but in a much more consistent\n   fashion.  See UPGRADE.txt for more details.\n\nChanges since 2.0.0 pre-release 5\n\n0. src/slang.h+others: I created a new typedef in slang.h representing\n   array indices (SLindex_Type).  This is used in the SLang_Array_Type\n   structure.  Previously the affected fields were ints.  For backward\n   compatibility, SLindex_Type is defined as an int.  This change was\n   made with an eye to the future when 64 bit platforms become more\n   common with physical memory such that one wants to index arrays\n   with more than MAX_INT elements per dimensions (the current\n   limit).\n1. src/slarith.c: missing comma in a code block specific to 64 bit systems\n   prevented compilation.\n2. src/: OS/2 specific patches.\n3. src/mkfiles/makefile.all: Added some ranlib commands for the mingw32,\n   cygwin, and EMX compilers.\n4. */mkfiles/makefile.all:  Add TOOL_PREFIX variable to support\n   cross-compilation.\n5. slsh/slsh.c: win32 specific changes to get path to slsh.rc via\n   the GetModuleFileName function (DINO SANGOI (SANGOID at lloydadriatico, it)).\n6. slsh/mkfiles/makefile.all: Corrected the values of the SLANGINC and\n   SLANGLIB variables.\n7. src/slstd.c: atoll intrinsic was not getting defined. (Doug Burke\n   (dburke at head-cfa, cfa, harvard, edu)).\n8. src/test/longlong.sl: Add test for atoll (Doug Burke)\n9. src/slerr.c: SLang_set_error: Allow an error to be cleared but not\n   changed to another value in the presence of an error.\n10. src/slarray.c: Allow a 1-d integer array to always address a\n    multidimensional array.  Not just \"sometimes\".\n11. slsh/lib/arrayfuns.sl: local variable a was multiply defined in\n    reverse function.\n12. src/slpack.c: Add support for long long and 64 bit types.  Also\n    'z' specifier added as an alternative to 's'.\n13. src/slstdio.c: Previously, fread(&v,Char_Type,n,fp) would\n    assign a BString_Type object to v if n>1 or Char_Type if n==1.\n    Now, for consistency it returns Char_Type[n] for n > 1.  To get\n    the value as a binary string, use fread_bytes.  This change is not\n    backwards compatible and may break code that relies upon the old\n    behavior.  See UPGRADE.txt for additional information.\n14. src/slrline.c: A silly typo prevented multiple instances of\n    readline objects.\n15. slsh/: New intrinsic: slsh_readline.  This allows a script to get\n    input from the user using the readline interface.\n16. slsh/scripts/svnsh: A simple shell for interacting with an SVN\n    repository.\n17. src/slang.h: The SLANG_MODULE macro was incorrectly defined when\n    compiled with C++.\n18. src/slkeymap.c: A small memory leak was found by Gilles Mazoyer\n    pgid at free, fr.\n19. src/slarith.c,...: Some problems were found on 64bit big-endian\n    machines.  Correcting this involved adding new functions to the\n    interface long and short intrinsic constants.\n20. src/slang.c: Inside a finally block, loops were not working if the\n    exception handler issued a break or return statement.\n21. src/slrline.c: On a 64bit big-endian system a SEGV would result\n    when inserting text.\n22. configure: CFLAGS added to the ELF_CFLAGS variable.  LDFLAGS added\n    to the ELF_LINK variable.\n23. src/slposdir.c: hardlink intrinsic added.\n24. src/slexcept.c: \"function\" field added to the exception object.\n25. src/slang.c: The way line number information is stored has been\n    changed.  Now it is nolonger necessary to get line number\n    information by setting the _debug_info variable.  In the process I\n    tried to make the error messages somewhat more useful.\n26. src/slang.h: SLvsnprintf and SLsnprintf functions made public\n    Previously these were _pSLvsnprinf and _pSLsnprintf. (Dino Sangoid).\n27. src/slang.c, _slang.h: Bytecodes were made enums instead of\n    preprocessor symbols.\n28. src/slang.h: External symbols have been prefixed with SL_EXTERN to\n    facilitate the construction of a slang DLL on windows.  When\n    compiling against the slang DLL, be sure to define SLANG_DLL.\n    (Dino Sangoid).\n29. src/sllist.c: Added foreach method to lists.\n30. src/slsmg.c: Experimental feature: If rendering a character string\n    that contains an character sequence of the form 'ESC [ x m', or\n    'ESC [ x ]', where x represents a decimal integer, then the\n    current color will be switched to the value of x.  If x is omitted\n    (ESC[m) then the color will be set to the color active at the time\n    of the function call.\n\n       SLsmg_set_color (1);\n       SLsmg_write_string (\"This is a \\033[123mnew\\033[m feature\");\n\n    is equivalent to:\n\n       SLsmg_set_color (1);\n       SLsmg_write_string (\"This is a \");\n       SLsmg_set_color (123);\n       SLsmg_write_string (\"new\");\n       SLsmg_set_color (1);\n       SLsmg_write_string (\" feature\");\n\n    By default, this feature is turned off but may be turned on via\n\n        SLsmg_embedded_escape_mode (1);\n\n    Although this special color-changing-byte-sequence looks like an\n    ANSI escape sequence, the semantics are very different.\n31. doc/tm/rtl/type.tm: The \"string\" function was documented as\n    returning an integer.  (Doug Burke)\n\nChanges since 2.0.0 pre-release 4\n0. src/*: For POSIX compliance, all _SL* symbols were changed to\n   _pSL*.  Change suggested by Alastair McKinstry.  If you experience\n   a linker error such as \"undefined symbol: _SLChg_UCase_Lut\" after\n   upgrading, then you will have to recompile your application.\n1. src/slstring.c: Bug fix.  For some strings, a substring would\n   produce the same hash as the full string.  As a result, the\n   substring was not being properly generated.\n2. src/slerr.c: For applications not using the interpreter,\n   _pSLerr_init was not getting called.  As a result, the error-codes\n   were not getting initialized.\n3. src/slsmg.c: Bug fix affecting SLsmg_Newline_Behavior (Thomas\n   Dickey).\n4. src/doc/tm/rtl/strops.tm: typo caught by Doug Burke.\n5. src/slstd.c: added atoi, atol, atoll as simple wrappers around\n   corrsponding standard library functions--- same caveats apply.\n6. src/slstd.c: New intrinsics: add_doc_file, get_doc_files,\n   set_doc_files.  These functions facilitate the addition of\n   documentation via a standard mechanism across all apps using the\n   interpreter.\n7. slsh: Interactive support with readline-editing added to slsh.  By\n   default, the slang library readline functions are used.  If you\n   want GNU readline, then run configure with the appropriate option.\n   (This feature is due to Mike Noble, mnoble at space, mit, edu).\n8. slsh: A man page for slsh (Rafael Laboissiere, rafael at debian, org).\n9. src/slwclut.c: No provision was allowed for backslashes in ranges\n   that also permitted character classes.\n10. slsh/mkfiles/makefile.all: New file for non-unix systems.\n    (DINO SANGOI (SANGOID at lloydadriatico, it)).\n\nChanges since 2.0.0 pre-release 3\n1. New intrinsics: array_swap, array_reverse\n2. src/slrline.c:SLrline_open: If the display width argument is 0, set\n   it to 80.\n3. sldisply.c: Initialize SLtt_Screen_Cols/Rows to (80,24) instead of\n   (0,0).\n4. src/slparse.c: Expressions such as &s.foo and &s[0] are flagged as\n   unsupported at parse time.\n5. src/slimport.c: A module may now be imported into more than one\n   namespace.  See modules/README if you are a module writer.\n6. slsh/Makefile.in, modules/Makefile.in: Made changes so that\n   nothing gets compiled during the install step.\n7. src/slimport.c: If \"import\" is called without a namespace argument,\n   the current namespace will be used.  If the current namespace is\n   anonymous, the global namespace will be used.\n8. slsh/lib/require.sl:  The provide/require functions have been\n   changed to take a namespace argument.\n9. doc/tm/slang.tm: Added section on operator overloading for\n   user-defined types.\n10. doc/tm/tools/fixtxt: a jed-script to repair the text files\n    generated by the linuxdoc sgml2txt program.\n11. doc/tm/slang.tm: Corrected some typos spotted by Doug Burke.\n12. src/mkfiles/makefile.all: DOS/Windows: The response file was not\n    being properly generated (SANGOI DINO (SANGOID at lloydadriatico, it)\n13. src/slang.c: The autoload function may be used to load a file into\n    a namespace. (Based upon an idea from J\u00f6rg Sommer (joerg at alea,\n    gnuu, de)\n14. src/slstring.c: New hash function (from Bob Jenkins-- see\n    See http://burtleburtle.net/bob/hash/evahash.html)\n15. src/slassoc.c: rewritten to use double hashing.\n\nChanges since 2.0.0 pre-release 2\n1. autoconf/aclocal.m4: \"if [...]\" replaced by \"if test ...\" (Lloyd\n   Zusman)\n2. src/slsearch.c: BM searches for a string with the same length as\n   the string to be searched was failing.\n3. slsh/scripts/jpegsize: New demo script that finds the dimensions of\n   jpeg-encoded images.\n4. src/slstd.c: Added _slang_install_prefix intrinsic variable.\n5. src/slboseos.c: New file.  This file allows to define callback\n   functions that will be called at the beginning (BOS) and end (EOS) of\n   every statement executed by the interpreter.\n6. slsh/lib/stkcheck,sl: The code in this file makes use of the new\n   BOS/EOS hooks to display lines in a source file that leave\n   something on the slang stack.\n7. examples/profile.sl: This file defines a few functions that take\n   advantage of the BOS/EOS hooks to profile slang code.\n8. src/slarrfun.inc: sum and cumsum tweaked to use a \"compensated\n   summation\" technique to reduce the effect of roundoff and\n   truncation errors.\n9. src/slmisc.c: SLatoi(\"h\") was producing 0, and not an exception.\n10. src/slmath.c: On VMS, slang is compiled with IEEE support (Jouk\n    Jansen).\n11. src/slassoc.c: Rewrote the implementation to use a double hashing\n    scheme.\n\nChanges since 2.0.0 pre-release 1\n1. slsh/lib/require.sl: Protect the Features variable against multiple\n   loading.\n2. src/*.c: VMS-specific patches from Jacob (=Jouk) Jansen.\n3. src/slsearch.c: non-UTF-8 case-insensitive searches were not working.\n4. src/SLwchar*.c: SLwchar_xxxx functions will use the current locale\n   if UTF-8 has not been enabled for the interpreter.\n5. src/sldisply.c: The display of double-wide unicode\n   characters was not working properly under some conditions.\n6. src/slsmg.c: If a double wide character is being displayed, then if\n   a character is written to either of the cells occupied by the\n   double wide character, then the opposing cell will be overwritten\n   with a space.\n7. src/sltoken.c: Characters specified as 'x' where 0 !=(x&0x80) were\n   not being properly parsed.\n8. src/aclocal.m4: --without-foo was not working.\n9. src/slstrops.sl: Fixed an access error in the \"string_match\"\n   function.\n\nChanges since 2.0.0 pre-release 0\n1. src/slpath.c: slpath_dirname on VMS was failing to include the\n   closing \"]\" in its return value.\n2. src/slprep.c: A comment in a slang \"#ifdef\" directive would cause\n   an infinite loop.\n3. src/slarray.c: An integer array such as [a:b:c] where a>b and c>b was being\n   improperly computed.\n4. src/slparse.c: Function calls with missing arguments was not being\n   properly handled, e.g., func(,);\n5. src/slang.h, src/slclass.h: SLclass_set_foreach_functions added.\n6. src/slcurses.[ch]: changes added to support UTF-8 (Adrian Colley)\n7. src/Makefile.in: $(prefix)/doc changed to $(prefix)/share/doc\n   (Adrian Colley)\n8. src/sldisply.c: Missing \"break\" added to tt_sprintf (Andrew V.\n   Samoilov).\n9. src/slang.c: SLang_peek_at_stack_n and SLang_peek_at_stack1_n\n   functions added to peek deeper into the stack (Mike Noble)\n10. src/slang.c: The actual name of the local variable is used in the\n    traceback messages.\n11. src/slsig.c: Support for the signals added to the\n    interpreter.  The new intrinsics include: signal, sigsuspend,\n    sigprocmask, alarm.\n12. src/slcommon.c, slang.h: When system calls are interrupted, a set\n    of \"interrupt\" hooks may be called.  The return values of the\n    hooks determine whether or not the system call is restarted.\n13. src/slang.c: If a string has a $ suffix, then\n    variable name expansion will take place on the string, e.g., \"$CC\"$.\n14. src/sldisply.c: misc patches (optimization and buffer\n    overflow) (Andrew V. Samoilov)\n15. src/slprep.c: #<whatever> was not working (Paul Boekholt).\n16. src/sldisply.c: Applied a patch from Andriy I Pylypenko dealing\n    with tgetstr on termcap-based systems.\n17. src/slcurses.c: combining character support added to curses\n    emulation (Adrian Colley)\n18. src/slsmg.c: New function SLsmg_strwidth returns the displayable\n    width of a character string assuming it will be displayed at the\n    current position.\n19. src/slstrops.c: string_match and string_match_nth work in terms of\n    byte-offsets, not character offsets.  New intrinsics: strbytesub\n    and substrbytes that substitute a byte and return a byte sequence,\n    resp.\n20. src/slarray.c: If A is a string, the A[n] returns a UChar_Type.\n    Indexing a string using array notation uses byte-semantics.\n21. src/slang.h: Tracing messages were being queued instead of\n    processed right away.\n22. src/slcommon.c: SLutf8_enable will use nl_langinfo if available.\n23. src/slstdio.c: new intrinsic: fputslines\n24. src/slerr.c: Explicit CRs (\\r) removed from error and message\n    handling routines.\n25. modules/: smg-module.c renamed to slsmg-module.c, with similar\n    name changes to the module symbols.  Also, for each xxx-module.c, a\n    new xxx.sl was added to be installed in the slsh install-dir so\n    that slsh's \"require\" will pick up the specified module.\n\nChanges since 1.4.9\n0. There have been many changes for the version 2 release.  See NEWS\n   and UPGRADE.txt for some of the changes.  The ones listed here were\n   to appear in 1.4.10, if released.  Version 2 contains these changes\n   and many more.\n1. src/slang.c: Test for local variable stack overflow was using >\n   instead of >=.\n2. src/slarray.c: Fixed a bug that prevented 7 dim arrays from being\n   indexed.  Similar problem to #1 above: > vs >=.\n3. src/slassoc.c: The following caused a segv:\n       X = Assoc_Type[Int_Type]; X[\"foo\"] = [1:10];\n   Now a type-mismatch error will get generated.\n4. src/slerr.c,sltermin.c: Off by 1 calculations of buffer-sizes fixed\n   by Andrew V. Samoilov (andrew at email, zp, ua).\n5. src/slkeypad.c: More escape sequences courtesy of Denis Zaitsev\n   (zzz at cd-club.ru)\n6. src/slerr.c: SLang_get/set_error functions have been added to the\n   API to get and set the value of SLang_Error, resp.  The variable\n   SLang_Error will be removed from slang 2.  Applications should\n   start using these functions to ease migration to the next version.\n7. src/slstruct.c: Added SLang_push/pop/free_struct functions to\n   public API.  The objects themselves are still opaque.\n8. src/slparse.c: allow the semi-colon to be used as a field separator\n   in a structure declaration.\n9. src/slpath.c: path_sans_extname was failing when a dot was in a\n   directory part of the name.\n10. slsh/slsh.c: The names of environment variables defining the location of\n   the global slsh.rc and the slsh library files may be specified in\n   slsh/Makefile.\n11. src/sltoken.c: Local buffer overflow when the size of an\n    identifier exceeds 256 characters was found and corrected.\n12. src/slarray.c: Leak fixed: Under some circumstances, a memory leak was\n    generated when using user-defined \"typedefd\" objects in an array,\n    e.g.,\n        typedef struct {a} Foo_Type;\n\t()=[Struct_Type[1],@Foo_Type];\n13. src/slarray.c: Indexing a multi-dimensional array using a\n    mult-dimensional array was broken. Now A[I] returns an array with\n    the same dimensionality as I, regardless of the dimensionality of A.\n14. New intrinsics:\n       __is_callable     (Mike Noble mnoble at space, mit, edu)\n       __is_numeric      (Mike Noble mnoble at space, mit, edu)\n       __datatype        (John Houck houck at space, mit, edu)\n       mktime\n       symlink\n\nChanges since 1.4.8\n1. src/slarray.c: superfluous call to SLclass_add_math_op removed\n   (Michael Noble <mnoble at space.mit.edu>)\n2. src/slang.c: foreach (NULL) using(\"next\"){} foo (); caused _NARGS=1\n   in foo.\n3. src/slarrfunc.c: Fix to prevent sum(NULL) from causing a core-dump.\n4. src/slimport.c: import (module, \"\") made equivalent to\n   import(module,\"Global\");  This way, import(module, current_namespace())\n   will work when the current namespace is anonymous.\n5. src/slospath.c: Several users have requested that I add the ability\n   to define a load path and use that path when loading interpreter\n   files.  To this end, several new functions were added to the API:\n\n       char *SLpath_get_load_path (void);\n       int SLpath_set_load_path (char *path);\n         /* Get and Set the path to be searched for files */\n       int SLpath_get_path_delimiter (void);\n       SLpath_set_path_delimiter (int delimiter);\n         /* Get and set the character delimiter for search paths */\n       int SLang_load_file_verbose (int verbose);\n         /* if non-zero, display file loading messages */\n\n   New intrinsics include:\n\n       set_slang_load_path\n       get_slang_load_path\n       path_get_delimiter\n\n   These functions, nor the intrinsics have an effect on applications\n   that use SLang_load_file_hook or SLns_load_file_hook for loading\n   files.  The change should be transparant to applications that use\n   the stock load file mechanism.  The main difference is that if one\n   attempts to load a file with no extension, e.g., \"foo\", but the\n   file does not exist, then the interpreter will try to load the more\n   recent of \"foo.sl\" and \"foo.slc\".\n\n   See src/slsh.c for how the functions may be used.\n\n6. slsh/slsh.c: Updated to use the new search path code outlined\n   above.  Also, slsh is distributed with a collection of general\n   purpose slang functions, including jed's provide/require functions.\n   See slsh/README for more information.\n7. doc/tm/cslang.tm: Modified the section describing the implemetation\n   of intrinsic functions in an effort to clarify the discussion.\n8. src/slang.c: tiny memory leak resulting from peephole optimzations\n   added earlier found and fixed.\n9. src/slarrmisc.c: new intrinsic: cumsum computes the cumulative sum\n   of an array via the new SLarray_map_array function.\n10. src/modules: perl compatible regular expression (pcre) module added.\n\nChanges since 1.4.7\n1. src/sldisply.c: make sure SLtt_erase_line leaves the cursor at the\n   beginning of a line in all cases.  Previously, this happened only\n   for terminals able to delete to the end of line _and_, when\n   writing to the last line, the ability to insert a character.\n2. doc/tm/cslang.tm: In the discussion of the MAKE_CSTRUCT_FIELD\n   macro, SLANG_STRING_TYPE was used instead of SLANG_INT_TYPE\n   (mnoble at space.mit.edu).  Similarly, in the discussion of intrinsic\n   structures, My_Window was used instead of My_Win\n   dburke at head-cfa.cfa.harvard.edu.\n3. src/slang.c: peephole optimizations of 1.4.7 were conflicting with __tmp\n   optimizations.  This was causing something as simple as\n\n       define f()\n       {\n          variable a = [1.0:10.0:1];\n\t  variable b = a * 0.0;\n\t  return a;\n       }\n\n    to fail.\n4. src/slarray.c Allow ranges to index higher dimensional array.\n5. slsh/slsh.c: Updated to allow a user specified search path.  See\n   slsh/README for more info.\n\nChanges since 1.4.6\n1. src/slclass.c: Change \"-??-\" to \"- ?? -\" to avoid its\n   interpretation as a trigraph. Miquel Garriga <miquel at icmab.es>\n2. src/mkfiles/makefile.all: If compiling with mingw32, use \"cp\"\n   instead of \"copy\". Miquel Garriga <miquel at icmab.es>\n3. src/sllimits.h: Increased the size of the local variable and\n   recursion stacks on 32 bit systems.\n4. src/slarrfun.c: \"sum\", \"min\", and \"max\" intrinsic functions added.\n   Since these may conflict with application defined function, they\n   have been placed in their own module.  To get them, use\n   SLang_init_array_extra --- SLang_init_all will not pick up this\n   module.  Version 2 of the library will add these functions to the\n   main array function module.\n5. src/sltermin.c: Work around a bug in the solaris 7+8 tset program\n   which improperly sets the TERMCAP environment variable\n   (Paananen Mikko <mikkopa at cs.tut.fi>).\n6. src/slprep.c: Added support for \"#stop\" and a few other useful\n   or convenient features.  See comments at the top of slprep.c for\n   more details. (Mark Olesen <molesen at zeunastaerker.de>).\n7. src/<misc>.c: \"const\" qualifier added to several places to put\n   constant variables in rdata/text segment to be shared between\n   other processes. (\"Andrew V. Samoilov\" <samoilov at usb.zp.ua>)\n8. src/sldisply.c: If colors were defined using the \"Sf\" capability\n   instead of the \"AF\" capability, then assume those are specified in\n   BGR format instead of RGB. (Pavel Roskin <proski at gnu.org>)\n9. slsh/slsh.c: \"status\" was not declared if compiled with\n   SLSH_LIB_DIR defined. (mnoble at space.mit.edu)\n10. slsh/Makefile.g32: new file to allow slsh to be compiled with\n    mingw32.\n11. src/sldisply.c,sltermin.c: if running as setuid/setgid, then limit\n    access to the environment for such a process. <solar at openwall.com>.\n12. src/slstd.c: New intrinsic function _get_namespaces may be used to\n    get a list of currently defined namespaces.\n13. src/slstruct.c: better support for pushing and popping structures\n    from C via the SLang_push/pop_cstruct.  See doc/text/cslang.txt\n    for details.\n14. slsh/Makefile.in: install target added\n15. src/slang.c: additional peep-hole optimizations added\n16. src/*.c: fixes it enable the library to be compiled without floating\n    support support.\n\nChanges since 1.4.5\n1. doc/tm/rtl/struct.tm: Typos in documentation for set_struct_fields\n   corrected by Douglas Burke <dburke at head-cfa.harvard.edu>.\n2. src/sldisply.c: VMS specific problem: SLang_TT_Write_FD was not\n   getting initialized (Hartmut Becker <Hartmut.Becker at compaq.com>).\n3. src/slarith.c: On a 64 bit system, it was possible that Int_Type\n   objects were not getting properly converted to Double_Type.\n4. src/sltoken.c: A unitialized memory reference fixed in the\n   error handling of an empty character declaration ('').\n5. src/slstd.c: call to _SLinit_slcomplex moved to slmath.c.  This\n   means that one does not get complex number support unless math\n   support is also enabled.  (suggested by Michael Noble\n   <mnoble at head-cfa.harvard.edu>)\n6. src/slclass.c: Make sure that when registering a class using\n   SLANG_VOID_TYPE, the reserved class ids are not used.\n7. src/slmisc.c, src/sltoken.c: moved SLatoi and friends from sltoken\n   to slmisc.c.  This avoids linking in the interpreter when it is not\n   needed.\n8. doc/tm/rtl/array.tm: Documentation for the \"where\" function\n   corrected by <G.Milde at physik.tu-dresden.de>.\n9. src/slkeypad.c: support added for F11 and F12 keys\n10. src/slimport.c: Better handling of dlopen errors as suggested by\n    Michael Noble <mnoble at head-cfa.harvard.edu.\n11. src/slstruct.c: make sure field names have legal names.\n12. src/slistruct.c: SLns_add_istruct_table added.\n13. src/sltoken.c: New name-space specific functions added:\n      SLns_load_file, SLns_load_string\n    These may be used to load a file or a string into a specified\n    namespace.  Simarily, the \"eval\" and \"evalfile\" functions may now\n    be given a second argument to specify a namespace.\n14. src/slstd.c: __eqs function added to test for \"sameness\" of\n    its arguments, __class_type returns information about how an\n    object is classified, __class_id to return its class id.  See\n    examples/saveobj.sl for an example of the use of these functions.\n15. src/slarray.c: a 2-d array can nolonger be specified in-line as,\n    e.g., [[1,2],[3,4]].  This now produces a 1-d array: [1,2,3,4].\n16. src/slregexp.c: fix for case-insentive matches involving e.g.,\n    a\\{1,3\\} type regexps (Thomas Schultz <tststs at gmx.de>)\n17. src/slarray.c: Allow setting elements of pointer type arrays to\n    NULL, e.g., a[10] = NULL.\n18. src/slsignal.c: If CYGWIN, then assume posix signal handling works.\n19. src/slang.c: Do not allow an intrinsic function, variable, etc\n    table to be added twice.\n20. src/slarray.c: Added _isnull intrinsic for checking for NULL values of\n    array elements.  This is useful since something like\n    \"where(a==NULL)\" does not check the individual elements, whereas\n    \"where(_isnull(a))\" does.\n21. src/sldisply.c: typo involving the initialization of Del_Eol_Str\n    for terminals that do not have such capability.\n    (Pavel Roskin <proski at gnu.org>)\n\nChanges since 1.4.4\n1. Added QNX specific patches and fixed some typos that prevented it\n   from compiling when _SLANG_OPTIMIZE_FOR_SPEED is 0. (Tijs Michels\n   <tijs at vimec.nl>).\n2. Make sure '#ifeval expr' evaluates up to the end of a line and no\n   further.\n3. src/sldisply.c: Do not look for pad info in the graphic charset\n   pairs string.  Also, when comparing space characters, be sure to\n   take into account ACS.  (Marek Paliwoda <paliwoda at inetia.pl>)\n4. Trivial code cleanups to avoid BCC 5.x warnings.\n5. src/mkfiles/makefile.all: BCC-specific tweaks (John Skilleter\n   <John.Skilleter at pace.co.uk>)\n6. SLang_push/pop_datatype made public\n7. src/slutty.c: if tty is not initialized and an attempt is made to\n   read from the tty, set errno to EBADF.\n8. src/slkeypad.c: New function SLkp_set_getkey_function.  This may be\n   used to specify a different function to read keys.\n9. src/slcurses.c: If an invalid keysequence is entered, simply return the\n   characters of the sequence on successive getkey calls.\n10. src/slarray.c: Inline arrays of the form [1f, 0] were not working.\n11. src/sldisply.c: Make sure SLtt_get_screen size gets called by\n    SLtt_initialize.\n12. doc/tm/rtl/struct.tm: typeof in example for get_struct_field_names\n    corrected by Chris Baluta.\n13. modules/varray.c: example showing how a memory mapped array may be\n    created.  It also illustrates the free_fun callback for arrays.\n14. examples/life.sl: a S-Lang implementation of Conway's life.\n15. src/slclass.c: SLclass_dup_object function added.  Although\n    push/pop can be used to achieve a duplicated object, this function\n    makes it a little easier.\n16. src/slang.h: Prototyes involving \"unsigned char\" to represent data\n    types have been modified to use SLtype, which is typedefed to be\n    an unsigned char.  V2 will use a different size for data types.\n17. Misc tweaks to aclocal.m4, src/Makefile.in, etc to support MacOSX.\n    I have not tested it on that system.\n18. The library may now be compiled under CYGWIN using the same\n    procedure as under Unix.\n19. src/slkeypad.c: Some xterm-specific escape sequences added by\n    Denis Zaitsev <zzz at cd-club.ru>.\n\nChanges since 1.4.3\n1.  Fixed a bug that shows up on 64 bit BigEndian machines--- it\n    affected no others.\n2.  Fixed potential problem in pre-parsing binary strings.\n3.  Bug a fixed affecting only pure termcap-based systems.  It has\n    been around a while, I am surprised that it took so long to be\n    discovered.\n\nChanges since 1.4.2\n1.  If init_NAME_module_ns does not exist in a module, then try to\n    load init_NAME_module as long as the module is to be imported into\n    the Global namespace.\n2.  src/sldisply.c: allow more than 200 rows and 250 columns.  Who\n    uses such windows?\n3.  Allow Void_Type to be specified for the data-type in array_map if the\n    function returns nothing.\n4.  src/slarray.c: A statement such as [1:-1][[1:-1]] = [1:-1]; was\n    causing a core dump.\n5.  src/sldisply.c: (Unix/VMS) SLsmg/SLtt routines will write using the file\n    descriptor SLang_TT_Write_FD, which, by default, is initialized to\n    fileno(stdout).\n6.  src/slposio.c: New C API functions:\n       SLfile_get_fd returns the file descriptor associated with the\n         SLFile object.\n       SLfile_dup_fd: duplicate an SLFile object\n7.  src/slposio.c: New intrinsics: dup_fd (dup a file descriptor)\n8.  SLerrno.c: C API Function: SLerrno_set_errno.\n9.  SLerrno.c: More errno values added.\n10. Raising complex types to powers supported.\n11. slang.c: current_namespace was returning \"global\" instead of\n    \"Global\" for the global namespace.\n12. slang.c: `use_namespace(\"X\");define f();' was not placing `f' into\n    `X'.\n13. path_is_absolute fixed to return integer\n14. src/slarray.c: generate an error when an empty array is passed to\n    array_map.\n15. src/slarray.c: a=3; a[*] should return an array.\n16. Make sure setlocale(LC_NUMERIC,\"C\") gets called.\n17. slvideo.c: SLtt_set_cursor_visibility implemented for win32.\n18. slvideo.c: SLtt_get_screen_size corrected for win32 by Zusha P.\n19. configure: modified to not automatically assume that -ldl is\n    required for dlopen. In addition, molesen at zeunastaerker.de sent\n    patches for building dynamically linked library under irix.\n20. slsh/Makefile: generated by configure.\n21. modules/Makefile: generated by configure\n22. src/slimport.c: If no module path has been set, fall back on\n    $(prefix)/lib/slang/modules\n23. src/Makefile.in: DESTDIR support added by Brad <brad at comstyle.com>.\n24. src/Makefile.in: documentation is installed in $(prefix)/doc/slang\n    and no longer in $(prefix)/doc/slang/$(slang_version)\n25. sleep intrinsic can take a floating point number to sleep\n    fractional seconds.\n26. src/slang.c: fix SLang_run_hooks to accept a namespace qualifier.\n27. New modules added to the module directory: fcntl, select, termios.\n\nChanges since 1.4.1\n1.  slang.c: Under certain conditions, the continue statement was not\n    properly handled in do..while statements.  src/test/loops.sl added\n    for testing.\n2.  slparse.c: avoid potential (rare?) infinite loop when slang error occurs\n    (Stanis\u0142a Bartkowski <sb at protest.com.pl>).\n3.  slsmg.c: When SLsmg_init_smg is called, mark the display as trashed.\n4.  It is now possible to add intrinsics to their own namespace via\n    new SLns_add* functions.  Moreover, the import function now takes\n    an optional additional argument that specifies a namespace.\n5.  New namespace intrinsics: use_namespace, current_namespace\n6.  Changed inner-product algorithm to minimize the number of cache\n    misses.\n7.  sldisply.c: Kanji specific patch from Jim Chen\n    <jimc at ns.turbolinux.com.cn>.\n8.  sldisply.c: Assume that Eterm and rxvt are xterm-like (Michael\n    Jennings <mej at valinux.com>).\n9.  sldostty.c: mouse support added by Gisle Vanem <giva at bgnett.no>.\n10. slsearch.c: avoid infinite loop if search string has no length.\n11. SCO elf support added by Mike Hopkirk <hops at sco.com>.\n12. slregexp.c: regexp \\d+ was not working properly\n13. keyhash.c: typos involving USER_BLOCK keywords corrected.\n    (the use of USER_BLOCKs is discouraged).\n14. New intrinsic variable: _slang_doc_dir.  This specifies the\n    installation location of the doc files.\n15. Make sure it can compile with  SLTT_HAS_NON_BCE_SUPPORT set to 0.\n\nChanges since 1.4.0\n1.  slw32tty.c: `v' key was not being handled on win32 systems.  Also,\n    Shift-TAB will now generate ^@-TAB.\n2.  New intrinsic function: strreplace.  This is more flexible than\n    str_replace.\n3.  VMSMAKE.COM: slstring added to list of files to get compiled.\n4.  slsh/Makefile, modules/Makefile: added patch from Jim Knoble\n    <jmknoble at pobox.com> to create elf versions (make ELF=elf).\n5.  AIX IBMC patches from Andy Igoshin <ai at vsu.ru>.\n6.  autoconf/config.sub: tweaked to properly handle recent alpha\n    systems.\n7.  If compiling on an alpha, add -mieee compiler flags.\n8.  SLang_roll_stack and SLang_reverse_stack functions made public.\n9.  SLang_free_function added.  If you call SLang_pop_function, then when\n    finished, call SLang_free_function.  This does nothing in 1.X but\n    may do something in 2.x.\n10. src/slrline.c: Keybindings for ESC O A, etc added.\n11. src/slsmg.c: SLsmg_write_nstring: avoid many loops if an extremely\n    large value is passed (> 0x7FFFFFFF).\n12. src/slregexp.c made thread safe\n13. src/slsmg.c: Cursor was not always properly positioned when\n    after SLsmg_touch_lines called.\n14. If terminal does not have erase to eol capability, then use spaces.\n15. doc/tm/strops.sl: doc for strcat updated to reflect its ability to\n    concatenate N strings.\n16. Documentation updated to indicate that floating point range arrays\n    are open intervals such that [a:b] does not include b.  slarray.c\n    was modified to enforce this specification.  Previously, whether\n    or not b was included in the interval was indeterminate.\n17. src/slsmg.c: bug involving SLsmg_set_screen_start fixed.\n18. src/slparse.c: parser was failing to catch misplaced `}'.\n\nChanges since 1.3.10\n1.  If a floating point exception occurs and the OS allows the library\n    to handle it without forcing a longjmp, then SL_FLOATING_EXCEPTION\n    will get generated instead of SL_INTRINSIC_ERROR.  Note: Linux\n    provides no way to handle floating point exceptions without\n    forcing a longjmp.  In my opinion, this is a flaw.\n2.  SLang_pop_double was returning the wrong value for short and\n    character types.\n3.  New intrinsic: is_struct_type(X) ==> non-zero is X is a struct.\n4.  typecast operation from user defined type to Struct_Type added.\n5.  slkeypad.c: DOS/Windows DELETE_KEY definition added (Doug Kaufman\n    <dkaufman at rahul.net>)\n6.  slposdir.c: Do not depend upon the existence of rmdir on VMS\n    systems.\n7.  slang.c: abs, sign, mul2, chs, sqr were not being treated as\n    function calls.\n8.  sldisply.c:SLtt_cls:  If the terminal is a color terminal but\n    being used as a black and white terminal, then reset colors before\n    clearing.\n9.  path_sans_extname intrinsic added.\n10. slimport.c: If module defines deinit_NAME, will be be called prior\n    to unloading the module. (Ulrich Dessauer <des at gmx.de>)\n\nChanges since 1.3.9\n0.  typedef unsigned short SLsmg_Char_Type added to slang.h.\n    Applications that access SLsmg functions read/write_raw and\n    SLsmg_char_at should use SLsmg_Char_Type unstead of unsigned short\n    because this will be changed to unsigned long in version 2.0.\n\n1.  Documentation patches from Vlad Harchev <hvv at hippo.ru> added.\n2.  slstring.c:  offsetof(SLstring,bytes) -->\n    offsetof(SLstring,bytes[0]) to avoid compiler warning on some\n    systems.\n3.  slcmplex.c: an int was used where a double should have beed used.\n4.  egcs g++ was optimizing slang.c:SLclass_push_ptr_obj away because\n    it was declared as inline.  In my opinion, this is another g++ bug.\n5. sscanf intrinsic added.  See docs.\n6. SLmake_lut rewritten to correct incorrect handling of ranges with a\n   hyphen at the end.\n7. Small bug involving non-BCE terminals in SLsmg_set_color_in_region\n   fixed.\n8. Functions SLcomplex_asinh/acosh/atanh implemented.\n9. install-elf will nolonger install .h files twice.\n10. @Struct_Type may be used to create a struct.\n12. X[i]++, X[i]-=Y, etc implemented.\n13. Much of slw32tty.c rewritten to fix several bugs in the win32 tty\n    support.  In addition, if SLgetkey_map_to_ansi(1) has been called,\n    then function and arrow keys will produce escape sequences that\n    allow one to distinguish alt, ctrl, and shift function keys.\n14. OS/2 specific typo in slposdir.c corrected (Eddie Penninkhof\n    <wizball at xs4all.nl>).\n15. slang.c:add_slang_function: On the very rare occasion that this\n    function failed, memory would get freed twice.\n\nChanges since 1.3.8\n1. Color was not enabled on VMS.\n2. If MAKE_INTRINSIC was used to declare a function which takes\n   arguments, then a typecast error would result when the function was\n   called.  New programs should not use MAKE_INTRINSIC since it\n   bypasses argument type-checking.\n3. src/sl-feat.h: SLTT_XTERM_ALWAYS_BCE variable added to force the\n   assumption of the bce (background-color-erase) capability of xterm.\n   The default is 0, which means to accept the terminfo setting.\n   To force it to 1 during run-time, set the COLORTERM_BCE environment\n   variable.  This is useful when using, e.g., rxvt to login to a\n   solaris system where the terminfo file will probably not indicate\n   bce.\n4. SLw32tty.c:SLang_init_tty: Open CONIN$ instead of using\n   GetStdHandle.  This is necessary if stdin has been redirected.\n5. SLposdir.c: Stat structure contains new field `st_opt_attrs' that\n   may be used to contain system specific information that `struct\n   stat' does not provide.  In particular, under win32, this field\n   contains the file attributes, e.g., whether or not a file is\n   hidden.\n6. Appropriate typecasts added to avoid warnings on systems that do not\n   support `void *'.\n7. Characters in the range 128-255 are allowed in identifiers.\n8. Correction to the documentation for SLang_init_tty (Ricard Sierra\n   <irebulle at nexo.es>).\n9. SLANG_END_*_TABLE macros added to quiet silly egcs compiler warnings.\n10. typo in sltime.c caused it not to compile under Ultrix.\n11. Speed improvement of binary operations involving arrays,\n    particularly when used in conjunction with the __tmp function.\n12. traceback messages include the filename containing the function\n13. File local intrinsic variable `_auto_declare' added.  If non-zero,\n    any undefined global variable will be given static scope.\n14. __uninitialize intrinsic function added.\n15. listdir was returning NULL on empty directories.  It has been\n    changed to return String_Type[0].  It will return NULL upon error.\n16. slang.h: if __unix is defined, then also define __unix__ (Albert\n    Chin-A-Young <china at thewrittenword.com>).\n17. foreach using extended to File_Type objects.  See documentation.\n18. Tweak to the inner-product operator such that if A is a vector,\n    and B is a 2-d matrix, then A will be regarded as a 2-d matrix\n    with 1 column.\n\nChanges since 1.3.7\n0. configure script updated to autoconf 2.13.  If /usr/include/slang.h\n   exists, then the default prefix will be set to /usr.\n1. Compile error fixed if _SLANG_HAS_DEBUG_CODE is 0.\n2. Bug fix involving typecast(Array_Type, Any_Type).\n3. __IBMC__ patches from Eddie Penninkhof <wizball at xs4all.nl>.\n4. If A = Assoc_Type[] (Any_Type array), then A[x] automatically\n   dereferences the Any_Type object.\n5. Bug fixed involving Assoc_Type optimization cache.\n6. Tweaks to SLtt_smart_puts for improved performace.\n7. array_map modifed such that the first array in its argument list\n   controls the number of elements in the output array.  This is a\n   backward compatible change and makes the function more flexible.\n8. Additional tweaks to speedup array inary functions if\n   _SLANG_OPTIMIZE_FOR_SPEED > 1.\n9. Patch from Thomas Henlich <henlich at mmers1.mw.tu-dresden.de> fixing\n   a problem with the `SLang_define_case' function, which allows\n   customization of the upper/lower case tables.\n10. strtrans and str_delete_chars intrinsic functions added.\n11. tweaks to interpreter for some additional speed.\n\nChanges since 1.3.6\n1. Added a modified version of a patch from Martynas Kunigelis\n   <martynas at diskena.dammit.lt> to allow writes to the lower left\n   corner.\n2. SIZEOF_LONG changed to 4 for VMS alpha systems (Jouk Jansen\n   <joukj at hrem.stm.tudelft.nl>).\n3. MSC patches from gustav at morpheus.demon.co.uk (Paul Moore).  He also\n   contributed code for listdir with MSC.\n4. SLsmg.c: Background color erase tweaks for terminals that lack this\n   capability.\n5. Fixed a NULL pointer dereference when doing Struct_Type[2][0].\n6. Added slsh/scripts/ls and slsh/scripts/badlinks.  `ls' is designed\n   for non-Unix systems and `badlinks' finds all symbolic links in\n   specified directories that point to non-existent files.\n7. SLang_Version_String and intrinsic variable _slang_version_string\n   added.\n8. stat_file modified under win32 such that a trailing `\\' is stripped\n   if present.\n9. stat_is intrinsic modified to return a character instead of an\n   integer.\n10. The matrix-multiplication operator `#' now performs inner-products\n    on arrays, e.g.,  if A and B arrays:\n         A = A_i..jk\n\t B = B_kl..m\n    Then, (A#B)_i..jl..m = A_i..jk B_kl..m where k is summed over.\n    This means that `#' is a matrix multiplication operator for 2-d\n    arrays, and acts as a dot-product operator for 1-d arrays.\n    In the process, it has been extended to complex numbers.\n\n11. _reshape intrinsic function added.  Unlike `reshape', this\n    function creates a new array and returns it.\n12. Array indexing via characters works again, e.g., A['a'].\n\nChanges since 1.2.2\n0. New assignment operators: *= /= &= |=\n   The addition of these operators meant that some of the internal\n   byte-codes had to be modified.  This change should only cause\n   problems with byte-compiled or preprocessed .sl files.  As far as I\n   know, only the JED editors uses this feature.  So, after upgrading\n   the library, and before running JED, do the equivalent of\n\n        rm $JED_ROOT/lib/*.slc\n\n   That is, delete the byte-compiled .slc files.\n\n1. Now the language supports `!if ... else' statements.\n2. New intrinsics:\n\n       __is_initialized:  This may be used to see whether or\n          not a variable is initialized, e.g, __is_initialized (&variable);\n       __get_reference: Returns a reference to an object with a\n          specified name.\n       rmdir, rename, remove (slfile.c): these return 0 upon success, -1 upon\n          failure and set errno\n       getpid, getgid, getppid (slunix.c)\n       _typeof: This is similar to `typeof' except in the case of\n          arrays where it returns the data type of the array\n       __pop_args, __push_args: see documentation\n       fseek, ftell, and symbolic constants SEEK_END, SEEK_CUR, SEEK_SET\n       sleep\n       usage\n\n3. `Conj' function added to get the complex conjugate\n4. New array module that implementes additional array functions, e.g.,\n   transpose, matrix multiplication, etc...  Use `SLang_init_array' to\n   initialize.\n5. An array such as [[1,2,3],[4,5,6]] is interpreted as a 2-row\n   3-column array.\n6. Amiga patches from J\u00f6rg Strohmayer <j_s at gmx.de>.\n7. New table types:\n\n       SLang_IConstant_Type\n       SLang_DConstant_Type\n\n   These are useful for defining symbolic constants.  See slmath.c and\n   slfile.c for examples of their use.\n\n8. A new pseudo-function: __tmp\n   This `function' takes a single argument, a variable, and returns\n   the value of the variable, and then undefines the variable.  For\n   example,\n\n        variable x = 3;\n\tvariable y;\n\ty = __tmp(x);\n\n   will result in `y' having a value of `3' and `x' will be undefined.\n   The purpose of this pseudo-function is to free any memory\n   associated with a variable if that variable is going to be\n   re-assigned.  For example, consider:\n\n        variable x = [1:10:0.1];\n        x = 3*x^2 + 2;\n\n    At the time of the re-assignment of `x' in the last statement, two\n    arrays will exist.  However,\n\n        x = 3*__tmp(x)^2 + 2;\n\n    results in only one array at the time of the assignment, because\n    the original array associated with `x' will have been deleted.  This\n    function is a pseudo-function because a syntax error results if\n    used like\n\n        __tmp (sin(x));\n\n9.  New low-level push/pop functions that are designed specifically\n    for use in constructing the push/pop methods of application\n    defined data types.  These functions have names of the form:\n\n        SLclass_push_*_obj\n        SLclass_pop_*_obj\n\n    where * represents int, long, char, short, ptr, double, float.\n    See sltypes.c to see how they are used by, e.g., SLANG_INT_TYPE.\n\n10. New module import facility.  See modules subdirectory for\n    examples.  To enable this, use\n\n        SLang_init_module\n\n    in you application.  Modules will be searched in the following order\n\n        1.  Along the path specified by the `set_import_module_path'\n\t    function, or by the C functiion SLang_set_module_load_path.\n\t2.  Along the path given by the SLANG_MODULE_PATH environment\n\t    variable.\n\t3.  Along a system dependent path, e.g., LD_LIBRARY_PATH\n        4.  In the current directory.\n\n    New interpreter intrinsics include:\n\n        import (String_Type MODULE_NAME);\n\tset_import_module_path (String_Type PATH);\n\tString_Type get_import_module_path ();\n\n11.  New integer and floating point types added to the language.  Now\n     all basic C signed and unsigned integer types are supported:\n\n       C bindings             S-Lang bindings\n       ---------------------------------------\n       SLANG_CHAR_TYPE        Char_Type\n       SLANG_UCHAR_TYPE       UChar_Type\n       SLANG_SHORT_TYPE       Short_Type\n       SLANG_USHORT_TYPE      UShort_Type\n       SLANG_INT_TYPE         Int_Type\n       SLANG_UINT_TYPE        UInt_Type\n       SLANG_LONG_TYPE        Long_Type\n       SLANG_ULONG_TYPE       ULong_Type\n       SLANG_FLOAT_TYPE       Float_Type\n       SLANG_DOUBLE_TYPE      Double_Type\n\n    For example, `Long_Type[10]' creates an array of 10 longs.\n\n12. New intrinsic: set_struct_field.  See function reference for more\n    info.\n\n----- snapshot slang1.3_981030 made available -----\n\n13. Type synonyms added:\n\n        Int16_Type, UInt16_Type   (16 bit (un)signed integer)\n        Int32_Type, UInt32_Type   (32 bit (un)signed integer)\n        Int64_Type, UInt64_Type   (64 bit (un)signed integer)\n        Float32_Type              (32 bit float)\n        Float64_Type              (64 bit float)\n\n    Not all systems support 64 bit integers.  These synonyms are\n    useful when one needs integers and floats of a definite size.\n\n14. array_sort changed to use qsort.  The main reason for this is that\n    the previous sorting method was derived from a numerical recipes\n    merge sort.\n\n15. New namespace manipulation functions available.  When a function\n    or variable is declared as `static', it is placed in the private\n    namespace associated with the object being parsed (a file).  By\n    default, there is no way of getting at that function or variable\n    from outside the the file.  However, the private namespace may be\n    given a name via the `implements' function:\n\n         implements (\"A\");\n\n    Then the private variables and functions of the namespace A may be\n    accessed via A->variable_name or A->function_name.  The default\n    global namespace is called `Global'.  For example, the intrinsic\n    function `message' is defined in the global namespace.  One may\n    use either of the following forms to access it:\n\n         message (\"hello\");\n\t Global->message (\"hello\");\n\n----- snapshot slang1.3_981104 made available -----\n\n16. New intrinsics:\n\n        strtok  (See documentation)\n\tlength  (Get the length of an object)\n\n17. New data type added: Any_Type.  An array of such a type is capable\n    of holding any object, e.g.,\n\n         a = Any_Type [3];\n\t a[0] = 1; a[1] = \"string\"; a[2] = (1 + 2i);\n\n    Dereferencing an Any_Type object returns the actual object.  That\n    is, @a[1] produces \"string\".\n\n18. Associative arrays added.  See documentation.\n19. New `foreach' statement.  See the section on `foreach' in\n    doc/text/slang.txt as well as the examples in examples/assoc.sl\n    and src/calc.sl.\n20. Oops.  sign function was broken.\n21. array_sort modified to also accept &function_name.\n\n----- snapshot slang1.3_981116 made available (1.3.4) -----\n\n22. Before, it was necessary for the aplication to to call\n    SLang_init_slassoc to enable associative array support.  This is\n    nolonger necessary if associative array support is enabled in\n    sl-feat.h.\n\n23. Examples in the documentation modified to use foreach whenever a\n    simplification occurred.\n\n24. Max screen size for 32 bit systems inclreased to 256 rows.\n\n25. `private' keyword added to prevent access to an object via the\n    namespace.  This works exactly like `static' except that `static'\n    objects may be accessed via the namespace.\n\n26. structure access methods now available for application defined\n    types (cl_sput, cl_sget).  Also, note that array access methods\n    are also available.  See slassoc.c for examples.\n\n27. If x is a string, then x[[a:b]] produces a string composed of the\n    characters x[a], ... x[b].\n\n29. New intrinsics:\n\n       listdir:  This returns the filenames in a specified\n                 directory as an array of strings.\n\n30. Source code for intrinsic functions reorganized in a more coherent\n    fashion.  In particular, SLang_init_slfile and SLang_init_slunix\n    are obsolete (though still available) and applications should call\n    a combination of the new functions:\n\n          SLang_init_stdio()   /* fgets, fopen, ... */\n          SLang_init_posix_process () /* getpid, kill, ... */\n          SLang_init_posix_dir () /* mkdir, stat, ... */\n\n    Note that `unix_kill' has been replaced by `kill'.  So, if you use\n    unix_kill in your application, change it to `kill'.\n\n31. It is now safe to redefine an object while executing the object,\n    e.g., this is now ok:\n\n       define f(x) { eval (\"define f(x) { return x; }\"); }\n\n32. Binary strings added.  This means that it is now possible to use\n    strings with embedded null characters.  Too fully exploit this new\n    feature, `fread' and `fwrite' functions were added to the stdio\n    module.  In addition `pack', `unpack', `sizeof_pack',\n    `pad_pack_format' were added for converting between binary strings\n    and other data types.  See Stdio chapter of the documentation for\n    more information.\n\n33. New structure intrinsic: set_struct_fields.  This is useful for\n    setting the fields of a structure without doing each one\n    individually.\n\n34. Interpreter now understands __FILE__ and __LINE__ as referring to\n    the file name and line number of the object being parsed.\n\n35. New intrinsic: array_map.  This applies a function to each element\n    of an array and returns the result as an array.\n\n36. The documentation for the intrinsic functions has been updated and\n    organized into a more coherent form.\n\n37. New interface to C structures.  See the documentation.\n\n38. Modifications to the interpreter integer types so that short and\n    int are equivalent whenever sizeof(short)==sizeof(int).  Ditto for\n    int and long.  This reduces the code size.\n\n39. NULL is equivalent to 0 in while and if statements, e.g.,\n\n       x = NULL;\n       if (x) { never_executed (); }\n       while (x) { never_executed (); }\n\n40. `public' made a keyword to for symmetry with `private' and\n    `static', e.g.,\n\n         public define a_public_function ();\n\t public variable a_public_variable;\n\n41. semantics of `implements' modified such that the default variable\n    and function declarations are `static', i.e.,\n\n        define xxx ();  % ==> public function\n\timplements (\"foo\");\n\tdefine yyy ();  % ==> static function\n\n42. Patch from Martynas Kunigelis <kunimart at pit.ktu.lt> adding more\n    line and symbol drawing characters.  Also a patch from\n    k-yosino at inatori.netsweb.ne.jp forcing a flush when disabling\n    use of the terminal's status line.\n\n--- Version 1.3.5 released ---\n\n43. Corrected the name of SLang_(sg)et_array_element to be consistent\n    with the documentation.\n\n44. Fixed a bug involving orelse and andelse statements when\n    _debug_info is non-zero.\n\n45. The _apropos intrinsic modified to work with namespaces.  In fact,\n    it now returns an array of matches, or if called with out a\n    namespace argument, it returns values to the stack for backward\n    compatibility.\n\n46. strchop and strchopr functions modified to return arrays. (this\n    changes was actually made in 1.3.5).\n\n47. Semantics of strcompress modified to be more useful.  The new\n    semantics are probably more natural and should pose no\n    compatibility problems.\n\n48. The `*' operator may be used in array index expressions and is\n    equivalent to `[:]', e.g., a[*,1] means all elements in column 1\n    of the 2d array.\n\n49. New intrinsics to convert bstrings <--> arrays:\n\n        bstring_to_array\n\tarray_to_bstring\n\n50. New timing intrinsics: tic(); toc(); times ();  Also, unix_ctime\n    renamed to ctime (This change occurred in 1.3.5).\n\n51. strcat modified to accept more than 2 arguments:\n\n       strcat (\"a\", \"b\", ..., \"c\") ==> \"ab...c\";\n\n52. %S in format specifiers will convert the object to its string\n    representation and use it as %s.\n\n53. strtok defaults to using \" \\t\\r\\n\\f\" if called with one argument.\n\n54. fgetslines takes optional second argument that specifies the\n    number of lines to read.\n\n55. If typeof(A) is IStruct_Type, and the corresponding C pointer is\n    NULL, then pushing A will result in pushing NULL.  This allows A\n    to be compared to NULL.\n\n56. More optimization of arithmetic operations to improve speed.  My\n    tests indicate that the resulting code involving arithmetic\n    operations are about twice as fast as python (1.5) and about 20%\n    faster than perl 5.\n\n57. Patches from Andreas Kraft <kraft at fokus.gmd.de> disabling the\n    listdir intrinsic function if compiled with MSC.  Apparantly, the\n    MSC compiler does not support posix functions such as opendir\n    (although other vendors, e.g, Borland, have no problem with this).\n\n58. `array_sort' intrinsic may be used without a comparison function.\n    See docs.\n\n59. Spelling errors in slang.tm corrected by Uichi Katsuta\n    <katsuta at cced.mt.nec.co.jp> (Thanks!).\n\n60. Default install prefix changed from /usr to /usr/local\n\n61. Changes made to SLtt/SLsmg code so that when a color definition is\n    made via, e.g., SLtt_set_color, then the SLsmg interface will be\n    get automatcally notified so that the next SLsmg_refresh will\n    produce the correct colors.  In addition, SLsmg_touch_screen added.\n\n62. It is now possible to evaluate S-Lang expressions with the\n    S-Lang preprocessor e.g.,\n\n        #ifeval (_slang_version > 9900) || (x == 1)\n\n63. sl-feat.h: Patch from J\u00f6rg Strohmayer <j_s at gmx.de> to define\n    _SLANG_MAP_VTXX_8BIT=1 for AMIGA.\n\n64. New intrinsics:\n      strjoin.  This joins elements of a string array.\n      localtime, gmtime\n\n65. New SLsmg function: SLsmg_reinit_smg.  Instead of calling\n    SLsmg_reset_smg followed immediately by SLsmg_init_smg when\n    processing SIGWINCH signals, call SLsmg_init_smg instead.  This\n    will allow SLsmg based code to properly redraw themselves when\n    running in a SunOS cmdtool window by working around a bug in\n    cmdtool.\n\n===========================================================================\n\nChanges since 1.2.1\n 1. slcmd.c was not parsing characters in single quotes correctly,\n    e.g., 'a'.\n\nChanges since 1.2.0\n 1. Oops.  A NULL pointer could be referenced in slcmd.c.\n\nChanges since 1.0.3 beta\n\n-1. The SLKeyMap_List_Type structure has been modified to allow the\n    name of the keymap be be an arbitrary length.  Unfortunately, this\n    change breaks backward compatibility.  So, if you have programs\n                                               ^^^^^^^^^^^^^^^^^^^^\n    that are dynamically linked to previous BETA versions of 1.0, you\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    will have to recompile those applications!!!\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n0. The variable SLsmg_Newline_Moves has been renamed to\n   SLsmg_Newline_Behavior with the following interpretation:\n#define SLSMG_NEWLINE_IGNORED\t0      /* default */\n#define SLSMG_NEWLINE_MOVES\t1      /* moves to next line, column 0 */\n#define SLSMG_NEWLINE_SCROLLS\t2      /* moves but scrolls at bottom of screen */\n#define SLSMG_NEWLINE_PRINTABLE\t3      /* prints as ^J */\n\n1. Added patches from Joao Luis Fonseca <joaolf at centroin.com.br>\n   to src/mkfiles/makefile.all and a necessary OS/2 specific\n   declaration to slvideo.c.  I also added the Watcom patches from\n   Bill McCarthy <WJMc at pobox.com> to makefile.all.\n2. The terminfo code is now aware of the complete set of terminfo\n   definitions.  However, the screen management routines support a\n   small subset. (Eric W. Biederman <ebiederm+eric at npwt.net>).\n3. Improvements to the SLsmg scrolling alogorithm.\n4. SLang_process_keystring and SLang_make_keystring now return NULL upon\n   failure.\n5. SLcomplex_sqrt branch cut modifed to be consistent with FORTRAN.\n6. If the system supports vsnprintf and snprintf, they are used.  The\n   assumption is that they return EOF upon failure.  My linux man page\n   for these functions have conflicting statements regarding this.\n\n7. Simplified handling of memory managed types.  Now it is possible to\n   pass the managed object directly to the intrinsic function.  See\n   slfile.c for an explicit example of this technique.  Similarly,\n   references may also be passed and the function SLang_assign_to_ref\n   may be used to assign values to the referenced object.  This is\n   also illustrated in slfile.c.\n\n8. QNX specific tweak to slfile.c from Pavanas Abludo Incusus\n   <pavanas at ccia.com>.\n\n9. Fixed a problem where, e.g.,\n\n        x = Double_Type [7,8,9];\n\ty = x[0,[:],[:]];\n\n   returned y = Double_Type[8*9] instead of the more intuitive result\n   Double_Type[8,9];\n\n10. SLcmd_Cmd_Table_Type structure changed to permit an unlimited\n    number of arguments.  The changed should be backward compatible\n    except that a recompilation of the application will be necessary.\n11. New SLsmg function: SLsmg_set_color_in_region may be used to set\n    the color of a specified region.  See demo/smgtest.c for an\n    example of how this is used.  Another use would be to draw shadows\n    around a box.\n12. OS2 ICC patches from Eddie Penninkhof <eddie.penninkhof at tip.nl>.\n13. Grammar tweaked to make the pow (^) operator postfix-unary.  This\n    makes more sense mathematically so that:\n\n        a^b^c ==> a^(b^c);\n\t-(a)^b ==> -(a^b);\n\n14. New struct specific intrinsics:\n\n       get_struct_field_names\n       get_struct_field_value\n       _push_struct_field_values\n\n    See function reference for more information on these.\n\nChanges since 1.0.2 beta\n0. SLtt_init_video, SLtt_reset_video, SLsmg_resume_smg,\n   SLsmg_suspend_smg have been modifed to return 0 upon success, or -1\n   upon error.\n1. Configure script modified to report slang version as 1.0.x instead\n   of 1.0.0x.\n2. Bug fix involving automatic detection of color (Unix)\n3. slvideo.c bug fixed (WIN32, Thanks Chin Huang <cthuang at vex.net>)\n4. Slsignal modified so that fork is not used for CYGWIN32, suggested\n   by vischne at ibm.net.\n5. Solaris ELF patches integrated into configure.in.  Now ELF support\n   is available for Linux and Solaris.  Thanks Jan Hlavacek\n   <lahvak at math.ohio-state.edu>.\n6. The library now works with MING32 and should work with CYGWIN as\n   well.  See INSTALL.pc and src/mkfiles/README for more information.\n   Do NOT use the configure script under these environments.\n7. A new IBMPC_SYSTEM function added that affects WIN32, MSDOS, and\n   OS/2 systems:\n\n         SLang_getkey_map_to_ansi (int enable);\n\n   If `enable' is non-zero, arrow and function keys will be mapped to\n   the ansi equivalents.\n8. The WIN32 terminal support has been modified to be more consistent with\n   the other platforms.  In particular, mouse button press reporting\n   has been added (SLtt_set_mouse_mode), and bright color support\n   appears to have been fixed.  Note: For MINGW32 and CYGWIN32, use\n   src/mkfiles/makefile.all.  Do not use the Unix configure script\n   because WIN32 is NOT Unix.\n9. Several changes to slvideo.c that deals with the proper use of the\n   scroll region for DOS/Windows type systems.\n10. demo/smgtest.c has been enhanced.\n11. Some cleanup performed to src/slprepr.c\n12. WIN32 and WIN16 preprocessing symbols are defined when appropriate.\n\nChanges since 1.0.1 beta\n1. More VMS patches.  Thanks Andy.\n\nChanges since 1.0.0 beta\n1. Fixed a bug in the automatic detection of color terminal\n2. Patches to get it to compile on OS2 and VMS\n3. Replaced \\r\\n in slarray.c with \\n\n\nChanges since 0.99-38\n0. Many, many changes to the interpreter.  See documentation.\n\n1. SLang_free_intrinsic_user_object shortened via define on VMS.\n2. Make sure slang.h does not defined REAL_UNIX_SYSTEM on OS/2.\n3. New search paths for termin directories include $HOME/.terminfo and\n   /usr/share/terminfo.\n4. SLsystem function added.  This is a replacement for `system'.  It\n   implements POSIX semantics for POSIX systems.  Although Linux\n   claims to be a POSIX system, it's `system' routine is broken.\n5. color names color0 ... color7, brightcolor0, ... brightcolor7\n   added for Unix and VMS systems.\n\nChanges since 0.99-37\n1. SLang_input_pending returns -1 if Ctrl-Break pressed (DOS specific).\n2. SLtty_VMS_Ctrl_Y_Hook added for Ctrl-Y trapping.  Keep in mind that\n   this is called from an AST.\n3. Documentation updates\n4. Fixed bug dealing with keymaps with escape sequences involving\n   characters with the high bit set.\n5. slkeypad code ported to DOS\n6. SLsmg_write_raw and SLsmg_read_raw functions added.\n7. Compilation error under QNX fixed.\n9. Small change involving SLang_flush_input.\n\nChanges since 0.99-36\n1. Oops fixed a bug in alternate character set handling when\n   SLtt_Use_Blink_For_ACS is set.  This bug only affected DOSEMU.\n2. slvideo.c modification that affects DJGPP version of library.  Now\n   the screen is saved and restored.\n3. Updates to slcurses.c by Michael Elkins.\n4. If a color called `default' is specified, the escape sequence to\n   set the default color will be sent.  Be careful, not all terminals\n   support this feature.  If your terminal supports it, e.g., rxvt,\n   then using\n\n        setenv COLORFGBG default\n\n   is a good choice.\n\nChanges since 0.99-35\n1. Fixed alt char set bug introduced in 0.99-35.\n2. New intrinsic: _stk_reverse\n3. New demos: keypad, smgtest, pager\n4. The environment variable COLORFGBG may be used to specify default\n   foreground background colors, e.g., in csh use:\n\n        setenv COLORFGBG   \"white;black\"\n\n   to specify white on black as the default colors.  This also means\n   that a color name of NULL or the empty string \"\" will get mapped to\n   the default color.\n5. Improved curses emulation provided by Michael Elkins\n   (me at muddcs.cs.hmc.edu).\n6. Small bug fix to SLang_flush_output provided by Balakrishnan k\n   <MDSAAA27 at giasmd01.vsnl.net.in>.\n7. Updated some documentation in doc/cslang.tex (Gasp).\n8. Update vmsmake.com file provided by Martin P.J. Zinser\n   (m.zinser at gsi.de).\n\nChanges since 0.99-34\n0. OS/2 video problem solved by Rob Biggar (rb14 at cornell.edu).\n\n1. The way the interpreter internally handles strings has changed.\n   This should not affect programs which utilize the library.  Now all\n   strings returned by the function SLang_pop_string should be freed\n   after use.  The SLang_pop_string function will always set the value\n   of the second parameter passed to it to a non-zero value.  For this\n   reason, programs should use the new function SLpop_string and\n   always free the string returned by it after use.\n\n2. If SL_RLINE_NO_ECHO bit is set in the readline structure, the\n   user response will not be echoed.\n\n3. If terminal is xterm, the TERMCAP environment variable will be\n   ignored.  This change was necessary because of the braindead\n   TERMCAP setting created by the latest version xterm.\n\n4. Some of the keymap routines were re-coded.  Now it is possible to\n   have lowercase characters as part of the prefix character sequence.\n\n5. New modules.  See demo/pager.c for information.  See also the slrn\n   source code for a more sophisticated use.\n\n      SLscroll: may be useful for routines that deal with displaying\n                linked lists of lines.\n      SLsignal: POSIX signal interface for programs that use SLsmg and\n                SLtt modules.  doc/signal.txt may also prove useful.\n      SLkeypad: Simplified interface to SLang keymaps.\n      SLerrno:  System independ errno routines\n\nChanges since 0.99-33\n1. A couple of interpreter bug fixes.\n\n2. Some macros, e.g., MEMSET, removed from slang.h.  I do not feel\n   that they belong there and it is unlikely that they are used by\n   others.  I made them avalable in the file src/jdmacros.h for anyone\n   whose code depends on them.\n\n3. The functions jed_mem??? have been renamed to SLmem???.\n\n4. New intrinsic: _obj_type returns type information about object on top\n   of stack.\n\nChanges since 0.99-32\n1. appropriate header files added for VMS\n2. Oops.  0.99-32 introduced a bug positioning cursor. :(\n\nChanges since 0.99-31\n1. Simple minded curses emulation added.  This should help those migrating\n   from curses.  See slang/src/curses/*.c for sample curses demo programs\n   that the SLsmg routines can handle.  See also slang/src/slcurses.c for\n   some wrapper functions.\n2. Changed <config.h> to \"config.h\" in all source files.\n3. If system lacks terminfo directories, it is compiled with termcap\n   support.  This generalizes and replaces the test for NeXT.\n4. New functions for slang/src/sldisply.c:\n\n    void SLtt_get_screen_size (void);\n    SLtt_Char_Type SLtt_get_color_object (int);\n    void SLtt_set_color_fgbg (int, SLtt_Char_Type, SLtt_Char_Type);\n\n   The first function attempts to deduce the correct values of\n   SLtt_Screen_Rows and SLtt_Screen_Cols.  This function is called by\n   sltt_get_terminfo.\n\n   New constants such as SLSMG_COLOR_BLACK, SLSMG_COLOR_RED, ... have been\n   added to slang.h to facilitate the use of SLtt_set_color_fgbg.\n\n5. Improved error messages\n6. ELF support.  Do: make elf; make install-elf\n\nChanges since 0.99.30\n\n1. Small bug fixed that affects 64 bit machines with a certain byte\n   ordering.\n2. slutty.c: _POSIX_VDISABLE is used if defined.\n\nChanges since 0.99.29\n\n0. BIG change in handling keymaps.  Specifically, this change effects the\n   change of the `f' field of the SLang_Key_Type structure.  Before, this\n   was VOID_STAR, now it is a union.  The new change is much more portable.\n   In addition, the function `SLang_define_key1' has been removed and\n   replaced by `SLkm_define_key'.  See src/slrline.c for the use of this new\n   interface.  For a short time, the old interface will be available if the\n   preprocessor symbol `SLKEYMAP_OBSOLETE' is defined when slang is compiled.\n   See jed and slrn source for more examples.\n\n1. SLang_getkey now reads from /dev/tty (unix).\n2. If the first argument to SLang_init_tty is -1, the current value of the\n   interrupt character will not be changed (unix).\n3. New intrinsic: time\nChanges since 0.99.28\n1.  Oops! Horrible bug in src/slmemcmp fixed.\n2.  slvideo: init_video modified to be more consistent with VMS/Unix routine.\n\nChanges since 0.99.27\n1.  More changes to the configure script\n2.  It looks like hpterm support is in place.  This terminal has a glitch\n    that prevents efficient screen updating.\n3.  New SLsmg function:\n\n     void SLsmg_write_color_chars (unsigned short *s, unsigned int len)\n\n    This function may be used to write a string of characters with\n    attributes.\n\nChanges since 0.99.26\n1.  Slang now uses a configure script under Unix to configure itself.\n2.  New intrinsic functions include _stk_roll, strchop, strchopr.\n3.  Terminals which require an escape sequence to make their arrow keys work\n    are now sent the escape sequence.\n\nChanges since 0.99.25\n1.  New SLsmg variables:\n     SLsmg_Newline_Moves\n     SLsmg_Backspace_Moves\n    These variables control the interpretation of newline and backspace\n    characters in smg.\n\nChanges since 0.99.24\n1.  SLSMG_RTEE_CHAR, etc... added to OS/2 part of slang.h\n2.  Small fix for aix-term\n\nChanges since 0.99.23\n0.  The makefile for unix has been completely re-written.\n1.  Some problems dealing with certain color terminals have been resolved.\n2.  `g' generic type added to SLcmd.\n\nChanges since 0.99.22\n0.  The Macro `VOID' has been removed.  The whole point of this macro was to\n    mimick `void *' declarations for compilers that did not support such a\n    construct.  Instead of `VOID *', slang.h now defines `VOID_STAR' and all\n    `VOID *' declarations have been renamed to `VOID_STAR'.\n\n    If you use the VOID macro in your application, you have two choices:\n\n       1.  Rename all occurances of VOID * to VOID_STAR\n       2.  Add: #define VOID void somewhere appropriate.\n\n1.  \\< and \\> regular expressions added.\n\nChanges since 0.99.21\n1.  Oops.  I added too much linux stuff (see 3 below).  Some of it backed\n    out to Linux only.\n\nChanges since 0.99.20\n1.  Problem on some VMS systems which lack prototype for atof fixed.\n2.  New function: SLtt_set_mouse_mode.  This is used to turn on/off mouse\n    reporting on Unix and VMS systems.\n3.  The terminal type `linux' is now recognized by the SLtt interface---\n    even if there is no termcap/terminfo entry for it.\n\nChanges since 0.99.19\n1.  User definable types must now have object identification numbers larger\n    than 127.  The lower limit used to be 100 but this comflicts with many\n    applications (as well as slang itself) using lower case letters as the\n    object number, e.g., create_array ('s', 10, 1); which creates an array\n    of 10 strings (object number 's' = 115).\n\n2.  New intrinsic: array_info available.\n3.  regular expression matching bug involving \\{m,n\\} expressions fixed.\n4.  New module: slprepr.c.   This gives programs the ability to use the slang\n    preprocessor.\n5.  News slsmg functions: SLsmg_suspend_smg () and SLsmg_resume_smg ().\n    These are designed to be used before and after suspension.  The SLsmg\n    state is remembered and a redraw is performed by the resume_smg function.\n6.  The function `sltty_set_suspend_state' is now available for Unix\n    systems.  It may be used to turn on/off processing of the suspend\n    character by the terminal driver.\n7.  If SLtt_Try_Termcap is 0, the TERMCAP variable will not be parsed.\n8.  SLang_TT_Read_FD variable is now available for unix.  This is the file\n    descriptor used by SLang_getkey.\n9.  New preprocessor symbols available:\n     SLMATH      : If math functions are available\n     SLUNIX      : If unix system calls are available\n     SLFILES     : Stdio functions available\n     FLOAT_TYPE  : Floating point version\n\nChanges since 0.99.18\n1.  New intrinsic function: strcompress.  This collapses a string by removing\n    repeated characters.  For example,\n\n           define collapse (f)\n\t   {\n\t      while (str_replace (f, \" \", \",\")) f = ();\n\t      return strcompress (f, \",\");\n\t   }\n\n           collapse (\",  ,a b c ,,,d e,f  \");\n\n    returns: \"a,b,c,d,e,f\"\n\n2.  QNX support added.\n3.  New Functions (unix only): SLtt_tgetstr, SLtt_tgetnum, SLtt_tgetflag.\n4.  Fixed parsing of Octal and Hex numbers so that incorrect values are\n    flagged as errors.  Also, both lower and uppercase values may be used in\n    HEX numbers, e.g., 0xa == 0XA == 0Xa == 0xA.\n5.  MS-Windows support added.  Compile using makefile.msw.  This creates\n    `wslang.lib'.\n6.  New SLsmg functions:  SLsmg_get_row, SLsmg_get_column.  These return the\n    current position.\n\nChanges since 0.99.17\n1.  I have added limited termcap support although slang is still a terminfo\n    based system.  The support is provided via the TERMCAP environment\n    variable.  If this variable exists and contains a termcap entry for which\n    there is no reference to another entry (via tc field), it will be used\n    to setup the terminal.   If the TERMCAP variable does not exist, or it\n    refers to a file, terminfo is used instead.  This is not really a\n    limitation since one can set this variable in a way that slang likes by\n    using `tset -s'.\n\n    The motivation for this support is two-fold:\n       a. Slang programs can now run inside the screen program which sets\n          the TERMCAP variable appropriately.\n       b. A user can now correct defective termcap entries (e.g., for Linux),\n          and have those corrections made available to slang via the `tset'\n\t  command, e.g., by putting something analogous to:\n\n\t       setenv TERMCAP /corrected/termcap/file/absolute/path/name\n\t       eval `tset -s terminal-name`\n\n\t  in the .login file.\n       c. This also means that I can distribute corrected termcap entries for\n          common terminals.\n\nChanges since 0.99.16\n1.  Inadequate terminfo entries for `linux' terminal are compensated for.\n2.  Terminals with the ``Magic cookie glitch'' are flagged as having an\n    unusable highlighting mode.\n\nchanges since 0.99.15\n1.  Better checking of parameters passed to search routines.\n2.  Problem with line drawing characters fixed.\n\nchanges since 0.99.14\n1.  Ran code through purify.  Fixed one problem reported in slkeymap.c\n2.  Fixed a bug in sldisply.c regarding mono-attributes.\n3.  Code ready for ELF\nchanges since 0.99.13\n1.  SLtt_Has_Alt_Charset variable added to xterm.c.  This is motivated by the\n    sad, pathetic fact that although some termcap/terminfo databases suggest\n    that the terminal can do line drawing characters, the terminal cannot.\n2.  SLsmg_write_nstring function added.  This function may be used to write\n    only n characters of a string padding wit hblanks if necessary.\n3.  If the environment variable COLORTERM exist, SLtt_get_terminfo will set\n    SLtt_Use_Ansi_Colors to 1.\n4.  Sltt_set_cursor_visibility function added.  If passed a zero integer value,\n    the cursor is hidden; otherwise, it is made visible.\n\nchanges since 0.99.12\n1.  SLsmg now uses the `te' and `ti' termcap entries if present.  Apparantly\n    some terminals need to be put in cursor addressing mode.  This also has\n    the effect of restoring the screen of the xterm to what it was before\n    the program was executed.\n2.  For some types of code, slang is 20% faster!  This is especially\n    noticeable for branching constructs inside tight loops or recursive\n    functions.\n\nchanges since 0.99.10\n1. New version control added:\n\n    A new preprocessor symbol was added: SLANG_VERSION\n    This is a 6 digit integer of the form: abcdef\n    This corresponds to version number ab.cd.ef.  So for version 0.99.11:\n    #define SLANG_VERSION 9911\n\n    In addition, the intrinsic variable `SLang_Version' was changed from a\n    string to an integer that has the value SLANG_VERSION.  This also implies\n    that the interpreter variable _slang_version is now an integer.\n\nchanges since 0.99.9\n1. The terminfo code failed to recognize the automatic margin flag.  This\n   has been corrected.  In addition, the display code nolonger resets the\n   character set upon initialization.  This is considered to be a good thing.\n\n2. There is a new program in slang/doc called `texconv' that will produce a\n   nicely formatted ascii document from the tex formatted ones.  In\n   addition, new documentation has been added: slang.tex which describes the\n   syntax of the slang programming language and cslang.tex which describes\n   the C interface to the library.  The latter document is far from complete\n   but it is a start.\n\n3. A new variable declaration keyword has beed added: global_variable\n   This keyword is useful for declaring global variables from within\n   functions.  Such a feature simplifies some scripts.\n\n4. The SLsmg line drawing functions are now in place.\n\nchanges since 0.99.8\n1. \\d may now be used in regular expressions to specify a digit.  In addition,\n   \\e specifies an escape character.  So for example, `\\e\\[\\d;\\dH' matches\n   an ANSI cursor position escape sequence.\n2. Small bug in dealing with terminals that have automatic margins has been\n   fixed.\n3. When compiled with -DSLANG_TERMINFO will use terminfo.  This means that\n   there is no need to link to termcap.\n\nchanges since 0.99.7\n1. New function added to the readline package:\n     int SLang_rline_insert (char *s);\n   this may be used to stuff strings into the rline buffer.  SLSC exploits\n   this feature.\n\nchanges since 0.99.6\n\n1. ALL macros beginning with LANG have been changed to use SLANG as the\n   prefix.  For example, the macro LANG_IVARIABLE has been renamed to\n   SLANG_IVARIABLE.  If you have used one of these macros, please make the\n   change.\n\n2. Application defined types.  See demo/complex.c for an example that\n   defines complex numbers and overloads the binary and unary operators to\n   work with them.\n\nchanges since 0.99.5\n\n1. New interface for application defined objects.  Functions include:\n\n   extern SLuser_Object_Type *SLang_pop_user_object (unsigned char);\n   extern void SLang_free_user_object (SLuser_Object_Type *);\n   extern void SLang_push_user_object (SLuser_Object_Type *);\n   extern SLuser_Object_Type *SLang_create_user_object (unsigned char type);\n\n  This means that S-Lang scripts do not have to worry about freeing\n  structures, arrays, etc...  A consequence of this fact is that the\n  intrinsic function `free_array' has been removed.  See examples of this\n  exciting new feature in slang/demo.\n\n2. Better documentation and examples.  See slang/doc/*.* as well as examples\n   in slang/demo.\n\n3. Memory allocation macros have changed from MALLOC to SLMALLOC, etc...\n   Applications are encouraged to use these rather than `malloc' because by\n   compiling your application AND the slang library with the -DMALLOC_DEBUG\n   will link in code that checks if you have corrupted memory, freed\n   something twice, etc...  Use the function `SLmalloc_dump_statistics' for\n   a report of memory consumption by your program.\n\nchanges since 0.99.4\n1. cleaned up the source some and I changed the names of the hooks\n   user_whatever to `SLang_User_Whatever'.  This makes them more consistent\n   with other external functions and variables and helps avoid name space\n   pollution.\nchanges since 0.99.3\n* added screen management stuff\n* added a new help file reader (see help directory)\n* DOUBLE precision is now the default.  I think that this makes more sense\n  for an interpreted langauge.\n* searching routines added.\nchanges since 0.99.2\n* added low level tty support for VMS, DOS, and Unix\n* slang readline added\n* keymap support\n* files restructured so that programs can link, say, the readline library\n   and not get the whole interpreter linked in.\n\nchanges since 0.99.1\n*  obscure bug in regular expression fixed\n*  optimizing performed for 10% speed increase in speed for some language\n     constructs\n\nchanges since 0.99.0\n*  semantics of the `switch' statement changed to be more C-like with the\n   addition of the `case' keyword.  For example, one can write:\n\n        switch (ch)\n\t{ case 'A':\n\t    something ();\n\t}\n\t{\n\t  case 'B':\n\t    something_else ();\n\t}\n\t{ case 3.14:\n\t    print (\"Almost PI\");\n\t}\n\t{ case \"hello\":\n\t    print (\"hi\");\n\t}\n\n   Note that one may mix data types without the possibility of a type\n   mismatch error.\n\nchanges since 0.98:\n*  matrix package added.  Currently only matrix multiplication and addition\n   is supported.  More functions will be added (determinants, inverse, etc..)\n   This support is provided by the `init_SLmatrix ()' call.  This support\n   provides the following S-Lang intrinsics:\n\n         matrix_multiply, matrix_add\n\n*  New S-Lang core intrinsic:\n\n         copy_array  :  copys the contents of one array to another\n\nchanges since 0.97:\n\n*  Double precision floating point supported.\n   Use the -DFLOAT_TYPE -DUSE_DOUBLE compiler flags to enable this.\n   Note that S-Lang does not support single precision and double precision\n   floating point number SIMULTANEOUSLY.  You must choose one or the other\n   and stick with it!\n\n*  Byte compiling is now more than simple preprocessing.  This results in\n   about a 20% decrease in loading time.  This also means that if you\n   rebuild your application, you MUST re-bytecompile.\n\n*  New syntax added:  Consider a function f that returns multiple values.\n   Then to assign these values to, say var_1, and var_2, simply write:\n\n       (var_1, var_2) = f ();\n\n    This is an alternative to:\n\n        f (); =var_2; =var_1;\n\nChanges since 0.96:\n\n  It is now possible to use short circuit boolean evaluation of logical\n  expressions is the `orelse' and `andelse' constructs.  Previously, these\n  constructs were only available at the infix level.  The new syntax looks\n  like (example taken from JED's rmail.sl):\n\n     if (orelse\n\t {re_bsearch(\"^\\\\CFrom:.*<\\\\(.+\\\\)>\");}\n\t {re_bsearch(\"^\\\\CReply-To: *\\\\([^ ]+\\\\) *\");}\n\t {re_bsearch(\"^\\\\CFrom:.*<\\\\(.+\\\\)>\");}\n\t {re_bsearch(\"^\\\\CFrom: *\\\\([^ ]+\\\\) *\");}\n\t {re_bsearch(\"^\\\\cFrom +\\\\([^ ]+\\\\) *\");}\n       )\n     {\n\tfrom = rmail_complex_get_from(from);\n     }\n\n  Modified some of the array code to use handles to arrays instead of actual\n  arrays.  This adds alot more protection for the use of arrays.  The\n  downside is that there is a limit on the number of active arrays.  This\n  limit has been set to a default value ot 256.  An ``active'' array is an\n  array that has been created but not freed.\n\n  Fixed a parse error that occurred when an `if' statement imediately follow\n  the `:' in a switch statement.\n\n  putenv intrinsic added.\n\n  EXIT_BLOCK:  if an exit block is declared, it is called just before the\n               function returns to its caller.\n\nIt is now possible to perform assignments in variable declaration\nstatements, e.g.,\n\nvariable i = 0, imax = 10, n = strlen (name);\n\nCondition compilation of S-Lang source possible.  See .sl files in the jed\ndistribution.\n\nA bug which prevent assignment to a global C floating point variable was\nfixed.\n\nChanges to `calc':\n\n   `apropos' function added to calc.sl.  For example, `apropos(\"str\")'\n      creates a list of all intrinsic functions that contain the substring\n      \"str\"  (strcmp, strcat, etc...)\n\n    Command line arguments are now loaded as S-Lang source files.  This makes\n      it possible to create a Unix executable such as:\n\n         #! /usr/local/bin/calc\n\n\t define hello_world () { print (\"hello world\"); }\n\t loop (10) hello_world ();\n\t quit ();\n}}}\n",
        "/tmp/vanessa/spack-stage/spack-stage-slang-2.3.2-aat5lz6qqlpwezyu5gvypwdi5kiqkp5y/spack-src/src/slimport.c": "/*\nCopyright (C) 2004-2017,2018 John E. Davis\n\nThis file is part of the S-Lang Library.\n\nThe S-Lang Library is free software; you can redistribute it and/or\nmodify it under the terms of the GNU General Public License as\npublished by the Free Software Foundation; either version 2 of the\nLicense, or (at your option) any later version.\n\nThe S-Lang Library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nGeneral Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this library; if not, write to the Free Software\nFoundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,\nUSA.\n*/\n\n#include \"slinclud.h\"\n\n#include \"slang.h\"\n#include \"_slang.h\"\n\n#if defined (HAVE_DLFCN_H) || defined(__WIN32__)\n# define SLANG_HAS_DYNAMIC_LINKING\t1\n#else\n# define SLANG_HAS_DYNAMIC_LINKING\t0\n#endif\n\n/* The rest of this file is in the if block */\n#if SLANG_HAS_DYNAMIC_LINKING\n\n#ifdef HAVE_DLFCN_H\n# include <dlfcn.h>\n#endif\n\n#ifdef __WIN32__\n# include <windows.h>\n# define dlopen(a, b) LoadLibrary(a)\n# define dlsym (void *)GetProcAddress\n# define dlclose FreeLibrary\n# define dlerror() NULL\n# define SO_SUFFIX \"dll\"\n#else\n# define SO_SUFFIX \"so\"\n#endif\n\nstatic SLFUTURE_CONST char *Module_Path;\n#ifndef MODULE_PATH_ENV_NAME\n# define MODULE_PATH_ENV_NAME \"SLANG_MODULE_PATH\"\n#endif\n#ifndef MODULE_INSTALL_DIR\n# define MODULE_INSTALL_DIR \"/usr/local/lib/slang/v2/modules\"\n#endif\n\n#define MAX_MODULE_NAME_SIZE 256\n\ntypedef struct Namespace_List_Type\n{\n   char *ns;\n   struct Namespace_List_Type *next;\n}\nNamespace_List_Type;\n\ntypedef struct _Handle_Type\n{\n   struct _Handle_Type *next;\n   char *module_name;\n   VOID_STAR handle;\n   int (*ns_init_fun) (SLCONST char *);\n   void (*deinit_fun) (void);\n   Namespace_List_Type *ns_list;\n}\nHandle_Type;\n\nstatic Handle_Type *Handle_List;\n\nstatic void free_namespace_list (Namespace_List_Type *ns_list)\n{\n   while (ns_list != NULL)\n     {\n\tNamespace_List_Type *next = ns_list->next;\n\tSLang_free_slstring (ns_list->ns);\n\tSLfree ((char *)ns_list);\n\tns_list = next;\n     }\n}\n\nstatic void free_handle_type (Handle_Type *h)\n{\n   if (h == NULL)\n     return;\n\n   SLang_free_slstring (h->module_name);\n   free_namespace_list (h->ns_list);\n   SLfree ((char *)h);\n}\n\nstatic void delete_handles (void)\n{\n   while (Handle_List != NULL)\n     {\n\tHandle_Type *next = Handle_List->next;\n\n\tif (Handle_List->deinit_fun != NULL)\n\t  Handle_List->deinit_fun ();\n\t/* (void) dlclose (Handle_List->handle); */\n\tfree_handle_type (Handle_List);\n\tHandle_List = next;\n     }\n}\n\nstatic Handle_Type *allocate_handle_type (SLFUTURE_CONST char *module_name, VOID_STAR handle)\n{\n   Handle_Type *h;\n\n   h = (Handle_Type *) SLcalloc (1, sizeof (Handle_Type));\n   if (h == NULL)\n     return NULL;\n   if (NULL == (h->module_name = SLang_create_slstring (module_name)))\n     {\n\tSLfree ((char *) h);\n\treturn NULL;\n     }\n   h->handle = handle;\n   return h;\n}\n\nstatic Handle_Type *find_handle (SLCONST char *module_name)\n{\n   Handle_Type *l;\n\n   l = Handle_List;\n   while (l != NULL)\n     {\n\tif (0 == strcmp (l->module_name, module_name))\n\t  break;\n\tl = l->next;\n     }\n   return l;\n}\n\nstatic int check_api_version (char *file, int api_version)\n{\n   if (api_version/10000 == SLANG_VERSION/10000)\n     return 0;\n\n   _pSLang_verror (SL_Import_Error, \"Module %s is incompatible with this version of S-Lang\",\n\t\t file);\n   return -1;\n}\n\n#if defined(__GNUC__)\n# pragma GCC diagnostic ignored \"-Wformat-nonliteral\"\n#endif\nstatic VOID_STAR do_dlsym (VOID_STAR handle, SLFUTURE_CONST char *file, int check_error, SLFUTURE_CONST char *fmt, char *module)\n{\n   char symbol[MAX_MODULE_NAME_SIZE + 32];\n   VOID_STAR s;\n\n   SLsnprintf (symbol, sizeof(symbol), fmt, module);\n   if (NULL != (s = (VOID_STAR) dlsym (handle, symbol)))\n     return s;\n\n   if (check_error)\n     {\n\tSLCONST char *err;\n\n\tif (NULL == (err = (char *) dlerror ()))\n\t  err = \"UNKNOWN\";\n\n\t_pSLang_verror (SL_Import_Error,\n\t\t      \"Unable to get symbol %s from %s: %s\",\n\t\t      symbol, file, err);\n     }\n   return NULL;\n}\n#if defined(__GNUC__)\n# pragma GCC diagnostic warning \"-Wformat-nonliteral\"\n#endif\n\nstatic Handle_Type *dynamic_link_module (SLFUTURE_CONST char *module)\n{\n   Handle_Type *h;\n   VOID_STAR handle;\n   SLFUTURE_CONST char *err;\n   char filebuf[1024];\n   char *save_file;\n   char *save_err;\n   int api_version;\n   int *api_version_ptr;\n#define MAX_MODULE_NAME_SIZE 256\n   char module_so[MAX_MODULE_NAME_SIZE + 32];\n   char *module_name;\n   char *file, *pathfile;\n\n   if (strlen (module) >= MAX_MODULE_NAME_SIZE)\n     {\n\t_pSLang_verror (SL_LimitExceeded_Error, \"module name too long\");\n\treturn NULL;\n     }\n   SLsnprintf (module_so, sizeof(module_so), \"%s-module.%s\", module, SO_SUFFIX);\n\n   if (Module_Path != NULL)\n     pathfile = SLpath_find_file_in_path (Module_Path, module_so);\n   else pathfile = NULL;\n\n   if ((pathfile == NULL)\n       && (NULL != (pathfile = _pSLsecure_getenv (MODULE_PATH_ENV_NAME))))\n     pathfile = SLpath_find_file_in_path (pathfile, module_so);\n\n   if (pathfile == NULL)\n     pathfile = SLpath_find_file_in_path (MODULE_INSTALL_DIR, module_so);\n\n   if (pathfile != NULL)\n     file = pathfile;\n   else\n     file = module_so;\n\n   save_err = NULL;\n   save_file = file;\n   while (1)\n     {\n#ifndef RTLD_GLOBAL\n# define RTLD_GLOBAL 0\n#endif\n#ifdef RTLD_NOW\n\thandle = (VOID_STAR) dlopen (file, RTLD_NOW | RTLD_GLOBAL);\n#else\n\thandle = (VOID_STAR) dlopen (file, RTLD_LAZY | RTLD_GLOBAL);\n#endif\n\n\tif (handle != NULL)\n\t  {\n\t     if (_pSLang_Load_File_Verbose & SLANG_LOAD_MODULE_VERBOSE)\n\t       SLang_vmessage (\"Importing %s\", file);\n\t     if (save_err != NULL)\n\t       SLfree (save_err);\n\t     break;\n\t  }\n\n\t/* Purify reports that dlerror returns a pointer that generates UMR\n\t * errors.  There is nothing that I can do about that....\n\t */\n\tif ((NULL == strchr (file, '/'))\n\t    && (strlen(file) < sizeof(filebuf)))\n\t  {\n\t     err = (char *) dlerror ();\n\t     if (err != NULL)\n\t       save_err = SLmake_string (err);\n\n\t     SLsnprintf (filebuf, sizeof (filebuf), \"./%s\", file);\n\t     file = filebuf;\n\t     continue;\n\t  }\n\n\tif ((NULL == (err = save_err))\n\t    && (NULL == (err = (char *) dlerror ())))\n\t  err = \"UNKNOWN\";\n\n\t_pSLang_verror (SL_Import_Error,\n\t\t      \"Error linking to %s: %s\", save_file, err);\n\n\tif (save_err != NULL)\n\t  SLfree (save_err);\n\tif (pathfile != NULL)\n\t  SLfree (pathfile);\n\n\treturn NULL;\n     }\n\n   /* Using SLpath_basename allows, e.g., import (\"/path/to/module\"); */\n   module_name = SLpath_basename (module);\n\n   api_version_ptr = (int *) do_dlsym (handle, file, 0, \"SLmodule_%s_api_version\", module_name);\n   if (api_version_ptr == NULL)\n     api_version_ptr = (int *) do_dlsym (handle, file, 0, \"_SLmodule_%s_api_version\", module_name);\n\n   if (api_version_ptr == NULL)\n     api_version = 0;\n   else\n     api_version = *api_version_ptr;\n\n   if ((-1 == check_api_version (file, api_version))\n       || (NULL == (h = allocate_handle_type (module, handle))))\n     {\n\tSLfree (pathfile);\t       /* NULL ok */\n\tdlclose (handle);\n\treturn NULL;\n     }\n\n   if (NULL == (h->ns_init_fun = (int (*)(SLCONST char *)) do_dlsym (handle, file, 1, \"init_%s_module_ns\", module_name)))\n     {\n\tSLfree (pathfile);\n\tfree_handle_type (h);\n\tdlclose (handle);\n\treturn NULL;\n     }\n   h->deinit_fun = (void (*)(void)) do_dlsym (handle, file, 0, \"deinit_%s_module\", module_name);\n\n   SLfree (pathfile);\t\t       /* NULL ok */\n   h->next = Handle_List;\n   Handle_List = h;\n\n   return h;\n}\n\nstatic int import_module (SLFUTURE_CONST char *module, SLFUTURE_CONST char *ns)\n{\n   Handle_Type *h;\n   Namespace_List_Type *ns_list;\n\n   if (ns == NULL)\n     ns = _pSLang_cur_namespace_intrinsic ();\n\n   if (*ns == 0)\n     ns = \"Global\";\n\n   if ((NULL == (h = find_handle (module)))\n       && (NULL == (h = dynamic_link_module (module))))\n     return -1;\n\n   ns_list = h->ns_list;\n   while (ns_list != NULL)\n     {\n\tif (0 == strcmp (ns, ns_list->ns))\n\t  return 0;\t\t       /* already linked to this ns */\n\tns_list = ns_list->next;\n     }\n\n   if (NULL == (ns_list = (Namespace_List_Type *)SLmalloc (sizeof (Namespace_List_Type))))\n     return -1;\n\n   if (NULL == (ns_list->ns = SLang_create_slstring (ns)))\n     {\n\tSLfree ((char *)ns_list);\n\treturn -1;\n     }\n   ns_list->next = h->ns_list;\n   h->ns_list = ns_list;\n\n   if (-1 == (h->ns_init_fun (ns)))\n     return -1;\n\n   return 0;\n}\n\nstatic void import_module_intrin (void)\n{\n   char *module;\n   char *ns = NULL;\n\n   if (SLang_Num_Function_Args == 2)\n     {\n\tif (-1 == SLang_pop_slstring (&ns))\n\t  return;\n     }\n\n   if (-1 == SLang_pop_slstring (&module))\n     {\n\tSLang_free_slstring (ns);      /* NULL ok */\n\treturn;\n     }\n\n   (void) import_module (module, ns);\n   SLang_free_slstring (module);\n   SLang_free_slstring (ns);\t       /* NULL ok */\n}\n\nstatic void set_import_module_path (char *path)\n{\n   (void) SLang_set_module_load_path (path);\n}\n\nstatic SLCONST char *get_import_module_path (void)\n{\n   char *path;\n   if (Module_Path != NULL)\n     return Module_Path;\n   if (NULL != (path = _pSLsecure_getenv (MODULE_PATH_ENV_NAME)))\n     return path;\n   return MODULE_INSTALL_DIR;\n}\n\nstatic SLang_Intrin_Fun_Type Module_Intrins [] =\n{\n   MAKE_INTRINSIC_0(\"import\", import_module_intrin, SLANG_VOID_TYPE),\n   MAKE_INTRINSIC_S(\"set_import_module_path\", set_import_module_path, SLANG_VOID_TYPE),\n   MAKE_INTRINSIC_0(\"get_import_module_path\", get_import_module_path, SLANG_STRING_TYPE),\n   SLANG_END_INTRIN_FUN_TABLE\n};\n\n#endif\t\t\t\t       /* SLANG_HAS_DYNAMIC_LINKING */\n\nint SLang_set_module_load_path (SLFUTURE_CONST char *path)\n{\n#if SLANG_HAS_DYNAMIC_LINKING\n   if (NULL == (path = SLang_create_slstring (path)))\n     return -1;\n   SLang_free_slstring ((char *) Module_Path);\n   Module_Path = path;\n   return 0;\n#else\n   (void) path;\n   return -1;\n#endif\n}\n\nint SLang_init_import (void)\n{\n#if SLANG_HAS_DYNAMIC_LINKING\n   (void) SLang_add_cleanup_function (delete_handles);\n   return SLadd_intrin_fun_table (Module_Intrins, \"__IMPORT__\");\n#else\n   return 0;\n#endif\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-slang-2.3.2-aat5lz6qqlpwezyu5gvypwdi5kiqkp5y/spack-src/autoconf/aclocal.m4": "dnl# -*- mode: sh; mode: fold -*-\ndnl# 0.3.3-1: Use INSTALL instead of INSTALL_DATA to install modules to get executable permissions\ndnl# 0.3.3-0: Added $(OBJ_O_DEPS) and $(ELF_O_DEPS) to PROGRAM_OBJECT_RULES\ndnl# 0.3.2-0: Add rpath support for freebsd\ndnl# 0.3.1-0: New output variable: CC_SHARED_FLAGS; CC_SHARED is deprecated\ndnl# 0.3.0-0: Added support for parsing /etc/ld.so.conf\ndnl# 0.2.7-3: Change ncurses5w-config to ncursesw5-config (Gilles Espinasse)\ndnl# 0.2.7-2: For the Makefile rules, use cd foo && bar instead of cd foo; bar\ndnl# 0.2.7-1: Use \"$ARCH\"elfobjs instead of elf\"$ARCH\"objs for better flexibility\ndnl# 0.2.7-0: Instead of expanding $ARCH at configure time, use \\$ARCH for compile-time expansion\ndnl# 0.2.6-2: Missing hyphen for cygwin ELFLIB_MAJOR (Marco Atzeri)\ndnl# 0.2.6-1: Added optional second and third arguments to AC_DEFINE (Marco Atzeri)\ndnl# 0.2.6-0: On cygwin, change libfooX_Y_Z.dll to cygfoo-X_Y_Z.dll (Marco Atzeri)\ndnl# 0.2.5-3: Changed AC_DEFUN(foo...) to AC_DEFUN([foo]...)\ndnl# 0.2.5-2: JD_CHECK_FOR_LIBRARY will alse output *_INC_DIR and *_LIB_DIR\ndnl# 0.2.5-1: Updated using autoupdate\ndnl# 0.2.5-0: M_LIB output variable created for haiku support (Scott McCreary)\ndnl# 0.2.4-0: Added optional 3rd argument to JD_WITH_LIBRARY for a default path\ndnl# 0.2.3-2: X was missing in a \"test\" statement (Joerg Sommer)\ndnl# 0.2.3-1: AC_AIX needs to be called before running the compiler (Miroslav Lichvar)\ndnl# 0.2.3: rewrote JD_CHECK_FOR_LIBRARY to loop over include/lib pairs\ndnl# 0.2.2-1: JD_WITH_LIBRARY bug-fix\ndnl# 0.2.2:  Use ncurses5-config to search for terminfo dirs.\ndnl# 0.2.1:  Add .dll.a to list of extensions to when searching for libs (cygwin)\ndnl# 0.2.0:  Added install target name and more fixes for cygwin\ndnl# 0.1.12: Improved support for cygwin\ndnl# 0.1.11: Fixed elf linking on freebsd (Renato Botelho (garga at freebsd, org)\ndnl# Version 0.1.10: rpath support for netbsd\ndnl# Version 0.1.9: When searching for libs, use dylib on darwin\ndnl# Version 0.1.8: Add rpath support for OpenBSD\ndnl# Version 0.1.7: removed \"-K pic\" from IRIX compiler lines\ndnl# Version 0.1.6: Added cygwin module support\ndnl# Version 0.1.5: Added gcc version-script support.\n\nAC_DEFUN([JD_INIT],     dnl#{{{\n[\n#These variable are initialized by JD init function\nCONFIG_DIR=`pwd`\ncd $srcdir\nif test \"`pwd`\" != \"$CONFIG_DIR\"\nthen\n  AC_MSG_ERROR(\"This software does not support configuring from another directory.   See the INSTALL file\")\nfi\ndnl# if test \"X$PWD\" != \"X\"\ndnl# then\ndnl#  CONFIG_DIR=\"$PWD\"\ndnl# fi\nAC_SUBST(CONFIG_DIR)dnl\n# Note: these will differ if one is a symbolic link\nif test -f /usr/bin/dirname; then\n  JD_Above_Dir=`dirname $CONFIG_DIR`\nelse\n# system is a loser\n  JD_Above_Dir=`cd ..;pwd`\nfi\nJD_Above_Dir2=`cd ..;pwd`\n])\ndnl#}}}\n\ndnl# This function expand the \"prefix variables.  For example, it will expand\ndnl# values such as ${exec_prefix}/foo when ${exec_prefix} itself has a\ndnl# of ${prefix}.  This function produces the shell variables:\ndnl# jd_prefix_libdir, jd_prefix_incdir\nAC_DEFUN([JD_EXPAND_PREFIX], dnl#{{{\n[\n  if test \"X$jd_prefix\" = \"X\"\n  then\n    jd_prefix=$ac_default_prefix\n    if test \"X$prefix\" != \"XNONE\"\n    then\n      jd_prefix=\"$prefix\"\n    fi\n    jd_exec_prefix=\"$jd_prefix\"\n    if test \"X$exec_prefix\" != \"XNONE\"\n    then\n      jd_exec_prefix=\"$exec_prefix\"\n    fi\n\n    dnl#Unfortunately, exec_prefix may have a value like ${prefix}, etc.\n    dnl#Let the shell expand those.  Yuk.\n    eval `sh <<EOF\n      prefix=$jd_prefix\n      exec_prefix=$jd_exec_prefix\n      libdir=$libdir\n      includedir=$includedir\n      echo jd_prefix_libdir=\"\\$libdir\" jd_prefix_incdir=\"\\$includedir\"\nEOF\n`\n  fi\n])\n#}}}\n\nAC_DEFUN([JD_GET_SYS_INCLIBS], dnl#{{{\n[\n  if test -x $ac_aux_dir/scripts/getsyslibs.sh\n  then\n    JD_SYS_INCLIBS=`$ac_aux_dir/scripts/getsyslibs.sh`\n  else\n    JD_SYS_INCLIBS=\"\"\n  fi\n])\ndnl#}}}\n\nAC_DEFUN([JD_SET_OBJ_SRC_DIR], dnl#{{{\n[\n#---------------------------------------------------------------------------\n# Set the source directory and object directory.   The makefile assumes an\n# absolute path name.  This is because src/Makefile cds to OBJDIR and compiles\n# the src file which is in SRCDIR\n#---------------------------------------------------------------------------\nSRCDIR=$CONFIG_DIR\nif test \"$1\" != \".\"\nthen\n  if test -z \"$1\"\n  then\n    SRCDIR=$SRCDIR/src\n  else\n    SRCDIR=$SRCDIR/$1\n  fi\nfi\n\nOBJDIR=$SRCDIR/\"\\$(ARCH)\"objs\nELFDIR=$SRCDIR/\"\\$(ARCH)\"elfobjs\nAC_SUBST(SRCDIR)dnl\nAC_SUBST(OBJDIR)dnl\nAC_SUBST(ELFDIR)dnl\n])\ndnl#}}}\n\nRPATH=\"\"\nAC_DEFUN([JD_INIT_RPATH], dnl#{{{\n[\ndnl# determine whether or not -R or -rpath can be used\ncase \"$host_os\" in\n  *linux*|*solaris* )\n    if test \"X$GCC\" = Xyes\n    then\n      if test \"X$ac_R_nospace\" = \"Xno\"\n      then\n        RPATH=\"-Wl,-R,\"\n      else\n        RPATH=\"-Wl,-R\"\n      fi\n    else\n      if test \"X$ac_R_nospace\" = \"Xno\"\n      then\n        RPATH=\"-R \"\n      else\n\tRPATH=\"-R\"\n      fi\n    fi\n  ;;\n  *osf*|*openbsd*|*freebsd*)\n    if test \"X$GCC\" = Xyes\n    then\n      RPATH=\"-Wl,-rpath,\"\n    else\n      RPATH=\"-rpath \"\n    fi\n  ;;\n  *netbsd*)\n    if test \"X$GCC\" = Xyes\n    then\n      RPATH=\"-Wl,-R\"\n    fi\n  ;;\nesac\n])\n\ndnl#}}}\n\nAC_DEFUN([JD_SET_RPATH], dnl#{{{\n[\nif test \"X$1\" != \"X\"\nthen\n  if test \"X$RPATH\" = \"X\"\n  then\n    JD_INIT_RPATH\n    if test \"X$RPATH\" != \"X\"\n    then\n      RPATH=\"$RPATH$1\"\n    fi\n  else\n    _already_there=0\n    for X in `echo $RPATH | sed 's/:/ /g'`\n    do\n      if test \"$X\" = \"$1\"\n      then\n        _already_there=1\n\tbreak\n      fi\n    done\n    if test $_already_there = 0\n    then\n      RPATH=\"$RPATH:$1\"\n    fi\n  fi\nfi\n])\nAC_SUBST(RPATH)dnl\n\ndnl#}}}\n\nAC_DEFUN([JD_UPPERCASE], dnl#{{{\n[\nchangequote(<<, >>)dnl\ndefine(<<$2>>, translit($1, [a-z], [A-Z]))dnl\nchangequote([, ])dnl\n])\n#}}}\n\nAC_DEFUN([JD_SIMPLE_LIB_DIR], dnl#{{{\n[\nJD_UPPERCASE($1,JD_UP_NAME)\nJD_UP_NAME[]_LIB_DIR=$JD_Above_Dir/$1/libsrc/\"$ARCH\"objs\nJD_UP_NAME[]_INCLUDE=$JD_Above_Dir/$1/libsrc\n\nif test ! -d \"[$]JD_UP_NAME[]_INCLUDE\"\nthen\n   JD_UP_NAME[]_LIB_DIR=$JD_Above_Dir/$1/src/\"$ARCH\"objs\n   JD_UP_NAME[]_INCLUDE=$JD_Above_Dir/$1/src\n   if test ! -d \"[$]JD_UP_NAME[]_INCLUDE\"\n   then\n     echo \"\"\n     echo WARNING------Unable to find the JD_UP_NAME directory\n     echo You may have to edit $CONFIG_DIR/src/Makefile.\n     echo \"\"\n   fi\nfi\n\nAC_SUBST(JD_UP_NAME[]_LIB_DIR)dnl\nAC_SUBST(JD_UP_NAME[]_INCLUDE)dnl\nundefine([JD_UP_NAME])dnl\n])\n\ndnl#}}}\n\nAC_DEFUN([JD_FIND_GENERIC], dnl#{{{\n[\n  AC_REQUIRE([JD_EXPAND_PREFIX])dnl\n\n  changequote(<<, >>)dnl\n  define(<<JD_UP_NAME>>, translit($1, [a-z], [A-Z]))dnl\n  changequote([, ])dnl\n# Look for the JD_UP_NAME package\n#JD_UP_NAME[]_INCLUDE=\"\"\n#JD_UP_NAME[]_LIB_DIR=\"\"\n\n# This list consists of \"include,lib include,lib ...\"\nJD_Search_Dirs=\"$JD_Above_Dir2/$1/libsrc,$JD_Above_Dir2/$1/libsrc/\"$ARCH\"objs \\\n                $JD_Above_Dir/$1/libsrc,$JD_Above_Dir/$1/libsrc/\"$ARCH\"objs \\\n\t\t$JD_Above_Dir2/$1/src,$JD_Above_Dir2/$1/src/\"$ARCH\"objs \\\n                $JD_Above_Dir/$1/src,$JD_Above_Dir/$1/src/\"$ARCH\"objs\"\n\nJD_Search_Dirs=\"$JD_Search_Dirs \\\n                $jd_prefix_incdir,$jd_prefix_libdir \\\n\t\t$HOME/include,$HOME/lib\"\n\nif test -n \"$ARCH\"\nthen\n JD_Search_Dirs=\"$JD_Search_Dirs $HOME/include,$HOME/$ARCH/lib\"\n JD_Search_Dirs=\"$JD_Search_Dirs $HOME/include,$HOME/sys/$ARCH/lib\"\nfi\n\n# Now add the standard system includes.  The reason for doing this is that\n# the other directories may have a better chance of containing a more recent\n# version.\n\nJD_Search_Dirs=\"$JD_Search_Dirs \\\n                /usr/local/include,/usr/local/lib \\\n\t\t/usr/include,/usr/lib \\\n\t\t/usr/include/$1,/usr/lib \\\n\t\t/usr/include/$1,/usr/lib/$1\"\n\necho looking for the JD_UP_NAME library\n\nfor include_and_lib in $JD_Search_Dirs\ndo\n  # Yuk.  Is there a better way to set these variables??\n  generic_include=`echo $include_and_lib | tr ',' ' ' | awk '{print [$]1}'`\n  generic_lib=`echo $include_and_lib | tr ',' ' ' | awk '{print [$]2}'`\n  echo Looking for $1.h in $generic_include\n  echo and lib$1.a in $generic_lib\n  if test -r $generic_include/$1.h && test -r $generic_lib/lib$1.a\n  then\n    echo Found it.\n    JD_UP_NAME[]_LIB_DIR=\"$generic_lib\"\n    JD_UP_NAME[]_INCLUDE=\"$generic_include\"\n    break\n  else\n    if test -r $generic_include/$1.h && test -r $generic_lib/lib$1.so\n    then\n      echo Found it.\n      JD_UP_NAME[]_LIB_DIR=\"$generic_lib\"\n      JD_UP_NAME[]_INCLUDE=\"$generic_include\"\n      break\n    fi\n  fi\ndone\n\nif test -n \"[$]JD_UP_NAME[]_LIB_DIR\"\nthen\n    jd_have_$1=\"yes\"\nelse\n    echo Unable to find the $JD_UP_NAME library.\n    echo You may have to edit $CONFIG_DIR/src/Makefile.\n    JD_UP_NAME[]_INCLUDE=$JD_Above_Dir/$1/src\n    JD_UP_NAME[]_LIB_DIR=$JD_Above_Dir/$1/src/\"$ARCH\"objs\n    jd_have_$1=\"no\"\nfi\n\nJD_UP_NAME[]_INC=\"-I[$]JD_UP_NAME[]_INCLUDE\"\nJD_UP_NAME[]_LIB=\"-L[$]JD_UP_NAME[]_LIB_DIR\"\nJD_SET_RPATH([$]JD_UP_NAME[]_LIB_DIR)\ndnl# if test \"X$GCC\" = Xyes\ndnl# then\ndnl#    RPATH_[]JD_UP_NAME=\"-Wl,-R[$]JD_UP_NAME[]_LIB_DIR\"\ndnl# else\ndnl#    RPATH_[]JD_UP_NAME=\"-R[$]JD_UP_NAME[]_LIB_DIR\"\ndnl# fi\n\n# gcc under solaris is often not installed correctly.  Avoid specifying\n# -I/usr/include.\nif test \"[$]JD_UP_NAME[]_INC\" = \"-I/usr/include\"\nthen\n    JD_UP_NAME[]_INC=\"\"\nfi\n\nif test \"[$]JD_UP_NAME[]_LIB\" = \"-L/usr/lib\"\nthen\n    JD_UP_NAME[]_LIB=\"\"\n    RPATH_[]JD_UP_NAME=\"\"\nfi\n\nAC_SUBST(JD_UP_NAME[]_LIB)dnl\nAC_SUBST(JD_UP_NAME[]_INC)dnl\nAC_SUBST(JD_UP_NAME[]_LIB_DIR)dnl\nAC_SUBST(JD_UP_NAME[]_INCLUDE)dnl\ndnl# AC_SUBST(RPATH_[]JD_UP_NAME)dnl\nundefine([JD_UP_NAME])dnl\n])\n\ndnl#}}}\n\nAC_DEFUN([JD_FIND_SLANG], dnl#{{{\n[\nJD_FIND_GENERIC(slang)\n])\n\ndnl#}}}\n\nAC_DEFUN([JD_GCC_WARNINGS], dnl#{{{\n[\nAC_ARG_ENABLE(warnings,\n\t      AC_HELP_STRING([--enable-warnings],[turn on GCC compiler warnings]),\n\t      [gcc_warnings=$enableval])\nif test -n \"$GCC\"\nthen\n  #CFLAGS=\"$CFLAGS -fno-strength-reduce\"\n  if test -n \"$gcc_warnings\"\n  then\n    CFLAGS=\"$CFLAGS -Wall -W -pedantic -Winline -Wmissing-prototypes \\\n -Wnested-externs -Wpointer-arith -Wcast-align -Wshadow -Wstrict-prototypes \\\n -Wformat=2\"\n    # Now trim excess whitespace\n    CFLAGS=`echo $CFLAGS`\n  fi\nfi\n])\n\ndnl#}}}\n\nIEEE_CFLAGS=\"\"\nAC_DEFUN([JD_IEEE_CFLAGS], dnl#{{{\n[\ncase \"$host_cpu\" in\n  *alpha* )\n    if test \"$GCC\" = yes\n    then\n      IEEE_CFLAGS=\"-mieee\"\n    else\n      IEEE_CFLAGS=\"-ieee_with_no_inexact\"\n    fi\n    ;;\n  * )\n    IEEE_CFLAGS=\"\"\nesac\n])\n\ndnl#}}}\n\nAC_DEFUN([JD_CREATE_ORULE], dnl#{{{\n[\nPROGRAM_OBJECT_RULES=\"$PROGRAM_OBJECT_RULES\n\\$(OBJDIR)/$1.o : \\$(SRCDIR)/$1.c \\$(DOT_O_DEPS) \\$(OBJ_O_DEPS) \\$(\"$1\"_O_DEP)\n\tcd \\$(OBJDIR) && \\$(COMPILE_CMD) \\$(\"$1\"_C_FLAGS) \\$(SRCDIR)/$1.c\n\"\n])\n\ndnl#}}}\n\nAC_DEFUN([JD_CREATE_ELFORULE], dnl#{{{\n[\nPROGRAM_ELF_ORULES=\"$PROGRAM_ELF_ORULES\n\\$(ELFDIR)/$1.o : \\$(SRCDIR)/$1.c \\$(DOT_O_DEPS) \\$(ELF_O_DEPS) \\$(\"$1\"_O_DEP)\n\tcd \\$(ELFDIR) && \\$(ELFCOMPILE_CMD) \\$(\"$1\"_C_FLAGS) \\$(SRCDIR)/$1.c\n\"\n])\n\ndnl#}}}\n\nAC_DEFUN([JD_CREATE_EXEC_RULE], dnl#{{{\n[\nPROGRAM_OBJECT_RULES=\"$PROGRAM_OBJECT_RULES\n$1 : \\$(OBJDIR)/$1\n\t@echo $1 created in \\$(OBJDIR)\n\\$(OBJDIR)/$1 : \\$(OBJDIR)/$1.o \\$(\"$1\"_DEPS) \\$(EXECDEPS)\n\t\\$(CC) -o \\$(OBJDIR)/$1 \\$(LDFLAGS) \\$(OBJDIR)/$1.o \\$(\"$1\"_LIBS) \\$(EXECLIBS)\n\\$(OBJDIR)/$1.o : \\$(SRCDIR)/$1.c \\$(DOT_O_DEPS) \\$(\"$1\"_O_DEP)\n\tcd \\$(OBJDIR) && \\$(COMPILE_CMD) \\$(\"$1\"_INC) \\$(EXECINC) \\$(SRCDIR)/$1.c\n\"\n])\n\ndnl#}}}\n\nAC_DEFUN([JD_CREATE_MODULE_ORULES], dnl#{{{\n[\n for program_module in $Program_Modules; do\n   JD_CREATE_ORULE($program_module)\n   JD_CREATE_ELFORULE($program_module)\n done\n])\n\ndnl#}}}\n\nAC_DEFUN([JD_GET_MODULES], dnl#{{{\n[\n PROGRAM_HFILES=\"\"\n PROGRAM_OFILES=\"\"\n PROGRAM_CFILES=\"\"\n PROGRAM_OBJECTS=\"\"\n PROGRAM_ELFOBJECTS=\"\"\n PROGRAM_OBJECT_RULES=\"\"\n PROGRAM_ELF_ORULES=\"\"\n if test -z \"$1\"\n then\n   Program_Modules=\"\"\n else\n   comment_re=\"^#\"\n   Program_Modules=`grep -v '$comment_re' $1 | awk '{print [$]1}'`\n   Program_H_Modules=`grep -v '$comment_re' $1 | awk '{print [$]2}'`\n   for program_module in $Program_H_Modules; do\n     PROGRAM_HFILES=\"$PROGRAM_HFILES $program_module\"\n   done\n fi\n for program_module in $Program_Modules; do\n   PROGRAM_OFILES=\"$PROGRAM_OFILES $program_module.o\"\n   PROGRAM_CFILES=\"$PROGRAM_CFILES $program_module.c\"\n   PROGRAM_OBJECTS=\"$PROGRAM_OBJECTS \\$(OBJDIR)/$program_module.o\"\n   PROGRAM_ELFOBJECTS=\"$PROGRAM_ELFOBJECTS \\$(ELFDIR)/$program_module.o\"\n done\ndnl echo $PROGRAM_OFILES\ndnl echo $PROGRAM_HFILES\nAC_SUBST(PROGRAM_OFILES)dnl\nAC_SUBST(PROGRAM_CFILES)dnl\nAC_SUBST(PROGRAM_HFILES)dnl\nAC_SUBST(PROGRAM_OBJECTS)dnl\nAC_SUBST(PROGRAM_ELFOBJECTS)dnl\n])\n\ndnl#}}}\n\nAC_DEFUN([JD_APPEND_RULES], dnl#{{{\n[\n echo \"$PROGRAM_OBJECT_RULES\" >> $1\n])\n\ndnl#}}}\n\nAC_DEFUN([JD_APPEND_ELFRULES], dnl#{{{\n[\n echo \"$PROGRAM_ELF_ORULES\" >> $1\n])\n\ndnl#}}}\n\nAC_DEFUN([JD_CREATE_MODULE_EXEC_RULES], dnl#{{{\n[\n for program_module in $Program_Modules; do\n   JD_CREATE_EXEC_RULE($program_module)\n done\n])\n\ndnl#}}}\n\nAC_DEFUN([JD_TERMCAP], dnl#{{{\n[\nAC_PATH_PROG(nc5config, ncurses5-config, no)\nif test \"$nc5config\" = \"no\"\nthen\n  AC_PATH_PROG(nc5config, ncursesw5-config, no)\nfi\nAC_MSG_CHECKING(for terminfo)\nif test \"$nc5config\" != \"no\"\nthen\n   MISC_TERMINFO_DIRS=`$nc5config --terminfo`\nelse\n   MISC_TERMINFO_DIRS=\"\"\nfi\nJD_Terminfo_Dirs=\"$MISC_TERMINFO_DIRS \\\n                  /usr/lib/terminfo \\\n                  /usr/share/terminfo \\\n                  /usr/share/lib/terminfo \\\n\t\t  /usr/local/lib/terminfo\"\nTERMCAP=-ltermcap\n\nfor terminfo_dir in $JD_Terminfo_Dirs\ndo\n   if test -d $terminfo_dir\n   then\n      AC_MSG_RESULT(yes)\n      TERMCAP=\"\"\n      break\n   fi\ndone\nif test \"$TERMCAP\"; then\n  AC_MSG_RESULT(no)\n  AC_DEFINE(USE_TERMCAP,1,[Define to use termcap])\nfi\nAC_SUBST(TERMCAP)dnl\nAC_SUBST(MISC_TERMINFO_DIRS)dnl\n])\n\ndnl#}}}\n\nAC_DEFUN([JD_ANSI_CC], dnl#{{{\n[\nAC_AIX\nAC_REQUIRE([AC_PROG_CC])\nAC_REQUIRE([AC_PROG_CPP])\nAC_REQUIRE([AC_PROG_GCC_TRADITIONAL])\nAC_ISC_POSIX\n\ndnl #This stuff came from Yorick config script\ndnl\ndnl # HPUX needs special stuff\ndnl\nAC_EGREP_CPP(yes,\n[#ifdef hpux\n  yes\n#endif\n], [\nAC_DEFINE(_HPUX_SOURCE,1,[Special define needed for HPUX])\nif test \"$CC\" = cc; then CC=\"cc -Ae\"; fi\n])dnl\ndnl\ndnl #Be sure we've found compiler that understands prototypes\ndnl\nAC_MSG_CHECKING(C compiler that understands ANSI prototypes)\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[ ]], [[\n extern int silly (int);]])],[\n AC_MSG_RESULT($CC looks ok.  Good.)],[\n AC_MSG_RESULT($CC is not a good enough compiler)\n AC_MSG_ERROR(Set env variable CC to your ANSI compiler and rerun configure.)\n ])dnl\n])dnl\n\ndnl#}}}\n\nAC_DEFUN([JD_ELF_COMPILER], dnl#{{{\n[\ndnl #-------------------------------------------------------------------------\ndnl # Check for dynamic linker\ndnl #-------------------------------------------------------------------------\nDYNAMIC_LINK_LIB=\"\"\n\ndnl# AH_TEMPLATE([HAVE_DLOPEN],1,[Define if you have dlopen])\n\nAC_CHECK_HEADER(dlfcn.h,[\n  AC_DEFINE(HAVE_DLFCN_H,1,[Define if you have the dlfcn.h header])\n  AC_CHECK_LIB(dl,dlopen,[\n    DYNAMIC_LINK_LIB=\"-ldl\"\n    AC_DEFINE(HAVE_DLOPEN,1,[Define if you have dlopen])\n   ],[\n    AC_CHECK_FUNC(dlopen,AC_DEFINE(HAVE_DLOPEN,[Define if you have dlopen]))\n    if test \"$ac_cv_func_dlopen\" != yes\n    then\n      AC_MSG_WARN(cannot perform dynamic linking)\n    fi\n   ])])\nAC_SUBST(DYNAMIC_LINK_LIB)\n\nif test \"$GCC\" = yes\nthen\n  if test X\"$CFLAGS\" = X\n  then\n     CFLAGS=\"-O2\"\n  fi\nfi\n\ndnl #Some defaults\nELFLIB=\"lib\\$(THIS_LIB).so\"\nELFLIB_MAJOR=\"\\$(ELFLIB).\\$(ELF_MAJOR_VERSION)\"\nELFLIB_MAJOR_MINOR=\"\\$(ELFLIB_MAJOR).\\$(ELF_MINOR_VERSION)\"\nELFLIB_MAJOR_MINOR_MICRO=\"\\$(ELFLIB_MAJOR_MINOR).\\$(ELF_MICRO_VERSION)\"\n\ndnl# This specifies the target to use in the makefile to install the shared library\nINSTALL_ELFLIB_TARGET=\"install-elf-and-links\"\nELFLIB_BUILD_NAME=\"\\$(ELFLIB_MAJOR_MINOR_MICRO)\"\nINSTALL_MODULE=\"\\$(INSTALL)\"\nSLANG_DLL_CFLAGS=\"\"\nM_LIB=\"-lm\"\n\ncase \"$host_os\" in\n  *linux*|*gnu*|k*bsd*-gnu )\n    DYNAMIC_LINK_FLAGS=\"-Wl,-export-dynamic\"\n    ELF_CC=\"\\$(CC)\"\n    ELF_CFLAGS=\"\\$(CFLAGS) -fPIC\"\n    ELF_LINK=\"\\$(CC) \\$(LDFLAGS) -shared -Wl,-O1 -Wl,--version-script,\\$(VERSION_SCRIPT) -Wl,-soname,\\$(ELFLIB_MAJOR)\"\n    ELF_DEP_LIBS=\"\\$(DL_LIB) -lm -lc\"\n    CC_SHARED_FLAGS=\"-shared -fPIC\"\n    CC_SHARED=\"\\$(CC) $CC_SHARED_FLAGS \\$(CFLAGS)\"\n    ;;\n  *solaris* )\n    if test \"$GCC\" = yes\n    then\n      DYNAMIC_LINK_FLAGS=\"\"\n      ELF_CC=\"\\$(CC)\"\n      ELF_CFLAGS=\"\\$(CFLAGS) -fPIC\"\n      ELF_LINK=\"\\$(CC) \\$(LDFLAGS) -shared -Wl,-ztext -Wl,-h,\\$(ELFLIB_MAJOR)\"\n      ELF_DEP_LIBS=\"\\$(DL_LIB) -lm -lc\"\n      CC_SHARED_FLAGS=\"-G -fPIC\"\n      CC_SHARED=\"\\$(CC) $CC_SHARED_FLAGS \\$(CFLAGS)\"\n    else\n      DYNAMIC_LINK_FLAGS=\"\"\n      ELF_CC=\"\\$(CC)\"\n      ELF_CFLAGS=\"\\$(CFLAGS) -K PIC\"\n      ELF_LINK=\"\\$(CC) \\$(LDFLAGS) -G -h\\$(ELFLIB_MAJOR)\"\n      ELF_DEP_LIBS=\"\\$(DL_LIB) -lm -lc\"\n      CC_SHARED_FLAGS=\"-G -K PIC\"\n      CC_SHARED=\"\\$(CC) $CC_SHARED_FLAGS \\$(CFLAGS)\"\n    fi\n    ;;\n   # osr5 or unixware7 with current or late autoconf\n  *sco3.2v5* | *unixware-5* | *sco-sysv5uw7*)\n     if test \"$GCC\" = yes\n     then\n       DYNAMIC_LINK_FLAGS=\"\"\n       ELF_CC=\"\\$(CC)\"\n       ELF_CFLAGS=\"\\$(CFLAGS) -fPIC\"\n       ELF_LINK=\"\\$(CC) \\$(LDFLAGS) -shared -Wl,-h,\\$(ELFLIB_MAJOR)\"\n       ELF_DEP_LIBS=\n       CC_SHARED_FLAGS=\"-G -fPIC\"\n       CC_SHARED=\"\\$(CC) $CC_SHARED_FLAGS \\$(CFLAGS)\"\n     else\n       DYNAMIC_LINK_FLAGS=\"\"\n       ELF_CC=\"\\$(CC)\"\n       ELF_CFLAGS=\"\\$(CFLAGS) -K pic\"\n       # ELF_LINK=\"ld -G -z text -h#\"\n       ELF_LINK=\"\\$(CC) \\$(LDFLAGS) -G -z text -h\\$(ELFLIB_MAJOR)\"\n       ELF_DEP_LIBS=\n       CC_SHARED_FLAGS=\"-G -K pic\"\n       CC_SHARED=\"\\$(CC) $CC_SHARED_FLAGS \\$(CFLAGS)\"\n     fi\n     ;;\n  *irix6.5* )\n     echo \"Note: ELF compiler for host_os=$host_os may not be correct\"\n     echo \"double-check: 'mode_t', 'pid_t' may be wrong!\"\n     if test \"$GCC\" = yes\n     then\n       # not tested\n       DYNAMIC_LINK_FLAGS=\"\"\n       ELF_CC=\"\\$(CC)\"\n       ELF_CFLAGS=\"\\$(CFLAGS) -fPIC\"\n       ELF_LINK=\"\\$(CC) \\$(LDFLAGS) -shared -Wl,-h,\\$(ELFLIB_MAJOR)\"\n       ELF_DEP_LIBS=\n       CC_SHARED_FLAGS=\"-shared -fPIC\"\n       CC_SHARED=\"\\$(CC) $CC_SHARED_FLAGS \\$(CFLAGS)\"\n     else\n       DYNAMIC_LINK_FLAGS=\"\"\n       ELF_CC=\"\\$(CC)\"\n       ELF_CFLAGS=\"\\$(CFLAGS)\"     # default anyhow\n       ELF_LINK=\"\\$(CC) \\$(LDFLAGS) -shared -o \\$(ELFLIB_MAJOR)\"\n       ELF_DEP_LIBS=\n       CC_SHARED_FLAGS=\"-shared\"\n       CC_SHARED=\"\\$(CC) $CC_SHARED_FLAGS \\$(CFLAGS)\"\n     fi\n     ;;\n  *darwin* )\n     DYNAMIC_LINK_FLAGS=\"\"\n     ELF_CC=\"\\$(CC)\"\n     ELF_CFLAGS=\"\\$(CFLAGS) -fno-common\"\n     ELF_LINK=\"\\$(CC) \\$(LDFLAGS) -dynamiclib -install_name \\$(install_lib_dir)/\\$(ELFLIB_MAJOR) -compatibility_version \\$(ELF_MAJOR_VERSION) -current_version \\$(ELF_MAJOR_VERSION).\\$(ELF_MINOR_VERSION)\"\n     ELF_DEP_LIBS=\"\\$(LDFLAGS) \\$(DL_LIB)\"\n     CC_SHARED_FLAGS=\"-bundle -flat_namespace -undefined suppress -fno-common\"\n     CC_SHARED=\"\\$(CC) $CC_SHARED_FLAGS \\$(CFLAGS)\"\n     ELFLIB=\"lib\\$(THIS_LIB).dylib\"\n     ELFLIB_MAJOR=\"lib\\$(THIS_LIB).\\$(ELF_MAJOR_VERSION).dylib\"\n     ELFLIB_MAJOR_MINOR=\"lib\\$(THIS_LIB).\\$(ELF_MAJOR_VERSION).\\$(ELF_MINOR_VERSION).dylib\"\n     ELFLIB_MAJOR_MINOR_MICRO=\"lib\\$(THIS_LIB).\\$(ELF_MAJOR_VERSION).\\$(ELF_MINOR_VERSION).\\$(ELF_MICRO_VERSION).dylib\"\n     ;;\n  *freebsd* )\n    ELF_CC=\"\\$(CC)\"\n    ELF_CFLAGS=\"\\$(CFLAGS) -fPIC\"\n    #if test \"X$PORTOBJFORMAT\" = \"Xelf\" ; then\n    #  ELF_LINK=\"\\$(CC) \\$(LDFLAGS) -shared -Wl,-soname,\\$(ELFLIB_MAJOR)\"\n    #else\n    #  ELF_LINK=\"ld -Bshareable -x\"\n    #fi\n    ELF_LINK=\"\\$(CC) \\$(LDFLAGS) -shared -Wl,-soname,\\$(ELFLIB_MAJOR)\"\n    ELF_DEP_LIBS=\"\\$(DL_LIB) -lm\"\n    CC_SHARED_FLAGS=\"-shared -fPIC\"\n    CC_SHARED=\"\\$(CC) $CC_SHARED_FLAGS \\$(CFLAGS)\"\n    ;;\n  *cygwin* )\n    DYNAMIC_LINK_FLAGS=\"\"\n    ELF_CC=\"\\$(CC)\"\n    SLANG_DLL_CFLAGS=\"-DSLANG_DLL=1\"\n    ELF_CFLAGS=\"\\$(CFLAGS) -DBUILD_DLL=1\"\n    DLL_IMPLIB_NAME=\"lib\\$(THIS_LIB)\\$(ELFLIB_MAJOR_VERSION).dll.a\"\n    #ELF_LINK=\"\\$(CC) \\$(LDFLAGS) -shared -Wl,-O1 -Wl,--version-script,\\$(VERSION_SCRIPT) -Wl,-soname,\\$(ELFLIB_MAJOR) -Wl,--out-implib=\\$(DLL_IMPLIB_NAME) -Wl,-export-all-symbols -Wl,-enable-auto-import\"\n    ELF_LINK=\"\\$(CC) \\$(LDFLAGS) -shared -Wl,-O1 -Wl,--version-script,\\$(VERSION_SCRIPT) -Wl,-soname,\\$(ELFLIB_MAJOR) -Wl,--out-implib=\\$(DLL_IMPLIB_NAME)\"\n    ELF_DEP_LIBS=\"\\$(DL_LIB) -lm\"\n    CC_SHARED_FLAGS=\"-shared -DSLANG_DLL=1\"\n    CC_SHARED=\"\\$(CC) $CC_SHARED_FLAGS \\$(CFLAGS)\"\n    dnl# CYGWIN prohibits undefined symbols when linking shared libs\n    SLANG_LIB_FOR_MODULES=\"-L\\$(ELFDIR) -lslang\"\n    INSTALL_MODULE=\"\\$(INSTALL)\"\n    INSTALL_ELFLIB_TARGET=\"install-elf-cygwin\"\n    ELFLIB=\"lib\\$(THIS_LIB).dll\"\n    ELFLIB_MAJOR=\"cyg\\$(THIS_LIB)-\\$(ELF_MAJOR_VERSION).dll\"\n    ELFLIB_MAJOR_MINOR=\"cyg\\$(THIS_LIB)-\\$(ELF_MAJOR_VERSION)_\\$(ELF_MINOR_VERSION).dll\"\n    ELFLIB_MAJOR_MINOR_MICRO=\"cyg\\$(THIS_LIB)-\\$(ELF_MAJOR_VERSION)_\\$(ELF_MINOR_VERSION)_\\$(ELF_MICRO_VERSION).dll\"\n    ELFLIB_BUILD_NAME=\"\\$(ELFLIB_MAJOR)\"\n    ;;\n  *haiku* )\n    M_LIB=\"\"\n    DYNAMIC_LINK_FLAGS=\"-Wl,-export-dynamic\"\n    ELF_CC=\"\\$(CC)\"\n    ELF_CFLAGS=\"\\$(CFLAGS) -fPIC\"\n    ELF_LINK=\"\\$(CC) \\$(LDFLAGS) -shared -Wl,-O1 -Wl,--version-script,\\$(VERSION_SCRIPT) -Wl,-soname,\\$(ELFLIB_MAJOR)\"\n    ELF_DEP_LIBS=\"\\$(DL_LIB)\"\n    CC_SHARED_FLAGS=\"-shared -fPIC\"\n    CC_SHARED=\"\\$(CC) $CC_SHARED_FLAGS \\$(CFLAGS)\"\n    ;;\n  * )\n    echo \"Note: ELF compiler for host_os=$host_os may be wrong\"\n    ELF_CC=\"\\$(CC)\"\n    ELF_CFLAGS=\"\\$(CFLAGS) -fPIC\"\n    ELF_LINK=\"\\$(CC) \\$(LDFLAGS) -shared\"\n    ELF_DEP_LIBS=\"\\$(DL_LIB) -lm -lc\"\n    CC_SHARED_FLAGS=\"-shared -fPIC\"\n    CC_SHARED=\"\\$(CC) $CC_SHARED_FLAGS \\$(CFLAGS)\"\nesac\n\nAC_SUBST(ELF_CC)\nAC_SUBST(ELF_CFLAGS)\nAC_SUBST(ELF_LINK)\nAC_SUBST(ELF_LINK_CMD)\nAC_SUBST(ELF_DEP_LIBS)\nAC_SUBST(DYNAMIC_LINK_FLAGS)\nAC_SUBST(CC_SHARED_FLAGS)\nAC_SUBST(CC_SHARED)\nAC_SUBST(ELFLIB)\nAC_SUBST(ELFLIB_MAJOR)\nAC_SUBST(ELFLIB_MAJOR_MINOR)\nAC_SUBST(ELFLIB_MAJOR_MINOR_MICRO)\nAC_SUBST(SLANG_LIB_FOR_MODULES)\nAC_SUBST(DLL_IMPLIB_NAME)\nAC_SUBST(INSTALL_MODULE)\nAC_SUBST(INSTALL_ELFLIB_TARGET)\nAC_SUBST(ELFLIB_BUILD_NAME)\nAC_SUBST(SLANG_DLL_CFLAGS)\nAC_SUBST(M_LIB)\n])\n\ndnl#}}}\n\nAC_DEFUN([JD_F77_COMPILER], dnl#{{{\n[\ncase \"$host_os\" in\n *linux* )\n   F77=\"g77\"\n   F77_LIBS=\"-lg2c\"\n ;;\n *solaris*)\n   F77=f77\n   #F77_LIBS=\"-lF77 -lM77 -L/opt/SUNWspro/SC4.0/lib -lsunmath\"\n   F77_LIBS=\"-lF77 -lM77 -lsunmath\"\n   ;;\n *)\n   echo \"\"\n   echo \"WARNING: Assuming f77 as your FORTRAN compiler\"\n   echo \"\"\n   F77=f77\n   F77_LIBS=\"\"\nesac\nAC_SUBST(F77)\nAC_SUBST(F77_LIBS)\n])\n\ndnl#}}}\n\ndnl# This macro process the --with-xxx, --with-xxxinc, and --with-xxxlib\ndnl# command line arguments and returns the values as shell variables\ndnl# jd_xxx_include_dir and jd_xxx_library_dir.  It does not perform any\ndnl# substitutions, nor check for the existence of the supplied values.\nAC_DEFUN([JD_WITH_LIBRARY_PATHS], dnl#{{{\n[\n JD_UPPERCASE($1,JD_ARG1)\n jd_$1_include_dir=\"\"\n jd_$1_library_dir=\"\"\n if test X\"$jd_with_$1_library\" = X\n then\n   jd_with_$1_library=\"\"\n fi\n\n AC_ARG_WITH($1,\n  [  --with-$1=DIR      Use DIR/lib and DIR/include for $1],\n  [jd_with_$1_arg=$withval], [jd_with_$1_arg=unspecified])\n\n case \"x$jd_with_$1_arg\" in\n   xno)\n     jd_with_$1_library=\"no\"\n    ;;\n   x)\n    dnl# AC_MSG_ERROR(--with-$1 requires a value-- try yes or no)\n    jd_with_$1_library=\"yes\"\n    ;;\n   xunspecified)\n    ;;\n   xyes)\n    jd_with_$1_library=\"yes\"\n    ;;\n   *)\n    jd_with_$1_library=\"yes\"\n    jd_$1_include_dir=\"$jd_with_$1_arg\"/include\n    jd_$1_library_dir=\"$jd_with_$1_arg\"/lib\n    ;;\n esac\n\n AC_ARG_WITH($1lib,\n  [  --with-$1lib=DIR   $1 library in DIR],\n  [jd_with_$1lib_arg=$withval], [jd_with_$1lib_arg=unspecified])\n case \"x$jd_with_$1lib_arg\" in\n   xunspecified)\n    ;;\n   xno)\n    ;;\n   x)\n    AC_MSG_ERROR(--with-$1lib requres a value)\n    ;;\n   *)\n    jd_with_$1_library=\"yes\"\n    jd_$1_library_dir=\"$jd_with_$1lib_arg\"\n    ;;\n esac\n\n AC_ARG_WITH($1inc,\n  [  --with-$1inc=DIR   $1 include files in DIR],\n  [jd_with_$1inc_arg=$withval], [jd_with_$1inc_arg=unspecified])\n case \"x$jd_with_$1inc_arg\" in\n   x)\n     AC_MSG_ERROR(--with-$1inc requres a value)\n     ;;\n   xunspecified)\n     ;;\n   xno)\n     ;;\n   *)\n    jd_with_$1_library=\"yes\"\n    jd_$1_include_dir=\"$jd_with_$1inc_arg\"\n   ;;\n esac\n])\ndnl#}}}\n\ndnl# This function checks for the existence of the specified library $1 with\ndnl# header file $2.  If the library exists, then the shell variables will\ndnl# be created:\ndnl#  jd_with_$1_library=yes/no,\ndnl#  jd_$1_inc_file\ndnl#  jd_$1_include_dir\ndnl#  jd_$1_library_dir\ndnl# If $3 is present, then also look in $3/include+$3/lib\nAC_DEFUN([JD_CHECK_FOR_LIBRARY], dnl#{{{\n[\n  AC_REQUIRE([JD_EXPAND_PREFIX])dnl\n  AC_REQUIRE([JD_GET_SYS_INCLIBS])dnl\n  dnl JD_UPPERCASE($1,JD_ARG1)\n  JD_WITH_LIBRARY_PATHS($1)\n  AC_MSG_CHECKING(for the $1 library and header files $2)\n  if test X\"$jd_with_$1_library\" != Xno\n  then\n    jd_$1_inc_file=$2\n    dnl# jd_with_$1_library=\"yes\"\n\n    if test \"X$jd_$1_inc_file\" = \"X\"\n    then\n       jd_$1_inc_file=$1.h\n    fi\n\n    if test X\"$jd_$1_include_dir\" = X\n    then\n      inc_and_lib_dirs=\"\\\n         $jd_prefix_incdir,$jd_prefix_libdir \\\n\t /usr/local/$1/include,/usr/local/$1/lib \\\n\t /usr/local/include/$1,/usr/local/lib \\\n\t /usr/local/include,/usr/local/lib \\\n\t $JD_SYS_INCLIBS \\\n\t /usr/include/$1,/usr/lib \\\n\t /usr/$1/include,/usr/$1/lib \\\n\t /usr/include,/usr/lib \\\n\t /opt/include/$1,/opt/lib \\\n\t /opt/$1/include,/opt/$1/lib \\\n\t /opt/include,/opt/lib\"\n\n      if test X$3 != X\n      then\n        inc_and_lib_dirs=\"$3/include,$3/lib $inc_and_lib_dirs\"\n      fi\n\n      case \"$host_os\" in\n         *darwin* )\n\t   exts=\"dylib so a\"\n\t   ;;\n\t *cygwin* )\n\t   exts=\"dll.a so a\"\n\t   ;;\n\t * )\n\t   exts=\"so a\"\n      esac\n\n      xincfile=\"$jd_$1_inc_file\"\n      xlibfile=\"lib$1\"\n      jd_with_$1_library=\"no\"\n\n      for include_and_lib in $inc_and_lib_dirs\n      do\n        # Yuk.  Is there a better way to set these variables??\n        xincdir=`echo $include_and_lib | tr ',' ' ' | awk '{print [$]1}'`\n\txlibdir=`echo $include_and_lib | tr ',' ' ' | awk '{print [$]2}'`\n\tfound=0\n\tif test -r $xincdir/$xincfile\n\tthen\n\t  for E in $exts\n\t  do\n\t    if test -r \"$xlibdir/$xlibfile.$E\"\n\t    then\n\t      jd_$1_include_dir=\"$xincdir\"\n\t      jd_$1_library_dir=\"$xlibdir\"\n\t      jd_with_$1_library=\"yes\"\n\t      found=1\n\t      break\n\t    fi\n\t  done\n\tfi\n\tif test $found -eq 1\n\tthen\n\t  break\n\tfi\n      done\n    fi\n  fi\n\n  if test X\"$jd_$1_include_dir\" != X -a X\"$jd_$1_library_dir\" != X\n  then\n    AC_MSG_RESULT(yes: $jd_$1_library_dir and $jd_$1_include_dir)\n    jd_with_$1_library=\"yes\"\n    dnl#  Avoid using /usr/lib and /usr/include because of problems with\n    dnl#  gcc on some solaris systems.\n    JD_ARG1[]_LIB=-L$jd_$1_library_dir\n    JD_ARG1[]_LIB_DIR=$jd_$1_library_dir\n    if test \"X$jd_$1_library_dir\" = \"X/usr/lib\" -o \"X$jd_$1_include_dir\" = \"X/usr/include\"\n    then\n      JD_ARG1[]_LIB=\"\"\n    else\n      JD_SET_RPATH($jd_$1_library_dir)\n    fi\n\n    JD_ARG1[]_INC=-I$jd_$1_include_dir\n    JD_ARG1[]_INC_DIR=$jd_$1_include_dir\n    if test \"X$jd_$1_include_dir\" = \"X/usr/include\"\n    then\n      JD_ARG1[]_INC=\"\"\n    fi\n  else\n    AC_MSG_RESULT(no)\n    jd_with_$1_library=\"no\"\n    JD_ARG1[]_INC=\"\"\n    JD_ARG1[]_LIB=\"\"\n    JD_ARG1[]_INC_DIR=\"\"\n    JD_ARG1[]_LIB_DIR=\"\"\n  fi\n  AC_SUBST(JD_ARG1[]_LIB)\n  AC_SUBST(JD_ARG1[]_INC)\n  AC_SUBST(JD_ARG1[]_LIB_DIR)\n  AC_SUBST(JD_ARG1[]_INC_DIR)\n])\ndnl#}}}\n\nAC_DEFUN([JD_WITH_LIBRARY], dnl#{{{\n[\n  JD_CHECK_FOR_LIBRARY($1, $2, $3)\n  if test \"$jd_with_$1_library\" = \"no\"\n  then\n    AC_MSG_ERROR(unable to find the $1 library and header file $jd_$1_inc_file)\n  fi\n])\ndnl#}}}\n\nAC_DEFUN([JD_SLANG_VERSION], dnl#{{{\n[\n slang_h=$jd_slang_include_dir/slang.h\n AC_MSG_CHECKING(SLANG_VERSION in $slang_h)\nslang_version=`grep \"^#define  *SLANG_VERSION \" $slang_h |\n               awk '{ print [$]3 }'`\nslang_major_version=`echo $slang_version |\n awk '{ print int([$]1/10000) }'`\nslang_minor_version=`echo $slang_version $slang_major_version |\n awk '{ print int(([$]1 - [$]2*10000)/100) }'`\nslang_patchlevel_version=`echo $slang_version $slang_major_version $slang_minor_version |\n awk '{ print ([$]1 - [$]2*10000 - [$]3*100) }'`\n\nAC_MSG_RESULT($slang_major_version.$slang_minor_version.$slang_patchlevel_version)\nAC_SUBST(slang_version)\nAC_SUBST(slang_major_version)\nAC_SUBST(slang_minor_version)\nAC_SUBST(slang_patchlevel_version)\n])\n#}}}\n\nAC_DEFUN([JD_SLANG_MODULE_INSTALL_DIR], dnl#{{{\n[\n  AC_REQUIRE([JD_SLANG_VERSION])\n  if test \"X$slang_major_version\" = \"X1\"\n  then\n    MODULE_INSTALL_DIR=\"$libdir/slang/modules\"\n  else\n    MODULE_INSTALL_DIR=\"$libdir/slang/v$slang_major_version/modules\"\n  fi\n  SL_FILES_INSTALL_DIR=$datadir/slsh/local-packages\n  AC_SUBST(MODULE_INSTALL_DIR)\n  AC_SUBST(SL_FILES_INSTALL_DIR)\n])\n#}}}\n\nAC_DEFUN([JD_CHECK_LONG_LONG], dnl#{{{\n[\n  AC_CHECK_TYPES(long long)\n  AC_CHECK_SIZEOF(long long)\n])\ndnl#}}}\n\nAC_DEFUN([JD_LARGE_FILE_SUPPORTXXX], dnl#{{{\n[\n  AC_REQUIRE([JD_CHECK_LONG_LONG])\n  AC_MSG_CHECKING(whether to explicitly activate long file support)\n  AC_DEFINE(_LARGEFILE_SOURCE, 1)\n  AC_DEFINE(_FILE_OFFSET_BITS, 64)\n  jd_large_file_support=no\n  if test X$ac_cv_type_long_long = Xyes\n  then\n    if test $ac_cv_sizeof_long_long -ge 8\n    then\n      jd_large_file_support=yes\n    fi\n  fi\n\n  if test $jd_large_file_support = yes\n  then\n    AC_DEFINE(HAVE_LARGEFILE_SUPPORT, 1)\n    AC_MSG_RESULT(yes)\n  else\n    AC_MSG_RESULT(no)\n  fi\n])\ndnl#}}}\n\nAC_DEFUN([JD_LARGE_FILE_SUPPORT], dnl#{{{\n[\n  AC_SYS_LARGEFILE\n  AC_FUNC_FSEEKO\n  AC_TYPE_OFF_T\n  AC_CHECK_SIZEOF(off_t)\n])\n#}}}\n\nAC_DEFUN([JD_HAVE_ISINF], dnl#{{{\n[\n  AC_MSG_CHECKING([for isinf])\n  AC_LINK_IFELSE([AC_LANG_PROGRAM( [[#include <math.h>]], [[isinf (0.0);]])],\n                 [AC_MSG_RESULT([yes])\n                  AC_DEFINE(HAVE_ISINF, 1)])\n])\n#}}}\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-slang-2.3.2-aat5lz6qqlpwezyu5gvypwdi5kiqkp5y/spack-src/utf8/testfiles/UTF-8-test.txt",
        "/tmp/vanessa/spack-stage/spack-stage-slang-2.3.2-aat5lz6qqlpwezyu5gvypwdi5kiqkp5y/spack-src/src/slutf8.c",
        "/tmp/vanessa/spack-stage/spack-stage-slang-2.3.2-aat5lz6qqlpwezyu5gvypwdi5kiqkp5y/spack-src/src/sltoken.c",
        "/tmp/vanessa/spack-stage/spack-stage-slang-2.3.2-aat5lz6qqlpwezyu5gvypwdi5kiqkp5y/spack-src/src/mkfiles/mkmake16.exe",
        "/tmp/vanessa/spack-stage/spack-stage-slang-2.3.2-aat5lz6qqlpwezyu5gvypwdi5kiqkp5y/spack-src/src/mkfiles/mkmake.exe",
        "/tmp/vanessa/spack-stage/spack-stage-slang-2.3.2-aat5lz6qqlpwezyu5gvypwdi5kiqkp5y/spack-src/slsh/mkfiles/slsh.ico",
        "/tmp/vanessa/spack-stage/spack-stage-slang-2.3.2-aat5lz6qqlpwezyu5gvypwdi5kiqkp5y/spack-src/slsh/mkfiles/sldoc.ico"
    ],
    "total_files": 528
}