{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-magics-2.29.6-vqqfbdvyg6mlyqrahf3z6j2caam73xfb/spack-src/cmake/ecbuild_add_library.cmake": "# (C) Copyright 1996-2016 ECMWF.\n#\n# This software is licensed under the terms of the Apache Licence Version 2.0\n# which can be obtained at http://www.apache.org/licenses/LICENSE-2.0.\n# In applying this licence, ECMWF does not waive the privileges and immunities\n# granted to it by virtue of its status as an intergovernmental organisation nor\n# does it submit to any jurisdiction.\n\n##############################################################################\n#.rst:\n#\n# ecbuild_add_library\n# ===================\n#\n# Add a library with a given list of source files. ::\n#\n#   ecbuild_add_library( TARGET <name>\n#                        SOURCES <source1> [<source2> ...]\n#                        [ SOURCES_GLOB <glob1> [<glob2> ...] ]\n#                        [ SOURCES_EXCLUDE_REGEX <regex1> [<regex2> ...] ]\n#                        [ TYPE SHARED|STATIC|MODULE|OBJECT ]\n#                        [ OBJECTS <obj1> [<obj2> ...] ]\n#                        [ TEMPLATES <template1> [<template2> ...] ]\n#                        [ LIBS <library1> [<library2> ...] ]\n#                        [ INCLUDES <path1> [<path2> ...] ]\n#                        [ PRIVATE_INCLUDES <path1> [<path2> ...] ]\n#                        [ PUBLIC_INCLUDES <path1> [<path2> ...] ]\n#                        [ DEFINITIONS <definition1> [<definition2> ...] ]\n#                        [ PERSISTENT <file1> [<file2> ...] ]\n#                        [ GENERATED <file1> [<file2> ...] ]\n#                        [ DEPENDS <target1> [<target2> ...] ]\n#                        [ CONDITION <condition> ]\n#                        [ NOINSTALL ]\n#                        [ HEADER_DESTINATION <path> ]\n#                        [ INSTALL_HEADERS LISTED|ALL ]\n#                        [ INSTALL_HEADERS_LIST <header1> [<header2> ...] ]\n#                        [ INSTALL_HEADERS_REGEX <pattern> ]\n#                        [ VERSION <version> | AUTO_VERSION ]\n#                        [ CFLAGS <flag1> [<flag2> ...] ]\n#                        [ CXXFLAGS <flag1> [<flag2> ...] ]\n#                        [ FFLAGS <flag1> [<flag2> ...] ]\n#                        [ LINKER_LANGUAGE <lang> ]\n#                        [ OUTPUT_NAME <name> ] )\n#\n# Options\n# -------\n#\n# TARGET : required\n#   target name\n#\n# SOURCES : required\n#   list of source files\n#\n# TYPE : optional\n#   library type, one of:\n#\n#   :SHARED: libraries are linked dynamically and loaded at runtime\n#   :STATIC: archives of object files for use when linking other targets.\n#   :MODULE: plugins that are not linked into other targets but may be loaded\n#            dynamically at runtime using dlopen-like functionality\n#   :OBJECT: files are just compiled into objects\n#\n# SOURCES_GLOB : optional\n#   search pattern to find source files to compile (note: not recommend according to CMake guidelines)\n#   it is usually better to explicitly list the source files in the CMakeList.txt\n#\n# SOURCES_EXCLUDE_REGEX : optional\n#   search pattern to exclude source files from compilation, applies o the results of SOURCES_GLOB\n#\n# OBJECTS : optional\n#   list of object libraries to add to this target\n#\n# TEMPLATES : optional\n#   list of files specified as SOURCES which are not to be compiled separately\n#   (these are commonly template implementation files included in a header)\n#\n# LIBS : optional\n#   list of libraries to link against (CMake targets or external libraries)\n#\n# INCLUDES : (DEPRECATED) optional\n#   list of paths to add to include directories, behaves as PUBLIC_INCLUDES if CMake >= 2.8.11\n#   and reverts to include_directories() for CMake < 2.8.11\n#\n# PUBLIC_INCLUDES : optional\n#   list of paths to add to include directories which will be publicly exported to other projects\n#\n# PRIVATE_INCLUDES : optional\n#   list of paths to add to include directories which won't be exported to other projects,\n#   equivalent to using a include_directories() before calling this macro\n#\n# DEFINITIONS : optional\n#   list of definitions to add to preprocessor defines\n#\n# PERSISTENT : optional\n#   list of persistent layer object files\n#\n# GENERATED : optional\n#   list of files to mark as generated (sets GENERATED source file property)\n#\n# DEPENDS : optional\n#   list of targets to be built before this target\n#\n# CONDITION : optional\n#   conditional expression which must evaluate to true for this target to be\n#   built (must be valid in a CMake ``if`` statement)\n#\n# NOINSTALL : optional\n#   do not install the library\n#\n# HEADER_DESTINATION\n#   directory to install headers (if not specified, INSTALL_INCLUDE_DIR is used)\n#\n# INSTALL_HEADERS : optional\n#   specify which header files to install:\n#\n#   :LISTED: install header files listed as SOURCES\n#   :ALL:    install all header files ending in .h, .hh, .hpp, .H\n#\n# INSTALL_HEADERS_LIST : optional\n#   list of extra headers to install\n#\n# INSTALL_HEADERS_REGEX : optional\n#   regular expression to match extra headers to install\n#\n# VERSION : optional, AUTO_VERSION or LIBS_VERSION is used if not specified\n#   version to use as library version\n#\n# AUTO_VERSION : optional, ignored if VERSION is specified\n#   automatically version the library with the package version\n#\n# CFLAGS : optional\n#   list of C compiler flags to use for all C source files\n#\n# CXXFLAGS : optional\n#   list of C++ compiler flags to use for all C++ source files\n#\n# FFLAGS : optional\n#   list of Fortran compiler flags to use for all Fortran source files\n#\n# LINKER_LANGUAGE : optional\n#   sets the LINKER_LANGUAGE property on the target\n#\n# OUTPUT_NAME : optional\n#   sets the OUTPUT_NAME property on the target\n#\n##############################################################################\n\nfunction( ecbuild_add_library_impl )\n\n  set( options NOINSTALL AUTO_VERSION )\n  set( single_value_args TARGET TYPE COMPONENT INSTALL_HEADERS INSTALL_HEADERS_REGEX LINKER_LANGUAGE HEADER_DESTINATION VERSION OUTPUT_NAME )\n  set( multi_value_args  SOURCES SOURCES_GLOB SOURCES_EXCLUDE_REGEX OBJECTS TEMPLATES LIBS INCLUDES PRIVATE_INCLUDES PUBLIC_INCLUDES DEPENDS PERSISTENT DEFINITIONS INSTALL_HEADERS_LIST CFLAGS CXXFLAGS FFLAGS GENERATED CONDITION )\n\n  cmake_parse_arguments( _PAR \"${options}\" \"${single_value_args}\" \"${multi_value_args}\"  ${_FIRST_ARG} ${ARGN} )\n\n  if(_PAR_UNPARSED_ARGUMENTS)\n    ecbuild_critical(\"Unknown keywords given to ecbuild_add_library(): \\\"${_PAR_UNPARSED_ARGUMENTS}\\\"\")\n  endif()\n\n  if( NOT _PAR_TARGET  )\n    ecbuild_critical(\"The call to ecbuild_add_library() doesn't specify the TARGET.\")\n  endif()\n\n  if( NOT _PAR_SOURCES AND NOT _PAR_OBJECTS AND NOT _PAR_SOURCES_GLOB )\n    ecbuild_critical(\"The call to ecbuild_add_library() specifies neither SOURCES nor OBJECTS nor SOURCES_GLOB\")\n  endif()\n\n  ### conditional build\n\n  if( DEFINED _PAR_CONDITION )\n    set(_target_condition_file \"${CMAKE_CURRENT_BINARY_DIR}/set_${_PAR_TARGET}_condition.cmake\")\n    file( WRITE  ${_target_condition_file} \"  if( \")\n    foreach( term ${_PAR_CONDITION} )\n      file( APPEND ${_target_condition_file} \" ${term}\")\n    endforeach()\n    file( APPEND ${_target_condition_file} \" )\\n    set(_${_PAR_TARGET}_condition TRUE)\\n  else()\\n    set(_${_PAR_TARGET}_condition FALSE)\\n  endif()\\n\")\n    include( ${_target_condition_file} )\n  else()\n    set( _${_PAR_TARGET}_condition TRUE )\n  endif()\n\n  if( _${_PAR_TARGET}_condition )\n\n    # defines the type of library\n    if( DEFINED _PAR_TYPE )\n      # checks that is either SHARED or STATIC or MODULE\n      if( NOT _PAR_TYPE MATCHES \"STATIC\" AND\n          NOT _PAR_TYPE MATCHES \"SHARED\" AND\n          NOT _PAR_TYPE MATCHES \"OBJECT\" AND\n          NOT _PAR_TYPE MATCHES \"MODULE\" )\n        ecbuild_critical( \"library type must be one of [ STATIC | SHARED | MODULE | OBJECT ]\" )\n      endif()\n      ecbuild_debug(\"ecbuild_add_library(${_PAR_TARGET}): library type is ${_PAR_TYPE}\")\n    endif()\n\n\n    # add persistent layer files\n    if( DEFINED _PAR_PERSISTENT )\n      if( DEFINED PERSISTENT_NAMESPACE )\n        ecbuild_add_persistent( SRC_LIST _PAR_SOURCES FILES ${_PAR_PERSISTENT} NAMESPACE ${PERSISTENT_NAMESPACE} )\n      else()\n        ecbuild_add_persistent( SRC_LIST _PAR_SOURCES FILES ${_PAR_PERSISTENT} )\n      endif()\n    endif()\n\n    # remove templates from compilation sources\n    if( DEFINED _PAR_TEMPLATES )\n      ecbuild_debug(\"ecbuild_add_library(${_PAR_TARGET}): removing ${_PAR_TEMPLATES} from sources\")\n      list( REMOVE_ITEM _PAR_SOURCES ${_PAR_TEMPLATES} )\n      add_custom_target( ${_PAR_TARGET}_templates SOURCES ${_PAR_TEMPLATES} )\n    endif()\n\n    # glob sources\n    unset( _glob_srcs )\n    foreach( pattern ${_PAR_SOURCES_GLOB} )\n        ecbuild_list_add_pattern( LIST _glob_srcs GLOB \"${pattern}\" )\n    endforeach()\n\n    foreach( pattern ${_PAR_SOURCES_EXCLUDE_REGEX} )\n        ecbuild_list_exclude_pattern( LIST _glob_srcs REGEX \"${pattern}\" )\n    endforeach()\n\n    # insert already compiled objects (from OBJECT libraries)\n    unset( _all_objects )\n    foreach( _obj ${_PAR_OBJECTS} )\n      list( APPEND _all_objects $<TARGET_OBJECTS:${_obj}> )\n    endforeach()\n\n    list( APPEND _PAR_SOURCES ${_glob_srcs} )\n\n    if( ECBUILD_LIST_SOURCES )\n      ecbuild_debug(\"ecbuild_add_library(${_PAR_TARGET}): sources ${_PAR_SOURCES}\")\n    endif()\n\n    add_library( ${_PAR_TARGET} ${_PAR_TYPE} ${_PAR_SOURCES}  ${_all_objects} )\n\n    # ecbuild_echo_target( ${_PAR_TARGET} )\n\n    # set OUTPUT_NAME\n\n    if( DEFINED _PAR_OUTPUT_NAME )\n      ecbuild_debug(\"ecbuild_add_library(${_PAR_TARGET}): set OUTPUT_NAME to ${_PAR_OUTPUT_NAME}\")\n      set_target_properties( ${_PAR_TARGET} PROPERTIES OUTPUT_NAME ${_PAR_OUTPUT_NAME} )\n    endif()\n\n    # add extra dependencies\n    if( DEFINED _PAR_DEPENDS)\n      ecbuild_debug(\"ecbuild_add_library(${_PAR_TARGET}): add dependency on ${_PAR_DEPENDS}\")\n      add_dependencies( ${_PAR_TARGET} ${_PAR_DEPENDS} )\n    endif()\n\n    # add the link libraries\n    if( DEFINED _PAR_LIBS )\n      list(REMOVE_DUPLICATES _PAR_LIBS )\n      list(REMOVE_ITEM _PAR_LIBS debug)\n      list(REMOVE_ITEM _PAR_LIBS optimized)\n      foreach( lib ${_PAR_LIBS} ) # skip NOTFOUND\n        if( lib )\n          ecbuild_debug(\"ecbuild_add_library(${_PAR_TARGET}): linking with ${lib}\")\n          target_link_libraries( ${_PAR_TARGET} ${lib} )\n        else()\n          ecbuild_debug(\"ecbuild_add_library(${_PAR_TARGET}): ${lib} not found - not linking\")\n        endif()\n      endforeach()\n    endif()\n\n    # add include dirs if defined\n    if( DEFINED _PAR_INCLUDES )\n      list( REMOVE_DUPLICATES _PAR_INCLUDES )\n      foreach( path ${_PAR_INCLUDES} ) # skip NOTFOUND\n        if( path )\n          ecbuild_debug(\"ecbuild_add_library(${_PAR_TARGET}): add ${path} to include_directories\")\n          if( \"${CMAKE_VERSION}\" VERSION_LESS \"2.8.11\" OR ECBUILD_USE_INCLUDE_DIRECTORIES )\n            include_directories( ${path} )\n          else()\n            target_include_directories( ${_PAR_TARGET} PUBLIC ${path} )\n          endif()\n        else()\n          ecbuild_debug(\"ecbuild_add_library(${_PAR_TARGET}): ${path} not found - not adding to include_directories\")\n        endif()\n      endforeach()\n    endif()\n\n    # add private include dirs if defined\n    if( DEFINED _PAR_PRIVATE_INCLUDES )\n      if( \"${CMAKE_VERSION}\" VERSION_LESS \"2.8.11\" )\n        ecbuild_critical(\"ecbuild_add_library(${_PAR_TARGET}): cannot use PRIVATE_INCLUDES with CMake < 2.8.11\" )\n      endif()\n      list( REMOVE_DUPLICATES _PAR_PRIVATE_INCLUDES )\n      foreach( path ${_PAR_PRIVATE_INCLUDES} ) # skip NOTFOUND\n        if( path )\n          ecbuild_debug(\"ecbuild_add_library(${_PAR_TARGET}): add ${path} to include_directories\")\n          target_include_directories( ${_PAR_TARGET} PRIVATE ${path} )\n        else()\n          ecbuild_debug(\"ecbuild_add_library(${_PAR_TARGET}): ${path} not found - not adding to include_directories\")\n        endif()\n      endforeach()\n    endif()\n\n    # add public include dirs if defined\n    if( DEFINED _PAR_PUBLIC_INCLUDES )\n      if( \"${CMAKE_VERSION}\" VERSION_LESS \"2.8.11\" )\n        ecbuild_critical(\"ecbuild_add_library(${_PAR_TARGET}): cannot use PUBLIC_INCLUDES with CMake < 2.8.11\" )\n      endif()\n      list( REMOVE_DUPLICATES _PAR_PUBLIC_INCLUDES )\n      foreach( path ${_PAR_PUBLIC_INCLUDES} ) # skip NOTFOUND\n        if( path )\n          ecbuild_debug(\"ecbuild_add_library(${_PAR_TARGET}): add ${path} to include_directories\")\n          target_include_directories( ${_PAR_TARGET} PUBLIC ${path} )\n        else()\n          ecbuild_debug(\"ecbuild_add_library(${_PAR_TARGET}): ${path} not found - not adding to include_directories\")\n        endif()\n      endforeach()\n    endif()\n\n    # FIX: Cray compiler PIC option is not detected by CMake\n\n    get_property( _target_pic TARGET ${_PAR_TARGET} PROPERTY POSITION_INDEPENDENT_CODE )\n    if( _target_pic )\n      if( \"${CMAKE_C_COMPILER_ID}\" STREQUAL \"Cray\" )\n        set( _PAR_CFLAGS \"-fPIC -h PIC ${_PAR_CFLAGS}\" )\n      endif()\n      if( \"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"Cray\" )\n        set( _PAR_CXXFLAGS \"-fPIC -h PIC ${_PAR_CXXFLAGS}\" )\n      endif()\n      if( \"${CMAKE_Fortran_COMPILER_ID}\" STREQUAL \"Cray\" )\n        set( _PAR_FFLAGS \"-fPIC -h PIC ${_PAR_FFLAGS}\" )\n      endif()\n    endif()\n\n    # define VERSION if requested\n    if( DEFINED _PAR_VERSION )\n      ecbuild_debug(\"ecbuild_add_library(${_PAR_TARGET}): set version to ${_PAR_VERSION}\")\n      set_target_properties( ${_PAR_TARGET} PROPERTIES VERSION \"${_PAR_VERSION}\" )\n    else()\n      if( _PAR_AUTO_VERSION OR LIBS_VERSION MATCHES \"[Aa][Uu][Tt][Oo]\")\n        ecbuild_debug(\"ecbuild_add_library(${_PAR_TARGET}): set version to ${${PNAME}_MAJOR_VERSION}.${${PNAME}_MINOR_VERSION} (auto)\")\n        set_target_properties( ${_PAR_TARGET} PROPERTIES VERSION \"${${PNAME}_MAJOR_VERSION}.${${PNAME}_MINOR_VERSION}\" )\n      endif()\n      if( LIBS_VERSION AND NOT LIBS_VERSION MATCHES \"[Aa][Uu][Tt][Oo]\" )\n        ecbuild_debug(\"ecbuild_add_library(${_PAR_TARGET}): set version to ${LIBS_VERSION}\")\n        set_target_properties( ${_PAR_TARGET} PROPERTIES VERSION \"${LIBS_VERSION}\" )\n      endif()\n    endif()\n\n    # filter sources\n\n    if( _PAR_SOURCES )\n      ecbuild_separate_sources( TARGET ${_PAR_TARGET} SOURCES ${_PAR_SOURCES} )\n    endif()\n\n    #   ecbuild_debug_var( ${_PAR_TARGET}_h_srcs )\n    #   ecbuild_debug_var( ${_PAR_TARGET}_c_srcs )\n    #   ecbuild_debug_var( ${_PAR_TARGET}_cxx_srcs )\n    #   ecbuild_debug_var( ${_PAR_TARGET}_fortran_srcs )\n\n    # Override compilation flags on a per source file basis\n    ecbuild_target_flags( ${_PAR_TARGET} \"${_PAR_CFLAGS}\" \"${_PAR_CXXFLAGS}\" \"${_PAR_FFLAGS}\" )\n\n    if( DEFINED _PAR_GENERATED )\n      ecbuild_debug(\"ecbuild_add_library(${_PAR_TARGET}): mark as generated ${_PAR_GENERATED}\")\n      set_source_files_properties( ${_PAR_GENERATED} PROPERTIES GENERATED 1 )\n    endif()\n\n    # set linker language\n    if( DEFINED _PAR_LINKER_LANGUAGE )\n      ecbuild_debug(\"ecbuild_add_library(${_PAR_TARGET}): using linker language ${_PAR_LINKER_LANGUAGE}\")\n      set_property( TARGET ${_PAR_TARGET} PROPERTY LINKER_LANGUAGE ${_PAR_LINKER_LANGUAGE} )\n      if( ECBUILD_${_PAR_LINKER_LANGUAGE}_IMPLICIT_LINK_LIBRARIES )\n        target_link_libraries( ${_PAR_TARGET} ${ECBUILD_${_PAR_LINKER_LANGUAGE}_IMPLICIT_LINK_LIBRARIES} )\n      endif()\n    endif()\n\n    if( ECBUILD_IMPLICIT_LINK_LIBRARIES )\n      target_link_libraries( ${_PAR_TARGET} ${ECBUILD_IMPLICIT_LINK_LIBRARIES} )\n    endif()\n\n    # installation (except for OBJECT libraries)\n\n    if( NOT _PAR_NOINSTALL AND NOT _PAR_TYPE MATCHES \"OBJECT\" )\n      ecbuild_debug(\"ecbuild_add_library(${_PAR_TARGET}): installing to ${INSTALL_LIB_DIR}\")\n\n      # and associate with defined component\n      #            if( DEFINED _PAR_COMPONENT )\n      #                set( COMPONENT_DIRECTIVE \"${_PAR_COMPONENT}\" )\n      #            else()\n      #                set( COMPONENT_DIRECTIVE \"${PROJECT_NAME}\" )\n      #            endif()\n\n      install( TARGETS ${_PAR_TARGET}\n        EXPORT  ${PROJECT_NAME}-targets\n        RUNTIME DESTINATION ${INSTALL_BIN_DIR}\n        LIBRARY DESTINATION ${INSTALL_LIB_DIR}\n        ARCHIVE DESTINATION ${INSTALL_LIB_DIR} )\n      #              COMPONENT ${COMPONENT_DIRECTIVE} )\n\n      # install headers\n      if( _PAR_HEADER_DESTINATION )\n        set( _h_destination \"${_PAR_HEADER_DESTINATION}\" )\n      else()\n        set( _h_destination \"${INSTALL_INCLUDE_DIR}\" )\n      endif()\n\n      if( _PAR_INSTALL_HEADERS )\n        if( _PAR_INSTALL_HEADERS MATCHES \"LISTED\" )\n          foreach( file ${${_PAR_TARGET}_h_srcs} )\n            get_filename_component( _file_dir ${file} PATH )\n            install( FILES ${file} DESTINATION \"${_h_destination}/${_file_dir}\" )\n          endforeach()\n          if( DEFINED _PAR_TEMPLATES )\n            foreach( file ${_PAR_TEMPLATES} )\n              get_filename_component( _file_dir ${file} PATH )\n              install( FILES ${file} DESTINATION \"${_h_destination}/${_file_dir}\" )\n            endforeach()\n          endif()\n          if( DEFINED _PAR_PERSISTENT )\n            foreach( file ${_PAR_PERSISTENT} )\n              get_filename_component( _file_dir ${file} PATH )\n              get_filename_component( _file_we  ${file} NAME_WE )\n              set( pfile \"${CMAKE_CURRENT_BINARY_DIR}/${_file_dir}/${_file_we}.b\" )\n              install( FILES ${pfile} DESTINATION \"${_h_destination}/${_file_dir}\" )\n            endforeach()\n          endif()\n        endif()\n        if( _PAR_INSTALL_HEADERS MATCHES \"ALL\" ) # \"(\\\\.h|\\\\.b|\\\\.hxx|\\\\.hh|\\\\.hpp|\\\\.H)\" ????\n          install( DIRECTORY ./  DESTINATION ${_h_destination} FILES_MATCHING PATTERN \"*.h\" )\n          install( DIRECTORY ./  DESTINATION ${_h_destination} FILES_MATCHING PATTERN \"*.hh\" )\n          install( DIRECTORY ./  DESTINATION ${_h_destination} FILES_MATCHING PATTERN \"*.hpp\" )\n          install( DIRECTORY ./  DESTINATION ${_h_destination} FILES_MATCHING PATTERN \"*.H\" )\n        endif()\n      endif()\n\n      if( DEFINED _PAR_INSTALL_HEADERS_LIST )\n        install( FILES ${_PAR_INSTALL_HEADERS_LIST} DESTINATION ${_h_destination} )\n      endif()\n\n      if( DEFINED _PAR_INSTALL_HEADERS_REGEX )\n        install( DIRECTORY ./  DESTINATION ${_h_destination} FILES_MATCHING PATTERN \"${_PAR_INSTALL_HEADERS_REGEX}\")\n      endif()\n\n      # set build location\n\n      set_property( TARGET ${_PAR_TARGET} PROPERTY LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib )\n      set_property( TARGET ${_PAR_TARGET} PROPERTY ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib )\n\n      # export location of target to other projects -- must be exactly after setting the build location (see previous 2 commands)\n\n      export( TARGETS ${_PAR_TARGET} APPEND FILE \"${TOP_PROJECT_TARGETS_FILE}\" )\n\n    endif()\n\n    # add definitions to compilation\n    if( DEFINED _PAR_DEFINITIONS )\n      get_property( _target_defs TARGET ${_PAR_TARGET} PROPERTY COMPILE_DEFINITIONS )\n      list( APPEND _target_defs ${_PAR_DEFINITIONS} )\n      ecbuild_debug(\"ecbuild_add_library(${_PAR_TARGET}): using definitions ${_target_defs}\")\n      set_property( TARGET ${_PAR_TARGET} PROPERTY COMPILE_DEFINITIONS ${_target_defs} )\n    endif()\n\n    # make sure target is removed before - some problems with AIX\n    if( NOT _PAR_TYPE MATCHES \"OBJECT\" )\n      add_custom_command( TARGET ${_PAR_TARGET} PRE_BUILD COMMAND ${CMAKE_COMMAND} -E remove $<TARGET_FILE:${_PAR_TARGET}> )\n    endif()\n\n    # for the links target\n    if( NOT _PAR_NOINSTALL )\n      ecbuild_link_lib( ${_PAR_TARGET} $<TARGET_FILE_NAME:${_PAR_TARGET}> $<TARGET_FILE:${_PAR_TARGET}>  )\n    endif()\n\n    # append to the list of this project targets\n    set( ${PROJECT_NAME}_ALL_LIBS ${${PROJECT_NAME}_ALL_LIBS} ${_PAR_TARGET} CACHE INTERNAL \"\" )\n\n  endif()\n\n  # mark source files as used\n  ecbuild_declare_project_files( ${_PAR_SOURCES} )\n  if( DEFINED _PAR_TEMPLATES )\n    ecbuild_declare_project_files( ${_PAR_TEMPLATES} )\n  endif()\n\nendfunction( ecbuild_add_library_impl  )\n\n##############################################################################\n# auxiliary macro for adding a library\n##############################################################################\n\nmacro( ecbuild_add_library )\n\n  set( options  )\n  set( single_value_args TARGET TYPE )\n  set( multi_value_args )\n\n  cmake_parse_arguments( _p \"${options}\" \"${single_value_args}\" \"${multi_value_args}\"  ${_FIRST_ARG} ${ARGN} )\n\n  if( DEFINED _p_TYPE ) # don't do anything if TYPE was specified\n\n    if( _p_TYPE MATCHES \"[Bb][Oo][Tt][Hh]\" ) # build both types\n\n      ecbuild_add_library_impl( TARGET ${_p_TARGET}        TYPE SHARED ${_p_UNPARSED_ARGUMENTS} )\n      ecbuild_add_library_impl( TARGET ${_p_TARGET}-static TYPE STATIC ${_p_UNPARSED_ARGUMENTS} OUTPUT_NAME ${_p_TARGET} DEPENDS ${_p_TARGET} )\n\n    else()\n\n      ecbuild_add_library_impl( ${ARGV} )\n\n    endif()\n\n  else()\n\n    if( NOT DEFINED _p_TARGET )\n      ecbuild_critical(\"The call to ecbuild_add_library() doesn't specify the TARGET.\")\n    else()\n\n      if( BUILD_SHARED_LIBS MATCHES \"[Bb][Oo][Tt][Hh]\" ) # build both types\n\n        ecbuild_add_library_impl( TARGET ${_p_TARGET}        TYPE SHARED ${_p_UNPARSED_ARGUMENTS} )\n        ecbuild_add_library_impl( TARGET ${_p_TARGET}-static TYPE STATIC ${_p_UNPARSED_ARGUMENTS} DEPENDS ${_p_TARGET} )\n\n        set_target_properties( ${_p_TARGET}-static PROPERTIES OUTPUT_NAME ${_p_TARGET} )\n\n      else()\n\n        ecbuild_add_library_impl( ${ARGV} )\n\n      endif()\n\n    endif()\n\n  endif()\n\nendmacro( ecbuild_add_library )\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-magics-2.29.6-vqqfbdvyg6mlyqrahf3z6j2caam73xfb/spack-src/share/magics/ecmwf_logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-magics-2.29.6-vqqfbdvyg6mlyqrahf3z6j2caam73xfb/spack-src/share/magics/kml_logo_2014.png",
        "/tmp/vanessa/spack-stage/spack-stage-magics-2.29.6-vqqfbdvyg6mlyqrahf3z6j2caam73xfb/spack-src/share/magics/magics_kml_icons.png",
        "/tmp/vanessa/spack-stage/spack-stage-magics-2.29.6-vqqfbdvyg6mlyqrahf3z6j2caam73xfb/spack-src/share/magics/ecmwf_logo.gif",
        "/tmp/vanessa/spack-stage/spack-stage-magics-2.29.6-vqqfbdvyg6mlyqrahf3z6j2caam73xfb/spack-src/share/magics/kml_logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-magics-2.29.6-vqqfbdvyg6mlyqrahf3z6j2caam73xfb/spack-src/share/magics/110m/ne_110m_land.shp",
        "/tmp/vanessa/spack-stage/spack-stage-magics-2.29.6-vqqfbdvyg6mlyqrahf3z6j2caam73xfb/spack-src/share/magics/110m/ne_110m_rivers_lake_centerlines.dbf",
        "/tmp/vanessa/spack-stage/spack-stage-magics-2.29.6-vqqfbdvyg6mlyqrahf3z6j2caam73xfb/spack-src/share/magics/110m/ne_110m_admin_1_states_provinces.sbn",
        "/tmp/vanessa/spack-stage/spack-stage-magics-2.29.6-vqqfbdvyg6mlyqrahf3z6j2caam73xfb/spack-src/share/magics/110m/ne_110m_admin_1_states_provinces.shp",
        "/tmp/vanessa/spack-stage/spack-stage-magics-2.29.6-vqqfbdvyg6mlyqrahf3z6j2caam73xfb/spack-src/share/magics/110m/ne_110m_admin_1_states_provinces.dbf",
        "/tmp/vanessa/spack-stage/spack-stage-magics-2.29.6-vqqfbdvyg6mlyqrahf3z6j2caam73xfb/spack-src/share/magics/110m/ne_110m_admin_0_boundary_lines_land.dbf",
        "/tmp/vanessa/spack-stage/spack-stage-magics-2.29.6-vqqfbdvyg6mlyqrahf3z6j2caam73xfb/spack-src/share/magics/110m/ne_110m_admin_0_boundary_lines_land.shx",
        "/tmp/vanessa/spack-stage/spack-stage-magics-2.29.6-vqqfbdvyg6mlyqrahf3z6j2caam73xfb/spack-src/share/magics/110m/ne_110m_admin_1_states_provinces.sbx",
        "/tmp/vanessa/spack-stage/spack-stage-magics-2.29.6-vqqfbdvyg6mlyqrahf3z6j2caam73xfb/spack-src/share/magics/110m/ne_110m_admin_0_boundary_lines_land.shp",
        "/tmp/vanessa/spack-stage/spack-stage-magics-2.29.6-vqqfbdvyg6mlyqrahf3z6j2caam73xfb/spack-src/share/magics/110m/ne_110m_admin_1_states_provinces.shx",
        "/tmp/vanessa/spack-stage/spack-stage-magics-2.29.6-vqqfbdvyg6mlyqrahf3z6j2caam73xfb/spack-src/share/magics/110m/ne_110m_ocean.dbf",
        "/tmp/vanessa/spack-stage/spack-stage-magics-2.29.6-vqqfbdvyg6mlyqrahf3z6j2caam73xfb/spack-src/share/magics/110m/ne_110m_ocean.shx",
        "/tmp/vanessa/spack-stage/spack-stage-magics-2.29.6-vqqfbdvyg6mlyqrahf3z6j2caam73xfb/spack-src/share/magics/110m/ne_110m_ocean.shp",
        "/tmp/vanessa/spack-stage/spack-stage-magics-2.29.6-vqqfbdvyg6mlyqrahf3z6j2caam73xfb/spack-src/share/magics/110m/ne_110m_rivers_lake_centerlines.shx",
        "/tmp/vanessa/spack-stage/spack-stage-magics-2.29.6-vqqfbdvyg6mlyqrahf3z6j2caam73xfb/spack-src/share/magics/110m/ne_110m_rivers_lake_centerlines.shp",
        "/tmp/vanessa/spack-stage/spack-stage-magics-2.29.6-vqqfbdvyg6mlyqrahf3z6j2caam73xfb/spack-src/share/magics/110m/ne_110m_land.shx",
        "/tmp/vanessa/spack-stage/spack-stage-magics-2.29.6-vqqfbdvyg6mlyqrahf3z6j2caam73xfb/spack-src/share/magics/ttf/DejaVuSans-Oblique.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-magics-2.29.6-vqqfbdvyg6mlyqrahf3z6j2caam73xfb/spack-src/share/magics/ttf/DejaVuSerif-Bold.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-magics-2.29.6-vqqfbdvyg6mlyqrahf3z6j2caam73xfb/spack-src/share/magics/ttf/DejaVuSans.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-magics-2.29.6-vqqfbdvyg6mlyqrahf3z6j2caam73xfb/spack-src/share/magics/ttf/DejaVuSans-Bold.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-magics-2.29.6-vqqfbdvyg6mlyqrahf3z6j2caam73xfb/spack-src/share/magics/ttf/DejaVuSerif.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-magics-2.29.6-vqqfbdvyg6mlyqrahf3z6j2caam73xfb/spack-src/share/magics/ttf/DejaVuSans-BoldOblique.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-magics-2.29.6-vqqfbdvyg6mlyqrahf3z6j2caam73xfb/spack-src/share/magics/ttf/DejaVuSerif-Oblique.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-magics-2.29.6-vqqfbdvyg6mlyqrahf3z6j2caam73xfb/spack-src/share/magics/ttf/DejaVuSerif-BoldOblique.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-magics-2.29.6-vqqfbdvyg6mlyqrahf3z6j2caam73xfb/spack-src/share/magics/10m/ne_10m_land.shp",
        "/tmp/vanessa/spack-stage/spack-stage-magics-2.29.6-vqqfbdvyg6mlyqrahf3z6j2caam73xfb/spack-src/share/magics/10m/ne_10m_rivers_lake_centerlines.shp",
        "/tmp/vanessa/spack-stage/spack-stage-magics-2.29.6-vqqfbdvyg6mlyqrahf3z6j2caam73xfb/spack-src/share/magics/10m/ne_10m_land.dbf",
        "/tmp/vanessa/spack-stage/spack-stage-magics-2.29.6-vqqfbdvyg6mlyqrahf3z6j2caam73xfb/spack-src/share/magics/10m/ne_10m_populated_places_simple.dbf",
        "/tmp/vanessa/spack-stage/spack-stage-magics-2.29.6-vqqfbdvyg6mlyqrahf3z6j2caam73xfb/spack-src/share/magics/10m/ne_10m_populated_places_simple.shx",
        "/tmp/vanessa/spack-stage/spack-stage-magics-2.29.6-vqqfbdvyg6mlyqrahf3z6j2caam73xfb/spack-src/share/magics/10m/ne_10m_rivers_lake_centerlines.shx",
        "/tmp/vanessa/spack-stage/spack-stage-magics-2.29.6-vqqfbdvyg6mlyqrahf3z6j2caam73xfb/spack-src/share/magics/10m/ne_10m_ocean.shx",
        "/tmp/vanessa/spack-stage/spack-stage-magics-2.29.6-vqqfbdvyg6mlyqrahf3z6j2caam73xfb/spack-src/share/magics/10m/ne_10m_land.shx",
        "/tmp/vanessa/spack-stage/spack-stage-magics-2.29.6-vqqfbdvyg6mlyqrahf3z6j2caam73xfb/spack-src/share/magics/10m/ne_10m_admin_0_boundary_lines_land.dbf",
        "/tmp/vanessa/spack-stage/spack-stage-magics-2.29.6-vqqfbdvyg6mlyqrahf3z6j2caam73xfb/spack-src/share/magics/10m/ne_10m_populated_places_simple.shp",
        "/tmp/vanessa/spack-stage/spack-stage-magics-2.29.6-vqqfbdvyg6mlyqrahf3z6j2caam73xfb/spack-src/share/magics/10m/ne_10m_ocean.shp",
        "/tmp/vanessa/spack-stage/spack-stage-magics-2.29.6-vqqfbdvyg6mlyqrahf3z6j2caam73xfb/spack-src/share/magics/10m/ne_10m_admin_1_states_provinces.shx",
        "/tmp/vanessa/spack-stage/spack-stage-magics-2.29.6-vqqfbdvyg6mlyqrahf3z6j2caam73xfb/spack-src/share/magics/10m/ne_10m_ocean.dbf",
        "/tmp/vanessa/spack-stage/spack-stage-magics-2.29.6-vqqfbdvyg6mlyqrahf3z6j2caam73xfb/spack-src/share/magics/10m/ne_10m_rivers_lake_centerlines.dbf",
        "/tmp/vanessa/spack-stage/spack-stage-magics-2.29.6-vqqfbdvyg6mlyqrahf3z6j2caam73xfb/spack-src/share/magics/10m/ne_10m_admin_0_boundary_lines_land.shx",
        "/tmp/vanessa/spack-stage/spack-stage-magics-2.29.6-vqqfbdvyg6mlyqrahf3z6j2caam73xfb/spack-src/share/magics/10m/ne_10m_admin_0_boundary_lines_land.shp",
        "/tmp/vanessa/spack-stage/spack-stage-magics-2.29.6-vqqfbdvyg6mlyqrahf3z6j2caam73xfb/spack-src/share/magics/10m/ne_10m_admin_1_states_provinces.shp",
        "/tmp/vanessa/spack-stage/spack-stage-magics-2.29.6-vqqfbdvyg6mlyqrahf3z6j2caam73xfb/spack-src/share/magics/10m/ne_10m_admin_1_states_provinces.dbf",
        "/tmp/vanessa/spack-stage/spack-stage-magics-2.29.6-vqqfbdvyg6mlyqrahf3z6j2caam73xfb/spack-src/share/magics/50m/ne_50m_land.shx",
        "/tmp/vanessa/spack-stage/spack-stage-magics-2.29.6-vqqfbdvyg6mlyqrahf3z6j2caam73xfb/spack-src/share/magics/50m/ne_50m_ocean.shp",
        "/tmp/vanessa/spack-stage/spack-stage-magics-2.29.6-vqqfbdvyg6mlyqrahf3z6j2caam73xfb/spack-src/share/magics/50m/ne_50m_rivers_lake_centerlines.shx",
        "/tmp/vanessa/spack-stage/spack-stage-magics-2.29.6-vqqfbdvyg6mlyqrahf3z6j2caam73xfb/spack-src/share/magics/50m/ne_50m_admin_1_states_provinces_lines_shp.shx",
        "/tmp/vanessa/spack-stage/spack-stage-magics-2.29.6-vqqfbdvyg6mlyqrahf3z6j2caam73xfb/spack-src/share/magics/50m/ne_50m_ocean.shx",
        "/tmp/vanessa/spack-stage/spack-stage-magics-2.29.6-vqqfbdvyg6mlyqrahf3z6j2caam73xfb/spack-src/share/magics/50m/ne_50m_admin_0_boundary_lines_land.shp",
        "/tmp/vanessa/spack-stage/spack-stage-magics-2.29.6-vqqfbdvyg6mlyqrahf3z6j2caam73xfb/spack-src/share/magics/50m/ne_50m_admin_1_states_provinces_lines_shp.shp",
        "/tmp/vanessa/spack-stage/spack-stage-magics-2.29.6-vqqfbdvyg6mlyqrahf3z6j2caam73xfb/spack-src/share/magics/50m/ne_50m_rivers_lake_centerlines.dbf",
        "/tmp/vanessa/spack-stage/spack-stage-magics-2.29.6-vqqfbdvyg6mlyqrahf3z6j2caam73xfb/spack-src/share/magics/50m/ne_50m_admin_1_states_provinces_lines_shp.dbf",
        "/tmp/vanessa/spack-stage/spack-stage-magics-2.29.6-vqqfbdvyg6mlyqrahf3z6j2caam73xfb/spack-src/share/magics/50m/ne_50m_land.dbf",
        "/tmp/vanessa/spack-stage/spack-stage-magics-2.29.6-vqqfbdvyg6mlyqrahf3z6j2caam73xfb/spack-src/share/magics/50m/ne_50m_admin_0_boundary_lines_land.dbf",
        "/tmp/vanessa/spack-stage/spack-stage-magics-2.29.6-vqqfbdvyg6mlyqrahf3z6j2caam73xfb/spack-src/share/magics/50m/ne_50m_land.shp",
        "/tmp/vanessa/spack-stage/spack-stage-magics-2.29.6-vqqfbdvyg6mlyqrahf3z6j2caam73xfb/spack-src/share/magics/50m/ne_50m_rivers_lake_centerlines.shp",
        "/tmp/vanessa/spack-stage/spack-stage-magics-2.29.6-vqqfbdvyg6mlyqrahf3z6j2caam73xfb/spack-src/share/magics/50m/ne_50m_admin_0_boundary_lines_land.shx",
        "/tmp/vanessa/spack-stage/spack-stage-magics-2.29.6-vqqfbdvyg6mlyqrahf3z6j2caam73xfb/spack-src/share/magics/50m/ne_50m_ocean.dbf",
        "/tmp/vanessa/spack-stage/spack-stage-magics-2.29.6-vqqfbdvyg6mlyqrahf3z6j2caam73xfb/spack-src/test/test.odb",
        "/tmp/vanessa/spack-stage/spack-stage-magics-2.29.6-vqqfbdvyg6mlyqrahf3z6j2caam73xfb/spack-src/test/data.bufr",
        "/tmp/vanessa/spack-stage/spack-stage-magics-2.29.6-vqqfbdvyg6mlyqrahf3z6j2caam73xfb/spack-src/test/data.grib",
        "/tmp/vanessa/spack-stage/spack-stage-magics-2.29.6-vqqfbdvyg6mlyqrahf3z6j2caam73xfb/spack-src/test/synop.bufr",
        "/tmp/vanessa/spack-stage/spack-stage-magics-2.29.6-vqqfbdvyg6mlyqrahf3z6j2caam73xfb/spack-src/cmake/contrib/GreatCMakeCookOff/AddCPP11Flags.cmake"
    ],
    "total_files": 2222
}