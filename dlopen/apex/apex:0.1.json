{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-apex-0.1-jfurj3qwqa2fvblrhtbrpxj4t6vy2tuc/spack-src/src/wrappers/pthread_wrapper.c": "#ifndef _GNU_SOURCE\n#define _GNU_SOURCE\n#endif\n\n#include <dlfcn.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <signal.h>\n#include <pthread_wrapper.h>\n\n#ifdef APEX_PRELOAD_LIB\n/********************************/\n/* LD_PRELOAD wrapper functions */\n/********************************/\n\n#define RESET_DLERROR() dlerror()\n#define CHECK_DLERROR() { \\\n  char const * err = dlerror(); \\\n  if (err) { \\\n    printf(\"Error getting %s handle: %s\\n\", name, err); \\\n    fflush(stdout); \\\n    exit(1); \\\n  } \\\n}\n\nstatic\nvoid * get_system_function_handle(char const * name, void * caller)\n{\n  void * handle;\n\n  // Reset error pointer\n  RESET_DLERROR();\n\n  // Attempt to get the function handle\n  handle = dlsym(RTLD_NEXT, name);\n\n  // Detect errors\n  CHECK_DLERROR();\n\n  // Prevent recursion if more than one wrapping approach has been loaded.\n  // This happens because we support wrapping pthreads three ways at once:\n  // #defines in Profiler.h, -Wl,-wrap on the link line, and LD_PRELOAD.\n  if (handle == caller) {\n    RESET_DLERROR();\n    void * syms = dlopen(NULL, RTLD_NOW);\n    CHECK_DLERROR();\n    do {\n      RESET_DLERROR();\n      handle = dlsym(syms, name);\n      CHECK_DLERROR();\n    } while (handle == caller);\n  }\n\n  return handle;\n}\n\nint pthread_create(pthread_t* thread, const pthread_attr_t* attr,\n    start_routine_p start_routine, void* arg)\n{\n  static pthread_create_p _pthread_create = NULL;\n  if (!_pthread_create) {\n    _pthread_create = (pthread_create_p)get_system_function_handle(\n        \"pthread_create\", (void*)pthread_create);\n  }\n  return apex_pthread_create_wrapper(_pthread_create, thread, attr, start_routine, arg);\n}\n\nint pthread_join(pthread_t thread, void ** retval)\n{\n  static pthread_join_p _pthread_join = NULL;\n  if (!_pthread_join) {\n    _pthread_join = (pthread_join_p)get_system_function_handle(\n        \"pthread_join\", (void*)pthread_join);\n  }\n  return apex_pthread_join_wrapper(_pthread_join, thread, retval);\n}\n\n#if 0\nvoid pthread_exit(void * value_ptr)\n{\n  static pthread_exit_p _pthread_exit = NULL;\n  if (!_pthread_exit) {\n    _pthread_exit = (pthread_exit_p)get_system_function_handle(\n        \"pthread_exit\", (void*)pthread_exit);\n  }\n  apex_pthread_exit_wrapper(_pthread_exit, value_ptr);\n}\n\n#ifdef APEX_PTHREAD_BARRIER_AVAILABLE\nint pthread_barrier_wait(pthread_barrier_t * barrier)\n{\n  static pthread_barrier_wait_p _pthread_barrier_wait = NULL;\n  if (!_pthread_barrier_wait) {\n    _pthread_barrier_wait = (pthread_barrier_wait_p)get_system_function_handle(\n        \"pthread_barrier_wait\", (void*)pthread_barrier_wait);\n  }\n  return apex_pthread_barrier_wait_wrapper(_pthread_barrier_wait, barrier);\n}\n#endif /* APEX_PTHREAD_BARRIER_AVAILABLE */\n#endif /* Disabling the exit and barrier wrappers */\n\n#else // Wrap via the the link line.\n\nint __real_pthread_create(pthread_t *, const pthread_attr_t *, start_routine_p, void *);\nint __wrap_pthread_create(pthread_t * thread, const pthread_attr_t * attr, start_routine_p start_routine, void * arg)\n{\n  return apex_pthread_create_wrapper(__real_pthread_create, thread, attr, start_routine, arg);\n}\n\nint __real_pthread_join(pthread_t, void **);\nint __wrap_pthread_join(pthread_t thread, void **retval)\n{\n  return apex_pthread_join_wrapper(__real_pthread_join, thread, retval);\n}\n\n#if 0\nvoid __real_pthread_exit(void *);\nvoid __wrap_pthread_exit(void * value_ptr)\n{\n  apex_pthread_exit_wrapper(__real_pthread_exit, value_ptr);\n}\n\n#ifdef APEX_PTHREAD_BARRIER_AVAILABLE\nint __real_pthread_barrier_wait(pthread_barrier_t *);\nint __wrap_pthread_barrier_wait(pthread_barrier_t * barrier)\n{\n  return apex_pthread_barrier_wait_wrapper(__real_pthread_barrier_wait, barrier);\n}\n#endif /* APEX_PTHREAD_BARRIER_AVAILABLE */\n#endif /* Disabling the exit and barrier wrappers */\n\n#endif //APEX_PRELOAD_LIB\n"
    },
    "skipped": [],
    "total_files": 266
}