{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-cronie-1.5.5-6uixtuujfnyfuxfcodnoul4ncgg5b3vd/spack-src/configure.ac": "AC_INIT([cronie],[1.5.5],[mmaslano@redhat.com,tmraz@fedoraproject.org])\nAC_CONFIG_HEADER([config.h])\nAC_PREREQ(2.60)\n\nAM_INIT_AUTOMAKE([subdir-objects])\n\nm4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])],\n\t\t\t    [AC_SUBST([AM_DEFAULT_VERBOSITY], [1])])\n\nAC_CANONICAL_HOST\n\ndnl Checks for programs.\n\nAC_PROG_CC\nAC_PROG_INSTALL\nAC_PROG_LN_S\n\ndnl Check for _GNU_SOURCE\nAC_USE_SYSTEM_EXTENSIONS\n\nAC_CHECK_HEADERS( \\\n        dirent.h \\\n        fcntl.h \\\n        getopt.h \\\n        glob.h \\\n        limits.h \\\n        paths.h \\\n        pty.h \\\n        selinux/selinux.h \\\n        stddef.h \\\n        stdint.h \\\n        sys/audit.h \\\n        sys/inotify.h \\\n        sys/stat.h \\\n        sys/stream.h \\\n        sys/stropts.h \\\n        sys/time.h \\\n        sys/timers.h \\\n        sys/types.h \\\n        sys/cdefs.h \\\n        sys/fcntl.h \\\n        time.h \\\n        unistd.h \\\n        util.h \\\n        utime.h \\\n)\n\nAC_CHECK_FUNCS( \\\n       fcntl \\\n       lockf \\\n       flock \\\n       fchown \\\n       fchgrp \\\n)\n\ndnl Checks for typedefs, structures, and compiler characteristics.\nAC_C_CONST\nAC_TYPE_SIGNAL\nAC_TYPE_UID_T\nAC_TYPE_MODE_T\nAC_TYPE_OFF_T\nAC_TYPE_PID_T\nAC_TYPE_SIZE_T\nAC_STRUCT_TM\nAC_CHECK_MEMBERS([struct tm.tm_gmtoff],,,[#include <time.h>])\n\ndnl Checking for programs\n\nAC_ARG_WITH([editor],\n  [AC_HELP_STRING([--with-editor=EDITOR], [path to default editor])],\n  [editor_defined=\"$with_editor\"],\n  [editor_defined=\"no\"])\nAS_IF([test \"x$editor_defined\" = \"xno\"], [\n  AC_PATH_PROG([editor_defined], [vi], [/usr/bin/vi])\n])\nAC_DEFINE_UNQUOTED([EDITOR], [\"$editor_defined\"], [default editor])\n\nAC_MSG_CHECKING(username to run under)\nAC_ARG_WITH(daemon_username,\n[AS_HELP_STRING([--with-daemon_username=DAEMON_USERNAME], [Username to run under (default daemon) ])],\n[ case \"$withval\" in\n  no)\n    AC_MSG_ERROR(Need DAEMON_USERNAME.)\n    ;;\n  yes)\n    DAEMON_USERNAME=daemon\n    AC_MSG_RESULT(daemon)\n    ;;\n  *)\n    DAEMON_USERNAME=\"$withval\";\n    AC_MSG_RESULT($withval)\n    ;;\n    esac ],\n    DAEMON_USERNAME=daemon\n    AC_MSG_RESULT(daemon)\n)\nAC_SUBST(DAEMON_USERNAME)\n\nAC_MSG_CHECKING(groupname to run under)\nAC_ARG_WITH(daemon_groupname,\n[AS_HELP_STRING([--with-daemon_groupname=DAEMON_GROUPNAME], [Groupname to run under (default daemon) ])],\n[ case \"$withval\" in\n  no)\n    AC_MSG_ERROR(Need DAEMON_GROUPNAME.)\n    ;;\n  yes)\n    DAEMON_GROUPNAME=daemon\n    AC_MSG_RESULT(daemon)\n    ;;\n  *)\n    DAEMON_GROUPNAME=\"$withval\";\n    AC_MSG_RESULT($withval)\n    ;;\n    esac ],\n    DAEMON_GROUPNAME=daemon\n    AC_MSG_RESULT(daemon)\n)\nAC_SUBST(DAEMON_GROUPNAME)\n\n# Check whether inotify is accepted\nAC_ARG_WITH(inotify,\n   [AS_HELP_STRING([--with-inotify], [ Enable inotify support])],\n   [ if test \"x$withval\" != \"xno\" ; then\n       AC_DEFINE(WITH_INOTIFY,1,[Define if you want inotify support.])\n       AC_CHECK_HEADER([sys/inotify.h], , AC_MSG_ERROR(Inotify support requires sys/inotify.h header))\n       AC_CHECK_FUNCS(inotify_init inotify_add_watch)\n     fi\n   ]\n)\n\nAC_ARG_ENABLE(pie,CRONIE_HELP_STRING(--enable-pie,Build cronie as a Position Independent Executable))\nif test \"x$enable_pie\" = xyes; then\n    CFLAGS=\"$CFLAGS -fPIE -DPIE\"\n    LDFLAGS=\"$LDFLAGS -pie\"\nfi\n\nAC_ARG_ENABLE(relro,CRONIE_HELP_STRING(--enable-relro,Build cronie with relro flag))\nif test \"x$enable_relro\" = xyes; then\n    LDFLAGS=\"$LDFLAGS -Wl,-z,relro -Wl,-z,now\"\nfi\n\nAC_ARG_ENABLE(bsd, BSD_STRING(--enable-bsd,Build cronie with BSD specific parts))\n\n# Check whether user wants SELinux support\nSELINUX_MSG=\"no\"\nLIBSELINUX=\"\"\nAC_ARG_WITH(selinux,\n        [AS_HELP_STRING([--with-selinux], [Enable SELinux support])],\n        [ if test \"x$withval\" != \"xno\" ; then\n                saved_LIBS=\"$LIBS\"\n                AC_DEFINE(WITH_SELINUX,1,[Define if you want SELinux support.])\n                SELINUX_MSG=\"yes\"\n                AC_CHECK_HEADER([selinux/selinux.h], ,AC_MSG_ERROR(SELinux support requires selinux.h header))\n                AC_CHECK_LIB(selinux, setexeccon, [ LIBSELINUX=\"-lselinux\" ],\n                    AC_MSG_ERROR(SELinux support requires libselinux library))\n                AC_CHECK_FUNCS(getseuserbyname get_default_context_with_level)\n                LIBS=\"$saved_LIBS\"\n                AC_SUBST(LIBSELINUX)\n        fi ]\n)\n\nAC_ARG_WITH(pam, [AS_HELP_STRING([--with-pam], [Build with PAM support])])\nAC_ARG_ENABLE(pam, [AS_HELP_STRING([--enable-pam], [Alias for --with-pam])])\n\n# Check that with_pam and enable_pam are consistent.\n# If neither one is set, the default is \"no.\"\nif test -z \"$with_pam\"; then\n\twith_pam=${enable_pam:-no}\nelif test -n \"$enable_pam\" && test \"$with_pam\" != \"$enable_pam\"; then\n\tAC_MSG_ERROR(\n\t  [Contradicting --with/without-pam and --enable/disable-pam options.])\nfi\n\nAM_CONDITIONAL([PAM], [test \"$with_pam\" != no])\n\nif test \"$with_pam\" != no; then\n\tAC_DEFINE(WITH_PAM, 1, [Define if you want to enable PAM support])\n\tpam_appl_h_found=no\n\tAC_CHECK_HEADERS([pam/pam_appl.h security/pam_appl.h],\n\t\t[pam_appl_h_found=yes])\n\ttest \"$pam_appl_h_found\" = yes ||\n\t\tAC_MSG_ERROR([PAM headers not found])\n\n\tsaved_LIBS=\"$LIBS\"\n\tAC_CHECK_LIB([dl], [dlopen], [libdl_found=yes], [libdl_found=no])\n\tAC_CHECK_LIB(pam, pam_set_item, , AC_MSG_ERROR([*** libpam missing]))\n\tAC_CHECK_FUNCS([pam_getenvlist pam_putenv])\n\tLIBS=\"$saved_LIBS\"\n\n\tcase $libdl_found:\" $LIBS \" in #(\n\t*\" -ldl \"*) LIBPAM= ;; #(\n\tyes:*) LIBPAM=-ldl ;; # libdl found, but is not in $LIBS\n\tesac\n\tAC_SUBST([LIBPAM], [\"-lpam $LIBPAM\"])\nfi\n\nAC_DEFINE(DEBUGGING,1,[Code will be built with debug info.])\n\nAC_DEFINE(MAILARG,\"/usr/sbin/sendmail\",[There will be path to sendmail.])\n\nAC_DEFINE(MAILFMT,\"%s -FCronDaemon -i -odi -oem -oi -t -f %s\",\n[-i    = don't terminate on \".\" by itself\n-Fx   = Set full-name of sender\n-odi  = Option Deliverymode Interactive\n-oem  = Option Errors Mailedtosender\n-oi   = Ignore \".\" alone on a line\n-t    = Get recipient from headers\n-f %s = Envelope sender address\n-d = undocumented but common flag.])\n\nAC_DEFINE(SYSLOG,1,[Using syslog for log messages.])\n\nAC_DEFINE(CAPITALIZE_FOR_PS, 1, [if you have a tm_gmtoff member in struct tm])\n\n# Check whether user wants Linux audit support\nAC_ARG_WITH(audit,\n        [AS_HELP_STRING([--with-audit], [Enable audit trails])],\n        [ if test \"x$withval\" != \"xno\" ; then\n                saved_LIBS=\"$LIBS\"\n                AC_DEFINE(WITH_AUDIT,1,[Define if you want Audit trails.])\n                AC_CHECK_HEADER([libaudit.h], ,AC_MSG_ERROR(Audit trails requires libaudit.h header))\n                AC_CHECK_LIB(audit, audit_open, [ LIBAUDIT=\"-laudit\" ],\n                    AC_MSG_ERROR(Audit support needs audit libraries.))\n                LIBS=\"$saved_LIBS\"\n                AC_SUBST(LIBAUDIT)\n        fi ]\n)\n\nAC_ARG_ENABLE(syscrontab,\n\t[AS_HELP_STRING([--enable-syscrontab], [Build cronie with system crontab enabled.])],\n\t[ if test \"x$enableval\" != xno; then\n\t\tAC_DEFINE(ENABLE_SYSCRONTAB,1,[Define if you want system crontab.])\n\tfi ], [AC_DEFINE(ENABLE_SYSCRONTAB,1,[Define if you want system crontab.])]\n)\n\ndnl CRONIE_VAR_DEFAULT (VAR, DESCRIPTION, DEFAULT)\ndnl --------------------------------------------\nAC_DEFUN([CRONIE_CONF_VAR],\n[AC_ARG_VAR([$1], [$2 @<:@$3@:>@])\nif test \"$$1\" = \"\"; then\n\t$1='$3'\nfi\n])\n\nAC_DEFUN([ANACRON_CONF_VAR],\n[AC_ARG_VAR([$1], [$2 @<:@$3@:>@])\nif test \"$$1\" = \"\"; then\n\t    $1='$3'\n\t\tfi\n])\n\nCRONIE_CONF_VAR([SYSCRONTAB], [the current working directory of the running daemon], [${sysconfdir}/crontab])\nCRONIE_CONF_VAR([SYS_CROND_DIR], [the current working directory of the running daemon], [${sysconfdir}/cron.d])\nCRONIE_CONF_VAR([SPOOL_DIR], [the directory where all the user cron tabs reside], [${localstatedir}/spool/cron])\n\nAC_ARG_ENABLE([anacron], [AS_HELP_STRING([--disable-anacron], [Do not build anacron.])], [], [enable_anacron=yes])\nAM_CONDITIONAL([ANACRON], [test \"$enable_anacron\" = yes])\nif test \"$enable_anacron\" != no; then\n\tANACRON_CONF_VAR([ANACRON_SPOOL_DIR],[The path for anacron locks.],[${localstatedir}/spool/anacron])\n\tANACRON_CONF_VAR([ANACRONTAB],[The anacron table for regular jobs.],[${sysconfdir}/anacrontab])\nfi\n\nAC_CONFIG_FILES([Makefile])\nAC_OUTPUT\n\n"
    },
    "skipped": [],
    "total_files": 54
}