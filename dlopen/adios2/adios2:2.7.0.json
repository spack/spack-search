{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/CTestCustom.cmake.in": "#------------------------------------------------------------------------------#\n# Distributed under the OSI-approved Apache License, Version 2.0.  See\n# accompanying file Copyright.txt for details.\n#------------------------------------------------------------------------------#\n\nset(CTEST_CUSTOM_MAXIMUM_NUMBER_OF_ERRORS 1000)\nset(CTEST_CUSTOM_MAXIMUM_NUMBER_OF_WARNINGS 1000)\n\nlist(APPEND CTEST_CUSTOM_WARNING_EXCEPTION\n  \"H5PL\\\\.c.*dlopen.*glibc\"\n  \"gtest\\\\.cc.*getaddrinfo.*glibc\"\n  \".*/thirdparty/.*\"\n  \"warning: Using '.*' in statically linked applications requires at runtime the shared libraries from the glibc version used for linking\"\n  \"PGC.*compilation completed with warnings\"\n  \"Warning: stand-alone `data16' prefix\"\n  \"Warning: Type mismatch between actual argument.*\"\n  \"Warning: Rank mismatch between actual argument.*\"\n  \"zfp/types.h.*typedef\"\n)\nlist(APPEND CTEST_CUSTOM_COVERAGE_EXCLUDE\n  \".*/thirdparty/.*\"\n  \".*/testing/.*\"\n  \".*/examples/.*\"\n)\n\n# Exclude flaky tests for now\nlist(APPEND CTEST_CUSTOM_TESTS_IGNORE\n)\n",
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/source/adios2/toolkit/profiling/taustubs/README.md": "# Profiling Interface for ADIOS2\n\n_Note:_ This library in ADIOS is a stub wrapper library for the TAU performance measurement system.  In the near future, we will make it more generic for instrumentation-based tools.  In the meantime, it is TAU specific.\n\n## Todo Items\n- [ ] Make the interface generic.\n    - [ ] Replace TAU-specific symbols with generic versions that will be implemented by interested measurement libraries (i.e. Score-P). \n    - [ ] New environment variable specifying location of library containing function implementations.\n\n- [ ] Add CMake support for linking in measurement libraries when static linking.\n\n- [ ] Investigate API call to trigger writing of performance data to the ADIOS2 archive (performance data stored with the science data).\n\n## Overview\n\nThese files contain a thin stub interface for instrumenting ADIOS2 code.  The interface can be compiled away entirely by setting the `-DADIOS2_USE_Profiling=False` option when running cmake.  The function calls are \"stubs\" in the form of function pointers, initialized to ```nullptr```. The functions are optionally assigned at runtime using dlopen() (if necessary) and dlsym() calls, as is typical with plugin implementations. If the function pointers have the value ```nullptr```, then this library is a few more instructions than a no-op.  If the function pointers are assigned, the measurement library functions are called to perform the timing measurement.  The symbols are made available to the environment either through ```LD_PRELOAD``` settings or by linking in the measurement library.\n\nConvenience macros are provided for constructing descriptive timer names using pre-processor definitions such as ```__FILE__```, ```__LINE__```, and ```__func__```.  For C++ codes, there are also scoped timers to minimize instrumentation text and ensure timers are stopped in functions with multiple return locations or exceptions that throw outside of scope.\n\n## Known Issues\n\nBecause the implementation uses ```libdl.so``` there will be linker warnings.  The current implementation has only been tested with dynamically linked executables.  It is known that static executables that load shared-object measurement libraries with pthread support will crash, because of a known issue with thread local storage at program startup.  If this is the case, link a static version of the measurement library into the final static executable.\n\n## How to instrument with the C API\n\nFor C code, you have the option of specifying the timer name or letting the API generate it based on source code location data.\n\n### Timers\n\nOption 1, explicit timer name:\n\n```C\nvoid function_to_time(void) {\n    TAU_START(\"interesting loop\");\n    ...\n    TAU_STOP(\"interesting loop\");\n}\n```\n\nOption 2, generated timer name:\n\n```C\nvoid function_to_time(void) {\n    /* Will generate something like:\n     * \"function_to_time [{filename.c} {123,0}]\"\n     */\n    TAU_START_FUNC();\n    ...\n    TAU_STOP_FUNC();\n}\n```\n\n### Counters\n\nThe interface can be used to capture interesting counter values, too:\n\n```C\nTAU_SAMPLE_COUNTER(\"Bytes Written\", 1024);\n```\n\n### Metadata\n\nThe interface can be used to capture interesting metadata:\n\n```C\nTAU_METADATA(\"ADIOS Method\", \"POSIX\");\n```\n\n## How to instrument with the C++ API\n\nThe C++ API adds additional scoped timers for convenience:\n\n```C++\nvoid function_to_time(void) {\n    /* Will generate something like:\n     * \"function_to_time [{filename.cpp} {123,0}]\"\n     */\n    TAU_SCOPED_TIMER_FUNC();\n    ...\n}\n```\n\n```C++\ndo {\n    TAU_SCOPED_TIMER(\"While Loop\");\n    ...\n} while (!done);\n```\n\n## How to use at runtime\n\nTo use the API with TAU, the executable has to be linked dynamically.  Then the executable will be executed with the ```tau_exec``` wrapper script that will preload the TAU libraries and enable additional TAU features.  ```tau_exec``` should be in the user's ```PATH```:\n\n```bash\nmpirun -np 4 tau_exec -T mpi,papi,pthread,cupti -ebs -cupti -io ./executable\n```\n\nThe example above will use a TAU configuration with PAPI, MPI and Pthread support, and will enable event based sampling (-ebs), CUDA (-cupti) and POSIX I/O measurement (-io).\n",
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/source/adios2/toolkit/profiling/taustubs/tautimer.cpp": "/*\n   Copyright (c) 2019 University of Oregon\n   Distributed under the Boost Software License, Version 1.0. (See accompanying\n   file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)\n */\n\n#include \"tautimer.hpp\"\n/* If not enabled, macro out all of the code in this file. */\n#if defined(TAU_USE_STUBS)\n\n#include <unistd.h>\n#ifndef _GNU_SOURCE\n#define _GNU_SOURCE\n#endif\n#include <dlfcn.h>\n#include <iostream>\n#include <stddef.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <sys/syscall.h>\n#include <sys/types.h>\n#include <thread>\n\n/* Clean assertion handling */\ninline void _tautimer_assert(const char *expression, const char *file, int line)\n{\n    fprintf(stderr, \"Assertion '%s' failed, file '%s' line '%d'.\", expression,\n            file, line);\n    abort();\n}\n\n#ifdef NDEBUG\n#define TAUTIMER_ASSERT(EXPRESSION) ((void)0)\n#else\n#define TAUTIMER_ASSERT(EXPRESSION)                                            \\\n    ((EXPRESSION) ? (void)0 : _tautimer_assert(#EXPRESSION, __FILE__, __LINE__))\n#endif\n\n/* some global static variables to check which thread we are on */\npid_t mypid(0);\nthread_local uint64_t mytid(0UL);\n/* unfortunately, the C++ support just tells us\n * that the ID is \"uninitialized thread\"\n * on OSX when the library is loaded.  Bummer. */\nstd::thread::id main_thread_id = std::this_thread::get_id();\n\n/* Make sure that the TauTimer singleton is constructed when the\n * library is loaded.  This will ensure (on linux, anyway) that\n * we can assert that we have initialized it on the main thread. */\nstatic void __attribute__((constructor)) initialize_library(void);\n\n/* Function pointer types */\n\ntypedef int (*Tau_init_type)(int argc, char **argv);\ntypedef int (*Tau_register_thread_type)(void);\ntypedef int (*Tau_create_top_level_timer_if_necessary_type)(void);\ntypedef int (*Tau_start_type)(const char *);\ntypedef int (*Tau_stop_type)(const char *);\ntypedef int (*Tau_exit_type)(const char *);\ntypedef int (*Tau_dump_prefix_type)(const char *prefix);\ntypedef int (*Tau_set_node_type)(int);\ntypedef int (*Tau_profile_exit_all_threads_type)(void);\ntypedef int (*Tau_get_thread_type)(void);\ntypedef int (*Tau_profile_exit_all_tasks_type)(void);\ntypedef int (*Tau_global_stop_type)(void);\ntypedef int (*Tau_trigger_context_event_type)(char *, double);\ntypedef int (*Tau_metadata_type)(const char *, const char *);\ntypedef void (*Tau_destructor_trigger_type)(void);\n\n/* Function pointers */\n\nint (*my_Tau_init)(int, char **) = NULL;\nint (*my_Tau_register_thread)(void) = NULL;\nint (*my_Tau_create_top_level_timer_if_necessary)(void) = NULL;\nint (*my_Tau_start)(const char *) = NULL;\nint (*my_Tau_stop)(const char *) = NULL;\nint (*my_Tau_exit)(const char *) = NULL;\nint (*my_Tau_set_node)(int) = NULL;\nint (*my_Tau_dump_prefix)(const char *prefix) = NULL;\nint (*my_Tau_profile_exit_all_threads)(void) = NULL;\nint (*my_Tau_get_thread)(void) = NULL;\nint (*my_Tau_profile_exit_all_tasks)(void) = NULL;\nint (*my_Tau_global_stop)(void) = NULL;\nint (*my_Tau_trigger_context_event)(char *, double) = NULL;\nint (*my_Tau_metadata)(const char *, const char *) = NULL;\nvoid (*my_Tau_destructor_trigger)(void) = NULL;\n\nstatic void initialize_library(void)\n{\n    // initialize the library when it is loaded\n    static taustubs::TauTimer &tt = taustubs::TauTimer::get();\n}\n\nvoid open_preload_libraries(void)\n{\n/* We might be in a static executable.  Get the ld_preload variable */\n#if defined(__APPLE__) && defined(__MACH__)\n    const char *envvar = \"DYLD_PRELOAD\";\n#else\n    const char *envvar = \"LD_PRELOAD\";\n#endif\n    const char *preload = getenv(envvar);\n    if (preload != NULL)\n    {\n        // fprintf(stderr, \"%s:\\n%s\\n\", envvar, preload);\n        /* tokenize it */\n        char *token = strtok((char *)preload, \":\");\n        while (token)\n        {\n            /* then, dlopen() first and re-try the dlsym() call. */\n            dlopen(token, RTLD_LAZY);\n            token = strtok(NULL, \":\");\n        }\n    }\n    // fprintf(stderr, \"%s not set!\\n\", envvar);\n}\n\nint assign_function_pointers(void)\n{\n    my_Tau_init = (Tau_init_type)dlsym(RTLD_DEFAULT, \"Tau_init\");\n    if (my_Tau_init == NULL)\n    {\n        open_preload_libraries();\n        my_Tau_init = (Tau_init_type)dlsym(RTLD_DEFAULT, \"Tau_init\");\n        if (my_Tau_init == NULL)\n        {\n            /* Optional - print an error message, because TAU wasn't preloaded!\n             */\n            // fprintf(stderr, \"TAU libraries not loaded, TAU support\n            // unavailable\\n%s\\n\", dlerror());\n            return 1;\n        }\n    }\n    my_Tau_register_thread =\n        (Tau_register_thread_type)dlsym(RTLD_DEFAULT, \"Tau_register_thread\");\n    my_Tau_create_top_level_timer_if_necessary =\n        (Tau_create_top_level_timer_if_necessary_type)dlsym(\n            RTLD_DEFAULT, \"Tau_create_top_level_timer_if_necessary\");\n    my_Tau_start = (Tau_start_type)dlsym(RTLD_DEFAULT, \"Tau_start\");\n    my_Tau_stop = (Tau_stop_type)dlsym(RTLD_DEFAULT, \"Tau_stop\");\n    my_Tau_dump_prefix =\n        (Tau_dump_prefix_type)dlsym(RTLD_DEFAULT, \"Tau_dump_prefix\");\n    my_Tau_exit = (Tau_exit_type)dlsym(RTLD_DEFAULT, \"Tau_exit\");\n    my_Tau_set_node = (Tau_set_node_type)dlsym(RTLD_DEFAULT, \"Tau_set_node\");\n    my_Tau_profile_exit_all_threads = (Tau_profile_exit_all_threads_type)dlsym(\n        RTLD_DEFAULT, \"Tau_profile_exit_all_threads\");\n    my_Tau_get_thread =\n        (Tau_get_thread_type)dlsym(RTLD_DEFAULT, \"Tau_get_thread\");\n    my_Tau_profile_exit_all_tasks = (Tau_profile_exit_all_tasks_type)dlsym(\n        RTLD_DEFAULT, \"Tau_profile_exit_all_tasks\");\n    my_Tau_global_stop =\n        (Tau_global_stop_type)dlsym(RTLD_DEFAULT, \"Tau_global_stop\");\n    my_Tau_trigger_context_event = (Tau_trigger_context_event_type)dlsym(\n        RTLD_DEFAULT, \"Tau_trigger_context_event\");\n    my_Tau_metadata = (Tau_metadata_type)dlsym(RTLD_DEFAULT, \"Tau_metadata\");\n    my_Tau_destructor_trigger = (Tau_destructor_trigger_type)dlsym(\n        RTLD_DEFAULT, \"Tau_destructor_trigger\");\n    return 0;\n}\n\nint tau_stub_initialize_simple_(void)\n{\n    if (assign_function_pointers() == 1)\n    {\n        return 1;\n    }\n    int _argc = 1;\n    const char *_dummy = \"\";\n    char *_argv[1];\n    _argv[0] = (char *)(_dummy);\n    my_Tau_init(_argc, _argv);\n    // Not necessary to set the node id, the TAU MPI_Init wrapper will do that\n    my_Tau_create_top_level_timer_if_necessary();\n    return 0;\n}\n\nvoid tau_stub_exit(void)\n{\n    if (my_Tau_destructor_trigger != NULL)\n    {\n        my_Tau_destructor_trigger();\n    }\n    if (my_Tau_profile_exit_all_threads != NULL)\n    {\n        my_Tau_profile_exit_all_threads();\n    }\n    if (my_Tau_exit != NULL)\n    {\n        my_Tau_exit(\"stub exiting\");\n    }\n}\n\nnamespace taustubs\n{\n\nthread_local bool TauTimer::thread_seen(false);\n\n// constructor\nTauTimer::TauTimer(void) : initialized(false)\n{\n    // Confirm that we are instantializing this singleton on the main thread!\n    mypid = getpid();\n#if defined(__APPLE__) && defined(__MACH__)\n    // why should Apple support gettid? BE DIFFERENT, BABY!\n    pthread_threadid_np(NULL, &mytid);\n#else\n    mytid = (uint64_t)syscall(__NR_gettid);\n#endif\n    if (tau_stub_initialize_simple_() == 0)\n        initialized = true;\n    thread_seen = true;\n}\n\n// The only way to get an instance of this class\nTauTimer &TauTimer::get(void)\n{\n    static std::unique_ptr<TauTimer> instance(new TauTimer);\n    if (!thread_seen && instance.get()->initialized)\n    {\n        _RegisterThread();\n    }\n    return *instance;\n}\n\n// used internally to the class\ninline void TauTimer::_RegisterThread(void)\n{\n    if (!thread_seen)\n    {\n// Confirm that we are NOT on the main thread!\n#if defined(__APPLE__) && defined(__MACH__)\n        // why should Apple support gettid? BE DIFFERENT, BABY!\n        pthread_threadid_np(NULL, &mytid);\n#else\n        mytid = (uint64_t)syscall(__NR_gettid);\n#endif\n        my_Tau_register_thread();\n        my_Tau_create_top_level_timer_if_necessary();\n        thread_seen = true;\n    }\n}\n\n// external API call\nvoid TauTimer::RegisterThread(void)\n{\n    if (!TauTimer::get().initialized)\n        return;\n    _RegisterThread();\n}\n\nvoid TauTimer::Start(const char *timer_name)\n{\n    if (!TauTimer::get().initialized)\n        return;\n    my_Tau_start(timer_name);\n}\n\nvoid TauTimer::Start(const std::string &timer_name)\n{\n    if (!TauTimer::get().initialized)\n        return;\n    my_Tau_start(timer_name.c_str());\n}\n\nvoid TauTimer::Stop(const char *timer_name)\n{\n    if (!TauTimer::get().initialized)\n        return;\n    my_Tau_stop(timer_name);\n}\n\nvoid TauTimer::Stop(const std::string &timer_name)\n{\n    if (!TauTimer::get().initialized)\n        return;\n    my_Tau_stop(timer_name.c_str());\n}\n\nvoid TauTimer::SampleCounter(const char *name, const double value)\n{\n    if (!TauTimer::get().initialized)\n        return;\n    my_Tau_trigger_context_event(const_cast<char *>(name), value);\n}\n\nvoid TauTimer::MetaData(const char *name, const char *value)\n{\n    if (!TauTimer::get().initialized)\n        return;\n    my_Tau_metadata(name, value);\n}\n\nTauTimer::~TauTimer(void) { tau_stub_exit(); }\n\n} // namespace taustubs\n\n/* Expose the API to C and Fortran */\n\nextern \"C\" {\n// C Bindings\nvoid TauTimer_RegisterThread() { taustubs::TauTimer::RegisterThread(); }\n\nvoid TauTimer_Start(const char *timer_name)\n{\n    taustubs::TauTimer::Start(timer_name);\n}\n\nvoid TauTimer_Stop(const char *timer_name)\n{\n    taustubs::TauTimer::Stop(timer_name);\n}\n\nvoid TauTimer_SampleCounter(const char *name, const double value)\n{\n    taustubs::TauTimer::SampleCounter(name, value);\n}\n\nvoid TauTimer_MetaData(const char *name, const char *value)\n{\n    taustubs::TauTimer::MetaData(name, value);\n}\n\n// Fortran Bindings\nvoid tautimer_registerthread_() { taustubs::TauTimer::RegisterThread(); }\n\nvoid tautimer_start_(const char *timer_name)\n{\n    taustubs::TauTimer::Start(timer_name);\n}\n\nvoid tautimer_stop_(const char *timer_name)\n{\n    taustubs::TauTimer::Stop(timer_name);\n}\n\nvoid tautimer_samplecounter_(const char *name, const double value)\n{\n    taustubs::TauTimer::SampleCounter(name, value);\n}\n\nvoid tautimer_metadata_(const char *name, const char *value)\n{\n    taustubs::TauTimer::MetaData(name, value);\n}\n\n} // extern \"C\"\n\n#endif // defined(TAU_USE_STUBS)\n",
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/thirdparty/enet/enet/ltmain.sh": "\n# libtool (GNU libtool) 2.4.2\n# Written by Gordon Matzigkeit <gord@gnu.ai.mit.edu>, 1996\n\n# Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2003, 2004, 2005, 2006,\n# 2007, 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n# This is free software; see the source for copying conditions.  There is NO\n# warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# GNU Libtool is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2 of the License, or\n# (at your option) any later version.\n#\n# As a special exception to the GNU General Public License,\n# if you distribute this file as part of a program or library that\n# is built using GNU Libtool, you may include this file under the\n# same distribution terms that you use for the rest of that program.\n#\n# GNU Libtool is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n# General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with GNU Libtool; see the file COPYING.  If not, a copy\n# can be downloaded from http://www.gnu.org/licenses/gpl.html,\n# or obtained by writing to the Free Software Foundation, Inc.,\n# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n\n# Usage: $progname [OPTION]... [MODE-ARG]...\n#\n# Provide generalized library-building support services.\n#\n#       --config             show all configuration variables\n#       --debug              enable verbose shell tracing\n#   -n, --dry-run            display commands without modifying any files\n#       --features           display basic configuration information and exit\n#       --mode=MODE          use operation mode MODE\n#       --preserve-dup-deps  don't remove duplicate dependency libraries\n#       --quiet, --silent    don't print informational messages\n#       --no-quiet, --no-silent\n#                            print informational messages (default)\n#       --no-warn            don't display warning messages\n#       --tag=TAG            use configuration variables from tag TAG\n#   -v, --verbose            print more informational messages than default\n#       --no-verbose         don't print the extra informational messages\n#       --version            print version information\n#   -h, --help, --help-all   print short, long, or detailed help message\n#\n# MODE must be one of the following:\n#\n#         clean              remove files from the build directory\n#         compile            compile a source file into a libtool object\n#         execute            automatically set library path, then run a program\n#         finish             complete the installation of libtool libraries\n#         install            install libraries or executables\n#         link               create a library or an executable\n#         uninstall          remove libraries from an installed directory\n#\n# MODE-ARGS vary depending on the MODE.  When passed as first option,\n# `--mode=MODE' may be abbreviated as `MODE' or a unique abbreviation of that.\n# Try `$progname --help --mode=MODE' for a more detailed description of MODE.\n#\n# When reporting a bug, please describe a test case to reproduce it and\n# include the following information:\n#\n#         host-triplet:\t$host\n#         shell:\t\t$SHELL\n#         compiler:\t\t$LTCC\n#         compiler flags:\t\t$LTCFLAGS\n#         linker:\t\t$LD (gnu? $with_gnu_ld)\n#         $progname:\t(GNU libtool) 2.4.2\n#         automake:\t$automake_version\n#         autoconf:\t$autoconf_version\n#\n# Report bugs to <bug-libtool@gnu.org>.\n# GNU libtool home page: <http://www.gnu.org/software/libtool/>.\n# General help using GNU software: <http://www.gnu.org/gethelp/>.\n\nPROGRAM=libtool\nPACKAGE=libtool\nVERSION=2.4.2\nTIMESTAMP=\"\"\npackage_revision=1.3337\n\n# Be Bourne compatible\nif test -n \"${ZSH_VERSION+set}\" && (emulate sh) >/dev/null 2>&1; then\n  emulate sh\n  NULLCMD=:\n  # Zsh 3.x and 4.x performs word splitting on ${1+\"$@\"}, which\n  # is contrary to our usage.  Disable this feature.\n  alias -g '${1+\"$@\"}'='\"$@\"'\n  setopt NO_GLOB_SUBST\nelse\n  case `(set -o) 2>/dev/null` in *posix*) set -o posix;; esac\nfi\nBIN_SH=xpg4; export BIN_SH # for Tru64\nDUALCASE=1; export DUALCASE # for MKS sh\n\n# A function that is used when there is no print builtin or printf.\nfunc_fallback_echo ()\n{\n  eval 'cat <<_LTECHO_EOF\n$1\n_LTECHO_EOF'\n}\n\n# NLS nuisances: We save the old values to restore during execute mode.\nlt_user_locale=\nlt_safe_locale=\nfor lt_var in LANG LANGUAGE LC_ALL LC_CTYPE LC_COLLATE LC_MESSAGES\ndo\n  eval \"if test \\\"\\${$lt_var+set}\\\" = set; then\n          save_$lt_var=\\$$lt_var\n          $lt_var=C\n\t  export $lt_var\n\t  lt_user_locale=\\\"$lt_var=\\\\\\$save_\\$lt_var; \\$lt_user_locale\\\"\n\t  lt_safe_locale=\\\"$lt_var=C; \\$lt_safe_locale\\\"\n\tfi\"\ndone\nLC_ALL=C\nLANGUAGE=C\nexport LANGUAGE LC_ALL\n\n$lt_unset CDPATH\n\n\n# Work around backward compatibility issue on IRIX 6.5. On IRIX 6.4+, sh\n# is ksh but when the shell is invoked as \"sh\" and the current value of\n# the _XPG environment variable is not equal to 1 (one), the special\n# positional parameter $0, within a function call, is the name of the\n# function.\nprogpath=\"$0\"\n\n\n\n: ${CP=\"cp -f\"}\ntest \"${ECHO+set}\" = set || ECHO=${as_echo-'printf %s\\n'}\n: ${MAKE=\"make\"}\n: ${MKDIR=\"mkdir\"}\n: ${MV=\"mv -f\"}\n: ${RM=\"rm -f\"}\n: ${SHELL=\"${CONFIG_SHELL-/bin/sh}\"}\n: ${Xsed=\"$SED -e 1s/^X//\"}\n\n# Global variables:\nEXIT_SUCCESS=0\nEXIT_FAILURE=1\nEXIT_MISMATCH=63  # $? = 63 is used to indicate version mismatch to missing.\nEXIT_SKIP=77\t  # $? = 77 is used to indicate a skipped test to automake.\n\nexit_status=$EXIT_SUCCESS\n\n# Make sure IFS has a sensible default\nlt_nl='\n'\nIFS=\" \t$lt_nl\"\n\ndirname=\"s,/[^/]*$,,\"\nbasename=\"s,^.*/,,\"\n\n# func_dirname file append nondir_replacement\n# Compute the dirname of FILE.  If nonempty, add APPEND to the result,\n# otherwise set result to NONDIR_REPLACEMENT.\nfunc_dirname ()\n{\n    func_dirname_result=`$ECHO \"${1}\" | $SED \"$dirname\"`\n    if test \"X$func_dirname_result\" = \"X${1}\"; then\n      func_dirname_result=\"${3}\"\n    else\n      func_dirname_result=\"$func_dirname_result${2}\"\n    fi\n} # func_dirname may be replaced by extended shell implementation\n\n\n# func_basename file\nfunc_basename ()\n{\n    func_basename_result=`$ECHO \"${1}\" | $SED \"$basename\"`\n} # func_basename may be replaced by extended shell implementation\n\n\n# func_dirname_and_basename file append nondir_replacement\n# perform func_basename and func_dirname in a single function\n# call:\n#   dirname:  Compute the dirname of FILE.  If nonempty,\n#             add APPEND to the result, otherwise set result\n#             to NONDIR_REPLACEMENT.\n#             value returned in \"$func_dirname_result\"\n#   basename: Compute filename of FILE.\n#             value retuned in \"$func_basename_result\"\n# Implementation must be kept synchronized with func_dirname\n# and func_basename. For efficiency, we do not delegate to\n# those functions but instead duplicate the functionality here.\nfunc_dirname_and_basename ()\n{\n    # Extract subdirectory from the argument.\n    func_dirname_result=`$ECHO \"${1}\" | $SED -e \"$dirname\"`\n    if test \"X$func_dirname_result\" = \"X${1}\"; then\n      func_dirname_result=\"${3}\"\n    else\n      func_dirname_result=\"$func_dirname_result${2}\"\n    fi\n    func_basename_result=`$ECHO \"${1}\" | $SED -e \"$basename\"`\n} # func_dirname_and_basename may be replaced by extended shell implementation\n\n\n# func_stripname prefix suffix name\n# strip PREFIX and SUFFIX off of NAME.\n# PREFIX and SUFFIX must not contain globbing or regex special\n# characters, hashes, percent signs, but SUFFIX may contain a leading\n# dot (in which case that matches only a dot).\n# func_strip_suffix prefix name\nfunc_stripname ()\n{\n    case ${2} in\n      .*) func_stripname_result=`$ECHO \"${3}\" | $SED \"s%^${1}%%; s%\\\\\\\\${2}\\$%%\"`;;\n      *)  func_stripname_result=`$ECHO \"${3}\" | $SED \"s%^${1}%%; s%${2}\\$%%\"`;;\n    esac\n} # func_stripname may be replaced by extended shell implementation\n\n\n# These SED scripts presuppose an absolute path with a trailing slash.\npathcar='s,^/\\([^/]*\\).*$,\\1,'\npathcdr='s,^/[^/]*,,'\nremovedotparts=':dotsl\n\t\ts@/\\./@/@g\n\t\tt dotsl\n\t\ts,/\\.$,/,'\ncollapseslashes='s@/\\{1,\\}@/@g'\nfinalslash='s,/*$,/,'\n\n# func_normal_abspath PATH\n# Remove doubled-up and trailing slashes, \".\" path components,\n# and cancel out any \"..\" path components in PATH after making\n# it an absolute path.\n#             value returned in \"$func_normal_abspath_result\"\nfunc_normal_abspath ()\n{\n  # Start from root dir and reassemble the path.\n  func_normal_abspath_result=\n  func_normal_abspath_tpath=$1\n  func_normal_abspath_altnamespace=\n  case $func_normal_abspath_tpath in\n    \"\")\n      # Empty path, that just means $cwd.\n      func_stripname '' '/' \"`pwd`\"\n      func_normal_abspath_result=$func_stripname_result\n      return\n    ;;\n    # The next three entries are used to spot a run of precisely\n    # two leading slashes without using negated character classes;\n    # we take advantage of case's first-match behaviour.\n    ///*)\n      # Unusual form of absolute path, do nothing.\n    ;;\n    //*)\n      # Not necessarily an ordinary path; POSIX reserves leading '//'\n      # and for example Cygwin uses it to access remote file shares\n      # over CIFS/SMB, so we conserve a leading double slash if found.\n      func_normal_abspath_altnamespace=/\n    ;;\n    /*)\n      # Absolute path, do nothing.\n    ;;\n    *)\n      # Relative path, prepend $cwd.\n      func_normal_abspath_tpath=`pwd`/$func_normal_abspath_tpath\n    ;;\n  esac\n  # Cancel out all the simple stuff to save iterations.  We also want\n  # the path to end with a slash for ease of parsing, so make sure\n  # there is one (and only one) here.\n  func_normal_abspath_tpath=`$ECHO \"$func_normal_abspath_tpath\" | $SED \\\n        -e \"$removedotparts\" -e \"$collapseslashes\" -e \"$finalslash\"`\n  while :; do\n    # Processed it all yet?\n    if test \"$func_normal_abspath_tpath\" = / ; then\n      # If we ascended to the root using \"..\" the result may be empty now.\n      if test -z \"$func_normal_abspath_result\" ; then\n        func_normal_abspath_result=/\n      fi\n      break\n    fi\n    func_normal_abspath_tcomponent=`$ECHO \"$func_normal_abspath_tpath\" | $SED \\\n        -e \"$pathcar\"`\n    func_normal_abspath_tpath=`$ECHO \"$func_normal_abspath_tpath\" | $SED \\\n        -e \"$pathcdr\"`\n    # Figure out what to do with it\n    case $func_normal_abspath_tcomponent in\n      \"\")\n        # Trailing empty path component, ignore it.\n      ;;\n      ..)\n        # Parent dir; strip last assembled component from result.\n        func_dirname \"$func_normal_abspath_result\"\n        func_normal_abspath_result=$func_dirname_result\n      ;;\n      *)\n        # Actual path component, append it.\n        func_normal_abspath_result=$func_normal_abspath_result/$func_normal_abspath_tcomponent\n      ;;\n    esac\n  done\n  # Restore leading double-slash if one was found on entry.\n  func_normal_abspath_result=$func_normal_abspath_altnamespace$func_normal_abspath_result\n}\n\n# func_relative_path SRCDIR DSTDIR\n# generates a relative path from SRCDIR to DSTDIR, with a trailing\n# slash if non-empty, suitable for immediately appending a filename\n# without needing to append a separator.\n#             value returned in \"$func_relative_path_result\"\nfunc_relative_path ()\n{\n  func_relative_path_result=\n  func_normal_abspath \"$1\"\n  func_relative_path_tlibdir=$func_normal_abspath_result\n  func_normal_abspath \"$2\"\n  func_relative_path_tbindir=$func_normal_abspath_result\n\n  # Ascend the tree starting from libdir\n  while :; do\n    # check if we have found a prefix of bindir\n    case $func_relative_path_tbindir in\n      $func_relative_path_tlibdir)\n        # found an exact match\n        func_relative_path_tcancelled=\n        break\n        ;;\n      $func_relative_path_tlibdir*)\n        # found a matching prefix\n        func_stripname \"$func_relative_path_tlibdir\" '' \"$func_relative_path_tbindir\"\n        func_relative_path_tcancelled=$func_stripname_result\n        if test -z \"$func_relative_path_result\"; then\n          func_relative_path_result=.\n        fi\n        break\n        ;;\n      *)\n        func_dirname $func_relative_path_tlibdir\n        func_relative_path_tlibdir=${func_dirname_result}\n        if test \"x$func_relative_path_tlibdir\" = x ; then\n          # Have to descend all the way to the root!\n          func_relative_path_result=../$func_relative_path_result\n          func_relative_path_tcancelled=$func_relative_path_tbindir\n          break\n        fi\n        func_relative_path_result=../$func_relative_path_result\n        ;;\n    esac\n  done\n\n  # Now calculate path; take care to avoid doubling-up slashes.\n  func_stripname '' '/' \"$func_relative_path_result\"\n  func_relative_path_result=$func_stripname_result\n  func_stripname '/' '/' \"$func_relative_path_tcancelled\"\n  if test \"x$func_stripname_result\" != x ; then\n    func_relative_path_result=${func_relative_path_result}/${func_stripname_result}\n  fi\n\n  # Normalisation. If bindir is libdir, return empty string,\n  # else relative path ending with a slash; either way, target\n  # file name can be directly appended.\n  if test ! -z \"$func_relative_path_result\"; then\n    func_stripname './' '' \"$func_relative_path_result/\"\n    func_relative_path_result=$func_stripname_result\n  fi\n}\n\n# The name of this program:\nfunc_dirname_and_basename \"$progpath\"\nprogname=$func_basename_result\n\n# Make sure we have an absolute path for reexecution:\ncase $progpath in\n  [\\\\/]*|[A-Za-z]:\\\\*) ;;\n  *[\\\\/]*)\n     progdir=$func_dirname_result\n     progdir=`cd \"$progdir\" && pwd`\n     progpath=\"$progdir/$progname\"\n     ;;\n  *)\n     save_IFS=\"$IFS\"\n     IFS=${PATH_SEPARATOR-:}\n     for progdir in $PATH; do\n       IFS=\"$save_IFS\"\n       test -x \"$progdir/$progname\" && break\n     done\n     IFS=\"$save_IFS\"\n     test -n \"$progdir\" || progdir=`pwd`\n     progpath=\"$progdir/$progname\"\n     ;;\nesac\n\n# Sed substitution that helps us do robust quoting.  It backslashifies\n# metacharacters that are still active within double-quoted strings.\nXsed=\"${SED}\"' -e 1s/^X//'\nsed_quote_subst='s/\\([`\"$\\\\]\\)/\\\\\\1/g'\n\n# Same as above, but do not quote variable references.\ndouble_quote_subst='s/\\([\"`\\\\]\\)/\\\\\\1/g'\n\n# Sed substitution that turns a string into a regex matching for the\n# string literally.\nsed_make_literal_regex='s,[].[^$\\\\*\\/],\\\\&,g'\n\n# Sed substitution that converts a w32 file name or path\n# which contains forward slashes, into one that contains\n# (escaped) backslashes.  A very naive implementation.\nlt_sed_naive_backslashify='s|\\\\\\\\*|\\\\|g;s|/|\\\\|g;s|\\\\|\\\\\\\\|g'\n\n# Re-`\\' parameter expansions in output of double_quote_subst that were\n# `\\'-ed in input to the same.  If an odd number of `\\' preceded a '$'\n# in input to double_quote_subst, that '$' was protected from expansion.\n# Since each input `\\' is now two `\\'s, look for any number of runs of\n# four `\\'s followed by two `\\'s and then a '$'.  `\\' that '$'.\nbs='\\\\'\nbs2='\\\\\\\\'\nbs4='\\\\\\\\\\\\\\\\'\ndollar='\\$'\nsed_double_backslash=\"\\\n  s/$bs4/&\\\\\n/g\n  s/^$bs2$dollar/$bs&/\n  s/\\\\([^$bs]\\\\)$bs2$dollar/\\\\1$bs2$bs$dollar/g\n  s/\\n//g\"\n\n# Standard options:\nopt_dry_run=false\nopt_help=false\nopt_quiet=false\nopt_verbose=false\nopt_warning=:\n\n# func_echo arg...\n# Echo program name prefixed message, along with the current mode\n# name if it has been set yet.\nfunc_echo ()\n{\n    $ECHO \"$progname: ${opt_mode+$opt_mode: }$*\"\n}\n\n# func_verbose arg...\n# Echo program name prefixed message in verbose mode only.\nfunc_verbose ()\n{\n    $opt_verbose && func_echo ${1+\"$@\"}\n\n    # A bug in bash halts the script if the last line of a function\n    # fails when set -e is in force, so we need another command to\n    # work around that:\n    :\n}\n\n# func_echo_all arg...\n# Invoke $ECHO with all args, space-separated.\nfunc_echo_all ()\n{\n    $ECHO \"$*\"\n}\n\n# func_error arg...\n# Echo program name prefixed message to standard error.\nfunc_error ()\n{\n    $ECHO \"$progname: ${opt_mode+$opt_mode: }\"${1+\"$@\"} 1>&2\n}\n\n# func_warning arg...\n# Echo program name prefixed warning message to standard error.\nfunc_warning ()\n{\n    $opt_warning && $ECHO \"$progname: ${opt_mode+$opt_mode: }warning: \"${1+\"$@\"} 1>&2\n\n    # bash bug again:\n    :\n}\n\n# func_fatal_error arg...\n# Echo program name prefixed message to standard error, and exit.\nfunc_fatal_error ()\n{\n    func_error ${1+\"$@\"}\n    exit $EXIT_FAILURE\n}\n\n# func_fatal_help arg...\n# Echo program name prefixed message to standard error, followed by\n# a help hint, and exit.\nfunc_fatal_help ()\n{\n    func_error ${1+\"$@\"}\n    func_fatal_error \"$help\"\n}\nhelp=\"Try \\`$progname --help' for more information.\"  ## default\n\n\n# func_grep expression filename\n# Check whether EXPRESSION matches any line of FILENAME, without output.\nfunc_grep ()\n{\n    $GREP \"$1\" \"$2\" >/dev/null 2>&1\n}\n\n\n# func_mkdir_p directory-path\n# Make sure the entire path to DIRECTORY-PATH is available.\nfunc_mkdir_p ()\n{\n    my_directory_path=\"$1\"\n    my_dir_list=\n\n    if test -n \"$my_directory_path\" && test \"$opt_dry_run\" != \":\"; then\n\n      # Protect directory names starting with `-'\n      case $my_directory_path in\n        -*) my_directory_path=\"./$my_directory_path\" ;;\n      esac\n\n      # While some portion of DIR does not yet exist...\n      while test ! -d \"$my_directory_path\"; do\n        # ...make a list in topmost first order.  Use a colon delimited\n\t# list incase some portion of path contains whitespace.\n        my_dir_list=\"$my_directory_path:$my_dir_list\"\n\n        # If the last portion added has no slash in it, the list is done\n        case $my_directory_path in */*) ;; *) break ;; esac\n\n        # ...otherwise throw away the child directory and loop\n        my_directory_path=`$ECHO \"$my_directory_path\" | $SED -e \"$dirname\"`\n      done\n      my_dir_list=`$ECHO \"$my_dir_list\" | $SED 's,:*$,,'`\n\n      save_mkdir_p_IFS=\"$IFS\"; IFS=':'\n      for my_dir in $my_dir_list; do\n\tIFS=\"$save_mkdir_p_IFS\"\n        # mkdir can fail with a `File exist' error if two processes\n        # try to create one of the directories concurrently.  Don't\n        # stop in that case!\n        $MKDIR \"$my_dir\" 2>/dev/null || :\n      done\n      IFS=\"$save_mkdir_p_IFS\"\n\n      # Bail out if we (or some other process) failed to create a directory.\n      test -d \"$my_directory_path\" || \\\n        func_fatal_error \"Failed to create \\`$1'\"\n    fi\n}\n\n\n# func_mktempdir [string]\n# Make a temporary directory that won't clash with other running\n# libtool processes, and avoids race conditions if possible.  If\n# given, STRING is the basename for that directory.\nfunc_mktempdir ()\n{\n    my_template=\"${TMPDIR-/tmp}/${1-$progname}\"\n\n    if test \"$opt_dry_run\" = \":\"; then\n      # Return a directory name, but don't create it in dry-run mode\n      my_tmpdir=\"${my_template}-$$\"\n    else\n\n      # If mktemp works, use that first and foremost\n      my_tmpdir=`mktemp -d \"${my_template}-XXXXXXXX\" 2>/dev/null`\n\n      if test ! -d \"$my_tmpdir\"; then\n        # Failing that, at least try and use $RANDOM to avoid a race\n        my_tmpdir=\"${my_template}-${RANDOM-0}$$\"\n\n        save_mktempdir_umask=`umask`\n        umask 0077\n        $MKDIR \"$my_tmpdir\"\n        umask $save_mktempdir_umask\n      fi\n\n      # If we're not in dry-run mode, bomb out on failure\n      test -d \"$my_tmpdir\" || \\\n        func_fatal_error \"cannot create temporary directory \\`$my_tmpdir'\"\n    fi\n\n    $ECHO \"$my_tmpdir\"\n}\n\n\n# func_quote_for_eval arg\n# Aesthetically quote ARG to be evaled later.\n# This function returns two values: FUNC_QUOTE_FOR_EVAL_RESULT\n# is double-quoted, suitable for a subsequent eval, whereas\n# FUNC_QUOTE_FOR_EVAL_UNQUOTED_RESULT has merely all characters\n# which are still active within double quotes backslashified.\nfunc_quote_for_eval ()\n{\n    case $1 in\n      *[\\\\\\`\\\"\\$]*)\n\tfunc_quote_for_eval_unquoted_result=`$ECHO \"$1\" | $SED \"$sed_quote_subst\"` ;;\n      *)\n        func_quote_for_eval_unquoted_result=\"$1\" ;;\n    esac\n\n    case $func_quote_for_eval_unquoted_result in\n      # Double-quote args containing shell metacharacters to delay\n      # word splitting, command substitution and and variable\n      # expansion for a subsequent eval.\n      # Many Bourne shells cannot handle close brackets correctly\n      # in scan sets, so we specify it separately.\n      *[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t]*|*]*|\"\")\n        func_quote_for_eval_result=\"\\\"$func_quote_for_eval_unquoted_result\\\"\"\n        ;;\n      *)\n        func_quote_for_eval_result=\"$func_quote_for_eval_unquoted_result\"\n    esac\n}\n\n\n# func_quote_for_expand arg\n# Aesthetically quote ARG to be evaled later; same as above,\n# but do not quote variable references.\nfunc_quote_for_expand ()\n{\n    case $1 in\n      *[\\\\\\`\\\"]*)\n\tmy_arg=`$ECHO \"$1\" | $SED \\\n\t    -e \"$double_quote_subst\" -e \"$sed_double_backslash\"` ;;\n      *)\n        my_arg=\"$1\" ;;\n    esac\n\n    case $my_arg in\n      # Double-quote args containing shell metacharacters to delay\n      # word splitting and command substitution for a subsequent eval.\n      # Many Bourne shells cannot handle close brackets correctly\n      # in scan sets, so we specify it separately.\n      *[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t]*|*]*|\"\")\n        my_arg=\"\\\"$my_arg\\\"\"\n        ;;\n    esac\n\n    func_quote_for_expand_result=\"$my_arg\"\n}\n\n\n# func_show_eval cmd [fail_exp]\n# Unless opt_silent is true, then output CMD.  Then, if opt_dryrun is\n# not true, evaluate CMD.  If the evaluation of CMD fails, and FAIL_EXP\n# is given, then evaluate it.\nfunc_show_eval ()\n{\n    my_cmd=\"$1\"\n    my_fail_exp=\"${2-:}\"\n\n    ${opt_silent-false} || {\n      func_quote_for_expand \"$my_cmd\"\n      eval \"func_echo $func_quote_for_expand_result\"\n    }\n\n    if ${opt_dry_run-false}; then :; else\n      eval \"$my_cmd\"\n      my_status=$?\n      if test \"$my_status\" -eq 0; then :; else\n\teval \"(exit $my_status); $my_fail_exp\"\n      fi\n    fi\n}\n\n\n# func_show_eval_locale cmd [fail_exp]\n# Unless opt_silent is true, then output CMD.  Then, if opt_dryrun is\n# not true, evaluate CMD.  If the evaluation of CMD fails, and FAIL_EXP\n# is given, then evaluate it.  Use the saved locale for evaluation.\nfunc_show_eval_locale ()\n{\n    my_cmd=\"$1\"\n    my_fail_exp=\"${2-:}\"\n\n    ${opt_silent-false} || {\n      func_quote_for_expand \"$my_cmd\"\n      eval \"func_echo $func_quote_for_expand_result\"\n    }\n\n    if ${opt_dry_run-false}; then :; else\n      eval \"$lt_user_locale\n\t    $my_cmd\"\n      my_status=$?\n      eval \"$lt_safe_locale\"\n      if test \"$my_status\" -eq 0; then :; else\n\teval \"(exit $my_status); $my_fail_exp\"\n      fi\n    fi\n}\n\n# func_tr_sh\n# Turn $1 into a string suitable for a shell variable name.\n# Result is stored in $func_tr_sh_result.  All characters\n# not in the set a-zA-Z0-9_ are replaced with '_'. Further,\n# if $1 begins with a digit, a '_' is prepended as well.\nfunc_tr_sh ()\n{\n  case $1 in\n  [0-9]* | *[!a-zA-Z0-9_]*)\n    func_tr_sh_result=`$ECHO \"$1\" | $SED 's/^\\([0-9]\\)/_\\1/; s/[^a-zA-Z0-9_]/_/g'`\n    ;;\n  * )\n    func_tr_sh_result=$1\n    ;;\n  esac\n}\n\n\n# func_version\n# Echo version message to standard output and exit.\nfunc_version ()\n{\n    $opt_debug\n\n    $SED -n '/(C)/!b go\n\t:more\n\t/\\./!{\n\t  N\n\t  s/\\n# / /\n\t  b more\n\t}\n\t:go\n\t/^# '$PROGRAM' (GNU /,/# warranty; / {\n        s/^# //\n\ts/^# *$//\n        s/\\((C)\\)[ 0-9,-]*\\( [1-9][0-9]*\\)/\\1\\2/\n        p\n     }' < \"$progpath\"\n     exit $?\n}\n\n# func_usage\n# Echo short help message to standard output and exit.\nfunc_usage ()\n{\n    $opt_debug\n\n    $SED -n '/^# Usage:/,/^#  *.*--help/ {\n        s/^# //\n\ts/^# *$//\n\ts/\\$progname/'$progname'/\n\tp\n    }' < \"$progpath\"\n    echo\n    $ECHO \"run \\`$progname --help | more' for full usage\"\n    exit $?\n}\n\n# func_help [NOEXIT]\n# Echo long help message to standard output and exit,\n# unless 'noexit' is passed as argument.\nfunc_help ()\n{\n    $opt_debug\n\n    $SED -n '/^# Usage:/,/# Report bugs to/ {\n\t:print\n        s/^# //\n\ts/^# *$//\n\ts*\\$progname*'$progname'*\n\ts*\\$host*'\"$host\"'*\n\ts*\\$SHELL*'\"$SHELL\"'*\n\ts*\\$LTCC*'\"$LTCC\"'*\n\ts*\\$LTCFLAGS*'\"$LTCFLAGS\"'*\n\ts*\\$LD*'\"$LD\"'*\n\ts/\\$with_gnu_ld/'\"$with_gnu_ld\"'/\n\ts/\\$automake_version/'\"`(${AUTOMAKE-automake} --version) 2>/dev/null |$SED 1q`\"'/\n\ts/\\$autoconf_version/'\"`(${AUTOCONF-autoconf} --version) 2>/dev/null |$SED 1q`\"'/\n\tp\n\td\n     }\n     /^# .* home page:/b print\n     /^# General help using/b print\n     ' < \"$progpath\"\n    ret=$?\n    if test -z \"$1\"; then\n      exit $ret\n    fi\n}\n\n# func_missing_arg argname\n# Echo program name prefixed message to standard error and set global\n# exit_cmd.\nfunc_missing_arg ()\n{\n    $opt_debug\n\n    func_error \"missing argument for $1.\"\n    exit_cmd=exit\n}\n\n\n# func_split_short_opt shortopt\n# Set func_split_short_opt_name and func_split_short_opt_arg shell\n# variables after splitting SHORTOPT after the 2nd character.\nfunc_split_short_opt ()\n{\n    my_sed_short_opt='1s/^\\(..\\).*$/\\1/;q'\n    my_sed_short_rest='1s/^..\\(.*\\)$/\\1/;q'\n\n    func_split_short_opt_name=`$ECHO \"$1\" | $SED \"$my_sed_short_opt\"`\n    func_split_short_opt_arg=`$ECHO \"$1\" | $SED \"$my_sed_short_rest\"`\n} # func_split_short_opt may be replaced by extended shell implementation\n\n\n# func_split_long_opt longopt\n# Set func_split_long_opt_name and func_split_long_opt_arg shell\n# variables after splitting LONGOPT at the `=' sign.\nfunc_split_long_opt ()\n{\n    my_sed_long_opt='1s/^\\(--[^=]*\\)=.*/\\1/;q'\n    my_sed_long_arg='1s/^--[^=]*=//'\n\n    func_split_long_opt_name=`$ECHO \"$1\" | $SED \"$my_sed_long_opt\"`\n    func_split_long_opt_arg=`$ECHO \"$1\" | $SED \"$my_sed_long_arg\"`\n} # func_split_long_opt may be replaced by extended shell implementation\n\nexit_cmd=:\n\n\n\n\n\nmagic=\"%%%MAGIC variable%%%\"\nmagic_exe=\"%%%MAGIC EXE variable%%%\"\n\n# Global variables.\nnonopt=\npreserve_args=\nlo2o=\"s/\\\\.lo\\$/.${objext}/\"\no2lo=\"s/\\\\.${objext}\\$/.lo/\"\nextracted_archives=\nextracted_serial=0\n\n# If this variable is set in any of the actions, the command in it\n# will be execed at the end.  This prevents here-documents from being\n# left over by shells.\nexec_cmd=\n\n# func_append var value\n# Append VALUE to the end of shell variable VAR.\nfunc_append ()\n{\n    eval \"${1}=\\$${1}\\${2}\"\n} # func_append may be replaced by extended shell implementation\n\n# func_append_quoted var value\n# Quote VALUE and append to the end of shell variable VAR, separated\n# by a space.\nfunc_append_quoted ()\n{\n    func_quote_for_eval \"${2}\"\n    eval \"${1}=\\$${1}\\\\ \\$func_quote_for_eval_result\"\n} # func_append_quoted may be replaced by extended shell implementation\n\n\n# func_arith arithmetic-term...\nfunc_arith ()\n{\n    func_arith_result=`expr \"${@}\"`\n} # func_arith may be replaced by extended shell implementation\n\n\n# func_len string\n# STRING may not start with a hyphen.\nfunc_len ()\n{\n    func_len_result=`expr \"${1}\" : \".*\" 2>/dev/null || echo $max_cmd_len`\n} # func_len may be replaced by extended shell implementation\n\n\n# func_lo2o object\nfunc_lo2o ()\n{\n    func_lo2o_result=`$ECHO \"${1}\" | $SED \"$lo2o\"`\n} # func_lo2o may be replaced by extended shell implementation\n\n\n# func_xform libobj-or-source\nfunc_xform ()\n{\n    func_xform_result=`$ECHO \"${1}\" | $SED 's/\\.[^.]*$/.lo/'`\n} # func_xform may be replaced by extended shell implementation\n\n\n# func_fatal_configuration arg...\n# Echo program name prefixed message to standard error, followed by\n# a configuration failure hint, and exit.\nfunc_fatal_configuration ()\n{\n    func_error ${1+\"$@\"}\n    func_error \"See the $PACKAGE documentation for more information.\"\n    func_fatal_error \"Fatal configuration error.\"\n}\n\n\n# func_config\n# Display the configuration for all the tags in this script.\nfunc_config ()\n{\n    re_begincf='^# ### BEGIN LIBTOOL'\n    re_endcf='^# ### END LIBTOOL'\n\n    # Default configuration.\n    $SED \"1,/$re_begincf CONFIG/d;/$re_endcf CONFIG/,\\$d\" < \"$progpath\"\n\n    # Now print the configurations for the tags.\n    for tagname in $taglist; do\n      $SED -n \"/$re_begincf TAG CONFIG: $tagname\\$/,/$re_endcf TAG CONFIG: $tagname\\$/p\" < \"$progpath\"\n    done\n\n    exit $?\n}\n\n# func_features\n# Display the features supported by this script.\nfunc_features ()\n{\n    echo \"host: $host\"\n    if test \"$build_libtool_libs\" = yes; then\n      echo \"enable shared libraries\"\n    else\n      echo \"disable shared libraries\"\n    fi\n    if test \"$build_old_libs\" = yes; then\n      echo \"enable static libraries\"\n    else\n      echo \"disable static libraries\"\n    fi\n\n    exit $?\n}\n\n# func_enable_tag tagname\n# Verify that TAGNAME is valid, and either flag an error and exit, or\n# enable the TAGNAME tag.  We also add TAGNAME to the global $taglist\n# variable here.\nfunc_enable_tag ()\n{\n  # Global variable:\n  tagname=\"$1\"\n\n  re_begincf=\"^# ### BEGIN LIBTOOL TAG CONFIG: $tagname\\$\"\n  re_endcf=\"^# ### END LIBTOOL TAG CONFIG: $tagname\\$\"\n  sed_extractcf=\"/$re_begincf/,/$re_endcf/p\"\n\n  # Validate tagname.\n  case $tagname in\n    *[!-_A-Za-z0-9,/]*)\n      func_fatal_error \"invalid tag name: $tagname\"\n      ;;\n  esac\n\n  # Don't test for the \"default\" C tag, as we know it's\n  # there but not specially marked.\n  case $tagname in\n    CC) ;;\n    *)\n      if $GREP \"$re_begincf\" \"$progpath\" >/dev/null 2>&1; then\n\ttaglist=\"$taglist $tagname\"\n\n\t# Evaluate the configuration.  Be careful to quote the path\n\t# and the sed script, to avoid splitting on whitespace, but\n\t# also don't use non-portable quotes within backquotes within\n\t# quotes we have to do it in 2 steps:\n\textractedcf=`$SED -n -e \"$sed_extractcf\" < \"$progpath\"`\n\teval \"$extractedcf\"\n      else\n\tfunc_error \"ignoring unknown tag $tagname\"\n      fi\n      ;;\n  esac\n}\n\n# func_check_version_match\n# Ensure that we are using m4 macros, and libtool script from the same\n# release of libtool.\nfunc_check_version_match ()\n{\n  if test \"$package_revision\" != \"$macro_revision\"; then\n    if test \"$VERSION\" != \"$macro_version\"; then\n      if test -z \"$macro_version\"; then\n        cat >&2 <<_LT_EOF\n$progname: Version mismatch error.  This is $PACKAGE $VERSION, but the\n$progname: definition of this LT_INIT comes from an older release.\n$progname: You should recreate aclocal.m4 with macros from $PACKAGE $VERSION\n$progname: and run autoconf again.\n_LT_EOF\n      else\n        cat >&2 <<_LT_EOF\n$progname: Version mismatch error.  This is $PACKAGE $VERSION, but the\n$progname: definition of this LT_INIT comes from $PACKAGE $macro_version.\n$progname: You should recreate aclocal.m4 with macros from $PACKAGE $VERSION\n$progname: and run autoconf again.\n_LT_EOF\n      fi\n    else\n      cat >&2 <<_LT_EOF\n$progname: Version mismatch error.  This is $PACKAGE $VERSION, revision $package_revision,\n$progname: but the definition of this LT_INIT comes from revision $macro_revision.\n$progname: You should recreate aclocal.m4 with macros from revision $package_revision\n$progname: of $PACKAGE $VERSION and run autoconf again.\n_LT_EOF\n    fi\n\n    exit $EXIT_MISMATCH\n  fi\n}\n\n\n# Shorthand for --mode=foo, only valid as the first argument\ncase $1 in\nclean|clea|cle|cl)\n  shift; set dummy --mode clean ${1+\"$@\"}; shift\n  ;;\ncompile|compil|compi|comp|com|co|c)\n  shift; set dummy --mode compile ${1+\"$@\"}; shift\n  ;;\nexecute|execut|execu|exec|exe|ex|e)\n  shift; set dummy --mode execute ${1+\"$@\"}; shift\n  ;;\nfinish|finis|fini|fin|fi|f)\n  shift; set dummy --mode finish ${1+\"$@\"}; shift\n  ;;\ninstall|instal|insta|inst|ins|in|i)\n  shift; set dummy --mode install ${1+\"$@\"}; shift\n  ;;\nlink|lin|li|l)\n  shift; set dummy --mode link ${1+\"$@\"}; shift\n  ;;\nuninstall|uninstal|uninsta|uninst|unins|unin|uni|un|u)\n  shift; set dummy --mode uninstall ${1+\"$@\"}; shift\n  ;;\nesac\n\n\n\n# Option defaults:\nopt_debug=:\nopt_dry_run=false\nopt_config=false\nopt_preserve_dup_deps=false\nopt_features=false\nopt_finish=false\nopt_help=false\nopt_help_all=false\nopt_silent=:\nopt_warning=:\nopt_verbose=:\nopt_silent=false\nopt_verbose=false\n\n\n# Parse options once, thoroughly.  This comes as soon as possible in the\n# script to make things like `--version' happen as quickly as we can.\n{\n  # this just eases exit handling\n  while test $# -gt 0; do\n    opt=\"$1\"\n    shift\n    case $opt in\n      --debug|-x)\topt_debug='set -x'\n\t\t\tfunc_echo \"enabling shell trace mode\"\n\t\t\t$opt_debug\n\t\t\t;;\n      --dry-run|--dryrun|-n)\n\t\t\topt_dry_run=:\n\t\t\t;;\n      --config)\n\t\t\topt_config=:\nfunc_config\n\t\t\t;;\n      --dlopen|-dlopen)\n\t\t\toptarg=\"$1\"\n\t\t\topt_dlopen=\"${opt_dlopen+$opt_dlopen\n}$optarg\"\n\t\t\tshift\n\t\t\t;;\n      --preserve-dup-deps)\n\t\t\topt_preserve_dup_deps=:\n\t\t\t;;\n      --features)\n\t\t\topt_features=:\nfunc_features\n\t\t\t;;\n      --finish)\n\t\t\topt_finish=:\nset dummy --mode finish ${1+\"$@\"}; shift\n\t\t\t;;\n      --help)\n\t\t\topt_help=:\n\t\t\t;;\n      --help-all)\n\t\t\topt_help_all=:\nopt_help=': help-all'\n\t\t\t;;\n      --mode)\n\t\t\ttest $# = 0 && func_missing_arg $opt && break\n\t\t\toptarg=\"$1\"\n\t\t\topt_mode=\"$optarg\"\ncase $optarg in\n  # Valid mode arguments:\n  clean|compile|execute|finish|install|link|relink|uninstall) ;;\n\n  # Catch anything else as an error\n  *) func_error \"invalid argument for $opt\"\n     exit_cmd=exit\n     break\n     ;;\nesac\n\t\t\tshift\n\t\t\t;;\n      --no-silent|--no-quiet)\n\t\t\topt_silent=false\nfunc_append preserve_args \" $opt\"\n\t\t\t;;\n      --no-warning|--no-warn)\n\t\t\topt_warning=false\nfunc_append preserve_args \" $opt\"\n\t\t\t;;\n      --no-verbose)\n\t\t\topt_verbose=false\nfunc_append preserve_args \" $opt\"\n\t\t\t;;\n      --silent|--quiet)\n\t\t\topt_silent=:\nfunc_append preserve_args \" $opt\"\n        opt_verbose=false\n\t\t\t;;\n      --verbose|-v)\n\t\t\topt_verbose=:\nfunc_append preserve_args \" $opt\"\nopt_silent=false\n\t\t\t;;\n      --tag)\n\t\t\ttest $# = 0 && func_missing_arg $opt && break\n\t\t\toptarg=\"$1\"\n\t\t\topt_tag=\"$optarg\"\nfunc_append preserve_args \" $opt $optarg\"\nfunc_enable_tag \"$optarg\"\n\t\t\tshift\n\t\t\t;;\n\n      -\\?|-h)\t\tfunc_usage\t\t\t\t;;\n      --help)\t\tfunc_help\t\t\t\t;;\n      --version)\tfunc_version\t\t\t\t;;\n\n      # Separate optargs to long options:\n      --*=*)\n\t\t\tfunc_split_long_opt \"$opt\"\n\t\t\tset dummy \"$func_split_long_opt_name\" \"$func_split_long_opt_arg\" ${1+\"$@\"}\n\t\t\tshift\n\t\t\t;;\n\n      # Separate non-argument short options:\n      -\\?*|-h*|-n*|-v*)\n\t\t\tfunc_split_short_opt \"$opt\"\n\t\t\tset dummy \"$func_split_short_opt_name\" \"-$func_split_short_opt_arg\" ${1+\"$@\"}\n\t\t\tshift\n\t\t\t;;\n\n      --)\t\tbreak\t\t\t\t\t;;\n      -*)\t\tfunc_fatal_help \"unrecognized option \\`$opt'\" ;;\n      *)\t\tset dummy \"$opt\" ${1+\"$@\"};\tshift; break  ;;\n    esac\n  done\n\n  # Validate options:\n\n  # save first non-option argument\n  if test \"$#\" -gt 0; then\n    nonopt=\"$opt\"\n    shift\n  fi\n\n  # preserve --debug\n  test \"$opt_debug\" = : || func_append preserve_args \" --debug\"\n\n  case $host in\n    *cygwin* | *mingw* | *pw32* | *cegcc*)\n      # don't eliminate duplications in $postdeps and $predeps\n      opt_duplicate_compiler_generated_deps=:\n      ;;\n    *)\n      opt_duplicate_compiler_generated_deps=$opt_preserve_dup_deps\n      ;;\n  esac\n\n  $opt_help || {\n    # Sanity checks first:\n    func_check_version_match\n\n    if test \"$build_libtool_libs\" != yes && test \"$build_old_libs\" != yes; then\n      func_fatal_configuration \"not configured to build any kind of library\"\n    fi\n\n    # Darwin sucks\n    eval std_shrext=\\\"$shrext_cmds\\\"\n\n    # Only execute mode is allowed to have -dlopen flags.\n    if test -n \"$opt_dlopen\" && test \"$opt_mode\" != execute; then\n      func_error \"unrecognized option \\`-dlopen'\"\n      $ECHO \"$help\" 1>&2\n      exit $EXIT_FAILURE\n    fi\n\n    # Change the help message to a mode-specific one.\n    generic_help=\"$help\"\n    help=\"Try \\`$progname --help --mode=$opt_mode' for more information.\"\n  }\n\n\n  # Bail if the options were screwed\n  $exit_cmd $EXIT_FAILURE\n}\n\n\n\n\n## ----------- ##\n##    Main.    ##\n## ----------- ##\n\n# func_lalib_p file\n# True iff FILE is a libtool `.la' library or `.lo' object file.\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_lalib_p ()\n{\n    test -f \"$1\" &&\n      $SED -e 4q \"$1\" 2>/dev/null \\\n        | $GREP \"^# Generated by .*$PACKAGE\" > /dev/null 2>&1\n}\n\n# func_lalib_unsafe_p file\n# True iff FILE is a libtool `.la' library or `.lo' object file.\n# This function implements the same check as func_lalib_p without\n# resorting to external programs.  To this end, it redirects stdin and\n# closes it afterwards, without saving the original file descriptor.\n# As a safety measure, use it only where a negative result would be\n# fatal anyway.  Works if `file' does not exist.\nfunc_lalib_unsafe_p ()\n{\n    lalib_p=no\n    if test -f \"$1\" && test -r \"$1\" && exec 5<&0 <\"$1\"; then\n\tfor lalib_p_l in 1 2 3 4\n\tdo\n\t    read lalib_p_line\n\t    case \"$lalib_p_line\" in\n\t\t\\#\\ Generated\\ by\\ *$PACKAGE* ) lalib_p=yes; break;;\n\t    esac\n\tdone\n\texec 0<&5 5<&-\n    fi\n    test \"$lalib_p\" = yes\n}\n\n# func_ltwrapper_script_p file\n# True iff FILE is a libtool wrapper script\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_ltwrapper_script_p ()\n{\n    func_lalib_p \"$1\"\n}\n\n# func_ltwrapper_executable_p file\n# True iff FILE is a libtool wrapper executable\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_ltwrapper_executable_p ()\n{\n    func_ltwrapper_exec_suffix=\n    case $1 in\n    *.exe) ;;\n    *) func_ltwrapper_exec_suffix=.exe ;;\n    esac\n    $GREP \"$magic_exe\" \"$1$func_ltwrapper_exec_suffix\" >/dev/null 2>&1\n}\n\n# func_ltwrapper_scriptname file\n# Assumes file is an ltwrapper_executable\n# uses $file to determine the appropriate filename for a\n# temporary ltwrapper_script.\nfunc_ltwrapper_scriptname ()\n{\n    func_dirname_and_basename \"$1\" \"\" \".\"\n    func_stripname '' '.exe' \"$func_basename_result\"\n    func_ltwrapper_scriptname_result=\"$func_dirname_result/$objdir/${func_stripname_result}_ltshwrapper\"\n}\n\n# func_ltwrapper_p file\n# True iff FILE is a libtool wrapper script or wrapper executable\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_ltwrapper_p ()\n{\n    func_ltwrapper_script_p \"$1\" || func_ltwrapper_executable_p \"$1\"\n}\n\n\n# func_execute_cmds commands fail_cmd\n# Execute tilde-delimited COMMANDS.\n# If FAIL_CMD is given, eval that upon failure.\n# FAIL_CMD may read-access the current command in variable CMD!\nfunc_execute_cmds ()\n{\n    $opt_debug\n    save_ifs=$IFS; IFS='~'\n    for cmd in $1; do\n      IFS=$save_ifs\n      eval cmd=\\\"$cmd\\\"\n      func_show_eval \"$cmd\" \"${2-:}\"\n    done\n    IFS=$save_ifs\n}\n\n\n# func_source file\n# Source FILE, adding directory component if necessary.\n# Note that it is not necessary on cygwin/mingw to append a dot to\n# FILE even if both FILE and FILE.exe exist: automatic-append-.exe\n# behavior happens only for exec(3), not for open(2)!  Also, sourcing\n# `FILE.' does not work on cygwin managed mounts.\nfunc_source ()\n{\n    $opt_debug\n    case $1 in\n    */* | *\\\\*)\t. \"$1\" ;;\n    *)\t\t. \"./$1\" ;;\n    esac\n}\n\n\n# func_resolve_sysroot PATH\n# Replace a leading = in PATH with a sysroot.  Store the result into\n# func_resolve_sysroot_result\nfunc_resolve_sysroot ()\n{\n  func_resolve_sysroot_result=$1\n  case $func_resolve_sysroot_result in\n  =*)\n    func_stripname '=' '' \"$func_resolve_sysroot_result\"\n    func_resolve_sysroot_result=$lt_sysroot$func_stripname_result\n    ;;\n  esac\n}\n\n# func_replace_sysroot PATH\n# If PATH begins with the sysroot, replace it with = and\n# store the result into func_replace_sysroot_result.\nfunc_replace_sysroot ()\n{\n  case \"$lt_sysroot:$1\" in\n  ?*:\"$lt_sysroot\"*)\n    func_stripname \"$lt_sysroot\" '' \"$1\"\n    func_replace_sysroot_result=\"=$func_stripname_result\"\n    ;;\n  *)\n    # Including no sysroot.\n    func_replace_sysroot_result=$1\n    ;;\n  esac\n}\n\n# func_infer_tag arg\n# Infer tagged configuration to use if any are available and\n# if one wasn't chosen via the \"--tag\" command line option.\n# Only attempt this if the compiler in the base compile\n# command doesn't match the default compiler.\n# arg is usually of the form 'gcc ...'\nfunc_infer_tag ()\n{\n    $opt_debug\n    if test -n \"$available_tags\" && test -z \"$tagname\"; then\n      CC_quoted=\n      for arg in $CC; do\n\tfunc_append_quoted CC_quoted \"$arg\"\n      done\n      CC_expanded=`func_echo_all $CC`\n      CC_quoted_expanded=`func_echo_all $CC_quoted`\n      case $@ in\n      # Blanks in the command may have been stripped by the calling shell,\n      # but not from the CC environment variable when configure was run.\n      \" $CC \"* | \"$CC \"* | \" $CC_expanded \"* | \"$CC_expanded \"* | \\\n      \" $CC_quoted\"* | \"$CC_quoted \"* | \" $CC_quoted_expanded \"* | \"$CC_quoted_expanded \"*) ;;\n      # Blanks at the start of $base_compile will cause this to fail\n      # if we don't check for them as well.\n      *)\n\tfor z in $available_tags; do\n\t  if $GREP \"^# ### BEGIN LIBTOOL TAG CONFIG: $z$\" < \"$progpath\" > /dev/null; then\n\t    # Evaluate the configuration.\n\t    eval \"`${SED} -n -e '/^# ### BEGIN LIBTOOL TAG CONFIG: '$z'$/,/^# ### END LIBTOOL TAG CONFIG: '$z'$/p' < $progpath`\"\n\t    CC_quoted=\n\t    for arg in $CC; do\n\t      # Double-quote args containing other shell metacharacters.\n\t      func_append_quoted CC_quoted \"$arg\"\n\t    done\n\t    CC_expanded=`func_echo_all $CC`\n\t    CC_quoted_expanded=`func_echo_all $CC_quoted`\n\t    case \"$@ \" in\n\t    \" $CC \"* | \"$CC \"* | \" $CC_expanded \"* | \"$CC_expanded \"* | \\\n\t    \" $CC_quoted\"* | \"$CC_quoted \"* | \" $CC_quoted_expanded \"* | \"$CC_quoted_expanded \"*)\n\t      # The compiler in the base compile command matches\n\t      # the one in the tagged configuration.\n\t      # Assume this is the tagged configuration we want.\n\t      tagname=$z\n\t      break\n\t      ;;\n\t    esac\n\t  fi\n\tdone\n\t# If $tagname still isn't set, then no tagged configuration\n\t# was found and let the user know that the \"--tag\" command\n\t# line option must be used.\n\tif test -z \"$tagname\"; then\n\t  func_echo \"unable to infer tagged configuration\"\n\t  func_fatal_error \"specify a tag with \\`--tag'\"\n#\telse\n#\t  func_verbose \"using $tagname tagged configuration\"\n\tfi\n\t;;\n      esac\n    fi\n}\n\n\n\n# func_write_libtool_object output_name pic_name nonpic_name\n# Create a libtool object file (analogous to a \".la\" file),\n# but don't create it if we're doing a dry run.\nfunc_write_libtool_object ()\n{\n    write_libobj=${1}\n    if test \"$build_libtool_libs\" = yes; then\n      write_lobj=\\'${2}\\'\n    else\n      write_lobj=none\n    fi\n\n    if test \"$build_old_libs\" = yes; then\n      write_oldobj=\\'${3}\\'\n    else\n      write_oldobj=none\n    fi\n\n    $opt_dry_run || {\n      cat >${write_libobj}T <<EOF\n# $write_libobj - a libtool object file\n# Generated by $PROGRAM (GNU $PACKAGE$TIMESTAMP) $VERSION\n#\n# Please DO NOT delete this file!\n# It is necessary for linking the library.\n\n# Name of the PIC object.\npic_object=$write_lobj\n\n# Name of the non-PIC object\nnon_pic_object=$write_oldobj\n\nEOF\n      $MV \"${write_libobj}T\" \"${write_libobj}\"\n    }\n}\n\n\n##################################################\n# FILE NAME AND PATH CONVERSION HELPER FUNCTIONS #\n##################################################\n\n# func_convert_core_file_wine_to_w32 ARG\n# Helper function used by file name conversion functions when $build is *nix,\n# and $host is mingw, cygwin, or some other w32 environment. Relies on a\n# correctly configured wine environment available, with the winepath program\n# in $build's $PATH.\n#\n# ARG is the $build file name to be converted to w32 format.\n# Result is available in $func_convert_core_file_wine_to_w32_result, and will\n# be empty on error (or when ARG is empty)\nfunc_convert_core_file_wine_to_w32 ()\n{\n  $opt_debug\n  func_convert_core_file_wine_to_w32_result=\"$1\"\n  if test -n \"$1\"; then\n    # Unfortunately, winepath does not exit with a non-zero error code, so we\n    # are forced to check the contents of stdout. On the other hand, if the\n    # command is not found, the shell will set an exit code of 127 and print\n    # *an error message* to stdout. So we must check for both error code of\n    # zero AND non-empty stdout, which explains the odd construction:\n    func_convert_core_file_wine_to_w32_tmp=`winepath -w \"$1\" 2>/dev/null`\n    if test \"$?\" -eq 0 && test -n \"${func_convert_core_file_wine_to_w32_tmp}\"; then\n      func_convert_core_file_wine_to_w32_result=`$ECHO \"$func_convert_core_file_wine_to_w32_tmp\" |\n        $SED -e \"$lt_sed_naive_backslashify\"`\n    else\n      func_convert_core_file_wine_to_w32_result=\n    fi\n  fi\n}\n# end: func_convert_core_file_wine_to_w32\n\n\n# func_convert_core_path_wine_to_w32 ARG\n# Helper function used by path conversion functions when $build is *nix, and\n# $host is mingw, cygwin, or some other w32 environment. Relies on a correctly\n# configured wine environment available, with the winepath program in $build's\n# $PATH. Assumes ARG has no leading or trailing path separator characters.\n#\n# ARG is path to be converted from $build format to win32.\n# Result is available in $func_convert_core_path_wine_to_w32_result.\n# Unconvertible file (directory) names in ARG are skipped; if no directory names\n# are convertible, then the result may be empty.\nfunc_convert_core_path_wine_to_w32 ()\n{\n  $opt_debug\n  # unfortunately, winepath doesn't convert paths, only file names\n  func_convert_core_path_wine_to_w32_result=\"\"\n  if test -n \"$1\"; then\n    oldIFS=$IFS\n    IFS=:\n    for func_convert_core_path_wine_to_w32_f in $1; do\n      IFS=$oldIFS\n      func_convert_core_file_wine_to_w32 \"$func_convert_core_path_wine_to_w32_f\"\n      if test -n \"$func_convert_core_file_wine_to_w32_result\" ; then\n        if test -z \"$func_convert_core_path_wine_to_w32_result\"; then\n          func_convert_core_path_wine_to_w32_result=\"$func_convert_core_file_wine_to_w32_result\"\n        else\n          func_append func_convert_core_path_wine_to_w32_result \";$func_convert_core_file_wine_to_w32_result\"\n        fi\n      fi\n    done\n    IFS=$oldIFS\n  fi\n}\n# end: func_convert_core_path_wine_to_w32\n\n\n# func_cygpath ARGS...\n# Wrapper around calling the cygpath program via LT_CYGPATH. This is used when\n# when (1) $build is *nix and Cygwin is hosted via a wine environment; or (2)\n# $build is MSYS and $host is Cygwin, or (3) $build is Cygwin. In case (1) or\n# (2), returns the Cygwin file name or path in func_cygpath_result (input\n# file name or path is assumed to be in w32 format, as previously converted\n# from $build's *nix or MSYS format). In case (3), returns the w32 file name\n# or path in func_cygpath_result (input file name or path is assumed to be in\n# Cygwin format). Returns an empty string on error.\n#\n# ARGS are passed to cygpath, with the last one being the file name or path to\n# be converted.\n#\n# Specify the absolute *nix (or w32) name to cygpath in the LT_CYGPATH\n# environment variable; do not put it in $PATH.\nfunc_cygpath ()\n{\n  $opt_debug\n  if test -n \"$LT_CYGPATH\" && test -f \"$LT_CYGPATH\"; then\n    func_cygpath_result=`$LT_CYGPATH \"$@\" 2>/dev/null`\n    if test \"$?\" -ne 0; then\n      # on failure, ensure result is empty\n      func_cygpath_result=\n    fi\n  else\n    func_cygpath_result=\n    func_error \"LT_CYGPATH is empty or specifies non-existent file: \\`$LT_CYGPATH'\"\n  fi\n}\n#end: func_cygpath\n\n\n# func_convert_core_msys_to_w32 ARG\n# Convert file name or path ARG from MSYS format to w32 format.  Return\n# result in func_convert_core_msys_to_w32_result.\nfunc_convert_core_msys_to_w32 ()\n{\n  $opt_debug\n  # awkward: cmd appends spaces to result\n  func_convert_core_msys_to_w32_result=`( cmd //c echo \"$1\" ) 2>/dev/null |\n    $SED -e 's/[ ]*$//' -e \"$lt_sed_naive_backslashify\"`\n}\n#end: func_convert_core_msys_to_w32\n\n\n# func_convert_file_check ARG1 ARG2\n# Verify that ARG1 (a file name in $build format) was converted to $host\n# format in ARG2. Otherwise, emit an error message, but continue (resetting\n# func_to_host_file_result to ARG1).\nfunc_convert_file_check ()\n{\n  $opt_debug\n  if test -z \"$2\" && test -n \"$1\" ; then\n    func_error \"Could not determine host file name corresponding to\"\n    func_error \"  \\`$1'\"\n    func_error \"Continuing, but uninstalled executables may not work.\"\n    # Fallback:\n    func_to_host_file_result=\"$1\"\n  fi\n}\n# end func_convert_file_check\n\n\n# func_convert_path_check FROM_PATHSEP TO_PATHSEP FROM_PATH TO_PATH\n# Verify that FROM_PATH (a path in $build format) was converted to $host\n# format in TO_PATH. Otherwise, emit an error message, but continue, resetting\n# func_to_host_file_result to a simplistic fallback value (see below).\nfunc_convert_path_check ()\n{\n  $opt_debug\n  if test -z \"$4\" && test -n \"$3\"; then\n    func_error \"Could not determine the host path corresponding to\"\n    func_error \"  \\`$3'\"\n    func_error \"Continuing, but uninstalled executables may not work.\"\n    # Fallback.  This is a deliberately simplistic \"conversion\" and\n    # should not be \"improved\".  See libtool.info.\n    if test \"x$1\" != \"x$2\"; then\n      lt_replace_pathsep_chars=\"s|$1|$2|g\"\n      func_to_host_path_result=`echo \"$3\" |\n        $SED -e \"$lt_replace_pathsep_chars\"`\n    else\n      func_to_host_path_result=\"$3\"\n    fi\n  fi\n}\n# end func_convert_path_check\n\n\n# func_convert_path_front_back_pathsep FRONTPAT BACKPAT REPL ORIG\n# Modifies func_to_host_path_result by prepending REPL if ORIG matches FRONTPAT\n# and appending REPL if ORIG matches BACKPAT.\nfunc_convert_path_front_back_pathsep ()\n{\n  $opt_debug\n  case $4 in\n  $1 ) func_to_host_path_result=\"$3$func_to_host_path_result\"\n    ;;\n  esac\n  case $4 in\n  $2 ) func_append func_to_host_path_result \"$3\"\n    ;;\n  esac\n}\n# end func_convert_path_front_back_pathsep\n\n\n##################################################\n# $build to $host FILE NAME CONVERSION FUNCTIONS #\n##################################################\n# invoked via `$to_host_file_cmd ARG'\n#\n# In each case, ARG is the path to be converted from $build to $host format.\n# Result will be available in $func_to_host_file_result.\n\n\n# func_to_host_file ARG\n# Converts the file name ARG from $build format to $host format. Return result\n# in func_to_host_file_result.\nfunc_to_host_file ()\n{\n  $opt_debug\n  $to_host_file_cmd \"$1\"\n}\n# end func_to_host_file\n\n\n# func_to_tool_file ARG LAZY\n# converts the file name ARG from $build format to toolchain format. Return\n# result in func_to_tool_file_result.  If the conversion in use is listed\n# in (the comma separated) LAZY, no conversion takes place.\nfunc_to_tool_file ()\n{\n  $opt_debug\n  case ,$2, in\n    *,\"$to_tool_file_cmd\",*)\n      func_to_tool_file_result=$1\n      ;;\n    *)\n      $to_tool_file_cmd \"$1\"\n      func_to_tool_file_result=$func_to_host_file_result\n      ;;\n  esac\n}\n# end func_to_tool_file\n\n\n# func_convert_file_noop ARG\n# Copy ARG to func_to_host_file_result.\nfunc_convert_file_noop ()\n{\n  func_to_host_file_result=\"$1\"\n}\n# end func_convert_file_noop\n\n\n# func_convert_file_msys_to_w32 ARG\n# Convert file name ARG from (mingw) MSYS to (mingw) w32 format; automatic\n# conversion to w32 is not available inside the cwrapper.  Returns result in\n# func_to_host_file_result.\nfunc_convert_file_msys_to_w32 ()\n{\n  $opt_debug\n  func_to_host_file_result=\"$1\"\n  if test -n \"$1\"; then\n    func_convert_core_msys_to_w32 \"$1\"\n    func_to_host_file_result=\"$func_convert_core_msys_to_w32_result\"\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_msys_to_w32\n\n\n# func_convert_file_cygwin_to_w32 ARG\n# Convert file name ARG from Cygwin to w32 format.  Returns result in\n# func_to_host_file_result.\nfunc_convert_file_cygwin_to_w32 ()\n{\n  $opt_debug\n  func_to_host_file_result=\"$1\"\n  if test -n \"$1\"; then\n    # because $build is cygwin, we call \"the\" cygpath in $PATH; no need to use\n    # LT_CYGPATH in this case.\n    func_to_host_file_result=`cygpath -m \"$1\"`\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_cygwin_to_w32\n\n\n# func_convert_file_nix_to_w32 ARG\n# Convert file name ARG from *nix to w32 format.  Requires a wine environment\n# and a working winepath. Returns result in func_to_host_file_result.\nfunc_convert_file_nix_to_w32 ()\n{\n  $opt_debug\n  func_to_host_file_result=\"$1\"\n  if test -n \"$1\"; then\n    func_convert_core_file_wine_to_w32 \"$1\"\n    func_to_host_file_result=\"$func_convert_core_file_wine_to_w32_result\"\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_nix_to_w32\n\n\n# func_convert_file_msys_to_cygwin ARG\n# Convert file name ARG from MSYS to Cygwin format.  Requires LT_CYGPATH set.\n# Returns result in func_to_host_file_result.\nfunc_convert_file_msys_to_cygwin ()\n{\n  $opt_debug\n  func_to_host_file_result=\"$1\"\n  if test -n \"$1\"; then\n    func_convert_core_msys_to_w32 \"$1\"\n    func_cygpath -u \"$func_convert_core_msys_to_w32_result\"\n    func_to_host_file_result=\"$func_cygpath_result\"\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_msys_to_cygwin\n\n\n# func_convert_file_nix_to_cygwin ARG\n# Convert file name ARG from *nix to Cygwin format.  Requires Cygwin installed\n# in a wine environment, working winepath, and LT_CYGPATH set.  Returns result\n# in func_to_host_file_result.\nfunc_convert_file_nix_to_cygwin ()\n{\n  $opt_debug\n  func_to_host_file_result=\"$1\"\n  if test -n \"$1\"; then\n    # convert from *nix to w32, then use cygpath to convert from w32 to cygwin.\n    func_convert_core_file_wine_to_w32 \"$1\"\n    func_cygpath -u \"$func_convert_core_file_wine_to_w32_result\"\n    func_to_host_file_result=\"$func_cygpath_result\"\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_nix_to_cygwin\n\n\n#############################################\n# $build to $host PATH CONVERSION FUNCTIONS #\n#############################################\n# invoked via `$to_host_path_cmd ARG'\n#\n# In each case, ARG is the path to be converted from $build to $host format.\n# The result will be available in $func_to_host_path_result.\n#\n# Path separators are also converted from $build format to $host format.  If\n# ARG begins or ends with a path separator character, it is preserved (but\n# converted to $host format) on output.\n#\n# All path conversion functions are named using the following convention:\n#   file name conversion function    : func_convert_file_X_to_Y ()\n#   path conversion function         : func_convert_path_X_to_Y ()\n# where, for any given $build/$host combination the 'X_to_Y' value is the\n# same.  If conversion functions are added for new $build/$host combinations,\n# the two new functions must follow this pattern, or func_init_to_host_path_cmd\n# will break.\n\n\n# func_init_to_host_path_cmd\n# Ensures that function \"pointer\" variable $to_host_path_cmd is set to the\n# appropriate value, based on the value of $to_host_file_cmd.\nto_host_path_cmd=\nfunc_init_to_host_path_cmd ()\n{\n  $opt_debug\n  if test -z \"$to_host_path_cmd\"; then\n    func_stripname 'func_convert_file_' '' \"$to_host_file_cmd\"\n    to_host_path_cmd=\"func_convert_path_${func_stripname_result}\"\n  fi\n}\n\n\n# func_to_host_path ARG\n# Converts the path ARG from $build format to $host format. Return result\n# in func_to_host_path_result.\nfunc_to_host_path ()\n{\n  $opt_debug\n  func_init_to_host_path_cmd\n  $to_host_path_cmd \"$1\"\n}\n# end func_to_host_path\n\n\n# func_convert_path_noop ARG\n# Copy ARG to func_to_host_path_result.\nfunc_convert_path_noop ()\n{\n  func_to_host_path_result=\"$1\"\n}\n# end func_convert_path_noop\n\n\n# func_convert_path_msys_to_w32 ARG\n# Convert path ARG from (mingw) MSYS to (mingw) w32 format; automatic\n# conversion to w32 is not available inside the cwrapper.  Returns result in\n# func_to_host_path_result.\nfunc_convert_path_msys_to_w32 ()\n{\n  $opt_debug\n  func_to_host_path_result=\"$1\"\n  if test -n \"$1\"; then\n    # Remove leading and trailing path separator characters from ARG.  MSYS\n    # behavior is inconsistent here; cygpath turns them into '.;' and ';.';\n    # and winepath ignores them completely.\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_msys_to_w32 \"$func_to_host_path_tmp1\"\n    func_to_host_path_result=\"$func_convert_core_msys_to_w32_result\"\n    func_convert_path_check : \";\" \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" \";\" \"$1\"\n  fi\n}\n# end func_convert_path_msys_to_w32\n\n\n# func_convert_path_cygwin_to_w32 ARG\n# Convert path ARG from Cygwin to w32 format.  Returns result in\n# func_to_host_file_result.\nfunc_convert_path_cygwin_to_w32 ()\n{\n  $opt_debug\n  func_to_host_path_result=\"$1\"\n  if test -n \"$1\"; then\n    # See func_convert_path_msys_to_w32:\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_to_host_path_result=`cygpath -m -p \"$func_to_host_path_tmp1\"`\n    func_convert_path_check : \";\" \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" \";\" \"$1\"\n  fi\n}\n# end func_convert_path_cygwin_to_w32\n\n\n# func_convert_path_nix_to_w32 ARG\n# Convert path ARG from *nix to w32 format.  Requires a wine environment and\n# a working winepath.  Returns result in func_to_host_file_result.\nfunc_convert_path_nix_to_w32 ()\n{\n  $opt_debug\n  func_to_host_path_result=\"$1\"\n  if test -n \"$1\"; then\n    # See func_convert_path_msys_to_w32:\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_path_wine_to_w32 \"$func_to_host_path_tmp1\"\n    func_to_host_path_result=\"$func_convert_core_path_wine_to_w32_result\"\n    func_convert_path_check : \";\" \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" \";\" \"$1\"\n  fi\n}\n# end func_convert_path_nix_to_w32\n\n\n# func_convert_path_msys_to_cygwin ARG\n# Convert path ARG from MSYS to Cygwin format.  Requires LT_CYGPATH set.\n# Returns result in func_to_host_file_result.\nfunc_convert_path_msys_to_cygwin ()\n{\n  $opt_debug\n  func_to_host_path_result=\"$1\"\n  if test -n \"$1\"; then\n    # See func_convert_path_msys_to_w32:\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_msys_to_w32 \"$func_to_host_path_tmp1\"\n    func_cygpath -u -p \"$func_convert_core_msys_to_w32_result\"\n    func_to_host_path_result=\"$func_cygpath_result\"\n    func_convert_path_check : : \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" : \"$1\"\n  fi\n}\n# end func_convert_path_msys_to_cygwin\n\n\n# func_convert_path_nix_to_cygwin ARG\n# Convert path ARG from *nix to Cygwin format.  Requires Cygwin installed in a\n# a wine environment, working winepath, and LT_CYGPATH set.  Returns result in\n# func_to_host_file_result.\nfunc_convert_path_nix_to_cygwin ()\n{\n  $opt_debug\n  func_to_host_path_result=\"$1\"\n  if test -n \"$1\"; then\n    # Remove leading and trailing path separator characters from\n    # ARG. msys behavior is inconsistent here, cygpath turns them\n    # into '.;' and ';.', and winepath ignores them completely.\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_path_wine_to_w32 \"$func_to_host_path_tmp1\"\n    func_cygpath -u -p \"$func_convert_core_path_wine_to_w32_result\"\n    func_to_host_path_result=\"$func_cygpath_result\"\n    func_convert_path_check : : \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" : \"$1\"\n  fi\n}\n# end func_convert_path_nix_to_cygwin\n\n\n# func_mode_compile arg...\nfunc_mode_compile ()\n{\n    $opt_debug\n    # Get the compilation command and the source file.\n    base_compile=\n    srcfile=\"$nonopt\"  #  always keep a non-empty value in \"srcfile\"\n    suppress_opt=yes\n    suppress_output=\n    arg_mode=normal\n    libobj=\n    later=\n    pie_flag=\n\n    for arg\n    do\n      case $arg_mode in\n      arg  )\n\t# do not \"continue\".  Instead, add this to base_compile\n\tlastarg=\"$arg\"\n\targ_mode=normal\n\t;;\n\n      target )\n\tlibobj=\"$arg\"\n\targ_mode=normal\n\tcontinue\n\t;;\n\n      normal )\n\t# Accept any command-line options.\n\tcase $arg in\n\t-o)\n\t  test -n \"$libobj\" && \\\n\t    func_fatal_error \"you cannot specify \\`-o' more than once\"\n\t  arg_mode=target\n\t  continue\n\t  ;;\n\n\t-pie | -fpie | -fPIE)\n          func_append pie_flag \" $arg\"\n\t  continue\n\t  ;;\n\n\t-shared | -static | -prefer-pic | -prefer-non-pic)\n\t  func_append later \" $arg\"\n\t  continue\n\t  ;;\n\n\t-no-suppress)\n\t  suppress_opt=no\n\t  continue\n\t  ;;\n\n\t-Xcompiler)\n\t  arg_mode=arg  #  the next one goes into the \"base_compile\" arg list\n\t  continue      #  The current \"srcfile\" will either be retained or\n\t  ;;            #  replaced later.  I would guess that would be a bug.\n\n\t-Wc,*)\n\t  func_stripname '-Wc,' '' \"$arg\"\n\t  args=$func_stripname_result\n\t  lastarg=\n\t  save_ifs=\"$IFS\"; IFS=','\n\t  for arg in $args; do\n\t    IFS=\"$save_ifs\"\n\t    func_append_quoted lastarg \"$arg\"\n\t  done\n\t  IFS=\"$save_ifs\"\n\t  func_stripname ' ' '' \"$lastarg\"\n\t  lastarg=$func_stripname_result\n\n\t  # Add the arguments to base_compile.\n\t  func_append base_compile \" $lastarg\"\n\t  continue\n\t  ;;\n\n\t*)\n\t  # Accept the current argument as the source file.\n\t  # The previous \"srcfile\" becomes the current argument.\n\t  #\n\t  lastarg=\"$srcfile\"\n\t  srcfile=\"$arg\"\n\t  ;;\n\tesac  #  case $arg\n\t;;\n      esac    #  case $arg_mode\n\n      # Aesthetically quote the previous argument.\n      func_append_quoted base_compile \"$lastarg\"\n    done # for arg\n\n    case $arg_mode in\n    arg)\n      func_fatal_error \"you must specify an argument for -Xcompile\"\n      ;;\n    target)\n      func_fatal_error \"you must specify a target with \\`-o'\"\n      ;;\n    *)\n      # Get the name of the library object.\n      test -z \"$libobj\" && {\n\tfunc_basename \"$srcfile\"\n\tlibobj=\"$func_basename_result\"\n      }\n      ;;\n    esac\n\n    # Recognize several different file suffixes.\n    # If the user specifies -o file.o, it is replaced with file.lo\n    case $libobj in\n    *.[cCFSifmso] | \\\n    *.ada | *.adb | *.ads | *.asm | \\\n    *.c++ | *.cc | *.ii | *.class | *.cpp | *.cxx | \\\n    *.[fF][09]? | *.for | *.java | *.go | *.obj | *.sx | *.cu | *.cup)\n      func_xform \"$libobj\"\n      libobj=$func_xform_result\n      ;;\n    esac\n\n    case $libobj in\n    *.lo) func_lo2o \"$libobj\"; obj=$func_lo2o_result ;;\n    *)\n      func_fatal_error \"cannot determine name of library object from \\`$libobj'\"\n      ;;\n    esac\n\n    func_infer_tag $base_compile\n\n    for arg in $later; do\n      case $arg in\n      -shared)\n\ttest \"$build_libtool_libs\" != yes && \\\n\t  func_fatal_configuration \"can not build a shared library\"\n\tbuild_old_libs=no\n\tcontinue\n\t;;\n\n      -static)\n\tbuild_libtool_libs=no\n\tbuild_old_libs=yes\n\tcontinue\n\t;;\n\n      -prefer-pic)\n\tpic_mode=yes\n\tcontinue\n\t;;\n\n      -prefer-non-pic)\n\tpic_mode=no\n\tcontinue\n\t;;\n      esac\n    done\n\n    func_quote_for_eval \"$libobj\"\n    test \"X$libobj\" != \"X$func_quote_for_eval_result\" \\\n      && $ECHO \"X$libobj\" | $GREP '[]~#^*{};<>?\"'\"'\"'\t &()|`$[]' \\\n      && func_warning \"libobj name \\`$libobj' may not contain shell special characters.\"\n    func_dirname_and_basename \"$obj\" \"/\" \"\"\n    objname=\"$func_basename_result\"\n    xdir=\"$func_dirname_result\"\n    lobj=${xdir}$objdir/$objname\n\n    test -z \"$base_compile\" && \\\n      func_fatal_help \"you must specify a compilation command\"\n\n    # Delete any leftover library objects.\n    if test \"$build_old_libs\" = yes; then\n      removelist=\"$obj $lobj $libobj ${libobj}T\"\n    else\n      removelist=\"$lobj $libobj ${libobj}T\"\n    fi\n\n    # On Cygwin there's no \"real\" PIC flag so we must build both object types\n    case $host_os in\n    cygwin* | mingw* | pw32* | os2* | cegcc*)\n      pic_mode=default\n      ;;\n    esac\n    if test \"$pic_mode\" = no && test \"$deplibs_check_method\" != pass_all; then\n      # non-PIC code in shared libraries is not supported\n      pic_mode=default\n    fi\n\n    # Calculate the filename of the output object if compiler does\n    # not support -o with -c\n    if test \"$compiler_c_o\" = no; then\n      output_obj=`$ECHO \"$srcfile\" | $SED 's%^.*/%%; s%\\.[^.]*$%%'`.${objext}\n      lockfile=\"$output_obj.lock\"\n    else\n      output_obj=\n      need_locks=no\n      lockfile=\n    fi\n\n    # Lock this critical section if it is needed\n    # We use this script file to make the link, it avoids creating a new file\n    if test \"$need_locks\" = yes; then\n      until $opt_dry_run || ln \"$progpath\" \"$lockfile\" 2>/dev/null; do\n\tfunc_echo \"Waiting for $lockfile to be removed\"\n\tsleep 2\n      done\n    elif test \"$need_locks\" = warn; then\n      if test -f \"$lockfile\"; then\n\t$ECHO \"\\\n*** ERROR, $lockfile exists and contains:\n`cat $lockfile 2>/dev/null`\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support \\`-c' and \\`-o' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler.\"\n\n\t$opt_dry_run || $RM $removelist\n\texit $EXIT_FAILURE\n      fi\n      func_append removelist \" $output_obj\"\n      $ECHO \"$srcfile\" > \"$lockfile\"\n    fi\n\n    $opt_dry_run || $RM $removelist\n    func_append removelist \" $lockfile\"\n    trap '$opt_dry_run || $RM $removelist; exit $EXIT_FAILURE' 1 2 15\n\n    func_to_tool_file \"$srcfile\" func_convert_file_msys_to_w32\n    srcfile=$func_to_tool_file_result\n    func_quote_for_eval \"$srcfile\"\n    qsrcfile=$func_quote_for_eval_result\n\n    # Only build a PIC object if we are building libtool libraries.\n    if test \"$build_libtool_libs\" = yes; then\n      # Without this assignment, base_compile gets emptied.\n      fbsd_hideous_sh_bug=$base_compile\n\n      if test \"$pic_mode\" != no; then\n\tcommand=\"$base_compile $qsrcfile $pic_flag\"\n      else\n\t# Don't build PIC code\n\tcommand=\"$base_compile $qsrcfile\"\n      fi\n\n      func_mkdir_p \"$xdir$objdir\"\n\n      if test -z \"$output_obj\"; then\n\t# Place PIC objects in $objdir\n\tfunc_append command \" -o $lobj\"\n      fi\n\n      func_show_eval_locale \"$command\"\t\\\n          'test -n \"$output_obj\" && $RM $removelist; exit $EXIT_FAILURE'\n\n      if test \"$need_locks\" = warn &&\n\t test \"X`cat $lockfile 2>/dev/null`\" != \"X$srcfile\"; then\n\t$ECHO \"\\\n*** ERROR, $lockfile contains:\n`cat $lockfile 2>/dev/null`\n\nbut it should contain:\n$srcfile\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support \\`-c' and \\`-o' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler.\"\n\n\t$opt_dry_run || $RM $removelist\n\texit $EXIT_FAILURE\n      fi\n\n      # Just move the object if needed, then go on to compile the next one\n      if test -n \"$output_obj\" && test \"X$output_obj\" != \"X$lobj\"; then\n\tfunc_show_eval '$MV \"$output_obj\" \"$lobj\"' \\\n\t  'error=$?; $opt_dry_run || $RM $removelist; exit $error'\n      fi\n\n      # Allow error messages only from the first compilation.\n      if test \"$suppress_opt\" = yes; then\n\tsuppress_output=' >/dev/null 2>&1'\n      fi\n    fi\n\n    # Only build a position-dependent object if we build old libraries.\n    if test \"$build_old_libs\" = yes; then\n      if test \"$pic_mode\" != yes; then\n\t# Don't build PIC code\n\tcommand=\"$base_compile $qsrcfile$pie_flag\"\n      else\n\tcommand=\"$base_compile $qsrcfile $pic_flag\"\n      fi\n      if test \"$compiler_c_o\" = yes; then\n\tfunc_append command \" -o $obj\"\n      fi\n\n      # Suppress compiler output if we already did a PIC compilation.\n      func_append command \"$suppress_output\"\n      func_show_eval_locale \"$command\" \\\n        '$opt_dry_run || $RM $removelist; exit $EXIT_FAILURE'\n\n      if test \"$need_locks\" = warn &&\n\t test \"X`cat $lockfile 2>/dev/null`\" != \"X$srcfile\"; then\n\t$ECHO \"\\\n*** ERROR, $lockfile contains:\n`cat $lockfile 2>/dev/null`\n\nbut it should contain:\n$srcfile\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support \\`-c' and \\`-o' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler.\"\n\n\t$opt_dry_run || $RM $removelist\n\texit $EXIT_FAILURE\n      fi\n\n      # Just move the object if needed\n      if test -n \"$output_obj\" && test \"X$output_obj\" != \"X$obj\"; then\n\tfunc_show_eval '$MV \"$output_obj\" \"$obj\"' \\\n\t  'error=$?; $opt_dry_run || $RM $removelist; exit $error'\n      fi\n    fi\n\n    $opt_dry_run || {\n      func_write_libtool_object \"$libobj\" \"$objdir/$objname\" \"$objname\"\n\n      # Unlock the critical section if it was locked\n      if test \"$need_locks\" != no; then\n\tremovelist=$lockfile\n        $RM \"$lockfile\"\n      fi\n    }\n\n    exit $EXIT_SUCCESS\n}\n\n$opt_help || {\n  test \"$opt_mode\" = compile && func_mode_compile ${1+\"$@\"}\n}\n\nfunc_mode_help ()\n{\n    # We need to display help for each of the modes.\n    case $opt_mode in\n      \"\")\n        # Generic help is extracted from the usage comments\n        # at the start of this file.\n        func_help\n        ;;\n\n      clean)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=clean RM [RM-OPTION]... FILE...\n\nRemove files from the build directory.\n\nRM is the name of the program to use to delete files associated with each FILE\n(typically \\`/bin/rm').  RM-OPTIONS are options (such as \\`-f') to be passed\nto RM.\n\nIf FILE is a libtool library, object or program, all the files associated\nwith it are deleted. Otherwise, only FILE itself is deleted using RM.\"\n        ;;\n\n      compile)\n      $ECHO \\\n\"Usage: $progname [OPTION]... --mode=compile COMPILE-COMMAND... SOURCEFILE\n\nCompile a source file into a libtool library object.\n\nThis mode accepts the following additional options:\n\n  -o OUTPUT-FILE    set the output file name to OUTPUT-FILE\n  -no-suppress      do not suppress compiler output for multiple passes\n  -prefer-pic       try to build PIC objects only\n  -prefer-non-pic   try to build non-PIC objects only\n  -shared           do not build a \\`.o' file suitable for static linking\n  -static           only build a \\`.o' file suitable for static linking\n  -Wc,FLAG          pass FLAG directly to the compiler\n\nCOMPILE-COMMAND is a command to be used in creating a \\`standard' object file\nfrom the given SOURCEFILE.\n\nThe output file name is determined by removing the directory component from\nSOURCEFILE, then substituting the C source code suffix \\`.c' with the\nlibrary object suffix, \\`.lo'.\"\n        ;;\n\n      execute)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=execute COMMAND [ARGS]...\n\nAutomatically set library path, then run a program.\n\nThis mode accepts the following additional options:\n\n  -dlopen FILE      add the directory containing FILE to the library path\n\nThis mode sets the library path environment variable according to \\`-dlopen'\nflags.\n\nIf any of the ARGS are libtool executable wrappers, then they are translated\ninto their corresponding uninstalled binary, and any of their required library\ndirectories are added to the library path.\n\nThen, COMMAND is executed, with ARGS as arguments.\"\n        ;;\n\n      finish)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=finish [LIBDIR]...\n\nComplete the installation of libtool libraries.\n\nEach LIBDIR is a directory that contains libtool libraries.\n\nThe commands that this mode executes may require superuser privileges.  Use\nthe \\`--dry-run' option if you just want to see what would be executed.\"\n        ;;\n\n      install)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=install INSTALL-COMMAND...\n\nInstall executables or libraries.\n\nINSTALL-COMMAND is the installation command.  The first component should be\neither the \\`install' or \\`cp' program.\n\nThe following components of INSTALL-COMMAND are treated specially:\n\n  -inst-prefix-dir PREFIX-DIR  Use PREFIX-DIR as a staging area for installation\n\nThe rest of the components are interpreted as arguments to that command (only\nBSD-compatible install options are recognized).\"\n        ;;\n\n      link)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=link LINK-COMMAND...\n\nLink object files or libraries together to form another library, or to\ncreate an executable program.\n\nLINK-COMMAND is a command using the C compiler that you would use to create\na program from several object files.\n\nThe following components of LINK-COMMAND are treated specially:\n\n  -all-static       do not do any dynamic linking at all\n  -avoid-version    do not add a version suffix if possible\n  -bindir BINDIR    specify path to binaries directory (for systems where\n                    libraries must be found in the PATH setting at runtime)\n  -dlopen FILE      \\`-dlpreopen' FILE if it cannot be dlopened at runtime\n  -dlpreopen FILE   link in FILE and add its symbols to lt_preloaded_symbols\n  -export-dynamic   allow symbols from OUTPUT-FILE to be resolved with dlsym(3)\n  -export-symbols SYMFILE\n                    try to export only the symbols listed in SYMFILE\n  -export-symbols-regex REGEX\n                    try to export only the symbols matching REGEX\n  -LLIBDIR          search LIBDIR for required installed libraries\n  -lNAME            OUTPUT-FILE requires the installed library libNAME\n  -module           build a library that can dlopened\n  -no-fast-install  disable the fast-install mode\n  -no-install       link a not-installable executable\n  -no-undefined     declare that a library does not refer to external symbols\n  -o OUTPUT-FILE    create OUTPUT-FILE from the specified objects\n  -objectlist FILE  Use a list of object files found in FILE to specify objects\n  -precious-files-regex REGEX\n                    don't remove output files matching REGEX\n  -release RELEASE  specify package release information\n  -rpath LIBDIR     the created library will eventually be installed in LIBDIR\n  -R[ ]LIBDIR       add LIBDIR to the runtime path of programs and libraries\n  -shared           only do dynamic linking of libtool libraries\n  -shrext SUFFIX    override the standard shared library file extension\n  -static           do not do any dynamic linking of uninstalled libtool libraries\n  -static-libtool-libs\n                    do not do any dynamic linking of libtool libraries\n  -version-info CURRENT[:REVISION[:AGE]]\n                    specify library version info [each variable defaults to 0]\n  -weak LIBNAME     declare that the target provides the LIBNAME interface\n  -Wc,FLAG\n  -Xcompiler FLAG   pass linker-specific FLAG directly to the compiler\n  -Wl,FLAG\n  -Xlinker FLAG     pass linker-specific FLAG directly to the linker\n  -XCClinker FLAG   pass link-specific FLAG to the compiler driver (CC)\n\nAll other options (arguments beginning with \\`-') are ignored.\n\nEvery other argument is treated as a filename.  Files ending in \\`.la' are\ntreated as uninstalled libtool libraries, other files are standard or library\nobject files.\n\nIf the OUTPUT-FILE ends in \\`.la', then a libtool library is created,\nonly library objects (\\`.lo' files) may be specified, and \\`-rpath' is\nrequired, except when creating a convenience library.\n\nIf OUTPUT-FILE ends in \\`.a' or \\`.lib', then a standard library is created\nusing \\`ar' and \\`ranlib', or on Windows using \\`lib'.\n\nIf OUTPUT-FILE ends in \\`.lo' or \\`.${objext}', then a reloadable object file\nis created, otherwise an executable program is created.\"\n        ;;\n\n      uninstall)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=uninstall RM [RM-OPTION]... FILE...\n\nRemove libraries from an installation directory.\n\nRM is the name of the program to use to delete files associated with each FILE\n(typically \\`/bin/rm').  RM-OPTIONS are options (such as \\`-f') to be passed\nto RM.\n\nIf FILE is a libtool library, all the files associated with it are deleted.\nOtherwise, only FILE itself is deleted using RM.\"\n        ;;\n\n      *)\n        func_fatal_help \"invalid operation mode \\`$opt_mode'\"\n        ;;\n    esac\n\n    echo\n    $ECHO \"Try \\`$progname --help' for more information about other modes.\"\n}\n\n# Now that we've collected a possible --mode arg, show help if necessary\nif $opt_help; then\n  if test \"$opt_help\" = :; then\n    func_mode_help\n  else\n    {\n      func_help noexit\n      for opt_mode in compile link execute install finish uninstall clean; do\n\tfunc_mode_help\n      done\n    } | sed -n '1p; 2,$s/^Usage:/  or: /p'\n    {\n      func_help noexit\n      for opt_mode in compile link execute install finish uninstall clean; do\n\techo\n\tfunc_mode_help\n      done\n    } |\n    sed '1d\n      /^When reporting/,/^Report/{\n\tH\n\td\n      }\n      $x\n      /information about other modes/d\n      /more detailed .*MODE/d\n      s/^Usage:.*--mode=\\([^ ]*\\) .*/Description of \\1 mode:/'\n  fi\n  exit $?\nfi\n\n\n# func_mode_execute arg...\nfunc_mode_execute ()\n{\n    $opt_debug\n    # The first argument is the command name.\n    cmd=\"$nonopt\"\n    test -z \"$cmd\" && \\\n      func_fatal_help \"you must specify a COMMAND\"\n\n    # Handle -dlopen flags immediately.\n    for file in $opt_dlopen; do\n      test -f \"$file\" \\\n\t|| func_fatal_help \"\\`$file' is not a file\"\n\n      dir=\n      case $file in\n      *.la)\n\tfunc_resolve_sysroot \"$file\"\n\tfile=$func_resolve_sysroot_result\n\n\t# Check to see that this really is a libtool archive.\n\tfunc_lalib_unsafe_p \"$file\" \\\n\t  || func_fatal_help \"\\`$lib' is not a valid libtool archive\"\n\n\t# Read the libtool library.\n\tdlname=\n\tlibrary_names=\n\tfunc_source \"$file\"\n\n\t# Skip this library if it cannot be dlopened.\n\tif test -z \"$dlname\"; then\n\t  # Warn if it was a shared library.\n\t  test -n \"$library_names\" && \\\n\t    func_warning \"\\`$file' was not linked with \\`-export-dynamic'\"\n\t  continue\n\tfi\n\n\tfunc_dirname \"$file\" \"\" \".\"\n\tdir=\"$func_dirname_result\"\n\n\tif test -f \"$dir/$objdir/$dlname\"; then\n\t  func_append dir \"/$objdir\"\n\telse\n\t  if test ! -f \"$dir/$dlname\"; then\n\t    func_fatal_error \"cannot find \\`$dlname' in \\`$dir' or \\`$dir/$objdir'\"\n\t  fi\n\tfi\n\t;;\n\n      *.lo)\n\t# Just add the directory containing the .lo file.\n\tfunc_dirname \"$file\" \"\" \".\"\n\tdir=\"$func_dirname_result\"\n\t;;\n\n      *)\n\tfunc_warning \"\\`-dlopen' is ignored for non-libtool libraries and objects\"\n\tcontinue\n\t;;\n      esac\n\n      # Get the absolute pathname.\n      absdir=`cd \"$dir\" && pwd`\n      test -n \"$absdir\" && dir=\"$absdir\"\n\n      # Now add the directory to shlibpath_var.\n      if eval \"test -z \\\"\\$$shlibpath_var\\\"\"; then\n\teval \"$shlibpath_var=\\\"\\$dir\\\"\"\n      else\n\teval \"$shlibpath_var=\\\"\\$dir:\\$$shlibpath_var\\\"\"\n      fi\n    done\n\n    # This variable tells wrapper scripts just to set shlibpath_var\n    # rather than running their programs.\n    libtool_execute_magic=\"$magic\"\n\n    # Check if any of the arguments is a wrapper script.\n    args=\n    for file\n    do\n      case $file in\n      -* | *.la | *.lo ) ;;\n      *)\n\t# Do a test to see if this is really a libtool program.\n\tif func_ltwrapper_script_p \"$file\"; then\n\t  func_source \"$file\"\n\t  # Transform arg to wrapped name.\n\t  file=\"$progdir/$program\"\n\telif func_ltwrapper_executable_p \"$file\"; then\n\t  func_ltwrapper_scriptname \"$file\"\n\t  func_source \"$func_ltwrapper_scriptname_result\"\n\t  # Transform arg to wrapped name.\n\t  file=\"$progdir/$program\"\n\tfi\n\t;;\n      esac\n      # Quote arguments (to preserve shell metacharacters).\n      func_append_quoted args \"$file\"\n    done\n\n    if test \"X$opt_dry_run\" = Xfalse; then\n      if test -n \"$shlibpath_var\"; then\n\t# Export the shlibpath_var.\n\teval \"export $shlibpath_var\"\n      fi\n\n      # Restore saved environment variables\n      for lt_var in LANG LANGUAGE LC_ALL LC_CTYPE LC_COLLATE LC_MESSAGES\n      do\n\teval \"if test \\\"\\${save_$lt_var+set}\\\" = set; then\n                $lt_var=\\$save_$lt_var; export $lt_var\n\t      else\n\t\t$lt_unset $lt_var\n\t      fi\"\n      done\n\n      # Now prepare to actually exec the command.\n      exec_cmd=\"\\$cmd$args\"\n    else\n      # Display what would be done.\n      if test -n \"$shlibpath_var\"; then\n\teval \"\\$ECHO \\\"\\$shlibpath_var=\\$$shlibpath_var\\\"\"\n\techo \"export $shlibpath_var\"\n      fi\n      $ECHO \"$cmd$args\"\n      exit $EXIT_SUCCESS\n    fi\n}\n\ntest \"$opt_mode\" = execute && func_mode_execute ${1+\"$@\"}\n\n\n# func_mode_finish arg...\nfunc_mode_finish ()\n{\n    $opt_debug\n    libs=\n    libdirs=\n    admincmds=\n\n    for opt in \"$nonopt\" ${1+\"$@\"}\n    do\n      if test -d \"$opt\"; then\n\tfunc_append libdirs \" $opt\"\n\n      elif test -f \"$opt\"; then\n\tif func_lalib_unsafe_p \"$opt\"; then\n\t  func_append libs \" $opt\"\n\telse\n\t  func_warning \"\\`$opt' is not a valid libtool archive\"\n\tfi\n\n      else\n\tfunc_fatal_error \"invalid argument \\`$opt'\"\n      fi\n    done\n\n    if test -n \"$libs\"; then\n      if test -n \"$lt_sysroot\"; then\n        sysroot_regex=`$ECHO \"$lt_sysroot\" | $SED \"$sed_make_literal_regex\"`\n        sysroot_cmd=\"s/\\([ ']\\)$sysroot_regex/\\1/g;\"\n      else\n        sysroot_cmd=\n      fi\n\n      # Remove sysroot references\n      if $opt_dry_run; then\n        for lib in $libs; do\n          echo \"removing references to $lt_sysroot and \\`=' prefixes from $lib\"\n        done\n      else\n        tmpdir=`func_mktempdir`\n        for lib in $libs; do\n\t  sed -e \"${sysroot_cmd} s/\\([ ']-[LR]\\)=/\\1/g; s/\\([ ']\\)=/\\1/g\" $lib \\\n\t    > $tmpdir/tmp-la\n\t  mv -f $tmpdir/tmp-la $lib\n\tdone\n        ${RM}r \"$tmpdir\"\n      fi\n    fi\n\n    if test -n \"$finish_cmds$finish_eval\" && test -n \"$libdirs\"; then\n      for libdir in $libdirs; do\n\tif test -n \"$finish_cmds\"; then\n\t  # Do each command in the finish commands.\n\t  func_execute_cmds \"$finish_cmds\" 'admincmds=\"$admincmds\n'\"$cmd\"'\"'\n\tfi\n\tif test -n \"$finish_eval\"; then\n\t  # Do the single finish_eval.\n\t  eval cmds=\\\"$finish_eval\\\"\n\t  $opt_dry_run || eval \"$cmds\" || func_append admincmds \"\n       $cmds\"\n\tfi\n      done\n    fi\n\n    # Exit here if they wanted silent mode.\n    $opt_silent && exit $EXIT_SUCCESS\n\n    if test -n \"$finish_cmds$finish_eval\" && test -n \"$libdirs\"; then\n      echo \"----------------------------------------------------------------------\"\n      echo \"Libraries have been installed in:\"\n      for libdir in $libdirs; do\n\t$ECHO \"   $libdir\"\n      done\n      echo\n      echo \"If you ever happen to want to link against installed libraries\"\n      echo \"in a given directory, LIBDIR, you must either use libtool, and\"\n      echo \"specify the full pathname of the library, or use the \\`-LLIBDIR'\"\n      echo \"flag during linking and do at least one of the following:\"\n      if test -n \"$shlibpath_var\"; then\n\techo \"   - add LIBDIR to the \\`$shlibpath_var' environment variable\"\n\techo \"     during execution\"\n      fi\n      if test -n \"$runpath_var\"; then\n\techo \"   - add LIBDIR to the \\`$runpath_var' environment variable\"\n\techo \"     during linking\"\n      fi\n      if test -n \"$hardcode_libdir_flag_spec\"; then\n\tlibdir=LIBDIR\n\teval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\n\t$ECHO \"   - use the \\`$flag' linker flag\"\n      fi\n      if test -n \"$admincmds\"; then\n\t$ECHO \"   - have your system administrator run these commands:$admincmds\"\n      fi\n      if test -f /etc/ld.so.conf; then\n\techo \"   - have your system administrator add LIBDIR to \\`/etc/ld.so.conf'\"\n      fi\n      echo\n\n      echo \"See any operating system documentation about shared libraries for\"\n      case $host in\n\tsolaris2.[6789]|solaris2.1[0-9])\n\t  echo \"more information, such as the ld(1), crle(1) and ld.so(8) manual\"\n\t  echo \"pages.\"\n\t  ;;\n\t*)\n\t  echo \"more information, such as the ld(1) and ld.so(8) manual pages.\"\n\t  ;;\n      esac\n      echo \"----------------------------------------------------------------------\"\n    fi\n    exit $EXIT_SUCCESS\n}\n\ntest \"$opt_mode\" = finish && func_mode_finish ${1+\"$@\"}\n\n\n# func_mode_install arg...\nfunc_mode_install ()\n{\n    $opt_debug\n    # There may be an optional sh(1) argument at the beginning of\n    # install_prog (especially on Windows NT).\n    if test \"$nonopt\" = \"$SHELL\" || test \"$nonopt\" = /bin/sh ||\n       # Allow the use of GNU shtool's install command.\n       case $nonopt in *shtool*) :;; *) false;; esac; then\n      # Aesthetically quote it.\n      func_quote_for_eval \"$nonopt\"\n      install_prog=\"$func_quote_for_eval_result \"\n      arg=$1\n      shift\n    else\n      install_prog=\n      arg=$nonopt\n    fi\n\n    # The real first argument should be the name of the installation program.\n    # Aesthetically quote it.\n    func_quote_for_eval \"$arg\"\n    func_append install_prog \"$func_quote_for_eval_result\"\n    install_shared_prog=$install_prog\n    case \" $install_prog \" in\n      *[\\\\\\ /]cp\\ *) install_cp=: ;;\n      *) install_cp=false ;;\n    esac\n\n    # We need to accept at least all the BSD install flags.\n    dest=\n    files=\n    opts=\n    prev=\n    install_type=\n    isdir=no\n    stripme=\n    no_mode=:\n    for arg\n    do\n      arg2=\n      if test -n \"$dest\"; then\n\tfunc_append files \" $dest\"\n\tdest=$arg\n\tcontinue\n      fi\n\n      case $arg in\n      -d) isdir=yes ;;\n      -f)\n\tif $install_cp; then :; else\n\t  prev=$arg\n\tfi\n\t;;\n      -g | -m | -o)\n\tprev=$arg\n\t;;\n      -s)\n\tstripme=\" -s\"\n\tcontinue\n\t;;\n      -*)\n\t;;\n      *)\n\t# If the previous option needed an argument, then skip it.\n\tif test -n \"$prev\"; then\n\t  if test \"x$prev\" = x-m && test -n \"$install_override_mode\"; then\n\t    arg2=$install_override_mode\n\t    no_mode=false\n\t  fi\n\t  prev=\n\telse\n\t  dest=$arg\n\t  continue\n\tfi\n\t;;\n      esac\n\n      # Aesthetically quote the argument.\n      func_quote_for_eval \"$arg\"\n      func_append install_prog \" $func_quote_for_eval_result\"\n      if test -n \"$arg2\"; then\n\tfunc_quote_for_eval \"$arg2\"\n      fi\n      func_append install_shared_prog \" $func_quote_for_eval_result\"\n    done\n\n    test -z \"$install_prog\" && \\\n      func_fatal_help \"you must specify an install program\"\n\n    test -n \"$prev\" && \\\n      func_fatal_help \"the \\`$prev' option requires an argument\"\n\n    if test -n \"$install_override_mode\" && $no_mode; then\n      if $install_cp; then :; else\n\tfunc_quote_for_eval \"$install_override_mode\"\n\tfunc_append install_shared_prog \" -m $func_quote_for_eval_result\"\n      fi\n    fi\n\n    if test -z \"$files\"; then\n      if test -z \"$dest\"; then\n\tfunc_fatal_help \"no file or destination specified\"\n      else\n\tfunc_fatal_help \"you must specify a destination\"\n      fi\n    fi\n\n    # Strip any trailing slash from the destination.\n    func_stripname '' '/' \"$dest\"\n    dest=$func_stripname_result\n\n    # Check to see that the destination is a directory.\n    test -d \"$dest\" && isdir=yes\n    if test \"$isdir\" = yes; then\n      destdir=\"$dest\"\n      destname=\n    else\n      func_dirname_and_basename \"$dest\" \"\" \".\"\n      destdir=\"$func_dirname_result\"\n      destname=\"$func_basename_result\"\n\n      # Not a directory, so check to see that there is only one file specified.\n      set dummy $files; shift\n      test \"$#\" -gt 1 && \\\n\tfunc_fatal_help \"\\`$dest' is not a directory\"\n    fi\n    case $destdir in\n    [\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n    *)\n      for file in $files; do\n\tcase $file in\n\t*.lo) ;;\n\t*)\n\t  func_fatal_help \"\\`$destdir' must be an absolute directory name\"\n\t  ;;\n\tesac\n      done\n      ;;\n    esac\n\n    # This variable tells wrapper scripts just to set variables rather\n    # than running their programs.\n    libtool_install_magic=\"$magic\"\n\n    staticlibs=\n    future_libdirs=\n    current_libdirs=\n    for file in $files; do\n\n      # Do each installation.\n      case $file in\n      *.$libext)\n\t# Do the static libraries later.\n\tfunc_append staticlibs \" $file\"\n\t;;\n\n      *.la)\n\tfunc_resolve_sysroot \"$file\"\n\tfile=$func_resolve_sysroot_result\n\n\t# Check to see that this really is a libtool archive.\n\tfunc_lalib_unsafe_p \"$file\" \\\n\t  || func_fatal_help \"\\`$file' is not a valid libtool archive\"\n\n\tlibrary_names=\n\told_library=\n\trelink_command=\n\tfunc_source \"$file\"\n\n\t# Add the libdir to current_libdirs if it is the destination.\n\tif test \"X$destdir\" = \"X$libdir\"; then\n\t  case \"$current_libdirs \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append current_libdirs \" $libdir\" ;;\n\t  esac\n\telse\n\t  # Note the libdir as a future libdir.\n\t  case \"$future_libdirs \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append future_libdirs \" $libdir\" ;;\n\t  esac\n\tfi\n\n\tfunc_dirname \"$file\" \"/\" \"\"\n\tdir=\"$func_dirname_result\"\n\tfunc_append dir \"$objdir\"\n\n\tif test -n \"$relink_command\"; then\n\t  # Determine the prefix the user has applied to our future dir.\n\t  inst_prefix_dir=`$ECHO \"$destdir\" | $SED -e \"s%$libdir\\$%%\"`\n\n\t  # Don't allow the user to place us outside of our expected\n\t  # location b/c this prevents finding dependent libraries that\n\t  # are installed to the same prefix.\n\t  # At present, this check doesn't affect windows .dll's that\n\t  # are installed into $libdir/../bin (currently, that works fine)\n\t  # but it's something to keep an eye on.\n\t  test \"$inst_prefix_dir\" = \"$destdir\" && \\\n\t    func_fatal_error \"error: cannot install \\`$file' to a directory not ending in $libdir\"\n\n\t  if test -n \"$inst_prefix_dir\"; then\n\t    # Stick the inst_prefix_dir data into the link command.\n\t    relink_command=`$ECHO \"$relink_command\" | $SED \"s%@inst_prefix_dir@%-inst-prefix-dir $inst_prefix_dir%\"`\n\t  else\n\t    relink_command=`$ECHO \"$relink_command\" | $SED \"s%@inst_prefix_dir@%%\"`\n\t  fi\n\n\t  func_warning \"relinking \\`$file'\"\n\t  func_show_eval \"$relink_command\" \\\n\t    'func_fatal_error \"error: relink \\`$file'\\'' with the above command before installing it\"'\n\tfi\n\n\t# See the names of the shared library.\n\tset dummy $library_names; shift\n\tif test -n \"$1\"; then\n\t  realname=\"$1\"\n\t  shift\n\n\t  srcname=\"$realname\"\n\t  test -n \"$relink_command\" && srcname=\"$realname\"T\n\n\t  # Install the shared library and build the symlinks.\n\t  func_show_eval \"$install_shared_prog $dir/$srcname $destdir/$realname\" \\\n\t      'exit $?'\n\t  tstripme=\"$stripme\"\n\t  case $host_os in\n\t  cygwin* | mingw* | pw32* | cegcc*)\n\t    case $realname in\n\t    *.dll.a)\n\t      tstripme=\"\"\n\t      ;;\n\t    esac\n\t    ;;\n\t  esac\n\t  if test -n \"$tstripme\" && test -n \"$striplib\"; then\n\t    func_show_eval \"$striplib $destdir/$realname\" 'exit $?'\n\t  fi\n\n\t  if test \"$#\" -gt 0; then\n\t    # Delete the old symlinks, and create new ones.\n\t    # Try `ln -sf' first, because the `ln' binary might depend on\n\t    # the symlink we replace!  Solaris /bin/ln does not understand -f,\n\t    # so we also need to try rm && ln -s.\n\t    for linkname\n\t    do\n\t      test \"$linkname\" != \"$realname\" \\\n\t\t&& func_show_eval \"(cd $destdir && { $LN_S -f $realname $linkname || { $RM $linkname && $LN_S $realname $linkname; }; })\"\n\t    done\n\t  fi\n\n\t  # Do each command in the postinstall commands.\n\t  lib=\"$destdir/$realname\"\n\t  func_execute_cmds \"$postinstall_cmds\" 'exit $?'\n\tfi\n\n\t# Install the pseudo-library for information purposes.\n\tfunc_basename \"$file\"\n\tname=\"$func_basename_result\"\n\tinstname=\"$dir/$name\"i\n\tfunc_show_eval \"$install_prog $instname $destdir/$name\" 'exit $?'\n\n\t# Maybe install the static library, too.\n\ttest -n \"$old_library\" && func_append staticlibs \" $dir/$old_library\"\n\t;;\n\n      *.lo)\n\t# Install (i.e. copy) a libtool object.\n\n\t# Figure out destination file name, if it wasn't already specified.\n\tif test -n \"$destname\"; then\n\t  destfile=\"$destdir/$destname\"\n\telse\n\t  func_basename \"$file\"\n\t  destfile=\"$func_basename_result\"\n\t  destfile=\"$destdir/$destfile\"\n\tfi\n\n\t# Deduce the name of the destination old-style object file.\n\tcase $destfile in\n\t*.lo)\n\t  func_lo2o \"$destfile\"\n\t  staticdest=$func_lo2o_result\n\t  ;;\n\t*.$objext)\n\t  staticdest=\"$destfile\"\n\t  destfile=\n\t  ;;\n\t*)\n\t  func_fatal_help \"cannot copy a libtool object to \\`$destfile'\"\n\t  ;;\n\tesac\n\n\t# Install the libtool object if requested.\n\ttest -n \"$destfile\" && \\\n\t  func_show_eval \"$install_prog $file $destfile\" 'exit $?'\n\n\t# Install the old object if enabled.\n\tif test \"$build_old_libs\" = yes; then\n\t  # Deduce the name of the old-style object file.\n\t  func_lo2o \"$file\"\n\t  staticobj=$func_lo2o_result\n\t  func_show_eval \"$install_prog \\$staticobj \\$staticdest\" 'exit $?'\n\tfi\n\texit $EXIT_SUCCESS\n\t;;\n\n      *)\n\t# Figure out destination file name, if it wasn't already specified.\n\tif test -n \"$destname\"; then\n\t  destfile=\"$destdir/$destname\"\n\telse\n\t  func_basename \"$file\"\n\t  destfile=\"$func_basename_result\"\n\t  destfile=\"$destdir/$destfile\"\n\tfi\n\n\t# If the file is missing, and there is a .exe on the end, strip it\n\t# because it is most likely a libtool script we actually want to\n\t# install\n\tstripped_ext=\"\"\n\tcase $file in\n\t  *.exe)\n\t    if test ! -f \"$file\"; then\n\t      func_stripname '' '.exe' \"$file\"\n\t      file=$func_stripname_result\n\t      stripped_ext=\".exe\"\n\t    fi\n\t    ;;\n\tesac\n\n\t# Do a test to see if this is really a libtool program.\n\tcase $host in\n\t*cygwin* | *mingw*)\n\t    if func_ltwrapper_executable_p \"$file\"; then\n\t      func_ltwrapper_scriptname \"$file\"\n\t      wrapper=$func_ltwrapper_scriptname_result\n\t    else\n\t      func_stripname '' '.exe' \"$file\"\n\t      wrapper=$func_stripname_result\n\t    fi\n\t    ;;\n\t*)\n\t    wrapper=$file\n\t    ;;\n\tesac\n\tif func_ltwrapper_script_p \"$wrapper\"; then\n\t  notinst_deplibs=\n\t  relink_command=\n\n\t  func_source \"$wrapper\"\n\n\t  # Check the variables that should have been set.\n\t  test -z \"$generated_by_libtool_version\" && \\\n\t    func_fatal_error \"invalid libtool wrapper script \\`$wrapper'\"\n\n\t  finalize=yes\n\t  for lib in $notinst_deplibs; do\n\t    # Check to see that each library is installed.\n\t    libdir=\n\t    if test -f \"$lib\"; then\n\t      func_source \"$lib\"\n\t    fi\n\t    libfile=\"$libdir/\"`$ECHO \"$lib\" | $SED 's%^.*/%%g'` ### testsuite: skip nested quoting test\n\t    if test -n \"$libdir\" && test ! -f \"$libfile\"; then\n\t      func_warning \"\\`$lib' has not been installed in \\`$libdir'\"\n\t      finalize=no\n\t    fi\n\t  done\n\n\t  relink_command=\n\t  func_source \"$wrapper\"\n\n\t  outputname=\n\t  if test \"$fast_install\" = no && test -n \"$relink_command\"; then\n\t    $opt_dry_run || {\n\t      if test \"$finalize\" = yes; then\n\t        tmpdir=`func_mktempdir`\n\t\tfunc_basename \"$file$stripped_ext\"\n\t\tfile=\"$func_basename_result\"\n\t        outputname=\"$tmpdir/$file\"\n\t        # Replace the output file specification.\n\t        relink_command=`$ECHO \"$relink_command\" | $SED 's%@OUTPUT@%'\"$outputname\"'%g'`\n\n\t        $opt_silent || {\n\t          func_quote_for_expand \"$relink_command\"\n\t\t  eval \"func_echo $func_quote_for_expand_result\"\n\t        }\n\t        if eval \"$relink_command\"; then :\n\t          else\n\t\t  func_error \"error: relink \\`$file' with the above command before installing it\"\n\t\t  $opt_dry_run || ${RM}r \"$tmpdir\"\n\t\t  continue\n\t        fi\n\t        file=\"$outputname\"\n\t      else\n\t        func_warning \"cannot relink \\`$file'\"\n\t      fi\n\t    }\n\t  else\n\t    # Install the binary that we compiled earlier.\n\t    file=`$ECHO \"$file$stripped_ext\" | $SED \"s%\\([^/]*\\)$%$objdir/\\1%\"`\n\t  fi\n\tfi\n\n\t# remove .exe since cygwin /usr/bin/install will append another\n\t# one anyway\n\tcase $install_prog,$host in\n\t*/usr/bin/install*,*cygwin*)\n\t  case $file:$destfile in\n\t  *.exe:*.exe)\n\t    # this is ok\n\t    ;;\n\t  *.exe:*)\n\t    destfile=$destfile.exe\n\t    ;;\n\t  *:*.exe)\n\t    func_stripname '' '.exe' \"$destfile\"\n\t    destfile=$func_stripname_result\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n\tfunc_show_eval \"$install_prog\\$stripme \\$file \\$destfile\" 'exit $?'\n\t$opt_dry_run || if test -n \"$outputname\"; then\n\t  ${RM}r \"$tmpdir\"\n\tfi\n\t;;\n      esac\n    done\n\n    for file in $staticlibs; do\n      func_basename \"$file\"\n      name=\"$func_basename_result\"\n\n      # Set up the ranlib parameters.\n      oldlib=\"$destdir/$name\"\n      func_to_tool_file \"$oldlib\" func_convert_file_msys_to_w32\n      tool_oldlib=$func_to_tool_file_result\n\n      func_show_eval \"$install_prog \\$file \\$oldlib\" 'exit $?'\n\n      if test -n \"$stripme\" && test -n \"$old_striplib\"; then\n\tfunc_show_eval \"$old_striplib $tool_oldlib\" 'exit $?'\n      fi\n\n      # Do each command in the postinstall commands.\n      func_execute_cmds \"$old_postinstall_cmds\" 'exit $?'\n    done\n\n    test -n \"$future_libdirs\" && \\\n      func_warning \"remember to run \\`$progname --finish$future_libdirs'\"\n\n    if test -n \"$current_libdirs\"; then\n      # Maybe just do a dry run.\n      $opt_dry_run && current_libdirs=\" -n$current_libdirs\"\n      exec_cmd='$SHELL $progpath $preserve_args --finish$current_libdirs'\n    else\n      exit $EXIT_SUCCESS\n    fi\n}\n\ntest \"$opt_mode\" = install && func_mode_install ${1+\"$@\"}\n\n\n# func_generate_dlsyms outputname originator pic_p\n# Extract symbols from dlprefiles and create ${outputname}S.o with\n# a dlpreopen symbol table.\nfunc_generate_dlsyms ()\n{\n    $opt_debug\n    my_outputname=\"$1\"\n    my_originator=\"$2\"\n    my_pic_p=\"${3-no}\"\n    my_prefix=`$ECHO \"$my_originator\" | sed 's%[^a-zA-Z0-9]%_%g'`\n    my_dlsyms=\n\n    if test -n \"$dlfiles$dlprefiles\" || test \"$dlself\" != no; then\n      if test -n \"$NM\" && test -n \"$global_symbol_pipe\"; then\n\tmy_dlsyms=\"${my_outputname}S.c\"\n      else\n\tfunc_error \"not configured to extract global symbols from dlpreopened files\"\n      fi\n    fi\n\n    if test -n \"$my_dlsyms\"; then\n      case $my_dlsyms in\n      \"\") ;;\n      *.c)\n\t# Discover the nlist of each of the dlfiles.\n\tnlist=\"$output_objdir/${my_outputname}.nm\"\n\n\tfunc_show_eval \"$RM $nlist ${nlist}S ${nlist}T\"\n\n\t# Parse the name list into a source file.\n\tfunc_verbose \"creating $output_objdir/$my_dlsyms\"\n\n\t$opt_dry_run || $ECHO > \"$output_objdir/$my_dlsyms\" \"\\\n/* $my_dlsyms - symbol resolution table for \\`$my_outputname' dlsym emulation. */\n/* Generated by $PROGRAM (GNU $PACKAGE$TIMESTAMP) $VERSION */\n\n#ifdef __cplusplus\nextern \\\"C\\\" {\n#endif\n\n#if defined(__GNUC__) && (((__GNUC__ == 4) && (__GNUC_MINOR__ >= 4)) || (__GNUC__ > 4))\n#pragma GCC diagnostic ignored \\\"-Wstrict-prototypes\\\"\n#endif\n\n/* Keep this code in sync between libtool.m4, ltmain, lt_system.h, and tests.  */\n#if defined(_WIN32) || defined(__CYGWIN__) || defined(_WIN32_WCE)\n/* DATA imports from DLLs on WIN32 con't be const, because runtime\n   relocations are performed -- see ld's documentation on pseudo-relocs.  */\n# define LT_DLSYM_CONST\n#elif defined(__osf__)\n/* This system does not cope well with relocations in const data.  */\n# define LT_DLSYM_CONST\n#else\n# define LT_DLSYM_CONST const\n#endif\n\n/* External symbol declarations for the compiler. */\\\n\"\n\n\tif test \"$dlself\" = yes; then\n\t  func_verbose \"generating symbol list for \\`$output'\"\n\n\t  $opt_dry_run || echo ': @PROGRAM@ ' > \"$nlist\"\n\n\t  # Add our own program objects to the symbol list.\n\t  progfiles=`$ECHO \"$objs$old_deplibs\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n\t  for progfile in $progfiles; do\n\t    func_to_tool_file \"$progfile\" func_convert_file_msys_to_w32\n\t    func_verbose \"extracting global C symbols from \\`$func_to_tool_file_result'\"\n\t    $opt_dry_run || eval \"$NM $func_to_tool_file_result | $global_symbol_pipe >> '$nlist'\"\n\t  done\n\n\t  if test -n \"$exclude_expsyms\"; then\n\t    $opt_dry_run || {\n\t      eval '$EGREP -v \" ($exclude_expsyms)$\" \"$nlist\" > \"$nlist\"T'\n\t      eval '$MV \"$nlist\"T \"$nlist\"'\n\t    }\n\t  fi\n\n\t  if test -n \"$export_symbols_regex\"; then\n\t    $opt_dry_run || {\n\t      eval '$EGREP -e \"$export_symbols_regex\" \"$nlist\" > \"$nlist\"T'\n\t      eval '$MV \"$nlist\"T \"$nlist\"'\n\t    }\n\t  fi\n\n\t  # Prepare the list of exported symbols\n\t  if test -z \"$export_symbols\"; then\n\t    export_symbols=\"$output_objdir/$outputname.exp\"\n\t    $opt_dry_run || {\n\t      $RM $export_symbols\n\t      eval \"${SED} -n -e '/^: @PROGRAM@ $/d' -e 's/^.* \\(.*\\)$/\\1/p' \"'< \"$nlist\" > \"$export_symbols\"'\n\t      case $host in\n\t      *cygwin* | *mingw* | *cegcc* )\n                eval \"echo EXPORTS \"'> \"$output_objdir/$outputname.def\"'\n                eval 'cat \"$export_symbols\" >> \"$output_objdir/$outputname.def\"'\n\t        ;;\n\t      esac\n\t    }\n\t  else\n\t    $opt_dry_run || {\n\t      eval \"${SED} -e 's/\\([].[*^$]\\)/\\\\\\\\\\1/g' -e 's/^/ /' -e 's/$/$/'\"' < \"$export_symbols\" > \"$output_objdir/$outputname.exp\"'\n\t      eval '$GREP -f \"$output_objdir/$outputname.exp\" < \"$nlist\" > \"$nlist\"T'\n\t      eval '$MV \"$nlist\"T \"$nlist\"'\n\t      case $host in\n\t        *cygwin* | *mingw* | *cegcc* )\n\t          eval \"echo EXPORTS \"'> \"$output_objdir/$outputname.def\"'\n\t          eval 'cat \"$nlist\" >> \"$output_objdir/$outputname.def\"'\n\t          ;;\n\t      esac\n\t    }\n\t  fi\n\tfi\n\n\tfor dlprefile in $dlprefiles; do\n\t  func_verbose \"extracting global C symbols from \\`$dlprefile'\"\n\t  func_basename \"$dlprefile\"\n\t  name=\"$func_basename_result\"\n          case $host in\n\t    *cygwin* | *mingw* | *cegcc* )\n\t      # if an import library, we need to obtain dlname\n\t      if func_win32_import_lib_p \"$dlprefile\"; then\n\t        func_tr_sh \"$dlprefile\"\n\t        eval \"curr_lafile=\\$libfile_$func_tr_sh_result\"\n\t        dlprefile_dlbasename=\"\"\n\t        if test -n \"$curr_lafile\" && func_lalib_p \"$curr_lafile\"; then\n\t          # Use subshell, to avoid clobbering current variable values\n\t          dlprefile_dlname=`source \"$curr_lafile\" && echo \"$dlname\"`\n\t          if test -n \"$dlprefile_dlname\" ; then\n\t            func_basename \"$dlprefile_dlname\"\n\t            dlprefile_dlbasename=\"$func_basename_result\"\n\t          else\n\t            # no lafile. user explicitly requested -dlpreopen <import library>.\n\t            $sharedlib_from_linklib_cmd \"$dlprefile\"\n\t            dlprefile_dlbasename=$sharedlib_from_linklib_result\n\t          fi\n\t        fi\n\t        $opt_dry_run || {\n\t          if test -n \"$dlprefile_dlbasename\" ; then\n\t            eval '$ECHO \": $dlprefile_dlbasename\" >> \"$nlist\"'\n\t          else\n\t            func_warning \"Could not compute DLL name from $name\"\n\t            eval '$ECHO \": $name \" >> \"$nlist\"'\n\t          fi\n\t          func_to_tool_file \"$dlprefile\" func_convert_file_msys_to_w32\n\t          eval \"$NM \\\"$func_to_tool_file_result\\\" 2>/dev/null | $global_symbol_pipe |\n\t            $SED -e '/I __imp/d' -e 's/I __nm_/D /;s/_nm__//' >> '$nlist'\"\n\t        }\n\t      else # not an import lib\n\t        $opt_dry_run || {\n\t          eval '$ECHO \": $name \" >> \"$nlist\"'\n\t          func_to_tool_file \"$dlprefile\" func_convert_file_msys_to_w32\n\t          eval \"$NM \\\"$func_to_tool_file_result\\\" 2>/dev/null | $global_symbol_pipe >> '$nlist'\"\n\t        }\n\t      fi\n\t    ;;\n\t    *)\n\t      $opt_dry_run || {\n\t        eval '$ECHO \": $name \" >> \"$nlist\"'\n\t        func_to_tool_file \"$dlprefile\" func_convert_file_msys_to_w32\n\t        eval \"$NM \\\"$func_to_tool_file_result\\\" 2>/dev/null | $global_symbol_pipe >> '$nlist'\"\n\t      }\n\t    ;;\n          esac\n\tdone\n\n\t$opt_dry_run || {\n\t  # Make sure we have at least an empty file.\n\t  test -f \"$nlist\" || : > \"$nlist\"\n\n\t  if test -n \"$exclude_expsyms\"; then\n\t    $EGREP -v \" ($exclude_expsyms)$\" \"$nlist\" > \"$nlist\"T\n\t    $MV \"$nlist\"T \"$nlist\"\n\t  fi\n\n\t  # Try sorting and uniquifying the output.\n\t  if $GREP -v \"^: \" < \"$nlist\" |\n\t      if sort -k 3 </dev/null >/dev/null 2>&1; then\n\t\tsort -k 3\n\t      else\n\t\tsort +2\n\t      fi |\n\t      uniq > \"$nlist\"S; then\n\t    :\n\t  else\n\t    $GREP -v \"^: \" < \"$nlist\" > \"$nlist\"S\n\t  fi\n\n\t  if test -f \"$nlist\"S; then\n\t    eval \"$global_symbol_to_cdecl\"' < \"$nlist\"S >> \"$output_objdir/$my_dlsyms\"'\n\t  else\n\t    echo '/* NONE */' >> \"$output_objdir/$my_dlsyms\"\n\t  fi\n\n\t  echo >> \"$output_objdir/$my_dlsyms\" \"\\\n\n/* The mapping between symbol names and symbols.  */\ntypedef struct {\n  const char *name;\n  void *address;\n} lt_dlsymlist;\nextern LT_DLSYM_CONST lt_dlsymlist\nlt_${my_prefix}_LTX_preloaded_symbols[];\nLT_DLSYM_CONST lt_dlsymlist\nlt_${my_prefix}_LTX_preloaded_symbols[] =\n{\\\n  { \\\"$my_originator\\\", (void *) 0 },\"\n\n\t  case $need_lib_prefix in\n\t  no)\n\t    eval \"$global_symbol_to_c_name_address\" < \"$nlist\" >> \"$output_objdir/$my_dlsyms\"\n\t    ;;\n\t  *)\n\t    eval \"$global_symbol_to_c_name_address_lib_prefix\" < \"$nlist\" >> \"$output_objdir/$my_dlsyms\"\n\t    ;;\n\t  esac\n\t  echo >> \"$output_objdir/$my_dlsyms\" \"\\\n  {0, (void *) 0}\n};\n\n/* This works around a problem in FreeBSD linker */\n#ifdef FREEBSD_WORKAROUND\nstatic const void *lt_preloaded_setup() {\n  return lt_${my_prefix}_LTX_preloaded_symbols;\n}\n#endif\n\n#ifdef __cplusplus\n}\n#endif\\\n\"\n\t} # !$opt_dry_run\n\n\tpic_flag_for_symtable=\n\tcase \"$compile_command \" in\n\t*\" -static \"*) ;;\n\t*)\n\t  case $host in\n\t  # compiling the symbol table file with pic_flag works around\n\t  # a FreeBSD bug that causes programs to crash when -lm is\n\t  # linked before any other PIC object.  But we must not use\n\t  # pic_flag when linking with -static.  The problem exists in\n\t  # FreeBSD 2.2.6 and is fixed in FreeBSD 3.1.\n\t  *-*-freebsd2.*|*-*-freebsd3.0*|*-*-freebsdelf3.0*)\n\t    pic_flag_for_symtable=\" $pic_flag -DFREEBSD_WORKAROUND\" ;;\n\t  *-*-hpux*)\n\t    pic_flag_for_symtable=\" $pic_flag\"  ;;\n\t  *)\n\t    if test \"X$my_pic_p\" != Xno; then\n\t      pic_flag_for_symtable=\" $pic_flag\"\n\t    fi\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n\tsymtab_cflags=\n\tfor arg in $LTCFLAGS; do\n\t  case $arg in\n\t  -pie | -fpie | -fPIE) ;;\n\t  *) func_append symtab_cflags \" $arg\" ;;\n\t  esac\n\tdone\n\n\t# Now compile the dynamic symbol file.\n\tfunc_show_eval '(cd $output_objdir && $LTCC$symtab_cflags -c$no_builtin_flag$pic_flag_for_symtable \"$my_dlsyms\")' 'exit $?'\n\n\t# Clean up the generated files.\n\tfunc_show_eval '$RM \"$output_objdir/$my_dlsyms\" \"$nlist\" \"${nlist}S\" \"${nlist}T\"'\n\n\t# Transform the symbol file into the correct name.\n\tsymfileobj=\"$output_objdir/${my_outputname}S.$objext\"\n\tcase $host in\n\t*cygwin* | *mingw* | *cegcc* )\n\t  if test -f \"$output_objdir/$my_outputname.def\"; then\n\t    compile_command=`$ECHO \"$compile_command\" | $SED \"s%@SYMFILE@%$output_objdir/$my_outputname.def $symfileobj%\"`\n\t    finalize_command=`$ECHO \"$finalize_command\" | $SED \"s%@SYMFILE@%$output_objdir/$my_outputname.def $symfileobj%\"`\n\t  else\n\t    compile_command=`$ECHO \"$compile_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t    finalize_command=`$ECHO \"$finalize_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t  fi\n\t  ;;\n\t*)\n\t  compile_command=`$ECHO \"$compile_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t  finalize_command=`$ECHO \"$finalize_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t  ;;\n\tesac\n\t;;\n      *)\n\tfunc_fatal_error \"unknown suffix for \\`$my_dlsyms'\"\n\t;;\n      esac\n    else\n      # We keep going just in case the user didn't refer to\n      # lt_preloaded_symbols.  The linker will fail if global_symbol_pipe\n      # really was required.\n\n      # Nullify the symbol file.\n      compile_command=`$ECHO \"$compile_command\" | $SED \"s% @SYMFILE@%%\"`\n      finalize_command=`$ECHO \"$finalize_command\" | $SED \"s% @SYMFILE@%%\"`\n    fi\n}\n\n# func_win32_libid arg\n# return the library type of file 'arg'\n#\n# Need a lot of goo to handle *both* DLLs and import libs\n# Has to be a shell function in order to 'eat' the argument\n# that is supplied when $file_magic_command is called.\n# Despite the name, also deal with 64 bit binaries.\nfunc_win32_libid ()\n{\n  $opt_debug\n  win32_libid_type=\"unknown\"\n  win32_fileres=`file -L $1 2>/dev/null`\n  case $win32_fileres in\n  *ar\\ archive\\ import\\ library*) # definitely import\n    win32_libid_type=\"x86 archive import\"\n    ;;\n  *ar\\ archive*) # could be an import, or static\n    # Keep the egrep pattern in sync with the one in _LT_CHECK_MAGIC_METHOD.\n    if eval $OBJDUMP -f $1 | $SED -e '10q' 2>/dev/null |\n       $EGREP 'file format (pei*-i386(.*architecture: i386)?|pe-arm-wince|pe-x86-64)' >/dev/null; then\n      func_to_tool_file \"$1\" func_convert_file_msys_to_w32\n      win32_nmres=`eval $NM -f posix -A \\\"$func_to_tool_file_result\\\" |\n\t$SED -n -e '\n\t    1,100{\n\t\t/ I /{\n\t\t    s,.*,import,\n\t\t    p\n\t\t    q\n\t\t}\n\t    }'`\n      case $win32_nmres in\n      import*)  win32_libid_type=\"x86 archive import\";;\n      *)        win32_libid_type=\"x86 archive static\";;\n      esac\n    fi\n    ;;\n  *DLL*)\n    win32_libid_type=\"x86 DLL\"\n    ;;\n  *executable*) # but shell scripts are \"executable\" too...\n    case $win32_fileres in\n    *MS\\ Windows\\ PE\\ Intel*)\n      win32_libid_type=\"x86 DLL\"\n      ;;\n    esac\n    ;;\n  esac\n  $ECHO \"$win32_libid_type\"\n}\n\n# func_cygming_dll_for_implib ARG\n#\n# Platform-specific function to extract the\n# name of the DLL associated with the specified\n# import library ARG.\n# Invoked by eval'ing the libtool variable\n#    $sharedlib_from_linklib_cmd\n# Result is available in the variable\n#    $sharedlib_from_linklib_result\nfunc_cygming_dll_for_implib ()\n{\n  $opt_debug\n  sharedlib_from_linklib_result=`$DLLTOOL --identify-strict --identify \"$1\"`\n}\n\n# func_cygming_dll_for_implib_fallback_core SECTION_NAME LIBNAMEs\n#\n# The is the core of a fallback implementation of a\n# platform-specific function to extract the name of the\n# DLL associated with the specified import library LIBNAME.\n#\n# SECTION_NAME is either .idata$6 or .idata$7, depending\n# on the platform and compiler that created the implib.\n#\n# Echos the name of the DLL associated with the\n# specified import library.\nfunc_cygming_dll_for_implib_fallback_core ()\n{\n  $opt_debug\n  match_literal=`$ECHO \"$1\" | $SED \"$sed_make_literal_regex\"`\n  $OBJDUMP -s --section \"$1\" \"$2\" 2>/dev/null |\n    $SED '/^Contents of section '\"$match_literal\"':/{\n      # Place marker at beginning of archive member dllname section\n      s/.*/====MARK====/\n      p\n      d\n    }\n    # These lines can sometimes be longer than 43 characters, but\n    # are always uninteresting\n    /:[\t ]*file format pe[i]\\{,1\\}-/d\n    /^In archive [^:]*:/d\n    # Ensure marker is printed\n    /^====MARK====/p\n    # Remove all lines with less than 43 characters\n    /^.\\{43\\}/!d\n    # From remaining lines, remove first 43 characters\n    s/^.\\{43\\}//' |\n    $SED -n '\n      # Join marker and all lines until next marker into a single line\n      /^====MARK====/ b para\n      H\n      $ b para\n      b\n      :para\n      x\n      s/\\n//g\n      # Remove the marker\n      s/^====MARK====//\n      # Remove trailing dots and whitespace\n      s/[\\. \\t]*$//\n      # Print\n      /./p' |\n    # we now have a list, one entry per line, of the stringified\n    # contents of the appropriate section of all members of the\n    # archive which possess that section. Heuristic: eliminate\n    # all those which have a first or second character that is\n    # a '.' (that is, objdump's representation of an unprintable\n    # character.) This should work for all archives with less than\n    # 0x302f exports -- but will fail for DLLs whose name actually\n    # begins with a literal '.' or a single character followed by\n    # a '.'.\n    #\n    # Of those that remain, print the first one.\n    $SED -e '/^\\./d;/^.\\./d;q'\n}\n\n# func_cygming_gnu_implib_p ARG\n# This predicate returns with zero status (TRUE) if\n# ARG is a GNU/binutils-style import library. Returns\n# with nonzero status (FALSE) otherwise.\nfunc_cygming_gnu_implib_p ()\n{\n  $opt_debug\n  func_to_tool_file \"$1\" func_convert_file_msys_to_w32\n  func_cygming_gnu_implib_tmp=`$NM \"$func_to_tool_file_result\" | eval \"$global_symbol_pipe\" | $EGREP ' (_head_[A-Za-z0-9_]+_[ad]l*|[A-Za-z0-9_]+_[ad]l*_iname)$'`\n  test -n \"$func_cygming_gnu_implib_tmp\"\n}\n\n# func_cygming_ms_implib_p ARG\n# This predicate returns with zero status (TRUE) if\n# ARG is an MS-style import library. Returns\n# with nonzero status (FALSE) otherwise.\nfunc_cygming_ms_implib_p ()\n{\n  $opt_debug\n  func_to_tool_file \"$1\" func_convert_file_msys_to_w32\n  func_cygming_ms_implib_tmp=`$NM \"$func_to_tool_file_result\" | eval \"$global_symbol_pipe\" | $GREP '_NULL_IMPORT_DESCRIPTOR'`\n  test -n \"$func_cygming_ms_implib_tmp\"\n}\n\n# func_cygming_dll_for_implib_fallback ARG\n# Platform-specific function to extract the\n# name of the DLL associated with the specified\n# import library ARG.\n#\n# This fallback implementation is for use when $DLLTOOL\n# does not support the --identify-strict option.\n# Invoked by eval'ing the libtool variable\n#    $sharedlib_from_linklib_cmd\n# Result is available in the variable\n#    $sharedlib_from_linklib_result\nfunc_cygming_dll_for_implib_fallback ()\n{\n  $opt_debug\n  if func_cygming_gnu_implib_p \"$1\" ; then\n    # binutils import library\n    sharedlib_from_linklib_result=`func_cygming_dll_for_implib_fallback_core '.idata$7' \"$1\"`\n  elif func_cygming_ms_implib_p \"$1\" ; then\n    # ms-generated import library\n    sharedlib_from_linklib_result=`func_cygming_dll_for_implib_fallback_core '.idata$6' \"$1\"`\n  else\n    # unknown\n    sharedlib_from_linklib_result=\"\"\n  fi\n}\n\n\n# func_extract_an_archive dir oldlib\nfunc_extract_an_archive ()\n{\n    $opt_debug\n    f_ex_an_ar_dir=\"$1\"; shift\n    f_ex_an_ar_oldlib=\"$1\"\n    if test \"$lock_old_archive_extraction\" = yes; then\n      lockfile=$f_ex_an_ar_oldlib.lock\n      until $opt_dry_run || ln \"$progpath\" \"$lockfile\" 2>/dev/null; do\n\tfunc_echo \"Waiting for $lockfile to be removed\"\n\tsleep 2\n      done\n    fi\n    func_show_eval \"(cd \\$f_ex_an_ar_dir && $AR x \\\"\\$f_ex_an_ar_oldlib\\\")\" \\\n\t\t   'stat=$?; rm -f \"$lockfile\"; exit $stat'\n    if test \"$lock_old_archive_extraction\" = yes; then\n      $opt_dry_run || rm -f \"$lockfile\"\n    fi\n    if ($AR t \"$f_ex_an_ar_oldlib\" | sort | sort -uc >/dev/null 2>&1); then\n     :\n    else\n      func_fatal_error \"object name conflicts in archive: $f_ex_an_ar_dir/$f_ex_an_ar_oldlib\"\n    fi\n}\n\n\n# func_extract_archives gentop oldlib ...\nfunc_extract_archives ()\n{\n    $opt_debug\n    my_gentop=\"$1\"; shift\n    my_oldlibs=${1+\"$@\"}\n    my_oldobjs=\"\"\n    my_xlib=\"\"\n    my_xabs=\"\"\n    my_xdir=\"\"\n\n    for my_xlib in $my_oldlibs; do\n      # Extract the objects.\n      case $my_xlib in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) my_xabs=\"$my_xlib\" ;;\n\t*) my_xabs=`pwd`\"/$my_xlib\" ;;\n      esac\n      func_basename \"$my_xlib\"\n      my_xlib=\"$func_basename_result\"\n      my_xlib_u=$my_xlib\n      while :; do\n        case \" $extracted_archives \" in\n\t*\" $my_xlib_u \"*)\n\t  func_arith $extracted_serial + 1\n\t  extracted_serial=$func_arith_result\n\t  my_xlib_u=lt$extracted_serial-$my_xlib ;;\n\t*) break ;;\n\tesac\n      done\n      extracted_archives=\"$extracted_archives $my_xlib_u\"\n      my_xdir=\"$my_gentop/$my_xlib_u\"\n\n      func_mkdir_p \"$my_xdir\"\n\n      case $host in\n      *-darwin*)\n\tfunc_verbose \"Extracting $my_xabs\"\n\t# Do not bother doing anything if just a dry run\n\t$opt_dry_run || {\n\t  darwin_orig_dir=`pwd`\n\t  cd $my_xdir || exit $?\n\t  darwin_archive=$my_xabs\n\t  darwin_curdir=`pwd`\n\t  darwin_base_archive=`basename \"$darwin_archive\"`\n\t  darwin_arches=`$LIPO -info \"$darwin_archive\" 2>/dev/null | $GREP Architectures 2>/dev/null || true`\n\t  if test -n \"$darwin_arches\"; then\n\t    darwin_arches=`$ECHO \"$darwin_arches\" | $SED -e 's/.*are://'`\n\t    darwin_arch=\n\t    func_verbose \"$darwin_base_archive has multiple architectures $darwin_arches\"\n\t    for darwin_arch in  $darwin_arches ; do\n\t      func_mkdir_p \"unfat-$$/${darwin_base_archive}-${darwin_arch}\"\n\t      $LIPO -thin $darwin_arch -output \"unfat-$$/${darwin_base_archive}-${darwin_arch}/${darwin_base_archive}\" \"${darwin_archive}\"\n\t      cd \"unfat-$$/${darwin_base_archive}-${darwin_arch}\"\n\t      func_extract_an_archive \"`pwd`\" \"${darwin_base_archive}\"\n\t      cd \"$darwin_curdir\"\n\t      $RM \"unfat-$$/${darwin_base_archive}-${darwin_arch}/${darwin_base_archive}\"\n\t    done # $darwin_arches\n            ## Okay now we've a bunch of thin objects, gotta fatten them up :)\n\t    darwin_filelist=`find unfat-$$ -type f -name \\*.o -print -o -name \\*.lo -print | $SED -e \"$basename\" | sort -u`\n\t    darwin_file=\n\t    darwin_files=\n\t    for darwin_file in $darwin_filelist; do\n\t      darwin_files=`find unfat-$$ -name $darwin_file -print | sort | $NL2SP`\n\t      $LIPO -create -output \"$darwin_file\" $darwin_files\n\t    done # $darwin_filelist\n\t    $RM -rf unfat-$$\n\t    cd \"$darwin_orig_dir\"\n\t  else\n\t    cd $darwin_orig_dir\n\t    func_extract_an_archive \"$my_xdir\" \"$my_xabs\"\n\t  fi # $darwin_arches\n\t} # !$opt_dry_run\n\t;;\n      *)\n        func_extract_an_archive \"$my_xdir\" \"$my_xabs\"\n\t;;\n      esac\n      my_oldobjs=\"$my_oldobjs \"`find $my_xdir -name \\*.$objext -print -o -name \\*.lo -print | sort | $NL2SP`\n    done\n\n    func_extract_archives_result=\"$my_oldobjs\"\n}\n\n\n# func_emit_wrapper [arg=no]\n#\n# Emit a libtool wrapper script on stdout.\n# Don't directly open a file because we may want to\n# incorporate the script contents within a cygwin/mingw\n# wrapper executable.  Must ONLY be called from within\n# func_mode_link because it depends on a number of variables\n# set therein.\n#\n# ARG is the value that the WRAPPER_SCRIPT_BELONGS_IN_OBJDIR\n# variable will take.  If 'yes', then the emitted script\n# will assume that the directory in which it is stored is\n# the $objdir directory.  This is a cygwin/mingw-specific\n# behavior.\nfunc_emit_wrapper ()\n{\n\tfunc_emit_wrapper_arg1=${1-no}\n\n\t$ECHO \"\\\n#! $SHELL\n\n# $output - temporary wrapper script for $objdir/$outputname\n# Generated by $PROGRAM (GNU $PACKAGE$TIMESTAMP) $VERSION\n#\n# The $output program cannot be directly executed until all the libtool\n# libraries that it depends on are installed.\n#\n# This wrapper script should never be moved out of the build directory.\n# If it is, it will not operate correctly.\n\n# Sed substitution that helps us do robust quoting.  It backslashifies\n# metacharacters that are still active within double-quoted strings.\nsed_quote_subst='$sed_quote_subst'\n\n# Be Bourne compatible\nif test -n \\\"\\${ZSH_VERSION+set}\\\" && (emulate sh) >/dev/null 2>&1; then\n  emulate sh\n  NULLCMD=:\n  # Zsh 3.x and 4.x performs word splitting on \\${1+\\\"\\$@\\\"}, which\n  # is contrary to our usage.  Disable this feature.\n  alias -g '\\${1+\\\"\\$@\\\"}'='\\\"\\$@\\\"'\n  setopt NO_GLOB_SUBST\nelse\n  case \\`(set -o) 2>/dev/null\\` in *posix*) set -o posix;; esac\nfi\nBIN_SH=xpg4; export BIN_SH # for Tru64\nDUALCASE=1; export DUALCASE # for MKS sh\n\n# The HP-UX ksh and POSIX shell print the target directory to stdout\n# if CDPATH is set.\n(unset CDPATH) >/dev/null 2>&1 && unset CDPATH\n\nrelink_command=\\\"$relink_command\\\"\n\n# This environment variable determines our operation mode.\nif test \\\"\\$libtool_install_magic\\\" = \\\"$magic\\\"; then\n  # install mode needs the following variables:\n  generated_by_libtool_version='$macro_version'\n  notinst_deplibs='$notinst_deplibs'\nelse\n  # When we are sourced in execute mode, \\$file and \\$ECHO are already set.\n  if test \\\"\\$libtool_execute_magic\\\" != \\\"$magic\\\"; then\n    file=\\\"\\$0\\\"\"\n\n    qECHO=`$ECHO \"$ECHO\" | $SED \"$sed_quote_subst\"`\n    $ECHO \"\\\n\n# A function that is used when there is no print builtin or printf.\nfunc_fallback_echo ()\n{\n  eval 'cat <<_LTECHO_EOF\n\\$1\n_LTECHO_EOF'\n}\n    ECHO=\\\"$qECHO\\\"\n  fi\n\n# Very basic option parsing. These options are (a) specific to\n# the libtool wrapper, (b) are identical between the wrapper\n# /script/ and the wrapper /executable/ which is used only on\n# windows platforms, and (c) all begin with the string \"--lt-\"\n# (application programs are unlikely to have options which match\n# this pattern).\n#\n# There are only two supported options: --lt-debug and\n# --lt-dump-script. There is, deliberately, no --lt-help.\n#\n# The first argument to this parsing function should be the\n# script's $0 value, followed by \"$@\".\nlt_option_debug=\nfunc_parse_lt_options ()\n{\n  lt_script_arg0=\\$0\n  shift\n  for lt_opt\n  do\n    case \\\"\\$lt_opt\\\" in\n    --lt-debug) lt_option_debug=1 ;;\n    --lt-dump-script)\n        lt_dump_D=\\`\\$ECHO \\\"X\\$lt_script_arg0\\\" | $SED -e 's/^X//' -e 's%/[^/]*$%%'\\`\n        test \\\"X\\$lt_dump_D\\\" = \\\"X\\$lt_script_arg0\\\" && lt_dump_D=.\n        lt_dump_F=\\`\\$ECHO \\\"X\\$lt_script_arg0\\\" | $SED -e 's/^X//' -e 's%^.*/%%'\\`\n        cat \\\"\\$lt_dump_D/\\$lt_dump_F\\\"\n        exit 0\n      ;;\n    --lt-*)\n        \\$ECHO \\\"Unrecognized --lt- option: '\\$lt_opt'\\\" 1>&2\n        exit 1\n      ;;\n    esac\n  done\n\n  # Print the debug banner immediately:\n  if test -n \\\"\\$lt_option_debug\\\"; then\n    echo \\\"${outputname}:${output}:\\${LINENO}: libtool wrapper (GNU $PACKAGE$TIMESTAMP) $VERSION\\\" 1>&2\n  fi\n}\n\n# Used when --lt-debug. Prints its arguments to stdout\n# (redirection is the responsibility of the caller)\nfunc_lt_dump_args ()\n{\n  lt_dump_args_N=1;\n  for lt_arg\n  do\n    \\$ECHO \\\"${outputname}:${output}:\\${LINENO}: newargv[\\$lt_dump_args_N]: \\$lt_arg\\\"\n    lt_dump_args_N=\\`expr \\$lt_dump_args_N + 1\\`\n  done\n}\n\n# Core function for launching the target application\nfunc_exec_program_core ()\n{\n\"\n  case $host in\n  # Backslashes separate directories on plain windows\n  *-*-mingw | *-*-os2* | *-cegcc*)\n    $ECHO \"\\\n      if test -n \\\"\\$lt_option_debug\\\"; then\n        \\$ECHO \\\"${outputname}:${output}:\\${LINENO}: newargv[0]: \\$progdir\\\\\\\\\\$program\\\" 1>&2\n        func_lt_dump_args \\${1+\\\"\\$@\\\"} 1>&2\n      fi\n      exec \\\"\\$progdir\\\\\\\\\\$program\\\" \\${1+\\\"\\$@\\\"}\n\"\n    ;;\n\n  *)\n    $ECHO \"\\\n      if test -n \\\"\\$lt_option_debug\\\"; then\n        \\$ECHO \\\"${outputname}:${output}:\\${LINENO}: newargv[0]: \\$progdir/\\$program\\\" 1>&2\n        func_lt_dump_args \\${1+\\\"\\$@\\\"} 1>&2\n      fi\n      exec \\\"\\$progdir/\\$program\\\" \\${1+\\\"\\$@\\\"}\n\"\n    ;;\n  esac\n  $ECHO \"\\\n      \\$ECHO \\\"\\$0: cannot exec \\$program \\$*\\\" 1>&2\n      exit 1\n}\n\n# A function to encapsulate launching the target application\n# Strips options in the --lt-* namespace from \\$@ and\n# launches target application with the remaining arguments.\nfunc_exec_program ()\n{\n  case \\\" \\$* \\\" in\n  *\\\\ --lt-*)\n    for lt_wr_arg\n    do\n      case \\$lt_wr_arg in\n      --lt-*) ;;\n      *) set x \\\"\\$@\\\" \\\"\\$lt_wr_arg\\\"; shift;;\n      esac\n      shift\n    done ;;\n  esac\n  func_exec_program_core \\${1+\\\"\\$@\\\"}\n}\n\n  # Parse options\n  func_parse_lt_options \\\"\\$0\\\" \\${1+\\\"\\$@\\\"}\n\n  # Find the directory that this script lives in.\n  thisdir=\\`\\$ECHO \\\"\\$file\\\" | $SED 's%/[^/]*$%%'\\`\n  test \\\"x\\$thisdir\\\" = \\\"x\\$file\\\" && thisdir=.\n\n  # Follow symbolic links until we get to the real thisdir.\n  file=\\`ls -ld \\\"\\$file\\\" | $SED -n 's/.*-> //p'\\`\n  while test -n \\\"\\$file\\\"; do\n    destdir=\\`\\$ECHO \\\"\\$file\\\" | $SED 's%/[^/]*\\$%%'\\`\n\n    # If there was a directory component, then change thisdir.\n    if test \\\"x\\$destdir\\\" != \\\"x\\$file\\\"; then\n      case \\\"\\$destdir\\\" in\n      [\\\\\\\\/]* | [A-Za-z]:[\\\\\\\\/]*) thisdir=\\\"\\$destdir\\\" ;;\n      *) thisdir=\\\"\\$thisdir/\\$destdir\\\" ;;\n      esac\n    fi\n\n    file=\\`\\$ECHO \\\"\\$file\\\" | $SED 's%^.*/%%'\\`\n    file=\\`ls -ld \\\"\\$thisdir/\\$file\\\" | $SED -n 's/.*-> //p'\\`\n  done\n\n  # Usually 'no', except on cygwin/mingw when embedded into\n  # the cwrapper.\n  WRAPPER_SCRIPT_BELONGS_IN_OBJDIR=$func_emit_wrapper_arg1\n  if test \\\"\\$WRAPPER_SCRIPT_BELONGS_IN_OBJDIR\\\" = \\\"yes\\\"; then\n    # special case for '.'\n    if test \\\"\\$thisdir\\\" = \\\".\\\"; then\n      thisdir=\\`pwd\\`\n    fi\n    # remove .libs from thisdir\n    case \\\"\\$thisdir\\\" in\n    *[\\\\\\\\/]$objdir ) thisdir=\\`\\$ECHO \\\"\\$thisdir\\\" | $SED 's%[\\\\\\\\/][^\\\\\\\\/]*$%%'\\` ;;\n    $objdir )   thisdir=. ;;\n    esac\n  fi\n\n  # Try to get the absolute directory name.\n  absdir=\\`cd \\\"\\$thisdir\\\" && pwd\\`\n  test -n \\\"\\$absdir\\\" && thisdir=\\\"\\$absdir\\\"\n\"\n\n\tif test \"$fast_install\" = yes; then\n\t  $ECHO \"\\\n  program=lt-'$outputname'$exeext\n  progdir=\\\"\\$thisdir/$objdir\\\"\n\n  if test ! -f \\\"\\$progdir/\\$program\\\" ||\n     { file=\\`ls -1dt \\\"\\$progdir/\\$program\\\" \\\"\\$progdir/../\\$program\\\" 2>/dev/null | ${SED} 1q\\`; \\\\\n       test \\\"X\\$file\\\" != \\\"X\\$progdir/\\$program\\\"; }; then\n\n    file=\\\"\\$\\$-\\$program\\\"\n\n    if test ! -d \\\"\\$progdir\\\"; then\n      $MKDIR \\\"\\$progdir\\\"\n    else\n      $RM \\\"\\$progdir/\\$file\\\"\n    fi\"\n\n\t  $ECHO \"\\\n\n    # relink executable if necessary\n    if test -n \\\"\\$relink_command\\\"; then\n      if relink_command_output=\\`eval \\$relink_command 2>&1\\`; then :\n      else\n\t$ECHO \\\"\\$relink_command_output\\\" >&2\n\t$RM \\\"\\$progdir/\\$file\\\"\n\texit 1\n      fi\n    fi\n\n    $MV \\\"\\$progdir/\\$file\\\" \\\"\\$progdir/\\$program\\\" 2>/dev/null ||\n    { $RM \\\"\\$progdir/\\$program\\\";\n      $MV \\\"\\$progdir/\\$file\\\" \\\"\\$progdir/\\$program\\\"; }\n    $RM \\\"\\$progdir/\\$file\\\"\n  fi\"\n\telse\n\t  $ECHO \"\\\n  program='$outputname'\n  progdir=\\\"\\$thisdir/$objdir\\\"\n\"\n\tfi\n\n\t$ECHO \"\\\n\n  if test -f \\\"\\$progdir/\\$program\\\"; then\"\n\n\t# fixup the dll searchpath if we need to.\n\t#\n\t# Fix the DLL searchpath if we need to.  Do this before prepending\n\t# to shlibpath, because on Windows, both are PATH and uninstalled\n\t# libraries must come first.\n\tif test -n \"$dllsearchpath\"; then\n\t  $ECHO \"\\\n    # Add the dll search path components to the executable PATH\n    PATH=$dllsearchpath:\\$PATH\n\"\n\tfi\n\n\t# Export our shlibpath_var if we have one.\n\tif test \"$shlibpath_overrides_runpath\" = yes && test -n \"$shlibpath_var\" && test -n \"$temp_rpath\"; then\n\t  $ECHO \"\\\n    # Add our own library path to $shlibpath_var\n    $shlibpath_var=\\\"$temp_rpath\\$$shlibpath_var\\\"\n\n    # Some systems cannot cope with colon-terminated $shlibpath_var\n    # The second colon is a workaround for a bug in BeOS R4 sed\n    $shlibpath_var=\\`\\$ECHO \\\"\\$$shlibpath_var\\\" | $SED 's/::*\\$//'\\`\n\n    export $shlibpath_var\n\"\n\tfi\n\n\t$ECHO \"\\\n    if test \\\"\\$libtool_execute_magic\\\" != \\\"$magic\\\"; then\n      # Run the actual program with our arguments.\n      func_exec_program \\${1+\\\"\\$@\\\"}\n    fi\n  else\n    # The program doesn't exist.\n    \\$ECHO \\\"\\$0: error: \\\\\\`\\$progdir/\\$program' does not exist\\\" 1>&2\n    \\$ECHO \\\"This script is just a wrapper for \\$program.\\\" 1>&2\n    \\$ECHO \\\"See the $PACKAGE documentation for more information.\\\" 1>&2\n    exit 1\n  fi\nfi\\\n\"\n}\n\n\n# func_emit_cwrapperexe_src\n# emit the source code for a wrapper executable on stdout\n# Must ONLY be called from within func_mode_link because\n# it depends on a number of variable set therein.\nfunc_emit_cwrapperexe_src ()\n{\n\tcat <<EOF\n\n/* $cwrappersource - temporary wrapper executable for $objdir/$outputname\n   Generated by $PROGRAM (GNU $PACKAGE$TIMESTAMP) $VERSION\n\n   The $output program cannot be directly executed until all the libtool\n   libraries that it depends on are installed.\n\n   This wrapper executable should never be moved out of the build directory.\n   If it is, it will not operate correctly.\n*/\nEOF\n\t    cat <<\"EOF\"\n#ifdef _MSC_VER\n# define _CRT_SECURE_NO_DEPRECATE 1\n#endif\n#include <stdio.h>\n#include <stdlib.h>\n#ifdef _MSC_VER\n# include <direct.h>\n# include <process.h>\n# include <io.h>\n#else\n# include <unistd.h>\n# include <stdint.h>\n# ifdef __CYGWIN__\n#  include <io.h>\n# endif\n#endif\n#include <malloc.h>\n#include <stdarg.h>\n#include <assert.h>\n#include <string.h>\n#include <ctype.h>\n#include <errno.h>\n#include <fcntl.h>\n#include <sys/stat.h>\n\n/* declarations of non-ANSI functions */\n#if defined(__MINGW32__)\n# ifdef __STRICT_ANSI__\nint _putenv (const char *);\n# endif\n#elif defined(__CYGWIN__)\n# ifdef __STRICT_ANSI__\nchar *realpath (const char *, char *);\nint putenv (char *);\nint setenv (const char *, const char *, int);\n# endif\n/* #elif defined (other platforms) ... */\n#endif\n\n/* portability defines, excluding path handling macros */\n#if defined(_MSC_VER)\n# define setmode _setmode\n# define stat    _stat\n# define chmod   _chmod\n# define getcwd  _getcwd\n# define putenv  _putenv\n# define S_IXUSR _S_IEXEC\n# ifndef _INTPTR_T_DEFINED\n#  define _INTPTR_T_DEFINED\n#  define intptr_t int\n# endif\n#elif defined(__MINGW32__)\n# define setmode _setmode\n# define stat    _stat\n# define chmod   _chmod\n# define getcwd  _getcwd\n# define putenv  _putenv\n#elif defined(__CYGWIN__)\n# define HAVE_SETENV\n# define FOPEN_WB \"wb\"\n/* #elif defined (other platforms) ... */\n#endif\n\n#if defined(PATH_MAX)\n# define LT_PATHMAX PATH_MAX\n#elif defined(MAXPATHLEN)\n# define LT_PATHMAX MAXPATHLEN\n#else\n# define LT_PATHMAX 1024\n#endif\n\n#ifndef S_IXOTH\n# define S_IXOTH 0\n#endif\n#ifndef S_IXGRP\n# define S_IXGRP 0\n#endif\n\n/* path handling portability macros */\n#ifndef DIR_SEPARATOR\n# define DIR_SEPARATOR '/'\n# define PATH_SEPARATOR ':'\n#endif\n\n#if defined (_WIN32) || defined (__MSDOS__) || defined (__DJGPP__) || \\\n  defined (__OS2__)\n# define HAVE_DOS_BASED_FILE_SYSTEM\n# define FOPEN_WB \"wb\"\n# ifndef DIR_SEPARATOR_2\n#  define DIR_SEPARATOR_2 '\\\\'\n# endif\n# ifndef PATH_SEPARATOR_2\n#  define PATH_SEPARATOR_2 ';'\n# endif\n#endif\n\n#ifndef DIR_SEPARATOR_2\n# define IS_DIR_SEPARATOR(ch) ((ch) == DIR_SEPARATOR)\n#else /* DIR_SEPARATOR_2 */\n# define IS_DIR_SEPARATOR(ch) \\\n\t(((ch) == DIR_SEPARATOR) || ((ch) == DIR_SEPARATOR_2))\n#endif /* DIR_SEPARATOR_2 */\n\n#ifndef PATH_SEPARATOR_2\n# define IS_PATH_SEPARATOR(ch) ((ch) == PATH_SEPARATOR)\n#else /* PATH_SEPARATOR_2 */\n# define IS_PATH_SEPARATOR(ch) ((ch) == PATH_SEPARATOR_2)\n#endif /* PATH_SEPARATOR_2 */\n\n#ifndef FOPEN_WB\n# define FOPEN_WB \"w\"\n#endif\n#ifndef _O_BINARY\n# define _O_BINARY 0\n#endif\n\n#define XMALLOC(type, num)      ((type *) xmalloc ((num) * sizeof(type)))\n#define XFREE(stale) do { \\\n  if (stale) { free ((void *) stale); stale = 0; } \\\n} while (0)\n\n#if defined(LT_DEBUGWRAPPER)\nstatic int lt_debug = 1;\n#else\nstatic int lt_debug = 0;\n#endif\n\nconst char *program_name = \"libtool-wrapper\"; /* in case xstrdup fails */\n\nvoid *xmalloc (size_t num);\nchar *xstrdup (const char *string);\nconst char *base_name (const char *name);\nchar *find_executable (const char *wrapper);\nchar *chase_symlinks (const char *pathspec);\nint make_executable (const char *path);\nint check_executable (const char *path);\nchar *strendzap (char *str, const char *pat);\nvoid lt_debugprintf (const char *file, int line, const char *fmt, ...);\nvoid lt_fatal (const char *file, int line, const char *message, ...);\nstatic const char *nonnull (const char *s);\nstatic const char *nonempty (const char *s);\nvoid lt_setenv (const char *name, const char *value);\nchar *lt_extend_str (const char *orig_value, const char *add, int to_end);\nvoid lt_update_exe_path (const char *name, const char *value);\nvoid lt_update_lib_path (const char *name, const char *value);\nchar **prepare_spawn (char **argv);\nvoid lt_dump_script (FILE *f);\nEOF\n\n\t    cat <<EOF\nvolatile const char * MAGIC_EXE = \"$magic_exe\";\nconst char * LIB_PATH_VARNAME = \"$shlibpath_var\";\nEOF\n\n\t    if test \"$shlibpath_overrides_runpath\" = yes && test -n \"$shlibpath_var\" && test -n \"$temp_rpath\"; then\n              func_to_host_path \"$temp_rpath\"\n\t      cat <<EOF\nconst char * LIB_PATH_VALUE   = \"$func_to_host_path_result\";\nEOF\n\t    else\n\t      cat <<\"EOF\"\nconst char * LIB_PATH_VALUE   = \"\";\nEOF\n\t    fi\n\n\t    if test -n \"$dllsearchpath\"; then\n              func_to_host_path \"$dllsearchpath:\"\n\t      cat <<EOF\nconst char * EXE_PATH_VARNAME = \"PATH\";\nconst char * EXE_PATH_VALUE   = \"$func_to_host_path_result\";\nEOF\n\t    else\n\t      cat <<\"EOF\"\nconst char * EXE_PATH_VARNAME = \"\";\nconst char * EXE_PATH_VALUE   = \"\";\nEOF\n\t    fi\n\n\t    if test \"$fast_install\" = yes; then\n\t      cat <<EOF\nconst char * TARGET_PROGRAM_NAME = \"lt-$outputname\"; /* hopefully, no .exe */\nEOF\n\t    else\n\t      cat <<EOF\nconst char * TARGET_PROGRAM_NAME = \"$outputname\"; /* hopefully, no .exe */\nEOF\n\t    fi\n\n\n\t    cat <<\"EOF\"\n\n#define LTWRAPPER_OPTION_PREFIX         \"--lt-\"\n\nstatic const char *ltwrapper_option_prefix = LTWRAPPER_OPTION_PREFIX;\nstatic const char *dumpscript_opt       = LTWRAPPER_OPTION_PREFIX \"dump-script\";\nstatic const char *debug_opt            = LTWRAPPER_OPTION_PREFIX \"debug\";\n\nint\nmain (int argc, char *argv[])\n{\n  char **newargz;\n  int  newargc;\n  char *tmp_pathspec;\n  char *actual_cwrapper_path;\n  char *actual_cwrapper_name;\n  char *target_name;\n  char *lt_argv_zero;\n  intptr_t rval = 127;\n\n  int i;\n\n  program_name = (char *) xstrdup (base_name (argv[0]));\n  newargz = XMALLOC (char *, argc + 1);\n\n  /* very simple arg parsing; don't want to rely on getopt\n   * also, copy all non cwrapper options to newargz, except\n   * argz[0], which is handled differently\n   */\n  newargc=0;\n  for (i = 1; i < argc; i++)\n    {\n      if (strcmp (argv[i], dumpscript_opt) == 0)\n\t{\nEOF\n\t    case \"$host\" in\n\t      *mingw* | *cygwin* )\n\t\t# make stdout use \"unix\" line endings\n\t\techo \"          setmode(1,_O_BINARY);\"\n\t\t;;\n\t      esac\n\n\t    cat <<\"EOF\"\n\t  lt_dump_script (stdout);\n\t  return 0;\n\t}\n      if (strcmp (argv[i], debug_opt) == 0)\n\t{\n          lt_debug = 1;\n          continue;\n\t}\n      if (strcmp (argv[i], ltwrapper_option_prefix) == 0)\n        {\n          /* however, if there is an option in the LTWRAPPER_OPTION_PREFIX\n             namespace, but it is not one of the ones we know about and\n             have already dealt with, above (inluding dump-script), then\n             report an error. Otherwise, targets might begin to believe\n             they are allowed to use options in the LTWRAPPER_OPTION_PREFIX\n             namespace. The first time any user complains about this, we'll\n             need to make LTWRAPPER_OPTION_PREFIX a configure-time option\n             or a configure.ac-settable value.\n           */\n          lt_fatal (__FILE__, __LINE__,\n\t\t    \"unrecognized %s option: '%s'\",\n                    ltwrapper_option_prefix, argv[i]);\n        }\n      /* otherwise ... */\n      newargz[++newargc] = xstrdup (argv[i]);\n    }\n  newargz[++newargc] = NULL;\n\nEOF\n\t    cat <<EOF\n  /* The GNU banner must be the first non-error debug message */\n  lt_debugprintf (__FILE__, __LINE__, \"libtool wrapper (GNU $PACKAGE$TIMESTAMP) $VERSION\\n\");\nEOF\n\t    cat <<\"EOF\"\n  lt_debugprintf (__FILE__, __LINE__, \"(main) argv[0]: %s\\n\", argv[0]);\n  lt_debugprintf (__FILE__, __LINE__, \"(main) program_name: %s\\n\", program_name);\n\n  tmp_pathspec = find_executable (argv[0]);\n  if (tmp_pathspec == NULL)\n    lt_fatal (__FILE__, __LINE__, \"couldn't find %s\", argv[0]);\n  lt_debugprintf (__FILE__, __LINE__,\n                  \"(main) found exe (before symlink chase) at: %s\\n\",\n\t\t  tmp_pathspec);\n\n  actual_cwrapper_path = chase_symlinks (tmp_pathspec);\n  lt_debugprintf (__FILE__, __LINE__,\n                  \"(main) found exe (after symlink chase) at: %s\\n\",\n\t\t  actual_cwrapper_path);\n  XFREE (tmp_pathspec);\n\n  actual_cwrapper_name = xstrdup (base_name (actual_cwrapper_path));\n  strendzap (actual_cwrapper_path, actual_cwrapper_name);\n\n  /* wrapper name transforms */\n  strendzap (actual_cwrapper_name, \".exe\");\n  tmp_pathspec = lt_extend_str (actual_cwrapper_name, \".exe\", 1);\n  XFREE (actual_cwrapper_name);\n  actual_cwrapper_name = tmp_pathspec;\n  tmp_pathspec = 0;\n\n  /* target_name transforms -- use actual target program name; might have lt- prefix */\n  target_name = xstrdup (base_name (TARGET_PROGRAM_NAME));\n  strendzap (target_name, \".exe\");\n  tmp_pathspec = lt_extend_str (target_name, \".exe\", 1);\n  XFREE (target_name);\n  target_name = tmp_pathspec;\n  tmp_pathspec = 0;\n\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(main) libtool target name: %s\\n\",\n\t\t  target_name);\nEOF\n\n\t    cat <<EOF\n  newargz[0] =\n    XMALLOC (char, (strlen (actual_cwrapper_path) +\n\t\t    strlen (\"$objdir\") + 1 + strlen (actual_cwrapper_name) + 1));\n  strcpy (newargz[0], actual_cwrapper_path);\n  strcat (newargz[0], \"$objdir\");\n  strcat (newargz[0], \"/\");\nEOF\n\n\t    cat <<\"EOF\"\n  /* stop here, and copy so we don't have to do this twice */\n  tmp_pathspec = xstrdup (newargz[0]);\n\n  /* do NOT want the lt- prefix here, so use actual_cwrapper_name */\n  strcat (newargz[0], actual_cwrapper_name);\n\n  /* DO want the lt- prefix here if it exists, so use target_name */\n  lt_argv_zero = lt_extend_str (tmp_pathspec, target_name, 1);\n  XFREE (tmp_pathspec);\n  tmp_pathspec = NULL;\nEOF\n\n\t    case $host_os in\n\t      mingw*)\n\t    cat <<\"EOF\"\n  {\n    char* p;\n    while ((p = strchr (newargz[0], '\\\\')) != NULL)\n      {\n\t*p = '/';\n      }\n    while ((p = strchr (lt_argv_zero, '\\\\')) != NULL)\n      {\n\t*p = '/';\n      }\n  }\nEOF\n\t    ;;\n\t    esac\n\n\t    cat <<\"EOF\"\n  XFREE (target_name);\n  XFREE (actual_cwrapper_path);\n  XFREE (actual_cwrapper_name);\n\n  lt_setenv (\"BIN_SH\", \"xpg4\"); /* for Tru64 */\n  lt_setenv (\"DUALCASE\", \"1\");  /* for MSK sh */\n  /* Update the DLL searchpath.  EXE_PATH_VALUE ($dllsearchpath) must\n     be prepended before (that is, appear after) LIB_PATH_VALUE ($temp_rpath)\n     because on Windows, both *_VARNAMEs are PATH but uninstalled\n     libraries must come first. */\n  lt_update_exe_path (EXE_PATH_VARNAME, EXE_PATH_VALUE);\n  lt_update_lib_path (LIB_PATH_VARNAME, LIB_PATH_VALUE);\n\n  lt_debugprintf (__FILE__, __LINE__, \"(main) lt_argv_zero: %s\\n\",\n\t\t  nonnull (lt_argv_zero));\n  for (i = 0; i < newargc; i++)\n    {\n      lt_debugprintf (__FILE__, __LINE__, \"(main) newargz[%d]: %s\\n\",\n\t\t      i, nonnull (newargz[i]));\n    }\n\nEOF\n\n\t    case $host_os in\n\t      mingw*)\n\t\tcat <<\"EOF\"\n  /* execv doesn't actually work on mingw as expected on unix */\n  newargz = prepare_spawn (newargz);\n  rval = _spawnv (_P_WAIT, lt_argv_zero, (const char * const *) newargz);\n  if (rval == -1)\n    {\n      /* failed to start process */\n      lt_debugprintf (__FILE__, __LINE__,\n\t\t      \"(main) failed to launch target \\\"%s\\\": %s\\n\",\n\t\t      lt_argv_zero, nonnull (strerror (errno)));\n      return 127;\n    }\n  return rval;\nEOF\n\t\t;;\n\t      *)\n\t\tcat <<\"EOF\"\n  execv (lt_argv_zero, newargz);\n  return rval; /* =127, but avoids unused variable warning */\nEOF\n\t\t;;\n\t    esac\n\n\t    cat <<\"EOF\"\n}\n\nvoid *\nxmalloc (size_t num)\n{\n  void *p = (void *) malloc (num);\n  if (!p)\n    lt_fatal (__FILE__, __LINE__, \"memory exhausted\");\n\n  return p;\n}\n\nchar *\nxstrdup (const char *string)\n{\n  return string ? strcpy ((char *) xmalloc (strlen (string) + 1),\n\t\t\t  string) : NULL;\n}\n\nconst char *\nbase_name (const char *name)\n{\n  const char *base;\n\n#if defined (HAVE_DOS_BASED_FILE_SYSTEM)\n  /* Skip over the disk name in MSDOS pathnames. */\n  if (isalpha ((unsigned char) name[0]) && name[1] == ':')\n    name += 2;\n#endif\n\n  for (base = name; *name; name++)\n    if (IS_DIR_SEPARATOR (*name))\n      base = name + 1;\n  return base;\n}\n\nint\ncheck_executable (const char *path)\n{\n  struct stat st;\n\n  lt_debugprintf (__FILE__, __LINE__, \"(check_executable): %s\\n\",\n                  nonempty (path));\n  if ((!path) || (!*path))\n    return 0;\n\n  if ((stat (path, &st) >= 0)\n      && (st.st_mode & (S_IXUSR | S_IXGRP | S_IXOTH)))\n    return 1;\n  else\n    return 0;\n}\n\nint\nmake_executable (const char *path)\n{\n  int rval = 0;\n  struct stat st;\n\n  lt_debugprintf (__FILE__, __LINE__, \"(make_executable): %s\\n\",\n                  nonempty (path));\n  if ((!path) || (!*path))\n    return 0;\n\n  if (stat (path, &st) >= 0)\n    {\n      rval = chmod (path, st.st_mode | S_IXOTH | S_IXGRP | S_IXUSR);\n    }\n  return rval;\n}\n\n/* Searches for the full path of the wrapper.  Returns\n   newly allocated full path name if found, NULL otherwise\n   Does not chase symlinks, even on platforms that support them.\n*/\nchar *\nfind_executable (const char *wrapper)\n{\n  int has_slash = 0;\n  const char *p;\n  const char *p_next;\n  /* static buffer for getcwd */\n  char tmp[LT_PATHMAX + 1];\n  int tmp_len;\n  char *concat_name;\n\n  lt_debugprintf (__FILE__, __LINE__, \"(find_executable): %s\\n\",\n                  nonempty (wrapper));\n\n  if ((wrapper == NULL) || (*wrapper == '\\0'))\n    return NULL;\n\n  /* Absolute path? */\n#if defined (HAVE_DOS_BASED_FILE_SYSTEM)\n  if (isalpha ((unsigned char) wrapper[0]) && wrapper[1] == ':')\n    {\n      concat_name = xstrdup (wrapper);\n      if (check_executable (concat_name))\n\treturn concat_name;\n      XFREE (concat_name);\n    }\n  else\n    {\n#endif\n      if (IS_DIR_SEPARATOR (wrapper[0]))\n\t{\n\t  concat_name = xstrdup (wrapper);\n\t  if (check_executable (concat_name))\n\t    return concat_name;\n\t  XFREE (concat_name);\n\t}\n#if defined (HAVE_DOS_BASED_FILE_SYSTEM)\n    }\n#endif\n\n  for (p = wrapper; *p; p++)\n    if (*p == '/')\n      {\n\thas_slash = 1;\n\tbreak;\n      }\n  if (!has_slash)\n    {\n      /* no slashes; search PATH */\n      const char *path = getenv (\"PATH\");\n      if (path != NULL)\n\t{\n\t  for (p = path; *p; p = p_next)\n\t    {\n\t      const char *q;\n\t      size_t p_len;\n\t      for (q = p; *q; q++)\n\t\tif (IS_PATH_SEPARATOR (*q))\n\t\t  break;\n\t      p_len = q - p;\n\t      p_next = (*q == '\\0' ? q : q + 1);\n\t      if (p_len == 0)\n\t\t{\n\t\t  /* empty path: current directory */\n\t\t  if (getcwd (tmp, LT_PATHMAX) == NULL)\n\t\t    lt_fatal (__FILE__, __LINE__, \"getcwd failed: %s\",\n                              nonnull (strerror (errno)));\n\t\t  tmp_len = strlen (tmp);\n\t\t  concat_name =\n\t\t    XMALLOC (char, tmp_len + 1 + strlen (wrapper) + 1);\n\t\t  memcpy (concat_name, tmp, tmp_len);\n\t\t  concat_name[tmp_len] = '/';\n\t\t  strcpy (concat_name + tmp_len + 1, wrapper);\n\t\t}\n\t      else\n\t\t{\n\t\t  concat_name =\n\t\t    XMALLOC (char, p_len + 1 + strlen (wrapper) + 1);\n\t\t  memcpy (concat_name, p, p_len);\n\t\t  concat_name[p_len] = '/';\n\t\t  strcpy (concat_name + p_len + 1, wrapper);\n\t\t}\n\t      if (check_executable (concat_name))\n\t\treturn concat_name;\n\t      XFREE (concat_name);\n\t    }\n\t}\n      /* not found in PATH; assume curdir */\n    }\n  /* Relative path | not found in path: prepend cwd */\n  if (getcwd (tmp, LT_PATHMAX) == NULL)\n    lt_fatal (__FILE__, __LINE__, \"getcwd failed: %s\",\n              nonnull (strerror (errno)));\n  tmp_len = strlen (tmp);\n  concat_name = XMALLOC (char, tmp_len + 1 + strlen (wrapper) + 1);\n  memcpy (concat_name, tmp, tmp_len);\n  concat_name[tmp_len] = '/';\n  strcpy (concat_name + tmp_len + 1, wrapper);\n\n  if (check_executable (concat_name))\n    return concat_name;\n  XFREE (concat_name);\n  return NULL;\n}\n\nchar *\nchase_symlinks (const char *pathspec)\n{\n#ifndef S_ISLNK\n  return xstrdup (pathspec);\n#else\n  char buf[LT_PATHMAX];\n  struct stat s;\n  char *tmp_pathspec = xstrdup (pathspec);\n  char *p;\n  int has_symlinks = 0;\n  while (strlen (tmp_pathspec) && !has_symlinks)\n    {\n      lt_debugprintf (__FILE__, __LINE__,\n\t\t      \"checking path component for symlinks: %s\\n\",\n\t\t      tmp_pathspec);\n      if (lstat (tmp_pathspec, &s) == 0)\n\t{\n\t  if (S_ISLNK (s.st_mode) != 0)\n\t    {\n\t      has_symlinks = 1;\n\t      break;\n\t    }\n\n\t  /* search backwards for last DIR_SEPARATOR */\n\t  p = tmp_pathspec + strlen (tmp_pathspec) - 1;\n\t  while ((p > tmp_pathspec) && (!IS_DIR_SEPARATOR (*p)))\n\t    p--;\n\t  if ((p == tmp_pathspec) && (!IS_DIR_SEPARATOR (*p)))\n\t    {\n\t      /* no more DIR_SEPARATORS left */\n\t      break;\n\t    }\n\t  *p = '\\0';\n\t}\n      else\n\t{\n\t  lt_fatal (__FILE__, __LINE__,\n\t\t    \"error accessing file \\\"%s\\\": %s\",\n\t\t    tmp_pathspec, nonnull (strerror (errno)));\n\t}\n    }\n  XFREE (tmp_pathspec);\n\n  if (!has_symlinks)\n    {\n      return xstrdup (pathspec);\n    }\n\n  tmp_pathspec = realpath (pathspec, buf);\n  if (tmp_pathspec == 0)\n    {\n      lt_fatal (__FILE__, __LINE__,\n\t\t\"could not follow symlinks for %s\", pathspec);\n    }\n  return xstrdup (tmp_pathspec);\n#endif\n}\n\nchar *\nstrendzap (char *str, const char *pat)\n{\n  size_t len, patlen;\n\n  assert (str != NULL);\n  assert (pat != NULL);\n\n  len = strlen (str);\n  patlen = strlen (pat);\n\n  if (patlen <= len)\n    {\n      str += len - patlen;\n      if (strcmp (str, pat) == 0)\n\t*str = '\\0';\n    }\n  return str;\n}\n\nvoid\nlt_debugprintf (const char *file, int line, const char *fmt, ...)\n{\n  va_list args;\n  if (lt_debug)\n    {\n      (void) fprintf (stderr, \"%s:%s:%d: \", program_name, file, line);\n      va_start (args, fmt);\n      (void) vfprintf (stderr, fmt, args);\n      va_end (args);\n    }\n}\n\nstatic void\nlt_error_core (int exit_status, const char *file,\n\t       int line, const char *mode,\n\t       const char *message, va_list ap)\n{\n  fprintf (stderr, \"%s:%s:%d: %s: \", program_name, file, line, mode);\n  vfprintf (stderr, message, ap);\n  fprintf (stderr, \".\\n\");\n\n  if (exit_status >= 0)\n    exit (exit_status);\n}\n\nvoid\nlt_fatal (const char *file, int line, const char *message, ...)\n{\n  va_list ap;\n  va_start (ap, message);\n  lt_error_core (EXIT_FAILURE, file, line, \"FATAL\", message, ap);\n  va_end (ap);\n}\n\nstatic const char *\nnonnull (const char *s)\n{\n  return s ? s : \"(null)\";\n}\n\nstatic const char *\nnonempty (const char *s)\n{\n  return (s && !*s) ? \"(empty)\" : nonnull (s);\n}\n\nvoid\nlt_setenv (const char *name, const char *value)\n{\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(lt_setenv) setting '%s' to '%s'\\n\",\n                  nonnull (name), nonnull (value));\n  {\n#ifdef HAVE_SETENV\n    /* always make a copy, for consistency with !HAVE_SETENV */\n    char *str = xstrdup (value);\n    setenv (name, str, 1);\n#else\n    int len = strlen (name) + 1 + strlen (value) + 1;\n    char *str = XMALLOC (char, len);\n    sprintf (str, \"%s=%s\", name, value);\n    if (putenv (str) != EXIT_SUCCESS)\n      {\n        XFREE (str);\n      }\n#endif\n  }\n}\n\nchar *\nlt_extend_str (const char *orig_value, const char *add, int to_end)\n{\n  char *new_value;\n  if (orig_value && *orig_value)\n    {\n      int orig_value_len = strlen (orig_value);\n      int add_len = strlen (add);\n      new_value = XMALLOC (char, add_len + orig_value_len + 1);\n      if (to_end)\n        {\n          strcpy (new_value, orig_value);\n          strcpy (new_value + orig_value_len, add);\n        }\n      else\n        {\n          strcpy (new_value, add);\n          strcpy (new_value + add_len, orig_value);\n        }\n    }\n  else\n    {\n      new_value = xstrdup (add);\n    }\n  return new_value;\n}\n\nvoid\nlt_update_exe_path (const char *name, const char *value)\n{\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(lt_update_exe_path) modifying '%s' by prepending '%s'\\n\",\n                  nonnull (name), nonnull (value));\n\n  if (name && *name && value && *value)\n    {\n      char *new_value = lt_extend_str (getenv (name), value, 0);\n      /* some systems can't cope with a ':'-terminated path #' */\n      int len = strlen (new_value);\n      while (((len = strlen (new_value)) > 0) && IS_PATH_SEPARATOR (new_value[len-1]))\n        {\n          new_value[len-1] = '\\0';\n        }\n      lt_setenv (name, new_value);\n      XFREE (new_value);\n    }\n}\n\nvoid\nlt_update_lib_path (const char *name, const char *value)\n{\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(lt_update_lib_path) modifying '%s' by prepending '%s'\\n\",\n                  nonnull (name), nonnull (value));\n\n  if (name && *name && value && *value)\n    {\n      char *new_value = lt_extend_str (getenv (name), value, 0);\n      lt_setenv (name, new_value);\n      XFREE (new_value);\n    }\n}\n\nEOF\n\t    case $host_os in\n\t      mingw*)\n\t\tcat <<\"EOF\"\n\n/* Prepares an argument vector before calling spawn().\n   Note that spawn() does not by itself call the command interpreter\n     (getenv (\"COMSPEC\") != NULL ? getenv (\"COMSPEC\") :\n      ({ OSVERSIONINFO v; v.dwOSVersionInfoSize = sizeof(OSVERSIONINFO);\n         GetVersionEx(&v);\n         v.dwPlatformId == VER_PLATFORM_WIN32_NT;\n      }) ? \"cmd.exe\" : \"command.com\").\n   Instead it simply concatenates the arguments, separated by ' ', and calls\n   CreateProcess().  We must quote the arguments since Win32 CreateProcess()\n   interprets characters like ' ', '\\t', '\\\\', '\"' (but not '<' and '>') in a\n   special way:\n   - Space and tab are interpreted as delimiters. They are not treated as\n     delimiters if they are surrounded by double quotes: \"...\".\n   - Unescaped double quotes are removed from the input. Their only effect is\n     that within double quotes, space and tab are treated like normal\n     characters.\n   - Backslashes not followed by double quotes are not special.\n   - But 2*n+1 backslashes followed by a double quote become\n     n backslashes followed by a double quote (n >= 0):\n       \\\" -> \"\n       \\\\\\\" -> \\\"\n       \\\\\\\\\\\" -> \\\\\"\n */\n#define SHELL_SPECIAL_CHARS \"\\\"\\\\ \\001\\002\\003\\004\\005\\006\\007\\010\\011\\012\\013\\014\\015\\016\\017\\020\\021\\022\\023\\024\\025\\026\\027\\030\\031\\032\\033\\034\\035\\036\\037\"\n#define SHELL_SPACE_CHARS \" \\001\\002\\003\\004\\005\\006\\007\\010\\011\\012\\013\\014\\015\\016\\017\\020\\021\\022\\023\\024\\025\\026\\027\\030\\031\\032\\033\\034\\035\\036\\037\"\nchar **\nprepare_spawn (char **argv)\n{\n  size_t argc;\n  char **new_argv;\n  size_t i;\n\n  /* Count number of arguments.  */\n  for (argc = 0; argv[argc] != NULL; argc++)\n    ;\n\n  /* Allocate new argument vector.  */\n  new_argv = XMALLOC (char *, argc + 1);\n\n  /* Put quoted arguments into the new argument vector.  */\n  for (i = 0; i < argc; i++)\n    {\n      const char *string = argv[i];\n\n      if (string[0] == '\\0')\n\tnew_argv[i] = xstrdup (\"\\\"\\\"\");\n      else if (strpbrk (string, SHELL_SPECIAL_CHARS) != NULL)\n\t{\n\t  int quote_around = (strpbrk (string, SHELL_SPACE_CHARS) != NULL);\n\t  size_t length;\n\t  unsigned int backslashes;\n\t  const char *s;\n\t  char *quoted_string;\n\t  char *p;\n\n\t  length = 0;\n\t  backslashes = 0;\n\t  if (quote_around)\n\t    length++;\n\t  for (s = string; *s != '\\0'; s++)\n\t    {\n\t      char c = *s;\n\t      if (c == '\"')\n\t\tlength += backslashes + 1;\n\t      length++;\n\t      if (c == '\\\\')\n\t\tbackslashes++;\n\t      else\n\t\tbackslashes = 0;\n\t    }\n\t  if (quote_around)\n\t    length += backslashes + 1;\n\n\t  quoted_string = XMALLOC (char, length + 1);\n\n\t  p = quoted_string;\n\t  backslashes = 0;\n\t  if (quote_around)\n\t    *p++ = '\"';\n\t  for (s = string; *s != '\\0'; s++)\n\t    {\n\t      char c = *s;\n\t      if (c == '\"')\n\t\t{\n\t\t  unsigned int j;\n\t\t  for (j = backslashes + 1; j > 0; j--)\n\t\t    *p++ = '\\\\';\n\t\t}\n\t      *p++ = c;\n\t      if (c == '\\\\')\n\t\tbackslashes++;\n\t      else\n\t\tbackslashes = 0;\n\t    }\n\t  if (quote_around)\n\t    {\n\t      unsigned int j;\n\t      for (j = backslashes; j > 0; j--)\n\t\t*p++ = '\\\\';\n\t      *p++ = '\"';\n\t    }\n\t  *p = '\\0';\n\n\t  new_argv[i] = quoted_string;\n\t}\n      else\n\tnew_argv[i] = (char *) string;\n    }\n  new_argv[argc] = NULL;\n\n  return new_argv;\n}\nEOF\n\t\t;;\n\t    esac\n\n            cat <<\"EOF\"\nvoid lt_dump_script (FILE* f)\n{\nEOF\n\t    func_emit_wrapper yes |\n\t      $SED -n -e '\ns/^\\(.\\{79\\}\\)\\(..*\\)/\\1\\\n\\2/\nh\ns/\\([\\\\\"]\\)/\\\\\\1/g\ns/$/\\\\n/\ns/\\([^\\n]*\\).*/  fputs (\"\\1\", f);/p\ng\nD'\n            cat <<\"EOF\"\n}\nEOF\n}\n# end: func_emit_cwrapperexe_src\n\n# func_win32_import_lib_p ARG\n# True if ARG is an import lib, as indicated by $file_magic_cmd\nfunc_win32_import_lib_p ()\n{\n    $opt_debug\n    case `eval $file_magic_cmd \\\"\\$1\\\" 2>/dev/null | $SED -e 10q` in\n    *import*) : ;;\n    *) false ;;\n    esac\n}\n\n# func_mode_link arg...\nfunc_mode_link ()\n{\n    $opt_debug\n    case $host in\n    *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-cegcc*)\n      # It is impossible to link a dll without this setting, and\n      # we shouldn't force the makefile maintainer to figure out\n      # which system we are compiling for in order to pass an extra\n      # flag for every libtool invocation.\n      # allow_undefined=no\n\n      # FIXME: Unfortunately, there are problems with the above when trying\n      # to make a dll which has undefined symbols, in which case not\n      # even a static library is built.  For now, we need to specify\n      # -no-undefined on the libtool link line when we can be certain\n      # that all symbols are satisfied, otherwise we get a static library.\n      allow_undefined=yes\n      ;;\n    *)\n      allow_undefined=yes\n      ;;\n    esac\n    libtool_args=$nonopt\n    base_compile=\"$nonopt $@\"\n    compile_command=$nonopt\n    finalize_command=$nonopt\n\n    compile_rpath=\n    finalize_rpath=\n    compile_shlibpath=\n    finalize_shlibpath=\n    convenience=\n    old_convenience=\n    deplibs=\n    old_deplibs=\n    compiler_flags=\n    linker_flags=\n    dllsearchpath=\n    lib_search_path=`pwd`\n    inst_prefix_dir=\n    new_inherited_linker_flags=\n\n    avoid_version=no\n    bindir=\n    dlfiles=\n    dlprefiles=\n    dlself=no\n    export_dynamic=no\n    export_symbols=\n    export_symbols_regex=\n    generated=\n    libobjs=\n    ltlibs=\n    module=no\n    no_install=no\n    objs=\n    non_pic_objects=\n    precious_files_regex=\n    prefer_static_libs=no\n    preload=no\n    prev=\n    prevarg=\n    release=\n    rpath=\n    xrpath=\n    perm_rpath=\n    temp_rpath=\n    thread_safe=no\n    vinfo=\n    vinfo_number=no\n    weak_libs=\n    single_module=\"${wl}-single_module\"\n    func_infer_tag $base_compile\n\n    # We need to know -static, to get the right output filenames.\n    for arg\n    do\n      case $arg in\n      -shared)\n\ttest \"$build_libtool_libs\" != yes && \\\n\t  func_fatal_configuration \"can not build a shared library\"\n\tbuild_old_libs=no\n\tbreak\n\t;;\n      -all-static | -static | -static-libtool-libs)\n\tcase $arg in\n\t-all-static)\n\t  if test \"$build_libtool_libs\" = yes && test -z \"$link_static_flag\"; then\n\t    func_warning \"complete static linking is impossible in this configuration\"\n\t  fi\n\t  if test -n \"$link_static_flag\"; then\n\t    dlopen_self=$dlopen_self_static\n\t  fi\n\t  prefer_static_libs=yes\n\t  ;;\n\t-static)\n\t  if test -z \"$pic_flag\" && test -n \"$link_static_flag\"; then\n\t    dlopen_self=$dlopen_self_static\n\t  fi\n\t  prefer_static_libs=built\n\t  ;;\n\t-static-libtool-libs)\n\t  if test -z \"$pic_flag\" && test -n \"$link_static_flag\"; then\n\t    dlopen_self=$dlopen_self_static\n\t  fi\n\t  prefer_static_libs=yes\n\t  ;;\n\tesac\n\tbuild_libtool_libs=no\n\tbuild_old_libs=yes\n\tbreak\n\t;;\n      esac\n    done\n\n    # See if our shared archives depend on static archives.\n    test -n \"$old_archive_from_new_cmds\" && build_old_libs=yes\n\n    # Go through the arguments, transforming them on the way.\n    while test \"$#\" -gt 0; do\n      arg=\"$1\"\n      shift\n      func_quote_for_eval \"$arg\"\n      qarg=$func_quote_for_eval_unquoted_result\n      func_append libtool_args \" $func_quote_for_eval_result\"\n\n      # If the previous option needs an argument, assign it.\n      if test -n \"$prev\"; then\n\tcase $prev in\n\toutput)\n\t  func_append compile_command \" @OUTPUT@\"\n\t  func_append finalize_command \" @OUTPUT@\"\n\t  ;;\n\tesac\n\n\tcase $prev in\n\tbindir)\n\t  bindir=\"$arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\tdlfiles|dlprefiles)\n\t  if test \"$preload\" = no; then\n\t    # Add the symbol object into the linking commands.\n\t    func_append compile_command \" @SYMFILE@\"\n\t    func_append finalize_command \" @SYMFILE@\"\n\t    preload=yes\n\t  fi\n\t  case $arg in\n\t  *.la | *.lo) ;;  # We handle these cases below.\n\t  force)\n\t    if test \"$dlself\" = no; then\n\t      dlself=needless\n\t      export_dynamic=yes\n\t    fi\n\t    prev=\n\t    continue\n\t    ;;\n\t  self)\n\t    if test \"$prev\" = dlprefiles; then\n\t      dlself=yes\n\t    elif test \"$prev\" = dlfiles && test \"$dlopen_self\" != yes; then\n\t      dlself=yes\n\t    else\n\t      dlself=needless\n\t      export_dynamic=yes\n\t    fi\n\t    prev=\n\t    continue\n\t    ;;\n\t  *)\n\t    if test \"$prev\" = dlfiles; then\n\t      func_append dlfiles \" $arg\"\n\t    else\n\t      func_append dlprefiles \" $arg\"\n\t    fi\n\t    prev=\n\t    continue\n\t    ;;\n\t  esac\n\t  ;;\n\texpsyms)\n\t  export_symbols=\"$arg\"\n\t  test -f \"$arg\" \\\n\t    || func_fatal_error \"symbol file \\`$arg' does not exist\"\n\t  prev=\n\t  continue\n\t  ;;\n\texpsyms_regex)\n\t  export_symbols_regex=\"$arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\tframework)\n\t  case $host in\n\t    *-*-darwin*)\n\t      case \"$deplibs \" in\n\t\t*\" $qarg.ltframework \"*) ;;\n\t\t*) func_append deplibs \" $qarg.ltframework\" # this is fixed later\n\t\t   ;;\n\t      esac\n\t      ;;\n\t  esac\n\t  prev=\n\t  continue\n\t  ;;\n\tinst_prefix)\n\t  inst_prefix_dir=\"$arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\tobjectlist)\n\t  if test -f \"$arg\"; then\n\t    save_arg=$arg\n\t    moreargs=\n\t    for fil in `cat \"$save_arg\"`\n\t    do\n#\t      func_append moreargs \" $fil\"\n\t      arg=$fil\n\t      # A libtool-controlled object.\n\n\t      # Check to see that this really is a libtool object.\n\t      if func_lalib_unsafe_p \"$arg\"; then\n\t\tpic_object=\n\t\tnon_pic_object=\n\n\t\t# Read the .lo file\n\t\tfunc_source \"$arg\"\n\n\t\tif test -z \"$pic_object\" ||\n\t\t   test -z \"$non_pic_object\" ||\n\t\t   test \"$pic_object\" = none &&\n\t\t   test \"$non_pic_object\" = none; then\n\t\t  func_fatal_error \"cannot find name of object for \\`$arg'\"\n\t\tfi\n\n\t\t# Extract subdirectory from the argument.\n\t\tfunc_dirname \"$arg\" \"/\" \"\"\n\t\txdir=\"$func_dirname_result\"\n\n\t\tif test \"$pic_object\" != none; then\n\t\t  # Prepend the subdirectory the object is found in.\n\t\t  pic_object=\"$xdir$pic_object\"\n\n\t\t  if test \"$prev\" = dlfiles; then\n\t\t    if test \"$build_libtool_libs\" = yes && test \"$dlopen_support\" = yes; then\n\t\t      func_append dlfiles \" $pic_object\"\n\t\t      prev=\n\t\t      continue\n\t\t    else\n\t\t      # If libtool objects are unsupported, then we need to preload.\n\t\t      prev=dlprefiles\n\t\t    fi\n\t\t  fi\n\n\t\t  # CHECK ME:  I think I busted this.  -Ossama\n\t\t  if test \"$prev\" = dlprefiles; then\n\t\t    # Preload the old-style object.\n\t\t    func_append dlprefiles \" $pic_object\"\n\t\t    prev=\n\t\t  fi\n\n\t\t  # A PIC object.\n\t\t  func_append libobjs \" $pic_object\"\n\t\t  arg=\"$pic_object\"\n\t\tfi\n\n\t\t# Non-PIC object.\n\t\tif test \"$non_pic_object\" != none; then\n\t\t  # Prepend the subdirectory the object is found in.\n\t\t  non_pic_object=\"$xdir$non_pic_object\"\n\n\t\t  # A standard non-PIC object\n\t\t  func_append non_pic_objects \" $non_pic_object\"\n\t\t  if test -z \"$pic_object\" || test \"$pic_object\" = none ; then\n\t\t    arg=\"$non_pic_object\"\n\t\t  fi\n\t\telse\n\t\t  # If the PIC object exists, use it instead.\n\t\t  # $xdir was prepended to $pic_object above.\n\t\t  non_pic_object=\"$pic_object\"\n\t\t  func_append non_pic_objects \" $non_pic_object\"\n\t\tfi\n\t      else\n\t\t# Only an error if not doing a dry-run.\n\t\tif $opt_dry_run; then\n\t\t  # Extract subdirectory from the argument.\n\t\t  func_dirname \"$arg\" \"/\" \"\"\n\t\t  xdir=\"$func_dirname_result\"\n\n\t\t  func_lo2o \"$arg\"\n\t\t  pic_object=$xdir$objdir/$func_lo2o_result\n\t\t  non_pic_object=$xdir$func_lo2o_result\n\t\t  func_append libobjs \" $pic_object\"\n\t\t  func_append non_pic_objects \" $non_pic_object\"\n\t        else\n\t\t  func_fatal_error \"\\`$arg' is not a valid libtool object\"\n\t\tfi\n\t      fi\n\t    done\n\t  else\n\t    func_fatal_error \"link input file \\`$arg' does not exist\"\n\t  fi\n\t  arg=$save_arg\n\t  prev=\n\t  continue\n\t  ;;\n\tprecious_regex)\n\t  precious_files_regex=\"$arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\trelease)\n\t  release=\"-$arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\trpath | xrpath)\n\t  # We need an absolute path.\n\t  case $arg in\n\t  [\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n\t  *)\n\t    func_fatal_error \"only absolute run-paths are allowed\"\n\t    ;;\n\t  esac\n\t  if test \"$prev\" = rpath; then\n\t    case \"$rpath \" in\n\t    *\" $arg \"*) ;;\n\t    *) func_append rpath \" $arg\" ;;\n\t    esac\n\t  else\n\t    case \"$xrpath \" in\n\t    *\" $arg \"*) ;;\n\t    *) func_append xrpath \" $arg\" ;;\n\t    esac\n\t  fi\n\t  prev=\n\t  continue\n\t  ;;\n\tshrext)\n\t  shrext_cmds=\"$arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\tweak)\n\t  func_append weak_libs \" $arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\txcclinker)\n\t  func_append linker_flags \" $qarg\"\n\t  func_append compiler_flags \" $qarg\"\n\t  prev=\n\t  func_append compile_command \" $qarg\"\n\t  func_append finalize_command \" $qarg\"\n\t  continue\n\t  ;;\n\txcompiler)\n\t  func_append compiler_flags \" $qarg\"\n\t  prev=\n\t  func_append compile_command \" $qarg\"\n\t  func_append finalize_command \" $qarg\"\n\t  continue\n\t  ;;\n\txlinker)\n\t  func_append linker_flags \" $qarg\"\n\t  func_append compiler_flags \" $wl$qarg\"\n\t  prev=\n\t  func_append compile_command \" $wl$qarg\"\n\t  func_append finalize_command \" $wl$qarg\"\n\t  continue\n\t  ;;\n\t*)\n\t  eval \"$prev=\\\"\\$arg\\\"\"\n\t  prev=\n\t  continue\n\t  ;;\n\tesac\n      fi # test -n \"$prev\"\n\n      prevarg=\"$arg\"\n\n      case $arg in\n      -all-static)\n\tif test -n \"$link_static_flag\"; then\n\t  # See comment for -static flag below, for more details.\n\t  func_append compile_command \" $link_static_flag\"\n\t  func_append finalize_command \" $link_static_flag\"\n\tfi\n\tcontinue\n\t;;\n\n      -allow-undefined)\n\t# FIXME: remove this flag sometime in the future.\n\tfunc_fatal_error \"\\`-allow-undefined' must not be used because it is the default\"\n\t;;\n\n      -avoid-version)\n\tavoid_version=yes\n\tcontinue\n\t;;\n\n      -bindir)\n\tprev=bindir\n\tcontinue\n\t;;\n\n      -dlopen)\n\tprev=dlfiles\n\tcontinue\n\t;;\n\n      -dlpreopen)\n\tprev=dlprefiles\n\tcontinue\n\t;;\n\n      -export-dynamic)\n\texport_dynamic=yes\n\tcontinue\n\t;;\n\n      -export-symbols | -export-symbols-regex)\n\tif test -n \"$export_symbols\" || test -n \"$export_symbols_regex\"; then\n\t  func_fatal_error \"more than one -exported-symbols argument is not allowed\"\n\tfi\n\tif test \"X$arg\" = \"X-export-symbols\"; then\n\t  prev=expsyms\n\telse\n\t  prev=expsyms_regex\n\tfi\n\tcontinue\n\t;;\n\n      -framework)\n\tprev=framework\n\tcontinue\n\t;;\n\n      -inst-prefix-dir)\n\tprev=inst_prefix\n\tcontinue\n\t;;\n\n      # The native IRIX linker understands -LANG:*, -LIST:* and -LNO:*\n      # so, if we see these flags be careful not to treat them like -L\n      -L[A-Z][A-Z]*:*)\n\tcase $with_gcc/$host in\n\tno/*-*-irix* | /*-*-irix*)\n\t  func_append compile_command \" $arg\"\n\t  func_append finalize_command \" $arg\"\n\t  ;;\n\tesac\n\tcontinue\n\t;;\n\n      -L*)\n\tfunc_stripname \"-L\" '' \"$arg\"\n\tif test -z \"$func_stripname_result\"; then\n\t  if test \"$#\" -gt 0; then\n\t    func_fatal_error \"require no space between \\`-L' and \\`$1'\"\n\t  else\n\t    func_fatal_error \"need path for \\`-L' option\"\n\t  fi\n\tfi\n\tfunc_resolve_sysroot \"$func_stripname_result\"\n\tdir=$func_resolve_sysroot_result\n\t# We need an absolute path.\n\tcase $dir in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n\t*)\n\t  absdir=`cd \"$dir\" && pwd`\n\t  test -z \"$absdir\" && \\\n\t    func_fatal_error \"cannot determine absolute directory name of \\`$dir'\"\n\t  dir=\"$absdir\"\n\t  ;;\n\tesac\n\tcase \"$deplibs \" in\n\t*\" -L$dir \"* | *\" $arg \"*)\n\t  # Will only happen for absolute or sysroot arguments\n\t  ;;\n\t*)\n\t  # Preserve sysroot, but never include relative directories\n\t  case $dir in\n\t    [\\\\/]* | [A-Za-z]:[\\\\/]* | =*) func_append deplibs \" $arg\" ;;\n\t    *) func_append deplibs \" -L$dir\" ;;\n\t  esac\n\t  func_append lib_search_path \" $dir\"\n\t  ;;\n\tesac\n\tcase $host in\n\t*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-cegcc*)\n\t  testbindir=`$ECHO \"$dir\" | $SED 's*/lib$*/bin*'`\n\t  case :$dllsearchpath: in\n\t  *\":$dir:\"*) ;;\n\t  ::) dllsearchpath=$dir;;\n\t  *) func_append dllsearchpath \":$dir\";;\n\t  esac\n\t  case :$dllsearchpath: in\n\t  *\":$testbindir:\"*) ;;\n\t  ::) dllsearchpath=$testbindir;;\n\t  *) func_append dllsearchpath \":$testbindir\";;\n\t  esac\n\t  ;;\n\tesac\n\tcontinue\n\t;;\n\n      -l*)\n\tif test \"X$arg\" = \"X-lc\" || test \"X$arg\" = \"X-lm\"; then\n\t  case $host in\n\t  *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-beos* | *-cegcc* | *-*-haiku*)\n\t    # These systems don't actually have a C or math library (as such)\n\t    continue\n\t    ;;\n\t  *-*-os2*)\n\t    # These systems don't actually have a C library (as such)\n\t    test \"X$arg\" = \"X-lc\" && continue\n\t    ;;\n\t  *-*-openbsd* | *-*-freebsd* | *-*-dragonfly*)\n\t    # Do not include libc due to us having libc/libc_r.\n\t    test \"X$arg\" = \"X-lc\" && continue\n\t    ;;\n\t  *-*-rhapsody* | *-*-darwin1.[012])\n\t    # Rhapsody C and math libraries are in the System framework\n\t    func_append deplibs \" System.ltframework\"\n\t    continue\n\t    ;;\n\t  *-*-sco3.2v5* | *-*-sco5v6*)\n\t    # Causes problems with __ctype\n\t    test \"X$arg\" = \"X-lc\" && continue\n\t    ;;\n\t  *-*-sysv4.2uw2* | *-*-sysv5* | *-*-unixware* | *-*-OpenUNIX*)\n\t    # Compiler inserts libc in the correct place for threads to work\n\t    test \"X$arg\" = \"X-lc\" && continue\n\t    ;;\n\t  esac\n\telif test \"X$arg\" = \"X-lc_r\"; then\n\t case $host in\n\t *-*-openbsd* | *-*-freebsd* | *-*-dragonfly*)\n\t   # Do not include libc_r directly, use -pthread flag.\n\t   continue\n\t   ;;\n\t esac\n\tfi\n\tfunc_append deplibs \" $arg\"\n\tcontinue\n\t;;\n\n      -module)\n\tmodule=yes\n\tcontinue\n\t;;\n\n      # Tru64 UNIX uses -model [arg] to determine the layout of C++\n      # classes, name mangling, and exception handling.\n      # Darwin uses the -arch flag to determine output architecture.\n      -model|-arch|-isysroot|--sysroot)\n\tfunc_append compiler_flags \" $arg\"\n\tfunc_append compile_command \" $arg\"\n\tfunc_append finalize_command \" $arg\"\n\tprev=xcompiler\n\tcontinue\n\t;;\n\n      -mt|-mthreads|-kthread|-Kthread|-pthread|-pthreads|--thread-safe \\\n      |-threads|-fopenmp|-openmp|-mp|-xopenmp|-omp|-qsmp=*)\n\tfunc_append compiler_flags \" $arg\"\n\tfunc_append compile_command \" $arg\"\n\tfunc_append finalize_command \" $arg\"\n\tcase \"$new_inherited_linker_flags \" in\n\t    *\" $arg \"*) ;;\n\t    * ) func_append new_inherited_linker_flags \" $arg\" ;;\n\tesac\n\tcontinue\n\t;;\n\n      -multi_module)\n\tsingle_module=\"${wl}-multi_module\"\n\tcontinue\n\t;;\n\n      -no-fast-install)\n\tfast_install=no\n\tcontinue\n\t;;\n\n      -no-install)\n\tcase $host in\n\t*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-*-darwin* | *-cegcc*)\n\t  # The PATH hackery in wrapper scripts is required on Windows\n\t  # and Darwin in order for the loader to find any dlls it needs.\n\t  func_warning \"\\`-no-install' is ignored for $host\"\n\t  func_warning \"assuming \\`-no-fast-install' instead\"\n\t  fast_install=no\n\t  ;;\n\t*) no_install=yes ;;\n\tesac\n\tcontinue\n\t;;\n\n      -no-undefined)\n\tallow_undefined=no\n\tcontinue\n\t;;\n\n      -objectlist)\n\tprev=objectlist\n\tcontinue\n\t;;\n\n      -o) prev=output ;;\n\n      -precious-files-regex)\n\tprev=precious_regex\n\tcontinue\n\t;;\n\n      -release)\n\tprev=release\n\tcontinue\n\t;;\n\n      -rpath)\n\tprev=rpath\n\tcontinue\n\t;;\n\n      -R)\n\tprev=xrpath\n\tcontinue\n\t;;\n\n      -R*)\n\tfunc_stripname '-R' '' \"$arg\"\n\tdir=$func_stripname_result\n\t# We need an absolute path.\n\tcase $dir in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n\t=*)\n\t  func_stripname '=' '' \"$dir\"\n\t  dir=$lt_sysroot$func_stripname_result\n\t  ;;\n\t*)\n\t  func_fatal_error \"only absolute run-paths are allowed\"\n\t  ;;\n\tesac\n\tcase \"$xrpath \" in\n\t*\" $dir \"*) ;;\n\t*) func_append xrpath \" $dir\" ;;\n\tesac\n\tcontinue\n\t;;\n\n      -shared)\n\t# The effects of -shared are defined in a previous loop.\n\tcontinue\n\t;;\n\n      -shrext)\n\tprev=shrext\n\tcontinue\n\t;;\n\n      -static | -static-libtool-libs)\n\t# The effects of -static are defined in a previous loop.\n\t# We used to do the same as -all-static on platforms that\n\t# didn't have a PIC flag, but the assumption that the effects\n\t# would be equivalent was wrong.  It would break on at least\n\t# Digital Unix and AIX.\n\tcontinue\n\t;;\n\n      -thread-safe)\n\tthread_safe=yes\n\tcontinue\n\t;;\n\n      -version-info)\n\tprev=vinfo\n\tcontinue\n\t;;\n\n      -version-number)\n\tprev=vinfo\n\tvinfo_number=yes\n\tcontinue\n\t;;\n\n      -weak)\n        prev=weak\n\tcontinue\n\t;;\n\n      -Wc,*)\n\tfunc_stripname '-Wc,' '' \"$arg\"\n\targs=$func_stripname_result\n\targ=\n\tsave_ifs=\"$IFS\"; IFS=','\n\tfor flag in $args; do\n\t  IFS=\"$save_ifs\"\n          func_quote_for_eval \"$flag\"\n\t  func_append arg \" $func_quote_for_eval_result\"\n\t  func_append compiler_flags \" $func_quote_for_eval_result\"\n\tdone\n\tIFS=\"$save_ifs\"\n\tfunc_stripname ' ' '' \"$arg\"\n\targ=$func_stripname_result\n\t;;\n\n      -Wl,*)\n\tfunc_stripname '-Wl,' '' \"$arg\"\n\targs=$func_stripname_result\n\targ=\n\tsave_ifs=\"$IFS\"; IFS=','\n\tfor flag in $args; do\n\t  IFS=\"$save_ifs\"\n          func_quote_for_eval \"$flag\"\n\t  func_append arg \" $wl$func_quote_for_eval_result\"\n\t  func_append compiler_flags \" $wl$func_quote_for_eval_result\"\n\t  func_append linker_flags \" $func_quote_for_eval_result\"\n\tdone\n\tIFS=\"$save_ifs\"\n\tfunc_stripname ' ' '' \"$arg\"\n\targ=$func_stripname_result\n\t;;\n\n      -Xcompiler)\n\tprev=xcompiler\n\tcontinue\n\t;;\n\n      -Xlinker)\n\tprev=xlinker\n\tcontinue\n\t;;\n\n      -XCClinker)\n\tprev=xcclinker\n\tcontinue\n\t;;\n\n      # -msg_* for osf cc\n      -msg_*)\n\tfunc_quote_for_eval \"$arg\"\n\targ=\"$func_quote_for_eval_result\"\n\t;;\n\n      # Flags to be passed through unchanged, with rationale:\n      # -64, -mips[0-9]      enable 64-bit mode for the SGI compiler\n      # -r[0-9][0-9]*        specify processor for the SGI compiler\n      # -xarch=*, -xtarget=* enable 64-bit mode for the Sun compiler\n      # +DA*, +DD*           enable 64-bit mode for the HP compiler\n      # -q*                  compiler args for the IBM compiler\n      # -m*, -t[45]*, -txscale* architecture-specific flags for GCC\n      # -F/path              path to uninstalled frameworks, gcc on darwin\n      # -p, -pg, --coverage, -fprofile-*  profiling flags for GCC\n      # @file                GCC response files\n      # -tp=*                Portland pgcc target processor selection\n      # --sysroot=*          for sysroot support\n      # -O*, -flto*, -fwhopr*, -fuse-linker-plugin GCC link-time optimization\n      -64|-mips[0-9]|-r[0-9][0-9]*|-xarch=*|-xtarget=*|+DA*|+DD*|-q*|-m*| \\\n      -t[45]*|-txscale*|-p|-pg|--coverage|-fprofile-*|-F*|@*|-tp=*|--sysroot=*| \\\n      -O*|-flto*|-fwhopr*|-fuse-linker-plugin)\n        func_quote_for_eval \"$arg\"\n\targ=\"$func_quote_for_eval_result\"\n        func_append compile_command \" $arg\"\n        func_append finalize_command \" $arg\"\n        func_append compiler_flags \" $arg\"\n        continue\n        ;;\n\n      # Some other compiler flag.\n      -* | +*)\n        func_quote_for_eval \"$arg\"\n\targ=\"$func_quote_for_eval_result\"\n\t;;\n\n      *.$objext)\n\t# A standard object.\n\tfunc_append objs \" $arg\"\n\t;;\n\n      *.lo)\n\t# A libtool-controlled object.\n\n\t# Check to see that this really is a libtool object.\n\tif func_lalib_unsafe_p \"$arg\"; then\n\t  pic_object=\n\t  non_pic_object=\n\n\t  # Read the .lo file\n\t  func_source \"$arg\"\n\n\t  if test -z \"$pic_object\" ||\n\t     test -z \"$non_pic_object\" ||\n\t     test \"$pic_object\" = none &&\n\t     test \"$non_pic_object\" = none; then\n\t    func_fatal_error \"cannot find name of object for \\`$arg'\"\n\t  fi\n\n\t  # Extract subdirectory from the argument.\n\t  func_dirname \"$arg\" \"/\" \"\"\n\t  xdir=\"$func_dirname_result\"\n\n\t  if test \"$pic_object\" != none; then\n\t    # Prepend the subdirectory the object is found in.\n\t    pic_object=\"$xdir$pic_object\"\n\n\t    if test \"$prev\" = dlfiles; then\n\t      if test \"$build_libtool_libs\" = yes && test \"$dlopen_support\" = yes; then\n\t\tfunc_append dlfiles \" $pic_object\"\n\t\tprev=\n\t\tcontinue\n\t      else\n\t\t# If libtool objects are unsupported, then we need to preload.\n\t\tprev=dlprefiles\n\t      fi\n\t    fi\n\n\t    # CHECK ME:  I think I busted this.  -Ossama\n\t    if test \"$prev\" = dlprefiles; then\n\t      # Preload the old-style object.\n\t      func_append dlprefiles \" $pic_object\"\n\t      prev=\n\t    fi\n\n\t    # A PIC object.\n\t    func_append libobjs \" $pic_object\"\n\t    arg=\"$pic_object\"\n\t  fi\n\n\t  # Non-PIC object.\n\t  if test \"$non_pic_object\" != none; then\n\t    # Prepend the subdirectory the object is found in.\n\t    non_pic_object=\"$xdir$non_pic_object\"\n\n\t    # A standard non-PIC object\n\t    func_append non_pic_objects \" $non_pic_object\"\n\t    if test -z \"$pic_object\" || test \"$pic_object\" = none ; then\n\t      arg=\"$non_pic_object\"\n\t    fi\n\t  else\n\t    # If the PIC object exists, use it instead.\n\t    # $xdir was prepended to $pic_object above.\n\t    non_pic_object=\"$pic_object\"\n\t    func_append non_pic_objects \" $non_pic_object\"\n\t  fi\n\telse\n\t  # Only an error if not doing a dry-run.\n\t  if $opt_dry_run; then\n\t    # Extract subdirectory from the argument.\n\t    func_dirname \"$arg\" \"/\" \"\"\n\t    xdir=\"$func_dirname_result\"\n\n\t    func_lo2o \"$arg\"\n\t    pic_object=$xdir$objdir/$func_lo2o_result\n\t    non_pic_object=$xdir$func_lo2o_result\n\t    func_append libobjs \" $pic_object\"\n\t    func_append non_pic_objects \" $non_pic_object\"\n\t  else\n\t    func_fatal_error \"\\`$arg' is not a valid libtool object\"\n\t  fi\n\tfi\n\t;;\n\n      *.$libext)\n\t# An archive.\n\tfunc_append deplibs \" $arg\"\n\tfunc_append old_deplibs \" $arg\"\n\tcontinue\n\t;;\n\n      *.la)\n\t# A libtool-controlled library.\n\n\tfunc_resolve_sysroot \"$arg\"\n\tif test \"$prev\" = dlfiles; then\n\t  # This library was specified with -dlopen.\n\t  func_append dlfiles \" $func_resolve_sysroot_result\"\n\t  prev=\n\telif test \"$prev\" = dlprefiles; then\n\t  # The library was specified with -dlpreopen.\n\t  func_append dlprefiles \" $func_resolve_sysroot_result\"\n\t  prev=\n\telse\n\t  func_append deplibs \" $func_resolve_sysroot_result\"\n\tfi\n\tcontinue\n\t;;\n\n      # Some other compiler argument.\n      *)\n\t# Unknown arguments in both finalize_command and compile_command need\n\t# to be aesthetically quoted because they are evaled later.\n\tfunc_quote_for_eval \"$arg\"\n\targ=\"$func_quote_for_eval_result\"\n\t;;\n      esac # arg\n\n      # Now actually substitute the argument into the commands.\n      if test -n \"$arg\"; then\n\tfunc_append compile_command \" $arg\"\n\tfunc_append finalize_command \" $arg\"\n      fi\n    done # argument parsing loop\n\n    test -n \"$prev\" && \\\n      func_fatal_help \"the \\`$prevarg' option requires an argument\"\n\n    if test \"$export_dynamic\" = yes && test -n \"$export_dynamic_flag_spec\"; then\n      eval arg=\\\"$export_dynamic_flag_spec\\\"\n      func_append compile_command \" $arg\"\n      func_append finalize_command \" $arg\"\n    fi\n\n    oldlibs=\n    # calculate the name of the file, without its directory\n    func_basename \"$output\"\n    outputname=\"$func_basename_result\"\n    libobjs_save=\"$libobjs\"\n\n    if test -n \"$shlibpath_var\"; then\n      # get the directories listed in $shlibpath_var\n      eval shlib_search_path=\\`\\$ECHO \\\"\\${$shlibpath_var}\\\" \\| \\$SED \\'s/:/ /g\\'\\`\n    else\n      shlib_search_path=\n    fi\n    eval sys_lib_search_path=\\\"$sys_lib_search_path_spec\\\"\n    eval sys_lib_dlsearch_path=\\\"$sys_lib_dlsearch_path_spec\\\"\n\n    func_dirname \"$output\" \"/\" \"\"\n    output_objdir=\"$func_dirname_result$objdir\"\n    func_to_tool_file \"$output_objdir/\"\n    tool_output_objdir=$func_to_tool_file_result\n    # Create the object directory.\n    func_mkdir_p \"$output_objdir\"\n\n    # Determine the type of output\n    case $output in\n    \"\")\n      func_fatal_help \"you must specify an output file\"\n      ;;\n    *.$libext) linkmode=oldlib ;;\n    *.lo | *.$objext) linkmode=obj ;;\n    *.la) linkmode=lib ;;\n    *) linkmode=prog ;; # Anything else should be a program.\n    esac\n\n    specialdeplibs=\n\n    libs=\n    # Find all interdependent deplibs by searching for libraries\n    # that are linked more than once (e.g. -la -lb -la)\n    for deplib in $deplibs; do\n      if $opt_preserve_dup_deps ; then\n\tcase \"$libs \" in\n\t*\" $deplib \"*) func_append specialdeplibs \" $deplib\" ;;\n\tesac\n      fi\n      func_append libs \" $deplib\"\n    done\n\n    if test \"$linkmode\" = lib; then\n      libs=\"$predeps $libs $compiler_lib_search_path $postdeps\"\n\n      # Compute libraries that are listed more than once in $predeps\n      # $postdeps and mark them as special (i.e., whose duplicates are\n      # not to be eliminated).\n      pre_post_deps=\n      if $opt_duplicate_compiler_generated_deps; then\n\tfor pre_post_dep in $predeps $postdeps; do\n\t  case \"$pre_post_deps \" in\n\t  *\" $pre_post_dep \"*) func_append specialdeplibs \" $pre_post_deps\" ;;\n\t  esac\n\t  func_append pre_post_deps \" $pre_post_dep\"\n\tdone\n      fi\n      pre_post_deps=\n    fi\n\n    deplibs=\n    newdependency_libs=\n    newlib_search_path=\n    need_relink=no # whether we're linking any uninstalled libtool libraries\n    notinst_deplibs= # not-installed libtool libraries\n    notinst_path= # paths that contain not-installed libtool libraries\n\n    case $linkmode in\n    lib)\n\tpasses=\"conv dlpreopen link\"\n\tfor file in $dlfiles $dlprefiles; do\n\t  case $file in\n\t  *.la) ;;\n\t  *)\n\t    func_fatal_help \"libraries can \\`-dlopen' only libtool libraries: $file\"\n\t    ;;\n\t  esac\n\tdone\n\t;;\n    prog)\n\tcompile_deplibs=\n\tfinalize_deplibs=\n\talldeplibs=no\n\tnewdlfiles=\n\tnewdlprefiles=\n\tpasses=\"conv scan dlopen dlpreopen link\"\n\t;;\n    *)  passes=\"conv\"\n\t;;\n    esac\n\n    for pass in $passes; do\n      # The preopen pass in lib mode reverses $deplibs; put it back here\n      # so that -L comes before libs that need it for instance...\n      if test \"$linkmode,$pass\" = \"lib,link\"; then\n\t## FIXME: Find the place where the list is rebuilt in the wrong\n\t##        order, and fix it there properly\n        tmp_deplibs=\n\tfor deplib in $deplibs; do\n\t  tmp_deplibs=\"$deplib $tmp_deplibs\"\n\tdone\n\tdeplibs=\"$tmp_deplibs\"\n      fi\n\n      if test \"$linkmode,$pass\" = \"lib,link\" ||\n\t test \"$linkmode,$pass\" = \"prog,scan\"; then\n\tlibs=\"$deplibs\"\n\tdeplibs=\n      fi\n      if test \"$linkmode\" = prog; then\n\tcase $pass in\n\tdlopen) libs=\"$dlfiles\" ;;\n\tdlpreopen) libs=\"$dlprefiles\" ;;\n\tlink) libs=\"$deplibs %DEPLIBS% $dependency_libs\" ;;\n\tesac\n      fi\n      if test \"$linkmode,$pass\" = \"lib,dlpreopen\"; then\n\t# Collect and forward deplibs of preopened libtool libs\n\tfor lib in $dlprefiles; do\n\t  # Ignore non-libtool-libs\n\t  dependency_libs=\n\t  func_resolve_sysroot \"$lib\"\n\t  case $lib in\n\t  *.la)\tfunc_source \"$func_resolve_sysroot_result\" ;;\n\t  esac\n\n\t  # Collect preopened libtool deplibs, except any this library\n\t  # has declared as weak libs\n\t  for deplib in $dependency_libs; do\n\t    func_basename \"$deplib\"\n            deplib_base=$func_basename_result\n\t    case \" $weak_libs \" in\n\t    *\" $deplib_base \"*) ;;\n\t    *) func_append deplibs \" $deplib\" ;;\n\t    esac\n\t  done\n\tdone\n\tlibs=\"$dlprefiles\"\n      fi\n      if test \"$pass\" = dlopen; then\n\t# Collect dlpreopened libraries\n\tsave_deplibs=\"$deplibs\"\n\tdeplibs=\n      fi\n\n      for deplib in $libs; do\n\tlib=\n\tfound=no\n\tcase $deplib in\n\t-mt|-mthreads|-kthread|-Kthread|-pthread|-pthreads|--thread-safe \\\n        |-threads|-fopenmp|-openmp|-mp|-xopenmp|-omp|-qsmp=*)\n\t  if test \"$linkmode,$pass\" = \"prog,link\"; then\n\t    compile_deplibs=\"$deplib $compile_deplibs\"\n\t    finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t  else\n\t    func_append compiler_flags \" $deplib\"\n\t    if test \"$linkmode\" = lib ; then\n\t\tcase \"$new_inherited_linker_flags \" in\n\t\t    *\" $deplib \"*) ;;\n\t\t    * ) func_append new_inherited_linker_flags \" $deplib\" ;;\n\t\tesac\n\t    fi\n\t  fi\n\t  continue\n\t  ;;\n\t-l*)\n\t  if test \"$linkmode\" != lib && test \"$linkmode\" != prog; then\n\t    func_warning \"\\`-l' is ignored for archives/objects\"\n\t    continue\n\t  fi\n\t  func_stripname '-l' '' \"$deplib\"\n\t  name=$func_stripname_result\n\t  if test \"$linkmode\" = lib; then\n\t    searchdirs=\"$newlib_search_path $lib_search_path $compiler_lib_search_dirs $sys_lib_search_path $shlib_search_path\"\n\t  else\n\t    searchdirs=\"$newlib_search_path $lib_search_path $sys_lib_search_path $shlib_search_path\"\n\t  fi\n\t  for searchdir in $searchdirs; do\n\t    for search_ext in .la $std_shrext .so .a; do\n\t      # Search the libtool library\n\t      lib=\"$searchdir/lib${name}${search_ext}\"\n\t      if test -f \"$lib\"; then\n\t\tif test \"$search_ext\" = \".la\"; then\n\t\t  found=yes\n\t\telse\n\t\t  found=no\n\t\tfi\n\t\tbreak 2\n\t      fi\n\t    done\n\t  done\n\t  if test \"$found\" != yes; then\n\t    # deplib doesn't seem to be a libtool library\n\t    if test \"$linkmode,$pass\" = \"prog,link\"; then\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    else\n\t      deplibs=\"$deplib $deplibs\"\n\t      test \"$linkmode\" = lib && newdependency_libs=\"$deplib $newdependency_libs\"\n\t    fi\n\t    continue\n\t  else # deplib is a libtool library\n\t    # If $allow_libtool_libs_with_static_runtimes && $deplib is a stdlib,\n\t    # We need to do some special things here, and not later.\n\t    if test \"X$allow_libtool_libs_with_static_runtimes\" = \"Xyes\" ; then\n\t      case \" $predeps $postdeps \" in\n\t      *\" $deplib \"*)\n\t\tif func_lalib_p \"$lib\"; then\n\t\t  library_names=\n\t\t  old_library=\n\t\t  func_source \"$lib\"\n\t\t  for l in $old_library $library_names; do\n\t\t    ll=\"$l\"\n\t\t  done\n\t\t  if test \"X$ll\" = \"X$old_library\" ; then # only static version available\n\t\t    found=no\n\t\t    func_dirname \"$lib\" \"\" \".\"\n\t\t    ladir=\"$func_dirname_result\"\n\t\t    lib=$ladir/$old_library\n\t\t    if test \"$linkmode,$pass\" = \"prog,link\"; then\n\t\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t\t    else\n\t\t      deplibs=\"$deplib $deplibs\"\n\t\t      test \"$linkmode\" = lib && newdependency_libs=\"$deplib $newdependency_libs\"\n\t\t    fi\n\t\t    continue\n\t\t  fi\n\t\tfi\n\t\t;;\n\t      *) ;;\n\t      esac\n\t    fi\n\t  fi\n\t  ;; # -l\n\t*.ltframework)\n\t  if test \"$linkmode,$pass\" = \"prog,link\"; then\n\t    compile_deplibs=\"$deplib $compile_deplibs\"\n\t    finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t  else\n\t    deplibs=\"$deplib $deplibs\"\n\t    if test \"$linkmode\" = lib ; then\n\t\tcase \"$new_inherited_linker_flags \" in\n\t\t    *\" $deplib \"*) ;;\n\t\t    * ) func_append new_inherited_linker_flags \" $deplib\" ;;\n\t\tesac\n\t    fi\n\t  fi\n\t  continue\n\t  ;;\n\t-L*)\n\t  case $linkmode in\n\t  lib)\n\t    deplibs=\"$deplib $deplibs\"\n\t    test \"$pass\" = conv && continue\n\t    newdependency_libs=\"$deplib $newdependency_libs\"\n\t    func_stripname '-L' '' \"$deplib\"\n\t    func_resolve_sysroot \"$func_stripname_result\"\n\t    func_append newlib_search_path \" $func_resolve_sysroot_result\"\n\t    ;;\n\t  prog)\n\t    if test \"$pass\" = conv; then\n\t      deplibs=\"$deplib $deplibs\"\n\t      continue\n\t    fi\n\t    if test \"$pass\" = scan; then\n\t      deplibs=\"$deplib $deplibs\"\n\t    else\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    fi\n\t    func_stripname '-L' '' \"$deplib\"\n\t    func_resolve_sysroot \"$func_stripname_result\"\n\t    func_append newlib_search_path \" $func_resolve_sysroot_result\"\n\t    ;;\n\t  *)\n\t    func_warning \"\\`-L' is ignored for archives/objects\"\n\t    ;;\n\t  esac # linkmode\n\t  continue\n\t  ;; # -L\n\t-R*)\n\t  if test \"$pass\" = link; then\n\t    func_stripname '-R' '' \"$deplib\"\n\t    func_resolve_sysroot \"$func_stripname_result\"\n\t    dir=$func_resolve_sysroot_result\n\t    # Make sure the xrpath contains only unique directories.\n\t    case \"$xrpath \" in\n\t    *\" $dir \"*) ;;\n\t    *) func_append xrpath \" $dir\" ;;\n\t    esac\n\t  fi\n\t  deplibs=\"$deplib $deplibs\"\n\t  continue\n\t  ;;\n\t*.la)\n\t  func_resolve_sysroot \"$deplib\"\n\t  lib=$func_resolve_sysroot_result\n\t  ;;\n\t*.$libext)\n\t  if test \"$pass\" = conv; then\n\t    deplibs=\"$deplib $deplibs\"\n\t    continue\n\t  fi\n\t  case $linkmode in\n\t  lib)\n\t    # Linking convenience modules into shared libraries is allowed,\n\t    # but linking other static libraries is non-portable.\n\t    case \" $dlpreconveniencelibs \" in\n\t    *\" $deplib \"*) ;;\n\t    *)\n\t      valid_a_lib=no\n\t      case $deplibs_check_method in\n\t\tmatch_pattern*)\n\t\t  set dummy $deplibs_check_method; shift\n\t\t  match_pattern_regex=`expr \"$deplibs_check_method\" : \"$1 \\(.*\\)\"`\n\t\t  if eval \"\\$ECHO \\\"$deplib\\\"\" 2>/dev/null | $SED 10q \\\n\t\t    | $EGREP \"$match_pattern_regex\" > /dev/null; then\n\t\t    valid_a_lib=yes\n\t\t  fi\n\t\t;;\n\t\tpass_all)\n\t\t  valid_a_lib=yes\n\t\t;;\n\t      esac\n\t      if test \"$valid_a_lib\" != yes; then\n\t\techo\n\t\t$ECHO \"*** Warning: Trying to link with static lib archive $deplib.\"\n\t\techo \"*** I have the capability to make that library automatically link in when\"\n\t\techo \"*** you link to this library.  But I can only do this if you have a\"\n\t\techo \"*** shared version of the library, which you do not appear to have\"\n\t\techo \"*** because the file extensions .$libext of this argument makes me believe\"\n\t\techo \"*** that it is just a static archive that I should not use here.\"\n\t      else\n\t\techo\n\t\t$ECHO \"*** Warning: Linking the shared library $output against the\"\n\t\t$ECHO \"*** static library $deplib is not portable!\"\n\t\tdeplibs=\"$deplib $deplibs\"\n\t      fi\n\t      ;;\n\t    esac\n\t    continue\n\t    ;;\n\t  prog)\n\t    if test \"$pass\" != link; then\n\t      deplibs=\"$deplib $deplibs\"\n\t    else\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    fi\n\t    continue\n\t    ;;\n\t  esac # linkmode\n\t  ;; # *.$libext\n\t*.lo | *.$objext)\n\t  if test \"$pass\" = conv; then\n\t    deplibs=\"$deplib $deplibs\"\n\t  elif test \"$linkmode\" = prog; then\n\t    if test \"$pass\" = dlpreopen || test \"$dlopen_support\" != yes || test \"$build_libtool_libs\" = no; then\n\t      # If there is no dlopen support or we're linking statically,\n\t      # we need to preload.\n\t      func_append newdlprefiles \" $deplib\"\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    else\n\t      func_append newdlfiles \" $deplib\"\n\t    fi\n\t  fi\n\t  continue\n\t  ;;\n\t%DEPLIBS%)\n\t  alldeplibs=yes\n\t  continue\n\t  ;;\n\tesac # case $deplib\n\n\tif test \"$found\" = yes || test -f \"$lib\"; then :\n\telse\n\t  func_fatal_error \"cannot find the library \\`$lib' or unhandled argument \\`$deplib'\"\n\tfi\n\n\t# Check to see that this really is a libtool archive.\n\tfunc_lalib_unsafe_p \"$lib\" \\\n\t  || func_fatal_error \"\\`$lib' is not a valid libtool archive\"\n\n\tfunc_dirname \"$lib\" \"\" \".\"\n\tladir=\"$func_dirname_result\"\n\n\tdlname=\n\tdlopen=\n\tdlpreopen=\n\tlibdir=\n\tlibrary_names=\n\told_library=\n\tinherited_linker_flags=\n\t# If the library was installed with an old release of libtool,\n\t# it will not redefine variables installed, or shouldnotlink\n\tinstalled=yes\n\tshouldnotlink=no\n\tavoidtemprpath=\n\n\n\t# Read the .la file\n\tfunc_source \"$lib\"\n\n\t# Convert \"-framework foo\" to \"foo.ltframework\"\n\tif test -n \"$inherited_linker_flags\"; then\n\t  tmp_inherited_linker_flags=`$ECHO \"$inherited_linker_flags\" | $SED 's/-framework \\([^ $]*\\)/\\1.ltframework/g'`\n\t  for tmp_inherited_linker_flag in $tmp_inherited_linker_flags; do\n\t    case \" $new_inherited_linker_flags \" in\n\t      *\" $tmp_inherited_linker_flag \"*) ;;\n\t      *) func_append new_inherited_linker_flags \" $tmp_inherited_linker_flag\";;\n\t    esac\n\t  done\n\tfi\n\tdependency_libs=`$ECHO \" $dependency_libs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\tif test \"$linkmode,$pass\" = \"lib,link\" ||\n\t   test \"$linkmode,$pass\" = \"prog,scan\" ||\n\t   { test \"$linkmode\" != prog && test \"$linkmode\" != lib; }; then\n\t  test -n \"$dlopen\" && func_append dlfiles \" $dlopen\"\n\t  test -n \"$dlpreopen\" && func_append dlprefiles \" $dlpreopen\"\n\tfi\n\n\tif test \"$pass\" = conv; then\n\t  # Only check for convenience libraries\n\t  deplibs=\"$lib $deplibs\"\n\t  if test -z \"$libdir\"; then\n\t    if test -z \"$old_library\"; then\n\t      func_fatal_error \"cannot find name of link library for \\`$lib'\"\n\t    fi\n\t    # It is a libtool convenience library, so add in its objects.\n\t    func_append convenience \" $ladir/$objdir/$old_library\"\n\t    func_append old_convenience \" $ladir/$objdir/$old_library\"\n\t  elif test \"$linkmode\" != prog && test \"$linkmode\" != lib; then\n\t    func_fatal_error \"\\`$lib' is not a convenience library\"\n\t  fi\n\t  tmp_libs=\n\t  for deplib in $dependency_libs; do\n\t    deplibs=\"$deplib $deplibs\"\n\t    if $opt_preserve_dup_deps ; then\n\t      case \"$tmp_libs \" in\n\t      *\" $deplib \"*) func_append specialdeplibs \" $deplib\" ;;\n\t      esac\n\t    fi\n\t    func_append tmp_libs \" $deplib\"\n\t  done\n\t  continue\n\tfi # $pass = conv\n\n\n\t# Get the name of the library we link against.\n\tlinklib=\n\tif test -n \"$old_library\" &&\n\t   { test \"$prefer_static_libs\" = yes ||\n\t     test \"$prefer_static_libs,$installed\" = \"built,no\"; }; then\n\t  linklib=$old_library\n\telse\n\t  for l in $old_library $library_names; do\n\t    linklib=\"$l\"\n\t  done\n\tfi\n\tif test -z \"$linklib\"; then\n\t  func_fatal_error \"cannot find name of link library for \\`$lib'\"\n\tfi\n\n\t# This library was specified with -dlopen.\n\tif test \"$pass\" = dlopen; then\n\t  if test -z \"$libdir\"; then\n\t    func_fatal_error \"cannot -dlopen a convenience library: \\`$lib'\"\n\t  fi\n\t  if test -z \"$dlname\" ||\n\t     test \"$dlopen_support\" != yes ||\n\t     test \"$build_libtool_libs\" = no; then\n\t    # If there is no dlname, no dlopen support or we're linking\n\t    # statically, we need to preload.  We also need to preload any\n\t    # dependent libraries so libltdl's deplib preloader doesn't\n\t    # bomb out in the load deplibs phase.\n\t    func_append dlprefiles \" $lib $dependency_libs\"\n\t  else\n\t    func_append newdlfiles \" $lib\"\n\t  fi\n\t  continue\n\tfi # $pass = dlopen\n\n\t# We need an absolute path.\n\tcase $ladir in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) abs_ladir=\"$ladir\" ;;\n\t*)\n\t  abs_ladir=`cd \"$ladir\" && pwd`\n\t  if test -z \"$abs_ladir\"; then\n\t    func_warning \"cannot determine absolute directory name of \\`$ladir'\"\n\t    func_warning \"passing it literally to the linker, although it might fail\"\n\t    abs_ladir=\"$ladir\"\n\t  fi\n\t  ;;\n\tesac\n\tfunc_basename \"$lib\"\n\tlaname=\"$func_basename_result\"\n\n\t# Find the relevant object directory and library name.\n\tif test \"X$installed\" = Xyes; then\n\t  if test ! -f \"$lt_sysroot$libdir/$linklib\" && test -f \"$abs_ladir/$linklib\"; then\n\t    func_warning \"library \\`$lib' was moved.\"\n\t    dir=\"$ladir\"\n\t    absdir=\"$abs_ladir\"\n\t    libdir=\"$abs_ladir\"\n\t  else\n\t    dir=\"$lt_sysroot$libdir\"\n\t    absdir=\"$lt_sysroot$libdir\"\n\t  fi\n\t  test \"X$hardcode_automatic\" = Xyes && avoidtemprpath=yes\n\telse\n\t  if test ! -f \"$ladir/$objdir/$linklib\" && test -f \"$abs_ladir/$linklib\"; then\n\t    dir=\"$ladir\"\n\t    absdir=\"$abs_ladir\"\n\t    # Remove this search path later\n\t    func_append notinst_path \" $abs_ladir\"\n\t  else\n\t    dir=\"$ladir/$objdir\"\n\t    absdir=\"$abs_ladir/$objdir\"\n\t    # Remove this search path later\n\t    func_append notinst_path \" $abs_ladir\"\n\t  fi\n\tfi # $installed = yes\n\tfunc_stripname 'lib' '.la' \"$laname\"\n\tname=$func_stripname_result\n\n\t# This library was specified with -dlpreopen.\n\tif test \"$pass\" = dlpreopen; then\n\t  if test -z \"$libdir\" && test \"$linkmode\" = prog; then\n\t    func_fatal_error \"only libraries may -dlpreopen a convenience library: \\`$lib'\"\n\t  fi\n\t  case \"$host\" in\n\t    # special handling for platforms with PE-DLLs.\n\t    *cygwin* | *mingw* | *cegcc* )\n\t      # Linker will automatically link against shared library if both\n\t      # static and shared are present.  Therefore, ensure we extract\n\t      # symbols from the import library if a shared library is present\n\t      # (otherwise, the dlopen module name will be incorrect).  We do\n\t      # this by putting the import library name into $newdlprefiles.\n\t      # We recover the dlopen module name by 'saving' the la file\n\t      # name in a special purpose variable, and (later) extracting the\n\t      # dlname from the la file.\n\t      if test -n \"$dlname\"; then\n\t        func_tr_sh \"$dir/$linklib\"\n\t        eval \"libfile_$func_tr_sh_result=\\$abs_ladir/\\$laname\"\n\t        func_append newdlprefiles \" $dir/$linklib\"\n\t      else\n\t        func_append newdlprefiles \" $dir/$old_library\"\n\t        # Keep a list of preopened convenience libraries to check\n\t        # that they are being used correctly in the link pass.\n\t        test -z \"$libdir\" && \\\n\t          func_append dlpreconveniencelibs \" $dir/$old_library\"\n\t      fi\n\t    ;;\n\t    * )\n\t      # Prefer using a static library (so that no silly _DYNAMIC symbols\n\t      # are required to link).\n\t      if test -n \"$old_library\"; then\n\t        func_append newdlprefiles \" $dir/$old_library\"\n\t        # Keep a list of preopened convenience libraries to check\n\t        # that they are being used correctly in the link pass.\n\t        test -z \"$libdir\" && \\\n\t          func_append dlpreconveniencelibs \" $dir/$old_library\"\n\t      # Otherwise, use the dlname, so that lt_dlopen finds it.\n\t      elif test -n \"$dlname\"; then\n\t        func_append newdlprefiles \" $dir/$dlname\"\n\t      else\n\t        func_append newdlprefiles \" $dir/$linklib\"\n\t      fi\n\t    ;;\n\t  esac\n\tfi # $pass = dlpreopen\n\n\tif test -z \"$libdir\"; then\n\t  # Link the convenience library\n\t  if test \"$linkmode\" = lib; then\n\t    deplibs=\"$dir/$old_library $deplibs\"\n\t  elif test \"$linkmode,$pass\" = \"prog,link\"; then\n\t    compile_deplibs=\"$dir/$old_library $compile_deplibs\"\n\t    finalize_deplibs=\"$dir/$old_library $finalize_deplibs\"\n\t  else\n\t    deplibs=\"$lib $deplibs\" # used for prog,scan pass\n\t  fi\n\t  continue\n\tfi\n\n\n\tif test \"$linkmode\" = prog && test \"$pass\" != link; then\n\t  func_append newlib_search_path \" $ladir\"\n\t  deplibs=\"$lib $deplibs\"\n\n\t  linkalldeplibs=no\n\t  if test \"$link_all_deplibs\" != no || test -z \"$library_names\" ||\n\t     test \"$build_libtool_libs\" = no; then\n\t    linkalldeplibs=yes\n\t  fi\n\n\t  tmp_libs=\n\t  for deplib in $dependency_libs; do\n\t    case $deplib in\n\t    -L*) func_stripname '-L' '' \"$deplib\"\n\t         func_resolve_sysroot \"$func_stripname_result\"\n\t         func_append newlib_search_path \" $func_resolve_sysroot_result\"\n\t\t ;;\n\t    esac\n\t    # Need to link against all dependency_libs?\n\t    if test \"$linkalldeplibs\" = yes; then\n\t      deplibs=\"$deplib $deplibs\"\n\t    else\n\t      # Need to hardcode shared library paths\n\t      # or/and link against static libraries\n\t      newdependency_libs=\"$deplib $newdependency_libs\"\n\t    fi\n\t    if $opt_preserve_dup_deps ; then\n\t      case \"$tmp_libs \" in\n\t      *\" $deplib \"*) func_append specialdeplibs \" $deplib\" ;;\n\t      esac\n\t    fi\n\t    func_append tmp_libs \" $deplib\"\n\t  done # for deplib\n\t  continue\n\tfi # $linkmode = prog...\n\n\tif test \"$linkmode,$pass\" = \"prog,link\"; then\n\t  if test -n \"$library_names\" &&\n\t     { { test \"$prefer_static_libs\" = no ||\n\t         test \"$prefer_static_libs,$installed\" = \"built,yes\"; } ||\n\t       test -z \"$old_library\"; }; then\n\t    # We need to hardcode the library path\n\t    if test -n \"$shlibpath_var\" && test -z \"$avoidtemprpath\" ; then\n\t      # Make sure the rpath contains only unique directories.\n\t      case \"$temp_rpath:\" in\n\t      *\"$absdir:\"*) ;;\n\t      *) func_append temp_rpath \"$absdir:\" ;;\n\t      esac\n\t    fi\n\n\t    # Hardcode the library path.\n\t    # Skip directories that are in the system default run-time\n\t    # search path.\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $absdir \"*) ;;\n\t    *)\n\t      case \"$compile_rpath \" in\n\t      *\" $absdir \"*) ;;\n\t      *) func_append compile_rpath \" $absdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $libdir \"*) ;;\n\t    *)\n\t      case \"$finalize_rpath \" in\n\t      *\" $libdir \"*) ;;\n\t      *) func_append finalize_rpath \" $libdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t  fi # $linkmode,$pass = prog,link...\n\n\t  if test \"$alldeplibs\" = yes &&\n\t     { test \"$deplibs_check_method\" = pass_all ||\n\t       { test \"$build_libtool_libs\" = yes &&\n\t\t test -n \"$library_names\"; }; }; then\n\t    # We only need to search for static libraries\n\t    continue\n\t  fi\n\tfi\n\n\tlink_static=no # Whether the deplib will be linked statically\n\tuse_static_libs=$prefer_static_libs\n\tif test \"$use_static_libs\" = built && test \"$installed\" = yes; then\n\t  use_static_libs=no\n\tfi\n\tif test -n \"$library_names\" &&\n\t   { test \"$use_static_libs\" = no || test -z \"$old_library\"; }; then\n\t  case $host in\n\t  *cygwin* | *mingw* | *cegcc*)\n\t      # No point in relinking DLLs because paths are not encoded\n\t      func_append notinst_deplibs \" $lib\"\n\t      need_relink=no\n\t    ;;\n\t  *)\n\t    if test \"$installed\" = no; then\n\t      func_append notinst_deplibs \" $lib\"\n\t      need_relink=yes\n\t    fi\n\t    ;;\n\t  esac\n\t  # This is a shared library\n\n\t  # Warn about portability, can't link against -module's on some\n\t  # systems (darwin).  Don't bleat about dlopened modules though!\n\t  dlopenmodule=\"\"\n\t  for dlpremoduletest in $dlprefiles; do\n\t    if test \"X$dlpremoduletest\" = \"X$lib\"; then\n\t      dlopenmodule=\"$dlpremoduletest\"\n\t      break\n\t    fi\n\t  done\n\t  if test -z \"$dlopenmodule\" && test \"$shouldnotlink\" = yes && test \"$pass\" = link; then\n\t    echo\n\t    if test \"$linkmode\" = prog; then\n\t      $ECHO \"*** Warning: Linking the executable $output against the loadable module\"\n\t    else\n\t      $ECHO \"*** Warning: Linking the shared library $output against the loadable module\"\n\t    fi\n\t    $ECHO \"*** $linklib is not portable!\"\n\t  fi\n\t  if test \"$linkmode\" = lib &&\n\t     test \"$hardcode_into_libs\" = yes; then\n\t    # Hardcode the library path.\n\t    # Skip directories that are in the system default run-time\n\t    # search path.\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $absdir \"*) ;;\n\t    *)\n\t      case \"$compile_rpath \" in\n\t      *\" $absdir \"*) ;;\n\t      *) func_append compile_rpath \" $absdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $libdir \"*) ;;\n\t    *)\n\t      case \"$finalize_rpath \" in\n\t      *\" $libdir \"*) ;;\n\t      *) func_append finalize_rpath \" $libdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t  fi\n\n\t  if test -n \"$old_archive_from_expsyms_cmds\"; then\n\t    # figure out the soname\n\t    set dummy $library_names\n\t    shift\n\t    realname=\"$1\"\n\t    shift\n\t    libname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t    # use dlname if we got it. it's perfectly good, no?\n\t    if test -n \"$dlname\"; then\n\t      soname=\"$dlname\"\n\t    elif test -n \"$soname_spec\"; then\n\t      # bleh windows\n\t      case $host in\n\t      *cygwin* | mingw* | *cegcc*)\n\t        func_arith $current - $age\n\t\tmajor=$func_arith_result\n\t\tversuffix=\"-$major\"\n\t\t;;\n\t      esac\n\t      eval soname=\\\"$soname_spec\\\"\n\t    else\n\t      soname=\"$realname\"\n\t    fi\n\n\t    # Make a new name for the extract_expsyms_cmds to use\n\t    soroot=\"$soname\"\n\t    func_basename \"$soroot\"\n\t    soname=\"$func_basename_result\"\n\t    func_stripname 'lib' '.dll' \"$soname\"\n\t    newlib=libimp-$func_stripname_result.a\n\n\t    # If the library has no export list, then create one now\n\t    if test -f \"$output_objdir/$soname-def\"; then :\n\t    else\n\t      func_verbose \"extracting exported symbol list from \\`$soname'\"\n\t      func_execute_cmds \"$extract_expsyms_cmds\" 'exit $?'\n\t    fi\n\n\t    # Create $newlib\n\t    if test -f \"$output_objdir/$newlib\"; then :; else\n\t      func_verbose \"generating import library for \\`$soname'\"\n\t      func_execute_cmds \"$old_archive_from_expsyms_cmds\" 'exit $?'\n\t    fi\n\t    # make sure the library variables are pointing to the new library\n\t    dir=$output_objdir\n\t    linklib=$newlib\n\t  fi # test -n \"$old_archive_from_expsyms_cmds\"\n\n\t  if test \"$linkmode\" = prog || test \"$opt_mode\" != relink; then\n\t    add_shlibpath=\n\t    add_dir=\n\t    add=\n\t    lib_linked=yes\n\t    case $hardcode_action in\n\t    immediate | unsupported)\n\t      if test \"$hardcode_direct\" = no; then\n\t\tadd=\"$dir/$linklib\"\n\t\tcase $host in\n\t\t  *-*-sco3.2v5.0.[024]*) add_dir=\"-L$dir\" ;;\n\t\t  *-*-sysv4*uw2*) add_dir=\"-L$dir\" ;;\n\t\t  *-*-sysv5OpenUNIX* | *-*-sysv5UnixWare7.[01].[10]* | \\\n\t\t    *-*-unixware7*) add_dir=\"-L$dir\" ;;\n\t\t  *-*-darwin* )\n\t\t    # if the lib is a (non-dlopened) module then we can not\n\t\t    # link against it, someone is ignoring the earlier warnings\n\t\t    if /usr/bin/file -L $add 2> /dev/null |\n\t\t\t $GREP \": [^:]* bundle\" >/dev/null ; then\n\t\t      if test \"X$dlopenmodule\" != \"X$lib\"; then\n\t\t\t$ECHO \"*** Warning: lib $linklib is a module, not a shared library\"\n\t\t\tif test -z \"$old_library\" ; then\n\t\t\t  echo\n\t\t\t  echo \"*** And there doesn't seem to be a static archive available\"\n\t\t\t  echo \"*** The link will probably fail, sorry\"\n\t\t\telse\n\t\t\t  add=\"$dir/$old_library\"\n\t\t\tfi\n\t\t      elif test -n \"$old_library\"; then\n\t\t\tadd=\"$dir/$old_library\"\n\t\t      fi\n\t\t    fi\n\t\tesac\n\t      elif test \"$hardcode_minus_L\" = no; then\n\t\tcase $host in\n\t\t*-*-sunos*) add_shlibpath=\"$dir\" ;;\n\t\tesac\n\t\tadd_dir=\"-L$dir\"\n\t\tadd=\"-l$name\"\n\t      elif test \"$hardcode_shlibpath_var\" = no; then\n\t\tadd_shlibpath=\"$dir\"\n\t\tadd=\"-l$name\"\n\t      else\n\t\tlib_linked=no\n\t      fi\n\t      ;;\n\t    relink)\n\t      if test \"$hardcode_direct\" = yes &&\n\t         test \"$hardcode_direct_absolute\" = no; then\n\t\tadd=\"$dir/$linklib\"\n\t      elif test \"$hardcode_minus_L\" = yes; then\n\t\tadd_dir=\"-L$absdir\"\n\t\t# Try looking first in the location we're being installed to.\n\t\tif test -n \"$inst_prefix_dir\"; then\n\t\t  case $libdir in\n\t\t    [\\\\/]*)\n\t\t      func_append add_dir \" -L$inst_prefix_dir$libdir\"\n\t\t      ;;\n\t\t  esac\n\t\tfi\n\t\tadd=\"-l$name\"\n\t      elif test \"$hardcode_shlibpath_var\" = yes; then\n\t\tadd_shlibpath=\"$dir\"\n\t\tadd=\"-l$name\"\n\t      else\n\t\tlib_linked=no\n\t      fi\n\t      ;;\n\t    *) lib_linked=no ;;\n\t    esac\n\n\t    if test \"$lib_linked\" != yes; then\n\t      func_fatal_configuration \"unsupported hardcode properties\"\n\t    fi\n\n\t    if test -n \"$add_shlibpath\"; then\n\t      case :$compile_shlibpath: in\n\t      *\":$add_shlibpath:\"*) ;;\n\t      *) func_append compile_shlibpath \"$add_shlibpath:\" ;;\n\t      esac\n\t    fi\n\t    if test \"$linkmode\" = prog; then\n\t      test -n \"$add_dir\" && compile_deplibs=\"$add_dir $compile_deplibs\"\n\t      test -n \"$add\" && compile_deplibs=\"$add $compile_deplibs\"\n\t    else\n\t      test -n \"$add_dir\" && deplibs=\"$add_dir $deplibs\"\n\t      test -n \"$add\" && deplibs=\"$add $deplibs\"\n\t      if test \"$hardcode_direct\" != yes &&\n\t\t test \"$hardcode_minus_L\" != yes &&\n\t\t test \"$hardcode_shlibpath_var\" = yes; then\n\t\tcase :$finalize_shlibpath: in\n\t\t*\":$libdir:\"*) ;;\n\t\t*) func_append finalize_shlibpath \"$libdir:\" ;;\n\t\tesac\n\t      fi\n\t    fi\n\t  fi\n\n\t  if test \"$linkmode\" = prog || test \"$opt_mode\" = relink; then\n\t    add_shlibpath=\n\t    add_dir=\n\t    add=\n\t    # Finalize command for both is simple: just hardcode it.\n\t    if test \"$hardcode_direct\" = yes &&\n\t       test \"$hardcode_direct_absolute\" = no; then\n\t      add=\"$libdir/$linklib\"\n\t    elif test \"$hardcode_minus_L\" = yes; then\n\t      add_dir=\"-L$libdir\"\n\t      add=\"-l$name\"\n\t    elif test \"$hardcode_shlibpath_var\" = yes; then\n\t      case :$finalize_shlibpath: in\n\t      *\":$libdir:\"*) ;;\n\t      *) func_append finalize_shlibpath \"$libdir:\" ;;\n\t      esac\n\t      add=\"-l$name\"\n\t    elif test \"$hardcode_automatic\" = yes; then\n\t      if test -n \"$inst_prefix_dir\" &&\n\t\t test -f \"$inst_prefix_dir$libdir/$linklib\" ; then\n\t\tadd=\"$inst_prefix_dir$libdir/$linklib\"\n\t      else\n\t\tadd=\"$libdir/$linklib\"\n\t      fi\n\t    else\n\t      # We cannot seem to hardcode it, guess we'll fake it.\n\t      add_dir=\"-L$libdir\"\n\t      # Try looking first in the location we're being installed to.\n\t      if test -n \"$inst_prefix_dir\"; then\n\t\tcase $libdir in\n\t\t  [\\\\/]*)\n\t\t    func_append add_dir \" -L$inst_prefix_dir$libdir\"\n\t\t    ;;\n\t\tesac\n\t      fi\n\t      add=\"-l$name\"\n\t    fi\n\n\t    if test \"$linkmode\" = prog; then\n\t      test -n \"$add_dir\" && finalize_deplibs=\"$add_dir $finalize_deplibs\"\n\t      test -n \"$add\" && finalize_deplibs=\"$add $finalize_deplibs\"\n\t    else\n\t      test -n \"$add_dir\" && deplibs=\"$add_dir $deplibs\"\n\t      test -n \"$add\" && deplibs=\"$add $deplibs\"\n\t    fi\n\t  fi\n\telif test \"$linkmode\" = prog; then\n\t  # Here we assume that one of hardcode_direct or hardcode_minus_L\n\t  # is not unsupported.  This is valid on all known static and\n\t  # shared platforms.\n\t  if test \"$hardcode_direct\" != unsupported; then\n\t    test -n \"$old_library\" && linklib=\"$old_library\"\n\t    compile_deplibs=\"$dir/$linklib $compile_deplibs\"\n\t    finalize_deplibs=\"$dir/$linklib $finalize_deplibs\"\n\t  else\n\t    compile_deplibs=\"-l$name -L$dir $compile_deplibs\"\n\t    finalize_deplibs=\"-l$name -L$dir $finalize_deplibs\"\n\t  fi\n\telif test \"$build_libtool_libs\" = yes; then\n\t  # Not a shared library\n\t  if test \"$deplibs_check_method\" != pass_all; then\n\t    # We're trying link a shared library against a static one\n\t    # but the system doesn't support it.\n\n\t    # Just print a warning and add the library to dependency_libs so\n\t    # that the program can be linked against the static library.\n\t    echo\n\t    $ECHO \"*** Warning: This system can not link to static lib archive $lib.\"\n\t    echo \"*** I have the capability to make that library automatically link in when\"\n\t    echo \"*** you link to this library.  But I can only do this if you have a\"\n\t    echo \"*** shared version of the library, which you do not appear to have.\"\n\t    if test \"$module\" = yes; then\n\t      echo \"*** But as you try to build a module library, libtool will still create \"\n\t      echo \"*** a static module, that should work as long as the dlopening application\"\n\t      echo \"*** is linked with the -dlopen flag to resolve symbols at runtime.\"\n\t      if test -z \"$global_symbol_pipe\"; then\n\t\techo\n\t\techo \"*** However, this would only work if libtool was able to extract symbol\"\n\t\techo \"*** lists from a program, using \\`nm' or equivalent, but libtool could\"\n\t\techo \"*** not find such a program.  So, this module is probably useless.\"\n\t\techo \"*** \\`nm' from GNU binutils and a full rebuild may help.\"\n\t      fi\n\t      if test \"$build_old_libs\" = no; then\n\t\tbuild_libtool_libs=module\n\t\tbuild_old_libs=yes\n\t      else\n\t\tbuild_libtool_libs=no\n\t      fi\n\t    fi\n\t  else\n\t    deplibs=\"$dir/$old_library $deplibs\"\n\t    link_static=yes\n\t  fi\n\tfi # link shared/static library?\n\n\tif test \"$linkmode\" = lib; then\n\t  if test -n \"$dependency_libs\" &&\n\t     { test \"$hardcode_into_libs\" != yes ||\n\t       test \"$build_old_libs\" = yes ||\n\t       test \"$link_static\" = yes; }; then\n\t    # Extract -R from dependency_libs\n\t    temp_deplibs=\n\t    for libdir in $dependency_libs; do\n\t      case $libdir in\n\t      -R*) func_stripname '-R' '' \"$libdir\"\n\t           temp_xrpath=$func_stripname_result\n\t\t   case \" $xrpath \" in\n\t\t   *\" $temp_xrpath \"*) ;;\n\t\t   *) func_append xrpath \" $temp_xrpath\";;\n\t\t   esac;;\n\t      *) func_append temp_deplibs \" $libdir\";;\n\t      esac\n\t    done\n\t    dependency_libs=\"$temp_deplibs\"\n\t  fi\n\n\t  func_append newlib_search_path \" $absdir\"\n\t  # Link against this library\n\t  test \"$link_static\" = no && newdependency_libs=\"$abs_ladir/$laname $newdependency_libs\"\n\t  # ... and its dependency_libs\n\t  tmp_libs=\n\t  for deplib in $dependency_libs; do\n\t    newdependency_libs=\"$deplib $newdependency_libs\"\n\t    case $deplib in\n              -L*) func_stripname '-L' '' \"$deplib\"\n                   func_resolve_sysroot \"$func_stripname_result\";;\n              *) func_resolve_sysroot \"$deplib\" ;;\n            esac\n\t    if $opt_preserve_dup_deps ; then\n\t      case \"$tmp_libs \" in\n\t      *\" $func_resolve_sysroot_result \"*)\n                func_append specialdeplibs \" $func_resolve_sysroot_result\" ;;\n\t      esac\n\t    fi\n\t    func_append tmp_libs \" $func_resolve_sysroot_result\"\n\t  done\n\n\t  if test \"$link_all_deplibs\" != no; then\n\t    # Add the search paths of all dependency libraries\n\t    for deplib in $dependency_libs; do\n\t      path=\n\t      case $deplib in\n\t      -L*) path=\"$deplib\" ;;\n\t      *.la)\n\t        func_resolve_sysroot \"$deplib\"\n\t        deplib=$func_resolve_sysroot_result\n\t        func_dirname \"$deplib\" \"\" \".\"\n\t\tdir=$func_dirname_result\n\t\t# We need an absolute path.\n\t\tcase $dir in\n\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) absdir=\"$dir\" ;;\n\t\t*)\n\t\t  absdir=`cd \"$dir\" && pwd`\n\t\t  if test -z \"$absdir\"; then\n\t\t    func_warning \"cannot determine absolute directory name of \\`$dir'\"\n\t\t    absdir=\"$dir\"\n\t\t  fi\n\t\t  ;;\n\t\tesac\n\t\tif $GREP \"^installed=no\" $deplib > /dev/null; then\n\t\tcase $host in\n\t\t*-*-darwin*)\n\t\t  depdepl=\n\t\t  eval deplibrary_names=`${SED} -n -e 's/^library_names=\\(.*\\)$/\\1/p' $deplib`\n\t\t  if test -n \"$deplibrary_names\" ; then\n\t\t    for tmp in $deplibrary_names ; do\n\t\t      depdepl=$tmp\n\t\t    done\n\t\t    if test -f \"$absdir/$objdir/$depdepl\" ; then\n\t\t      depdepl=\"$absdir/$objdir/$depdepl\"\n\t\t      darwin_install_name=`${OTOOL} -L $depdepl | awk '{if (NR == 2) {print $1;exit}}'`\n                      if test -z \"$darwin_install_name\"; then\n                          darwin_install_name=`${OTOOL64} -L $depdepl  | awk '{if (NR == 2) {print $1;exit}}'`\n                      fi\n\t\t      func_append compiler_flags \" ${wl}-dylib_file ${wl}${darwin_install_name}:${depdepl}\"\n\t\t      func_append linker_flags \" -dylib_file ${darwin_install_name}:${depdepl}\"\n\t\t      path=\n\t\t    fi\n\t\t  fi\n\t\t  ;;\n\t\t*)\n\t\t  path=\"-L$absdir/$objdir\"\n\t\t  ;;\n\t\tesac\n\t\telse\n\t\t  eval libdir=`${SED} -n -e 's/^libdir=\\(.*\\)$/\\1/p' $deplib`\n\t\t  test -z \"$libdir\" && \\\n\t\t    func_fatal_error \"\\`$deplib' is not a valid libtool archive\"\n\t\t  test \"$absdir\" != \"$libdir\" && \\\n\t\t    func_warning \"\\`$deplib' seems to be moved\"\n\n\t\t  path=\"-L$absdir\"\n\t\tfi\n\t\t;;\n\t      esac\n\t      case \" $deplibs \" in\n\t      *\" $path \"*) ;;\n\t      *) deplibs=\"$path $deplibs\" ;;\n\t      esac\n\t    done\n\t  fi # link_all_deplibs != no\n\tfi # linkmode = lib\n      done # for deplib in $libs\n      if test \"$pass\" = link; then\n\tif test \"$linkmode\" = \"prog\"; then\n\t  compile_deplibs=\"$new_inherited_linker_flags $compile_deplibs\"\n\t  finalize_deplibs=\"$new_inherited_linker_flags $finalize_deplibs\"\n\telse\n\t  compiler_flags=\"$compiler_flags \"`$ECHO \" $new_inherited_linker_flags\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\tfi\n      fi\n      dependency_libs=\"$newdependency_libs\"\n      if test \"$pass\" = dlpreopen; then\n\t# Link the dlpreopened libraries before other libraries\n\tfor deplib in $save_deplibs; do\n\t  deplibs=\"$deplib $deplibs\"\n\tdone\n      fi\n      if test \"$pass\" != dlopen; then\n\tif test \"$pass\" != conv; then\n\t  # Make sure lib_search_path contains only unique directories.\n\t  lib_search_path=\n\t  for dir in $newlib_search_path; do\n\t    case \"$lib_search_path \" in\n\t    *\" $dir \"*) ;;\n\t    *) func_append lib_search_path \" $dir\" ;;\n\t    esac\n\t  done\n\t  newlib_search_path=\n\tfi\n\n\tif test \"$linkmode,$pass\" != \"prog,link\"; then\n\t  vars=\"deplibs\"\n\telse\n\t  vars=\"compile_deplibs finalize_deplibs\"\n\tfi\n\tfor var in $vars dependency_libs; do\n\t  # Add libraries to $var in reverse order\n\t  eval tmp_libs=\\\"\\$$var\\\"\n\t  new_libs=\n\t  for deplib in $tmp_libs; do\n\t    # FIXME: Pedantically, this is the right thing to do, so\n\t    #        that some nasty dependency loop isn't accidentally\n\t    #        broken:\n\t    #new_libs=\"$deplib $new_libs\"\n\t    # Pragmatically, this seems to cause very few problems in\n\t    # practice:\n\t    case $deplib in\n\t    -L*) new_libs=\"$deplib $new_libs\" ;;\n\t    -R*) ;;\n\t    *)\n\t      # And here is the reason: when a library appears more\n\t      # than once as an explicit dependence of a library, or\n\t      # is implicitly linked in more than once by the\n\t      # compiler, it is considered special, and multiple\n\t      # occurrences thereof are not removed.  Compare this\n\t      # with having the same library being listed as a\n\t      # dependency of multiple other libraries: in this case,\n\t      # we know (pedantically, we assume) the library does not\n\t      # need to be listed more than once, so we keep only the\n\t      # last copy.  This is not always right, but it is rare\n\t      # enough that we require users that really mean to play\n\t      # such unportable linking tricks to link the library\n\t      # using -Wl,-lname, so that libtool does not consider it\n\t      # for duplicate removal.\n\t      case \" $specialdeplibs \" in\n\t      *\" $deplib \"*) new_libs=\"$deplib $new_libs\" ;;\n\t      *)\n\t\tcase \" $new_libs \" in\n\t\t*\" $deplib \"*) ;;\n\t\t*) new_libs=\"$deplib $new_libs\" ;;\n\t\tesac\n\t\t;;\n\t      esac\n\t      ;;\n\t    esac\n\t  done\n\t  tmp_libs=\n\t  for deplib in $new_libs; do\n\t    case $deplib in\n\t    -L*)\n\t      case \" $tmp_libs \" in\n\t      *\" $deplib \"*) ;;\n\t      *) func_append tmp_libs \" $deplib\" ;;\n\t      esac\n\t      ;;\n\t    *) func_append tmp_libs \" $deplib\" ;;\n\t    esac\n\t  done\n\t  eval $var=\\\"$tmp_libs\\\"\n\tdone # for var\n      fi\n      # Last step: remove runtime libs from dependency_libs\n      # (they stay in deplibs)\n      tmp_libs=\n      for i in $dependency_libs ; do\n\tcase \" $predeps $postdeps $compiler_lib_search_path \" in\n\t*\" $i \"*)\n\t  i=\"\"\n\t  ;;\n\tesac\n\tif test -n \"$i\" ; then\n\t  func_append tmp_libs \" $i\"\n\tfi\n      done\n      dependency_libs=$tmp_libs\n    done # for pass\n    if test \"$linkmode\" = prog; then\n      dlfiles=\"$newdlfiles\"\n    fi\n    if test \"$linkmode\" = prog || test \"$linkmode\" = lib; then\n      dlprefiles=\"$newdlprefiles\"\n    fi\n\n    case $linkmode in\n    oldlib)\n      if test -n \"$dlfiles$dlprefiles\" || test \"$dlself\" != no; then\n\tfunc_warning \"\\`-dlopen' is ignored for archives\"\n      fi\n\n      case \" $deplibs\" in\n      *\\ -l* | *\\ -L*)\n\tfunc_warning \"\\`-l' and \\`-L' are ignored for archives\" ;;\n      esac\n\n      test -n \"$rpath\" && \\\n\tfunc_warning \"\\`-rpath' is ignored for archives\"\n\n      test -n \"$xrpath\" && \\\n\tfunc_warning \"\\`-R' is ignored for archives\"\n\n      test -n \"$vinfo\" && \\\n\tfunc_warning \"\\`-version-info/-version-number' is ignored for archives\"\n\n      test -n \"$release\" && \\\n\tfunc_warning \"\\`-release' is ignored for archives\"\n\n      test -n \"$export_symbols$export_symbols_regex\" && \\\n\tfunc_warning \"\\`-export-symbols' is ignored for archives\"\n\n      # Now set the variables for building old libraries.\n      build_libtool_libs=no\n      oldlibs=\"$output\"\n      func_append objs \"$old_deplibs\"\n      ;;\n\n    lib)\n      # Make sure we only generate libraries of the form `libNAME.la'.\n      case $outputname in\n      lib*)\n\tfunc_stripname 'lib' '.la' \"$outputname\"\n\tname=$func_stripname_result\n\teval shared_ext=\\\"$shrext_cmds\\\"\n\teval libname=\\\"$libname_spec\\\"\n\t;;\n      *)\n\ttest \"$module\" = no && \\\n\t  func_fatal_help \"libtool library \\`$output' must begin with \\`lib'\"\n\n\tif test \"$need_lib_prefix\" != no; then\n\t  # Add the \"lib\" prefix for modules if required\n\t  func_stripname '' '.la' \"$outputname\"\n\t  name=$func_stripname_result\n\t  eval shared_ext=\\\"$shrext_cmds\\\"\n\t  eval libname=\\\"$libname_spec\\\"\n\telse\n\t  func_stripname '' '.la' \"$outputname\"\n\t  libname=$func_stripname_result\n\tfi\n\t;;\n      esac\n\n      if test -n \"$objs\"; then\n\tif test \"$deplibs_check_method\" != pass_all; then\n\t  func_fatal_error \"cannot build libtool library \\`$output' from non-libtool objects on this host:$objs\"\n\telse\n\t  echo\n\t  $ECHO \"*** Warning: Linking the shared library $output against the non-libtool\"\n\t  $ECHO \"*** objects $objs is not portable!\"\n\t  func_append libobjs \" $objs\"\n\tfi\n      fi\n\n      test \"$dlself\" != no && \\\n\tfunc_warning \"\\`-dlopen self' is ignored for libtool libraries\"\n\n      set dummy $rpath\n      shift\n      test \"$#\" -gt 1 && \\\n\tfunc_warning \"ignoring multiple \\`-rpath's for a libtool library\"\n\n      install_libdir=\"$1\"\n\n      oldlibs=\n      if test -z \"$rpath\"; then\n\tif test \"$build_libtool_libs\" = yes; then\n\t  # Building a libtool convenience library.\n\t  # Some compilers have problems with a `.al' extension so\n\t  # convenience libraries should have the same extension an\n\t  # archive normally would.\n\t  oldlibs=\"$output_objdir/$libname.$libext $oldlibs\"\n\t  build_libtool_libs=convenience\n\t  build_old_libs=yes\n\tfi\n\n\ttest -n \"$vinfo\" && \\\n\t  func_warning \"\\`-version-info/-version-number' is ignored for convenience libraries\"\n\n\ttest -n \"$release\" && \\\n\t  func_warning \"\\`-release' is ignored for convenience libraries\"\n      else\n\n\t# Parse the version information argument.\n\tsave_ifs=\"$IFS\"; IFS=':'\n\tset dummy $vinfo 0 0 0\n\tshift\n\tIFS=\"$save_ifs\"\n\n\ttest -n \"$7\" && \\\n\t  func_fatal_help \"too many parameters to \\`-version-info'\"\n\n\t# convert absolute version numbers to libtool ages\n\t# this retains compatibility with .la files and attempts\n\t# to make the code below a bit more comprehensible\n\n\tcase $vinfo_number in\n\tyes)\n\t  number_major=\"$1\"\n\t  number_minor=\"$2\"\n\t  number_revision=\"$3\"\n\t  #\n\t  # There are really only two kinds -- those that\n\t  # use the current revision as the major version\n\t  # and those that subtract age and use age as\n\t  # a minor version.  But, then there is irix\n\t  # which has an extra 1 added just for fun\n\t  #\n\t  case $version_type in\n\t  # correct linux to gnu/linux during the next big refactor\n\t  darwin|linux|osf|windows|none)\n\t    func_arith $number_major + $number_minor\n\t    current=$func_arith_result\n\t    age=\"$number_minor\"\n\t    revision=\"$number_revision\"\n\t    ;;\n\t  freebsd-aout|freebsd-elf|qnx|sunos)\n\t    current=\"$number_major\"\n\t    revision=\"$number_minor\"\n\t    age=\"0\"\n\t    ;;\n\t  irix|nonstopux)\n\t    func_arith $number_major + $number_minor\n\t    current=$func_arith_result\n\t    age=\"$number_minor\"\n\t    revision=\"$number_minor\"\n\t    lt_irix_increment=no\n\t    ;;\n\t  esac\n\t  ;;\n\tno)\n\t  current=\"$1\"\n\t  revision=\"$2\"\n\t  age=\"$3\"\n\t  ;;\n\tesac\n\n\t# Check that each of the things are valid numbers.\n\tcase $current in\n\t0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]) ;;\n\t*)\n\t  func_error \"CURRENT \\`$current' must be a nonnegative integer\"\n\t  func_fatal_error \"\\`$vinfo' is not valid version information\"\n\t  ;;\n\tesac\n\n\tcase $revision in\n\t0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]) ;;\n\t*)\n\t  func_error \"REVISION \\`$revision' must be a nonnegative integer\"\n\t  func_fatal_error \"\\`$vinfo' is not valid version information\"\n\t  ;;\n\tesac\n\n\tcase $age in\n\t0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]) ;;\n\t*)\n\t  func_error \"AGE \\`$age' must be a nonnegative integer\"\n\t  func_fatal_error \"\\`$vinfo' is not valid version information\"\n\t  ;;\n\tesac\n\n\tif test \"$age\" -gt \"$current\"; then\n\t  func_error \"AGE \\`$age' is greater than the current interface number \\`$current'\"\n\t  func_fatal_error \"\\`$vinfo' is not valid version information\"\n\tfi\n\n\t# Calculate the version variables.\n\tmajor=\n\tversuffix=\n\tverstring=\n\tcase $version_type in\n\tnone) ;;\n\n\tdarwin)\n\t  # Like Linux, but with the current version available in\n\t  # verstring for coding it into the library header\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=\"$major.$age.$revision\"\n\t  # Darwin ld doesn't like 0 for these options...\n\t  func_arith $current + 1\n\t  minor_current=$func_arith_result\n\t  xlcverstring=\"${wl}-compatibility_version ${wl}$minor_current ${wl}-current_version ${wl}$minor_current.$revision\"\n\t  verstring=\"-compatibility_version $minor_current -current_version $minor_current.$revision\"\n\t  ;;\n\n\tfreebsd-aout)\n\t  major=\".$current\"\n\t  versuffix=\".$current.$revision\";\n\t  ;;\n\n\tfreebsd-elf)\n\t  major=\".$current\"\n\t  versuffix=\".$current\"\n\t  ;;\n\n\tirix | nonstopux)\n\t  if test \"X$lt_irix_increment\" = \"Xno\"; then\n\t    func_arith $current - $age\n\t  else\n\t    func_arith $current - $age + 1\n\t  fi\n\t  major=$func_arith_result\n\n\t  case $version_type in\n\t    nonstopux) verstring_prefix=nonstopux ;;\n\t    *)         verstring_prefix=sgi ;;\n\t  esac\n\t  verstring=\"$verstring_prefix$major.$revision\"\n\n\t  # Add in all the interfaces that we are compatible with.\n\t  loop=$revision\n\t  while test \"$loop\" -ne 0; do\n\t    func_arith $revision - $loop\n\t    iface=$func_arith_result\n\t    func_arith $loop - 1\n\t    loop=$func_arith_result\n\t    verstring=\"$verstring_prefix$major.$iface:$verstring\"\n\t  done\n\n\t  # Before this point, $major must not contain `.'.\n\t  major=.$major\n\t  versuffix=\"$major.$revision\"\n\t  ;;\n\n\tlinux) # correct to gnu/linux during the next big refactor\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=\"$major.$age.$revision\"\n\t  ;;\n\n\tosf)\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=\".$current.$age.$revision\"\n\t  verstring=\"$current.$age.$revision\"\n\n\t  # Add in all the interfaces that we are compatible with.\n\t  loop=$age\n\t  while test \"$loop\" -ne 0; do\n\t    func_arith $current - $loop\n\t    iface=$func_arith_result\n\t    func_arith $loop - 1\n\t    loop=$func_arith_result\n\t    verstring=\"$verstring:${iface}.0\"\n\t  done\n\n\t  # Make executables depend on our current version.\n\t  func_append verstring \":${current}.0\"\n\t  ;;\n\n\tqnx)\n\t  major=\".$current\"\n\t  versuffix=\".$current\"\n\t  ;;\n\n\tsunos)\n\t  major=\".$current\"\n\t  versuffix=\".$current.$revision\"\n\t  ;;\n\n\twindows)\n\t  # Use '-' rather than '.', since we only want one\n\t  # extension on DOS 8.3 filesystems.\n\t  func_arith $current - $age\n\t  major=$func_arith_result\n\t  versuffix=\"-$major\"\n\t  ;;\n\n\t*)\n\t  func_fatal_configuration \"unknown library version type \\`$version_type'\"\n\t  ;;\n\tesac\n\n\t# Clear the version info if we defaulted, and they specified a release.\n\tif test -z \"$vinfo\" && test -n \"$release\"; then\n\t  major=\n\t  case $version_type in\n\t  darwin)\n\t    # we can't check for \"0.0\" in archive_cmds due to quoting\n\t    # problems, so we reset it completely\n\t    verstring=\n\t    ;;\n\t  *)\n\t    verstring=\"0.0\"\n\t    ;;\n\t  esac\n\t  if test \"$need_version\" = no; then\n\t    versuffix=\n\t  else\n\t    versuffix=\".0.0\"\n\t  fi\n\tfi\n\n\t# Remove version info from name if versioning should be avoided\n\tif test \"$avoid_version\" = yes && test \"$need_version\" = no; then\n\t  major=\n\t  versuffix=\n\t  verstring=\"\"\n\tfi\n\n\t# Check to see if the archive will have undefined symbols.\n\tif test \"$allow_undefined\" = yes; then\n\t  if test \"$allow_undefined_flag\" = unsupported; then\n\t    func_warning \"undefined symbols not allowed in $host shared libraries\"\n\t    build_libtool_libs=no\n\t    build_old_libs=yes\n\t  fi\n\telse\n\t  # Don't allow undefined symbols.\n\t  allow_undefined_flag=\"$no_undefined_flag\"\n\tfi\n\n      fi\n\n      func_generate_dlsyms \"$libname\" \"$libname\" \"yes\"\n      func_append libobjs \" $symfileobj\"\n      test \"X$libobjs\" = \"X \" && libobjs=\n\n      if test \"$opt_mode\" != relink; then\n\t# Remove our outputs, but don't remove object files since they\n\t# may have been created when compiling PIC objects.\n\tremovelist=\n\ttempremovelist=`$ECHO \"$output_objdir/*\"`\n\tfor p in $tempremovelist; do\n\t  case $p in\n\t    *.$objext | *.gcno)\n\t       ;;\n\t    $output_objdir/$outputname | $output_objdir/$libname.* | $output_objdir/${libname}${release}.*)\n\t       if test \"X$precious_files_regex\" != \"X\"; then\n\t\t if $ECHO \"$p\" | $EGREP -e \"$precious_files_regex\" >/dev/null 2>&1\n\t\t then\n\t\t   continue\n\t\t fi\n\t       fi\n\t       func_append removelist \" $p\"\n\t       ;;\n\t    *) ;;\n\t  esac\n\tdone\n\ttest -n \"$removelist\" && \\\n\t  func_show_eval \"${RM}r \\$removelist\"\n      fi\n\n      # Now set the variables for building old libraries.\n      if test \"$build_old_libs\" = yes && test \"$build_libtool_libs\" != convenience ; then\n\tfunc_append oldlibs \" $output_objdir/$libname.$libext\"\n\n\t# Transform .lo files to .o files.\n\toldobjs=\"$objs \"`$ECHO \"$libobjs\" | $SP2NL | $SED \"/\\.${libext}$/d; $lo2o\" | $NL2SP`\n      fi\n\n      # Eliminate all temporary directories.\n      #for path in $notinst_path; do\n      #\tlib_search_path=`$ECHO \"$lib_search_path \" | $SED \"s% $path % %g\"`\n      #\tdeplibs=`$ECHO \"$deplibs \" | $SED \"s% -L$path % %g\"`\n      #\tdependency_libs=`$ECHO \"$dependency_libs \" | $SED \"s% -L$path % %g\"`\n      #done\n\n      if test -n \"$xrpath\"; then\n\t# If the user specified any rpath flags, then add them.\n\ttemp_xrpath=\n\tfor libdir in $xrpath; do\n\t  func_replace_sysroot \"$libdir\"\n\t  func_append temp_xrpath \" -R$func_replace_sysroot_result\"\n\t  case \"$finalize_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append finalize_rpath \" $libdir\" ;;\n\t  esac\n\tdone\n\tif test \"$hardcode_into_libs\" != yes || test \"$build_old_libs\" = yes; then\n\t  dependency_libs=\"$temp_xrpath $dependency_libs\"\n\tfi\n      fi\n\n      # Make sure dlfiles contains only unique files that won't be dlpreopened\n      old_dlfiles=\"$dlfiles\"\n      dlfiles=\n      for lib in $old_dlfiles; do\n\tcase \" $dlprefiles $dlfiles \" in\n\t*\" $lib \"*) ;;\n\t*) func_append dlfiles \" $lib\" ;;\n\tesac\n      done\n\n      # Make sure dlprefiles contains only unique files\n      old_dlprefiles=\"$dlprefiles\"\n      dlprefiles=\n      for lib in $old_dlprefiles; do\n\tcase \"$dlprefiles \" in\n\t*\" $lib \"*) ;;\n\t*) func_append dlprefiles \" $lib\" ;;\n\tesac\n      done\n\n      if test \"$build_libtool_libs\" = yes; then\n\tif test -n \"$rpath\"; then\n\t  case $host in\n\t  *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-*-beos* | *-cegcc* | *-*-haiku*)\n\t    # these systems don't actually have a c library (as such)!\n\t    ;;\n\t  *-*-rhapsody* | *-*-darwin1.[012])\n\t    # Rhapsody C library is in the System framework\n\t    func_append deplibs \" System.ltframework\"\n\t    ;;\n\t  *-*-netbsd*)\n\t    # Don't link with libc until the a.out ld.so is fixed.\n\t    ;;\n\t  *-*-openbsd* | *-*-freebsd* | *-*-dragonfly*)\n\t    # Do not include libc due to us having libc/libc_r.\n\t    ;;\n\t  *-*-sco3.2v5* | *-*-sco5v6*)\n\t    # Causes problems with __ctype\n\t    ;;\n\t  *-*-sysv4.2uw2* | *-*-sysv5* | *-*-unixware* | *-*-OpenUNIX*)\n\t    # Compiler inserts libc in the correct place for threads to work\n\t    ;;\n\t  *)\n\t    # Add libc to deplibs on all other systems if necessary.\n\t    if test \"$build_libtool_need_lc\" = \"yes\"; then\n\t      func_append deplibs \" -lc\"\n\t    fi\n\t    ;;\n\t  esac\n\tfi\n\n\t# Transform deplibs into only deplibs that can be linked in shared.\n\tname_save=$name\n\tlibname_save=$libname\n\trelease_save=$release\n\tversuffix_save=$versuffix\n\tmajor_save=$major\n\t# I'm not sure if I'm treating the release correctly.  I think\n\t# release should show up in the -l (ie -lgmp5) so we don't want to\n\t# add it in twice.  Is that correct?\n\trelease=\"\"\n\tversuffix=\"\"\n\tmajor=\"\"\n\tnewdeplibs=\n\tdroppeddeps=no\n\tcase $deplibs_check_method in\n\tpass_all)\n\t  # Don't check for shared/static.  Everything works.\n\t  # This might be a little naive.  We might want to check\n\t  # whether the library exists or not.  But this is on\n\t  # osf3 & osf4 and I'm not really sure... Just\n\t  # implementing what was already the behavior.\n\t  newdeplibs=$deplibs\n\t  ;;\n\ttest_compile)\n\t  # This code stresses the \"libraries are programs\" paradigm to its\n\t  # limits. Maybe even breaks it.  We compile a program, linking it\n\t  # against the deplibs as a proxy for the library.  Then we can check\n\t  # whether they linked in statically or dynamically with ldd.\n\t  $opt_dry_run || $RM conftest.c\n\t  cat > conftest.c <<EOF\n\t  int main() { return 0; }\nEOF\n\t  $opt_dry_run || $RM conftest\n\t  if $LTCC $LTCFLAGS -o conftest conftest.c $deplibs; then\n\t    ldd_output=`ldd conftest`\n\t    for i in $deplibs; do\n\t      case $i in\n\t      -l*)\n\t\tfunc_stripname -l '' \"$i\"\n\t\tname=$func_stripname_result\n\t\tif test \"X$allow_libtool_libs_with_static_runtimes\" = \"Xyes\" ; then\n\t\t  case \" $predeps $postdeps \" in\n\t\t  *\" $i \"*)\n\t\t    func_append newdeplibs \" $i\"\n\t\t    i=\"\"\n\t\t    ;;\n\t\t  esac\n\t\tfi\n\t\tif test -n \"$i\" ; then\n\t\t  libname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\t  deplib_matches=`eval \"\\\\$ECHO \\\"$library_names_spec\\\"\"`\n\t\t  set dummy $deplib_matches; shift\n\t\t  deplib_match=$1\n\t\t  if test `expr \"$ldd_output\" : \".*$deplib_match\"` -ne 0 ; then\n\t\t    func_append newdeplibs \" $i\"\n\t\t  else\n\t\t    droppeddeps=yes\n\t\t    echo\n\t\t    $ECHO \"*** Warning: dynamic linker does not accept needed library $i.\"\n\t\t    echo \"*** I have the capability to make that library automatically link in when\"\n\t\t    echo \"*** you link to this library.  But I can only do this if you have a\"\n\t\t    echo \"*** shared version of the library, which I believe you do not have\"\n\t\t    echo \"*** because a test_compile did reveal that the linker did not use it for\"\n\t\t    echo \"*** its dynamic dependency list that programs get resolved with at runtime.\"\n\t\t  fi\n\t\tfi\n\t\t;;\n\t      *)\n\t\tfunc_append newdeplibs \" $i\"\n\t\t;;\n\t      esac\n\t    done\n\t  else\n\t    # Error occurred in the first compile.  Let's try to salvage\n\t    # the situation: Compile a separate program for each library.\n\t    for i in $deplibs; do\n\t      case $i in\n\t      -l*)\n\t\tfunc_stripname -l '' \"$i\"\n\t\tname=$func_stripname_result\n\t\t$opt_dry_run || $RM conftest\n\t\tif $LTCC $LTCFLAGS -o conftest conftest.c $i; then\n\t\t  ldd_output=`ldd conftest`\n\t\t  if test \"X$allow_libtool_libs_with_static_runtimes\" = \"Xyes\" ; then\n\t\t    case \" $predeps $postdeps \" in\n\t\t    *\" $i \"*)\n\t\t      func_append newdeplibs \" $i\"\n\t\t      i=\"\"\n\t\t      ;;\n\t\t    esac\n\t\t  fi\n\t\t  if test -n \"$i\" ; then\n\t\t    libname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\t    deplib_matches=`eval \"\\\\$ECHO \\\"$library_names_spec\\\"\"`\n\t\t    set dummy $deplib_matches; shift\n\t\t    deplib_match=$1\n\t\t    if test `expr \"$ldd_output\" : \".*$deplib_match\"` -ne 0 ; then\n\t\t      func_append newdeplibs \" $i\"\n\t\t    else\n\t\t      droppeddeps=yes\n\t\t      echo\n\t\t      $ECHO \"*** Warning: dynamic linker does not accept needed library $i.\"\n\t\t      echo \"*** I have the capability to make that library automatically link in when\"\n\t\t      echo \"*** you link to this library.  But I can only do this if you have a\"\n\t\t      echo \"*** shared version of the library, which you do not appear to have\"\n\t\t      echo \"*** because a test_compile did reveal that the linker did not use this one\"\n\t\t      echo \"*** as a dynamic dependency that programs can get resolved with at runtime.\"\n\t\t    fi\n\t\t  fi\n\t\telse\n\t\t  droppeddeps=yes\n\t\t  echo\n\t\t  $ECHO \"*** Warning!  Library $i is needed by this library but I was not able to\"\n\t\t  echo \"*** make it link in!  You will probably need to install it or some\"\n\t\t  echo \"*** library that it depends on before this library will be fully\"\n\t\t  echo \"*** functional.  Installing it before continuing would be even better.\"\n\t\tfi\n\t\t;;\n\t      *)\n\t\tfunc_append newdeplibs \" $i\"\n\t\t;;\n\t      esac\n\t    done\n\t  fi\n\t  ;;\n\tfile_magic*)\n\t  set dummy $deplibs_check_method; shift\n\t  file_magic_regex=`expr \"$deplibs_check_method\" : \"$1 \\(.*\\)\"`\n\t  for a_deplib in $deplibs; do\n\t    case $a_deplib in\n\t    -l*)\n\t      func_stripname -l '' \"$a_deplib\"\n\t      name=$func_stripname_result\n\t      if test \"X$allow_libtool_libs_with_static_runtimes\" = \"Xyes\" ; then\n\t\tcase \" $predeps $postdeps \" in\n\t\t*\" $a_deplib \"*)\n\t\t  func_append newdeplibs \" $a_deplib\"\n\t\t  a_deplib=\"\"\n\t\t  ;;\n\t\tesac\n\t      fi\n\t      if test -n \"$a_deplib\" ; then\n\t\tlibname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\tif test -n \"$file_magic_glob\"; then\n\t\t  libnameglob=`func_echo_all \"$libname\" | $SED -e $file_magic_glob`\n\t\telse\n\t\t  libnameglob=$libname\n\t\tfi\n\t\ttest \"$want_nocaseglob\" = yes && nocaseglob=`shopt -p nocaseglob`\n\t\tfor i in $lib_search_path $sys_lib_search_path $shlib_search_path; do\n\t\t  if test \"$want_nocaseglob\" = yes; then\n\t\t    shopt -s nocaseglob\n\t\t    potential_libs=`ls $i/$libnameglob[.-]* 2>/dev/null`\n\t\t    $nocaseglob\n\t\t  else\n\t\t    potential_libs=`ls $i/$libnameglob[.-]* 2>/dev/null`\n\t\t  fi\n\t\t  for potent_lib in $potential_libs; do\n\t\t      # Follow soft links.\n\t\t      if ls -lLd \"$potent_lib\" 2>/dev/null |\n\t\t\t $GREP \" -> \" >/dev/null; then\n\t\t\tcontinue\n\t\t      fi\n\t\t      # The statement above tries to avoid entering an\n\t\t      # endless loop below, in case of cyclic links.\n\t\t      # We might still enter an endless loop, since a link\n\t\t      # loop can be closed while we follow links,\n\t\t      # but so what?\n\t\t      potlib=\"$potent_lib\"\n\t\t      while test -h \"$potlib\" 2>/dev/null; do\n\t\t\tpotliblink=`ls -ld $potlib | ${SED} 's/.* -> //'`\n\t\t\tcase $potliblink in\n\t\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) potlib=\"$potliblink\";;\n\t\t\t*) potlib=`$ECHO \"$potlib\" | $SED 's,[^/]*$,,'`\"$potliblink\";;\n\t\t\tesac\n\t\t      done\n\t\t      if eval $file_magic_cmd \\\"\\$potlib\\\" 2>/dev/null |\n\t\t\t $SED -e 10q |\n\t\t\t $EGREP \"$file_magic_regex\" > /dev/null; then\n\t\t\tfunc_append newdeplibs \" $a_deplib\"\n\t\t\ta_deplib=\"\"\n\t\t\tbreak 2\n\t\t      fi\n\t\t  done\n\t\tdone\n\t      fi\n\t      if test -n \"$a_deplib\" ; then\n\t\tdroppeddeps=yes\n\t\techo\n\t\t$ECHO \"*** Warning: linker path does not have real file for library $a_deplib.\"\n\t\techo \"*** I have the capability to make that library automatically link in when\"\n\t\techo \"*** you link to this library.  But I can only do this if you have a\"\n\t\techo \"*** shared version of the library, which you do not appear to have\"\n\t\techo \"*** because I did check the linker path looking for a file starting\"\n\t\tif test -z \"$potlib\" ; then\n\t\t  $ECHO \"*** with $libname but no candidates were found. (...for file magic test)\"\n\t\telse\n\t\t  $ECHO \"*** with $libname and none of the candidates passed a file format test\"\n\t\t  $ECHO \"*** using a file magic. Last file checked: $potlib\"\n\t\tfi\n\t      fi\n\t      ;;\n\t    *)\n\t      # Add a -L argument.\n\t      func_append newdeplibs \" $a_deplib\"\n\t      ;;\n\t    esac\n\t  done # Gone through all deplibs.\n\t  ;;\n\tmatch_pattern*)\n\t  set dummy $deplibs_check_method; shift\n\t  match_pattern_regex=`expr \"$deplibs_check_method\" : \"$1 \\(.*\\)\"`\n\t  for a_deplib in $deplibs; do\n\t    case $a_deplib in\n\t    -l*)\n\t      func_stripname -l '' \"$a_deplib\"\n\t      name=$func_stripname_result\n\t      if test \"X$allow_libtool_libs_with_static_runtimes\" = \"Xyes\" ; then\n\t\tcase \" $predeps $postdeps \" in\n\t\t*\" $a_deplib \"*)\n\t\t  func_append newdeplibs \" $a_deplib\"\n\t\t  a_deplib=\"\"\n\t\t  ;;\n\t\tesac\n\t      fi\n\t      if test -n \"$a_deplib\" ; then\n\t\tlibname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\tfor i in $lib_search_path $sys_lib_search_path $shlib_search_path; do\n\t\t  potential_libs=`ls $i/$libname[.-]* 2>/dev/null`\n\t\t  for potent_lib in $potential_libs; do\n\t\t    potlib=\"$potent_lib\" # see symlink-check above in file_magic test\n\t\t    if eval \"\\$ECHO \\\"$potent_lib\\\"\" 2>/dev/null | $SED 10q | \\\n\t\t       $EGREP \"$match_pattern_regex\" > /dev/null; then\n\t\t      func_append newdeplibs \" $a_deplib\"\n\t\t      a_deplib=\"\"\n\t\t      break 2\n\t\t    fi\n\t\t  done\n\t\tdone\n\t      fi\n\t      if test -n \"$a_deplib\" ; then\n\t\tdroppeddeps=yes\n\t\techo\n\t\t$ECHO \"*** Warning: linker path does not have real file for library $a_deplib.\"\n\t\techo \"*** I have the capability to make that library automatically link in when\"\n\t\techo \"*** you link to this library.  But I can only do this if you have a\"\n\t\techo \"*** shared version of the library, which you do not appear to have\"\n\t\techo \"*** because I did check the linker path looking for a file starting\"\n\t\tif test -z \"$potlib\" ; then\n\t\t  $ECHO \"*** with $libname but no candidates were found. (...for regex pattern test)\"\n\t\telse\n\t\t  $ECHO \"*** with $libname and none of the candidates passed a file format test\"\n\t\t  $ECHO \"*** using a regex pattern. Last file checked: $potlib\"\n\t\tfi\n\t      fi\n\t      ;;\n\t    *)\n\t      # Add a -L argument.\n\t      func_append newdeplibs \" $a_deplib\"\n\t      ;;\n\t    esac\n\t  done # Gone through all deplibs.\n\t  ;;\n\tnone | unknown | *)\n\t  newdeplibs=\"\"\n\t  tmp_deplibs=`$ECHO \" $deplibs\" | $SED 's/ -lc$//; s/ -[LR][^ ]*//g'`\n\t  if test \"X$allow_libtool_libs_with_static_runtimes\" = \"Xyes\" ; then\n\t    for i in $predeps $postdeps ; do\n\t      # can't use Xsed below, because $i might contain '/'\n\t      tmp_deplibs=`$ECHO \" $tmp_deplibs\" | $SED \"s,$i,,\"`\n\t    done\n\t  fi\n\t  case $tmp_deplibs in\n\t  *[!\\\t\\ ]*)\n\t    echo\n\t    if test \"X$deplibs_check_method\" = \"Xnone\"; then\n\t      echo \"*** Warning: inter-library dependencies are not supported in this platform.\"\n\t    else\n\t      echo \"*** Warning: inter-library dependencies are not known to be supported.\"\n\t    fi\n\t    echo \"*** All declared inter-library dependencies are being dropped.\"\n\t    droppeddeps=yes\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n\tversuffix=$versuffix_save\n\tmajor=$major_save\n\trelease=$release_save\n\tlibname=$libname_save\n\tname=$name_save\n\n\tcase $host in\n\t*-*-rhapsody* | *-*-darwin1.[012])\n\t  # On Rhapsody replace the C library with the System framework\n\t  newdeplibs=`$ECHO \" $newdeplibs\" | $SED 's/ -lc / System.ltframework /'`\n\t  ;;\n\tesac\n\n\tif test \"$droppeddeps\" = yes; then\n\t  if test \"$module\" = yes; then\n\t    echo\n\t    echo \"*** Warning: libtool could not satisfy all declared inter-library\"\n\t    $ECHO \"*** dependencies of module $libname.  Therefore, libtool will create\"\n\t    echo \"*** a static module, that should work as long as the dlopening\"\n\t    echo \"*** application is linked with the -dlopen flag.\"\n\t    if test -z \"$global_symbol_pipe\"; then\n\t      echo\n\t      echo \"*** However, this would only work if libtool was able to extract symbol\"\n\t      echo \"*** lists from a program, using \\`nm' or equivalent, but libtool could\"\n\t      echo \"*** not find such a program.  So, this module is probably useless.\"\n\t      echo \"*** \\`nm' from GNU binutils and a full rebuild may help.\"\n\t    fi\n\t    if test \"$build_old_libs\" = no; then\n\t      oldlibs=\"$output_objdir/$libname.$libext\"\n\t      build_libtool_libs=module\n\t      build_old_libs=yes\n\t    else\n\t      build_libtool_libs=no\n\t    fi\n\t  else\n\t    echo \"*** The inter-library dependencies that have been dropped here will be\"\n\t    echo \"*** automatically added whenever a program is linked with this library\"\n\t    echo \"*** or is declared to -dlopen it.\"\n\n\t    if test \"$allow_undefined\" = no; then\n\t      echo\n\t      echo \"*** Since this library must not contain undefined symbols,\"\n\t      echo \"*** because either the platform does not support them or\"\n\t      echo \"*** it was explicitly requested with -no-undefined,\"\n\t      echo \"*** libtool will only create a static version of it.\"\n\t      if test \"$build_old_libs\" = no; then\n\t\toldlibs=\"$output_objdir/$libname.$libext\"\n\t\tbuild_libtool_libs=module\n\t\tbuild_old_libs=yes\n\t      else\n\t\tbuild_libtool_libs=no\n\t      fi\n\t    fi\n\t  fi\n\tfi\n\t# Done checking deplibs!\n\tdeplibs=$newdeplibs\n      fi\n      # Time to change all our \"foo.ltframework\" stuff back to \"-framework foo\"\n      case $host in\n\t*-*-darwin*)\n\t  newdeplibs=`$ECHO \" $newdeplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t  new_inherited_linker_flags=`$ECHO \" $new_inherited_linker_flags\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t  deplibs=`$ECHO \" $deplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t  ;;\n      esac\n\n      # move library search paths that coincide with paths to not yet\n      # installed libraries to the beginning of the library search list\n      new_libs=\n      for path in $notinst_path; do\n\tcase \" $new_libs \" in\n\t*\" -L$path/$objdir \"*) ;;\n\t*)\n\t  case \" $deplibs \" in\n\t  *\" -L$path/$objdir \"*)\n\t    func_append new_libs \" -L$path/$objdir\" ;;\n\t  esac\n\t  ;;\n\tesac\n      done\n      for deplib in $deplibs; do\n\tcase $deplib in\n\t-L*)\n\t  case \" $new_libs \" in\n\t  *\" $deplib \"*) ;;\n\t  *) func_append new_libs \" $deplib\" ;;\n\t  esac\n\t  ;;\n\t*) func_append new_libs \" $deplib\" ;;\n\tesac\n      done\n      deplibs=\"$new_libs\"\n\n      # All the library-specific variables (install_libdir is set above).\n      library_names=\n      old_library=\n      dlname=\n\n      # Test again, we may have decided not to build it any more\n      if test \"$build_libtool_libs\" = yes; then\n\t# Remove ${wl} instances when linking with ld.\n\t# FIXME: should test the right _cmds variable.\n\tcase $archive_cmds in\n\t  *\\$LD\\ *) wl= ;;\n        esac\n\tif test \"$hardcode_into_libs\" = yes; then\n\t  # Hardcode the library paths\n\t  hardcode_libdirs=\n\t  dep_rpath=\n\t  rpath=\"$finalize_rpath\"\n\t  test \"$opt_mode\" != relink && rpath=\"$compile_rpath$rpath\"\n\t  for libdir in $rpath; do\n\t    if test -n \"$hardcode_libdir_flag_spec\"; then\n\t      if test -n \"$hardcode_libdir_separator\"; then\n\t\tfunc_replace_sysroot \"$libdir\"\n\t\tlibdir=$func_replace_sysroot_result\n\t\tif test -z \"$hardcode_libdirs\"; then\n\t\t  hardcode_libdirs=\"$libdir\"\n\t\telse\n\t\t  # Just accumulate the unique libdirs.\n\t\t  case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in\n\t\t  *\"$hardcode_libdir_separator$libdir$hardcode_libdir_separator\"*)\n\t\t    ;;\n\t\t  *)\n\t\t    func_append hardcode_libdirs \"$hardcode_libdir_separator$libdir\"\n\t\t    ;;\n\t\t  esac\n\t\tfi\n\t      else\n\t\teval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\t\tfunc_append dep_rpath \" $flag\"\n\t      fi\n\t    elif test -n \"$runpath_var\"; then\n\t      case \"$perm_rpath \" in\n\t      *\" $libdir \"*) ;;\n\t      *) func_append perm_rpath \" $libdir\" ;;\n\t      esac\n\t    fi\n\t  done\n\t  # Substitute the hardcoded libdirs into the rpath.\n\t  if test -n \"$hardcode_libdir_separator\" &&\n\t     test -n \"$hardcode_libdirs\"; then\n\t    libdir=\"$hardcode_libdirs\"\n\t    eval \"dep_rpath=\\\"$hardcode_libdir_flag_spec\\\"\"\n\t  fi\n\t  if test -n \"$runpath_var\" && test -n \"$perm_rpath\"; then\n\t    # We should set the runpath_var.\n\t    rpath=\n\t    for dir in $perm_rpath; do\n\t      func_append rpath \"$dir:\"\n\t    done\n\t    eval \"$runpath_var='$rpath\\$$runpath_var'; export $runpath_var\"\n\t  fi\n\t  test -n \"$dep_rpath\" && deplibs=\"$dep_rpath $deplibs\"\n\tfi\n\n\tshlibpath=\"$finalize_shlibpath\"\n\ttest \"$opt_mode\" != relink && shlibpath=\"$compile_shlibpath$shlibpath\"\n\tif test -n \"$shlibpath\"; then\n\t  eval \"$shlibpath_var='$shlibpath\\$$shlibpath_var'; export $shlibpath_var\"\n\tfi\n\n\t# Get the real and link names of the library.\n\teval shared_ext=\\\"$shrext_cmds\\\"\n\teval library_names=\\\"$library_names_spec\\\"\n\tset dummy $library_names\n\tshift\n\trealname=\"$1\"\n\tshift\n\n\tif test -n \"$soname_spec\"; then\n\t  eval soname=\\\"$soname_spec\\\"\n\telse\n\t  soname=\"$realname\"\n\tfi\n\tif test -z \"$dlname\"; then\n\t  dlname=$soname\n\tfi\n\n\tlib=\"$output_objdir/$realname\"\n\tlinknames=\n\tfor link\n\tdo\n\t  func_append linknames \" $link\"\n\tdone\n\n\t# Use standard objects if they are pic\n\ttest -z \"$pic_flag\" && libobjs=`$ECHO \"$libobjs\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n\ttest \"X$libobjs\" = \"X \" && libobjs=\n\n\tdelfiles=\n\tif test -n \"$export_symbols\" && test -n \"$include_expsyms\"; then\n\t  $opt_dry_run || cp \"$export_symbols\" \"$output_objdir/$libname.uexp\"\n\t  export_symbols=\"$output_objdir/$libname.uexp\"\n\t  func_append delfiles \" $export_symbols\"\n\tfi\n\n\torig_export_symbols=\n\tcase $host_os in\n\tcygwin* | mingw* | cegcc*)\n\t  if test -n \"$export_symbols\" && test -z \"$export_symbols_regex\"; then\n\t    # exporting using user supplied symfile\n\t    if test \"x`$SED 1q $export_symbols`\" != xEXPORTS; then\n\t      # and it's NOT already a .def file. Must figure out\n\t      # which of the given symbols are data symbols and tag\n\t      # them as such. So, trigger use of export_symbols_cmds.\n\t      # export_symbols gets reassigned inside the \"prepare\n\t      # the list of exported symbols\" if statement, so the\n\t      # include_expsyms logic still works.\n\t      orig_export_symbols=\"$export_symbols\"\n\t      export_symbols=\n\t      always_export_symbols=yes\n\t    fi\n\t  fi\n\t  ;;\n\tesac\n\n\t# Prepare the list of exported symbols\n\tif test -z \"$export_symbols\"; then\n\t  if test \"$always_export_symbols\" = yes || test -n \"$export_symbols_regex\"; then\n\t    func_verbose \"generating symbol list for \\`$libname.la'\"\n\t    export_symbols=\"$output_objdir/$libname.exp\"\n\t    $opt_dry_run || $RM $export_symbols\n\t    cmds=$export_symbols_cmds\n\t    save_ifs=\"$IFS\"; IFS='~'\n\t    for cmd1 in $cmds; do\n\t      IFS=\"$save_ifs\"\n\t      # Take the normal branch if the nm_file_list_spec branch\n\t      # doesn't work or if tool conversion is not needed.\n\t      case $nm_file_list_spec~$to_tool_file_cmd in\n\t\t*~func_convert_file_noop | *~func_convert_file_msys_to_w32 | ~*)\n\t\t  try_normal_branch=yes\n\t\t  eval cmd=\\\"$cmd1\\\"\n\t\t  func_len \" $cmd\"\n\t\t  len=$func_len_result\n\t\t  ;;\n\t\t*)\n\t\t  try_normal_branch=no\n\t\t  ;;\n\t      esac\n\t      if test \"$try_normal_branch\" = yes \\\n\t\t && { test \"$len\" -lt \"$max_cmd_len\" \\\n\t\t      || test \"$max_cmd_len\" -le -1; }\n\t      then\n\t\tfunc_show_eval \"$cmd\" 'exit $?'\n\t\tskipped_export=false\n\t      elif test -n \"$nm_file_list_spec\"; then\n\t\tfunc_basename \"$output\"\n\t\toutput_la=$func_basename_result\n\t\tsave_libobjs=$libobjs\n\t\tsave_output=$output\n\t\toutput=${output_objdir}/${output_la}.nm\n\t\tfunc_to_tool_file \"$output\"\n\t\tlibobjs=$nm_file_list_spec$func_to_tool_file_result\n\t\tfunc_append delfiles \" $output\"\n\t\tfunc_verbose \"creating $NM input file list: $output\"\n\t\tfor obj in $save_libobjs; do\n\t\t  func_to_tool_file \"$obj\"\n\t\t  $ECHO \"$func_to_tool_file_result\"\n\t\tdone > \"$output\"\n\t\teval cmd=\\\"$cmd1\\\"\n\t\tfunc_show_eval \"$cmd\" 'exit $?'\n\t\toutput=$save_output\n\t\tlibobjs=$save_libobjs\n\t\tskipped_export=false\n\t      else\n\t\t# The command line is too long to execute in one step.\n\t\tfunc_verbose \"using reloadable object file for export list...\"\n\t\tskipped_export=:\n\t\t# Break out early, otherwise skipped_export may be\n\t\t# set to false by a later but shorter cmd.\n\t\tbreak\n\t      fi\n\t    done\n\t    IFS=\"$save_ifs\"\n\t    if test -n \"$export_symbols_regex\" && test \"X$skipped_export\" != \"X:\"; then\n\t      func_show_eval '$EGREP -e \"$export_symbols_regex\" \"$export_symbols\" > \"${export_symbols}T\"'\n\t      func_show_eval '$MV \"${export_symbols}T\" \"$export_symbols\"'\n\t    fi\n\t  fi\n\tfi\n\n\tif test -n \"$export_symbols\" && test -n \"$include_expsyms\"; then\n\t  tmp_export_symbols=\"$export_symbols\"\n\t  test -n \"$orig_export_symbols\" && tmp_export_symbols=\"$orig_export_symbols\"\n\t  $opt_dry_run || eval '$ECHO \"$include_expsyms\" | $SP2NL >> \"$tmp_export_symbols\"'\n\tfi\n\n\tif test \"X$skipped_export\" != \"X:\" && test -n \"$orig_export_symbols\"; then\n\t  # The given exports_symbols file has to be filtered, so filter it.\n\t  func_verbose \"filter symbol list for \\`$libname.la' to tag DATA exports\"\n\t  # FIXME: $output_objdir/$libname.filter potentially contains lots of\n\t  # 's' commands which not all seds can handle. GNU sed should be fine\n\t  # though. Also, the filter scales superlinearly with the number of\n\t  # global variables. join(1) would be nice here, but unfortunately\n\t  # isn't a blessed tool.\n\t  $opt_dry_run || $SED -e '/[ ,]DATA/!d;s,\\(.*\\)\\([ \\,].*\\),s|^\\1$|\\1\\2|,' < $export_symbols > $output_objdir/$libname.filter\n\t  func_append delfiles \" $export_symbols $output_objdir/$libname.filter\"\n\t  export_symbols=$output_objdir/$libname.def\n\t  $opt_dry_run || $SED -f $output_objdir/$libname.filter < $orig_export_symbols > $export_symbols\n\tfi\n\n\ttmp_deplibs=\n\tfor test_deplib in $deplibs; do\n\t  case \" $convenience \" in\n\t  *\" $test_deplib \"*) ;;\n\t  *)\n\t    func_append tmp_deplibs \" $test_deplib\"\n\t    ;;\n\t  esac\n\tdone\n\tdeplibs=\"$tmp_deplibs\"\n\n\tif test -n \"$convenience\"; then\n\t  if test -n \"$whole_archive_flag_spec\" &&\n\t    test \"$compiler_needs_object\" = yes &&\n\t    test -z \"$libobjs\"; then\n\t    # extract the archives, so we have objects to list.\n\t    # TODO: could optimize this to just extract one archive.\n\t    whole_archive_flag_spec=\n\t  fi\n\t  if test -n \"$whole_archive_flag_spec\"; then\n\t    save_libobjs=$libobjs\n\t    eval libobjs=\\\"\\$libobjs $whole_archive_flag_spec\\\"\n\t    test \"X$libobjs\" = \"X \" && libobjs=\n\t  else\n\t    gentop=\"$output_objdir/${outputname}x\"\n\t    func_append generated \" $gentop\"\n\n\t    func_extract_archives $gentop $convenience\n\t    func_append libobjs \" $func_extract_archives_result\"\n\t    test \"X$libobjs\" = \"X \" && libobjs=\n\t  fi\n\tfi\n\n\tif test \"$thread_safe\" = yes && test -n \"$thread_safe_flag_spec\"; then\n\t  eval flag=\\\"$thread_safe_flag_spec\\\"\n\t  func_append linker_flags \" $flag\"\n\tfi\n\n\t# Make a backup of the uninstalled library when relinking\n\tif test \"$opt_mode\" = relink; then\n\t  $opt_dry_run || eval '(cd $output_objdir && $RM ${realname}U && $MV $realname ${realname}U)' || exit $?\n\tfi\n\n\t# Do each of the archive commands.\n\tif test \"$module\" = yes && test -n \"$module_cmds\" ; then\n\t  if test -n \"$export_symbols\" && test -n \"$module_expsym_cmds\"; then\n\t    eval test_cmds=\\\"$module_expsym_cmds\\\"\n\t    cmds=$module_expsym_cmds\n\t  else\n\t    eval test_cmds=\\\"$module_cmds\\\"\n\t    cmds=$module_cmds\n\t  fi\n\telse\n\t  if test -n \"$export_symbols\" && test -n \"$archive_expsym_cmds\"; then\n\t    eval test_cmds=\\\"$archive_expsym_cmds\\\"\n\t    cmds=$archive_expsym_cmds\n\t  else\n\t    eval test_cmds=\\\"$archive_cmds\\\"\n\t    cmds=$archive_cmds\n\t  fi\n\tfi\n\n\tif test \"X$skipped_export\" != \"X:\" &&\n\t   func_len \" $test_cmds\" &&\n\t   len=$func_len_result &&\n\t   test \"$len\" -lt \"$max_cmd_len\" || test \"$max_cmd_len\" -le -1; then\n\t  :\n\telse\n\t  # The command line is too long to link in one step, link piecewise\n\t  # or, if using GNU ld and skipped_export is not :, use a linker\n\t  # script.\n\n\t  # Save the value of $output and $libobjs because we want to\n\t  # use them later.  If we have whole_archive_flag_spec, we\n\t  # want to use save_libobjs as it was before\n\t  # whole_archive_flag_spec was expanded, because we can't\n\t  # assume the linker understands whole_archive_flag_spec.\n\t  # This may have to be revisited, in case too many\n\t  # convenience libraries get linked in and end up exceeding\n\t  # the spec.\n\t  if test -z \"$convenience\" || test -z \"$whole_archive_flag_spec\"; then\n\t    save_libobjs=$libobjs\n\t  fi\n\t  save_output=$output\n\t  func_basename \"$output\"\n\t  output_la=$func_basename_result\n\n\t  # Clear the reloadable object creation command queue and\n\t  # initialize k to one.\n\t  test_cmds=\n\t  concat_cmds=\n\t  objlist=\n\t  last_robj=\n\t  k=1\n\n\t  if test -n \"$save_libobjs\" && test \"X$skipped_export\" != \"X:\" && test \"$with_gnu_ld\" = yes; then\n\t    output=${output_objdir}/${output_la}.lnkscript\n\t    func_verbose \"creating GNU ld script: $output\"\n\t    echo 'INPUT (' > $output\n\t    for obj in $save_libobjs\n\t    do\n\t      func_to_tool_file \"$obj\"\n\t      $ECHO \"$func_to_tool_file_result\" >> $output\n\t    done\n\t    echo ')' >> $output\n\t    func_append delfiles \" $output\"\n\t    func_to_tool_file \"$output\"\n\t    output=$func_to_tool_file_result\n\t  elif test -n \"$save_libobjs\" && test \"X$skipped_export\" != \"X:\" && test \"X$file_list_spec\" != X; then\n\t    output=${output_objdir}/${output_la}.lnk\n\t    func_verbose \"creating linker input file list: $output\"\n\t    : > $output\n\t    set x $save_libobjs\n\t    shift\n\t    firstobj=\n\t    if test \"$compiler_needs_object\" = yes; then\n\t      firstobj=\"$1 \"\n\t      shift\n\t    fi\n\t    for obj\n\t    do\n\t      func_to_tool_file \"$obj\"\n\t      $ECHO \"$func_to_tool_file_result\" >> $output\n\t    done\n\t    func_append delfiles \" $output\"\n\t    func_to_tool_file \"$output\"\n\t    output=$firstobj\\\"$file_list_spec$func_to_tool_file_result\\\"\n\t  else\n\t    if test -n \"$save_libobjs\"; then\n\t      func_verbose \"creating reloadable object files...\"\n\t      output=$output_objdir/$output_la-${k}.$objext\n\t      eval test_cmds=\\\"$reload_cmds\\\"\n\t      func_len \" $test_cmds\"\n\t      len0=$func_len_result\n\t      len=$len0\n\n\t      # Loop over the list of objects to be linked.\n\t      for obj in $save_libobjs\n\t      do\n\t\tfunc_len \" $obj\"\n\t\tfunc_arith $len + $func_len_result\n\t\tlen=$func_arith_result\n\t\tif test \"X$objlist\" = X ||\n\t\t   test \"$len\" -lt \"$max_cmd_len\"; then\n\t\t  func_append objlist \" $obj\"\n\t\telse\n\t\t  # The command $test_cmds is almost too long, add a\n\t\t  # command to the queue.\n\t\t  if test \"$k\" -eq 1 ; then\n\t\t    # The first file doesn't have a previous command to add.\n\t\t    reload_objs=$objlist\n\t\t    eval concat_cmds=\\\"$reload_cmds\\\"\n\t\t  else\n\t\t    # All subsequent reloadable object files will link in\n\t\t    # the last one created.\n\t\t    reload_objs=\"$objlist $last_robj\"\n\t\t    eval concat_cmds=\\\"\\$concat_cmds~$reload_cmds~\\$RM $last_robj\\\"\n\t\t  fi\n\t\t  last_robj=$output_objdir/$output_la-${k}.$objext\n\t\t  func_arith $k + 1\n\t\t  k=$func_arith_result\n\t\t  output=$output_objdir/$output_la-${k}.$objext\n\t\t  objlist=\" $obj\"\n\t\t  func_len \" $last_robj\"\n\t\t  func_arith $len0 + $func_len_result\n\t\t  len=$func_arith_result\n\t\tfi\n\t      done\n\t      # Handle the remaining objects by creating one last\n\t      # reloadable object file.  All subsequent reloadable object\n\t      # files will link in the last one created.\n\t      test -z \"$concat_cmds\" || concat_cmds=$concat_cmds~\n\t      reload_objs=\"$objlist $last_robj\"\n\t      eval concat_cmds=\\\"\\${concat_cmds}$reload_cmds\\\"\n\t      if test -n \"$last_robj\"; then\n\t        eval concat_cmds=\\\"\\${concat_cmds}~\\$RM $last_robj\\\"\n\t      fi\n\t      func_append delfiles \" $output\"\n\n\t    else\n\t      output=\n\t    fi\n\n\t    if ${skipped_export-false}; then\n\t      func_verbose \"generating symbol list for \\`$libname.la'\"\n\t      export_symbols=\"$output_objdir/$libname.exp\"\n\t      $opt_dry_run || $RM $export_symbols\n\t      libobjs=$output\n\t      # Append the command to create the export file.\n\t      test -z \"$concat_cmds\" || concat_cmds=$concat_cmds~\n\t      eval concat_cmds=\\\"\\$concat_cmds$export_symbols_cmds\\\"\n\t      if test -n \"$last_robj\"; then\n\t\teval concat_cmds=\\\"\\$concat_cmds~\\$RM $last_robj\\\"\n\t      fi\n\t    fi\n\n\t    test -n \"$save_libobjs\" &&\n\t      func_verbose \"creating a temporary reloadable object file: $output\"\n\n\t    # Loop through the commands generated above and execute them.\n\t    save_ifs=\"$IFS\"; IFS='~'\n\t    for cmd in $concat_cmds; do\n\t      IFS=\"$save_ifs\"\n\t      $opt_silent || {\n\t\t  func_quote_for_expand \"$cmd\"\n\t\t  eval \"func_echo $func_quote_for_expand_result\"\n\t      }\n\t      $opt_dry_run || eval \"$cmd\" || {\n\t\tlt_exit=$?\n\n\t\t# Restore the uninstalled library and exit\n\t\tif test \"$opt_mode\" = relink; then\n\t\t  ( cd \"$output_objdir\" && \\\n\t\t    $RM \"${realname}T\" && \\\n\t\t    $MV \"${realname}U\" \"$realname\" )\n\t\tfi\n\n\t\texit $lt_exit\n\t      }\n\t    done\n\t    IFS=\"$save_ifs\"\n\n\t    if test -n \"$export_symbols_regex\" && ${skipped_export-false}; then\n\t      func_show_eval '$EGREP -e \"$export_symbols_regex\" \"$export_symbols\" > \"${export_symbols}T\"'\n\t      func_show_eval '$MV \"${export_symbols}T\" \"$export_symbols\"'\n\t    fi\n\t  fi\n\n          if ${skipped_export-false}; then\n\t    if test -n \"$export_symbols\" && test -n \"$include_expsyms\"; then\n\t      tmp_export_symbols=\"$export_symbols\"\n\t      test -n \"$orig_export_symbols\" && tmp_export_symbols=\"$orig_export_symbols\"\n\t      $opt_dry_run || eval '$ECHO \"$include_expsyms\" | $SP2NL >> \"$tmp_export_symbols\"'\n\t    fi\n\n\t    if test -n \"$orig_export_symbols\"; then\n\t      # The given exports_symbols file has to be filtered, so filter it.\n\t      func_verbose \"filter symbol list for \\`$libname.la' to tag DATA exports\"\n\t      # FIXME: $output_objdir/$libname.filter potentially contains lots of\n\t      # 's' commands which not all seds can handle. GNU sed should be fine\n\t      # though. Also, the filter scales superlinearly with the number of\n\t      # global variables. join(1) would be nice here, but unfortunately\n\t      # isn't a blessed tool.\n\t      $opt_dry_run || $SED -e '/[ ,]DATA/!d;s,\\(.*\\)\\([ \\,].*\\),s|^\\1$|\\1\\2|,' < $export_symbols > $output_objdir/$libname.filter\n\t      func_append delfiles \" $export_symbols $output_objdir/$libname.filter\"\n\t      export_symbols=$output_objdir/$libname.def\n\t      $opt_dry_run || $SED -f $output_objdir/$libname.filter < $orig_export_symbols > $export_symbols\n\t    fi\n\t  fi\n\n\t  libobjs=$output\n\t  # Restore the value of output.\n\t  output=$save_output\n\n\t  if test -n \"$convenience\" && test -n \"$whole_archive_flag_spec\"; then\n\t    eval libobjs=\\\"\\$libobjs $whole_archive_flag_spec\\\"\n\t    test \"X$libobjs\" = \"X \" && libobjs=\n\t  fi\n\t  # Expand the library linking commands again to reset the\n\t  # value of $libobjs for piecewise linking.\n\n\t  # Do each of the archive commands.\n\t  if test \"$module\" = yes && test -n \"$module_cmds\" ; then\n\t    if test -n \"$export_symbols\" && test -n \"$module_expsym_cmds\"; then\n\t      cmds=$module_expsym_cmds\n\t    else\n\t      cmds=$module_cmds\n\t    fi\n\t  else\n\t    if test -n \"$export_symbols\" && test -n \"$archive_expsym_cmds\"; then\n\t      cmds=$archive_expsym_cmds\n\t    else\n\t      cmds=$archive_cmds\n\t    fi\n\t  fi\n\tfi\n\n\tif test -n \"$delfiles\"; then\n\t  # Append the command to remove temporary files to $cmds.\n\t  eval cmds=\\\"\\$cmds~\\$RM $delfiles\\\"\n\tfi\n\n\t# Add any objects from preloaded convenience libraries\n\tif test -n \"$dlprefiles\"; then\n\t  gentop=\"$output_objdir/${outputname}x\"\n\t  func_append generated \" $gentop\"\n\n\t  func_extract_archives $gentop $dlprefiles\n\t  func_append libobjs \" $func_extract_archives_result\"\n\t  test \"X$libobjs\" = \"X \" && libobjs=\n\tfi\n\n\tsave_ifs=\"$IFS\"; IFS='~'\n\tfor cmd in $cmds; do\n\t  IFS=\"$save_ifs\"\n\t  eval cmd=\\\"$cmd\\\"\n\t  $opt_silent || {\n\t    func_quote_for_expand \"$cmd\"\n\t    eval \"func_echo $func_quote_for_expand_result\"\n\t  }\n\t  $opt_dry_run || eval \"$cmd\" || {\n\t    lt_exit=$?\n\n\t    # Restore the uninstalled library and exit\n\t    if test \"$opt_mode\" = relink; then\n\t      ( cd \"$output_objdir\" && \\\n\t        $RM \"${realname}T\" && \\\n\t\t$MV \"${realname}U\" \"$realname\" )\n\t    fi\n\n\t    exit $lt_exit\n\t  }\n\tdone\n\tIFS=\"$save_ifs\"\n\n\t# Restore the uninstalled library and exit\n\tif test \"$opt_mode\" = relink; then\n\t  $opt_dry_run || eval '(cd $output_objdir && $RM ${realname}T && $MV $realname ${realname}T && $MV ${realname}U $realname)' || exit $?\n\n\t  if test -n \"$convenience\"; then\n\t    if test -z \"$whole_archive_flag_spec\"; then\n\t      func_show_eval '${RM}r \"$gentop\"'\n\t    fi\n\t  fi\n\n\t  exit $EXIT_SUCCESS\n\tfi\n\n\t# Create links to the real library.\n\tfor linkname in $linknames; do\n\t  if test \"$realname\" != \"$linkname\"; then\n\t    func_show_eval '(cd \"$output_objdir\" && $RM \"$linkname\" && $LN_S \"$realname\" \"$linkname\")' 'exit $?'\n\t  fi\n\tdone\n\n\t# If -module or -export-dynamic was specified, set the dlname.\n\tif test \"$module\" = yes || test \"$export_dynamic\" = yes; then\n\t  # On all known operating systems, these are identical.\n\t  dlname=\"$soname\"\n\tfi\n      fi\n      ;;\n\n    obj)\n      if test -n \"$dlfiles$dlprefiles\" || test \"$dlself\" != no; then\n\tfunc_warning \"\\`-dlopen' is ignored for objects\"\n      fi\n\n      case \" $deplibs\" in\n      *\\ -l* | *\\ -L*)\n\tfunc_warning \"\\`-l' and \\`-L' are ignored for objects\" ;;\n      esac\n\n      test -n \"$rpath\" && \\\n\tfunc_warning \"\\`-rpath' is ignored for objects\"\n\n      test -n \"$xrpath\" && \\\n\tfunc_warning \"\\`-R' is ignored for objects\"\n\n      test -n \"$vinfo\" && \\\n\tfunc_warning \"\\`-version-info' is ignored for objects\"\n\n      test -n \"$release\" && \\\n\tfunc_warning \"\\`-release' is ignored for objects\"\n\n      case $output in\n      *.lo)\n\ttest -n \"$objs$old_deplibs\" && \\\n\t  func_fatal_error \"cannot build library object \\`$output' from non-libtool objects\"\n\n\tlibobj=$output\n\tfunc_lo2o \"$libobj\"\n\tobj=$func_lo2o_result\n\t;;\n      *)\n\tlibobj=\n\tobj=\"$output\"\n\t;;\n      esac\n\n      # Delete the old objects.\n      $opt_dry_run || $RM $obj $libobj\n\n      # Objects from convenience libraries.  This assumes\n      # single-version convenience libraries.  Whenever we create\n      # different ones for PIC/non-PIC, this we'll have to duplicate\n      # the extraction.\n      reload_conv_objs=\n      gentop=\n      # reload_cmds runs $LD directly, so let us get rid of\n      # -Wl from whole_archive_flag_spec and hope we can get by with\n      # turning comma into space..\n      wl=\n\n      if test -n \"$convenience\"; then\n\tif test -n \"$whole_archive_flag_spec\"; then\n\t  eval tmp_whole_archive_flags=\\\"$whole_archive_flag_spec\\\"\n\t  reload_conv_objs=$reload_objs\\ `$ECHO \"$tmp_whole_archive_flags\" | $SED 's|,| |g'`\n\telse\n\t  gentop=\"$output_objdir/${obj}x\"\n\t  func_append generated \" $gentop\"\n\n\t  func_extract_archives $gentop $convenience\n\t  reload_conv_objs=\"$reload_objs $func_extract_archives_result\"\n\tfi\n      fi\n\n      # If we're not building shared, we need to use non_pic_objs\n      test \"$build_libtool_libs\" != yes && libobjs=\"$non_pic_objects\"\n\n      # Create the old-style object.\n      reload_objs=\"$objs$old_deplibs \"`$ECHO \"$libobjs\" | $SP2NL | $SED \"/\\.${libext}$/d; /\\.lib$/d; $lo2o\" | $NL2SP`\" $reload_conv_objs\" ### testsuite: skip nested quoting test\n\n      output=\"$obj\"\n      func_execute_cmds \"$reload_cmds\" 'exit $?'\n\n      # Exit if we aren't doing a library object file.\n      if test -z \"$libobj\"; then\n\tif test -n \"$gentop\"; then\n\t  func_show_eval '${RM}r \"$gentop\"'\n\tfi\n\n\texit $EXIT_SUCCESS\n      fi\n\n      if test \"$build_libtool_libs\" != yes; then\n\tif test -n \"$gentop\"; then\n\t  func_show_eval '${RM}r \"$gentop\"'\n\tfi\n\n\t# Create an invalid libtool object if no PIC, so that we don't\n\t# accidentally link it into a program.\n\t# $show \"echo timestamp > $libobj\"\n\t# $opt_dry_run || eval \"echo timestamp > $libobj\" || exit $?\n\texit $EXIT_SUCCESS\n      fi\n\n      if test -n \"$pic_flag\" || test \"$pic_mode\" != default; then\n\t# Only do commands if we really have different PIC objects.\n\treload_objs=\"$libobjs $reload_conv_objs\"\n\toutput=\"$libobj\"\n\tfunc_execute_cmds \"$reload_cmds\" 'exit $?'\n      fi\n\n      if test -n \"$gentop\"; then\n\tfunc_show_eval '${RM}r \"$gentop\"'\n      fi\n\n      exit $EXIT_SUCCESS\n      ;;\n\n    prog)\n      case $host in\n\t*cygwin*) func_stripname '' '.exe' \"$output\"\n\t          output=$func_stripname_result.exe;;\n      esac\n      test -n \"$vinfo\" && \\\n\tfunc_warning \"\\`-version-info' is ignored for programs\"\n\n      test -n \"$release\" && \\\n\tfunc_warning \"\\`-release' is ignored for programs\"\n\n      test \"$preload\" = yes \\\n        && test \"$dlopen_support\" = unknown \\\n\t&& test \"$dlopen_self\" = unknown \\\n\t&& test \"$dlopen_self_static\" = unknown && \\\n\t  func_warning \"\\`LT_INIT([dlopen])' not used. Assuming no dlopen support.\"\n\n      case $host in\n      *-*-rhapsody* | *-*-darwin1.[012])\n\t# On Rhapsody replace the C library is the System framework\n\tcompile_deplibs=`$ECHO \" $compile_deplibs\" | $SED 's/ -lc / System.ltframework /'`\n\tfinalize_deplibs=`$ECHO \" $finalize_deplibs\" | $SED 's/ -lc / System.ltframework /'`\n\t;;\n      esac\n\n      case $host in\n      *-*-darwin*)\n\t# Don't allow lazy linking, it breaks C++ global constructors\n\t# But is supposedly fixed on 10.4 or later (yay!).\n\tif test \"$tagname\" = CXX ; then\n\t  case ${MACOSX_DEPLOYMENT_TARGET-10.0} in\n\t    10.[0123])\n\t      func_append compile_command \" ${wl}-bind_at_load\"\n\t      func_append finalize_command \" ${wl}-bind_at_load\"\n\t    ;;\n\t  esac\n\tfi\n\t# Time to change all our \"foo.ltframework\" stuff back to \"-framework foo\"\n\tcompile_deplibs=`$ECHO \" $compile_deplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\tfinalize_deplibs=`$ECHO \" $finalize_deplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t;;\n      esac\n\n\n      # move library search paths that coincide with paths to not yet\n      # installed libraries to the beginning of the library search list\n      new_libs=\n      for path in $notinst_path; do\n\tcase \" $new_libs \" in\n\t*\" -L$path/$objdir \"*) ;;\n\t*)\n\t  case \" $compile_deplibs \" in\n\t  *\" -L$path/$objdir \"*)\n\t    func_append new_libs \" -L$path/$objdir\" ;;\n\t  esac\n\t  ;;\n\tesac\n      done\n      for deplib in $compile_deplibs; do\n\tcase $deplib in\n\t-L*)\n\t  case \" $new_libs \" in\n\t  *\" $deplib \"*) ;;\n\t  *) func_append new_libs \" $deplib\" ;;\n\t  esac\n\t  ;;\n\t*) func_append new_libs \" $deplib\" ;;\n\tesac\n      done\n      compile_deplibs=\"$new_libs\"\n\n\n      func_append compile_command \" $compile_deplibs\"\n      func_append finalize_command \" $finalize_deplibs\"\n\n      if test -n \"$rpath$xrpath\"; then\n\t# If the user specified any rpath flags, then add them.\n\tfor libdir in $rpath $xrpath; do\n\t  # This is the magic to use -rpath.\n\t  case \"$finalize_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append finalize_rpath \" $libdir\" ;;\n\t  esac\n\tdone\n      fi\n\n      # Now hardcode the library paths\n      rpath=\n      hardcode_libdirs=\n      for libdir in $compile_rpath $finalize_rpath; do\n\tif test -n \"$hardcode_libdir_flag_spec\"; then\n\t  if test -n \"$hardcode_libdir_separator\"; then\n\t    if test -z \"$hardcode_libdirs\"; then\n\t      hardcode_libdirs=\"$libdir\"\n\t    else\n\t      # Just accumulate the unique libdirs.\n\t      case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in\n\t      *\"$hardcode_libdir_separator$libdir$hardcode_libdir_separator\"*)\n\t\t;;\n\t      *)\n\t\tfunc_append hardcode_libdirs \"$hardcode_libdir_separator$libdir\"\n\t\t;;\n\t      esac\n\t    fi\n\t  else\n\t    eval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\t    func_append rpath \" $flag\"\n\t  fi\n\telif test -n \"$runpath_var\"; then\n\t  case \"$perm_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append perm_rpath \" $libdir\" ;;\n\t  esac\n\tfi\n\tcase $host in\n\t*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-cegcc*)\n\t  testbindir=`${ECHO} \"$libdir\" | ${SED} -e 's*/lib$*/bin*'`\n\t  case :$dllsearchpath: in\n\t  *\":$libdir:\"*) ;;\n\t  ::) dllsearchpath=$libdir;;\n\t  *) func_append dllsearchpath \":$libdir\";;\n\t  esac\n\t  case :$dllsearchpath: in\n\t  *\":$testbindir:\"*) ;;\n\t  ::) dllsearchpath=$testbindir;;\n\t  *) func_append dllsearchpath \":$testbindir\";;\n\t  esac\n\t  ;;\n\tesac\n      done\n      # Substitute the hardcoded libdirs into the rpath.\n      if test -n \"$hardcode_libdir_separator\" &&\n\t test -n \"$hardcode_libdirs\"; then\n\tlibdir=\"$hardcode_libdirs\"\n\teval rpath=\\\" $hardcode_libdir_flag_spec\\\"\n      fi\n      compile_rpath=\"$rpath\"\n\n      rpath=\n      hardcode_libdirs=\n      for libdir in $finalize_rpath; do\n\tif test -n \"$hardcode_libdir_flag_spec\"; then\n\t  if test -n \"$hardcode_libdir_separator\"; then\n\t    if test -z \"$hardcode_libdirs\"; then\n\t      hardcode_libdirs=\"$libdir\"\n\t    else\n\t      # Just accumulate the unique libdirs.\n\t      case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in\n\t      *\"$hardcode_libdir_separator$libdir$hardcode_libdir_separator\"*)\n\t\t;;\n\t      *)\n\t\tfunc_append hardcode_libdirs \"$hardcode_libdir_separator$libdir\"\n\t\t;;\n\t      esac\n\t    fi\n\t  else\n\t    eval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\t    func_append rpath \" $flag\"\n\t  fi\n\telif test -n \"$runpath_var\"; then\n\t  case \"$finalize_perm_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append finalize_perm_rpath \" $libdir\" ;;\n\t  esac\n\tfi\n      done\n      # Substitute the hardcoded libdirs into the rpath.\n      if test -n \"$hardcode_libdir_separator\" &&\n\t test -n \"$hardcode_libdirs\"; then\n\tlibdir=\"$hardcode_libdirs\"\n\teval rpath=\\\" $hardcode_libdir_flag_spec\\\"\n      fi\n      finalize_rpath=\"$rpath\"\n\n      if test -n \"$libobjs\" && test \"$build_old_libs\" = yes; then\n\t# Transform all the library objects into standard objects.\n\tcompile_command=`$ECHO \"$compile_command\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n\tfinalize_command=`$ECHO \"$finalize_command\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n      fi\n\n      func_generate_dlsyms \"$outputname\" \"@PROGRAM@\" \"no\"\n\n      # template prelinking step\n      if test -n \"$prelink_cmds\"; then\n\tfunc_execute_cmds \"$prelink_cmds\" 'exit $?'\n      fi\n\n      wrappers_required=yes\n      case $host in\n      *cegcc* | *mingw32ce*)\n        # Disable wrappers for cegcc and mingw32ce hosts, we are cross compiling anyway.\n        wrappers_required=no\n        ;;\n      *cygwin* | *mingw* )\n        if test \"$build_libtool_libs\" != yes; then\n          wrappers_required=no\n        fi\n        ;;\n      *)\n        if test \"$need_relink\" = no || test \"$build_libtool_libs\" != yes; then\n          wrappers_required=no\n        fi\n        ;;\n      esac\n      if test \"$wrappers_required\" = no; then\n\t# Replace the output file specification.\n\tcompile_command=`$ECHO \"$compile_command\" | $SED 's%@OUTPUT@%'\"$output\"'%g'`\n\tlink_command=\"$compile_command$compile_rpath\"\n\n\t# We have no uninstalled library dependencies, so finalize right now.\n\texit_status=0\n\tfunc_show_eval \"$link_command\" 'exit_status=$?'\n\n\tif test -n \"$postlink_cmds\"; then\n\t  func_to_tool_file \"$output\"\n\t  postlink_cmds=`func_echo_all \"$postlink_cmds\" | $SED -e 's%@OUTPUT@%'\"$output\"'%g' -e 's%@TOOL_OUTPUT@%'\"$func_to_tool_file_result\"'%g'`\n\t  func_execute_cmds \"$postlink_cmds\" 'exit $?'\n\tfi\n\n\t# Delete the generated files.\n\tif test -f \"$output_objdir/${outputname}S.${objext}\"; then\n\t  func_show_eval '$RM \"$output_objdir/${outputname}S.${objext}\"'\n\tfi\n\n\texit $exit_status\n      fi\n\n      if test -n \"$compile_shlibpath$finalize_shlibpath\"; then\n\tcompile_command=\"$shlibpath_var=\\\"$compile_shlibpath$finalize_shlibpath\\$$shlibpath_var\\\" $compile_command\"\n      fi\n      if test -n \"$finalize_shlibpath\"; then\n\tfinalize_command=\"$shlibpath_var=\\\"$finalize_shlibpath\\$$shlibpath_var\\\" $finalize_command\"\n      fi\n\n      compile_var=\n      finalize_var=\n      if test -n \"$runpath_var\"; then\n\tif test -n \"$perm_rpath\"; then\n\t  # We should set the runpath_var.\n\t  rpath=\n\t  for dir in $perm_rpath; do\n\t    func_append rpath \"$dir:\"\n\t  done\n\t  compile_var=\"$runpath_var=\\\"$rpath\\$$runpath_var\\\" \"\n\tfi\n\tif test -n \"$finalize_perm_rpath\"; then\n\t  # We should set the runpath_var.\n\t  rpath=\n\t  for dir in $finalize_perm_rpath; do\n\t    func_append rpath \"$dir:\"\n\t  done\n\t  finalize_var=\"$runpath_var=\\\"$rpath\\$$runpath_var\\\" \"\n\tfi\n      fi\n\n      if test \"$no_install\" = yes; then\n\t# We don't need to create a wrapper script.\n\tlink_command=\"$compile_var$compile_command$compile_rpath\"\n\t# Replace the output file specification.\n\tlink_command=`$ECHO \"$link_command\" | $SED 's%@OUTPUT@%'\"$output\"'%g'`\n\t# Delete the old output file.\n\t$opt_dry_run || $RM $output\n\t# Link the executable and exit\n\tfunc_show_eval \"$link_command\" 'exit $?'\n\n\tif test -n \"$postlink_cmds\"; then\n\t  func_to_tool_file \"$output\"\n\t  postlink_cmds=`func_echo_all \"$postlink_cmds\" | $SED -e 's%@OUTPUT@%'\"$output\"'%g' -e 's%@TOOL_OUTPUT@%'\"$func_to_tool_file_result\"'%g'`\n\t  func_execute_cmds \"$postlink_cmds\" 'exit $?'\n\tfi\n\n\texit $EXIT_SUCCESS\n      fi\n\n      if test \"$hardcode_action\" = relink; then\n\t# Fast installation is not supported\n\tlink_command=\"$compile_var$compile_command$compile_rpath\"\n\trelink_command=\"$finalize_var$finalize_command$finalize_rpath\"\n\n\tfunc_warning \"this platform does not like uninstalled shared libraries\"\n\tfunc_warning \"\\`$output' will be relinked during installation\"\n      else\n\tif test \"$fast_install\" != no; then\n\t  link_command=\"$finalize_var$compile_command$finalize_rpath\"\n\t  if test \"$fast_install\" = yes; then\n\t    relink_command=`$ECHO \"$compile_var$compile_command$compile_rpath\" | $SED 's%@OUTPUT@%\\$progdir/\\$file%g'`\n\t  else\n\t    # fast_install is set to needless\n\t    relink_command=\n\t  fi\n\telse\n\t  link_command=\"$compile_var$compile_command$compile_rpath\"\n\t  relink_command=\"$finalize_var$finalize_command$finalize_rpath\"\n\tfi\n      fi\n\n      # Replace the output file specification.\n      link_command=`$ECHO \"$link_command\" | $SED 's%@OUTPUT@%'\"$output_objdir/$outputname\"'%g'`\n\n      # Delete the old output files.\n      $opt_dry_run || $RM $output $output_objdir/$outputname $output_objdir/lt-$outputname\n\n      func_show_eval \"$link_command\" 'exit $?'\n\n      if test -n \"$postlink_cmds\"; then\n\tfunc_to_tool_file \"$output_objdir/$outputname\"\n\tpostlink_cmds=`func_echo_all \"$postlink_cmds\" | $SED -e 's%@OUTPUT@%'\"$output_objdir/$outputname\"'%g' -e 's%@TOOL_OUTPUT@%'\"$func_to_tool_file_result\"'%g'`\n\tfunc_execute_cmds \"$postlink_cmds\" 'exit $?'\n      fi\n\n      # Now create the wrapper script.\n      func_verbose \"creating $output\"\n\n      # Quote the relink command for shipping.\n      if test -n \"$relink_command\"; then\n\t# Preserve any variables that may affect compiler behavior\n\tfor var in $variables_saved_for_relink; do\n\t  if eval test -z \\\"\\${$var+set}\\\"; then\n\t    relink_command=\"{ test -z \\\"\\${$var+set}\\\" || $lt_unset $var || { $var=; export $var; }; }; $relink_command\"\n\t  elif eval var_value=\\$$var; test -z \"$var_value\"; then\n\t    relink_command=\"$var=; export $var; $relink_command\"\n\t  else\n\t    func_quote_for_eval \"$var_value\"\n\t    relink_command=\"$var=$func_quote_for_eval_result; export $var; $relink_command\"\n\t  fi\n\tdone\n\trelink_command=\"(cd `pwd`; $relink_command)\"\n\trelink_command=`$ECHO \"$relink_command\" | $SED \"$sed_quote_subst\"`\n      fi\n\n      # Only actually do things if not in dry run mode.\n      $opt_dry_run || {\n\t# win32 will think the script is a binary if it has\n\t# a .exe suffix, so we strip it off here.\n\tcase $output in\n\t  *.exe) func_stripname '' '.exe' \"$output\"\n\t         output=$func_stripname_result ;;\n\tesac\n\t# test for cygwin because mv fails w/o .exe extensions\n\tcase $host in\n\t  *cygwin*)\n\t    exeext=.exe\n\t    func_stripname '' '.exe' \"$outputname\"\n\t    outputname=$func_stripname_result ;;\n\t  *) exeext= ;;\n\tesac\n\tcase $host in\n\t  *cygwin* | *mingw* )\n\t    func_dirname_and_basename \"$output\" \"\" \".\"\n\t    output_name=$func_basename_result\n\t    output_path=$func_dirname_result\n\t    cwrappersource=\"$output_path/$objdir/lt-$output_name.c\"\n\t    cwrapper=\"$output_path/$output_name.exe\"\n\t    $RM $cwrappersource $cwrapper\n\t    trap \"$RM $cwrappersource $cwrapper; exit $EXIT_FAILURE\" 1 2 15\n\n\t    func_emit_cwrapperexe_src > $cwrappersource\n\n\t    # The wrapper executable is built using the $host compiler,\n\t    # because it contains $host paths and files. If cross-\n\t    # compiling, it, like the target executable, must be\n\t    # executed on the $host or under an emulation environment.\n\t    $opt_dry_run || {\n\t      $LTCC $LTCFLAGS -o $cwrapper $cwrappersource\n\t      $STRIP $cwrapper\n\t    }\n\n\t    # Now, create the wrapper script for func_source use:\n\t    func_ltwrapper_scriptname $cwrapper\n\t    $RM $func_ltwrapper_scriptname_result\n\t    trap \"$RM $func_ltwrapper_scriptname_result; exit $EXIT_FAILURE\" 1 2 15\n\t    $opt_dry_run || {\n\t      # note: this script will not be executed, so do not chmod.\n\t      if test \"x$build\" = \"x$host\" ; then\n\t\t$cwrapper --lt-dump-script > $func_ltwrapper_scriptname_result\n\t      else\n\t\tfunc_emit_wrapper no > $func_ltwrapper_scriptname_result\n\t      fi\n\t    }\n\t  ;;\n\t  * )\n\t    $RM $output\n\t    trap \"$RM $output; exit $EXIT_FAILURE\" 1 2 15\n\n\t    func_emit_wrapper no > $output\n\t    chmod +x $output\n\t  ;;\n\tesac\n      }\n      exit $EXIT_SUCCESS\n      ;;\n    esac\n\n    # See if we need to build an old-fashioned archive.\n    for oldlib in $oldlibs; do\n\n      if test \"$build_libtool_libs\" = convenience; then\n\toldobjs=\"$libobjs_save $symfileobj\"\n\taddlibs=\"$convenience\"\n\tbuild_libtool_libs=no\n      else\n\tif test \"$build_libtool_libs\" = module; then\n\t  oldobjs=\"$libobjs_save\"\n\t  build_libtool_libs=no\n\telse\n\t  oldobjs=\"$old_deplibs $non_pic_objects\"\n\t  if test \"$preload\" = yes && test -f \"$symfileobj\"; then\n\t    func_append oldobjs \" $symfileobj\"\n\t  fi\n\tfi\n\taddlibs=\"$old_convenience\"\n      fi\n\n      if test -n \"$addlibs\"; then\n\tgentop=\"$output_objdir/${outputname}x\"\n\tfunc_append generated \" $gentop\"\n\n\tfunc_extract_archives $gentop $addlibs\n\tfunc_append oldobjs \" $func_extract_archives_result\"\n      fi\n\n      # Do each command in the archive commands.\n      if test -n \"$old_archive_from_new_cmds\" && test \"$build_libtool_libs\" = yes; then\n\tcmds=$old_archive_from_new_cmds\n      else\n\n\t# Add any objects from preloaded convenience libraries\n\tif test -n \"$dlprefiles\"; then\n\t  gentop=\"$output_objdir/${outputname}x\"\n\t  func_append generated \" $gentop\"\n\n\t  func_extract_archives $gentop $dlprefiles\n\t  func_append oldobjs \" $func_extract_archives_result\"\n\tfi\n\n\t# POSIX demands no paths to be encoded in archives.  We have\n\t# to avoid creating archives with duplicate basenames if we\n\t# might have to extract them afterwards, e.g., when creating a\n\t# static archive out of a convenience library, or when linking\n\t# the entirety of a libtool archive into another (currently\n\t# not supported by libtool).\n\tif (for obj in $oldobjs\n\t    do\n\t      func_basename \"$obj\"\n\t      $ECHO \"$func_basename_result\"\n\t    done | sort | sort -uc >/dev/null 2>&1); then\n\t  :\n\telse\n\t  echo \"copying selected object files to avoid basename conflicts...\"\n\t  gentop=\"$output_objdir/${outputname}x\"\n\t  func_append generated \" $gentop\"\n\t  func_mkdir_p \"$gentop\"\n\t  save_oldobjs=$oldobjs\n\t  oldobjs=\n\t  counter=1\n\t  for obj in $save_oldobjs\n\t  do\n\t    func_basename \"$obj\"\n\t    objbase=\"$func_basename_result\"\n\t    case \" $oldobjs \" in\n\t    \" \") oldobjs=$obj ;;\n\t    *[\\ /]\"$objbase \"*)\n\t      while :; do\n\t\t# Make sure we don't pick an alternate name that also\n\t\t# overlaps.\n\t\tnewobj=lt$counter-$objbase\n\t\tfunc_arith $counter + 1\n\t\tcounter=$func_arith_result\n\t\tcase \" $oldobjs \" in\n\t\t*[\\ /]\"$newobj \"*) ;;\n\t\t*) if test ! -f \"$gentop/$newobj\"; then break; fi ;;\n\t\tesac\n\t      done\n\t      func_show_eval \"ln $obj $gentop/$newobj || cp $obj $gentop/$newobj\"\n\t      func_append oldobjs \" $gentop/$newobj\"\n\t      ;;\n\t    *) func_append oldobjs \" $obj\" ;;\n\t    esac\n\t  done\n\tfi\n\tfunc_to_tool_file \"$oldlib\" func_convert_file_msys_to_w32\n\ttool_oldlib=$func_to_tool_file_result\n\teval cmds=\\\"$old_archive_cmds\\\"\n\n\tfunc_len \" $cmds\"\n\tlen=$func_len_result\n\tif test \"$len\" -lt \"$max_cmd_len\" || test \"$max_cmd_len\" -le -1; then\n\t  cmds=$old_archive_cmds\n\telif test -n \"$archiver_list_spec\"; then\n\t  func_verbose \"using command file archive linking...\"\n\t  for obj in $oldobjs\n\t  do\n\t    func_to_tool_file \"$obj\"\n\t    $ECHO \"$func_to_tool_file_result\"\n\t  done > $output_objdir/$libname.libcmd\n\t  func_to_tool_file \"$output_objdir/$libname.libcmd\"\n\t  oldobjs=\" $archiver_list_spec$func_to_tool_file_result\"\n\t  cmds=$old_archive_cmds\n\telse\n\t  # the command line is too long to link in one step, link in parts\n\t  func_verbose \"using piecewise archive linking...\"\n\t  save_RANLIB=$RANLIB\n\t  RANLIB=:\n\t  objlist=\n\t  concat_cmds=\n\t  save_oldobjs=$oldobjs\n\t  oldobjs=\n\t  # Is there a better way of finding the last object in the list?\n\t  for obj in $save_oldobjs\n\t  do\n\t    last_oldobj=$obj\n\t  done\n\t  eval test_cmds=\\\"$old_archive_cmds\\\"\n\t  func_len \" $test_cmds\"\n\t  len0=$func_len_result\n\t  len=$len0\n\t  for obj in $save_oldobjs\n\t  do\n\t    func_len \" $obj\"\n\t    func_arith $len + $func_len_result\n\t    len=$func_arith_result\n\t    func_append objlist \" $obj\"\n\t    if test \"$len\" -lt \"$max_cmd_len\"; then\n\t      :\n\t    else\n\t      # the above command should be used before it gets too long\n\t      oldobjs=$objlist\n\t      if test \"$obj\" = \"$last_oldobj\" ; then\n\t\tRANLIB=$save_RANLIB\n\t      fi\n\t      test -z \"$concat_cmds\" || concat_cmds=$concat_cmds~\n\t      eval concat_cmds=\\\"\\${concat_cmds}$old_archive_cmds\\\"\n\t      objlist=\n\t      len=$len0\n\t    fi\n\t  done\n\t  RANLIB=$save_RANLIB\n\t  oldobjs=$objlist\n\t  if test \"X$oldobjs\" = \"X\" ; then\n\t    eval cmds=\\\"\\$concat_cmds\\\"\n\t  else\n\t    eval cmds=\\\"\\$concat_cmds~\\$old_archive_cmds\\\"\n\t  fi\n\tfi\n      fi\n      func_execute_cmds \"$cmds\" 'exit $?'\n    done\n\n    test -n \"$generated\" && \\\n      func_show_eval \"${RM}r$generated\"\n\n    # Now create the libtool archive.\n    case $output in\n    *.la)\n      old_library=\n      test \"$build_old_libs\" = yes && old_library=\"$libname.$libext\"\n      func_verbose \"creating $output\"\n\n      # Preserve any variables that may affect compiler behavior\n      for var in $variables_saved_for_relink; do\n\tif eval test -z \\\"\\${$var+set}\\\"; then\n\t  relink_command=\"{ test -z \\\"\\${$var+set}\\\" || $lt_unset $var || { $var=; export $var; }; }; $relink_command\"\n\telif eval var_value=\\$$var; test -z \"$var_value\"; then\n\t  relink_command=\"$var=; export $var; $relink_command\"\n\telse\n\t  func_quote_for_eval \"$var_value\"\n\t  relink_command=\"$var=$func_quote_for_eval_result; export $var; $relink_command\"\n\tfi\n      done\n      # Quote the link command for shipping.\n      relink_command=\"(cd `pwd`; $SHELL $progpath $preserve_args --mode=relink $libtool_args @inst_prefix_dir@)\"\n      relink_command=`$ECHO \"$relink_command\" | $SED \"$sed_quote_subst\"`\n      if test \"$hardcode_automatic\" = yes ; then\n\trelink_command=\n      fi\n\n      # Only create the output if not a dry run.\n      $opt_dry_run || {\n\tfor installed in no yes; do\n\t  if test \"$installed\" = yes; then\n\t    if test -z \"$install_libdir\"; then\n\t      break\n\t    fi\n\t    output=\"$output_objdir/$outputname\"i\n\t    # Replace all uninstalled libtool libraries with the installed ones\n\t    newdependency_libs=\n\t    for deplib in $dependency_libs; do\n\t      case $deplib in\n\t      *.la)\n\t\tfunc_basename \"$deplib\"\n\t\tname=\"$func_basename_result\"\n\t\tfunc_resolve_sysroot \"$deplib\"\n\t\teval libdir=`${SED} -n -e 's/^libdir=\\(.*\\)$/\\1/p' $func_resolve_sysroot_result`\n\t\ttest -z \"$libdir\" && \\\n\t\t  func_fatal_error \"\\`$deplib' is not a valid libtool archive\"\n\t\tfunc_append newdependency_libs \" ${lt_sysroot:+=}$libdir/$name\"\n\t\t;;\n\t      -L*)\n\t\tfunc_stripname -L '' \"$deplib\"\n\t\tfunc_replace_sysroot \"$func_stripname_result\"\n\t\tfunc_append newdependency_libs \" -L$func_replace_sysroot_result\"\n\t\t;;\n\t      -R*)\n\t\tfunc_stripname -R '' \"$deplib\"\n\t\tfunc_replace_sysroot \"$func_stripname_result\"\n\t\tfunc_append newdependency_libs \" -R$func_replace_sysroot_result\"\n\t\t;;\n\t      *) func_append newdependency_libs \" $deplib\" ;;\n\t      esac\n\t    done\n\t    dependency_libs=\"$newdependency_libs\"\n\t    newdlfiles=\n\n\t    for lib in $dlfiles; do\n\t      case $lib in\n\t      *.la)\n\t        func_basename \"$lib\"\n\t\tname=\"$func_basename_result\"\n\t\teval libdir=`${SED} -n -e 's/^libdir=\\(.*\\)$/\\1/p' $lib`\n\t\ttest -z \"$libdir\" && \\\n\t\t  func_fatal_error \"\\`$lib' is not a valid libtool archive\"\n\t\tfunc_append newdlfiles \" ${lt_sysroot:+=}$libdir/$name\"\n\t\t;;\n\t      *) func_append newdlfiles \" $lib\" ;;\n\t      esac\n\t    done\n\t    dlfiles=\"$newdlfiles\"\n\t    newdlprefiles=\n\t    for lib in $dlprefiles; do\n\t      case $lib in\n\t      *.la)\n\t\t# Only pass preopened files to the pseudo-archive (for\n\t\t# eventual linking with the app. that links it) if we\n\t\t# didn't already link the preopened objects directly into\n\t\t# the library:\n\t\tfunc_basename \"$lib\"\n\t\tname=\"$func_basename_result\"\n\t\teval libdir=`${SED} -n -e 's/^libdir=\\(.*\\)$/\\1/p' $lib`\n\t\ttest -z \"$libdir\" && \\\n\t\t  func_fatal_error \"\\`$lib' is not a valid libtool archive\"\n\t\tfunc_append newdlprefiles \" ${lt_sysroot:+=}$libdir/$name\"\n\t\t;;\n\t      esac\n\t    done\n\t    dlprefiles=\"$newdlprefiles\"\n\t  else\n\t    newdlfiles=\n\t    for lib in $dlfiles; do\n\t      case $lib in\n\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) abs=\"$lib\" ;;\n\t\t*) abs=`pwd`\"/$lib\" ;;\n\t      esac\n\t      func_append newdlfiles \" $abs\"\n\t    done\n\t    dlfiles=\"$newdlfiles\"\n\t    newdlprefiles=\n\t    for lib in $dlprefiles; do\n\t      case $lib in\n\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) abs=\"$lib\" ;;\n\t\t*) abs=`pwd`\"/$lib\" ;;\n\t      esac\n\t      func_append newdlprefiles \" $abs\"\n\t    done\n\t    dlprefiles=\"$newdlprefiles\"\n\t  fi\n\t  $RM $output\n\t  # place dlname in correct position for cygwin\n\t  # In fact, it would be nice if we could use this code for all target\n\t  # systems that can't hard-code library paths into their executables\n\t  # and that have no shared library path variable independent of PATH,\n\t  # but it turns out we can't easily determine that from inspecting\n\t  # libtool variables, so we have to hard-code the OSs to which it\n\t  # applies here; at the moment, that means platforms that use the PE\n\t  # object format with DLL files.  See the long comment at the top of\n\t  # tests/bindir.at for full details.\n\t  tdlname=$dlname\n\t  case $host,$output,$installed,$module,$dlname in\n\t    *cygwin*,*lai,yes,no,*.dll | *mingw*,*lai,yes,no,*.dll | *cegcc*,*lai,yes,no,*.dll)\n\t      # If a -bindir argument was supplied, place the dll there.\n\t      if test \"x$bindir\" != x ;\n\t      then\n\t\tfunc_relative_path \"$install_libdir\" \"$bindir\"\n\t\ttdlname=$func_relative_path_result$dlname\n\t      else\n\t\t# Otherwise fall back on heuristic.\n\t\ttdlname=../bin/$dlname\n\t      fi\n\t      ;;\n\t  esac\n\t  $ECHO > $output \"\\\n# $outputname - a libtool library file\n# Generated by $PROGRAM (GNU $PACKAGE$TIMESTAMP) $VERSION\n#\n# Please DO NOT delete this file!\n# It is necessary for linking the library.\n\n# The name that we can dlopen(3).\ndlname='$tdlname'\n\n# Names of this library.\nlibrary_names='$library_names'\n\n# The name of the static archive.\nold_library='$old_library'\n\n# Linker flags that can not go in dependency_libs.\ninherited_linker_flags='$new_inherited_linker_flags'\n\n# Libraries that this one depends upon.\ndependency_libs='$dependency_libs'\n\n# Names of additional weak libraries provided by this library\nweak_library_names='$weak_libs'\n\n# Version information for $libname.\ncurrent=$current\nage=$age\nrevision=$revision\n\n# Is this an already installed library?\ninstalled=$installed\n\n# Should we warn about portability when linking against -modules?\nshouldnotlink=$module\n\n# Files to dlopen/dlpreopen\ndlopen='$dlfiles'\ndlpreopen='$dlprefiles'\n\n# Directory that this library needs to be installed in:\nlibdir='$install_libdir'\"\n\t  if test \"$installed\" = no && test \"$need_relink\" = yes; then\n\t    $ECHO >> $output \"\\\nrelink_command=\\\"$relink_command\\\"\"\n\t  fi\n\tdone\n      }\n\n      # Do a symbolic link so that the libtool archive can be found in\n      # LD_LIBRARY_PATH before the program is installed.\n      func_show_eval '( cd \"$output_objdir\" && $RM \"$outputname\" && $LN_S \"../$outputname\" \"$outputname\" )' 'exit $?'\n      ;;\n    esac\n    exit $EXIT_SUCCESS\n}\n\n{ test \"$opt_mode\" = link || test \"$opt_mode\" = relink; } &&\n    func_mode_link ${1+\"$@\"}\n\n\n# func_mode_uninstall arg...\nfunc_mode_uninstall ()\n{\n    $opt_debug\n    RM=\"$nonopt\"\n    files=\n    rmforce=\n    exit_status=0\n\n    # This variable tells wrapper scripts just to set variables rather\n    # than running their programs.\n    libtool_install_magic=\"$magic\"\n\n    for arg\n    do\n      case $arg in\n      -f) func_append RM \" $arg\"; rmforce=yes ;;\n      -*) func_append RM \" $arg\" ;;\n      *) func_append files \" $arg\" ;;\n      esac\n    done\n\n    test -z \"$RM\" && \\\n      func_fatal_help \"you must specify an RM program\"\n\n    rmdirs=\n\n    for file in $files; do\n      func_dirname \"$file\" \"\" \".\"\n      dir=\"$func_dirname_result\"\n      if test \"X$dir\" = X.; then\n\todir=\"$objdir\"\n      else\n\todir=\"$dir/$objdir\"\n      fi\n      func_basename \"$file\"\n      name=\"$func_basename_result\"\n      test \"$opt_mode\" = uninstall && odir=\"$dir\"\n\n      # Remember odir for removal later, being careful to avoid duplicates\n      if test \"$opt_mode\" = clean; then\n\tcase \" $rmdirs \" in\n\t  *\" $odir \"*) ;;\n\t  *) func_append rmdirs \" $odir\" ;;\n\tesac\n      fi\n\n      # Don't error if the file doesn't exist and rm -f was used.\n      if { test -L \"$file\"; } >/dev/null 2>&1 ||\n\t { test -h \"$file\"; } >/dev/null 2>&1 ||\n\t test -f \"$file\"; then\n\t:\n      elif test -d \"$file\"; then\n\texit_status=1\n\tcontinue\n      elif test \"$rmforce\" = yes; then\n\tcontinue\n      fi\n\n      rmfiles=\"$file\"\n\n      case $name in\n      *.la)\n\t# Possibly a libtool archive, so verify it.\n\tif func_lalib_p \"$file\"; then\n\t  func_source $dir/$name\n\n\t  # Delete the libtool libraries and symlinks.\n\t  for n in $library_names; do\n\t    func_append rmfiles \" $odir/$n\"\n\t  done\n\t  test -n \"$old_library\" && func_append rmfiles \" $odir/$old_library\"\n\n\t  case \"$opt_mode\" in\n\t  clean)\n\t    case \" $library_names \" in\n\t    *\" $dlname \"*) ;;\n\t    *) test -n \"$dlname\" && func_append rmfiles \" $odir/$dlname\" ;;\n\t    esac\n\t    test -n \"$libdir\" && func_append rmfiles \" $odir/$name $odir/${name}i\"\n\t    ;;\n\t  uninstall)\n\t    if test -n \"$library_names\"; then\n\t      # Do each command in the postuninstall commands.\n\t      func_execute_cmds \"$postuninstall_cmds\" 'test \"$rmforce\" = yes || exit_status=1'\n\t    fi\n\n\t    if test -n \"$old_library\"; then\n\t      # Do each command in the old_postuninstall commands.\n\t      func_execute_cmds \"$old_postuninstall_cmds\" 'test \"$rmforce\" = yes || exit_status=1'\n\t    fi\n\t    # FIXME: should reinstall the best remaining shared library.\n\t    ;;\n\t  esac\n\tfi\n\t;;\n\n      *.lo)\n\t# Possibly a libtool object, so verify it.\n\tif func_lalib_p \"$file\"; then\n\n\t  # Read the .lo file\n\t  func_source $dir/$name\n\n\t  # Add PIC object to the list of files to remove.\n\t  if test -n \"$pic_object\" &&\n\t     test \"$pic_object\" != none; then\n\t    func_append rmfiles \" $dir/$pic_object\"\n\t  fi\n\n\t  # Add non-PIC object to the list of files to remove.\n\t  if test -n \"$non_pic_object\" &&\n\t     test \"$non_pic_object\" != none; then\n\t    func_append rmfiles \" $dir/$non_pic_object\"\n\t  fi\n\tfi\n\t;;\n\n      *)\n\tif test \"$opt_mode\" = clean ; then\n\t  noexename=$name\n\t  case $file in\n\t  *.exe)\n\t    func_stripname '' '.exe' \"$file\"\n\t    file=$func_stripname_result\n\t    func_stripname '' '.exe' \"$name\"\n\t    noexename=$func_stripname_result\n\t    # $file with .exe has already been added to rmfiles,\n\t    # add $file without .exe\n\t    func_append rmfiles \" $file\"\n\t    ;;\n\t  esac\n\t  # Do a test to see if this is a libtool program.\n\t  if func_ltwrapper_p \"$file\"; then\n\t    if func_ltwrapper_executable_p \"$file\"; then\n\t      func_ltwrapper_scriptname \"$file\"\n\t      relink_command=\n\t      func_source $func_ltwrapper_scriptname_result\n\t      func_append rmfiles \" $func_ltwrapper_scriptname_result\"\n\t    else\n\t      relink_command=\n\t      func_source $dir/$noexename\n\t    fi\n\n\t    # note $name still contains .exe if it was in $file originally\n\t    # as does the version of $file that was added into $rmfiles\n\t    func_append rmfiles \" $odir/$name $odir/${name}S.${objext}\"\n\t    if test \"$fast_install\" = yes && test -n \"$relink_command\"; then\n\t      func_append rmfiles \" $odir/lt-$name\"\n\t    fi\n\t    if test \"X$noexename\" != \"X$name\" ; then\n\t      func_append rmfiles \" $odir/lt-${noexename}.c\"\n\t    fi\n\t  fi\n\tfi\n\t;;\n      esac\n      func_show_eval \"$RM $rmfiles\" 'exit_status=1'\n    done\n\n    # Try to remove the ${objdir}s in the directories where we deleted files\n    for dir in $rmdirs; do\n      if test -d \"$dir\"; then\n\tfunc_show_eval \"rmdir $dir >/dev/null 2>&1\"\n      fi\n    done\n\n    exit $exit_status\n}\n\n{ test \"$opt_mode\" = uninstall || test \"$opt_mode\" = clean; } &&\n    func_mode_uninstall ${1+\"$@\"}\n\ntest -z \"$opt_mode\" && {\n  help=\"$generic_help\"\n  func_fatal_help \"you must specify a MODE\"\n}\n\ntest -z \"$exec_cmd\" && \\\n  func_fatal_help \"invalid operation mode \\`$opt_mode'\"\n\nif test -n \"$exec_cmd\"; then\n  eval exec \"$exec_cmd\"\n  exit $EXIT_FAILURE\nfi\n\nexit $exit_status\n\n\n# The TAGs below are defined such that we never get into a situation\n# in which we disable both kinds of libraries.  Given conflicting\n# choices, we go for a static library, that is the most portable,\n# since we can't tell whether shared libraries were disabled because\n# the user asked for that or because the platform doesn't support\n# them.  This is particularly important on AIX, because we don't\n# support having both static and shared libraries enabled at the same\n# time on that platform, so we default to a shared-only configuration.\n# If a disable-shared tag is given, we'll fallback to a static-only\n# configuration.  But we'll never go from static-only to shared-only.\n\n# ### BEGIN LIBTOOL TAG CONFIG: disable-shared\nbuild_libtool_libs=no\nbuild_old_libs=yes\n# ### END LIBTOOL TAG CONFIG: disable-shared\n\n# ### BEGIN LIBTOOL TAG CONFIG: disable-static\nbuild_old_libs=`case $build_libtool_libs in yes) echo no;; *) echo yes;; esac`\n# ### END LIBTOOL TAG CONFIG: disable-static\n\n# Local Variables:\n# mode:shell-script\n# sh-indentation:2\n# End:\n# vi:sw=2\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/thirdparty/enet/enet/m4/libtool.m4": "# libtool.m4 - Configure libtool for the host system. -*-Autoconf-*-\n#\n#   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2003, 2004, 2005,\n#                 2006, 2007, 2008, 2009, 2010, 2011 Free Software\n#                 Foundation, Inc.\n#   Written by Gordon Matzigkeit, 1996\n#\n# This file is free software; the Free Software Foundation gives\n# unlimited permission to copy and/or distribute it, with or without\n# modifications, as long as this notice is preserved.\n\nm4_define([_LT_COPYING], [dnl\n#   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2003, 2004, 2005,\n#                 2006, 2007, 2008, 2009, 2010, 2011 Free Software\n#                 Foundation, Inc.\n#   Written by Gordon Matzigkeit, 1996\n#\n#   This file is part of GNU Libtool.\n#\n# GNU Libtool is free software; you can redistribute it and/or\n# modify it under the terms of the GNU General Public License as\n# published by the Free Software Foundation; either version 2 of\n# the License, or (at your option) any later version.\n#\n# As a special exception to the GNU General Public License,\n# if you distribute this file as part of a program or library that\n# is built using GNU Libtool, you may include this file under the\n# same distribution terms that you use for the rest of that program.\n#\n# GNU Libtool is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with GNU Libtool; see the file COPYING.  If not, a copy\n# can be downloaded from http://www.gnu.org/licenses/gpl.html, or\n# obtained by writing to the Free Software Foundation, Inc.,\n# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n])\n\n# serial 57 LT_INIT\n\n\n# LT_PREREQ(VERSION)\n# ------------------\n# Complain and exit if this libtool version is less that VERSION.\nm4_defun([LT_PREREQ],\n[m4_if(m4_version_compare(m4_defn([LT_PACKAGE_VERSION]), [$1]), -1,\n       [m4_default([$3],\n\t\t   [m4_fatal([Libtool version $1 or higher is required],\n\t\t             63)])],\n       [$2])])\n\n\n# _LT_CHECK_BUILDDIR\n# ------------------\n# Complain if the absolute build directory name contains unusual characters\nm4_defun([_LT_CHECK_BUILDDIR],\n[case `pwd` in\n  *\\ * | *\\\t*)\n    AC_MSG_WARN([Libtool does not cope well with whitespace in `pwd`]) ;;\nesac\n])\n\n\n# LT_INIT([OPTIONS])\n# ------------------\nAC_DEFUN([LT_INIT],\n[AC_PREREQ([2.58])dnl We use AC_INCLUDES_DEFAULT\nAC_REQUIRE([AC_CONFIG_AUX_DIR_DEFAULT])dnl\nAC_BEFORE([$0], [LT_LANG])dnl\nAC_BEFORE([$0], [LT_OUTPUT])dnl\nAC_BEFORE([$0], [LTDL_INIT])dnl\nm4_require([_LT_CHECK_BUILDDIR])dnl\n\ndnl Autoconf doesn't catch unexpanded LT_ macros by default:\nm4_pattern_forbid([^_?LT_[A-Z_]+$])dnl\nm4_pattern_allow([^(_LT_EOF|LT_DLGLOBAL|LT_DLLAZY_OR_NOW|LT_MULTI_MODULE)$])dnl\ndnl aclocal doesn't pull ltoptions.m4, ltsugar.m4, or ltversion.m4\ndnl unless we require an AC_DEFUNed macro:\nAC_REQUIRE([LTOPTIONS_VERSION])dnl\nAC_REQUIRE([LTSUGAR_VERSION])dnl\nAC_REQUIRE([LTVERSION_VERSION])dnl\nAC_REQUIRE([LTOBSOLETE_VERSION])dnl\nm4_require([_LT_PROG_LTMAIN])dnl\n\n_LT_SHELL_INIT([SHELL=${CONFIG_SHELL-/bin/sh}])\n\ndnl Parse OPTIONS\n_LT_SET_OPTIONS([$0], [$1])\n\n# This can be used to rebuild libtool when needed\nLIBTOOL_DEPS=\"$ltmain\"\n\n# Always use our own libtool.\nLIBTOOL='$(SHELL) $(top_builddir)/libtool'\nAC_SUBST(LIBTOOL)dnl\n\n_LT_SETUP\n\n# Only expand once:\nm4_define([LT_INIT])\n])# LT_INIT\n\n# Old names:\nAU_ALIAS([AC_PROG_LIBTOOL], [LT_INIT])\nAU_ALIAS([AM_PROG_LIBTOOL], [LT_INIT])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_PROG_LIBTOOL], [])\ndnl AC_DEFUN([AM_PROG_LIBTOOL], [])\n\n\n# _LT_CC_BASENAME(CC)\n# -------------------\n# Calculate cc_basename.  Skip known compiler wrappers and cross-prefix.\nm4_defun([_LT_CC_BASENAME],\n[for cc_temp in $1\"\"; do\n  case $cc_temp in\n    compile | *[[\\\\/]]compile | ccache | *[[\\\\/]]ccache ) ;;\n    distcc | *[[\\\\/]]distcc | purify | *[[\\\\/]]purify ) ;;\n    \\-*) ;;\n    *) break;;\n  esac\ndone\ncc_basename=`$ECHO \"$cc_temp\" | $SED \"s%.*/%%; s%^$host_alias-%%\"`\n])\n\n\n# _LT_FILEUTILS_DEFAULTS\n# ----------------------\n# It is okay to use these file commands and assume they have been set\n# sensibly after `m4_require([_LT_FILEUTILS_DEFAULTS])'.\nm4_defun([_LT_FILEUTILS_DEFAULTS],\n[: ${CP=\"cp -f\"}\n: ${MV=\"mv -f\"}\n: ${RM=\"rm -f\"}\n])# _LT_FILEUTILS_DEFAULTS\n\n\n# _LT_SETUP\n# ---------\nm4_defun([_LT_SETUP],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_CANONICAL_BUILD])dnl\nAC_REQUIRE([_LT_PREPARE_SED_QUOTE_VARS])dnl\nAC_REQUIRE([_LT_PROG_ECHO_BACKSLASH])dnl\n\n_LT_DECL([], [PATH_SEPARATOR], [1], [The PATH separator for the build system])dnl\ndnl\n_LT_DECL([], [host_alias], [0], [The host system])dnl\n_LT_DECL([], [host], [0])dnl\n_LT_DECL([], [host_os], [0])dnl\ndnl\n_LT_DECL([], [build_alias], [0], [The build system])dnl\n_LT_DECL([], [build], [0])dnl\n_LT_DECL([], [build_os], [0])dnl\ndnl\nAC_REQUIRE([AC_PROG_CC])dnl\nAC_REQUIRE([LT_PATH_LD])dnl\nAC_REQUIRE([LT_PATH_NM])dnl\ndnl\nAC_REQUIRE([AC_PROG_LN_S])dnl\ntest -z \"$LN_S\" && LN_S=\"ln -s\"\n_LT_DECL([], [LN_S], [1], [Whether we need soft or hard links])dnl\ndnl\nAC_REQUIRE([LT_CMD_MAX_LEN])dnl\n_LT_DECL([objext], [ac_objext], [0], [Object file suffix (normally \"o\")])dnl\n_LT_DECL([], [exeext], [0], [Executable file suffix (normally \"\")])dnl\ndnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_CHECK_SHELL_FEATURES])dnl\nm4_require([_LT_PATH_CONVERSION_FUNCTIONS])dnl\nm4_require([_LT_CMD_RELOAD])dnl\nm4_require([_LT_CHECK_MAGIC_METHOD])dnl\nm4_require([_LT_CHECK_SHAREDLIB_FROM_LINKLIB])dnl\nm4_require([_LT_CMD_OLD_ARCHIVE])dnl\nm4_require([_LT_CMD_GLOBAL_SYMBOLS])dnl\nm4_require([_LT_WITH_SYSROOT])dnl\n\n_LT_CONFIG_LIBTOOL_INIT([\n# See if we are running on zsh, and set the options which allow our\n# commands through without removal of \\ escapes INIT.\nif test -n \"\\${ZSH_VERSION+set}\" ; then\n   setopt NO_GLOB_SUBST\nfi\n])\nif test -n \"${ZSH_VERSION+set}\" ; then\n   setopt NO_GLOB_SUBST\nfi\n\n_LT_CHECK_OBJDIR\n\nm4_require([_LT_TAG_COMPILER])dnl\n\ncase $host_os in\naix3*)\n  # AIX sometimes has problems with the GCC collect2 program.  For some\n  # reason, if we set the COLLECT_NAMES environment variable, the problems\n  # vanish in a puff of smoke.\n  if test \"X${COLLECT_NAMES+set}\" != Xset; then\n    COLLECT_NAMES=\n    export COLLECT_NAMES\n  fi\n  ;;\nesac\n\n# Global variables:\nofile=libtool\ncan_build_shared=yes\n\n# All known linkers require a `.a' archive for static linking (except MSVC,\n# which needs '.lib').\nlibext=a\n\nwith_gnu_ld=\"$lt_cv_prog_gnu_ld\"\n\nold_CC=\"$CC\"\nold_CFLAGS=\"$CFLAGS\"\n\n# Set sane defaults for various variables\ntest -z \"$CC\" && CC=cc\ntest -z \"$LTCC\" && LTCC=$CC\ntest -z \"$LTCFLAGS\" && LTCFLAGS=$CFLAGS\ntest -z \"$LD\" && LD=ld\ntest -z \"$ac_objext\" && ac_objext=o\n\n_LT_CC_BASENAME([$compiler])\n\n# Only perform the check for file, if the check method requires it\ntest -z \"$MAGIC_CMD\" && MAGIC_CMD=file\ncase $deplibs_check_method in\nfile_magic*)\n  if test \"$file_magic_cmd\" = '$MAGIC_CMD'; then\n    _LT_PATH_MAGIC\n  fi\n  ;;\nesac\n\n# Use C for the default configuration in the libtool script\nLT_SUPPORTED_TAG([CC])\n_LT_LANG_C_CONFIG\n_LT_LANG_DEFAULT_CONFIG\n_LT_CONFIG_COMMANDS\n])# _LT_SETUP\n\n\n# _LT_PREPARE_SED_QUOTE_VARS\n# --------------------------\n# Define a few sed substitution that help us do robust quoting.\nm4_defun([_LT_PREPARE_SED_QUOTE_VARS],\n[# Backslashify metacharacters that are still active within\n# double-quoted strings.\nsed_quote_subst='s/\\([[\"`$\\\\]]\\)/\\\\\\1/g'\n\n# Same as above, but do not quote variable references.\ndouble_quote_subst='s/\\([[\"`\\\\]]\\)/\\\\\\1/g'\n\n# Sed substitution to delay expansion of an escaped shell variable in a\n# double_quote_subst'ed string.\ndelay_variable_subst='s/\\\\\\\\\\\\\\\\\\\\\\$/\\\\\\\\\\\\$/g'\n\n# Sed substitution to delay expansion of an escaped single quote.\ndelay_single_quote_subst='s/'\\''/'\\'\\\\\\\\\\\\\\'\\''/g'\n\n# Sed substitution to avoid accidental globbing in evaled expressions\nno_glob_subst='s/\\*/\\\\\\*/g'\n])\n\n# _LT_PROG_LTMAIN\n# ---------------\n# Note that this code is called both from `configure', and `config.status'\n# now that we use AC_CONFIG_COMMANDS to generate libtool.  Notably,\n# `config.status' has no value for ac_aux_dir unless we are using Automake,\n# so we pass a copy along to make sure it has a sensible value anyway.\nm4_defun([_LT_PROG_LTMAIN],\n[m4_ifdef([AC_REQUIRE_AUX_FILE], [AC_REQUIRE_AUX_FILE([ltmain.sh])])dnl\n_LT_CONFIG_LIBTOOL_INIT([ac_aux_dir='$ac_aux_dir'])\nltmain=\"$ac_aux_dir/ltmain.sh\"\n])# _LT_PROG_LTMAIN\n\n\n## ------------------------------------- ##\n## Accumulate code for creating libtool. ##\n## ------------------------------------- ##\n\n# So that we can recreate a full libtool script including additional\n# tags, we accumulate the chunks of code to send to AC_CONFIG_COMMANDS\n# in macros and then make a single call at the end using the `libtool'\n# label.\n\n\n# _LT_CONFIG_LIBTOOL_INIT([INIT-COMMANDS])\n# ----------------------------------------\n# Register INIT-COMMANDS to be passed to AC_CONFIG_COMMANDS later.\nm4_define([_LT_CONFIG_LIBTOOL_INIT],\n[m4_ifval([$1],\n          [m4_append([_LT_OUTPUT_LIBTOOL_INIT],\n                     [$1\n])])])\n\n# Initialize.\nm4_define([_LT_OUTPUT_LIBTOOL_INIT])\n\n\n# _LT_CONFIG_LIBTOOL([COMMANDS])\n# ------------------------------\n# Register COMMANDS to be passed to AC_CONFIG_COMMANDS later.\nm4_define([_LT_CONFIG_LIBTOOL],\n[m4_ifval([$1],\n          [m4_append([_LT_OUTPUT_LIBTOOL_COMMANDS],\n                     [$1\n])])])\n\n# Initialize.\nm4_define([_LT_OUTPUT_LIBTOOL_COMMANDS])\n\n\n# _LT_CONFIG_SAVE_COMMANDS([COMMANDS], [INIT_COMMANDS])\n# -----------------------------------------------------\nm4_defun([_LT_CONFIG_SAVE_COMMANDS],\n[_LT_CONFIG_LIBTOOL([$1])\n_LT_CONFIG_LIBTOOL_INIT([$2])\n])\n\n\n# _LT_FORMAT_COMMENT([COMMENT])\n# -----------------------------\n# Add leading comment marks to the start of each line, and a trailing\n# full-stop to the whole comment if one is not present already.\nm4_define([_LT_FORMAT_COMMENT],\n[m4_ifval([$1], [\nm4_bpatsubst([m4_bpatsubst([$1], [^ *], [# ])],\n              [['`$\\]], [\\\\\\&])]m4_bmatch([$1], [[!?.]$], [], [.])\n)])\n\n\n\n## ------------------------ ##\n## FIXME: Eliminate VARNAME ##\n## ------------------------ ##\n\n\n# _LT_DECL([CONFIGNAME], VARNAME, VALUE, [DESCRIPTION], [IS-TAGGED?])\n# -------------------------------------------------------------------\n# CONFIGNAME is the name given to the value in the libtool script.\n# VARNAME is the (base) name used in the configure script.\n# VALUE may be 0, 1 or 2 for a computed quote escaped value based on\n# VARNAME.  Any other value will be used directly.\nm4_define([_LT_DECL],\n[lt_if_append_uniq([lt_decl_varnames], [$2], [, ],\n    [lt_dict_add_subkey([lt_decl_dict], [$2], [libtool_name],\n\t[m4_ifval([$1], [$1], [$2])])\n    lt_dict_add_subkey([lt_decl_dict], [$2], [value], [$3])\n    m4_ifval([$4],\n\t[lt_dict_add_subkey([lt_decl_dict], [$2], [description], [$4])])\n    lt_dict_add_subkey([lt_decl_dict], [$2],\n\t[tagged?], [m4_ifval([$5], [yes], [no])])])\n])\n\n\n# _LT_TAGDECL([CONFIGNAME], VARNAME, VALUE, [DESCRIPTION])\n# --------------------------------------------------------\nm4_define([_LT_TAGDECL], [_LT_DECL([$1], [$2], [$3], [$4], [yes])])\n\n\n# lt_decl_tag_varnames([SEPARATOR], [VARNAME1...])\n# ------------------------------------------------\nm4_define([lt_decl_tag_varnames],\n[_lt_decl_filter([tagged?], [yes], $@)])\n\n\n# _lt_decl_filter(SUBKEY, VALUE, [SEPARATOR], [VARNAME1..])\n# ---------------------------------------------------------\nm4_define([_lt_decl_filter],\n[m4_case([$#],\n  [0], [m4_fatal([$0: too few arguments: $#])],\n  [1], [m4_fatal([$0: too few arguments: $#: $1])],\n  [2], [lt_dict_filter([lt_decl_dict], [$1], [$2], [], lt_decl_varnames)],\n  [3], [lt_dict_filter([lt_decl_dict], [$1], [$2], [$3], lt_decl_varnames)],\n  [lt_dict_filter([lt_decl_dict], $@)])[]dnl\n])\n\n\n# lt_decl_quote_varnames([SEPARATOR], [VARNAME1...])\n# --------------------------------------------------\nm4_define([lt_decl_quote_varnames],\n[_lt_decl_filter([value], [1], $@)])\n\n\n# lt_decl_dquote_varnames([SEPARATOR], [VARNAME1...])\n# ---------------------------------------------------\nm4_define([lt_decl_dquote_varnames],\n[_lt_decl_filter([value], [2], $@)])\n\n\n# lt_decl_varnames_tagged([SEPARATOR], [VARNAME1...])\n# ---------------------------------------------------\nm4_define([lt_decl_varnames_tagged],\n[m4_assert([$# <= 2])dnl\n_$0(m4_quote(m4_default([$1], [[, ]])),\n    m4_ifval([$2], [[$2]], [m4_dquote(lt_decl_tag_varnames)]),\n    m4_split(m4_normalize(m4_quote(_LT_TAGS)), [ ]))])\nm4_define([_lt_decl_varnames_tagged],\n[m4_ifval([$3], [lt_combine([$1], [$2], [_], $3)])])\n\n\n# lt_decl_all_varnames([SEPARATOR], [VARNAME1...])\n# ------------------------------------------------\nm4_define([lt_decl_all_varnames],\n[_$0(m4_quote(m4_default([$1], [[, ]])),\n     m4_if([$2], [],\n\t   m4_quote(lt_decl_varnames),\n\tm4_quote(m4_shift($@))))[]dnl\n])\nm4_define([_lt_decl_all_varnames],\n[lt_join($@, lt_decl_varnames_tagged([$1],\n\t\t\tlt_decl_tag_varnames([[, ]], m4_shift($@))))dnl\n])\n\n\n# _LT_CONFIG_STATUS_DECLARE([VARNAME])\n# ------------------------------------\n# Quote a variable value, and forward it to `config.status' so that its\n# declaration there will have the same value as in `configure'.  VARNAME\n# must have a single quote delimited value for this to work.\nm4_define([_LT_CONFIG_STATUS_DECLARE],\n[$1='`$ECHO \"$][$1\" | $SED \"$delay_single_quote_subst\"`'])\n\n\n# _LT_CONFIG_STATUS_DECLARATIONS\n# ------------------------------\n# We delimit libtool config variables with single quotes, so when\n# we write them to config.status, we have to be sure to quote all\n# embedded single quotes properly.  In configure, this macro expands\n# each variable declared with _LT_DECL (and _LT_TAGDECL) into:\n#\n#    <var>='`$ECHO \"$<var>\" | $SED \"$delay_single_quote_subst\"`'\nm4_defun([_LT_CONFIG_STATUS_DECLARATIONS],\n[m4_foreach([_lt_var], m4_quote(lt_decl_all_varnames),\n    [m4_n([_LT_CONFIG_STATUS_DECLARE(_lt_var)])])])\n\n\n# _LT_LIBTOOL_TAGS\n# ----------------\n# Output comment and list of tags supported by the script\nm4_defun([_LT_LIBTOOL_TAGS],\n[_LT_FORMAT_COMMENT([The names of the tagged configurations supported by this script])dnl\navailable_tags=\"_LT_TAGS\"dnl\n])\n\n\n# _LT_LIBTOOL_DECLARE(VARNAME, [TAG])\n# -----------------------------------\n# Extract the dictionary values for VARNAME (optionally with TAG) and\n# expand to a commented shell variable setting:\n#\n#    # Some comment about what VAR is for.\n#    visible_name=$lt_internal_name\nm4_define([_LT_LIBTOOL_DECLARE],\n[_LT_FORMAT_COMMENT(m4_quote(lt_dict_fetch([lt_decl_dict], [$1],\n\t\t\t\t\t   [description])))[]dnl\nm4_pushdef([_libtool_name],\n    m4_quote(lt_dict_fetch([lt_decl_dict], [$1], [libtool_name])))[]dnl\nm4_case(m4_quote(lt_dict_fetch([lt_decl_dict], [$1], [value])),\n    [0], [_libtool_name=[$]$1],\n    [1], [_libtool_name=$lt_[]$1],\n    [2], [_libtool_name=$lt_[]$1],\n    [_libtool_name=lt_dict_fetch([lt_decl_dict], [$1], [value])])[]dnl\nm4_ifval([$2], [_$2])[]m4_popdef([_libtool_name])[]dnl\n])\n\n\n# _LT_LIBTOOL_CONFIG_VARS\n# -----------------------\n# Produce commented declarations of non-tagged libtool config variables\n# suitable for insertion in the LIBTOOL CONFIG section of the `libtool'\n# script.  Tagged libtool config variables (even for the LIBTOOL CONFIG\n# section) are produced by _LT_LIBTOOL_TAG_VARS.\nm4_defun([_LT_LIBTOOL_CONFIG_VARS],\n[m4_foreach([_lt_var],\n    m4_quote(_lt_decl_filter([tagged?], [no], [], lt_decl_varnames)),\n    [m4_n([_LT_LIBTOOL_DECLARE(_lt_var)])])])\n\n\n# _LT_LIBTOOL_TAG_VARS(TAG)\n# -------------------------\nm4_define([_LT_LIBTOOL_TAG_VARS],\n[m4_foreach([_lt_var], m4_quote(lt_decl_tag_varnames),\n    [m4_n([_LT_LIBTOOL_DECLARE(_lt_var, [$1])])])])\n\n\n# _LT_TAGVAR(VARNAME, [TAGNAME])\n# ------------------------------\nm4_define([_LT_TAGVAR], [m4_ifval([$2], [$1_$2], [$1])])\n\n\n# _LT_CONFIG_COMMANDS\n# -------------------\n# Send accumulated output to $CONFIG_STATUS.  Thanks to the lists of\n# variables for single and double quote escaping we saved from calls\n# to _LT_DECL, we can put quote escaped variables declarations\n# into `config.status', and then the shell code to quote escape them in\n# for loops in `config.status'.  Finally, any additional code accumulated\n# from calls to _LT_CONFIG_LIBTOOL_INIT is expanded.\nm4_defun([_LT_CONFIG_COMMANDS],\n[AC_PROVIDE_IFELSE([LT_OUTPUT],\n\tdnl If the libtool generation code has been placed in $CONFIG_LT,\n\tdnl instead of duplicating it all over again into config.status,\n\tdnl then we will have config.status run $CONFIG_LT later, so it\n\tdnl needs to know what name is stored there:\n        [AC_CONFIG_COMMANDS([libtool],\n            [$SHELL $CONFIG_LT || AS_EXIT(1)], [CONFIG_LT='$CONFIG_LT'])],\n    dnl If the libtool generation code is destined for config.status,\n    dnl expand the accumulated commands and init code now:\n    [AC_CONFIG_COMMANDS([libtool],\n        [_LT_OUTPUT_LIBTOOL_COMMANDS], [_LT_OUTPUT_LIBTOOL_COMMANDS_INIT])])\n])#_LT_CONFIG_COMMANDS\n\n\n# Initialize.\nm4_define([_LT_OUTPUT_LIBTOOL_COMMANDS_INIT],\n[\n\n# The HP-UX ksh and POSIX shell print the target directory to stdout\n# if CDPATH is set.\n(unset CDPATH) >/dev/null 2>&1 && unset CDPATH\n\nsed_quote_subst='$sed_quote_subst'\ndouble_quote_subst='$double_quote_subst'\ndelay_variable_subst='$delay_variable_subst'\n_LT_CONFIG_STATUS_DECLARATIONS\nLTCC='$LTCC'\nLTCFLAGS='$LTCFLAGS'\ncompiler='$compiler_DEFAULT'\n\n# A function that is used when there is no print builtin or printf.\nfunc_fallback_echo ()\n{\n  eval 'cat <<_LTECHO_EOF\n\\$[]1\n_LTECHO_EOF'\n}\n\n# Quote evaled strings.\nfor var in lt_decl_all_varnames([[ \\\n]], lt_decl_quote_varnames); do\n    case \\`eval \\\\\\\\\\$ECHO \\\\\\\\\"\"\\\\\\\\\\$\\$var\"\\\\\\\\\"\\` in\n    *[[\\\\\\\\\\\\\\`\\\\\"\\\\\\$]]*)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\`\\\\\\$ECHO \\\\\"\\\\\\$\\$var\\\\\" | \\\\\\$SED \\\\\"\\\\\\$sed_quote_subst\\\\\"\\\\\\`\\\\\\\\\\\\\"\"\n      ;;\n    *)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\$\\$var\\\\\\\\\\\\\"\"\n      ;;\n    esac\ndone\n\n# Double-quote double-evaled strings.\nfor var in lt_decl_all_varnames([[ \\\n]], lt_decl_dquote_varnames); do\n    case \\`eval \\\\\\\\\\$ECHO \\\\\\\\\"\"\\\\\\\\\\$\\$var\"\\\\\\\\\"\\` in\n    *[[\\\\\\\\\\\\\\`\\\\\"\\\\\\$]]*)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\`\\\\\\$ECHO \\\\\"\\\\\\$\\$var\\\\\" | \\\\\\$SED -e \\\\\"\\\\\\$double_quote_subst\\\\\" -e \\\\\"\\\\\\$sed_quote_subst\\\\\" -e \\\\\"\\\\\\$delay_variable_subst\\\\\"\\\\\\`\\\\\\\\\\\\\"\"\n      ;;\n    *)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\$\\$var\\\\\\\\\\\\\"\"\n      ;;\n    esac\ndone\n\n_LT_OUTPUT_LIBTOOL_INIT\n])\n\n# _LT_GENERATED_FILE_INIT(FILE, [COMMENT])\n# ------------------------------------\n# Generate a child script FILE with all initialization necessary to\n# reuse the environment learned by the parent script, and make the\n# file executable.  If COMMENT is supplied, it is inserted after the\n# `#!' sequence but before initialization text begins.  After this\n# macro, additional text can be appended to FILE to form the body of\n# the child script.  The macro ends with non-zero status if the\n# file could not be fully written (such as if the disk is full).\nm4_ifdef([AS_INIT_GENERATED],\n[m4_defun([_LT_GENERATED_FILE_INIT],[AS_INIT_GENERATED($@)])],\n[m4_defun([_LT_GENERATED_FILE_INIT],\n[m4_require([AS_PREPARE])]dnl\n[m4_pushdef([AS_MESSAGE_LOG_FD])]dnl\n[lt_write_fail=0\ncat >$1 <<_ASEOF || lt_write_fail=1\n#! $SHELL\n# Generated by $as_me.\n$2\nSHELL=\\${CONFIG_SHELL-$SHELL}\nexport SHELL\n_ASEOF\ncat >>$1 <<\\_ASEOF || lt_write_fail=1\nAS_SHELL_SANITIZE\n_AS_PREPARE\nexec AS_MESSAGE_FD>&1\n_ASEOF\ntest $lt_write_fail = 0 && chmod +x $1[]dnl\nm4_popdef([AS_MESSAGE_LOG_FD])])])# _LT_GENERATED_FILE_INIT\n\n# LT_OUTPUT\n# ---------\n# This macro allows early generation of the libtool script (before\n# AC_OUTPUT is called), incase it is used in configure for compilation\n# tests.\nAC_DEFUN([LT_OUTPUT],\n[: ${CONFIG_LT=./config.lt}\nAC_MSG_NOTICE([creating $CONFIG_LT])\n_LT_GENERATED_FILE_INIT([\"$CONFIG_LT\"],\n[# Run this file to recreate a libtool stub with the current configuration.])\n\ncat >>\"$CONFIG_LT\" <<\\_LTEOF\nlt_cl_silent=false\nexec AS_MESSAGE_LOG_FD>>config.log\n{\n  echo\n  AS_BOX([Running $as_me.])\n} >&AS_MESSAGE_LOG_FD\n\nlt_cl_help=\"\\\n\\`$as_me' creates a local libtool stub from the current configuration,\nfor use in further configure time tests before the real libtool is\ngenerated.\n\nUsage: $[0] [[OPTIONS]]\n\n  -h, --help      print this help, then exit\n  -V, --version   print version number, then exit\n  -q, --quiet     do not print progress messages\n  -d, --debug     don't remove temporary files\n\nReport bugs to <bug-libtool@gnu.org>.\"\n\nlt_cl_version=\"\\\nm4_ifset([AC_PACKAGE_NAME], [AC_PACKAGE_NAME ])config.lt[]dnl\nm4_ifset([AC_PACKAGE_VERSION], [ AC_PACKAGE_VERSION])\nconfigured by $[0], generated by m4_PACKAGE_STRING.\n\nCopyright (C) 2011 Free Software Foundation, Inc.\nThis config.lt script is free software; the Free Software Foundation\ngives unlimited permision to copy, distribute and modify it.\"\n\nwhile test $[#] != 0\ndo\n  case $[1] in\n    --version | --v* | -V )\n      echo \"$lt_cl_version\"; exit 0 ;;\n    --help | --h* | -h )\n      echo \"$lt_cl_help\"; exit 0 ;;\n    --debug | --d* | -d )\n      debug=: ;;\n    --quiet | --q* | --silent | --s* | -q )\n      lt_cl_silent=: ;;\n\n    -*) AC_MSG_ERROR([unrecognized option: $[1]\nTry \\`$[0] --help' for more information.]) ;;\n\n    *) AC_MSG_ERROR([unrecognized argument: $[1]\nTry \\`$[0] --help' for more information.]) ;;\n  esac\n  shift\ndone\n\nif $lt_cl_silent; then\n  exec AS_MESSAGE_FD>/dev/null\nfi\n_LTEOF\n\ncat >>\"$CONFIG_LT\" <<_LTEOF\n_LT_OUTPUT_LIBTOOL_COMMANDS_INIT\n_LTEOF\n\ncat >>\"$CONFIG_LT\" <<\\_LTEOF\nAC_MSG_NOTICE([creating $ofile])\n_LT_OUTPUT_LIBTOOL_COMMANDS\nAS_EXIT(0)\n_LTEOF\nchmod +x \"$CONFIG_LT\"\n\n# configure is writing to config.log, but config.lt does its own redirection,\n# appending to config.log, which fails on DOS, as config.log is still kept\n# open by configure.  Here we exec the FD to /dev/null, effectively closing\n# config.log, so it can be properly (re)opened and appended to by config.lt.\nlt_cl_success=:\ntest \"$silent\" = yes &&\n  lt_config_lt_args=\"$lt_config_lt_args --quiet\"\nexec AS_MESSAGE_LOG_FD>/dev/null\n$SHELL \"$CONFIG_LT\" $lt_config_lt_args || lt_cl_success=false\nexec AS_MESSAGE_LOG_FD>>config.log\n$lt_cl_success || AS_EXIT(1)\n])# LT_OUTPUT\n\n\n# _LT_CONFIG(TAG)\n# ---------------\n# If TAG is the built-in tag, create an initial libtool script with a\n# default configuration from the untagged config vars.  Otherwise add code\n# to config.status for appending the configuration named by TAG from the\n# matching tagged config vars.\nm4_defun([_LT_CONFIG],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\n_LT_CONFIG_SAVE_COMMANDS([\n  m4_define([_LT_TAG], m4_if([$1], [], [C], [$1]))dnl\n  m4_if(_LT_TAG, [C], [\n    # See if we are running on zsh, and set the options which allow our\n    # commands through without removal of \\ escapes.\n    if test -n \"${ZSH_VERSION+set}\" ; then\n      setopt NO_GLOB_SUBST\n    fi\n\n    cfgfile=\"${ofile}T\"\n    trap \"$RM \\\"$cfgfile\\\"; exit 1\" 1 2 15\n    $RM \"$cfgfile\"\n\n    cat <<_LT_EOF >> \"$cfgfile\"\n#! $SHELL\n\n# `$ECHO \"$ofile\" | sed 's%^.*/%%'` - Provide generalized library-building support services.\n# Generated automatically by $as_me ($PACKAGE$TIMESTAMP) $VERSION\n# Libtool was configured on host `(hostname || uname -n) 2>/dev/null | sed 1q`:\n# NOTE: Changes made to this file will be lost: look at ltmain.sh.\n#\n_LT_COPYING\n_LT_LIBTOOL_TAGS\n\n# ### BEGIN LIBTOOL CONFIG\n_LT_LIBTOOL_CONFIG_VARS\n_LT_LIBTOOL_TAG_VARS\n# ### END LIBTOOL CONFIG\n\n_LT_EOF\n\n  case $host_os in\n  aix3*)\n    cat <<\\_LT_EOF >> \"$cfgfile\"\n# AIX sometimes has problems with the GCC collect2 program.  For some\n# reason, if we set the COLLECT_NAMES environment variable, the problems\n# vanish in a puff of smoke.\nif test \"X${COLLECT_NAMES+set}\" != Xset; then\n  COLLECT_NAMES=\n  export COLLECT_NAMES\nfi\n_LT_EOF\n    ;;\n  esac\n\n  _LT_PROG_LTMAIN\n\n  # We use sed instead of cat because bash on DJGPP gets confused if\n  # if finds mixed CR/LF and LF-only lines.  Since sed operates in\n  # text mode, it properly converts lines to CR/LF.  This bash problem\n  # is reportedly fixed, but why not run on old versions too?\n  sed '$q' \"$ltmain\" >> \"$cfgfile\" \\\n     || (rm -f \"$cfgfile\"; exit 1)\n\n  _LT_PROG_REPLACE_SHELLFNS\n\n   mv -f \"$cfgfile\" \"$ofile\" ||\n    (rm -f \"$ofile\" && cp \"$cfgfile\" \"$ofile\" && rm -f \"$cfgfile\")\n  chmod +x \"$ofile\"\n],\n[cat <<_LT_EOF >> \"$ofile\"\n\ndnl Unfortunately we have to use $1 here, since _LT_TAG is not expanded\ndnl in a comment (ie after a #).\n# ### BEGIN LIBTOOL TAG CONFIG: $1\n_LT_LIBTOOL_TAG_VARS(_LT_TAG)\n# ### END LIBTOOL TAG CONFIG: $1\n_LT_EOF\n])dnl /m4_if\n],\n[m4_if([$1], [], [\n    PACKAGE='$PACKAGE'\n    VERSION='$VERSION'\n    TIMESTAMP='$TIMESTAMP'\n    RM='$RM'\n    ofile='$ofile'], [])\n])dnl /_LT_CONFIG_SAVE_COMMANDS\n])# _LT_CONFIG\n\n\n# LT_SUPPORTED_TAG(TAG)\n# ---------------------\n# Trace this macro to discover what tags are supported by the libtool\n# --tag option, using:\n#    autoconf --trace 'LT_SUPPORTED_TAG:$1'\nAC_DEFUN([LT_SUPPORTED_TAG], [])\n\n\n# C support is built-in for now\nm4_define([_LT_LANG_C_enabled], [])\nm4_define([_LT_TAGS], [])\n\n\n# LT_LANG(LANG)\n# -------------\n# Enable libtool support for the given language if not already enabled.\nAC_DEFUN([LT_LANG],\n[AC_BEFORE([$0], [LT_OUTPUT])dnl\nm4_case([$1],\n  [C],\t\t\t[_LT_LANG(C)],\n  [C++],\t\t[_LT_LANG(CXX)],\n  [Go],\t\t\t[_LT_LANG(GO)],\n  [Java],\t\t[_LT_LANG(GCJ)],\n  [Fortran 77],\t\t[_LT_LANG(F77)],\n  [Fortran],\t\t[_LT_LANG(FC)],\n  [Windows Resource],\t[_LT_LANG(RC)],\n  [m4_ifdef([_LT_LANG_]$1[_CONFIG],\n    [_LT_LANG($1)],\n    [m4_fatal([$0: unsupported language: \"$1\"])])])dnl\n])# LT_LANG\n\n\n# _LT_LANG(LANGNAME)\n# ------------------\nm4_defun([_LT_LANG],\n[m4_ifdef([_LT_LANG_]$1[_enabled], [],\n  [LT_SUPPORTED_TAG([$1])dnl\n  m4_append([_LT_TAGS], [$1 ])dnl\n  m4_define([_LT_LANG_]$1[_enabled], [])dnl\n  _LT_LANG_$1_CONFIG($1)])dnl\n])# _LT_LANG\n\n\nm4_ifndef([AC_PROG_GO], [\n############################################################\n# NOTE: This macro has been submitted for inclusion into   #\n#  GNU Autoconf as AC_PROG_GO.  When it is available in    #\n#  a released version of Autoconf we should remove this    #\n#  macro and use it instead.                               #\n############################################################\nm4_defun([AC_PROG_GO],\n[AC_LANG_PUSH(Go)dnl\nAC_ARG_VAR([GOC],     [Go compiler command])dnl\nAC_ARG_VAR([GOFLAGS], [Go compiler flags])dnl\n_AC_ARG_VAR_LDFLAGS()dnl\nAC_CHECK_TOOL(GOC, gccgo)\nif test -z \"$GOC\"; then\n  if test -n \"$ac_tool_prefix\"; then\n    AC_CHECK_PROG(GOC, [${ac_tool_prefix}gccgo], [${ac_tool_prefix}gccgo])\n  fi\nfi\nif test -z \"$GOC\"; then\n  AC_CHECK_PROG(GOC, gccgo, gccgo, false)\nfi\n])#m4_defun\n])#m4_ifndef\n\n\n# _LT_LANG_DEFAULT_CONFIG\n# -----------------------\nm4_defun([_LT_LANG_DEFAULT_CONFIG],\n[AC_PROVIDE_IFELSE([AC_PROG_CXX],\n  [LT_LANG(CXX)],\n  [m4_define([AC_PROG_CXX], defn([AC_PROG_CXX])[LT_LANG(CXX)])])\n\nAC_PROVIDE_IFELSE([AC_PROG_F77],\n  [LT_LANG(F77)],\n  [m4_define([AC_PROG_F77], defn([AC_PROG_F77])[LT_LANG(F77)])])\n\nAC_PROVIDE_IFELSE([AC_PROG_FC],\n  [LT_LANG(FC)],\n  [m4_define([AC_PROG_FC], defn([AC_PROG_FC])[LT_LANG(FC)])])\n\ndnl The call to [A][M_PROG_GCJ] is quoted like that to stop aclocal\ndnl pulling things in needlessly.\nAC_PROVIDE_IFELSE([AC_PROG_GCJ],\n  [LT_LANG(GCJ)],\n  [AC_PROVIDE_IFELSE([A][M_PROG_GCJ],\n    [LT_LANG(GCJ)],\n    [AC_PROVIDE_IFELSE([LT_PROG_GCJ],\n      [LT_LANG(GCJ)],\n      [m4_ifdef([AC_PROG_GCJ],\n\t[m4_define([AC_PROG_GCJ], defn([AC_PROG_GCJ])[LT_LANG(GCJ)])])\n       m4_ifdef([A][M_PROG_GCJ],\n\t[m4_define([A][M_PROG_GCJ], defn([A][M_PROG_GCJ])[LT_LANG(GCJ)])])\n       m4_ifdef([LT_PROG_GCJ],\n\t[m4_define([LT_PROG_GCJ], defn([LT_PROG_GCJ])[LT_LANG(GCJ)])])])])])\n\nAC_PROVIDE_IFELSE([AC_PROG_GO],\n  [LT_LANG(GO)],\n  [m4_define([AC_PROG_GO], defn([AC_PROG_GO])[LT_LANG(GO)])])\n\nAC_PROVIDE_IFELSE([LT_PROG_RC],\n  [LT_LANG(RC)],\n  [m4_define([LT_PROG_RC], defn([LT_PROG_RC])[LT_LANG(RC)])])\n])# _LT_LANG_DEFAULT_CONFIG\n\n# Obsolete macros:\nAU_DEFUN([AC_LIBTOOL_CXX], [LT_LANG(C++)])\nAU_DEFUN([AC_LIBTOOL_F77], [LT_LANG(Fortran 77)])\nAU_DEFUN([AC_LIBTOOL_FC], [LT_LANG(Fortran)])\nAU_DEFUN([AC_LIBTOOL_GCJ], [LT_LANG(Java)])\nAU_DEFUN([AC_LIBTOOL_RC], [LT_LANG(Windows Resource)])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_CXX], [])\ndnl AC_DEFUN([AC_LIBTOOL_F77], [])\ndnl AC_DEFUN([AC_LIBTOOL_FC], [])\ndnl AC_DEFUN([AC_LIBTOOL_GCJ], [])\ndnl AC_DEFUN([AC_LIBTOOL_RC], [])\n\n\n# _LT_TAG_COMPILER\n# ----------------\nm4_defun([_LT_TAG_COMPILER],\n[AC_REQUIRE([AC_PROG_CC])dnl\n\n_LT_DECL([LTCC], [CC], [1], [A C compiler])dnl\n_LT_DECL([LTCFLAGS], [CFLAGS], [1], [LTCC compiler flags])dnl\n_LT_TAGDECL([CC], [compiler], [1], [A language specific compiler])dnl\n_LT_TAGDECL([with_gcc], [GCC], [0], [Is the compiler the GNU compiler?])dnl\n\n# If no C compiler was specified, use CC.\nLTCC=${LTCC-\"$CC\"}\n\n# If no C compiler flags were specified, use CFLAGS.\nLTCFLAGS=${LTCFLAGS-\"$CFLAGS\"}\n\n# Allow CC to be a program name with arguments.\ncompiler=$CC\n])# _LT_TAG_COMPILER\n\n\n# _LT_COMPILER_BOILERPLATE\n# ------------------------\n# Check for compiler boilerplate output or warnings with\n# the simple compiler test code.\nm4_defun([_LT_COMPILER_BOILERPLATE],\n[m4_require([_LT_DECL_SED])dnl\nac_outfile=conftest.$ac_objext\necho \"$lt_simple_compile_test_code\" >conftest.$ac_ext\neval \"$ac_compile\" 2>&1 >/dev/null | $SED '/^$/d; /^ *+/d' >conftest.err\n_lt_compiler_boilerplate=`cat conftest.err`\n$RM conftest*\n])# _LT_COMPILER_BOILERPLATE\n\n\n# _LT_LINKER_BOILERPLATE\n# ----------------------\n# Check for linker boilerplate output or warnings with\n# the simple link test code.\nm4_defun([_LT_LINKER_BOILERPLATE],\n[m4_require([_LT_DECL_SED])dnl\nac_outfile=conftest.$ac_objext\necho \"$lt_simple_link_test_code\" >conftest.$ac_ext\neval \"$ac_link\" 2>&1 >/dev/null | $SED '/^$/d; /^ *+/d' >conftest.err\n_lt_linker_boilerplate=`cat conftest.err`\n$RM -r conftest*\n])# _LT_LINKER_BOILERPLATE\n\n# _LT_REQUIRED_DARWIN_CHECKS\n# -------------------------\nm4_defun_once([_LT_REQUIRED_DARWIN_CHECKS],[\n  case $host_os in\n    rhapsody* | darwin*)\n    AC_CHECK_TOOL([DSYMUTIL], [dsymutil], [:])\n    AC_CHECK_TOOL([NMEDIT], [nmedit], [:])\n    AC_CHECK_TOOL([LIPO], [lipo], [:])\n    AC_CHECK_TOOL([OTOOL], [otool], [:])\n    AC_CHECK_TOOL([OTOOL64], [otool64], [:])\n    _LT_DECL([], [DSYMUTIL], [1],\n      [Tool to manipulate archived DWARF debug symbol files on Mac OS X])\n    _LT_DECL([], [NMEDIT], [1],\n      [Tool to change global to local symbols on Mac OS X])\n    _LT_DECL([], [LIPO], [1],\n      [Tool to manipulate fat objects and archives on Mac OS X])\n    _LT_DECL([], [OTOOL], [1],\n      [ldd/readelf like tool for Mach-O binaries on Mac OS X])\n    _LT_DECL([], [OTOOL64], [1],\n      [ldd/readelf like tool for 64 bit Mach-O binaries on Mac OS X 10.4])\n\n    AC_CACHE_CHECK([for -single_module linker flag],[lt_cv_apple_cc_single_mod],\n      [lt_cv_apple_cc_single_mod=no\n      if test -z \"${LT_MULTI_MODULE}\"; then\n\t# By default we will add the -single_module flag. You can override\n\t# by either setting the environment variable LT_MULTI_MODULE\n\t# non-empty at configure time, or by adding -multi_module to the\n\t# link flags.\n\trm -rf libconftest.dylib*\n\techo \"int foo(void){return 1;}\" > conftest.c\n\techo \"$LTCC $LTCFLAGS $LDFLAGS -o libconftest.dylib \\\n-dynamiclib -Wl,-single_module conftest.c\" >&AS_MESSAGE_LOG_FD\n\t$LTCC $LTCFLAGS $LDFLAGS -o libconftest.dylib \\\n\t  -dynamiclib -Wl,-single_module conftest.c 2>conftest.err\n        _lt_result=$?\n\t# If there is a non-empty error log, and \"single_module\"\n\t# appears in it, assume the flag caused a linker warning\n        if test -s conftest.err && $GREP single_module conftest.err; then\n\t  cat conftest.err >&AS_MESSAGE_LOG_FD\n\t# Otherwise, if the output was created with a 0 exit code from\n\t# the compiler, it worked.\n\telif test -f libconftest.dylib && test $_lt_result -eq 0; then\n\t  lt_cv_apple_cc_single_mod=yes\n\telse\n\t  cat conftest.err >&AS_MESSAGE_LOG_FD\n\tfi\n\trm -rf libconftest.dylib*\n\trm -f conftest.*\n      fi])\n\n    AC_CACHE_CHECK([for -exported_symbols_list linker flag],\n      [lt_cv_ld_exported_symbols_list],\n      [lt_cv_ld_exported_symbols_list=no\n      save_LDFLAGS=$LDFLAGS\n      echo \"_main\" > conftest.sym\n      LDFLAGS=\"$LDFLAGS -Wl,-exported_symbols_list,conftest.sym\"\n      AC_LINK_IFELSE([AC_LANG_PROGRAM([],[])],\n\t[lt_cv_ld_exported_symbols_list=yes],\n\t[lt_cv_ld_exported_symbols_list=no])\n\tLDFLAGS=\"$save_LDFLAGS\"\n    ])\n\n    AC_CACHE_CHECK([for -force_load linker flag],[lt_cv_ld_force_load],\n      [lt_cv_ld_force_load=no\n      cat > conftest.c << _LT_EOF\nint forced_loaded() { return 2;}\n_LT_EOF\n      echo \"$LTCC $LTCFLAGS -c -o conftest.o conftest.c\" >&AS_MESSAGE_LOG_FD\n      $LTCC $LTCFLAGS -c -o conftest.o conftest.c 2>&AS_MESSAGE_LOG_FD\n      echo \"$AR cru libconftest.a conftest.o\" >&AS_MESSAGE_LOG_FD\n      $AR cru libconftest.a conftest.o 2>&AS_MESSAGE_LOG_FD\n      echo \"$RANLIB libconftest.a\" >&AS_MESSAGE_LOG_FD\n      $RANLIB libconftest.a 2>&AS_MESSAGE_LOG_FD\n      cat > conftest.c << _LT_EOF\nint main() { return 0;}\n_LT_EOF\n      echo \"$LTCC $LTCFLAGS $LDFLAGS -o conftest conftest.c -Wl,-force_load,./libconftest.a\" >&AS_MESSAGE_LOG_FD\n      $LTCC $LTCFLAGS $LDFLAGS -o conftest conftest.c -Wl,-force_load,./libconftest.a 2>conftest.err\n      _lt_result=$?\n      if test -s conftest.err && $GREP force_load conftest.err; then\n\tcat conftest.err >&AS_MESSAGE_LOG_FD\n      elif test -f conftest && test $_lt_result -eq 0 && $GREP forced_load conftest >/dev/null 2>&1 ; then\n\tlt_cv_ld_force_load=yes\n      else\n\tcat conftest.err >&AS_MESSAGE_LOG_FD\n      fi\n        rm -f conftest.err libconftest.a conftest conftest.c\n        rm -rf conftest.dSYM\n    ])\n    case $host_os in\n    rhapsody* | darwin1.[[012]])\n      _lt_dar_allow_undefined='${wl}-undefined ${wl}suppress' ;;\n    darwin1.*)\n      _lt_dar_allow_undefined='${wl}-flat_namespace ${wl}-undefined ${wl}suppress' ;;\n    darwin*) # darwin 5.x on\n      # if running on 10.5 or later, the deployment target defaults\n      # to the OS version, if on x86, and 10.4, the deployment\n      # target defaults to 10.4. Don't you love it?\n      case ${MACOSX_DEPLOYMENT_TARGET-10.0},$host in\n\t10.0,*86*-darwin8*|10.0,*-darwin[[91]]*)\n\t  _lt_dar_allow_undefined='${wl}-undefined ${wl}dynamic_lookup' ;;\n\t10.[[012]]*)\n\t  _lt_dar_allow_undefined='${wl}-flat_namespace ${wl}-undefined ${wl}suppress' ;;\n\t10.*)\n\t  _lt_dar_allow_undefined='${wl}-undefined ${wl}dynamic_lookup' ;;\n      esac\n    ;;\n  esac\n    if test \"$lt_cv_apple_cc_single_mod\" = \"yes\"; then\n      _lt_dar_single_mod='$single_module'\n    fi\n    if test \"$lt_cv_ld_exported_symbols_list\" = \"yes\"; then\n      _lt_dar_export_syms=' ${wl}-exported_symbols_list,$output_objdir/${libname}-symbols.expsym'\n    else\n      _lt_dar_export_syms='~$NMEDIT -s $output_objdir/${libname}-symbols.expsym ${lib}'\n    fi\n    if test \"$DSYMUTIL\" != \":\" && test \"$lt_cv_ld_force_load\" = \"no\"; then\n      _lt_dsymutil='~$DSYMUTIL $lib || :'\n    else\n      _lt_dsymutil=\n    fi\n    ;;\n  esac\n])\n\n\n# _LT_DARWIN_LINKER_FEATURES([TAG])\n# ---------------------------------\n# Checks for linker and compiler features on darwin\nm4_defun([_LT_DARWIN_LINKER_FEATURES],\n[\n  m4_require([_LT_REQUIRED_DARWIN_CHECKS])\n  _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n  _LT_TAGVAR(hardcode_direct, $1)=no\n  _LT_TAGVAR(hardcode_automatic, $1)=yes\n  _LT_TAGVAR(hardcode_shlibpath_var, $1)=unsupported\n  if test \"$lt_cv_ld_force_load\" = \"yes\"; then\n    _LT_TAGVAR(whole_archive_flag_spec, $1)='`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience ${wl}-force_load,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"`'\n    m4_case([$1], [F77], [_LT_TAGVAR(compiler_needs_object, $1)=yes],\n                  [FC],  [_LT_TAGVAR(compiler_needs_object, $1)=yes])\n  else\n    _LT_TAGVAR(whole_archive_flag_spec, $1)=''\n  fi\n  _LT_TAGVAR(link_all_deplibs, $1)=yes\n  _LT_TAGVAR(allow_undefined_flag, $1)=\"$_lt_dar_allow_undefined\"\n  case $cc_basename in\n     ifort*) _lt_dar_can_shared=yes ;;\n     *) _lt_dar_can_shared=$GCC ;;\n  esac\n  if test \"$_lt_dar_can_shared\" = \"yes\"; then\n    output_verbose_link_cmd=func_echo_all\n    _LT_TAGVAR(archive_cmds, $1)=\"\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$libobjs \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring $_lt_dar_single_mod${_lt_dsymutil}\"\n    _LT_TAGVAR(module_cmds, $1)=\"\\$CC \\$allow_undefined_flag -o \\$lib -bundle \\$libobjs \\$deplibs \\$compiler_flags${_lt_dsymutil}\"\n    _LT_TAGVAR(archive_expsym_cmds, $1)=\"sed 's,^,_,' < \\$export_symbols > \\$output_objdir/\\${libname}-symbols.expsym~\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$libobjs \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring ${_lt_dar_single_mod}${_lt_dar_export_syms}${_lt_dsymutil}\"\n    _LT_TAGVAR(module_expsym_cmds, $1)=\"sed -e 's,^,_,' < \\$export_symbols > \\$output_objdir/\\${libname}-symbols.expsym~\\$CC \\$allow_undefined_flag -o \\$lib -bundle \\$libobjs \\$deplibs \\$compiler_flags${_lt_dar_export_syms}${_lt_dsymutil}\"\n    m4_if([$1], [CXX],\n[   if test \"$lt_cv_apple_cc_single_mod\" != \"yes\"; then\n      _LT_TAGVAR(archive_cmds, $1)=\"\\$CC -r -keep_private_externs -nostdlib -o \\${lib}-master.o \\$libobjs~\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\${lib}-master.o \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring${_lt_dsymutil}\"\n      _LT_TAGVAR(archive_expsym_cmds, $1)=\"sed 's,^,_,' < \\$export_symbols > \\$output_objdir/\\${libname}-symbols.expsym~\\$CC -r -keep_private_externs -nostdlib -o \\${lib}-master.o \\$libobjs~\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\${lib}-master.o \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring${_lt_dar_export_syms}${_lt_dsymutil}\"\n    fi\n],[])\n  else\n  _LT_TAGVAR(ld_shlibs, $1)=no\n  fi\n])\n\n# _LT_SYS_MODULE_PATH_AIX([TAGNAME])\n# ----------------------------------\n# Links a minimal program and checks the executable\n# for the system default hardcoded library path. In most cases,\n# this is /usr/lib:/lib, but when the MPI compilers are used\n# the location of the communication and MPI libs are included too.\n# If we don't find anything, use the default library path according\n# to the aix ld manual.\n# Store the results from the different compilers for each TAGNAME.\n# Allow to override them for all tags through lt_cv_aix_libpath.\nm4_defun([_LT_SYS_MODULE_PATH_AIX],\n[m4_require([_LT_DECL_SED])dnl\nif test \"${lt_cv_aix_libpath+set}\" = set; then\n  aix_libpath=$lt_cv_aix_libpath\nelse\n  AC_CACHE_VAL([_LT_TAGVAR([lt_cv_aix_libpath_], [$1])],\n  [AC_LINK_IFELSE([AC_LANG_PROGRAM],[\n  lt_aix_libpath_sed='[\n      /Import File Strings/,/^$/ {\n\t  /^0/ {\n\t      s/^0  *\\([^ ]*\\) *$/\\1/\n\t      p\n\t  }\n      }]'\n  _LT_TAGVAR([lt_cv_aix_libpath_], [$1])=`dump -H conftest$ac_exeext 2>/dev/null | $SED -n -e \"$lt_aix_libpath_sed\"`\n  # Check for a 64-bit object if we didn't find anything.\n  if test -z \"$_LT_TAGVAR([lt_cv_aix_libpath_], [$1])\"; then\n    _LT_TAGVAR([lt_cv_aix_libpath_], [$1])=`dump -HX64 conftest$ac_exeext 2>/dev/null | $SED -n -e \"$lt_aix_libpath_sed\"`\n  fi],[])\n  if test -z \"$_LT_TAGVAR([lt_cv_aix_libpath_], [$1])\"; then\n    _LT_TAGVAR([lt_cv_aix_libpath_], [$1])=\"/usr/lib:/lib\"\n  fi\n  ])\n  aix_libpath=$_LT_TAGVAR([lt_cv_aix_libpath_], [$1])\nfi\n])# _LT_SYS_MODULE_PATH_AIX\n\n\n# _LT_SHELL_INIT(ARG)\n# -------------------\nm4_define([_LT_SHELL_INIT],\n[m4_divert_text([M4SH-INIT], [$1\n])])# _LT_SHELL_INIT\n\n\n\n# _LT_PROG_ECHO_BACKSLASH\n# -----------------------\n# Find how we can fake an echo command that does not interpret backslash.\n# In particular, with Autoconf 2.60 or later we add some code to the start\n# of the generated configure script which will find a shell with a builtin\n# printf (which we can use as an echo command).\nm4_defun([_LT_PROG_ECHO_BACKSLASH],\n[ECHO='\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\nECHO=$ECHO$ECHO$ECHO$ECHO$ECHO\nECHO=$ECHO$ECHO$ECHO$ECHO$ECHO$ECHO\n\nAC_MSG_CHECKING([how to print strings])\n# Test print first, because it will be a builtin if present.\nif test \"X`( print -r -- -n ) 2>/dev/null`\" = X-n && \\\n   test \"X`print -r -- $ECHO 2>/dev/null`\" = \"X$ECHO\"; then\n  ECHO='print -r --'\nelif test \"X`printf %s $ECHO 2>/dev/null`\" = \"X$ECHO\"; then\n  ECHO='printf %s\\n'\nelse\n  # Use this function as a fallback that always works.\n  func_fallback_echo ()\n  {\n    eval 'cat <<_LTECHO_EOF\n$[]1\n_LTECHO_EOF'\n  }\n  ECHO='func_fallback_echo'\nfi\n\n# func_echo_all arg...\n# Invoke $ECHO with all args, space-separated.\nfunc_echo_all ()\n{\n    $ECHO \"$*\" \n}\n\ncase \"$ECHO\" in\n  printf*) AC_MSG_RESULT([printf]) ;;\n  print*) AC_MSG_RESULT([print -r]) ;;\n  *) AC_MSG_RESULT([cat]) ;;\nesac\n\nm4_ifdef([_AS_DETECT_SUGGESTED],\n[_AS_DETECT_SUGGESTED([\n  test -n \"${ZSH_VERSION+set}${BASH_VERSION+set}\" || (\n    ECHO='\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\n    ECHO=$ECHO$ECHO$ECHO$ECHO$ECHO\n    ECHO=$ECHO$ECHO$ECHO$ECHO$ECHO$ECHO\n    PATH=/empty FPATH=/empty; export PATH FPATH\n    test \"X`printf %s $ECHO`\" = \"X$ECHO\" \\\n      || test \"X`print -r -- $ECHO`\" = \"X$ECHO\" )])])\n\n_LT_DECL([], [SHELL], [1], [Shell to use when invoking shell scripts])\n_LT_DECL([], [ECHO], [1], [An echo program that protects backslashes])\n])# _LT_PROG_ECHO_BACKSLASH\n\n\n# _LT_WITH_SYSROOT\n# ----------------\nAC_DEFUN([_LT_WITH_SYSROOT],\n[AC_MSG_CHECKING([for sysroot])\nAC_ARG_WITH([sysroot],\n[  --with-sysroot[=DIR] Search for dependent libraries within DIR\n                        (or the compiler's sysroot if not specified).],\n[], [with_sysroot=no])\n\ndnl lt_sysroot will always be passed unquoted.  We quote it here\ndnl in case the user passed a directory name.\nlt_sysroot=\ncase ${with_sysroot} in #(\n yes)\n   if test \"$GCC\" = yes; then\n     lt_sysroot=`$CC --print-sysroot 2>/dev/null`\n   fi\n   ;; #(\n /*)\n   lt_sysroot=`echo \"$with_sysroot\" | sed -e \"$sed_quote_subst\"`\n   ;; #(\n no|'')\n   ;; #(\n *)\n   AC_MSG_RESULT([${with_sysroot}])\n   AC_MSG_ERROR([The sysroot must be an absolute path.])\n   ;;\nesac\n\n AC_MSG_RESULT([${lt_sysroot:-no}])\n_LT_DECL([], [lt_sysroot], [0], [The root where to search for ]dnl\n[dependent libraries, and in which our libraries should be installed.])])\n\n# _LT_ENABLE_LOCK\n# ---------------\nm4_defun([_LT_ENABLE_LOCK],\n[AC_ARG_ENABLE([libtool-lock],\n  [AS_HELP_STRING([--disable-libtool-lock],\n    [avoid locking (might break parallel builds)])])\ntest \"x$enable_libtool_lock\" != xno && enable_libtool_lock=yes\n\n# Some flags need to be propagated to the compiler or linker for good\n# libtool support.\ncase $host in\nia64-*-hpux*)\n  # Find out which ABI we are using.\n  echo 'int i;' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    case `/usr/bin/file conftest.$ac_objext` in\n      *ELF-32*)\n\tHPUX_IA64_MODE=\"32\"\n\t;;\n      *ELF-64*)\n\tHPUX_IA64_MODE=\"64\"\n\t;;\n    esac\n  fi\n  rm -rf conftest*\n  ;;\n*-*-irix6*)\n  # Find out which ABI we are using.\n  echo '[#]line '$LINENO' \"configure\"' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    if test \"$lt_cv_prog_gnu_ld\" = yes; then\n      case `/usr/bin/file conftest.$ac_objext` in\n\t*32-bit*)\n\t  LD=\"${LD-ld} -melf32bsmip\"\n\t  ;;\n\t*N32*)\n\t  LD=\"${LD-ld} -melf32bmipn32\"\n\t  ;;\n\t*64-bit*)\n\t  LD=\"${LD-ld} -melf64bmip\"\n\t;;\n      esac\n    else\n      case `/usr/bin/file conftest.$ac_objext` in\n\t*32-bit*)\n\t  LD=\"${LD-ld} -32\"\n\t  ;;\n\t*N32*)\n\t  LD=\"${LD-ld} -n32\"\n\t  ;;\n\t*64-bit*)\n\t  LD=\"${LD-ld} -64\"\n\t  ;;\n      esac\n    fi\n  fi\n  rm -rf conftest*\n  ;;\n\nx86_64-*kfreebsd*-gnu|x86_64-*linux*|ppc*-*linux*|powerpc*-*linux*| \\\ns390*-*linux*|s390*-*tpf*|sparc*-*linux*)\n  # Find out which ABI we are using.\n  echo 'int i;' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    case `/usr/bin/file conftest.o` in\n      *32-bit*)\n\tcase $host in\n\t  x86_64-*kfreebsd*-gnu)\n\t    LD=\"${LD-ld} -m elf_i386_fbsd\"\n\t    ;;\n\t  x86_64-*linux*)\n\t    LD=\"${LD-ld} -m elf_i386\"\n\t    ;;\n\t  ppc64le-*linux*|powerpc64le-*linux*)\n\t    LD=\"${LD-ld} -m elf32lppclinux\"\n\t    ;;\n\t  ppc64-*linux*|powerpc64-*linux*)\n\t    LD=\"${LD-ld} -m elf32ppclinux\"\n\t    ;;\n\t  s390x-*linux*)\n\t    LD=\"${LD-ld} -m elf_s390\"\n\t    ;;\n\t  sparc64-*linux*)\n\t    LD=\"${LD-ld} -m elf32_sparc\"\n\t    ;;\n\tesac\n\t;;\n      *64-bit*)\n\tcase $host in\n\t  x86_64-*kfreebsd*-gnu)\n\t    LD=\"${LD-ld} -m elf_x86_64_fbsd\"\n\t    ;;\n\t  x86_64-*linux*)\n\t    LD=\"${LD-ld} -m elf_x86_64\"\n\t    ;;\n\t  ppc*le-*linux*|powerpc*le-*linux*)\n\t    LD=\"${LD-ld} -m elf64lppc\"\n\t    ;;\n\t  ppc*-*linux*|powerpc*-*linux*)\n\t    LD=\"${LD-ld} -m elf64ppc\"\n\t    ;;\n\t  s390*-*linux*|s390*-*tpf*)\n\t    LD=\"${LD-ld} -m elf64_s390\"\n\t    ;;\n\t  sparc*-*linux*)\n\t    LD=\"${LD-ld} -m elf64_sparc\"\n\t    ;;\n\tesac\n\t;;\n    esac\n  fi\n  rm -rf conftest*\n  ;;\n\n*-*-sco3.2v5*)\n  # On SCO OpenServer 5, we need -belf to get full-featured binaries.\n  SAVE_CFLAGS=\"$CFLAGS\"\n  CFLAGS=\"$CFLAGS -belf\"\n  AC_CACHE_CHECK([whether the C compiler needs -belf], lt_cv_cc_needs_belf,\n    [AC_LANG_PUSH(C)\n     AC_LINK_IFELSE([AC_LANG_PROGRAM([[]],[[]])],[lt_cv_cc_needs_belf=yes],[lt_cv_cc_needs_belf=no])\n     AC_LANG_POP])\n  if test x\"$lt_cv_cc_needs_belf\" != x\"yes\"; then\n    # this is probably gcc 2.8.0, egcs 1.0 or newer; no need for -belf\n    CFLAGS=\"$SAVE_CFLAGS\"\n  fi\n  ;;\n*-*solaris*)\n  # Find out which ABI we are using.\n  echo 'int i;' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    case `/usr/bin/file conftest.o` in\n    *64-bit*)\n      case $lt_cv_prog_gnu_ld in\n      yes*)\n        case $host in\n        i?86-*-solaris*)\n          LD=\"${LD-ld} -m elf_x86_64\"\n          ;;\n        sparc*-*-solaris*)\n          LD=\"${LD-ld} -m elf64_sparc\"\n          ;;\n        esac\n        # GNU ld 2.21 introduced _sol2 emulations.  Use them if available.\n        if ${LD-ld} -V | grep _sol2 >/dev/null 2>&1; then\n          LD=\"${LD-ld}_sol2\"\n        fi\n        ;;\n      *)\n\tif ${LD-ld} -64 -r -o conftest2.o conftest.o >/dev/null 2>&1; then\n\t  LD=\"${LD-ld} -64\"\n\tfi\n\t;;\n      esac\n      ;;\n    esac\n  fi\n  rm -rf conftest*\n  ;;\nesac\n\nneed_locks=\"$enable_libtool_lock\"\n])# _LT_ENABLE_LOCK\n\n\n# _LT_PROG_AR\n# -----------\nm4_defun([_LT_PROG_AR],\n[AC_CHECK_TOOLS(AR, [ar], false)\n: ${AR=ar}\n: ${AR_FLAGS=cru}\n_LT_DECL([], [AR], [1], [The archiver])\n_LT_DECL([], [AR_FLAGS], [1], [Flags to create an archive])\n\nAC_CACHE_CHECK([for archiver @FILE support], [lt_cv_ar_at_file],\n  [lt_cv_ar_at_file=no\n   AC_COMPILE_IFELSE([AC_LANG_PROGRAM],\n     [echo conftest.$ac_objext > conftest.lst\n      lt_ar_try='$AR $AR_FLAGS libconftest.a @conftest.lst >&AS_MESSAGE_LOG_FD'\n      AC_TRY_EVAL([lt_ar_try])\n      if test \"$ac_status\" -eq 0; then\n\t# Ensure the archiver fails upon bogus file names.\n\trm -f conftest.$ac_objext libconftest.a\n\tAC_TRY_EVAL([lt_ar_try])\n\tif test \"$ac_status\" -ne 0; then\n          lt_cv_ar_at_file=@\n        fi\n      fi\n      rm -f conftest.* libconftest.a\n     ])\n  ])\n\nif test \"x$lt_cv_ar_at_file\" = xno; then\n  archiver_list_spec=\nelse\n  archiver_list_spec=$lt_cv_ar_at_file\nfi\n_LT_DECL([], [archiver_list_spec], [1],\n  [How to feed a file listing to the archiver])\n])# _LT_PROG_AR\n\n\n# _LT_CMD_OLD_ARCHIVE\n# -------------------\nm4_defun([_LT_CMD_OLD_ARCHIVE],\n[_LT_PROG_AR\n\nAC_CHECK_TOOL(STRIP, strip, :)\ntest -z \"$STRIP\" && STRIP=:\n_LT_DECL([], [STRIP], [1], [A symbol stripping program])\n\nAC_CHECK_TOOL(RANLIB, ranlib, :)\ntest -z \"$RANLIB\" && RANLIB=:\n_LT_DECL([], [RANLIB], [1],\n    [Commands used to install an old-style archive])\n\n# Determine commands to create old-style static archives.\nold_archive_cmds='$AR $AR_FLAGS $oldlib$oldobjs'\nold_postinstall_cmds='chmod 644 $oldlib'\nold_postuninstall_cmds=\n\nif test -n \"$RANLIB\"; then\n  case $host_os in\n  openbsd*)\n    old_postinstall_cmds=\"$old_postinstall_cmds~\\$RANLIB -t \\$tool_oldlib\"\n    ;;\n  *)\n    old_postinstall_cmds=\"$old_postinstall_cmds~\\$RANLIB \\$tool_oldlib\"\n    ;;\n  esac\n  old_archive_cmds=\"$old_archive_cmds~\\$RANLIB \\$tool_oldlib\"\nfi\n\ncase $host_os in\n  darwin*)\n    lock_old_archive_extraction=yes ;;\n  *)\n    lock_old_archive_extraction=no ;;\nesac\n_LT_DECL([], [old_postinstall_cmds], [2])\n_LT_DECL([], [old_postuninstall_cmds], [2])\n_LT_TAGDECL([], [old_archive_cmds], [2],\n    [Commands used to build an old-style archive])\n_LT_DECL([], [lock_old_archive_extraction], [0],\n    [Whether to use a lock for old archive extraction])\n])# _LT_CMD_OLD_ARCHIVE\n\n\n# _LT_COMPILER_OPTION(MESSAGE, VARIABLE-NAME, FLAGS,\n#\t\t[OUTPUT-FILE], [ACTION-SUCCESS], [ACTION-FAILURE])\n# ----------------------------------------------------------------\n# Check whether the given compiler option works\nAC_DEFUN([_LT_COMPILER_OPTION],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_SED])dnl\nAC_CACHE_CHECK([$1], [$2],\n  [$2=no\n   m4_if([$4], , [ac_outfile=conftest.$ac_objext], [ac_outfile=$4])\n   echo \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n   lt_compiler_flag=\"$3\"\n   # Insert the option either (1) after the last *FLAGS variable, or\n   # (2) before a word containing \"conftest.\", or (3) at the end.\n   # Note that $ac_compile itself does not contain backslashes and begins\n   # with a dollar sign (not a hyphen), so the echo should work correctly.\n   # The option is referenced via a variable to avoid confusing sed.\n   lt_compile=`echo \"$ac_compile\" | $SED \\\n   -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n   -e 's: [[^ ]]*conftest\\.: $lt_compiler_flag&:; t' \\\n   -e 's:$: $lt_compiler_flag:'`\n   (eval echo \"\\\"\\$as_me:$LINENO: $lt_compile\\\"\" >&AS_MESSAGE_LOG_FD)\n   (eval \"$lt_compile\" 2>conftest.err)\n   ac_status=$?\n   cat conftest.err >&AS_MESSAGE_LOG_FD\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&AS_MESSAGE_LOG_FD\n   if (exit $ac_status) && test -s \"$ac_outfile\"; then\n     # The compiler can only warn and ignore the option if not recognized\n     # So say no if there are warnings other than the usual output.\n     $ECHO \"$_lt_compiler_boilerplate\" | $SED '/^$/d' >conftest.exp\n     $SED '/^$/d; /^ *+/d' conftest.err >conftest.er2\n     if test ! -s conftest.er2 || diff conftest.exp conftest.er2 >/dev/null; then\n       $2=yes\n     fi\n   fi\n   $RM conftest*\n])\n\nif test x\"[$]$2\" = xyes; then\n    m4_if([$5], , :, [$5])\nelse\n    m4_if([$6], , :, [$6])\nfi\n])# _LT_COMPILER_OPTION\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_COMPILER_OPTION], [_LT_COMPILER_OPTION])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_COMPILER_OPTION], [])\n\n\n# _LT_LINKER_OPTION(MESSAGE, VARIABLE-NAME, FLAGS,\n#                  [ACTION-SUCCESS], [ACTION-FAILURE])\n# ----------------------------------------------------\n# Check whether the given linker option works\nAC_DEFUN([_LT_LINKER_OPTION],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_SED])dnl\nAC_CACHE_CHECK([$1], [$2],\n  [$2=no\n   save_LDFLAGS=\"$LDFLAGS\"\n   LDFLAGS=\"$LDFLAGS $3\"\n   echo \"$lt_simple_link_test_code\" > conftest.$ac_ext\n   if (eval $ac_link 2>conftest.err) && test -s conftest$ac_exeext; then\n     # The linker can only warn and ignore the option if not recognized\n     # So say no if there are warnings\n     if test -s conftest.err; then\n       # Append any errors to the config.log.\n       cat conftest.err 1>&AS_MESSAGE_LOG_FD\n       $ECHO \"$_lt_linker_boilerplate\" | $SED '/^$/d' > conftest.exp\n       $SED '/^$/d; /^ *+/d' conftest.err >conftest.er2\n       if diff conftest.exp conftest.er2 >/dev/null; then\n         $2=yes\n       fi\n     else\n       $2=yes\n     fi\n   fi\n   $RM -r conftest*\n   LDFLAGS=\"$save_LDFLAGS\"\n])\n\nif test x\"[$]$2\" = xyes; then\n    m4_if([$4], , :, [$4])\nelse\n    m4_if([$5], , :, [$5])\nfi\n])# _LT_LINKER_OPTION\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_LINKER_OPTION], [_LT_LINKER_OPTION])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_LINKER_OPTION], [])\n\n\n# LT_CMD_MAX_LEN\n#---------------\nAC_DEFUN([LT_CMD_MAX_LEN],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\n# find the maximum length of command line arguments\nAC_MSG_CHECKING([the maximum length of command line arguments])\nAC_CACHE_VAL([lt_cv_sys_max_cmd_len], [dnl\n  i=0\n  teststring=\"ABCD\"\n\n  case $build_os in\n  msdosdjgpp*)\n    # On DJGPP, this test can blow up pretty badly due to problems in libc\n    # (any single argument exceeding 2000 bytes causes a buffer overrun\n    # during glob expansion).  Even if it were fixed, the result of this\n    # check would be larger than it should be.\n    lt_cv_sys_max_cmd_len=12288;    # 12K is about right\n    ;;\n\n  gnu*)\n    # Under GNU Hurd, this test is not required because there is\n    # no limit to the length of command line arguments.\n    # Libtool will interpret -1 as no limit whatsoever\n    lt_cv_sys_max_cmd_len=-1;\n    ;;\n\n  cygwin* | mingw* | cegcc*)\n    # On Win9x/ME, this test blows up -- it succeeds, but takes\n    # about 5 minutes as the teststring grows exponentially.\n    # Worse, since 9x/ME are not pre-emptively multitasking,\n    # you end up with a \"frozen\" computer, even though with patience\n    # the test eventually succeeds (with a max line length of 256k).\n    # Instead, let's just punt: use the minimum linelength reported by\n    # all of the supported platforms: 8192 (on NT/2K/XP).\n    lt_cv_sys_max_cmd_len=8192;\n    ;;\n\n  mint*)\n    # On MiNT this can take a long time and run out of memory.\n    lt_cv_sys_max_cmd_len=8192;\n    ;;\n\n  amigaos*)\n    # On AmigaOS with pdksh, this test takes hours, literally.\n    # So we just punt and use a minimum line length of 8192.\n    lt_cv_sys_max_cmd_len=8192;\n    ;;\n\n  netbsd* | freebsd* | openbsd* | darwin* | dragonfly*)\n    # This has been around since 386BSD, at least.  Likely further.\n    if test -x /sbin/sysctl; then\n      lt_cv_sys_max_cmd_len=`/sbin/sysctl -n kern.argmax`\n    elif test -x /usr/sbin/sysctl; then\n      lt_cv_sys_max_cmd_len=`/usr/sbin/sysctl -n kern.argmax`\n    else\n      lt_cv_sys_max_cmd_len=65536\t# usable default for all BSDs\n    fi\n    # And add a safety zone\n    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 4`\n    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\* 3`\n    ;;\n\n  interix*)\n    # We know the value 262144 and hardcode it with a safety zone (like BSD)\n    lt_cv_sys_max_cmd_len=196608\n    ;;\n\n  os2*)\n    # The test takes a long time on OS/2.\n    lt_cv_sys_max_cmd_len=8192\n    ;;\n\n  osf*)\n    # Dr. Hans Ekkehard Plesser reports seeing a kernel panic running configure\n    # due to this test when exec_disable_arg_limit is 1 on Tru64. It is not\n    # nice to cause kernel panics so lets avoid the loop below.\n    # First set a reasonable default.\n    lt_cv_sys_max_cmd_len=16384\n    #\n    if test -x /sbin/sysconfig; then\n      case `/sbin/sysconfig -q proc exec_disable_arg_limit` in\n        *1*) lt_cv_sys_max_cmd_len=-1 ;;\n      esac\n    fi\n    ;;\n  sco3.2v5*)\n    lt_cv_sys_max_cmd_len=102400\n    ;;\n  sysv5* | sco5v6* | sysv4.2uw2*)\n    kargmax=`grep ARG_MAX /etc/conf/cf.d/stune 2>/dev/null`\n    if test -n \"$kargmax\"; then\n      lt_cv_sys_max_cmd_len=`echo $kargmax | sed 's/.*[[\t ]]//'`\n    else\n      lt_cv_sys_max_cmd_len=32768\n    fi\n    ;;\n  *)\n    lt_cv_sys_max_cmd_len=`(getconf ARG_MAX) 2> /dev/null`\n    if test -n \"$lt_cv_sys_max_cmd_len\"; then\n      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 4`\n      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\* 3`\n    else\n      # Make teststring a little bigger before we do anything with it.\n      # a 1K string should be a reasonable start.\n      for i in 1 2 3 4 5 6 7 8 ; do\n        teststring=$teststring$teststring\n      done\n      SHELL=${SHELL-${CONFIG_SHELL-/bin/sh}}\n      # If test is not a shell built-in, we'll probably end up computing a\n      # maximum length that is only half of the actual maximum length, but\n      # we can't tell.\n      while { test \"X\"`env echo \"$teststring$teststring\" 2>/dev/null` \\\n\t         = \"X$teststring$teststring\"; } >/dev/null 2>&1 &&\n\t      test $i != 17 # 1/2 MB should be enough\n      do\n        i=`expr $i + 1`\n        teststring=$teststring$teststring\n      done\n      # Only check the string length outside the loop.\n      lt_cv_sys_max_cmd_len=`expr \"X$teststring\" : \".*\" 2>&1`\n      teststring=\n      # Add a significant safety factor because C++ compilers can tack on\n      # massive amounts of additional arguments before passing them to the\n      # linker.  It appears as though 1/2 is a usable value.\n      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 2`\n    fi\n    ;;\n  esac\n])\nif test -n $lt_cv_sys_max_cmd_len ; then\n  AC_MSG_RESULT($lt_cv_sys_max_cmd_len)\nelse\n  AC_MSG_RESULT(none)\nfi\nmax_cmd_len=$lt_cv_sys_max_cmd_len\n_LT_DECL([], [max_cmd_len], [0],\n    [What is the maximum length of a command?])\n])# LT_CMD_MAX_LEN\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_SYS_MAX_CMD_LEN], [LT_CMD_MAX_LEN])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_SYS_MAX_CMD_LEN], [])\n\n\n# _LT_HEADER_DLFCN\n# ----------------\nm4_defun([_LT_HEADER_DLFCN],\n[AC_CHECK_HEADERS([dlfcn.h], [], [], [AC_INCLUDES_DEFAULT])dnl\n])# _LT_HEADER_DLFCN\n\n\n# _LT_TRY_DLOPEN_SELF (ACTION-IF-TRUE, ACTION-IF-TRUE-W-USCORE,\n#                      ACTION-IF-FALSE, ACTION-IF-CROSS-COMPILING)\n# ----------------------------------------------------------------\nm4_defun([_LT_TRY_DLOPEN_SELF],\n[m4_require([_LT_HEADER_DLFCN])dnl\nif test \"$cross_compiling\" = yes; then :\n  [$4]\nelse\n  lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n  lt_status=$lt_dlunknown\n  cat > conftest.$ac_ext <<_LT_EOF\n[#line $LINENO \"configure\"\n#include \"confdefs.h\"\n\n#if HAVE_DLFCN_H\n#include <dlfcn.h>\n#endif\n\n#include <stdio.h>\n\n#ifdef RTLD_GLOBAL\n#  define LT_DLGLOBAL\t\tRTLD_GLOBAL\n#else\n#  ifdef DL_GLOBAL\n#    define LT_DLGLOBAL\t\tDL_GLOBAL\n#  else\n#    define LT_DLGLOBAL\t\t0\n#  endif\n#endif\n\n/* We may have to define LT_DLLAZY_OR_NOW in the command line if we\n   find out it does not work in some platform. */\n#ifndef LT_DLLAZY_OR_NOW\n#  ifdef RTLD_LAZY\n#    define LT_DLLAZY_OR_NOW\t\tRTLD_LAZY\n#  else\n#    ifdef DL_LAZY\n#      define LT_DLLAZY_OR_NOW\t\tDL_LAZY\n#    else\n#      ifdef RTLD_NOW\n#        define LT_DLLAZY_OR_NOW\tRTLD_NOW\n#      else\n#        ifdef DL_NOW\n#          define LT_DLLAZY_OR_NOW\tDL_NOW\n#        else\n#          define LT_DLLAZY_OR_NOW\t0\n#        endif\n#      endif\n#    endif\n#  endif\n#endif\n\n/* When -fvisbility=hidden is used, assume the code has been annotated\n   correspondingly for the symbols needed.  */\n#if defined(__GNUC__) && (((__GNUC__ == 3) && (__GNUC_MINOR__ >= 3)) || (__GNUC__ > 3))\nint fnord () __attribute__((visibility(\"default\")));\n#endif\n\nint fnord () { return 42; }\nint main ()\n{\n  void *self = dlopen (0, LT_DLGLOBAL|LT_DLLAZY_OR_NOW);\n  int status = $lt_dlunknown;\n\n  if (self)\n    {\n      if (dlsym (self,\"fnord\"))       status = $lt_dlno_uscore;\n      else\n        {\n\t  if (dlsym( self,\"_fnord\"))  status = $lt_dlneed_uscore;\n          else puts (dlerror ());\n\t}\n      /* dlclose (self); */\n    }\n  else\n    puts (dlerror ());\n\n  return status;\n}]\n_LT_EOF\n  if AC_TRY_EVAL(ac_link) && test -s conftest${ac_exeext} 2>/dev/null; then\n    (./conftest; exit; ) >&AS_MESSAGE_LOG_FD 2>/dev/null\n    lt_status=$?\n    case x$lt_status in\n      x$lt_dlno_uscore) $1 ;;\n      x$lt_dlneed_uscore) $2 ;;\n      x$lt_dlunknown|x*) $3 ;;\n    esac\n  else :\n    # compilation failed\n    $3\n  fi\nfi\nrm -fr conftest*\n])# _LT_TRY_DLOPEN_SELF\n\n\n# LT_SYS_DLOPEN_SELF\n# ------------------\nAC_DEFUN([LT_SYS_DLOPEN_SELF],\n[m4_require([_LT_HEADER_DLFCN])dnl\nif test \"x$enable_dlopen\" != xyes; then\n  enable_dlopen=unknown\n  enable_dlopen_self=unknown\n  enable_dlopen_self_static=unknown\nelse\n  lt_cv_dlopen=no\n  lt_cv_dlopen_libs=\n\n  case $host_os in\n  beos*)\n    lt_cv_dlopen=\"load_add_on\"\n    lt_cv_dlopen_libs=\n    lt_cv_dlopen_self=yes\n    ;;\n\n  mingw* | pw32* | cegcc*)\n    lt_cv_dlopen=\"LoadLibrary\"\n    lt_cv_dlopen_libs=\n    ;;\n\n  cygwin*)\n    lt_cv_dlopen=\"dlopen\"\n    lt_cv_dlopen_libs=\n    ;;\n\n  darwin*)\n  # if libdl is installed we need to link against it\n    AC_CHECK_LIB([dl], [dlopen],\n\t\t[lt_cv_dlopen=\"dlopen\" lt_cv_dlopen_libs=\"-ldl\"],[\n    lt_cv_dlopen=\"dyld\"\n    lt_cv_dlopen_libs=\n    lt_cv_dlopen_self=yes\n    ])\n    ;;\n\n  *)\n    AC_CHECK_FUNC([shl_load],\n\t  [lt_cv_dlopen=\"shl_load\"],\n      [AC_CHECK_LIB([dld], [shl_load],\n\t    [lt_cv_dlopen=\"shl_load\" lt_cv_dlopen_libs=\"-ldld\"],\n\t[AC_CHECK_FUNC([dlopen],\n\t      [lt_cv_dlopen=\"dlopen\"],\n\t  [AC_CHECK_LIB([dl], [dlopen],\n\t\t[lt_cv_dlopen=\"dlopen\" lt_cv_dlopen_libs=\"-ldl\"],\n\t    [AC_CHECK_LIB([svld], [dlopen],\n\t\t  [lt_cv_dlopen=\"dlopen\" lt_cv_dlopen_libs=\"-lsvld\"],\n\t      [AC_CHECK_LIB([dld], [dld_link],\n\t\t    [lt_cv_dlopen=\"dld_link\" lt_cv_dlopen_libs=\"-ldld\"])\n\t      ])\n\t    ])\n\t  ])\n\t])\n      ])\n    ;;\n  esac\n\n  if test \"x$lt_cv_dlopen\" != xno; then\n    enable_dlopen=yes\n  else\n    enable_dlopen=no\n  fi\n\n  case $lt_cv_dlopen in\n  dlopen)\n    save_CPPFLAGS=\"$CPPFLAGS\"\n    test \"x$ac_cv_header_dlfcn_h\" = xyes && CPPFLAGS=\"$CPPFLAGS -DHAVE_DLFCN_H\"\n\n    save_LDFLAGS=\"$LDFLAGS\"\n    wl=$lt_prog_compiler_wl eval LDFLAGS=\\\"\\$LDFLAGS $export_dynamic_flag_spec\\\"\n\n    save_LIBS=\"$LIBS\"\n    LIBS=\"$lt_cv_dlopen_libs $LIBS\"\n\n    AC_CACHE_CHECK([whether a program can dlopen itself],\n\t  lt_cv_dlopen_self, [dnl\n\t  _LT_TRY_DLOPEN_SELF(\n\t    lt_cv_dlopen_self=yes, lt_cv_dlopen_self=yes,\n\t    lt_cv_dlopen_self=no, lt_cv_dlopen_self=cross)\n    ])\n\n    if test \"x$lt_cv_dlopen_self\" = xyes; then\n      wl=$lt_prog_compiler_wl eval LDFLAGS=\\\"\\$LDFLAGS $lt_prog_compiler_static\\\"\n      AC_CACHE_CHECK([whether a statically linked program can dlopen itself],\n\t  lt_cv_dlopen_self_static, [dnl\n\t  _LT_TRY_DLOPEN_SELF(\n\t    lt_cv_dlopen_self_static=yes, lt_cv_dlopen_self_static=yes,\n\t    lt_cv_dlopen_self_static=no,  lt_cv_dlopen_self_static=cross)\n      ])\n    fi\n\n    CPPFLAGS=\"$save_CPPFLAGS\"\n    LDFLAGS=\"$save_LDFLAGS\"\n    LIBS=\"$save_LIBS\"\n    ;;\n  esac\n\n  case $lt_cv_dlopen_self in\n  yes|no) enable_dlopen_self=$lt_cv_dlopen_self ;;\n  *) enable_dlopen_self=unknown ;;\n  esac\n\n  case $lt_cv_dlopen_self_static in\n  yes|no) enable_dlopen_self_static=$lt_cv_dlopen_self_static ;;\n  *) enable_dlopen_self_static=unknown ;;\n  esac\nfi\n_LT_DECL([dlopen_support], [enable_dlopen], [0],\n\t [Whether dlopen is supported])\n_LT_DECL([dlopen_self], [enable_dlopen_self], [0],\n\t [Whether dlopen of programs is supported])\n_LT_DECL([dlopen_self_static], [enable_dlopen_self_static], [0],\n\t [Whether dlopen of statically linked programs is supported])\n])# LT_SYS_DLOPEN_SELF\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_DLOPEN_SELF], [LT_SYS_DLOPEN_SELF])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_DLOPEN_SELF], [])\n\n\n# _LT_COMPILER_C_O([TAGNAME])\n# ---------------------------\n# Check to see if options -c and -o are simultaneously supported by compiler.\n# This macro does not hard code the compiler like AC_PROG_CC_C_O.\nm4_defun([_LT_COMPILER_C_O],\n[m4_require([_LT_DECL_SED])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_TAG_COMPILER])dnl\nAC_CACHE_CHECK([if $compiler supports -c -o file.$ac_objext],\n  [_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)],\n  [_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)=no\n   $RM -r conftest 2>/dev/null\n   mkdir conftest\n   cd conftest\n   mkdir out\n   echo \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n\n   lt_compiler_flag=\"-o out/conftest2.$ac_objext\"\n   # Insert the option either (1) after the last *FLAGS variable, or\n   # (2) before a word containing \"conftest.\", or (3) at the end.\n   # Note that $ac_compile itself does not contain backslashes and begins\n   # with a dollar sign (not a hyphen), so the echo should work correctly.\n   lt_compile=`echo \"$ac_compile\" | $SED \\\n   -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n   -e 's: [[^ ]]*conftest\\.: $lt_compiler_flag&:; t' \\\n   -e 's:$: $lt_compiler_flag:'`\n   (eval echo \"\\\"\\$as_me:$LINENO: $lt_compile\\\"\" >&AS_MESSAGE_LOG_FD)\n   (eval \"$lt_compile\" 2>out/conftest.err)\n   ac_status=$?\n   cat out/conftest.err >&AS_MESSAGE_LOG_FD\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&AS_MESSAGE_LOG_FD\n   if (exit $ac_status) && test -s out/conftest2.$ac_objext\n   then\n     # The compiler can only warn and ignore the option if not recognized\n     # So say no if there are warnings\n     $ECHO \"$_lt_compiler_boilerplate\" | $SED '/^$/d' > out/conftest.exp\n     $SED '/^$/d; /^ *+/d' out/conftest.err >out/conftest.er2\n     if test ! -s out/conftest.er2 || diff out/conftest.exp out/conftest.er2 >/dev/null; then\n       _LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)=yes\n     fi\n   fi\n   chmod u+w . 2>&AS_MESSAGE_LOG_FD\n   $RM conftest*\n   # SGI C++ compiler will create directory out/ii_files/ for\n   # template instantiation\n   test -d out/ii_files && $RM out/ii_files/* && rmdir out/ii_files\n   $RM out/* && rmdir out\n   cd ..\n   $RM -r conftest\n   $RM conftest*\n])\n_LT_TAGDECL([compiler_c_o], [lt_cv_prog_compiler_c_o], [1],\n\t[Does compiler simultaneously support -c and -o options?])\n])# _LT_COMPILER_C_O\n\n\n# _LT_COMPILER_FILE_LOCKS([TAGNAME])\n# ----------------------------------\n# Check to see if we can do hard links to lock some files if needed\nm4_defun([_LT_COMPILER_FILE_LOCKS],\n[m4_require([_LT_ENABLE_LOCK])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\n_LT_COMPILER_C_O([$1])\n\nhard_links=\"nottested\"\nif test \"$_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)\" = no && test \"$need_locks\" != no; then\n  # do not overwrite the value of need_locks provided by the user\n  AC_MSG_CHECKING([if we can lock with hard links])\n  hard_links=yes\n  $RM conftest*\n  ln conftest.a conftest.b 2>/dev/null && hard_links=no\n  touch conftest.a\n  ln conftest.a conftest.b 2>&5 || hard_links=no\n  ln conftest.a conftest.b 2>/dev/null && hard_links=no\n  AC_MSG_RESULT([$hard_links])\n  if test \"$hard_links\" = no; then\n    AC_MSG_WARN([`$CC' does not support `-c -o', so `make -j' may be unsafe])\n    need_locks=warn\n  fi\nelse\n  need_locks=no\nfi\n_LT_DECL([], [need_locks], [1], [Must we lock files when doing compilation?])\n])# _LT_COMPILER_FILE_LOCKS\n\n\n# _LT_CHECK_OBJDIR\n# ----------------\nm4_defun([_LT_CHECK_OBJDIR],\n[AC_CACHE_CHECK([for objdir], [lt_cv_objdir],\n[rm -f .libs 2>/dev/null\nmkdir .libs 2>/dev/null\nif test -d .libs; then\n  lt_cv_objdir=.libs\nelse\n  # MS-DOS does not allow filenames that begin with a dot.\n  lt_cv_objdir=_libs\nfi\nrmdir .libs 2>/dev/null])\nobjdir=$lt_cv_objdir\n_LT_DECL([], [objdir], [0],\n         [The name of the directory that contains temporary libtool files])dnl\nm4_pattern_allow([LT_OBJDIR])dnl\nAC_DEFINE_UNQUOTED(LT_OBJDIR, \"$lt_cv_objdir/\",\n  [Define to the sub-directory in which libtool stores uninstalled libraries.])\n])# _LT_CHECK_OBJDIR\n\n\n# _LT_LINKER_HARDCODE_LIBPATH([TAGNAME])\n# --------------------------------------\n# Check hardcoding attributes.\nm4_defun([_LT_LINKER_HARDCODE_LIBPATH],\n[AC_MSG_CHECKING([how to hardcode library paths into programs])\n_LT_TAGVAR(hardcode_action, $1)=\nif test -n \"$_LT_TAGVAR(hardcode_libdir_flag_spec, $1)\" ||\n   test -n \"$_LT_TAGVAR(runpath_var, $1)\" ||\n   test \"X$_LT_TAGVAR(hardcode_automatic, $1)\" = \"Xyes\" ; then\n\n  # We can hardcode non-existent directories.\n  if test \"$_LT_TAGVAR(hardcode_direct, $1)\" != no &&\n     # If the only mechanism to avoid hardcoding is shlibpath_var, we\n     # have to relink, otherwise we might link with an installed library\n     # when we should be linking with a yet-to-be-installed one\n     ## test \"$_LT_TAGVAR(hardcode_shlibpath_var, $1)\" != no &&\n     test \"$_LT_TAGVAR(hardcode_minus_L, $1)\" != no; then\n    # Linking always hardcodes the temporary library directory.\n    _LT_TAGVAR(hardcode_action, $1)=relink\n  else\n    # We can link without hardcoding, and we can hardcode nonexisting dirs.\n    _LT_TAGVAR(hardcode_action, $1)=immediate\n  fi\nelse\n  # We cannot hardcode anything, or else we can only hardcode existing\n  # directories.\n  _LT_TAGVAR(hardcode_action, $1)=unsupported\nfi\nAC_MSG_RESULT([$_LT_TAGVAR(hardcode_action, $1)])\n\nif test \"$_LT_TAGVAR(hardcode_action, $1)\" = relink ||\n   test \"$_LT_TAGVAR(inherit_rpath, $1)\" = yes; then\n  # Fast installation is not supported\n  enable_fast_install=no\nelif test \"$shlibpath_overrides_runpath\" = yes ||\n     test \"$enable_shared\" = no; then\n  # Fast installation is not necessary\n  enable_fast_install=needless\nfi\n_LT_TAGDECL([], [hardcode_action], [0],\n    [How to hardcode a shared library path into an executable])\n])# _LT_LINKER_HARDCODE_LIBPATH\n\n\n# _LT_CMD_STRIPLIB\n# ----------------\nm4_defun([_LT_CMD_STRIPLIB],\n[m4_require([_LT_DECL_EGREP])\nstriplib=\nold_striplib=\nAC_MSG_CHECKING([whether stripping libraries is possible])\nif test -n \"$STRIP\" && $STRIP -V 2>&1 | $GREP \"GNU strip\" >/dev/null; then\n  test -z \"$old_striplib\" && old_striplib=\"$STRIP --strip-debug\"\n  test -z \"$striplib\" && striplib=\"$STRIP --strip-unneeded\"\n  AC_MSG_RESULT([yes])\nelse\n# FIXME - insert some real tests, host_os isn't really good enough\n  case $host_os in\n  darwin*)\n    if test -n \"$STRIP\" ; then\n      striplib=\"$STRIP -x\"\n      old_striplib=\"$STRIP -S\"\n      AC_MSG_RESULT([yes])\n    else\n      AC_MSG_RESULT([no])\n    fi\n    ;;\n  *)\n    AC_MSG_RESULT([no])\n    ;;\n  esac\nfi\n_LT_DECL([], [old_striplib], [1], [Commands to strip libraries])\n_LT_DECL([], [striplib], [1])\n])# _LT_CMD_STRIPLIB\n\n\n# _LT_SYS_DYNAMIC_LINKER([TAG])\n# -----------------------------\n# PORTME Fill in your ld.so characteristics\nm4_defun([_LT_SYS_DYNAMIC_LINKER],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_OBJDUMP])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_CHECK_SHELL_FEATURES])dnl\nAC_MSG_CHECKING([dynamic linker characteristics])\nm4_if([$1],\n\t[], [\nif test \"$GCC\" = yes; then\n  case $host_os in\n    darwin*) lt_awk_arg=\"/^libraries:/,/LR/\" ;;\n    *) lt_awk_arg=\"/^libraries:/\" ;;\n  esac\n  case $host_os in\n    mingw* | cegcc*) lt_sed_strip_eq=\"s,=\\([[A-Za-z]]:\\),\\1,g\" ;;\n    *) lt_sed_strip_eq=\"s,=/,/,g\" ;;\n  esac\n  lt_search_path_spec=`$CC -print-search-dirs | awk $lt_awk_arg | $SED -e \"s/^libraries://\" -e $lt_sed_strip_eq`\n  case $lt_search_path_spec in\n  *\\;*)\n    # if the path contains \";\" then we assume it to be the separator\n    # otherwise default to the standard path separator (i.e. \":\") - it is\n    # assumed that no part of a normal pathname contains \";\" but that should\n    # okay in the real world where \";\" in dirpaths is itself problematic.\n    lt_search_path_spec=`$ECHO \"$lt_search_path_spec\" | $SED 's/;/ /g'`\n    ;;\n  *)\n    lt_search_path_spec=`$ECHO \"$lt_search_path_spec\" | $SED \"s/$PATH_SEPARATOR/ /g\"`\n    ;;\n  esac\n  # Ok, now we have the path, separated by spaces, we can step through it\n  # and add multilib dir if necessary.\n  lt_tmp_lt_search_path_spec=\n  lt_multi_os_dir=`$CC $CPPFLAGS $CFLAGS $LDFLAGS -print-multi-os-directory 2>/dev/null`\n  for lt_sys_path in $lt_search_path_spec; do\n    if test -d \"$lt_sys_path/$lt_multi_os_dir\"; then\n      lt_tmp_lt_search_path_spec=\"$lt_tmp_lt_search_path_spec $lt_sys_path/$lt_multi_os_dir\"\n    else\n      test -d \"$lt_sys_path\" && \\\n\tlt_tmp_lt_search_path_spec=\"$lt_tmp_lt_search_path_spec $lt_sys_path\"\n    fi\n  done\n  lt_search_path_spec=`$ECHO \"$lt_tmp_lt_search_path_spec\" | awk '\nBEGIN {RS=\" \"; FS=\"/|\\n\";} {\n  lt_foo=\"\";\n  lt_count=0;\n  for (lt_i = NF; lt_i > 0; lt_i--) {\n    if ($lt_i != \"\" && $lt_i != \".\") {\n      if ($lt_i == \"..\") {\n        lt_count++;\n      } else {\n        if (lt_count == 0) {\n          lt_foo=\"/\" $lt_i lt_foo;\n        } else {\n          lt_count--;\n        }\n      }\n    }\n  }\n  if (lt_foo != \"\") { lt_freq[[lt_foo]]++; }\n  if (lt_freq[[lt_foo]] == 1) { print lt_foo; }\n}'`\n  # AWK program above erroneously prepends '/' to C:/dos/paths\n  # for these hosts.\n  case $host_os in\n    mingw* | cegcc*) lt_search_path_spec=`$ECHO \"$lt_search_path_spec\" |\\\n      $SED 's,/\\([[A-Za-z]]:\\),\\1,g'` ;;\n  esac\n  sys_lib_search_path_spec=`$ECHO \"$lt_search_path_spec\" | $lt_NL2SP`\nelse\n  sys_lib_search_path_spec=\"/lib /usr/lib /usr/local/lib\"\nfi])\nlibrary_names_spec=\nlibname_spec='lib$name'\nsoname_spec=\nshrext_cmds=\".so\"\npostinstall_cmds=\npostuninstall_cmds=\nfinish_cmds=\nfinish_eval=\nshlibpath_var=\nshlibpath_overrides_runpath=unknown\nversion_type=none\ndynamic_linker=\"$host_os ld.so\"\nsys_lib_dlsearch_path_spec=\"/lib /usr/lib\"\nneed_lib_prefix=unknown\nhardcode_into_libs=no\n\n# when you set need_version to no, make sure it does not cause -set_version\n# flags to be left without arguments\nneed_version=unknown\n\ncase $host_os in\naix3*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='${libname}${release}${shared_ext}$versuffix $libname.a'\n  shlibpath_var=LIBPATH\n\n  # AIX 3 has no versioning support, so we append a major version to the name.\n  soname_spec='${libname}${release}${shared_ext}$major'\n  ;;\n\naix[[4-9]]*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  hardcode_into_libs=yes\n  if test \"$host_cpu\" = ia64; then\n    # AIX 5 supports IA64\n    library_names_spec='${libname}${release}${shared_ext}$major ${libname}${release}${shared_ext}$versuffix $libname${shared_ext}'\n    shlibpath_var=LD_LIBRARY_PATH\n  else\n    # With GCC up to 2.95.x, collect2 would create an import file\n    # for dependence libraries.  The import file would start with\n    # the line `#! .'.  This would cause the generated library to\n    # depend on `.', always an invalid library.  This was fixed in\n    # development snapshots of GCC prior to 3.0.\n    case $host_os in\n      aix4 | aix4.[[01]] | aix4.[[01]].*)\n      if { echo '#if __GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ >= 97)'\n\t   echo ' yes '\n\t   echo '#endif'; } | ${CC} -E - | $GREP yes > /dev/null; then\n\t:\n      else\n\tcan_build_shared=no\n      fi\n      ;;\n    esac\n    # AIX (on Power*) has no versioning support, so currently we can not hardcode correct\n    # soname into executable. Probably we can add versioning support to\n    # collect2, so additional links can be useful in future.\n    if test \"$aix_use_runtimelinking\" = yes; then\n      # If using run time linking (on AIX 4.2 or later) use lib<name>.so\n      # instead of lib<name>.a to let people know that these are not\n      # typical AIX shared libraries.\n      library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n    else\n      # We preserve .a as extension for shared libraries through AIX4.2\n      # and later when we are not doing run time linking.\n      library_names_spec='${libname}${release}.a $libname.a'\n      soname_spec='${libname}${release}${shared_ext}$major'\n    fi\n    shlibpath_var=LIBPATH\n  fi\n  ;;\n\namigaos*)\n  case $host_cpu in\n  powerpc)\n    # Since July 2007 AmigaOS4 officially supports .so libraries.\n    # When compiling the executable, add -use-dynld -Lsobjs: to the compileline.\n    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n    ;;\n  m68k)\n    library_names_spec='$libname.ixlibrary $libname.a'\n    # Create ${libname}_ixlibrary.a entries in /sys/libs.\n    finish_eval='for lib in `ls $libdir/*.ixlibrary 2>/dev/null`; do libname=`func_echo_all \"$lib\" | $SED '\\''s%^.*/\\([[^/]]*\\)\\.ixlibrary$%\\1%'\\''`; test $RM /sys/libs/${libname}_ixlibrary.a; $show \"cd /sys/libs && $LN_S $lib ${libname}_ixlibrary.a\"; cd /sys/libs && $LN_S $lib ${libname}_ixlibrary.a || exit 1; done'\n    ;;\n  esac\n  ;;\n\nbeos*)\n  library_names_spec='${libname}${shared_ext}'\n  dynamic_linker=\"$host_os ld.so\"\n  shlibpath_var=LIBRARY_PATH\n  ;;\n\nbsdi[[45]]*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  sys_lib_search_path_spec=\"/shlib /usr/lib /usr/X11/lib /usr/contrib/lib /lib /usr/local/lib\"\n  sys_lib_dlsearch_path_spec=\"/shlib /usr/lib /usr/local/lib\"\n  # the default ld.so.conf also contains /usr/contrib/lib and\n  # /usr/X11R6/lib (/usr/X11 is a link to /usr/X11R6), but let us allow\n  # libtool to hard-code these into programs\n  ;;\n\ncygwin* | mingw* | pw32* | cegcc*)\n  version_type=windows\n  shrext_cmds=\".dll\"\n  need_version=no\n  need_lib_prefix=no\n\n  case $GCC,$cc_basename in\n  yes,*)\n    # gcc\n    library_names_spec='$libname.dll.a'\n    # DLL is installed to $(libdir)/../bin by postinstall_cmds\n    postinstall_cmds='base_file=`basename \\${file}`~\n      dlpath=`$SHELL 2>&1 -c '\\''. $dir/'\\''\\${base_file}'\\''i; echo \\$dlname'\\''`~\n      dldir=$destdir/`dirname \\$dlpath`~\n      test -d \\$dldir || mkdir -p \\$dldir~\n      $install_prog $dir/$dlname \\$dldir/$dlname~\n      chmod a+x \\$dldir/$dlname~\n      if test -n '\\''$stripme'\\'' && test -n '\\''$striplib'\\''; then\n        eval '\\''$striplib \\$dldir/$dlname'\\'' || exit \\$?;\n      fi'\n    postuninstall_cmds='dldll=`$SHELL 2>&1 -c '\\''. $file; echo \\$dlname'\\''`~\n      dlpath=$dir/\\$dldll~\n       $RM \\$dlpath'\n    shlibpath_overrides_runpath=yes\n\n    case $host_os in\n    cygwin*)\n      # Cygwin DLLs use 'cyg' prefix rather than 'lib'\n      soname_spec='`echo ${libname} | sed -e 's/^lib/cyg/'``echo ${release} | $SED -e 's/[[.]]/-/g'`${versuffix}${shared_ext}'\nm4_if([$1], [],[\n      sys_lib_search_path_spec=\"$sys_lib_search_path_spec /usr/lib/w32api\"])\n      ;;\n    mingw* | cegcc*)\n      # MinGW DLLs use traditional 'lib' prefix\n      soname_spec='${libname}`echo ${release} | $SED -e 's/[[.]]/-/g'`${versuffix}${shared_ext}'\n      ;;\n    pw32*)\n      # pw32 DLLs use 'pw' prefix rather than 'lib'\n      library_names_spec='`echo ${libname} | sed -e 's/^lib/pw/'``echo ${release} | $SED -e 's/[[.]]/-/g'`${versuffix}${shared_ext}'\n      ;;\n    esac\n    dynamic_linker='Win32 ld.exe'\n    ;;\n\n  *,cl*)\n    # Native MSVC\n    libname_spec='$name'\n    soname_spec='${libname}`echo ${release} | $SED -e 's/[[.]]/-/g'`${versuffix}${shared_ext}'\n    library_names_spec='${libname}.dll.lib'\n\n    case $build_os in\n    mingw*)\n      sys_lib_search_path_spec=\n      lt_save_ifs=$IFS\n      IFS=';'\n      for lt_path in $LIB\n      do\n        IFS=$lt_save_ifs\n        # Let DOS variable expansion print the short 8.3 style file name.\n        lt_path=`cd \"$lt_path\" 2>/dev/null && cmd //C \"for %i in (\".\") do @echo %~si\"`\n        sys_lib_search_path_spec=\"$sys_lib_search_path_spec $lt_path\"\n      done\n      IFS=$lt_save_ifs\n      # Convert to MSYS style.\n      sys_lib_search_path_spec=`$ECHO \"$sys_lib_search_path_spec\" | sed -e 's|\\\\\\\\|/|g' -e 's| \\\\([[a-zA-Z]]\\\\):| /\\\\1|g' -e 's|^ ||'`\n      ;;\n    cygwin*)\n      # Convert to unix form, then to dos form, then back to unix form\n      # but this time dos style (no spaces!) so that the unix form looks\n      # like /cygdrive/c/PROGRA~1:/cygdr...\n      sys_lib_search_path_spec=`cygpath --path --unix \"$LIB\"`\n      sys_lib_search_path_spec=`cygpath --path --dos \"$sys_lib_search_path_spec\" 2>/dev/null`\n      sys_lib_search_path_spec=`cygpath --path --unix \"$sys_lib_search_path_spec\" | $SED -e \"s/$PATH_SEPARATOR/ /g\"`\n      ;;\n    *)\n      sys_lib_search_path_spec=\"$LIB\"\n      if $ECHO \"$sys_lib_search_path_spec\" | [$GREP ';[c-zC-Z]:/' >/dev/null]; then\n        # It is most probably a Windows format PATH.\n        sys_lib_search_path_spec=`$ECHO \"$sys_lib_search_path_spec\" | $SED -e 's/;/ /g'`\n      else\n        sys_lib_search_path_spec=`$ECHO \"$sys_lib_search_path_spec\" | $SED -e \"s/$PATH_SEPARATOR/ /g\"`\n      fi\n      # FIXME: find the short name or the path components, as spaces are\n      # common. (e.g. \"Program Files\" -> \"PROGRA~1\")\n      ;;\n    esac\n\n    # DLL is installed to $(libdir)/../bin by postinstall_cmds\n    postinstall_cmds='base_file=`basename \\${file}`~\n      dlpath=`$SHELL 2>&1 -c '\\''. $dir/'\\''\\${base_file}'\\''i; echo \\$dlname'\\''`~\n      dldir=$destdir/`dirname \\$dlpath`~\n      test -d \\$dldir || mkdir -p \\$dldir~\n      $install_prog $dir/$dlname \\$dldir/$dlname'\n    postuninstall_cmds='dldll=`$SHELL 2>&1 -c '\\''. $file; echo \\$dlname'\\''`~\n      dlpath=$dir/\\$dldll~\n       $RM \\$dlpath'\n    shlibpath_overrides_runpath=yes\n    dynamic_linker='Win32 link.exe'\n    ;;\n\n  *)\n    # Assume MSVC wrapper\n    library_names_spec='${libname}`echo ${release} | $SED -e 's/[[.]]/-/g'`${versuffix}${shared_ext} $libname.lib'\n    dynamic_linker='Win32 ld.exe'\n    ;;\n  esac\n  # FIXME: first we should search . and the directory the executable is in\n  shlibpath_var=PATH\n  ;;\n\ndarwin* | rhapsody*)\n  dynamic_linker=\"$host_os dyld\"\n  version_type=darwin\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${major}$shared_ext ${libname}$shared_ext'\n  soname_spec='${libname}${release}${major}$shared_ext'\n  shlibpath_overrides_runpath=yes\n  shlibpath_var=DYLD_LIBRARY_PATH\n  shrext_cmds='`test .$module = .yes && echo .so || echo .dylib`'\nm4_if([$1], [],[\n  sys_lib_search_path_spec=\"$sys_lib_search_path_spec /usr/local/lib\"])\n  sys_lib_dlsearch_path_spec='/usr/local/lib /lib /usr/lib'\n  ;;\n\ndgux*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname$shared_ext'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  ;;\n\nfreebsd* | dragonfly*)\n  # DragonFly does not have aout.  When/if they implement a new\n  # versioning mechanism, adjust this.\n  if test -x /usr/bin/objformat; then\n    objformat=`/usr/bin/objformat`\n  else\n    case $host_os in\n    freebsd[[23]].*) objformat=aout ;;\n    *) objformat=elf ;;\n    esac\n  fi\n  version_type=freebsd-$objformat\n  case $version_type in\n    freebsd-elf*)\n      library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext} $libname${shared_ext}'\n      need_version=no\n      need_lib_prefix=no\n      ;;\n    freebsd-*)\n      library_names_spec='${libname}${release}${shared_ext}$versuffix $libname${shared_ext}$versuffix'\n      need_version=yes\n      ;;\n  esac\n  shlibpath_var=LD_LIBRARY_PATH\n  case $host_os in\n  freebsd2.*)\n    shlibpath_overrides_runpath=yes\n    ;;\n  freebsd3.[[01]]* | freebsdelf3.[[01]]*)\n    shlibpath_overrides_runpath=yes\n    hardcode_into_libs=yes\n    ;;\n  freebsd3.[[2-9]]* | freebsdelf3.[[2-9]]* | \\\n  freebsd4.[[0-5]] | freebsdelf4.[[0-5]] | freebsd4.1.1 | freebsdelf4.1.1)\n    shlibpath_overrides_runpath=no\n    hardcode_into_libs=yes\n    ;;\n  *) # from 4.6 on, and DragonFly\n    shlibpath_overrides_runpath=yes\n    hardcode_into_libs=yes\n    ;;\n  esac\n  ;;\n\ngnu*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}${major} ${libname}${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  ;;\n\nhaiku*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  dynamic_linker=\"$host_os runtime_loader\"\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}${major} ${libname}${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  sys_lib_dlsearch_path_spec='/boot/home/config/lib /boot/common/lib /boot/system/lib'\n  hardcode_into_libs=yes\n  ;;\n\nhpux9* | hpux10* | hpux11*)\n  # Give a soname corresponding to the major version so that dld.sl refuses to\n  # link against other versions.\n  version_type=sunos\n  need_lib_prefix=no\n  need_version=no\n  case $host_cpu in\n  ia64*)\n    shrext_cmds='.so'\n    hardcode_into_libs=yes\n    dynamic_linker=\"$host_os dld.so\"\n    shlibpath_var=LD_LIBRARY_PATH\n    shlibpath_overrides_runpath=yes # Unless +noenvvar is specified.\n    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n    soname_spec='${libname}${release}${shared_ext}$major'\n    if test \"X$HPUX_IA64_MODE\" = X32; then\n      sys_lib_search_path_spec=\"/usr/lib/hpux32 /usr/local/lib/hpux32 /usr/local/lib\"\n    else\n      sys_lib_search_path_spec=\"/usr/lib/hpux64 /usr/local/lib/hpux64\"\n    fi\n    sys_lib_dlsearch_path_spec=$sys_lib_search_path_spec\n    ;;\n  hppa*64*)\n    shrext_cmds='.sl'\n    hardcode_into_libs=yes\n    dynamic_linker=\"$host_os dld.sl\"\n    shlibpath_var=LD_LIBRARY_PATH # How should we handle SHLIB_PATH\n    shlibpath_overrides_runpath=yes # Unless +noenvvar is specified.\n    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n    soname_spec='${libname}${release}${shared_ext}$major'\n    sys_lib_search_path_spec=\"/usr/lib/pa20_64 /usr/ccs/lib/pa20_64\"\n    sys_lib_dlsearch_path_spec=$sys_lib_search_path_spec\n    ;;\n  *)\n    shrext_cmds='.sl'\n    dynamic_linker=\"$host_os dld.sl\"\n    shlibpath_var=SHLIB_PATH\n    shlibpath_overrides_runpath=no # +s is required to enable SHLIB_PATH\n    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n    soname_spec='${libname}${release}${shared_ext}$major'\n    ;;\n  esac\n  # HP-UX runs *really* slowly unless shared libraries are mode 555, ...\n  postinstall_cmds='chmod 555 $lib'\n  # or fails outright, so override atomically:\n  install_override_mode=555\n  ;;\n\ninterix[[3-9]]*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major ${libname}${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  dynamic_linker='Interix 3.x ld.so.1 (PE, like ELF)'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  ;;\n\nirix5* | irix6* | nonstopux*)\n  case $host_os in\n    nonstopux*) version_type=nonstopux ;;\n    *)\n\tif test \"$lt_cv_prog_gnu_ld\" = yes; then\n\t\tversion_type=linux # correct to gnu/linux during the next big refactor\n\telse\n\t\tversion_type=irix\n\tfi ;;\n  esac\n  need_lib_prefix=no\n  need_version=no\n  soname_spec='${libname}${release}${shared_ext}$major'\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major ${libname}${release}${shared_ext} $libname${shared_ext}'\n  case $host_os in\n  irix5* | nonstopux*)\n    libsuff= shlibsuff=\n    ;;\n  *)\n    case $LD in # libtool.m4 will add one of these switches to LD\n    *-32|*\"-32 \"|*-melf32bsmip|*\"-melf32bsmip \")\n      libsuff= shlibsuff= libmagic=32-bit;;\n    *-n32|*\"-n32 \"|*-melf32bmipn32|*\"-melf32bmipn32 \")\n      libsuff=32 shlibsuff=N32 libmagic=N32;;\n    *-64|*\"-64 \"|*-melf64bmip|*\"-melf64bmip \")\n      libsuff=64 shlibsuff=64 libmagic=64-bit;;\n    *) libsuff= shlibsuff= libmagic=never-match;;\n    esac\n    ;;\n  esac\n  shlibpath_var=LD_LIBRARY${shlibsuff}_PATH\n  shlibpath_overrides_runpath=no\n  sys_lib_search_path_spec=\"/usr/lib${libsuff} /lib${libsuff} /usr/local/lib${libsuff}\"\n  sys_lib_dlsearch_path_spec=\"/usr/lib${libsuff} /lib${libsuff}\"\n  hardcode_into_libs=yes\n  ;;\n\n# No shared lib support for Linux oldld, aout, or coff.\nlinux*oldld* | linux*aout* | linux*coff*)\n  dynamic_linker=no\n  ;;\n\n# This must be glibc/ELF.\nlinux* | k*bsd*-gnu | kopensolaris*-gnu)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig -n $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n\n  # Some binutils ld are patched to set DT_RUNPATH\n  AC_CACHE_VAL([lt_cv_shlibpath_overrides_runpath],\n    [lt_cv_shlibpath_overrides_runpath=no\n    save_LDFLAGS=$LDFLAGS\n    save_libdir=$libdir\n    eval \"libdir=/foo; wl=\\\"$_LT_TAGVAR(lt_prog_compiler_wl, $1)\\\"; \\\n\t LDFLAGS=\\\"\\$LDFLAGS $_LT_TAGVAR(hardcode_libdir_flag_spec, $1)\\\"\"\n    AC_LINK_IFELSE([AC_LANG_PROGRAM([],[])],\n      [AS_IF([ ($OBJDUMP -p conftest$ac_exeext) 2>/dev/null | grep \"RUNPATH.*$libdir\" >/dev/null],\n\t [lt_cv_shlibpath_overrides_runpath=yes])])\n    LDFLAGS=$save_LDFLAGS\n    libdir=$save_libdir\n    ])\n  shlibpath_overrides_runpath=$lt_cv_shlibpath_overrides_runpath\n\n  # This implies no fast_install, which is unacceptable.\n  # Some rework will be needed to allow for fast_install\n  # before this can be enabled.\n  hardcode_into_libs=yes\n\n  # Add ABI-specific directories to the system library path.\n  sys_lib_dlsearch_path_spec=\"/lib64 /usr/lib64 /lib /usr/lib\"\n\n  # Append ld.so.conf contents to the search path\n  if test -f /etc/ld.so.conf; then\n    lt_ld_extra=`awk '/^include / { system(sprintf(\"cd /etc; cat %s 2>/dev/null\", \\[$]2)); skip = 1; } { if (!skip) print \\[$]0; skip = 0; }' < /etc/ld.so.conf | $SED -e 's/#.*//;/^[\t ]*hwcap[\t ]/d;s/[:,\t]/ /g;s/=[^=]*$//;s/=[^= ]* / /g;s/\"//g;/^$/d' | tr '\\n' ' '`\n    sys_lib_dlsearch_path_spec=\"$sys_lib_dlsearch_path_spec $lt_ld_extra\"\n\n  fi\n\n  # We used to test for /lib/ld.so.1 and disable shared libraries on\n  # powerpc, because MkLinux only supported shared libraries with the\n  # GNU dynamic linker.  Since this was broken with cross compilers,\n  # most powerpc-linux boxes support dynamic linking these days and\n  # people can always --disable-shared, the test was removed, and we\n  # assume the GNU/Linux dynamic linker is in use.\n  dynamic_linker='GNU/Linux ld.so'\n  ;;\n\nnetbsd*)\n  version_type=sunos\n  need_lib_prefix=no\n  need_version=no\n  if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${shared_ext}$versuffix'\n    finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig -m $libdir'\n    dynamic_linker='NetBSD (a.out) ld.so'\n  else\n    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major ${libname}${shared_ext}'\n    soname_spec='${libname}${release}${shared_ext}$major'\n    dynamic_linker='NetBSD ld.elf_so'\n  fi\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  hardcode_into_libs=yes\n  ;;\n\nnewsos6)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  ;;\n\n*nto* | *qnx*)\n  version_type=qnx\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  dynamic_linker='ldqnx.so'\n  ;;\n\nopenbsd*)\n  version_type=sunos\n  sys_lib_dlsearch_path_spec=\"/usr/lib\"\n  need_lib_prefix=no\n  # Some older versions of OpenBSD (3.3 at least) *do* need versioned libs.\n  case $host_os in\n    openbsd3.3 | openbsd3.3.*)\tneed_version=yes ;;\n    *)\t\t\t\tneed_version=no  ;;\n  esac\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${shared_ext}$versuffix'\n  finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig -m $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  if test -z \"`echo __ELF__ | $CC -E - | $GREP __ELF__`\" || test \"$host_os-$host_cpu\" = \"openbsd2.8-powerpc\"; then\n    case $host_os in\n      openbsd2.[[89]] | openbsd2.[[89]].*)\n\tshlibpath_overrides_runpath=no\n\t;;\n      *)\n\tshlibpath_overrides_runpath=yes\n\t;;\n      esac\n  else\n    shlibpath_overrides_runpath=yes\n  fi\n  ;;\n\nos2*)\n  libname_spec='$name'\n  shrext_cmds=\".dll\"\n  need_lib_prefix=no\n  library_names_spec='$libname${shared_ext} $libname.a'\n  dynamic_linker='OS/2 ld.exe'\n  shlibpath_var=LIBPATH\n  ;;\n\nosf3* | osf4* | osf5*)\n  version_type=osf\n  need_lib_prefix=no\n  need_version=no\n  soname_spec='${libname}${release}${shared_ext}$major'\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  shlibpath_var=LD_LIBRARY_PATH\n  sys_lib_search_path_spec=\"/usr/shlib /usr/ccs/lib /usr/lib/cmplrs/cc /usr/lib /usr/local/lib /var/shlib\"\n  sys_lib_dlsearch_path_spec=\"$sys_lib_search_path_spec\"\n  ;;\n\nrdos*)\n  dynamic_linker=no\n  ;;\n\nsolaris*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  hardcode_into_libs=yes\n  # ldd complains unless libraries are executable\n  postinstall_cmds='chmod +x $lib'\n  ;;\n\nsunos4*)\n  version_type=sunos\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${shared_ext}$versuffix'\n  finish_cmds='PATH=\"\\$PATH:/usr/etc\" ldconfig $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  if test \"$with_gnu_ld\" = yes; then\n    need_lib_prefix=no\n  fi\n  need_version=yes\n  ;;\n\nsysv4 | sysv4.3*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  case $host_vendor in\n    sni)\n      shlibpath_overrides_runpath=no\n      need_lib_prefix=no\n      runpath_var=LD_RUN_PATH\n      ;;\n    siemens)\n      need_lib_prefix=no\n      ;;\n    motorola)\n      need_lib_prefix=no\n      need_version=no\n      shlibpath_overrides_runpath=no\n      sys_lib_search_path_spec='/lib /usr/lib /usr/ccs/lib'\n      ;;\n  esac\n  ;;\n\nsysv4*MP*)\n  if test -d /usr/nec ;then\n    version_type=linux # correct to gnu/linux during the next big refactor\n    library_names_spec='$libname${shared_ext}.$versuffix $libname${shared_ext}.$major $libname${shared_ext}'\n    soname_spec='$libname${shared_ext}.$major'\n    shlibpath_var=LD_LIBRARY_PATH\n  fi\n  ;;\n\nsysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX* | sysv4*uw2*)\n  version_type=freebsd-elf\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext} $libname${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  hardcode_into_libs=yes\n  if test \"$with_gnu_ld\" = yes; then\n    sys_lib_search_path_spec='/usr/local/lib /usr/gnu/lib /usr/ccs/lib /usr/lib /lib'\n  else\n    sys_lib_search_path_spec='/usr/ccs/lib /usr/lib'\n    case $host_os in\n      sco3.2v5*)\n        sys_lib_search_path_spec=\"$sys_lib_search_path_spec /lib\"\n\t;;\n    esac\n  fi\n  sys_lib_dlsearch_path_spec='/usr/lib'\n  ;;\n\ntpf*)\n  # TPF is a cross-target only.  Preferred cross-host = GNU/Linux.\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  ;;\n\nuts4*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  ;;\n\n*)\n  dynamic_linker=no\n  ;;\nesac\nAC_MSG_RESULT([$dynamic_linker])\ntest \"$dynamic_linker\" = no && can_build_shared=no\n\nvariables_saved_for_relink=\"PATH $shlibpath_var $runpath_var\"\nif test \"$GCC\" = yes; then\n  variables_saved_for_relink=\"$variables_saved_for_relink GCC_EXEC_PREFIX COMPILER_PATH LIBRARY_PATH\"\nfi\n\nif test \"${lt_cv_sys_lib_search_path_spec+set}\" = set; then\n  sys_lib_search_path_spec=\"$lt_cv_sys_lib_search_path_spec\"\nfi\nif test \"${lt_cv_sys_lib_dlsearch_path_spec+set}\" = set; then\n  sys_lib_dlsearch_path_spec=\"$lt_cv_sys_lib_dlsearch_path_spec\"\nfi\n\n_LT_DECL([], [variables_saved_for_relink], [1],\n    [Variables whose values should be saved in libtool wrapper scripts and\n    restored at link time])\n_LT_DECL([], [need_lib_prefix], [0],\n    [Do we need the \"lib\" prefix for modules?])\n_LT_DECL([], [need_version], [0], [Do we need a version for libraries?])\n_LT_DECL([], [version_type], [0], [Library versioning type])\n_LT_DECL([], [runpath_var], [0],  [Shared library runtime path variable])\n_LT_DECL([], [shlibpath_var], [0],[Shared library path variable])\n_LT_DECL([], [shlibpath_overrides_runpath], [0],\n    [Is shlibpath searched before the hard-coded library search path?])\n_LT_DECL([], [libname_spec], [1], [Format of library name prefix])\n_LT_DECL([], [library_names_spec], [1],\n    [[List of archive names.  First name is the real one, the rest are links.\n    The last name is the one that the linker finds with -lNAME]])\n_LT_DECL([], [soname_spec], [1],\n    [[The coded name of the library, if different from the real name]])\n_LT_DECL([], [install_override_mode], [1],\n    [Permission mode override for installation of shared libraries])\n_LT_DECL([], [postinstall_cmds], [2],\n    [Command to use after installation of a shared archive])\n_LT_DECL([], [postuninstall_cmds], [2],\n    [Command to use after uninstallation of a shared archive])\n_LT_DECL([], [finish_cmds], [2],\n    [Commands used to finish a libtool library installation in a directory])\n_LT_DECL([], [finish_eval], [1],\n    [[As \"finish_cmds\", except a single script fragment to be evaled but\n    not shown]])\n_LT_DECL([], [hardcode_into_libs], [0],\n    [Whether we should hardcode library paths into libraries])\n_LT_DECL([], [sys_lib_search_path_spec], [2],\n    [Compile-time system search path for libraries])\n_LT_DECL([], [sys_lib_dlsearch_path_spec], [2],\n    [Run-time system search path for libraries])\n])# _LT_SYS_DYNAMIC_LINKER\n\n\n# _LT_PATH_TOOL_PREFIX(TOOL)\n# --------------------------\n# find a file program which can recognize shared library\nAC_DEFUN([_LT_PATH_TOOL_PREFIX],\n[m4_require([_LT_DECL_EGREP])dnl\nAC_MSG_CHECKING([for $1])\nAC_CACHE_VAL(lt_cv_path_MAGIC_CMD,\n[case $MAGIC_CMD in\n[[\\\\/*] |  ?:[\\\\/]*])\n  lt_cv_path_MAGIC_CMD=\"$MAGIC_CMD\" # Let the user override the test with a path.\n  ;;\n*)\n  lt_save_MAGIC_CMD=\"$MAGIC_CMD\"\n  lt_save_ifs=\"$IFS\"; IFS=$PATH_SEPARATOR\ndnl $ac_dummy forces splitting on constant user-supplied paths.\ndnl POSIX.2 word splitting is done only on the output of word expansions,\ndnl not every word.  This closes a longstanding sh security hole.\n  ac_dummy=\"m4_if([$2], , $PATH, [$2])\"\n  for ac_dir in $ac_dummy; do\n    IFS=\"$lt_save_ifs\"\n    test -z \"$ac_dir\" && ac_dir=.\n    if test -f $ac_dir/$1; then\n      lt_cv_path_MAGIC_CMD=\"$ac_dir/$1\"\n      if test -n \"$file_magic_test_file\"; then\n\tcase $deplibs_check_method in\n\t\"file_magic \"*)\n\t  file_magic_regex=`expr \"$deplibs_check_method\" : \"file_magic \\(.*\\)\"`\n\t  MAGIC_CMD=\"$lt_cv_path_MAGIC_CMD\"\n\t  if eval $file_magic_cmd \\$file_magic_test_file 2> /dev/null |\n\t    $EGREP \"$file_magic_regex\" > /dev/null; then\n\t    :\n\t  else\n\t    cat <<_LT_EOF 1>&2\n\n*** Warning: the command libtool uses to detect shared libraries,\n*** $file_magic_cmd, produces output that libtool cannot recognize.\n*** The result is that libtool may fail to recognize shared libraries\n*** as such.  This will affect the creation of libtool libraries that\n*** depend on shared libraries, but programs linked with such libtool\n*** libraries will work regardless of this problem.  Nevertheless, you\n*** may want to report the problem to your system manager and/or to\n*** bug-libtool@gnu.org\n\n_LT_EOF\n\t  fi ;;\n\tesac\n      fi\n      break\n    fi\n  done\n  IFS=\"$lt_save_ifs\"\n  MAGIC_CMD=\"$lt_save_MAGIC_CMD\"\n  ;;\nesac])\nMAGIC_CMD=\"$lt_cv_path_MAGIC_CMD\"\nif test -n \"$MAGIC_CMD\"; then\n  AC_MSG_RESULT($MAGIC_CMD)\nelse\n  AC_MSG_RESULT(no)\nfi\n_LT_DECL([], [MAGIC_CMD], [0],\n\t [Used to examine libraries when file_magic_cmd begins with \"file\"])dnl\n])# _LT_PATH_TOOL_PREFIX\n\n# Old name:\nAU_ALIAS([AC_PATH_TOOL_PREFIX], [_LT_PATH_TOOL_PREFIX])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_PATH_TOOL_PREFIX], [])\n\n\n# _LT_PATH_MAGIC\n# --------------\n# find a file program which can recognize a shared library\nm4_defun([_LT_PATH_MAGIC],\n[_LT_PATH_TOOL_PREFIX(${ac_tool_prefix}file, /usr/bin$PATH_SEPARATOR$PATH)\nif test -z \"$lt_cv_path_MAGIC_CMD\"; then\n  if test -n \"$ac_tool_prefix\"; then\n    _LT_PATH_TOOL_PREFIX(file, /usr/bin$PATH_SEPARATOR$PATH)\n  else\n    MAGIC_CMD=:\n  fi\nfi\n])# _LT_PATH_MAGIC\n\n\n# LT_PATH_LD\n# ----------\n# find the pathname to the GNU or non-GNU linker\nAC_DEFUN([LT_PATH_LD],\n[AC_REQUIRE([AC_PROG_CC])dnl\nAC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_CANONICAL_BUILD])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_PROG_ECHO_BACKSLASH])dnl\n\nAC_ARG_WITH([gnu-ld],\n    [AS_HELP_STRING([--with-gnu-ld],\n\t[assume the C compiler uses GNU ld @<:@default=no@:>@])],\n    [test \"$withval\" = no || with_gnu_ld=yes],\n    [with_gnu_ld=no])dnl\n\nac_prog=ld\nif test \"$GCC\" = yes; then\n  # Check if gcc -print-prog-name=ld gives a path.\n  AC_MSG_CHECKING([for ld used by $CC])\n  case $host in\n  *-*-mingw*)\n    # gcc leaves a trailing carriage return which upsets mingw\n    ac_prog=`($CC -print-prog-name=ld) 2>&5 | tr -d '\\015'` ;;\n  *)\n    ac_prog=`($CC -print-prog-name=ld) 2>&5` ;;\n  esac\n  case $ac_prog in\n    # Accept absolute paths.\n    [[\\\\/]]* | ?:[[\\\\/]]*)\n      re_direlt='/[[^/]][[^/]]*/\\.\\./'\n      # Canonicalize the pathname of ld\n      ac_prog=`$ECHO \"$ac_prog\"| $SED 's%\\\\\\\\%/%g'`\n      while $ECHO \"$ac_prog\" | $GREP \"$re_direlt\" > /dev/null 2>&1; do\n\tac_prog=`$ECHO $ac_prog| $SED \"s%$re_direlt%/%\"`\n      done\n      test -z \"$LD\" && LD=\"$ac_prog\"\n      ;;\n  \"\")\n    # If it fails, then pretend we aren't using GCC.\n    ac_prog=ld\n    ;;\n  *)\n    # If it is relative, then search for the first ld in PATH.\n    with_gnu_ld=unknown\n    ;;\n  esac\nelif test \"$with_gnu_ld\" = yes; then\n  AC_MSG_CHECKING([for GNU ld])\nelse\n  AC_MSG_CHECKING([for non-GNU ld])\nfi\nAC_CACHE_VAL(lt_cv_path_LD,\n[if test -z \"$LD\"; then\n  lt_save_ifs=\"$IFS\"; IFS=$PATH_SEPARATOR\n  for ac_dir in $PATH; do\n    IFS=\"$lt_save_ifs\"\n    test -z \"$ac_dir\" && ac_dir=.\n    if test -f \"$ac_dir/$ac_prog\" || test -f \"$ac_dir/$ac_prog$ac_exeext\"; then\n      lt_cv_path_LD=\"$ac_dir/$ac_prog\"\n      # Check to see if the program is GNU ld.  I'd rather use --version,\n      # but apparently some variants of GNU ld only accept -v.\n      # Break only if it was the GNU/non-GNU ld that we prefer.\n      case `\"$lt_cv_path_LD\" -v 2>&1 </dev/null` in\n      *GNU* | *'with BFD'*)\n\ttest \"$with_gnu_ld\" != no && break\n\t;;\n      *)\n\ttest \"$with_gnu_ld\" != yes && break\n\t;;\n      esac\n    fi\n  done\n  IFS=\"$lt_save_ifs\"\nelse\n  lt_cv_path_LD=\"$LD\" # Let the user override the test with a path.\nfi])\nLD=\"$lt_cv_path_LD\"\nif test -n \"$LD\"; then\n  AC_MSG_RESULT($LD)\nelse\n  AC_MSG_RESULT(no)\nfi\ntest -z \"$LD\" && AC_MSG_ERROR([no acceptable ld found in \\$PATH])\n_LT_PATH_LD_GNU\nAC_SUBST([LD])\n\n_LT_TAGDECL([], [LD], [1], [The linker used to build libraries])\n])# LT_PATH_LD\n\n# Old names:\nAU_ALIAS([AM_PROG_LD], [LT_PATH_LD])\nAU_ALIAS([AC_PROG_LD], [LT_PATH_LD])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AM_PROG_LD], [])\ndnl AC_DEFUN([AC_PROG_LD], [])\n\n\n# _LT_PATH_LD_GNU\n#- --------------\nm4_defun([_LT_PATH_LD_GNU],\n[AC_CACHE_CHECK([if the linker ($LD) is GNU ld], lt_cv_prog_gnu_ld,\n[# I'd rather use --version here, but apparently some GNU lds only accept -v.\ncase `$LD -v 2>&1 </dev/null` in\n*GNU* | *'with BFD'*)\n  lt_cv_prog_gnu_ld=yes\n  ;;\n*)\n  lt_cv_prog_gnu_ld=no\n  ;;\nesac])\nwith_gnu_ld=$lt_cv_prog_gnu_ld\n])# _LT_PATH_LD_GNU\n\n\n# _LT_CMD_RELOAD\n# --------------\n# find reload flag for linker\n#   -- PORTME Some linkers may need a different reload flag.\nm4_defun([_LT_CMD_RELOAD],\n[AC_CACHE_CHECK([for $LD option to reload object files],\n  lt_cv_ld_reload_flag,\n  [lt_cv_ld_reload_flag='-r'])\nreload_flag=$lt_cv_ld_reload_flag\ncase $reload_flag in\n\"\" | \" \"*) ;;\n*) reload_flag=\" $reload_flag\" ;;\nesac\nreload_cmds='$LD$reload_flag -o $output$reload_objs'\ncase $host_os in\n  cygwin* | mingw* | pw32* | cegcc*)\n    if test \"$GCC\" != yes; then\n      reload_cmds=false\n    fi\n    ;;\n  darwin*)\n    if test \"$GCC\" = yes; then\n      reload_cmds='$LTCC $LTCFLAGS -nostdlib ${wl}-r -o $output$reload_objs'\n    else\n      reload_cmds='$LD$reload_flag -o $output$reload_objs'\n    fi\n    ;;\nesac\n_LT_TAGDECL([], [reload_flag], [1], [How to create reloadable object files])dnl\n_LT_TAGDECL([], [reload_cmds], [2])dnl\n])# _LT_CMD_RELOAD\n\n\n# _LT_CHECK_MAGIC_METHOD\n# ----------------------\n# how to check for library dependencies\n#  -- PORTME fill in with the dynamic library characteristics\nm4_defun([_LT_CHECK_MAGIC_METHOD],\n[m4_require([_LT_DECL_EGREP])\nm4_require([_LT_DECL_OBJDUMP])\nAC_CACHE_CHECK([how to recognize dependent libraries],\nlt_cv_deplibs_check_method,\n[lt_cv_file_magic_cmd='$MAGIC_CMD'\nlt_cv_file_magic_test_file=\nlt_cv_deplibs_check_method='unknown'\n# Need to set the preceding variable on all platforms that support\n# interlibrary dependencies.\n# 'none' -- dependencies not supported.\n# `unknown' -- same as none, but documents that we really don't know.\n# 'pass_all' -- all dependencies passed with no checks.\n# 'test_compile' -- check by making test program.\n# 'file_magic [[regex]]' -- check by looking for files in library path\n# which responds to the $file_magic_cmd with a given extended regex.\n# If you have `file' or equivalent on your system and you're not sure\n# whether `pass_all' will *always* work, you probably want this one.\n\ncase $host_os in\naix[[4-9]]*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nbeos*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nbsdi[[45]]*)\n  lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (shared object|dynamic lib)'\n  lt_cv_file_magic_cmd='/usr/bin/file -L'\n  lt_cv_file_magic_test_file=/shlib/libc.so\n  ;;\n\ncygwin*)\n  # func_win32_libid is a shell function defined in ltmain.sh\n  lt_cv_deplibs_check_method='file_magic ^x86 archive import|^x86 DLL'\n  lt_cv_file_magic_cmd='func_win32_libid'\n  ;;\n\nmingw* | pw32*)\n  # Base MSYS/MinGW do not provide the 'file' command needed by\n  # func_win32_libid shell function, so use a weaker test based on 'objdump',\n  # unless we find 'file', for example because we are cross-compiling.\n  # func_win32_libid assumes BSD nm, so disallow it if using MS dumpbin.\n  if ( test \"$lt_cv_nm_interface\" = \"BSD nm\" && file / ) >/dev/null 2>&1; then\n    lt_cv_deplibs_check_method='file_magic ^x86 archive import|^x86 DLL'\n    lt_cv_file_magic_cmd='func_win32_libid'\n  else\n    # Keep this pattern in sync with the one in func_win32_libid.\n    lt_cv_deplibs_check_method='file_magic file format (pei*-i386(.*architecture: i386)?|pe-arm-wince|pe-x86-64)'\n    lt_cv_file_magic_cmd='$OBJDUMP -f'\n  fi\n  ;;\n\ncegcc*)\n  # use the weaker test based on 'objdump'. See mingw*.\n  lt_cv_deplibs_check_method='file_magic file format pe-arm-.*little(.*architecture: arm)?'\n  lt_cv_file_magic_cmd='$OBJDUMP -f'\n  ;;\n\ndarwin* | rhapsody*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nfreebsd* | dragonfly*)\n  if echo __ELF__ | $CC -E - | $GREP __ELF__ > /dev/null; then\n    case $host_cpu in\n    i*86 )\n      # Not sure whether the presence of OpenBSD here was a mistake.\n      # Let's accept both of them until this is cleared up.\n      lt_cv_deplibs_check_method='file_magic (FreeBSD|OpenBSD|DragonFly)/i[[3-9]]86 (compact )?demand paged shared library'\n      lt_cv_file_magic_cmd=/usr/bin/file\n      lt_cv_file_magic_test_file=`echo /usr/lib/libc.so.*`\n      ;;\n    esac\n  else\n    lt_cv_deplibs_check_method=pass_all\n  fi\n  ;;\n\ngnu*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nhaiku*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nhpux10.20* | hpux11*)\n  lt_cv_file_magic_cmd=/usr/bin/file\n  case $host_cpu in\n  ia64*)\n    lt_cv_deplibs_check_method='file_magic (s[[0-9]][[0-9]][[0-9]]|ELF-[[0-9]][[0-9]]) shared object file - IA64'\n    lt_cv_file_magic_test_file=/usr/lib/hpux32/libc.so\n    ;;\n  hppa*64*)\n    [lt_cv_deplibs_check_method='file_magic (s[0-9][0-9][0-9]|ELF[ -][0-9][0-9])(-bit)?( [LM]SB)? shared object( file)?[, -]* PA-RISC [0-9]\\.[0-9]']\n    lt_cv_file_magic_test_file=/usr/lib/pa20_64/libc.sl\n    ;;\n  *)\n    lt_cv_deplibs_check_method='file_magic (s[[0-9]][[0-9]][[0-9]]|PA-RISC[[0-9]]\\.[[0-9]]) shared library'\n    lt_cv_file_magic_test_file=/usr/lib/libc.sl\n    ;;\n  esac\n  ;;\n\ninterix[[3-9]]*)\n  # PIC code is broken on Interix 3.x, that's why |\\.a not |_pic\\.a here\n  lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so|\\.a)$'\n  ;;\n\nirix5* | irix6* | nonstopux*)\n  case $LD in\n  *-32|*\"-32 \") libmagic=32-bit;;\n  *-n32|*\"-n32 \") libmagic=N32;;\n  *-64|*\"-64 \") libmagic=64-bit;;\n  *) libmagic=never-match;;\n  esac\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\n# This must be glibc/ELF.\nlinux* | k*bsd*-gnu | kopensolaris*-gnu)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nnetbsd*)\n  if echo __ELF__ | $CC -E - | $GREP __ELF__ > /dev/null; then\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so\\.[[0-9]]+\\.[[0-9]]+|_pic\\.a)$'\n  else\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so|_pic\\.a)$'\n  fi\n  ;;\n\nnewos6*)\n  lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (executable|dynamic lib)'\n  lt_cv_file_magic_cmd=/usr/bin/file\n  lt_cv_file_magic_test_file=/usr/lib/libnls.so\n  ;;\n\n*nto* | *qnx*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nopenbsd*)\n  if test -z \"`echo __ELF__ | $CC -E - | $GREP __ELF__`\" || test \"$host_os-$host_cpu\" = \"openbsd2.8-powerpc\"; then\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so\\.[[0-9]]+\\.[[0-9]]+|\\.so|_pic\\.a)$'\n  else\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so\\.[[0-9]]+\\.[[0-9]]+|_pic\\.a)$'\n  fi\n  ;;\n\nosf3* | osf4* | osf5*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nrdos*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nsolaris*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nsysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX* | sysv4*uw2*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nsysv4 | sysv4.3*)\n  case $host_vendor in\n  motorola)\n    lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (shared object|dynamic lib) M[[0-9]][[0-9]]* Version [[0-9]]'\n    lt_cv_file_magic_test_file=`echo /usr/lib/libc.so*`\n    ;;\n  ncr)\n    lt_cv_deplibs_check_method=pass_all\n    ;;\n  sequent)\n    lt_cv_file_magic_cmd='/bin/file'\n    lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[LM]]SB (shared object|dynamic lib )'\n    ;;\n  sni)\n    lt_cv_file_magic_cmd='/bin/file'\n    lt_cv_deplibs_check_method=\"file_magic ELF [[0-9]][[0-9]]*-bit [[LM]]SB dynamic lib\"\n    lt_cv_file_magic_test_file=/lib/libc.so\n    ;;\n  siemens)\n    lt_cv_deplibs_check_method=pass_all\n    ;;\n  pc)\n    lt_cv_deplibs_check_method=pass_all\n    ;;\n  esac\n  ;;\n\ntpf*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\nesac\n])\n\nfile_magic_glob=\nwant_nocaseglob=no\nif test \"$build\" = \"$host\"; then\n  case $host_os in\n  mingw* | pw32*)\n    if ( shopt | grep nocaseglob ) >/dev/null 2>&1; then\n      want_nocaseglob=yes\n    else\n      file_magic_glob=`echo aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ | $SED -e \"s/\\(..\\)/s\\/[[\\1]]\\/[[\\1]]\\/g;/g\"`\n    fi\n    ;;\n  esac\nfi\n\nfile_magic_cmd=$lt_cv_file_magic_cmd\ndeplibs_check_method=$lt_cv_deplibs_check_method\ntest -z \"$deplibs_check_method\" && deplibs_check_method=unknown\n\n_LT_DECL([], [deplibs_check_method], [1],\n    [Method to check whether dependent libraries are shared objects])\n_LT_DECL([], [file_magic_cmd], [1],\n    [Command to use when deplibs_check_method = \"file_magic\"])\n_LT_DECL([], [file_magic_glob], [1],\n    [How to find potential files when deplibs_check_method = \"file_magic\"])\n_LT_DECL([], [want_nocaseglob], [1],\n    [Find potential files using nocaseglob when deplibs_check_method = \"file_magic\"])\n])# _LT_CHECK_MAGIC_METHOD\n\n\n# LT_PATH_NM\n# ----------\n# find the pathname to a BSD- or MS-compatible name lister\nAC_DEFUN([LT_PATH_NM],\n[AC_REQUIRE([AC_PROG_CC])dnl\nAC_CACHE_CHECK([for BSD- or MS-compatible name lister (nm)], lt_cv_path_NM,\n[if test -n \"$NM\"; then\n  # Let the user override the test.\n  lt_cv_path_NM=\"$NM\"\nelse\n  lt_nm_to_check=\"${ac_tool_prefix}nm\"\n  if test -n \"$ac_tool_prefix\" && test \"$build\" = \"$host\"; then\n    lt_nm_to_check=\"$lt_nm_to_check nm\"\n  fi\n  for lt_tmp_nm in $lt_nm_to_check; do\n    lt_save_ifs=\"$IFS\"; IFS=$PATH_SEPARATOR\n    for ac_dir in $PATH /usr/ccs/bin/elf /usr/ccs/bin /usr/ucb /bin; do\n      IFS=\"$lt_save_ifs\"\n      test -z \"$ac_dir\" && ac_dir=.\n      tmp_nm=\"$ac_dir/$lt_tmp_nm\"\n      if test -f \"$tmp_nm\" || test -f \"$tmp_nm$ac_exeext\" ; then\n\t# Check to see if the nm accepts a BSD-compat flag.\n\t# Adding the `sed 1q' prevents false positives on HP-UX, which says:\n\t#   nm: unknown option \"B\" ignored\n\t# Tru64's nm complains that /dev/null is an invalid object file\n\tcase `\"$tmp_nm\" -B /dev/null 2>&1 | sed '1q'` in\n\t*/dev/null* | *'Invalid file or object type'*)\n\t  lt_cv_path_NM=\"$tmp_nm -B\"\n\t  break\n\t  ;;\n\t*)\n\t  case `\"$tmp_nm\" -p /dev/null 2>&1 | sed '1q'` in\n\t  */dev/null*)\n\t    lt_cv_path_NM=\"$tmp_nm -p\"\n\t    break\n\t    ;;\n\t  *)\n\t    lt_cv_path_NM=${lt_cv_path_NM=\"$tmp_nm\"} # keep the first match, but\n\t    continue # so that we can try to find one that supports BSD flags\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n      fi\n    done\n    IFS=\"$lt_save_ifs\"\n  done\n  : ${lt_cv_path_NM=no}\nfi])\nif test \"$lt_cv_path_NM\" != \"no\"; then\n  NM=\"$lt_cv_path_NM\"\nelse\n  # Didn't find any BSD compatible name lister, look for dumpbin.\n  if test -n \"$DUMPBIN\"; then :\n    # Let the user override the test.\n  else\n    AC_CHECK_TOOLS(DUMPBIN, [dumpbin \"link -dump\"], :)\n    case `$DUMPBIN -symbols /dev/null 2>&1 | sed '1q'` in\n    *COFF*)\n      DUMPBIN=\"$DUMPBIN -symbols\"\n      ;;\n    *)\n      DUMPBIN=:\n      ;;\n    esac\n  fi\n  AC_SUBST([DUMPBIN])\n  if test \"$DUMPBIN\" != \":\"; then\n    NM=\"$DUMPBIN\"\n  fi\nfi\ntest -z \"$NM\" && NM=nm\nAC_SUBST([NM])\n_LT_DECL([], [NM], [1], [A BSD- or MS-compatible name lister])dnl\n\nAC_CACHE_CHECK([the name lister ($NM) interface], [lt_cv_nm_interface],\n  [lt_cv_nm_interface=\"BSD nm\"\n  echo \"int some_variable = 0;\" > conftest.$ac_ext\n  (eval echo \"\\\"\\$as_me:$LINENO: $ac_compile\\\"\" >&AS_MESSAGE_LOG_FD)\n  (eval \"$ac_compile\" 2>conftest.err)\n  cat conftest.err >&AS_MESSAGE_LOG_FD\n  (eval echo \"\\\"\\$as_me:$LINENO: $NM \\\\\\\"conftest.$ac_objext\\\\\\\"\\\"\" >&AS_MESSAGE_LOG_FD)\n  (eval \"$NM \\\"conftest.$ac_objext\\\"\" 2>conftest.err > conftest.out)\n  cat conftest.err >&AS_MESSAGE_LOG_FD\n  (eval echo \"\\\"\\$as_me:$LINENO: output\\\"\" >&AS_MESSAGE_LOG_FD)\n  cat conftest.out >&AS_MESSAGE_LOG_FD\n  if $GREP 'External.*some_variable' conftest.out > /dev/null; then\n    lt_cv_nm_interface=\"MS dumpbin\"\n  fi\n  rm -f conftest*])\n])# LT_PATH_NM\n\n# Old names:\nAU_ALIAS([AM_PROG_NM], [LT_PATH_NM])\nAU_ALIAS([AC_PROG_NM], [LT_PATH_NM])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AM_PROG_NM], [])\ndnl AC_DEFUN([AC_PROG_NM], [])\n\n# _LT_CHECK_SHAREDLIB_FROM_LINKLIB\n# --------------------------------\n# how to determine the name of the shared library\n# associated with a specific link library.\n#  -- PORTME fill in with the dynamic library characteristics\nm4_defun([_LT_CHECK_SHAREDLIB_FROM_LINKLIB],\n[m4_require([_LT_DECL_EGREP])\nm4_require([_LT_DECL_OBJDUMP])\nm4_require([_LT_DECL_DLLTOOL])\nAC_CACHE_CHECK([how to associate runtime and link libraries],\nlt_cv_sharedlib_from_linklib_cmd,\n[lt_cv_sharedlib_from_linklib_cmd='unknown'\n\ncase $host_os in\ncygwin* | mingw* | pw32* | cegcc*)\n  # two different shell functions defined in ltmain.sh\n  # decide which to use based on capabilities of $DLLTOOL\n  case `$DLLTOOL --help 2>&1` in\n  *--identify-strict*)\n    lt_cv_sharedlib_from_linklib_cmd=func_cygming_dll_for_implib\n    ;;\n  *)\n    lt_cv_sharedlib_from_linklib_cmd=func_cygming_dll_for_implib_fallback\n    ;;\n  esac\n  ;;\n*)\n  # fallback: assume linklib IS sharedlib\n  lt_cv_sharedlib_from_linklib_cmd=\"$ECHO\"\n  ;;\nesac\n])\nsharedlib_from_linklib_cmd=$lt_cv_sharedlib_from_linklib_cmd\ntest -z \"$sharedlib_from_linklib_cmd\" && sharedlib_from_linklib_cmd=$ECHO\n\n_LT_DECL([], [sharedlib_from_linklib_cmd], [1],\n    [Command to associate shared and link libraries])\n])# _LT_CHECK_SHAREDLIB_FROM_LINKLIB\n\n\n# _LT_PATH_MANIFEST_TOOL\n# ----------------------\n# locate the manifest tool\nm4_defun([_LT_PATH_MANIFEST_TOOL],\n[AC_CHECK_TOOL(MANIFEST_TOOL, mt, :)\ntest -z \"$MANIFEST_TOOL\" && MANIFEST_TOOL=mt\nAC_CACHE_CHECK([if $MANIFEST_TOOL is a manifest tool], [lt_cv_path_mainfest_tool],\n  [lt_cv_path_mainfest_tool=no\n  echo \"$as_me:$LINENO: $MANIFEST_TOOL '-?'\" >&AS_MESSAGE_LOG_FD\n  $MANIFEST_TOOL '-?' 2>conftest.err > conftest.out\n  cat conftest.err >&AS_MESSAGE_LOG_FD\n  if $GREP 'Manifest Tool' conftest.out > /dev/null; then\n    lt_cv_path_mainfest_tool=yes\n  fi\n  rm -f conftest*])\nif test \"x$lt_cv_path_mainfest_tool\" != xyes; then\n  MANIFEST_TOOL=:\nfi\n_LT_DECL([], [MANIFEST_TOOL], [1], [Manifest tool])dnl\n])# _LT_PATH_MANIFEST_TOOL\n\n\n# LT_LIB_M\n# --------\n# check for math library\nAC_DEFUN([LT_LIB_M],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nLIBM=\ncase $host in\n*-*-beos* | *-*-cegcc* | *-*-cygwin* | *-*-haiku* | *-*-pw32* | *-*-darwin*)\n  # These system don't have libm, or don't need it\n  ;;\n*-ncr-sysv4.3*)\n  AC_CHECK_LIB(mw, _mwvalidcheckl, LIBM=\"-lmw\")\n  AC_CHECK_LIB(m, cos, LIBM=\"$LIBM -lm\")\n  ;;\n*)\n  AC_CHECK_LIB(m, cos, LIBM=\"-lm\")\n  ;;\nesac\nAC_SUBST([LIBM])\n])# LT_LIB_M\n\n# Old name:\nAU_ALIAS([AC_CHECK_LIBM], [LT_LIB_M])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_CHECK_LIBM], [])\n\n\n# _LT_COMPILER_NO_RTTI([TAGNAME])\n# -------------------------------\nm4_defun([_LT_COMPILER_NO_RTTI],\n[m4_require([_LT_TAG_COMPILER])dnl\n\n_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=\n\nif test \"$GCC\" = yes; then\n  case $cc_basename in\n  nvcc*)\n    _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=' -Xcompiler -fno-builtin' ;;\n  *)\n    _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=' -fno-builtin' ;;\n  esac\n\n  _LT_COMPILER_OPTION([if $compiler supports -fno-rtti -fno-exceptions],\n    lt_cv_prog_compiler_rtti_exceptions,\n    [-fno-rtti -fno-exceptions], [],\n    [_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=\"$_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1) -fno-rtti -fno-exceptions\"])\nfi\n_LT_TAGDECL([no_builtin_flag], [lt_prog_compiler_no_builtin_flag], [1],\n\t[Compiler flag to turn off builtin functions])\n])# _LT_COMPILER_NO_RTTI\n\n\n# _LT_CMD_GLOBAL_SYMBOLS\n# ----------------------\nm4_defun([_LT_CMD_GLOBAL_SYMBOLS],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_PROG_CC])dnl\nAC_REQUIRE([AC_PROG_AWK])dnl\nAC_REQUIRE([LT_PATH_NM])dnl\nAC_REQUIRE([LT_PATH_LD])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_TAG_COMPILER])dnl\n\n# Check for command to grab the raw symbol name followed by C symbol from nm.\nAC_MSG_CHECKING([command to parse $NM output from $compiler object])\nAC_CACHE_VAL([lt_cv_sys_global_symbol_pipe],\n[\n# These are sane defaults that work on at least a few old systems.\n# [They come from Ultrix.  What could be older than Ultrix?!! ;)]\n\n# Character class describing NM global symbol codes.\nsymcode='[[BCDEGRST]]'\n\n# Regexp to match symbols that can be accessed directly from C.\nsympat='\\([[_A-Za-z]][[_A-Za-z0-9]]*\\)'\n\n# Define system-specific variables.\ncase $host_os in\naix*)\n  symcode='[[BCDT]]'\n  ;;\ncygwin* | mingw* | pw32* | cegcc*)\n  symcode='[[ABCDGISTW]]'\n  ;;\nhpux*)\n  if test \"$host_cpu\" = ia64; then\n    symcode='[[ABCDEGRST]]'\n  fi\n  ;;\nirix* | nonstopux*)\n  symcode='[[BCDEGRST]]'\n  ;;\nosf*)\n  symcode='[[BCDEGQRST]]'\n  ;;\nsolaris*)\n  symcode='[[BDRT]]'\n  ;;\nsco3.2v5*)\n  symcode='[[DT]]'\n  ;;\nsysv4.2uw2*)\n  symcode='[[DT]]'\n  ;;\nsysv5* | sco5v6* | unixware* | OpenUNIX*)\n  symcode='[[ABDT]]'\n  ;;\nsysv4)\n  symcode='[[DFNSTU]]'\n  ;;\nesac\n\n# If we're using GNU nm, then use its standard symbol codes.\ncase `$NM -V 2>&1` in\n*GNU* | *'with BFD'*)\n  symcode='[[ABCDGIRSTW]]' ;;\nesac\n\n# Transform an extracted symbol line into a proper C declaration.\n# Some systems (esp. on ia64) link data and code symbols differently,\n# so use this general approach.\nlt_cv_sys_global_symbol_to_cdecl=\"sed -n -e 's/^T .* \\(.*\\)$/extern int \\1();/p' -e 's/^$symcode* .* \\(.*\\)$/extern char \\1;/p'\"\n\n# Transform an extracted symbol line into symbol name and symbol address\nlt_cv_sys_global_symbol_to_c_name_address=\"sed -n -e 's/^: \\([[^ ]]*\\)[[ ]]*$/  {\\\\\\\"\\1\\\\\\\", (void *) 0},/p' -e 's/^$symcode* \\([[^ ]]*\\) \\([[^ ]]*\\)$/  {\\\"\\2\\\", (void *) \\&\\2},/p'\"\nlt_cv_sys_global_symbol_to_c_name_address_lib_prefix=\"sed -n -e 's/^: \\([[^ ]]*\\)[[ ]]*$/  {\\\\\\\"\\1\\\\\\\", (void *) 0},/p' -e 's/^$symcode* \\([[^ ]]*\\) \\(lib[[^ ]]*\\)$/  {\\\"\\2\\\", (void *) \\&\\2},/p' -e 's/^$symcode* \\([[^ ]]*\\) \\([[^ ]]*\\)$/  {\\\"lib\\2\\\", (void *) \\&\\2},/p'\"\n\n# Handle CRLF in mingw tool chain\nopt_cr=\ncase $build_os in\nmingw*)\n  opt_cr=`$ECHO 'x\\{0,1\\}' | tr x '\\015'` # option cr in regexp\n  ;;\nesac\n\n# Try without a prefix underscore, then with it.\nfor ac_symprfx in \"\" \"_\"; do\n\n  # Transform symcode, sympat, and symprfx into a raw symbol and a C symbol.\n  symxfrm=\"\\\\1 $ac_symprfx\\\\2 \\\\2\"\n\n  # Write the raw and C identifiers.\n  if test \"$lt_cv_nm_interface\" = \"MS dumpbin\"; then\n    # Fake it for dumpbin and say T for any non-static function\n    # and D for any global variable.\n    # Also find C++ and __fastcall symbols from MSVC++,\n    # which start with @ or ?.\n    lt_cv_sys_global_symbol_pipe=\"$AWK ['\"\\\n\"     {last_section=section; section=\\$ 3};\"\\\n\"     /^COFF SYMBOL TABLE/{for(i in hide) delete hide[i]};\"\\\n\"     /Section length .*#relocs.*(pick any)/{hide[last_section]=1};\"\\\n\"     \\$ 0!~/External *\\|/{next};\"\\\n\"     / 0+ UNDEF /{next}; / UNDEF \\([^|]\\)*()/{next};\"\\\n\"     {if(hide[section]) next};\"\\\n\"     {f=0}; \\$ 0~/\\(\\).*\\|/{f=1}; {printf f ? \\\"T \\\" : \\\"D \\\"};\"\\\n\"     {split(\\$ 0, a, /\\||\\r/); split(a[2], s)};\"\\\n\"     s[1]~/^[@?]/{print s[1], s[1]; next};\"\\\n\"     s[1]~prfx {split(s[1],t,\\\"@\\\"); print t[1], substr(t[1],length(prfx))}\"\\\n\"     ' prfx=^$ac_symprfx]\"\n  else\n    lt_cv_sys_global_symbol_pipe=\"sed -n -e 's/^.*[[\t ]]\\($symcode$symcode*\\)[[\t ]][[\t ]]*$ac_symprfx$sympat$opt_cr$/$symxfrm/p'\"\n  fi\n  lt_cv_sys_global_symbol_pipe=\"$lt_cv_sys_global_symbol_pipe | sed '/ __gnu_lto/d'\"\n\n  # Check to see that the pipe works correctly.\n  pipe_works=no\n\n  rm -f conftest*\n  cat > conftest.$ac_ext <<_LT_EOF\n#ifdef __cplusplus\nextern \"C\" {\n#endif\nchar nm_test_var;\nvoid nm_test_func(void);\nvoid nm_test_func(void){}\n#ifdef __cplusplus\n}\n#endif\nint main(){nm_test_var='a';nm_test_func();return(0);}\n_LT_EOF\n\n  if AC_TRY_EVAL(ac_compile); then\n    # Now try to grab the symbols.\n    nlist=conftest.nm\n    if AC_TRY_EVAL(NM conftest.$ac_objext \\| \"$lt_cv_sys_global_symbol_pipe\" \\> $nlist) && test -s \"$nlist\"; then\n      # Try sorting and uniquifying the output.\n      if sort \"$nlist\" | uniq > \"$nlist\"T; then\n\tmv -f \"$nlist\"T \"$nlist\"\n      else\n\trm -f \"$nlist\"T\n      fi\n\n      # Make sure that we snagged all the symbols we need.\n      if $GREP ' nm_test_var$' \"$nlist\" >/dev/null; then\n\tif $GREP ' nm_test_func$' \"$nlist\" >/dev/null; then\n\t  cat <<_LT_EOF > conftest.$ac_ext\n/* Keep this code in sync between libtool.m4, ltmain, lt_system.h, and tests.  */\n#if defined(_WIN32) || defined(__CYGWIN__) || defined(_WIN32_WCE)\n/* DATA imports from DLLs on WIN32 con't be const, because runtime\n   relocations are performed -- see ld's documentation on pseudo-relocs.  */\n# define LT@&t@_DLSYM_CONST\n#elif defined(__osf__)\n/* This system does not cope well with relocations in const data.  */\n# define LT@&t@_DLSYM_CONST\n#else\n# define LT@&t@_DLSYM_CONST const\n#endif\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n_LT_EOF\n\t  # Now generate the symbol file.\n\t  eval \"$lt_cv_sys_global_symbol_to_cdecl\"' < \"$nlist\" | $GREP -v main >> conftest.$ac_ext'\n\n\t  cat <<_LT_EOF >> conftest.$ac_ext\n\n/* The mapping between symbol names and symbols.  */\nLT@&t@_DLSYM_CONST struct {\n  const char *name;\n  void       *address;\n}\nlt__PROGRAM__LTX_preloaded_symbols[[]] =\n{\n  { \"@PROGRAM@\", (void *) 0 },\n_LT_EOF\n\t  $SED \"s/^$symcode$symcode* \\(.*\\) \\(.*\\)$/  {\\\"\\2\\\", (void *) \\&\\2},/\" < \"$nlist\" | $GREP -v main >> conftest.$ac_ext\n\t  cat <<\\_LT_EOF >> conftest.$ac_ext\n  {0, (void *) 0}\n};\n\n/* This works around a problem in FreeBSD linker */\n#ifdef FREEBSD_WORKAROUND\nstatic const void *lt_preloaded_setup() {\n  return lt__PROGRAM__LTX_preloaded_symbols;\n}\n#endif\n\n#ifdef __cplusplus\n}\n#endif\n_LT_EOF\n\t  # Now try linking the two files.\n\t  mv conftest.$ac_objext conftstm.$ac_objext\n\t  lt_globsym_save_LIBS=$LIBS\n\t  lt_globsym_save_CFLAGS=$CFLAGS\n\t  LIBS=\"conftstm.$ac_objext\"\n\t  CFLAGS=\"$CFLAGS$_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)\"\n\t  if AC_TRY_EVAL(ac_link) && test -s conftest${ac_exeext}; then\n\t    pipe_works=yes\n\t  fi\n\t  LIBS=$lt_globsym_save_LIBS\n\t  CFLAGS=$lt_globsym_save_CFLAGS\n\telse\n\t  echo \"cannot find nm_test_func in $nlist\" >&AS_MESSAGE_LOG_FD\n\tfi\n      else\n\techo \"cannot find nm_test_var in $nlist\" >&AS_MESSAGE_LOG_FD\n      fi\n    else\n      echo \"cannot run $lt_cv_sys_global_symbol_pipe\" >&AS_MESSAGE_LOG_FD\n    fi\n  else\n    echo \"$progname: failed program was:\" >&AS_MESSAGE_LOG_FD\n    cat conftest.$ac_ext >&5\n  fi\n  rm -rf conftest* conftst*\n\n  # Do not use the global_symbol_pipe unless it works.\n  if test \"$pipe_works\" = yes; then\n    break\n  else\n    lt_cv_sys_global_symbol_pipe=\n  fi\ndone\n])\nif test -z \"$lt_cv_sys_global_symbol_pipe\"; then\n  lt_cv_sys_global_symbol_to_cdecl=\nfi\nif test -z \"$lt_cv_sys_global_symbol_pipe$lt_cv_sys_global_symbol_to_cdecl\"; then\n  AC_MSG_RESULT(failed)\nelse\n  AC_MSG_RESULT(ok)\nfi\n\n# Response file support.\nif test \"$lt_cv_nm_interface\" = \"MS dumpbin\"; then\n  nm_file_list_spec='@'\nelif $NM --help 2>/dev/null | grep '[[@]]FILE' >/dev/null; then\n  nm_file_list_spec='@'\nfi\n\n_LT_DECL([global_symbol_pipe], [lt_cv_sys_global_symbol_pipe], [1],\n    [Take the output of nm and produce a listing of raw symbols and C names])\n_LT_DECL([global_symbol_to_cdecl], [lt_cv_sys_global_symbol_to_cdecl], [1],\n    [Transform the output of nm in a proper C declaration])\n_LT_DECL([global_symbol_to_c_name_address],\n    [lt_cv_sys_global_symbol_to_c_name_address], [1],\n    [Transform the output of nm in a C name address pair])\n_LT_DECL([global_symbol_to_c_name_address_lib_prefix],\n    [lt_cv_sys_global_symbol_to_c_name_address_lib_prefix], [1],\n    [Transform the output of nm in a C name address pair when lib prefix is needed])\n_LT_DECL([], [nm_file_list_spec], [1],\n    [Specify filename containing input files for $NM])\n]) # _LT_CMD_GLOBAL_SYMBOLS\n\n\n# _LT_COMPILER_PIC([TAGNAME])\n# ---------------------------\nm4_defun([_LT_COMPILER_PIC],\n[m4_require([_LT_TAG_COMPILER])dnl\n_LT_TAGVAR(lt_prog_compiler_wl, $1)=\n_LT_TAGVAR(lt_prog_compiler_pic, $1)=\n_LT_TAGVAR(lt_prog_compiler_static, $1)=\n\nm4_if([$1], [CXX], [\n  # C++ specific cases for pic, static, wl, etc.\n  if test \"$GXX\" = yes; then\n    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\n    case $host_os in\n    aix*)\n      # All AIX code is PIC.\n      if test \"$host_cpu\" = ia64; then\n\t# AIX 5 now supports IA64 processor\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      fi\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n        ;;\n      m68k)\n            # FIXME: we need at least 68020 code to build shared libraries, but\n            # adding the `-m68020' flag to GCC prevents building anything better,\n            # like `-m68040'.\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-m68020 -resident32 -malways-restore-a4'\n        ;;\n      esac\n      ;;\n\n    beos* | irix5* | irix6* | nonstopux* | osf3* | osf4* | osf5*)\n      # PIC is the default for these OSes.\n      ;;\n    mingw* | cygwin* | os2* | pw32* | cegcc*)\n      # This hack is so that the source file can tell whether it is being\n      # built for inclusion in a dll (and should export symbols for example).\n      # Although the cygwin gcc ignores -fPIC, still need this for old-style\n      # (--disable-auto-import) libraries\n      m4_if([$1], [GCJ], [],\n\t[_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n      ;;\n    darwin* | rhapsody*)\n      # PIC is the default on this platform\n      # Common symbols not allowed in MH_DYLIB files\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fno-common'\n      ;;\n    *djgpp*)\n      # DJGPP does not support shared libraries at all\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n      ;;\n    haiku*)\n      # PIC is the default for Haiku.\n      # The \"-static\" flag exists, but is broken.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)=\n      ;;\n    interix[[3-9]]*)\n      # Interix 3.x gcc -fpic/-fPIC options generate broken code.\n      # Instead, we relocate shared libraries at runtime.\n      ;;\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)=-Kconform_pic\n      fi\n      ;;\n    hpux*)\n      # PIC is the default for 64-bit PA HP-UX, but not for 32-bit\n      # PA HP-UX.  On IA64 HP-UX, PIC is the default but the pic flag\n      # sets the default TLS model and affects inlining.\n      case $host_cpu in\n      hppa*64*)\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t;;\n      esac\n      ;;\n    *qnx* | *nto*)\n      # QNX uses GNU C++, but need to define -shared option too, otherwise\n      # it will coredump.\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n      ;;\n    *)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n    esac\n  else\n    case $host_os in\n      aix[[4-9]]*)\n\t# All AIX code is PIC.\n\tif test \"$host_cpu\" = ia64; then\n\t  # AIX 5 now supports IA64 processor\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\telse\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-bnso -bI:/lib/syscalls.exp'\n\tfi\n\t;;\n      chorus*)\n\tcase $cc_basename in\n\tcxch68*)\n\t  # Green Hills C++ Compiler\n\t  # _LT_TAGVAR(lt_prog_compiler_static, $1)=\"--no_auto_instantiation -u __main -u __premain -u _abort -r $COOL_DIR/lib/libOrb.a $MVME_DIR/lib/CC/libC.a $MVME_DIR/lib/classix/libcx.s.a\"\n\t  ;;\n\tesac\n\t;;\n      mingw* | cygwin* | os2* | pw32* | cegcc*)\n\t# This hack is so that the source file can tell whether it is being\n\t# built for inclusion in a dll (and should export symbols for example).\n\tm4_if([$1], [GCJ], [],\n\t  [_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n\t;;\n      dgux*)\n\tcase $cc_basename in\n\t  ec++*)\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    ;;\n\t  ghcx*)\n\t    # Green Hills C++ Compiler\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      freebsd* | dragonfly*)\n\t# FreeBSD uses GNU C++\n\t;;\n      hpux9* | hpux10* | hpux11*)\n\tcase $cc_basename in\n\t  CC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='${wl}-a ${wl}archive'\n\t    if test \"$host_cpu\" != ia64; then\n\t      _LT_TAGVAR(lt_prog_compiler_pic, $1)='+Z'\n\t    fi\n\t    ;;\n\t  aCC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='${wl}-a ${wl}archive'\n\t    case $host_cpu in\n\t    hppa*64*|ia64*)\n\t      # +Z the default\n\t      ;;\n\t    *)\n\t      _LT_TAGVAR(lt_prog_compiler_pic, $1)='+Z'\n\t      ;;\n\t    esac\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      interix*)\n\t# This is c89, which is MS Visual C++ (no shared libs)\n\t# Anyone wants to do a port?\n\t;;\n      irix5* | irix6* | nonstopux*)\n\tcase $cc_basename in\n\t  CC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n\t    # CC pic flag -KPIC is the default.\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      linux* | k*bsd*-gnu | kopensolaris*-gnu)\n\tcase $cc_basename in\n\t  KCC*)\n\t    # KAI C++ Compiler\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='--backend -Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t    ;;\n\t  ecpc* )\n\t    # old Intel C++ for x86_64 which still supported -KPIC.\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t    ;;\n\t  icpc* )\n\t    # Intel C++, used to be incompatible with GCC.\n\t    # ICC 10 doesn't accept -KPIC any more.\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t    ;;\n\t  pgCC* | pgcpp*)\n\t    # Portland Group C++ compiler\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fpic'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    ;;\n\t  cxx*)\n\t    # Compaq C++\n\t    # Make sure the PIC flag is empty.  It appears that all Alpha\n\t    # Linux and Compaq Tru64 Unix objects are PIC.\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n\t    ;;\n\t  xlc* | xlC* | bgxl[[cC]]* | mpixl[[cC]]*)\n\t    # IBM XL 8.0, 9.0 on PPC and BlueGene\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-qpic'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-qstaticlink'\n\t    ;;\n\t  *)\n\t    case `$CC -V 2>&1 | sed 5q` in\n\t    *Sun\\ C*)\n\t      # Sun C++ 5.9\n\t      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n\t      ;;\n\t    esac\n\t    ;;\n\tesac\n\t;;\n      lynxos*)\n\t;;\n      m88k*)\n\t;;\n      mvs*)\n\tcase $cc_basename in\n\t  cxx*)\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-W c,exportall'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      netbsd*)\n\t;;\n      *qnx* | *nto*)\n        # QNX uses GNU C++, but need to define -shared option too, otherwise\n        # it will coredump.\n        _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n        ;;\n      osf3* | osf4* | osf5*)\n\tcase $cc_basename in\n\t  KCC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='--backend -Wl,'\n\t    ;;\n\t  RCC*)\n\t    # Rational C++ 2.4.1\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    ;;\n\t  cxx*)\n\t    # Digital/Compaq C++\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    # Make sure the PIC flag is empty.  It appears that all Alpha\n\t    # Linux and Compaq Tru64 Unix objects are PIC.\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      psos*)\n\t;;\n      solaris*)\n\tcase $cc_basename in\n\t  CC* | sunCC*)\n\t    # Sun C++ 4.2, 5.x and Centerline C++\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n\t    ;;\n\t  gcx*)\n\t    # Green Hills C++ Compiler\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      sunos4*)\n\tcase $cc_basename in\n\t  CC*)\n\t    # Sun C++ 4.x\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    ;;\n\t  lcc*)\n\t    # Lucid\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      sysv5* | unixware* | sco3.2v5* | sco5v6* | OpenUNIX*)\n\tcase $cc_basename in\n\t  CC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    ;;\n\tesac\n\t;;\n      tandem*)\n\tcase $cc_basename in\n\t  NCC*)\n\t    # NonStop-UX NCC 3.20\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      vxworks*)\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n\t;;\n    esac\n  fi\n],\n[\n  if test \"$GCC\" = yes; then\n    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\n    case $host_os in\n      aix*)\n      # All AIX code is PIC.\n      if test \"$host_cpu\" = ia64; then\n\t# AIX 5 now supports IA64 processor\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      fi\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n        ;;\n      m68k)\n            # FIXME: we need at least 68020 code to build shared libraries, but\n            # adding the `-m68020' flag to GCC prevents building anything better,\n            # like `-m68040'.\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-m68020 -resident32 -malways-restore-a4'\n        ;;\n      esac\n      ;;\n\n    beos* | irix5* | irix6* | nonstopux* | osf3* | osf4* | osf5*)\n      # PIC is the default for these OSes.\n      ;;\n\n    mingw* | cygwin* | pw32* | os2* | cegcc*)\n      # This hack is so that the source file can tell whether it is being\n      # built for inclusion in a dll (and should export symbols for example).\n      # Although the cygwin gcc ignores -fPIC, still need this for old-style\n      # (--disable-auto-import) libraries\n      m4_if([$1], [GCJ], [],\n\t[_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n      ;;\n\n    darwin* | rhapsody*)\n      # PIC is the default on this platform\n      # Common symbols not allowed in MH_DYLIB files\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fno-common'\n      ;;\n\n    haiku*)\n      # PIC is the default for Haiku.\n      # The \"-static\" flag exists, but is broken.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)=\n      ;;\n\n    hpux*)\n      # PIC is the default for 64-bit PA HP-UX, but not for 32-bit\n      # PA HP-UX.  On IA64 HP-UX, PIC is the default but the pic flag\n      # sets the default TLS model and affects inlining.\n      case $host_cpu in\n      hppa*64*)\n\t# +Z the default\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t;;\n      esac\n      ;;\n\n    interix[[3-9]]*)\n      # Interix 3.x gcc -fpic/-fPIC options generate broken code.\n      # Instead, we relocate shared libraries at runtime.\n      ;;\n\n    msdosdjgpp*)\n      # Just because we use GCC doesn't mean we suddenly get shared libraries\n      # on systems that don't support them.\n      _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n      enable_shared=no\n      ;;\n\n    *nto* | *qnx*)\n      # QNX uses GNU C++, but need to define -shared option too, otherwise\n      # it will coredump.\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n      ;;\n\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)=-Kconform_pic\n      fi\n      ;;\n\n    *)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n    esac\n\n    case $cc_basename in\n    nvcc*) # Cuda Compiler Driver 2.2\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Xlinker '\n      if test -n \"$_LT_TAGVAR(lt_prog_compiler_pic, $1)\"; then\n        _LT_TAGVAR(lt_prog_compiler_pic, $1)=\"-Xcompiler $_LT_TAGVAR(lt_prog_compiler_pic, $1)\"\n      fi\n      ;;\n    esac\n  else\n    # PORTME Check for flag to pass linker flags through the system compiler.\n    case $host_os in\n    aix*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      if test \"$host_cpu\" = ia64; then\n\t# AIX 5 now supports IA64 processor\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      else\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-bnso -bI:/lib/syscalls.exp'\n      fi\n      ;;\n\n    mingw* | cygwin* | pw32* | os2* | cegcc*)\n      # This hack is so that the source file can tell whether it is being\n      # built for inclusion in a dll (and should export symbols for example).\n      m4_if([$1], [GCJ], [],\n\t[_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n      ;;\n\n    hpux9* | hpux10* | hpux11*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      # PIC is the default for IA64 HP-UX and 64-bit HP-UX, but\n      # not for PA HP-UX.\n      case $host_cpu in\n      hppa*64*|ia64*)\n\t# +Z the default\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='+Z'\n\t;;\n      esac\n      # Is there a better lt_prog_compiler_static that works with the bundled CC?\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='${wl}-a ${wl}archive'\n      ;;\n\n    irix5* | irix6* | nonstopux*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      # PIC (with -KPIC) is the default.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n      ;;\n\n    linux* | k*bsd*-gnu | kopensolaris*-gnu)\n      case $cc_basename in\n      # old Intel for x86_64 which still supported -KPIC.\n      ecc*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n        ;;\n      # icc used to be incompatible with GCC.\n      # ICC 10 doesn't accept -KPIC any more.\n      icc* | ifort*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n        ;;\n      # Lahey Fortran 8.1.\n      lf95*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='--shared'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='--static'\n\t;;\n      nagfor*)\n\t# NAG Fortran compiler\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,-Wl,,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t;;\n      pgcc* | pgf77* | pgf90* | pgf95* | pgfortran*)\n        # Portland Group compilers (*not* the Pentium gcc compiler,\n\t# which looks to be a dead project)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fpic'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n        ;;\n      ccc*)\n        _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n        # All Alpha code is PIC.\n        _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n        ;;\n      xl* | bgxl* | bgf* | mpixl*)\n\t# IBM XL C 8.0/Fortran 10.1, 11.1 on PPC and BlueGene\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-qpic'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-qstaticlink'\n\t;;\n      *)\n\tcase `$CC -V 2>&1 | sed 5q` in\n\t*Sun\\ Ceres\\ Fortran* | *Sun*Fortran*\\ [[1-7]].* | *Sun*Fortran*\\ 8.[[0-3]]*)\n\t  # Sun Fortran 8.3 passes all unrecognized flags to the linker\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)=''\n\t  ;;\n\t*Sun\\ F* | *Sun*Fortran*)\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n\t  ;;\n\t*Sun\\ C*)\n\t  # Sun C 5.9\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t  ;;\n        *Intel*\\ [[CF]]*Compiler*)\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t  ;;\n\t*Portland\\ Group*)\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fpic'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  ;;\n\tesac\n\t;;\n      esac\n      ;;\n\n    newsos6)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    *nto* | *qnx*)\n      # QNX uses GNU C++, but need to define -shared option too, otherwise\n      # it will coredump.\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n      ;;\n\n    osf3* | osf4* | osf5*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      # All OSF/1 code is PIC.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n      ;;\n\n    rdos*)\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n      ;;\n\n    solaris*)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      case $cc_basename in\n      f77* | f90* | f95* | sunf77* | sunf90* | sunf95*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld ';;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,';;\n      esac\n      ;;\n\n    sunos4*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    sysv4 | sysv4.2uw2* | sysv4.3*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    sysv4*MP*)\n      if test -d /usr/nec ;then\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-Kconform_pic'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      fi\n      ;;\n\n    sysv5* | unixware* | sco3.2v5* | sco5v6* | OpenUNIX*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    unicos*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n      ;;\n\n    uts4*)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    *)\n      _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n      ;;\n    esac\n  fi\n])\ncase $host_os in\n  # For platforms which do not support PIC, -DPIC is meaningless:\n  *djgpp*)\n    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n    ;;\n  *)\n    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\"$_LT_TAGVAR(lt_prog_compiler_pic, $1)@&t@m4_if([$1],[],[ -DPIC],[m4_if([$1],[CXX],[ -DPIC],[])])\"\n    ;;\nesac\n\nAC_CACHE_CHECK([for $compiler option to produce PIC],\n  [_LT_TAGVAR(lt_cv_prog_compiler_pic, $1)],\n  [_LT_TAGVAR(lt_cv_prog_compiler_pic, $1)=$_LT_TAGVAR(lt_prog_compiler_pic, $1)])\n_LT_TAGVAR(lt_prog_compiler_pic, $1)=$_LT_TAGVAR(lt_cv_prog_compiler_pic, $1)\n\n#\n# Check to make sure the PIC flag actually works.\n#\nif test -n \"$_LT_TAGVAR(lt_prog_compiler_pic, $1)\"; then\n  _LT_COMPILER_OPTION([if $compiler PIC flag $_LT_TAGVAR(lt_prog_compiler_pic, $1) works],\n    [_LT_TAGVAR(lt_cv_prog_compiler_pic_works, $1)],\n    [$_LT_TAGVAR(lt_prog_compiler_pic, $1)@&t@m4_if([$1],[],[ -DPIC],[m4_if([$1],[CXX],[ -DPIC],[])])], [],\n    [case $_LT_TAGVAR(lt_prog_compiler_pic, $1) in\n     \"\" | \" \"*) ;;\n     *) _LT_TAGVAR(lt_prog_compiler_pic, $1)=\" $_LT_TAGVAR(lt_prog_compiler_pic, $1)\" ;;\n     esac],\n    [_LT_TAGVAR(lt_prog_compiler_pic, $1)=\n     _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no])\nfi\n_LT_TAGDECL([pic_flag], [lt_prog_compiler_pic], [1],\n\t[Additional compiler flags for building library objects])\n\n_LT_TAGDECL([wl], [lt_prog_compiler_wl], [1],\n\t[How to pass a linker flag through the compiler])\n#\n# Check to make sure the static flag actually works.\n#\nwl=$_LT_TAGVAR(lt_prog_compiler_wl, $1) eval lt_tmp_static_flag=\\\"$_LT_TAGVAR(lt_prog_compiler_static, $1)\\\"\n_LT_LINKER_OPTION([if $compiler static flag $lt_tmp_static_flag works],\n  _LT_TAGVAR(lt_cv_prog_compiler_static_works, $1),\n  $lt_tmp_static_flag,\n  [],\n  [_LT_TAGVAR(lt_prog_compiler_static, $1)=])\n_LT_TAGDECL([link_static_flag], [lt_prog_compiler_static], [1],\n\t[Compiler flag to prevent dynamic linking])\n])# _LT_COMPILER_PIC\n\n\n# _LT_LINKER_SHLIBS([TAGNAME])\n# ----------------------------\n# See if the linker supports building shared libraries.\nm4_defun([_LT_LINKER_SHLIBS],\n[AC_REQUIRE([LT_PATH_LD])dnl\nAC_REQUIRE([LT_PATH_NM])dnl\nm4_require([_LT_PATH_MANIFEST_TOOL])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_CMD_GLOBAL_SYMBOLS])dnl\nm4_require([_LT_TAG_COMPILER])dnl\nAC_MSG_CHECKING([whether the $compiler linker ($LD) supports shared libraries])\nm4_if([$1], [CXX], [\n  _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\\''s/.* //'\\'' | sort | uniq > $export_symbols'\n  _LT_TAGVAR(exclude_expsyms, $1)=['_GLOBAL_OFFSET_TABLE_|_GLOBAL__F[ID]_.*']\n  case $host_os in\n  aix[[4-9]]*)\n    # If we're using GNU nm, then we don't want the \"-C\" option.\n    # -C means demangle to AIX nm, but means don't demangle with GNU nm\n    # Also, AIX nm treats weak defined symbols like other global defined\n    # symbols, whereas GNU nm marks them as \"W\".\n    if $NM -V 2>&1 | $GREP 'GNU' > /dev/null; then\n      _LT_TAGVAR(export_symbols_cmds, $1)='$NM -Bpg $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\") || (\\$ 2 == \"W\")) && ([substr](\\$ 3,1,1) != \".\")) { print \\$ 3 } }'\\'' | sort -u > $export_symbols'\n    else\n      _LT_TAGVAR(export_symbols_cmds, $1)='$NM -BCpg $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\")) && ([substr](\\$ 3,1,1) != \".\")) { print \\$ 3 } }'\\'' | sort -u > $export_symbols'\n    fi\n    ;;\n  pw32*)\n    _LT_TAGVAR(export_symbols_cmds, $1)=\"$ltdll_cmds\"\n    ;;\n  cygwin* | mingw* | cegcc*)\n    case $cc_basename in\n    cl*)\n      _LT_TAGVAR(exclude_expsyms, $1)='_NULL_IMPORT_DESCRIPTOR|_IMPORT_DESCRIPTOR_.*'\n      ;;\n    *)\n      _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED -e '\\''/^[[BCDGRS]][[ ]]/s/.*[[ ]]\\([[^ ]]*\\)/\\1 DATA/;s/^.*[[ ]]__nm__\\([[^ ]]*\\)[[ ]][[^ ]]*/\\1 DATA/;/^I[[ ]]/d;/^[[AITW]][[ ]]/s/.* //'\\'' | sort | uniq > $export_symbols'\n      _LT_TAGVAR(exclude_expsyms, $1)=['[_]+GLOBAL_OFFSET_TABLE_|[_]+GLOBAL__[FID]_.*|[_]+head_[A-Za-z0-9_]+_dll|[A-Za-z0-9_]+_dll_iname']\n      ;;\n    esac\n    ;;\n  *)\n    _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\\''s/.* //'\\'' | sort | uniq > $export_symbols'\n    ;;\n  esac\n], [\n  runpath_var=\n  _LT_TAGVAR(allow_undefined_flag, $1)=\n  _LT_TAGVAR(always_export_symbols, $1)=no\n  _LT_TAGVAR(archive_cmds, $1)=\n  _LT_TAGVAR(archive_expsym_cmds, $1)=\n  _LT_TAGVAR(compiler_needs_object, $1)=no\n  _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n  _LT_TAGVAR(export_dynamic_flag_spec, $1)=\n  _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\\''s/.* //'\\'' | sort | uniq > $export_symbols'\n  _LT_TAGVAR(hardcode_automatic, $1)=no\n  _LT_TAGVAR(hardcode_direct, $1)=no\n  _LT_TAGVAR(hardcode_direct_absolute, $1)=no\n  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n  _LT_TAGVAR(hardcode_libdir_separator, $1)=\n  _LT_TAGVAR(hardcode_minus_L, $1)=no\n  _LT_TAGVAR(hardcode_shlibpath_var, $1)=unsupported\n  _LT_TAGVAR(inherit_rpath, $1)=no\n  _LT_TAGVAR(link_all_deplibs, $1)=unknown\n  _LT_TAGVAR(module_cmds, $1)=\n  _LT_TAGVAR(module_expsym_cmds, $1)=\n  _LT_TAGVAR(old_archive_from_new_cmds, $1)=\n  _LT_TAGVAR(old_archive_from_expsyms_cmds, $1)=\n  _LT_TAGVAR(thread_safe_flag_spec, $1)=\n  _LT_TAGVAR(whole_archive_flag_spec, $1)=\n  # include_expsyms should be a list of space-separated symbols to be *always*\n  # included in the symbol list\n  _LT_TAGVAR(include_expsyms, $1)=\n  # exclude_expsyms can be an extended regexp of symbols to exclude\n  # it will be wrapped by ` (' and `)$', so one must not match beginning or\n  # end of line.  Example: `a|bc|.*d.*' will exclude the symbols `a' and `bc',\n  # as well as any symbol that contains `d'.\n  _LT_TAGVAR(exclude_expsyms, $1)=['_GLOBAL_OFFSET_TABLE_|_GLOBAL__F[ID]_.*']\n  # Although _GLOBAL_OFFSET_TABLE_ is a valid symbol C name, most a.out\n  # platforms (ab)use it in PIC code, but their linkers get confused if\n  # the symbol is explicitly referenced.  Since portable code cannot\n  # rely on this symbol name, it's probably fine to never include it in\n  # preloaded symbol tables.\n  # Exclude shared library initialization/finalization symbols.\ndnl Note also adjust exclude_expsyms for C++ above.\n  extract_expsyms_cmds=\n\n  case $host_os in\n  cygwin* | mingw* | pw32* | cegcc*)\n    # FIXME: the MSVC++ port hasn't been tested in a loooong time\n    # When not using gcc, we currently assume that we are using\n    # Microsoft Visual C++.\n    if test \"$GCC\" != yes; then\n      with_gnu_ld=no\n    fi\n    ;;\n  interix*)\n    # we just hope/assume this is gcc and not c89 (= MSVC++)\n    with_gnu_ld=yes\n    ;;\n  openbsd*)\n    with_gnu_ld=no\n    ;;\n  esac\n\n  _LT_TAGVAR(ld_shlibs, $1)=yes\n\n  # On some targets, GNU ld is compatible enough with the native linker\n  # that we're better off using the native interface for both.\n  lt_use_gnu_ld_interface=no\n  if test \"$with_gnu_ld\" = yes; then\n    case $host_os in\n      aix*)\n\t# The AIX port of GNU ld has always aspired to compatibility\n\t# with the native linker.  However, as the warning in the GNU ld\n\t# block says, versions before 2.19.5* couldn't really create working\n\t# shared libraries, regardless of the interface used.\n\tcase `$LD -v 2>&1` in\n\t  *\\ \\(GNU\\ Binutils\\)\\ 2.19.5*) ;;\n\t  *\\ \\(GNU\\ Binutils\\)\\ 2.[[2-9]]*) ;;\n\t  *\\ \\(GNU\\ Binutils\\)\\ [[3-9]]*) ;;\n\t  *)\n\t    lt_use_gnu_ld_interface=yes\n\t    ;;\n\tesac\n\t;;\n      *)\n\tlt_use_gnu_ld_interface=yes\n\t;;\n    esac\n  fi\n\n  if test \"$lt_use_gnu_ld_interface\" = yes; then\n    # If archive_cmds runs LD, not CC, wlarc should be empty\n    wlarc='${wl}'\n\n    # Set some defaults for GNU ld with shared library support. These\n    # are reset later if shared libraries are not supported. Putting them\n    # here allows them to be overridden if necessary.\n    runpath_var=LD_RUN_PATH\n    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n    _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}--export-dynamic'\n    # ancient GNU ld didn't support --whole-archive et. al.\n    if $LD --help 2>&1 | $GREP 'no-whole-archive' > /dev/null; then\n      _LT_TAGVAR(whole_archive_flag_spec, $1)=\"$wlarc\"'--whole-archive$convenience '\"$wlarc\"'--no-whole-archive'\n    else\n      _LT_TAGVAR(whole_archive_flag_spec, $1)=\n    fi\n    supports_anon_versioning=no\n    case `$LD -v 2>&1` in\n      *GNU\\ gold*) supports_anon_versioning=yes ;;\n      *\\ [[01]].* | *\\ 2.[[0-9]].* | *\\ 2.10.*) ;; # catch versions < 2.11\n      *\\ 2.11.93.0.2\\ *) supports_anon_versioning=yes ;; # RH7.3 ...\n      *\\ 2.11.92.0.12\\ *) supports_anon_versioning=yes ;; # Mandrake 8.2 ...\n      *\\ 2.11.*) ;; # other 2.11 versions\n      *) supports_anon_versioning=yes ;;\n    esac\n\n    # See if GNU ld supports shared libraries.\n    case $host_os in\n    aix[[3-9]]*)\n      # On AIX/PPC, the GNU linker is very broken\n      if test \"$host_cpu\" != ia64; then\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\tcat <<_LT_EOF 1>&2\n\n*** Warning: the GNU linker, at least up to release 2.19, is reported\n*** to be unable to reliably create shared libraries on AIX.\n*** Therefore, libtool is disabling shared libraries support.  If you\n*** really care for shared libraries, you may want to install binutils\n*** 2.20 or above, or modify your PATH so that a non-GNU linker is found.\n*** You will then need to restart the configuration process.\n\n_LT_EOF\n      fi\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n            _LT_TAGVAR(archive_expsym_cmds, $1)=''\n        ;;\n      m68k)\n            _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/a2ixlibrary.data~$ECHO \"#define NAME $libname\" > $output_objdir/a2ixlibrary.data~$ECHO \"#define LIBRARY_ID 1\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define VERSION $major\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define REVISION $revision\" >> $output_objdir/a2ixlibrary.data~$AR $AR_FLAGS $lib $libobjs~$RANLIB $lib~(cd $output_objdir && a2ixlibrary -32)'\n            _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n            _LT_TAGVAR(hardcode_minus_L, $1)=yes\n        ;;\n      esac\n      ;;\n\n    beos*)\n      if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t_LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t# Joseph Beckenbach <jrb3@best.com> says some releases of gcc\n\t# support --undefined.  This deserves some investigation.  FIXME\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -nostart $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    cygwin* | mingw* | pw32* | cegcc*)\n      # _LT_TAGVAR(hardcode_libdir_flag_spec, $1) is actually meaningless,\n      # as there is no search path for DLLs.\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}--export-all-symbols'\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      _LT_TAGVAR(always_export_symbols, $1)=no\n      _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n      _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED -e '\\''/^[[BCDGRS]][[ ]]/s/.*[[ ]]\\([[^ ]]*\\)/\\1 DATA/;s/^.*[[ ]]__nm__\\([[^ ]]*\\)[[ ]][[^ ]]*/\\1 DATA/;/^I[[ ]]/d;/^[[AITW]][[ ]]/s/.* //'\\'' | sort | uniq > $export_symbols'\n      _LT_TAGVAR(exclude_expsyms, $1)=['[_]+GLOBAL_OFFSET_TABLE_|[_]+GLOBAL__[FID]_.*|[_]+head_[A-Za-z0-9_]+_dll|[A-Za-z0-9_]+_dll_iname']\n\n      if $LD --help 2>&1 | $GREP 'auto-import' > /dev/null; then\n        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags -o $output_objdir/$soname ${wl}--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n\t# If the export-symbols file already is a .def file (1st line\n\t# is EXPORTS), use it as is; otherwise, prepend...\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='if test \"x`$SED 1q $export_symbols`\" = xEXPORTS; then\n\t  cp $export_symbols $output_objdir/$soname.def;\n\telse\n\t  echo EXPORTS > $output_objdir/$soname.def;\n\t  cat $export_symbols >> $output_objdir/$soname.def;\n\tfi~\n\t$CC -shared $output_objdir/$soname.def $libobjs $deplibs $compiler_flags -o $output_objdir/$soname ${wl}--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    haiku*)\n      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      ;;\n\n    interix[[3-9]]*)\n      _LT_TAGVAR(hardcode_direct, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n      # Hack: On Interix 3.x, we cannot compile PIC because of a broken gcc.\n      # Instead, shared libraries are loaded at an image base (0x10000000 by\n      # default) and relocated if they conflict, which is a slow very memory\n      # consuming and fragmenting process.  To avoid this, we pick a random,\n      # 256 KiB-aligned image base between 0x50000000 and 0x6FFC0000 at link\n      # time.  Moving up from 0x10000000 also allows more sbrk(2) space.\n      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-h,$soname ${wl}--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n      _LT_TAGVAR(archive_expsym_cmds, $1)='sed \"s,^,_,\" $export_symbols >$output_objdir/$soname.expsym~$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-h,$soname ${wl}--retain-symbols-file,$output_objdir/$soname.expsym ${wl}--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n      ;;\n\n    gnu* | linux* | tpf* | k*bsd*-gnu | kopensolaris*-gnu)\n      tmp_diet=no\n      if test \"$host_os\" = linux-dietlibc; then\n\tcase $cc_basename in\n\t  diet\\ *) tmp_diet=yes;;\t# linux-dietlibc with static linking (!diet-dyn)\n\tesac\n      fi\n      if $LD --help 2>&1 | $EGREP ': supported targets:.* elf' > /dev/null \\\n\t && test \"$tmp_diet\" = no\n      then\n\ttmp_addflag=' $pic_flag'\n\ttmp_sharedflag='-shared'\n\tcase $cc_basename,$host_cpu in\n        pgcc*)\t\t\t\t# Portland Group C compiler\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` ${wl}--no-whole-archive'\n\t  tmp_addflag=' $pic_flag'\n\t  ;;\n\tpgf77* | pgf90* | pgf95* | pgfortran*)\n\t\t\t\t\t# Portland Group f77 and f90 compilers\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` ${wl}--no-whole-archive'\n\t  tmp_addflag=' $pic_flag -Mnomain' ;;\n\tecc*,ia64* | icc*,ia64*)\t# Intel C compiler on ia64\n\t  tmp_addflag=' -i_dynamic' ;;\n\tefc*,ia64* | ifort*,ia64*)\t# Intel Fortran compiler on ia64\n\t  tmp_addflag=' -i_dynamic -nofor_main' ;;\n\tifc* | ifort*)\t\t\t# Intel Fortran compiler\n\t  tmp_addflag=' -nofor_main' ;;\n\tlf95*)\t\t\t\t# Lahey Fortran 8.1\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)=\n\t  tmp_sharedflag='--shared' ;;\n\txl[[cC]]* | bgxl[[cC]]* | mpixl[[cC]]*) # IBM XL C 8.0 on PPC (deal with xlf below)\n\t  tmp_sharedflag='-qmkshrobj'\n\t  tmp_addflag= ;;\n\tnvcc*)\t# Cuda Compiler Driver 2.2\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` ${wl}--no-whole-archive'\n\t  _LT_TAGVAR(compiler_needs_object, $1)=yes\n\t  ;;\n\tesac\n\tcase `$CC -V 2>&1 | sed 5q` in\n\t*Sun\\ C*)\t\t\t# Sun C 5.9\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive`new_convenience=; for conv in $convenience\\\"\\\"; do test -z \\\"$conv\\\" || new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` ${wl}--no-whole-archive'\n\t  _LT_TAGVAR(compiler_needs_object, $1)=yes\n\t  tmp_sharedflag='-G' ;;\n\t*Sun\\ F*)\t\t\t# Sun Fortran 8.3\n\t  tmp_sharedflag='-G' ;;\n\tesac\n\t_LT_TAGVAR(archive_cmds, $1)='$CC '\"$tmp_sharedflag\"\"$tmp_addflag\"' $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\n        if test \"x$supports_anon_versioning\" = xyes; then\n          _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $output_objdir/$libname.ver~\n\t    cat $export_symbols | sed -e \"s/\\(.*\\)/\\1;/\" >> $output_objdir/$libname.ver~\n\t    echo \"local: *; };\" >> $output_objdir/$libname.ver~\n\t    $CC '\"$tmp_sharedflag\"\"$tmp_addflag\"' $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-version-script ${wl}$output_objdir/$libname.ver -o $lib'\n        fi\n\n\tcase $cc_basename in\n\txlf* | bgf* | bgxlf* | mpixlf*)\n\t  # IBM XL Fortran 10.1 on PPC cannot create shared libs itself\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='--whole-archive$convenience --no-whole-archive'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -shared $libobjs $deplibs $linker_flags -soname $soname -o $lib'\n\t  if test \"x$supports_anon_versioning\" = xyes; then\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $output_objdir/$libname.ver~\n\t      cat $export_symbols | sed -e \"s/\\(.*\\)/\\1;/\" >> $output_objdir/$libname.ver~\n\t      echo \"local: *; };\" >> $output_objdir/$libname.ver~\n\t      $LD -shared $libobjs $deplibs $linker_flags -soname $soname -version-script $output_objdir/$libname.ver -o $lib'\n\t  fi\n\t  ;;\n\tesac\n      else\n        _LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    netbsd*)\n      if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable $libobjs $deplibs $linker_flags -o $lib'\n\twlarc=\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'\n      fi\n      ;;\n\n    solaris*)\n      if $LD -v 2>&1 | $GREP 'BFD 2\\.8' > /dev/null; then\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\tcat <<_LT_EOF 1>&2\n\n*** Warning: The releases 2.8.* of the GNU linker cannot reliably\n*** create shared libraries on Solaris systems.  Therefore, libtool\n*** is disabling shared libraries support.  We urge you to upgrade GNU\n*** binutils to release 2.9.1 or newer.  Another option is to modify\n*** your PATH or compiler configuration so that the native linker is\n*** used, and then restart.\n\n_LT_EOF\n      elif $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    sysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX*)\n      case `$LD -v 2>&1` in\n        *\\ [[01]].* | *\\ 2.[[0-9]].* | *\\ 2.1[[0-5]].*)\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\tcat <<_LT_EOF 1>&2\n\n*** Warning: Releases of the GNU linker prior to 2.16.91.0.3 can not\n*** reliably create shared libraries on SCO systems.  Therefore, libtool\n*** is disabling shared libraries support.  We urge you to upgrade GNU\n*** binutils to release 2.16.91.0.3 or newer.  Another option is to modify\n*** your PATH or compiler configuration so that the native linker is\n*** used, and then restart.\n\n_LT_EOF\n\t;;\n\t*)\n\t  # For security reasons, it is highly recommended that you always\n\t  # use absolute paths for naming shared libraries, and exclude the\n\t  # DT_RUNPATH tag from executables and libraries.  But doing so\n\t  # requires that you compile everything twice, which is a pain.\n\t  if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'\n\t  else\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t  fi\n\t;;\n      esac\n      ;;\n\n    sunos4*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -assert pure-text -Bshareable -o $lib $libobjs $deplibs $linker_flags'\n      wlarc=\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    *)\n      if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n    esac\n\n    if test \"$_LT_TAGVAR(ld_shlibs, $1)\" = no; then\n      runpath_var=\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)=\n      _LT_TAGVAR(whole_archive_flag_spec, $1)=\n    fi\n  else\n    # PORTME fill in a description of your system's linker (not GNU ld)\n    case $host_os in\n    aix3*)\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      _LT_TAGVAR(always_export_symbols, $1)=yes\n      _LT_TAGVAR(archive_expsym_cmds, $1)='$LD -o $output_objdir/$soname $libobjs $deplibs $linker_flags -bE:$export_symbols -T512 -H512 -bM:SRE~$AR $AR_FLAGS $lib $output_objdir/$soname'\n      # Note: this linker hardcodes the directories in LIBPATH if there\n      # are no directories specified by -L.\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      if test \"$GCC\" = yes && test -z \"$lt_prog_compiler_static\"; then\n\t# Neither direct hardcoding nor static linking is supported with a\n\t# broken collect2.\n\t_LT_TAGVAR(hardcode_direct, $1)=unsupported\n      fi\n      ;;\n\n    aix[[4-9]]*)\n      if test \"$host_cpu\" = ia64; then\n\t# On IA64, the linker does run time linking by default, so we don't\n\t# have to do anything special.\n\taix_use_runtimelinking=no\n\texp_sym_flag='-Bexport'\n\tno_entry_flag=\"\"\n      else\n\t# If we're using GNU nm, then we don't want the \"-C\" option.\n\t# -C means demangle to AIX nm, but means don't demangle with GNU nm\n\t# Also, AIX nm treats weak defined symbols like other global\n\t# defined symbols, whereas GNU nm marks them as \"W\".\n\tif $NM -V 2>&1 | $GREP 'GNU' > /dev/null; then\n\t  _LT_TAGVAR(export_symbols_cmds, $1)='$NM -Bpg $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\") || (\\$ 2 == \"W\")) && ([substr](\\$ 3,1,1) != \".\")) { print \\$ 3 } }'\\'' | sort -u > $export_symbols'\n\telse\n\t  _LT_TAGVAR(export_symbols_cmds, $1)='$NM -BCpg $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\")) && ([substr](\\$ 3,1,1) != \".\")) { print \\$ 3 } }'\\'' | sort -u > $export_symbols'\n\tfi\n\taix_use_runtimelinking=no\n\n\t# Test if we are trying to use run time linking or normal\n\t# AIX style linking. If -brtl is somewhere in LDFLAGS, we\n\t# need to do runtime linking.\n\tcase $host_os in aix4.[[23]]|aix4.[[23]].*|aix[[5-9]]*)\n\t  for ld_flag in $LDFLAGS; do\n\t  if (test $ld_flag = \"-brtl\" || test $ld_flag = \"-Wl,-brtl\"); then\n\t    aix_use_runtimelinking=yes\n\t    break\n\t  fi\n\t  done\n\t  ;;\n\tesac\n\n\texp_sym_flag='-bexport'\n\tno_entry_flag='-bnoentry'\n      fi\n\n      # When large executables or shared objects are built, AIX ld can\n      # have problems creating the table of contents.  If linking a library\n      # or program results in \"error TOC overflow\" add -mminimal-toc to\n      # CXXFLAGS/CFLAGS for g++/gcc.  In the cases where that is not\n      # enough to fix the problem, add -Wl,-bbigtoc to LDFLAGS.\n\n      _LT_TAGVAR(archive_cmds, $1)=''\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      _LT_TAGVAR(file_list_spec, $1)='${wl}-f,'\n\n      if test \"$GCC\" = yes; then\n\tcase $host_os in aix4.[[012]]|aix4.[[012]].*)\n\t# We only want to do this on AIX 4.2 and lower, the check\n\t# below for broken collect2 doesn't work under 4.3+\n\t  collect2name=`${CC} -print-prog-name=collect2`\n\t  if test -f \"$collect2name\" &&\n\t   strings \"$collect2name\" | $GREP resolve_lib_name >/dev/null\n\t  then\n\t  # We have reworked collect2\n\t  :\n\t  else\n\t  # We have old collect2\n\t  _LT_TAGVAR(hardcode_direct, $1)=unsupported\n\t  # It fails to find uninstalled libraries when the uninstalled\n\t  # path is not listed in the libpath.  Setting hardcode_minus_L\n\t  # to unsupported forces relinking\n\t  _LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t  _LT_TAGVAR(hardcode_libdir_separator, $1)=\n\t  fi\n\t  ;;\n\tesac\n\tshared_flag='-shared'\n\tif test \"$aix_use_runtimelinking\" = yes; then\n\t  shared_flag=\"$shared_flag \"'${wl}-G'\n\tfi\n      else\n\t# not using gcc\n\tif test \"$host_cpu\" = ia64; then\n\t# VisualAge C++, Version 5.5 for AIX 5L for IA-64, Beta 3 Release\n\t# chokes on -Wl,-G. The following line is correct:\n\t  shared_flag='-G'\n\telse\n\t  if test \"$aix_use_runtimelinking\" = yes; then\n\t    shared_flag='${wl}-G'\n\t  else\n\t    shared_flag='${wl}-bM:SRE'\n\t  fi\n\tfi\n      fi\n\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-bexpall'\n      # It seems that -bexpall does not export symbols beginning with\n      # underscore (_), so it is better to generate a list of symbols to export.\n      _LT_TAGVAR(always_export_symbols, $1)=yes\n      if test \"$aix_use_runtimelinking\" = yes; then\n\t# Warning - without using the other runtime loading flags (-brtl),\n\t# -berok will link without error, but may produce a broken library.\n\t_LT_TAGVAR(allow_undefined_flag, $1)='-berok'\n        # Determine the default libpath from the value encoded in an\n        # empty executable.\n        _LT_SYS_MODULE_PATH_AIX([$1])\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-blibpath:$libdir:'\"$aix_libpath\"\n        _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $deplibs '\"\\${wl}$no_entry_flag\"' $compiler_flags `if test \"x${allow_undefined_flag}\" != \"x\"; then func_echo_all \"${wl}${allow_undefined_flag}\"; else :; fi` '\"\\${wl}$exp_sym_flag:\\$export_symbols $shared_flag\"\n      else\n\tif test \"$host_cpu\" = ia64; then\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-R $libdir:/usr/lib:/lib'\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=\"-z nodefs\"\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)=\"\\$CC $shared_flag\"' -o $output_objdir/$soname $libobjs $deplibs '\"\\${wl}$no_entry_flag\"' $compiler_flags ${wl}${allow_undefined_flag} '\"\\${wl}$exp_sym_flag:\\$export_symbols\"\n\telse\n\t # Determine the default libpath from the value encoded in an\n\t # empty executable.\n\t _LT_SYS_MODULE_PATH_AIX([$1])\n\t _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-blibpath:$libdir:'\"$aix_libpath\"\n\t  # Warning - without using the other run time loading flags,\n\t  # -berok will link without error, but may produce a broken library.\n\t  _LT_TAGVAR(no_undefined_flag, $1)=' ${wl}-bernotok'\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=' ${wl}-berok'\n\t  if test \"$with_gnu_ld\" = yes; then\n\t    # We only use this code for GNU lds that support --whole-archive.\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive$convenience ${wl}--no-whole-archive'\n\t  else\n\t    # Exported symbols can be pulled into shared objects from archives\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='$convenience'\n\t  fi\n\t  _LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\t  # This is similar to how AIX traditionally builds its shared libraries.\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)=\"\\$CC $shared_flag\"' -o $output_objdir/$soname $libobjs $deplibs ${wl}-bnoentry $compiler_flags ${wl}-bE:$export_symbols${allow_undefined_flag}~$AR $AR_FLAGS $output_objdir/$libname$release.a $output_objdir/$soname'\n\tfi\n      fi\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n            _LT_TAGVAR(archive_expsym_cmds, $1)=''\n        ;;\n      m68k)\n            _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/a2ixlibrary.data~$ECHO \"#define NAME $libname\" > $output_objdir/a2ixlibrary.data~$ECHO \"#define LIBRARY_ID 1\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define VERSION $major\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define REVISION $revision\" >> $output_objdir/a2ixlibrary.data~$AR $AR_FLAGS $lib $libobjs~$RANLIB $lib~(cd $output_objdir && a2ixlibrary -32)'\n            _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n            _LT_TAGVAR(hardcode_minus_L, $1)=yes\n        ;;\n      esac\n      ;;\n\n    bsdi[[45]]*)\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)=-rdynamic\n      ;;\n\n    cygwin* | mingw* | pw32* | cegcc*)\n      # When not using gcc, we currently assume that we are using\n      # Microsoft Visual C++.\n      # hardcode_libdir_flag_spec is actually meaningless, as there is\n      # no search path for DLLs.\n      case $cc_basename in\n      cl*)\n\t# Native MSVC\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=' '\n\t_LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t_LT_TAGVAR(always_export_symbols, $1)=yes\n\t_LT_TAGVAR(file_list_spec, $1)='@'\n\t# Tell ltmain to make .lib files, not .a files.\n\tlibext=lib\n\t# Tell ltmain to make .dll files, not .so files.\n\tshrext_cmds=\".dll\"\n\t# FIXME: Setting linknames here is a bad hack.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $compiler_flags $deplibs -Wl,-dll~linknames='\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='if test \"x`$SED 1q $export_symbols`\" = xEXPORTS; then\n\t    sed -n -e 's/\\\\\\\\\\\\\\(.*\\\\\\\\\\\\\\)/-link\\\\\\ -EXPORT:\\\\\\\\\\\\\\1/' -e '1\\\\\\!p' < $export_symbols > $output_objdir/$soname.exp;\n\t  else\n\t    sed -e 's/\\\\\\\\\\\\\\(.*\\\\\\\\\\\\\\)/-link\\\\\\ -EXPORT:\\\\\\\\\\\\\\1/' < $export_symbols > $output_objdir/$soname.exp;\n\t  fi~\n\t  $CC -o $tool_output_objdir$soname $libobjs $compiler_flags $deplibs \"@$tool_output_objdir$soname.exp\" -Wl,-DLL,-IMPLIB:\"$tool_output_objdir$libname.dll.lib\"~\n\t  linknames='\n\t# The linker will not automatically build a static lib if we build a DLL.\n\t# _LT_TAGVAR(old_archive_from_new_cmds, $1)='true'\n\t_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\t_LT_TAGVAR(exclude_expsyms, $1)='_NULL_IMPORT_DESCRIPTOR|_IMPORT_DESCRIPTOR_.*'\n\t_LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED -e '\\''/^[[BCDGRS]][[ ]]/s/.*[[ ]]\\([[^ ]]*\\)/\\1,DATA/'\\'' | $SED -e '\\''/^[[AITW]][[ ]]/s/.*[[ ]]//'\\'' | sort | uniq > $export_symbols'\n\t# Don't use ranlib\n\t_LT_TAGVAR(old_postinstall_cmds, $1)='chmod 644 $oldlib'\n\t_LT_TAGVAR(postlink_cmds, $1)='lt_outputfile=\"@OUTPUT@\"~\n\t  lt_tool_outputfile=\"@TOOL_OUTPUT@\"~\n\t  case $lt_outputfile in\n\t    *.exe|*.EXE) ;;\n\t    *)\n\t      lt_outputfile=\"$lt_outputfile.exe\"\n\t      lt_tool_outputfile=\"$lt_tool_outputfile.exe\"\n\t      ;;\n\t  esac~\n\t  if test \"$MANIFEST_TOOL\" != \":\" && test -f \"$lt_outputfile.manifest\"; then\n\t    $MANIFEST_TOOL -manifest \"$lt_tool_outputfile.manifest\" -outputresource:\"$lt_tool_outputfile\" || exit 1;\n\t    $RM \"$lt_outputfile.manifest\";\n\t  fi'\n\t;;\n      *)\n\t# Assume MSVC wrapper\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=' '\n\t_LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t# Tell ltmain to make .lib files, not .a files.\n\tlibext=lib\n\t# Tell ltmain to make .dll files, not .so files.\n\tshrext_cmds=\".dll\"\n\t# FIXME: Setting linknames here is a bad hack.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -o $lib $libobjs $compiler_flags `func_echo_all \"$deplibs\" | $SED '\\''s/ -lc$//'\\''` -link -dll~linknames='\n\t# The linker will automatically build a .lib file if we build a DLL.\n\t_LT_TAGVAR(old_archive_from_new_cmds, $1)='true'\n\t# FIXME: Should let the user specify the lib program.\n\t_LT_TAGVAR(old_archive_cmds, $1)='lib -OUT:$oldlib$oldobjs$old_deplibs'\n\t_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\t;;\n      esac\n      ;;\n\n    darwin* | rhapsody*)\n      _LT_DARWIN_LINKER_FEATURES($1)\n      ;;\n\n    dgux*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    # FreeBSD 2.2.[012] allows us to include c++rt0.o to get C++ constructor\n    # support.  Future versions do this automatically, but an explicit c++rt0.o\n    # does not break anything, and helps significantly (at the cost of a little\n    # extra space).\n    freebsd2.2*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags /usr/lib/c++rt0.o'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    # Unfortunately, older versions of FreeBSD 2 do not have this feature.\n    freebsd2.*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    # FreeBSD 3 and greater uses gcc -shared to do shared libraries.\n    freebsd* | dragonfly*)\n      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    hpux9*)\n      if test \"$GCC\" = yes; then\n\t_LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$CC -shared $pic_flag ${wl}+b ${wl}$install_libdir -o $output_objdir/$soname $libobjs $deplibs $compiler_flags~test $output_objdir/$soname = $lib || mv $output_objdir/$soname $lib'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$LD -b +b $install_libdir -o $output_objdir/$soname $libobjs $deplibs $linker_flags~test $output_objdir/$soname = $lib || mv $output_objdir/$soname $lib'\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}+b ${wl}$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n\n      # hardcode_minus_L: Not really in the search PATH,\n      # but as the default location of the library.\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n      ;;\n\n    hpux10*)\n      if test \"$GCC\" = yes && test \"$with_gnu_ld\" = no; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag ${wl}+h ${wl}$soname ${wl}+b ${wl}$install_libdir -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -b +h $soname +b $install_libdir -o $lib $libobjs $deplibs $linker_flags'\n      fi\n      if test \"$with_gnu_ld\" = no; then\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}+b ${wl}$libdir'\n\t_LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\t_LT_TAGVAR(hardcode_direct, $1)=yes\n\t_LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n\t# hardcode_minus_L: Not really in the search PATH,\n\t# but as the default location of the library.\n\t_LT_TAGVAR(hardcode_minus_L, $1)=yes\n      fi\n      ;;\n\n    hpux11*)\n      if test \"$GCC\" = yes && test \"$with_gnu_ld\" = no; then\n\tcase $host_cpu in\n\thppa*64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared ${wl}+h ${wl}$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tia64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag ${wl}+h ${wl}$soname ${wl}+nodefaultrpath -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\t*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag ${wl}+h ${wl}$soname ${wl}+b ${wl}$install_libdir -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tesac\n      else\n\tcase $host_cpu in\n\thppa*64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -b ${wl}+h ${wl}$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tia64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -b ${wl}+h ${wl}$soname ${wl}+nodefaultrpath -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\t*)\n\tm4_if($1, [], [\n\t  # Older versions of the 11.00 compiler do not understand -b yet\n\t  # (HP92453-01 A.11.01.20 doesn't, HP92453-01 B.11.X.35175-35176.GP does)\n\t  _LT_LINKER_OPTION([if $CC understands -b],\n\t    _LT_TAGVAR(lt_cv_prog_compiler__b, $1), [-b],\n\t    [_LT_TAGVAR(archive_cmds, $1)='$CC -b ${wl}+h ${wl}$soname ${wl}+b ${wl}$install_libdir -o $lib $libobjs $deplibs $compiler_flags'],\n\t    [_LT_TAGVAR(archive_cmds, $1)='$LD -b +h $soname +b $install_libdir -o $lib $libobjs $deplibs $linker_flags'])],\n\t  [_LT_TAGVAR(archive_cmds, $1)='$CC -b ${wl}+h ${wl}$soname ${wl}+b ${wl}$install_libdir -o $lib $libobjs $deplibs $compiler_flags'])\n\t  ;;\n\tesac\n      fi\n      if test \"$with_gnu_ld\" = no; then\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}+b ${wl}$libdir'\n\t_LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\tcase $host_cpu in\n\thppa*64*|ia64*)\n\t  _LT_TAGVAR(hardcode_direct, $1)=no\n\t  _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t  ;;\n\t*)\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes\n\t  _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n\n\t  # hardcode_minus_L: Not really in the search PATH,\n\t  # but as the default location of the library.\n\t  _LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t  ;;\n\tesac\n      fi\n      ;;\n\n    irix5* | irix6* | nonstopux*)\n      if test \"$GCC\" = yes; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-soname ${wl}$soname `test -n \"$verstring\" && func_echo_all \"${wl}-set_version ${wl}$verstring\"` ${wl}-update_registry ${wl}${output_objdir}/so_locations -o $lib'\n\t# Try to use the -exported_symbol ld option, if it does not\n\t# work, assume that -exports_file does not work either and\n\t# implicitly export all symbols.\n\t# This should be the same for all languages, so no per-tag cache variable.\n\tAC_CACHE_CHECK([whether the $host_os linker accepts -exported_symbol],\n\t  [lt_cv_irix_exported_symbol],\n\t  [save_LDFLAGS=\"$LDFLAGS\"\n\t   LDFLAGS=\"$LDFLAGS -shared ${wl}-exported_symbol ${wl}foo ${wl}-update_registry ${wl}/dev/null\"\n\t   AC_LINK_IFELSE(\n\t     [AC_LANG_SOURCE(\n\t        [AC_LANG_CASE([C], [[int foo (void) { return 0; }]],\n\t\t\t      [C++], [[int foo (void) { return 0; }]],\n\t\t\t      [Fortran 77], [[\n      subroutine foo\n      end]],\n\t\t\t      [Fortran], [[\n      subroutine foo\n      end]])])],\n\t      [lt_cv_irix_exported_symbol=yes],\n\t      [lt_cv_irix_exported_symbol=no])\n           LDFLAGS=\"$save_LDFLAGS\"])\n\tif test \"$lt_cv_irix_exported_symbol\" = yes; then\n          _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-soname ${wl}$soname `test -n \"$verstring\" && func_echo_all \"${wl}-set_version ${wl}$verstring\"` ${wl}-update_registry ${wl}${output_objdir}/so_locations ${wl}-exports_file ${wl}$export_symbols -o $lib'\n\tfi\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry ${output_objdir}/so_locations -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry ${output_objdir}/so_locations -exports_file $export_symbols -o $lib'\n      fi\n      _LT_TAGVAR(archive_cmds_need_lc, $1)='no'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      _LT_TAGVAR(inherit_rpath, $1)=yes\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      ;;\n\n    netbsd*)\n      if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags'  # a.out\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -shared -o $lib $libobjs $deplibs $linker_flags'      # ELF\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    newsos6)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    *nto* | *qnx*)\n      ;;\n\n    openbsd*)\n      if test -f /usr/libexec/ld.so; then\n\t_LT_TAGVAR(hardcode_direct, $1)=yes\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t_LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\tif test -z \"`echo __ELF__ | $CC -E - | $GREP __ELF__`\" || test \"$host_os-$host_cpu\" = \"openbsd2.8-powerpc\"; then\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags ${wl}-retain-symbols-file,$export_symbols'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n\telse\n\t  case $host_os in\n\t   openbsd[[01]].* | openbsd2.[[0-7]] | openbsd2.[[0-7]].*)\n\t     _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags'\n\t     _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t     ;;\n\t   *)\n\t     _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n\t     _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n\t     ;;\n\t  esac\n\tfi\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    os2*)\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      _LT_TAGVAR(archive_cmds, $1)='$ECHO \"LIBRARY $libname INITINSTANCE\" > $output_objdir/$libname.def~$ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~echo DATA >> $output_objdir/$libname.def~echo \" SINGLE NONSHARED\" >> $output_objdir/$libname.def~echo EXPORTS >> $output_objdir/$libname.def~emxexp $libobjs >> $output_objdir/$libname.def~$CC -Zdll -Zcrtdll -o $lib $libobjs $deplibs $compiler_flags $output_objdir/$libname.def'\n      _LT_TAGVAR(old_archive_from_new_cmds, $1)='emximp -o $output_objdir/$libname.a $output_objdir/$libname.def'\n      ;;\n\n    osf3*)\n      if test \"$GCC\" = yes; then\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' ${wl}-expect_unresolved ${wl}\\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared${allow_undefined_flag} $libobjs $deplibs $compiler_flags ${wl}-soname ${wl}$soname `test -n \"$verstring\" && func_echo_all \"${wl}-set_version ${wl}$verstring\"` ${wl}-update_registry ${wl}${output_objdir}/so_locations -o $lib'\n      else\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' -expect_unresolved \\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared${allow_undefined_flag} $libobjs $deplibs $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry ${output_objdir}/so_locations -o $lib'\n      fi\n      _LT_TAGVAR(archive_cmds_need_lc, $1)='no'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      ;;\n\n    osf4* | osf5*)\t# as osf3* with the addition of -msym flag\n      if test \"$GCC\" = yes; then\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' ${wl}-expect_unresolved ${wl}\\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared${allow_undefined_flag} $pic_flag $libobjs $deplibs $compiler_flags ${wl}-msym ${wl}-soname ${wl}$soname `test -n \"$verstring\" && func_echo_all \"${wl}-set_version ${wl}$verstring\"` ${wl}-update_registry ${wl}${output_objdir}/so_locations -o $lib'\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n      else\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' -expect_unresolved \\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared${allow_undefined_flag} $libobjs $deplibs $compiler_flags -msym -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry ${output_objdir}/so_locations -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='for i in `cat $export_symbols`; do printf \"%s %s\\\\n\" -exported_symbol \"\\$i\" >> $lib.exp; done; printf \"%s\\\\n\" \"-hidden\">> $lib.exp~\n\t$CC -shared${allow_undefined_flag} ${wl}-input ${wl}$lib.exp $compiler_flags $libobjs $deplibs -soname $soname `test -n \"$verstring\" && $ECHO \"-set_version $verstring\"` -update_registry ${output_objdir}/so_locations -o $lib~$RM $lib.exp'\n\n\t# Both c and cxx compiler support -rpath directly\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-rpath $libdir'\n      fi\n      _LT_TAGVAR(archive_cmds_need_lc, $1)='no'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      ;;\n\n    solaris*)\n      _LT_TAGVAR(no_undefined_flag, $1)=' -z defs'\n      if test \"$GCC\" = yes; then\n\twlarc='${wl}'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag ${wl}-z ${wl}text ${wl}-h ${wl}$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n\t  $CC -shared $pic_flag ${wl}-z ${wl}text ${wl}-M ${wl}$lib.exp ${wl}-h ${wl}$soname -o $lib $libobjs $deplibs $compiler_flags~$RM $lib.exp'\n      else\n\tcase `$CC -V 2>&1` in\n\t*\"Compilers 5.0\"*)\n\t  wlarc=''\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G${allow_undefined_flag} -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n\t  $LD -G${allow_undefined_flag} -M $lib.exp -h $soname -o $lib $libobjs $deplibs $linker_flags~$RM $lib.exp'\n\t  ;;\n\t*)\n\t  wlarc='${wl}'\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -G${allow_undefined_flag} -h $soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n\t  $CC -G${allow_undefined_flag} -M $lib.exp -h $soname -o $lib $libobjs $deplibs $compiler_flags~$RM $lib.exp'\n\t  ;;\n\tesac\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      case $host_os in\n      solaris2.[[0-5]] | solaris2.[[0-5]].*) ;;\n      *)\n\t# The compiler driver will combine and reorder linker options,\n\t# but understands `-z linker_flag'.  GCC discards it without `$wl',\n\t# but is careful enough not to reorder.\n\t# Supported since Solaris 2.6 (maybe 2.5.1?)\n\tif test \"$GCC\" = yes; then\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}-z ${wl}allextract$convenience ${wl}-z ${wl}defaultextract'\n\telse\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='-z allextract$convenience -z defaultextract'\n\tfi\n\t;;\n      esac\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      ;;\n\n    sunos4*)\n      if test \"x$host_vendor\" = xsequent; then\n\t# Use $CC to link under sequent, because it throws in some extra .o\n\t# files that make .init and .fini sections work.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -G ${wl}-h $soname -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -assert pure-text -Bstatic -o $lib $libobjs $deplibs $linker_flags'\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    sysv4)\n      case $host_vendor in\n\tsni)\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes # is this really true???\n\t;;\n\tsiemens)\n\t  ## LD is ld it makes a PLAMLIB\n\t  ## CC just makes a GrossModule.\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(reload_cmds, $1)='$CC -r -o $output$reload_objs'\n\t  _LT_TAGVAR(hardcode_direct, $1)=no\n        ;;\n\tmotorola)\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(hardcode_direct, $1)=no #Motorola manual says yes, but my tests say they lie\n\t;;\n      esac\n      runpath_var='LD_RUN_PATH'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    sysv4.3*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='-Bexport'\n      ;;\n\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\trunpath_var=LD_RUN_PATH\n\thardcode_runpath_var=yes\n\t_LT_TAGVAR(ld_shlibs, $1)=yes\n      fi\n      ;;\n\n    sysv4*uw2* | sysv5OpenUNIX* | sysv5UnixWare7.[[01]].[[10]]* | unixware7* | sco3.2v5.0.[[024]]*)\n      _LT_TAGVAR(no_undefined_flag, $1)='${wl}-z,text'\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      runpath_var='LD_RUN_PATH'\n\n      if test \"$GCC\" = yes; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -G ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      fi\n      ;;\n\n    sysv5* | sco3.2v5* | sco5v6*)\n      # Note: We can NOT use -z defs as we might desire, because we do not\n      # link with -lc, and that would cause any symbols used from libc to\n      # always be unresolved, which means just about no library would\n      # ever link correctly.  If we're not using GNU ld we use -z text\n      # though, which does catch some bad symbols but isn't as heavy-handed\n      # as -z defs.\n      _LT_TAGVAR(no_undefined_flag, $1)='${wl}-z,text'\n      _LT_TAGVAR(allow_undefined_flag, $1)='${wl}-z,nodefs'\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-R,$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-Bexport'\n      runpath_var='LD_RUN_PATH'\n\n      if test \"$GCC\" = yes; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -G ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      fi\n      ;;\n\n    uts4*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    *)\n      _LT_TAGVAR(ld_shlibs, $1)=no\n      ;;\n    esac\n\n    if test x$host_vendor = xsni; then\n      case $host in\n      sysv4 | sysv4.2uw2* | sysv4.3* | sysv5*)\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-Blargedynsym'\n\t;;\n      esac\n    fi\n  fi\n])\nAC_MSG_RESULT([$_LT_TAGVAR(ld_shlibs, $1)])\ntest \"$_LT_TAGVAR(ld_shlibs, $1)\" = no && can_build_shared=no\n\n_LT_TAGVAR(with_gnu_ld, $1)=$with_gnu_ld\n\n_LT_DECL([], [libext], [0], [Old archive suffix (normally \"a\")])dnl\n_LT_DECL([], [shrext_cmds], [1], [Shared library suffix (normally \".so\")])dnl\n_LT_DECL([], [extract_expsyms_cmds], [2],\n    [The commands to extract the exported symbol list from a shared archive])\n\n#\n# Do we need to explicitly link libc?\n#\ncase \"x$_LT_TAGVAR(archive_cmds_need_lc, $1)\" in\nx|xyes)\n  # Assume -lc should be added\n  _LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\n  if test \"$enable_shared\" = yes && test \"$GCC\" = yes; then\n    case $_LT_TAGVAR(archive_cmds, $1) in\n    *'~'*)\n      # FIXME: we may have to deal with multi-command sequences.\n      ;;\n    '$CC '*)\n      # Test whether the compiler implicitly links with -lc since on some\n      # systems, -lgcc has to come before -lc. If gcc already passes -lc\n      # to ld, don't add -lc before -lgcc.\n      AC_CACHE_CHECK([whether -lc should be explicitly linked in],\n\t[lt_cv_]_LT_TAGVAR(archive_cmds_need_lc, $1),\n\t[$RM conftest*\n\techo \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n\n\tif AC_TRY_EVAL(ac_compile) 2>conftest.err; then\n\t  soname=conftest\n\t  lib=conftest\n\t  libobjs=conftest.$ac_objext\n\t  deplibs=\n\t  wl=$_LT_TAGVAR(lt_prog_compiler_wl, $1)\n\t  pic_flag=$_LT_TAGVAR(lt_prog_compiler_pic, $1)\n\t  compiler_flags=-v\n\t  linker_flags=-v\n\t  verstring=\n\t  output_objdir=.\n\t  libname=conftest\n\t  lt_save_allow_undefined_flag=$_LT_TAGVAR(allow_undefined_flag, $1)\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=\n\t  if AC_TRY_EVAL(_LT_TAGVAR(archive_cmds, $1) 2\\>\\&1 \\| $GREP \\\" -lc \\\" \\>/dev/null 2\\>\\&1)\n\t  then\n\t    lt_cv_[]_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\t  else\n\t    lt_cv_[]_LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\t  fi\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=$lt_save_allow_undefined_flag\n\telse\n\t  cat conftest.err 1>&5\n\tfi\n\t$RM conftest*\n\t])\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=$lt_cv_[]_LT_TAGVAR(archive_cmds_need_lc, $1)\n      ;;\n    esac\n  fi\n  ;;\nesac\n\n_LT_TAGDECL([build_libtool_need_lc], [archive_cmds_need_lc], [0],\n    [Whether or not to add -lc for building shared libraries])\n_LT_TAGDECL([allow_libtool_libs_with_static_runtimes],\n    [enable_shared_with_static_runtimes], [0],\n    [Whether or not to disallow shared libs when runtime libs are static])\n_LT_TAGDECL([], [export_dynamic_flag_spec], [1],\n    [Compiler flag to allow reflexive dlopens])\n_LT_TAGDECL([], [whole_archive_flag_spec], [1],\n    [Compiler flag to generate shared objects directly from archives])\n_LT_TAGDECL([], [compiler_needs_object], [1],\n    [Whether the compiler copes with passing no objects directly])\n_LT_TAGDECL([], [old_archive_from_new_cmds], [2],\n    [Create an old-style archive from a shared archive])\n_LT_TAGDECL([], [old_archive_from_expsyms_cmds], [2],\n    [Create a temporary old-style archive to link instead of a shared archive])\n_LT_TAGDECL([], [archive_cmds], [2], [Commands used to build a shared archive])\n_LT_TAGDECL([], [archive_expsym_cmds], [2])\n_LT_TAGDECL([], [module_cmds], [2],\n    [Commands used to build a loadable module if different from building\n    a shared archive.])\n_LT_TAGDECL([], [module_expsym_cmds], [2])\n_LT_TAGDECL([], [with_gnu_ld], [1],\n    [Whether we are building with GNU ld or not])\n_LT_TAGDECL([], [allow_undefined_flag], [1],\n    [Flag that allows shared libraries with undefined symbols to be built])\n_LT_TAGDECL([], [no_undefined_flag], [1],\n    [Flag that enforces no undefined symbols])\n_LT_TAGDECL([], [hardcode_libdir_flag_spec], [1],\n    [Flag to hardcode $libdir into a binary during linking.\n    This must work even if $libdir does not exist])\n_LT_TAGDECL([], [hardcode_libdir_separator], [1],\n    [Whether we need a single \"-rpath\" flag with a separated argument])\n_LT_TAGDECL([], [hardcode_direct], [0],\n    [Set to \"yes\" if using DIR/libNAME${shared_ext} during linking hardcodes\n    DIR into the resulting binary])\n_LT_TAGDECL([], [hardcode_direct_absolute], [0],\n    [Set to \"yes\" if using DIR/libNAME${shared_ext} during linking hardcodes\n    DIR into the resulting binary and the resulting library dependency is\n    \"absolute\", i.e impossible to change by setting ${shlibpath_var} if the\n    library is relocated])\n_LT_TAGDECL([], [hardcode_minus_L], [0],\n    [Set to \"yes\" if using the -LDIR flag during linking hardcodes DIR\n    into the resulting binary])\n_LT_TAGDECL([], [hardcode_shlibpath_var], [0],\n    [Set to \"yes\" if using SHLIBPATH_VAR=DIR during linking hardcodes DIR\n    into the resulting binary])\n_LT_TAGDECL([], [hardcode_automatic], [0],\n    [Set to \"yes\" if building a shared library automatically hardcodes DIR\n    into the library and all subsequent libraries and executables linked\n    against it])\n_LT_TAGDECL([], [inherit_rpath], [0],\n    [Set to yes if linker adds runtime paths of dependent libraries\n    to runtime path list])\n_LT_TAGDECL([], [link_all_deplibs], [0],\n    [Whether libtool must link a program against all its dependency libraries])\n_LT_TAGDECL([], [always_export_symbols], [0],\n    [Set to \"yes\" if exported symbols are required])\n_LT_TAGDECL([], [export_symbols_cmds], [2],\n    [The commands to list exported symbols])\n_LT_TAGDECL([], [exclude_expsyms], [1],\n    [Symbols that should not be listed in the preloaded symbols])\n_LT_TAGDECL([], [include_expsyms], [1],\n    [Symbols that must always be exported])\n_LT_TAGDECL([], [prelink_cmds], [2],\n    [Commands necessary for linking programs (against libraries) with templates])\n_LT_TAGDECL([], [postlink_cmds], [2],\n    [Commands necessary for finishing linking programs])\n_LT_TAGDECL([], [file_list_spec], [1],\n    [Specify filename containing input files])\ndnl FIXME: Not yet implemented\ndnl _LT_TAGDECL([], [thread_safe_flag_spec], [1],\ndnl    [Compiler flag to generate thread safe objects])\n])# _LT_LINKER_SHLIBS\n\n\n# _LT_LANG_C_CONFIG([TAG])\n# ------------------------\n# Ensure that the configuration variables for a C compiler are suitably\n# defined.  These variables are subsequently used by _LT_CONFIG to write\n# the compiler configuration to `libtool'.\nm4_defun([_LT_LANG_C_CONFIG],\n[m4_require([_LT_DECL_EGREP])dnl\nlt_save_CC=\"$CC\"\nAC_LANG_PUSH(C)\n\n# Source file extension for C test sources.\nac_ext=c\n\n# Object file extension for compiled C test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code=\"int some_variable = 0;\"\n\n# Code to be used in simple link tests\nlt_simple_link_test_code='int main(){return(0);}'\n\n_LT_TAG_COMPILER\n# Save the default compiler, since it gets overwritten when the other\n# tags are being tested, and _LT_TAGVAR(compiler, []) is a NOP.\ncompiler_DEFAULT=$CC\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n## CAVEAT EMPTOR:\n## There is no encapsulation within the following macros, do not change\n## the running order or otherwise move them around unless you know exactly\n## what you are doing...\nif test -n \"$compiler\"; then\n  _LT_COMPILER_NO_RTTI($1)\n  _LT_COMPILER_PIC($1)\n  _LT_COMPILER_C_O($1)\n  _LT_COMPILER_FILE_LOCKS($1)\n  _LT_LINKER_SHLIBS($1)\n  _LT_SYS_DYNAMIC_LINKER($1)\n  _LT_LINKER_HARDCODE_LIBPATH($1)\n  LT_SYS_DLOPEN_SELF\n  _LT_CMD_STRIPLIB\n\n  # Report which library types will actually be built\n  AC_MSG_CHECKING([if libtool supports shared libraries])\n  AC_MSG_RESULT([$can_build_shared])\n\n  AC_MSG_CHECKING([whether to build shared libraries])\n  test \"$can_build_shared\" = \"no\" && enable_shared=no\n\n  # On AIX, shared libraries and static libraries use the same namespace, and\n  # are all built from PIC.\n  case $host_os in\n  aix3*)\n    test \"$enable_shared\" = yes && enable_static=no\n    if test -n \"$RANLIB\"; then\n      archive_cmds=\"$archive_cmds~\\$RANLIB \\$lib\"\n      postinstall_cmds='$RANLIB $lib'\n    fi\n    ;;\n\n  aix[[4-9]]*)\n    if test \"$host_cpu\" != ia64 && test \"$aix_use_runtimelinking\" = no ; then\n      test \"$enable_shared\" = yes && enable_static=no\n    fi\n    ;;\n  esac\n  AC_MSG_RESULT([$enable_shared])\n\n  AC_MSG_CHECKING([whether to build static libraries])\n  # Make sure either enable_shared or enable_static is yes.\n  test \"$enable_shared\" = yes || enable_static=yes\n  AC_MSG_RESULT([$enable_static])\n\n  _LT_CONFIG($1)\nfi\nAC_LANG_POP\nCC=\"$lt_save_CC\"\n])# _LT_LANG_C_CONFIG\n\n\n# _LT_LANG_CXX_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for a C++ compiler are suitably\n# defined.  These variables are subsequently used by _LT_CONFIG to write\n# the compiler configuration to `libtool'.\nm4_defun([_LT_LANG_CXX_CONFIG],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_PATH_MANIFEST_TOOL])dnl\nif test -n \"$CXX\" && ( test \"X$CXX\" != \"Xno\" &&\n    ( (test \"X$CXX\" = \"Xg++\" && `g++ -v >/dev/null 2>&1` ) ||\n    (test \"X$CXX\" != \"Xg++\"))) ; then\n  AC_PROG_CXXCPP\nelse\n  _lt_caught_CXX_error=yes\nfi\n\nAC_LANG_PUSH(C++)\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n_LT_TAGVAR(allow_undefined_flag, $1)=\n_LT_TAGVAR(always_export_symbols, $1)=no\n_LT_TAGVAR(archive_expsym_cmds, $1)=\n_LT_TAGVAR(compiler_needs_object, $1)=no\n_LT_TAGVAR(export_dynamic_flag_spec, $1)=\n_LT_TAGVAR(hardcode_direct, $1)=no\n_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n_LT_TAGVAR(hardcode_libdir_separator, $1)=\n_LT_TAGVAR(hardcode_minus_L, $1)=no\n_LT_TAGVAR(hardcode_shlibpath_var, $1)=unsupported\n_LT_TAGVAR(hardcode_automatic, $1)=no\n_LT_TAGVAR(inherit_rpath, $1)=no\n_LT_TAGVAR(module_cmds, $1)=\n_LT_TAGVAR(module_expsym_cmds, $1)=\n_LT_TAGVAR(link_all_deplibs, $1)=unknown\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n_LT_TAGVAR(no_undefined_flag, $1)=\n_LT_TAGVAR(whole_archive_flag_spec, $1)=\n_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n\n# Source file extension for C++ test sources.\nac_ext=cpp\n\n# Object file extension for compiled C++ test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# No sense in running all these tests if we already determined that\n# the CXX compiler isn't working.  Some variables (like enable_shared)\n# are currently assumed to apply to all compilers on this platform,\n# and will be corrupted by setting them based on a non-working compiler.\nif test \"$_lt_caught_CXX_error\" != yes; then\n  # Code to be used in simple compile tests\n  lt_simple_compile_test_code=\"int some_variable = 0;\"\n\n  # Code to be used in simple link tests\n  lt_simple_link_test_code='int main(int, char *[[]]) { return(0); }'\n\n  # ltmain only uses $CC for tagged configurations so make sure $CC is set.\n  _LT_TAG_COMPILER\n\n  # save warnings/boilerplate of simple test code\n  _LT_COMPILER_BOILERPLATE\n  _LT_LINKER_BOILERPLATE\n\n  # Allow CC to be a program name with arguments.\n  lt_save_CC=$CC\n  lt_save_CFLAGS=$CFLAGS\n  lt_save_LD=$LD\n  lt_save_GCC=$GCC\n  GCC=$GXX\n  lt_save_with_gnu_ld=$with_gnu_ld\n  lt_save_path_LD=$lt_cv_path_LD\n  if test -n \"${lt_cv_prog_gnu_ldcxx+set}\"; then\n    lt_cv_prog_gnu_ld=$lt_cv_prog_gnu_ldcxx\n  else\n    $as_unset lt_cv_prog_gnu_ld\n  fi\n  if test -n \"${lt_cv_path_LDCXX+set}\"; then\n    lt_cv_path_LD=$lt_cv_path_LDCXX\n  else\n    $as_unset lt_cv_path_LD\n  fi\n  test -z \"${LDCXX+set}\" || LD=$LDCXX\n  CC=${CXX-\"c++\"}\n  CFLAGS=$CXXFLAGS\n  compiler=$CC\n  _LT_TAGVAR(compiler, $1)=$CC\n  _LT_CC_BASENAME([$compiler])\n\n  if test -n \"$compiler\"; then\n    # We don't want -fno-exception when compiling C++ code, so set the\n    # no_builtin_flag separately\n    if test \"$GXX\" = yes; then\n      _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=' -fno-builtin'\n    else\n      _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=\n    fi\n\n    if test \"$GXX\" = yes; then\n      # Set up default GNU C++ configuration\n\n      LT_PATH_LD\n\n      # Check if GNU C++ uses GNU ld as the underlying linker, since the\n      # archiving commands below assume that GNU ld is being used.\n      if test \"$with_gnu_ld\" = yes; then\n        _LT_TAGVAR(archive_cmds, $1)='$CC $pic_flag -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $wl$soname -o $lib'\n        _LT_TAGVAR(archive_expsym_cmds, $1)='$CC $pic_flag -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'\n\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n        _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}--export-dynamic'\n\n        # If archive_cmds runs LD, not CC, wlarc should be empty\n        # XXX I think wlarc can be eliminated in ltcf-cxx, but I need to\n        #     investigate it a little bit more. (MM)\n        wlarc='${wl}'\n\n        # ancient GNU ld didn't support --whole-archive et. al.\n        if eval \"`$CC -print-prog-name=ld` --help 2>&1\" |\n\t  $GREP 'no-whole-archive' > /dev/null; then\n          _LT_TAGVAR(whole_archive_flag_spec, $1)=\"$wlarc\"'--whole-archive$convenience '\"$wlarc\"'--no-whole-archive'\n        else\n          _LT_TAGVAR(whole_archive_flag_spec, $1)=\n        fi\n      else\n        with_gnu_ld=no\n        wlarc=\n\n        # A generic and very simple default shared library creation\n        # command for GNU C++ for the case where it uses the native\n        # linker, instead of GNU ld.  If possible, this setting should\n        # overridden to take advantage of the native linker features on\n        # the platform it is being used on.\n        _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $lib'\n      fi\n\n      # Commands to make compiler produce verbose output that lists\n      # what \"hidden\" libraries, object files and flags are used when\n      # linking a shared library.\n      output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\n    else\n      GXX=no\n      with_gnu_ld=no\n      wlarc=\n    fi\n\n    # PORTME: fill in a description of your system's C++ link characteristics\n    AC_MSG_CHECKING([whether the $compiler linker ($LD) supports shared libraries])\n    _LT_TAGVAR(ld_shlibs, $1)=yes\n    case $host_os in\n      aix3*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n      aix[[4-9]]*)\n        if test \"$host_cpu\" = ia64; then\n          # On IA64, the linker does run time linking by default, so we don't\n          # have to do anything special.\n          aix_use_runtimelinking=no\n          exp_sym_flag='-Bexport'\n          no_entry_flag=\"\"\n        else\n          aix_use_runtimelinking=no\n\n          # Test if we are trying to use run time linking or normal\n          # AIX style linking. If -brtl is somewhere in LDFLAGS, we\n          # need to do runtime linking.\n          case $host_os in aix4.[[23]]|aix4.[[23]].*|aix[[5-9]]*)\n\t    for ld_flag in $LDFLAGS; do\n\t      case $ld_flag in\n\t      *-brtl*)\n\t        aix_use_runtimelinking=yes\n\t        break\n\t        ;;\n\t      esac\n\t    done\n\t    ;;\n          esac\n\n          exp_sym_flag='-bexport'\n          no_entry_flag='-bnoentry'\n        fi\n\n        # When large executables or shared objects are built, AIX ld can\n        # have problems creating the table of contents.  If linking a library\n        # or program results in \"error TOC overflow\" add -mminimal-toc to\n        # CXXFLAGS/CFLAGS for g++/gcc.  In the cases where that is not\n        # enough to fix the problem, add -Wl,-bbigtoc to LDFLAGS.\n\n        _LT_TAGVAR(archive_cmds, $1)=''\n        _LT_TAGVAR(hardcode_direct, $1)=yes\n        _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n        _LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n        _LT_TAGVAR(link_all_deplibs, $1)=yes\n        _LT_TAGVAR(file_list_spec, $1)='${wl}-f,'\n\n        if test \"$GXX\" = yes; then\n          case $host_os in aix4.[[012]]|aix4.[[012]].*)\n          # We only want to do this on AIX 4.2 and lower, the check\n          # below for broken collect2 doesn't work under 4.3+\n\t  collect2name=`${CC} -print-prog-name=collect2`\n\t  if test -f \"$collect2name\" &&\n\t     strings \"$collect2name\" | $GREP resolve_lib_name >/dev/null\n\t  then\n\t    # We have reworked collect2\n\t    :\n\t  else\n\t    # We have old collect2\n\t    _LT_TAGVAR(hardcode_direct, $1)=unsupported\n\t    # It fails to find uninstalled libraries when the uninstalled\n\t    # path is not listed in the libpath.  Setting hardcode_minus_L\n\t    # to unsupported forces relinking\n\t    _LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=\n\t  fi\n          esac\n          shared_flag='-shared'\n\t  if test \"$aix_use_runtimelinking\" = yes; then\n\t    shared_flag=\"$shared_flag \"'${wl}-G'\n\t  fi\n        else\n          # not using gcc\n          if test \"$host_cpu\" = ia64; then\n\t  # VisualAge C++, Version 5.5 for AIX 5L for IA-64, Beta 3 Release\n\t  # chokes on -Wl,-G. The following line is correct:\n\t  shared_flag='-G'\n          else\n\t    if test \"$aix_use_runtimelinking\" = yes; then\n\t      shared_flag='${wl}-G'\n\t    else\n\t      shared_flag='${wl}-bM:SRE'\n\t    fi\n          fi\n        fi\n\n        _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-bexpall'\n        # It seems that -bexpall does not export symbols beginning with\n        # underscore (_), so it is better to generate a list of symbols to\n\t# export.\n        _LT_TAGVAR(always_export_symbols, $1)=yes\n        if test \"$aix_use_runtimelinking\" = yes; then\n          # Warning - without using the other runtime loading flags (-brtl),\n          # -berok will link without error, but may produce a broken library.\n          _LT_TAGVAR(allow_undefined_flag, $1)='-berok'\n          # Determine the default libpath from the value encoded in an empty\n          # executable.\n          _LT_SYS_MODULE_PATH_AIX([$1])\n          _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-blibpath:$libdir:'\"$aix_libpath\"\n\n          _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $deplibs '\"\\${wl}$no_entry_flag\"' $compiler_flags `if test \"x${allow_undefined_flag}\" != \"x\"; then func_echo_all \"${wl}${allow_undefined_flag}\"; else :; fi` '\"\\${wl}$exp_sym_flag:\\$export_symbols $shared_flag\"\n        else\n          if test \"$host_cpu\" = ia64; then\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-R $libdir:/usr/lib:/lib'\n\t    _LT_TAGVAR(allow_undefined_flag, $1)=\"-z nodefs\"\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"\\$CC $shared_flag\"' -o $output_objdir/$soname $libobjs $deplibs '\"\\${wl}$no_entry_flag\"' $compiler_flags ${wl}${allow_undefined_flag} '\"\\${wl}$exp_sym_flag:\\$export_symbols\"\n          else\n\t    # Determine the default libpath from the value encoded in an\n\t    # empty executable.\n\t    _LT_SYS_MODULE_PATH_AIX([$1])\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-blibpath:$libdir:'\"$aix_libpath\"\n\t    # Warning - without using the other run time loading flags,\n\t    # -berok will link without error, but may produce a broken library.\n\t    _LT_TAGVAR(no_undefined_flag, $1)=' ${wl}-bernotok'\n\t    _LT_TAGVAR(allow_undefined_flag, $1)=' ${wl}-berok'\n\t    if test \"$with_gnu_ld\" = yes; then\n\t      # We only use this code for GNU lds that support --whole-archive.\n\t      _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive$convenience ${wl}--no-whole-archive'\n\t    else\n\t      # Exported symbols can be pulled into shared objects from archives\n\t      _LT_TAGVAR(whole_archive_flag_spec, $1)='$convenience'\n\t    fi\n\t    _LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\t    # This is similar to how AIX traditionally builds its shared\n\t    # libraries.\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"\\$CC $shared_flag\"' -o $output_objdir/$soname $libobjs $deplibs ${wl}-bnoentry $compiler_flags ${wl}-bE:$export_symbols${allow_undefined_flag}~$AR $AR_FLAGS $output_objdir/$libname$release.a $output_objdir/$soname'\n          fi\n        fi\n        ;;\n\n      beos*)\n\tif $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t  # Joseph Beckenbach <jrb3@best.com> says some releases of gcc\n\t  # support --undefined.  This deserves some investigation.  FIXME\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -nostart $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\telse\n\t  _LT_TAGVAR(ld_shlibs, $1)=no\n\tfi\n\t;;\n\n      chorus*)\n        case $cc_basename in\n          *)\n\t  # FIXME: insert proper C++ library support\n\t  _LT_TAGVAR(ld_shlibs, $1)=no\n\t  ;;\n        esac\n        ;;\n\n      cygwin* | mingw* | pw32* | cegcc*)\n\tcase $GXX,$cc_basename in\n\t,cl* | no,cl*)\n\t  # Native MSVC\n\t  # hardcode_libdir_flag_spec is actually meaningless, as there is\n\t  # no search path for DLLs.\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)=' '\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t  _LT_TAGVAR(always_export_symbols, $1)=yes\n\t  _LT_TAGVAR(file_list_spec, $1)='@'\n\t  # Tell ltmain to make .lib files, not .a files.\n\t  libext=lib\n\t  # Tell ltmain to make .dll files, not .so files.\n\t  shrext_cmds=\".dll\"\n\t  # FIXME: Setting linknames here is a bad hack.\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $compiler_flags $deplibs -Wl,-dll~linknames='\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='if test \"x`$SED 1q $export_symbols`\" = xEXPORTS; then\n\t      $SED -n -e 's/\\\\\\\\\\\\\\(.*\\\\\\\\\\\\\\)/-link\\\\\\ -EXPORT:\\\\\\\\\\\\\\1/' -e '1\\\\\\!p' < $export_symbols > $output_objdir/$soname.exp;\n\t    else\n\t      $SED -e 's/\\\\\\\\\\\\\\(.*\\\\\\\\\\\\\\)/-link\\\\\\ -EXPORT:\\\\\\\\\\\\\\1/' < $export_symbols > $output_objdir/$soname.exp;\n\t    fi~\n\t    $CC -o $tool_output_objdir$soname $libobjs $compiler_flags $deplibs \"@$tool_output_objdir$soname.exp\" -Wl,-DLL,-IMPLIB:\"$tool_output_objdir$libname.dll.lib\"~\n\t    linknames='\n\t  # The linker will not automatically build a static lib if we build a DLL.\n\t  # _LT_TAGVAR(old_archive_from_new_cmds, $1)='true'\n\t  _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\t  # Don't use ranlib\n\t  _LT_TAGVAR(old_postinstall_cmds, $1)='chmod 644 $oldlib'\n\t  _LT_TAGVAR(postlink_cmds, $1)='lt_outputfile=\"@OUTPUT@\"~\n\t    lt_tool_outputfile=\"@TOOL_OUTPUT@\"~\n\t    case $lt_outputfile in\n\t      *.exe|*.EXE) ;;\n\t      *)\n\t\tlt_outputfile=\"$lt_outputfile.exe\"\n\t\tlt_tool_outputfile=\"$lt_tool_outputfile.exe\"\n\t\t;;\n\t    esac~\n\t    func_to_tool_file \"$lt_outputfile\"~\n\t    if test \"$MANIFEST_TOOL\" != \":\" && test -f \"$lt_outputfile.manifest\"; then\n\t      $MANIFEST_TOOL -manifest \"$lt_tool_outputfile.manifest\" -outputresource:\"$lt_tool_outputfile\" || exit 1;\n\t      $RM \"$lt_outputfile.manifest\";\n\t    fi'\n\t  ;;\n\t*)\n\t  # g++\n\t  # _LT_TAGVAR(hardcode_libdir_flag_spec, $1) is actually meaningless,\n\t  # as there is no search path for DLLs.\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}--export-all-symbols'\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t  _LT_TAGVAR(always_export_symbols, $1)=no\n\t  _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\n\t  if $LD --help 2>&1 | $GREP 'auto-import' > /dev/null; then\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $output_objdir/$soname ${wl}--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n\t    # If the export-symbols file already is a .def file (1st line\n\t    # is EXPORTS), use it as is; otherwise, prepend...\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='if test \"x`$SED 1q $export_symbols`\" = xEXPORTS; then\n\t      cp $export_symbols $output_objdir/$soname.def;\n\t    else\n\t      echo EXPORTS > $output_objdir/$soname.def;\n\t      cat $export_symbols >> $output_objdir/$soname.def;\n\t    fi~\n\t    $CC -shared -nostdlib $output_objdir/$soname.def $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $output_objdir/$soname ${wl}--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n\t  else\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t  fi\n\t  ;;\n\tesac\n\t;;\n      darwin* | rhapsody*)\n        _LT_DARWIN_LINKER_FEATURES($1)\n\t;;\n\n      dgux*)\n        case $cc_basename in\n          ec++*)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          ghcx*)\n\t    # Green Hills C++ Compiler\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n        esac\n        ;;\n\n      freebsd2.*)\n        # C++ shared libraries reported to be fairly broken before\n\t# switch to ELF\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n\n      freebsd-elf*)\n        _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n        ;;\n\n      freebsd* | dragonfly*)\n        # FreeBSD 3 and later use GNU C++ and GNU ld with standard ELF\n        # conventions\n        _LT_TAGVAR(ld_shlibs, $1)=yes\n        ;;\n\n      gnu*)\n        ;;\n\n      haiku*)\n        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n        _LT_TAGVAR(link_all_deplibs, $1)=yes\n        ;;\n\n      hpux9*)\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}+b ${wl}$libdir'\n        _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n        _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n        _LT_TAGVAR(hardcode_direct, $1)=yes\n        _LT_TAGVAR(hardcode_minus_L, $1)=yes # Not in the search PATH,\n\t\t\t\t             # but as the default\n\t\t\t\t             # location of the library.\n\n        case $cc_basename in\n          CC*)\n            # FIXME: insert proper C++ library support\n            _LT_TAGVAR(ld_shlibs, $1)=no\n            ;;\n          aCC*)\n            _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$CC -b ${wl}+b ${wl}$install_libdir -o $output_objdir/$soname $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~test $output_objdir/$soname = $lib || mv $output_objdir/$soname $lib'\n            # Commands to make compiler produce verbose output that lists\n            # what \"hidden\" libraries, object files and flags are used when\n            # linking a shared library.\n            #\n            # There doesn't appear to be a way to prevent this compiler from\n            # explicitly linking system object files so we need to strip them\n            # from the output so that they don't get included in the library\n            # dependencies.\n            output_verbose_link_cmd='templist=`($CC -b $CFLAGS -v conftest.$objext 2>&1) | $EGREP \"\\-L\"`; list=\"\"; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n            ;;\n          *)\n            if test \"$GXX\" = yes; then\n              _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$CC -shared -nostdlib $pic_flag ${wl}+b ${wl}$install_libdir -o $output_objdir/$soname $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~test $output_objdir/$soname = $lib || mv $output_objdir/$soname $lib'\n            else\n              # FIXME: insert proper C++ library support\n              _LT_TAGVAR(ld_shlibs, $1)=no\n            fi\n            ;;\n        esac\n        ;;\n\n      hpux10*|hpux11*)\n        if test $with_gnu_ld = no; then\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}+b ${wl}$libdir'\n\t  _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n          case $host_cpu in\n            hppa*64*|ia64*)\n              ;;\n            *)\n\t      _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n              ;;\n          esac\n        fi\n        case $host_cpu in\n          hppa*64*|ia64*)\n            _LT_TAGVAR(hardcode_direct, $1)=no\n            _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n            ;;\n          *)\n            _LT_TAGVAR(hardcode_direct, $1)=yes\n            _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n            _LT_TAGVAR(hardcode_minus_L, $1)=yes # Not in the search PATH,\n\t\t\t\t\t         # but as the default\n\t\t\t\t\t         # location of the library.\n            ;;\n        esac\n\n        case $cc_basename in\n          CC*)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          aCC*)\n\t    case $host_cpu in\n\t      hppa*64*)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -b ${wl}+h ${wl}$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t        ;;\n\t      ia64*)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -b ${wl}+h ${wl}$soname ${wl}+nodefaultrpath -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t        ;;\n\t      *)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -b ${wl}+h ${wl}$soname ${wl}+b ${wl}$install_libdir -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t        ;;\n\t    esac\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`($CC -b $CFLAGS -v conftest.$objext 2>&1) | $GREP \"\\-L\"`; list=\"\"; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n\t    ;;\n          *)\n\t    if test \"$GXX\" = yes; then\n\t      if test $with_gnu_ld = no; then\n\t        case $host_cpu in\n\t          hppa*64*)\n\t            _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib -fPIC ${wl}+h ${wl}$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t            ;;\n\t          ia64*)\n\t            _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $pic_flag ${wl}+h ${wl}$soname ${wl}+nodefaultrpath -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t            ;;\n\t          *)\n\t            _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $pic_flag ${wl}+h ${wl}$soname ${wl}+b ${wl}$install_libdir -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t            ;;\n\t        esac\n\t      fi\n\t    else\n\t      # FIXME: insert proper C++ library support\n\t      _LT_TAGVAR(ld_shlibs, $1)=no\n\t    fi\n\t    ;;\n        esac\n        ;;\n\n      interix[[3-9]]*)\n\t_LT_TAGVAR(hardcode_direct, $1)=no\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n\t# Hack: On Interix 3.x, we cannot compile PIC because of a broken gcc.\n\t# Instead, shared libraries are loaded at an image base (0x10000000 by\n\t# default) and relocated if they conflict, which is a slow very memory\n\t# consuming and fragmenting process.  To avoid this, we pick a random,\n\t# 256 KiB-aligned image base between 0x50000000 and 0x6FFC0000 at link\n\t# time.  Moving up from 0x10000000 also allows more sbrk(2) space.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-h,$soname ${wl}--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='sed \"s,^,_,\" $export_symbols >$output_objdir/$soname.expsym~$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-h,$soname ${wl}--retain-symbols-file,$output_objdir/$soname.expsym ${wl}--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n\t;;\n      irix5* | irix6*)\n        case $cc_basename in\n          CC*)\n\t    # SGI C++\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared -all -multigot $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry ${output_objdir}/so_locations -o $lib'\n\n\t    # Archives containing C++ object files must be created using\n\t    # \"CC -ar\", where \"CC\" is the IRIX C++ compiler.  This is\n\t    # necessary to make sure instantiated templates are included\n\t    # in the archive.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -ar -WR,-u -o $oldlib $oldobjs'\n\t    ;;\n          *)\n\t    if test \"$GXX\" = yes; then\n\t      if test \"$with_gnu_ld\" = no; then\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname `test -n \"$verstring\" && func_echo_all \"${wl}-set_version ${wl}$verstring\"` ${wl}-update_registry ${wl}${output_objdir}/so_locations -o $lib'\n\t      else\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname `test -n \"$verstring\" && func_echo_all \"${wl}-set_version ${wl}$verstring\"` -o $lib'\n\t      fi\n\t    fi\n\t    _LT_TAGVAR(link_all_deplibs, $1)=yes\n\t    ;;\n        esac\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n        _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n        _LT_TAGVAR(inherit_rpath, $1)=yes\n        ;;\n\n      linux* | k*bsd*-gnu | kopensolaris*-gnu)\n        case $cc_basename in\n          KCC*)\n\t    # Kuck and Associates, Inc. (KAI) C++ Compiler\n\n\t    # KCC will only create a shared library if the output file\n\t    # ends with \".so\" (or \".sl\" for HP-UX), so rename the library\n\t    # to its proper name (with version) after linking.\n\t    _LT_TAGVAR(archive_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\\''s/\\([[^()0-9A-Za-z{}]]\\)/\\\\\\\\\\1/g'\\''`; templib=`echo $lib | $SED -e \"s/\\${tempext}\\..*/.so/\"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \\$templib; mv \\$templib $lib'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\\''s/\\([[^()0-9A-Za-z{}]]\\)/\\\\\\\\\\1/g'\\''`; templib=`echo $lib | $SED -e \"s/\\${tempext}\\..*/.so/\"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \\$templib ${wl}-retain-symbols-file,$export_symbols; mv \\$templib $lib'\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`$CC $CFLAGS -v conftest.$objext -o libconftest$shared_ext 2>&1 | $GREP \"ld\"`; rm -f libconftest$shared_ext; list=\"\"; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}--export-dynamic'\n\n\t    # Archives containing C++ object files must be created using\n\t    # \"CC -Bstatic\", where \"CC\" is the KAI C++ compiler.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -Bstatic -o $oldlib $oldobjs'\n\t    ;;\n\t  icpc* | ecpc* )\n\t    # Intel C++\n\t    with_gnu_ld=yes\n\t    # version 8.0 and above of icpc choke on multiply defined symbols\n\t    # if we add $predep_objects and $postdep_objects, however 7.1 and\n\t    # earlier do not add the objects themselves.\n\t    case `$CC -V 2>&1` in\n\t      *\"Version 7.\"*)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\t\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'\n\t\t;;\n\t      *)  # Version 8.0 or newer\n\t        tmp_idyn=\n\t        case $host_cpu in\n\t\t  ia64*) tmp_idyn=' -i_dynamic';;\n\t\tesac\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared'\"$tmp_idyn\"' $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\t\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared'\"$tmp_idyn\"' $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'\n\t\t;;\n\t    esac\n\t    _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}--export-dynamic'\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive$convenience ${wl}--no-whole-archive'\n\t    ;;\n          pgCC* | pgcpp*)\n            # Portland Group C++ compiler\n\t    case `$CC -V` in\n\t    *pgCC\\ [[1-5]].* | *pgcpp\\ [[1-5]].*)\n\t      _LT_TAGVAR(prelink_cmds, $1)='tpldir=Template.dir~\n\t\trm -rf $tpldir~\n\t\t$CC --prelink_objects --instantiation_dir $tpldir $objs $libobjs $compile_deplibs~\n\t\tcompile_command=\"$compile_command `find $tpldir -name \\*.o | sort | $NL2SP`\"'\n\t      _LT_TAGVAR(old_archive_cmds, $1)='tpldir=Template.dir~\n\t\trm -rf $tpldir~\n\t\t$CC --prelink_objects --instantiation_dir $tpldir $oldobjs$old_deplibs~\n\t\t$AR $AR_FLAGS $oldlib$oldobjs$old_deplibs `find $tpldir -name \\*.o | sort | $NL2SP`~\n\t\t$RANLIB $oldlib'\n\t      _LT_TAGVAR(archive_cmds, $1)='tpldir=Template.dir~\n\t\trm -rf $tpldir~\n\t\t$CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='tpldir=Template.dir~\n\t\trm -rf $tpldir~\n\t\t$CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname ${wl}-retain-symbols-file ${wl}$export_symbols -o $lib'\n\t      ;;\n\t    *) # Version 6 and above use weak symbols\n\t      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname ${wl}-retain-symbols-file ${wl}$export_symbols -o $lib'\n\t      ;;\n\t    esac\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}--rpath ${wl}$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}--export-dynamic'\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` ${wl}--no-whole-archive'\n            ;;\n\t  cxx*)\n\t    # Compaq C++\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $wl$soname  -o $lib ${wl}-retain-symbols-file $wl$export_symbols'\n\n\t    runpath_var=LD_RUN_PATH\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-rpath $libdir'\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP \"ld\"`; templist=`func_echo_all \"$templist\" | $SED \"s/\\(^.*ld.*\\)\\( .*ld .*$\\)/\\1/\"`; list=\"\"; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"X$list\" | $Xsed'\n\t    ;;\n\t  xl* | mpixl* | bgxl*)\n\t    # IBM XL 8.0 on PPC, with GNU ld\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}--export-dynamic'\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -qmkshrobj $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\t    if test \"x$supports_anon_versioning\" = xyes; then\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $output_objdir/$libname.ver~\n\t\tcat $export_symbols | sed -e \"s/\\(.*\\)/\\1;/\" >> $output_objdir/$libname.ver~\n\t\techo \"local: *; };\" >> $output_objdir/$libname.ver~\n\t\t$CC -qmkshrobj $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-version-script ${wl}$output_objdir/$libname.ver -o $lib'\n\t    fi\n\t    ;;\n\t  *)\n\t    case `$CC -V 2>&1 | sed 5q` in\n\t    *Sun\\ C*)\n\t      # Sun C++ 5.9\n\t      _LT_TAGVAR(no_undefined_flag, $1)=' -zdefs'\n\t      _LT_TAGVAR(archive_cmds, $1)='$CC -G${allow_undefined_flag} -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G${allow_undefined_flag} -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-retain-symbols-file ${wl}$export_symbols'\n\t      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t      _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive`new_convenience=; for conv in $convenience\\\"\\\"; do test -z \\\"$conv\\\" || new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` ${wl}--no-whole-archive'\n\t      _LT_TAGVAR(compiler_needs_object, $1)=yes\n\n\t      # Not sure whether something based on\n\t      # $CC $CFLAGS -v conftest.$objext -o libconftest$shared_ext 2>&1\n\t      # would be better.\n\t      output_verbose_link_cmd='func_echo_all'\n\n\t      # Archives containing C++ object files must be created using\n\t      # \"CC -xar\", where \"CC\" is the Sun C++ compiler.  This is\n\t      # necessary to make sure instantiated templates are included\n\t      # in the archive.\n\t      _LT_TAGVAR(old_archive_cmds, $1)='$CC -xar -o $oldlib $oldobjs'\n\t      ;;\n\t    esac\n\t    ;;\n\tesac\n\t;;\n\n      lynxos*)\n        # FIXME: insert proper C++ library support\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\t;;\n\n      m88k*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n\t;;\n\n      mvs*)\n        case $cc_basename in\n          cxx*)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n\t  *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n\tesac\n\t;;\n\n      netbsd*)\n        if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable  -o $lib $predep_objects $libobjs $deplibs $postdep_objects $linker_flags'\n\t  wlarc=\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes\n\t  _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\tfi\n\t# Workaround some broken pre-1.5 toolchains\n\toutput_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP conftest.$objext | $SED -e \"s:-lgcc -lc -lgcc::\"'\n\t;;\n\n      *nto* | *qnx*)\n        _LT_TAGVAR(ld_shlibs, $1)=yes\n\t;;\n\n      openbsd2*)\n        # C++ shared libraries are fairly broken\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\t;;\n\n      openbsd*)\n\tif test -f /usr/libexec/ld.so; then\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes\n\t  _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t  _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $lib'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n\t  if test -z \"`echo __ELF__ | $CC -E - | grep __ELF__`\" || test \"$host_os-$host_cpu\" = \"openbsd2.8-powerpc\"; then\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-retain-symbols-file,$export_symbols -o $lib'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)=\"$wlarc\"'--whole-archive$convenience '\"$wlarc\"'--no-whole-archive'\n\t  fi\n\t  output_verbose_link_cmd=func_echo_all\n\telse\n\t  _LT_TAGVAR(ld_shlibs, $1)=no\n\tfi\n\t;;\n\n      osf3* | osf4* | osf5*)\n        case $cc_basename in\n          KCC*)\n\t    # Kuck and Associates, Inc. (KAI) C++ Compiler\n\n\t    # KCC will only create a shared library if the output file\n\t    # ends with \".so\" (or \".sl\" for HP-UX), so rename the library\n\t    # to its proper name (with version) after linking.\n\t    _LT_TAGVAR(archive_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\\''s/\\([[^()0-9A-Za-z{}]]\\)/\\\\\\\\\\1/g'\\''`; templib=`echo \"$lib\" | $SED -e \"s/\\${tempext}\\..*/.so/\"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \\$templib; mv \\$templib $lib'\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t    # Archives containing C++ object files must be created using\n\t    # the KAI C++ compiler.\n\t    case $host in\n\t      osf3*) _LT_TAGVAR(old_archive_cmds, $1)='$CC -Bstatic -o $oldlib $oldobjs' ;;\n\t      *) _LT_TAGVAR(old_archive_cmds, $1)='$CC -o $oldlib $oldobjs' ;;\n\t    esac\n\t    ;;\n          RCC*)\n\t    # Rational C++ 2.4.1\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          cxx*)\n\t    case $host in\n\t      osf3*)\n\t        _LT_TAGVAR(allow_undefined_flag, $1)=' ${wl}-expect_unresolved ${wl}\\*'\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared${allow_undefined_flag} $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $soname `test -n \"$verstring\" && func_echo_all \"${wl}-set_version $verstring\"` -update_registry ${output_objdir}/so_locations -o $lib'\n\t        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n\t\t;;\n\t      *)\n\t        _LT_TAGVAR(allow_undefined_flag, $1)=' -expect_unresolved \\*'\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared${allow_undefined_flag} $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -msym -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry ${output_objdir}/so_locations -o $lib'\n\t        _LT_TAGVAR(archive_expsym_cmds, $1)='for i in `cat $export_symbols`; do printf \"%s %s\\\\n\" -exported_symbol \"\\$i\" >> $lib.exp; done~\n\t          echo \"-hidden\">> $lib.exp~\n\t          $CC -shared$allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -msym -soname $soname ${wl}-input ${wl}$lib.exp  `test -n \"$verstring\" && $ECHO \"-set_version $verstring\"` -update_registry ${output_objdir}/so_locations -o $lib~\n\t          $RM $lib.exp'\n\t        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-rpath $libdir'\n\t\t;;\n\t    esac\n\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP \"ld\" | $GREP -v \"ld:\"`; templist=`func_echo_all \"$templist\" | $SED \"s/\\(^.*ld.*\\)\\( .*ld.*$\\)/\\1/\"`; list=\"\"; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n\t    ;;\n\t  *)\n\t    if test \"$GXX\" = yes && test \"$with_gnu_ld\" = no; then\n\t      _LT_TAGVAR(allow_undefined_flag, $1)=' ${wl}-expect_unresolved ${wl}\\*'\n\t      case $host in\n\t        osf3*)\n\t          _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib ${allow_undefined_flag} $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname `test -n \"$verstring\" && func_echo_all \"${wl}-set_version ${wl}$verstring\"` ${wl}-update_registry ${wl}${output_objdir}/so_locations -o $lib'\n\t\t  ;;\n\t        *)\n\t          _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib ${allow_undefined_flag} $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-msym ${wl}-soname ${wl}$soname `test -n \"$verstring\" && func_echo_all \"${wl}-set_version ${wl}$verstring\"` ${wl}-update_registry ${wl}${output_objdir}/so_locations -o $lib'\n\t\t  ;;\n\t      esac\n\n\t      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n\t      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t      # Commands to make compiler produce verbose output that lists\n\t      # what \"hidden\" libraries, object files and flags are used when\n\t      # linking a shared library.\n\t      output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\n\t    else\n\t      # FIXME: insert proper C++ library support\n\t      _LT_TAGVAR(ld_shlibs, $1)=no\n\t    fi\n\t    ;;\n        esac\n        ;;\n\n      psos*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n\n      sunos4*)\n        case $cc_basename in\n          CC*)\n\t    # Sun C++ 4.x\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          lcc*)\n\t    # Lucid\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n        esac\n        ;;\n\n      solaris*)\n        case $cc_basename in\n          CC* | sunCC*)\n\t    # Sun C++ 4.2, 5.x and Centerline C++\n            _LT_TAGVAR(archive_cmds_need_lc,$1)=yes\n\t    _LT_TAGVAR(no_undefined_flag, $1)=' -zdefs'\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -G${allow_undefined_flag}  -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n\t      $CC -G${allow_undefined_flag} ${wl}-M ${wl}$lib.exp -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$RM $lib.exp'\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t    _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t    case $host_os in\n\t      solaris2.[[0-5]] | solaris2.[[0-5]].*) ;;\n\t      *)\n\t\t# The compiler driver will combine and reorder linker options,\n\t\t# but understands `-z linker_flag'.\n\t        # Supported since Solaris 2.6 (maybe 2.5.1?)\n\t\t_LT_TAGVAR(whole_archive_flag_spec, $1)='-z allextract$convenience -z defaultextract'\n\t        ;;\n\t    esac\n\t    _LT_TAGVAR(link_all_deplibs, $1)=yes\n\n\t    output_verbose_link_cmd='func_echo_all'\n\n\t    # Archives containing C++ object files must be created using\n\t    # \"CC -xar\", where \"CC\" is the Sun C++ compiler.  This is\n\t    # necessary to make sure instantiated templates are included\n\t    # in the archive.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -xar -o $oldlib $oldobjs'\n\t    ;;\n          gcx*)\n\t    # Green Hills C++ Compiler\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-h $wl$soname -o $lib'\n\n\t    # The C++ compiler must be used to create the archive.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC $LDFLAGS -archive -o $oldlib $oldobjs'\n\t    ;;\n          *)\n\t    # GNU C++ compiler with Solaris linker\n\t    if test \"$GXX\" = yes && test \"$with_gnu_ld\" = no; then\n\t      _LT_TAGVAR(no_undefined_flag, $1)=' ${wl}-z ${wl}defs'\n\t      if $CC --version | $GREP -v '^2\\.7' > /dev/null; then\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib $LDFLAGS $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-h $wl$soname -o $lib'\n\t        _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n\t\t  $CC -shared $pic_flag -nostdlib ${wl}-M $wl$lib.exp -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$RM $lib.exp'\n\n\t        # Commands to make compiler produce verbose output that lists\n\t        # what \"hidden\" libraries, object files and flags are used when\n\t        # linking a shared library.\n\t        output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\t      else\n\t        # g++ 2.7 appears to require `-G' NOT `-shared' on this\n\t        # platform.\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -G -nostdlib $LDFLAGS $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-h $wl$soname -o $lib'\n\t        _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n\t\t  $CC -G -nostdlib ${wl}-M $wl$lib.exp -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$RM $lib.exp'\n\n\t        # Commands to make compiler produce verbose output that lists\n\t        # what \"hidden\" libraries, object files and flags are used when\n\t        # linking a shared library.\n\t        output_verbose_link_cmd='$CC -G $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\t      fi\n\n\t      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-R $wl$libdir'\n\t      case $host_os in\n\t\tsolaris2.[[0-5]] | solaris2.[[0-5]].*) ;;\n\t\t*)\n\t\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}-z ${wl}allextract$convenience ${wl}-z ${wl}defaultextract'\n\t\t  ;;\n\t      esac\n\t    fi\n\t    ;;\n        esac\n        ;;\n\n    sysv4*uw2* | sysv5OpenUNIX* | sysv5UnixWare7.[[01]].[[10]]* | unixware7* | sco3.2v5.0.[[024]]*)\n      _LT_TAGVAR(no_undefined_flag, $1)='${wl}-z,text'\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      runpath_var='LD_RUN_PATH'\n\n      case $cc_basename in\n        CC*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -G ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\t*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n      esac\n      ;;\n\n      sysv5* | sco3.2v5* | sco5v6*)\n\t# Note: We can NOT use -z defs as we might desire, because we do not\n\t# link with -lc, and that would cause any symbols used from libc to\n\t# always be unresolved, which means just about no library would\n\t# ever link correctly.  If we're not using GNU ld we use -z text\n\t# though, which does catch some bad symbols but isn't as heavy-handed\n\t# as -z defs.\n\t_LT_TAGVAR(no_undefined_flag, $1)='${wl}-z,text'\n\t_LT_TAGVAR(allow_undefined_flag, $1)='${wl}-z,nodefs'\n\t_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-R,$libdir'\n\t_LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n\t_LT_TAGVAR(link_all_deplibs, $1)=yes\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-Bexport'\n\trunpath_var='LD_RUN_PATH'\n\n\tcase $cc_basename in\n          CC*)\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -G ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -Tprelink_objects $oldobjs~\n\t      '\"$_LT_TAGVAR(old_archive_cmds, $1)\"\n\t    _LT_TAGVAR(reload_cmds, $1)='$CC -Tprelink_objects $reload_objs~\n\t      '\"$_LT_TAGVAR(reload_cmds, $1)\"\n\t    ;;\n\t  *)\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    ;;\n\tesac\n      ;;\n\n      tandem*)\n        case $cc_basename in\n          NCC*)\n\t    # NonStop-UX NCC 3.20\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n        esac\n        ;;\n\n      vxworks*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n\n      *)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n    esac\n\n    AC_MSG_RESULT([$_LT_TAGVAR(ld_shlibs, $1)])\n    test \"$_LT_TAGVAR(ld_shlibs, $1)\" = no && can_build_shared=no\n\n    _LT_TAGVAR(GCC, $1)=\"$GXX\"\n    _LT_TAGVAR(LD, $1)=\"$LD\"\n\n    ## CAVEAT EMPTOR:\n    ## There is no encapsulation within the following macros, do not change\n    ## the running order or otherwise move them around unless you know exactly\n    ## what you are doing...\n    _LT_SYS_HIDDEN_LIBDEPS($1)\n    _LT_COMPILER_PIC($1)\n    _LT_COMPILER_C_O($1)\n    _LT_COMPILER_FILE_LOCKS($1)\n    _LT_LINKER_SHLIBS($1)\n    _LT_SYS_DYNAMIC_LINKER($1)\n    _LT_LINKER_HARDCODE_LIBPATH($1)\n\n    _LT_CONFIG($1)\n  fi # test -n \"$compiler\"\n\n  CC=$lt_save_CC\n  CFLAGS=$lt_save_CFLAGS\n  LDCXX=$LD\n  LD=$lt_save_LD\n  GCC=$lt_save_GCC\n  with_gnu_ld=$lt_save_with_gnu_ld\n  lt_cv_path_LDCXX=$lt_cv_path_LD\n  lt_cv_path_LD=$lt_save_path_LD\n  lt_cv_prog_gnu_ldcxx=$lt_cv_prog_gnu_ld\n  lt_cv_prog_gnu_ld=$lt_save_with_gnu_ld\nfi # test \"$_lt_caught_CXX_error\" != yes\n\nAC_LANG_POP\n])# _LT_LANG_CXX_CONFIG\n\n\n# _LT_FUNC_STRIPNAME_CNF\n# ----------------------\n# func_stripname_cnf prefix suffix name\n# strip PREFIX and SUFFIX off of NAME.\n# PREFIX and SUFFIX must not contain globbing or regex special\n# characters, hashes, percent signs, but SUFFIX may contain a leading\n# dot (in which case that matches only a dot).\n#\n# This function is identical to the (non-XSI) version of func_stripname,\n# except this one can be used by m4 code that may be executed by configure,\n# rather than the libtool script.\nm4_defun([_LT_FUNC_STRIPNAME_CNF],[dnl\nAC_REQUIRE([_LT_DECL_SED])\nAC_REQUIRE([_LT_PROG_ECHO_BACKSLASH])\nfunc_stripname_cnf ()\n{\n  case ${2} in\n  .*) func_stripname_result=`$ECHO \"${3}\" | $SED \"s%^${1}%%; s%\\\\\\\\${2}\\$%%\"`;;\n  *)  func_stripname_result=`$ECHO \"${3}\" | $SED \"s%^${1}%%; s%${2}\\$%%\"`;;\n  esac\n} # func_stripname_cnf\n])# _LT_FUNC_STRIPNAME_CNF\n\n# _LT_SYS_HIDDEN_LIBDEPS([TAGNAME])\n# ---------------------------------\n# Figure out \"hidden\" library dependencies from verbose\n# compiler output when linking a shared library.\n# Parse the compiler output and extract the necessary\n# objects, libraries and library flags.\nm4_defun([_LT_SYS_HIDDEN_LIBDEPS],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nAC_REQUIRE([_LT_FUNC_STRIPNAME_CNF])dnl\n# Dependencies to place before and after the object being linked:\n_LT_TAGVAR(predep_objects, $1)=\n_LT_TAGVAR(postdep_objects, $1)=\n_LT_TAGVAR(predeps, $1)=\n_LT_TAGVAR(postdeps, $1)=\n_LT_TAGVAR(compiler_lib_search_path, $1)=\n\ndnl we can't use the lt_simple_compile_test_code here,\ndnl because it contains code intended for an executable,\ndnl not a library.  It's possible we should let each\ndnl tag define a new lt_????_link_test_code variable,\ndnl but it's only used here...\nm4_if([$1], [], [cat > conftest.$ac_ext <<_LT_EOF\nint a;\nvoid foo (void) { a = 0; }\n_LT_EOF\n], [$1], [CXX], [cat > conftest.$ac_ext <<_LT_EOF\nclass Foo\n{\npublic:\n  Foo (void) { a = 0; }\nprivate:\n  int a;\n};\n_LT_EOF\n], [$1], [F77], [cat > conftest.$ac_ext <<_LT_EOF\n      subroutine foo\n      implicit none\n      integer*4 a\n      a=0\n      return\n      end\n_LT_EOF\n], [$1], [FC], [cat > conftest.$ac_ext <<_LT_EOF\n      subroutine foo\n      implicit none\n      integer a\n      a=0\n      return\n      end\n_LT_EOF\n], [$1], [GCJ], [cat > conftest.$ac_ext <<_LT_EOF\npublic class foo {\n  private int a;\n  public void bar (void) {\n    a = 0;\n  }\n};\n_LT_EOF\n], [$1], [GO], [cat > conftest.$ac_ext <<_LT_EOF\npackage foo\nfunc foo() {\n}\n_LT_EOF\n])\n\n_lt_libdeps_save_CFLAGS=$CFLAGS\ncase \"$CC $CFLAGS \" in #(\n*\\ -flto*\\ *) CFLAGS=\"$CFLAGS -fno-lto\" ;;\n*\\ -fwhopr*\\ *) CFLAGS=\"$CFLAGS -fno-whopr\" ;;\n*\\ -fuse-linker-plugin*\\ *) CFLAGS=\"$CFLAGS -fno-use-linker-plugin\" ;;\nesac\n\ndnl Parse the compiler output and extract the necessary\ndnl objects, libraries and library flags.\nif AC_TRY_EVAL(ac_compile); then\n  # Parse the compiler output and extract the necessary\n  # objects, libraries and library flags.\n\n  # Sentinel used to keep track of whether or not we are before\n  # the conftest object file.\n  pre_test_object_deps_done=no\n\n  for p in `eval \"$output_verbose_link_cmd\"`; do\n    case ${prev}${p} in\n\n    -L* | -R* | -l*)\n       # Some compilers place space between \"-{L,R}\" and the path.\n       # Remove the space.\n       if test $p = \"-L\" ||\n          test $p = \"-R\"; then\n\t prev=$p\n\t continue\n       fi\n\n       # Expand the sysroot to ease extracting the directories later.\n       if test -z \"$prev\"; then\n         case $p in\n         -L*) func_stripname_cnf '-L' '' \"$p\"; prev=-L; p=$func_stripname_result ;;\n         -R*) func_stripname_cnf '-R' '' \"$p\"; prev=-R; p=$func_stripname_result ;;\n         -l*) func_stripname_cnf '-l' '' \"$p\"; prev=-l; p=$func_stripname_result ;;\n         esac\n       fi\n       case $p in\n       =*) func_stripname_cnf '=' '' \"$p\"; p=$lt_sysroot$func_stripname_result ;;\n       esac\n       if test \"$pre_test_object_deps_done\" = no; then\n\t case ${prev} in\n\t -L | -R)\n\t   # Internal compiler library paths should come after those\n\t   # provided the user.  The postdeps already come after the\n\t   # user supplied libs so there is no need to process them.\n\t   if test -z \"$_LT_TAGVAR(compiler_lib_search_path, $1)\"; then\n\t     _LT_TAGVAR(compiler_lib_search_path, $1)=\"${prev}${p}\"\n\t   else\n\t     _LT_TAGVAR(compiler_lib_search_path, $1)=\"${_LT_TAGVAR(compiler_lib_search_path, $1)} ${prev}${p}\"\n\t   fi\n\t   ;;\n\t # The \"-l\" case would never come before the object being\n\t # linked, so don't bother handling this case.\n\t esac\n       else\n\t if test -z \"$_LT_TAGVAR(postdeps, $1)\"; then\n\t   _LT_TAGVAR(postdeps, $1)=\"${prev}${p}\"\n\t else\n\t   _LT_TAGVAR(postdeps, $1)=\"${_LT_TAGVAR(postdeps, $1)} ${prev}${p}\"\n\t fi\n       fi\n       prev=\n       ;;\n\n    *.lto.$objext) ;; # Ignore GCC LTO objects\n    *.$objext)\n       # This assumes that the test object file only shows up\n       # once in the compiler output.\n       if test \"$p\" = \"conftest.$objext\"; then\n\t pre_test_object_deps_done=yes\n\t continue\n       fi\n\n       if test \"$pre_test_object_deps_done\" = no; then\n\t if test -z \"$_LT_TAGVAR(predep_objects, $1)\"; then\n\t   _LT_TAGVAR(predep_objects, $1)=\"$p\"\n\t else\n\t   _LT_TAGVAR(predep_objects, $1)=\"$_LT_TAGVAR(predep_objects, $1) $p\"\n\t fi\n       else\n\t if test -z \"$_LT_TAGVAR(postdep_objects, $1)\"; then\n\t   _LT_TAGVAR(postdep_objects, $1)=\"$p\"\n\t else\n\t   _LT_TAGVAR(postdep_objects, $1)=\"$_LT_TAGVAR(postdep_objects, $1) $p\"\n\t fi\n       fi\n       ;;\n\n    *) ;; # Ignore the rest.\n\n    esac\n  done\n\n  # Clean up.\n  rm -f a.out a.exe\nelse\n  echo \"libtool.m4: error: problem compiling $1 test program\"\nfi\n\n$RM -f confest.$objext\nCFLAGS=$_lt_libdeps_save_CFLAGS\n\n# PORTME: override above test on systems where it is broken\nm4_if([$1], [CXX],\n[case $host_os in\ninterix[[3-9]]*)\n  # Interix 3.5 installs completely hosed .la files for C++, so rather than\n  # hack all around it, let's just trust \"g++\" to DTRT.\n  _LT_TAGVAR(predep_objects,$1)=\n  _LT_TAGVAR(postdep_objects,$1)=\n  _LT_TAGVAR(postdeps,$1)=\n  ;;\n\nlinux*)\n  case `$CC -V 2>&1 | sed 5q` in\n  *Sun\\ C*)\n    # Sun C++ 5.9\n\n    # The more standards-conforming stlport4 library is\n    # incompatible with the Cstd library. Avoid specifying\n    # it if it's in CXXFLAGS. Ignore libCrun as\n    # -library=stlport4 depends on it.\n    case \" $CXX $CXXFLAGS \" in\n    *\" -library=stlport4 \"*)\n      solaris_use_stlport4=yes\n      ;;\n    esac\n\n    if test \"$solaris_use_stlport4\" != yes; then\n      _LT_TAGVAR(postdeps,$1)='-library=Cstd -library=Crun'\n    fi\n    ;;\n  esac\n  ;;\n\nsolaris*)\n  case $cc_basename in\n  CC* | sunCC*)\n    # The more standards-conforming stlport4 library is\n    # incompatible with the Cstd library. Avoid specifying\n    # it if it's in CXXFLAGS. Ignore libCrun as\n    # -library=stlport4 depends on it.\n    case \" $CXX $CXXFLAGS \" in\n    *\" -library=stlport4 \"*)\n      solaris_use_stlport4=yes\n      ;;\n    esac\n\n    # Adding this requires a known-good setup of shared libraries for\n    # Sun compiler versions before 5.6, else PIC objects from an old\n    # archive will be linked into the output, leading to subtle bugs.\n    if test \"$solaris_use_stlport4\" != yes; then\n      _LT_TAGVAR(postdeps,$1)='-library=Cstd -library=Crun'\n    fi\n    ;;\n  esac\n  ;;\nesac\n])\n\ncase \" $_LT_TAGVAR(postdeps, $1) \" in\n*\" -lc \"*) _LT_TAGVAR(archive_cmds_need_lc, $1)=no ;;\nesac\n _LT_TAGVAR(compiler_lib_search_dirs, $1)=\nif test -n \"${_LT_TAGVAR(compiler_lib_search_path, $1)}\"; then\n _LT_TAGVAR(compiler_lib_search_dirs, $1)=`echo \" ${_LT_TAGVAR(compiler_lib_search_path, $1)}\" | ${SED} -e 's! -L! !g' -e 's!^ !!'`\nfi\n_LT_TAGDECL([], [compiler_lib_search_dirs], [1],\n    [The directories searched by this compiler when creating a shared library])\n_LT_TAGDECL([], [predep_objects], [1],\n    [Dependencies to place before and after the objects being linked to\n    create a shared library])\n_LT_TAGDECL([], [postdep_objects], [1])\n_LT_TAGDECL([], [predeps], [1])\n_LT_TAGDECL([], [postdeps], [1])\n_LT_TAGDECL([], [compiler_lib_search_path], [1],\n    [The library search path used internally by the compiler when linking\n    a shared library])\n])# _LT_SYS_HIDDEN_LIBDEPS\n\n\n# _LT_LANG_F77_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for a Fortran 77 compiler are\n# suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to `libtool'.\nm4_defun([_LT_LANG_F77_CONFIG],\n[AC_LANG_PUSH(Fortran 77)\nif test -z \"$F77\" || test \"X$F77\" = \"Xno\"; then\n  _lt_disable_F77=yes\nfi\n\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n_LT_TAGVAR(allow_undefined_flag, $1)=\n_LT_TAGVAR(always_export_symbols, $1)=no\n_LT_TAGVAR(archive_expsym_cmds, $1)=\n_LT_TAGVAR(export_dynamic_flag_spec, $1)=\n_LT_TAGVAR(hardcode_direct, $1)=no\n_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n_LT_TAGVAR(hardcode_libdir_separator, $1)=\n_LT_TAGVAR(hardcode_minus_L, $1)=no\n_LT_TAGVAR(hardcode_automatic, $1)=no\n_LT_TAGVAR(inherit_rpath, $1)=no\n_LT_TAGVAR(module_cmds, $1)=\n_LT_TAGVAR(module_expsym_cmds, $1)=\n_LT_TAGVAR(link_all_deplibs, $1)=unknown\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n_LT_TAGVAR(no_undefined_flag, $1)=\n_LT_TAGVAR(whole_archive_flag_spec, $1)=\n_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n\n# Source file extension for f77 test sources.\nac_ext=f\n\n# Object file extension for compiled f77 test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# No sense in running all these tests if we already determined that\n# the F77 compiler isn't working.  Some variables (like enable_shared)\n# are currently assumed to apply to all compilers on this platform,\n# and will be corrupted by setting them based on a non-working compiler.\nif test \"$_lt_disable_F77\" != yes; then\n  # Code to be used in simple compile tests\n  lt_simple_compile_test_code=\"\\\n      subroutine t\n      return\n      end\n\"\n\n  # Code to be used in simple link tests\n  lt_simple_link_test_code=\"\\\n      program t\n      end\n\"\n\n  # ltmain only uses $CC for tagged configurations so make sure $CC is set.\n  _LT_TAG_COMPILER\n\n  # save warnings/boilerplate of simple test code\n  _LT_COMPILER_BOILERPLATE\n  _LT_LINKER_BOILERPLATE\n\n  # Allow CC to be a program name with arguments.\n  lt_save_CC=\"$CC\"\n  lt_save_GCC=$GCC\n  lt_save_CFLAGS=$CFLAGS\n  CC=${F77-\"f77\"}\n  CFLAGS=$FFLAGS\n  compiler=$CC\n  _LT_TAGVAR(compiler, $1)=$CC\n  _LT_CC_BASENAME([$compiler])\n  GCC=$G77\n  if test -n \"$compiler\"; then\n    AC_MSG_CHECKING([if libtool supports shared libraries])\n    AC_MSG_RESULT([$can_build_shared])\n\n    AC_MSG_CHECKING([whether to build shared libraries])\n    test \"$can_build_shared\" = \"no\" && enable_shared=no\n\n    # On AIX, shared libraries and static libraries use the same namespace, and\n    # are all built from PIC.\n    case $host_os in\n      aix3*)\n        test \"$enable_shared\" = yes && enable_static=no\n        if test -n \"$RANLIB\"; then\n          archive_cmds=\"$archive_cmds~\\$RANLIB \\$lib\"\n          postinstall_cmds='$RANLIB $lib'\n        fi\n        ;;\n      aix[[4-9]]*)\n\tif test \"$host_cpu\" != ia64 && test \"$aix_use_runtimelinking\" = no ; then\n\t  test \"$enable_shared\" = yes && enable_static=no\n\tfi\n        ;;\n    esac\n    AC_MSG_RESULT([$enable_shared])\n\n    AC_MSG_CHECKING([whether to build static libraries])\n    # Make sure either enable_shared or enable_static is yes.\n    test \"$enable_shared\" = yes || enable_static=yes\n    AC_MSG_RESULT([$enable_static])\n\n    _LT_TAGVAR(GCC, $1)=\"$G77\"\n    _LT_TAGVAR(LD, $1)=\"$LD\"\n\n    ## CAVEAT EMPTOR:\n    ## There is no encapsulation within the following macros, do not change\n    ## the running order or otherwise move them around unless you know exactly\n    ## what you are doing...\n    _LT_COMPILER_PIC($1)\n    _LT_COMPILER_C_O($1)\n    _LT_COMPILER_FILE_LOCKS($1)\n    _LT_LINKER_SHLIBS($1)\n    _LT_SYS_DYNAMIC_LINKER($1)\n    _LT_LINKER_HARDCODE_LIBPATH($1)\n\n    _LT_CONFIG($1)\n  fi # test -n \"$compiler\"\n\n  GCC=$lt_save_GCC\n  CC=\"$lt_save_CC\"\n  CFLAGS=\"$lt_save_CFLAGS\"\nfi # test \"$_lt_disable_F77\" != yes\n\nAC_LANG_POP\n])# _LT_LANG_F77_CONFIG\n\n\n# _LT_LANG_FC_CONFIG([TAG])\n# -------------------------\n# Ensure that the configuration variables for a Fortran compiler are\n# suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to `libtool'.\nm4_defun([_LT_LANG_FC_CONFIG],\n[AC_LANG_PUSH(Fortran)\n\nif test -z \"$FC\" || test \"X$FC\" = \"Xno\"; then\n  _lt_disable_FC=yes\nfi\n\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n_LT_TAGVAR(allow_undefined_flag, $1)=\n_LT_TAGVAR(always_export_symbols, $1)=no\n_LT_TAGVAR(archive_expsym_cmds, $1)=\n_LT_TAGVAR(export_dynamic_flag_spec, $1)=\n_LT_TAGVAR(hardcode_direct, $1)=no\n_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n_LT_TAGVAR(hardcode_libdir_separator, $1)=\n_LT_TAGVAR(hardcode_minus_L, $1)=no\n_LT_TAGVAR(hardcode_automatic, $1)=no\n_LT_TAGVAR(inherit_rpath, $1)=no\n_LT_TAGVAR(module_cmds, $1)=\n_LT_TAGVAR(module_expsym_cmds, $1)=\n_LT_TAGVAR(link_all_deplibs, $1)=unknown\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n_LT_TAGVAR(no_undefined_flag, $1)=\n_LT_TAGVAR(whole_archive_flag_spec, $1)=\n_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n\n# Source file extension for fc test sources.\nac_ext=${ac_fc_srcext-f}\n\n# Object file extension for compiled fc test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# No sense in running all these tests if we already determined that\n# the FC compiler isn't working.  Some variables (like enable_shared)\n# are currently assumed to apply to all compilers on this platform,\n# and will be corrupted by setting them based on a non-working compiler.\nif test \"$_lt_disable_FC\" != yes; then\n  # Code to be used in simple compile tests\n  lt_simple_compile_test_code=\"\\\n      subroutine t\n      return\n      end\n\"\n\n  # Code to be used in simple link tests\n  lt_simple_link_test_code=\"\\\n      program t\n      end\n\"\n\n  # ltmain only uses $CC for tagged configurations so make sure $CC is set.\n  _LT_TAG_COMPILER\n\n  # save warnings/boilerplate of simple test code\n  _LT_COMPILER_BOILERPLATE\n  _LT_LINKER_BOILERPLATE\n\n  # Allow CC to be a program name with arguments.\n  lt_save_CC=\"$CC\"\n  lt_save_GCC=$GCC\n  lt_save_CFLAGS=$CFLAGS\n  CC=${FC-\"f95\"}\n  CFLAGS=$FCFLAGS\n  compiler=$CC\n  GCC=$ac_cv_fc_compiler_gnu\n\n  _LT_TAGVAR(compiler, $1)=$CC\n  _LT_CC_BASENAME([$compiler])\n\n  if test -n \"$compiler\"; then\n    AC_MSG_CHECKING([if libtool supports shared libraries])\n    AC_MSG_RESULT([$can_build_shared])\n\n    AC_MSG_CHECKING([whether to build shared libraries])\n    test \"$can_build_shared\" = \"no\" && enable_shared=no\n\n    # On AIX, shared libraries and static libraries use the same namespace, and\n    # are all built from PIC.\n    case $host_os in\n      aix3*)\n        test \"$enable_shared\" = yes && enable_static=no\n        if test -n \"$RANLIB\"; then\n          archive_cmds=\"$archive_cmds~\\$RANLIB \\$lib\"\n          postinstall_cmds='$RANLIB $lib'\n        fi\n        ;;\n      aix[[4-9]]*)\n\tif test \"$host_cpu\" != ia64 && test \"$aix_use_runtimelinking\" = no ; then\n\t  test \"$enable_shared\" = yes && enable_static=no\n\tfi\n        ;;\n    esac\n    AC_MSG_RESULT([$enable_shared])\n\n    AC_MSG_CHECKING([whether to build static libraries])\n    # Make sure either enable_shared or enable_static is yes.\n    test \"$enable_shared\" = yes || enable_static=yes\n    AC_MSG_RESULT([$enable_static])\n\n    _LT_TAGVAR(GCC, $1)=\"$ac_cv_fc_compiler_gnu\"\n    _LT_TAGVAR(LD, $1)=\"$LD\"\n\n    ## CAVEAT EMPTOR:\n    ## There is no encapsulation within the following macros, do not change\n    ## the running order or otherwise move them around unless you know exactly\n    ## what you are doing...\n    _LT_SYS_HIDDEN_LIBDEPS($1)\n    _LT_COMPILER_PIC($1)\n    _LT_COMPILER_C_O($1)\n    _LT_COMPILER_FILE_LOCKS($1)\n    _LT_LINKER_SHLIBS($1)\n    _LT_SYS_DYNAMIC_LINKER($1)\n    _LT_LINKER_HARDCODE_LIBPATH($1)\n\n    _LT_CONFIG($1)\n  fi # test -n \"$compiler\"\n\n  GCC=$lt_save_GCC\n  CC=$lt_save_CC\n  CFLAGS=$lt_save_CFLAGS\nfi # test \"$_lt_disable_FC\" != yes\n\nAC_LANG_POP\n])# _LT_LANG_FC_CONFIG\n\n\n# _LT_LANG_GCJ_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for the GNU Java Compiler compiler\n# are suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to `libtool'.\nm4_defun([_LT_LANG_GCJ_CONFIG],\n[AC_REQUIRE([LT_PROG_GCJ])dnl\nAC_LANG_SAVE\n\n# Source file extension for Java test sources.\nac_ext=java\n\n# Object file extension for compiled Java test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code=\"class foo {}\"\n\n# Code to be used in simple link tests\nlt_simple_link_test_code='public class conftest { public static void main(String[[]] argv) {}; }'\n\n# ltmain only uses $CC for tagged configurations so make sure $CC is set.\n_LT_TAG_COMPILER\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n# Allow CC to be a program name with arguments.\nlt_save_CC=$CC\nlt_save_CFLAGS=$CFLAGS\nlt_save_GCC=$GCC\nGCC=yes\nCC=${GCJ-\"gcj\"}\nCFLAGS=$GCJFLAGS\ncompiler=$CC\n_LT_TAGVAR(compiler, $1)=$CC\n_LT_TAGVAR(LD, $1)=\"$LD\"\n_LT_CC_BASENAME([$compiler])\n\n# GCJ did not exist at the time GCC didn't implicitly link libc in.\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n\n## CAVEAT EMPTOR:\n## There is no encapsulation within the following macros, do not change\n## the running order or otherwise move them around unless you know exactly\n## what you are doing...\nif test -n \"$compiler\"; then\n  _LT_COMPILER_NO_RTTI($1)\n  _LT_COMPILER_PIC($1)\n  _LT_COMPILER_C_O($1)\n  _LT_COMPILER_FILE_LOCKS($1)\n  _LT_LINKER_SHLIBS($1)\n  _LT_LINKER_HARDCODE_LIBPATH($1)\n\n  _LT_CONFIG($1)\nfi\n\nAC_LANG_RESTORE\n\nGCC=$lt_save_GCC\nCC=$lt_save_CC\nCFLAGS=$lt_save_CFLAGS\n])# _LT_LANG_GCJ_CONFIG\n\n\n# _LT_LANG_GO_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for the GNU Go compiler\n# are suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to `libtool'.\nm4_defun([_LT_LANG_GO_CONFIG],\n[AC_REQUIRE([LT_PROG_GO])dnl\nAC_LANG_SAVE\n\n# Source file extension for Go test sources.\nac_ext=go\n\n# Object file extension for compiled Go test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code=\"package main; func main() { }\"\n\n# Code to be used in simple link tests\nlt_simple_link_test_code='package main; func main() { }'\n\n# ltmain only uses $CC for tagged configurations so make sure $CC is set.\n_LT_TAG_COMPILER\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n# Allow CC to be a program name with arguments.\nlt_save_CC=$CC\nlt_save_CFLAGS=$CFLAGS\nlt_save_GCC=$GCC\nGCC=yes\nCC=${GOC-\"gccgo\"}\nCFLAGS=$GOFLAGS\ncompiler=$CC\n_LT_TAGVAR(compiler, $1)=$CC\n_LT_TAGVAR(LD, $1)=\"$LD\"\n_LT_CC_BASENAME([$compiler])\n\n# Go did not exist at the time GCC didn't implicitly link libc in.\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n\n## CAVEAT EMPTOR:\n## There is no encapsulation within the following macros, do not change\n## the running order or otherwise move them around unless you know exactly\n## what you are doing...\nif test -n \"$compiler\"; then\n  _LT_COMPILER_NO_RTTI($1)\n  _LT_COMPILER_PIC($1)\n  _LT_COMPILER_C_O($1)\n  _LT_COMPILER_FILE_LOCKS($1)\n  _LT_LINKER_SHLIBS($1)\n  _LT_LINKER_HARDCODE_LIBPATH($1)\n\n  _LT_CONFIG($1)\nfi\n\nAC_LANG_RESTORE\n\nGCC=$lt_save_GCC\nCC=$lt_save_CC\nCFLAGS=$lt_save_CFLAGS\n])# _LT_LANG_GO_CONFIG\n\n\n# _LT_LANG_RC_CONFIG([TAG])\n# -------------------------\n# Ensure that the configuration variables for the Windows resource compiler\n# are suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to `libtool'.\nm4_defun([_LT_LANG_RC_CONFIG],\n[AC_REQUIRE([LT_PROG_RC])dnl\nAC_LANG_SAVE\n\n# Source file extension for RC test sources.\nac_ext=rc\n\n# Object file extension for compiled RC test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code='sample MENU { MENUITEM \"&Soup\", 100, CHECKED }'\n\n# Code to be used in simple link tests\nlt_simple_link_test_code=\"$lt_simple_compile_test_code\"\n\n# ltmain only uses $CC for tagged configurations so make sure $CC is set.\n_LT_TAG_COMPILER\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n# Allow CC to be a program name with arguments.\nlt_save_CC=\"$CC\"\nlt_save_CFLAGS=$CFLAGS\nlt_save_GCC=$GCC\nGCC=\nCC=${RC-\"windres\"}\nCFLAGS=\ncompiler=$CC\n_LT_TAGVAR(compiler, $1)=$CC\n_LT_CC_BASENAME([$compiler])\n_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)=yes\n\nif test -n \"$compiler\"; then\n  :\n  _LT_CONFIG($1)\nfi\n\nGCC=$lt_save_GCC\nAC_LANG_RESTORE\nCC=$lt_save_CC\nCFLAGS=$lt_save_CFLAGS\n])# _LT_LANG_RC_CONFIG\n\n\n# LT_PROG_GCJ\n# -----------\nAC_DEFUN([LT_PROG_GCJ],\n[m4_ifdef([AC_PROG_GCJ], [AC_PROG_GCJ],\n  [m4_ifdef([A][M_PROG_GCJ], [A][M_PROG_GCJ],\n    [AC_CHECK_TOOL(GCJ, gcj,)\n      test \"x${GCJFLAGS+set}\" = xset || GCJFLAGS=\"-g -O2\"\n      AC_SUBST(GCJFLAGS)])])[]dnl\n])\n\n# Old name:\nAU_ALIAS([LT_AC_PROG_GCJ], [LT_PROG_GCJ])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([LT_AC_PROG_GCJ], [])\n\n\n# LT_PROG_GO\n# ----------\nAC_DEFUN([LT_PROG_GO],\n[AC_CHECK_TOOL(GOC, gccgo,)\n])\n\n\n# LT_PROG_RC\n# ----------\nAC_DEFUN([LT_PROG_RC],\n[AC_CHECK_TOOL(RC, windres,)\n])\n\n# Old name:\nAU_ALIAS([LT_AC_PROG_RC], [LT_PROG_RC])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([LT_AC_PROG_RC], [])\n\n\n# _LT_DECL_EGREP\n# --------------\n# If we don't have a new enough Autoconf to choose the best grep\n# available, choose the one first in the user's PATH.\nm4_defun([_LT_DECL_EGREP],\n[AC_REQUIRE([AC_PROG_EGREP])dnl\nAC_REQUIRE([AC_PROG_FGREP])dnl\ntest -z \"$GREP\" && GREP=grep\n_LT_DECL([], [GREP], [1], [A grep program that handles long lines])\n_LT_DECL([], [EGREP], [1], [An ERE matcher])\n_LT_DECL([], [FGREP], [1], [A literal string matcher])\ndnl Non-bleeding-edge autoconf doesn't subst GREP, so do it here too\nAC_SUBST([GREP])\n])\n\n\n# _LT_DECL_OBJDUMP\n# --------------\n# If we don't have a new enough Autoconf to choose the best objdump\n# available, choose the one first in the user's PATH.\nm4_defun([_LT_DECL_OBJDUMP],\n[AC_CHECK_TOOL(OBJDUMP, objdump, false)\ntest -z \"$OBJDUMP\" && OBJDUMP=objdump\n_LT_DECL([], [OBJDUMP], [1], [An object symbol dumper])\nAC_SUBST([OBJDUMP])\n])\n\n# _LT_DECL_DLLTOOL\n# ----------------\n# Ensure DLLTOOL variable is set.\nm4_defun([_LT_DECL_DLLTOOL],\n[AC_CHECK_TOOL(DLLTOOL, dlltool, false)\ntest -z \"$DLLTOOL\" && DLLTOOL=dlltool\n_LT_DECL([], [DLLTOOL], [1], [DLL creation program])\nAC_SUBST([DLLTOOL])\n])\n\n# _LT_DECL_SED\n# ------------\n# Check for a fully-functional sed program, that truncates\n# as few characters as possible.  Prefer GNU sed if found.\nm4_defun([_LT_DECL_SED],\n[AC_PROG_SED\ntest -z \"$SED\" && SED=sed\nXsed=\"$SED -e 1s/^X//\"\n_LT_DECL([], [SED], [1], [A sed program that does not truncate output])\n_LT_DECL([], [Xsed], [\"\\$SED -e 1s/^X//\"],\n    [Sed that helps us avoid accidentally triggering echo(1) options like -n])\n])# _LT_DECL_SED\n\nm4_ifndef([AC_PROG_SED], [\n############################################################\n# NOTE: This macro has been submitted for inclusion into   #\n#  GNU Autoconf as AC_PROG_SED.  When it is available in   #\n#  a released version of Autoconf we should remove this    #\n#  macro and use it instead.                               #\n############################################################\n\nm4_defun([AC_PROG_SED],\n[AC_MSG_CHECKING([for a sed that does not truncate output])\nAC_CACHE_VAL(lt_cv_path_SED,\n[# Loop through the user's path and test for sed and gsed.\n# Then use that list of sed's as ones to test for truncation.\nas_save_IFS=$IFS; IFS=$PATH_SEPARATOR\nfor as_dir in $PATH\ndo\n  IFS=$as_save_IFS\n  test -z \"$as_dir\" && as_dir=.\n  for lt_ac_prog in sed gsed; do\n    for ac_exec_ext in '' $ac_executable_extensions; do\n      if $as_executable_p \"$as_dir/$lt_ac_prog$ac_exec_ext\"; then\n        lt_ac_sed_list=\"$lt_ac_sed_list $as_dir/$lt_ac_prog$ac_exec_ext\"\n      fi\n    done\n  done\ndone\nIFS=$as_save_IFS\nlt_ac_max=0\nlt_ac_count=0\n# Add /usr/xpg4/bin/sed as it is typically found on Solaris\n# along with /bin/sed that truncates output.\nfor lt_ac_sed in $lt_ac_sed_list /usr/xpg4/bin/sed; do\n  test ! -f $lt_ac_sed && continue\n  cat /dev/null > conftest.in\n  lt_ac_count=0\n  echo $ECHO_N \"0123456789$ECHO_C\" >conftest.in\n  # Check for GNU sed and select it if it is found.\n  if \"$lt_ac_sed\" --version 2>&1 < /dev/null | grep 'GNU' > /dev/null; then\n    lt_cv_path_SED=$lt_ac_sed\n    break\n  fi\n  while true; do\n    cat conftest.in conftest.in >conftest.tmp\n    mv conftest.tmp conftest.in\n    cp conftest.in conftest.nl\n    echo >>conftest.nl\n    $lt_ac_sed -e 's/a$//' < conftest.nl >conftest.out || break\n    cmp -s conftest.out conftest.nl || break\n    # 10000 chars as input seems more than enough\n    test $lt_ac_count -gt 10 && break\n    lt_ac_count=`expr $lt_ac_count + 1`\n    if test $lt_ac_count -gt $lt_ac_max; then\n      lt_ac_max=$lt_ac_count\n      lt_cv_path_SED=$lt_ac_sed\n    fi\n  done\ndone\n])\nSED=$lt_cv_path_SED\nAC_SUBST([SED])\nAC_MSG_RESULT([$SED])\n])#AC_PROG_SED\n])#m4_ifndef\n\n# Old name:\nAU_ALIAS([LT_AC_PROG_SED], [AC_PROG_SED])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([LT_AC_PROG_SED], [])\n\n\n# _LT_CHECK_SHELL_FEATURES\n# ------------------------\n# Find out whether the shell is Bourne or XSI compatible,\n# or has some other useful features.\nm4_defun([_LT_CHECK_SHELL_FEATURES],\n[AC_MSG_CHECKING([whether the shell understands some XSI constructs])\n# Try some XSI features\nxsi_shell=no\n( _lt_dummy=\"a/b/c\"\n  test \"${_lt_dummy##*/},${_lt_dummy%/*},${_lt_dummy#??}\"${_lt_dummy%\"$_lt_dummy\"}, \\\n      = c,a/b,b/c, \\\n    && eval 'test $(( 1 + 1 )) -eq 2 \\\n    && test \"${#_lt_dummy}\" -eq 5' ) >/dev/null 2>&1 \\\n  && xsi_shell=yes\nAC_MSG_RESULT([$xsi_shell])\n_LT_CONFIG_LIBTOOL_INIT([xsi_shell='$xsi_shell'])\n\nAC_MSG_CHECKING([whether the shell understands \"+=\"])\nlt_shell_append=no\n( foo=bar; set foo baz; eval \"$[1]+=\\$[2]\" && test \"$foo\" = barbaz ) \\\n    >/dev/null 2>&1 \\\n  && lt_shell_append=yes\nAC_MSG_RESULT([$lt_shell_append])\n_LT_CONFIG_LIBTOOL_INIT([lt_shell_append='$lt_shell_append'])\n\nif ( (MAIL=60; unset MAIL) || exit) >/dev/null 2>&1; then\n  lt_unset=unset\nelse\n  lt_unset=false\nfi\n_LT_DECL([], [lt_unset], [0], [whether the shell understands \"unset\"])dnl\n\n# test EBCDIC or ASCII\ncase `echo X|tr X '\\101'` in\n A) # ASCII based system\n    # \\n is not interpreted correctly by Solaris 8 /usr/ucb/tr\n  lt_SP2NL='tr \\040 \\012'\n  lt_NL2SP='tr \\015\\012 \\040\\040'\n  ;;\n *) # EBCDIC based system\n  lt_SP2NL='tr \\100 \\n'\n  lt_NL2SP='tr \\r\\n \\100\\100'\n  ;;\nesac\n_LT_DECL([SP2NL], [lt_SP2NL], [1], [turn spaces into newlines])dnl\n_LT_DECL([NL2SP], [lt_NL2SP], [1], [turn newlines into spaces])dnl\n])# _LT_CHECK_SHELL_FEATURES\n\n\n# _LT_PROG_FUNCTION_REPLACE (FUNCNAME, REPLACEMENT-BODY)\n# ------------------------------------------------------\n# In `$cfgfile', look for function FUNCNAME delimited by `^FUNCNAME ()$' and\n# '^} FUNCNAME ', and replace its body with REPLACEMENT-BODY.\nm4_defun([_LT_PROG_FUNCTION_REPLACE],\n[dnl {\nsed -e '/^$1 ()$/,/^} # $1 /c\\\n$1 ()\\\n{\\\nm4_bpatsubsts([$2], [$], [\\\\], [^\\([\t ]\\)], [\\\\\\1])\n} # Extended-shell $1 implementation' \"$cfgfile\" > $cfgfile.tmp \\\n  && mv -f \"$cfgfile.tmp\" \"$cfgfile\" \\\n    || (rm -f \"$cfgfile\" && cp \"$cfgfile.tmp\" \"$cfgfile\" && rm -f \"$cfgfile.tmp\")\ntest 0 -eq $? || _lt_function_replace_fail=:\n])\n\n\n# _LT_PROG_REPLACE_SHELLFNS\n# -------------------------\n# Replace existing portable implementations of several shell functions with\n# equivalent extended shell implementations where those features are available..\nm4_defun([_LT_PROG_REPLACE_SHELLFNS],\n[if test x\"$xsi_shell\" = xyes; then\n  _LT_PROG_FUNCTION_REPLACE([func_dirname], [dnl\n    case ${1} in\n      */*) func_dirname_result=\"${1%/*}${2}\" ;;\n      *  ) func_dirname_result=\"${3}\" ;;\n    esac])\n\n  _LT_PROG_FUNCTION_REPLACE([func_basename], [dnl\n    func_basename_result=\"${1##*/}\"])\n\n  _LT_PROG_FUNCTION_REPLACE([func_dirname_and_basename], [dnl\n    case ${1} in\n      */*) func_dirname_result=\"${1%/*}${2}\" ;;\n      *  ) func_dirname_result=\"${3}\" ;;\n    esac\n    func_basename_result=\"${1##*/}\"])\n\n  _LT_PROG_FUNCTION_REPLACE([func_stripname], [dnl\n    # pdksh 5.2.14 does not do ${X%$Y} correctly if both X and Y are\n    # positional parameters, so assign one to ordinary parameter first.\n    func_stripname_result=${3}\n    func_stripname_result=${func_stripname_result#\"${1}\"}\n    func_stripname_result=${func_stripname_result%\"${2}\"}])\n\n  _LT_PROG_FUNCTION_REPLACE([func_split_long_opt], [dnl\n    func_split_long_opt_name=${1%%=*}\n    func_split_long_opt_arg=${1#*=}])\n\n  _LT_PROG_FUNCTION_REPLACE([func_split_short_opt], [dnl\n    func_split_short_opt_arg=${1#??}\n    func_split_short_opt_name=${1%\"$func_split_short_opt_arg\"}])\n\n  _LT_PROG_FUNCTION_REPLACE([func_lo2o], [dnl\n    case ${1} in\n      *.lo) func_lo2o_result=${1%.lo}.${objext} ;;\n      *)    func_lo2o_result=${1} ;;\n    esac])\n\n  _LT_PROG_FUNCTION_REPLACE([func_xform], [    func_xform_result=${1%.*}.lo])\n\n  _LT_PROG_FUNCTION_REPLACE([func_arith], [    func_arith_result=$(( $[*] ))])\n\n  _LT_PROG_FUNCTION_REPLACE([func_len], [    func_len_result=${#1}])\nfi\n\nif test x\"$lt_shell_append\" = xyes; then\n  _LT_PROG_FUNCTION_REPLACE([func_append], [    eval \"${1}+=\\\\${2}\"])\n\n  _LT_PROG_FUNCTION_REPLACE([func_append_quoted], [dnl\n    func_quote_for_eval \"${2}\"\ndnl m4 expansion turns \\\\\\\\ into \\\\, and then the shell eval turns that into \\\n    eval \"${1}+=\\\\\\\\ \\\\$func_quote_for_eval_result\"])\n\n  # Save a `func_append' function call where possible by direct use of '+='\n  sed -e 's%func_append \\([[a-zA-Z_]]\\{1,\\}\\) \"%\\1+=\"%g' $cfgfile > $cfgfile.tmp \\\n    && mv -f \"$cfgfile.tmp\" \"$cfgfile\" \\\n      || (rm -f \"$cfgfile\" && cp \"$cfgfile.tmp\" \"$cfgfile\" && rm -f \"$cfgfile.tmp\")\n  test 0 -eq $? || _lt_function_replace_fail=:\nelse\n  # Save a `func_append' function call even when '+=' is not available\n  sed -e 's%func_append \\([[a-zA-Z_]]\\{1,\\}\\) \"%\\1=\"$\\1%g' $cfgfile > $cfgfile.tmp \\\n    && mv -f \"$cfgfile.tmp\" \"$cfgfile\" \\\n      || (rm -f \"$cfgfile\" && cp \"$cfgfile.tmp\" \"$cfgfile\" && rm -f \"$cfgfile.tmp\")\n  test 0 -eq $? || _lt_function_replace_fail=:\nfi\n\nif test x\"$_lt_function_replace_fail\" = x\":\"; then\n  AC_MSG_WARN([Unable to substitute extended shell functions in $ofile])\nfi\n])\n\n# _LT_PATH_CONVERSION_FUNCTIONS\n# -----------------------------\n# Determine which file name conversion functions should be used by\n# func_to_host_file (and, implicitly, by func_to_host_path).  These are needed\n# for certain cross-compile configurations and native mingw.\nm4_defun([_LT_PATH_CONVERSION_FUNCTIONS],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_CANONICAL_BUILD])dnl\nAC_MSG_CHECKING([how to convert $build file names to $host format])\nAC_CACHE_VAL(lt_cv_to_host_file_cmd,\n[case $host in\n  *-*-mingw* )\n    case $build in\n      *-*-mingw* ) # actually msys\n        lt_cv_to_host_file_cmd=func_convert_file_msys_to_w32\n        ;;\n      *-*-cygwin* )\n        lt_cv_to_host_file_cmd=func_convert_file_cygwin_to_w32\n        ;;\n      * ) # otherwise, assume *nix\n        lt_cv_to_host_file_cmd=func_convert_file_nix_to_w32\n        ;;\n    esac\n    ;;\n  *-*-cygwin* )\n    case $build in\n      *-*-mingw* ) # actually msys\n        lt_cv_to_host_file_cmd=func_convert_file_msys_to_cygwin\n        ;;\n      *-*-cygwin* )\n        lt_cv_to_host_file_cmd=func_convert_file_noop\n        ;;\n      * ) # otherwise, assume *nix\n        lt_cv_to_host_file_cmd=func_convert_file_nix_to_cygwin\n        ;;\n    esac\n    ;;\n  * ) # unhandled hosts (and \"normal\" native builds)\n    lt_cv_to_host_file_cmd=func_convert_file_noop\n    ;;\nesac\n])\nto_host_file_cmd=$lt_cv_to_host_file_cmd\nAC_MSG_RESULT([$lt_cv_to_host_file_cmd])\n_LT_DECL([to_host_file_cmd], [lt_cv_to_host_file_cmd],\n         [0], [convert $build file names to $host format])dnl\n\nAC_MSG_CHECKING([how to convert $build file names to toolchain format])\nAC_CACHE_VAL(lt_cv_to_tool_file_cmd,\n[#assume ordinary cross tools, or native build.\nlt_cv_to_tool_file_cmd=func_convert_file_noop\ncase $host in\n  *-*-mingw* )\n    case $build in\n      *-*-mingw* ) # actually msys\n        lt_cv_to_tool_file_cmd=func_convert_file_msys_to_w32\n        ;;\n    esac\n    ;;\nesac\n])\nto_tool_file_cmd=$lt_cv_to_tool_file_cmd\nAC_MSG_RESULT([$lt_cv_to_tool_file_cmd])\n_LT_DECL([to_tool_file_cmd], [lt_cv_to_tool_file_cmd],\n         [0], [convert $build files to toolchain format])dnl\n])# _LT_PATH_CONVERSION_FUNCTIONS\n",
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/thirdparty/enet/enet/m4/ltoptions.m4": "# Helper functions for option handling.                    -*- Autoconf -*-\n#\n#   Copyright (C) 2004, 2005, 2007, 2008, 2009 Free Software Foundation,\n#   Inc.\n#   Written by Gary V. Vaughan, 2004\n#\n# This file is free software; the Free Software Foundation gives\n# unlimited permission to copy and/or distribute it, with or without\n# modifications, as long as this notice is preserved.\n\n# serial 7 ltoptions.m4\n\n# This is to help aclocal find these macros, as it can't see m4_define.\nAC_DEFUN([LTOPTIONS_VERSION], [m4_if([1])])\n\n\n# _LT_MANGLE_OPTION(MACRO-NAME, OPTION-NAME)\n# ------------------------------------------\nm4_define([_LT_MANGLE_OPTION],\n[[_LT_OPTION_]m4_bpatsubst($1__$2, [[^a-zA-Z0-9_]], [_])])\n\n\n# _LT_SET_OPTION(MACRO-NAME, OPTION-NAME)\n# ---------------------------------------\n# Set option OPTION-NAME for macro MACRO-NAME, and if there is a\n# matching handler defined, dispatch to it.  Other OPTION-NAMEs are\n# saved as a flag.\nm4_define([_LT_SET_OPTION],\n[m4_define(_LT_MANGLE_OPTION([$1], [$2]))dnl\nm4_ifdef(_LT_MANGLE_DEFUN([$1], [$2]),\n        _LT_MANGLE_DEFUN([$1], [$2]),\n    [m4_warning([Unknown $1 option `$2'])])[]dnl\n])\n\n\n# _LT_IF_OPTION(MACRO-NAME, OPTION-NAME, IF-SET, [IF-NOT-SET])\n# ------------------------------------------------------------\n# Execute IF-SET if OPTION is set, IF-NOT-SET otherwise.\nm4_define([_LT_IF_OPTION],\n[m4_ifdef(_LT_MANGLE_OPTION([$1], [$2]), [$3], [$4])])\n\n\n# _LT_UNLESS_OPTIONS(MACRO-NAME, OPTION-LIST, IF-NOT-SET)\n# -------------------------------------------------------\n# Execute IF-NOT-SET unless all options in OPTION-LIST for MACRO-NAME\n# are set.\nm4_define([_LT_UNLESS_OPTIONS],\n[m4_foreach([_LT_Option], m4_split(m4_normalize([$2])),\n\t    [m4_ifdef(_LT_MANGLE_OPTION([$1], _LT_Option),\n\t\t      [m4_define([$0_found])])])[]dnl\nm4_ifdef([$0_found], [m4_undefine([$0_found])], [$3\n])[]dnl\n])\n\n\n# _LT_SET_OPTIONS(MACRO-NAME, OPTION-LIST)\n# ----------------------------------------\n# OPTION-LIST is a space-separated list of Libtool options associated\n# with MACRO-NAME.  If any OPTION has a matching handler declared with\n# LT_OPTION_DEFINE, dispatch to that macro; otherwise complain about\n# the unknown option and exit.\nm4_defun([_LT_SET_OPTIONS],\n[# Set options\nm4_foreach([_LT_Option], m4_split(m4_normalize([$2])),\n    [_LT_SET_OPTION([$1], _LT_Option)])\n\nm4_if([$1],[LT_INIT],[\n  dnl\n  dnl Simply set some default values (i.e off) if boolean options were not\n  dnl specified:\n  _LT_UNLESS_OPTIONS([LT_INIT], [dlopen], [enable_dlopen=no\n  ])\n  _LT_UNLESS_OPTIONS([LT_INIT], [win32-dll], [enable_win32_dll=no\n  ])\n  dnl\n  dnl If no reference was made to various pairs of opposing options, then\n  dnl we run the default mode handler for the pair.  For example, if neither\n  dnl `shared' nor `disable-shared' was passed, we enable building of shared\n  dnl archives by default:\n  _LT_UNLESS_OPTIONS([LT_INIT], [shared disable-shared], [_LT_ENABLE_SHARED])\n  _LT_UNLESS_OPTIONS([LT_INIT], [static disable-static], [_LT_ENABLE_STATIC])\n  _LT_UNLESS_OPTIONS([LT_INIT], [pic-only no-pic], [_LT_WITH_PIC])\n  _LT_UNLESS_OPTIONS([LT_INIT], [fast-install disable-fast-install],\n  \t\t   [_LT_ENABLE_FAST_INSTALL])\n  ])\n])# _LT_SET_OPTIONS\n\n\n## --------------------------------- ##\n## Macros to handle LT_INIT options. ##\n## --------------------------------- ##\n\n# _LT_MANGLE_DEFUN(MACRO-NAME, OPTION-NAME)\n# -----------------------------------------\nm4_define([_LT_MANGLE_DEFUN],\n[[_LT_OPTION_DEFUN_]m4_bpatsubst(m4_toupper([$1__$2]), [[^A-Z0-9_]], [_])])\n\n\n# LT_OPTION_DEFINE(MACRO-NAME, OPTION-NAME, CODE)\n# -----------------------------------------------\nm4_define([LT_OPTION_DEFINE],\n[m4_define(_LT_MANGLE_DEFUN([$1], [$2]), [$3])[]dnl\n])# LT_OPTION_DEFINE\n\n\n# dlopen\n# ------\nLT_OPTION_DEFINE([LT_INIT], [dlopen], [enable_dlopen=yes\n])\n\nAU_DEFUN([AC_LIBTOOL_DLOPEN],\n[_LT_SET_OPTION([LT_INIT], [dlopen])\nAC_DIAGNOSE([obsolete],\n[$0: Remove this warning and the call to _LT_SET_OPTION when you\nput the `dlopen' option into LT_INIT's first parameter.])\n])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_DLOPEN], [])\n\n\n# win32-dll\n# ---------\n# Declare package support for building win32 dll's.\nLT_OPTION_DEFINE([LT_INIT], [win32-dll],\n[enable_win32_dll=yes\n\ncase $host in\n*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-cegcc*)\n  AC_CHECK_TOOL(AS, as, false)\n  AC_CHECK_TOOL(DLLTOOL, dlltool, false)\n  AC_CHECK_TOOL(OBJDUMP, objdump, false)\n  ;;\nesac\n\ntest -z \"$AS\" && AS=as\n_LT_DECL([], [AS],      [1], [Assembler program])dnl\n\ntest -z \"$DLLTOOL\" && DLLTOOL=dlltool\n_LT_DECL([], [DLLTOOL], [1], [DLL creation program])dnl\n\ntest -z \"$OBJDUMP\" && OBJDUMP=objdump\n_LT_DECL([], [OBJDUMP], [1], [Object dumper program])dnl\n])# win32-dll\n\nAU_DEFUN([AC_LIBTOOL_WIN32_DLL],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\n_LT_SET_OPTION([LT_INIT], [win32-dll])\nAC_DIAGNOSE([obsolete],\n[$0: Remove this warning and the call to _LT_SET_OPTION when you\nput the `win32-dll' option into LT_INIT's first parameter.])\n])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_WIN32_DLL], [])\n\n\n# _LT_ENABLE_SHARED([DEFAULT])\n# ----------------------------\n# implement the --enable-shared flag, and supports the `shared' and\n# `disable-shared' LT_INIT options.\n# DEFAULT is either `yes' or `no'.  If omitted, it defaults to `yes'.\nm4_define([_LT_ENABLE_SHARED],\n[m4_define([_LT_ENABLE_SHARED_DEFAULT], [m4_if($1, no, no, yes)])dnl\nAC_ARG_ENABLE([shared],\n    [AS_HELP_STRING([--enable-shared@<:@=PKGS@:>@],\n\t[build shared libraries @<:@default=]_LT_ENABLE_SHARED_DEFAULT[@:>@])],\n    [p=${PACKAGE-default}\n    case $enableval in\n    yes) enable_shared=yes ;;\n    no) enable_shared=no ;;\n    *)\n      enable_shared=no\n      # Look at the argument we got.  We use all the common list separators.\n      lt_save_ifs=\"$IFS\"; IFS=\"${IFS}$PATH_SEPARATOR,\"\n      for pkg in $enableval; do\n\tIFS=\"$lt_save_ifs\"\n\tif test \"X$pkg\" = \"X$p\"; then\n\t  enable_shared=yes\n\tfi\n      done\n      IFS=\"$lt_save_ifs\"\n      ;;\n    esac],\n    [enable_shared=]_LT_ENABLE_SHARED_DEFAULT)\n\n    _LT_DECL([build_libtool_libs], [enable_shared], [0],\n\t[Whether or not to build shared libraries])\n])# _LT_ENABLE_SHARED\n\nLT_OPTION_DEFINE([LT_INIT], [shared], [_LT_ENABLE_SHARED([yes])])\nLT_OPTION_DEFINE([LT_INIT], [disable-shared], [_LT_ENABLE_SHARED([no])])\n\n# Old names:\nAC_DEFUN([AC_ENABLE_SHARED],\n[_LT_SET_OPTION([LT_INIT], m4_if([$1], [no], [disable-])[shared])\n])\n\nAC_DEFUN([AC_DISABLE_SHARED],\n[_LT_SET_OPTION([LT_INIT], [disable-shared])\n])\n\nAU_DEFUN([AM_ENABLE_SHARED], [AC_ENABLE_SHARED($@)])\nAU_DEFUN([AM_DISABLE_SHARED], [AC_DISABLE_SHARED($@)])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AM_ENABLE_SHARED], [])\ndnl AC_DEFUN([AM_DISABLE_SHARED], [])\n\n\n\n# _LT_ENABLE_STATIC([DEFAULT])\n# ----------------------------\n# implement the --enable-static flag, and support the `static' and\n# `disable-static' LT_INIT options.\n# DEFAULT is either `yes' or `no'.  If omitted, it defaults to `yes'.\nm4_define([_LT_ENABLE_STATIC],\n[m4_define([_LT_ENABLE_STATIC_DEFAULT], [m4_if($1, no, no, yes)])dnl\nAC_ARG_ENABLE([static],\n    [AS_HELP_STRING([--enable-static@<:@=PKGS@:>@],\n\t[build static libraries @<:@default=]_LT_ENABLE_STATIC_DEFAULT[@:>@])],\n    [p=${PACKAGE-default}\n    case $enableval in\n    yes) enable_static=yes ;;\n    no) enable_static=no ;;\n    *)\n     enable_static=no\n      # Look at the argument we got.  We use all the common list separators.\n      lt_save_ifs=\"$IFS\"; IFS=\"${IFS}$PATH_SEPARATOR,\"\n      for pkg in $enableval; do\n\tIFS=\"$lt_save_ifs\"\n\tif test \"X$pkg\" = \"X$p\"; then\n\t  enable_static=yes\n\tfi\n      done\n      IFS=\"$lt_save_ifs\"\n      ;;\n    esac],\n    [enable_static=]_LT_ENABLE_STATIC_DEFAULT)\n\n    _LT_DECL([build_old_libs], [enable_static], [0],\n\t[Whether or not to build static libraries])\n])# _LT_ENABLE_STATIC\n\nLT_OPTION_DEFINE([LT_INIT], [static], [_LT_ENABLE_STATIC([yes])])\nLT_OPTION_DEFINE([LT_INIT], [disable-static], [_LT_ENABLE_STATIC([no])])\n\n# Old names:\nAC_DEFUN([AC_ENABLE_STATIC],\n[_LT_SET_OPTION([LT_INIT], m4_if([$1], [no], [disable-])[static])\n])\n\nAC_DEFUN([AC_DISABLE_STATIC],\n[_LT_SET_OPTION([LT_INIT], [disable-static])\n])\n\nAU_DEFUN([AM_ENABLE_STATIC], [AC_ENABLE_STATIC($@)])\nAU_DEFUN([AM_DISABLE_STATIC], [AC_DISABLE_STATIC($@)])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AM_ENABLE_STATIC], [])\ndnl AC_DEFUN([AM_DISABLE_STATIC], [])\n\n\n\n# _LT_ENABLE_FAST_INSTALL([DEFAULT])\n# ----------------------------------\n# implement the --enable-fast-install flag, and support the `fast-install'\n# and `disable-fast-install' LT_INIT options.\n# DEFAULT is either `yes' or `no'.  If omitted, it defaults to `yes'.\nm4_define([_LT_ENABLE_FAST_INSTALL],\n[m4_define([_LT_ENABLE_FAST_INSTALL_DEFAULT], [m4_if($1, no, no, yes)])dnl\nAC_ARG_ENABLE([fast-install],\n    [AS_HELP_STRING([--enable-fast-install@<:@=PKGS@:>@],\n    [optimize for fast installation @<:@default=]_LT_ENABLE_FAST_INSTALL_DEFAULT[@:>@])],\n    [p=${PACKAGE-default}\n    case $enableval in\n    yes) enable_fast_install=yes ;;\n    no) enable_fast_install=no ;;\n    *)\n      enable_fast_install=no\n      # Look at the argument we got.  We use all the common list separators.\n      lt_save_ifs=\"$IFS\"; IFS=\"${IFS}$PATH_SEPARATOR,\"\n      for pkg in $enableval; do\n\tIFS=\"$lt_save_ifs\"\n\tif test \"X$pkg\" = \"X$p\"; then\n\t  enable_fast_install=yes\n\tfi\n      done\n      IFS=\"$lt_save_ifs\"\n      ;;\n    esac],\n    [enable_fast_install=]_LT_ENABLE_FAST_INSTALL_DEFAULT)\n\n_LT_DECL([fast_install], [enable_fast_install], [0],\n\t [Whether or not to optimize for fast installation])dnl\n])# _LT_ENABLE_FAST_INSTALL\n\nLT_OPTION_DEFINE([LT_INIT], [fast-install], [_LT_ENABLE_FAST_INSTALL([yes])])\nLT_OPTION_DEFINE([LT_INIT], [disable-fast-install], [_LT_ENABLE_FAST_INSTALL([no])])\n\n# Old names:\nAU_DEFUN([AC_ENABLE_FAST_INSTALL],\n[_LT_SET_OPTION([LT_INIT], m4_if([$1], [no], [disable-])[fast-install])\nAC_DIAGNOSE([obsolete],\n[$0: Remove this warning and the call to _LT_SET_OPTION when you put\nthe `fast-install' option into LT_INIT's first parameter.])\n])\n\nAU_DEFUN([AC_DISABLE_FAST_INSTALL],\n[_LT_SET_OPTION([LT_INIT], [disable-fast-install])\nAC_DIAGNOSE([obsolete],\n[$0: Remove this warning and the call to _LT_SET_OPTION when you put\nthe `disable-fast-install' option into LT_INIT's first parameter.])\n])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_ENABLE_FAST_INSTALL], [])\ndnl AC_DEFUN([AM_DISABLE_FAST_INSTALL], [])\n\n\n# _LT_WITH_PIC([MODE])\n# --------------------\n# implement the --with-pic flag, and support the `pic-only' and `no-pic'\n# LT_INIT options.\n# MODE is either `yes' or `no'.  If omitted, it defaults to `both'.\nm4_define([_LT_WITH_PIC],\n[AC_ARG_WITH([pic],\n    [AS_HELP_STRING([--with-pic@<:@=PKGS@:>@],\n\t[try to use only PIC/non-PIC objects @<:@default=use both@:>@])],\n    [lt_p=${PACKAGE-default}\n    case $withval in\n    yes|no) pic_mode=$withval ;;\n    *)\n      pic_mode=default\n      # Look at the argument we got.  We use all the common list separators.\n      lt_save_ifs=\"$IFS\"; IFS=\"${IFS}$PATH_SEPARATOR,\"\n      for lt_pkg in $withval; do\n\tIFS=\"$lt_save_ifs\"\n\tif test \"X$lt_pkg\" = \"X$lt_p\"; then\n\t  pic_mode=yes\n\tfi\n      done\n      IFS=\"$lt_save_ifs\"\n      ;;\n    esac],\n    [pic_mode=default])\n\ntest -z \"$pic_mode\" && pic_mode=m4_default([$1], [default])\n\n_LT_DECL([], [pic_mode], [0], [What type of objects to build])dnl\n])# _LT_WITH_PIC\n\nLT_OPTION_DEFINE([LT_INIT], [pic-only], [_LT_WITH_PIC([yes])])\nLT_OPTION_DEFINE([LT_INIT], [no-pic], [_LT_WITH_PIC([no])])\n\n# Old name:\nAU_DEFUN([AC_LIBTOOL_PICMODE],\n[_LT_SET_OPTION([LT_INIT], [pic-only])\nAC_DIAGNOSE([obsolete],\n[$0: Remove this warning and the call to _LT_SET_OPTION when you\nput the `pic-only' option into LT_INIT's first parameter.])\n])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_PICMODE], [])\n\n## ----------------- ##\n## LTDL_INIT Options ##\n## ----------------- ##\n\nm4_define([_LTDL_MODE], [])\nLT_OPTION_DEFINE([LTDL_INIT], [nonrecursive],\n\t\t [m4_define([_LTDL_MODE], [nonrecursive])])\nLT_OPTION_DEFINE([LTDL_INIT], [recursive],\n\t\t [m4_define([_LTDL_MODE], [recursive])])\nLT_OPTION_DEFINE([LTDL_INIT], [subproject],\n\t\t [m4_define([_LTDL_MODE], [subproject])])\n\nm4_define([_LTDL_TYPE], [])\nLT_OPTION_DEFINE([LTDL_INIT], [installable],\n\t\t [m4_define([_LTDL_TYPE], [installable])])\nLT_OPTION_DEFINE([LTDL_INIT], [convenience],\n\t\t [m4_define([_LTDL_TYPE], [convenience])])\n",
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/thirdparty/EVPath/EVPath/cm.c": "#include \"config.h\"\n#if !NO_DYNAMIC_LINKING\n#include \"dlloader.h\"\n#endif\n#include <stdio.h>\n#include <string.h>\n#undef NDEBUG\n#include <assert.h>\n#include <ctype.h>\n#include <math.h>\n#ifdef HAVE_NETDB_H\n#include <netdb.h>\n#endif\n#ifdef HAVE_UNISTD_H\n#include <unistd.h>\n#endif\n#include <stdlib.h>\n#include <limits.h>\n#ifdef HAVE_WINDOWS_H\n#include <winsock.h>\n#define __ANSI_CPP__\n#else\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#endif\n#include <sys/time.h>\n#include <ffs.h>\n#include <atl.h>\n#include \"evpath.h\"\n#include \"chr_time.h\"\n#include \"cm_internal.h\"\n#include \"cm_transport.h\"\n\n#if NO_DYNAMIC_LINKING\nstruct select_data;\nextern void libcmselect_LTX_add_select(CMtrans_services svc, struct select_data *sdp, int fd, \n\t\t\t\t       select_list_func func, void *arg1, void *arg2);\nextern void libcmselect_LTX_write_select(CMtrans_services svc, struct select_data *sdp, int fd, \n\t\t\t     select_list_func func, void *arg1, void *arg2);\nextern periodic_task_handle libcmselect_LTX_add_periodic(CMtrans_services svc, struct select_data *sdp, int interval_sec, int interval_usec, select_list_func func, void *arg1, void *arg2);\nextern periodic_task_handle libcmselect_LTX_add_delayed_task(CMtrans_services svc, \nstruct select_data *sdp, int delay_sec, int delay_usec, select_list_func func,void *arg1, \nvoid *arg2);\nextern void libcmselect_LTX_remove_periodic(CMtrans_services svc, struct select_data *sdp, periodic_task_handle handle);\nextern void libcmselect_LTX_remove_select(CMtrans_services svc, struct select_data *sdp, int fd);\nextern void libcmselect_LTX_wake_function(CMtrans_services svc, struct select_data *sdp);\nextern void libcmselect_LTX_blocking_function(CMtrans_services svc, void *client_data);\nextern void libcmselect_LTX_polling_function(CMtrans_services svc,void *client_data);\nextern void libcmselect_LTX_select_initialize(CMtrans_services svc,CManager cm,void *client_data);\nextern void libcmselect_LTX_select_shutdown(CMtrans_services svc,CManager cm,void *client_data);\nextern void libcmselect_LTX_select_free(CMtrans_services svc,CManager cm,void *client_data);\nextern void libcmselect_LTX_select_stop(CMtrans_services svc,void *client_data);\n#endif\n\n\nstatic void CMinitialize (CManager cm);\n\nstatic atom_t CM_TRANSPORT = -1;\nstatic atom_t CM_NETWORK_POSTFIX = -1;\nstatic atom_t CM_CONN_BLOCKING = -1;\natom_t CM_REBWM_RLEN = -1;\natom_t CM_REBWM_REPT = -1;\natom_t CM_BW_MEASURE_INTERVAL = -1;\natom_t CM_BW_MEASURE_TASK = -1;\natom_t CM_BW_MEASURED_VALUE = -1;\natom_t CM_BW_MEASURED_COF = -1;\natom_t CM_BW_MEASURE_SIZE = -1;\natom_t CM_BW_MEASURE_SIZEINC = -1;\nstatic atom_t CM_EVENT_SIZE = -1;\nstatic atom_t CM_INCOMING_CONNECTION = -1;\nstatic atom_t CM_TRANSPORT_RELIABLE = -1;\nstatic atom_t CM_IP_INTERFACE = -1;\n\nvoid wait_for_pending_write(CMConnection conn);\nstatic void cm_wake_any_pending_write(CMConnection conn);\nstatic void transport_wake_any_pending_write(CMConnection conn);\nstatic void cm_set_pending_write(CMConnection conn);\nstatic int drop_CM_lock(CManager cm, const char *file, int line);\nstatic int acquire_CM_lock(CManager cm, const char *file, int line);\nstatic int return_CM_lock_status(CManager cm, const char *file, int line);\nstatic void add_buffer_to_pending_queue(CManager cm, CMConnection conn, CMbuffer buf, long length);\nstatic void cond_wait_CM_lock(CManager cm, void *cond, char *file, int line);\n\nstruct CMtrans_services_s CMstatic_trans_svcs = {INT_CMmalloc, INT_CMrealloc, INT_CMfree, \n\t\t\t\t\t\t INT_CM_fd_add_select, \n\t\t\t\t\t\t CM_fd_write_select, \n\t\t\t\t\t\t CM_fd_remove_select, \n\t\t\t\t\t\t CMtransport_trace,\n\t\t\t\t\t\t CMtransport_verbose,\n\t\t\t\t\t\t CMConnection_create,\n\t\t\t\t\t\t INT_CMadd_shutdown_task,\n\t\t\t\t\t\t INT_CMadd_periodic_task,\n\t\t\t\t\t\t INT_CMremove_periodic,\n\t\t\t\t\t\t INT_CMadd_poll,\n\t\t\t\t\t\t cm_get_data_buf,\n\t\t\t\t\t\t cm_return_data_buf,\n\t\t\t\t\t\t internal_connection_close,\n\t\t\t\t\t\t cm_create_transport_buffer,\n\t\t\t\t\t\t cm_create_transport_and_link_buffer,\n\t\t\t\t\t\t INT_CMget_transport_data,\n\t\t\t\t\t\t cm_set_pending_write,\n\t\t\t\t\t\t transport_wake_any_pending_write,\n\t\t\t\t\t\t drop_CM_lock,\n\t\t\t\t\t\t acquire_CM_lock,\n\t\t\t\t\t\t return_CM_lock_status,\n\t\t\t\t\t\t cond_wait_CM_lock,\n\t\t\t\t\t\t add_buffer_to_pending_queue,\n\t\t\t\t\t\t INT_CMConnection_dereference,\n\t\t\t\t\t\t INT_CMConnection_add_reference,\n\t\t\t\t\t\t INT_CMConnection_failed,\n\t\t\t\t\t\t CMwake_server_thread,\n\t\t\t\t\t\t INT_CMCondition_signal\n};\nstatic void INT_CMControlList_close(CMControlList cl, CManager cm);\nstatic int CMcontrol_list_poll(CMControlList cl);\nint CMdo_non_CM_handler(CMConnection conn, int header,\n\t\t\t      char *buffer, int length);\nvoid CMdo_performance_response(CMConnection conn, long length,\n\t\t\t\t\t    int func, int byte_swap,\n\t\t\t\t\t    char *buffer);\n\nvoid CMhttp_handler(CMConnection conn, char* buffer, int length);\nstatic void CM_init_select(CMControlList cl, CManager cm);\n\nstatic void cond_wait_CM_lock(CManager cm, void *vcond, char *file, int line)\n{\n    pthread_cond_t *cond = vcond;\n    CMtrace_out(cm, CMLowLevelVerbose, \"CManager Condition wait at \\\"%s\\\" line %d\\n\",\n\t\tfile, line);\n    cm->locked--;\n    pthread_cond_wait(cond, &cm->exchange_lock);\n    CMtrace_out(cm, CMLowLevelVerbose, \"CManager Condition wake at \\\"%s\\\" line %d\\n\",\n\t\tfile, line);\n    cm->locked++;\n}\n\nstatic int drop_CM_lock(CManager cm, const char *file, int line)\n{\n    int ret = cm->locked;\n    IntCManager_unlock(cm, file, line);\n    return ret;\n}\n\nstatic int acquire_CM_lock(CManager cm, const char *file, int line)\n{\n    IntCManager_lock(cm, file, line);\n    return cm->locked;\n}\n\nstatic int return_CM_lock_status(CManager cm, const char *file, int line)\n{\n    (void) file;\n    (void) line;\n    return cm->locked;\n}\n\nstatic void\nCMpoll_forever(CManager cm)\n{\n    CMControlList cl = cm->control_list;\n    int should_exit = 0;\n    CManager_lock(cm);\n    if (!cm->control_list->select_initialized) {\n\tCM_init_select(cm->control_list, cm);\n    }\n    if (cl->has_thread > 0 && cl->server_thread == thr_thread_self()) {\n\t/* \n\t * if we're actually the server thread here, do a thread exit when\n\t * we're done\n\t */\n\tshould_exit++;\n    }\n    while(!cl->closed) {\n\tCMtrace_out(cm, CMLowLevelVerbose, \"CM Poll Forever - thread %lx doing wait\\n\", (long)thr_thread_self());\n\tif (CMcontrol_list_wait(cl) == -1) {\n\t    CMtrace_out(cm, CMLowLevelVerbose, \"CM Poll Forever - doing close and exit\\n\");\n\t    /* \n\t     * error.  others will free the CM too, add to the ref count \n\t     * here so we can close.\n\t     */\n\t    cm->reference_count++;\n\t    CManager_unlock(cm);\n\t    CManager_close(cm);\n\t    exit(1);\n\t}\n    }\n    CMtrace_out(cm, CMLowLevelVerbose, \"CM Poll Forever - doing close\\n\");\n    CManager_unlock(cm);\n    CManager_close(cm);\n    if (should_exit != 0) thr_thread_exit(NULL);\n}\n\nstatic void CManager_free(CManager cm);\n\nstatic void\nserver_thread_func(CManager cm)\n{\n    CMpoll_forever(cm);\n    CManager_free(cm);\n}\n\nextern void\nINT_CMrun_network(CManager cm)\n{\n    if (!cm->control_list->select_initialized) {\n\tCM_init_select(cm->control_list, cm);\n    }\n    if ((cm->control_list->server_thread != 0) &&\n\t(cm->control_list->server_thread != thr_thread_self())) {\n\t/* What?  We're polling, but we're not the server thread? */\n\tfprintf(stderr, \"Warning:  CMrun_network() called when another thread may already be handling the network\\n\");\n\tfprintf(stderr, \"          This situation may result in unexpected I/O blocking.\\n\");\n\tfprintf(stderr, \"          Server thread set to %lx.\\n\", (long) thr_thread_self());\n    }\n    cm->control_list->server_thread = thr_thread_self();\n    cm->control_list->has_thread = 1;\n    CManager_unlock(cm);\n    CMpoll_forever(cm);\n}\n\nstatic int\nCM_test_thread_func()\n{\n    return 1;\n}\n\nstatic thr_thread_t \nthr_fork(func, arg)\nvoid*(*func)(void*);\nvoid *arg;\n{\n    pthread_t new_thread = 0;\n    int err = pthread_create(&new_thread, NULL, (void*(*)(void*))func, arg);\n    if (err != 0) {\n\treturn (thr_thread_t) NULL;\n    } else {\n\treturn (thr_thread_t) new_thread;\n    }\n}\n\nint\nINT_CMfork_comm_thread(CManager cm)\n{\n    /* if we're on a kernel-level-threads package, for the thread and \n       return 1, else return 0; */\n    if (!cm->control_list->select_initialized) {\n\tCM_init_select(cm->control_list, cm);\n    }\n    if (cm->control_list->has_thread == 0) {\n\tif (cm->control_list->network_blocking_function.func) {\n\t    thr_thread_t server_thread = \n\t\tthr_fork((void*(*)(void*))server_thread_func, \n\t\t\t (void*)cm);\n\t    CMtrace_out(cm, CMLowLevelVerbose,\n\t\t\t\"CM - Forked comm thread %lx\\n\", (long)server_thread);\n\t    if (server_thread ==  (thr_thread_t) NULL) {\n\t\treturn 0;\n\t    }\n\t    cm->control_list->server_thread = server_thread;\n\t    cm->control_list->has_thread = 1;\n\t    cm->reference_count++;\n\t    CMtrace_out(cm, CMFreeVerbose, \"Forked - CManager %lx ref count now %d\\n\", \n\t\t\t(long) cm, cm->reference_count);\n\t    cm->control_list->cl_reference_count++;\n\t    cm->control_list->free_reference_count++;\n\t} else {\n\t    /*\n\t     *  Can't start a server thread yet, but lets see \n\t     *  if we can fork anything successfully.\n\t     */\n\t    thr_thread_t test_thread = \n\t\tthr_fork((void*(*)(void*))CM_test_thread_func, \n\t\t\t (void*)cm);\n\t    if (test_thread ==  (thr_thread_t) NULL) {\n\t\t/* No.  Say we can't. */\n\t\tCMtrace_out(cm, CMLowLevelVerbose,\n\t\t\t    \"CM - Test fork failed, no comm thread\\n\");\n\t\treturn 0;\n\t    }\n\t    /* OK, we'll fork it later. */\n\t    CMtrace_out(cm, CMLowLevelVerbose,\n\t\t\t\"CM - Will fork comm thread later\\n\");\n\t    cm->control_list->has_thread = -1; /* should fork one */\n\t}\n    }\n    return 1;\n}\n\nextern\nvoid\nCMControlList_set_blocking_func(CMControlList cl, CManager cm, \n\t\t\t\tCMPollFunc bfunc, CMPollFunc pfunc,\n\t\t\t\tvoid *client_data)\n{\n}\n\nextern void\nINT_CMpoll_network(CManager cm)\n{\n    CMControlList cl = cm->control_list;\n    CMtrace_out(cm, CMLowLevelVerbose, \"CM Poll Network\\n\");\n    cl->network_polling_function.func((void*)&CMstatic_trans_svcs,\n\t\t\t\t      cl->network_polling_function.client_data);\n    CMcontrol_list_poll(cl);\n}\n\nstatic void\nadd_contact_list(CManager cm, attr_list attrs)\n{\n    int list_size = 0;\n    if (cm->contact_lists == NULL) {\n\tcm->contact_lists = INT_CMmalloc(sizeof(attr_list) *2);\n\tlist_size = 0;\n    } else {\n\twhile(cm->contact_lists[list_size] != NULL) list_size++;\n\tcm->contact_lists = INT_CMrealloc(cm->contact_lists, \n\t\t\t\t      sizeof(attr_list) * (list_size + 2));\n    }\n    cm->contact_lists[list_size] = attrs;\n    cm->contact_lists[list_size+1] = NULL;\n}\n\nvoid\nINT_CM_insert_contact_info(CManager cm, attr_list attrs)\n{\n    attr_merge_lists(cm->contact_lists[0], attrs);\n}\n\nattr_list\nINT_CMget_contact_list(CManager cm)\n{\n    if (cm->contact_lists == NULL) return NULL;\n    CMadd_ref_attr_list(cm, cm->contact_lists[0]);\n    return (cm->contact_lists[0]);\n}\n\nextern attr_list\nINT_CMderef_and_copy_list(CManager cm, attr_list attrs)\n{\n  // done inside the CM lock, so a safe way to convert a shared list to an owned list\n  attr_list ret = attr_copy_list(attrs);\n  free_attr_list(attrs);\n  return ret;\n}\n\nextern attr_list\nINT_CMget_specific_contact_list(CManager cm, attr_list attrs)\n{\n    char *chosen_transport = NULL, *chosen_net = NULL, *chosen_interface = NULL;\n    char *freeable_transport = NULL;\n    int i = 0;\n\n    if (attrs != NULL) {\n\tget_string_attr(attrs, CM_TRANSPORT, &chosen_transport);\n    }\n    if (chosen_transport && (strchr(chosen_transport, ':') != NULL)) {\n\tfreeable_transport = strdup(chosen_transport);\n\t*(strchr(freeable_transport, ':')) = 0;\n\tchosen_transport = freeable_transport;\n    }\n    if (attrs != NULL) {\n\tget_string_attr(attrs, CM_NETWORK_POSTFIX, &chosen_net);\n    }\n    if (attrs != NULL) {\n\tget_string_attr(attrs, CM_IP_INTERFACE, &chosen_interface);\n    }\n    if ((chosen_transport == NULL) && (chosen_net == NULL) && (chosen_interface == NULL)) {\n\tCMadd_ref_attr_list(cm, cm->contact_lists[0]);\n\treturn cm->contact_lists[0];\n    }\n    /* specific transport or interface chosen */\n    i = 0;\n    while (cm->contact_lists && (cm->contact_lists[i] != NULL)) {\n\tchar *this_transport = NULL, *this_postfix = NULL, *this_interface = NULL;\n\n\tget_string_attr(cm->contact_lists[i], CM_TRANSPORT, &this_transport);\n\tget_string_attr(cm->contact_lists[i], CM_NETWORK_POSTFIX, &this_postfix);\n\tget_string_attr(cm->contact_lists[i], CM_IP_INTERFACE, &this_interface);\n\tif (this_transport == NULL) {\n\t    this_transport = \"sockets\";\n\t}\n\tif (chosen_transport == NULL) {\n\t    chosen_transport = \"sockets\";\n\t}\n\tif (strcmp(this_transport, chosen_transport) == 0) {\n\t    if ((chosen_net != NULL) || (this_postfix != NULL)) {\n\t\t/* one is not null */\n\t\tif (chosen_net && this_postfix) {\n\t\t    if (strcmp(chosen_net, this_postfix) != 0) {\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t    }\n\t\t} else {\n\t\t    i++;\n\t\t    continue;\n\t\t}\n\t    }\n\t    if ((chosen_interface != NULL) || (this_interface != NULL)) {\n\t\t/* one is not null */\n\t\tif (chosen_interface && this_interface) {\n\t\t    if (strcmp(chosen_interface, this_interface) != 0) {\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t    }\n\t\t} else {\n\t\t    i++;\n\t\t    continue;\n\t\t}\n\t    }\n\t    CMadd_ref_attr_list(cm, cm->contact_lists[i]);\n\t    if (freeable_transport) free(freeable_transport);\n\t    return cm->contact_lists[i];\n\t}\n\ti++;\n    }\n    /* chosen transport not listened? */\n    CMinternal_listen(cm, attrs, /* try others*/ 0);\n    /* try again */\n    i = 0;\n    while (cm->contact_lists && (cm->contact_lists[i] != NULL)) {\n\tchar *this_transport = NULL, *this_postfix = NULL, *this_interface = NULL;\n\n\tget_string_attr(cm->contact_lists[i], CM_TRANSPORT, &this_transport);\n\tget_string_attr(cm->contact_lists[i], CM_NETWORK_POSTFIX, \n\t\t\t&this_postfix);\n\tget_string_attr(cm->contact_lists[i], CM_IP_INTERFACE, &this_interface);\n\tif (this_transport == NULL) {\n\t    this_transport = \"sockets\";\n\t}\n\tif (chosen_transport == NULL) {\n\t    chosen_transport = \"sockets\";\n\t}\n\tif (strcmp(this_transport, chosen_transport) == 0) {\n\t    if ((chosen_net != NULL) || (this_postfix != NULL)) {\n\t\t/* one is not null */\n\t\tif (chosen_net && this_postfix) {\n\t\t    if (strcmp(chosen_net, this_postfix) != 0) {\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t    }\n\t\t} else {\n\t\t    i++;\n\t\t    continue;\n\t\t}\n\t    }\n\t    if ((chosen_interface != NULL) || (this_interface != NULL)) {\n\t\t/* one is not null */\n\t\tif (chosen_interface && this_interface) {\n\t\t    if (strcmp(chosen_interface, this_interface) != 0) {\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t    }\n\t\t} else {\n\t\t    i++;\n\t\t    continue;\n\t\t}\n\t    }\n\t    CMadd_ref_attr_list(cm, cm->contact_lists[i]);\n\t    if (freeable_transport) free(freeable_transport);\n\t    return cm->contact_lists[i];\n\t}\n\ti++;\n    }\n    /* maybe it failed to load */\n    if (freeable_transport) free(freeable_transport);\n    return NULL;\n}\n\nint\nINT_CMlisten(CManager cm)\n{\n  return INT_CMlisten_specific (cm, NULL);\n}\n\nstatic attr_list\nsplit_transport_attributes(attr_list list)\n{\n    char *chosen_transport = NULL;\n    if (list) {\n\tget_string_attr(list, CM_TRANSPORT, &chosen_transport);\n    }\n    if (chosen_transport && (strchr(chosen_transport, ':') != NULL)) {\n\tattr_list new_list = attr_copy_list(list);\n\tatom_t atom;\n\tchar *old_transport, *params;\n\tchar *next_param;\n\tget_string_attr(new_list, CM_TRANSPORT, &old_transport);\n\tparams = strchr(old_transport, ':');\n\t*(params++) = 0;\n\tset_string_attr(new_list, CM_TRANSPORT, strdup(old_transport));\n\twhile (params != NULL) {\n\t    char *equal, *end;\n\t    next_param = strchr(params, ',');\n\t    if (next_param) *(next_param++) = 0;  /* kill comma */\n\t    if ((equal = strchr(params, '=')) != NULL) {\n\t\t/* there's an equal sign */\n\t\t*(equal++) = 0;\n\t\t/* we'll deal with this later */\n\t    }\n\t    while (isspace(*params)) params++;  /* skip white */\n\t    end = params + strlen(params) - 1;\n\t    while(end > params && isspace(*end)) end--;\n\t    // Write new null terminator\n\t    *(end+1) = 0;\n\t    atom = attr_atom_from_string(params);\n\t    if (equal == NULL) {\n\t\tset_int_attr(new_list, atom, 1);\n\t    } else {\n\t\tchar *tail;\n\t\tlong value;\n\t\twhile (isspace(*equal)) equal++;  /* skip white */\n\t\tend = equal + strlen(equal) - 1;\n\t\twhile(end > equal && isspace(*end)) end--;\n\t\t// Write new null terminator\n\t\t*(end+1) = 0;\n\t\tvalue = strtol(equal, &tail, 10);\n\t\tif (strlen(tail) == 0) {\n\t\t    /* valid integer! */\n\t\t    if ((value < INT_MAX) && (value > INT_MIN)) {\n\t\t\tset_int_attr(new_list, atom, (int)value);\n\t\t    } else {\n\t\t\tset_long_attr(new_list, atom, value);\n\t\t    }\n\t\t} else {\n\t\t    /* string... */\n\t\t    set_string_attr(new_list, atom, strdup(equal));\n\t\t}\n\t    }\n\t    params = next_param;\n\t}\n\tfree(old_transport);  /* not free'd by replace */\n\tfree_attr_list(list);\n\tlist = new_list;\n    }\n    return list;\n}\nextern int\nCMinternal_listen(CManager cm, attr_list listen_info, int try_others)\n{\n    int success = 0;\n    transport_entry *trans_list;\n    char *chosen_transport = NULL;\n    char *interface = NULL;\n\n    if (listen_info) {\n        listen_info = split_transport_attributes(attr_copy_list(listen_info));\n\tget_string_attr(listen_info, CM_TRANSPORT, &chosen_transport);\n\tget_string_attr(listen_info, CM_IP_INTERFACE, &interface);\n    }\n    if (chosen_transport != NULL) {\n        CMtrace_out(cm, CMConnectionVerbose,\n\t\t    \"CM - Listening only on transport \\\"%s\\\"\\n\",\n\t\t    chosen_transport);\n\tif (load_transport(cm, chosen_transport, 1) == 0) {\n\t    CMtrace_out(cm, CMConnectionVerbose,\n\t\t\t\"Failed to load transport \\\"%s\\\".  Revert to default.\\n\",\n\t\t\t\t\tchosen_transport);\n\t    CMtrace_out(cm, CMTransportVerbose,\n\t\t\t\"Failed to load transport \\\"%s\\\".  Revert to default.\\n\",\n\t\t\tchosen_transport);\n\t    if (!try_others) {\n\t\tif (listen_info) free_attr_list(listen_info);\n\t\treturn success;\n\t    }\n\t    chosen_transport = NULL;\n\t}\n    }\n    trans_list = cm->transports;\n    while ((trans_list != NULL) && (*trans_list != NULL)) {\n\tattr_list attrs;\n\tif ((chosen_transport == NULL) || \n\t    (strcmp((*trans_list)->trans_name, chosen_transport) == 0)) {\n\t    attrs = (*trans_list)->listen(cm, &CMstatic_trans_svcs,\n\t\t\t\t\t  *trans_list,\n\t\t\t\t\t  listen_info);\n\t    if (interface) {\n\t\tadd_string_attr(attrs, CM_IP_INTERFACE, strdup(interface));\n\t    }\n\t    add_contact_list(cm, attrs);\n\t    if (CMtrace_on(cm, CMConnectionVerbose)) {\n\t\tfprintf(cm->CMTrace_file, \"Adding contact list -> \");\n\t\tfdump_attr_list(cm->CMTrace_file, attrs);\n\t    }\n\t    if (attrs != NULL) {\n\t\tsuccess++;\n\t    }\n\t}\n\ttrans_list++;\n    }\n    if (listen_info) free_attr_list(listen_info);\n    return success;\n}\n\nint\nINT_CMlisten_specific(CManager cm, attr_list listen_info)\n{\n    int success = 0;\n    if (!cm->initialized) CMinitialize(cm);\n    success = CMinternal_listen(cm, listen_info, /* try others*/ 1);\n    return (success != 0);\n}\n\n#ifdef CM_DEFAULT_TRANSPORT\nstatic char *CMglobal_default_transport = CM_DEFAULT_TRANSPORT;\n#else \nstatic char *CMglobal_default_transport = NULL;\n#endif\n\nstatic char *CMglobal_alternate_transports[] = {NULL};\n\nstatic void \nCMinitialize(CManager cm)\n{\n    char **transport_names = CMglobal_alternate_transports;\n    char *def = getenv(\"CMDefaultTransport\");\n    if (def != NULL) CMglobal_default_transport = def;\n    if (CMglobal_default_transport) {\n\tif (load_transport(cm, CMglobal_default_transport, 0) == 0) {\n\t    fprintf(stderr, \"Failed to initialize default transport.  Exiting.\\n\");\n\t    exit(1);\n\t}\n    }\n    while ((transport_names != NULL) && (transport_names[0] != NULL)) {\n\tload_transport(cm, transport_names[0], 1);\n\ttransport_names++;\n    }\n    cm->initialized++;\n}\n\nstatic int\nCMcontrol_list_poll(CMControlList cl)\n{\n    func_entry *poll_list = cl->polling_function_list;\n    while ((poll_list != NULL) && (poll_list->func != NULL)){\n\tint consistency_number = cl->cl_consistency_number;\n\n\tCManager_unlock(poll_list->cm);\n\tpoll_list->func(poll_list->cm, poll_list->client_data);\n\tCManager_lock(poll_list->cm);\n\t/* do function */\n\tif (consistency_number != cl->cl_consistency_number) {\n\t    return 1;\n\t}\n\tpoll_list++;\n    }\n    return 1;\n}\n\nstatic \nvoid\nCMControlList_add_poll(CMControlList cl, CManager cm, CMPollFunc func,\n\t\t       void *client_data)\n{\n    func_entry *poll_list;\n    int count = 0;\n    poll_list = cl->polling_function_list;\n    while ((poll_list != NULL) && (poll_list[count].func != NULL)) {\n\tcount++;\n    }\n    /*\n     *  We're going to navigate the poll list without locks.  This is\n     *  somewhat dangerous, but safe enough if we only have a couple of\n     *  functions so we never realloc.  If we ever hit the realloc() below,\n     *  there's a chance of some bad data references.  At this point, using\n     *  that many poll functions seems unlikely, but later, maybe not...\n     */\n    if (poll_list != NULL) {\n\tif (cl->pflist_size < count - 2) {\n\t    cl->pflist_size *= 2;\n\t    poll_list = INT_CMrealloc(poll_list, sizeof(func_entry) * (cl->pflist_size));\n\t}\n    } else {\n\tpoll_list = INT_CMmalloc(sizeof(func_entry)*10);\n\tcl->pflist_size = 10;\n    }\n    poll_list[count].cm = cm;\n    poll_list[count].func = func;\n    poll_list[count].client_data = client_data;\n    poll_list[count+1].func = NULL;\n    cl->polling_function_list = poll_list;\n}\n    \nextern\nvoid\nINT_CMadd_poll(CManager cm, CMPollFunc func, void *client_data)\n{\n    CMControlList_add_poll(cm->control_list, cm, func, client_data);\n}\n\nextern\nint\nCMcontrol_list_wait(CMControlList cl)\n{\n    /* associated CM should be locked */\n    if ((cl->server_thread != 0) &&\n\t(cl->server_thread != thr_thread_self())) {\n\t/* What?  We're polling, but we're not the server thread? */\n\tfprintf(stderr, \"Warning:  Multiple threads calling CMnetwork_wait\\n\");\n\tfprintf(stderr, \"          This situation may result in unexpected I/O blocking.\\n\");\n\tfprintf(stderr, \"          Server thread set to %lx.\\n\", (long) thr_thread_self());\n    }\n    cl->server_thread = thr_thread_self();\n    if (cl->network_blocking_function.func != NULL) {\n\tcl->network_blocking_function.func((void*)&CMstatic_trans_svcs,\n\t\t\t\t\t   cl->network_blocking_function.client_data);\n    }\n    CMcontrol_list_poll(cl);\n    return 1;\n}\n\nstatic CMControlList CMControlList_create();\n\nstatic thr_mutex_t atl_mutex;\nstatic int atl_mutex_initialized = 0;\nstatic void process_pending_queue(CManager cm, void *junk);\n\nextern\nCManager\nINT_CManager_create()\n{\n    return INT_CManager_create_control(NULL);\n}\n\nextern\nCManager\nINT_CManager_create_control(char *control_module)\n{\n    CManager cm = (CManager) INT_CMmalloc(sizeof(CManager_s));\n    int atom_init = 0;\n\n    if (!atl_mutex_initialized) {\n\tatl_mutex_initialized++;\n\tthr_mutex_init(atl_mutex);\n\tatl_install_mutex_funcs((atl_lock_func)pthread_mutex_lock, (atl_lock_func)pthread_mutex_unlock, \n\t\t\t\t&atl_mutex);\n    }\n    if (cm == NULL)\n\treturn NULL;\n    memset(cm, 0, sizeof(CManager_s));\n\n    if (atom_init == 0) {\n\tCM_TRANSPORT = attr_atom_from_string(\"CM_TRANSPORT\");\n\tCM_NETWORK_POSTFIX = attr_atom_from_string(\"CM_NETWORK_POSTFIX\");\n\tCM_CONN_BLOCKING = attr_atom_from_string(\"CM_CONN_BLOCKING\");\n\tCM_REBWM_RLEN = attr_atom_from_string(\"CM_REG_BW_RUN_LEN\");\n\tCM_REBWM_REPT = attr_atom_from_string(\"CM_REG_BW_REPEAT_CNT\");\n\tCM_BW_MEASURE_INTERVAL = attr_atom_from_string(\"CM_BW_MEASURE_INTERVAL\");\n\tCM_BW_MEASURE_TASK = attr_atom_from_string(\"CM_BW_MEASURE_TASK\");\n\tCM_BW_MEASURED_VALUE = attr_atom_from_string(\"CM_BW_MEASURED_VALUE\");\n\tCM_BW_MEASURED_COF = attr_atom_from_string(\"CM_BW_MEASURED_COF\");\n\tCM_BW_MEASURE_SIZE = attr_atom_from_string(\"CM_BW_MEASURE_SIZE\");\n\tCM_BW_MEASURE_SIZEINC = attr_atom_from_string(\"CM_BW_MEASURE_SIZEINC\");\n\tCM_EVENT_SIZE = attr_atom_from_string(\"CM_EVENT_SIZE\");\n\tCM_INCOMING_CONNECTION = attr_atom_from_string(\"CM_INCOMING_CONNECTION\");\n\tCM_TRANSPORT_RELIABLE = attr_atom_from_string(\"CM_TRANSPORT_RELIABLE\");\n\tCM_IP_INTERFACE = attr_atom_from_string(\"IP_INTERFACE\");\n    }\n\n    /* initialize data structs */\n    cm->transports = NULL;\n    cm->initialized = 0;\n    cm->reference_count = 1;\n\n    char *tmp;\n    if ((tmp = getenv(\"CMControlModule\"))) {\n\tcontrol_module = tmp;\n    }\n\n    if (control_module != NULL) {\n\tchar *tmp = strdup(control_module);\n\tchar *c;\n\tfor (c = tmp; *c; ++c) *c = tolower(*c);\n#ifdef HAVE_SYS_EPOLL_H\n\tif (strcmp(tmp, \"epoll\") == 0) {\n\t    cm->control_module_choice = \"epoll\";\n\t} else\n#endif\n\tif (strcmp(tmp, \"select\") == 0) {\n\t    cm->control_module_choice = \"select\";\n\t} else {\n\t    fprintf(stderr, \"Warning:  Specified CM/EVPath control module \\\"%s\\\" unknown or not built.\\n\", control_module);\n\t    /* force to default */\n\t    control_module = NULL;\n\t}\n\tfree(tmp);\n    }\t\n    if (control_module == NULL) {\n#ifdef HAVE_SYS_EPOLL_H\n\tcm->control_module_choice = \"epoll\";\n#else\n\tcm->control_module_choice = \"select\";\n#endif\n    }\n    cm->control_list = CMControlList_create();\n    thr_mutex_init(cm->exchange_lock);\n\n    cm->locked = 0;\n    cm->closed = 0;\n    cm->abort_read_ahead = 0;\n    cm->CMTrace_file = NULL;\n    CMtrace_init(cm, EVerbose);\n    CMinit_local_formats(cm);\n    thr_mutex_init(cm->context_lock);\n\n    cm->in_format_count = 0;\n    cm->in_formats = INT_CMmalloc(1);\n\n    cm->reg_format_count = 0;\n    cm->reg_formats = INT_CMmalloc(1);\n\n    cm->pending_request_max = 1;\n    cm->pbio_requests = INT_CMmalloc(sizeof(struct _pending_format_requests));\n    cm->pbio_requests[0].server_id = NULL;\n    cm->pbio_requests[0].id_length = 0;\n    cm->pbio_requests[0].condition = 0;\n    cm->pbio_requests[0].top_request = 0;\n\n    cm->connection_count = 0;\n    cm->connections = INT_CMmalloc(1);\n    cm->reg_user_format_count = 0;\n    cm->reg_user_formats = INT_CMmalloc(1);\n    cm->cm_buffer_list = NULL;\n    cm->pending_data_queue = NULL;\n\n    cm->contact_lists = NULL;\n    cm->shutdown_functions = NULL;\n    cm->perf_upcall = NULL;\n    INT_CMadd_poll(cm, process_pending_queue, NULL);\n#ifdef EV_INTERNAL_H\n    CManager_lock(cm);\n    EVPinit(cm);\n    CManager_unlock(cm);\n#endif\n    return cm;\n}\n\nstatic void CMControlList_free(CManager cm, CMControlList cl);\nstatic void remove_conn_from_CM(CManager cm, CMConnection conn);\n\nstatic void\nCManager_free(CManager cm)\n{\n    int i;\n    CMbuffer list = NULL;\n\n    INT_CMfree(cm->transports);\n    cm->transports = NULL;\n/*    free_FFSContext(cm->FFScontext);*/\n    cm->FFScontext = NULL;\n    INT_CMfree(cm->in_formats);\n\n    for (i=0 ; i < cm->reg_format_count; i++) {\n\tINT_CMfree(cm->reg_formats[i]->format_name);\n\tINT_CMfree(cm->reg_formats[i]);\n    }\n    INT_CMfree(cm->reg_formats);\n\n    /*\n     *  Applications are expected to free the user contexts that \n     *  they request.  If they do this, there will be no user formats to\n     *  free at this point.  (Doing so might result in double freeing.)\n     */\n    INT_CMfree(cm->reg_user_formats);\n\n    INT_CMfree(cm->pbio_requests);\n\n    INT_CMfree(cm->connections);\n\n    thr_mutex_free(cm->exchange_lock);\n\n    thr_mutex_free(cm->context_lock);\n\n    if (cm->contact_lists != NULL) {\n\ti = 0;\n\twhile(cm->contact_lists[i] != NULL) {\n\t    INT_CMfree_attr_list(cm, cm->contact_lists[i]);\n\t    i++;\n\t}\n\tINT_CMfree(cm->contact_lists);\n    }\n    list = cm->cm_buffer_list;\n    i=0;\n    while (list != NULL) {\n\tCMbuffer next = list->next;\n\tCMtrace_out(cm, CMBufferVerbose, \"Final buffer disposition buf %d, %p, size %ld, ref_count %d\\n\", i++, list, list->size, list->ref_count);\n\tif (list->return_callback) {\n\t    (list->return_callback)(list->return_callback_data);\n\t} else {\n\t    INT_CMfree(list->buffer);\n\t}\n\tINT_CMfree(list);\n\tlist = next;\n    }\n    cm->cm_buffer_list = NULL;\n    if (cm->shutdown_functions) INT_CMfree(cm->shutdown_functions);\n    INT_CMfree(cm->avail);\n     INT_CMfree(cm);\n }\n\n extern void\n INT_CMinstall_perf_upcall(CManager cm, CMperf_upcall upcall)\n {\n     cm->perf_upcall = upcall;\n }\n\n extern void\n INT_CManager_close(CManager cm)\n {\n     CMControlList cl = cm->control_list;\n\n     CMtrace_out(cm, CMFreeVerbose, \"CManager %p closing, ref count %d\\n\", cm,\n\t\t cm->reference_count);\n\n     CMtrace_out(cm, CMFreeVerbose, \"CMControlList close CL=%lx current reference count will be %d, sdp = %p\\n\", \n\t\t (long) cl, cl->cl_reference_count - 1, cl->select_data);\n     INT_CMControlList_close(cl, cm);\n     CMtrace_out(cm, CMFreeVerbose, \"CMControlList CL=%lx is closed\\n\", (long) cl);\n\n     while (cm->connection_count != 0) {\n\t /* connections are moved down as they are closed... */\n\t CMtrace_out(cm, CMFreeVerbose, \"CManager in close, closing connection %p , ref count %d\\n\", cm->connections[0],\n\t\t     cm->connections[0]->conn_ref_count);\n\t internal_connection_close(cm->connections[0]);\n\t INT_CMConnection_failed(cm->connections[0]);\n     }\n\n     if (cm->shutdown_functions != NULL) {\n\t func_entry *shutdown_functions = cm->shutdown_functions;\n\t int i = 0;\n\n\t while (shutdown_functions[i].func != NULL) {\n\t     if (shutdown_functions[i].task_type == SHUTDOWN_TASK) {\n\t\t CMtrace_out(cm, CMFreeVerbose, \"CManager calling shutdown function SHUTDOWN %d, %lx\\n\", i, (long)shutdown_functions[i].func);\n\t\t shutdown_functions[i].func(cm, shutdown_functions[i].client_data);\n\t\t shutdown_functions[i].task_type = NO_TASK;\n\t     }\n\t     i++;\n\t }\n     }\n     cm->reference_count--;\n     CMtrace_out(cm, CMFreeVerbose, \"CManager %p ref count now %d\\n\", \n\t\t cm, cm->reference_count);\n     if (cm->reference_count == 0) {\n\t if (cm->shutdown_functions != NULL) {\n\t     int i = 0;\n\t     func_entry *shutdown_functions = cm->shutdown_functions;\n\t     cm->shutdown_functions = NULL;\n\n\t     while (shutdown_functions[i].func != NULL) {\n\t\t i++;\n\t     }\n\t     i--;\n\t     for ( ; i >= 0; i--) {\n\t\t if (shutdown_functions[i].task_type == FREE_TASK) {\n\t\t     CMtrace_out(cm, CMFreeVerbose, \"CManager calling shutdown function FREE %d, %lx\\n\", i, (long)shutdown_functions[i].func);\n\t\t     shutdown_functions[i].func(cm, shutdown_functions[i].client_data);\n\t\t     shutdown_functions[i].func = NULL;\n\t\t }\n\t     }\n\t     INT_CMfree(shutdown_functions);\n\t }\n\t CMtrace_out(cm, CMFreeVerbose, \"Freeing CManager %p\\n\", cm);\n\t cl->free_reference_count = 1;\n\t CMControlList_free(cm, cl);\n\t CManager_unlock(cm);\n\t CManager_free(cm);\n     } else {\n\t CManager_unlock(cm);\n     }\n }\n\n extern void\n internal_add_shutdown_task(CManager cm, CMPollFunc func, void *client_data, int task_type)\n {\n     int func_count = 0;\n     if (!cm->control_list->select_initialized) {\n\t CM_init_select(cm->control_list, cm);\n     }\n     if (cm->shutdown_functions == NULL) {\n\t cm->shutdown_functions = \n\t     INT_CMmalloc(sizeof(cm->shutdown_functions[0]) * 2);\n     } else {\n\t while (cm->shutdown_functions[func_count].func != NULL) {\n\t     func_count++;\n\t }\n\t cm->shutdown_functions = \n\t     INT_CMrealloc(cm->shutdown_functions,\n\t\t       sizeof(cm->shutdown_functions[0]) * (func_count +2));\n     }\n     cm->shutdown_functions[func_count].func = func;\n     cm->shutdown_functions[func_count].task_type = task_type;\n     cm->shutdown_functions[func_count].client_data = client_data;\n     func_count++;\n     cm->shutdown_functions[func_count].func = NULL;\n }\n\n extern void\n INT_CMadd_shutdown_task(CManager cm, CMPollFunc func, void *client_data, int task_type)\n {\n     internal_add_shutdown_task(cm, func, client_data, task_type);\n }\n\n static void\n add_conn_to_CM(CManager cm, CMConnection conn)\n {\n     cm->connections = \n\t INT_CMrealloc(cm->connections, \n\t\t   (cm->connection_count + 1) * sizeof(cm->connections[0]));\n     cm->connections[cm->connection_count] = conn;\n     INT_CMConnection_add_reference(conn);\n     cm->connection_count++;\n }\n\n static void\n remove_conn_from_CM(CManager cm, CMConnection conn)\n {\n     int i;\n     int found = 0;\n     for (i=0; i < cm->connection_count; i++) {\n\t if (cm->connections[i] == conn) {\n\t     found++;\n\t     INT_CMConnection_dereference(conn);\n\t } else if (found) {\n\t     /* copy down */\n\t     cm->connections[i-1] = cm->connections[i];\n\t }\n     }\n     if (found == 0) {\n\t fprintf(stderr, \"Internal error, remove_conn_from_CM.  Not found\\n\");\n     } else {\n\t cm->connection_count--;\n\t cm->abort_read_ahead = 1;\n     }\n }\n\n static CMControlList\n CMControlList_create()\n {\n     CMControlList new_list = (CMControlList) INT_CMmalloc(sizeof(CMControlList_s));\n     new_list->select_initialized = 0;\n     new_list->select_data = NULL;\n     new_list->add_select = NULL;\n     new_list->remove_select = NULL;\n     new_list->server_thread =  (thr_thread_t) NULL;\n     new_list->network_blocking_function.func = NULL;\n     new_list->network_polling_function.func = NULL;\n     new_list->polling_function_list = NULL;\n     new_list->cl_consistency_number = 1;\n     new_list->cl_reference_count = 1;\n     new_list->free_reference_count = 1;\n     thr_mutex_init(new_list->list_mutex);\n     new_list->condition_list = NULL;\n     new_list->next_condition_num = 1;\n     new_list->closed = 0;\n     new_list->locked = 0;\n     new_list->has_thread = 0;\n     new_list->cond_polling = 0;\n     return new_list;\n }\n\n CMConnection\n CMConnection_create(transport_entry trans, void *transport_data, \n\t\t     attr_list conn_attrs)\n {\n     static int first = 1;\n     static int non_block_default = 0;\n     static int read_thread_default = 0;\n     int blocking_on_conn;\n     CMConnection conn = INT_CMmalloc(sizeof(struct _CMConnection));\n     if (first) {\n\t char *value = getenv(\"CMNonBlockWrite\");\n\t first = 0;\n\t if (value != NULL) {\n\t     sscanf(value, \"%d\", &non_block_default);\n\t     CMtrace_out(trans->cm, CMConnectionVerbose, \"CM default blocking %d\\n\",\n\t\t\t non_block_default);\n\t }\n\t value = getenv(\"CMReadThread\");\n\t if (value != NULL) {\n\t     sscanf(value, \"%d\", &read_thread_default);\n\t     CMtrace_out(trans->cm, CMConnectionVerbose, \"CM default read thread %d\\n\",\n\t\t\t read_thread_default);\n\t }\n     }\n     conn->cm = trans->cm;\n     conn->trans = trans;\n     conn->transport_data = transport_data;\n     conn->conn_ref_count = 1;\n     conn->closed = 0;\n     conn->failed = 0;\n     conn->preloaded_formats = NULL;\n     conn->remote_format_server_ID = 0;\n     conn->remote_CManager_ID = 0;\n     conn->handshake_condition = -1;\n     conn->io_out_buffer = create_FFSBuffer();\n     conn->close_list = NULL;\n     conn->write_callback_len = 0;\n     conn->write_callbacks = NULL;\n     if (conn_attrs) {\n\t CMadd_ref_attr_list(conn->cm, conn_attrs);\n     }\n     conn->attrs = conn_attrs;\n     conn->attr_encode_buffer = create_AttrBuffer();\n\n     conn->message_buffer = NULL;\n     conn->buffer_full_point = 0;\n     conn->buffer_data_end = 0;\n\n     conn->characteristics = NULL;\n     conn->write_pending = 0;\n     conn->do_non_blocking_write = non_block_default;\n     conn->XML_output = 0;\n     conn->use_read_thread = read_thread_default; \n\n     if (get_int_attr(conn_attrs, CM_CONN_BLOCKING, &blocking_on_conn)) {\n\t conn->do_non_blocking_write = !blocking_on_conn;\n     }\n     add_conn_to_CM(trans->cm, conn);\n     CMtrace_out(trans->cm, CMFreeVerbose, \"CMConnection_create %lx \\n\",\n\t\t (long) conn);\n     return conn;\n }\n\n extern attr_list\n INT_CMConnection_get_attrs(CMConnection conn)\n {\n     return conn->attrs;\n }\n\n typedef struct {\n     int size; /*stream length to probe bw. */\n     int size_inc;/*size=size+size_inc if previous size is not adequate*/\n     int successful_run; /*if we have at least 5 successful runs, \n\t\t\t   size is set properly*/\n     int failed_run;/*After parameters are set properly, if we have 3\n\t\t      contineous runs failed, we need to set the size again \n\t\t      for the changed network condition*/\n     CMConnection conn;\n     attr_list attrs;\n } *bw_measure_data;\n\n static void\n do_bw_measure(CManager cm, void *client_data)\n {\n     double bw;\n     (void)cm;\n     bw_measure_data data = (bw_measure_data) client_data;\n     CManager_lock(cm);\n     bw=INT_CMregressive_probe_bandwidth(data->conn, data->size, data->attrs);\n     CManager_unlock(cm);\n\n     /*Initialization phase*/\n     if(bw<0 && data->successful_run<5){\n\t data->size+=data->size_inc;\n\t data->successful_run=0;\n     }\n     if(bw>=0 && data->successful_run<5) data->successful_run++; /*if measured correctly in several back-to-back measurements, increase data->successful_run up to 5. 5 indicates parameters are well tuned now*/\n\n     /*After initialization, if network condition changed, and previously tuned parameters come to not adequate:*/\n     if(bw<0 && data->successful_run>=5 && data->failed_run<5)\n\t data->failed_run++;\n     if(bw>=0)  data->failed_run=0; /*guard for contineous failures. */\n     if(data->failed_run>=5){ /*need to tune parameters again now. */\n\t data->successful_run=0;\n\t data->failed_run=0;\n     }\n\n     CMtrace_out(data->conn->cm, CMLowLevelVerbose,\"successful run: %d, failed run: %d, size: %d, bw: %f\\n\", data->successful_run, data->failed_run, data->size, bw);\n     return;\n }    \n\n extern int\n INT_CMConnection_set_character(CMConnection conn, attr_list attrs)\n {\n     long interval_value;\n     if (attrs == NULL) return 0;\n     if (get_long_attr(attrs, CM_BW_MEASURE_INTERVAL, &interval_value)) {\n\t bw_measure_data data;\n\t int previous_interval;\n\t CMTaskHandle task = NULL;\n\t if ((interval_value <= 1) || (interval_value > 60*60*8)) {\n\t     printf(\"Bad CM_BW_MEASURE_INTERVAL, %ld seconds\\n\",\n\t\t    interval_value);\n\t     return 0;\n\t }\n\n\t CMtrace_out(conn->cm, CMLowLevelVerbose,\"CM_BW_MEASURE_INTERVAL set, interval is %ld\\n\", interval_value);\n\t if (conn->characteristics && \n\t     (get_int_attr(conn->characteristics, CM_BW_MEASURE_INTERVAL,\n\t\t\t   &previous_interval) != 0)) {\n\t     CMTaskHandle prior_task = NULL;\n\t     if (interval_value >= previous_interval) {\n\t\t CMtrace_out(conn->cm, CMLowLevelVerbose,\"CM_BW_MEASURE_INTERVAL prior interval is %d, no action.\\n\", previous_interval);\n\t\t return 1;\n\t     }\n\t     CMtrace_out(conn->cm, CMLowLevelVerbose,\"CM_BW_MEASURE_INTERVAL prior interval is %d, killing prior task.\\n\", previous_interval);\n\t     get_long_attr(conn->characteristics, CM_BW_MEASURE_TASK,\n\t\t\t   (long*)(long)&prior_task);\n\t     if (prior_task) {\n\t\t INT_CMremove_task(prior_task);\n\t\t set_long_attr(conn->characteristics, CM_BW_MEASURE_TASK, (long)0);\n\t     }\n\t }\n\t data = malloc(sizeof(*data));\n\t data->size=data->size_inc=-1;\n\n\t /*Get attr about size, size_inc from attributes. */\n\t get_int_attr(attrs, CM_BW_MEASURE_SIZE, &(data->size));\n\t if(data->size<1024)\n\t     data->size=1024;\n\t get_int_attr(attrs, CM_BW_MEASURE_SIZEINC, &(data->size_inc));\n\t if(data->size_inc<1024)\n\t     data->size_inc=1024;\n\n\t data->successful_run=0;\n\t data->failed_run=0;\n\n\t /*app set attr about N and repeat time. store in data->attrs automically and pass to regressive_probe_bandwidth. \n\t  */\n\t data->conn = conn;\n\t data->attrs = CMattr_copy_list(conn->cm, attrs);\n\t /* do one task almost immediately */\n\t task = INT_CMadd_delayed_task(conn->cm, 0, 1000, do_bw_measure, \n\t\t\t\t   (void*)data);\n\t free(task);\n\t /* schedule tasks periodically */\n\t task = INT_CMadd_periodic_task(conn->cm, interval_value, 0, \n\t\t\t\t    do_bw_measure, (void*)data);\n\t if (conn->characteristics == NULL) {\n\t     conn->characteristics = CMcreate_attr_list(conn->cm);\n\t }\n\t set_int_attr(conn->characteristics, CM_BW_MEASURE_INTERVAL,\n\t\t      interval_value);\n\t set_long_attr(conn->characteristics, CM_BW_MEASURE_TASK, (long)task);\n\n\t return 1;\n     }\n     return 0;\n }\n\n extern CMConnection \n INT_CMget_indexed_conn(CManager cm, int i)\n {\n     if (i>=0 && i<cm->connection_count) {\n\t if (cm->connections[i] != NULL) {\n\t     return cm->connections[i];\n\t } else {\n\t     CMtrace_out(cm, CMConnectionVerbose,\n\t\t\t \"cm->connection[%d] is NULL. INT_CMget_indexed_conn\\n\", i);\n\t     return NULL;\n\t }\n     } else {\n\t CMtrace_out(cm, CMConnectionVerbose,\n\t\t     \"Invalid index. i=%d. INT_CMget_indexed_conn\\n\", i);\n\t return NULL;\n     }\n }\n\n void\n INT_CMConnection_dereference(CMConnection conn)\n {\n     conn->conn_ref_count--;\n     if (conn->conn_ref_count > 0) {\n\t CMtrace_out(conn->cm, CMFreeVerbose, \"CM - Dereference connection %p, ref count now %d\\n\",\n\t\t     (void*)conn, conn->conn_ref_count);\n\t return;\n     }\n     if (conn->conn_ref_count < 0) {\n\t CMtrace_out(conn->cm, CMFreeVerbose, \"CM - connection reference count less than 0, conn %p\\n\", conn);\n\t return;   /*  BAD! */\n     }\n     CMtrace_out(conn->cm, CMFreeVerbose, \"CM - Shut down connection %p\\n\",\n\t\t (void*)conn);\n     if (conn->write_pending) {\n\t wait_for_pending_write(conn);\n     }\n     conn->closed = 1;\n     if (conn->failed == 0) {\n\t CMtrace_out(conn->cm, CMFreeVerbose, \"Calling connection failed with no dereference %p\\n\", conn);\n\t INT_CMConnection_failed(conn);\n     }\n     CMtrace_out(conn->cm, CMFreeVerbose, \"CM - Dereference connection %p FREEING\\n\", (void*)conn);\n     if (conn->write_callbacks) INT_CMfree(conn->write_callbacks);\n     INT_CMfree(conn->preloaded_formats);\n     INT_CMfree_attr_list(conn->cm, conn->attrs);\n     free_FFSBuffer(conn->io_out_buffer);\n     free_AttrBuffer(conn->attr_encode_buffer);\n #ifdef EV_INTERNAL_H\n     INT_EVforget_connection(conn->cm, conn);\n #endif\n     INT_CMfree(conn);\n }\n\nvoid\nINT_CMConnection_failed(CMConnection conn)\n{\n    CMTaskHandle prior_task = NULL;\n    if (conn->failed) return;\n    conn->failed = 1;\n    transport_wake_any_pending_write(conn);\n\n    assert(CManager_locked(conn->cm));\n    CMtrace_out(conn->cm, CMFreeVerbose, \"CMConnection failed conn=%lx\\n\", \n\t\t(long) conn);\n    CMconn_fail_conditions(conn);\n    conn->trans->shutdown_conn(&CMstatic_trans_svcs, conn->transport_data);\n    get_long_attr(conn->characteristics, CM_BW_MEASURE_TASK, \n\t\t  (long*)(long)&prior_task);\n    if (prior_task) {\n\tINT_CMremove_task(prior_task);\n\tset_long_attr(conn->characteristics, CM_BW_MEASURE_TASK, (long)0);\n    }\n    if (conn->close_list) {\n\tCMCloseHandlerList list = conn->close_list;\n\tconn->close_list = NULL;\n\twhile (list != NULL) {\n\t    CMCloseHandlerList next = list->next;\n\t    if (! conn->closed ) {\n\t\tCMtrace_out(conn->cm, CMConnectionVerbose, \n\t\t\t    \"CM - Calling close handler %p for connection %p\\n\",\n\t\t\t    (void*) list->close_handler, (void*)conn);\n\t\tCManager_unlock(conn->cm);\n\t\tlist->close_handler(conn->cm, conn, list->close_client_data);\n\t\tCManager_lock(conn->cm);\n\t    }\n\t    INT_CMfree(list);\n\t    list = next;\n\t}\n    }\n    conn->closed = 1;\n    remove_conn_from_CM(conn->cm, conn);\n}\n\n void\n internal_connection_close(CMConnection conn)\n {\n     CMtrace_out(conn->cm, CMFreeVerbose, \"internal_connection_close conn=%lx ref count is %d\\n\", \n\t\t (long) conn, conn->conn_ref_count);\n     conn->closed = 1;\n }\n\n void\n INT_CMConnection_close(CMConnection conn)\n {\n     internal_connection_close(conn);\n     CMtrace_out(conn->cm, CMFreeVerbose, \"User CMConnection close conn=%lx ref count will be %d\\n\", \n\t\t (long) conn, conn->conn_ref_count - 1);\n     INT_CMConnection_dereference(conn);\n }\n\n void\n INT_CMconn_register_close_handler(CMConnection conn, CMCloseHandlerFunc func, \n\t\t\t\t   void *client_data)\n {\n     CMCloseHandlerList *lastp = &conn->close_list;\n     CMCloseHandlerList entry = INT_CMmalloc(sizeof(*entry));\n     while (*lastp != NULL) lastp = &((*lastp)->next);\n     entry->close_handler = func;\n     entry->close_client_data = client_data;\n     entry->next = NULL;\n     *lastp = entry;\n }\n\n static void\n INT_CMControlList_close(CMControlList cl, CManager cm)\n {\n     void *status;\n     cl->cl_reference_count--;\n     cl->closed = 1;\n\n     (cl->stop_select)((void*)&CMstatic_trans_svcs, &cl->select_data);\n     if ((cl->has_thread > 0) && (cl->server_thread != thr_thread_self())){\n\t     (cl->wake_select)((void*)&CMstatic_trans_svcs,\n\t\t\t       &cl->select_data);\n     }\t\n     if ((cl->has_thread > 0) && (cl->server_thread != thr_thread_self())){\n\t (cl->stop_select)((void*)&CMstatic_trans_svcs,\n\t\t\t   &cl->select_data);\n\n\t (cl->wake_select)((void*)&CMstatic_trans_svcs,\n\t\t\t   &cl->select_data);\n\t CManager_unlock(cm);\n\t thr_thread_join(cl->server_thread, &status);\n\t CManager_lock(cm);\n\t cl->has_thread = 0;\n     }\n }\n\n\n void\n CMwake_server_thread(CManager cm)\n {\n     CMControlList cl = cm->control_list;\n     (cl->wake_select)((void*)&CMstatic_trans_svcs, &cl->select_data);\n }\n\n extern void\n internal_condition_free(CMControlList cl);\n\n static void\n CMControlList_free(CManager cm, CMControlList cl)\n {\n     cl->free_reference_count--;\n     if (CMtrace_val[CMFreeVerbose]) {\n\t fprintf(cm->CMTrace_file, \"CMControlList_free, %lx, ref count now %d\\n\", (long)cl,\n\t\tcl->free_reference_count);\n     }\n     if(cl->free_reference_count == 0) {\n\t if (CMtrace_val[CMFreeVerbose]) {\n\t     fprintf(cm->CMTrace_file, \"CMControlList_free freeing %lx\\n\", (long)cl);\n\t }\n\t if (cl->polling_function_list != NULL) {\n\t     INT_CMfree(cl->polling_function_list);\n\t }\n\t thr_mutex_free(cl->list_mutex);\n\t internal_condition_free(cl);\n\t INT_CMfree(cl);\n     }\n }\n\nextern void\nINT_CMget_qual_hostname(CManager cm, char *buf, int len)\n{\n    get_IP_config(buf, len, NULL, NULL, NULL, NULL, NULL,\n\t\t  CMstatic_trans_svcs.trace_out, cm);\n}\n\nextern void\nINT_CMget_port_range(CManager cm, int *high_bound, int *low_bound)\n{\n    get_IP_config(NULL, 0, NULL, low_bound, high_bound, NULL, NULL,\n\t\t  CMstatic_trans_svcs.trace_out, cm);\n}\n\nextern int\nINT_CMget_self_ip_addr(CManager cm)\n{\n    int IP;\n    get_IP_config(NULL, 0, &IP, NULL, NULL, NULL, NULL,\n\t\t  CMstatic_trans_svcs.trace_out, cm);\n    return IP;\n}\n\nextern char *\nINT_CMget_ip_config_diagnostics(CManager cm)\n{\n    return IP_get_diagnostics(cm, CMstatic_trans_svcs.trace_out);\n}\n\n #define CURRENT_HANDSHAKE_VERSION 1\n\n static \n int\n transport_is_reliable(CMConnection conn)\n {\n     attr_list list;\n     int ret = 0;\n     if (conn->trans->get_transport_characteristics == NULL) {\n\t return 0; /* don't know */\n     }\n     list = conn->trans->get_transport_characteristics(conn->trans, &CMstatic_trans_svcs, \n\t\t\t\t\t\t       conn->trans->trans_data);\n     (void) get_int_attr(list, CM_TRANSPORT_RELIABLE, &ret);\n\n     free_attr_list(list);\n\n     return ret;\n }\n\n static\n void\n send_and_maybe_wait_for_handshake(CManager cm, CMConnection conn)\n {\n     struct FFSEncodeVec tmp_vec[1];\n     int reliable = transport_is_reliable(conn);\n     int msg[5], actual;\n     if (!cm->FFSserver_identifier) cm->FFSserver_identifier = -1;\n     msg[0] = 0x434d4800;  /* CMH\\0 */\n     msg[1] = (CURRENT_HANDSHAKE_VERSION << 24) + sizeof(msg);\n     msg[2] = cm->FFSserver_identifier;\n     msg[3] = 5;  /* not implemented yet */\n     msg[4] = 0;  /* not implemented yet */\n     if (conn->remote_format_server_ID != 0) {\n\t /* set high bit if we already have his ID */\n\t msg[3] |= 0x80000000;\n     }\n     tmp_vec[0].iov_base = &msg;\n     tmp_vec[0].iov_len = sizeof(msg);\n     CMtrace_out(conn->cm, CMLowLevelVerbose, \"CM - sending handshake\\n\");\n     if ((conn->remote_format_server_ID == 0) && reliable) {\n\t /* we will await his respone */\n\t conn->handshake_condition = INT_CMCondition_get(cm, conn);\n     }\n     actual = conn->trans->writev_func(&CMstatic_trans_svcs, \n\t\t\t\t       conn->transport_data, \n\t\t\t\t       &tmp_vec[0], 1, NULL);\n\n     CMtrace_out(conn->cm, CMLowLevelVerbose, \"CM - after handshake, pending is %d\\n\", conn->write_pending);\n     if (conn->write_pending) {\n\t wait_for_pending_write(conn);\n     }\n     if (actual != 1) {\n\t printf(\"handshake write failed\\n\");\n     }\n     if ((conn->remote_format_server_ID == 0) && reliable) {\n\t CMtrace_out(conn->cm, CMLowLevelVerbose, \"CM - waiting for handshake response\\n\");\n\t INT_CMCondition_wait(cm, conn->handshake_condition);\n     }\n }\n\nstatic\nvoid\ntimeout_conn(CManager cm, void *client_data)\n{\n    INT_CMCondition_fail(cm, (long) client_data);\n}\n\n static\n CMConnection\n try_conn_init(CManager cm, transport_entry trans, attr_list attrs)\n {\n     CMConnection conn = NULL;\n     if (trans->initiate_conn) {\n\t conn = trans->initiate_conn(cm, &CMstatic_trans_svcs,\n\t\t\t\t     trans, attrs);\n     } else if (trans->initiate_conn_nonblocking) {\n\t int result;\n\t long wait_condition = INT_CMCondition_get(cm, NULL);\n\t CMTaskHandle task = INT_CMadd_delayed_task(cm, 5, 0, timeout_conn,\n\t\t\t\t\t\t    (void*)wait_condition);\n\t if (CMtrace_on(cm, CMConnectionVerbose)) {\n\t     char *attr_str = attr_list_to_string(attrs);\n\t     CMtrace_out(cm, CMConnectionVerbose, \n\t\t\t \"CM - Try to establish connection %p - %s, wait condition %ld\\n\", (void*)conn,\n\t\t\t attr_str, wait_condition);\n\t     INT_CMfree(attr_str);\n\t }\n\t void *client_data = trans->initiate_conn_nonblocking(cm, &CMstatic_trans_svcs,\n\t\t\t\t\t\t trans, attrs, wait_condition);\n\t // Upon wake, condition will have either been signaled (return 1) or failed (return 0)\n\t result = INT_CMCondition_wait(cm, wait_condition);\n\t CMtrace_out(cm, CMConnectionVerbose, \n\t\t     \"CM - CMConnection wait returned, result %d\\n\", result);\n\t if (result == 1) {\n\t     INT_CMremove_task(task);\n\t }\n\t conn = trans->finalize_conn_nonblocking(cm,  &CMstatic_trans_svcs,\n\t\t\t\t\t\t trans, client_data, result);\n     } else {\n\t assert(0);\n     }\n     if (conn != NULL) {\n\t if (CMtrace_on(conn->cm, CMConnectionVerbose)) {\n\t     char *attr_str = attr_list_to_string(attrs);\n\t     CMtrace_out(conn->cm, CMConnectionVerbose, \n\t\t\t \"CM - Establish connection %p - %s\\n\", (void*)conn,\n\t\t\t attr_str);\n\t     INT_CMfree(attr_str);\n\t }\n\t if (conn->use_read_thread) {\n\t     INT_CMstart_read_thread(conn);\n\t }\n\t send_and_maybe_wait_for_handshake(cm, conn);\n     }\n     return conn;\n }\n\n CMConnection\n CMinternal_initiate_conn(CManager cm, attr_list attrs)\n {\n     transport_entry *trans_list;\n     char *chosen_transport = NULL;\n\n     assert(CManager_locked(cm));\n\n     if (attrs) {\n\t attrs = split_transport_attributes(attr_copy_list(attrs));\n\t get_string_attr(attrs, CM_TRANSPORT, &chosen_transport);\n     }\n     if (chosen_transport != NULL) {\n\t if (load_transport(cm, chosen_transport, 1) == 0) {\n\t     CMtrace_out(cm, CMConnectionVerbose,\n\t\t\t \"Failed to load transport \\\"%s\\\".  Revert to default.\\n\",\n\t\t\t chosen_transport);\n\t     chosen_transport = NULL;\n\t }\n     }\n     trans_list = cm->transports;\n     if (chosen_transport == NULL) {\n\t CMtrace_out(cm, CMConnectionVerbose,\n\t\t     \"INT_CMinitiate_conn no transport attr found\\n\");\n\n\t while ((trans_list != NULL) && (*trans_list != NULL)) {\n\t     CMConnection conn;\n\t     conn = try_conn_init(cm, *trans_list, attrs);\n\t     if (conn != NULL) {\n\t\t if (attrs) free_attr_list(attrs);\n\t\t return conn;\n\t     }\n\t     trans_list++;\n\t }\n     } else {\n\t CMtrace_out(cm, CMConnectionVerbose,\n\t\t     \"INT_CMinitiate_conn looking for transport \\\"%s\\\"\\n\", \n\t\t     chosen_transport);\n\t while ((trans_list != NULL) && (*trans_list != NULL)) {\n\t     if (strcmp((*trans_list)->trans_name, chosen_transport) == 0) {\n\t\t CMConnection conn = try_conn_init(cm, *trans_list, attrs);\n\t\t if (attrs) free_attr_list(attrs);\n\t\t return conn;\n\t     }\n\t     trans_list++;\n\t }\n\t CMtrace_out(cm, CMConnectionVerbose,\n\t\t     \"INT_CMinitiate_conn transport \\\"%s\\\" not found - no connection\\n\", \n\t\t     chosen_transport);\n\t if (attrs) free_attr_list(attrs);\n\t return NULL;\n     }\n\n     if (attrs) free_attr_list(attrs);\n     return NULL;\n }\n\n static void\n fdump_CMConnection(FILE *out, CMConnection conn)\n {\n     if (conn == NULL) {\n\t fprintf(out, \"CMConnection NULL\\n\");\n\t return;\n     }\n     fprintf(out, \"CMConnection %lx, reference count %d, closed %d\\n\\tattrs : \", \n\t    (long) conn, conn->conn_ref_count, conn->closed);\n     fdump_attr_list(out, conn->attrs);\n     fprintf(out, \"\\tbuffer_full_point %ld, current buffer_end %ld\\n\", \n\t     conn->buffer_full_point, conn->buffer_data_end);\n     fprintf(out, \"\\twrite_pending %d\\n\", conn->write_pending);\n }\n\n /*static void\n dump_CMConnection(CMConnection conn)\n {\n     fdump_CMConnection(stdout, conn);\n     }*/\n\n CMConnection\n INT_CMinitiate_conn(CManager cm, attr_list attrs)\n {\n     CMConnection conn;\n     if (!cm->initialized) CMinitialize(cm);\n     if (CMtrace_on(cm, CMConnectionVerbose)) {\n\t fprintf(cm->CMTrace_file,\"Doing CMinitiate_conn\\n\");\n     }\n     conn = CMinternal_initiate_conn(cm, attrs);\n     if (CMtrace_on(cm, CMConnectionVerbose)) {\n\t if (conn != NULL) {\n\t     fdump_CMConnection(cm->CMTrace_file, conn);\n\t } else {\n\t     fprintf(cm->CMTrace_file, \"NULL\\n\");\n\t }\n     }\n     return conn;\n }\n\n void\n INT_CMConnection_add_reference(CMConnection conn)\n {\n     conn->conn_ref_count++;\n     CMtrace_out(conn->cm, CMFreeVerbose, \"Add reference to connection %p, value is now %d\\n\", conn, conn->conn_ref_count);\n }\n\n CMConnection\n CMinternal_get_conn(CManager cm, attr_list attrs)\n {\n     int i;\n     CMConnection conn = NULL;\n     assert(CManager_locked(cm));\n     if (CMtrace_on(cm, CMConnectionVerbose)) {\n\t fprintf(cm->CMTrace_file, \"In CMinternal_get_conn, attrs \");\n\t if (attrs) fdump_attr_list(cm->CMTrace_file, attrs); else fprintf(cm->CMTrace_file, \"\\n\");\n     }\n     for (i=0; i<cm->connection_count; i++) {\n\t CMConnection tmp = cm->connections[i];\n\t if (tmp->closed || tmp->failed) continue;\n\t if (tmp->trans->connection_eq(cm, &CMstatic_trans_svcs,\n\t\t\t\t\ttmp->trans, attrs,\n\t\t\t\t\ttmp->transport_data)) {\n\n\t     CMtrace_out(tmp->cm, CMFreeVerbose, \"internal_get_conn found conn=%p ref count will be %d\\n\", \n\t\t\t tmp, tmp->conn_ref_count +1);\n\t     CMtrace_out(tmp->cm, CMConnectionVerbose, \"internal_get_conn found conn=%p ref count will be %d\\n\", \n\t\t\t tmp, tmp->conn_ref_count +1);\n\t     tmp->conn_ref_count++;\n\t     conn = tmp;\n\t     break;\n\t }\n     }\n     if (conn == NULL) {\n\t if (CMtrace_on(cm, CMConnectionVerbose)) {\n\t     fprintf(cm->CMTrace_file, \"In CMinternal_get_conn, no existing connection found, initiating\\n\");\n\t }\n\t conn = CMinternal_initiate_conn(cm, attrs);\n\t if (conn) {\n\t     CMtrace_out(conn->cm, CMFreeVerbose, \"internal_get_conn initiated connection %p ref count now %d\\n\", \n\t\t\t conn, conn->conn_ref_count);\n\t }\n     }\n     if (conn != NULL) {\n\t CMtrace_out(conn->cm, CMFreeVerbose, \"internal_get_conn returning conn=%p ref count %d\\n\", \n\t\t     conn, conn->conn_ref_count);\n     }\n     if (CMtrace_on(cm, CMConnectionVerbose)) {\n\t fprintf(cm->CMTrace_file, \"CMinternal_get_conn returning \");\n\t if (conn != NULL) {\n\t     fdump_CMConnection(cm->CMTrace_file, conn);\n\t } else {\n\t     fprintf(cm->CMTrace_file, \"NULL\\n\");\n\t }\n     }\n     return conn;\n }\n\n CMConnection\n INT_CMget_conn(CManager cm, attr_list attrs)\n {\n     CMConnection conn;\n     if (!cm->initialized) CMinitialize(cm);\n     conn = CMinternal_get_conn(cm, attrs);\n     return conn;\n }\n\n int\n INT_CMcontact_self_check(CManager cm, attr_list attrs)\n {\n     transport_entry *trans_list;\n     if (!cm->initialized) CMinitialize(cm);\n     trans_list = cm->transports;\n     while ((trans_list != NULL) && (*trans_list != NULL)) {\n\t int result = 0;\n\t result = (*trans_list)->self_check(cm, &CMstatic_trans_svcs, \n\t\t\t\t\t    *trans_list, attrs);\n\t if (result) return result;\n\t trans_list++;\n     }\n     return 0;\n }\n\n extern CMbuffer\n cm_create_transport_buffer(CManager cm, void *buffer, int length)\n {\n     CMbuffer tmp;\n     (void)cm;\n     tmp = INT_CMmalloc(sizeof(*tmp));\n     memset(tmp, 0, sizeof(*tmp));\n     tmp->buffer = buffer;\n     tmp->size = length;\n     tmp->ref_count = 1;\n     CMtrace_out(cm, CMBufferVerbose, \"Creating buffer %p, ref_count is %d\\n\", tmp, tmp->ref_count);\n //   This should just return the buffer... not update the link list.  That's handled in the calling routine.\n //    tmp->next = cm->cm_buffer_list;\n //    cm->cm_buffer_list = tmp;\n     return tmp;\n }\n\n extern CMbuffer\n cm_create_transport_and_link_buffer(CManager cm, void *buffer, int length)\n {\n     CMbuffer tmp;\n     tmp = INT_CMmalloc(sizeof(*tmp));\n     memset(tmp, 0, sizeof(*tmp));\n     tmp->buffer = buffer;\n     tmp->size = length;\n     tmp->ref_count = 1;\n     CMtrace_out(cm, CMBufferVerbose, \"Create and link buffer %p, ref_count is %d\\n\", tmp, tmp->ref_count);\n     tmp->next = cm->cm_buffer_list;\n     cm->cm_buffer_list = tmp;\n     return tmp;\n }\n\n /* alloc temporary buffer for CM use */\n extern CMbuffer\n cm_get_data_buf(CManager cm, int length)  \n {\n     int buffer_count = 0;\n     CMbuffer tmp = cm->cm_buffer_list;\n\n     CMtrace_out(cm, CMBufferVerbose, \"cm_get_data_buf called with len %d\\n\",\n\t\t length);\n     while (tmp != NULL) {\n\t CMtrace_out(cm, CMBufferVerbose, \"  buffer %d %p, size is %ld, data %p, ref_count %d\\n\",\n\t\t     buffer_count, tmp, tmp->size, tmp->buffer, tmp->ref_count);\n\t buffer_count++;\n\t tmp = tmp->next;\n     }\n\n     tmp = cm->cm_buffer_list;\n     buffer_count = 0;\n     /* first baseline consistency check */\n     while (tmp != NULL) {\n\t if (tmp->ref_count < 0) {\n\t     CMtrace_out(cm, CMBufferVerbose, \"cm_get_data_buf buffer %p, ref_count is %d, should not be negative\\n\", tmp, tmp->ref_count);\n\t }\n\t buffer_count++;\n\t tmp = tmp->next;\n     }\n     /* first look for a buffer big enough, but not too big */\n     tmp = cm->cm_buffer_list;\n     while (tmp != NULL) {\n\t if (tmp->ref_count <= 0) {\n\t     if ((tmp->size >= length) && ((tmp->size/10) < length)) {\n\t\t CMtrace_out(cm, CMBufferVerbose, \"cm_get_data_buf called len %d, return existing %p, next %p, count %d\\n\",\n\t\t\t     length, tmp, tmp->next, buffer_count);\n\t\t tmp->ref_count = 1;\n\t\t return tmp;\n\t     }\n\t }\n\t tmp = tmp->next;\n     }\t\t\n     /* ok, we'll settle for way too big, but realloc it down */\n     tmp = cm->cm_buffer_list;\n     while (tmp != NULL) {\n\t if (tmp->ref_count <= 0) {\n\t     if ((tmp->size >= length)) {\n\t\t char *t = INT_CMrealloc(tmp->buffer, length);\n\t\t if (t == NULL) {\n\t\t     return NULL;\n\t\t }\n\t\t tmp->buffer = t;\n\t\t tmp->size = length;\n\t\t tmp->ref_count = 1;\n\t\t CMtrace_out(cm, CMBufferVerbose, \"      cm_get_data_buf resizing down!  return is %p\\n\", tmp);\n\t\t return tmp;\n\t     }\n\t }\n\t tmp = tmp->next;\n     }\t\t\n     tmp = cm->cm_buffer_list;\n     /* well, look for a small one to realloc up */\n     while (tmp != NULL) {\n\t if (tmp->ref_count <= 0) {\n\t     if (tmp->size <= length) {\n\t\t char *t = INT_CMrealloc(tmp->buffer, length);\n\t\t if (t == NULL) {\n\t\t     return NULL;\n\t\t }\n\t\t tmp->buffer = t;\n\t\t tmp->size = length;\n\t\t tmp->ref_count = 1;\n\t\t CMtrace_out(cm, CMBufferVerbose, \"      cm_get_data_buf resizingup!  return is %p\\n\", tmp);\n\t\t return tmp;\n\t     }\n\t }\n\t tmp = tmp->next;\n     }\n     tmp = cm_create_transport_buffer(cm, INT_CMmalloc(length), length);\n     tmp->ref_count = 1;\n     tmp->next = cm->cm_buffer_list;\n     cm->cm_buffer_list = tmp;\n     CMtrace_out(cm, CMBufferVerbose, \"cm_get_data_buf create new len %d, return %p, count %d\\n\",\n\t\t length, tmp, buffer_count);\n     return tmp;\n }\n\n /* realloc temporary buffer for CM use */\n extern CMbuffer\n cm_extend_data_buf(CManager cm, CMbuffer tmp, int length)  \n {\n     (void)cm;\n     if (tmp->size < length) {\n\t char *t = INT_CMrealloc(tmp->buffer, length);\n\t if (t == NULL) {\n\t     return NULL;\n\t }\n\t tmp->buffer = t;\n\t tmp->size = length;\n     }\n     return tmp;\n }\n\n /* CM says that it is done with temporary buffer */\n extern void\n cm_return_data_buf(CManager cm, CMbuffer cmb)\n {\n     cmb->ref_count--;\n     CMtrace_out(cm, CMBufferVerbose, \"cm_return_data_buf buffer %p, callback %p, ref_count is now %d\\n\", cmb, cmb->return_callback, cmb->ref_count);\n     if ((cmb->ref_count == 0) && (cmb->return_callback != NULL)) {\n\t CMbuffer last = NULL, tmp = cm->cm_buffer_list;\n\t /* UNLINK */\n\t CMtrace_out(cm, CMBufferVerbose, \"cm_return_data_buf --- Unlinking %p cmb\\n\", cmb);\n\t while (tmp != NULL) {\n\t     if (tmp != cmb) {\n\t\t last = tmp;\n\t\t tmp = tmp->next;\n\t\t continue;\n\t     }\n\t     /* remove the buffer from CM's list */\n\t     if (last == NULL) {\n\t\t cm->cm_buffer_list = tmp->next;\n\t     } else {\n\t\t last->next = tmp->next;\n\t     }\n\t     tmp = tmp->next;\n\t     (cmb->return_callback)(cmb->return_callback_data);\n\t     free(cmb);\n\t     break;\n\t }\n     }\n }\n\n static CMbuffer\n cm_buffer_lookup(CManager cm, void *buffer)\n {\n     CMbuffer tmp = cm->cm_buffer_list;\n     while (tmp != NULL) {\n\t if ((tmp->buffer <= buffer) && \n\t     ((char*)buffer < ((char*)tmp->buffer + tmp->size))){\n\t     return tmp;\n\t }\n\t tmp = tmp->next;\n     }\n     return NULL;\n }\n\n static CMbuffer\n cm_buffer_dump_list(CManager cm)\n {\n     CMbuffer tmp = cm->cm_buffer_list;\n     printf(\"Known CM buffers are:\\n\");\n     while (tmp != NULL) {\n\t printf(\"Buffer begin %p, size %ld, end %p\\n\",\n\t\ttmp->buffer, tmp->size, (char*)tmp->buffer + tmp->size);\n\t tmp = tmp->next;\n     }\n     return NULL;\n }\n\n int (*cm_write_hook)(int) = (int (*)(int)) NULL;\n int (*cm_preread_hook)(int,char*) = (int (*)(int, char*)) NULL;\n void (*cm_postread_hook)(int,char*) = (void (*)(int, char*)) NULL;\n void (*cm_last_postread_hook)() = (void (*)()) NULL;\n static int CMact_on_data(CMConnection conn, CMbuffer cm_buffer, char *buffer, long length);\n\n static void process_pending_queue(CManager cm, void *junk)\n {\n     /* shortcircuit if no data, no lock */\n     if (!cm->pending_data_queue) return;\n\n     CManager_lock(cm);\n     while (cm->pending_data_queue) {\n\t pending_queue entry = cm->pending_data_queue;\n\t int result;\n\t cm->pending_data_queue = entry->next;\n\t result = CMact_on_data(entry->conn, entry->buffer, entry->buffer->buffer, entry->length);\n\t if (result != 0) {\n\t     printf(\"in process pending, CMact_on_data returned %d\\n\", result);\n\t }\n\t cm_return_data_buf(cm, entry->buffer);\n\t free(entry);\n     }\n     CManager_unlock(cm);\n }\n\n static void add_buffer_to_pending_queue(CManager cm, CMConnection conn, CMbuffer buf, long length)\n {\n     assert(CManager_locked(cm));\n     pending_queue entry = malloc(sizeof(struct pending_queue_entry));\n     entry->next = NULL;\n     entry->conn = conn;\n     entry->buffer = buf;\n     entry->length = length;\n     if (!cm->pending_data_queue) {\n\t cm->pending_data_queue = entry;\n     } else {\n\t pending_queue last = cm->pending_data_queue;\n\t pending_queue tmp = last->next;\n\t while (tmp) {\n\t     last = tmp;\n\t     tmp = tmp->next;\n\t }\n\t last->next = entry;\n     }\n     CMwake_server_thread(cm);\n }\n\n static\n CMbuffer\n fill_cmbuffer(CManager cm, char *buf, long length)\n {\n     CMbuffer ret = cm_get_data_buf(cm, length);\n     memcpy(ret->buffer, buf, length);\n     return ret;\n }\n\n extern void CMDataAvailable(transport_entry trans, CMConnection conn)\n {\n     CManager cm = conn->cm;\n     int do_read = 1;\n     int read_msg_count = 0;\n     long read_byte_count = 0;\n     int result;\n     static int first = 1;\n     static int read_ahead_msg_limit = 50;\n     static long read_ahead_byte_limit = 1024*1024*1024;\n     static int use_blocking_reads = 1;\n     int first_four = 0;\n     char *tmp_message_buffer = NULL;\n     int data_length;\n     CMbuffer message_buffer;\n     long buffer_full_point, buffer_data_end;\n\n     /* called from the transport, grab the locks */\n     if (first) {\n\t char *tmp;\n\t first = 0;\n\t tmp = getenv(\"CMReadAheadMsgLimit\");\n\t if (tmp != NULL) {\n\t     if (sscanf(tmp, \"%d\", &read_ahead_msg_limit) != 1) {\n\t\t printf(\"Read ahead msg limit \\\"%s\\\" not parsed\\n\", tmp);\n\t     }\n\t }\n\t tmp = getenv(\"CMReadAheadByteLimit\");\n\t if (tmp != NULL) {\n\t     if (sscanf(tmp, \"%ld\", &read_ahead_byte_limit) != 1) {\n\t\t printf(\"Read ahead byte limit \\\"%s\\\" not parsed\\n\", tmp);\n\t     }\n\t }\n\t tmp = getenv(\"CMBlockingReads\");\n\t if (tmp != NULL) {\n\t     use_blocking_reads = atoi(tmp);\n\t }\n     }\n\n     if (conn->buffer_full_point == 0) {\n\t /* nothing saved from last invocation */\n\t message_buffer = NULL;\n\t buffer_full_point = 0;\n\t buffer_data_end = 0;\n     } else {\n\t /* message_buffer, buffer_full_point and buffer_data_end cached from last call to CMDataAvailable */\n\t message_buffer = conn->message_buffer;\n\t conn->message_buffer = NULL;\n\t buffer_full_point = conn->buffer_full_point;\n\t conn->buffer_full_point = 0;\n\t buffer_data_end = conn->buffer_data_end;\n\t conn->buffer_data_end = 0;\n     }\n  start_read:\n     if (conn->failed) {\n\t return;\n     }\n     if (buffer_full_point == 0) {\n\t buffer_full_point = 4; /* read first 4 bytes first thing */\n\t buffer_data_end = 0; /* no bytes read yet */\n\t first_four = 1;\n     }\n     if (trans->read_to_buffer_func) {\n\t CMtrace_out(cm, CMLowLevelVerbose, \"CMdata continuing read, already have %ld bytes, trying to read total %ld\\n\", buffer_data_end, buffer_full_point);\n     } else {\n\t CMtrace_out(cm, CMLowLevelVerbose, \"CMdata block read beginning\\n\");\n     }\t\n     if (buffer_full_point < HEADER_BUFFER_SIZE) {\n\t tmp_message_buffer = &conn->header_buffer[0];\n     } else {\n\t if (message_buffer == NULL) {\n\t     /* we had data in the header buffer, but need more space */\n\t     message_buffer = cm_get_data_buf(cm, buffer_full_point);\n\t     memcpy(message_buffer->buffer, &conn->header_buffer[0],\n\t\t    buffer_data_end);\n\t     tmp_message_buffer = message_buffer->buffer;\n\t } else {\n\t     /* make sure buffer is big enough */\n\t     cm_extend_data_buf(cm, message_buffer, buffer_full_point);\n\t     tmp_message_buffer = message_buffer->buffer;\n\t }\n     }\n     if (cm_preread_hook) {\n\t do_read = cm_preread_hook(buffer_full_point - buffer_data_end, tmp_message_buffer);\n     }\n     if (do_read) {\n\t if (trans->read_to_buffer_func) {\n\t /* \n\t  * read_to_buffer functionality present means we can read the transport directly to any memory area\n\t  * This gives us the most flexibility in managing our data.  \n\t  *   At this point, tmp_message_buffer is the char* buffer to which we want to read\n\t  *   If non-NULL, message_buffer is the CMBuffer that holds this memory\n\t  *   buffer_data_end is how much data is already in the buffer\n\t  *   buffer_full_point is how much data we think we need for the message to be complete\n\t  */\n\t     int read_len = buffer_full_point - buffer_data_end;\n\t     char *read_target_buf = tmp_message_buffer + buffer_data_end;\n\t     /* \n\t      * non blocking is True only if :\n\t      *    - we're reading the first four bytes (first_four is true) and use_read_thread is false\n\t      *    - or use_blocking_reads is false and use_read_thread is false\n\t      */\n\t     int non_blocking = first_four || !use_blocking_reads;\n\t     int actual;\n\t     if (conn->use_read_thread) {\n\t\t non_blocking = 0;\n\t\t CManager_unlock(cm);\n\t     }\n\t     if (read_len == 0) {\n\t\t /* should never happen that we are here but don't need more data */\n\t\t printf(\"Seriously bad shit\\n\");\n\t     }\n\t     actual = trans->read_to_buffer_func(&CMstatic_trans_svcs, \n\t\t\t\t\t\t conn->transport_data, \n\t\t\t\t\t\t read_target_buf, read_len, non_blocking);\n\t     if (conn->use_read_thread) {\n\t\t CManager_lock(cm);\n\t     }\n\t     if (actual == -1) {\n\t\t CMtrace_out(cm, CMLowLevelVerbose, \n\t\t\t     \"CMdata read failed, actual %d, failing connection %p\\n\", actual, conn);\n\t\t CMtrace_out(conn->cm, CMFreeVerbose, \"Calling connection failed read_len with dereference %p\\n\", conn);\n\t\t INT_CMConnection_failed(conn);\n\t\t return;\n\t     }\n\t     buffer_data_end += actual;\n\t     if (actual < read_len) {\n\t\t /* partial read, we know we don't have enough data now, roll on */\n\t\t CMtrace_out(cm, CMLowLevelVerbose, \n\t\t\t     \"CMdata read partial, got %d\\n\", actual);\n\t\t /* save state and return */\n\t\t conn->message_buffer = message_buffer;\n\t\t conn->buffer_full_point = buffer_full_point;\n\t\t conn->buffer_data_end = buffer_data_end;\n\t\t return;\n\t     }\n\t     data_length = buffer_data_end;\n\t } else {\n\t     int offset;\n\t     message_buffer = trans->read_block_func(&CMstatic_trans_svcs, \n\t\t\t\t\t\t     conn->transport_data,\n\t\t\t\t\t\t     &data_length, &offset);\n\t     if (message_buffer == NULL) {\n\t\t CMtrace_out(cm, CMLowLevelVerbose, \n\t\t\t     \"CMdata NULL return from read_block_func\");\n\t\t return;\n\t     }\n\t     message_buffer->ref_count++;\n\t     CMtrace_out(cm, CMBufferVerbose, \"Received buffer %p from transport read_block_func, increment ref count, now is %d\\n\", message_buffer, message_buffer->ref_count);\n\t     tmp_message_buffer = message_buffer->buffer + offset;\n\t     buffer_data_end = data_length;\n\t     cm->abort_read_ahead = 1;\n\n\t     if (data_length == -1) {\n\t\t CMtrace_out(cm, CMLowLevelVerbose, \n\t\t\t     \"CMdata read failed, actual %d, failing connection %p\\n\", data_length, conn);\n\t\t CMtrace_out(conn->cm, CMFreeVerbose, \"Calling connection failed with dereference, data length %p\\n\", conn);\n\t\t INT_CMConnection_failed(conn);\n\t\t return;\n\t     }\n\t     if (data_length == 0) {\n\t\t return;\n\t     }\n\t     if (tmp_message_buffer == NULL) {\n\t\t CMtrace_out(cm, CMLowLevelVerbose, \"CMdata read_block failed, failing connection %p\\n\", conn);\n\t\t CMtrace_out(conn->cm, CMFreeVerbose, \"Calling connection failed read_block withdereference %p\\n\", conn);\n\t\t INT_CMConnection_failed(conn);\n\t\t return;\n\t     }\n\t     CMtrace_out(cm, CMLowLevelVerbose, \"CMdata read_block returned %d bytes of data\\n\", data_length);\n\t }\n\t if (cm_postread_hook) {\n\t     cm_postread_hook(data_length, tmp_message_buffer);\n\t }\n     }\n     result = CMact_on_data(conn, message_buffer, tmp_message_buffer, data_length);\n     if (result != 0) {\n\t /* whoops, reevaluate.  We need more data */\n\t buffer_full_point += result;\n\t goto start_read;\n     }\n     /* OK, we consumed all data */\n     buffer_full_point = 0;\n     buffer_data_end = 0;\n     if (message_buffer) {\n\t cm_return_data_buf(cm, message_buffer);\n\t message_buffer = NULL;\n     }\n     read_msg_count++;\n     read_byte_count += data_length;\n\n     /* try read-ahead */\n     if (cm->abort_read_ahead == 1) {\n\t cm->abort_read_ahead = 0;\n\t CMtrace_out(cm, CMDataVerbose, \n\t\t     \"CM - readahead not tried, aborted for condition signal\\n\");\n\t return;\n     }\t\n     if ((read_msg_count > read_ahead_msg_limit) || \n\t (read_byte_count > read_ahead_byte_limit)) {\n\t CMtrace_out(cm, CMDataVerbose, \n\t\t     \"CM - readahead not tried, fairness, read %d msgs, %ld bytes\\n\",\n\t\t     read_msg_count, read_byte_count);\n\t return;\n     } else {\n\t goto start_read;\n     }\n }\n\n static void\n CMdo_handshake(CMConnection conn, int handshake_version, int byte_swap, char *base)\n {\n     int do_send = 1;\n     int remote_format_server_ID;\n     int remote_CManager_ID;\n     if (byte_swap) {\n\t ((char*)&remote_format_server_ID)[0] = base[3];\n\t ((char*)&remote_format_server_ID)[1] = base[2];\n\t ((char*)&remote_format_server_ID)[2] = base[1];\n\t ((char*)&remote_format_server_ID)[3] = base[0];\n\t ((char*)&remote_CManager_ID)[0] = base[7];\n\t ((char*)&remote_CManager_ID)[1] = base[6];\n\t ((char*)&remote_CManager_ID)[2] = base[5];\n\t ((char*)&remote_CManager_ID)[3] = base[4];\n     } else {\n\t remote_format_server_ID = ((int *) base)[0];\n\t remote_CManager_ID = ((int *) base)[1];\n     }\n\n     CMtrace_out(conn->cm, CMLowLevelVerbose, \"CM - Received CONN handshake message\\n\");\n     if ((remote_CManager_ID & 0x80000000) == 0x80000000) {\n\t /* the other fellow already has our ID */\n\t do_send = 0;\n\t remote_CManager_ID ^= 0x80000000;  /* kill high bit */\n     }\n     if (conn->remote_format_server_ID != 0) {\n\t if (conn->remote_format_server_ID != remote_format_server_ID) {\n\t     printf(\"Gaak.  Got a second handshake on connection 0x%p, with a different format server ID %x vs. %x\\n\",\n\t\t    conn, conn->remote_format_server_ID, remote_format_server_ID);\n\t } else {\n\t     printf(\"Less Gaak.  Got a second handshake on connection 0x%p, remote id %x\\n\",\n\t\t    conn, conn->remote_format_server_ID);\n\t }\n     } else {\n\t conn->remote_format_server_ID = remote_format_server_ID;\n\t conn->remote_CManager_ID = remote_CManager_ID;\n\t CMtrace_out(conn->cm, CMLowLevelVerbose, \"CM - CONN handshake condition %d\\n\", conn->handshake_condition);\n\t if (conn->handshake_condition != -1) {\n\t     INT_CMCondition_signal(conn->cm, conn->handshake_condition);\n\t     conn->handshake_condition = -1;\n\t }\n     }\n     if (do_send) {\n\t CMtrace_out(conn->cm, CMLowLevelVerbose, \"CM - Sending CONN handshake message\\n\");\n\t send_and_maybe_wait_for_handshake(conn->cm, conn);\n     } else {\n\t CMtrace_out(conn->cm, CMLowLevelVerbose, \"CM - *NOT* Sending CONN handshake message\\n\");\n     }\n }\n\n static int\n CMact_on_data(CMConnection conn, CMbuffer cm_buffer, char *buffer, long length)\n {\n     char *base = buffer;\n     char *check_sum_base = buffer;\n     int byte_swap = 0;\n     int get_attrs = 0;\n     int skip = 0;\n     int performance_msg = 0, event_msg = 0, evcontrol_msg = 0, handshake = 0;\n     int performance_func = 0, handshake_version = 0;\n     CMbuffer cm_decode_buf = NULL;\n     attr_list attrs = NULL;\n     int64_t data_length, decoded_length;\n     int attr_length = 0, i;\n     int header_len;\n     int stone_id;\n     char *decode_buffer = NULL, *data_buffer;\n     FFSTypeHandle local_format, original_format;\n     CManager cm = conn->cm;\n     CMincoming_format_list cm_format = NULL;\n     int message_key;\n     unsigned char checksum;\n     int short_length = 1;\n\n     if (length < 4) {\n\t return 4 - length;\n     }\n     message_key = 0x00ffff00 & *((int*)buffer);\n     switch (message_key) {  /* assume 4-byte int */\n     case 0x00444d00: /* \\0DMC reversed byte order */\n\t byte_swap = 1;\n     case 0x004d4400:  /* CMD\\0 */\n\t break;\n     case 0x00414d00: /* \\0AMC reversed byte order */\n\t byte_swap = 1;\n     case 0x004d4100:  /* CMA\\0 */\n\t get_attrs = 1;\n\t break;\n     case 0x00005645: /* \\0CVE reversed byte order */\n\t byte_swap = 1;\n     case 0x45560000: /* EVC\\0 */\n\t evcontrol_msg = 1;\n\t break;\n     case 0x00504d00: /* \\0PMC reversed byte order */\n\t byte_swap = 1;\n     case 0x004d5000:  /* CMP\\0 */\n\t performance_msg = 1;\n\t short_length = 0;\n\t break;\n     case 0x004c4d00: /* \\0LMC reversed byte order */\n\t byte_swap = 1;\n     case 0x004d4c00:  /* CML\\0 */\n\t event_msg = 1;\n\t get_attrs = 1;\n\t break;\n     case 0x00484d00: /* \\0HMC reversed byte order - handshake */\n\t byte_swap = 1;\n     case 0x004d4800:  /* CMH\\0 - handshake */\n\t handshake = 1;\n\t get_attrs = 0;\n\t break;\n     default:\n\t /*  non CM message */\n\t /*  lookup registered message prefixes and try to find handler */\n\t /*  otherwise give up */\n       {\n\t   int ret;\n\t   CMbuffer local = NULL;\n #ifdef EVER_HAVE_HANDLERS_OTHER_THAN_PBIO\n\t   if (cm_buffer == NULL) {\n\t       local = fill_cmbuffer(cm, buffer, length);\n\t       buffer = local->buffer;\n\t   }\n #endif\n\t   CManager_unlock(cm);\n\t   switch (*(int*)buffer) {\n\t   case 0x5042494f:\n\t   case 0x4f494250:  /* incoming FFS format protocol message */\n\t     {\n\t       extern int CM_pbio_query(CMConnection conn, CMTransport trans,\n\t\t\t\t\tchar *buffer, long length);\n\t       \n\t       int ret = CM_pbio_query(conn, conn->trans, buffer, length);\n\t       CManager_lock(cm);\n\t       return ret;\n\t     }\n\t   }\n\t   ret = CMdo_non_CM_handler(conn, *(int*)buffer, buffer, length);\n\t   CManager_lock(cm);\n\t   if (local) cm_return_data_buf(cm, local);\n\t   if (ret == -1) {\n\t       printf(\"Unknown message on connection %lx, failed %d, closed %d, %x\\n\", (long) conn, conn->failed, conn->closed, *(int*)buffer);\n\t       CMtrace_out(conn->cm, CMFreeVerbose, \"Calling connection unknown message failed with dereference %p\\n\", conn);\n\t       INT_CMConnection_failed(conn);\n\t   }\n\t   return 0;\n       }\n     }\n\n     if (get_attrs == 1) {\n\t if (!event_msg) {\n\t     header_len = 16;/* magic plus two 4-byte sizes (attrs + data) */\n\t     skip = 4;\n\t } else {\n\t     header_len = 16;\n\t }\n     } else {\n\t if (short_length) {\n\t     header_len = 8; /* magic plus 4-byte size */\n\t } else {\n\t     header_len = 12; /* magic plus 8-byte size */\n\t }\n     }\n\n     if (length < header_len) {\n\t return header_len - length;\n     }\n     base = buffer + 4 + skip; /* skip used data */\n     if (short_length) {\n\t if (byte_swap) {\n\t     int tmp;\n #ifdef WORDS_BIGENDIAN\t    \n\t     checksum = (unsigned char) check_sum_base[0];\n #else\n\t     checksum = (unsigned char) check_sum_base[3];\n #endif\n\t     ((char*)&tmp)[0] = base[3];\n\t     ((char*)&tmp)[1] = base[2];\n\t     ((char*)&tmp)[2] = base[1];\n\t     ((char*)&tmp)[3] = base[0];\n\t     data_length = tmp;\n\t     if (header_len != 8) {\n\t\t ((char*)&attr_length)[0] = base[7];\n\t\t ((char*)&attr_length)[1] = base[6];\n\t\t ((char*)&attr_length)[2] = base[5];\n\t\t ((char*)&attr_length)[3] = base[4];\n\t     }\n\t } else {\n #ifdef WORDS_BIGENDIAN\t    \n\t     checksum = (unsigned char) check_sum_base[3];\n #else\n\t     checksum = (unsigned char) check_sum_base[0];\n #endif\n\t     data_length = ((int *) base)[0];\n\t     if (header_len != 8) {\n\t\t attr_length = ((int *) base)[1];\n\t     }\n\t }\n     } else {\n\t if (byte_swap) {\n #ifdef WORDS_BIGENDIAN\t    \n\t     checksum = (unsigned char) check_sum_base[0];\n #else\n\t     checksum = (unsigned char) check_sum_base[3];\n #endif\n\t     int tmp;\n\t     ((char*)&tmp)[0] = base[3];\n\t     ((char*)&tmp)[1] = base[2];\n\t     ((char*)&tmp)[2] = base[1];\n\t     ((char*)&tmp)[3] = base[0];\n\t     data_length = ((int64_t)tmp) << 32;\n\t     ((char*)&tmp)[0] = base[7];\n\t     ((char*)&tmp)[1] = base[6];\n\t     ((char*)&tmp)[2] = base[5];\n\t     ((char*)&tmp)[3] = base[4];\n\t     if (header_len != 12) {\n\t\t ((char*)&attr_length)[0] = base[11];\n\t\t ((char*)&attr_length)[1] = base[10];\n\t\t ((char*)&attr_length)[2] = base[9];\n\t\t ((char*)&attr_length)[3] = base[8];\n\t     }\n\t } else {\n #ifdef WORDS_BIGENDIAN\t    \n\t     checksum = (unsigned char) check_sum_base[3];\n #else\n\t     checksum = (unsigned char) check_sum_base[0];\n #endif\n\t     data_length = ((int64_t)(((int *) base)[0])) << 32;\n\t     data_length += ((int *) base)[1];\n\t     if (header_len != 12) {\n\t\t attr_length = ((int *) base)[1];\n\t     }\n\t }\n     }\n     if (performance_msg || evcontrol_msg) {\n\t performance_func = 0xff & (data_length >> 56);\n\t data_length &= 0xffffffffffffff;\n\t data_length -= 12;  /* subtract off header size */\n     }\n     if (handshake) {\n\t handshake_version = 0xff & (data_length >> 24);\n\t data_length &= 0xffffff;\n\t data_length -= 8;  /* subtract off header size */\n     }\n     if (event_msg) {\n\t if (byte_swap) {\n\t     ((char*)&stone_id)[0] = base[11];\n\t     ((char*)&stone_id)[1] = base[10];\n\t     ((char*)&stone_id)[2] = base[9];\n\t     ((char*)&stone_id)[3] = base[8];\n\t } else {\n\t     stone_id = ((int *) base)[2];\n\t }\n     }\n\n     if (length < header_len + data_length + attr_length) {\n\t return header_len + data_length + attr_length - \n\t     length;\n     }\n     /* At this point, the message is accepted.  Determine processing */\n     base = buffer + header_len;\n     if (handshake) {\n\t CMdo_handshake(conn, handshake_version, byte_swap, base);\n\t return 0;\n     }\n     if (checksum != 0) {\n\t unsigned char calculated_checksum = 0;\n\t for (i=4; i < length; i++) {\n\t     calculated_checksum += ((unsigned char *)buffer)[i];\n\t }\n\t if (calculated_checksum != checksum) {\n\t     printf(\"Discarding incoming message because of corruption.  Checksum mismatch got %x, expected %x\\n\",\n\t\t    calculated_checksum, checksum);\n\t     printf(\"Message was : \");\n\t     for (i=0 ; i < length; i++) {\n\t\t printf(\" %02x\",  ((unsigned char *)buffer)[i]);\n\t     }\n\t     printf(\"\\n\");\n\t     return 0;\n\t }\n     }\n     if (performance_msg) {\n\t CMdo_performance_response(conn, data_length, performance_func, byte_swap,\n\t\t\t\t   base);\n\t return 0;\n     } else if (evcontrol_msg) {\n\t int arg;\n\t if (byte_swap) {\n\t     ((char*)&arg)[0] = base[3];\n\t     ((char*)&arg)[1] = base[2];\n\t     ((char*)&arg)[2] = base[1];\n\t     ((char*)&arg)[3] = base[0];\n\t } else {\n\t     arg = ((int *) base)[0];\n\t }\n #ifdef EV_INTERNAL_H\n\t INT_EVhandle_control_message(conn->cm, conn, (unsigned char) performance_func, arg);\n #endif\n\t return 0;\n     }\n     data_buffer = base + attr_length;\n     if (attr_length != 0) {\n\t attrs = CMdecode_attr_from_xmit(conn->cm, base);\n\t if (CMtrace_on(conn->cm, CMDataVerbose)) {\n\t     fprintf(cm->CMTrace_file, \"CM - Incoming read attributes -> \");\n\t     fdump_attr_list(cm->CMTrace_file, attrs);\n\t }\n     }\n     if (event_msg) {\n\t CMbuffer local = NULL;\n\t CMtrace_out(cm, CMDataVerbose, \"CM - Receiving event message data len %ld, attr len %d, stone_id %x\\n\",\n\t\t     (long)data_length, attr_length, stone_id);\n\t if (attrs == NULL){\n\t     attrs = CMcreate_attr_list(cm);\n\t }\n\t set_int_attr(attrs, CM_EVENT_SIZE, data_length);\n\t set_long_attr(attrs, CM_INCOMING_CONNECTION, (long)conn);\n\n\t if (cm_buffer == NULL) {\n\t     local = fill_cmbuffer(cm, buffer, length);\n\t     data_buffer = (data_buffer - buffer) + local->buffer;\n\t     buffer = local->buffer;\n\t     cm_buffer = local;\n\t }\n #ifdef EV_INTERNAL_H\t\n\t internal_cm_network_submit(cm, cm_buffer, attrs, conn, data_buffer,\n\t\t\t\t    data_length, stone_id);\n #endif\n\t if (local) cm_return_data_buf(cm, local);\n\t free_attr_list(attrs);\n\t return 0;\n     }\n     {\n\t FMFormat format = FMformat_from_ID(FMContext_from_FFS(cm->FFScontext), data_buffer);\n\t char *incoming_name;\n\t if (format == NULL) {\n\t     printf(\"BAD INCOMING DATA\\n\");\n\t     return 0;\n\t }\n\t incoming_name = name_of_FMformat(format);\n\n\t for (i = 0; i < cm->reg_format_count; i++) {\n\t     if ((cm->reg_formats[i]->registration_pending) && \n\t\t (strcmp(incoming_name, cm->reg_formats[i]->format_name) == 0)) {\n\t\t CMcomplete_format_registration(cm->reg_formats[i], 0);\n\t     }\n\t }\n     }\n     local_format = FFS_target_from_encode(conn->cm->FFScontext, data_buffer);\n     original_format = FFSTypeHandle_from_encode(conn->cm->FFScontext, data_buffer);\n     if (local_format == NULL) {\n\t if (conn->cm->unregistered_format_handler) {\n\t     conn->cm->unregistered_format_handler(conn, name_of_FMformat(FMFormat_of_original(original_format)));\n\t } else {\n\t     fprintf(stderr, \"No conversion found for incoming CM message\\n\");\n\t }\n\t return 0;\n     }\n     CMtrace_out(cm, CMDataVerbose, \"CM - Receiving record of type %s, FFSformat %p\\n\", \n\t\t name_of_FMformat(FMFormat_of_original(original_format)), original_format);\n     for (i=0; i< cm->in_format_count; i++) {\n\t if (cm->in_formats[i].format == local_format) {\n\t     cm_format = &cm->in_formats[i];\n\t     CMtrace_out(cm, CMDataVerbose, \"CM - Found incoming cm_format %p, matching FFSformat %p\\n\", \n\t\t\t cm_format, local_format);\n\t }\n     }\n     if (cm_format == NULL) {\n\t cm_format = CMidentify_rollbackCMformat(cm, data_buffer);\n\t CMtrace_out(cm, CMDataVerbose, \"CM - Created cm_format %p, matching FFSformat %p\\n\", \n\t\t     cm_format, original_format);\n\t if(cm_format) {\n\t     CMtrace_out(cm, CMDataVerbose, \"CM - Calling CMcreate_conversion type %s, format %p\\n\", \n\t\t\t name_of_FMformat(FMFormat_of_original(original_format)), original_format);\n\t     CMcreate_conversion(cm, cm_format);\n\t     CMtrace_out(cm, CMDataVerbose, \"CM - after CMcreate_conversion format %p, has_conversion is %d\\n\", \n\t\t\t original_format, FFShas_conversion(original_format));\n\t }\n     }\n\n     if ((cm_format == NULL) || (cm_format->handler == NULL)) {\n\t fprintf(stderr, \"CM - No handler for incoming data of this version of format \\\"%s\\\"\\n\",\n\t\t name_of_FMformat(FMFormat_of_original(original_format)));\n\t return 0;\n     } else if (!FFShas_conversion(original_format)) {\n\t CMcreate_conversion(cm, cm_format);\n     }\n     assert(FFShas_conversion(original_format));\n\n     if (FFSdecode_in_place_possible(original_format)) {\n\t if (!FFSdecode_in_place(cm->FFScontext, data_buffer, \n\t\t\t\t\t(void**) (long) &decode_buffer)) {\n\t     printf(\"Decode failed\\n\");\n\t     return 0;\n\t }\n     } else {\n\t decoded_length = FFS_est_decode_length(cm->FFScontext, data_buffer, data_length);\n\t cm_decode_buf = cm_get_data_buf(cm, decoded_length);\n\t decode_buffer = cm_decode_buf->buffer;\n\t FFSdecode_to_buffer(cm->FFScontext, data_buffer, decode_buffer);\n     }\n     if(cm_format->older_format) {\n #ifdef EVOL\n\t if(!process_old_format_data(cm, cm_format, &decode_buffer, &cm_decode_buf)){\n\t     return 0;\n\t }\n #endif\n     }\n     if (CMtrace_on(conn->cm, CMDataVerbose)) {\n\t static int dump_char_limit = 256;\n\t static int warned = 0;\n\t static int size_set = 0;\n\t int r;\n\t if (size_set == 0) {\n\t     char *size_str = getenv(\"CMDumpSize\");\n\t     size_set++;\n\t     if (size_str != NULL) {\n\t\t dump_char_limit = atoi(size_str);\n\t     }\n\t }\n\t fprintf(cm->CMTrace_file, \"CM - record type %s, contents are:\\n  \", name_of_FMformat(FMFormat_of_original(cm_format->format)));\n\t r = FMfdump_data(cm->CMTrace_file, FMFormat_of_original(cm_format->format), decode_buffer, dump_char_limit);\n\t if (!r && !warned) {\n\t     printf(\"\\n\\n  ****  Warning **** CM record dump truncated\\n\");\n\t     printf(\"  To change size limits, set CMDumpSize environment variable.\\n\");\n\t     warned++;\n\t }\n\t fprintf(cm->CMTrace_file, \"\\n=======\\n\");\n     }\n     if (attrs == NULL) {\n\t attrs = CMcreate_attr_list(cm);\n\t CMattr_merge_lists(cm, attrs, conn->attrs);\n     } else {\n\t CMattr_merge_lists(cm, attrs, conn->attrs);\n     }\n\n     /* \n      *  Handler may recurse, so clear these structures first\n      */\n     CMtrace_out(cm, CMFreeVerbose, \"CM - add reference connection %p - handler\\n\", conn);\n     INT_CMConnection_add_reference(conn);\n     {\n         CMHandlerFunc handler = cm_format->handler;\n\t void *client_data = cm_format->client_data;\n\t CMbuffer local = NULL;\n\t if ((cm_buffer == NULL) && (decode_buffer == NULL)) {\n\t     local = fill_cmbuffer(cm, buffer, length);\n\t     buffer = local->buffer;\n\t }\n\t CManager_unlock(cm);\n\t handler(cm, conn, decode_buffer, client_data, attrs);\n\t CManager_lock(cm);\n\t if (local) cm_return_data_buf(cm, local);\n\t CMtrace_out(cm, CMFreeVerbose, \"CM - delete reference connection %p - handler\\n\", conn);\n\t INT_CMConnection_dereference(conn);\n     }\n     if (cm_decode_buf) {\n\t cm_return_data_buf(cm, cm_decode_buf);\n\t cm_decode_buf = NULL;\n     }\n     if (attrs) {\n\t INT_CMfree_attr_list(cm, attrs);\n\t attrs = NULL;\n     }\n     CMtrace_out(cm, CMDataVerbose, \"CM - Finish processing - record of type %s\\n\", \n\t\t name_of_FMformat(FMFormat_of_original(original_format)));\n     return 0;\n }\n\n void *\n INT_CMtake_buffer(CManager cm, void *data)\n {\n     CMbuffer buf = cm_buffer_lookup(cm, data);\n     if (buf == NULL) {\n\t fprintf(stderr, \"Error: INT_CMtake_buffer called with record %p not associated with cm\\n\", data);\n\t cm_buffer_dump_list(cm);\n\t return NULL;\n     } else {\n\t buf->ref_count++;\n\t CMtrace_out(cm, CMBufferVerbose, \"CMtake_buffer, data %p found buffer %p, ref_count incremented, now %d\\n\", data, buf, buf->ref_count);\n\t return data;\n     }\n }\n\n extern void\n INT_CMreturn_buffer(CManager cm, void *data)\n {\n     CMbuffer buf = cm_buffer_lookup(cm, data);\n     if (buf == NULL) {\n\t fprintf(stderr, \"Error: INT_CMreturn_buffer called with record %p not associated with cm\\n\", data);\n\t cm_buffer_dump_list(cm);\n\t return;\n     }\n     CMtrace_out(cm, CMBufferVerbose, \"CMreturn_buffer, data %p found buffer %p, ref_count now %d, calling cm_return_data_buf\\n\", data, buf, buf->ref_count);\n     cm_return_data_buf(cm, buf);\n }\n\n void\n INT_CMregister_handler(CMFormat format, CMHandlerFunc handler,\n\t\t\tvoid *client_data)\n {\n     CManager cm = format->cm;\n     int i;\n     format->handler = handler;\n     format->client_data = client_data;\n\n     for (i=0; i< cm->in_format_count; i++) {\n\t if (cm->in_formats[i].format == format->ffsformat) {\n\t     if (!cm->in_formats[i].handler) {\n\t\t cm->in_formats[i].handler = handler;\n\t\t cm->in_formats[i].client_data = client_data;\n\t     } else if ((cm->in_formats[i].handler != handler) ||\n\t\t\t(cm->in_formats[i].client_data != client_data)) {\n\t\t fprintf(stderr, \"Warning, CMregister_handler() called multiple times for the same format with different handler or client_data\\n\");\n\t\t fprintf(stderr, \"Repeated calls will be ignored\\n\");\n\t     }\n\t }\n     }\n }\n\nextern void\nINT_CMregister_invalid_message_handler(CManager cm, CMUnregCMHandler handler)\n{\n    cm->unregistered_format_handler = handler;\n}\n\n extern int\n INT_CMwrite(CMConnection conn, CMFormat format, void *data)\n {\n     return INT_CMwrite_attr(conn, format, data, NULL);\n }\n\n extern void CMWriteQueuedData(transport_entry trans, CMConnection conn)\n {\n     attr_list attrs = NULL;  /* GSE fix */\n     CMtrace_out(conn->cm, CMLowLevelVerbose, \"CMWriteQueuedData, conn %lx, header %d, attr %d\\n\", \n\t\t (long)conn, conn->queued_data.rem_header_len, \n\t\t conn->queued_data.rem_attr_len);\n     if (conn->queued_data.rem_header_len != 0) {\n\t struct FFSEncodeVec tmp_vec[1];\n\t int actual;\n\t tmp_vec[0].iov_base = conn->queued_data.rem_header;\n\t tmp_vec[0].iov_len = conn->queued_data.rem_header_len;\n\t actual = trans->NBwritev_func(&CMstatic_trans_svcs,\n\t\t\t\t\t    conn->transport_data,\n\t\t\t\t\t    &tmp_vec[0], 1,\n\t\t\t\t\t    attrs);\n\t if (actual == -1) {\n\t     goto failed;\n\t }\n\t if (actual < conn->queued_data.rem_header_len) {\n\t     conn->queued_data.rem_header_len -= actual;\n\t     memmove(&conn->queued_data.rem_header[0],\n\t\t     &conn->queued_data.rem_header[actual],\n\t\t     conn->queued_data.rem_header_len);\n\t     CMtrace_out(conn->cm, CMLowLevelVerbose, \"CMWriteQueuedData, conn %p, remaining header %d\\n\", \n\t\t\t conn, conn->queued_data.rem_header_len);\n\t     return;\n\t }\n     }\n     if (conn->queued_data.rem_attr_len != 0) {\n\t struct FFSEncodeVec tmp_vec[1];\n\t int actual;\n\t tmp_vec[0].iov_base = conn->queued_data.rem_attr_base;\n\t tmp_vec[0].iov_len = conn->queued_data.rem_attr_len;\n\t actual = trans->NBwritev_func(&CMstatic_trans_svcs,\n\t\t\t\t\t    conn->transport_data,\n\t\t\t\t\t    &tmp_vec[0], 1,\n\t\t\t\t\t    attrs);\n\t if (actual == -1) {\n\t     goto failed;\n\t }\n\t if (actual < conn->queued_data.rem_attr_len) {\n\t     conn->queued_data.rem_attr_len -= actual;\n\t     conn->queued_data.rem_attr_base += actual;\n\t     CMtrace_out(conn->cm, CMLowLevelVerbose, \"CMWriteQueuedData, conn %p, remaining attr %d\\n\", \n\t\t\t conn, conn->queued_data.rem_attr_len);\n\t     return;\n\t }\n     }\n     if (conn->queued_data.vector_data) {\n\t int vec_count = 0;\n\t int length = 0;\n\t FFSEncodeVector vec = conn->queued_data.vector_data;\n\t int actual = 0;\n\n\t while(vec[vec_count].iov_base != NULL) {\n\t     length += vec[vec_count].iov_len;\n\t     vec_count++;\n\t }\n\t actual = trans->NBwritev_func(&CMstatic_trans_svcs,\n\t\t\t\t\t    conn->transport_data,\n\t\t\t\t\t    vec, vec_count,\n\t\t\t\t\t    attrs);\n\t if (actual == -1) {\n\t     goto failed;\n\t }\n\t if (actual < length) {\n\t     int i = 0;\n\t     CMtrace_out(conn->cm, CMLowLevelVerbose, \"Continued partial pending write, %d bytes sent\\n\", actual);\n\t     while (actual > vec[i].iov_len) {\n\t\t actual -= vec[i].iov_len;\n\t\t i++;\n\t\t vec_count--;\n\t     }\n\t     vec[i].iov_len -= actual;\n\t     vec[i].iov_base = (char*)vec[i].iov_base + actual;\n\t     conn->queued_data.vector_data = &vec[i];\n\t     CMtrace_out(conn->cm, CMLowLevelVerbose, \"CMWriteQueuedData, conn %lx, %d remaining data vectors\\n\", \n\t\t\t (long)conn, vec_count);\n\t     return;\n\t }\n     }\n     if (conn->queued_data.buffer_to_free) {\n\t cm_return_data_buf(conn->cm, conn->queued_data.buffer_to_free);\n     }\n     conn->write_pending = 0;\n     conn->trans->set_write_notify(conn->trans, &CMstatic_trans_svcs, \n\t\t\t\t   conn->transport_data, 0);\n\n     if(!CManager_locked(conn->cm)) {\n\t printf(\"Not LOCKED in write queued data!\\n\");\n     }\n     cm_wake_any_pending_write(conn);\n     return;\n  failed:\n     CMtrace_out(conn->cm, CMFreeVerbose, \"Calling write failed connection failed with dereference %p\\n\", conn);\n     INT_CMConnection_failed(conn);\n     if (conn->queued_data.buffer_to_free) {\n\t cm_return_data_buf(conn->cm, conn->queued_data.buffer_to_free);\n\t conn->queued_data.buffer_to_free = NULL;\n     }\n     conn->write_pending = 0;\n     conn->trans->set_write_notify(conn->trans, &CMstatic_trans_svcs, \n\t\t\t\t   conn->transport_data, 0);\n     cm_wake_any_pending_write(conn);\n     return;\n }\n\n static void\n transport_wake_any_pending_write(CMConnection conn)\n {\n\n     conn->write_pending = 0;\n     CMtrace_out(conn->cm, CMTransportVerbose, \"UNSet Pending write for conn %p\\n\", conn);\n     cm_wake_any_pending_write(conn);\n }\n\n static void\n cm_wake_any_pending_write(CMConnection conn)\n {\n     if (conn->write_callbacks) {\n\t int i = 0;\n\t CMConnHandlerListEntry callbacks[16];\n\t int callback_len = conn->write_callback_len;\n\t assert(conn->write_callback_len <= 16);\n\t memcpy(callbacks, conn->write_callbacks, sizeof(callbacks[0]) * conn->write_callback_len);\n\t for (i = 0; i < callback_len; ++i) {\n\t     if (callbacks[i].func) {\n\t\t (callbacks[i].func)(conn->cm, conn, callbacks[i].client_data);\n\t     }\n\t }\n\t CMtrace_out(conn->cm, CMTransportVerbose, \"Completed pending write, did %d notifications\\n\", i);\n     } else {\n\t CMtrace_out(conn->cm, CMTransportVerbose, \"Completed pending write, No notifications\\n\");\n     }\n     CMwake_server_thread(conn->cm);\n }\n\n static void\n cm_set_pending_write(CMConnection conn)\n {\n     assert(CManager_locked(conn->cm));\n     CMtrace_out(conn->cm, CMTransportVerbose, \"Set Pending write for conn %p\\n\", conn);\n     conn->write_pending = 1;\n }\n\n static void\n queue_remaining_write(CMConnection conn, FFSEncodeVector tmp_vec, \n\t\t       FFSEncodeVector pbio_vec, int vec_count,\n\t\t       attr_list attrs, int actual_bytes_written,\n\t\t       int attrs_present)\n {\n     int i = 0, j = 0;\n     int total_bytes = 0;\n     int remaining_bytes = 0;\n\n     for (i=0; i < vec_count; i++) {\n\t total_bytes += tmp_vec[i].iov_len;\n     }\n     remaining_bytes = total_bytes - actual_bytes_written;\n     i = 0;\n     while (actual_bytes_written > tmp_vec[i].iov_len) {\n\t actual_bytes_written -= tmp_vec[i].iov_len;\n\t i++;\n     }\n     tmp_vec[i].iov_len -= actual_bytes_written;\n     tmp_vec[i].iov_base = (char*)tmp_vec[i].iov_base + actual_bytes_written;\n     if (pbio_vec) {\n\t if (attrs_present) {\n\t     pbio_vec[i-2] = tmp_vec[i];\n\t } else {\n\t     pbio_vec[i-1] = tmp_vec[i];\n\t }\n     }\n     actual_bytes_written = 0;\n /*\n  *    Data is either:\n  *    vec 0 = header\n  *    vec 1 = ffs\n  *    vec 2 = ffs\n\n  *    vec 0 = header\n  *    vec 1 = attrs\n  *    vec 2 = ffs\n  *    vec 2 = ffs\n\n  *    vec 0 = header\n  *    vec 1 = notffs\n  *    vec 2 = notffs\n\n  *    vec 0 = header\n  *    vec 1 = attrs\n  *    vec 2 = notffs\n  *    vec 2 = notffs\n  */\n\n     conn->queued_data.buffer_to_free = NULL;\n\n     if (i == 0) {\n\t /* didn't even write the 8 or 12 or 16 or 24 byte header */\n\t assert(sizeof(conn->queued_data.rem_header) >= tmp_vec[0].iov_len);\n\t memcpy(&conn->queued_data.rem_header, tmp_vec[0].iov_base, \n\t\ttmp_vec[0].iov_len);\n\t conn->queued_data.rem_header_len = tmp_vec[0].iov_len;\n     } else {\n\t conn->queued_data.rem_header_len = 0;\n     }\n     if (attrs_present && (i <= 1)) {\n\t /* got stuck in encoded attributes */\n\t conn->queued_data.rem_attr_base = tmp_vec[1].iov_base;\n\t conn->queued_data.rem_attr_len = tmp_vec[1].iov_len;\n\t i++;\n     } else {\n\t conn->queued_data.rem_attr_len = 0;\n     }\n\n\n     /* fixup pbio_vec */\n     j = i - 1;  /* how far into the pbio vector are we? */\n     if (attrs_present) j--;\n     if (j == -1) {\n\t /* no PBIO data */\n\t conn->queued_data.vector_data = NULL;\n\t return;\n     }\n     if (pbio_vec == NULL) {\n\t /* DATA NOT FFS, don't do optimized copying */\n\t /* Errr, something smarter here */\n\t int data_length = remaining_bytes - conn->queued_data.rem_attr_len - conn->queued_data.rem_header_len;\n\t int length = data_length + (sizeof(tmp_vec[0])*2);\n\t char *ptr;\n\t CMbuffer buf = cm_get_data_buf(conn->cm, length);\n\t FFSEncodeVector vec = buf->buffer;\n\t vec[0].iov_len = data_length;\n\t vec[0].iov_base = buf->buffer + (sizeof(tmp_vec[0])*2);\n\t vec[1].iov_len = 0;\n\t vec[1].iov_base = NULL;\n\t conn->queued_data.buffer_to_free = buf;\n\t conn->queued_data.vector_data = vec;\n\t if (i == 0) i=1;\n\t if (attrs_present && i <= 1) i=2;\n\t ptr = vec[0].iov_base;\n\t while (i < vec_count) {\n\t     memcpy(ptr, tmp_vec[i].iov_base, tmp_vec[i].iov_len);\n\t     ptr += tmp_vec[i].iov_len;\n\t     data_length -= tmp_vec[i].iov_len;\n\t     i++;\n\t }\n\t return;\n     } else {\n\t conn->queued_data.buffer_to_free = NULL;\n     }\n     if (j >= 0) {\n\t CMtrace_out(conn->cm, CMLowLevelVerbose, \"Removing from pbio_vec at offset %d\\n\", (int) j);\n\t pbio_vec[j].iov_len -= actual_bytes_written;\n\t pbio_vec[j].iov_base = (char*)pbio_vec[j].iov_base + \n\t     actual_bytes_written;\n     } else {\n\t j = 0;  /* nothing written */\n     }\n\n     /* \n      * copy application data (which had been left in place) into temporary\n      * PBIO buffer as well.\n      */\n     conn->queued_data.vector_data = \n\t copy_all_to_FFSBuffer(conn->io_out_buffer, &pbio_vec[j]);\n     tmp_vec = conn->queued_data.vector_data;\n     i = 0; \n }\n\n static void\n remove_pending_write_callback_by_id(CMConnection conn, int id) {\n     assert(id < conn->write_callback_len && id >= 0);\n     conn->write_callbacks[id].func = NULL;\n }\n\n static void\n remove_pending_write_callback(CMConnection conn, CMWriteCallbackFunc handler,\n\t\t\t       void *client_data)\n {\n     int i = 0;\n     while (conn->write_callbacks[i].func != handler\n\t      && conn->write_callbacks[i].client_data != client_data) i++;\n     conn->write_callbacks[i].func = NULL;\n }\n\n static int\n add_pending_write_callback(CMConnection conn, CMWriteCallbackFunc handler, \n\t\t\t    void* client_data)\n {\n     int count = 0;\n     while (conn->write_callbacks && count < conn->write_callback_len &&\n\t    (conn->write_callbacks[count].func != NULL)) count++;\n     if (count + 1 > conn->write_callback_len) {\n\t if (conn->write_callbacks == NULL) {\n\t     conn->write_callbacks = malloc(sizeof(conn->write_callbacks[0]));\n\t     conn->write_callback_len = 1;\n\t } else {\n\t     conn->write_callbacks = \n\t\t realloc(conn->write_callbacks,\n\t\t\t sizeof(conn->write_callbacks[0])*(count+1));\n\t     conn->write_callback_len = count+1;\n\t }\n     }\n     conn->write_callbacks[count].func = handler;\n     conn->write_callbacks[count].client_data = client_data;\n     return count;\n }\n\n\n static void\n wake_pending_write(CManager cm, CMConnection conn, void *param)\n {\n     int cond = (long)param;\n     remove_pending_write_callback(conn, wake_pending_write, param);\n     INT_CMCondition_signal(cm, cond);\n }\n\n void\n wait_for_pending_write(CMConnection conn)\n {\n     CMControlList cl = conn->cm->control_list;\n     assert(CManager_locked(conn->cm));\n     CMtrace_out(conn->cm, CMLowLevelVerbose, \"Wait for pending write for conn %p\\n\", conn);\n\n     if ((!cl->has_thread) || (thr_thread_self() == cl->server_thread)) {\n\t /* single thread working, just poll network */\n\t while(conn->write_pending && !conn->closed) {\n\t     CMtrace_out(conn->cm, CMLowLevelVerbose, \"Control list wait for conn %p\\n\", conn);\n\t     CMcontrol_list_wait(cl);\n\t }\n     } else {\n\t /* other thread is handling the network wait for it to wake us up */\n\t while (conn->write_pending && !conn->closed) {\n\t     int cond = INT_CMCondition_get(conn->cm, conn);\n\t     add_pending_write_callback(conn, wake_pending_write, \n\t\t\t\t\t(void*) (long)cond);\n\t     CMtrace_out(conn->cm, CMLowLevelVerbose, \"Condition wait for conn %p\\n\", conn);\n\t     if (INT_CMCondition_wait(conn->cm, cond) == 0) {\n\t\t /* condition wait failed, connection is dead */\n\t\t conn->write_pending = 0;\n\t     }\n\t }\n     }\t    \n     CMtrace_out(conn->cm, CMLowLevelVerbose, \"Done waiting for pending write for conn %p\\n\", conn);\n }\n\n void\n INT_CMConnection_wait_for_pending_write(CMConnection conn)\n {\n     wait_for_pending_write(conn);\n }\n\n int\n INT_CMwrite_raw(CMConnection conn, FFSEncodeVector full_vec, FFSEncodeVector data_vec,\n\t\t long vec_count, long byte_count, attr_list attrs, int data_vec_stack)\n {\n     return INT_CMwrite_raw_notify(conn, full_vec, data_vec, vec_count, byte_count, attrs, data_vec_stack,\n\t\t\t\t   NULL, NULL);\n }\n\n /* Returns 1 if successful, -1 if deferred, 0 on error */\n int\n INT_CMwrite_raw_notify(CMConnection conn, FFSEncodeVector full_vec, FFSEncodeVector data_vec,\n\t\t\tlong vec_count, long byte_count, attr_list attrs, int data_vec_stack,\n\t\t\tCMcompletion_notify_func notify_func, void *notify_client_data)\n {\n     int actual = 0;\n     unsigned char checksum = 0;\n     int i, j, start;\n     long count = 0;\n     long length = 0;\n     if (conn->closed || conn->failed) return 0;\n\n     if (conn->write_pending) {\n\t wait_for_pending_write(conn);\n     }\n     for (i=0; i < vec_count; i++) {\n\t length += full_vec[i].iov_len;\n     }\n     start = 4;\n     if (length < 10240) {\n\t /* do checksum for small messages */\n\t for (i=0; i < vec_count; i++) {\n\t     count += full_vec[i].iov_len - start;\n\t     for (j=start; j< full_vec[i].iov_len; j++) {\n\t\t checksum += ((unsigned char*)full_vec[i].iov_base)[j];\n\t     }\n\t     start = 0;\n\t }\n     }\n     ((int*)full_vec[0].iov_base)[0] = \n\t (((int*)full_vec[0].iov_base)[0] & 0xffffff00) | (unsigned char) checksum;\n     if ((conn->do_non_blocking_write == 1) && (conn->trans->NBwritev_func)) {\n\t int actual_bytes;\n\t actual_bytes = \n\t     conn->trans->NBwritev_func(&CMstatic_trans_svcs, \n\t\t\t\t\t     conn->transport_data, \n\t\t\t\t\t     full_vec, vec_count, attrs);\n\t if (actual_bytes < 0) {\n\t     CMtrace_out(conn->cm, CMFreeVerbose, \"Calling write failed connection failed with dereference %p\\n\", conn);\n\t     INT_CMConnection_failed(conn);\n\t     if (conn->queued_data.buffer_to_free) {\n\t\t cm_return_data_buf(conn->cm, conn->queued_data.buffer_to_free);\n\t\t conn->queued_data.buffer_to_free = NULL;\n\t     }\n\t     conn->write_pending = 0;\n\t     conn->trans->set_write_notify(conn->trans, &CMstatic_trans_svcs, \n\t\t\t\t\t   conn->transport_data, 0);\n\t     cm_wake_any_pending_write(conn);\n\t }\n\t if (actual_bytes < length) {\n\t     /* copy remaining and send it later */\n\t     if (actual_bytes < 0 ) actual_bytes = 0;\n\t     if (data_vec_stack) {\n\t\t data_vec = copy_vector_to_FFSBuffer(conn->io_out_buffer, data_vec);\n\t     }\n\t     queue_remaining_write(conn, full_vec, data_vec, vec_count, \n\t\t\t\t   attrs, actual_bytes, attrs != NULL);\n\t     conn->trans->set_write_notify(conn->trans, &CMstatic_trans_svcs, conn->transport_data, 1);\n\t     conn->write_pending = 1;\n\t     CMtrace_out(conn->cm, CMLowLevelVerbose, \n\t\t\t \"Partial write, queued %ld bytes\\n\",\n\t\t\t length - actual_bytes);\n\t     return 1;\n\t }\n\t actual = vec_count;  /* set actual for success */\n     } else if (conn->trans->writev_complete_notify_func && notify_func) {\n\t actual = conn->trans->writev_complete_notify_func(&CMstatic_trans_svcs, \n\t\t\t\t\t\t\t   conn->transport_data, \n\t\t\t\t\t\t\t   full_vec, vec_count, \n\t\t\t\t\t\t\t   attrs, notify_func, notify_client_data);\n     } else {\n\t actual = conn->trans->writev_func(&CMstatic_trans_svcs, \n\t\t\t\t\t   conn->transport_data, \n\t\t\t\t\t   full_vec, vec_count, attrs);\n\t if (actual <= 0) {\n\t     CMtrace_out(conn->cm, CMFreeVerbose, \"Calling write failed connection failed with dereference %p\\n\", conn);\n\t     INT_CMConnection_failed(conn);\n\t }\n\t if (notify_func) {\n\t     (notify_func)(notify_client_data);\n\t }\n     }\n     return actual == vec_count ? 1 : 0;\n }\n\n extern int\n INT_CMwrite_evcontrol(CMConnection conn, unsigned char type, int argument) {\n     int evcontrol_header[2] = {0x45564300, 0};\n     struct FFSEncodeVec static_vec[3];\n     int success;\n     FFSEncodeVector vec = &static_vec[0];\n     assert(sizeof(int) == 4);\n     vec[0].iov_base = evcontrol_header;\n     vec[0].iov_len = sizeof(evcontrol_header);\n     vec[1].iov_base = &argument; /* XXX int size */\n     vec[1].iov_len = sizeof(int);\n     vec[2].iov_base = NULL;\n     vec[2].iov_len = 0;\n     evcontrol_header[1] = type << 24 | (sizeof(evcontrol_header) + sizeof(int));\n     success = INT_CMwrite_raw(conn, vec, vec + 1, 2, evcontrol_header[1] & 0xffffff, NULL, 1) != 0;\n     return success;\n }\n\n extern int\n INT_CMwrite_attr(CMConnection conn, CMFormat format, void *data, \n\t\t  attr_list attrs)\n {\n     /* GSE MUST FIX for LONG */\n     int no_attr_header[2] = {0x434d4400, 0};  /* CMD\\0 in first entry */\n     int attr_header[4] = {0x434d4100, 0x434d4100, 0, 0};  /* CMA\\0 in first entry */\n     FFSEncodeVector vec;\n     int length = 0, vec_count = 0, actual;\n     int do_write = 1;\n     void *encoded_attrs = NULL;\n     int attrs_present = 0;\n     CManager cm = conn->cm;\n\n     /* ensure conn is open */\n     if (conn->closed != 0) {\n\t CMtrace_out(conn->cm, CMDataVerbose, \"Not writing data to closed connection\\n\");\n\t return 0;\n     }\n     if (conn->failed != 0) {\n\t CMtrace_out(conn->cm, CMDataVerbose, \"Not writing data to failed connection\\n\");\n\t return 0;\n     }\n     if (conn->write_pending) {\n\t wait_for_pending_write(conn);\n     }\n     if (conn->closed != 0) {\n\t CMtrace_out(conn->cm, CMDataVerbose, \"Not writing data to closed connection\\n\");\n\t return 0;\n     }\n     if (format->registration_pending) {\n\t CMcomplete_format_registration(format, 1);\n     }\n     if (format->fmformat == NULL) {\n\t printf(\"Format registration has failed for format \\\"%s\\\" - write aborted\\n\",\n\t\tformat->format_name);\n\t return 0;\n     }\n     if (conn->closed != 0) {\n\t CMtrace_out(conn->cm, CMDataVerbose, \"Not writing data to closed connection\\n\");\n\t return 0;\n     }\n     CMformat_preload(conn, format);\n\n     if (conn->closed != 0) {\n\t return 0;\n     }\n     if (CMtrace_on(conn->cm, CMDataVerbose)) {\n\t static int dump_char_limit = 256;\n\t static int warned = 0;\n\t static int size_set = 0;\n\t int r;\n\t if (size_set == 0) {\n\t     char *size_str = getenv(\"CMDumpSize\");\n\t     size_set++;\n\t     if (size_str != NULL) {\n\t\t dump_char_limit = atoi(size_str);\n\t     }\n\t }\n\t fprintf(cm->CMTrace_file, \"CM - Writing record of type %s\\n\",\n\t\tname_of_FMformat(format->fmformat));\n\t if (attrs != NULL) {\n\t     fprintf(cm->CMTrace_file, \"CM - write attributes are:\");\n\t     fdump_attr_list(cm->CMTrace_file, attrs);\n\t }\n\t fprintf(cm->CMTrace_file, \"CM - record type %s, contents are:\\n  \", name_of_FMformat(format->fmformat));\n\t r = FMfdump_data(cm->CMTrace_file, format->fmformat, data, dump_char_limit);\n\t if (!r && !warned) {\n\t     fprintf(cm->CMTrace_file, \"\\n\\n  ****  Warning **** CM record dump truncated\\n\");\n\t     fprintf(cm->CMTrace_file, \"  To change size limits, set CMDumpSize environment variable.\\n\");\n\t     warned++;\n\t }\n\t fprintf(cm->CMTrace_file, \"\\n=======\\n\");\n     }\n\n     /* encode data with CM context */\n     vec = FFSencode_vector(conn->io_out_buffer, format->fmformat, data);\n     while(vec[vec_count].iov_base != NULL) {\n\t length += vec[vec_count].iov_len;\n\t vec_count++;\n     }\n     no_attr_header[1] = length;\n     attr_header[2] = length;\n     if (attrs != NULL) {\n\t attrs_present++;\n\t encoded_attrs = encode_attr_for_xmit(attrs, conn->attr_encode_buffer,\n\t\t\t\t\t      &attr_header[3]);\n\t attr_header[3] = (attr_header[3] +7) & -8;  /* round up to even 8 */\n     }\n     CMtrace_out(conn->cm, CMDataVerbose, \"CM - Total write size is %d bytes data + %d bytes attrs\\n\", length, attr_header[3]);\n     if (cm_write_hook != NULL) {\n\t do_write = cm_write_hook(length);\n     }\n     if (do_write) {\n\t struct FFSEncodeVec static_vec[100];\n\t FFSEncodeVector tmp_vec = &static_vec[0];\n\t int byte_count = length;/* sum lengths */\n\t if (vec_count >= sizeof(static_vec)/ sizeof(static_vec[0])) {\n\t     tmp_vec = INT_CMmalloc((vec_count+1) * sizeof(*tmp_vec));\n\t }\n\t if (attrs == NULL) {\n\t     tmp_vec[0].iov_base = &no_attr_header;\n\t     tmp_vec[0].iov_len = sizeof(no_attr_header);\n\t     memcpy(&tmp_vec[1], vec, sizeof(*tmp_vec) * vec_count);\n\t     vec_count++;\n\t     byte_count += sizeof(no_attr_header);\n\t     CMtrace_out(conn->cm, CMLowLevelVerbose, \n\t\t\t \"Writing %d vectors, total %d bytes in writev\\n\", \n\t\t\t vec_count, byte_count);\n\t } else {\n\t     tmp_vec[0].iov_base = &attr_header;\n\t     tmp_vec[0].iov_len = sizeof(attr_header);\n\t     tmp_vec[1].iov_base = encoded_attrs;\n\t     tmp_vec[1].iov_len = attr_header[3];\n\t     memcpy(&tmp_vec[2], vec, sizeof(*tmp_vec) * vec_count);\n\t     byte_count += sizeof(attr_header) + attr_header[3];\n\t     vec_count += 2;\n\t     CMtrace_out(conn->cm, CMLowLevelVerbose, \n\t\t\t \"Writing %d vectors, total %d bytes (including attrs) in writev\\n\", \n\t\t\t vec_count, byte_count);\n\t }\n\n\t actual = INT_CMwrite_raw(conn, tmp_vec, vec, vec_count, byte_count, attrs, 0);\n\t if (tmp_vec != &static_vec[0]) {\n\t     INT_CMfree(tmp_vec);\n\t }\n\t if (actual == 0) {\n\t     /* fail */\n\t     CMtrace_out(conn->cm, CMLowLevelVerbose, \n\t\t\t \"Writev failed\\n\");\n\t     return 0;\n\t }\n     }\n     CMtrace_out(conn->cm, CMLowLevelVerbose, \"Writev success\\n\");\n     return 1;\n }\n\n #ifdef EV_INTERNAL_H\n extern int\n internal_write_event(CMConnection conn, CMFormat format, void *remote_path_id,\n\t\t      int path_len, event_item *event, attr_list attrs, long *event_len_p)\n {\n     FFSEncodeVector vec;\n     struct FFSEncodeVec preencoded_vec[2];\n     long data_length = 0, actual;\n     int vec_count = 0, attr_len = 0;\n     int do_write = 1;\n     void *encoded_attrs = NULL;\n     int attrs_present = 0;\n     CManager cm = conn->cm;\n\n     /* ensure conn is open */\n     if (conn->closed != 0) {\n\t CMtrace_out(conn->cm, CMDataVerbose, \"Not writing data to closed connection\\n\");\n\t return 0;\n     }\n     if (conn->failed != 0) {\n\t CMtrace_out(conn->cm, CMDataVerbose, \"Not writing data to failed connection\\n\");\n\t return 0;\n     }\n     if (conn->write_pending) {\n\t wait_for_pending_write(conn);\n     }\n     if (format->registration_pending) {\n\t CMcomplete_format_registration(format, 1);\n     }\n     if (format->fmformat == NULL) {\n\t printf(\"Format registration has failed for format \\\"%s\\\" - write aborted\\n\",\n\t\tformat->format_name);\n\t return 0;\n     }\n     CMformat_preload(conn, format);\n\n     if (CMtrace_on(conn->cm, CMDataVerbose)) {\n\t static int dump_char_limit = 256;\n\t static int warned = 0;\n\t static int size_set = 0;\n\t int r;\n\t if (size_set == 0) {\n\t     char *size_str = getenv(\"CMDumpSize\");\n\t     size_set++;\n\t     if (size_str != NULL) {\n\t\t dump_char_limit = atoi(size_str);\n\t     }\n\t }\n\t fprintf(cm->CMTrace_file, \"CM - Writing EVENT record %lx of type %s\\n\", (long)event,\n\t\tname_of_FMformat(format->fmformat));\n\t if (attrs != NULL) {\n\t     fprintf(cm->CMTrace_file, \"CM - write attributes are:\");\n\t     fdump_attr_list(cm->CMTrace_file, attrs);\n\t } else {\n\t     fprintf(cm->CMTrace_file, \"CM - write attrs NULL\\n\");\n\t }\n\t fprintf(cm->CMTrace_file, \"CM - record type %s, contents \", name_of_FMformat(format->fmformat));\n\t if (event->decoded_event) {\n\t     fprintf(cm->CMTrace_file, \"DECODED are:\\n  \");\n\t     r = FMfdump_data(cm->CMTrace_file, format->fmformat, event->decoded_event,\n\t\t\t      dump_char_limit);\n\t } else {\n\t     fprintf(cm->CMTrace_file, \"ENCODED are:\\n  \");\n\t     r = FMfdump_encoded_data(cm->CMTrace_file, format->fmformat,\n\t\t\t\t      event->encoded_event, dump_char_limit);\n\t }\t    \n\t if (!r && !warned) {\n\t     fprintf(cm->CMTrace_file, \"\\n\\n  ****  Warning **** CM record dump truncated\\n\");\n\t     fprintf(cm->CMTrace_file, \"  To change size limits, set CMDumpSize environment variable.\\n\");\n\t     warned++;\n\t }\n\t fprintf(cm->CMTrace_file, \"\\n=======\\n\");\n     }\n\n     if (!event->encoded_event) {\n\t /* encode data with CM context */\n\t vec = FFSencode_vector(conn->io_out_buffer,\n\t\t\t\tformat->fmformat, event->decoded_event);\n\t while(vec[vec_count].iov_base != NULL) {\n\t     data_length += vec[vec_count].iov_len;\n\t     vec_count++;\n\t }\n     } else {\n\t vec = &preencoded_vec[0];\n\t preencoded_vec[0].iov_base = event->encoded_event;\n\t preencoded_vec[0].iov_len = event->event_len;\n\t preencoded_vec[1].iov_base = NULL;\n\t preencoded_vec[1].iov_len = 0;\n\t vec_count = 1;\n\t data_length = event->event_len;\n     }\n     if (attrs != NULL) {\n\t attrs_present++;\n\t encoded_attrs = encode_attr_for_xmit(attrs, conn->attr_encode_buffer,\n\t\t\t\t\t      &attr_len);\n\t attr_len = (attr_len +7) & -8;  /* round up to even 8 */\n     }\n     CMtrace_out(conn->cm, CMDataVerbose, \"CM - Total write size is %ld bytes data + %d bytes attrs\\n\", data_length, attr_len);\n     if (cm_write_hook != NULL) {\n\t do_write = cm_write_hook(data_length);\n     }\n     if (do_write) {\n\t struct FFSEncodeVec static_vec[100];\n\t FFSEncodeVector tmp_vec = &static_vec[0];\n\t int byte_count = data_length;/* sum lengths */\n\t int header[4] = {0x434d4C00, 0, 0, 0};  /* CML\\0 in first entry */\n\t if (vec_count >= sizeof(static_vec)/ sizeof(static_vec[0])) {\n\t     tmp_vec = INT_CMmalloc((vec_count+3) * sizeof(*tmp_vec));\n\t }\n\t header[1] = data_length;\n\t if (path_len != 4) {\n\t     header[0] = 0x434d4700;\n\t     header[3] = (path_len + 7) & -8;\n\t } else {\n\t     header[0] = 0x434d4C00;  /* 4 byte chan ID */\n\t     header[3] = *((int*)remote_path_id);\n\t }\n\t if (attrs == NULL) {\n\t     FFSEncodeVector assign_vec = tmp_vec;\n\t     header[2] = 0;\n\t     if (path_len != 4) {\n\t\t tmp_vec[1].iov_base = remote_path_id;\n\t\t tmp_vec[1].iov_len = (path_len + 7) & -8;\n\t\t byte_count += tmp_vec[1].iov_len;\n\t\t assign_vec++;\n\t     }\n\t     tmp_vec[0].iov_base = &header;\n\t     tmp_vec[0].iov_len = sizeof(header);\n\t     memcpy(&assign_vec[1], vec, sizeof(*tmp_vec) * vec_count);\n\t     vec_count++;\n\t     byte_count += sizeof(header);\n\t     CMtrace_out(conn->cm, CMLowLevelVerbose, \n\t\t\t \"Writing %d vectors, total %d bytes in writev\\n\", \n\t\t\t vec_count, byte_count);\n\t } else {\n\t     tmp_vec[0].iov_base = &header;\n\t     tmp_vec[0].iov_len = sizeof(header);\n\t     tmp_vec[1].iov_base = encoded_attrs;\n\t     header[2] = attr_len;\n\t     tmp_vec[1].iov_len = attr_len;\n\t     memcpy(&tmp_vec[2], vec, sizeof(*tmp_vec) * vec_count);\n\t     byte_count += sizeof(header) + header[2];\n\t     vec_count += 2;\n\t     CMtrace_out(conn->cm, CMLowLevelVerbose, \n\t\t\t \"Writing %d vectors, total %d bytes (including attrs) in writev\\n\", \n\t\t\t vec_count, byte_count);\n\t }\n\t actual = INT_CMwrite_raw(conn, tmp_vec, vec, vec_count, byte_count, attrs,\n\t\t\t\t     vec == &preencoded_vec[0]);\n\t if (tmp_vec != &static_vec[0]) {\n\t     INT_CMfree(tmp_vec);\n\t }\n\t if (actual <= 0) {\n\t     /* fail */\n\t     CMtrace_out(conn->cm, CMFreeVerbose, \"Calling connection (write failed) failed with dereference %p\\n\", conn);\n\t     INT_CMConnection_failed(conn);\n\t     CMtrace_out(conn->cm, CMLowLevelVerbose, \n\t\t\t \"Writev failed\\n\");\n\t     return 0;\n\t }\n     }\n     if (event_len_p) *event_len_p = data_length;\n     CMtrace_out(conn->cm, CMLowLevelVerbose, \"Writev success\\n\");\n     return 1;\n }\n #endif\n\n static void\n init_non_blocking_conn(CMConnection conn)\n {\n     /* default */\n     conn->do_non_blocking_write = 0;\n\n     if (conn->trans->NBwritev_func == NULL) return;\n     if (conn->trans->set_write_notify == NULL) return;\n\n     /* only if we make it this far should we try non blocking writes */\n     conn->do_non_blocking_write = 1;\n }\n\n extern int\n INT_CMConnection_write_would_block(CMConnection conn)\n {\n     if (conn->do_non_blocking_write == -1) {\n\t init_non_blocking_conn(conn);\n     }\n     return conn->write_pending;\n }\n\n extern int \n INT_CMregister_write_callback(CMConnection conn, CMWriteCallbackFunc handler,\n\t\t\t       void *client_data)\n {\n     if (conn->do_non_blocking_write == -1) {\n\t init_non_blocking_conn(conn);\n     }\n     return add_pending_write_callback(conn, handler, client_data);\n }\n\n extern void\n INT_CMunregister_write_callback(CMConnection conn, int id)\n {\n     remove_pending_write_callback_by_id(conn, id);\n }\n\n extern void\n INT_CM_fd_add_select(CManager cm, int fd, select_list_func handler_func,\n\t\t      void *param1, void *param2)\n {\n     if (!handler_func) {\n\t CMtrace_out(cm, EVWarning, \"INT_CM_fd_add_select called with bogus notification function; ignored\\n\");\n\t return;\n     }\n     if (!cm->control_list->select_initialized) {\n\t CM_init_select(cm->control_list, cm);\n     }\n     cm->control_list->add_select(&CMstatic_trans_svcs,\n\t\t\t\t  &cm->control_list->select_data, fd,\n\t\t\t\t  handler_func, param1, param2);\n }\n\n extern void\n CM_fd_write_select(CManager cm, int fd, select_list_func handler_func,\n\t\t    void *param1, void *param2)\n {\n     if (!cm->control_list->select_initialized) {\n\t CM_init_select(cm->control_list, cm);\n     }\n     cm->control_list->write_select(&CMstatic_trans_svcs,\n\t\t\t\t    &cm->control_list->select_data, fd,\n\t\t\t\t    handler_func, param1, param2);\n }\n\n extern void\n CM_fd_remove_select(CManager cm, int fd)\n {\n     if (!cm->control_list->select_initialized) {\n\t CM_init_select(cm->control_list, cm);\n     }\n     cm->control_list->remove_select(&CMstatic_trans_svcs,\n\t\t\t\t     &cm->control_list->select_data, fd);\n }\n\n extern CMTaskHandle\n INT_CMadd_periodic(CManager cm, long period, CMPollFunc func,\n\t\t    void *client_data)\n {\n     CMTaskHandle handle = INT_CMmalloc(sizeof(*handle));\n     if (!cm->control_list->select_initialized) {\n\t CM_init_select(cm->control_list, cm);\n     }\n     handle->cm = cm;\n     handle->task = \n\t cm->control_list->add_periodic(&CMstatic_trans_svcs,\n\t\t\t\t\t&cm->control_list->select_data,\n\t\t\t\t\t0, period, (select_list_func)func, \n\t\t\t\t\t(void*)cm, client_data);\n     if (handle->task == NULL) {\n\t free(handle);\n\t return NULL;\n     }\n     return handle;\n }\n\n extern CMTaskHandle\n INT_CMadd_periodic_task(CManager cm, int period_sec, int period_usec,\n\t\t\t CMPollFunc func, void *client_data)\n {\n     CMTaskHandle handle = INT_CMmalloc(sizeof(*handle));\n     if (!cm->control_list->select_initialized) {\n\t CM_init_select(cm->control_list, cm);\n     }\n     handle->cm = cm;\n     handle->task = \n\t cm->control_list->add_periodic(&CMstatic_trans_svcs,\n\t\t\t\t\t&cm->control_list->select_data,\n\t\t\t\t\tperiod_sec, period_usec, \n\t\t\t\t\t(select_list_func)func, \n\t\t\t\t\t(void*)cm, client_data);\n     if (handle->task == NULL) {\n\t free(handle);\n\t return NULL;\n     }\n     return handle;\n }\n\n extern void\n INT_CMremove_periodic(CMTaskHandle handle)\n {\n     CManager cm = handle->cm;\n     cm->control_list->remove_periodic(&CMstatic_trans_svcs,\n\t\t\t\t       &cm->control_list->select_data, \n\t\t\t\t       handle->task);\n     free(handle);\n }\n\n extern void\n INT_CMremove_task(CMTaskHandle handle)\n {\n     CManager cm = handle->cm;\n     cm->control_list->remove_periodic(&CMstatic_trans_svcs,\n\t\t\t\t       &cm->control_list->select_data, \n\t\t\t\t       handle->task);\n     free(handle);\n }\n\n extern CMTaskHandle\n INT_CMadd_delayed_task(CManager cm, int delay_sec, int delay_usec, \n\t\t\tCMPollFunc func, void *client_data)\n {\n     CMTaskHandle handle = INT_CMmalloc(sizeof(*handle));\n     if (!cm->control_list->select_initialized) {\n\t CM_init_select(cm->control_list, cm);\n     }\n     handle->cm = cm;\n     handle->task = \n\t cm->control_list->add_delayed_task(&CMstatic_trans_svcs,\n\t\t\t\t\t    &cm->control_list->select_data,\n\t\t\t\t\t    delay_sec, delay_usec,\n\t\t\t\t\t    (select_list_func)func, \n\t\t\t\t\t    (void*)cm, client_data);\n     if (handle->task == NULL) {\n\t free(handle);\n\t return NULL;\n     }\n     return handle;\n }\n\n static void\n select_shutdown(CManager cm, void *shutdown_funcv)\n {\n     SelectInitFunc shutdown_function = (SelectInitFunc)shutdown_funcv;\n     CMtrace_out(cm, CMFreeVerbose, \"calling select shutdown function sdp%p\\n\", cm->control_list->select_data);\n     shutdown_function(&CMstatic_trans_svcs, cm, &cm->control_list->select_data);\n }\n\n static void\n select_free(CManager cm, void *task_datav)\n {\n     void **task_data = (void**)task_datav;\n     SelectInitFunc select_free_function = (SelectInitFunc)task_data[0];\n     CMtrace_out(cm, CMFreeVerbose, \"calling select FREE function, %p\\n\", task_data[1]);\n     select_free_function(&CMstatic_trans_svcs, cm, &task_data[1]);\n#if !NO_DYNAMIC_LINKING\n     CMdlclose(task_data[2]);\n#endif\n     free(task_data);\n }\n\n#ifdef HAVE_SYS_EPOLL_H\nextern void\nlibcmepoll_init_sel_item(struct _select_item *sel_item);\n#endif\nextern void\nlibcmselect_init_sel_item(struct _select_item *sel_item);\n\nstatic void\nCM_init_select(CMControlList cl, CManager cm)\n{\n    SelectInitFunc init_function;\n    SelectInitFunc shutdown_function;\n    SelectInitFunc select_free_function;\n    void *dlhandle = NULL;\n    struct _select_item sel_item;\n    char *select_module = cm->control_module_choice;\n     \n    CMtrace_out(cm, CMControlVerbose, \"Loading CMselect module %s\\n\", select_module);\n#if !NO_DYNAMIC_LINKING\n    char *libname;\n    lt_dlhandle handle;\t\n    lt_dladdsearchdir(EVPATH_MODULE_BUILD_DIR);\n    lt_dladdsearchdir(EVPATH_MODULE_INSTALL_DIR);\n    libname = malloc(strlen(\"lib\" CM_LIBRARY_PREFIX \"cm\") + strlen(select_module) + strlen(MODULE_EXT) + 1);\n    strcpy(libname, \"lib\" CM_LIBRARY_PREFIX \"cm\");\n    strcat(libname, select_module);\n    strcat(libname, MODULE_EXT);\n    handle = CMdlopen(cm->CMTrace_file, libname, 0);\n    dlhandle = handle;\n    free(libname);\n    if (!handle) {\n\tfprintf(stderr, \"Failed to load requested libcm%s dll.\\n\", select_module);\n\tfprintf(stderr, \"Search path includes '.', '%s', '%s' and any default search paths supported by ld.so\\n\", EVPATH_MODULE_BUILD_DIR, \n\t\tEVPATH_MODULE_INSTALL_DIR);\n\tfprintf(stderr, \"Consider setting LD_LIBRARY_PATH or otherwise modifying module search paths.\\n\");\n\texit(1);\n    }\n    sel_item.add_select = (CMAddSelectFunc)lt_dlsym(handle, \"add_select\");  \n    sel_item.remove_select = (CMRemoveSelectFunc)lt_dlsym(handle, \"remove_select\");  \n    sel_item.write_select = (CMAddSelectFunc)lt_dlsym(handle, \"write_select\");  \n    sel_item.add_periodic = (CMAddPeriodicFunc)lt_dlsym(handle, \"add_periodic\");  \n    sel_item.add_delayed_task = \n\t(CMAddPeriodicFunc)lt_dlsym(handle, \"add_delayed_task\");  \n    sel_item.remove_periodic = (CMRemovePeriodicFunc)lt_dlsym(handle, \"remove_periodic\");  \n    sel_item.wake_function = (CMWakeSelectFunc)lt_dlsym(handle, \"wake_function\");\n    sel_item.blocking_function = (CMPollFunc)lt_dlsym(handle, \"blocking_function\");\n    sel_item.polling_function = (CMPollFunc)lt_dlsym(handle, \"polling_function\");;\n    sel_item.initialize = (SelectInitFunc)lt_dlsym(handle, \"select_initialize\");\n    sel_item.shutdown = (SelectInitFunc)lt_dlsym(handle, \"select_shutdown\");\n    sel_item.free = (SelectInitFunc)lt_dlsym(handle, \"select_free\");\n    sel_item.stop = (CMWakeSelectFunc)lt_dlsym(handle, \"select_stop\");\n#else\n\n#ifdef HAVE_SYS_EPOLL_H\n    if (strcmp(select_module, \"epoll\") == 0) {\n\tlibcmepoll_init_sel_item(&sel_item);\n    }\n#endif\n    if (strcmp(select_module, \"select\") == 0) {\n\tlibcmselect_init_sel_item(&sel_item);\n    }\n\n#endif\n     cl->add_select = sel_item.add_select;\n     cl->remove_select = sel_item.remove_select;\n     cl->write_select = sel_item.write_select;\n     cl->add_periodic = sel_item.add_periodic;\n     cl->add_delayed_task = sel_item.add_delayed_task;\n     cl->remove_periodic = sel_item.remove_periodic;\n     cl->wake_select = sel_item.wake_function;\n     cl->network_blocking_function.func = sel_item.blocking_function;\n     cl->network_polling_function.func = sel_item.polling_function;\n     init_function = sel_item.initialize;\n     shutdown_function = sel_item.shutdown;\n     select_free_function = sel_item.free;\n     cl->stop_select = sel_item.stop;\n\n    cl->network_blocking_function.client_data = (void*)&(cl->select_data);\n    cl->network_blocking_function.cm = NULL;\n    cl->network_polling_function.client_data = (void*)&(cl->select_data);\n    cl->network_polling_function.cm = NULL;\n     if ((cl->add_select == NULL) || (cl->remove_select == NULL) || \n\t (cl->network_blocking_function.func == NULL) || (cl->add_periodic == NULL) ||\n\t (cl->remove_periodic == NULL)) {\n\t printf(\"Select failed to load properly\\n\");\n\t exit(1);\n     }\n     init_function(&CMstatic_trans_svcs, cm, &cm->control_list->select_data);\n    if (cl->has_thread == -1) {\n\tthr_thread_t server_thread = \n\t    thr_fork((void*(*)(void*))server_thread_func, \n\t\t     (void*)cm);\n\tif (server_thread ==  (thr_thread_t) NULL) {\n\t    return;\n\t}\n\tCMtrace_out(cm, CMLowLevelVerbose,\n\t\t    \"CM - Forked comm thread %lx\\n\", (long)server_thread);\n\tcm->control_list->server_thread = server_thread;\n\tcm->control_list->cl_reference_count++;\n\tcm->control_list->free_reference_count++;\n\tcl->has_thread = 1;\n\tcm->reference_count++;\n\tCMtrace_out(cm, CMFreeVerbose, \"Forked - CManager %lx ref count now %d\\n\", \n\t\t    (long) cm, cm->reference_count);\n    }\n     cl->select_initialized = 1;\n     CMtrace_out(cm, CMFreeVerbose, \"CManager adding select shutdown function, %lx\\n\",(long)shutdown_function);\n     internal_add_shutdown_task(cm, select_shutdown, (void*)shutdown_function, SHUTDOWN_TASK);\n     {\n\t void ** data = malloc(3 * sizeof(void*));\n\t data[0] = select_free_function;\n\t data[1] = cm->control_list->select_data;\n\t data[2] = dlhandle;\n\t internal_add_shutdown_task(cm, select_free, (void*)data, FREE_TASK);\n     }\n }\n\n static void\n wake_function(CManager cm, void *cond)\n {\n     CManager_lock(cm);\n     INT_CMCondition_signal(cm, (int)(long)cond);\n     CManager_unlock(cm);\n }\n\n extern void\n INT_CMsleep(CManager cm, int sec)\n {\n     int cond = INT_CMCondition_get(cm, NULL);\n     CMTaskHandle handle = \n\t INT_CMadd_delayed_task(cm, sec, 0, wake_function, (void*)(long)cond);\n     INT_CMfree(handle);\n     INT_CMCondition_wait(cm, cond);\n }\n\n extern void\n INT_CMusleep(CManager cm, int usec)\n {\n     int cond = INT_CMCondition_get(cm, NULL);\n     CMTaskHandle handle = \n\t INT_CMadd_delayed_task(cm, 0, usec, wake_function, (void*)(long)cond);\n     INT_CMfree(handle);\n     INT_CMCondition_wait(cm, cond);\n }\n\ntypedef struct foreign_handler_struct {\n    int header;\n    CMNonCMHandler handler;\n} *handler_list;\n\nstatic handler_list foreign_handler_list;\nstatic int foreign_handler_count = 0;\n\n/* static void */\n/* clear_foreign_handlers() */\n/* { */\n/*     if (foreign_handler_count == 0) return; */\n/*     free(foreign_handler_list); */\n/* } */\n\n extern void\n INT_CMregister_non_CM_message_handler(int header, CMNonCMHandler handler)\n {\n     if (foreign_handler_count > 0) {\n\t foreign_handler_list = INT_CMrealloc(foreign_handler_list, \n\t\t\t\t\t  sizeof(foreign_handler_list[0]) * \n\t\t\t\t\t  (foreign_handler_count + 1));\n     } else {\n\t foreign_handler_list = INT_CMmalloc(sizeof(foreign_handler_list[0]));\n/*\t atexit(clear_foreign_handlers);*/\n     }\n     foreign_handler_list[foreign_handler_count].header = header;\n     foreign_handler_list[foreign_handler_count].handler = handler;\n     foreign_handler_count++;\n }\n\n int\n CMdo_non_CM_handler(CMConnection conn, int header, char *buffer, int length)\n {\n     int i = 0;\n     while (i < foreign_handler_count) {\n\t if (foreign_handler_list[i].header == header) {\n\t     return foreign_handler_list[i].handler(conn, conn->trans, buffer, \n\t\t\t\t\t     length);\n\t }\n\t i++;\n     }\n     return -1;\n }\n\n extern CMtrans_services\n INT_CMget_static_trans_services()\n {\n   return &CMstatic_trans_svcs;\n }\n\n extern void*\n INT_CMget_transport_data (CMConnection conn)\n {\n   return conn->transport_data;\n }\n\nstatic \nint offset_compare(const void* lhsv, const void* rhsv)\n {\n     CMavail_period_ptr lhs = (CMavail_period_ptr) lhsv;\n     CMavail_period_ptr rhs = (CMavail_period_ptr) rhsv;\n     if (lhs->offset.tv_sec < rhs->offset.tv_sec)\n\t return -1;\n     if (lhs->offset.tv_sec > rhs->offset.tv_sec)\n\t return 1;\n     return lhs->offset.tv_usec - rhs->offset.tv_usec;\n }\n\nextern int\nINT_CMinstall_pull_schedule(CManager cm, struct timeval *base_time, \n\t\t\t    struct timeval *period, CMavail_period_ptr avail)\n{\n    int i = 0, count = 0;\n    struct timeval zero = {0,0}, last_end = {0,0};\n    CMavail_period_ptr sorted;\n    while (timercmp(&avail[count].offset, &zero, !=) ||\n\t   timercmp(&avail[count].duration, &zero, !=)) {\n\tif (avail[count].offset.tv_sec < 0) {\n\t    fprintf(stderr, \"CMinstall_pull_schedule(), avail sec offset is negative.  Rejected\\n\");\n\t    return 0;\n\t}\n\tif (avail[count].offset.tv_usec < 0) {\n\t    fprintf(stderr, \"CMinstall_pull_schedule(), avail usec offset is negative.  Rejected\\n\");\n\t    return 0;\n\t}\n\tif (avail[count].duration.tv_sec < 0) {\n\t    fprintf(stderr, \"CMinstall_pull_schedule(), avail sec duration is negative.  Rejected\\n\");\n\t    return 0;\n\t}\n\tif (avail[count].duration.tv_usec < 0) {\n\t    fprintf(stderr, \"CMinstall_pull_schedule(), avail usec duration is negative.  Rejected\\n\");\n\t    return 0;\n\t}\n\tcount++;\n    }\n    sorted = malloc(sizeof(avail[0]) * (count+1));\n    memcpy(sorted, avail, sizeof(avail[0]) * count);\n    qsort(sorted, count, sizeof(avail[0]), offset_compare);\n    for (i = 0; i < count; i++) {\n\tstruct timeval end;\n\ttimeradd(&avail[i].offset, &avail[i].duration, &end);\n\tif (timercmp(&end, period, >)) {\n\t    fprintf(stderr, \"CMinstall_pull_schedule(), avail region %d rejected, extends beyond period\\n\", i);\n\t    free(sorted);\n\t    return -1;\n\t}\n\tif (timercmp(&avail[i].offset, &last_end, <)) {\n\t    fprintf(stderr, \"CMinstall_pull_schedule(), avail regions overlap. Rejected\\n\");\n\t    free(sorted);\n\t    return -1;\n\t}\n\tlast_end = end;\n    }\n\n    cm->base_time = *base_time;\n    cm->period = *period;\n    cm->avail = sorted;\n    transport_entry *trans_list;\n    trans_list = cm->transports;\n    CMtrace_out(cm, CMTransportVerbose, \"CM installed pull schedule with period %ld secs, %ld usecs\\n\", period->tv_sec, (long) period->tv_usec);\n    while ((trans_list != NULL) && (*trans_list != NULL)) {\n\tif ((*trans_list)->install_pull_schedule_func) {\n\t    (*trans_list)->install_pull_schedule_func(&CMstatic_trans_svcs,\n\t\t\t\t\t\t      *trans_list,\n\t\t\t\t\t\t      base_time, period,\n\t\t\t\t\t\t      cm->avail);\n\t    CMtrace_out(cm, CMTransportVerbose, \"CM installed pull schedule to transport %s\\n\", (*trans_list)->trans_name);\n\t}\n\ttrans_list++;\n    }\n    return 0;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/thirdparty/EVPath/EVPath/gen_interface.pl": "#! /usr/bin/env - perl\nuse File::Basename;\nmy $dirname = dirname(__FILE__);\n\nsub gen_type\n{\n    my($subr, $arg_str) = @_;\n    my(@args);\n    print REVP \"\\ntypedef struct _${subr}_request {\\n\";\n    print REVP \"    int condition_var;\\n\";\n    @args = split( \", \",  $arg_str,2);\n    foreach $arg (split (\", \", $args[1])) {\n\t$_ = $arg;\n\tif (/^\\s*(.*\\W+)(\\w+)$\\s*/) {\n\t    $argtype = $1;\n\t    $argname = $2;\n\t    $argtype =~ s/\\s+$//;\n\t    $argtype =~ s/(?!\\w)\\s+(?=\\W)//;  #remove unnecessary white space\n\t    $argtype =~ s/(?!\\W)\\s+(?=\\w)//;  #remove unnecessary white space\n\t    $iotype = $argtype;\n\t    $sizetype = $argtype;\n\t  switch:for ($argtype) {\n\t      /attr_list/ && do {$iotype = \"string\"; $argtype=\"char*\"; last;};\n\t      /char*/ && do {$iotype = \"string\"; $argtype=\"char*\"; last;};\n\t      /EVstone$/ && do {$iotype = \"integer\"; $argtype=\"EVstone\"; last;};\n\t      /EVstone\\*/ && do {print REVP \"    int ${argname}_len;\\n\";\n$iotype = \"integer[${argname}_len]\"; $argtype=\"int *\"; last;};\n\t      /EVSimpleHandlerFunc$/ && do {$iotype = \"string\"; $argtype=\"char*\"; last;};\n\t      /FMStructDescList/ && do {$iotype = \"string\"; $argtype=\"char*\"; last;};\n\t  }\n\t}\n\tprint REVP \"    $argtype $argname;\\n\";\n    }\n    print REVP \"} ${subr}_request;\\n\";\n    $ret_type = $return_type{$subr};\n  switch:  for ($ret_type) {\n      /attr_list/ && do {$retiotype = \"string\"; $ret_type=\"char*\"; last;};\n      /char*/ && do {$retiotype = \"string\"; $ret_type=\"char*\"; last;};\n      /EVstone/ && do {$retiotype = \"integer\"; $ret_type=\"EVstone\"; last;};\n    }\n    print REVP \"\\ntypedef struct _${subr}_response {\\n\";\n    print REVP \"    int condition_var;\\n\";\n    print REVP \"    $ret_type ret;\\n\" unless ($return_type{$subr} eq \"void\");\n    print REVP \"} ${subr}_response;\\n\";\n}\n\nsub gen_field_list\n{\n    my($subr, $arg_str) = @_;\n    my(@args);\n    print REVP \"\\nFMField  ${subr}_req_flds[] = {\\n\";\n    print REVP \"    {\\\"condition_var\\\", \\\"integer\\\", sizeof(int), FMOffset(${subr}_request*, condition_var)},\\n\";\n    @args = split( \", \",  $arg_str,2);\n    foreach $arg (split (\", \", $args[1])) {\n\t$_ = $arg;\n\tif (/^\\s*(.*\\W+)(\\w+)$\\s*/) {\n\t    $argtype = $1;\n\t    $argname = $2;\n\t    $argtype =~ s/\\s+$//;\n\t    $argtype =~ s/(?!\\w)\\s+(?=\\W)//;  #remove unnecessary white space\n\t    $argtype =~ s/(?!\\W)\\s+(?=\\w)//;  #remove unnecessary white space\n\t    $iotype = $argtype;\n\t    $sizetype = $argtype;\n\t  switch:for ($argtype) {\n\t      /attr_list/ && do {$iotype = \"string\"; $argtype=\"char*\"; last;};\n\t      /char*/ && do {$iotype = \"string\"; $argtype=\"char*\"; last;};\n\t      /void*/ && do {$iotype = \"char[${argname}_len\"; $argtype=\"void*\"; last;};\n\t      /int/ && do {$iotype = \"integer\"; $argtype=\"int\"; last;};\n\t      /EVstone/ && do {$iotype = \"integer\"; $argtype=\"EVstone\"; last;};\n\t      /EVaction/ && do {$iotype = \"integer\"; $argtype=\"EVaction\"; last;};\n\t      /EVSimpleHandlerFunc/ && do {$iotype = \"string\"; $argtype=\"EVSimpleHandlerFunc\"; last;};\n\t      /FMStructDescList/ && do {$iotype = \"string\"; $argtype=\"EVSimpleHandlerFunc\"; last;};\n\t  }\n\t}\n\tprint REVP \"    {\\\"$argname\\\", \\\"$iotype\\\", sizeof($sizetype), FMOffset(${subr}_request*,$argname)},\\n\";\n    }\n    print REVP \"    {NULL, NULL, 0, 0}\\n};\\n\";\n    print REVP \"\\nFMStructDescRec  ${subr}_req_formats[] = {\\n\";\n    print REVP \"    {\\\"EV_${subr}_request\\\", ${subr}_req_flds, sizeof(${subr}_request), NULL},\\n\";\n    print REVP \"    {NULL, NULL, 0, NULL}\\n};\\n\";\n}\n\nsub gen_stub {\n    my($subr, $arg_str) = @_;\n    my(@args);\n    @args = split( \", \",  $arg_str,2);\n    print REVP \"\\nextern $return_type{$subr}\\n\";\n    print REVPHI \"\\nextern $return_type{$subr}\\n\";\n    if ($#args > 0) {\n\tprint REVP \"INT_R$subr(CMConnection conn, $args[1])\\n\";\n\tprint REVPHI \"INT_R$subr(CMConnection conn, $args[1]);\\n\";\n    } else {\n\tprint REVP \"INT_R$subr(CMConnection conn)\\n\";\n\tprint REVPHI \"INT_R$subr(CMConnection conn);\\n\";\n    }\n    print REVP \"{\\n\";\n    \n    $_ = $return_type{$subr};\n    if (/^\\s*void\\s*$/) {\n\t$return_type{$subr} = \"void\";\n    }\n    $retsubtype = $return_type{$subr};\n  switch:  for ($ret_type) {\n      /attr_list/ && do {$retsubtype = \"string\"; $ret_type=\"char*\"; last;};\n      /char*/ && do {$retsubtype = \"string\"; $ret_type=\"char*\"; last;};\n      /EVstone/ && do {$retsubtype = \"int\"; $ret_type=\"EVstone\"; last;};\n      /EVaction/ && do {$retsubtype = \"int\"; $ret_type=\"EVaction\"; last;};\n    }\n    print REVP \"    int cond;\\n\";\n    print REVP \"    CMFormat f;\\n\";\n    print REVP \"    EV_${retsubtype}_response response;\\n\" unless ($return_type{$subr} eq \"void\");\n    print REVP \"    ${subr}_request request;\\n\";\n    print REVP \"    memset(&request, 0, sizeof(request));\\n\";\n    print REVP \"    cond = INT_CMCondition_get(conn->cm, conn);\\n\";\n    print REVP \"    f = INT_CMlookup_format(conn->cm, ${subr}_req_formats);\\n\";\n    $free_list = \"\";\n    foreach $arg (split (\", \", $args[1])) {\n\t$_ = $arg;\n\tif (/^\\s*(.*\\W+)(\\w+)$\\s*/) {\n\t    $argtype = $1;\n\t    $argname = $2;\n\t    $argtype =~ s/\\s+$//;\n\t    $argtype =~ s/(?!\\w)\\s+(?=\\W)//;  #remove unnecessary white space\n\t    $argtype =~ s/(?!\\W)\\s+(?=\\w)//;  #remove unnecessary white space\n\t    $argright = $argname;\n\t  switch:for ($argtype) {\n\t      /attr_list/ && do {$argright = \"attr_list_to_string($argname)\"; $free_list .= \"    free(request.$argname);\\n\"; last;};\n\t      /FMStructDescList/ && do {$argright = \"get_format_name(conn->cm, $argname)\"; last;};\n\t  }\n\t}\n\tprint REVP \"    request.$argname = $argright;\\n\";\n    }\n    print REVP \"    request.condition_var = cond;\\n\";\n    print REVP \"    if (f == NULL) {\\n\";\n    print REVP \"        f = INT_CMregister_format(conn->cm, ${subr}_req_formats);\\n\";\n    print REVP \"    }\\n\";\n    if ($return_type{$subr} eq \"void\") {\n\tprint REVP \"    INT_CMCondition_set_client_data(conn->cm, cond, NULL);\\n\";\n    } else {\n\tprint REVP \"    INT_CMCondition_set_client_data(conn->cm, cond, &response);\\n\";\n    }\n    print REVP \"    INT_CMwrite(conn, f, &request);\\n\";\n    if (\"$free_list\" ne \"\") {\n\tprint REVP \"$free_list\";\n    }\n    print REVP \"    INT_CMCondition_wait(conn->cm, cond);\\n\";\n  switch:for ($return_type{$subr}) {\n      /attr_list/ && do {print REVP \"    return attr_list_from_string(response.ret);\\n\"; last;};\n      /void/ && do {last;};\n      /EVstone/ && do {print REVP \"    return (EVstone) response.ret;\\n\"; last;};\n      /EVaction/ && do {print REVP \"    return (EVaction) response.ret;\\n\"; last;};\n      /int/ && do {print REVP \"    return response.ret;\\n\"; last;};\n      /EVevent_list/ && do {print REVP \"    return response.ret;\\n\"; last;};\n  }\n    print REVP \"}\\n\";\n}\n\nsub gen_wrapper {\n    my($subr, $arg_str, $has_client_data) = @_;\n    my(@args);\n    @args = split( \", \",  $arg_str,2);\n    print REVP \"\\nextern $return_type{$subr}\\n\";\n    if ($#args > 0) {\n      print REVP \"R$subr(CMConnection conn, $args[1])\\n\";\n    } else {\n      print REVP \"R$subr(CMConnection conn)\\n\";\n    }\n    #  This break stuff.  GSE\n    # $handler_register_string = \"$handler_register_string\\\n    # tmp_format = INT_CMregister_format(cm, ${subr}_req_formats);\\\n    # INT_CMregister_handler(tmp_format, R${subr}_handler, cm->evp);\\n\";\n\n    print REVP \"{\\n\";\n    $_ = $return_type{$subr};\n    if (/^\\s*void\\s*$/) {\n\t$return_type{$subr} = \"void\";\n    }\n    $retsubtype = $return_type{$subr};\n    switch:  for ($ret_type) {\n      /attr_list/ && do {$retsubtype = \"string\"; $ret_type=\"char*\"; last;};\n      /char*/ && do {$retsubtype = \"string\"; $ret_type=\"char*\"; last;};\n      /EVstone/ && do {$retsubtype = \"int\"; $ret_type=\"EVstone\"; last;};\n      /EVaction/ && do {$retsubtype = \"int\"; $ret_type=\"EVaction\"; last;};\n    }\n    print REVP \"    $return_type{$subr} ret;\\n\" unless ($return_type{$subr} eq \"void\");\n    print REVP \"    CManager_lock(conn->cm);\\n\";\n    if ($return_type{$subr} eq \"void\") {\n        print REVP \"    INT_R${subr}(conn\";\n    } else {\n        print REVP \"    ret = INT_R${subr}(conn\";\n    }\n    foreach $arg (split (\", \", $args[1])) {\n\t$_ = $arg;\n\tif (/^\\s*(.*\\W+)(\\w+)$\\s*/) {\n\t    $argtype = $1;\n\t    $argname = $2;\n\t    $argtype =~ s/\\s+$//;\n\t    $argtype =~ s/(?!\\w)\\s+(?=\\W)//;  #remove unnecessary white space\n\t    $argtype =~ s/(?!\\W)\\s+(?=\\w)//;  #remove unnecessary white space\n\t    $argright = \"$argname\";\n\t  switch:for ($argtype) {\n\t      /attr_list/ && do {$argright = \"$argname\"; last;};\n\t      /EVSimpleHandlerFunc/ && do {$argright = \"$argname\"; last;};\n\t      /FMStructDescList/ && do {$argright = \"$argname\"; last;};\n\t  }\n\t}\n\tprint REVP \", $argright\";\n    }\n    print REVP \");\\n\";\n    print REVP \"    CManager_unlock(conn->cm);\\n\";\n    if ($return_type{$subr} eq \"void\") {\n        print REVP \"    return;\\n\";\n    } else {\n        print REVP \"    return ret;\\n\";\n    }\n    print REVP \"}\\n\";\n}\n\nsub gen_handler {\n    my($subr, $arg_str, $has_client_data) = @_;\n    my(@args);\n    @args = split( \", \",  $arg_str,2);\n    print REVP \"\\nstatic void\\n\";\n    print REVP \"R${subr}_handler(CManager cm, CMConnection conn, void *data,void *client_data,attr_list message_attrs)\\n\";\n    $handler_register_string = \"$handler_register_string\\\n    tmp_format = INT_CMregister_format(cm, ${subr}_req_formats);\\\n    INT_CMregister_handler(tmp_format, R${subr}_handler, cm->evp);\\n\";\n\n    print REVP \"{\\n\";\n    $_ = $return_type{$subr};\n    if (/^\\s*void\\s*$/) {\n\t$return_type{$subr} = \"void\";\n    }\n    $retsubtype = $return_type{$subr};\n  switch:  for ($ret_type) {\n      /attr_list/ && do {$retsubtype = \"string\"; $ret_type=\"char*\"; last;};\n      /char*/ && do {$retsubtype = \"string\"; $ret_type=\"char*\"; last;};\n      /EVstone/ && do {$retsubtype = \"int\"; $ret_type=\"EVstone\"; last;};\n      /EVaction/ && do {$retsubtype = \"int\"; $ret_type=\"EVaction\"; last;};\n    }\n    print REVP \"    EV_${retsubtype}_response response;\\n\";\n    print REVP \"    ${subr}_request *request = (${subr}_request *) data;\\n\";\n    print REVP \"    $return_type{$subr} ret;\\n\" unless ($return_type{$subr} eq \"void\");\n    print REVP \"    CMFormat f = CMlookup_format(conn->cm, EV_${retsubtype}_response_formats);\\n\";\n    print REVP \"    (void) message_attrs;\\n\";\n    print REVP \"    (void) client_data;\\n\";\n    print REVP \"    if (f == NULL) {\\n\";\n    print REVP \"        f = INT_CMregister_format(conn->cm, EV_${retsubtype}_response_formats);\\n\";\n    print REVP \"    }\\n\";\n    foreach $arg (split (\", \", $args[1])) {\n\t$_ = $arg;\n\tif (/^\\s*(.*\\W+)(\\w+)$\\s*/) {\n\t    $argtype = $1;\n\t    $argname = $2;\n\t    $argtype =~ s/\\s+$//;\n\t    $argtype =~ s/(?!\\w)\\s+(?=\\W)//;  #remove unnecessary white space\n\t    $argtype =~ s/(?!\\W)\\s+(?=\\w)//;  #remove unnecessary white space\n\t    $argright = $argname;\n\t  switch:for ($argtype) {\n\t      /attr_list/ && do {print REVP \"    attr_list $argname = attr_list_from_string(request->$argname);\\n\"; last;};\n\t      /EVSimpleHandlerFunc/ && do {print REVP \"    EVSimpleHandlerFunc $argname = REVPlookup_handler(request->$argname);\\n\"; last;};\n\t      /FMStructDescList/ && do {print REVP \"    FMStructDescList $argname = REVPlookup_format_structs(conn->cm, request->$argname);\\n\"; last;};\n\t  }\n\t}\n    }\n    if ($return_type{$subr} eq \"void\") {\n\tprint REVP \"    $subr(cm\";\n    } else {\n\tprint REVP \"    ret = $subr(cm\";\n    }\n    $after = \"\";\n    foreach $arg (split (\", \", $args[1])) {\n\t$_ = $arg;\n\tif (/^\\s*(.*\\W+)(\\w+)$\\s*/) {\n\t    $argtype = $1;\n\t    $argname = $2;\n\t    $argtype =~ s/\\s+$//;\n\t    $argtype =~ s/(?!\\w)\\s+(?=\\W)//;  #remove unnecessary white space\n\t    $argtype =~ s/(?!\\W)\\s+(?=\\w)//;  #remove unnecessary white space\n\t    $argright = \"request->$argname\";\n\t  switch:for ($argtype) {\n\t      /attr_list/ && do {$argright = \"$argname\"; $after .= \"free_attr_list($argname);\\n\"; last;};\n\t      /EVSimpleHandlerFunc/ && do {$argright = \"$argname\"; last;};\n\t      /FMStructDescList/ && do {$argright = \"$argname\"; last;};\n\t  }\n\t}\n\tprint REVP \", $argright\";\n    }\n    if ($has_client_data == 1) {print REVP \", NULL\";}\n    print REVP \");\\n\";\n    print REVP \"$after\";\n  switch:for ($return_type{$subr}) {\n      /attr_list/ && do {print REVP \"    response.ret = attr_list_to_string(ret);\\n\"; last;};\n      /void/ && do {last;};\n      /EVstone/ && do {print REVP \"    response.ret = (int)ret;\\n\"; last;};\n      /EVaction/ && do {print REVP \"    response.ret = (int) ret;\\n\"; last;};\n      /int/ && do {print REVP \"    response.ret = ret;;\\n\"; last;};\n      /EVevent_list/ && do {print REVP \"     response.ret_len = count_EVevent_list(ret);\\n    response.ret = ret;\\n\"; last;};\n  }\n    print REVP \"    response.condition_var = request->condition_var;\\n\";\n    print REVP \"    CMwrite(conn, f, &response);\\n\";\n  switch:for ($return_type{$subr}) {\n      /attr_list/ && do {print REVP \"    free(response.ret);\\n\"; last;};\n  }\n    print REVP \"}\\n\";\n}\n\nsub strip_client_data {\n    my($arg_str) = @_;\n    local(@args);\n    @args = split( \", \",  $arguments{$subr});\n    $_ = pop(@args);\n    if (!/.*client_data\\W*$/) {\n\tpush(@args, $_);\n    }\n    $arg_str = join(\", \", @args);\n}\n\nsub mod_EVhandler {\n    my($arg_str) = @_;\n    local(@args);\n    @args = split( \", \",  $arg_str);\n    for( my $i=0; $i < scalar(@args); $i++) {\n\t$_ = $args[$i];\n\tif (/\\W*EVSimpleHandlerFunc.*$/) {\n\t    $args[$i] = \"char *handler\";\n\t}\n    }\n    $arg_str = join(\", \", @args);\n    return $arg_str;\n}\n\n{\n    local ($/, *INPUT);\n\t\n    $cat_args = \"\";\n    $has_ev_dfg = 0;\n    $cm_only = 0;\n    foreach my $a(@ARGV) {\n\tif ($a =~ \"-CM_ONLY\") {\n\t    $cm_only = 1;\n\t    next;\n\t}\n\t$a=~s/ /\\\\ /g;\n\t$cat_args .= \"$a \";\n\tif ($a =~ /ev_dfg/) {\n\t    $has_evdfg = 1;\n\t}\n    }\n    unless (open(INPUT, \"cat $cat_args |\")) {\n\tdie \"sudden flaming death, no file: $cat_args\\n\";\n    }\n\n    $_ = <INPUT>;\n    s[/\\*NOLOCK\\*/][NOLOCK]g;\n    s[/\\*REMOTE\\*/][REMOTE]g;\n    s{/\\*.+\\*/}{}g;\n    @f = split(/\\n/);\n    close INPUT;\n}\nLINE:\nfor (@f) {\n    if (/NOLOCK/) {\n\t$nolock = 1;\n    }\n    if (/REMOTE/) {\n\t$remote = 1;\n    }\n    if (/^extern/) {\n\tnext LINE if (/\\\"C\\\"/);\n\t$decl = \"\";\n\tif ($nolock == 1) {$decl = \"NOLOCK\";}\n\tif ($remote == 1) {$decl = \"REMOTE\";}\n\t$nolock = 0;\n\t$remote = 0;\n\t$pending = 1;\n    }\n    if (($pending) && /;/) {\n\t$decl = $decl . \" \" . $_;\n\tpush (@DECLS, $decl);\n\t$pending = 0;\n    }\n    if ($pending) {\n\t$decl = $decl . \" \" . $_;\n    }\n}\nfor (@DECLS) {\n    $nolock = 0;\n    $remote = 0;\n    if (/NOLOCK/) {\n\ts/NOLOCK//g;\n\t$nolock = 1;\n    }\n    if (/REMOTE/) {\n\ts/REMOTE//g;\n\t$remote = 1;\n    }\n    if (/extern\\W+(\\w+\\W+)(\\w+)\\W*\\((.*)\\)/) {\n\t$return = $1;\n\t$name = $2;\n\t$_ = $3;\n\ts/\\)//g;\n\ts/\\s+/ /g;\n\t$return =~ s/(?!\\w)\\s+(?=\\W)//;  #remove unnecessary white space\n\t$return =~ s/(?!\\W)\\s+(?=\\w)//;  #remove unnecessary white space\n\t$return =~ s/\\s*$//;  #remove unnecessary white space\n\t$return =~ s/^\\s*//;  #remove unnecessary white space\n\t$return_type{$name} = $return;\n\t$args = $_;\n\t$arguments{$name} = \"$args\";\n    } else {\n      if (/extern\\W+(\\w+\\W+\\w+\\W+)(\\w+).*\\((.*)\\)/) {\n\t$return = $1;\n\t$name = $2;\n\t$_ = $3;\n\ts/\\)//g;\n\ts/\\s+/ /g;\n\t$return =~ s/(?!\\w)\\s+(?=\\W)//;  #remove unnecessary white space\n\t$return =~ s/(?!\\W)\\s+(?=\\w)//;  #remove unnecessary white space\n\t$return =~ s/\\s*$//;  #remove unnecessary white space\n\t$return =~ s/^\\s*//;  #remove unnecessary white space\n\t$return_type{$name} = $return;\n\t$args = $_;\n\t$arguments{$name} = \"$args\";\n      } else {\n\tprint \"Failed to match function2 on $_\\n\"\n      }\n    }\n    if ($nolock == 1) {\n\t$nolocking{$name} = 1;\n    }\n    if ($remote == 1) {\n\t$remote_enabled{$name} = 1;\n    }\n}\n\nunless (open (INT, \">cm_interface.c\")) { die \"Failed to open cm_interface.c\";}\nprint INT<<EOF;\n/*\n *  This file is automatically generated by gen_interface.pl from evpath.h.\n *\n *  DO NOT EDIT\n *\n */\n#include \"config.h\"\n#include \"stdio.h\"\n#include \"string.h\"\n#include \"stdlib.h\"\n#include \"ffs.h\"\n#include \"cod.h\"\n#include \"atl.h\"\n#include \"evpath.h\"\n#include \"cm_internal.h\"\nEOF\nif ($has_evdfg) {\n    print INT \"#include \\\"ev_dfg.h\\\"\\n\";\n    print INT \"#include \\\"ev_dfg_internal.h\\\"\\n\";\n}\nprint INT<<EOF;\n#ifdef\t__cplusplus\nextern \"C\" \\{\n#endif\nEOF\n    foreach $subr (sort (keys %return_type)) {\n\tif ($cm_only && (($subr =~ /^EV/) || ($subr =~ /^create/))) {\n\t    next;\n\t}\n\tprint INT \"\\nextern $return_type{$subr}\\n\";\n\tprint INT \"$subr ( $arguments{$subr} )\\n\";\n\tprint INT \"{\\n\";\n\tundef $cmanager;\n\tundef $cmconnection;\n\tundef $evsource;\n\tundef $cmtaskhandle;\n\tundef $cmformat;\n\tundef $evdfg;\n\tundef $evdfg_stone;\n\tforeach $arg (split ( \",\", $arguments{$subr})) {\n\t    $_ = $arg;\n\t    if (/\\W+(\\w+)\\W*$/) {\n\t\t$name = $1;\n\t    }\n\t    if (/CManager/) {\n\t\t$cmanager = $name;\n\t    }\n\t    if (/CMConnection/) {\n\t\t$cmconnection = $name;\n\t    }\n\t    if (/EVsource/) {\n\t\t$evsource = $name;\n\t    }\n\t    if (/CMTaskHandle/) {\n\t\t$cmtaskhandle = $name;\n\t    }\n\t    if (/CMFormat\\W/) {\n\t\t$cmformat = $name;\n\t    }\n\t    if (/EVdfg\\W/) {\n\t\t$evdfg = $name;\n\t    }\n\t    if (/EVclient\\W/) {\n\t\t$cmanager = $name. \"->cm\";\n\t    }\n\t    if (/EVmaster\\W/) {\n\t\t$cmanager = $name. \"->cm\";\n\t    }\n\t    if (/EVdfg_stone\\W/) {\n\t\t$evdfg_stone = $name;\n\t    }\n\t}\n\n\t$_ = $return_type{$subr};\n\tif (/^\\s*void\\s*$/) {\n\t    $return_type{$subr} = \"void\";\n\t}\n\tif ($return_type{$subr} ne \"void\") {\n\t    print INT \"\\t$return_type{$subr} ret;\\n\";\n\t}\n\tif (!defined($nolocking{$subr})) {\n\t    if (defined($cmanager)) {\n\t\tprint INT \"\\tCManager_lock($cmanager);\\n\";\n\t    } else {\n\t\tif (defined($cmconnection)) {\n\t\t    print INT \"\\tCManager cm = $cmconnection->cm;\\n\";\n\t\t} elsif (defined($evsource)) {\n\t\t    print INT \"\\tCManager cm = $evsource->cm;\\n\";\n\t\t} elsif (defined($cmtaskhandle)) {\n\t\t    print INT \"\\tCManager cm = $cmtaskhandle->cm;\\n\";\n\t\t} elsif (defined($cmformat)) {\n\t\t    print INT \"\\tCManager cm = $cmformat->cm;\\n\";\n\t\t} elsif (defined($evdfg)) {\n\t\t    print INT \"\\tCManager cm = $evdfg->master->cm;\\n\";\n\t\t} elsif (defined($evdfg_stone)) {\n\t\t    print INT \"\\tCManager cm = $evdfg_stone->dfg->master->cm;\\n\";\n\t\t} else {\n#\t\t    print INT \"\\tCManager cm = duh;\\n\";\n\t\t}\n\t\tprint INT \"\\tCManager_lock(cm);\\n\";\n\t    }\n\t}\n\tif ($return_type{$subr} eq \"void\") {\n\t    print INT \"\\t\";\n\t} else {\n\t    print INT \"\\tret = \";\n\t}\n\n\tprint INT \"INT_$subr(\";\n\t$first = 1;\n\tforeach $arg (split ( \",\", $arguments{$subr})) {\n\t    if ($first != 1) {\n\t\tprint INT \", \";\n\t    } else {\n\t\t$first = 0;\n\t    }\n\t    $_ = $arg;\n\t    if (/\\W+(\\w+)\\W*$/) {\n\t\tprint INT \"$1\";\n\t    }\n\t}\n\tprint INT \");\\n\";\n\tif ((!defined($nolocking{$subr})) && ($subr ne \"CManager_close\")) {\n\t    if (defined($cmanager)) {\n\t\tprint INT \"\\tCManager_unlock($cmanager);\\n\";\n\t    } else {\n\t\tprint INT \"\\tCManager_unlock(cm);\\n\";\n\t    }\n\t}\n\tprint INT \"\\treturn ret;\\n\" unless ($return_type{$subr} eq \"void\");\n\tprint INT \"}\\n\";\n    }\nprint \"done\\n\";\n\nprint INT<<EOF;\n#ifdef\t__cplusplus\n\\}\n#endif\nEOF\nclose INT;\nif ($cm_only) { exit(0); }\nunless (open (REVPH, \">revpath.h\")) { die \"Failed to open revpath.h\";}\nprint REVPH<<EOF;\n/*\n *  This file is automatically generated by gen_interface.pl from evpath.h.\n *\n *  DO NOT EDIT\n *\n */\n\n#ifdef\t__cplusplus\nextern \"C\" {\n#endif\nEOF\n\nunless (open (REVPHI, \">revp_internal.h\")) { die \"Failed to open revpath.h\";}\nprint REVPHI<<EOF;\n/*\n *  This file is automatically generated by gen_interface.pl from evpath.h.\n *\n *  DO NOT EDIT\n *\n */\n\nEOF\n\nunless (open (REVP, \">revp.c\")) { die \"Failed to open revp.c\";}\nprint REVP<<EOF;\n/*\n *  This file is automatically generated by gen_interface.pl from evpath.h.\n *\n *  DO NOT EDIT\n *\n */\n#include \"config.h\"\n#include \"ffs.h\"\n#include \"atl.h\"\n#include \"evpath.h\"\n#include \"stdio.h\"\n#include \"cm_internal.h\"\n#ifdef LT_LIBPREFIX\n#include \"ltdl.h\"\n#else\n#include <dlfcn.h>\n#define lt_dlopen(x) dlopen(x, 0)\n#define lt_dlsym(x, y) dlsym(x, y)\n#define lt_dlhandle void*\n#define lt_dlinit() 0\n#define lt_dlerror()  \"\"\n#endif\n#include \"stdio.h\"\n#include \"string.h\"\n#include \"stdlib.h\"\n#include <dlfcn.h>\n#ifdef\t__cplusplus\nextern \"C\" \\{\n#endif\n#if defined (__INTEL_COMPILER)\n//  Allow unused\n#  pragma warning (disable: 869)\n#endif\n\ntypedef struct _EV_void_response {\n    int condition_var;\n} EV_void_response;\n\nFMField  EV_void_response_flds[] = {\n    {\"condition_var\", \"integer\", sizeof(int), FMOffset(EV_void_response*, condition_var)},\n    {NULL, NULL, 0, 0}\n};\n\nFMStructDescRec  EV_void_response_formats[] = {\n    {\"EV_void_response\", EV_void_response_flds, sizeof(EV_void_response), NULL},\n    {NULL, NULL, 0, NULL}\n};\n\ntypedef struct _EV_int_response {\n    int condition_var;\n    int  ret;\n} EV_int_response;\n\nFMField  EV_int_response_flds[] = {\n    {\"condition_var\", \"integer\", sizeof(int), FMOffset(EV_int_response*, condition_var)},\n    {\"ret\", \"integer\", sizeof(EVstone), FMOffset(EV_int_response*,ret)},\n    {NULL, NULL, 0, 0}\n};\n\nFMStructDescRec  EV_int_response_formats[] = {\n    {\"EV_int_response\", EV_int_response_flds, sizeof(EV_int_response), NULL},\n    {NULL, NULL, 0, NULL}\n};\n\ntypedef struct _EV_string_response {\n    int condition_var;\n    char *ret;\n} EV_string_response;\n\nFMField  EV_string_response_flds[] = {\n    {\"condition_var\", \"integer\", sizeof(int), FMOffset(EV_string_response*, condition_var)},\n    {\"ret\", \"string\", sizeof(char*), FMOffset(EV_string_response*,ret)},\n    {NULL, NULL, 0, 0}\n};\n\nFMStructDescRec  EV_string_response_formats[] = {\n    {\"EV_string_response\", EV_string_response_flds, sizeof(EV_string_response), NULL},\n    {NULL, NULL, 0, NULL}\n};\n\ntypedef struct _EV_EVevent_list_response {\n    int condition_var;\n    int ret_len;\n    EVevent_list ret;\n} EV_EVevent_list_response;\n\nFMField  EV_EVevent_list_response_flds[] = {\n    {\"condition_var\", \"integer\", sizeof(int), FMOffset(EV_EVevent_list_response*, condition_var)},\n    {\"ret_len\", \"integer\", sizeof(int), FMOffset(EV_EVevent_list_response*,ret_len)},\n    {\"ret\", \"EVevent_list[ret_len]\", sizeof(struct buf_entry), FMOffset(EV_EVevent_list_response*,ret)},\n    {NULL, NULL, 0, 0}\n};\n\nFMField  EVevent_list_flds[] = {\n    {\"length\", \"integer\", sizeof(int), FMOffset(EVevent_list,length)},\n    {\"event_buffer\", \"char[length]\", sizeof(char), FMOffset(EVevent_list, buffer)},\n    {NULL, NULL, 0, 0}\n};\n\nFMStructDescRec  EV_EVevent_list_response_formats[] = {\n    {\"EV_EVevent_response\", EV_EVevent_list_response_flds, sizeof(EV_EVevent_list_response), NULL},\n    {\"EVevent_list\", EVevent_list_flds, sizeof(struct buf_entry), NULL},\n    {NULL, NULL, 0, NULL}\n};\n\nint\ncount_EVevent_list(EVevent_list list)\n{\n    int count = 0;\n    while (list && list[count].buffer != NULL) {\n\tcount++;\n    }\n    count++;\n    return count;\n}\n\nEVevent_list\ncopy_EVevent_list(EVevent_list list)\n{\n    EVevent_list ret;\n    int i, size = count_EVevent_list(list);\n    ret = (EVevent_list) malloc(sizeof(ret[0]) * size);\n    for (i=0; i < size-1; i++) {\n\tret[i].length = list[i].length;\n\tret[i].buffer = malloc(list[i].length);\n\tmemcpy(ret[i].buffer, list[i].buffer, list[i].length);\n    }\n    ret[i].length = 0;\n    ret[i].buffer = NULL;\n    return ret;\n}\n\nEVSimpleHandlerFunc\nREVPlookup_handler(char *name)\n{\n    EVSimpleHandlerFunc f = NULL;\n    if (strncmp(\"0x\", name, 2) == 0) {\n\t/* hex constant */\n\tvoid *p;\n\tsscanf(name, \"0x%p\", &p);\n\tf = (EVSimpleHandlerFunc)p;\n\treturn f;\n    } \n#if !NO_DYNAMIC_LINKING\n    static lt_dlhandle h = NULL;\n    static void *dh = NULL;\n    if (h == NULL) {\n\t(void) lt_dlinit();\n\th = lt_dlopen(NULL);\n    }\n    f = (EVSimpleHandlerFunc) lt_dlsym(h, name);\n    if (f == NULL) {\n\tif (dh == NULL) {\n\t    dh = dlopen(NULL, 0);\n\t}\n\tprintf(\"Querying dlopen()\\\\n\");\n\tf = (EVSimpleHandlerFunc)dlsym(dh, name);\n    }\n    if (f == NULL) {\n\tif (dh == NULL) {\n\t    dh = dlopen(NULL, RTLD_GLOBAL|RTLD_LAZY);\n\t}\n\tf = (EVSimpleHandlerFunc)dlsym(dh, name);\n    }\n#endif\n    if (f == NULL) {\n\tprintf(\"Dynamic symbol lookup for \\\\\"%s\\\\\" failed.\\\\n\\\\tEither the symbol is invalid, or symbol lookup is not enabled.\\\\n\", name);\n\tprintf(\"Make sure that the symbol is declared \\\\\"extern\\\\\" (not \\\\\"static\\\\\")\\\\n\");\n\tprintf(\"Try linking the program with either \\\\\"-rdynamic\\\\\" (GCC) or \\\\\"-dlopen self\\\\\" (libtool)\\\\n\");\n    }\n    return f;\n}\n\nstatic char *\nget_format_name(CManager cm, FMStructDescList structs)\n{\n    int id_len, i;\n    FMFormat format = EVregister_format_set(cm, structs);\n    char *tmp = get_server_ID_FMformat(format, &id_len);\n    char *str_tmp = malloc(id_len * 2 + 1);\n    for (i=0; i < id_len; i++) {\n\tsprintf(&str_tmp[i*2], \"%02x\", ((unsigned char*)tmp)[i]);\n    }\n    return str_tmp;\n}\n\nextern FMStructDescList\nREVPlookup_format_structs(CManager cm, char *format_name)\n{\n    FMFormat format;\n    int slen = strlen(format_name);\n    int i;\n    unsigned char *id = malloc(slen/2);\n    for (i=0; i < slen/2; i++) {\n\tint x;\n\tchar tmp[3] = {0, 0, 0};\n\ttmp[0] = format_name[2*i];\n\ttmp[1] = format_name[2*i + 1];\n\tsscanf(tmp, \"%x\", &x);\n\tid[i] = (unsigned char) x;\n    }\n    format = FMformat_from_ID(cm->evp->fmc, (char*)id);\n    free(id);\n    return format_list_of_FMFormat(format);\n}\n\nEOF\n    foreach $subr (sort (keys %return_type)) {\n\tdefined($remote_enabled{$subr}) || next;\n\n\tprint REVPH \"\\nextern $return_type{$subr}\\n\";\n\t$no_client_data = strip_client_data($arguments{$subr});\n\t$no_handler = mod_EVhandler($no_client_data);\n\t$_ = $arguments{$subr};\n\t$has_client_data = 0;\n\tif (/.*client_data\\W*$/) {\n\t    $has_client_data = 1;\n\t}\n\t@args = split( \", \",  $no_handler, 2);\n\tif ($#args > 0) {\n\t    print REVPH \"R$subr(CMConnection conn, $args[1]);\\n\";\n\t} else {\n\t    print REVPH \"R$subr(CMConnection conn);\\n\";\n\t}\n\tgen_type(${subr}, $no_handler);\n\tgen_field_list(${subr}, $no_handler);\n\tgen_stub(${subr}, $no_handler);\n\tgen_wrapper(${subr},  $no_handler, $has_client_data);\n\tgen_handler(${subr}, $no_client_data, $has_client_data);\n    }\n\nprint REVP<<EOF;\nstatic void\nREV_response_handler(CManager cm, CMConnection conn, void *data,void *client_data,attr_list attrs)\n{\n    EV_void_response *response = (EV_void_response*) data;\n    void **response_ptr = CMCondition_get_client_data(cm, response->condition_var);\n    if (NULL != response_ptr) {\n\t*response_ptr = data;\n    }\n    CMCondition_signal(cm, response->condition_var);\n}\n\nstatic void\nREV_int_response_handler(CManager cm, CMConnection conn, void *data,void *client_data,attr_list attrs)\n{\n    EV_void_response *response = (EV_void_response*) data;\n    void **response_ptr = CMCondition_get_client_data(cm, response->condition_var);\n    if (NULL != response_ptr) {\n\tmemcpy(response_ptr, data, sizeof(EV_int_response));\n    }\n    CMCondition_signal(cm, response->condition_var);\n}\n\nstatic void\nREV_string_response_handler(CManager cm, CMConnection conn, void *data,void *client_data,attr_list attrs)\n{\n    EV_string_response *response = (EV_string_response*) data;\n    EV_string_response *stub_ptr = CMCondition_get_client_data(cm, response->condition_var);\n    if (NULL != stub_ptr) {\n\tmemcpy(stub_ptr, data, sizeof(EV_string_response));\n\tstub_ptr->ret = strdup(response->ret);\n    }\n    CMCondition_signal(cm, response->condition_var);\n}\n\nstatic void\nREV_EVevent_list_response_handler(CManager cm, CMConnection conn, void *data,void *client_data,attr_list attrs)\n{\n    EV_EVevent_list_response *response = (EV_EVevent_list_response*) data;\n    EV_EVevent_list_response *stub_ptr = CMCondition_get_client_data(cm, response->condition_var);\n    if (NULL != stub_ptr) {\n\tmemcpy(stub_ptr, data, sizeof(EV_EVevent_list_response));\n\tstub_ptr->ret = copy_EVevent_list(response->ret);\n    }\n    CMCondition_signal(cm, response->condition_var);\n}\n\nextern void\nREVPinit(CManager cm)\n{\n    CMFormat tmp_format;\n$handler_register_string\n    tmp_format = INT_CMregister_format(cm, EV_int_response_formats);\n    INT_CMregister_handler(tmp_format, REV_int_response_handler, cm->evp);\n\n    tmp_format = INT_CMregister_format(cm, EV_void_response_formats);\n    INT_CMregister_handler(tmp_format, REV_response_handler, cm->evp);\n\n    tmp_format = INT_CMregister_format(cm, EV_string_response_formats);\n    INT_CMregister_handler(tmp_format, REV_string_response_handler, cm->evp);\n\n    tmp_format = INT_CMregister_format(cm, EV_EVevent_list_response_formats);\n    INT_CMregister_handler(tmp_format, REV_EVevent_list_response_handler, cm->evp);\n}\nEOF\nprint REVPH<<EOF;\n\n#ifdef\t__cplusplus\n\\}\n#endif\nEOF\n",
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/thirdparty/EVPath/EVPath/cm_transport.c": "#include \"config.h\"\n\n#ifndef MODULE\n#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <unistd.h>\n#else\n#include \"kernel/kcm.h\"\n#include \"kernel/cm_kernel.h\"\n#include \"kernel/library.h\"\n/* don't pull in sys/types if MODULE is defined */\n#define _SYS_TYPES_H\n#endif\n#include <atl.h>\n#include <evpath.h>\n#include \"chr_time.h\"\n#include <cm_internal.h>\n#include <cm_transport.h>\n#if !NO_DYNAMIC_LINKING\n#include \"dlloader.h\"\n#endif\n#undef NDEBUG\n#include \"assert.h\"\n\nextern struct CMtrans_services_s CMstatic_trans_svcs;\n/* const lt_dlsymlist lt_preloaded_symbols[1] = { { 0, 0 } }; */\n\nstatic transport_entry *global_transports = NULL;\n\n/* static void */\n/* free_global_transports() */\n/* { */\n/*     int i = 0; */\n/*     transport_entry *tmp; */\n/*     if (global_transports == NULL) { */\n/* \treturn; */\n/*     } else { */\n/* \ttmp = global_transports; */\n/* \tglobal_transports = NULL; */\n/*     } */\n/*     while (tmp[i]) { */\n/* #if !NO_DYNAMIC_LINKING */\n/* \tCMdlclose(tmp[i]->dlhandle); */\n/* #endif */\n/* \tfree(tmp[i]->trans_name); */\n/* \tfree(tmp[i]); */\n/* \ti++; */\n/*     } */\n/*     free(tmp); */\n/* #if !NO_DYNAMIC_LINKING */\n/*     CMdlclearsearchlist(); */\n/* #endif */\n/* } */\n\nint\nfind_transport_in_cm(CManager cm, const char *trans_name)\n{\n    int i = 0;\n    if (cm->transports == NULL)\n\treturn 0;\n    while (cm->transports[i] != NULL) {\n\tif (strcmp(cm->transports[i]->trans_name, trans_name) == 0)\n\t    return 1;\n\ti++;\n    }\n    return 0;\n}\n\ntransport_entry\nadd_transport_to_cm(CManager cm, transport_entry transport)\n{\n    int num_trans;\n    if (cm->transports == NULL) {\n\tcm->transports = INT_CMmalloc(sizeof(transport_entry) * 2);\n\tnum_trans = 0;\n    } else {\n\tnum_trans = 0;\n\twhile (cm->transports[num_trans] != NULL)\n\t    num_trans++;\n\tcm->transports = INT_CMrealloc(cm->transports,\n\t\t\t\t       sizeof(transport_entry) *\n\t\t\t\t       (num_trans + 2));\n    }\n    cm->transports[num_trans] =\n\tINT_CMmalloc(sizeof(struct _transport_item));\n    *(cm->transports[num_trans]) = *transport;\n    cm->transports[num_trans + 1] = NULL;\n    transport = cm->transports[num_trans];\n    transport->cm = cm;\n    return transport;\n}\n\nint\nload_transport(CManager cm, const char *trans_name, int quiet)\n{\n    transport_entry *trans_list = global_transports;\n    transport_entry transport = NULL;\n    int i = 0;\n#if !NO_DYNAMIC_LINKING\n    transport_entry transport_to_free = NULL;\n    char *libname;\n    lt_dlhandle handle;\n#endif\n\n\n    if (find_transport_in_cm(cm, trans_name))\n\treturn 1;\n\n    while ((trans_list != NULL) && (*trans_list != NULL)) {\n\tif (strcmp((*trans_list)->trans_name, trans_name) == 0) {\n\t    transport_entry trans = add_transport_to_cm(cm, *trans_list);\n\t    if (trans->transport_init) {\n\t\ttrans->trans_data =\n\t\t    trans->transport_init(cm, &CMstatic_trans_svcs, trans);\n\t    }\n\t    return 1;\n\t}\n\ttrans_list++;\n\ti++;\n    }\n#if !NO_DYNAMIC_LINKING\n    libname =\n\tINT_CMmalloc(strlen(trans_name) +\n\t\t     strlen(\"lib\" CM_LIBRARY_PREFIX \"cm\") +\n\t\t     strlen(MODULE_EXT)\n\t\t     + 1);\n\n    strcpy(libname, \"lib\" CM_LIBRARY_PREFIX \"cm\");\n    strcat(libname, trans_name);\n    strcat(libname, MODULE_EXT);\n\n    lt_dladdsearchdir(EVPATH_MODULE_BUILD_DIR);\n    lt_dladdsearchdir(EVPATH_MODULE_INSTALL_DIR);\n    handle = CMdlopen(cm->CMTrace_file, libname, 0);\n    if (!handle) {\n\tif (!quiet)\n\t    fprintf(stderr, \"Failed to load required '%s' dll.\\n\",\n\t\t    trans_name);\n\tif (!quiet)\n\t    fprintf(stderr,\n\t\t    \"Search path includes '.', '%s', '%s' and any default search paths supported by ld.so\\n\",\n\t\t    EVPATH_MODULE_BUILD_DIR, EVPATH_MODULE_INSTALL_DIR);\n    }\n    if (!handle) {\n\treturn 0;\n    }\n    INT_CMfree(libname);\n    transport = INT_CMmalloc(sizeof(struct _transport_item));\n    transport_to_free = transport;\n    transport->trans_name = strdup(trans_name);\n    transport->cm = cm;\n    transport->dlhandle = handle;\n    transport->data_available = CMDataAvailable;\t/* callback\n\t\t\t\t\t\t\t * pointer */\n    transport->write_possible = CMWriteQueuedData;\t/* callback\n\t\t\t\t\t\t\t * pointer */\n    transport->transport_init = (CMTransport_func)\n\tlt_dlsym(handle, \"initialize\");\n    transport->listen = (CMTransport_listen_func)\n\tlt_dlsym(handle, \"non_blocking_listen\");\n    transport->initiate_conn = (CMConnection(*)())\n\tlt_dlsym(handle, \"initiate_conn\");\n    transport->initiate_conn_nonblocking = (CMTransport_NBconn_func)\n\tlt_dlsym(handle, \"initiate_conn_nonblocking\");\n    transport->finalize_conn_nonblocking = (CMConnection(*)())\n\tlt_dlsym(handle, \"finalize_conn_nonblocking\");\n    transport->self_check = (int (*)()) lt_dlsym(handle, \"self_check\");\n    transport->connection_eq =\n\t(int (*)()) lt_dlsym(handle, \"connection_eq\");\n    transport->shutdown_conn = (CMTransport_shutdown_conn_func)\n\tlt_dlsym(handle, \"shutdown_conn\");\n    transport->read_to_buffer_func = (CMTransport_read_to_buffer_func)\n\tlt_dlsym(handle, \"read_to_buffer_func\");\n    transport->read_block_func = (CMTransport_read_block_func)\n\tlt_dlsym(handle, \"read_block_func\");\n    transport->writev_func = (CMTransport_writev_func)\n\tlt_dlsym(handle, \"writev_func\");\n    transport->writev_complete_notify_func =\n\t(CMTransport_writev_complete_notify_func)\n\tlt_dlsym(handle, \"writev_complete_notify_func\");\n    transport->install_pull_schedule_func =\n\t(CMTransport_install_pull_schedule)\n\tlt_dlsym(handle, \"install_pull_schedule\");\n    transport->NBwritev_func = (CMTransport_writev_func)\n\tlt_dlsym(handle, \"NBwritev_func\");\n    transport->set_write_notify = (CMTransport_set_write_notify_func)\n\tlt_dlsym(handle, \"set_write_notify\");\n    transport->get_transport_characteristics =\n\t(CMTransport_get_transport_characteristics)\n\tlt_dlsym(handle, \"get_transport_characteristics\");\n    if (transport->transport_init) {\n\ttransport->trans_data =\n\t    transport->transport_init(cm, &CMstatic_trans_svcs, transport);\n    }\n    transport = add_transport_to_cm(cm, transport);\n    free(transport_to_free);\t/* returned transport is a copy */\n#else\n    if (strcmp(trans_name, \"sockets\") == 0) {\n\textern transport_entry cmsockets_add_static_transport(CManager cm,\n\t\t\t\t\t\t\t      CMtrans_services\n\t\t\t\t\t\t\t      svc);\n\ttransport =\n\t    cmsockets_add_static_transport(cm, &CMstatic_trans_svcs);\n\ttransport->data_available = CMDataAvailable;\t/* callback\n\t\t\t\t\t\t\t * pointer */\n\ttransport->write_possible = CMWriteQueuedData;\t/* callback\n\t\t\t\t\t\t\t * pointer */\n\t(void) add_transport_to_cm(cm, transport);\n    }\n    if (strcmp(trans_name, \"udp\") == 0) {\n\textern transport_entry cmudp_add_static_transport(CManager cm,\n\t\t\t\t\t\t\t  CMtrans_services\n\t\t\t\t\t\t\t  svc);\n\ttransport = cmudp_add_static_transport(cm, &CMstatic_trans_svcs);\n\ttransport->data_available = CMDataAvailable;\t/* callback\n\t\t\t\t\t\t\t * pointer */\n\ttransport->write_possible = CMWriteQueuedData;\t/* callback\n\t\t\t\t\t\t\t * pointer */\n\t(void) add_transport_to_cm(cm, transport);\n    }\n#ifdef NNTI_FOUND\n    if (strcmp(trans_name, \"nnti\") == 0) {\n\textern transport_entry cmnnti_add_static_transport(CManager cm,\n\t\t\t\t\t\t\t   CMtrans_services\n\t\t\t\t\t\t\t   svc);\n\ttransport = cmnnti_add_static_transport(cm, &CMstatic_trans_svcs);\n\ttransport->data_available = CMDataAvailable;\t/* callback\n\t\t\t\t\t\t\t * pointer */\n\ttransport->write_possible = CMWriteQueuedData;\t/* callback\n\t\t\t\t\t\t\t * pointer */\n\t(void) add_transport_to_cm(cm, transport);\n    }\n#endif\n#ifdef LIBFABRIC_FOUND\n    if (strcmp(trans_name, \"fabric\") == 0) {\n\textern transport_entry cmfabric_add_static_transport(CManager cm,\n\t\t\t\t\t\t\t     CMtrans_services\n\t\t\t\t\t\t\t     svc);\n\ttransport =\n\t    cmfabric_add_static_transport(cm, &CMstatic_trans_svcs);\n\ttransport->data_available = CMDataAvailable;\t/* callback\n\t\t\t\t\t\t\t * pointer */\n\ttransport->write_possible = CMWriteQueuedData;\t/* callback\n\t\t\t\t\t\t\t * pointer */\n\t(void) add_transport_to_cm(cm, transport);\n    }\n#endif\n#ifdef IB_FOUND\n    if (strcmp(trans_name, \"ib\") == 0) {\n\textern transport_entry cmib_add_static_transport(CManager cm,\n\t\t\t\t\t\t\t CMtrans_services\n\t\t\t\t\t\t\t svc);\n\ttransport = cmib_add_static_transport(cm, &CMstatic_trans_svcs);\n\ttransport->data_available = CMDataAvailable;\t/* callback\n\t\t\t\t\t\t\t * pointer */\n\ttransport->write_possible = CMWriteQueuedData;\t/* callback\n\t\t\t\t\t\t\t * pointer */\n\t(void) add_transport_to_cm(cm, transport);\n    }\n#endif\n#ifdef ENET_FOUND\n    if (strcmp(trans_name, \"enet\") == 0) {\n\textern transport_entry cmenet_add_static_transport(CManager cm,\n\t\t\t\t\t\t\t   CMtrans_services\n\t\t\t\t\t\t\t   svc);\n\ttransport = cmenet_add_static_transport(cm, &CMstatic_trans_svcs);\n\ttransport->data_available = CMDataAvailable;\t/* callback\n\t\t\t\t\t\t\t * pointer */\n\ttransport->write_possible = CMWriteQueuedData;\t/* callback\n\t\t\t\t\t\t\t * pointer */\n\t(void) add_transport_to_cm(cm, transport);\n    }\n#endif\n#ifdef ZPL_ENET_AVAILABLE\n    if (strcmp(trans_name, \"zplenet\") == 0) {\n\textern transport_entry cmzplenet_add_static_transport(CManager cm,\n\t\t\t\t\t\t\t   CMtrans_services\n\t\t\t\t\t\t\t   svc);\n\ttransport = cmzplenet_add_static_transport(cm, &CMstatic_trans_svcs);\n\ttransport->data_available = CMDataAvailable;\t/* callback\n\t\t\t\t\t\t\t * pointer */\n\ttransport->write_possible = CMWriteQueuedData;\t/* callback\n\t\t\t\t\t\t\t * pointer */\n\t(void) add_transport_to_cm(cm, transport);\n    }\n#endif\n#ifdef UDT4_FOUND\n    if (strcmp(trans_name, \"udt4\") == 0) {\n\textern transport_entry cmudt4_add_static_transport(CManager cm,\n\t\t\t\t\t\t\t   CMtrans_services\n\t\t\t\t\t\t\t   svc);\n\ttransport = cmudt4_add_static_transport(cm, &CMstatic_trans_svcs);\n\ttransport->data_available = CMDataAvailable;\t/* callback\n\t\t\t\t\t\t\t * pointer */\n\ttransport->write_possible = CMWriteQueuedData;\t/* callback\n\t\t\t\t\t\t\t * pointer */\n\t(void) add_transport_to_cm(cm, transport);\n    }\n#endif\n    if (!transport)\n\treturn 0;\n#endif\n    CMtrace_out(cm, CMTransportVerbose, \"Loaded transport %s.\\n\",\n\t\ttrans_name);\n    if (global_transports != NULL) {\n\tglobal_transports = INT_CMrealloc(global_transports,\n\t\t\t\t\t  sizeof(global_transports) * (i +\n\t\t\t\t\t\t\t\t       2));\n    } else {\n\tglobal_transports =\n\t    INT_CMmalloc(sizeof(global_transports) * (i + 2));\n/*\tatexit(free_global_transports);*/\n    }\n    global_transports[i] = transport;\n    global_transports[i + 1] = NULL;\n    if (transport->install_pull_schedule_func && cm->avail) {\n\ttransport->install_pull_schedule_func(&CMstatic_trans_svcs,\n\t\t\t\t\t      transport, &cm->base_time,\n\t\t\t\t\t      &cm->period, cm->avail);\n\tCMtrace_out(cm, CMTransportVerbose,\n\t\t    \"CM installed pull schedule to transport %s\\n\",\n\t\t    transport->trans_name);\n    }\n\n    return 1;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/thirdparty/EVPath/EVPath/evpath.supp": "{\n   Known DILL leak\n   Memcheck:Leak\n   fun:malloc\n   fun:alloc_dill_jump_table\n}\n{\n   Funky strcpy overlap in decode\n   Memcheck:Overlap\n   fun:strcpy\n...\n   fun:FFSconvert_record\n}\n{\n   <insert_a_suppression_name_here>\n   Memcheck:Leak\n   fun:*\n   fun:init_env_table\n}\n{\n   Unpleasant leak of string constant.  Generated code references this.  Bad.\n   Memcheck:Leak\n   fun:malloc\n   fun:strdup\n   fun:cg_expr\n}\n{\n   Less painful, but could be better.  Leak name of subroutine being called.\n   Memcheck:Leak\n   fun:malloc\n   fun:strdup\n   fun:cg_subroutine_call\n}\n{\n   This seems to be a Lex/Flex issue.  Possible non-reentrant.\n   Memcheck:Leak\n   fun:*\n   fun:cod_yyrealloc\n   fun:yyensure_buffer_stack\n}\n{\n   This seems to be a Lex/Flex issue.  Possible non-reentrant.\n   Memcheck:Leak\n   fun:*\n   fun:yyensure_buffer_stack\n}\n{\n   Intel compilers fool valgrind.\n   Memcheck:Cond\n   fun:__intel_sse2_strlen\n}\n{\n   Intel compilers fool valgrind.\n   Memcheck:Addr8\n   fun:__intel_sse2_strlen\n}\n{\n   Intel compilers fool valgrind.\n   Memcheck:Cond\n   fun:__intel_sse2_strcpy\n}\n{\n   Intel compilers fool valgrind.\n   Memcheck:Addr4\n   fun:__intel_sse2_strcpy\n}\n{\n   Intel compilers fool valgrind.\n   Memcheck:Addr8\n   fun:__intel_sse2_strcpy\n}\n{\n   Intel compilers fool valgrind.\n   Memcheck:Addr8\n   fun:__intel_sse2_strchr\n}\n{\n   Intel compilers fool valgrind.\n   Memcheck:Cond\n   fun:__intel_sse2_strcat\n}\n{\n   Intel compilers fool valgrind.\n   Memcheck:Value8\n   fun:__intel_sse2_strcat\n}\n{\n   Intel compilers fool valgrind.\n   Memcheck:Addr8\n   fun:__intel_sse2_strcat\n}\n{\n   Intel compilers fool valgrind.\n   Memcheck:Cond\n   fun:FMstr_to_data_type\n}\n{\n   Intel compilers fool valgrind.\n   Memcheck:Addr8\n   fun:FMstr_to_data_type\n}\n{\n   Intel compilers fool valgrind.\n   Memcheck:Value8\n   fun:FMstr_to_data_type\n}\n{\n   Anything under dlopen isn't our fault.\n   Memcheck:Leak\n   fun:*\n...\n   fun:CMdlopen\n}\n{\n   Atl atoms are persistent and never cleaned up\n   Memcheck:Leak\n   fun:*\n...\n   fun:set_string_and_atom\n}\n{\n   Atl atoms are persistent and never cleaned up\n   Memcheck:Leak\n   fun:*\n...\n   fun:init_atom_server\n}\n{\n   Transports are not deallocated once loaded\n   Memcheck:Leak\n   fun:*\n...   \n   fun:load_transport\n}\n{\n   CMdladdsearchdir leaks everything under it\n   Memcheck:Leak\n   fun:*\n...\n   fun:CMdladdsearchdir\n}\n{\n   non CM handlers are leaked.\n   Memcheck:Leak\n   fun:*\n...\n   fun:INT_CMregister_non_CM_message_handler\n}\n{\n   We leave this dill stream around for efficiency\n   Memcheck:Leak\n...\n   fun:dill_create_stream\n   fun:get_localized_formats\n}\n{\n   We leave this dill stream around for efficiency\n   Memcheck:Leak\n...\n   fun:dill_cross_init\n...\n   fun:generate_localized_subformat\n}\n{\n   This is a uninit in enet.\n   Memcheck:Param\n   socketcall.sendmsg(msg.msg_iov[i])\n   obj:*\n   fun:enet_socket_send\n   fun:enet_protocol_send_outgoing_commands\n}\n{\n   Leaked packet in enet_host_service\n   Memcheck:Leak\n   fun:malloc\n   fun:enet_malloc\n   fun:enet_packet_create\n   fun:enet_host_service\n}\n{\n   when we create field lists in COD, they get leaked\n   Memcheck:Leak\n...\n   fun:add_field_list\n   fun:semanticize_expr\n...\n}\n{\n   don't warn about uninit write vectors.  Too common...\n   Memcheck:Param\n   writev(vector[...])\n   ...\n   fun:*\n   fun:INT_CMwrite_raw\n   fun:internal_write_event\n}\n\n{\n  don't warn about uninit write vectors.  Too common...\n    Memcheck:Param\n    writev(vector[...])\n    ...\n    fun:*\n    fun:INT_CMwrite_raw\n}\n{\n  don't warn about uninit write vectors.  Too common...\n    Memcheck:Param\n    writev(vector[...])\n    fun:*\n    fun:*\n    fun:*\n    fun:INT_CMwrite_raw\n}\n{\n  don't warn about uninit write vectors.  Too common...\n    Memcheck:Param\n    writev(vector[...])\n    fun:*\n    fun:*\n    fun:INT_CMwrite_raw\n}\n{\n   known_leak\n   Memcheck:Leak\n   fun:malloc\n   fun:INT_CMregister_simple_format\n   fun:CMregister_simple_format\n}\n{\n  don't warn about uninit write vectors.  Too common...\n    Memcheck:Param\n     socketcall.sendmsg(msg.msg_iov[i])\n    obj:/lib/x86_64-linux-gnu/libpthread-2.15.so\n    ...\n    fun:*\n    fun:INT_CMwrite_raw\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/thirdparty/EVPath/EVPath/dlloader.c": "#include \"config.h\"\n#include <dlfcn.h>\n#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include \"dlloader.h\"\n\nstatic char **search_list = NULL;\n\nvoid\nCMdladdsearchdir(char *string)\n{\n    int count = 0;\n    if (search_list == NULL) {\n\tsearch_list = malloc(2*sizeof(char*));\n    } else {\n\twhile(search_list[count] != NULL) count++;\n\tsearch_list = realloc(search_list, (count+2)*sizeof(char*));\n    }\n    search_list[count] = strdup(string);\n    search_list[count+1] = NULL;\n}\n\ntypedef struct {\n    void *dlopen_handle;\n    char *lib_prefix;\n} *dlhandle;\n\nstatic int dlopen_verbose = -1;\n\nvoid\nCMset_dlopen_verbose(int verbose)\n{\n    dlopen_verbose = verbose;\n}\n\nvoid *\nCMdlopen(void *CMTrace_filev, char *in_lib, int mode)\n{\n#if NO_DYNAMIC_LINKING\n    return NULL;\n#else\n    dlhandle dlh;\n    void *handle = NULL;\n    char *tmp;\n    char *lib;\n    FILE *CMTrace_file = (FILE*)CMTrace_filev;\n    if (dlopen_verbose == -1) {\n\tdlopen_verbose = (getenv(\"CMTransportVerbose\") != NULL);\n    }\n    tmp = rindex(in_lib, '.');\n    if (dlopen_verbose) fprintf(CMTrace_file, \"Trying to dlopen %s\\n\", in_lib);\n    if (tmp && (strcmp(tmp, \".la\") == 0)) {\n\t/* can't open .la files */\n\tlib = malloc(strlen(in_lib) + strlen(MODULE_EXT) + 8);\n\tstrcpy(lib, in_lib);\n\tstrcpy(rindex(lib, '.'), MODULE_EXT);\n\tif (dlopen_verbose) fprintf(CMTrace_file, \"Dlopen module name replaced, now %s\\n\", lib);\n    } else {\n\tlib = strdup(in_lib);\n    }\n    char **list = search_list;\n    while(list && (list[0] != NULL)) {\n        char *tmp = malloc(strlen(list[0]) + strlen(lib) + 2);\n\tsprintf(tmp, \"%s/%s\", list[0], lib);\n\thandle = dlopen(tmp, RTLD_LAZY);\n\tchar *err = dlerror();\n\tif (dlopen_verbose) {\n\t    if (err) {\n\t\tfprintf(CMTrace_file, \"Failed to dlopen %s, error is %s\\n\", tmp, err);\n\t    } else {\n\t\tfprintf(CMTrace_file, \"DLopen of %s succeeded\\n\", tmp);\n\t    }\n\t}\n\tfree(tmp);\n \tlist++;\n\tif (handle) list = NULL; // fall out\n    }\n    if (!handle) {\n        handle = dlopen(lib, RTLD_LAZY);\n\tchar *err = dlerror();\n\tif (dlopen_verbose) {\n\t    if (err) {\n\t\tfprintf(CMTrace_file, \"Failed to dlopen %s, error is %s\\n\", tmp, err);\n\t    } else {\n\t\tfprintf(CMTrace_file, \"DLopen of %s succeeded\\n\", tmp);\n\t    }\n\t}\n    }\n    if (!handle) return NULL;\n    dlh = malloc(sizeof(*dlh));\n    tmp = rindex(lib, '/'); /* find name start */\n    if (!tmp) tmp = lib;\n\n    char *cm_lib_prefix;\n    if(strlen(CM_LIBRARY_PREFIX) > 0 &&\n      (cm_lib_prefix = strstr(tmp, CM_LIBRARY_PREFIX))) {\n      dlh->lib_prefix = malloc(strlen(tmp) - strlen(CM_LIBRARY_PREFIX) + 4);\n      strncpy(dlh->lib_prefix, tmp, cm_lib_prefix-tmp);\n      strcpy(dlh->lib_prefix + (cm_lib_prefix - tmp),\n          cm_lib_prefix + strlen(CM_LIBRARY_PREFIX));\n    }\n    else {\n      dlh->lib_prefix = malloc(strlen(tmp) + 4);\n      strcpy(dlh->lib_prefix, tmp);\n    }\n    tmp = rindex(dlh->lib_prefix, '.');\n    strcpy(tmp, \"_LTX_\");  /* kill postfix, add _LTX_ */\n    dlh->dlopen_handle = handle;\n    free(lib);\n    return (void*)dlh;\n#endif\n}\n\nvoid*\nCMdlsym(void *vdlh, char *sym)\n{\n#if NO_DYNAMIC_LINKING\n    return NULL;\n#else\n    dlhandle dlh = (dlhandle)vdlh;\n    char *tmp = malloc(strlen(sym) + strlen(dlh->lib_prefix) + 1);\n    void *sym_val;\n    strcpy(tmp, dlh->lib_prefix);\n    strcat(tmp, sym);\n    sym_val = dlsym(dlh->dlopen_handle, tmp);\n    free(tmp);\n    if (!sym_val) \n\tsym_val = dlsym(dlh->dlopen_handle, sym);\n    return sym_val;\n#endif\n}\n\nvoid\nCMdlclose(void *vdlh)\n{\n#if NO_DYNAMIC_LINKING\n    return;\n#else\n    dlhandle dlh = (dlhandle)vdlh;\n#ifdef ACTUALL_DO_DLCLOSE\n    dlclose(dlh->dlopen_handle);\n#endif\n    free(dlh->lib_prefix);\n    free(dlh);\n#endif\n}\n\nvoid\nCMdlclearsearchlist()\n{\n    int i = 0;\n    while(search_list[i]) {\n        free(search_list[i]);\n\ti++;\n    }\n    free(search_list);\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/thirdparty/EVPath/EVPath/dlloader.h": "#include <dlfcn.h>\n#define lt_dlopen(x) CMdlopen(cm, x, 0)\n#define lt_dladdsearchdir(x) CMdladdsearchdir(x)\n#define lt_dlsym(x, y) CMdlsym(x, y)\n#define lt_dlhandle void*\n#define MODULE_EXT CMAKE_SHARED_MODULE_SUFFIX\nextern void CMdladdsearchdir(char *dir);\nextern void* CMdlopen(void *CMTrace_file, char *library, int mode);\nextern void CMdlclose(void *handle);\nextern void CMdlclearsearchlist();\nextern void* CMdlsym(void *handle, char *symbol);\nextern void CMset_dlopen_verbose(int verbose);\n",
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/thirdparty/EVPath/EVPath/cm_util.c": "#include \"config.h\"\n#ifndef MODULE\n\n#include <stdlib.h>\n#ifdef HAVE_UNISTD_H\n#include <unistd.h>\n#endif\n#include <stdio.h>\n#ifdef STDC_HEADERS\n#include <stdarg.h>\n#else\n#include <varargs.h>\n#endif\n#include <errno.h>\n#else\n#include \"kernel/kcm.h\"\n#include \"kernel/cm_kernel.h\"\n#include \"kernel/library.h\"\n#endif\n#include \"atl.h\"\n#include \"evpath.h\"\n#include \"chr_time.h\"\n#include \"cm_internal.h\"\n\n\nextern void EVfprint_version(FILE* out);\nextern void CMset_dlopen_verbose(int verbose);\n\nint CMtrace_val[CMLastTraceType] = {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1};\nint CMtrace_timing = 0;\nint CMtrace_PID = 0;\n\nstatic int CMTrace_file_num = -1;\n\nextern void INT_CMTrace_file_id(int ID)\n{\n    CMTrace_file_num = ID;\n}\n\nextern int CMtrace_init(CManager cm, CMTraceType trace_type)\n{\n    int i, trace = 0;\n    char *str;\n    CMtrace_val[0] = 0;\n    CMtrace_val[EVWarning] = 1;  /* default on */\n    CMtrace_val[CMControlVerbose] = (getenv(\"CMControlVerbose\") != NULL);\n    CMtrace_val[CMConnectionVerbose] = (getenv(\"CMConnectionVerbose\") != NULL);\n    CMtrace_val[CMDataVerbose] = (getenv(\"CMDataVerbose\") != NULL);\n    CMtrace_val[CMTransportVerbose] = (getenv(\"CMTransportVerbose\") != NULL);\n    CMtrace_val[CMFormatVerbose] = (getenv(\"CMFormatVerbose\") != NULL);\n    CMtrace_val[CMFreeVerbose] = (getenv(\"CMFreeVerbose\") != NULL);\n    CMtrace_val[CMAttrVerbose] = (getenv(\"CMAttrVerbose\") != NULL);\n    CMtrace_val[CMBufferVerbose] = (getenv(\"CMBufferVerbose\") != NULL);\n    CMtrace_val[EVerbose] = (getenv(\"EVerbose\") != NULL);\n    CMtrace_val[CMSelectVerbose] = (getenv(\"CMSelectVerbose\") != NULL);    \n    CMtrace_val[EVdfgVerbose] = (getenv(\"EVdfgVerbose\") != NULL);\n    CMtrace_timing = (getenv(\"CMTraceTiming\") != NULL);\n    CMtrace_PID = (getenv(\"CMTracePID\") != NULL);\n    if ((str = getenv(\"EVWarning\")) != NULL) {\n\tsscanf(str, \"%d\", &CMtrace_val[EVWarning]);\n    }\n    if (getenv(\"CMVerbose\") != NULL) {\n\tint j;\n\tfor (j=0; j<CMLastTraceType; j++)\n\t    CMtrace_val[j] = 1;\n    }\n    /* for low level verbose, value overrides general CMVerbose */\n    CMtrace_val[CMLowLevelVerbose] = (getenv(\"CMLowLevelVerbose\") != NULL);\n\n    if (getenv(\"CMTraceFile\") != NULL) {\n\tCMTrace_file_num = getpid();\n    }\n    if (CMTrace_file_num != -1) {\n\tchar name[40];\n\tstatic int cm_count = 0;\n\tif (cm_count == 0) {\n\t    sprintf(name, \"CMTrace_output.%d\", (int)CMTrace_file_num);\n\t} else {\n\t    sprintf(name, \"CMTrace_output.%d_%d\", (int)CMTrace_file_num, cm_count);\n\t}\n\tcm_count++;\n\tcm->CMTrace_file = fopen(name, \"w\");\n\tif (cm->CMTrace_file == NULL) {\n\t    printf(\"Failed to open trace file %s\\n\", name);\n\t    cm->CMTrace_file = stdout;\n\t} else {\n\t    fprintf(cm->CMTrace_file, \"Trace flags set : \\n\");\n\t    if (CMtrace_val[CMAlwaysTrace]) fprintf(cm->CMTrace_file, \"CMAlwaysTrace, \");\n\t    if (CMtrace_val[CMControlVerbose]) fprintf(cm->CMTrace_file, \"CMControlVerbose, \");\n\t    if (CMtrace_val[CMConnectionVerbose]) fprintf(cm->CMTrace_file, \"CMConnectionVerbose, \");\n\t    if (CMtrace_val[CMLowLevelVerbose]) fprintf(cm->CMTrace_file, \"CMLowLevelVerbose, \");\n\t    if (CMtrace_val[CMDataVerbose]) fprintf(cm->CMTrace_file, \"CMDataVerbose, \");\n\t    if (CMtrace_val[CMTransportVerbose]) fprintf(cm->CMTrace_file, \"CMTransportVerbose, \");\n\t    if (CMtrace_val[CMFormatVerbose]) fprintf(cm->CMTrace_file, \"CMFormatVerbose, \");\n\t    if (CMtrace_val[CMFreeVerbose]) fprintf(cm->CMTrace_file, \"CMFreeVerbose, \");\n\t    if (CMtrace_val[CMAttrVerbose]) fprintf(cm->CMTrace_file, \"CMAttrVerbose, \");\n\t    if (CMtrace_val[CMBufferVerbose]) fprintf(cm->CMTrace_file, \"CMBufferVerbose, \");\n\t    if (CMtrace_val[EVerbose]) fprintf(cm->CMTrace_file, \"EVerbose, \");\n\t    if (CMtrace_val[EVWarning]) fprintf(cm->CMTrace_file, \"EVWarning, \");\n\t    if (CMtrace_val[CMSelectVerbose]) fprintf(cm->CMTrace_file, \"CMSelectVerbose, \");\n\t    if (CMtrace_val[EVdfgVerbose]) fprintf(cm->CMTrace_file, \"EVdfgVerbose, \");\n\t    fprintf(cm->CMTrace_file, \"\\n\");\n\t}\n    } else {\n\tcm->CMTrace_file = stdout;\n    }\n    for (i = 0; i < sizeof(CMtrace_val)/sizeof(CMtrace_val[0]); i++) {\n\tif (i!=EVWarning) trace |= CMtrace_val[i];\n    }\n    if (CMtrace_val[CMTransportVerbose]) {\n\tCMset_dlopen_verbose(1);\n    }\n\n    if (trace != 0) {\n\tEVfprint_version(cm->CMTrace_file);\n    }\n    fflush(cm->CMTrace_file);\n    return CMtrace_val[trace_type];\n}\n\n/*extern int\nCMtrace_on(CManager cm, CMTraceType trace_type)\n{\n    if (CMtrace_val[0] == -1) {\n\tCMtrace_init(cm);\n    }\n\n    return CMtrace_val[trace_type];\n    }*/\n\n /*extern void\nCMtrace_out(CManager cm, CMTraceType trace_type, char *format, ...)\n{\n#ifndef MODULE\n    va_list ap;\n\n    if (CMtrace_on(cm, trace_type)) {\n\tif (CMtrace_on(cm, CMLowLevelVerbose)) {\n\t    printf(\"P%lxT%lx - \", (long) getpid(), (long)thr_thread_self());\n\t}\n#ifdef STDC_HEADERS\n\tva_start(ap, format);\n#else\n\tva_start(ap);\n#endif\n\tvfprintf(cm->CMTrace_file, format, ap);\n\tva_end(ap);\n\tfprintf(cm->CMTrace_file, \"\\n\");\n    }\n#endif\n}\n */\nextern void\nCMtransport_verbose(CManager cm, CMTraceType trace, const char *format, ...)\n{\n#ifndef MODULE\n    va_list ap;\n    if (CMtrace_on(cm, trace)) {\n        if (CMtrace_PID) {\n            fprintf(cm->CMTrace_file, \"P%lxT%lx - \", (long) getpid(), (long)thr_thread_self());\n        }\n        if (CMtrace_timing) {\n            TRACE_TIME_DECL;\n            TRACE_TIME_GET;\n            fprintf(cm->CMTrace_file, TRACE_TIME_PRINTDETAILS);\n        }\n#ifdef STDC_HEADERS\n\tva_start(ap, format);\n#else\n\tva_start(ap);\n#endif\n\tvfprintf(cm->CMTrace_file, format, ap);\n\tva_end(ap);\n\t(void)cm;\n\tfprintf(cm->CMTrace_file, \"\\n\");\n    }\n#endif\n}\n\nextern void\nCMtransport_trace(CManager cm, const char *format, ...)\n{\n#ifndef MODULE\n    va_list ap;\n    if (CMtrace_on(cm, CMTransportVerbose)) {\n        if (CMtrace_PID) {\n            fprintf(cm->CMTrace_file, \"P%lxT%lx - \", (long) getpid(), (long)thr_thread_self());\n        }\n        if (CMtrace_timing) {\n            TRACE_TIME_DECL;\n            TRACE_TIME_GET;\n            fprintf(cm->CMTrace_file, TRACE_TIME_PRINTDETAILS);\n        }\n#ifdef STDC_HEADERS\n\tva_start(ap, format);\n#else\n\tva_start(ap);\n#endif\n\tvfprintf(cm->CMTrace_file, format, ap);\n\tva_end(ap);\n\t(void)cm;\n\tfprintf(cm->CMTrace_file, \"\\n\");\n    }\n#endif\n}\n\nextern attr_list \nCMint_create_attr_list(CManager cm, char *file, int line)\n{\n    attr_list list = create_attr_list();\n    (void)cm;\n    CMtrace_out(cm, CMAttrVerbose, \"Creating attr list %lx at %s:%d\\n\", \n\t\t(long)list, file, line);\n    return list;\n}\n\nextern void \nCMint_free_attr_list(CManager cm, attr_list l, char *file, int line)\n{\n    int count = attr_list_ref_count(l);\n    (void)cm;\n    CMtrace_out(cm, CMAttrVerbose, \"Freeing attr list %lx at %s:%d, ref count was %d\\n\", \n\t\t(long)l, file, line, count);\n    free_attr_list(l);\n}\n\n\nextern attr_list \nCMint_add_ref_attr_list(CManager cm, attr_list l, char *file, int line)\n{\n    int count;\n    (void)cm;\n    if (l == NULL) return NULL;\n    count = attr_list_ref_count(l);\n    CMtrace_out(cm, CMAttrVerbose, \"Adding ref attr list %lx at %s:%d, ref count now %d\\n\", \n\t\t(long)l, file, line, count+1);\n    return add_ref_attr_list(l);\n}\n\nextern attr_list \nCMint_attr_copy_list(CManager cm, attr_list l, char *file, int line)\n{\n    attr_list ret = attr_copy_list(l);\n    (void)cm;\n    CMtrace_out(cm, CMAttrVerbose, \"Copy attr list %lx at %s:%d, new list %p\\n\", \n\t\t(long)l, file, line, ret);\n    return ret;\n}\n\nextern void\nCMint_attr_merge_lists(CManager cm, attr_list l1, attr_list l2, \n\t\t       char *file, int line)\n{\n    (void)cm;\n    (void)file;\n    (void)line;\n    attr_merge_lists(l1, l2);\n}\n\nextern attr_list \nCMint_decode_attr_from_xmit(CManager cm, void * buf, char *file, int line)\n{\n    attr_list l = decode_attr_from_xmit(buf);\n    (void)cm;\n    CMtrace_out(cm, CMAttrVerbose, \"decode attr list from xmit at %s:%d, new list %lx\\n\", \n\t\tfile, line, (long)l);\n    return l;\n}\n\nextern void*\nINT_CMrealloc(void *ptr, int size)\n{\n    void *tmp = realloc(ptr, size);\n    if ((tmp == 0) && (size != 0)) {\n\tprintf(\"Realloc failed on ptr %lx, size %d\\n\", (long)ptr, size);\n\tperror(\"realloc\");\n    }\n    return tmp;\n}\n\nextern void*\nINT_CMmalloc(int size)\n{\n    return malloc(size);\n}\n\nextern void\nINT_CMfree(void *ptr)\n{\n    free(ptr);\n}\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/thirdparty/EVPath/EVPath/response.c": "#include \"config.h\"\n#undef NDEBUG\n#include <assert.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <memory.h>\n#include <strings.h>\n#include <string.h>\n#include <ctype.h>\n#include <time.h>\n#ifdef HAVE_UNISTD_H\n#include <unistd.h>\n#endif\n\n#include \"evpath.h\"\n#include \"cod.h\"\n#include \"cm_internal.h\"\n#include \"dlloader.h\"\n\ntypedef enum {Response_Filter, Response_Transform, Response_Router, Response_Multityped} response_types;\n\nstruct terminal_spec {\n    FMStructDescList format_list;\n    void *handler;\n    void *client_data;\n};\n\nstruct filter_spec {\n    FMStructDescList format_list;\n    char *function;\n    void *client_data;\n    FMFormat reference_format;\n};\n\nstruct transform_spec {\n    FMStructDescList in_format_list;\n    FMStructDescList out_format_list;\n    char *function;\n    void *client_data;\n    FMFormat reference_input_format;\n    FMFormat reference_output_format;\n    EVsource source_handle;\n    int output_base_struct_size;\n};\n\nstruct multityped_spec {\n    FMStructDescList *struct_list;\n    char *function;\n    void *client_data;\n    int accept_anonymous;\n    FMFormat *reference_input_format_list;\n};\n\ntypedef struct response_spec {\n    response_types response_type;\n    union {\n\tstruct terminal_spec term;\n\tstruct filter_spec filter;\n\tstruct transform_spec transform;\n\tstruct multityped_spec multityped;\n    }u;\n} *handler_list;\n\nstruct filter_instance {\n    int (*func_ptr)(void *, attr_list);\n    cod_code code;\n    cod_exec_context ec;\n    void *client_data;\n};\n\nstruct transform_instance {\n    int (*func_ptr)(void *, void*, attr_list, attr_list);\n    cod_code code;\n    cod_exec_context ec;\n    int out_size;\n    void *client_data;\n    FMFormat out_format;\n};\n\nstruct queued_instance {\n    int ref_count;\n    cod_code code;\n    cod_exec_context ec;\n    void *client_data;\n    FMFormat *formats;\n};\n\ntypedef struct response_instance {\n    response_types response_type;\n    int stone;\n    int proto_action_id;\n    union {\n\tstruct filter_instance filter;\n\tstruct transform_instance transform;\n\tstruct queued_instance queued;\n    }u;\n} *response_instance;\n\n\nstatic char *\nadd_FMfieldlist_to_string(char *str, FMStructDescRec *f)\n{\n    int index, field_count = 0;\n    FMFieldList list = f->field_list;\n    int len = strlen(str);\n    char *tmp_str;\n    len += strlen(f->format_name) + 5 + 35 + 20;\n    str = realloc(str, len);\n    while(list && (list[field_count].field_name != NULL)) field_count++;\n    tmp_str = str + strlen(str);\n    sprintf(tmp_str, \"FMFormat \\\"%s\\\" StructSize %d FieldCount %d\\n\",\n\t    f->format_name, f->struct_size, field_count);\n    for (index = 0; index < field_count; index++) {\n\tlen += strlen(list[index].field_name) +strlen(list[index].field_type) + 50;\n\tstr = realloc(str, len);\n\ttmp_str = str + strlen(str);\n\tsprintf(tmp_str, \"    FMField \\\"%s\\\" \\\"%s\\\" %d %d\\n\",\n\t\tlist[index].field_name, list[index].field_type,\n\t\tlist[index].field_size, list[index].field_offset);\n    }\n    return str;\n}\n\n/*static char *\nadd_IOformat_to_string(char *str, IOFormat ioformat)\n{\n    return add_IOfieldlist_to_string(str, name_of_IOformat(ioformat),\n\t\t\t\t     field_list_of_IOformat(ioformat));\n}*/\n\nstatic char *\nget_str(char *str, const char **name_p)\n{\n    int name_len = 0;\n    char *name = malloc(1);\n    while (*str != '\"') {\n\tname = realloc(name, (name_len + 2));\n\tname[name_len++] = *(str++);\n    }\n    name[name_len] = 0;\n    str++;\n    *name_p = name;\n    return str;\n}\n\nstatic char *\nparse_FMformat_from_string(char *str, FMStructDescRec *f)\n{\n    char *name;\n    FMFieldList list;\n    int struct_size;\n    f->format_name = NULL;\n    f->field_list = NULL;\n    f->struct_size = 0;\n    f->opt_info = NULL;\n    if (strncmp(str, \"FMFormat \\\"\", 10) == 0) {\n\tint field_count;\n\tint index = 0;\n\tstr += 10;\n\tstr = get_str(str, (const char **)&name);\n\tstr += strlen(\" StructSize \");\n\tif (sscanf(str, \"%d\", &struct_size) == 1) {\n\t    while(isdigit((int)*str)) str++;\n\t}\n\tstr += strlen(\" FieldCount \");\n\tif (sscanf(str, \"%d\", &field_count) == 1) {\n\t    while(isdigit((int)*str)) str++;\n\t}\n\tstr++;\n\tlist = malloc(sizeof(*list) * (field_count + 1));\n\tfor (index = 0; index < field_count; index++) {\n\t    str += strlen(\"    FMField \\\"\");\n\t    str = get_str(str, &(list[index].field_name));\n\t    str += 2;\n\t    str = get_str(str, &(list[index].field_type));\n\t    str++;\n\t    if (sscanf(str, \"%d\", &list[index].field_size) == 1) {\n\t\twhile(isdigit((int)*str)) str++;\n\t    }\n\t    str++;\n\t    if (sscanf(str, \"%d\", &list[index].field_offset) == 1) {\n\t\twhile(isdigit((int)*str)) str++;\n\t    }\n\t    str = strchr(str, '\\n') + 1;\n\t}\n\tlist[field_count].field_name = NULL;\n\tlist[field_count].field_type = NULL;\n\tlist[field_count].field_size = 0;\n\tlist[field_count].field_offset = 0;\n\tif (field_count == 0) {\n\t    free(list);\n\t    list = NULL;\n\t}\n\tf->format_name = name;\n\tf->field_list = list;\n\tf->struct_size = struct_size;\n    }\n    return str;\n}\n\nvoid *\ninstall_response_handler(CManager cm, int stone_id, char *response_spec,\n\t\t\t void *local_data, FMFormat **ref_ptr)\n{\n    char *str = response_spec;\n    (void)stone_id;\n    if (strncmp(\"Terminal Action\", str, strlen(\"Terminal Action\")) == 0) {\n\tint format_count, i;\n\tFMStructDescList list;\n\tstr += strlen(\"Terminal Action\") + 1;\n\tsscanf(str, \"  Format Count %d\\n\", &format_count);\n\tstr = strchr(str, '\\n') + 1;\n\tlist = malloc(sizeof(list[0]) * (format_count + 1));\n\tfor (i=0; i < format_count; i++) {\n\t    str = parse_FMformat_from_string(str, &list[i]);\n\t}\n\tlist[format_count].format_name = NULL;\n/*\tINT_EVassoc_terminal_action(cm, stone_id, list, local_data, NULL);*/\n    }\n    if (strncmp(\"Filter Action\", str, strlen(\"Filter Action\")) == 0) {\n\tstruct response_spec *response = malloc(sizeof(struct response_spec));\n\tint format_count, i;\n\tchar *function;\n\tFMStructDescList list;\n\tstr += strlen(\"Filter Action\") + 1;\n\tsscanf(str, \"  Format Count %d\\n\", &format_count);\n\tstr = strchr(str, '\\n') + 1;\n\tlist = malloc(sizeof(list[0]) * (format_count + 1));\n\tfor (i=0; i < format_count; i++) {\n\t    str = parse_FMformat_from_string(str, &list[i]);\n\t}\n\tlist[format_count].format_name = NULL;\n\tfunction = malloc(strlen(str) + 1);\n\tstrcpy(function, str);\n\tresponse->response_type = Response_Filter;\n\tresponse->u.filter.format_list = list;\n\tresponse->u.filter.function = function;\n\tresponse->u.filter.client_data = local_data;\n\tresponse->u.filter.reference_format =\n\t    EVregister_format_set(cm, list);\n\tif (ref_ptr) {\n\t    FMFormat *formats = malloc(2*sizeof(FMFormat));\n\t    formats[1] = NULL;\n\t    formats[0] = response->u.filter.reference_format;\n\n\t    *ref_ptr = formats;\n\t}\n\treturn (void*)response;\n    }\n    if (strncmp(\"Router Action\", str, strlen(\"Router Action\")) == 0) {\n\tstruct response_spec *response = malloc(sizeof(struct response_spec));\n\tint format_count, i;\n\tchar *function;\n\tFMStructDescList list;\n\tstr += strlen(\"Router Action\") + 1;\n\tsscanf(str, \"  Format Count %d\\n\", &format_count);\n\tstr = strchr(str, '\\n') + 1;\n\tlist = malloc(sizeof(list[0]) * (format_count + 1));\n\tfor (i=0; i < format_count; i++) {\n\t    str = parse_FMformat_from_string(str, &list[i]);\n\t}\n\tlist[format_count].format_name = NULL;\n\tfunction = malloc(strlen(str) + 1);\n\tstrcpy(function, str);\n\tresponse->response_type = Response_Router;\n\tresponse->u.filter.format_list = list;\n\tresponse->u.filter.function = function;\n\tresponse->u.filter.client_data = local_data;\n\tresponse->u.filter.reference_format =\n\t    EVregister_format_set(cm, list);\n\tif (ref_ptr) {\n\t    FMFormat *formats = malloc(2*sizeof(FMFormat));\n\t    formats[1] = NULL;\n\t    formats[0] = response->u.filter.reference_format;\n\n\t    *ref_ptr = formats;\n\t}\n\treturn (void*)response;\n    }\n    if (strncmp(\"Transform Action\", str, strlen(\"Transform Action\")) == 0) {\n\tstruct response_spec *response = malloc(sizeof(struct response_spec));\n\tint format_count, i;\n\tchar *function;\n\tFMStructDescList in_list, out_list;\n\tstr += strlen(\"Transform Action\") + 1;\n\tsscanf(str, \"  Input Format Count %d\\n\", &format_count);\n\tstr = strchr(str, '\\n') + 1;\n\tin_list = malloc(sizeof(in_list[0]) * (format_count + 1));\n\tfor (i=0; i < format_count; i++) {\n\t    str = parse_FMformat_from_string(str, &in_list[i]);\n\t}\n\tin_list[format_count].format_name = NULL;\n\tin_list[format_count].field_list = NULL;\n\tif (sscanf(str, \"  Output Format Count %d\\n\", &format_count) != 1) {\n\t    printf(\"output format parse failed\\n\");\n\t    return 0;\n\t}\n\tstr = strchr(str, '\\n') + 1;\n\tout_list = malloc(sizeof(out_list[0]) * (format_count + 1));\n\tfor (i=0; i < format_count; i++) {\n\t    str = parse_FMformat_from_string(str, &out_list[i]);\n\t}\n\tout_list[format_count].format_name = NULL;\n\tout_list[format_count].field_list = NULL;\n\tfunction = malloc(strlen(str) + 1);\n\tstrcpy(function, str);\n\tresponse->response_type = Response_Transform;\n\tresponse->u.transform.in_format_list = in_list;\n\tresponse->u.transform.out_format_list = out_list;\n\tresponse->u.transform.function = function;\n\tresponse->u.transform.client_data = local_data;\n\tresponse->u.transform.reference_input_format = NULL;\n\tif (in_list[0].format_name != NULL)\n\t    response->u.transform.reference_input_format =\n\t\tEVregister_format_set(cm, in_list);\n\tif (ref_ptr) {\n\t    FMFormat *formats = malloc(2*sizeof(FMFormat));\n\t    formats[1] = NULL;\n\t    formats[0] = response->u.transform.reference_input_format;\n\t    *ref_ptr = formats;\n\t}\n\tif (out_list[0].format_name != NULL)\n\t    response->u.transform.reference_output_format =\n\t\tEVregister_format_set(cm, out_list);\n\tresponse->u.transform.output_base_struct_size = out_list[0].struct_size;\n\treturn (void*)response;\n    }\n    if (strncmp(\"Multityped Action\", str, strlen(\"Multityped Action\")) == 0) {\n\tstruct response_spec *response = malloc(sizeof(struct response_spec));\n\tint list_count, j;\n\tchar *function;\n\tFMStructDescList *struct_list;\n\tint accept_anonymous = 0;\n\n\tstr += strlen(\"Multityped Action\") + 1;\n\tsscanf(str, \"  List Count %d\\n\", &list_count);\n\tstr = strchr(str, '\\n') + 1;\n\tstruct_list = malloc(sizeof(struct_list[0]) * (list_count + 1));\n\tfor (j = 0; j < list_count; j++) {\n\t    int format_count2, k;\n\t    FMStructDescList in_list;\n\t    sscanf(str, \"Next format   Subformat Count %d\\n\", &format_count2);\n\t    str = strchr(str, '\\n') + 1;\n\n\t    in_list = malloc(sizeof(in_list[0]) * (format_count2 + 1));\n\t    for (k=0; k < format_count2; k++) {\n\t\tstr = parse_FMformat_from_string(str, &in_list[k]);\n\t    }\n\t    in_list[format_count2].format_name = NULL;\n\t    in_list[format_count2].field_list = NULL;\n\t    struct_list[j] = in_list;\n\t    if (struct_list[j]->field_list == NULL) {  /* anonymous */\n\t\tfree(struct_list[j]->format_name);\n\t\tfree(in_list);\n\t\tstruct_list[j] = NULL;\n\t\tlist_count--;\n\t\tj--;\n\t\taccept_anonymous++;\n\t    }\n\t}\n\tstruct_list[list_count] = NULL;\n\tfunction = malloc(strlen(str) + 1);\n\tstrcpy(function, str);\n\tresponse->response_type = Response_Multityped;\n\tresponse->u.multityped.struct_list = struct_list;\n\tresponse->u.multityped.function = function;\n\tresponse->u.multityped.client_data = local_data;\n\tresponse->u.multityped.accept_anonymous = accept_anonymous;\n\tresponse->u.multityped.reference_input_format_list =\n\t    malloc((list_count +1) * sizeof(FMFormat));\n\tfor (j = 0; j < list_count; j++) {\n\t    if ((struct_list[j])[0].format_name != NULL) {\n\t\tresponse->u.multityped.reference_input_format_list[j] =\n\t\t    EVregister_format_set(cm, struct_list[j]);\n\t    }\n\t}\n\tif (ref_ptr) {\n\t    FMFormat *formats = malloc((list_count + 1)*sizeof(FMFormat));\n\t    int k = 0;\n\t    for (k=0; k < list_count; k++) {\n\t\tformats[k] = response->u.multityped.reference_input_format_list[k];\n\t    }\n\t    formats[list_count] = NULL;\n\t    *ref_ptr = formats;\n\t}\n\treturn (void*)response;\n    }\n    printf(\"Unparsed action : %s\\n\", str);\n    return NULL;\n}\n\n\nchar *\ncreate_terminal_action_spec(FMStructDescList format_list)\n{\n    int format_count = 0;\n    int i;\n    char *str;\n    while(format_list[format_count].format_name != NULL) format_count++;\n    str = malloc(50);\n    sprintf(str, \"Terminal Action   Format Count %d\\n\", format_count);\n\n    for (i = 0 ; i < format_count; i++) {\n\tstr = add_FMfieldlist_to_string(str, &format_list[i]);\n    }\n    return str;\n}\n\nchar *\nINT_create_bridge_action_spec(int stone_id, char *contact)\n{\n    int size = strlen(contact);\n    char *output;\n    size += strlen(\"Bridge Action\") + 20;\n    output = malloc(size);\n    sprintf(output, \"Bridge Action %d %s\", stone_id, contact);\n    return output;\n}\n\nvoid\nparse_bridge_action_spec(char *action_spec, int *target, char **contact)\n{\n    action_spec += strlen(\"Bridge Action \");\n    sscanf(action_spec, \"%d\", target);\n    while(*action_spec != ' ') action_spec++;\n    action_spec++;\n    *contact = action_spec;\n}\n\naction_value\naction_type(char *action_spec)\n{\n    if (action_spec == NULL)\n\treturn Action_Split;\n    if (strncmp(action_spec, \"Bridge Action\", 13) == 0)\n\treturn Action_Bridge;\n    if (strncmp(action_spec, \"Filter Action\", 13) == 0)\n\treturn Action_Immediate;\n    if (strncmp(action_spec, \"Router Action\", 13) == 0)\n\treturn Action_Immediate;\n    if (strncmp(action_spec, \"Transform Action\", 16) == 0)\n\treturn Action_Immediate;\n    if (strncmp(action_spec, \"Multityped Action\", 17) == 0)\n\treturn Action_Multi;\n    if (strncmp(action_spec, \"sink:\", 5) == 0)\n\treturn Action_Terminal;\n    if (strncmp(action_spec, \"source:\", 7) == 0)\n\treturn Action_Source;\n    if (strncmp(action_spec, \"Split Action\", 7) == 0)\n\treturn Action_Split;\n    return Action_NoAction;\n}\n\nchar *\nINT_create_filter_action_spec(FMStructDescList format_list, char *function)\n{\n    int format_count = 0;\n    int i;\n    char *str;\n    while(format_list && (format_list[format_count].format_name != NULL)) format_count++;\n    str = malloc(50);\n    sprintf(str, \"Filter Action   Format Count %d\\n\", format_count);\n\n    for (i = 0 ; i < format_count; i++) {\n\tstr = add_FMfieldlist_to_string(str, &format_list[i]);\n    }\n    str = realloc(str, strlen(str) + strlen(function) + 1);\n    strcpy(&str[strlen(str)], function);\n    return str;\n}\n\nchar *\nINT_create_router_action_spec(FMStructDescList format_list, char *function)\n{\n    int format_count = 0;\n    int i;\n    char *str;\n    while(format_list && (format_list[format_count].format_name != NULL)) format_count++;\n    str = malloc(50);\n    sprintf(str, \"Router Action   Format Count %d\\n\", format_count);\n\n    for (i = 0 ; i < format_count; i++) {\n\tstr = add_FMfieldlist_to_string(str, &format_list[i]);\n    }\n    str = realloc(str, strlen(str) + strlen(function) + 1);\n    strcpy(&str[strlen(str)], function);\n    return str;\n}\n\nchar *\nINT_create_transform_action_spec(FMStructDescList format_list, FMStructDescList out_format_list, char *function)\n{\n    int format_count = 0;\n    int i;\n    char *str;\n    while(format_list && format_list[format_count].format_name != NULL)\n\tformat_count++;\n    str = malloc(50);\n    sprintf(str, \"Transform Action   Input Format Count %d\\n\", format_count);\n\n    for (i = 0 ; i < format_count; i++) {\n\tstr = add_FMfieldlist_to_string(str, &format_list[i]);\n    }\n\n    format_count = 0;\n    while(out_format_list[format_count].format_name != NULL) format_count++;\n    str = realloc(str, strlen(str) + 30);\n    sprintf(str + strlen(str), \"  Output Format Count %d\\n\", format_count);\n\n    for (i = 0 ; i < format_count; i++) {\n\tstr = add_FMfieldlist_to_string(str, &out_format_list[i]);\n    }\n    str = realloc(str, strlen(str) + strlen(function) + 1);\n    strcpy(&str[strlen(str)], function);\n    return str;\n}\n\nextern char *\nINT_create_multityped_action_spec(FMStructDescList *input_format_lists, char *function)\n{\n    int list_count = 0;\n    int l, i;\n    char *str;\n    while(input_format_lists && input_format_lists[list_count] != NULL)\n\tlist_count++;\n\n    str = malloc(50);\n    sprintf(str, \"Multityped Action   List Count %d\\n\", list_count);\n\n    for (l = 0; l < list_count; l++) {\n\tint format_count = 0;\n\tFMStructDescList format_list = input_format_lists[l];\n\twhile(format_list && format_list[format_count].format_name != NULL)\n\t    format_count++;\n\tstr = realloc(str, strlen(str) + 50);\n\tsprintf(str + strlen(str), \"Next format   Subformat Count %d\\n\",\n\t\tformat_count);\n\tfor (i = 0 ; i < format_count; i++) {\n\t    str = add_FMfieldlist_to_string(str, &format_list[i]);\n\t}\n    }\n\n    str = realloc(str, strlen(str) + strlen(function) + 1);\n    strcpy(&str[strlen(str)], function);\n    return str;\n}\n\nstruct ev_state_data {\n    CManager cm;\n    struct _event_item *cur_event;\n    int stone;\n    int proto_action_id;\n    int out_count;\n    int *out_stones;\n    queue_item *item;\n    struct _queue *queue;\n    response_instance instance;\n    int did_output;\n};\n\nextern CManager\nget_cm_from_ev_state(void *vevstate)\n{\n    struct ev_state_data *evstate = (struct ev_state_data *)vevstate;\n    return evstate->cm;\n}\n\nstatic int\nfilter_wrapper(CManager cm, struct _event_item *event, void *client_data,\n\t       attr_list attrs, int out_count, int *out_stones)\n{\n    response_instance instance = (response_instance)client_data;\n    int ret;\n    cod_exec_context ec = instance->u.filter.ec;\n    struct ev_state_data ev_state;\n\n    ev_state.cm = cm;\n    ev_state.cur_event = event;\n    ev_state.out_count = out_count;\n    ev_state.out_stones = out_stones;\n    if (ec != NULL) {\n\tcod_assoc_client_data(ec, 0x34567890, (long)&ev_state);\n\n\tret = ((int(*)(cod_exec_context, void *, attr_list))instance->u.filter.code->func)(ec, event->decoded_event, attrs);\n    } else {\n\t/* DLL-based handler */\n\tret = ((int(*)(void *, attr_list))instance->u.filter.func_ptr)(event->decoded_event, attrs);\n    }\n    if (ret) {\n\tCMtrace_out(cm, EVerbose, \"Filter function returned %d, submitting further to stone %d\\n\", ret, out_stones[0]);\n\tinternal_path_submit(cm, out_stones[0], event);\n    } else {\n\tCMtrace_out(cm, EVerbose, \"Filter function returned %d, NOT submitting\\n\", ret);\n    }\n    return ret;\n}\nstatic int\nrouter_wrapper(CManager cm, struct _event_item *event, void *client_data,\n\t       attr_list attrs, int out_count, int *out_stones)\n{\n    response_instance instance = (response_instance)client_data;\n    int ret;\n    if (instance->u.filter.func_ptr) {\n\tret = ((int(*)(void *, attr_list))instance->u.filter.func_ptr)(event->decoded_event, attrs);\n    } else {\n\tint (*func)(cod_exec_context, void *, attr_list) =\n\t    (int(*)(cod_exec_context, void *, attr_list))instance->u.filter.code->func;\n\tcod_exec_context ec = instance->u.filter.ec;\n\tstruct ev_state_data ev_state;\n\n\tev_state.cm = cm;\n\tev_state.cur_event = event;\n\tev_state.out_count = out_count;\n\tev_state.out_stones = out_stones;\n\tcod_assoc_client_data(ec, 0x34567890, (long)&ev_state);\n\tret = (func)(ec, event->decoded_event, attrs);\n    }\n    if (ret >= 0) {\n\tif (ret >= out_count) {\n\t    CMtrace_out(cm, EVerbose, \"Router function returned %d, larger than the number of associated outputs\\n\", ret);\n\t} else if (out_stones[ret] == -1) {\n\t    CMtrace_out(cm, EVerbose, \"Router function returned %d, which has not been set with EVaction_set_output()\\n\", ret);\n\t} else {\n\t    CMtrace_out(cm, EVerbose, \"Router function returned %d, submitting further to stone %d\\n\", ret, out_stones[ret]);\n\t    internal_path_submit(cm, out_stones[ret], event);\n\t}\n    } else {\n\tCMtrace_out(cm, EVerbose, \"Router function returned %d, NOT submitting\\n\", ret);\n    }\n    return ret;\n}\n\nstatic void\ntransform_free_wrapper(void *data, void *free_data)\n{\n    FMFormat out_format = (FMFormat)free_data;\n    FMfree_var_rec_elements(out_format, data);\n    free(data);\n}\n\nstatic int\ntransform_wrapper(CManager cm, struct _event_item *event, void *client_data,\n\t\t  attr_list attrs, int out_count, int *out_stones)\n{\n    response_instance instance = (response_instance)client_data;\n    int ret;\n    void *out_event = malloc(instance->u.transform.out_size);\n    int(*func)(cod_exec_context, void *, void*, attr_list, attr_list) = NULL;\n    cod_exec_context ec = instance->u.transform.ec;\n    struct ev_state_data ev_state;\n    attr_list output_attrs = create_attr_list();\n\n    ev_state.cm = cm;\n    ev_state.cur_event = event;\n    ev_state.stone = instance->stone;\n    ev_state.proto_action_id = instance->proto_action_id;\n    ev_state.out_count = out_count;\n    ev_state.out_stones = out_stones;\n\n    if (CMtrace_on(cm, EVerbose)) {\n\tfprintf(cm->CMTrace_file, \"Input Transform Event is :\\n\");\n\tif (event->reference_format) {\n\t    FMfdump_data(cm->CMTrace_file, event->reference_format, event->decoded_event, 10240);\n\t} else {\n\t    fprintf(cm->CMTrace_file, \"       ****  UNFORMATTED  ****\\n\");\n\t}\n    }\n    memset(out_event, 0, instance->u.transform.out_size);\n    if (ec != NULL) {\n\tfunc = (int(*)(cod_exec_context, void *, void*, attr_list, attr_list))instance->u.transform.code->func;\n\tcod_assoc_client_data(ec, 0x34567890, (long)&ev_state);\n\tret = func(ec, event->decoded_event, out_event, attrs, output_attrs);\n    } else {\n\t/* DLL-based handler */\n\tret = ((int(*)(void *, void *, attr_list, attr_list))instance->u.transform.func_ptr)(event->decoded_event, out_event, attrs, output_attrs);\n    }\n\n    if (ret && (out_stones[0] == -1)) {\n\tprintf(\"Transform output stone ID not set, event discarded\\n\");\n\tret = 0;\n    }\n    if (ret) {\n\tstruct _EVSource s;\n\tif (CMtrace_on(cm, EVerbose)) {\n\t    FMFormat f = instance->u.transform.out_format;\n\t    fprintf(cm->CMTrace_file, \" Transform function returned %d, submitting further\\n\", ret);\n\t    FMfdump_data(cm->CMTrace_file, f, out_event, 10240);\n\t}\n\ts.local_stone_id = out_stones[0];\n\ts.cm = cm;\n\ts.format = NULL;\n\ts.reference_format = instance->u.transform.out_format;\n\ts.free_func = transform_free_wrapper;\n\ts.free_data = instance->u.transform.out_format;\n\ts.preencoded = 0;\n\tINT_EVsubmit(&s, out_event, output_attrs);\n    } else {\n\tCMtrace_out(cm, EVerbose, \"Transform function returned %d, NOT submitting\\n\", ret);\n\ttransform_free_wrapper(out_event, instance->u.transform.out_format);\n    }\n    free_attr_list(output_attrs);\n    return ret;\n}\n\n/* {{{ cod_find_index */\nstatic queue_item *queue_find_index(queue_item *item, int i, FMFormat format) {\n    for (;;) {\n        if (!item) {\n            return NULL;\n        }\n        if (!format || (item->item->reference_format == format)) {\n            if (i == 0)\n                return item;\n            --i;\n        }\n        item = item->next;\n    }\n}\n\nstatic queue_item *queue_find_anonymous(queue_item *item, int i, FMFormat *formats) {\n    for (;;) {\n\tint known = 0;\n\tint j = 0;\n        if (!item) {\n            return NULL;\n        }\n\twhile(formats[j]) {\n\t    if (item->item->reference_format == formats[j]) known++;\n\t    j++;\n\t}\n        if (known == 0) {\n            if (i == 0)\n                return item;\n            --i;\n        }\n        item = item->next;\n    }\n}\n\nstatic queue_item *cod_find_index_rel(struct ev_state_data *ev_state, int queue, int index)\n{\n    if (queue != -2) {\n\treturn queue_find_index(\n\t    ev_state->queue->queue_head, index,\n\t    queue < 0 ?  NULL : ev_state->instance->u.queued.formats[queue]);\n    } else {\n\treturn queue_find_anonymous(\n\t    ev_state->queue->queue_head, index, ev_state->instance->u.queued.formats);\n    }\n}\n\nstatic queue_item *cod_find_index_abs(struct ev_state_data *ev_state, int queue, int index) {\n    queue_item *ret;\n    ret = queue_find_index(ev_state->queue->queue_head, index, NULL);\n    if (!ret)\n        return NULL;\n    if (queue < 0 || ret->item->reference_format ==\n            ev_state->instance->u.queued.formats[queue])\n        return ret;\n    else\n        return NULL;\n}\n\nstatic queue_item *cod_find_index(int absp, struct ev_state_data *ev_state, int queue, int index) {\n    if (absp)\n        return cod_find_index_abs(ev_state, queue, index);\n    else\n        return cod_find_index_rel(ev_state, queue, index);\n}\n\n/* }}} */\n\nstatic void cod_ev_discard(cod_exec_context ec, int absp, int queue, int index) \n{\n    struct ev_state_data *ev_state = (void*)cod_get_client_data(ec, 0x34567890);\n    CManager cm = ev_state->cm;\n    queue_item *item;\n\n    item = cod_find_index(absp, ev_state, queue, index);\n\n    assert(item);\n\n    EVdiscard_queue_item(cm, ev_state->stone, item);\n}\n\nstatic void cod_ev_discard_rel(cod_exec_context ec, int queue, int index) {\n    cod_ev_discard(ec, 0, queue, index);\n}\n\n#ifdef NOT_DEF\nstatic void cod_ev_discard_abs(cod_exec_context ec, int queue, int index) {\n    cod_ev_discard(ec, 1, queue, index);\n}\n#endif\n\nstatic EVstone\nport_to_stone(struct ev_state_data *evstate, int port)\n{\n    if (port >= evstate->out_count) {\n\tfprintf(stderr, \"Stone has %d outbound ports, port %d invalid\\n\",\n\t\tevstate->out_count, port);\n\treturn -1;\n    }\n    if (evstate->out_stones[port] == -1) {\n\tfprintf(stderr, \"Stone port %d target has not been set\\n\",\n\t\tport);\n    }\n    return evstate->out_stones[port];\n}\n\nstatic void cod_ev_discard_and_submit(cod_exec_context ec,\n        int absp, int port, int queue, int index) \n{\n    struct ev_state_data *ev_state = (void*)cod_get_client_data(ec, 0x34567890);\n    CManager cm = ev_state->cm;\n    queue_item *item;\n    EVstone target_stone = port_to_stone(ev_state, port);\n\n    if (target_stone == -1) {\n        printf(\"Port %d on stone %d invalid\\n\", port, ev_state->stone);\n\treturn;\n    }\n\n    item = cod_find_index(absp, ev_state, queue, index);\n\n    if (item == NULL) {\n        printf(\"Item %x not found on queue %d, stone %d\\n\", index, queue, ev_state->stone);\n\treturn;\n    }\n\n    item->handled = 0;\n\n    internal_path_submit(cm, target_stone, item->item);\n\n    ev_state->did_output++;\n    EVdiscard_queue_item(cm, ev_state->stone, item);\n}\n\nstatic void cod_ev_submit(cod_exec_context ec,\n        int absp, int port, int queue, int index) \n{\n    struct ev_state_data *ev_state = (void*)cod_get_client_data(ec, 0x34567890);\n    CManager cm = ev_state->cm;\n    queue_item *item;\n    EVstone target_stone = port_to_stone(ev_state, port);\n\n    if (target_stone == -1) {\n        printf(\"Port %d on stone %d invalid\\n\", port, ev_state->stone);\n\treturn;\n    }\n\n    item = cod_find_index(absp, ev_state, queue, index);\n\n    if (item == NULL) {\n        printf(\"Item %x not found on queue %d, stone %d\\n\", index, queue, ev_state->stone);\n\treturn;\n    }\n\n    item->handled = 0;\n\n    internal_path_submit(cm, target_stone, item->item);\n\n    ev_state->did_output++;\n}\n\nstatic void cod_ev_submit_rel(cod_exec_context ec,int port, int queue, int index) \n{\n    cod_ev_submit(ec, 0, port, queue, index);\n}\n\n#ifdef NOT_DEF\nstatic void cod_ev_submit_abs(cod_exec_context ec,int port, int queue, int index) \n{\n    cod_ev_submit(ec, 1, port, queue, index);\n}\n#endif\n\nstatic int cod_ev_get_port(cod_exec_context ec, int queue)\n{\n    struct ev_state_data *ev_state = (void*)cod_get_client_data(ec, 0x34567890);\n    int port = (ev_state->out_stones[queue]);\n    \n    return  port;\n}\n\nstatic int cod_ev_target_size(cod_exec_context ec, int stone_num)\n{\n    struct ev_state_data *ev_state = (void*)cod_get_client_data(ec, 0x34567890);\n\n    CManager cm = ev_state->cm;\n    stone_type stone = stone_struct(cm->evp, stone_num);\n    if (!stone) return -1;\n    return stone->queue_size;\n}\n\n\n\nstatic void cod_ev_discard_and_submit_rel(cod_exec_context ec, int port, int queue,\n        int index) {\n    struct ev_state_data *ev_state = (void*) cod_get_client_data(ec, 0x34567890);\n    EVstone target_stone = port_to_stone(ev_state, port);\n    if (target_stone == -1) {\n        printf(\"Port %d on stone %d invalid\\n\", port, ev_state->stone);\n\treturn;\n    }\n\n    cod_ev_discard_and_submit(ec, 0, port, queue, index);\n}\n\n#ifdef NOT_DEF\nstatic void cod_ev_discard_and_submit_abs(cod_exec_context ec, int port, int queue,\n        int index) {\n    struct ev_state_data *ev_state = (void*) cod_get_client_data(ec, 0x34567890);\n    EVstone target_stone = port_to_stone(ev_state, port);\n    if (target_stone == -1) {\n        printf(\"Port %d on stone %d invalid\\n\", port, ev_state->stone);\n\treturn;\n    }\n\n    cod_ev_discard_and_submit(ec, 1, port, queue, index);\n}\n#endif\n\nstatic void *cod_ev_get_data(cod_exec_context ec, int absp, int queue, int index)\n{\n    struct ev_state_data *ev_state = (void*)cod_get_client_data(ec, 0x34567890);\n    queue_item *item;\n    item = cod_find_index(absp, ev_state, queue, index);\n\n    if (!item) {\n\treturn NULL;\n    }\n    assert(item->item);\n\n    if (!item->item->decoded_event) {\n        item->item = cod_decode_event(ev_state->cm, ev_state->stone,\n\t\t\t\t      ev_state->proto_action_id, item->item);\n    }\n    assert(item->item->decoded_event);\n\n    return item->item->decoded_event;\n}\n\nstatic void *cod_ev_get_data_rel(cod_exec_context ec, int queue, int index) {\n    return cod_ev_get_data(ec, 0, queue, index);\n}\n\nstatic void *cod_ev_get_data_abs(cod_exec_context ec, int queue, int index) {\n    return cod_ev_get_data(ec, 1, queue, index);\n}\n\nstatic int cod_ev_conforms(cod_exec_context ec, int queue, int index) {\n    struct ev_state_data *ev_state = (void*)cod_get_client_data(ec, 0x34567890);\n    return cod_find_index_abs(ev_state, queue, index) != NULL;\n}\n\nstatic int cod_ev_present(cod_exec_context ec, int queue, int index) {\n    struct ev_state_data *ev_state = (void*) cod_get_client_data(ec, 0x34567890);\n    return cod_find_index_rel(ev_state, queue, index) != NULL;\n}\n\nstatic int cod_ev_count(cod_exec_context ec, int queue) {\n    struct ev_state_data *ev_state;\n    FMFormat type;\n    queue_item *item;\n    int count = 0;\n\n    /*    queue == -1 RETURNS total event count */\n    /*    queue == -2 returns anonymous event count (I.E. count of events not in the queued format list) */\n\n    int format_count = 0;\n\n    ev_state = (void*) cod_get_client_data(ec, 0x34567890);\n    while(ev_state->instance->u.queued.formats[format_count]) format_count++;\n\n    if (format_count <= queue) {\n\tprintf(\"Error, queue parameter(%d) to EVCount is larger than queue count (%d)\\n\",\n\t       queue, format_count);\n\treturn -1;\n    }\n    if (queue == -2) {\n\titem = ev_state->queue->queue_head;\n\twhile (item) {\n\t    int i;\n\t    for (i =0; i < format_count; i++) {\n\t\t/* on match break out of loop */\n\t\tif (item->item->reference_format == ev_state->instance->u.queued.formats[i]) break;\n\t    }\n\t    /* if we got to format_count without matching anything, increment count */\n\t    if (i == format_count) ++count;\n\t    item = item->next;\n\t}\n\treturn count;\n    }\n    type = queue < 0 ? NULL :\n        ev_state->instance->u.queued.formats[queue];\n    item = ev_state->queue->queue_head;\n    while (item) {\n        if (!type || item->item->reference_format == type)\n            ++count;\n        item = item->next;\n    }\n\n    return count;\n}\n\nstatic attr_list cod_ev_get_attrs(cod_exec_context ec, int queue, int index) {\n    struct ev_state_data *ev_state = (void*) cod_get_client_data(ec, 0x34567890);\n    queue_item *item = cod_find_index_rel(ev_state, queue, index);\n    attr_list *pattr;\n\n    if (NULL == item) {\n\tprintf(\"No item at index %d on queue %d\\n\", index, queue);\n\n\treturn NULL;\n    }\n    pattr = &item->item->attrs;\n    if (!*pattr) {\n        *pattr = CMcreate_attr_list(ev_state->cm);\n    }\n    return *pattr;\n}\n\nstatic attr_list cod_ev_get_stone_attrs(cod_exec_context ec, char *stone_name) {\n    struct ev_state_data *ev_state = (void*) cod_get_client_data(ec, 0x34567890);\n    CManager cm = ev_state->cm;\n    event_path_data evp = cm->evp;\n    attr_list ret_list = NULL;\n    int cur_stone;\n    static atom_t STONE_NAME_ATOM = -1;\n    if (STONE_NAME_ATOM == -1) {\n\tSTONE_NAME_ATOM = attr_atom_from_string(\"EVP_STONE_NAME\");\n    }\n    for (cur_stone = evp->stone_base_num; cur_stone < evp->stone_count + evp->stone_base_num; ++cur_stone) {\n\tstone_type stone = stone_struct(evp, cur_stone);\n\tif (stone && (stone->stone_attrs != NULL)) {\n\t    char *this_stone_name = NULL;\n\t    if (get_string_attr(stone->stone_attrs, STONE_NAME_ATOM, &this_stone_name)) {\n\t\tif (stone_name && (strcmp(this_stone_name, stone_name) == 0)) {\n\t\t    if (ret_list) printf(\"Warning, duplicate stone name \\\"%s\\\" found during attr query\\n\", stone_name);\n\t\t    ret_list = stone->stone_attrs;\n\t\t}\n\t    }\n\t}\n    }\n    return ret_list;\n}\n\nstatic int\nqueued_wrapper(CManager cm, struct _queue *queue, queue_item *item,\n                void *client_data, int out_count, int *out_stones)\n{\n    response_instance instance = (response_instance)client_data;\n    int(*func)(cod_exec_context) =  /* XXX wrong type */\n\t(int(*)(cod_exec_context))instance->u.queued.code->func;\n    cod_exec_context ec = instance->u.queued.ec;\n    struct ev_state_data ev_state;\n\n    ev_state.cm = cm;\n    ev_state.cur_event = NULL;\n    ev_state.stone = instance->stone;\n    ev_state.proto_action_id = instance->proto_action_id;\n    ev_state.out_count = out_count;\n    ev_state.out_stones = out_stones;\n    ev_state.queue = queue;\n    ev_state.item = item;\n    ev_state.instance = instance;\n    ev_state.did_output = 0;\n    cod_assoc_client_data(ec, 0x34567890, (long)&ev_state);\n\n    func(ec);\n\n    return ev_state.did_output;\n}\n\nstatic response_instance\ngenerate_filter_code(CManager cm, struct response_spec *mrd, stone_type stone,\n\t\t     FMFormat format);\nstatic response_instance\ngenerate_multityped_code(CManager cm, struct response_spec *mrd, stone_type stone,\n\t\t\t  FMFormat *formats);\n\nextern\nvoid\nfree_struct_list(list)\nFMStructDescList list;\n{\n    int format_count = 0;\n    int format;\n\n    while(list[format_count].format_name != NULL) format_count++;\n\n    for (format = 0; format < format_count; format++) {\n\tfree(list[format].format_name);\n\tfree_FMfield_list(list[format].field_list);\n    }\n    free(list);\n}\n\nstatic FMFormat\nlocalize_format(CManager cm, FMFormat format)\n{\n    FMFormat ret;\n    FMStructDescList local_formats = get_localized_formats(format);\n    ret = EVregister_format_set(cm, local_formats);\n    free_struct_list(local_formats);\n    return ret;\n}\n\nvoid\ndump_mrd(void *mrdv)\n{\n    struct response_spec *mrd = (struct response_spec *) mrdv;\n    switch (mrd->response_type) {\n    case Response_Filter:\n\tprintf(\"Response Filter, code is %s\\n\",\n\t       mrd->u.filter.function);\n\tbreak;\n    case Response_Router:\n\tprintf(\"Response Router, code is %s\\n\",\n\t       mrd->u.filter.function);\n\tbreak;\n    case Response_Transform:\n\tprintf(\"Response Transform, code is %s\\n\",\n\t       mrd->u.transform.function);\n\tbreak;\n    case Response_Multityped:\n\tprintf(\"Multityped Action, code is %s\\n\",\n\t       mrd->u.transform.function);\n\tbreak;\n    }\n}\n\nstatic int\nproto_action_in_stage(proto_action *act, action_class stage) {\n    switch (stage) {\n    case Immediate_and_Multi:\n        if (act->action_type == Action_Multi) return 1;\n        /* fallthrough */\n    case Immediate:\n        switch (act->action_type) {\n        case Action_Terminal:\n        case Action_Filter:\n        case Action_Split:\n        case Action_Immediate:\n        case Action_Store:\n            return 1;\n        default:\n            return 0;\n        }\n    case Bridge:\n        return act->action_type == Action_Bridge;\n    case Congestion:\n        return act->action_type == Action_Congestion;\n    default:\n        assert(0);\n    }\n    return 0;\n}\n\nextern int\nFMformat_compat_cmp2(FMFormat format, FMFormat *formatList,\n\t\t     int listSize, FMcompat_formats * older_format);\n\nstatic void\nfree_multi_response(void *client_data)\n{\n    response_instance resp = (response_instance) client_data;\n    resp->u.queued.ref_count--;\n    if (resp->u.queued.ref_count != 0) return;\n    if (resp->u.queued.code) cod_code_free(resp->u.queued.code);\n    if (resp->u.queued.ec) cod_exec_context_free(resp->u.queued.ec);\n    free(resp);\n}\n\nstatic void\nfree_imm_response(void *client_data)\n{\n    response_instance resp = (response_instance) client_data;\n    switch (resp->response_type) {\n    case Response_Filter:\n    case Response_Router:\n\tif (resp->u.filter.code) cod_code_free(resp->u.filter.code);\n\tif (resp->u.filter.ec) cod_exec_context_free(resp->u.filter.ec);\n\tbreak;\n    case Response_Transform:\n\tif (resp->u.transform.code) cod_code_free(resp->u.transform.code);\n\tif (resp->u.transform.ec) cod_exec_context_free(resp->u.transform.ec);\n\tbreak;\n    default:\n\tbreak;\n    }\n    free(resp);\n}\n\nint\nresponse_determination(CManager cm, stone_type stone, action_class stage, event_item *event)\n{\n    int nearest_proto_action = -1;\n    int return_value = 0;\n    FMFormat conversion_target_format = NULL;\n    FMFormat matching_format = NULL;\n    int i, format_count = 0;\n    FMFormat * formatList;\n    int *format_map;\n    FMcompat_formats older_format = NULL;\n\n    formatList =\n\t(FMFormat *) malloc((stone->proto_action_count + 1) * sizeof(FMFormat));\n    format_map = (int *) malloc((stone->proto_action_count + 1) * sizeof(int));\n    for (i = 0; i < stone->proto_action_count; i++) {\n\tint j = 0;\n        if (!proto_action_in_stage(&stone->proto_actions[i], stage)) {\n            continue;\n        }\n\twhile (stone->proto_actions[i].matching_reference_formats &&\n\t       (stone->proto_actions[i].matching_reference_formats[j] != NULL)) {\n\t    if (strcmp(name_of_FMformat(event->reference_format), name_of_FMformat(stone->proto_actions[i].matching_reference_formats[j])) == 0 ) {\n\t\tformatList = (FMFormat *) realloc(formatList, (format_count + 2) * sizeof(FMFormat));\n\t\tformat_map = realloc(format_map, (format_count + 2) * sizeof(int));\n\t\tformatList[format_count] = stone->proto_actions[i].matching_reference_formats[j];\n\t\tformat_map[format_count] = i;\n\t\tformat_count++;\n\t    }\n\t    j++;\n\t}\n    }\n    formatList[format_count] = NULL;\n    if (event->reference_format == NULL) {\n\t/* special case for unformatted input */\n\tfor (i=0 ; i < stone->proto_action_count ; i++) {\n            if (!proto_action_in_stage(&stone->proto_actions[i], stage))\n\t\tcontinue;\n\t    if ((stone->proto_actions[i].matching_reference_formats == NULL) ||\n\t\t(stone->proto_actions[i].matching_reference_formats[0] == NULL))\n\t\tnearest_proto_action = i;\n\t}\n    } else {\n\tint map_entry = FMformat_compat_cmp2(event->reference_format,\n\t\t\t\t\t\t    formatList,\n\t\t\t\t\t\t    format_count,\n\t\t\t\t\t\t    &older_format);\n\tif (map_entry != -1) {\n            nearest_proto_action = format_map[map_entry];\n            matching_format = formatList[map_entry];\n        }\n    }\n    if (nearest_proto_action == -1) {\n        /* special case for accepting anything */\n        for (i=0; i < stone->proto_action_count; i++) {\n            if (!proto_action_in_stage(&stone->proto_actions[i], stage)) continue;\n            if (((stone->proto_actions[i].matching_reference_formats == NULL) ||\n\t\t (stone->proto_actions[i].matching_reference_formats[0] == NULL))\n                && stone->proto_actions[i].data_state != Requires_Decoded) {\n                nearest_proto_action = i;\n            }\n            if (stone->proto_actions[i].action_type == Action_Multi) {\n\t\tstruct response_spec *mrd;\n\n\t\tmrd =\n\t\t    stone->proto_actions[i].o.imm.mutable_response_data;\n\t\tif (mrd->u.multityped.accept_anonymous) {\n\t\t    nearest_proto_action = i;\n\t\t}\n            }\n        }\n    }\n    free(formatList);\n    free(format_map);\n    if (nearest_proto_action != -1) {\n\tint action_generated = 0;\n\tproto_action *proto = &stone->proto_actions[nearest_proto_action];\n\tif (proto->action_type == Action_Immediate) {\n\t    /* must be immediate action */\n\t    response_instance instance;\n\t    struct response_spec *mrd;\n\t    mrd =\n\t\tproto->o.imm.mutable_response_data;\n\t    switch(mrd->response_type) {\n\t    case Response_Filter:\n\t    case Response_Router:\n\t\tif (event->event_encoded) {\n\t\t    conversion_target_format =\n\t\t\tlocalize_format(cm, event->reference_format);\n\t\t} else {\n\t\t    conversion_target_format = event->reference_format;\n\t\t}\n\t\tbreak;\n\t    case Response_Transform:\n\t\tconversion_target_format = mrd->u.transform.reference_input_format;\n\t\tbreak;\n\t    case Response_Multityped:\n\t\tassert(FALSE);\n                break;\n\t    }\n\n\t    instance = generate_filter_code(cm, mrd, stone, conversion_target_format);\n\t    if (instance == NULL) return 0;\n\t    instance->stone = stone->local_id;\n\t    instance->proto_action_id = nearest_proto_action;\n\t    action_generated++;\n\t    switch(mrd->response_type) {\n\t    case Response_Filter:\n\t\tINT_EVassoc_mutated_imm_action(cm, stone->local_id, nearest_proto_action,\n\t\t\t\t\t       filter_wrapper, instance,\n\t\t\t\t\t       conversion_target_format, free_imm_response);\n\t\tbreak;\n\t    case Response_Router:\n\t\tINT_EVassoc_mutated_imm_action(cm, stone->local_id, nearest_proto_action,\n\t\t\t\t\t       router_wrapper, instance,\n\t\t\t\t\t       conversion_target_format, free_imm_response);\n\t\tbreak;\n\t    case Response_Transform:\n\t\tINT_EVassoc_mutated_imm_action(cm, stone->local_id, nearest_proto_action,\n\t\t\t\t\t       transform_wrapper, instance,\n\t\t\t\t\t       conversion_target_format, free_imm_response);\n\t\tbreak;\n            default:\n\t\tassert(FALSE);\n\t\tbreak;\n\t    }\n\t    return_value = 1;\n\t} else \tif (proto->action_type == Action_Multi || proto->action_type == Action_Congestion) {\n\t    response_instance instance;\n\t    struct response_spec *mrd;\n\n\t    mrd =\n\t\tproto->o.imm.mutable_response_data;\n\t    instance = generate_multityped_code(cm, mrd, stone,\n\t\t\t\t\t\t proto->matching_reference_formats);\n\t    if (instance == 0) {\n                return 0;\n            }\n\t    instance->stone = stone->local_id;\n\t    instance->proto_action_id = nearest_proto_action;\n\t    action_generated++;\n\t    INT_EVassoc_mutated_multi_action(cm, stone->local_id, nearest_proto_action,\n\t\t\t\t\t     queued_wrapper, instance,\n\t\t\t\t\t     proto->matching_reference_formats, free_multi_response);\n\t    if (mrd->u.multityped.accept_anonymous && (matching_format == NULL)) {\n\t\t/* we're accepting this as an anonymous target */\n\t\tINT_EVassoc_anon_multi_action(cm, stone->local_id, nearest_proto_action, queued_wrapper, instance,\n\t\t\t\t\t      event->reference_format);\n\t    }\n            if (event->event_encoded) {\n                conversion_target_format = matching_format;\n            }\n            return_value = 1;\n\t} else {\n\t    response_cache_element *resp;\n\n\t    conversion_target_format = NULL;\n\t    if (proto->matching_reference_formats) {\n\t\tconversion_target_format = proto->matching_reference_formats[0];\n\t    }\n\n\t    /* we'll install the conversion later, first map the response */\n\t    if (stone->response_cache_count == 0) {\n\t\tif (stone->response_cache != NULL) free(stone->response_cache);\n\t\tstone->response_cache = malloc(sizeof(stone->response_cache[0]));\n\t    } else {\n\t\tstone->response_cache =\n\t\t    realloc(stone->response_cache,\n\t\t\t    (stone->response_cache_count + 1) * sizeof(stone->response_cache[0]));\n\t    }\n\t    resp = &stone->response_cache[stone->response_cache_count++];\n\t    proto_action *proto2 = &stone->proto_actions[nearest_proto_action];\n\t    if (conversion_target_format) {\n\t\tresp->reference_format = conversion_target_format;\n\t    } else {\n\t\tresp->reference_format = event->reference_format;\n\t    }\n\t    resp->proto_action_id = nearest_proto_action;\n\t    resp->action_type = proto2->action_type;\n\t    resp->requires_decoded = (proto2->data_state == Requires_Decoded);\n            resp->stage = stage;\n\t}\n\tif (conversion_target_format != NULL) {\n\t    if (event->event_encoded) {\n\t\t/* create a decode action */\n\t\tINT_EVassoc_conversion_action(cm, stone->local_id, stage,\n\t\t\t\t\t      conversion_target_format,\n\t\t\t\t\t      event->reference_format);\n\t\treturn_value = 1;\n\t    } else {\n\t\tif (event->reference_format != conversion_target_format) {\n\t\t    /* \n\t\t     * create a decode action anyway, the event will be\n\t\t     * encoded to a buffer and then decoded into the target\n\t\t     * format.  Doing this more efficiently is difficult. \n\t\t     */\n\t\t    INT_EVassoc_conversion_action(cm, stone->local_id, stage,\n\t\t\t\t\t\t  conversion_target_format,\n\t\t\t\t\t\t  event->reference_format);\n\t\t    return_value = 1;\n\t\t} else {\n\t\t    return_value = 1;\n\t\t}\n\t    }\n\t} else {\n            return_value = 1;\n        }\n    }\n    fix_response_cache(stone);\n    return return_value;\n}\n\nvoid\nresponse_data_free(CManager cm, void *resp_void)\n{\n    struct response_spec *resp = (struct response_spec*)resp_void;\n    switch(resp->response_type) {\n    case Response_Filter:\n    case Response_Router:\n\tfree_struct_list(resp->u.filter.format_list);\n        free(resp->u.filter.function);\n\tbreak;\n    case Response_Transform:\n\tfree_struct_list(resp->u.transform.in_format_list);\n\tfree_struct_list(resp->u.transform.out_format_list);\n        free(resp->u.transform.function);\n\tbreak;\n    case Response_Multityped:\n      {\n\t  int i = 0;\n\t  while(resp->u.multityped.struct_list[i] != NULL) {\n\t      FMStructDescList list = resp->u.multityped.struct_list[i];\n\t      int j = 0;\n\t      while (list[j].format_name != NULL) {\n\t\t  free(list[j].format_name);\n\t\t  free_FMfield_list(list[j].field_list);\n\t\t  j++;\n\t      }\n\t      free(list);\n\t      i++;\n\t  }\n      }\n      free(resp->u.multityped.struct_list);\n      free(resp->u.multityped.reference_input_format_list);\n      free(resp->u.multityped.function);\n      break;\n    default:\n\tbreak;\n    }\n    free(resp);\n}\n\n#ifdef NOT_DEF\nstatic void\ncod_free_wrapper(void *data, void *free_data)\n{\n    event_item *event = (event_item *)free_data;\n    FMfree_var_rec_elements(event->reference_format,\n\t\t\t    data);\n}\n#endif\n\nextern void \nINT_EVadd_standard_routines(CManager cm, char *extern_string,\n\t\t\t    cod_extern_entry *externs)\n{\n    event_path_data evp = cm->evp;\n    int count = 0;\n    if (evp->externs == NULL) {\n\tevp->externs = malloc(sizeof(evp->externs[0]) * 2);\n    } else {\n\twhile(evp->externs[count].extern_decl != NULL) count++;\n\tevp->externs = realloc(evp->externs, \n\t\t\t       sizeof(evp->externs[0]) * (count + 2));\n    }\n    evp->externs[count].extern_decl = extern_string;\n    evp->externs[count].externs = externs;\n    evp->externs[count + 1].extern_decl = NULL;\n    evp->externs[count + 1].externs = NULL;\n}\n\nextern void \nINT_EVadd_standard_structs(CManager cm, FMStructDescList *lists)\n{\n    event_path_data evp = cm->evp;\n    int count = 0, new = 0, i;\n    \n    while (lists[new] != NULL) new++;\n\n    if (evp->extern_structs == NULL) {\n\tevp->extern_structs = malloc(sizeof(evp->extern_structs[0]) * (new+1));\n    } else {\n\twhile(evp->extern_structs[count] != NULL) count++;\n\tevp->extern_structs = realloc(evp->extern_structs, \n\t\t\t       sizeof(evp->extern_structs[0]) * (count + new + 1));\n    }\n    for (i=0; i<= new; i++) {\n\tevp->extern_structs[count + i] = lists[i];\n    }\n}\n\nstatic void\ncod_ffs_write(cod_exec_context ec, FFSFile fname,  int queue, int index)\n{\n    FMFormat ref_format, file_format;\n    struct ev_state_data * ev_state = (void*)cod_get_client_data(ec, 0x34567890);\n    queue_item * my_item = cod_find_index(0, ev_state, queue, index);\n    FMContext fmc;\n    attr_list *temp_attr;\n    FMStructDescList format_list;\n\n    if(!my_item) {\n\tfprintf(stderr, \"No corresponding item in the queue\\n\");\n\treturn;\n    }\n\n    ref_format = my_item->item->reference_format;\n    fmc = FMContext_of_file(fname);\n\n    format_list = format_list_of_FMFormat(ref_format);\n    file_format = FMregister_data_format(fmc, format_list);\n    \n    temp_attr = &my_item->item->attrs;\n    if(!*temp_attr) {\n\tprintf(\"There is no attr for: %s\\n\", format_list->format_name);\n    }\n    \n    if(my_item->item->event_encoded) {\n\tfprintf(stderr, \"Event is encoded, have not handled this case.  Can not write to file\\n\");\n\treturn;\n    } else {\n\tvoid * temp_data = my_item->item->decoded_event;\n\tif(!write_FFSfile_attrs(fname, file_format, temp_data, *temp_attr))\n\t    fprintf(stderr, \"Error in writing FFS_file!\\n\");\n    }\n    return;\n}\n\nstatic void\ncod_ffs_read(cod_exec_context ec, FFSFile fname, void * data, attr_list * temp, int queue)\n{\n    FMFormat ref_format;\n    struct ev_state_data * ev_state = (void*)cod_get_client_data(ec, 0x34567890);\n    FFSTypeHandle temp_type;\n    FFSContext fmc = FFSContext_of_file(fname);\n    FMStructDescList format_list;\n\n    ref_format = ev_state->instance->u.queued.formats[queue];\n    format_list = format_list_of_FMFormat(ref_format);\n    temp_type = FFSset_fixed_target(fmc, format_list);\n    (void)temp_type;\n    FFSread_attr(fname, data, temp);\n\n    return;\n}\n\n\nstatic\nint\ncod_max_output(cod_exec_context ec)\n{\n    struct ev_state_data *ev_state = (void*)cod_get_client_data(ec, 0x34567890);\n    return ev_state->out_count;\n}\n\nstatic int\ncod_target_stone_on_port(cod_exec_context ec, int port, void *data, void *type_info, attr_list attrs)\n{\n    struct ev_state_data *ev_state = (void*)cod_get_client_data(ec, 0x34567890);\n    EVstone target_stone = port_to_stone(ev_state, port);\n\n    if (target_stone == -1) {\n        printf(\"Port %d on stone %d invalid\\n\", port, ev_state->stone);\n\treturn -1;\n    }\n    return target_stone;\n}\n\nstruct delayed_event {\n    EVstone to_stone;\n    event_item *event;\n};\n\nextern void do_local_actions(CManager cm);\n\nstatic void\nEVdelayed_submit_func(CManager cm, void* vdelayed)\n{\n    struct delayed_event *delayed = (struct delayed_event *)vdelayed;\n    int stone_num = delayed->to_stone;\n    event_item *event = delayed->event;\n    free(delayed);\n    CManager_lock(cm);\n    internal_path_submit(cm, stone_num, event);\n    do_local_actions(cm);\n    return_event(cm->evp, event);\n    CManager_unlock(cm);\n}\n\nstatic void\ninternal_cod_submit_general(cod_exec_context ec, int port, void *data, void *type_info, attr_list attrs, struct timeval *tp)\n{\n    struct ev_state_data *ev_state = (void*)cod_get_client_data(ec, 0x34567890);\n    CManager cm = ev_state->cm;\n    event_path_data evp = ev_state->cm->evp;\n    event_item *event;\n    EVstone target_stone = port_to_stone(ev_state, port);\n\n    if (target_stone == -1) {\n        printf(\"Port %d on stone %d invalid\\n\", port, ev_state->stone);\n\treturn;\n    }\n\n    assert(CManager_locked(cm));\n    ev_state->did_output++;\n    if (ev_state->cur_event && data == ev_state->cur_event->decoded_event) {\n\tCMtrace_out(cm, EVerbose,\n\t\t    \"Internal COD submit, resubmission of current input event to stone %d\\n\",\n\t\t    target_stone);\n\tif (tp) {\n\t    /* delayed event */\n\t    struct delayed_event *ev = malloc(sizeof(struct delayed_event));\n\t    ev->to_stone = target_stone;\n\t    ev->event = ev_state->cur_event;\n\t    ev_state->cur_event->ref_count++;\n\t    INT_CMadd_delayed_task(cm, tp->tv_sec, tp->tv_usec, EVdelayed_submit_func, (void*)ev);\n\t} else {\n\t    internal_path_submit(ev_state->cm, target_stone, ev_state->cur_event);\n\t}\n    } else {\n\tFMFormat event_format = NULL;\n\tCMtrace_out(cm, EVerbose,\n\t\t    \"Internal COD submit, submission of new data to stone %d\\n\",\n\t\t    target_stone);\n\tif (event_format == NULL) {\n\t    event_format = EVregister_format_set(cm, (FMStructDescList) type_info);\n\t    if (event_format == NULL) {\n\t\tprintf(\"Bad format information on submit\\n\");\n\t\treturn;\n\t    }\n\t}\n\tevent = get_free_event(evp);\n\tevent->event_encoded = 0;\n\tevent->decoded_event = data;\n\tevent->reference_format = event_format;\n\tevent->format = NULL;\n/*\tevent->free_func = cod_free_wrapper;*/\n\tevent->free_func = NULL;\n\tevent->free_arg = event;\n\tevent->attrs = add_ref_attr_list(attrs);\n\tevent->cm = cm;\n\tcod_encode_event(cm, event);  /* map to memory we trust */\n\tevent->event_encoded = 1;\n\tevent->decoded_event = NULL;  /* lose old data */\n\tif (tp) {\n\t    /* delayed event */\n\t    struct delayed_event {\n\t\tEVstone to_stone;\n\t\tevent_item *event;\n\t    };\n\t    CMTaskHandle handle;\n\t    struct delayed_event *ev = malloc(sizeof(struct delayed_event));\n\t    ev->to_stone = target_stone;\n\t    ev->event = event;\n\t    handle = INT_CMadd_delayed_task(cm, tp->tv_sec, tp->tv_usec, EVdelayed_submit_func, (void*)ev);\n\t    free(handle);\n\t} else {\n\t    internal_path_submit(cm, target_stone, event);\n\t    return_event(cm->evp, event);\n\t}\n    }\n}\n\nstatic void\ninternal_cod_submit_attr(cod_exec_context ec, int port, void *data, void *type_info, attr_list attrs)\n{\n    internal_cod_submit_general(ec, port, data, type_info, attrs, NULL);\n}\n\nstatic void\ninternal_cod_submit(cod_exec_context ec, int port, void *data, void *type_info)\n{\n    internal_cod_submit_general(ec, port, data, type_info, NULL, NULL);\n}\n\nstatic void\nadd_standard_routines(stone_type stone, cod_parse_context context)\n{\n    static char extern_string[] = \"\\\n\t\tint printf(string format, ...);\\n\\\n\t\tvoid *malloc(int size);\\n\\\n\t\tvoid sleep(int seconds);\\n\\\n\t\tvoid free(void *pointer);\\n\\\n\t\tlong lrand48();\\n\\\n\t\tdouble drand48();\\n\\\n\t\tint EVmax_output(cod_exec_context ec);\\n\\\n\t\tint EVtarget_stone_on_port(cod_exec_context ec, int port);\\n\\\n\t\tvoid EVsubmit(cod_exec_context ec, int port, void* d, cod_type_spec dt);\\n\\\n\t\tvoid EVsubmit_attr(cod_exec_context ec, int port, void* d, cod_type_spec dt, attr_list list);\\n\\\n\t\tvoid EVsubmit_delayed(cod_exec_context ec, int port, void* d, cod_type_spec dt, attr_list list, timeval *tp);\\n\\\n        \tattr_list EVget_stone_attrs(cod_exec_context ec, char *stone_name);\\n \\\n\t\tattr_list stone_attrs;\\n\";\n\t\t//time_t time(time_t *timer);\\n\";\n\n    static cod_extern_entry externs[] = {\n\t{\"printf\", (void *) 0},\n\t{\"malloc\", (void*) 0},\n\t{\"free\", (void*) 0},\n\t{\"lrand48\", (void *) 0},\n\t{\"drand48\", (void *) 0},\n\t{\"stone_attrs\", (void *) 0},\n\t{\"EVsubmit\", (void *) 0},\n\t{\"EVsubmit_attr\", (void *) 0},\n\t{\"EVsubmit_delayed\", (void *) 0},\n\t{\"sleep\", (void*) 0},\n\t{\"EVmax_output\", (void*)0},\n\t{\"EVtarget_stone_on_port\", (void*)0},\n        {\"EVget_stone_attrs\",  (void *)0},\n\t{(void *) 0, (void *) 0}\n    };\n\n    //{\"time\", (void*) 0},\n\n    /*\n     * some compilers think it isn't a static initialization to put this\n     * in the structure above, so do it explicitly.\n     */\n    externs[0].extern_value = (void *) (long) printf;\n    externs[1].extern_value = (void *) (long) malloc;\n    externs[2].extern_value = (void *) (long) free;\n    externs[3].extern_value = (void *) (long) lrand48;\n    externs[4].extern_value = (void *) (long) drand48;\n    externs[5].extern_value = (void *) (long) &stone->stone_attrs;\n    externs[6].extern_value = (void *) (long) &internal_cod_submit;\n    externs[7].extern_value = (void *) (long) &internal_cod_submit_attr;\n    externs[8].extern_value = (void *) (long) &internal_cod_submit_general;\n    externs[9].extern_value = (void *) (long) &sleep;\n    externs[10].extern_value = (void *) (long) &cod_max_output;\n    externs[11].extern_value = (void *) (long) &cod_target_stone_on_port;\n    externs[12].extern_value = (void *) (long) &cod_ev_get_stone_attrs;\n\n    cod_assoc_externs(context, externs);\n    cod_parse_for_context(extern_string, context);\n}\n\nstatic void\nadd_typed_queued_routines(cod_parse_context context, int index, const char *fmt_name)\n{\n    char *extern_string;\n    char *data_extern_string;\n    static char *extern_string_fmt =\n        \"void EVdiscard_%s(cod_exec_context ec, cod_closure_context type, int index);\\n\"\n        \"int EVcount_%s(cod_exec_context ec, cod_closure_context type);\\n\"\n        \"int EVpresent_%s(cod_exec_context ec, cod_closure_context queue, int index);\\n\"\n        \"void EVdiscard_and_submit_%s(cod_exec_context ec, int target, cod_closure_context queue, int index);\\n\"\n        \"void EVsubmit_%s(cod_exec_context ec, int target, cod_closure_context queue, int index);\\n\"\n        \"attr_list EVget_attrs_%s(cod_exec_context ec, cod_closure_context queue, int index);\\n\"\n\t\"void write_%s(cod_exec_context ec, ffs_file fname, cod_closure_context type, int index);\\n\"\n\t\"void read_%s(cod_exec_context ec, ffs_file fname, void * data, attr_list * attr_data, cod_closure_context queue);\\n\";\n    static char *data_extern_string_fmt =\n        \"%s *EVdata_%s(cod_exec_context ec, cod_closure_context type, int index);\\n\"\n        \"%s *EVdata_full_%s(cod_exec_context ec, cod_closure_context type, int index);\\n\";\n    static cod_extern_entry externs_fmt[] = {\n        {\"EVdiscard_%s\", (void *) 0},\n        {\"EVcount_%s\", (void *) 0},\n        {\"EVpresent_%s\", (void *) 0},\n        {\"EVdiscard_and_submit_%s\", (void *) 0},\n        {\"EVget_attrs_%s\", (void *) 0},\n        {\"EVsubmit_%s\", (void *) 0},\n\t{\"write_%s\", (void *) 0},\n\t{\"read_%s\", (void *) 0},\n        {NULL, (void *) 0}\n    };\n    static cod_extern_entry data_externs_fmt[] = {\n        {\"EVdata_%s\", (void *) 0},\n        {\"EVdata_full_%s\", (void *) 0},\n        {NULL, (void *) 0}\n    };\n    cod_extern_entry *cur;\n    cod_extern_entry *externs;\n    cod_extern_entry *data_externs;\n\n    extern_string = malloc(strlen(fmt_name) * 9 + strlen(extern_string_fmt));\n    assert(extern_string);\n    data_extern_string = malloc(strlen(fmt_name) * 9 + strlen(data_extern_string_fmt));\n\n    sprintf(extern_string, extern_string_fmt,\n\t    fmt_name, fmt_name, fmt_name, fmt_name,\n\t    fmt_name, fmt_name, fmt_name, fmt_name);\n    sprintf(data_extern_string, data_extern_string_fmt,\n\t    fmt_name, fmt_name, fmt_name, fmt_name);\n    externs = malloc(sizeof(externs_fmt));\n    assert(externs);\n    memcpy(externs, externs_fmt, sizeof(externs_fmt));\n    externs[0].extern_value = (void*) cod_ev_discard_rel;\n    externs[1].extern_value = (void*) cod_ev_count;\n    externs[2].extern_value = (void*) cod_ev_present;\n    externs[3].extern_value = (void*) cod_ev_discard_and_submit_rel;\n    externs[4].extern_value = (void*) cod_ev_get_attrs;\n    externs[5].extern_value = (void*) cod_ev_submit_rel;\n    externs[6].extern_value = (void*) cod_ffs_write;\n    externs[7].extern_value = (void*) cod_ffs_read;\n\n    data_externs = malloc(sizeof(externs_fmt));\n    assert(data_externs);\n    memcpy(data_externs, data_externs_fmt, sizeof(data_externs_fmt));\n    data_externs[0].extern_value = (void*) cod_ev_get_data_rel;\n    data_externs[1].extern_value = (void*) cod_ev_get_data_abs;\n\n    for (cur = externs; cur->extern_name; ++cur) {\n        char *real_name = malloc(strlen(cur->extern_name) + strlen(fmt_name));\n        assert(real_name);\n        sprintf(real_name, cur->extern_name, fmt_name);\n        cur->extern_name = real_name;\n    }\n\n    cod_assoc_externs(context, externs);\n    cod_parse_for_context(extern_string, context);\n    for (cur = externs; cur->extern_name; ++cur) {\n\t/* \n\t * the index here is the index of the queue itself, \n\t * while the index in the calls above is the index of the referenced queue item \n\t */\n\tcod_set_closure(cur->extern_name, (void*)(long)index, context);\n        free(cur->extern_name);\n    }\n    free(externs);\n    free(extern_string);\n\n    if (index >= 0) {\n\tfor (cur = data_externs; cur->extern_name; ++cur) {\n\t    char *real_name = malloc(strlen(cur->extern_name) + strlen(fmt_name));\n\t    assert(real_name);\n\t    sprintf(real_name, cur->extern_name, fmt_name);\n\t    cur->extern_name = real_name;\n\t}\n\tcod_assoc_externs(context, data_externs);\n\tcod_parse_for_context(data_extern_string, context);\n\tfor (cur = data_externs; cur->extern_name; ++cur) {\n\t    /* \n\t     * the index here is the index of the queue itself, \n\t     * while the index in the calls above is the index of the referenced queue item \n\t     */\n\t    cod_set_closure(cur->extern_name, (void*)(long)index, context);\n\t    free(cur->extern_name);\n\t}\n    }\n    free(data_externs);\n    free(data_extern_string);\n}\n\nstatic void\nadd_queued_routines(cod_parse_context context, FMFormat *formats)\n{\n    static char extern_string[] = \"\\\n        int EVconforms(cod_exec_context ec, int queue, int index);\\n\\\n        void EVdiscard(cod_exec_context ec, int queue, int index);\\n\\\n        void EVdiscard_full(cod_exec_context ec, cod_closure_context queue, int index);\\n\\\n        void EVdiscard_and_submit(cod_exec_context ec, int target,\\\n                    int queue, int index);\\n\\\n        void EVdiscard_and_submit_full(cod_exec_context ec, int target,\\\n                    cod_closure_context queue, int index);\\n\t\t\t       \\\n        void *EVdata(cod_exec_context ec, int queue, int index);\\n\\\n        void *EVdata_full(cod_exec_context ec, cod_closure_context queue, int index);\\n\\\n        int EVcount(cod_exec_context ec, int queue);\\n\\\n        int EVcount_full(cod_exec_context ec, cod_closure_context type);\\n\\\n        int EVpresent(cod_exec_context ec, int queue, int index);\\n\\\n\tint EVget_port(cod_exec_context ec, int queue);\\n\\\n    \tint EVtarget_size(cod_exec_context ec, int outstone);\\n\\\n        attr_list EVget_attrs(cod_exec_context ec, int queue, int index);\\n\t\\\n        attr_list EVget_attrs_full(cod_exec_context ec, cod_closure_context queue, int index);\\n\\\n\";\n\n    static cod_extern_entry externs[] = {\n        {\"EVconforms\", (void *)0},  //0 \n        {\"EVdiscard\", (void *)0},  //1 \n        {\"EVdiscard_full\",  (void *)0},  //2 \n        {\"EVdiscard_and_submit\", (void *)0},  //3 \n        {\"EVdiscard_and_submit_full\", (void *)0},  //4 \n        {\"EVdata\", (void *)0},  //5 \n        {\"EVdata_full\", (void *)0},  //6 \n        {\"EVcount\", (void *)0},  //7 \n        {\"EVcount_full\", (void *)0},  //8 \n        {\"EVpresent\", (void *)0},  //9 \n        {\"EVget_port\", (void *)0},  //10 \n        {\"EVtarget_size\", (void *)0},  //11 \n        {\"EVget_attrs\", (void *)0},  //12 \n        {\"EVget_attrs_full\",  (void *)0},  //13 \n        {(void *)0, (void *)0}\n    };\n    int i;\n    FMFormat *cur;\n\n    externs[0].extern_value = (void*)cod_ev_conforms;\n    externs[1].extern_value = (void*)cod_ev_discard_rel;\n    externs[2].extern_value = (void*)cod_ev_discard_rel;\n    externs[3].extern_value = (void*)cod_ev_discard_and_submit_rel;\n    externs[4].extern_value = (void*)cod_ev_discard_and_submit_rel;\n    externs[5].extern_value = (void*)cod_ev_get_data_rel;\n    externs[6].extern_value = (void*)cod_ev_get_data_rel;\n    externs[7].extern_value = (void*)cod_ev_count;\n    externs[8].extern_value = (void*)cod_ev_count;\n    externs[9].extern_value = (void*)cod_ev_present;\n    externs[10].extern_value = (void*)cod_ev_get_port;\n    externs[11].extern_value = (void*)cod_ev_target_size;\n    externs[12].extern_value = (void*)cod_ev_get_attrs;\n    externs[13].extern_value = (void*)cod_ev_get_attrs;\n\n    cod_assoc_externs(context, externs);\n    cod_parse_for_context(extern_string, context);\n    cod_set_closure(\"EVdiscard_full\", (void*)(long)-1, context);\n    cod_set_closure(\"EVdiscard_and_submit_full\", (void*)(long)-1, context);\n    cod_set_closure(\"EVget_attrs_full\", (void*)(long)-1, context);\n    cod_set_closure(\"EVdata_full\", (void*)(long)-1, context);\n    cod_set_closure(\"EVcount_full\", (void*)(long)-1, context);\n\n    for (cur = formats, i = 0; *cur; ++cur, ++i) {\n        add_typed_queued_routines(context, i, name_of_FMformat(*cur));\n    }\n    add_typed_queued_routines(context, -2, \"anonymous\");\n}\n\nstatic void\nadd_queued_constants(cod_parse_context context, FMFormat *formats)\n{\n    FMFormat *cur_format;\n    int i = 0;\n    for (cur_format = formats; *cur_format; ++cur_format, ++i) {\n        const char *fmt_name = name_of_FMformat(*cur_format);\n        char *name = malloc(4 + strlen(fmt_name));\n        sprintf(name, \"%s_ID\", fmt_name);\n        cod_add_int_constant_to_parse_context(name, i, context);\n\tfree(name);\n    }\n}\n\n\nextern sm_ref\ncod_build_type_node(const char *name, FMFieldList field_list);\nextern sm_ref\ncod_build_param_node(const char *id, sm_ref typ, int param_num);\nextern void\ncod_add_decl_to_parse_context(const char *name, sm_ref item, cod_parse_context context);\nextern void\ncod_add_param(const char *id, const char *typ, int param_num,\n\t      cod_parse_context context);\n\nstatic void\nadd_param(cod_parse_context parse_context, char *name, int param_num,\n\t  FMFormat format)\n{\n    FMStructDescList list = format_list_of_FMFormat(format);\n    int i = 1;\n    sm_ref type, param;\n    while (list[i].format_name != NULL) {\n\tFMFieldList fl = list[i].field_list;\n\t/* step through input formats */\n\tcod_add_simple_struct_type(list[i].format_name, fl, parse_context);\n\ti++;\n    }\n    type = cod_build_type_node(list[0].format_name, list[0].field_list);\n    cod_add_decl_to_parse_context(list[0].format_name, type, parse_context);\n\n    param = cod_build_param_node(name, type, param_num);\n\n    cod_add_decl_to_parse_context(name, param, parse_context);\n}\n\nstatic void\nadd_type(cod_parse_context parse_context, FMFormat format)\n{\n    FMStructDescList list = format_list_of_FMFormat(format);\n    for (; list->format_name; ++list) {\n\tcod_add_simple_struct_type(list->format_name, list->field_list, parse_context);\n    }\n}\n\n#if 0\nstatic void\nadd_param_list(cod_parse_context parse_context, char *name, int param_num,\n\t  FMStructDescList list)\n{\n    char *tname = malloc(strlen(name) + strlen(\"_type\") +1);\n    sm_ref type, param;\n    int i = 0;\n    while (list[i].format_name != NULL) {\n\tsm_ref typ;\n\t/* step through input formats */\n\ttyp = cod_build_type_node(list[i].format_name,\n\t\t\t\t  list[i].field_list);\n\tcod_add_decl_to_parse_context(list[i].format_name, typ,\n\t\t\t\t      parse_context);\n\ti++;\n    }\n    sprintf(tname, \"%s_type\", name);\n    type = cod_build_type_node(tname, list[i-1].field_list);\n    cod_add_decl_to_parse_context(tname, type, parse_context);\n\n    param = cod_build_param_node(name, type, 0);\n\n    cod_add_decl_to_parse_context(name, param, parse_context);\n}\n#endif\n\nstatic int\ndll_prefix_present(char *filter)\n{\n\n    if (filter[0] == 'd' && filter[1] == 'l' && filter[2] == 'l' && filter[3] == ':') {\n\treturn 1;\n    }\n    return 0;\n}\n\nstatic char *\nextract_dll_path(char *filter)\n{\n    char *copy = strdup(filter);\n    char *temp;\n    char *path;\n\n\n    temp = strtok(copy, \":\");\n    if (strcmp(temp, \"dll\")) {\n\tfree(copy);\n\treturn NULL;\n    }\n    temp = strtok(NULL, \":\");\n\n    if (temp == NULL) {\n\tfree(copy);\n\treturn NULL;\n    }\n\n    path = strdup(temp);\n    free(copy);\n\n    return path;\n}\n\nstatic char *\nextract_symbol_name(char *filter)\n{\n\n    char *copy = strdup(filter);\n    char *temp;\n    char *symbol;\n\n    temp = strtok(copy, \":\");\n    if (strcmp(temp, \"dll\")) {\n\tfree(copy);\n\treturn NULL;\n    }\n    temp = strtok(NULL, \":\");\n    temp = strtok(NULL, \":\");\n\n    if (temp == NULL) {\n\tfree(copy);\n\treturn NULL;\n    }\n\n    symbol = strdup(temp);\n    free(copy);\n\n    return symbol;\n}\n\nstatic void*\nload_dll_symbol(CManager cm, char *path, char *symbol_name)\n{\n    lt_dlhandle handle;\n\n    handle = CMdlopen(cm->CMTrace_file, path, 0);\n    if (!handle) {\n    \tfprintf(stderr, \"failed opening %s\\n\", path);\n\t    return NULL;\n    }\n    return lt_dlsym(handle, symbol_name);\n}\n\nextern void\nadd_metrics_routines(stone_type stone, cod_parse_context context);\n\nstatic response_instance\ngenerate_filter_code(CManager cm, struct response_spec *mrd, stone_type stone,\n\t\t     FMFormat format)\n{\n    response_instance instance = malloc(sizeof(*instance));\n\n    cod_code code;\n    cod_parse_context parse_context = new_cod_parse_context();\n    /*    sm_ref conn_info_data_type, conn_info_param;*/\n\n    memset(instance, 0, sizeof(*instance));\n    add_standard_routines(stone, parse_context);\n    add_metrics_routines(stone, parse_context);\n    if (cm->evp->extern_structs) {\n\tint count = -1;\n\twhile(cm->evp->extern_structs[++count] != NULL) {\n\t    cod_add_struct_type(cm->evp->extern_structs[count], parse_context);\n\t}\n    }\n\t\n    if (cm->evp->externs) {\n\tint count = -1;\n\twhile (cm->evp->externs[++count].extern_decl != NULL) {\n\t    cod_assoc_externs(parse_context, cm->evp->externs[count].externs);\n\t    cod_parse_for_context(cm->evp->externs[count].extern_decl, \n\t\t\t\t  parse_context);\n\t}\n    }\n\n    switch (mrd->response_type) {\n    case Response_Filter:\n    case Response_Router:\n    case Response_Transform:\n\tcod_add_param(\"ec\", \"cod_exec_context\", 0, parse_context);\n\tif (format) {\n\t    add_param(parse_context, \"input\", 1, format);\n\t} else {\n\t    cod_add_param(\"input\", \"int\", 1, parse_context);\n\t}\n\tif (mrd->response_type == Response_Transform) {\n\t    add_param(parse_context, \"output\", 2,\n\t\t      mrd->u.transform.reference_output_format);\n\t    cod_add_param(\"event_attrs\", \"attr_list\", 3, parse_context);\n\t    cod_add_param(\"output_attrs\", \"attr_list\", 4, parse_context);\n\t} else {\n\t    cod_add_param(\"event_attrs\", \"attr_list\", 2, parse_context);\n\t}\n\tbreak;\n    case Response_Multityped:\n        /* this should call generate_multityped_code() */\n        assert(FALSE);\n\tbreak;\n    }\n\n/*    conn_info_data_type = cod_build_type_node(\"output_conn_info_type\",\n\t\t\t\t\t      output_conn_field_list);\n    cod_add_decl_to_parse_context(\"output_conn_info_type\",\n\t\t\t\t  conn_info_data_type, parse_context);\n    conn_info_param = cod_build_param_node(\"output_conn_info\",\n\t\t\t\t\t   conn_info_data_type, 3);\n    cod_add_decl_to_parse_context(\"output_conn_info\", conn_info_param,\n\t\t\t\t  parse_context);\n*/\n    switch(mrd->response_type) {\n    case Response_Filter:\n    case Response_Router:\n\tif (dll_prefix_present(mrd->u.filter.function)) {\n\t    /* it is a dll */\n\t    char *path = NULL;\n\t    char *symbol_name = NULL;\n\n\t    path = extract_dll_path(mrd->u.filter.function);\n\t    symbol_name = extract_symbol_name(mrd->u.filter.function);\n\t    if (!path || !symbol_name) {\n\t\tfprintf(stderr, \"could not parse string \\\"%s\\\" for dll path and symbol information\\n\", mrd->u.filter.function);\n\t\tfree(instance);\n\t\treturn NULL;\n\t    }\n\t    instance->u.filter.func_ptr = (int(*)(void*,attr_list)) load_dll_symbol(cm, path, symbol_name);\n\t    if (instance->u.filter.func_ptr == NULL) {\n\t\tfprintf(stderr, \"Failed to load symbol \\\"%s\\\" from file \\\"%s\\\"\\n\",\n\t\t\tsymbol_name, path);\n\t\tfree(instance);\n\t\tfree(path);\n\t\tfree(symbol_name);\n\t\treturn NULL;\n\t    }\n\t    free(symbol_name);\n\t    free(path);\n\t    instance->u.filter.code = NULL;\n\t} else {\n\t    code = cod_code_gen(mrd->u.filter.function, parse_context);\n\t    instance->response_type = mrd->response_type;\n\t    instance->u.filter.code = code;\n\t    if (code)\n\t\tinstance->u.filter.ec = cod_create_exec_context(code);\n\n\t    instance->u.filter.func_ptr = NULL;\n\t}\n\tbreak;\n    case Response_Transform:\n\tif (dll_prefix_present(mrd->u.transform.function)) {\n\t    /* it is a dll */\n\t    char *path = NULL;\n\t    char *symbol_name = NULL;\n\n\t    path = extract_dll_path(mrd->u.transform.function);\n\t    symbol_name = extract_symbol_name(mrd->u.transform.function);\n\t    if (!path || !symbol_name) {\n\t\tfprintf(stderr, \"could not parse string \\\"%s\\\" for dll path and symbol information\\n\", mrd->u.transform.function);\n\t\tfree(instance);\n\t\treturn NULL;\n\t    }\n\t    instance->u.transform.func_ptr =\n\t\t(int(*)(void*,void*,attr_list,attr_list)) load_dll_symbol(cm, path, symbol_name);\n\t    if (instance->u.transform.func_ptr == NULL) {\n\t\tfprintf(stderr, \"Failed to load symbol \\\"%s\\\" from file \\\"%s\\\"\\n\",\n\t\t\tsymbol_name, path);\n\t\tfree(instance);\n\t\tfree(path);\n\t\tfree(symbol_name);\n\t\treturn NULL;\n\t    }\n\t    instance->u.transform.code = NULL;\n\t    free(path);\n\t    free(symbol_name);\n\t} else {\n\t    code = cod_code_gen(mrd->u.transform.function, parse_context);\n\t    instance->response_type = Response_Transform;\n\t    instance->u.transform.code = code;\n\t    if (code)\n\t\tinstance->u.transform.ec = cod_create_exec_context(code);\n\t}\n\tinstance->u.transform.out_size =\n\t    mrd->u.transform.output_base_struct_size;\n\tinstance->u.transform.out_format =\n\t    mrd->u.transform.reference_output_format;\n\tbreak;\n    case Response_Multityped:\n\tbreak;\n    }\n    cod_free_parse_context(parse_context);\n\n    return instance;\n}\n\n#ifdef NOT_DEF\nstatic int\nverify_multityped_code(CManager cm, struct response_spec *mrd, stone_type stone,\n\t\t\t FMFormat *formats)\n{\n    FMFormat *cur_format;\n    int ret;\n\n/*    cod_code code;*/\n    cod_parse_context parse_context = new_cod_parse_context();\n    /*    sm_ref conn_info_data_type, conn_info_param;*/\n\n    for (cur_format = formats; *cur_format; ++cur_format) {\n        add_type(parse_context, *cur_format);\n    }\n\n    add_standard_routines(stone, parse_context);\n    add_metrics_routines(stone, parse_context);\n    add_queued_routines(parse_context, formats);\n    add_queued_constants(parse_context, formats);\n    if (cm->evp->extern_structs) {\n\tint count = -1;\n\twhile(cm->evp->extern_structs[++count] != NULL) {\n\t    cod_add_struct_type(cm->evp->extern_structs[count], parse_context);\n\t}\n    }\n\t\n    if (cm->evp->externs) {\n\tint count = -1;\n\twhile (cm->evp->externs[++count].extern_decl != NULL) {\n\t    cod_assoc_externs(parse_context, cm->evp->externs[count].externs);\n\t    cod_parse_for_context(cm->evp->externs[count].extern_decl, \n\t\t\t\t  parse_context);\n\t}\n    }\n\n\n\n    assert(mrd->response_type == Response_Multityped);\n    cod_add_param(\"ec\", \"cod_exec_context\", 0, parse_context);\n    ret = cod_code_verify(mrd->u.multityped.function, parse_context);\n    return ret;\n}\n#endif\n\nstatic response_instance\ngenerate_multityped_code(CManager cm, struct response_spec *mrd, stone_type stone,\n\t\t\t FMFormat *formats)\n{\n    response_instance instance = malloc(sizeof(*instance));\n    FMFormat *cur_format;\n    int format_count = 0;\n\n    cod_code code;\n    cod_parse_context parse_context = new_cod_parse_context();\n    /*    sm_ref conn_info_data_type, conn_info_param;*/\n\n    memset(instance, 0, sizeof(*instance));\n\n    for (cur_format = formats; *cur_format; ++cur_format) {\n\tadd_type(parse_context, *cur_format);\n\tformat_count++;\n    }\n\n    add_standard_routines(stone, parse_context);\n    add_metrics_routines(stone, parse_context);\n    add_queued_routines(parse_context, formats);\n    add_queued_constants(parse_context, formats);\n    if (cm->evp->extern_structs) {\n\tint count = -1;\n\twhile(cm->evp->extern_structs[++count] != NULL) {\n\t    cod_add_struct_type(cm->evp->extern_structs[count], parse_context);\n\t}\n    }\n\t\n    if (cm->evp->externs) {\n\tint count = -1;\n\twhile (cm->evp->externs[++count].extern_decl != NULL) {\n\t    cod_assoc_externs(parse_context, cm->evp->externs[count].externs);\n\t    cod_parse_for_context(cm->evp->externs[count].extern_decl, \n\t\t\t\t  parse_context);\n\t}\n    }\n\n\n\n    assert(mrd->response_type == Response_Multityped);\n    cod_add_param(\"ec\", \"cod_exec_context\", 0, parse_context);\n/*    if (format) {\n\tadd_param(parse_context, \"input\", 1, format);\n    } else {\n\tcod_add_param(\"input\", \"int\", 1, parse_context);\n\t}*/\n    cod_set_return_type(\"void\", parse_context);\n    code = cod_code_gen(mrd->u.multityped.function, parse_context);\n    instance->response_type = mrd->response_type;\n    instance->u.queued.ref_count = format_count;\n    instance->u.queued.formats = formats;\n    instance->u.queued.code = code;\n    if (code)\n\tinstance->u.queued.ec = cod_create_exec_context(code);\n\n    cod_free_parse_context(parse_context);\n\n    if (!instance->u.queued.ec) {\n        free(instance);\n        return NULL;\n    }\n\n    return instance;\n}\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/thirdparty/EVPath/EVPath/cmake/CreateLibtoolFile.cmake": "cmake_minimum_required(VERSION 3.0)\n# Get all propreties that cmake supports\nMACRO(GET_TARGET_PROPERTY_WITH_DEFAULT _variable _target _property _default_value)\n   GET_TARGET_PROPERTY (${_variable} ${_target} ${_property})\n   IF (${_variable} MATCHES NOTFOUND)\n     SET (${_variable} ${_default_value})\n   ENDIF (${_variable} MATCHES NOTFOUND)\n ENDMACRO (GET_TARGET_PROPERTY_WITH_DEFAULT)\n \n MACRO(CREATE_LIBTOOL_FILE _target _static_target _install_DIR)\n   GET_TARGET_PROPERTY_WITH_DEFAULT(_target_static_lib ${_target} STATIC_LIB \"\")\n   GET_TARGET_PROPERTY_WITH_DEFAULT(_target_dependency_libs ${_target} LT_DEPENDENCY_LIBS \"\")\n   GET_TARGET_PROPERTY_WITH_DEFAULT(_target_current ${_target} LT_VERSION_CURRENT 0)\n   GET_TARGET_PROPERTY_WITH_DEFAULT(_target_age ${_target} LT_VERSION_AGE 0)\n   GET_TARGET_PROPERTY_WITH_DEFAULT(_target_revision ${_target} LT_VERSION_REVISION 0)\n   GET_TARGET_PROPERTY_WITH_DEFAULT(_target_installed ${_target} LT_INSTALLED yes)\n   GET_TARGET_PROPERTY_WITH_DEFAULT(_target_shouldnotlink ${_target} LT_SHOULDNOTLINK yes)\n   GET_TARGET_PROPERTY_WITH_DEFAULT(_target_dlopen ${_target} LT_DLOPEN \"\")\n   GET_TARGET_PROPERTY_WITH_DEFAULT(_target_dlpreopen ${_target} LT_DLPREOPEN \"\")\n   SET(_laname ${PROJECT_BINARY_DIR}/lib${_target}.la_at_configured)\n   SET(_laname_base lib${_target})\n   FILE(WRITE ${_laname} \"# ${_laname_base}.la - a libtool library file\\n\")\n   FILE(APPEND ${_laname} \"# Generated by CMake ${CMAKE_VERSION} (like GNU libtool)\\n\")\n   FILE(APPEND ${_laname} \"#\\n# Please DO NOT delete this file!\\n# It is necessary for linking the library with libtool.\\n\\n\" )\n   FILE(APPEND ${_laname} \"# The name that we can dlopen(3).\\n\")\n   GET_TARGET_PROPERTY(_target_type ${_target} TYPE)\n   if (${_target_type} STREQUAL \"STATIC_LIBRARY\") \n       FILE(APPEND ${_laname} \"dlname=''\\n\\n\")\n   else ()\n       FILE(APPEND ${_laname} \"dlname='lib${_target}${CMAKE_SHARED_LIBRARY_SUFFIX}'\\n\\n\")\n   endif ()\n   FILE(APPEND ${_laname} \"# Names of this library.\\n\")\n   if (${_target_type} STREQUAL \"STATIC_LIBRARY\") \n       FILE(APPEND ${_laname} \"library_names=''\\n\\n\")\n   else()\n       FILE(APPEND ${_laname} \"library_names='$<TARGET_SONAME_FILE_NAME:${_target}> lib${_target}${CMAKE_SHARED_LIBRARY_SUFFIX}'\\n\\n\")\n   endif()\n   FILE(APPEND ${_laname} \"# The name of the static archive.\\n\")\n   GET_TARGET_PROPERTY(_target_type ${_static_target} TYPE)\n   if (${_target_type} STREQUAL \"STATIC_LIBRARY\") \n       FILE(APPEND ${_laname} \"old_library='$<TARGET_LINKER_FILE_NAME:${_static_target}>'\\n\\n\")\n   else ()\n       FILE(APPEND ${_laname} \"old_library=''\\n\\n\")\n   endif ()\n   FILE(APPEND ${_laname} \"# Linker flags that can not go in dependency_libs.\\n\")\n   FILE(APPEND ${_laname} \"inherited_linker_flags=' '\\n\\n\")\n   FILE(APPEND ${_laname} \"# Libraries that this one depends upon.\\n\")\n   FILE(APPEND ${_laname} \"dependency_libs='${_target_dependency_libs}'\\n\\n\")\n   FILE(APPEND ${_laname} \"# Names of additional weak libraries provided by this library\\n\")\n   FILE(APPEND ${_laname} \"weak_library_names=''\\n\\n\")\n   FILE(APPEND ${_laname} \"# Version information for ${_laname_base}.\\n\")\n   FILE(APPEND ${_laname} \"current=${_target_current}\\n\")\n   FILE(APPEND ${_laname} \"age=${_target_age}\\n\")\n   FILE(APPEND ${_laname} \"revision=${_target_revision}\\n\\n\")\n   FILE(APPEND ${_laname} \"# Is this an already installed library?\\n\")\n   FILE(APPEND ${_laname} \"installed=${_target_installed}\\n\\n\")\n   FILE(APPEND ${_laname} \"# Should we warn about portability when linking against -modules?\\n\")\n   FILE(APPEND ${_laname} \"shouldnotlink=${_target_shouldnotlink}\\n\\n\")\n   FILE(APPEND ${_laname} \"# Files to dlopen/dlpreopen\\n\")\n   FILE(APPEND ${_laname} \"dlopen='${_target_dlopen}'\\n\")\n   FILE(APPEND ${_laname} \"dlpreopen='${_target_dlpreopen}'\\n\\n\")\n   FILE(APPEND ${_laname} \"# Directory that this library needs to be installed in:\\n\")\n   FILE(APPEND ${_laname} \"libdir='${CMAKE_INSTALL_PREFIX}${_install_DIR}'\\n\")\n\n   file(GENERATE\n     OUTPUT\n     ${CMAKE_CURRENT_BINARY_DIR}/${_laname_base}.la\n     INPUT\n     ${_laname}\n     )\n   INSTALL( FILES ${CMAKE_CURRENT_BINARY_DIR}/${_laname_base}.la DESTINATION lib)\n\n ENDMACRO(CREATE_LIBTOOL_FILE)\n",
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/thirdparty/EVPath/EVPath/doc/cm.tex": "%\\documentstyle[moreverb,code,wrapfig,11pt]{article}\n\\documentclass[11pt]{article}\n\\usepackage{epsfig,fancyvrb}\n\\usepackage{wrapfig,code,moreverb}\n\\setlength{\\topmargin}{-0.4in}\n\\setlength{\\oddsidemargin}{+0.0in}\n\\setlength{\\evensidemargin}{+0.0in}\n\\setlength{\\textheight}{8.5in}\n\\setlength{\\textwidth}{6.50in}\n\\setlength{\\marginparwidth}{0.0in}\n\\setlength{\\marginparsep}{0.0in}\n\\setlength{\\marginparpush}{0.0in}\n\\setlength{\\unitlength}{1.0in}\n\\setlength{\\parskip}{.1in}\n\\renewcommand{\\bottomfraction}{.90}\n\\renewcommand{\\topfraction}{.90}\n\\makeatletter\n\\date{}\n\\def\\tightitemize{\\ifnum \\@itemdepth >3 \\@toodeep\\else \\advance\\@itemdepth \\@ne\n\\edef\\@itemitem{labelitem\\romannumeral\\the\\@itemdepth}%\n\\list{\\csname\\@itemitem\\endcsname}{\\setlength{\\topsep}{-\\parskip}\\setlength{\\parsep}{0in}\\setlength{\\itemsep}{0in}\\setlength{\\parskip}{0in}\\def\\makelabel##1{\\hss\\llap{##1}}}\\fi}\n \n\\let\\endtightitemize =\\endlist\n\\begingroup\n \\catcode`\\`=\\active\n \\gdef\\verbatim@font{\\footnotesize\\tt \\catcode96\\active\n   \\def`{\\leavevmode\\kern\\z@\\char96 }}\n\\endgroup\n\\makeatother\n\\newcommand{\\longpage}{\\enlargethispage{\\baselineskip}}\n\\newcommand{\\shortpage}{\\enlargethispage{-\\baselineskip}}\n\\pssilent\n\\pagestyle{empty}\n\\renewcommand{\\baselinestretch}{.95}   % -- double spaced lines\n\\title{The Connection Manager Library}\n\\author{ \n\\large\\bf Greg Eisenhauer\\\\\neisen@cc.gatech.edu\\\\\n\\ \\\\\nCollege of Computing \\\\\nGeorgia Institute of Technology \\\\\nAtlanta, Georgia 30332 \\\\\n}\n\\begin{document}\n\\bibliographystyle{plain}\n% \\begin{titlepage}\n\\maketitle\n\\begin{center}\n\\today{} -- CM/EVPath Version 3.0\n\\end{center}\n\\section{Introduction}\n\nConnection Manager is a library of communications routines which manage the\ncomplexity of systems with multiple communication links between\nheterogeneous machines.  The library is designed to be used as an\nimplementation basis for networks of agents communicating\napplication-specific data.  It contains support for establishing communication between agents,\nmatching incoming messages with handlers, and assisting in the distribution\nof message format information to entities with which it is communicating.\nConnection Manager is a point-to-point messaging API contained within\nthe broader EVPath library.  This paper details the services and\ninterfaces offered by CM.\n\n\\section{Overall Description\\label{overall}}\n\nThe core purpose of Connection Manager is to ease the task of creating and\noperating networks of communicating entities over specialized and\nconfigurable data transport mechanisms.  In particular, it is designed to\nabstract away the intricacies of those transports and to satisfy two\nconflicting goals: allowing uncustomized applications and libraries to\ntransparently use specialized data transport mechanisms (such as raw\nATM, InfiniBand, Reliable UDP), while still allowing knowledgeable\napplication layers to configure transport particulars.\n\nCM also directly supports heterogeneous applications by providing for binary\ndata transmission between entities and locating the most appropriate handler\nfor incoming data.  To provide heterogeneity support, CM relies mostly\nupon FFS, a lower-level communications library that supports binary\ntransmission of C-style data structures between heterogeneous machines.\nFFS is documented in the {\\bf FFS Reference Manual}, available at\nhttp://www.cc.gatech.edu/\\~{ }eisen/FFS\\_manual.pdf.  That document is not\nyet complete.  It began it's life as a manual for PBIO, FFS'\npredecessor, and has not yet been completely updated.\nFamiliarity with the concepts\nand specifications used in FFS are necessary for understanding messaging in\nCM.  Under normal circumstance, CM relies on FFS's internal mechanisms for\ndistributing message format information.  However, in circumstances where\ndependency upon FFS's external format server is impossible, such as for\noperation within the kernel, each CM application can act as its own format\nserver.\n\n\\begin{figure}\n\\vspace*{-0.35in}\n\\begin{center}\\\n\\includegraphics[angle=270,width=3in]{struct.pdf}\n%\\psfig{figure=struct.eps,width=3in}\n\\caption{Structure of the Connection Manager.\\label{fig:struct}} \n\\end{center}\n\\end{figure}\nIn order to allow applications to transparently use a variety of data\ntransport mechanisms, CM is structured so that individual transports are\nimplemented with dynamically loadable modules as depicted in\nFigure~\\ref{fig:struct}.  Applications can use transport mechanisms that\nmight not have existed when the application as written and they are not\nburdened with the code and memory requirements of unused transports.  In\naddition to the dynamically loadable transports, Figure~\\ref{fig:struct}\nshows {\\it FD select()} functionality separated out into a loadable module.\nThis module provides control-flow support for transports which may be\nintegrated into the OS file descriptor system.  Its separation into a\nloadable module allows CM to be used as a communications manager even in\nsituations where {\\it FD select()} is not a viable control-flow mechanism,\nsuch as within the OS kernel.\n\nIn addition to allowing applications to transparently use different data\ntransport mechanisms, CM is also designed to allow more aware applications\nto customize the behavior of those data transports, for example to specify\nbandwidth requirements, expected reliability or other transport-specific\ncharacteristics.  Because CM does not have {\\it a priori} knowledge of the\nspecific transports that might be used by an application, it must have a\nmechanism though which it can pass virtually any type of parametric\nspecification between applications and the selected data transport.  This\nrole is filled by {\\it attribute lists}.  An attribute is a {\\it name/value}\npair that specifies something about a connection or message.  Lists of these\nattributes are used to specify to CM the characteristics of the connections\nit should make.  For example, a standard TCP/IP connection might be\nspecified by the attribute list:  \n\\begin{verbatim}\n{IP_HOST,\"latte.cc.gatech.edu\"},{IP_PORT,40767}\n\\end{verbatim}\nAttribute lists are used by CM for a variety of other purposes as well, in\nboth the application-layer API and in communication with the data transport\nmodules.   \n\\enlargethispage{\\baselineskip}\n\\pagebreak\n\n\\begin{wrapfigure}[31]{r}{3.7in}\n{\n\\vspace*{-0.35in}\n\\begin{verbatim}\n#include <stdio.h>\n#include \"atl.h\"\n#include \"evpath.h\"\n\ntypedef struct _msg {\n    char *string_field;\n} msg, *msg_ptr;\n\nstatic FMField msg_field_list[] =\n{\n    {\"string_field\", \"string\", sizeof(char*), 0},\n    {NULL, NULL, 0, 0}\n};\n\n\nstatic void\nmsg_handler(CManager cm, CMConnection conn, void *msg,\n        void *client_data, attr_list attrs)\n{\n    printf(\"%s\\n\", ((msg_ptr)msg)->string_field);\n}\n\nint\nmain (int argc, char **argv)\n{\n    CManager cm;\n    CMFormat format;\n    attr_list contact_list;\n\n    cm = CManager_create();\n    CMlisten(cm);\n    contact_list = CMget_contact_list(cm);\n    printf(\"Contact list \\\"%s\\\"\\n\", \n           attr_list_to_string(contact_list));\n    format = CMregister_simple_format(cm, \"hello\", \n                                      msg_field_list, sizeof(msg));\n    CMregister_handler(format, msg_handler, NULL);\n    CMrun_network(cm);\n}\n\\end{verbatim}\n}\n\\end{wrapfigure}\n\\subsection{A ``Hello, World!'' Program\\label{hello}}\nAt this point it is useful to discuss Connection Manager in the context of a\nsimple program.  The program at the right is the receiving side of a basic\n``Hello, World!'' program.  CM provides a\nreactive programming style.  That is, most programs are structured around\nthe exchange of messages, utilizing CM's ability to call\napplication-specified handlers when messages of appropriate types arrive.\nThis particular program does nothing except wait for the arrival of a\n``hello'' message.  When one arrives, the subroutine \\verb+msg_handler()+ is\ncalled and it prints out the \\verb+string_field+ element of the message.\n\nThe \\verb+typedef+ at the beginning of the program declares the datatype of\nthe message.  The \\verb+FMField+ declaration creates a FFS-style\n\\verb+FMFieldList+ that is used to describe the message datatype to the\nConnection Manager.  The subroutine \\verb+msg_handler()+ has a prototype\nshared by all CM message handlers.  It has parameters representing the\ncalling Connection Manager, the connection on which the message was\nreceived, a pointer to the message data (as a \\verb+void*+ pointer, and\nthe \\verb+client_data+ parameter that was given by the application when the\nhandler was registered.\n\nThis program uses five basic CM functions:\n\\begin{description}\n\\item[{\\tt CManager\\_create()}] --  This call creates and initializes a {\\tt\nCManager} \ndata structure.  All CM applications must call this at least once.\nThe {\\tt CManager} data structure provides a means of associating related\ncommunication channels.   Essentially, the CManager is a {\\tt control\ncontext} in which network messages are handled.\n\\item[{\\tt CMlisten(CManager cm)}] -- This call requests CM to listen for\nincoming network connections.  What exactly this does depends upon what\nnetwork transport layer is in use.  In the default ``sockets'' transport,\nthis will cause CM to create an internet socket on the current host, bind it\nto randomly chosen IP port {\\tt port\\_num} and begin listening for\nconnections.  Once {\\tt CMlisten()} has been called, other programs can\ninitiate a connection with this program by calling {\\tt CMinitiate\\_conn()}\ndiscussed further below.   The contact information for a CM is encapsulated\nin an {\\it attribute list}.  {\\it The contents of the attribute list are\ntransport-specific.  Casual CM users should consider these attribute lists\nto be opaque.}  However, the goal of CM is that these attribute lists might\nprovide the mechanism through which application-specific transport\nrequirements, such as QOS specifications, can be communicated to the\ntransport layer.  Applications with detailed knowledge of the transport in\nuse can use:\n\\begin{verbatimtab}\n\textern int CMlisten_specific (CManager cm, attr_list listen_info);\n\\end{verbatimtab}\nto pass specific attributes to the transport-based listen call.  In\nparticular, the ``sockets'' transport looks for an ``IP\\_PORT'' attribute to\nspecify the port upon which it is to listen.\n\n\\newsavebox{\\mybox}\n\\sbox{\\mybox}{\\makebox[6.4in][l]{\\parbox{6.457in}{\\tt CMFormat CMregister\\_simple\\_format(CManager cm, char\n*format\\_name,\\\\ \\hspace*{2.63in}FMFieldList field\\_list, int struct\\_size);}}}\n\\item[{\\usebox{\\mybox}}]\\ \\\\\n{\\bf --} This routine provides the basic mechanism for making message\nformats known to CM.  Registration is a prerequisite for handler\nregistration or writing data of that format.  The {\\tt field\\_list}\nparameter is a FFS field list specifying the structure of the message.\nRecord format descriptors are described in the FFS documentation, but\nbasically consist of a list of field descriptions, where  each field\ndescription is a quadruple giving the field name, data type, size and offset\nwithin the record.  Given this information (along with the format name\nand the overall size of the structure)\\footnote{Because of structure\n  alignment considerations in the compiler, structure size cannot\n  always be accurately inferred from information such as the size and\n  offset of the last field.  Therefore is should be specified\n  explicitly with a 'sizeof()' argument as shown in the examples.}, FFS can pack the record for\ntransmission to other machines and can decode it despite differences in\nmachine architecture or record layout.  \n\nCMregister\\_simple\\_format() can only be used to register message\ntypes that do not have internal substructures.  For more complex data\ntypes, one should use \n\\newsavebox{\\minebox}\n\\sbox{\\minebox}{\\makebox[6.4in][l]{\\parbox{6.457in}{\\tt CMFormat\n      CMregister\\_format(CManager cm, FMStructDescList format\\_list);}}}\n\\item[{\\usebox{\\minebox}}].  The {\\tt format\\_list} parameter is a list of\nformat\\_name/field\\_list pairs as below:\n\\begin{verbatimtab}\n\ttypedef struct _FMformat_list {\n\t    char *format_name;\n\t    FMFieldList field_list;\n\t    int struct_size;\n\t    FMOptInfo *opt_info;\n\t} FMStructDescRec, *FMStructDescList;\n\\end{verbatimtab}\nand is used to specify the representation of the top-level structure\n(entry 0 in the list) and any nested structures in the\nmessage.  It should contain the transitive closure of all data types\nnecessary to specify the message representation.  The list is\nterminated with a \\verb+{NULL, NULL, 0, NULL}+ value. \n\n\\item[\\parbox{6.4in}{\\tt void CMregister\\_handler(CMFormat format, CMHandlerFunc handler,\\\\\n\\hspace*{1.9in}void *client\\_data)}] \\ \\\\\n-- {\\tt CMregister\\_handler()} binds the\nsubroutine specified in its {\\tt handler} parameter to the arrival of\nmessages of the type {\\tt format}.  The profile of the handler function\nshould be:\n\\begin{verbatimtab}\ntypedef void (*CMHandlerFunc) (CManager cm, CMConnection conn,\n                               void *message, void *client_data, attr_list attrs);\n\\end{verbatimtab}\nThe {\\tt client\\_data} parameter specified in the registration call is not\ninterpreted by CM, but merely passed to the handler function when it is\ncalled.   \nThe {\\tt attrs} parameter points to an attribute list that includes any\nattributes specified in the {\\tt CMwrite\\_attr()} call made by the sender, as\nwell as attributes that might have been added by the transport on the\nreceiving side.\n\n\\item[{\\tt void CMrun\\_network(CManager cm)}] -- {\\tt\nCMrun\\_network()} is one of the basic {\\it network event} handling calls in\nCM.  A CM network event is a basic communications occurrence, such as a\nconnection request or message arrival. The routine {\\tt CMrun\\_network()}\nessentially handles network events until the CManager is shutdown.  In this\ncase, there is no {\\tt CManager\\_close()} call, so {\\tt CMrun\\_network()}\nwill run forever. \n\\end{description}\n\nA correspondingly simple client program that connects to this server is given\nin Figure~\\ref{simple_client}.\n\\begin{figure}\n\\begin{center}\n\\begin{BVerbatim}\n#include <stdio.h>\n#include \"atl.h\"\n#include \"evpath.h\"\nmain(argc, argv)\nint argc;\nchar **argv;\n{\n    CManager cm = CManager_create();\n    CMConnection conn;\n    attr_list contact_list;\n\n    contact_list = attr_list_from_string(argv[1]);\n    conn = CMinitiate_conn(cm, contact_list);\n    CMConnection_close(conn);\n    CManager_close(cm);\n}\n\\end{BVerbatim}\n\\end{center}\n\\caption{A simple client program.\\label{simple_client}}\n\\end{figure}\nUnlike the sample server program, this client program doesn't really do\nanything useful.  Assuming that the first argument to this program is the\nstringified attribute list printed out by the server program of\nSection~\\ref{hello}, this client connects to the server, then\nimmediately shuts down the connection (with {\\tt CMConnection\\_close(conn)})\nand shuts down the CManager with with {\\tt CManager\\_close(cm)}.  The return\nvalue from {\\tt CMinitiate\\_conn()} is a value of type {\\tt CMConnection}\nand is a handle that can be used to write to the CM program on other end of\nthat particular network connection.   \n\nThese examples also introduce the two most important data types in\nCM, {\\tt CManager and CMConnection}.  A CManager value essentially\nrepresents a communications context for a program.  CM subroutines\nwhich operate on a communications context have a ``CM'' prefix in\ntheir name and take a {\\tt CManager} value as their first parameter.  This\npaper will refer to a CManager value as ``a CM.''  Programs {\\it can}\ncreate multiple CManagers and operations on those will be independent, but\nmost programs will need just a single CM to support all messaging\noperations.  In multi-threaded programs, only one thread should call\n{\\tt CMrun\\_network() } or the other network handling functions.\nCMConnection values are associated with a {\\tt CManager} and represent the\nendpoint of a bidirectional communications link.  \n\nA CM acting as a simple client with a single communications connection will\nhave only one {\\tt CMConnection}.  A CM operating as a server with many\nconnections will have many {\\tt CMConnection}'s, one for each client to\nwhich it is connected.  CM communications links have a CMConnection on each\nend.   CM's write subroutines for data operate on {\\tt CMConnection} values\nand send data across the communications link represented by their {\\tt\nCMConnection} parameter.  \n\n\\section{Sending Data\\label{send}}\n\nTo actually make the program in Figure~\\ref{simple_client} useful, it has to\nsend a message.  Before a message can be sent, the message format must be\nregistered with CM.  This is done in the same manner as in the first sample\nprogram of Section~\\ref{hello} with the {\\tt CMregister\\_simple\\_format()} call.\nThe CMFormat return value is then used in a call to {\\tt CMwrite()}.\n\\begin{Verbatim}\nextern int CMwrite (CMConnection conn, CMFormat format, void *data);\n\\end{Verbatim}\nThe body of the client program of Figure~\\ref{simple_client} then becomes:\\\\\n\\begin{center}\n\\begin{BVerbatim}\n{\n    CManager cm = CManager_create();\n    CMConnection conn;\n    attr_list contact_list;\n    CMFormat format;\n    msg\tmessage;\n\n    contact_list = attr_list_from_string(argv[1]);\n    conn = CMinitiate_conn(cm, contact_list);\n    format = CMregister_simple_format(cm, \"hello\", \n                                      msg_field_list, sizeof(msg));\n\n    message.string_field = \"Hello, World!\";\n    if(CMwrite(conn, format, (void*)&message) != 1) {\n        printf(\"write failed\\n\");\n    }\n    CMConnection_close(conn);\n    CManager_close(cm);\n}\n\\end{BVerbatim}\n\\end{center}\nThis program should be run with its first argument being the contact list\nstring printed out by the example in Section~\\ref{hello}.  \n\n\\subsection{Linking and Running}\nCM is built with some custom CMake macros that 1) build both a static\nlibrary and a DLL (shared object for dynamic linking), and 2) create a .la\nfor use with `libtool'.  libtool is closely associated with the\nautoconf/automake toolset and was designed to hide the complexity of building\nand using shared libraries behind a consistent, portable interface. At one\npoint CM used libtool extensively, but we have now switched to CMake as a\nconfiguration tool, so libtool support is largely deprecated.\n\nIf you want to build a CM application with libtool, how this is done is best\nexplained by the libtool documentation available from\nhttp://www.gnu.org/software/libtool/libtool.html.  If libtool is utilized,\nusing CM involves adding ``-levpath'' to the link  line, preceeded if necessary\nby an appropriate ``-Llibdirectory'' flag.  Libtool will locate any other\nlibraries required by libtool.  \n\nAt this point, it is more common to link CM applications without\nlibtool. Depending upon the platform, it {\\it may} be necessary to specify\nthe transitive closure of all libraries that CM depends upon. A\ntypical library spec might be ``-levpath -latl -lffs'', again preceeded by an\nappropriate ``-Llibdirectory'' flag.  (Some platforms, such as ancient\nSolaris, may also need ``-lnsl -lsocket''.)\nHowever there are some subtleties that\nmay cause difficulties. In particular, on many platforms, the linker will\npreferentially use the shared library if it is available. So, if both a .a\nand .so file are available in ``libdirectory'', the .so form will be used\nwith implications describe in the next subsection.\n\n\\subsubsection{Using the shared library version}\nOn many linux-flavored platforms, the -L flag is not the only flag that\ncontrols where shared libraries might be found. In particular, -L only\ncontrols the {\\it link time} search path for shared libraries. Other flags,\ntypically -R or -rpath, control the search path that will be used at {\\it run time}.\nlibtool would automatically do this for you, but you must do it manually\nif you don't use libtool. If you don't specify the appropriate run-time\nlink path, the dynamic linker won't be able to locate the appropriate shared\nlibraries and you'll get a run-time error. On most platforms, 'ldd' is\na tool that lists the dynamic dependencies of an executable, including\nwhat the library search paths are and which libraries would be loaded if\nthe program were run.\n\n\\subsubsection{Using the traditional library version}\nCreating statically linked versions of programs can be useful for debugging.\nYou can (generally) use the traditional library version (.a files) of CM if\nyou specify the .a file directly. Additionally, some versions of ld accept\nflags that cause only the static versions of libraries to be used.  \n\nThe principal caveat to using static\nlibraries is that CM uses program-controlled dynamic linking (dlopen-style)\nto load its network transport layer. On some platforms, statically linked\nprograms {\\it cannot} use {\\tt dlopen()}. If CM is unable to load its\ntransport layer, your program will exit with the error ``Failed to initialize\ndefault transport. Exiting.''. You {\\it may} be able to avoid this by\nlinking only some libraries statically and letting others, particularly\nlibc, be dynamic. libtool users can produce a completely statically linked\nexecutable because CM uses libtool's ltdl library. That library is capable\nof simulating dynamic linking in a statically linked environment (if all\nthe dlls are known at link time.) See the libtool docs for how this works.\n\n\\subsubsection{Running}\nDepending upon how they were linked, CM applications may require the\nenvironment variable\n{\\bf LD\\_LIBRARY\\_PATH} to be set at run-time. Using \n{\\bf LD\\_LIBRARY\\_PATH}\ncan fix-up executables which do not have the correct run-time link paths\nbuilt in with ld's -rpath flag.\n\n\\subsubsection{Example Scripts}\nThe tty sessions below demonstrate compiling, linking and running the\nprograms a CoC RedHat box.  The example of Section~\\ref{hello} is in\nthe file ``server.c'' and the program of Section~\\ref{send} is in\n``client.c''.  Note that the contact list specified to the client is\nprotected from interpretation in the shell by quoting it.\n\\begin{figure}[ht]\n\\begin{verbatim}\nscooby 1 > gcc -c -I/users/c/chaos/include server.c\nscooby 2 > gcc -L/users/c/chaos/rhe5-64/lib -Wl,-rpath -Wl,/users/c/chaos/rhe5-64/lib -o server server.o -levpath -latl -lffs\nscooby 3 > ./server\nContact list \"AAIAAJTJ8o2lZQAAATkCmA4Fz4I=\"\nHello, World!\n\\end{verbatim}\n\\caption{Compiling, linking and running the server.}\n\\end{figure}\n\\begin{figure}[ht]\n\\begin{verbatim}\nscooby 1 > gcc -c -I/users/c/chaos/include client.c\nscooby 2 > gcc -L/users/c/chaos/rhe5-64/lib -Wl,-rpath -Wl,/users/c/chaos/rhe5-64/lib -o client client.o -levpath -latl -lffs\nscooby 3 > ./client \"AAIAAJTJ8o2lZQAAATkCmA4Fz4I=\"\nscooby 4 >\n\\end{verbatim}\n\\caption{Compiling, linking and running the client.}\n\\end{figure}\n\\subsection{Notes about Connection Manager}\n\\begin{description}\n\\item[Handling of network contact information] -- In order to support many\n  potential network transports and to allow \ntheir customization (with such things as Quality-of-Service parameters), CM\nuses {\\em attribute lists}.  As noted in Section~\\ref{overall}, attribute is\na {\\it name/value} pair that specifies something about a connection or\nmessage.   Lists of these attributes are used to specify to CM the\ncharacteristics of the connections it should make.  In the case of TCP/IP\nsocket connections, the attribute list required contains the same\nhostname/IP port pair that pretty much any network program would have used.  Conceptually\nhowever, what is in the attribute list used to specify network contact\ninformation is of interest only to the CM transport layer making the\nconnection.  Non-specialized applications should treat the attribute lists\nas if they were opaque.  \n\nAttribute lists operations are supported by the ``atl.h'' include file and\nthe ``atl'' library.  The include file defines the {\\tt attr\\_list} data\ntype.  Most CM applications will need only two functions that operate on\nattribute lists.  {\\tt attr\\_list\\_to\\_string()} converts an attribute list\nto string form and {\\tt attr\\_list\\_from\\_string()} does the reverse, parsing\na string into an attribute list.  Attribute lists can be freed with {\\tt\nfree\\_attr\\_list()}.\n\\begin{verbatimtab}\n\textern char *attr_list_to_string(attr_list attrs);\n\textern attr_list attr_list_from_string(char * str);\n\textern void free_attr_list(attr_list list);\n\\end{verbatimtab}\n\nNote that the textual representation of attribute lists is a base64 encoding\nof a marshalled representation.  In some circumstance it might be useful to\nsee the details of the underlying attribute specification.  The program {\\tt\n  attr\\_dump}, included with the ``atl'' package takes a base64 attribute\nlist as a parameter and prints out a (more) human-readable representation.\nFor example:\n\\begin{verbatimtab} \nscooby 10 > ~/bin/attr_dump \"AAIAAJTJ8o2qZQAAATkCmG1+148=\"\nAttribute list 0x7f8f08c00850, ref_count = 1\n[\n   { IP_PORT ('0x8df2c994'), Attr_Int4, 26026 }\n   { IP_ADDR ('0x98023901'), Attr_Int4, -1881702803 }\n]\n\\end{verbatimtab}\n\n\\item[Format handling is not ``name'' oriented] --  In some data\n  communication systems, such as CM's ancient predecessor DataExchange,\n  message format registration and handling are heavily ``name'' oriented.\n  Formats are named and perhaps only one handler for a particular message\n  name could be registered. This was can be a simple arrangement, but it\n  also seriously limits program \nadaptability and evolution.  For example, if an server wanted to add a field\nto the request messages it accepted, it could not continue to service old\nclients by registering a handler for both the old and new message formats.\nCM has considerably more complex features that aid in program evolution, but\nin order to support them it is necessary to eliminate the idea that a\nformat's name is a unique way to reference it.\n \nEliminating the primacy of the format name frees CM to implement new\nfeatures, but it does complicate the use of the library to some extent.  For\nexample, format registration incurs overhead, so it shouldn't happen on\nevery CMwrite.  Instead, applications should save the \n{\\tt CMFormat} value that is returned by format registration for use in {\\tt\nCMwrite()}.  Because data storage may be difficult in some situations, such\nas for libraries built on top of CM, there is a {\\tt CMlookup\\_format()}\ncall that takes a {\\tt format\\_list} (not the format name) as a parameter\nand returns the CMFormat value that was created when the format\\_list was\nregistered.  This features relies on the fact that format\\_lists are\ntypically statically allocated and their memory is not reused in the course\nof a CM application.  {\\it If you rely on this feature, you should ensure\n  that all format lists used to register formats are unique.  I.E. not\n  dyamically allocated, free'd and potentially reused.}\n\n\\item[Subformats in format registration] -- The example code above uses\n  CMregister\\_simple\\_format() to make data formats known to CM, but that\n  routine doesn't support nested structures.  To exchange more complex\n  structures, CMregister\\_format() should be used and it's format\\_list\n  parameter should contain the transitive closure of all structures required\n  to define the message.  The order of the items in the list does not\n  matter, EXCEPT that the zero'th item should be the top-level structure.\nFor example, the doubly-nested\nstructure {\\tt simple\\_rec} below can be registered using {\\tt\nCMregister\\_format} and {\\tt simple\\_format\\_list}.\n\\begin{verbatimtab}\n\ttypedef struct _complex_rec {\n\t    double r;\n\t    double i;\n\t} complex, *complex_ptr;\n\t\n\ttypedef struct _nested_rec {\n\t    complex item;\n\t} nested, *nested_ptr;\n\t\n\ttypedef struct _simple_rec {\n\t    int integer_field;\n\t    nested nested_field;\n\t} simple_rec, *simple_rec_ptr;\n\t\n\tstatic FMField complex_field_list[] =\n\t{\n\t    {\"r\", \"double\", sizeof(double), IOOffset(complex_ptr, r)},\n\t    {\"i\", \"double\", sizeof(double), IOOffset(complex_ptr, i)},\n\t    {NULL, NULL, 0, 0}\n\t};\n\t\n\tstatic FMField nested_field_list[] = \n\t{\n\t    {\"item\", \"complex\", sizeof(complex), IOOffset(nested_ptr, item)},\n\t    {NULL, NULL, 0, 0}\n\t};\n\t\n\tstatic FMField simple_field_list[] =\n\t{\n\t    {\"integer_field\", \"integer\",\n\t     sizeof(int), IOOffset(simple_rec_ptr, integer_field)},\n\t    {\"nested_field\", \"nested\",\n\t     sizeof(nested), IOOffset(simple_rec_ptr, nested_field)},\n\t    {NULL, NULL, 0, 0}\n\t};\n\t\n\tstatic CMFormatRec simple_format_list[] = {\n            {\"simple\", simple_field_list},\n\t    {\"nested\", nested_field_list},\n\t    {\"complex\", complex_field_list}, \n\t    {NULL, NULL}\n\t};\n\\end{verbatimtab}\n\n\\item[Adaptability features of format handling] -- Because CM is expected to\n  be used in a potentially dynamic distributed environment, it does not\n  assume that the incoming data will necessarily exactly match what handlers\n  are registered.  In fact, an application may have registered\nmany handlers for a particular format name, each having different field and\nsubformat lists.  Thus, when an incoming message arrives CM tries to find\nthe most appropriate handler for it.  Matching is first done by the format\nname, and then by field lists.  Any handler which requires fields not\npresent in the incoming message is rejected as inappropriate.  Among the\nremaining handlers, the one which matches the most fields in the incoming\nrecord is selected to handle the message.  In the event of a tie, the format\nwith fewest fields is selected.\n\nAssuming that the format names match and ignoring data types for the moment,\nconsider the following local formats with registered handlers:\nHandler 1 : Format has fields ``a'', ``b''\nHandler 2 : Format has fields ``a'', ``b'', ``c''\nHandler 3 : Format has fields ``a'', ``b'', ``c'', ``d''\n\n\\begin{itemize}\n\\item An incoming message with fields ``a'', ``b'', ``c'' is passed to\nhandler 2, matching all fields exactly.\n\\item An incoming message with fields ``a'', ``b'', ``c'', ``d'' is passed\nto handler 3.\n\\item An incoming message with fields ``a'', ``b'', ``d'' is passed to\nhandler 1, effectively discarding field ``d''.\n\\item An incoming message with fields ``a'', ``b'', ``c'', ``e'' is passed to\nhandler 2, effectively discarding field ``e''.\n\\item An incoming message with fields ``a'', ``c'' is discarded because no\nhandler matches.\n\\end{itemize}\n\nIn actual practice, most of these matching rules are unlikely to come into\nplay.  They just provide a format structure for CM to pick an appropriate\nhandler while supporting the evolution of message formats in a system of\ncommunicating programs.  For example, the rules mean that if a new field is\nadded to an existing format, old clients can receive the new messages and\nwith transparently convert them into the old format.  At the same time, new\nservers can register handlers for both the old and new formats and have them\ncalled at the appropriate times.\n\n\\item[no ``read'' call\\label{no_read}]  -- Unlike some network packages, CM has no\nexplicit network ``read'' call.  Instead there is only the implicit read\nachieved through registering handlers.  CM eliminates explicit read because\nit is a appropriate only in the rarest of circumstances, and even then it is\neasily emulated while maintaining more generality than an actual explicit\nread.  In particular, explicit read is only appropriate for a pure client with no\nability to accept connections from others, only one current network\nconnection, and absolute knowledge of the message type it is to receive\nnext.  Generally this only happens in client-side request-reply traffic.  In\nthis circumstance, it's easy to emulate a read using CM's condition\nvariables (explained in more detail in Section~\\ref{sec:conditions}).\nInstead of issuing an explicit read, as in the following code segment:\n\\begin{verbatim}\nrequest_msg_t request;\nreply_msg_t reply;\nCMwrite(conn, request_format, &request);\nCMread(conn, reply_format, &reply);\n\\end{verbatim}\nthe program should register a handler for the reply message and use a CM\ncondition variable to wait for the message.  Using {\\tt CMCondition\\_wait()}\nhas the advantage that messages of other types are properly handled while\nwaiting for the reply.  The following code substitutes for the write/read\npair above, with an additional integer ``condition'' field in the request\nand reply formats: \n\\begin{verbatim}\nrequest_msg_t request;\nreply_msg_t reply;\nint condition;\ncondition = CMCondition_get(cm, conn);\nCMCondition_set_client_data(cm, condition, &reply);\nrequest.condition = condition;\nCMwrite(conn, request_format, &request);\nCMCondition_wait(cm, condition);\n\\end{verbatim}\nIn addition, a handler must be registered for the ``reply'' message format.\nThis handler should be of this form:\n\\begin{verbatim}\nextern void\nReply_handler(cm, conn, data, client_data)\nCManager cm;\nCMConnection conn;\nvoid *data;\nvoid *client_data;\n{\n    int condition = reply.condition;\n    reply_msg_t *incoming_reply_msg = (reply_msg_t *) data;\n    reply_msg_t *saved_reply_ptr;\n\n    saved_reply_ptr = CMCondition_get_client_data(cm, condition);\n    *saved_reply_ptr = *incoming_reply_msg;\n    CMCondition_signal(cm, condition);\n}\n\\end{verbatim}\nThe request handler in the server should fill in the reply.condition field\nwith the value from request.condition.\n\\end{description}\n\\section{Control Flow}\n\n\\label{sec:controlflow}\nUnlike simple send-receive communications libraries, CM provides facilities\nthat impact the flow of control in programs that use the library.  While\nusing CM does not imply a specific control model in the application and\nvarious control styles are possible, CM does need to know some basics, such\nas what thread library in use.  Given that, it can infer other information,\nsuch as which thread is responsible for handling network traffic.\n\n\\subsection{Thread Safety}\n\nCM/EVPath is a threaded and thread-safe environment.  Generally CM protects\nitself and its own data structures with locking as appropriate.  Currently\nCM builds with Pthread-based locking on all supported platforms.\nDepending upon the nature of CM/EVpath use, applications may need to protect\ntheir own data structures from concurrent access in handlers, etc.  \n\n\\subsection{Common Control Structures for CM Programs}\n\nThe principal issue in considering control structures for CM programs is\n``what thread will service the network?''.  If noone is servicing the\nnetwork (receiving messages, accepting connections, etc.) distributed\ndeadlock is possible when other programs try to communicate.  Additionally,\nif multiple threads try to service the network, serious confusion may result\ninside CM.  So for multi-threaded programs, exactly one thread should be\nresponsible for servicing the network.  This thread will also execute\nmessage handlers, so any long-running handler should be forked into a\nseparate thread so that the original can go back to servicing the network.\n\n``Servicing the network'' is done by any of several mechanisms, including\ntwo explicit mechanisms that are normally used in non-threaded programs: \n\\begin{description}\n\\item[{\\tt void CMrun\\_network(CManager cm);}]  -- A blocking call that\ncauses the current thread to handle network requests until the {\\tt\nCManager} is shut down with {\\tt CManager\\_close()}.  \n\\item[{\\tt void CMpoll\\_network(CManager cm);}] -- A non-blocking call that\nhandles any network requests that are pending at the time of the call and\nthen returns control.  Principally used in single-threaded programs that\nonly occasionally service the network.  Such programs must take care to call\nit regularly or risk delaying communicating programs.\n\\end{description}\n\nIn addition, several calls in CM {\\it implicitly} service the network.\nThose calls are:\n\\begin{description}\n\\item[{\\tt void CMsleep(CManager cm, int secs);}]  Waits for {\\tt secs}\nseconds and then returns.\n\\item[{\\tt void CMusleep(CManager cm, int usecs);}]  Waits for {\\tt usecs}\nmicroseconds and then returns.\n\\item[{\\tt void CMCondition\\_wait(CManager cm, int cond);}]  Waits for the\nCMCondition {\\tt cond} to be signalled.  Described in more detail in\nSection~\\ref{sec:conditions} below.\n\\end{description}\nThese calls can be used in threaded or non-threaded programs.  In\nnon-threaded programs, they always service the network while waiting.  In\nthreaded programs, their behavior depends upon what thread calls them.  If\nthey are called from a thread which does not normally service the network,\nthey block using thread-based mechanisms until it is time for them to\nreturn.  If they are called from the thread which normally services the\nnetwork (such as when called from a handler), they service the network while\nwaiting.  \n\nFigures~\\ref{first_example} through~\\ref{last_example} give some example\ncontrol styles for threaded and non-threaded CM programs.\nFigure~\\ref{fork_example} shows the use of {\\tt CMfork\\_comm\\_thread()}, a\nuseful utility function that forks a network handler thread if there is a\nkernel-level thread package in use.  Otherwise it returns 0.  This is just a\nconvenience for programs that use threads packages, but it is yet more\nuseful for libraries built on CM that might not have knowledge of the actual\napplication's use of threads.\n\\begin{figure}[p]\n\\center\\begin{BVerbatim}\nmain() {\n    CManager cm = CManager_create();\n    /* \n     * register formats and handlers\n     */\n    CMrun_network(cm);  /* service network until shutdown */\n}\n\\end{BVerbatim}\n\\caption{A reactive server that runs forever (or until a handler calls {\\tt\nCManager\\_close()} ).\\label{first_example}}\n\\end{figure}\n\\begin{figure}\n\\center\\begin{BVerbatim}\nmain() {\n    CManager cm = CManager_create();\n    /*\n     * register formats and handlers\n     */\n    CMsleep(cm, 600);  /* service network for 600 seconds */\n    CManager_close(cm);\n}\n\\end{BVerbatim}\n\\caption{A reactive server that runs for a specified time.}\n\\end{figure}\n\\begin{figure}\n\\center\\begin{BVerbatim}\nmain() {\n    CManager cm = CManager_create();\n    /*\n     * register formats and handlers\n     */\n    while (!done) {\n\t/* do some work here */\n\tCMpoll_network(cm);\n    }\n    CManager_close(cm);\n}\n\\end{BVerbatim}\n\\caption{A reactive server that does work in between handling the network.}\n\\end{figure}\n\\begin{figure}\n\\center\\begin{BVerbatim}\nmain() {\n    CManager cm = CManager_create();\n\n    /*\n     * register formats and handlers\n     */\n\n                /* fork worker threads */\n    (void) pthread_create(&worker_thread, NULL, worker_task, (void *)data); \n    (void) pthread_create(&worker_thread2, NULL, worker_task2, (void *)data2); \n    CMrun_network(cm);  /* service network until shutdown */\n    CManager_close(cm);\n}\n\\end{BVerbatim}\n\\caption{A threaded program where the main program handles the network.}\n\\end{figure}\n\\begin{figure}\n\\center\\begin{BVerbatim}\nmain() {\n    CManager cm = CManager_create();\n\n    /*\n     * register formats and handlers\n     */\n    CMfork_comm_thread(cm);   /* fork network handler thread */\n                /* fork worker threads */\n    (void) pthread_create(&worker_thread, NULL, worker_task, (void *)data); \n    (void) pthread_create(&worker_thread2, NULL, worker_task2, (void *)data2); \n    pthread_join(work_thread, &status);\n    pthread_join(work_thread2, &status);  /* wait for threads to exit */\n    CManager_close(cm);\n}\n\\end{BVerbatim}\n\\caption{A threaded program that forks a network handler thread while the\nmain program does other things.\\label{fork_example}\\label{last_example}} \n\\end{figure}\n\n\\subsection{Waiting for Conditions\\label{sec:conditions}}\n\nAs is mentioned in Section~\\ref{no_read}, CM provides a general mechanism\nfor safely waiting for some condition, such as a response to an outgoing\nrequest, while continuing to handle incoming message.  This is often\nnecessary for libraries and programs which need to perform distributed\noperation in a ``synchronous'' manner.  (That is, they don't return until\nthe operation is compete).\n\nThe CM facilities for waiting for some event to occur are similar\nto those associated with condition variables in threads libraries with the\nsimplification that there are generally no mutex variables associated with\nthese conditions and they can only be used once.  The complete API for\nCM condition variables is give below:\n\n\\begin{BVerbatim}\nint CMCondition_get(CManager cm, CMConnection conn);\nint CMCondition_wait(CManager cm, int condition);\nvoid CMCondition_signal(CManager cm, int condition);\nvoid CMCondition_set_client_data(CManager cm, int condition, void* client_data);\nvoid *CMCondition_get_client_data(CManager cm, int condition);\n\\end{BVerbatim}\n\nThe typical use of these routines in a synchronous operation would be begin\nwith the use of {\\tt CMcondition\\_get()} to ``allocate'' a\ncondition variable.  The ID of this condition variable (an integer for easy\ntransmission) would then be sent along with the ``request'' message (the\nfirst part of the synchronous exchange).  Then {\\tt CMCondition\\_wait()} is\ncalled to wait for the condition to be signaled.  While waiting,\nCM will perform whatever action is necessary in order to continue\nhandling requests from the network.  In order to complete the synchronous\noperation, a handler should have been registered for the ``result'' message\nand that message should contain the ID of the condition upon which the\ninitiator is waiting.  The handler's role is to store the results somewhere\nand use {\\tt CMCondition\\_signal()} to signal the occurrence of the\ncondition.  The routines {\\tt CMCondition\\_set\\_client\\_data()} and {\\tt\nCMCondition\\_get\\_client\\_data()} are provided to allow an arbitrary client\naddress to be associated with the condition variable.  This simplifies\ncommunication between the initiating and the handling routines because the\ninitiator can setup a results area and associate its address with the\ncondition, where it can be retrieved by the handler routine.  The code in\nSection~\\ref{no_read} showing how a read() operation can be replaced with a\nCMCondition\\_wait() provides a concrete example of how CMConditions might be\nused. \n\nThere are two exceptional conditions worthy of discussion.  The first\nconcerns the situation where the far end of the synchronous operation dies\nbetween the time the request is sent and the time the response is received.\nCM cannot handle this situation totally transparently because more\nthan one host may actually be involved in completing a remote operation.\nHowever, if the {\\tt CMConnection} parameter in the {\\tt CMCondition\\_get()}\nis set to a non-NULL value, the {\\tt CMCondition\\_wait()} will terminate if\nthe indicated connection is closed.  In this situation, {\\tt\nCMCondition\\_wait()} will return 0 rather than its normal 1 return.\n\nThe second exceptional condition concerns the side effects that might be\nencountered if somehow a condition is never signaled or completed via\nconnection \nclosure.  Essentially, the results and side-effects in this circumstance\ndepend a great deal upon the application control structure and any\nunderlying thread library.  The possibilities range from a thread that is\nblocked forever to a stack leak.\\footnote{A stack leak is a permanent loss\nof stack space, such as might occur if a subroutine always pushed more items\non the stack than it removed.  In this case, it might be caused by an event\nhandler subroutine calling itself recursively but never returning.}\nHowever, none of the possible results are likely to be desirable and robust\napplications should restrict their use of CM conditions to\ncircumstances where waiting periods are relatively short and response is\nassured.  In other circumstances, behavior is unpredictable.\n\n\\section{Miscellaneous Features}\nThe previous sections have covered the most basic of CM\nfunctionality.  This section wraps up some loose ends and covers smaller\ntopics that do not fit well elsewhere.\n%\\subsection{Blocking I/O}\n%While CM provides some semblance of an event-driven API to programs\n%which interact over the network, it cannot mask all possible adverse\n%consequences of that interaction.  This is particularly true in the area of\n%blocking I/O operations.  CM is currently built on top of TCP/IP\n%socket connections and it shares the limitations of such systems.  In\n%particular, if enough data is written to a socket without being read by the\n%receiver, additional write operations will either fail or block, perhaps after\n%transmitting a partial record.  Because the lower level FFS library cannot\n%tolerate partial records, CM requires all write operations to be\n%blocking.  This requirement has several important consequences.  For example,\n%it means that a CM which does not read its input connections will\n%eventually cause those who send it data to block.  Thus a single\n%malfunctioning client can disrupt an entire system of communicating\n%CMs.  It also means that a simple pair of communicating\n%CMs may expose themselves to deadlock by, for example, each Exchange\n%writing to the other and then each reading what the other has written.  This\n%type of exchange will probably \n%work as long as the exchanged messages are smaller than the buffering capacity\n%of the operating systems on which the programs run.  But a change in message\n%or buffer size may cause the programs to deadlock.\n\n%Approaches to resolving such problems tend to be application-specific and\n%CM does not attempt to address them in general.\\footnote{Though the\n%UDP version of CM eases the situation somewhat.}\n%However, CM does provide a mechanism through which users can be\n%warned that their applications are stalled.  In particular, the subroutine\n%{\\tt CMinit\\_block\\_check()} turns on a self-check mechanism that detects\n%when a CM has been blocked on the same operation for more than 1\n%second.  If this condition is detected, a warning is printed.\n\n\\subsection{Data Management}\n\nGenerally speaking, incoming message data in CM is guaranteed to remain\nvalid only for the duration of the execution of the handler function.\nThereafter, the memory where the data is stored is subject to being\noverwritten or free()'d.  Application which need to store all or part of the\nincoming message beyond the lifetime of the handler should copy the\ndata into application-managed memory.   Alternatively, the application can\nuse the routine {\\tt CMtake\\_buffer()} to inform CM that it is taking\ncontrol of the buffer containing the incoming message data.\n\\begin{verbatimtab}\n\textern void CMtake_buffer(CManager cm, void *data);\n\textern void CMreturn_buffer(CManager cm, void *data);\n\\end{verbatimtab}\nThe {\\tt data} parameter is the address of the incoming data (as provided to\nthe handler).  After {\\tt CMtake\\_buffer()} has been called during\nprocessing of a record, the CM library allocates itself a new buffer for\nholding input data and stops referencing the old buffer.  The application is\nthen responsible for eventually passing the buffer to {\\tt\nCMreturn\\_buffer()} when it is no longer of use.\n\n\\subsection{Useful Variants of Standard Routines}\nIn addition to the basic routines described in prior sections, there are a\ncouple of variations that are useful in some circumstances.\n\n\\begin{description}\n\\item[{\\tt CMConnection CMget\\_conn(CManager cm, attr\\_list\ncontact\\_list)}] \\ \\\\ CMget\\_conn() behaves like CMinitiate\\_conn() except that it\nfirst checks to see if an existing connection matches the contact list.  If\nso, it increments the reference count of that connection and returns it.\nOtherwise it initiates a new connection.\n\\item[{\\tt int CMwrite\\_attr(CMConnection conn, CMFormat format, void\n*data, attr\\_list attrs)}] \\ \\\\\nCMwrite\\_attr() allows an attribute list to be\nspecified along with the write request.  While no current transports\ninterpret per-write attributes, this call could be used to specify QoS\nparameters, priorities, deadlines, etc.  CMwrite() is equivalent to\nCMwrite\\_attr() with NULL passed for the {\\tt attrs} parameter.\n\\end{description}\n\n\\subsection{More Rarely Used Routines}\nThere are also some rarely used routines that fill special needs.  In\nparticular: \n\\begin{description}\n\\item[{\\tt int CMcontact\\_self\\_check(CManager cm, attr\\_list attrs)}] \\ \\\\\nGenerally, it is bad form for an application to try to initiate a connection\nto itself.\\footnote{Ever use a phone to call its own number?  Sometimes if\nyou dial and hang up quickly enough you can call your own phone.  Not always\nthough, it depends upon what phone company hardware is involved.  Initiating\na network connection to yourself is like that.  Sometimes it works,\nothertimes it deadlocks, depending upon the OS and transport involved.}\nHowever, contact lists are semi-opaque abstractions with properties that\nvary with various transports, so checking to see if a contact list denotes\nyourself is not necessarily straightforward.   This is where {\\tt\nCMcontact\\_self\\_check()} comes in.  It interacts with the CM transports to\nanswer the question ``Does this contact list point to me''.  It returns 1 if\nyes, 0 if no.\n\\item[\\parbox{6.4in}{\\tt void CMregister\\_close\\_handler(CMConnection conn,\nCMCloseHandlerFunc func, \\\\ \\hspace*{2.35in}void *client\\_data))}]\\ \\\\\nThis call provides a mechanism through which an\nappliation can be notified when one of its connections closes, either\nthrough the application calling {\\tt CMConnection\\_Close()} or through a\nfailure or shutdown of the network-layer connection.\n\\item[{\\tt CMregister\\_non\\_CM\\_message\\_handler((int header, CMNonCMHandler\nhandler)}]\\ \\\\\nIt is not unusual for messaging schemes to use a ``magic number'' as the\nfirst element of their message in order that they are recognized on\narrival.  In CORBA's IIOP, for example, all messages begin with the string\n``GIOP''.  In CM, messages begin with the 4-byte integer $0x434d440$\n(the string ``CMD$\\backslash$0'' expressed as an integer).  This arrives as\n$0x00444d43$ when the native byte orders of the parties differs.  {\\tt\nCMregister\\_non\\_CM\\_message\\_handler()} provides a mechanism through which\nCM can be extended to directly accept and process IIOP and other messages.\nThe handler routine is passed the {\\tt CMConnection} upon which the message\nhas arrived and the 4-byte integer with which the header has been\nrecognized.  The remainder of the message must be read directly from the\nconnection.   The prototype of the handler is:\n\\begin{verbatimtab}\n\ttypedef void (*CMNonCMHandler) (CMConnection conn,  int header);\n\\end{verbatimtab}\n\\end{description}\n\\subsection{Asynchronous Task Support}\nCM contains the following support for asynchronous tasks:\n\\begin{description}\n\\item[\\parbox{6.4in}{\\tt CMTaskHandle CMadd\\_periodic\\_task (CManager cm, int period\\_sec, int period\\_usec, \n\\\\ \\hspace*{2.58in} CMPollFunc func, void *client\\_data);}] \\ \\\\ \nThis call\nschedules a function to be called repeatedly, at a regular period.  The\nperiod is specified in seconds and microseconds.  The function (whose\nprofile is specified below) is passed only the {\\tt CManager} value and the\n{\\tt client\\_data} value.  The periodic task can be cancelled with the {\\tt\nCMremove\\_task()} call below.\n\n\\item[\\parbox{6.4in}{\\tt CMTaskHandle CMadd\\_delayed\\_task (CManager cm, int secs, int usec, \n\\\\ \\hspace*{2.58in}CMPollFunc func, void *client\\_data);}]\\ \\\\\nThis call schedules a function to be called one time only, after a\nparticular period of time has elapsed.  The period is specified in seconds\nand microseconds. Otherwise the behavior is like {\\tt\nCMadd\\_periodic\\_task()}. \n\\item[{\\tt void CMadd\\_poll (CManager cm, CMPollFunc func, void\n*client\\_data);}] \\ \\\\\nThis call adds a function that will be called ``occasionally.''  In\nparticular, it will be called after every message arrival and every timer\nexpiration.  The function cannot be cancelled.\n\\end{description}\nAll calls specifying a period are best-effort and are only as accurate as\nthe underlying infrastructure.  Generally timing functions somehow map into\na {\\tt select()} call with a particular timeout.\n\\begin{verbatimtab}\ntypedef void (*CMPollFunc)(CManager cm, void *client_data);\nvoid CMremove_task (CMTaskHandle handle);\n\\end{verbatimtab}\n\\subsection{Shutdown}\n\\begin{description}\n\\item[{\\tt void CMConnection\\_close(CMConnection conn)}] \\ \\\\ This call is used to\nshut down a connnection.  This call normally disables writing and incoming\nmessages on the connection as well as closing the underlying network link.\nHowever, because {\\tt CMget\\_conn()} can return an existing connection (as\nopposed to initiating a new connection), CM maintains a reference count on\nconnections.   {\\tt CMConnection\\_close()} decrements this reference count\nand only has its final effect only when the reference count for the\nconnection reaches zero.  In general, the number of {\\tt\nCMConnection\\_close()} calls should match the number of {\\tt\nCMinitiate\\_conn()} and {\\tt CMget\\_conn()} calls.  However, if connection\nwas accepted implicitly through a {\\tt CMlisten()} call, it can still be\nshutdown with {\\tt CMConnection\\_close()}.  {\\tt CMConnection\\_close()} will\nbe called implicitly if there is a permanent write error on the connection\nor if CM detects that the network-layer link is terminated.  The application\nis also free to call {\\tt CMConnection\\_close()} within a handler using the\n{\\tt CMConnection} value passed in to the handler function.\n\n\\item[{\\tt void CMConnection\\_add\\_reference(CMConnection conn)}]\\ \\\\\nThis call increments the reference count of a connection.  This is useful if\nthe application passes CMConnection values to other contexts.  Then each\ncontext can call {\\tt CMConnection\\_close()} and only the final close\nwill have effect.\n\\item[{\\tt void CManager\\_close(CManager cm)}] \\ \\\\\nThis call shuts down an entire CM.  It closes all connections, and\nterminates any network handler thread forked with {\\tt\nCMfork\\_comm\\_thread()}.  It also causes any {\\tt CMrun\\_network()} call to\nreturn to the caller.\n\\end{description}\n\\subsection{Debugging}\n\nCM contains relatively a extensive tracing facility that dumps debuging\noutput to standard output.  This tracing facility is turned on by setting\nshell environment variables prior to running the program.  The following\nenvironment variables are understood:\n\\begin{description}\n\\item[CMDataVerbose] -- Causes CM to print out the contents of every message\nthat is sent or received.\n\\item[CMConnectionVerbose] -- Prints information about connection initiation\nand acceptance.\n\\item[CMControlVerbose] -- Prints information about control flow, condition\nwaits, periodic task scheduling, etc.\n\\item[CMTransportVerbose] -- Turns on tracing of transport-level happenings.\n\\item[CMLowLevelVerbose] -- Traces low-level read/write and locking\nbehavior.  (Probably only useful for CM developers.)\n\\item[CMVerbose] -- Turns on {\\em all} CM*Verbose traces except\nCMLowLevelVerbose.\n\\item[CMDumpSize] -- Controls the maximum number of length of the message\ncontents output that CMDataVerbose displays.  Default value is 256.\n\\end{description}\n\n\\section{Writing a CM Transport DLL}\nWAY outside the scope of this paper.  Contact the author.\n\\bibstyle{alpha}\n\\bibliography{cm}\n\\end{document}\n",
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/thirdparty/GTest/googletest/googletest/cmake/libgtest.la.in": "# libgtest.la - a libtool library file\n# Generated by libtool (GNU libtool) 2.4.6\n\n# Please DO NOT delete this file!\n# It is necessary for linking the library.\n\n# Names of this library.\nlibrary_names='libgtest.so'\n\n# Is this an already installed library?\ninstalled=yes\n\n# Should we warn about portability when linking against -modules?\nshouldnotlink=no\n\n# Files to dlopen/dlpreopen\ndlopen=''\ndlpreopen=''\n\n# Directory that this library needs to be installed in:\nlibdir='@CMAKE_INSTALL_FULL_LIBDIR@'\n",
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/thirdparty/ffs/ffs/cod/standard.c": "#include \"config.h\"\n#ifndef LINUX_KERNEL_MODULE\n#include \"stdio.h\"\n#endif\n#ifdef LINUX_KERNEL_MODULE\n#ifndef MODULE\n#define MODULE\n#endif\n#ifndef __KERNEL__\n#define __KERNEL__\n#endif\n#include <linux/kernel.h>\n#include <linux/module.h>\n#endif\n#ifndef LINUX_KERNEL_MODULE\n#ifdef HAVE_STDLIB_H\n#include <stdlib.h>\n#endif\n#endif\n#include \"cod.h\"\n#include \"cod_internal.h\"\n#include \"structs.h\"\n#undef NDEBUG\n#include \"assert.h\"\n#ifndef LINUX_KERNEL_MODULE\n#include <ctype.h>\n#ifdef HAVE_MALLOC_H\n#include <malloc.h>\n#endif\n#include <string.h>\n#else\n#include <linux/ctype.h>\n#include <linux/string.h>\n#include <linux/mm.h>\n#endif\n#include <sys/time.h>\n#ifndef LINUX_KERNEL_MODULE\n#ifdef HAVE_ATL_H\n#include \"atl.h\"\n#endif\n#endif\n#include \"ffs.h\"\n\n#ifndef LINUX_KERNEL_MODULE\n#ifdef HAVE_ATL_H\nstatic int\nattr_set(attr_list l, char *name)\n{\n    atom_t atom = attr_atom_from_string(name);\n    attr_value_type junk;\n    attr_value junk2;\n    if (atom == 0 ) return 0;\n    \n    return query_attr(l, atom, &junk, &junk2);\n}\n\nstatic attr_list\nattr_create_list()\n{\n    return create_attr_list();\n}\n\nstatic void\nattr_free_list(attr_list l)\n{\n    free_attr_list(l);\n}\n\nstatic void\nstd_set_int_attr(attr_list l, char *name, int value)\n{\n    atom_t atom = attr_atom_from_string(name);\n    if (atom == 0 ) return;\n\n    set_int_attr(l, atom, value);\n}\n\nstatic void\nstd_set_long_attr(attr_list l, char *name, long value)\n{\n    atom_t atom = attr_atom_from_string(name);\n    if (atom == 0 ) return;\n\n    set_long_attr(l, atom, value);\n}\n\nstatic void\nstd_set_double_attr(attr_list l, char *name, double value)\n{\n    atom_t atom = attr_atom_from_string(name);\n    if (atom == 0 ) return;\n\n    set_double_attr(l, atom, value);\n}\n\nstatic void\nstd_set_float_attr(attr_list l, char *name, float value)\n{\n    atom_t atom = attr_atom_from_string(name);\n    if (atom == 0 ) return;\n\n    set_float_attr(l, atom, value);\n}\n\nstatic void\nstd_set_string_attr(attr_list l, char *name, char *value)\n{\n    atom_t atom = attr_atom_from_string(name);\n    if (atom == 0 ) return;\n\n    set_string_attr(l, atom, value);\n}\n\nstatic int\nattr_ivalue(attr_list l, char *name)\n{\n    atom_t atom = attr_atom_from_string(name);\n    int i = 0;\n    if (atom == 0 ) return 0;\n    \n    get_int_attr(l, atom, &i);\n    return i;\n}\n\nstatic long\nattr_lvalue(attr_list l, char *name)\n{\n    atom_t atom = attr_atom_from_string(name);\n    long lo = 0;\n    if (atom == 0 ) return 0;\n    \n    get_long_attr(l, atom, &lo);\n    return lo;\n}\n\nstatic double\nattr_dvalue(attr_list l, char *name)\n{\n    atom_t atom = attr_atom_from_string(name);\n    double d;\n    if (atom == 0 ) return 0;\n    \n    get_double_attr(l, atom, &d);\n    return d;\n}\n\nstatic float\nattr_fvalue(attr_list l, char *name)\n{\n    atom_t atom = attr_atom_from_string(name);\n    float f;\n    if (atom == 0 ) return 0;\n    \n    get_float_attr(l, atom, &f);\n    return f;\n}\n\nstatic char *\nattr_svalue(attr_list l, char *name)\n{\n    atom_t atom = attr_atom_from_string(name);\n    char *s;\n    if (atom == 0 ) return 0;\n    \n    get_string_attr(l, atom, &s);\n    return strdup(s);\n}\n#endif\n\nstatic FFSFile \nopen_ffs_file(char * fname, char * mode)\n{\n    FFSFile temp;\n    temp = open_FFSfile(fname, mode);\n    if(!temp) {\n\tfprintf(stderr, \"Could not open FFSfile from CoD\\n\");\n    }\n    return temp;\n}\n\nstatic void close_ffs_file(FFSFile fname)\n{\n    close_FFSfile(fname);\n}\n\nint\ngettimeofday_wrapper(struct timeval * tp)\n{\n    int ret = gettimeofday(tp, NULL);\n    return ret;\n}\n\n\n#include <sys/time.h>\ntypedef struct chr_time {\n    double d1;\n    double d2;\n    double d3;\n} chr_time;\n\n\nstatic void\nchr_get_time( chr_time *time)\n{\n    gettimeofday((struct timeval *) time, NULL);\n}\n\nstatic void\nchr_timer_start( chr_time *time)\n{\n    chr_get_time(time);\n}\n\nstatic void chr_timer_diff( chr_time *diff_time, chr_time *src1, chr_time *src2);\nstatic void\nchr_timer_stop( chr_time *time)\n{\n    struct timeval now;\n    struct timeval duration;\n\n    gettimeofday(&now, NULL);\n    chr_timer_diff((chr_time*)&duration, (chr_time*)&now, time);\n    *((struct timeval *) time) = duration;\n}\n\nstatic int\nchr_timer_eq_zero (chr_time *time)\n{\n    struct timeval *t = (struct timeval *) time; \n    return ((t->tv_sec == 0) && (t->tv_usec == 0));\n}\n\nstatic void\nchr_timer_diff( chr_time *diff, chr_time *src1, chr_time *src2)\n{\n    struct timeval d;\n    struct timeval *s1 = (struct timeval *)src1;\n    struct timeval *s2 = (struct timeval *)src2;\n    d.tv_sec = s1->tv_sec - s2->tv_sec;\n    d.tv_usec = s1->tv_usec - s2->tv_usec;\n    if (d.tv_usec < 0) {\n\td.tv_usec += 1000000;\n\td.tv_sec--;\n    }\n    *((struct timeval*)diff) = d;\n}\n\nstatic void\nchr_timer_sum( chr_time *sum, chr_time *src1, chr_time *src2)\n{\n    struct timeval s;\n    struct timeval *s1 = (struct timeval *)src1;\n    struct timeval *s2 = (struct timeval *)src2;\n    s.tv_sec = s1->tv_sec + s2->tv_sec;\n    s.tv_usec = s1->tv_usec + s2->tv_usec;\n    if (s.tv_usec > 1000000) {\n\ts.tv_usec -= 1000000;\n\ts.tv_sec++;\n    }\n    *((struct timeval*)sum) = s;\n}\n\n\nstatic double\nchr_time_to_secs(chr_time *time)\n{\n    return (double)((struct timeval*)time)->tv_sec + \n\t((double)((struct timeval*)time)->tv_usec)/1000000.0;\n}\n\nstatic double\nchr_time_to_millisecs(chr_time *time)\n{\n    return ((double)((struct timeval*)time)->tv_sec)*1000.0 + \n\t((double)((struct timeval*)time)->tv_usec)/1000.0;\n}\n\nstatic double\nchr_time_to_microsecs(chr_time *time)\n{\n    return ((double)((struct timeval*)time)->tv_sec)*1000000.0 + \n\t((double)((struct timeval*)time)->tv_usec);\n}\n\nstatic double\nchr_time_to_nanosecs(chr_time *time)\n{\n    return ((double)((struct timeval*)time)->tv_sec)*1000000000.0 + \n\t((double)((struct timeval*)time)->tv_usec*1000.0);\n}\n\nstatic double\nchr_approx_resolution()\n{\n    struct timeval start, stop, diff;\n    gettimeofday(&start, NULL);\n    gettimeofday(&stop, NULL);\n    while(start.tv_usec == stop.tv_usec) {\n\tgettimeofday(&stop, NULL);\n    }\n    chr_timer_diff((chr_time*)&diff, (chr_time*)&stop, (chr_time*)&start);\n    return chr_time_to_secs((chr_time*)&diff);\n}\n\nstatic char atl_extern_string[] = \"\\n\\\n\tint attr_set(attr_list l, string name);\\n\\\n\tattr_list create_attr_list();\\n\\\n\tattr_list copy_attr_list(attr_list l);\\n\\\n\tvoid free_attr_list(attr_list l);\\n\t\t\t\t\t\\\n\tvoid set_long_attr(attr_list l, string name, long value);\\n\\\n\tvoid set_float_attr(attr_list l, string name, double value);\\n\\\n\tvoid set_double_attr(attr_list l, string name, double value);\\n\\\n\tvoid set_int_attr(attr_list l, string name, int value);\\n\\\n\tvoid set_string_attr(attr_list l, string name, string value);\\n\\\n\tint attr_ivalue(attr_list l, string name);\\n\\\n\tlong attr_lvalue(attr_list l, string name);\\n\\\n\tdouble attr_dvalue(attr_list l, string name);\\n\\\n\tdouble attr_fvalue(attr_list l, string name);\\n\\\n\tchar* attr_svalue(attr_list l, string name);\\n\";\nstatic char chr_extern_string[] = \"\\n\\\n        void chr_get_time( chr_time *time);\\n\\\n        void chr_timer_diff( chr_time *diff_time, chr_time *src1, chr_time *src2);\\n\\\n\tint chr_timer_eq_zero( chr_time *time);\\n\\\n\tvoid chr_timer_sum( chr_time *sum_time, chr_time *src1, chr_time *src2);\\n\\\n\tvoid chr_timer_start (chr_time *timer);\\n\\\n\tvoid chr_timer_stop (chr_time *timer);\\n\\\n\tdouble chr_time_to_nanosecs (chr_time *time);\\n\\\n\tdouble chr_time_to_microsecs (chr_time *time);\\n\\\n\tdouble chr_time_to_millisecs (chr_time *time);\\n\\\n\tdouble chr_time_to_secs (chr_time *time);\\n\";\n\nstatic char basic_extern_string[] = \"\\n\\\n\tdouble chr_approx_resolution();\\n\\\n\tint gettimeofday(timeval *tp);\\n\\\n\tffs_file open_ffs(char * fname, char * mode);\\n\\\n\tvoid close_ffs(ffs_file fname);\\n\";\n\nstatic char internals[] = \"\\n\\\n\tvoid cod_NoOp(int duration);\\n\";\n\nstatic cod_extern_entry internal_externs[] = \n{\n    {\"cod_NoOp\", (void*)(long)0xdeadbeef},    /* value is unimportant, but can't be NULL */\n    {NULL, NULL}\n};\n\nstatic cod_extern_entry externs[] = \n{\n#ifdef HAVE_ATL_H\n    {\"attr_set\", (void*)(long)attr_set},\n    {\"create_attr_list\", (void*)(long)attr_create_list},\n    {\"copy_attr_list\", (void*)(long)attr_copy_list},\n    {\"free_attr_list\", (void*)(long)attr_free_list},\n    {\"set_int_attr\", (void*)(long)std_set_int_attr},\n    {\"set_long_attr\", (void*)(long)std_set_long_attr},\n    {\"set_double_attr\", (void*)(long)std_set_double_attr},\n    {\"set_float_attr\", (void*)(long)std_set_float_attr},\n    {\"set_string_attr\", (void*)(long)std_set_string_attr},\n    {\"attr_ivalue\", (void*)(long)attr_ivalue},\n    {\"attr_lvalue\", (void*)(long)attr_lvalue},\n    {\"attr_dvalue\", (void*)(long)attr_dvalue},\n    {\"attr_fvalue\", (void*)(long)attr_fvalue},\n    {\"attr_svalue\", (void*)(long)attr_svalue},\n#endif\n    {\"chr_get_time\", (void*)(long)chr_get_time},\n    {\"chr_timer_diff\", (void*)(long)chr_timer_diff},\n    {\"chr_timer_eq_zero\", (void*)(long)chr_timer_eq_zero},\n    {\"chr_timer_sum\", (void*)(long)chr_timer_sum},\n    {\"chr_timer_start\", (void*)(long)chr_timer_start},\n    {\"chr_timer_stop\", (void*)(long)chr_timer_stop},\n    {\"chr_time_to_nanosecs\", (void*)(long)chr_time_to_nanosecs},\n    {\"chr_time_to_microsecs\", (void*)(long)chr_time_to_microsecs},\n    {\"chr_time_to_millisecs\", (void*)(long)chr_time_to_millisecs},\n    {\"chr_time_to_secs\", (void*)(long)chr_time_to_secs},\n    {\"chr_approx_resolution\", (void*)(long)chr_approx_resolution},\n    {\"gettimeofday\", (void*)(long)gettimeofday_wrapper},\n    {\"open_ffs\", (void*)(long)open_ffs_file},\n    {\"close_ffs\", (void*)(long)close_ffs_file},\n    {(void*)0, (void*)0}\n};\n\nFMField chr_time_list[] = {\n    {\"d1\", \"double\", sizeof(double), FMOffset(chr_time*, d1)}, \n    {\"d2\", \"double\", sizeof(double), FMOffset(chr_time*, d2)}, \n    {\"d3\", \"double\", sizeof(double), FMOffset(chr_time*, d3)}, \n    {NULL, NULL, 0, 0}};\n\nFMField timeval_list[] = {\n    {\"tv_sec\", \"integer\", sizeof(((struct timeval*)0)->tv_sec), FMOffset(struct timeval *, tv_sec)}, \n    {\"tv_usec\", \"integer\", sizeof(((struct timeval*)0)->tv_usec), FMOffset(struct timeval *, tv_usec)}, \n    {NULL, NULL, 0, 0}};\n\nextern void\ncod_add_standard_elements(cod_parse_context context)\n{\n    cod_assoc_externs(context, externs);\n#ifdef HAVE_ATL_H\n    sm_ref attr_node = cod_new_reference_type_decl();\n    attr_node->node.reference_type_decl.name = strdup(\"attr_list\");\n    cod_add_decl_to_parse_context(\"attr_list\", attr_node, context);\n    cod_add_decl_to_scope(\"attr_list\", attr_node, context);\n    cod_add_defined_type(\"attr_list\", context);\n    cod_parse_for_context(atl_extern_string, context);\n#endif\n    sm_ref ffs_node = cod_new_reference_type_decl();\n    ffs_node->node.reference_type_decl.name = strdup(\"ffs_file\");\n    cod_add_decl_to_parse_context(\"ffs_file\", ffs_node, context);\n    cod_add_decl_to_scope(\"ffs_file\", ffs_node, context);\n    cod_add_defined_type(\"ffs_file\", context);\n\n    cod_add_int_constant_to_parse_context(\"NULL\", 0, context);\n    cod_add_simple_struct_type(\"chr_time\", chr_time_list, context);\n    cod_parse_for_context(chr_extern_string, context);\n    cod_add_simple_struct_type(\"timeval\", timeval_list, context);\n    cod_add_defined_type(\"cod_type_spec\", context);\n    cod_add_defined_type(\"cod_exec_context\", context);\n    cod_add_defined_type(\"cod_closure_context\", context);\n    cod_semanticize_added_decls(context);\n    \n    cod_parse_for_context(basic_extern_string, context);\n\n    cod_assoc_externs(context, internal_externs);\n    cod_parse_for_context(internals, context);\n    cod_swap_decls_to_standard(context);\n}\n\n#else /* LINUX_KERNEL_MODULE */\n\nextern void\ncod_add_standard_elements(cod_parse_context context)\n{\n}\n#endif /* LINUX_KERNEL_MODULE */\n\n#if NO_DYNAMIC_LINKING\n#define sym(x) (void*)(long)x\n#else\n#define sym(x) (void*)0\n#endif\n\nstatic cod_extern_entry string_externs[] = \n{\n    {\"memchr\", (void*)(long)memchr},\n    {\"memcmp\", (void*)(long)memcmp},\n    {\"memcpy\", (void*)(long)memcpy},\n    {\"memmove\", (void*)(long)memmove},\n    {\"memset\", (void*)(long)memset},\n    {\"strcat\", (void*)(long)strcat},\n    {\"strchr\", (void*)(long)strchr},\n    {\"strcmp\", (void*)(long)strcmp},\n    {\"strcoll\", (void*)(long)strcoll},\n    {\"strcpy\", (void*)(long)strcpy},\n    {\"strcspn\", (void*)(long)strcspn},\n    {\"strerror\", (void*)(long)strerror},\n    {\"strlen\", (void*)(long)strlen},\n    {\"strncat\", (void*)(long)strncat},\n    {\"strncmp\", (void*)(long)strncmp},\n    {\"strncpy\", (void*)(long)strncpy},\n    {\"strpbrk\", (void*)(long)strpbrk},\n    {\"strrchr\", (void*)(long)strrchr},\n    {\"strspn\", (void*)(long)strspn},\n    {\"strstr\", (void*)(long)strstr},\n    {\"strtok\", (void*)(long)strtok},\n    {\"strxfrm\", (void*)(long)strxfrm},\n    {NULL, NULL}\n};\n\nstatic char string_extern_string[] = \"\\n\\\nvoid\t*memchr(const void *s, int c, int size);\\n\\\nint\t memcmp(const void *m, const void *s, int size);\\n\\\nvoid\t*memcpy(void *m, const void *s, int size);\\n\\\nvoid\t*memmove(void *m, const void *s, int size);\\n\\\nvoid\t*memset(void *m, int c, int size);\\n\\\nchar\t*strcat(char *s1, const char *s2);\\n\\\nchar\t*strchr(const char *s1, int c);\\n\\\nint\t strcmp(const char *s1, const char *s2);\\n\\\nint\t strcoll(const char *s1, const char *s2);\\n\\\nchar\t*strcpy(char *s1, const char *s2);\\n\\\nint\t strcspn(const char *s1, const char *s2);\\n\\\nint\t strlen(const char *s);\\n\\\nchar\t*strncat(char *s1, const char *s2, int s);\\n\\\nint\t strncmp(const char *s1, const char *s2, int s);\\n\\\nchar\t*strncpy(char *s1, const char *s2, int s);\\n\\\nchar\t*strpbrk(const char *s1, const char *s2);\\n\\\nchar\t*strrchr(const char *s1, int c);\\n\\\nint\t strspn(const char *s1, const char *s2);\\n\\\nchar\t*strstr(const char *s1, const char *s2);\\n\\\nchar\t*strtok(char *s1, const char *s2);\\n\\\nint\t strxfrm(char *s1, const char *s2, int size);\\n\\\n\";\n\nstatic cod_extern_entry strings_externs[] = \n{\n    {\"bcmp\", (void*)(long)bcmp},\n    {\"bcopy\", (void*)(long)bcopy},\n    {\"bzero\", (void*)(long)bzero},\n    {\"index\", (void*)(long)index},\n    {\"rindex\", (void*)(long)rindex},\n    {\"ffs\", (void*)(long)ffs},\n    {\"strcasecmp\", (void*)(long)strcasecmp},\n    {\"strncasecmp\", (void*)(long)strncasecmp},\n    {NULL, NULL}\n};\n\nstatic char strings_extern_string[] = \"\\n\\\nint\t bcmp(const void *m1, const void *m2, int size);\\n\\\nvoid\t bcopy(const void *m1, void *m2, int size);\\n\\\nvoid\t bzero(void *m, int size);\\n\\\nchar\t*index(const char *s1, int c);\\n\\\nchar\t*rindex(const char *s1, int c);\\n\\\nint\t ffs(int);\\n\\\nint\t strcasecmp(const char *s1, const char *s2);\\n\\\nint\t strncasecmp(const char *s1, const char *s2, int size);\\n\\\n\";\n\n\n#include <math.h>\n\nstatic cod_extern_entry math_externs[] = \n{\n    {\"acos\", sym(acos)},\n    {\"asin\", sym(asin)},\n    {\"atan\", sym(atan)},\n    {\"atan2\", sym(atan2)},\n    {\"cos\", sym(cos)},\n    {\"sin\", sym(sin)},\n    {\"tan\", sym(tan)},\n    {\"acosh\", sym(acosh)},\n    {\"asinh\", sym(asinh)},\n    {\"atanh\", sym(atanh)},\n    {\"cosh\", sym(cosh)},\n    {\"sinh\", sym(sinh)},\n    {\"tanh\", sym(tanh)},\n    {\"exp\", sym(exp)},\n    {\"exp2\", sym(exp2)},\n    {\"expm1\", sym(expm1)},\n    {\"log\", sym(log)},\n    {\"log10\", sym(log10)},\n    {\"log2\", sym(log2)},\n    {\"log1p\", sym(log1p)},\n    {\"logb\", sym(logb)},\n    {\"modf\", sym(modf)},\n    {\"ldexp\", sym(ldexp)},\n    {\"frexp\", sym(frexp)},\n    {\"ilogb\", sym(ilogb)},\n    {\"scalbn\", sym(scalbn)},\n    {\"scalbln\", sym(scalbln)},\n    {\"fabs\", sym(fabs)},\n    {\"cbrt\", sym(cbrt)},\n    {\"hypot\", sym(hypot)},\n    {\"pow\", sym(pow)},\n    {\"sqrt\", sym(sqrt)},\n    {\"erf\", sym(erf)},\n    {\"erfc\", sym(erfc)},\n    {\"lgamma\", sym(lgamma)},\n    {\"tgamma\", sym(tgamma)},\n    {\"ceil\", sym(ceil)},\n    {\"floor\", sym(floor)},\n    {\"nearbyint\", sym(nearbyint)},\n    {\"rint\", sym(rint)},\n    {\"lrint\", sym(lrint)},\n    {\"round\", sym(round)},\n    {\"lround\", sym(lround)},\n    {\"trunc\", sym(trunc)},\n    {\"fmod\", sym(fmod)},\n    {\"remainder\", sym(remainder)},\n    {\"remquo\", sym(remquo)},\n    {\"copysign\", sym(copysign)},\n    {\"nan\", sym(nan)},\n    {NULL, NULL}\n};\n\nstatic char math_extern_string[] = \"\\n\\\ndouble acos(double a);\\n\\\ndouble asin(double a);\\n\\\ndouble atan(double a);\\n\\\ndouble atan2(double b, double a);\\n\\\ndouble cos(double a);\\n\\\ndouble sin(double a);\\n\\\ndouble tan(double a);\\n\\\ndouble acosh(double a);\\n\\\ndouble asinh(double a);\\n\\\ndouble atanh(double a);\\n\\\ndouble cosh(double a);\\n\\\ndouble sinh(double a);\\n\\\ndouble tanh(double a);\\n\\\ndouble exp(double a);\\n\\\ndouble exp2(double a); \\n\\\ndouble expm1(double a); \\n\\\ndouble log(double a);\\n\\\ndouble log10(double a);\\n\\\ndouble log2(double a);\\n\\\ndouble log1p(double a);\\n\\\ndouble logb(double a);\\n\\\ndouble modf(double b, double * a);\\n\\\ndouble ldexp(double b, int a);\\n\\\ndouble frexp(double b, int * a);\\n\\\nint ilogb(double a);\\n\\\ndouble scalbn(double b, int a);\\n\\\ndouble scalbln(double b, long int a);\\n\\\ndouble fabs(double a);\\n\\\ndouble cbrt(double a);\\n\\\ndouble hypot(double b, double a);\\n\\\ndouble pow(double b, double a);\\n\\\ndouble sqrt(double a);\\n\\\ndouble erf(double a);\\n\\\ndouble erfc(double a);\\n\\\ndouble lgamma(double a);\\n\\\ndouble tgamma(double a);\\n\\\ndouble ceil(double a);\\n\\\ndouble floor(double a);\\n\\\ndouble nearbyint(double a);\\n\\\ndouble rint(double a);\\n\\\nlong   lrint(double a);\\n\\\ndouble round(double a);\\n\\\nlong   lround(double a);\\n\\\ndouble trunc(double a);\\n\\\ndouble fmod(double a, double b);\\n\\\ndouble remainder(double a, double b);\\n\\\ndouble remquo(double a, double b, int *c);\\n\\\ndouble copysign(double a, double b);\\n\\\ndouble nan(const char * a);\\n\\\n\";\n\n\n#include <limits.h>\n\nstatic cod_extern_entry limits_externs[] = \n{\n    {NULL, NULL}\n};\n\nstatic char limits_extern_string[] = \"\\n\\\nconst char SCHAR_MAX = 127;\\n\\\nconst char SCHAR_MIN = -128;\\n\\\n\\n\\\nconst unsigned char UCHAR_MAX = 255;\\n\\\nconst char CHAR_MAX = 127;\\n\\\nconst char CHAR_MIN = (-128);\\n\\\n\\n\\\nconst unsigned short USHRT_MAX = 65535;\\n\\\nconst short SHRT_MAX = 32767;\\n\\\nconst short SHRT_MIN = (-32768);\\n\\\n\\n\\\nconst unsigned int\tUINT_MAX = 0xffffffff;\\n\\\nconst int INT_MAX = 2147483647;\\n\\\nconst int INT_MIN = (-2147483647-1);\\n\\\nconst long LONG_MAX = 0x7fffffffffffffffL;\\n\\\nconst long LONG_MIN = (-0x7fffffffffffffffL-1);\\n\\\nconst unsigned long ULONG_MAX = 0xffffffffffffffffUL;\\n\\\n\";\n\n\nstatic void dlload_externs(char *libname, cod_extern_entry *externs);\n\nextern void\ncod_process_include(char *name, cod_parse_context context)\n{\n    int char_count = index(name, '.') - name;\n    if (char_count < 0) char_count = strlen(name);\n    if (strncmp(name, \"string\", char_count) == 0) {\n\tcod_assoc_externs(context, string_externs);\n\tcod_parse_for_context(string_extern_string, context);\n    } else if (strncmp(name, \"strings\", char_count) == 0) {\n\tcod_assoc_externs(context, strings_externs);\n\tcod_parse_for_context(strings_extern_string, context);\n    } else if (strncmp(name, \"math\", char_count) == 0) {\n\tdlload_externs(\"libm\", math_externs);\n\tcod_assoc_externs(context, math_externs);\n\tcod_parse_for_context(math_extern_string, context);\n    } else if (strncmp(name, \"limits\", char_count) == 0) {\n\tcod_parse_for_context(limits_extern_string, context);\n    }\n\n}\n#include <dlfcn.h>\nstatic void \ndlload_externs(char *libname, cod_extern_entry *externs)\n{\n#if NO_DYNAMIC_LINKING\n    return;\n#else\n    int i = 0;\n    char *name = malloc(strlen(libname) + strlen(LIBRARY_EXT) + 1);\n    strcpy(name, libname);\n    strcat(name, LIBRARY_EXT);\n    void *handle = dlopen(name, RTLD_LAZY);\n    free(name);\n    while(externs[i].extern_name) {\n\texterns[i].extern_value = dlsym(handle, externs[i].extern_name);\n\ti++;\n    }\n#endif\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/thirdparty/pybind11/pybind11/include/pybind11/detail/internals.h": "/*\n    pybind11/detail/internals.h: Internal data structure and related functions\n\n    Copyright (c) 2017 Wenzel Jakob <wenzel.jakob@epfl.ch>\n\n    All rights reserved. Use of this source code is governed by a\n    BSD-style license that can be found in the LICENSE file.\n*/\n\n#pragma once\n\n#include \"../pytypes.h\"\n\nPYBIND11_NAMESPACE_BEGIN(PYBIND11_NAMESPACE)\nPYBIND11_NAMESPACE_BEGIN(detail)\n// Forward declarations\ninline PyTypeObject *make_static_property_type();\ninline PyTypeObject *make_default_metaclass();\ninline PyObject *make_object_base_type(PyTypeObject *metaclass);\n\n// The old Python Thread Local Storage (TLS) API is deprecated in Python 3.7 in favor of the new\n// Thread Specific Storage (TSS) API.\n#if PY_VERSION_HEX >= 0x03070000\n#    define PYBIND11_TLS_KEY_INIT(var) Py_tss_t *var = nullptr\n#    define PYBIND11_TLS_GET_VALUE(key) PyThread_tss_get((key))\n#    define PYBIND11_TLS_REPLACE_VALUE(key, value) PyThread_tss_set((key), (value))\n#    define PYBIND11_TLS_DELETE_VALUE(key) PyThread_tss_set((key), nullptr)\n#    define PYBIND11_TLS_FREE(key) PyThread_tss_free(key)\n#else\n    // Usually an int but a long on Cygwin64 with Python 3.x\n#    define PYBIND11_TLS_KEY_INIT(var) decltype(PyThread_create_key()) var = 0\n#    define PYBIND11_TLS_GET_VALUE(key) PyThread_get_key_value((key))\n#    if PY_MAJOR_VERSION < 3\n#        define PYBIND11_TLS_DELETE_VALUE(key)                               \\\n             PyThread_delete_key_value(key)\n#        define PYBIND11_TLS_REPLACE_VALUE(key, value)                       \\\n             do {                                                            \\\n                 PyThread_delete_key_value((key));                           \\\n                 PyThread_set_key_value((key), (value));                     \\\n             } while (false)\n#    else\n#        define PYBIND11_TLS_DELETE_VALUE(key)                               \\\n             PyThread_set_key_value((key), nullptr)\n#        define PYBIND11_TLS_REPLACE_VALUE(key, value)                       \\\n             PyThread_set_key_value((key), (value))\n#    endif\n#    define PYBIND11_TLS_FREE(key) (void)key\n#endif\n\n// Python loads modules by default with dlopen with the RTLD_LOCAL flag; under libc++ and possibly\n// other STLs, this means `typeid(A)` from one module won't equal `typeid(A)` from another module\n// even when `A` is the same, non-hidden-visibility type (e.g. from a common include).  Under\n// libstdc++, this doesn't happen: equality and the type_index hash are based on the type name,\n// which works.  If not under a known-good stl, provide our own name-based hash and equality\n// functions that use the type name.\n#if defined(__GLIBCXX__)\ninline bool same_type(const std::type_info &lhs, const std::type_info &rhs) { return lhs == rhs; }\nusing type_hash = std::hash<std::type_index>;\nusing type_equal_to = std::equal_to<std::type_index>;\n#else\ninline bool same_type(const std::type_info &lhs, const std::type_info &rhs) {\n    return lhs.name() == rhs.name() || std::strcmp(lhs.name(), rhs.name()) == 0;\n}\n\nstruct type_hash {\n    size_t operator()(const std::type_index &t) const {\n        size_t hash = 5381;\n        const char *ptr = t.name();\n        while (auto c = static_cast<unsigned char>(*ptr++))\n            hash = (hash * 33) ^ c;\n        return hash;\n    }\n};\n\nstruct type_equal_to {\n    bool operator()(const std::type_index &lhs, const std::type_index &rhs) const {\n        return lhs.name() == rhs.name() || std::strcmp(lhs.name(), rhs.name()) == 0;\n    }\n};\n#endif\n\ntemplate <typename value_type>\nusing type_map = std::unordered_map<std::type_index, value_type, type_hash, type_equal_to>;\n\nstruct override_hash {\n    inline size_t operator()(const std::pair<const PyObject *, const char *>& v) const {\n        size_t value = std::hash<const void *>()(v.first);\n        value ^= std::hash<const void *>()(v.second) + 0x9e3779b9 + (value<<6) + (value>>2);\n        return value;\n    }\n};\n\n/// Internal data structure used to track registered instances and types.\n/// Whenever binary incompatible changes are made to this structure,\n/// `PYBIND11_INTERNALS_VERSION` must be incremented.\nstruct internals {\n    type_map<type_info *> registered_types_cpp; // std::type_index -> pybind11's type information\n    std::unordered_map<PyTypeObject *, std::vector<type_info *>> registered_types_py; // PyTypeObject* -> base type_info(s)\n    std::unordered_multimap<const void *, instance*> registered_instances; // void * -> instance*\n    std::unordered_set<std::pair<const PyObject *, const char *>, override_hash> inactive_override_cache;\n    type_map<std::vector<bool (*)(PyObject *, void *&)>> direct_conversions;\n    std::unordered_map<const PyObject *, std::vector<PyObject *>> patients;\n    std::forward_list<void (*) (std::exception_ptr)> registered_exception_translators;\n    std::unordered_map<std::string, void *> shared_data; // Custom data to be shared across extensions\n    std::vector<PyObject *> loader_patient_stack; // Used by `loader_life_support`\n    std::forward_list<std::string> static_strings; // Stores the std::strings backing detail::c_str()\n    PyTypeObject *static_property_type;\n    PyTypeObject *default_metaclass;\n    PyObject *instance_base;\n#if defined(WITH_THREAD)\n    PYBIND11_TLS_KEY_INIT(tstate);\n    PyInterpreterState *istate = nullptr;\n    ~internals() {\n        // This destructor is called *after* Py_Finalize() in finalize_interpreter().\n        // That *SHOULD BE* fine. The following details what happens whe PyThread_tss_free is called.\n        // PYBIND11_TLS_FREE is PyThread_tss_free on python 3.7+. On older python, it does nothing.\n        // PyThread_tss_free calls PyThread_tss_delete and PyMem_RawFree.\n        // PyThread_tss_delete just calls TlsFree (on Windows) or pthread_key_delete (on *NIX). Neither\n        // of those have anything to do with CPython internals.\n        // PyMem_RawFree *requires* that the `tstate` be allocated with the CPython allocator.\n        PYBIND11_TLS_FREE(tstate);\n    }\n#endif\n};\n\n/// Additional type information which does not fit into the PyTypeObject.\n/// Changes to this struct also require bumping `PYBIND11_INTERNALS_VERSION`.\nstruct type_info {\n    PyTypeObject *type;\n    const std::type_info *cpptype;\n    size_t type_size, type_align, holder_size_in_ptrs;\n    void *(*operator_new)(size_t);\n    void (*init_instance)(instance *, const void *);\n    void (*dealloc)(value_and_holder &v_h);\n    std::vector<PyObject *(*)(PyObject *, PyTypeObject *)> implicit_conversions;\n    std::vector<std::pair<const std::type_info *, void *(*)(void *)>> implicit_casts;\n    std::vector<bool (*)(PyObject *, void *&)> *direct_conversions;\n    buffer_info *(*get_buffer)(PyObject *, void *) = nullptr;\n    void *get_buffer_data = nullptr;\n    void *(*module_local_load)(PyObject *, const type_info *) = nullptr;\n    /* A simple type never occurs as a (direct or indirect) parent\n     * of a class that makes use of multiple inheritance */\n    bool simple_type : 1;\n    /* True if there is no multiple inheritance in this type's inheritance tree */\n    bool simple_ancestors : 1;\n    /* for base vs derived holder_type checks */\n    bool default_holder : 1;\n    /* true if this is a type registered with py::module_local */\n    bool module_local : 1;\n};\n\n/// Tracks the `internals` and `type_info` ABI version independent of the main library version\n#define PYBIND11_INTERNALS_VERSION 4\n\n/// On MSVC, debug and release builds are not ABI-compatible!\n#if defined(_MSC_VER) && defined(_DEBUG)\n#  define PYBIND11_BUILD_TYPE \"_debug\"\n#else\n#  define PYBIND11_BUILD_TYPE \"\"\n#endif\n\n/// Let's assume that different compilers are ABI-incompatible.\n/// A user can manually set this string if they know their\n/// compiler is compatible.\n#ifndef PYBIND11_COMPILER_TYPE\n#  if defined(_MSC_VER)\n#    define PYBIND11_COMPILER_TYPE \"_msvc\"\n#  elif defined(__INTEL_COMPILER)\n#    define PYBIND11_COMPILER_TYPE \"_icc\"\n#  elif defined(__clang__)\n#    define PYBIND11_COMPILER_TYPE \"_clang\"\n#  elif defined(__PGI)\n#    define PYBIND11_COMPILER_TYPE \"_pgi\"\n#  elif defined(__MINGW32__)\n#    define PYBIND11_COMPILER_TYPE \"_mingw\"\n#  elif defined(__CYGWIN__)\n#    define PYBIND11_COMPILER_TYPE \"_gcc_cygwin\"\n#  elif defined(__GNUC__)\n#    define PYBIND11_COMPILER_TYPE \"_gcc\"\n#  else\n#    define PYBIND11_COMPILER_TYPE \"_unknown\"\n#  endif\n#endif\n\n/// Also standard libs\n#ifndef PYBIND11_STDLIB\n#  if defined(_LIBCPP_VERSION)\n#    define PYBIND11_STDLIB \"_libcpp\"\n#  elif defined(__GLIBCXX__) || defined(__GLIBCPP__)\n#    define PYBIND11_STDLIB \"_libstdcpp\"\n#  else\n#    define PYBIND11_STDLIB \"\"\n#  endif\n#endif\n\n/// On Linux/OSX, changes in __GXX_ABI_VERSION__ indicate ABI incompatibility.\n#ifndef PYBIND11_BUILD_ABI\n#  if defined(__GXX_ABI_VERSION)\n#    define PYBIND11_BUILD_ABI \"_cxxabi\" PYBIND11_TOSTRING(__GXX_ABI_VERSION)\n#  else\n#    define PYBIND11_BUILD_ABI \"\"\n#  endif\n#endif\n\n#ifndef PYBIND11_INTERNALS_KIND\n#  if defined(WITH_THREAD)\n#    define PYBIND11_INTERNALS_KIND \"\"\n#  else\n#    define PYBIND11_INTERNALS_KIND \"_without_thread\"\n#  endif\n#endif\n\n#define PYBIND11_INTERNALS_ID \"__pybind11_internals_v\" \\\n    PYBIND11_TOSTRING(PYBIND11_INTERNALS_VERSION) PYBIND11_INTERNALS_KIND PYBIND11_COMPILER_TYPE PYBIND11_STDLIB PYBIND11_BUILD_ABI PYBIND11_BUILD_TYPE \"__\"\n\n#define PYBIND11_MODULE_LOCAL_ID \"__pybind11_module_local_v\" \\\n    PYBIND11_TOSTRING(PYBIND11_INTERNALS_VERSION) PYBIND11_INTERNALS_KIND PYBIND11_COMPILER_TYPE PYBIND11_STDLIB PYBIND11_BUILD_ABI PYBIND11_BUILD_TYPE \"__\"\n\n/// Each module locally stores a pointer to the `internals` data. The data\n/// itself is shared among modules with the same `PYBIND11_INTERNALS_ID`.\ninline internals **&get_internals_pp() {\n    static internals **internals_pp = nullptr;\n    return internals_pp;\n}\n\ninline void translate_exception(std::exception_ptr p) {\n    try {\n        if (p) std::rethrow_exception(p);\n    } catch (error_already_set &e)           { e.restore();                                    return;\n    } catch (const builtin_exception &e)     { e.set_error();                                  return;\n    } catch (const std::bad_alloc &e)        { PyErr_SetString(PyExc_MemoryError,   e.what()); return;\n    } catch (const std::domain_error &e)     { PyErr_SetString(PyExc_ValueError,    e.what()); return;\n    } catch (const std::invalid_argument &e) { PyErr_SetString(PyExc_ValueError,    e.what()); return;\n    } catch (const std::length_error &e)     { PyErr_SetString(PyExc_ValueError,    e.what()); return;\n    } catch (const std::out_of_range &e)     { PyErr_SetString(PyExc_IndexError,    e.what()); return;\n    } catch (const std::range_error &e)      { PyErr_SetString(PyExc_ValueError,    e.what()); return;\n    } catch (const std::overflow_error &e)   { PyErr_SetString(PyExc_OverflowError, e.what()); return;\n    } catch (const std::exception &e)        { PyErr_SetString(PyExc_RuntimeError,  e.what()); return;\n    } catch (...) {\n        PyErr_SetString(PyExc_RuntimeError, \"Caught an unknown exception!\");\n        return;\n    }\n}\n\n#if !defined(__GLIBCXX__)\ninline void translate_local_exception(std::exception_ptr p) {\n    try {\n        if (p) std::rethrow_exception(p);\n    } catch (error_already_set &e)       { e.restore();   return;\n    } catch (const builtin_exception &e) { e.set_error(); return;\n    }\n}\n#endif\n\n/// Return a reference to the current `internals` data\nPYBIND11_NOINLINE inline internals &get_internals() {\n    auto **&internals_pp = get_internals_pp();\n    if (internals_pp && *internals_pp)\n        return **internals_pp;\n\n    // Ensure that the GIL is held since we will need to make Python calls.\n    // Cannot use py::gil_scoped_acquire here since that constructor calls get_internals.\n    struct gil_scoped_acquire_local {\n        gil_scoped_acquire_local() : state (PyGILState_Ensure()) {}\n        ~gil_scoped_acquire_local() { PyGILState_Release(state); }\n        const PyGILState_STATE state;\n    } gil;\n\n    constexpr auto *id = PYBIND11_INTERNALS_ID;\n    auto builtins = handle(PyEval_GetBuiltins());\n    if (builtins.contains(id) && isinstance<capsule>(builtins[id])) {\n        internals_pp = static_cast<internals **>(capsule(builtins[id]));\n\n        // We loaded builtins through python's builtins, which means that our `error_already_set`\n        // and `builtin_exception` may be different local classes than the ones set up in the\n        // initial exception translator, below, so add another for our local exception classes.\n        //\n        // libstdc++ doesn't require this (types there are identified only by name)\n#if !defined(__GLIBCXX__)\n        (*internals_pp)->registered_exception_translators.push_front(&translate_local_exception);\n#endif\n    } else {\n        if (!internals_pp) internals_pp = new internals*();\n        auto *&internals_ptr = *internals_pp;\n        internals_ptr = new internals();\n#if defined(WITH_THREAD)\n\n        #if PY_VERSION_HEX < 0x03090000\n                PyEval_InitThreads();\n        #endif\n        PyThreadState *tstate = PyThreadState_Get();\n        #if PY_VERSION_HEX >= 0x03070000\n            internals_ptr->tstate = PyThread_tss_alloc();\n            if (!internals_ptr->tstate || PyThread_tss_create(internals_ptr->tstate))\n                pybind11_fail(\"get_internals: could not successfully initialize the TSS key!\");\n            PyThread_tss_set(internals_ptr->tstate, tstate);\n        #else\n            internals_ptr->tstate = PyThread_create_key();\n            if (internals_ptr->tstate == -1)\n                pybind11_fail(\"get_internals: could not successfully initialize the TLS key!\");\n            PyThread_set_key_value(internals_ptr->tstate, tstate);\n        #endif\n        internals_ptr->istate = tstate->interp;\n#endif\n        builtins[id] = capsule(internals_pp);\n        internals_ptr->registered_exception_translators.push_front(&translate_exception);\n        internals_ptr->static_property_type = make_static_property_type();\n        internals_ptr->default_metaclass = make_default_metaclass();\n        internals_ptr->instance_base = make_object_base_type(internals_ptr->default_metaclass);\n    }\n    return **internals_pp;\n}\n\n/// Works like `internals.registered_types_cpp`, but for module-local registered types:\ninline type_map<type_info *> &registered_local_types_cpp() {\n    static type_map<type_info *> locals{};\n    return locals;\n}\n\n/// Constructs a std::string with the given arguments, stores it in `internals`, and returns its\n/// `c_str()`.  Such strings objects have a long storage duration -- the internal strings are only\n/// cleared when the program exits or after interpreter shutdown (when embedding), and so are\n/// suitable for c-style strings needed by Python internals (such as PyTypeObject's tp_name).\ntemplate <typename... Args>\nconst char *c_str(Args &&...args) {\n    auto &strings = get_internals().static_strings;\n    strings.emplace_front(std::forward<Args>(args)...);\n    return strings.front().c_str();\n}\n\nPYBIND11_NAMESPACE_END(detail)\n\n/// Returns a named pointer that is shared among all extension modules (using the same\n/// pybind11 version) running in the current interpreter. Names starting with underscores\n/// are reserved for internal usage. Returns `nullptr` if no matching entry was found.\ninline PYBIND11_NOINLINE void *get_shared_data(const std::string &name) {\n    auto &internals = detail::get_internals();\n    auto it = internals.shared_data.find(name);\n    return it != internals.shared_data.end() ? it->second : nullptr;\n}\n\n/// Set the shared data that can be later recovered by `get_shared_data()`.\ninline PYBIND11_NOINLINE void *set_shared_data(const std::string &name, void *data) {\n    detail::get_internals().shared_data[name] = data;\n    return data;\n}\n\n/// Returns a typed reference to a shared data entry (by using `get_shared_data()`) if\n/// such entry exists. Otherwise, a new object of default-constructible type `T` is\n/// added to the shared data under the given name and a reference to it is returned.\ntemplate<typename T>\nT &get_or_create_shared_data(const std::string &name) {\n    auto &internals = detail::get_internals();\n    auto it = internals.shared_data.find(name);\n    T *ptr = (T *) (it != internals.shared_data.end() ? it->second : nullptr);\n    if (!ptr) {\n        ptr = new T();\n        internals.shared_data[name] = ptr;\n    }\n    return *ptr;\n}\n\nPYBIND11_NAMESPACE_END(PYBIND11_NAMESPACE)\n",
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/thirdparty/KWSys/adios2sys/DynamicLoader.cxx": "/* Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\n   file Copyright.txt or https://cmake.org/licensing#kwsys for details.  */\n#if defined(_WIN32)\n#  define NOMINMAX // hide min,max to not conflict with <limits>\n#endif\n\n#include \"kwsysPrivate.h\"\n#include KWSYS_HEADER(DynamicLoader.hxx)\n\n#include KWSYS_HEADER(Configure.hxx)\n#include KWSYS_HEADER(Encoding.hxx)\n\n// Work-around CMake dependency scanning limitation.  This must\n// duplicate the above list of headers.\n#if 0\n#  include \"Configure.hxx.in\"\n#  include \"DynamicLoader.hxx.in\"\n#endif\n\n// This file actually contains several different implementations:\n// * NOOP for environments without dynamic libs\n// * HP machines which uses shl_load\n// * Mac OS X 10.2.x and earlier which uses NSLinkModule\n// * Windows which uses LoadLibrary\n// * BeOS / Haiku\n// * FreeMiNT for Atari\n// * Default implementation for *NIX systems (including Mac OS X 10.3 and\n//   later) which use dlopen\n//\n// Each part of the ifdef contains a complete implementation for\n// the static methods of DynamicLoader.\n\n#define CHECK_OPEN_FLAGS(var, supported, ret)                                 \\\n  do {                                                                        \\\n    /* Check for unknown flags. */                                            \\\n    if ((var & AllOpenFlags) != var) {                                        \\\n      return ret;                                                             \\\n    }                                                                         \\\n                                                                              \\\n    /* Check for unsupported flags. */                                        \\\n    if ((var & (supported)) != var) {                                         \\\n      return ret;                                                             \\\n    }                                                                         \\\n  } while (0)\n\nnamespace KWSYS_NAMESPACE {\n\nDynamicLoader::LibraryHandle DynamicLoader::OpenLibrary(\n  const std::string& libname)\n{\n  return DynamicLoader::OpenLibrary(libname, 0);\n}\n}\n\n#if !KWSYS_SUPPORTS_SHARED_LIBS\n// Implementation for environments without dynamic libs\n#  include <string.h> // for strerror()\n\nnamespace KWSYS_NAMESPACE {\n\nDynamicLoader::LibraryHandle DynamicLoader::OpenLibrary(\n  const std::string& libname, int flags)\n{\n  return 0;\n}\n\nint DynamicLoader::CloseLibrary(DynamicLoader::LibraryHandle lib)\n{\n  if (!lib) {\n    return 0;\n  }\n\n  return 1;\n}\n\nDynamicLoader::SymbolPointer DynamicLoader::GetSymbolAddress(\n  DynamicLoader::LibraryHandle lib, const std::string& sym)\n{\n  return 0;\n}\n\nconst char* DynamicLoader::LastError()\n{\n  return \"General error\";\n}\n\n} // namespace KWSYS_NAMESPACE\n\n#elif defined(__hpux)\n// Implementation for HPUX machines\n#  include <dl.h>\n#  include <errno.h>\n\nnamespace KWSYS_NAMESPACE {\n\nDynamicLoader::LibraryHandle DynamicLoader::OpenLibrary(\n  const std::string& libname, int flags)\n{\n  CHECK_OPEN_FLAGS(flags, 0, 0);\n\n  return shl_load(libname.c_str(), BIND_DEFERRED | DYNAMIC_PATH, 0L);\n}\n\nint DynamicLoader::CloseLibrary(DynamicLoader::LibraryHandle lib)\n{\n  if (!lib) {\n    return 0;\n  }\n  return !shl_unload(lib);\n}\n\nDynamicLoader::SymbolPointer DynamicLoader::GetSymbolAddress(\n  DynamicLoader::LibraryHandle lib, const std::string& sym)\n{\n  void* addr;\n  int status;\n\n  /* TYPE_PROCEDURE Look for a function or procedure. (This used to be default)\n   * TYPE_DATA      Look for a symbol in the data segment (for example,\n   * variables).\n   * TYPE_UNDEFINED Look for any symbol.\n   */\n  status = shl_findsym(&lib, sym.c_str(), TYPE_UNDEFINED, &addr);\n  void* result = (status < 0) ? (void*)0 : addr;\n\n  // Hack to cast pointer-to-data to pointer-to-function.\n  return *reinterpret_cast<DynamicLoader::SymbolPointer*>(&result);\n}\n\nconst char* DynamicLoader::LastError()\n{\n  // TODO: Need implementation with errno/strerror\n  /* If successful, shl_findsym returns an integer (int) value zero. If\n   * shl_findsym cannot find sym, it returns -1 and sets errno to zero.\n   * If any other errors occur, shl_findsym returns -1 and sets errno to one\n   * of these values (defined in <errno.h>):\n   * ENOEXEC\n   * A format error was detected in the specified library.\n   * ENOSYM\n   * A symbol on which sym depends could not be found.\n   * EINVAL\n   * The specified handle is invalid.\n   */\n\n  if (errno == ENOEXEC || errno == ENOSYM || errno == EINVAL) {\n    return strerror(errno);\n  }\n  // else\n  return 0;\n}\n\n} // namespace KWSYS_NAMESPACE\n\n#elif defined(__APPLE__) && (MAC_OS_X_VERSION_MAX_ALLOWED < 1030)\n// Implementation for Mac OS X 10.2.x and earlier\n#  include <mach-o/dyld.h>\n#  include <string.h> // for strlen\n\nnamespace KWSYS_NAMESPACE {\n\nDynamicLoader::LibraryHandle DynamicLoader::OpenLibrary(\n  const std::string& libname, int flags)\n{\n  CHECK_OPEN_FLAGS(flags, 0, 0);\n\n  NSObjectFileImageReturnCode rc;\n  NSObjectFileImage image = 0;\n\n  rc = NSCreateObjectFileImageFromFile(libname.c_str(), &image);\n  // rc == NSObjectFileImageInappropriateFile when trying to load a dylib file\n  if (rc != NSObjectFileImageSuccess) {\n    return 0;\n  }\n  NSModule handle = NSLinkModule(image, libname.c_str(),\n                                 NSLINKMODULE_OPTION_BINDNOW |\n                                   NSLINKMODULE_OPTION_RETURN_ON_ERROR);\n  NSDestroyObjectFileImage(image);\n  return handle;\n}\n\nint DynamicLoader::CloseLibrary(DynamicLoader::LibraryHandle lib)\n{\n  // NSUNLINKMODULE_OPTION_KEEP_MEMORY_MAPPED\n  // With  this  option  the memory for the module is not deallocated\n  // allowing pointers into the module to still be valid.\n  // You should use this option instead if your code experience some problems\n  // reported against Panther 10.3.9 (fixed in Tiger 10.4.2 and up)\n  bool success = NSUnLinkModule(lib, NSUNLINKMODULE_OPTION_NONE);\n  return success;\n}\n\nDynamicLoader::SymbolPointer DynamicLoader::GetSymbolAddress(\n  DynamicLoader::LibraryHandle lib, const std::string& sym)\n{\n  void* result = 0;\n  // Need to prepend symbols with '_' on Apple-gcc compilers\n  std::string rsym = '_' + sym;\n\n  NSSymbol symbol = NSLookupSymbolInModule(lib, rsym.c_str());\n  if (symbol) {\n    result = NSAddressOfSymbol(symbol);\n  }\n\n  // Hack to cast pointer-to-data to pointer-to-function.\n  return *reinterpret_cast<DynamicLoader::SymbolPointer*>(&result);\n}\n\nconst char* DynamicLoader::LastError()\n{\n  return 0;\n}\n\n} // namespace KWSYS_NAMESPACE\n\n#elif defined(_WIN32) && !defined(__CYGWIN__)\n// Implementation for Windows win32 code but not cygwin\n#  include <windows.h>\n\n#  include <stdio.h>\n\nnamespace KWSYS_NAMESPACE {\n\nDynamicLoader::LibraryHandle DynamicLoader::OpenLibrary(\n  const std::string& libname, int flags)\n{\n  CHECK_OPEN_FLAGS(flags, SearchBesideLibrary, nullptr);\n\n  DWORD llFlags = 0;\n  if (flags & SearchBesideLibrary) {\n    llFlags |= LOAD_WITH_ALTERED_SEARCH_PATH;\n  }\n\n  return LoadLibraryExW(Encoding::ToWindowsExtendedPath(libname).c_str(),\n                        nullptr, llFlags);\n}\n\nint DynamicLoader::CloseLibrary(DynamicLoader::LibraryHandle lib)\n{\n  return (int)FreeLibrary(lib);\n}\n\nDynamicLoader::SymbolPointer DynamicLoader::GetSymbolAddress(\n  DynamicLoader::LibraryHandle lib, const std::string& sym)\n{\n  // TODO: The calling convention affects the name of the symbol.  We\n  // should have a tool to help get the symbol with the desired\n  // calling convention.  Currently we assume cdecl.\n  //\n  // MSVC:\n  //   __cdecl    = \"func\" (default)\n  //   __fastcall = \"@_func@X\"\n  //   __stdcall  = \"_func@X\"\n  //\n  // Note that the \"@X\" part of the name above is the total size (in\n  // bytes) of the arguments on the stack.\n  void* result;\n  const char* rsym = sym.c_str();\n  result = (void*)GetProcAddress(lib, rsym);\n  return *reinterpret_cast<DynamicLoader::SymbolPointer*>(&result);\n}\n\n#  define DYNLOAD_ERROR_BUFFER_SIZE 1024\n\nconst char* DynamicLoader::LastError()\n{\n  wchar_t lpMsgBuf[DYNLOAD_ERROR_BUFFER_SIZE + 1];\n\n  DWORD error = GetLastError();\n  DWORD length = FormatMessageW(\n    FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_IGNORE_INSERTS, nullptr, error,\n    MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT), // Default language\n    lpMsgBuf, DYNLOAD_ERROR_BUFFER_SIZE, nullptr);\n\n  static char str[DYNLOAD_ERROR_BUFFER_SIZE + 1];\n\n  if (length < 1) {\n    /* FormatMessage failed.  Use a default message.  */\n    _snprintf(str, DYNLOAD_ERROR_BUFFER_SIZE,\n              \"DynamicLoader encountered error 0x%X.  \"\n              \"FormatMessage failed with error 0x%X\",\n              error, GetLastError());\n    return str;\n  }\n\n  if (!WideCharToMultiByte(CP_UTF8, 0, lpMsgBuf, -1, str,\n                           DYNLOAD_ERROR_BUFFER_SIZE, nullptr, nullptr)) {\n    /* WideCharToMultiByte failed.  Use a default message.  */\n    _snprintf(str, DYNLOAD_ERROR_BUFFER_SIZE,\n              \"DynamicLoader encountered error 0x%X.  \"\n              \"WideCharToMultiByte failed with error 0x%X\",\n              error, GetLastError());\n  }\n\n  return str;\n}\n\n} // namespace KWSYS_NAMESPACE\n\n#elif defined(__BEOS__)\n// Implementation for BeOS / Haiku\n#  include <string.h> // for strerror()\n\n#  include <be/kernel/image.h>\n#  include <be/support/Errors.h>\n\nnamespace KWSYS_NAMESPACE {\n\nstatic image_id last_dynamic_err = B_OK;\n\nDynamicLoader::LibraryHandle DynamicLoader::OpenLibrary(\n  const std::string& libname, int flags)\n{\n  CHECK_OPEN_FLAGS(flags, 0, 0);\n\n  // image_id's are integers, errors are negative. Add one just in case we\n  //  get a valid image_id of zero (is that even possible?).\n  image_id rc = load_add_on(libname.c_str());\n  if (rc < 0) {\n    last_dynamic_err = rc;\n    return 0;\n  }\n\n  return rc + 1;\n}\n\nint DynamicLoader::CloseLibrary(DynamicLoader::LibraryHandle lib)\n{\n  if (!lib) {\n    last_dynamic_err = B_BAD_VALUE;\n    return 0;\n  } else {\n    // The function dlclose() returns 0 on success, and non-zero on error.\n    status_t rc = unload_add_on(lib - 1);\n    if (rc != B_OK) {\n      last_dynamic_err = rc;\n      return 0;\n    }\n  }\n\n  return 1;\n}\n\nDynamicLoader::SymbolPointer DynamicLoader::GetSymbolAddress(\n  DynamicLoader::LibraryHandle lib, const std::string& sym)\n{\n  // Hack to cast pointer-to-data to pointer-to-function.\n  union\n  {\n    void* pvoid;\n    DynamicLoader::SymbolPointer psym;\n  } result;\n\n  result.psym = nullptr;\n\n  if (!lib) {\n    last_dynamic_err = B_BAD_VALUE;\n  } else {\n    // !!! FIXME: BeOS can do function-only lookups...does this ever\n    // !!! FIXME:  actually _want_ a data symbol lookup, or was this union\n    // !!! FIXME:  a leftover of dlsym()? (s/ANY/TEXT for functions only).\n    status_t rc =\n      get_image_symbol(lib - 1, sym.c_str(), B_SYMBOL_TYPE_ANY, &result.pvoid);\n    if (rc != B_OK) {\n      last_dynamic_err = rc;\n      result.psym = nullptr;\n    }\n  }\n  return result.psym;\n}\n\nconst char* DynamicLoader::LastError()\n{\n  const char* retval = strerror(last_dynamic_err);\n  last_dynamic_err = B_OK;\n  return retval;\n}\n\n} // namespace KWSYS_NAMESPACE\n\n#elif defined(__MINT__)\n// Implementation for FreeMiNT on Atari\n#  define _GNU_SOURCE /* for program_invocation_name */\n#  include <dld.h>\n#  include <errno.h>\n#  include <malloc.h>\n#  include <string.h>\n\nnamespace KWSYS_NAMESPACE {\n\nDynamicLoader::LibraryHandle DynamicLoader::OpenLibrary(\n  const std::string& libname, int flags)\n{\n  CHECK_OPEN_FLAGS(flags, 0, nullptr);\n\n  char* name = (char*)calloc(1, libname.size() + 1);\n  dld_init(program_invocation_name);\n  strncpy(name, libname.c_str(), libname.size());\n  dld_link(libname.c_str());\n  return (void*)name;\n}\n\nint DynamicLoader::CloseLibrary(DynamicLoader::LibraryHandle lib)\n{\n  dld_unlink_by_file((char*)lib, 0);\n  free(lib);\n  return 0;\n}\n\nDynamicLoader::SymbolPointer DynamicLoader::GetSymbolAddress(\n  DynamicLoader::LibraryHandle lib, const std::string& sym)\n{\n  // Hack to cast pointer-to-data to pointer-to-function.\n  union\n  {\n    void* pvoid;\n    DynamicLoader::SymbolPointer psym;\n  } result;\n  result.pvoid = dld_get_symbol(sym.c_str());\n  return result.psym;\n}\n\nconst char* DynamicLoader::LastError()\n{\n  return dld_strerror(dld_errno);\n}\n\n} // namespace KWSYS_NAMESPACE\n\n#else\n// Default implementation for *NIX systems (including Mac OS X 10.3 and\n// later) which use dlopen\n#  include <dlfcn.h>\n\nnamespace KWSYS_NAMESPACE {\n\nDynamicLoader::LibraryHandle DynamicLoader::OpenLibrary(\n  const std::string& libname, int flags)\n{\n  CHECK_OPEN_FLAGS(flags, 0, nullptr);\n\n  return dlopen(libname.c_str(), RTLD_LAZY);\n}\n\nint DynamicLoader::CloseLibrary(DynamicLoader::LibraryHandle lib)\n{\n  if (lib) {\n    // The function dlclose() returns 0 on success, and non-zero on error.\n    return !dlclose(lib);\n  }\n  // else\n  return 0;\n}\n\nDynamicLoader::SymbolPointer DynamicLoader::GetSymbolAddress(\n  DynamicLoader::LibraryHandle lib, const std::string& sym)\n{\n  // Hack to cast pointer-to-data to pointer-to-function.\n  union\n  {\n    void* pvoid;\n    DynamicLoader::SymbolPointer psym;\n  } result;\n  result.pvoid = dlsym(lib, sym.c_str());\n  return result.psym;\n}\n\nconst char* DynamicLoader::LastError()\n{\n  return dlerror();\n}\n\n} // namespace KWSYS_NAMESPACE\n#endif\n",
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/thirdparty/KWSys/adios2sys/DynamicLoader.hxx.in": "/* Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\n   file Copyright.txt or https://cmake.org/licensing#kwsys for details.  */\n#ifndef @KWSYS_NAMESPACE@_DynamicLoader_hxx\n#define @KWSYS_NAMESPACE@_DynamicLoader_hxx\n\n#include <@KWSYS_NAMESPACE@/Configure.hxx>\n\n#include <string>\n\n#if defined(__hpux)\n#  include <dl.h>\n#elif defined(_WIN32) && !defined(__CYGWIN__)\n#  include <windows.h>\n#elif defined(__APPLE__)\n#  include <AvailabilityMacros.h>\n#  if MAC_OS_X_VERSION_MAX_ALLOWED < 1030\n#    include <mach-o/dyld.h>\n#  endif\n#elif defined(__BEOS__)\n#  include <be/kernel/image.h>\n#endif\n\nnamespace @KWSYS_NAMESPACE@ {\n/** \\class DynamicLoader\n * \\brief Portable loading of dynamic libraries or dll's.\n *\n * DynamicLoader provides a portable interface to loading dynamic\n * libraries or dll's into a process.\n *\n * Directory currently works with Windows, Apple, HP-UX and Unix (POSIX)\n * operating systems\n *\n * \\warning dlopen on *nix system works the following way:\n * If filename contains a slash (\"/\"), then it is interpreted as a (relative\n * or absolute) pathname.  Otherwise, the dynamic linker searches for the\n * library as follows : see ld.so(8) for further details):\n * Whereas this distinction does not exist on Win32. Therefore ideally you\n * should be doing full path to guarantee to have a consistent way of dealing\n * with dynamic loading of shared library.\n *\n * \\warning the Cygwin implementation do not use the Win32 HMODULE. Put extra\n * condition so that we can include the correct declaration (POSIX)\n */\n\nclass @KWSYS_NAMESPACE@_EXPORT DynamicLoader\n{\npublic:\n// Ugly stuff for library handles\n// They are different on several different OS's\n#if defined(__hpux)\n  typedef shl_t LibraryHandle;\n#elif defined(_WIN32) && !defined(__CYGWIN__)\n  typedef HMODULE LibraryHandle;\n#elif defined(__APPLE__)\n#  if MAC_OS_X_VERSION_MAX_ALLOWED < 1030\n  typedef NSModule LibraryHandle;\n#  else\n  typedef void* LibraryHandle;\n#  endif\n#elif defined(__BEOS__)\n  typedef image_id LibraryHandle;\n#else // POSIX\n  typedef void* LibraryHandle;\n#endif\n\n  // Return type from DynamicLoader::GetSymbolAddress.\n  typedef void (*SymbolPointer)();\n\n  enum OpenFlags\n  {\n    // Search for dependent libraries beside the library being loaded.\n    //\n    // This is currently only supported on Windows.\n    SearchBesideLibrary = 0x00000001,\n\n    AllOpenFlags = SearchBesideLibrary\n  };\n\n  /** Load a dynamic library into the current process.\n   * The returned LibraryHandle can be used to access the symbols in the\n   * library. The optional second argument is a set of flags to use when\n   * opening the library. If unrecognized or unsupported flags are specified,\n   * the library is not opened. */\n  static LibraryHandle OpenLibrary(const std::string&);\n  static LibraryHandle OpenLibrary(const std::string&, int);\n\n  /** Attempt to detach a dynamic library from the\n   * process.  A value of true is returned if it is successful. */\n  static int CloseLibrary(LibraryHandle);\n\n  /** Find the address of the symbol in the given library. */\n  static SymbolPointer GetSymbolAddress(LibraryHandle, const std::string&);\n\n  /** Return the default module prefix for the current platform.  */\n  static const char* LibPrefix() { return \"@KWSYS_DynamicLoader_PREFIX@\"; }\n\n  /** Return the default module suffix for the current platform.  */\n  static const char* LibExtension() { return \"@KWSYS_DynamicLoader_SUFFIX@\"; }\n\n  /** Return the last error produced from a calls made on this class. */\n  static const char* LastError();\n}; // End Class: DynamicLoader\n\n} // namespace @KWSYS_NAMESPACE@\n\n#endif\n",
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/thirdparty/KWSys/adios2sys/testDynamicLoader.cxx": "/* Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\n   file Copyright.txt or https://cmake.org/licensing#kwsys for details.  */\n#include \"kwsysPrivate.h\"\n\n#include KWSYS_HEADER(DynamicLoader.hxx)\n\n#if defined(__BEOS__) || defined(__HAIKU__)\n#  include <be/kernel/OS.h> /* disable_debugger() API. */\n#endif\n\n// Work-around CMake dependency scanning limitation.  This must\n// duplicate the above list of headers.\n#if 0\n#  include \"DynamicLoader.hxx.in\"\n#endif\n\n#include <iostream>\n#include <string>\n\n// Include with <> instead of \"\" to avoid getting any in-source copy\n// left on disk.\n#include <testSystemTools.h>\n\nstatic std::string GetLibName(const char* lname, const char* subdir = nullptr)\n{\n  // Construct proper name of lib\n  std::string slname;\n  slname = RUNTIME_OUTPUT_DIRECTORY;\n  if (subdir) {\n    slname += \"/\";\n    slname += subdir;\n  }\n#ifdef CMAKE_INTDIR\n  slname += \"/\";\n  slname += CMAKE_INTDIR;\n#endif\n  slname += \"/\";\n  slname += kwsys::DynamicLoader::LibPrefix();\n  slname += lname;\n  slname += kwsys::DynamicLoader::LibExtension();\n\n  return slname;\n}\n\n/* libname = Library name (proper prefix, proper extension)\n * System  = symbol to lookup in libname\n * r1: should OpenLibrary succeed ?\n * r2: should GetSymbolAddress succeed ?\n * r3: should CloseLibrary succeed ?\n */\nstatic int TestDynamicLoader(const char* libname, const char* symbol, int r1,\n                             int r2, int r3, int flags = 0)\n{\n  std::cerr << \"Testing: \" << libname << std::endl;\n  kwsys::DynamicLoader::LibraryHandle l =\n    kwsys::DynamicLoader::OpenLibrary(libname, flags);\n  // If result is incompatible with expectation just fails (xor):\n  if ((r1 && !l) || (!r1 && l)) {\n    std::cerr << \"OpenLibrary: \" << kwsys::DynamicLoader::LastError()\n              << std::endl;\n    return 1;\n  }\n  kwsys::DynamicLoader::SymbolPointer f =\n    kwsys::DynamicLoader::GetSymbolAddress(l, symbol);\n  if ((r2 && !f) || (!r2 && f)) {\n    std::cerr << \"GetSymbolAddress: \" << kwsys::DynamicLoader::LastError()\n              << std::endl;\n    return 1;\n  }\n#ifndef __APPLE__\n  int s = kwsys::DynamicLoader::CloseLibrary(l);\n  if ((r3 && !s) || (!r3 && s)) {\n    std::cerr << \"CloseLibrary: \" << kwsys::DynamicLoader::LastError()\n              << std::endl;\n    return 1;\n  }\n#else\n  (void)r3;\n#endif\n  return 0;\n}\n\nint testDynamicLoader(int argc, char* argv[])\n{\n#if defined(_WIN32)\n  SetErrorMode(SEM_FAILCRITICALERRORS | SEM_NOGPFAULTERRORBOX);\n#elif defined(__BEOS__) || defined(__HAIKU__)\n  disable_debugger(1);\n#endif\n  int res = 0;\n  if (argc == 3) {\n    // User specify a libname and symbol to check.\n    res = TestDynamicLoader(argv[1], argv[2], 1, 1, 1);\n    return res;\n  }\n\n// dlopen() on Syllable before 11/22/2007 doesn't return 0 on error\n#ifndef __SYLLABLE__\n  // Make sure that inexistent lib is giving correct result\n  res += TestDynamicLoader(\"azerty_\", \"foo_bar\", 0, 0, 0);\n  // Make sure that random binary file cannot be assimilated as dylib\n  res += TestDynamicLoader(TEST_SYSTEMTOOLS_SOURCE_DIR \"/testSystemTools.bin\",\n                           \"wp\", 0, 0, 0);\n#endif\n\n#ifdef __linux__\n  // This one is actually fun to test, since dlopen is by default\n  // loaded...wonder why :)\n  res += TestDynamicLoader(\"foobar.lib\", \"dlopen\", 0, 1, 0);\n  res += TestDynamicLoader(\"libdl.so\", \"dlopen\", 1, 1, 1);\n  res += TestDynamicLoader(\"libdl.so\", \"TestDynamicLoader\", 1, 0, 1);\n#endif\n  // Now try on the generated library\n  std::string libname = GetLibName(KWSYS_NAMESPACE_STRING \"TestDynload\");\n  res += TestDynamicLoader(libname.c_str(), \"dummy\", 1, 0, 1);\n  res += TestDynamicLoader(libname.c_str(), \"TestDynamicLoaderSymbolPointer\",\n                           1, 1, 1);\n  res += TestDynamicLoader(libname.c_str(), \"_TestDynamicLoaderSymbolPointer\",\n                           1, 0, 1);\n  res += TestDynamicLoader(libname.c_str(), \"TestDynamicLoaderData\", 1, 1, 1);\n  res += TestDynamicLoader(libname.c_str(), \"_TestDynamicLoaderData\", 1, 0, 1);\n\n#ifdef _WIN32\n  libname = GetLibName(KWSYS_NAMESPACE_STRING \"TestDynloadUse\", \"dynloaddir\");\n  res += TestDynamicLoader(libname.c_str(), \"dummy\", 0, 0, 0);\n  res += TestDynamicLoader(libname.c_str(), \"TestLoad\", 1, 1, 1,\n                           kwsys::DynamicLoader::SearchBesideLibrary);\n  res += TestDynamicLoader(libname.c_str(), \"_TestLoad\", 1, 0, 1,\n                           kwsys::DynamicLoader::SearchBesideLibrary);\n#endif\n\n  return res;\n}\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/testing/adios2/bindings/python/types_np.h5",
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/bindings/Matlab/test/heat.bp",
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/bindings/Matlab/test/heat.bp.dir/heat.bp.3",
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/bindings/Matlab/test/heat.bp.dir/heat.bp.1",
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/bindings/Matlab/test/heat.bp.dir/heat.bp.2",
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/bindings/Matlab/test/heat.bp.dir/heat.bp.0",
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/thirdparty/EVPath/EVPath/doc/cm.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/thirdparty/EVPath/EVPath/doc/struct.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/thirdparty/EVPath/EVPath/doc/func1.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/thirdparty/EVPath/EVPath/doc/net.gif",
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/thirdparty/EVPath/EVPath/doc/overlay.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/thirdparty/EVPath/EVPath/doc/overlay.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/thirdparty/ffs/ffs/ffs/tests/tmp.out",
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/thirdparty/ffs/ffs/ffs/output_dir/index_output.raspberrypi.bin",
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/thirdparty/ffs/ffs/ffs/output_dir/file_output.armv6l.bin",
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/thirdparty/ffs/ffs/ffs/output_dir/file_output.ia64.bin",
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/thirdparty/ffs/ffs/ffs/output_dir/file_output.rhe5.bin",
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/thirdparty/ffs/ffs/ffs/output_dir/file_output.rhe5-64.bin",
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/thirdparty/ffs/ffs/ffs/output_dir/context_test_output.rhe5-64-icc.bin",
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/thirdparty/ffs/ffs/ffs/output_dir/context_test_output.rhe6-64.bin",
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/thirdparty/ffs/ffs/ffs/output_dir/file_output.rhe4.bin",
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/thirdparty/ffs/ffs/ffs/output_dir/context_test_output.rhe5-64.bin",
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/thirdparty/ffs/ffs/ffs/output_dir/context_test_output.fc14-64.bin",
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/thirdparty/ffs/ffs/ffs/output_dir/context_test_output.ia64.bin",
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/thirdparty/ffs/ffs/ffs/output_dir/context_test_output.darwin10.8.bin",
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/thirdparty/ffs/ffs/ffs/output_dir/index_output.ppc64.bin",
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/thirdparty/ffs/ffs/ffs/output_dir/file_output.rhe5-64-icc.bin",
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/thirdparty/ffs/ffs/ffs/output_dir/index_output.darwin10.10.bin",
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/thirdparty/ffs/ffs/ffs/output_dir/context_test_output.rhe4-64.bin",
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/thirdparty/ffs/ffs/ffs/output_dir/file_output.osx.bin",
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/thirdparty/ffs/ffs/ffs/output_dir/file_output.sun8-64.bin",
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/thirdparty/ffs/ffs/ffs/output_dir/context_test_output.fc16-64.bin",
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/thirdparty/ffs/ffs/ffs/output_dir/context_test_output.fc14.bin",
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/thirdparty/ffs/ffs/ffs/output_dir/file_output.rhe4-64.bin",
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/thirdparty/ffs/ffs/ffs/output_dir/file_output.fc14-64.bin",
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/thirdparty/ffs/ffs/ffs/output_dir/context_test_output.sun8.bin",
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/thirdparty/ffs/ffs/ffs/output_dir/file_output.rhe6-64.bin",
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/thirdparty/ffs/ffs/ffs/output_dir/context_test_output.sun8-64.bin",
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/thirdparty/ffs/ffs/ffs/output_dir/context_test_output.ub12-64.bin",
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/thirdparty/ffs/ffs/ffs/output_dir/index_output.osx.bin",
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/thirdparty/ffs/ffs/ffs/output_dir/file_output.fc16-64.bin",
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/thirdparty/ffs/ffs/ffs/output_dir/file_output.sun8.bin",
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/thirdparty/ffs/ffs/ffs/output_dir/context_test_output.powerpc64.bin",
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/thirdparty/ffs/ffs/ffs/output_dir/context_test_output.rhe4.bin",
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/thirdparty/ffs/ffs/ffs/output_dir/context_test_output.osx.bin",
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/thirdparty/ffs/ffs/ffs/output_dir/file_output.fc14.bin",
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/thirdparty/ffs/ffs/ffs/output_dir/file_output.powerpc64.bin",
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/thirdparty/ffs/ffs/ffs/output_dir/context_test_output.rhe5.bin",
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/thirdparty/ffs/ffs/ffs/output_dir/file_output.ub12-64.bin",
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/thirdparty/ffs/ffs/ffs/output_dir/context_test_output.arm6l.bin",
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/thirdparty/ffs/ffs/ffs/output_dir/file_output.darwin10.8.bin",
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/thirdparty/ffs/ffs/cod/tests/test_output/t5/t5.sun8-64",
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/thirdparty/ffs/ffs/cod/tests/test_output/t5/t5.ia64",
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/thirdparty/ffs/ffs/cod/tests/test_output/t5/t5.rhe4-64",
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/thirdparty/ffs/ffs/cod/tests/test_output/t5/t5.sun8",
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/thirdparty/ffs/ffs/cod/tests/test_output/t5/t5.rhe4",
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/thirdparty/ffs/ffs/cod/tests/test_output/t1/t1.rhe4-64",
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/thirdparty/ffs/ffs/cod/tests/test_output/t1/t1.ia64",
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/thirdparty/ffs/ffs/cod/tests/test_output/t1/t1.sun8-64",
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/thirdparty/ffs/ffs/cod/tests/test_output/t1/t1.sun8",
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/thirdparty/ffs/ffs/cod/tests/test_output/t1/t1.rhe4",
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/thirdparty/ffs/ffs/doc/server.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/thirdparty/ffs/ffs/doc/string_mem.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/thirdparty/ffs/ffs/doc/manual.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/thirdparty/ffs/ffs/doc/format_server.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/thirdparty/ffs/ffs/doc/server.png",
        "/tmp/vanessa/spack-stage/spack-stage-adios2-2.7.0-ciiozdunx2o5oxjxqxuffr4hjzd3745y/spack-src/thirdparty/KWSys/adios2sys/testSystemTools.bin"
    ],
    "total_files": 2276
}