{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-aml-develop-cv7ollgxg6bb6fttdvwjglm3o7ugpu4m/spack-src/configure.ac": "# See semver.org for version info\n#################################\n\nm4_define([VERSION_MAJOR], [0])\nm4_define([VERSION_MINOR], [1])\nm4_define([VERSION_PATCH], [0])\nm4_define([VERSION_STRING], VERSION_MAJOR.VERSION_MINOR.VERSION_PATCH)\n\n# Init build tools\n##################\n\nAC_INIT([aml],[VERSION_STRING],[swann@anl.gov])\nAC_CONFIG_SRCDIR([include/aml.h])\nAC_CONFIG_AUX_DIR([m4])\nAC_CONFIG_MACRO_DIR([m4])\n# automake should fail on any error\nAM_INIT_AUTOMAKE([-Wall -Werror foreign subdir-objects 1.12])\n\n# Detect features\n#################\n\nAC_LANG([C])\nAC_USE_SYSTEM_EXTENSIONS\nAC_PROG_CC\nAC_PROG_CC_C99\nAM_PROG_CC_C_O\nAC_PROG_CPP\nAC_TYPE_SIZE_T\nAC_TYPE_INTPTR_T\nAC_PROG_AWK\nAC_PROG_GREP\nAM_PROG_AR\nLT_INIT\n\n# Extra dependencies, configuration\n###################################\n\nAC_SUBST([PACKAGE_VERSION_MAJOR],[VERSION_MAJOR])\nAC_SUBST([PACKAGE_VERSION_MINOR],[VERSION_MINOR])\nAC_SUBST([PACKAGE_VERSION_PATCH],[VERSION_PATCH])\n\n# support for testing with valgrind\n###################################\n\nAX_VALGRIND_DFLT([helgrind], [off])\nAX_VALGRIND_DFLT([drd], [off])\nAX_VALGRIND_DFLT([sgcheck], [off])\nAX_VALGRIND_CHECK\n\nAC_OPENMP\nAC_CHECK_HEADERS([math.h],,[AC_MSG_ERROR([AML requires libmath headers.])])\nAC_CHECK_LIB(m, sqrt,,[AC_MSG_ERROR([AML requires libmath.])])\n\nAC_CHECK_LIB(dl, dlopen)\n\n# add pthread support.\n######################\n\n# doc in m4/ax_pthread.m4. Defines automake PTHREAD_CFLAGS and PTHREAD_LIBS\nAX_PTHREAD([],[AC_MSG_ERROR([Cannot find how to compile with pthreads.])])\nCC=\"$PTHREAD_CC\"\n\n# NUMA support\n##############\n\nAC_CHECK_HEADERS([numa.h],,[AC_MSG_ERROR([AML requires libnuma headers.])])\nAC_CHECK_HEADERS([numaif.h],,[AC_MSG_ERROR([AML requires libnuma headers.])])\nAC_CHECK_LIB(numa, mbind,,[AC_MSG_ERROR([AML requires libnuma.])])\n\n# Hwloc support\n###############\n\nPKG_CHECK_MODULES([HWLOC], \\\n                  [hwloc >= 2.1],   \\\n                  [have_hwloc=1], \\\n                  [have_hwloc=0])\nif test \"$have_hwloc\" == \"1\"; then\n   AC_DEFINE([HAVE_HWLOC], [1], \"hwloc library with ABI > 2.0 is installed.\")\nfi\nAM_CONDITIONAL([HAVE_HWLOC], [test \"$have_hwloc\" = \"1\"])\nAC_DEFINE_UNQUOTED([HAVE_HWLOC], [$have_hwloc], [Whether aml support hwloc library calls.])\nAC_SUBST([HAVE_HWLOC],[$have_hwloc])\n\n# OpenCL support\n###############\n\nPKG_CHECK_MODULES([OpenCL], \\\n                  [OpenCL >= 2.1],   \\\n                  [have_opencl=1], \\\n                  [have_opencl=0])\nif test \"$have_opencl\" == \"1\"; then\n   AC_DEFINE([HAVE_OPENCL], [1], \"OpenCL library with ABI >= 2.1 is installed.\")\nfi\nAM_CONDITIONAL([HAVE_OPENCL], [test \"$have_opencl\" = \"1\"])\nAC_DEFINE_UNQUOTED([HAVE_OPENCL], [$have_opencl], [Whether aml support opencl library calls.])\nAC_SUBST([HAVE_OPENCL],[$have_opencl])\n\n# check doxygen + sphinx for documentation build\n################################################\n\nAC_ARG_ENABLE(docs,\n[AS_HELP_STRING([--enable-docs],\n\t\t[Generate full html documentation (default is no).])],\n[docs=true],[docs=false])\n\nif [[ \"x$docs\" = xtrue ]]; then\n\tAC_CHECK_PROG([DOXYGEN], [doxygen], [doxygen], [no])\n\tif [[ \"x$DOXYGEN\" == xno ]]; then\n\t\tAC_MSG_ERROR([Doxygen not found])\n\tfi\n\n\tAC_CHECK_PROG([SPHINXBUILD], [sphinx-build], [sphinx-build], [no])\n\tif [[ \"x$SPHINXBUILD\" == xno ]]; then\n\t\tAC_MSG_ERROR([Sphinx not found])\n\tfi\nfi\nAM_CONDITIONAL([BUILD_DOCS],[ test \"x$docs\" == xtrue ])\n\n# check CUDA compiler and libraries\n#####################################\n\nhave_cuda=0\n\nAC_ARG_WITH([cuda],\n\t[AS_HELP_STRING([--with-cuda@<:@=yes|no|DIR@:>@],\n\t\t[support cuda inside the library (default is check)])],\n\t[\n\tif [[ \"x$withval\" = xno ]]; then\n\t\twant_cuda=\"no\"\n\telif [[ \"x$withval\" = xyes ]]; then\n\t\twant_cuda=\"yes\"\n\t\tcuda_home_path=\"$CUDA_HOME\"\n\telse\n\t\twant_cuda=\"yes\"\n\t\tcuda_home_path=$withval\n\tfi\n\t],\n\t[\n\t\twant_cuda=\"check\"\n\t\tcuda_home_path=\"$CUDA_HOME\"\n\t])\n\nif [[ \"x$want_cuda\" != xno ]]; then\n\n\tAC_MSG_NOTICE([starting checks for CUDA])\n\tif [[ -n \"$cuda_home_path\" ]]; then\n\t\tnvcc_search_dirs=\"$PATH$PATH_SEPARATOR$cuda_home_path/bin\"\n\telse\n\t\tnvcc_search_dirs=\"$PATH\"\n\tfi\n\n\tAC_PATH_PROG([NVCC], [nvcc], [], [$nvcc_search_dirs])\n\tif [[ -n \"$NVCC\" ]]; then\n\t\thave_nvcc=\"yes\"\n\tfi\nelse\n\tAC_MSG_NOTICE([will not check for CUDA])\nfi\n\nif [[ \"x$have_nvcc\" = xyes ]]; then\n\n\tif [[ -n \"$cuda_home_path\" ]]; then\n\t\tCUDA_CFLAGS=\"-I$cuda_home_path/include\"\n\t\tCUDA_LIBS=\"-L$cuda_home_path/lib64 -lcudart\"\n\telse\n\t\tCUDA_CFLAGS=\"-I/usr/local/cuda/include\"\n\t\tCUDA_LIBS=\"-L/usr/local/cuda/lib64 -lcudart\"\n\tfi\n\tsaved_LIBS=$LIBS\n\tsaved_CFLAGS=$CFLAGS\n\tLIBS=\"$LIBS $CUDA_LIBS\"\n\tCFLAGS=\"$CFLAGS $CUDA_CFLAGS\"\n\tAC_CHECK_HEADER([cuda.h],,\n\t\t\t[AC_MSG_ERROR([could not find cuda.h])])\n\tAC_CHECK_HEADER([cuda_runtime.h],,\n\t\t\t[AC_MSG_ERROR([could not find cuda_runtime.h])])\n\tAC_CHECK_LIB(cudart, cudaLaunchHostFunc,,\n\t\t     AC_MSG_ERROR([could not find cudart library]))\n\tLIBS=$saved_LIBS\n\tCFLAGS=$saved_CFLAGS\n\thave_cuda=1\nfi\n\nAC_DEFINE_UNQUOTED([HAVE_CUDA], [$have_cuda], [Whether aml support cuda library calls.])\nAC_SUBST([HAVE_CUDA],[$have_cuda])\nAM_CONDITIONAL([HAVE_CUDA], [ test \"$have_cuda\" == \"1\" ])\nAC_SUBST(CUDA_CFLAGS)\nAC_SUBST(CUDA_LIBS)\nAC_SUBST(NVCC)\n\n# Support for cross-compiling check programs\nAM_EXTRA_RECURSIVE_TARGETS([check-programs])\n\n# Output\n########\n\nAC_CONFIG_SUBDIRS([excit])\n\nAC_CONFIG_HEADERS([include/config.h])\n\nAC_CONFIG_FILES([Makefile\n\t\t src/Makefile\n\t\t include/Makefile\n\t\t tests/Makefile\n\t\t doc/tutorials/Makefile\n\t\t doc/Makefile\n\t\t doc/tutorials/hello_world/Makefile\n\t\t doc/tutorials/area/Makefile\n\t\t doc/tutorials/dma/Makefile\n\t\t doc/tutorials/layouts/Makefile\n\t\t benchmarks/Makefile\n\t\t aml.pc\n\t\t include/aml/utils/version.h\n\t\t include/aml/utils/features.h])\nAC_OUTPUT\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-aml-develop-cv7ollgxg6bb6fttdvwjglm3o7ugpu4m/spack-src/.git/objects/pack/pack-331f10ca6f392992dbfb15d3c1ce2725dbaced29.pack",
        "/tmp/vanessa/spack-stage/spack-stage-aml-develop-cv7ollgxg6bb6fttdvwjglm3o7ugpu4m/spack-src/.git/objects/pack/pack-331f10ca6f392992dbfb15d3c1ce2725dbaced29.idx",
        "/tmp/vanessa/spack-stage/spack-stage-aml-develop-cv7ollgxg6bb6fttdvwjglm3o7ugpu4m/spack-src/doc/img/dma.png",
        "/tmp/vanessa/spack-stage/spack-stage-aml-develop-cv7ollgxg6bb6fttdvwjglm3o7ugpu4m/spack-src/doc/img/reshape.png",
        "/tmp/vanessa/spack-stage/spack-stage-aml-develop-cv7ollgxg6bb6fttdvwjglm3o7ugpu4m/spack-src/doc/img/building-blocks-diagram.png",
        "/tmp/vanessa/spack-stage/spack-stage-aml-develop-cv7ollgxg6bb6fttdvwjglm3o7ugpu4m/spack-src/doc/img/area.png",
        "/tmp/vanessa/spack-stage/spack-stage-aml-develop-cv7ollgxg6bb6fttdvwjglm3o7ugpu4m/spack-src/doc/img/scratch.png",
        "/tmp/vanessa/spack-stage/spack-stage-aml-develop-cv7ollgxg6bb6fttdvwjglm3o7ugpu4m/spack-src/doc/img/layout.png"
    ],
    "total_files": 170
}