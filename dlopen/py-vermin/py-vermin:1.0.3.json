{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-py-vermin-1.0.3-5fvhmbb6b54nbpmqwiht4rk6reqbsb3w/spack-src/vermin/rules.py": "def bp(name, config):\n  \"\"\"Checking if backport is used.\"\"\"\n  return name in config.backports()\n\n# Module requirements: name -> min version per major or None if N.A.\ndef MOD_REQS(config):\n  return {\n    \"BaseHTTPServer\": ((2, 0), None),\n    \"ConfigParser\": ((2, 0), None),\n    \"DocXMLRPCServer\": ((2, 3), None),\n    \"HTMLParser\": ((2, 2), None),\n    \"Queue\": ((2, 0), None),\n    \"SimpleXMLRPCServer\": ((2, 2), None),\n    \"SocketServer\": ((2, 0), None),\n    \"Tkinter\": ((2, 0), None),\n    \"__builtin__\": ((2, 0), None),\n    \"__future__\": ((2, 1), (3, 0)),\n    \"_ast\": ((2, 5), (3, 0)),\n    \"_dummy_thread\": (None, (3, 0)),\n    \"_markupbase\": (None, (3, 0)),\n    \"_winreg\": ((2, 0), None),\n    \"abc\": ((2, 6), (3, 0)),\n    \"argparse\": ((2, 7), (3, 2)) if not bp(\"argparse\", config) else ((2, 3), (3, 1)),\n    \"ast\": ((2, 6), (3, 0)),\n    \"asyncio\": (None, (3, 4)),\n    \"bisect\": ((2, 1), (3, 0)),\n    \"builtins\": (None, (3, 0)),\n    \"bz2\": ((2, 3), (3, 0)),\n    \"cProfile\": ((2, 5), (3, 0)),\n    \"cgitb\": ((2, 2), (3, 0)),\n    \"collections\": ((2, 4), (3, 0)),\n    \"collections.abc\": (None, (3, 3)),\n    \"concurrent.futures\": (None, (3, 2)),\n    \"configparser\": (None if not bp(\"configparser\", config) else (2, 6), (3, 0)),\n    \"contextlib\": ((2, 5), (3, 0)),\n    \"contextvars\": (None, (3, 7)),\n    \"cookielib\": ((2, 4), None),\n    \"copy_reg\": ((2, 0), None),\n    \"copyreg\": (None, (3, 0)),\n    \"csv\": ((2, 3), (3, 0)),\n    \"ctypes\": ((2, 5), (3, 0)),\n    \"dataclasses\": (None, (3, 7)),\n    \"datetime\": ((2, 3), (3, 0)),\n    \"dbm.dumb\": (None, (3, 0)),\n    \"dbm.gnu\": (None, (3, 0)),\n    \"dbm.io\": (None, (3, 0)),\n    \"dbm.ndbm\": (None, (3, 0)),\n    \"dbm.os\": (None, (3, 0)),\n    \"dbm.struct\": (None, (3, 0)),\n    \"dbm.sys\": (None, (3, 0)),\n    \"dbm.whichdb\": (None, (3, 0)),\n    \"decimal\": ((2, 4), (3, 0)),\n    \"difflib\": ((2, 1), (3, 0)),\n    \"dummy_thread\": ((2, 3), None),\n    \"dummy_threading\": ((2, 3), None),\n    \"email\": ((2, 2), (3, 0)),\n    \"email.charset\": ((2, 2), (3, 0)),\n    \"email.contentmanager\": (None, (3, 4)),\n    \"email.header\": ((2, 2), (3, 0)),\n    \"email.headerregistry\": (None, (3, 3)),\n    \"email.policy\": (None, (3, 3)),\n    \"encodings.idna\": ((2, 3), (3, 0)),\n    \"encodings.utf_8_sig\": ((2, 5), (3, 0)),\n    \"ensurepip\": ((2, 7), (3, 4)),\n    \"enum\": (None, (3, 4)) if not bp(\"enum\", config) else ((2, 4), (3, 3)),\n    \"faulthandler\": (None, (3, 3)) if not bp(\"faulthandler\", config) else ((2, 6), (3, 0)),\n    \"fractions\": ((2, 6), (3, 0)),\n    \"functools\": ((2, 5), (3, 0)),\n    \"future_builtins\": ((2, 6), None),\n    \"graphlib\": (None, (3, 9)),\n    \"hashlib\": ((2, 5), (3, 0)),\n    \"heapq\": ((2, 3), (3, 0)),\n    \"hmac\": ((2, 2), (3, 0)),\n    \"hotshot\": ((2, 2), None),\n    \"html\": (None, (3, 0)),\n    \"htmlentitydefs\": ((2, 0), None),\n    \"http\": (None, (3, 0)),\n    \"http.cookiejar\": (None, (3, 0)),\n    \"importlib\": ((2, 7), (3, 1)),\n    \"importlib.metadata\": (None, (3, 8)),\n    \"importlib.resources\": (None, (3, 7)),\n    \"inspect\": ((2, 1), (3, 0)),\n    \"io\": ((2, 6), (3, 0)),\n    \"ipaddress\": (None, (3, 3)),\n    \"itertools\": ((2, 3), (3, 0)),\n    \"json\": ((2, 6), (3, 0)),\n    \"logging\": ((2, 3), (3, 0)),\n    \"lzma\": (None, (3, 3)),\n    \"markupbase\": ((2, 0), None),\n    \"md5\": ((2, 0), None),\n    \"modulefinder\": ((2, 3), (3, 0)),\n    \"msilib\": ((2, 5), (3, 0)),\n    \"multiprocessing\": ((2, 6), (3, 0)),\n    \"multiprocessing.shared_memory\": (None, (3, 8)),\n    \"new\": ((2, 0), None),\n    \"numbers\": ((2, 6), (3, 0)),\n    \"optparse\": ((2, 3), (3, 0)),\n    \"ossaudiodev\": ((2, 3), (3, 0)),\n    \"pathlib\": (None, (3, 4)),\n    \"pickletools\": ((2, 3), (3, 0)),\n    \"pkgutil\": ((2, 3), (3, 0)),\n    \"platform\": ((2, 3), (3, 0)),\n    \"popen2\": ((2, 0), None),\n    \"pydoc\": ((2, 1), (3, 0)),\n    \"queue\": (None, (3, 0)),\n    \"repr\": ((2, 0), None),\n    \"reprlib\": (None, (3, 0)),\n    \"runpy\": ((2, 5), (3, 0)),\n    \"secrets\": (None, (3, 6)),\n    \"selectors\": (None, (3, 4)),\n    \"sets\": ((2, 3), None),\n    \"socketserver\": (None, (3, 0)),\n    \"spwd\": ((2, 5), (3, 0)),\n    \"sqlite3\": ((2, 5), (3, 0)),\n    \"ssl\": ((2, 6), (3, 0)),\n    \"statistics\": (None, (3, 4)),\n    \"stringprep\": ((2, 3), (3, 0)),\n    \"subprocess\": ((2, 4), (3, 0)),\n    \"sysconfig\": ((2, 7), (3, 2)),\n    \"tarfile\": ((2, 3), (3, 0)),\n    \"test.support.bytecode_helper\": (None, (3, 9)),\n    \"test.support.socket_helper\": (None, (3, 9)),\n    \"textwrap\": ((2, 3), (3, 0)),\n    \"timeit\": ((2, 3), (3, 0)),\n    \"tkinter\": (None, (3, 0)),\n    \"tracemalloc\": (None, (3, 4)),\n    \"typing\": (None, (3, 5)) if not bp(\"typing\", config) else ((2, 7), (3, 4)),\n    \"unittest\": ((2, 1), (3, 0)),\n    \"unittest.mock\": (None, (3, 3)),\n    \"urllib2\": ((2, 0), None),\n    \"urlparse\": ((2, 0), None),\n    \"uuid\": ((2, 5), (3, 0)),\n    \"venv\": (None, (3, 3)),\n    \"warnings\": ((2, 1), (3, 0)),\n    \"weakref\": ((2, 1), (3, 0)),\n    \"winreg\": (None, (3, 0)),\n    \"wsgiref\": ((2, 5), (3, 0)),\n    \"xml.etree.ElementInclude\": ((2, 5), (3, 0)),\n    \"xml.etree.ElementTree\": ((2, 5), (3, 0)),\n    \"xmlrpc\": (None, (3, 0)),\n    \"xmlrpc.client\": (None, (3, 0)),\n    \"xmlrpc.server\": (None, (3, 0)),\n    \"xmlrpclib\": ((2, 2), None),\n    \"zipapp\": (None, (3, 5)),\n    \"zipimport\": ((2, 3), (3, 0)),\n    \"zoneinfo\": (None, (3, 9)),\n   }\n\n# Module member requirements: member -> (module, requirements)\ndef MOD_MEM_REQS(config):\n  return {\n    # Builtin classes\n    \"bool\": ((2, 2), (3, 0)),\n    \"bytearray\": ((2, 6), (3, 0)),\n    \"frozenset\": ((2, 4), (3, 0)),\n    \"memoryview\": ((2, 7), (3, 0)),\n    \"object\": ((2, 2), (3, 0)),\n    \"set\": ((2, 4), (3, 0)),\n    \"dict\": ((2, 2), (3, 0)),\n    \"type\": ((2, 2), (3, 0)),\n    \"long\": ((2, 0), None),\n\n    # Classes\n    \"ConfigParser.ConfigParser\": ((2, 3), None),\n    \"ConfigParser.RawConfigParser\": ((2, 3), None),\n    \"ConfigParser.SafeConfigParser\": ((2, 3), None),\n    \"Queue.LifoQueue\": ((2, 6), None),\n    \"Queue.PriorityQueue\": ((2, 6), None),\n    \"SimpleXMLRPCServer.CGIXMLRPCRequestHandler\": ((2, 3), None),\n    \"abc.ABC\": (None, (3, 4)),\n    \"asyncio.BufferedProtocol\": (None, (3, 7)),\n    \"asyncio.MultiLoopChildWatcher\": (None, (3, 8)),\n    \"asyncio.PidfdChildWatcher\": (None, (3, 9)),\n    \"asyncio.ThreadedChildWatcher\": (None, (3, 8)),\n    \"calendar.Calendar\": ((2, 5), (3, 0)),\n    \"calendar.HTMLCalendar\": ((2, 5), (3, 0)),\n    \"calendar.LocaleHTMLCalendar\": ((2, 5), (3, 0)),\n    \"calendar.LocaleTextCalendar\": ((2, 5), (3, 0)),\n    \"calendar.TextCalendar\": ((2, 5), (3, 0)),\n    \"codecs.IncrementalEncoder\": ((2, 5), (3, 0)),\n    \"collections.ChainMap\": (None, (3, 3)),\n    \"collections.Counter\": ((2, 7), (3, 1)),\n    \"collections.OrderedDict\": ((2, 7), (3, 1)),\n    \"collections.UserDict\": (None, (3, 0)),\n    \"collections.UserList\": (None, (3, 0)),\n    \"collections.UserString\": (None, (3, 0)),\n    \"collections.abc.AsyncGenerator\": (None, (3, 6)),\n    \"collections.abc.AsyncIterable\": (None, (3, 5)),\n    \"collections.abc.AsyncIterator\": (None, (3, 5)),\n    \"collections.abc.Awaitable\": (None, (3, 5)),\n    \"collections.abc.Collection\": (None, (3, 6)),\n    \"collections.abc.Coroutine\": (None, (3, 5)),\n    \"collections.abc.Generator\": (None, (3, 5)),\n    \"collections.abc.Reversible\": (None, (3, 6)),\n    \"collections.defaultdict\": ((2, 5), (3, 0)),\n    \"collections.deque\": ((2, 4), (3, 0)),\n    \"collections.namedtuple\": ((2, 6), (3, 0)),\n    \"contextlib.AbstractAsyncContextManager\": (None, (3, 7)),\n    \"contextlib.AbstractContextManager\": (None, (3, 6)),\n    \"contextlib.AsyncExitStack\": (None, (3, 7)),\n    \"contextlib.ContextDecorator\": (None, (3, 2)),\n    \"contextlib.ExitStack\": (None, (3, 3)),\n    \"csv.unix_dialect\": (None, (3, 2)),\n    \"ctypes.c_bool\": ((2, 6), (3, 0)),\n    \"ctypes.c_longdouble\": ((2, 6), (3, 0)),\n    \"ctypes.c_ssize_t\": ((2, 7), (3, 2)),\n    \"datetime.timezone\": (None, (3, 2)),\n    \"difflib.HtmlDiff\": ((2, 4), (3, 0)),\n    \"dis.Bytecode\": (None, (3, 4)),\n    \"dis.Instruction\": (None, (3, 4)),\n    \"doctest.DocTest\": ((2, 4), (3, 0)),\n    \"doctest.DocTestFinder\": ((2, 4), (3, 0)),\n    \"doctest.DocTestParser\": ((2, 4), (3, 0)),\n    \"doctest.DocTestRunner\": ((2, 4), (3, 0)),\n    \"doctest.Example\": ((2, 4), (3, 0)),\n    \"doctest.OutputChecker\": ((2, 4), (3, 0)),\n    \"email.generator.BytesGenerator\": (None, (3, 2)),\n    \"email.generator.DecodedGenerator\": ((2, 2), (3, 0)),\n    \"email.mime.application.MIMEApplication\": ((2, 5), (3, 0)),\n    \"email.mime.multipart.MIMEMultipart\": ((2, 2), (3, 0)),\n    \"email.mime.nonmultipart.MIMENonMultipart\": ((2, 2), (3, 0)),\n    \"email.parser.BytesFeedParser\": (None, (3, 2)),\n    \"email.parser.BytesHeaderParser\": (None, (3, 3)),\n    \"email.parser.BytesParser\": (None, (3, 2)),\n    \"email.parser.FeedParser\": ((2, 4), (3, 0)),\n    \"email.policy.EmailPolicy\": (None, (3, 3)),\n    \"enum.Flag\": (None, (3, 6)),\n    \"enum.IntFlag\": (None, (3, 6)),\n    \"enum.auto\": (None, (3, 6)),\n    \"ftplib.FTP_TLS\": ((2, 7), (3, 2)),\n    \"functools.partialmethod\": (None, (3, 4)),\n    \"http.HTTPStatus\": (None, (3, 5)),\n    \"http.server.ThreadingHTTPServer\": (None, (3, 7)),\n    \"httplib.HTTPConnection\": ((2, 0), None),\n    \"httplib.HTTPResponse\": ((2, 0), None),\n    \"httplib.HTTPSConnection\": ((2, 0), None),\n    \"imaplib.IMAP4_stream\": ((2, 3), (3, 0)),\n    \"imp.NullImporter\": ((2, 5), (3, 0)),\n    \"importlib.abc.FileLoader\": (None, (3, 3)),\n    \"importlib.abc.MetaPathFinder\": (None, (3, 3)),\n    \"importlib.abc.PathEntryFinder\": (None, (3, 3)),\n    \"importlib.abc.ResourceReader\": (None, (3, 7)),\n    \"importlib.abc.Traversable\": (None, (3, 9)),\n    \"importlib.abc.TraversableReader\": (None, (3, 9)),\n    \"importlib.machinery.ExtensionFileLoader\": (None, (3, 3)),\n    \"importlib.machinery.FileFinder\": (None, (3, 3)),\n    \"importlib.machinery.ModuleSpec\": (None, (3, 4)),\n    \"importlib.machinery.SourceFileLoader\": (None, (3, 3)),\n    \"importlib.machinery.SourcelessFileLoader\": (None, (3, 3)),\n    \"importlib.machinery.WindowsRegistryFinder\": (None, (3, 3)),\n    \"importlib.util.LazyLoader\": (None, (3, 5)),\n    \"inspect.BoundArguments\": (None, (3, 3)),\n    \"inspect.Parameter\": (None, (3, 3)),\n    \"inspect.Signature\": (None, (3, 3)),\n    \"logging.LoggerAdapter\": ((2, 6), (3, 0)),\n    \"logging.NullHandler\": ((2, 7), (3, 1)),\n    \"logging.handlers.QueueHandler\": (None, (3, 2)),\n    \"logging.handlers.QueueListener\": (None, (3, 2)),\n    \"logging.handlers.WatchedFileHandler\": ((2, 6), (3, 0)),\n    \"multiprocessing.Barrier\": (None, (3, 3)),\n    \"nntplib.NNTP_SSL\": (None, (3, 2)),\n    \"os.DirEntry\": (None, (3, 5)),\n    \"os.PathLike\": (None, (3, 6)),\n    \"os.sched_param\": (None, (3, 3)),\n    \"os.terminal_size\": (None, (3, 3)),\n    \"pickle.PickleBuffer\": (None, (3, 8)),\n    \"pkgutil.ModuleInfo\": (None, (3, 6)),\n    \"plistlib.UID\": (None, (3, 8)),\n    \"popen2.Popen4\": ((2, 0), None),\n    \"poplib.POP3_SSL\": ((2, 4), (3, 0)),\n    \"pstats.FunctionProfile\": (None, (3, 9)),\n    \"pstats.Stats\": ((2, 3), (3, 0)),\n    \"pstats.StatsProfile\": (None, (3, 9)),\n    \"py_compile.PycInvalidationMode\": (None, (3, 7)),\n    \"queue.SimpleQueue\": (None, (3, 7)),\n    \"random.SystemRandom\": ((2, 4), (3, 0)),\n    \"selectors.DevpollSelector\": (None, (3, 5)),\n    \"smtplib.LMTP\": ((2, 6), (3, 0)),\n    \"smtplib.SMTP_SSL\": ((2, 6), (3, 0)),\n    \"ssl.AlertDescription\": (None, (3, 6)),\n    \"ssl.MemoryBIO\": (None, (3, 5)),\n    \"ssl.Options\": (None, (3, 6)),\n    \"ssl.SSLContext\": ((2, 7), (3, 2)),\n    \"ssl.SSLErrorNumber\": (None, (3, 6)),\n    \"ssl.SSLObject\": (None, (3, 5)),\n    \"ssl.SSLSession\": (None, (3, 6)),\n    \"ssl.TLSVersion\": (None, (3, 7)),\n    \"statistics.NormalDist\": (None, (3, 8)),\n    \"string.Formatter\": ((2, 6), (3, 0)),\n    \"string.Template\": ((2, 4), (3, 0)),\n    \"struct.Struct\": ((2, 5), (3, 0)),\n    \"subprocess.CompletedProcess\": (None, (3, 5)),\n    \"test.support.EnvironmentVarGuard\": ((2, 6), (3, 0)),\n    \"test.support.TransientResource\": ((2, 6), (3, 0)),\n    \"test.support.WarningsRecorder\": ((2, 6), (3, 0)),\n    \"threading.Barrier\": (None, (3, 2)),\n    \"threading.local\": ((2, 4), (3, 0)),\n    \"time.struct_time\": ((2, 2), (3, 0)),\n    \"traceback.FrameSummary\": (None, (3, 5)),\n    \"traceback.StackSummary\": (None, (3, 5)),\n    \"traceback.TracebackException\": (None, (3, 5)),\n    \"tracemalloc.DomainFilter\": (None, (3, 6)),\n    \"types.MappingProxyType\": (None, (3, 3)),\n    \"types.SimpleNamespace\": (None, (3, 3)),\n    \"typing.AsyncContextManager\": (None, (3, 6)),\n    \"typing.AsyncGenerator\": (None, (3, 6)),\n    \"typing.AsyncIterable\": (None, (3, 5)),\n    \"typing.AsyncIterator\": (None, (3, 5)),\n    \"typing.Awaitable\": (None, (3, 5)),\n    \"typing.ChainMap\": (None, (3, 6)),\n    \"typing.ClassVar\": (None if not bp(\"typing\", config) else (2, 7), (3, 5)),\n    \"typing.Collection\": (None, (3, 6)),\n    \"typing.ContextManager\": (None if not bp(\"typing\", config) else (2, 7), (3, 5)),\n    \"typing.Coroutine\": (None if not bp(\"typing\", config) else (2, 7), (3, 5)),\n    \"typing.Counter\": (None if not bp(\"typing\", config) else (2, 7), (3, 5)),\n    \"typing.DefaultDict\": (None if not bp(\"typing\", config) else (2, 7), (3, 5)),\n    \"typing.Deque\": (None if not bp(\"typing\", config) else (2, 7), (3, 5)),\n    \"typing.OrderedDict\": (None if not bp(\"typing\", config) else (2, 7), (3, 7)),\n    \"typing.Protocol\": (None, (3, 8)),\n    \"typing.SupportsIndex\": (None, (3, 8)),\n    \"typing.Text\": (None if not bp(\"typing\", config) else (2, 7), (3, 5)),\n    \"typing.Type\": (None if not bp(\"typing\", config) else (2, 7), (3, 5)),\n    \"typing.TypedDict\": (None, (3, 8)),\n    \"unittest.IsolatedAsyncioTestCase\": (None, (3, 8)),\n    \"unittest.TextTestResult\": ((2, 7), (3, 2)),\n    \"unittest.mock.AsyncMock\": (None, (3, 8)),\n    \"urllib.parse.DefragResult\": (None, (3, 2)),\n    \"urllib.parse.DefragResultBytes\": (None, (3, 2)),\n    \"urllib.parse.ParseResultBytes\": (None, (3, 2)),\n    \"urllib.parse.SplitResultBytes\": (None, (3, 2)),\n    \"urllib.request.DataHandler\": (None, (3, 4)),\n    \"urllib.request.HTTPPasswordMgrWithPriorAuth\": (None, (3, 5)),\n    \"urllib2.HTTPCookieProcessor\": ((2, 4), None),\n    \"urllib2.HTTPErrorProcessor\": ((2, 4), None),\n    \"uuid.SafeUUID\": (None, (3, 7)),\n    \"warnings.catch_warnings\": ((2, 6), (3, 0)),\n    \"weakref.WeakMethod\": (None, (3, 4)),\n    \"weakref.WeakSet\": ((2, 7), (3, 0)),\n    \"weakref.finalize\": (None, (3, 4)),\n    \"wsgiref.handlers.IISCGIHandler\": (None, (3, 2)),\n    \"xml.etree.ElementTree.C14NWriterTarget\": (None, (3, 8)),\n    \"xml.etree.ElementTree.XMLPullParser\": (None, (3, 4)),\n    \"xmlrpclib.MultiCall\": ((2, 4), None),\n    \"zipfile.Path\": (None, (3, 8)),\n    \"zipimport.zipimporter\": ((2, 7), (3, 0)),\n\n    # Builtin exceptions\n    \"BaseException\": ((2, 5), (3, 0)),\n    \"BlockingIOError\": (None, (3, 3)),\n    \"BrokenPipeError\": (None, (3, 3)),\n    \"BytesWarning\": ((2, 6), (3, 0)),\n    \"ChildProcessError\": (None, (3, 3)),\n    \"ConnectionAbortedError\": (None, (3, 3)),\n    \"ConnectionError\": (None, (3, 3)),\n    \"ConnectionRefusedError\": (None, (3, 3)),\n    \"ConnectionResetError\": (None, (3, 3)),\n    \"FileExistsError\": (None, (3, 3)),\n    \"FileNotFoundError\": (None, (3, 3)),\n    \"GeneratorExit\": ((2, 5), (3, 0)),\n    \"ImportWarning\": ((2, 5), (3, 0)),\n    \"InterruptedError\": (None, (3, 3)),\n    \"IsADirectoryError\": (None, (3, 3)),\n    \"ModuleNotFoundError\": (None, (3, 6)),\n    \"NotADirectoryError\": (None, (3, 3)),\n    \"PermissionError\": (None, (3, 3)),\n    \"ProcessLookupError\": (None, (3, 3)),\n    \"RecursionError\": (None, (3, 5)),\n    \"ReferenceError\": ((2, 2), (3, 0)),\n    \"ResourceWarning\": (None, (3, 2)),\n    \"StopAsyncIteration\": (None, (3, 5)),\n    \"StopIteration\": ((2, 2), (3, 0)),\n    \"TimeoutError\": (None, (3, 3)),\n    \"UnicodeDecodeError\": ((2, 3), (3, 0)),\n    \"UnicodeEncodeError\": ((2, 3), (3, 0)),\n    \"UnicodeTranslateError\": ((2, 3), (3, 0)),\n    \"UnicodeWarning\": ((2, 5), (3, 0)),\n\n    # Exceptions\n    \"ConfigParser.InterpolationMissingOptionError\": ((2, 3), None),\n    \"ConfigParser.InterpolationSyntaxError\": ((2, 3), None),\n    \"concurrent.futures.BrokenExecutor\": (None, (3, 7)),\n    \"concurrent.futures.InvalidStateError\": (None, (3, 8)),\n    \"concurrent.futures.process.BrokenProcessPool\": (None, (3, 3)),\n    \"concurrent.futures.thread.BrokenThreadPool\": (None, (3, 7)),\n    \"email.errors.CloseBoundaryNotFoundDefect\": (None, (3, 3)),\n    \"email.errors.FirstHeaderLineIsContinuationDefect\": ((2, 4), (3, 0)),\n    \"email.errors.MalformedHeaderDefect\": ((2, 4), (3, 0)),\n    \"email.errors.MisplacedEnvelopeHeaderDefect\": ((2, 4), (3, 0)),\n    \"email.errors.MissingHeaderBodySeparatorDefect\": (None, (3, 3)),\n    \"email.errors.MultipartInvariantViolationDefect\": ((2, 4), (3, 0)),\n    \"email.errors.NoBoundaryInMultipartDefect\": ((2, 4), (3, 0)),\n    \"email.errors.StartBoundaryNotFoundDefect\": ((2, 4), (3, 0)),\n    \"gzip.BadGzipFile\": (None, (3, 8)),\n    \"htmllib.HTMLParseError\": ((2, 4), None),\n    \"httplib.BadStatusLine\": ((2, 0), None),\n    \"httplib.CannotSendHeader\": ((2, 0), None),\n    \"httplib.CannotSendRequest\": ((2, 0), None),\n    \"httplib.HTTPException\": ((2, 0), None),\n    \"httplib.ImproperConnectionState\": ((2, 0), None),\n    \"httplib.IncompleteRead\": ((2, 0), None),\n    \"httplib.InvalidURL\": ((2, 3), None),\n    \"httplib.NotConnected\": ((2, 0), None),\n    \"httplib.ResponseNotReady\": ((2, 0), None),\n    \"httplib.UnimplementedFileMode\": ((2, 0), None),\n    \"httplib.UnknownProtocol\": ((2, 0), None),\n    \"httplib.UnknownTransferEncoding\": ((2, 0), None),\n    \"json.JSONDecodeError\": (None, (3, 5)),\n    \"sgmllib.SGMLParseError\": ((2, 1), None),\n    \"shutil.Error\": ((2, 3), (3, 0)),\n    \"shutil.SameFileError\": (None, (3, 4)),\n    \"smtplib.SMTPNotSupportedError\": (None, (3, 5)),\n    \"socket.timeout\": ((2, 3), (3, 0)),\n    \"ssl.SSLCertVerificationError\": (None, (3, 7)),\n    \"ssl.SSLEOFError\": ((2, 7), (3, 3)),\n    \"ssl.SSLSyscallError\": ((2, 7), (3, 3)),\n    \"ssl.SSLWantReadError\": ((2, 7), (3, 3)),\n    \"ssl.SSLWantWriteError\": ((2, 7), (3, 3)),\n    \"ssl.SSLZeroReturnError\": ((2, 7), (3, 3)),\n    \"subprocess.SubprocessError\": (None, (3, 3)),\n    \"subprocess.TimeoutExpired\": (None, (3, 3)),\n    \"tarfile.HeaderError\": ((2, 6), (3, 0)),\n    \"threading.BrokenBarrierError\": (None, (3, 2)),\n    \"unittest.SkipTest\": ((2, 7), (3, 1)),\n    \"urllib.ContentTooShortError\": ((2, 6), None),\n    \"xml.dom.DOMException\": ((2, 1), (3, 0)),\n    \"xml.dom.DomstringSizeErr\": ((2, 1), (3, 0)),\n    \"xml.dom.HierarchyRequestErr\": ((2, 1), (3, 0)),\n    \"xml.dom.IndexSizeErr\": ((2, 1), (3, 0)),\n    \"xml.dom.InuseAttributeErr\": ((2, 1), (3, 0)),\n    \"xml.dom.InvalidAccessErr\": ((2, 1), (3, 0)),\n    \"xml.dom.InvalidCharacterErr\": ((2, 1), (3, 0)),\n    \"xml.dom.InvalidModificationErr\": ((2, 1), (3, 0)),\n    \"xml.dom.InvalidStateErr\": ((2, 1), (3, 0)),\n    \"xml.dom.NamespaceErr\": ((2, 1), (3, 0)),\n    \"xml.dom.NoDataAllowedErr\": ((2, 1), (3, 0)),\n    \"xml.dom.NoModificationAllowedErr\": ((2, 1), (3, 0)),\n    \"xml.dom.NotFoundErr\": ((2, 1), (3, 0)),\n    \"xml.dom.NotSupportedErr\": ((2, 1), (3, 0)),\n    \"xml.dom.SyntaxErr\": ((2, 1), (3, 0)),\n    \"xml.dom.WrongDocumentErr\": ((2, 1), (3, 0)),\n    \"zipfile.BadZipFile\": (None, (3, 2)),\n\n    # Builtin functions\n    # Notes:\n    #  file() is kept at 2.0 instead of 2.2, where the function was introduced, because file objects\n    #  have existed since 2.0 and we don't do type deduction. Therefore analysis on file objects\n    #  wouldn't be detected, like `open(..).xreadlines()`, but using `file(..).xreadlines()` would\n    #  trigger rule \"file.xreadlines\" 2.1. So if file() was kept at 2.2 it would introduce conflict.\n    \"all\": ((2, 5), (3, 0)),\n    \"any\": ((2, 5), (3, 0)),\n    \"basestring\": ((2, 3), None),\n    \"bin\": ((2, 6), (3, 0)),\n    \"breakpoint\": (None, (3, 7)),\n    \"bytearray.hex\": (None, (3, 5)),\n    \"bytearray.isascii\": (None, (3, 7)),\n    \"bytearray.maketrans\": (None, (3, 1)),\n    \"bytearray.removeprefix\": (None, (3, 9)),\n    \"bytearray.removesuffix\": (None, (3, 9)),\n    \"bytes.hex\": (None, (3, 5)),\n    \"bytes.isascii\": (None, (3, 7)),\n    \"bytes.maketrans\": (None, (3, 1)),\n    \"bytes.removeprefix\": (None, (3, 9)),\n    \"bytes.removesuffix\": (None, (3, 9)),\n    \"callable\": ((2, 0), (3, 2)),\n    \"classmethod\": ((2, 2), (3, 0)),\n    \"dict.fromkeys\": ((2, 3), (3, 0)),\n    \"dict.has_key\": ((2, 2), None),\n    \"dict.iteritems\": ((2, 2), None),\n    \"dict.iterkeys\": ((2, 2), None),\n    \"dict.itervalues\": ((2, 2), None),\n    \"dict.pop\": ((2, 3), (3, 0)),\n    \"dict.viewitems\": ((2, 7), None),\n    \"dict.viewkeys\": ((2, 7), None),\n    \"dict.viewvalues\": ((2, 7), None),\n    \"enumerate\": ((2, 3), (3, 0)),\n    \"file\": ((2, 0), None),  # Kept at 2.0 on purpose (see note above).\n    \"file.next\": ((2, 3), None),\n    \"file.xreadlines\": ((2, 1), None),\n    \"float.as_integer_ratio\": ((2, 6), (3, 0)),\n    \"float.fromhex\": ((2, 6), (3, 0)),\n    \"float.hex\": ((2, 6), (3, 0)),\n    \"float.is_integer\": ((2, 6), (3, 0)),\n    \"format\": ((2, 6), (3, 0)),\n    \"frozenset.isdisjoint\": ((2, 6), (3, 0)),\n    \"help\": ((2, 2), (3, 0)),\n    \"int.as_integer_ratio\": (None, (3, 8)),\n    \"int.bit_length\": ((2, 7), (3, 1)),\n    \"int.from_bytes\": (None, (3, 2)),\n    \"int.to_bytes\": (None, (3, 2)),\n    \"iter\": ((2, 2), (3, 0)),\n    \"list.clear\": (None, (3, 0)),\n    \"list.copy\": (None, (3, 0)),\n    \"long.bit_length\": ((2, 7), None),\n    \"memoryview.cast\": (None, (3, 3)),\n    \"memoryview.hex\": (None, (3, 5)),\n    \"memoryview.release\": (None, (3, 2)),\n    \"memoryview.toreadonly\": (None, (3, 8)),\n    \"next\": ((2, 6), (3, 0)),\n    \"property\": ((2, 2), (3, 0)),\n    \"property.deleter\": ((2, 6), (3, 0)),\n    \"property.getter\": ((2, 6), (3, 0)),\n    \"property.setter\": ((2, 6), (3, 0)),\n    \"reversed\": ((2, 4), (3, 0)),\n    \"set.isdisjoint\": ((2, 6), (3, 0)),\n    \"slice.indices\": ((2, 3), (3, 0)),\n    \"sorted\": ((2, 4), (3, 0)),\n    \"staticmethod\": ((2, 2), (3, 0)),\n    \"str.casefold\": (None, (3, 3)),\n    \"str.decode\": ((2, 2), None),\n    \"str.format\": ((2, 6), (3, 0)),\n    \"str.format_map\": (None, (3, 2)),\n    \"str.isascii\": (None, (3, 7)),\n    \"str.isdecimal\": (None, (3, 0)),\n    \"str.isidentifier\": (None, (3, 0)),\n    \"str.isnumeric\": (None, (3, 0)),\n    \"str.isprintable\": (None, (3, 0)),\n    \"str.maketrans\": (None, (3, 0)),\n    \"str.partition\": ((2, 5), (3, 0)),\n    \"str.removeprefix\": (None, (3, 9)),\n    \"str.removesuffix\": (None, (3, 9)),\n    \"str.rpartition\": ((2, 5), (3, 0)),\n    \"str.rsplit\": ((2, 4), (3, 0)),\n    \"str.zfill\": ((2, 2), (3, 0)),\n    \"sum\": ((2, 3), (3, 0)),\n    \"super\": ((2, 2), (3, 0)),\n    \"unichr\": ((2, 0), None),\n    \"unicode\": ((2, 0), None),\n    \"unicode.isdecimal\": ((2, 0), None),\n    \"unicode.isnumeric\": ((2, 0), None),\n\n    # Builtin constants\n    \"memoryview.c_contiguous\": (None, (3, 3)),\n    \"memoryview.contiguous\": (None, (3, 3)),\n    \"memoryview.f_contiguous\": (None, (3, 3)),\n    \"memoryview.nbytes\": (None, (3, 3)),\n    \"memoryview.obj\": (None, (3, 3)),\n\n    # Functions\n    \"ConfigParser.SafeConfigParser.set\": ((2, 4), None),\n    \"EasyDialogs.GetArgv\": ((2, 0), None),\n    \"Queue.Queue.join\": ((2, 5), None),\n    \"Queue.Queue.task_done\": ((2, 5), None),\n    \"SimpleHTTPServer.SimpleHTTPRequestHandler.do_GET\": ((2, 5), None),\n    \"SimpleXMLRPCServer.SimpleXMLRPCServer.register_introspection_functions\": ((2, 3), None),\n    \"SocketServer.BaseServer.server_close\": ((2, 6), None),\n    \"SocketServer.BaseServer.shutdown\": ((2, 6), None),\n    \"Tkinter.Tcl\": ((2, 4), None),\n    \"_thread.get_native_id\": (None, (3, 8)),\n    \"_winreg.CreateKeyEx\": ((2, 7), None),\n    \"_winreg.DeleteKeyEx\": ((2, 7), None),\n    \"_winreg.ExpandEnvironmentStrings\": ((2, 6), None),\n    \"abc.get_cache_token\": (None, (3, 4)),\n    \"argparse.ArgumentParser.parse_intermixed_args\": (None, (3, 7)),\n    \"argparse.ArgumentParser.parse_known_intermixed_args\": (None, (3, 7)),\n    \"array.array.frombytes\": (None, (3, 2)),\n    \"array.array.tobytes\": (None, (3, 2)),\n    \"ast.get_source_segment\": (None, (3, 8)),\n    \"ast.unparse\": (None, (3, 9)),\n    \"asyncio.AbstractChildWatcher.is_active\": (None, (3, 8)),\n    \"asyncio.Future.get_loop\": (None, (3, 7)),\n    \"asyncio.Handle.cancelled\": (None, (3, 7)),\n    \"asyncio.ReadTransport.is_reading\": (None, (3, 7)),\n    \"asyncio.Server.get_loop\": (None, (3, 7)),\n    \"asyncio.Server.is_serving\": (None, (3, 7)),\n    \"asyncio.Server.serve_forever\": (None, (3, 7)),\n    \"asyncio.Server.start_serving\": (None, (3, 7)),\n    \"asyncio.StreamReader.readuntil\": (None, (3, 5)),\n    \"asyncio.StreamWriter.is_closing\": (None, (3, 7)),\n    \"asyncio.StreamWriter.wait_closed\": (None, (3, 7)),\n    \"asyncio.Task.get_coro\": (None, (3, 8)),\n    \"asyncio.Task.get_name\": (None, (3, 8)),\n    \"asyncio.Task.set_name\": (None, (3, 8)),\n    \"asyncio.TimerHandle.when\": (None, (3, 7)),\n    \"asyncio.WriteTransport.get_write_buffer_limits\": (None, (3, 4)),\n    \"asyncio.all_tasks\": (None, (3, 7)),\n    \"asyncio.create_task\": (None, (3, 7)),\n    \"asyncio.current_task\": (None, (3, 7)),\n    \"asyncio.get_running_loop\": (None, (3, 7)),\n    \"asyncio.isfuture\": (None, (3, 5)),\n    \"asyncio.loop.connect_accepted_socket\": (None, (3, 5)),\n    \"asyncio.loop.create_future\": (None, (3, 5)),\n    \"asyncio.loop.get_exception_handler\": (None, (3, 5)),\n    \"asyncio.loop.sendfile\": (None, (3, 7)),\n    \"asyncio.loop.shutdown_asyncgens\": (None, (3, 6)),\n    \"asyncio.loop.shutdown_default_executor\": (None, (3, 9)),\n    \"asyncio.loop.sock_recv_into\": (None, (3, 7)),\n    \"asyncio.loop.sock_sendfile\": (None, (3, 7)),\n    \"asyncio.loop.start_tls\": (None, (3, 7)),\n    \"asyncio.run\": (None, (3, 7)),\n    \"asyncio.run_coroutine_threadsafe\": (None, (3, 5)),\n    \"asyncio.to_thread\": (None, (3, 9)),\n    \"audioop.byteswap\": (None, (3, 4)),\n    \"base64.a85decode\": (None, (3, 4)),\n    \"base64.a85encode\": (None, (3, 4)),\n    \"base64.b85decode\": (None, (3, 4)),\n    \"base64.b85encode\": (None, (3, 4)),\n    \"base64.decodebytes\": (None, (3, 1)),\n    \"base64.encodebytes\": (None, (3, 1)),\n    \"bdb.Bdb.get_bpbynumber\": (None, (3, 2)),\n    \"bdb.Breakpoint.bpformat\": (None, (3, 2)),\n    \"bz2.BZ2File.fileno\": (None, (3, 3)),\n    \"bz2.BZ2File.peek\": (None, (3, 3)),\n    \"bz2.BZ2File.read1\": (None, (3, 3)),\n    \"bz2.BZ2File.readable\": (None, (3, 3)),\n    \"bz2.BZ2File.readinto\": (None, (3, 3)),\n    \"bz2.BZ2File.seekable\": (None, (3, 3)),\n    \"bz2.BZ2File.writable\": (None, (3, 3)),\n    \"bz2.open\": (None, (3, 3)),\n    \"calendar.Calendar.itermonthdays3\": (None, (3, 7)),\n    \"calendar.Calendar.itermonthdays4\": (None, (3, 7)),\n    \"cgi.FieldStorage.getfirst\": ((2, 2), (3, 0)),\n    \"cgi.FieldStorage.getlist\": ((2, 2), (3, 0)),\n    \"cmath.isclose\": (None, (3, 5)),\n    \"cmath.isfinite\": (None, (3, 2)),\n    \"cmath.isinf\": ((2, 6), (3, 0)),\n    \"cmath.isnan\": ((2, 6), (3, 0)),\n    \"cmath.phase\": ((2, 6), (3, 0)),\n    \"cmath.polar\": ((2, 6), (3, 0)),\n    \"cmath.rect\": ((2, 6), (3, 0)),\n    \"codecs.decode\": ((2, 4), (3, 0)),\n    \"codecs.encode\": ((2, 4), (3, 0)),\n    \"codecs.getincrementaldecoder\": ((2, 5), (3, 0)),\n    \"codecs.getincrementalencoder\": ((2, 5), (3, 0)),\n    \"codecs.iterdecode\": ((2, 5), (3, 0)),\n    \"codecs.iterencode\": ((2, 5), (3, 0)),\n    \"codecs.namereplace_errors\": (None, (3, 5)),\n    \"collections.Counter.subtract\": (None, (3, 2)),\n    \"collections.OrderedDict.move_to_end\": (None, (3, 2)),\n    \"collections.UserString.__getnewargs__\": (None, (3, 5)),\n    \"collections.UserString.__rmod__\": (None, (3, 5)),\n    \"collections.UserString.casefold\": (None, (3, 5)),\n    \"collections.UserString.format_map\": (None, (3, 5)),\n    \"collections.UserString.isprintable\": (None, (3, 5)),\n    \"collections.UserString.maketrans\": (None, (3, 5)),\n    \"collections.abc.MutableSequence.clear\": (None, (3, 3)),\n    \"collections.abc.MutableSequence.copy\": (None, (3, 3)),\n    \"collections.deque.copy\": (None, (3, 5)),\n    \"collections.deque.count\": ((2, 7), (3, 2)),\n    \"collections.deque.index\": (None, (3, 5)),\n    \"collections.deque.insert\": (None, (3, 5)),\n    \"collections.deque.remove\": ((2, 5), (3, 0)),\n    \"collections.deque.reverse\": ((2, 7), (3, 2)),\n    \"compileall.compile_file\": ((2, 7), (3, 2)),\n    \"configparser.ConfigParser.read_dict\": (None, (3, 2)),\n    \"configparser.ConfigParser.read_file\": (None, (3, 2)),\n    \"configparser.ConfigParser.read_string\": (None, (3, 2)),\n    \"contextlib.nullcontext\": (None, (3, 7)),\n    \"contextlib.redirect_stderr\": (None, (3, 5)),\n    \"contextlib.redirect_stdout\": (None, (3, 4)),\n    \"contextlib.suppress\": (None, (3, 4)),\n    \"crypt.mksalt\": (None, (3, 3)),\n    \"csv.DictWriter.writeheader\": ((2, 7), (3, 2)),\n    \"csv.field_size_limit\": ((2, 5), (3, 0)),\n    \"ctypes._CData.from_buffer\": ((2, 6), (3, 0)),\n    \"ctypes._CData.from_buffer_copy\": ((2, 6), (3, 0)),\n    \"ctypes.get_errno\": ((2, 6), (3, 0)),\n    \"ctypes.get_last_error\": ((2, 6), (3, 0)),\n    \"ctypes.set_errno\": ((2, 6), (3, 0)),\n    \"ctypes.set_last_error\": ((2, 6), (3, 0)),\n    \"ctypes.util.find_msvcrt\": ((2, 6), (3, 0)),\n    \"curses.get_escdelay\": (None, (3, 9)),\n    \"curses.get_tabsize\": (None, (3, 9)),\n    \"curses.set_escdelay\": (None, (3, 9)),\n    \"curses.set_tabsize\": (None, (3, 9)),\n    \"curses.unget_wch\": (None, (3, 3)),\n    \"curses.update_lines_cols\": (None, (3, 5)),\n    \"curses.window.get_wch\": (None, (3, 3)),\n    \"datetime.date.fromisocalendar\": (None, (3, 8)),\n    \"datetime.date.fromisoformat\": (None, (3, 7)),\n    \"datetime.datetime.fromisocalendar\": (None, (3, 8)),\n    \"datetime.datetime.fromisoformat\": (None, (3, 7)),\n    \"datetime.datetime.strptime\": ((2, 5), (3, 0)),\n    \"datetime.datetime.timestamp\": (None, (3, 3)),\n    \"datetime.time.fromisoformat\": (None, (3, 7)),\n    \"datetime.timedelta.total_seconds\": ((2, 7), (3, 2)),\n    \"decimal.Context.clear_traps\": (None, (3, 3)),\n    \"decimal.Context.create_decimal_from_float\": ((2, 7), (3, 1)),\n    \"decimal.Decimal.as_integer_ratio\": (None, (3, 6)),\n    \"decimal.Decimal.canonical\": ((2, 6), (3, 0)),\n    \"decimal.Decimal.compare_signal\": ((2, 6), (3, 0)),\n    \"decimal.Decimal.compare_total\": ((2, 6), (3, 0)),\n    \"decimal.Decimal.compare_total_mag\": ((2, 6), (3, 0)),\n    \"decimal.Decimal.conjugate\": ((2, 6), (3, 0)),\n    \"decimal.Decimal.copy_abs\": ((2, 6), (3, 0)),\n    \"decimal.Decimal.copy_negate\": ((2, 6), (3, 0)),\n    \"decimal.Decimal.copy_sign\": ((2, 6), (3, 0)),\n    \"decimal.Decimal.exp\": ((2, 6), (3, 0)),\n    \"decimal.Decimal.fma\": ((2, 6), (3, 0)),\n    \"decimal.Decimal.from_float\": ((2, 7), (3, 1)),\n    \"decimal.Decimal.is_canonical\": ((2, 6), (3, 0)),\n    \"decimal.Decimal.is_finite\": ((2, 6), (3, 0)),\n    \"decimal.Decimal.is_infinite\": ((2, 6), (3, 0)),\n    \"decimal.Decimal.is_nan\": ((2, 6), (3, 0)),\n    \"decimal.Decimal.is_normal\": ((2, 6), (3, 0)),\n    \"decimal.Decimal.is_qnan\": ((2, 6), (3, 0)),\n    \"decimal.Decimal.is_signed\": ((2, 6), (3, 0)),\n    \"decimal.Decimal.is_snan\": ((2, 6), (3, 0)),\n    \"decimal.Decimal.is_subnormal\": ((2, 6), (3, 0)),\n    \"decimal.Decimal.is_zero\": ((2, 6), (3, 0)),\n    \"decimal.Decimal.ln\": ((2, 6), (3, 0)),\n    \"decimal.Decimal.log10\": ((2, 6), (3, 0)),\n    \"decimal.Decimal.logb\": ((2, 6), (3, 0)),\n    \"decimal.Decimal.logical_and\": ((2, 6), (3, 0)),\n    \"decimal.Decimal.logical_invert\": ((2, 6), (3, 0)),\n    \"decimal.Decimal.logical_or\": ((2, 6), (3, 0)),\n    \"decimal.Decimal.logical_xor\": ((2, 6), (3, 0)),\n    \"decimal.Decimal.max_mag\": ((2, 6), (3, 0)),\n    \"decimal.Decimal.min_mag\": ((2, 6), (3, 0)),\n    \"decimal.Decimal.next_minus\": ((2, 6), (3, 0)),\n    \"decimal.Decimal.next_plus\": ((2, 6), (3, 0)),\n    \"decimal.Decimal.next_toward\": ((2, 6), (3, 0)),\n    \"decimal.Decimal.number_class\": ((2, 6), (3, 0)),\n    \"decimal.Decimal.radix\": ((2, 6), (3, 0)),\n    \"decimal.Decimal.rotate\": ((2, 6), (3, 0)),\n    \"decimal.Decimal.scaleb\": ((2, 6), (3, 0)),\n    \"decimal.Decimal.shift\": ((2, 6), (3, 0)),\n    \"decimal.Decimal.to_integral_exact\": ((2, 6), (3, 0)),\n    \"decimal.Decimal.to_integral_value\": ((2, 6), (3, 0)),\n    \"decimal.localcontext\": ((2, 5), (3, 0)),\n    \"difflib.SequenceMatcher.get_grouped_opcodes\": ((2, 3), (3, 0)),\n    \"difflib.context_diff\": ((2, 3), (3, 0)),\n    \"difflib.diff_bytes\": (None, (3, 5)),\n    \"difflib.unified_diff\": ((2, 3), (3, 0)),\n    \"dis.code_info\": (None, (3, 2)),\n    \"dis.get_instructions\": (None, (3, 4)),\n    \"dis.show_code\": (None, (3, 2)),\n    \"dis.stack_effect\": (None, (3, 4)),\n    \"doctest.DocFileSuite\": ((2, 4), (3, 0)),\n    \"doctest.DocTestSuite\": ((2, 3), (3, 0)),\n    \"doctest.debug\": ((2, 3), (3, 0)),\n    \"doctest.debug_src\": ((2, 4), (3, 0)),\n    \"doctest.register_optionflag\": ((2, 4), (3, 0)),\n    \"doctest.script_from_examples\": ((2, 4), (3, 0)),\n    \"doctest.set_unittest_reportflags\": ((2, 4), (3, 0)),\n    \"doctest.testfile\": ((2, 4), (3, 0)),\n    \"doctest.testsource\": ((2, 3), (3, 0)),\n    \"email.generator.Generator.clone\": ((2, 2), (3, 0)),\n    \"email.generator.Generator.flatten\": ((2, 2), (3, 0)),\n    \"email.message.EmailMessage.get_content_disposition\": (None, (3, 5)),\n    \"email.message.Message.__bytes__\": (None, (3, 4)),\n    \"email.message.Message.as_bytes\": (None, (3, 4)),\n    \"email.message.Message.del_param\": ((2, 2), (3, 0)),\n    \"email.message.Message.get_charset\": ((2, 2), (3, 0)),\n    \"email.message.Message.get_content_charset\": ((2, 2), (3, 0)),\n    \"email.message.Message.get_content_disposition\": (None, (3, 5)),\n    \"email.message.Message.get_content_maintype\": ((2, 2), (3, 0)),\n    \"email.message.Message.get_content_subtype\": ((2, 2), (3, 0)),\n    \"email.message.Message.get_content_type\": ((2, 2), (3, 0)),\n    \"email.message.Message.get_default_type\": ((2, 2), (3, 0)),\n    \"email.message.Message.replace_header\": ((2, 2), (3, 0)),\n    \"email.message.Message.set_charset\": ((2, 2), (3, 0)),\n    \"email.message.Message.set_default_type\": ((2, 2), (3, 0)),\n    \"email.message.Message.set_param\": ((2, 2), (3, 0)),\n    \"email.message.Message.set_type\": ((2, 2), (3, 0)),\n    \"email.message_from_binary_file\": (None, (3, 2)),\n    \"email.message_from_bytes\": (None, (3, 2)),\n    \"email.utils.format_datetime\": (None, (3, 3)),\n    \"email.utils.formatdate\": ((2, 4), (3, 0)),\n    \"email.utils.localtime\": (None, (3, 3)),\n    \"email.utils.parsedate_to_datetime\": (None, (3, 3)),\n    \"filecmp.clear_cache\": (None, (3, 4)),\n    \"fileinput.fileno\": ((2, 5), (3, 0)),\n    \"fileinput.hook_compressed\": ((2, 5), (3, 0)),\n    \"fileinput.hook_encoded\": ((2, 5), (3, 0)),\n    \"fnmatch.filter\": ((2, 2), (3, 0)),\n    \"fractions.Fraction.as_integer_ratio\": (None, (3, 8)),\n    \"ftplib.FTP.mlsd\": (None, (3, 3)),\n    \"ftplib.FTP_TLS.ccc\": (None, (3, 3)),\n    \"functools.cmp_to_key\": ((2, 7), (3, 2)),\n    \"functools.reduce\": ((2, 6), (3, 0)),\n    \"gc.freeze\": (None, (3, 7)),\n    \"gc.get_count\": ((2, 5), (3, 0)),\n    \"gc.get_freeze_count\": (None, (3, 7)),\n    \"gc.get_objects\": ((2, 2), (3, 0)),\n    \"gc.get_referents\": ((2, 3), (3, 0)),\n    \"gc.get_referrers\": ((2, 2), (3, 0)),\n    \"gc.get_stats\": (None, (3, 4)),\n    \"gc.is_finalized\": (None, (3, 9)),\n    \"gc.is_tracked\": ((2, 7), (3, 1)),\n    \"gc.unfreeze\": (None, (3, 7)),\n    \"getopt.gnu_getopt\": ((2, 3), (3, 0)),\n    \"gettext.GNUTranslations.lgettext\": ((2, 4), (3, 0)),\n    \"gettext.GNUTranslations.lngettext\": ((2, 4), (3, 0)),\n    \"gettext.GNUTranslations.ngettext\": ((2, 3), (3, 0)),\n    \"gettext.GNUTranslations.npgettext\": (None, (3, 8)),\n    \"gettext.GNUTranslations.pgettext\": (None, (3, 8)),\n    \"gettext.GNUTranslations.ungettext\": ((2, 3), None),\n    \"gettext.NullTranslations.lgettext\": ((2, 4), (3, 0)),\n    \"gettext.NullTranslations.lngettext\": ((2, 4), (3, 0)),\n    \"gettext.NullTranslations.ngettext\": ((2, 3), (3, 0)),\n    \"gettext.NullTranslations.npgettext\": (None, (3, 8)),\n    \"gettext.NullTranslations.output_charset\": ((2, 4), (3, 0)),\n    \"gettext.NullTranslations.pgettext\": (None, (3, 8)),\n    \"gettext.NullTranslations.set_output_charset\": ((2, 4), (3, 0)),\n    \"gettext.NullTranslations.ungettext\": ((2, 3), None),\n    \"gettext.bind_textdomain_codeset\": ((2, 4), (3, 0)),\n    \"gettext.dngettext\": ((2, 3), (3, 0)),\n    \"gettext.dnpgettext\": (None, (3, 8)),\n    \"gettext.dpgettext\": (None, (3, 8)),\n    \"gettext.ldgettext\": ((2, 4), (3, 0)),\n    \"gettext.ldngettext\": ((2, 4), (3, 0)),\n    \"gettext.lgettext\": ((2, 4), (3, 0)),\n    \"gettext.lngettext\": ((2, 4), (3, 0)),\n    \"gettext.ngettext\": ((2, 3), (3, 0)),\n    \"gettext.npgettext\": (None, (3, 8)),\n    \"gettext.pgettext\": (None, (3, 8)),\n    \"glob.escape\": (None, (3, 4)),\n    \"glob.iglob\": ((2, 5), (3, 0)),\n    \"gzip.GzipFile.peek\": (None, (3, 2)),\n    \"gzip.compress\": (None, (3, 2)),\n    \"gzip.decompress\": (None, (3, 2)),\n    \"hashlib.blake2b\": (None, (3, 6)),\n    \"hashlib.blake2s\": (None, (3, 6)),\n    \"hashlib.pbkdf2_hmac\": ((2, 7), (3, 4)),\n    \"hashlib.scrypt\": (None, (3, 6)),\n    \"hashlib.sha3_224\": (None, (3, 6)),\n    \"hashlib.sha3_256\": (None, (3, 6)),\n    \"hashlib.sha3_384\": (None, (3, 6)),\n    \"hashlib.sha3_512\": (None, (3, 6)),\n    \"hashlib.shake_128\": (None, (3, 6)),\n    \"hashlib.shake_256\": (None, (3, 6)),\n    \"heapq.heappushpop\": ((2, 6), (3, 0)),\n    \"heapq.merge\": ((2, 6), (3, 0)),\n    \"heapq.nlargest\": ((2, 4), (3, 0)),\n    \"heapq.nsmallest\": ((2, 4), (3, 0)),\n    \"hmac.compare_digest\": ((2, 7), (3, 3)),\n    \"hmac.digest\": (None, (3, 7)),\n    \"html.escape\": (None, (3, 2)),\n    \"html.unescape\": (None, (3, 4)),\n    \"http.client.HTTPConnection.set_debuglevel\": (None, (3, 1)),\n    \"http.client.HTTPConnection.set_tunnel\": (None, (3, 2)),\n    \"http.client.HTTPResponse.readinto\": (None, (3, 3)),\n    \"http.server.BaseHTTPRequestHandler.flush_headers\": (None, (3, 3)),\n    \"http.server.BaseHTTPRequestHandler.handle_expect_100\": (None, (3, 2)),\n    \"http.server.BaseHTTPRequestHandler.send_response_only\": (None, (3, 2)),\n    \"httplib.HTTPConnection.set_tunnel\": ((2, 7), None),\n    \"httplib.HTTPResponse.getheaders\": ((2, 4), None),\n    \"imaplib.IMAP4.deleteacl\": ((2, 4), (3, 0)),\n    \"imaplib.IMAP4.enable\": (None, (3, 5)),\n    \"imaplib.IMAP4.getannotation\": ((2, 5), (3, 0)),\n    \"imaplib.IMAP4.getquota\": ((2, 3), (3, 0)),\n    \"imaplib.IMAP4.getquotaroot\": ((2, 3), (3, 0)),\n    \"imaplib.IMAP4.login_cram_md5\": ((2, 3), (3, 0)),\n    \"imaplib.IMAP4.myrights\": ((2, 4), (3, 0)),\n    \"imaplib.IMAP4.namespace\": ((2, 3), (3, 0)),\n    \"imaplib.IMAP4.proxyauth\": ((2, 3), (3, 0)),\n    \"imaplib.IMAP4.setannotation\": ((2, 5), (3, 0)),\n    \"imaplib.IMAP4.setquota\": ((2, 3), (3, 0)),\n    \"imaplib.IMAP4.starttls\": (None, (3, 2)),\n    \"imaplib.IMAP4.thread\": ((2, 4), (3, 0)),\n    \"imaplib.IMAP4.unselect\": (None, (3, 9)),\n    \"imp.acquire_lock\": ((2, 3), (3, 0)),\n    \"imp.cache_from_source\": (None, (3, 2)),\n    \"imp.get_tag\": (None, (3, 2)),\n    \"imp.release_lock\": ((2, 3), (3, 0)),\n    \"imp.source_from_cache\": (None, (3, 2)),\n    \"importlib.abc.InspectLoader.exec_module\": (None, (3, 4)),\n    \"importlib.abc.InspectLoader.source_to_code\": (None, (3, 4)),\n    \"importlib.abc.Loader.create_module\": (None, (3, 4)),\n    \"importlib.abc.Loader.exec_module\": (None, (3, 4)),\n    \"importlib.abc.Loader.module_repr\": (None, (3, 3)),\n    \"importlib.abc.MetaPathFinder.find_spec\": (None, (3, 4)),\n    \"importlib.abc.PathEntryFinder.find_spec\": (None, (3, 4)),\n    \"importlib.abc.SourceLoader.exec_module\": (None, (3, 4)),\n    \"importlib.abc.SourceLoader.path_stats\": (None, (3, 3)),\n    \"importlib.find_loader\": (None, (3, 3)),\n    \"importlib.invalidate_caches\": (None, (3, 3)),\n    \"importlib.machinery.BuiltinImporter.create_module\": (None, (3, 5)),\n    \"importlib.machinery.BuiltinImporter.exec_module\": (None, (3, 5)),\n    \"importlib.machinery.ExtensionFileLoader.create_module\": (None, (3, 5)),\n    \"importlib.machinery.ExtensionFileLoader.exec_module\": (None, (3, 5)),\n    \"importlib.machinery.ExtensionFileLoader.get_filename\": (None, (3, 4)),\n    \"importlib.machinery.FileFinder.find_spec\": (None, (3, 4)),\n    \"importlib.machinery.FrozenImporter.create_module\": (None, (3, 4)),\n    \"importlib.machinery.FrozenImporter.exec_module\": (None, (3, 4)),\n    \"importlib.machinery.PathFinder.find_spec\": (None, (3, 4)),\n    \"importlib.machinery.all_suffixes\": (None, (3, 3)),\n    \"importlib.reload\": (None, (3, 4)),\n    \"importlib.resources.files\": (None, (3, 9)),\n    \"importlib.util.cache_from_source\": (None, (3, 4)),\n    \"importlib.util.decode_source\": (None, (3, 4)),\n    \"importlib.util.find_spec\": (None, (3, 4)),\n    \"importlib.util.module_from_spec\": (None, (3, 5)),\n    \"importlib.util.resolve_name\": (None, (3, 3)),\n    \"importlib.util.source_from_cache\": (None, (3, 4)),\n    \"importlib.util.source_hash\": (None, (3, 7)),\n    \"importlib.util.spec_from_file_location\": (None, (3, 4)),\n    \"importlib.util.spec_from_loader\": (None, (3, 4)),\n    \"inspect.BoundArguments.apply_defaults\": (None, (3, 5)),\n    \"inspect.Signature.from_callable\": (None, (3, 5)),\n    \"inspect.cleandoc\": ((2, 6), (3, 0)),\n    \"inspect.getattr_static\": (None, (3, 2)),\n    \"inspect.getcallargs\": ((2, 7), (3, 2)),\n    \"inspect.getclosurevars\": (None, (3, 3)),\n    \"inspect.getcoroutinelocals\": (None, (3, 5)),\n    \"inspect.getcoroutinestate\": (None, (3, 5)),\n    \"inspect.getgeneratorlocals\": (None, (3, 3)),\n    \"inspect.getgeneratorstate\": (None, (3, 2)),\n    \"inspect.isabstract\": ((2, 6), (3, 0)),\n    \"inspect.isasyncgen\": (None, (3, 6)),\n    \"inspect.isasyncgenfunction\": (None, (3, 6)),\n    \"inspect.isawaitable\": (None, (3, 5)),\n    \"inspect.iscoroutine\": (None, (3, 5)),\n    \"inspect.iscoroutinefunction\": (None, (3, 5)),\n    \"inspect.isdatadescriptor\": ((2, 3), (3, 0)),\n    \"inspect.isgenerator\": ((2, 6), (3, 0)),\n    \"inspect.isgeneratorfunction\": ((2, 6), (3, 0)),\n    \"inspect.isgetsetdescriptor\": ((2, 5), (3, 0)),\n    \"inspect.ismemberdescriptor\": ((2, 5), (3, 0)),\n    \"inspect.signature\": (None, (3, 3)),\n    \"inspect.unwrap\": (None, (3, 4)),\n    \"io.BufferedIOBase.detach\": ((2, 7), (3, 1)),\n    \"io.BufferedIOBase.readinto1\": (None, (3, 5)),\n    \"io.BytesIO.getbuffer\": (None, (3, 2)),\n    \"io.BytesIO.readinto1\": (None, (3, 5)),\n    \"io.TextIOBase.detach\": ((2, 7), (3, 1)),\n    \"io.TextIOWrapper.reconfigure\": (None, (3, 7)),\n    \"io.open_code\": (None, (3, 8)),\n    \"ipaddress.IPv4Network.subnet_of\": (None, (3, 7)),\n    \"ipaddress.IPv4Network.supernet_of\": (None, (3, 7)),\n    \"itertools.accumulate\": (None, (3, 2)),\n    \"itertools.combinations\": ((2, 6), (3, 0)),\n    \"itertools.combinations_with_replacement\": ((2, 7), (3, 1)),\n    \"itertools.compress\": ((2, 7), (3, 1)),\n    \"itertools.groupby\": ((2, 4), (3, 0)),\n    \"itertools.izip_longest\": ((2, 6), None),\n    \"itertools.permutations\": ((2, 6), (3, 0)),\n    \"itertools.product\": ((2, 6), (3, 0)),\n    \"itertools.tee\": ((2, 4), (3, 0)),\n    \"keyword.issoftkeyword\": (None, (3, 9)),\n    \"linecache.lazycache\": (None, (3, 5)),\n    \"locale.currency\": ((2, 5), (3, 0)),\n    \"locale.delocalize\": (None, (3, 5)),\n    \"locale.format_string\": ((2, 5), (3, 0)),\n    \"locale.getpreferredencoding\": ((2, 3), (3, 0)),\n    \"logging.Logger.getChild\": ((2, 7), (3, 2)),\n    \"logging.Logger.hasHandlers\": (None, (3, 2)),\n    \"logging.LoggerAdapter.getEffectiveLevel\": (None, (3, 2)),\n    \"logging.LoggerAdapter.hasHandlers\": (None, (3, 2)),\n    \"logging.LoggerAdapter.isEnabledFor\": ((2, 7), (3, 2)),\n    \"logging.LoggerAdapter.setLevel\": (None, (3, 2)),\n    \"logging.StreamHandler.setStream\": (None, (3, 7)),\n    \"logging.config.dictConfig\": ((2, 7), (3, 2)),\n    \"logging.getLogRecordFactory\": (None, (3, 2)),\n    \"logging.handlers.BaseRotatingHandler.rotate\": (None, (3, 3)),\n    \"logging.handlers.BaseRotatingHandler.rotation_filename\": (None, (3, 3)),\n    \"logging.handlers.QueueListener.enqueue_sentinel\": (None, (3, 3)),\n    \"logging.handlers.WatchedFileHandler.reopenIfNeeded\": (None, (3, 6)),\n    \"logging.setLogRecordFactory\": (None, (3, 2)),\n    \"mailbox.Mailbox.get_bytes\": (None, (3, 2)),\n    \"math.acosh\": ((2, 6), (3, 0)),\n    \"math.asinh\": ((2, 6), (3, 0)),\n    \"math.atanh\": ((2, 6), (3, 0)),\n    \"math.comb\": (None, (3, 8)),\n    \"math.copysign\": ((2, 6), (3, 0)),\n    \"math.dist\": (None, (3, 8)),\n    \"math.erf\": ((2, 7), (3, 2)),\n    \"math.erfc\": ((2, 7), (3, 2)),\n    \"math.expm1\": ((2, 7), (3, 2)),\n    \"math.factorial\": ((2, 6), (3, 0)),\n    \"math.fsum\": ((2, 6), (3, 0)),\n    \"math.gamma\": ((2, 7), (3, 2)),\n    \"math.gcd\": (None, (3, 5)),\n    \"math.isclose\": (None, (3, 5)),\n    \"math.isfinite\": (None, (3, 2)),\n    \"math.isinf\": ((2, 6), (3, 0)),\n    \"math.isnan\": ((2, 6), (3, 0)),\n    \"math.isqrt\": (None, (3, 8)),\n    \"math.lcm\": (None, (3, 9)),\n    \"math.lgamma\": ((2, 7), (3, 2)),\n    \"math.log1p\": ((2, 6), (3, 0)),\n    \"math.log2\": (None, (3, 3)),\n    \"math.nextafter\": (None, (3, 9)),\n    \"math.perm\": (None, (3, 8)),\n    \"math.prod\": (None, (3, 8)),\n    \"math.remainder\": (None, (3, 7)),\n    \"math.trunc\": ((2, 6), (3, 0)),\n    \"math.ulp\": (None, (3, 9)),\n    \"mimetypes.MimeTypes.read_windows_registry\": ((2, 7), (3, 2)),\n    \"mmap.mmap.madvise\": (None, (3, 8)),\n    \"msilib.Database.Close\": (None, (3, 7)),\n    \"msvcrt.getwch\": ((2, 6), (3, 0)),\n    \"msvcrt.getwche\": ((2, 6), (3, 0)),\n    \"msvcrt.putwch\": ((2, 6), (3, 0)),\n    \"msvcrt.ungetwch\": ((2, 6), (3, 0)),\n    \"multiprocessing.Condition.wait_for\": (None, (3, 3)),\n    \"multiprocessing.Pool.starmap\": (None, (3, 3)),\n    \"multiprocessing.Pool.starmap_async\": (None, (3, 3)),\n    \"multiprocessing.Process.close\": (None, (3, 7)),\n    \"multiprocessing.Process.kill\": (None, (3, 7)),\n    \"multiprocessing.SimpleQueue.close\": (None, (3, 9)),\n    \"multiprocessing.connection.wait\": (None, (3, 3)),\n    \"multiprocessing.get_all_start_methods\": (None, (3, 4)),\n    \"multiprocessing.get_context\": (None, (3, 4)),\n    \"multiprocessing.get_start_method\": (None, (3, 4)),\n    \"multiprocessing.managers.SyncManager.Barrier\": (None, (3, 3)),\n    \"multiprocessing.managers.SyncManager.Condition.wait_for\": (None, (3, 3)),\n    \"multiprocessing.parent_process\": (None, (3, 8)),\n    \"multiprocessing.set_start_method\": (None, (3, 4)),\n    \"nis.get_default_domain\": ((2, 5), (3, 0)),\n    \"nntplib.NNTP.description\": ((2, 4), (3, 0)),\n    \"nntplib.NNTP.descriptions\": ((2, 4), (3, 0)),\n    \"nntplib.NNTP.getcapabilities\": (None, (3, 2)),\n    \"nntplib.NNTP.login\": (None, (3, 2)),\n    \"nntplib.NNTP.over\": (None, (3, 2)),\n    \"nntplib.NNTP.starttls\": (None, (3, 2)),\n    \"operator.__eq__\": ((2, 2), (3, 0)),\n    \"operator.__floordiv__\": ((2, 2), (3, 0)),\n    \"operator.__ge__\": ((2, 2), (3, 0)),\n    \"operator.__gt__\": ((2, 2), (3, 0)),\n    \"operator.__iadd__\": ((2, 5), (3, 0)),\n    \"operator.__iand__\": ((2, 5), (3, 0)),\n    \"operator.__iconcat__\": ((2, 5), (3, 0)),\n    \"operator.__idiv__\": ((2, 5), None),\n    \"operator.__ifloordiv__\": ((2, 5), (3, 0)),\n    \"operator.__ilshift__\": ((2, 5), (3, 0)),\n    \"operator.__imatmul__\": (None, (3, 5)),\n    \"operator.__imod__\": ((2, 5), (3, 0)),\n    \"operator.__imul__\": ((2, 5), (3, 0)),\n    \"operator.__index__\": ((2, 5), (3, 0)),\n    \"operator.__ior__\": ((2, 5), (3, 0)),\n    \"operator.__ipow__\": ((2, 5), (3, 0)),\n    \"operator.__irepeat__\": ((2, 5), None),\n    \"operator.__irshift__\": ((2, 5), (3, 0)),\n    \"operator.__isub__\": ((2, 5), (3, 0)),\n    \"operator.__itruediv__\": ((2, 5), (3, 0)),\n    \"operator.__ixor__\": ((2, 5), (3, 0)),\n    \"operator.__le__\": ((2, 2), (3, 0)),\n    \"operator.__lt__\": ((2, 2), (3, 0)),\n    \"operator.__matmul__\": (None, (3, 5)),\n    \"operator.__ne__\": ((2, 2), (3, 0)),\n    \"operator.__pow__\": ((2, 3), (3, 0)),\n    \"operator.__repeat__\": ((2, 0), None),\n    \"operator.__truediv__\": ((2, 2), (3, 0)),\n    \"operator.attrgetter\": ((2, 4), (3, 0)),\n    \"operator.eq\": ((2, 2), (3, 0)),\n    \"operator.floordiv\": ((2, 2), (3, 0)),\n    \"operator.ge\": ((2, 2), (3, 0)),\n    \"operator.gt\": ((2, 2), (3, 0)),\n    \"operator.iadd\": ((2, 5), (3, 0)),\n    \"operator.iand\": ((2, 5), (3, 0)),\n    \"operator.iconcat\": ((2, 5), (3, 0)),\n    \"operator.idiv\": ((2, 5), None),\n    \"operator.ifloordiv\": ((2, 5), (3, 0)),\n    \"operator.ilshift\": ((2, 5), (3, 0)),\n    \"operator.imatmul\": (None, (3, 5)),\n    \"operator.imod\": ((2, 5), (3, 0)),\n    \"operator.imul\": ((2, 5), (3, 0)),\n    \"operator.index\": ((2, 5), (3, 0)),\n    \"operator.ior\": ((2, 5), (3, 0)),\n    \"operator.ipow\": ((2, 5), (3, 0)),\n    \"operator.irepeat\": ((2, 5), None),\n    \"operator.irshift\": ((2, 5), (3, 0)),\n    \"operator.is_\": ((2, 3), (3, 0)),\n    \"operator.is_not\": ((2, 3), (3, 0)),\n    \"operator.isub\": ((2, 5), (3, 0)),\n    \"operator.itemgetter\": ((2, 5), (3, 0)),\n    \"operator.itruediv\": ((2, 5), (3, 0)),\n    \"operator.ixor\": ((2, 5), (3, 0)),\n    \"operator.le\": ((2, 2), (3, 0)),\n    \"operator.length_hint\": (None, (3, 4)),\n    \"operator.lt\": ((2, 2), (3, 0)),\n    \"operator.matmul\": (None, (3, 5)),\n    \"operator.methodcaller\": ((2, 6), (3, 0)),\n    \"operator.ne\": ((2, 2), (3, 0)),\n    \"operator.pow\": ((2, 3), (3, 0)),\n    \"operator.repeat\": ((2, 0), None),\n    \"operator.truediv\": ((2, 2), (3, 0)),\n    \"os.WCOREDUMP\": ((2, 3), (3, 0)),\n    \"os.WIFCONTINUED\": ((2, 3), (3, 0)),\n    \"os.add_dll_directory\": (None, (3, 8)),\n    \"os.chflags\": ((2, 6), (3, 0)),\n    \"os.chroot\": ((2, 2), (3, 0)),\n    \"os.closerange\": ((2, 6), (3, 0)),\n    \"os.copy_file_range\": (None, (3, 8)),\n    \"os.cpu_count\": (None, (3, 4)),\n    \"os.fchdir\": ((2, 3), (3, 0)),\n    \"os.fchmod\": ((2, 6), (3, 0)),\n    \"os.fchown\": ((2, 6), (3, 0)),\n    \"os.fsdecode\": (None, (3, 2)),\n    \"os.fsencode\": (None, (3, 2)),\n    \"os.fspath\": (None, (3, 6)),\n    \"os.fwalk\": (None, (3, 3)),\n    \"os.get_blocking\": (None, (3, 5)),\n    \"os.get_exec_path\": (None, (3, 2)),\n    \"os.get_handle_inheritable\": (None, (3, 4)),\n    \"os.get_inheritable\": (None, (3, 4)),\n    \"os.get_terminal_size\": (None, (3, 3)),\n    \"os.getcwdu\": ((2, 3), None),\n    \"os.getenvb\": (None, (3, 2)),\n    \"os.getgrouplist\": (None, (3, 3)),\n    \"os.getloadavg\": ((2, 3), (3, 0)),\n    \"os.getpgid\": ((2, 3), (3, 0)),\n    \"os.getpriority\": (None, (3, 3)),\n    \"os.getrandom\": (None, (3, 6)),\n    \"os.getresgid\": ((2, 7), (3, 2)),\n    \"os.getresuid\": ((2, 7), (3, 2)),\n    \"os.getsid\": ((2, 4), (3, 0)),\n    \"os.getxattr\": (None, (3, 3)),\n    \"os.initgroups\": ((2, 7), (3, 2)),\n    \"os.lchflags\": ((2, 6), (3, 0)),\n    \"os.lchmod\": ((2, 6), (3, 0)),\n    \"os.lchown\": ((2, 3), (3, 0)),\n    \"os.listxattr\": (None, (3, 3)),\n    \"os.lockf\": (None, (3, 3)),\n    \"os.major\": ((2, 3), (3, 0)),\n    \"os.makedev\": ((2, 3), (3, 0)),\n    \"os.memfd_create\": (None, (3, 8)),\n    \"os.minor\": ((2, 3), (3, 0)),\n    \"os.mknod\": ((2, 3), (3, 0)),\n    \"os.path.commonpath\": (None, (3, 5)),\n    \"os.path.getctime\": ((2, 3), (3, 0)),\n    \"os.path.ismount\": (None, (3, 4)),\n    \"os.path.lexists\": ((2, 4), (3, 0)),\n    \"os.path.realpath\": ((2, 2), (3, 0)),\n    \"os.path.relpath\": ((2, 6), (3, 0)),\n    \"os.pidfd_open\": (None, (3, 9)),\n    \"os.pipe2\": (None, (3, 3)),\n    \"os.popen2\": ((2, 0), None),\n    \"os.popen3\": ((2, 0), None),\n    \"os.popen4\": ((2, 0), None),\n    \"os.posix_fadvise\": (None, (3, 3)),\n    \"os.posix_fallocate\": (None, (3, 3)),\n    \"os.posix_spawn\": (None, (3, 8)),\n    \"os.posix_spawnp\": (None, (3, 8)),\n    \"os.pread\": (None, (3, 3)),\n    \"os.preadv\": (None, (3, 7)),\n    \"os.pwrite\": (None, (3, 3)),\n    \"os.pwritev\": (None, (3, 7)),\n    \"os.readv\": (None, (3, 3)),\n    \"os.register_at_fork\": (None, (3, 7)),\n    \"os.removexattr\": (None, (3, 3)),\n    \"os.replace\": (None, (3, 3)),\n    \"os.scandir\": (None, (3, 5)),\n    \"os.scandir.close\": (None, (3, 6)),\n    \"os.sched_get_priority_max\": (None, (3, 3)),\n    \"os.sched_get_priority_min\": (None, (3, 3)),\n    \"os.sched_getaffinity\": (None, (3, 3)),\n    \"os.sched_getparam\": (None, (3, 3)),\n    \"os.sched_getscheduler\": (None, (3, 3)),\n    \"os.sched_rr_get_interval\": (None, (3, 3)),\n    \"os.sched_setaffinity\": (None, (3, 3)),\n    \"os.sched_setparam\": (None, (3, 3)),\n    \"os.sched_setscheduler\": (None, (3, 3)),\n    \"os.sched_yield\": (None, (3, 3)),\n    \"os.sendfile\": (None, (3, 3)),\n    \"os.set_blocking\": (None, (3, 5)),\n    \"os.set_handle_inheritable\": (None, (3, 4)),\n    \"os.set_inheritable\": (None, (3, 4)),\n    \"os.setgroups\": ((2, 2), (3, 0)),\n    \"os.setpriority\": (None, (3, 3)),\n    \"os.setresgid\": ((2, 7), (3, 2)),\n    \"os.setresuid\": ((2, 7), (3, 2)),\n    \"os.setxattr\": (None, (3, 3)),\n    \"os.sync\": (None, (3, 3)),\n    \"os.truncate\": (None, (3, 3)),\n    \"os.urandom\": ((2, 4), (3, 0)),\n    \"os.wait3\": ((2, 5), (3, 0)),\n    \"os.wait4\": ((2, 5), (3, 0)),\n    \"os.waitid\": (None, (3, 3)),\n    \"os.waitstatus_to_exitcode\": (None, (3, 9)),\n    \"os.walk\": ((2, 3), (3, 0)),\n    \"os.writev\": (None, (3, 3)),\n    \"pathlib.Path.expanduser\": (None, (3, 5)),\n    \"pathlib.Path.home\": (None, (3, 5)),\n    \"pathlib.Path.is_mount\": (None, (3, 7)),\n    \"pathlib.Path.link_to\": (None, (3, 8)),\n    \"pathlib.Path.read_bytes\": (None, (3, 5)),\n    \"pathlib.Path.read_text\": (None, (3, 5)),\n    \"pathlib.Path.readlink\": (None, (3, 9)),\n    \"pathlib.Path.samefile\": (None, (3, 5)),\n    \"pathlib.Path.write_bytes\": (None, (3, 5)),\n    \"pathlib.Path.write_text\": (None, (3, 5)),\n    \"pathlib.PurePath.is_relative_to\": (None, (3, 9)),\n    \"pathlib.PurePath.with_stem\": (None, (3, 9)),\n    \"pickle.Pickler.reducer_override\": (None, (3, 8)),\n    \"pickletools.optimize\": ((2, 6), (3, 0)),\n    \"pkgutil.get_data\": ((2, 6), (3, 0)),\n    \"pkgutil.resolve_name\": (None, (3, 9)),\n    \"platform.linux_distribution\": ((2, 6), (3, 0)),\n    \"platform.python_branch\": ((2, 6), (3, 0)),\n    \"platform.python_implementation\": ((2, 6), (3, 0)),\n    \"platform.python_revision\": ((2, 6), (3, 0)),\n    \"platform.win32_edition\": (None, (3, 8)),\n    \"platform.win32_is_iot\": (None, (3, 8)),\n    \"plistlib.dump\": (None, (3, 4)),\n    \"plistlib.dumps\": (None, (3, 4)),\n    \"plistlib.load\": (None, (3, 4)),\n    \"plistlib.loads\": (None, (3, 4)),\n    \"poplib.POP3.capa\": (None, (3, 4)),\n    \"poplib.POP3.stls\": (None, (3, 4)),\n    \"poplib.POP3.utf8\": (None, (3, 5)),\n    \"pprint.PrettyPrinter.format\": ((2, 3), (3, 0)),\n    \"pprint.pp\": (None, (3, 8)),\n    \"pstats.Stats.get_stats_profile\": (None, (3, 9)),\n    \"random.choices\": (None, (3, 6)),\n    \"random.getrandbits\": ((2, 4), (3, 0)),\n    \"random.getstate\": ((2, 1), (3, 0)),\n    \"random.jumpahead\": ((2, 1), None),\n    \"random.randbytes\": (None, (3, 9)),\n    \"random.sample\": ((2, 3), (3, 0)),\n    \"random.setstate\": ((2, 1), (3, 0)),\n    \"random.triangular\": ((2, 6), (3, 0)),\n    \"re.Pattern.fullmatch\": (None, (3, 4)),\n    \"re.finditer\": ((2, 2), (3, 0)),\n    \"re.fullmatch\": (None, (3, 4)),\n    \"readline.append_history_file\": (None, (3, 5)),\n    \"readline.clear_history\": ((2, 4), (3, 0)),\n    \"readline.get_completer\": ((2, 3), (3, 0)),\n    \"readline.get_completion_type\": ((2, 6), (3, 0)),\n    \"readline.get_current_history_length\": ((2, 3), (3, 0)),\n    \"readline.get_history_item\": ((2, 3), (3, 0)),\n    \"readline.remove_history_item\": ((2, 4), (3, 0)),\n    \"readline.replace_history_item\": ((2, 4), (3, 0)),\n    \"readline.set_auto_history\": (None, (3, 6)),\n    \"readline.set_completion_display_matches_hook\": ((2, 6), (3, 0)),\n    \"readline.set_pre_input_hook\": ((2, 3), (3, 0)),\n    \"readline.set_startup_hook\": ((2, 3), (3, 0)),\n    \"resource.prlimit\": (None, (3, 4)),\n    \"runpy.run_path\": ((2, 7), (3, 2)),\n    \"select.devpoll\": (None, (3, 3)),\n    \"select.devpoll.close\": (None, (3, 4)),\n    \"select.devpoll.fileno\": (None, (3, 4)),\n    \"select.epoll\": ((2, 6), (3, 0)),\n    \"select.kevent\": ((2, 6), (3, 0)),\n    \"select.kqueue\": ((2, 6), (3, 0)),\n    \"select.poll.modify\": ((2, 6), (3, 0)),\n    \"sgmllib.SGMLParser.convert_charref\": ((2, 5), None),\n    \"sgmllib.SGMLParser.convert_codepoint\": ((2, 5), None),\n    \"sgmllib.SGMLParser.convert_entityref\": ((2, 5), None),\n    \"shlex.join\": (None, (3, 8)),\n    \"shlex.quote\": (None, (3, 3)),\n    \"shlex.shlex.pop_source\": ((2, 1), (3, 0)),\n    \"shlex.shlex.push_source\": ((2, 1), (3, 0)),\n    \"shlex.split\": ((2, 3), (3, 0)),\n    \"shutil.chown\": (None, (3, 3)),\n    \"shutil.disk_usage\": (None, (3, 3)),\n    \"shutil.get_archive_formats\": ((2, 7), (3, 2)),\n    \"shutil.get_terminal_size\": (None, (3, 3)),\n    \"shutil.get_unpack_formats\": (None, (3, 2)),\n    \"shutil.ignore_patterns\": ((2, 6), (3, 0)),\n    \"shutil.make_archive\": ((2, 7), (3, 2)),\n    \"shutil.move\": ((2, 3), (3, 0)),\n    \"shutil.register_archive_format\": ((2, 7), (3, 2)),\n    \"shutil.register_unpack_format\": (None, (3, 2)),\n    \"shutil.unpack_archive\": (None, (3, 2)),\n    \"shutil.unregister_archive_format\": ((2, 7), (3, 2)),\n    \"shutil.unregister_unpack_format\": (None, (3, 2)),\n    \"shutil.which\": (None, (3, 3)),\n    \"signal.getitimer\": ((2, 6), (3, 0)),\n    \"signal.pidfd_send_signal\": (None, (3, 9)),\n    \"signal.pthread_kill\": (None, (3, 3)),\n    \"signal.pthread_sigmask\": (None, (3, 3)),\n    \"signal.raise_signal\": (None, (3, 8)),\n    \"signal.set_wakeup_fd\": ((2, 6), (3, 0)),\n    \"signal.setitimer\": ((2, 6), (3, 0)),\n    \"signal.siginterrupt\": ((2, 6), (3, 0)),\n    \"signal.sigpending\": (None, (3, 3)),\n    \"signal.sigtimedwait\": (None, (3, 3)),\n    \"signal.sigwait\": (None, (3, 3)),\n    \"signal.sigwaitinfo\": (None, (3, 3)),\n    \"signal.strsignal\": (None, (3, 8)),\n    \"signal.valid_signals\": (None, (3, 8)),\n    \"site.getsitepackages\": ((2, 7), (3, 2)),\n    \"site.getuserbase\": ((2, 7), (3, 2)),\n    \"site.getusersitepackages\": ((2, 7), (3, 2)),\n    \"smtplib.SMTP.auth\": (None, (3, 5)),\n    \"smtplib.SMTP.ehlo_or_helo_if_needed\": ((2, 6), (3, 0)),\n    \"smtplib.SMTP.send_message\": (None, (3, 2)),\n    \"smtplib.SMTP.starttls\": ((2, 6), (3, 0)),\n    \"socket.CMSG_LEN\": (None, (3, 3)),\n    \"socket.CMSG_SPACE\": (None, (3, 3)),\n    \"socket.close\": (None, (3, 7)),\n    \"socket.create_connection\": ((2, 6), (3, 0)),\n    \"socket.create_server\": (None, (3, 8)),\n    \"socket.fromshare\": (None, (3, 3)),\n    \"socket.getaddrinfo\": ((2, 2), (3, 0)),\n    \"socket.getdefaulttimeout\": ((2, 3), (3, 0)),\n    \"socket.getnameinfo\": ((2, 2), (3, 0)),\n    \"socket.has_dualstack_ipv6\": (None, (3, 8)),\n    \"socket.if_indextoname\": (None, (3, 3)),\n    \"socket.if_nameindex\": (None, (3, 3)),\n    \"socket.if_nametoindex\": (None, (3, 3)),\n    \"socket.inet_ntop\": ((2, 3), (3, 0)),\n    \"socket.inet_pton\": ((2, 3), (3, 0)),\n    \"socket.recv_fds\": (None, (3, 9)),\n    \"socket.send_fds\": (None, (3, 9)),\n    \"socket.setdefaulttimeout\": ((2, 3), (3, 0)),\n    \"socket.sethostname\": (None, (3, 3)),\n    \"socket.socket.detach\": (None, (3, 2)),\n    \"socket.socket.get_inheritable\": (None, (3, 4)),\n    \"socket.socket.getblocking\": (None, (3, 7)),\n    \"socket.socket.gettimeout\": ((2, 3), (3, 0)),\n    \"socket.socket.ioctl\": ((2, 6), (3, 0)),\n    \"socket.socket.recv_into\": ((2, 5), (3, 0)),\n    \"socket.socket.recvfrom_into\": ((2, 5), (3, 0)),\n    \"socket.socket.recvmsg\": (None, (3, 3)),\n    \"socket.socket.recvmsg_into\": (None, (3, 3)),\n    \"socket.socket.sendfile\": (None, (3, 5)),\n    \"socket.socket.sendmsg\": (None, (3, 3)),\n    \"socket.socket.sendmsg_afalg\": (None, (3, 6)),\n    \"socket.socket.set_inheritable\": (None, (3, 4)),\n    \"socket.socket.settimeout\": ((2, 3), (3, 0)),\n    \"socket.socket.share\": (None, (3, 3)),\n    \"socket.socketpair\": ((2, 4), (3, 0)),\n    \"socketserver.BaseServer.service_actions\": (None, (3, 3)),\n    \"sqlite3.Connection.backup\": (None, (3, 7)),\n    \"sqlite3.Connection.enable_load_extension\": ((2, 7), (3, 2)),\n    \"sqlite3.Connection.iter_dump\": ((2, 6), (3, 0)),\n    \"sqlite3.Connection.load_extension\": ((2, 7), (3, 2)),\n    \"sqlite3.Connection.set_progress_handler\": ((2, 6), (3, 0)),\n    \"sqlite3.Connection.set_trace_callback\": (None, (3, 3)),\n    \"sqlite3.Row.keys\": ((2, 6), (3, 0)),\n    \"ssl.RAND_bytes\": (None, (3, 3)),\n    \"ssl.RAND_pseudo_bytes\": (None, (3, 3)),\n    \"ssl.SSLContext.cert_store_stats\": ((2, 7), (3, 4)),\n    \"ssl.SSLContext.get_ca_certs\": ((2, 7), (3, 4)),\n    \"ssl.SSLContext.get_ciphers\": (None, (3, 6)),\n    \"ssl.SSLContext.load_default_certs\": ((2, 7), (3, 4)),\n    \"ssl.SSLContext.load_dh_params\": ((2, 7), (3, 3)),\n    \"ssl.SSLContext.set_alpn_protocols\": ((2, 7), (3, 5)),\n    \"ssl.SSLContext.set_ecdh_curve\": ((2, 7), (3, 3)),\n    \"ssl.SSLContext.set_npn_protocols\": ((2, 7), (3, 3)),\n    \"ssl.SSLContext.set_servername_callback\": ((2, 7), (3, 4)),\n    \"ssl.SSLSocket.compression\": ((2, 7), (3, 3)),\n    \"ssl.SSLSocket.get_channel_binding\": ((2, 7), (3, 3)),\n    \"ssl.SSLSocket.selected_alpn_protocol\": ((2, 7), (3, 5)),\n    \"ssl.SSLSocket.selected_npn_protocol\": ((2, 7), (3, 3)),\n    \"ssl.SSLSocket.sendfile\": (None, (3, 5)),\n    \"ssl.SSLSocket.shared_ciphers\": (None, (3, 5)),\n    \"ssl.SSLSocket.verify_client_post_handshake\": (None, (3, 8)),\n    \"ssl.SSLSocket.version\": ((2, 7), (3, 5)),\n    \"ssl._https_verify_certificates\": ((2, 7), None),\n    \"ssl.create_default_context\": ((2, 7), (3, 4)),\n    \"ssl.enum_certificates\": ((2, 7), (3, 4)),\n    \"ssl.enum_crls\": ((2, 7), (3, 4)),\n    \"ssl.get_default_verify_paths\": ((2, 7), (3, 4)),\n    \"ssl.match_hostname\": ((2, 7), (3, 2)),\n    \"stat.S_ISDOOR\": (None, (3, 4)),\n    \"stat.S_ISPORT\": (None, (3, 4)),\n    \"stat.S_ISWHT\": (None, (3, 4)),\n    \"stat.filemode\": (None, (3, 3)),\n    \"statistics.NormalDist.zscore\": (None, (3, 9)),\n    \"statistics.fmean\": (None, (3, 8)),\n    \"statistics.geometric_mean\": (None, (3, 8)),\n    \"statistics.harmonic_mean\": (None, (3, 6)),\n    \"statistics.multimode\": (None, (3, 8)),\n    \"statistics.quantiles\": (None, (3, 8)),\n    \"string.rsplit\": ((2, 4), None),\n    \"struct.Struct.iter_unpack\": (None, (3, 4)),\n    \"struct.iter_unpack\": (None, (3, 4)),\n    \"struct.pack_into\": ((2, 5), (3, 0)),\n    \"struct.unpack_from\": ((2, 5), (3, 0)),\n    \"subprocess.Popen.kill\": ((2, 6), (3, 0)),\n    \"subprocess.Popen.send_signal\": ((2, 6), (3, 0)),\n    \"subprocess.Popen.terminate\": ((2, 6), (3, 0)),\n    \"subprocess.check_call\": ((2, 5), (3, 0)),\n    \"subprocess.check_output\": ((2, 7), (3, 1)),\n    \"subprocess.run\": (None, (3, 5)),\n    \"sys._clear_type_cache\": ((2, 6), (3, 0)),\n    \"sys._current_frames\": ((2, 5), (3, 0)),\n    \"sys._debugmallocstats\": (None, (3, 3)),\n    \"sys._enablelegacywindowsfsencoding\": (None, (3, 6)),\n    \"sys.addaudithook\": (None, (3, 8)),\n    \"sys.audit\": (None, (3, 8)),\n    \"sys.breakpointhook\": (None, (3, 7)),\n    \"sys.exc_clear\": ((2, 3), None),\n    \"sys.get_asyncgen_hooks\": (None, (3, 6)),\n    \"sys.get_coroutine_origin_tracking_depth\": (None, (3, 7)),\n    \"sys.getallocatedblocks\": (None, (3, 4)),\n    \"sys.getandroidapilevel\": (None, (3, 7)),\n    \"sys.getcheckinterval\": ((2, 3), (3, 0)),\n    \"sys.getdlopenflags\": ((2, 2), (3, 0)),\n    \"sys.getfilesystemencodeerrors\": (None, (3, 6)),\n    \"sys.getfilesystemencoding\": ((2, 3), (3, 0)),\n    \"sys.getprofile\": ((2, 6), (3, 0)),\n    \"sys.getsizeof\": ((2, 6), (3, 0)),\n    \"sys.getswitchinterval\": (None, (3, 2)),\n    \"sys.gettrace\": ((2, 6), (3, 0)),\n    \"sys.getwindowsversion\": ((2, 3), (3, 0)),\n    \"sys.is_finalizing\": (None, (3, 5)),\n    \"sys.set_asyncgen_hooks\": (None, (3, 6)),\n    \"sys.set_coroutine_origin_tracking_depth\": (None, (3, 7)),\n    \"sys.setdefaultencoding\": ((2, 0), None),\n    \"sys.setdlopenflags\": ((2, 2), (3, 0)),\n    \"sys.setswitchinterval\": (None, (3, 2)),\n    \"sys.settscdump\": ((2, 4), None),\n    \"sys.unraisablehook\": (None, (3, 8)),\n    \"tarfile.TarFile.extractall\": ((2, 5), (3, 0)),\n    \"tarfile.TarInfo.fromtarfile\": ((2, 6), (3, 0)),\n    \"telnetlib.Telnet.read_sb_data\": ((2, 3), (3, 0)),\n    \"tempfile.NamedTemporaryFile\": ((2, 3), (3, 0)),\n    \"tempfile.SpooledTemporaryFile\": ((2, 6), (3, 0)),\n    \"tempfile.TemporaryDirectory\": (None, (3, 2)),\n    \"tempfile.gettempdir\": ((2, 3), (3, 0)),\n    \"tempfile.gettempdirb\": (None, (3, 5)),\n    \"tempfile.gettempprefixb\": (None, (3, 5)),\n    \"tempfile.mkdtemp\": ((2, 3), (3, 0)),\n    \"tempfile.mkstemp\": ((2, 3), (3, 0)),\n    \"test.support.captured_stdout\": ((2, 6), (3, 0)),\n    \"test.support.catch_threading_exception\": (None, (3, 8)),\n    \"test.support.catch_unraisable_exception\": (None, (3, 8)),\n    \"test.support.check__all__\": (None, (3, 6)),\n    \"test.support.check_py3k_warnings\": ((2, 7), None),\n    \"test.support.check_syntax_warning\": (None, (3, 8)),\n    \"test.support.check_warnings\": ((2, 6), (3, 0)),\n    \"test.support.detect_api_mismatch\": (None, (3, 5)),\n    \"test.support.import_fresh_module\": ((2, 7), (3, 1)),\n    \"test.support.import_module\": ((2, 7), (3, 1)),\n    \"test.support.print_warning\": (None, (3, 9)),\n    \"test.support.wait_process\": (None, (3, 9)),\n    \"textwrap.indent\": (None, (3, 3)),\n    \"textwrap.shorten\": (None, (3, 4)),\n    \"thread.interrupt_main\": ((2, 3), None),\n    \"thread.stack_size\": ((2, 5), None),\n    \"threading.Condition.notify_all\": ((2, 6), (3, 0)),\n    \"threading.Condition.wait_for\": (None, (3, 2)),\n    \"threading.Event.is_set\": ((2, 6), (3, 0)),\n    \"threading.Thread.is_alive\": ((2, 6), (3, 0)),\n    \"threading.active_count\": ((2, 6), (3, 0)),\n    \"threading.current_thread\": ((2, 6), (3, 0)),\n    \"threading.excepthook\": (None, (3, 8)),\n    \"threading.get_ident\": (None, (3, 3)),\n    \"threading.get_native_id\": (None, (3, 8)),\n    \"threading.main_thread\": (None, (3, 4)),\n    \"threading.setprofile\": ((2, 3), (3, 0)),\n    \"threading.settrace\": ((2, 3), (3, 0)),\n    \"threading.stack_size\": ((2, 5), (3, 0)),\n    \"time.clock_getres\": (None, (3, 3)),\n    \"time.clock_gettime\": (None, (3, 3)),\n    \"time.clock_gettime_ns\": (None, (3, 7)),\n    \"time.clock_settime\": (None, (3, 3)),\n    \"time.clock_settime_ns\": (None, (3, 7)),\n    \"time.get_clock_info\": (None, (3, 3)),\n    \"time.monotonic\": (None, (3, 3)),\n    \"time.monotonic_ns\": (None, (3, 7)),\n    \"time.perf_counter\": (None, (3, 3)),\n    \"time.perf_counter_ns\": (None, (3, 7)),\n    \"time.process_time\": (None, (3, 3)),\n    \"time.process_time_ns\": (None, (3, 7)),\n    \"time.pthread_getcpuclockid\": (None, (3, 7)),\n    \"time.thread_time\": (None, (3, 7)),\n    \"time.thread_time_ns\": (None, (3, 7)),\n    \"time.time_ns\": (None, (3, 7)),\n    \"time.tzset\": ((2, 3), (3, 0)),\n    \"timeit.Timer.autorange\": (None, (3, 6)),\n    \"timeit.repeat\": ((2, 6), (3, 0)),\n    \"timeit.timeit\": ((2, 6), (3, 0)),\n    \"tokenize.generate_tokens\": ((2, 2), (3, 0)),\n    \"tokenize.open\": (None, (3, 2)),\n    \"tokenize.untokenize\": ((2, 5), (3, 0)),\n    \"traceback.clear_frames\": (None, (3, 4)),\n    \"traceback.format_exc\": ((2, 4), (3, 0)),\n    \"traceback.walk_stack\": (None, (3, 5)),\n    \"traceback.walk_tb\": (None, (3, 5)),\n    \"tracemalloc.reset_peak\": (None, (3, 9)),\n    \"types.CodeType.replace\": (None, (3, 8)),\n    \"types.DynamicClassAttribute\": (None, (3, 4)),\n    \"types.FrameType.clear\": (None, (3, 4)),\n    \"types.coroutine\": (None, (3, 5)),\n    \"types.new_class\": (None, (3, 3)),\n    \"types.prepare_class\": (None, (3, 3)),\n    \"types.resolve_bases\": (None, (3, 7)),\n    \"typing.NewType\": (None if not bp(\"typing\", config) else (2, 7), (3, 5)),\n    \"typing.get_args\": (None, (3, 8)),\n    \"typing.get_origin\": (None, (3, 8)),\n    \"unicodedata.east_asian_width\": ((2, 4), (3, 0)),\n    \"unicodedata.is_normalized\": (None, (3, 8)),\n    \"unicodedata.normalize\": ((2, 3), (3, 0)),\n    \"unittest.TestCase.addClassCleanup\": (None, (3, 8)),\n    \"unittest.TestCase.addCleanup\": ((2, 7), (3, 1)),\n    \"unittest.TestCase.addTypeEqualityFunc\": ((2, 7), (3, 1)),\n    \"unittest.TestCase.assertCountEqual\": (None, (3, 2)),\n    \"unittest.TestCase.assertDictContainsSubset\": ((2, 7), (3, 1)),\n    \"unittest.TestCase.assertDictEqual\": ((2, 7), (3, 1)),\n    \"unittest.TestCase.assertGreater\": ((2, 7), (3, 1)),\n    \"unittest.TestCase.assertGreaterEqual\": ((2, 7), (3, 1)),\n    \"unittest.TestCase.assertIn\": ((2, 7), (3, 1)),\n    \"unittest.TestCase.assertIs\": ((2, 7), (3, 1)),\n    \"unittest.TestCase.assertIsInstance\": ((2, 7), (3, 2)),\n    \"unittest.TestCase.assertIsNone\": ((2, 7), (3, 1)),\n    \"unittest.TestCase.assertIsNot\": ((2, 7), (3, 1)),\n    \"unittest.TestCase.assertIsNotNone\": ((2, 7), (3, 1)),\n    \"unittest.TestCase.assertItemsEqual\": ((2, 7), None),\n    \"unittest.TestCase.assertLess\": ((2, 7), (3, 1)),\n    \"unittest.TestCase.assertLessEqual\": ((2, 7), (3, 1)),\n    \"unittest.TestCase.assertListEqual\": ((2, 7), (3, 1)),\n    \"unittest.TestCase.assertLogs\": (None, (3, 4)),\n    \"unittest.TestCase.assertMultilineEqual\": ((2, 7), (3, 1)),\n    \"unittest.TestCase.assertNotIn\": ((2, 7), (3, 1)),\n    \"unittest.TestCase.assertNotIsInstance\": ((2, 7), (3, 2)),\n    \"unittest.TestCase.assertNotRegex\": (None, (3, 2)),\n    \"unittest.TestCase.assertNotRegexpMatches\": ((2, 7), (3, 5)),\n    \"unittest.TestCase.assertRaisesRegex\": (None, (3, 2)),\n    \"unittest.TestCase.assertRaisesRegexp\": ((2, 7), (3, 1)),\n    \"unittest.TestCase.assertRegex\": (None, (3, 2)),\n    \"unittest.TestCase.assertRegexpMatches\": ((2, 7), (3, 1)),\n    \"unittest.TestCase.assertSequenceEqual\": ((2, 7), (3, 1)),\n    \"unittest.TestCase.assertSetEqual\": ((2, 7), (3, 1)),\n    \"unittest.TestCase.assertTupleEqual\": ((2, 7), (3, 1)),\n    \"unittest.TestCase.assertWarns\": (None, (3, 2)),\n    \"unittest.TestCase.assertWarnsRegex\": (None, (3, 2)),\n    \"unittest.TestCase.doClassCleanups\": (None, (3, 8)),\n    \"unittest.TestCase.doCleanups\": ((2, 7), (3, 1)),\n    \"unittest.TestCase.setUpClass\": ((2, 7), (3, 2)),\n    \"unittest.TestCase.skipTest\": ((2, 7), (3, 1)),\n    \"unittest.TestCase.subTest\": (None, (3, 4)),\n    \"unittest.TestCase.tearDownClass\": ((2, 7), (3, 2)),\n    \"unittest.TestLoader.discover\": ((2, 7), (3, 2)),\n    \"unittest.TestResult.addSubTest\": (None, (3, 4)),\n    \"unittest.TestResult.startTestRun\": ((2, 7), (3, 1)),\n    \"unittest.TestResult.stopTestRun\": ((2, 7), (3, 1)),\n    \"unittest.addModuleCleanup\": (None, (3, 8)),\n    \"unittest.doModuleCleanups\": (None, (3, 8)),\n    \"unittest.installHandler\": ((2, 7), (3, 2)),\n    \"unittest.mock.Mock.assert_called\": (None, (3, 6)),\n    \"unittest.mock.Mock.assert_called_once\": (None, (3, 6)),\n    \"unittest.mock.Mock.assert_not_called\": (None, (3, 5)),\n    \"unittest.mock.seal\": (None, (3, 7)),\n    \"unittest.registerResult\": ((2, 7), (3, 2)),\n    \"unittest.removeHandler\": ((2, 7), (3, 2)),\n    \"unittest.removeResult\": ((2, 7), (3, 2)),\n    \"urllib.request.Request.remove_header\": (None, (3, 4)),\n    \"urllib.robotparser.RobotFileParser.crawl_delay\": (None, (3, 6)),\n    \"urllib.robotparser.RobotFileParser.request_rate\": (None, (3, 6)),\n    \"urllib.robotparser.RobotFileParser.site_maps\": (None, (3, 8)),\n    \"urllib.urlopen.getcode\": ((2, 6), None),\n    \"urllib2.Request.add_unredirected_header\": ((2, 4), None),\n    \"urllib2.Request.has_header\": ((2, 4), None),\n    \"urlparse.ParseResult.geturl\": ((2, 5), None),\n    \"urlparse.parse_qs\": ((2, 6), None),\n    \"urlparse.parse_qsl\": ((2, 6), None),\n    \"urlparse.urlsplit\": ((2, 2), None),\n    \"urlparse.urlunsplit\": ((2, 2), None),\n    \"venv.EnvBuilder.upgrade_dependencies\": (None, (3, 9)),\n    \"venv.create\": (None, (3, 3)),\n    \"warnings.warnpy3k\": ((2, 6), None),\n    \"weakref.WeakKeyDictionary.iterkeyrefs\": ((2, 5), None),\n    \"weakref.WeakKeyDictionary.keyrefs\": ((2, 5), (3, 0)),\n    \"weakref.WeakValueDictionary.itervaluerefs\": ((2, 5), None),\n    \"weakref.WeakValueDictionary.valuerefs\": ((2, 5), (3, 0)),\n    \"webbrowser.controller.open_new_tab\": ((2, 5), (3, 0)),\n    \"webbrowser.open_new_tab\": ((2, 5), (3, 0)),\n    \"winreg.CreateKeyEx\": (None, (3, 2)),\n    \"winreg.DeleteKeyEx\": (None, (3, 2)),\n    \"winsound.MessageBeep\": ((2, 3), (3, 0)),\n    \"wsgiref.handlers.read_environ\": (None, (3, 2)),\n    \"xml.dom.Node.normalize\": ((2, 1), (3, 0)),\n    \"xml.dom.minidom.Node.toprettyxml\": ((2, 1), (3, 0)),\n    \"xml.etree.ElementTree.Element.extend\": ((2, 7), (3, 2)),\n    \"xml.etree.ElementTree.Element.iter\": ((2, 7), (3, 2)),\n    \"xml.etree.ElementTree.Element.iterfind\": ((2, 7), (3, 2)),\n    \"xml.etree.ElementTree.Element.itertext\": ((2, 7), (3, 2)),\n    \"xml.etree.ElementTree.ElementTree.iterfind\": ((2, 7), (3, 2)),\n    \"xml.etree.ElementTree.TreeBuilder.comment\": (None, (3, 8)),\n    \"xml.etree.ElementTree.TreeBuilder.doctype\": ((2, 7), (3, 2)),\n    \"xml.etree.ElementTree.TreeBuilder.end_ns\": (None, (3, 8)),\n    \"xml.etree.ElementTree.TreeBuilder.pi\": (None, (3, 8)),\n    \"xml.etree.ElementTree.TreeBuilder.start_ns\": (None, (3, 8)),\n    \"xml.etree.ElementTree.canonicalize\": (None, (3, 8)),\n    \"xml.etree.ElementTree.fromstringlist\": ((2, 7), (3, 2)),\n    \"xml.etree.ElementTree.indent\": (None, (3, 9)),\n    \"xml.etree.ElementTree.register_namespace\": ((2, 7), (3, 2)),\n    \"xml.etree.ElementTree.tostringlist\": ((2, 7), (3, 2)),\n    \"xml.parsers.expat.XMLParserType.EntityDeclHandler\": ((2, 1), (3, 0)),\n    \"xml.parsers.expat.XMLParserType.GetInputContext\": ((2, 1), (3, 0)),\n    \"xml.parsers.expat.XMLParserType.UseForeignDTD\": ((2, 3), (3, 0)),\n    \"xml.parsers.expat.XMLParserType.XmlDeclHandler\": ((2, 1), (3, 0)),\n    \"xml.sax.saxutils.quoteattr\": ((2, 2), (3, 0)),\n    \"xml.sax.saxutils.unescape\": ((2, 3), (3, 0)),\n    \"xmlrpc.server.SimpleXMLRPCServer.register_introspection_functions\": (None, (3, 0)),\n    \"zipfile.ZipFile.extract\": ((2, 6), (3, 0)),\n    \"zipfile.ZipFile.extractall\": ((2, 6), (3, 0)),\n    \"zipfile.ZipFile.open\": ((2, 6), (3, 0)),\n    \"zipfile.ZipFile.setpassword\": ((2, 6), (3, 0)),\n    \"zipfile.ZipInfo.from_file\": (None, (3, 6)),\n    \"zipfile.ZipInfo.is_dir\": (None, (3, 6)),\n    \"zipimport.zipimporter.get_filename\": ((2, 7), (3, 1)),\n    \"zlib.Compress.copy\": ((2, 5), (3, 0)),\n    \"zlib.Decompress.copy\": ((2, 5), (3, 0)),\n\n    # Variables and Constants\n    \"BaseException.__suppress_context__\": (None, (3, 3)),\n    \"BaseHTTPServer.BaseHTTPRequestHandler.error_content_type\": ((2, 6), None),\n    \"Cookie.Morsel.httponly\": ((2, 6), None),\n    \"ImportError.name\": (None, (3, 3)),\n    \"ImportError.path\": (None, (3, 3)),\n    \"OSError.filename2\": (None, (3, 4)),\n    \"SimpleXMLRPCServer.SimpleXMLRPCRequestHandler.encode_threshold\": ((2, 7), None),\n    \"SimpleXMLRPCServer.SimpleXMLRPCRequestHandler.rpc_paths\": ((2, 5), None),\n    \"StopIteration.value\": (None, (3, 3)),\n    \"__future__.absolute_import\": ((2, 5), (3, 0)),\n    \"__future__.annotations\": (None, (3, 7)),\n    \"__future__.division\": ((2, 2), (3, 0)),\n    \"__future__.generator_stop\": (None, (3, 5)),\n    \"__future__.generators\": ((2, 2), (3, 0)),\n    \"__future__.nested_scopes\": ((2, 1), (3, 0)),\n    \"__future__.print_function\": ((2, 6), (3, 0)),\n    \"__future__.unicode_literals\": ((2, 6), (3, 0)),\n    \"__future__.with_statement\": ((2, 5), (3, 0)),\n    \"_thread.TIMEOUT_MAX\": (None, (3, 2)),\n    \"bz2.BZ2Decompressor.eof\": (None, (3, 3)),\n    \"bz2.BZ2Decompressor.needs_input\": (None, (3, 5)),\n    \"calendar.HTMLCalendar.cssclass_month\": (None, (3, 7)),\n    \"calendar.HTMLCalendar.cssclass_month_head\": (None, (3, 7)),\n    \"calendar.HTMLCalendar.cssclass_noday\": (None, (3, 7)),\n    \"calendar.HTMLCalendar.cssclass_year\": (None, (3, 7)),\n    \"calendar.HTMLCalendar.cssclass_year_head\": (None, (3, 7)),\n    \"calendar.HTMLCalendar.cssclasses_weekday_head\": (None, (3, 7)),\n    \"cmath.inf\": (None, (3, 6)),\n    \"cmath.infj\": (None, (3, 6)),\n    \"cmath.nan\": (None, (3, 6)),\n    \"cmath.nanj\": (None, (3, 6)),\n    \"cmath.tau\": (None, (3, 6)),\n    \"collections.deque.maxlen\": ((2, 7), (3, 1)),\n    \"collections.namedtuple._field_defaults\": (None, (3, 7)),\n    \"configparser.DuplicateSectionError.lineno\": (None, (3, 2)),\n    \"configparser.DuplicateSectionError.source\": (None, (3, 2)),\n    \"configparser.ParsingError.source\": (None, (3, 2)),\n    \"contextvars.ContextVar.name\": (None, (3, 7)),\n    \"cookielib.Cookie.rfc2109\": ((2, 5), None),\n    \"cookielib.DefaultCookiePolicy.rfc2109_as_netscape\": ((2, 5), None),\n    \"crypt.METHOD_BLOWFISH\": (None, (3, 7)),\n    \"crypt.METHOD_CRYPT\": (None, (3, 3)),\n    \"crypt.METHOD_MD5\": (None, (3, 3)),\n    \"crypt.METHOD_SHA256\": (None, (3, 3)),\n    \"crypt.METHOD_SHA512\": (None, (3, 3)),\n    \"crypt.methods\": (None, (3, 3)),\n    \"csv.csvreader.fieldnames\": ((2, 6), (3, 0)),\n    \"csv.csvreader.line_num\": ((2, 5), (3, 0)),\n    \"curses.A_ITALIC\": (None, (3, 7)),\n    \"curses.ncurses_version\": (None, (3, 8)),\n    \"curses.window.encoding\": (None, (3, 3)),\n    \"datetime.datetime.fold\": (None, (3, 6)),\n    \"datetime.time.fold\": (None, (3, 6)),\n    \"decimal.HAVE_CONTEXTVAR\": (None, (3, 7)),  # Backported from 3.9 -> 3.8 -> 3.7\n    \"difflib.SequenceMatcher.bjunk\": (None, (3, 2)),\n    \"difflib.SequenceMatcher.bpopular\": (None, (3, 2)),\n    \"doctest.COMPARISON_FLAGS\": ((2, 4), (3, 0)),\n    \"doctest.DONT_ACCEPT_BLANKLINE\": ((2, 4), (3, 0)),\n    \"doctest.ELLIPSIS\": ((2, 4), (3, 0)),\n    \"doctest.FAIL_FAST\": (None, (3, 4)),\n    \"doctest.IGNORE_EXCEPTION_DETAIL\": ((2, 4), (3, 0)),\n    \"doctest.NORMALIZE_WHITESPACE\": ((2, 4), (3, 0)),\n    \"doctest.REPORTING_FLAGS\": ((2, 4), (3, 0)),\n    \"doctest.REPORT_CDIFF\": ((2, 4), (3, 0)),\n    \"doctest.REPORT_NDIFF\": ((2, 4), (3, 0)),\n    \"doctest.REPORT_ONLY_FIRST_FAILURE\": ((2, 4), (3, 0)),\n    \"doctest.REPORT_UDIFF\": ((2, 4), (3, 0)),\n    \"doctest.SKIP\": ((2, 5), (3, 0)),\n    \"email.message.Message.defects\": ((2, 4), (3, 0)),\n    \"email.policy.EmailPolicy.content_manager\": (None, (3, 4)),\n    \"email.policy.Policy.message_factory\": (None, (3, 6)),\n    \"fcntl.F_ADD_SEALS\": (None, (3, 8)),\n    \"fcntl.F_GETPATH\": (None, (3, 9)),\n    \"fcntl.F_GET_SEALS\": (None, (3, 8)),\n    \"fcntl.F_OFD_GETLK\": (None, (3, 9)),\n    \"fcntl.F_OFD_SETLK\": (None, (3, 9)),\n    \"fcntl.F_OFD_SETLKW\": (None, (3, 9)),\n    \"fcntl.F_SEAL_GROW\": (None, (3, 8)),\n    \"fcntl.F_SEAL_SEAL\": (None, (3, 8)),\n    \"fcntl.F_SEAL_SHRINK\": (None, (3, 8)),\n    \"fcntl.F_SEAL_WRITE\": (None, (3, 8)),\n    \"file.encoding\": ((2, 3), None),\n    \"file.errors\": ((2, 6), None),\n    \"filecmp.DEFAULT_IGNORES\": (None, (3, 4)),\n    \"gc.callbacks\": (None, (3, 3)),\n    \"gzip.GzipFile.mtime\": (None, (3, 1)),\n    \"hashlib.algorithms\": ((2, 7), None),\n    \"hashlib.algorithms_available\": ((2, 7), (3, 2)),\n    \"hashlib.algorithms_guaranteed\": ((2, 7), (3, 2)),\n    \"hashlib.hash.name\": (None, (3, 4)),\n    \"hmac.HMAC.block_size\": (None, (3, 4)),\n    \"hmac.HMAC.name\": (None, (3, 4)),\n    \"html.entities.html5\": (None, (3, 3)),\n    \"htmlentitydefs.codepoint2name\": ((2, 3), None),\n    \"htmlentitydefs.name2codepoint\": ((2, 3), None),\n    \"http.HTTPStatus.EARLY_HINTS\": (None, (3, 9)),\n    \"http.HTTPStatus.IM_A_TEAPOT\": (None, (3, 9)),\n    \"http.HTTPStatus.MISDIRECTED_REQUEST\": (None, (3, 7)),\n    \"http.HTTPStatus.TOO_EARLY\": (None, (3, 9)),\n    \"http.HTTPStatus.UNAVAILABLE_FOR_LEGAL_REASONS\": (None, (3, 8)),\n    \"http.client.HTTPConnection.blocksize\": (None, (3, 7)),\n    \"httplib.responses\": ((2, 5), None),\n    \"imaplib.IMAP4.utf8_enabled\": (None, (3, 5)),\n    \"importlib.machinery.BYTECODE_SUFFIXES\": (None, (3, 3)),\n    \"importlib.machinery.DEBUG_BYTECODE_SUFFIXES\": (None, (3, 3)),\n    \"importlib.machinery.EXTENSION_SUFFIXES\": (None, (3, 3)),\n    \"importlib.machinery.OPTIMIZED_BYTECODE_SUFFIXES\": (None, (3, 3)),\n    \"importlib.machinery.SOURCE_SUFFIXES\": (None, (3, 3)),\n    \"importlib.util.MAGIC_NUMBER\": (None, (3, 4)),\n    \"inspect.CO_ASYNC_GENERATOR\": (None, (3, 6)),\n    \"inspect.CO_COROUTINE\": (None, (3, 5)),\n    \"inspect.CO_ITERABLE_COROUTINE\": (None, (3, 5)),\n    \"inspect.Parameter.kind.description\": (None, (3, 8)),\n    \"io.SEEK_CUR\": ((2, 7), (3, 1)),\n    \"io.SEEK_END\": ((2, 7), (3, 1)),\n    \"io.SEEK_SET\": ((2, 7), (3, 1)),\n    \"io.TextIOWrapper.write_through\": (None, (3, 7)),\n    \"ipaddress.IPv4Address.is_global\": (None, (3, 4)),\n    \"ipaddress.IPv4Address.reverse_pointer\": (None, (3, 5)),\n    \"ipaddress.IPv6Address.is_global\": (None, (3, 4)),\n    \"keyword.softkwlist\": (None, (3, 9)),\n    \"logging.Formatter.default_msec_format\": (None, (3, 3)),\n    \"logging.Formatter.default_time_format\": (None, (3, 3)),\n    \"logging.LogRecord.funcName\": ((2, 5), (3, 0)),\n    \"logging.LogRecord.processName\": ((2, 6), (3, 0)),\n    \"logging.StreamHandler.terminator\": (None, (3, 2)),\n    \"logging.handlers.BaseRotatingHandler.name\": (None, (3, 3)),\n    \"logging.handlers.BaseRotatingHandler.rotator\": (None, (3, 3)),\n    \"logging.lastResort\": (None, (3, 2)),\n    \"lzma.LZMADecompressor.needs_input\": (None, (3, 5)),\n    \"marshal.version\": ((2, 4), (3, 0)),\n    \"math.inf\": (None, (3, 5)),\n    \"math.nan\": (None, (3, 5)),\n    \"math.tau\": (None, (3, 6)),\n    \"mmap.ACCESS_DEFAULT\": (None, (3, 7)),\n    \"mmap.MADV_AUTOSYNC\": (None, (3, 8)),\n    \"mmap.MADV_CORE\": (None, (3, 8)),\n    \"mmap.MADV_DODUMP\": (None, (3, 8)),\n    \"mmap.MADV_DOFORK\": (None, (3, 8)),\n    \"mmap.MADV_DONTDUMP\": (None, (3, 8)),\n    \"mmap.MADV_DONTFORK\": (None, (3, 8)),\n    \"mmap.MADV_DONTNEED\": (None, (3, 8)),\n    \"mmap.MADV_FREE\": (None, (3, 8)),\n    \"mmap.MADV_HUGEPAGE\": (None, (3, 8)),\n    \"mmap.MADV_HWPOISON\": (None, (3, 8)),\n    \"mmap.MADV_MERGEABLE\": (None, (3, 8)),\n    \"mmap.MADV_NOCORE\": (None, (3, 8)),\n    \"mmap.MADV_NOHUGEPAGE\": (None, (3, 8)),\n    \"mmap.MADV_NORMAL\": (None, (3, 8)),\n    \"mmap.MADV_NOSYNC\": (None, (3, 8)),\n    \"mmap.MADV_PROTECT\": (None, (3, 8)),\n    \"mmap.MADV_RANDOM\": (None, (3, 8)),\n    \"mmap.MADV_REMOVE\": (None, (3, 8)),\n    \"mmap.MADV_SEQUENTIAL\": (None, (3, 8)),\n    \"mmap.MADV_SOFT_OFFLINE\": (None, (3, 8)),\n    \"mmap.MADV_UNMERGEABLE\": (None, (3, 8)),\n    \"mmap.MADV_WILLNEED\": (None, (3, 8)),\n    \"mmap.mmap.closed\": (None, (3, 2)),\n    \"multiprocessing.Process.sentinel\": (None, (3, 3)),\n    \"nntplib.NNTP.nntp_implementation\": (None, (3, 2)),\n    \"nntplib.NNTP.nntp_version\": (None, (3, 2)),\n    \"os.CLD_CONTINUED\": (None, (3, 3)),\n    \"os.CLD_DUMPED\": (None, (3, 3)),\n    \"os.CLD_EXITED\": (None, (3, 3)),\n    \"os.CLD_KILLED\": (None, (3, 9)),\n    \"os.CLD_STOPPED\": (None, (3, 9)),\n    \"os.CLD_TRAPPED\": (None, (3, 3)),\n    \"os.EX_CANTCREAT\": ((2, 3), (3, 0)),\n    \"os.EX_CONFIG\": ((2, 3), (3, 0)),\n    \"os.EX_DATAERR\": ((2, 3), (3, 0)),\n    \"os.EX_IOERR\": ((2, 3), (3, 0)),\n    \"os.EX_NOHOST\": ((2, 3), (3, 0)),\n    \"os.EX_NOINPUT\": ((2, 3), (3, 0)),\n    \"os.EX_NOPERM\": ((2, 3), (3, 0)),\n    \"os.EX_NOTFOUND\": ((2, 3), (3, 0)),\n    \"os.EX_NOUSER\": ((2, 3), (3, 0)),\n    \"os.EX_OK\": ((2, 3), (3, 0)),\n    \"os.EX_OSERR\": ((2, 3), (3, 0)),\n    \"os.EX_OSFILE\": ((2, 3), (3, 0)),\n    \"os.EX_PROTOCOL\": ((2, 3), (3, 0)),\n    \"os.EX_SOFTWARE\": ((2, 3), (3, 0)),\n    \"os.EX_TEMPFAIL\": ((2, 3), (3, 0)),\n    \"os.EX_UNAVAILABLE\": ((2, 3), (3, 0)),\n    \"os.EX_USAGE\": ((2, 3), (3, 0)),\n    \"os.F_LOCK\": (None, (3, 3)),\n    \"os.F_TEST\": (None, (3, 3)),\n    \"os.F_TLOCK\": (None, (3, 3)),\n    \"os.F_ULOCK\": (None, (3, 3)),\n    \"os.GRND_NONBLOCK\": (None, (3, 6)),\n    \"os.GRND_RANDOM\": (None, (3, 6)),\n    \"os.MFD_ALLOW_SEALING\": (None, (3, 8)),\n    \"os.MFD_CLOEXEC\": (None, (3, 8)),\n    \"os.MFD_HUGETLB\": (None, (3, 8)),\n    \"os.MFD_HUGE_16GB\": (None, (3, 8)),\n    \"os.MFD_HUGE_16MB\": (None, (3, 8)),\n    \"os.MFD_HUGE_1GB\": (None, (3, 8)),\n    \"os.MFD_HUGE_1MB\": (None, (3, 8)),\n    \"os.MFD_HUGE_256MB\": (None, (3, 8)),\n    \"os.MFD_HUGE_2GB\": (None, (3, 8)),\n    \"os.MFD_HUGE_2MB\": (None, (3, 8)),\n    \"os.MFD_HUGE_32MB\": (None, (3, 8)),\n    \"os.MFD_HUGE_512KB\": (None, (3, 8)),\n    \"os.MFD_HUGE_512MB\": (None, (3, 8)),\n    \"os.MFD_HUGE_64KB\": (None, (3, 8)),\n    \"os.MFD_HUGE_8MB\": (None, (3, 8)),\n    \"os.MFD_HUGE_MASK\": (None, (3, 8)),\n    \"os.MFD_HUGE_SHIFT\": (None, (3, 8)),\n    \"os.O_CLOEXEC\": (None, (3, 3)),\n    \"os.O_PATH\": (None, (3, 4)),\n    \"os.O_TMPFILE\": (None, (3, 4)),\n    \"os.POSIX_FADV_DONTNEED\": (None, (3, 3)),\n    \"os.POSIX_FADV_NOREUSE\": (None, (3, 3)),\n    \"os.POSIX_FADV_NORMAL\": (None, (3, 3)),\n    \"os.POSIX_FADV_RANDOM\": (None, (3, 3)),\n    \"os.POSIX_FADV_SEQUENTIAL\": (None, (3, 3)),\n    \"os.POSIX_FADV_WILLNEED\": (None, (3, 3)),\n    \"os.POSIX_SPAWN_CLOSE\": (None, (3, 8)),\n    \"os.POSIX_SPAWN_DUP2\": (None, (3, 8)),\n    \"os.POSIX_SPAWN_OPEN\": (None, (3, 8)),\n    \"os.PRIO_PGRP\": (None, (3, 3)),\n    \"os.PRIO_PROCESS\": (None, (3, 3)),\n    \"os.PRIO_USER\": (None, (3, 3)),\n    \"os.P_ALL\": (None, (3, 3)),\n    \"os.P_PGID\": (None, (3, 3)),\n    \"os.P_PID\": (None, (3, 3)),\n    \"os.P_PIDFD\": (None, (3, 9)),\n    \"os.RTLD_DEEPBIND\": (None, (3, 3)),\n    \"os.RTLD_GLOBAL\": (None, (3, 3)),\n    \"os.RTLD_LAZY\": (None, (3, 3)),\n    \"os.RTLD_LOCAL\": (None, (3, 3)),\n    \"os.RTLD_NODELETE\": (None, (3, 3)),\n    \"os.RTLD_NOLOAD\": (None, (3, 3)),\n    \"os.RTLD_NOW\": (None, (3, 3)),\n    \"os.RWF_DSYNC\": (None, (3, 7)),\n    \"os.RWF_HIPRI\": (None, (3, 7)),\n    \"os.RWF_NOWAIT\": (None, (3, 7)),\n    \"os.RWF_SYNC\": (None, (3, 7)),\n    \"os.SCHED_BATCH\": (None, (3, 3)),\n    \"os.SCHED_FIFO\": (None, (3, 3)),\n    \"os.SCHED_IDLE\": (None, (3, 3)),\n    \"os.SCHED_OTHER\": (None, (3, 3)),\n    \"os.SCHED_RESET_ON_FORK\": (None, (3, 3)),\n    \"os.SCHED_RR\": (None, (3, 3)),\n    \"os.SCHED_SPORADIC\": (None, (3, 3)),\n    \"os.SEEK_CUR\": ((2, 5), (3, 0)),\n    \"os.SEEK_DATA\": (None, (3, 3)),\n    \"os.SEEK_END\": ((2, 5), (3, 0)),\n    \"os.SEEK_HOLE\": (None, (3, 3)),\n    \"os.SEEK_SET\": ((2, 5), (3, 0)),\n    \"os.SF_MNOWAIT\": (None, (3, 3)),\n    \"os.SF_NODISKIO\": (None, (3, 3)),\n    \"os.SF_SYNC\": (None, (3, 3)),\n    \"os.ST_APPEND\": (None, (3, 4)),\n    \"os.ST_IMMUTABLE\": (None, (3, 4)),\n    \"os.ST_MANDLOCK\": (None, (3, 4)),\n    \"os.ST_NOATIME\": (None, (3, 4)),\n    \"os.ST_NODEV\": (None, (3, 4)),\n    \"os.ST_NODIRATIME\": (None, (3, 4)),\n    \"os.ST_NOEXEC\": (None, (3, 4)),\n    \"os.ST_NOSUID\": (None, (3, 2)),\n    \"os.ST_RDONLY\": (None, (3, 2)),\n    \"os.ST_RELATIME\": (None, (3, 4)),\n    \"os.ST_SYNCHRONOUS\": (None, (3, 4)),\n    \"os.ST_WRITE\": (None, (3, 4)),\n    \"os.WCONTINUED\": ((2, 3), (3, 0)),\n    \"os.WEXITED\": (None, (3, 3)),\n    \"os.WNOWAIT\": (None, (3, 3)),\n    \"os.WSTOPPED\": (None, (3, 3)),\n    \"os.WUNTRACED\": ((2, 3), (3, 0)),\n    \"os.XATTR_CREATE\": (None, (3, 3)),\n    \"os.XATTR_REPLACE\": (None, (3, 3)),\n    \"os.XATTR_SIZE_MAX\": (None, (3, 3)),\n    \"os.devnull\": ((2, 4), (3, 0)),\n    \"os.environb\": (None, (3, 2)),\n    \"os.extsep\": ((2, 2), (3, 0)),\n    \"os.killpg\": ((2, 3), (3, 0)),\n    \"os.path.supports_unicode_filenames\": ((2, 3), (3, 0)),\n    \"os.stat.st_atime\": ((2, 2), (3, 0)),\n    \"os.stat.st_atime_ns\": (None, (3, 3)),\n    \"os.stat.st_attrs\": ((2, 2), (3, 0)),\n    \"os.stat.st_birthtime\": ((2, 5), (3, 0)),\n    \"os.stat.st_blksize\": ((2, 2), (3, 0)),\n    \"os.stat.st_blocks\": ((2, 2), (3, 0)),\n    \"os.stat.st_ctime\": ((2, 2), (3, 0)),\n    \"os.stat.st_ctime_ns\": (None, (3, 3)),\n    \"os.stat.st_dev\": ((2, 2), (3, 0)),\n    \"os.stat.st_file_attributes\": (None, (3, 5)),\n    \"os.stat.st_flags\": ((2, 2), (3, 0)),\n    \"os.stat.st_ftype\": ((2, 2), (3, 0)),\n    \"os.stat.st_gen\": ((2, 5), (3, 0)),\n    \"os.stat.st_gid\": ((2, 2), (3, 0)),\n    \"os.stat.st_ino\": ((2, 2), (3, 0)),\n    \"os.stat.st_mode\": ((2, 2), (3, 0)),\n    \"os.stat.st_mtime\": ((2, 2), (3, 0)),\n    \"os.stat.st_mtime_ns\": (None, (3, 3)),\n    \"os.stat.st_nlink\": ((2, 2), (3, 0)),\n    \"os.stat.st_obtype\": ((2, 2), (3, 0)),\n    \"os.stat.st_rdev\": ((2, 2), (3, 0)),\n    \"os.stat.st_reparse_tag\": (None, (3, 8)),\n    \"os.stat.st_size\": ((2, 2), (3, 0)),\n    \"os.stat.st_uid\": ((2, 2), (3, 0)),\n    \"os.statvfs.f_bavail\": ((2, 2), (3, 0)),\n    \"os.statvfs.f_bfree\": ((2, 2), (3, 0)),\n    \"os.statvfs.f_blocks\": ((2, 2), (3, 0)),\n    \"os.statvfs.f_bsize\": ((2, 2), (3, 0)),\n    \"os.statvfs.f_favail\": ((2, 2), (3, 0)),\n    \"os.statvfs.f_ffree\": ((2, 2), (3, 0)),\n    \"os.statvfs.f_files\": ((2, 2), (3, 0)),\n    \"os.statvfs.f_flag\": ((2, 2), (3, 0)),\n    \"os.statvfs.f_frsize\": ((2, 2), (3, 0)),\n    \"os.statvfs.f_fsid\": (None, (3, 7)),\n    \"os.statvfs.f_namemax\": ((2, 2), (3, 0)),\n    \"os.supports_bytes_environ\": (None, (3, 2)),\n    \"os.supports_dir_fd\": (None, (3, 3)),\n    \"os.supports_effective_ids\": (None, (3, 3)),\n    \"os.supports_fd\": (None, (3, 3)),\n    \"os.supports_follow_symlinks\": (None, (3, 3)),\n    \"pickle.HIGHEST_PROTOCOL\": ((2, 3), (3, 0)),\n    \"pickle.Pickler.dispatch_table\": (None, (3, 3)),\n    \"plistlib.FMT_BINARY\": (None, (3, 4)),\n    \"plistlib.FMT_XML\": (None, (3, 4)),\n    \"pstats.SortKey\": (None, (3, 7)),\n    \"pyclbr.Class.children\": (None, (3, 7)),\n    \"pyclbr.Class.parent\": (None, (3, 7)),\n    \"pyclbr.Function.children\": (None, (3, 7)),\n    \"pyclbr.Function.parent\": (None, (3, 7)),\n    \"range.start\": (None, (3, 3)),\n    \"range.step\": (None, (3, 3)),\n    \"range.stop\": (None, (3, 3)),\n    \"re.error.colno\": (None, (3, 5)),\n    \"re.error.lineno\": (None, (3, 5)),\n    \"re.error.msg\": (None, (3, 5)),\n    \"re.error.pattern\": (None, (3, 5)),\n    \"re.error.pos\": (None, (3, 5)),\n    \"repr.Repr.maxfrozenset\": ((2, 4), None),\n    \"repr.Repr.maxset\": ((2, 4), None),\n    \"resource.RLIMIT_MSGQUEUE\": (None, (3, 4)),\n    \"resource.RLIMIT_NICE\": (None, (3, 4)),\n    \"resource.RLIMIT_NPTS\": (None, (3, 4)),\n    \"resource.RLIMIT_RTPRIO\": (None, (3, 4)),\n    \"resource.RLIMIT_RTTIME\": (None, (3, 4)),\n    \"resource.RLIMIT_SBSIZE\": (None, (3, 4)),\n    \"resource.RLIMIT_SIGPENDING\": (None, (3, 4)),\n    \"resource.RLIMIT_SWAP\": (None, (3, 4)),\n    \"resource.RUSAGE_THREAD\": (None, (3, 2)),\n    \"resource.getrusage.ru_idrss\": ((2, 3), (3, 0)),\n    \"resource.getrusage.ru_inblock\": ((2, 3), (3, 0)),\n    \"resource.getrusage.ru_isrss\": ((2, 3), (3, 0)),\n    \"resource.getrusage.ru_ixrss\": ((2, 3), (3, 0)),\n    \"resource.getrusage.ru_majflt\": ((2, 3), (3, 0)),\n    \"resource.getrusage.ru_maxrss\": ((2, 3), (3, 0)),\n    \"resource.getrusage.ru_minflt\": ((2, 3), (3, 0)),\n    \"resource.getrusage.ru_msgrcv\": ((2, 3), (3, 0)),\n    \"resource.getrusage.ru_msgsnd\": ((2, 3), (3, 0)),\n    \"resource.getrusage.ru_nivcsw\": ((2, 3), (3, 0)),\n    \"resource.getrusage.ru_nsignals\": ((2, 3), (3, 0)),\n    \"resource.getrusage.ru_nswap\": ((2, 3), (3, 0)),\n    \"resource.getrusage.ru_nvcsw\": ((2, 3), (3, 0)),\n    \"resource.getrusage.ru_oublock\": ((2, 3), (3, 0)),\n    \"resource.getrusage.ru_stime\": ((2, 3), (3, 0)),\n    \"resource.getrusage.ru_utime\": ((2, 3), (3, 0)),\n    \"sched.scheduler.queue\": ((2, 6), (3, 0)),\n    \"select.EPOLLEXCLUSIVE\": (None, (3, 6)),\n    \"select.PIPE_BUF\": ((2, 7), (3, 2)),\n    \"select.devpoll.closed\": (None, (3, 4)),\n    \"shlex.shlex.eof\": ((2, 3), (3, 0)),\n    \"shlex.shlex.escape\": ((2, 3), (3, 0)),\n    \"shlex.shlex.escapedquotes\": ((2, 3), (3, 0)),\n    \"shlex.shlex.punctuation_chars\": (None, (3, 6)),\n    \"shlex.shlex.whitespace_split\": ((2, 3), (3, 0)),\n    \"shutil.rmtree.avoids_symlink_attacks\": (None, (3, 3)),\n    \"signal.CTRL_BREAK_EVENT\": ((2, 7), (3, 2)),\n    \"signal.CTRL_C_EVENT\": ((2, 7), (3, 2)),\n    \"signal.SIG_BLOCK\": (None, (3, 3)),\n    \"signal.SIG_SETMASK\": (None, (3, 3)),\n    \"signal.SIG_UNBLOCK\": (None, (3, 3)),\n    \"site.ENABLE_USER_SITE\": ((2, 6), (3, 0)),\n    \"site.PREFIXES\": ((2, 6), (3, 0)),\n    \"site.USER_BASE\": ((2, 6), (3, 0)),\n    \"site.USER_SITE\": ((2, 6), (3, 0)),\n    \"socket.AF_ALG\": (None, (3, 6)),\n    \"socket.AF_CAN\": (None, (3, 3)),\n    \"socket.AF_LINK\": (None, (3, 4)),\n    \"socket.AF_QIPCRTR\": (None, (3, 8)),\n    \"socket.AF_RDS\": (None, (3, 3)),\n    \"socket.AF_TIPC\": ((2, 6), (3, 0)),\n    \"socket.AF_VSOCK\": (None, (3, 7)),\n    \"socket.ALG_OP_DECRYPT\": (None, (3, 6)),\n    \"socket.ALG_OP_ENCRYPT\": (None, (3, 6)),\n    \"socket.ALG_OP_SIGN\": (None, (3, 6)),\n    \"socket.ALG_OP_VERIFY\": (None, (3, 6)),\n    \"socket.ALG_SET_AEAD_ASSOCLEN\": (None, (3, 6)),\n    \"socket.ALG_SET_AEAD_AUTHSIZE\": (None, (3, 6)),\n    \"socket.ALG_SET_IV\": (None, (3, 6)),\n    \"socket.ALG_SET_KEY\": (None, (3, 6)),\n    \"socket.ALG_SET_OP\": (None, (3, 6)),\n    \"socket.ALG_SET_PUBKEY\": (None, (3, 6)),\n    \"socket.CAN_BCM\": (None, (3, 4)),\n    \"socket.CAN_BCM_CAN_FD_FRAME\": (None, (3, 4)),\n    \"socket.CAN_BCM_RX_ANNOUNCE_RESUME\": (None, (3, 4)),\n    \"socket.CAN_BCM_RX_CHANGED\": (None, (3, 4)),\n    \"socket.CAN_BCM_RX_CHECK_DLC\": (None, (3, 4)),\n    \"socket.CAN_BCM_RX_DELETE\": (None, (3, 4)),\n    \"socket.CAN_BCM_RX_FILTER_ID\": (None, (3, 4)),\n    \"socket.CAN_BCM_RX_NO_AUTOTIMER\": (None, (3, 4)),\n    \"socket.CAN_BCM_RX_READ\": (None, (3, 4)),\n    \"socket.CAN_BCM_RX_RTR_FRAME\": (None, (3, 4)),\n    \"socket.CAN_BCM_RX_SETUP\": (None, (3, 4)),\n    \"socket.CAN_BCM_RX_STATUS\": (None, (3, 4)),\n    \"socket.CAN_BCM_RX_TIMEOUT\": (None, (3, 4)),\n    \"socket.CAN_BCM_SETTIMER\": (None, (3, 4)),\n    \"socket.CAN_BCM_STARTTIMER\": (None, (3, 4)),\n    \"socket.CAN_BCM_TX_ANNOUNCE\": (None, (3, 4)),\n    \"socket.CAN_BCM_TX_COUNTEVT\": (None, (3, 4)),\n    \"socket.CAN_BCM_TX_CP_CAN_ID\": (None, (3, 4)),\n    \"socket.CAN_BCM_TX_DELETE\": (None, (3, 4)),\n    \"socket.CAN_BCM_TX_EXPIRED\": (None, (3, 4)),\n    \"socket.CAN_BCM_TX_READ\": (None, (3, 4)),\n    \"socket.CAN_BCM_TX_RESET_MULTI_IDX\": (None, (3, 4)),\n    \"socket.CAN_BCM_TX_SEND\": (None, (3, 4)),\n    \"socket.CAN_BCM_TX_SETUP\": (None, (3, 4)),\n    \"socket.CAN_BCM_TX_STATUS\": (None, (3, 4)),\n    \"socket.CAN_EFF_FLAG\": (None, (3, 3)),\n    \"socket.CAN_EFF_MASK\": (None, (3, 3)),\n    \"socket.CAN_ERR_FLAG\": (None, (3, 3)),\n    \"socket.CAN_ERR_MASK\": (None, (3, 3)),\n    \"socket.CAN_ISOTP\": (None, (3, 7)),\n    \"socket.CAN_J1939\": (None, (3, 9)),\n    \"socket.CAN_RAW\": (None, (3, 3)),\n    \"socket.CAN_RAW_ERR_FILTER\": (None, (3, 3)),\n    \"socket.CAN_RAW_FD_FRAMES\": (None, (3, 5)),\n    \"socket.CAN_RAW_FILTER\": (None, (3, 3)),\n    \"socket.CAN_RAW_JOIN_FILTERS\": (None, (3, 9)),\n    \"socket.CAN_RAW_LOOPBACK\": (None, (3, 3)),\n    \"socket.CAN_RAW_RECV_OWN_MSGS\": (None, (3, 3)),\n    \"socket.CAN_RTR_FLAG\": (None, (3, 3)),\n    \"socket.CAN_SFF_MASK\": (None, (3, 3)),\n    \"socket.IOCTL_VM_SOCKETS_GET_LOCAL_CID\": (None, (3, 7)),\n    \"socket.IPPROTO_UDPLITE\": (None, (3, 9)),\n    \"socket.PF_CAN\": (None, (3, 3)),\n    \"socket.PF_RDS\": (None, (3, 3)),\n    \"socket.RCVALL_IPLEVEL\": ((2, 6), (3, 0)),\n    \"socket.RCVALL_MAX\": ((2, 6), (3, 0)),\n    \"socket.RCVALL_OFF\": ((2, 6), (3, 0)),\n    \"socket.RCVALL_ON\": ((2, 6), (3, 0)),\n    \"socket.RCVALL_SOCKETLEVELONLY\": ((2, 6), (3, 0)),\n    \"socket.RDS_CANCEL_SENT_TO\": (None, (3, 3)),\n    \"socket.RDS_CMSG_RDMA_ARGS\": (None, (3, 3)),\n    \"socket.RDS_CMSG_RDMA_DEST\": (None, (3, 3)),\n    \"socket.RDS_CMSG_RDMA_MAP\": (None, (3, 3)),\n    \"socket.RDS_CMSG_RDMA_STATUS\": (None, (3, 3)),\n    \"socket.RDS_CMSG_RDMA_UPDATE\": (None, (3, 3)),\n    \"socket.RDS_CONG_MONITOR\": (None, (3, 3)),\n    \"socket.RDS_FREE_MR\": (None, (3, 3)),\n    \"socket.RDS_GET_MR\": (None, (3, 3)),\n    \"socket.RDS_GET_MR_FOR_DEST\": (None, (3, 3)),\n    \"socket.RDS_RDMA_DONTWAIT\": (None, (3, 3)),\n    \"socket.RDS_RDMA_FENCE\": (None, (3, 3)),\n    \"socket.RDS_RDMA_INVALIDATE\": (None, (3, 3)),\n    \"socket.RDS_RDMA_NOTIFY_ME\": (None, (3, 3)),\n    \"socket.RDS_RDMA_READWRITE\": (None, (3, 3)),\n    \"socket.RDS_RDMA_SILENT\": (None, (3, 3)),\n    \"socket.RDS_RDMA_USE_ONCE\": (None, (3, 3)),\n    \"socket.RDS_RECVERR\": (None, (3, 3)),\n    \"socket.SIO_KEEPALIVE_VALS\": ((2, 6), (3, 0)),\n    \"socket.SIO_LOOPBACK_FAST_PATH\": (None, (3, 6)),\n    \"socket.SIO_RCVALL\": ((2, 6), (3, 0)),\n    \"socket.SOCK_CLOEXEC\": (None, (3, 2)),\n    \"socket.SOCK_NONBLOCK\": (None, (3, 2)),\n    \"socket.SOL_ALG\": (None, (3, 6)),\n    \"socket.SOL_CAN_BASE\": (None, (3, 3)),\n    \"socket.SOL_CAN_RAW\": (None, (3, 3)),\n    \"socket.SOL_RDS\": (None, (3, 3)),\n    \"socket.SOL_TIPC\": ((2, 6), (3, 0)),\n    \"socket.SO_DOMAIN\": (None, (3, 6)),\n    \"socket.SO_PASSSEC\": (None, (3, 6)),\n    \"socket.SO_PEERSEC\": (None, (3, 6)),\n    \"socket.SO_PROTOCOL\": (None, (3, 6)),\n    \"socket.SO_VM_SOCKETS_BUFFER_MAX_SIZE\": (None, (3, 7)),\n    \"socket.SO_VM_SOCKETS_BUFFER_MIN_SIZE\": (None, (3, 7)),\n    \"socket.SO_VM_SOCKETS_BUFFER_SIZE\": (None, (3, 7)),\n    \"socket.TCP_CONGESTION\": (None, (3, 6)),\n    \"socket.TCP_NOTSENT_LOWAT\": (None, (3, 7)),\n    \"socket.TCP_USER_TIMEOUT\": (None, (3, 6)),\n    \"socket.TIPC_ADDR_ID\": ((2, 6), (3, 0)),\n    \"socket.TIPC_ADDR_NAME\": ((2, 6), (3, 0)),\n    \"socket.TIPC_ADDR_NAMESEQ\": ((2, 6), (3, 0)),\n    \"socket.TIPC_CFG_SRV\": ((2, 6), (3, 0)),\n    \"socket.TIPC_CLUSTER_SCOPE\": ((2, 6), (3, 0)),\n    \"socket.TIPC_CONN_TIMEOUT\": ((2, 6), (3, 0)),\n    \"socket.TIPC_CRITICAL_IMPORTANCE\": ((2, 6), (3, 0)),\n    \"socket.TIPC_DEST_DROPPABLE\": ((2, 6), (3, 0)),\n    \"socket.TIPC_HIGH_IMPORTANCE\": ((2, 6), (3, 0)),\n    \"socket.TIPC_IMPORTANCE\": ((2, 6), (3, 0)),\n    \"socket.TIPC_LOW_IMPORTANCE\": ((2, 6), (3, 0)),\n    \"socket.TIPC_MEDIUM_IMPORTANCE\": ((2, 6), (3, 0)),\n    \"socket.TIPC_NODE_SCOPE\": ((2, 6), (3, 0)),\n    \"socket.TIPC_PUBLISHED\": ((2, 6), (3, 0)),\n    \"socket.TIPC_SRC_DROPPABLE\": ((2, 6), (3, 0)),\n    \"socket.TIPC_SUBSCR_TIMEOUT\": ((2, 6), (3, 0)),\n    \"socket.TIPC_SUB_CANCEL\": ((2, 6), (3, 0)),\n    \"socket.TIPC_SUB_PORTS\": ((2, 6), (3, 0)),\n    \"socket.TIPC_SUB_SERVICE\": ((2, 6), (3, 0)),\n    \"socket.TIPC_TOP_SRV\": ((2, 6), (3, 0)),\n    \"socket.TIPC_WAIT_FOREVER\": ((2, 6), (3, 0)),\n    \"socket.TIPC_WITHDRAWN\": ((2, 6), (3, 0)),\n    \"socket.TIPC_ZONE_SCOPE\": ((2, 6), (3, 0)),\n    \"socket.VMADDR_CID_ANY\": (None, (3, 7)),\n    \"socket.VMADDR_CID_HOST\": (None, (3, 7)),\n    \"socket.VMADDR_PORT_ANY\": (None, (3, 7)),\n    \"socket.has_ipv6\": ((2, 3), (3, 0)),\n    \"socket.socket.family\": ((2, 5), (3, 0)),\n    \"socket.socket.proto\": ((2, 5), (3, 0)),\n    \"socket.socket.type\": ((2, 5), (3, 0)),\n    \"socketserver.ForkingMixIn.block_on_close\": (None, (3, 7)),\n    \"socketserver.ThreadingMixIn.block_on_close\": (None, (3, 7)),\n    \"sqlite3.Connection.in_transaction\": (None, (3, 2)),\n    \"ssl.ALERT_DESCRIPTION_ACCESS_DENIED\": ((2, 7), (3, 4)),\n    \"ssl.ALERT_DESCRIPTION_BAD_CERTIFICATE\": ((2, 7), (3, 4)),\n    \"ssl.ALERT_DESCRIPTION_BAD_CERTIFICATE_HASH_VALUE\": ((2, 7), (3, 4)),\n    \"ssl.ALERT_DESCRIPTION_BAD_CERTIFICATE_STATUS_RESPONSE\": ((2, 7), (3, 4)),\n    \"ssl.ALERT_DESCRIPTION_BAD_RECORD_MAC\": ((2, 7), (3, 4)),\n    \"ssl.ALERT_DESCRIPTION_CERTIFICATE_EXPIRED\": ((2, 7), (3, 4)),\n    \"ssl.ALERT_DESCRIPTION_CERTIFICATE_REVOKED\": ((2, 7), (3, 4)),\n    \"ssl.ALERT_DESCRIPTION_CERTIFICATE_UNKNOWN\": ((2, 7), (3, 4)),\n    \"ssl.ALERT_DESCRIPTION_CERTIFICATE_UNOBTAINABLE\": ((2, 7), (3, 4)),\n    \"ssl.ALERT_DESCRIPTION_CLOSE_NOTIFY\": ((2, 7), (3, 4)),\n    \"ssl.ALERT_DESCRIPTION_DECODE_ERROR\": ((2, 7), (3, 4)),\n    \"ssl.ALERT_DESCRIPTION_DECOMPRESSION_FAILURE\": ((2, 7), (3, 4)),\n    \"ssl.ALERT_DESCRIPTION_DECRYPT_ERROR\": ((2, 7), (3, 4)),\n    \"ssl.ALERT_DESCRIPTION_HANDSHAKE_FAILURE\": ((2, 7), (3, 4)),\n    \"ssl.ALERT_DESCRIPTION_ILLEGAL_PARAMETER\": ((2, 7), (3, 4)),\n    \"ssl.ALERT_DESCRIPTION_INSUFFICIENT_SECURITY\": ((2, 7), (3, 4)),\n    \"ssl.ALERT_DESCRIPTION_INTERNAL_ERROR\": ((2, 7), (3, 4)),\n    \"ssl.ALERT_DESCRIPTION_NO_RENEGOTIATION\": ((2, 7), (3, 4)),\n    \"ssl.ALERT_DESCRIPTION_PROTOCOL_VERSION\": ((2, 7), (3, 4)),\n    \"ssl.ALERT_DESCRIPTION_RECORD_OVERFLOW\": ((2, 7), (3, 4)),\n    \"ssl.ALERT_DESCRIPTION_UNEXPECTED_MESSAGE\": ((2, 7), (3, 4)),\n    \"ssl.ALERT_DESCRIPTION_UNKNOWN_CA\": ((2, 7), (3, 4)),\n    \"ssl.ALERT_DESCRIPTION_UNKNOWN_PSK_IDENTITY\": ((2, 7), (3, 4)),\n    \"ssl.ALERT_DESCRIPTION_UNRECOGNIZED_NAME\": ((2, 7), (3, 4)),\n    \"ssl.ALERT_DESCRIPTION_UNSUPPORTED_CERTIFICATE\": ((2, 7), (3, 4)),\n    \"ssl.ALERT_DESCRIPTION_UNSUPPORTED_EXTENSION\": ((2, 7), (3, 4)),\n    \"ssl.ALERT_DESCRIPTION_USER_CANCELLED\": ((2, 7), (3, 4)),\n    \"ssl.CHANNEL_BINDING_TYPES\": ((2, 7), (3, 3)),\n    \"ssl.HAS_ALPN\": ((2, 7), (3, 5)),\n    \"ssl.HAS_ECDH\": ((2, 7), (3, 3)),\n    \"ssl.HAS_NEVER_CHECK_COMMON_NAME\": (None, (3, 7)),\n    \"ssl.HAS_NPN\": ((2, 7), (3, 3)),\n    \"ssl.HAS_SNI\": ((2, 7), (3, 2)),\n    \"ssl.HAS_SSLv2\": (None, (3, 7)),\n    \"ssl.HAS_SSLv3\": (None, (3, 7)),\n    \"ssl.HAS_TLSv1\": (None, (3, 7)),\n    \"ssl.HAS_TLSv1_1\": (None, (3, 7)),\n    \"ssl.HAS_TLSv1_2\": (None, (3, 7)),\n    \"ssl.HAS_TLSv1_3\": ((2, 7), (3, 7)),\n    \"ssl.OPENSSL_VERSION\": ((2, 7), (3, 2)),\n    \"ssl.OPENSSL_VERSION_INFO\": ((2, 7), (3, 2)),\n    \"ssl.OPENSSL_VERSION_NUMBER\": ((2, 7), (3, 2)),\n    \"ssl.OP_ALL\": ((2, 7), (3, 2)),\n    \"ssl.OP_CIPHER_SERVER_PREFERENCE\": ((2, 7), (3, 3)),\n    \"ssl.OP_ENABLE_MIDDLEBOX_COMPAT\": ((2, 7), (3, 8)),\n    \"ssl.OP_NO_COMPRESSION\": ((2, 7), (3, 3)),\n    \"ssl.OP_NO_RENEGOTIATION\": (None, (3, 7)),\n    \"ssl.OP_NO_SSLv2\": ((2, 7), (3, 2)),\n    \"ssl.OP_NO_SSLv3\": ((2, 7), (3, 2)),\n    \"ssl.OP_NO_TICKET\": (None, (3, 6)),\n    \"ssl.OP_NO_TLSv1\": ((2, 7), (3, 2)),\n    \"ssl.OP_NO_TLSv1_1\": ((2, 7), (3, 4)),\n    \"ssl.OP_NO_TLSv1_2\": ((2, 7), (3, 4)),\n    \"ssl.OP_NO_TLSv1_3\": ((2, 7), (3, 6)),\n    \"ssl.OP_SINGLE_DH_USE\": ((2, 7), (3, 3)),\n    \"ssl.OP_SINGLE_ECDH_USE\": ((2, 7), (3, 3)),\n    \"ssl.PROTOCOL_TLS\": ((2, 7), (3, 6)),\n    \"ssl.PROTOCOL_TLS_CLIENT\": (None, (3, 6)),\n    \"ssl.PROTOCOL_TLS_SERVER\": (None, (3, 6)),\n    \"ssl.PROTOCOL_TLSv1_1\": ((2, 7), (3, 4)),\n    \"ssl.PROTOCOL_TLSv1_2\": ((2, 7), (3, 4)),\n    \"ssl.Purpose.CLIENT_AUTH\": ((2, 7), (3, 4)),\n    \"ssl.Purpose.SERVER_AUTH\": ((2, 7), (3, 4)),\n    \"ssl.SSLContext.check_hostname\": (None, (3, 4)),\n    \"ssl.SSLContext.hostname_checks_common_name\": (None, (3, 7)),\n    \"ssl.SSLContext.keylog_filename\": (None, (3, 8)),\n    \"ssl.SSLContext.maximum_version\": (None, (3, 7)),\n    \"ssl.SSLContext.minimum_version\": (None, (3, 7)),\n    \"ssl.SSLContext.num_tickets\": (None, (3, 8)),\n    \"ssl.SSLContext.post_handshake_auth\": (None, (3, 8)),\n    \"ssl.SSLContext.sni_callback\": (None, (3, 7)),\n    \"ssl.SSLContext.sslobject_class\": (None, (3, 7)),\n    \"ssl.SSLContext.sslsocket_class\": (None, (3, 7)),\n    \"ssl.SSLContext.verify_flags\": (None, (3, 4)),\n    \"ssl.SSLError.library\": ((2, 7), (3, 3)),\n    \"ssl.SSLError.reason\": ((2, 7), (3, 3)),\n    \"ssl.SSLSocket.context\": ((2, 7), (3, 2)),\n    \"ssl.SSLSocket.server_hostname\": (None, (3, 2)),\n    \"ssl.SSLSocket.server_side\": (None, (3, 2)),\n    \"ssl.SSLSocket.session\": (None, (3, 6)),\n    \"ssl.SSLSocket.session_reused\": (None, (3, 6)),\n    \"ssl.VERIFY_CRL_CHECK_CHAIN\": ((2, 7), (3, 4)),\n    \"ssl.VERIFY_CRL_CHECK_LEAF\": ((2, 7), (3, 4)),\n    \"ssl.VERIFY_DEFAULT\": ((2, 7), (3, 4)),\n    \"ssl.VERIFY_X509_STRICT\": ((2, 7), (3, 4)),\n    \"ssl.VERIFY_X509_TRUSTED_FIRST\": ((2, 7), (3, 4)),\n    \"stat.FILE_ATTRIBUTE_ARCHIVE\": (None, (3, 5)),\n    \"stat.FILE_ATTRIBUTE_COMPRESSED\": (None, (3, 5)),\n    \"stat.FILE_ATTRIBUTE_DEVICE\": (None, (3, 5)),\n    \"stat.FILE_ATTRIBUTE_DIRECTORY\": (None, (3, 5)),\n    \"stat.FILE_ATTRIBUTE_ENCRYPTED\": (None, (3, 5)),\n    \"stat.FILE_ATTRIBUTE_HIDDEN\": (None, (3, 5)),\n    \"stat.FILE_ATTRIBUTE_INTEGRITY_STREAM\": (None, (3, 5)),\n    \"stat.FILE_ATTRIBUTE_NORMAL\": (None, (3, 5)),\n    \"stat.FILE_ATTRIBUTE_NOT_CONTENT_INDEXED\": (None, (3, 5)),\n    \"stat.FILE_ATTRIBUTE_NO_SCRUB_DATA\": (None, (3, 5)),\n    \"stat.FILE_ATTRIBUTE_OFFLINE\": (None, (3, 5)),\n    \"stat.FILE_ATTRIBUTE_READONLY\": (None, (3, 5)),\n    \"stat.FILE_ATTRIBUTE_REPARSE_POINT\": (None, (3, 5)),\n    \"stat.FILE_ATTRIBUTE_SPARSE_FILE\": (None, (3, 5)),\n    \"stat.FILE_ATTRIBUTE_SYSTEM\": (None, (3, 5)),\n    \"stat.FILE_ATTRIBUTE_TEMPORARY\": (None, (3, 5)),\n    \"stat.FILE_ATTRIBUTE_VIRTUAL\": (None, (3, 5)),\n    \"stat.IO_REPARSE_TAG_APPEXECLINK\": (None, (3, 8)),\n    \"stat.IO_REPARSE_TAG_MOUNT_POINT\": (None, (3, 8)),\n    \"stat.IO_REPARSE_TAG_SYMLINK\": (None, (3, 8)),\n    \"stat.S_IFDOOR\": (None, (3, 4)),\n    \"stat.S_IFPORT\": (None, (3, 4)),\n    \"stat.S_IFWHT\": (None, (3, 4)),\n    \"string.Template.braceidpattern\": (None, (3, 7)),\n    \"string.Template.flags\": (None, (3, 2)),\n    \"string.letters\": ((2, 0), None),\n    \"string.lowercase\": ((2, 0), None),\n    \"string.uppercase\": ((2, 0), None),\n    \"subprocess.ABOVE_NORMAL_PRIORITY_CLASS\": (None, (3, 7)),\n    \"subprocess.BELOW_NORMAL_PRIORITY_CLASS\": (None, (3, 7)),\n    \"subprocess.CREATE_BREAKAWAY_FROM_JOB\": (None, (3, 7)),\n    \"subprocess.CREATE_DEFAULT_ERROR_MODE\": (None, (3, 7)),\n    \"subprocess.CREATE_NO_WINDOW\": (None, (3, 7)),\n    \"subprocess.CalledProcessError.stderr\": (None, (3, 5)),\n    \"subprocess.CalledProcessError.stdout\": (None, (3, 5)),\n    \"subprocess.DETACHED_PROCESS\": (None, (3, 7)),\n    \"subprocess.DEVNULL\": (None, (3, 3)),\n    \"subprocess.HIGH_PRIORITY_CLASS\": (None, (3, 7)),\n    \"subprocess.IDLE_PRIORITY_CLASS\": (None, (3, 7)),\n    \"subprocess.NORMAL_PRIORITY_CLASS\": (None, (3, 7)),\n    \"subprocess.Popen.args\": (None, (3, 3)),\n    \"subprocess.REALTIME_PRIORITY_CLASS\": (None, (3, 7)),\n    \"subprocess.STARTUPINFO.lpAttributeList\": (None, (3, 7)),\n    \"subprocess.TimeoutExpired.stderr\": (None, (3, 5)),\n    \"subprocess.TimeoutExpired.stdout\": (None, (3, 5)),\n    \"sys.__breakpointhook__\": (None, (3, 7)),\n    \"sys.__interactivehook__\": (None, (3, 4)),\n    \"sys.__unraisablehook__\": (None, (3, 8)),\n    \"sys._xoptions\": (None, (3, 2)),\n    \"sys.abiflags\": (None, (3, 2)),\n    \"sys.api_version\": ((2, 3), (3, 0)),\n    \"sys.base_exec_prefix\": (None, (3, 3)),\n    \"sys.base_prefix\": (None, (3, 3)),\n    \"sys.dont_write_bytecode\": ((2, 6), (3, 0)),\n    \"sys.flags\": ((2, 6), (3, 0)),\n    \"sys.flags.dev_mode\": (None, (3, 7)),\n    \"sys.flags.hash_randomization\": ((2, 7), (3, 2)),\n    \"sys.flags.isolated\": (None, (3, 4)),\n    \"sys.flags.quiet\": (None, (3, 2)),\n    \"sys.flags.utf8_mode\": (None, (3, 7)),\n    \"sys.float_info\": ((2, 6), (3, 0)),\n    \"sys.float_repr_style\": ((2, 7), (3, 1)),\n    \"sys.getwindowsversion.build\": ((2, 7), (3, 0)),\n    \"sys.getwindowsversion.major\": ((2, 7), (3, 0)),\n    \"sys.getwindowsversion.minor\": ((2, 7), (3, 0)),\n    \"sys.getwindowsversion.platform\": ((2, 7), (3, 0)),\n    \"sys.getwindowsversion.product_type\": ((2, 7), (3, 0)),\n    \"sys.getwindowsversion.service_pack\": ((2, 7), (3, 0)),\n    \"sys.getwindowsversion.service_pack_major\": ((2, 7), (3, 0)),\n    \"sys.getwindowsversion.service_pack_minor\": ((2, 7), (3, 0)),\n    \"sys.getwindowsversion.suite_mask\": ((2, 7), (3, 0)),\n    \"sys.hash_info\": (None, (3, 2)),\n    \"sys.hash_info.algorithm\": (None, (3, 4)),\n    \"sys.hash_info.hash_bits\": (None, (3, 4)),\n    \"sys.hash_info.seed_bits\": (None, (3, 4)),\n    \"sys.implementation\": (None, (3, 3)),\n    \"sys.int_info\": (None, (3, 1)),\n    \"sys.long_info\": ((2, 7), None),\n    \"sys.platlibdir\": (None, (3, 9)),\n    \"sys.py3kwarning\": ((2, 6), None),\n    \"sys.pycache_prefix\": (None, (3, 8)),\n    \"sys.subversion\": ((2, 5), (3, 0)),\n    \"sys.thread_info\": (None, (3, 3)),\n    \"sys.version_info\": ((2, 0), (3, 0)),\n    \"sys.version_info.major\": ((2, 7), (3, 0)),\n    \"sys.version_info.micro\": ((2, 7), (3, 0)),\n    \"sys.version_info.minor\": ((2, 7), (3, 0)),\n    \"sys.version_info.releaselevel\": ((2, 7), (3, 0)),\n    \"tarfile.DEFAULT_FORMAT\": ((2, 6), (3, 0)),\n    \"tarfile.GNU_FORMAT\": ((2, 6), (3, 0)),\n    \"tarfile.PAX_FORMAT\": ((2, 6), (3, 0)),\n    \"tarfile.TarFile.pax_headers\": ((2, 6), (3, 0)),\n    \"tarfile.TarInfo.pax_headers\": ((2, 6), (3, 0)),\n    \"tarfile.USTAR_FORMAT\": ((2, 6), (3, 0)),\n    \"textwrap.TextWrapper.break_on_hyphens\": ((2, 6), (3, 0)),\n    \"textwrap.TextWrapper.drop_whitespace\": ((2, 6), (3, 0)),\n    \"textwrap.TextWrapper.max_lines\": (None, (3, 4)),\n    \"textwrap.TextWrapper.placeholder\": (None, (3, 4)),\n    \"textwrap.TextWrapper.tabsize\": (None, (3, 3)),\n    \"threading.TIMEOUT_MAX\": (None, (3, 2)),\n    \"threading.Thread.daemon\": ((2, 6), (3, 0)),\n    \"threading.Thread.ident\": ((2, 6), (3, 0)),\n    \"threading.Thread.name\": ((2, 6), (3, 0)),\n    \"threading.Thread.native_id\": (None, (3, 8)),\n    \"time.CLOCK_BOOTTIME\": (None, (3, 7)),\n    \"time.CLOCK_HIGHRES\": (None, (3, 3)),\n    \"time.CLOCK_MONOTONIC\": (None, (3, 3)),\n    \"time.CLOCK_MONOTONIC_RAW\": (None, (3, 3)),\n    \"time.CLOCK_PROCESS_CPUTIME_ID\": (None, (3, 3)),\n    \"time.CLOCK_PROF\": (None, (3, 7)),\n    \"time.CLOCK_REALTIME\": (None, (3, 3)),\n    \"time.CLOCK_TAI\": (None, (3, 9)),\n    \"time.CLOCK_THREAD_CPUTIME_ID\": (None, (3, 3)),\n    \"time.CLOCK_UPTIME\": (None, (3, 7)),\n    \"time.CLOCK_UPTIME_RAW\": (None, (3, 8)),\n    \"time.struct_time.tm_gmtoff\": (None, (3, 3)),\n    \"time.struct_time.tm_zone\": (None, (3, 3)),\n    \"token.ASYNC\": (None, (3, 5)),\n    \"token.AWAIT\": (None, (3, 5)),\n    \"token.COLONEQUAL\": (None, (3, 8)),\n    \"token.COMMENT\": (None, (3, 7)),\n    \"token.ENCODING\": (None, (3, 7)),\n    \"token.NL\": (None, (3, 7)),\n    \"token.TYPE_COMMENT\": (None, (3, 8)),\n    \"token.TYPE_IGNORE\": (None, (3, 8)),\n    \"tracemalloc.Filter.domain\": (None, (3, 6)),\n    \"tracemalloc.Trace.domain\": (None, (3, 6)),\n    \"tracemalloc.Traceback.total_nframe\": (None, (3, 9)),\n    \"types.AsyncGeneratorType\": (None, (3, 6)),\n    \"types.BooleanType\": ((2, 3), None),\n    \"types.CellType\": (None, (3, 8)),\n    \"types.ClassMethodDescriptorType\": (None, (3, 7)),\n    \"types.CoroutineType\": (None, (3, 5)),\n    \"types.GeneratorType\": ((2, 2), (3, 0)),\n    \"types.GetSetDescriptorType\": ((2, 5), (3, 0)),\n    \"types.MemberDescriptorType\": ((2, 5), (3, 0)),\n    \"types.MethodDescriptorType\": (None, (3, 7)),\n    \"types.MethodWrapperType\": (None, (3, 7)),\n    \"types.StringTypes\": ((2, 2), None),\n    \"types.WrapperDescriptorType\": (None, (3, 7)),\n    \"typing.Annotated\": (None, (3, 9)),\n    \"typing.Final\": (None, (3, 8)),\n    \"typing.Literal\": (None, (3, 8)),\n    \"typing.NoReturn\": (None, (3, 5)),\n    \"typing.TYPE_CHECKING\": (None if not bp(\"typing\", config) else (2, 7), (3, 5)),\n    \"unicodedata.ucd_3_2_0\": ((2, 3), (3, 0)),\n    \"unicodedata.unidata_version\": ((2, 3), (3, 0)),\n    \"unittest.TestCase.longMessage\": ((2, 7), (3, 1)),\n    \"unittest.TestCase.maxDiff\": ((2, 7), (3, 2)),\n    \"unittest.TestLoader.errors\": (None, (3, 5)),\n    \"unittest.TestLoader.testNamePatterns\": (None, (3, 7)),\n    \"unittest.TestResult.buffer\": ((2, 7), (3, 2)),\n    \"unittest.TestResult.failfast\": ((2, 7), (3, 2)),\n    \"unittest.TestResult.skipped\": ((2, 7), (3, 1)),\n    \"unittest.TestResult.tb_locals\": (None, (3, 5)),\n    \"unittest.mock.Mock.call_args.args\": (None, (3, 8)),\n    \"unittest.mock.Mock.call_args.kwargs\": (None, (3, 8)),\n    \"urllib.error.HTTPError.headers\": (None, (3, 4)),\n    \"urllib.request.Request.method\": (None, (3, 3)),\n    \"urllib.response.addinfourl.status\": (None, (3, 9)),\n    \"urlparse.urlparse.fragment\": ((2, 5), None),\n    \"urlparse.urlparse.hostname\": ((2, 5), None),\n    \"urlparse.urlparse.netloc\": ((2, 5), None),\n    \"urlparse.urlparse.params\": ((2, 5), None),\n    \"urlparse.urlparse.password\": ((2, 5), None),\n    \"urlparse.urlparse.path\": ((2, 5), None),\n    \"urlparse.urlparse.port\": ((2, 5), None),\n    \"urlparse.urlparse.query\": ((2, 5), None),\n    \"urlparse.urlparse.scheme\": ((2, 5), None),\n    \"urlparse.urlparse.username\": ((2, 5), None),\n    \"urlparse.urlsplit.fragment\": ((2, 5), None),\n    \"urlparse.urlsplit.hostname\": ((2, 5), None),\n    \"urlparse.urlsplit.netloc\": ((2, 5), None),\n    \"urlparse.urlsplit.password\": ((2, 5), None),\n    \"urlparse.urlsplit.path\": ((2, 5), None),\n    \"urlparse.urlsplit.port\": ((2, 5), None),\n    \"urlparse.urlsplit.query\": ((2, 5), None),\n    \"urlparse.urlsplit.scheme\": ((2, 5), None),\n    \"urlparse.urlsplit.username\": ((2, 5), None),\n    \"uuid.UUID.is_safe\": (None, (3, 7)),\n    \"weakref.ref.__callback__\": (None, (3, 4)),\n    \"winreg.REG_QWORD\": (None, (3, 6)),\n    \"winreg.REG_QWORD_LITTLE_ENDIAN\": (None, (3, 6)),\n    \"xml.dom.DOMSTRING_SIZE_ERR\": ((2, 1), (3, 0)),\n    \"xml.dom.EMPTY_NAMESPACE\": ((2, 2), (3, 0)),\n    \"xml.dom.HIERARCHY_REQUEST_ERR\": ((2, 1), (3, 0)),\n    \"xml.dom.INDEX_SIZE_ERR\": ((2, 1), (3, 0)),\n    \"xml.dom.INUSE_ATTRIBUTE_ERR\": ((2, 1), (3, 0)),\n    \"xml.dom.INVALID_ACCESS_ERR\": ((2, 1), (3, 0)),\n    \"xml.dom.INVALID_CHARACTER_ERR\": ((2, 1), (3, 0)),\n    \"xml.dom.INVALID_MODIFICATION_ERR\": ((2, 1), (3, 0)),\n    \"xml.dom.INVALID_STATE_ERR\": ((2, 1), (3, 0)),\n    \"xml.dom.NAMESPACE_ERR\": ((2, 1), (3, 0)),\n    \"xml.dom.NOT_FOUND_ERR\": ((2, 1), (3, 0)),\n    \"xml.dom.NOT_SUPPORTED_ERR\": ((2, 1), (3, 0)),\n    \"xml.dom.NO_DATA_ALLOWED_ERR\": ((2, 1), (3, 0)),\n    \"xml.dom.NO_MODIFICATION_ALLOWED_ERR\": ((2, 1), (3, 0)),\n    \"xml.dom.SYNTAX_ERR\": ((2, 1), (3, 0)),\n    \"xml.dom.WRONG_DOCUMENT_ERR\": ((2, 1), (3, 0)),\n    \"xml.dom.XHTML_NAMESPACE\": ((2, 2), (3, 0)),\n    \"xml.dom.XMLNS_NAMESPACE\": ((2, 2), (3, 0)),\n    \"xml.dom.XML_NAMESPACE\": ((2, 2), (3, 0)),\n    \"xml.parsers.expat.ExpatError.code\": ((2, 1), (3, 0)),\n    \"xml.parsers.expat.ExpatError.lineno\": ((2, 1), (3, 0)),\n    \"xml.parsers.expat.ExpatError.offset\": ((2, 1), (3, 0)),\n    \"xml.parsers.expat.XMLParserType.CurrentByteIndex\": ((2, 4), (3, 0)),\n    \"xml.parsers.expat.XMLParserType.CurrentColumnNumber\": ((2, 4), (3, 0)),\n    \"xml.parsers.expat.XMLParserType.CurrentLineNumber\": ((2, 4), (3, 0)),\n    \"xml.parsers.expat.XMLParserType.buffer_size\": ((2, 3), (3, 0)),\n    \"xml.parsers.expat.XMLParserType.buffer_text\": ((2, 3), (3, 0)),\n    \"xml.parsers.expat.XMLParserType.buffer_used\": ((2, 3), (3, 0)),\n    \"xml.parsers.expat.XMLParserType.ordered_attributes\": ((2, 1), (3, 0)),\n    \"xml.parsers.expat.XMLParserType.returns_unicode\": ((2, 0), None),\n    \"xml.parsers.expat.XMLParserType.specified_attributes\": ((2, 1), (3, 0)),\n    \"xml.parsers.expat.errors.codes\": (None, (3, 2)),\n    \"xml.parsers.expat.errors.messages\": (None, (3, 2)),\n    \"xmlrpc.server.SimpleXMLRPCRequestHandler.rpc_paths\": (None, (3, 0)),\n    \"zipfile.ZIP_BZIP2\": (None, (3, 3)),\n    \"zipfile.ZIP_LZMA\": (None, (3, 3)),\n    \"zlib.Decompress.eof\": (None, (3, 3)),\n    \"zlib.ZLIB_RUNTIME_VERSION\": (None, (3, 3)),\n\n    # Decorators\n    \"abc.abstractclassmethod\": (None, (3, 2)),\n    \"abc.abstractstaticmethod\": (None, (3, 2)),\n    \"contextlib.asynccontextmanager\": (None, (3, 7)),\n    \"functools.cache\": (None, (3, 9)),\n    \"functools.cached_property\": (None, (3, 8)),\n    \"functools.lru_cache\": (None, (3, 2)),\n    \"functools.partial_method\": (None, (3, 4)),\n    \"functools.singledispatch\": (None, (3, 4)),\n    \"functools.singledispatchmethod\": (None, (3, 8)),\n    \"functools.total_ordering\": ((2, 7), (3, 2)),\n    \"reprlib.recursive_repr\": (None, (3, 2)),\n    \"typing.final\": (None, (3, 8)),\n    \"typing.runtime_checkable\": (None, (3, 8)),\n    \"unittest.expectedFailure\": ((2, 7), (3, 1)),\n    \"unittest.skip\": ((2, 7), (3, 1)),\n    \"unittest.skipIf\": ((2, 7), (3, 1)),\n    \"unittest.skipUnless\": ((2, 7), (3, 1)),\n   }\n\n# Keyword arguments requirements: (function, keyword argument) -> (requirements)\n# Notes:\n#  `bytes.decode(encoding, errors)` and `bytearray.decode(encoding, errors)`\n#  are documented to be in 3.1 but they do not actually work, they work on 3.2+\nKWARGS_REQS = {\n  (\"BaseHTTPServer.BaseHTTPRequestHandler.date_time_string\", \"timestamp\"): ((2, 5), None),\n  (\"ConfigParser.ConfigParser\", \"allow_no_value\"): ((2, 6), None),\n  (\"ConfigParser.ConfigParser\", \"dict_type\"): ((2, 6), None),\n  (\"ConfigParser.RawConfigParser\", \"allow_no_value\"): ((2, 6), None),\n  (\"ConfigParser.RawConfigParser\", \"dict_type\"): ((2, 6), None),\n  (\"ConfigParser.SafeConfigParser\", \"allow_no_value\"): ((2, 6), None),\n  (\"ConfigParser.SafeConfigParser\", \"dict_type\"): ((2, 6), None),\n  (\"ImportError\", \"name\"): (None, (3, 3)),\n  (\"ImportError\", \"path\"): (None, (3, 3)),\n  (\"OSError\", \"filename2\"): (None, (3, 4)),\n  (\"Queue.Queue.get\", \"timeout\"): ((2, 3), None),\n  (\"Queue.Queue.put\", \"timeout\"): ((2, 3), None),\n  (\"SimpleXMLRPCServer.CGIXMLRPCRequestHandler\", \"allow_none\"): ((2, 5), None),\n  (\"SimpleXMLRPCServer.CGIXMLRPCRequestHandler\", \"encoding\"): ((2, 5), None),\n  (\"SimpleXMLRPCServer.SimpleXMLRPCServer\", \"allow_none\"): ((2, 5), None),\n  (\"SimpleXMLRPCServer.SimpleXMLRPCServer\", \"bind_and_active\"): ((2, 6), None),\n  (\"SimpleXMLRPCServer.SimpleXMLRPCServer\", \"encoding\"): ((2, 5), None),\n  (\"SimpleXMLRPCServer.SimpleXMLRPCServer.register_instance\", \"allow_dotted_names\"): ((2, 3), None),\n  (\"Tkinter.Tk\", \"useTk\"): ((2, 4), None),\n  (\"__import__\", \"level\"): ((2, 5), (3, 0)),\n  (\"_thread.lock.acquire\", \"timeout\"): (None, (3, 2)),\n  (\"argparse.ArgumentParser\", \"allow_abbrev\"): (None, (3, 5)),\n  (\"argparse.ArgumentParser\", \"exit_on_error\"): (None, (3, 9)),\n  (\"argparse.ArgumentParser.add_subparsers\", \"required\"): (None, (3, 7)),\n  (\"argparse.FileType\", \"encodings\"): (None, (3, 4)),\n  (\"argparse.FileType\", \"errors\"): (None, (3, 4)),\n  (\"ast.dump\", \"indent\"): (None, (3, 9)),\n  (\"ast.parse\", \"feature_version\"): (None, (3, 8)),\n  (\"ast.parse\", \"type_comments\"): (None, (3, 8)),\n  (\"asyncio.Future.add_done_callback\", \"context\"): (None, (3, 7)),\n  (\"asyncio.Future.cancel\", \"msg\"): (None, (3, 9)),\n  (\"asyncio.Task\", \"name\"): (None, (3, 8)),\n  (\"asyncio.Task.cancel\", \"msg\"): (None, (3, 9)),\n  (\"asyncio.create_task\", \"name\"): (None, (3, 8)),\n  (\"asyncio.loop.call_at\", \"context\"): (None, (3, 7)),\n  (\"asyncio.loop.call_later\", \"context\"): (None, (3, 7)),\n  (\"asyncio.loop.call_soon\", \"context\"): (None, (3, 7)),\n  (\"asyncio.loop.call_soon_threadsafe\", \"context\"): (None, (3, 7)),\n  (\"asyncio.loop.connect_accepted_socket\", \"ssl_handshake_timeout\"): (None, (3, 7)),\n  (\"asyncio.loop.create_connection\", \"happy_eyeballs_delay\"): (None, (3, 8)),\n  (\"asyncio.loop.create_connection\", \"interleave\"): (None, (3, 8)),\n  (\"asyncio.loop.create_connection\", \"ssl_handshake_timeout\"): (None, (3, 7)),\n  (\"asyncio.loop.create_datagram_endpoint\", \"allow_broadcast\"): (None, (3, 4)),\n  (\"asyncio.loop.create_datagram_endpoint\", \"family\"): (None, (3, 4)),\n  (\"asyncio.loop.create_datagram_endpoint\", \"flags\"): (None, (3, 4)),\n  (\"asyncio.loop.create_datagram_endpoint\", \"proto\"): (None, (3, 4)),\n  (\"asyncio.loop.create_datagram_endpoint\", \"reuse_address\"): (None, (3, 4)),\n  (\"asyncio.loop.create_datagram_endpoint\", \"reuse_port\"): (None, (3, 4)),\n  (\"asyncio.loop.create_datagram_endpoint\", \"sock\"): (None, (3, 4)),\n  (\"asyncio.loop.create_server\", \"ssl_handshake_timeout\"): (None, (3, 7)),\n  (\"asyncio.loop.create_server\", \"start_serving\"): (None, (3, 7)),\n  (\"asyncio.loop.create_task\", \"name\"): (None, (3, 8)),\n  (\"asyncio.loop.create_unix_connection\", \"ssl_handshake_timeout\"): (None, (3, 7)),\n  (\"asyncio.loop.create_unix_server\", \"ssl_handshake_timeout\"): (None, (3, 7)),\n  (\"asyncio.loop.create_unix_server\", \"start_serving\"): (None, (3, 7)),\n  (\"asyncio.open_connection\", \"ssl_handshake_timeout\"): (None, (3, 7)),\n  (\"asyncio.open_unix_connection\", \"ssl_handshake_timeout\"): (None, (3, 7)),\n  (\"asyncio.start_server\", \"ssl_handshake_timeout\"): (None, (3, 7)),\n  (\"asyncio.start_server\", \"start_serving\"): (None, (3, 7)),\n  (\"asyncio.start_unix_server\", \"ssl_handshake_timeout\"): (None, (3, 7)),\n  (\"asyncio.start_unix_server\", \"start_serving\"): (None, (3, 7)),\n  (\"bdb.Bdb\", \"skip\"): ((2, 7), (3, 1)),\n  (\"binascii.b2a_base64\", \"newline\"): (None, (3, 6)),\n  (\"binascii.b2a_hex\", \"bytes_per_sep\"): (None, (3, 8)),\n  (\"binascii.b2a_hex\", \"sep\"): (None, (3, 8)),\n  (\"binascii.b2a_uu\", \"backtick\"): (None, (3, 7)),\n  (\"binascii.hexlify\", \"bytes_per_sep\"): (None, (3, 8)),\n  (\"binascii.hexlify\", \"sep\"): (None, (3, 8)),\n  (\"bytearray.decode\", \"encoding\"): (None, (3, 2)),\n  (\"bytearray.decode\", \"errors\"): (None, (3, 2)),\n  (\"bytearray.hex\", \"bytes_per_sep\"): (None, (3, 8)),\n  (\"bytearray.hex\", \"sep\"): (None, (3, 8)),\n  (\"bytearray.translate\", \"delete\"): (None, (3, 6)),\n  (\"bytes.decode\", \"encoding\"): (None, (3, 2)),\n  (\"bytes.decode\", \"errors\"): (None, (3, 2)),\n  (\"bytes.hex\", \"bytes_per_sep\"): (None, (3, 8)),\n  (\"bytes.hex\", \"sep\"): (None, (3, 8)),\n  (\"bytes.translate\", \"delete\"): (None, (3, 6)),\n  (\"bz2.BZ2Decompressor.decompress\", \"max_length\"): (None, (3, 5)),\n  (\"cgi.parse_multipart\", \"encoding\"): (None, (3, 7)),\n  (\"cgi.parse_multipart\", \"errors\"): (None, (3, 7)),\n  (\"cmath.log\", \"base\"): ((2, 4), (3, 0)),\n  (\"cmd.Cmd\", \"stdin\"): ((2, 3), (3, 0)),\n  (\"cmd.Cmd\", \"stdout\"): ((2, 3), (3, 0)),\n  (\"code.interact\", \"exitmsg\"): (None, (3, 6)),\n  (\"codecs.StreamReader.read\", \"chars\"): ((2, 4), (3, 0)),\n  (\"codecs.StreamReader.read\", \"firstline\"): ((2, 4), (3, 0)),\n  (\"codecs.StreamReader.readline\", \"keepends\"): ((2, 4), (3, 0)),\n  (\"collections.ChainMap.new_child\", \"m\"): (None, (3, 4)),\n  (\"collections.abc.ByteString.index\", \"start\"): (None, (3, 5)),\n  (\"collections.abc.ByteString.index\", \"stop\"): (None, (3, 5)),\n  (\"collections.abc.MutableSequence.index\", \"start\"): (None, (3, 5)),\n  (\"collections.abc.MutableSequence.index\", \"stop\"): (None, (3, 5)),\n  (\"collections.abc.Sequence.index\", \"start\"): (None, (3, 5)),\n  (\"collections.abc.Sequence.index\", \"stop\"): (None, (3, 5)),\n  (\"collections.deque\", \"maxlen\"): ((2, 6), (3, 0)),\n  (\"collections.namedtuple\", \"defaults\"): (None, (3, 7)),\n  (\"collections.namedtuple\", \"module\"): (None, (3, 6)),\n  (\"collections.namedtuple\", \"rename\"): ((2, 7), (3, 1)),\n  (\"compile\", \"dont_inherit\"): ((2, 3), (3, 0)),\n  (\"compile\", \"flags\"): ((2, 3), (3, 0)),\n  (\"compile\", \"optimize\"): (None, (3, 2)),\n  (\"compileall.compile_dir\", \"hardlink_dupes\"): (None, (3, 9)),\n  (\"compileall.compile_dir\", \"invalidation_mode\"): (None, (3, 7)),\n  (\"compileall.compile_dir\", \"legacy\"): (None, (3, 2)),\n  (\"compileall.compile_dir\", \"limit_sl_dest\"): (None, (3, 9)),\n  (\"compileall.compile_dir\", \"optimize\"): (None, (3, 2)),\n  (\"compileall.compile_dir\", \"prependdir\"): (None, (3, 9)),\n  (\"compileall.compile_dir\", \"stripdir\"): (None, (3, 9)),\n  (\"compileall.compile_file\", \"hardlink_dupes\"): (None, (3, 9)),\n  (\"compileall.compile_file\", \"invalidation_mode\"): (None, (3, 7)),\n  (\"compileall.compile_file\", \"limit_sl_dest\"): (None, (3, 9)),\n  (\"compileall.compile_file\", \"prependdir\"): (None, (3, 9)),\n  (\"compileall.compile_file\", \"stripdir\"): (None, (3, 9)),\n  (\"compileall.compile_path\", \"invalidation_mode\"): (None, (3, 7)),\n  (\"compileall.compile_path\", \"legacy\"): (None, (3, 2)),\n  (\"compileall.compile_path\", \"optimize\"): (None, (3, 2)),\n  (\"concurrent.futures.Executor.map\", \"chunksize\"): (None, (3, 5)),\n  (\"concurrent.futures.Executor.shutdown\", \"cancel_futures\"): (None, (3, 9)),\n  (\"concurrent.futures.ProcessPoolExecutor\", \"initargs\"): (None, (3, 7)),\n  (\"concurrent.futures.ProcessPoolExecutor\", \"initializer\"): (None, (3, 7)),\n  (\"concurrent.futures.ProcessPoolExecutor\", \"mp_context\"): (None, (3, 7)),\n  (\"concurrent.futures.ThreadPoolExecutor\", \"initargs\"): (None, (3, 7)),\n  (\"concurrent.futures.ThreadPoolExecutor\", \"initializer\"): (None, (3, 7)),\n  (\"concurrent.futures.ThreadPoolExecutor\", \"thread_name_prefix\"): (None, (3, 6)),\n  (\"configparser.ConfigParser\", \"allow_no_value\"): (None, (3, 2)),\n  (\"configparser.ConfigParser\", \"comment_prefixes\"): (None, (3, 2)),\n  (\"configparser.ConfigParser\", \"converters\"): (None, (3, 5)),\n  (\"configparser.ConfigParser\", \"default_section\"): (None, (3, 2)),\n  (\"configparser.ConfigParser\", \"delimiters\"): (None, (3, 2)),\n  (\"configparser.ConfigParser\", \"empty_lines_in_values\"): (None, (3, 2)),\n  (\"configparser.ConfigParser\", \"interpolation\"): (None, (3, 2)),\n  (\"configparser.ConfigParser\", \"strict\"): (None, (3, 2)),\n  (\"configparser.ConfigParser.read\", \"encoding\"): (None, (3, 2)),\n  (\"configparser.DuplicateSectionError\", \"lineno\"): (None, (3, 2)),\n  (\"configparser.DuplicateSectionError\", \"source\"): (None, (3, 2)),\n  (\"configparser.ParsingError\", \"source\"): (None, (3, 2)),\n  (\"crypt.mksalt\", \"rounds\"): (None, (3, 7)),\n  (\"ctypes.CDLL\", \"use_errno\"): ((2, 6), (3, 0)),\n  (\"ctypes.CDLL\", \"use_last_error\"): ((2, 6), (3, 0)),\n  (\"ctypes.CDLL\", \"winmode\"): (None, (3, 8)),\n  (\"ctypes.CFUNCTYPE\", \"use_errno\"): ((2, 6), (3, 0)),\n  (\"ctypes.CFUNCTYPE\", \"use_last_error\"): ((2, 6), (3, 0)),\n  (\"ctypes.OleDLL\", \"use_errno\"): ((2, 6), (3, 0)),\n  (\"ctypes.OleDLL\", \"use_last_error\"): ((2, 6), (3, 0)),\n  (\"ctypes.OleDLL\", \"winmode\"): (None, (3, 8)),\n  (\"ctypes.WinDLL\", \"use_errno\"): ((2, 6), (3, 0)),\n  (\"ctypes.WinDLL\", \"use_last_error\"): ((2, 6), (3, 0)),\n  (\"ctypes.WinDLL\", \"winmode\"): (None, (3, 8)),\n  (\"ctypes.byref\", \"offset\"): ((2, 6), (3, 0)),\n  (\"datetime.datetime\", \"fold\"): (None, (3, 6)),\n  (\"datetime.datetime.combine\", \"tzinfo\"): (None, (3, 6)),\n  (\"datetime.datetime.isoformat\", \"timespec\"): (None, (3, 6)),\n  (\"datetime.datetime.replace\", \"fold\"): (None, (3, 6)),\n  (\"datetime.time.isoformat\", \"timespec\"): (None, (3, 6)),\n  (\"datetime.time.replace\", \"fold\"): (None, (3, 6)),\n  (\"difflib.HtmlDiff.make_file\", \"charset\"): (None, (3, 5)),\n  (\"difflib.SequenceMatcher\", \"autojunk\"): ((2, 7), (3, 2)),\n  (\"dis.dis\", \"depth\"): (None, (3, 7)),\n  (\"dis.dis\", \"file\"): (None, (3, 4)),\n  (\"dis.disassemble\", \"file\"): (None, (3, 4)),\n  (\"dis.disco\", \"file\"): (None, (3, 4)),\n  (\"dis.distb\", \"file\"): (None, (3, 4)),\n  (\"dis.show_code\", \"file\"): (None, (3, 4)),\n  (\"dis.stack_effect\", \"jump\"): (None, (3, 8)),\n  (\"doctest.DocFileSuite\", \"encoding\"): ((2, 5), (3, 0)),\n  (\"doctest.DocTestSuite\", \"extraglobs\"): ((2, 4), (3, 0)),\n  (\"doctest.DocTestSuite\", \"globs\"): ((2, 4), (3, 0)),\n  (\"doctest.DocTestSuite\", \"optionflags\"): ((2, 4), (3, 0)),\n  (\"doctest.DocTestSuite\", \"setUp\"): ((2, 4), (3, 0)),\n  (\"doctest.DocTestSuite\", \"tearDown\"): ((2, 4), (3, 0)),\n  (\"doctest.DocTestSuite\", \"test_finder\"): ((2, 4), (3, 0)),\n  (\"doctest.debug\", \"pm\"): ((2, 4), (3, 0)),\n  (\"doctest.testfile\", \"encoding\"): ((2, 5), (3, 0)),\n  (\"doctest.testmod\", \"exclude_empty\"): ((2, 4), (3, 0)),\n  (\"doctest.testmod\", \"extraglobs\"): ((2, 4), (3, 0)),\n  (\"doctest.testmod\", \"optionflags\"): ((2, 3), (3, 0)),\n  (\"doctest.testmod\", \"raise_on_error\"): ((2, 4), (3, 0)),\n  (\"email.generator.BytesGenerator\", \"policy\"): (None, (3, 3)),\n  (\"email.generator.Generator\", \"policy\"): (None, (3, 3)),\n  (\"email.generator.Generator.flatten\", \"linesep\"): (None, (3, 2)),\n  (\"email.header.Header.encode\", \"linesep\"): (None, (3, 2)),\n  (\"email.message.EmailMessage.set_param\", \"replace\"): (None, (3, 4)),\n  (\"email.message.Message\", \"policy\"): (None, (3, 3)),\n  (\"email.message.Message.as_string\", \"policy\"): (None, (3, 4)),\n  (\"email.message.Message.get_param\", \"unquote\"): ((2, 2), (3, 0)),\n  (\"email.message.Message.get_params\", \"unquote\"): ((2, 2), (3, 0)),\n  (\"email.message.Message.set_param\", \"replace\"): (None, (3, 4)),\n  (\"email.message.Message.set_payload\", \"charset\"): ((2, 2), (3, 0)),\n  (\"email.message_from_binary_file\", \"policy\"): (None, (3, 3)),\n  (\"email.message_from_bytes\", \"policy\"): (None, (3, 3)),\n  (\"email.message_from_file\", \"policy\"): (None, (3, 3)),\n  (\"email.message_from_file\", \"strict\"): ((2, 2), (3, 0)),\n  (\"email.message_from_string\", \"policy\"): (None, (3, 3)),\n  (\"email.message_from_string\", \"strict\"): ((2, 2), (3, 0)),\n  (\"email.mime.application.MIMEApplication\", \"policy\"): (None, (3, 6)),\n  (\"email.mime.audio.MIMEAudio\", \"policy\"): (None, (3, 6)),\n  (\"email.mime.base.MIMEBase\", \"policy\"): (None, (3, 6)),\n  (\"email.mime.image.MIMEImage\", \"policy\"): (None, (3, 6)),\n  (\"email.mime.message.MIMEMessage\", \"policy\"): (None, (3, 6)),\n  (\"email.mime.multipart.MIMEMultipart\", \"policy\"): (None, (3, 6)),\n  (\"email.mime.text.MIMEText\", \"policy\"): (None, (3, 6)),\n  (\"email.parser.BytesFeedParser\", \"policy\"): (None, (3, 3)),\n  (\"email.parser.BytesParser\", \"policy\"): (None, (3, 3)),\n  (\"email.parser.FeedParser\", \"policy\"): (None, (3, 3)),\n  (\"email.parser.Parser\", \"policy\"): (None, (3, 3)),\n  (\"email.policy.Policy\", \"mangle_from_\"): (None, (3, 5)),\n  (\"email.utils.formatdate\", \"charset\"): (None, (3, 3)),\n  (\"email.utils.make_msgid\", \"domain\"): (None, (3, 2)),\n  (\"enum.Enum\", \"start\"): (None, (3, 5)),\n  (\"enumerate\", \"start\"): ((2, 6), (3, 0)),\n  (\"fileinput.FileInput\", \"mode\"): ((2, 5), (3, 0)),\n  (\"fileinput.FileInput\", \"openhook\"): ((2, 5), (3, 0)),\n  (\"fileinput.hook_encoded\", \"errors\"): (None, (3, 6)),\n  (\"fileinput.input\", \"mode\"): ((2, 5), (3, 0)),\n  (\"fileinput.input\", \"openhook\"): ((2, 5), (3, 0)),\n  (\"ftplib.FTP\", \"encoding\"): (None, (3, 9)),\n  (\"ftplib.FTP\", \"source_address\"): (None, (3, 3)),\n  (\"ftplib.FTP\", \"timeout\"): ((2, 6), (3, 0)),\n  (\"ftplib.FTP.connect\", \"source_address\"): (None, (3, 3)),\n  (\"ftplib.FTP.connect\", \"timeout\"): ((2, 6), (3, 0)),\n  (\"ftplib.FTP.storbinary\", \"callback\"): ((2, 6), (3, 0)),\n  (\"ftplib.FTP.storbinary\", \"rest\"): ((2, 7), (3, 2)),\n  (\"ftplib.FTP.storlines\", \"callback\"): ((2, 6), (3, 0)),\n  (\"ftplib.FTP_TLS\", \"context\"): ((2, 7), (3, 2)),\n  (\"ftplib.FTP_TLS\", \"encoding\"): (None, (3, 9)),\n  (\"ftplib.FTP_TLS\", \"source_address\"): (None, (3, 3)),\n  (\"functools.lru_cache\", \"typed\"): (None, (3, 3)),\n  (\"functools.lru_cache\", \"user_function\"): (None, (3, 8)),\n  (\"gc.collect\", \"generation\"): ((2, 5), (3, 0)),\n  (\"gc.get_objects\", \"generation\"): (None, (3, 8)),\n  (\"getpass.getpass\", \"stream\"): ((2, 5), (3, 0)),\n  (\"gettext.NullTranslations.install\", \"names\"): ((2, 5), (3, 0)),\n  (\"gettext.install\", \"codeset\"): ((2, 4), (3, 0)),\n  (\"gettext.install\", \"names\"): ((2, 5), (3, 0)),\n  (\"gettext.translation\", \"codeset\"): ((2, 4), (3, 0)),\n  (\"glob.glob\", \"recursive\"): (None, (3, 5)),\n  (\"glob.iglob\", \"recursive\"): (None, (3, 5)),\n  (\"gzip.GzipFile\", \"mtime\"): ((2, 7), (3, 1)),\n  (\"gzip.compress\", \"mtime\"): (None, (3, 8)),\n  (\"gzip.open\", \"encoding\"): (None, (3, 3)),\n  (\"gzip.open\", \"errors\"): (None, (3, 3)),\n  (\"gzip.open\", \"newline\"): (None, (3, 3)),\n  (\"hashlib.blake2b\", \"usedforsecurity\"): (None, (3, 9)),\n  (\"hashlib.blake2s\", \"usedforsecurity\"): (None, (3, 9)),\n  (\"hashlib.md5\", \"usedforsecurity\"): (None, (3, 9)),\n  (\"hashlib.new\", \"usedforsecurity\"): (None, (3, 9)),\n  (\"hashlib.sha1\", \"usedforsecurity\"): (None, (3, 9)),\n  (\"hashlib.sha224\", \"usedforsecurity\"): (None, (3, 9)),\n  (\"hashlib.sha256\", \"usedforsecurity\"): (None, (3, 9)),\n  (\"hashlib.sha384\", \"usedforsecurity\"): (None, (3, 9)),\n  (\"hashlib.sha3_224\", \"usedforsecurity\"): (None, (3, 9)),\n  (\"hashlib.sha3_256\", \"usedforsecurity\"): (None, (3, 9)),\n  (\"hashlib.sha3_384\", \"usedforsecurity\"): (None, (3, 9)),\n  (\"hashlib.sha3_512\", \"usedforsecurity\"): (None, (3, 9)),\n  (\"hashlib.sha512\", \"usedforsecurity\"): (None, (3, 9)),\n  (\"hashlib.shake_128\", \"usedforsecurity\"): (None, (3, 9)),\n  (\"hashlib.shake_256\", \"usedforsecurity\"): (None, (3, 9)),\n  (\"heapq.merge\", \"key\"): (None, (3, 5)),\n  (\"heapq.merge\", \"reverse\"): (None, (3, 5)),\n  (\"heapq.nlargest\", \"key\"): ((2, 5), (3, 0)),\n  (\"heapq.nsmallest\", \"key\"): ((2, 5), (3, 0)),\n  (\"html.parser.HTMLParser\", \"convert_charrefs\"): (None, (3, 4)),\n  (\"http.client.HTTPConnection\", \"blocksize\"): (None, (3, 7)),\n  (\"http.client.HTTPConnection\", \"source_address\"): (None, (3, 2)),\n  (\"http.client.HTTPConnection.endheaders\", \"encode_chunked\"): (None, (3, 6)),\n  (\"http.client.HTTPConnection.request\", \"encode_chunked\"): (None, (3, 6)),\n  (\"http.client.HTTPSConnection\", \"check_hostname\"): (None, (3, 2)),\n  (\"http.client.HTTPSConnection\", \"context\"): (None, (3, 2)),\n  (\"http.client.HTTPSConnection\", \"source_address\"): (None, (3, 2)),\n  (\"http.server.BaseHTTPRequestHandler.send_error\", \"explain\"): (None, (3, 4)),\n  (\"httplib.HTTPConnection\", \"source_address\"): ((2, 7), None),\n  (\"httplib.HTTPConnection\", \"timeout\"): ((2, 6), None),\n  (\"httplib.HTTPConnection.endheaders\", \"message_body\"): ((2, 7), None),\n  (\"httplib.HTTPConnection.putrequest\", \"skip_accept_encoding\"): ((2, 4), None),\n  (\"httplib.HTTPSConnection\", \"context\"): ((2, 7), None),\n  (\"httplib.HTTPSConnection\", \"source_address\"): ((2, 7), None),\n  (\"httplib.HTTPSConnection\", \"timeout\"): ((2, 6), None),\n  (\"imaplib.IMAP4\", \"timeout\"): (None, (3, 9)),\n  (\"imaplib.IMAP4.open\", \"timeout\"): (None, (3, 9)),\n  (\"imaplib.IMAP4_SSL\", \"ssl_context\"): (None, (3, 3)),\n  (\"imaplib.IMAP4_SSL\", \"timeout\"): (None, (3, 9)),\n  (\"importlib.util.cache_from_source\", \"optimization\"): (None, (3, 5)),\n  (\"inspect.signature\", \"follow_wrapped\"): (None, (3, 5)),\n  (\"io.FileIO\", \"opener\"): (None, (3, 3)),\n  (\"io.TextIOWrapper\", \"write_through\"): (None, (3, 3)),\n  (\"itertools.accumulate\", \"func\"): (None, (3, 3)),\n  (\"itertools.accumulate\", \"initial\"): (None, (3, 8)),\n  (\"itertools.count\", \"step\"): ((2, 7), (3, 1)),\n  (\"json.JSONDecoder\", \"object_pairs_hook\"): ((2, 7), (3, 1)),\n  (\"json.load\", \"object_pairs_hook\"): ((2, 7), (3, 1)),\n  (\"linecache.getline\", \"module_globals\"): ((2, 5), (3, 0)),\n  (\"locale.format\", \"monetary\"): ((2, 5), (3, 0)),\n  (\"locale.format_string\", \"monetary\"): (None, (3, 7)),\n  (\"logging.FileHandler\", \"delay\"): ((2, 6), (3, 0)),\n  (\"logging.Formatter\", \"style\"): (None, (3, 2)),\n  (\"logging.Formatter\", \"validate\"): (None, (3, 8)),\n  (\"logging.LogRecord\", \"func\"): ((2, 5), (3, 0)),\n  (\"logging.Logger.critical\", \"stack_info\"): (None, (3, 2)),\n  (\"logging.Logger.critical\", \"stacklevel\"): (None, (3, 8)),\n  (\"logging.Logger.debug\", \"stack_info\"): (None, (3, 2)),\n  (\"logging.Logger.debug\", \"stacklevel\"): (None, (3, 8)),\n  (\"logging.Logger.error\", \"stack_info\"): (None, (3, 2)),\n  (\"logging.Logger.error\", \"stacklevel\"): (None, (3, 8)),\n  (\"logging.Logger.exception\", \"stack_info\"): (None, (3, 2)),\n  (\"logging.Logger.exception\", \"stacklevel\"): (None, (3, 8)),\n  (\"logging.Logger.info\", \"stack_info\"): (None, (3, 2)),\n  (\"logging.Logger.info\", \"stacklevel\"): (None, (3, 8)),\n  (\"logging.Logger.log\", \"stack_info\"): (None, (3, 2)),\n  (\"logging.Logger.log\", \"stacklevel\"): (None, (3, 8)),\n  (\"logging.Logger.makeRecord\", \"extra\"): ((2, 5), (3, 0)),\n  (\"logging.Logger.makeRecord\", \"func\"): ((2, 5), (3, 0)),\n  (\"logging.Logger.warn\", \"stack_info\"): (None, (3, 2)),\n  (\"logging.Logger.warn\", \"stacklevel\"): (None, (3, 8)),\n  (\"logging.Logger.warning\", \"stack_info\"): (None, (3, 2)),\n  (\"logging.Logger.warning\", \"stacklevel\"): (None, (3, 8)),\n  (\"logging.basicConfig\", \"datefmt\"): ((2, 4), (3, 0)),\n  (\"logging.basicConfig\", \"encoding\"): (None, (3, 9)),\n  (\"logging.basicConfig\", \"errors\"): (None, (3, 9)),\n  (\"logging.basicConfig\", \"filemode\"): ((2, 4), (3, 0)),\n  (\"logging.basicConfig\", \"filename\"): ((2, 4), (3, 0)),\n  (\"logging.basicConfig\", \"force\"): (None, (3, 8)),\n  (\"logging.basicConfig\", \"format\"): ((2, 4), (3, 0)),\n  (\"logging.basicConfig\", \"handlers\"): (None, (3, 3)),\n  (\"logging.basicConfig\", \"level\"): ((2, 4), (3, 0)),\n  (\"logging.basicConfig\", \"stream\"): ((2, 4), (3, 0)),\n  (\"logging.basicConfig\", \"style\"): (None, (3, 2)),\n  (\"logging.config.fileConfig\", \"disable_existing_loggers\"): ((2, 6), (3, 0)),\n  (\"logging.config.listen\", \"verify\"): (None, (3, 4)),\n  (\"logging.critical\", \"extra\"): ((2, 5), (3, 0)),\n  (\"logging.critical\", \"stack_info\"): (None, (3, 2)),\n  (\"logging.critical\", \"stacklevel\"): (None, (3, 8)),\n  (\"logging.debug\", \"extra\"): ((2, 5), (3, 0)),\n  (\"logging.debug\", \"stack_info\"): (None, (3, 2)),\n  (\"logging.debug\", \"stacklevel\"): (None, (3, 8)),\n  (\"logging.error\", \"extra\"): ((2, 5), (3, 0)),\n  (\"logging.error\", \"stack_info\"): (None, (3, 2)),\n  (\"logging.error\", \"stacklevel\"): (None, (3, 8)),\n  (\"logging.exception\", \"extra\"): ((2, 5), (3, 0)),\n  (\"logging.exception\", \"stack_info\"): (None, (3, 2)),\n  (\"logging.exception\", \"stacklevel\"): (None, (3, 8)),\n  (\"logging.handlers.HTTPHandler\", \"context\"): (None, (3, 5)),\n  (\"logging.handlers.MemoryHandler\", \"flushOnClose\"): (None, (3, 6)),\n  (\"logging.handlers.QueueListener\", \"respect_handler_level\"): (None, (3, 5)),\n  (\"logging.handlers.RotatingFileHandler\", \"delay\"): ((2, 6), (3, 0)),\n  (\"logging.handlers.RotatingFileHandler\", \"errors\"): (None, (3, 9)),\n  (\"logging.handlers.SMTPHandler\", \"credentials\"): ((2, 6), (3, 0)),\n  (\"logging.handlers.SMTPHandler\", \"secure\"): ((2, 7), (3, 0)),\n  (\"logging.handlers.SMTPHandler\", \"timeout\"): (None, (3, 3)),\n  (\"logging.handlers.SysLogHandler\", \"socktype\"): ((2, 7), (3, 2)),\n  (\"logging.handlers.TimedRotatingFileHandler\", \"atTime\"): (None, (3, 4)),\n  (\"logging.handlers.TimedRotatingFileHandler\", \"delay\"): ((2, 6), (3, 0)),\n  (\"logging.handlers.TimedRotatingFileHandler\", \"errors\"): (None, (3, 9)),\n  (\"logging.handlers.TimedRotatingFileHandler\", \"utc\"): ((2, 6), (3, 0)),\n  (\"logging.handlers.WatchedFileHandler\", \"errors\"): (None, (3, 9)),\n  (\"logging.info\", \"extra\"): ((2, 5), (3, 0)),\n  (\"logging.info\", \"stack_info\"): (None, (3, 2)),\n  (\"logging.info\", \"stacklevel\"): (None, (3, 8)),\n  (\"logging.log\", \"extra\"): ((2, 5), (3, 0)),\n  (\"logging.log\", \"stack_info\"): (None, (3, 2)),\n  (\"logging.log\", \"stacklevel\"): (None, (3, 8)),\n  (\"logging.warn\", \"stack_info\"): (None, (3, 2)),\n  (\"logging.warn\", \"stacklevel\"): (None, (3, 8)),\n  (\"logging.warning\", \"extra\"): ((2, 5), (3, 0)),\n  (\"logging.warning\", \"stack_info\"): (None, (3, 2)),\n  (\"logging.warning\", \"stacklevel\"): (None, (3, 8)),\n  (\"lzma.LZMADecompressor.decompress\", \"max_length\"): (None, (3, 5)),\n  (\"marshal.dump\", \"version\"): ((2, 4), (3, 0)),\n  (\"marshal.dumps\", \"version\"): ((2, 4), (3, 0)),\n  (\"math.log\", \"base\"): ((2, 3), (3, 0)),\n  (\"max\", \"default\"): (None, (3, 4)),\n  (\"max\", \"key\"): ((2, 5), (3, 0)),\n  (\"memoryview.hex\", \"bytes_per_sep\"): (None, (3, 8)),\n  (\"memoryview.hex\", \"sep\"): (None, (3, 8)),\n  (\"min\", \"default\"): (None, (3, 4)),\n  (\"min\", \"key\"): ((2, 5), (3, 0)),\n  (\"multiprocessing.Pool\", \"maxtasksperchild\"): ((2, 7), (3, 2)),\n  (\"multiprocessing.Process\", \"daemon\"): (None, (3, 3)),\n  (\"multiprocessing.pool.Pool\", \"context\"): (None, (3, 4)),\n  (\"multiprocessing.pool.Pool\", \"maxtasksperchild\"): ((2, 7), (3, 2)),\n  (\"nis.cat\", \"domain\"): ((2, 5), (3, 0)),\n  (\"nis.maps\", \"domain\"): ((2, 5), (3, 0)),\n  (\"nis.match\", \"domain\"): ((2, 5), (3, 0)),\n  (\"nntplib.NNTP\", \"usenetrc\"): ((2, 4), (3, 0)),\n  (\"nntplib.NNTP.list\", \"group_pattern\"): (None, (3, 2)),\n  (\"open\", \"opener\"): (None, (3, 3)),\n  (\"os.access\", \"dir_fd\"): (None, (3, 3)),\n  (\"os.access\", \"effective_ids\"): (None, (3, 3)),\n  (\"os.access\", \"follow_symlinks\"): (None, (3, 3)),\n  (\"os.chflags\", \"follow_symlinks\"): (None, (3, 3)),\n  (\"os.chmod\", \"dir_fd\"): (None, (3, 3)),\n  (\"os.chmod\", \"follow_symlinks\"): (None, (3, 3)),\n  (\"os.chown\", \"dir_fd\"): (None, (3, 3)),\n  (\"os.chown\", \"follow_symlinks\"): (None, (3, 3)),\n  (\"os.dup2\", \"inheritable\"): (None, (3, 4)),\n  (\"os.link\", \"dst_dir_fd\"): (None, (3, 3)),\n  (\"os.link\", \"follow_symlinks\"): (None, (3, 3)),\n  (\"os.link\", \"src_dir_fd\"): (None, (3, 3)),\n  (\"os.lstat\", \"dir_fd\"): (None, (3, 3)),\n  (\"os.makedirs\", \"exist_ok\"): (None, (3, 2)),\n  (\"os.mkdir\", \"dir_fd\"): (None, (3, 3)),\n  (\"os.mkfifo\", \"dir_fd\"): (None, (3, 3)),\n  (\"os.mknod\", \"dir_fd\"): (None, (3, 3)),\n  (\"os.open\", \"dir_fd\"): (None, (3, 3)),\n  (\"os.readlink\", \"dir_fd\"): (None, (3, 3)),\n  (\"os.remove\", \"dir_fd\"): (None, (3, 3)),\n  (\"os.rename\", \"dst_dir_fd\"): (None, (3, 3)),\n  (\"os.rename\", \"src_dir_fd\"): (None, (3, 3)),\n  (\"os.rmdir\", \"dir_fd\"): (None, (3, 3)),\n  (\"os.sendfile\", \"in_fd\"): (None, (3, 9)),\n  (\"os.sendfile\", \"out_fd\"): (None, (3, 9)),\n  (\"os.startfile\", \"operation\"): ((2, 5), (3, 0)),\n  (\"os.stat\", \"dir_fd\"): (None, (3, 3)),\n  (\"os.stat\", \"follow_symlinks\"): (None, (3, 3)),\n  (\"os.symlink\", \"dir_fd\"): (None, (3, 3)),\n  (\"os.unlink\", \"dir_fd\"): (None, (3, 3)),\n  (\"os.utime\", \"dir_fd\"): (None, (3, 3)),\n  (\"os.utime\", \"follow_symlinks\"): (None, (3, 3)),\n  (\"os.utime\", \"ns\"): (None, (3, 3)),\n  (\"os.walk\", \"followlinks\"): ((2, 6), (3, 0)),\n  (\"pathlib.Path.mkdir\", \"exist_ok\"): (None, (3, 5)),\n  (\"pathlib.Path.resolve\", \"strict\"): (None, (3, 6)),\n  (\"pathlib.Path.unlink\", \"missing_ok\"): (None, (3, 8)),\n  (\"pdb.Pdb\", \"nosigint\"): (None, (3, 2)),\n  (\"pdb.Pdb\", \"readrc\"): (None, (3, 6)),\n  (\"pdb.Pdb\", \"skip\"): ((2, 7), (3, 1)),\n  (\"pdb.set_trace\", \"header\"): (None, (3, 7)),\n  (\"pickle.Pickler\", \"buffer_callback\"): (None, (3, 8)),\n  (\"pickle.Pickler\", \"protocol\"): ((2, 3), (3, 0)),\n  (\"pickle.Unpickler\", \"buffers\"): (None, (3, 8)),\n  (\"pickle.dump\", \"buffer_callback\"): (None, (3, 8)),\n  (\"pickle.dump\", \"protocol\"): ((2, 3), (3, 0)),\n  (\"pickle.dumps\", \"buffer_callback\"): (None, (3, 8)),\n  (\"pickle.dumps\", \"protocol\"): ((2, 3), (3, 0)),\n  (\"pickle.load\", \"buffers\"): (None, (3, 8)),\n  (\"pickle.loads\", \"buffers\"): (None, (3, 8)),\n  (\"pickletools.dis\", \"annotate\"): (None, (3, 2)),\n  (\"poplib.POP3\", \"timeout\"): ((2, 6), (3, 0)),\n  (\"poplib.POP3_SSL\", \"context\"): (None, (3, 2)),\n  (\"pow\", \"base\"): (None, (3, 8)),\n  (\"pow\", \"exp\"): (None, (3, 8)),\n  (\"pow\", \"mod\"): (None, (3, 8)),\n  (\"pprint.PrettyPrinter\", \"compact\"): (None, (3, 4)),\n  (\"pprint.PrettyPrinter\", \"sort_dicts\"): (None, (3, 8)),\n  (\"pprint.pformat\", \"compact\"): (None, (3, 4)),\n  (\"pprint.pformat\", \"depth\"): ((2, 4), (3, 0)),\n  (\"pprint.pformat\", \"indent\"): ((2, 4), (3, 0)),\n  (\"pprint.pformat\", \"sort_dicts\"): (None, (3, 8)),\n  (\"pprint.pformat\", \"width\"): ((2, 4), (3, 0)),\n  (\"pprint.pprint\", \"compact\"): (None, (3, 4)),\n  (\"pprint.pprint\", \"depth\"): ((2, 4), (3, 0)),\n  (\"pprint.pprint\", \"indent\"): ((2, 4), (3, 0)),\n  (\"pprint.pprint\", \"sort_dicts\"): (None, (3, 8)),\n  (\"pprint.pprint\", \"width\"): ((2, 4), (3, 0)),\n  (\"print\", \"flush\"): (None, (3, 3)),\n  (\"py_compile.compile\", \"invalidation_mode\"): (None, (3, 7)),\n  (\"py_compile.compile\", \"optimize\"): (None, (3, 2)),\n  (\"py_compile.compile\", \"quiet\"): (None, (3, 8)),\n  (\"random.sample\", \"counts\"): (None, (3, 9)),\n  (\"re.findall\", \"flags\"): ((2, 4), (3, 0)),\n  (\"re.finditer\", \"flags\"): ((2, 4), (3, 0)),\n  (\"re.split\", \"flags\"): ((2, 7), (3, 1)),\n  (\"re.sub\", \"flags\"): ((2, 7), (3, 1)),\n  (\"re.subn\", \"flags\"): ((2, 7), (3, 1)),\n  (\"sched.scheduler.enter\", \"kwargs\"): (None, (3, 3)),\n  (\"sched.scheduler.enterabs\", \"kwargs\"): (None, (3, 3)),\n  (\"sched.scheduler.run\", \"blocking\"): (None, (3, 3)),\n  (\"select.epoll\", \"flags\"): (None, (3, 3)),\n  (\"shelve.Shelf\", \"keyencoding\"): (None, (3, 2)),\n  (\"shelve.Shelf\", \"protocol\"): ((2, 3), (3, 0)),\n  (\"shelve.open\", \"protocol\"): ((2, 3), (3, 0)),\n  (\"shlex.shlex\", \"punctuation_chars\"): (None, (3, 6)),\n  (\"shlex.split\", \"posix\"): ((2, 6), (3, 0)),\n  (\"shutil.copy\", \"follow_symlinks\"): (None, (3, 3)),\n  (\"shutil.copy2\", \"follow_symlinks\"): (None, (3, 3)),\n  (\"shutil.copyfile\", \"follow_symlinks\"): (None, (3, 3)),\n  (\"shutil.copymode\", \"follow_symlinks\"): (None, (3, 3)),\n  (\"shutil.copystat\", \"follow_symlinks\"): (None, (3, 3)),\n  (\"shutil.copytree\", \"copy_function\"): (None, (3, 2)),\n  (\"shutil.copytree\", \"dirs_exist_ok\"): (None, (3, 8)),\n  (\"shutil.copytree\", \"ignore\"): ((2, 6), (3, 0)),\n  (\"shutil.copytree\", \"ignore_dangling_symlinks\"): (None, (3, 2)),\n  (\"shutil.move\", \"copy_function\"): (None, (3, 5)),\n  (\"signal.set_wakeup_fd\", \"warn_on_full_buffer\"): (None, (3, 7)),\n  (\"smtpd.SMTPChannel\", \"decode_data\"): (None, (3, 5)),\n  (\"smtpd.SMTPChannel\", \"enable_SMTPUTF8\"): (None, (3, 5)),\n  (\"smtpd.SMTPServer\", \"decode_data\"): (None, (3, 5)),\n  (\"smtpd.SMTPServer\", \"enable_SMTPUTF8\"): (None, (3, 5)),\n  (\"smtpd.SMTPServer\", \"map\"): (None, (3, 4)),\n  (\"smtplib.LMTP\", \"timeout\"): (None, (3, 9)),\n  (\"smtplib.SMTP\", \"source_address\"): (None, (3, 3)),\n  (\"smtplib.SMTP\", \"timeout\"): ((2, 6), (3, 0)),\n  (\"smtplib.SMTP.login\", \"initial_response_ok\"): (None, (3, 5)),\n  (\"smtplib.SMTP.starttls\", \"context\"): (None, (3, 3)),\n  (\"smtplib.SMTP_SSL\", \"context\"): (None, (3, 3)),\n  (\"smtplib.SMTP_SSL\", \"source_address\"): (None, (3, 3)),\n  (\"socket.create_connection\", \"source_address\"): ((2, 7), (3, 2)),\n  (\"socket.setsockopt\", \"optlen\"): (None, (3, 6)),\n  (\"sorted\", \"key\"): ((2, 4), (3, 0)),\n  (\"sorted\", \"reverse\"): ((2, 4), (3, 0)),\n  (\"sqlite3.Connection.create_function\", \"deterministic\"): (None, (3, 8)),\n  (\"sqlite3.connect\", \"uri\"): (None, (3, 4)),\n  (\"ssl.SSLContext.load_cert_chain\", \"password\"): (None, (3, 3)),\n  (\"ssl.SSLContext.load_verify_locations\", \"cadata\"): (None, (3, 4)),\n  (\"ssl.SSLContext.wrap_bio\", \"session\"): (None, (3, 6)),\n  (\"ssl.SSLContext.wrap_socket\", \"session\"): (None, (3, 6)),\n  (\"ssl.wrap_socket\", \"ciphers\"): ((2, 7), (3, 2)),\n  (\"str.decode\", \"encoding\"): ((2, 7), None),\n  (\"str.decode\", \"errors\"): ((2, 7), None),\n  (\"str.encode\", \"encoding\"): ((2, 7), (3, 1)),\n  (\"str.encode\", \"errors\"): ((2, 7), (3, 1)),\n  (\"str.ljust\", \"fillchar\"): ((2, 4), (3, 0)),\n  (\"str.lstrip\", \"chars\"): ((2, 2), (3, 0)),\n  (\"str.rjust\", \"fillchar\"): ((2, 4), (3, 0)),\n  (\"str.rstrip\", \"chars\"): ((2, 2), (3, 0)),\n  (\"str.strip\", \"chars\"): ((2, 2), (3, 0)),\n  (\"string.lstrip\", \"chars\"): ((2, 3), None),\n  (\"string.rstrip\", \"chars\"): ((2, 3), None),\n  (\"string.strip\", \"chars\"): ((2, 3), None),\n  # Notes:\n  #  Creating keyword argument rules for the `subprocess` module is tricky. Newly added arguments\n  #  may only be documented in `subprocess.Popen`. But the new arguments are actually also supported\n  #  by `subprocess.run`, `subprocess.call`, `subprocess.check_call` and `subprocess.check_output`\n  #  (we can see `**other_popen_kwargs` in the documentation, the kwargs are passed through).\n  #  Therefore, whenever a new argument is added, we need to add rules for all the 5 functions\n  #  mentioned above.\n  (\"subprocess.Popen\", \"encoding\"): (None, (3, 6)),\n  (\"subprocess.Popen\", \"errors\"): (None, (3, 6)),\n  (\"subprocess.Popen\", \"extra_groups\"): (None, (3, 9)),\n  (\"subprocess.Popen\", \"group\"): (None, (3, 9)),\n  (\"subprocess.Popen\", \"pass_fds\"): (None, (3, 2)),\n  (\"subprocess.Popen\", \"restore_signals\"): (None, (3, 2)),\n  (\"subprocess.Popen\", \"start_new_session\"): (None, (3, 2)),\n  (\"subprocess.Popen\", \"text\"): (None, (3, 7)),\n  (\"subprocess.Popen\", \"umask\"): (None, (3, 9)),\n  (\"subprocess.Popen\", \"user\"): (None, (3, 9)),\n  (\"subprocess.Popen.communicate\", \"timeout\"): (None, (3, 3)),\n  (\"subprocess.Popen.wait\", \"timeout\"): (None, (3, 3)),\n  (\"subprocess.STARTUPINFO\", \"lpAttributeList\"): (None, (3, 7)),\n  (\"subprocess.call\", \"encoding\"): (None, (3, 6)),\n  (\"subprocess.call\", \"errors\"): (None, (3, 6)),\n  (\"subprocess.call\", \"extra_groups\"): (None, (3, 9)),\n  (\"subprocess.call\", \"group\"): (None, (3, 9)),\n  (\"subprocess.call\", \"pass_fds\"): (None, (3, 2)),\n  (\"subprocess.call\", \"restore_signals\"): (None, (3, 2)),\n  (\"subprocess.call\", \"start_new_session\"): (None, (3, 2)),\n  (\"subprocess.call\", \"text\"): (None, (3, 7)),\n  (\"subprocess.call\", \"timeout\"): (None, (3, 3)),\n  (\"subprocess.call\", \"umask\"): (None, (3, 9)),\n  (\"subprocess.call\", \"user\"): (None, (3, 9)),\n  (\"subprocess.check_call\", \"encoding\"): (None, (3, 6)),\n  (\"subprocess.check_call\", \"errors\"): (None, (3, 6)),\n  (\"subprocess.check_call\", \"extra_groups\"): (None, (3, 9)),\n  (\"subprocess.check_call\", \"group\"): (None, (3, 9)),\n  (\"subprocess.check_call\", \"pass_fds\"): (None, (3, 2)),\n  (\"subprocess.check_call\", \"restore_signals\"): (None, (3, 2)),\n  (\"subprocess.check_call\", \"start_new_session\"): (None, (3, 2)),\n  (\"subprocess.check_call\", \"text\"): (None, (3, 7)),\n  (\"subprocess.check_call\", \"timeout\"): (None, (3, 3)),\n  (\"subprocess.check_call\", \"umask\"): (None, (3, 9)),\n  (\"subprocess.check_call\", \"user\"): (None, (3, 9)),\n  (\"subprocess.check_output\", \"encoding\"): (None, (3, 6)),\n  (\"subprocess.check_output\", \"errors\"): (None, (3, 6)),\n  (\"subprocess.check_output\", \"extra_groups\"): (None, (3, 9)),\n  (\"subprocess.check_output\", \"group\"): (None, (3, 9)),\n  (\"subprocess.check_output\", \"input\"): (None, (3, 4)),\n  (\"subprocess.check_output\", \"pass_fds\"): (None, (3, 2)),\n  (\"subprocess.check_output\", \"restore_signals\"): (None, (3, 2)),\n  (\"subprocess.check_output\", \"start_new_session\"): (None, (3, 2)),\n  (\"subprocess.check_output\", \"text\"): (None, (3, 7)),\n  (\"subprocess.check_output\", \"timeout\"): (None, (3, 3)),\n  (\"subprocess.check_output\", \"umask\"): (None, (3, 9)),\n  (\"subprocess.check_output\", \"user\"): (None, (3, 9)),\n  (\"subprocess.run\", \"capture_output\"): (None, (3, 7)),\n  (\"subprocess.run\", \"encoding\"): (None, (3, 6)),\n  (\"subprocess.run\", \"errors\"): (None, (3, 6)),\n  (\"subprocess.run\", \"extra_groups\"): (None, (3, 9)),\n  (\"subprocess.run\", \"group\"): (None, (3, 9)),\n  (\"subprocess.run\", \"text\"): (None, (3, 7)),\n  (\"subprocess.run\", \"umask\"): (None, (3, 9)),\n  (\"subprocess.run\", \"user\"): (None, (3, 9)),\n  (\"sum\", \"start\"): (None, (3, 8)),\n  (\"tarfile.TarFile\", \"encoding\"): ((2, 6), (3, 0)),\n  (\"tarfile.TarFile\", \"errors\"): ((2, 6), (3, 0)),\n  (\"tarfile.TarFile\", \"format\"): ((2, 6), (3, 0)),\n  (\"tarfile.TarFile\", \"pax_headers\"): ((2, 6), (3, 0)),\n  (\"tarfile.TarFile\", \"tarinfo\"): ((2, 6), (3, 0)),\n  (\"tarfile.TarFile.add\", \"exclude\"): ((2, 6), (3, 0)),\n  (\"tarfile.TarFile.add\", \"filter\"): ((2, 7), (3, 2)),\n  (\"tarfile.TarFile.extract\", \"numeric_owner\"): (None, (3, 5)),\n  (\"tarfile.TarFile.extract\", \"set_attrs\"): (None, (3, 2)),\n  (\"tarfile.TarFile.extractall\", \"numeric_owner\"): (None, (3, 5)),\n  (\"tarfile.TarFile.list\", \"members\"): (None, (3, 5)),\n  (\"tarfile.TarInfo.tobuf\", \"encoding\"): ((2, 6), (3, 0)),\n  (\"tarfile.TarInfo.tobuf\", \"errors\"): ((2, 6), (3, 0)),\n  (\"tarfile.TarInfo.tobuf\", \"format\"): ((2, 6), (3, 0)),\n  (\"telnetlib.Telnet\", \"timeout\"): ((2, 6), (3, 0)),\n  (\"telnetlib.Telnet.open\", \"timeout\"): ((2, 6), (3, 0)),\n  (\"tempfile.NamedTemporaryFile\", \"delete\"): ((2, 6), (3, 0)),\n  (\"tempfile.NamedTemporaryFile\", \"errors\"): (None, (3, 8)),\n  (\"tempfile.SpooledTemporaryFile\", \"errors\"): (None, (3, 8)),\n  (\"tempfile.SpooledTemporaryFile.truncate\", \"size\"): (None, (3, 3)),\n  (\"tempfile.TemporaryFile\", \"errors\"): (None, (3, 8)),\n  (\"test.support.check_warnings\", \"quiet\"): ((2, 7), (3, 2)),\n  (\"threading.Lock.acquire\", \"timeout\"): (None, (3, 2)),\n  (\"threading.RLock.acquire\", \"timeout\"): (None, (3, 2)),\n  (\"threading.Semaphore.acquire\", \"timeout\"): (None, (3, 2)),\n  (\"threading.Semaphore.release\", \"n\"): (None, (3, 9)),\n  (\"threading.Thread\", \"daemon\"): (None, (3, 3)),\n  (\"timeit.Timer\", \"globals\"): (None, (3, 5)),\n  (\"timeit.repeat\", \"globals\"): (None, (3, 5)),\n  (\"timeit.timeit\", \"globals\"): (None, (3, 5)),\n  (\"tracemalloc.Filter\", \"domain\"): (None, (3, 6)),\n  (\"typing.get_type_hints\", \"include_extras\"): (None, (3, 9)),\n  (\"unittest.TestCase.assertAlmostEqual\", \"delta\"): ((2, 7), (3, 2)),\n  (\"unittest.TestCase.assertNotAlmostEqual\", \"delta\"): ((2, 7), (3, 2)),\n  (\"unittest.TestCase.assertRaises\", \"msg\"): (None, (3, 3)),\n  (\"unittest.TestCase.assertRaisesRegex\", \"msg\"): (None, (3, 3)),\n  (\"unittest.TestCase.assertWarns\", \"msg\"): (None, (3, 3)),\n  (\"unittest.TestCase.assertWarnsRegex\", \"msg\"): (None, (3, 3)),\n  (\"unittest.TestLoader.loadTestsFromModule\", \"pattern\"): (None, (3, 5)),\n  (\"unittest.TextTestRunner\", \"tb_locals\"): (None, (3, 5)),\n  (\"unittest.TextTestRunner\", \"warnings\"): (None, (3, 2)),\n  (\"unittest.main\", \"buffer\"): ((2, 7), (3, 2)),\n  (\"unittest.main\", \"catchbreak\"): ((2, 7), (3, 2)),\n  (\"unittest.main\", \"exit\"): ((2, 7), (3, 1)),\n  (\"unittest.main\", \"failfast\"): ((2, 7), (3, 2)),\n  (\"unittest.main\", \"verbosity\"): ((2, 7), (3, 2)),\n  (\"unittest.main\", \"warnings\"): (None, (3, 2)),\n  (\"unittest.mock.Mock\", \"unsafe\"): (None, (3, 5)),\n  (\"unittest.mock.Mock.reset_mock\", \"return_value\"): (None, (3, 6)),\n  (\"unittest.mock.Mock.reset_mock\", \"side_effect\"): (None, (3, 6)),\n  (\"urllib.URLopener\", \"context\"): ((2, 7), None),\n  (\"urllib.parse.parse_qs\", \"encoding\"): (None, (3, 2)),\n  (\"urllib.parse.parse_qs\", \"errors\"): (None, (3, 2)),\n  (\"urllib.parse.parse_qs\", \"max_num_fields\"): (None, (3, 8)),\n  (\"urllib.parse.parse_qsl\", \"encoding\"): (None, (3, 2)),\n  (\"urllib.parse.parse_qsl\", \"errors\"): (None, (3, 2)),\n  (\"urllib.parse.parse_qsl\", \"max_num_fields\"): (None, (3, 8)),\n  (\"urllib.parse.urlencode\", \"quote_via\"): (None, (3, 5)),\n  (\"urllib.request.HTTPSHandler\", \"check_hostname\"): (None, (3, 2)),\n  (\"urllib.request.HTTPSHandler\", \"context\"): (None, (3, 2)),\n  (\"urllib.request.Request\", \"method\"): (None, (3, 3)),\n  (\"urllib.request.urlopen\", \"cadefault\"): (None, (3, 3)),\n  (\"urllib.request.urlopen\", \"cafile\"): (None, (3, 2)),\n  (\"urllib.request.urlopen\", \"capath\"): (None, (3, 2)),\n  (\"urllib.request.urlopen\", \"context\"): (None, (3, 4)),\n  (\"urllib.urlopen\", \"context\"): ((2, 7), None),\n  (\"urllib.urlopen\", \"proxies\"): ((2, 3), None),\n  (\"urllib.urlretrieve\", \"context\"): ((2, 7), None),\n  (\"urllib2.HTTPSHandler\", \"context\"): ((2, 7), None),\n  (\"urllib2.OpenerDirector.open\", \"timeout\"): ((2, 6), None),\n  (\"urllib2.urlopen\", \"cadefault\"): ((2, 7), None),\n  (\"urllib2.urlopen\", \"cafile\"): ((2, 7), None),\n  (\"urllib2.urlopen\", \"capth\"): ((2, 7), None),\n  (\"urllib2.urlopen\", \"context\"): ((2, 7), None),\n  (\"urllib2.urlopen\", \"timeout\"): ((2, 6), None),\n  (\"urlparse.parse_qs\", \"max_num_fields\"): ((2, 7), None),\n  (\"urlparse.parse_qsl\", \"max_num_fields\"): ((2, 7), None),\n  (\"uu.encode\", \"backtick\"): (None, (3, 7)),\n  (\"venv.EnvBuilder\", \"prompt\"): (None, (3, 6)),\n  (\"venv.EnvBuilder\", \"upgrade_deps\"): (None, (3, 9)),\n  (\"venv.EnvBuilder\", \"with_pip\"): (None, (3, 4)),\n  (\"venv.create\", \"prompt\"): (None, (3, 6)),\n  (\"venv.create\", \"with_pip\"): (None, (3, 4)),\n  (\"warnings.formatwarning\", \"line\"): ((2, 6), (3, 0)),\n  (\"warnings.showwarning\", \"line\"): ((2, 7), (3, 0)),\n  (\"warnings.warn\", \"source\"): (None, (3, 6)),\n  (\"warnings.warn_explicit\", \"module_globals\"): ((2, 5), (3, 0)),\n  (\"warnings.warn_explicit\", \"source\"): (None, (3, 6)),\n  (\"webbrowser.register\", \"preferred\"): (None, (3, 7)),\n  (\"winreg.OpenKey\", \"access\"): (None, (3, 2)),\n  (\"winreg.OpenKey\", \"key\"): (None, (3, 2)),\n  (\"winreg.OpenKey\", \"reserved\"): (None, (3, 2)),\n  (\"winreg.OpenKey\", \"sub_key\"): (None, (3, 2)),\n  (\"winreg.OpenKeyEx\", \"access\"): (None, (3, 2)),\n  (\"winreg.OpenKeyEx\", \"key\"): (None, (3, 2)),\n  (\"winreg.OpenKeyEx\", \"reserved\"): (None, (3, 2)),\n  (\"winreg.OpenKeyEx\", \"sub_key\"): (None, (3, 2)),\n  (\"xml.dom.minidom.Document.writexml\", \"encoding\"): ((2, 3), (3, 0)),\n  (\"xml.dom.minidom.Node.toprettyxml\", \"encoding\"): ((2, 3), (3, 0)),\n  (\"xml.dom.minidom.Node.toxml\", \"encoding\"): ((2, 3), (3, 0)),\n  (\"xml.dom.minidom.Node.writexml\", \"addindent\"): ((2, 1), (3, 0)),\n  (\"xml.dom.minidom.Node.writexml\", \"indent\"): ((2, 1), (3, 0)),\n  (\"xml.dom.minidom.Node.writexml\", \"newl\"): ((2, 1), (3, 0)),\n  (\"xml.etree.ElementInclude.include\", \"base_url\"): (None, (3, 9)),\n  (\"xml.etree.ElementInclude.include\", \"max_depth\"): (None, (3, 9)),\n  (\"xml.etree.ElementTree.ElementTree.write\", \"short_empty_elements\"): (None, (3, 4)),\n  (\"xml.etree.ElementTree.tostring\", \"default_namespace\"): (None, (3, 8)),\n  (\"xml.etree.ElementTree.tostring\", \"short_empty_elements\"): (None, (3, 4)),\n  (\"xml.etree.ElementTree.tostring\", \"xml_declaration\"): (None, (3, 8)),\n  (\"xml.etree.ElementTree.tostringlist\", \"default_namespace\"): (None, (3, 8)),\n  (\"xml.etree.ElementTree.tostringlist\", \"short_empty_elements\"): (None, (3, 4)),\n  (\"xml.etree.ElementTree.tostringlist\", \"xml_declaration\"): (None, (3, 8)),\n  (\"xml.etree.ElementTree.write\", \"short_empty_elements\"): (None, (3, 4)),\n  (\"xml.sax.saxutils.XMLGenerator\", \"short_empty_elements\"): (None, (3, 2)),\n  (\"xmlrpc.client.ServerProxy\", \"context\"): (None, (3, 4)),\n  (\"xmlrpc.client.ServerProxy\", \"headers\"): (None, (3, 8)),\n  (\"xmlrpc.client.ServerProxy\", \"use_builtin_types\"): (None, (3, 3)),\n  (\"xmlrpc.client.loads\", \"use_builtin_types\"): (None, (3, 3)),\n  (\"xmlrpc.server.CGIXMLRPCRequestHandler\", \"use_builtin_types\"): (None, (3, 3)),\n  (\"xmlrpc.server.DocXMLRPCServer\", \"use_builtin_types\"): (None, (3, 3)),\n  (\"xmlrpc.server.SimpleXMLRPCServer\", \"use_builtin_types\"): (None, (3, 3)),\n  (\"xmlrpclib.ServerProxy\", \"context\"): ((2, 7), None),\n  (\"xmlrpclib.ServerProxy\", \"use_datetime\"): ((2, 5), None),\n  (\"xmlrpclib.loads\", \"use_datetime\"): ((2, 5), None),\n  (\"zipapp.create_archive\", \"compressed\"): (None, (3, 7)),\n  (\"zipapp.create_archive\", \"filter\"): (None, (3, 7)),\n  (\"zipfile.PyZipFile\", \"optimize\"): (None, (3, 2)),\n  (\"zipfile.PyZipFile.writepy\", \"filterfunc\"): (None, (3, 4)),\n  (\"zipfile.ZipFile\", \"compresslevel\"): (None, (3, 7)),\n  (\"zipfile.ZipFile\", \"strict_timestamps\"): (None, (3, 8)),\n  (\"zipfile.ZipFile.read\", \"pwd\"): ((2, 6), (3, 0)),\n  (\"zipfile.ZipFile.writestr\", \"compress_type\"): ((2, 7), (3, 2)),\n  (\"zipfile.ZipInfo.from_file\", \"strict_timestamps\"): (None, (3, 8)),\n  (\"zlib.Decompress.decompress\", \"max_length\"): (None, (3, 6)),\n  (\"zlib.compress\", \"level\"): (None, (3, 6)),\n  (\"zlib.compressobj\", \"zdict\"): (None, (3, 3)),\n  (\"zlib.decompress\", \"bufsize\"): (None, (3, 6)),\n  (\"zlib.decompress\", \"wbits\"): (None, (3, 6)),\n  (\"zlib.decompressobj\", \"zdict\"): (None, (3, 3)),\n}\n\n# datetime+time strftime/strptime requirements: directive -> requirements\nSTRFTIME_REQS = {\n  \"G\": (None, (3, 6)),\n  \"V\": (None, (3, 6)),\n  \"f\": ((2, 6), (3, 0)),\n  \"u\": (None, (3, 6)),\n}\n\n# bytes/bytearray (and str for 2 compatibility) requirements: directive -> requiresments\nBYTES_REQS = {\n  \"a\": (None, (3, 5)),\n  \"b\": (None, (3, 5)),\n  \"r\": ((2, 7), (3, 5)),\n}\n\n# array.array typecode requirements: typecode -> requirements\nARRAY_TYPECODE_REQS = {\n  \"q\": (None, (3, 3)),\n  \"Q\": (None, (3, 3)),\n}\n\n# codecs error handler requirements: error name -> requirements\nCODECS_ERROR_HANDLERS = {\n  \"surrogateescape\": (None, (3, 1)),\n  \"surrogatepass\": (None, (3, 1)),\n  \"namereplace\": (None, (3, 5)),\n}\n\n# Correlate the value of kwarg \"errors\" of the following functions/constructors with\n# CODECS_ERROR_HANDLERS: function -> argument index\nCODECS_ERRORS_INDICES = {\n  \"codecs.encode\": 2,\n  \"codecs.decode\": 2,\n  \"codecs.open\": 3,\n  \"codecs.EncodedFile\": 3,\n  \"codecs.iterencode\": 2,\n  \"codecs.iterdecode\": 2,\n  \"codecs.IncrementalEncoder\": 0,\n  \"codecs.IncrementalDecoder\": 0,\n  \"codecs.StreamWriter\": 1,\n  \"codecs.StreamReader\": 1,\n  \"codecs.StreamReaderWriter\": 3,\n  \"codecs.StreamRecorder\": 5,\n}\n\n# codecs encodings and aliases -> requirements\n# Checks case-insensitively.\nCODECS_ENCODINGS = {\n  # German\n  (\"cp273\", \"273\", \"ibm273\", \"csibm273\"): (None, (3, 4)),\n\n  # Ukrainian\n  (\"cp1125\", \"1125\", \"ibm1125\", \"cp866u\", \"ruscii\"): (None, (3, 4)),\n\n  # Windows UTF-8 (CP_UTF8)\n  (\"cp65001\",): (None, (3, 3)),\n\n  # Tajik\n  (\"koi8_t\",): (None, (3, 5)),\n\n  # Kazakh\n  (\"kz1048\", \"kz_1048\", \"strk1048_2002\", \"kz-1048\", \"strk1048-2002\", \"rk1048\"): (None, (3, 5)),\n\n  # Windows OEM\n  (\"oem\",): (None, (3, 6)),\n\n  # == Binary transforms ==\n\n  (\"base64_codec\", \"base64-codec\"): (None, (3, 2)),\n  (\"base64\", \"base_64\", \"base-64\"): (None, (3, 4)),\n\n  (\"bz2_codec\", \"bz2-codec\"): (None, (3, 2)),\n  (\"bz2\"): (None, (3, 4)),\n\n  (\"hex_codec\", \"hex-codec\"): (None, (3, 2)),\n  (\"hex\"): (None, (3, 4)),\n\n  (\"quopri_codec\", \"quopri-codec\"): (None, (3, 2)),\n  (\"quopri\", \"quotedprintable\", \"quoted_printable\", \"quoted-printable\"): (None, (3, 4)),\n\n  (\"uu_codec\", \"uu-codec\"): (None, (3, 2)),\n  (\"uu\"): (None, (3, 4)),\n\n  (\"zip_codec\", \"zip-codec\"): (None, (3, 2)),\n  (\"zip\", \"zlib\"): (None, (3, 4)),\n\n  # == Text transforms ==\n\n  # Caesar cipher\n  (\"rot_13\", \"rot-13\"): (None, (3, 2)),\n  (\"rot13\"): (None, (3, 4)),\n}\n\n# Correlate the value of kwarg \"encoding\", \"file_encoding\", \"data_encoding\" of the following\n# functions with CODECS_ENCODINGS: function -> set of argument indices\nCODECS_ENCODINGS_INDICES = {\n  \"codecs.encode\": (1,),\n  \"codecs.decode\": (1,),\n  \"codecs.lookup\": (0,),\n  \"codecs.getencoder\": (0,),\n  \"codecs.getdecoder\": (0,),\n  \"codecs.getincrementalencoder\": (0,),\n  \"codecs.getincrementaldecoder\": (0,),\n  \"codecs.getreader\": (0,),\n  \"codecs.getwriter\": (0,),\n  \"codecs.open\": (2,),\n  \"codecs.EncodedFile\": (1, 2),\n  \"codecs.iterencode\": (2,),\n  \"codecs.iterdecode\": (2,),\n}\n\n# Builtin types that work as annotation types from 3.9+\n# The list is taken from https://github.com/python/cpython/blob/master/Lib/test/test_genericalias.py\nBUILTIN_GENERIC_ANNOTATION_TYPES = (\n  \"collections.ChainMap\",\n  \"collections.Counter\",\n  \"collections.OrderedDict\",\n  \"collections.UserDict\",\n  \"collections.UserList\",\n  \"collections.abc.AsyncGenerator\",\n  \"collections.abc.AsyncIterable\",\n  \"collections.abc.AsyncIterator\",\n  \"collections.abc.Awaitable\",\n  \"collections.abc.ByteString\",\n  \"collections.abc.Callable\",\n  \"collections.abc.Collection\",\n  \"collections.abc.Container\",\n  \"collections.abc.Coroutine\",\n  \"collections.abc.Generator\",\n  \"collections.abc.ItemsView\",\n  \"collections.abc.Iterable\",\n  \"collections.abc.Iterator\",\n  \"collections.abc.KeysView\",\n  \"collections.abc.Mapping\",\n  \"collections.abc.MappingView\",\n  \"collections.abc.MutableMapping\",\n  \"collections.abc.MutableSequence\",\n  \"collections.abc.MutableSet\",\n  \"collections.abc.Reversible\",\n  \"collections.abc.Sequence\",\n  \"collections.abc.Set\",\n  \"collections.abc.ValuesView\",\n  \"collections.defaultdict\",\n  \"collections.deque\",\n  \"concurrent.futures.Future\",\n  \"concurrent.futures.thread._WorkItem\",\n  \"contextlib.AbstractAsyncContextManager\",\n  \"contextlib.AbstractContextManager\",\n  \"contextvars.ContextVar\",\n  \"contextvars.Token\",\n  \"ctypes.Array\",\n  \"ctypes.LibraryLoader\",\n  \"dataclasses.Field\",\n  \"dict\",\n  \"difflib.SequenceMatcher\",\n  \"enumerate\",\n  \"filecmp.dircmp\",\n  \"fileinput.FileInput\",\n  \"frozenset\",\n  \"functools.cached_property\",\n  \"functools.partial\",\n  \"functools.partialmethod\",\n  \"http.cookies.Morsel\",\n  \"itertools.chain\",\n  \"list\",\n  \"mailbox.Mailbox\",\n  \"mailbox._PartialFile\",\n  \"multiprocessing.managers.ValueProxy\",\n  \"multiprocessing.pool.ApplyResult\",\n  \"multiprocessing.queues.SimpleQueue\",\n  \"multiprocessing.shared_memory.ShareableList\",\n  \"os.DirEntry\",\n  \"queue.Queue\",\n  \"queue.SimpleQueue\",\n  \"re.Match\",\n  \"re.Pattern\",\n  \"set\",\n  \"tempfile.SpooledTemporaryFile\",\n  \"tempfile.TemporaryDirectory\",\n  \"tuple\",\n  \"type\",\n  \"types.AsyncGeneratorType\",\n  \"types.MappingProxyType\",\n  \"unittest.case._AssertRaisesContext\",\n  \"urllib.parse.ParseResult\",\n  \"urllib.parse.SplitResult\",\n  \"weakref.ReferenceType\",\n  \"weakref.WeakSet\",\n  \"weakref.ref\",\n)\n\n# Types that support dictionary union operator | (3.9).\nDICT_UNION_SUPPORTED_TYPES = (\n  \"collections.ChainMap\",\n  \"collections.OrderedDict\",\n  \"collections.defaultdict\",\n  \"os.environ\",\n  \"os.environb\",\n  \"types.MappingProxyType\",\n  \"weakref.WeakKeyDictionary\",\n  \"weakref.WeakValueDictionary\",\n)\n\n# Types that support dictionary union merge operator |= (3.9).\nDICT_UNION_MERGE_SUPPORTED_TYPES = (\n  \"collections.ChainMap\",\n  \"collections.OrderedDict\",\n  \"collections.defaultdict\",\n  \"os.environ\",\n  \"os.environb\",\n  \"weakref.WeakKeyDictionary\",\n  \"weakref.WeakValueDictionary\",\n)\n",
        "/tmp/vanessa/spack-stage/spack-stage-py-vermin-1.0.3-5fvhmbb6b54nbpmqwiht4rk6reqbsb3w/spack-src/tests/function.py": "from .testutils import VerminTest\n\nclass VerminFunctionMemberTests(VerminTest):\n  def test_exc_clear_of_sys(self):\n    self.assertOnlyIn((2, 3), self.detect(\"from sys import exc_clear\"))\n\n  def test_getcheckinterval_of_sys(self):\n    self.assertOnlyIn(((2, 3), (3, 0)), self.detect(\"from sys import getcheckinterval\"))\n\n  def test_getdlopenflags_of_sys(self):\n    self.assertOnlyIn(((2, 2), (3, 0)), self.detect(\"from sys import getdlopenflags\"))\n\n  def test_getfilesystemencoding_of_sys(self):\n    self.assertOnlyIn(((2, 3), (3, 0)), self.detect(\"from sys import getfilesystemencoding\"))\n\n  def test_getsizeof_of_sys(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\"from sys import getsizeof\"))\n\n  def test_getprofile_of_sys(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\"from sys import getprofile\"))\n\n  def test_gettrace_of_sys(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\"from sys import gettrace\"))\n\n  def test_getwindowsversion_of_sys(self):\n    self.assertOnlyIn(((2, 3), (3, 0)), self.detect(\"from sys import getwindowsversion\"))\n\n  def test_commonpath_of_os_path(self):\n    self.assertOnlyIn((3, 5), self.detect(\"from os.path import commonpath\"))\n\n  def test_getctime_of_os_path(self):\n    self.assertOnlyIn(((2, 3), (3, 0)), self.detect(\"from os.path import getctime\"))\n\n  def test_ismount_of_os_path(self):\n    self.assertOnlyIn((3, 4), self.detect(\"from os.path import ismount\"))\n\n  def test_lexists_of_os_path(self):\n    self.assertOnlyIn(((2, 4), (3, 0)), self.detect(\"from os.path import lexists\"))\n\n  def test_realpath_of_os_path(self):\n    self.assertOnlyIn(((2, 2), (3, 0)), self.detect(\"from os.path import realpath\"))\n\n  def test_relpath_of_os_path(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\"from os.path import relpath\"))\n\n  def test_getpgid_of_os(self):\n    self.assertOnlyIn(((2, 3), (3, 0)), self.detect(\"from os import getpgid\"))\n\n  def test_getresgid_of_os(self):\n    self.assertOnlyIn(((2, 7), (3, 2)), self.detect(\"from os import getresgid\"))\n\n  def test_getresuid_of_os(self):\n    self.assertOnlyIn(((2, 7), (3, 2)), self.detect(\"from os import getresuid\"))\n\n  def test_getsid_of_os(self):\n    self.assertOnlyIn(((2, 4), (3, 0)), self.detect(\"from os import getsid\"))\n\n  def test_initgroups_of_os(self):\n    self.assertOnlyIn(((2, 7), (3, 2)), self.detect(\"from os import initgroups\"))\n\n  def test_setgroups_of_os(self):\n    self.assertOnlyIn(((2, 2), (3, 0)), self.detect(\"from os import setgroups\"))\n\n  def test_setresgid_of_os(self):\n    self.assertOnlyIn(((2, 7), (3, 2)), self.detect(\"from os import setresgid\"))\n\n  def test_setresuid_of_os(self):\n    self.assertOnlyIn(((2, 7), (3, 2)), self.detect(\"from os import setresuid\"))\n\n  def test_fsencode_of_os(self):\n    self.assertOnlyIn((3, 2), self.detect(\"from os import fsencode\"))\n\n  def test_fsdecode_of_os(self):\n    self.assertOnlyIn((3, 2), self.detect(\"from os import fsdecode\"))\n\n  def test_fspath_of_os(self):\n    self.assertOnlyIn((3, 6), self.detect(\"from os import fspath\"))\n\n  def test_getenvb_of_os(self):\n    self.assertOnlyIn((3, 2), self.detect(\"from os import getenvb\"))\n\n  def test_get_exec_path_of_os(self):\n    self.assertOnlyIn((3, 2), self.detect(\"from os import get_exec_path\"))\n\n  def test_getgrouplist_of_os(self):\n    self.assertOnlyIn((3, 3), self.detect(\"from os import getgrouplist\"))\n\n  def test_getpriority_of_os(self):\n    self.assertOnlyIn((3, 3), self.detect(\"from os import getpriority\"))\n\n  def test_setpriority_of_os(self):\n    self.assertOnlyIn((3, 3), self.detect(\"from os import setpriority\"))\n\n  def test_get_blocking_of_os(self):\n    self.assertOnlyIn((3, 5), self.detect(\"from os import get_blocking\"))\n\n  def test_set_blocking_of_os(self):\n    self.assertOnlyIn((3, 5), self.detect(\"from os import set_blocking\"))\n\n  def test_lockf_of_os(self):\n    self.assertOnlyIn((3, 3), self.detect(\"from os import lockf\"))\n\n  def test_pipe2_of_os(self):\n    self.assertOnlyIn((3, 3), self.detect(\"from os import pipe2\"))\n\n  def test_posix_fallocate_of_os(self):\n    self.assertOnlyIn((3, 3), self.detect(\"from os import posix_fallocate\"))\n\n  def test_posix_fadvise_of_os(self):\n    self.assertOnlyIn((3, 3), self.detect(\"from os import posix_fadvise\"))\n\n  def test_pread_of_os(self):\n    self.assertOnlyIn((3, 3), self.detect(\"from os import pread\"))\n\n  def test_pwrite_of_os(self):\n    self.assertOnlyIn((3, 3), self.detect(\"from os import pwrite\"))\n\n  def test_sendfile_of_os(self):\n    self.assertOnlyIn((3, 3), self.detect(\"from os import sendfile\"))\n\n  def test_readv_of_os(self):\n    self.assertOnlyIn((3, 3), self.detect(\"from os import readv\"))\n\n  def test_writev_of_os(self):\n    self.assertOnlyIn((3, 3), self.detect(\"from os import writev\"))\n\n  def test_get_terminal_size_of_os(self):\n    self.assertOnlyIn((3, 3), self.detect(\"from os import get_terminal_size\"))\n\n  def test_get_inheritable_of_os(self):\n    self.assertOnlyIn((3, 4), self.detect(\"from os import get_inheritable\"))\n\n  def test_set_inheritable_of_os(self):\n    self.assertOnlyIn((3, 4), self.detect(\"from os import set_inheritable\"))\n\n  def test_get_handle_inheritable_of_os(self):\n    self.assertOnlyIn((3, 4), self.detect(\"from os import get_handle_inheritable\"))\n\n  def test_set_handle_inheritable_of_os(self):\n    self.assertOnlyIn((3, 4), self.detect(\"from os import set_handle_inheritable\"))\n\n  def test_starmap_of_multiprocessing_Pool(self):\n    self.assertOnlyIn((3, 3), self.detect(\n        \"from multiprocessing import Pool\\np = Pool()\\np.starmap()\"))\n\n  def test_starmap_async_of_multiprocessing_Pool(self):\n    self.assertOnlyIn((3, 3), self.detect(\n      \"from multiprocessing import Pool\\np = Pool()\\np.starmap_async()\"))\n\n  def test_wait_of_multiprocessing_connection(self):\n    self.assertOnlyIn((3, 3), self.detect(\n        \"from multiprocessing import connection\\nconnection.wait()\"))\n\n  def test_get_all_start_methods_of_multiprocessing(self):\n    self.assertOnlyIn((3, 4), self.detect(\"from multiprocessing import get_all_start_methods\"))\n\n  def test_get_start_method_of_multiprocessing(self):\n    self.assertOnlyIn((3, 4), self.detect(\"from multiprocessing import get_start_method\"))\n    self.assertOnlyIn((3, 4), self.detect(\"import multiprocessing as mp\\nmp.get_start_method\"))\n\n  def test_set_start_method_of_multiprocessing(self):\n    self.assertOnlyIn((3, 4), self.detect(\"from multiprocessing import set_start_method\"))\n\n  def test_get_context_of_multiprocessing(self):\n    self.assertOnlyIn((3, 4), self.detect(\"from multiprocessing import get_context\"))\n\n  def test_assertIs_of_unittest_TestCase(self):\n    self.assertOnlyIn(((2, 7), (3, 1)),\n                      self.detect(\"from unittest import TestCase\\nTestCase.assertIs()\"))\n\n  def test_assertIsNot_of_unittest_TestCase(self):\n    self.assertOnlyIn(((2, 7), (3, 1)),\n                      self.detect(\"from unittest import TestCase\\nTestCase.assertIsNot()\"))\n\n  def test_assertIsNone_of_unittest_TestCase(self):\n    self.assertOnlyIn(((2, 7), (3, 1)),\n                      self.detect(\"from unittest import TestCase\\nTestCase.assertIsNone()\"))\n\n  def test_assertIsNotNone_of_unittest_TestCase(self):\n    self.assertOnlyIn(((2, 7), (3, 1)),\n                      self.detect(\"from unittest import TestCase\\nTestCase.assertIsNotNone()\"))\n\n  def test_assertIn_of_unittest_TestCase(self):\n    self.assertOnlyIn(((2, 7), (3, 1)),\n                      self.detect(\"from unittest import TestCase\\nTestCase.assertIn()\"))\n\n  def test_assertNotIn_of_unittest_TestCase(self):\n    self.assertOnlyIn(((2, 7), (3, 1)),\n                      self.detect(\"from unittest import TestCase\\nTestCase.assertNotIn()\"))\n\n  def test_assertIsInstance_of_unittest_TestCase(self):\n    self.assertOnlyIn(((2, 7), (3, 2)),\n                      self.detect(\"from unittest import TestCase\\nTestCase.assertIsInstance()\"))\n\n  def test_assertNotIsInstance_of_unittest_TestCase(self):\n    self.assertOnlyIn(((2, 7), (3, 2)),\n                      self.detect(\"from unittest import TestCase\\nTestCase.assertNotIsInstance()\"))\n\n  def test_assertRaisesRegexp_of_unittest_TestCase(self):\n    self.assertOnlyIn(((2, 7), (3, 1)),\n                      self.detect(\"from unittest import TestCase\\nTestCase.assertRaisesRegexp()\"))\n\n  def test_assertGreater_of_unittest_TestCase(self):\n    self.assertOnlyIn(((2, 7), (3, 1)),\n                      self.detect(\"from unittest import TestCase\\nTestCase.assertGreater()\"))\n\n  def test_assertGreaterEqual_of_unittest_TestCase(self):\n    self.assertOnlyIn(((2, 7), (3, 1)),\n                      self.detect(\"from unittest import TestCase\\nTestCase.assertGreaterEqual()\"))\n\n  def test_assertLess_of_unittest_TestCase(self):\n    self.assertOnlyIn(((2, 7), (3, 1)),\n                      self.detect(\"from unittest import TestCase\\nTestCase.assertLess()\"))\n\n  def test_assertLessEqual_of_unittest_TestCase(self):\n    self.assertOnlyIn(((2, 7), (3, 1)),\n                      self.detect(\"from unittest import TestCase\\nTestCase.assertLessEqual()\"))\n\n  def test_assertRegexpMatches_of_unittest_TestCase(self):\n    self.assertOnlyIn(((2, 7), (3, 1)),\n                      self.detect(\"from unittest import TestCase\\nTestCase.assertRegexpMatches()\"))\n\n  def test_assertNotRegexpMatches_of_unittest_TestCase(self):\n    self.assertOnlyIn(((2, 7), (3, 5)), self.detect(\n      \"from unittest import TestCase\\nTestCase.assertNotRegexpMatches()\"))\n\n  def test_assertItemsEqual_of_unittest_TestCase(self):\n    self.assertOnlyIn((2, 7),\n                      self.detect(\"from unittest import TestCase\\nTestCase.assertItemsEqual()\"))\n\n  def test_assertDictContainsSubset_of_unittest_TestCase(self):\n    self.assertOnlyIn(((2, 7), (3, 1)), self.detect(\n      \"from unittest import TestCase\\nTestCase.assertDictContainsSubset()\"))\n\n  def test_addTypeEqualityFunc_of_unittest_TestCase(self):\n    self.assertOnlyIn(((2, 7), (3, 1)),\n                      self.detect(\"from unittest import TestCase\\nTestCase.addTypeEqualityFunc()\"))\n\n  def test_assertMultilineEqual_of_unittest_TestCase(self):\n    self.assertOnlyIn(((2, 7), (3, 1)),\n                      self.detect(\"from unittest import TestCase\\nTestCase.assertMultilineEqual()\"))\n\n  def test_assertSequenceEqual_of_unittest_TestCase(self):\n    self.assertOnlyIn(((2, 7), (3, 1)),\n                      self.detect(\"from unittest import TestCase\\nTestCase.assertSequenceEqual()\"))\n\n  def test_assertListEqual_of_unittest_TestCase(self):\n    self.assertOnlyIn(((2, 7), (3, 1)),\n                      self.detect(\"from unittest import TestCase\\nTestCase.assertListEqual()\"))\n\n  def test_assertTupleEqual_of_unittest_TestCase(self):\n    self.assertOnlyIn(((2, 7), (3, 1)),\n                      self.detect(\"from unittest import TestCase\\nTestCase.assertTupleEqual()\"))\n\n  def test_assertRegex_of_unittest_TestCase(self):\n    self.assertOnlyIn((3, 2), self.detect(\"from unittest import TestCase\\nTestCase.assertRegex()\"))\n\n  def test_assertNotRegex_of_unittest_TestCase(self):\n    self.assertOnlyIn((3, 2), self.detect(\n        \"from unittest import TestCase\\nTestCase.assertNotRegex()\"))\n\n  def test_assertSetEqual_of_unittest_TestCase(self):\n    self.assertOnlyIn(((2, 7), (3, 1)),\n                      self.detect(\"from unittest import TestCase\\nTestCase.assertSetEqual()\"))\n\n  def test_assertDictEqual_of_unittest_TestCase(self):\n    self.assertOnlyIn(((2, 7), (3, 1)),\n                      self.detect(\"from unittest import TestCase\\nTestCase.assertDictEqual()\"))\n\n  def test_addCleanup_of_unittest_TestCase(self):\n    self.assertOnlyIn(((2, 7), (3, 1)),\n                      self.detect(\"from unittest import TestCase\\nTestCase.addCleanup()\"))\n\n  def test_doCleanups_of_unittest_TestCase(self):\n    self.assertOnlyIn(((2, 7), (3, 1)),\n                      self.detect(\"from unittest import TestCase\\nTestCase.doCleanups()\"))\n\n  def test_discover_of_unittest_TestLoader(self):\n    self.assertOnlyIn(((2, 7), (3, 2)),\n                      self.detect(\"from unittest import TestLoader\\nTestLoader.discover()\"))\n\n  def test_startTestRun_of_unittest_TestResult(self):\n    self.assertOnlyIn(((2, 7), (3, 1)),\n                      self.detect(\"from unittest import TestResult\\nTestResult.startTestRun()\"))\n\n  def test_stopTestRun_of_unittest_TestResult(self):\n    self.assertOnlyIn(((2, 7), (3, 1)),\n                      self.detect(\"from unittest import TestResult\\nTestResult.stopTestRun()\"))\n\n  def test_addModuleCleanup_of_unittest(self):\n    self.assertOnlyIn((3, 8), self.detect(\"from unittest import addModuleCleanup\"))\n\n  def test_doModuleCleanups_of_unittest(self):\n    self.assertOnlyIn((3, 8), self.detect(\"from unittest import doModuleCleanups\"))\n\n  def test_total_seconds_of_datetime_timedelta(self):\n    self.assertOnlyIn(((2, 7), (3, 2)), self.detect(\n        \"from datetime import timedelta\\ntimedelta.total_seconds()\"))\n\n  def test_timestamp_of_datetime_datetime(self):\n    self.assertOnlyIn((3, 3), self.detect(\"from datetime import datetime\\ndatetime.timestamp()\"))\n\n  def test_NewType_of_typing(self):\n    self.assertOnlyIn((3, 5), self.detect(\"import typing\\ntyping.NewType()\"))\n    self.assertTrue(self.config.add_backport(\"typing\"))\n    self.assertOnlyIn(((2, 7), (3, 5)), self.detect(\"import typing\\ntyping.NewType()\"))\n\n  def test_pbkdf2_hmac_of_hashlib(self):\n    self.assertOnlyIn(((2, 7), (3, 4)), self.detect(\"import hashlib\\nhashlib.pbkdf2_hmac()\"))\n\n  def test_scrypt_of_hashlib(self):\n    self.assertOnlyIn((3, 6), self.detect(\"import hashlib\\nhashlib.scrypt()\"))\n\n  def test_open_of_bz2(self):\n    self.assertOnlyIn((3, 3), self.detect(\"import bz2\\nbz2.open()\"))\n\n  def test_peek_of_bz2_BZ2File(self):\n    self.assertOnlyIn((3, 3), self.detect(\"from bz2 import BZ2File\\nf = BZ2File()\\nf.peek()\"))\n\n  def test_fileno_of_bz2_BZ2File(self):\n    self.assertOnlyIn((3, 3), self.detect(\"from bz2 import BZ2File\\nf = BZ2File()\\nf.fileno()\"))\n\n  def test_readable_of_bz2_BZ2File(self):\n    self.assertOnlyIn((3, 3), self.detect(\"from bz2 import BZ2File\\nf = BZ2File()\\nf.readable()\"))\n\n  def test_seekable_of_bz2_BZ2File(self):\n    self.assertOnlyIn((3, 3), self.detect(\"from bz2 import BZ2File\\nf = BZ2File()\\nf.seekable()\"))\n\n  def test_writable_of_bz2_BZ2File(self):\n    self.assertOnlyIn((3, 3), self.detect(\"from bz2 import BZ2File\\nf = BZ2File()\\nf.writable()\"))\n    self.assertOnlyIn((3, 3), self.detect(\"import bz2\\nf = bz2.BZ2File()\\nf.writable()\"))\n    self.assertOnlyIn((3, 3), self.detect(\"import bz2\\nf = bz2.BZ2File\\nf.writable\"))\n\n  def test_read1_of_bz2_BZ2File(self):\n    self.assertOnlyIn((3, 3), self.detect(\"from bz2 import BZ2File\\nf = BZ2File()\\nf.read1()\"))\n\n  def test_readinto_of_bz2_BZ2File(self):\n    self.assertOnlyIn((3, 3), self.detect(\"from bz2 import BZ2File\\nf = BZ2File()\\nf.readinto()\"))\n\n  def test_count_of_collections_deque(self):\n    self.assertOnlyIn(((2, 7), (3, 2)),\n                      self.detect(\"from collections import deque\\nd = deque()\\nd.count()\"))\n\n  def test_remove_of_collections_deque(self):\n    self.assertOnlyIn(((2, 5), (3, 0)),\n                      self.detect(\"from collections import deque\\nd = deque()\\nd.remove()\"))\n\n  def test_reverse_of_collections_deque(self):\n    self.assertOnlyIn(((2, 7), (3, 2)),\n                      self.detect(\"from collections import deque\\nd = deque()\\nd.reverse()\"))\n\n  def test_copy_of_collections_deque(self):\n    self.assertOnlyIn((3, 5), self.detect(\"from collections import deque\\nd = deque()\\nd.copy()\"))\n\n  def test_index_of_collections_deque(self):\n    self.assertOnlyIn((3, 5), self.detect(\"from collections import deque\\nd = deque()\\nd.index()\"))\n\n  def test_insert_of_collections_deque(self):\n    self.assertOnlyIn((3, 5), self.detect(\"from collections import deque\\nd = deque()\\nd.insert()\"))\n\n  def test_move_to_end_of_collections_OrderedDict(self):\n    self.assertOnlyIn((3, 2),\n                      self.detect(\"from collections import OrderedDict\\n\"\n                                  \"d = OrderedDict()\\n\"\n                                  \"d.move_to_end()\"))\n\n  def test_subtract_of_collections_Counter(self):\n    self.assertOnlyIn((3, 2),\n                      self.detect(\"from collections import Counter\\n\"\n                                  \"c = Counter()\\n\"\n                                  \"c.subtract()\"))\n\n  def test_suppress_of_contextlib(self):\n    self.assertOnlyIn((3, 4), self.detect(\"import contextlib\\ncontextlib.suppress()\"))\n\n  def test_redirect_stdout_of_contextlib(self):\n    self.assertOnlyIn((3, 4), self.detect(\"import contextlib\\ncontextlib.redirect_stdout()\"))\n\n  def test_redirect_stderr_of_contextlib(self):\n    self.assertOnlyIn((3, 5), self.detect(\"import contextlib\\ncontextlib.redirect_stderr()\"))\n\n  def test_field_size_limit_of_csv(self):\n    self.assertOnlyIn(((2, 5), (3, 0)), self.detect(\"import csv\\ncsv.field_size_limit()\"))\n\n  def test_find_msvcrt_of_ctypes_util(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\n      \"import ctypes.util\\nctypes.util.find_msvcrt()\"))\n\n  def test_get_errno_of_ctypes(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\"import ctypes\\nctypes.get_errno()\"))\n\n  def test_get_last_error_of_ctypes(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\"import ctypes\\nctypes.get_last_error()\"))\n\n  def test_set_errno_of_ctypes(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\"import ctypes\\nctypes.set_errno()\"))\n\n  def test_set_last_error_of_ctypes(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\"import ctypes\\nctypes.set_last_error()\"))\n\n  def test_from_buffer_of_ctypes__CData(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\n        \"from ctypes import _CData\\n_CData.from_buffer()\"))\n\n  def test_from_buffer_copy_of_ctypes__CData(self):\n    self.assertOnlyIn(((2, 6), (3, 0)),\n                      self.detect(\"from ctypes import _CData\\n_CData.from_buffer_copy()\"))\n\n  def test_canonical_of_decimal_Decimal(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\n        \"from decimal import Decimal\\nDecimal.canonical()\"))\n\n  def test_compare_signal_of_decimal_Decimal(self):\n    self.assertOnlyIn(((2, 6), (3, 0)),\n                      self.detect(\"from decimal import Decimal\\nDecimal.compare_signal()\"))\n\n  def test_compare_total_of_decimal_Decimal(self):\n    self.assertOnlyIn(((2, 6), (3, 0)),\n                      self.detect(\"from decimal import Decimal\\nDecimal.compare_total()\"))\n\n  def test_compare_total_mag_of_decimal_Decimal(self):\n    self.assertOnlyIn(((2, 6), (3, 0)),\n                      self.detect(\"from decimal import Decimal\\nDecimal.compare_total_mag()\"))\n\n  def test_conjugate_of_decimal_Decimal(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\n        \"from decimal import Decimal\\nDecimal.conjugate()\"))\n\n  def test_copy_abs_of_decimal_Decimal(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\n        \"from decimal import Decimal\\nDecimal.copy_abs()\"))\n\n  def test_copy_negate_of_decimal_Decimal(self):\n    self.assertOnlyIn(((2, 6), (3, 0)),\n                      self.detect(\"from decimal import Decimal\\nDecimal.copy_negate()\"))\n\n  def test_copy_sign_of_decimal_Decimal(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\n        \"from decimal import Decimal\\nDecimal.copy_sign()\"))\n\n  def test_exp_of_decimal_Decimal(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\"from decimal import Decimal\\nDecimal.exp()\"))\n\n  def test_from_float_of_decimal_Decimal(self):\n    self.assertOnlyIn(((2, 7), (3, 1)), self.detect(\n        \"from decimal import Decimal\\nDecimal.from_float()\"))\n\n  def test_fma_of_decimal_Decimal(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\"from decimal import Decimal\\nDecimal.fma()\"))\n\n  def test_is_canonical_of_decimal_Decimal(self):\n    self.assertOnlyIn(((2, 6), (3, 0)),\n                      self.detect(\"from decimal import Decimal\\nDecimal.is_canonical()\"))\n\n  def test_is_finite_of_decimal_Decimal(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\n        \"from decimal import Decimal\\nDecimal.is_finite()\"))\n\n  def test_is_infinite_of_decimal_Decimal(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\n      \"from decimal import Decimal\\nDecimal.is_infinite()\"))\n\n  def test_is_nan_of_decimal_Decimal(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\n      \"from decimal import Decimal\\nDecimal.is_nan()\"))\n\n  def test_is_normal_of_decimal_Decimal(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\n        \"from decimal import Decimal\\nDecimal.is_normal()\"))\n\n  def test_is_qnan_of_decimal_Decimal(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\n        \"from decimal import Decimal\\nDecimal.is_qnan()\"))\n\n  def test_is_signed_of_decimal_Decimal(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\n        \"from decimal import Decimal\\nDecimal.is_signed()\"))\n\n  def test_is_snan_of_decimal_Decimal(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\n        \"from decimal import Decimal\\nDecimal.is_snan()\"))\n\n  def test_is_subnormal_of_decimal_Decimal(self):\n    self.assertOnlyIn(((2, 6), (3, 0)),\n                      self.detect(\"from decimal import Decimal\\nDecimal.is_subnormal()\"))\n\n  def test_is_zero_of_decimal_Decimal(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\n        \"from decimal import Decimal\\nDecimal.is_zero()\"))\n\n  def test_ln_of_decimal_Decimal(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\"from decimal import Decimal\\nDecimal.ln()\"))\n\n  def test_log10_of_decimal_Decimal(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\"from decimal import Decimal\\nDecimal.log10()\"))\n\n  def test_logb_of_decimal_Decimal(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\"from decimal import Decimal\\nDecimal.logb()\"))\n\n  def test_logical_and_of_decimal_Decimal(self):\n    self.assertOnlyIn(((2, 6), (3, 0)),\n                      self.detect(\"from decimal import Decimal\\nDecimal.logical_and()\"))\n\n  def test_logical_invert_of_decimal_Decimal(self):\n    self.assertOnlyIn(((2, 6), (3, 0)),\n                      self.detect(\"from decimal import Decimal\\nDecimal.logical_invert()\"))\n\n  def test_logical_or_of_decimal_Decimal(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\n        \"from decimal import Decimal\\nDecimal.logical_or()\"))\n\n  def test_logical_xor_of_decimal_Decimal(self):\n    self.assertOnlyIn(((2, 6), (3, 0)),\n                      self.detect(\"from decimal import Decimal\\nDecimal.logical_xor()\"))\n\n  def test_max_mag_decimal_Decimal(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\n        \"from decimal import Decimal\\nDecimal.max_mag()\"))\n\n  def test_min_mag_decimal_Decimal(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\n        \"from decimal import Decimal\\nDecimal.min_mag()\"))\n\n  def test_next_minus_decimal_Decimal(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\n        \"from decimal import Decimal\\nDecimal.next_minus()\"))\n\n  def test_next_plus_decimal_Decimal(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\n        \"from decimal import Decimal\\nDecimal.next_plus()\"))\n\n  def test_next_toward_decimal_Decimal(self):\n    self.assertOnlyIn(((2, 6), (3, 0)),\n                      self.detect(\"from decimal import Decimal\\nDecimal.next_toward()\"))\n\n  def test_number_class_decimal_Decimal(self):\n    self.assertOnlyIn(((2, 6), (3, 0)),\n                      self.detect(\"from decimal import Decimal\\nDecimal.number_class()\"))\n\n  def test_radix_decimal_Decimal(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\"from decimal import Decimal\\nDecimal.radix()\"))\n\n  def test_rotate_decimal_Decimal(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\n      \"from decimal import Decimal\\nDecimal.rotate()\"))\n\n  def test_scaleb_decimal_Decimal(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\n      \"from decimal import Decimal\\nDecimal.scaleb()\"))\n\n  def test_shift_decimal_Decimal(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\n      \"from decimal import Decimal\\nDecimal.shift()\"))\n\n  def test_to_integral_exact_decimal_Decimal(self):\n    self.assertOnlyIn(((2, 6), (3, 0)),\n                      self.detect(\"from decimal import Decimal\\nDecimal.to_integral_exact()\"))\n\n  def test_to_integral_value_decimal_Decimal(self):\n    self.assertOnlyIn(((2, 6), (3, 0)),\n                      self.detect(\"from decimal import Decimal\\nDecimal.to_integral_value()\"))\n\n  def test_as_integer_ratio_decimal_Decimal(self):\n    self.assertOnlyIn((3, 6), self.detect(\n      \"from decimal import Decimal\\nDecimal.as_integer_ratio()\"))\n\n  def test_localcontext_decimal(self):\n    self.assertOnlyIn(((2, 5), (3, 0)), self.detect(\"import decimal\\ndecimal.localcontext()\"))\n\n  def test_create_decimal_from_float_decimal_Context(self):\n    self.assertOnlyIn(((2, 7), (3, 1)), self.detect(\n      \"from decimal import Context\\nContext.create_decimal_from_float()\"))\n\n  def test_clear_traps_decimal_Context(self):\n    self.assertOnlyIn((3, 3), self.detect(\"from decimal import Context\\nContext.clear_traps()\"))\n\n  def test_context_diff_difflib(self):\n    self.assertOnlyIn(((2, 3), (3, 0)), self.detect(\"import difflib\\ndifflib.context_diff()\"))\n\n  def test_unified_diff_difflib(self):\n    self.assertOnlyIn(((2, 3), (3, 0)), self.detect(\"import difflib\\ndifflib.unified_diff()\"))\n\n  def test_diff_bytes_difflib(self):\n    self.assertOnlyIn((3, 5), self.detect(\"import difflib\\ndifflib.diff_bytes()\"))\n\n  def test_get_grouped_opcodes_difflib_SequenceMatcher(self):\n    self.assertOnlyIn(((2, 3), (3, 0)),\n                      self.detect(\"from difflib import SequenceMatcher\\n\"\n                                  \"SequenceMatcher.get_grouped_opcodes()\"))\n\n  def test_cmp_to_key_from_functools(self):\n    self.assertOnlyIn(((2, 7), (3, 2)), self.detect(\"import functools\\nfunctools.cmp_to_key()\"))\n\n  def test_reduce_from_functools(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\"import functools\\nfunctools.reduce()\"))\n\n  def test_heappushpop_from_heapq(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\"import heapq\\nheapq.heappushpop()\"))\n\n  def test_merge_from_heapq(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\"import heapq\\nheapq.merge()\"))\n\n  def test_nlargest_from_heapq(self):\n    self.assertOnlyIn(((2, 4), (3, 0)), self.detect(\"import heapq\\nheapq.nlargest()\"))\n\n  def test_nsmallest_from_heapq(self):\n    self.assertOnlyIn(((2, 4), (3, 0)), self.detect(\"import heapq\\nheapq.nsmallest()\"))\n\n  def test_compare_digest_from_hmac(self):\n    self.assertOnlyIn(((2, 7), (3, 3)), self.detect(\"import hmac\\nhmac.compare_digest()\"))\n\n  def test_hmac_digest(self):\n    self.assertOnlyIn((3, 7), self.detect(\"import hmac\\nhmac.digest()\"))\n\n  def test_isgenerator_from_inspect(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\"import inspect\\ninspect.isgenerator()\"))\n\n  def test_isgeneratorfunction_from_inspect(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\n      \"import inspect\\ninspect.isgeneratorfunction()\"))\n\n  def test_isabstract_from_inspect(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\"import inspect\\ninspect.isabstract()\"))\n\n  def test_isdatadescriptor_from_inspect(self):\n    self.assertOnlyIn(((2, 3), (3, 0)), self.detect(\"import inspect\\ninspect.isdatadescriptor()\"))\n\n  def test_isgetsetdescriptor_from_inspect(self):\n    self.assertOnlyIn(((2, 5), (3, 0)), self.detect(\"import inspect\\ninspect.isgetsetdescriptor()\"))\n\n  def test_ismemberdescriptor_from_inspect(self):\n    self.assertOnlyIn(((2, 5), (3, 0)), self.detect(\"import inspect\\ninspect.ismemberdescriptor()\"))\n\n  def test_cleandoc_from_inspect(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\"import inspect\\ninspect.cleandoc()\"))\n\n  def test_getcallargs_from_inspect(self):\n    self.assertOnlyIn(((2, 7), (3, 2)), self.detect(\"import inspect\\ninspect.getcallargs()\"))\n\n  def test_iscoroutine_from_inspect(self):\n    self.assertOnlyIn((3, 5), self.detect(\"import inspect\\ninspect.iscoroutine()\"))\n\n  def test_iscoroutinefunction_from_inspect(self):\n    self.assertOnlyIn((3, 5), self.detect(\"import inspect\\ninspect.iscoroutinefunction()\"))\n\n  def test_isawaitable_from_inspect(self):\n    self.assertOnlyIn((3, 5), self.detect(\"import inspect\\ninspect.isawaitable()\"))\n\n  def test_isasyncgen_from_inspect(self):\n    self.assertOnlyIn((3, 6), self.detect(\"import inspect\\ninspect.isasyncgen()\"))\n\n  def test_isasyncgenfunction_from_inspect(self):\n    self.assertOnlyIn((3, 6), self.detect(\"import inspect\\ninspect.isasyncgenfunction()\"))\n\n  def test_signature_from_inspect(self):\n    self.assertOnlyIn((3, 3), self.detect(\"import inspect\\ninspect.signature()\"))\n\n  def test_apply_defaults_from_inspect_BoundArguments(self):\n    self.assertOnlyIn((3, 5), self.detect(\"from inspect import BoundArguments\\n\"\n                                          \"ba = BoundArguments()\\n\"\n                                          \"ba.apply_defaults()\"))\n\n  def test_getclosurevars_from_inspect(self):\n    self.assertOnlyIn((3, 3), self.detect(\"import inspect\\ninspect.getclosurevars()\"))\n\n  def test_unwrap_from_inspect(self):\n    self.assertOnlyIn((3, 4), self.detect(\"import inspect\\ninspect.unwrap()\"))\n\n  def test_getattr_static_from_inspect(self):\n    self.assertOnlyIn((3, 2), self.detect(\"import inspect\\ninspect.getattr_static()\"))\n\n  def test_getgeneratorstate_from_inspect(self):\n    self.assertOnlyIn((3, 2), self.detect(\"import inspect\\ninspect.getgeneratorstate()\"))\n\n  def test_getgeneratorlocals_from_inspect(self):\n    self.assertOnlyIn((3, 3), self.detect(\"import inspect\\ninspect.getgeneratorlocals()\"))\n\n  def test_getcoroutinestate_from_inspect(self):\n    self.assertOnlyIn((3, 5), self.detect(\"import inspect\\ninspect.getcoroutinestate()\"))\n\n  def test_getcoroutinelocals_from_inspect(self):\n    self.assertOnlyIn((3, 5), self.detect(\"import inspect\\ninspect.getcoroutinelocals()\"))\n\n  def test_detach_from_io_BufferedIOBase(self):\n    self.assertOnlyIn(((2, 7), (3, 1)),\n                      self.detect(\"from io import BufferedIOBase\\n\"\n                                  \"bb = BufferedIOBase()\\n\"\n                                  \"bb.detach()\"))\n\n  def test_readinto1_from_io_BufferedIOBase(self):\n    self.assertOnlyIn((3, 5),\n                      self.detect(\"from io import BufferedIOBase\\n\"\n                                  \"bb = BufferedIOBase()\\n\"\n                                  \"bb.readinto1()\"))\n\n  def test_readinto1_from_io_BytesIO(self):\n    self.assertOnlyIn((3, 5),\n                      self.detect(\"from io import BytesIO\\n\"\n                                  \"bb = BytesIO()\\n\"\n                                  \"bb.readinto1()\"))\n\n  def test_getbuffer_from_io_BytesIO(self):\n    self.assertOnlyIn((3, 2),\n                      self.detect(\"from io import BytesIO\\n\"\n                                  \"bb = BytesIO()\\n\"\n                                  \"bb.getbuffer()\"))\n\n  def test_detach_from_io_TextIOBase(self):\n    self.assertOnlyIn(((2, 7), (3, 1)),\n                      self.detect(\"from io import TextIOBase\\n\"\n                                  \"bb = TextIOBase()\\n\"\n                                  \"bb.detach()\"))\n\n  def test_combinations_from_itertools(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\"import itertools\\nitertools.combinations()\"))\n\n  def test_combinations_with_replacement_from_itertools(self):\n    self.assertOnlyIn(((2, 7), (3, 1)),\n                      self.detect(\"import itertools\\nitertools.combinations_with_replacement()\"))\n\n  def test_compress_from_itertools(self):\n    self.assertOnlyIn(((2, 7), (3, 1)), self.detect(\"import itertools\\nitertools.compress()\"))\n\n  def test_groupby_from_itertools(self):\n    self.assertOnlyIn(((2, 4), (3, 0)), self.detect(\"import itertools\\nitertools.groupby()\"))\n\n  def test_izip_longest_from_itertools(self):\n    self.assertOnlyIn((2, 6), self.detect(\"import itertools\\nitertools.izip_longest()\"))\n\n  def test_permutations_from_itertools(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\"import itertools\\nitertools.permutations()\"))\n\n  def test_product_from_itertools(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\"import itertools\\nitertools.product()\"))\n\n  def test_tee_from_itertools(self):\n    self.assertOnlyIn(((2, 4), (3, 0)), self.detect(\"import itertools\\nitertools.tee()\"))\n\n  def test_accumulate_from_itertools(self):\n    self.assertOnlyIn((3, 2), self.detect(\"import itertools\\nitertools.accumulate()\"))\n\n  def test_getChild_from_logging_Logger(self):\n    self.assertOnlyIn(((2, 7), (3, 2)), self.detect(\n      \"from logging import Logger\\nLogger.getChild()\"))\n\n  def test_hasHandlers_from_logging_Logger(self):\n    self.assertOnlyIn((3, 2), self.detect(\"from logging import Logger\\nLogger.hasHandlers()\"))\n\n  def test_getLogRecordFactory_from_logging(self):\n    self.assertOnlyIn((3, 2), self.detect(\"import logging\\nlogging.getLogRecordFactory()\"))\n\n  def test_setLogRecordFactory_from_logging(self):\n    self.assertOnlyIn((3, 2), self.detect(\"import logging\\nlogging.setLogRecordFactory()\"))\n\n  def test_optimize_from_pickletools(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\"import pickletools\\npickletools.optimize()\"))\n\n  def test_get_data_from_pkgutil(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\"import pkgutil\\npkgutil.get_data()\"))\n\n  def test_resolve_name_from_pkgutil(self):\n    self.assertOnlyIn((3, 9), self.detect(\"import pkgutil\\npkgutil.resolve_name()\"))\n\n  def test_python_branch_from_platform(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\"import platform\\nplatform.python_branch()\"))\n\n  def test_python_implementation_from_platform(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\n        \"import platform\\nplatform.python_implementation()\"))\n\n  def test_python_revision_from_platform(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\"import platform\\nplatform.python_revision()\"))\n\n  def test_linux_distribution_from_platform(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\n        \"import platform\\nplatform.linux_distribution()\"))\n\n  def test_run_path_from_runpy(self):\n    self.assertOnlyIn(((2, 7), (3, 2)), self.detect(\"import runpy\\nrunpy.run_path()\"))\n\n  def test_split_from_shlex(self):\n    self.assertOnlyIn(((2, 3), (3, 0)), self.detect(\"import shlex\\nshlex.split()\"))\n\n  def test_join_from_shlex(self):\n    self.assertOnlyIn((3, 8), self.detect(\"import shlex\\nshlex.join()\"))\n\n  def test_push_source_from_shlex_shlex(self):\n    self.assertOnlyIn(((2, 1), (3, 0)), self.detect(\"import shlex\\nshlex.shlex().push_source()\"))\n\n  def test_pop_source_from_shlex_shlex(self):\n    self.assertOnlyIn(((2, 1), (3, 0)), self.detect(\"import shlex\\nshlex.shlex().pop_source()\"))\n\n  def test_quote_from_shlex(self):\n    self.assertOnlyIn((3, 3), self.detect(\"import shlex\\nshlex.quote()\"))\n\n  def test_register_introspection_functions_from_SimpleXMLRPCServer(self):\n    self.assertOnlyIn((2, 3),\n                      self.detect(\"from SimpleXMLRPCServer import SimpleXMLRPCServer\\n\"\n                                  \"srv = SimpleXMLRPCServer()\\n\"\n                                  \"srv.register_introspection_functions()\"))\n    self.assertOnlyIn((3, 0),\n                      self.detect(\"from xmlrpc.server import SimpleXMLRPCServer\\n\"\n                                  \"srv = SimpleXMLRPCServer()\\n\"\n                                  \"srv.register_introspection_functions()\"))\n\n  def test_set_progress_handler_from_sqlite3_Connection(self):\n    self.assertOnlyIn(((2, 6), (3, 0)),\n                      self.detect(\"from sqlite3 import Connection\\n\"\n                                  \"conn = Connection()\\n\"\n                                  \"conn.set_progress_handler()\"))\n\n  def test_enable_load_extension_from_sqlite3_Connection(self):\n    self.assertOnlyIn(((2, 7), (3, 2)),\n                      self.detect(\"from sqlite3 import Connection\\n\"\n                                  \"conn = Connection()\\n\"\n                                  \"conn.enable_load_extension()\"))\n\n  def test_load_extension_from_sqlite3_Connection(self):\n    self.assertOnlyIn(((2, 7), (3, 2)),\n                      self.detect(\"from sqlite3 import Connection\\n\"\n                                  \"conn = Connection()\\n\"\n                                  \"conn.load_extension()\"))\n\n  def test_iter_dump_from_sqlite3_Connection(self):\n    self.assertOnlyIn(((2, 6), (3, 0)),\n                      self.detect(\"from sqlite3 import Connection\\n\"\n                                  \"conn = Connection()\\n\"\n                                  \"conn.iter_dump()\"))\n\n  def test_set_trace_callback_from_sqlite3_Connection(self):\n    self.assertOnlyIn((3, 3),\n                      self.detect(\"from sqlite3 import Connection\\n\"\n                                  \"conn = Connection()\\n\"\n                                  \"conn.set_trace_callback()\"))\n\n  def test_keys_from_sqlite3_Row(self):\n    self.assertOnlyIn(((2, 6), (3, 0)),\n                      self.detect(\"from sqlite3 import Row\\n\"\n                                  \"conn = Row()\\n\"\n                                  \"conn.keys()\"))\n\n  def test_create_default_context_from_ssl(self):\n    self.assertOnlyIn(((2, 7), (3, 4)), self.detect(\"import ssl\\nssl.create_default_context()\"))\n\n  def test__https_verify_certificates_from_ssl(self):\n    self.assertOnlyIn((2, 7), self.detect(\"import ssl\\nssl._https_verify_certificates()\"))\n\n  def test_RAND_bytes_from_ssl(self):\n    self.assertOnlyIn((3, 3), self.detect(\"import ssl\\nssl.RAND_bytes()\"))\n\n  def test_RAND_pseudo_bytes_from_ssl(self):\n    self.assertOnlyIn((3, 3), self.detect(\"import ssl\\nssl.RAND_pseudo_bytes()\"))\n\n  def test_match_hostname_from_ssl(self):\n    self.assertOnlyIn(((2, 7), (3, 2)), self.detect(\"import ssl\\nssl.match_hostname()\"))\n\n  def test_get_default_verify_paths_from_ssl(self):\n    self.assertOnlyIn(((2, 7), (3, 4)), self.detect(\"import ssl\\nssl.get_default_verify_paths()\"))\n\n  def test_enum_certificates_from_ssl(self):\n    self.assertOnlyIn(((2, 7), (3, 4)), self.detect(\"import ssl\\nssl.enum_certificates()\"))\n\n  def test_enum_crls_from_ssl(self):\n    self.assertOnlyIn(((2, 7), (3, 4)), self.detect(\"import ssl\\nssl.enum_crls()\"))\n\n  def test_set_alpn_protocols_from_ssl_SSLContext(self):\n    self.assertOnlyIn(((2, 7), (3, 5)),\n                      self.detect(\"from ssl import SSLContext\\n\"\n                                  \"ctx = SSLContext()\\n\"\n                                  \"ctx.set_alpn_protocols()\"))\n\n  def test_cert_store_stats_from_ssl_SSLContext(self):\n    self.assertOnlyIn(((2, 7), (3, 4)),\n                      self.detect(\"from ssl import SSLContext\\n\"\n                                  \"ctx = SSLContext()\\n\"\n                                  \"ctx.cert_store_stats()\"))\n\n  def test_load_default_certs_from_ssl_SSLContext(self):\n    self.assertOnlyIn(((2, 7), (3, 4)),\n                      self.detect(\"from ssl import SSLContext\\n\"\n                                  \"ctx = SSLContext()\\n\"\n                                  \"ctx.load_default_certs()\"))\n\n  def test_get_ca_certs_from_ssl_SSLContext(self):\n    self.assertOnlyIn(((2, 7), (3, 4)),\n                      self.detect(\"from ssl import SSLContext\\n\"\n                                  \"ctx = SSLContext()\\n\"\n                                  \"ctx.get_ca_certs()\"))\n\n  def test_get_ciphers_from_ssl_SSLContext(self):\n    self.assertOnlyIn((3, 6),\n                      self.detect(\"from ssl import SSLContext\\n\"\n                                  \"ctx = SSLContext()\\n\"\n                                  \"ctx.get_ciphers()\"))\n\n  def test_set_npn_protocols_from_ssl_SSLContext(self):\n    self.assertOnlyIn(((2, 7), (3, 3)),\n                      self.detect(\"from ssl import SSLContext\\n\"\n                                  \"ctx = SSLContext()\\n\"\n                                  \"ctx.set_npn_protocols()\"))\n\n  def test_load_dh_params_from_ssl_SSLContext(self):\n    self.assertOnlyIn(((2, 7), (3, 3)),\n                      self.detect(\"from ssl import SSLContext\\n\"\n                                  \"ctx = SSLContext()\\n\"\n                                  \"ctx.load_dh_params()\"))\n\n  def test_set_ecdh_curve_from_ssl_SSLContext(self):\n    self.assertOnlyIn(((2, 7), (3, 3)),\n                      self.detect(\"from ssl import SSLContext\\n\"\n                                  \"ctx = SSLContext()\\n\"\n                                  \"ctx.set_ecdh_curve()\"))\n\n  def test_set_servername_callback_from_ssl_SSLContext(self):\n    self.assertOnlyIn(((2, 7), (3, 4)),\n                      self.detect(\"from ssl import SSLContext\\n\"\n                                  \"ctx = SSLContext()\\n\"\n                                  \"ctx.set_servername_callback()\"))\n\n  def test_verify_client_post_handshake_from_ssl_SSLSocket(self):\n    self.assertOnlyIn((3, 8),\n                      self.detect(\"from ssl import SSLSocket\\n\"\n                                  \"sock = SSLSocket()\\n\"\n                                  \"sock.verify_client_post_handshake()\"))\n\n  def test_check_call_from_subprocess(self):\n    self.assertOnlyIn(((2, 5), (3, 0)), self.detect(\"import subprocess\\nsubprocess.check_call()\"))\n\n  def test_check_output_from_subprocess(self):\n    self.assertOnlyIn(((2, 7), (3, 1)), self.detect(\"import subprocess\\nsubprocess.check_output()\"))\n\n  def test_send_signal_from_subprocess_Popen(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\n        \"from subprocess import Popen\\nPopen.send_signal()\"))\n\n  def test_terminate_from_subprocess_Popen(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\n        \"from subprocess import Popen\\nPopen.terminate()\"))\n\n  def test_kill_from_subprocess_Popen(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\"from subprocess import Popen\\nPopen.kill()\"))\n\n  def test_run_from_subprocess(self):\n    self.assertOnlyIn((3, 5), self.detect(\"import subprocess\\nsubprocess.run()\"))\n\n  def test_extractall_from_tarfile_TarFile(self):\n    self.assertOnlyIn(((2, 5), (3, 0)), self.detect(\n        \"from tarfile import TarFile\\nTarFile.extractall()\"))\n\n  def test_fromtarfile_from_tarfile_TarInfo(self):\n    self.assertOnlyIn(((2, 6), (3, 0)),\n                      self.detect(\"from tarfile import TarInfo\\nTarInfo.fromtarfile()\"))\n\n  def test_shorten_from_textwrap(self):\n    self.assertOnlyIn((3, 4), self.detect(\"import textwrap\\ntextwrap.shorten()\"))\n\n  def test_indent_from_textwrap(self):\n    self.assertOnlyIn((3, 3), self.detect(\"import textwrap\\ntextwrap.indent()\"))\n\n  def test_timeit_from_timeit(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\"import timeit\\ntimeit.timeit()\"))\n\n  def test_repeat_from_timeit(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\"import timeit\\ntimeit.repeat()\"))\n\n  def test_warnpy3k_from_warnings(self):\n    self.assertOnlyIn((2, 6), self.detect(\"import warnings\\nwarnings.warnpy3k()\"))\n\n  def test_iterkeyrefs_from_weakref_WeakKeyDictionary(self):\n    self.assertOnlyIn((2, 5),\n                      self.detect(\"from weakref import WeakKeyDictionary\\n\"\n                                  \"wkd = WeakKeyDictionary()\\n\"\n                                  \"wkd.iterkeyrefs()\"))\n\n  def test_keyrefs_from_weakref_WeakKeyDictionary(self):\n    self.assertOnlyIn(((2, 5), (3, 0)),\n                      self.detect(\"from weakref import WeakKeyDictionary\\n\"\n                                  \"wkd = WeakKeyDictionary()\\n\"\n                                  \"wkd.keyrefs()\"))\n\n  def test_itervaluerefs_from_weakref_WeakValueDictionary(self):\n    self.assertOnlyIn((2, 5),\n                      self.detect(\"from weakref import WeakValueDictionary\\n\"\n                                  \"wkd = WeakValueDictionary()\\n\"\n                                  \"wkd.itervaluerefs()\"))\n\n  def test_valuerefs_from_weakref_WeakValueDictionary(self):\n    self.assertOnlyIn(((2, 5), (3, 0)),\n                      self.detect(\"from weakref import WeakValueDictionary\\n\"\n                                  \"wkd = WeakValueDictionary()\\n\"\n                                  \"wkd.valuerefs()\"))\n\n  def test_read_environ_from_wsgiref_handlers(self):\n    self.assertOnlyIn((3, 2), self.detect(\n        \"import wsgiref.handlers\\nwsgiref.handlers.read_environ()\"))\n\n  def test_fromstringlist_from_xml_etree_ElementTree(self):\n    self.assertOnlyIn(((2, 7), (3, 2)),\n                      self.detect(\"from xml.etree import ElementTree\\n\"\n                                  \"tree = ElementTree()\\n\"\n                                  \"tree.fromstringlist()\"))\n\n  def test_register_namespace_from_xml_etree_ElementTree(self):\n    self.assertOnlyIn(((2, 7), (3, 2)),\n                      self.detect(\"from xml.etree import ElementTree\\n\"\n                                  \"tree = ElementTree()\\n\"\n                                  \"tree.register_namespace()\"))\n\n  def test_tostringlist_from_xml_etree_ElementTree(self):\n    self.assertOnlyIn(((2, 7), (3, 2)),\n                      self.detect(\"from xml.etree import ElementTree\\n\"\n                                  \"tree = ElementTree()\\n\"\n                                  \"tree.tostringlist()\"))\n\n  def test_extend_from_xml_etree_ElementTree_Element(self):\n    self.assertOnlyIn(((2, 7), (3, 2)),\n                      self.detect(\"from xml.etree.ElementTree import Element\\n\"\n                                  \"elm = Element()\\n\"\n                                  \"elm.extend()\"))\n\n  def test_iter_from_xml_etree_ElementTree_Element(self):\n    self.assertOnlyIn(((2, 7), (3, 2)),\n                      self.detect(\"from xml.etree.ElementTree import Element\\n\"\n                                  \"elm = Element()\\n\"\n                                  \"elm.iter()\"))\n\n  def test_iterfind_from_xml_etree_ElementTree_Element(self):\n    self.assertOnlyIn(((2, 7), (3, 2)),\n                      self.detect(\"from xml.etree.ElementTree import Element\\n\"\n                                  \"elm = Element()\\n\"\n                                  \"elm.iterfind()\"))\n\n  def test_itertext_from_xml_etree_ElementTree_Element(self):\n    self.assertOnlyIn(((2, 7), (3, 2)),\n                      self.detect(\"from xml.etree.ElementTree import Element\\n\"\n                                  \"elm = Element()\\n\"\n                                  \"elm.itertext()\"))\n\n  def test_indent_from_xml_etree_ElementTree(self):\n    self.assertOnlyIn((3, 9),\n                      self.detect(\"from xml.etree.ElementTree import indent\\n\"\n                                  \"indent()\"))\n\n  def test_iterfind_from_xml_etree_ElementTree_ElementTree(self):\n    self.assertOnlyIn(((2, 7), (3, 2)),\n                      self.detect(\"from xml.etree.ElementTree import ElementTree\\n\"\n                                  \"tree = ElementTree()\\n\"\n                                  \"tree.iterfind()\"))\n\n  def test_doctype_from_xml_etree_ElementTree_TreeBuilder(self):\n    self.assertOnlyIn(((2, 7), (3, 2)),\n                      self.detect(\"from xml.etree.ElementTree import TreeBuilder\\n\"\n                                  \"tree = TreeBuilder()\\n\"\n                                  \"tree.doctype()\"))\n\n  def test_comment_from_xml_etree_ElementTree_TreeBuilder(self):\n    self.assertOnlyIn((3, 8),\n                      self.detect(\"from xml.etree.ElementTree import TreeBuilder\\n\"\n                                  \"tree = TreeBuilder()\\n\"\n                                  \"tree.comment()\"))\n\n  def test_start_ns_from_xml_etree_ElementTree_TreeBuilder(self):\n    self.assertOnlyIn((3, 8),\n                      self.detect(\"from xml.etree.ElementTree import TreeBuilder\\n\"\n                                  \"tree = TreeBuilder()\\n\"\n                                  \"tree.start_ns()\"))\n\n  def test_end_ns_from_xml_etree_ElementTree_TreeBuilder(self):\n    self.assertOnlyIn((3, 8),\n                      self.detect(\"from xml.etree.ElementTree import TreeBuilder\\n\"\n                                  \"tree = TreeBuilder()\\n\"\n                                  \"tree.end_ns()\"))\n\n  def test_canonicalize_from_xml_etree_ElementTree(self):\n    self.assertOnlyIn((3, 8),\n                      self.detect(\"from xml.etree import ElementTree\\n\"\n                                  \"tree = ElementTree()\\n\"\n                                  \"tree.canonicalize()\"))\n\n  def test_open_from_zipfile_ZipFile(self):\n    self.assertOnlyIn(((2, 6), (3, 0)),\n                      self.detect(\"from zipfile import ZipFile\\n\"\n                                  \"zf = ZipFile()\\n\"\n                                  \"zf.open()\"))\n\n  def test_extract_from_zipfile_ZipFile(self):\n    self.assertOnlyIn(((2, 6), (3, 0)),\n                      self.detect(\"from zipfile import ZipFile\\n\"\n                                  \"zf = ZipFile()\\n\"\n                                  \"zf.extract()\"))\n\n  def test_extractall_from_zipfile_ZipFile(self):\n    self.assertOnlyIn(((2, 6), (3, 0)),\n                      self.detect(\"from zipfile import ZipFile\\n\"\n                                  \"zf = ZipFile()\\n\"\n                                  \"zf.extractall()\"))\n\n  def test_setpassword_from_zipfile_ZipFile(self):\n    self.assertOnlyIn(((2, 6), (3, 0)),\n                      self.detect(\"from zipfile import ZipFile\\n\"\n                                  \"zf = ZipFile()\\n\"\n                                  \"zf.setpassword()\"))\n\n  def test_from_file_from_zipfile_ZipInfo(self):\n    self.assertOnlyIn((3, 6),\n                      self.detect(\"from zipfile import ZipInfo\\n\"\n                                  \"zf = ZipInfo()\\n\"\n                                  \"zf.from_file()\"))\n\n  def test_is_dir_from_zipfile_ZipInfo(self):\n    self.assertOnlyIn((3, 6),\n                      self.detect(\"from zipfile import ZipInfo\\n\"\n                                  \"zf = ZipInfo()\\n\"\n                                  \"zf.is_dir()\"))\n\n  def test_get_filename_from_zipimport_zipimporter(self):\n    self.assertOnlyIn(((2, 7), (3, 1)),\n                      self.detect(\"from zipimport import zipimporter\\n\"\n                                  \"zi = zipimporter()\\n\"\n                                  \"zi.get_filename()\"))\n\n  def test_Tcl_from_Tkinter(self):\n    self.assertOnlyIn((2, 4), self.detect(\"import Tkinter\\nTkinter.Tcl()\"))\n\n  def test_mksalt_from_crypt(self):\n    self.assertOnlyIn((3, 3), self.detect(\"import crypt\\ncrypt.mksalt()\"))\n\n  def test_formatdate_from_email_utils(self):\n    self.assertOnlyIn(((2, 4), (3, 0)), self.detect(\"import email.utils\\nemail.utils.formatdate()\"))\n\n  def test_localtime_from_email_utils(self):\n    self.assertOnlyIn((3, 3), self.detect(\"import email.utils\\nemail.utils.localtime()\"))\n\n  def test_parsedate_to_datetime_from_email_utils(self):\n    self.assertOnlyIn((3, 3), self.detect(\n      \"import email.utils\\nemail.utils.parsedate_to_datetime()\"))\n\n  def test_format_datetime_from_email_utils(self):\n    self.assertOnlyIn((3, 3), self.detect(\"import email.utils\\nemail.utils.format_datetime()\"))\n\n  def test_copysign_from_math(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\"import math\\nmath.copysign()\"))\n\n  def test_fsum_from_math(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\"import math\\nmath.fsum()\"))\n\n  def test_isinf_from_math(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\"import math\\nmath.isinf()\"))\n\n  def test_isnan_from_math(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\"import math\\nmath.isnan()\"))\n\n  def test_trunc_from_math(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\"import math\\nmath.trunc()\"))\n\n  def test_expm1_from_math(self):\n    self.assertOnlyIn(((2, 7), (3, 2)), self.detect(\"import math\\nmath.expm1()\"))\n\n  def test_log1p_from_math(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\"import math\\nmath.log1p()\"))\n\n  def test_asinh_from_math(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\"import math\\nmath.asinh()\"))\n\n  def test_acosh_from_math(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\"import math\\nmath.acosh()\"))\n\n  def test_atanh_from_math(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\"import math\\nmath.atanh()\"))\n\n  def test_erf_from_math(self):\n    self.assertOnlyIn(((2, 7), (3, 2)), self.detect(\"import math\\nmath.erf()\"))\n\n  def test_erfc_from_math(self):\n    self.assertOnlyIn(((2, 7), (3, 2)), self.detect(\"import math\\nmath.erfc()\"))\n\n  def test_gamma_from_math(self):\n    self.assertOnlyIn(((2, 7), (3, 2)), self.detect(\"import math\\nmath.gamma()\"))\n\n  def test_lgamma_from_math(self):\n    self.assertOnlyIn(((2, 7), (3, 2)), self.detect(\"import math\\nmath.lgamma()\"))\n\n  def test_gcd_from_math(self):\n    self.assertOnlyIn((3, 5), self.detect(\"import math\\nmath.gcd()\"))\n\n  def test_isclose_from_math(self):\n    self.assertOnlyIn((3, 5), self.detect(\"import math\\nmath.isclose()\"))\n\n  def test_isfinite_from_math(self):\n    self.assertOnlyIn((3, 2), self.detect(\"import math\\nmath.isfinite()\"))\n\n  def test_log2_from_math(self):\n    self.assertOnlyIn((3, 3), self.detect(\"import math\\nmath.log2()\"))\n\n  def test_dist_from_math(self):\n    self.assertOnlyIn((3, 8), self.detect(\"import math\\nmath.dist()\"))\n\n  def test_comb_from_math(self):\n    self.assertOnlyIn((3, 8), self.detect(\"import math\\nmath.comb()\"))\n\n  def test_isqrt_from_math(self):\n    self.assertOnlyIn((3, 8), self.detect(\"import math\\nmath.isqrt()\"))\n\n  def test_perm_from_math(self):\n    self.assertOnlyIn((3, 8), self.detect(\"import math\\nmath.perm()\"))\n\n  def test_prod_from_math(self):\n    self.assertOnlyIn((3, 8), self.detect(\"import math\\nmath.prod()\"))\n\n  def test_remainder_from_math(self):\n    self.assertOnlyIn((3, 7), self.detect(\"import math\\nmath.remainder()\"))\n\n  def test_home_from_path(self):\n    self.assertOnlyIn((3, 5), self.detect(\"from pathlib import Path\\np=Path('foo')\\np.home()\"))\n\n  def test_expanduser_from_path(self):\n    self.assertOnlyIn((3, 5), self.detect(\n      \"from pathlib import Path\\np=Path('foo')\\np.expanduser()\"))\n\n  def test_read_bytes_from_path(self):\n    self.assertOnlyIn((3, 5), self.detect(\n      \"from pathlib import Path\\np=Path('foo')\\np.read_bytes()\"))\n\n  def test_is_mount_from_path(self):\n    self.assertOnlyIn((3, 7), self.detect(\"from pathlib import Path\\np=Path('foo')\\np.is_mount()\"))\n\n  def test_read_text_from_path(self):\n    self.assertOnlyIn((3, 5), self.detect(\"from pathlib import Path\\np=Path('foo')\\np.read_text()\"))\n\n  def test_samefile_from_path(self):\n    self.assertOnlyIn((3, 5), self.detect(\"from pathlib import Path\\np=Path('foo')\\np.samefile()\"))\n\n  def test_write_bytes_from_path(self):\n    self.assertOnlyIn((3, 5), self.detect(\n        \"from pathlib import Path\\np=Path('foo')\\np.write_bytes()\"))\n\n  def test_write_text_from_path(self):\n    self.assertOnlyIn((3, 5), self.detect(\n      \"from pathlib import Path\\np=Path('foo')\\np.write_text()\"))\n\n  def test_link_to_from_path(self):\n    self.assertOnlyIn((3, 8), self.detect(\"from pathlib import Path\\np=Path('foo')\\np.link_to()\"))\n\n  def test_readlink_from_path(self):\n    self.assertOnlyIn((3, 9), self.detect(\"from pathlib import Path\\np=Path('foo')\\np.readlink()\"))\n\n  def test_is_relative_to_from_pathlib_PurePath(self):\n    self.assertOnlyIn((3, 9),\n                      self.detect(\"from pathlib import PurePath\\n\"\n                                  \"p = PurePath()\\n\"\n                                  \"p.is_relative_to()\"))\n\n  def test_with_stem_from_pathlib_PurePath(self):\n    self.assertOnlyIn((3, 9),\n                      self.detect(\"from pathlib import PurePath\\n\"\n                                  \"p = PurePath()\\n\"\n                                  \"p.with_stem()\"))\n\n  def test_all_suffixes_of_importlib_machinery(self):\n    self.assertOnlyIn((3, 3),\n                      self.detect(\"from importlib import machinery\\nmachinery.all_suffixes()\"))\n\n  def test_find_spec_of_importlib_machinery_PathFinder(self):\n    self.assertOnlyIn((3, 4), self.detect(\n      \"from importlib.machinery import PathFinder\\nPathFinder.find_spec()\"))\n\n  def test_find_spec_of_importlib_machinery_FileFinder(self):\n    self.assertOnlyIn((3, 4), self.detect(\n      \"from importlib.machinery import FileFinder\\nFileFinder.find_spec()\"))\n\n  def test_create_module_of_importlib_machinery_ExtensionFileLoader(self):\n    self.assertOnlyIn((3, 5),\n                      self.detect(\"from importlib.machinery import ExtensionFileLoader\\n\"\n                                  \"ExtensionFileLoader.create_module()\"))\n\n  def test_exec_module_of_importlib_machinery_ExtensionFileLoader(self):\n    self.assertOnlyIn((3, 5),\n                      self.detect(\"from importlib.machinery import ExtensionFileLoader\\n\"\n                                  \"ExtensionFileLoader.exec_module()\"))\n\n  def test_get_filename_of_importlib_machinery_ExtensionFileLoader(self):\n    self.assertOnlyIn((3, 4),\n                      self.detect(\"from importlib.machinery import ExtensionFileLoader\\n\"\n                                  \"ExtensionFileLoader.get_filename()\"))\n\n  def test_cache_from_source_of_importlib_util(self):\n    self.assertOnlyIn((3, 4), self.detect(\"from importlib import util\\nutil.cache_from_source\"))\n\n  def test_source_from_cache_of_importlib_util(self):\n    self.assertOnlyIn((3, 4), self.detect(\"from importlib import util\\nutil.source_from_cache\"))\n\n  def test_decode_source_of_importlib_util(self):\n    self.assertOnlyIn((3, 4), self.detect(\"from importlib import util\\nutil.decode_source\"))\n\n  def test_resolve_name_of_importlib_util(self):\n    self.assertOnlyIn((3, 3), self.detect(\"from importlib import util\\nutil.resolve_name\"))\n\n  def test_find_spec_of_importlib_util(self):\n    self.assertOnlyIn((3, 4), self.detect(\"from importlib import util\\nutil.find_spec\"))\n\n  def test_module_from_spec_of_importlib_util(self):\n    self.assertOnlyIn((3, 5), self.detect(\"from importlib import util\\nutil.module_from_spec\"))\n\n  def test_spec_from_loader_of_importlib_util(self):\n    self.assertOnlyIn((3, 4), self.detect(\"from importlib import util\\nutil.spec_from_loader\"))\n\n  def test_spec_from_file_location_of_importlib_util(self):\n    self.assertOnlyIn((3, 4), self.detect(\n        \"from importlib import util\\nutil.spec_from_file_location\"))\n\n  def test_source_hash_of_importlib_util(self):\n    self.assertOnlyIn((3, 7), self.detect(\"from importlib import util\\nutil.source_hash\"))\n\n  def test_pthread_getcpuclockid_of_time(self):\n    self.assertOnlyIn((3, 7), self.detect(\"from time import pthread_getcpuclockid\"))\n\n  def test_clock_getres_of_time(self):\n    self.assertOnlyIn((3, 3), self.detect(\"from time import clock_getres\"))\n\n  def test_clock_gettime_of_time(self):\n    self.assertOnlyIn((3, 3), self.detect(\"from time import clock_gettime\"))\n\n  def test_clock_gettime_ns_of_time(self):\n    self.assertOnlyIn((3, 7), self.detect(\"from time import clock_gettime_ns\"))\n\n  def test_clock_settime_of_time(self):\n    self.assertOnlyIn((3, 3), self.detect(\"from time import clock_settime\"))\n\n  def test_clock_settime_ns_of_time(self):\n    self.assertOnlyIn((3, 7), self.detect(\"from time import clock_settime_ns\"))\n\n  def test_get_clock_info_of_time(self):\n    self.assertOnlyIn((3, 3), self.detect(\"from time import get_clock_info\"))\n\n  def test_monotonic_of_time(self):\n    self.assertOnlyIn((3, 3), self.detect(\"from time import monotonic\"))\n\n  def test_monotonic_ns_of_time(self):\n    self.assertOnlyIn((3, 7), self.detect(\"from time import monotonic_ns\"))\n\n  def test_perf_counter_of_time(self):\n    self.assertOnlyIn((3, 3), self.detect(\"from time import perf_counter\"))\n\n  def test_perf_counter_ns_of_time(self):\n    self.assertOnlyIn((3, 7), self.detect(\"from time import perf_counter_ns\"))\n\n  def test_process_time_of_time(self):\n    self.assertOnlyIn((3, 3), self.detect(\"from time import process_time\"))\n\n  def test_process_time_ns_of_time(self):\n    self.assertOnlyIn((3, 7), self.detect(\"from time import process_time_ns\"))\n\n  def test_thread_time_of_time(self):\n    self.assertOnlyIn((3, 7), self.detect(\"from time import thread_time\"))\n\n  def test_thread_time_ns_of_time(self):\n    self.assertOnlyIn((3, 7), self.detect(\"from time import thread_time_ns\"))\n\n  def test_time_ns_of_time(self):\n    self.assertOnlyIn((3, 7), self.detect(\"from time import time_ns\"))\n\n  def test_run_of_asyncio(self):\n    self.assertOnlyIn((3, 7), self.detect(\"import asyncio\\nasyncio.run()\"))\n\n  def test_run_coroutine_threadsafe_of_asyncio(self):\n    self.assertOnlyIn((3, 5), self.detect(\"import asyncio\\nasyncio.run_coroutine_threadsafe()\"))\n\n  def test_create_task_of_asyncio(self):\n    self.assertOnlyIn((3, 7), self.detect(\"import asyncio\\nasyncio.create_task()\"))\n\n  def test_current_task_of_asyncio(self):\n    self.assertOnlyIn((3, 7), self.detect(\"import asyncio\\nasyncio.current_task()\"))\n\n  def test_all_tasks_of_asyncio(self):\n    self.assertOnlyIn((3, 7), self.detect(\"import asyncio\\nasyncio.all_tasks()\"))\n\n  def test_parse_intermixed_args_of_argparse_ArgumentParser(self):\n    self.assertOnlyIn((3, 7),\n                      self.detect(\"from argparse import ArgumentParser\\n\"\n                                  \"ap = ArgumentParser()\\nap.parse_intermixed_args()\"))\n\n  def test_parse_known_intermixed_args_of_argparse_ArgumentParser(self):\n    self.assertOnlyIn((3, 7),\n                      self.detect(\"from argparse import ArgumentParser\\n\"\n                                  \"ap = ArgumentParser()\\nap.parse_known_intermixed_args()\"))\n\n  def test_byteswap_of_audioop(self):\n    self.assertOnlyIn((3, 4), self.detect(\"import audioop\\naudioop.byteswap()\"))\n\n  def test_a85encode_of_base64(self):\n    self.assertOnlyIn((3, 4), self.detect(\"import base64\\nbase64.a85encode()\"))\n\n  def test_a85decode_of_base64(self):\n    self.assertOnlyIn((3, 4), self.detect(\"import base64\\nbase64.a85decode()\"))\n\n  def test_decodebytes_of_base64(self):\n    self.assertOnlyIn((3, 1), self.detect(\"import base64\\nbase64.decodebytes()\"))\n\n  def test_encodebytes_of_base64(self):\n    self.assertOnlyIn((3, 1), self.detect(\"import base64\\nbase64.encodebytes()\"))\n\n  def test_bpformat_of_bdb_Breakpoint(self):\n    self.assertOnlyIn((3, 2), self.detect(\n        \"from bdb import Breakpoint\\nbp=Breakpoint()\\nbp.bpformat()\"))\n\n  def test_get_bpbynumber_of_bdb_Bdb(self):\n    self.assertOnlyIn((3, 2), self.detect(\"from bdb import Bdb\\nbp=Bdb()\\nbp.get_bpbynumber()\"))\n\n  def test_itermonthdays3_of_calendar_Calendar(self):\n    self.assertOnlyIn((3, 7), self.detect(\n      \"from calendar import Calendar\\nc=Calendar()\\nc.itermonthdays3()\"))\n\n  def test_itermonthdays4_of_calendar_Calendar(self):\n    self.assertOnlyIn((3, 7), self.detect(\n      \"from calendar import Calendar\\nc=Calendar()\\nc.itermonthdays4()\"))\n\n  def test_isfinite_of_cmath(self):\n    self.assertOnlyIn((3, 2), self.detect(\"import cmath\\ncmath.isfinite()\"))\n\n  def test_isclose_of_cmath(self):\n    self.assertOnlyIn((3, 5), self.detect(\"import cmath\\ncmath.isclose()\"))\n\n  def test_compile_file_of_compileall(self):\n    self.assertOnlyIn(((2, 7), (3, 2)), self.detect(\"import compileall\\ncompileall.compile_file()\"))\n\n  def test_nullcontext_of_contextlib(self):\n    self.assertOnlyIn((3, 7), self.detect(\"import contextlib\\ncontextlib.nullcontext()\"))\n\n  def test_writeheader_of_csv_DictWriter(self):\n    self.assertOnlyIn(((2, 7), (3, 2)), self.detect(\"from csv import DictWriter\\n\"\n                                                    \"DictWriter.writeheader()\"))\n\n  def test_update_lines_cols_of_curses(self):\n    self.assertOnlyIn((3, 5), self.detect(\"import curses\\ncurses.update_lines_cols()\"))\n\n  def test_unget_wch_of_curses(self):\n    self.assertOnlyIn((3, 3), self.detect(\"import curses\\ncurses.unget_wch()\"))\n\n  def test_fromisoformat_of_datetime_date(self):\n    self.assertOnlyIn((3, 7), self.detect(\"from datetime import date\\ndate.fromisoformat()\"))\n\n  def test_fromisoformat_of_datetime_time(self):\n    self.assertOnlyIn((3, 7), self.detect(\"from datetime import time\\ntime.fromisoformat()\"))\n\n  def test_fromisoformat_of_datetime_datetime(self):\n    self.assertOnlyIn((3, 7), self.detect(\n      \"from datetime import datetime\\ndatetime.fromisoformat()\"))\n\n  def test_fromisocalendar_of_datetime_date(self):\n    self.assertOnlyIn((3, 8), self.detect(\"from datetime import date\\ndate.fromisocalendar()\"))\n\n  def test_fromisocalendar_of_datetime_datetime(self):\n    self.assertOnlyIn((3, 8), self.detect(\n        \"from datetime import datetime\\ndatetime.fromisocalendar()\"))\n\n  def test_code_info_of_dis(self):\n    self.assertOnlyIn((3, 2), self.detect(\"import dis\\ndis.code_info()\"))\n\n  def test_show_code_of_dis(self):\n    self.assertOnlyIn((3, 2), self.detect(\"import dis\\ndis.show_code()\"))\n\n  def test_get_instructions_of_dis(self):\n    self.assertOnlyIn((3, 4), self.detect(\"import dis\\ndis.get_instructions()\"))\n\n  def test_stack_effect_of_dis(self):\n    self.assertOnlyIn((3, 4), self.detect(\"import dis\\ndis.stack_effect()\"))\n\n  def test_as_integer_ratio_of_franctions_Fraction(self):\n    self.assertOnlyIn((3, 8),\n                      self.detect(\"from fractions import Fraction\\n\"\n                                  \"Fraction(42).as_integer_ratio()\"))\n    self.assertOnlyIn((3, 8),\n                      self.detect(\"from fractions import Fraction\\n\"\n                                  \"f=Fraction(42)\\nf.as_integer_ratio()\"))\n\n  def test_pgettext_of_gettext(self):\n    self.assertOnlyIn((3, 8), self.detect(\"import gettext\\ngettext.pgettext()\"))\n\n  def test_dpgettext_of_gettext(self):\n    self.assertOnlyIn((3, 8), self.detect(\"import gettext\\ngettext.dpgettext()\"))\n\n  def test_npgettext_of_gettext(self):\n    self.assertOnlyIn((3, 8), self.detect(\"import gettext\\ngettext.npgettext()\"))\n\n  def test_dnpgettext_of_gettext(self):\n    self.assertOnlyIn((3, 8), self.detect(\"import gettext\\ngettext.dnpgettext()\"))\n\n  def test_compress_of_gzip(self):\n    self.assertOnlyIn((3, 2), self.detect(\"import gzip\\ngzip.compress()\"))\n\n  def test_decompress_of_gzip(self):\n    self.assertOnlyIn((3, 2), self.detect(\"import gzip\\ngzip.decompress()\"))\n\n  def test_peek_of_gzip_GzipFile(self):\n    self.assertOnlyIn((3, 2), self.detect(\"from gzip import GzipFile\\nGzipFile.peek()\"))\n\n  def test_madvise_of_mmap_mmap(self):\n    self.assertOnlyIn((3, 8), self.detect(\"from mmap import mmap\\nmmap.madvise()\"))\n\n  def test_add_dll_directory_of_os(self):\n    self.assertOnlyIn((3, 8), self.detect(\"import os\\nos.add_dll_directory()\"))\n\n  def test_memfd_create_of_os(self):\n    self.assertOnlyIn((3, 8), self.detect(\"import os\\nos.memfd_create()\"))\n\n  def test_getxattr_of_os(self):\n    self.assertOnlyIn((3, 3), self.detect(\"from os import getxattr\"))\n\n  def test_setxattr_of_os(self):\n    self.assertOnlyIn((3, 3), self.detect(\"from os import setxattr\"))\n\n  def test_removexattr_of_os(self):\n    self.assertOnlyIn((3, 3), self.detect(\"from os import removexattr\"))\n\n  def test_listxattr_of_os(self):\n    self.assertOnlyIn((3, 3), self.detect(\"from os import listxattr\"))\n\n  def test_reducer_override_from_pickle_Pickler(self):\n    self.assertOnlyIn((3, 8),\n                      self.detect(\"from pickle import Pickler\\n\"\n                                  \"p=Pickler('foo')\\n\"\n                                  \"p.reducer_override(None, None)\"))\n\n  def test_dump_of_plistlib(self):\n    self.assertOnlyIn((3, 4), self.detect(\"from plistlib import dump\"))\n\n  def test_dumps_of_plistlib(self):\n    self.assertOnlyIn((3, 4), self.detect(\"from plistlib import dumps\"))\n\n  def test_load_of_plistlib(self):\n    self.assertOnlyIn((3, 4), self.detect(\"from plistlib import load\"))\n\n  def test_loads_of_plistlib(self):\n    self.assertOnlyIn((3, 4), self.detect(\"from plistlib import loads\"))\n\n  def test_create_server_of_socket(self):\n    self.assertOnlyIn((3, 8), self.detect(\"from socket import create_server\"))\n\n  def test_has_dualstack_ipv6_of_socket(self):\n    self.assertOnlyIn((3, 8), self.detect(\"from socket import has_dualstack_ipv6\"))\n\n  def test_fromshare_of_socket(self):\n    self.assertOnlyIn((3, 3), self.detect(\"from socket import fromshare\"))\n\n  def test_share_of_socket_socket(self):\n    self.assertOnlyIn((3, 3), self.detect(\"from socket import socket\\n\"\n                                          \"socket().share\"))\n\n  def test_close_of_socket(self):\n    self.assertOnlyIn((3, 7), self.detect(\"from socket import close\"))\n\n  def test_CMSG_LEN_of_socket(self):\n    self.assertOnlyIn((3, 3), self.detect(\"from socket import CMSG_LEN\"))\n\n  def test_CMSG_SPACE_of_socket(self):\n    self.assertOnlyIn((3, 3), self.detect(\"from socket import CMSG_SPACE\"))\n\n  def test_sethostname_of_socket(self):\n    self.assertOnlyIn((3, 3), self.detect(\"from socket import sethostname\"))\n\n  def test_if_nameindex_of_socket(self):\n    self.assertOnlyIn((3, 3), self.detect(\"from socket import if_nameindex\"))\n\n  def test_if_nametoindex_of_socket(self):\n    self.assertOnlyIn((3, 3), self.detect(\"from socket import if_nametoindex\"))\n\n  def test_if_indextoname_of_socket(self):\n    self.assertOnlyIn((3, 3), self.detect(\"from socket import if_indextoname\"))\n\n  def test_detach_of_socket_socket(self):\n    self.assertOnlyIn((3, 2), self.detect(\"from socket import socket\\n\"\n                                          \"socket().detach\"))\n\n  def test_get_inheritable_of_socket_socket(self):\n    self.assertOnlyIn((3, 4), self.detect(\"from socket import socket\\n\"\n                                          \"socket().get_inheritable\"))\n\n  def test_set_inheritable_of_socket_socket(self):\n    self.assertOnlyIn((3, 4), self.detect(\"from socket import socket\\n\"\n                                          \"socket().set_inheritable\"))\n\n  def test_getblocking_of_socket_socket(self):\n    self.assertOnlyIn((3, 7), self.detect(\"from socket import socket\\n\"\n                                          \"socket().getblocking\"))\n\n  def test_recvmsg_of_socket_socket(self):\n    self.assertOnlyIn((3, 3), self.detect(\"from socket import socket\\n\"\n                                          \"socket().recvmsg\"))\n\n  def test_recvmsg_into_of_socket_socket(self):\n    self.assertOnlyIn((3, 3), self.detect(\"from socket import socket\\n\"\n                                          \"socket().recvmsg_into\"))\n\n  def test_sendmsg_of_socket_socket(self):\n    self.assertOnlyIn((3, 3), self.detect(\"from socket import socket\\n\"\n                                          \"socket().sendmsg\"))\n\n  def test_sendmsg_afalg_of_socket_socket(self):\n    self.assertOnlyIn((3, 6), self.detect(\"from socket import socket\\n\"\n                                          \"socket().sendmsg_afalg\"))\n\n  def test_sendfile_of_socket_socket(self):\n    self.assertOnlyIn((3, 5), self.detect(\"from socket import socket\\n\"\n                                          \"socket().sendfile\"))\n\n  def test_fmean_of_statistics(self):\n    self.assertOnlyIn((3, 8), self.detect(\"from statistics import fmean\"))\n\n  def test_geometric_mean_of_statistics(self):\n    self.assertOnlyIn((3, 8), self.detect(\"from statistics import geometric_mean\"))\n\n  def test_harmonic_mean_of_statistics(self):\n    self.assertOnlyIn((3, 6), self.detect(\"from statistics import harmonic_mean\"))\n\n  def test_multimode_of_statistics(self):\n    self.assertOnlyIn((3, 8), self.detect(\"from statistics import multimode\"))\n\n  def test_quantiles_of_statistics(self):\n    self.assertOnlyIn((3, 8), self.detect(\"from statistics import quantiles\"))\n\n  def test_unraisablehook_of_sys(self):\n    self.assertOnlyIn((3, 8), self.detect(\"from sys import unraisablehook\"))\n\n  def test_excepthook_of_threading(self):\n    self.assertOnlyIn((3, 8), self.detect(\"from threading import excepthook\"))\n\n  def test_get_native_id_of_threading(self):\n    self.assertOnlyIn((3, 8), self.detect(\"from threading import get_native_id\"))\n\n  def test_get_ident_of_threading(self):\n    self.assertOnlyIn((3, 3), self.detect(\"from threading import get_ident\"))\n\n  def test_main_thread_of_threading(self):\n    self.assertOnlyIn((3, 4), self.detect(\"from threading import main_thread\"))\n\n  def test_generate_tokens_of_tokenize(self):\n    self.assertOnlyIn(((2, 2), (3, 0)), self.detect(\"from tokenize import generate_tokens\"))\n\n  def test_untokenize_of_tokenize(self):\n    self.assertOnlyIn(((2, 5), (3, 0)), self.detect(\"from tokenize import untokenize\"))\n\n  def test_open_of_tokenize(self):\n    self.assertOnlyIn((3, 2), self.detect(\"from tokenize import open\"))\n\n  def test_get_origin_of_typing(self):\n    self.assertOnlyIn((3, 8), self.detect(\"from typing import get_origin\"))\n\n  def test_get_args_of_typing(self):\n    self.assertOnlyIn((3, 8), self.detect(\"from typing import get_args\"))\n\n  def test_is_normalized_of_unicodedata(self):\n    self.assertOnlyIn((3, 8), self.detect(\"from unicodedata import is_normalized\"))\n\n  def test_addaudithook_of_sys(self):\n    self.assertOnlyIn((3, 8), self.detect(\"from sys import addaudithook\"))\n\n  def test_audit_of_sys(self):\n    self.assertOnlyIn((3, 8), self.detect(\"from sys import audit\"))\n\n  def test_copy_file_range_of_os(self):\n    self.assertOnlyIn((3, 8), self.detect(\"from os import copy_file_range\"))\n\n  def test_posix_spawn_of_os(self):\n    self.assertOnlyIn((3, 8), self.detect(\"from os import posix_spawn\"))\n\n  def test_posix_spawnp_of_os(self):\n    self.assertOnlyIn((3, 8), self.detect(\"from os import posix_spawnp\"))\n\n  def test_register_at_fork_of_os(self):\n    self.assertOnlyIn((3, 7), self.detect(\"from os import register_at_fork\"))\n\n  def test_S_ISDOOR_of_stat(self):\n    self.assertOnlyIn((3, 4), self.detect(\"from stat import S_ISDOOR\"))\n\n  def test_S_ISPORT_of_stat(self):\n    self.assertOnlyIn((3, 4), self.detect(\"from stat import S_ISPORT\"))\n\n  def test_S_ISWHT_of_stat(self):\n    self.assertOnlyIn((3, 4), self.detect(\"from stat import S_ISWHT\"))\n\n  def test_filemode_of_stat(self):\n    self.assertOnlyIn((3, 3), self.detect(\"from stat import filemode\"))\n\n  def test_ehlo_or_helo_if_needed_of_smtplib_SMTP(self):\n    self.assertOnlyIn(((2, 6), (3, 0)),\n                      self.detect(\"from smtplib import SMTP\\nSMTP.ehlo_or_helo_if_needed\"))\n\n  def test_auth_of_smtplib_SMTP(self):\n    self.assertOnlyIn((3, 5), self.detect(\"from smtplib import SMTP\\nSMTP.auth\"))\n\n  def test_send_message_of_smtplib_SMTP(self):\n    self.assertOnlyIn((3, 2), self.detect(\"from smtplib import SMTP\\nSMTP.send_message\"))\n\n  def test_dictConfig_from_logging_config(self):\n    self.assertOnlyIn(((2, 7), (3, 2)), self.detect(\n        \"import logging.config\\nlogging.config.dictConfig()\"))\n\n  def test_captured_stdout_from_test_support(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\n        \"import test.support\\ntest.support.captured_stdout()\"))\n\n  def test_catch_threading_exception_from_test_support(self):\n    self.assertOnlyIn((3, 8), self.detect(\n        \"import test.support\\ntest.support.catch_threading_exception()\"))\n\n  def test_catch_unraisable_exception_from_test_support(self):\n    self.assertOnlyIn((3, 8), self.detect(\n        \"import test.support\\ntest.support.catch_unraisable_exception()\"))\n\n  def test_check__all___from_test_support(self):\n    self.assertOnlyIn((3, 6), self.detect(\"import test.support\\ntest.support.check__all__()\"))\n\n  def test_check_py3k_warnings_from_test_support(self):\n    self.assertOnlyIn((2, 7), self.detect(\n      \"import test.support\\ntest.support.check_py3k_warnings()\"))\n\n  def test_check_syntax_warning_from_test_support(self):\n    self.assertOnlyIn((3, 8), self.detect(\n        \"import test.support\\ntest.support.check_syntax_warning()\"))\n\n  def test_check_warnings_from_test_support(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\n        \"import test.support\\ntest.support.check_warnings()\"))\n\n  def test_detect_api_mismatch_from_test_support(self):\n    self.assertOnlyIn((3, 5), self.detect(\n      \"import test.support\\ntest.support.detect_api_mismatch()\"))\n\n  def test_import_fresh_module_from_test_support(self):\n    self.assertOnlyIn(((2, 7), (3, 1)), self.detect(\n        \"import test.support\\ntest.support.import_fresh_module()\"))\n\n  def test_import_module_from_test_support(self):\n    self.assertOnlyIn(((2, 7), (3, 1)), self.detect(\n        \"import test.support\\ntest.support.import_module()\"))\n\n  def test_seal_from_unittest_mock(self):\n    self.assertOnlyIn((3, 7), self.detect(\"import unittest.mock\\nunittest.mock.seal()\"))\n\n  def test_quoteattr_from_xml_sax_saxutils(self):\n    self.assertOnlyIn(((2, 2), (3, 0)), self.detect(\n        \"import xml.sax.saxutils\\nxml.sax.saxutils.quoteattr()\"))\n\n  def test_unescape_from_xml_sax_saxutils(self):\n    self.assertOnlyIn(((2, 3), (3, 0)), self.detect(\n        \"import xml.sax.saxutils\\nxml.sax.saxutils.unescape()\"))\n\n  def test_set_from_ConfigParser_SafeConfigParser(self):\n    self.assertOnlyIn((2, 4),\n                      self.detect(\"from ConfigParser import SafeConfigParser\\n\"\n                                  \"SafeConfigParser().set()\"))\n\n  def test_GetArgv_from_EasyDialogs(self):\n    self.assertOnlyIn((2, 0), self.detect(\"import EasyDialogs\\nEasyDialogs.GetArgv()\"))\n\n  def test_join_from_Queue_Queue(self):\n    self.assertOnlyIn((2, 5),\n                      self.detect(\"from Queue import Queue\\n\"\n                                  \"Queue().join()\"))\n\n  def test_task_done_from_Queue_Queue(self):\n    self.assertOnlyIn((2, 5),\n                      self.detect(\"from Queue import Queue\\n\"\n                                  \"Queue().task_done()\"))\n\n  def test_do_GET_from_SimpleHTTPServer_SimpleHTTPRequestHandler(self):\n    self.assertOnlyIn((2, 5),\n                      self.detect(\"from SimpleHTTPServer import SimpleHTTPRequestHandler\\n\"\n                                  \"SimpleHTTPRequestHandler().do_GET()\"))\n\n  def test_server_close_from_SocketServer_BaseServer(self):\n    self.assertOnlyIn((2, 6),\n                      self.detect(\"from SocketServer import BaseServer\\n\"\n                                  \"BaseServer().server_close()\"))\n\n  def test_shutdown_from_SocketServer_BaseServer(self):\n    self.assertOnlyIn((2, 6),\n                      self.detect(\"from SocketServer import BaseServer\\n\"\n                                  \"BaseServer().shutdown()\"))\n\n  def test_get_native_id_from__thread(self):\n    self.assertOnlyIn((3, 8), self.detect(\"import _thread\\n_thread.get_native_id()\"))\n\n  def test_CreateKeyEx_from__winreg(self):\n    self.assertOnlyIn((2, 7), self.detect(\"import _winreg\\n_winreg.CreateKeyEx()\"))\n\n  def test_DeleteKeyEx_from__winreg(self):\n    self.assertOnlyIn((2, 7), self.detect(\"import _winreg\\n_winreg.DeleteKeyEx()\"))\n\n  def test_ExpandEnvironmentStrings_from__winreg(self):\n    self.assertOnlyIn((2, 6), self.detect(\"import _winreg\\n_winreg.ExpandEnvironmentStrings()\"))\n\n  def test_get_cache_token_from_abc(self):\n    self.assertOnlyIn((3, 4), self.detect(\"import abc\\nabc.get_cache_token()\"))\n\n  def test_frombytes_from_array_array(self):\n    self.assertOnlyIn((3, 2),\n                      self.detect(\"from array import array\\n\"\n                                  \"array().frombytes()\"))\n\n  def test_tobytes_from_array_array(self):\n    self.assertOnlyIn((3, 2),\n                      self.detect(\"from array import array\\n\"\n                                  \"array().tobytes()\"))\n\n  def test_get_source_segment_from_ast(self):\n    self.assertOnlyIn((3, 8), self.detect(\"import ast\\nast.get_source_segment()\"))\n\n  def test_is_active_from_asyncio_AbstractChildWatcher(self):\n    self.assertOnlyIn((3, 8),\n                      self.detect(\"from asyncio import AbstractChildWatcher\\n\"\n                                  \"AbstractChildWatcher().is_active()\"))\n\n  def test_get_loop_from_asyncio_Future(self):\n    self.assertOnlyIn((3, 7),\n                      self.detect(\"from asyncio import Future\\n\"\n                                  \"Future().get_loop()\"))\n\n  def test_cancelled_from_asyncio_Handle(self):\n    self.assertOnlyIn((3, 7),\n                      self.detect(\"from asyncio import Handle\\n\"\n                                  \"Handle().cancelled()\"))\n\n  def test_is_reading_from_asyncio_ReadTransport(self):\n    self.assertOnlyIn((3, 7),\n                      self.detect(\"from asyncio import ReadTransport\\n\"\n                                  \"ReadTransport().is_reading()\"))\n\n  def test_get_loop_from_asyncio_Server(self):\n    self.assertOnlyIn((3, 7),\n                      self.detect(\"from asyncio import Server\\n\"\n                                  \"Server().get_loop()\"))\n\n  def test_is_serving_from_asyncio_Server(self):\n    self.assertOnlyIn((3, 7),\n                      self.detect(\"from asyncio import Server\\n\"\n                                  \"Server().is_serving()\"))\n\n  def test_serve_forever_from_asyncio_Server(self):\n    self.assertOnlyIn((3, 7),\n                      self.detect(\"from asyncio import Server\\n\"\n                                  \"Server().serve_forever()\"))\n\n  def test_start_serving_from_asyncio_Server(self):\n    self.assertOnlyIn((3, 7),\n                      self.detect(\"from asyncio import Server\\n\"\n                                  \"Server().start_serving()\"))\n\n  def test_readuntil_from_asyncio_StreamReader(self):\n    self.assertOnlyIn((3, 5),\n                      self.detect(\"from asyncio import StreamReader\\n\"\n                                  \"StreamReader().readuntil()\"))\n\n  def test_is_closing_from_asyncio_StreamWriter(self):\n    self.assertOnlyIn((3, 7),\n                      self.detect(\"from asyncio import StreamWriter\\n\"\n                                  \"StreamWriter().is_closing()\"))\n\n  def test_wait_closed_from_asyncio_StreamWriter(self):\n    self.assertOnlyIn((3, 7),\n                      self.detect(\"from asyncio import StreamWriter\\n\"\n                                  \"StreamWriter().wait_closed()\"))\n\n  def test_get_coro_from_asyncio_Task(self):\n    self.assertOnlyIn((3, 8),\n                      self.detect(\"from asyncio import Task\\n\"\n                                  \"Task().get_coro()\"))\n\n  def test_get_name_from_asyncio_Task(self):\n    self.assertOnlyIn((3, 8),\n                      self.detect(\"from asyncio import Task\\n\"\n                                  \"Task().get_name()\"))\n\n  def test_set_name_from_asyncio_Task(self):\n    self.assertOnlyIn((3, 8),\n                      self.detect(\"from asyncio import Task\\n\"\n                                  \"Task().set_name()\"))\n\n  def test_when_from_asyncio_TimerHandle(self):\n    self.assertOnlyIn((3, 7),\n                      self.detect(\"from asyncio import TimerHandle\\n\"\n                                  \"TimerHandle().when()\"))\n\n  def test_get_write_buffer_limits_from_asyncio_WriteTransport(self):\n    self.assertOnlyIn((3, 4),\n                      self.detect(\"from asyncio import WriteTransport\\n\"\n                                  \"WriteTransport().get_write_buffer_limits()\"))\n\n  def test_get_running_loop_from_asyncio(self):\n    self.assertOnlyIn((3, 7), self.detect(\"import asyncio\\nasyncio.get_running_loop()\"))\n\n  def test_isfuture_from_asyncio(self):\n    self.assertOnlyIn((3, 5), self.detect(\"import asyncio\\nasyncio.isfuture()\"))\n\n  def test_connect_accepted_socket_from_asyncio_loop(self):\n    self.assertOnlyIn((3, 5),\n                      self.detect(\"from asyncio import loop\\n\"\n                                  \"loop().connect_accepted_socket()\"))\n\n  def test_create_future_from_asyncio_loop(self):\n    self.assertOnlyIn((3, 5),\n                      self.detect(\"from asyncio import loop\\n\"\n                                  \"loop().create_future()\"))\n\n  def test_get_exception_handler_from_asyncio_loop(self):\n    self.assertOnlyIn((3, 5),\n                      self.detect(\"from asyncio import loop\\n\"\n                                  \"loop().get_exception_handler()\"))\n\n  def test_sendfile_from_asyncio_loop(self):\n    self.assertOnlyIn((3, 7),\n                      self.detect(\"from asyncio import loop\\n\"\n                                  \"loop().sendfile()\"))\n\n  def test_shutdown_asyncgens_from_asyncio_loop(self):\n    self.assertOnlyIn((3, 6),\n                      self.detect(\"from asyncio import loop\\n\"\n                                  \"loop().shutdown_asyncgens()\"))\n\n  def test_sock_recv_into_from_asyncio_loop(self):\n    self.assertOnlyIn((3, 7),\n                      self.detect(\"from asyncio import loop\\n\"\n                                  \"loop().sock_recv_into()\"))\n\n  def test_sock_sendfile_from_asyncio_loop(self):\n    self.assertOnlyIn((3, 7),\n                      self.detect(\"from asyncio import loop\\n\"\n                                  \"loop().sock_sendfile()\"))\n\n  def test_start_tls_from_asyncio_loop(self):\n    self.assertOnlyIn((3, 7),\n                      self.detect(\"from asyncio import loop\\n\"\n                                  \"loop().start_tls()\"))\n\n  def test_shutdown_default_executor_from_asyncio_loop(self):\n    self.assertOnlyIn((3, 9),\n                      self.detect(\"from asyncio import loop\\n\"\n                                  \"loop().shutdown_default_executor()\"))\n\n  def test_to_thread_from_asyncio(self):\n    self.assertOnlyIn((3, 9), self.detect(\"from asyncio import to_thread\"))\n\n  def test_b85decode_from_base64(self):\n    self.assertOnlyIn((3, 4), self.detect(\"import base64\\nbase64.b85decode()\"))\n\n  def test_b85encode_from_base64(self):\n    self.assertOnlyIn((3, 4), self.detect(\"import base64\\nbase64.b85encode()\"))\n\n  def test_getfirst_from_cgi_FieldStorage(self):\n    self.assertOnlyIn(((2, 2), (3, 0)),\n                      self.detect(\"from cgi import FieldStorage\\n\"\n                                  \"FieldStorage().getfirst()\"))\n\n  def test_getlist_from_cgi_FieldStorage(self):\n    self.assertOnlyIn(((2, 2), (3, 0)),\n                      self.detect(\"from cgi import FieldStorage\\n\"\n                                  \"FieldStorage().getlist()\"))\n\n  def test_isinf_from_cmath(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\"import cmath\\ncmath.isinf()\"))\n\n  def test_isnan_from_cmath(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\"import cmath\\ncmath.isnan()\"))\n\n  def test_phase_from_cmath(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\"import cmath\\ncmath.phase()\"))\n\n  def test_polar_from_cmath(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\"import cmath\\ncmath.polar()\"))\n\n  def test_rect_from_cmath(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\"import cmath\\ncmath.rect()\"))\n\n  def test_decode_from_codecs(self):\n    self.assertOnlyIn(((2, 4), (3, 0)), self.detect(\"import codecs\\ncodecs.decode()\"))\n\n  def test_encode_from_codecs(self):\n    self.assertOnlyIn(((2, 4), (3, 0)), self.detect(\"import codecs\\ncodecs.encode()\"))\n\n  def test_getincrementaldecoder_from_codecs(self):\n    self.assertOnlyIn(((2, 5), (3, 0)), self.detect(\n      \"import codecs\\ncodecs.getincrementaldecoder()\"))\n\n  def test_getincrementalencoder_from_codecs(self):\n    self.assertOnlyIn(((2, 5), (3, 0)), self.detect(\n      \"import codecs\\ncodecs.getincrementalencoder()\"))\n\n  def test_iterdecode_from_codecs(self):\n    self.assertOnlyIn(((2, 5), (3, 0)), self.detect(\"import codecs\\ncodecs.iterdecode()\"))\n\n  def test_iterencode_from_codecs(self):\n    self.assertOnlyIn(((2, 5), (3, 0)), self.detect(\"import codecs\\ncodecs.iterencode()\"))\n\n  def test_namereplace_errors_from_codecs(self):\n    self.assertOnlyIn((3, 5), self.detect(\"import codecs\\ncodecs.namereplace_errors()\"))\n\n  def test___getnewargs___from_collections_UserString(self):\n    self.assertOnlyIn((3, 5),\n                      self.detect(\"from collections import UserString\\n\"\n                                  \"UserString().__getnewargs__()\"))\n\n  def test___rmod___from_collections_UserString(self):\n    self.assertOnlyIn((3, 5),\n                      self.detect(\"from collections import UserString\\n\"\n                                  \"UserString().__rmod__()\"))\n\n  def test_casefold_from_collections_UserString(self):\n    self.assertOnlyIn((3, 5),\n                      self.detect(\"from collections import UserString\\n\"\n                                  \"UserString().casefold()\"))\n\n  def test_format_map_from_collections_UserString(self):\n    self.assertOnlyIn((3, 5),\n                      self.detect(\"from collections import UserString\\n\"\n                                  \"UserString().format_map()\"))\n\n  def test_isprintable_from_collections_UserString(self):\n    self.assertOnlyIn((3, 5),\n                      self.detect(\"from collections import UserString\\n\"\n                                  \"UserString().isprintable()\"))\n\n  def test_maketrans_from_collections_UserString(self):\n    self.assertOnlyIn((3, 5),\n                      self.detect(\"from collections import UserString\\n\"\n                                  \"UserString().maketrans()\"))\n\n  def test_clear_from_collections_abc_MutableSequence(self):\n    self.assertOnlyIn((3, 3),\n                      self.detect(\"from collections.abc import MutableSequence\\n\"\n                                  \"MutableSequence().clear()\"))\n\n  def test_copy_from_collections_abc_MutableSequence(self):\n    self.assertOnlyIn((3, 3),\n                      self.detect(\"from collections.abc import MutableSequence\\n\"\n                                  \"MutableSequence().copy()\"))\n\n  def test_read_dict_from_configparser_ConfigParser(self):\n    self.assertOnlyIn((3, 2),\n                      self.detect(\"from configparser import ConfigParser\\n\"\n                                  \"ConfigParser().read_dict()\"))\n\n  def test_read_file_from_configparser_ConfigParser(self):\n    self.assertOnlyIn((3, 2),\n                      self.detect(\"from configparser import ConfigParser\\n\"\n                                  \"ConfigParser().read_file()\"))\n\n  def test_read_string_from_configparser_ConfigParser(self):\n    self.assertOnlyIn((3, 2),\n                      self.detect(\"from configparser import ConfigParser\\n\"\n                                  \"ConfigParser().read_string()\"))\n\n  def test_get_wch_from_curses_window(self):\n    self.assertOnlyIn((3, 3),\n                      self.detect(\"from curses import window\\n\"\n                                  \"window().get_wch()\"))\n\n  def test_strptime_from_datetime_datetime(self):\n    self.assertOnlyIn(((2, 5), (3, 0)),\n                      self.detect(\"from datetime import datetime\\n\"\n                                  \"datetime().strptime()\"))\n\n  def test_DocFileSuite_from_doctest(self):\n    self.assertOnlyIn(((2, 4), (3, 0)), self.detect(\"import doctest\\ndoctest.DocFileSuite()\"))\n\n  def test_DocTestSuite_from_doctest(self):\n    self.assertOnlyIn(((2, 3), (3, 0)), self.detect(\"import doctest\\ndoctest.DocTestSuite()\"))\n\n  def test_debug_from_doctest(self):\n    self.assertOnlyIn(((2, 3), (3, 0)), self.detect(\"import doctest\\ndoctest.debug()\"))\n\n  def test_debug_src_from_doctest(self):\n    self.assertOnlyIn(((2, 4), (3, 0)), self.detect(\"import doctest\\ndoctest.debug_src()\"))\n\n  def test_register_optionflag_from_doctest(self):\n    self.assertOnlyIn(((2, 4), (3, 0)), self.detect(\n      \"import doctest\\ndoctest.register_optionflag()\"))\n\n  def test_script_from_examples_from_doctest(self):\n    self.assertOnlyIn(((2, 4), (3, 0)), self.detect(\n        \"import doctest\\ndoctest.script_from_examples()\"))\n\n  def test_set_unittest_reportflags_from_doctest(self):\n    self.assertOnlyIn(((2, 4), (3, 0)), self.detect(\n        \"import doctest\\ndoctest.set_unittest_reportflags()\"))\n\n  def test_testfile_from_doctest(self):\n    self.assertOnlyIn(((2, 4), (3, 0)), self.detect(\"import doctest\\ndoctest.testfile()\"))\n\n  def test_testsource_from_doctest(self):\n    self.assertOnlyIn(((2, 3), (3, 0)), self.detect(\"import doctest\\ndoctest.testsource()\"))\n\n  def test_clone_from_email_generator_Generator(self):\n    self.assertOnlyIn(((2, 2), (3, 0)),\n                      self.detect(\"from email.generator import Generator\\n\"\n                                  \"Generator().clone()\"))\n\n  def test_flatten_from_email_generator_Generator(self):\n    self.assertOnlyIn(((2, 2), (3, 0)),\n                      self.detect(\"from email.generator import Generator\\n\"\n                                  \"Generator().flatten()\"))\n\n  def test_get_content_disposition_from_email_message_EmailMessage(self):\n    self.assertOnlyIn((3, 5),\n                      self.detect(\"from email.message import EmailMessage\\n\"\n                                  \"EmailMessage().get_content_disposition()\"))\n\n  def test___bytes___from_email_message_Message(self):\n    self.assertOnlyIn((3, 4),\n                      self.detect(\"from email.message import Message\\n\"\n                                  \"Message().__bytes__()\"))\n\n  def test_as_bytes_from_email_message_Message(self):\n    self.assertOnlyIn((3, 4),\n                      self.detect(\"from email.message import Message\\n\"\n                                  \"Message().as_bytes()\"))\n\n  def test_del_param_from_email_message_Message(self):\n    self.assertOnlyIn(((2, 2), (3, 0)),\n                      self.detect(\"from email.message import Message\\n\"\n                                  \"Message().del_param()\"))\n\n  def test_get_charset_from_email_message_Message(self):\n    self.assertOnlyIn(((2, 2), (3, 0)),\n                      self.detect(\"from email.message import Message\\n\"\n                                  \"Message().get_charset()\"))\n\n  def test_get_content_charset_from_email_message_Message(self):\n    self.assertOnlyIn(((2, 2), (3, 0)),\n                      self.detect(\"from email.message import Message\\n\"\n                                  \"Message().get_content_charset()\"))\n\n  def test_get_content_disposition_from_email_message_Message(self):\n    self.assertOnlyIn((3, 5),\n                      self.detect(\"from email.message import Message\\n\"\n                                  \"Message().get_content_disposition()\"))\n\n  def test_get_content_maintype_from_email_message_Message(self):\n    self.assertOnlyIn(((2, 2), (3, 0)),\n                      self.detect(\"from email.message import Message\\n\"\n                                  \"Message().get_content_maintype()\"))\n\n  def test_get_content_subtype_from_email_message_Message(self):\n    self.assertOnlyIn(((2, 2), (3, 0)),\n                      self.detect(\"from email.message import Message\\n\"\n                                  \"Message().get_content_subtype()\"))\n\n  def test_get_content_type_from_email_message_Message(self):\n    self.assertOnlyIn(((2, 2), (3, 0)),\n                      self.detect(\"from email.message import Message\\n\"\n                                  \"Message().get_content_type()\"))\n\n  def test_get_default_type_from_email_message_Message(self):\n    self.assertOnlyIn(((2, 2), (3, 0)),\n                      self.detect(\"from email.message import Message\\n\"\n                                  \"Message().get_default_type()\"))\n\n  def test_replace_header_from_email_message_Message(self):\n    self.assertOnlyIn(((2, 2), (3, 0)),\n                      self.detect(\"from email.message import Message\\n\"\n                                  \"Message().replace_header()\"))\n\n  def test_set_charset_from_email_message_Message(self):\n    self.assertOnlyIn(((2, 2), (3, 0)),\n                      self.detect(\"from email.message import Message\\n\"\n                                  \"Message().set_charset()\"))\n\n  def test_set_default_type_from_email_message_Message(self):\n    self.assertOnlyIn(((2, 2), (3, 0)),\n                      self.detect(\"from email.message import Message\\n\"\n                                  \"Message().set_default_type()\"))\n\n  def test_set_param_from_email_message_Message(self):\n    self.assertOnlyIn(((2, 2), (3, 0)),\n                      self.detect(\"from email.message import Message\\n\"\n                                  \"Message().set_param()\"))\n\n  def test_set_type_from_email_message_Message(self):\n    self.assertOnlyIn(((2, 2), (3, 0)),\n                      self.detect(\"from email.message import Message\\n\"\n                                  \"Message().set_type()\"))\n\n  def test_message_from_binary_file_from_email(self):\n    self.assertOnlyIn((3, 2), self.detect(\"import email\\nemail.message_from_binary_file()\"))\n\n  def test_message_from_bytes_from_email(self):\n    self.assertOnlyIn((3, 2), self.detect(\"import email\\nemail.message_from_bytes()\"))\n\n  def test_clear_cache_from_filecmp(self):\n    self.assertOnlyIn((3, 4), self.detect(\"import filecmp\\nfilecmp.clear_cache()\"))\n\n  def test_fileno_from_fileinput(self):\n    self.assertOnlyIn(((2, 5), (3, 0)), self.detect(\"import fileinput\\nfileinput.fileno()\"))\n\n  def test_hook_compressed_from_fileinput(self):\n    self.assertOnlyIn(((2, 5), (3, 0)), self.detect(\n      \"import fileinput\\nfileinput.hook_compressed()\"))\n\n  def test_hook_encoded_from_fileinput(self):\n    self.assertOnlyIn(((2, 5), (3, 0)), self.detect(\"import fileinput\\nfileinput.hook_encoded()\"))\n\n  def test_filter_from_fnmatch(self):\n    self.assertOnlyIn(((2, 2), (3, 0)), self.detect(\"import fnmatch\\nfnmatch.filter()\"))\n\n  def test_mlsd_from_ftplib_FTP(self):\n    self.assertOnlyIn((3, 3),\n                      self.detect(\"from ftplib import FTP\\n\"\n                                  \"FTP().mlsd()\"))\n\n  def test_ccc_from_ftplib_FTP_TLS(self):\n    self.assertOnlyIn((3, 3),\n                      self.detect(\"from ftplib import FTP_TLS\\n\"\n                                  \"FTP_TLS().ccc()\"))\n\n  def test_freeze_from_gc(self):\n    self.assertOnlyIn((3, 7), self.detect(\"import gc\\ngc.freeze()\"))\n\n  def test_get_count_from_gc(self):\n    self.assertOnlyIn(((2, 5), (3, 0)), self.detect(\"import gc\\ngc.get_count()\"))\n\n  def test_get_freeze_count_from_gc(self):\n    self.assertOnlyIn((3, 7), self.detect(\"import gc\\ngc.get_freeze_count()\"))\n\n  def test_get_objects_from_gc(self):\n    self.assertOnlyIn(((2, 2), (3, 0)), self.detect(\"import gc\\ngc.get_objects()\"))\n\n  def test_get_referents_from_gc(self):\n    self.assertOnlyIn(((2, 3), (3, 0)), self.detect(\"import gc\\ngc.get_referents()\"))\n\n  def test_get_referrers_from_gc(self):\n    self.assertOnlyIn(((2, 2), (3, 0)), self.detect(\"import gc\\ngc.get_referrers()\"))\n\n  def test_get_stats_from_gc(self):\n    self.assertOnlyIn((3, 4), self.detect(\"import gc\\ngc.get_stats()\"))\n\n  def test_is_tracked_from_gc(self):\n    self.assertOnlyIn(((2, 7), (3, 1)), self.detect(\"import gc\\ngc.is_tracked()\"))\n\n  def test_is_finalized_from_gc(self):\n    self.assertOnlyIn((3, 9), self.detect(\"import gc\\ngc.is_finalized()\"))\n\n  def test_unfreeze_from_gc(self):\n    self.assertOnlyIn((3, 7), self.detect(\"import gc\\ngc.unfreeze()\"))\n\n  def test_gnu_getopt_from_getopt(self):\n    self.assertOnlyIn(((2, 3), (3, 0)), self.detect(\"import getopt\\ngetopt.gnu_getopt()\"))\n\n  def test_lgettext_from_gettext_GNUTranslations(self):\n    self.assertOnlyIn(((2, 4), (3, 0)),\n                      self.detect(\"from gettext import GNUTranslations\\n\"\n                                  \"GNUTranslations().lgettext()\"))\n\n  def test_lngettext_from_gettext_GNUTranslations(self):\n    self.assertOnlyIn(((2, 4), (3, 0)),\n                      self.detect(\"from gettext import GNUTranslations\\n\"\n                                  \"GNUTranslations().lngettext()\"))\n\n  def test_ngettext_from_gettext_GNUTranslations(self):\n    self.assertOnlyIn(((2, 3), (3, 0)),\n                      self.detect(\"from gettext import GNUTranslations\\n\"\n                                  \"GNUTranslations().ngettext()\"))\n\n  def test_npgettext_from_gettext_GNUTranslations(self):\n    self.assertOnlyIn((3, 8),\n                      self.detect(\"from gettext import GNUTranslations\\n\"\n                                  \"GNUTranslations().npgettext()\"))\n\n  def test_pgettext_from_gettext_GNUTranslations(self):\n    self.assertOnlyIn((3, 8),\n                      self.detect(\"from gettext import GNUTranslations\\n\"\n                                  \"GNUTranslations().pgettext()\"))\n\n  def test_ungettext_from_gettext_GNUTranslations(self):\n    self.assertOnlyIn((2, 3),\n                      self.detect(\"from gettext import GNUTranslations\\n\"\n                                  \"GNUTranslations().ungettext()\"))\n\n  def test_lgettext_from_gettext_NullTranslations(self):\n    self.assertOnlyIn(((2, 4), (3, 0)),\n                      self.detect(\"from gettext import NullTranslations\\n\"\n                                  \"NullTranslations().lgettext()\"))\n\n  def test_lngettext_from_gettext_NullTranslations(self):\n    self.assertOnlyIn(((2, 4), (3, 0)),\n                      self.detect(\"from gettext import NullTranslations\\n\"\n                                  \"NullTranslations().lngettext()\"))\n\n  def test_ngettext_from_gettext_NullTranslations(self):\n    self.assertOnlyIn(((2, 3), (3, 0)),\n                      self.detect(\"from gettext import NullTranslations\\n\"\n                                  \"NullTranslations().ngettext()\"))\n\n  def test_npgettext_from_gettext_NullTranslations(self):\n    self.assertOnlyIn((3, 8),\n                      self.detect(\"from gettext import NullTranslations\\n\"\n                                  \"NullTranslations().npgettext()\"))\n\n  def test_output_charset_from_gettext_NullTranslations(self):\n    self.assertOnlyIn(((2, 4), (3, 0)),\n                      self.detect(\"from gettext import NullTranslations\\n\"\n                                  \"NullTranslations().output_charset()\"))\n\n  def test_pgettext_from_gettext_NullTranslations(self):\n    self.assertOnlyIn((3, 8),\n                      self.detect(\"from gettext import NullTranslations\\n\"\n                                  \"NullTranslations().pgettext()\"))\n\n  def test_set_output_charset_from_gettext_NullTranslations(self):\n    self.assertOnlyIn(((2, 4), (3, 0)),\n                      self.detect(\"from gettext import NullTranslations\\n\"\n                                  \"NullTranslations().set_output_charset()\"))\n\n  def test_ungettext_from_gettext_NullTranslations(self):\n    self.assertOnlyIn((2, 3),\n                      self.detect(\"from gettext import NullTranslations\\n\"\n                                  \"NullTranslations().ungettext()\"))\n\n  def test_bind_textdomain_codeset_from_gettext(self):\n    self.assertOnlyIn(((2, 4), (3, 0)), self.detect(\n        \"import gettext\\ngettext.bind_textdomain_codeset()\"))\n\n  def test_dngettext_from_gettext(self):\n    self.assertOnlyIn(((2, 3), (3, 0)), self.detect(\"import gettext\\ngettext.dngettext()\"))\n\n  def test_ldgettext_from_gettext(self):\n    self.assertOnlyIn(((2, 4), (3, 0)), self.detect(\"import gettext\\ngettext.ldgettext()\"))\n\n  def test_ldngettext_from_gettext(self):\n    self.assertOnlyIn(((2, 4), (3, 0)), self.detect(\"import gettext\\ngettext.ldngettext()\"))\n\n  def test_lgettext_from_gettext(self):\n    self.assertOnlyIn(((2, 4), (3, 0)), self.detect(\"import gettext\\ngettext.lgettext()\"))\n\n  def test_lngettext_from_gettext(self):\n    self.assertOnlyIn(((2, 4), (3, 0)), self.detect(\"import gettext\\ngettext.lngettext()\"))\n\n  def test_ngettext_from_gettext(self):\n    self.assertOnlyIn(((2, 3), (3, 0)), self.detect(\"import gettext\\ngettext.ngettext()\"))\n\n  def test_escape_from_glob(self):\n    self.assertOnlyIn((3, 4), self.detect(\"import glob\\nglob.escape()\"))\n\n  def test_iglob_from_glob(self):\n    self.assertOnlyIn(((2, 5), (3, 0)), self.detect(\"import glob\\nglob.iglob()\"))\n\n  def test_blake2b_from_hashlib(self):\n    self.assertOnlyIn((3, 6), self.detect(\"import hashlib\\nhashlib.blake2b()\"))\n\n  def test_blake2s_from_hashlib(self):\n    self.assertOnlyIn((3, 6), self.detect(\"import hashlib\\nhashlib.blake2s()\"))\n\n  def test_sha3_224_from_hashlib(self):\n    self.assertOnlyIn((3, 6), self.detect(\"import hashlib\\nhashlib.sha3_224()\"))\n\n  def test_sha3_256_from_hashlib(self):\n    self.assertOnlyIn((3, 6), self.detect(\"import hashlib\\nhashlib.sha3_256()\"))\n\n  def test_sha3_384_from_hashlib(self):\n    self.assertOnlyIn((3, 6), self.detect(\"import hashlib\\nhashlib.sha3_384()\"))\n\n  def test_sha3_512_from_hashlib(self):\n    self.assertOnlyIn((3, 6), self.detect(\"import hashlib\\nhashlib.sha3_512()\"))\n\n  def test_shake_128_from_hashlib(self):\n    self.assertOnlyIn((3, 6), self.detect(\"import hashlib\\nhashlib.shake_128()\"))\n\n  def test_shake_256_from_hashlib(self):\n    self.assertOnlyIn((3, 6), self.detect(\"import hashlib\\nhashlib.shake_256()\"))\n\n  def test_escape_from_html(self):\n    self.assertOnlyIn((3, 2), self.detect(\"import html\\nhtml.escape()\"))\n\n  def test_unescape_from_html(self):\n    self.assertOnlyIn((3, 4), self.detect(\"import html\\nhtml.unescape()\"))\n\n  def test_set_debuglevel_from_http_client_HTTPConnection(self):\n    self.assertOnlyIn((3, 1),\n                      self.detect(\"from http.client import HTTPConnection\\n\"\n                                  \"HTTPConnection().set_debuglevel()\"))\n\n  def test_set_tunnel_from_http_client_HTTPConnection(self):\n    self.assertOnlyIn((3, 2),\n                      self.detect(\"from http.client import HTTPConnection\\n\"\n                                  \"HTTPConnection().set_tunnel()\"))\n\n  def test_readinto_from_http_client_HTTPResponse(self):\n    self.assertOnlyIn((3, 3),\n                      self.detect(\"from http.client import HTTPResponse\\n\"\n                                  \"HTTPResponse().readinto()\"))\n\n  def test_flush_headers_from_http_server_BaseHTTPRequestHandler(self):\n    self.assertOnlyIn((3, 3),\n                      self.detect(\"from http.server import BaseHTTPRequestHandler\\n\"\n                                  \"BaseHTTPRequestHandler().flush_headers()\"))\n\n  def test_handle_expect_100_from_http_server_BaseHTTPRequestHandler(self):\n    self.assertOnlyIn((3, 2),\n                      self.detect(\"from http.server import BaseHTTPRequestHandler\\n\"\n                                  \"BaseHTTPRequestHandler().handle_expect_100()\"))\n\n  def test_send_response_only_from_http_server_BaseHTTPRequestHandler(self):\n    self.assertOnlyIn((3, 2),\n                      self.detect(\"from http.server import BaseHTTPRequestHandler\\n\"\n                                  \"BaseHTTPRequestHandler().send_response_only()\"))\n\n  def test_set_tunnel_from_httplib_HTTPConnection(self):\n    self.assertOnlyIn((2, 7),\n                      self.detect(\"from httplib import HTTPConnection\\n\"\n                                  \"HTTPConnection().set_tunnel()\"))\n\n  def test_getheaders_from_httplib_HTTPResponse(self):\n    self.assertOnlyIn((2, 4),\n                      self.detect(\"from httplib import HTTPResponse\\n\"\n                                  \"HTTPResponse().getheaders()\"))\n\n  def test_deleteacl_from_imaplib_IMAP4(self):\n    self.assertOnlyIn(((2, 4), (3, 0)),\n                      self.detect(\"from imaplib import IMAP4\\n\"\n                                  \"IMAP4().deleteacl()\"))\n\n  def test_enable_from_imaplib_IMAP4(self):\n    self.assertOnlyIn((3, 5),\n                      self.detect(\"from imaplib import IMAP4\\n\"\n                                  \"IMAP4().enable()\"))\n\n  def test_getannotation_from_imaplib_IMAP4(self):\n    self.assertOnlyIn(((2, 5), (3, 0)),\n                      self.detect(\"from imaplib import IMAP4\\n\"\n                                  \"IMAP4().getannotation()\"))\n\n  def test_getquota_from_imaplib_IMAP4(self):\n    self.assertOnlyIn(((2, 3), (3, 0)),\n                      self.detect(\"from imaplib import IMAP4\\n\"\n                                  \"IMAP4().getquota()\"))\n\n  def test_getquotaroot_from_imaplib_IMAP4(self):\n    self.assertOnlyIn(((2, 3), (3, 0)),\n                      self.detect(\"from imaplib import IMAP4\\n\"\n                                  \"IMAP4().getquotaroot()\"))\n\n  def test_login_cram_md5_from_imaplib_IMAP4(self):\n    self.assertOnlyIn(((2, 3), (3, 0)),\n                      self.detect(\"from imaplib import IMAP4\\n\"\n                                  \"IMAP4().login_cram_md5()\"))\n\n  def test_myrights_from_imaplib_IMAP4(self):\n    self.assertOnlyIn(((2, 4), (3, 0)),\n                      self.detect(\"from imaplib import IMAP4\\n\"\n                                  \"IMAP4().myrights()\"))\n\n  def test_namespace_from_imaplib_IMAP4(self):\n    self.assertOnlyIn(((2, 3), (3, 0)),\n                      self.detect(\"from imaplib import IMAP4\\n\"\n                                  \"IMAP4().namespace()\"))\n\n  def test_proxyauth_from_imaplib_IMAP4(self):\n    self.assertOnlyIn(((2, 3), (3, 0)),\n                      self.detect(\"from imaplib import IMAP4\\n\"\n                                  \"IMAP4().proxyauth()\"))\n\n  def test_setannotation_from_imaplib_IMAP4(self):\n    self.assertOnlyIn(((2, 5), (3, 0)),\n                      self.detect(\"from imaplib import IMAP4\\n\"\n                                  \"IMAP4().setannotation()\"))\n\n  def test_setquota_from_imaplib_IMAP4(self):\n    self.assertOnlyIn(((2, 3), (3, 0)),\n                      self.detect(\"from imaplib import IMAP4\\n\"\n                                  \"IMAP4().setquota()\"))\n\n  def test_starttls_from_imaplib_IMAP4(self):\n    self.assertOnlyIn((3, 2),\n                      self.detect(\"from imaplib import IMAP4\\n\"\n                                  \"IMAP4().starttls()\"))\n\n  def test_thread_from_imaplib_IMAP4(self):\n    self.assertOnlyIn(((2, 4), (3, 0)),\n                      self.detect(\"from imaplib import IMAP4\\n\"\n                                  \"IMAP4().thread()\"))\n\n  def test_unselect_from_imaplib_IMAP4(self):\n    self.assertOnlyIn((3, 9),\n                      self.detect(\"from imaplib import IMAP4\\n\"\n                                  \"IMAP4().unselect()\"))\n\n  def test_acquire_lock_from_imp(self):\n    self.assertOnlyIn(((2, 3), (3, 0)), self.detect(\"import imp\\nimp.acquire_lock()\"))\n\n  def test_cache_from_source_from_imp(self):\n    self.assertOnlyIn((3, 2), self.detect(\"import imp\\nimp.cache_from_source()\"))\n\n  def test_get_tag_from_imp(self):\n    self.assertOnlyIn((3, 2), self.detect(\"import imp\\nimp.get_tag()\"))\n\n  def test_release_lock_from_imp(self):\n    self.assertOnlyIn(((2, 3), (3, 0)), self.detect(\"import imp\\nimp.release_lock()\"))\n\n  def test_source_from_cache_from_imp(self):\n    self.assertOnlyIn((3, 2), self.detect(\"import imp\\nimp.source_from_cache()\"))\n\n  def test_exec_module_from_importlib_abc_InspectLoader(self):\n    self.assertOnlyIn((3, 4),\n                      self.detect(\"from importlib.abc import InspectLoader\\n\"\n                                  \"InspectLoader().exec_module()\"))\n\n  def test_source_to_code_from_importlib_abc_InspectLoader(self):\n    self.assertOnlyIn((3, 4),\n                      self.detect(\"from importlib.abc import InspectLoader\\n\"\n                                  \"InspectLoader().source_to_code()\"))\n\n  def test_create_module_from_importlib_abc_Loader(self):\n    self.assertOnlyIn((3, 4),\n                      self.detect(\"from importlib.abc import Loader\\n\"\n                                  \"Loader().create_module()\"))\n\n  def test_exec_module_from_importlib_abc_Loader(self):\n    self.assertOnlyIn((3, 4),\n                      self.detect(\"from importlib.abc import Loader\\n\"\n                                  \"Loader().exec_module()\"))\n\n  def test_module_repr_from_importlib_abc_Loader(self):\n    self.assertOnlyIn((3, 3),\n                      self.detect(\"from importlib.abc import Loader\\n\"\n                                  \"Loader().module_repr()\"))\n\n  def test_find_spec_from_importlib_abc_MetaPathFinder(self):\n    self.assertOnlyIn((3, 4),\n                      self.detect(\"from importlib.abc import MetaPathFinder\\n\"\n                                  \"MetaPathFinder().find_spec()\"))\n\n  def test_find_spec_from_importlib_abc_PathEntryFinder(self):\n    self.assertOnlyIn((3, 4),\n                      self.detect(\"from importlib.abc import PathEntryFinder\\n\"\n                                  \"PathEntryFinder().find_spec()\"))\n\n  def test_exec_module_from_importlib_abc_SourceLoader(self):\n    self.assertOnlyIn((3, 4),\n                      self.detect(\"from importlib.abc import SourceLoader\\n\"\n                                  \"SourceLoader().exec_module()\"))\n\n  def test_path_stats_from_importlib_abc_SourceLoader(self):\n    self.assertOnlyIn((3, 3),\n                      self.detect(\"from importlib.abc import SourceLoader\\n\"\n                                  \"SourceLoader().path_stats()\"))\n\n  def test_find_loader_from_importlib(self):\n    self.assertOnlyIn((3, 3), self.detect(\"import importlib\\nimportlib.find_loader()\"))\n\n  def test_invalidate_caches_from_importlib(self):\n    self.assertOnlyIn((3, 3), self.detect(\"import importlib\\nimportlib.invalidate_caches()\"))\n\n  def test_create_module_from_importlib_machinery_BuiltinImporter(self):\n    self.assertOnlyIn((3, 5),\n                      self.detect(\"from importlib.machinery import BuiltinImporter\\n\"\n                                  \"BuiltinImporter().create_module()\"))\n\n  def test_exec_module_from_importlib_machinery_BuiltinImporter(self):\n    self.assertOnlyIn((3, 5),\n                      self.detect(\"from importlib.machinery import BuiltinImporter\\n\"\n                                  \"BuiltinImporter().exec_module()\"))\n\n  def test_reload_from_importlib(self):\n    self.assertOnlyIn((3, 4), self.detect(\"import importlib\\nimportlib.reload()\"))\n\n  def test_files_from_importlib_resources(self):\n    self.assertOnlyIn((3, 9), self.detect(\n      \"import importlib.resources\\nimportlib.resources.files()\"))\n\n  def test_from_callable_from_inspect_Signature(self):\n    self.assertOnlyIn((3, 5),\n                      self.detect(\"from inspect import Signature\\n\"\n                                  \"Signature().from_callable()\"))\n\n  def test_reconfigure_from_io_TextIOWrapper(self):\n    self.assertOnlyIn((3, 7),\n                      self.detect(\"from io import TextIOWrapper\\n\"\n                                  \"TextIOWrapper().reconfigure()\"))\n\n  def test_open_code_from_io(self):\n    self.assertOnlyIn((3, 8), self.detect(\"import io\\nio.open_code()\"))\n\n  def test_subnet_of_from_ipaddress_IPv4Network(self):\n    self.assertOnlyIn((3, 7),\n                      self.detect(\"from ipaddress import IPv4Network\\n\"\n                                  \"IPv4Network().subnet_of()\"))\n\n  def test_supernet_of_from_ipaddress_IPv4Network(self):\n    self.assertOnlyIn((3, 7),\n                      self.detect(\"from ipaddress import IPv4Network\\n\"\n                                  \"IPv4Network().supernet_of()\"))\n\n  def test_lazycache_from_linecache(self):\n    self.assertOnlyIn((3, 5), self.detect(\"import linecache\\nlinecache.lazycache()\"))\n\n  def test_currency_from_locale(self):\n    self.assertOnlyIn(((2, 5), (3, 0)), self.detect(\"import locale\\nlocale.currency()\"))\n\n  def test_delocalize_from_locale(self):\n    self.assertOnlyIn((3, 5), self.detect(\"import locale\\nlocale.delocalize()\"))\n\n  def test_format_string_from_locale(self):\n    self.assertOnlyIn(((2, 5), (3, 0)), self.detect(\"import locale\\nlocale.format_string()\"))\n\n  def test_getpreferredencoding_from_locale(self):\n    self.assertOnlyIn(((2, 3), (3, 0)), self.detect(\"import locale\\nlocale.getpreferredencoding()\"))\n\n  def test_getEffectiveLevel_from_logging_LoggerAdapter(self):\n    self.assertOnlyIn((3, 2),\n                      self.detect(\"from logging import LoggerAdapter\\n\"\n                                  \"LoggerAdapter().getEffectiveLevel()\"))\n\n  def test_hasHandlers_from_logging_LoggerAdapter(self):\n    self.assertOnlyIn((3, 2),\n                      self.detect(\"from logging import LoggerAdapter\\n\"\n                                  \"LoggerAdapter().hasHandlers()\"))\n\n  def test_isEnabledFor_from_logging_LoggerAdapter(self):\n    self.assertOnlyIn(((2, 7), (3, 2)),\n                      self.detect(\"from logging import LoggerAdapter\\n\"\n                                  \"LoggerAdapter().isEnabledFor()\"))\n\n  def test_setLevel_from_logging_LoggerAdapter(self):\n    self.assertOnlyIn((3, 2),\n                      self.detect(\"from logging import LoggerAdapter\\n\"\n                                  \"LoggerAdapter().setLevel()\"))\n\n  def test_setStream_from_logging_StreamHandler(self):\n    self.assertOnlyIn((3, 7),\n                      self.detect(\"from logging import StreamHandler\\n\"\n                                  \"StreamHandler().setStream()\"))\n\n  def test_rotate_from_logging_handlers_BaseRotatingHandler(self):\n    self.assertOnlyIn((3, 3),\n                      self.detect(\"from logging.handlers import BaseRotatingHandler\\n\"\n                                  \"BaseRotatingHandler().rotate()\"))\n\n  def test_rotation_filename_from_logging_handlers_BaseRotatingHandler(self):\n    self.assertOnlyIn((3, 3),\n                      self.detect(\"from logging.handlers import BaseRotatingHandler\\n\"\n                                  \"BaseRotatingHandler().rotation_filename()\"))\n\n  def test_enqueue_sentinel_from_logging_handlers_QueueListener(self):\n    self.assertOnlyIn((3, 3),\n                      self.detect(\"from logging.handlers import QueueListener\\n\"\n                                  \"QueueListener().enqueue_sentinel()\"))\n\n  def test_reopenIfNeeded_from_logging_handlers_WatchedFileHandler(self):\n    self.assertOnlyIn((3, 6),\n                      self.detect(\"from logging.handlers import WatchedFileHandler\\n\"\n                                  \"WatchedFileHandler().reopenIfNeeded()\"))\n\n  def test_get_bytes_from_mailbox_Mailbox(self):\n    self.assertOnlyIn((3, 2),\n                      self.detect(\"from mailbox import Mailbox\\n\"\n                                  \"Mailbox().get_bytes()\"))\n\n  def test_factorial_from_math(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\"import math\\nmath.factorial()\"))\n\n  def test_lcm_from_math(self):\n    self.assertOnlyIn((3, 9), self.detect(\"import math\\nmath.lcm()\"))\n\n  def test_nextafter_from_math(self):\n    self.assertOnlyIn((3, 9), self.detect(\"import math\\nmath.nextafter()\"))\n\n  def test_ulp_from_math(self):\n    self.assertOnlyIn((3, 9), self.detect(\"import math\\nmath.ulp()\"))\n\n  def test_read_windows_registry_from_mimetypes_MimeTypes(self):\n    self.assertOnlyIn(((2, 7), (3, 2)),\n                      self.detect(\"from mimetypes import MimeTypes\\n\"\n                                  \"MimeTypes().read_windows_registry()\"))\n\n  def test_Close_from_msilib_Database(self):\n    self.assertOnlyIn((3, 7),\n                      self.detect(\"from msilib import Database\\n\"\n                                  \"Database().Close()\"))\n\n  def test_getwch_from_msvcrt(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\"import msvcrt\\nmsvcrt.getwch()\"))\n\n  def test_getwche_from_msvcrt(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\"import msvcrt\\nmsvcrt.getwche()\"))\n\n  def test_putwch_from_msvcrt(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\"import msvcrt\\nmsvcrt.putwch()\"))\n\n  def test_ungetwch_from_msvcrt(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\"import msvcrt\\nmsvcrt.ungetwch()\"))\n\n  def test_wait_for_from_multiprocessing_Condition(self):\n    self.assertOnlyIn((3, 3),\n                      self.detect(\"from multiprocessing import Condition\\n\"\n                                  \"Condition().wait_for()\"))\n\n  def test_close_from_multiprocessing_Process(self):\n    self.assertOnlyIn((3, 7),\n                      self.detect(\"from multiprocessing import Process\\n\"\n                                  \"Process().close()\"))\n\n  def test_kill_from_multiprocessing_Process(self):\n    self.assertOnlyIn((3, 7),\n                      self.detect(\"from multiprocessing import Process\\n\"\n                                  \"Process().kill()\"))\n\n  def test_Barrier_from_multiprocessing_managers_SyncManager(self):\n    self.assertOnlyIn((3, 3),\n                      self.detect(\"from multiprocessing.managers import SyncManager\\n\"\n                                  \"SyncManager().Barrier()\"))\n\n  def test_wait_for_from_multiprocessing_managers_SyncManager_Condition(self):\n    self.assertOnlyIn((3, 3),\n                      self.detect(\"from multiprocessing.managers.SyncManager import Condition\\n\"\n                                  \"Condition().wait_for()\"))\n\n  def test_parent_process_from_multiprocessing(self):\n    self.assertOnlyIn((3, 8), self.detect(\n        \"import multiprocessing\\nmultiprocessing.parent_process()\"))\n\n  def test_close_from_multiprocessing_SimpleQueue(self):\n    self.assertOnlyIn((3, 9), self.detect(\n      \"from multiprocessing import SimpleQueue\\n\"\n      \"multiprocessing.SimpleQueue().close()\"))\n\n  def test_get_default_domain_from_nis(self):\n    self.assertOnlyIn(((2, 5), (3, 0)), self.detect(\"import nis\\nnis.get_default_domain()\"))\n\n  def test_description_from_nntplib_NNTP(self):\n    self.assertOnlyIn(((2, 4), (3, 0)),\n                      self.detect(\"from nntplib import NNTP\\n\"\n                                  \"NNTP().description()\"))\n\n  def test_descriptions_from_nntplib_NNTP(self):\n    self.assertOnlyIn(((2, 4), (3, 0)),\n                      self.detect(\"from nntplib import NNTP\\n\"\n                                  \"NNTP().descriptions()\"))\n\n  def test_getcapabilities_from_nntplib_NNTP(self):\n    self.assertOnlyIn((3, 2),\n                      self.detect(\"from nntplib import NNTP\\n\"\n                                  \"NNTP().getcapabilities()\"))\n\n  def test_login_from_nntplib_NNTP(self):\n    self.assertOnlyIn((3, 2),\n                      self.detect(\"from nntplib import NNTP\\n\"\n                                  \"NNTP().login()\"))\n\n  def test_over_from_nntplib_NNTP(self):\n    self.assertOnlyIn((3, 2),\n                      self.detect(\"from nntplib import NNTP\\n\"\n                                  \"NNTP().over()\"))\n\n  def test_starttls_from_nntplib_NNTP(self):\n    self.assertOnlyIn((3, 2),\n                      self.detect(\"from nntplib import NNTP\\n\"\n                                  \"NNTP().starttls()\"))\n\n  def test___eq___from_operator(self):\n    self.assertOnlyIn(((2, 2), (3, 0)), self.detect(\"import operator\\noperator.__eq__()\"))\n\n  def test___floordiv___from_operator(self):\n    self.assertOnlyIn(((2, 2), (3, 0)), self.detect(\"import operator\\noperator.__floordiv__()\"))\n\n  def test___ge___from_operator(self):\n    self.assertOnlyIn(((2, 2), (3, 0)), self.detect(\"import operator\\noperator.__ge__()\"))\n\n  def test___gt___from_operator(self):\n    self.assertOnlyIn(((2, 2), (3, 0)), self.detect(\"import operator\\noperator.__gt__()\"))\n\n  def test___iadd___from_operator(self):\n    self.assertOnlyIn(((2, 5), (3, 0)), self.detect(\"import operator\\noperator.__iadd__()\"))\n\n  def test___iand___from_operator(self):\n    self.assertOnlyIn(((2, 5), (3, 0)), self.detect(\"import operator\\noperator.__iand__()\"))\n\n  def test___iconcat___from_operator(self):\n    self.assertOnlyIn(((2, 5), (3, 0)), self.detect(\"import operator\\noperator.__iconcat__()\"))\n\n  def test___idiv___from_operator(self):\n    self.assertOnlyIn((2, 5), self.detect(\"import operator\\noperator.__idiv__()\"))\n\n  def test___ifloordiv___from_operator(self):\n    self.assertOnlyIn(((2, 5), (3, 0)), self.detect(\"import operator\\noperator.__ifloordiv__()\"))\n\n  def test___ilshift___from_operator(self):\n    self.assertOnlyIn(((2, 5), (3, 0)), self.detect(\"import operator\\noperator.__ilshift__()\"))\n\n  def test___imatmul___from_operator(self):\n    self.assertOnlyIn((3, 5), self.detect(\"import operator\\noperator.__imatmul__()\"))\n\n  def test___imod___from_operator(self):\n    self.assertOnlyIn(((2, 5), (3, 0)), self.detect(\"import operator\\noperator.__imod__()\"))\n\n  def test___imul___from_operator(self):\n    self.assertOnlyIn(((2, 5), (3, 0)), self.detect(\"import operator\\noperator.__imul__()\"))\n\n  def test___index___from_operator(self):\n    self.assertOnlyIn(((2, 5), (3, 0)), self.detect(\"import operator\\noperator.__index__()\"))\n\n  def test___ior___from_operator(self):\n    self.assertOnlyIn(((2, 5), (3, 0)), self.detect(\"import operator\\noperator.__ior__()\"))\n\n  def test___ipow___from_operator(self):\n    self.assertOnlyIn(((2, 5), (3, 0)), self.detect(\"import operator\\noperator.__ipow__()\"))\n\n  def test___irepeat___from_operator(self):\n    self.assertOnlyIn((2, 5), self.detect(\"import operator\\noperator.__irepeat__()\"))\n\n  def test___irshift___from_operator(self):\n    self.assertOnlyIn(((2, 5), (3, 0)), self.detect(\"import operator\\noperator.__irshift__()\"))\n\n  def test___isub___from_operator(self):\n    self.assertOnlyIn(((2, 5), (3, 0)), self.detect(\"import operator\\noperator.__isub__()\"))\n\n  def test___itruediv___from_operator(self):\n    self.assertOnlyIn(((2, 5), (3, 0)), self.detect(\"import operator\\noperator.__itruediv__()\"))\n\n  def test___ixor___from_operator(self):\n    self.assertOnlyIn(((2, 5), (3, 0)), self.detect(\"import operator\\noperator.__ixor__()\"))\n\n  def test___le___from_operator(self):\n    self.assertOnlyIn(((2, 2), (3, 0)), self.detect(\"import operator\\noperator.__le__()\"))\n\n  def test___lt___from_operator(self):\n    self.assertOnlyIn(((2, 2), (3, 0)), self.detect(\"import operator\\noperator.__lt__()\"))\n\n  def test___matmul___from_operator(self):\n    self.assertOnlyIn((3, 5), self.detect(\"import operator\\noperator.__matmul__()\"))\n\n  def test___ne___from_operator(self):\n    self.assertOnlyIn(((2, 2), (3, 0)), self.detect(\"import operator\\noperator.__ne__()\"))\n\n  def test___pow___from_operator(self):\n    self.assertOnlyIn(((2, 3), (3, 0)), self.detect(\"import operator\\noperator.__pow__()\"))\n\n  def test___repeat___from_operator(self):\n    self.assertOnlyIn((2, 0), self.detect(\"import operator\\noperator.__repeat__()\"))\n\n  def test___truediv___from_operator(self):\n    self.assertOnlyIn(((2, 2), (3, 0)), self.detect(\"import operator\\noperator.__truediv__()\"))\n\n  def test_attrgetter_from_operator(self):\n    self.assertOnlyIn(((2, 4), (3, 0)), self.detect(\"import operator\\noperator.attrgetter()\"))\n\n  def test_eq_from_operator(self):\n    self.assertOnlyIn(((2, 2), (3, 0)), self.detect(\"import operator\\noperator.eq()\"))\n\n  def test_floordiv_from_operator(self):\n    self.assertOnlyIn(((2, 2), (3, 0)), self.detect(\"import operator\\noperator.floordiv()\"))\n\n  def test_ge_from_operator(self):\n    self.assertOnlyIn(((2, 2), (3, 0)), self.detect(\"import operator\\noperator.ge()\"))\n\n  def test_gt_from_operator(self):\n    self.assertOnlyIn(((2, 2), (3, 0)), self.detect(\"import operator\\noperator.gt()\"))\n\n  def test_iadd_from_operator(self):\n    self.assertOnlyIn(((2, 5), (3, 0)), self.detect(\"import operator\\noperator.iadd()\"))\n\n  def test_iand_from_operator(self):\n    self.assertOnlyIn(((2, 5), (3, 0)), self.detect(\"import operator\\noperator.iand()\"))\n\n  def test_iconcat_from_operator(self):\n    self.assertOnlyIn(((2, 5), (3, 0)), self.detect(\"import operator\\noperator.iconcat()\"))\n\n  def test_idiv_from_operator(self):\n    self.assertOnlyIn((2, 5), self.detect(\"import operator\\noperator.idiv()\"))\n\n  def test_ifloordiv_from_operator(self):\n    self.assertOnlyIn(((2, 5), (3, 0)), self.detect(\"import operator\\noperator.ifloordiv()\"))\n\n  def test_ilshift_from_operator(self):\n    self.assertOnlyIn(((2, 5), (3, 0)), self.detect(\"import operator\\noperator.ilshift()\"))\n\n  def test_imatmul_from_operator(self):\n    self.assertOnlyIn((3, 5), self.detect(\"import operator\\noperator.imatmul()\"))\n\n  def test_imod_from_operator(self):\n    self.assertOnlyIn(((2, 5), (3, 0)), self.detect(\"import operator\\noperator.imod()\"))\n\n  def test_imul_from_operator(self):\n    self.assertOnlyIn(((2, 5), (3, 0)), self.detect(\"import operator\\noperator.imul()\"))\n\n  def test_index_from_operator(self):\n    self.assertOnlyIn(((2, 5), (3, 0)), self.detect(\"import operator\\noperator.index()\"))\n\n  def test_ior_from_operator(self):\n    self.assertOnlyIn(((2, 5), (3, 0)), self.detect(\"import operator\\noperator.ior()\"))\n\n  def test_ipow_from_operator(self):\n    self.assertOnlyIn(((2, 5), (3, 0)), self.detect(\"import operator\\noperator.ipow()\"))\n\n  def test_irepeat_from_operator(self):\n    self.assertOnlyIn((2, 5), self.detect(\"import operator\\noperator.irepeat()\"))\n\n  def test_irshift_from_operator(self):\n    self.assertOnlyIn(((2, 5), (3, 0)), self.detect(\"import operator\\noperator.irshift()\"))\n\n  def test_is__from_operator(self):\n    self.assertOnlyIn(((2, 3), (3, 0)), self.detect(\"import operator\\noperator.is_()\"))\n\n  def test_is_not_from_operator(self):\n    self.assertOnlyIn(((2, 3), (3, 0)), self.detect(\"import operator\\noperator.is_not()\"))\n\n  def test_isub_from_operator(self):\n    self.assertOnlyIn(((2, 5), (3, 0)), self.detect(\"import operator\\noperator.isub()\"))\n\n  def test_itemgetter_from_operator(self):\n    self.assertOnlyIn(((2, 5), (3, 0)), self.detect(\"import operator\\noperator.itemgetter()\"))\n\n  def test_itruediv_from_operator(self):\n    self.assertOnlyIn(((2, 5), (3, 0)), self.detect(\"import operator\\noperator.itruediv()\"))\n\n  def test_ixor_from_operator(self):\n    self.assertOnlyIn(((2, 5), (3, 0)), self.detect(\"import operator\\noperator.ixor()\"))\n\n  def test_le_from_operator(self):\n    self.assertOnlyIn(((2, 2), (3, 0)), self.detect(\"import operator\\noperator.le()\"))\n\n  def test_length_hint_from_operator(self):\n    self.assertOnlyIn((3, 4), self.detect(\"import operator\\noperator.length_hint()\"))\n\n  def test_lt_from_operator(self):\n    self.assertOnlyIn(((2, 2), (3, 0)), self.detect(\"import operator\\noperator.lt()\"))\n\n  def test_matmul_from_operator(self):\n    self.assertOnlyIn((3, 5), self.detect(\"import operator\\noperator.matmul()\"))\n\n  def test_methodcaller_from_operator(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\"import operator\\noperator.methodcaller()\"))\n\n  def test_ne_from_operator(self):\n    self.assertOnlyIn(((2, 2), (3, 0)), self.detect(\"import operator\\noperator.ne()\"))\n\n  def test_pow_from_operator(self):\n    self.assertOnlyIn(((2, 3), (3, 0)), self.detect(\"import operator\\noperator.pow()\"))\n\n  def test_repeat_from_operator(self):\n    self.assertOnlyIn((2, 0), self.detect(\"import operator\\noperator.repeat()\"))\n\n  def test_truediv_from_operator(self):\n    self.assertOnlyIn(((2, 2), (3, 0)), self.detect(\"import operator\\noperator.truediv()\"))\n\n  def test_WCOREDUMP_from_os(self):\n    self.assertOnlyIn(((2, 3), (3, 0)), self.detect(\"import os\\nos.WCOREDUMP()\"))\n\n  def test_WIFCONTINUED_from_os(self):\n    self.assertOnlyIn(((2, 3), (3, 0)), self.detect(\"import os\\nos.WIFCONTINUED()\"))\n\n  def test_chflags_from_os(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\"import os\\nos.chflags()\"))\n\n  def test_chroot_from_os(self):\n    self.assertOnlyIn(((2, 2), (3, 0)), self.detect(\"import os\\nos.chroot()\"))\n\n  def test_closerange_from_os(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\"import os\\nos.closerange()\"))\n\n  def test_cpu_count_from_os(self):\n    self.assertOnlyIn((3, 4), self.detect(\"import os\\nos.cpu_count()\"))\n\n  def test_fchdir_from_os(self):\n    self.assertOnlyIn(((2, 3), (3, 0)), self.detect(\"import os\\nos.fchdir()\"))\n\n  def test_fchmod_from_os(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\"import os\\nos.fchmod()\"))\n\n  def test_fchown_from_os(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\"import os\\nos.fchown()\"))\n\n  def test_fwalk_from_os(self):\n    self.assertOnlyIn((3, 3), self.detect(\"import os\\nos.fwalk()\"))\n\n  def test_getcwdu_from_os(self):\n    self.assertOnlyIn((2, 3), self.detect(\"import os\\nos.getcwdu()\"))\n\n  def test_getloadavg_from_os(self):\n    self.assertOnlyIn(((2, 3), (3, 0)), self.detect(\"import os\\nos.getloadavg()\"))\n\n  def test_getrandom_from_os(self):\n    self.assertOnlyIn((3, 6), self.detect(\"import os\\nos.getrandom()\"))\n\n  def test_lchflags_from_os(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\"import os\\nos.lchflags()\"))\n\n  def test_lchmod_from_os(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\"import os\\nos.lchmod()\"))\n\n  def test_lchown_from_os(self):\n    self.assertOnlyIn(((2, 3), (3, 0)), self.detect(\"import os\\nos.lchown()\"))\n\n  def test_major_from_os(self):\n    self.assertOnlyIn(((2, 3), (3, 0)), self.detect(\"import os\\nos.major()\"))\n\n  def test_makedev_from_os(self):\n    self.assertOnlyIn(((2, 3), (3, 0)), self.detect(\"import os\\nos.makedev()\"))\n\n  def test_minor_from_os(self):\n    self.assertOnlyIn(((2, 3), (3, 0)), self.detect(\"import os\\nos.minor()\"))\n\n  def test_mknod_from_os(self):\n    self.assertOnlyIn(((2, 3), (3, 0)), self.detect(\"import os\\nos.mknod()\"))\n\n  def test_popen2_from_os(self):\n    self.assertOnlyIn((2, 0), self.detect(\"import os\\nos.popen2()\"))\n\n  def test_popen3_from_os(self):\n    self.assertOnlyIn((2, 0), self.detect(\"import os\\nos.popen3()\"))\n\n  def test_popen4_from_os(self):\n    self.assertOnlyIn((2, 0), self.detect(\"import os\\nos.popen4()\"))\n\n  def test_preadv_from_os(self):\n    self.assertOnlyIn((3, 7), self.detect(\"import os\\nos.preadv()\"))\n\n  def test_pwritev_from_os(self):\n    self.assertOnlyIn((3, 7), self.detect(\"import os\\nos.pwritev()\"))\n\n  def test_replace_from_os(self):\n    self.assertOnlyIn((3, 3), self.detect(\"import os\\nos.replace()\"))\n    self.assertEqual([(0, 0), (0, 0)], self.detect(\"\"\"import os\ns = \"some string\"\ns.replace()\n\"\"\"))\n\n  def test_scandir_from_os(self):\n    self.assertOnlyIn((3, 5), self.detect(\"import os\\nos.scandir()\"))\n\n  def test_close_from_os_scandir(self):\n    self.assertOnlyIn((3, 6),\n                      self.detect(\"from os import scandir\\n\"\n                                  \"scandir().close()\"))\n\n  def test_sched_get_priority_max_from_os(self):\n    self.assertOnlyIn((3, 3), self.detect(\"import os\\nos.sched_get_priority_max()\"))\n\n  def test_sched_get_priority_min_from_os(self):\n    self.assertOnlyIn((3, 3), self.detect(\"import os\\nos.sched_get_priority_min()\"))\n\n  def test_sched_getaffinity_from_os(self):\n    self.assertOnlyIn((3, 3), self.detect(\"import os\\nos.sched_getaffinity()\"))\n\n  def test_sched_getparam_from_os(self):\n    self.assertOnlyIn((3, 3), self.detect(\"import os\\nos.sched_getparam()\"))\n\n  def test_sched_getscheduler_from_os(self):\n    self.assertOnlyIn((3, 3), self.detect(\"import os\\nos.sched_getscheduler()\"))\n\n  def test_sched_rr_get_interval_from_os(self):\n    self.assertOnlyIn((3, 3), self.detect(\"import os\\nos.sched_rr_get_interval()\"))\n\n  def test_sched_setaffinity_from_os(self):\n    self.assertOnlyIn((3, 3), self.detect(\"import os\\nos.sched_setaffinity()\"))\n\n  def test_sched_setparam_from_os(self):\n    self.assertOnlyIn((3, 3), self.detect(\"import os\\nos.sched_setparam()\"))\n\n  def test_sched_setscheduler_from_os(self):\n    self.assertOnlyIn((3, 3), self.detect(\"import os\\nos.sched_setscheduler()\"))\n\n  def test_sched_yield_from_os(self):\n    self.assertOnlyIn((3, 3), self.detect(\"import os\\nos.sched_yield()\"))\n\n  def test_sync_from_os(self):\n    self.assertOnlyIn((3, 3), self.detect(\"import os\\nos.sync()\"))\n\n  def test_truncate_from_os(self):\n    self.assertOnlyIn((3, 3), self.detect(\"import os\\nos.truncate()\"))\n\n  def test_urandom_from_os(self):\n    self.assertOnlyIn(((2, 4), (3, 0)), self.detect(\"import os\\nos.urandom()\"))\n\n  def test_wait3_from_os(self):\n    self.assertOnlyIn(((2, 5), (3, 0)), self.detect(\"import os\\nos.wait3()\"))\n\n  def test_wait4_from_os(self):\n    self.assertOnlyIn(((2, 5), (3, 0)), self.detect(\"import os\\nos.wait4()\"))\n\n  def test_waitid_from_os(self):\n    self.assertOnlyIn((3, 3), self.detect(\"import os\\nos.waitid()\"))\n\n  def test_walk_from_os(self):\n    self.assertOnlyIn(((2, 3), (3, 0)), self.detect(\"import os\\nos.walk()\"))\n\n  def test_pidfd_open_from_os(self):\n    self.assertOnlyIn((3, 9), self.detect(\"import os\\nos.pidfd_open()\"))\n\n  def test_waitstatus_to_exitcode_from_os(self):\n    self.assertOnlyIn((3, 9), self.detect(\"import os\\nos.waitstatus_to_exitcode()\"))\n\n  def test_win32_edition_from_platform(self):\n    self.assertOnlyIn((3, 8), self.detect(\"import platform\\nplatform.win32_edition()\"))\n\n  def test_win32_is_iot_from_platform(self):\n    self.assertOnlyIn((3, 8), self.detect(\"import platform\\nplatform.win32_is_iot()\"))\n\n  def test_capa_from_poplib_POP3(self):\n    self.assertOnlyIn((3, 4),\n                      self.detect(\"from poplib import POP3\\n\"\n                                  \"POP3().capa()\"))\n\n  def test_stls_from_poplib_POP3(self):\n    self.assertOnlyIn((3, 4),\n                      self.detect(\"from poplib import POP3\\n\"\n                                  \"POP3().stls()\"))\n\n  def test_utf8_from_poplib_POP3(self):\n    self.assertOnlyIn((3, 5),\n                      self.detect(\"from poplib import POP3\\n\"\n                                  \"POP3().utf8()\"))\n\n  def test_format_from_pprint_PrettyPrinter(self):\n    self.assertOnlyIn(((2, 3), (3, 0)),\n                      self.detect(\"from pprint import PrettyPrinter\\n\"\n                                  \"PrettyPrinter().format()\"))\n\n  def test_pp_from_pprint(self):\n    self.assertOnlyIn((3, 8), self.detect(\"import pprint\\npprint.pp()\"))\n\n  def test_choices_from_random(self):\n    self.assertOnlyIn((3, 6), self.detect(\"import random\\nrandom.choices()\"))\n\n  def test_getrandbits_from_random(self):\n    self.assertOnlyIn(((2, 4), (3, 0)), self.detect(\"import random\\nrandom.getrandbits()\"))\n\n  def test_getstate_from_random(self):\n    self.assertOnlyIn(((2, 1), (3, 0)), self.detect(\"import random\\nrandom.getstate()\"))\n\n  def test_jumpahead_from_random(self):\n    self.assertOnlyIn((2, 1), self.detect(\"import random\\nrandom.jumpahead()\"))\n\n  def test_sample_from_random(self):\n    self.assertOnlyIn(((2, 3), (3, 0)), self.detect(\"import random\\nrandom.sample()\"))\n\n  def test_setstate_from_random(self):\n    self.assertOnlyIn(((2, 1), (3, 0)), self.detect(\"import random\\nrandom.setstate()\"))\n\n  def test_triangular_from_random(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\"import random\\nrandom.triangular()\"))\n\n  def test_randbytes_from_random(self):\n    self.assertOnlyIn((3, 9), self.detect(\"import random\\nrandom.randbytes()\"))\n\n  def test_fullmatch_from_re_Pattern(self):\n    self.assertOnlyIn((3, 4),\n                      self.detect(\"from re import Pattern\\n\"\n                                  \"Pattern().fullmatch()\"))\n\n  def test_finditer_from_re(self):\n    self.assertOnlyIn(((2, 2), (3, 0)), self.detect(\"import re\\nre.finditer()\"))\n\n  def test_fullmatch_from_re(self):\n    self.assertOnlyIn((3, 4), self.detect(\"import re\\nre.fullmatch()\"))\n\n  def test_append_history_file_from_readline(self):\n    self.assertOnlyIn((3, 5), self.detect(\"import readline\\nreadline.append_history_file()\"))\n\n  def test_clear_history_from_readline(self):\n    self.assertOnlyIn(((2, 4), (3, 0)), self.detect(\"import readline\\nreadline.clear_history()\"))\n\n  def test_get_completer_from_readline(self):\n    self.assertOnlyIn(((2, 3), (3, 0)), self.detect(\"import readline\\nreadline.get_completer()\"))\n\n  def test_get_completion_type_from_readline(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\n        \"import readline\\nreadline.get_completion_type()\"))\n\n  def test_get_current_history_length_from_readline(self):\n    self.assertOnlyIn(((2, 3), (3, 0)), self.detect(\n        \"import readline\\nreadline.get_current_history_length()\"))\n\n  def test_get_history_item_from_readline(self):\n    self.assertOnlyIn(((2, 3), (3, 0)), self.detect(\"import readline\\nreadline.get_history_item()\"))\n\n  def test_remove_history_item_from_readline(self):\n    self.assertOnlyIn(((2, 4), (3, 0)), self.detect(\n        \"import readline\\nreadline.remove_history_item()\"))\n\n  def test_replace_history_item_from_readline(self):\n    self.assertOnlyIn(((2, 4), (3, 0)), self.detect(\n        \"import readline\\nreadline.replace_history_item()\"))\n\n  def test_set_auto_history_from_readline(self):\n    self.assertOnlyIn((3, 6), self.detect(\"import readline\\nreadline.set_auto_history()\"))\n\n  def test_set_completion_display_matches_hook_from_readline(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\n        \"import readline\\nreadline.set_completion_display_matches_hook()\"))\n\n  def test_set_pre_input_hook_from_readline(self):\n    self.assertOnlyIn(((2, 3), (3, 0)), self.detect(\n        \"import readline\\nreadline.set_pre_input_hook()\"))\n\n  def test_set_startup_hook_from_readline(self):\n    self.assertOnlyIn(((2, 3), (3, 0)), self.detect(\"import readline\\nreadline.set_startup_hook()\"))\n\n  def test_prlimit_from_resource(self):\n    self.assertOnlyIn((3, 4), self.detect(\"import resource\\nresource.prlimit()\"))\n\n  def test_devpoll_from_select(self):\n    self.assertOnlyIn((3, 3), self.detect(\"import select\\nselect.devpoll()\"))\n\n  def test_close_from_select_devpoll(self):\n    self.assertOnlyIn((3, 4),\n                      self.detect(\"from select import devpoll\\n\"\n                                  \"devpoll().close()\"))\n\n  def test_fileno_from_select_devpoll(self):\n    self.assertOnlyIn((3, 4),\n                      self.detect(\"from select import devpoll\\n\"\n                                  \"devpoll().fileno()\"))\n\n  def test_epoll_from_select(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\"import select\\nselect.epoll()\"))\n\n  def test_kevent_from_select(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\"import select\\nselect.kevent()\"))\n\n  def test_kqueue_from_select(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\"import select\\nselect.kqueue()\"))\n\n  def test_modify_from_select_poll(self):\n    self.assertOnlyIn(((2, 6), (3, 0)),\n                      self.detect(\"from select import poll\\n\"\n                                  \"poll().modify()\"))\n\n  def test_convert_charref_from_sgmllib_SGMLParser(self):\n    self.assertOnlyIn((2, 5),\n                      self.detect(\"from sgmllib import SGMLParser\\n\"\n                                  \"SGMLParser().convert_charref()\"))\n\n  def test_convert_codepoint_from_sgmllib_SGMLParser(self):\n    self.assertOnlyIn((2, 5),\n                      self.detect(\"from sgmllib import SGMLParser\\n\"\n                                  \"SGMLParser().convert_codepoint()\"))\n\n  def test_convert_entityref_from_sgmllib_SGMLParser(self):\n    self.assertOnlyIn((2, 5),\n                      self.detect(\"from sgmllib import SGMLParser\\n\"\n                                  \"SGMLParser().convert_entityref()\"))\n\n  def test_chown_from_shutil(self):\n    self.assertOnlyIn((3, 3), self.detect(\"import shutil\\nshutil.chown()\"))\n\n  def test_disk_usage_from_shutil(self):\n    self.assertOnlyIn((3, 3), self.detect(\"import shutil\\nshutil.disk_usage()\"))\n\n  def test_get_archive_formats_from_shutil(self):\n    self.assertOnlyIn(((2, 7), (3, 2)), self.detect(\"import shutil\\nshutil.get_archive_formats()\"))\n\n  def test_get_terminal_size_from_shutil(self):\n    self.assertOnlyIn((3, 3), self.detect(\"import shutil\\nshutil.get_terminal_size()\"))\n\n  def test_get_unpack_formats_from_shutil(self):\n    self.assertOnlyIn((3, 2), self.detect(\"import shutil\\nshutil.get_unpack_formats()\"))\n\n  def test_ignore_patterns_from_shutil(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\"import shutil\\nshutil.ignore_patterns()\"))\n\n  def test_make_archive_from_shutil(self):\n    self.assertOnlyIn(((2, 7), (3, 2)), self.detect(\"import shutil\\nshutil.make_archive()\"))\n\n  def test_move_from_shutil(self):\n    self.assertOnlyIn(((2, 3), (3, 0)), self.detect(\"import shutil\\nshutil.move()\"))\n\n  def test_register_archive_format_from_shutil(self):\n    self.assertOnlyIn(((2, 7), (3, 2)), self.detect(\n        \"import shutil\\nshutil.register_archive_format()\"))\n\n  def test_register_unpack_format_from_shutil(self):\n    self.assertOnlyIn((3, 2), self.detect(\"import shutil\\nshutil.register_unpack_format()\"))\n\n  def test_unpack_archive_from_shutil(self):\n    self.assertOnlyIn((3, 2), self.detect(\"import shutil\\nshutil.unpack_archive()\"))\n\n  def test_unregister_archive_format_from_shutil(self):\n    self.assertOnlyIn(((2, 7), (3, 2)), self.detect(\n        \"import shutil\\nshutil.unregister_archive_format()\"))\n\n  def test_unregister_unpack_format_from_shutil(self):\n    self.assertOnlyIn((3, 2), self.detect(\"import shutil\\nshutil.unregister_unpack_format()\"))\n\n  def test_which_from_shutil(self):\n    self.assertOnlyIn((3, 3), self.detect(\"import shutil\\nshutil.which()\"))\n\n  def test_getitimer_from_signal(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\"import signal\\nsignal.getitimer()\"))\n\n  def test_pthread_kill_from_signal(self):\n    self.assertOnlyIn((3, 3), self.detect(\"import signal\\nsignal.pthread_kill()\"))\n\n  def test_pthread_sigmask_from_signal(self):\n    self.assertOnlyIn((3, 3), self.detect(\"import signal\\nsignal.pthread_sigmask()\"))\n\n  def test_raise_signal_from_signal(self):\n    self.assertOnlyIn((3, 8), self.detect(\"import signal\\nsignal.raise_signal()\"))\n\n  def test_set_wakeup_fd_from_signal(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\"import signal\\nsignal.set_wakeup_fd()\"))\n\n  def test_setitimer_from_signal(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\"import signal\\nsignal.setitimer()\"))\n\n  def test_siginterrupt_from_signal(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\"import signal\\nsignal.siginterrupt()\"))\n\n  def test_sigpending_from_signal(self):\n    self.assertOnlyIn((3, 3), self.detect(\"import signal\\nsignal.sigpending()\"))\n\n  def test_sigtimedwait_from_signal(self):\n    self.assertOnlyIn((3, 3), self.detect(\"import signal\\nsignal.sigtimedwait()\"))\n\n  def test_sigwait_from_signal(self):\n    self.assertOnlyIn((3, 3), self.detect(\"import signal\\nsignal.sigwait()\"))\n\n  def test_sigwaitinfo_from_signal(self):\n    self.assertOnlyIn((3, 3), self.detect(\"import signal\\nsignal.sigwaitinfo()\"))\n\n  def test_strsignal_from_signal(self):\n    self.assertOnlyIn((3, 8), self.detect(\"import signal\\nsignal.strsignal()\"))\n\n  def test_valid_signals_from_signal(self):\n    self.assertOnlyIn((3, 8), self.detect(\"import signal\\nsignal.valid_signals()\"))\n\n  def test_pidfd_send_signal_from_signal(self):\n    self.assertOnlyIn((3, 9), self.detect(\"import signal\\nsignal.pidfd_send_signal()\"))\n\n  def test_getsitepackages_from_site(self):\n    self.assertOnlyIn(((2, 7), (3, 2)), self.detect(\"import site\\nsite.getsitepackages()\"))\n\n  def test_getuserbase_from_site(self):\n    self.assertOnlyIn(((2, 7), (3, 2)), self.detect(\"import site\\nsite.getuserbase()\"))\n\n  def test_getusersitepackages_from_site(self):\n    self.assertOnlyIn(((2, 7), (3, 2)), self.detect(\"import site\\nsite.getusersitepackages()\"))\n\n  def test_starttls_from_smtplib_SMTP(self):\n    self.assertOnlyIn(((2, 6), (3, 0)),\n                      self.detect(\"from smtplib import SMTP\\n\"\n                                  \"SMTP().starttls()\"))\n\n  def test_create_connection_from_socket(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\"import socket\\nsocket.create_connection()\"))\n\n  def test_getaddrinfo_from_socket(self):\n    self.assertOnlyIn(((2, 2), (3, 0)), self.detect(\"import socket\\nsocket.getaddrinfo()\"))\n\n  def test_getdefaulttimeout_from_socket(self):\n    self.assertOnlyIn(((2, 3), (3, 0)), self.detect(\"import socket\\nsocket.getdefaulttimeout()\"))\n\n  def test_getnameinfo_from_socket(self):\n    self.assertOnlyIn(((2, 2), (3, 0)), self.detect(\"import socket\\nsocket.getnameinfo()\"))\n\n  def test_inet_ntop_from_socket(self):\n    self.assertOnlyIn(((2, 3), (3, 0)), self.detect(\"import socket\\nsocket.inet_ntop()\"))\n\n  def test_inet_pton_from_socket(self):\n    self.assertOnlyIn(((2, 3), (3, 0)), self.detect(\"import socket\\nsocket.inet_pton()\"))\n\n  def test_setdefaulttimeout_from_socket(self):\n    self.assertOnlyIn(((2, 3), (3, 0)), self.detect(\"import socket\\nsocket.setdefaulttimeout()\"))\n\n  def test_gettimeout_from_socket_socket(self):\n    self.assertOnlyIn(((2, 3), (3, 0)),\n                      self.detect(\"from socket import socket\\n\"\n                                  \"socket().gettimeout()\"))\n\n  def test_ioctl_from_socket_socket(self):\n    self.assertOnlyIn(((2, 6), (3, 0)),\n                      self.detect(\"from socket import socket\\n\"\n                                  \"socket().ioctl()\"))\n\n  def test_recv_into_from_socket_socket(self):\n    self.assertOnlyIn(((2, 5), (3, 0)),\n                      self.detect(\"from socket import socket\\n\"\n                                  \"socket().recv_into()\"))\n\n  def test_recvfrom_into_from_socket_socket(self):\n    self.assertOnlyIn(((2, 5), (3, 0)),\n                      self.detect(\"from socket import socket\\n\"\n                                  \"socket().recvfrom_into()\"))\n\n  def test_settimeout_from_socket_socket(self):\n    self.assertOnlyIn(((2, 3), (3, 0)),\n                      self.detect(\"from socket import socket\\n\"\n                                  \"socket().settimeout()\"))\n\n  def test_socketpair_from_socket(self):\n    self.assertOnlyIn(((2, 4), (3, 0)), self.detect(\"import socket\\nsocket.socketpair()\"))\n\n  def test_service_actions_from_socketserver_BaseServer(self):\n    self.assertOnlyIn((3, 3),\n                      self.detect(\"from socketserver import BaseServer\\n\"\n                                  \"BaseServer().service_actions()\"))\n\n  def test_backup_from_sqlite3_Connection(self):\n    self.assertOnlyIn((3, 7),\n                      self.detect(\"from sqlite3 import Connection\\n\"\n                                  \"Connection().backup()\"))\n\n  def test_compression_from_ssl_SSLSocket(self):\n    self.assertOnlyIn(((2, 7), (3, 3)),\n                      self.detect(\"from ssl import SSLSocket\\n\"\n                                  \"SSLSocket().compression()\"))\n\n  def test_get_channel_binding_from_ssl_SSLSocket(self):\n    self.assertOnlyIn(((2, 7), (3, 3)),\n                      self.detect(\"from ssl import SSLSocket\\n\"\n                                  \"SSLSocket().get_channel_binding()\"))\n\n  def test_selected_alpn_protocol_from_ssl_SSLSocket(self):\n    self.assertOnlyIn(((2, 7), (3, 5)),\n                      self.detect(\"from ssl import SSLSocket\\n\"\n                                  \"SSLSocket().selected_alpn_protocol()\"))\n\n  def test_selected_npn_protocol_from_ssl_SSLSocket(self):\n    self.assertOnlyIn(((2, 7), (3, 3)),\n                      self.detect(\"from ssl import SSLSocket\\n\"\n                                  \"SSLSocket().selected_npn_protocol()\"))\n\n  def test_sendfile_from_ssl_SSLSocket(self):\n    self.assertOnlyIn((3, 5),\n                      self.detect(\"from ssl import SSLSocket\\n\"\n                                  \"SSLSocket().sendfile()\"))\n\n  def test_shared_ciphers_from_ssl_SSLSocket(self):\n    self.assertOnlyIn((3, 5),\n                      self.detect(\"from ssl import SSLSocket\\n\"\n                                  \"SSLSocket().shared_ciphers()\"))\n\n  def test_version_from_ssl_SSLSocket(self):\n    self.assertOnlyIn(((2, 7), (3, 5)),\n                      self.detect(\"from ssl import SSLSocket\\n\"\n                                  \"SSLSocket().version()\"))\n\n  def test_rsplit_from_string(self):\n    self.assertOnlyIn((2, 4), self.detect(\"import string\\nstring.rsplit()\"))\n\n  def test_iter_unpack_from_struct_Struct(self):\n    self.assertOnlyIn((3, 4),\n                      self.detect(\"from struct import Struct\\n\"\n                                  \"Struct().iter_unpack()\"))\n\n  def test_iter_unpack_from_struct(self):\n    self.assertOnlyIn((3, 4), self.detect(\"import struct\\nstruct.iter_unpack()\"))\n\n  def test_pack_into_from_struct(self):\n    self.assertOnlyIn(((2, 5), (3, 0)), self.detect(\"import struct\\nstruct.pack_into()\"))\n\n  def test_unpack_from_from_struct(self):\n    self.assertOnlyIn(((2, 5), (3, 0)), self.detect(\"import struct\\nstruct.unpack_from()\"))\n\n  def test__clear_type_cache_from_sys(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\"import sys\\nsys._clear_type_cache()\"))\n\n  def test__current_frames_from_sys(self):\n    self.assertOnlyIn(((2, 5), (3, 0)), self.detect(\"import sys\\nsys._current_frames()\"))\n\n  def test__debugmallocstats_from_sys(self):\n    self.assertOnlyIn((3, 3), self.detect(\"import sys\\nsys._debugmallocstats()\"))\n\n  def test__enablelegacywindowsfsencoding_from_sys(self):\n    self.assertOnlyIn((3, 6), self.detect(\"import sys\\nsys._enablelegacywindowsfsencoding()\"))\n\n  def test_breakpointhook_from_sys(self):\n    self.assertOnlyIn((3, 7), self.detect(\"import sys\\nsys.breakpointhook()\"))\n\n  def test_get_asyncgen_hooks_from_sys(self):\n    self.assertOnlyIn((3, 6), self.detect(\"import sys\\nsys.get_asyncgen_hooks()\"))\n\n  def test_get_coroutine_origin_tracking_depth_from_sys(self):\n    self.assertOnlyIn((3, 7), self.detect(\"import sys\\nsys.get_coroutine_origin_tracking_depth()\"))\n\n  def test_getallocatedblocks_from_sys(self):\n    self.assertOnlyIn((3, 4), self.detect(\"import sys\\nsys.getallocatedblocks()\"))\n\n  def test_getandroidapilevel_from_sys(self):\n    self.assertOnlyIn((3, 7), self.detect(\"import sys\\nsys.getandroidapilevel()\"))\n\n  def test_getfilesystemencodeerrors_from_sys(self):\n    self.assertOnlyIn((3, 6), self.detect(\"import sys\\nsys.getfilesystemencodeerrors()\"))\n\n  def test_getswitchinterval_from_sys(self):\n    self.assertOnlyIn((3, 2), self.detect(\"import sys\\nsys.getswitchinterval()\"))\n\n  def test_is_finalizing_from_sys(self):\n    self.assertOnlyIn((3, 5), self.detect(\"import sys\\nsys.is_finalizing()\"))\n\n  def test_set_asyncgen_hooks_from_sys(self):\n    self.assertOnlyIn((3, 6), self.detect(\"import sys\\nsys.set_asyncgen_hooks()\"))\n\n  def test_set_coroutine_origin_tracking_depth_from_sys(self):\n    self.assertOnlyIn((3, 7), self.detect(\"import sys\\nsys.set_coroutine_origin_tracking_depth()\"))\n\n  def test_setdefaultencoding_from_sys(self):\n    self.assertOnlyIn((2, 0), self.detect(\"import sys\\nsys.setdefaultencoding()\"))\n\n  def test_setdlopenflags_from_sys(self):\n    self.assertOnlyIn(((2, 2), (3, 0)), self.detect(\"import sys\\nsys.setdlopenflags()\"))\n\n  def test_setswitchinterval_from_sys(self):\n    self.assertOnlyIn((3, 2), self.detect(\"import sys\\nsys.setswitchinterval()\"))\n\n  def test_settscdump_from_sys(self):\n    self.assertOnlyIn((2, 4), self.detect(\"import sys\\nsys.settscdump()\"))\n\n  def test_read_sb_data_from_telnetlib_Telnet(self):\n    self.assertOnlyIn(((2, 3), (3, 0)),\n                      self.detect(\"from telnetlib import Telnet\\n\"\n                                  \"Telnet().read_sb_data()\"))\n\n  def test_NamedTemporaryFile_from_tempfile(self):\n    self.assertOnlyIn(((2, 3), (3, 0)), self.detect(\n        \"import tempfile\\ntempfile.NamedTemporaryFile()\"))\n\n  def test_SpooledTemporaryFile_from_tempfile(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\n        \"import tempfile\\ntempfile.SpooledTemporaryFile()\"))\n\n  def test_TemporaryDirectory_from_tempfile(self):\n    self.assertOnlyIn((3, 2), self.detect(\"import tempfile\\ntempfile.TemporaryDirectory()\"))\n\n  def test_gettempdir_from_tempfile(self):\n    self.assertOnlyIn(((2, 3), (3, 0)), self.detect(\"import tempfile\\ntempfile.gettempdir()\"))\n\n  def test_gettempdirb_from_tempfile(self):\n    self.assertOnlyIn((3, 5), self.detect(\"import tempfile\\ntempfile.gettempdirb()\"))\n\n  def test_gettempprefixb_from_tempfile(self):\n    self.assertOnlyIn((3, 5), self.detect(\"import tempfile\\ntempfile.gettempprefixb()\"))\n\n  def test_mkdtemp_from_tempfile(self):\n    self.assertOnlyIn(((2, 3), (3, 0)), self.detect(\"import tempfile\\ntempfile.mkdtemp()\"))\n\n  def test_mkstemp_from_tempfile(self):\n    self.assertOnlyIn(((2, 3), (3, 0)), self.detect(\"import tempfile\\ntempfile.mkstemp()\"))\n\n  def test_interrupt_main_from_thread(self):\n    self.assertOnlyIn((2, 3), self.detect(\"import thread\\nthread.interrupt_main()\"))\n\n  def test_stack_size_from_thread(self):\n    self.assertOnlyIn((2, 5), self.detect(\"import thread\\nthread.stack_size()\"))\n\n  def test_notify_all_from_threading_Condition(self):\n    self.assertOnlyIn(((2, 6), (3, 0)),\n                      self.detect(\"from threading import Condition\\n\"\n                                  \"Condition().notify_all()\"))\n\n  def test_wait_for_from_threading_Condition(self):\n    self.assertOnlyIn((3, 2),\n                      self.detect(\"from threading import Condition\\n\"\n                                  \"Condition().wait_for()\"))\n\n  def test_is_set_from_threading_Event(self):\n    self.assertOnlyIn(((2, 6), (3, 0)),\n                      self.detect(\"from threading import Event\\n\"\n                                  \"Event().is_set()\"))\n\n  def test_is_alive_from_threading_Thread(self):\n    self.assertOnlyIn(((2, 6), (3, 0)),\n                      self.detect(\"from threading import Thread\\n\"\n                                  \"Thread().is_alive()\"))\n\n  def test_active_count_from_threading(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\"import threading\\nthreading.active_count()\"))\n\n  def test_current_thread_from_threading(self):\n    self.assertOnlyIn(((2, 6), (3, 0)), self.detect(\"import threading\\nthreading.current_thread()\"))\n\n  def test_setprofile_from_threading(self):\n    self.assertOnlyIn(((2, 3), (3, 0)), self.detect(\"import threading\\nthreading.setprofile()\"))\n\n  def test_settrace_from_threading(self):\n    self.assertOnlyIn(((2, 3), (3, 0)), self.detect(\"import threading\\nthreading.settrace()\"))\n\n  def test_stack_size_from_threading(self):\n    self.assertOnlyIn(((2, 5), (3, 0)), self.detect(\"import threading\\nthreading.stack_size()\"))\n\n  def test_tzset_from_time(self):\n    self.assertOnlyIn(((2, 3), (3, 0)), self.detect(\"import time\\ntime.tzset()\"))\n\n  def test_autorange_from_timeit_Timer(self):\n    self.assertOnlyIn((3, 6),\n                      self.detect(\"from timeit import Timer\\n\"\n                                  \"Timer().autorange()\"))\n\n  def test_clear_frames_from_traceback(self):\n    self.assertOnlyIn((3, 4), self.detect(\"import traceback\\ntraceback.clear_frames()\"))\n\n  def test_format_exc_from_traceback(self):\n    self.assertOnlyIn(((2, 4), (3, 0)), self.detect(\"import traceback\\ntraceback.format_exc()\"))\n\n  def test_walk_stack_from_traceback(self):\n    self.assertOnlyIn((3, 5), self.detect(\"import traceback\\ntraceback.walk_stack()\"))\n\n  def test_walk_tb_from_traceback(self):\n    self.assertOnlyIn((3, 5), self.detect(\"import traceback\\ntraceback.walk_tb()\"))\n\n  def test_replace_from_types_CodeType(self):\n    self.assertOnlyIn((3, 8),\n                      self.detect(\"from types import CodeType\\n\"\n                                  \"CodeType().replace()\"))\n\n  def test_DynamicClassAttribute_from_types(self):\n    self.assertOnlyIn((3, 4), self.detect(\"import types\\ntypes.DynamicClassAttribute()\"))\n\n  def test_clear_from_types_FrameType(self):\n    self.assertOnlyIn((3, 4),\n                      self.detect(\"from types import FrameType\\n\"\n                                  \"FrameType().clear()\"))\n\n  def test_coroutine_from_types(self):\n    self.assertOnlyIn((3, 5), self.detect(\"import types\\ntypes.coroutine()\"))\n\n  def test_new_class_from_types(self):\n    self.assertOnlyIn((3, 3), self.detect(\"import types\\ntypes.new_class()\"))\n\n  def test_prepare_class_from_types(self):\n    self.assertOnlyIn((3, 3), self.detect(\"import types\\ntypes.prepare_class()\"))\n\n  def test_resolve_bases_from_types(self):\n    self.assertOnlyIn((3, 7), self.detect(\"import types\\ntypes.resolve_bases()\"))\n\n  def test_east_asian_width_from_unicodedata(self):\n    self.assertOnlyIn(((2, 4), (3, 0)), self.detect(\n        \"import unicodedata\\nunicodedata.east_asian_width()\"))\n\n  def test_normalize_from_unicodedata(self):\n    self.assertOnlyIn(((2, 3), (3, 0)), self.detect(\"import unicodedata\\nunicodedata.normalize()\"))\n\n  def test_addClassCleanup_from_unittest_TestCase(self):\n    self.assertOnlyIn((3, 8),\n                      self.detect(\"from unittest import TestCase\\n\"\n                                  \"TestCase().addClassCleanup()\"))\n\n  def test_assertCountEqual_from_unittest_TestCase(self):\n    self.assertOnlyIn((3, 2),\n                      self.detect(\"from unittest import TestCase\\n\"\n                                  \"TestCase().assertCountEqual()\"))\n\n  def test_assertLogs_from_unittest_TestCase(self):\n    self.assertOnlyIn((3, 4),\n                      self.detect(\"from unittest import TestCase\\n\"\n                                  \"TestCase().assertLogs()\"))\n\n  def test_assertRaisesRegex_from_unittest_TestCase(self):\n    self.assertOnlyIn((3, 2),\n                      self.detect(\"from unittest import TestCase\\n\"\n                                  \"TestCase().assertRaisesRegex()\"))\n\n  def test_assertWarns_from_unittest_TestCase(self):\n    self.assertOnlyIn((3, 2),\n                      self.detect(\"from unittest import TestCase\\n\"\n                                  \"TestCase().assertWarns()\"))\n\n  def test_assertWarnsRegex_from_unittest_TestCase(self):\n    self.assertOnlyIn((3, 2),\n                      self.detect(\"from unittest import TestCase\\n\"\n                                  \"TestCase().assertWarnsRegex()\"))\n\n  def test_doClassCleanups_from_unittest_TestCase(self):\n    self.assertOnlyIn((3, 8),\n                      self.detect(\"from unittest import TestCase\\n\"\n                                  \"TestCase().doClassCleanups()\"))\n\n  def test_setUpClass_from_unittest_TestCase(self):\n    self.assertOnlyIn(((2, 7), (3, 2)),\n                      self.detect(\"from unittest import TestCase\\n\"\n                                  \"TestCase().setUpClass()\"))\n\n  def test_skipTest_from_unittest_TestCase(self):\n    self.assertOnlyIn(((2, 7), (3, 1)),\n                      self.detect(\"from unittest import TestCase\\n\"\n                                  \"TestCase().skipTest()\"))\n\n  def test_subTest_from_unittest_TestCase(self):\n    self.assertOnlyIn((3, 4),\n                      self.detect(\"from unittest import TestCase\\n\"\n                                  \"TestCase().subTest()\"))\n\n  def test_tearDownClass_from_unittest_TestCase(self):\n    self.assertOnlyIn(((2, 7), (3, 2)),\n                      self.detect(\"from unittest import TestCase\\n\"\n                                  \"TestCase().tearDownClass()\"))\n\n  def test_addSubTest_from_unittest_TestResult(self):\n    self.assertOnlyIn((3, 4),\n                      self.detect(\"from unittest import TestResult\\n\"\n                                  \"TestResult().addSubTest()\"))\n\n  def test_installHandler_from_unittest(self):\n    self.assertOnlyIn(((2, 7), (3, 2)), self.detect(\"import unittest\\nunittest.installHandler()\"))\n\n  def test_assert_called_from_unittest_mock_Mock(self):\n    self.assertOnlyIn((3, 6),\n                      self.detect(\"from unittest.mock import Mock\\n\"\n                                  \"Mock().assert_called()\"))\n\n  def test_assert_called_once_from_unittest_mock_Mock(self):\n    self.assertOnlyIn((3, 6),\n                      self.detect(\"from unittest.mock import Mock\\n\"\n                                  \"Mock().assert_called_once()\"))\n\n  def test_assert_not_called_from_unittest_mock_Mock(self):\n    self.assertOnlyIn((3, 5),\n                      self.detect(\"from unittest.mock import Mock\\n\"\n                                  \"Mock().assert_not_called()\"))\n\n  def test_registerResult_from_unittest(self):\n    self.assertOnlyIn(((2, 7), (3, 2)), self.detect(\"import unittest\\nunittest.registerResult()\"))\n\n  def test_removeHandler_from_unittest(self):\n    self.assertOnlyIn(((2, 7), (3, 2)), self.detect(\"import unittest\\nunittest.removeHandler()\"))\n\n  def test_removeResult_from_unittest(self):\n    self.assertOnlyIn(((2, 7), (3, 2)), self.detect(\"import unittest\\nunittest.removeResult()\"))\n\n  def test_remove_header_from_urllib_request_Request(self):\n    self.assertOnlyIn((3, 4),\n                      self.detect(\"from urllib.request import Request\\n\"\n                                  \"Request().remove_header()\"))\n\n  def test_crawl_delay_from_urllib_robotparser_RobotFileParser(self):\n    self.assertOnlyIn((3, 6),\n                      self.detect(\"from urllib.robotparser import RobotFileParser\\n\"\n                                  \"RobotFileParser().crawl_delay()\"))\n\n  def test_request_rate_from_urllib_robotparser_RobotFileParser(self):\n    self.assertOnlyIn((3, 6),\n                      self.detect(\"from urllib.robotparser import RobotFileParser\\n\"\n                                  \"RobotFileParser().request_rate()\"))\n\n  def test_site_maps_from_urllib_robotparser_RobotFileParser(self):\n    self.assertOnlyIn((3, 8),\n                      self.detect(\"from urllib.robotparser import RobotFileParser\\n\"\n                                  \"RobotFileParser().site_maps()\"))\n\n  def test_getcode_from_urllib_urlopen(self):\n    self.assertOnlyIn((2, 6),\n                      self.detect(\"from urllib import urlopen\\n\"\n                                  \"urlopen().getcode()\"))\n\n  def test_add_unredirected_header_from_urllib2_Request(self):\n    self.assertOnlyIn((2, 4),\n                      self.detect(\"from urllib2 import Request\\n\"\n                                  \"Request().add_unredirected_header()\"))\n\n  def test_has_header_from_urllib2_Request(self):\n    self.assertOnlyIn((2, 4),\n                      self.detect(\"from urllib2 import Request\\n\"\n                                  \"Request().has_header()\"))\n\n  def test_geturl_from_urlparse_ParseResult(self):\n    self.assertOnlyIn((2, 5),\n                      self.detect(\"from urlparse import ParseResult\\n\"\n                                  \"ParseResult().geturl()\"))\n\n  def test_parse_qs_from_urlparse(self):\n    self.assertOnlyIn((2, 6), self.detect(\"import urlparse\\nurlparse.parse_qs()\"))\n\n  def test_parse_qsl_from_urlparse(self):\n    self.assertOnlyIn((2, 6), self.detect(\"import urlparse\\nurlparse.parse_qsl()\"))\n\n  def test_urlsplit_from_urlparse(self):\n    self.assertOnlyIn((2, 2), self.detect(\"import urlparse\\nurlparse.urlsplit()\"))\n\n  def test_urlunsplit_from_urlparse(self):\n    self.assertOnlyIn((2, 2), self.detect(\"import urlparse\\nurlparse.urlunsplit()\"))\n\n  def test_create_from_venv(self):\n    self.assertOnlyIn((3, 3), self.detect(\"import venv\\nvenv.create()\"))\n\n  def test_open_new_tab_from_webbrowser_controller(self):\n    self.assertOnlyIn(((2, 5), (3, 0)),\n                      self.detect(\"from webbrowser import controller\\n\"\n                                  \"controller().open_new_tab()\"))\n\n  def test_open_new_tab_from_webbrowser(self):\n    self.assertOnlyIn(((2, 5), (3, 0)), self.detect(\"import webbrowser\\nwebbrowser.open_new_tab()\"))\n\n  def test_CreateKeyEx_from_winreg(self):\n    self.assertOnlyIn((3, 2), self.detect(\"import winreg\\nwinreg.CreateKeyEx()\"))\n\n  def test_DeleteKeyEx_from_winreg(self):\n    self.assertOnlyIn((3, 2), self.detect(\"import winreg\\nwinreg.DeleteKeyEx()\"))\n\n  def test_MessageBeep_from_winsound(self):\n    self.assertOnlyIn(((2, 3), (3, 0)), self.detect(\"import winsound\\nwinsound.MessageBeep()\"))\n\n  def test_normalize_from_xml_dom_Node(self):\n    self.assertOnlyIn(((2, 1), (3, 0)),\n                      self.detect(\"from xml.dom import Node\\n\"\n                                  \"Node().normalize()\"))\n\n  def test_toprettyxml_from_xml_dom_minidom_Node(self):\n    self.assertOnlyIn(((2, 1), (3, 0)),\n                      self.detect(\"from xml.dom.minidom import Node\\n\"\n                                  \"Node().toprettyxml()\"))\n\n  def test_pi_from_xml_etree_ElementTree_TreeBuilder(self):\n    self.assertOnlyIn((3, 8),\n                      self.detect(\"from xml.etree.ElementTree import TreeBuilder\\n\"\n                                  \"TreeBuilder().pi()\"))\n\n  def test_EntityDeclHandler_from_xml_parsers_expat_XMLParserType(self):\n    self.assertOnlyIn(((2, 1), (3, 0)),\n                      self.detect(\"from xml.parsers.expat import XMLParserType\\n\"\n                                  \"XMLParserType().EntityDeclHandler()\"))\n\n  def test_GetInputContext_from_xml_parsers_expat_XMLParserType(self):\n    self.assertOnlyIn(((2, 1), (3, 0)),\n                      self.detect(\"from xml.parsers.expat import XMLParserType\\n\"\n                                  \"XMLParserType().GetInputContext()\"))\n\n  def test_UseForeignDTD_from_xml_parsers_expat_XMLParserType(self):\n    self.assertOnlyIn(((2, 3), (3, 0)),\n                      self.detect(\"from xml.parsers.expat import XMLParserType\\n\"\n                                  \"XMLParserType().UseForeignDTD()\"))\n\n  def test_XmlDeclHandler_from_xml_parsers_expat_XMLParserType(self):\n    self.assertOnlyIn(((2, 1), (3, 0)),\n                      self.detect(\"from xml.parsers.expat import XMLParserType\\n\"\n                                  \"XMLParserType().XmlDeclHandler()\"))\n\n  def test_copy_from_zlib_Compress(self):\n    self.assertOnlyIn(((2, 5), (3, 0)),\n                      self.detect(\"from zlib import Compress\\n\"\n                                  \"Compress().copy()\"))\n\n  def test_copy_from_zlib_Decompress(self):\n    self.assertOnlyIn(((2, 5), (3, 0)),\n                      self.detect(\"from zlib import Decompress\\n\"\n                                  \"Decompress().copy()\"))\n\n  def test_unparse_from_ast(self):\n    self.assertOnlyIn((3, 9), self.detect(\"import ast\\nast.unparse()\"))\n\n  def test_reset_peak_from_tracemalloc(self):\n    self.assertOnlyIn((3, 9), self.detect(\"import tracemalloc\\ntracemalloc.reset_peak()\"))\n\n  def test_upgrade_dependencies_from_venv_EnvBuilder(self):\n    self.assertOnlyIn((3, 9),\n                      self.detect(\"from venv import EnvBuilder\\n\"\n                                  \"EnvBuilder().upgrade_dependencies()\"))\n\n  def test_issoftkeyword_from_keyword(self):\n    self.assertOnlyIn((3, 9), self.detect(\"from keyword import issoftkeyword\"))\n\n  def test_print_warning_from_test_support(self):\n    self.assertOnlyIn((3, 9), self.detect(\"from test.support import print_warning\"))\n\n  def test_wait_process_from_test_support(self):\n    self.assertOnlyIn((3, 9), self.detect(\"from test.support import wait_process\"))\n\n  def test_zscore_from_statistics_NormalDist(self):\n    self.assertOnlyIn((3, 9),\n                      self.detect(\"from statistics import NormalDist\\nNormalDist().zscore()\"))\n\n  def test_send_fds_from_socket(self):\n    self.assertOnlyIn((3, 9), self.detect(\"from socket import send_fds\"))\n\n  def test_recv_fds_from_socket(self):\n    self.assertOnlyIn((3, 9), self.detect(\"from socket import recv_fds\"))\n\n  def test_create_module_from_importlib_machinery_FrozenImporter(self):\n    self.assertOnlyIn((3, 4),\n                      self.detect(\"import importlib.machinery.FrozenImporter\\n\"\n                                  \"importlib.machinery.FrozenImporter.create_module()\"))\n\n  def test_exec_module_from_importlib_machinery_FrozenImporter(self):\n    self.assertOnlyIn((3, 4),\n                      self.detect(\"import importlib.machinery.FrozenImporter\\n\"\n                                  \"importlib.machinery.FrozenImporter.exec_module()\"))\n\n  def test_get_stats_profile_from_pstats_Stats(self):\n    self.assertOnlyIn((3, 9), self.detect(\"import pstats.Stats\\npstats.Stats.get_stats_profile()\"))\n"
    },
    "skipped": [],
    "total_files": 62
}